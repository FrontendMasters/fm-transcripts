WEBVTT

1
00:00:00.000 --> 00:00:04.408
But there is one more, that has
nothing to do with service workers and

2
00:00:04.408 --> 00:00:07.155
all the rest will be service worker based.

3
00:00:07.155 --> 00:00:09.046
Why do we want to execute
go in the background?

4
00:00:09.046 --> 00:00:11.252
We have already gone over some use cases.

5
00:00:11.252 --> 00:00:13.989
But for example network requests.

6
00:00:13.989 --> 00:00:18.298
We have already mentioned,
what happens if the network

7
00:00:18.298 --> 00:00:23.256
requests it's in the middle of
the user go into the background.

8
00:00:23.256 --> 00:00:28.620
To sync data, to notify the user
that something has changed,

9
00:00:28.620 --> 00:00:32.541
or something important
is happening there or

10
00:00:32.541 --> 00:00:36.576
to continue pending
tasks in the background.

11
00:00:36.576 --> 00:00:41.448
I'm downloading a file,
I'm still sending data to the server and

12
00:00:41.448 --> 00:00:47.196
I want to continue doing that stuff even
if the user is not using my app anymore.

13
00:00:47.196 --> 00:00:50.168
But talking about network requests.

14
00:00:50.168 --> 00:00:52.897
I want to take a minute to talk about this

15
00:00:52.897 --> 00:00:57.128
before getting into the service
worker additional API's.

16
00:00:57.128 --> 00:01:01.581
If your web app goes to the background,
why the network requests in process,

17
00:01:01.581 --> 00:01:02.687
it may be a border.

18
00:01:02.687 --> 00:01:04.553
It depends on the browser.

19
00:01:04.553 --> 00:01:07.480
It depends on the OS.

20
00:01:07.480 --> 00:01:11.263
So solutions, The Beacon API,

21
00:01:11.263 --> 00:01:15.476
that's one solution if suitable.

22
00:01:15.476 --> 00:01:19.086
I will explain what that is a minute and
what is the Beacon API?

23
00:01:19.086 --> 00:01:26.089
The Web Background Synchronization API,
also known as the Background Sync API.

24
00:01:26.089 --> 00:01:30.193
Because then, you may continue,
not continue,

25
00:01:30.193 --> 00:01:36.071
you may initiate the request directly
in the service worker's scope.

26
00:01:36.071 --> 00:01:39.056
That we know has nothing
to do with the window.

27
00:01:39.056 --> 00:01:44.011
So, if you need to send or
receive data to the server,

28
00:01:44.011 --> 00:01:50.084
you do that in a separate thread
that is detached from the window.

29
00:01:50.084 --> 00:01:55.072
So you may close the window that
the service worker is still there with

30
00:01:55.072 --> 00:01:59.635
execution rights and
it will make the network request for you.

31
00:01:59.635 --> 00:02:04.633
The problem,
the Background Synchronization API is

32
00:02:04.633 --> 00:02:07.964
not available in every browser, so

33
00:02:07.964 --> 00:02:13.416
you always need a fallback for
Safari and Firefox, okay?

34
00:02:13.416 --> 00:02:18.938
Also, you have the Background Fetch API
for some specific use cases and

35
00:02:18.938 --> 00:02:24.381
that's actually to download,
not uploading, downloading files.

36
00:02:24.381 --> 00:02:26.553
And it's prepared for large files.

37
00:02:26.553 --> 00:02:30.366
We will see an example of
each of these options.

38
00:02:30.366 --> 00:02:34.548
Talking about the Beacon API, have you
heard about this API, the Beacon API?

39
00:02:34.548 --> 00:02:38.084
It's available on every browser.

40
00:02:38.084 --> 00:02:43.772
So the beacon API is for request where
we don't care about the response.

41
00:02:43.772 --> 00:02:46.092
In fact we will ignore the response.

42
00:02:48.496 --> 00:02:51.914
So it's a beacon, we're sending a beacon.

43
00:02:51.914 --> 00:02:53.641
So this is for analytics.

44
00:02:55.057 --> 00:03:02.133
For sending data, for
saving a like on a post.

45
00:03:02.133 --> 00:03:06.054
And because we don't
care about the response,

46
00:03:06.054 --> 00:03:11.455
the browser is going to do that not
matter if you close the window.

47
00:03:11.455 --> 00:03:15.526
It goes to a queue of beacons to be sent.

48
00:03:15.526 --> 00:03:18.682
There has nothing to do with a webpage.

49
00:03:18.682 --> 00:03:21.090
So it's not giving you
a promise in return.

50
00:03:21.090 --> 00:03:25.607
So it's not giving you a data,
it's just give you a Boolean.

51
00:03:25.607 --> 00:03:32.198
If it's registered or not, and you don't
know when it actually hits the server.

52
00:03:32.198 --> 00:03:34.556
You don't know,
you don't care because it's a Beacon.

53
00:03:34.556 --> 00:03:40.033
For example, on visibility change
you could send a beacon and

54
00:03:40.033 --> 00:03:43.192
the API is actually pretty simple,

55
00:03:43.192 --> 00:03:47.846
navigator dot set Beacon,
URL, data that's all.

56
00:03:47.846 --> 00:03:51.486
So it's a very simple API but
it has a tricky part.

57
00:03:51.486 --> 00:03:58.142
That you cannot set your own http headers,
it's it's kind of weird.

58
00:03:58.142 --> 00:04:03.473
So what if you want to send JSON,
for example.

59
00:04:03.473 --> 00:04:07.796
So you need to set the content type and
we don't have the header so

60
00:04:07.796 --> 00:04:12.458
we can't set it so there is a trick,
so let me show you how that works.

61
00:04:12.458 --> 00:04:16.783
So for example here in my background.js
I have a section for Beacons.

62
00:04:16.783 --> 00:04:18.375
I already have a btn, so

63
00:04:18.375 --> 00:04:22.931
when you click on that btn we will
send a beacon to the server, okay.

64
00:04:22.931 --> 00:04:26.835
So, it's navigator.sendBeacon.

65
00:04:26.835 --> 00:04:27.668
So, pretty simple.

66
00:04:27.668 --> 00:04:29.797
You see, URL, data.

67
00:04:29.797 --> 00:04:31.464
That's all.

68
00:04:31.464 --> 00:04:34.690
So, for the URL, my server, the server,

69
00:04:34.690 --> 00:04:40.259
the Node.js server that we are using
here already has an endpoint/log.

70
00:04:40.259 --> 00:04:45.493
That receives something from a JSON and
renders that in the console.

71
00:04:45.493 --> 00:04:48.072
It's body in it or undefined.

72
00:04:48.072 --> 00:04:50.334
What's body in it?

73
00:04:50.334 --> 00:04:53.624
It can be a string or it can be blob.

74
00:04:53.624 --> 00:05:01.057
So, if I have a message to send,
Let's say data,

75
00:05:01.057 --> 00:05:06.491
and its a JSON with a message and
we can have more properties.

76
00:05:06.491 --> 00:05:11.397
Hello from frontend So

77
00:05:11.397 --> 00:05:16.440
if I want to send this to
log I should use something

78
00:05:16.440 --> 00:05:21.244
like JSON.stringify my old friend message.

79
00:05:21.244 --> 00:05:24.888
Okay.
The problem with this is that I'm not

80
00:05:24.888 --> 00:05:27.516
setting the right headers.

81
00:05:27.516 --> 00:05:30.061
So server side, that might not work.

82
00:05:30.061 --> 00:05:38.228
So if I try this, It works in Safari,
it works in Chrome.

83
00:05:38.228 --> 00:05:42.176
So if I'm going back,
I have here a Send a Beacon.

84
00:05:42.176 --> 00:05:44.995
So if I click here, client side.

85
00:05:44.995 --> 00:05:48.334
I don't know what happens.

86
00:05:48.334 --> 00:05:52.488
In Chrome, at least you can

87
00:05:52.488 --> 00:05:57.731
actually see that in the network.

88
00:05:57.731 --> 00:06:00.969
Tab, so if I'm in the network tab.

89
00:06:03.184 --> 00:06:07.408
If I send a Beacon,
where first I think I have a type or

90
00:06:07.408 --> 00:06:10.492
something, message is not defined.

91
00:06:10.492 --> 00:06:14.490
Yeah, you're right,
because I called it data.

92
00:06:14.490 --> 00:06:18.221
And there are plenty of people here and
no one said a word.

93
00:06:18.221 --> 00:06:21.049
So it's data,
that's the name of my variable.

94
00:06:21.049 --> 00:06:26.765
So let's try again, so
I'm going to send a Beacon

95
00:06:26.765 --> 00:06:33.716
from the network you can see at
the bottom there is a log call.

96
00:06:33.716 --> 00:06:37.612
I can actually see the message so
it went through.

97
00:06:37.612 --> 00:06:40.941
The thing is that if I click,
send the Beacon and

98
00:06:40.941 --> 00:06:44.697
close the window immediately,
it will work anyway.

99
00:06:44.697 --> 00:06:49.343
And even if I kill the browser's process,
it will still be in a queue.

100
00:06:49.343 --> 00:06:54.664
So next time I open the browser,
the browser will know there is a pending

101
00:06:54.664 --> 00:06:59.292
Beacon to be sent to the server,
okay, that's how we works.

102
00:06:59.292 --> 00:07:03.675
It's detached from the window
that generates the fetch,

103
00:07:03.675 --> 00:07:06.184
it's not really a fetch, okay?

104
00:07:06.184 --> 00:07:07.359
But what about the server?

105
00:07:07.359 --> 00:07:10.979
I'm getting the value,
if I open the terminal,

106
00:07:10.979 --> 00:07:14.524
here it says data log received,
empty string.

107
00:07:14.524 --> 00:07:17.139
Empty JSON, so empty option.

108
00:07:17.139 --> 00:07:19.014
So I'm not getting the JSON.

109
00:07:19.014 --> 00:07:19.610
Why?

110
00:07:19.610 --> 00:07:21.336
Because I'm not setting the headers.

111
00:07:21.336 --> 00:07:22.772
That's the tricky part.

112
00:07:22.772 --> 00:07:26.239
Anyway, it's not so difficult to solve,

113
00:07:26.239 --> 00:07:30.777
but yeah, there is something
that we need to make here.

114
00:07:30.777 --> 00:07:34.838
So instead of doing this,
what we need to create is a Blob.

115
00:07:34.838 --> 00:07:40.333
When you create a Blob,
the Blob receives an array of parts.

116
00:07:40.333 --> 00:07:45.290
And we can actually send
the JSON stringify as one part,

117
00:07:45.290 --> 00:07:47.723
as the only part actually.

118
00:07:47.723 --> 00:07:52.053
And the second argument is property bag.

119
00:07:52.053 --> 00:07:57.790
So bag with properties, and
here we can set the type.

120
00:07:57.790 --> 00:08:05.075
So we can say that we are,
that blob represents a JSON, okay?

121
00:08:05.075 --> 00:08:12.916
So then we are going to send to the Beacon
the Blob that actually makes the trick.

122
00:08:12.916 --> 00:08:16.114
Again, this is not for
every request of course,

123
00:08:16.114 --> 00:08:19.009
because we are now
receiving the data back.

124
00:08:19.009 --> 00:08:22.478
It's just for
when you're sending the data and

125
00:08:22.478 --> 00:08:27.604
you actually don't care if it gets
there or not, it's just a Beacon.

126
00:08:27.604 --> 00:08:29.704
Analytics, okay?

127
00:08:29.704 --> 00:08:31.359
Likes, and so on.

128
00:08:31.359 --> 00:08:33.710
Yeah.
&gt;&gt; I've following along and

129
00:08:33.710 --> 00:08:37.099
I clicked the button about a dozen or
so times and

130
00:08:37.099 --> 00:08:40.911
the first six went through,
but all you know, 12 or

131
00:08:40.911 --> 00:08:46.198
15 of them are noted as pending in the,
in the status in the network tab.

132
00:08:46.198 --> 00:08:49.410
What are the kind of heuristics that
&gt;&gt; Well,

133
00:08:49.410 --> 00:08:54.461
the browser is managing heuristic of
that and beacons are low priority.

134
00:08:54.461 --> 00:09:00.226
So if for some reason the browser
thinks that, there are many of these,

135
00:09:00.226 --> 00:09:05.336
let's do something else, and
later I will complete my queue.

136
00:09:05.336 --> 00:09:10.498
So you don't manage that,
and even I think on the spec

137
00:09:10.498 --> 00:09:15.449
there is no algorithm, so
it's up to the browser.

138
00:09:15.449 --> 00:09:20.062
But something that might be happening
there is that you're sending exactly

139
00:09:20.062 --> 00:09:24.672
the same Beacon with the same data, so
the browser will probably say, hey,

140
00:09:24.672 --> 00:09:28.869
we're going to discard a couple
because it's just the same Beacon.

141
00:09:28.869 --> 00:09:33.336
&gt;&gt; I just now tried to refresh
the page and it's stuck.

142
00:09:33.336 --> 00:09:38.108
So is it waiting for some acknowledgement
from the server or anything?

143
00:09:38.108 --> 00:09:40.158
&gt;&gt; Nope.

144
00:09:40.158 --> 00:09:44.333
Nope, the thing is that you're
still sending the same beacon,

145
00:09:44.333 --> 00:09:49.450
you probably should try sending random
data so each beacon will be different.

146
00:09:49.450 --> 00:09:55.270
So as a unit, the Beacon, in that case
will be different so we should do in that.

147
00:09:55.270 --> 00:10:01.496
Remember you use this only when
you don't care about the response.

148
00:10:01.496 --> 00:10:09.055
So now you can see my server is getting
the message, the Beacon from the client.

149
00:10:09.055 --> 00:10:11.207
Yep.
&gt;&gt; There's a couple of questions

150
00:10:11.207 --> 00:10:13.811
on picture in picture
when you're done with.

151
00:10:13.811 --> 00:10:15.685
&gt;&gt; Yeah.

152
00:10:15.685 --> 00:10:16.912
Well, I'm done.

153
00:10:16.912 --> 00:10:19.278
[LAUGH]
&gt;&gt; For YouTube's mini player,

154
00:10:19.278 --> 00:10:21.620
does that use picture and picture?

155
00:10:21.620 --> 00:10:25.087
It looks similar but
it's visible on other apps.

156
00:10:25.087 --> 00:10:30.756
&gt;&gt; YouTube has on the web on the website,
it has the mini player.

157
00:10:30.756 --> 00:10:35.268
It's actually a floating div or
floating DOM element so it's not actually

158
00:10:35.268 --> 00:10:40.151
picture and picture, they have their
own picture and picture implementation.

159
00:10:40.151 --> 00:10:44.356
But if you get out of the top, you won't
see that picture in picture element.

160
00:10:44.356 --> 00:10:47.279
And they have another solution for
the mobile website.

161
00:10:47.279 --> 00:10:51.099
And on the mobile website,
they're using the picture and picture API.

162
00:10:51.099 --> 00:10:56.090
So meaning that the mini player as
far as I know it's on YouTube is not

163
00:10:56.090 --> 00:10:58.378
using the picture in picture.

164
00:10:58.378 --> 00:11:02.746
API they have their own
internal picture and

165
00:11:02.746 --> 00:11:06.406
picture solution, but it's within

166
00:11:06.406 --> 00:11:10.902
the boundaries of the YouTube DOM website
&gt;&gt; And

167
00:11:10.902 --> 00:11:15.525
can you inspect picture and
picture content?

168
00:11:15.525 --> 00:11:20.833
&gt;&gt; So the picture in picture canvas,
so the layer where you're

169
00:11:20.833 --> 00:11:25.632
rendering is not DOM based,
so you cannot inspect it.

170
00:11:25.632 --> 00:11:28.482
What you have is the video element.

171
00:11:28.482 --> 00:11:32.754
So what you can do is divide
the video element or the video layer.

172
00:11:32.754 --> 00:11:37.145
So using dev tools,
you could inspect the video element.

173
00:11:37.145 --> 00:11:41.988
And the layers that that video
elements are rendering are actually

174
00:11:41.988 --> 00:11:46.500
your inspection But
remember that you don't have a full DOM.

175
00:11:46.500 --> 00:11:51.169
So when you request full screen,
full screen has a DOM.

176
00:11:51.169 --> 00:11:55.216
So you can have your own buttons and
everything on full screen, but

177
00:11:55.216 --> 00:11:56.887
not on picture in picture.

178
00:11:56.887 --> 00:12:01.869
On picture in picture you only
have a video layer that is

179
00:12:01.869 --> 00:12:04.264
just frames over frames.

180
00:12:04.264 --> 00:12:07.864
Remember, Beacon is for
some special cases,

181
00:12:07.864 --> 00:12:13.138
probably less than one percent of
the requests that we make, okay.

182
00:12:13.138 --> 00:12:18.180
But analytics and
that sort of things, it's okay.

