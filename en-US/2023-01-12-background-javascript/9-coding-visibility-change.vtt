WEBVTT

1
00:00:00.230 --> 00:00:01.540
Okay, so workshop time.

2
00:00:01.540 --> 00:00:03.650
Now it's time to write some code.

3
00:00:03.650 --> 00:00:08.380
We're going to actually write that
code and see that code in action.

4
00:00:08.380 --> 00:00:15.790
For that, remember that you have, I will
show you that again just in case, the URL.

5
00:00:17.460 --> 00:00:20.645
That's
github.com/firtman/javascript-background.

6
00:00:20.645 --> 00:00:24.660
So get that repo download the ZIP file,
doesn't matter.

7
00:00:24.660 --> 00:00:26.770
And there I will show you what we have.

8
00:00:26.770 --> 00:00:30.133
I will open VS Code,
I already have it here.

9
00:00:33.575 --> 00:00:36.195
Let me first get into the folder.

10
00:00:39.209 --> 00:00:41.019
This is the folder that you will get.

11
00:00:41.019 --> 00:00:44.090
By the way, let me show you what
you will have in that package.

12
00:00:45.850 --> 00:00:49.500
While you have the slides,
PDF version of the slides.

13
00:00:49.500 --> 00:00:50.620
What about HiddenCam?

14
00:00:50.620 --> 00:00:53.550
There is a HiddenCam project there.

15
00:00:53.550 --> 00:00:58.845
That's the one that it's testing
what happens in the background.

16
00:00:58.845 --> 00:01:05.167
In case you want to play with that
later it's these brushing, this one.

17
00:01:05.167 --> 00:01:11.165
But I recorded some videos so
it will be better for these.

18
00:01:11.165 --> 00:01:13.215
And then you have background-final and
initial.

19
00:01:13.215 --> 00:01:18.657
Recommend you start with initial but
in case you want to get the final code.

20
00:01:18.657 --> 00:01:24.120
For whatever reason you don't wanna code
with me, you have the final version there.

21
00:01:24.120 --> 00:01:26.570
I'm going to open background-initial here.

22
00:01:28.390 --> 00:01:31.039
That includes a pretty simple for now,

23
00:01:31.039 --> 00:01:35.830
node.js server that I will show
you later why we need that server.

24
00:01:35.830 --> 00:01:41.843
It's mostly for the web push part
because that's server side, this one.

25
00:01:41.843 --> 00:01:46.689
And from here I will open a terminal and
run npm install.

26
00:01:53.993 --> 00:01:59.011
So it will install the dependencies and

27
00:01:59.011 --> 00:02:01.905
after that npm start.

28
00:02:01.905 --> 00:02:04.818
This project has a server.

29
00:02:04.818 --> 00:02:08.830
You can see the server later we
are going to see what's inside.

30
00:02:08.830 --> 00:02:13.603
That for
now is rendering the public folder with

31
00:02:13.603 --> 00:02:18.900
an html CSS and
a couple of JavaScript files.

32
00:02:18.900 --> 00:02:21.941
But there are a lot of holes
here that we are going to

33
00:02:21.941 --> 00:02:23.830
fill during the rest of today.

34
00:02:25.150 --> 00:02:29.614
Trying to open opening
this is localhost 4000.

35
00:02:29.614 --> 00:02:32.030
You can change the port if
you don't like that one.

36
00:02:33.890 --> 00:02:36.554
This is what you're going to get.

37
00:02:36.554 --> 00:02:39.042
Background Execution and

38
00:02:39.042 --> 00:02:44.589
a couple of buttons to test
different APIs that are empty.

39
00:02:44.589 --> 00:02:47.210
So they are doing nothing right now.

40
00:02:47.210 --> 00:02:52.899
The only thing that I already have
is that if I open here a console,

41
00:02:52.899 --> 00:02:57.560
just to show you,
I can actually call a log function.

42
00:02:59.620 --> 00:03:04.533
The log function will actually
send a message to a little low

43
00:03:04.533 --> 00:03:06.210
that we have there.

44
00:03:06.210 --> 00:03:09.600
So we can actually see what's
going on in our APIs, okay?

45
00:03:09.600 --> 00:03:13.107
It's just a text area and
it's adding elements inside,

46
00:03:13.107 --> 00:03:16.350
nothing really, really complicated.

47
00:03:16.350 --> 00:03:19.278
Hello Frontend Master, it appears there.

48
00:03:19.278 --> 00:03:24.690
It's just that, so we are going to
use that API to see what's going on.

49
00:03:24.690 --> 00:03:29.556
The first thing that we want to do here is

50
00:03:29.556 --> 00:03:33.688
to test our Page Visibility API.

51
00:03:33.688 --> 00:03:38.279
That's the API that will
tell us where we are,

52
00:03:38.279 --> 00:03:45.790
if we are going to hide the window or
if we are going back to the window.

53
00:03:45.790 --> 00:03:50.687
For that I will open in
a scripts background.js.

54
00:03:50.687 --> 00:03:56.129
You see that it's kind of empty
with a couple of placeholders.

55
00:03:56.129 --> 00:04:00.605
The idea is that here we are going to
play with the Page Visibility API first.

56
00:04:00.605 --> 00:04:05.589
Again, this is the API that we will use to
detect if we are going into the background

57
00:04:05.589 --> 00:04:07.910
or coming back to the background.

58
00:04:07.910 --> 00:04:14.300
And we can use this to stop timers to make
decisions, to save data, or whatever.

59
00:04:14.300 --> 00:04:19.756
Well in the Page Visibility part,
I'm going to say window.addEventListener,

60
00:04:19.756 --> 00:04:22.850
and the name of the event
is visibiltychange.

61
00:04:23.930 --> 00:04:27.681
Remember event names are all lowercase,

62
00:04:27.681 --> 00:04:31.760
no snake case, or no underscore, nothing.

63
00:04:31.760 --> 00:04:38.005
We're going to create an event handler for
it.

64
00:04:38.005 --> 00:04:45.210
And here again, we need to check
the document.visibilityState.

65
00:04:45.210 --> 00:04:48.115
And we're going to check,
for example, if it's hidden.

66
00:04:50.473 --> 00:04:53.560
That is that We are in the background.

67
00:04:55.230 --> 00:04:58.760
Actually, are we going to the background
or are we in the background?

68
00:04:58.760 --> 00:05:01.070
Actually, we are already
in the background, okay?

69
00:05:01.070 --> 00:05:03.144
So this is executed, not before.

70
00:05:03.144 --> 00:05:05.870
Actually, you cannot prevent default.

71
00:05:05.870 --> 00:05:08.840
We are not preventing
going to the background.

72
00:05:08.840 --> 00:05:14.074
We are in the background, we have just
arrived in the background of space.

73
00:05:14.074 --> 00:05:20.179
And if not,
we are back from the background.

74
00:05:20.179 --> 00:05:22.664
That's the simplest algorithm.

75
00:05:22.664 --> 00:05:26.451
Of course you there are many other
options that you can do here but

76
00:05:26.451 --> 00:05:28.637
the simplest algorithm is this one.

77
00:05:28.637 --> 00:05:32.638
Something that I can do here, for example,

78
00:05:32.638 --> 00:05:37.623
if I go into the background,
we can create a constant.

79
00:05:37.623 --> 00:05:42.338
We can call it now,
that will create a new Date, and

80
00:05:42.338 --> 00:05:45.307
we're going to get the Locale.

81
00:05:45.307 --> 00:05:50.867
I'm going to say toLocale,
not get, TimeString.

82
00:05:50.867 --> 00:05:55.643
Then we can log that we are Going

83
00:05:55.643 --> 00:05:59.690
to the background at now.

84
00:05:59.690 --> 00:06:02.240
So it will give us the time.

85
00:06:02.240 --> 00:06:03.460
I'm using the backtick.

86
00:06:03.460 --> 00:06:06.937
This is a template string of ECMAScript.

87
00:06:10.349 --> 00:06:15.123
I'm just taking the current time and
sending that to the log.

88
00:06:15.123 --> 00:06:22.200
If I save this and we run this we're
going to start seeing if this is working.

89
00:06:22.200 --> 00:06:26.530
So, going back to a browser,
any browser, it doesn't matter.

90
00:06:26.530 --> 00:06:31.881
If you refresh, and then for example,
you open a new tab and you go back.

91
00:06:31.881 --> 00:06:39.906
You can see that it went to
the background at that time.

92
00:06:39.906 --> 00:06:44.598
And you can see that even
the two to three seconds that we

93
00:06:44.598 --> 00:06:49.190
have on iOS is enough to
execute this handler, okay?

94
00:06:49.190 --> 00:06:50.342
So even in iOS,

95
00:06:50.342 --> 00:06:54.970
this is going to be executed even
if you press the home screen.

96
00:06:56.120 --> 00:07:01.164
The only situation where this
event is not going to re-fire is

97
00:07:01.164 --> 00:07:07.375
if you kill the browser's process or
the PWA process from the Task Manager.

98
00:07:07.375 --> 00:07:13.444
If you kill the browser
you're killing the process.

99
00:07:13.444 --> 00:07:19.353
The browser will not even have time to
execute your event handler, make sense?

100
00:07:19.353 --> 00:07:25.904
That's the only situation where
this event handler won't be fire.

101
00:07:25.904 --> 00:07:28.364
Of course here we can do the same log.

102
00:07:28.364 --> 00:07:31.519
But something maybe more
interesting is that when

103
00:07:31.519 --> 00:07:34.157
you're going back from the background.

104
00:07:34.157 --> 00:07:39.108
Something that you may want
to know is how much time has

105
00:07:39.108 --> 00:07:41.980
passed from the last session.

106
00:07:43.020 --> 00:07:45.456
This is a pretty common use case,

107
00:07:45.456 --> 00:07:50.340
because maybe the user is going back
to your web app a minute after.

108
00:07:51.580 --> 00:07:54.330
So it's coming from
the background a minute after.

109
00:07:54.330 --> 00:07:57.670
Or maybe it's a day, or maybe it's a week.

110
00:07:57.670 --> 00:08:02.882
If you have enough RAM in your phone, and
you haven't opened so many other apps.

111
00:08:02.882 --> 00:08:07.390
Maybe a week later, you go back to
the PWA and it was still there.

112
00:08:09.100 --> 00:08:10.840
And of course, it's not the same.

113
00:08:10.840 --> 00:08:11.990
It depends on your app.

114
00:08:11.990 --> 00:08:14.340
It depends on what you're
doing in your website.

115
00:08:14.340 --> 00:08:19.423
If one week has passed, maybe you want
to do something else, reload the page.

116
00:08:19.423 --> 00:08:24.360
Or you don't want to restore the state
because maybe you're a newspaper and

117
00:08:24.360 --> 00:08:26.685
of course everything is old there.

118
00:08:26.685 --> 00:08:28.810
It doesn't make any sense.

119
00:08:28.810 --> 00:08:35.280
It depends on the product that you're
creating what you're going to do here.

120
00:08:35.280 --> 00:08:40.123
A simple way that you have
to actually detect how much

121
00:08:40.123 --> 00:08:45.310
time has passed is that we
can create a global variable.

122
00:08:45.310 --> 00:08:49.323
Of course we can do this better
with our op or whatever,

123
00:08:49.323 --> 00:08:53.180
but we can call this
backgroundInitialTimestamp.

124
00:08:54.810 --> 00:08:58.552
When we are going to the background,

125
00:08:58.552 --> 00:09:03.030
I'm going to say that
I need the Timestamp.

126
00:09:03.030 --> 00:09:08.050
By the way, do you know how to get a high
performance Timestamp in JavaScript?

127
00:09:08.050 --> 00:09:12.367
Actually you can use the new Date and
get the Timestamp, but

128
00:09:12.367 --> 00:09:15.313
that's actually not really accurate.

129
00:09:15.313 --> 00:09:19.538
Also it's taking some time because it's
creating an object in JavaScript to

130
00:09:19.538 --> 00:09:23.060
actually taking the time is
changing the observation.

131
00:09:23.060 --> 00:09:28.367
It's performance.now, so it's part of the-
&gt;&gt; We just started using that and

132
00:09:28.367 --> 00:09:29.272
it's really cool.

133
00:09:29.272 --> 00:09:29.837
&gt;&gt; It's really cool.

134
00:09:29.837 --> 00:09:34.350
Yeah, it's high performance so
it's giving you precision in nanoseconds.

135
00:09:34.350 --> 00:09:37.110
So nanoseconds is actually
a lot of precision.

136
00:09:40.058 --> 00:09:44.739
And now but
actually when we are here we need to just

137
00:09:44.739 --> 00:09:49.429
create the constant for
how much time has passed.

138
00:09:50.880 --> 00:09:55.652
Something like this so
we are going to say it's another

139
00:09:55.652 --> 00:09:59.814
performance- the InitialTimestamp, okay?

140
00:09:59.814 --> 00:10:04.910
Something like this but
this is in milliseconds, it's fine.

141
00:10:04.910 --> 00:10:08.942
But it's a millisecond but
it's a float value,

142
00:10:08.942 --> 00:10:13.668
because the precision is up
to nanoseconds, actually.

143
00:10:13.668 --> 00:10:17.610
Maybe what I want is just
the integer part of it.

144
00:10:18.890 --> 00:10:20.760
I can also round with Math.round.

145
00:10:22.240 --> 00:10:24.860
Let me put that here, something like that.

146
00:10:26.170 --> 00:10:29.790
And then I can log how
much time has passed.

147
00:10:29.790 --> 00:10:34.191
We can say We are back
from the background.

148
00:10:36.547 --> 00:10:41.742
After timeElapsed, and we can say this

149
00:10:41.742 --> 00:10:46.470
in seconds, something like that.

150
00:10:46.470 --> 00:10:53.350
Again, you use that time to know how
much time has passed since last session.

151
00:10:53.350 --> 00:10:57.559
Again, if it's a matter of hours,
days, minutes,

152
00:10:57.559 --> 00:11:00.558
seconds, anything can happen here.

153
00:11:04.086 --> 00:11:05.040
Make sense?

154
00:11:05.040 --> 00:11:09.800
There you're going to use that
thing to make a decision.

155
00:11:11.500 --> 00:11:13.615
Are you keeping the session?

156
00:11:13.615 --> 00:11:20.895
Maybe even you need to revalidate your
auth authentication token, who knows?

157
00:11:23.471 --> 00:11:27.856
Make sense, because maybe you
are coming back from a hibernation and

158
00:11:27.856 --> 00:11:29.800
suspension state.

159
00:11:29.800 --> 00:11:33.660
So you were suspended and
now you're coming back any time.

160
00:11:33.660 --> 00:11:38.145
In fact think about this on
desktop a browser session.

161
00:11:38.145 --> 00:11:40.398
Have you ever used session storage?

162
00:11:40.398 --> 00:11:43.359
This is part of the web storage API.

163
00:11:43.359 --> 00:11:45.770
It's similar to local storage, but

164
00:11:45.770 --> 00:11:50.445
the data leaves only within the session,
within the browser session.

165
00:11:50.445 --> 00:11:55.760
If you close the browser, everything
in session storage will be cleared out.

166
00:11:55.760 --> 00:11:58.795
So a question for you, what's a session?

167
00:11:58.795 --> 00:12:01.866
What's a browser session
in a mobile device?

168
00:12:04.148 --> 00:12:08.450
What's the lifespan of a browser session?

169
00:12:08.450 --> 00:12:10.540
Are you closing the browser?

170
00:12:10.540 --> 00:12:14.120
When do you close the browser on iPhone or
Android?

171
00:12:14.120 --> 00:12:15.820
You don't close it.

172
00:12:15.820 --> 00:12:17.924
You just press the home screen button or

173
00:12:17.924 --> 00:12:20.830
you go to the home
screen with the Chester.

174
00:12:20.830 --> 00:12:24.660
If you go in back,
is it the same session or not?

175
00:12:24.660 --> 00:12:26.280
So what's a session?

176
00:12:26.280 --> 00:12:27.088
It's not so simple.

177
00:12:30.088 --> 00:12:32.849
That's why session storage and
mobile devices are completely useless.

178
00:12:34.280 --> 00:12:39.330
Because the session as a concept in
the browser doesn't exist anymore.

179
00:12:39.330 --> 00:12:41.707
And we have there the same problem.

180
00:12:41.707 --> 00:12:44.355
Maybe two weeks after the browser will

181
00:12:44.355 --> 00:12:49.160
tell you it's the same session
because the browser was still there.

182
00:12:50.460 --> 00:12:52.300
Because you never closed the browser.

183
00:12:52.300 --> 00:12:55.096
Something similar happens here.

184
00:12:55.096 --> 00:12:58.475
If you don't have any typo,
any errors, if I try this.

185
00:12:58.475 --> 00:13:04.197
If I go to a new tab and come back,
it's showing me the data.

186
00:13:06.864 --> 00:13:08.510
I can increase this a little bit.

187
00:13:08.510 --> 00:13:16.379
And that also happens if I minimize
the browser then I open the browser again.

188
00:13:16.379 --> 00:13:20.330
It's giving out when you go back, when you
get out, when you go to the background,

189
00:13:20.330 --> 00:13:21.583
when you're going back.

190
00:13:21.583 --> 00:13:22.379
Yeah, question?

191
00:13:22.379 --> 00:13:26.102
&gt;&gt; What about closing the tab and
then reopening it?

192
00:13:26.102 --> 00:13:27.440
&gt;&gt; That's a good question.

193
00:13:27.440 --> 00:13:32.270
If you close the tab, I can try that but
what will happen is that we

194
00:13:32.270 --> 00:13:36.674
won't see the data because
I'm not saving the data here.

195
00:13:36.674 --> 00:13:42.706
In fact, look at that, I was really fast
enough to actually see that happening.

196
00:13:42.706 --> 00:13:46.071
So it says NaNs, so, what's going on?

197
00:13:46.071 --> 00:13:49.353
That's a new page navigation.

198
00:13:49.353 --> 00:13:50.993
It's a new page navigation.

199
00:13:50.993 --> 00:13:54.960
One is getting out and
another one is getting in.

200
00:13:56.050 --> 00:14:00.940
It's a different page navigation,
so technically you're getting

201
00:14:00.940 --> 00:14:06.120
out of that app and
that app is actually discarded completely.

202
00:14:06.120 --> 00:14:07.889
It's a new page navigation.

203
00:14:07.889 --> 00:14:12.650
A new page navigation will
always be a new app instance.

204
00:14:14.160 --> 00:14:19.530
So in this case, if you have that use
case, maybe the option is to use.

205
00:14:19.530 --> 00:14:24.280
To store the data, to store the state and
restore the state here.

206
00:14:24.280 --> 00:14:27.738
This is actually a completely
new page navigation.

207
00:14:27.738 --> 00:14:31.283
If you close the app and you open
the app again, I mean, you have a PWA,

208
00:14:31.283 --> 00:14:33.260
if I have it still here.

209
00:14:33.260 --> 00:14:38.290
Let me see if I have it,
if you open a PWA.

210
00:14:38.290 --> 00:14:39.900
This one, this is a PWA.

211
00:14:39.900 --> 00:14:40.650
Let me show you this.

212
00:14:40.650 --> 00:14:44.360
Let's install a PWA on iOS, Squoosh.

213
00:14:44.360 --> 00:14:49.092
That is a PWA to reduce
the size of images and

214
00:14:49.092 --> 00:14:53.171
because it's a PWA I can install it.

215
00:14:53.171 --> 00:14:55.224
Then I can open my PWA.

216
00:14:55.224 --> 00:15:00.370
The question is what happens
if I close the window?

217
00:15:00.370 --> 00:15:04.407
That's the window for the current PWA,
and open the app again?

218
00:15:04.407 --> 00:15:05.895
It's a new page navigation.

219
00:15:05.895 --> 00:15:12.240
I'm not going back,
it's a completely new page navigation.

220
00:15:12.240 --> 00:15:17.498
And the same happens if you close
the tab and you open the tab again.

221
00:15:17.498 --> 00:15:18.359
Make sense?

222
00:15:18.359 --> 00:15:24.440
Cool, well, there are more to see
about the page navigation API.

223
00:15:24.440 --> 00:15:26.895
But with just these codes,

224
00:15:26.895 --> 00:15:33.180
you're covering probably 95% of
your use cases, if not more.

225
00:15:33.180 --> 00:15:38.150
It can get more complicated but
typically with this, it's enough.

