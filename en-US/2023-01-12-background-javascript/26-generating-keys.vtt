WEBVTT

1
00:00:00.013 --> 00:00:03.371
I'm going to show you again
how to get a key, a key pair.

2
00:00:03.371 --> 00:00:07.904
For the key,
again there is a library in npm,

3
00:00:07.904 --> 00:00:12.916
it's called Web Push with Dash and
it's a library

4
00:00:12.916 --> 00:00:17.946
that will help you with
web push in Node js, okay?

5
00:00:17.946 --> 00:00:22.727
But it's not just a library that
you can import in Node js to

6
00:00:22.727 --> 00:00:25.990
actually send messages to Web Push.

7
00:00:25.990 --> 00:00:27.710
We haven't seen that part yet.

8
00:00:27.710 --> 00:00:32.099
But also it has a command line
interface for some basic operations,

9
00:00:32.099 --> 00:00:34.030
such as create a pair of keys.

10
00:00:35.680 --> 00:00:40.960
So that's why I encourage you before,

11
00:00:40.960 --> 00:00:47.530
it's npx web push generate vapid keys.

12
00:00:47.530 --> 00:00:51.130
And of course you need Node
js installed to run this.

13
00:00:51.130 --> 00:00:58.180
So when you run this, you will get
a pair of public keys and private keys.

14
00:00:58.180 --> 00:01:04.540
So we need to take the public key and
paste that in our client side, JavaScript.

15
00:01:04.540 --> 00:01:09.925
And we need to take the private key and
paste that in our backend,

16
00:01:09.925 --> 00:01:13.430
and I will show you
where is in our server.

17
00:01:15.610 --> 00:01:16.700
Why?

18
00:01:16.700 --> 00:01:21.204
Because when we are sending
messages to a user later,

19
00:01:21.204 --> 00:01:26.030
we will sign the package
with our private key.

20
00:01:26.030 --> 00:01:30.718
So then the push server will
know that it is us sending

21
00:01:30.718 --> 00:01:36.580
that message and
not someone trying to impersonate us.

22
00:01:36.580 --> 00:01:40.030
So that private key is really important.

23
00:01:40.030 --> 00:01:45.473
Without it, we won't be able to
send a message to that user.

24
00:01:45.473 --> 00:01:49.756
And the push server will store
our public key to add to,

25
00:01:49.756 --> 00:01:55.926
I think to decrypt the package, I will
show you the diagram of that in a minute.

26
00:01:55.926 --> 00:01:58.990
So I will copy the code public key.

27
00:02:00.120 --> 00:02:04.210
I'm based at public key here.

28
00:02:04.210 --> 00:02:07.653
Ask my application server key, and

29
00:02:07.653 --> 00:02:13.045
I need the private key that
is paired to that public key,

30
00:02:13.045 --> 00:02:20.095
and I need to open server.js that we
haven't touched that file before.

31
00:02:20.095 --> 00:02:24.808
Server.js needs a key.

32
00:02:26.979 --> 00:02:28.198
For what?

33
00:02:28.198 --> 00:02:29.990
To send messages to the user.

34
00:02:37.593 --> 00:02:41.740
Actually, Yeah, let's put it here.

35
00:02:42.980 --> 00:02:48.670
In the root folder of our project,
open broadcast.js.

36
00:02:48.670 --> 00:02:53.820
I would explain what this file is doing,

37
00:02:53.820 --> 00:02:59.271
but there is a part of
that file where you can

38
00:02:59.271 --> 00:03:06.103
paste the privateKey and
also the publicKey, both.

39
00:03:06.103 --> 00:03:06.905
This is the private key.

40
00:03:09.642 --> 00:03:11.960
And this is the public key.

41
00:03:13.580 --> 00:03:16.440
I'm in broadcast.js.

42
00:03:16.440 --> 00:03:17.890
Why it's called broadcast?

43
00:03:17.890 --> 00:03:25.385
Because this little script will broadcast
the push message to every registered user.

44
00:03:25.385 --> 00:03:27.759
It's broadcasting messages.

45
00:03:27.759 --> 00:03:28.461
That's why.

46
00:03:28.461 --> 00:03:33.924
So because this is the file that
will actually send a message,

47
00:03:33.924 --> 00:03:36.866
it need to encrypt the package for

48
00:03:36.866 --> 00:03:41.300
each user with the private
API with the private key

