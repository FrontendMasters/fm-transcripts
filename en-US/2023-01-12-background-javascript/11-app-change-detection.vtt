WEBVTT

1
00:00:00.210 --> 00:00:04.620
So when you're going back,
you have these two situations.

2
00:00:04.620 --> 00:00:09.090
So the event is called resume,
the first one.

3
00:00:09.090 --> 00:00:14.380
In this case, we are back from suspension,
and we were still in memory, okay?

4
00:00:14.380 --> 00:00:19.110
So no need to restore the state because
all my global variables are still there.

5
00:00:19.110 --> 00:00:23.360
My focus, my cursor is still there.

6
00:00:23.360 --> 00:00:25.400
What the user has typed is still there.

7
00:00:25.400 --> 00:00:28.720
Everything is still there because
we are dephrasing the context.

8
00:00:30.380 --> 00:00:31.028
Makes sense?

9
00:00:31.028 --> 00:00:37.369
But maybe my tab was discarded by
the browser or by the operating system.

10
00:00:37.369 --> 00:00:42.887
Or maybe the whole browser was
discarded including my context.

11
00:00:42.887 --> 00:00:47.806
So in that case,
the second part is the one that we use.

12
00:00:47.806 --> 00:00:51.739
It's just the load event or
the DOMContentLoaded.

13
00:00:51.739 --> 00:00:56.960
It's a normal load but in this case,
we check the wasDiscarded property.

14
00:00:58.530 --> 00:01:01.768
So if it's true,
we have to restore the state.

15
00:01:03.278 --> 00:01:03.930
Yep.

16
00:01:03.930 --> 00:01:07.250
&gt;&gt; Are freeze and resume on a standards
track or is that proprietary?

17
00:01:07.250 --> 00:01:08.710
&gt;&gt; So it's in the standard track.

18
00:01:08.710 --> 00:01:12.877
It's a W3C API but
because Chromium is the only implementer.

19
00:01:12.877 --> 00:01:21.006
So it's not actually a final editor
recommended spec, so it's a draft.

20
00:01:21.006 --> 00:01:26.409
And as many Chromium only things,
I'm not sure if they will get stable

21
00:01:26.409 --> 00:01:32.350
spec because they need at least
two engines implementing the API.

22
00:01:32.350 --> 00:01:37.980
We haven't heard a word from WebKit or
Gecko about this.

23
00:01:37.980 --> 00:01:39.887
So that's the problem.

24
00:01:41.166 --> 00:01:46.127
So, in fact,
I think if you Google the API,

25
00:01:46.127 --> 00:01:52.581
you will probably find an article
on the Chrome website.

26
00:01:52.581 --> 00:01:57.053
It's really a Chromium API but it's open.

27
00:01:57.053 --> 00:02:00.490
I mean, it's in W3C, the draft,
but it's Chromium only.

28
00:02:02.510 --> 00:02:05.210
That's why we are not going to
focus too much on this API.

29
00:02:05.210 --> 00:02:07.166
It's actually pretty simple anyway, but

30
00:02:07.166 --> 00:02:10.470
that's why I encourage you to
play with the visibility change.

31
00:02:10.470 --> 00:02:15.517
And unless you have really a heavy state,
or really you have a lot of

32
00:02:15.517 --> 00:02:20.400
heavy situations,
I shouldn't encourage you to try this API.

33
00:02:21.440 --> 00:02:27.974
In fact, out there, like 0.0002% of
the websites are using this API,

34
00:02:27.974 --> 00:02:32.435
compared to 5 to 8% using
the page visibility API.

35
00:02:32.435 --> 00:02:34.120
That's the simplest one.

36
00:02:34.120 --> 00:02:39.672
But yeah, we are overdoing things
with the page visibility API.

37
00:02:39.672 --> 00:02:42.610
Maybe we're saving the state
more than we need.

38
00:02:42.610 --> 00:02:46.213
On mobile devices, as I mentioned before,
the page lifecycle API.

39
00:02:46.213 --> 00:02:48.970
So this one that is their freeze event and

40
00:02:48.970 --> 00:02:52.709
their resume event,
it's not typically available.

41
00:02:52.709 --> 00:02:57.459
Again, you save data but
I encourage you to use visibilitychange,

42
00:02:57.459 --> 00:03:03.040
that will work on iPhone, on iPad,
on Android, on desktop as well.

43
00:03:03.040 --> 00:03:06.264
On desktop,
you have more situations to handle,

44
00:03:06.264 --> 00:03:09.130
in case you wanna be more specific.

45
00:03:09.130 --> 00:03:11.689
On mobile it's simpler actually,

46
00:03:11.689 --> 00:03:16.337
the user is getting out of
the browser most of the time.

47
00:03:16.337 --> 00:03:20.934
And you restore the state, in the case
of mobile devices, when the page loads.

48
00:03:20.934 --> 00:03:24.647
Using the timestamp you can
decide to restore the state or

49
00:03:24.647 --> 00:03:26.990
start a new navigation.

50
00:03:26.990 --> 00:03:31.490
So I'm saying this, on mobile,
it's actually a pretty common design

51
00:03:31.490 --> 00:03:36.080
pattern to actually restore the state
through the previous session.

52
00:03:36.080 --> 00:03:38.916
It doesn't matter if the user
closed the app or not.

53
00:03:38.916 --> 00:03:43.755
So typically when you open an app,
the app tries to restore the state.

54
00:03:43.755 --> 00:03:46.650
It doesn't matter how you
ended up using the state.

55
00:03:46.650 --> 00:03:52.190
Unless, one,
large amount of time has passed.

56
00:03:52.190 --> 00:03:55.957
In that case,
you decide to just reload the app.

57
00:03:55.957 --> 00:03:58.860
Okay, on a website,
it's actually not so simple.

58
00:03:58.860 --> 00:04:03.483
I mean,
if you type facebook.com in your browser,

59
00:04:03.483 --> 00:04:09.970
Facebook is not trying to restore
what you were reading previously.

60
00:04:09.970 --> 00:04:12.730
That's not typically what happens.

61
00:04:12.730 --> 00:04:14.383
But on mobile apps,

62
00:04:14.383 --> 00:04:19.647
typically we try to restore whatever
you had in the recent past.

63
00:04:19.647 --> 00:04:24.577
Unless a day has passed or
a week has passed since last session.

64
00:04:24.577 --> 00:04:31.812
So you can replicate that UX pattern for
your web apps as well.

