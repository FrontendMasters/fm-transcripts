WEBVTT

1
00:00:00.260 --> 00:00:04.311
To understand what's going on
on different operating systems,

2
00:00:04.311 --> 00:00:07.411
we need to spy what's going
on in the background.

3
00:00:07.411 --> 00:00:10.387
So spying a web app in
the background is not so

4
00:00:10.387 --> 00:00:13.203
simple using standard developer tools,

5
00:00:13.203 --> 00:00:18.683
because some of those tools will also be
disposed when your website is disposed.

6
00:00:18.683 --> 00:00:22.399
Anyway, I created a really
quick tool to actually spy

7
00:00:22.399 --> 00:00:25.618
on what's going on with a socket,
and I mean,

8
00:00:25.618 --> 00:00:30.920
you have the code in their repository
in case you wanna play with that later.

9
00:00:30.920 --> 00:00:34.356
I have here a couple of videos
to actually show that in action

10
00:00:34.356 --> 00:00:35.947
with different browsers.

11
00:00:35.947 --> 00:00:39.460
So we can actually understand what's
going on with frames per seconds.

12
00:00:39.460 --> 00:00:44.626
So in case you have an animation,
so what's going on with the frame,

13
00:00:44.626 --> 00:00:47.310
right, on different situations?

14
00:00:47.310 --> 00:00:52.385
On timers, so if you have a timer that
is doing something every ten seconds or

15
00:00:52.385 --> 00:00:54.289
every ten milliseconds, so

16
00:00:54.289 --> 00:00:58.911
what happens when your app goes to
the background with those timers?

17
00:00:58.911 --> 00:01:02.507
What happens if you have a web worker,
a thread,

18
00:01:02.507 --> 00:01:05.768
okay, and that thread is also doing stuff?

19
00:01:05.768 --> 00:01:09.569
And it can involve also timers
in the web worker thread, okay?

20
00:01:09.569 --> 00:01:14.071
So what happens, because, I mean,
the user never sees threads.

21
00:01:14.071 --> 00:01:17.780
So the user is not seeing a thread,
the user is seeing the website.

22
00:01:17.780 --> 00:01:20.199
That website maybe opening
different threads.

23
00:01:20.199 --> 00:01:22.931
So what's going on with those threads?

24
00:01:22.931 --> 00:01:25.746
And also service worker.

25
00:01:25.746 --> 00:01:27.389
So, the service worker,

26
00:01:27.389 --> 00:01:32.107
it's actually different from a web
worker attached to a page navigation.

27
00:01:32.107 --> 00:01:36.930
And the service worker is a thread, but
it's not attached to a page navigation.

28
00:01:36.930 --> 00:01:39.439
So that's the first main difference.

29
00:01:39.439 --> 00:01:44.153
So, for that, I did a little dashboard,
okay, we'll show you that in

30
00:01:44.153 --> 00:01:48.885
action [LAUGH] in a minute, where we
can actually see in action running.

31
00:01:48.885 --> 00:01:53.876
We can run a URL in a browser,
play with it, like hiding the website,

32
00:01:53.876 --> 00:01:58.267
hiding the window,
making the window appearing again, and

33
00:01:58.267 --> 00:02:03.878
see what's going on here with frames
per second in Request Animation Frame.

34
00:02:03.878 --> 00:02:08.778
Request Animation Frame is an API
that we can use to actually get

35
00:02:08.778 --> 00:02:12.764
executed some code on each
frame of the animation.

36
00:02:12.764 --> 00:02:18.233
Then I also do the same thing with
frame per second on CSS animations.

37
00:02:18.233 --> 00:02:22.154
So see what's going on if you have
a CSS animation, or a CSS transition,

38
00:02:22.154 --> 00:02:23.646
that is also an animation.

39
00:02:23.646 --> 00:02:30.042
So what happens when it's in the
background, and also the timer frequency.

40
00:02:30.042 --> 00:02:33.729
Okay, and I have the same for
a worker thread and a service worker.

41
00:02:33.729 --> 00:02:35.730
So we can see what's going on, okay?

42
00:02:35.730 --> 00:02:37.050
So let me show you this in action.

43
00:02:37.050 --> 00:02:41.407
For example, this is a video,
so I've already done this so

44
00:02:41.407 --> 00:02:43.159
we can do this quicker.

45
00:02:43.159 --> 00:02:47.899
So actually you can see this is Chrome
on desktop, in this case on a Mac, but

46
00:02:47.899 --> 00:02:51.752
it's the same on the rest of
the desktop operating systems.

47
00:02:51.752 --> 00:02:57.830
So you can see that by default when you
have that website in the foreground,

48
00:02:57.830 --> 00:03:00.154
everything is at 100%.

49
00:03:00.154 --> 00:03:03.545
So we can see everything here is 100%.

50
00:03:03.545 --> 00:03:10.750
The frames per seconds, and the timers,
everything is working as fast as possible.

51
00:03:10.750 --> 00:03:14.451
But as soon as we open a new tab, for

52
00:03:14.451 --> 00:03:19.186
example, you can see how that is changing.

53
00:03:19.186 --> 00:03:24.528
So first, because now my,
let's say website,

54
00:03:24.528 --> 00:03:30.276
is hidden, okay,
before it was actually visible.

55
00:03:30.276 --> 00:03:32.317
So at one point it's hidden.

56
00:03:32.317 --> 00:03:38.495
You can see that, first, everything that
has to do with animations goes to zero.

57
00:03:38.495 --> 00:03:44.499
So your request animation frame code will
never be executed again while hidden.

58
00:03:44.499 --> 00:03:48.660
And also the timers are going down.

59
00:03:48.660 --> 00:03:51.311
So the frequency is going down.

60
00:03:51.311 --> 00:03:56.417
So actually if you have a timer that
executes code every ten seconds,

61
00:03:56.417 --> 00:04:00.730
if the website is hidden,
the browsers today, at least,

62
00:04:00.730 --> 00:04:04.530
they are actually also
decreasing the frequency.

63
00:04:04.530 --> 00:04:08.439
It depends on the browser,
it depends on the OS.

64
00:04:08.439 --> 00:04:13.220
The idea here is to save battery
on websites that the user is

65
00:04:13.220 --> 00:04:16.062
not actively using at that point.

66
00:04:16.062 --> 00:04:23.296
Okay, so ten years ago, this was not the
case, actually, your timers were all 100%.

67
00:04:23.296 --> 00:04:26.559
It doesn't matter if
the website's hidden or not.

68
00:04:26.559 --> 00:04:30.701
So if you look at the worker thread,
it's still at 100%.

69
00:04:30.701 --> 00:04:36.410
So that frequencies,
the timer frequency is not changing for

70
00:04:36.410 --> 00:04:42.027
worker threads, or service workers,
okay, makes sense?

71
00:04:42.027 --> 00:04:46.074
So only for everything that you
have in the main context, yeah.

72
00:04:46.074 --> 00:04:49.408
&gt;&gt; So just to clarify, if you have
a timer do something every ten seconds,

73
00:04:49.408 --> 00:04:52.811
if that is hidden, it will not stop
doing that action every ten seconds?

74
00:04:52.811 --> 00:04:53.862
&gt;&gt; Yeah, that's correct.

75
00:04:53.862 --> 00:04:58.918
In fact, the set time out or
set interval, they're not guaranteeing

76
00:04:58.918 --> 00:05:03.725
you that it's going to execute
that code at that particular time.

77
00:05:03.725 --> 00:05:09.834
Actually, what happens is that the code
that you specify in a set timeout or a set

78
00:05:09.834 --> 00:05:16.050
interval, goes to a queue of pending tasks
with some kind of an expiration date.

79
00:05:16.050 --> 00:05:17.594
And that's the time that you define.

80
00:05:17.594 --> 00:05:19.520
I mean, if you say ten seconds from now,

81
00:05:19.520 --> 00:05:21.907
the expiration date will
be ten seconds from now.

82
00:05:21.907 --> 00:05:26.475
But the browser is not guaranteeing you
that you will execute this in ten seconds.

83
00:05:26.475 --> 00:05:28.560
It will be after the expiration,

84
00:05:28.560 --> 00:05:33.482
whenever the browser decides that there
is time to execute that queue, okay?

85
00:05:33.482 --> 00:05:37.510
So in this case, what happens is
that when your page is hidden,

86
00:05:37.510 --> 00:05:42.838
it's changing the algorithm that goes
through that list and says, you know what?

87
00:05:42.838 --> 00:05:46.894
I'm not going to check that
every every one millisecond,

88
00:05:46.894 --> 00:05:49.390
I'm going to check on every frame.

89
00:05:49.390 --> 00:05:51.367
I'm not going to check
that on every frame,

90
00:05:51.367 --> 00:05:53.243
I'm going to check that once per second.

91
00:05:53.243 --> 00:05:55.076
&gt;&gt; But it's not going to zero, right?

92
00:05:55.076 --> 00:05:57.526
&gt;&gt; It's not going to zero for now.

93
00:05:57.526 --> 00:05:58.056
&gt;&gt; For now?

94
00:05:58.056 --> 00:06:02.845
&gt;&gt; For now, because it depends on the
situation because you can also minimize

95
00:06:02.845 --> 00:06:06.886
the whole window, okay, and
you can wait a couple of minutes.

96
00:06:06.886 --> 00:06:11.140
And also it depends on the browser, okay?

97
00:06:11.140 --> 00:06:15.788
So I have a diagram in a couple of slides,
about my research on how that

98
00:06:15.788 --> 00:06:20.453
works on every browser, but
it can change on new versions of Chrome.

99
00:06:20.453 --> 00:06:25.888
In fact, Chrome 108, I think,
has a new flag that for

100
00:06:25.888 --> 00:06:31.221
now it's experimental,
that they are changing this.

101
00:06:31.221 --> 00:06:36.817
So they're trying just to push you into
stop using timers in the background,

102
00:06:36.817 --> 00:06:41.811
so they're going to change this
algorithm again probably in a year or

103
00:06:41.811 --> 00:06:44.498
something like that, okay, yeah.

104
00:06:44.498 --> 00:06:47.337
&gt;&gt; If you come back to the tab and
there is something in the queue,

105
00:06:47.337 --> 00:06:48.656
will it execute right away?

106
00:06:48.656 --> 00:06:49.269
&gt;&gt; Look at this.

107
00:06:49.269 --> 00:06:54.161
So if I go back to the tab,
I'm doing this right now,

108
00:06:54.161 --> 00:06:58.065
everything goes back to 100% again.

109
00:06:58.065 --> 00:07:00.198
And what happens with the queue?

110
00:07:00.198 --> 00:07:01.016
This is Firefox.

111
00:07:01.016 --> 00:07:02.419
Let me stop here in Chrome.

112
00:07:02.419 --> 00:07:04.458
So what happens with the queue,
that's your question?

113
00:07:04.458 --> 00:07:08.778
So it depends if it's a set timeout or
a set interval, but

114
00:07:08.778 --> 00:07:14.457
actually it will execute your code,
your pending code, but once, okay?

115
00:07:14.457 --> 00:07:19.625
Because the idea is that, I mean,
if you were expecting to execute a code

116
00:07:19.625 --> 00:07:24.712
60 times per second, and
it's decreasing the frequency, it's not

117
00:07:24.712 --> 00:07:30.849
going to execute your code 60 times after
the second has passed, only once, okay?

118
00:07:30.849 --> 00:07:33.179
So that's how set interval works.

119
00:07:33.179 --> 00:07:36.931
So it needs to first parse one, so

120
00:07:36.931 --> 00:07:43.236
the next tick before actually
scheduling the next one.

121
00:07:43.236 --> 00:07:46.755
So if it happen that you're within,

122
00:07:46.755 --> 00:07:52.658
we haven't seen that yet, but
if your website is suspended,

123
00:07:52.658 --> 00:07:56.875
and you're coming back a day after, okay?

124
00:07:56.875 --> 00:08:02.123
Even if your set interval
was set as once per second,

125
00:08:02.123 --> 00:08:06.191
it will execute that after a day, okay?

126
00:08:06.191 --> 00:08:10.496
Because again, yeah,
the queue has that exploration.

127
00:08:10.496 --> 00:08:13.922
It expires, so
let's execute the expired task.

128
00:08:13.922 --> 00:08:15.670
But that's all, okay?

129
00:08:15.670 --> 00:08:20.471
Firefox, is it Firefox on desktop as well,
it's kind of similar as well.

130
00:08:20.471 --> 00:08:27.918
So, if I do this, I mean, you can see
that the timer frequency goes down.

131
00:08:27.918 --> 00:08:31.486
But also there are some other situations,
because, for

132
00:08:31.486 --> 00:08:35.288
example, if you cover your window,
it also goes to hidden.

133
00:08:35.288 --> 00:08:38.461
That doesn't happen in Chrome,
that happens on Firefox.

134
00:08:38.461 --> 00:08:44.362
So here I just wanna show you that this is
a completely different on every browser,

135
00:08:44.362 --> 00:08:46.599
this is a fiery on a Mac, okay?

136
00:08:46.599 --> 00:08:51.387
So Safari on the Mac, well,
it's also doing something like this,

137
00:08:51.387 --> 00:08:53.409
but it's more aggressive.

138
00:08:53.409 --> 00:08:54.669
And by the way, Bernie,

139
00:08:54.669 --> 00:08:58.989
you have heard Tim Coke saying that Safari
saves more battery and blah, blah, blah.

140
00:08:58.989 --> 00:09:01.911
This is one of the reasons
why it's saving more battery.

141
00:09:01.911 --> 00:09:06.717
So because it's actually
stopping the whole thing,

142
00:09:06.717 --> 00:09:10.789
and your timers are actually
stopped at all.

143
00:09:10.789 --> 00:09:15.742
Your service worker is stopped
actually like two seconds after you

144
00:09:15.742 --> 00:09:19.908
get out of that website, and
also your worker threads.

145
00:09:19.908 --> 00:09:24.402
So, yeah, it saving me more battery
because it's executing less

146
00:09:24.402 --> 00:09:28.270
code from websites that are not
actually the active tab.

147
00:09:28.270 --> 00:09:29.717
And actually probably you have seen that.

148
00:09:29.717 --> 00:09:32.649
There are a lot of Chromium
browsers out there

149
00:09:32.649 --> 00:09:37.060
also claiming that they are saving
battery, for example, Brave.

150
00:09:37.060 --> 00:09:42.042
Well, they're changing the Chromium
algorithm for this, for

151
00:09:42.042 --> 00:09:44.170
background types as well.

152
00:09:44.170 --> 00:09:48.607
So that's one way they have
to save battery, okay?

153
00:09:48.607 --> 00:09:51.939
They're just pausing or they are,

154
00:09:51.939 --> 00:09:58.060
we haven't seen the concept yet,
but they are suspending a tab.

155
00:09:58.060 --> 00:10:03.009
So that tab is not executing any
code any time, or any thread.

156
00:10:03.009 --> 00:10:05.578
Nothing until you go back.

157
00:10:05.578 --> 00:10:12.298
Okay, if you go back, I'm going back here,
yeah, everything goes back to green.

158
00:10:12.298 --> 00:10:17.927
So, on desktop operating systems, your web
app won't be visible if it's a background

159
00:10:17.927 --> 00:10:22.730
tab, if the browser is in the background,
if the PWA is in the background.

160
00:10:22.730 --> 00:10:27.737
And on some browsers such as Firefox,
it also happens when you

161
00:10:27.737 --> 00:10:32.566
totally cover the window,
okay, with another OS window.

162
00:10:32.566 --> 00:10:36.455
In this case, all web apps are open,

163
00:10:36.455 --> 00:10:41.728
they are in memory with execution rights,
okay?

164
00:10:41.728 --> 00:10:45.140
And web apps that are not
visible may limit the timers.

165
00:10:45.140 --> 00:10:48.782
It depends on the browser.

166
00:10:48.782 --> 00:10:51.954
For example, Chrome, okay,

167
00:10:51.954 --> 00:10:57.942
it's actually limiting to start simple for
ten minutes.

168
00:10:57.942 --> 00:11:02.103
So for ten minutes,
you can actually execute some kind of

169
00:11:02.103 --> 00:11:05.669
ten timers per second for
the first ten minutes.

170
00:11:05.669 --> 00:11:09.462
After that,
it goes to one per ten seconds.

171
00:11:09.462 --> 00:11:16.410
So your timers are even going worse,
okay, after ten minutes of inactivity.

172
00:11:16.410 --> 00:11:21.020
So, yeah, the timer is in the background
for ten minutes, the user never came back.

173
00:11:21.020 --> 00:11:22.569
Your timer, now it's going.

174
00:11:22.569 --> 00:11:29.106
You can execute one set time out or
one set interval per ten seconds, okay?

175
00:11:29.106 --> 00:11:36.304
And also as I mentioned before,
when your context is in the background,

176
00:11:36.304 --> 00:11:40.437
some browsers may suspend the whole tab.

177
00:11:40.437 --> 00:11:47.039
And suspension means that it's in memory
with no execution rights at all, okay?

178
00:11:47.039 --> 00:11:49.260
For example, Brave is doing that.

179
00:11:49.260 --> 00:11:52.336
The service worker has its own lifecycle.

180
00:11:52.336 --> 00:11:56.783
Later we will go over that, and
we will see that in action with our code.

181
00:11:56.783 --> 00:11:59.994
But service worker typically is different.

182
00:11:59.994 --> 00:12:04.145
Safari is the only one that is really
aggressive with service workers as well.

