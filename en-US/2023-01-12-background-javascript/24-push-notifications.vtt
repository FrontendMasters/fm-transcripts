WEBVTT

1
00:00:00.130 --> 00:00:04.180
So, the last chapter is
push notifications, okay?

2
00:00:05.510 --> 00:00:10.282
So, web push notifications or
push notifications or

3
00:00:10.282 --> 00:00:15.795
Web Push notifications apart it
depends on the case it's just

4
00:00:15.795 --> 00:00:21.521
the same an umbrella of API's and
abilities that we have today,

5
00:00:21.521 --> 00:00:26.950
to notify the user from the server
asking first permission.

6
00:00:28.050 --> 00:00:30.710
Okay, we will see this in a minute.

7
00:00:30.710 --> 00:00:35.733
So, we need to ask the user permission
if granted, now the service worker

8
00:00:35.733 --> 00:00:40.778
can create notification from
the background, and that's not push yet.

9
00:00:40.778 --> 00:00:44.390
It's just notification.

10
00:00:44.390 --> 00:00:49.550
But also,
the PWA can subscribe the user to push.

11
00:00:49.550 --> 00:00:51.790
I will show you a diagram in a second.

12
00:00:51.790 --> 00:00:53.270
About how this works.

13
00:00:53.270 --> 00:01:00.200
And then a push event will be fired in
the service worker, to handle the push.

14
00:01:00.200 --> 00:01:05.591
So, in this case the server can
send the message to that user and

15
00:01:05.591 --> 00:01:09.967
then on that user's device
the browser will wake up

16
00:01:09.967 --> 00:01:15.080
the service worker and
it will fire the push event handler.

17
00:01:16.570 --> 00:01:20.413
Today is working on Firefox, Chrome, Edge,

18
00:01:20.413 --> 00:01:26.410
Samsung Internet, and
Safari from macOS 13, macOS Ventura.

19
00:01:26.410 --> 00:01:31.287
Even if you have the latest
Safari on previous versions of

20
00:01:31.287 --> 00:01:34.090
macOS is not going to work.

21
00:01:34.090 --> 00:01:38.040
The reason is that macOS
Ventura has a new demon.

22
00:01:38.040 --> 00:01:42.580
At the OS level for web push, okay?

23
00:01:42.580 --> 00:01:48.914
And iOS and iPadOS was promised for
2023 at some point,

24
00:01:48.914 --> 00:01:53.790
not sure if it's going to be for iOS 17.

25
00:01:53.790 --> 00:01:55.120
Or who knows?

26
00:01:55.120 --> 00:01:59.310
So today it appears as an experiment,
but it's not working yet.

27
00:01:59.310 --> 00:02:02.684
So even if you enable the experiment
in safari settings on IOS,

28
00:02:02.684 --> 00:02:04.030
the code doesn't work.

29
00:02:05.620 --> 00:02:10.179
So the first step is a step that
we have already seen before,

30
00:02:10.179 --> 00:02:13.370
because it's the same step that we see for

31
00:02:13.370 --> 00:02:18.588
the old classic desktop notification
API is to ask for permission.

32
00:02:18.588 --> 00:02:21.460
It's exactly the same code, okay?

33
00:02:21.460 --> 00:02:25.690
So, the first step is to request
permission for notification.

34
00:02:25.690 --> 00:02:29.871
This is a, I think, the most challenging

35
00:02:29.871 --> 00:02:34.880
part of this API from
a new UX perspective.

36
00:02:34.880 --> 00:02:39.732
So, we are not covering that
the user experience part today

37
00:02:39.732 --> 00:02:42.934
we're more on the technical side, but

38
00:02:42.934 --> 00:02:48.173
there are a lot of articles and
books on the topic on when to ask for

39
00:02:48.173 --> 00:02:53.210
notification permission to
increase the opportunity.

40
00:02:53.210 --> 00:02:57.670
For a yes from the user, okay?

41
00:02:57.670 --> 00:02:59.760
So that's the challenging part.

42
00:02:59.760 --> 00:03:04.026
&gt;&gt; Is there when you ask the user for
permission, part of the UX best practices

43
00:03:04.026 --> 00:03:07.700
is to explain yourself and
why the permission is necessary.

44
00:03:07.700 --> 00:03:10.890
Is that built into the Request API
&gt;&gt; Must you do that?

45
00:03:10.890 --> 00:03:12.540
No, that's a very good question.

46
00:03:12.540 --> 00:03:17.311
Unfortunately, the permission API and
this permission API in

47
00:03:17.311 --> 00:03:23.380
particular don't have a way to express,
why are you requesting this?

48
00:03:23.380 --> 00:03:27.120
So the answer has to do
with your user interface.

49
00:03:27.120 --> 00:03:33.322
So before By asking the API permission,
you should present a window or

50
00:03:33.322 --> 00:03:39.360
something explaining the user
the advantages of saying yes.

51
00:03:39.360 --> 00:03:45.340
And then typically what you see
is an escape for now, or a yes.

52
00:03:45.340 --> 00:03:48.200
And the yes will trigger the real dialog.

53
00:03:48.200 --> 00:03:50.280
If the user already say yes.

54
00:03:50.280 --> 00:03:56.094
It's there is a good chance that it will
say yes to the real dialog after that so

55
00:03:56.094 --> 00:03:57.884
something like that but

56
00:03:57.884 --> 00:04:02.908
unfortunately the API does not
include that as the native API's.

57
00:04:02.908 --> 00:04:05.402
So native Android and iOS API's,

58
00:04:05.402 --> 00:04:10.485
they include in a string description for
the permission that you see.

59
00:04:10.485 --> 00:04:13.025
I mean,
what the geo location permission appears.

60
00:04:13.025 --> 00:04:16.735
It explains why it needs that,
but not on the web.

61
00:04:16.735 --> 00:04:20.865
So, we're going to go this in a minute,
but let's go over the steps first.

62
00:04:20.865 --> 00:04:24.960
So far, we have permission for
sending notifications.

63
00:04:24.960 --> 00:04:26.790
Okay, but this is not push yet.

64
00:04:27.840 --> 00:04:32.639
For push, we are going to see
the push subscription architecture.

65
00:04:32.639 --> 00:04:37.324
So, we have a web server that's
our back end our web server and

66
00:04:37.324 --> 00:04:42.011
there is a push server the push
server is owned by the browser so

67
00:04:42.011 --> 00:04:46.518
it's not on our side okay, and
then we have client by inside

68
00:04:46.518 --> 00:04:51.654
the service worker and the runtime,
also known as the browser, but

69
00:04:51.654 --> 00:04:58.182
it can be also a PWA standalone window, so
the runtime that is rendering our website.

70
00:04:59.282 --> 00:05:03.913
Okay, so the runtime request
push to the push server,

71
00:05:03.913 --> 00:05:08.960
so actually request to the browser and
the browser.

72
00:05:08.960 --> 00:05:13.660
Ask the push server, the push server
this is after we have permission.

73
00:05:13.660 --> 00:05:17.219
Okay, so
after the user has granted permission,

74
00:05:17.219 --> 00:05:20.960
the push server will give
us subscription details.

75
00:05:22.440 --> 00:05:25.250
And we have to send those details.

76
00:05:25.250 --> 00:05:26.040
Joe, we're back in.

77
00:05:27.060 --> 00:05:27.600
Okay.

78
00:05:27.600 --> 00:05:28.920
So that's the flow.

79
00:05:28.920 --> 00:05:30.520
You will understand this at the end.

80
00:05:30.520 --> 00:05:32.200
Believe me, trust me.

81
00:05:32.200 --> 00:05:37.865
So, again, we ask Safari or Chrome or
Firefox for subscription details and

82
00:05:37.865 --> 00:05:43.528
they will give us an object and we need
to save that object in our web service,

83
00:05:43.528 --> 00:05:46.560
and you will understand why in a minute.

84
00:05:47.970 --> 00:05:51.013
So, to actually request this,

85
00:05:51.013 --> 00:05:56.764
we also need to get the service
worker registration object,

86
00:05:56.764 --> 00:06:02.980
and over that we talk to the push manager,
and we register a push.

87
00:06:04.510 --> 00:06:11.650
The push, we subscribe a push,
needs two mandatory properties.

88
00:06:11.650 --> 00:06:17.700
A user visible only,
that the only acceptable value is true.

89
00:06:17.700 --> 00:06:20.960
This is something that we
discussed before today.

90
00:06:20.960 --> 00:06:27.410
So, on native applications,
you can send silent notification.

91
00:06:27.410 --> 00:06:30.900
A silent notification
will wake up the app.

92
00:06:30.900 --> 00:06:33.859
The data that we're sending
is received by the app but

93
00:06:33.859 --> 00:06:36.170
the app doesn't need to notify the user.

94
00:06:37.740 --> 00:06:42.470
On the web, this is forbidden.

95
00:06:42.470 --> 00:06:46.370
We can only subscribe to
user visible notification.

96
00:06:46.370 --> 00:06:50.430
So, that means every message
that the server is sending will

97
00:06:50.430 --> 00:06:52.510
notify something to the user.

98
00:06:53.520 --> 00:06:58.318
So, if we are abusing this, the user
will notice that it will be annoying,

99
00:06:58.318 --> 00:07:02.354
and he will remove the permission
it will revoke the permission

100
00:07:02.354 --> 00:07:04.430
from the notification itself.

101
00:07:06.410 --> 00:07:09.162
Even Chrome right now in case
of Chrome When there is,

102
00:07:09.162 --> 00:07:13.078
there are many notifications from the same
origin is giving you a man another

103
00:07:13.078 --> 00:07:17.669
notification says, hey, you're receiving
too many notifications from this origin Do

104
00:07:17.669 --> 00:07:19.350
you want to revoke permission?

105
00:07:21.270 --> 00:07:24.970
Okay, and then we need to send
an application server key.

106
00:07:26.270 --> 00:07:31.051
So, today at least the Web Push
system is working on top of

107
00:07:31.051 --> 00:07:34.120
something known as BAP ID.

108
00:07:34.120 --> 00:07:37.645
It doesn't matter how to do with
security but a few years ago

109
00:07:37.645 --> 00:07:42.640
initially we didn't have that, but
now we have that on every browser.

110
00:07:42.640 --> 00:07:45.240
That's actually a pair of public and
private keys.

111
00:07:46.760 --> 00:07:50.816
Okay, so for our server,
we need to create those keys, and

112
00:07:50.816 --> 00:07:55.030
I will show you how to do
that in a couple of minutes.

113
00:07:55.030 --> 00:08:01.060
And we need to put our public key
there in the application server key.

114
00:08:01.060 --> 00:08:03.680
The key is a string, so
we put the string there.

115
00:08:03.680 --> 00:08:07.170
We copy and paste to the public key, okay?

116
00:08:08.340 --> 00:08:13.720
So, that key will actually
travel to the push server.

117
00:08:15.590 --> 00:08:17.724
Okay and the server so Safari or

118
00:08:17.724 --> 00:08:21.840
Chrome will actually store our
public key with our origin.

119
00:08:23.960 --> 00:08:27.570
So, you will start understanding
why this is needed, okay?

120
00:08:27.570 --> 00:08:29.410
This is for security.

121
00:08:29.410 --> 00:08:35.780
So, no one can actually impersonate us,
and sending push messages with our name.

122
00:08:37.340 --> 00:08:42.183
So, that's why we also have a private
key That we need to store safely,

123
00:08:42.183 --> 00:08:45.833
and no one needs to know
about our private key, okay?

124
00:08:45.833 --> 00:08:47.540
Make sense?

125
00:08:47.540 --> 00:08:53.880
And so, this is a promise,
so we wait for it.

126
00:08:53.880 --> 00:08:57.336
And when we have the data,
we need to save the data in our server.

127
00:08:58.411 --> 00:08:59.711
That's the idea.

128
00:08:59.711 --> 00:09:03.822
So, we do a fetch to our server,
and we send the data, and

129
00:09:03.822 --> 00:09:10.310
the server needs to store that somewhere
in a database, okay, wherever you want.

130
00:09:10.310 --> 00:09:15.280
You will need that data
to send messages to

131
00:09:15.280 --> 00:09:19.470
that user in the future, okay?

132
00:09:19.470 --> 00:09:20.000
Makes sense?

133
00:09:21.260 --> 00:09:23.223
The data looks like this.

134
00:09:23.223 --> 00:09:25.671
Because I think you were
thinking about this.

135
00:09:25.671 --> 00:09:28.604
So, what's the data,
what subscription details.

136
00:09:28.604 --> 00:09:30.121
You receive an endpoint.

137
00:09:31.367 --> 00:09:35.590
The endpoint is actually a URL
that typically has a unique ID for

138
00:09:35.590 --> 00:09:40.291
that user on that device You won't
get the username, the user email,

139
00:09:40.291 --> 00:09:43.733
nothing that will actually
point to the real user.

140
00:09:43.733 --> 00:09:49.240
It's a unique ID that represents
that user in that device.

141
00:09:49.240 --> 00:09:53.352
So, if the user is on an iPhone,
and it's on Safari on the Mac,

142
00:09:53.352 --> 00:09:56.730
let's say that iPhone supports the API.

143
00:09:56.730 --> 00:10:00.724
You will get, if the user is subscribing
and on the same website to push,

144
00:10:00.724 --> 00:10:03.030
you will get two different unique ideas.

145
00:10:04.370 --> 00:10:06.620
And you'll know if it's the same user or
not,

146
00:10:06.620 --> 00:10:09.820
even if it's the same iCloud account,
okay?

147
00:10:09.820 --> 00:10:11.170
And also, you receive keys.

148
00:10:12.610 --> 00:10:18.520
And those keys, are actually
public keys from the push server.

149
00:10:19.990 --> 00:10:25.860
Okay, and we just say this,
all that data in our server.

150
00:10:25.860 --> 00:10:27.130
Yes.

151
00:10:27.130 --> 00:10:30.449
&gt;&gt; When you say that the push
server is owned by the browser,

152
00:10:30.449 --> 00:10:34.198
do you mean that it's owned and
operated by the browser vendor?

153
00:10:34.198 --> 00:10:36.077
Yeah.
&gt;&gt; So like.

154
00:10:36.077 --> 00:10:41.070
&gt;&gt; Apple multilane Google, yes.

155
00:10:41.070 --> 00:10:45.340
&gt;&gt; Like have to operate push
servers to provide this as

156
00:10:45.340 --> 00:10:48.070
an intermediary essentially.

157
00:10:48.070 --> 00:10:51.598
&gt;&gt; That's correct, yeah
&gt;&gt; Okay, they have their own cloud, and

158
00:10:51.598 --> 00:10:53.699
they have their services there and

159
00:10:53.699 --> 00:10:57.980
we are going to talk to those servers
in the future to send messages to.

160
00:11:00.040 --> 00:11:05.202
Okay, make sense, so this is the data
that we will get from every user,

161
00:11:05.202 --> 00:11:07.370
and we need to send that data.

162
00:11:08.560 --> 00:11:09.960
To our server.

163
00:11:09.960 --> 00:11:14.490
In fact, before coding this,
let me run this on any website,

164
00:11:14.490 --> 00:11:18.256
because we can actually
see this on every website.

165
00:11:18.256 --> 00:11:24.462
For example, I can, let's go and
request permission for

166
00:11:24.462 --> 00:11:30.680
notification on any website,
which website do you want?

167
00:11:31.710 --> 00:11:35.330
Good.
How can we do that?

168
00:11:35.330 --> 00:11:39.180
Yes, so can I request notification?

169
00:11:39.180 --> 00:11:40.440
There you have it.

170
00:11:40.440 --> 00:11:46.390
GitHub wants to notify me just
because I pasted deadline, okay.

171
00:11:46.390 --> 00:11:48.720
I say okay, yeah, granted.

172
00:11:48.720 --> 00:11:55.140
So now I have notifications
on this origin on this.

173
00:11:55.140 --> 00:11:57.500
In this origin, in this browser.

174
00:11:57.500 --> 00:12:00.420
This is per browser, per origin, okay?

175
00:12:00.420 --> 00:12:01.860
So, it's granted.

176
00:12:01.860 --> 00:12:06.780
So, that means that now
I can request a push.

177
00:12:06.780 --> 00:12:13.320
So, without all the data here,
I need this code.

178
00:12:13.320 --> 00:12:18.032
The problem that I have despite that
character although I don't know what

179
00:12:18.032 --> 00:12:20.576
that is, is that I need the key.

180
00:12:20.576 --> 00:12:24.370
Also I need service worker registration.

181
00:12:24.370 --> 00:12:26.400
I don't if it has service worker actually.

182
00:12:27.430 --> 00:12:31.320
lets see application, no it doesn't.

183
00:12:31.320 --> 00:12:32.528
So without service worker.

184
00:12:32.528 --> 00:12:37.098
No push but
I don't have permission because you can

185
00:12:37.098 --> 00:12:40.400
still create local notifications.

186
00:12:41.970 --> 00:12:45.130
Remember it's the same permission.

187
00:12:45.130 --> 00:12:49.150
Okay, so let's go to skoosh.

188
00:12:49.150 --> 00:12:52.730
They do have a service
worker because it's a PWA.

189
00:12:54.180 --> 00:12:57.760
So requesting permission,
granted permission.

190
00:12:57.760 --> 00:13:02.333
Now I need to, Say that

191
00:13:02.333 --> 00:13:07.059
registration is await navigator.

192
00:13:07.059 --> 00:13:12.045
Service worker ready and
over data registration

193
00:13:12.045 --> 00:13:16.178
I'm going to talk to the push manager but

194
00:13:16.178 --> 00:13:22.380
hey my key is not valid
because I need the public key.

195
00:13:22.380 --> 00:13:24.520
So, how can you create keys?

196
00:13:25.760 --> 00:13:28.370
The simplest way,
we will do that with our code in a minute.

197
00:13:28.370 --> 00:13:31.997
But I want to show you first that I can
run this over any website, actually,

198
00:13:31.997 --> 00:13:33.688
even if I don't know the website.

199
00:13:33.688 --> 00:13:36.510
It's weird.

200
00:13:36.510 --> 00:13:38.020
So, I open a terminal.

201
00:13:39.610 --> 00:13:44.350
And I will run a magic code, not really
a magic code, but it's something on NPM.

202
00:13:44.350 --> 00:13:53.026
I'm going to execute over a Web Push
library it generates VAP ID keys.

203
00:13:55.668 --> 00:14:00.836
I have a pair of keys, the public key and
the private key, every time you run

204
00:14:00.836 --> 00:14:06.514
this you get another pair When you pick
one, you need to safely store that, okay?

205
00:14:06.514 --> 00:14:10.170
So, now I can take that public key,
for example, and

206
00:14:10.170 --> 00:14:12.534
try to use that one as the key here.

207
00:14:16.231 --> 00:14:21.873
Let's see, I still think it's fine.

208
00:14:21.873 --> 00:14:26.030
I didn't get any response yet, so
it's still waiting for some reason.

209
00:14:27.410 --> 00:14:28.924
I'm here, counsel.

210
00:14:28.924 --> 00:14:31.925
It's working.

211
00:14:31.925 --> 00:14:37.170
&gt;&gt; Could just be returning nothing.

212
00:14:37.170 --> 00:14:37.980
&gt;&gt; No, there we are.

213
00:14:37.980 --> 00:14:39.670
It just took a lot of time.

214
00:14:39.670 --> 00:14:40.950
I'm not sure why.

215
00:14:40.950 --> 00:14:42.957
Yeah, not normal.

216
00:14:42.957 --> 00:14:48.570
Anyway, this is the object
that I have in return.

217
00:14:48.570 --> 00:14:51.032
I have an endpoint and
look at the endpoint fcm.

218
00:14:51.032 --> 00:14:53.782
That's five Cloud messaging.

219
00:14:53.782 --> 00:14:58.300
Google apis.com, blah,
blah, blah, blah, blah.

220
00:14:58.300 --> 00:15:00.700
And this is the my id.

221
00:15:02.500 --> 00:15:09.109
And then, options with another
key that's an array buffer so

222
00:15:09.109 --> 00:15:16.875
now with that information I can send
a message to myself as skoosh .app,

223
00:15:19.932 --> 00:15:23.172
Okay?

224
00:15:23.172 --> 00:15:25.326
At at least it will work.

225
00:15:25.326 --> 00:15:27.855
So now we will do that
process with our app, okay?

226
00:15:27.855 --> 00:15:32.476
But at first I wanna show you that you
can actually get that information pretty

227
00:15:32.476 --> 00:15:36.895
quickly, okay,
on any website if it has a service worker.

228
00:15:36.895 --> 00:15:38.805
Because without service
worker we don't have the API.

