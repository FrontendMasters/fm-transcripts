WEBVTT

1
00:00:00.170 --> 00:00:03.950
Let's implement this first
part in our website.

2
00:00:03.950 --> 00:00:06.231
So I'm going to open push.js.

3
00:00:06.231 --> 00:00:10.942
So in push.js you will find already
a couple of functions that we

4
00:00:10.942 --> 00:00:12.172
will use later.

5
00:00:12.172 --> 00:00:14.500
They're tricky.

6
00:00:14.500 --> 00:00:19.860
One of the problems here is that
the data that we received from here,

7
00:00:19.860 --> 00:00:21.094
as you can see.

8
00:00:21.094 --> 00:00:26.630
It's actually an arrayBuffer and
we need to send that to the server.

9
00:00:26.630 --> 00:00:30.010
So we need to convert that into something
that we can send to the server.

10
00:00:30.010 --> 00:00:35.041
So I'm converting that into text Base64,
blah blah blah.

11
00:00:35.041 --> 00:00:39.643
To be honest,
on most cases when you have a website and

12
00:00:39.643 --> 00:00:42.416
you want to implement web push.

13
00:00:42.416 --> 00:00:47.202
What you're going to do is to
probably use a cloud based

14
00:00:47.202 --> 00:00:51.894
solution that is everything
is already done for you.

15
00:00:51.894 --> 00:00:58.110
Like Firebase, Microsoft Azure, and
Amazon's cloud, all the solutions.

16
00:00:58.110 --> 00:01:02.280
They have an easy to
use web push solution.

17
00:01:02.280 --> 00:01:06.030
So you're not going to probably
write this manually, your own.

18
00:01:06.030 --> 00:01:09.992
We're going to do that to understand this
as vanilla plain JavaScript because it's

19
00:01:09.992 --> 00:01:11.670
not so difficult.

20
00:01:11.670 --> 00:01:15.469
The most difficult part is
probably on the servers part.

21
00:01:15.469 --> 00:01:20.143
The server side that I already
have a quick solution, so

22
00:01:20.143 --> 00:01:24.724
it's a plain solution,
also vanilla, in node.js.

23
00:01:24.724 --> 00:01:31.220
But again, if you're using five arrays
from Google or Azure, you have that done.

24
00:01:31.220 --> 00:01:36.690
You have an API, you just call the API and
say, hey, I wanna send a message.

25
00:01:36.690 --> 00:01:38.750
You don't care about all the details.

26
00:01:38.750 --> 00:01:44.072
So then what we want first here is we

27
00:01:44.072 --> 00:01:49.680
wanna try to write code for push.

28
00:01:49.680 --> 00:01:53.579
In our HTML we do have a section for

29
00:01:53.579 --> 00:01:57.670
push with a btnPushSubscribe.

30
00:01:57.670 --> 00:02:01.820
So I'm going to start reading that button,
click event handler.

31
00:02:04.020 --> 00:02:11.215
That's the simplest part and
within the push.js file.

32
00:02:11.215 --> 00:02:16.410
So it's going to be document,
our friend, getElementById.

33
00:02:18.545 --> 00:02:24.848
And we're going to addEventListener for
the click, that simple.

34
00:02:26.584 --> 00:02:29.685
Well, I did an old function but

35
00:02:29.685 --> 00:02:34.227
we can use our own function
of course as well.

36
00:02:34.227 --> 00:02:36.640
We can have two operations or only one.

37
00:02:36.640 --> 00:02:38.860
Typically, we are doing
everything at once.

38
00:02:38.860 --> 00:02:45.120
We request permission, and
also we request the push subscription.

39
00:02:45.120 --> 00:02:47.890
But technically there
are two different steps.

40
00:02:47.890 --> 00:02:53.740
So you can do this in two different
moments of your web app life cycle.

41
00:02:53.740 --> 00:02:58.350
Commonly, you just do everything at once.

42
00:02:58.350 --> 00:03:04.157
So the first step, let's say that
the service worker, we already have it so

43
00:03:04.157 --> 00:03:08.760
we are not checking if service
worker API is available.

44
00:03:08.760 --> 00:03:11.560
We are just going to try this directly.

45
00:03:11.560 --> 00:03:16.847
One quick way to know if push
is available is checking

46
00:03:16.847 --> 00:03:21.792
in the ServiceWorkerRegistrationPrototype.

47
00:03:21.792 --> 00:03:28.390
It's a weird one, if we do have
showNotification, it's one way.

48
00:03:29.740 --> 00:03:33.550
So that's a simple way to
check if the API is available.

49
00:03:34.750 --> 00:03:36.410
Progressive enhancement, okay?

50
00:03:36.410 --> 00:03:39.000
That means that web push is available.

51
00:03:39.000 --> 00:03:48.220
So on the else,
we can log Web push not available.

52
00:03:48.220 --> 00:03:52.970
For example, it's an iPhone
today that is not available.

53
00:03:54.320 --> 00:03:55.170
What else?
Well,

54
00:03:55.170 --> 00:03:57.870
maybe it can be a website
without the ServiceWorker.

55
00:03:59.090 --> 00:04:02.174
It can be a website on HTTP, not HTTPS.

56
00:04:05.749 --> 00:04:07.750
&gt;&gt; So
they also don't have a ServiceWorker?

57
00:04:07.750 --> 00:04:09.040
&gt;&gt; Because they don't
have a ServiceWorker.

58
00:04:09.040 --> 00:04:12.759
So at the end,
we are just asking about the same thing.

59
00:04:12.759 --> 00:04:18.620
Okay, so when we are here then we
are ready to request permission.

60
00:04:18.620 --> 00:04:21.590
Okay, and
that's the permission that we saw before.

61
00:04:21.590 --> 00:04:23.540
It's actually pretty simple.

62
00:04:23.540 --> 00:04:25.750
We take Notification.

63
00:04:25.750 --> 00:04:28.390
We can check first if we
have permission or not.

64
00:04:28.390 --> 00:04:30.399
Or we can just requestPermission.

65
00:04:32.875 --> 00:04:35.124
And we are going to await for that.

66
00:04:35.124 --> 00:04:37.068
And because we are doing a wait,

67
00:04:37.068 --> 00:04:40.166
I'm converting my function
to an async function.

68
00:04:42.488 --> 00:04:49.720
Okay, and yeah, we can,
Store the state in case we want to check.

69
00:04:49.720 --> 00:04:56.532
And actually the API is pretty simple
to the periodic background sync.

70
00:04:56.532 --> 00:04:59.694
We are following this, so

71
00:04:59.694 --> 00:05:04.303
we just check for the string granted.

72
00:05:04.303 --> 00:05:07.140
So that's how it works.

73
00:05:08.140 --> 00:05:09.859
So it's a string.

74
00:05:11.228 --> 00:05:16.077
If it's granted, this is an old permission

75
00:05:16.077 --> 00:05:20.018
API in browsers but it's how it is.

76
00:05:20.018 --> 00:05:24.814
So if it's granted then, We

77
00:05:24.814 --> 00:05:28.846
can request push subscription.

78
00:05:31.558 --> 00:05:32.940
Okay, make sense?

79
00:05:34.060 --> 00:05:38.340
What happens if I'm requesting
permission and it was already granted?

80
00:05:38.340 --> 00:05:39.770
Nothing, it will be granted.

81
00:05:39.770 --> 00:05:41.761
So the state will be
granted automatically.

82
00:05:41.761 --> 00:05:46.503
If it was denied this
permission in particular,

83
00:05:46.503 --> 00:05:51.371
if it was denied it will
be denied automatically.

84
00:05:51.371 --> 00:05:54.082
The user won't see a message typically.

85
00:05:54.082 --> 00:05:58.946
Also I'm not covering
today a lot of complex

86
00:05:58.946 --> 00:06:03.161
algorithms that some browsers have.

87
00:06:03.161 --> 00:06:08.607
For example, Google Chrome has
also an engagement score but

88
00:06:08.607 --> 00:06:11.397
not the one that we saw before.

89
00:06:11.397 --> 00:06:15.360
It's more like a server
side engagement score.

90
00:06:15.360 --> 00:06:23.520
If they know that you're abusing web
push they will not show any dialogue.

91
00:06:24.550 --> 00:06:28.642
You will see in the URL bar a message
saying notification blocked immediately.

92
00:06:28.642 --> 00:06:31.836
Even if it's a new user that has
just arrived to your website for

93
00:06:31.836 --> 00:06:33.190
the first time.

94
00:06:33.190 --> 00:06:37.292
But Chrome thinks that
you're abusing web push.

95
00:06:37.292 --> 00:06:40.969
So then notifications will
be blocked by default.

96
00:06:40.969 --> 00:06:43.170
You won't see even the dialogue.

97
00:06:43.170 --> 00:06:47.745
And if the user wants notification,
the user needs to go manually to that

98
00:06:47.745 --> 00:06:51.120
notification blocks icon and
enable that manually.

99
00:06:53.430 --> 00:06:58.623
So that is suppose to increase
the user experience of

100
00:06:58.623 --> 00:07:03.706
websites that are really
annoying about web push.

101
00:07:03.706 --> 00:07:11.226
And it will try to push those developers
to make a better push implementation.

102
00:07:11.226 --> 00:07:12.930
That's kind of idea.

103
00:07:12.930 --> 00:07:17.416
Now if we are ready here
what we need is to talk to

104
00:07:17.416 --> 00:07:21.350
our service worker registration.

105
00:07:21.350 --> 00:07:25.890
So what we need is another
service worker registration.

106
00:07:25.890 --> 00:07:31.456
That is navigator.serviceWorker dot.ready.

107
00:07:31.456 --> 00:07:36.547
And when we have that
one now we need to talk

108
00:07:36.547 --> 00:07:41.645
to the subscription to the pushManager.

109
00:07:41.645 --> 00:07:45.730
It's pushManager.subscribe.

110
00:07:45.730 --> 00:07:49.148
And we need to pass
an object with options.

111
00:07:52.481 --> 00:07:57.299
And typically we await for the details.

112
00:07:59.701 --> 00:08:01.110
Something like that.

113
00:08:01.110 --> 00:08:08.320
And the subscribe has userVisibleOnly
with a mandatory true.

114
00:08:08.320 --> 00:08:13.597
If you try false,
you will get an exception saying no.

115
00:08:13.597 --> 00:08:17.800
We only support userVisibleOnly true.

116
00:08:17.800 --> 00:08:20.960
And then we need
the application server key.

