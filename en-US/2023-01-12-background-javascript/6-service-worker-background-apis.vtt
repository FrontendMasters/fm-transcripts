WEBVTT

1
00:00:00.090 --> 00:00:04.523
The background APIs that we're going
to see are all abilities on top

2
00:00:04.523 --> 00:00:08.199
of the main spec,
the main service worker spec, okay?

3
00:00:08.199 --> 00:00:14.287
We will write our service worker later,
but compatibility differs per browser.

4
00:00:14.287 --> 00:00:17.804
I will show you how the situation
looks like right now.

5
00:00:17.804 --> 00:00:23.862
But we need to have in mind, and
we will focus on that in a minute,

6
00:00:23.862 --> 00:00:30.163
that in the background, maybe not,
the user is not using our app.

7
00:00:30.163 --> 00:00:36.442
So I cannot just update something in the
DOM to render information for the user.

8
00:00:36.442 --> 00:00:38.487
You're in the background, okay?

9
00:00:38.487 --> 00:00:41.243
So if we wanna notify the user,

10
00:00:41.243 --> 00:00:47.830
we need to find other ways than
just rendering in the DOM, okay?

11
00:00:47.830 --> 00:00:52.430
So have in mind that because
the background is also a challenge.

12
00:00:52.430 --> 00:00:54.085
So we have Web Push.

13
00:00:54.085 --> 00:01:00.896
Web Push, it's the only API that involves
the server, the backend as well.

14
00:01:00.896 --> 00:01:05.378
So with Web Push,
our server, so server side,

15
00:01:05.378 --> 00:01:12.902
we can decide to wake up Charles' group
code in user's device anytime, okay?

16
00:01:12.902 --> 00:01:17.486
So, it's the only one that
it happens server side, so

17
00:01:17.486 --> 00:01:24.279
the server can actually wake up the code
in the background for our web app, okay?

18
00:01:24.279 --> 00:01:27.776
Background Sync, it's another API.

19
00:01:27.776 --> 00:01:32.454
This is a very simple API,
and we will test that later,

20
00:01:32.454 --> 00:01:38.983
that will let us expose to the browser
that we have a pending sync operation.

21
00:01:38.983 --> 00:01:42.337
So we need to sync data to the server,
okay?

22
00:01:42.337 --> 00:01:43.744
It can be anything.

23
00:01:43.744 --> 00:01:45.576
We may wanna download data.

24
00:01:45.576 --> 00:01:48.973
We may wanna send data, okay, or both.

25
00:01:48.973 --> 00:01:52.834
And we're going to specify to the browser,
hey, browser, I need to update data,

26
00:01:52.834 --> 00:01:54.590
remember that, okay?

27
00:01:54.590 --> 00:01:59.019
And maybe there is no connection
right now, but later in an hour,

28
00:01:59.019 --> 00:02:03.410
the user gets connection, but
the user is not using our app.

29
00:02:03.410 --> 00:02:07.138
But the browser will remember that
there is a pending operation,

30
00:02:07.138 --> 00:02:08.575
it will wake up our code.

31
00:02:08.575 --> 00:02:12.417
It will say, okay, try now,
go now, sync your data, okay?

32
00:02:12.417 --> 00:02:14.460
That's Background Sync.

33
00:02:14.460 --> 00:02:20.370
Another one is called Periodic Background
Sync, which is even more interesting.

34
00:02:21.540 --> 00:02:25.330
We can actually ask the browser,
hey, browser, something like this.

35
00:02:25.330 --> 00:02:28.508
Every morning, I wanna wake up my code,

36
00:02:28.508 --> 00:02:33.940
even if the user is not using my app and
they wanna download some data.

37
00:02:35.920 --> 00:02:37.440
Is it possible today?

38
00:02:37.440 --> 00:02:40.490
Yes, we will see later how, okay?

39
00:02:40.490 --> 00:02:41.939
What are the options?

40
00:02:41.939 --> 00:02:43.168
How does it work?

41
00:02:43.168 --> 00:02:44.686
But it's possible.

42
00:02:44.686 --> 00:02:49.304
Background Fetch is for
the case that you need to

43
00:02:49.304 --> 00:02:53.122
download large amount of data, okay?

44
00:02:53.122 --> 00:02:57.827
So you're downloading a video,
or a PDF, or whatever, and

45
00:02:57.827 --> 00:03:01.255
it's like 200 megabytes, a gigabyte.

46
00:03:01.255 --> 00:03:05.015
And yeah,
if you're running that in the main thread,

47
00:03:05.015 --> 00:03:08.059
what happens when
the user closes your app?

48
00:03:08.059 --> 00:03:14.390
So the user must be there present with
your web app, active to download the data.

49
00:03:14.390 --> 00:03:18.581
Well, with Background Fetch,
we can do a fetch, so

50
00:03:18.581 --> 00:03:24.990
we can download data not matter if the
user continues using my app or not, okay?

51
00:03:24.990 --> 00:03:26.400
Something like that.

52
00:03:26.400 --> 00:03:31.382
Payment Handler, it's the only
API that we won't cover today

53
00:03:31.382 --> 00:03:35.240
because it's a very,
very niche specific API.

54
00:03:36.560 --> 00:03:38.578
The idea is that,
I'm not sure if you know,

55
00:03:38.578 --> 00:03:41.580
there is an API known
as Request Payment API.

56
00:03:41.580 --> 00:03:44.831
So it's the one that allows
a website to use, for

57
00:03:44.831 --> 00:03:48.162
example, Apple Pay or
you can use Android Pay, or

58
00:03:48.162 --> 00:03:54.360
you can use your store credit cards in
your Desktop browser to pay on a website.

59
00:03:54.360 --> 00:03:56.935
Well, there is an extension to that API,

60
00:03:56.935 --> 00:04:01.830
it's called the Payment Handler API
that has to do with pre-authorization.

61
00:04:01.830 --> 00:04:06.724
I mean, when you go and you wanna put
some gas in your car, you pre-authorize

62
00:04:06.724 --> 00:04:12.050
your car, because you don't know how
much money you will actually spend.

63
00:04:12.050 --> 00:04:17.160
So then using this API,
you can pre-authorize the charge.

64
00:04:17.160 --> 00:04:22.440
But then maybe you will charge the user
in five minutes, in ten minutes.

65
00:04:22.440 --> 00:04:25.220
What happens if the user
closes the web app?

66
00:04:25.220 --> 00:04:30.143
Well, with the Payment Handler API,
you can wake up your code in five minutes

67
00:04:30.143 --> 00:04:33.490
to actually finish the pending
payment operation.

68
00:04:33.490 --> 00:04:36.085
It's a very niche situation, okay?

69
00:04:36.085 --> 00:04:39.671
But it's there, anyway.

70
00:04:39.671 --> 00:04:44.193
On Chromium,
all these APIs are available, okay?

71
00:04:44.193 --> 00:04:49.320
So that's Google Chrome,
Samsung Internet browser, Microsoft Edge.

72
00:04:49.320 --> 00:04:54.286
The other Chromium browsers, it depends,
sometimes they disable these APIs

73
00:04:54.286 --> 00:04:58.300
because of privacy reasons or
because they want to, okay?

74
00:04:58.300 --> 00:05:03.570
But the main three, or even four,
do you know Opera probably?

75
00:05:03.570 --> 00:05:07.500
The main four Chromium-based browsers,
they all have these API's.

76
00:05:07.500 --> 00:05:13.970
Well, with Safari,
Web Push only and with an asterisk.

77
00:05:13.970 --> 00:05:18.110
So it works only on macOS Ventura, okay?

78
00:05:18.110 --> 00:05:23.407
Only from MacOS Ventura you
can use Web Push, and iOS and

79
00:05:23.407 --> 00:05:30.110
iPadOS is coming 2023 at one point,
no one knows, okay?

80
00:05:30.110 --> 00:05:34.030
And finally, Firefox,
it's only Web Push, okay?

81
00:05:34.030 --> 00:05:36.400
So Firefox is only Web Push.

82
00:05:36.400 --> 00:05:39.000
So we don't have the other APIs.

83
00:05:39.000 --> 00:05:45.031
But anyway, Chrome or Chromium, they have
around 80% of the global market share,

84
00:05:45.031 --> 00:05:49.088
so 80% of the users will have
all these APIs available.

85
00:05:49.088 --> 00:05:52.380
So that's the whole situation.

