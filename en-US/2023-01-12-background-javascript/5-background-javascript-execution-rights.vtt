WEBVTT

1
00:00:00.240 --> 00:00:04.025
So the problem is that some of you,
some of your use cases,

2
00:00:04.025 --> 00:00:08.760
will actually say, hey, I wanna still
execute code in the background.

3
00:00:08.760 --> 00:00:13.437
It's actually, in fact,
something that some projects and

4
00:00:13.437 --> 00:00:20.050
some PM sometimes they, but I wanna follow
the user wherever it goes with my PWA.

5
00:00:20.050 --> 00:00:22.574
Of course, this is limited, okay, so

6
00:00:22.574 --> 00:00:26.171
we are going to see here what
we can do in the background.

7
00:00:26.171 --> 00:00:28.000
We are not a native app.

8
00:00:28.000 --> 00:00:31.664
We're not going through an app store
review process on mobile, for example.

9
00:00:31.664 --> 00:00:38.718
So the browser will never give us infinite
background execution rights, okay?

10
00:00:38.718 --> 00:00:41.214
But there are still some
things that we can do, and

11
00:00:41.214 --> 00:00:43.717
that's what we're going to cover today,
okay?

12
00:00:43.717 --> 00:00:48.775
So options available today,
as a summary first.

13
00:00:48.775 --> 00:00:52.877
You can go to the Play Store,
publish a PWA for Android and

14
00:00:52.877 --> 00:00:56.210
then you can have your
website on one side, and

15
00:00:56.210 --> 00:01:00.937
you can have native code that can
execute code in the background.

16
00:01:00.937 --> 00:01:06.669
Because it's going through the App Store
review process, you have full power, okay?

17
00:01:06.669 --> 00:01:11.957
But yeah, it's not 100% a web app, okay?

18
00:01:11.957 --> 00:01:16.365
On Android you can create a service and
also many other things, but

19
00:01:16.365 --> 00:01:19.278
that service can actually
execute Kotlin or

20
00:01:19.278 --> 00:01:23.390
Java code in the background,
okay, even every ten seconds.

21
00:01:25.570 --> 00:01:29.620
Something similar can be
done with an abstract PWA.

22
00:01:29.620 --> 00:01:33.332
We're not going to cover this because
we are web developers here, so

23
00:01:33.332 --> 00:01:35.896
we are not making native code today,
at least.

24
00:01:35.896 --> 00:01:40.373
And we will cover service
worker background APIs, and

25
00:01:40.373 --> 00:01:44.949
these are some additions
available on top of the service

26
00:01:44.949 --> 00:01:50.009
worker stack that will let us
execute code in the background,

27
00:01:50.009 --> 00:01:55.784
in any of the background situations
that we mentioned before, okay?

28
00:01:55.784 --> 00:01:58.385
And we will see later in which ones.

29
00:01:58.385 --> 00:02:02.667
But again, the background means that when
it's hidden, and when my timers are down

30
00:02:02.667 --> 00:02:06.747
or when everything is dead,
I don't know, that's the background.

31
00:02:06.747 --> 00:02:10.527
So we will see how we
can execute code there.

32
00:02:10.527 --> 00:02:15.389
And also recently, we have another
use case for background execution,

33
00:02:15.389 --> 00:02:19.145
recently, I'm talking about
in the past year or less.

34
00:02:19.145 --> 00:02:23.042
So on every browser today we
have new APIs for audio and

35
00:02:23.042 --> 00:02:25.563
video playing in the background.

36
00:02:25.563 --> 00:02:29.177
So if your web app is playing audio or
video,

37
00:02:29.177 --> 00:02:34.257
now we have ways to keep our web
app running in the background,

38
00:02:34.257 --> 00:02:38.868
because we need to still work
on that background audio.

39
00:02:38.868 --> 00:02:43.844
If it's live playing, typically,
sometimes we can run our own

40
00:02:43.844 --> 00:02:49.191
JavaScript code that will start
downloading the new piece of audio or

41
00:02:49.191 --> 00:02:52.435
video that needs to be sent to the player.

42
00:02:52.435 --> 00:02:57.060
So in this case, we will see,
and we have an example later so

43
00:02:57.060 --> 00:03:02.070
we can test this on our computers,
on our code, how that works.

44
00:03:03.110 --> 00:03:06.134
And even there are some tricks
that I will show you later,

45
00:03:06.134 --> 00:03:10.390
that's on desktop actually,
that maybe you don't have video playing.

46
00:03:10.390 --> 00:03:13.405
You don't have video on your website, but

47
00:03:13.405 --> 00:03:17.611
you can still trick the browser
that you have video, okay?

48
00:03:17.611 --> 00:03:21.769
You can render something that maybe
it's not a video, it can be a game,

49
00:03:21.769 --> 00:03:24.560
it can be a DOM element,
a cCanvas, wherever.

50
00:03:24.560 --> 00:03:27.474
And you can be playing that as a video and

51
00:03:27.474 --> 00:03:31.370
then you can execute code
in the background, okay?

52
00:03:31.370 --> 00:03:35.020
That trick works only on desktop, okay?

53
00:03:35.020 --> 00:03:35.900
Make sense?

54
00:03:35.900 --> 00:03:37.803
So those are the things that,

55
00:03:37.803 --> 00:03:41.930
I mean, the last two are the things
that we will be coding later.

56
00:03:41.930 --> 00:03:46.968
For the rest you need to learn Kotlin or
Swift to actually inject

57
00:03:46.968 --> 00:03:52.640
your PWA inside and
then have background execution rights.

58
00:03:52.640 --> 00:03:54.344
But even with that on iOS,

59
00:03:54.344 --> 00:03:59.660
background execution rights are granted
per basis and it's not so simple.

60
00:03:59.660 --> 00:04:04.886
Like, yeah, I wanna execute code anytime,
it's not so simple on iOS.

61
00:04:04.886 --> 00:04:08.204
Any question, do you have any question?

62
00:04:08.204 --> 00:04:08.870
&gt;&gt; I do.

63
00:04:08.870 --> 00:04:13.320
&gt;&gt; So
these are related to mobile applications.

64
00:04:13.320 --> 00:04:16.256
And do we have-
&gt;&gt; The first two, I'm sorry, for

65
00:04:16.256 --> 00:04:22.150
the last two, it's actually multi
platform, so it's desktop as well.

66
00:04:22.150 --> 00:04:25.840
But these two are actually mostly mobile.

67
00:04:25.840 --> 00:04:29.074
I'm saying mostly, because now,
for example, on Mac,

68
00:04:29.074 --> 00:04:31.960
you can actually run iOS and
iPad applications.

69
00:04:31.960 --> 00:04:35.170
It depends on the Mac you have,
if you have a DM1, blah blah blah.

70
00:04:35.170 --> 00:04:39.990
Well, not the Google Play Store,
actually, but if you take your Android

71
00:04:39.990 --> 00:04:45.203
application and you publish your Android
application in the Amazon App Store,

72
00:04:45.203 --> 00:04:50.010
it appears in Windows 11,
Microsoft Store on desktop as well.

73
00:04:50.010 --> 00:04:53.630
So it's kind of desktop as well, okay?

74
00:04:55.260 --> 00:05:00.223
To be honest, at least on Windows 11,
the Android runtime,

75
00:05:00.223 --> 00:05:07.160
that background thing, it's tricky, so
it's tricky, but anyway, it's there.

76
00:05:07.160 --> 00:05:09.900
So it's also desktop.

77
00:05:09.900 --> 00:05:15.960
Again, it's not a direct desktop solution
but it may work on desktop as well.

78
00:05:15.960 --> 00:05:20.272
On desktop,
if you care about desktop, of course,

79
00:05:20.272 --> 00:05:26.490
you always have the way to create
a hybrid for desktop as well, okay?

80
00:05:26.490 --> 00:05:31.231
And then you use any of
the frameworks available out there

81
00:05:31.231 --> 00:05:35.710
to create desktop web applications, okay?

82
00:05:35.710 --> 00:05:39.763
And then you can execute code in node.js,
okay,

83
00:05:39.763 --> 00:05:43.440
on the desktop and
then the UI is your web app.

84
00:05:44.680 --> 00:05:49.510
I mean ,VS code or Slack,
they're using those techniques.

85
00:05:49.510 --> 00:05:55.210
So they are websites, web apps, but they
are wrapped within a native container.

86
00:05:57.080 --> 00:06:01.663
Electron, for example, is one of the well
known frameworks to do that, okay?

87
00:06:01.663 --> 00:06:07.851
But on those situation we are getting
out of the web platform for a minute.

