WEBVTT

1
00:00:00.000 --> 00:00:02.932
So it's time now to talk about detection.

2
00:00:02.932 --> 00:00:06.174
So how can we know that we
are in the background or

3
00:00:06.174 --> 00:00:08.779
that we are back from the background?

4
00:00:08.779 --> 00:00:16.044
So, the real situation on most browsers,
it's actually complex, okay?

5
00:00:16.044 --> 00:00:20.546
So, this is actually the diagram
from Chromium browser's, okay?

6
00:00:20.546 --> 00:00:23.526
So this is the official
diagram from Chrome.

7
00:00:23.526 --> 00:00:27.633
So you can see there are many, we
are not going through the whole diagram,

8
00:00:27.633 --> 00:00:30.691
we are going to simplify it for
whatever matters to us.

9
00:00:30.691 --> 00:00:33.754
So, but there is an active state.

10
00:00:33.754 --> 00:00:38.063
That's actually when your web
app is in the foreground,

11
00:00:38.063 --> 00:00:41.845
a passive state,
a hidden state of frozen state.

12
00:00:41.845 --> 00:00:43.873
And then some kind of a state, but

13
00:00:43.873 --> 00:00:46.993
it's actually the final
state called us discard.

14
00:00:46.993 --> 00:00:49.108
So let's try to simplify this.

15
00:00:49.108 --> 00:00:54.434
And by the way, every yellow rectangle
that you see there, it's an event.

16
00:00:54.434 --> 00:01:00.444
So for example, the whole window also has
events like the old focus and blue events.

17
00:01:00.444 --> 00:01:07.554
But to actually make a more cross platform
solution, let's see a simpler life cycle.

18
00:01:07.554 --> 00:01:10.093
So you load a PWA a website, okay?

19
00:01:10.093 --> 00:01:13.295
You open that website,
that's the first step.

20
00:01:13.295 --> 00:01:16.177
Then you go the background.

21
00:01:16.177 --> 00:01:22.592
In that case there is an event call
visibility change that's actually

22
00:01:22.592 --> 00:01:29.451
the event that we will use no matter
how the website is not visible anymore.

23
00:01:29.451 --> 00:01:34.976
Or why visibility change will be fire,
okay?

24
00:01:34.976 --> 00:01:38.462
So that's like the simplest
way to do this.

25
00:01:38.462 --> 00:01:44.482
So the app while in
the background may be suspended.

26
00:01:44.482 --> 00:01:49.359
Again after 5 minutes in Chrome,
it gets suspended.

27
00:01:49.359 --> 00:01:53.962
On iOS, it gets suspended
after three seconds, okay?

28
00:01:53.962 --> 00:01:58.639
So on Chromium-based browsers
unfortunately, we have an event for

29
00:01:58.639 --> 00:02:00.421
that, but not on Safari.

30
00:02:00.421 --> 00:02:02.424
So it's not going to work on iOS, okay?

31
00:02:02.424 --> 00:02:03.492
After three seconds.

32
00:02:03.492 --> 00:02:05.575
It's called freeze.

33
00:02:05.575 --> 00:02:11.070
Freeze will be executed
before the browser or

34
00:02:11.070 --> 00:02:19.033
the iOS it's going to actually
freeze the whole context, okay?

35
00:02:19.033 --> 00:02:20.589
So, we can do something there.

36
00:02:20.589 --> 00:02:23.020
The problem is that it's Chromium based.

37
00:02:23.020 --> 00:02:29.899
All right, so the user may go back to
the app while the app is still in memory.

38
00:02:29.899 --> 00:02:32.326
So it's defreezing the app.

39
00:02:32.326 --> 00:02:39.455
So it was still in memory, but
now it has execution rights again.

40
00:02:39.455 --> 00:02:45.601
In that case, resume is going to be
executed and then also visibility change.

41
00:02:45.601 --> 00:02:51.544
Visibility change is executed from
visible to invisible and vice versa.

42
00:02:51.544 --> 00:02:54.024
It's the same event, okay?

43
00:02:54.024 --> 00:02:58.988
And of course there is an argument
there and we will know if we are coming

44
00:02:58.988 --> 00:03:03.463
from the background or
we're going to the background, okay?

45
00:03:03.463 --> 00:03:07.593
So the problem is that while the app
is suspended, while the app is

46
00:03:07.593 --> 00:03:12.567
in the background, there may be another
situation that the app is scattered.

47
00:03:12.567 --> 00:03:15.382
For example, I'm recording a video.

48
00:03:15.382 --> 00:03:20.064
So that takes a lot of
memory from your phone.

49
00:03:20.064 --> 00:03:27.336
So it says okay that website, that PWA
we're going to discard that app, okay?

50
00:03:27.336 --> 00:03:32.302
So in that case what happens
when the user goes back

51
00:03:32.302 --> 00:03:36.690
to the app, it starts from scratch, okay?

52
00:03:36.690 --> 00:03:41.310
On Chromium based browsers
there is a new Boolean property

53
00:03:41.310 --> 00:03:44.807
in the document properties was discarded.

54
00:03:44.807 --> 00:03:52.155
That gives you a true, when actually the
user is going back from a discarded app.

55
00:03:52.155 --> 00:03:55.616
It's false, if the user is
opening the app from a scratch,

56
00:03:55.616 --> 00:03:59.023
which is creating a new
navigation from a scratch, okay?

57
00:03:59.023 --> 00:04:01.250
But that's Chromium only.

58
00:04:01.250 --> 00:04:05.864
So to summarize this from our web app, so

59
00:04:05.864 --> 00:04:12.944
if we are going from our web app
to another app, web app or not.

60
00:04:12.944 --> 00:04:14.540
This is what typically happens.

61
00:04:14.540 --> 00:04:18.203
On desktop, we are still running but
we are not the active one.

62
00:04:18.203 --> 00:04:20.574
We are not being paused.

63
00:04:20.574 --> 00:04:22.654
So the PWA is still in memory and

64
00:04:22.654 --> 00:04:26.185
it's going to execute
visibility change and blur.

65
00:04:26.185 --> 00:04:31.785
You can see that visibility change
is kind of on every situation and

66
00:04:31.785 --> 00:04:34.989
it's also multi-platform, okay?

67
00:04:34.989 --> 00:04:39.578
So it works on every OS that we
have in the market this day.

68
00:04:39.578 --> 00:04:44.243
On mobile, when we are in our web app and
we are going somewhere else,

69
00:04:44.243 --> 00:04:46.421
it goes through a paused state.

70
00:04:46.421 --> 00:04:49.440
And it's also executing visibility change.

71
00:04:49.440 --> 00:04:54.845
And later in the timeline,
it may execute phrase.

72
00:04:54.845 --> 00:05:00.260
At any time from polls,
it can be discarded.

73
00:05:00.260 --> 00:05:02.748
There is no event for that.

74
00:05:02.748 --> 00:05:08.657
So meaning that like your last minute,
your last dinner, okay?

75
00:05:08.657 --> 00:05:14.848
Before a possible this card,
it's actually freeze or visibility change.

76
00:05:14.848 --> 00:05:19.558
So if we wanna be multiplatform,
it's going to be visibility change.

77
00:05:19.558 --> 00:05:24.325
So if you wanna save whatever
the user is doing in our web app,

78
00:05:24.325 --> 00:05:29.199
just in case our web app is
discarded by the OS, or by the user.

79
00:05:29.199 --> 00:05:33.315
We have to do that in or
within visibility to change.

80
00:05:33.315 --> 00:05:37.908
So the question is that if there is
a data come in as an argument in

81
00:05:37.908 --> 00:05:42.434
visibility change to know which
kind of change is happening.

82
00:05:42.434 --> 00:05:44.876
Or why the visibility change is happening.

83
00:05:44.876 --> 00:05:50.425
So you will know only if you are going to
the background or from the background,

84
00:05:50.425 --> 00:05:54.733
but you don't have enough
details to know what's going on.

85
00:05:54.733 --> 00:05:56.170
In fact, let me tell you something.

86
00:05:56.170 --> 00:06:00.494
There is another situation that
will trigger visibility change.

87
00:06:00.494 --> 00:06:02.730
When you're unloading the website.

88
00:06:02.730 --> 00:06:06.758
I mean, the user is clicking on
a link that goes somewhere else.

89
00:06:06.758 --> 00:06:11.186
And loading that website will
also trigger visibility change,

90
00:06:11.186 --> 00:06:15.127
because your website won't
be visible anymore, okay?

91
00:06:15.127 --> 00:06:19.782
So yeah, it's tricky if you want
to get really deep about why

92
00:06:19.782 --> 00:06:23.907
your web app bits is getting
out of the active window.

93
00:06:23.907 --> 00:06:26.668
It's not so simple to know why.

94
00:06:26.668 --> 00:06:33.800
To be honest, on many situations,
maybe you shouldn't care about why.

95
00:06:33.800 --> 00:06:34.881
It's just, yeah.

96
00:06:34.881 --> 00:06:37.661
The web app it's gone.

97
00:06:37.661 --> 00:06:39.350
So let's save the data.

98
00:06:39.350 --> 00:06:42.242
Or let's stop the timers.

99
00:06:42.242 --> 00:06:45.946
Let's stop the socket, okay?

100
00:06:45.946 --> 00:06:49.484
But yeah, there are some situations
where you might want to keep that.

101
00:06:49.484 --> 00:06:51.850
So it's tricky.

102
00:06:51.850 --> 00:06:53.378
So it's not so simple, okay?

103
00:06:53.378 --> 00:06:56.898
Mostly if you want a multi
platform solution, yeah.

104
00:06:56.898 --> 00:06:58.558
&gt;&gt; One more clarification.

105
00:06:58.558 --> 00:06:59.659
&gt;&gt; Yep.

106
00:06:59.659 --> 00:07:03.155
&gt;&gt; Is it fair to say that for
the frozen state or

107
00:07:03.155 --> 00:07:06.858
the suspended state, execution is paused.

108
00:07:06.858 --> 00:07:12.288
And the RAM allocated to your web
application is maybe it's in RAM or

109
00:07:12.288 --> 00:07:15.920
maybe it's swapped out and
can be restored.

110
00:07:15.920 --> 00:07:20.249
Its whole state is restored and
discarded just means it's destroyed.

111
00:07:20.249 --> 00:07:24.566
And your state is lost and
all your RAM is deallocated.

112
00:07:24.566 --> 00:07:25.249
&gt;&gt; Yeah, that's correct.

113
00:07:25.249 --> 00:07:28.018
So actually,
when you are in the background,

114
00:07:28.018 --> 00:07:32.496
what will happen is that on mobile,
we are talking about mobile right now.

115
00:07:32.496 --> 00:07:36.504
If it's paused, okay, you know it's
still in the RAM so it is in memory.

116
00:07:36.504 --> 00:07:40.097
So your context is still there, but
you will know for how much time.

117
00:07:40.097 --> 00:07:42.822
And you don't know if it's coming back or
not.

118
00:07:42.822 --> 00:07:48.329
So that's why in the moment that we
are going to the background if that's

119
00:07:48.329 --> 00:07:53.402
the best place to say okay just in
case we are going to save the data.

120
00:07:53.402 --> 00:07:58.275
So on Chromium based browsers,
you can keep visibility change and

121
00:07:58.275 --> 00:08:00.197
do this on the free event.

122
00:08:00.197 --> 00:08:04.473
Well, you know for sure that
you're going to the background and

123
00:08:04.473 --> 00:08:07.255
you're going to be hibernating, okay?

124
00:08:07.255 --> 00:08:10.628
But on visibility change
the parameter that on Firefox,

125
00:08:10.628 --> 00:08:15.065
it's also being executed when you
are putting another window on top of it.

126
00:08:15.065 --> 00:08:17.348
So yeah, maybe you're saving data and

127
00:08:17.348 --> 00:08:20.610
in that situation wasn't
actually necessary, okay?

128
00:08:20.610 --> 00:08:23.493
But if you want a multiplatform solution,

129
00:08:23.493 --> 00:08:27.346
you want only one code visibility
change if your friend.

130
00:08:27.346 --> 00:08:33.028
Yeah, then you can try to think your
own algorithm to try to understand

131
00:08:33.028 --> 00:08:39.408
what's going on, but at some point I
think it's not worth the effort, okay?

132
00:08:39.408 --> 00:08:42.447
So this is again,
we are in our web app, and

133
00:08:42.447 --> 00:08:46.850
the user is getting out of the web
app in any of the situations.

134
00:08:46.850 --> 00:08:49.738
Whenever when we are going back, okay?

135
00:08:49.738 --> 00:08:54.951
So when we're going back from
the other web app to our web app,

136
00:08:54.951 --> 00:08:59.672
or to other the other app that
you can be the home screen.

137
00:08:59.672 --> 00:09:01.940
It can be Microsoft Word, wherever, okay?

138
00:09:01.940 --> 00:09:04.161
And we're going back to our app.

139
00:09:04.161 --> 00:09:08.424
On desktop it's actually pretty simple,
so it just makes visible the app, and

140
00:09:08.424 --> 00:09:11.489
on most situations just
visibility change will be fire.

141
00:09:11.489 --> 00:09:13.673
And also focus after that.

142
00:09:13.673 --> 00:09:19.289
On mobile, and also on some rare
desktop situation, such as some.

143
00:09:19.289 --> 00:09:22.935
Such as brave that can
also discard tabs or

144
00:09:22.935 --> 00:09:27.422
some rare situation let's say for
now on desktop.

145
00:09:27.422 --> 00:09:30.941
But a mobile is always
the normal situation.

146
00:09:30.941 --> 00:09:35.022
We are actually like
resuming a suspended state.

147
00:09:35.022 --> 00:09:38.628
So we are going from the state
to be running again.

148
00:09:38.628 --> 00:09:45.406
Visibility change will be fire and
on Chromium resume will be fire, okay?

149
00:09:45.406 --> 00:09:48.591
What happens if the app was discarded?

150
00:09:48.591 --> 00:09:52.608
In that case,
a new load event will be fired.

151
00:09:52.608 --> 00:09:54.182
Again, remember,

152
00:09:54.182 --> 00:09:59.094
the user sees a screenshot that
it feels like the app was there.

153
00:09:59.094 --> 00:10:02.575
The web was there, but
it's actually not there anymore.

154
00:10:02.575 --> 00:10:06.932
So, probably you have
already felt that as a user.

155
00:10:06.932 --> 00:10:10.524
That sometimes you go back to an app and
the app is still there.

156
00:10:10.524 --> 00:10:14.050
Sometimes you go back to an app and
the app restarts.

157
00:10:14.050 --> 00:10:19.932
Well, that's when That app was
discarded by the OS, okay?

158
00:10:19.932 --> 00:10:24.888
And we have a boolean property in
the document on Chromium-based

159
00:10:24.888 --> 00:10:29.494
browsers to know after the load or
why the load is happening.

160
00:10:29.494 --> 00:10:34.531
If this is a new load,
this is a new page navigation,

161
00:10:34.531 --> 00:10:39.352
or this is actually the user
coming back to an app.

162
00:10:39.352 --> 00:10:43.207
So the user is expecting the app
to be on the previous state, yep

163
00:10:43.207 --> 00:10:45.609
&gt;&gt; When does the Boolean go to false so,

164
00:10:45.609 --> 00:10:50.490
if document was discarded equals true
does it ever go back to false on its own

165
00:10:50.490 --> 00:10:51.740
in the native API.

166
00:10:51.740 --> 00:10:53.875
&gt;&gt; On the same load process or?

167
00:10:53.875 --> 00:10:56.919
&gt;&gt; So when the load process is done,
does it go to false or like?

168
00:10:56.919 --> 00:10:59.250
&gt;&gt; No, because that patient navigation.

169
00:10:59.250 --> 00:11:02.031
It's actually until you make a new
patient navigation, it's going.

170
00:11:02.031 --> 00:11:03.222
It's going to become true.

171
00:11:03.222 --> 00:11:07.496
So, yeah, that Boolean property
won't change in the same context.

172
00:11:07.496 --> 00:11:12.731
So it starts with true or with false and
it will stay there, okay?

173
00:11:12.731 --> 00:11:15.014
Now we will actually write that code.

174
00:11:15.014 --> 00:11:17.988
So, because there are so
many possibilities for

175
00:11:17.988 --> 00:11:22.062
background and there are many APIs and
ways like focus and resume.

176
00:11:22.062 --> 00:11:26.548
If you want to detect multi-platform code,
page visibility is your friend.

177
00:11:26.548 --> 00:11:29.341
Page visibility is
the visibility change event.

