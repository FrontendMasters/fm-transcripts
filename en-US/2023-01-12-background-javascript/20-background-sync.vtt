WEBVTT

1
00:00:00.000 --> 00:00:04.227
It's then time just
started talking about the,

2
00:00:04.227 --> 00:00:10.942
let's say the dessert of the background
execution, the sweetness of this.

3
00:00:10.942 --> 00:00:15.684
That is, how can we wait cap?

4
00:00:15.684 --> 00:00:22.335
Charles could code client side while
the app is in the background, okay?

5
00:00:22.335 --> 00:00:26.093
Or continue the execution of some code,

6
00:00:26.093 --> 00:00:31.395
even if the user is leaving the web app,
closing the PWA,

7
00:00:31.395 --> 00:00:36.275
is closing the browser,
is closing the tab, okay?

8
00:00:36.275 --> 00:00:39.338
And for that,
we're going to go over background sync,

9
00:00:39.338 --> 00:00:42.479
periodic background sync and
background fetch, okay?

10
00:00:42.479 --> 00:00:48.043
Those are the three API's that
are close together different API's but

11
00:00:48.043 --> 00:00:50.184
they were pretty similar.

12
00:00:50.184 --> 00:00:54.550
So, remember that execution
happens in the background,

13
00:00:54.550 --> 00:00:58.392
maybe there is no PWA or
web page currently loaded.

14
00:00:58.392 --> 00:01:02.934
So if we wanna message the user,
we have to use web notifications.

15
00:01:02.934 --> 00:01:05.988
What if the user didn't
grant you permission?

16
00:01:05.988 --> 00:01:09.368
Send the user an email,
a WhatsApp message.

17
00:01:09.368 --> 00:01:12.974
I don't know, an SMS but
you won't have any other option.

18
00:01:12.974 --> 00:01:18.419
Because you're in a Service Worker,
there is no client, no UI,

19
00:01:18.419 --> 00:01:23.481
there is nothing you can do
about notifying the user, okay?

20
00:01:23.481 --> 00:01:26.491
Web notifications is your only chance.

21
00:01:26.491 --> 00:01:29.987
And by the way,
you cannot request permission in

22
00:01:29.987 --> 00:01:34.943
the Service Workers of scope,
because of course you don't have UI.

23
00:01:34.943 --> 00:01:40.613
So you have to request permission
while the user is using the app,

24
00:01:40.613 --> 00:01:45.164
not when you wanna notify for
the first time, okay?

25
00:01:45.164 --> 00:01:52.594
So background sync, officially known as
the web synchronization background API.

26
00:01:52.594 --> 00:01:57.348
The idea is to defer
a synchronization operation until

27
00:01:57.348 --> 00:02:01.698
the device has a stable
connection to the server.

28
00:02:01.698 --> 00:02:07.969
Maybe that until is now, so
maybe I mark a sync operation and

29
00:02:07.969 --> 00:02:11.865
now we have an unstable connection.

30
00:02:11.865 --> 00:02:15.220
So it will be fire now, okay?

31
00:02:15.220 --> 00:02:17.338
Immediately, so that's okay.

32
00:02:17.338 --> 00:02:22.369
So the idea is that a client,
a website, a web app,

33
00:02:22.369 --> 00:02:27.875
a PWA needs to sync data to the server or
from the server.

34
00:02:27.875 --> 00:02:31.297
So I need to send data,
receive data or both.

35
00:02:31.297 --> 00:02:37.580
Instead of doing that, we understand
our fetch handler within my window,

36
00:02:37.580 --> 00:02:42.664
within my my app,
I'm going to just specify to the browser,

37
00:02:42.664 --> 00:02:48.169
we're going to say to the browser
that I need to sync data, okay?

38
00:02:48.169 --> 00:02:49.547
That's how it works.

39
00:02:49.547 --> 00:02:55.218
Then, a sync event will be
fired in the Service Worker.

40
00:02:55.218 --> 00:03:00.856
So, we can handle that pending sync in
the Service Worker that we know that has

41
00:03:00.856 --> 00:03:06.859
a separate life cycle and can continue
executing, [INAUDIBLE] in the background.

42
00:03:06.859 --> 00:03:12.259
If the network is stable right now and
the browser is making that decision,

43
00:03:12.259 --> 00:03:15.701
it will execute that immediately,
right now.

44
00:03:15.701 --> 00:03:19.889
In a separate thread, but now, but

45
00:03:19.889 --> 00:03:24.363
if not, because then we are offline.

46
00:03:24.363 --> 00:03:28.888
We are on a Wi-Fi on a plane and
it's not working properly or

47
00:03:28.888 --> 00:03:33.246
the server is down, wherever,
it will come back later.

48
00:03:33.246 --> 00:03:34.431
When?

49
00:03:34.431 --> 00:03:37.428
We don't know, okay?

50
00:03:37.428 --> 00:03:41.622
Because also,
the battery should be in good level.

51
00:03:41.622 --> 00:03:44.632
It's up to the browser
to make that decision.

52
00:03:44.632 --> 00:03:49.018
So, that means that I'm
trying to sync some data,

53
00:03:49.018 --> 00:03:53.416
the browser thinks that
this is not the right time.

54
00:03:53.416 --> 00:03:59.522
Okay, the user will close the app,
will close the browser,

55
00:03:59.522 --> 00:04:05.169
maybe the user has the phone
in her pocket, his pocket.

56
00:04:05.169 --> 00:04:10.036
And after 20 minutes the browser says,
it seems like the internet is where

57
00:04:10.036 --> 00:04:13.627
it's working fine now let's
try pending sync operation.

58
00:04:13.627 --> 00:04:16.975
It will wake up only
your Service Worker and

59
00:04:16.975 --> 00:04:21.356
it will fire your sync event,
your sync event handler.

60
00:04:21.356 --> 00:04:24.257
And you will make that operation.

61
00:04:24.257 --> 00:04:29.304
So then we access the network at that
point, and we can fulfill the sync.

62
00:04:29.304 --> 00:04:34.169
In that case, it will be removed
from pending sync operations.

63
00:04:34.169 --> 00:04:37.126
Or we can leave it pending.

64
00:04:37.126 --> 00:04:38.453
Like, you know what?

65
00:04:38.453 --> 00:04:39.500
I couldn't do that.

66
00:04:39.500 --> 00:04:42.850
So it's so working,
the server is down, wherever.

67
00:04:42.850 --> 00:04:46.689
So you leave that as
a depending sync operation, and

68
00:04:46.689 --> 00:04:49.051
it will try again later, okay?

69
00:04:49.051 --> 00:04:50.404
That's how it works.

70
00:04:50.404 --> 00:04:55.032
Right now 5% of mobile web apps with

71
00:04:55.032 --> 00:04:59.521
a Service Worker are using the API.

72
00:04:59.521 --> 00:05:04.310
So, for the web apps that
had the habit Service Worker

73
00:05:04.310 --> 00:05:09.206
register 5% of them are using the API,
which is not so

74
00:05:09.206 --> 00:05:13.473
bad compared with a couple of years ago,
okay?

75
00:05:13.473 --> 00:05:15.695
The API is actually pretty simple.

76
00:05:15.695 --> 00:05:22.099
[COUGH] So your only thing you need is
to get the Service Worker registration.

77
00:05:22.099 --> 00:05:26.977
One simple way to do that it
is through the ready promise.

78
00:05:26.977 --> 00:05:33.416
This is like a property, a getter in
JavaScript that returns a promise.

79
00:05:33.416 --> 00:05:38.710
So, I'm going to await for
that and then you go and

80
00:05:38.710 --> 00:05:44.523
sync, you use the sync manager and
you register a tag.

81
00:05:44.523 --> 00:05:46.044
What's a tag name?

82
00:05:46.044 --> 00:05:51.072
A string Identifier for
that sync operation.

83
00:05:51.072 --> 00:05:52.453
What about the data?

84
00:05:52.453 --> 00:05:56.712
So maybe I wanna sync data,
an objects that they wanna send.

85
00:05:56.712 --> 00:05:59.902
It's not up to the API.

86
00:05:59.902 --> 00:06:03.508
So typically, what you're going to do is,

87
00:06:03.508 --> 00:06:07.411
you're going to use index
dv to store the data.

88
00:06:07.411 --> 00:06:12.686
And then the tag name,
it may contain or not the ID or

89
00:06:12.686 --> 00:06:17.123
the name of the data storage or something.

90
00:06:17.123 --> 00:06:21.724
So then server side you know
where to find that information.

91
00:06:21.724 --> 00:06:25.504
The Service Worker can
access IndexedDB databases,

92
00:06:25.504 --> 00:06:30.467
not local storage, the Service Worker
cannot access local storage.

93
00:06:30.467 --> 00:06:35.229
So you must use IndexedDB In
case you need to store

94
00:06:35.229 --> 00:06:38.959
data while it's been synced, okay?

95
00:06:38.959 --> 00:06:44.833
So that's step one,
step two is in the Service Worker.

96
00:06:44.833 --> 00:06:51.844
You listen for the sync event, and
then you check for the event.tag.

97
00:06:51.844 --> 00:06:56.973
If it's the one that you were looking for,
you try to do the sync operation.

98
00:06:56.973 --> 00:07:04.287
That can be a fetch to a server,
and that's all.

99
00:07:04.287 --> 00:07:08.808
Which is good and bad,
because it's very simple API, okay?

100
00:07:08.808 --> 00:07:13.185
So, let's try to do this in our code.

101
00:07:13.185 --> 00:07:17.732
So, in the background js file,
I have already

102
00:07:17.732 --> 00:07:22.639
a button that is trying to
get the sync operation.

103
00:07:22.639 --> 00:07:25.929
That event handler is already async.

104
00:07:25.929 --> 00:07:29.139
So we are ready to use async await here.

105
00:07:29.139 --> 00:07:33.189
So from here,
what I need first is the registration,

106
00:07:33.189 --> 00:07:35.890
the Service Worker registration.

107
00:07:35.890 --> 00:07:44.824
And for that we use
navigator.serviceWorker.ready and

108
00:07:44.824 --> 00:07:49.569
we need to await for it, okay?

109
00:07:49.569 --> 00:07:52.757
When we have the registration,

110
00:07:52.757 --> 00:07:58.670
we have to talk to the sync manager
as we saw here in this one.

111
00:07:58.670 --> 00:08:03.177
And then we register a tag name.

112
00:08:03.177 --> 00:08:03.739
What's the tag name?

113
00:08:03.739 --> 00:08:05.764
A String.

114
00:08:05.764 --> 00:08:09.085
I don't know, I wanna sync like, whatever.

115
00:08:09.085 --> 00:08:12.851
Actually, typically we don't
use the sync prefix or

116
00:08:12.851 --> 00:08:15.871
suffix because we are already in the sync.

117
00:08:15.871 --> 00:08:21.468
And that's all The only
thing that the PWA or

118
00:08:21.468 --> 00:08:25.813
the web app is doing,
is registering a pending operation.

119
00:08:25.813 --> 00:08:29.550
It's saying, hey, I need to sync this.

120
00:08:29.550 --> 00:08:34.499
That's all.
From the Service Worker, what we need

121
00:08:34.499 --> 00:08:39.547
is a new event listener for
the sync event.

122
00:08:43.156 --> 00:08:49.338
And typically what we do
here is we check the tag.

123
00:08:49.338 --> 00:08:55.167
So if it's the tag that we were
looking for like the like,

124
00:08:55.167 --> 00:08:59.544
then we're going to do something, okay?

125
00:08:59.544 --> 00:09:01.158
Make sense?

126
00:09:01.158 --> 00:09:02.233
I have a typo

127
00:09:12.023 --> 00:09:13.610
Let's say this a sync.

128
00:09:19.583 --> 00:09:27.429
Let's make a default here cuz I
will show you how to debug this,

129
00:09:27.429 --> 00:09:32.624
Unknown sync operation for event.tag.

130
00:09:32.624 --> 00:09:35.295
So it's actually pretty simple API.

131
00:09:39.597 --> 00:09:44.447
So remember that in the Service Worker
here we can access fetch, the fetch API.

132
00:09:44.447 --> 00:09:49.662
So we can make her like what
I did here I can do a fetch,

133
00:09:49.662 --> 00:09:57.267
for example, to the log, the same log
that we use in the beacon on my server.

134
00:09:57.267 --> 00:10:04.623
And I can send some properties,
I can send the body, wherever you need.

135
00:10:04.623 --> 00:10:09.199
And you can access IndexedDB or
cache storage API's from here

136
00:10:13.261 --> 00:10:15.225
Make sense?

137
00:10:15.225 --> 00:10:21.581
So if the connection is stable after
you register the sync operation,

138
00:10:21.581 --> 00:10:28.907
it will immediately, maybe a couple of
milliseconds later, in its own thread,

139
00:10:28.907 --> 00:10:34.749
it will execute the sync event
handler with the time that we set.

140
00:10:34.749 --> 00:10:38.225
If the connection is not good enough
at that moment, it will do it later.

141
00:10:38.225 --> 00:10:42.911
By the way how can a website
like the main client know If,

142
00:10:42.911 --> 00:10:50.108
depending on whether the pending operation
finishes or not, if it's still active.

143
00:10:50.108 --> 00:10:58.285
So now, I'm not like doing the fetch from
the main thread, from the main window.

144
00:10:58.285 --> 00:11:03.203
I'm setting the flag as a pending
operation, then the Service Worker in

145
00:11:03.203 --> 00:11:07.810
a different thread goes to the network and
confirms the operation.

146
00:11:07.810 --> 00:11:14.611
How can we know here that it's finally
done if the user didn't close the browser?

147
00:11:14.611 --> 00:11:17.872
So I'm still able to notify the user.

148
00:11:17.872 --> 00:11:23.213
Well, we can communicate workers and
service workers with its clients,

149
00:11:23.213 --> 00:11:28.036
so we can send a message from
the Service Worker to the page saying,

150
00:11:28.036 --> 00:11:33.230
hey, this is done, if you want to
inform the user, does it make sense?

151
00:11:33.230 --> 00:11:36.703
When you see this in action,

152
00:11:36.703 --> 00:11:42.216
if I register a sync,
I don't see anything.

153
00:11:42.216 --> 00:11:46.619
Because the only thing that we
are doing is registering a sync.

154
00:11:46.619 --> 00:11:51.503
And the only way that we have to
see this in action is going for

155
00:11:51.503 --> 00:11:57.965
example here to background sync,
remember I'm inside the application tab.

156
00:11:57.965 --> 00:12:02.221
So in the application tab
in background services.

157
00:12:02.221 --> 00:12:07.993
And then I could start
recording what's going on here.

158
00:12:07.993 --> 00:12:11.414
And this is the background sync activity,
okay?

159
00:12:11.414 --> 00:12:16.975
And it will record all activity for
up to three days even when closed.

160
00:12:16.975 --> 00:12:19.472
So you can come back tomorrow and

161
00:12:19.472 --> 00:12:23.830
see everything that happened
with this origin, okay?

162
00:12:23.830 --> 00:12:27.901
With this website for background sync.

163
00:12:27.901 --> 00:12:31.884
For example,
if it tried to sync the data and

164
00:12:31.884 --> 00:12:36.512
it didn't work for a day and
maybe tried ten times,

165
00:12:36.512 --> 00:12:41.156
you will see timestamps and
every attempt, okay?

166
00:12:41.156 --> 00:12:42.186
Make sense?

167
00:12:42.186 --> 00:12:47.009
You can see that
the Service Worker actually sent

168
00:12:47.009 --> 00:12:51.723
a message to the console
saying that it worked.

