WEBVTT

1
00:00:00.000 --> 00:00:04.107
[MUSIC]

2
00:00:04.107 --> 00:00:08.066
&gt;&gt; Kyle Simpson: The first step,
I know I'm in the local path here.

3
00:00:13.546 --> 00:00:16.943
&gt;&gt; Kyle Simpson: Let's see, about.js.

4
00:00:19.442 --> 00:00:21.700
&gt;&gt; Kyle Simpson: So
let's set ourselves up a breakpoint here.

5
00:00:23.390 --> 00:00:26.540
Make sure that, actually that's
not gonna be terribly helpful.

6
00:00:26.540 --> 00:00:30.787
Let's set ourselves up a breakpoint
inside of the validator.

7
00:00:39.941 --> 00:00:41.610
&gt;&gt; Kyle Simpson: Normally I
do that inside of my thing.

8
00:00:41.610 --> 00:00:45.168
I'm not really sure,
I think it might be my cache busting or

9
00:00:45.168 --> 00:00:50.167
something, I'm not really sure why Chrome
is freaking out on my local debugging.

10
00:00:50.167 --> 00:00:56.744
Okay,
&gt;&gt; Kyle Simpson: Let's check and

11
00:00:56.744 --> 00:00:57.730
see what we're getting in.

12
00:00:57.730 --> 00:01:01.410
We got in a zero and a zero,
which is what we're expecting.

13
00:01:01.410 --> 00:01:02.980
Let's look at those rules.

14
00:01:02.980 --> 00:01:07.935
Max less than min, which it's not.

15
00:01:07.935 --> 00:01:09.860
Min less than zero.

16
00:01:09.860 --> 00:01:10.890
So I intuited wrong.

17
00:01:11.940 --> 00:01:13.330
Actually that should pass, right?

18
00:01:14.440 --> 00:01:20.940
So we probably should add ourselves
an extra validation rule.

19
00:01:20.940 --> 00:01:23.650
So my bug isn't necessarily in.

20
00:01:23.650 --> 00:01:28.889
That is just that I'm
missing a validation rule,

21
00:01:28.889 --> 00:01:34.764
we should probably say if (max &lt;= min),
all right?

22
00:01:34.764 --> 00:01:37.609
Cuz that's a case that we probably don't
want, a min and a max equal to each other,

23
00:01:37.609 --> 00:01:39.330
that's not gonna be very helpful.

24
00:01:39.330 --> 00:01:40.320
So let's just try that.

25
00:01:40.320 --> 00:01:41.370
Let me reload here.

26
00:01:43.520 --> 00:01:46.170
Since I changed a file that is
gonna be used on the server,

27
00:01:46.170 --> 00:01:47.892
I'm gonna wanna restart my server.

28
00:01:59.646 --> 00:02:01.080
&gt;&gt; Kyle Simpson: Yep,
there we got our validation rule.

29
00:02:02.100 --> 00:02:06.360
Now we didn't actually handle,
I need to handle that.

30
00:02:06.360 --> 00:02:07.850
This is a detail I forgot.

31
00:02:07.850 --> 00:02:09.300
We didn't actually handle

32
00:02:10.370 --> 00:02:15.780
what happens if the Ajax response
gives us an error back, right?

33
00:02:15.780 --> 00:02:19.110
Cuz that's one of those cases where
validation could fail at the API level

34
00:02:19.110 --> 00:02:19.990
and not here.

35
00:02:19.990 --> 00:02:22.950
We know that won't actually happen,
but this is a case that we should

36
00:02:22.950 --> 00:02:26.090
handle just in case something
was broken in the browser.

37
00:02:26.090 --> 00:02:29.630
Maybe you had an old version of the
validate function or something like that.

38
00:02:29.630 --> 00:02:33.350
So we wanna handle the .fail case.

39
00:02:33.350 --> 00:02:36.590
Actually, not the .fail case, that's
still going to be a success, but we wanna

40
00:02:36.590 --> 00:02:40.240
look at the response to figure out whether
it had an answer or an error in it.

41
00:02:41.380 --> 00:02:46.910
So if it had resp.answer,
then we'll render the answer.

42
00:02:48.860 --> 00:02:54.040
And if it had resp.error,

43
00:02:57.746 --> 00:02:59.261
&gt;&gt; Kyle Simpson: We'll render the error.

44
00:03:04.359 --> 00:03:07.274
&gt;&gt; Kyle Simpson: We can't really test that
that stuff's gonna work without trying to

45
00:03:07.274 --> 00:03:10.155
break our app,but let's just a piece
that I don't want to forget.

46
00:03:10.155 --> 00:03:11.946
Okay, so,

47
00:03:17.840 --> 00:03:21.998
&gt;&gt; Kyle Simpson: Let's try 3 and 10.

48
00:03:26.921 --> 00:03:30.089
&gt;&gt; Kyle Simpson: I got back a random
number, but it's not constrained properly

49
00:03:30.089 --> 00:03:34.220
which lets me know that I wrote something
wrong about my constraints logic.

50
00:03:34.220 --> 00:03:36.587
So let's go to my Foo module.

51
00:03:41.376 --> 00:03:46.250
&gt;&gt; Kyle Simpson: So, that would have
been this number mod seven, plus,

52
00:03:46.250 --> 00:03:49.370
or mod eight which is zero to seven.

53
00:03:49.370 --> 00:03:54.780
Plus the min of three, which should have
constrained this between three and ten.

54
00:03:54.780 --> 00:03:55.950
Why is that not working?

55
00:04:15.379 --> 00:04:19.266
&gt;&gt; Kyle Simpson: Let me verify that we're
not getting something weird coming in.

56
00:04:40.135 --> 00:04:43.285
&gt;&gt; Kyle Simpson: We're being way
too trusting about the inputs.

57
00:04:43.285 --> 00:04:45.865
We're converting them to numbers for
the validate purpose but

58
00:04:45.865 --> 00:04:48.190
we're not converting
them in the Foo module.

59
00:04:48.190 --> 00:04:49.950
So we should be doing that.

60
00:04:49.950 --> 00:04:58.489
We should say,
min = Number(min); max = Number(max);.

61
00:05:09.551 --> 00:05:10.631
&gt;&gt; Kyle Simpson: Let's check that.

62
00:05:19.486 --> 00:05:20.944
&gt;&gt; Kyle Simpson: All right,
that looks better.

63
00:05:23.861 --> 00:05:25.913
&gt;&gt; Kyle Simpson: So
let's take out my debugger so

64
00:05:25.913 --> 00:05:28.499
I'm not gonna be annoyed over and over.

65
00:05:39.148 --> 00:05:40.970
&gt;&gt; Kyle Simpson: Well,
it appears to be working there.

66
00:05:40.970 --> 00:05:49.047
Let's try something slightly bigger like,
&gt;&gt; Kyle Simpson: 10 and 50.

67
00:05:49.047 --> 00:05:52.490
What happens if I make the max too big?

68
00:05:52.490 --> 00:05:54.350
My validation rule fails.

69
00:05:54.350 --> 00:05:58.080
Now let's switch this to local.

70
00:05:58.080 --> 00:06:01.450
Let's give it something,
let's just verify that, to remote.

71
00:06:01.450 --> 00:06:05.850
Let's verify that we're gonna in fact
still get stuff working if we send it off

72
00:06:05.850 --> 00:06:06.650
to our API.

73
00:06:07.790 --> 00:06:12.083
Lemme restart my server cuz
I think I might of made

74
00:06:12.083 --> 00:06:15.338
changes that the server needs to have

75
00:06:25.140 --> 00:06:25.822
&gt;&gt; Kyle Simpson: All right,

76
00:06:25.822 --> 00:06:30.260
let's go between 10 and 40, and
let's see what the server has to say.

77
00:06:30.260 --> 00:06:35.800
So it gives us a 39, 38, what happens
if we give something bad to the server?

78
00:06:37.900 --> 00:06:39.110
There we got our error message back.

79
00:06:40.430 --> 00:06:43.184
Actually that error message
didn't come back from the API,

80
00:06:43.184 --> 00:06:44.649
that was our local validation.

81
00:06:44.649 --> 00:06:49.491
We can very easily break our
data validation to verify

82
00:06:49.491 --> 00:06:53.049
that the server is still backing us up.

83
00:06:54.160 --> 00:06:58.657
Which will be the last step and
then we'll wrap for the day.

84
00:06:58.657 --> 00:07:04.711
In our about.js,
all we need to do to verify is

85
00:07:04.711 --> 00:07:10.630
just skip the local
validate step entirely.

86
00:07:11.780 --> 00:07:14.548
So we're not going to do
any local validation and

87
00:07:14.548 --> 00:07:17.382
we're gonna now try it in
a non-local case and and

88
00:07:17.382 --> 00:07:21.043
verify that the server validation
is still working correctly.

89
00:07:24.864 --> 00:07:30.097
&gt;&gt; Kyle Simpson: So 10 and
40 still works but 10 and

90
00:07:30.097 --> 00:07:36.132
400, we got back the failed from our API.

91
00:07:41.961 --> 00:07:46.290
&gt;&gt; Kyle Simpson: All right, so let me
just recap and then we'll finish up.

92
00:07:46.290 --> 00:07:47.978
I'll make sure there's.

93
00:07:47.978 --> 00:07:50.250
Is there any validation
preventing zero and zero?

94
00:07:50.250 --> 00:07:55.500
Yeah, the validation of but they can't
be less than or equal to each other.

95
00:07:55.500 --> 00:07:56.230
That's the test.

