WEBVTT

1
00:00:03.960 --> 00:00:05.900
&gt;&gt; Kyle: We're not gonna
start this complex,

2
00:00:05.900 --> 00:00:10.560
we're gonna start with
something a bit less complex.

3
00:00:10.560 --> 00:00:13.140
What I'm gonna do is stop that server.

4
00:00:15.230 --> 00:00:20.320
I'm using a tool called forever to run
my node processes in the back end.

5
00:00:20.320 --> 00:00:24.100
And I'm gonna recommend if you
don't already have that installed,

6
00:00:24.100 --> 00:00:30.040
if you have your node environment up and
going, if you do NPM install minus G,

7
00:00:30.040 --> 00:00:33.870
so that you can install it globally and
then do forever.

8
00:00:33.870 --> 00:00:38.250
That's a nice simple tool that will start
up a node process and then monitor it and

9
00:00:38.250 --> 00:00:40.040
if it crashes it restarts it.

10
00:00:40.040 --> 00:00:42.056
And crashes are pretty common.

11
00:00:42.056 --> 00:00:43.690
And servers at JavaScript programming so

12
00:00:43.690 --> 00:00:46.360
it's kind of useful to
run stuff with forever.

13
00:00:46.360 --> 00:00:50.380
NPM install minus G forever and then you
should have a tool on your command line

14
00:00:50.380 --> 00:00:52.320
that you can run forever like I was doing.

15
00:00:52.320 --> 00:00:56.800
Anyway what I'm going to do is switch
to the base version of this code.

16
00:00:56.800 --> 00:00:58.808
Node.

17
00:00:58.808 --> 00:01:00.433
I'm sorry .server.

18
00:01:00.433 --> 00:01:03.299
If you're running on
a Windows machine by the way,

19
00:01:03.299 --> 00:01:08.233
you're not gonna be able to use the bash
script that I've provided, that server.sh,

20
00:01:08.233 --> 00:01:12.850
but if you look at server.sh, it's not
really doing something entirely crazy.

21
00:01:12.850 --> 00:01:15.730
It's basically killing the previous one so
you can do that yourself,

22
00:01:15.730 --> 00:01:17.884
you can say forever stop and
kill the previous one.

23
00:01:17.884 --> 00:01:20.530
And then [COUGH] it's
starting it up again,

24
00:01:20.530 --> 00:01:22.560
you can run that command
the forever start.

25
00:01:22.560 --> 00:01:26.880
You don't need these other things like
the up times and spin sleep times or

26
00:01:26.880 --> 00:01:31.980
just forever, and then start and
then give it a code in it or it'll run and

27
00:01:31.980 --> 00:01:36.410
manage it for you or you can just run
the command line like run it through node,

28
00:01:36.410 --> 00:01:37.440
we'll get to that in just a minute.

29
00:01:37.440 --> 00:01:40.250
For me I'm just gonna run
served.sh to start up.

30
00:01:41.310 --> 00:01:42.700
The base version of this code.

31
00:01:44.690 --> 00:01:48.172
And I'll go back to port 8050.

32
00:01:48.172 --> 00:01:51.806
So you see a really baseline version where
I don't have any of this stuff going on

33
00:01:51.806 --> 00:01:55.005
about interactions or stuff, but
this is kind of our starting point,

34
00:01:55.005 --> 00:01:57.987
what I'm gonna do is spend a little
bit of time talking to you about

35
00:01:57.987 --> 00:02:00.266
how this code currently
works this base version,

36
00:02:00.266 --> 00:02:04.230
I'm in a walk you through different files
and point out some things that I did.

37
00:02:04.230 --> 00:02:09.150
And then time permitting, we'll try to
put in a few little extra things to make

38
00:02:09.150 --> 00:02:13.410
it look more and more like what I was
doing with the secure phrase site, and you

39
00:02:13.410 --> 00:02:17.420
have both of those code bases from here
on that you can kind of go and refer to.

40
00:02:17.420 --> 00:02:20.710
The first thing that you're gonna notice
right away, if you've already looked at

41
00:02:20.710 --> 00:02:22.750
any of the source code, or
once you look at the source code,

42
00:02:22.750 --> 00:02:27.290
you're going to note that I'm not really
using, I'm not a framework person.

43
00:02:27.290 --> 00:02:30.000
And I'm not using any kind of
special framework or whatever,

44
00:02:30.000 --> 00:02:32.570
this is bare bones JavaScript stuff.

45
00:02:32.570 --> 00:02:36.800
There's a few little libraries that I pull
in to help with stuff, forever is a nice

46
00:02:36.800 --> 00:02:40.360
little helpful tool, but this isn't
like I'm writing some agular app and

47
00:02:40.360 --> 00:02:42.540
I've bought into some big ecosystem.

48
00:02:42.540 --> 00:02:46.540
These are principles that I think are at
a lower level of the stack than what

49
00:02:46.540 --> 00:02:47.380
framework you choose.

50
00:02:48.410 --> 00:02:52.130
And what bugs me frankly a little bit
about framework choices that people make

51
00:02:52.130 --> 00:02:56.253
is that it restricts you from making
some of these decisions yourself.

52
00:02:56.253 --> 00:02:58.710
Kind of forces you down a particular path,

53
00:02:58.710 --> 00:03:03.270
I don't like to be forced down those
paths, I like to have total freedom.

54
00:03:03.270 --> 00:03:07.320
This is sort of our frameworkless
way to do shared code.

55
00:03:07.320 --> 00:03:11.910
There's a term that's often used or thrown
around it's called isomorphic JavaScript.

56
00:03:13.380 --> 00:03:15.390
Let me just address that term for
a moment.

57
00:03:15.390 --> 00:03:16.800
It's completely BS term.

58
00:03:18.200 --> 00:03:22.260
Because if you know the mathematical
principle of isomorphism,

59
00:03:22.260 --> 00:03:26.990
if you know what isomorphic is
supposed to imply, this idea that

60
00:03:28.710 --> 00:03:33.274
it's a value that is in a different form,
but that can go in either direction.

61
00:03:33.274 --> 00:03:37.970
If I take a value in one form and
I convert it to another form and

62
00:03:37.970 --> 00:03:42.580
then I can come back and I get the exact
same value, that's called an isomorphism.

63
00:03:42.580 --> 00:03:45.970
And the principle of isomorphism means
that I need to actually something in

64
00:03:45.970 --> 00:03:47.160
a different form.

65
00:03:48.400 --> 00:03:50.150
But that's not actually
what we're doing here.

66
00:03:50.150 --> 00:03:54.180
We're not actually taking JavaScript and
making the JavaScript in a different form.

67
00:03:54.180 --> 00:03:58.360
We're making the exact same JavaScript and
sharing it.

68
00:03:58.360 --> 00:04:02.290
A better term for
this principle of reusing JavaScript is to

69
00:04:02.290 --> 00:04:06.750
call it reusable JavaScript, or
shared JavaScript, or hybrid JavaScript.

70
00:04:06.750 --> 00:04:11.800
But this isomorphic term makes you sound
smart, but it's not actually accurate.

71
00:04:11.800 --> 00:04:16.030
There is a way to do something that's
kind of like isomorphic JavaScript.

72
00:04:16.030 --> 00:04:18.340
But that's not what anybody's doing.

73
00:04:18.340 --> 00:04:23.660
That would be if you wrote your back
end in something like Java or whatever.

74
00:04:23.660 --> 00:04:27.340
And it automatically produced some
JavaScript to replicate itself in

75
00:04:27.340 --> 00:04:30.930
the browser and then there was a one to
one relationship where that JavaScript

76
00:04:30.930 --> 00:04:33.900
could produce the same Java from itself.

77
00:04:33.900 --> 00:04:36.570
That would be isomorphic JavaScript.

78
00:04:36.570 --> 00:04:38.257
But nobody's doing that,

79
00:04:38.257 --> 00:04:43.250
let's not use inproper terms just
because their buzz worrying.

80
00:04:43.250 --> 00:04:46.130
I'm going to call it shared JavaScript or
hybrid JavaScript from here on.

81
00:04:48.030 --> 00:04:51.872
And we'll take a look at.

82
00:04:58.107 --> 00:04:59.270
&gt;&gt; Kyle: Take a look at some of the code.

83
00:04:59.270 --> 00:05:03.488
I'm gonna start by share JS,

84
00:05:03.488 --> 00:05:10.970
I'm gonna start by opening
up the secret .JS file.

85
00:05:10.970 --> 00:05:14.530
Cuz this is where I set up
some configuration constants,

86
00:05:14.530 --> 00:05:19.150
I just want you to be aware of what
configuration constants I'm setting up.

87
00:05:19.150 --> 00:05:22.960
I'm setting up that the server address for
listening only on local hosts.

88
00:05:22.960 --> 00:05:26.650
Sometimes people,
sometimes your machine won't work if you

89
00:05:26.650 --> 00:05:29.550
actually say local host here
even though it ought to.

90
00:05:29.550 --> 00:05:33.680
I've seen weirdness with node in the past,
I always specify the 127 address, and

91
00:05:33.680 --> 00:05:36.970
then I picked port 8050, I don't know why.

92
00:05:36.970 --> 00:05:39.550
It's just one of my favorite numbers for

93
00:05:39.550 --> 00:05:43.080
demonstrating stuff,
port 8050 is the port I chose.

94
00:05:43.080 --> 00:05:45.640
Some of these other ones really
aren't even actually being used, but

95
00:05:45.640 --> 00:05:48.720
they're there in case you would use them
in the future, like some of the headers

96
00:05:48.720 --> 00:05:54.760
that you send out if you wanna make cross
origin XHR requests and things like that.

97
00:05:54.760 --> 00:05:58.390
This is if we're doing static file
caching, we can set up some links.

98
00:05:58.390 --> 00:06:02.350
Mostly we're basically just using
the server name, server address,

99
00:06:02.350 --> 00:06:02.984
and server port.

100
00:06:05.310 --> 00:06:09.370
Now, let's open up server.JS,
it's kind of the main meat,

101
00:06:09.370 --> 00:06:13.400
that's where our main
portion of our server works.

102
00:06:13.400 --> 00:06:17.420
And, right off the bat, you'll see
that I'm starting out in strict mode.

103
00:06:17.420 --> 00:06:18.640
That's a really important thing,

104
00:06:18.640 --> 00:06:21.239
it's easy to forget, I think you
ought to be running in strict mode.

105
00:06:22.320 --> 00:06:23.995
Put that at the top of all your files,

106
00:06:23.995 --> 00:06:28.500
just get into the habit of making sure
that your code is running in strict mode.

107
00:06:28.500 --> 00:06:29.982
I'm gonna uncomment this,

108
00:06:29.982 --> 00:06:34.316
I have it commented out because we don't
necessarily need it running all the time.

109
00:06:34.316 --> 00:06:38.392
This is actually it's kind
of a useful like debugging

110
00:06:38.392 --> 00:06:42.025
trick if you haven't
heard about this in node.

111
00:06:42.025 --> 00:06:45.801
In node, if an uncaught
exception chokes the server,

112
00:06:45.801 --> 00:06:51.050
it will actually kill the server and
throw it into this weird state.

113
00:06:51.050 --> 00:06:53.530
But there are times when you actually want

114
00:06:53.530 --> 00:06:56.734
some sort of interactive
debugging going on.

115
00:06:56.734 --> 00:06:59.910
There is a way to debug node processes,
we won't get into a lot of that.

116
00:06:59.910 --> 00:07:03.920
But there's times when you don't actually
want it to just kill the node process.

117
00:07:03.920 --> 00:07:06.530
And it's especially true
if you've got some bug, and

118
00:07:06.530 --> 00:07:09.320
you're running something like forever,
Which is gonna keep restarting it,

119
00:07:09.320 --> 00:07:11.060
and keep getting the same bug.

120
00:07:11.060 --> 00:07:15.070
Turning this on, turning this
uncaught exception handler on,

121
00:07:15.070 --> 00:07:17.130
allows you to catch it in a graceful way.

122
00:07:17.130 --> 00:07:21.490
You're not gonna necessarily wanna keep
the server running once that happens, but

123
00:07:21.490 --> 00:07:26.150
it does prevent the system from entirely
going away and restarting, I found that to

124
00:07:26.150 --> 00:07:30.200
be a useful little trick to listen for
the uncaught exception handler.

125
00:07:31.850 --> 00:07:35.430
Okay, the top,
I start setting up my variables,

126
00:07:35.430 --> 00:07:39.190
this is a style that I've recently fallen
into which is that I put all my variables

127
00:07:39.190 --> 00:07:43.640
at the top of my functions at
the bottom I only do that in node.

128
00:07:43.640 --> 00:07:47.540
My browser's code, I actually end up doing
the reverse and I can't really fully

129
00:07:47.540 --> 00:07:50.810
articulate why, but it's just
a style I've fallen into recently.

130
00:07:50.810 --> 00:07:53.607
I find it easier to have all
my module declarations and

131
00:07:53.607 --> 00:07:55.659
my require statements at the very top so

132
00:07:55.659 --> 00:07:59.638
I can see it a glance everything that's
being pulled in, and I think that's

133
00:07:59.638 --> 00:08:03.521
going to likely be more how we structure
our modules in the future anyway.

134
00:08:03.521 --> 00:08:05.981
We're gonna be doing a lot
of import statements.

135
00:08:05.981 --> 00:08:11.236
They're probably gonna be at the top,
it's kind of more closely mirrors that and

136
00:08:11.236 --> 00:08:16.491
you can see I'm importing several base
node modules like the file system module,

137
00:08:16.491 --> 00:08:21.441
the HTTP server module, the node-static
modules how I serve up static files

138
00:08:21.441 --> 00:08:26.480
like the CSS and JavaScript Path
module for parsing file system paths.

139
00:08:26.480 --> 00:08:30.260
URL parser, this one parses URL strings.

140
00:08:30.260 --> 00:08:34.360
This watch one, I'll explain later, but
that's how you watch a file system and

141
00:08:34.360 --> 00:08:35.739
do stuff if things change.

142
00:08:37.050 --> 00:08:40.600
Now I start setting up some variables
which I'm not doing anything with yet, but

143
00:08:40.600 --> 00:08:41.500
these are some variables.

144
00:08:41.500 --> 00:08:46.530
These are basically the representations
of the modules that I plan to

145
00:08:46.530 --> 00:08:47.780
use in both places.

146
00:08:48.920 --> 00:08:51.970
ASQ that's gonna be my a sequence library.

147
00:08:51.970 --> 00:08:53.960
Grips is my templating engine.

148
00:08:53.960 --> 00:08:58.450
EventEmitter2 is an event library
that lets you have very lightweight

149
00:08:58.450 --> 00:09:00.430
PubSub kind of thing.

150
00:09:00.430 --> 00:09:04.300
Events is gonna be my actual
module that uses that, or

151
00:09:04.300 --> 00:09:06.430
my actual instance of EventEmitter2.

152
00:09:07.890 --> 00:09:11.380
Tmpls is gonna be my templates manager.

153
00:09:11.380 --> 00:09:15.160
It interacts, that's actually
the compiled templates from grips.

154
00:09:15.160 --> 00:09:17.420
Pages is gonna kind of
be a page controllers.

155
00:09:17.420 --> 00:09:20.920
It's gonna handle mostly in the browser,
a little bit on the server, but

156
00:09:20.920 --> 00:09:25.380
mostly in the browser, it's gonna handle
things like managing my history objects so

157
00:09:25.380 --> 00:09:28.210
that my URLs, in a single page app,

158
00:09:28.210 --> 00:09:31.510
my URLs are properly mapping with
my back button and stuff like that.

159
00:09:31.510 --> 00:09:33.130
When you use the history API and

160
00:09:33.130 --> 00:09:39.070
that one, the view module is directly
interacting with my templates.

161
00:09:39.070 --> 00:09:42.010
And the request module
is abstracting away.

162
00:09:42.010 --> 00:09:46.060
If I wanna request something
when I'm in the server context,

163
00:09:46.060 --> 00:09:49.820
a request is just a file system load,
but if I'm in the browser,

164
00:09:49.820 --> 00:09:52.810
it's an AJAX, I just create
a little wrapper on top of that so

165
00:09:52.810 --> 00:09:56.150
I don't have to think and
I can use the same request in both places.

166
00:09:56.150 --> 00:10:00.490
And then finally, a variable called
routes which is gonna be an array

167
00:10:00.490 --> 00:10:04.640
of basically if you've done
any work with Express, or

168
00:10:04.640 --> 00:10:08.730
if you've done maybe something like
KOA that's another generator's based

169
00:10:09.800 --> 00:10:14.100
routing server that is similar to Express,
and there's even modules that let you use

170
00:10:14.100 --> 00:10:17.970
them together but essentially I'm gonna
recreate that without a framework.

171
00:10:17.970 --> 00:10:21.190
And I'm gonna do it in just
a few lines of code and

172
00:10:21.190 --> 00:10:26.500
my router writes as a series of functions
that will perform my middleware pounds.

173
00:10:26.500 --> 00:10:30.820
Here I start pulling in some stuff
this is requiring in that secret file,

174
00:10:30.820 --> 00:10:32.390
setting up some static file options.

175
00:10:32.390 --> 00:10:38.130
These aren't used yet in ours but, they're
used a little bit but not a lot right now.

176
00:10:38.130 --> 00:10:41.900
You notice that I have it set up so that
you can switch this from Dev to Prod which

177
00:10:41.900 --> 00:10:46.790
changes file caching modes and
things like that, all right.

178
00:10:46.790 --> 00:10:51.540
Here I start loading in those modules
that I was talking about earlier.

179
00:10:51.540 --> 00:10:56.680
And there's something interesting that
is definitely typically considered

180
00:10:56.680 --> 00:10:58.570
an evil thing to do with note.

181
00:10:58.570 --> 00:11:01.870
Most people say you should stay away
from the global object entirely.

182
00:11:02.910 --> 00:11:07.790
I can't fully endorse this technique

183
00:11:08.910 --> 00:11:13.520
without any side effects, but I would say
that it has become increasingly useful

184
00:11:13.520 --> 00:11:18.410
in the process of sharing code
if I treat my hybrid modules,

185
00:11:18.410 --> 00:11:22.190
their name spaces as being
on the global object.

186
00:11:22.190 --> 00:11:27.560
The difference is if I wanted to do
this in a fully modularized way I'd

187
00:11:27.560 --> 00:11:31.525
have a very different mechanism running
in the browser or something like require,

188
00:11:31.525 --> 00:11:36.400
that would be managing my module instances
in the browser, and it would look very

189
00:11:36.400 --> 00:11:40.220
different with how I would interact
with those modules in the node server.

190
00:11:40.220 --> 00:11:43.400
And I don't want things to look
significantly differently or

191
00:11:43.400 --> 00:11:46.150
it kinda defeats the purpose
of trying to share code.

192
00:11:46.150 --> 00:11:50.370
Even if the code itself was shared if
the way that I use it is very different,

193
00:11:50.370 --> 00:11:51.820
I don't really wanna go about that.

194
00:11:51.820 --> 00:11:56.520
I'm also not a big fan of jury factor.

195
00:11:58.940 --> 00:12:01.340
Sure you could re-factor server JS.

196
00:12:01.340 --> 00:12:04.370
This was a quick and dirty site that
I built in three or four days for

197
00:12:04.370 --> 00:12:06.730
the purposes of showing off some stuff,

198
00:12:06.730 --> 00:12:11.290
this is certainly not production
quality perfect code.

199
00:12:14.290 --> 00:12:19.410
What I'm doing is I'm basically setting a
local variable instance in my program but

200
00:12:19.410 --> 00:12:23.300
I'm also making a reference to that
same thing on the global namespace.

201
00:12:23.300 --> 00:12:27.110
And what that means in my code is that
inside of those modules if one module is

202
00:12:27.110 --> 00:12:29.650
using another one,
I don't need to worry about

203
00:12:31.360 --> 00:12:35.330
different sorts of imports on
the server as I do in the browser.

204
00:12:35.330 --> 00:12:38.335
The other way of going about this by
the way if you don't want to go this route

205
00:12:38.335 --> 00:12:41.790
with setting the Globals,
is you write server side modules and

206
00:12:41.790 --> 00:12:46.270
then you use some tool like Browserify
which completely rewrites your code and

207
00:12:46.270 --> 00:12:48.935
makes it look like something
that will run in the browser.

208
00:12:48.935 --> 00:12:51.451
And I've done that before and
I'm not saying Browserify is bad,

209
00:12:51.451 --> 00:12:52.603
actually it's a great tool.

210
00:12:52.603 --> 00:12:57.122
But it's a lot more mental juggling to
think about the code that's running in

211
00:12:57.122 --> 00:13:01.153
the browser has been transformed
now It's rewritten your code, and

212
00:13:01.153 --> 00:13:06.368
I would rather literally use the same code
while I'm learning things and so forth.

213
00:13:06.368 --> 00:13:10.682
For me Browserify was heavier than I
wanted to go with this project but

214
00:13:10.682 --> 00:13:13.716
it is another way of handling
what I'm doing here.

215
00:13:13.716 --> 00:13:18.522
I'm loading in some of these
libraries like asynquence this is

216
00:13:18.522 --> 00:13:22.460
the contrib packages on top,
here's the grips, templating engine,

217
00:13:22.460 --> 00:13:27.930
my EventEmitter these are me loading
in those pages in views and requests.

218
00:13:27.930 --> 00:13:30.580
All right so I have a function
which I'll show you a little

219
00:13:30.580 --> 00:13:33.140
bit down below called load templates.

220
00:13:33.140 --> 00:13:37.550
It's supposed to go and take this
templates JS file, which I'll show you

221
00:13:37.550 --> 00:13:41.780
where that comes from, but it's to take
that file, run it in my current context of

222
00:13:41.780 --> 00:13:46.020
my engine so that my server side process
can render templates if necessary.

223
00:13:47.160 --> 00:13:51.750
And the principle here is, what I call
sort of hybrid rendering which is that on

224
00:13:51.750 --> 00:13:55.830
the initial page request or any page
requests that actually goes to the server.

225
00:13:56.850 --> 00:14:01.060
That rendering engine should be invoked
and should render a full HTML page ready

226
00:14:01.060 --> 00:14:04.110
to ship out to the server
with all of its data.

227
00:14:04.110 --> 00:14:10.120
But once we then ship out an application,
and we are in the page in the server,

228
00:14:10.120 --> 00:14:14.920
I mean in the client in the browser, now
you want for your JavaScript to take over

229
00:14:14.920 --> 00:14:18.770
and to do single page app things like
being able to rerender a page using

230
00:14:18.770 --> 00:14:22.540
the exact same templates,
with the exact same templating engine.

231
00:14:22.540 --> 00:14:26.050
What I'm doing here is I'm loading up
the templates into the server instance so

232
00:14:26.050 --> 00:14:29.540
they can make those initial requests but
we do the exact same thing we load those

233
00:14:29.540 --> 00:14:34.000
things up into the browser as well and
it's literally identical code.

234
00:14:34.000 --> 00:14:37.950
It's the same templating engine it's the
same templates that have been compiled.

235
00:14:37.950 --> 00:14:41.740
Everything is exactly the same and
it runs the same in both places.

236
00:14:41.740 --> 00:14:44.610
It's really a significant amount
of sharing that's going on and

237
00:14:44.610 --> 00:14:48.800
what I need to do is basically load up
this file so let's take a divergence and

238
00:14:48.800 --> 00:14:52.970
ask, there's a question what
is the purpose of asynquence?

239
00:14:52.970 --> 00:14:55.310
Asynquence is a flow control library.

240
00:14:55.310 --> 00:14:57.810
It manages things like promises and
generators.

241
00:14:57.810 --> 00:15:01.920
Anything that you're doing asynchronously
instead of using native promises or

242
00:15:01.920 --> 00:15:04.920
whatever, this is a library
that kind of helps

243
00:15:04.920 --> 00:15:07.830
glue all of that stuff
together in a better way.

244
00:15:07.830 --> 00:15:12.210
And so I'm gonna be using
a sequence down below to do, and

245
00:15:12.210 --> 00:15:14.570
across the modules in quite a few places.

246
00:15:14.570 --> 00:15:16.660
That's what it's for,
we're gonna use it in quite a few places.

