WEBVTT

1
00:00:00.000 --> 00:00:03.682
[MUSIC]

2
00:00:03.682 --> 00:00:07.219
&gt;&gt; Kyle Simpson: This code that I'm going
to show you is a full stack JavaScript

3
00:00:07.219 --> 00:00:10.688
application that is it's doing
both the middle end stuff and

4
00:00:10.688 --> 00:00:13.978
what we would consider backend stuff,
all in one piece.

5
00:00:13.978 --> 00:00:15.620
In fact,
it really isn't much of a backend.

6
00:00:17.690 --> 00:00:21.220
So, I'm not dealing with anything
with databases or whatever.

7
00:00:21.220 --> 00:00:24.090
[COUGH] By the way on
the topic of data validation,

8
00:00:24.090 --> 00:00:27.880
the greatest part about data validation
rules is, you don't just write them once.

9
00:00:27.880 --> 00:00:30.880
You don't just write them twice,
you actually write them three times.

10
00:00:30.880 --> 00:00:35.050
You write them once in your application
code, once in your JavaScript and

11
00:00:35.050 --> 00:00:37.460
then your database guys is
I don't trust them at all.

12
00:00:37.460 --> 00:00:39.210
I'm gonna rewrite it and
stored procedures and

13
00:00:39.210 --> 00:00:43.040
now you have three Copies of
your data validation rules.

14
00:00:43.040 --> 00:00:44.180
Anyway, that's just a side topic.

15
00:00:46.420 --> 00:00:50.240
So, what we're gonna look
at essentially is a way to

16
00:00:50.240 --> 00:00:52.470
just in a very simple integrated way,

17
00:00:52.470 --> 00:00:58.130
write some code in a Node application in
the Node slash IO whatever application.

18
00:00:58.130 --> 00:01:01.610
That serves up the backend,
if you will, the backend and

19
00:01:01.610 --> 00:01:03.480
the middle end of our application.

20
00:01:03.480 --> 00:01:05.630
And it tries, in whatever ways possible,

21
00:01:05.630 --> 00:01:09.640
to share some code with what's gonna
happen in the front end, okay?

22
00:01:09.640 --> 00:01:14.320
So the app that I'm gonna show you, let me
just show you the finished version of it.

23
00:01:14.320 --> 00:01:16.590
Cuz it's actually a little
mini site that I launched.

24
00:01:17.816 --> 00:01:19.620
Nobody's gonna care that
much about the site, but

25
00:01:19.620 --> 00:01:25.197
its a little mini site that I
launched called securephrase.io.

26
00:01:25.197 --> 00:01:27.740
I don't know if any of
you have ever heard.

27
00:01:27.740 --> 00:01:29.710
Hopefully.
I haven't tried it today.

28
00:01:29.710 --> 00:01:30.540
So hopefully it's not dead.

29
00:01:30.540 --> 00:01:36.170
Have any of you ever heard of diceware?

30
00:01:36.170 --> 00:01:41.550
It's an algorithm for generating secure
passphrases using random word generation.

31
00:01:41.550 --> 00:01:44.210
Passphrase is being not
like your passwords, but

32
00:01:44.210 --> 00:01:45.690
the things that you would do.

33
00:01:45.690 --> 00:01:47.510
Yeah, this doesn't seem to be loading.

34
00:01:47.510 --> 00:01:51.940
I'll triage that in a moment on a break or
something, but I can.

35
00:01:53.700 --> 00:01:56.340
Is it a connection issue,
probably it's a connection issue.

36
00:01:57.770 --> 00:01:59.590
It's why you always have
a local of something right?

37
00:02:00.930 --> 00:02:02.070
It's like I've done this a few times.

38
00:02:02.070 --> 00:02:05.920
So this my little secure phrase
generator thing, it's just a toy site.

39
00:02:05.920 --> 00:02:09.200
But I did it because I wanted something
to generate these phrases for

40
00:02:09.200 --> 00:02:13.980
my own purposes, and I thought hey, that's
a great thing that I could teach with.

41
00:02:13.980 --> 00:02:16.640
So a week ago I said,
I've got this workshop coming up.

42
00:02:16.640 --> 00:02:18.700
I want to teach some people
some of these ideas.

43
00:02:18.700 --> 00:02:19.530
I'll just build a site.

44
00:02:19.530 --> 00:02:21.750
So this has been built in the last week.

45
00:02:21.750 --> 00:02:22.410
It's rough.

46
00:02:22.410 --> 00:02:24.870
It's not nice or great, or whatever, but

47
00:02:24.870 --> 00:02:27.860
it does illustrate the concepts
that we want to go through.

48
00:02:27.860 --> 00:02:28.580
And this is just,

49
00:02:28.580 --> 00:02:33.480
it's a silly application, but you tell it
how many words you want in your phrase.

50
00:02:33.480 --> 00:02:34.710
It generates the phrase and

51
00:02:34.710 --> 00:02:38.350
it gives you some nonsense phrases
to use as your passphrase.

52
00:02:40.980 --> 00:02:47.603
So there's a couple of things to
observe about this application.

53
00:02:47.603 --> 00:02:51.010
Actually, give me just a second.

54
00:02:51.010 --> 00:02:51.913
It appears to be,

55
00:03:03.006 --> 00:03:03.928
&gt;&gt; Kyle Simpson: Actually, it's kind

56
00:03:03.928 --> 00:03:07.030
of fortuitous that it's working,
and notice that it's working.

57
00:03:07.030 --> 00:03:08.260
But if you look closely,

58
00:03:08.260 --> 00:03:11.880
every time I click that it's
actually doing a full form submit.

59
00:03:11.880 --> 00:03:15.100
Something about my client side,
JavaScript, isn't working correctly and

60
00:03:15.100 --> 00:03:18.240
I'm going to have to check into
what's going on with that.

61
00:03:18.240 --> 00:03:21.800
Which I'll look at over at break but.

62
00:03:21.800 --> 00:03:23.170
Basically, what this is doing is,

63
00:03:23.170 --> 00:03:28.460
it's illustrating the idea that I want
the server side to be able to do this work

64
00:03:28.460 --> 00:03:32.020
exactly the same as I want the client
side to be able to do the work.

65
00:03:32.020 --> 00:03:34.360
I don't want to have to
rewrite this logic for

66
00:03:34.360 --> 00:03:37.020
generating past phrases in both places.

67
00:03:37.020 --> 00:03:39.730
So, in the fallback case which is
what's happening here where my

68
00:03:39.730 --> 00:03:42.020
JavaScript is somehow broken for
some reason.

69
00:03:42.020 --> 00:03:46.270
In that fallback case, I want it to
be able to just gracefully fall back

70
00:03:46.270 --> 00:03:50.996
to calling back to the server and running
the exact same code on the server, and

71
00:03:50.996 --> 00:03:55.300
on I wasn't intending to show you that,
but it's broken in some way.

72
00:03:55.300 --> 00:03:58.820
With JavaScript's not getting served
up correctly and it still falls back

73
00:03:58.820 --> 00:04:03.620
to sending that request across the wire
and working the way that we'd expect.

