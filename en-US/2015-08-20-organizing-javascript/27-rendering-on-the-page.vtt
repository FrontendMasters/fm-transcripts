WEBVTT

1
00:00:00.000 --> 00:00:04.100
[MUSIC]

2
00:00:04.100 --> 00:00:08.021
&gt;&gt; Kyle Simpson: Let me just give you
a slightly little bit more practice by

3
00:00:08.021 --> 00:00:12.030
working with the template
engine in the browser.

4
00:00:12.030 --> 00:00:17.651
So let's go to our, about.grips file and

5
00:00:17.651 --> 00:00:21.930
let's define ourselves.

6
00:00:21.930 --> 00:00:24.156
A little thing like.

7
00:00:29.671 --> 00:00:33.070
&gt;&gt; Kyle Simpson: Let's see,
actually let me do it this way.

8
00:00:33.070 --> 00:00:35.834
Let's say that we want
to include a partial.

9
00:00:46.282 --> 00:00:48.441
&gt;&gt; Kyle Simpson: Let's define
that partial down here.

10
00:00:56.749 --> 00:00:59.717
&gt;&gt; Kyle Simpson: An example
of shared form validation.

11
00:00:59.717 --> 00:01:02.970
Let me see if I can come up with something
that's a good suggestion let me see if I

12
00:01:02.970 --> 00:01:05.255
can come up with something
that won't be too complex.

13
00:01:11.289 --> 00:01:11.894
&gt;&gt; Kyle Simpson: Okay.

14
00:01:11.894 --> 00:01:13.980
[COUGH] The define partial here.

15
00:01:13.980 --> 00:01:16.077
I'm sorry we need to
give it the ID answer.

16
00:01:20.219 --> 00:01:22.262
&gt;&gt; Kyle Simpson: Now inside
in here we wanna have,

17
00:01:30.617 --> 00:01:32.327
&gt;&gt; Kyle Simpson: We'll make a div with

18
00:01:32.327 --> 00:01:34.897
a rel attribute of js-answer.

19
00:01:39.803 --> 00:01:42.769
&gt;&gt; Kyle Simpson: And what we wanna
do is include, inside of that div.

20
00:01:43.930 --> 00:01:45.545
&gt;&gt; Speaker 2: Can you increase
your font size at all?

21
00:01:45.545 --> 00:01:46.607
&gt;&gt; Kyle Simpson: Yeah.

22
00:01:48.512 --> 00:01:49.892
&gt;&gt; Kyle Simpson: Is that better?

23
00:01:49.892 --> 00:01:50.639
&gt;&gt; Speaker 2: I think so.

24
00:01:50.639 --> 00:01:53.630
&gt;&gt; Kyle Simpson: Okay.

25
00:01:53.630 --> 00:01:57.450
[COUGH] All right so
we want to include, so insert.

26
00:01:57.450 --> 00:02:01.743
Now in grips the way you get at your local
variable context that you can insert

27
00:02:01.743 --> 00:02:07.630
from Do $., and then I assume that there's
gonna be something called answer there.

28
00:02:07.630 --> 00:02:11.117
So we'll pass in that as some
data that is able to render.

29
00:02:16.314 --> 00:02:19.851
&gt;&gt; Kyle Simpson: So if we load the about
page and there is no answer there,

30
00:02:19.851 --> 00:02:24.880
then obviously, it's just gonna
end up rendering an empty div.

31
00:02:24.880 --> 00:02:28.510
But what we're gonna take advantage of
now is our ability on the client side

32
00:02:28.510 --> 00:02:31.480
to re-render that partial and replace it.

33
00:02:34.520 --> 00:02:38.040
So I'll come back to my about.js.

34
00:02:38.040 --> 00:02:40.859
And let's get rid of this alert stuff.

35
00:02:46.990 --> 00:02:49.478
[COUGH] What we want to do now,

36
00:02:49.478 --> 00:02:55.090
is let's make ourself another
function called render answer.

37
00:03:00.800 --> 00:03:03.747
And, we want to call that directly here.

38
00:03:17.090 --> 00:03:22.690
&gt;&gt; Kyle Simpson: And
we wanna call it here with resp.answer.

39
00:03:28.131 --> 00:03:31.200
&gt;&gt; Kyle Simpson: So
how are we going to render this answer?

40
00:03:31.200 --> 00:03:35.933
Well, we're going to call view.

41
00:03:39.776 --> 00:03:40.470
&gt;&gt; Kyle Simpson: And let me look it up.

42
00:03:40.470 --> 00:03:46.780
I forgot what the method name
is getPartialHTML there we go.

43
00:03:49.202 --> 00:03:53.610
So View.getPartialHTML and
what I wanna say

44
00:03:53.610 --> 00:03:58.130
the way I'm gonna reference it
is this is the about template.

45
00:03:58.130 --> 00:04:00.500
And then the name of the partial
I separated with a pound,

46
00:04:00.500 --> 00:04:02.130
the name of the partial was answer.

47
00:04:03.280 --> 00:04:05.053
It's the thing that we created.

48
00:04:05.053 --> 00:04:08.953
And then I'm gonna pass it some data and
the data needs to have that object data

49
00:04:08.953 --> 00:04:12.690
needs to have the the variable that
we're expecting which is our answer.

50
00:04:14.550 --> 00:04:15.871
So we just include that.

51
00:04:21.729 --> 00:04:27.063
&gt;&gt; Kyle Simpson: So that's all I need to
do to invoke grips and have it re render

52
00:04:27.063 --> 00:04:33.562
just that template partial including
in the data that I just grabbed out.

53
00:04:33.562 --> 00:04:36.764
And then I'm going to invoke
some simple jQuery here.

54
00:04:36.764 --> 00:04:44.060
I'll pull, I'll get a reference
to that js-answer div.

55
00:04:44.060 --> 00:04:44.860
That's sitting there.

56
00:04:49.210 --> 00:04:54.530
And I will replace it with
the html that I just rendered.

57
00:04:54.530 --> 00:04:58.240
So am gonna take a div that I just
re-rendered using that template engine and

58
00:04:58.240 --> 00:05:02.990
replace it with,
I'm sorry take the old div and

59
00:05:02.990 --> 00:05:07.360
replace it with the new HTML
from the template engine.

60
00:05:11.100 --> 00:05:16.940
So let me just stop and say the reason I'm
doing this is because I genuinely believe,

61
00:05:16.940 --> 00:05:19.790
and this is not just about this project,
it's in general.

62
00:05:19.790 --> 00:05:25.450
I don't think that we should be writing
JavaScript to manually manipulate contents

63
00:05:25.450 --> 00:05:33.420
of DOM elements like saying dot value on
some input box or something like that.

64
00:05:33.420 --> 00:05:38.550
The way that I approach updating my
page is very actually similar to

65
00:05:38.550 --> 00:05:42.270
what they're talking about in the Ember
glimmer thing that I'm talking about.

66
00:05:42.270 --> 00:05:46.810
I figure out which partial Is the smallest
partial that needs to get rerendered

67
00:05:46.810 --> 00:05:52.100
with my new data, and I rerender it and
I just replace wholesale the DOM element.

68
00:05:52.100 --> 00:05:56.910
And if I need to work with event
handlers or rebind my event handlers.

69
00:05:56.910 --> 00:06:01.189
But you notice that I don't have a lot
of deep code that knows about the DOM

70
00:06:01.189 --> 00:06:04.220
structure and
deeply knowing about those things.

71
00:06:04.220 --> 00:06:08.200
I just say just re-render the template
partial whatever the contents of it are.

72
00:06:12.450 --> 00:06:15.460
Okay.
So we've changed our template,

73
00:06:15.460 --> 00:06:21.239
we've changed our code to use
the template and if I'm not forgetting

74
00:06:21.239 --> 00:06:26.732
anything I think all we need to do
is just simply refresh our page.

75
00:06:26.732 --> 00:06:28.320
So it starts out as undefined.

76
00:06:29.930 --> 00:06:34.090
And if we then do,
that doesn't seem to work.

77
00:06:35.860 --> 00:06:36.733
Did I get an error?

78
00:06:41.466 --> 00:06:43.890
&gt;&gt; Kyle Simpson: Okay,
let's do some JavaScript debugging.

79
00:06:45.540 --> 00:06:47.107
There we go.

80
00:06:47.107 --> 00:06:49.110
Now it's getting the html
in the right spot.

81
00:06:49.110 --> 00:06:52.180
And we'll verify that it still works
even if we do things remotely.

82
00:06:54.040 --> 00:06:56.630
Still makes API calls and
grabs the data and drops it in.

