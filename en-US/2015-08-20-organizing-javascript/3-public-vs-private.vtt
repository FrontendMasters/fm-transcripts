WEBVTT

1
00:00:00.029 --> 00:00:03.866
[MUSIC]

2
00:00:03.866 --> 00:00:06.765
&gt;&gt; Kyle Simpson: He was asked what's the
difference between something that's public

3
00:00:06.765 --> 00:00:07.376
and private.

4
00:00:07.376 --> 00:00:12.270
So I rearranged this slightly to show,

5
00:00:15.020 --> 00:00:18.280
I now have an inner function
here which I call upper and

6
00:00:18.280 --> 00:00:21.320
it does the task of taking some
variable and upper casing it.

7
00:00:22.830 --> 00:00:29.450
And then I have this function here,
and I'm using that inner function,

8
00:00:29.450 --> 00:00:33.750
but you'll notice that I'm not exposing
that upper to the outside world.

9
00:00:33.750 --> 00:00:37.270
That is an internal implementation
detail that from the outside world,

10
00:00:37.270 --> 00:00:39.750
you have no access to, but
I'm still able to use it.

11
00:00:39.750 --> 00:00:43.810
So this is what we mean, this function
is declared on line three is an inner

12
00:00:43.810 --> 00:00:47.560
function, it's a private function,
it's not accessible to the outside world.

13
00:00:47.560 --> 00:00:51.840
And we're likely gonna make modules that
have lots and lots of those and lots and

14
00:00:51.840 --> 00:00:54.130
lots of private variables like for

15
00:00:54.130 --> 00:00:58.510
example, the name variable that we see
from line one, that's a private variable,

16
00:00:58.510 --> 00:01:01.770
but we can make other name
variables like we could do id and

17
00:01:01.770 --> 00:01:06.270
we could assign it a random
number is that person's ID.

18
00:01:06.270 --> 00:01:10.400
So now I have a user ID that is
only accessible on the inside and

19
00:01:10.400 --> 00:01:14.130
the only way somebody can ever see that
value is if I choose to make a method that

20
00:01:14.130 --> 00:01:17.350
exposes that in some way,
otherwise it stays private.

21
00:01:17.350 --> 00:01:22.020
So ID now and upper and name,
those are all private things.

22
00:01:22.020 --> 00:01:26.360
The only thing that's public is I make a
reference to that function on this object

23
00:01:26.360 --> 00:01:29.930
that I return back,
that object being a public API.

24
00:01:29.930 --> 00:01:34.530
There's a slight variation of lines 13
through 15 that I personally do in my

25
00:01:34.530 --> 00:01:39.730
own code to make it slightly clearer,
more clear what's happening and it's this.

26
00:01:39.730 --> 00:01:43.840
Instead of returning that object,
I call it public API and

27
00:01:45.360 --> 00:01:48.900
then I return public API.

28
00:01:51.730 --> 00:01:55.130
Now functionally, that's exactly
the same as the previous, but

29
00:01:55.130 --> 00:02:00.910
this is slightly more obvious now what
this object is, it's a public API.

30
00:02:02.530 --> 00:02:04.680
So if I'm looking through
hundreds of lines of code and

31
00:02:04.680 --> 00:02:08.980
I see a thing declared public API, it kind
of jumps out at me as like, hey, hey,

32
00:02:08.980 --> 00:02:11.050
there's a public API here, okay.

33
00:02:11.050 --> 00:02:12.957
It's just a stylistic
choice that I prefer.

34
00:02:18.879 --> 00:02:19.994
&gt;&gt; Kyle Simpson: Just to hammer home this

35
00:02:19.994 --> 00:02:23.228
point of the fact that this inner
function still has access to stuff,

36
00:02:23.228 --> 00:02:27.170
I don't even have to use it in such
a way where I'm passing something to it.

37
00:02:27.170 --> 00:02:31.780
Upper could be called upperFirstName name,
and

38
00:02:31.780 --> 00:02:37.950
it could be set to automatically use
name and so here, I don't call upper and

39
00:02:37.950 --> 00:02:44.050
pass in name, I just call upperFirstName
without needing to pass anything into it.

40
00:02:44.050 --> 00:02:45.930
Still gonna work exactly the same way.

41
00:02:45.930 --> 00:02:48.580
It's gonna call this
private inner function.

42
00:02:48.580 --> 00:02:51.960
That thing is gonna have access to
this variable through the closure,

43
00:02:51.960 --> 00:02:54.980
and it'll be able to receive that
value and do something with it, or

44
00:02:54.980 --> 00:02:56.390
use that value to do something.

45
00:02:57.440 --> 00:03:00.294
So that's why we end up printing
Kyle in capital letters.

46
00:03:05.932 --> 00:03:07.071
&gt;&gt; Kyle Simpson: Okay.

47
00:03:12.165 --> 00:03:13.327
&gt;&gt; Kyle Simpson: Now hopefully,

48
00:03:13.327 --> 00:03:17.394
most people have.
&gt;&gt; Kyle Simpson: Somebody's asking about

49
00:03:17.394 --> 00:03:19.490
my variable name text formatting.

50
00:03:19.490 --> 00:03:24.100
Yeah it's kind of,
I have my own sort of weird style

51
00:03:24.100 --> 00:03:28.860
that's actually comes from programming
prior to moving to JavaScript.

52
00:03:28.860 --> 00:03:34.680
So essentially,
I camel case anything that is

53
00:03:34.680 --> 00:03:39.000
a function and
I use whatever the style is called,

54
00:03:39.000 --> 00:03:43.047
I never even remember what they call them-
&gt;&gt; Speaker 2: Snake case [INAUDIBLE].

55
00:03:43.047 --> 00:03:44.310
&gt;&gt; Kyle Simpson: I use snake case for

56
00:03:44.310 --> 00:03:48.290
variables and I use camel case for
functions and that's just so

57
00:03:48.290 --> 00:03:51.580
I remember in my own code is this
something I can call or not.

58
00:03:51.580 --> 00:03:56.395
That's not a terribly common style that
people use, but that's [INAUDIBLE].

59
00:03:56.395 --> 00:03:57.866
&gt;&gt; Speaker 2: Its smart though.

60
00:03:57.866 --> 00:04:01.760
It seems like a good style.
&gt;&gt; Kyle Simpson: I got that from way,

61
00:04:01.760 --> 00:04:04.430
way back, like C programming,
I did that and

62
00:04:04.430 --> 00:04:06.780
it's just something,
it's just a habit that stuck with me.

63
00:04:06.780 --> 00:04:11.431
It's not a particularly idiomatic thing in
JavaScript and a lot of people do it, but

64
00:04:11.431 --> 00:04:13.105
that's how I came across it.

65
00:04:13.105 --> 00:04:14.590
[COUGH]
&gt;&gt; Speaker 2: Is JavaScript

66
00:04:14.590 --> 00:04:18.968
not probably case sensitive where if you
have like up there, HELLO was in capitals,

67
00:04:18.968 --> 00:04:21.805
you've used hello with small letters and
it's okay,

68
00:04:21.805 --> 00:04:23.184
right?
&gt;&gt; Kyle Simpson: It is not.

69
00:04:23.184 --> 00:04:25.970
JavaScript is completely case sensitive.

70
00:04:25.970 --> 00:04:28.411
All identifiers are case sensitive.
&gt;&gt; Speaker 2: Okay,

71
00:04:28.411 --> 00:04:29.389
good enough.
&gt;&gt; Kyle Simpson: And

72
00:04:29.389 --> 00:04:35.179
even in this own piece of code, I was
a little inconsistent cuz this last name,

73
00:04:35.179 --> 00:04:40.380
probably to keep it consistent,
I should have called that last name.

