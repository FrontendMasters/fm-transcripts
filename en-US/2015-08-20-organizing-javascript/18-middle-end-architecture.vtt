WEBVTT

1
00:00:00.000 --> 00:00:03.941
[MUSIC]

2
00:00:03.941 --> 00:00:07.931
&gt;&gt; Kyle Simpson: We're going to try
to switch gears a little bit and

3
00:00:07.931 --> 00:00:11.638
focus on applying JavaScript
to some stuff and

4
00:00:11.638 --> 00:00:16.500
this particular workshop is
not exactly a formal workshop.

5
00:00:16.500 --> 00:00:21.590
This is more, we are going to basically
just go through some code that I wrote for

6
00:00:21.590 --> 00:00:24.890
the purposes of being able to illustrate

7
00:00:24.890 --> 00:00:29.730
ideas that I have kind of espoused in
various talks over the last several years.

8
00:00:29.730 --> 00:00:35.227
So, [COUGH] just as a brief little history
lesson that no body would care about,

9
00:00:35.227 --> 00:00:40.409
but since you're listening to me you
have to listen to me anyway, [LAUGH].

10
00:00:40.409 --> 00:00:46.763
Way back in 2009 kind of towards
actually the early parts

11
00:00:46.763 --> 00:00:52.750
of my speaking career,
I was working at a PHP shop.

12
00:00:52.750 --> 00:00:57.860
And I wanted to be able to do
JavaScript on the server because there

13
00:00:57.860 --> 00:01:02.940
were things that I wanted to do that
were awkward or harder to do with PHP.

14
00:01:02.940 --> 00:01:07.840
And I also hated the fact that I was
essentially repeating code a lot.

15
00:01:07.840 --> 00:01:13.190
I don't know if anybody else has had this
frustration of like repeating code before,

16
00:01:13.190 --> 00:01:15.770
but I was definitely
having this frustration.

17
00:01:15.770 --> 00:01:18.920
My particular pain-point
was data validation rules.

18
00:01:18.920 --> 00:01:23.430
And I remembered back to my computer
science schooling years before

19
00:01:23.430 --> 00:01:24.480
that one of the principles,

20
00:01:24.480 --> 00:01:30.590
one of the maximums that I learned
in my first programming 101 course.

21
00:01:30.590 --> 00:01:33.470
Is what we now call the dry principle,

22
00:01:33.470 --> 00:01:37.310
but back then what they said
in computer science school was

23
00:01:37.310 --> 00:01:40.820
anytime there's more than one copy of
something, one copy is always wrong.

24
00:01:42.140 --> 00:01:46.220
Which nowadays we just refer to as dry,
we say don't repeat, right?

25
00:01:46.220 --> 00:01:51.780
If it's possible to not repeat yourself,
it's better to not repeat yourself.

26
00:01:51.780 --> 00:01:55.380
It's better to reuse something than
to repeat it over and over again.

27
00:01:55.380 --> 00:01:57.560
Obviously those are not hard and
fast principles, but

28
00:01:57.560 --> 00:02:00.190
they're guiding principles
in software design.

29
00:02:01.230 --> 00:02:05.010
So, [COUGH]
it struck me

30
00:02:05.010 --> 00:02:09.530
that I was repeating this data
validation rule set in PHP and

31
00:02:09.530 --> 00:02:13.270
I was turning around a writing
the same code in JavaScript.

32
00:02:13.270 --> 00:02:16.410
And I had done that actually many
times cuz I had written many many

33
00:02:16.410 --> 00:02:18.490
sorts of PHP applications.

34
00:02:18.490 --> 00:02:21.560
Years earlier than that, way back in 2002,

35
00:02:21.560 --> 00:02:25.030
I’d written a time sheet application for
a company.

36
00:02:25.030 --> 00:02:29.840
And I’d written all the back-end stuff
in PHP inside all my classes and

37
00:02:29.840 --> 00:02:31.270
stuff like that in PHP.

38
00:02:31.270 --> 00:02:35.110
And then I had to turn around and write
most of that stuff in JavaScript as well.

39
00:02:35.110 --> 00:02:37.450
So I was repeating some of that
same logic over and over again.

40
00:02:37.450 --> 00:02:39.950
And any time I needed to refactor
something had to go back and

41
00:02:39.950 --> 00:02:41.870
refactor it in both places.

42
00:02:41.870 --> 00:02:45.150
And over the years,
I worked in a lot of different shops,

43
00:02:45.150 --> 00:02:49.250
I saw a lot of different possible
solutions to those sorts of problems.

44
00:02:49.250 --> 00:02:52.990
I worked in a Java shop, and I saw,
I don't even remember the name of it.

45
00:02:52.990 --> 00:02:56.290
But there was some framework that probably
Java people know right off the bat,

46
00:02:56.290 --> 00:03:01.300
but essentially, they expressed
their data validation rules in Java.

47
00:03:01.300 --> 00:03:03.510
And it automatically
generated JavaScript for

48
00:03:03.510 --> 00:03:06.230
them, it automatically
wrote the JavaScript rules.

49
00:03:06.230 --> 00:03:09.210
They had no control over it,
it just injected it in the page.

50
00:03:09.210 --> 00:03:12.880
That seemed like theoretically it was
some solution to the problem because

51
00:03:12.880 --> 00:03:16.920
now the JavaScript gets pushed to page,
except we ran across a problem

52
00:03:16.920 --> 00:03:20.400
where there was one particular sort
of check that was happening in Java.

53
00:03:20.400 --> 00:03:24.410
That the equivalent in JavaScript
ended up giving a different result.

54
00:03:24.410 --> 00:03:27.049
There was no way to
exactly get the same check

55
00:03:27.049 --> 00:03:30.485
result in JavaScript that they
were getting out of Java.

56
00:03:30.485 --> 00:03:33.370
It was close, but
we ran across this one case, and

57
00:03:33.370 --> 00:03:38.550
it was annoying that I had no capability
to go in and change the JavaScript.

58
00:03:38.550 --> 00:03:40.610
Because it was auto
generated on the fly and

59
00:03:40.610 --> 00:03:42.940
I had no control over the code
that they were generating.

60
00:03:42.940 --> 00:03:46.385
So we had to work around that by writing
a different set of validation rules and

61
00:03:46.385 --> 00:03:48.400
reformatting the way
the data was coming in.

62
00:03:48.400 --> 00:03:51.120
It was sort of the tail
wagging the dog problem,

63
00:03:51.120 --> 00:03:53.040
like we wanted to fix the problem but
we couldn't so

64
00:03:53.040 --> 00:03:56.380
we fixed this other entirely different
thing so that the problem would go away.

65
00:03:57.630 --> 00:04:00.130
So as you can tell,
I've had lots of different

66
00:04:00.130 --> 00:04:04.750
exposures to this in different things,
I've seen it in Python shops.

67
00:04:04.750 --> 00:04:07.780
I worked in a Python shop one time and
a Django and

68
00:04:07.780 --> 00:04:10.230
thankfully I didn't have to do
a lot of the Python work, but

69
00:04:10.230 --> 00:04:13.290
I did have to do a little bit
of the Python and Django work.

70
00:04:13.290 --> 00:04:17.480
And in particular the problem that I had
was whatever framework they were using on

71
00:04:17.480 --> 00:04:20.910
top of Django,
whatever their application framework was.

72
00:04:22.440 --> 00:04:28.010
It could not accept arrays
of values from a JavaScript,

73
00:04:28.010 --> 00:04:31.670
like if you posted an array of values
you couldn't post an array and

74
00:04:31.670 --> 00:04:35.140
have it automatically
translate into a Python array.

75
00:04:35.140 --> 00:04:39.780
It required you to have an individually
named thing which is great until you start

76
00:04:39.780 --> 00:04:43.800
doing UIs where they want to have a big
set of radio buttons, for example, or

77
00:04:43.800 --> 00:04:45.130
check boxes or whatever.

78
00:04:45.130 --> 00:04:47.780
You don't wanna have to uniquely
name those things, that's annoying.

79
00:04:47.780 --> 00:04:51.200
You wanna just pass an array of all the
check boxes that have been checked with

80
00:04:51.200 --> 00:04:52.490
true and false in them.

81
00:04:52.490 --> 00:04:54.506
But we couldn't do that,
we just flat out couldn't do it.

82
00:04:54.506 --> 00:04:57.240
And the back-end was sort of
our restriction at this point,

83
00:04:57.240 --> 00:04:59.210
because JavaScript clearly
knew how to do it.

84
00:04:59.210 --> 00:05:02.850
But we pass the array in and it would work
and so I'm just just running into this

85
00:05:02.850 --> 00:05:06.510
problem over and over where code was being
repeated or things are being too difficult

86
00:05:06.510 --> 00:05:11.050
to do bridging this gap between
JavaScript and the server.

87
00:05:11.050 --> 00:05:15.970
And then there were times where I wanted
to configure something about the server.

88
00:05:15.970 --> 00:05:18.620
I wanted to have some control over
something about the server like the way it

89
00:05:18.620 --> 00:05:20.850
was putting together the HTTP headers.

90
00:05:20.850 --> 00:05:23.300
I wanted to change that to
optimize some performance or

91
00:05:23.300 --> 00:05:27.100
I wanted to have more control over the way
it's packaged up files or whatever.

92
00:05:27.100 --> 00:05:31.450
And over and over again from Python
shops to .NET to Java shops and

93
00:05:31.450 --> 00:05:34.360
everything in between Ruby and
Rail and everything.

94
00:05:34.360 --> 00:05:37.602
I worked at all of them and in every
one of those jobs that I worked at,

95
00:05:37.602 --> 00:05:43.480
essentially, the back-end ruled, and
if you didn't know the back-end language,

96
00:05:43.480 --> 00:05:45.190
you just couldn't do
what you wanted to do.

97
00:05:45.190 --> 00:05:49.047
And I was a JavaScript person, or
wanting to be a JavaScript person,

98
00:05:49.047 --> 00:05:53.708
rather exclusively and this dirty secret
was I had no control over the back-end.

99
00:05:53.708 --> 00:05:56.935
So in 2009,
I had started to get this conclusion like

100
00:05:56.935 --> 00:05:59.945
the problem is not that I haven't
learned every single back-end

101
00:05:59.945 --> 00:06:03.375
of every single job that I've ever
worked at because that's not practical.

102
00:06:03.375 --> 00:06:07.015
It's not practical for me to be
hired as a JavaScript developer, but

103
00:06:07.015 --> 00:06:11.330
have to become a Grails
developer to do something and

104
00:06:11.330 --> 00:06:13.040
that literally happened to me,
I'm not making it up.

105
00:06:13.040 --> 00:06:18.210
I went into a job, very first day, hired
as a pure front-end JavaScript that was

106
00:06:18.210 --> 00:06:21.520
hired to build an indelible
JavaScript widget.

107
00:06:21.520 --> 00:06:25.390
Totally JavaScript work, I wasn't
hired to do anything back-end at all.

108
00:06:25.390 --> 00:06:29.130
And I said to them on the very first day,
the guy that was kind of training me,

109
00:06:29.130 --> 00:06:33.960
I said, all right so what I need is,
I need an empty HTML file and

110
00:06:33.960 --> 00:06:35.040
an empty JavaScript file.

111
00:06:35.040 --> 00:06:39.690
You need to be able to serve those up and
that will be the basis for my widget.

112
00:06:39.690 --> 00:06:41.650
And so
just tell me where to put those files and

113
00:06:41.650 --> 00:06:43.270
then I'll go from there, I'm good.

114
00:06:43.270 --> 00:06:46.209
Just tell me where in whatever your
system is, where do I put these files?

115
00:06:46.209 --> 00:06:49.506
And I was imagining there was some
special folder somewhere in this Grails

116
00:06:49.506 --> 00:06:53.040
application, I could just drop a couple
of files and bam it magically worked.

117
00:06:53.040 --> 00:06:57.100
And he said, yeah,
you can't really do that.

118
00:06:57.100 --> 00:06:59.711
And he literally handed me
this huge book on Grails and

119
00:06:59.711 --> 00:07:03.590
he said you're gonna have to read
Chapters 4, 5, and 6 of this book.

120
00:07:03.590 --> 00:07:07.272
Figure out how to set up a route,
a static routing forward and do this and

121
00:07:07.272 --> 00:07:11.570
that and he completely lost me, and
I flipped, I was like are you kidding me?

122
00:07:11.570 --> 00:07:14.500
That's what I have to do
to put an empty HTML and

123
00:07:14.500 --> 00:07:16.550
empty JavaScript file out on the web.

124
00:07:16.550 --> 00:07:21.190
This is ridiculous and so it was kind of
this long boil that I had gotten to and

125
00:07:21.190 --> 00:07:21.960
I kind of flipped out.

126
00:07:21.960 --> 00:07:24.510
I was like,
I don't wanna do all of that crap

127
00:07:25.700 --> 00:07:27.920
to put up some JavaScript files or two.

128
00:07:27.920 --> 00:07:33.514
I want control over at least the part of
the server that I need to have control of.

129
00:07:33.514 --> 00:07:34.322
So in 2009,

130
00:07:34.322 --> 00:07:38.368
I started to formulate this alternate way
of thinking about web architecture, and

131
00:07:38.368 --> 00:07:41.860
I eventually came to call it middle-end
architecture and to this day.

132
00:07:41.860 --> 00:07:43.430
If you go to middlend.com,

133
00:07:43.430 --> 00:07:47.390
it redirects to a series of blog post
that I wrote about that concept.

134
00:07:47.390 --> 00:07:51.170
Where essentially, I was suggesting
there's a set of tasks that every

135
00:07:51.170 --> 00:07:57.400
application architecture needs to do which
I wanted to be able to do in JavaScript.

136
00:07:57.400 --> 00:07:59.670
Because many of those tasks,

137
00:07:59.670 --> 00:08:04.370
the majority of them in fact are things
that you need to do in both locations.

138
00:08:04.370 --> 00:08:07.890
For example, data validation,
data formatting,

139
00:08:07.890 --> 00:08:12.620
routing, templating, caching,
headers, those sorts of things.

140
00:08:12.620 --> 00:08:16.620
Those are all things that every
application does, but they're also all

141
00:08:16.620 --> 00:08:19.830
things that you end up having to do
a lot of on both sides of the fence.

142
00:08:21.200 --> 00:08:22.730
The parsing of those things and so forth.

143
00:08:22.730 --> 00:08:25.620
So I wanted to be able to
implement that in JavaScript and

144
00:08:25.620 --> 00:08:27.730
reuse the code in both places.

145
00:08:27.730 --> 00:08:30.900
And my only option was to suggest
some sort of architecture

146
00:08:30.900 --> 00:08:35.330
that would allow me to write the
JavaScript and then use it in both places.

147
00:08:35.330 --> 00:08:39.480
And so I developed this idea of middle-end
architecture, it's a tongue in cheek idea.

148
00:08:39.480 --> 00:08:43.130
What comes between the front-end and
the back-end, of course, the middle-end.

149
00:08:43.130 --> 00:08:47.400
And I defined it as the top 10% of
what's happening on the server and

150
00:08:47.400 --> 00:08:52.170
the bottom 10% of what was happening in
the browser and everything in between.

151
00:08:52.170 --> 00:08:54.150
And I called that the middle-end and

152
00:08:54.150 --> 00:08:56.420
it involved all of those tasks
that I was talking about.

153
00:08:56.420 --> 00:09:03.280
So at the time there was no such thing
as Node.js, we had a couple of things.

154
00:09:03.280 --> 00:09:06.520
Like, in the Java world, we had Rhino,
which still exists today and

155
00:09:06.520 --> 00:09:09.500
it's being rewritten,
I think to a different engine or whatever.

156
00:09:09.500 --> 00:09:11.930
But we had Rhino,
which was a way to do it.

157
00:09:11.930 --> 00:09:14.080
But that only worked if you
happen to be in a Java shop.

158
00:09:14.080 --> 00:09:17.500
You wouldn't run a Rhino
instance just Java all by itself.

159
00:09:17.500 --> 00:09:19.490
So that didn't seem to work out for us,

160
00:09:19.490 --> 00:09:24.310
especially since I wa, at the time I had
moved onto a job where I was in PHP and

161
00:09:24.310 --> 00:09:28.080
they definitely didn't wanna
have a Java tool in the stack.

162
00:09:28.080 --> 00:09:29.890
So what could I do?

163
00:09:29.890 --> 00:09:34.920
If I couldn't run something with Rhino or
whatever, what could I do.

164
00:09:34.920 --> 00:09:38.920
And I had read that you could
take the JavaScript engine out

165
00:09:38.920 --> 00:09:43.850
of the Chrome Browser, the V8 JavaScript
engine, that you could write some C++

166
00:09:43.850 --> 00:09:48.690
bindings around it and you could create
a JavaScript environment somewhere.

167
00:09:48.690 --> 00:09:50.630
And I thought to myself,
I'll just do that.

168
00:09:50.630 --> 00:09:55.310
I'll just write a server-side JavaScript
engine if I've already got V8,

169
00:09:55.310 --> 00:09:57.070
all I've got to do is write some bindings.

170
00:09:57.070 --> 00:10:00.670
I just got to make it accessible
to the to the file system and

171
00:10:00.670 --> 00:10:03.130
a few other things like that and
that's all I'll need to do.

172
00:10:03.130 --> 00:10:05.590
So I said about to write
a server-side JavaScript engine and

173
00:10:05.590 --> 00:10:09.140
I in fact did it I write
an engine called Bikechain.

174
00:10:09.140 --> 00:10:12.920
And it's still up there on GitHub,
not that anybody would ever use it,

175
00:10:12.920 --> 00:10:15.090
but it's still there if you
wanted to go and look at it.

176
00:10:15.090 --> 00:10:19.860
I wrote this engine in JavaScript and
this was all contemporaneous before and

177
00:10:19.860 --> 00:10:23.519
contemporaneous with
the launch of my Nodejs.

178
00:10:23.519 --> 00:10:27.042
Cuz if you fast forward
to November of 2009, and

179
00:10:27.042 --> 00:10:30.400
I was at JavaScript Con VU in Berlin.

180
00:10:30.400 --> 00:10:36.050
I was over there speaking and sat and
listened to a talk by a relative unknown

181
00:10:36.050 --> 00:10:41.070
in the JavaScript industry Ryan Dahl,
stood up and in his dry wit

182
00:10:41.070 --> 00:10:45.880
way announced this new thing that he
had been creating called Node.js.

183
00:10:45.880 --> 00:10:47.720
And everybody flipped,
I mean we all went nuts.

184
00:10:47.720 --> 00:10:50.740
It was standing ovation, I mean,
it was crazy cuz everybody's so

185
00:10:50.740 --> 00:10:54.420
excited about this concept of getting
to write JavaScript on a server.

186
00:10:54.420 --> 00:10:57.700
And I'm like yeah that what I've been
working on for six months, we need this.

187
00:10:57.700 --> 00:11:00.720
Its an inevitability that we
wanna put JavaScript on a server.

188
00:11:01.810 --> 00:11:06.015
Within three months of Node.js coming out
and is hugely popular as it took off,

189
00:11:06.015 --> 00:11:10.033
I abandoned Bikechain cuz there was
absolutely no reason to keep trying to do

190
00:11:10.033 --> 00:11:12.060
something a different way.

191
00:11:12.060 --> 00:11:15.150
But the process of putting
JavaScript on a server

192
00:11:15.150 --> 00:11:18.170
regardless of how it actually done
the process is what I wanted.

193
00:11:18.170 --> 00:11:20.360
I wanted to be able to run
JavaScript on a server, and

194
00:11:20.360 --> 00:11:23.060
to this day that's how I
feel about JavaScript.

195
00:11:23.060 --> 00:11:27.400
I don't actually care that much about
Node, I'm not even all that emotionally

196
00:11:27.400 --> 00:11:32.010
wrapped up in this whole forking from
Note to IO thing that's happened.

197
00:11:32.010 --> 00:11:34.591
And whether they're gonna
come back together cuz for

198
00:11:34.591 --> 00:11:35.919
me Node is not a trademark.

199
00:11:35.919 --> 00:11:39.620
Node is not a command line,
Node is a category.

200
00:11:40.680 --> 00:11:45.010
It's a category of applications that
bring JavaScript out of the browser and

201
00:11:45.010 --> 00:11:49.130
put them in the place where I want
them which happens to be the server.

202
00:11:49.130 --> 00:11:54.800
It's a tool and I don't think that Node
and IO are the end of this tool chain.

203
00:11:54.800 --> 00:11:57.630
They are the first modern step
that we've had, by the way,

204
00:11:57.630 --> 00:11:58.460
they weren't the original.

205
00:11:58.460 --> 00:12:01.146
Do you know what the original
server site JavaScript was?

206
00:12:01.146 --> 00:12:05.470
1997, LiveScript Server from Netscape.

207
00:12:05.470 --> 00:12:08.000
Actually 96 is when it was
really kind of coming out.

208
00:12:08.000 --> 00:12:11.400
Brand new after JavaScript was
out had LiveScript server.

209
00:12:11.400 --> 00:12:15.380
Netscape was the original,
the OG of server side JavaScript.

210
00:12:15.380 --> 00:12:17.630
Of course, it's pretty awful and
nobody used it,

211
00:12:17.630 --> 00:12:22.778
but nonetheless concept of putting
JavaScript on a server is not new.

212
00:12:22.778 --> 00:12:26.640
But just in our modern age we
kind of think of Node as the big

213
00:12:26.640 --> 00:12:30.110
first step to modernizing
server site JavaScript.

214
00:12:30.110 --> 00:12:32.590
But it's not the last in my prediction.

215
00:12:32.590 --> 00:12:35.740
It's just the first big one that we
have seen in a while and we gonna

216
00:12:35.740 --> 00:12:39.570
see something that comes after it, might
be a year or two or three years from now.

217
00:12:39.570 --> 00:12:43.620
But there will be some new idea that comes
along, I'm anxious to see things like

218
00:12:43.620 --> 00:12:47.790
Firefox OS, which is JavaScript at
the kernel operating system level.

219
00:12:47.790 --> 00:12:51.830
I am anxious to see those things take over
where we don't need a user land process

220
00:12:51.830 --> 00:12:53.080
like Node to run,

221
00:12:53.080 --> 00:12:56.700
we can just run natively JavaScript any
part of our application if we want.

222
00:12:58.090 --> 00:13:01.170
So I think we're gonna
continue to see that evolve.

223
00:13:01.170 --> 00:13:04.780
And I don't get so wrapped up
in exactly what is Node doing or

224
00:13:04.780 --> 00:13:05.720
not doing, or whatever.

225
00:13:07.690 --> 00:13:11.241
Good question here,
somebody just putting a quote in.

226
00:13:11.241 --> 00:13:15.710
[COUGH]
So that's the little brief history

227
00:13:15.710 --> 00:13:19.250
lesson that gives you a perspective on
how I approach server site JavaScript.

228
00:13:19.250 --> 00:13:21.440
It's a tool that to
help me solve problems.

229
00:13:21.440 --> 00:13:26.450
The problems that I like to solve
are sharing code, not repeating myself,

230
00:13:26.450 --> 00:13:29.490
being able to do things in a buffered way.

231
00:13:29.490 --> 00:13:32.429
In other words, I wanna be able to do my
front-end completely separate from how I

232
00:13:32.429 --> 00:13:33.135
do the back-end.

233
00:13:33.135 --> 00:13:35.530
And that middle-end
architecture I referred to,

234
00:13:35.530 --> 00:13:39.110
the back-end essentially becomes
irrelevant to the front-end.

235
00:13:39.110 --> 00:13:42.151
The front-end never talks to the back-end,
it talks to the middle-end and

236
00:13:42.151 --> 00:13:43.990
the back-end never talks to the front-end.

237
00:13:43.990 --> 00:13:46.400
It has no clue what
the front-end is doing.

238
00:13:46.400 --> 00:13:50.590
Could be a mobile app, could be a website,
could be another API server,

239
00:13:50.590 --> 00:13:51.880
it doesn't care.

240
00:13:51.880 --> 00:13:55.350
The back-end simply becomes
a headless black box state machine.

241
00:13:56.410 --> 00:13:59.855
It manages the session, it knows what
state it's in, you give it some data,

242
00:13:59.855 --> 00:14:01.131
it gives you some data back.

243
00:14:01.131 --> 00:14:05.141
And that was attractive to me, cuz I
didn't wanna have to relearn every single

244
00:14:05.141 --> 00:14:08.301
back-end system to figure out
how to manage the headers, and

245
00:14:08.301 --> 00:14:10.820
the cookies, the HTML files and
all that stuff.

246
00:14:10.820 --> 00:14:14.480
I just want you to give me some data,
I'll figure out the presentation layer,

247
00:14:14.480 --> 00:14:16.750
that's the job of the middle-end.

248
00:14:16.750 --> 00:14:21.220
So even though today I'm not going to
espouse specifically this middle-end

249
00:14:21.220 --> 00:14:24.130
architecture, I just want you
to have that as the backdrop for

250
00:14:24.130 --> 00:14:26.670
what I'm talking about
when we go into this code.

