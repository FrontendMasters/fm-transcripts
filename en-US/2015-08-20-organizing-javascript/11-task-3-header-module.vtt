WEBVTT

1
00:00:00.000 --> 00:00:03.626
[MUSIC]

2
00:00:03.626 --> 00:00:05.565
&gt;&gt; Kyle Simpson: Now task 3.

3
00:00:05.565 --> 00:00:07.484
Now that we've done
some stuff with jQuery,

4
00:00:07.484 --> 00:00:09.170
we've gotten some things loaded up.

5
00:00:09.170 --> 00:00:13.629
Task 3 then what we want to turn
our attention to is not adding new

6
00:00:13.629 --> 00:00:19.429
functionality to the app but reorganizing
the way the existing functionality is.

7
00:00:19.429 --> 00:00:23.311
So, if up to this point, you felt like,
you're a little bit overwhelmed

8
00:00:23.311 --> 00:00:26.239
with the jQuery stuff or
maybe your stuff is not working.

9
00:00:26.239 --> 00:00:31.180
I want to remind you that my best
suggestion is for you to grab the contents

10
00:00:31.180 --> 00:00:36.292
of task two and just overwrite your
files with all the contents of task two.

11
00:00:36.292 --> 00:00:39.238
So that you're in a clean
fresh environment cuz for

12
00:00:39.238 --> 00:00:42.320
task 3, I really do think
this perhaps one of the most

13
00:00:42.320 --> 00:00:45.555
important parts of all
the exercises that we've done.

14
00:00:45.555 --> 00:00:50.247
Is to get our heads around how
to use organization techniques

15
00:00:50.247 --> 00:00:54.280
like the module pattern
to arrange our code.

16
00:00:54.280 --> 00:00:59.250
So the first task here shows us that we
have it tells us to open up these three

17
00:00:59.250 --> 00:01:04.300
files and we want to use the module
pattern to expose a module for

18
00:01:04.300 --> 00:01:05.810
each one of those files.

19
00:01:05.810 --> 00:01:10.760
So I'm gonna do the first file, and then
I'm going to leave you maybe ten minutes

20
00:01:10.760 --> 00:01:15.580
or so, for you to work on the second and
the third files.

21
00:01:15.580 --> 00:01:18.451
And you'll do exactly the same thing,
so it'll be the same pattern.

22
00:01:18.451 --> 00:01:22.560
But I'll show you how to do the first one,
and then I'll let you.

23
00:01:22.560 --> 00:01:26.380
So [COUGH] let's work on the header.

24
00:01:26.380 --> 00:01:30.010
I'll open up back up header.js.

25
00:01:30.010 --> 00:01:34.080
And I'll do header, and then you can do
the carousel and the details ones, okay?

26
00:01:35.480 --> 00:01:37.990
Again, we're not gonna add
any new functionality.

27
00:01:37.990 --> 00:01:40.210
We're just gonna reorganize
this functionality.

28
00:01:40.210 --> 00:01:45.470
So the observation that we can make
about header.js Is that all of the stuff

29
00:01:45.470 --> 00:01:49.850
that we see here is happening
out in the global scope.

30
00:01:49.850 --> 00:01:52.270
There's a document ready that's
happening in the global scope.

31
00:01:52.270 --> 00:01:53.650
If the document ready wasn't there.

32
00:01:53.650 --> 00:01:56.250
This variable would be a global variable.

33
00:01:56.250 --> 00:02:00.235
That's the sort of code smell that we
want to try to avoid because there's no

34
00:02:00.235 --> 00:02:02.054
organization around this at all.

35
00:02:02.054 --> 00:02:04.326
It's just in its own separate file but

36
00:02:04.326 --> 00:02:08.302
beyond that there's no nice clean
interface for it will could have

37
00:02:08.302 --> 00:02:12.990
accidental overlap with other functions
and variables and things like that.

38
00:02:12.990 --> 00:02:17.440
So we typically wanna avoid
as much as possible any kind

39
00:02:17.440 --> 00:02:21.870
of stuff happening out in the global scope
which is one of the really best benefits

40
00:02:21.870 --> 00:02:24.950
of the module pattern is how easy
you'll see in just a moment.

41
00:02:24.950 --> 00:02:29.693
How easy it is for us to take what we
would call just sort of global blah

42
00:02:29.693 --> 00:02:34.789
spaghetti code and reform it into
something that's more well defined.

43
00:02:34.789 --> 00:02:38.310
That's really the main point
of the module pattern.

44
00:02:38.310 --> 00:02:41.970
So I'm going to do this file and
then you take over and do the other two.

45
00:02:41.970 --> 00:02:45.850
Okay the first thing that we
want [COUGH] is we're gonna want

46
00:02:45.850 --> 00:02:48.300
a thing to represent our module,
a variable.

47
00:02:48.300 --> 00:02:50.080
So I'm gonna call mine capital H, Header.

48
00:02:51.940 --> 00:02:55.630
Now I'm going to wrap a function
around all the contents

49
00:02:57.370 --> 00:03:02.350
of what's happening here as my first step.

50
00:03:05.230 --> 00:03:08.140
And the interesting thing
about doing that though

51
00:03:08.140 --> 00:03:11.650
Is that I've wrapped the function around
it but, that function has not run yet.

52
00:03:13.360 --> 00:03:15.030
Okay, It's just a function that's wrapped.

53
00:03:15.030 --> 00:03:16.487
But, if we want that function to execute.

54
00:03:16.487 --> 00:03:19.730
We actually need to execute
that function expression.

55
00:03:21.210 --> 00:03:24.120
Which the most common way of doing that,

56
00:03:24.120 --> 00:03:26.670
we didn't go over this explicitly
it's covered in the book.

57
00:03:26.670 --> 00:03:28.670
Is to put a set of
parentheses around that and

58
00:03:28.670 --> 00:03:31.600
then another parentheses set on the end.

59
00:03:31.600 --> 00:03:36.322
That final parentheses set down there
is the most critical part cuz that

60
00:03:36.322 --> 00:03:38.609
actually executes our function.

61
00:03:38.609 --> 00:03:41.887
And this pattern, by the way,
if you're doing Google searching or

62
00:03:41.887 --> 00:03:45.235
looking in the book,
this is called the IIFE pattern, I-I-F-E.

63
00:03:46.470 --> 00:03:51.720
IIFE stands for
immediately invoked function expression.

64
00:03:53.730 --> 00:03:56.710
We're a super creative bunch in the
JavaScript world we come up with really

65
00:03:56.710 --> 00:03:58.260
creative names for stuff.

66
00:03:58.260 --> 00:04:01.280
It's a function expression
that we immediately invoke.

67
00:04:01.280 --> 00:04:02.240
So we call it the IIFE.

68
00:04:03.620 --> 00:04:04.120
Okay?

69
00:04:05.380 --> 00:04:08.089
So I got an IIFE function that
wraps around and runs stuff.

70
00:04:10.230 --> 00:04:14.477
Now inside of it, I don't want
this document ready stuff here.

71
00:04:14.477 --> 00:04:18.096
So I'm gonna take temporarily I'm gonna
take the document ready part, and

72
00:04:18.096 --> 00:04:22.190
I'm gonna move it outside of my module and
we'll come back to that in a minute, okay?

73
00:04:22.190 --> 00:04:28.830
So I'll take that one and
that one, put those down here.

74
00:04:28.830 --> 00:04:30.049
We'll come back to those in a little bit.

75
00:04:30.049 --> 00:04:34.877
Now this code if we try to define
what is this code doing it's

76
00:04:34.877 --> 00:04:41.370
essentially the initialization code for
our header module right.

77
00:04:41.370 --> 00:04:47.558
So we could take function init.

78
00:04:47.558 --> 00:04:51.743
Call it init and wrap a function
declaration around all of that

79
00:04:51.743 --> 00:04:56.652
code.
&gt;&gt; Kyle Simpson: Did everybody follow

80
00:04:56.652 --> 00:05:01.814
that?
&gt;&gt; Kyle Simpson: And

81
00:05:01.814 --> 00:05:05.591
then we could observe that we've
got an inline function here.

82
00:05:05.591 --> 00:05:09.195
Which isn't really buying anything
it's actually more complex to look at

83
00:05:09.195 --> 00:05:10.120
the code that way.

84
00:05:10.120 --> 00:05:14.548
So I'm gonna take that function and
not make it be a callback expression.

85
00:05:14.548 --> 00:05:20.751
I'm gonna move it out and
have it be its own separate function,

86
00:05:20.751 --> 00:05:28.143
which I might call headerLinkClicks,
just making up names at this point.

87
00:05:28.143 --> 00:05:31.464
Okay, so, that code I'll put in here.

88
00:05:49.541 --> 00:05:51.300
&gt;&gt; Kyle Simpson: So
this is my init function.

89
00:05:52.530 --> 00:05:57.550
And I need to call, what I'd call
that function, headerLinkClicks?

90
00:05:57.550 --> 00:05:59.963
That's the name I need to pass for
my callback.

91
00:06:05.105 --> 00:06:06.789
&gt;&gt; Kyle Simpson: Now this modal variable,

92
00:06:06.789 --> 00:06:11.609
you can see it's being declared inside
of init, but it's now being used in

93
00:06:11.609 --> 00:06:15.990
a different function and
everybody see why that would be a problem?

94
00:06:17.600 --> 00:06:22.140
It's being used inside of
the headerLinkClicks function but

95
00:06:22.140 --> 00:06:24.250
it's only been declared inside of a init.

96
00:06:24.250 --> 00:06:25.230
There's a simple fix.

97
00:06:26.250 --> 00:06:32.920
Take the var part out and instead,
make it something that's available to

98
00:06:32.920 --> 00:06:39.080
all the functions here by making it
a module level variable decoration.

99
00:06:39.080 --> 00:06:42.954
Still assign it inside of here, but now
when I declare it there now it's available

100
00:06:42.954 --> 00:06:52.649
to all of my inner functions.
&gt;&gt; Kyle Simpson: Questions on that,

101
00:06:52.649 --> 00:06:54.999
do you see that how that works,
how that part works?

102
00:06:59.260 --> 00:07:03.680
Now the last step is that this
module needs a public API right.

103
00:07:04.850 --> 00:07:07.540
So I need to do a return
statement with an object.

104
00:07:10.660 --> 00:07:15.062
And what do I

105
00:07:15.062 --> 00:07:20.784
need to put on my

106
00:07:20.784 --> 00:07:25.636
public API?

107
00:07:25.636 --> 00:07:29.459
I need to put a reference
to that init function.

108
00:07:36.367 --> 00:07:37.383
&gt;&gt; Kyle Simpson: Does that look familiar

109
00:07:37.383 --> 00:07:39.107
from the stuff that we
did about an hour or

110
00:07:39.107 --> 00:07:41.720
two ago we did earlier this
afternoon after the lunch break?

111
00:07:43.540 --> 00:07:48.050
We have inner stuff, these inner functions
and inner variables and here Is where we

112
00:07:48.050 --> 00:07:57.271
declare our public API.
&gt;&gt; Kyle Simpson: So,

113
00:07:57.271 --> 00:07:59.212
the thing I want you to get, and

114
00:07:59.212 --> 00:08:04.156
I'm gonna again use the trick of code
folding to make this more visible to you.

115
00:08:04.156 --> 00:08:07.670
I'm gonna take that internal
code just temporarily.

116
00:08:07.670 --> 00:08:09.640
I'm going to code fold it.

117
00:08:11.010 --> 00:08:15.930
So you don't have to look at it and
what I want you to see here is that header

118
00:08:16.930 --> 00:08:19.530
is now going to reference
that object that we returned.

119
00:08:19.530 --> 00:08:21.921
Does everybody see that part?

120
00:08:21.921 --> 00:08:26.370
That object that we return gets assigned
to a variable called header which means on

121
00:08:26.370 --> 00:08:27.880
the outside.

122
00:08:27.880 --> 00:08:28.470
What can we do?

123
00:08:30.150 --> 00:08:36.690
We can call header.init, right, which is
what we wanna pass the document.ready.

124
00:08:36.690 --> 00:08:40.187
We just wanna pass a reference
to the header.init

125
00:08:40.187 --> 00:08:44.532
function.
&gt;&gt; Kyle Simpson: Remember I'm not calling

126
00:08:44.532 --> 00:08:47.617
init, so
I'm not putting the parentheses here.

127
00:08:47.617 --> 00:08:51.923
I'm just passing a reference to the
function so that jQuery will run it later.

128
00:09:11.616 --> 00:09:12.435
&gt;&gt; Kyle Simpson: Kevin is asking

129
00:09:12.435 --> 00:09:15.900
a question versus the other way
shown earlier can you be more clear

130
00:09:15.900 --> 00:09:18.110
on what other way you're talking about.

131
00:09:21.590 --> 00:09:22.090
Okay.

132
00:09:25.630 --> 00:09:30.020
If I save this file which I will and
I rerun my program,

133
00:09:30.020 --> 00:09:35.680
I just refresh my page and verify that
my register link still works correctly.

134
00:09:35.680 --> 00:09:37.930
And my login link still works correctly.

135
00:09:39.900 --> 00:09:42.720
That means I didn't change
any of my functionality.

136
00:09:42.720 --> 00:09:45.000
All I did was improve
the style of my code.

137
00:09:47.100 --> 00:09:50.220
Lets make some observations
about the style of my code.

138
00:09:50.220 --> 00:09:54.490
These functions no longer have
any potential to be public.

139
00:09:54.490 --> 00:09:56.479
These functions are now hidden privately.

140
00:09:57.660 --> 00:10:01.990
And the only thing that gets exposed
is this function, the init function.

141
00:10:01.990 --> 00:10:08.200
We exposed that publicly, but the var
modal variable it's not exposed publicly.

142
00:10:08.200 --> 00:10:10.566
It's hidden as a detail
inside of the module.

143
00:10:17.004 --> 00:10:18.423
&gt;&gt; Kyle Simpson: So the question in

144
00:10:18.423 --> 00:10:23.437
the chat room is, [COUGH] in
an earlier version today, you might

145
00:10:23.437 --> 00:10:30.344
remember that I just did something like,
&gt;&gt; Kyle Simpson: Function Header,

146
00:10:30.344 --> 00:10:32.530
or we called it function hello earlier.

147
00:10:33.870 --> 00:10:37.570
And instead of having that stuff down at
the bottom, it's just a normal function.

148
00:10:37.570 --> 00:10:45.390
And you might remember that I did
something like o = Hello() from earlier.

149
00:10:45.390 --> 00:10:48.730
So what I'm doing is combining
those two things into one step,

150
00:10:49.880 --> 00:10:53.170
instead of declaring a function and
then calling it once.

151
00:10:53.170 --> 00:10:56.230
If I only need one of it,
it's basically a singleton.

152
00:10:56.230 --> 00:10:57.610
If I only need one of it,

153
00:10:57.610 --> 00:11:01.550
I'm just combining those two steps instead
of declaring one and then calling it.

154
00:11:01.550 --> 00:11:05.320
I'm using the IIFE to declare and
call it all in one step.

