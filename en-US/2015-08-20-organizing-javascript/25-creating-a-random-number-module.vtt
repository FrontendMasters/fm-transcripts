WEBVTT

1
00:00:00.000 --> 00:00:03.901
[MUSIC]

2
00:00:03.901 --> 00:00:06.788
&gt;&gt; Kyle Simpson: But let's decide
that we want to make ourselves,

3
00:00:06.788 --> 00:00:11.462
just cause I'm not creative enough to come
up with something that we have time for

4
00:00:11.462 --> 00:00:14.090
that's like the secure phrase generation.

5
00:00:14.090 --> 00:00:17.510
So I'm just literally going to
create a random number module.

6
00:00:18.540 --> 00:00:20.320
Which does nothing but call math.random.

7
00:00:20.320 --> 00:00:23.887
But we're gonna illustrate again
this point of creating some code and

8
00:00:23.887 --> 00:00:31.294
using it in both places, okay.
&gt;&gt; Kyle Simpson: So what we wanna do

9
00:00:31.294 --> 00:00:37.456
is first come up here to our place where
I've got my hybrid server browser modules.

10
00:00:37.456 --> 00:00:40.370
And you notice I have one here that
I was kind of already a placeholder

11
00:00:40.370 --> 00:00:41.268
anticipation.

12
00:00:41.268 --> 00:00:45.043
So I'm just gonna uncomment that, we're
gonna call our random number thing Foo for

13
00:00:45.043 --> 00:00:49.447
now.
&gt;&gt; Kyle Simpson: So,

14
00:00:49.447 --> 00:00:55.580
uncomment that variable and then come
down here, I've got it commented out.

15
00:00:55.580 --> 00:00:59.860
You can uncomment that line which
is going to expect to find,

16
00:00:59.860 --> 00:01:04.149
as you see on line 67 there,
it's gonna expect to find a capital F,

17
00:01:04.149 --> 00:01:08.060
Foo.js file in the web JS directory.

18
00:01:08.060 --> 00:01:11.700
It's a place where I'm putting
my hybrid shared modules.

19
00:01:11.700 --> 00:01:14.060
That file doesn't exist but
we're gonna create it next.

20
00:01:16.830 --> 00:01:19.761
So I don't wanna retype
all that boilerplate code.

21
00:01:19.761 --> 00:01:24.322
So what I'm going to do is open
up one of those ones that already

22
00:01:24.322 --> 00:01:28.860
exists in that location so,
come to the JS directory.

23
00:01:28.860 --> 00:01:36.434
Let's see what's a good one to use,
let's use view.js just open up view.js.

24
00:01:36.434 --> 00:01:40.841
And let's take out the stuff in
the inner contents of view JS.

25
00:01:48.557 --> 00:01:49.274
&gt;&gt; Kyle Simpson: And save,

26
00:01:49.274 --> 00:01:52.380
don't save overview cuz you need it.

27
00:01:52.380 --> 00:01:57.633
Save as and duplicate it and
call it Foo.js.

28
00:02:02.763 --> 00:02:04.134
&gt;&gt; Kyle Simpson: One little minor change,

29
00:02:04.134 --> 00:02:08.243
you'll wanna make sure you do is change
that word view there on line 5 change it

30
00:02:08.243 --> 00:02:09.790
to the word Foo.

31
00:02:09.790 --> 00:02:12.669
So we get the proper naming for
our module.

32
00:02:17.250 --> 00:02:17.750
Okay.

33
00:02:18.800 --> 00:02:23.321
So from a perspective of defining
ourselves a module we wanna have

34
00:02:23.321 --> 00:02:27.111
some internal characteristics
inside of our module.

35
00:02:27.111 --> 00:02:31.274
And then we wanna have a public API that
we can interact with in some way with our

36
00:02:31.274 --> 00:02:32.230
module.

37
00:02:32.230 --> 00:02:37.185
So my internal characteristics are let's

38
00:02:37.185 --> 00:02:41.861
suggest that I have a function that I call

39
00:02:41.861 --> 00:02:46.961
random.
&gt;&gt; Kyle Simpson: And

40
00:02:46.961 --> 00:02:53.920
its job is to return me
a Math.random number.

41
00:02:53.920 --> 00:02:58.926
Okay.
&gt;&gt; Kyle Simpson: I

42
00:02:58.926 --> 00:03:01.760
know that's not terribly interesting.

43
00:03:01.760 --> 00:03:06.110
I'm just showing you the pattern for
how to create something that we can reuse.

44
00:03:06.110 --> 00:03:10.260
Now if you were not using the UMD
style if you wanted to write your code

45
00:03:10.260 --> 00:03:13.050
in CommonJS style in known.

46
00:03:13.050 --> 00:03:15.552
Or you wanted to write an AMD style.

47
00:03:15.552 --> 00:03:19.097
Then the only thing that would be
extra on top of what we're doing here,

48
00:03:19.097 --> 00:03:22.676
is that you'd need to
have browser of running.

49
00:03:22.676 --> 00:03:27.690
And browser would take your file much like
the templates are automatically converted.

50
00:03:27.690 --> 00:03:30.150
Browser if I would have a watch
that would take this file and

51
00:03:30.150 --> 00:03:33.160
automatically convert it to something
that would run in the browser.

52
00:03:33.160 --> 00:03:37.410
I just didn't want that step involved
in our thought processes today.

53
00:03:37.410 --> 00:03:39.280
And that's why I've chosen the UMD.

54
00:03:39.280 --> 00:03:42.550
But there's really no difference in
terms of the concept of what's happening

55
00:03:42.550 --> 00:03:43.510
on the inside.

56
00:03:43.510 --> 00:03:47.900
So we need a public API to express that or
to expose that function.

57
00:03:47.900 --> 00:03:49.790
So we'll call that public API random.

58
00:03:59.620 --> 00:04:05.400
Now I want to use that information on
both the server and on the client.

59
00:04:05.400 --> 00:04:08.600
I have a module now that's
being loaded in to my server.

60
00:04:08.600 --> 00:04:11.503
But I actually want to invoke it and
use it so

61
00:04:11.503 --> 00:04:14.577
I'm going to come back
to the server JS file.

62
00:04:14.577 --> 00:04:16.153
And I want to set up,

63
00:04:25.720 --> 00:04:26.800
&gt;&gt; Kyle Simpson: Trying to figure

64
00:04:26.800 --> 00:04:32.060
out the best place to put this I think
it's going to go right after load page.

65
00:04:32.060 --> 00:04:37.470
So right before the default route
we're gonna make a new route.

66
00:04:37.470 --> 00:04:41.779
Essentially, we're gonna make a foo API,
a foo API call.

67
00:04:41.779 --> 00:04:44.834
Okay, so I'm gonna say routes.stop push.

68
00:04:52.621 --> 00:04:53.675
&gt;&gt; Kyle Simpson: Putting away a little

69
00:04:53.675 --> 00:05:03.006
comment.
&gt;&gt; Kyle Simpson: And

70
00:05:03.006 --> 00:05:09.370
then this route Is a function
which we'll call the FooRoute.

71
00:05:10.440 --> 00:05:13.080
Takes a request object and
a response object.

72
00:05:14.490 --> 00:05:18.220
This is exactly the same sort of thing you
do if you were going to define a new route

73
00:05:18.220 --> 00:05:20.720
with express or
any of those other frameworks.

74
00:05:20.720 --> 00:05:23.750
You'd have to do some sort of
middleware handler for it.

75
00:05:23.750 --> 00:05:28.907
So that's what we're doing we're making a
little handler a little middleware for it.

76
00:05:28.907 --> 00:05:33.787
Now I need to figure out if the requests
that's come in is one that I recognize

77
00:05:33.787 --> 00:05:36.160
as being something that I want to do.

78
00:05:36.160 --> 00:05:40.919
So I'm gonna say if req.url,

79
00:05:40.919 --> 00:05:45.130
that's the incoming url,

80
00:05:45.130 --> 00:05:51.320
if It is equal to /Foo, the capital F.

81
00:05:51.320 --> 00:05:52.700
And for just good measure.

82
00:05:55.070 --> 00:05:58.576
Well no, let's just be simple,
req.url if it's /Foo.

83
00:05:58.576 --> 00:06:02.870
So that means we recognize that this
is a route that we want to handle.

84
00:06:02.870 --> 00:06:03.370
Okay.

85
00:06:04.750 --> 00:06:07.670
So what I'm going to do, then, is say

86
00:06:12.310 --> 00:06:17.460
and I'm going to invoke and
use my Foo module, so I have a Foo there

87
00:06:17.460 --> 00:06:24.210
that I can just say Foo.random on,
right, need to pull out a number.

88
00:06:26.850 --> 00:06:31.850
Since this is an API request,
basically what I need to do is

89
00:06:31.850 --> 00:06:35.320
package it up as a JSON and
send it back to the server.

90
00:06:35.320 --> 00:06:37.020
I mean send it back to the browser.

91
00:06:37.020 --> 00:06:41.544
Okay this is all node stuff so
basically what we're going to do is say,

92
00:06:41.544 --> 00:06:49.700
res.writeHead and

93
00:06:49.700 --> 00:06:53.240
we wanna give it the 200 status response.

94
00:06:53.240 --> 00:06:59.415
And then we wanna give it a Content-Type
header of application JSON.

95
00:07:09.078 --> 00:07:10.659
&gt;&gt; Kyle Simpson: And then I want to say

96
00:07:10.659 --> 00:07:15.480
res.end and
the final data that I'm wanna send along.

97
00:07:15.480 --> 00:07:22.779
I'm going to stringify an object
&gt;&gt; Kyle Simpson: Which

98
00:07:22.779 --> 00:07:28.299
has one property in it called answer
that has the value num that I created,

99
00:07:40.928 --> 00:07:41.900
&gt;&gt; Kyle Simpson: Is everybody following?

100
00:07:44.080 --> 00:07:44.580
Okay.

101
00:07:46.470 --> 00:07:50.170
So, that's going to package up a JSON
object with one property in it that has

102
00:07:50.170 --> 00:07:51.490
the response that we got.

103
00:07:51.490 --> 00:07:53.510
Now, I made this simple.

104
00:07:53.510 --> 00:07:57.422
This was a synchronous thing that I
could answer cuz it's just random number

105
00:07:57.422 --> 00:07:58.162
generation.

106
00:07:58.162 --> 00:08:02.051
Had that needed to be something
like a database request,

107
00:08:02.051 --> 00:08:07.316
which many real API calls do, we might
have been calling off to a Foo module and

108
00:08:07.316 --> 00:08:12.030
asking it to do some stuff and
waiting for it to respond.

109
00:08:12.030 --> 00:08:14.580
And it's that asynchronous process

110
00:08:14.580 --> 00:08:18.090
that we'd wanna invoke something
like a promise system so

111
00:08:18.090 --> 00:08:22.320
that it was clean and clear for us instead
of doing a bunch of nested call-backs.

112
00:08:22.320 --> 00:08:23.540
A promise system.

113
00:08:23.540 --> 00:08:28.520
So if instead of getting num back,
I had gotten a promise back,

114
00:08:28.520 --> 00:08:31.000
then I would have said
something like .then.

115
00:08:31.000 --> 00:08:35.630
And this code here would have been
inside of my .then cuz I would

116
00:08:35.630 --> 00:08:39.130
only want to run this when I
was finished with the promise.

117
00:08:39.130 --> 00:08:40.390
But we keeping things simple,

118
00:08:40.390 --> 00:08:44.440
we're not doing an asynchronous
module at the moment.

119
00:08:44.440 --> 00:08:46.799
So I just can manually get
that random number right

120
00:08:46.799 --> 00:08:50.131
away.
&gt;&gt; Kyle Simpson: And

121
00:08:50.131 --> 00:08:53.796
then these three lines of code are really,
I mean these four lines of code or

122
00:08:53.796 --> 00:08:55.380
really nothing special at all.

123
00:08:55.380 --> 00:08:57.270
That's exactly how node does it.

124
00:08:57.270 --> 00:09:00.012
It's exactly how any framework
out there sends out their

125
00:09:00.012 --> 00:09:06.447
responses.
&gt;&gt; Kyle Simpson: So

126
00:09:06.447 --> 00:09:12.168
the code from lines 186 to 189 is
code that doesn't need to be shared

127
00:09:12.168 --> 00:09:18.280
with the browser because it doesn't even
make any sense in a browser context.

128
00:09:19.620 --> 00:09:23.760
Talking about status codes and header
managements, none of that needs to be.

129
00:09:23.760 --> 00:09:28.540
But if there was something that we were
doing there that we would wanna share.

130
00:09:28.540 --> 00:09:32.623
We'd wanna offload that into
a module like we've offloaded Foo.

131
00:09:32.623 --> 00:09:33.696
Does everybody see that?

132
00:09:33.696 --> 00:09:36.650
So you wanna look for places where

133
00:09:36.650 --> 00:09:40.670
there is something that does make sense
to do in both and not repeat yourself.

134
00:09:41.680 --> 00:09:44.510
And the basic way that I'm
suggesting you go about that is,

135
00:09:44.510 --> 00:09:47.350
whenever there's something that
you wanna do in multiple places,

136
00:09:47.350 --> 00:09:50.820
that is, both places,
put it in its own module.

137
00:09:50.820 --> 00:09:53.210
And do it like I just showed you,
how we did that Foo.

138
00:09:53.210 --> 00:09:57.135
Put a little wrapper round it, or
invoke browser, fire or whatever,

139
00:09:57.135 --> 00:09:59.542
but put that code inside
of its own module.

140
00:09:59.542 --> 00:10:01.249
Here we just have this one touch point,

141
00:10:01.249 --> 00:10:06.981
this Foo.random that we wanna get.
&gt;&gt; Kyle Simpson: So we've essentially made

142
00:10:06.981 --> 00:10:11.906
ourselves a route for an API endpoint.
&gt;&gt; Kyle Simpson: But

143
00:10:11.906 --> 00:10:19.597
I wanna also.
&gt;&gt; Kyle Simpson: Actually that for

144
00:10:19.597 --> 00:10:21.330
now we'll just keep it simple.

145
00:10:21.330 --> 00:10:22.520
I keep trying to make it more complex.

146
00:10:22.520 --> 00:10:26.660
For now we'll just say our server
uses Foo through an API call.

