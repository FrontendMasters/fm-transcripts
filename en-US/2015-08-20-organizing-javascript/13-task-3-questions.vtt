WEBVTT

1
00:00:00.000 --> 00:00:04.099
[MUSIC]

2
00:00:04.099 --> 00:00:07.170
&gt;&gt; Kyle Simpson: The question was why
are we organizing things into modules?

3
00:00:08.750 --> 00:00:13.089
&gt;&gt; Speaker 2: To hide the internal stuff.

4
00:00:13.089 --> 00:00:15.300
&gt;&gt; Kyle Simpson: So the major reason for

5
00:00:15.300 --> 00:00:20.440
organizing things into modules
is if you zoom out and

6
00:00:20.440 --> 00:00:24.660
you don't pay any attention to those
internal details, or if you code fold and

7
00:00:24.660 --> 00:00:29.410
you ignore the internal details,
the major thing here

8
00:00:29.410 --> 00:00:34.650
is that we are able to declare private
internal details that's a function.

9
00:00:34.650 --> 00:00:37.870
That's a function, we've got a bunch
of private internal variables.

10
00:00:37.870 --> 00:00:41.950
We don't want to expose that
stuff to the outside world.

11
00:00:41.950 --> 00:00:46.500
If that stuff was global variables or
global functions, there's an extremely

12
00:00:46.500 --> 00:00:50.980
high chance that some other file
also declaring global variables or

13
00:00:50.980 --> 00:00:56.040
global functions could accidentally
override or collide with one of ours.

14
00:00:56.040 --> 00:00:59.738
So we don't want global variables
because of the high chance of collusion,

15
00:00:59.738 --> 00:01:04.540
the high chance of accidentally overriding
variables that we weren't intending to.

16
00:01:04.540 --> 00:01:07.974
Those are all negatives in code and
that's what most people refer

17
00:01:07.974 --> 00:01:11.790
to as kind of the wild,
wild west spaghetti coding of JavaScript.

18
00:01:11.790 --> 00:01:13.230
That's where everybody starts.

19
00:01:14.940 --> 00:01:17.550
As we're learning, we start putting
stuff in the global scope, but

20
00:01:17.550 --> 00:01:22.370
the next step of maturity is to
say I don't wanna put that stuff

21
00:01:22.370 --> 00:01:26.230
in the global scope,
I wanna wrap it up inside of a module.

22
00:01:26.230 --> 00:01:29.260
So I put this stuff inside of a module and

23
00:01:29.260 --> 00:01:33.100
then only the stuff that's
public needs to be public.

24
00:01:33.100 --> 00:01:38.040
So here, that carousel.init is the only
thing that needed to be public.

25
00:01:39.630 --> 00:01:43.510
All the rest of these details, these
functions and variables, all that stuff is

26
00:01:43.510 --> 00:01:47.680
private and there's no reason to expose it
to give us the potential for collision.

27
00:01:49.260 --> 00:01:54.825
The primary principle here is that
modules give us encapsulation

28
00:01:54.825 --> 00:01:59.488
which is a fancy $25 word for
saying private stuff,

29
00:02:05.670 --> 00:02:06.380
&gt;&gt; Kyle Simpson: Leslie asks,

30
00:02:06.380 --> 00:02:09.160
in most cases,
will our return be init init.

31
00:02:09.160 --> 00:02:12.460
Well, I've set up this example
that we're going through,

32
00:02:12.460 --> 00:02:15.610
this exercise today
artificially to look like that.

33
00:02:16.950 --> 00:02:20.850
Most of my modules have
several methods on the API.

34
00:02:20.850 --> 00:02:23.560
But our simple example that
we're going through here

35
00:02:23.560 --> 00:02:27.700
is just focusing on keeping as
much stuff private as possible.

36
00:02:27.700 --> 00:02:31.090
So we aren't seeing any examples yet,
although we will,

37
00:02:31.090 --> 00:02:34.419
we're not seeing any example yet
of any need for other public API stuff.

38
00:02:35.530 --> 00:02:42.770
This question says this closure pattern
looks to me like declaring a class.

39
00:02:42.770 --> 00:02:44.065
What's the main difference?

40
00:02:44.065 --> 00:02:46.810
Does the class handle the DOM and jQuery?

41
00:02:46.810 --> 00:02:50.910
So there's a bunch of different stuff in
that question that we don't wanna mix up.

42
00:02:50.910 --> 00:02:55.180
This code organization decision
about whether we use a module or

43
00:02:55.180 --> 00:02:59.850
whether we try to implement something
that looks like classes, has absolutely

44
00:02:59.850 --> 00:03:04.960
nothing to do with what we're dealing with
in the DOM or CSS or any of that stuff.

45
00:03:04.960 --> 00:03:06.880
It doesn't deal with jQuery or whatever.

46
00:03:06.880 --> 00:03:11.770
It's really just a question of how do we
organize our functions and variables.

47
00:03:11.770 --> 00:03:14.510
It's at the JavaScript level
that we're asking this question.

48
00:03:14.510 --> 00:03:16.580
It doesn't matter what
we put on top of it.

49
00:03:16.580 --> 00:03:21.740
So at the JavaScript level, the question
is, is the module my better hammer,

50
00:03:21.740 --> 00:03:25.740
or is the class thing that people try
to do in JavaScript my better hammer?

51
00:03:26.810 --> 00:03:31.570
And I could make a dozen different
observations about differences, but

52
00:03:31.570 --> 00:03:35.320
the major one that I'll make an
observation about here is that the thing

53
00:03:35.320 --> 00:03:41.250
that people call classes in JavaScript
does not offer any notion of privacy.

54
00:03:41.250 --> 00:03:45.150
Everything in a quote unquote
class in JavaScript is public.

55
00:03:46.790 --> 00:03:51.870
By default, everything in a module
as we're seeing here is private, and

56
00:03:51.870 --> 00:03:53.400
you get to decide what to make public.

57
00:03:53.400 --> 00:03:55.490
So that's the first, probably biggest,

58
00:03:55.490 --> 00:03:57.810
observation that I could
make about the differences,

59
00:03:57.810 --> 00:04:00.930
although there are dozens of other
differences that we could go into.

60
00:04:02.344 --> 00:04:05.860
There are some comments being made about
it's not really classical inheritance.

61
00:04:05.860 --> 00:04:07.880
Yeah, I'm not a class fan at all.

62
00:04:07.880 --> 00:04:08.840
I don't like classes.

63
00:04:08.840 --> 00:04:10.090
I definitely don't like them for

64
00:04:10.090 --> 00:04:14.650
JavaScript because JavaScript doesn't
really actually have classes.

65
00:04:14.650 --> 00:04:19.230
And I do in my advanced course as
well as in my object prototypes book,

66
00:04:19.230 --> 00:04:23.010
I do go through what I
call classless objects.

67
00:04:23.010 --> 00:04:24.780
It's a way of defining objects and

68
00:04:24.780 --> 00:04:28.030
using prototype delegation without
the notion of classes at all.

69
00:04:28.030 --> 00:04:31.680
I think that's a much better
way of going about it.

70
00:04:31.680 --> 00:04:36.660
The little catch phrase that I have for
it, instead OO which is what people

71
00:04:36.660 --> 00:04:40.790
mean when they say object oriented
programming, instead of OO,

72
00:04:40.790 --> 00:04:47.120
I coined the phrase OLOO which stands for
objects linked to other objects.

73
00:04:47.120 --> 00:04:48.534
So there is a pattern for

74
00:04:48.534 --> 00:04:53.505
dealing with objects that doesn't bring
any of the complexity of classes into it.

75
00:04:57.173 --> 00:05:01.120
&gt;&gt; Kyle Simpson: The question was asked
what scenarios makes sense to ever pass in

76
00:05:01.120 --> 00:05:03.080
a parameter to an IIFE?

77
00:05:03.080 --> 00:05:03.920
That's a great question,

78
00:05:03.920 --> 00:05:06.450
it's outside of our exercise but
it's a good enough question.

79
00:05:06.450 --> 00:05:08.630
Let me take a quick little side note.

80
00:05:08.630 --> 00:05:12.020
So set our exercise aside for
just a moment.

81
00:05:12.020 --> 00:05:15.020
Let's pretend you're not even going
to deal with the module design,

82
00:05:15.020 --> 00:05:18.160
you just have a bunch of stuff in
a file a bunch of random functions and

83
00:05:18.160 --> 00:05:23.340
variables in a file and you wanna organize
that file so that stuff isn't global.

84
00:05:23.340 --> 00:05:25.870
Well the easiest way to do
that is to have an IIFE

85
00:05:25.870 --> 00:05:29.220
wrapping around the entire
contents of your file.

86
00:05:29.220 --> 00:05:32.838
So you start the IIFE at the top,
you end the IIFE at the bottom and

87
00:05:32.838 --> 00:05:34.584
all your spaghetti goes here.

88
00:05:37.411 --> 00:05:38.270
&gt;&gt; Kyle Simpson: Okay?

89
00:05:38.270 --> 00:05:41.910
And in the early days of me learning
JavaScript, this was the most important

90
00:05:41.910 --> 00:05:45.850
thing I did was just go through and
find all of my files that I had a bunch of

91
00:05:45.850 --> 00:05:50.490
global stuff, and wrap an IIFE around
the entire contents of the file, so

92
00:05:50.490 --> 00:05:53.140
that stuff's private inside of
a function instead of public.

93
00:05:54.140 --> 00:05:58.790
Now, some stuff needs to be public,

94
00:05:58.790 --> 00:06:01.670
otherwise there would be no point to
any of the contents of that file.

95
00:06:01.670 --> 00:06:04.840
If none of it's being accessed anywhere,
then that whole file is pointless and

96
00:06:04.840 --> 00:06:06.420
you should just delete it.

97
00:06:06.420 --> 00:06:10.280
So let's imagine that I have 100
different variables and functions and

98
00:06:10.280 --> 00:06:14.680
I wrap a big IIFE around all
the contents in that file, and

99
00:06:14.680 --> 00:06:18.945
then I try to run my program and
I notice that two of them are breaking.

100
00:06:18.945 --> 00:06:23.800
The other 98 of them aren't
ever accessed anywhere else.

101
00:06:23.800 --> 00:06:28.875
But what I've concluded then is that I got
98 things which ought to be private and

102
00:06:28.875 --> 00:06:31.200
2 things which ought to be public.

103
00:06:31.200 --> 00:06:33.490
This isn't even asking
the question about modules,

104
00:06:33.490 --> 00:06:36.960
it's just asking a question
about access of variables.

105
00:06:36.960 --> 00:06:39.910
So let's imagine I had 98
private things here and

106
00:06:39.910 --> 00:06:42.889
I'd just leave those 98 private
things completely alone.

107
00:06:43.930 --> 00:06:49.226
All right, the two things that did need
to be made public, I could easily make

108
00:06:49.226 --> 00:06:54.378
them public by just simply adding them
as references on the window object.

109
00:06:54.378 --> 00:06:57.465
So I could say something, if there
was a thing called foo in here and

110
00:06:57.465 --> 00:07:00.570
I needed to make that public,
I could say window.foo equals foo.

111
00:07:00.570 --> 00:07:06.130
And if there was another one called bar,
I could say window.bar equals bar.

112
00:07:06.130 --> 00:07:11.220
That makes references on the global object
to these internal private things and

113
00:07:11.220 --> 00:07:15.535
that makes them accessible to the outside
world, just like they were before.

114
00:07:15.535 --> 00:07:21.361
So 98 different things stay private,
these things get public.

115
00:07:26.274 --> 00:07:28.555
&gt;&gt; Kyle Simpson: And
now the question back at hand was,

116
00:07:28.555 --> 00:07:32.023
what scenarios would I ever
pass something into an IIFE?

117
00:07:32.023 --> 00:07:33.270
Well, here's where I would do it.

118
00:07:35.340 --> 00:07:38.450
Because an IIFE is just a regular
function call, I can pass stuff in.

119
00:07:38.450 --> 00:07:42.490
So I could pass the window object in,
but stylistically,

120
00:07:42.490 --> 00:07:45.220
I don't like using the window object name.

121
00:07:45.220 --> 00:07:49.510
It doesn't really speak to me
from a JavaScript perspective.

122
00:07:49.510 --> 00:07:51.460
It's a DOM thing, but
it's not a JavaScript thing.

123
00:07:51.460 --> 00:07:54.550
From a JavaScript perspective,
I'd like to give it the name global.

124
00:07:55.720 --> 00:08:00.100
So if I have a parameter name of global
and I pass window in as an argument to it,

125
00:08:00.100 --> 00:08:04.098
essentially, global becomes an alias for
the window object.

126
00:08:04.098 --> 00:08:08.580
And now inside of my code anywhere
that I need to do global stuff,

127
00:08:08.580 --> 00:08:11.220
I use the word global
instead of the word window.

128
00:08:12.380 --> 00:08:15.510
This is purely a stylistic thing but
there what that does for

129
00:08:15.510 --> 00:08:20.060
me is it now let's me visually
see the stuff that's global,

130
00:08:20.060 --> 00:08:23.570
publicly available versus
the stuff that stays private.

131
00:08:23.570 --> 00:08:25.788
If I see the word global anywhere,
I know that,

132
00:08:25.788 --> 00:08:28.517
it jumps out at me as a big neon sign,
that stuff is public.

133
00:08:30.641 --> 00:08:34.082
&gt;&gt; Kyle Simpson: Finally, I would mention
that especially in the jQuery world, when

134
00:08:34.082 --> 00:08:38.353
people deal with multiple frameworks being
on a page, it's very common for somebody

135
00:08:38.353 --> 00:08:42.502
to say well, I got some stuff from jQuery
that I want, some stuff from prototypes,

136
00:08:42.502 --> 00:08:47.220
some stuff from dojo, whatever, and they
pull in a bunch of different frameworks.

137
00:08:47.220 --> 00:08:50.400
And the problem is that most of those
libraries and frameworks try to use

138
00:08:50.400 --> 00:08:55.700
the same dollar sign symbol for their
main function, which is pretty annoying.

139
00:08:55.700 --> 00:08:59.060
And it means that dollar sign
essentially becomes unusable

140
00:08:59.060 --> 00:09:01.750
because you don't know who was
the last one to point to it.

141
00:09:02.980 --> 00:09:09.330
And so a way to solve that is to pass in
the jQuery object for example, by name.

142
00:09:09.330 --> 00:09:11.900
Of course, I never wanna type jQuery.

143
00:09:11.900 --> 00:09:15.540
That's like the worst
variable name ever invented.

144
00:09:15.540 --> 00:09:20.330
I don't wanna type that cuz I'm gonna mess
up the capitalization a thousand times in

145
00:09:20.330 --> 00:09:26.245
my code, but if I pass it once by name and
I give the parameter alias dollar sign,

146
00:09:26.245 --> 00:09:31.000
now inside of this IIFE,
from lines two through nine,

147
00:09:31.000 --> 00:09:35.660
all of these hundreds of functions can use
dollar sign reliably because we know for

148
00:09:35.660 --> 00:09:39.290
sure that inside of this IIFE,
the dollar sign always points to jQuery.

149
00:09:41.600 --> 00:09:44.749
Those are the two major reasons
why I pass stuff into IIFEs.

150
00:09:46.130 --> 00:09:48.232
So hopefully, that answers that question.

151
00:09:48.232 --> 00:09:49.133
Next question.

152
00:09:51.824 --> 00:09:55.739
&gt;&gt; Kyle Simpson: To what extent is
Document Ready necessary just to get

153
00:09:55.739 --> 00:09:56.610
practice?

154
00:09:56.610 --> 00:09:58.170
That is a really good question.

155
00:09:58.170 --> 00:10:01.430
So you'll notice that I am using
Document Ready all over the place.

156
00:10:01.430 --> 00:10:06.090
There's an awful lot of information
out there on the web which says if

157
00:10:06.090 --> 00:10:10.310
you put your script tags at the bottom
of your body, which I have done here,

158
00:10:10.310 --> 00:10:13.540
there is a lot of people out there
on the web that claim you don't

159
00:10:13.540 --> 00:10:16.930
need a document ready event,
because by the time your script runs,

160
00:10:16.930 --> 00:10:19.480
your document's already done parsing.

161
00:10:19.480 --> 00:10:21.110
That's the claim.

162
00:10:21.110 --> 00:10:25.350
That claim is false even
though most of the time,

163
00:10:25.350 --> 00:10:27.230
it accidentally turns out to be true.

164
00:10:28.730 --> 00:10:33.060
Technically, the DOM is not
necessarily guaranteed to be complete

165
00:10:33.060 --> 00:10:35.470
even though many times,
it often is complete.

166
00:10:36.470 --> 00:10:41.400
So basically what I suggest is,
don't assume anything.

167
00:10:41.400 --> 00:10:45.720
The reason the document ready
event exists, it's sole reason for

168
00:10:45.720 --> 00:10:50.360
existence is to allow you to wait until
you're sure that the document is ready,

169
00:10:50.360 --> 00:10:51.360
that's why it's called that.

170
00:10:52.380 --> 00:10:55.550
So don't assume that it's ready
until that event has fired.

171
00:10:56.730 --> 00:11:00.750
As a side note on that, there's an awful
lot of stuff that we do in our apps

172
00:11:00.750 --> 00:11:04.550
that doesn't care about the DOM and
people still wrap

173
00:11:04.550 --> 00:11:08.850
that stuff up in a Document Ready which
is kind of an anti-pattern actually.

174
00:11:08.850 --> 00:11:10.260
You're waiting unnecessarily.

175
00:11:10.260 --> 00:11:12.450
For example,
let's say you need to make an Ajax call.

176
00:11:13.490 --> 00:11:16.110
Ajax doesn't deal with the DOM at all.

177
00:11:16.110 --> 00:11:20.690
There's no reason to put an Ajax call
inside of a document ready handler

178
00:11:20.690 --> 00:11:22.040
although that's where most people do it.

179
00:11:23.120 --> 00:11:27.630
So document ready specifically is for
any piece of logic

180
00:11:27.630 --> 00:11:31.720
that actually deals with the DOM
because if the DOM's not ready, you're

181
00:11:31.720 --> 00:11:35.158
playing wild wild west games risking
whether or not you can use it or not.

182
00:11:35.158 --> 00:11:38.638
Hopefully that answered that.

183
00:11:38.638 --> 00:11:39.774
Next question.

184
00:11:39.774 --> 00:11:42.897
The code we covered today is
compatible with all browsers?

185
00:11:42.897 --> 00:11:44.290
Yep, absolutely.

186
00:11:44.290 --> 00:11:47.930
Everything I'm talking about is
straight up simple JavaScript,

187
00:11:47.930 --> 00:11:54.660
we're not talking about any complex
patterns like ES6 or anything like that.

188
00:11:54.660 --> 00:11:58.010
Okay, can we use objects
as a parameter and

189
00:11:58.010 --> 00:12:00.520
then pass parameters
a property of the objects.

190
00:12:01.650 --> 00:12:02.410
Yeah absolutely.

191
00:12:02.410 --> 00:12:07.410
So the question is,
can I do something like,

192
00:12:07.410 --> 00:12:11.094
if I have a function called foo and

193
00:12:11.094 --> 00:12:16.636
he takes a parameter and
I call foo with an object.

194
00:12:21.071 --> 00:12:23.880
&gt;&gt; Kyle Simpson: Can I pass in
an object like that and reference it?

195
00:12:23.880 --> 00:12:25.250
Yeah absolutely you can.

196
00:12:25.250 --> 00:12:28.371
I can say o.name and
that will print out a column.

197
00:12:37.392 --> 00:12:40.616
&gt;&gt; Kyle Simpson: Kevin saying that
document ready is the same thing as DOM

198
00:12:40.616 --> 00:12:42.180
content loaded?

199
00:12:42.180 --> 00:12:43.180
Absolutely.

200
00:12:43.180 --> 00:12:47.500
Document ready, right now what it does,
is it waits to see if that event is fired.

201
00:12:47.500 --> 00:12:50.280
So they are synonymous for our purposes.

202
00:12:53.830 --> 00:12:56.360
Okay, great questions by the way.

203
00:12:56.360 --> 00:12:57.750
Thanks for asking all those.

204
00:12:59.600 --> 00:13:03.441
Yeah you can listen for DOM content
loaded by doing window.addEventListener.

205
00:13:03.441 --> 00:13:04.590
Absolutely.

206
00:13:04.590 --> 00:13:05.178
Okay.

207
00:13:09.644 --> 00:13:14.560
&gt;&gt; Kyle Simpson: Back to mental context,
switch back to our exercise.

208
00:13:15.880 --> 00:13:17.910
We're not complete with task three yet,
but

209
00:13:17.910 --> 00:13:20.480
we have made significant
progress on task three.

210
00:13:20.480 --> 00:13:22.510
Are there any questions so
far on task three?

211
00:13:22.510 --> 00:13:28.175
&gt;&gt; Speaker 3: In this case right,
like when we initially wrote,

212
00:13:28.175 --> 00:13:36.216
like we wrote all the functions
within like function.ready directly,

213
00:13:36.216 --> 00:13:41.384
right, all are function
scoped in this case.

214
00:13:41.384 --> 00:13:44.890
So there is no like global
variables getting exposed, right?

215
00:13:44.890 --> 00:13:47.225
&gt;&gt; Kyle Simpson: The only global
variable is this variable.

216
00:13:47.225 --> 00:13:49.850
&gt;&gt; Speaker 3: No, no, not.

217
00:13:49.850 --> 00:13:52.700
&gt;&gt; Kyle Simpson: We're essentially
treating these variables like namespaces.

218
00:13:54.530 --> 00:13:56.730
&gt;&gt; Speaker 3: No,
the way we wrote initially.

219
00:13:56.730 --> 00:13:59.252
&gt;&gt; Kyle Simpson: When everything
was inside of the document ready?

220
00:13:59.252 --> 00:14:01.890
At that time, if everything is
inside of the document ready, and

221
00:14:01.890 --> 00:14:03.610
it all also private, except for

222
00:14:03.610 --> 00:14:07.080
the fact that most of the stuff should
not have been in the document ready.

223
00:14:07.080 --> 00:14:11.130
That was the point that I made, that was
sort of the orthogonal point that I made

224
00:14:11.130 --> 00:14:15.580
which is, you don't want to put all
that stuff in a document ready.

225
00:14:15.580 --> 00:14:19.490
So if we had just said, I'm not even to
use modules, but I just want to refactor

226
00:14:19.490 --> 00:14:23.840
that original code to only put stuff there
that's necessary, then we would have been

227
00:14:23.840 --> 00:14:26.670
taking a bunch of variables and functions
and putting them out of the global scale.

228
00:14:26.670 --> 00:14:30.600
That's would have been
the only place to put it.

229
00:14:30.600 --> 00:14:33.660
&gt;&gt; Speaker 3: But like we wrapped
everything inside a function right,

230
00:14:33.660 --> 00:14:35.440
like when we declared inside a function,

231
00:14:35.440 --> 00:14:40.650
it just will be part of
that function scope, right?

232
00:14:40.650 --> 00:14:42.580
&gt;&gt; Kyle Simpson: Well,
what I'm suggesting to you is this.

233
00:14:42.580 --> 00:14:45.714
Let me open us the solutions
folder back for task one.

234
00:14:49.695 --> 00:14:53.751
&gt;&gt; Kyle Simpson: In this code, not all
of the stuff inside of here should be,

235
00:14:53.751 --> 00:14:56.350
like we have one thing that's outside

236
00:14:56.350 --> 00:15:00.522
this version of the file in
another document ready, right?

237
00:15:00.522 --> 00:15:01.022
So.

238
00:15:04.076 --> 00:15:06.332
&gt;&gt; Kyle Simpson: If this had had
the document ready like it should have,

239
00:15:06.332 --> 00:15:07.420
it should have said this.

240
00:15:11.489 --> 00:15:13.121
&gt;&gt; Speaker 3: Now when we write like this,

241
00:15:13.121 --> 00:15:16.454
everything these function
scoped within that function.

242
00:15:16.454 --> 00:15:17.424
&gt;&gt; Kyle Simpson: That is true, but

243
00:15:17.424 --> 00:15:21.759
the point I'm trying to make is that most
of this stuff, well not most of it, but

244
00:15:21.759 --> 00:15:25.479
some of this stuff doesn't need to
be inside of the document ready.

245
00:15:27.740 --> 00:15:31.910
This whole function thing here doesn't
need to be inside of a document ready

246
00:15:31.910 --> 00:15:35.760
because it's not gonna be called until
long after the document's already ready.

247
00:15:35.760 --> 00:15:40.470
So if I'd approached this file not
from first make it into a module

248
00:15:40.470 --> 00:15:44.440
rule where we just don't put stuff
in DOM ready that you shouldn't,

249
00:15:44.440 --> 00:15:48.420
the first step that I would have done is
to take that function and move it out

250
00:15:48.420 --> 00:15:52.920
of the document ready because that's
the more proper place for it, right?

251
00:15:54.380 --> 00:15:59.020
Now it's a function outside that
I reference by name and now,

252
00:15:59.020 --> 00:16:01.260
we're faced with this same
problem that I got us to.

253
00:16:01.260 --> 00:16:04.970
So I just combined both steps into one
rather than doing them separately.

254
00:16:04.970 --> 00:16:06.130
We come to the same conclusion,

255
00:16:06.130 --> 00:16:08.910
which is I don't want all that
stuff in the global scope.

256
00:16:08.910 --> 00:16:09.710
It's a good question.

257
00:16:09.710 --> 00:16:13.660
I just want to make sure you understand
I just did both steps at once.

258
00:16:13.660 --> 00:16:14.160
That make sense?

