WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:39.002 --> 00:00:43.270
&gt;&gt; Kyle Simpson: Basically, we're going
to kind of switch into chapter two mode.

3
00:00:43.270 --> 00:00:46.330
So, if you're following along,
you can switch into chapter two.

4
00:00:46.330 --> 00:00:51.160
And I'm gonna skip over some of
the initial parts of chapter two.

5
00:00:51.160 --> 00:00:55.810
Basically, the first half of chapter two
is kind of layering on extra details

6
00:00:55.810 --> 00:00:58.340
that we glossed over in chapter one.

7
00:00:58.340 --> 00:01:02.120
So, for example, this comparing values and
talking about coercion.

8
00:01:02.120 --> 00:01:05.095
I talk about it in more detail
here than I do in chapter one.

9
00:01:05.095 --> 00:01:07.039
There's even much more value,

10
00:01:07.039 --> 00:01:11.144
there's even much more detail than
that in the books in the series.

11
00:01:11.144 --> 00:01:12.493
So, these are just different layers.

12
00:01:12.493 --> 00:01:17.028
And so, without getting too much into the
weeds, I'll just say that if you want to

13
00:01:17.028 --> 00:01:21.370
spend some time going through chapter two,
this will definitely layer on more

14
00:01:21.370 --> 00:01:25.560
details for you about intricate
nuances of the JavaScript language.

15
00:01:25.560 --> 00:01:28.760
But we wanna focus on is
more towards the middle and

16
00:01:28.760 --> 00:01:31.680
second half of this chapter
where it starts to push some of

17
00:01:31.680 --> 00:01:34.260
our understanding these
features a little bit further.

18
00:01:34.260 --> 00:01:38.957
So in particular, I'll call your
attention to, for example, this example.

19
00:01:38.957 --> 00:01:44.553
Let me pull that out,
copy it over to a code editor.

20
00:01:44.553 --> 00:01:47.150
And I'm gonna zoom out just so
we can see all of it.

21
00:01:48.760 --> 00:01:53.338
Okay, so here what you see is I've
got an outer function called foo but

22
00:01:53.338 --> 00:01:56.064
I also have an inner function called bar.

23
00:01:56.064 --> 00:01:59.931
It's a thing that we haven't seen yet,
but it turns out that functions could be

24
00:01:59.931 --> 00:02:03.819
nested inside of other functions, and
you can keep going as deep as you need to.

25
00:02:03.819 --> 00:02:07.860
And that may seem like I'm not really
sure why that would be useful.

26
00:02:07.860 --> 00:02:09.600
There's lots of different places in

27
00:02:10.680 --> 00:02:15.080
complex JavaScript applications
where that sort of thing happens.

28
00:02:16.370 --> 00:02:20.429
So, here what we'll note is that
this function baz is declared and

29
00:02:20.429 --> 00:02:22.470
then I call baz here.

30
00:02:22.470 --> 00:02:28.000
But if I were to try to call baz down
here on line 16, I wouldn't be able to

31
00:02:28.000 --> 00:02:32.550
because that identifier, baz,
exists only inside of the scope of bar.

32
00:02:32.550 --> 00:02:36.479
Remember, we can't go down in scope,
we can only go upward in scope.

33
00:02:36.479 --> 00:02:39.445
So, here inside of the foo function,

34
00:02:39.445 --> 00:02:45.207
I would not have access to the baz that
only exists here and in these lines.

35
00:02:45.207 --> 00:02:46.952
But the reverse, I do have access.

36
00:02:46.952 --> 00:02:48.416
If I access the variable a,

37
00:02:48.416 --> 00:02:53.340
even though that's available two
levels up I'm still able to access it.

38
00:02:53.340 --> 00:02:57.430
So I can print 1, 2,
3 as I do here on line 10.

39
00:02:57.430 --> 00:03:01.846
So, this idea of nested scopes is actually
really really important to how we

40
00:03:01.846 --> 00:03:04.751
structure sophisticated
JavaScript programs.

41
00:03:04.751 --> 00:03:08.728
Particularly, not even the three
levels deep but particularly this,

42
00:03:08.728 --> 00:03:11.851
where we have one function
inside of another function.

43
00:03:11.851 --> 00:03:17.720
I kind of alluded earlier that that's kind
of the gateway into this topic of closure.

44
00:03:17.720 --> 00:03:21.860
So, another thing that we deal with in
chapter two is talking, motivating,

45
00:03:21.860 --> 00:03:24.880
what is this topic of closure and
why is it useful?

46
00:03:24.880 --> 00:03:27.030
Now this may look a little bit complex.

47
00:03:27.030 --> 00:03:30.590
I'm not gonna get into
the details of how closure works.

48
00:03:30.590 --> 00:03:35.920
I'm just going to illustrate what closure
does, so that you can observe it.

49
00:03:35.920 --> 00:03:40.520
So, what we wanna talk about with closure,
let me scroll down here to where closure's

50
00:03:40.520 --> 00:03:44.986
discussed.
&gt;&gt; Kyle Simpson: What we wanna talk about

51
00:03:44.986 --> 00:03:49.510
with closure is this example that I'll
use and I will build this example piece

52
00:03:49.510 --> 00:03:53.821
by piece for you
&gt;&gt; Kyle Simpson: So,

53
00:03:53.821 --> 00:03:57.548
I have a function here called makeAdder,

54
00:03:57.548 --> 00:04:03.090
that takes a single parameter,
let me zoom in slightly.

55
00:04:03.090 --> 00:04:04.200
This is makeAdder and

56
00:04:04.200 --> 00:04:09.190
it takes a single parameter,
could be like a number that we pass in.

57
00:04:09.190 --> 00:04:14.000
And you'll notice that inside I
declare another function called add.

58
00:04:14.000 --> 00:04:19.940
And inside of that, I reference both
the parameter y, which of course,

59
00:04:19.940 --> 00:04:25.020
I have access to the parameter y,
because it's a variable for me to use.

60
00:04:25.020 --> 00:04:29.620
But I also have access to x, because of
my scoping, because of my nested scoping.

61
00:04:29.620 --> 00:04:34.270
So, I make reference to both of those
variables in this add function.

62
00:04:35.410 --> 00:04:37.510
And then I do something rather peculiar,

63
00:04:37.510 --> 00:04:41.560
if you haven't seen this programming
technique before, which is that when I

64
00:04:41.560 --> 00:04:46.580
return a value from this makeAdder,
I don't return a number or

65
00:04:46.580 --> 00:04:50.720
a string or a Boolean,
I actually return the function itself.

66
00:04:52.240 --> 00:04:55.360
Remember, I said earlier that
functions are values and

67
00:04:55.360 --> 00:04:59.040
I showed very quickly that you
could sort of pass a function in.

68
00:04:59.040 --> 00:05:00.007
Well here, I'm doing the reverse.

69
00:05:00.007 --> 00:05:03.970
I'm returning a function back out.

70
00:05:03.970 --> 00:05:06.840
Now that won't look like
that makes much sense if

71
00:05:06.840 --> 00:05:09.180
this is your first time seeing it.

72
00:05:09.180 --> 00:05:12.140
Closure does take a while to get used to.

73
00:05:12.140 --> 00:05:15.870
But take my word for it, it's one of
the most powerful programming techniques

74
00:05:15.870 --> 00:05:18.170
across any programming language.

75
00:05:18.170 --> 00:05:23.107
And it is intrinsically one of the most
important things that you can learn about

76
00:05:23.107 --> 00:05:25.253
JavaScript specifically [COUGH].

77
00:05:25.253 --> 00:05:28.994
So, we'll just take for
granted that when we call a makeAdder,

78
00:05:28.994 --> 00:05:31.021
we're gonna get a function back.

79
00:05:31.021 --> 00:05:33.182
Let's not worry too much about
the implementation details.

80
00:05:33.182 --> 00:05:37.939
So, if I said something like makeAdder 5,

81
00:05:37.939 --> 00:05:42.500
the return value from that is a function.

82
00:05:42.500 --> 00:05:45.130
All right, so

83
00:05:45.130 --> 00:05:49.480
if I assign that to a variable like fn,
what I've gotten back is a function.

84
00:05:49.480 --> 00:05:51.190
A function that I can later call.

85
00:05:53.520 --> 00:05:56.120
And you remember,
let me switch back over here,

86
00:05:56.120 --> 00:05:59.050
you'll remember that makeAdder
expects one parameter.

87
00:05:59.050 --> 00:06:03.224
And the function that it gives
back expects another parameter,

88
00:06:03.224 --> 00:06:04.469
which we called y.

89
00:06:04.469 --> 00:06:09.034
So, here I know that if I could pass
something in, like for example,

90
00:06:09.034 --> 00:06:10.155
the value 10.

91
00:06:10.155 --> 00:06:14.941
What I know it's going to happen into
the scenes is that that 5 value that

92
00:06:14.941 --> 00:06:19.100
I initially passed in plus the 10
value that I just passed in,

93
00:06:19.100 --> 00:06:23.590
both of those get added together and
that return result comes back.

94
00:06:23.590 --> 00:06:27.060
So, if I say function 10,
what am I expecting back?

95
00:06:27.060 --> 00:06:31.660
15, you see, I didn't have to
pass in the 5 here because

96
00:06:31.660 --> 00:06:36.444
the function I got back already
is setup to remember the 5 from

97
00:06:36.444 --> 00:06:40.850
the initial call.
&gt;&gt; Kyle Simpson: All right,

98
00:06:40.850 --> 00:06:43.530
the mechanism looks a little weird and
mind bending.

99
00:06:43.530 --> 00:06:47.290
They took me months of trying to wrap my
head around it when I first learned it.

100
00:06:47.290 --> 00:06:49.610
So, don't feel bad if that
looks strange to you.

101
00:06:49.610 --> 00:06:52.700
But that is the essence of closure.

102
00:06:52.700 --> 00:06:54.460
People, if you've ever
heard that word before.

103
00:06:54.460 --> 00:06:55.950
If you've never heard the word before,

104
00:06:55.950 --> 00:06:58.130
it probably just sounds
like I'm talking nonsense.

105
00:06:58.130 --> 00:07:01.050
But there is this technique in
programming called closure.

106
00:07:01.050 --> 00:07:05.830
What it refers to is the fact
that this function, as a value,

107
00:07:05.830 --> 00:07:08.550
we haven't even called it yet, as a value,

108
00:07:08.550 --> 00:07:13.480
it is able to remember what was going
on in the place where it was created.

109
00:07:15.295 --> 00:07:18.425
Remember, it was created right here and

110
00:07:18.425 --> 00:07:21.585
the thing that it's able to remember
is that specific x variable.

111
00:07:23.685 --> 00:07:27.552
So, at the time we called it,
we passed in a 5 and that function now,

112
00:07:27.552 --> 00:07:30.553
from here on out,
no matter how many times we call it,

113
00:07:30.553 --> 00:07:33.386
if I say function 10,
then I'll get 15 back.

114
00:07:33.386 --> 00:07:37.657
If I later called function 20,
then I'd get what?

115
00:07:37.657 --> 00:07:38.574
&gt;&gt; Speaker 2: 25 there.

116
00:07:38.574 --> 00:07:39.919
&gt;&gt; Kyle Simpson: 25, no matter how many

117
00:07:39.919 --> 00:07:44.151
times I call that function it's always
gonna remember that initial thing that

118
00:07:44.151 --> 00:07:46.217
I passed in at the time it was created.

119
00:07:46.217 --> 00:07:50.181
And that's what we mean by closure.
&gt;&gt; Kyle Simpson: So,

120
00:07:50.181 --> 00:07:51.621
is there a question here?
&gt;&gt; Speaker 3: Yeah,

121
00:07:51.621 --> 00:07:53.685
there might have been a little
bit further back there.

122
00:07:53.685 --> 00:07:55.910
&gt;&gt; Kyle Simpson: Yeah, it's 10 y, yes.

123
00:07:55.910 --> 00:07:59.860
On this line 4, when I pass in 10, that's
getting assigned to the y parameter.

