WEBVTT

1
00:00:00.000 --> 00:00:03.687
[MUSIC]

2
00:00:03.687 --> 00:00:06.199
&gt;&gt; Kyle Simpson: Let's imagine that
I have some utility called Fu, and

3
00:00:06.199 --> 00:00:09.160
I'm not even going to
tell you what Fu does.

4
00:00:09.160 --> 00:00:12.460
But Fu does some work and
it doesn't finish right away.

5
00:00:14.280 --> 00:00:19.300
For example, there's a utility built
into JavaScript called setTimeout and

6
00:00:19.300 --> 00:00:23.270
we can pass something to setTimeout,
which is a function.

7
00:00:23.270 --> 00:00:26.330
And then we tell it how long we want
to wait before it runs that function.

8
00:00:28.310 --> 00:00:36.950
So if I had declared a function called
bar that prints out Hello World.

9
00:00:40.129 --> 00:00:43.498
&gt;&gt; Kyle Simpson: If I pass bar by name,
notice no parentheses there,

10
00:00:43.498 --> 00:00:48.091
if I pass bar by name, this utility,
at some point later in the future,

11
00:00:48.091 --> 00:00:52.780
1,000 milliseconds from now,
it's going to call that function.

12
00:00:54.350 --> 00:00:55.130
And print this out.

13
00:00:55.130 --> 00:01:02.487
So, everybody try this,
try typing that code into your console.

14
00:01:02.487 --> 00:01:06.340
Let me copy it over and show you.

15
00:01:06.340 --> 00:01:11.713
Let's try typing that
code in your console and

16
00:01:11.713 --> 00:01:17.773
running it, and
what you'll see is that it waits for

17
00:01:17.773 --> 00:01:23.166
a second, and
then it prints out Hello World.

18
00:01:47.359 --> 00:01:51.562
&gt;&gt; Kyle Simpson: So essentially what I'm
doing is I'm passing a function by its

19
00:01:51.562 --> 00:01:52.125
value.

20
00:01:52.125 --> 00:01:55.605
I'm not calling the function,
I'm passing the function value.

21
00:01:55.605 --> 00:01:58.014
Similar to how we returned
a function earlier,

22
00:01:58.014 --> 00:02:00.430
this is one where we're passing it in.

23
00:02:00.430 --> 00:02:07.250
Now this usage, passing a function as
a value, is often called callbacks.

24
00:02:07.250 --> 00:02:11.380
Because I'm passing a function in that
at some point later in the future, and

25
00:02:11.380 --> 00:02:14.730
I don't care when,
you're going to call back to my function.

26
00:02:15.910 --> 00:02:18.720
Sometimes you're just going to
execute it like we're seeing here.

27
00:02:18.720 --> 00:02:21.410
Sometimes you're going to call back and
you're going to pass me something.

28
00:02:22.570 --> 00:02:25.590
So, an example of that is, let's imagine,

29
00:02:25.590 --> 00:02:30.050
back here, that I have some utility
defined by a library called Ajax.

30
00:02:31.490 --> 00:02:34.410
And what Ajax takes is two parameters.

31
00:02:34.410 --> 00:02:40.160
So when I call it, I call Ajax, and
the first thing it expects is a URL.

32
00:02:43.880 --> 00:02:47.440
But the second parameter that
it expects is a function.

33
00:02:48.980 --> 00:02:51.590
Okay, now I'm going to name mine resp.

34
00:02:54.340 --> 00:02:59.050
So if I declare what that function
looks like, function resp

35
00:02:59.050 --> 00:03:04.670
is expecting some content
back from the Ajax request.

36
00:03:04.670 --> 00:03:05.449
And I'm going to print it.

37
00:03:09.681 --> 00:03:12.036
&gt;&gt; Kyle Simpson: So what's happening is,
I'm not calling resp,

38
00:03:12.036 --> 00:03:13.900
there's no parentheses here.

39
00:03:13.900 --> 00:03:17.465
I'm passing the resp in by reference,
by name, and

40
00:03:17.465 --> 00:03:21.192
at some later point after
the Ajax request finishes and

41
00:03:21.192 --> 00:03:25.729
it's got some content back,
it's going to call my function, and

42
00:03:25.729 --> 00:03:29.883
pass that content in so
that I'm going to be able to print it.

43
00:03:40.868 --> 00:03:44.213
&gt;&gt; Kyle Simpson: This isn't
directly related to closure, but

44
00:03:44.213 --> 00:03:48.929
it's actually related to one of
the base principles of closure,

45
00:03:48.929 --> 00:03:52.046
which is functions as first class values.

46
00:03:52.046 --> 00:03:55.800
That is, functions are a value,

47
00:03:55.800 --> 00:04:00.690
just like the number 42 is a value,
and the string Hello World is a value.

48
00:04:00.690 --> 00:04:05.650
They're all just values, and we can pass
values all around wherever we want to and

49
00:04:05.650 --> 00:04:07.880
we can return values wherever we want to.

50
00:04:07.880 --> 00:04:11.020
There's nothing special about
a function that makes it more or

51
00:04:11.020 --> 00:04:15.550
less capable as a value than
the number 42, does that make sense?

52
00:04:15.550 --> 00:04:18.390
It's just a value that we can pass around.

53
00:04:18.390 --> 00:04:22.240
So in this case, what we're saying is,
I don't have the response from that Ajax

54
00:04:22.240 --> 00:04:26.770
request yet, if I did have the response,
if it was an immediate thing like if it

55
00:04:26.770 --> 00:04:32.130
could happen right away, then I could just
say, var resp = ajax, I could just get it.

56
00:04:32.130 --> 00:04:35.490
But because Ajax is not
a blocking network request,

57
00:04:35.490 --> 00:04:38.110
it doesn't have the answer right away.

58
00:04:38.110 --> 00:04:41.730
And the way we then wait for
that answer is to pass in a call back.

59
00:04:43.860 --> 00:04:47.660
And that callback will get called back
at some later time with the answer that

60
00:04:47.660 --> 00:04:48.330
we were looking for.

61
00:04:51.780 --> 00:04:53.040
Asynchronous programming,

62
00:04:53.040 --> 00:04:56.640
which is essentially this is us
dipping our toe into that pool.

63
00:04:56.640 --> 00:05:00.790
Asynchronous programming is a
fantastically complex branch of JavaScript

64
00:05:00.790 --> 00:05:03.830
programming, and there's tons and
tons of stuff out there about it.

65
00:05:04.850 --> 00:05:07.360
Books that I've written and
many others have written.

66
00:05:07.360 --> 00:05:11.400
So we're not going to go any further
than just understanding this concept

67
00:05:11.400 --> 00:05:14.510
that if I pass a function in,
somebody can call it at a later time.

