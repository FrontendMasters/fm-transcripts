WEBVTT

1
00:00:00.000 --> 00:00:03.998
[MUSIC]

2
00:00:03.998 --> 00:00:08.014
&gt;&gt; Kyle Simpson: Let's go
to our About.grips.html,

3
00:00:08.014 --> 00:00:13.984
we're just going to be silly
about this particular page.

4
00:00:13.984 --> 00:00:17.665
I'm gonna take out that message
stuff that I was doing.

5
00:00:17.665 --> 00:00:21.806
In fact let's just take out the partial
entirely cuz that's more complexity than

6
00:00:21.806 --> 00:00:23.135
we really need right now.

7
00:00:23.135 --> 00:00:27.605
But what I do want is
I wanna be able to do,

8
00:00:27.605 --> 00:00:30.903
I wanna be able to have a button

9
00:00:38.181 --> 00:00:43.567
&gt;&gt; Kyle Simpson: That says gimme.

10
00:00:43.567 --> 00:00:47.085
We click this button we want
it to give us a random number

11
00:00:47.085 --> 00:00:53.043
back.
&gt;&gt; Kyle Simpson: I'll

12
00:00:53.043 --> 00:00:55.861
give it a little hook that I can use for
my JavaScript.

13
00:00:55.861 --> 00:00:59.285
I'd like to use the real attributes,

14
00:00:59.285 --> 00:01:03.996
some people like ideas,
I'm gonna use js-gimme.

15
00:01:03.996 --> 00:01:09.212
And then I'm gonna do one other
thing in this little element,

16
00:01:09.212 --> 00:01:11.529
I'm gonna put in a checkbox

17
00:01:25.642 --> 00:01:27.167
&gt;&gt; Kyle Simpson: With a label.

18
00:01:47.461 --> 00:01:48.512
&gt;&gt; Kyle Simpson: And let's start off with

19
00:01:48.512 --> 00:01:50.000
our checkbox being checked.

20
00:01:50.000 --> 00:01:52.430
So we'll start off by
defaulting it to local.

21
00:01:54.880 --> 00:01:57.250
So, some just simple basic HTML stuff.

22
00:01:57.250 --> 00:01:59.397
Now-
&gt;&gt; Speaker 2: You're

23
00:01:59.397 --> 00:02:02.499
returning label with an a.
&gt;&gt; Kyle Simpson: With an a instead of

24
00:02:02.499 --> 00:02:09.186
a label, thank you.
&gt;&gt; Kyle Simpson: All right,

25
00:02:09.186 --> 00:02:11.085
now, we haven't used any of that code yet,
but

26
00:02:11.085 --> 00:02:14.350
let's just double-check to make
sure I didn't fat finger something.

27
00:02:14.350 --> 00:02:16.010
Let's refresh our about, and we see,

28
00:02:16.010 --> 00:02:19.040
in fact,
a local checkbox with a gimme button.

29
00:02:19.040 --> 00:02:20.010
It doesn't do anything yet.

30
00:02:21.720 --> 00:02:24.950
So how do we make that
gimme button do something?

31
00:02:24.950 --> 00:02:29.960
While I also have this architecture set
up that it will automatically try to load

32
00:02:29.960 --> 00:02:34.530
a JavaScript file in the same name
as the HTML file that's been loaded,

33
00:02:34.530 --> 00:02:36.490
if you have that file existing.

34
00:02:36.490 --> 00:02:43.540
So if we open up
the web&gt;js&gt;pages&gt;index.js file,

35
00:02:43.540 --> 00:02:48.050
remember that one that we
ended up making back to empty.

36
00:02:48.050 --> 00:02:52.786
If you open that one up and it's empty and

37
00:02:52.786 --> 00:02:57.379
then we do a Save As and
we save that guy as

38
00:02:57.379 --> 00:03:02.753
about.js.
&gt;&gt; Kyle Simpson: And

39
00:03:02.753 --> 00:03:06.875
the only thing you need to change in
here is make sure that the URL that it's

40
00:03:06.875 --> 00:03:09.610
mapping itself to is same URL as the page.

41
00:03:09.610 --> 00:03:11.610
It's just a bunch of conventional stuff.

42
00:03:11.610 --> 00:03:14.540
A lot of frameworks use conventions,
so I'm using some conventions here.

43
00:03:17.250 --> 00:03:23.150
Now my init function is the one that's
called after my pages been loaded.

44
00:03:23.150 --> 00:03:25.310
Either pages loaded from the server,

45
00:03:25.310 --> 00:03:29.100
or if it's been rendered client
side through single page app.

46
00:03:29.100 --> 00:03:31.550
So this is the code where
I wanna do my main stuff,

47
00:03:31.550 --> 00:03:34.448
I wanna attach an event
handler to that gimme button.

48
00:03:34.448 --> 00:03:38.460
And I'm gonna use jQuery cuz jQuery is
already something that's being loaded and

49
00:03:38.460 --> 00:03:40.100
available in my page.

50
00:03:40.100 --> 00:03:45.167
So I'm just gonna say $("[rel='gimme']),

51
00:03:45.167 --> 00:03:50.131
that's the element that I
specified in my template.

52
00:03:50.131 --> 00:03:51.491
&gt;&gt; Speaker 2: js-gimme.

53
00:03:51.491 --> 00:03:55.830
&gt;&gt; Kyle Simpson: Then, thank you js-gimme.

54
00:03:55.830 --> 00:03:57.186
My touch click handler.

55
00:04:07.758 --> 00:04:12.413
&gt;&gt; Kyle Simpson: And on that click handler

56
00:04:12.413 --> 00:04:19.068
I want to then look at the checkbox.

57
00:04:19.068 --> 00:04:20.895
So I'm gonna get a reference
to the checkbox.

58
00:04:20.895 --> 00:04:24.360
What did I call the checkbox?

59
00:04:24.360 --> 00:04:28.720
I literally just called it local without
the js, that's super confusing I'm sorry.

60
00:04:30.310 --> 00:04:36.000
So local without the js, let's change
that so we don't confuse ourselves.

61
00:04:36.000 --> 00:04:39.700
So change it here and
change it in your template.

62
00:04:39.700 --> 00:04:41.790
So your real value is js-, all right.

63
00:04:46.400 --> 00:04:51.400
I'm going to reference to that checkbox
and basically if the checkbox is checked.

64
00:04:51.400 --> 00:04:55.014
So I'm gonna say
if($local.is(":checked")),

65
00:04:58.258 --> 00:04:59.848
&gt;&gt; Kyle Simpson: Then I want to invoke

66
00:04:59.848 --> 00:05:01.830
the Foo module locally.

67
00:05:01.830 --> 00:05:05.970
Now I know I need to load up
the Foo module into the browser.

68
00:05:05.970 --> 00:05:09.819
So I'm gonna pause here and
open up the load.js

69
00:05:09.819 --> 00:05:14.803
file.
&gt;&gt; Kyle Simpson: You notice

70
00:05:14.803 --> 00:05:17.658
load.js is already set up to
load all of my scripts and

71
00:05:17.658 --> 00:05:22.050
it's doing it all in parallel and
setting things up in the proper orders.

72
00:05:22.050 --> 00:05:28.040
So I wanna find an appropriate place
here for me to load up my foo.js module.

73
00:05:28.040 --> 00:05:31.540
So probably towards the bottom cuz
it's not being used by anybody else in

74
00:05:31.540 --> 00:05:36.200
the stack, so this is probably as good
a place as any to load that module in.

75
00:05:36.200 --> 00:05:40.040
So I just add in a script call
to load the foo.js module.

76
00:05:42.280 --> 00:05:46.350
This is not terribly that much more
different than if you were listing

77
00:05:46.350 --> 00:05:50.470
this dependency out in some file and
having AMD load it for you.

78
00:05:50.470 --> 00:05:54.780
I'm just using script loading
instead of module management.

79
00:05:56.540 --> 00:06:00.390
So that's all I need to do to make sure
that my foo.js module is available to me

80
00:06:00.390 --> 00:06:01.120
in the browser.

81
00:06:02.800 --> 00:06:04.850
So what do I need to do?

82
00:06:04.850 --> 00:06:10.006
I need to alert,
cuz I'm gonna be real simple about it,

83
00:06:10.006 --> 00:06:13.096
just alert(Foo.random())

84
00:06:16.387 --> 00:06:21.266
&gt;&gt; Kyle Simpson: Okay.
&gt;&gt; Kyle Simpson: Now

85
00:06:21.266 --> 00:06:22.548
what if it's not checked?

86
00:06:22.548 --> 00:06:27.412
If we uncheck that box, what we want to
do here is instead of using the local

87
00:06:27.412 --> 00:06:32.885
one that's in the browser,
we want to make an API call to the server.

88
00:06:32.885 --> 00:06:34.275
Remember we set up our API route.

89
00:06:35.315 --> 00:06:37.773
So here I want to make
an API call to the server,

90
00:06:37.773 --> 00:06:41.806
which by the way it's gonna use the same
Foo module, it's gonna use it in its

91
00:06:41.806 --> 00:06:48.354
instance on the server.
&gt;&gt; Kyle Simpson: So

92
00:06:48.354 --> 00:06:55.837
I'm going to do a jQuery ajax call and
the URL is /Foo.

93
00:06:55.837 --> 00:06:58.797
And I'm gonna tell it that I
wanna give it back to me, I'm not

94
00:06:58.797 --> 00:07:02.572
gonna tell that anything so I'm gonna
expect that it does the JSON parsing for

95
00:07:02.572 --> 00:07:04.880
me cuz jQuery automatically does that.

96
00:07:04.880 --> 00:07:06.500
But then I call a .then.

97
00:07:16.130 --> 00:07:17.503
&gt;&gt; Kyle Simpson: And the response that

98
00:07:17.503 --> 00:07:22.620
we're getting, just for good measure
let's make sure we keep this separate.

99
00:07:22.620 --> 00:07:27.989
So in my first alert, I'm gonna say
that the answer came from local and

100
00:07:27.989 --> 00:07:32.359
in this alert I'm gonna say
the answer came from remote.

101
00:07:39.084 --> 00:07:39.885
&gt;&gt; Kyle Simpson: Foo.random,

102
00:07:39.885 --> 00:07:47.634
we're going to invoke resp.answer.
&gt;&gt; Kyle Simpson: Now

103
00:07:47.634 --> 00:07:51.930
obviously we wouldn't, if I wasn't trying
to keep things simple we wouldn't be using

104
00:07:51.930 --> 00:07:55.530
alert boxes we'd be probably doing
something like re-render a template

105
00:07:55.530 --> 00:07:58.450
partial in the browser and
stuff the answer in there.

106
00:07:58.450 --> 00:07:59.490
Which is easy to do but

107
00:07:59.490 --> 00:08:03.010
I'm just cutting out those sorts
of steps to keep things simple.

108
00:08:06.110 --> 00:08:08.530
Okay, so this should work now.

109
00:08:08.530 --> 00:08:12.880
This is all the steps that are necessary
for us to make an ajax call to an API.

110
00:08:12.880 --> 00:08:16.500
The last step, I think,
is we need to restart our server instance.

111
00:08:17.540 --> 00:08:22.140
So if you're using an environment
where the shell script is working,

112
00:08:22.140 --> 00:08:24.930
the shell script will
automatically restart the server.

113
00:08:24.930 --> 00:08:28.690
Otherwise you might need to use
the forever command to kill it first, but

114
00:08:28.690 --> 00:08:31.850
this first stops and kills the old server.

115
00:08:31.850 --> 00:08:33.912
And then it starts up the new server for

116
00:08:33.912 --> 00:08:39.395
us.
&gt;&gt; Kyle Simpson: And

117
00:08:39.395 --> 00:08:43.420
if I haven't messed anything up hopefully
we should be able to load up this page.

118
00:08:43.420 --> 00:08:45.730
I'm gonna open the console just in case,

119
00:08:45.730 --> 00:08:50.170
in anticipation of me having broken
something, which I usually do.

120
00:08:50.170 --> 00:08:53.939
Let's try it, let's call the gimme while
the local checkbox is still checked.

121
00:08:55.820 --> 00:08:57.600
And I get an immediate answer from Local.

122
00:08:59.110 --> 00:09:03.090
I'm gonna look at my Network tab cuz I
wanna verify that if I uncheck the Local

123
00:09:03.090 --> 00:09:11.340
box and I call Gimme,
it made a FooCall to my server.

124
00:09:11.340 --> 00:09:15.297
Which invoked that API route and
used the Foo version of the exact or

125
00:09:15.297 --> 00:09:19.890
the server version of the exact same Foo
module, sent the answer back to me and

126
00:09:19.890 --> 00:09:24.773
I got it.
&gt;&gt; Kyle Simpson: Now we could

127
00:09:24.773 --> 00:09:28.626
have done the Foo module instead of making
an API that was just a simpler way for

128
00:09:28.626 --> 00:09:29.582
me to illustrate.

129
00:09:29.582 --> 00:09:31.175
But a much more realistic way for

130
00:09:31.175 --> 00:09:34.290
me to do this is like what I
did in the secure phrase site.

131
00:09:34.290 --> 00:09:38.190
I set up a route where if
the JavaScript was broken and

132
00:09:38.190 --> 00:09:42.070
you clicked the submit button on
that form, it submitted a page.

133
00:09:42.070 --> 00:09:49.310
You did a post of those form data and
it grabbed a local version of the page, it

134
00:09:49.310 --> 00:09:53.650
rendered a local version in the server of
that page, and dropped the data right in.

135
00:09:53.650 --> 00:09:57.772
That's a much more realistic way of how
you use a module in the server versus

136
00:09:57.772 --> 00:09:59.939
browsers, invoking with rendering.

137
00:09:59.939 --> 00:10:03.300
But we've just kept it simple and
just done things with alerts.

