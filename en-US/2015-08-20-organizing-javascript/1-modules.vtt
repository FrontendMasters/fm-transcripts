WEBVTT

1
00:00:00.000 --> 00:00:03.715
[MUSIC]

2
00:00:03.715 --> 00:00:07.920
&gt;&gt; Kyle: Okay so you may still be kind of
like it's crazy and it's mind bending,

3
00:00:07.920 --> 00:00:10.560
what kind of weirdnesss
are you creating here?

4
00:00:10.560 --> 00:00:12.840
I do expound upon this
more in the chapter.

5
00:00:12.840 --> 00:00:16.410
But let me show you one other way and
this is much more

6
00:00:16.410 --> 00:00:19.490
applicable to the coding that we're
gonna be doing for the rest of today.

7
00:00:19.490 --> 00:00:24.130
One other way that we can use that
closure trick to our advantage and

8
00:00:24.130 --> 00:00:26.270
it's called the module design.

9
00:00:26.270 --> 00:00:30.939
Module is perhaps the most important
design pattern in all of JavaScript.

10
00:00:30.939 --> 00:00:34.100
It's certainly the most
prolific design pattern.

11
00:00:34.100 --> 00:00:39.280
So again, remember the pattern that we
wanna look for is having an outer function

12
00:00:39.280 --> 00:00:44.530
and an inner function, without fully
understanding the mechanics of closure.

13
00:00:44.530 --> 00:00:48.660
If you just look for that pattern where
one function sits inside of another,

14
00:00:48.660 --> 00:00:51.340
you'll know that's how closure
ends up getting created,

15
00:00:51.340 --> 00:00:52.940
having one inside of the other.

16
00:00:52.940 --> 00:00:58.880
So if I wanted to be able
to hide some details.

17
00:01:02.330 --> 00:01:04.290
I could have an outer
function called Hello.

18
00:01:06.570 --> 00:01:12.770
And in here, it could take
a name as its initial parameter.

19
00:01:12.770 --> 00:01:16.930
And inside of here I could
have a function called speak

20
00:01:21.620 --> 00:01:24.160
that uses that name variable.

21
00:01:24.160 --> 00:01:28.795
So everybody see how that name
variable is accessible to it?

22
00:01:28.795 --> 00:01:32.689
Because of the scoping thing,
that I can always walk up and

23
00:01:32.689 --> 00:01:34.365
find it in a upper level.

24
00:01:34.365 --> 00:01:38.441
So that function speak,
if I return function speak,

25
00:01:38.441 --> 00:01:44.729
this is exactly like we just saw with make
outer, I'm returning a function back.

26
00:01:44.729 --> 00:01:50.582
And I know if I say fn = Hello("Kyle"),
then and

27
00:01:50.582 --> 00:01:55.769
now I have a function that
every time I call it,

28
00:01:55.769 --> 00:02:02.750
it's going to annoyingly say
the name Kyle, all right.

29
00:02:02.750 --> 00:02:06.150
Super useful function, maybe the most
useful function I've ever taught you,

30
00:02:06.150 --> 00:02:09.310
is a function that when you call it,
all it does is it prints my name.

31
00:02:09.310 --> 00:02:13.260
That will probably be one of
the cornerstone foundations of all of your

32
00:02:13.260 --> 00:02:16.020
JavaScript programming is that, okay.

33
00:02:16.020 --> 00:02:19.310
So, for
those of you on line I'm joking obviously.

34
00:02:19.310 --> 00:02:23.390
Okay, so
if I return a function that's great but

35
00:02:23.390 --> 00:02:27.310
what happens if I return something
slightly more useful like an object.

36
00:02:28.450 --> 00:02:31.143
So, we know we saw earlier that blocks,

37
00:02:31.143 --> 00:02:35.042
when we have a pair of curly
braces that looks like a block.

38
00:02:35.042 --> 00:02:39.017
When a curly brace pair is used in
the place where you would normally expect

39
00:02:39.017 --> 00:02:42.280
a value, it's not a block, it's an object.

40
00:02:42.280 --> 00:02:45.860
And objects have properties and
values on them.

41
00:02:45.860 --> 00:02:48.980
So, let me just do a side note here.

42
00:02:48.980 --> 00:02:53.110
If I said something like o
= a curly brace pair, and

43
00:02:53.110 --> 00:02:58.410
I put a property on it like super,
well let's not use super.

44
00:02:58.410 --> 00:03:04.210
Let's use awesome as my property name and
the value is cool.

45
00:03:04.210 --> 00:03:06.990
So I have an object with
one property on it and

46
00:03:06.990 --> 00:03:09.280
that property has the value string cool.

47
00:03:09.280 --> 00:03:12.830
That means later in my program
I can say o.awesome and

48
00:03:12.830 --> 00:03:15.880
it will give me that value cool.

49
00:03:15.880 --> 00:03:20.922
So, it's a way to put property values or
function methods on an object, okay.

50
00:03:26.113 --> 00:03:29.590
&gt;&gt; Kyle: Isn't there a way to call
speak from outside the hello function?

51
00:03:29.590 --> 00:03:30.540
So, let's back up.

52
00:03:32.020 --> 00:03:38.637
If all I do is return speak here,
&gt;&gt; Kyle: The only

53
00:03:38.637 --> 00:03:42.548
way to call that is to call it with fn.

54
00:03:42.548 --> 00:03:49.278
If I tried to say speak,
would that work or would that not work?

55
00:03:49.278 --> 00:03:50.482
&gt;&gt; Speaker 2: It's out of scope.

56
00:03:50.482 --> 00:03:51.393
&gt;&gt; Kyle: It's out of scope.

57
00:03:51.393 --> 00:03:55.006
Does everyone see that this
name is only available inside,

58
00:03:55.006 --> 00:03:58.700
it's not available outside,
by the same rules of scoping.

59
00:03:58.700 --> 00:04:01.200
We can go in one direction,
we can go upward, but

60
00:04:01.200 --> 00:04:03.800
we can't go downward into scope, okay?

61
00:04:03.800 --> 00:04:07.460
So I can't call speak here,
but because I'm returning it,

62
00:04:07.460 --> 00:04:10.470
then I have access to be able
to call it from the outside.

63
00:04:10.470 --> 00:04:11.600
So I can say fn.

64
00:04:12.640 --> 00:04:15.547
And that's what lets me
annoyingly print out Kyle.

65
00:04:17.961 --> 00:04:22.560
&gt;&gt; Kyle: But now if we consider instead
of just passing back a single function.

66
00:04:22.560 --> 00:04:27.310
If we pass back an object like this, and

67
00:04:27.310 --> 00:04:33.570
on that object I have a property
name called speak, as we see here.

68
00:04:33.570 --> 00:04:36.073
That is referencing this internal one,

69
00:04:36.073 --> 00:04:40.649
these names do not have to match, but
let's just make them match for now.

70
00:04:40.649 --> 00:04:45.143
If this is what I return for my function,
instead of getting this as a function,

71
00:04:45.143 --> 00:04:46.720
this is an object now.

72
00:04:46.720 --> 00:04:49.112
Does everybody see that?

73
00:04:49.112 --> 00:04:53.457
What I'm getting back is
an object not a function, and

74
00:04:53.457 --> 00:04:58.744
now what I can say instead of
saying o() cuz it's not a function,

75
00:04:58.744 --> 00:05:02.066
what I say is o.the property name speak.

76
00:05:08.065 --> 00:05:12.882
&gt;&gt; Kyle: And to hammer that point home, if
I gave it an entirely different name like

77
00:05:12.882 --> 00:05:16.468
say, then that's the name I
could use on the outside.

78
00:05:20.201 --> 00:05:23.225
&gt;&gt; Kyle: In other words,
I have this internal function,

79
00:05:23.225 --> 00:05:26.710
which is only accessible
inside of the hello function.

80
00:05:27.860 --> 00:05:33.370
And I have something on the outside that
is accessible only as that external name,

81
00:05:33.370 --> 00:05:35.060
with whatever I end up calling it.

82
00:05:36.420 --> 00:05:38.390
Is everybody following that or
am I losing people?

83
00:05:42.670 --> 00:05:44.720
What if you passed in an argument to say.

84
00:05:44.720 --> 00:05:48.610
We could definitely set this up to accept
an argument in the news that I'm just

85
00:05:48.610 --> 00:05:50.170
keeping the example simple.

86
00:05:50.170 --> 00:05:55.202
But we could definitely set
it up that I could pass

87
00:05:55.202 --> 00:06:00.131
in something,
like if I called this last name.

88
00:06:00.131 --> 00:06:01.613
We could definitely use that.

89
00:06:06.059 --> 00:06:07.166
&gt;&gt; Kyle: And that would print it out.

90
00:06:12.852 --> 00:06:16.990
&gt;&gt; Kyle: See how that's exactly like
the make outer that I was showing before?

91
00:06:16.990 --> 00:06:21.914
It remembers one variable from its closure
and it gets another one passed in.

92
00:06:21.914 --> 00:06:24.520
Same thing as what make outer was doing.

93
00:06:24.520 --> 00:06:28.820
So what we're seeing here is that
returning this object from a function

94
00:06:28.820 --> 00:06:33.650
call, is essentially creating
what we in programming terms

95
00:06:33.650 --> 00:06:37.880
call a public API.

96
00:06:37.880 --> 00:06:39.740
The stuff that's on the inside,

97
00:06:39.740 --> 00:06:43.720
like this function, any variables
that I might declare inside of there.

98
00:06:43.720 --> 00:06:46.405
All that stuff is completely private.

99
00:06:46.405 --> 00:06:49.258
We can't get at it from the outside world.

100
00:06:49.258 --> 00:06:51.821
But the stuff that we put in this object,
and

101
00:06:51.821 --> 00:06:55.650
return it back,
that is accessible to the outside world.

102
00:06:55.650 --> 00:06:59.988
Which is like a public API to

103
00:06:59.988 --> 00:07:04.711
access the internal module.

104
00:07:04.711 --> 00:07:07.984
&gt;&gt; Speaker 2: Just some questions
on what's better or why.

105
00:07:07.984 --> 00:07:09.340
&gt;&gt; Kyle: Why would I return an object?

106
00:07:10.420 --> 00:07:13.850
An object won't let me have
multiple methods on my API.

107
00:07:13.850 --> 00:07:18.360
So, if I had 15 inner functions and
I wanted to expose 5 of them, I could list

108
00:07:18.360 --> 00:07:24.770
all 5 of them here and I'd have an API
that had multiple public end points.

109
00:07:26.140 --> 00:07:29.680
So returning an object,
lets me put multiple things here.

110
00:07:29.680 --> 00:07:32.459
If the speak was the only function
that was necessary to expose,

111
00:07:32.459 --> 00:07:34.939
you could have of course
just returned only the.

112
00:07:34.939 --> 00:07:36.196
&gt;&gt; Speaker 3: So in other words,

113
00:07:36.196 --> 00:07:39.891
you could have the last one
of the one of the properties.

114
00:07:39.891 --> 00:07:43.209
You could have lastName, and
you could return lastName,

115
00:07:43.209 --> 00:07:45.385
or firstName, or whatever you find.

116
00:07:45.385 --> 00:07:50.518
&gt;&gt; Kyle: If I said lastName here,
what value would I assign to it?

117
00:07:50.518 --> 00:07:52.686
&gt;&gt; Speaker 3: Probably,
the last name that was passed in.

118
00:07:52.686 --> 00:07:57.167
&gt;&gt; Kyle: You could conceivably want to
assign off that lastName somewhere, but

119
00:07:57.167 --> 00:08:02.095
there's no way to access this object
the way it's currently written to be able

120
00:08:02.095 --> 00:08:02.855
to do that.

121
00:08:02.855 --> 00:08:05.760
So a more realistic scenario is to

122
00:08:05.760 --> 00:08:10.906
suggest,
&gt;&gt; Kyle: That we might

123
00:08:10.906 --> 00:08:20.260
have a method called firstName,
&gt;&gt; Kyle: Which does nothing.

124
00:08:20.260 --> 00:08:24.894
It doesn't take anything,
&gt;&gt; Kyle: Except it returns back to

125
00:08:24.894 --> 00:08:26.930
the name that we initially passed in.

126
00:08:28.800 --> 00:08:33.564
So now, I have two different
methods as we say on my public API.

127
00:08:33.564 --> 00:08:36.592
One of them is say which
prints things out,

128
00:08:36.592 --> 00:08:41.305
the other one is firstName,
which doesn't print anything out but

129
00:08:41.305 --> 00:08:46.205
it returns back that initial value
that I passed in, the value Kyle.

130
00:08:47.500 --> 00:08:51.781
So, it's two different ways of defining
these methods on my public API.

