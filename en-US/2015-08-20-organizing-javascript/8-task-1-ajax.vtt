WEBVTT

1
00:00:00.000 --> 00:00:03.613
[MUSIC]

2
00:00:03.613 --> 00:00:06.656
&gt;&gt; Kyle Simpson: The element that was
clicked on is an atag right which has

3
00:00:06.656 --> 00:00:07.810
an href in it.

4
00:00:07.810 --> 00:00:11.220
And that href is the URL that
we want to load, we want

5
00:00:11.220 --> 00:00:14.150
to load that file up we essentially
want to make an Ajax request for

6
00:00:14.150 --> 00:00:17.168
that file get its contents and
stuff it into a model.

7
00:00:17.168 --> 00:00:25.160
So I can get the URL by looking at
the element that was clicked on,

8
00:00:25.160 --> 00:00:29.452
which is going to be evt.target,

9
00:00:29.452 --> 00:00:34.050
that's the link that we clicked on.

10
00:00:36.670 --> 00:00:40.070
And I want to jQueryify that element
because I want helpers for it.

11
00:00:40.070 --> 00:00:47.618
So I'm just gonna wrap $ for
in to see around that element and

12
00:00:47.618 --> 00:00:52.946
I want to get it's href
attribute in the way

13
00:00:52.946 --> 00:00:59.166
we do that in JavaScript is .attr("href").

14
00:00:59.166 --> 00:01:05.611
Just double check myself
against the solution file here.

15
00:01:22.819 --> 00:01:23.740
&gt;&gt; Kyle Simpson: Okay, so

16
00:01:23.740 --> 00:01:31.000
now I have the URL, jQuery has
a nice simple syntax for doing Ajax.

17
00:01:31.000 --> 00:01:33.760
If you don't want to type this part
you're free to kind of just copy and

18
00:01:33.760 --> 00:01:37.770
paste it which is what I'm going to
do because I don't want to type it.

19
00:01:37.770 --> 00:01:41.140
So you can copy and paste from
the solutions file if you'd like but

20
00:01:41.140 --> 00:01:43.060
this is how we do an Ajax call.

21
00:01:48.690 --> 00:01:53.280
I'm giving it the URL and I'm telling it
that I'm expecting to get back text, so

22
00:01:53.280 --> 00:01:58.470
that it doesn't do any parsing and
this dot then is basically how I specify

23
00:01:58.470 --> 00:02:03.410
my callback.
&gt;&gt; Speaker 2: Just wondering

24
00:02:03.410 --> 00:02:06.750
why you didn't use prevent default?
&gt;&gt; Kyle Simpson: We did

25
00:02:06.750 --> 00:02:10.140
use prevent default but the question
is why did I do the other two?

26
00:02:11.280 --> 00:02:13.190
We don't have to do the other
two in this example,

27
00:02:13.190 --> 00:02:15.330
I just did it because
there's a habit that I do.

28
00:02:15.330 --> 00:02:21.150
Like I call all three of those
usually just by habit but

29
00:02:21.150 --> 00:02:24.460
in our particular situation, we actually
don't care about the propagation.

30
00:02:24.460 --> 00:02:28.713
We only care about stopping the default
behavior so it would be acceptable if you

31
00:02:28.713 --> 00:02:35.663
didn't put them in.
&gt;&gt; Kyle Simpson: So

32
00:02:35.663 --> 00:02:38.150
once I've loaded the contents
up as an Ajax request,

33
00:02:38.150 --> 00:02:40.430
remember that looks exactly
like we did before.

34
00:02:40.430 --> 00:02:44.390
There's an Ajax call and I get a callback
then I get some contents back.

35
00:02:44.390 --> 00:02:46.980
Now I need to add that to my modal.

36
00:02:48.040 --> 00:02:53.070
So we don't have this variable yet,
but we can declare this variable and

37
00:02:53.070 --> 00:02:58.939
have that variable point at the modal,
that's going to be our last step.

38
00:03:00.960 --> 00:03:05.910
We wanna declare a variable
called modal and

39
00:03:08.660 --> 00:03:12.970
we wanna get at it the same way
we get it any other variable,

40
00:03:14.310 --> 00:03:16.510
didn't understand the URL line, okay?

41
00:03:16.510 --> 00:03:19.440
The first thing is to get
the element that was clicked on,

42
00:03:19.440 --> 00:03:23.730
that's what evt.target is and
then the link,

43
00:03:23.730 --> 00:03:27.510
the A tag that we clicked on we
want to get its href attribute.

44
00:03:27.510 --> 00:03:29.682
When you get the value of the href

45
00:03:29.682 --> 00:03:35.897
attribute.
&gt;&gt; Kyle Simpson: So

46
00:03:35.897 --> 00:03:39.818
in our index that would be
getting as register.html or

47
00:03:39.818 --> 00:03:43.580
the login.html,
that's the value we want to get.

48
00:03:53.240 --> 00:03:57.260
Okay, so

49
00:03:57.260 --> 00:04:00.140
how are we going to get a reference to
the modal that we want to click on?

50
00:04:00.140 --> 00:04:01.940
Or I mean that we want to add content to?

51
00:04:03.760 --> 00:04:07.170
Other we get reference so
that we come to our markup and

52
00:04:07.170 --> 00:04:12.180
we find that there's a modal
there with real js-modal.

53
00:04:12.180 --> 00:04:18.271
So we get it exactly the same
way we're getting the other ones

54
00:04:18.271 --> 00:04:25.730
which is to say rel=js-modal.
&gt;&gt; Kyle Simpson: I

55
00:04:25.730 --> 00:04:30.970
have a stylistic convention
that you see on line three.

56
00:04:30.970 --> 00:04:34.010
Which is that any variable that
I declare in my code which

57
00:04:34.010 --> 00:04:36.830
points at a jQuery object.

58
00:04:36.830 --> 00:04:41.022
I always prefix my variable names with
dollar signs, just to make it clear that

59
00:04:41.022 --> 00:04:47.860
I'm dealing with a jQuery.
&gt;&gt; Speaker 3: There's nothing actually

60
00:04:47.860 --> 00:04:51.861
special about the dollar sign, is there?
&gt;&gt; Kyle Simpson: Not in variable names,

61
00:04:51.861 --> 00:04:55.685
there is not, yeah?
&gt;&gt; Speaker 2: There's the few questions

62
00:04:55.685 --> 00:04:56.400
there.

63
00:04:56.400 --> 00:04:57.990
Could we have used $this?

64
00:04:57.990 --> 00:05:00.110
You didn't cover that question?
&gt;&gt; Kyle Simpson: I didn't covered that

65
00:05:00.110 --> 00:05:03.900
question, the question is basically if
I do need to do event the target or

66
00:05:03.900 --> 00:05:05.700
could I have used this.

67
00:05:05.700 --> 00:05:10.550
You do not want to use dollar sign thus,
I know that many people are familiar with

68
00:05:10.550 --> 00:05:15.809
and have seen that in a lot of places,
it is not as reliable as you would expect.

69
00:05:17.210 --> 00:05:21.330
In our particular case
it would have worked but

70
00:05:21.330 --> 00:05:24.000
there are lots of other cases
where the event propagation

71
00:05:24.000 --> 00:05:27.675
that is the bubbling stuff where
it doesn't point at what you want.

72
00:05:27.675 --> 00:05:30.970
jQuery make sure that event the target

73
00:05:30.970 --> 00:05:33.150
always points at the thing
that got clicked on.

74
00:05:34.190 --> 00:05:37.259
So it's a reliable parameter and that's
why I always use it out of that habit.

75
00:05:39.930 --> 00:05:42.442
&gt;&gt; Speaker 2: The question is,

76
00:05:42.442 --> 00:05:46.302
is .NET native to JS?
&gt;&gt; Kyle Simpson: This is part

77
00:05:46.302 --> 00:05:49.608
of the jQuery,
let's talk then that's happening here,

78
00:05:49.608 --> 00:05:55.490
that's part of just crazy.
&gt;&gt; Speaker 2: So

79
00:05:55.490 --> 00:05:59.360
you're saying that that's not a promise.
&gt;&gt; Kyle Simpson: jQuery is not using

80
00:05:59.360 --> 00:06:00.460
real promise.

81
00:06:00.460 --> 00:06:03.740
jQuery is doing their own version of
stuff that looks a little bit like

82
00:06:03.740 --> 00:06:04.710
a promise, but isn't.

83
00:06:06.490 --> 00:06:09.190
The other question is our native
promises coming to JavaScript?

84
00:06:09.190 --> 00:06:12.100
Yes, they are coming to us six.

85
00:06:12.100 --> 00:06:15.556
It's just that these are not made
of promises so the dot then that

86
00:06:15.556 --> 00:06:19.908
you see there looks like it's a native
promise, but it's actually just a jQuery

87
00:06:19.908 --> 00:06:27.123
API.
&gt;&gt; Kyle Simpson: I

88
00:06:27.123 --> 00:06:30.383
might've lost some of you already even
though I walked you through it, and

89
00:06:30.383 --> 00:06:31.430
that's totally okay.

90
00:06:31.430 --> 00:06:34.380
Don't feel frustrated and
walk away, walk out on me.

91
00:06:37.360 --> 00:06:41.540
The point that I'm making here
is that we're already using

92
00:06:41.540 --> 00:06:45.880
some of the concepts that we talked
about in our earlier course.

93
00:06:45.880 --> 00:06:50.290
For example, we're passing in
a callback function, all right.

94
00:06:50.290 --> 00:06:56.336
So if I just hid all of the contents
of Johnny's a little trick in sublime.

95
00:06:56.336 --> 00:07:01.630
That does code folding, okay.

96
00:07:01.630 --> 00:07:04.920
So I just hit it temporarily,
I'll bring it back in a minute but

97
00:07:04.920 --> 00:07:06.700
if you look at this function.

98
00:07:06.700 --> 00:07:12.780
I mean if you look at this dollar sign
is a function, on is a function and

99
00:07:12.780 --> 00:07:16.360
if you look at the parameters that
are being passed to the on call.

100
00:07:16.360 --> 00:07:18.660
There is three parameters being passed,

101
00:07:18.660 --> 00:07:24.030
one of which is a function that
we passed and it's a callback.

102
00:07:25.100 --> 00:07:28.380
Exactly like passing a callback
into a set timeout or

103
00:07:28.380 --> 00:07:30.710
passing a call back
into any other utility.

104
00:07:30.710 --> 00:07:32.380
We're passing a call back,
we're asking for

105
00:07:32.380 --> 00:07:34.860
this callback to be invoked, to be run.

106
00:07:34.860 --> 00:07:38.170
Whenever somebody clicks on a link,
it's not going to happen right away.

107
00:07:38.170 --> 00:07:41.388
They're going to wait a few seconds and
we want it to happen whenever it does.

108
00:07:48.652 --> 00:07:50.113
&gt;&gt; Kyle Simpson: Okay, so

109
00:07:50.113 --> 00:07:53.225
you're back here.

110
00:08:02.753 --> 00:08:04.170
&gt;&gt; Kyle Simpson: All right, so

111
00:08:04.170 --> 00:08:10.630
if we Save this file and
we reload our page to Refresh our page.

112
00:08:10.630 --> 00:08:14.390
If I didn't mess something
up now when I click Login,

113
00:08:14.390 --> 00:08:16.669
it pops up a modal with
the login contents in it.

114
00:08:18.380 --> 00:08:21.870
Now I don't have any close buttons or
whatever we do that later in the exercise.

115
00:08:21.870 --> 00:08:24.200
So right now we just pop up a modal but

116
00:08:24.200 --> 00:08:27.270
if I Refresh and obviously it
refreshes the page and goes away.

117
00:08:27.270 --> 00:08:30.670
If I click Register I get
the register page loaded.

118
00:08:30.670 --> 00:08:34.380
So that's the step that you should be at
is being able to load that content and

119
00:08:34.380 --> 00:08:35.020
put it in a modal.

120
00:08:37.423 --> 00:08:40.765
P-R-O-P-A-G.

121
00:08:52.805 --> 00:08:54.560
&gt;&gt; Kyle Simpson: The good news is [LAUGH]

122
00:08:54.560 --> 00:08:57.972
if this was complicated and
you got lost or

123
00:08:57.972 --> 00:09:03.450
you feel a little bit intimidated by this,
which is totally okay.

124
00:09:03.450 --> 00:09:08.490
The first time I saw code like
this I was lost, trust me.

125
00:09:08.490 --> 00:09:09.950
If this is complicated to you,

126
00:09:09.950 --> 00:09:15.589
the good news is that this is about as
complex as jQuery programming gets.

127
00:09:16.650 --> 00:09:19.020
I started you off with
an example that kind of,

128
00:09:19.020 --> 00:09:21.960
it shows a lot of
different pieces moving in.

129
00:09:21.960 --> 00:09:26.280
Pulling in an element from the dom,
that's what this first call is doing.

130
00:09:26.280 --> 00:09:29.320
This is pulling in an element from
the dom by its rel attribute,

131
00:09:29.320 --> 00:09:31.390
the same thing we did with modal.

132
00:09:31.390 --> 00:09:36.240
Calling a method on that chain, calling
.on and giving it several parameters,

133
00:09:36.240 --> 00:09:42.410
making an Ajax call setting the inner html
of those contents, showing an element.

134
00:09:42.410 --> 00:09:49.220
This is basically like 80% of what people
do with jQuery in this one little snippet.

135
00:09:49.220 --> 00:09:53.600
So even though it may feel like while this
is kind of like, overwhelming or whatever.

136
00:09:53.600 --> 00:09:58.452
If you take some time to digest just this
one file you've actually probably got

137
00:09:58.452 --> 00:10:01.907
the same amount of skills
as 50% of jQuery developers

138
00:10:01.907 --> 00:10:06.531
have.
&gt;&gt; Kyle Simpson: And the other thing to

139
00:10:06.531 --> 00:10:12.435
note is that we didn't do anything
tricky with JavaScript itself.

140
00:10:12.435 --> 00:10:17.190
99% of the complexity that we see
in this file is jQuery related,

141
00:10:17.190 --> 00:10:18.250
not JavaScript related.

142
00:10:19.620 --> 00:10:22.010
So if you spend time to
learn a tool like jQuery,

143
00:10:22.010 --> 00:10:26.860
like I've taken time to learn, then you
can sling about the jQuery stuff, and

144
00:10:26.860 --> 00:10:29.130
it just works and
the same is true of JavaScript.

145
00:10:29.130 --> 00:10:33.110
If you learn the JavaScript fundamentals,
you can sling JavaScript around and

146
00:10:33.110 --> 00:10:34.360
you won't get confused.

147
00:10:34.360 --> 00:10:38.374
So this is just another thing to learn,
it's a jQuery library that's helpful.

148
00:10:38.374 --> 00:10:42.380
It makes the code to do this
without jQuery would be worse.

149
00:10:42.380 --> 00:10:45.210
So even though it may look ugly it's
better than it would have been.

150
00:10:46.710 --> 00:10:52.920
Question here,
why not using a comma role js controls?

151
00:10:52.920 --> 00:10:57.800
You totally could have done it that way,
I don't like to use tag names or IDs.

152
00:10:57.800 --> 00:11:02.750
I try to avoid dom specific things like
what tag name was used or whatever.

153
00:11:02.750 --> 00:11:04.724
So that's why I would avoid using A but

154
00:11:04.724 --> 00:11:08.488
there's lots of different ways to use
the jQuery API, this is just one of

155
00:11:08.488 --> 00:11:15.629
several.
&gt;&gt; Kyle Simpson: What

156
00:11:15.629 --> 00:11:18.345
else did you work on after
header dodginess I didn't.

157
00:11:18.345 --> 00:11:20.756
The only code that we've
changed right now so

158
00:11:20.756 --> 00:11:29.805
far as header.js.
&gt;&gt; Kyle Simpson: Yup,

159
00:11:29.805 --> 00:11:32.570
header.js is all we touched, okay.

160
00:11:32.570 --> 00:11:37.410
Any questions here about
stuff I can clear up for you.

161
00:11:37.410 --> 00:11:40.400
It would have been rather cruel of me to
expect you to just know all this stuff

162
00:11:40.400 --> 00:11:42.180
that's why I walked you through it.

163
00:11:42.180 --> 00:11:45.560
Fortunately, the next thing that I'm
gonna ask you to do is going to be

164
00:11:45.560 --> 00:11:46.530
a bit simpler.

165
00:11:46.530 --> 00:11:50.140
It's gonna build off of some of the stuff,
you wanna have your file in that state.

166
00:11:50.140 --> 00:11:55.337
If you don't want to retype all that
stuff, just copy and paste that whole file

167
00:11:55.337 --> 00:12:00.413
from.
&gt;&gt; Kyle Simpson: Over there,

168
00:12:00.413 --> 00:12:03.760
which is totally fine if
you want to do it that way.

