WEBVTT

1
00:00:00.000 --> 00:00:03.781
[MUSIC]

2
00:00:03.781 --> 00:00:08.960
&gt;&gt; Kyle Simpson: Armed with that as our
header.js, I want you to do the exact

3
00:00:08.960 --> 00:00:14.050
same thing for the carousel file and
for the details file.

4
00:00:16.510 --> 00:00:19.530
Same mindset, same process, same syntax.

5
00:00:20.710 --> 00:00:24.018
But it gives you some practice
doing a real world module.

6
00:00:28.551 --> 00:00:31.144
&gt;&gt; Kyle Simpson: If you
have been feeling like,

7
00:00:31.144 --> 00:00:36.630
wow this is bending my brain
a little bit or I'm not quite.

8
00:00:36.630 --> 00:00:40.570
This is the most important of any of the
exercises that I've given you today is to

9
00:00:40.570 --> 00:00:41.280
try your hand on it.

10
00:00:42.290 --> 00:00:46.970
Try your hand at doing what I just did on
header.js, try doing that on the details

11
00:00:46.970 --> 00:00:53.470
js or the carousel js, because as I said
earlier there is value in the confusion.

12
00:00:53.470 --> 00:00:55.882
Because when you work
through the confusion and

13
00:00:55.882 --> 00:00:58.113
you have the lightbulb moment and
it works,

14
00:00:58.113 --> 00:01:01.990
that solidifies it way more than anything
that I could give you as a lecture.

15
00:01:05.506 --> 00:01:08.562
&gt;&gt; Kyle Simpson: So, I will give
you about eight, nine minutes or

16
00:01:08.562 --> 00:01:13.186
so, we'll come back and I will talk you
through how I do the conversion for

17
00:01:13.186 --> 00:01:17.759
carousel and JS but try your hand at
converting both of those to modules.

18
00:01:19.980 --> 00:01:24.980
So I have zoomed way out, so
you could see it all at once but,

19
00:01:24.980 --> 00:01:29.085
the major patterns to be looking for
if I can use.

20
00:01:33.409 --> 00:01:37.416
&gt;&gt; Kyle Simpson: Folding magic here to
kinda keep the unnecessary details away

21
00:01:37.416 --> 00:01:38.039
from us.

22
00:01:40.244 --> 00:01:47.690
The major details to look for are an outer
function which needs to run at least once.

23
00:01:49.060 --> 00:01:53.555
Here we only needed it to run once cuz we
only need one header instance if we made

24
00:01:53.555 --> 00:01:56.807
it a regular function we could
call it multiple times and

25
00:01:56.807 --> 00:01:58.414
get multiple hit modules.

26
00:01:58.414 --> 00:02:02.878
But we need it to run at least once, and
we need to have some private stuff so

27
00:02:02.878 --> 00:02:06.912
we've got some private variables and
private functions in here.

28
00:02:06.912 --> 00:02:11.396
And then we need to have a public
API that gets returned back, and

29
00:02:11.396 --> 00:02:15.231
that's what gets assigned
to our instance variable.

30
00:02:18.442 --> 00:02:22.885
&gt;&gt; Kyle Simpson: That pattern of
doing modularization is essentially

31
00:02:22.885 --> 00:02:27.370
identical to every module
I've ever written.

32
00:02:27.370 --> 00:02:29.940
Like there's little tweaks and bits and

33
00:02:29.940 --> 00:02:34.770
pieces of things that we do sometimes
differently but the basic concept there

34
00:02:34.770 --> 00:02:38.390
is an outer function within our
private functions and variables.

35
00:02:38.390 --> 00:02:40.770
Return an object that's a public API.

36
00:02:40.770 --> 00:02:41.840
And that's really it.

37
00:02:43.450 --> 00:02:47.550
So while we can get overwhelmed a little
bit sometimes in the weeds with J Query,

38
00:02:47.550 --> 00:02:51.230
syntax and stuff,
don't miss the bigger picture here,

39
00:02:51.230 --> 00:02:54.550
which is that this pattern
is about code organization.

40
00:02:54.550 --> 00:02:57.910
If I gave you just a bunch
of simple foo bar examples,

41
00:02:57.910 --> 00:03:00.960
you don't really pick up on why
this module pattern is so useful.

42
00:03:00.960 --> 00:03:03.680
So, I have to give you
a somewhat more complex app.

43
00:03:03.680 --> 00:03:06.393
That's got some of this
other moving parts in it for

44
00:03:06.393 --> 00:03:10.320
you to really pick up on why that is
an improvement over what we had before.

45
00:03:14.283 --> 00:03:18.149
&gt;&gt; Kyle Simpson: Okay, so
let's quickly try our hand at it,

46
00:03:18.149 --> 00:03:22.100
I'll start with the details one.

47
00:03:22.100 --> 00:03:28.000
Let's quickly try our hand at,
we need a var details.

48
00:03:28.000 --> 00:03:30.190
We'll use another iffy because
we only need one of them.

49
00:03:31.840 --> 00:03:34.490
I'll take the ready thing out for
right now.

50
00:03:34.490 --> 00:03:36.380
We'll put that at the bottom.

51
00:03:43.349 --> 00:03:44.970
&gt;&gt; Kyle Simpson: Here's my iffy closed.

52
00:03:44.970 --> 00:03:49.110
Here's my internal private module
function called load person.

53
00:03:49.110 --> 00:03:51.320
Here is my init code essentially,

54
00:03:51.320 --> 00:03:54.454
this stuff is what I'd
wrap in an init function.

55
00:04:02.534 --> 00:04:05.870
&gt;&gt; Kyle Simpson: And then I'd notice right
away that I'm gonna need those variables

56
00:04:05.870 --> 00:04:07.340
across multiple functions.

57
00:04:07.340 --> 00:04:12.168
So I wanna take those vars out,

58
00:04:12.168 --> 00:04:19.040
basically and
put them at the module level so

59
00:04:19.040 --> 00:04:24.260
I need var items and var content.

60
00:04:24.260 --> 00:04:26.547
And then what's the next missing piece?

61
00:04:31.599 --> 00:04:34.094
&gt;&gt; Kyle Simpson: I need a public API,
right?

62
00:04:34.094 --> 00:04:37.279
So what's my public API?

63
00:04:38.337 --> 00:04:43.108
Init init.

64
00:04:43.108 --> 00:04:48.594
And now on the outside
we have details.init.

65
00:04:59.556 --> 00:05:00.866
&gt;&gt; Kyle Simpson: Do you
see how that was the exact

66
00:05:00.866 --> 00:05:02.890
same pattern as what I
did in the previous file?

67
00:05:05.230 --> 00:05:08.814
This is one of the most useful hammers
that you can have in your toolbox,

68
00:05:08.814 --> 00:05:10.799
you're gonna pull it out all the time.

69
00:05:10.799 --> 00:05:15.396
Bam bam just hammer the nail everywhere
that you see some code organization,

70
00:05:15.396 --> 00:05:17.800
module is probably gonna be your first,

71
00:05:17.800 --> 00:05:22.485
should be your first instinct, I should
use a module to organize that code.

72
00:05:26.315 --> 00:05:30.332
&gt;&gt; Kyle Simpson: Okay, so with that
out of the way let's try the last one,

73
00:05:30.332 --> 00:05:31.510
the carousel.

74
00:05:31.510 --> 00:05:32.263
There's a question.

75
00:05:40.511 --> 00:05:42.758
&gt;&gt; Kyle Simpson: We moved
the var declarations out but

76
00:05:42.758 --> 00:05:45.180
the question is why are these in there.

77
00:05:45.180 --> 00:05:48.650
We can't run this code until
we're sure that the dom is ready.

78
00:05:48.650 --> 00:05:53.202
So we leave the initialization of
those variables in the init, but

79
00:05:53.202 --> 00:05:56.046
outside of init we have the declaration so

80
00:05:56.046 --> 00:06:01.025
that we can share those variables
across all of our internal functions.

81
00:06:05.272 --> 00:06:09.059
&gt;&gt; Kyle Simpson: Sorry init
is shorthand for initialize.

82
00:06:09.059 --> 00:06:11.847
It's just the common name
that people refer to,

83
00:06:11.847 --> 00:06:14.920
the kind of first Initialization
step of any entity.

84
00:06:17.270 --> 00:06:17.800
Okay.

85
00:06:24.943 --> 00:06:30.460
&gt;&gt; Kyle Simpson: I had renamed
person clicked back to load person.

86
00:06:30.460 --> 00:06:33.510
So it's still there,
it's still inside of our module.

87
00:06:33.510 --> 00:06:35.260
Question was what happened
to person clicked?

88
00:06:35.260 --> 00:06:36.470
I had removed person,

89
00:06:36.470 --> 00:06:42.070
I had renamed person clicked to
load person in an earlier session.

90
00:06:42.070 --> 00:06:45.150
Okay, so let's switch to carousel.

91
00:06:47.390 --> 00:06:50.310
Same basic principle var carousel.

92
00:06:52.600 --> 00:06:53.661
Put in an iffy.

93
00:07:00.172 --> 00:07:04.340
&gt;&gt; Kyle Simpson: Take the,
I didn't even have a doc, there it is.

94
00:07:04.340 --> 00:07:05.740
I was like, where's my document ready.

95
00:07:05.740 --> 00:07:09.250
Take the document ready out,
move it outside.

96
00:07:10.580 --> 00:07:13.646
These are all fine as private
internal functions, that's good.

97
00:07:13.646 --> 00:07:19.033
These are all things that are gonna
need to be inside of an init function.

98
00:07:28.702 --> 00:07:31.680
&gt;&gt; Kyle Simpson: But
those declarations need to come out.

99
00:07:31.680 --> 00:07:33.519
So I'm gonna take all those vars out.

100
00:07:34.890 --> 00:07:36.730
Those need to be at the module level, so

101
00:07:36.730 --> 00:07:40.750
that they can be shared with
the other functions in the module.

102
00:07:46.920 --> 00:07:49.777
So I'm just gonna have one
big var list of those.

103
00:08:11.074 --> 00:08:12.426
&gt;&gt; Kyle Simpson: What do I need next?

104
00:08:15.158 --> 00:08:16.491
&gt;&gt; Speaker 2: In turn, the API.

105
00:08:16.491 --> 00:08:18.763
&gt;&gt; Kyle Simpson: I need an API, right?

106
00:08:18.763 --> 00:08:20.070
Public API.

107
00:08:20.070 --> 00:08:20.739
&gt;&gt; Speaker 2: Yes.

108
00:08:24.757 --> 00:08:28.921
&gt;&gt; Kyle Simpson: Either I've completely
lost you or we've run out of coffee,

109
00:08:28.921 --> 00:08:29.568
or both.

110
00:08:29.568 --> 00:08:31.477
[LAUGH] Are people following along?

111
00:08:31.477 --> 00:08:32.750
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Kyle Simpson: Yell at me if I'm going

112
00:08:32.750 --> 00:08:33.310
too quick.

113
00:08:33.310 --> 00:08:34.334
Are we following it?

114
00:08:34.334 --> 00:08:36.323
Okay, so init init,

115
00:08:36.323 --> 00:08:42.083
now what do we put down here
inside of the document ready call?

116
00:08:46.602 --> 00:08:48.948
&gt;&gt; Speaker 2: For
the name of the function, I had.

117
00:08:48.948 --> 00:08:50.507
&gt;&gt; Speaker 3: The module's carousel right?

118
00:08:50.507 --> 00:08:52.120
&gt;&gt; Kyle Simpson: Module carousel dot init.

