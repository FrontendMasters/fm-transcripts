WEBVTT

1
00:00:00.000 --> 00:00:03.982
[MUSIC]

2
00:00:03.982 --> 00:00:05.958
&gt;&gt; Kyle Simpson: So,
where does Tmpls.js come from,

3
00:00:05.958 --> 00:00:10.370
you notice it's in the web/js directory,
where does that thing come from?

4
00:00:10.370 --> 00:00:14.565
Well, I actually have another utility
here, called build templates,

5
00:00:14.565 --> 00:00:17.534
it's a script that is in
the main root of your file.

6
00:00:17.534 --> 00:00:20.018
And if you look at build templates,
let me to zoom out,

7
00:00:20.018 --> 00:00:21.965
it's a little easier
to see more at a time.

8
00:00:21.965 --> 00:00:25.410
What build templates does,
I can scroll down here,

9
00:00:25.410 --> 00:00:29.637
essential what it does is you spin it up,
you run this program and

10
00:00:29.637 --> 00:00:35.460
it will process through all the templates
that are in the templates directory.

11
00:00:35.460 --> 00:00:37.008
These are grips templates.

12
00:00:37.008 --> 00:00:40.844
If you were using a different templating
engine, if you didn't like grips then

13
00:00:40.844 --> 00:00:44.469
you'd just be using a gulp or a grunt
process for whatever engine you want.

14
00:00:44.469 --> 00:00:48.544
Again, not to overload people,
we're not using grunt and gulp here.

15
00:00:48.544 --> 00:00:51.318
I'm not saying that those aren't
good tools, but that's yet

16
00:00:51.318 --> 00:00:53.110
more machinery that I have to teach you.

17
00:00:53.110 --> 00:00:57.360
So, I'm showing you how to do it
without even invoking any other tool.

18
00:00:57.360 --> 00:01:00.700
This is just a simple script that I wrote
to go through the files in templates

19
00:01:00.700 --> 00:01:05.820
directory and run them through the grips
templating engine and compile them.

20
00:01:05.820 --> 00:01:07.020
So, that's what it does it.

21
00:01:07.020 --> 00:01:11.810
It loops through all the templates in
that file, processes each one of them.

22
00:01:11.810 --> 00:01:15.240
This is the command in the grips
templating engine to compile one of those

23
00:01:15.240 --> 00:01:19.010
files and
it compiles it from the HTML template into

24
00:01:19.010 --> 00:01:22.920
runnable JavaScript that can then be
rendered either in Node or in the server.

25
00:01:22.920 --> 00:01:27.432
So, essentially this build
templates JavaScript file

26
00:01:27.432 --> 00:01:29.940
produces the Tmpls.js file.

27
00:01:29.940 --> 00:01:35.210
It starts with,
is it similar to the ejs template engine?

28
00:01:36.740 --> 00:01:39.900
Similar in that they are both
template engines, yes.

29
00:01:39.900 --> 00:01:42.900
Similar in style or
syntax, definitely not.

30
00:01:44.820 --> 00:01:47.600
Okay, so

31
00:01:47.600 --> 00:01:53.090
there is a base wrapper that I have and
right off

32
00:01:53.090 --> 00:01:58.540
the bat this is going to illustrate how I
share code between Node and the browser.

33
00:01:58.540 --> 00:02:02.660
I use the UMD style of module wrapper.

34
00:02:02.660 --> 00:02:07.630
Now I will fully admit and
agree to you that those five lines of code

35
00:02:07.630 --> 00:02:12.490
being boilerplate on the top of each
of my files is not at all ideal.

36
00:02:12.490 --> 00:02:15.200
I don't like that crap up there, but

37
00:02:15.200 --> 00:02:19.030
the other take away is that I
don't even have to worry about it.

38
00:02:19.030 --> 00:02:22.660
I can literally just hide it,
which is what I often do.

39
00:02:22.660 --> 00:02:26.262
I don't have these hidden, because I want
to teach, but I just hide those things and

40
00:02:26.262 --> 00:02:28.012
not worry about those sorts of details.

41
00:02:28.012 --> 00:02:31.207
Which is usually what I do when I'm
really trying to think about, so

42
00:02:31.207 --> 00:02:33.069
I can use like code folding in Sublime.

43
00:02:33.069 --> 00:02:36.564
And then I don't have to
worry about that UMD header.

44
00:02:36.564 --> 00:02:44.501
But this is essentially replacing
my need for browserify.

45
00:02:44.501 --> 00:02:48.536
Because this file as it is,
can be run in any of those environments.

46
00:02:48.536 --> 00:02:52.383
It can run in Node, it can run in the
browser, it can run inside of require in

47
00:02:52.383 --> 00:02:55.870
the browser and
it doesn't need to be transformed.

48
00:02:55.870 --> 00:03:00.480
So, my choice instead of using
browserify is to use the UMD wrapper.

49
00:03:01.760 --> 00:03:03.260
Some people like that, some people don't,

50
00:03:03.260 --> 00:03:05.660
I'm not passing judgment
that browserify is bad.

51
00:03:05.660 --> 00:03:07.990
I actually think it's a great tool but

52
00:03:07.990 --> 00:03:11.980
my choice here was I don't wanna invoke
some other tool that I have to teach you.

53
00:03:11.980 --> 00:03:16.230
So, another way of doing it plain
barebones is to put in the UMD wrapper.

54
00:03:16.230 --> 00:03:19.360
And I don't write this every
time I just duplicate my file.

55
00:03:19.360 --> 00:03:21.320
[LAUGH] I duplicated another module and

56
00:03:21.320 --> 00:03:23.410
I don't even think about
the boilerplate stuff.

57
00:03:24.590 --> 00:03:27.310
The contents of my module
is what starts here and

58
00:03:27.310 --> 00:03:30.150
you'll notice that my
module is in strict mode.

59
00:03:30.150 --> 00:03:34.250
And I have this init function and
I have a little placeholder here,

60
00:03:34.250 --> 00:03:35.650
a comments placeholder.

61
00:03:35.650 --> 00:03:38.850
That's where the compiled
templates get put into.

62
00:03:38.850 --> 00:03:42.950
So, this is a wrapper and
I compile all the templates with grips and

63
00:03:42.950 --> 00:03:45.940
I stuff all of that executable
code right in here.

64
00:03:47.150 --> 00:03:51.422
And that is the Tmpls.js file that can
work identically in both the browser and

65
00:03:51.422 --> 00:04:00.037
the server.
&gt;&gt; Kyle Simpson: Okay.

66
00:04:02.033 --> 00:04:03.155
&gt;&gt; Kyle Simpson: The other thing that

67
00:04:03.155 --> 00:04:07.517
build templates does, in addition to
building the initial template bundle,

68
00:04:07.517 --> 00:04:08.719
is it sets up a watch.

69
00:04:09.900 --> 00:04:14.797
And this watch is duplicating the same
sort of feature that you've probably used

70
00:04:14.797 --> 00:04:16.823
in something like grunt or gulp.

71
00:04:16.823 --> 00:04:18.991
I'm setting up a watch to listen for

72
00:04:18.991 --> 00:04:22.255
templates being changed in
my templates directory.

73
00:04:22.255 --> 00:04:26.062
Every time I save a file,
this watch will automatically kick in,

74
00:04:26.062 --> 00:04:29.420
it'll see that file had been created or
changed.

75
00:04:29.420 --> 00:04:33.297
It'll kick in and
re-invoke my build template scripts or

76
00:04:33.297 --> 00:04:36.210
it'll rebuild my template bundle
every time I make a change.

77
00:04:36.210 --> 00:04:38.180
I don't have to go back to
the command line and do it,

78
00:04:38.180 --> 00:04:40.030
it just automatically watches it.

79
00:04:40.030 --> 00:04:43.550
So, essentially when I start this up,
I start up build templates and

80
00:04:43.550 --> 00:04:46.190
then I don't think about it anymore and
it automatically builds.

81
00:04:47.370 --> 00:04:53.725
Now another thing on that topic is,
&gt;&gt; Kyle Simpson: I said,

82
00:04:53.725 --> 00:04:58.260
I had watch going on in my Node server
process, so I'm back in server.js.

83
00:04:58.260 --> 00:05:03.260
And I said I had Node going on
in my server watch process.

84
00:05:03.260 --> 00:05:04.660
Where's that going?

85
00:05:04.660 --> 00:05:07.900
Here, I have another watch.createMonitor.

86
00:05:07.900 --> 00:05:12.180
And I'm watching for
the Tmpls.js file to change.

87
00:05:14.296 --> 00:05:16.610
This is an interesting trick I
haven't really seen a lot of other

88
00:05:16.610 --> 00:05:17.510
frameworks doing.

89
00:05:17.510 --> 00:05:22.260
I'm not saying that nobody else is
doing it but essentially what I want

90
00:05:22.260 --> 00:05:27.540
is to not have to restart my server
if my templates have changed.

91
00:05:27.540 --> 00:05:31.910
So, I'm hot reloading my templates
bundle into my server instance

92
00:05:31.910 --> 00:05:33.720
every time it changes.

93
00:05:33.720 --> 00:05:36.310
In other words,
when I change a template file,

94
00:05:36.310 --> 00:05:40.742
one watch process rebuilds the template
bundle and another watch process

95
00:05:40.742 --> 00:05:45.630
re-hot loads it directly into my
server instance without restarting.

96
00:05:45.630 --> 00:05:50.000
So, I can just do a refresh of my page
immediately after changing my template and

97
00:05:50.000 --> 00:05:52.440
bam the new view is available.

98
00:05:52.440 --> 00:05:57.320
So, let me illustrate that process
just to kind of point that out and

99
00:05:57.320 --> 00:06:01.280
that will segue us into talking
about these grips templates.

100
00:06:01.280 --> 00:06:06.810
So, I just have a basic one, this index,
here's my content, my basic content.

101
00:06:06.810 --> 00:06:09.600
So, if I wanted to make a change,

102
00:06:12.120 --> 00:06:15.390
I don't have that build
template process running yet.

103
00:06:15.390 --> 00:06:17.090
So, before I even save the file,

104
00:06:17.090 --> 00:06:22.360
let me start up that build
templates watch that's gonna go on.

105
00:06:22.360 --> 00:06:23.540
So, now that's in the background,

106
00:06:23.540 --> 00:06:25.490
the build templates watcher
is in the background.

107
00:06:25.490 --> 00:06:31.120
Actually we run it, you have to run it
with the watch thing to make it do that.

108
00:06:31.120 --> 00:06:34.370
So, now it's watching for
that change to the template.

109
00:06:35.840 --> 00:06:40.737
So, when I save this file,
&gt;&gt; Kyle Simpson: They can come

110
00:06:40.737 --> 00:06:44.410
back to the command line and you'll see
that it is now rebuilt my template bundle.

111
00:06:45.470 --> 00:06:50.540
My server was automatically redoing or
watching for those things.

112
00:06:50.540 --> 00:06:52.530
So, if I look at my server log file,

113
00:07:03.720 --> 00:07:06.542
&gt;&gt; Kyle Simpson: You notice
that it reloaded my templates.

114
00:07:06.542 --> 00:07:09.402
So, my server has reloaded
the templates into its process.

115
00:07:09.402 --> 00:07:14.043
Which means without even restarting
the server, if I come back over here,

116
00:07:14.043 --> 00:07:18.290
now it's updated and
it can serve it up from an initial page.

117
00:07:18.290 --> 00:07:21.791
And we can also hot load that
JavaScript into the browser if we want.

118
00:07:21.791 --> 00:07:25.916
I don't have that process set up but it's
easy to do the same thing in your browser

119
00:07:25.916 --> 00:07:31.841
and hot load your new templates.
&gt;&gt; Kyle Simpson: A couple of quick things

120
00:07:31.841 --> 00:07:37.160
about grips, just if you were at all
interested in learning how grips works.

121
00:07:37.160 --> 00:07:43.865
I have,
&gt;&gt; Kyle Simpson: A little

122
00:07:43.865 --> 00:07:46.830
online playground for the template engine.

123
00:07:46.830 --> 00:07:52.240
So, these four boxes,
this is the template that you write and

124
00:07:52.240 --> 00:07:55.080
then this shows you what
it gets compiled into.

125
00:07:55.080 --> 00:07:58.730
And by default that's the code that's
compiled with all of the debug stuff in

126
00:07:58.730 --> 00:08:01.930
it, so that it gives you nice
friendly error messages.

127
00:08:01.930 --> 00:08:05.750
And that's what you'd use in dev, but if
you wanted to switch it to being smaller

128
00:08:05.750 --> 00:08:10.110
and being production without debug stuff,
switching the mode, this shows you how

129
00:08:10.110 --> 00:08:14.740
much shorter the code is when I
don't have all the debug stuff in.

130
00:08:14.740 --> 00:08:17.880
So, you can kind of get a sense and if
you wanted to look at the code that I was

131
00:08:17.880 --> 00:08:22.060
producing, it's pretty highly compressed
stuff but if you at all cared about it.

132
00:08:22.060 --> 00:08:24.880
Most of the stuff in there
is things like this which

133
00:08:24.880 --> 00:08:27.479
are producing information that
an error message can use.

134
00:08:28.990 --> 00:08:33.470
That's a distinction point between
grips and other templating engines

135
00:08:33.470 --> 00:08:37.970
is that there's actually quite a few
features in here that are built for

136
00:08:37.970 --> 00:08:41.820
much better error messaging than you've
seen with other template engines.

137
00:08:41.820 --> 00:08:46.590
It's much, much richer, stack trace based,
sorts of error messaging from your

138
00:08:46.590 --> 00:08:50.550
templates, not only from, if you have
an error compiling your template but

139
00:08:50.550 --> 00:08:53.780
much more so if you have a runtime
error with your template.

140
00:08:53.780 --> 00:08:56.990
There aren't a lot of template engines
that do runtime error checking in any

141
00:08:56.990 --> 00:08:58.130
graceful way.

142
00:08:58.130 --> 00:09:00.010
But that's been built into
grips from the beginning.

143
00:09:01.140 --> 00:09:03.540
All right, so you can change
something about your template.

144
00:09:03.540 --> 00:09:05.650
You can change something about
the data that's being put in.

145
00:09:05.650 --> 00:09:09.580
So, if I change this to world too and

146
00:09:09.580 --> 00:09:15.410
I come out on focus from that,
it doesn't need to be recompiled but

147
00:09:15.410 --> 00:09:18.670
it will re-render and
shows you now that it says world too.

148
00:09:18.670 --> 00:09:23.770
If I change my template up here,
I'd like to add in an extra couple

149
00:09:23.770 --> 00:09:30.930
of exclamation marks, it will actually
recompile the template first.

150
00:09:30.930 --> 00:09:33.550
And then it will rerender it and
show you the info down there.

151
00:09:33.550 --> 00:09:36.690
So, there's a little playground if you
wanted it all to learn about the syntax.

152
00:09:36.690 --> 00:09:40.780
There's a bunch of documentation and
then a bunch of different preset

153
00:09:42.040 --> 00:09:46.440
examples that show you doing different
things with the template engine and

154
00:09:46.440 --> 00:09:48.470
how to produce this stuff.

155
00:09:48.470 --> 00:09:50.750
So, if you wanna learn grips,
that might help a little bit.

156
00:09:52.590 --> 00:09:55.620
But we're not really doing a lot of
complicated stuff with grips here.

157
00:09:55.620 --> 00:10:01.040
All I'm doing is I'm defining, the define
tag is how you define a partial.

158
00:10:01.040 --> 00:10:05.500
To include a partial from another
location, you just say partial and

159
00:10:05.500 --> 00:10:07.300
give it the ID of the partial.

160
00:10:07.300 --> 00:10:09.710
So, I have this stuff template down here.

161
00:10:09.710 --> 00:10:14.822
And of course, all I need to do
then is add more stuff into any

162
00:10:14.822 --> 00:10:20.880
part of my template, click Save,
let those watches run for a moment.

163
00:10:20.880 --> 00:10:22.908
And now if I do a refresh,

164
00:10:22.908 --> 00:10:28.696
we see the exclamation show up.
&gt;&gt; Kyle Simpson: Grips

165
00:10:28.696 --> 00:10:33.572
is definitely a partials
based templating engine.

166
00:10:33.572 --> 00:10:37.302
So, we define things in
terms of template partials.

167
00:10:37.302 --> 00:10:40.329
Also you notice that files
can extend other files.

168
00:10:40.329 --> 00:10:43.472
So, I have a master template
that I've set up for

169
00:10:43.472 --> 00:10:46.475
the page which has like
my doctype stuff in it.

170
00:10:46.475 --> 00:10:51.553
And then I'm calling out to
a partial content which allows me

171
00:10:51.553 --> 00:10:57.450
to do essentially a basic but
powerful form of template inheritance.

172
00:10:57.450 --> 00:11:02.920
So, the index template inherits the master
and it overwrites certain partials.

173
00:11:03.940 --> 00:11:07.750
So, I can have lots of different
pages that inherit from master.

174
00:11:07.750 --> 00:11:12.270
I can have something that inherited
from index and override partials.

175
00:11:12.270 --> 00:11:14.580
So, it supports those sorts of features.

176
00:11:14.580 --> 00:11:19.190
Just gonna see if I had any examples of,
yeah, so here's how you drop in a value,

177
00:11:19.190 --> 00:11:21.190
instead of dropping in a partial.

178
00:11:21.190 --> 00:11:23.200
You're just gonna insert it.

179
00:11:23.200 --> 00:11:28.093
By the way,
grips does have a shorthand form of

180
00:11:28.093 --> 00:11:33.040
all of the,
&gt;&gt; Kyle Simpson: Syntax, so

181
00:11:33.040 --> 00:11:38.166
the long form is like it
uses words like define.

182
00:11:38.166 --> 00:11:42.495
But there's a shorthand form of all the
syntax if you prefer to write less code.

183
00:11:42.495 --> 00:11:47.490
And the short form, uses a single operator
in place of these different words.

184
00:11:47.490 --> 00:11:50.766
So, if you have a really
long complex template and

185
00:11:50.766 --> 00:11:53.652
you find yourself writing
a bunch of words,

186
00:11:53.652 --> 00:11:58.180
you might like the short form that
you can use, either form is valid.

187
00:11:58.180 --> 00:12:03.299
Okay,
&gt;&gt; Kyle Simpson: Main takeaway here is,

188
00:12:03.299 --> 00:12:07.280
it really would not matter at all
what template engine you like to use.

189
00:12:07.280 --> 00:12:12.700
I don't care if you wanna use mustache or
you wanna use dust or whatever.

190
00:12:12.700 --> 00:12:17.870
Whatever template engine suits you,
the same concept that I'm

191
00:12:17.870 --> 00:12:22.630
presenting here can be done very easily
with any of those templating engines.

192
00:12:22.630 --> 00:12:25.800
You just simply have a template
that you change a file,

193
00:12:25.800 --> 00:12:28.130
you have a watch that rebuilds it.

194
00:12:28.130 --> 00:12:31.550
You load that into some file
that you can use in both places.

195
00:12:31.550 --> 00:12:34.210
And then in my server,
if I wanna use the template engine,

196
00:12:34.210 --> 00:12:37.280
it's exactly the same as if
I'm using it in the browser.

197
00:12:37.280 --> 00:12:40.990
So, let's look at this loadPage route.

198
00:12:40.990 --> 00:12:44.290
You'll notice that I'm
calling out to my view

199
00:12:44.290 --> 00:12:45.878
sort of like a controller, if you like.

200
00:12:45.878 --> 00:12:50.610
I'm calling out to my view and I'm
calling this function called getPageHTML.

201
00:12:50.610 --> 00:12:55.370
That just simply invokes grips and it
loads the appropriate section of HTML and

202
00:12:55.370 --> 00:12:56.710
then it sends it back out.

203
00:12:58.016 --> 00:13:03.585
So, this View.getPageHTML
wouldn't have to change at all

204
00:13:03.585 --> 00:13:07.075
if you wanted to swap out
a different templating engine.

205
00:13:07.075 --> 00:13:11.515
You just go into that getPageHTML and
specify a different templating engine.

