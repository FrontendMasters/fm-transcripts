WEBVTT

1
00:00:00.000 --> 00:00:03.931
[MUSIC]

2
00:00:03.931 --> 00:00:07.549
&gt;&gt; Kyle Simpson: Now,
what about this react thing?

3
00:00:07.549 --> 00:00:15.275
The observation that we need to make
is that promises are really powerful.

4
00:00:15.275 --> 00:00:17.640
But they do not map well to event streams.

5
00:00:18.710 --> 00:00:22.680
Because a promise, once created,
can only be resolved once.

6
00:00:22.680 --> 00:00:26.330
Which would be great if you were only ever
gonna get one request against your server.

7
00:00:26.330 --> 00:00:29.367
But you're not.
You're gonna get lots of them.

8
00:00:29.367 --> 00:00:32.847
There is this principle of streams
which are what the request and

9
00:00:32.847 --> 00:00:35.060
response objects are themselves.

10
00:00:35.060 --> 00:00:39.380
But how do we asynchronously respond
every time a new stream spins up?

11
00:00:39.380 --> 00:00:40.600
How do we handle it?

12
00:00:40.600 --> 00:00:43.640
Well, one way of doing that,
if I were to just suggest some pseudocode.

13
00:00:43.640 --> 00:00:47.830
One way of doing that is you could have
a stream object that represented this

14
00:00:47.830 --> 00:00:49.710
stream of incoming requests.

15
00:00:49.710 --> 00:00:53.650
And you could listen for
whatever the event might be.

16
00:00:53.650 --> 00:00:58.200
I think it's the request event
that the HTTP server spends.

17
00:00:59.470 --> 00:01:04.482
And inside of here,
&gt;&gt; Kyle Simpson: that is,

18
00:01:04.482 --> 00:01:06.390
every time a new request comes in.

19
00:01:06.390 --> 00:01:09.520
You could fire off your whole stream
of routing processing inside of

20
00:01:09.520 --> 00:01:10.900
this function.

21
00:01:10.900 --> 00:01:13.970
And many people do that,
and it's perfectly fine.

22
00:01:13.970 --> 00:01:17.860
But one of the downsides to it is that
now you just have a regular function.

23
00:01:17.860 --> 00:01:20.762
And all of the stuff has to be
self-contained inside of that function.

24
00:01:20.762 --> 00:01:26.621
And it's a little bit awkward to call out
other modules in your application and

25
00:01:26.621 --> 00:01:27.432
so forth.

26
00:01:27.432 --> 00:01:30.430
Redefining, if I were to
just sort of pseudocode it.

27
00:01:30.430 --> 00:01:34.171
If I had some big stream of
promise chain going on here.

28
00:01:34.171 --> 00:01:37.703
I'd have to be repeating that promise
chain over, and over, and over again,

29
00:01:37.703 --> 00:01:39.610
every time this event fired.

30
00:01:39.610 --> 00:01:42.330
Cuz I'd make one promise chain for
each request.

31
00:01:44.260 --> 00:01:45.861
Essentially, if we were to boil down.

32
00:01:45.861 --> 00:01:47.817
If you've heard about
reactive programming.

33
00:01:47.817 --> 00:01:52.718
If you've heard about the Microsoft RxJS
library, super fantastic,

34
00:01:52.718 --> 00:01:54.442
but also crazy complex.

35
00:01:54.442 --> 00:01:56.760
The stuff that they
support is unbelievable.

36
00:01:58.440 --> 00:02:02.000
If you've heard about reactive programming
and about that whole model, essentially,

37
00:02:02.000 --> 00:02:03.470
when you boil it all down.

38
00:02:03.470 --> 00:02:06.830
What they have is this notion
of inverting this paradigm

39
00:02:06.830 --> 00:02:09.030
to create something that
they call an observable.

40
00:02:10.350 --> 00:02:14.195
An observable is something that is gonna
get notified every time an event happens.

41
00:02:14.195 --> 00:02:18.654
It will send out a new stream of
asynchronous stuff every time that event

42
00:02:18.654 --> 00:02:19.330
happens.

43
00:02:19.330 --> 00:02:24.984
So it's a way to adapt your asynchronous
flow control to an event stream.

44
00:02:24.984 --> 00:02:29.563
They have a whole bunch of different
ways in the RxJS library of doing that.

45
00:02:29.563 --> 00:02:34.630
By the way, my usage of react and
my usage of the word reactive programming

46
00:02:34.630 --> 00:02:38.870
is not at all the same thing as
the Facebook React framework.

47
00:02:38.870 --> 00:02:42.240
It's a very unfortunate
overlap of terminology.

48
00:02:42.240 --> 00:02:45.600
This doesn't have anything at
all to do with Facebook's React.

49
00:02:45.600 --> 00:02:49.700
They're a virtual DOM rendering thing
that mostly runs in the browser.

50
00:02:49.700 --> 00:02:51.140
That's not we're talking about here.

51
00:02:51.140 --> 00:02:52.994
We're talking about reactive programming.

52
00:02:52.994 --> 00:03:00.190
Reactive programming being, essentially,
adapting a stream to an asynchronous flow.

53
00:03:00.190 --> 00:03:04.104
In my library,
I have a method called react.

54
00:03:04.104 --> 00:03:07.967
Which allows you,
off the end of the react,

55
00:03:07.967 --> 00:03:12.780
to define an arbitrary chain
of your behavior, once.

56
00:03:13.980 --> 00:03:15.580
And every time you call the trigger,

57
00:03:15.580 --> 00:03:18.760
it will fire off a new
instance of the chain for you.

58
00:03:18.760 --> 00:03:19.700
So it's uninverted.

59
00:03:19.700 --> 00:03:23.800
Instead of defining in the chain inside
of the handler, we define the handler and

60
00:03:23.800 --> 00:03:25.360
then the chain.

61
00:03:25.360 --> 00:03:28.990
That really is, actually,
the most 50,000-foot,

62
00:03:28.990 --> 00:03:32.058
basic view of what reactive
programming is about.

63
00:03:32.058 --> 00:03:36.820
Is inverting that paradigm to adapt
streams to asynchronous flow control.

64
00:03:36.820 --> 00:03:38.098
So it's really nice and easy here.

65
00:03:38.098 --> 00:03:40.460
All I have to do is listen for
the request event.

66
00:03:40.460 --> 00:03:44.353
Instead of having a function that
has to declare all of my stuff,

67
00:03:44.353 --> 00:03:45.732
I just trigger it off.

68
00:03:45.732 --> 00:03:49.385
And that's what runs my router
through this runner function.

69
00:03:53.030 --> 00:03:55.974
&gt;&gt; Kyle Simpson: I understand if you
haven't done a lot of asynchronous

70
00:03:55.974 --> 00:03:58.345
programming with promises and generator.

71
00:03:58.345 --> 00:04:02.660
Some of that that I just glossed over
might feel little bit like, wait a minute.

72
00:04:02.660 --> 00:04:04.655
I haven't dealt with promises and
generators before.

73
00:04:04.655 --> 00:04:05.720
That's fine.

74
00:04:05.720 --> 00:04:08.470
There's a lot of work to do to
relearn all of these things.

75
00:04:08.470 --> 00:04:12.080
I've been doing it for a while, so
it's easy for me to just rattle off.

76
00:04:12.080 --> 00:04:14.100
I understand it may be
new to a lot of you.

77
00:04:14.100 --> 00:04:17.450
There's lots of resources
out there about this topic.

78
00:04:17.450 --> 00:04:18.710
I have a book on it.

79
00:04:18.710 --> 00:04:22.310
There's a couple of dozen different
blog posts that are out there about it.

80
00:04:23.680 --> 00:04:26.100
There's a great talk by a guy named Jafar,

81
00:04:26.100 --> 00:04:30.470
who's got a training with
Frontend Masters on asynchronous stuff.

82
00:04:30.470 --> 00:04:33.742
He's really even pushing the envelope
further than even I'm talking about.

83
00:04:33.742 --> 00:04:37.280
I mean, he's going crazy with new
stuff that he's proposing for ES7.

84
00:04:37.280 --> 00:04:42.620
So there's dozens of different ways
that you can start to learn more about

85
00:04:42.620 --> 00:04:44.070
asynchronous programming.

86
00:04:44.070 --> 00:04:46.650
The point of today's talk is not
really to get too bogged down in

87
00:04:46.650 --> 00:04:48.580
the weeds with asynchronous programming.

88
00:04:48.580 --> 00:04:52.514
But I just wanted to point
out that those few lines,

89
00:04:52.514 --> 00:04:57.669
plus this 40-line function,

90
00:04:57.669 --> 00:05:02.520
is, essentially, a full and complete
replacement of the express framework.

91
00:05:02.520 --> 00:05:04.485
Or the COA framework.

92
00:05:04.485 --> 00:05:07.518
I'm just trying to illustrate
that you can do these concepts

93
00:05:07.518 --> 00:05:11.080
without necessarily having to
learn a whole new framework.

94
00:05:11.080 --> 00:05:11.932
&gt;&gt; Speaker 2: Do you mind a question?

95
00:05:11.932 --> 00:05:14.818
Asterisk, on that router thing,
you said that makes it generator?

96
00:05:14.818 --> 00:05:15.848
&gt;&gt; Kyle Simpson: That's
what makes it generator.

97
00:05:15.848 --> 00:05:18.391
&gt;&gt; Speaker 2: Is that
only a convention or?

98
00:05:18.391 --> 00:05:19.460
&gt;&gt; Kyle Simpson: No, that's a real thing.

99
00:05:20.590 --> 00:05:22.070
It's a syntactic requirement.

100
00:05:22.070 --> 00:05:22.570
&gt;&gt; Speaker 2: Okay.

101
00:05:24.870 --> 00:05:26.658
&gt;&gt; Speaker 3: Here's
a question that popped up.

102
00:05:31.692 --> 00:05:33.226
&gt;&gt; Kyle Simpson: How can
we export variables and

103
00:05:33.226 --> 00:05:34.880
functions to other JavaScript?

104
00:05:36.870 --> 00:05:40.410
Not sure if I understand the question.

105
00:05:44.200 --> 00:05:45.620
How can we export?

106
00:05:45.620 --> 00:05:48.491
Perhaps that question in
chat can be clarified?

107
00:05:48.491 --> 00:05:54.574
Cuz I'm not really sure what
the question is asking for.

108
00:05:54.574 --> 00:06:01.356
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kyle Simpson: I'm

109
00:06:01.356 --> 00:06:03.680
not saying frameworks are bad.

110
00:06:03.680 --> 00:06:07.800
I'm simply saying that frameworks make
a lot of extra stuff for you to learn.

111
00:06:07.800 --> 00:06:10.160
If you're looking for a way to get in and

112
00:06:10.160 --> 00:06:15.230
start playing with stuff without having
to learn fifteen other framework's APIs.

113
00:06:15.230 --> 00:06:17.730
This is just basic JavaScript.

114
00:06:17.730 --> 00:06:21.474
I'm showing you that the concepts
are much easier than the frameworks

115
00:06:21.474 --> 00:06:22.560
themselves can be.

116
00:06:23.820 --> 00:06:30.452
First thing I wanna illustrate
is working with those templates.

117
00:06:30.452 --> 00:06:35.341
In your shared-js folder,

118
00:06:35.341 --> 00:06:43.088
we can open up the index.grips.html file.

119
00:06:43.088 --> 00:06:44.832
Then I'm going to actually duplicate it.

120
00:06:44.832 --> 00:06:48.835
I'm gonna save it off to another
name in that same folder.

121
00:06:48.835 --> 00:06:55.190
I'm going to call it about.grips.html.

122
00:06:55.190 --> 00:06:58.720
So now I have two different files that
both have the same content in them.

123
00:07:00.180 --> 00:07:04.492
Let's take what's in about.grips.

124
00:07:04.492 --> 00:07:07.900
And let's change it so that it's
clear that that's the about page.

125
00:07:07.900 --> 00:07:10.827
Maybe change the content of your h1.

126
00:07:29.185 --> 00:07:32.778
&gt;&gt; Kyle Simpson: I have created a file,
and saved it, and

127
00:07:32.778 --> 00:07:37.869
I have not touched my server in any way,
shape, or form.

128
00:07:37.869 --> 00:07:41.619
I'm not even going to change the master
template to add it to the nav, but

129
00:07:41.619 --> 00:07:43.250
I can in the next step.

130
00:07:43.250 --> 00:07:47.945
All I wanna do is illustrate that having
done nothing but add a file and save it.

131
00:07:47.945 --> 00:07:52.590
Hopefully, this doesn't blow up on
me like other live demos have today.

132
00:07:52.590 --> 00:07:56.763
I should just be able to add
/about on to the end of the URL.

133
00:07:56.763 --> 00:08:00.600
Actually, I'm gonna have to refresh so
I get the new JavaScript.

134
00:08:00.600 --> 00:08:06.487
So refresh, and
then add /about onto the end of the URL.

135
00:08:08.915 --> 00:08:10.840
&gt;&gt; Kyle Simpson: And it should load
the about page that we created.

136
00:08:13.340 --> 00:08:15.333
That was a load from the server.

137
00:08:17.928 --> 00:08:19.190
&gt;&gt; Kyle Simpson: Because
the server was aware of it.

138
00:08:19.190 --> 00:08:23.942
So now let's update our nav,
go into the master grips template.

139
00:08:26.805 --> 00:08:28.847
&gt;&gt; Kyle Simpson: You'll notice that I have

140
00:08:40.613 --> 00:08:42.249
&gt;&gt; Kyle Simpson: a nav
element here with a link.

141
00:08:42.249 --> 00:08:43.719
I'm just gonna add another one.

142
00:08:51.983 --> 00:08:53.150
&gt;&gt; Kyle Simpson: That's it.

143
00:08:53.150 --> 00:08:54.544
Just added another one.

144
00:09:00.805 --> 00:09:02.424
&gt;&gt; Kyle Simpson: Having
saved that file now,

145
00:09:02.424 --> 00:09:06.010
everything has completely rebuilt
itself in the background.

146
00:09:06.010 --> 00:09:09.180
So when I refresh my page,

147
00:09:09.180 --> 00:09:14.300
I now have a nav that I can click on and
switch between my two pages.

148
00:09:15.980 --> 00:09:19.280
I had to make any changes to any of my
routing, or any of my code, or whatever.

149
00:09:19.280 --> 00:09:23.421
Because that code is all dynamically
adapting itself to whatever templates

150
00:09:23.421 --> 00:09:24.267
are existing.

151
00:09:24.267 --> 00:09:26.993
As long as there's a template for
that URL, and

152
00:09:26.993 --> 00:09:30.210
it can recognize the template
based upon the URL.

153
00:09:30.210 --> 00:09:32.640
It automatically invokes and
renders that template.

154
00:09:32.640 --> 00:09:34.610
So now, as I'm switching back and

155
00:09:34.610 --> 00:09:38.560
forth, these are not actually
loading from the server anymore.

156
00:09:38.560 --> 00:09:41.340
These are rerun during that
partial in the page, and

157
00:09:41.340 --> 00:09:43.724
swapping it in just like
any normal single-page app.

158
00:09:44.780 --> 00:09:48.645
Whenever I do a refresh,
that's when it actually makes an initial

159
00:09:48.645 --> 00:09:51.225
request to the server and
the server renders it.

160
00:09:51.225 --> 00:09:53.909
And then immediately
the JavaScript takes back over,

161
00:09:53.909 --> 00:09:56.369
and now we're running in
single-page app mode.

