WEBVTT

1
00:00:00.000 --> 00:00:03.838
[MUSIC]

2
00:00:03.838 --> 00:00:08.912
&gt;&gt; Kyle Simpson: So
now we wanna do that same kind of

3
00:00:08.912 --> 00:00:14.270
check and call logic in the about.

4
00:00:14.270 --> 00:00:17.760
But first,
we need to give a way to specify those.

5
00:00:17.760 --> 00:00:20.529
So let's come to our template or
our about grips template.

6
00:00:22.220 --> 00:00:25.724
And let's add in a couple of input boxes.

7
00:00:51.114 --> 00:00:55.749
&gt;&gt; Kyle Simpson: So we got two input boxes
that you need to be able to set some

8
00:00:55.749 --> 00:00:57.011
numbers into.

9
00:01:01.170 --> 00:01:04.975
&gt;&gt; Kyle Simpson: So in our in init
function, this call, this function's

10
00:01:04.975 --> 00:01:10.309
already starting to get long, so I'm
going to re-factor by pulling that out.

11
00:01:14.081 --> 00:01:16.169
&gt;&gt; Kyle Simpson: Somebody
said Foo JS is wrong.

12
00:01:20.100 --> 00:01:21.290
&gt;&gt; Kyle Simpson: Yep it does.

13
00:01:21.290 --> 00:01:22.130
Good catch.

14
00:01:22.130 --> 00:01:23.185
Thanks Vincent.

15
00:01:23.185 --> 00:01:27.240
[LAUGH] We would have found
that eventually I'm sure.

16
00:01:27.240 --> 00:01:29.530
All right so
I was pulling out that function and

17
00:01:29.530 --> 00:01:30.980
instead of using an inline function.

18
00:01:30.980 --> 00:01:33.518
I wanna make that it's own things
cuz I'm gonna be adding stuff to it.

19
00:01:52.411 --> 00:01:53.512
&gt;&gt; Kyle Simpson: Okay.

20
00:01:59.251 --> 00:02:01.394
&gt;&gt; Kyle Simpson: Let's get our min and
our max out.

21
00:02:28.923 --> 00:02:31.917
&gt;&gt; Kyle Simpson: First step before we try
to make the request is we want to do our

22
00:02:31.917 --> 00:02:33.880
validation, right?

23
00:02:33.880 --> 00:02:37.949
So I want to invoke
that validate function.

24
00:02:37.949 --> 00:02:46.178
I wanna say if,
&gt;&gt; Kyle Simpson: Validate.checkMinMax.

25
00:02:52.191 --> 00:02:54.590
&gt;&gt; Kyle Simpson: Question is, can I
share all this code that I'm writing?

26
00:02:54.590 --> 00:02:56.925
Absolutely, we'll make
this available as well.

27
00:02:56.925 --> 00:02:59.586
Okay.

28
00:02:59.586 --> 00:03:01.624
&gt;&gt; Student: You're not
passing in the actual values,

29
00:03:01.624 --> 00:03:03.329
you're passing in the [INAUDIBLE].

30
00:03:03.329 --> 00:03:06.568
&gt;&gt; Kyle Simpson: You're
right I need to call.

31
00:03:18.676 --> 00:03:24.061
&gt;&gt; Kyle Simpson: All right so if I'm
local then all I need to do is pass those

32
00:03:24.061 --> 00:03:30.360
locally but if I'm doing an API,
I need jQuery to add that data on.

33
00:03:31.740 --> 00:03:40.371
So I'm going to set up this ajax call with
my data is my object min, min and max max.

34
00:03:59.815 --> 00:04:04.743
&gt;&gt; Kyle Simpson: And jQuery should take
care of packaging up this data object as

35
00:04:04.743 --> 00:04:09.313
the GET parameters,
sending that along to the API call.

36
00:04:09.313 --> 00:04:14.590
Of course which are server code that we've
already written, will parse that out.

37
00:04:14.590 --> 00:04:17.519
If I'm not forgetting anything about
JQuery at least that's how it should work.

38
00:04:19.380 --> 00:04:24.390
So we are using the exact same
validate.checkMinMax rule

39
00:04:24.390 --> 00:04:26.690
set in both places.

40
00:04:26.690 --> 00:04:30.148
And the only difference is in
code here is that in the DOM.

41
00:04:30.148 --> 00:04:31.992
We have to deal with DOM elements and

42
00:04:31.992 --> 00:04:35.069
on the server we're dealing
with request URL parameters.

43
00:04:35.069 --> 00:04:37.516
So those parts we don't share.

44
00:04:37.516 --> 00:04:41.451
But the part the main meat of it, the
validation rules are hidden away inside

45
00:04:41.451 --> 00:04:45.593
of our validate module and we're just
going to share that thing in both places.

46
00:04:45.593 --> 00:04:48.698
&gt;&gt; Student: Maybe minor, but
if you're doing it locally,

47
00:04:48.698 --> 00:04:50.871
you want to check the min, max but

48
00:04:50.871 --> 00:04:56.085
if you're doing it remotely wouldn't you
want the remote side to do the check?

49
00:04:56.085 --> 00:04:58.845
&gt;&gt; Kyle Simpson: So
that's actually a great point.

50
00:04:58.845 --> 00:05:03.670
That's a really good segue here.

51
00:05:03.670 --> 00:05:05.820
Most of the time, when people write apps,

52
00:05:05.820 --> 00:05:10.710
they actually want to invoke the data
validation in the browser so that they

53
00:05:10.710 --> 00:05:14.910
can give an immediate response to
the user without waiting for a roundtrip.

54
00:05:14.910 --> 00:05:17.900
So here we would want to
validate first in the browser,

55
00:05:17.900 --> 00:05:21.021
even though we know the server
is also going to validate.

56
00:05:21.021 --> 00:05:25.398
And the reason for that is, I'd rather
pay the penalty of validating twice and

57
00:05:25.398 --> 00:05:27.797
letting the user get immediate feedback.

58
00:05:27.797 --> 00:05:32.390
If you didn't want that, if you literally
just wanted the server to do it then

59
00:05:32.390 --> 00:05:34.943
there wouldn't be any need to run it here.

60
00:05:34.943 --> 00:05:37.690
You could just throw
an Ajax request against it.

61
00:05:37.690 --> 00:05:41.409
But the difference then would be they'd
get immediate errors in a local case and

62
00:05:41.409 --> 00:05:42.808
non immediate errors later.

63
00:05:42.808 --> 00:05:45.274
&gt;&gt; Student: Yeah yeah I get that.

64
00:05:45.274 --> 00:05:50.771
&gt;&gt; Kyle Simpson: So typically people do
run data validation rules in the browser.

65
00:05:50.771 --> 00:05:56.766
&gt;&gt; Student: Your example though isn't ever
going to hit the remote side validation.

66
00:05:56.766 --> 00:05:58.380
Or it will just always be true.

67
00:06:00.490 --> 00:06:01.530
&gt;&gt; Kyle Simpson: Except from the fact,

68
00:06:01.530 --> 00:06:05.344
if somebody tried to hijack my app and
pass data.

69
00:06:05.344 --> 00:06:06.810
[CROSSTALK] That's why we have to.

70
00:06:06.810 --> 00:06:07.636
What's that?

71
00:06:07.636 --> 00:06:08.750
&gt;&gt; Student: Are you gonna hijack your App.

72
00:06:08.750 --> 00:06:09.630
&gt;&gt; Kyle Simpson: We can try.

73
00:06:09.630 --> 00:06:12.240
Right.
I can create a get URL that

74
00:06:12.240 --> 00:06:13.340
tries it right.

75
00:06:13.340 --> 00:06:15.650
But the point is we have to
validate it in both places.

76
00:06:15.650 --> 00:06:20.300
The server has to always validate cuz it
can't trust that the browser did validate.

77
00:06:20.300 --> 00:06:23.190
We're validating in the browser so
that we can give an immediate response.

78
00:06:25.890 --> 00:06:29.150
So if we didn't correctly
pass the validation

79
00:06:29.150 --> 00:06:31.990
we do wanna give an immediate
response to the user.

80
00:06:33.150 --> 00:06:36.770
So what I'm actually gonna do
to give an immediate response

81
00:06:38.710 --> 00:06:43.830
is I'm gonna reuse my render answer just
so I don't have to do any extra work here.

82
00:06:43.830 --> 00:06:45.898
I'm just gonna reuse my render answer.

83
00:06:56.930 --> 00:07:00.657
&gt;&gt; Kyle Simpson: And I'm gonna render my
error message directly in the same place

84
00:07:00.657 --> 00:07:03.152
that that random number gets thrown into.

85
00:07:04.849 --> 00:07:08.630
&gt;&gt; Kyle Simpson: So
a bunch of different work moving pieces.

86
00:07:08.630 --> 00:07:14.500
Hopefully all of these pieces,
I'm not thinking of anything that I've

87
00:07:14.500 --> 00:07:17.770
done wrong but obviously there's a pretty
good chance that something's broken.

88
00:07:17.770 --> 00:07:18.590
But let's just try it.

89
00:07:18.590 --> 00:07:20.220
Let's restart our server.

90
00:07:22.190 --> 00:07:25.840
We only restarting our server cuz we
actually made changes to the server code.

91
00:07:25.840 --> 00:07:28.780
If everything that we changed
was purely browser side.

92
00:07:28.780 --> 00:07:32.720
Or template related we don't need
to restart the server at all.

93
00:07:32.720 --> 00:07:34.491
We just need to refresh the browser.

94
00:07:34.491 --> 00:07:35.600
Okay.

95
00:07:35.600 --> 00:07:42.022
So I'll be optimistic and
close my console,

96
00:07:42.022 --> 00:07:45.920
uh-oh something failed.

97
00:07:45.920 --> 00:07:50.122
Probably a good sign that
something's wrong with my.

98
00:07:50.122 --> 00:07:51.440
&gt;&gt; Student: Look on
your first [INAUDIBLE].

99
00:07:51.440 --> 00:07:52.767
&gt;&gt; Kyle Simpson: Now I got a problem here.

100
00:07:52.767 --> 00:07:55.590
[INAUDIBLE] My first shell
is my watch on my templates.

101
00:07:55.590 --> 00:07:59.840
But, this is why I have a server logs
telling me that I got a problem.

102
00:08:04.190 --> 00:08:05.240
What problem is it giving me?

103
00:08:09.070 --> 00:08:10.510
Server line 188.

104
00:08:10.510 --> 00:08:11.842
I'm missing an parenthesis.

105
00:08:22.709 --> 00:08:27.004
&gt;&gt; Kyle Simpson: Probably a good idea to
check that server log before just assuming

106
00:08:27.004 --> 00:08:31.077
that things are working so
I'm just gonna zero it out for now.

107
00:08:31.077 --> 00:08:37.188
And then when I restart my server,
I'm just gonna watch the log.

108
00:08:46.674 --> 00:08:50.080
&gt;&gt; Kyle Simpson: Okay, so I'm not getting
any errors thrown, that's a better sign.

109
00:08:50.080 --> 00:08:51.420
Let's try to reload here.

110
00:08:51.420 --> 00:08:53.712
Okay, phew!

111
00:08:53.712 --> 00:08:55.240
That was an easy fix.

112
00:08:55.240 --> 00:08:56.520
All right, let's go to about.

113
00:08:56.520 --> 00:08:57.810
There's our input boxes.

114
00:08:57.810 --> 00:09:00.798
Now we have not entered anything in yet.

115
00:09:00.798 --> 00:09:06.910
And we know that these empty strings
are gonna get end up getting treated as

116
00:09:06.910 --> 00:09:14.040
either zeroes or as nans depending on how
that coercion ends up happening right.

117
00:09:14.040 --> 00:09:20.460
So if we pull out the value of an input
box that ends up with an empty string.

118
00:09:20.460 --> 00:09:23.450
Which we know that on our number
coercion inside of our validator,

119
00:09:23.450 --> 00:09:27.300
that's gonna end up coercing
the empty string to zero and zero.

120
00:09:27.300 --> 00:09:31.430
So we went into it that we would expect
if I just tried it just as is we'd

121
00:09:31.430 --> 00:09:32.240
expect a failure.

122
00:09:33.280 --> 00:09:34.730
So everybody following me.

123
00:09:34.730 --> 00:09:36.420
We'd expect to get an error message.

124
00:09:36.420 --> 00:09:40.449
So let's try it,
didn't work so what did I miss?

125
00:09:41.620 --> 00:09:43.065
Validate is not defined.

126
00:09:43.065 --> 00:09:43.970
That's interesting.

127
00:09:45.910 --> 00:09:48.398
So it's not finding my validate module.

128
00:09:48.398 --> 00:09:48.910
Aah!

129
00:09:48.910 --> 00:09:50.813
[LAUGH] I forgot to load it.

130
00:10:00.715 --> 00:10:02.018
&gt;&gt; Kyle Simpson: Let's try that again.

131
00:10:04.688 --> 00:10:09.785
&gt;&gt; Kyle Simpson: We're assuming
that we should get an error here.

132
00:10:12.145 --> 00:10:13.635
We didn't get an error, we got a zero.

133
00:10:13.635 --> 00:10:17.085
So let's do some debugging.

