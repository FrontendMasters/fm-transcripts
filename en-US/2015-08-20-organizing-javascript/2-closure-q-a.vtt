WEBVTT

1
00:00:00.000 --> 00:00:03.664
[MUSIC]

2
00:00:03.664 --> 00:00:06.998
&gt;&gt; Kyle: There's no question that the
first time somebody shows you closure it

3
00:00:06.998 --> 00:00:08.340
bends your brain.

4
00:00:08.340 --> 00:00:11.940
The tenth time somebody shows you
closure it's still bending your brain.

5
00:00:11.940 --> 00:00:15.660
So there should be no expectation of
this is your first time to see it.

6
00:00:15.660 --> 00:00:19.640
No expectation that it immediately
just clicks, it takes a while.

7
00:00:19.640 --> 00:00:25.410
But what I would say is this probably
comprises better than 95% of all code

8
00:00:25.410 --> 00:00:30.220
that I write, is in some way shape or form
relying upon an understanding of closure.

9
00:00:31.830 --> 00:00:37.020
So if you're looking for
the next place to go once you feel like

10
00:00:37.020 --> 00:00:42.700
you have kind of a grasp on the mechanics
of for loops and variables or whatever.

11
00:00:42.700 --> 00:00:47.189
The biggest conceptual thing that
you could spend time trying to

12
00:00:47.189 --> 00:00:48.943
understand is closure.

13
00:00:48.943 --> 00:00:50.255
It's the most important.

14
00:00:50.255 --> 00:00:53.709
That's why it was the first book that
I wrote in the series because I wanted

15
00:00:53.709 --> 00:00:55.603
everybody to know if you're looking for

16
00:00:55.603 --> 00:00:59.580
the first thing that you should spend some
time making sure you get, it's closure.

17
00:01:00.630 --> 00:01:05.153
Modules are how I design most of my
software a lot of people are like that.

18
00:01:05.153 --> 00:01:09.503
They design software using this, this is
what we call kind of the module pattern.

19
00:01:09.503 --> 00:01:14.100
And I don't have to think about how it
works anymore because closure is natural

20
00:01:14.100 --> 00:01:17.300
to me now that I've been doing it for
years.

21
00:01:17.300 --> 00:01:20.420
The first time you're doing it
you're having to remember like hey

22
00:01:20.420 --> 00:01:25.720
how's it able to access that name cuz it's
like inside and it still has access, okay.

23
00:01:25.720 --> 00:01:29.380
And you progressively get more and
more of your head around that.

24
00:01:29.380 --> 00:01:31.240
At some point it will be appropriate for

25
00:01:31.240 --> 00:01:35.420
each one of you to go read that
Scope Enclosures book and I cover it

26
00:01:35.420 --> 00:01:38.440
in extreme detail exactly how it works.
&gt;&gt; Speaker 2: Is the reason you call it

27
00:01:38.440 --> 00:01:40.740
closure because that stuff is
closed to the outside world?

28
00:01:40.740 --> 00:01:44.360
Is that why you call it that?
&gt;&gt; Kyle: It's not a name that I invented.

29
00:01:44.360 --> 00:01:48.027
It's a term that was invented
long before I was born.

30
00:01:48.027 --> 00:01:52.903
The etymology of that word as applied to
this concept is that what it is said,

31
00:01:52.903 --> 00:01:57.551
this is just an academic side note,
what it is said is this function speak

32
00:01:57.551 --> 00:02:01.305
because it accesses the variable
name outside of itself.

33
00:02:01.305 --> 00:02:06.218
It is said that speak closes over that
variable and that terminology actually

34
00:02:06.218 --> 00:02:10.074
comes from a branch of mathematics
called lambda calculus,

35
00:02:10.074 --> 00:02:13.620
which I've never taken and
I don't even understand.

36
00:02:13.620 --> 00:02:16.950
[LAUGH] So I not gonna teach
you Lambda calculus but that's

37
00:02:16.950 --> 00:02:21.280
the etymology actually goes all the way
back to the concept of lambda calculus.

38
00:02:21.280 --> 00:02:26.390
As applied to programming,
it's a super super powerful mechanism.

39
00:02:26.390 --> 00:02:29.290
Maybe the most important thing
that ever happened to programming.

40
00:02:30.430 --> 00:02:33.810
I know that sounds like a radical
statement to be making but It's really,

41
00:02:33.810 --> 00:02:34.590
really important.

42
00:02:36.070 --> 00:02:37.960
It just takes some effort.

43
00:02:37.960 --> 00:02:41.170
It's not like a for loop where I can
just show you a for loop and you get it.

44
00:02:41.170 --> 00:02:43.420
You gotta wrap your brain around it,
you gotta try it few times.

45
00:02:43.420 --> 00:02:44.600
&gt;&gt; Speaker 2: Are we doing this because

46
00:02:44.600 --> 00:02:48.030
like in other languages you
can specify things as private?

47
00:02:48.030 --> 00:02:51.160
And here you can't because you can kind of
move stuff, but now with this technique it

48
00:02:51.160 --> 00:02:53.720
keeps you from doing that?
&gt;&gt; Kyle: It is true that JavaScript does

49
00:02:53.720 --> 00:02:55.540
not have a notion of private,

50
00:02:55.540 --> 00:03:00.680
other than using this idea of they
are each step inside of the scope.

51
00:03:00.680 --> 00:03:03.570
Supporting stuff inside of
the function keeps it private.

52
00:03:03.570 --> 00:03:07.220
And there's a design principle
in software engineering called

53
00:03:07.220 --> 00:03:10.480
the principle of least privilege or
the principle of least exposure.

54
00:03:10.480 --> 00:03:15.260
And that design principle says keep
everything private by default and

55
00:03:15.260 --> 00:03:19.210
expose only the minimal
necessary to get the job done,

56
00:03:19.210 --> 00:03:21.590
rather than making
everything always available.

57
00:03:21.590 --> 00:03:25.030
So here what we're saying is there
would be definitely chances for

58
00:03:25.030 --> 00:03:26.890
me to have to expose both of these.

59
00:03:26.890 --> 00:03:31.200
But I could have a dozen other inner
functions that I don't want you to have

60
00:03:31.200 --> 00:03:34.960
access to, their implementation details,
their private things.

61
00:03:34.960 --> 00:03:37.750
If I don't expose it on the public API,
it's not available.

62
00:03:38.910 --> 00:03:41.960
So it does give us
the mechanics of private

63
00:03:41.960 --> 00:03:43.620
scoping.
&gt;&gt; Speaker 3: So

64
00:03:43.620 --> 00:03:47.830
rather than creating a function first
name you could just return name,

65
00:03:47.830 --> 00:03:51.319
right?
&gt;&gt; Kyle: So the problem is this,

66
00:03:52.930 --> 00:03:56.940
instead of having a function name here,
if I just said name, call, and name.

67
00:03:57.950 --> 00:04:02.587
Because this name is a primitive value,
it's just a string,

68
00:04:02.587 --> 00:04:07.846
if anything was allowed to change
that later on, if I had another thing

69
00:04:07.846 --> 00:04:12.739
like changeName,
&gt;&gt; Kyle: and

70
00:04:12.739 --> 00:04:17.456
that did this.

71
00:04:17.456 --> 00:04:22.164
And that change name was
a method that somebody could

72
00:04:22.164 --> 00:04:24.796
call outside.
&gt;&gt; Speaker 4: Are you trying something

73
00:04:24.796 --> 00:04:29.573
different?
&gt;&gt; Kyle: If I said o.changeName("Marc")

74
00:04:29.573 --> 00:04:33.434
and then I asked what is an o.name,

75
00:04:33.434 --> 00:04:37.682
you would think that it would be Marc but

76
00:04:37.682 --> 00:04:42.730
it's here's no such
thing as pointers here.

77
00:04:42.730 --> 00:04:47.960
So when we made this, it got sort of
a copy of what it was at the time.

78
00:04:47.960 --> 00:04:50.150
So this would still print out Kyle.

79
00:04:51.430 --> 00:04:54.480
So that's the reason why you would want to

80
00:04:54.480 --> 00:04:58.540
use a what's in programming terms
it's called an accessor method.

81
00:04:58.540 --> 00:05:02.320
It's a function that I call to get some
value out, rather than the value itself.

82
00:05:03.990 --> 00:05:06.960
Kind of a getting into
the weeds sort of a detail, but

83
00:05:06.960 --> 00:05:09.890
that's the main reason why I would
have something called a first name

84
00:05:09.890 --> 00:05:11.950
accessor method rather
than the property itself.

85
00:05:14.310 --> 00:05:17.660
If it was never gonna change, then there's
no reason why you wouldn't just show it.

86
00:05:17.660 --> 00:05:20.290
So it would be okay here
we were never gonna let you

87
00:05:20.290 --> 00:05:24.106
change it,
&gt;&gt; Kyle: Yeah?

88
00:05:24.106 --> 00:05:26.032
&gt;&gt; Speaker 5: So we have a few of them

89
00:05:26.032 --> 00:05:30.638
that you started using those
closer to get harder to

90
00:05:30.638 --> 00:05:35.420
test functions as you can access them.
&gt;&gt; Kyle: That's a good question and

91
00:05:35.420 --> 00:05:40.160
there's a really long and
complicated way for

92
00:05:40.160 --> 00:05:43.960
me to answer that question but
I don't want us to get too far off track.

93
00:05:43.960 --> 00:05:49.650
So I will suggest, first of all
I've addressed that in the books,

94
00:05:49.650 --> 00:05:55.580
in the other teachings but let me just
give you a quick glance at that topic.

95
00:05:55.580 --> 00:05:58.320
It is true that if you hide
something inside of this functions,

96
00:05:58.320 --> 00:06:01.720
if I had ten other functions here that
were not exposed to the outside world.

97
00:06:01.720 --> 00:06:04.190
They're not exposed and
therefore they're not testable.

98
00:06:05.540 --> 00:06:10.230
Some people think that the term unit
testing, that's the most common term for

99
00:06:10.230 --> 00:06:11.380
all people test stuff,

100
00:06:11.380 --> 00:06:15.560
some people think that unit testing
means everything has to be tested.

101
00:06:17.150 --> 00:06:21.170
And for them module design is kind of
a negative because it looks like there's

102
00:06:21.170 --> 00:06:22.710
a bunch of stuff that I can't test.

103
00:06:24.170 --> 00:06:27.950
And there have been new patterns and

104
00:06:27.950 --> 00:06:32.070
techniques that have been invented
to try to deal with that problem.

105
00:06:32.070 --> 00:06:35.060
The most notable of which is
called dependency injection,

106
00:06:36.590 --> 00:06:40.070
where I can do this sort of weird,
pass some stuff in and

107
00:06:40.070 --> 00:06:43.210
have it sort of magically access stuff or
whatever.

108
00:06:43.210 --> 00:06:46.950
It's like trying to do contortions
while playing the game Twister.

109
00:06:46.950 --> 00:06:48.566
Like they wanna have access to it and
they don't.

110
00:06:48.566 --> 00:06:52.679
So they make this backdoor that
they get access to it or whatever.

111
00:06:52.679 --> 00:06:56.633
I think that's my personal opinion,
all that stuff is nonsense.

112
00:06:56.633 --> 00:07:01.409
There is absolutely no point to any of
those contortions because I define unit

113
00:07:01.409 --> 00:07:05.094
testing in a much more reasonable fashion,
in my opinion.

114
00:07:05.094 --> 00:07:09.190
Which is that a unit is not just
any function that I wanna test.

115
00:07:09.190 --> 00:07:13.940
A unit is the smallest
indivisible piece of code

116
00:07:13.940 --> 00:07:16.720
that is used the way I'm gonna
use it in my real application.

117
00:07:17.720 --> 00:07:22.020
So let's imagine a module that
has 100 inner functions and

118
00:07:22.020 --> 00:07:26.841
just one public API method.
&gt;&gt; Kyle: In my definition,

119
00:07:26.841 --> 00:07:30.490
the unit test only tests
the one public API.

120
00:07:30.490 --> 00:07:35.446
And all the internal stuff is
intentionally untested implementation

121
00:07:35.446 --> 00:07:36.122
detail.

122
00:07:36.122 --> 00:07:38.765
You're not supposed to test
implementation detail.

123
00:07:38.765 --> 00:07:43.062
That's supposed to let you abstract the
implementation details and refactor and

124
00:07:43.062 --> 00:07:44.812
not have it break all your tests.

125
00:07:44.812 --> 00:07:49.510
So my definition comes from the outside
rather than from the inside, and

126
00:07:49.510 --> 00:07:51.829
there's a term for that by the way.

127
00:07:51.829 --> 00:07:55.502
The term is whether you prefer
what's called black box testing,

128
00:07:55.502 --> 00:08:00.042
which is I test from the outside having no
knowledge of the inside versus white box

129
00:08:00.042 --> 00:08:03.469
testing which is I test having
full knowledge of the inside.

130
00:08:04.840 --> 00:08:10.000
So my preference, when I do unit tests,
is to test with the black box methodology

131
00:08:10.000 --> 00:08:12.573
test from the outside in
rather than the inside out.

132
00:08:12.573 --> 00:08:17.370
That's a 50,000 foot view of a really,
really long complex

133
00:08:17.370 --> 00:08:23.410
conversation that hopefully at least gets
a couple of answers to that question.

134
00:08:23.410 --> 00:08:26.160
Let's scroll back up and see in this other

135
00:08:26.160 --> 00:08:28.750
questions if I missed other questions.
&gt;&gt; Speaker 5: I think a lot of people

136
00:08:28.750 --> 00:08:33.296
are asking for
a real world example of using the stuff.

137
00:08:33.296 --> 00:08:36.364
&gt;&gt; Kyle: So modules

138
00:08:36.364 --> 00:08:41.060
are the answer to that question,
everything that we design is a module.

139
00:08:41.060 --> 00:08:45.170
Let's imagine you are designing
a login page for your application.

140
00:08:45.170 --> 00:08:49.550
And there's an object that references the
user and it has internal properties like

141
00:08:49.550 --> 00:08:52.850
their username and their password and
their user ID and stuff.

142
00:08:52.850 --> 00:08:57.330
And on the outside, you have a public API,
like is user logged in and

143
00:08:57.330 --> 00:09:01.350
it just tells you true or false, if
they're logged in or not, that's a module.

144
00:09:01.350 --> 00:09:04.060
We got some private stuff
we got some public stuff

145
00:09:04.060 --> 00:09:08.280
we got methods that we can call we
got inner data, that's a module.

146
00:09:08.280 --> 00:09:12.955
So basically, anywhere that you would
create anything even remotely conceptual

147
00:09:12.955 --> 00:09:16.543
like that, the most natural way
to do that in JavaScript is with

148
00:09:16.543 --> 00:09:17.496
a module.
&gt;&gt; Speaker 6: So,

149
00:09:17.496 --> 00:09:20.535
can you relate it to
something like a class,

150
00:09:20.535 --> 00:09:25.850
in the case of an object-oriented word?
&gt;&gt; Kyle: I

151
00:09:25.850 --> 00:09:32.180
taught an entire class on the topic of why
classes in JavaScript are not correct.

152
00:09:32.180 --> 00:09:35.990
So I can't possibly answer that
question to its fullness either.

153
00:09:35.990 --> 00:09:39.235
I hate to keep saying this but
I got a whole book on it.

154
00:09:39.235 --> 00:09:43.150
[LAUGH] So
I would recommend reading the this and

155
00:09:43.150 --> 00:09:46.820
object prototypes book to get
a fuller answer to that question.

156
00:09:46.820 --> 00:09:51.270
But when you define classes in
a language like JavaScript,

157
00:09:51.270 --> 00:09:56.020
you don't have any notion of
encapsulation your privacy.

158
00:09:56.020 --> 00:09:58.390
The way classes are done in
JavaScript everything's public,

159
00:09:58.390 --> 00:10:00.170
everything is accessible.

160
00:10:00.170 --> 00:10:04.710
And modules have true
encapsulation with true privacy.

161
00:10:04.710 --> 00:10:08.821
So if privacy matters the module
is the much more natural design.

162
00:10:08.821 --> 00:10:10.071
&gt;&gt; Speaker 7: I just want to point out,

163
00:10:10.071 --> 00:10:14.123
you already mentioned this book, the
Eloquent JavaScript book talks about this

164
00:10:14.123 --> 00:10:16.248
in such beautiful language.
&gt;&gt; Kyle: Yes, it does,

165
00:10:16.248 --> 00:10:17.266
it's absolutely true.

166
00:10:17.266 --> 00:10:20.247
I recommended earlier,
I would repeat that,

167
00:10:20.247 --> 00:10:23.005
Eloquent JavaScript a great book to read.

168
00:10:23.005 --> 00:10:26.812
It is a companion to the stuff
we're talking about.

169
00:10:26.812 --> 00:10:33.736
Okay, let's go back here.
&gt;&gt; Kyle: What

170
00:10:33.736 --> 00:10:38.470
kind of applications you have, I hope I've
answered that now basically everything.

171
00:10:38.470 --> 00:10:42.152
He has some questions about
does this come from list.

172
00:10:42.152 --> 00:10:46.868
Yes closures, it's a topic in
lambda calculus that it's first

173
00:10:46.868 --> 00:10:51.856
showed up in computer programming
in the list programming family.

174
00:11:03.587 --> 00:11:05.174
&gt;&gt; Kyle: So to clarify return of

175
00:11:05.174 --> 00:11:11.103
the object, yes this object right here
that I'm returning from line 7 through 10

176
00:11:11.103 --> 00:11:16.972
that object itself represents the public
API, of which there are two properties.

177
00:11:16.972 --> 00:11:22.030
One of them is a method and one of them
here is just a string value property.

178
00:11:22.030 --> 00:11:30.438
But that is the public API for our module.
&gt;&gt; Kyle: When you say private,

179
00:11:30.438 --> 00:11:33.946
you just mean not accessible,
right, or do you mean not visible?

180
00:11:33.946 --> 00:11:36.360
Great question,
not a dumb question at all.

181
00:11:37.720 --> 00:11:40.440
Private means accessible
while running the program.

182
00:11:40.440 --> 00:11:45.840
It does not mean invisible to prying
eyes when they do a view source.

183
00:11:45.840 --> 00:11:47.750
There is no such thing
is that in JavaScript,

184
00:11:47.750 --> 00:11:50.740
all code that runs in a browser
can be seen by a user.

185
00:11:52.120 --> 00:11:56.743
But what we mean by private versus
public is what's accessible from any

186
00:11:56.743 --> 00:11:59.517
given location in your
program can I access

187
00:11:59.517 --> 00:12:04.156
stuff.
&gt;&gt; Kyle: Okay,

188
00:12:04.156 --> 00:12:07.993
now I know especially given some of
the questions, I know that modules

189
00:12:07.993 --> 00:12:13.450
are already starting to push the envelope
for some of you and that's totally okay.

190
00:12:13.450 --> 00:12:15.569
The rest of what we're
going to talk about today,

191
00:12:15.569 --> 00:12:17.592
this was the main thing I
wanted to kind of go on.

192
00:12:17.592 --> 00:12:21.326
So we're going to take about a ten minute
break now to let some of that seep in,

193
00:12:21.326 --> 00:12:23.580
I'll answer if there
are any more questions.

194
00:12:23.580 --> 00:12:27.276
But the whole rest of our
course is no lecture for me,

195
00:12:27.276 --> 00:12:32.240
it's a full exercise with lots of
different tasks and subtasks in it.

196
00:12:32.240 --> 00:12:35.651
And you're gonna go little by little
by little building yourself up.

197
00:12:35.651 --> 00:12:39.751
And along the way, you're gonna get some
practice with this concept of how to

198
00:12:39.751 --> 00:12:41.403
do something with the module.

199
00:12:41.403 --> 00:12:43.363
And I'll hold your hand through it,
but this,

200
00:12:43.363 --> 00:12:44.980
we're gonna apply all of this theory.

201
00:12:44.980 --> 00:12:47.730
So we've got the theory out of the way,
hopefully.

202
00:12:47.730 --> 00:12:49.860
And now we're gonna do
the rest of the training,

203
00:12:49.860 --> 00:12:52.790
we're gonna spend kind of
applying that to an exercise.

204
00:12:52.790 --> 00:12:56.300
So if that if you're already feeling
a little bit like what's going on.

205
00:12:56.300 --> 00:12:58.960
It's okay we'll go through it together,
we'll talk through everything.

206
00:13:00.220 --> 00:13:03.550
But I do encourage you, especially if you
already got some experience with this,

207
00:13:03.550 --> 00:13:06.590
try your hand at the exercises
even if it's confusing.

208
00:13:06.590 --> 00:13:08.360
There's value in the confusion.

209
00:13:08.360 --> 00:13:12.420
I know that's an unusual statement for
a teacher to make, but

210
00:13:12.420 --> 00:13:15.290
there's actually value in the confusion.

211
00:13:15.290 --> 00:13:18.540
There's value in trying something
without fully understanding it and

212
00:13:18.540 --> 00:13:20.620
then layering on your understanding.

213
00:13:20.620 --> 00:13:24.270
Instead of never trying it because
you don't fully understand it yet.

