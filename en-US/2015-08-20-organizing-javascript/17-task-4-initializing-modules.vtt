WEBVTT

1
00:00:00.000 --> 00:00:03.950
[MUSIC]

2
00:00:03.950 --> 00:00:07.048
&gt;&gt; Kyle Simpson: That's not the only
place that we can use events.

3
00:00:07.048 --> 00:00:09.819
What about our init function?

4
00:00:09.819 --> 00:00:13.449
Or manually calling that init
function from inside of our our

5
00:00:13.449 --> 00:00:16.864
app?
&gt;&gt; Kyle Simpson: What if we took

6
00:00:16.864 --> 00:00:19.889
window.event, I actually didn't even need

7
00:00:19.889 --> 00:00:24.400
to put that in the jQuery thing cuz
it's not related to the DOM at all.

8
00:00:24.400 --> 00:00:27.659
What if we took this code that's
inside of document.ready and

9
00:00:27.659 --> 00:00:31.170
instead of calling header.init and
carousel.init or whatever.

10
00:00:31.170 --> 00:00:35.358
What if we just published an event that
people could listen to like, for example,

11
00:00:35.358 --> 00:00:41.600
EVT.emit(init), it's a good event name.

12
00:00:44.740 --> 00:00:47.720
Now I have absolutely no idea what
other modules are on the page.

13
00:00:47.720 --> 00:00:49.160
I don't care if they're there or not.

14
00:00:49.160 --> 00:00:50.310
I'm just gonna throw out the event.

15
00:00:51.890 --> 00:00:56.600
And inside of each one of my modules,
I don't even

16
00:00:56.600 --> 00:01:00.010
need this method to be
on a public API anymore.

17
00:01:00.010 --> 00:01:03.205
I can leave it there just for simplicity,
but it's not even needed anymore.

18
00:01:03.205 --> 00:01:06.386
Inside of this code,
not inside of my init but

19
00:01:06.386 --> 00:01:11.861
inside of my module instantiation,
I just need to listen for the init event.

20
00:01:11.861 --> 00:01:16.060
EVT.on(init), and what function do I call?

21
00:01:17.870 --> 00:01:18.638
The init function.

22
00:01:38.114 --> 00:01:39.772
&gt;&gt; Kyle Simpson: One
little minute detail here.

23
00:01:39.772 --> 00:01:45.585
Now that app.js is creating this variable
that the other modules need to know about,

24
00:01:45.585 --> 00:01:51.574
app.js definitely needs to be the thing to
load before the other modules load, okay.

25
00:01:51.574 --> 00:01:56.358
So small little detail here,
we need to make sure to move app.js up so

26
00:01:56.358 --> 00:01:59.748
that it loads and
runs before the other modules.

27
00:02:06.853 --> 00:02:08.476
&gt;&gt; Kyle Simpson: Let's test my work,

28
00:02:08.476 --> 00:02:16.425
let's see if I got it correct.
&gt;&gt; Kyle Simpson: Question,

29
00:02:16.425 --> 00:02:19.078
EVT is kind of a Reactive programming?

30
00:02:19.078 --> 00:02:23.162
[SOUND] Reactive programming means
a whole other umbrella of stuff,

31
00:02:23.162 --> 00:02:25.177
it's event based programming.

32
00:02:25.177 --> 00:02:29.680
It's called event driven architecture or
event oriented architecture.

33
00:02:29.680 --> 00:02:33.400
Events are like a small little part
of what Reactive programming means.

34
00:02:34.540 --> 00:02:37.638
So there's a very,
very small tenuous relationship between

35
00:02:37.638 --> 00:02:41.185
the two.
&gt;&gt; Kyle Simpson: Okay,

36
00:02:41.185 --> 00:02:45.252
my code still works but now it's using
events instead of being directly

37
00:02:45.252 --> 00:02:49.017
called.
&gt;&gt; Kyle Simpson: Here's my last thing I'm

38
00:02:49.017 --> 00:02:51.010
gonna finish up and then we're done.

39
00:02:51.010 --> 00:02:53.750
I want to show you the power
of using these events.

40
00:02:56.020 --> 00:03:00.037
Let's open up,
&gt;&gt; Kyle Simpson: One

41
00:03:00.037 --> 00:03:04.527
of those details files,
let's open up 2.HTML for example.

42
00:03:04.527 --> 00:03:08.460
2.HTML, down here at the bottom
I'm going to create a link,

43
00:03:15.317 --> 00:03:16.650
&gt;&gt; Kyle Simpson: Doesn't link to anything

44
00:03:16.650 --> 00:03:18.050
specific.

45
00:03:18.050 --> 00:03:21.430
It's a link, I'm gonna give it a rel
cuz I'm gonna need to listen for,

46
00:03:31.162 --> 00:03:32.274
&gt;&gt; Kyle Simpson: So that's my link that

47
00:03:32.274 --> 00:03:37.160
I'm gonna create.
&gt;&gt; Kyle Simpson: Now this

48
00:03:37.160 --> 00:03:39.295
is clearly carousel related so

49
00:03:39.295 --> 00:03:44.204
let's go into the carousel.
&gt;&gt; Kyle Simpson: Let's

50
00:03:44.204 --> 00:03:48.070
set up a click handler for
links that look like that.

51
00:03:48.070 --> 00:03:51.820
I'll just simply say,
I'm sorry not carousel,

52
00:03:51.820 --> 00:03:54.180
details related, I meant details.

53
00:03:54.180 --> 00:03:59.587
This is the details module so
inside of init here,

54
00:03:59.587 --> 00:04:05.253
we're going to listen for
any click from the content

55
00:04:05.253 --> 00:04:10.661
that bubbles up to us from
rel equals js-select,

56
00:04:10.661 --> 00:04:13.782
did I call it select person?

57
00:04:13.782 --> 00:04:21.454
Yep, select person.
&gt;&gt; Kyle Simpson: From

58
00:04:21.454 --> 00:04:25.350
an element that has that rel attribute and
we wanna do something with it.

59
00:04:27.010 --> 00:04:31.279
Guess what we wanna do with it?
&gt;&gt; Speaker 2: Build something.

60
00:04:31.279 --> 00:04:32.130
&gt;&gt; Kyle Simpson: Well,

61
00:04:32.130 --> 00:04:37.060
if I've selected a person the question
is do I wanna load that person so

62
00:04:37.060 --> 00:04:38.670
could I call loadPerson here?

63
00:04:40.430 --> 00:04:45.747
The problem with calling loadPerson here
is that loadPerson expects an ID and

64
00:04:45.747 --> 00:04:48.793
that ID hasn't been parsed out yet, okay.

65
00:04:48.793 --> 00:04:51.749
So let's have it call another

66
00:04:51.749 --> 00:04:56.674
function.
&gt;&gt; Kyle Simpson: I'm

67
00:04:56.674 --> 00:05:00.322
not using good creative names here,
but I'll just call it selectPerson for

68
00:05:00.322 --> 00:05:06.374
now.
&gt;&gt; Kyle Simpson: Now his job is to,

69
00:05:06.374 --> 00:05:09.058
I meant to put one other
thing in the HTML,

70
00:05:09.058 --> 00:05:13.540
we need an ID here to let us know
what thing it is that we're clicking.

71
00:05:14.770 --> 00:05:17.640
I could put the ID directly
into the rel attribute and

72
00:05:17.640 --> 00:05:19.300
then do a little parsing thing.

73
00:05:19.300 --> 00:05:24.026
I'm just gonna do it even simpler
by adding a data attribute

74
00:05:24.026 --> 00:05:28.562
like data-person equals, and
let's say we want to load

75
00:05:28.562 --> 00:05:33.426
person four.
&gt;&gt; Kyle Simpson: So,

76
00:05:33.426 --> 00:05:39.086
evt.target,
&gt;&gt; Kyle Simpson: Is the actual

77
00:05:39.086 --> 00:05:44.810
thing that got clicked and it has
an attribute on it called data-person.

78
00:05:44.810 --> 00:05:49.570
And the value there is the ID that
we want to load, so that's ID.

79
00:05:51.220 --> 00:05:52.780
Everybody following me or
am I going too quick?

80
00:05:53.880 --> 00:05:56.383
We're parsing out the ID from
an attribute on a link that was

81
00:05:56.383 --> 00:06:01.219
clicked.
&gt;&gt; Kyle Simpson: So, we could call

82
00:06:01.219 --> 00:06:07.080
loadPerson with that ID.
&gt;&gt; Kyle Simpson: Everybody following that?

83
00:06:08.990 --> 00:06:11.920
One last detail, we gotta put in
those preventDefault things so

84
00:06:11.920 --> 00:06:16.442
don't wanna forget that.
&gt;&gt; Kyle Simpson: But

85
00:06:16.442 --> 00:06:18.722
I'm gonna make the argument
that even this code,

86
00:06:18.722 --> 00:06:21.800
even though we're calling to
our own internal function.

87
00:06:21.800 --> 00:06:24.850
I think this code is perhaps
a little bit less than ideal.

88
00:06:24.850 --> 00:06:29.641
I'm gonna make the argument
that what we ought to do is

89
00:06:29.641 --> 00:06:34.786
evt.emit,
&gt;&gt; Kyle Simpson: Did I

90
00:06:34.786 --> 00:06:35.900
call it select-person?

91
00:06:35.900 --> 00:06:44.613
I can't remember.
&gt;&gt; Kyle Simpson: Person-select,

92
00:06:44.613 --> 00:06:49.546
I'm sorry.
&gt;&gt; Kyle Simpson: I should probably spend

93
00:06:49.546 --> 00:06:52.710
more time not rushing through
coming up with better names.

94
00:06:52.710 --> 00:06:55.491
All right so
the event name was called person-selected,

95
00:06:55.491 --> 00:06:57.010
and it needed a piece of data.

96
00:06:57.010 --> 00:07:01.730
Now, is that event going to
end up calling loadPerson?

97
00:07:01.730 --> 00:07:05.050
Of course it is cuz we have
that event handler set up.

98
00:07:05.050 --> 00:07:06.220
But I'm doing it indirectly.

99
00:07:06.220 --> 00:07:07.640
Now why would I do it indirectly?

100
00:07:08.670 --> 00:07:11.530
Well, what if there was another thing
on the page that wanted to listen to

101
00:07:11.530 --> 00:07:12.039
this event?

102
00:07:13.230 --> 00:07:14.740
Like for example the carousel.

103
00:07:15.780 --> 00:07:19.880
What if we wanted the carousel to
listen for an event like that.

104
00:07:19.880 --> 00:07:24.390
And scroll the carousel to the person
that was picked and highlight them.

105
00:07:26.470 --> 00:07:29.740
If we called load person here that would
not accomplish it and we'd have to

106
00:07:29.740 --> 00:07:33.190
end up calling out or sending out some
other event or calling out to carousel.

107
00:07:33.190 --> 00:07:36.930
But if we use the event system here,
we don't have to worry about that detail.

108
00:07:36.930 --> 00:07:40.207
We allow somebody else to observe that
event if they care or not observe

109
00:07:40.207 --> 00:07:47.351
the event if they don't care.
&gt;&gt; Kyle Simpson: What I'm getting

110
00:07:47.351 --> 00:07:52.220
at here is that I have intentionally
created this layer of abstraction.

111
00:07:52.220 --> 00:07:54.980
And sometimes layers of
abstraction are more confusing.

112
00:07:56.130 --> 00:07:58.730
This does take a little bit
more brainpower from you to

113
00:07:58.730 --> 00:08:02.080
think the event's gonna go here,
and I gotta listen for it here.

114
00:08:02.080 --> 00:08:05.600
It's not as obvious,
the direct connections.

115
00:08:05.600 --> 00:08:09.260
But I'm arguing that there's
a bigger point at stake.

116
00:08:09.260 --> 00:08:13.220
This is perhaps slightly
less obvious code but

117
00:08:13.220 --> 00:08:16.520
it's significantly better organized code.

118
00:08:16.520 --> 00:08:19.520
Because it's more flexible,
it's more testable, it's less brittle.

119
00:08:21.560 --> 00:08:27.135
If for some reason the carousel module
doesn't exist on your page, there's no

120
00:08:27.135 --> 00:08:32.145
reason why the details module can't
continue to act the way it should act.

121
00:08:32.145 --> 00:08:33.025
That's the point I'm making.

122
00:08:35.185 --> 00:08:40.580
Let me test myself to make sure I didn't

123
00:08:40.580 --> 00:08:46.538
mess something up.
&gt;&gt; Kyle Simpson: I think I need to,

124
00:08:46.538 --> 00:08:50.270
sometimes it's hard to get full refreshes

125
00:08:50.270 --> 00:08:55.173
here.
&gt;&gt; Kyle Simpson: Am I clicking the wrong

126
00:08:55.173 --> 00:09:01.427
guy?
&gt;&gt; Kyle Simpson: 2.html

127
00:09:01.427 --> 00:09:03.740
should be that person number three

128
00:09:16.111 --> 00:09:17.180
&gt;&gt; Kyle Simpson: Sorry, just a moment.

129
00:09:17.180 --> 00:09:20.390
I'm trying to figure out how to get
my browser to stop using its cache.

130
00:09:22.674 --> 00:09:26.394
&gt;&gt; Speaker 2: You need to have refresh

131
00:09:27.700 --> 00:09:28.590
&gt;&gt; Kyle Simpson: There we go.

132
00:09:28.590 --> 00:09:31.220
All right so
I have this select another person link.

133
00:09:31.220 --> 00:09:35.667
And when I click it, we're expecting
it to load up a different person.

134
00:09:35.667 --> 00:09:36.627
And in fact it did,

135
00:09:36.627 --> 00:09:40.858
it loaded up person five.
&gt;&gt; Kyle Simpson: Now I didn't do

136
00:09:40.858 --> 00:09:43.850
the extra work of having it
select the carousel or whatever.

137
00:09:43.850 --> 00:09:49.060
In fact, in the read me you'll see
I've left that as some extra credit.

138
00:09:50.420 --> 00:09:54.475
So if you want to go further with
the exercise, we've run out of time for

139
00:09:54.475 --> 00:09:55.971
me to do items one and two.

140
00:09:55.971 --> 00:09:59.460
They're pretty easy and you can see how
I did them in the solutions folder.

141
00:09:59.460 --> 00:10:03.257
But the major stuff is the stuff that we
got to, which is this organization through

142
00:10:03.257 --> 00:10:09.300
events.
&gt;&gt; Kyle Simpson: All right, so we're

143
00:10:09.300 --> 00:10:14.930
gonna wrap up now but I want to just leave
one last space for any last question.

144
00:10:14.930 --> 00:10:18.110
So let me check the chat room,
if anyone here as a question speak

145
00:10:18.110 --> 00:10:23.538
up.
&gt;&gt; Kyle Simpson: The question

146
00:10:23.538 --> 00:10:26.345
was can you explain again
why app.js must come first.

147
00:10:26.345 --> 00:10:30.472
App.js creates an object, window.EVT.

148
00:10:30.472 --> 00:10:34.105
I don't even need window.EVT here now,
I can just do var.EVT.

149
00:10:34.105 --> 00:10:36.660
It creates a global object called EVT.

150
00:10:36.660 --> 00:10:39.170
You'll notice that these
modules need it right away.

151
00:10:39.170 --> 00:10:43.540
The very first thing they do when they run
and define themselves is they need it.

152
00:10:43.540 --> 00:10:48.359
So we need to make sure app.js runs first
before the header.js module defines

153
00:10:48.359 --> 00:10:49.830
itself, that's why.

154
00:10:51.990 --> 00:10:56.640
Preserves the native version of
an object to consent and receive events,

155
00:10:56.640 --> 00:11:01.593
RES observers.
&gt;&gt; Kyle Simpson: [LAUGH] That's way far

156
00:11:01.593 --> 00:11:05.142
afield from the thing I'm gonna
be able to cover here, Kevin.

157
00:11:05.142 --> 00:11:08.979
So yeah, it's probably not even my,
yeah, like you mention,

158
00:11:08.979 --> 00:11:11.766
it's probably better for
Jeffard to answer.

159
00:11:11.766 --> 00:11:14.054
But definitely way far afield
from what we want to cover

160
00:11:14.054 --> 00:11:18.448
here.
&gt;&gt; Kyle Simpson: Okay,

161
00:11:18.448 --> 00:11:19.820
any other questions?

162
00:11:20.880 --> 00:11:25.520
Now I know it's been an overwhelming day
of a lot of heavy material dumped on.

163
00:11:27.900 --> 00:11:32.120
What I just ran you through over the last
seven or eight hours together or

164
00:11:32.120 --> 00:11:36.450
whatever is what I would,
if I were interviewing somebody.

165
00:11:36.450 --> 00:11:40.586
And somebody came to me as
an interview candidate and they said,

166
00:11:40.586 --> 00:11:43.432
I have two years experience in JavaScript.

167
00:11:43.432 --> 00:11:47.282
Then I would expect that person to
easily handle the stuff that I threw at

168
00:11:47.282 --> 00:11:48.800
you today.

169
00:11:48.800 --> 00:11:52.820
So essentially what I'm getting at is I
took some of you from having no JavaScript

170
00:11:52.820 --> 00:11:58.100
experience to an expectation level of
around one to two years of experience.

171
00:11:58.100 --> 00:12:01.200
And that's nearly impossible
to do in a single day.

172
00:12:01.200 --> 00:12:04.730
So if you feel overwhelmed or
if you feel like you missed some stuff or

173
00:12:04.730 --> 00:12:08.440
if you feel like you need to go back
over stuff, it's because you do.

174
00:12:08.440 --> 00:12:10.890
It's because that's totally natural.

175
00:12:10.890 --> 00:12:14.571
We didn't stay at the one
month experience level,

176
00:12:14.571 --> 00:12:18.861
we progressed quite rapidly,
as many of you probably saw.

177
00:12:18.861 --> 00:12:22.491
The goal here is not that you come
away from today already certified,

178
00:12:22.491 --> 00:12:25.820
I'm an expert,
I got two years' experience in one day.

179
00:12:25.820 --> 00:12:29.890
The goal is that you came away with the
right sort of stuff to ask, the right sort

180
00:12:29.890 --> 00:12:34.100
of stuff to study, the right sort of
ways to ask and think about stuff.

181
00:12:34.100 --> 00:12:38.030
And as you unpack this over the next
weeks and months, I want to encourage you

182
00:12:38.030 --> 00:12:43.240
strongly to go back to the exercises
that we went through and try them fresh.

183
00:12:43.240 --> 00:12:46.460
Try them from scratch and see if you can
come up with the same solutions that we

184
00:12:46.460 --> 00:12:48.500
had in the in the solutions folder.

185
00:12:48.500 --> 00:12:51.210
That's really the best way
to solidify the learning.

186
00:12:51.210 --> 00:12:55.110
Go back over your notes and
the stuff that we did and and don't let

187
00:12:55.110 --> 00:12:58.130
this be the last time you see the material
is the point I'm trying to make.

