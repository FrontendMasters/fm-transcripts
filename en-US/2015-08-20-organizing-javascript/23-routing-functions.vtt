WEBVTT

1
00:00:00.000 --> 00:00:03.889
[MUSIC]

2
00:00:03.889 --> 00:00:06.817
&gt;&gt; Kyle Simpson: The next thing I wanna
talk about in terms of how this code's

3
00:00:06.817 --> 00:00:09.230
working, is not so
much about the reusability.

4
00:00:09.230 --> 00:00:12.370
But how can I express things

5
00:00:12.370 --> 00:00:15.110
in a simple way without needing
some kind of framework.

6
00:00:15.110 --> 00:00:19.040
Essentially, I have that routes
array that I was talking about.

7
00:00:19.040 --> 00:00:22.810
So I'm pushing functions
into my routes array.

8
00:00:22.810 --> 00:00:27.450
Almost identically to how you push
middleware functions into an express app.

9
00:00:27.450 --> 00:00:32.610
If any of you done express work and
you app.use or app.get.

10
00:00:32.610 --> 00:00:34.220
This is the exact same concept, but

11
00:00:34.220 --> 00:00:36.309
I'm just using an array
rather than a framework.

12
00:00:37.550 --> 00:00:42.470
So basically, I've replaced the express
framework with an array and

13
00:00:42.470 --> 00:00:47.540
my API is the array.push
rather than app.push.

14
00:00:47.540 --> 00:00:51.020
The concept is the same that I have
a function that's gonna receive a record

15
00:00:51.020 --> 00:00:53.270
request in response stream.

16
00:00:53.270 --> 00:00:55.470
And it's gonna decide if it should
do something with it or not.

17
00:00:55.470 --> 00:01:00.130
So I have this series of routes
that I define wanted to time.

18
00:01:00.130 --> 00:01:04.280
This first one sends out the server
header for all inbound requests.

19
00:01:04.280 --> 00:01:07.360
This one sends out a set
of security headers, so

20
00:01:07.360 --> 00:01:11.530
my content security policy and
my strict transport security.

21
00:01:11.530 --> 00:01:12.610
If you don't know what those are,

22
00:01:12.610 --> 00:01:14.340
you should definitely do
some reading up on them.

23
00:01:14.340 --> 00:01:18.210
Becuse they're really important for
modern production apps.

24
00:01:18.210 --> 00:01:24.072
And then I have this route and this route

25
00:01:24.072 --> 00:01:29.540
is waiting until the entire request has
come in if it's more than one chunk.

26
00:01:29.540 --> 00:01:31.230
And it's putting all
of that into the body.

27
00:01:31.230 --> 00:01:33.990
So I'm essentially setting
up that data listener.

28
00:01:33.990 --> 00:01:35.510
Though you've probably been familiar and
know it.

29
00:01:35.510 --> 00:01:40.842
I'm setting up a data listener and
listening for it, and

30
00:01:40.842 --> 00:01:46.090
then moving on.
&gt;&gt; Kyle Simpson: Once it's complete.

31
00:01:46.090 --> 00:01:51.792
And then, see if there are questions here.
&gt;&gt; Speaker 2: No,

32
00:01:51.792 --> 00:01:55.750
I'm just chatting.
&gt;&gt; Kyle Simpson: Okay.

33
00:01:55.750 --> 00:01:58.680
Then I have route setup
to handle my favicon.

34
00:01:58.680 --> 00:02:01.650
I don't know about you, but
I'm constantly annoyed.

35
00:02:01.650 --> 00:02:02.940
And I do service a program.

36
00:02:02.940 --> 00:02:07.850
I'm constantly annoyed by
the fact that my Chrome browser,

37
00:02:07.850 --> 00:02:09.940
for example,
is always asking for a favicon.

38
00:02:09.940 --> 00:02:11.980
And, most of my apps don't have one.

39
00:02:11.980 --> 00:02:15.870
So I just set myself up a little route
that listens for the favicon request.

40
00:02:15.870 --> 00:02:21.340
And just does a cacheable 204 response to
try to get the browser to stop asking for

41
00:02:21.340 --> 00:02:22.610
a favicon over and over again.

42
00:02:22.610 --> 00:02:24.600
So that's just a simple route.

43
00:02:24.600 --> 00:02:27.720
There's nothing non-node here or
magical or

44
00:02:27.720 --> 00:02:32.637
special.
&gt;&gt; Kyle Simpson: This is a route that I

45
00:02:32.637 --> 00:02:37.443
set up to recognize a request for
one of these static resources,

46
00:02:37.443 --> 00:02:43.233
like a JavaScript file, a CSS file,
images, the robots, txt, whatever.

47
00:02:43.233 --> 00:02:49.596
Those static file requests if being
handled, I use this static file server.

48
00:02:49.596 --> 00:02:55.692
Which is almost identical to the static
file server that comes with Express,

49
00:02:55.692 --> 00:02:58.709
but I just have it in stand alone form.

50
00:02:58.709 --> 00:03:01.817
And then I have another route and
this is the one for

51
00:03:01.817 --> 00:03:04.410
if none of the other ones have taken over.

52
00:03:04.410 --> 00:03:07.010
This is the one that
says they're asking for

53
00:03:07.010 --> 00:03:11.090
a full load or we're gonna check to see
if they're asking for a full load page.

54
00:03:11.090 --> 00:03:14.909
So the first thing I do is to
see if the request was a GET.

55
00:03:14.909 --> 00:03:18.907
And if it's one of the pages that I
recognize as one of my internal templates

56
00:03:18.907 --> 00:03:20.840
that I can handle.

57
00:03:20.840 --> 00:03:25.082
So if it's a request that I know how to
handle and render, then I go ahead and

58
00:03:25.082 --> 00:03:29.940
call view.getPageHTML.

59
00:03:29.940 --> 00:03:31.060
I render out the response.

60
00:03:33.300 --> 00:03:35.920
And finally,
my routes array has a default route

61
00:03:35.920 --> 00:03:38.170
that if none of the other ones match or
handle anything.

62
00:03:38.170 --> 00:03:46.254
It just gives a 404 response.
&gt;&gt; Kyle Simpson: So

63
00:03:46.254 --> 00:03:50.914
how do I make these functions
in this routes array actually

64
00:03:50.914 --> 00:03:56.090
process through and
run everytime a request comes in?

65
00:03:56.090 --> 00:03:58.630
Well, there's lots of
different ways to do that.

66
00:03:58.630 --> 00:04:02.320
Express does an internal for
loop every time it comes across.

67
00:04:02.320 --> 00:04:05.320
But I basically replaced
all of Express and

68
00:04:05.320 --> 00:04:10.200
maybe all of Koa with this one
function that I wrote called router.

69
00:04:10.200 --> 00:04:13.910
Let me zoom out just so you see how big
it is because it's not actually that big.

70
00:04:15.710 --> 00:04:20.470
So it's this one function
here called router and

71
00:04:20.470 --> 00:04:22.590
it's a special kind of
function called a generator.

72
00:04:23.590 --> 00:04:27.070
So that little star, let me zoom back in,
so you can see that little star means.

73
00:04:27.070 --> 00:04:30.580
This is a special kind of ES6
feature called a generator.

74
00:04:30.580 --> 00:04:35.410
The only reason I'm using a generator here
is because it has a really nice syntax for

75
00:04:35.410 --> 00:04:41.210
me to be able to pause local stack inside
of the function, using the yield keyword.

76
00:04:41.210 --> 00:04:44.331
So this is basically saying if I have

77
00:04:44.331 --> 00:04:49.249
a route,
&gt;&gt; Kyle Simpson: Basically,

78
00:04:49.249 --> 00:04:52.471
I'm gonna loop through my list of
routes and call that function.

79
00:04:52.471 --> 00:04:56.740
And if that function returns me, in this
case this is kind of like a promise, but

80
00:04:56.740 --> 00:04:59.360
it's asynchronous version of a promise.

81
00:04:59.360 --> 00:05:02.260
If it returns me something
that I need to wait on,

82
00:05:02.260 --> 00:05:05.790
that I'm just gonna simply call the yield
and wait for that thing to finish.

83
00:05:05.790 --> 00:05:08.340
So that's the way I do
an asynchronous route

84
00:05:08.340 --> 00:05:11.390
as opposed to I'm ready to
finish the route right away.

85
00:05:11.390 --> 00:05:15.130
That's a way to pause the generator
by simply yielding out of problems.

86
00:05:16.620 --> 00:05:21.500
And then if any one of those routing
functions returns true, then I break out.

87
00:05:21.500 --> 00:05:25.080
Because I know there's no more news no
more routes that need to be consulted.

88
00:05:25.080 --> 00:05:28.460
If any error happens, the try catch works.

89
00:05:28.460 --> 00:05:32.670
The cool part about generators is
that try catch works even across

90
00:05:32.670 --> 00:05:36.690
asynchronous calls because it has
synchronous semantics inside of it.

91
00:05:36.690 --> 00:05:41.060
So it's a really nice way to simply
express error handling with a try catch.

92
00:05:42.610 --> 00:05:46.800
And finally, the last thing I do
is I see if there was an error.

93
00:05:46.800 --> 00:05:50.600
I throw back an error that has a little
bit of extra data and it has the reason,

94
00:05:50.600 --> 00:05:53.528
but it also has the request
in the response stream.

95
00:05:53.528 --> 00:05:58.920
So this generator doesn't
run all by itself.

96
00:06:00.130 --> 00:06:03.440
It needs something to run
it to be able to handle

97
00:06:03.440 --> 00:06:05.800
the yielding of promises and whatever.

98
00:06:05.800 --> 00:06:10.030
And if you've ever read anything about
generators, I've got a book about it,

99
00:06:10.030 --> 00:06:12.800
I've got a blog post about it you
can read lots more about generators.

100
00:06:12.800 --> 00:06:17.170
But there's a lots of frameworks out there
that are able to take a generator and

101
00:06:17.170 --> 00:06:18.915
automatically run them to completion.

102
00:06:18.915 --> 00:06:21.560
Asynchronous also has one.

103
00:06:21.560 --> 00:06:26.310
So because I'm using the library,
why not just keep using the same tool.

104
00:06:26.310 --> 00:06:32.370
And so essentially,
we go to the magic, if you will,

105
00:06:32.370 --> 00:06:37.586
of how all this HTTP routing is happening.
&gt;&gt; Speaker 3: Getting

106
00:06:37.586 --> 00:06:39.339
a little dizzy here [LAUGH].
&gt;&gt; Kyle Simpson: Sorry,

107
00:06:39.339 --> 00:06:42.400
I was getting lost in my own line.

108
00:06:42.400 --> 00:06:44.420
So this is the magic,
these few lines of code.

109
00:06:44.420 --> 00:06:49.780
This is the magic that actually makes
my handling of incoming requests work.

110
00:06:49.780 --> 00:06:52.990
Let me skip over the react part for
a moment because that might be confusing.

111
00:06:52.990 --> 00:06:56.510
I mean, just look here and say,
every time an incoming request happens.

112
00:06:56.510 --> 00:07:01.710
I'm gonna spin up the generator and
run it until it's found a usable route.

113
00:07:01.710 --> 00:07:04.860
And if any usable route happens,
then that's just the end of it.

114
00:07:04.860 --> 00:07:09.560
If there's any error that happens,
It actually bubbles out and

115
00:07:09.560 --> 00:07:12.390
I have a responseError function.

116
00:07:12.390 --> 00:07:14.311
So if we look at the responseError

117
00:07:14.311 --> 00:07:19.964
function.
&gt;&gt; Kyle Simpson: Looks

118
00:07:19.964 --> 00:07:21.654
more complicated than it really is.

119
00:07:21.654 --> 00:07:26.057
It's basically just saying,
if you've made an AJAX request,

120
00:07:26.057 --> 00:07:28.350
I'm going to respond with JSON.

121
00:07:29.950 --> 00:07:34.660
Otherwise, I'm just going to
log the error to my server log.

122
00:07:36.410 --> 00:07:40.970
So if any error happens anywhere in any
of the machinery, no matter how deep.

123
00:07:40.970 --> 00:07:44.240
If everything's using asynchronous
the way I've set it up,

124
00:07:44.240 --> 00:07:48.280
that error will bubble all the way out and
get handled in one event handler.

125
00:07:48.280 --> 00:07:50.640
So I don't have to leak
that logic all over.

