WEBVTT

1
00:00:00.000 --> 00:00:03.835
[MUSIC]

2
00:00:03.835 --> 00:00:05.915
&gt;&gt; Kyle Simpson: Some
principles to take away here.

3
00:00:05.915 --> 00:00:11.030
In any place where I found code that I
wanted to share it between the two places,

4
00:00:11.030 --> 00:00:15.580
the best way to do that was
to organize it into a module.

5
00:00:15.580 --> 00:00:19.690
And I chose the UMD style just because it
doesn't require any other moving pieces,

6
00:00:19.690 --> 00:00:22.180
it's just a file that
can load in both places.

7
00:00:22.180 --> 00:00:25.340
But you can easily offer them in
whatever module format you like and

8
00:00:25.340 --> 00:00:26.650
use something like Browserify.

9
00:00:29.090 --> 00:00:34.980
And I loaded my modules into
my server using require,

10
00:00:36.040 --> 00:00:41.370
like we see right here.

11
00:00:41.370 --> 00:00:43.370
I'm using the require to load it up.

12
00:00:43.370 --> 00:00:46.394
Now, I didn't really talk about this.

13
00:00:46.394 --> 00:00:47.330
I kinda glossed over it,

14
00:00:47.330 --> 00:00:52.480
but you'll notice that I was just
automatically putting these shared

15
00:00:52.480 --> 00:00:56.560
modules in a location where I knew I'd
be able to load them in the browser.

16
00:00:56.560 --> 00:01:00.260
And then I just went and got them
from the same location on the server.

17
00:01:02.440 --> 00:01:09.200
That may or may not be the appropriate
approach for a real production app.

18
00:01:09.200 --> 00:01:12.770
In fact, more likely you're probably
gonna have some sort of build process

19
00:01:12.770 --> 00:01:15.650
that's taking your files
that you want to share, and

20
00:01:15.650 --> 00:01:20.280
it's packaging them up from some
non-web associated location.

21
00:01:20.280 --> 00:01:25.400
And making a copy of them over
to the web accessible location.

22
00:01:25.400 --> 00:01:27.410
My web directory for example.

23
00:01:27.410 --> 00:01:32.260
So I probably have some sort of
grunter go process that was running,

24
00:01:32.260 --> 00:01:36.890
that is minifying my files and
moving things around, and

25
00:01:36.890 --> 00:01:38.580
doing transportation and all that.

26
00:01:38.580 --> 00:01:42.710
And one of the things that it would do,
it would take my foo module

27
00:01:42.710 --> 00:01:47.420
from my say main route or
some module sub directory.

28
00:01:47.420 --> 00:01:51.130
And it would prepare that in
whatever way is necessary,

29
00:01:51.130 --> 00:01:54.307
and it would copy it to
the webJS directory.

30
00:01:54.307 --> 00:01:56.870
And therefore my require
statement that's happening there.

31
00:01:56.870 --> 00:02:00.080
I would not be requiring it
from the webJS directory.

32
00:02:00.080 --> 00:02:02.840
I'd be requiring it from
its normal location.

33
00:02:02.840 --> 00:02:06.390
But to keep things simple,
I just had one file in one location.

34
00:02:09.600 --> 00:02:14.710
To set up our route, I didn't have to
think about any of the other mechanics

35
00:02:14.710 --> 00:02:17.500
of how routing was happening cuz that
part's are already been written for me.

36
00:02:18.880 --> 00:02:23.250
In exactly the same way as you would
set up one of those sorts of things

37
00:02:23.250 --> 00:02:27.660
in Express or any of the other frameworks,
we just wrote ourselves the function.

38
00:02:27.660 --> 00:02:32.280
In the function here,
its goal is to figure out in

39
00:02:32.280 --> 00:02:37.540
whatever way is necessary [COUGH] whether
it wants to handle the request or not.

40
00:02:37.540 --> 00:02:39.420
Here I wrote a regular expression.

41
00:02:39.420 --> 00:02:42.750
There's lots of modules out there,
not big frameworks but

42
00:02:42.750 --> 00:02:47.060
tiny little modules that let you
do smart things with routing.

43
00:02:47.060 --> 00:02:50.130
They'll automatically kind of
author your regular expression, or

44
00:02:50.130 --> 00:02:51.840
whatever you need them to do.

45
00:02:51.840 --> 00:02:55.420
[COUGH] And so if you didn't wanna
write your own regular expressions,

46
00:02:55.420 --> 00:02:57.500
you could pull in a module
into node that would do that.

47
00:02:58.770 --> 00:03:02.150
We handled this, and
we told the router that I had written,

48
00:03:02.150 --> 00:03:04.790
we told it that we'd handled
it by returning true.

49
00:03:04.790 --> 00:03:08.816
If we don't return true,
it would end up throwing it to a push.

50
00:03:08.816 --> 00:03:12.475
So I guess my last check would be,

51
00:03:12.475 --> 00:03:16.930
what happens if I try to call localhost.

52
00:03:16.930 --> 00:03:18.730
You do this.

53
00:03:18.730 --> 00:03:20.188
Look at my network here.

54
00:03:20.188 --> 00:03:26.305
What happens if I try to call a localhost,
port 8050?

55
00:03:26.305 --> 00:03:29.287
And what happens if I give it a foo
that has no URL parameters on

56
00:03:29.287 --> 00:03:33.817
it?
&gt;&gt; Kyle Simpson: Well there's a JSON

57
00:03:33.817 --> 00:03:35.790
response going back.

58
00:03:35.790 --> 00:03:39.450
Not sure why it said no, but
that's our JSON response coming back.

59
00:03:39.450 --> 00:03:41.701
But what happens if I do
a URL that is not even

60
00:03:41.701 --> 00:03:47.972
recognized?
&gt;&gt; Kyle Simpson: [LAUGH]

61
00:03:47.972 --> 00:03:52.280
I have to give it one that actually
would fail the regular expression.

62
00:03:54.480 --> 00:03:57.640
And you see I get that
404 route that I set up.

63
00:03:57.640 --> 00:04:01.730
So instead of having a 404 route that just
gives a blank page, you could of course

64
00:04:01.730 --> 00:04:06.700
load up a real 404 page and
throw it out in exactly the same way.

65
00:04:06.700 --> 00:04:09.640
So those are the main principles
that I use when I'm trying to share

66
00:04:09.640 --> 00:04:10.840
code between them.

67
00:04:10.840 --> 00:04:15.840
And the overriding design principle I
have here is starting with nothing, and

68
00:04:15.840 --> 00:04:19.440
only doing the bare minimum
in any given situation.

69
00:04:19.440 --> 00:04:24.410
Instead of assuming that I need a really
super complex framework with tones

70
00:04:24.410 --> 00:04:25.690
of bells and whistles.

71
00:04:25.690 --> 00:04:29.690
And then spending days and days reading
through their documentation trying to

72
00:04:29.690 --> 00:04:31.370
figure out exactly how to get it to work.

73
00:04:32.390 --> 00:04:36.660
I feel confident enough that I can just
write if statements, or for loops, or

74
00:04:36.660 --> 00:04:39.550
functions, or whatever to do
the things that I need it to do.

75
00:04:40.720 --> 00:04:43.580
And you may not already
feel that comfortable, but

76
00:04:43.580 --> 00:04:46.930
it won't take a lot of practice if
you practice with that shell app

77
00:04:46.930 --> 00:04:49.710
that I gave you, and you tried
a couple of things that we did here.

78
00:04:49.710 --> 00:04:51.660
If you tried that two or three times,

79
00:04:51.660 --> 00:04:54.740
you'd very quickly get to the point where
you'd have that same kinda confidence.

80
00:04:54.740 --> 00:04:58.120
I can write the JavaScript in the places
that I need to make it happen.

81
00:04:58.120 --> 00:05:00.360
[COUGH] Thankfully,

82
00:05:00.360 --> 00:05:04.640
I didn't get bitten by too many errors
that weren't that difficult to track down.

83
00:05:05.690 --> 00:05:07.130
I wish we had a little bit more time,

84
00:05:07.130 --> 00:05:10.520
we probably would have talked a little
bit more about node debugging.

85
00:05:10.520 --> 00:05:14.290
There's lots of great tutorials
out there on the web.

86
00:05:14.290 --> 00:05:17.610
So if you go through node school,
they talk about how to do node debugging.

87
00:05:17.610 --> 00:05:20.390
You can do either command
line debugging with node, or

88
00:05:20.390 --> 00:05:24.608
you can do remote debugging from something
like your Chrome console or whatever.

89
00:05:24.608 --> 00:05:28.830
So that would have been a way to track
down some of our node errors if we'd been

90
00:05:28.830 --> 00:05:29.550
having those.

