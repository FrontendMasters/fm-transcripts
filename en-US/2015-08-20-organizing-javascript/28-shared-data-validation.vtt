WEBVTT

1
00:00:00.000 --> 00:00:03.598
[MUSIC]

2
00:00:03.598 --> 00:00:06.848
&gt;&gt; Kyle Simpson: Somebody asked in the
chat how could we do something with some

3
00:00:06.848 --> 00:00:09.110
shared data validation code, right?

4
00:00:09.110 --> 00:00:10.461
So let's try that.

5
00:00:10.461 --> 00:00:13.511
Hadn't thought about it, but we'll
just on the fly try to figure it out.

6
00:00:13.511 --> 00:00:15.633
So I will take my Foo.js module, and

7
00:00:15.633 --> 00:00:19.210
I'll make another module that
I'm going to call validate.

8
00:00:19.210 --> 00:00:26.670
So I'll just say Save As, Validate.js.

9
00:00:30.150 --> 00:00:31.155
Take out its contents for now.

10
00:00:36.604 --> 00:00:38.436
&gt;&gt; Kyle Simpson: Make sure
to update the name there.

11
00:00:43.620 --> 00:00:46.770
&gt;&gt; Kyle Simpson: All right let's start
first by integrating it into the server.

12
00:00:46.770 --> 00:00:49.530
We could start either way but
I'm gonna integrated in the server first.

13
00:00:49.530 --> 00:00:55.100
So I'm going to go back to where
I'm listing my modules here.

14
00:00:56.600 --> 00:00:59.808
List another one called validate and

15
00:00:59.808 --> 00:01:04.682
then I'll come down here and
load up a validate module.

16
00:01:18.763 --> 00:01:22.281
&gt;&gt; Kyle Simpson: So now I have access
to that validate module from inside

17
00:01:22.281 --> 00:01:23.710
of my code.

18
00:01:23.710 --> 00:01:27.025
So let's put some validation
into our API call,

19
00:01:27.025 --> 00:01:30.510
let's actually send in some,
we'll need to send in some data and

20
00:01:30.510 --> 00:01:33.530
validate that the data that
we're sending in is correct.

21
00:01:33.530 --> 00:01:37.620
So I'm trying to think on the fly what
kind of data would be appropriate.

22
00:01:37.620 --> 00:01:42.474
Let's think that
&gt;&gt; Kyle Simpson: We need

23
00:01:42.474 --> 00:01:46.603
to pass in two pieces of data,
a min and a max.

24
00:01:46.603 --> 00:01:51.393
And they should be numbers and the min
should be less than the maximum number.

25
00:01:51.393 --> 00:01:55.768
I'm just making up some data inputs that
we could do some validation rules against.

26
00:01:55.768 --> 00:02:00.853
So we'll assume that the request URL is

27
00:02:00.853 --> 00:02:07.336
going to receive this
information through a Get.

28
00:02:07.336 --> 00:02:11.209
So we're going to instead of
wanting saying equal to foo,

29
00:02:11.209 --> 00:02:14.211
we're going to want to
say the way we test this

30
00:02:14.211 --> 00:02:18.815
URL is to put in a regular expression so
URL needs to start with /Foo.

31
00:02:31.352 --> 00:02:37.048
&gt;&gt; Kyle Simpson: Now I want
to parse out the parameters

32
00:02:37.048 --> 00:02:42.559
that might have been on my Get APIs,

33
00:02:42.559 --> 00:02:47.151
so I'm gonna say data =, and

34
00:02:47.151 --> 00:02:52.297
I've got a module already loaded

35
00:02:52.297 --> 00:02:57.360
in called url_parser here.

36
00:02:57.360 --> 00:02:59.410
So it's already gonna handle
that URL parsing for me.

37
00:03:19.463 --> 00:03:24.827
&gt;&gt; Kyle Simpson: And
I think just req.url is what we want.

38
00:03:24.827 --> 00:03:25.614
All right, so

39
00:03:25.614 --> 00:03:30.930
that data is now gonna be an object with
whatever my get parameters on my URL were.

40
00:03:30.930 --> 00:03:35.360
So now we're expecting that there should
be a min property and a max property, and

41
00:03:35.360 --> 00:03:36.770
we want those to be validated.

42
00:03:38.170 --> 00:03:40.750
Okay, so what we're going to
do first is we're gonna say,

43
00:03:41.860 --> 00:03:44.600
let's just assume our validations
here are gonna be synchronous, but

44
00:03:44.600 --> 00:03:48.300
you could do asynchronous
validation if you invoked promises.

45
00:03:48.300 --> 00:03:51.900
So we're going to say,
we're gonna invoke our validate thing, and

46
00:03:51.900 --> 00:03:56.050
we're gonna say checkMinMax,
that will be the method that we call it.

47
00:03:56.050 --> 00:03:59.585
And we're going to pass in data.min and
data.max.

48
00:04:03.755 --> 00:04:04.899
&gt;&gt; Kyle Simpson: So if that check

49
00:04:04.899 --> 00:04:09.354
succeeds,
&gt;&gt; Kyle Simpson: Then we wanna do

50
00:04:09.354 --> 00:04:11.122
this work that we were doing before.

51
00:04:17.508 --> 00:04:20.929
&gt;&gt; Kyle Simpson: I forgot by the way
it didn't bite us before but

52
00:04:20.929 --> 00:04:25.756
I forgot that we wanna always return
true if we have an affirmative

53
00:04:25.756 --> 00:04:31.850
answer to any API request, so
that the 404 doesn't try to play in.

54
00:04:31.850 --> 00:04:39.299
But if the validation fails,
&gt;&gt; Kyle Simpson: Then I want to do

55
00:04:54.253 --> 00:04:56.773
&gt;&gt; Kyle Simpson: Let's send back

56
00:04:56.773 --> 00:04:59.473
a JSON response.

57
00:05:25.922 --> 00:05:28.784
&gt;&gt; Kyle Simpson: I could have pulled that
error message from the validator, but

58
00:05:28.784 --> 00:05:30.189
I'm not gonna go to that step.

59
00:05:30.189 --> 00:05:31.424
So let's just,

60
00:05:31.424 --> 00:05:36.556
we'll ask Validate.checkMinMax it
should give us a true or false.

61
00:05:36.556 --> 00:05:39.723
If it's true we'll proceed and
respond with an API request.

62
00:05:39.723 --> 00:05:43.754
If it's false we'll let
the browser know that there was

63
00:05:43.754 --> 00:05:48.485
a failure by sending back a JSON
object with an error in it, okay.

64
00:05:52.633 --> 00:05:55.100
&gt;&gt; Kyle Simpson: So
now let's write that validate rule.

65
00:05:55.100 --> 00:05:59.150
We're gonna have a function that's called

66
00:06:02.990 --> 00:06:07.300
checkMinMax takes in a min and
a max number.

67
00:06:09.840 --> 00:06:14.799
And it,
the first rule that we'll say is if,

68
00:06:20.048 --> 00:06:21.940
&gt;&gt; Speaker 2: Did you get the data values?

69
00:06:21.940 --> 00:06:22.460
&gt;&gt; Kyle Simpson: What's that?

70
00:06:22.460 --> 00:06:23.790
&gt;&gt; Speaker 2: Don't you need
the value you're checking?

71
00:06:26.170 --> 00:06:26.670
&gt;&gt; Kyle Simpson: What do you mean?

72
00:06:28.770 --> 00:06:30.067
&gt;&gt; Speaker 2: MinMax is a bound right?

73
00:06:30.067 --> 00:06:33.268
&gt;&gt; Kyle Simpson: Yeah but those
are the things that we're passing in,

74
00:06:33.268 --> 00:06:36.766
we're gonna use MinMax to
constrain our random numbers.

75
00:06:36.766 --> 00:06:37.528
&gt;&gt; Speaker 2: Gotcha.

76
00:06:37.528 --> 00:06:40.715
&gt;&gt; Kyle Simpson: So we're checking to
make sure that MinMax is what we want to

77
00:06:40.715 --> 00:06:41.361
be, okay?

78
00:06:41.361 --> 00:06:45.410
So let's say that, just for simplicity,

79
00:06:45.410 --> 00:06:50.028
we're not gonna do data
transformations here.

80
00:06:50.028 --> 00:06:53.199
You could've done a data formatting
on the inbound requests but

81
00:06:53.199 --> 00:06:55.725
let's just do our data formatting in here.

82
00:06:55.725 --> 00:06:59.090
We'll make sure that Min
is definitely a number.

83
00:06:59.090 --> 00:07:05.311
So there's our coercion playing in,
make sure it's definitely a number and

84
00:07:05.311 --> 00:07:08.769
make sure Max is also definitely a number.

85
00:07:08.769 --> 00:07:15.695
Oops, all right so
the first way that this is gonna fail.

86
00:07:20.064 --> 00:07:25.860
&gt;&gt; Kyle Simpson: The first way that this
would fail is if Max was less than Min.

87
00:07:27.210 --> 00:07:29.970
We should respond back,
nope that's not good.

88
00:07:29.970 --> 00:07:33.300
So we can just do a return false rather
than sending an error message here.

89
00:07:33.300 --> 00:07:34.600
But that's one way that it should fail.

90
00:07:34.600 --> 00:07:39.630
And let's say that another
way it should fail is if Min

91
00:07:39.630 --> 00:07:44.080
is less than zero,
that's also a failure case.

92
00:07:44.080 --> 00:07:47.210
So let's fail the validation there and

93
00:07:47.210 --> 00:07:52.740
if Max is greater than 100,
just making stuff up.

94
00:07:52.740 --> 00:07:55.460
Those are our three data validation rules.

95
00:07:55.460 --> 00:07:58.470
Now the point I want to make about data
validation that we're going to share

96
00:07:58.470 --> 00:08:02.560
in this way, is that this is
essentially stateless data validation.

97
00:08:02.560 --> 00:08:09.270
We don't need to know anything about
our back end state to do this.

98
00:08:09.270 --> 00:08:15.380
So checking to see that an email address
is well formed is a stateless validation.

99
00:08:15.380 --> 00:08:19.610
Checking to see that an email address
is unique within your system,

100
00:08:19.610 --> 00:08:22.420
that's not stateless that's stateful.

101
00:08:22.420 --> 00:08:26.640
And you can't really do stateful
validations entirely in the browser.

102
00:08:26.640 --> 00:08:28.827
So we're constraining ourselves,

103
00:08:28.827 --> 00:08:32.711
the shared data validations
are ones that are stateless, okay?

104
00:08:32.711 --> 00:08:35.485
So if all of those pass,
then we just simply return true.

105
00:08:38.396 --> 00:08:42.017
&gt;&gt; Kyle Simpson: Now this function, as
written, does not care in any way shape or

106
00:08:42.017 --> 00:08:44.890
form what environment it's running in.

107
00:08:44.890 --> 00:08:48.320
It's just a data thing,
it just does some data checks, okay?

108
00:08:48.320 --> 00:08:52.340
We're passing in a min and a max and
it's just going to answer true or false.

109
00:08:52.340 --> 00:08:54.230
Let's expose that on our public API.

110
00:09:02.663 --> 00:09:04.580
&gt;&gt; Kyle Simpson: Here's how we
were using it on the server.

111
00:09:04.580 --> 00:09:08.033
And let's just make sure so
Validate.checkMinMax, the min and

112
00:09:08.033 --> 00:09:11.930
the max should definitely come in
correctly, so that should work.

113
00:09:11.930 --> 00:09:16.460
Let's actually use those though to
actually constrain our Foo random number.

114
00:09:16.460 --> 00:09:21.400
So let's start out num being that random
number, but that's a floating point.

115
00:09:21.400 --> 00:09:26.501
So if we said num* 1E9, which is a really,

116
00:09:26.501 --> 00:09:33.613
really big number,
&gt;&gt; Kyle Simpson: And

117
00:09:33.613 --> 00:09:38.040
we say math.trunc, so that truncates it.

118
00:09:38.040 --> 00:09:42.187
So now we have a really,
really big random integer.

119
00:09:42.187 --> 00:09:49.683
Now what we wanna then say the way
that we constrain it to a min and

120
00:09:49.683 --> 00:09:54.364
a max, is that we're going to do math.

121
00:09:54.364 --> 00:09:59.919
I'm sorry, we're gonna take that
number that's been constrained,

122
00:09:59.919 --> 00:10:02.614
we're gonna mod it by data.max.

123
00:10:08.438 --> 00:10:13.143
&gt;&gt; Kyle Simpson: We're gonna mod
it by the subtraction of those,

124
00:10:13.143 --> 00:10:16.380
so (data.max- data.min).

125
00:10:16.380 --> 00:10:18.570
So if I said that
the minimum should be 5 and

126
00:10:18.570 --> 00:10:21.770
the maximum should be 10,
we'll subtract those two.

127
00:10:21.770 --> 00:10:25.190
So we're gonna mod our big number by 5.

128
00:10:25.190 --> 00:10:27.760
So we're gonna get values
from zero to four and

129
00:10:27.760 --> 00:10:30.280
then we're gonna add back in our data.min.

130
00:10:30.280 --> 00:10:35.640
Don't worry if that math
sounds kinda crazy,

131
00:10:35.640 --> 00:10:38.210
I've just done it a bunch of times.

132
00:10:38.210 --> 00:10:43.020
That's how you're gonna constrain
a random number to a particular range.

133
00:10:43.020 --> 00:10:44.702
So now I'm gonna say that's my new num.

134
00:10:55.179 --> 00:10:59.563
&gt;&gt; Kyle Simpson: So now instead of sending
back some kind of floating point thing,

135
00:10:59.563 --> 00:11:03.460
I'm sending back a piece of
data that has definitely.

136
00:11:03.460 --> 00:11:05.030
Now actually,
now that I'm thinking about it,

137
00:11:06.230 --> 00:11:09.630
that logic is something we
want to do in both places.

138
00:11:09.630 --> 00:11:12.330
We want to do that on the browser and
in the server.

139
00:11:12.330 --> 00:11:15.530
And here we've constrained it to only
happening inside of our API handler.

140
00:11:15.530 --> 00:11:20.880
This is something that the Foo
random method should do, right?

141
00:11:20.880 --> 00:11:27.648
So let's take that code actually,
the code that I just wrote.

142
00:11:27.648 --> 00:11:29.948
Let's put it inside a Foo,
let me open back up Foo.

143
00:11:40.579 --> 00:11:43.270
&gt;&gt; Kyle Simpson: Let's say that
the Foo random takes a min and a max.

144
00:11:43.270 --> 00:11:47.510
That's different than what
the Math.random takes.

145
00:11:47.510 --> 00:11:49.280
So let's put this logic here.

146
00:11:50.490 --> 00:11:55.772
Let's say first that num = Math.random and

147
00:11:55.772 --> 00:12:00.220
then let's say return the stuff, and

148
00:12:00.220 --> 00:12:05.641
we just need to update it,
it's not referring

149
00:12:05.641 --> 00:12:10.093
to data.max and data.min anymore.

150
00:12:15.340 --> 00:12:18.029
&gt;&gt; Kyle Simpson: The benefit of our data
validation rules are we know that max is

151
00:12:18.029 --> 00:12:21.310
already greater than min because
we've already validated that.

152
00:12:21.310 --> 00:12:24.230
We would not have gotten to this point
if that validation hadn't already

153
00:12:24.230 --> 00:12:24.970
happened, okay?

154
00:12:27.730 --> 00:12:31.927
So now it's going to return me back
a random number that's constrained to

155
00:12:31.927 --> 00:12:33.631
a particular integer range.

