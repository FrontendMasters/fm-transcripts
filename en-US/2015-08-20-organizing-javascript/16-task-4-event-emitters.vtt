WEBVTT

1
00:00:00.000 --> 00:00:03.747
[MUSIC]

2
00:00:03.747 --> 00:00:06.101
&gt;&gt; Kyle Simpson: Just for the sake of
keeping going along the same lines

3
00:00:06.101 --> 00:00:07.580
of thinking that we had before.

4
00:00:07.580 --> 00:00:10.165
I'm gonna skip items one and
two in the task 4.

5
00:00:10.165 --> 00:00:12.489
I'll come back in the very end and

6
00:00:12.489 --> 00:00:17.387
do those quickly those are kinda some
throwaway things for me to try but

7
00:00:17.387 --> 00:00:22.260
3 and 4 are really spot on to
what we were just talking about.

8
00:00:22.260 --> 00:00:27.130
So I already showed you that
we could refactor to add

9
00:00:27.130 --> 00:00:32.600
an API method which was this load
person method to our API and

10
00:00:32.600 --> 00:00:37.070
then we could directly call it from
inside of the carousel function.

11
00:00:37.070 --> 00:00:37.570
Okay?

12
00:00:39.330 --> 00:00:43.149
There's a couple of problems with that
when you start thinking of an even bigger

13
00:00:43.149 --> 00:00:45.385
level at an even higher
level of abstraction.

14
00:00:45.385 --> 00:00:50.410
So we certainly improve things by doing
that compared to what we had before.

15
00:00:50.410 --> 00:00:55.570
But even this may not be the end goal or
the best possible design.

16
00:00:55.570 --> 00:00:59.369
So this next line of thinking is an even
further stretch of your envelope.

17
00:01:00.510 --> 00:01:03.116
Conceptually speaking, okay?

18
00:01:03.116 --> 00:01:07.323
One of the things that we've done here is
that even though we have the two actual

19
00:01:07.323 --> 00:01:08.807
pieces of logic separate.

20
00:01:08.807 --> 00:01:15.530
We've created a very strong
tie between these two modules.

21
00:01:15.530 --> 00:01:18.660
And we only have one of them, so
it doesn't seem like such a big deal.

22
00:01:18.660 --> 00:01:23.140
But if the carousel module had 15
different functions in it, and it was

23
00:01:23.140 --> 00:01:29.360
calling five or ten public API methods on
the details module, and if the details

24
00:01:29.360 --> 00:01:32.600
module was calling the carousel
module in a bunch of different ways.

25
00:01:32.600 --> 00:01:38.460
There's an awful lot of spaghetti mixture
that would be happening between the two.

26
00:01:38.460 --> 00:01:42.170
That design is certainly functional and

27
00:01:42.170 --> 00:01:45.560
that's what most people think
constitutes proper software design.

28
00:01:46.850 --> 00:01:50.010
My feeling is it's functional but
it's not ideal.

29
00:01:51.210 --> 00:01:53.814
I don't like those strong
brittle ties with things.

30
00:01:53.814 --> 00:01:58.242
The carousel module should to
the extent possible be completely

31
00:01:58.242 --> 00:02:01.580
independent from the details module.

32
00:02:01.580 --> 00:02:05.330
It should know as little as
possible about the details module.

33
00:02:05.330 --> 00:02:07.440
In fact, it'd be good if it
didn't know about it all.

34
00:02:09.250 --> 00:02:10.860
That seems like an anachronism.

35
00:02:10.860 --> 00:02:15.148
It seems like It's impossible for
the carousel module to call the details

36
00:02:15.148 --> 00:02:17.776
module or
to invoke some of it's behavior and

37
00:02:17.776 --> 00:02:20.694
simultaneously not know
about the module at all.

38
00:02:20.694 --> 00:02:22.720
It seems impossible right.

39
00:02:22.720 --> 00:02:26.760
It turns out that in software design
especially in JavaScript we do have,

40
00:02:26.760 --> 00:02:30.770
no I'm not going to call it like silver or
magic bullet or anything.

41
00:02:30.770 --> 00:02:36.230
But we do have a way to accomplish
to square those two things together.

42
00:02:36.230 --> 00:02:40.267
We can create a layer of indirection which
allows the two things to stay separate

43
00:02:40.267 --> 00:02:43.232
without knowing about each other but
still communicate.

44
00:02:43.232 --> 00:02:46.830
And the most natural way to
do that is through events.

45
00:02:46.830 --> 00:02:50.860
Now you've probably picked up on the fact
that we've been dealing with events like

46
00:02:50.860 --> 00:02:52.020
clicking on buttons, right?

47
00:02:52.020 --> 00:02:53.310
I click on a button.

48
00:02:53.310 --> 00:02:55.080
That fires an event that I can listen to.

49
00:02:56.110 --> 00:02:59.340
But another way of thinking about it
is what if I don't have dom elements

50
00:02:59.340 --> 00:03:03.530
at all involved what if I just have two
random JavaScript objects in my app,

51
00:03:03.530 --> 00:03:05.450
two different modules.

52
00:03:05.450 --> 00:03:08.130
And they don't know about each other but

53
00:03:08.130 --> 00:03:11.300
they do need to cooperate
to get the job done.

54
00:03:11.300 --> 00:03:15.733
Could I create a layer of indirection
between them with an event system

55
00:03:15.733 --> 00:03:19.035
such that this guy over here
could send out an event,

56
00:03:19.035 --> 00:03:21.533
doesn't care who captures the event.

57
00:03:21.533 --> 00:03:26.666
And this guy over here could listen for
the event, doesn't care who sent it.

58
00:03:26.666 --> 00:03:30.531
Do you see how that would create this
sort of triangular layer of indirection.

59
00:03:30.531 --> 00:03:32.392
Where they don't have to
know about each other but

60
00:03:32.392 --> 00:03:34.489
they still are able to talk
through this intermediary.

61
00:03:34.489 --> 00:03:38.008
And what I've just described this
idea of sending out an event,

62
00:03:38.008 --> 00:03:40.190
aka publishing an event.

63
00:03:40.190 --> 00:03:41.920
And listening for an event.

64
00:03:41.920 --> 00:03:44.594
Aka subscribing to an event.

65
00:03:44.594 --> 00:03:48.500
If you've been around at all in the
development industry and web industry for

66
00:03:48.500 --> 00:03:50.964
a little while you may
have heard few years back,

67
00:03:50.964 --> 00:03:53.630
pub sub was a big hot buzzword
that was going around.

68
00:03:53.630 --> 00:03:57.506
And people were creating companies for
pub subbing and frameworks and

69
00:03:57.506 --> 00:04:00.995
all kinds of crazy things and
they were books written about it.

70
00:04:00.995 --> 00:04:05.885
And all of that nonsense boils down to

71
00:04:05.885 --> 00:04:10.774
do I have an object that can listen for

72
00:04:10.774 --> 00:04:14.105
events and send events?

73
00:04:14.105 --> 00:04:18.154
You can take all of that nonsense that
was going on for two or three years and

74
00:04:18.154 --> 00:04:23.380
boil it down to a centralized object that
can emit events and listen for events.

75
00:04:23.380 --> 00:04:25.400
So I could create one
of those really easily.

76
00:04:25.400 --> 00:04:28.950
If I could do that I could create
a layer of indirection between

77
00:04:28.950 --> 00:04:31.480
all of my modules so that they didn't
have to know about each other.

78
00:04:32.540 --> 00:04:33.490
And that's what we're gonna get out.

79
00:04:33.490 --> 00:04:35.780
That's kind of the final thing that
we wanna spend our time looking at.

80
00:04:35.780 --> 00:04:38.780
So I have provided to you,

81
00:04:38.780 --> 00:04:43.100
I've included to you a file
called event emitter two dot JS.

82
00:04:43.100 --> 00:04:45.010
We're not loading it yet but
we're gonna load it now.

83
00:04:45.010 --> 00:04:47.248
So I'm gonna add it to my list.

84
00:04:47.248 --> 00:04:55.089
So script source js/eventemitter2.

85
00:04:58.503 --> 00:05:01.134
&gt;&gt; Kyle Simpson: It's one of those cans
where the label tells you exactly what

86
00:05:01.134 --> 00:05:03.190
it's doing on the inside of the box.

87
00:05:03.190 --> 00:05:06.680
That thing creates something that
lets us make event emitters.

88
00:05:06.680 --> 00:05:10.520
It's a tiny little
library like really tiny.

89
00:05:10.520 --> 00:05:12.992
But the great part about it is,

90
00:05:12.992 --> 00:05:18.805
it is the exact same API as how events
work in the node world on the server.

91
00:05:18.805 --> 00:05:21.221
It literally took the event emitter API.

92
00:05:21.221 --> 00:05:24.303
They added some extra stuff to it but
they took the event emitter API and

93
00:05:24.303 --> 00:05:26.880
they ported it so
they could be used in the browser as well.

94
00:05:28.060 --> 00:05:30.840
And when we talk tomorrow afternoon if
any of you come tomorrow afternoon.

95
00:05:30.840 --> 00:05:34.313
We talk about kind of the final
arc of all this discussion.

96
00:05:34.313 --> 00:05:38.184
We talk about sharing code between things
that holy grail of sharing code is when

97
00:05:38.184 --> 00:05:42.740
I don't even have to switch I can just
use the exact same code in both places.

98
00:05:42.740 --> 00:05:45.030
So what's nice about event emitters
is I can write the same code,

99
00:05:45.030 --> 00:05:48.840
and it'll run identically no
matter what the environment.

100
00:05:48.840 --> 00:05:54.052
For our purposes, it's just a tiny
library that lets us do pub sub without

101
00:05:54.052 --> 00:05:58.696
any need for a crazy framework,
or service, or an app, or book.

102
00:05:58.696 --> 00:06:02.356
We don't need any of that, we need
an object that we can send events to and

103
00:06:02.356 --> 00:06:03.710
listen to events.

104
00:06:03.710 --> 00:06:10.430
So here's how we use eventemitter,
let's go back to our app.js,

105
00:06:10.430 --> 00:06:15.360
and let's make an event object.

106
00:06:17.600 --> 00:06:20.040
I'll put it on the window so that it's
going to be available to everybody, so

107
00:06:20.040 --> 00:06:22.470
this is a global variable
that everybody can access.

108
00:06:22.470 --> 00:06:26.127
I'll call it EVT,
that's my normal style of how I do it.

109
00:06:26.127 --> 00:06:27.760
So I'll call it EVT.

110
00:06:27.760 --> 00:06:29.820
And it needs to be an event emitter.

111
00:06:29.820 --> 00:06:33.970
So I'm just gonna say new
EventEmitter2 cuz the event

112
00:06:33.970 --> 00:06:36.940
emitter is the constructor for
this kind of object.

113
00:06:38.200 --> 00:06:41.470
We haven't dealt with what new does
just don't worry about that detail.

114
00:06:41.470 --> 00:06:46.066
It's constructing something.

115
00:06:46.066 --> 00:06:49.650
So that thing is a thing that I
can use in multiple places now.

116
00:06:51.140 --> 00:06:56.735
So let's go back to the code
where I am calling .loadPerson.

117
00:06:56.735 --> 00:07:01.541
If I could think about that in terms of
not telling you exactly what I want to do

118
00:07:01.541 --> 00:07:06.540
but describing abstractly or
indirectly what I hope would happen.

119
00:07:06.540 --> 00:07:10.435
I would,
instead of calling this a loadPerson,

120
00:07:10.435 --> 00:07:15.188
I would call this event that
has happened person selected.

121
00:07:16.857 --> 00:07:19.576
&gt;&gt; Kyle Simpson: Cuz I don't care what
happens when a person gets selected from

122
00:07:19.576 --> 00:07:22.700
the abstract perspective,
from the conceptual perspective.

123
00:07:22.700 --> 00:07:24.190
I don't care what you do with it,

124
00:07:24.190 --> 00:07:27.580
I just wanna let you know that
a person has been selected.

125
00:07:27.580 --> 00:07:32.210
So if I did,
EVT.emit which is how you send events.

126
00:07:32.210 --> 00:07:39.440
And I used, I just make up an event
name like person-selected.

127
00:07:39.440 --> 00:07:41.740
And I need to give it some data.

128
00:07:41.740 --> 00:07:44.350
The only piece of data that I
need to pass along is the ID.

129
00:07:47.430 --> 00:07:49.660
So we've taken one line and
replaced it with that other line.

130
00:07:51.030 --> 00:07:54.280
I'm now sending out an event
called person-selected and

131
00:07:54.280 --> 00:07:58.160
I do not care who if anyone
listens to the event.

132
00:07:58.160 --> 00:07:59.580
It's completely,

133
00:07:59.580 --> 00:08:02.850
I don't even know that there is
somebody that cares about the event.

134
00:08:02.850 --> 00:08:05.940
But I just wanna let people know
just in case anybody wanted and

135
00:08:05.940 --> 00:08:07.460
in case anybody care.

136
00:08:07.460 --> 00:08:10.780
Here is an important detail what if there
was more than one different part of

137
00:08:10.780 --> 00:08:12.940
the application that cared.

138
00:08:12.940 --> 00:08:14.500
That's totally cool with me.

139
00:08:14.500 --> 00:08:15.490
I don't care.

140
00:08:15.490 --> 00:08:18.120
If there were 15 different
parts of the application

141
00:08:18.120 --> 00:08:21.480
that each had a special different job
to do once a person was selected.

142
00:08:21.480 --> 00:08:23.200
That's cool with me.

143
00:08:23.200 --> 00:08:26.770
Cuz I just send out the event to the hub
and I let the other people deal with it.

144
00:08:26.770 --> 00:08:27.700
Okay.

145
00:08:27.700 --> 00:08:29.279
It's an extra layer of indirection here.

146
00:08:30.290 --> 00:08:33.672
Now, how do I use that
on the details side?

147
00:08:33.672 --> 00:08:36.950
Well, I come to the details module.

148
00:08:36.950 --> 00:08:39.344
And, I need to listen for that event.

149
00:08:39.344 --> 00:08:42.865
A good thing to do in my init function,
I'm going to listen.

150
00:08:42.865 --> 00:08:44.835
EVT.on is how we listen.

151
00:08:44.835 --> 00:08:48.094
For the person-selected event.

152
00:08:48.094 --> 00:08:50.240
And, I need to have it call a function.

153
00:08:51.520 --> 00:08:54.283
Anybody have any guess as to
what function I want it to call?

154
00:08:54.283 --> 00:08:55.088
&gt;&gt; Speaker 2: Load person.

155
00:08:55.088 --> 00:08:56.570
&gt;&gt; Kyle Simpson: Load person.

156
00:08:56.570 --> 00:08:57.350
That's cool right?

157
00:08:57.350 --> 00:09:00.230
I don't even need to make a new
function I'll just call it loadPerson.

158
00:09:01.480 --> 00:09:05.880
It's nice and convenient that it happens
to be passing along the data to me that

159
00:09:05.880 --> 00:09:08.092
I'm going to receive from that event.

160
00:09:08.092 --> 00:09:12.143
Do you see how easy that was to actually
create a full layer of abstraction or

161
00:09:12.143 --> 00:09:13.830
indirection between the two?

162
00:09:13.830 --> 00:09:16.690
Now neither one of the two
knows about the other one.

163
00:09:16.690 --> 00:09:17.860
They don't need to.

164
00:09:17.860 --> 00:09:22.942
And because I've done that, I've made
my code significantly more flexible.

165
00:09:22.942 --> 00:09:27.610
You know what my favorite trick is
when I deal with stuff like events?

166
00:09:27.610 --> 00:09:31.710
Now I can independently
test these two modules.

167
00:09:31.710 --> 00:09:37.450
I can create a test mock that creates
a fake event called person selected.

168
00:09:37.450 --> 00:09:40.469
Doesn't wait for somebody to click
a button I just make a person event.

169
00:09:40.469 --> 00:09:43.033
And I throw out a piece of data and
I test whether or

170
00:09:43.033 --> 00:09:46.675
not the details module receives that
event and does what it needs to.

171
00:09:49.153 --> 00:09:51.423
&gt;&gt; Kyle Simpson: Because I have
that layer of indirection,

172
00:09:51.423 --> 00:09:53.510
I don't have to manually call a thing.

173
00:09:53.510 --> 00:09:54.660
I can just throw out events.

174
00:09:54.660 --> 00:09:58.900
Or I can test the carousel module by
setting up a listener to see if that event

175
00:09:58.900 --> 00:09:59.830
gets fired.

176
00:09:59.830 --> 00:10:01.451
And see if the carousel does his job.

177
00:10:03.430 --> 00:10:06.456
&gt;&gt; Kyle Simpson: So events create that
abstraction which lets me have a lot more

178
00:10:06.456 --> 00:10:07.750
flexibility.

179
00:10:07.750 --> 00:10:12.160
A lot less rigidity to my design,
more flexible for testing and so forth.

180
00:10:13.460 --> 00:10:16.250
I'm a huge fan of this
approach to software design.

181
00:10:16.250 --> 00:10:18.610
I don't like having one
module calling another.

182
00:10:20.200 --> 00:10:22.140
Wherever possible, if I can avoid it,

183
00:10:22.140 --> 00:10:24.930
I try to avoid that,
it's not always possible.

184
00:10:24.930 --> 00:10:28.190
But were possible if I can avoid it,
if it's just like a throwing a thing

185
00:10:28.190 --> 00:10:31.760
over the fence sort of an action and
I don't really need a response back.

186
00:10:32.880 --> 00:10:34.271
I just publish an event.

