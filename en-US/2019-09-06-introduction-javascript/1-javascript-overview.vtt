WEBVTT

1
00:00:00.140 --> 00:00:01.850
&gt;&gt; Brian Holt: So
let's frame how code works then.

2
00:00:01.850 --> 00:00:08.442
So I have a little snippet of code
here that is a valid JavaScript, okay?

3
00:00:08.442 --> 00:00:11.728
JavaScript is a thing that we're
gonna call single threaded,

4
00:00:11.728 --> 00:00:15.262
which is a fancy term that you don't
really have to carry about, but

5
00:00:15.262 --> 00:00:18.432
it just means that only one thing
is ever happening at a time.

6
00:00:18.432 --> 00:00:22.557
If you're coming from a different language
this means that there's no concurrency in

7
00:00:22.557 --> 00:00:23.241
JavaScript.

8
00:00:23.241 --> 00:00:27.786
It's not multiple things happening, it's
always just one thing happening at a time.

9
00:00:27.786 --> 00:00:31.388
In general,
it's gonna be what we call procedural.

10
00:00:31.388 --> 00:00:34.037
And I'm just throwing out all these terms
because someone is gonna throw them at

11
00:00:34.037 --> 00:00:35.909
you, I'm trying to get you
used to some of these terms.

12
00:00:35.909 --> 00:00:39.543
But procedural just means it goes if
line one executes, then line two,

13
00:00:39.543 --> 00:00:41.310
then line three, then line four.

14
00:00:41.310 --> 00:00:42.929
It's kinda what you'd expect, right?

15
00:00:42.929 --> 00:00:44.334
It's how you would read.

16
00:00:44.334 --> 00:00:52.630
So this here on line one,
we've declared a variable monthly rent.

17
00:00:52.630 --> 00:00:53.900
And this is, as you might imagine,

18
00:00:53.900 --> 00:00:57.771
representing how much it cost per
month to live in some place, right?

19
00:00:57.771 --> 00:01:00.210
Const just means that we're
declaring a variable.

20
00:01:01.270 --> 00:01:06.340
So now we have this monthly rent variable
that is storing the value of 500, right?

21
00:01:06.340 --> 00:01:12.610
So if I just come underneath here,
and I said console log, monthly rent,

22
00:01:12.610 --> 00:01:19.370
you can see down here in the results,
you can see 500 comes up, right?

23
00:01:19.370 --> 00:01:23.050
So now monthly rent is
representing that 500, right?

24
00:01:23.050 --> 00:01:24.480
If you've ever did algebra,

25
00:01:24.480 --> 00:01:27.980
this is much the same that you'd have
like x squared equals one, right?

26
00:01:27.980 --> 00:01:29.420
And then, you would have to solve for
x, right?

27
00:01:29.420 --> 00:01:33.117
This is the similar idea that we
have these symbols that represent

28
00:01:33.117 --> 00:01:34.132
something else.

29
00:01:34.132 --> 00:01:35.312
Does that make sense?

30
00:01:35.312 --> 00:01:37.996
It's a very fundamental concept.

31
00:01:37.996 --> 00:01:42.570
So let's make sure that you get this,
okay?

32
00:01:42.570 --> 00:01:44.565
So now we have monthly rent.

33
00:01:44.565 --> 00:01:47.498
This console log thing right here,

34
00:01:47.498 --> 00:01:51.720
this is just allowing us
to display this down here.

35
00:01:51.720 --> 00:01:54.070
We'll talk about how that
functions a little bit more later.

36
00:01:54.070 --> 00:01:57.350
But suffice to say,
if you put console log, then parentheses,

37
00:01:57.350 --> 00:02:01.530
whatever you put between those parentheses
is going to be logged out to your console.

38
00:02:03.910 --> 00:02:05.340
Okay, so I'm just gonna delete that.

39
00:02:06.940 --> 00:02:10.790
As you can see here, these little code
blocks are being executed in your browsers

40
00:02:10.790 --> 00:02:14.240
and so you can kind of play around
with them and see what happens.

41
00:02:14.240 --> 00:02:16.534
Just be aware that if
you refresh the page,

42
00:02:16.534 --> 00:02:19.229
it's going to delete
everything that she did so.

43
00:02:19.229 --> 00:02:23.618
Okay, so what is const?

44
00:02:23.618 --> 00:02:29.790
Const is a keyword in JavaScript the same
like I'm declaring a new variable, right?

45
00:02:29.790 --> 00:02:31.466
There's several ways to do that.

46
00:02:31.466 --> 00:02:34.035
We're using const which means that
this can no longer be altered.

47
00:02:34.035 --> 00:02:40.928
So I cannot come down here and
say monthly, I can't spell it, equals 100.

48
00:02:40.928 --> 00:02:44.425
Notice it says right here, invalid
assignment to const monthly rent that's

49
00:02:44.425 --> 00:02:48.000
because when you say const, it can no
longer be reassigned to something else.

50
00:02:49.390 --> 00:02:53.577
If I wanted to do that,
there's a different one called let.

51
00:02:53.577 --> 00:02:56.910
And the only difference between let and

52
00:02:56.910 --> 00:03:00.754
const is let allows you
to reassign it later.

53
00:03:00.754 --> 00:03:07.661
So now this works just fine,
&gt;&gt; Brian Holt: Okay?

54
00:03:07.661 --> 00:03:08.972
&gt;&gt; Speaker 2: Sorry.

55
00:03:08.972 --> 00:03:09.765
&gt;&gt; Brian Holt: Please.

56
00:03:09.765 --> 00:03:12.151
&gt;&gt; Speaker 2: So
when you say reassign it later,

57
00:03:12.151 --> 00:03:15.288
you mean the value of it
can be changed later?

58
00:03:15.288 --> 00:03:16.012
&gt;&gt; Brian Holt: Yep.

59
00:03:16.012 --> 00:03:17.625
&gt;&gt; Speaker 2: Okay, so
the 500 in that case.

60
00:03:17.625 --> 00:03:18.755
&gt;&gt; Brian Holt: Right.

61
00:03:18.755 --> 00:03:22.465
&gt;&gt; Speaker 2: If it's const,
then that monthly rent will always be 500,

62
00:03:22.465 --> 00:03:23.941
you can't change that.

63
00:03:23.941 --> 00:03:24.921
&gt;&gt; Brian Holt: Forever, exactly.

64
00:03:24.921 --> 00:03:26.248
It will forever be 500.

65
00:03:26.248 --> 00:03:27.875
That's a good observation.

66
00:03:27.875 --> 00:03:36.470
So down here on line three we see yearly
rent equals monthly rent times 12, right?

67
00:03:36.470 --> 00:03:40.410
So notice that we're doing math with
monthly rent because monthly rent is just

68
00:03:40.410 --> 00:03:42.329
a stand-in for that 500, right?

69
00:03:45.247 --> 00:03:49.415
&gt;&gt; Brian Holt: But what's great about
this, now if I come in down here and

70
00:03:49.415 --> 00:03:53.598
use monthly rent again,
let's say const decadelyrent.

71
00:03:53.598 --> 00:03:54.657
That's a word, right?

72
00:03:54.657 --> 00:03:55.628
We're rolling with it.

73
00:03:55.628 --> 00:03:58.320
It's decadelyrent cuz
that's a useful thing.

74
00:03:58.320 --> 00:04:03.948
I could say monthlyrent times 120, right?

75
00:04:03.948 --> 00:04:09.955
And then down here I'm just
going to put decadelyrent rent.

76
00:04:09.955 --> 00:04:11.872
And notice that is 10 times bigger.

77
00:04:11.872 --> 00:04:13.297
So like you would expect, right?

78
00:04:13.297 --> 00:04:18.087
Or if you wanna make this
even bit more clear, right,

79
00:04:18.087 --> 00:04:21.716
cuz 12 months in a year and 10 years.

80
00:04:21.716 --> 00:04:24.771
But notice I'm using monthlyRent
in two different places.

81
00:04:24.771 --> 00:04:28.420
The advantages here, instead of just
writing 500 in every single place.

82
00:04:28.420 --> 00:04:32.100
Just now let's say I move places,
and my rent changes, right?

83
00:04:32.100 --> 00:04:34.980
Now we're moving up in the world so
now it's 750, right?

84
00:04:34.980 --> 00:04:41.500
So if I change this to 750, notice that
I only had to change it in one place and

85
00:04:41.500 --> 00:04:44.470
then it just perpetuated to
all the other places, right?

86
00:04:44.470 --> 00:04:45.629
Not only that, but

87
00:04:45.629 --> 00:04:50.135
it makes sense that yearly rent would
be monthly rent times 12, right?

88
00:04:50.135 --> 00:04:51.105
So you can kind of,

89
00:04:51.105 --> 00:04:55.370
it's almost allowing you to document your
code in the process of writing the code.

90
00:04:55.370 --> 00:04:56.796
This is what I was talking
about being clear, right?

91
00:04:56.796 --> 00:05:01.175
It makes sense that yearly rent
would be monthly rent times 12.

92
00:05:01.175 --> 00:05:02.610
&gt;&gt; Brian Holt: Good so far?

93
00:05:04.405 --> 00:05:11.343
&gt;&gt; Brian Holt: Going back to this being
let, and say now monthlyRent = 1000,

94
00:05:11.343 --> 00:05:17.805
cuz of gentrification or
something like that, I don't know.

95
00:05:17.805 --> 00:05:21.839
[LAUGH] What do you think
yearly rent is gonna be now?

96
00:05:21.839 --> 00:05:25.645
Well, notice down here that it is 12,000.

97
00:05:25.645 --> 00:05:29.740
So notice that it's going to take
the last value that you signed, right?

98
00:05:29.740 --> 00:05:33.430
When I do this,
this previous 750 is thrown away.

99
00:05:33.430 --> 00:05:35.020
It's no longer accessible at all, right?

100
00:05:35.020 --> 00:05:37.278
So now it's only 1000.

101
00:05:39.209 --> 00:05:40.523
&gt;&gt; Brian Holt: I think these
things are kind of intuitive,

102
00:05:40.523 --> 00:05:41.560
I hope they're intuitive to you.

103
00:05:41.560 --> 00:05:43.580
They're meant to be intuitive.

104
00:05:43.580 --> 00:05:46.900
But sometimes it's just making
sure that we kind of go over them.

105
00:05:47.940 --> 00:05:49.752
Something else to note here,

106
00:05:49.752 --> 00:05:53.599
so notice that I'm squishing
these things together, right?

107
00:05:53.599 --> 00:05:54.449
So I have yearly rent.

108
00:05:54.449 --> 00:05:56.258
This is called camel casing.

109
00:05:56.258 --> 00:05:59.350
Because it looks like a camel with
the humps in the middle, right?

110
00:05:59.350 --> 00:06:01.120
I'm not making this stuff up.

111
00:06:01.120 --> 00:06:02.339
Someone else did.

112
00:06:02.339 --> 00:06:04.691
This is very common with JavaScript.

113
00:06:04.691 --> 00:06:08.580
If you're coming from
another language like Python,

114
00:06:08.580 --> 00:06:12.230
they tend to do something
called snake casing.

115
00:06:12.230 --> 00:06:15.160
Yep, snake casing looks like that.

116
00:06:15.160 --> 00:06:16.610
This would be valid JavaScript.

117
00:06:18.900 --> 00:06:21.770
So meaning this will
still execute just fine.

118
00:06:21.770 --> 00:06:23.440
I guess I would have to
change it down here, too.

119
00:06:25.230 --> 00:06:27.420
It's just not how we do it in JavaScript,
right?

120
00:06:27.420 --> 00:06:30.869
So I would implore you while you're
writing JavaScript to make sure that

121
00:06:30.869 --> 00:06:32.288
you're doing camel casing.

122
00:06:36.142 --> 00:06:39.721
&gt;&gt; Brian Holt: And notice I can't say like
yearly space rent because that doesn't

123
00:06:39.721 --> 00:06:41.174
make sense to JavaScript.

124
00:06:41.174 --> 00:06:42.728
When it sees the space it's like okay,

125
00:06:42.728 --> 00:06:46.050
you're finished with that previous
thought, and then starting another one.

126
00:06:46.050 --> 00:06:50.460
And it says I don't know what this is,
and so it gives you an error.

127
00:06:50.460 --> 00:06:53.359
So that's why we have to kinda
squish everything together.

128
00:06:53.359 --> 00:06:54.481
And that's what we use camel case that

129
00:06:54.481 --> 00:06:56.050
makes it really easy to read quickly,
right?

130
00:06:56.050 --> 00:06:57.730
Does that makes sense?

131
00:06:57.730 --> 00:07:01.007
Okay, so lowercase first letter, and

132
00:07:01.007 --> 00:07:05.887
then you just kinda capitalize
all the proceeding words.

