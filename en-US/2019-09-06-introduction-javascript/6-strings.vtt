WEBVTT

1
00:00:00.430 --> 00:00:02.290
&gt;&gt; Brian Holt: So
I'm gonna just delete all of this.

2
00:00:02.290 --> 00:00:03.420
You're welcome to save it, but

3
00:00:03.420 --> 00:00:05.800
I'm just gonna keep working
out of the same file here.

4
00:00:07.610 --> 00:00:13.053
So here I'm gonna say const myName =, and
you can put whatever your name is here.

5
00:00:16.384 --> 00:00:19.980
&gt;&gt; Brian Holt: Now, what's key here is
you're gonna need these double quotes.

6
00:00:19.980 --> 00:00:26.430
You can also put single quotes there,
and you can even put back ticks.

7
00:00:26.430 --> 00:00:30.944
A back tick is the one that on the same
key as the tilde on an American keyboard.

8
00:00:30.944 --> 00:00:34.588
That's next to the 1, right?

9
00:00:34.588 --> 00:00:36.110
So it's not quite a single quote.

10
00:00:37.470 --> 00:00:39.830
So you can see what a single quote
is right there next to each other.

11
00:00:41.520 --> 00:00:44.000
But for now,
I'm just gonna put double quotes.

12
00:00:45.330 --> 00:00:46.150
They all do roughly,

13
00:00:46.150 --> 00:00:50.110
in this particular case,
they do all exactly the same thing, okay?

14
00:00:52.210 --> 00:00:57.888
And now I have this string of
characters right next to each other,

15
00:00:57.888 --> 00:01:00.583
it's being stored in myName.

16
00:01:00.583 --> 00:01:05.116
And now if I say console.log(myName).

17
00:01:05.116 --> 00:01:08.730
I save that, and then I come over
here in my browser and refresh it.

18
00:01:09.830 --> 00:01:12.480
You can see here that's actually
outputting myName to the console.

19
00:01:14.870 --> 00:01:16.232
This is called a string.

20
00:01:16.232 --> 00:01:21.994
And it's called a string because it's
a bunch of characters next to each other,

21
00:01:21.994 --> 00:01:23.952
or a string of characters.

22
00:01:26.264 --> 00:01:30.689
&gt;&gt; Brian Holt: But basically, if you wanna
store words or anything like some sort of

23
00:01:30.689 --> 00:01:35.740
like literal value like that into some
sort of variable, this is how you do it.

24
00:01:35.740 --> 00:01:38.100
And the quotes are very important.

25
00:01:38.100 --> 00:01:41.590
So if I took these quotes away,
and tried to do this.

26
00:01:42.700 --> 00:01:46.340
If I refresh here it's gonna say,
unexpected token identifier.

27
00:01:46.340 --> 00:01:48.680
Because it doesn't know
what to do with that.

28
00:01:48.680 --> 00:01:52.070
It's expecting Brian to be some
sort of variable, and it's like,

29
00:01:52.070 --> 00:01:53.490
I don't know what that is, right?

30
00:01:53.490 --> 00:01:57.750
I don't know what to do with that,
I'm just gonna quit.

31
00:01:57.750 --> 00:02:00.490
And that's when you see
here a syntax error.

32
00:02:00.490 --> 00:02:03.890
So whenever you see a syntax error,
it's basically saying hey,

33
00:02:03.890 --> 00:02:05.030
your grammar is bad, right?

34
00:02:05.030 --> 00:02:09.290
It's like when your English
teacher is editing your essay and

35
00:02:09.290 --> 00:02:12.460
says well, you didn't use this comma
correctly or something like that,

36
00:02:12.460 --> 00:02:13.761
that's what a syntax error is.

37
00:02:13.761 --> 00:02:16.830
They're actually usually
the best kind of errors to have,

38
00:02:16.830 --> 00:02:19.318
because they're usually pretty
easy to fix for the most part.

39
00:02:19.318 --> 00:02:26.783
In fact,
&gt;&gt; Brian Holt: If

40
00:02:26.783 --> 00:02:30.970
you click on this experiment,
right now I have a syntax error on line 1.

41
00:02:30.970 --> 00:02:35.690
If I click on this experiments.js,
it actually says hey, that line's bad.

42
00:02:35.690 --> 00:02:37.730
Something about,
I don't understand this line.

43
00:02:37.730 --> 00:02:40.661
And it's easier to kind of
pick up what's going in there.

44
00:02:44.558 --> 00:02:48.995
&gt;&gt; Brian Holt: Okay, so now if I go
put that back in quotes, delete that,

45
00:02:48.995 --> 00:02:50.730
refresh this.

46
00:02:50.730 --> 00:02:52.110
You have Brian Holt here displaying.

47
00:02:53.420 --> 00:02:56.757
So let's take this one step further.

48
00:02:56.757 --> 00:03:00.634
Let's say instead of having my name here,
I'm gonna have firstName.

49
00:03:02.822 --> 00:03:04.203
&gt;&gt; Brian Holt: I'm gonna have lastName.

50
00:03:06.755 --> 00:03:07.986
&gt;&gt; Brian Holt: Holt.

51
00:03:12.096 --> 00:03:17.952
&gt;&gt; Brian Holt: And then I'm gonna
have here const sentence = hello,

52
00:03:17.952 --> 00:03:22.932
space, notice there's a space right there.

53
00:03:22.932 --> 00:03:29.170
Then I'm gonna say + firstName +.

54
00:03:29.170 --> 00:03:32.917
Let's just expand this for a second so
you can read it a little bit easier.

55
00:03:32.917 --> 00:03:37.870
Okay, and then I'm gonna put + space.

56
00:03:37.870 --> 00:03:41.718
And notice that I'm putting
another space here,

57
00:03:41.718 --> 00:03:44.751
a literal space in between the quotes.

58
00:03:44.751 --> 00:03:48.660
lastName,
&gt;&gt; Brian Holt: +

59
00:03:48.660 --> 00:03:54.921
exclamation point, how are you?

60
00:04:03.030 --> 00:04:06.765
&gt;&gt; Brian Holt: Then I'm gonna log out that
instead of myName right there on line 6.

61
00:04:13.200 --> 00:04:15.540
&gt;&gt; Brian Holt: Now this looks
a little bit odd, wouldn't you say?

62
00:04:16.580 --> 00:04:18.640
Like, what's what's going
on with this space here?

63
00:04:20.900 --> 00:04:22.898
Well, what happens if we
don't have the space, right?

64
00:04:22.898 --> 00:04:26.878
The computer's gonna say, well,
I'm just I'm gonna connect firstName and

65
00:04:26.878 --> 00:04:28.699
lastName right next to each other.

66
00:04:28.699 --> 00:04:30.470
And there's gonna be no
space between them, right?

67
00:04:30.470 --> 00:04:34.160
[COUGH] And there should be a space
between a first name and last name.

68
00:04:34.160 --> 00:04:38.641
So therefore, that's why we're putting
the space here is to let the computer know

69
00:04:38.641 --> 00:04:40.636
that you should be spacing that out.

70
00:04:40.636 --> 00:04:43.755
You have to remember that the computer's
going to do literally everything you

71
00:04:43.755 --> 00:04:44.850
tell it to do, right?

72
00:04:44.850 --> 00:04:47.197
And if you don't be very explicit,
like I want you to do this,

73
00:04:47.197 --> 00:04:48.927
it doesn't get what you're talking about.

74
00:04:52.436 --> 00:04:57.324
&gt;&gt; Brian Holt: So now if I save that and
refresh over here.

75
00:04:59.572 --> 00:05:03.960
&gt;&gt; Brian Holt: You can see that
it's outputting like that.

76
00:05:03.960 --> 00:05:08.810
So this is called string concatenation,
cuz we're connecting strings together.

77
00:05:10.350 --> 00:05:11.850
And just to demonstrate to
you what I was talking about,

78
00:05:11.850 --> 00:05:14.280
I'm gonna get rid of this space here.

79
00:05:14.280 --> 00:05:16.339
So now it's just firstName + lastName.

80
00:05:18.441 --> 00:05:19.471
&gt;&gt; Brian Holt: Now if I refresh here,

81
00:05:19.471 --> 00:05:21.650
notice that BrianHolt
is all shoved together.

82
00:05:23.400 --> 00:05:24.265
Same thing here,

83
00:05:24.265 --> 00:05:29.160
that if I take this space out here,
&gt;&gt; Brian Holt: It'll

84
00:05:29.160 --> 00:05:30.695
shove all of that together.

85
00:05:32.239 --> 00:05:34.529
&gt;&gt; Brian Holt: So you have to be very
explicit about where the spaces go.

86
00:05:37.122 --> 00:05:41.716
&gt;&gt; Speaker 2: So it looks like it works if
you don't have a space between the + and

87
00:05:41.716 --> 00:05:43.450
the constants, right?

88
00:05:44.630 --> 00:05:45.744
&gt;&gt; Brian Holt: Right, like here?

89
00:05:45.744 --> 00:05:47.250
Let's make this larger.

90
00:05:47.250 --> 00:05:53.800
&gt;&gt; Speaker 2: Between Hello and firstName,
I could say Hello + firstName, no spaces.

91
00:05:53.800 --> 00:05:55.480
&gt;&gt; Brian Holt: So
it's gonna work, right, but

92
00:05:55.480 --> 00:05:58.590
it's not going to accomplish what you're
actually wanting it to do, right?

93
00:05:58.590 --> 00:06:01.880
Cuz if you go back over here and
look, notice that Hello and

94
00:06:01.880 --> 00:06:03.070
Brian are shoved together.

95
00:06:04.210 --> 00:06:06.950
&gt;&gt; Speaker 2: Yeah, so you could just add
the space inside of the first string.

96
00:06:06.950 --> 00:06:08.250
&gt;&gt; Brian Holt: Right.
&gt;&gt; Speaker 2: Hello space.

97
00:06:08.250 --> 00:06:09.092
&gt;&gt; Brian Holt: Correct.
&gt;&gt; Speaker 2: Yeah, and

98
00:06:09.092 --> 00:06:13.294
then take out the space around the plus
&gt;&gt; Brian Holt: So

99
00:06:13.294 --> 00:06:14.836
you are saying like here?

100
00:06:14.836 --> 00:06:15.615
&gt;&gt; Speaker 2: Yeah,
&gt;&gt; Brian Holt: Yeah that

101
00:06:15.615 --> 00:06:16.956
space is technically optional.

102
00:06:16.956 --> 00:06:17.960
&gt;&gt; Speaker 2: Okay.

103
00:06:17.960 --> 00:06:21.694
&gt;&gt; Brian Holt: Actually let's triple
check before I made that assertion.

104
00:06:21.694 --> 00:06:24.859
Yeah, that's just for
clarity's sake, right?

105
00:06:24.859 --> 00:06:26.416
&gt;&gt; Speaker 2: Right, for readability
&gt;&gt; Brian Holt: Yeah.

106
00:06:28.993 --> 00:06:31.867
&gt;&gt; Brian Holt: Like here,
I can put all that space there, and

107
00:06:31.867 --> 00:06:33.864
this actually will still work.

108
00:06:33.864 --> 00:06:37.875
Cuz JavaScript just sees a space there and
shoves it all together.

