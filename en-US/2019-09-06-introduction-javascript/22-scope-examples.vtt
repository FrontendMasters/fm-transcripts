WEBVTT

1
00:00:00.213 --> 00:00:01.498
&gt;&gt; Brian Holt: So
let's take a look at this.

2
00:00:05.510 --> 00:00:08.009
&gt;&gt; Brian Holt: let friendsAtYourParty = 0.

3
00:00:08.009 --> 00:00:12.849
If i = 10, less than or
equal to 10, right?

4
00:00:12.849 --> 00:00:16.704
This is the normal for
loop that we've been seeing before.

5
00:00:16.704 --> 00:00:19.193
Now, this let i = 0.

6
00:00:19.193 --> 00:00:22.563
This is only in scope for
this for loop, right?

7
00:00:22.563 --> 00:00:28.189
As soon as this for loop is finished,
I try and console.log(i) down here.

8
00:00:28.189 --> 00:00:32.084
It's not gonna work, right, because
there's only in scope for that for loop.

9
00:00:32.084 --> 00:00:37.704
Now if I move this i outside of here,
notice that this does work.

10
00:00:37.704 --> 00:00:40.873
Because the i is in scope
inside of the for loop.

11
00:00:49.071 --> 00:00:51.999
&gt;&gt; Brian Holt: Now if I say
console.log(friendsAtYourParty),

12
00:00:51.999 --> 00:00:53.107
is that gonna work?

13
00:00:56.611 --> 00:00:58.328
&gt;&gt; Brian Holt: Yeah,
cuz that was declared out.

14
00:00:58.328 --> 00:01:04.402
That was created outside of the for
loop here.

15
00:01:04.402 --> 00:01:09.337
Now, let's go back up here and just to
throw another wrench into something.

16
00:01:09.337 --> 00:01:14.923
Let's say if I say let
getSomeOtherVariable right here and

17
00:01:14.923 --> 00:01:22.195
I don't declare it or I don't give it any
sort of value, and I try and do this.

18
00:01:24.793 --> 00:01:27.671
&gt;&gt; Brian Holt: Now, is this gonna work?

19
00:01:27.671 --> 00:01:29.069
Yes, it's going to work.

20
00:01:29.069 --> 00:01:33.425
Because yet, some other variable was
created outside the yet statement, right?

21
00:01:33.425 --> 00:01:35.322
This is the key that I
want you to look for.

22
00:01:35.322 --> 00:01:38.779
It matters where it was declared,
where it was created, right?

23
00:01:40.140 --> 00:01:44.536
So defect despite the fact that I'm
reading it like really assigning

24
00:01:44.536 --> 00:01:47.881
the value in here,
it matters where it was created.

25
00:01:47.881 --> 00:01:49.467
So I just want to like reiterate here.

26
00:01:49.467 --> 00:01:51.593
Scope is hard, right?

27
00:01:51.593 --> 00:01:55.788
Especially when you're learning these
things, it cannot it can be not intuitive

28
00:01:55.788 --> 00:01:58.849
what's gonna be in scope and
what's not gonna be in scope.

29
00:01:58.849 --> 00:02:02.744
But my advice to you is just pay attention
to where things are declared, right?

30
00:02:02.744 --> 00:02:06.795
Wherever you put your let or your console,
that's, what matters, right?

31
00:02:06.795 --> 00:02:08.685
It doesn't matter where
it's where we declared.

32
00:02:08.685 --> 00:02:11.040
It doesn't matter where it's red or
anything like that.

33
00:02:11.040 --> 00:02:16.136
It matters where it was created.

34
00:02:16.136 --> 00:02:19.518
And if you're coming from another
language, scope can work a little bit

35
00:02:19.518 --> 00:02:22.243
different in JavaScript than
it does in other languages.

36
00:02:22.243 --> 00:02:26.382
I don't wanna get too much into it,
because it's a really deep rabbit hole.

37
00:02:26.382 --> 00:02:29.843
[LAUGH] And I want to fill your
brains with other useful things and

38
00:02:29.843 --> 00:02:31.621
not that kind of stuff, right?

39
00:02:35.263 --> 00:02:40.805
&gt;&gt; Brian Holt: So just to hammer home and
be an asshole about it.

40
00:02:40.805 --> 00:02:45.206
Let's just go full bore on this and work
through this particular problem together

41
00:02:45.206 --> 00:02:48.713
and figure out what's gonna be in scope,
what's gonna break and

42
00:02:48.713 --> 00:02:50.515
what's not gonna break, okay?

43
00:02:50.515 --> 00:02:54.906
So I have a bunch of stuff in here and
let's go through and

44
00:02:54.906 --> 00:03:00.429
actually figure out what's in scope and
what's not in scope, okay?

45
00:03:00.429 --> 00:03:04.529
And we'll just work down through
the console logs as I see them here.

46
00:03:04.529 --> 00:03:08.513
So the first thing,
this is just declaring some variables.

47
00:03:08.513 --> 00:03:10.464
This is declaring the function.

48
00:03:10.464 --> 00:03:13.817
Remember do stuff won't actually happen
until do stuff is called, right?

49
00:03:13.817 --> 00:03:15.794
That's important.

50
00:03:15.794 --> 00:03:19.089
Got some variables down here,
for loop down here.

51
00:03:19.089 --> 00:03:23.558
So the first one that's
gonna be run down here in

52
00:03:23.558 --> 00:03:28.044
this while loop is console.log(A), okay?

53
00:03:28.044 --> 00:03:32.288
So let's figure out if
console.log(A) is gonna break.

54
00:03:32.288 --> 00:03:35.630
So let's go find out where A was declared,
right?

55
00:03:35.630 --> 00:03:36.971
That's the important thing here.

56
00:03:36.971 --> 00:03:41.441
So we're gonna scroll up here and
we see const A = "A" up here.

57
00:03:43.646 --> 00:03:45.625
&gt;&gt; Brian Holt: Well, that was created
outside the while loop, right?

58
00:03:45.625 --> 00:03:47.349
So it's gonna be in scope, right?

59
00:03:47.349 --> 00:03:48.909
So this is gonna work.

60
00:03:48.909 --> 00:03:51.140
This is gonna log out a three times,
right,

61
00:03:51.140 --> 00:03:53.685
cuz it's gonna go through
this loop three times.

62
00:03:56.141 --> 00:03:59.381
&gt;&gt; Brian Holt: Okay, so good so far?

63
00:03:59.381 --> 00:04:03.255
The next one we're gonna
hit here is console.log(E).

64
00:04:05.300 --> 00:04:08.227
Okay, well, where's E declared?

65
00:04:08.227 --> 00:04:08.915
Right there.

66
00:04:08.915 --> 00:04:12.264
It doesn't matter that it's modified here,
right, or that it's being read up here.

67
00:04:12.264 --> 00:04:16.604
It matters that it's created here.

68
00:04:16.604 --> 00:04:20.541
So console.log(E), that's gonna work.

69
00:04:20.541 --> 00:04:23.935
Console.log(G), where's G?

70
00:04:26.827 --> 00:04:30.050
&gt;&gt; Brian Holt: Right there.

71
00:04:30.050 --> 00:04:31.051
Is that gonna work?

72
00:04:31.051 --> 00:04:31.659
&gt;&gt; Speaker 2: No.

73
00:04:31.659 --> 00:04:35.435
&gt;&gt; Brian Holt: No,
because it's inside the wireloop, right?

74
00:04:35.435 --> 00:04:38.566
So once the while loop is finished,
it's gone.

75
00:04:38.566 --> 00:04:40.510
It's gone forever.

76
00:04:40.510 --> 00:04:44.462
&gt;&gt; Speaker 2: So wouldn't be true to say
that it would work as long as E is less

77
00:04:44.462 --> 00:04:45.076
than 3?

78
00:04:45.076 --> 00:04:49.888
So it will print out G three times and
then give you an air?

79
00:04:49.888 --> 00:04:53.850
&gt;&gt; Brian Holt: It won't
print out G at all.

80
00:04:53.850 --> 00:04:56.047
So because the console.log is down here,
right?

81
00:04:56.047 --> 00:04:59.722
So this is only gonna happen once,
right, down here.

82
00:04:59.722 --> 00:05:04.655
And when it goes to look for G, G is not
in scope, because it was thrown away

83
00:05:04.655 --> 00:05:09.049
once that wild loop is finished
&gt;&gt; Speaker 2: Great, so while he is less

84
00:05:09.049 --> 00:05:15.042
than 3 G exists, but nothing is
happening to it until after words.

85
00:05:15.042 --> 00:05:16.121
&gt;&gt; Brian Holt: Right, correct.

86
00:05:16.121 --> 00:05:17.708
&gt;&gt; Speaker 2: When it does
not Is the same one, okay?

87
00:05:17.708 --> 00:05:21.144
&gt;&gt; Brian Holt: Yep and actually,
if you wanna get really technical into it,

88
00:05:21.144 --> 00:05:23.999
G is going to be created and
destroyed three times.

89
00:05:23.999 --> 00:05:26.645
So once the loop is finished,
it throws everything out and

90
00:05:26.645 --> 00:05:29.079
then it re-initializes
everything on the new loop.

91
00:05:29.079 --> 00:05:31.707
So you get a fresh slate
on every iteration.

92
00:05:33.834 --> 00:05:37.568
&gt;&gt; Brian Holt: When I use the term
iteration, that means one loop, right?

93
00:05:37.568 --> 00:05:41.568
One course of the loop.

94
00:05:41.568 --> 00:05:42.959
Let's refer to it as an iteration.

95
00:05:45.538 --> 00:05:46.571
&gt;&gt; Brian Holt: Did I answer your question?

96
00:05:46.571 --> 00:05:47.120
&gt;&gt; Speaker 2: Yes.

97
00:05:47.120 --> 00:05:50.940
&gt;&gt; Brian Holt: Cool, so
then I called doSutff and I pass in B.

98
00:05:52.490 --> 00:05:55.520
So let's go up here and I have B,
which is the parameter here.

99
00:05:56.760 --> 00:05:59.441
So console.log(B),
that's gonna work, right,

100
00:05:59.441 --> 00:06:02.350
cuz that's just coming
here from the parameter.

101
00:06:02.350 --> 00:06:04.185
So that's gonna work.

102
00:06:04.185 --> 00:06:05.465
I declare C here.

103
00:06:05.465 --> 00:06:06.770
I declare H here.

104
00:06:08.100 --> 00:06:10.968
So I have an if statement here.

105
00:06:10.968 --> 00:06:11.856
Create D.

106
00:06:11.856 --> 00:06:16.072
I reassign H, console.log(D).

107
00:06:16.072 --> 00:06:16.863
Second work.

108
00:06:19.000 --> 00:06:22.144
&gt;&gt; Brian Holt: No, it's not gonna work,
because that was declared inside.

109
00:06:22.144 --> 00:06:25.805
It was created inside the if statement.

110
00:06:25.805 --> 00:06:28.689
So console.log(D) here, that's gonna fail.

111
00:06:28.689 --> 00:06:31.556
Console.log(H), is that gonna work?

112
00:06:31.556 --> 00:06:32.854
&gt;&gt; Speaker 2: No.

113
00:06:32.854 --> 00:06:33.555
&gt;&gt; Brian Holt: It is.

114
00:06:33.555 --> 00:06:35.478
It is gonna work,
because it was declared up here.

115
00:06:35.478 --> 00:06:40.609
The let H is up here above
the if statement, right?

116
00:06:40.609 --> 00:06:43.106
So it is in scope.

117
00:06:43.106 --> 00:06:48.032
&gt;&gt; Speaker 3: So
that just gives you letter H, right?

118
00:06:48.032 --> 00:06:50.148
&gt;&gt; Brian Holt: Actually,
it is gonna be something else.

119
00:06:50.148 --> 00:06:50.971
&gt;&gt; Speaker 3: Why?

120
00:06:50.971 --> 00:06:54.213
&gt;&gt; Brian Holt: Cuz it reassigned up here.

121
00:06:54.213 --> 00:06:57.215
So this is overriding this H right here.

122
00:06:57.215 --> 00:06:58.616
&gt;&gt; Speaker 3: Literally something else.

123
00:06:58.616 --> 00:06:59.760
&gt;&gt; Brian Holt: Literally something else.

124
00:07:01.209 --> 00:07:03.114
&gt;&gt; Brian Holt: Does that make sense?

125
00:07:03.114 --> 00:07:07.866
&gt;&gt; Speaker 3: So you called it
outside after you reassigned it, so-

126
00:07:07.866 --> 00:07:08.383
&gt;&gt; Brian Holt: Yes,

127
00:07:08.383 --> 00:07:10.870
I create it up here and here.

128
00:07:10.870 --> 00:07:14.585
Because I'm not saying let H again,
it's actually referring to this same H.

129
00:07:14.585 --> 00:07:16.870
And so it's reassigning this H up here.

130
00:07:18.250 --> 00:07:19.008
Makes sense?

131
00:07:19.008 --> 00:07:23.220
Cool, did you get that as well?

132
00:07:23.220 --> 00:07:24.435
Okay, cool.

133
00:07:24.435 --> 00:07:28.231
&gt;&gt; Speaker 2: So even though the if
statement is part of the doStuff function,

134
00:07:28.231 --> 00:07:30.481
so D is defined within the function and

135
00:07:30.481 --> 00:07:35.076
the place where you're calling
console.log(D) is also in the function?

136
00:07:35.076 --> 00:07:38.703
It's already thrown away,
because the if statement is over.

137
00:07:38.703 --> 00:07:40.936
&gt;&gt; Brian Holt: Yep, correct.

138
00:07:40.936 --> 00:07:45.199
&gt;&gt; Speaker 3: Currently brackets are sort
of like walls keeping stuff from

139
00:07:45.199 --> 00:07:46.709
coming inside of it.

140
00:07:46.709 --> 00:07:50.358
It keeps everything that's outside
of the curly brackets out.

141
00:07:50.358 --> 00:07:52.975
&gt;&gt; Brian Holt: It's basically keeping
everything inside of it, right?

142
00:07:52.975 --> 00:07:54.438
So things can get in from the outside.

143
00:07:54.438 --> 00:07:56.561
But inside of it,
it won't let anything out.

144
00:07:56.561 --> 00:07:57.937
That's a better way of thinking about it.

145
00:08:00.547 --> 00:08:05.240
&gt;&gt; Brian Holt: Okay and then F is
being reassigned right there, okay?

146
00:08:05.240 --> 00:08:07.724
So now, doStuff is over.

147
00:08:07.724 --> 00:08:11.573
We're gonna go down to
console.log(B) right here.

148
00:08:11.573 --> 00:08:13.973
Is this gonna work?

149
00:08:13.973 --> 00:08:16.796
Well, B is the parameter up here.

150
00:08:16.796 --> 00:08:18.810
So no, this is not gonna work.

151
00:08:19.930 --> 00:08:25.462
Cuz once the functioning is over,
then the perimeters are thrown out.

152
00:08:25.462 --> 00:08:27.968
So that's gonna fail.

153
00:08:27.968 --> 00:08:31.798
Console.log(C), let's
figure out where C is.

154
00:08:31.798 --> 00:08:35.550
That's inside the function body
of doStuff, it's not gonna work.

155
00:08:38.052 --> 00:08:41.356
&gt;&gt; Brian Holt: Okay, console.log(F).

156
00:08:41.356 --> 00:08:46.479
Well, F is reassigned right there and
it's declared up there.

157
00:08:46.479 --> 00:08:47.784
So yeah, that's gonna work.

158
00:08:51.111 --> 00:08:56.373
&gt;&gt; Brian Holt: Good,
let's just throw one more wrench

159
00:08:56.373 --> 00:09:01.030
into all of this, cuz that's fun.

160
00:09:01.030 --> 00:09:04.838
So down here, I have all the codes,
so you can actually go through and

161
00:09:04.838 --> 00:09:07.607
play with this and
make things work as you want to.

