WEBVTT

1
00:00:00.190 --> 00:00:03.543
&gt;&gt; Brian Holt: Well,
let's talk about arrays now.

2
00:00:03.543 --> 00:00:09.469
So an array, you'll often hear me
refer to them as lists as well.

3
00:00:09.469 --> 00:00:15.141
For the sake of JavaScript, those are
synonymous terms, link arrays and lists.

4
00:00:15.141 --> 00:00:19.810
So yeah, if I say that just realize
that's what I actually mean, but

5
00:00:19.810 --> 00:00:22.478
they are called arrays in JavaScript.

6
00:00:22.478 --> 00:00:24.740
In other languages,
there are multiple types of arrays.

7
00:00:24.740 --> 00:00:27.392
In JavaScript, there is just the array.

8
00:00:27.392 --> 00:00:28.352
There's nothing else.

9
00:00:30.776 --> 00:00:34.607
&gt;&gt; Brian Holt: So something that bears
mentioning about objects is they

10
00:00:34.607 --> 00:00:36.290
are unordered, right?

11
00:00:36.290 --> 00:00:41.042
So despite the fact up here that
I declared my object name first,

12
00:00:41.042 --> 00:00:42.899
then city, then state.

13
00:00:42.899 --> 00:00:45.261
I heard there is no order implied there,
right?

14
00:00:45.261 --> 00:00:47.079
So if I asked for the spec,

15
00:00:47.079 --> 00:00:51.231
in fact, notice it gives it back
to me in a different order.

16
00:00:51.231 --> 00:00:56.551
I declared name first, but
it gives me back city first.

17
00:00:56.551 --> 00:00:58.076
I think it's just alphabetizing it, right?

18
00:00:58.076 --> 00:00:59.631
Yeah, it alphabetized it here.

19
00:00:59.631 --> 00:01:05.017
So you have no guarantee
of order with objects.

20
00:01:05.017 --> 00:01:07.277
&gt;&gt; Speaker 2: Can you force an order?

21
00:01:07.277 --> 00:01:09.340
&gt;&gt; Brian Holt: No, you can't.

22
00:01:09.340 --> 00:01:11.218
That's part of the specs of objects.

23
00:01:11.218 --> 00:01:14.746
Cuz it's like if I put a bunch of
marbles into a bag and I reach out and

24
00:01:14.746 --> 00:01:16.258
pull marbles out of the bag,

25
00:01:16.258 --> 00:01:20.053
I have no guarantee of what order I'm
gonna get the marbles back out it.

26
00:01:20.053 --> 00:01:21.816
It's kind of the same concept.

27
00:01:21.816 --> 00:01:26.181
Your putting properties into a property
bag and then your pulling them out,

28
00:01:26.181 --> 00:01:28.099
but that's the point of arrays.

29
00:01:28.099 --> 00:01:30.249
Arrays are ordered, yeah.

30
00:01:30.249 --> 00:01:34.169
&gt;&gt; Speaker 2: Wait, so how do you
determine if it's an array or an object?

31
00:01:34.169 --> 00:01:37.847
Is it just between curly brackets and
square brackets?

32
00:01:37.847 --> 00:01:38.476
&gt;&gt; Brian Holt: Cool.

33
00:01:38.476 --> 00:01:40.566
&gt;&gt; Speaker 2: You crack the code.

34
00:01:40.566 --> 00:01:46.344
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Brian Holt: So

35
00:01:46.344 --> 00:01:49.855
objects are used for things that
don't necessarily have order, right?

36
00:01:49.855 --> 00:01:50.730
Like for example,

37
00:01:50.730 --> 00:01:53.963
the properties of a person don't
necessarily have an order, right?

38
00:01:53.963 --> 00:01:56.837
That doesn't mean like should
their address first come first or

39
00:01:56.837 --> 00:02:00.240
their name come first, but there's not
really an implied order there, nor

40
00:02:00.240 --> 00:02:01.640
is it necessarily important.

41
00:02:01.640 --> 00:02:05.198
However, if I'm talking about days of
the week, there is an order there that

42
00:02:05.198 --> 00:02:08.239
needs to be preserved, right,
and that's what I raise her for.

43
00:02:08.239 --> 00:02:10.177
So in this particular case,

44
00:02:10.177 --> 00:02:15.202
the order that I put them in there is
the order that they're going to stay.

45
00:02:15.202 --> 00:02:19.145
So if I console.log(daysOfTheWeek),

46
00:02:19.145 --> 00:02:24.078
notice they come back in
precisely in the same order.

47
00:02:24.078 --> 00:02:27.745
And if I asked for days of the week
zero arrays started zero, this is very,

48
00:02:27.745 --> 00:02:29.591
very important for you to remember.

49
00:02:29.591 --> 00:02:33.301
I will probably say like seven more
times a raise started at zero.

50
00:02:33.301 --> 00:02:38.417
So the first element of
an array is index zero, okay?

51
00:02:38.417 --> 00:02:42.842
So if I asked for
the first element of the re index zero,

52
00:02:42.842 --> 00:02:47.764
I get Monday, right,
which is the first thing that I put in.

53
00:02:47.764 --> 00:02:48.303
Yeah.

54
00:02:48.303 --> 00:02:50.665
&gt;&gt; Speaker 3: That's a constant
in JavaScript though,

55
00:02:50.665 --> 00:02:52.837
that it always starts at zero, right?

56
00:02:52.837 --> 00:02:56.309
&gt;&gt; Brian Holt: Yeah, everything starts.

57
00:02:56.309 --> 00:02:59.280
For example, those strings that
we were just working on, right,

58
00:02:59.280 --> 00:03:02.902
everything starts at zero and that's
pretty much every programming language.

59
00:03:02.902 --> 00:03:05.817
There's like some old language that
I can't remember which one it is.

60
00:03:05.817 --> 00:03:07.177
It starts at one and it was wrong.

61
00:03:07.177 --> 00:03:10.964
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Brian Holt: Everything starts at zero

62
00:03:10.964 --> 00:03:11.957
in programming.

63
00:03:11.957 --> 00:03:16.188
So this is the preferred way here where
you use the square brackets afterwards to

64
00:03:16.188 --> 00:03:19.232
access particular properties
in those arrays, right?

65
00:03:19.232 --> 00:03:21.804
So I put 0 in between the square brackets.

66
00:03:24.069 --> 00:03:26.295
&gt;&gt; Brian Holt: I'm not mistaken
it should work with a dot,

67
00:03:26.295 --> 00:03:32.730
as well
&gt;&gt; Brian Holt: So that's what arrays for

68
00:03:32.730 --> 00:03:39.989
things that you want to keep together that
have some sort of order implied with them.

69
00:03:39.989 --> 00:03:41.174
&gt;&gt; Brian Holt: Notice that
these are all strings.

70
00:03:41.174 --> 00:03:44.916
In JavaScript, they don't necessarily
have to be a homogeneous type.

71
00:03:44.916 --> 00:03:48.875
It doesn't necessarily have to be all
strings are all numbers are all objects or

72
00:03:48.875 --> 00:03:49.947
anything like that.

73
00:03:49.947 --> 00:03:54.262
However, I'm just going to admonish you
that it will help if they are all the same

74
00:03:54.262 --> 00:03:54.776
things.

75
00:03:54.776 --> 00:03:59.400
Because it's just eliminate
entire classes of bugs, right,

76
00:03:59.400 --> 00:04:04.283
if you keep it them to be the same
types like it would be all strings or

77
00:04:04.283 --> 00:04:06.574
all the same types of objects.

