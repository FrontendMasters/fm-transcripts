WEBVTT

1
00:00:00.100 --> 00:00:02.430
&gt;&gt; Brian Holt: Think the first thing to
say is congratulations, for many of you,

2
00:00:02.430 --> 00:00:05.650
you probably just wrote your
first bit of code, right?

3
00:00:05.650 --> 00:00:07.160
That is executing in a browser.

4
00:00:08.230 --> 00:00:11.280
So you can see here if you've seen
that 6,000 you are having code that is

5
00:00:11.280 --> 00:00:13.770
successfully being run in the browser.

6
00:00:13.770 --> 00:00:17.340
And everything we're gonna do is
just kind of variations thereof.

7
00:00:17.340 --> 00:00:21.186
I mean, variables are kind of the most
fundamental concepts of programming in

8
00:00:21.186 --> 00:00:21.718
general.

9
00:00:21.718 --> 00:00:25.111
So this is really great,
this is good progress.

10
00:00:27.398 --> 00:00:30.230
&gt;&gt; Brian Holt: So that's what
this is right here, this console.

11
00:00:30.230 --> 00:00:33.246
Whenever I say console.log here,

12
00:00:33.246 --> 00:00:38.073
wherever my experiments.js is,
whenever you do that,

13
00:00:38.073 --> 00:00:43.200
this gets output here into
this console in your browser.

14
00:00:43.200 --> 00:00:45.939
This is very useful for
debugging purposes.

15
00:00:45.939 --> 00:00:48.619
Cuz if you're going through and you're
writing something, and something's not

16
00:00:48.619 --> 00:00:50.891
going the way that you expect it,
you can put a console.log in there.

17
00:00:50.891 --> 00:00:54.870
It's like, what is actually contained
in this variable at this point, right?

18
00:00:54.870 --> 00:00:59.730
So if I come down here and say,
let's just make this let for a second.

19
00:00:59.730 --> 00:01:05.659
And say, yearlyRent = 1, right?

20
00:01:05.659 --> 00:01:08.534
What do you think is gonna
be output their on line 4?

21
00:01:08.534 --> 00:01:13.460
So if I go check my browser .what do you
think is gonna be put into the console?

22
00:01:15.200 --> 00:01:15.908
&gt;&gt; Speaker 2: 1?

23
00:01:15.908 --> 00:01:16.857
&gt;&gt; Speaker 3: 6,000.

24
00:01:16.857 --> 00:01:18.344
&gt;&gt; Brian Holt: Still gonna be 6,000.

25
00:01:18.344 --> 00:01:22.553
And saying that's gonna be 1
is a totally valid thought.

26
00:01:22.553 --> 00:01:26.641
I try not to trick people, that was
definitely a trick question, so sorry.

27
00:01:26.641 --> 00:01:28.698
&gt;&gt; Speaker 3: I deserved it.

28
00:01:28.698 --> 00:01:31.833
&gt;&gt; Brian Holt: Yeah, first of all,
I hate teachers that try and trick you and

29
00:01:31.833 --> 00:01:34.621
give you trick questions,
so I hate myself right now.

30
00:01:34.621 --> 00:01:35.467
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: So

31
00:01:35.467 --> 00:01:38.645
you have to remember this is
executed procedurally, right?

32
00:01:38.645 --> 00:01:42.728
So this goes from line 1,
line 2, line 3, line 4.

33
00:01:42.728 --> 00:01:48.358
And line 4 here, when line 4 executes,
yearlyRent was 6,000, right?

34
00:01:48.358 --> 00:01:53.498
And so now if I go down here and
say console.log(yearlyRent) again,

35
00:01:53.498 --> 00:01:57.363
it'll say 6,000, then it'll say 1, right?

36
00:01:59.970 --> 00:02:03.854
&gt;&gt; Brian Holt: As I said, this is very
useful for debugging purposes, right?

37
00:02:03.854 --> 00:02:08.955
And when I say debugging,
what I mean is fixing my broken shit.

38
00:02:08.955 --> 00:02:13.948
[LAUGH] That's what I actually mean here.

39
00:02:16.510 --> 00:02:17.844
&gt;&gt; Brian Holt: So to this day,

40
00:02:17.844 --> 00:02:22.270
I use console.log probably
dozens of times a day.

41
00:02:23.280 --> 00:02:25.615
There are other more
sophisticated debugging tactics.

42
00:02:25.615 --> 00:02:29.719
And I eschew all of them in order just
to debug things by putting them out into

43
00:02:29.719 --> 00:02:30.510
the console.

44
00:02:32.410 --> 00:02:34.183
Okay, any questions about that?

45
00:02:36.783 --> 00:02:38.737
&gt;&gt; Brian Holt: Another thing
that's kinda useful here.

46
00:02:38.737 --> 00:02:43.642
So let's say I was confused
about both monthlyRent and

47
00:02:43.642 --> 00:02:49.410
yearlyRent, I can put actually,
monthlyRent, yearlyRent.

48
00:02:51.370 --> 00:02:54.893
So notice this is a comma right there.

49
00:02:54.893 --> 00:02:57.182
And you can see here now
if I refresh the page.

50
00:02:57.182 --> 00:03:01.356
By the way, when I refresh the page,
I'm hitting Cmd+R,

51
00:03:01.356 --> 00:03:07.510
in Windows it's F5 or you can just click
this little rotationally thing there.

52
00:03:07.510 --> 00:03:08.890
&gt;&gt; Speaker 3: Ctrl+R works too.

53
00:03:08.890 --> 00:03:09.610
&gt;&gt; Brian Holt: Does it?

54
00:03:09.610 --> 00:03:10.150
&gt;&gt; Speaker 3: Yeah.

55
00:03:10.150 --> 00:03:13.278
&gt;&gt; Brian Holt: I did not know that,
that's cool.

56
00:03:13.278 --> 00:03:15.500
And it's forcing the code to reexecute,
right?

57
00:03:15.500 --> 00:03:17.844
If I don't refresh the page,
then the code does not reexecute.

58
00:03:19.560 --> 00:03:22.313
Now notice here that I have 500 and
600, so

59
00:03:22.313 --> 00:03:26.356
it's actually logging out both
monthlyRent and yearlyRent, right?

60
00:03:26.356 --> 00:03:29.830
So it's useful you can put
multiple things in there.

61
00:03:29.830 --> 00:03:34.258
I was just showing you here that if
you wanna see both monthlyRent and

62
00:03:34.258 --> 00:03:39.240
yearlyRent on the same line, you can
just separate them by commas, right?

63
00:03:39.240 --> 00:03:42.190
And then that way you can see
here that I'm doing 500 and 600.

64
00:03:42.190 --> 00:03:44.851
So monthlyRent is 500, right?

65
00:03:44.851 --> 00:03:46.748
And yearlyRent is 600, right?

66
00:03:49.422 --> 00:03:51.810
&gt;&gt; Brian Holt: So that's useful for
debugging as well.

