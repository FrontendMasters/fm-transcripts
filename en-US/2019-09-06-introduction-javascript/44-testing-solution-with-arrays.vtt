WEBVTT

1
00:00:00.080 --> 00:00:04.034
&gt;&gt; Brian Holt: Hopefully you had
an opportunity to give this a shot.

2
00:00:04.034 --> 00:00:08.340
These kinda ranged in difficulty from
pretty simple to really, really hard.

3
00:00:08.340 --> 00:00:12.155
And so yeah, I think it's good for
you to go through these and

4
00:00:12.155 --> 00:00:15.840
kinda see different ways of coding and
problems to solve.

5
00:00:17.270 --> 00:00:18.930
So let's go ahead and
do some of these together.

6
00:00:18.930 --> 00:00:23.720
The first one here should have been done
for you, the addTwoToEveryNumberInTheList.

7
00:00:25.751 --> 00:00:27.810
&gt;&gt; Brian Holt: Just so
you can kinda see how these tests work.

8
00:00:29.210 --> 00:00:32.540
So let's go through and
do findLargestNumber.

9
00:00:32.540 --> 00:00:36.030
So I showed you a bunch of different
ways to do loops yesterday, and

10
00:00:36.030 --> 00:00:37.130
you could've chosen your favorite.

11
00:00:37.130 --> 00:00:39.780
You could've use forEach,
you could've use a for loop.

12
00:00:39.780 --> 00:00:41.460
You could've used a while
loop if you'd wanted to.

13
00:00:41.460 --> 00:00:44.940
Any one of these would
have been acceptable.

14
00:00:46.470 --> 00:00:50.592
So I have here doing it in a for loop, so
let's just go ahead and do it that way.

15
00:00:52.614 --> 00:00:57.596
&gt;&gt; Brian Holt: So
we're gonna start by saying

16
00:00:57.596 --> 00:01:02.198
let largest = list[0].

17
00:01:02.198 --> 00:01:05.933
I guess this is this is making
the assumption that there's something in

18
00:01:05.933 --> 00:01:08.933
the list, but
I guess it could be undefined as well, so.

19
00:01:08.933 --> 00:01:11.729
And then what we'll do is we'll
move over the rest of the list.

20
00:01:11.729 --> 00:01:16.790
And we'll try and keep the largest
number that we see here in this largest.

21
00:01:16.790 --> 00:01:22.759
So here the next thing I'm gonna say,
for(let i = 0,

22
00:01:22.759 --> 00:01:27.080
i is less than list.length; i++).

23
00:01:27.080 --> 00:01:28.760
So why did I choose a for loop here?

24
00:01:30.630 --> 00:01:33.567
Well in general,
when you're operating on arrays,

25
00:01:33.567 --> 00:01:37.200
it's just a good indication that
you're probably gonna use a for loop.

26
00:01:37.200 --> 00:01:39.592
Because you wanna get this
little dynamic right here,

27
00:01:39.592 --> 00:01:41.170
where i is less than list.length.

28
00:01:41.170 --> 00:01:43.663
That just works really well for
looping over an entire array.

29
00:01:45.871 --> 00:01:50.760
&gt;&gt; Brian Holt: Okay, and
then all you're gonna ask here is

30
00:01:50.760 --> 00:01:55.651
if(list[i] is greater than largest),

31
00:01:55.651 --> 00:02:00.816
then you're gonna say largest = list[i].

32
00:02:02.013 --> 00:02:06.530
&gt;&gt; Brian Holt: Okay, so you can go
through the entire for loop here.

33
00:02:06.530 --> 00:02:09.260
And actually, since we already
started with list[0] here,

34
00:02:09.260 --> 00:02:10.935
we can actually start this 1, right?

35
00:02:10.935 --> 00:02:13.010
Because we don't have to check 0 again.

36
00:02:13.010 --> 00:02:17.414
So it's not that inefficient,
but you might as well, right?

37
00:02:21.290 --> 00:02:23.828
&gt;&gt; Brian Holt: Okay, or the other thing
you definitely could've done here

38
00:02:23.828 --> 00:02:26.180
is you could've just done this and
said, let largest.

39
00:02:26.180 --> 00:02:29.495
And then said let i = 0,
either one of those is fine.

40
00:02:31.616 --> 00:02:36.520
&gt;&gt; Brian Holt: Okay, and then down here
all you have to do is return largest.

41
00:02:36.520 --> 00:02:37.833
Question?
&gt;&gt; Speaker 2: So can you scroll up

42
00:02:37.833 --> 00:02:38.593
a little bit?

43
00:02:38.593 --> 00:02:39.220
&gt;&gt; Brian Holt: Mm-hm.
&gt;&gt; Speaker 2: So

44
00:02:39.220 --> 00:02:44.410
that wouldn't be an issue, since you're
asking if the first item in the list,

45
00:02:44.410 --> 00:02:47.610
or if any item in the list is greater than
largest the first time it goes through

46
00:02:47.610 --> 00:02:48.430
the for loop.

47
00:02:48.430 --> 00:02:52.360
Because you haven't said what largest is,
you can call greater than on something

48
00:02:52.360 --> 00:02:56.020
that like doesn't-
&gt;&gt; Brian Holt: This is-

49
00:02:56.020 --> 00:02:57.110
&gt;&gt; Speaker 2: Like it exists.

50
00:02:57.110 --> 00:03:00.719
&gt;&gt; Brian Holt: So
I guess this could be a problem, because

51
00:03:02.840 --> 00:03:05.820
when you coerce undefined,
it's gonna be coerced to 0.

52
00:03:05.820 --> 00:03:09.590
Right, so if you try to force undefined to
be a number, it's gonna be 0, I believe.

53
00:03:09.590 --> 00:03:15.024
And so what happens if this was
a list of negative numbers?

54
00:03:15.024 --> 00:03:17.880
0 is not in that list, so
yeah, it's gonna call list.

55
00:03:17.880 --> 00:03:20.440
Now, the test case I gave you
were all positive numbers,

56
00:03:20.440 --> 00:03:24.410
because I'm not really, as long as you
get the gist here, I'm fine, right?

57
00:03:24.410 --> 00:03:25.820
&gt;&gt; Speaker 2: When you say
you force it to be a number,

58
00:03:25.820 --> 00:03:29.040
is that what's happening with
the greater than sign if you're-

59
00:03:29.040 --> 00:03:30.880
&gt;&gt; Brian Holt: Yeah, so this is gonna say,

60
00:03:30.880 --> 00:03:32.540
this only works with numbers.

61
00:03:32.540 --> 00:03:35.182
And so it's like okay, well you didn't
give me a number, so I'm gonna try and

62
00:03:35.182 --> 00:03:36.075
force this to be a number.

63
00:03:36.075 --> 00:03:40.557
&gt;&gt; Speaker 2: Okay, so
before it was undefined, and now it's 0?

64
00:03:40.557 --> 00:03:41.485
&gt;&gt; Brian Holt: Yeah,
&gt;&gt; Speaker 2: The first time, okay.

65
00:03:41.485 --> 00:03:45.929
&gt;&gt; Brian Holt: So in reality, if you
wanted to make this truly bulletproof,

66
00:03:45.929 --> 00:03:49.890
we would go back to where I was here and
start this at 1.

67
00:03:49.890 --> 00:03:52.720
And then you'd have to have
a check here at the front.

68
00:03:52.720 --> 00:03:56.311
That if list.length === 0,

69
00:03:56.311 --> 00:04:00.420
return probably undefined, right?

70
00:04:00.420 --> 00:04:05.284
Because there's no largest
number in a list of 0, or

71
00:04:05.284 --> 00:04:10.180
whatever you wanna return,
something like that.

72
00:04:10.180 --> 00:04:13.470
So let's see if that actually
passes my tests down here.

73
00:04:13.470 --> 00:04:15.551
And you can see down here
I got more tests passing.

74
00:04:18.844 --> 00:04:23.770
&gt;&gt; Speaker 3: If I made largest just 0,
how does that affect it?

75
00:04:25.052 --> 00:04:28.910
&gt;&gt; Brian Holt: So you'll run into
the same problem that I had, which is,

76
00:04:28.910 --> 00:04:31.695
what happens if I give you
a list of negative numbers?

77
00:04:31.695 --> 00:04:33.360
0 is going to be the largest number there,

78
00:04:33.360 --> 00:04:35.316
which it's not technically in the list,
right?

79
00:04:35.316 --> 00:04:38.130
&gt;&gt; Speaker 3: Okay, got you.

80
00:04:38.130 --> 00:04:41.240
&gt;&gt; Brian Holt: So it depends on how
flexible this needs to be, right?

81
00:04:41.240 --> 00:04:45.430
If you were working on,
I don't know dates, right?

82
00:04:45.430 --> 00:04:48.040
What's the largest date in a list?

83
00:04:48.040 --> 00:04:49.990
There's no such thing as a zero date,
right?

84
00:04:49.990 --> 00:04:51.910
So you can make the assumption
that everything's going

85
00:04:51.910 --> 00:04:53.000
to be a positive integer.

86
00:04:53.000 --> 00:04:55.300
So it kinda depends on the problem
domain that you're working on.

87
00:04:55.300 --> 00:04:58.000
But if you want this to make this
the most flexible it can possibly be on,

88
00:04:58.000 --> 00:04:59.950
it would have to be something like this.

89
00:05:01.610 --> 00:05:02.994
Make sense?

90
00:05:02.994 --> 00:05:04.190
Cool, good questions.

91
00:05:04.190 --> 00:05:05.005
Do you have a question?

92
00:05:05.005 --> 00:05:10.515
&gt;&gt; Speaker 4: In the first one, we have to
create a new list to store the new list.

93
00:05:10.515 --> 00:05:15.010
Because we're coming up with new values,
cuz we're adding 2 to each value.

94
00:05:15.010 --> 00:05:19.766
In the second one, we're just moving
things around in the array, so

95
00:05:19.766 --> 00:05:22.140
we don't need a new list.

96
00:05:22.140 --> 00:05:24.110
&gt;&gt; Brian Holt: So this one here,
findLargestNumber?

97
00:05:24.110 --> 00:05:26.540
&gt;&gt; Speaker 4: Yeah, is it because
we're just moving them around?

98
00:05:26.540 --> 00:05:32.720
&gt;&gt; Brian Holt: So you're not expecting
to return a list here, right?

99
00:05:32.720 --> 00:05:35.581
Because largest number,
right, findLargestNumber,

100
00:05:35.581 --> 00:05:38.986
this belies the fact that we're
gonna return a number, not a list.

101
00:05:38.986 --> 00:05:39.528
&gt;&gt; Speaker 4: Okay.

102
00:05:39.528 --> 00:05:42.003
&gt;&gt; Brian Holt: So here,
what is largest gonna be?

103
00:05:42.003 --> 00:05:43.853
largest is just gonna be one number,
right?

104
00:05:43.853 --> 00:05:47.008
It's not gonna be a list of numbers, we're
not returning the list of largest numbers.

105
00:05:47.008 --> 00:05:51.407
We're returning just the largest number,
does that make sense?

106
00:05:51.407 --> 00:05:52.457
&gt;&gt; Speaker 4: Thank you.

107
00:05:52.457 --> 00:05:55.067
&gt;&gt; Brian Holt: Whereas up here,
addTwoToEveryNumberInTheList,

108
00:05:55.067 --> 00:05:59.011
this belies the fact that we're going to
be returning some sort of list, right?

109
00:05:59.011 --> 00:06:01.288
&gt;&gt; Speaker 3: Okay.

110
00:06:01.288 --> 00:06:03.061
&gt;&gt; Brian Holt: Makes sense?

111
00:06:03.061 --> 00:06:07.180
Okay, good question.

112
00:06:07.180 --> 00:06:09.050
So return dog object here.

113
00:06:10.170 --> 00:06:14.649
So we're gonna make an object that has
a speak method, that has a name property.

114
00:06:14.649 --> 00:06:18.658
[COUGH] That has a name property,
a color property, and an age property.

115
00:06:20.878 --> 00:06:23.240
&gt;&gt; Brian Holt: So
let's go through and knock those out.

116
00:06:23.240 --> 00:06:28.152
So the first one is,
we're gonna give it a speak method.

117
00:06:28.152 --> 00:06:31.761
And this is going to return "woof", right?

118
00:06:31.761 --> 00:06:35.938
Cuz that's what we asked for right there.

119
00:06:35.938 --> 00:06:42.842
Has a name property of Fido, name: "Fido".

120
00:06:42.842 --> 00:06:49.129
&gt;&gt; Brian Holt: color: "white" and
age of 6.

121
00:06:51.070 --> 00:06:52.253
And I think that should be enough.

122
00:06:55.324 --> 00:06:58.274
&gt;&gt; Brian Holt: You can see down there,
I passed a bunch more tests.

123
00:06:58.274 --> 00:07:01.720
Just kinda to show you how to construct
objects, you can return objects and

124
00:07:01.720 --> 00:07:03.230
pass them around.

125
00:07:03.230 --> 00:07:04.170
Any questions about that?

126
00:07:09.492 --> 00:07:10.407
&gt;&gt; Brian Holt: Great.

127
00:07:12.598 --> 00:07:14.470
&gt;&gt; Brian Holt: Okay, getListOfNames.

128
00:07:16.020 --> 00:07:18.662
So this list is gonna be an array
of objects that look like this.

129
00:07:18.662 --> 00:07:22.578
With name being some person,
jobTitle being something, and

130
00:07:22.578 --> 00:07:25.200
age being some number, right?

131
00:07:25.200 --> 00:07:29.416
Here we're gonna be expecting some sort of
array of names going back that are very

132
00:07:29.416 --> 00:07:33.019
likely not going to be Game of
Thrones characters, unfortunately.

133
00:07:36.996 --> 00:07:41.150
&gt;&gt; Brian Holt: So
there's a bunch of ways to do this.

134
00:07:41.150 --> 00:07:44.320
I showed you my favorite way,
which is gonna be map.

135
00:07:44.320 --> 00:07:46.650
I'll probably just show
you both ways to do it.

136
00:07:48.450 --> 00:07:55.368
So const names =,
I'll show you map first, list.map.

137
00:07:55.368 --> 00:07:58.990
This is gonna take in a person object,
right?

138
00:07:59.990 --> 00:08:03.850
And you can put an arrow function there or
however you choose to do it.

139
00:08:03.850 --> 00:08:10.627
Let's just do it the other way, so you can
be a little more clear, function (person).

140
00:08:10.627 --> 00:08:13.890
And then here we just have to return
whatever we wanna keep in the list, right?

141
00:08:13.890 --> 00:08:17.898
So here I wanna return person.name.

142
00:08:20.313 --> 00:08:24.099
&gt;&gt; Brian Holt: And
then here I want to return names.

143
00:08:29.209 --> 00:08:30.930
&gt;&gt; Brian Holt: That should be enough.

144
00:08:30.930 --> 00:08:33.147
Okay, so that that passes this way.

145
00:08:36.460 --> 00:08:38.090
&gt;&gt; Brian Holt: Do you wanna see
if I can make it even shorter?

146
00:08:38.090 --> 00:08:39.200
Let's make it even shorter.

147
00:08:39.200 --> 00:08:44.580
So this is probably how I would
actually write it, list.map.

148
00:08:44.580 --> 00:08:47.517
Then there's a thing here
called destructuring.

149
00:08:53.287 --> 00:08:56.320
&gt;&gt; Brian Holt: So
this actually does exactly the same thing,

150
00:08:56.320 --> 00:08:58.900
you don't have to know this right now.

151
00:08:58.900 --> 00:09:01.680
I'm just trying to show you that you
can get even more clever with these.

152
00:09:01.680 --> 00:09:02.280
But just so

153
00:09:02.280 --> 00:09:07.354
if you are curious as to how this works,
&gt;&gt; Brian Holt: This

154
00:09:07.354 --> 00:09:09.290
is saying that I'm getting an object.

155
00:09:09.290 --> 00:09:12.810
So this is replacing this
person thing right here, right?

156
00:09:12.810 --> 00:09:15.760
And I know inside of that object
there's something called name, and

157
00:09:15.760 --> 00:09:17.530
I want you to pull it out and
call it name.

158
00:09:17.530 --> 00:09:20.852
So now I have a variable called name
that's coming out of person, and

159
00:09:20.852 --> 00:09:22.984
it's just ignoring the rest of the object.

160
00:09:22.984 --> 00:09:24.980
Does that make sense so far?

161
00:09:24.980 --> 00:09:26.770
Right, so it's just pulling out this part,

162
00:09:26.770 --> 00:09:29.490
and it's leaving everything else behind,
okay?

163
00:09:31.300 --> 00:09:35.960
Then here, where this is doing exactly
what this function does right here,

164
00:09:35.960 --> 00:09:37.720
it's just the shorthand for it.

165
00:09:37.720 --> 00:09:42.673
Remember I told you yesterday that if you
don't put curly braces on something that

166
00:09:42.673 --> 00:09:44.622
it just has an implicit return?

167
00:09:44.622 --> 00:09:45.754
So that's what this is doing,

168
00:09:45.754 --> 00:09:47.850
it's returning that name
that we're pulling out here.

169
00:09:49.470 --> 00:09:54.149
So if I comment that out,
this should still work the same way.

170
00:09:57.006 --> 00:09:58.262
&gt;&gt; Brian Holt: Right, it does.

171
00:10:01.509 --> 00:10:03.980
&gt;&gt; Brian Holt: So
you don't have to know that today.

172
00:10:03.980 --> 00:10:06.120
I just wanted to show you that there
is some pretty cool tricks with

173
00:10:06.120 --> 00:10:07.020
JavaScript that you can do.

174
00:10:08.440 --> 00:10:11.540
Okay, now let's just go ahead and
run through it with a for loop as well.

175
00:10:11.540 --> 00:10:17.224
So here I would have const names = [],
right?

176
00:10:17.224 --> 00:10:20.892
And then I'm gonna have a for loop,

177
00:10:20.892 --> 00:10:26.899
let i = 0; i is less than,
what did I call up here, list?

178
00:10:26.899 --> 00:10:28.036
Yeah, list.length.

179
00:10:31.226 --> 00:10:36.243
&gt;&gt; Brian Holt: i++, and
then here you're gonna

180
00:10:36.243 --> 00:10:42.106
say names.push(list[i].name).

181
00:10:42.106 --> 00:10:45.073
This will also work.

182
00:10:45.073 --> 00:10:48.231
&gt;&gt; Brian Holt: So all three of these
things accomplish the same task,

183
00:10:48.231 --> 00:10:50.370
just in relatively different ways.

184
00:10:50.370 --> 00:10:54.910
And you could actually do this
with the forEach as well.

185
00:10:54.910 --> 00:10:57.874
So it would look relatively
similar to this,

186
00:10:57.874 --> 00:11:01.619
where you'd just be pushing
names into some other list.

187
00:11:01.619 --> 00:11:02.842
Yeah, yes?
&gt;&gt; Speaker 2: Sorry, so

188
00:11:02.842 --> 00:11:06.607
what does the second line,
where it's name.push,

189
00:11:06.607 --> 00:11:09.560
what are you putting onto the list?

190
00:11:09.560 --> 00:11:10.580
What are you adding?

191
00:11:10.580 --> 00:11:11.540
&gt;&gt; Brian Holt: That's a good question.

192
00:11:11.540 --> 00:11:15.760
So let's break this into multiple lines so
it's a little less dense.

193
00:11:15.760 --> 00:11:18.820
That's usually a good strategy for
deciphering what things mean.

194
00:11:18.820 --> 00:11:26.329
So const currentName = list[i],
let's even break it further down.

195
00:11:26.329 --> 00:11:27.918
So const person = list[i], so

196
00:11:27.918 --> 00:11:30.489
this is gonna pull the person
out of the list, right?

197
00:11:30.489 --> 00:11:36.028
The next one is gonna say
const name = person.name.

198
00:11:36.028 --> 00:11:41.504
And then you're gonna
say names.push(name).

199
00:11:45.796 --> 00:11:47.551
&gt;&gt; Brian Holt: So
these three lines are the same thing,

200
00:11:47.551 --> 00:11:49.980
this is just condensed all into one line.

201
00:11:49.980 --> 00:11:51.850
So you're pulling the person out here,
right?

202
00:11:51.850 --> 00:11:56.123
That's what this list[i] part does, is it
grabs the person that you need, right?

203
00:11:56.123 --> 00:11:59.022
Then we're grabbing the name,
that's the .name part here, and

204
00:11:59.022 --> 00:12:00.171
we're pulling that off.

205
00:12:00.171 --> 00:12:04.992
And then we're passing that into
names here, into the push function.

206
00:12:04.992 --> 00:12:05.779
Is that clear?

207
00:12:05.779 --> 00:12:06.884
&gt;&gt; Speaker 2: Yeah, that's cool.

208
00:12:13.499 --> 00:12:15.673
&gt;&gt; Brian Holt: So
either one of those is gonna work,

209
00:12:15.673 --> 00:12:19.015
let's just,
&gt;&gt; Brian Holt: Stick with the more clear

210
00:12:19.015 --> 00:12:19.826
one, that's good.

