WEBVTT

1
00:00:00.100 --> 00:00:02.740
&gt;&gt; Brian Holt: So the last one we kind
of talked about a little bit about but

2
00:00:02.740 --> 00:00:04.280
I just wanna go over it again.

3
00:00:04.280 --> 00:00:07.710
The last type,
these are called primitive types,

4
00:00:07.710 --> 00:00:09.220
which means that they're irreducible.

5
00:00:09.220 --> 00:00:11.830
You cannot split them into
further other things, right?.

6
00:00:11.830 --> 00:00:14.673
There's strings, there's booleans, and

7
00:00:14.673 --> 00:00:18.780
now we're gonna talk a lot
again about numbers right?.

8
00:00:18.780 --> 00:00:21.430
Number can't be split into something else,
it's just a number, right?.

9
00:00:23.340 --> 00:00:27.300
So if you ever heard the term primitive
type, that's what we're talking about.

10
00:00:27.300 --> 00:00:31.060
So the last primitive type that we're
going to talk about is a number.

11
00:00:31.060 --> 00:00:37.710
So constant num equals five
right constant num and

12
00:00:37.710 --> 00:00:41.670
like I was saying before.

13
00:00:41.670 --> 00:00:46.502
There's no difference between a float and
a float in another language,

14
00:00:46.502 --> 00:00:49.046
it would be like 5.001, right?

15
00:00:50.554 --> 00:00:53.689
&gt;&gt; Brian Holt: In other languages they
would split decimals out from integers,

16
00:00:53.689 --> 00:00:57.342
and that's not the case in JavaScript,
you can also have this be negative.

17
00:01:01.603 --> 00:01:05.198
&gt;&gt; Brian Holt: And all of that is
just shoved into one data type,

18
00:01:05.198 --> 00:01:09.940
one primitive type which is
called a number, unsurprisingly.

19
00:01:12.390 --> 00:01:18.562
Now doing math with JavaScript
is notoriously fickle,right?

20
00:01:18.562 --> 00:01:24.898
So if I try and do an integer addition,

21
00:01:24.898 --> 00:01:30.442
if I trans it to 5.00001.

22
00:01:30.442 --> 00:01:36.407
So if I trans it to num plus 1.123,
let's see,

23
00:01:36.407 --> 00:01:40.883
sometimes you get these really crazy,

24
00:01:40.883 --> 00:01:44.416
they're very close, right?

25
00:01:44.416 --> 00:01:46.699
It'll be 000001, right?

26
00:01:46.699 --> 00:01:49.610
And it's not quite the same,
but it's really close.

27
00:01:49.610 --> 00:01:53.220
It's the nature of how JavaScript
calculates its variables.

28
00:01:54.340 --> 00:01:59.000
So, in other words,
don't rely on integer addition in math or

29
00:01:59.000 --> 00:02:01.456
things to actually truly
be equal to each other.

30
00:02:01.456 --> 00:02:05.775
[LAUGH] In other words,
you have to build it in tolerances.

31
00:02:05.775 --> 00:02:09.430
So, the reason why I bring this up
is I used to work at Netflix, right?

32
00:02:09.430 --> 00:02:11.210
I used to work on billing at Netflix.

33
00:02:11.210 --> 00:02:15.735
So if you're trying to do math with
dollars and your math is not exact,

34
00:02:15.735 --> 00:02:19.971
kinda arises problem cuz you overcharge or
undercharge people.

35
00:02:19.971 --> 00:02:25.768
Even if it's just by 0.0001, still
technically a crime, so don't do that.

36
00:02:25.768 --> 00:02:29.210
[LAUGH] So
be careful with math in JavaScript.

37
00:02:29.210 --> 00:02:29.710
Yeah?

38
00:02:29.710 --> 00:02:32.082
&gt;&gt; Speaker 2: Does JavaScript
follow order of operations?

39
00:02:32.082 --> 00:02:32.958
&gt;&gt; Brian Holt: Mm-hm.

40
00:02:35.164 --> 00:02:37.978
&gt;&gt; Brian Holt: So
just like you would normally expect,

41
00:02:37.978 --> 00:02:41.037
like if I do num plus
one divided by two here,

42
00:02:41.037 --> 00:02:46.660
this is going to follow what you would
normally expect from your math class.

43
00:02:46.660 --> 00:02:48.240
I'm not gonna teach a math class today.

44
00:02:48.240 --> 00:02:51.050
[LAUGH] But
this is gonna be executed first, right?

45
00:02:51.050 --> 00:02:55.250
Because division has a higher priority
than num, or than addition, right?

46
00:02:58.302 --> 00:03:02.440
&gt;&gt; Brian Holt: So, yes,
it follows typical order of operations.

47
00:03:02.440 --> 00:03:06.730
&gt;&gt; Speaker 3: Can you get overflow and
underflow errors and issues in JavaScript?

48
00:03:06.730 --> 00:03:08.137
&gt;&gt; Brian Holt: Yeah,
the numbers are quite large.

49
00:03:11.129 --> 00:03:13.947
&gt;&gt; Brian Holt: So gotta remember,

50
00:03:13.947 --> 00:03:18.375
math dot,
&gt;&gt; Brian Holt: Or, no,

51
00:03:18.375 --> 00:03:22.104
it's Number.MAX_SAFE_INTEGER,

52
00:03:22.104 --> 00:03:26.059
that's the biggest number you can have.

53
00:03:26.059 --> 00:03:27.570
It's usually enough for most people.

54
00:03:29.000 --> 00:03:36.280
We'll talk about what that is later,
there's also admin's safe integer as well.

55
00:03:36.280 --> 00:03:39.880
Which is gonna be roughly the same
thing in the negative direction.

56
00:03:39.880 --> 00:03:45.880
So if I try to do plus one,
or rather minus one.

57
00:03:47.800 --> 00:03:49.500
I'm not guaranteed what
the results are gonna be.

58
00:03:49.500 --> 00:03:51.410
So in this case,
it actually does handle it correctly.

59
00:03:51.410 --> 00:03:57.255
But that's what that safe means that if
once you're beyond this point, good luck.

60
00:03:57.255 --> 00:03:59.370
[LAUGH] We wish you the best.

61
00:04:01.580 --> 00:04:04.590
Most of your math hopefully it falls
within that realm though, right?

62
00:04:04.590 --> 00:04:05.956
I don't know what that is.

63
00:04:05.956 --> 00:04:10.851
That would be
&gt;&gt; Brian Holt: Thousands,

64
00:04:10.851 --> 00:04:14.730
millions, billions, trillions,
quadrillions, something that.

65
00:04:17.120 --> 00:04:19.135
&gt;&gt; Speaker 3: It's in my Netflix bill.

66
00:04:19.135 --> 00:04:21.210
&gt;&gt; Brian Holt: [LAUGH] You are welcome.

67
00:04:21.210 --> 00:04:22.820
Just kidding.

68
00:04:22.820 --> 00:04:25.720
So that's it for primitive types, right?

69
00:04:25.720 --> 00:04:28.050
That's the most basic building blocks.

70
00:04:28.050 --> 00:04:31.530
There are some other
kind of fancier things,

71
00:04:31.530 --> 00:04:35.170
but you could always write JavaScript and
never run into him.

72
00:04:35.170 --> 00:04:40.090
So, for now this is gonna be what
you're gonna be using 99% of the time.

