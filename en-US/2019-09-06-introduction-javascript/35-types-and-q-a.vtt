WEBVTT

1
00:00:00.000 --> 00:00:02.574
&gt;&gt; Brian Holt: It's really hard
to teach type systems too.

2
00:00:02.574 --> 00:00:07.004
I teach TypeScript as
part of my react course.

3
00:00:07.004 --> 00:00:09.242
And that's definitely the hardest section,

4
00:00:09.242 --> 00:00:12.464
teaching even intermediate to
advanced JavaScript developers.

5
00:00:12.464 --> 00:00:15.738
When I was at LinkedIn, I had to
put on like multiple day workshops,

6
00:00:15.738 --> 00:00:17.698
teaching people how to use TypeScript.

7
00:00:17.698 --> 00:00:23.441
So it's not something that
I like teaching up front.

8
00:00:23.441 --> 00:00:28.086
[LAUGH] There are programming languages,
many programming languages that will

9
00:00:28.086 --> 00:00:31.076
enforce that these objects
look exactly the same.

10
00:00:31.076 --> 00:00:33.962
It must have a teacher,
it must have a course.

11
00:00:33.962 --> 00:00:37.986
And if it doesn't,
the program simply will not run, right.

12
00:00:37.986 --> 00:00:41.072
It forces this sort of homogeny.

13
00:00:41.072 --> 00:00:43.350
JavaScript doesn't care at all.

14
00:00:43.350 --> 00:00:45.730
It's like sure you wanna have
multiple different types and

15
00:00:45.730 --> 00:00:46.692
all that kind of stuff.

16
00:00:46.692 --> 00:00:52.995
I can put true here and
14 and something else and

17
00:00:52.995 --> 00:00:59.004
it just doesn't care, doesn't care at all.

18
00:01:01.069 --> 00:01:03.844
&gt;&gt; Brian Holt: And
this needs a after elements list,

19
00:01:03.844 --> 00:01:06.627
must have broke something, that.

20
00:01:08.171 --> 00:01:12.380
&gt;&gt; Brian Holt: As you can see here,
it just doesn't care.

21
00:01:12.380 --> 00:01:13.858
This is a bad idea, right?

22
00:01:13.858 --> 00:01:17.807
[LAUGH] Well,
now I'm gonna leave it like that.

23
00:01:17.807 --> 00:01:18.401
[LAUGH]
&gt;&gt; Speaker 2: So

24
00:01:18.401 --> 00:01:22.294
what if we wanted to add more
attributes to the objects?

25
00:01:22.294 --> 00:01:26.664
Could we just slap on true
at the end of each one

26
00:01:26.664 --> 00:01:29.165
and it'll show or-
&gt;&gt; Brian Holt: So if I wanted to

27
00:01:29.165 --> 00:01:31.979
add something to Kyle Simpson's course
here, is that what you're asking me?

28
00:01:31.979 --> 00:01:36.808
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Brian Holt: Okay, so you could totally

29
00:01:36.808 --> 00:01:45.323
do something like
courses[0].isAGoodCourse.

30
00:01:45.323 --> 00:01:47.113
I'm gonna put true there or
else Kyle will hurt me.

31
00:01:47.113 --> 00:01:51.626
[LAUGH] But now if you look down
here you'll have isAGoodCourse, and

32
00:01:51.626 --> 00:01:53.773
that's been tacked onto that.

33
00:01:53.773 --> 00:01:55.221
Does that address what
you're talking about?

34
00:01:55.221 --> 00:01:55.794
&gt;&gt; Speaker 2: Exactly.

35
00:01:55.794 --> 00:01:57.564
&gt;&gt; Brian Holt: Cool.

36
00:01:57.564 --> 00:02:00.513
&gt;&gt; Speaker 2: When you're
printing it out in console.log,

37
00:02:00.513 --> 00:02:02.954
why are the names turned into strings?

38
00:02:05.613 --> 00:02:06.929
&gt;&gt; Brian Holt: Because they are, so

39
00:02:06.929 --> 00:02:12.207
it's actually just convenience that this
isn't actually wrapped as a string here.

40
00:02:12.207 --> 00:02:15.598
&gt;&gt; Speaker 2: It's not treated
as a special key or something?

41
00:02:15.598 --> 00:02:19.525
&gt;&gt; Brian Holt: Nuh-uh,
it's actually a string.

42
00:02:19.525 --> 00:02:24.376
So something kind of fun you can do here,

43
00:02:24.376 --> 00:02:29.370
if I want, I can actually console.log(

44
00:02:29.370 --> 00:02:34.095
Object.keys(courses[0])).

45
00:02:34.095 --> 00:02:37.285
So this actually gives you back
an array of all the keys right.

46
00:02:37.285 --> 00:02:41.173
And again, there's no order,
cuz this is an object, right?

47
00:02:41.173 --> 00:02:46.010
You can see I get back teacher and
course as an array there as well.

48
00:02:46.010 --> 00:02:48.854
But you can see they actually are strings.

49
00:02:52.679 --> 00:02:54.349
&gt;&gt; Brian Holt: You can also
ask type of something.

50
00:02:54.349 --> 00:02:59.775
So I can ask type of some thing.

51
00:02:59.775 --> 00:03:02.917
So that tells me that it's a string.

52
00:03:02.917 --> 00:03:05.804
5, this will tell you that it's a number.

53
00:03:05.804 --> 00:03:07.578
But then things start
getting a little complicated.

54
00:03:07.578 --> 00:03:09.858
If I asked for an object,
it's going to give me an object.

55
00:03:09.858 --> 00:03:13.573
But if I get asked for an array,
it says, hey, that's also an object.

56
00:03:13.573 --> 00:03:19.034
If I asked for not a number,
that's a number.

57
00:03:19.034 --> 00:03:22.134
[LAUGH] So NaN like this,
if I try to do five divided by green,

58
00:03:22.134 --> 00:03:25.175
or something like that,
it's like that's not a number.

59
00:03:25.175 --> 00:03:29.879
[LAUGH] So sometimes you will
see that if he's trying to do

60
00:03:29.879 --> 00:03:34.895
mathematical operations on
things that are not mathable.

61
00:03:34.895 --> 00:03:38.885
That's a term I just made up.

62
00:03:38.885 --> 00:03:40.257
So be careful with type of.

63
00:03:40.257 --> 00:03:45.139
But occasionally, in my opinion, type of
is useful for telling apart numbers and

64
00:03:45.139 --> 00:03:45.787
strings.

65
00:03:45.787 --> 00:03:46.620
And that's about it.

