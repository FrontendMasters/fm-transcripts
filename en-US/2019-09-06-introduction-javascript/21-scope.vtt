WEBVTT

1
00:00:00.220 --> 00:00:02.110
&gt;&gt; Brian Holt: Let's talk about scope.

2
00:00:04.411 --> 00:00:07.417
&gt;&gt; Brian Holt: Let's talk about scope.

3
00:00:07.417 --> 00:00:11.053
[LAUGH] I find this one of
the more difficult concepts for

4
00:00:11.053 --> 00:00:14.010
new students to grasp, so what's for me?

5
00:00:14.010 --> 00:00:17.210
So if this feels hard,
that's because it's hard, okay?

6
00:00:17.210 --> 00:00:19.520
And if you kinda sitting there,
brindled and

7
00:00:19.520 --> 00:00:23.710
mushy at this point in time,
we're talking about hard things.

8
00:00:23.710 --> 00:00:26.340
So it's okay to feel a little overwhelmed.

9
00:00:26.340 --> 00:00:28.760
Sometimes you just have to look at
some things with fresh eyes, and

10
00:00:28.760 --> 00:00:30.270
come back later and look at it.

11
00:00:30.270 --> 00:00:32.580
And if you're feeling that right now,
I guarantee you,

12
00:00:32.580 --> 00:00:34.020
we're not the only person
feeling like that.

13
00:00:34.020 --> 00:00:37.270
So you are permits to feel this is hard.

14
00:00:39.340 --> 00:00:41.050
So I don't know,
that helped me when I was in school, and

15
00:00:41.050 --> 00:00:43.470
people's, it's okay Brian,
you don't have to worry about it.

16
00:00:43.470 --> 00:00:44.150
You're not an idiot.

17
00:00:44.150 --> 00:00:47.770
I am an idiot, but
that's beside the point.

18
00:00:49.340 --> 00:00:51.660
So let's talk about scope.

19
00:00:55.360 --> 00:00:58.740
Scope is basically,
it's helpful in some senses,

20
00:00:58.740 --> 00:01:03.660
because it will help you have less
bugs in your code, but in helping,

21
00:01:03.660 --> 00:01:07.120
you have less bugs in your code, it also
kind of helps create bugs in your code.

22
00:01:08.330 --> 00:01:11.530
On the whole, it's gonna say it's
a good thing, but it is hard to learn.

23
00:01:11.530 --> 00:01:15.290
I think that's kind of my
final statement on that.

24
00:01:15.290 --> 00:01:17.490
So, let's say I have this function called,

25
00:01:17.490 --> 00:01:21.510
add five,
very similar to what I had before.

26
00:01:22.564 --> 00:01:25.870
And addFive takes in a number and
returns that number plus five, right?

27
00:01:25.870 --> 00:01:28.040
Works exactly like it did before.

28
00:01:28.040 --> 00:01:32.770
So I call addFive with ten,
that'll return to me 15, right?

29
00:01:32.770 --> 00:01:35.050
I'm not doing anything with
that answer right now.

30
00:01:36.100 --> 00:01:39.610
But sometimes people wanna say, there's
some internal variable here called,

31
00:01:39.610 --> 00:01:43.720
someVariable, and outside of this
function, I wanna access that, right?

32
00:01:43.720 --> 00:01:46.530
Maybe it's really useful to me and
I wanna use it later, so I try and

33
00:01:46.530 --> 00:01:49.500
do console.log(someVariable).

34
00:01:49.500 --> 00:01:51.760
Which is inside this function addFive.

35
00:01:51.760 --> 00:01:56.820
This is reference error,
someVariables not defined.

36
00:01:56.820 --> 00:02:00.270
That's because this variable here,

37
00:02:00.270 --> 00:02:05.200
someVariable is only in scope for
the length of this function.

38
00:02:06.530 --> 00:02:09.550
So that means,
whenever I define this variable here,

39
00:02:09.550 --> 00:02:13.600
as soon as this function ends,
it throws out everything, right?

40
00:02:13.600 --> 00:02:17.670
It throws out everything that was only
in scope for that particular function.

41
00:02:17.670 --> 00:02:22.920
So in this particular case, some variable
here is created here at the top.

42
00:02:22.920 --> 00:02:25.920
And then when this function finishes,
it throws it out.

43
00:02:27.450 --> 00:02:30.610
There's numerous reasons for
this, but mostly it's because,

44
00:02:30.610 --> 00:02:32.784
you don't wanna keep everything
around always, right?

45
00:02:32.784 --> 00:02:36.030
You wanna be constantly getting rid
of things that you're not using.

46
00:02:36.030 --> 00:02:38.800
And then you wanna be adding
things that you are using, right?

47
00:02:38.800 --> 00:02:41.010
So it's kind of that constant cycle for
it.

48
00:02:42.160 --> 00:02:46.627
Now, if I have a function here,
const another variable.

49
00:02:51.436 --> 00:02:53.404
&gt;&gt; Brian Holt: Something else.

50
00:02:57.052 --> 00:03:00.410
&gt;&gt; Brian Holt: I can access
this inside a bad five.

51
00:03:00.410 --> 00:03:06.390
So if I said console.log,
another variable.

52
00:03:06.390 --> 00:03:12.940
Another variable, notice that something
else does get logged out here.

53
00:03:14.060 --> 00:03:15.630
Now why is that?

54
00:03:15.630 --> 00:03:18.470
That is because,
another variable is in scope, right?

55
00:03:19.520 --> 00:03:24.060
So whenever addFive is called,
which is down here.

56
00:03:24.060 --> 00:03:27.940
Another variable is in scope, because
this was created outside of it, right?

57
00:03:27.940 --> 00:03:30.280
So it can see that.

58
00:03:30.280 --> 00:03:32.540
Another variable only goes out of scope,

59
00:03:32.540 --> 00:03:35.440
when this entire bought
this entire block finishes.

60
00:03:36.590 --> 00:03:38.140
And this isn't just limited to functions.

61
00:03:38.140 --> 00:03:40.492
So typically,
this is where you gonna see the problem,

62
00:03:40.492 --> 00:03:41.903
this is also like if statements.

63
00:03:41.903 --> 00:03:47.739
So if I say, if true, right,
we just wanted to run,

64
00:03:47.739 --> 00:03:54.268
or you can say 2 plus 2 equals 4,
whatever you wanna do.

65
00:03:54.268 --> 00:03:59.581
If true, and I say cost, yet some other

66
00:03:59.581 --> 00:04:04.580
variable running out of names here.

67
00:04:04.580 --> 00:04:08.669
Only in scope for the statement.

68
00:04:10.568 --> 00:04:12.528
&gt;&gt; Brian Holt: And I say, consolelog.

69
00:04:12.528 --> 00:04:20.309
Here, yet some other
&gt;&gt; Brian Holt: So

70
00:04:20.309 --> 00:04:24.479
this is obviously the scope, right,
because I'm before the curly brace, and

71
00:04:24.479 --> 00:04:26.860
here is my kind of mostly true pro tip for
you.

72
00:04:28.110 --> 00:04:30.710
A block is between curly braces, right?

73
00:04:30.710 --> 00:04:33.700
So if I have this curly brace here, and
this curly brace here, anything that's

74
00:04:33.700 --> 00:04:37.510
declared inside of here, will die as
soon as this curly brace ends, right?

75
00:04:37.510 --> 00:04:38.180
Same thing here.

76
00:04:38.180 --> 00:04:43.080
So I have this curly brace here, and then
whatever's declared inside of here, and

77
00:04:43.080 --> 00:04:45.360
the key here is const, right?

78
00:04:45.360 --> 00:04:46.590
This is being created here.

79
00:04:46.590 --> 00:04:48.890
This is the first time
this comes into existence.

80
00:04:49.910 --> 00:04:53.920
As soon as this block finishes,
that means,

81
00:04:53.920 --> 00:04:57.140
that anything that was declared
inside of there is going to go away.

82
00:04:57.140 --> 00:04:58.240
It's going to go out of scope.

83
00:04:59.350 --> 00:05:03.420
So if I move this, this console
log outside of the if statement,

84
00:05:03.420 --> 00:05:04.760
what do you think's gonna happen?

85
00:05:07.810 --> 00:05:08.360
&gt;&gt; Speaker 2: It won't work.

86
00:05:09.720 --> 00:05:10.730
&gt;&gt; Brian Holt: Reference error, right?

87
00:05:10.730 --> 00:05:14.210
Some other variable is not defined
because, now it's out of scope.

88
00:05:17.928 --> 00:05:19.430
&gt;&gt; Brian Holt: How do we feel about that?

89
00:05:19.430 --> 00:05:20.100
Makes sense?

90
00:05:21.500 --> 00:05:23.660
This works for for loops as well.

91
00:05:23.660 --> 00:05:28.360
If I declare something inside of a for
loop, then I try to access it outside of

92
00:05:28.360 --> 00:05:29.850
the four loop,
then it's gonna give me a reference error.

93
00:05:29.850 --> 00:05:32.800
And when it says reference error,
it means something has gone out of scope.

94
00:05:32.800 --> 00:05:35.100
It's, I can't see what
you're asking me for.

