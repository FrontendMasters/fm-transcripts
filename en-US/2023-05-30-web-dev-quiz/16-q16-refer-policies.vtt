WEBVTT

1
00:00:00.098 --> 00:00:03.224
Question 16, which statements are true?

2
00:00:03.224 --> 00:00:07.528
A, noopener is used to prevent
the original page from accessing

3
00:00:07.528 --> 00:00:10.329
the window object of the newly open page.

4
00:00:10.329 --> 00:00:14.326
Noreferrer can be used to prevent
the newly opened page from accessing

5
00:00:14.326 --> 00:00:16.639
the window object of the original page.

6
00:00:16.639 --> 00:00:20.315
Noopener and
norefer can only be used with HTTPS.

7
00:00:20.315 --> 00:00:22.567
Noopener can be used to
prevent tabnabbing or

8
00:00:22.567 --> 00:00:25.838
the default Referrer-Policy
is no-refer-one-downgrade.

9
00:00:29.907 --> 00:00:31.372
Which statements are true?

10
00:00:31.372 --> 00:00:35.060
It's only B, norefer can be used
to prevent the newly opened page

11
00:00:35.060 --> 00:00:38.280
from accessing the window
object of the original page and

12
00:00:38.280 --> 00:00:41.048
D, noopener can be used
to prevent tabnabbing.

13
00:00:41.048 --> 00:00:45.251
So first kind of an example, let's say
we have a community resources page here.

14
00:00:45.251 --> 00:00:48.662
And this is just a lot of cards
with link to external resources.

15
00:00:48.662 --> 00:00:51.198
So external websites and
we're using target blank.

16
00:00:51.198 --> 00:00:56.882
So whenever user clicks on it,
it opens that new page in a new tab.

17
00:00:56.882 --> 00:01:00.527
Now usually,
this tab can access window.opener and

18
00:01:00.527 --> 00:01:05.387
this has access to the window object
of the page that opens that window.

19
00:01:05.387 --> 00:01:08.446
Now what can happen is that
if the developers aren't so

20
00:01:08.446 --> 00:01:12.052
nice they can change the developer
location to maybe evil site.

21
00:01:12.052 --> 00:01:14.463
I don't know what that
happened right there.

22
00:01:14.463 --> 00:01:18.495
But anyway, and then when a user would
click back they would be redirected to

23
00:01:18.495 --> 00:01:20.007
this site without knowing,

24
00:01:20.007 --> 00:01:24.241
cuz they think they're just going back
to the site where they navigate it from.

25
00:01:24.241 --> 00:01:26.252
And in some cases this is still evil site.

26
00:01:26.252 --> 00:01:27.923
This is not the website
where we came from.

27
00:01:27.923 --> 00:01:30.698
They're like, oops,
how your session has expired.

28
00:01:30.698 --> 00:01:33.214
If they know exactly where you came from,
so

29
00:01:33.214 --> 00:01:36.410
now you're giving your
credentials to this evil site,

30
00:01:36.410 --> 00:01:40.706
even though you think you're on the other
side or on the site you came from.

31
00:01:40.706 --> 00:01:44.332
This is called tapnabbing or
browser hijacking, yeah,

32
00:01:44.332 --> 00:01:48.348
cuz you're basically hijacking
a user's navigation state.

33
00:01:48.348 --> 00:01:53.329
So with target blank, we can use the no
opener to ensure that window.opener always

34
00:01:53.329 --> 00:01:57.906
just returns null, so that can't happen,
they can't change that value.

35
00:01:57.906 --> 00:02:02.789
Now currently in Chrome, and I'm not
sure how it isn't in other browsers,

36
00:02:02.789 --> 00:02:06.300
but when you use target blank
row noopener is implied,

37
00:02:06.300 --> 00:02:09.913
so you don't necessarily
always have to type it again.

38
00:02:09.913 --> 00:02:14.844
But if your users are on older browsers,
this is still very good to just add it,

39
00:02:14.844 --> 00:02:16.055
just to make sure.

40
00:02:16.055 --> 00:02:17.738
Then we have another one.

41
00:02:17.738 --> 00:02:22.292
I guess we're doing the same thing, but
now they can also, so in the URL bar of

42
00:02:22.292 --> 00:02:26.782
the website where we came from, we now
have kind of a sensitive query parameter.

43
00:02:26.782 --> 00:02:27.981
We have the userID.

44
00:02:27.981 --> 00:02:30.107
Now this could have been anything else,

45
00:02:30.107 --> 00:02:33.430
just any query parameter that
might be sensitive to that user.

46
00:02:33.430 --> 00:02:37.350
So on the page that just opened,
they can see the document that refers.

47
00:02:37.350 --> 00:02:42.274
So the page that referred them to that
new page, which you often maybe use

48
00:02:42.274 --> 00:02:47.294
when you use for analytics or tracking,
where did this opener come from?

49
00:02:47.294 --> 00:02:49.256
But now they also have access
to that query program.

50
00:02:49.256 --> 00:02:52.569
Maybe this is a sensitive user ID and they
can see that, and they can track that,

51
00:02:52.569 --> 00:02:54.460
they can do whatever
they wanna do with that.

52
00:02:54.460 --> 00:02:56.489
So for that, we can use a noreferrer.

53
00:02:56.489 --> 00:03:00.180
So this ensures that document referrer
always just returns an empty string, but

54
00:03:00.180 --> 00:03:03.449
also document the referrer,
make sure that noopener is also implied.

55
00:03:03.449 --> 00:03:06.950
So whenever you're using this,
you're basically also using noopener.

56
00:03:06.950 --> 00:03:08.595
So window.opener is also no.

57
00:03:08.595 --> 00:03:12.868
But it's always good to add
both noreferrer, noopener for

58
00:03:12.868 --> 00:03:17.750
browsers that may not support
noreferrer but do support noopener.

59
00:03:17.750 --> 00:03:23.636
All the all the good stuff browser, yep.

60
00:03:23.636 --> 00:03:27.905
So A is false, noopener is used to
prevent the original page from accessing

61
00:03:27.905 --> 00:03:30.024
the window of the newly opened page.

62
00:03:30.024 --> 00:03:31.340
It's reversed, right?

63
00:03:31.340 --> 00:03:34.784
So, noopener is used to
prevent the newly opened

64
00:03:34.784 --> 00:03:38.911
page from accessing the original
page's window object.

65
00:03:38.911 --> 00:03:43.246
And then B is true, which is a bit tricky,
cuz it can be used to prevent the newly

66
00:03:43.246 --> 00:03:46.995
opened page from accessing the window
object of the original page,

67
00:03:46.995 --> 00:03:50.612
even though that's not it's main
intention, it's more to make

68
00:03:50.612 --> 00:03:54.810
sure that the referrer header is
omitted when navigating to that page.

69
00:03:54.810 --> 00:03:59.963
But it also implies that, or it also adds
noopener, kind of implicitly, right?

70
00:03:59.963 --> 00:04:03.326
Noopener and noreferrer can only
be used with HTTPS is false,

71
00:04:03.326 --> 00:04:04.950
you can also use it with HTTP.

72
00:04:06.150 --> 00:04:09.018
While we saw how noopener could be
used to prevent tabnabbing, right?

73
00:04:09.018 --> 00:04:11.940
To change that location,
when you can't do that anymore.

74
00:04:11.940 --> 00:04:14.880
And the default Referrer-Policy
is no-referrer-when-downgrade.

75
00:04:14.880 --> 00:04:19.455
This used to be the case, and
so I believe 2020, 2019, but

76
00:04:19.455 --> 00:04:22.606
now it is the strict
origin when cross origin.

77
00:04:22.606 --> 00:04:27.304
So we can use this Referrer-Policy
to kind of be in some cases include

78
00:04:27.304 --> 00:04:29.738
the referrer in some cases don't.

79
00:04:29.738 --> 00:04:34.290
So for example, the
no-referrer-when-downgrade means if you go

80
00:04:34.290 --> 00:04:39.900
from HTTPS to HTTP, then don't include
the referrer, cuz it's insecure.

81
00:04:39.900 --> 00:04:43.505
But now it's strict
origin when cross-origin.

82
00:04:43.505 --> 00:04:47.530
So if it's cross-origin, you only
include the origin of the referrer.

83
00:04:47.530 --> 00:04:54.243
So if we go back to this one, it would,
for example, only include www.website.com,

84
00:04:54.243 --> 00:04:58.342
but not any path or
any parameters, stuff like that.

85
00:04:58.342 --> 00:05:03.517
You can overwrite this on an anchor tag as
well to say refer a policy should be maybe

86
00:05:03.517 --> 00:05:09.570
no-referre or, I don't know, you can just
adapt it to the way that you need it.

87
00:05:09.570 --> 00:05:13.596
To also ensure that maybe other pages
still have the right tracking, cuz

88
00:05:13.596 --> 00:05:18.295
referrers are still, it's not a bad thing
to know the referer of other navigation.

89
00:05:18.295 --> 00:05:19.920
They still have a lot of use cases.

90
00:05:21.729 --> 00:05:23.094
Yeah, that made sense?

91
00:05:23.094 --> 00:05:27.401
So yeah, just make sure, I mean,
even though when you're using blank,

92
00:05:27.401 --> 00:05:31.776
noopener is implied, still just make
sure that if you have a lot of users and

93
00:05:31.776 --> 00:05:35.060
older browsers,
this is still a very good thing to add.

