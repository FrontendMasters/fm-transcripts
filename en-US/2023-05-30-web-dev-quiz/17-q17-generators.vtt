WEBVTT

1
00:00:00.315 --> 00:00:05.609
Next question, when does In log:
My input get logged, this [LAUGH]

2
00:00:05.609 --> 00:00:11.389
is a weird way of phrasing it but
hopefully it makes sense, A, B, C or D?

3
00:00:15.687 --> 00:00:20.044
All right, so, the right answer is C,
first we call next and

4
00:00:20.044 --> 00:00:22.961
then we call next with a string my input.

5
00:00:22.961 --> 00:00:25.984
So first, is just take a look at
generator functions in general.

6
00:00:25.984 --> 00:00:28.482
So, this is not the same
code as we just saw, but

7
00:00:28.482 --> 00:00:32.610
in this case we have a generator function,
it yields 1, 2 and it returns 3.

8
00:00:32.610 --> 00:00:36.545
So when we invoke a generator function,
it doesn't execute the body, but

9
00:00:36.545 --> 00:00:38.674
instead it returns a generator object.

10
00:00:38.674 --> 00:00:41.885
So normally you just assign
the generator function a value.

11
00:00:41.885 --> 00:00:43.931
So here we have the genObject,

12
00:00:43.931 --> 00:00:49.299
which now points to that generator object
returned by that generator function.

13
00:00:49.299 --> 00:00:53.543
And with this object or
with generator functions, in general,

14
00:00:53.543 --> 00:00:57.011
we can control the execution
of that function body.

15
00:00:57.011 --> 00:01:01.827
And this generator object has methods
on it that we can use to invoke

16
00:01:01.827 --> 00:01:06.132
the generator function up until
it finds a yield or return.

17
00:01:06.132 --> 00:01:09.785
So in this case,
we can call genObject.next() and

18
00:01:09.785 --> 00:01:14.829
this will start the execution of
the function body until it finds a yield.

19
00:01:14.829 --> 00:01:19.632
And when it defines a yield, it will
return this special object with the value,

20
00:01:19.632 --> 00:01:23.504
which is the value that got yielded and
also with a don property,

21
00:01:23.504 --> 00:01:27.542
which states whether the generator
function has returned or not.

22
00:01:27.542 --> 00:01:28.786
In this case, it hasn't returned yet.

23
00:01:28.786 --> 00:01:31.079
It has yielded value.

24
00:01:31.079 --> 00:01:33.941
And we can keep doing this if we want to.

25
00:01:33.941 --> 00:01:36.427
We don't have to invoke it, but

26
00:01:36.427 --> 00:01:40.302
it will cash the state kind
of of where it left off.

27
00:01:40.302 --> 00:01:43.559
So now if we call next again it'll go
from that yield 1 back to the yield 2,

28
00:01:43.559 --> 00:01:46.538
cuz because that's the first time
it encounters that yield again.

29
00:01:46.538 --> 00:01:51.375
So only one we're return will default
values to be three like the return

30
00:01:51.375 --> 00:01:55.094
value Is the value of the value
property on the object.

31
00:01:55.094 --> 00:01:57.955
But then done is set to true
because we finally returned.

32
00:01:57.955 --> 00:02:00.971
However, and then yeah,
the generator object is closed, so

33
00:02:00.971 --> 00:02:02.542
we cannot keep on iterating it.

34
00:02:02.542 --> 00:02:03.424
Now it's closed.

35
00:02:03.424 --> 00:02:07.858
If we call next again, it'll just
return undefined for the value and

36
00:02:07.858 --> 00:02:09.010
still done true.

37
00:02:09.010 --> 00:02:11.186
So in this case,
this is the code that we just saw.

38
00:02:11.186 --> 00:02:14.949
We, again, have the generator objects,
so genObject.

39
00:02:14.949 --> 00:02:17.129
So first we have to call next or

40
00:02:17.129 --> 00:02:21.596
just start the execution of that
body until it finds a yield.

41
00:02:21.596 --> 00:02:25.812
And in this case it finds yield my input
so it returns that value my input and

42
00:02:25.812 --> 00:02:26.568
downfalls.

43
00:02:26.568 --> 00:02:30.801
We still haven't returned from the object
or from the generator function.

44
00:02:30.801 --> 00:02:36.388
But now because we are actually assigning
a value to yield we can pass a string or

45
00:02:36.388 --> 00:02:37.753
any value to next.

46
00:02:37.753 --> 00:02:41.389
And what this does is basically
it assigns that value result

47
00:02:41.389 --> 00:02:43.650
to the argument that we pass to next.

48
00:02:43.650 --> 00:02:47.225
So, for example, this could make
sense if maybe you want to yield,

49
00:02:47.225 --> 00:02:48.934
what's your favorite number?

50
00:02:48.934 --> 00:02:51.879
And then you could yield
that maybe in an alert or

51
00:02:51.879 --> 00:02:54.467
any prompt that your user can respond to.

52
00:02:54.467 --> 00:03:00.473
And then you can say the result is
the reply they gave to that yield,

53
00:03:00.473 --> 00:03:04.664
if that makes sense,
to the next invocation.

54
00:03:04.664 --> 00:03:08.917
So now it starts again, we still haven't
found a yield cuz we kinda go from cons

55
00:03:08.917 --> 00:03:13.121
result, which just assign that value,
my input, to the next line, right?

56
00:03:13.121 --> 00:03:16.733
So it just logs in log the result,
which is my input.

57
00:03:16.733 --> 00:03:19.628
And only now it doesn't
find a return all done.

58
00:03:19.628 --> 00:03:23.332
So now it returns that object again with
the value all done cuz that was what

59
00:03:23.332 --> 00:03:23.941
we return.

60
00:03:23.941 --> 00:03:29.221
But now done is set to true because we
returned from that generator function and

61
00:03:29.221 --> 00:03:31.864
the generator object is set to closed.

62
00:03:31.864 --> 00:03:36.100
I know this is pretty confusing, but
[LAUGH] we can also use generator

63
00:03:36.100 --> 00:03:40.709
functions or like generated objects to
use the spread operator or use a for

64
00:03:40.709 --> 00:03:45.787
off loop, anything that you can like
iterate through that generator function.

65
00:03:45.787 --> 00:03:47.543
That makes sense, yeah.

66
00:03:47.543 --> 00:03:53.963
&gt;&gt; So if you called.next
without the quote, my input.

67
00:03:53.963 --> 00:03:55.087
&gt;&gt; It'd be undefined.

68
00:03:55.087 --> 00:03:57.261
&gt;&gt; Result would be undefined.

69
00:03:57.261 --> 00:03:57.761
&gt;&gt; Yeah.

70
00:04:01.721 --> 00:04:06.285
Yeah, I wish I could show more
examples of generator functions cuz

71
00:04:06.285 --> 00:04:08.576
they're actually pretty cool.

72
00:04:08.576 --> 00:04:13.160
Calling them functions I feel it's
kind of weird cuz they're not

73
00:04:13.160 --> 00:04:16.254
really functions in that sense, but yeah.

74
00:04:16.254 --> 00:04:20.785
So generator object or isn't iterable or
it implements the iterator

75
00:04:20.785 --> 00:04:24.925
protocol which is the symbol
iterator protocol or something,

76
00:04:24.925 --> 00:04:30.331
which allows you to use a spread operator,
use for-off loops, stuff like that.

77
00:04:30.331 --> 00:04:31.411
And then it will just yield or

78
00:04:31.411 --> 00:04:33.765
return all the values that got
yielded until it got returned.

