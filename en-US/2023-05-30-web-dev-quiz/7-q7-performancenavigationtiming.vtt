WEBVTT

1
00:00:00.000 --> 00:00:04.036
Put the PerformanceNavigationTimings
in the right order.

2
00:00:04.036 --> 00:00:08.212
So we have loadEventStart, domComplete,
domContentLoadedEventStart,

3
00:00:08.212 --> 00:00:11.307
[LAUGH] fetchStart, connectEnd,
and domInteractive.

4
00:00:15.081 --> 00:00:17.599
All right, let's see the answers.

5
00:00:17.599 --> 00:00:21.598
So first, we have fetchStart,
then connectEnd, domInteractive,

6
00:00:21.598 --> 00:00:25.530
domContentLoadedEventStart, domComplete,
and at the very end,

7
00:00:25.530 --> 00:00:27.040
we have loadEventStart.

8
00:00:27.040 --> 00:00:30.625
So, we can use
the PerformanceNavigationTiming API to get

9
00:00:30.625 --> 00:00:35.225
detailed timing information about
various phases of the page navigation.

10
00:00:35.225 --> 00:00:37.910
For example, first,
we have the entire DNS lookup again.

11
00:00:37.910 --> 00:00:41.528
We can use a domain lookup start to get
the timing right before it starts a DNS

12
00:00:41.528 --> 00:00:45.329
lookup, and then domain lookup end to
get the timing right after it finished.

13
00:00:45.329 --> 00:00:48.052
So this we can check,
all right, is our DNS right?

14
00:00:48.052 --> 00:00:50.100
Do I maybe have to change
something in my DNS servers?

15
00:00:50.100 --> 00:00:51.505
Is that all good?

16
00:00:51.505 --> 00:00:52.852
Next, we have TCP, right,

17
00:00:52.852 --> 00:00:56.005
establishing that connection to
which we have the connectStart.

18
00:00:56.005 --> 00:01:00.208
And if it uses HTTPS, you can also
get the secure connectionStart to get

19
00:01:00.208 --> 00:01:01.900
that TLS connectionStart.

20
00:01:01.900 --> 00:01:05.025
And of course, the connectEnd,
when that's all ready.

21
00:01:05.025 --> 00:01:06.855
It's all connected to your server.

22
00:01:06.855 --> 00:01:08.513
Next, we actually have the HTTP request.

23
00:01:08.513 --> 00:01:12.326
So requestStart is when it
sends a request to the server.

24
00:01:12.326 --> 00:01:15.544
And at the very end,
we have the responseStart.

25
00:01:15.544 --> 00:01:19.045
So when the very first byte of
the response comes, and then responseEnd.

26
00:01:19.045 --> 00:01:22.953
So comparing responseStart and
responseEnd can kinda say, all right,

27
00:01:22.953 --> 00:01:25.204
is our response coming through, right?

28
00:01:25.204 --> 00:01:26.913
Do we need to optimize anything there?

29
00:01:30.241 --> 00:01:32.040
So next, we have domLoading,

30
00:01:32.040 --> 00:01:36.619
which is the time at which the browser
starts to actually process the the HTML.

31
00:01:36.619 --> 00:01:41.598
So it kind of returns to time when
the browser sets the document

32
00:01:41.598 --> 00:01:43.618
ready state to loading.

33
00:01:43.618 --> 00:01:47.019
Also, just FYI,
domLoading can happen before responseEnd,

34
00:01:47.019 --> 00:01:51.141
because browsers are able to kind of
parse the response stream as it gets in.

35
00:01:51.141 --> 00:01:54.712
So it's not entirely fair to kinda put it
in a timeline like this happens first,

36
00:01:54.712 --> 00:01:55.686
this happens after.

37
00:01:55.686 --> 00:01:59.178
In many cases, the domLoading
can happen before responseEnd,

38
00:01:59.178 --> 00:02:02.679
because it can kind of start
processing the stream as it gets in.

39
00:02:02.679 --> 00:02:07.246
But next, we have domInteractive,
which represents a time at which

40
00:02:07.246 --> 00:02:12.130
the DOM structure is complete and
the HTML documents has been parsed, but

41
00:02:12.130 --> 00:02:16.643
there might still be some resources
that haven't been loaded yet.

42
00:02:16.643 --> 00:02:21.922
This is just the time that it took to
construct the DOM between domLoading and

43
00:02:21.922 --> 00:02:23.249
domInteractive.

44
00:02:23.249 --> 00:02:25.758
So then we have
the domContentLoadedEventStart,

45
00:02:25.758 --> 00:02:29.623
which is the time right before the browser
fires the domContentLoadedEvent.

46
00:02:29.623 --> 00:02:34.333
And in many cases, you may have some
event listeners listening to that, and

47
00:02:34.333 --> 00:02:38.014
this is also when, for example,
the different scripts and

48
00:02:38.014 --> 00:02:41.125
everything load async scripts,
all that stuff.

49
00:02:41.125 --> 00:02:43.456
And then we, of course,
at domContentLoadedEventEnd.

50
00:02:43.456 --> 00:02:48.370
So comparing domContentLoadedEventStart,
it's such a long word, with the End,

51
00:02:48.370 --> 00:02:51.204
you can kind of see how long
it takes to process and

52
00:02:51.204 --> 00:02:54.547
execute all the event handlers
listening to that event.

53
00:02:54.547 --> 00:02:56.678
And then finally, we have the domComplete,

54
00:02:56.678 --> 00:03:00.227
which returns a time right after
the browser sets the ready state to ready.

55
00:03:00.227 --> 00:03:03.195
So in this case,
the DOM is completely loaded.

56
00:03:03.195 --> 00:03:07.233
The resources are now also fully loaded,
all the deferred scripts,

57
00:03:07.233 --> 00:03:10.859
all of that is ready, any images,
nothing is still loading.

58
00:03:10.859 --> 00:03:13.193
And then finally,
we have the loadEventStart.

59
00:03:13.193 --> 00:03:15.434
I can't really visualize that, but

60
00:03:15.434 --> 00:03:19.053
that is like event listeners
listening to the load events.

61
00:03:19.053 --> 00:03:21.436
And then, we have the loadEventEnd,

62
00:03:21.436 --> 00:03:26.283
which specifies the time when all these
listeners have finished executing.

63
00:03:26.283 --> 00:03:30.483
Sometimes, some, I don't know, if you've
worked with frameworks or any other tool,

64
00:03:30.483 --> 00:03:33.510
you may have seen like the at
event listener load ,then do this.

65
00:03:33.510 --> 00:03:37.683
Just to make sure that if we wanna do
something, the entire DOM is constructed,

66
00:03:37.683 --> 00:03:41.548
all the resources are already there,
people can see stuff on the screen,

67
00:03:41.548 --> 00:03:42.129
and so on.

68
00:03:42.129 --> 00:03:46.394
So this is the PerformanceNavigationTiming
API, and this is provided by you.

69
00:03:46.394 --> 00:03:51.285
You can use it if you just wanna kind
of see how well your website is doing.

70
00:03:51.285 --> 00:03:52.945
Yeah, you can see all those timings.

71
00:03:52.945 --> 00:03:55.403
There's a new one now, there's V2.

72
00:03:55.403 --> 00:03:58.444
For a long time, they used V1, so
just make sure that you're not using

73
00:03:58.444 --> 00:04:01.037
an outdated one,
cuz they have slightly different values.

74
00:04:01.037 --> 00:04:04.135
I also kinda skipped the entire
caching here, cuz of course,

75
00:04:04.135 --> 00:04:05.393
every source is cached.

76
00:04:05.393 --> 00:04:10.390
It doesn't have to have the entire
HTTP request, all that stuff,

77
00:04:10.390 --> 00:04:15.220
but this is kind of the most basic
timeline of that timing event.

