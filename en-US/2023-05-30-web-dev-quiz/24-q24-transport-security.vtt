WEBVTT

1
00:00:00.175 --> 00:00:02.090
Let's talk about the following header,

2
00:00:02.090 --> 00:00:05.876
we have to Strict-Transport-Security
with max-age and includeSubdomains.

3
00:00:05.876 --> 00:00:10.449
The header enforces HTTPS for
one year on the domain and its subdomains.

4
00:00:10.449 --> 00:00:14.327
When max-age expires,
browsers will default to HTTP.

5
00:00:14.327 --> 00:00:18.995
The max-age is refreshed every time
the browser routes the header or

6
00:00:18.995 --> 00:00:22.223
insecure requests to
subdomains are allowed.

7
00:00:25.748 --> 00:00:28.909
So the right answer is A,
the header enforces HTTPS for

8
00:00:28.909 --> 00:00:31.177
one year on the domain and subdomains,

9
00:00:31.177 --> 00:00:35.318
and the max-age is refreshed every
time the browser reads the header.

10
00:00:35.318 --> 00:00:39.856
So what we're working with
here is something called HSTS.

11
00:00:39.856 --> 00:00:44.934
So essentially like if we're making an
insecure request or like a request to HTTP

12
00:00:44.934 --> 00:00:50.399
website.com, the server will respond with,
I mean, based on how the server setup.

13
00:00:50.399 --> 00:00:54.398
THe 301 moved permanently because
it's like no there's no HTTP,

14
00:00:54.398 --> 00:00:55.965
you should be using HTTPS.

15
00:00:55.965 --> 00:00:58.870
And after requesting it with HTTPS for
the first time,

16
00:00:58.870 --> 00:01:02.417
the server can respond with
that Strict-Transport-Security.

17
00:01:02.417 --> 00:01:07.985
And this essentially enables a security
feature in your browser that will

18
00:01:07.985 --> 00:01:13.926
prevent your users from making an insecure
request ever again to your server.

19
00:01:13.926 --> 00:01:18.408
So this animation wasn't super clear, but
essentially the 307 internal redirect is

20
00:01:18.408 --> 00:01:22.606
not a redirect coming from the server,
it's a redirect coming from your browser.

21
00:01:22.606 --> 00:01:27.936
So your browser is telling you, hey, I got
a Strict-Transport -Security header for

22
00:01:27.936 --> 00:01:31.154
this domain a while back
still within the max-age.

23
00:01:31.154 --> 00:01:34.990
So you shouldn't be using HTTP,
you should be using HTTPS.

24
00:01:34.990 --> 00:01:41.190
So in this case, your browser redirects
you automatically to HTTPS from HTTP.

25
00:01:41.190 --> 00:01:46.264
And this can prevent stuff like we
just saw with the men in the middle

26
00:01:46.264 --> 00:01:50.977
attack if you're transferring
sensitive data to a browser or

27
00:01:50.977 --> 00:01:56.342
to a client, you wanna protect them
from using HTTP instead of HTTPS.

28
00:01:56.342 --> 00:01:59.364
So the first one is true,
cuz this header enforces HTTPS s for

29
00:01:59.364 --> 00:02:03.111
one year on the domain and its subdomains,
cuz we say include subdomains.

30
00:02:03.111 --> 00:02:06.367
Pretty straightforward it also
includes the subdomains there.

31
00:02:06.367 --> 00:02:11.434
When max-age expires browsers will default
to HTTP, this isn't necessarily true.

32
00:02:11.434 --> 00:02:14.949
I mean, what does happen is
if it has expired and ,okay,

33
00:02:14.949 --> 00:02:18.829
this makes a bit more sense if
we explain see first, actually,

34
00:02:18.829 --> 00:02:23.978
cuz the max-age is refreshed every time
the browser reads the header is also true.

35
00:02:23.978 --> 00:02:27.245
So if you're on a page and you're using
it every day, this max-age of one year,

36
00:02:27.245 --> 00:02:28.795
it will just get refreshed every day.

37
00:02:28.795 --> 00:02:33.926
So you're basically infinitely
making sure that the user will use

38
00:02:33.926 --> 00:02:39.437
HTTPS because it refreshes it every
time the browser reads the header.

39
00:02:39.437 --> 00:02:42.710
So when message expires
browsers will default to HTTP.

40
00:02:42.710 --> 00:02:46.655
This is true but that's essentially
the same scenario that we saw on the first

41
00:02:46.655 --> 00:02:50.720
one, where the server then just has to
respond again with that 301 attempt or

42
00:02:50.720 --> 00:02:53.753
permanent redirect, and
then it'll use HTTPS again, and

43
00:02:53.753 --> 00:02:57.170
then the Strict-Transport-Security
header will be sent back.

44
00:02:57.170 --> 00:02:59.192
Insecure requests to
subdomains are allowed.

45
00:02:59.192 --> 00:03:02.306
That's not true cuz we added
the include subdomains there.

46
00:03:02.306 --> 00:03:05.753
So yeah, just a good header to know
if you ever see HSTS or that term,

47
00:03:05.753 --> 00:03:07.461
just know that it refers to this.

48
00:03:07.461 --> 00:03:12.409
It is the enforcement of HTTPS
by your browser by the use of

49
00:03:12.409 --> 00:03:15.616
a response header from your server.

50
00:03:18.052 --> 00:03:20.421
Yeah another niche security thing that,
yeah,

51
00:03:20.421 --> 00:03:22.396
it's just good to know about, I guess.

