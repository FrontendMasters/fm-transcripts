WEBVTT

1
00:00:00.000 --> 00:00:03.130
Question 22, almost done, eight left.

2
00:00:03.130 --> 00:00:06.438
What statements are true about
the following cookie header?

3
00:00:06.438 --> 00:00:10.137
This cookie is accessible
from www.website.com, but

4
00:00:10.137 --> 00:00:12.222
not from blog.website.com.

5
00:00:12.222 --> 00:00:15.837
This cookie can only be set
client-side on the website.com domain.

6
00:00:15.837 --> 00:00:18.047
This cookie gets treated
like a session cookie.

7
00:00:18.047 --> 00:00:22.274
Or this cookie will be sent when
navigating from another website to

8
00:00:22.274 --> 00:00:23.710
www.website.com.

9
00:00:28.087 --> 00:00:32.951
So the right answer is C, this cookie
gets treated a session cookie, and D,

10
00:00:32.951 --> 00:00:38.502
this cookie will be sent when navigating
from another website to www.website.com.

11
00:00:38.502 --> 00:00:40.370
So let's see why.

12
00:00:40.370 --> 00:00:44.611
So first we, I mean, we've set my
cookie value I won't explain that part,

13
00:00:44.611 --> 00:00:46.418
but then we also set the domain.

14
00:00:46.418 --> 00:00:50.534
And this kind of means that the cookie
will be accessible on website.com but

15
00:00:50.534 --> 00:00:52.222
also its subdomains, right?

16
00:00:52.222 --> 00:00:53.804
It's just that domain.

17
00:00:53.804 --> 00:00:56.923
If the domain attribute was not specified,

18
00:00:56.923 --> 00:01:02.417
this cookie would only be available on
the exact domain that that cookie set.

19
00:01:02.417 --> 00:01:06.987
So where that request came from, the
cookie is then set on just that domain.

20
00:01:06.987 --> 00:01:12.287
But in this case we do specify it, so
it's also available on the subdomains.

21
00:01:12.287 --> 00:01:15.702
Next we set secure,
which really just means that

22
00:01:15.702 --> 00:01:19.710
this cookie should only ever
be transmitted over HTTPS.

23
00:01:19.710 --> 00:01:24.252
So this helps prevent the cookie from
being intercepted by an attacker,

24
00:01:24.252 --> 00:01:26.492
men in the middle, all that stuff.

25
00:01:26.492 --> 00:01:27.727
And next we have HTTP only,

26
00:01:27.727 --> 00:01:30.417
which means that we cannot
access this cookie client site.

27
00:01:30.417 --> 00:01:32.361
So we cannot use document.cookie.

28
00:01:32.361 --> 00:01:35.183
It will only be included in HTTP requests.

29
00:01:35.183 --> 00:01:38.899
So the server can have it, but
we cannot access it on the client.

30
00:01:38.899 --> 00:01:44.411
So then there are other things, cuz if we
sometimes do not specify certain things,

31
00:01:44.411 --> 00:01:47.810
like same sites,
then it will default back to lax.

32
00:01:47.810 --> 00:01:50.233
I never know if you'd pronounce it lax or

33
00:01:50.233 --> 00:01:55.010
L-A-X, I'll just say lax, which
essentially means that this cookie will be

34
00:01:55.010 --> 00:01:57.808
sent from top level
navigations to that site.

35
00:01:57.808 --> 00:02:01.944
So if we were on other website.com and
we type website.com, in that request,

36
00:02:01.944 --> 00:02:03.499
the cookie will still be set.

37
00:02:03.499 --> 00:02:07.408
And this is just nice, cuz if you wanna
see if a user is already authenticated,

38
00:02:07.408 --> 00:02:11.260
the user wouldn't have to reload that
page to then get that authentication,

39
00:02:11.260 --> 00:02:13.469
because then it will be
set on the same site.

40
00:02:13.469 --> 00:02:17.639
But that only applies to
those top level navigations.

41
00:02:17.639 --> 00:02:22.530
And as long as it's a get request and
the connection is secure,

42
00:02:22.530 --> 00:02:24.662
so if you're using HTTPS.

43
00:02:24.662 --> 00:02:26.525
You also have same site, None,

44
00:02:26.525 --> 00:02:29.975
which basically says that you,
any website can have it, or

45
00:02:29.975 --> 00:02:34.192
same Site Strict which only allows
the cookie to be read by the same site.

46
00:02:34.192 --> 00:02:37.163
So only if the request is
the same origin request,

47
00:02:37.163 --> 00:02:39.658
then it'll be included in that request.

48
00:02:39.658 --> 00:02:44.429
But in this case, lax is kind of the most
intuitive one when you haven't navigate

49
00:02:44.429 --> 00:02:48.722
to the site from another site,
tab level navigation then it is included.

50
00:02:48.722 --> 00:02:50.980
Next, we have yes A is false,

51
00:02:50.980 --> 00:02:55.679
a cookie is accessible from
www.website.com and not from blog.

52
00:02:55.679 --> 00:02:57.311
This is false because we set the domain,

53
00:02:57.311 --> 00:02:59.329
which also means it's
available on subdomains.

54
00:02:59.329 --> 00:03:04.768
[LAUGH] The cookie can only be set
client-side on the website.com domain.

55
00:03:04.768 --> 00:03:08.445
It cannot be set client-side at all,
because we have the HTTP only.

56
00:03:08.445 --> 00:03:09.663
So this is false.

57
00:03:09.663 --> 00:03:12.711
This cookie gets treated
a session cookie is also true.

58
00:03:12.711 --> 00:03:16.606
And this is one of those other default
behaviors, is when we don't set an expire

59
00:03:16.606 --> 00:03:19.353
or a max age,
it will just get treated a session cookie.

60
00:03:19.353 --> 00:03:23.204
So as long as the user has
opened a browser and stuff that,

61
00:03:23.204 --> 00:03:24.816
will this cookie live.

62
00:03:24.816 --> 00:03:28.509
And this cookie will be sent when
navigating from another website to

63
00:03:28.509 --> 00:03:32.264
website.com, that's true as we just
saw it with the same site lax,

64
00:03:32.264 --> 00:03:36.059
which is the default if you don't
specify any same site attributes.

