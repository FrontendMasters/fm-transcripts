WEBVTT

1
00:00:00.060 --> 00:00:02.880
Should we just get right into it,
see how it goes?

2
00:00:02.880 --> 00:00:07.459
Right, let's get started with
the very first question.

3
00:00:07.459 --> 00:00:12.130
Put the scripts in the right
order of execution.

4
00:00:12.130 --> 00:00:18.010
So for A, we have an async script
that loads in 300 milliseconds.

5
00:00:18.010 --> 00:00:22.214
Then for B, we have a defer script
that loads in 200 milliseconds.

6
00:00:22.214 --> 00:00:26.570
And C is another defer script
that loads in 300 milliseconds.

7
00:00:26.570 --> 00:00:30.050
And for D, we have an async script
that loads in 50 milliseconds.

8
00:00:30.050 --> 00:00:36.946
And E is a script that contains both async
and defer and loads in 60 milliseconds.

9
00:00:41.021 --> 00:00:42.560
All right, ready?

10
00:00:42.560 --> 00:00:44.250
Let's go to the answer.

11
00:00:45.390 --> 00:00:49.420
So the right order is D, async first,
that loads in 50 milliseconds.

12
00:00:49.420 --> 00:00:53.250
Then E, the async defer,
which loads in 60 milliseconds.

13
00:00:53.250 --> 00:00:57.580
A, async that loads in 300 milliseconds,
defer in 200 milliseconds, and

14
00:00:57.580 --> 00:01:00.570
the other defer in 300 milliseconds.

15
00:01:00.570 --> 00:01:02.820
So let's see why that happened.

16
00:01:02.820 --> 00:01:07.850
First, let's just take a look at a regular
script that doesn't have defer or async.

17
00:01:07.850 --> 00:01:12.846
So when a script tag is discovered by
the HTML parser, it stops the parsing,

18
00:01:12.846 --> 00:01:16.930
fetches the script from
wherever you're loading it.

19
00:01:16.930 --> 00:01:21.324
And once it's downloaded, it executes the
scripts, also still on the main thread,

20
00:01:21.324 --> 00:01:23.880
and then it continues parsing the HTML.

21
00:01:23.880 --> 00:01:26.052
Now, this is called render blocking,
right?

22
00:01:26.052 --> 00:01:29.421
The parser has to literally stop,
fetch the script and execute it,

23
00:01:29.421 --> 00:01:31.140
and then continue parsing.

24
00:01:31.140 --> 00:01:35.033
This is not great when you care about
showing something to your users

25
00:01:35.033 --> 00:01:36.500
really fast.

26
00:01:36.500 --> 00:01:43.054
Now, one thing to kind of avoid that
is by using the async attribute.

27
00:01:43.054 --> 00:01:48.166
So in that case when a script tag is
discovered, it still fetches the script,

28
00:01:48.166 --> 00:01:52.429
but in the meantime it can still
just continue parsing the HTML.

29
00:01:52.429 --> 00:01:54.411
But then once it's downloaded,

30
00:01:54.411 --> 00:01:58.460
the script still gets executed on
the main thread once it's ready.

31
00:01:58.460 --> 00:02:02.976
So in that case the parser still has to
kind of stop parsing, execute the scripts,

32
00:02:02.976 --> 00:02:04.890
and continue parsing.

33
00:02:04.890 --> 00:02:09.700
So with async it's also important that
there's no guarantee of execution, right?

34
00:02:09.700 --> 00:02:13.560
Scripts just get executed as
soon as they've been downloaded.

35
00:02:13.560 --> 00:02:18.965
Now, with defer, we can still fetch the
scripts when the script tag is discovered,

36
00:02:18.965 --> 00:02:24.087
but that script only gets executed once
the HTML parser has completed parsing.

37
00:02:24.087 --> 00:02:28.109
So only at the very end when kind
of the DOM is already complete.

38
00:02:28.109 --> 00:02:32.341
The good thing about defer is that you
can guarantee the order of the script

39
00:02:32.341 --> 00:02:33.100
execution.

40
00:02:33.100 --> 00:02:38.092
So this is a much better alternative for
scripts that rely on each other, but

41
00:02:38.092 --> 00:02:41.520
there shouldn't be render blocking.

42
00:02:41.520 --> 00:02:45.594
So when we look at our example,
we first had the async2, which loaded in,

43
00:02:45.594 --> 00:02:50.110
I forgot what it was,
50 milliseconds, something like that.

44
00:02:50.110 --> 00:02:54.035
So that one is very fast,
cuz once that async2 has been loaded,

45
00:02:54.035 --> 00:02:58.610
downloaded, it can get executed
on the main thread right away.

46
00:02:58.610 --> 00:03:02.945
And then we also have the async defer,
and this is kind of a tricky one,

47
00:03:02.945 --> 00:03:06.636
cuz when you have both keywords,
async takes precedence.

48
00:03:06.636 --> 00:03:11.948
It's only if browsers don't support async,
then it will fall back to defer.

49
00:03:11.948 --> 00:03:15.689
But when you have both async and
defer, the script will be async.

50
00:03:15.689 --> 00:03:18.792
So also this one loads in 60 milliseconds,
so

51
00:03:18.792 --> 00:03:21.982
this one will get executed
as the second script.

52
00:03:21.982 --> 00:03:22.573
Then for a while,

53
00:03:22.573 --> 00:03:25.610
there's nothing cuz the other scripts
are still loading in the background.

54
00:03:25.610 --> 00:03:30.940
And then async1, it has finished loading,
gets executed on the main thread.

55
00:03:30.940 --> 00:03:34.597
And only once the HTML parsing
is completed, will defer1 and

56
00:03:34.597 --> 00:03:36.014
defer2 get executed.

57
00:03:36.014 --> 00:03:40.047
Still in the order that we wrote it
in the script, cuz they're defer.

