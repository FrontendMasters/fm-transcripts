WEBVTT

1
00:00:00.000 --> 00:00:01.180
Okay, question 8.

2
00:00:01.180 --> 00:00:04.415
Match the caching directives
to their definitions.

3
00:00:04.415 --> 00:00:08.655
So we have no-cache, must-revalidate,
no-store, private, and

4
00:00:08.655 --> 00:00:11.170
stale-while-revalidate.

5
00:00:11.170 --> 00:00:14.888
And then we have one validates a stale
response with the origin server

6
00:00:14.888 --> 00:00:15.860
before using it.

7
00:00:15.860 --> 00:00:20.204
Two, serves stale content while
validating the cached response with

8
00:00:20.204 --> 00:00:21.462
the origin server.

9
00:00:21.462 --> 00:00:25.410
Three, doesn't cache any part
of the request or response.

10
00:00:25.410 --> 00:00:30.353
Four, validates the cached resource with
the origin server before using it even

11
00:00:30.353 --> 00:00:34.580
if it is still fresh, and five,
prevents caching on shared caches.

12
00:00:38.282 --> 00:00:41.835
All right, let's see what the answer is.

13
00:00:41.835 --> 00:00:46.131
So we have A, no-cache validates a cache
response with the origin server before

14
00:00:46.131 --> 00:00:48.161
using it, even if it's still fresh.

15
00:00:48.161 --> 00:00:52.038
Must-revalidate validates is still
responds with the origin server before

16
00:00:52.038 --> 00:00:52.582
using it.

17
00:00:52.582 --> 00:00:56.870
No-store doesn't cache any part
of the request or response.

18
00:00:56.870 --> 00:00:59.464
Private prevents caching on shared caches.

19
00:00:59.464 --> 00:01:02.748
And stale-while-revalidate
serves stale content,

20
00:01:02.748 --> 00:01:06.391
while validating the cache
response with the origin server.

21
00:01:06.391 --> 00:01:09.750
So let's first go to no cache.

22
00:01:09.750 --> 00:01:12.560
So first, when we make that initial
request, there's nothing cached yet.

23
00:01:12.560 --> 00:01:17.022
We get it from the origin server, and
then it gets cached in a private cache,

24
00:01:17.022 --> 00:01:18.290
like browser cache.

25
00:01:18.290 --> 00:01:22.681
You can see that in most cases, a server
will also return something called an ETag.

26
00:01:22.681 --> 00:01:25.543
This is a unique identifier that tells,
okay,

27
00:01:25.543 --> 00:01:28.420
this resource has this unique identifier.

28
00:01:28.420 --> 00:01:32.110
And this is important for the future, if
we ever update that resource, if we change

29
00:01:32.110 --> 00:01:35.765
any of the contents, it'll have a
different hash, it'll have different ETag.

30
00:01:35.765 --> 00:01:39.451
But caches can use this to ensure
that what they have cashed is

31
00:01:39.451 --> 00:01:41.924
still the most up-to-date resource.

32
00:01:41.924 --> 00:01:44.649
So with no-cache, it's fresh now,

33
00:01:44.649 --> 00:01:49.774
the response can get returned to
the client after making that request.

34
00:01:49.774 --> 00:01:54.490
So now the next time we request it,
it won't just get it from cache instantly,

35
00:01:54.490 --> 00:01:57.357
it'll first make sure
with the origin server.

36
00:01:57.357 --> 00:02:01.201
Hey, I have this cached version with
the if-non match, this is my ETag,

37
00:02:01.201 --> 00:02:02.327
is that stale valid?

38
00:02:02.327 --> 00:02:06.050
Is that stale the most
up-to-date resource?

39
00:02:06.050 --> 00:02:09.309
And then the server can just quickly
respond with the 304 not modified.

40
00:02:09.309 --> 00:02:12.040
It's like, yeah, this is fine, you still
have the most up-to-date resource.

41
00:02:12.040 --> 00:02:15.058
So this is of course much faster cuz it
doesn't have to do actually download that

42
00:02:15.058 --> 00:02:17.710
resource, it just responds
with that header.

43
00:02:17.710 --> 00:02:21.534
Now, if we update the resource, different
ETag is like, hey, I have this one,

44
00:02:21.534 --> 00:02:24.308
then servers are like, no,
no, you should get a new one.

45
00:02:24.308 --> 00:02:27.070
It'll return a cache control
again with a no-cache.

46
00:02:27.070 --> 00:02:30.457
New ETag, and it updates the cache,
so that's no-cache.

47
00:02:30.457 --> 00:02:34.589
So that's important to remember because
no-cache doesn't mean that it's not

48
00:02:34.589 --> 00:02:37.761
caching despite its kind of I
don't know the deceptive name.

49
00:02:37.761 --> 00:02:41.812
It just means that it will always make a
request to the origin server first before

50
00:02:41.812 --> 00:02:43.210
using the cached version.

51
00:02:44.330 --> 00:02:45.550
So then we have the most-revalidate.

52
00:02:46.690 --> 00:02:48.940
So again, we just make that
request to the origin server.

53
00:02:48.940 --> 00:02:52.702
And here you can see the master validate
cache control and also a max age,

54
00:02:52.702 --> 00:02:54.530
which is usually included.

55
00:02:54.530 --> 00:02:57.882
So the max age does defines how
long a resource is fresh for,

56
00:02:57.882 --> 00:02:59.300
like fresh in the cache.

57
00:03:00.940 --> 00:03:04.189
So now when after ten seconds it
becomes stale, and the cache says,

58
00:03:04.189 --> 00:03:07.838
it's like hey it's stale, sorry I
shouldn't have removed those things.

59
00:03:07.838 --> 00:03:09.146
But anyway, when it's stale,

60
00:03:09.146 --> 00:03:13.010
it makes another request to the origin
server to update that resource.

61
00:03:13.010 --> 00:03:19.698
I think it's kind of the most
straightforward caching policy.

62
00:03:19.698 --> 00:03:24.750
So now if we update it,
we still have the max age of ten.

63
00:03:24.750 --> 00:03:29.289
So it's still fresh, even though the ETag
in the cache doesn't match the ETag on

64
00:03:29.289 --> 00:03:32.050
the server, but
it's still fresh in the cache.

65
00:03:32.050 --> 00:03:34.050
So I can still just use that response.

66
00:03:34.050 --> 00:03:39.699
And only when it then becomes stale again
will it make that make a request again and

67
00:03:39.699 --> 00:03:41.872
update the resource in cache?

68
00:03:41.872 --> 00:03:44.670
This makes more sense when we always
talk about the stale while revalidate.

69
00:03:44.670 --> 00:03:48.081
So yeah, but then we have the no store,
which is very easy,

70
00:03:48.081 --> 00:03:49.732
it doesn't cache any part.

71
00:03:49.732 --> 00:03:54.665
This is perfect for private data,
maybe some financial data,

72
00:03:54.665 --> 00:03:58.947
anything that's user specific,
sensitive data that

73
00:03:58.947 --> 00:04:03.715
shouldn't get cached or
should have the no-store policy.

74
00:04:03.715 --> 00:04:07.344
And then we have private,
which prevents caching on shared caches.

75
00:04:07.344 --> 00:04:10.860
So this kinda makes more sense when
we also have a CDN in between, right?

76
00:04:10.860 --> 00:04:14.641
So normally,
a CDN might I'd intercept the response and

77
00:04:14.641 --> 00:04:17.590
just cache it on their servers as well.

78
00:04:17.590 --> 00:04:19.800
With private,
we can make sure that that doesn't happen.

79
00:04:19.800 --> 00:04:23.549
It only caches it on
the user's HTTP cache.

80
00:04:23.549 --> 00:04:28.275
And this is perfect for user-specific
data, like maybe some dashboard or

81
00:04:28.275 --> 00:04:33.151
anything that could be user-specific,
not shared with multiple users, or

82
00:04:33.151 --> 00:04:35.190
should get the private policy.

83
00:04:36.520 --> 00:04:39.706
And then lastly, we have the still while
revalidate, which serves the stale content

84
00:04:39.706 --> 00:04:42.020
while validating the cache
response with the origin server.

85
00:04:42.020 --> 00:04:44.740
So it's a bit similar
to the must revalidate.

86
00:04:44.740 --> 00:04:47.270
So we first get that,
responding it with the max age, and

87
00:04:47.270 --> 00:04:51.670
then the still while revalidate, I'll talk
more about these numbers a bit later.

88
00:04:51.670 --> 00:04:53.721
But now the response is still, and

89
00:04:53.721 --> 00:04:57.910
where they must revalidate wouldn't
return the still response.

90
00:04:57.910 --> 00:05:02.363
This one does, it returns that still
response first, but in the background

91
00:05:02.363 --> 00:05:06.410
it makes a request to the origin
server to revalidate that resource.

92
00:05:06.410 --> 00:05:10.662
In this case it wasn't modified,
but it will still like update

93
00:05:10.662 --> 00:05:15.154
the cache now to be fresh again
because it has a new max age value, so

94
00:05:15.154 --> 00:05:19.185
this is perfect because the user
doesn't really see that.

95
00:05:19.185 --> 00:05:22.814
It just gets that stale resource
back while that server updates

96
00:05:22.814 --> 00:05:24.053
the cache response.

97
00:05:24.053 --> 00:05:26.426
And this is different
from the must-revalidate,

98
00:05:26.426 --> 00:05:30.010
where the user might see some latency
because it first had to request the fresh

99
00:05:30.010 --> 00:05:32.450
resource from the origin server again.

100
00:05:32.450 --> 00:05:36.339
So this is perfect for content where
you don't really care if it's stale,

101
00:05:36.339 --> 00:05:38.448
like maybe some blog post or something.

102
00:05:38.448 --> 00:05:42.170
And it's, okay, well this typo is fine,
people can still see that typo for

103
00:05:42.170 --> 00:05:45.438
once, but maybe the next time they
refresh the page you know that.

104
00:05:45.438 --> 00:05:49.029
The browser has updated that resource
in its cache in the background.

105
00:05:49.029 --> 00:05:51.231
Yeah, so stale-while-revalidate,
it's basically,

106
00:05:51.231 --> 00:05:52.600
you normally have like the next age.

107
00:05:52.600 --> 00:05:55.345
So that is the age that
the content is still fresh, and

108
00:05:55.345 --> 00:05:58.190
then we have the stale
-while-revalidate period.

109
00:05:58.190 --> 00:06:01.957
And that's essentially the period
where we tell the browser like, hey,

110
00:06:01.957 --> 00:06:04.143
this is the time after
max age has expired,

111
00:06:04.143 --> 00:06:06.714
that it's still okay to
use that stale resource.

112
00:06:06.714 --> 00:06:10.842
Cuz if it's been stale for a year,
we don't wanna use that stale resource,

113
00:06:10.842 --> 00:06:14.310
then it should instantly make
a request to the origin.

114
00:06:14.310 --> 00:06:18.790
But if it's been stale for 30 seconds,
and we're that's fine, that's doable.

115
00:06:18.790 --> 00:06:21.719
Anything after that,
then don't serve the stale response,

116
00:06:21.719 --> 00:06:24.340
then just fetch it from
the origin right away.

117
00:06:24.340 --> 00:06:28.357
So in that case, it's kind of more
of like a must-revalidate policy.

118
00:06:28.357 --> 00:06:32.327
&gt;&gt; Does it send hash of
the current cached data to do

119
00:06:32.327 --> 00:06:35.659
their validation before caching?

120
00:06:35.659 --> 00:06:39.887
&gt;&gt; I think maybe what you're
asking is if it hasn't updated,

121
00:06:39.887 --> 00:06:42.330
will it send the hash again?

122
00:06:42.330 --> 00:06:45.830
Well, in this case, it has updated.

123
00:06:45.830 --> 00:06:50.663
Well, even if it sends a 304 not modified,
it will usually still send that ETag,

124
00:06:50.663 --> 00:06:53.814
and also it will send the cache
control headers again.

125
00:06:53.814 --> 00:06:58.231
So it will again have that max age,
which refreshes

126
00:06:58.231 --> 00:07:03.163
the response that's already
in cache to be fresh again,

127
00:07:03.163 --> 00:07:07.599
even if it was still prior
to sending that request.

128
00:07:07.599 --> 00:07:13.899
&gt;&gt; So this question is related to how
the browser actually validates the cache?

129
00:07:13.899 --> 00:07:18.731
&gt;&gt; I'm not sure about the algorithm,
if that's what you're asking with ETag.

130
00:07:18.731 --> 00:07:25.050
I was just trying to get that.

131
00:07:25.050 --> 00:07:28.329
I hear the if non-match, right?

132
00:07:28.329 --> 00:07:31.390
Yeah, that's a response,
[LAUGH] or a request header.

133
00:07:31.390 --> 00:07:38.741
So it's just like the server kind of,
sorry, I'm trying to get that arrow again.

134
00:07:40.619 --> 00:07:42.160
Okay, there we go.

135
00:07:42.160 --> 00:07:45.454
Okay, cool, so the request header
contains the if none match,

136
00:07:45.454 --> 00:07:48.016
and it's up to the server
to then see like, okay,

137
00:07:48.016 --> 00:07:51.447
well that's not the ETag that I
currently have for that resource.

138
00:07:51.447 --> 00:07:54.823
So it's not really up to the browser
to do anything with that.

139
00:07:54.823 --> 00:07:57.451
It's up to the server to then decide,

140
00:07:57.451 --> 00:08:02.955
now I'm going to serve new content
instead of returning a 304 not modified,

141
00:08:02.955 --> 00:08:08.478
I'm going to return to 200, okay,
with the actual resource as a response.

142
00:08:08.478 --> 00:08:10.840
I hope that answers the question?

143
00:08:10.840 --> 00:08:15.286
I'm not sure what the browser
does internally to then change

144
00:08:15.286 --> 00:08:20.263
the hashes within the HTTP cache,
that's some internal browser.

145
00:08:20.263 --> 00:08:22.102
&gt;&gt; Yeah, thanks, I got it.

146
00:08:22.102 --> 00:08:24.888
ETag is a unique value like a hash?

147
00:08:24.888 --> 00:08:27.883
&gt;&gt; Yeah, that's the hash of the resource.

148
00:08:27.883 --> 00:08:30.890
So anytime you change anything in the
document, it will return a different hash.

