WEBVTT

1
00:00:00.000 --> 00:00:03.717
What gets logged?

2
00:00:03.717 --> 00:00:08.035
Is that 1 2 3 4, 2 4 3 1,
2 3 4 1, or 2 3 1 4?

3
00:00:12.604 --> 00:00:17.785
All right, so
the right answer here is B, 2 4 3 1.

4
00:00:17.785 --> 00:00:20.953
So again, we just have the Call Stack,
Web API, all the fun stuff.

5
00:00:20.953 --> 00:00:23.127
So first, we call settimeout, and

6
00:00:23.127 --> 00:00:27.480
its callback gets pushed to the Web API
first to eventually log (1).

7
00:00:27.480 --> 00:00:32.170
Then we meet this async function body and
we immediately invoke it.

8
00:00:32.170 --> 00:00:34.876
So because we immediately invoke it,
it gets added to the Call Stack.

9
00:00:34.876 --> 00:00:39.074
Now the body of an async function is run
synchronously until it meets an await

10
00:00:39.074 --> 00:00:40.150
keyword.

11
00:00:40.150 --> 00:00:43.439
So here we're in the body and
we see console.log(2).

12
00:00:43.439 --> 00:00:45.880
This just gets run so it logs(2).

13
00:00:45.880 --> 00:00:50.459
Then it sees the await keyword, but
first, it resolves the promise.

14
00:00:50.459 --> 00:00:54.600
Anytime we await something, it'll first
run that function that comes after.

15
00:00:54.600 --> 00:00:58.356
So this runs Promise.resolve,
doesn't do anything else, and

16
00:00:58.356 --> 00:01:00.210
then it sees the await keyword.

17
00:01:00.210 --> 00:01:04.116
And when it does this, it schedules the
rest of the function body as a microtask.

18
00:01:04.116 --> 00:01:07.441
So in this case that's
just console.log (3).

19
00:01:07.441 --> 00:01:12.249
I mean, yeah, this is where's animated,
so this now gets pushed to the microtask

20
00:01:12.249 --> 00:01:16.714
queue, and then it changes out of that
body or the function where it was before

21
00:01:16.714 --> 00:01:20.380
back to the global scope because
this is now kind of suspended.

22
00:01:20.380 --> 00:01:24.192
Now it calls promise.resolve and
this just resolves.

23
00:01:24.192 --> 00:01:29.772
Calls then on that resolved promise,
that promise resolved returned,

24
00:01:29.772 --> 00:01:34.534
and the callback from then gets
added to the microtask queue.

25
00:01:34.534 --> 00:01:36.330
Now there's nothing in
the Call Stack anymore.

26
00:01:36.330 --> 00:01:38.306
There's nothing to execute.

27
00:01:38.306 --> 00:01:42.200
So it first goes back to the microtask
queue because those are prioritized.

28
00:01:42.200 --> 00:01:45.720
And here, we have that console.log(3)
from that async function.

29
00:01:45.720 --> 00:01:49.628
So now finally 3 gets logged, and
then we have another microtask.

30
00:01:49.628 --> 00:01:53.601
And that's just a callback function for
promise resolve.

31
00:01:53.601 --> 00:01:57.545
This runs, finishes, it calls the then
function on the resolve promise, and

32
00:01:57.545 --> 00:02:02.060
this schedules its callback, which is
the console.log(4) to the microtask queue.

33
00:02:03.400 --> 00:02:08.775
Then we have this microtask here again cuz
a microtask can schedule a microtask, fun.

34
00:02:08.775 --> 00:02:13.730
So this callback is console.log,
it invokes console.log and then logs 4.

35
00:02:13.730 --> 00:02:19.008
And then finally, we just have one
task left on the normal task queue,

36
00:02:19.008 --> 00:02:22.591
which is console.log1, and 1 gets logged.

37
00:02:22.591 --> 00:02:23.880
Wrong animation there.

38
00:02:25.170 --> 00:02:27.697
[LAUGH] All right, makes sense?

39
00:02:27.697 --> 00:02:31.441
So yeah, I guess the most important part
is that the async function body runs

40
00:02:31.441 --> 00:02:34.076
synchronously until it meets
the await keyword, and

41
00:02:34.076 --> 00:02:36.490
the rest of the function
body is run as a microtask

