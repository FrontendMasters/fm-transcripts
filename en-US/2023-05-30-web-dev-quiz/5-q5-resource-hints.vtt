WEBVTT

1
00:00:00.000 --> 00:00:03.959
Question 5, match the resource
hints with their definitions.

2
00:00:03.959 --> 00:00:07.596
So we have dns-prefetch,
preconnect, prefetch, and preload.

3
00:00:07.596 --> 00:00:11.465
And then prioritizes fetching
of crucial resources needed for

4
00:00:11.465 --> 00:00:16.356
the current navigation, performs domain
name resolution in the background,

5
00:00:16.356 --> 00:00:20.590
3 is proactively performs DNS
resolution and TCP/TLS handshake,

6
00:00:20.590 --> 00:00:24.465
or 4, requests non-critical
resources in the background?

7
00:00:28.353 --> 00:00:31.835
All right, let's look at the answer.

8
00:00:31.835 --> 00:00:36.656
So AS2 dns-prefetch performs domain
name resolution in the background.

9
00:00:36.656 --> 00:00:41.396
Preconnect proactively performs DNS
resolution and TCP/TLS handshake.

10
00:00:41.396 --> 00:00:45.408
Prefetch requests non critical
resources in the background.

11
00:00:45.408 --> 00:00:50.104
And preload prioritizes fetching
of critical resources needed for

12
00:00:50.104 --> 00:00:51.924
the current navigation.

13
00:00:51.924 --> 00:00:56.524
So first, when we talk about having an
http request, it's not just a request and

14
00:00:56.524 --> 00:01:00.530
the response it also usually includes
the DNS that we saw previously.

15
00:01:00.530 --> 00:01:04.820
Also the TCP connection to establish
the acts and all that stuff to

16
00:01:04.820 --> 00:01:08.955
establish that connection between
the client and the server.

17
00:01:08.955 --> 00:01:13.425
And if it's secure, so if it uses https,
it also needs to have the TLS handshake

18
00:01:13.425 --> 00:01:18.130
which basically ensures that both a client
and a server have the same certificate.

19
00:01:18.130 --> 00:01:21.253
This is that secure
connection that we expect.

20
00:01:21.253 --> 00:01:24.688
Now with, or yeah, so
whenever we don't use DNS prefetch and

21
00:01:24.688 --> 00:01:29.261
we're making a request to an external
resource, it includes all of these steps.

22
00:01:29.261 --> 00:01:31.751
But with DNS prefetch,
we can already say, hey,

23
00:01:31.751 --> 00:01:34.792
I know that this resource is
pretty critical, I will use it.

24
00:01:34.792 --> 00:01:39.346
So let's already perform that DNS
resolution before I request the resource.

25
00:01:39.346 --> 00:01:44.800
So in that case, I only have to still
do the TCP/TLS request and response.

26
00:01:44.800 --> 00:01:49.759
Now we can even go a step further with
preconnect because that doesn't only

27
00:01:49.759 --> 00:01:54.023
use the DNS, or not just DNS, but
also includes the TCP and TLS.

28
00:01:54.023 --> 00:01:58.531
So in that case can be
the connection is already there,

29
00:01:58.531 --> 00:02:04.519
you just have to use, or you just have
the request and then the response.

30
00:02:04.519 --> 00:02:10.356
Now, it's important to remember that
you shouldn't overuse DNS prefetch and

31
00:02:10.356 --> 00:02:15.074
preconnect because you're still
establishing a connection.

32
00:02:15.074 --> 00:02:17.511
And they kind of all fight for bandwidth.

33
00:02:17.511 --> 00:02:23.219
So if you're doing this it might happen
if you're on a lower end device or

34
00:02:23.219 --> 00:02:27.806
poor network connections that
you're preconnecting but

35
00:02:27.806 --> 00:02:32.860
then other resources might need
to wait which actually return,

36
00:02:32.860 --> 00:02:35.594
or it's a worse user experience.

37
00:02:35.594 --> 00:02:39.776
Yeah, there's also a maximum number
of simultaneous connections that

38
00:02:39.776 --> 00:02:40.949
a browser can have.

39
00:02:40.949 --> 00:02:43.689
So make sure that you're
only kind of doing this for

40
00:02:43.689 --> 00:02:47.075
external resources that you might
need on initial load maybe.

41
00:02:47.075 --> 00:02:51.549
I don't know, like Google fonts,
Google APIs, that kind of stuff.

42
00:02:51.549 --> 00:02:54.615
So the next one was prefetch which
download resources ahead of time even if

43
00:02:54.615 --> 00:02:56.106
they aren't immediately needed.

44
00:02:56.106 --> 00:02:59.683
So maybe in this case we have user
interaction maybe they click on something,

45
00:02:59.683 --> 00:03:01.453
maybe they navigate to another page.

46
00:03:01.453 --> 00:03:06.304
And then it requests a very important
resource maybe it's that in this case

47
00:03:06.304 --> 00:03:09.779
a picture of a dog that will
get displayed instantly.

48
00:03:09.779 --> 00:03:12.361
So with prefetch we can already say, hey,

49
00:03:12.361 --> 00:03:16.397
I know that I will need this resource
pretty soon or like probably.

50
00:03:16.397 --> 00:03:20.312
So if it's possible, if you're idle and
if you have an bandwidth and

51
00:03:20.312 --> 00:03:25.119
if the browser thinks, all right, I can
just prefetch this resource, it's fine.

52
00:03:25.119 --> 00:03:27.325
It won't negatively
affect the performance,

53
00:03:27.325 --> 00:03:30.204
it can already prefetch it and
then store it in browser cache.

54
00:03:30.204 --> 00:03:35.849
So whenever we actually need the resource,
it can just quickly get it from cache.

55
00:03:35.849 --> 00:03:40.020
Again, important to remember that prefetch
can be skipped by browsers if they feel

56
00:03:40.020 --> 00:03:43.893
they just don't have enough bandwidth or
if the user has data saving mode on,

57
00:03:43.893 --> 00:03:44.741
all that stuff.

58
00:03:44.741 --> 00:03:48.746
So, yeah, then we have a more
aggressive one which is preload.

59
00:03:48.746 --> 00:03:53.282
So normally whenever we have the HTML
there is something called like a preload

60
00:03:53.282 --> 00:03:56.215
scanner or
prescanner that browsers implement,

61
00:03:56.215 --> 00:03:59.032
which runs at the same
time as your HTML parser.

62
00:03:59.032 --> 00:04:01.034
So if your HTML parser is blocked,

63
00:04:01.034 --> 00:04:05.256
that prescanner can still continue
looking through all the resources.

64
00:04:05.256 --> 00:04:08.899
And seeing, okay,
I'm requesting images here, and links,

65
00:04:08.899 --> 00:04:12.002
whatever, it can already
fetch all of those things.

66
00:04:12.002 --> 00:04:16.196
But that's only for your markup, and
not for CSS, or maybe scripts that import

67
00:04:16.196 --> 00:04:19.966
other scripts, all that stuff,
the preload scanner cannot see that.

68
00:04:19.966 --> 00:04:21.131
But for example,

69
00:04:21.131 --> 00:04:25.480
in this case we have a background
image like your image in the CSS and

70
00:04:25.480 --> 00:04:30.623
let's say that this background image
is already displayed on the first page.

71
00:04:30.623 --> 00:04:33.506
In that case we can say the browser,
hey, preload this asset I know

72
00:04:33.506 --> 00:04:36.869
you wouldn't have been able to see that
yourself with your preload scanner.

73
00:04:36.869 --> 00:04:37.788
So instead,

74
00:04:37.788 --> 00:04:43.312
I will tell you preload this because I
will need it very soon after navigation.

75
00:04:43.312 --> 00:04:45.597
It's important to remember
that this is only for

76
00:04:45.597 --> 00:04:48.787
very critical resources because
your browser cannot ignore this.

77
00:04:48.787 --> 00:04:53.216
So it might easily lead to
worse user experience because

78
00:04:53.216 --> 00:04:57.561
you're using a network connection for
that preload.

79
00:04:57.561 --> 00:04:59.976
And especially, also for mobile users,

80
00:04:59.976 --> 00:05:04.050
don't overuse it because it'll cost data,
and that's expensive.

81
00:05:04.050 --> 00:05:06.852
So, yeah.

82
00:05:06.852 --> 00:05:11.409
&gt;&gt; Can you explain the AES parameters?

83
00:05:11.409 --> 00:05:13.193
Is that something?

84
00:05:13.193 --> 00:05:15.817
&gt;&gt; Yeah, so I see like as image here, so

85
00:05:15.817 --> 00:05:20.029
you can have as image, as document I'm-
&gt;&gt; Multiple.

86
00:05:20.029 --> 00:05:24.730
&gt;&gt; Yeah, I'm honestly not sure how this,
I mean, I think it just has something to

87
00:05:24.730 --> 00:05:29.024
do with how your browser fetches,
what kind of request headers to send.

88
00:05:29.024 --> 00:05:34.050
I may be wrong here, I know that it
does add some optimization stuff,

89
00:05:34.050 --> 00:05:36.399
but I'm not entirely sure how.

90
00:05:36.399 --> 00:05:39.949
But, yeah, so in this case we have the ASE
image cuz we're fetching an image.

91
00:05:39.949 --> 00:05:44.976
Otherwise, if you have HTML, you do it
as documents, all that kind of stuff.

92
00:05:44.976 --> 00:05:48.090
But again, just important to remember
the browsers are very smart, and

93
00:05:48.090 --> 00:05:50.450
they already do so
many optimizations under the hood.

94
00:05:50.450 --> 00:05:54.015
So using resources like this can help,

95
00:05:54.015 --> 00:05:58.560
but don't rely on it as the sole,
the only thing.

