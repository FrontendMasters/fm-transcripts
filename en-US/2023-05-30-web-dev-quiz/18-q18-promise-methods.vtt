WEBVTT

1
00:00:00.053 --> 00:00:02.015
Connect the Promise methods
to the right output.

2
00:00:02.015 --> 00:00:06.276
So, we have all, race, any, and
allSettled, and then we have Result: 2,

3
00:00:06.276 --> 00:00:09.131
Error: 3, Result,
which is an array of objects.

4
00:00:09.131 --> 00:00:12.441
These aren't supposed to be
empty objects by the way but

5
00:00:12.441 --> 00:00:16.329
I just couldn't fit it all in there,
and 4 is also a Result: 2.

6
00:00:16.329 --> 00:00:18.905
So there are two result twos,
which is, yeah.

7
00:00:18.905 --> 00:00:23.620
Anyway, connect what should
be in that little method

8
00:00:23.620 --> 00:00:28.136
box to get that result,
or yeah, get that output.

9
00:00:28.136 --> 00:00:30.676
Hope the question phrasing
[LAUGH] makes sense, kind of.

10
00:00:34.530 --> 00:00:39.047
So for all, it'll be Error 3, race is
Result: 2, any is also Result: 2, and

11
00:00:39.047 --> 00:00:43.051
allSettled will result or will have
to result with the array of objects.

12
00:00:43.051 --> 00:00:46.214
So first, let's just take a look
at what does promise.all do.

13
00:00:46.214 --> 00:00:50.840
So with this method, it kind of waits for
all the promises in the array to settle.

14
00:00:50.840 --> 00:00:53.182
So either resolve or reject, and

15
00:00:53.182 --> 00:00:56.624
then resolve with an array
of the result values.

16
00:00:56.624 --> 00:00:59.271
But if any of the Promises rejects,

17
00:00:59.271 --> 00:01:03.339
it will immediately reject
with the first rejection.

18
00:01:03.339 --> 00:01:06.573
So here, the first one fulfills them or
resolves them all.

19
00:01:06.573 --> 00:01:09.669
So it just fulfills with
the array with the values.

20
00:01:09.669 --> 00:01:12.320
The second one or
like the one right below,

21
00:01:12.320 --> 00:01:14.760
it rejects with that first rejection.

22
00:01:14.760 --> 00:01:17.382
And the third one, like on top,
I don't know if it's third,

23
00:01:17.382 --> 00:01:19.665
it will also reject that
the first rejected Promise.

24
00:01:19.665 --> 00:01:21.900
Same for the fourth.

25
00:01:21.900 --> 00:01:23.790
So in the case of our Promises,

26
00:01:23.790 --> 00:01:27.298
this is kind of like the code
that reflected as the lines.

27
00:01:27.298 --> 00:01:34.342
So the first rejection, which is Error 3,
will get returned from Promise.all.

28
00:01:34.342 --> 00:01:39.290
So Promise.all is also Promise that
then rejects with that rejected value.

29
00:01:39.290 --> 00:01:42.095
Next, we have Promise.race,
which waits for

30
00:01:42.095 --> 00:01:44.558
the first promise in the array to settle.

31
00:01:44.558 --> 00:01:48.196
So again, either resolve or reject.

32
00:01:48.196 --> 00:01:50.999
So it just depends on
which Promise is first.

33
00:01:50.999 --> 00:01:54.041
If the first Promise resolves,
then it will fulfill, but

34
00:01:54.041 --> 00:01:57.347
if the first Promise rejects,
then it'll also get rejected.

35
00:01:57.347 --> 00:02:01.319
So this is just the first Promise they
well, as the name suggests, they raised.

36
00:02:01.319 --> 00:02:04.254
It's just the first Promise that resolves.

37
00:02:04.254 --> 00:02:07.370
Yeah, so in this case,
even though we have two,

38
00:02:07.370 --> 00:02:10.795
we have a Promise that resolves and
one that rejects.

39
00:02:10.795 --> 00:02:15.070
Then it just depends on which in
real life is never quite the case.

40
00:02:15.070 --> 00:02:16.542
This was just like a set timeout.

41
00:02:16.542 --> 00:02:20.127
But in that case, just depends on
which Promise was defined first, and

42
00:02:20.127 --> 00:02:25.268
in this case, that was the resolving one
so it'll be fulfilled with Result: 2.

43
00:02:25.268 --> 00:02:30.372
Then we have Promise.any, which wait for
the first promise in the original resolve.

44
00:02:30.372 --> 00:02:32.786
So if a Promise rejects,
it'll just ignore that one.

45
00:02:32.786 --> 00:02:35.189
It's waiting for the first one to resolve.

46
00:02:35.189 --> 00:02:41.046
And if none of them resolve, so the second
one, it'll have this aggregate error,

47
00:02:41.046 --> 00:02:44.894
which is just an array of all
the rejected reasons, but

48
00:02:44.894 --> 00:02:49.433
only then will it reject,
otherwise, it'll always fulfill.

49
00:02:49.433 --> 00:02:52.825
Yeah, so in this case, again,
it's just the first resolving Promise,

50
00:02:52.825 --> 00:02:53.875
which is Result: 2.

51
00:02:53.875 --> 00:02:56.560
And then allSettled we'll never reject it,

52
00:02:56.560 --> 00:03:00.728
it will always just return an array
with a status of either fulfilled or

53
00:03:00.728 --> 00:03:05.056
rejected based on what that Promise
either if it fulfilled or rejected.

54
00:03:05.056 --> 00:03:09.526
And then the reason for
the rejection if it was rejected or

55
00:03:09.526 --> 00:03:13.262
the value of that
fulfilled resolved Promise.

56
00:03:13.262 --> 00:03:16.812
So yeah, even if they all just rejected,
it will still be fulfilled.

57
00:03:16.812 --> 00:03:20.266
So this is pretty useful if the API
calls or if you're using this for

58
00:03:20.266 --> 00:03:23.365
API calls and they aren't
really depending on each other.

59
00:03:23.365 --> 00:03:29.038
And maybe one failed and you just wanna
retry it without having to catch or

60
00:03:29.038 --> 00:03:34.541
you still want the other Promises or
other API calls to finish as well.

61
00:03:34.541 --> 00:03:36.059
Then you can just easily retry.

62
00:03:36.059 --> 00:03:40.290
Maybe if status is rejected in one of
those, then retry it for that API call.

63
00:03:40.290 --> 00:03:43.905
But for the other ones, just keep going.

64
00:03:43.905 --> 00:03:48.765
So yeah, that, right, so for our Promises
that will just return this array

65
00:03:48.765 --> 00:03:52.423
with a fulfilled, fulfilled,
rejected, and fulfilled.

