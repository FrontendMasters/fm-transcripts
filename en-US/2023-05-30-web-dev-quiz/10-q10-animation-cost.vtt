WEBVTT

1
00:00:00.000 --> 00:00:02.418
Ready for question number 10.

2
00:00:02.418 --> 00:00:05.242
When animating the following properties,

3
00:00:05.242 --> 00:00:08.532
which have the correctly
listed rendering costs?

4
00:00:08.532 --> 00:00:12.908
Is it width with layout, paint and
composite, opacity with paint and

5
00:00:12.908 --> 00:00:17.434
composite, background image with
just composite, left with layout,

6
00:00:17.434 --> 00:00:21.532
paint, and composite, or
transform with paint and composite.

7
00:00:21.532 --> 00:00:25.212
Also, just remember that you can
select multiple if you want.

8
00:00:25.212 --> 00:00:27.438
And also,
this is just kind of the default,

9
00:00:27.438 --> 00:00:31.062
it can be a little different sometimes
in browsers depending on stuff.

10
00:00:31.062 --> 00:00:32.517
About, yeah, default.

11
00:00:36.055 --> 00:00:38.743
All right, let's look at the answer.

12
00:00:38.743 --> 00:00:42.935
So the only right ones are A, with width,
layout, paint and composite, and

13
00:00:42.935 --> 00:00:45.785
D with left, also layout,
paint, and composite.

14
00:00:45.785 --> 00:00:49.159
So first let's go to the width.

15
00:00:49.159 --> 00:00:54.127
So when we're changing the width maybe
like on hover we wanna go from 200 pixels

16
00:00:54.127 --> 00:00:58.951
to 300 pixels, the browser first has
to calculate the new kind of geometry,

17
00:00:58.951 --> 00:01:00.830
the new sizes of the elements.

18
00:01:00.830 --> 00:01:03.527
Cuz it might also affect the other
elements on the screen when we're

19
00:01:03.527 --> 00:01:04.391
changing the width.

20
00:01:04.391 --> 00:01:07.481
So net case has to calculate
all the positions again.

21
00:01:07.481 --> 00:01:11.186
Next hand of course, has to paint it
because we just changed the width and

22
00:01:11.186 --> 00:01:14.545
finally, it always has to composite
the layers together again.

23
00:01:14.545 --> 00:01:19.361
Now in this animation, it's a bit more
dramatic browsers are very smart and

24
00:01:19.361 --> 00:01:23.273
optimizing to only repaint
the parts that are affected by it,

25
00:01:23.273 --> 00:01:25.017
not the entire page again.

26
00:01:25.017 --> 00:01:29.486
But yeah, changing any sizes will
always cause a layout change.

27
00:01:29.486 --> 00:01:35.420
And then always a paint and composite as
well, cuz it's kind of like a pipeline.

28
00:01:35.420 --> 00:01:39.000
When we change the opacity,
we only have to composite.

29
00:01:39.000 --> 00:01:44.187
So opacity is one of those fun GPU
accelerated properties where a browser

30
00:01:44.187 --> 00:01:49.459
will actually create or kind of promote
that element to a separate layer,

31
00:01:49.459 --> 00:01:51.856
like a separate graphics layer.

32
00:01:51.856 --> 00:01:54.811
And when changing the opacity what
it can do is it can just change,

33
00:01:54.811 --> 00:01:57.734
I think it's called like the alpha
channel on a graphics layer.

34
00:01:57.734 --> 00:01:59.364
I'm not into graphics at all.

35
00:01:59.364 --> 00:02:01.957
But basically, what it does is it
can just change the layer's opacity.

36
00:02:01.957 --> 00:02:05.767
Not the entire layout, not the element
itself within that same layout.

37
00:02:05.767 --> 00:02:07.841
It can just change the layer's opacity.

38
00:02:07.841 --> 00:02:11.362
So it only has to change the opacity
during that composite phase.

39
00:02:11.362 --> 00:02:13.548
So it doesn't have to do anything,
it doesn't have to repaint,

40
00:02:13.548 --> 00:02:16.474
it doesn't have to layout, because we're
not changing width or height or anything.

41
00:02:16.474 --> 00:02:18.367
And we're also not changing the pixels,

42
00:02:18.367 --> 00:02:20.916
it's just changing the opacity
in that browser later.

43
00:02:20.916 --> 00:02:25.888
We'll talk a bit more about the GPU
accelerated properties soon to

44
00:02:25.888 --> 00:02:29.455
see what other values kind
of work the same way.

45
00:02:29.455 --> 00:02:31.759
It's also important to
remember that in some cases,

46
00:02:31.759 --> 00:02:35.544
browsers might not create a separate layer
for opacity, if we're not animating it, or

47
00:02:35.544 --> 00:02:38.788
if they think, like, okay,
it doesn't really make sense, do you know?

48
00:02:38.788 --> 00:02:44.066
Cuz creating a different layer,
it consumes memory, consumes data.

49
00:02:44.066 --> 00:02:47.530
So you kind of wanna minimize the amount
of layers that you have in an application.

50
00:02:47.530 --> 00:02:50.550
But when changing it, when hovering it,
it first creates separate layer,

51
00:02:50.550 --> 00:02:52.973
composite it back, and
then it can just be on the same layer.

52
00:02:52.973 --> 00:02:55.777
So it's just for like the animation.

53
00:02:55.777 --> 00:02:57.921
Anyway, moving on to background image.

54
00:02:57.921 --> 00:02:59.930
So this one requires it paints and
a composite.

55
00:02:59.930 --> 00:03:02.778
So it doesn't need layout because
we're not changing with height,

56
00:03:02.778 --> 00:03:04.361
we're not changing anything there.

57
00:03:04.361 --> 00:03:07.890
But it does have to repaint the pixels
to have that background image.

58
00:03:07.890 --> 00:03:10.570
So this does require a paint and
then of course,

59
00:03:10.570 --> 00:03:15.067
always a composite to get all those layers
back together into one single image.

60
00:03:17.230 --> 00:03:20.510
And then we have left,
which does affect the layout.

61
00:03:20.510 --> 00:03:23.902
We're changing, not necessarily
the geometry, we're changing the position.

62
00:03:23.902 --> 00:03:26.916
So it might also alter the position
of other elements on the page.

63
00:03:26.916 --> 00:03:31.598
So the browser has to ensure that it
knows where the other elements go

64
00:03:31.598 --> 00:03:33.085
when changing left.

65
00:03:33.085 --> 00:03:34.489
So this does require a layout and

66
00:03:34.489 --> 00:03:36.780
then eventually it paints
to repaint those pixels.

67
00:03:36.780 --> 00:03:38.556
Again, this is a more dramatic one.

68
00:03:38.556 --> 00:03:41.252
It does this in a very optimized way and

69
00:03:41.252 --> 00:03:45.898
then compositing the layers back
together into the final image.

70
00:03:45.898 --> 00:03:48.864
And then finally transform is also
one of those GPU accelerated ones.

71
00:03:48.864 --> 00:03:54.728
So when we transform, for example,
we wanna move the elements to the right,

72
00:03:54.728 --> 00:03:59.075
I believe translate X, yeah,
to the right 50 pixels.

73
00:03:59.075 --> 00:04:01.685
It does so by also promoting
it to a separate layer, so

74
00:04:01.685 --> 00:04:05.052
it doesn't just repaint every time
it forwards to a separate layer.

75
00:04:05.052 --> 00:04:08.790
It can just move that layer on top of
it and then composite it back together.

76
00:04:08.790 --> 00:04:13.123
So it doesn't have to do any layout
because we're not changing any of

77
00:04:13.123 --> 00:04:17.980
the geometry of the elements that are on
that base layout if that makes sense,

78
00:04:17.980 --> 00:04:21.866
it just promotes it and
then they can just change that layer and

79
00:04:21.866 --> 00:04:24.805
then composite it back,
if that makes sense.

80
00:04:24.805 --> 00:04:27.931
Sorry, this one is only
composite because transform and

81
00:04:27.931 --> 00:04:30.873
translate X is one of those
accelerated properties.

82
00:04:30.873 --> 00:04:34.335
So if you ever wanna move an element
to the right or to the left,

83
00:04:34.335 --> 00:04:38.079
make sure to use translate X or
translate Y, or whatever you need.

84
00:04:38.079 --> 00:04:42.243
Because that makes sure that you're not
repainting, even though it's not every

85
00:04:42.243 --> 00:04:45.798
pixel, but if you were just to animate
this with a left or with a right,

86
00:04:45.798 --> 00:04:48.575
the browser wouldn't promoted
to a separate layer and

87
00:04:48.575 --> 00:04:51.931
then it would have to repaint
the animation every time relay out.

88
00:04:51.931 --> 00:04:55.527
This is just super expensive cuz that
all happens on the main thread, right?

89
00:04:55.527 --> 00:04:59.592
We saw with a task queue, it also has
the UI rendering all those things.

90
00:04:59.592 --> 00:05:04.288
So you don't want that cuz it's
all blocking the main thread.

91
00:05:04.288 --> 00:05:06.137
So yeah, that was the last one.

92
00:05:06.137 --> 00:05:06.857
Make sense?

93
00:05:06.857 --> 00:05:08.351
Questions?
No?

94
00:05:08.351 --> 00:05:09.555
Yeah, sorry.

95
00:05:09.555 --> 00:05:11.459
&gt;&gt; I have a question
about the opacity one.

96
00:05:11.459 --> 00:05:12.295
&gt;&gt; Yeah.

97
00:05:12.295 --> 00:05:17.454
&gt;&gt; I mean, I've seen in old code,
like using opacity to change a color,

98
00:05:17.454 --> 00:05:21.571
if it was black,
somebody would say, opacity 80%.

99
00:05:21.571 --> 00:05:22.442
Make it like grayer.

100
00:05:22.442 --> 00:05:24.019
That's a really bad way to do it now.

101
00:05:24.019 --> 00:05:26.296
&gt;&gt; Yeah, well, I mean, you can do it.

102
00:05:26.296 --> 00:05:28.387
If you don't animate it, it's fine.

103
00:05:28.387 --> 00:05:30.090
If you just use an opacity,

104
00:05:30.090 --> 00:05:33.876
it won't create a separate layer
just to show that opacity.

105
00:05:33.876 --> 00:05:36.098
This is more about animating the opacity.

106
00:05:36.098 --> 00:05:40.017
So during the animation, it will create
a new layer and after the animation,

107
00:05:40.017 --> 00:05:42.080
it usually gets rid of that layer again.

108
00:05:42.080 --> 00:05:47.807
Yeah, okay, I don't wanna spoil the next,
but you can also use the will-change

109
00:05:47.807 --> 00:05:53.545
opacity, and in that case it will always
create a new layer just for that element.

110
00:05:53.545 --> 00:05:56.892
But that wouldn't make sense
if you're not animating it.

111
00:05:56.892 --> 00:06:01.668
Because it could have just eventually be
composited back onto the the same layer if

112
00:06:01.668 --> 00:06:03.200
you're not changing it.

113
00:06:03.200 --> 00:06:06.003
So then you're just consuming memory for
no reason.

114
00:06:06.003 --> 00:06:09.213
But you can still do, I mean,
using opacity to like make it gray.

115
00:06:09.213 --> 00:06:10.558
Honestly, I do that as well.

116
00:06:10.558 --> 00:06:13.873
I don't care if it looks gray,
so it's fine.

117
00:06:13.873 --> 00:06:18.743
But yeah, then it just creates a layer but
only during the very first composite and

118
00:06:18.743 --> 00:06:21.297
you won't see that layer in your browser.

119
00:06:21.297 --> 00:06:24.067
So FYI, if you open dev tools in Chrome,

120
00:06:24.067 --> 00:06:27.748
there is a setting where you
can actually see layers.

121
00:06:27.748 --> 00:06:28.377
And I think,

122
00:06:28.377 --> 00:06:31.879
maybe after this I can also just show
you because it's a pretty fun tool.

123
00:06:31.879 --> 00:06:36.588
And you might be pretty surprised at
just how many layers some websites have.

124
00:06:36.588 --> 00:06:37.821
I can show Google.

125
00:06:37.821 --> 00:06:41.647
Yeah, I don't have anything that there,
all right so,

126
00:06:41.647 --> 00:06:46.113
you can see layers for example and
I'm pretty sure that Google AI,

127
00:06:46.113 --> 00:06:50.760
here you can see the different layers and
you can kind of move around.

128
00:06:50.760 --> 00:06:54.989
You see all the different
layers created here.

129
00:06:54.989 --> 00:06:57.120
These are all the layers
are not going to see that.

130
00:06:57.120 --> 00:07:00.519
So here you can also see why,
you see the compositing reasons,

131
00:07:00.519 --> 00:07:04.450
you see layer for link, highlight,
frame, overlay, all that stuff.

132
00:07:04.450 --> 00:07:10.009
You have like scrollable stuff, secondary
layer, they always give you a reason.

133
00:07:10.009 --> 00:07:13.352
I frames also get their own layer,
but you also see the memory estimate.

134
00:07:13.352 --> 00:07:17.494
So, for one layer, this is 7.2 megabytes,
and for this one is also 7.2.

135
00:07:17.494 --> 00:07:20.187
This is 1644 KB, all that kind of stuff.

136
00:07:20.187 --> 00:07:23.633
So this is why it's important to ensure
that you don't create too many layers cuz

137
00:07:23.633 --> 00:07:26.078
they all consume memory and
you don't always need that.

