WEBVTT

1
00:00:00.410 --> 00:00:02.305
Ready for question number 10.

2
00:00:02.305 --> 00:00:05.018
When animating the following properties,

3
00:00:05.018 --> 00:00:08.177
which have the correctly
listed rendering costs?

4
00:00:08.177 --> 00:00:12.780
Is it width with layout, paint, and
composite, opacity with paints and

5
00:00:12.780 --> 00:00:17.310
composite, background image with
just composite, left with layout,

6
00:00:17.310 --> 00:00:21.414
paint, and composite, or
transform with paint and composite?

7
00:00:21.414 --> 00:00:24.562
Also just remember that you can
select multiple if you want.

8
00:00:24.562 --> 00:00:28.370
[LAUGH] And
also this is just kind of the default.

9
00:00:28.370 --> 00:00:31.779
It can be a little different sometimes
in browsers, depending on stuff, but

10
00:00:31.779 --> 00:00:32.573
yeah, default.

11
00:00:36.041 --> 00:00:38.870
All right, let's look at the answer.

12
00:00:38.870 --> 00:00:43.291
So the only right ones are A with width,
layout, paint, and composite, and

13
00:00:43.291 --> 00:00:46.299
D with left, also layout,
paint, and composite.

14
00:00:46.299 --> 00:00:47.469
So the correct, oops,

15
00:00:47.469 --> 00:00:50.636
the correct one would've been
the opacity was only composite.

16
00:00:50.636 --> 00:00:53.300
background-image should have
been paint and composite.

17
00:00:53.300 --> 00:00:54.938
I don't know why that wasn't listed.

18
00:00:54.938 --> 00:00:55.741
Here it's listed.

19
00:00:55.741 --> 00:00:57.600
And transform is only composite.

20
00:00:57.600 --> 00:00:58.435
Sorry, so this one's wrong.

21
00:00:58.435 --> 00:01:02.570
Background image should also
include the paint, but yeah.

22
00:01:02.570 --> 00:01:05.959
So first, let's go to the width.

23
00:01:05.959 --> 00:01:09.228
So when we're changing the width,
maybe on hover,

24
00:01:09.228 --> 00:01:12.273
we wanna go from 200 pixels to 300 pixels,

25
00:01:12.273 --> 00:01:17.579
the browser first has to calculate kind of
geometry of the new sizes of the elements.

26
00:01:17.579 --> 00:01:20.127
Cuz it might also affect the other
elements on the screen when we're

27
00:01:20.127 --> 00:01:21.370
changing the width.

28
00:01:21.370 --> 00:01:24.234
So in that case, it has to
calculate all the positions again.

29
00:01:24.234 --> 00:01:27.563
In that case, it, of course, has to paint
it because we just changed the width.

30
00:01:27.563 --> 00:01:31.346
And finally, it always has to
composite the layers together again.

31
00:01:31.346 --> 00:01:33.865
Now, in this animation,
it's a bit more dramatic.

32
00:01:33.865 --> 00:01:38.541
Browsers are very smart in optimizing
to only repaint the parts that

33
00:01:38.541 --> 00:01:41.832
are affected by it,
not the entire page again.

34
00:01:41.832 --> 00:01:46.320
But yeah, changing any sizes will
always cause a layout change.

35
00:01:46.320 --> 00:01:52.270
And then always a paint and composite
as well, cuz it's kinda a pipeline.

36
00:01:52.270 --> 00:01:55.870
When we change the opacity,
we only have to composite.

37
00:01:55.870 --> 00:02:01.142
So opacity is one of those fun GPU
accelerated properties where a browser

38
00:02:01.142 --> 00:02:06.503
will actually create or kind of promote
that element to a separate layer,

39
00:02:06.503 --> 00:02:08.589
a separate graphics layer.

40
00:02:08.589 --> 00:02:12.317
And when changing the opacity, what it can
do is it can just change, I think, it's

41
00:02:12.317 --> 00:02:16.120
called the alpha channel on a graphics
layer, I'm not into graphics at all.

42
00:02:16.120 --> 00:02:18.650
But basically it's what it does,
it can just change the layer's opacity.

43
00:02:18.650 --> 00:02:22.560
Not the entire layout, not the element
itself within that same layout.

44
00:02:22.560 --> 00:02:24.680
It can just change the layer's opacity.

45
00:02:24.680 --> 00:02:27.864
So it only has to change the opacity
during that composite phase.

46
00:02:27.864 --> 00:02:28.717
So it doesn't have to do anything.

47
00:02:28.717 --> 00:02:31.029
It doesn't have to repaint,
it doesn't have to layout,

48
00:02:31.029 --> 00:02:33.166
cuz we're not changing width or
height or anything.

49
00:02:33.166 --> 00:02:34.830
And we're also not changing the pixels.

50
00:02:34.830 --> 00:02:37.567
It's just changing the opacity
in that browser layer.

51
00:02:37.567 --> 00:02:42.416
We'll talk a bit more about the GPU
accelerated properties soon

52
00:02:42.416 --> 00:02:46.200
to see what other values
kind of work the same way.

53
00:02:46.200 --> 00:02:49.089
It's also important to
remember that in some cases,

54
00:02:49.089 --> 00:02:53.709
browsers might not create a separate layer
for opacity if we're not animating it, or

55
00:02:53.709 --> 00:02:56.661
if they think, okay,
it doesn't really make sense,

56
00:02:56.661 --> 00:03:00.607
cuz creating a different layer
consumes memory, kinda consumes data.

57
00:03:00.607 --> 00:03:04.224
So you kinda wanna minimize the amount of
layers that you have in an application.

58
00:03:04.224 --> 00:03:07.244
But when changing it, when hovering it,
it's first grade separate layer,

59
00:03:07.244 --> 00:03:09.623
compositive back, and
then it can just be on the same layer.

60
00:03:09.623 --> 00:03:12.377
So yeah, it's just for the animation.

61
00:03:12.377 --> 00:03:16.644
Anyway, moving on to background-image, so
this one requires a paint and a composite.

62
00:03:16.644 --> 00:03:19.284
So it doesn't need layout because
we're not changing width, height,

63
00:03:19.284 --> 00:03:21.190
we're not changing anything there.

64
00:03:21.190 --> 00:03:24.810
But it does have to repaint the pixels
to have that background image.

65
00:03:24.810 --> 00:03:27.500
So this does require a paint,
and then of course,

66
00:03:27.500 --> 00:03:31.805
always a composite to get all those layers
back together into one single image.

67
00:03:34.048 --> 00:03:37.671
And then we have left, which does affect
the layout, like we were changing,

68
00:03:37.671 --> 00:03:40.650
not necessarily the geometry,
we've changed the position.

69
00:03:40.650 --> 00:03:43.750
So it might also alter the position
of other elements on the page.

70
00:03:43.750 --> 00:03:47.868
So the browser has to ensure that it
knows where the other elements go when

71
00:03:47.868 --> 00:03:48.820
changing left.

72
00:03:49.940 --> 00:03:51.423
So this does require a layout, and

73
00:03:51.423 --> 00:03:53.650
then eventually a paint
to repaint those pixels.

74
00:03:53.650 --> 00:03:58.527
Again, this is a more dramatic one,
it does this in a very optimized way, and

75
00:03:58.527 --> 00:04:02.668
then compositing the layers back
together into the final image.

76
00:04:02.668 --> 00:04:05.670
And then finally, transform is also
one of those GPU-accelerated ones.

77
00:04:05.670 --> 00:04:11.390
So when we transform, for example,
we wanna move the elements to the right,

78
00:04:11.390 --> 00:04:15.890
I believe, translateX, yeah,
to the right 50 pixels.

79
00:04:15.890 --> 00:04:18.800
It does so
by also promoting it to a separate layer.

80
00:04:18.800 --> 00:04:21.664
So it doesn't just repaint every time
it forwards to a separate layer.

81
00:04:21.664 --> 00:04:25.600
It can just move that layer on top of
it and then composite it back together.

82
00:04:25.600 --> 00:04:29.412
So it doesn't have to do any layout
because we're not changing any of

83
00:04:29.412 --> 00:04:33.834
the geometry of the elements that are on
that base layout, if that makes sense.

84
00:04:33.834 --> 00:04:38.203
It just promotes it and
then they can just change that layer and

85
00:04:38.203 --> 00:04:41.492
then compositive back,
if that makes sense.

86
00:04:41.492 --> 00:04:44.423
So this is only composite
because transform and

87
00:04:44.423 --> 00:04:47.580
translateX is one of those
accelerated property.

88
00:04:47.580 --> 00:04:50.840
So if you ever wanna move an element
to the right or to the left,

89
00:04:50.840 --> 00:04:54.919
make sure to use like translateX or
translateY, whatever you need, because

90
00:04:54.919 --> 00:04:59.590
that makes sure that you're not repainting
every, even though it's not every pixel.

91
00:04:59.590 --> 00:05:02.530
But if you were just to animate
this with a left or with a right,

92
00:05:02.530 --> 00:05:05.305
the browser wouldn't promote
it to a separate layer, and

93
00:05:05.305 --> 00:05:08.690
then it would have to repaint
the animation every time, re-layout.

94
00:05:08.690 --> 00:05:12.290
This is just super expensive, cuz that
all happens on the main thread, right?

95
00:05:12.290 --> 00:05:16.390
We saw with the task queue, it also has
the UI rendering, all those things.

96
00:05:16.390 --> 00:05:20.839
So you don't want that,
cuz it's all blocking the main thread.

97
00:05:20.839 --> 00:05:22.889
Yeah, that was the last one.

98
00:05:22.889 --> 00:05:23.632
Make sense?

99
00:05:23.632 --> 00:05:24.330
Questions?

100
00:05:24.330 --> 00:05:26.227
[LAUGH] Yeah, what's that?

101
00:05:26.227 --> 00:05:28.190
&gt;&gt; I have a question
about the opacity one,

102
00:05:28.190 --> 00:05:30.033
&gt;&gt; Yeah.

103
00:05:30.033 --> 00:05:34.977
&gt;&gt; I mean, I've seen in old code,
using opacity to change a color.

104
00:05:34.977 --> 00:05:38.962
If it was black, somebody would say
opacity, 80%, and make it grayer.

105
00:05:38.962 --> 00:05:40.620
That's a really bad way to do it now.

106
00:05:40.620 --> 00:05:41.894
&gt;&gt; Yeah, well, I mean, you can do it.

107
00:05:41.894 --> 00:05:45.295
If you don't animate it, it's fine.

108
00:05:45.295 --> 00:05:46.905
If you just use an opacity,

109
00:05:46.905 --> 00:05:50.484
it won't create a separate layer
just to show that opacity.

110
00:05:50.484 --> 00:05:52.880
This is more about animating the opacity.

111
00:05:52.880 --> 00:05:55.100
So during the animation,
it will create a new layer.

112
00:05:55.100 --> 00:05:59.830
And after the animation, it usually gets
rid of that layer again, unless you,

113
00:05:59.830 --> 00:06:03.005
yeah, okay,
I don't wanna spoil the next part, but

114
00:06:03.005 --> 00:06:05.940
you can also use the will change opacity.

115
00:06:05.940 --> 00:06:09.856
And in that case, it will always create
a new layer just for that elements,

116
00:06:09.856 --> 00:06:13.530
but that wouldn't make sense
if you're not animating it.

117
00:06:13.530 --> 00:06:18.152
Because it could have just eventually be
composited back onto the same layer if

118
00:06:18.152 --> 00:06:20.010
you're not changing it.

119
00:06:20.010 --> 00:06:22.847
So then you're just consuming memory for
no reason, but

120
00:06:22.847 --> 00:06:27.179
you can still do, I mean, using opacity to
make it gray, honestly, I do that as well.

121
00:06:27.179 --> 00:06:30.507
[LAUGH] I don't care,
it looks gray, so it's fine.

122
00:06:30.507 --> 00:06:35.383
But yeah, then it just creates a layer,
but only during the very first composite,

123
00:06:35.383 --> 00:06:38.110
and you won't see that
layer in your browser.

124
00:06:38.110 --> 00:06:41.192
So, yeah, FYI,
If you open dev tools in Chrome,

125
00:06:41.192 --> 00:06:44.209
there is a setting where you
can actually see layers.

126
00:06:44.209 --> 00:06:48.505
And I think maybe after this, I can also
just show you because it's a pretty fun

127
00:06:48.505 --> 00:06:53.014
tool and you might be pretty surprised at
just how many layers some websites have.

128
00:06:53.014 --> 00:06:58.325
I can show Google, yeah,
I don't have anything bad there.

129
00:06:58.325 --> 00:07:02.954
All right, so you can see Layers, for
example, and I'm pretty sure that Google,

130
00:07:02.954 --> 00:07:07.605
all right, here, you can see the different
layers and you can kind of move around.

131
00:07:07.605 --> 00:07:09.391
You see all the different
layers created here.

132
00:07:09.391 --> 00:07:13.945
[SOUND] These are all the layers,
I don't know if you can see that.

133
00:07:13.945 --> 00:07:15.351
So here, you can also see why.

134
00:07:15.351 --> 00:07:16.995
You see the compositing reasons.

135
00:07:16.995 --> 00:07:21.101
You see layer for link, highlight,
frame, overlay, all that stuff.

136
00:07:21.101 --> 00:07:23.395
You have scrollable stuff.

137
00:07:23.395 --> 00:07:26.610
Secondary layer, I don't know,
did I always give you reason?

138
00:07:26.610 --> 00:07:28.550
iframes also get their own layer.

139
00:07:28.550 --> 00:07:30.130
But you also see the memory estimate.

140
00:07:30.130 --> 00:07:33.948
So for one layer, this is 7.2 megabytes,
and for this one, it's also 7.2.

141
00:07:33.948 --> 00:07:36.743
This is 16.4 kilobytes,
all that kinda stuff.

142
00:07:36.743 --> 00:07:40.077
So this is why it's important to ensure
that you don't create too many layers,

143
00:07:40.077 --> 00:07:42.634
cuz they all consume memory and
you don't always need that.

