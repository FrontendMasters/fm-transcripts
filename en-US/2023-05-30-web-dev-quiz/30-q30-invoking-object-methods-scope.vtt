WEBVTT

1
00:00:00.000 --> 00:00:02.065
Let's talk about CORS.

2
00:00:02.065 --> 00:00:04.902
What's true about
the following CORS config?

3
00:00:04.902 --> 00:00:06.561
A preflight request is required.

4
00:00:06.561 --> 00:00:10.705
Only requests from
HTTPSwww.thewebsite.com are allowed.

5
00:00:10.705 --> 00:00:12.669
Requests with cookies are allowed.

6
00:00:12.669 --> 00:00:16.011
The actual response is cached for
600 milliseconds.

7
00:00:16.011 --> 00:00:18.908
X custom header will be the only
included response header.

8
00:00:18.908 --> 00:00:22.545
Or getPostPatchInput methods
are allowed but not delete

9
00:00:26.443 --> 00:00:30.400
So the only right answer here
is only requests from HTTPS,

10
00:00:30.400 --> 00:00:32.999
www.thewebsite.com are allowed.

11
00:00:32.999 --> 00:00:34.881
So first let's just talk about CORS.

12
00:00:34.881 --> 00:00:37.876
It's always kind of annoying, but
actually before we talk about CORS,

13
00:00:37.876 --> 00:00:39.756
let's talk about the same-origin policy.

14
00:00:39.756 --> 00:00:43.917
So by default you know that our
browsers implement something called

15
00:00:43.917 --> 00:00:48.303
the same-origin policy,
which prevents any cross origin requests.

16
00:00:48.303 --> 00:00:52.706
But that's just not how the web works,
we need to fetch resources or

17
00:00:52.706 --> 00:00:55.487
use resources from other origins as well,

18
00:00:55.487 --> 00:01:00.213
otherwise you're just be stuck with
your own resources the whole time.

19
00:01:00.213 --> 00:01:04.180
So CORSis actually an extension
of that same origin policy,

20
00:01:04.180 --> 00:01:08.476
but instead it allows you to do
cross-origin resource sharing.

21
00:01:08.476 --> 00:01:11.070
So it actually allows you to
do it instead of restricts it.

22
00:01:11.070 --> 00:01:14.283
So in this case, we're making
a cross-origin request, right?

23
00:01:14.283 --> 00:01:18.203
We're going from website.com
to api.other.com/posts, and

24
00:01:18.203 --> 00:01:20.655
with CORS it also adds the origin header.

25
00:01:20.655 --> 00:01:24.942
So this request came from www.website.com.

26
00:01:24.942 --> 00:01:29.863
And the server if it has the CORS headers
kind of configuration will then respond if

27
00:01:29.863 --> 00:01:32.875
it has CORS with the access
control allow origin.

28
00:01:32.875 --> 00:01:36.179
And this header essentially says okay,
this is fine.

29
00:01:36.179 --> 00:01:37.509
Responses are allowed or

30
00:01:37.509 --> 00:01:41.635
requests from this origin are allowed
to read the resource I'm sending you.

31
00:01:41.635 --> 00:01:45.462
So of course, it kinda has a checklist and
a browser is like okay,

32
00:01:45.462 --> 00:01:49.583
does the access control allow origin
match the origin of the request?

33
00:01:49.583 --> 00:01:51.859
And in this case it does, right?

34
00:01:51.859 --> 00:01:54.699
Like the origins match.

35
00:01:54.699 --> 00:01:58.172
So now the resource is allowed
to be accessed by the browser.

36
00:01:58.172 --> 00:02:01.865
If it was different, like if
the access control at origin just said,

37
00:02:01.865 --> 00:02:05.944
okay site could access these resources,
then it would have been blocked and

38
00:02:05.944 --> 00:02:09.018
we don't have access to these
resources in the browser.

39
00:02:09.018 --> 00:02:13.539
So it's important to remember that CORS is
in your browsers and your user agent is

40
00:02:13.539 --> 00:02:18.124
not on the server, it's just a browser
security feature that makes sure that when

41
00:02:18.124 --> 00:02:22.311
you're fetching a resource or doing
anything it's from a secure origin or

42
00:02:22.311 --> 00:02:25.725
they allow that response to be read,
does that makes sense?

43
00:02:25.725 --> 00:02:28.882
So the server still processes
the entire get request or

44
00:02:28.882 --> 00:02:30.877
the post request stuff like that.

45
00:02:30.877 --> 00:02:33.696
We have many other like course headers,
right?

46
00:02:33.696 --> 00:02:37.273
So for example allows access
control allow methods gets,

47
00:02:37.273 --> 00:02:39.974
in this case we are sending
in get request and

48
00:02:39.974 --> 00:02:44.440
that is allowed by the course policy
on the server, so that's all good.

49
00:02:44.440 --> 00:02:48.644
But if we're sending a post and
the control out method still gets,

50
00:02:48.644 --> 00:02:50.604
then that request would fail.

51
00:02:50.604 --> 00:02:53.808
Or if the request would still go right,
but

52
00:02:53.808 --> 00:02:58.269
the browser would block you
from accessing that resource.

53
00:02:58.269 --> 00:03:01.445
So then there's something called a Simple
Request and a Preflighted Request.

54
00:03:01.445 --> 00:03:05.488
So in course, a simple request is any
request made with get, head, and post, and

55
00:03:05.488 --> 00:03:08.888
it just has either accept,
accept language, content language, or

56
00:03:08.888 --> 00:03:09.669
content type.

57
00:03:09.669 --> 00:03:13.251
If the request is just that, it's called
a simple request, and it doesn't require

58
00:03:13.251 --> 00:03:16.442
something called a preflighted request,
which we'll talk about later.

59
00:03:16.442 --> 00:03:20.158
But if anything is not that,
so like delete, put, patch, or

60
00:03:20.158 --> 00:03:24.818
any other of those course safe listed
headers, then it'll be preflighted.

61
00:03:24.818 --> 00:03:29.107
And essentially what that means is that
before sending the actual request,

62
00:03:29.107 --> 00:03:32.457
it'll send an options request
to the server saying, hey,

63
00:03:32.457 --> 00:03:37.147
I'm about to send this request from this
origin with this access control request,

64
00:03:37.147 --> 00:03:39.848
or with this method, so
in this case, delete.

65
00:03:39.848 --> 00:03:43.765
So it adds that to the access control
request method header on the preflight at

66
00:03:43.765 --> 00:03:44.314
request.

67
00:03:44.314 --> 00:03:48.768
And then the server's probably gonna be
like, well, don't even bother sending that

68
00:03:48.768 --> 00:03:52.015
because either my course
configuration doesn't allow that.

69
00:03:52.015 --> 00:03:56.691
So don't even send the original request
after sending a preflight at request,

70
00:03:56.691 --> 00:03:58.104
does that makes sense?

71
00:03:58.104 --> 00:04:02.822
So in this case, we're sending a delete,
which is not a simple request,

72
00:04:02.822 --> 00:04:04.353
has to be preflighted.

73
00:04:04.353 --> 00:04:07.102
So we first send the options
request with the origin and

74
00:04:07.102 --> 00:04:09.511
the access control request method for
delete.

75
00:04:09.511 --> 00:04:14.376
And then the server is like, well,
it sends no content, so 204 and

76
00:04:14.376 --> 00:04:17.352
it sends back its course headers, right?

77
00:04:17.352 --> 00:04:19.930
So it sends the Access-Control.origin but

78
00:04:19.930 --> 00:04:24.150
then it only has the access control
allow methods GET and POST not delete.

79
00:04:24.150 --> 00:04:29.889
So the actual delete requests will
never even be sent to the server.

80
00:04:29.889 --> 00:04:32.724
So yeah, the origin is locked but
the method isn't.

81
00:04:32.724 --> 00:04:36.657
Now, when we go back to the original
question, a preflight request is required.

82
00:04:36.657 --> 00:04:39.581
You cannot know that from
just this course config,

83
00:04:39.581 --> 00:04:41.692
it depends on the request coming in.

84
00:04:41.692 --> 00:04:44.714
If it's just a get request from
the origin from website.com,

85
00:04:44.714 --> 00:04:48.657
then a preflight request isn't required,
but if it's a delete, then it would.

86
00:04:48.657 --> 00:04:53.279
Yeah, only request from
\httpswww.website.com are allowed?

87
00:04:53.279 --> 00:04:57.499
Yes, because we have the access control
allow origin to have that specific domain

88
00:04:57.499 --> 00:05:00.325
as the allowed origin,
no other origins are allowed.

89
00:05:00.325 --> 00:05:02.328
Request with cookies
are allowed by default.

90
00:05:02.328 --> 00:05:06.840
No, unless we set the access
control allow credentials

91
00:05:06.840 --> 00:05:09.819
header on the course config as well.

92
00:05:09.819 --> 00:05:13.583
The actual response is cached for
600 milliseconds is false.

93
00:05:13.583 --> 00:05:18.278
The actual max-age that you see is just
how long it caches that preflight request

94
00:05:18.278 --> 00:05:19.875
response that we just saw.

95
00:05:19.875 --> 00:05:22.761
So it doesn't have to do that every time,
we can just say, okay,

96
00:05:22.761 --> 00:05:26.288
you can do it once and then just cache
that response for a while and that's fine.

97
00:05:26.288 --> 00:05:29.953
The X-Custom-Header is not
the only included response header.

98
00:05:29.953 --> 00:05:33.224
By default, you will also just
have the default response headers.

99
00:05:33.224 --> 00:05:38.141
But the exposed headers just allows
you to expose custom headers

100
00:05:38.141 --> 00:05:41.520
that aren't normally course safe listed.

101
00:05:41.520 --> 00:05:44.732
Yeah, I don't know,
if you need to use any custom header,

102
00:05:44.732 --> 00:05:48.995
you have to explicitly expose them,
otherwise the course records will fail.

103
00:05:48.995 --> 00:05:52.520
And GET, POST, PATCH and
PUT methods are allowed but not DELETE.

104
00:05:52.520 --> 00:05:56.469
That is false because we're allowing
all methods, we have the esterates,

105
00:05:56.469 --> 00:05:59.072
which just says like,
yeah, allow all methods.

106
00:05:59.072 --> 00:06:00.597
So DELETE is also allowed.

