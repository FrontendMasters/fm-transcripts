WEBVTT

1
00:00:00.220 --> 00:00:05.195
All right, this is the very last question,
but it's JavaScript, what gets logged?

2
00:00:05.195 --> 00:00:12.465
Is it A B B, B A A,
A undefined B, or B undefined B.

3
00:00:16.785 --> 00:00:18.755
All right, the right answer here is B.

4
00:00:18.755 --> 00:00:21.045
It's B A A.

5
00:00:21.045 --> 00:00:24.045
So first, let's just quickly
talk about the this keyword.

6
00:00:24.045 --> 00:00:28.534
Well, not fully, but for what matters now.

7
00:00:28.534 --> 00:00:30.665
So the this keyword
with regular functions,

8
00:00:30.665 --> 00:00:33.925
it kind of depends on where the function
lives or where it's called.

9
00:00:33.925 --> 00:00:36.515
When we just have a function
on the global scope,

10
00:00:36.515 --> 00:00:39.180
that this keyword will
refer to the global scope.

11
00:00:39.180 --> 00:00:43.512
But if we have it as a method of
an object, as a regular function,

12
00:00:43.512 --> 00:00:48.593
that this keyword will refer to the object
on which the function is called.

13
00:00:48.593 --> 00:00:53.016
So when we have this code block you
will see that foo on objA is a regular

14
00:00:53.016 --> 00:00:57.003
function, is just a regular method,
non-arrow function.

15
00:00:57.003 --> 00:01:02.243
So the this keyword here, that should
have been objA, [LAUGH] in the first one.

16
00:01:02.243 --> 00:01:04.012
Okay, let's not make it more confusing.

17
00:01:04.012 --> 00:01:08.512
You know what objA, like that.

18
00:01:08.512 --> 00:01:11.855
Because this is a regular function,
and this is a method on that object.

19
00:01:11.855 --> 00:01:17.498
Then we have foo on objB,
which is also a method

20
00:01:17.498 --> 00:01:23.158
because it has a reference
to a method on objA.

21
00:01:23.158 --> 00:01:25.108
But we'll talk more about that later.

22
00:01:25.108 --> 00:01:27.067
And then we have bar,
which is an arrow function.

23
00:01:27.067 --> 00:01:32.409
So this doesn't automatically bind
that this keyword to the objB object.

24
00:01:32.409 --> 00:01:35.019
Instead, it doesn't own this keyword.

25
00:01:35.019 --> 00:01:38.307
So it essentially uses this keyword
of its surrounding environments.

26
00:01:38.307 --> 00:01:40.455
And in this case, that is objB.

27
00:01:40.455 --> 00:01:43.587
This keyword an objB is the global scope.

28
00:01:43.587 --> 00:01:46.654
If that makes sense.

29
00:01:46.654 --> 00:01:51.547
So for bar within this keyword or within
bar that this keyword would have been

30
00:01:51.547 --> 00:01:55.827
the global scope or would have
referred to the global scope and in baz,

31
00:01:55.827 --> 00:01:59.055
which is just a normal method,
it refers to objB.

32
00:01:59.055 --> 00:02:03.590
Now when it comes to our answer,
let's see if I, okay, sorry,

33
00:02:03.590 --> 00:02:06.027
my presumed kind of goes weird here.

34
00:02:06.027 --> 00:02:08.423
I'll just go back.

35
00:02:08.423 --> 00:02:13.684
So, first we're calling objB.foo.

36
00:02:13.684 --> 00:02:19.035
And the foo property and objB is only
a reference to kind of the function

37
00:02:19.035 --> 00:02:24.582
objects on objA, but it's not actually
invoking object A's foo method.

38
00:02:24.582 --> 00:02:26.836
It's invoking the foo method on objB,

39
00:02:26.836 --> 00:02:30.261
cuz we're not actually invoking
it with two parentheses.

40
00:02:30.261 --> 00:02:33.408
So in that case it's still
just a regular function.

41
00:02:33.408 --> 00:02:36.903
It has the same reference
as that foo on objA, but

42
00:02:36.903 --> 00:02:41.266
it's not foo in objA,
cuz it's invoked in a different way.

43
00:02:41.266 --> 00:02:44.969
So within that one, this refers to objB.

44
00:02:44.969 --> 00:02:48.557
And then we have bar, which is an arrow
function, but it doesn't matter.

45
00:02:48.557 --> 00:02:52.229
All that matters here is that
we're invoking the method on objA.

46
00:02:52.229 --> 00:02:55.781
We are directly invoking foo
with a parenthesis and objA.

47
00:02:55.781 --> 00:02:59.218
And since this is a method
on the object objA,

48
00:02:59.218 --> 00:03:04.108
this keyword in that foo refers to objA,
so this type returns A.

49
00:03:04.108 --> 00:03:06.146
And then we have baz,
which is a regular method.

50
00:03:06.146 --> 00:03:09.246
So if we were to log the this
keyword within that baz method,

51
00:03:09.246 --> 00:03:10.492
it would refer to objB.

52
00:03:10.492 --> 00:03:14.898
But that's not what we're doing,
we're invoking the foo method on objA.

53
00:03:14.898 --> 00:03:17.597
So that's why, again, this also logs A.

54
00:03:17.597 --> 00:03:22.943
So yeah, the big difference here is that
just referencing or creating a method

55
00:03:22.943 --> 00:03:28.619
we're doing here with foo to objectA.foo
doesn't invoke the method on objectA.

56
00:03:28.619 --> 00:03:32.581
It's just kind of referencing
the same function object, but

57
00:03:32.581 --> 00:03:35.335
not its invocation, if that makes sense.

58
00:03:35.335 --> 00:03:39.591
So the invocation of the function
object still happens on objB, and

59
00:03:39.591 --> 00:03:42.662
that's where functions
get this keyword from.

60
00:03:42.662 --> 00:03:46.656
Whenever it creates the execution
context for that function,

61
00:03:46.656 --> 00:03:49.379
it checks what the this keyword should be.

62
00:03:49.379 --> 00:03:51.061
So yeah,
that's just something to keep in mind.

63
00:03:51.061 --> 00:03:54.684
Regular functions there that this keyword
always depends on, where you call it,

64
00:03:54.684 --> 00:03:57.425
how you call it, you can add,
apply, call, all that stuff.

65
00:03:57.425 --> 00:04:02.279
Arrow functions do not have their
own this keyword they always inherit

66
00:04:02.279 --> 00:04:06.406
it from their outer environment,
from their outer scope.

67
00:04:06.406 --> 00:04:10.191
Yeah [LAUGH] anyway, that was question 30.

68
00:04:10.191 --> 00:04:11.637
Thanks so much.

69
00:04:11.637 --> 00:04:14.864
&gt;&gt; [APPLAUSE]

