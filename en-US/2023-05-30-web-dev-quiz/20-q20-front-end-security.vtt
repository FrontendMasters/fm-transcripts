WEBVTT

1
00:00:00.170 --> 00:00:01.920
Connect the terms with their definitions.

2
00:00:01.920 --> 00:00:07.032
XSS or cross-site scripting, CSRF or,
yeah, UI Redressing, man in the middle,

3
00:00:07.032 --> 00:00:12.072
and allows attackers to inject malicious
scripts into web pages viewed by others,

4
00:00:12.072 --> 00:00:16.500
tricks users in interacting with
disguised or hidden elements.

5
00:00:16.500 --> 00:00:19.692
Tricks users into executing unwanted
actions by exploiting their

6
00:00:19.692 --> 00:00:22.713
authenticated session, or
allows attackers to intercept and

7
00:00:22.713 --> 00:00:26.081
modify communication between two
parties without their knowledge.

8
00:00:30.285 --> 00:00:33.497
All right, so
the answer is cross-site scripting

9
00:00:33.497 --> 00:00:38.465
allows attackers to inject malicious
script into web pages viewed by others.

10
00:00:38.465 --> 00:00:42.568
Cross-site request forgery tricks users
into executed unwanted actions by

11
00:00:42.568 --> 00:00:45.260
exploiting their authenticated session.

12
00:00:45.260 --> 00:00:48.957
UI Redressing, is also called
clickjacking, tricks users in interacting

13
00:00:48.957 --> 00:00:52.710
with disguised or hidden elements, and
man in the middle allows attackers to

14
00:00:52.710 --> 00:00:56.830
intercept and modify communication between
two parties without their knowledge.

15
00:00:58.510 --> 00:01:02.729
So first for cross-site scripting
just to give a small example, for

16
00:01:02.729 --> 00:01:06.658
example you have a blog post editor and
you wanna show people when

17
00:01:06.658 --> 00:01:10.461
they're writing you wanna show
a live preview I don't know.

18
00:01:10.461 --> 00:01:15.173
But you're using the unsafe innerHTML for
that now in this case it's fine but

19
00:01:15.173 --> 00:01:18.872
maybe if a user adds like this image,
which isn't working,

20
00:01:18.872 --> 00:01:21.720
we're not pointing to any src.

21
00:01:21.720 --> 00:01:25.407
But we also have an on error function,
which fetches or

22
00:01:25.407 --> 00:01:28.345
makes a post request to this evil API.

23
00:01:28.345 --> 00:01:31.156
But because we're actually
embedding this image into the HTML,

24
00:01:31.156 --> 00:01:32.975
it has access to the documents cookies.

25
00:01:32.975 --> 00:01:37.610
So now it can just make that request
to this evil API with the cookie

26
00:01:37.610 --> 00:01:41.530
that was currently stored on a document.

27
00:01:41.530 --> 00:01:45.800
Now there are pretty, you just have
to sanitize your input always.

28
00:01:45.800 --> 00:01:50.432
You have to avoid using unsafe methods
like innerHTML, document.write, eval,

29
00:01:50.432 --> 00:01:51.750
all the good things.

30
00:01:51.750 --> 00:01:55.022
Normally, when you're using a framework,
they help you with that,

31
00:01:55.022 --> 00:01:59.190
if you're using React, they actually say
dangerouslySetInnerHTML, all that stuff.

32
00:02:01.010 --> 00:02:03.030
Yeah, anyway,
that's cross-site scripting, kind of.

33
00:02:03.030 --> 00:02:06.330
And then there,
we have the cross-site request forgery.

34
00:02:06.330 --> 00:02:09.860
So in this case, let's say that you're
just logging into your bank, as always,

35
00:02:09.860 --> 00:02:13.340
but your bank doesn't really, I don't
know, think about security too much.

36
00:02:13.340 --> 00:02:15.457
So it's setting a cookie on this,

37
00:02:15.457 --> 00:02:18.600
well not just on this website
it just sets a cookie.

38
00:02:18.600 --> 00:02:21.499
So now, I don't know if your friend's
suddenly, hey, check out this site but

39
00:02:21.499 --> 00:02:22.812
it still has access to that cookie.

40
00:02:22.812 --> 00:02:27.795
And this site may be or, it has an onload
function that basically submits

41
00:02:27.795 --> 00:02:30.255
a form as soon as the body is loaded.

42
00:02:30.255 --> 00:02:32.910
But this form makes a post
request to your bank's API but

43
00:02:32.910 --> 00:02:34.605
because your cookie is still set and

44
00:02:34.605 --> 00:02:38.465
they didn't really set it securely that
website also has access to that cookie.

45
00:02:38.465 --> 00:02:44.255
So now it can just make a request to
your website, pretending to be you.

46
00:02:44.255 --> 00:02:49.865
So one way to avoid that is by using a
CSRF token, which can be kind of anything.

47
00:02:49.865 --> 00:02:52.912
But it should just be just
that user has that token, and

48
00:02:52.912 --> 00:02:54.575
the server knows that token.

49
00:02:54.575 --> 00:02:58.587
So it knows when a request comes in from
that user, the server can decode that CSRF

50
00:02:58.587 --> 00:03:02.300
token to ensure that's actually
the user making that request.

51
00:03:02.300 --> 00:03:04.969
So in this case,
maybe we're setting a same site cookie,

52
00:03:04.969 --> 00:03:07.911
which is a cookie that will only
be accessible on that same site so

53
00:03:07.911 --> 00:03:09.880
only bank.com has access to that cookie.

54
00:03:10.960 --> 00:03:14.409
So in this case, we can just make
a request but now when we actually go to

55
00:03:14.409 --> 00:03:19.010
that evil site, it won't have that CSRF
token, it will just have the user token.

56
00:03:19.010 --> 00:03:23.067
So now when we do make
a request to the website, it's,

57
00:03:23.067 --> 00:03:27.037
sorry my animations are all
over the place, yeah,

58
00:03:27.037 --> 00:03:32.170
it's just returns a forbidden
because the CSRF token is invalid.

59
00:03:32.170 --> 00:03:38.220
So this is kind of a way to I don't know,
avoid or prevents CSRF or the forgery.

60
00:03:39.620 --> 00:03:42.529
Yeah okay, so it does work when you do
have that token I don't know why I added

61
00:03:42.529 --> 00:03:43.870
an animation for that.

62
00:03:43.870 --> 00:03:47.760
But anyway, and then we have
UI Redressing or clickjacking.

63
00:03:47.760 --> 00:03:51.904
So let's say, or like this happens by
embedding an iframe so for example this

64
00:03:51.904 --> 00:03:56.730
bank iframe, that's kind of that blurred
out one and then we have this evil site.

65
00:03:56.730 --> 00:04:01.533
But what they do is they kind of overlap
the website with an iframe that you

66
00:04:01.533 --> 00:04:03.040
won't be able to see.

67
00:04:03.040 --> 00:04:07.191
So they just make it opacity zero, this
make it out, so now when you think you're

68
00:04:07.191 --> 00:04:11.347
winning a cool prize, you're actually
clicking on the transfer money button,

69
00:04:11.347 --> 00:04:13.445
because that is an iframe on top of that.

70
00:04:14.605 --> 00:04:19.449
So now it makes a request to your bank and
if you, initially when that's an iframe

71
00:04:19.449 --> 00:04:24.224
for bank.com, it has that cookie in
that iframe because it's still bank.com

72
00:04:24.224 --> 00:04:27.520
it's still that origin so
it's making that request.

73
00:04:27.520 --> 00:04:32.018
We'll talk more about how browsers kind of
prevent this later on, but yeah that is

74
00:04:32.018 --> 00:04:36.400
UI Redressing or clickjacking which can
still happen when embedding iframes.

75
00:04:38.180 --> 00:04:41.745
And also, as a website owner,
you can prevent other websites from

76
00:04:41.745 --> 00:04:45.610
embedding your iframe by setting
the X-Frame-Options header.

77
00:04:45.610 --> 00:04:50.643
So that just ensures that evil
websites cannot embed your website

78
00:04:50.643 --> 00:04:55.869
into their website,
potentially causing clickjacking attacks.

79
00:04:56.880 --> 00:05:00.550
And then there's man in the middle I
mean this is kind of a different type

80
00:05:00.550 --> 00:05:01.170
of attack.

81
00:05:01.170 --> 00:05:06.629
It's just client and server and a man in
the middle, I don't know why this is so

82
00:05:06.629 --> 00:05:11.780
aggressive, but it can kind of sit
maybe in a Wi-Fi router or something.

83
00:05:11.780 --> 00:05:14.840
And he just kind of sits in between the
communication between you and the server.

84
00:05:14.840 --> 00:05:19.830
So it can just read it, it can alter it,
it can do anything with it.

85
00:05:19.830 --> 00:05:22.420
Now, if you use HTTPS everything
will be encrypted, right?

86
00:05:22.420 --> 00:05:26.370
So they just cannot really see,
because HTTP normal is just plain text.

87
00:05:26.370 --> 00:05:29.470
So they can read everything they
can read your headers, your data.

88
00:05:29.470 --> 00:05:34.351
But if you're using HTTPS and he doesn't
have access to that secure to your

89
00:05:34.351 --> 00:05:38.960
tokens or certificates,
then it'll just be unreadable for them.

90
00:05:38.960 --> 00:05:41.810
So that's also a great way to avoid
that and why you should use HTTPS.

91
00:05:41.810 --> 00:05:45.240
I mean, there are still also
vulnerabilities with man in the middle

92
00:05:45.240 --> 00:05:49.290
attacks, even with HTTPS, but it's
definitely a lot harder for them to do so.

