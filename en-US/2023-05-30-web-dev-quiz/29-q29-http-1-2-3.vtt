WEBVTT

1
00:00:00.000 --> 00:00:03.223
This is another kinda networking thing,
promise this is the last one.

2
00:00:03.223 --> 00:00:04.149
What statements are correct?

3
00:00:04.149 --> 00:00:06.251
HTTP allows multiple requests and

4
00:00:06.251 --> 00:00:09.662
responses concurrently over
a single TCP connection.

5
00:00:09.662 --> 00:00:12.158
HTTP/3 can be used only with HTTPS.

6
00:00:12.158 --> 00:00:15.499
HTTP/2 is backward
compatible with HTTP/1.1.

7
00:00:15.499 --> 00:00:18.961
Or HTTP/1.1 requires multiple
TCP connections to process

8
00:00:18.961 --> 00:00:21.056
multiple requests simultaneously.

9
00:00:24.511 --> 00:00:27.664
So the answer is all of them,
[LAUGH] all of them right.

10
00:00:27.664 --> 00:00:32.920
Okay, so first, let's go back all
the way in time when we had HTTP/1.0.

11
00:00:32.920 --> 00:00:36.940
And this HTTP always required a TCP
connection before any response or

12
00:00:36.940 --> 00:00:38.620
a request could get sent.

13
00:00:38.620 --> 00:00:42.950
So we always had to have the SYNs and ACKs
in before any requests get sent.

14
00:00:42.950 --> 00:00:46.700
So any file that you
requested needed that.

15
00:00:46.700 --> 00:00:51.100
Then there was HTTP/1.1, which
introduced the persistent connections.

16
00:00:51.100 --> 00:00:57.172
So multiple requests and responses could
be sent over the same TCP connection.

17
00:00:57.172 --> 00:01:00.304
Now, if you have a single connection,
resources always have to

18
00:01:00.304 --> 00:01:03.737
be delivered in full before it can
switch to sending the new response.

19
00:01:03.737 --> 00:01:08.154
So this kinda go head-of-line blocking,
which wasn't great because, yeah,

20
00:01:08.154 --> 00:01:11.810
it needed to wait for other responses
to resolve, stuff like that.

21
00:01:13.240 --> 00:01:17.039
So then there was HTTP/2, which
essentially allowed multiple requests and

22
00:01:17.039 --> 00:01:21.077
responses to be streamed over the same
TCP connection, but also simultaneously.

23
00:01:21.077 --> 00:01:24.400
So you could kinda parallelize
the requests and the responses.

24
00:01:26.080 --> 00:01:31.400
So this reduce latency and
just improve resource usage in general.

25
00:01:33.836 --> 00:01:36.977
Now, we have kind of a new
thing called HTTP/3.

26
00:01:36.977 --> 00:01:40.690
So this uses a new protocol called QUIC.

27
00:01:40.690 --> 00:01:44.549
So it's, I mean,
I think it was introduced in 2020, but

28
00:01:44.549 --> 00:01:50.120
it's already used by, I believe,
25% of browsers at the moment or websites.

29
00:01:50.120 --> 00:01:54.920
So it's quite a lot, but it kind of
gets rid of the entire TLS, or TCP and

30
00:01:54.920 --> 00:01:59.094
TLS, cuz that's all combined
in a new protocol called QUIC.

31
00:01:59.094 --> 00:02:02.220
It also, again,
has kind of streaming by default.

32
00:02:02.220 --> 00:02:05.920
So all the responses and requests can
just be parallelized all at once.

33
00:02:05.920 --> 00:02:10.382
So this could massively improve
your website's performance.

34
00:02:10.382 --> 00:02:14.701
But of course, it's up to your server
whether you implement HTTP 3 or not, and

35
00:02:14.701 --> 00:02:16.635
also, if the browser supports it,

36
00:02:16.635 --> 00:02:20.712
which at the moment, I'm not entirely
sure how many browsers support it.

37
00:02:20.712 --> 00:02:23.800
I think the majority does,
like newer, modern browsers.

38
00:02:23.800 --> 00:02:28.307
Yeah, so HTTP allows multiple requests
to be sent over a single TCP connection.

39
00:02:28.307 --> 00:02:31.224
That's right, as we just saw,
you can finally do that.

40
00:02:31.224 --> 00:02:33.182
HTTP/3 can only be used with HTTPS.

41
00:02:33.182 --> 00:02:37.251
And this is true, because that QUIC
protocol also has the TLS built-in.

42
00:02:37.251 --> 00:02:41.898
So the TLS is essentially what
establish that secure connection.

43
00:02:41.898 --> 00:02:44.049
With HTTP/2,
this wasn't necessarily required.

44
00:02:44.049 --> 00:02:47.579
You could also use it with HTTP,
but HTTP/3, you cannot do that.

45
00:02:47.579 --> 00:02:50.418
HTTP/2 is backward compatible,
yes, entirely.

46
00:02:50.418 --> 00:02:57.556
So you can serve your
website from HTTP/1.1 or 2.

47
00:02:57.556 --> 00:03:00.650
And 1.1 required multiple TCP
connections to process multiple requests

48
00:03:00.650 --> 00:03:01.430
simultaneously.

49
00:03:01.430 --> 00:03:03.284
That is true, at the same time,

50
00:03:03.284 --> 00:03:07.413
you cannot send multiple requests
at the same time with HTTP/1.1.

51
00:03:07.413 --> 00:03:10.794
I think you can with something called
like, is it called, not parallelizing,

52
00:03:10.794 --> 00:03:13.731
I don't know, something else,
but it wasn't entirely reliable.

53
00:03:13.731 --> 00:03:15.350
Not many people did that.

