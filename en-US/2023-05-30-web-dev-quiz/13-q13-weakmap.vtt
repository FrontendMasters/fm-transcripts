WEBVTT

1
00:00:00.000 --> 00:00:05.499
Alright what statements are true,
userTokenMap implements the iterator

2
00:00:05.499 --> 00:00:10.224
protocol, when setting user to
null userTokenMap returns zero.

3
00:00:10.224 --> 00:00:12.490
See if the user object is set to null,

4
00:00:12.490 --> 00:00:17.391
its userTokenMap entry can be garbage
collected or D, spreading the user token

5
00:00:17.391 --> 00:00:21.067
map in an array returns an array
of the userTokenMap's entries.

6
00:00:25.372 --> 00:00:31.917
All right, so the only correct answer is
C, if the user object is set to null,

7
00:00:31.917 --> 00:00:36.278
its userTokenMap entry
can be garbage collected.

8
00:00:36.278 --> 00:00:40.542
So let's take a look at what and
weak map, is which we've defined here.

9
00:00:40.542 --> 00:00:44.755
So first we have the userTokenMap, which
is a weak map it gets stored in the heap.

10
00:00:44.755 --> 00:00:46.852
And then we have the user Jane Doe age 24,

11
00:00:46.852 --> 00:00:50.180
also stored in heap referenced
from the global execution context.

12
00:00:50.180 --> 00:00:53.020
Then we set the userTokenMap,
we create an entry

13
00:00:53.020 --> 00:00:56.920
with the user object as its key and
like a secret token as its value.

14
00:00:56.920 --> 00:01:01.786
Now, the nice thing about weak maps is
that they actually reference that object,

15
00:01:01.786 --> 00:01:06.104
that we defined as the entry through
something called a weak reference.

16
00:01:06.104 --> 00:01:10.999
And, this only kind of makes sense
when we eventually delete the user, cuz

17
00:01:10.999 --> 00:01:13.418
now also the entry will be removed.

18
00:01:13.418 --> 00:01:16.740
So, when we compare this to a regular map,
so not a weak map.

19
00:01:16.740 --> 00:01:18.701
So now it's the exact same, but

20
00:01:18.701 --> 00:01:23.363
now you can see that it has a strong
reference to the user through that entry.

21
00:01:23.363 --> 00:01:28.840
So now if we were to delete that user,
that user object would still exist because

22
00:01:28.840 --> 00:01:33.854
as I talked about prior objects do
not get deleted or garbage collected.

23
00:01:33.854 --> 00:01:36.873
When there is still a reference from
the global to that object and in here,

24
00:01:36.873 --> 00:01:39.320
we still have a reference there
through the userTokenMap.

25
00:01:39.320 --> 00:01:41.443
So even though it's not
directly accessible,

26
00:01:41.443 --> 00:01:44.743
they're still like an indirect reference,
through the userTokenMap.

27
00:01:44.743 --> 00:01:48.644
So, this can be very useful in
the case of the weak map here,

28
00:01:48.644 --> 00:01:52.470
cuz maybe we just want to add
some attributes to an object,

29
00:01:52.470 --> 00:01:58.116
that shouldn't necessarily be part of the
object like in here, like a secret token.

30
00:01:58.116 --> 00:02:01.667
And we wanna make sure that
maybe when the user logs out,

31
00:02:01.667 --> 00:02:06.674
which somehow removes some kind of object
that we passed as a value to that map.

32
00:02:06.674 --> 00:02:11.609
That entry also gets removed, cuz
otherwise we just have all these objects

33
00:02:11.609 --> 00:02:16.385
in memory and this could create like
the object will not be able to get garbage

34
00:02:16.385 --> 00:02:18.997
collected resulting in a memory leak.

35
00:02:18.997 --> 00:02:21.325
And you sometimes see
this on like DOM nodes,

36
00:02:21.325 --> 00:02:23.968
like that's what a lot of
people use week maps for.

37
00:02:23.968 --> 00:02:28.535
Because we can add some attributes
to a DOM node, using a weak map.

38
00:02:28.535 --> 00:02:32.084
And then when the DOM node eventually
gets removed from the DOM,

39
00:02:32.084 --> 00:02:34.460
the entire entry doesn't exist anymore.

40
00:02:34.460 --> 00:02:39.510
But we can still access the the values
through the weak map, by getting like

41
00:02:39.510 --> 00:02:44.749
userTokenMap.get and then the user or
in that case the DOM attribute.

42
00:02:44.749 --> 00:02:47.794
Yeah, if it doesn't exist any more,
if it gets removed or

43
00:02:47.794 --> 00:02:51.037
in the case of the DOM it unmounts
then that's also just gone.

44
00:02:51.037 --> 00:02:53.776
There's no reference any more in memory,
so

45
00:02:53.776 --> 00:02:58.111
we're not causing that accidental
memory leak, if that makes sense.

46
00:02:58.111 --> 00:03:02.894
You also have like weak set, which
works in the same way it just uses like

47
00:03:02.894 --> 00:03:06.102
a weak reference to
the objects to ensure that.

48
00:03:06.102 --> 00:03:09.356
If it's not used anymore or
if it's removed,

49
00:03:09.356 --> 00:03:14.531
then just remove the object instead
of keeping that reference like here,

50
00:03:14.531 --> 00:03:18.213
in which case it doesn't get removed,
make sense?

51
00:03:18.213 --> 00:03:22.270
It's like pretty niche use cases for
weak maps, like, but yeah,

52
00:03:22.270 --> 00:03:27.276
it's very useful once you have a use case
for it, you're this makes total sense.

53
00:03:27.276 --> 00:03:30.696
In the case of maybe setting a token,
maybe authentication token,

54
00:03:30.696 --> 00:03:34.237
which probably you shouldn't store
in a week map is pretty insecure.

55
00:03:34.237 --> 00:03:41.381
But anything that should be removed
once an object has been removed as well.

56
00:03:41.381 --> 00:03:46.325
So you can only pass objects and I
believe functions as an entry to maps for

57
00:03:46.325 --> 00:03:47.307
that reason.

58
00:03:47.307 --> 00:03:50.102
Cuz it needs to be referenced and
strings numbers,

59
00:03:50.102 --> 00:03:54.010
any primitive data type is not
a reference, that's just copy memory.

