WEBVTT

1
00:00:00.000 --> 00:00:02.400
All right, Question 19.

2
00:00:02.400 --> 00:00:07.841
Which of the following values will
always make your page ineligible for

3
00:00:07.841 --> 00:00:10.477
bfcache or back/forward cache?

4
00:00:10.477 --> 00:00:15.162
Is it unload, pagehide, onbeforeunload,
pageshow, all of the above, or

5
00:00:15.162 --> 00:00:16.325
none of the above?

6
00:00:18.810 --> 00:00:22.831
All right, so
the only answer here is unload, A, okay?

7
00:00:22.831 --> 00:00:25.709
So first, what is bfcache or
back/forward cache?

8
00:00:25.709 --> 00:00:30.728
So let's say that we're on this page,
and now we navigate away to

9
00:00:30.728 --> 00:00:35.679
using ReactServer components to
another page or another link.

10
00:00:35.679 --> 00:00:40.440
In that case, what can happen is that the
browser optimizes the navigation by kind

11
00:00:40.440 --> 00:00:43.274
of, well,
we'll finish the call stack first.

12
00:00:43.274 --> 00:00:46.477
But it just creates a screenshot of
everything that happened on that

13
00:00:46.477 --> 00:00:47.158
page kind of.

14
00:00:47.158 --> 00:00:51.118
So any pending tasks will be paused,
you still have access to the heap,

15
00:00:51.118 --> 00:00:52.179
everything else.

16
00:00:52.179 --> 00:00:57.076
So now we navigate away, and it'll
store that in the back/forward cache.

17
00:00:57.076 --> 00:01:01.009
So now we're on that page again
using React Server components, but

18
00:01:01.009 --> 00:01:05.494
now when we go back, it doesn't have
to rebuild the DOM, rebuild the CSS, or

19
00:01:05.494 --> 00:01:06.676
make any requests.

20
00:01:06.676 --> 00:01:11.142
It just uses that snapshot that
it captured before leaving, and

21
00:01:11.142 --> 00:01:14.946
they can just resume any
task that was pending, well,

22
00:01:14.946 --> 00:01:20.175
that was running as we left, and
then it was paused when we navigated away.

23
00:01:20.175 --> 00:01:22.927
And then they can just
resume as we navigate back.

24
00:01:22.927 --> 00:01:26.271
And this allows for, especially a mobile,
you just go to a page and

25
00:01:26.271 --> 00:01:27.426
you wanna click back.

26
00:01:27.426 --> 00:01:31.999
You don't wanna have those annoying
loaders again, even though you were on

27
00:01:31.999 --> 00:01:36.510
the page half a second ago, it should
just remember the state of your page.

28
00:01:36.510 --> 00:01:39.879
I don't know if I'm explaining
what unload does, essentially, and

29
00:01:39.879 --> 00:01:42.461
it's not even a super reliable
method to use anyway.

30
00:01:42.461 --> 00:01:45.999
You should use pagehide in any
case you wanna use unload.

31
00:01:45.999 --> 00:01:49.967
But it kinda tells the browser,
well, after unloading, it should, or

32
00:01:49.967 --> 00:01:51.996
it could alter the state of the page.

33
00:01:51.996 --> 00:01:55.584
Which if you're caching it,
that shouldn't happen, it

34
00:01:55.584 --> 00:02:00.215
should just kind of rely that the cached
state is just what the page will be.

35
00:02:00.215 --> 00:02:03.495
But if you're using unload,
then you're kind of telling the browser,

36
00:02:03.495 --> 00:02:06.792
well, after unloading, the page
might change, so you can cache that.

37
00:02:06.792 --> 00:02:10.542
So if you're having or
if you use any unload event listeners,

38
00:02:10.542 --> 00:02:12.717
it will be ineligible for bfcache.

39
00:02:12.717 --> 00:02:17.189
Pagehide is fine,
onbeforeunload is fine on Chrome, but

40
00:02:17.189 --> 00:02:19.663
I believe it's not on Firefox.

41
00:02:19.663 --> 00:02:24.356
Also, back/forward cache,
it's been used by, I believe, Safari and

42
00:02:24.356 --> 00:02:28.534
Firefox for years now, but
only pretty recently came to Chrome.

43
00:02:28.534 --> 00:02:29.821
So that's why it's still kinda new.

44
00:02:29.821 --> 00:02:32.928
Even though it's not new technology,
it is kinda new there.

45
00:02:32.928 --> 00:02:37.479
So yeah, onbeforeunload is fine on Chrome,
but not on Firefox.

46
00:02:37.479 --> 00:02:43.267
Maybe I can quickly also show you,
you can check if your page is eligible.

47
00:02:43.267 --> 00:02:45.850
Let's see if I can just
find it this easily.

48
00:02:45.850 --> 00:02:51.015
I believe you go to Application, and
here you'll see back/forward cache.

49
00:02:51.015 --> 00:02:54.106
And here you can do test,
and this one isn't, but

50
00:02:54.106 --> 00:02:58.457
if I go to frontendmasters.com,
I don't know whether it's a .co.

51
00:02:58.457 --> 00:03:02.137
Here we can do test, it's not,
maybe you have a frame or something.

52
00:03:02.137 --> 00:03:07.123
So here you can see why a page is or
isn't eligible for a back/forward cache.

53
00:03:07.123 --> 00:03:09.282
So that's pretty cool,
cuz you kinda want it, right?

54
00:03:09.282 --> 00:03:15.224
I wanna go kind of, when I go back
you saw that it kinda took a while.

55
00:03:15.224 --> 00:03:18.648
It could just keep that state,
if that makes sense.

56
00:03:18.648 --> 00:03:22.011
I feel I kinda explained it poorly,
but yeah.

57
00:03:22.011 --> 00:03:25.605
There are of course many other reasons
why something couldn't be cached,

58
00:03:25.605 --> 00:03:27.041
you also will find that here.

59
00:03:27.041 --> 00:03:32.345
I think there's just a resource
entirely dedicated to when or

60
00:03:32.345 --> 00:03:36.732
when your page cannot be
cached in that way, yeah.

61
00:03:36.732 --> 00:03:38.623
&gt;&gt; So how long is it cached?

62
00:03:38.623 --> 00:03:39.395
&gt;&gt; Not long.

63
00:03:39.395 --> 00:03:40.106
&gt;&gt; Your tabs.

64
00:03:40.106 --> 00:03:43.537
&gt;&gt; Yeah,
I don't know the exact lifespan, but

65
00:03:43.537 --> 00:03:48.341
I believe it's just for
the navigation going back or forward.

66
00:03:48.341 --> 00:03:54.744
So in this case, when we went from the
article back, then it will also keep that

67
00:03:54.744 --> 00:04:00.127
article in cache in case you wanna go
forward, cuz it's back/forward cache.

68
00:04:00.127 --> 00:04:03.482
But I believe after using it once,
I think,

69
00:04:03.482 --> 00:04:06.575
I believe it's then purged from cache.

70
00:04:06.575 --> 00:04:10.588
Because otherwise, you're just filling
your cache with all these things and

71
00:04:10.588 --> 00:04:12.308
it wouldn't really make sense.

72
00:04:12.308 --> 00:04:15.981
Because you're keeping that state
of the call stack event loop,

73
00:04:15.981 --> 00:04:20.008
which won't be the same when you're
navigating back and forth again.

74
00:04:20.008 --> 00:04:23.227
Because then it will be different, so
it'll make a new snapshot again, and

75
00:04:23.227 --> 00:04:24.603
then store it in bfcache again.

76
00:04:24.603 --> 00:04:25.926
So it'll just use it once.

77
00:04:25.926 --> 00:04:28.050
Yeah, I hope that made sense.

