WEBVTT

1
00:00:00.000 --> 00:00:02.671
All right, Question 12,

2
00:00:02.671 --> 00:00:08.470
order the CSS selectors by specificity.

3
00:00:06.470 --> 00:00:17.050
A, B, C, D, E, or F.

4
00:00:17.050 --> 00:00:18.016
All right.

5
00:00:18.016 --> 00:00:21.093
So the right answer is F, E, D, A, B, C.

6
00:00:21.093 --> 00:00:22.890
Now when we work with CSS,

7
00:00:22.890 --> 00:00:28.198
there are certain kind of specificity
values that kinda like tuple, tuple,

8
00:00:28.198 --> 00:00:31.276
I never know how to pronounce that,
based on what the selector includes.

9
00:00:31.276 --> 00:00:35.811
So first we have inline styles,
we have IDs which get a higher value.

10
00:00:35.811 --> 00:00:38.763
Then we have classes,
attributes, and pseudo classes,

11
00:00:38.763 --> 00:00:41.548
which all kinda get the same or
have the same priority.

12
00:00:41.548 --> 00:00:44.118
And then we have tags and pseudo elements.

13
00:00:44.118 --> 00:00:47.532
So just to see an example of this, here we
just have one tag, we just have a UL, and

14
00:00:47.532 --> 00:00:48.203
that's a tag.

15
00:00:48.203 --> 00:00:51.732
So that's the fourth, so
that's the weakest kind of.

16
00:00:51.732 --> 00:00:54.942
So this one has one tag, so it gets 1.

17
00:00:54.942 --> 00:00:56.225
Then we add an ID.

18
00:00:56.225 --> 00:01:02.725
So now its specificity is 101 cuz
there's zeros in between, so it's 101.

19
00:01:02.725 --> 00:01:06.968
Then we add another tag,
now it's 102, a class name, 112,

20
00:01:06.968 --> 00:01:09.136
another tag, 113, and so on.

21
00:01:09.136 --> 00:01:10.323
A pseudo class, 123.

22
00:01:10.323 --> 00:01:13.353
Now, of course,
if this was an inline style,

23
00:01:13.353 --> 00:01:17.494
it would beat all of them cuz
it has 1000 instead of 103.

24
00:01:17.494 --> 00:01:23.596
So when we go back to our question,
yeah, we see that the h1 is one tag.

25
00:01:23.596 --> 00:01:26.535
It has a class name and it has an ID.

26
00:01:26.535 --> 00:01:28.710
So this becomes 111.

27
00:01:28.710 --> 00:01:32.339
Then h1 large text and attribute, so
we have a class name and an attribute,

28
00:01:32.339 --> 00:01:33.827
which is the third one, so 2.

29
00:01:33.827 --> 00:01:36.075
And then one tag is 1 to 21.

30
00:01:36.075 --> 00:01:41.258
Same for a large text is a class name and
then nth child is the pseudo class.

31
00:01:41.258 --> 00:01:42.092
So that one gets 20.

32
00:01:42.092 --> 00:01:46.891
With div h1, we have two tags,
then we have a large-text class,

33
00:01:46.891 --> 00:01:48.618
yeah, so 13 or 12.

34
00:01:48.618 --> 00:01:52.594
And then we have that pseudo element,
the before,

35
00:01:52.594 --> 00:01:56.853
which is also in the fourth one,
so that becomes 13.

36
00:01:56.853 --> 00:02:01.449
Same for two tags div h1, 2, and then
we have the pseudo element first child.

37
00:02:01.449 --> 00:02:05.032
Now it's kinda tricky cuz you
also have the not and the has,

38
00:02:05.032 --> 00:02:08.412
which is kinda like a pseudo elements,
but not really.

39
00:02:08.412 --> 00:02:12.772
It doesn't get any specificity even though
it also uses that, what's it called,

40
00:02:12.772 --> 00:02:16.216
parentheses, I don't know,
not parenthesis, I don't know.

41
00:02:16.216 --> 00:02:19.149
So you have the tag, the h1, and
then the not, which gets ignored.

42
00:02:19.149 --> 00:02:22.248
There is no value there, even though it
looks like a pseudo element, it's not.

43
00:02:22.248 --> 00:02:26.276
But then we still have the small text,
which is a class name, so it gets 11.

44
00:02:26.276 --> 00:02:28.128
So we have 111, 21, 20, 13, 12, 11.

45
00:02:28.128 --> 00:02:33.436
So that's why they're ordered like that.

46
00:02:33.436 --> 00:02:39.071
And normally, you will probably find
selectors with the same value specificity,

47
00:02:39.071 --> 00:02:43.915
then it just depends on which one was
specified last in the stylesheet.

48
00:02:43.915 --> 00:02:48.713
Cuz first you have inheritance, which is
the least or has the lowest priority.

49
00:02:48.713 --> 00:02:52.751
And then you have tags, which we just
talked about, classes, IDs, inline styles,

50
00:02:52.751 --> 00:02:55.895
!important in stylesheets, and
then !important in inline styles,

51
00:02:55.895 --> 00:02:57.599
that one has the highest priority.

52
00:02:57.599 --> 00:03:01.579
If you're using an inline
style with !important,

53
00:03:01.579 --> 00:03:05.758
it just ignores everything else,
it will use that.

54
00:03:05.758 --> 00:03:07.280
Yeah, so it goes from low to high.

