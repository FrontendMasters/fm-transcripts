WEBVTT

1
00:00:00.000 --> 00:00:02.230
What is true about this code block?

2
00:00:02.230 --> 00:00:07.260
Obj 1 and obj 2 cannot be garbage
collected leading to a memory leak.

3
00:00:07.260 --> 00:00:12.338
Obj 1 and obj 2 will be garbage collected
immediately after setting them to null.

4
00:00:12.338 --> 00:00:16.830
Obj 1 and obj 2 will only be garbage
collected after closing the browser tab,

5
00:00:16.830 --> 00:00:17.578
or D obj 1 and

6
00:00:17.578 --> 00:00:21.880
obj 2 can be garbage collected during
the next garbage collection cycle.

7
00:00:26.064 --> 00:00:29.300
All right, let's get to the answer.

8
00:00:29.300 --> 00:00:31.378
So the right answer is D, obj 1 and

9
00:00:31.378 --> 00:00:35.910
obj 2 can be garbage collected during
the next garbage collection cycle.

10
00:00:37.270 --> 00:00:41.170
So, that shouldn't have
been highlighted yet.

11
00:00:41.170 --> 00:00:43.940
But anyway, so we have a code block
here and we have an add member function.

12
00:00:43.940 --> 00:00:47.380
If you can kinda see that,
that returns the name and createdAt.

13
00:00:47.380 --> 00:00:51.654
Then we create two objects with
the addMember and addMember Sarah.

14
00:00:51.654 --> 00:00:56.257
So we have those variables kind of in our
global execution context now, and they

15
00:00:56.257 --> 00:01:00.928
point to the objects in the heap, like the
heap is where we store all the dynamic,

16
00:01:00.928 --> 00:01:04.869
like objects, functions,
anything that can change at runtime time.

17
00:01:04.869 --> 00:01:09.783
So then we set object 1's friend
property to point to object 2, and

18
00:01:09.783 --> 00:01:14.230
object two is friend property
to point to object one, right?

19
00:01:14.230 --> 00:01:16.309
These are references and job decsripts.

20
00:01:16.309 --> 00:01:19.653
They are just basically just
references to like addresses and

21
00:01:19.653 --> 00:01:21.140
the heap of these objects.

22
00:01:21.140 --> 00:01:23.762
Also these objects should
have included createAt field,

23
00:01:23.762 --> 00:01:27.050
I forgot to have that in my animation,
sorry about that but.

24
00:01:27.050 --> 00:01:29.545
So the object one should
also have a created at that.

25
00:01:29.545 --> 00:01:31.020
Yeah, anyway we have that now.

26
00:01:31.020 --> 00:01:34.330
And then we set the object one and
object two to null.

27
00:01:34.330 --> 00:01:37.455
Now when this happens, the object gets
removed from the global context, but

28
00:01:37.455 --> 00:01:40.360
object one and object two here now
still have a reference to each other.

29
00:01:41.360 --> 00:01:45.585
Now in the case of modern browsers,
they also get deleted because they use

30
00:01:45.585 --> 00:01:50.288
something called, or whenever an object
is not reachable anymore from the global

31
00:01:50.288 --> 00:01:53.580
context, the objects are removed
from the heap as well.

32
00:01:53.580 --> 00:01:58.431
So in this case, there is no reference
anymore from the global context, so

33
00:01:58.431 --> 00:02:01.896
they use this mark and
sweep algorithm to say, okay,

34
00:02:01.896 --> 00:02:06.368
these objects are not reachable anymore,
remove them from memory.

35
00:02:06.368 --> 00:02:10.437
Older browsers or maybe some still use
that, they use the reference counting

36
00:02:10.437 --> 00:02:14.507
algorithm, in which they count the
references that an object still has, but

37
00:02:14.507 --> 00:02:18.847
in this case, you can see that the object
still has a reference to another object.

38
00:02:18.847 --> 00:02:22.483
So that algorithm would kinda be like,
okay, we cannot clear these up

39
00:02:22.483 --> 00:02:26.680
because they still reference each other,
which leads to a memory leak.

40
00:02:26.680 --> 00:02:31.769
But in modern browsers, that's not
really an issue anymore because they get

41
00:02:31.769 --> 00:02:37.030
removed as soon as there is no reference
from the global context to that object.

42
00:02:37.030 --> 00:02:38.970
And of course, it doesn't have
to be a direct reference, right?

43
00:02:38.970 --> 00:02:40.106
It can also be a nested one.

44
00:02:40.106 --> 00:02:44.150
So, some objects can reference
other objects all the way down.

45
00:02:44.150 --> 00:02:46.207
They also won't get garbage collected.

46
00:02:46.207 --> 00:02:50.564
But yeah, that's just kind of the big
difference between modern garbage

47
00:02:50.564 --> 00:02:52.540
collecting and older versions.

