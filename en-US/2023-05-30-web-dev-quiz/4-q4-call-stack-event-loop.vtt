WEBVTT

1
00:00:00.330 --> 00:00:02.720
Then we have the next question,
what gets logged?

2
00:00:02.720 --> 00:00:06.970
We have a setTimeout that
has a callback with a log.

3
00:00:06.970 --> 00:00:11.265
Then we have a Promise.resolve with
a then callback, which also logs 2.

4
00:00:11.265 --> 00:00:16.082
We have a Promise.resolve with a then
callback, which has a setTimeout,

5
00:00:16.082 --> 00:00:17.730
which logs 3.

6
00:00:17.730 --> 00:00:23.240
Then we have a new Promise that logs 4,
and a setTimeout that logs 5.

7
00:00:23.240 --> 00:00:26.061
So what gets logged when
we execute the script?

8
00:00:29.629 --> 00:00:34.894
So the right answer is D,
it's 4, 2, 1, 5, 3.

9
00:00:34.894 --> 00:00:38.020
So this is just the first time
that we're using the event loop.

10
00:00:38.020 --> 00:00:41.588
So just to make sure everyone is on
the same level, we have a call stack,

11
00:00:41.588 --> 00:00:45.214
which is just a stack that keeps track
of the sequence of function calls in

12
00:00:45.214 --> 00:00:46.590
their execution context.

13
00:00:46.590 --> 00:00:50.005
So every time we call a function or
even just a global context,

14
00:00:50.005 --> 00:00:54.802
it creates an execution context for that,
which contains the code and any variables,

15
00:00:54.802 --> 00:00:59.420
everything it needs to execute, and
then it pushes that to a call stack.

16
00:00:59.420 --> 00:01:03.769
We've got a web API, which is just
a set of features that kind of extend

17
00:01:03.769 --> 00:01:07.681
JavaScript's built-in functionality so
we can use the web,

18
00:01:07.681 --> 00:01:12.230
including DOM manipulation, but
also timers, setTimeout and fetch.

19
00:01:12.230 --> 00:01:15.497
Then we have the macrotask queue,
or just a task queue,

20
00:01:15.497 --> 00:01:20.018
which contains all the setTimeout
callbacks, the setInterval callbacks,

21
00:01:20.018 --> 00:01:24.740
any UI rendering tasks, user input events,
and also network events.

22
00:01:24.740 --> 00:01:28.788
Then we have a microtask queue,
which contains promise callbacks,

23
00:01:28.788 --> 00:01:33.760
queueMicrotask callbacks, any async
awaits, and MutationObserver callbacks.

24
00:01:33.760 --> 00:01:34.704
And then finally,

25
00:01:34.704 --> 00:01:38.303
we have the event loop, which is really
just a loop that keeps track of any

26
00:01:38.303 --> 00:01:42.450
tasks that are currently in the queue and
then pushes those to the call stack.

27
00:01:42.450 --> 00:01:46.627
It's important to remember that first
it wants to get all the microtasks out

28
00:01:46.627 --> 00:01:50.754
of the queue and then it goes back to
the task queue, the normal task queue.

29
00:01:50.754 --> 00:01:53.720
So in this case,
let's just go through it step by step.

30
00:01:53.720 --> 00:01:57.230
So first we have a setTimeout call,
that just get pushed to the call stack.

31
00:01:57.230 --> 00:01:59.521
But this setTimeout
itself is a web API and

32
00:01:59.521 --> 00:02:03.260
the callback that we provided is
actually pushed to the web API.

33
00:02:03.260 --> 00:02:05.700
Now, we haven't defined any timer here.

34
00:02:05.700 --> 00:02:08.505
Normally, you can always
setTimeout at maybe 2,000 or

35
00:02:08.505 --> 00:02:11.430
3,000, in the case that we
don't provide it, it's 0.

36
00:02:11.430 --> 00:02:14.585
But that doesn't mean that
it gets executed right away,

37
00:02:14.585 --> 00:02:16.567
it still gets pushed to the web API.

38
00:02:16.567 --> 00:02:21.006
But it instantly gets then pushed back to
the normal task queue on the next tick

39
00:02:21.006 --> 00:02:24.033
cuz the task queue had these
set timeout callbacks.

40
00:02:24.033 --> 00:02:28.207
So on the second line we have the
Promise.resolve which just gets called,

41
00:02:28.207 --> 00:02:33.610
and when you call Promise.resolve it just
instantly returns a resolved promise.

42
00:02:33.610 --> 00:02:36.487
So it can instantly
call the then function,

43
00:02:36.487 --> 00:02:41.450
which we provided, or
that the Promise.resolve can access.

44
00:02:41.450 --> 00:02:42.876
And as we saw before,

45
00:02:42.876 --> 00:02:47.440
the microtask queue contains all
the callbacks from any promises.

46
00:02:47.440 --> 00:02:50.791
So that callback that we provided
is scheduled as a microtask queue.

47
00:02:52.676 --> 00:02:56.530
Then we have another Promise.resolve,
which works the same way.

48
00:02:56.530 --> 00:03:00.613
But this time, when it then gets called,
it actually schedules the microtask queue

49
00:03:00.613 --> 00:03:03.040
again, but
it has the setTimeout in here as well.

50
00:03:03.040 --> 00:03:06.260
But that doesn't run yet,
it's just scheduled to run in the future.

51
00:03:07.590 --> 00:03:10.145
Now, we have a new Promise constructor,
but

52
00:03:10.145 --> 00:03:14.560
the function that we pass to this
new Promise just runs synchronously.

53
00:03:14.560 --> 00:03:19.780
So it actually just runs the callback
function and it logs for right away.

54
00:03:19.780 --> 00:03:23.263
So that's important to remember is that
a new Promise body runs synchronously,

55
00:03:23.263 --> 00:03:24.449
it only returns a Promise.

56
00:03:25.740 --> 00:03:29.898
So 4 gets logged, as a first value,
and then we have another setTimeout,

57
00:03:29.898 --> 00:03:32.210
which works the same way as we saw before.

58
00:03:32.210 --> 00:03:36.317
SetTimeout gets pushed to the call
stack and it's returned callback

59
00:03:36.317 --> 00:03:41.550
gets first pushed to the web API, and
then back to the normal task queue.

60
00:03:41.550 --> 00:03:46.036
So now it's up to the event loop to see,
all right, I've got some tasks queued up,

61
00:03:46.036 --> 00:03:49.950
but first let's get rid of
those microtasks in the queue.

62
00:03:49.950 --> 00:03:55.271
So first it invokes this callback, which
logs 2, get popped out of this call stack.

63
00:03:55.271 --> 00:03:58.370
And then we have another callback
that returns a setTimeout.

64
00:03:58.370 --> 00:04:03.564
So it calls a setTimeout, it's a timeout
again returns its callback to the web API,

65
00:04:03.564 --> 00:04:05.540
which eventually will log 3.

66
00:04:05.540 --> 00:04:08.670
So on the next tick, this also gets
pushed to the normal task queue.

67
00:04:10.090 --> 00:04:15.658
Now, again, I list the timeout callback
for the first one, which logs 1,

68
00:04:15.658 --> 00:04:21.060
so 1 gets logged here, cuz off because
there was no microtasks anymore.

69
00:04:21.060 --> 00:04:21.940
Sorry, I forgot to mention that.

70
00:04:21.940 --> 00:04:26.450
So it just turned back to the normal task
queue to get rid of all the tasks there.

71
00:04:28.210 --> 00:04:31.130
Then we have the callback for
logging 5, so it just logs 5.

72
00:04:31.130 --> 00:04:34.697
And the same happens for 3,
callback 3 invokes it, gets called, and

73
00:04:34.697 --> 00:04:36.133
eventually 3 gets called.

74
00:04:36.133 --> 00:04:39.700
So this is what we ended up with,
4, 2, 1, 5, 3.

75
00:04:39.700 --> 00:04:40.448
Make sense?

76
00:04:40.448 --> 00:04:43.130
[LAUGH] Any question?

77
00:04:43.130 --> 00:04:49.507
&gt;&gt; What was the name of the site that you
said that stacks could be popped visually?

78
00:04:49.507 --> 00:04:52.310
&gt;&gt; I think there's a site called Loop.

79
00:04:52.310 --> 00:04:57.134
It was someone, I forgot his name, he did
a very famous talk on the event loop and

80
00:04:57.134 --> 00:05:01.238
he created a pretty simple website
that has the call stack and then,

81
00:05:01.238 --> 00:05:02.683
I think the task queue.

82
00:05:02.683 --> 00:05:05.225
So you can kind of see where things go,
but

83
00:05:05.225 --> 00:05:09.450
it doesn't really include the microtask
queue or any of that stuff.

84
00:05:09.450 --> 00:05:14.660
It also uses jQuery, so
depends on what you like to use, but yeah.

85
00:05:15.790 --> 00:05:23.878
&gt;&gt; Could you explain how new Promise
=&gt; console.log(4) gets executed?

86
00:05:23.878 --> 00:05:26.500
&gt;&gt; Yeah, so I'll just go all the way back.

87
00:05:28.120 --> 00:05:31.479
So when we have the new Promise
constructor, it's important to remember,

88
00:05:31.479 --> 00:05:34.980
I know there's a better name for the
function that we pass to the new promise.

89
00:05:34.980 --> 00:05:38.581
I forgot what it was, I think it's called
the executor function or something,

90
00:05:38.581 --> 00:05:40.260
that function runs synchronously.

91
00:05:40.260 --> 00:05:43.615
So if we just had a new Promise and
we had a longer function there,

92
00:05:43.615 --> 00:05:45.120
it'll run synchronously.

93
00:05:45.120 --> 00:05:49.414
And normally you have new Promise resolve
reject that you kinda actually pass as

94
00:05:49.414 --> 00:05:51.110
arguments there.

95
00:05:51.110 --> 00:05:55.254
Only when we invoke those methods,
those methods will return a Promise and

96
00:05:55.254 --> 00:05:57.970
that's when it gets scheduled as a task.

97
00:05:57.970 --> 00:06:03.460
But the body itself runs synchronously,
if that makes sense.

98
00:06:03.460 --> 00:06:09.740
So a new Promise instantly executes
its own callback executor function.

99
00:06:09.740 --> 00:06:12.939
There's a better word for that function,
and I'm trying to remember it, and

100
00:06:12.939 --> 00:06:13.863
I can't remember it.

101
00:06:13.863 --> 00:06:17.260
But yeah, this is just a common kind of
misconception when working with promises,

102
00:06:17.260 --> 00:06:19.735
is that a lot of the code actually
still runs synchronously,

103
00:06:19.735 --> 00:06:22.710
it's only the return values
format that are async.

104
00:06:22.710 --> 00:06:27.388
So just make sure that you're not running
into any unexpected behavior there when

105
00:06:27.388 --> 00:06:31.201
you think that the entire callback
there is async, cuz it's not.

106
00:06:31.201 --> 00:06:36.222
&gt;&gt; Does setTimeout or any web API
really pushed to the call stack or

107
00:06:36.222 --> 00:06:39.740
is it return the code
when time is finished?

108
00:06:39.740 --> 00:06:43.453
&gt;&gt; So the web API itself doesn't
call to the call stack immediately,

109
00:06:43.453 --> 00:06:48.300
the timer just defines the time that it
can get pushed through the task queue.

110
00:06:48.300 --> 00:06:52.928
So when we set a timer for 1,000
milliseconds, it doesn't mean that it will

111
00:06:52.928 --> 00:06:57.100
execute in 1,000 milliseconds
if the task queue isn't empty.

112
00:06:57.100 --> 00:07:01.361
If that is still full,
it might run in 2,000 milliseconds,

113
00:07:01.361 --> 00:07:03.920
depends on how busy that task queue is.

114
00:07:05.020 --> 00:07:06.150
So that's important to remember.

115
00:07:06.150 --> 00:07:09.894
The delay is just when the web API
pushes it to the task queue and

116
00:07:09.894 --> 00:07:12.550
not when it pushes it to the call stack.

117
00:07:12.550 --> 00:07:17.101
That only happens if it's the first
one in the task queue and

118
00:07:17.101 --> 00:07:20.448
there's no microtasks queued up.

119
00:07:20.448 --> 00:07:21.167
Yeah.

120
00:07:21.167 --> 00:07:25.880
&gt;&gt; This is a consequence of everything
running on one thread, correct?

121
00:07:25.880 --> 00:07:27.139
&gt;&gt; That's right, yes.

122
00:07:27.139 --> 00:07:30.934
So normally or
JavaScript only has a single thread, and

123
00:07:30.934 --> 00:07:34.002
if we were to run
everything synchronously,

124
00:07:34.002 --> 00:07:38.540
initially you had these callbacks
you could pass everywhere.

125
00:07:38.540 --> 00:07:43.104
In your code looked horrible,
it's got like callback hell,

126
00:07:43.104 --> 00:07:46.889
you ended up with this kind
of C shape of callbacks.

127
00:07:46.889 --> 00:07:50.971
So that's kind of why the web had
to invent something where some

128
00:07:50.971 --> 00:07:53.829
asynchronous behavior was still allowed.

129
00:07:55.090 --> 00:07:57.770
So setTimeout isn't part of
JavaScript itself, right?

130
00:07:57.770 --> 00:07:58.380
It's just the web.

131
00:07:58.380 --> 00:08:02.550
So for example, and I think Node also
implements it, but they all have their own

132
00:08:02.550 --> 00:08:06.450
implementation cuz they all use
different APIs under the hood.

133
00:08:06.450 --> 00:08:10.115
But yeah, this was kinda the first
asynchronous behavior in JavaScript,

134
00:08:10.115 --> 00:08:12.860
even though it's not entirely
asynchronous, right?

135
00:08:12.860 --> 00:08:14.610
Cuz it's still just happening all there.

136
00:08:14.610 --> 00:08:20.125
&gt;&gt; So in order to get to the call stack,
does it clear in this order,

137
00:08:20.125 --> 00:08:24.710
micro, macro, web,
call stack, and then end?

138
00:08:24.710 --> 00:08:27.486
&gt;&gt; No, so
that's kind of half correct, sorry,

139
00:08:27.486 --> 00:08:30.630
I just wanted to get through
all these steps again.

140
00:08:30.630 --> 00:08:34.565
So the event loop doesn't
check the web API.

141
00:08:34.565 --> 00:08:39.330
The web API, or in this case,
the timer that setTimeout provides,

142
00:08:39.330 --> 00:08:42.770
that only just pushes to the task queue,
right?

143
00:08:42.770 --> 00:08:47.080
The event loop is just to check
the task queue and the microtask queue.

144
00:08:47.080 --> 00:08:50.636
So the web API's only responsibility, or

145
00:08:50.636 --> 00:08:56.171
in setTimeout's particular, or
for setTimeout specifically,

146
00:08:56.171 --> 00:09:01.629
is to push to the task queue when
the timer is done or has timed out.

147
00:09:01.629 --> 00:09:05.660
So yeah, it's not like the event
loop first goes to the task queue,

148
00:09:05.660 --> 00:09:08.348
then the microtask queue,
then the web API,

149
00:09:08.348 --> 00:09:12.477
that's false, it doesn't check
the web API, if that makes sense.

150
00:09:12.477 --> 00:09:15.523
So the web API is just to push to that,
or setTimeout,

151
00:09:15.523 --> 00:09:18.867
just to push to the task queue
when the timer has timed out.

152
00:09:21.947 --> 00:09:23.987
Yeah, it's always fun?

153
00:09:23.987 --> 00:09:28.120
Event loops, it's not confusing at all.

154
00:09:28.120 --> 00:09:32.119
&gt;&gt; And the main difference is
between the microtask queue and

155
00:09:32.119 --> 00:09:34.130
the macrotask queue are?

156
00:09:34.130 --> 00:09:37.815
&gt;&gt; So here's just a setTimeout callbacks,
not the setTimeout function itself,

157
00:09:37.815 --> 00:09:38.868
they're callbacks.

158
00:09:38.868 --> 00:09:42.319
The setTimeout callbacks, you write
rendering tasks, user input events, and

159
00:09:42.319 --> 00:09:43.160
network events.

160
00:09:43.160 --> 00:09:47.430
And then on the microtask, we have those
promise callbacks that we saw earlier.

161
00:09:47.430 --> 00:09:51.669
The queueMicrotask, which is pretty
straightforward, async/await and we'll

162
00:09:51.669 --> 00:09:55.920
talk more about that later how that works,
and also MutationObserver callbacks.

163
00:09:55.920 --> 00:09:59.562
So yeah, it's just kind of like a defined
list of things that get scheduled to

164
00:09:59.562 --> 00:10:02.510
the regular task queue
versus the microtask queue.

165
00:10:02.510 --> 00:10:06.943
And normally microtasks run after
every task, kinda like they allow for

166
00:10:06.943 --> 00:10:13.060
these smaller updates, which is especially
important for these smoother interactions.

167
00:10:13.060 --> 00:10:18.433
So it's like task, microtask,
microtask, those, I don't know, you can

168
00:10:18.433 --> 00:10:23.658
kind of see it in your network inspector
or your dev tool sometimes, yeah.

169
00:10:23.658 --> 00:10:26.230
&gt;&gt; So the microtask is prioritized-
&gt;&gt; Yeah.

170
00:10:26.230 --> 00:10:27.413
&gt;&gt; Over the other tasks?

171
00:10:27.413 --> 00:10:31.470
That's the one that if it's full,
it will be executed in the next cycle.

172
00:10:31.470 --> 00:10:32.332
&gt;&gt; That's correct, yeah.

173
00:10:32.332 --> 00:10:35.570
And first, make sure that the microtask
queue is entirely empty before it turns

174
00:10:35.570 --> 00:10:36.890
back to the regular task queue.

