WEBVTT

1
00:00:00.200 --> 00:00:05.663
&gt;&gt; Kent C. Dodds: So here's my solution,
actually it comes from some utilities

2
00:00:05.663 --> 00:00:11.650
that I built on top of Enzyme that
didn't allow some of these things.

3
00:00:11.650 --> 00:00:16.340
And I decided I didn't need Enzyme
as a dependency of this thing.

4
00:00:16.340 --> 00:00:20.610
So, here's the dom testing library,
and nothing reacts specifically here.

5
00:00:20.610 --> 00:00:25.780
There's actually a view testing
library that's built on top of this.

6
00:00:25.780 --> 00:00:30.553
There's some discussion to create an amber
testing library that's also going to be

7
00:00:30.553 --> 00:00:31.770
built on top of this.

8
00:00:31.770 --> 00:00:34.076
An angular testing library,

9
00:00:34.076 --> 00:00:39.530
all of these things because these
are really great utilities.

10
00:00:39.530 --> 00:00:43.326
So, just as kind of an example,
here straight from the docs,

11
00:00:43.326 --> 00:00:47.934
because this isn't react specific its
just using div and our HTMLl stuff.

12
00:00:47.934 --> 00:00:57.085
But, so let's see, right here is where the
test is actually useful, this is all like.

13
00:00:57.085 --> 00:00:59.366
Here's our component that has event
listeners and stuff like that.

14
00:00:59.366 --> 00:01:06.184
So, maybe it would be better just
to show you the react version,

15
00:01:06.184 --> 00:01:10.300
we've got these utilities in here.

16
00:01:10.300 --> 00:01:12.885
Just know that lots of the query
selector utilities and stuff,

17
00:01:12.885 --> 00:01:14.610
are coming from the dom testing library.

18
00:01:14.610 --> 00:01:17.564
So if you need to look deeper
into the docs or anything,

19
00:01:17.564 --> 00:01:19.050
then you can look in there.

20
00:01:19.050 --> 00:01:24.940
Okay, so here's an example of
using the React testing library.

21
00:01:24.940 --> 00:01:28.269
So here we're rendering
this Fetch component, and

22
00:01:28.269 --> 00:01:33.480
inside the Fetch component,
there's a button called Load Greeting.

23
00:01:33.480 --> 00:01:37.121
And so we're using React's
built-in utility, so in ReactDOM,

24
00:01:37.121 --> 00:01:38.820
you have this simulate thing.

25
00:01:38.820 --> 00:01:42.260
And so React testing library
just re-exports that.

26
00:01:42.260 --> 00:01:44.330
So check out the React docs for simulate.

27
00:01:44.330 --> 00:01:50.770
But you can simulate a click, [COUGH]
on the element that you get by text.

28
00:01:50.770 --> 00:01:54.270
And so
we're finding the button by its text.

29
00:01:54.270 --> 00:01:58.651
So, right there when I
first thought about this,

30
00:01:58.651 --> 00:02:04.610
I thought I don't know if I like that but
here's what converted me.

31
00:02:04.610 --> 00:02:09.572
If we're really thinking about using
our tests, using our software the same

32
00:02:09.572 --> 00:02:14.450
way that our users are, then how do
they know which button to click on?

33
00:02:14.450 --> 00:02:15.910
They have a page full of buttons.

34
00:02:15.910 --> 00:02:19.520
How do they know which one to
click on to accomplish the task?

35
00:02:19.520 --> 00:02:21.220
They read the text, and
that's how they know.

36
00:02:21.220 --> 00:02:24.520
And so our test should do the same thing.

37
00:02:24.520 --> 00:02:29.012
So how do I know of all the things that
are rendered inside this container,

38
00:02:29.012 --> 00:02:31.480
how do I know which one I should click on?

39
00:02:31.480 --> 00:02:33.370
I reference it by its text.

40
00:02:33.370 --> 00:02:37.930
So there are other ways to grab it,
and so we'll look at those.

41
00:02:37.930 --> 00:02:42.560
But that is the suggested way for
finding elements like buttons.

42
00:02:42.560 --> 00:02:48.600
And there there's, remember that flush
promises thing that we wrote a while ago?

43
00:02:48.600 --> 00:02:53.235
This weight utility is similar to that,
except it is a little bit better

44
00:02:53.235 --> 00:02:57.340
because it waits until your call
back doesn't throw an error.

45
00:02:57.340 --> 00:03:01.140
And so if you try to execute
a get by text it will

46
00:03:01.140 --> 00:03:06.000
throw an error if there is
no element in there by text.

47
00:03:06.000 --> 00:03:09.162
There's also this test ID that
I'll explain in a second,

48
00:03:09.162 --> 00:03:12.270
it will throw an error if there
is nothing by that test ID.

49
00:03:12.270 --> 00:03:15.420
So this will wait until this
no longer throws an error.

50
00:03:15.420 --> 00:03:19.750
So we clicked loading greeting, we're
waiting for the greeting to be loaded and

51
00:03:19.750 --> 00:03:22.870
that's exactly what the user would do to.

52
00:03:22.870 --> 00:03:26.820
They click on it and then just wait
until they get that greeting text.

53
00:03:26.820 --> 00:03:29.940
And then we can make our
assertions once that's happened.

54
00:03:29.940 --> 00:03:33.915
And we have some assertion helpers too,
where we can say get me a note and

55
00:03:33.915 --> 00:03:36.110
this literally just returns a domino.

56
00:03:36.110 --> 00:03:39.070
There's no in enzyme you have
a wrapper and it has all

57
00:03:39.070 --> 00:03:43.660
those utilities on top of it here it's
just DOM nodes that you're killing with.

58
00:03:43.660 --> 00:03:47.382
So we get by a TestId,
I'll show you that again here in a second.

59
00:03:47.382 --> 00:03:52.640
Expected TextContent so
you can change something in particular.

60
00:03:52.640 --> 00:03:57.490
And then we can verify that
the button has disable on it.

61
00:03:57.490 --> 00:04:01.826
Whatever that's you might need and
you can even still use snapshots with

62
00:04:01.826 --> 00:04:05.680
DOM nodes it all works great,
which was a really nice surprise.

63
00:04:05.680 --> 00:04:08.770
I didn't know that you could do that,
[LAUGH] until after I wrote this.

64
00:04:10.480 --> 00:04:13.704
&gt;&gt; Kent C. Dodds: Okay, so you wanna look
at some of the queries, real quick and

65
00:04:13.704 --> 00:04:16.950
then feel free to interrupt
me if you have any questions.

66
00:04:16.950 --> 00:04:23.350
So it exposes a render and that render
method returns a bunch of utilities.

67
00:04:23.350 --> 00:04:25.690
I pretty much always jest
destructure the ones I need.

68
00:04:25.690 --> 00:04:28.322
You could call it render_utils,
or whatever you want, but

69
00:04:28.322 --> 00:04:31.030
I was jest destructure the things I need.

70
00:04:31.030 --> 00:04:35.514
So the container is just,
you created document doc create elements,

71
00:04:35.514 --> 00:04:37.800
div, that is exactly what this is.

72
00:04:37.800 --> 00:04:43.090
It's just that div that you created,
and that is the container.

73
00:04:43.090 --> 00:04:48.086
And then it appends, or we render to that
container and so if you wanna get the root

74
00:04:48.086 --> 00:04:52.950
element that your component is rendering
that like root div for example here.

75
00:04:52.950 --> 00:04:58.073
If you wanted to get this element then
that would be container.first child and

76
00:04:58.073 --> 00:05:00.180
that's regular dom API stuff.

77
00:05:00.180 --> 00:05:04.894
We also expose unmount, so there's
situations where you wanna make sure

78
00:05:04.894 --> 00:05:09.430
that you're not or
where you can test avoiding a memory leak.

79
00:05:09.430 --> 00:05:13.902
And so you can unmount and then verify
that you're not client set state again or

80
00:05:13.902 --> 00:05:14.660
something.

81
00:05:14.660 --> 00:05:17.722
And there's an example of this in the test

82
00:05:17.722 --> 00:05:21.580
of the react testing library
that you can check out.

83
00:05:21.580 --> 00:05:25.660
But yeah, that's good for
clean up then stuff.

84
00:05:25.660 --> 00:05:30.595
And then we have get by label text,
so bunch of ways, and

85
00:05:30.595 --> 00:05:34.720
this is the best way to get form elements.

86
00:05:34.720 --> 00:05:39.620
So how does a user know
where to type the username?

87
00:05:39.620 --> 00:05:42.304
Look at the label,
it see that it says username, and

88
00:05:42.304 --> 00:05:44.140
they find the associated element.

89
00:05:44.140 --> 00:05:46.818
And if it's accessible they'll be
able to click on the label and

90
00:05:46.818 --> 00:05:48.660
it'll highlight the associated element.

91
00:05:48.660 --> 00:05:55.380
If it's not accessible then you won't
have a label and this won't work.

92
00:05:55.380 --> 00:06:00.778
Or you could even have a label but
not have it attached appropriately,

93
00:06:00.778 --> 00:06:03.350
and that is also not accessible.

94
00:06:03.350 --> 00:06:07.370
And so
that wont work with get by label text.

95
00:06:07.370 --> 00:06:08.918
So this is actually,

96
00:06:08.918 --> 00:06:14.422
not only encouraging you to write your
test in a way that users use your code,

97
00:06:14.422 --> 00:06:20.700
it's also encouraging you to keep your
applications accessible, so that's great.

98
00:06:20.700 --> 00:06:28.210
And so you can associate a label with
a four in react that will be html4.

99
00:06:28.210 --> 00:06:33.192
You can do the reverse, so arial-label by,
and then rapper labels even,

100
00:06:33.192 --> 00:06:37.640
you have to do a little bit of extra
work for those to work properly.

101
00:06:37.640 --> 00:06:42.568
And then there's also aria-label but
that's not recommended because people

102
00:06:42.568 --> 00:06:46.910
who aren't using a screen
reader can't see that label.

103
00:06:46.910 --> 00:06:51.770
But if that's how you're labeling
your stuff then will work as well And

104
00:06:51.770 --> 00:06:55.990
then you've got placeholder text,
I think you get the idea.

105
00:06:55.990 --> 00:06:59.490
An input has a placeholder,
and you can select by that.

106
00:06:59.490 --> 00:07:02.950
Generally not recommended, for
accessibility reasons also.

107
00:07:02.950 --> 00:07:06.571
But then getByText is great for
finding links,

108
00:07:06.571 --> 00:07:11.070
finding buttons,
whatever the case may be there.

109
00:07:11.070 --> 00:07:15.064
I get by all text if there is an image
you want to verify is when you are doing

110
00:07:15.064 --> 00:07:16.650
something and then test ID.

111
00:07:16.650 --> 00:07:19.280
So this is a different
subject all together.

112
00:07:20.510 --> 00:07:23.830
So far we're able to find four main parts,
we're able to find buttons.

113
00:07:23.830 --> 00:07:26.880
But sometimes there's like
user name display field.

114
00:07:26.880 --> 00:07:31.537
So you have like at the top
of the page you'll have where

115
00:07:31.537 --> 00:07:34.900
that user's username appears.

116
00:07:34.900 --> 00:07:39.504
And so you might be able to do a getByText
if you know what that user's username is,

117
00:07:39.504 --> 00:07:41.800
and that would probably work just fine.

118
00:07:41.800 --> 00:07:46.603
But there are some situations where
it just isn't reasonable to use

119
00:07:46.603 --> 00:07:51.910
any of these queries to find
the elements that you're looking for.

120
00:07:51.910 --> 00:07:55.676
And so in those situations you can,
in your source code,

121
00:07:55.676 --> 00:07:57.880
add this data test ID attribute.

122
00:07:57.880 --> 00:08:02.728
And what this data test ID
attribute does is actually nothing

123
00:08:02.728 --> 00:08:05.360
useful in the application.

124
00:08:05.360 --> 00:08:09.568
But then in your tests you can reference
that with a get by test ID and

125
00:08:09.568 --> 00:08:11.910
that'll get you the specific node.

126
00:08:11.910 --> 00:08:15.489
So, you might be asking yourself,
okay, well,

127
00:08:15.489 --> 00:08:21.397
why don't I just add a cost name, and
then container.queryselector costname?

128
00:08:21.397 --> 00:08:26.621
And,the reason that I don't like
doing that is actually this,

129
00:08:26.621 --> 00:08:32.440
I have a blog post all about it making
your UI tests resilient to change.

130
00:08:32.440 --> 00:08:37.588
And pretty much it's because whether or
not are class names on

131
00:08:37.588 --> 00:08:43.429
our elements in our web apps is
specific to styling, which it's not,

132
00:08:43.429 --> 00:08:50.110
class names are used to classify
the elements, it's not just styling.

133
00:08:50.110 --> 00:08:54.957
But like by and large the community
that's pretty much all its used for,

134
00:08:54.957 --> 00:08:57.590
all the class names are being used for.

135
00:08:57.590 --> 00:09:00.121
And I'm actually pretty happy with that,

136
00:09:00.121 --> 00:09:05.320
I think it's nice to have something to
have something specific for styling.

137
00:09:05.320 --> 00:09:10.760
And so the problem that I had in the past,
is we would have these class names.

138
00:09:10.760 --> 00:09:14.890
We would use those class names like you'd

139
00:09:14.890 --> 00:09:19.740
have btn-disabled or
-primary or something.

140
00:09:19.740 --> 00:09:21.950
So then I'd be I got that,
just used that in my tests.

141
00:09:21.950 --> 00:09:25.790
And then somebody comes in says,
okay, this is no longer a primary,

142
00:09:25.790 --> 00:09:28.120
it's a secondary and it breaks the test.

143
00:09:28.120 --> 00:09:32.809
I don't like that, because there's
nothing about the cost name

144
00:09:32.809 --> 00:09:37.510
that communicates to anybody that
this is for testing purposes.

145
00:09:37.510 --> 00:09:40.555
And so
by putting a data test ID attribute on, or

146
00:09:40.555 --> 00:09:45.140
prop on your components,
you communicate that really directly.

147
00:09:45.140 --> 00:09:48.836
And you can refactor that, move it,
it doesn't matter where it appears in

148
00:09:48.836 --> 00:09:51.720
the container as long as when
people see that data test ID.

149
00:09:51.720 --> 00:09:53.803
They know exactly what that's for, and

150
00:09:53.803 --> 00:09:56.510
they'll make sure that
stays on the right element.

151
00:09:57.580 --> 00:09:58.710
Yes, question?

152
00:09:58.710 --> 00:10:02.514
&gt;&gt; Speaker 2: So
we're talking about actual production

153
00:10:02.514 --> 00:10:06.940
code that would have data
test ID as part of it.

154
00:10:06.940 --> 00:10:07.530
&gt;&gt; Kent C. Dodds: Right, yep.
So-

155
00:10:07.530 --> 00:10:08.080
[CROSSTALK]
&gt;&gt; Speaker 2: And.

156
00:10:08.080 --> 00:10:10.600
&gt;&gt; Kent C. Dodds: That's a common,
sorry, I won't interrupt you.

157
00:10:10.600 --> 00:10:12.540
[LAUGH]
&gt;&gt; Speaker 2: No, I just wanna clarify.

158
00:10:12.540 --> 00:10:17.253
So you're potentially going to be
populating your production code with

159
00:10:17.253 --> 00:10:19.262
additional data attributes,

160
00:10:19.262 --> 00:10:22.910
is that the type of thing that
you would wanna sanitize?

161
00:10:22.910 --> 00:10:27.387
&gt;&gt; Kent C. Dodds: Yeah, good question, so,
yeah, it is a very common question that

162
00:10:27.387 --> 00:10:31.020
people ask me about this and
I address it in a blog post.

163
00:10:32.020 --> 00:10:33.966
But first off, I would say,

164
00:10:33.966 --> 00:10:39.410
let's just assume that we do ship this
to production, where's the harm in it?

165
00:10:39.410 --> 00:10:47.070
First off, the user doesn't even know,
maybe it's a couple of extra bytes.

166
00:10:47.070 --> 00:10:51.050
Most of you are probably including these
libraries that are enormous anyway.

167
00:10:51.050 --> 00:10:56.160
This isn't gonna be your bottleneck,
you have other places where

168
00:10:56.160 --> 00:11:01.100
you can spend your time on shrinking,
your, size of your apps.

169
00:11:02.700 --> 00:11:09.730
And in addition to that, this is actually
really useful for end to end tests anyway.

170
00:11:09.730 --> 00:11:13.933
And so it's good to have them available
for your end to end test to use and

171
00:11:13.933 --> 00:11:16.170
verify that things are working.

172
00:11:16.170 --> 00:11:19.197
Even smoke tests that you run against
production just to make sure that things

173
00:11:19.197 --> 00:11:21.630
are doing okay,
actually it's really useful to have those.

174
00:11:21.630 --> 00:11:27.027
But if you just really are uncomfortable
with having these things in the DOM,

175
00:11:27.027 --> 00:11:28.937
for one reason or another,

176
00:11:28.937 --> 00:11:33.590
I do have a reference to
a plug-in that you'll appreciate.

177
00:11:33.590 --> 00:11:38.950
That will plug-in-react-remove-properties,
and you can configure it to remove.

178
00:11:38.950 --> 00:11:44.630
Data test or data test ID and just during
production build, just remove them all.

179
00:11:50.390 --> 00:11:54.190
&gt;&gt; Kent C. Dodds: Cool,
any questions so far, yeah?

180
00:11:54.190 --> 00:11:58.870
&gt;&gt; Speaker 3: With these different methods
of selecting elements can you use the same

181
00:11:58.870 --> 00:12:03.320
methodologies in like a tool like
Cyprus or Selenium or [INAUDIBLE]?

182
00:12:03.320 --> 00:12:05.386
&gt;&gt; Kent C. Dodds: Yeah,
so that's, ha, ha, so

183
00:12:05.386 --> 00:12:08.890
there's actually a Cyprus testing library.

184
00:12:08.890 --> 00:12:12.780
Woohoo, I pushed a bug fix last night for
the workshop.

185
00:12:12.780 --> 00:12:15.752
But yeah, so
there's a Cyprus testing library,

186
00:12:15.752 --> 00:12:17.960
it has all these same query methods.

187
00:12:19.070 --> 00:12:24.650
And yeah, the test read really nice,
so I'm really happy with that.

188
00:12:24.650 --> 00:12:26.623
As far as Selenium is concerned,

189
00:12:26.623 --> 00:12:30.620
you select elements a little
bit differently in Selenium.

190
00:12:30.620 --> 00:12:34.390
I think there are some abstractions
to make it a little bit more normal.

191
00:12:34.390 --> 00:12:39.090
So there might be a way to make
something like this work with Selenium.

192
00:12:39.090 --> 00:12:42.453
But I will definitely
not be working on that,

193
00:12:42.453 --> 00:12:46.710
because I'm done with Selenium,
I'm all Cypress now.

194
00:12:46.710 --> 00:12:53.310
So yeah, potentially, but
yeah, definitely Cypress is.

195
00:12:53.310 --> 00:12:56.320
Any other questions or
comments, observations?

196
00:12:59.810 --> 00:13:03.073
&gt;&gt; Kent C. Dodds: All right, so there are
just a couple other things I want to show

197
00:13:03.073 --> 00:13:07.030
you then we can jump back in and refactor
our test to use these abstractions.

198
00:13:07.030 --> 00:13:12.800
So when you render,
as you have right here, you wrote this.

199
00:13:12.800 --> 00:13:17.530
You create this element, this div,
this container, and you render to it.

200
00:13:17.530 --> 00:13:21.079
But that container doesn't actually
ever find it's way into the document,

201
00:13:21.079 --> 00:13:23.220
it's just this div
that's living in memory.

202
00:13:23.220 --> 00:13:27.355
And so, that's actually part of the reason
why we Have to dispatch the event

203
00:13:27.355 --> 00:13:28.710
the way we do.

204
00:13:28.710 --> 00:13:33.345
That's part of the reason
why here in a second you're

205
00:13:33.345 --> 00:13:37.877
gonna use simulate to simulate
those some events and

206
00:13:37.877 --> 00:13:41.690
I'll explain that a little bit more later.

207
00:13:41.690 --> 00:13:45.499
But if you wanted to actually render
something into the document because you

208
00:13:45.499 --> 00:13:46.940
have the jQuery installed.

209
00:13:46.940 --> 00:13:51.245
And that's gonna be the query
the document.body for

210
00:13:51.245 --> 00:13:57.200
certain elements and stuff,
then you can just render into document.

211
00:13:57.200 --> 00:14:00.783
The problem with that is once your test is
done, there's nothing there to take it out

212
00:14:00.783 --> 00:14:03.010
of the document again,
once you're all finished.

213
00:14:03.010 --> 00:14:06.602
So you'll want to use
this clean-up method to,

214
00:14:06.602 --> 00:14:12.430
what the cleanup method does is it
removes everything that it inserted.

215
00:14:12.430 --> 00:14:16.088
You can also use unmount to manually
remove it but I find that cleanup is

216
00:14:16.088 --> 00:14:19.690
easier, you just after each cleanup and
it'll remove everything.

217
00:14:19.690 --> 00:14:22.378
It's a little bit of extra work,
but it means that we

218
00:14:22.378 --> 00:14:26.660
can use this other utility that
I'll show you a little bit later.

219
00:14:26.660 --> 00:14:30.600
So that things can be a little less
simulated and a little more actualated.

220
00:14:30.600 --> 00:14:34.140
Yeah, that's not a word, but.

