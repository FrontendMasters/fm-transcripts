WEBVTT

1
00:00:02.250 --> 00:00:04.562
&gt;&gt; Kent C. Dodds: So we're actually
moving on to the next section,

2
00:00:04.562 --> 00:00:08.030
but we're staying in the same login
component for this next section.

3
00:00:08.030 --> 00:00:11.290
It's going to be a short
section about snapshot testing.

4
00:00:11.290 --> 00:00:14.148
How many people are using Jest snapshots?

5
00:00:14.148 --> 00:00:16.170
Okay, a couple of you, cool.

6
00:00:16.170 --> 00:00:17.340
Looks like I broke a test.

7
00:00:17.340 --> 00:00:18.720
I'm not going to worry about fixing it.

8
00:00:18.720 --> 00:00:21.150
So I'm going to reset everything.

9
00:00:21.150 --> 00:00:22.490
So I'm back to square one.

10
00:00:23.740 --> 00:00:27.210
So snapshots are kind of nifty.

11
00:00:27.210 --> 00:00:29.782
So I'll come back here in just a sec, but

12
00:00:29.782 --> 00:00:33.802
I'm gonna give you a little demo
of what snapshots really are.

13
00:00:33.802 --> 00:00:37.637
So let's see, it is just expect and test.

14
00:00:37.637 --> 00:00:40.505
[COUGH] Sorry.

15
00:00:40.505 --> 00:00:41.944
Okay, so here it's

16
00:00:41.944 --> 00:00:46.360
other/test-expect/_tests_/expect-asserti-
ons.

17
00:00:46.360 --> 00:00:49.010
You don't have to follow along if you
don't want to, but that's where I am.

18
00:00:49.010 --> 00:00:53.990
If you want to reference some
of these expectations that Jest

19
00:00:53.990 --> 00:00:57.540
provides in its assertion library,
you can look at these and reference these.

20
00:00:57.540 --> 00:01:03.021
But down here toward
the bottom we have snapshots.

21
00:01:03.021 --> 00:01:08.510
So here is what I like to
call a manual snapshot,

22
00:01:08.510 --> 00:01:13.602
and actually let me run this test:expect.

23
00:01:13.602 --> 00:01:20.488
Okay,
&gt;&gt; Kent C. Dodds: So

24
00:01:20.488 --> 00:01:25.128
here we're getting these flying
superheroes from this superheroes

25
00:01:25.128 --> 00:01:27.500
file I'll show you in a sec.

26
00:01:27.500 --> 00:01:32.780
And we're expecting that those equal this
array of these superheroes who can fly.

27
00:01:32.780 --> 00:01:34.960
I'm pretty sure I got these
from the Incredibles.

28
00:01:34.960 --> 00:01:37.190
So yeah, fun stuff.

29
00:01:37.190 --> 00:01:40.380
Okay, so here's our superheroes file.

30
00:01:40.380 --> 00:01:42.580
We have this data with superheroes.

31
00:01:42.580 --> 00:01:47.020
And then we discover, my,
Jack-Jack, he can do everything.

32
00:01:47.020 --> 00:01:50.660
He's the coolest, shape shifting, and
flying, and all kinds of cool stuff.

33
00:01:50.660 --> 00:01:55.840
So we're gonna save our file and
now we have a failing test, right?

34
00:01:55.840 --> 00:01:57.730
Because now there's a new superhero,

35
00:01:57.730 --> 00:02:02.660
he can fly, and
we see that very clearly in the output.

36
00:02:02.660 --> 00:02:08.690
You see the snapshot, no, sorry,
one second, let me just .only this.

37
00:02:08.690 --> 00:02:13.010
You're seeing spoiler alert, okay.

38
00:02:13.010 --> 00:02:14.310
Here we go, this is the manual snapshot.

39
00:02:14.310 --> 00:02:18.470
So we expected to equal this stuff, but

40
00:02:18.470 --> 00:02:24.300
we got Jack-Jack, and it'll show
us very clearly here that object.

41
00:02:24.300 --> 00:02:25.530
And so it's pretty easy.

42
00:02:25.530 --> 00:02:28.920
And this is how I write tests like this.

43
00:02:28.920 --> 00:02:31.370
When I wrote this test,
this is how I wrote it, and

44
00:02:31.370 --> 00:02:33.160
this is how I update them too.

45
00:02:33.160 --> 00:02:36.250
Console.log(flyingHeroes), save.

46
00:02:36.250 --> 00:02:40.590
And go to my console.log,
copy that and then I will go here and

47
00:02:40.590 --> 00:02:42.670
thank my lucky stars for prettier.

48
00:02:42.670 --> 00:02:44.700
And then I get my test passing, all right?

49
00:02:44.700 --> 00:02:45.495
Ignore this stuff.

50
00:02:45.495 --> 00:02:49.799
[SOUND] So that is a manual snapshot.

51
00:02:49.799 --> 00:02:52.570
And that's effectively
what snapshots are doing.

52
00:02:52.570 --> 00:02:59.020
So it's a mechanism by which
we can take some value,

53
00:02:59.020 --> 00:03:03.110
serialize it into a string, and

54
00:03:03.110 --> 00:03:10.470
then compare it in the future for
our future test runs.

55
00:03:10.470 --> 00:03:13.390
And so yeah,
I used to do this all the time.

56
00:03:13.390 --> 00:03:16.210
I'd have, this is the data,
and it's gonna look like this,

57
00:03:16.210 --> 00:03:20.570
and it changed, console.log, copy paste,
and that's how I do these assertions.

58
00:03:20.570 --> 00:03:24.302
Well, here's what
a snapshot test looks like.

59
00:03:26.612 --> 00:03:29.286
&gt;&gt; Kent C. Dodds: It's very similar,
except instead of two equal and

60
00:03:29.286 --> 00:03:33.080
having the data right there,
you call this toMatchSnapshot.

61
00:03:33.080 --> 00:03:34.010
And let me add this one.

62
00:03:36.471 --> 00:03:39.510
&gt;&gt; Kent C. Dodds: And
this is what it looks like for a failure.

63
00:03:39.510 --> 00:03:41.350
Does that look familiar?

64
00:03:41.350 --> 00:03:44.010
Looks pretty much exactly
the same as the last one.

65
00:03:44.010 --> 00:03:50.260
Except to update this snapshot,
you just hit the U key and,

66
00:03:50.260 --> 00:03:55.330
sorry, ignore that output cuz it's
distracting from what we're doing.

67
00:03:55.330 --> 00:04:00.180
But what it does is it'll go into
this _snapshots_ directory and

68
00:04:00.180 --> 00:04:03.770
create a file that has the same
name as the test file.

69
00:04:03.770 --> 00:04:08.490
And inside of that, it's actually
a Javascript file that has exports and

70
00:04:08.490 --> 00:04:10.360
then the name of the test and

71
00:04:10.360 --> 00:04:15.940
some other information that you can
provide in the to match snapshot API.

72
00:04:15.940 --> 00:04:20.310
And then it shows a serialized version,
but it's pretty printed, so

73
00:04:20.310 --> 00:04:25.150
it says, hey, this is an array,
this is an object, and this is the value.

74
00:04:25.150 --> 00:04:28.716
And then every single call to match
snapshot, it will serialize that value and

75
00:04:28.716 --> 00:04:30.671
then compare it with
the one that it saved.

76
00:04:33.292 --> 00:04:34.664
&gt;&gt; Kent C. Dodds: Did that make sense?

77
00:04:34.664 --> 00:04:37.559
Any questions about that?

78
00:04:37.559 --> 00:04:41.470
&gt;&gt; [INAUDIBLE]
&gt;&gt; Kent C. Dodds: Sorry.

79
00:04:41.470 --> 00:04:42.390
&gt;&gt; Speaker 2: I'm wondering if,

80
00:04:42.390 --> 00:04:47.770
it seems like the U key is a magical
make your test pass button.

81
00:04:47.770 --> 00:04:51.430
So is there a danger to that?

82
00:04:51.430 --> 00:04:54.860
&gt;&gt; Kent C. Dodds: Yeah, let's chat about
that after I get through the rest of this.

83
00:04:54.860 --> 00:04:56.140
But that's a great point.

84
00:04:56.140 --> 00:04:57.270
Don't let me forget.

85
00:04:57.270 --> 00:05:01.872
&gt;&gt; Speaker 2: So this automatic snapshot,
so what are we achieving on an underground

86
00:05:01.872 --> 00:05:06.014
[INAUDIBLE] because we're only
telling I'm getting a result and

87
00:05:06.014 --> 00:05:10.256
I'm matching with another snapshot
that is already available.

88
00:05:10.256 --> 00:05:11.916
&gt;&gt; Kent C. Dodds: Mm-hm.

89
00:05:11.916 --> 00:05:15.650
&gt;&gt; Speaker 2: So I mean, instead of I'm
telling that this is what I expect,

90
00:05:15.650 --> 00:05:20.170
I am getting stored data in some where or
how exactly we're doing it?

91
00:05:20.170 --> 00:05:23.205
&gt;&gt; Kent C. Dodds: Well, so you'll commit
these snapshots to your source control,

92
00:05:23.205 --> 00:05:29.345
and then everybody who pulls this down,
they're gonna have these same

93
00:05:29.345 --> 00:05:32.890
snapshots that they'll compare against
every single time they run the test.

94
00:05:32.890 --> 00:05:36.363
And so any time there's a change
to these snapshots you updat it,

95
00:05:36.363 --> 00:05:40.290
you commit that and it gets,
as part of any pull request or anything.

96
00:05:40.290 --> 00:05:43.650
That's one of the benefits of
the snapshot, it's a really,

97
00:05:43.650 --> 00:05:50.350
really easy way to see how your
changes are impacting some output.

98
00:05:50.350 --> 00:05:54.320
It's a really easy way to do
some really bad things, too, and

99
00:05:54.320 --> 00:05:55.970
we'll talk about those in a little bit.

100
00:05:55.970 --> 00:05:57.990
But yeah, that's kinda the value there.

101
00:05:57.990 --> 00:05:59.007
&gt;&gt; Speaker 3: So if I [INAUDIBLE],

102
00:05:59.007 --> 00:06:02.285
let's say to model,
I'm not going to have a name property.

103
00:06:02.285 --> 00:06:03.000
&gt;&gt; Kent C. Dodds: Mm-hm.

104
00:06:03.000 --> 00:06:06.270
&gt;&gt; Speaker 3: I'll just come to
snapshot file, remove the names so

105
00:06:06.270 --> 00:06:08.320
that my test case will run.

106
00:06:08.320 --> 00:06:10.230
&gt;&gt; Kent C. Dodds: Yeah,
yeah, so you could do that.

107
00:06:10.230 --> 00:06:15.200
But part of the benefit of using
a snapshot rather than putting things

108
00:06:15.200 --> 00:06:20.150
in line here is that what you do
is you just change the code and

109
00:06:20.150 --> 00:06:23.350
then it will say, hey,
your snapshot is failing.

110
00:06:23.350 --> 00:06:26.450
And then you can just press the U key and

111
00:06:26.450 --> 00:06:28.050
it will update your
snapshot automatically.

112
00:06:30.860 --> 00:06:33.550
Yeah, which is a blessing and
a curse, but it's really cool.

113
00:06:35.180 --> 00:06:39.490
Okay, so these objects are not
the only things that you can snapshot.

114
00:06:39.490 --> 00:06:42.250
You can snapshot a lot more things.

115
00:06:42.250 --> 00:06:45.830
So here, I'm gonna just get rid of all
this stuff now and we'll run them all.

116
00:06:47.630 --> 00:06:50.160
So here's an object.

117
00:06:50.160 --> 00:06:53.290
You can have any mix of anything.

118
00:06:53.290 --> 00:06:56.460
You can have a regex, it will
serialize that, so on and so forth.

119
00:06:56.460 --> 00:06:58.640
Let's just look at what
the snapshot looks like for that.

120
00:06:59.910 --> 00:07:03.070
So it will serialize the date,
it's my birthday.

121
00:07:03.070 --> 00:07:06.370
It will serialize an error
with the error message.

122
00:07:06.370 --> 00:07:13.640
It will serialize a map object,
a bigger object, a regex set,

123
00:07:13.640 --> 00:07:18.860
and then what's super duper awesome
is it will even serialize dom nodes.

124
00:07:18.860 --> 00:07:20.970
And so here we created this dom node.

125
00:07:20.970 --> 00:07:22.580
We expect that to match a snapshot.

126
00:07:22.580 --> 00:07:26.116
So you can serialize here or
you can snapshot your container.

127
00:07:26.116 --> 00:07:30.544
I do container.firstchild because the
container is always gonna have a div, so

128
00:07:30.544 --> 00:07:32.848
whatever I’m rendering.

129
00:07:32.848 --> 00:07:38.210
And so here we have a button, and and
it formats it nicely so that if there’s

130
00:07:38.210 --> 00:07:43.250
a change here where it adds another prop,
it’ll only be a change on a single line

131
00:07:43.250 --> 00:07:48.070
rather than being this really weird,
like if everything was on one line and

132
00:07:48.070 --> 00:07:53.120
anything changed in that line is busted,
so it formats it nicely for you.

133
00:07:53.120 --> 00:07:57.726
You can serialize something that
was created with, let's see,

134
00:07:57.726 --> 00:08:03.169
React.createElement, and so
you can serialize a React element, yeah,

135
00:08:03.169 --> 00:08:08.864
this one, and sterilizing those will
actually show you the props of their past,

136
00:08:08.864 --> 00:08:12.160
which is an implementation
detail in my mind.

137
00:08:12.160 --> 00:08:17.310
So I never do this, but
that's just something to be aware of.

138
00:08:17.310 --> 00:08:22.620
Actually if you're using in time and
you try to snapshot a mounted component,

139
00:08:22.620 --> 00:08:26.810
then that will also show you
the props that were passed, and

140
00:08:26.810 --> 00:08:29.530
that's an implementation detail so
I never do that either.

141
00:08:29.530 --> 00:08:35.133
Serialized just the HMTL,
cuz the user doesn't care about the props.

142
00:08:35.133 --> 00:08:39.538
And then yeah,
we also have R3eact test renderer.

143
00:08:39.538 --> 00:08:42.811
You can serialize those and
then things rendered with React on,

144
00:08:42.811 --> 00:08:44.880
which is what React testing library is.

145
00:08:46.337 --> 00:08:49.882
&gt;&gt; Kent C. Dodds: And you can also
give a title for your snapshot like,

146
00:08:49.882 --> 00:08:52.040
where did I do that?

147
00:08:52.040 --> 00:08:52.580
Yeah, right here.

148
00:08:54.090 --> 00:08:58.700
And that will give you more helpful
information in the area output and

149
00:08:58.700 --> 00:09:02.100
in the snapshot file itself.

150
00:09:02.100 --> 00:09:07.190
So one other place that I don't have
an example here, but I'll show you just

151
00:09:07.190 --> 00:09:12.850
because I think it's interesting,
is the, let's see,

152
00:09:12.850 --> 00:09:17.935
probably Babel, here,
let's do, import all.macro.

153
00:09:19.570 --> 00:09:21.830
So I create several Babel plugins.

154
00:09:21.830 --> 00:09:23.820
I think they're a lot of fun, and

155
00:09:23.820 --> 00:09:29.370
snapshots are just the best
way to test a Babel plugin.

156
00:09:29.370 --> 00:09:34.680
And so I have this thing called Babel
testing library that manages this for me.

157
00:09:36.220 --> 00:09:40.870
But here's what the snapshots
look like when you're using

158
00:09:40.870 --> 00:09:42.840
the Babel testing library.

159
00:09:42.840 --> 00:09:46.090
It'll show you the source code and
then it'll have these little arrows and

160
00:09:46.090 --> 00:09:49.350
says that source code,
when using this plugin,

161
00:09:49.350 --> 00:09:54.610
will transpile down to this result.

162
00:09:54.610 --> 00:09:58.220
Yeah, because anything else
would just be total insanity.

163
00:09:58.220 --> 00:10:03.070
So Babel plugins are a really
awesome place to use snapshots.

164
00:10:03.070 --> 00:10:07.920
Also, if you are running a command
line interface tool, a CLI,

165
00:10:07.920 --> 00:10:12.840
the help output from that is also
a good place to use a snapshot.

166
00:10:12.840 --> 00:10:14.540
So it's not just for Reacts.

167
00:10:14.540 --> 00:10:16.070
I know that's kind of where it took off.

168
00:10:16.070 --> 00:10:20.662
But there are lots of really
great use cases for snapshots.

