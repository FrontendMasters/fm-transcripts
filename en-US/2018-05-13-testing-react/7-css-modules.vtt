WEBVTT

1
00:00:00.050 --> 00:00:03.680
&gt;&gt; Kent C. Dodds: Let's move on
to the next problem that we'll

2
00:00:03.680 --> 00:00:08.210
solve with this configuration stuff.

3
00:00:08.210 --> 00:00:15.880
I'm gonna go ahead and
pull in the test for the calculator.

4
00:00:17.320 --> 00:00:20.350
This is the one that kind of pulls
in all the other components.

5
00:00:20.350 --> 00:00:22.350
You might say this is sort
of an integration test,

6
00:00:22.350 --> 00:00:24.070
cuz the calculator is
pretty much the whole app.

7
00:00:26.000 --> 00:00:27.170
Okay, so let's go ahead and

8
00:00:27.170 --> 00:00:31.160
just run mpm t, find out what
problem we're gonna get from this.

9
00:00:32.460 --> 00:00:36.430
And it's that darn dynamic import.

10
00:00:36.430 --> 00:00:39.620
So, quite honestly, having a dynamic
import for an app like this,

11
00:00:39.620 --> 00:00:41.610
like totally worthless cuz it's.

12
00:00:42.860 --> 00:00:47.090
But in a real world application,
you are gonna have dynamic imports.

13
00:00:47.090 --> 00:00:50.920
You should have dynamic imports for
different routes and

14
00:00:50.920 --> 00:00:52.310
components that aren't loaded off in.

15
00:00:52.310 --> 00:00:55.730
Why do you need to load
d3 on the login screen?

16
00:00:55.730 --> 00:00:56.490
Don't do that.

17
00:00:56.490 --> 00:00:59.370
So the problem is that

18
00:01:00.660 --> 00:01:04.860
right now node doesn't support
ES modules or dynamic imports.

19
00:01:04.860 --> 00:01:09.310
The fun thing about that is that
you can dynamically import code and

20
00:01:09.310 --> 00:01:12.790
node using a require statements
at anywhere in the file.

21
00:01:12.790 --> 00:01:15.100
It happened synchronously but

22
00:01:15.100 --> 00:01:19.350
at least you can have it happen to do
a function call or something like that.

23
00:01:19.350 --> 00:01:25.204
So, there is a double transform
that's available that can

24
00:01:25.204 --> 00:01:30.480
convert dynamic import into
the node equivalent that

25
00:01:30.480 --> 00:01:34.202
just as a require segment even though it's
synchronous it turns it into a promise so

26
00:01:34.202 --> 00:01:37.060
that it can simulate the same
kind of thing in node, and so

27
00:01:37.060 --> 00:01:39.870
that's what we're going to
install to make all this work.

28
00:01:39.870 --> 00:01:42.430
So we'll add npm install as a dev,

29
00:01:42.430 --> 00:01:49.350
dependency
babel-plugin-dynamic-import-node.

30
00:01:49.350 --> 00:01:51.745
Babel plugins are normally
named really boring things,

31
00:01:53.895 --> 00:01:55.100
&gt;&gt; Kent C. Dodds: Or descriptive things.

32
00:01:55.100 --> 00:01:58.260
But that's not the only descriptive
module we'll be installing today.

33
00:02:00.370 --> 00:02:02.500
Okay, cool.
So we got that installed and

34
00:02:02.500 --> 00:02:06.740
now we just need to update our battle
configuration to pull that in.

35
00:02:08.690 --> 00:02:11.464
We want this to happen for
our tests but not for

36
00:02:11.464 --> 00:02:16.372
our production code because we do want
dynamic imports in the production code.

37
00:02:16.372 --> 00:02:21.575
And so what we're going to do for
that is we'll say,

38
00:02:21.575 --> 00:02:26.421
if it is test,
then we'll have dynamic, oops,

39
00:02:26.421 --> 00:02:31.890
dynamic-import-node, otherwise
we'll do null.

40
00:02:31.890 --> 00:02:37.260
But null is not a plugin for Babel.

41
00:02:37.260 --> 00:02:38.810
It's going to blow up on us.

42
00:02:38.810 --> 00:02:40.610
So we'll filter Boolean.

43
00:02:40.610 --> 00:02:43.920
This is one of my favorite
tricks is filter all the false-y

44
00:02:43.920 --> 00:02:45.810
things out of this thing.

45
00:02:45.810 --> 00:02:47.110
I wish I could do that for objects.

46
00:02:47.110 --> 00:02:47.840
It's a little more tricky.

47
00:02:47.840 --> 00:02:52.890
You have to do a reduced thing but
yeah, let me double check.

48
00:02:52.890 --> 00:02:54.210
Yep, that's it.

49
00:02:55.860 --> 00:03:03.804
Cool, so now if we run npm t
&gt;&gt; Kent C. Dodds: New error.

50
00:03:03.804 --> 00:03:06.520
Well, it sounds like we
fixed that other error but

51
00:03:06.520 --> 00:03:08.980
cannot read properly getItem of undefined.

52
00:03:08.980 --> 00:03:12.150
Well, let's find out
what that's all about.

53
00:03:13.570 --> 00:03:18.376
Go to the calculator test, while we are
not doing anything called getItem in there

54
00:03:18.376 --> 00:03:23.020
so maybe it's in calculator,
getItem aha, localStorage.getitem.

55
00:03:23.020 --> 00:03:27.420
So apparently it's actually very hard
to simulate local storage in node.

56
00:03:27.420 --> 00:03:30.760
Well at least it was
a couple of years ago.

57
00:03:30.760 --> 00:03:32.910
Now we have proxies and
so it's a lot easier.

58
00:03:32.910 --> 00:03:34.270
But nobody has actually done it yet.

59
00:03:35.650 --> 00:03:37.950
So that could be you.

60
00:03:37.950 --> 00:03:40.860
That would be great if
you wanted to do that.

61
00:03:40.860 --> 00:03:43.498
It'd be kinda a fun thing to support.

