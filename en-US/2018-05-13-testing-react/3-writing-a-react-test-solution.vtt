WEBVTT

1
00:00:00.080 --> 00:00:02.400
&gt;&gt; Kent C. Dodds: Okie dokie,
let's go ahead and make this happen.

2
00:00:02.400 --> 00:00:05.400
So I've got a couple examples up here.

3
00:00:05.400 --> 00:00:08.070
So we're gonna have two
different tests I think that

4
00:00:08.070 --> 00:00:09.720
would make sense in this situation.

5
00:00:11.220 --> 00:00:15.156
For this, I just wanted to get your hands
on the keyboard writing your first test

6
00:00:15.156 --> 00:00:16.705
really quick in the workshop.

7
00:00:16.705 --> 00:00:19.199
So it doesn't have to be
a super high fidelity test.

8
00:00:20.860 --> 00:00:25.300
We can talk about the tradeoffs
of more high fidelity tests,

9
00:00:25.300 --> 00:00:28.690
and maybe some alternative
approaches to testing this.

10
00:00:28.690 --> 00:00:34.390
But let's go ahead and import react and
react-dom, and we'll import our item-list.

11
00:00:34.390 --> 00:00:38.370
And then here I'm going to create
a container to render things to.

12
00:00:38.370 --> 00:00:43.560
So we'll say container =
document.createElement('div').

13
00:00:43.560 --> 00:00:51.290
And then I'll ReactDOM render my UI,
the item list, to that container.

14
00:00:51.290 --> 00:00:54.600
But the item list, if you check it
out here, it's going to expect that.

15
00:00:54.600 --> 00:00:58.529
It's not going to default it, so
let's go ahead and provide items,

16
00:00:58.529 --> 00:01:00.174
that's what it's called.

17
00:01:00.174 --> 00:01:03.330
Empty array.

18
00:01:03.330 --> 00:01:08.950
And now we can actually
console.log container.innerHTML.

19
00:01:08.950 --> 00:01:10.450
So it's just regular DOM node.

20
00:01:10.450 --> 00:01:12.800
Sweet, and it just says no items.

21
00:01:12.800 --> 00:01:14.150
Okay, so we can verify that.

22
00:01:14.150 --> 00:01:16.690
We could just say,
there are various things we could say.

23
00:01:16.690 --> 00:01:18.556
We could say the whole
inner HTML says no items.

24
00:01:18.556 --> 00:01:24.560
And that's what I'm gonna do actually for

25
00:01:24.560 --> 00:01:29.080
this, expect.toBe no items.

26
00:01:29.080 --> 00:01:30.540
Cool, and that passes.

27
00:01:30.540 --> 00:01:34.468
So the reason why I wouldn't actually
do this is what if I decide for

28
00:01:34.468 --> 00:01:38.327
style reasons or whatever,
my designer comes in and says, hey,

29
00:01:38.327 --> 00:01:40.877
we want to add a class to this or
something.

30
00:01:40.877 --> 00:01:43.938
So I'm going to put a span here and
then a span.

31
00:01:43.938 --> 00:01:45.442
We'll get rid of that stuff.

32
00:01:45.442 --> 00:01:48.190
And now my test breaks.

33
00:01:50.090 --> 00:01:58.020
So my test breaks, but the actual value
that this is creating for the end user.

34
00:01:58.020 --> 00:02:01.250
As far as the end user is concerned,
this is a total refactor.

35
00:02:01.250 --> 00:02:03.850
It's not changing the behavior for
the user.

36
00:02:03.850 --> 00:02:07.340
It's not changing
anything of significance.

37
00:02:07.340 --> 00:02:12.150
And so the fact that my test broke for
a change like this, that's frustrating.

38
00:02:12.150 --> 00:02:16.470
This is one of the reasons why
testing UI is so frustrating and

39
00:02:16.470 --> 00:02:17.924
people kind of give up on it.

40
00:02:17.924 --> 00:02:22.240
It's because we're,
technically it's not actually a refactor.

41
00:02:22.240 --> 00:02:24.270
It is changing the way that it works.

42
00:02:24.270 --> 00:02:27.651
But as far as the user is concerned, they
don't care that it's a span or a div or

43
00:02:27.651 --> 00:02:28.840
an h1 or any of that stuff.

44
00:02:28.840 --> 00:02:31.500
They just care about what it looks like.

45
00:02:31.500 --> 00:02:35.770
And so when we're testing,
we want to focus more on

46
00:02:35.770 --> 00:02:39.530
what are the important parts
that we wanna verify about this.

47
00:02:39.530 --> 00:02:44.530
And so sometimes that leads to may be
a little less fidelity type of test.

48
00:02:44.530 --> 00:02:51.350
But in general you can still kind of
get the confidence you're looking for

49
00:02:51.350 --> 00:02:56.860
without having to be so
strict about what your test is like.

50
00:02:56.860 --> 00:03:03.890
So what we're gonna do instead of
checking the inner HTML is we're going to

51
00:03:03.890 --> 00:03:10.550
check the text content to match no items.

52
00:03:10.550 --> 00:03:13.620
And now with that,
I can style this differently.

53
00:03:13.620 --> 00:03:14.286
I could put this in a div.

54
00:03:14.286 --> 00:03:21.840
And so that actually will still work
cuz the way text content works.

55
00:03:21.840 --> 00:03:24.970
So yeah, lots of different
things you can do about this.

56
00:03:24.970 --> 00:03:29.301
And I'm totally cool with focusing
more on what's the user's

57
00:03:29.301 --> 00:03:34.040
experience going to be and how do I
want to verify that user experience

58
00:03:34.040 --> 00:03:38.222
versus making sure that my DOM
structure is always the same.

59
00:03:38.222 --> 00:03:40.990
Because that doesn't really matter for
the user.

60
00:03:40.990 --> 00:03:42.210
Yeah?
&gt;&gt; Speaker 2: I was just gonna to point

61
00:03:42.210 --> 00:03:47.690
out, I was initially confused about
this because I thought that to match was

62
00:03:47.690 --> 00:03:49.050
an exact text match.

63
00:03:49.050 --> 00:03:49.658
&gt;&gt; Kent C. Dodds: Mm, yeah, sorry.

64
00:03:49.658 --> 00:03:54.710
&gt;&gt; Speaker 2: And it turns out, it's
a regex match, which is obviously broader.

65
00:03:54.710 --> 00:03:58.128
&gt;&gt; Kent C. Dodds: Yeah, yeah.
So I kinda tried to show you in this

66
00:03:58.128 --> 00:04:03.350
example that some text
content matches just text.

67
00:04:03.350 --> 00:04:06.440
So it can match a sub text, so.

68
00:04:06.440 --> 00:04:10.630
Sorry, that's kind of
a jest specific thing.

69
00:04:10.630 --> 00:04:17.595
I probably should have also referenced
everyone to the Jest expect documentation.

70
00:04:17.595 --> 00:04:22.340
So I'll send you off to that,
here in the chat.

71
00:04:22.340 --> 00:04:27.410
In a second, I'll get that to you, or
somebody can paste that in the chat.

72
00:04:27.410 --> 00:04:27.910
Cool.

73
00:04:27.910 --> 00:04:29.240
Any other questions about that?

74
00:04:29.240 --> 00:04:30.270
Yes?

75
00:04:30.270 --> 00:04:33.930
&gt;&gt; Speaker 3: So not really related,
but kind of on the same vein,

76
00:04:33.930 --> 00:04:37.510
you started talking about DOM
structure and stuff like that.

77
00:04:37.510 --> 00:04:40.476
Do you ever, for branding purpose,

78
00:04:40.476 --> 00:04:45.166
will you ever verify anything
is visually correct using,

79
00:04:45.166 --> 00:04:49.870
test it like this, or
in Cypress or somewhere else?

80
00:04:49.870 --> 00:04:54.009
Or do you generally leave that
to sort of the manual testing?

81
00:04:55.050 --> 00:04:56.410
&gt;&gt; Kent C. Dodds: Yeah,
that's a great question.

82
00:04:56.410 --> 00:05:01.370
So there are various totally reasonable

83
00:05:01.370 --> 00:05:07.070
reasons that you would want to verify
things look the way that they should.

84
00:05:07.070 --> 00:05:08.708
How many people have shipped a CSS bug?

85
00:05:08.708 --> 00:05:11.600
Like everybody has shipped a CSS bug.

86
00:05:12.750 --> 00:05:17.340
So verifying CSS or the style of
the page is actually quite difficult.

87
00:05:17.340 --> 00:05:18.740
It's getting easier.

88
00:05:18.740 --> 00:05:21.586
There are a lots of tools out there for
visual regression testing.

89
00:05:21.586 --> 00:05:24.970
And those tools are getting better.

90
00:05:24.970 --> 00:05:28.110
We're not going to cover any of those.

91
00:05:28.110 --> 00:05:30.450
But I know Cypress supports
screenshotting, and

92
00:05:30.450 --> 00:05:31.973
you can use that to do diffs.

93
00:05:31.973 --> 00:05:35.929
There's also Puppeteer that you can use
with Jest to to do these visual diffs.

94
00:05:35.929 --> 00:05:39.753
And I know there are tools that
kind of come out of the box

95
00:05:39.753 --> 00:05:42.464
with these different capabilities.

96
00:05:42.464 --> 00:05:45.300
And so yeah, we're not gonna be
covering visual regression testing.

97
00:05:45.300 --> 00:05:51.070
One other thing that I should mention and
that we'll actually see is,

98
00:05:51.070 --> 00:05:55.960
the application we'll be testing
uses Glamorous for its styling, so

99
00:05:55.960 --> 00:05:58.790
a CSS and JS library.

100
00:05:58.790 --> 00:06:02.068
And so because all of that's
happening in JavaScript,

101
00:06:02.068 --> 00:06:05.400
you can actually make
assertions on the styles.

102
00:06:05.400 --> 00:06:10.374
And so that can kind of get you
a middle ground between an actual

103
00:06:10.374 --> 00:06:14.883
visual regression test and
just a regular in Node test.

104
00:06:14.883 --> 00:06:19.872
And so it gets you a little closer there
without lots of the drawbacks of visual

105
00:06:19.872 --> 00:06:24.326
regression testing with regard to
how difficult it is to maintain and

106
00:06:24.326 --> 00:06:25.650
that kind of thing.

107
00:06:25.650 --> 00:06:33.396
So if the look and feel of your
application is of great concern.

108
00:06:33.396 --> 00:06:39.271
Especially if you're white labelling and
the style can be applied differently, then

109
00:06:39.271 --> 00:06:44.950
yeah, you might wanna add some additional
tests to verify that and that can work.

110
00:06:44.950 --> 00:06:49.159
And you might be able to accomplish
that in regular JavaScript tests.

111
00:06:49.159 --> 00:06:52.200
But in general, you probably wanna use
a visual regression tool for that.

112
00:06:55.960 --> 00:06:56.927
Okay, cool.

113
00:06:56.927 --> 00:07:00.813
The title of this is no good, so

114
00:07:00.813 --> 00:07:07.020
renders no items when no items are given.

115
00:07:07.020 --> 00:07:11.360
Something useful, so
when it fails, like this.

116
00:07:13.040 --> 00:07:18.278
You can read the test and understand
what it's supposed to be verifying.

117
00:07:18.278 --> 00:07:23.000
For our next one, let's fix this.

118
00:07:24.310 --> 00:07:29.310
We want to test that it
renders the items given.

119
00:07:30.530 --> 00:07:34.650
And here it's gonna be quite similar,
so we'll just stick that there.

120
00:07:34.650 --> 00:07:38.149
And the items, I gave you a list here,
we'll just use that same one.

121
00:07:41.414 --> 00:07:46.406
&gt;&gt; Kent C. Dodds: And here,
we can just verify that text context

122
00:07:46.406 --> 00:07:51.690
matches apple, and orange, and pear.

123
00:07:51.690 --> 00:07:53.690
And that will get our test passing.

124
00:07:53.690 --> 00:07:55.500
This is not a high fidelity test at all,

125
00:07:55.500 --> 00:07:59.710
because this item list could
be like changing the order.

126
00:07:59.710 --> 00:08:05.740
Or the fact that it's a ul and an li could
be actually important, or various things.

127
00:08:06.820 --> 00:08:09.930
But I am trying to illustrate that

128
00:08:11.070 --> 00:08:16.430
you should really only be testing
the things that are actually important for

129
00:08:16.430 --> 00:08:19.310
your verification,
to make sure that you're confident.

130
00:08:19.310 --> 00:08:23.320
So what are the chances that
somebody's gonna change this

131
00:08:23.320 --> 00:08:27.620
ul to an ol on accident,
and not intentionally?

132
00:08:27.620 --> 00:08:28.990
Not very great.

133
00:08:28.990 --> 00:08:32.690
But if you are concerned
about the structure,

134
00:08:32.690 --> 00:08:35.640
then you could use a snapshot test for
this stuff.

135
00:08:35.640 --> 00:08:37.970
And we'll talk about that more later.

136
00:08:37.970 --> 00:08:40.430
But yeah, in general,

137
00:08:40.430 --> 00:08:44.660
this is a pretty good test to verify that
at least those things are being rendered.

138
00:08:45.870 --> 00:08:48.000
Each one of the items are being rendered.

139
00:08:48.000 --> 00:08:52.013
And so
I don't know if I'd let this go through.

140
00:08:52.013 --> 00:08:55.900
I'd probably merge this pull request,
a pull request for these tests.

141
00:08:56.930 --> 00:08:58.430
But, you could make this
more high fidelity, and

142
00:08:58.430 --> 00:09:00.880
we'll talk about how to do that later.

143
00:09:00.880 --> 00:09:04.050
This is more just getting you into
the mindset of testing React.

