WEBVTT

1
00:00:00.210 --> 00:00:03.440
&gt;&gt; Kent C. Dodds: Here, I'm going
to first import React from 'react'.

2
00:00:03.440 --> 00:00:08.440
We're gonna be using
JSX React.createElement, so we need that.

3
00:00:08.440 --> 00:00:14.563
We'll also import the Editor
from '../editor'.

4
00:00:14.563 --> 00:00:20.760
And then,
we need to arrange things however we want.

5
00:00:20.760 --> 00:00:26.600
So I'm gonna make a container div for
rendering.

6
00:00:26.600 --> 00:00:31.680
So I'll have
document.createElement ('div').

7
00:00:31.680 --> 00:00:36.344
And then I'm actually gonna be rendering,
so

8
00:00:36.344 --> 00:00:41.019
I'll import reactDOM from 'react-dom'.

9
00:00:41.019 --> 00:00:47.816
And then, we'll do ReactDOM.render,

10
00:00:47.816 --> 00:00:53.660
my UI Editor, with the container.

11
00:00:53.660 --> 00:01:00.330
And let's actually take a look at what
this thing really is expecting of us.

12
00:01:01.710 --> 00:01:05.613
There we go,
it should actually be pulling in the to do

13
00:01:07.191 --> 00:01:09.840
&gt;&gt; Kent C. Dodds: todo, okay?

14
00:01:09.840 --> 00:01:12.810
Okay, so the editor is pretty simple.

15
00:01:12.810 --> 00:01:19.030
It's a form, and then it has a submit
handler that we'll be testing.

16
00:01:20.500 --> 00:01:23.500
So yeah, so we rendered that.

17
00:01:23.500 --> 00:01:26.677
We're gonna look for all of the form
elements, fill them out, and

18
00:01:26.677 --> 00:01:27.770
then submit the form.

19
00:01:29.030 --> 00:01:33.890
So let's get our title, content, and tags.

20
00:01:33.890 --> 00:01:40.280
title = container,
how are we gonna get this?

21
00:01:40.280 --> 00:01:44.930
So spoiler alert, we're gonna have a much
better way to get this in a little bit.

22
00:01:44.930 --> 00:01:47.140
But I thought it would be good for
you to feel the pain first.

23
00:01:47.140 --> 00:01:49.470
[LAUGH] So we've got the form.

24
00:01:49.470 --> 00:01:55.354
One thing that we could do is,
all of these form elements have a name,

25
00:01:55.354 --> 00:01:58.302
and that's kind of a handy thing.

26
00:01:58.302 --> 00:02:00.210
So let's go ahead and get our form first.

27
00:02:00.210 --> 00:02:07.230
We'll say const form =
container.querySelector('form').

28
00:02:07.230 --> 00:02:14.284
And then, it will log
the (Object.keys(form.elements)).

29
00:02:14.284 --> 00:02:16.660
So you can see with that looks like.

30
00:02:16.660 --> 00:02:20.460
To run these tests, and
you'll be doing this as well, npm run.

31
00:02:20.460 --> 00:02:21.413
Or here, let me make sure.

32
00:02:21.413 --> 00:02:25.290
I think it's, yeah, npm run test:client.

33
00:02:25.290 --> 00:02:27.180
Make sure you only run
the client side test.

34
00:02:28.350 --> 00:02:30.310
Okay, so you get zero, one two three.

35
00:02:30.310 --> 00:02:34.815
That's, hold on a second,
that's not right.

36
00:02:34.815 --> 00:02:39.640
elements.title, yeah, there we go.

37
00:02:39.640 --> 00:02:41.080
I guess that's not one of the keys.

38
00:02:41.080 --> 00:02:46.300
But yeah, so the form, and
this is not React stuff.

39
00:02:46.300 --> 00:02:49.290
The only React thing right here,
is right there.

40
00:02:49.290 --> 00:02:52.730
That's the only React thing, all the rest
of this stuff you could do with Vue,

41
00:02:52.730 --> 00:02:54.540
Angular, anything else.

42
00:02:54.540 --> 00:02:56.820
Because there you're just
dealing with DOM nodes.

43
00:02:56.820 --> 00:03:01.980
And so
this form in the DOM has elements and

44
00:03:01.980 --> 00:03:06.600
that has, actually,
it's an HTML collection.

45
00:03:06.600 --> 00:03:08.380
And so you have zero, one, two,

46
00:03:08.380 --> 00:03:12.200
three that's associated with
each element in the form.

47
00:03:12.200 --> 00:03:14.852
But then it also has properties for

48
00:03:14.852 --> 00:03:19.500
every named item in that form,
it's pretty nifty.

49
00:03:19.500 --> 00:03:23.870
So we can get the title,
I wonder if destructuring works with this?

50
00:03:23.870 --> 00:03:24.780
I haven't tried this.

51
00:03:24.780 --> 00:03:31.289
See if we can get the title,
the content, and the tags.

52
00:03:31.289 --> 00:03:35.580
Title, yeah, cool, that's handy.

53
00:03:35.580 --> 00:03:37.460
And then with that,
we can fill those things out.

54
00:03:37.460 --> 00:03:41.940
So I'll say title.value = 'foobar'.

55
00:03:41.940 --> 00:03:48.810
Let's do something more interesting,
'I like twix'.

56
00:03:48.810 --> 00:03:52.215
And the content value is also text area.

57
00:03:52.215 --> 00:03:58.070
So we'll just set the value of the text
area, Like a lot Sorta, I guess.

58
00:03:58.070 --> 00:04:00.999
And then tags, so tags is an input.

59
00:04:02.120 --> 00:04:05.311
And it's expected to have
comma-separated tags.

60
00:04:05.311 --> 00:04:10.140
So one of the features we might wanna
test is this logic right here, where it

61
00:04:10.140 --> 00:04:15.220
will split by the commas and then trim
those, so that they don't have spaces.

62
00:04:15.220 --> 00:04:23.920
So we'll do this, we'll say
tags.value equal twix, my, likes.

63
00:04:23.920 --> 00:04:25.900
So we kinda get some
of that testing there.

64
00:04:25.900 --> 00:04:32.250
And here we can even do a couple after,
yeah, cool.

65
00:04:33.300 --> 00:04:37.560
So now that all of these
form values are set, and

66
00:04:37.560 --> 00:04:42.320
as far as our test is concerned,
or our source code is concerned,

67
00:04:42.320 --> 00:04:45.500
it doesn't actually matter how
those values get set in there.

68
00:04:45.500 --> 00:04:47.860
This isn't a dynamic form,
it's a static form.

69
00:04:47.860 --> 00:04:51.816
And so the form has values,
and then the submit is fired.

70
00:04:51.816 --> 00:04:53.978
Now, if this was a dynamic form,
it had onchanges,

71
00:04:53.978 --> 00:04:55.710
then we would have to do some extra stuff.

72
00:04:55.710 --> 00:04:57.570
And we can talk about that later.

73
00:04:57.570 --> 00:05:01.674
But yeah, for our purposes,
we can just set the values as they are,

74
00:05:01.674 --> 00:05:05.930
not have to worry about firing
onchange events or anything like that.

75
00:05:07.210 --> 00:05:11.820
But we do now need to fire
a submit event on this form.

76
00:05:12.850 --> 00:05:14.570
And so that's what we're going to do.

77
00:05:14.570 --> 00:05:20.284
Say, submit = new Event('submit').

78
00:05:20.284 --> 00:05:25.192
So it's like a window.Event.

79
00:05:25.192 --> 00:05:32.366
[COUGH] And
then we'll say form.dispatchEvent(submit).

80
00:05:32.366 --> 00:05:35.300
Don't worry, this isn't how you're
gonna be doing all of your tests.

81
00:05:35.300 --> 00:05:37.070
We've got some utilities
that we'll use later.

82
00:05:37.070 --> 00:05:40.370
But I think it's really important for
you to understand your abstractions, and

83
00:05:40.370 --> 00:05:41.200
this is how they work.

84
00:05:41.200 --> 00:05:43.080
Or at least it's similar.

85
00:05:44.480 --> 00:05:50.660
Okay, so with that,
our handleSubmit should get fired.

86
00:05:50.660 --> 00:05:56.273
So let's, actually,
I'm just gonna throw an Error('here').

87
00:05:56.273 --> 00:05:59.720
And we'll test that, here it is.

88
00:05:59.720 --> 00:06:03.460
Yay, jazz hands.

89
00:06:03.460 --> 00:06:08.160
Okay, so now actually,
I have this fancy thing I call throw log,

90
00:06:08.160 --> 00:06:12.350
that will let me stringify anything.

91
00:06:12.350 --> 00:06:20.120
And it looks like we're failing before,
cannot read property id or undefined.

92
00:06:20.120 --> 00:06:21.260
Yep, we're missing a prop.

93
00:06:22.400 --> 00:06:29.280
So let's pass a fake user,
that's fakeUser here.

94
00:06:29.280 --> 00:06:31.563
User is our fakeUser.

95
00:06:31.563 --> 00:06:35.120
And it looks like that fake user
just needs an id for the author id.

96
00:06:35.120 --> 00:06:39.935
We're creating the codes for that,

97
00:06:39.935 --> 00:06:43.790
so id: "foobar", cool.

98
00:06:43.790 --> 00:06:44.970
And then that's throw log.

99
00:06:44.970 --> 00:06:46.940
So this is what things look like.

100
00:06:46.940 --> 00:06:50.610
We have this newPost, all of that stuff.

101
00:06:50.610 --> 00:06:52.430
That's great, okay.

102
00:06:52.430 --> 00:06:54.396
So if I remove that throw log,

103
00:06:54.396 --> 00:06:58.500
what's gonna happen is this
api.posts is gonna get called.

104
00:06:58.500 --> 00:07:04.078
And we're gonna have a bit of a problem.

105
00:07:06.623 --> 00:07:08.820
&gt;&gt; Kent C. Dodds: What
do I want to explain?

106
00:07:08.820 --> 00:07:13.190
Suffice it to say that
we don't actually want

107
00:07:13.190 --> 00:07:18.170
to make an HTTP request when
we're writing in a test.

108
00:07:18.170 --> 00:07:21.170
That would make our test very brittle,
very slow.

109
00:07:21.170 --> 00:07:25.860
And there are other kinds of tests
that we can write to cover that.

110
00:07:25.860 --> 00:07:28.080
We'll talk about that
with the end to end test.

111
00:07:28.080 --> 00:07:33.290
For right now, let's just make sure
that API is being called properly.

112
00:07:33.290 --> 00:07:35.730
So there are couple of
ways that we can do this.

113
00:07:35.730 --> 00:07:42.540
And we talked about some of those in
great depth in my workshop yesterday.

114
00:07:42.540 --> 00:07:45.325
And actually, where'd the slides go?

115
00:07:45.325 --> 00:07:49.720
Here they are, those are all messed up.

116
00:07:49.720 --> 00:07:55.490
But here is another blog post where,
if you want to get in deeper on

117
00:07:55.490 --> 00:07:58.800
the subject we're about to talk about,
it's mocks.

118
00:07:58.800 --> 00:08:04.576
And so I'll take you through working your
way to a good mock solution with Jest.

119
00:08:04.576 --> 00:08:08.469
So go check that out if you're not super
comfortable with what we're about to do.

120
00:08:08.469 --> 00:08:15.578
But we need to mock this API module.

121
00:08:15.578 --> 00:08:16.372
So yeah, let's go ahead and do that.

122
00:08:16.372 --> 00:08:20.748
We'll say jest.mock, and
we need a relative path,

123
00:08:20.748 --> 00:08:25.327
that's relative to this module
where we are right now.

124
00:08:25.327 --> 00:08:31.080
So it will be up into the tests,
up to the screens, so on and so forth.

125
00:08:32.198 --> 00:08:35.872
And so that is going to be one
directory more than this one.

126
00:08:38.284 --> 00:08:42.271
&gt;&gt; Kent C. Dodds: And we want to mock that
with our own custom mock here that will

127
00:08:42.271 --> 00:08:45.250
return an object,
which is our mock object.

128
00:08:45.250 --> 00:08:49.320
So when this pulls in API,
instead of the actual API module,

129
00:08:49.320 --> 00:08:52.590
it will pull in whatever
we're returning from here.

130
00:08:54.190 --> 00:08:58.740
And so we'll have posts is
something on the mock object.

131
00:08:58.740 --> 00:09:01.500
And that's an object
that has a create method.

132
00:09:03.320 --> 00:09:05.739
And we'll make that a jest function.

133
00:09:05.739 --> 00:09:10.040
So that's just a fake function,
it keeps track of how it's called,

134
00:09:10.040 --> 00:09:13.600
when it's called, that kind of thing,
and what it's called with.

135
00:09:13.600 --> 00:09:15.123
And we need it to return a promise.

136
00:09:15.123 --> 00:09:18.367
That promise doesn't need
to resolve to anything, so

137
00:09:18.367 --> 00:09:21.360
we'll just have it return
to Promise.resolve.

138
00:09:21.360 --> 00:09:24.080
So a resolve promise,
it'll happen instantly or

139
00:09:24.080 --> 00:09:25.410
on the next tick of the event loop.

140
00:09:27.860 --> 00:09:29.750
Okay, cool, good.

141
00:09:29.750 --> 00:09:36.530
So, cannot read push of undefined,
looks like we also need the history prop.

142
00:09:36.530 --> 00:09:43.520
So this is history from React Router, and
because this is a React Router screen.

143
00:09:44.750 --> 00:09:48.029
And so we'll just make a fake history.

144
00:09:48.029 --> 00:09:53.380
const fakeHistory equals,
something that resembles this same API.

145
00:09:53.380 --> 00:09:57.050
We could actually just make
it an array if we want.

146
00:09:57.050 --> 00:09:58.230
But I don't want to do that.

147
00:09:58.230 --> 00:10:01.919
We'll just make a, well, yeah,

148
00:10:01.919 --> 00:10:08.440
we'll make it a push method
that is a jest function.

149
00:10:08.440 --> 00:10:10.400
And then we can make assertions on that.

150
00:10:12.900 --> 00:10:16.670
Okay, then we say history
is our fakeHistory.

151
00:10:16.670 --> 00:10:23.263
You do this a lot when you're unit
testing, making fake versions of things.

152
00:10:23.263 --> 00:10:26.710
Especially if it's coming in as a prop,
you'll do that.

153
00:10:26.710 --> 00:10:31.390
If it's a module dependency,
you'll use this jest mock thing.

154
00:10:31.390 --> 00:10:36.871
In a second, I can show you how we could
actually pass this as a prop as well,

155
00:10:36.871 --> 00:10:40.884
using kind of a pseudo-dependency
injection thing.

156
00:10:40.884 --> 00:10:42.770
So yeah, now our tests are passing.

157
00:10:42.770 --> 00:10:47.500
But we're not making any assertions,
we're just, the code runs.

158
00:10:47.500 --> 00:10:50.430
So let's go ahead and
make some assertions.

159
00:10:50.430 --> 00:10:55.130
So we've got a couple of functions.

160
00:10:55.130 --> 00:10:57.305
Probably the easiest assertion
we can make right now is

161
00:10:57.305 --> 00:11:06.510
expect(fakeHistory.push).toHaveBeenCalled-
Times(1.

162
00:11:06.510 --> 00:11:08.150
So that should pass.

163
00:11:09.520 --> 00:11:10.930
But it doesn't, what?

164
00:11:11.950 --> 00:11:13.790
No, no, this is good.

165
00:11:13.790 --> 00:11:20.410
So the reason that fails is
because this is asynchronous.

166
00:11:21.720 --> 00:11:25.750
Okay, so we need to wait for
that to resolve.

167
00:11:25.750 --> 00:11:34.560
And so I've got this handy little
trick that I call flushPromises.

168
00:11:34.560 --> 00:11:37.955
And that is just an arrow
function that uses setTimeout.

169
00:11:39.522 --> 00:11:44.870
&gt;&gt; Kent C. Dodds: Well, actually,
it's kind of more complicated than that.

170
00:11:44.870 --> 00:11:49.162
It'll be return a new
Promise that resolves,

171
00:11:52.832 --> 00:11:54.559
&gt;&gt; Kent C. Dodds: And inside of here,

172
00:11:54.559 --> 00:11:58.860
we'll do setTimeout with resolve,
and then 0.

173
00:11:58.860 --> 00:12:03.570
So what this does is it means
that this thing will wait

174
00:12:03.570 --> 00:12:08.540
until the next tick of the event
loop before it is resolved.

175
00:12:08.540 --> 00:12:12.760
And if we make this an async test,

176
00:12:14.050 --> 00:12:18.970
then we can say await,
till the next tick of the event loop.

177
00:12:18.970 --> 00:12:22.054
And then we'll run the rest
of the assertions, cool.

178
00:12:24.682 --> 00:12:27.310
&gt;&gt; Kent C. Dodds: Again,
we've got utilities for all this stuff.

179
00:12:27.310 --> 00:12:30.399
And your tests will actually
be a lot simpler than this.

180
00:12:31.930 --> 00:12:34.746
And so this is mostly to give you
exposure to what's possible, and

181
00:12:34.746 --> 00:12:36.500
then you can look at it later.

182
00:12:36.500 --> 00:12:38.574
So we do wanna make a couple
of more assertions.

183
00:12:38.574 --> 00:12:43.430
And those will be toHaveBeenCalledWith.

184
00:12:43.430 --> 00:12:45.031
So it was called but was it,

185
00:12:45.031 --> 00:12:48.245
are we actually redirecting
the user to the homepage?

186
00:12:48.245 --> 00:12:51.110
We'll assert that and
make sure this is running, not.

187
00:12:51.110 --> 00:12:54.150
This is actually one case where you really
wanna make sure that your assertions

188
00:12:54.150 --> 00:12:57.550
are running, because we're
dealing with asynchronous stuff.

189
00:12:57.550 --> 00:13:00.190
And so maybe this never resolves,
but the test still finishes or

190
00:13:00.190 --> 00:13:03.090
something like that, and so
these assertions never run.

191
00:13:03.090 --> 00:13:05.800
So you really wanna make
sure that they run, and

192
00:13:05.800 --> 00:13:07.300
that they're testing
what you think they are.

193
00:13:07.300 --> 00:13:11.400
So I can make it fail by
changing my source code.

194
00:13:11.400 --> 00:13:13.840
Because this fails,
I know that I'm testing what I think I am.

195
00:13:15.790 --> 00:13:17.440
Cool, so what else can we test?

196
00:13:17.440 --> 00:13:23.040
We can make sure that api.posts.create
was called with the newPost.

197
00:13:23.040 --> 00:13:29.864
So, we'll expect api,
or fake, sorry, sorry.

198
00:13:29.864 --> 00:13:31.610
Where did you go?

199
00:13:31.610 --> 00:13:35.541
We need to get access to our fake mock.

200
00:13:35.541 --> 00:13:39.190
And a handy thing with this
is we can actually import.

201
00:13:39.190 --> 00:13:44.756
So, as utils,
from the same path utils/api.

202
00:13:44.756 --> 00:13:48.409
And this will actually make it so,
even within the same file,

203
00:13:48.409 --> 00:13:51.312
we're importing that
mock that we create here.

204
00:13:51.312 --> 00:13:53.325
So this, we can call it utilsMock.

205
00:13:55.887 --> 00:14:02.758
&gt;&gt; Kent C. Dodds: Okay, so
we'll expect the utilsMock.post.create

206
00:14:02.758 --> 00:14:07.098
toHaveBeenCalledTimes(1).

207
00:14:07.098 --> 00:14:09.440
I think this is actually
supposed to be posts.

208
00:14:09.440 --> 00:14:12.383
Thank you, ESLint,
sometimes you are helpful.

209
00:14:12.383 --> 00:14:13.242
That happened too fast.

210
00:14:13.242 --> 00:14:15.812
Let's let's make sure, okay, cool.

211
00:14:15.812 --> 00:14:17.401
So it was called once, and

212
00:14:17.401 --> 00:14:20.882
now we wanna make sure it was
called with the right stuff.

213
00:14:23.152 --> 00:14:25.299
&gt;&gt; Kent C. Dodds: We then call
it with just an empty object.

214
00:14:25.299 --> 00:14:26.650
See, great.

215
00:14:26.650 --> 00:14:29.725
So it's gonna have at least,

216
00:14:29.725 --> 00:14:35.016
the authorID will be
the same as our fakeUser.id.

217
00:14:35.016 --> 00:14:40.473
And the title will be
like our title.value.

218
00:14:40.473 --> 00:14:43.446
And the contents, content.value.

219
00:14:43.446 --> 00:14:47.650
And then the tags, there are couple
of things that we could do with this.

220
00:14:47.650 --> 00:14:53.430
We could actually rewrite the logic in
our test, probably not a good idea.

221
00:14:53.430 --> 00:14:55.700
Cuz what if it's broken in both places?

222
00:14:55.700 --> 00:15:00.814
So what we're gonna do instead is,

223
00:15:00.814 --> 00:15:05.760
we'll say twix, my, and likes.

224
00:15:07.840 --> 00:15:14.420
And the reason that it's broken is
because the date, this one's tricky.

225
00:15:14.420 --> 00:15:21.790
So we could say date is
expects.any(String).

226
00:15:21.790 --> 00:15:25.480
It's what it looks like, and
then just be cool with that.

227
00:15:25.480 --> 00:15:28.200
I'd probably actually be cool with that,
but I'll just show you this solution

228
00:15:28.200 --> 00:15:33.600
really quick, an alternative way to verify
that the date is what we think it is.

229
00:15:33.600 --> 00:15:36.530
Don't look at anything else,
that's cheating.

230
00:15:36.530 --> 00:15:40.830
But here, right before I submit,
I create a predate.

231
00:15:40.830 --> 00:15:45.820
And then after this submit is finished,
then I create a postdate.

232
00:15:45.820 --> 00:15:49.640
And then I make sure that
the date that is called with

233
00:15:50.720 --> 00:15:55.580
is greater than or equal to the predate,
and less than or equal to the postdate.

234
00:15:55.580 --> 00:15:59.380
So they created that date,
the post was created between

235
00:15:59.380 --> 00:16:02.470
before I started creating it and
after I created it.

236
00:16:02.470 --> 00:16:06.140
So if you really want to get
deep into verifying this,

237
00:16:06.140 --> 00:16:08.210
then you could do things that way.

238
00:16:08.210 --> 00:16:11.111
I think I'm gonna be cool with just this,
for sure.

