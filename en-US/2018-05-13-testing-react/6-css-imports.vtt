WEBVTT

1
00:00:00.060 --> 00:00:03.880
Okay so let's pull in another test and

2
00:00:03.880 --> 00:00:06.580
deal with the problems of
configuration for that one.

3
00:00:06.580 --> 00:00:13.730
So I'll duplicate this and remove the
.solution to get it in our code base here.

4
00:00:14.990 --> 00:00:19.480
So this is right next to the utils
because auto-scaling-text

5
00:00:19.480 --> 00:00:21.830
is the one that we're trying to test.

6
00:00:21.830 --> 00:00:24.100
So this is a react component.

7
00:00:24.100 --> 00:00:28.330
And has some states doing a component
of life cycles, all that stuffs.

8
00:00:30.740 --> 00:00:34.230
And in our tests,
it's kind of a boring test.

9
00:00:34.230 --> 00:00:38.370
Just because we are not here
right now talking about

10
00:00:38.370 --> 00:00:40.120
what the test should actually look like.

11
00:00:40.120 --> 00:00:41.580
Just configuring things.

12
00:00:41.580 --> 00:00:43.580
So I just wanna make
sure that it can melt.

13
00:00:43.580 --> 00:00:45.500
And that it can be rendered.

14
00:00:45.500 --> 00:00:46.770
So now if we run npm t.

15
00:00:46.770 --> 00:00:50.480
We're gonna run it to your first error.

16
00:00:50.480 --> 00:00:55.870
And that error is, .auto-scaling-text.

17
00:00:55.870 --> 00:00:58.990
What on earth could that possibly be?

18
00:00:58.990 --> 00:01:00.560
So that actually looks
like a class name to me.

19
00:01:00.560 --> 00:01:03.730
And it only looks like a class name to
me because I know that's what it is.

20
00:01:05.620 --> 00:01:09.640
So, it's trying to treat
this as a JavaScript module.

21
00:01:09.640 --> 00:01:16.350
The reason for that is, at the top here,
we're importing this CSS.

22
00:01:16.350 --> 00:01:19.100
So we're using webpack loaders.

23
00:01:19.100 --> 00:01:22.070
This is really, really common for
people will be doing and so

24
00:01:22.070 --> 00:01:27.792
that's why we're including it here
in our configuration setup stuff.

25
00:01:27.792 --> 00:01:29.410
So how do we deal with this?

26
00:01:29.410 --> 00:01:31.000
Well node can't import CSS.

27
00:01:31.000 --> 00:01:36.610
It'll treat all, anything that you import
as either JSON or JavaScript module.

28
00:01:36.610 --> 00:01:39.950
And so, that's why things are blowing up.

29
00:01:39.950 --> 00:01:41.030
So, what we can do.

30
00:01:41.030 --> 00:01:42.840
Let me just clear this out.

31
00:01:42.840 --> 00:01:44.956
Whoops.
Is with jest,

32
00:01:44.956 --> 00:01:49.550
add some additional configuration.

33
00:01:49.550 --> 00:01:52.512
I'm actually gonna pull this out, and

34
00:01:52.512 --> 00:01:57.140
add a configuration file
called jest.config.js.

35
00:01:57.140 --> 00:02:01.582
And Jest will pick that
up by default module that

36
00:02:01.582 --> 00:02:05.176
exports equals jest configuration.

37
00:02:05.176 --> 00:02:06.520
Okay, so now with that,

38
00:02:06.520 --> 00:02:12.395
I'm going to add a new property in our
configuration called moduleNameMapper.

39
00:02:14.350 --> 00:02:21.100
And this is an object where the key is
a string of regex that matches a file and

40
00:02:21.100 --> 00:02:25.890
then the value is a module
that is responsible for

41
00:02:25.890 --> 00:02:28.670
mapping that to something
that's JavaScript.

42
00:02:28.670 --> 00:02:32.460
Okay?
So here, our string regex could be

43
00:02:32.460 --> 00:02:39.260
something like .css, so
something that ends in css, okay?

44
00:02:39.260 --> 00:02:41.900
So any time something ends in css,

45
00:02:41.900 --> 00:02:45.740
we're going to have it
load a different file set.

46
00:02:45.740 --> 00:02:47.290
Let's go ahead and
create that file real quick.

47
00:02:51.980 --> 00:02:53.000
No no, don't do that.

48
00:02:54.410 --> 00:02:55.090
Duplicate.

49
00:02:58.280 --> 00:03:04.830
Okay, so it's going to be in test,
style-mock, and it's

50
00:03:04.830 --> 00:03:08.820
not really going to be anything all that
interesting, just exporting an object.

51
00:03:08.820 --> 00:03:12.910
In fact, this is the default for module,
so this could actually be enough for us.

52
00:03:12.910 --> 00:03:14.810
It just needs to be something that exists.

53
00:03:14.810 --> 00:03:18.110
If you're doing SPGs or
if you're doing like various other things,

54
00:03:18.110 --> 00:03:19.970
it might make sense to put more in here,
but for

55
00:03:19.970 --> 00:03:23.090
our purposes just having
nothing is totally fine.

56
00:03:24.200 --> 00:03:27.670
So here we need to pass up
a path to the module, so

57
00:03:27.670 --> 00:03:33.035
we'll say
require.resolve('./test/style-mock').

58
00:03:35.570 --> 00:03:40.250
And then with that we can
run npm t to run our tests.

59
00:03:40.250 --> 00:03:41.460
We get a new error.

60
00:03:41.460 --> 00:03:42.500
document is not defined.

61
00:03:42.500 --> 00:03:43.470
Who knows why that happened?

62
00:03:45.810 --> 00:03:48.090
Because we switched things over to known.

63
00:03:48.090 --> 00:03:49.910
So I should be jazzed Tom.

64
00:03:49.910 --> 00:03:51.380
Which is the default so we can remove it.

65
00:03:56.160 --> 00:03:56.660
Cool.

66
00:04:00.030 --> 00:04:00.790
Any questions about that?

67
00:04:03.420 --> 00:04:04.340
All right.

68
00:04:04.340 --> 00:04:07.200
So let's, yes question.

69
00:04:08.440 --> 00:04:11.639
&gt;&gt; Let's say you're trying to write.

70
00:04:13.510 --> 00:04:17.170
Code that's actually going to
run both client and server?

71
00:04:17.170 --> 00:04:19.860
&gt;&gt; Yeah, so that's a good question.

72
00:04:19.860 --> 00:04:23.700
The more difficult environment
is the browser, and so

73
00:04:23.700 --> 00:04:26.810
I always test it as if it's
running in the browser.

74
00:04:26.810 --> 00:04:30.110
&gt;&gt; Where do you write separate tests?

75
00:04:30.110 --> 00:04:33.280
&gt;&gt; So if I have a module
that's gonna run in both,

76
00:04:33.280 --> 00:04:35.120
I'll treat it like it's
running in the browser.

77
00:04:36.260 --> 00:04:37.340
&gt;&gt; As a worse case.

78
00:04:37.340 --> 00:04:38.310
&gt;&gt; Yeah, exactly.

79
00:04:39.770 --> 00:04:41.190
Does that make sense?

80
00:04:41.190 --> 00:04:42.170
&gt;&gt; That makes sense.

81
00:04:42.170 --> 00:04:47.050
&gt;&gt; So in a universal application,
you might run in to a problem where

82
00:04:47.050 --> 00:04:50.350
because you're testing it with
the browser environment installed,

83
00:04:50.350 --> 00:04:53.820
you could start using document dot and

84
00:04:53.820 --> 00:04:57.638
stuff in your components, and
that will actually break on the server.

85
00:04:57.638 --> 00:05:02.000
So yeah, and there's some things you can

86
00:05:02.000 --> 00:05:05.990
do to get around that but, because
not always would that be a problem.

87
00:05:05.990 --> 00:05:10.190
Like if you're using document dot but
in components of mal, then that's fine

88
00:05:10.190 --> 00:05:14.770
because components in mal doesn't run on
this server, when you render it that way.

89
00:05:14.770 --> 00:05:19.730
But if like somebody slips it in, like the
root of the module or something like that.

90
00:05:19.730 --> 00:05:23.190
Then that could be a problem and
you wouldn't catch it with your test.

91
00:05:23.190 --> 00:05:26.070
So something that you could do is you
could actually have two different

92
00:05:26.070 --> 00:05:28.380
configurations and run them in parallel.

93
00:05:28.380 --> 00:05:29.760
And I'll show you how to do that.

94
00:05:29.760 --> 00:05:32.140
It's pretty crazy,
like you would run all the same tests but

95
00:05:32.140 --> 00:05:34.649
with two other test environment settings.

96
00:05:36.540 --> 00:05:38.990
It should all work, which is kinda weird.

97
00:05:38.990 --> 00:05:39.990
Unless you wanted to,

98
00:05:39.990 --> 00:05:44.580
some of your tests, actually do mount
the component and then you're like.

99
00:05:44.580 --> 00:05:49.690
And so it might be better just to have
separate tests to make sure you can render

100
00:05:49.690 --> 00:05:53.400
to the initial render,
to static HTML, whatever, or markup.

101
00:05:53.400 --> 00:05:54.510
Yeah?

102
00:05:54.510 --> 00:06:00.970
&gt;&gt; Just curious about that
double backslash in the regex?

103
00:06:00.970 --> 00:06:03.980
&gt;&gt; Yeah, so in JavaScript strings,

104
00:06:03.980 --> 00:06:07.350
we're escaping the backslash,
cuz the backslash is an escape.

105
00:06:07.350 --> 00:06:12.270
So the actual regex will be this,
but because it's a string regex.

106
00:06:12.270 --> 00:06:13.600
&gt;&gt; With a string, yeah, sure.

107
00:06:13.600 --> 00:06:15.400
&gt;&gt; I know, it's kind of like, yeah.

108
00:06:15.400 --> 00:06:18.470
Sometimes you wish that
the API was an array, and

109
00:06:18.470 --> 00:06:23.970
then the has named things like regex or
whatever, but what do you do?

110
00:06:23.970 --> 00:06:25.020
It's not too bad.

111
00:06:25.020 --> 00:06:26.760
We don't use this feature a ton.

112
00:06:26.760 --> 00:06:28.200
Like, we'll have a couple of these, so.

113
00:06:30.070 --> 00:06:31.720
Any other questions?

114
00:06:31.720 --> 00:06:34.380
Remember, people three months from
now are going to have the questions

115
00:06:34.380 --> 00:06:34.989
you're thinking of.

116
00:06:37.040 --> 00:06:38.620
Okay nothing.
Okay cool.

117
00:06:38.620 --> 00:06:42.780
So let's actually,
this is not entirely perfect.

118
00:06:42.780 --> 00:06:47.920
We're using CSS modules here, fun fact,
create react app version two.

119
00:06:47.920 --> 00:06:50.630
We'll support CSS modules and
this is how it will do it.

120
00:06:50.630 --> 00:06:57.160
You'll add a dot module before the dot CSS
and it will treat that as a CSS module.

121
00:06:57.160 --> 00:07:03.640
What that means is what you get back is an
object that has keys for every class name.

122
00:07:03.640 --> 00:07:06.180
So there will be a key,
itâ€™ll be camel cased.

123
00:07:06.180 --> 00:07:10.290
So you can do styles.auto-scaling-text.

124
00:07:10.290 --> 00:07:13.960
And that will be the class name
thatâ€™s associated with those styles.

125
00:07:13.960 --> 00:07:19.380
So weâ€™re using that right here,
auto-scaling-text and

126
00:07:19.380 --> 00:07:22.000
if I go ahead and let's see.

127
00:07:22.000 --> 00:07:23.330
Where'd my test go?

128
00:07:24.870 --> 00:07:30.250
If we go console log div enter HTML and
then run our test again,

129
00:07:31.900 --> 00:07:36.630
then we're going to see, it just has div
and it's not showing me my class name.

130
00:07:36.630 --> 00:07:41.160
And the reason is because our mock here,

131
00:07:41.160 --> 00:07:44.388
the style mock is
exporting an empty object.

132
00:07:44.388 --> 00:07:49.080
So when auto-scaling-text pulls that in,
styles is an empty object,

133
00:07:49.080 --> 00:07:51.440
it's not one that we exported, right?

134
00:07:51.440 --> 00:07:56.490
And so then, when we try to access
the auto-scaling-text, that's undefined.

135
00:07:56.490 --> 00:08:00.980
Okay, and so that's why we don't get
that class name attributed here.

136
00:08:00.980 --> 00:08:04.805
I'm not actually sure at all
why style isn't on here.

137
00:08:04.805 --> 00:08:07.500
Maybe it's using the properties under
the header or something like that.

138
00:08:07.500 --> 00:08:09.240
So it doesn't appear in the HTML.

139
00:08:09.240 --> 00:08:11.830
And ref is like a dump thing anyways.

140
00:08:11.830 --> 00:08:15.183
And so
that's why it's just a point of dev.

141
00:08:15.183 --> 00:08:20.022
So maybe we can improve that a little
bit because it could be nice in our

142
00:08:20.022 --> 00:08:24.861
test to be able to see at least the title
of the thing as the class name,

143
00:08:24.861 --> 00:08:28.970
and so we can actually do that
pretty easily with a module.

144
00:08:31.140 --> 00:08:36.540
Instead of our style mock,
there's a module called Identity

145
00:08:36.540 --> 00:08:43.230
something something,
identity object proxy.

146
00:08:43.230 --> 00:08:45.560
And what it does is it will,

147
00:08:45.560 --> 00:08:51.130
well if you don't understand proxies,
it's kinda confusing.

148
00:08:51.130 --> 00:08:55.560
But when we say, dot on this object,

149
00:08:55.560 --> 00:08:58.590
it will take that and consider that
to be the thing it's returning.

150
00:08:58.590 --> 00:09:04.190
So whatever you say, or whatever, this
is what it's going to return for that.

151
00:09:04.190 --> 00:09:06.260
Which is really perfect for our use case.

152
00:09:06.260 --> 00:09:09.130
I'm not sure if it was built for
our use case, but it works great.

153
00:09:09.130 --> 00:09:12.750
So let's go ahead and
install that module, npm install.

154
00:09:12.750 --> 00:09:16.580
As a dev identity-object-proxy.

155
00:09:16.580 --> 00:09:22.900
And then while that is installing
we can have another match.

156
00:09:22.900 --> 00:09:27.330
So maybe some of our CSS is
like normal dot CSS, but for

157
00:09:27.330 --> 00:09:32.930
anything that has dot module,
dot CSS ends with that.

158
00:09:32.930 --> 00:09:38.825
We'll just say the path to
the module is identity-object.

159
00:09:40.270 --> 00:09:41.990
Did I misspell it?

160
00:09:41.990 --> 00:09:42.490
&gt;&gt; It's o, b, j.

161
00:09:43.590 --> 00:09:44.130
&gt;&gt; O, b, j.

162
00:09:44.130 --> 00:09:44.630
Thank you.

163
00:09:48.772 --> 00:09:53.270
Obj-proxy, so
it will match with this one first.

164
00:09:53.270 --> 00:09:56.190
And that's the one that it's going to use.

165
00:09:56.190 --> 00:10:01.290
And it will, instead of trying
to require that CSS file,

166
00:10:01.290 --> 00:10:04.690
it's going to require this
identity object proxy.

167
00:10:04.690 --> 00:10:11.430
And so that's what the Styles will
be that identity object proxy.

168
00:10:11.430 --> 00:10:15.200
So any time I try to access anything off
of that it's going to just return that

169
00:10:15.200 --> 00:10:16.110
thing as a string to me.

170
00:10:17.840 --> 00:10:25.570
And so with that, if I run my test again,
We're gonna see our class.

171
00:10:25.570 --> 00:10:26.970
Yay.

172
00:10:26.970 --> 00:10:28.790
So if you're using CSS modules,

173
00:10:28.790 --> 00:10:34.030
which are really awesome, then this is
how you kinda solve for that situation.

174
00:10:35.530 --> 00:10:37.310
And this is generally applicable as well.

175
00:10:37.310 --> 00:10:42.630
This module mapper concept is really
useful when you're using loaders.

176
00:10:42.630 --> 00:10:45.760
You can have one of these for
GraphQL and a whole bunch of stuff.

