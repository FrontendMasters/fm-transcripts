WEBVTT

1
00:00:02.795 --> 00:00:06.327
&gt;&gt; Kent C. Dodds: Okay, so for this one,
lots of the same concepts that we've

2
00:00:06.327 --> 00:00:11.370
talked about with unit test actually
work with the integration test stuff.

3
00:00:11.370 --> 00:00:16.720
And so I'm going to just show the solution

4
00:00:16.720 --> 00:00:22.070
of what I would, of the registration form.

5
00:00:22.070 --> 00:00:27.000
And then you're going to work through
the login form, which is very similar.

6
00:00:27.000 --> 00:00:32.140
And I do have some instructions in the
comments, but just to give you a feel for

7
00:00:32.140 --> 00:00:39.500
what it takes to do integration
tests from a UI perspective.

8
00:00:39.500 --> 00:00:44.790
So let me just get rid of
a couple of these things.

9
00:00:44.790 --> 00:00:49.850
Okay, so you're gonna do the login form,
and I'll show you the registration.

10
00:00:51.480 --> 00:00:54.814
So here in app.register.

11
00:00:56.500 --> 00:01:01.150
Sorry, and
these files are in client source test.

12
00:01:01.150 --> 00:01:06.160
And so they're a higher level
because they're covering many files.

13
00:01:06.160 --> 00:01:08.800
They are co-located because
the app is just right next to it.

14
00:01:11.180 --> 00:01:12.656
So yeah.

15
00:01:12.656 --> 00:01:17.830
So when we're dealing with a higher level
thing where you often have to worry about

16
00:01:17.830 --> 00:01:24.050
things like authentication and
the more general global state of the app,

17
00:01:24.050 --> 00:01:29.940
and so here the authentication strategy
for this application uses local storage.

18
00:01:29.940 --> 00:01:32.610
So before each one of our tests,
we want to make sure we're not

19
00:01:32.610 --> 00:01:35.730
in an authenticated state,
because we're testing registration.

20
00:01:35.730 --> 00:01:39.710
And so we'll remove any token,
if there is any and then,

21
00:01:39.710 --> 00:01:44.270
I'm not going to go too deep into
how the axios mock works, but

22
00:01:44.270 --> 00:01:47.970
there is this mock property on it
that can reset everything so that

23
00:01:47.970 --> 00:01:52.240
you're in a clean state before you start
making requests and things like that.

24
00:01:52.240 --> 00:01:54.230
So we're mocking the requests.

25
00:01:54.230 --> 00:02:00.110
In integration tests with UI, yeah,
you just don't make any network requests.

26
00:02:00.110 --> 00:02:02.570
You save that for your end-to-end tests.

27
00:02:02.570 --> 00:02:04.710
And then there's this initAPI thing,

28
00:02:04.710 --> 00:02:07.650
that's kind of an implementation
detail of this test as well.

29
00:02:07.650 --> 00:02:11.620
But in all of, sorry, of this application.

30
00:02:11.620 --> 00:02:13.330
But in all of these,

31
00:02:13.330 --> 00:02:17.920
like wherever you are going to be testing
this or doing integration testing,

32
00:02:17.920 --> 00:02:21.710
you are gonna have some sort of
initialization of the app, like here we

33
00:02:21.710 --> 00:02:26.080
are going to load our [INAUDIBLE] or
whatever else we have got to do.

34
00:02:26.080 --> 00:02:28.360
And you can do that in a before all,
or before each,

35
00:02:28.360 --> 00:02:29.390
whatever makes the most sense.

36
00:02:29.390 --> 00:02:32.640
You could also configure
that in a setup file or

37
00:02:32.640 --> 00:02:36.250
a setup test framework script file.

38
00:02:37.750 --> 00:02:41.400
So whatever you need to do to set up the
environments so it's ready for testing.

39
00:02:41.400 --> 00:02:45.510
With integration testing, you often
have to do a little bit more than that.

40
00:02:45.510 --> 00:02:47.713
Okay, also with integration testing,

41
00:02:47.713 --> 00:02:51.925
normally you're gonna be doing some
things that are making async requests or

42
00:02:51.925 --> 00:02:55.974
test as async here, and then we're
doing this render with router thing.

43
00:02:55.974 --> 00:03:01.926
So with, especially if you're
doing ReadX or react router or

44
00:03:01.926 --> 00:03:08.913
anything where it exposes a provider for
you, Unstated has a provider.

45
00:03:08.913 --> 00:03:13.527
If you try to render anything
that needs that provider to

46
00:03:13.527 --> 00:03:17.941
provide things in context,
and you try to render it,

47
00:03:17.941 --> 00:03:22.000
it's gonna blow up and make everybody sad.

48
00:03:22.000 --> 00:03:27.910
And so this goes back to a question I
think you asked earlier, about with ReadX,

49
00:03:27.910 --> 00:03:32.260
if you try to render a connected component
that hasn't been established, or

50
00:03:32.260 --> 00:03:35.400
maybe that was you, then things blow up.

51
00:03:35.400 --> 00:03:40.450
So what my suggestion is,
that you just render it with the provider.

52
00:03:40.450 --> 00:03:46.010
And so this render with router actually
is coming from til-client-test-utils,

53
00:03:46.010 --> 00:03:50.100
which I've configured just to be
able to resolve that to client/test.

54
00:03:50.100 --> 00:03:54.360
So anything that's in client/test we can
import as if it's a known module, so

55
00:03:54.360 --> 00:03:56.440
we don't have to worry about
dot dot slash, dot dot slash.

56
00:03:58.240 --> 00:04:00.270
And because you're interested
in configuration here,

57
00:04:00.270 --> 00:04:03.410
I'll just show you that's
pretty straightforward.

58
00:04:03.410 --> 00:04:05.450
It is module paths.

59
00:04:05.450 --> 00:04:08.140
So anything in the search directory or

60
00:04:08.140 --> 00:04:10.930
the test directory can be imported
as if it's a node module.

61
00:04:10.930 --> 00:04:11.430
It's pretty cool.

