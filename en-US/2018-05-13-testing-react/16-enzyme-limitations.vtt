WEBVTT

1
00:00:00.000 --> 00:00:02.628
&gt;&gt; Kent C. Dodds: We're not gonna jump
right in cuz I wanna explain a couple

2
00:00:02.628 --> 00:00:03.650
things first.

3
00:00:03.650 --> 00:00:08.412
But we're gonna swap out all
of this dispatch stuff with

4
00:00:08.412 --> 00:00:10.751
some other abstractions.

5
00:00:10.751 --> 00:00:15.361
And we're gonna change how we're
creating these DOM nodes with some other

6
00:00:15.361 --> 00:00:17.820
methods for querying these.

7
00:00:17.820 --> 00:00:21.774
And so before we get into this,
I want to kind of explain and

8
00:00:21.774 --> 00:00:25.667
justify this abstraction that
we're going to be using.

9
00:00:25.667 --> 00:00:28.430
So how many people have used Jest before?

10
00:00:29.610 --> 00:00:33.139
Or, sorry, Jest,
Enzyme is what I meant to say, okay?

11
00:00:33.139 --> 00:00:35.570
Great, how many people love Enzyme?

12
00:00:37.210 --> 00:00:39.207
Pretty well, pretty okay?

13
00:00:39.207 --> 00:00:41.870
That's actually surprising,
I used to love Enzyme.

14
00:00:43.470 --> 00:00:48.111
So I was actually, originally this
workshop was all with Enzyme.

15
00:00:48.111 --> 00:00:51.770
And I was working on step one,
step two, step three.

16
00:00:51.770 --> 00:00:57.921
And then the jump from one step to the
other with Enzyme felt kind of big to me.

17
00:00:57.921 --> 00:01:01.070
So I was figuring out how could
we make this a middle ground.

18
00:01:01.070 --> 00:01:04.979
And in the process of doing that,
I've created a library.

19
00:01:04.979 --> 00:01:11.600
And so, that actually, this React
Testing Library came from this workshop.

20
00:01:12.630 --> 00:01:15.698
So, let's talk about that really quick.

21
00:01:16.745 --> 00:01:23.280
&gt;&gt; Kent C. Dodds: This is the React
Testing Library, goat is the mascot.

22
00:01:23.280 --> 00:01:28.750
And it has a couple of
pretty useful methods.

23
00:01:28.750 --> 00:01:34.295
Before we look too far into these,
let's check out the dom-testing-library.

24
00:01:34.295 --> 00:01:36.663
The React Testing Library
was the first one, and

25
00:01:36.663 --> 00:01:40.500
then I took some of the insights of the
React Testing Library and pulled it out.

26
00:01:40.500 --> 00:01:45.585
Because it was just general DOM stuff,
nothing specific to React.

27
00:01:45.585 --> 00:01:49.048
And so this DOM Testing Library,

28
00:01:49.048 --> 00:01:53.871
which you'll be using
similar methods from,

29
00:01:53.871 --> 00:01:59.570
has some really handy methods
that we'll talk about.

30
00:01:59.570 --> 00:02:03.748
But before we get to far into that,
I wanna talk about Enzyme.

31
00:02:03.748 --> 00:02:08.550
Okay, so Enzyme is an awesome
testing tool for React.

32
00:02:08.550 --> 00:02:12.521
It allows you to mount a component
kind of like what we're doing.

33
00:02:12.521 --> 00:02:15.131
It allows you to render it to a string and

34
00:02:15.131 --> 00:02:19.890
then exposes Cheerio as a mechanism for
traversing that thing.

35
00:02:19.890 --> 00:02:24.864
And shallow render it to automatically
mark all of the components that

36
00:02:24.864 --> 00:02:26.390
you're rendering.

37
00:02:26.390 --> 00:02:30.322
So there are a couple of problems
that I have with Enzyme and

38
00:02:30.322 --> 00:02:34.430
all of the amazing things
that I can let you do.

39
00:02:34.430 --> 00:02:40.550
And these problems are mostly rooted
in the fact that I have a very strong

40
00:02:40.550 --> 00:02:46.989
belief that your tests should resemble
the way that your software is used.

41
00:02:46.989 --> 00:02:50.246
And the more that your tests resemble
the way the software is used,

42
00:02:50.246 --> 00:02:52.230
the more confidence they can give you.

43
00:02:52.230 --> 00:02:57.058
So with Enzyme the utilities
that it provides to you

44
00:02:57.058 --> 00:03:02.110
are a lot of different ways
to use your software in your

45
00:03:02.110 --> 00:03:07.177
test in a way that they're
not being used in reality.

46
00:03:07.177 --> 00:03:12.109
So to take an example, shallow rendering,
which is actually not just an Enzyme

47
00:03:12.109 --> 00:03:16.650
concept, this is supported by
the office React Test Renderer.

48
00:03:16.650 --> 00:03:21.340
But the idea of shallow rendering is we'll
render every one of your components that

49
00:03:21.340 --> 00:03:24.161
you're rendering is not
a composite component.

50
00:03:24.161 --> 00:03:27.500
So like well, I'll render divs,
I'll render spans in each ones.

51
00:03:27.500 --> 00:03:30.341
But if you make a custom component,
I'm not gonna render that.

52
00:03:30.341 --> 00:03:35.646
I'll just say this would be rendered, and
then you can make assertions off of that,

53
00:03:35.646 --> 00:03:38.350
like you have this log inform for example.

54
00:03:39.960 --> 00:03:44.384
And I'm gonna render this div,
but then I won't render the form.

55
00:03:44.384 --> 00:03:45.157
And so for

56
00:03:45.157 --> 00:03:51.460
your test you can verify that the log
in renders a div that renders a form.

57
00:03:51.460 --> 00:03:55.753
And that's a pure unit test,
because the unit of login,

58
00:03:55.753 --> 00:04:00.942
you're severing all the connections
to all of it's dependencies,

59
00:04:00.942 --> 00:04:05.969
and just rendering the things that
the login itself is rendering.

60
00:04:05.969 --> 00:04:11.333
And so for me,
I actually cared pretty much nothing for

61
00:04:11.333 --> 00:04:14.480
the pure unit test concept.

62
00:04:14.480 --> 00:04:17.513
If my test at the end of the day
ends up being a pure unit test,

63
00:04:17.513 --> 00:04:18.615
I'm fine with that.

64
00:04:18.615 --> 00:04:22.250
But what I care about is
shipping my apps with confidence.

65
00:04:22.250 --> 00:04:24.949
And so if that means that my
test is not a pure unit test,

66
00:04:24.949 --> 00:04:26.785
you can call it an integration test.

67
00:04:26.785 --> 00:04:29.182
And that's like,
I don't care, that's fine,

68
00:04:29.182 --> 00:04:31.580
I'm shipping my stuff with confidence.

69
00:04:31.580 --> 00:04:34.773
So I can get that confidence,
I render the log in and

70
00:04:34.773 --> 00:04:37.230
verify that it's rendering the form.

71
00:04:37.230 --> 00:04:40.090
And then I'd have to have another test for
the form so

72
00:04:40.090 --> 00:04:43.730
that I can verify it renders a label and
then it renders this input.

73
00:04:43.730 --> 00:04:46.977
Well, then I would have to test the input
also to make sure that that is rendering

74
00:04:46.977 --> 00:04:48.576
what it's supposed to be rendering and

75
00:04:48.576 --> 00:04:51.057
accepting the prompts that
it's supposed to be accepting.

76
00:04:51.057 --> 00:04:52.369
And pretty soon,

77
00:04:52.369 --> 00:04:58.310
you have this test suite full of these
purist idea of what a unit test should be.

78
00:04:58.310 --> 00:05:03.417
But they're actually pretty confusing
when you compare it to the totally,

79
00:05:03.417 --> 00:05:06.066
like, even with no abstraction test.

80
00:05:06.066 --> 00:05:09.010
It's actually pretty straightforward
what's going on here.

81
00:05:09.010 --> 00:05:13.897
In comparison to the suite of
let's just make sure that the form

82
00:05:13.897 --> 00:05:15.455
renders this thing.

83
00:05:15.455 --> 00:05:18.675
On top of that, with shallow rendering,

84
00:05:18.675 --> 00:05:23.370
like, let's say I wanted to
within this form component,.

85
00:05:23.370 --> 00:05:26.657
Let's say I wanted to pull this out and

86
00:05:26.657 --> 00:05:31.384
just within the same module
have the username Field and

87
00:05:31.384 --> 00:05:34.992
return &lt;react.fragment&gt;, okay?.

88
00:05:34.992 --> 00:05:37.410
And then I just render my username.

89
00:05:37.410 --> 00:05:40.746
So this is a pure refractor, right here.

90
00:05:40.746 --> 00:05:44.682
None of the functionality has changed
it all works exactly the same as it had

91
00:05:44.682 --> 00:05:45.870
before.

92
00:05:45.870 --> 00:05:51.452
But with shallow rendering if I
were just testing the form itself,

93
00:05:51.452 --> 00:05:53.651
it would stop right here.

94
00:05:53.651 --> 00:05:57.792
And the only way for me to get any
coverage on this username would be

95
00:05:57.792 --> 00:06:02.160
to export that user name so
I could test that thing itself.

96
00:06:02.160 --> 00:06:09.139
And that's changing my source code to
satisfy my test for no good reason.

97
00:06:09.139 --> 00:06:14.360
And so I feel very,
very strongly against shallow rendering.

98
00:06:14.360 --> 00:06:20.010
So even if you decide you wanna use
Enzyme, never use shallow rendering ever.

99
00:06:20.010 --> 00:06:23.861
There are situations where it is
a good idea to mark things like for

100
00:06:23.861 --> 00:06:27.923
if have an animation library or
something, you don't wanna wait for

101
00:06:27.923 --> 00:06:32.180
animations to end before the item
has been removed from the DOM.

102
00:06:32.180 --> 00:06:33.808
And so you just mark API and

103
00:06:33.808 --> 00:06:38.478
you mark that component to something
that doesn't wait for an animation.

104
00:06:38.478 --> 00:06:40.930
It works great and
I can show you an example of that.

105
00:06:40.930 --> 00:06:45.228
The React Testing Library has some
examples of how to handle that.

106
00:06:45.228 --> 00:06:48.080
So never ever use shallow rendering, ever.

107
00:06:48.080 --> 00:06:54.849
I used it one time when I found out that
it was something I never wanted to do.

108
00:06:54.849 --> 00:07:00.559
So that's Shallow Rendering, and
that kind of is the kind of overarching

109
00:07:00.559 --> 00:07:06.085
idea behind my problems with Enzyme
is that it exposes a lot of different

110
00:07:06.085 --> 00:07:12.410
things that allow me to use my software
in a way that it's not being used.

111
00:07:12.410 --> 00:07:14.764
Which reduces the level
of confidence I can have.

112
00:07:14.764 --> 00:07:16.960
So a couple other examples
just really quick.

113
00:07:18.940 --> 00:07:23.293
Pretty much anything that
allows me to find for example,

114
00:07:23.293 --> 00:07:28.100
anything that allows me to find
by a component class like here,

115
00:07:28.100 --> 00:07:32.472
I can say okay,
find me the component that you rendered.

116
00:07:32.472 --> 00:07:37.660
That's the foo component, or
what's even worse is the display name.

117
00:07:37.660 --> 00:07:41.146
So now you have a test that has this
in it and you go and change the name

118
00:07:41.146 --> 00:07:45.460
of the function for one of the components
that you're using and your test breaks.

119
00:07:45.460 --> 00:07:50.000
Your user doesn't care what the name
of that function in, like, who cares?

120
00:07:50.000 --> 00:07:54.759
Your user also doesn't care that
you're rendering a foo component

121
00:07:54.759 --> 00:07:58.524
inside of whatever you're mounting,
or anything.

122
00:07:58.524 --> 00:08:02.690
Really, to the user,
it doesn't make any difference whatsoever.

123
00:08:02.690 --> 00:08:08.506
So I'm much more interested in
avoiding tests that are like this.

124
00:08:08.506 --> 00:08:12.560
There's also,
you can get access to the instance,

125
00:08:12.560 --> 00:08:16.630
which is the instance of
the class of the component.

126
00:08:18.430 --> 00:08:21.602
Pretty much no code is ever
going to access the instance and

127
00:08:21.602 --> 00:08:22.841
call methods on that.

128
00:08:22.841 --> 00:08:25.080
But that's something that
Enzyme actually encourages.

129
00:08:25.080 --> 00:08:29.432
So if you wanna test your submit
handler while you get the instance and

130
00:08:29.432 --> 00:08:31.769
you call instance.handle submit.

131
00:08:31.769 --> 00:08:32.308
Well, now,

132
00:08:32.308 --> 00:08:36.430
you don’t know whether that handle submit
is actually wired up to the form properly.

133
00:08:36.430 --> 00:08:41.762
So there are a lot of things that- like,
I never really used Enzyme in this way.

134
00:08:41.762 --> 00:08:45.770
I was able to use all the utilities
without doing those things.

135
00:08:45.770 --> 00:08:50.250
But the reason I decided to write my own
thing was because I didn’t wanna have

136
00:08:50.250 --> 00:08:53.260
a library where it was
possible to do those things or

137
00:08:53.260 --> 00:08:55.440
at least not easy to do those things.

138
00:08:55.440 --> 00:08:59.860
So with all of that said, now, next I can
tell you about the React Test Library and

139
00:08:59.860 --> 00:09:01.540
the DOM Testing Library.

140
00:09:01.540 --> 00:09:06.714
But I'm gonna stop and let you ask any
questions that I'm sure you have brewing.

141
00:09:06.714 --> 00:09:11.153
So feel free to ask away.

142
00:09:11.153 --> 00:09:12.591
Yes, Peter.

143
00:09:12.591 --> 00:09:18.924
&gt;&gt; Peter: So I have used shallow
rendering a couple times in cases where

144
00:09:18.924 --> 00:09:25.389
rendering the entire component
caused performance issues.

145
00:09:25.389 --> 00:09:26.002
&gt;&gt; Kent C. Dodds: Sure.

146
00:09:26.002 --> 00:09:30.765
&gt;&gt; Peter: Snapshot just took forever
to generate and I didn't really care.

147
00:09:30.765 --> 00:09:33.153
I don't even know exactly
what the perf issues were.

148
00:09:33.153 --> 00:09:38.116
Maybe like some giant SVG or
something, who knows?

149
00:09:38.116 --> 00:09:42.518
But that sort of just like allowed
me to not think about the stuff that

150
00:09:42.518 --> 00:09:47.553
the component was rendering because I
didn't care about it and move past it.

151
00:09:47.553 --> 00:09:51.188
Does that,
is there a reasonable use case for it or?

152
00:09:51.188 --> 00:09:53.340
&gt;&gt; Kent C. Dodds: Sure,
yeah, so I can address that.

153
00:09:53.340 --> 00:09:57.915
What I would suggest is if there is
a performance issue you probably check

154
00:09:57.915 --> 00:10:02.122
into it, cuz it might actually be
a performance issue in your app.

155
00:10:02.122 --> 00:10:07.054
But there are situations
where this thing renders some

156
00:10:07.054 --> 00:10:10.484
date picker third-party thing, and

157
00:10:10.484 --> 00:10:15.536
I'm just gonna trust that
that thing's going to work.

158
00:10:15.536 --> 00:10:18.249
In that case, I just use just mock and

159
00:10:18.249 --> 00:10:22.200
I'm explicit about how
the things I'm mocking out.

160
00:10:22.200 --> 00:10:26.893
The fact that shell rendering
pretty much just mocks everything,

161
00:10:26.893 --> 00:10:30.342
even in components that
I have within my module.

162
00:10:30.342 --> 00:10:32.230
That's what just totally turns me off.

163
00:10:32.230 --> 00:10:37.828
So yeah, sometimes it is acceptable to
mock things but I'll do that explicitly.

164
00:10:37.828 --> 00:10:39.167
&gt;&gt; Peter: So, basically don't,

165
00:10:39.167 --> 00:10:43.580
what you're saying is don't mask those
performance issues from yourself?

166
00:10:43.580 --> 00:10:44.220
&gt;&gt; Kent C. Dodds: Yeah, exactly.

167
00:10:44.220 --> 00:10:49.400
And on top of that,
in talking about third party things.

168
00:10:49.400 --> 00:10:54.535
Any time you mock, you eliminate your
ability to be confident about that

169
00:10:54.535 --> 00:11:00.700
connection, at least with that test that
you're mocking, and so you may feel great.

170
00:11:00.700 --> 00:11:01.285
Okay, so

171
00:11:01.285 --> 00:11:06.910
now my snapshot is not gonna fail any time
that they change their implementation.

172
00:11:06.910 --> 00:11:10.584
But if they change their implementation in
a way that breaks your application, now,

173
00:11:10.584 --> 00:11:13.456
your application will break when
they change it and you wont know.

174
00:11:13.456 --> 00:11:18.160
So I'd much rather have the pain of having
to update snapshots whenever that updates.

175
00:11:18.160 --> 00:11:22.626
And so I'm made aware before it goes up
to production but we'll talk more about

176
00:11:22.626 --> 00:11:27.244
snapshots later too and how to use those
effectively for cases like this as well.

177
00:11:27.244 --> 00:11:28.204
Yeah?

178
00:11:28.204 --> 00:11:33.519
&gt;&gt; Speaker 3: Kind of similar problem,
like, what if you're rendering something

179
00:11:33.519 --> 00:11:38.023
to be used reducts, react reducts,
if you have a connected

180
00:11:38.023 --> 00:11:43.180
component in your rendered tree
that causes all kinds of problems.

181
00:11:43.180 --> 00:11:43.726
&gt;&gt; Kent C. Dodds: Yeah, yeah.

182
00:11:43.726 --> 00:11:44.559
&gt;&gt; Speaker 3: What do you do with that?

183
00:11:44.559 --> 00:11:47.114
&gt;&gt; Kent C. Dodds: Yeah, so
we'll talk about that more when we

184
00:11:47.114 --> 00:11:50.996
get into integration tests but
the TLDR is render with a provider.

185
00:11:53.173 --> 00:11:55.267
&gt;&gt; Kent C. Dodds: So instead of just
rendering the component by itself,

186
00:11:55.267 --> 00:11:56.274
put a provider around it.

187
00:11:58.408 --> 00:12:01.005
&gt;&gt; Kent C. Dodds: Yeah, and
then with that actually, so

188
00:12:01.005 --> 00:12:06.532
the conventional wisdom is to export
the non-connected component and test that.

189
00:12:06.532 --> 00:12:11.423
And that's great but you don't have any
confidence on your map state to props or

190
00:12:11.423 --> 00:12:13.618
like then you have to do extra work.

191
00:12:13.618 --> 00:12:15.849
And also the actions and everything else.

192
00:12:15.849 --> 00:12:20.197
&gt;&gt; Speaker 3: If it's in the tree then
you're testing something above it.

193
00:12:20.197 --> 00:12:24.725
And especially with a null
kind of encourage like connect

194
00:12:24.725 --> 00:12:28.889
the components everywhere
not just at the top, so.

195
00:12:28.889 --> 00:12:32.580
&gt;&gt; Kent C. Dodds: Yeah, yeah,
React is a special, special child.

196
00:12:32.580 --> 00:12:35.115
No, we love React.

197
00:12:35.115 --> 00:12:36.992
Yeah, good question,
was there another one?

198
00:12:36.992 --> 00:12:38.872
Yeah?
&gt;&gt; Speaker 4: I was just gonna ask,

199
00:12:38.872 --> 00:12:43.298
could you bullet point again why
we wouldn't use shallow testing.

200
00:12:43.298 --> 00:12:47.953
Thinking that unit test we did last
week we used everywhere pretty much.

201
00:12:47.953 --> 00:12:50.814
Why is it a bad idea to use shallow?

202
00:12:50.814 --> 00:12:52.818
&gt;&gt; Kent C. Dodds: In
the test we did last week?

203
00:12:52.818 --> 00:12:56.858
&gt;&gt; Speaker 4: Yeah, so we started writing
unit tests last week using Enzyme and

204
00:12:56.858 --> 00:13:01.050
we were doing the shallow everywhere,
and you said not to use that.

205
00:13:01.050 --> 00:13:04.404
I just wondering if you could provide
the bullet point list of why it guest?

206
00:13:04.404 --> 00:13:08.677
&gt;&gt; Kent C. Dodds: Yeah, so bullet point
list is, shallow automatically mocks

207
00:13:08.677 --> 00:13:12.972
everything even components that
are within the same module.

208
00:13:12.972 --> 00:13:18.060
And so, that mocking,
that automatic mocking

209
00:13:18.060 --> 00:13:23.020
totally severs all
confidence that you have,

210
00:13:23.020 --> 00:13:26.974
and refactors will break your test.

211
00:13:26.974 --> 00:13:31.651
And so if a reactor breaks your test and
you're testing implementation details,

212
00:13:31.651 --> 00:13:33.630
and so I try to stay away from that.

213
00:13:34.860 --> 00:13:39.182
There are use cases for mocking things,
and so in those cases I am explicit about

214
00:13:39.182 --> 00:13:46.489
those with just a mock
&gt;&gt; Kent C. Dodds: All right,

215
00:13:46.489 --> 00:13:47.699
anything else?

216
00:13:47.699 --> 00:13:49.710
Anything from the chat?

217
00:13:49.710 --> 00:13:52.182
We got something.

218
00:13:52.182 --> 00:13:56.606
So anytime the shallow rendering sort of
makes you code to an implementation and

219
00:13:56.606 --> 00:13:58.265
not behavior, which is bad.

220
00:13:58.265 --> 00:13:59.630
Yes, that's a good summary.

