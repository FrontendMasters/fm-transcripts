WEBVTT

1
00:00:00.140 --> 00:00:00.920
Yes.

2
00:00:00.920 --> 00:00:06.103
&gt;&gt; So in some cases we don't have a submit
button whenever user clicks on tab,

3
00:00:06.103 --> 00:00:09.252
you'll just submit
the data to the backend.

4
00:00:09.252 --> 00:00:13.160
So how to test this
particle functionality?

5
00:00:13.160 --> 00:00:16.120
&gt;&gt; So, you do something like onblur or
something?

6
00:00:16.120 --> 00:00:16.790
&gt;&gt; Yes.

7
00:00:16.790 --> 00:00:19.890
&gt;&gt; So, I would do fireEvent.blur.

8
00:00:19.890 --> 00:00:20.390
Oops.

9
00:00:22.200 --> 00:00:26.480
&gt;&gt; If we'll wait for some second, let
say user is not typing in anything, uhu?

10
00:00:26.480 --> 00:00:27.420
&gt;&gt; If you wait, yeah.

11
00:00:27.420 --> 00:00:31.600
So in that situation, you probably
using a set timeout or something.

12
00:00:31.600 --> 00:00:37.620
So what I would recommend is just
has this useFakeTimers method and

13
00:00:37.620 --> 00:00:43.030
then inside of your test you can say,
just.runAllTimers.

14
00:00:43.030 --> 00:00:45.000
And then it'll just speed them all ahead.

15
00:00:45.000 --> 00:00:46.620
So if you're waiting a 300 millisecond,

16
00:00:46.620 --> 00:00:48.890
you don't actually have to
wait that time in your test.

17
00:00:48.890 --> 00:00:52.810
If you don't want to do that cuz that
is like technically that's mocking.

18
00:00:52.810 --> 00:00:57.640
I don't have a problem doing that but
if there was a situation where you didn't

19
00:00:57.640 --> 00:01:03.900
need to wait for something then you
can pull in wait or wait for element.

20
00:01:03.900 --> 00:01:08.090
And you can use those APIs,
you check out the docs for those.

21
00:01:08.090 --> 00:01:08.870
They're pretty handy.

22
00:01:12.714 --> 00:01:13.750
Okay, yes?

23
00:01:13.750 --> 00:01:16.690
&gt;&gt; Is there a way to check
the state of a component?

24
00:01:16.690 --> 00:01:20.256
So after some event,
you may be setting some internal state,

25
00:01:20.256 --> 00:01:22.597
you wanna ensure that that state is set.

26
00:01:22.597 --> 00:01:25.540
&gt;&gt; Yes, I'm glad that you asked that.

27
00:01:25.540 --> 00:01:27.790
So, let me ask you a question.

28
00:01:27.790 --> 00:01:31.600
Why do you want to,
can you give me an example of?

29
00:01:31.600 --> 00:01:34.630
&gt;&gt; So, let's say when you click
the button, you have a little spinner that

30
00:01:34.630 --> 00:01:38.440
comes up, cuz it could be
a long API call or whatever.

31
00:01:38.440 --> 00:01:42.768
You want to insure that typically I
guess we have you set the state is

32
00:01:42.768 --> 00:01:44.866
submitting that type of thing.

33
00:01:44.866 --> 00:01:46.216
&gt;&gt; Mm-hm.

34
00:01:46.216 --> 00:01:51.090
&gt;&gt; The react re-renders,
you have a spinner component and

35
00:01:51.090 --> 00:01:54.830
then if its renders itself if it should or
not.

36
00:01:54.830 --> 00:01:57.870
&gt;&gt; Right, yeah, that's perfect,
perfect question.

37
00:01:57.870 --> 00:02:02.530
So if you, whenever I ask myself, so

38
00:02:02.530 --> 00:02:04.990
how do I test this,
I try to take a step back and think.

39
00:02:04.990 --> 00:02:07.440
If I were a manual tester,
how would I test this?

40
00:02:07.440 --> 00:02:10.930
If I only had the interface, didn't have
the depth tools, how would I do this.

41
00:02:10.930 --> 00:02:14.030
And I would click on the thing and
then I would make an assertion.

42
00:02:14.030 --> 00:02:17.420
And I'd jot down okay yes,
I see the loading spinner test path.

43
00:02:17.420 --> 00:02:18.970
So that's how I would test it.

44
00:02:18.970 --> 00:02:25.160
Rather than checking the internal state,
I would say, I click the button and

45
00:02:25.160 --> 00:02:28.580
the loading spinner shows up so I'd
verify that the loading spinner's there.

46
00:02:28.580 --> 00:02:31.950
And then you probably have that
network request mocked out.

47
00:02:31.950 --> 00:02:35.720
And even if you don't, if it's like a full
end to end test, you're gonna wait for

48
00:02:35.720 --> 00:02:38.860
that thing to go away, and then you'll
make the rest of your assertions.

49
00:02:38.860 --> 00:02:43.963
And so you can do all of that
with the react-testing-library,

50
00:02:43.963 --> 00:02:48.973
so the reason that I would avoid
checking state is because yes,

51
00:02:48.973 --> 00:02:54.855
maybe you are setting, is submitting
state properly but you could have.

52
00:02:54.855 --> 00:02:57.849
Like somebody goes and refactors
the render method and it actually messes

53
00:02:57.849 --> 00:03:00.930
things up where it doesn't actually
show the loading spinner anymore.

54
00:03:00.930 --> 00:03:04.320
So your test passes, but
your application is busted.

55
00:03:04.320 --> 00:03:08.760
And so by testing it as close to
the way that the user would test it,

56
00:03:08.760 --> 00:03:09.940
then you can avoid that.

57
00:03:09.940 --> 00:03:13.070
You get both the fact that
the state is being set and

58
00:03:13.070 --> 00:03:14.930
the fact that it's being
rendered properly.

59
00:03:14.930 --> 00:03:20.610
But the fact that state is being set
is actually irrelevant to the test,

60
00:03:20.610 --> 00:03:21.920
cuz it doesn't really care.

61
00:03:21.920 --> 00:03:23.760
You could be using jQuery for all I care,

62
00:03:23.760 --> 00:03:25.700
it's like I don't really
care how that happens.

63
00:03:25.700 --> 00:03:28.000
So just the fact that it does
is what I want to verify.

64
00:03:29.670 --> 00:03:33.650
And that kind of harkens back to
the implementation details versus

65
00:03:34.680 --> 00:03:36.250
testing the public API.

66
00:03:36.250 --> 00:03:40.820
And you can consider the dom that
it renders, part of the public API.

67
00:03:40.820 --> 00:03:41.790
Great question, yeah.

68
00:03:42.900 --> 00:03:47.890
&gt;&gt; Well, I just can say because if you're
testing state then theoretically if you

69
00:03:47.890 --> 00:03:53.200
wanted to make sure that everything is
working the way that you had hoped for

70
00:03:53.200 --> 00:03:57.120
to, you'd have to write more test for
all the individual components.

71
00:03:57.120 --> 00:04:01.360
Whereas if you write, you're drawing
a larger box around the problem and

72
00:04:01.360 --> 00:04:05.215
you're measuring the end result,
that's just one single test.

73
00:04:05.215 --> 00:04:09.140
Any of the things that fed
into that could break and

74
00:04:09.140 --> 00:04:11.010
you won't be able to detect it that way.

75
00:04:11.010 --> 00:04:12.300
&gt;&gt; Exactly, yeah.

76
00:04:12.300 --> 00:04:16.300
Now there is something to be said for
more specific unit tests

77
00:04:16.300 --> 00:04:20.942
because when those break, it's a lot
easier to identify what it was that broke.

78
00:04:20.942 --> 00:04:26.850
And so,
because if we were dogmatic about this and

79
00:04:26.850 --> 00:04:30.830
said, okay, only the way the user tests
it, we just tested the high bird's eye

80
00:04:30.830 --> 00:04:34.900
level of everything, and just about
anything could break those kinds of tests.

81
00:04:34.900 --> 00:04:39.780
And so that is why I don't do
purely only end-to-end tests.

82
00:04:39.780 --> 00:04:46.130
Because they’re generally harder to
debug in a lower level unit test.

83
00:04:46.130 --> 00:04:47.250
So there is a balance here.

84
00:04:47.250 --> 00:04:53.370
We try to avoid dogma in testing
because it’s just a path to sadness.

85
00:04:53.370 --> 00:04:57.200
So I’m looking for that nice balance of

86
00:04:57.200 --> 00:05:01.170
I'm getting the confidence that I'm
looking for, but I don't have to write

87
00:05:01.170 --> 00:05:05.050
like 30 tests just to make sure things
are integrating together properly.

88
00:05:05.050 --> 00:05:08.420
Just maybe one test to make sure things
integrate together properly, and

89
00:05:08.420 --> 00:05:11.620
then a bunch of other tests
to test the edge cases.

90
00:05:11.620 --> 00:05:14.060
But even with those edge cases,

91
00:05:14.060 --> 00:05:17.950
I still wouldn't worry about
testing internal state.

92
00:05:17.950 --> 00:05:20.630
Because in those situations,
a refactor will break your test.

93
00:05:20.630 --> 00:05:25.010
Well, okay, I'm gonna change the name of
this state that really doesn't change how

94
00:05:25.010 --> 00:05:30.190
the thing works, but if you're
asserting on the instance state now,

95
00:05:30.190 --> 00:05:32.990
your tests are broken and
that's kind of annoying.

96
00:05:32.990 --> 00:05:35.890
That's actually one of the reasons
why a lot of people don't like

97
00:05:35.890 --> 00:05:39.050
testing in general,
is because I refactored my code, and

98
00:05:39.050 --> 00:05:42.830
then a whole bunch of tests went red,
and now I don't like testing.

99
00:05:42.830 --> 00:05:46.870
So tests that don't break when
you refactor are pretty nice.

