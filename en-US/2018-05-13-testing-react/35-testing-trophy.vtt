WEBVTT

1
00:00:00.300 --> 00:00:03.210
&gt;&gt; Kent C. Dodds: Okay.
So with that I wanna talk about this

2
00:00:03.210 --> 00:00:07.210
really quick before we head out.

3
00:00:07.210 --> 00:00:09.160
The question was asked earlier,

4
00:00:09.160 --> 00:00:13.530
how do you know when to write a test as
an end-to-end integration or unit test?

5
00:00:13.530 --> 00:00:17.340
How do you know whether it should
be written with Ciprus or?

6
00:00:17.340 --> 00:00:21.780
And how many people are familiar
with the testing pyramid?

7
00:00:21.780 --> 00:00:22.710
Okay.

8
00:00:22.710 --> 00:00:26.840
So as testing pyramid, it's a pyramid and
at the top you have end to end.

9
00:00:26.840 --> 00:00:28.920
The middle you have integration and
the bottom you have unit.

10
00:00:28.920 --> 00:00:32.830
And so by nature of the shape,
unit testing is bigger and

11
00:00:32.830 --> 00:00:35.750
the suggestion is that your unit has more.

12
00:00:35.750 --> 00:00:38.480
Well, I think that the testing pyramids
actually missing a very important

13
00:00:38.480 --> 00:00:40.880
piece of testing that's
static code analysis.

14
00:00:40.880 --> 00:00:45.138
So ESLint and Flowtype or TypeScript.

15
00:00:45.138 --> 00:00:48.900
But in addition,
I think that it has the wrong shape.

16
00:00:48.900 --> 00:00:52.290
So the justification for
the testing pyramid and

17
00:00:52.290 --> 00:00:56.836
the shape that it has is that
the lower down on the pyramid you are,

18
00:00:56.836 --> 00:01:00.652
the cheaper it is to write and
run those kinds of tests.

19
00:01:00.652 --> 00:01:04.420
And, in addition,
the faster those kinds of tests run.

20
00:01:04.420 --> 00:01:09.299
And so, you spend more of your time there,
because of that fact.

21
00:01:09.299 --> 00:01:12.122
But I ask myself, okay,
well, that's the case,

22
00:01:12.122 --> 00:01:16.900
then why I don't just do everything as
unit test and never use anything else?

23
00:01:16.900 --> 00:01:21.110
There is a very good reason for that and
that's the confidence coefficient.

24
00:01:21.110 --> 00:01:25.700
Something i made up, but
as you go up the testing triangle or

25
00:01:25.700 --> 00:01:30.130
testing trophy in this case, the types
of problems that you can catch and

26
00:01:30.130 --> 00:01:36.340
solve amount of confidence that those type
of testing can give you are much bigger.

27
00:01:36.340 --> 00:01:40.168
So static typing, I can catch,
you didn't define the variable three or

28
00:01:40.168 --> 00:01:43.134
the variable three is a string,
it should be an number.

29
00:01:43.134 --> 00:01:44.520
Those are pretty simple problems.

30
00:01:44.520 --> 00:01:47.667
They could cause catastrophic issues.

31
00:01:47.667 --> 00:01:51.120
But they're generally pretty simple,
not too hard to catch.

32
00:01:52.920 --> 00:01:55.833
Even without those kinds of tests anyway.

33
00:01:55.833 --> 00:02:02.101
And then, like an end to end test could
catch that, pretty easily as well.

34
00:02:02.101 --> 00:02:06.860
So as you move up the pyramid or
the trophy in this case,

35
00:02:06.860 --> 00:02:12.040
the types of problems you
can catch are much bigger.

36
00:02:12.040 --> 00:02:19.230
A user who's logged in right, like with
this certain scenario, can't check out.

37
00:02:19.230 --> 00:02:21.629
That's a pretty serious problem,
we're losing money.

38
00:02:22.660 --> 00:02:26.849
And so the confidence coefficient is
the reason why the triangle exists at all.

39
00:02:28.915 --> 00:02:30.215
&gt;&gt; Kent C. Dodds: But in my mind,

40
00:02:30.215 --> 00:02:36.019
the confidence that you get out of
integration tests are way bigger,

41
00:02:36.019 --> 00:02:41.930
are way more valuable,
than the testing pyramid cares to admit.

42
00:02:41.930 --> 00:02:46.587
And so, I feel that you should spend most
of your time working with integration

43
00:02:46.587 --> 00:02:47.091
tests.

44
00:02:47.091 --> 00:02:53.025
Especially with the tools that we have
now, those things are running much faster,

45
00:02:53.025 --> 00:02:58.050
and they're not as expensive from
a resources and hardware aspects.

46
00:02:59.250 --> 00:03:02.830
And so the types of tests that I've
shown you today of integration tests

47
00:03:02.830 --> 00:03:03.930
with the UI.

48
00:03:03.930 --> 00:03:07.940
As well as similar types of tests for
your backend services.

49
00:03:07.940 --> 00:03:10.470
That's kind of what I'm talking
about when I say integration tests.

50
00:03:10.470 --> 00:03:15.200
And those are where you're gonna
get the best bang for your buck.

51
00:03:15.200 --> 00:03:17.670
That said,
you should have all forms of testing.

52
00:03:17.670 --> 00:03:21.406
And Cypress is just so
good that I'm starting to expand.

53
00:03:21.406 --> 00:03:26.974
My end to end tests, my vision for
what an end to end test or

54
00:03:26.974 --> 00:03:33.589
how many tests I put into Cypress,
because the tool is just so good.

55
00:03:33.589 --> 00:03:37.110
But it's hard to beat Jest
because Jest is like fantastic.

56
00:03:37.110 --> 00:03:39.089
So we've got some pretty cool tools.

57
00:03:40.870 --> 00:03:45.480
With that, I have one more slide,
but I'm going, before I get there I

58
00:03:45.480 --> 00:03:48.920
just wanna ask if there are any final
questions before we wrap up the day?

59
00:03:51.970 --> 00:03:53.860
There is a question in the chat, so

60
00:03:53.860 --> 00:03:57.360
what about using data
attributes to select elements?

61
00:03:57.360 --> 00:04:02.140
Billy, so we do have the data test ID and
that's what I would suggest.

62
00:04:02.140 --> 00:04:05.710
If you want to select
anything that [COUGH] for

63
00:04:05.710 --> 00:04:09.150
some reason doesn't work just select,
by a label text or by the text.

64
00:04:09.150 --> 00:04:12.440
Then add a data test ID and
then you can get back test ID.

65
00:04:12.440 --> 00:04:14.870
Any other questions before I pop.

66
00:04:17.060 --> 00:04:19.996
Yeah.
&gt;&gt; Speaker 2: Repeat my question from

67
00:04:19.996 --> 00:04:23.481
before like,
you could do EDU tests in Jest,

68
00:04:23.481 --> 00:04:25.490
or Cypress.
&gt;&gt; Kent C. Dodds: right.

69
00:04:25.490 --> 00:04:27.720
Yeah.
Thank you for asking again.

70
00:04:27.720 --> 00:04:32.715
So to clarify, what we did earlier
was actually not an end to end test.

71
00:04:32.715 --> 00:04:36.830
And the reason is because we
mocked out server requests.

72
00:04:36.830 --> 00:04:40.090
So our end to end tests with Cypress
are actually hitting a server.

73
00:04:40.090 --> 00:04:45.120
We have to have that loaded and we have
fake data when we're loading it up.

74
00:04:45.120 --> 00:04:49.700
And so that is more in the nature
of an end to end test.

75
00:04:49.700 --> 00:04:52.307
And so
that's kind of where I draw the line.

76
00:04:52.307 --> 00:04:54.726
If I don't need the server
far this particular test,

77
00:04:54.726 --> 00:04:58.510
then I'm going to make going to make
that an integration test with Jest.

78
00:04:58.510 --> 00:05:02.530
If I want to really test what the whole
experience is like with a live server

79
00:05:02.530 --> 00:05:05.438
then it's going to be with Cypress.
&gt;&gt; Speaker 2: So the log in and

80
00:05:05.438 --> 00:05:07.416
register tests with Jest,

81
00:05:07.416 --> 00:05:10.585
you classified them as integration.
&gt;&gt; Kent C. Dodds: Yep,

82
00:05:10.585 --> 00:05:17.095
I'd classify those as integration, yep.
&gt;&gt; Kent C. Dodds: All right,

83
00:05:17.095 --> 00:05:19.386
thanks everybody.

84
00:05:19.386 --> 00:05:23.724
Appreciate it.
&gt;&gt; Class: [APPLAUSE]

