WEBVTT

1
00:00:00.360 --> 00:00:05.688
&gt;&gt; Kent C. Dodds: Alright, so let's get
this underway, so we're writing a test,

2
00:00:05.688 --> 00:00:10.171
very basic fundamental test for
this login component.

3
00:00:10.171 --> 00:00:13.632
It's actually fairly simple,
it's not doing any asynchronous stuff.

4
00:00:13.632 --> 00:00:18.216
It accepts a single prop and
all we need to do is find this input,

5
00:00:18.216 --> 00:00:23.232
find this one and fill them out,
there are various ways we can go about

6
00:00:23.232 --> 00:00:29.170
doing that and then we need to click
on there or yeah, submit this form.

7
00:00:29.170 --> 00:00:32.300
And so let's go ahead and
make that happen in our test here.

8
00:00:33.600 --> 00:00:39.807
So we're going to import
Login from '../login' and

9
00:00:39.807 --> 00:00:46.161
we're also gonna be using JSX so
import react from react.

10
00:00:46.161 --> 00:00:51.407
And then this first step is arranged so
I'm gonna create my on submit handler so

11
00:00:51.407 --> 00:00:54.200
handle submit, that suggest function.

12
00:00:55.240 --> 00:01:02.399
And then I'm gonna create my container
equals document.createelementdiv.

13
00:01:04.610 --> 00:01:09.744
And then I'm going to render,
using ReactDom,

14
00:01:09.744 --> 00:01:14.003
from react-dom, ReactDom.render,

15
00:01:14.003 --> 00:01:21.283
the log-in component with that on
submit handler and I'll submit.

16
00:01:23.653 --> 00:01:25.600
&gt;&gt; Kent C. Dodds: There we go, container.

17
00:01:27.310 --> 00:01:29.902
&gt;&gt; Kent C. Dodds: And
then we can get a couple of our fields, so

18
00:01:29.902 --> 00:01:32.575
there are various ways
we can get the fields.

19
00:01:32.575 --> 00:01:39.240
I'm actually going to get the form field
as indicated and this would be container.

20
00:01:40.880 --> 00:01:47.398
And then I'll get the fields by their
name, so we've got username and password.

21
00:01:47.398 --> 00:01:54.260
So username and password = form.elements.

22
00:01:56.251 --> 00:01:59.900
&gt;&gt; Kent C. Dodds: Cool, so
that is the arrange step of our test.

23
00:01:59.900 --> 00:02:03.940
And then we need to fill out,
well, actually sorry,

24
00:02:03.940 --> 00:02:05.150
this is still arrange step.

25
00:02:05.150 --> 00:02:12.580
We need to fill out this form, with some
values, so we'll say username.value =,

26
00:02:12.580 --> 00:02:16.243
I think I said chucknorris in my solution.

27
00:02:16.243 --> 00:02:21.816
Username.password, oops, or sorry,

28
00:02:21.816 --> 00:02:29.480
that's password.value = I
do not need a password.

29
00:02:29.480 --> 00:02:35.030
Because he's Chuck Norris, of course and
then that's the arranged step.

30
00:02:35.030 --> 00:02:39.000
So, then we can dispatch our submit event,
so

31
00:02:39.000 --> 00:02:43.810
I'll just copy that,
Form.dispatchEvent, then submit Event.

32
00:02:43.810 --> 00:02:48.780
and because it's not asynchronous,
nothing asynchronous is happening,

33
00:02:48.780 --> 00:02:51.950
we can actually start making our
assertions on this handle submit.

34
00:02:53.970 --> 00:02:59.740
So we'll expect handle submit to have been

35
00:02:59.740 --> 00:03:06.370
called times one and to have been called
with and what should it be called with?

36
00:03:06.370 --> 00:03:08.900
Well, our username and our password.

37
00:03:10.150 --> 00:03:12.140
Actually, we can just keep that there and

38
00:03:12.140 --> 00:03:16.490
say, whatever I set the input value to,
that's what I want that to be.

39
00:03:18.840 --> 00:03:22.770
Cool, so we'll save that,
I stopped my test from running, so

40
00:03:22.770 --> 00:03:27.840
to start it up again,
I'll say npm run test:client.

41
00:03:27.840 --> 00:03:33.500
Whoops, I'm in the wrong drape tree,
there you go, there you go.

42
00:03:33.500 --> 00:03:36.390
Npm run test call client and
that will start out

43
00:03:36.390 --> 00:03:41.290
all the tests that are relevant to
the files that I've changed and so

44
00:03:41.290 --> 00:03:47.380
I'm just gonna scope it down by
hitting the p key, log in, got step 1.

45
00:03:47.380 --> 00:03:52.610
Whoops, log in step one dot to do,
okay, cool.

46
00:03:56.130 --> 00:04:01.018
Great, so
that is a fundamental no abstraction

47
00:04:01.018 --> 00:04:05.184
beyond just regular react API's test.

48
00:04:05.184 --> 00:04:11.150
And that's just using regular dom stuff,
what questions do you have about this?

49
00:04:12.400 --> 00:04:17.500
So here's a question, while you're
thinking about what you learned, so are we

50
00:04:17.500 --> 00:04:22.690
going to deal with change handlers for the
inputs simulating keyboard strokes, etc.?

51
00:04:23.840 --> 00:04:29.787
Yes, so we won't be doing that for,
like we don't have any examples for

52
00:04:29.787 --> 00:04:33.017
that, but I can show you how to do that.

53
00:04:33.017 --> 00:04:36.660
If you have a dynamic form, you need
to show validation as users typing.

54
00:04:36.660 --> 00:04:37.800
I can show you how to do that,

55
00:04:37.800 --> 00:04:43.200
once we get the abstraction stuff
going here in a little bit.

56
00:04:43.200 --> 00:04:44.030
Yes?

57
00:04:44.030 --> 00:04:47.177
&gt;&gt; off screen male: I saw somebody
elementing this in chat, but

58
00:04:47.177 --> 00:04:48.712
can you explain why?

59
00:04:48.712 --> 00:04:53.772
We have to go through this whole
complicated process of creating

60
00:04:53.772 --> 00:04:58.469
an event on the window and
then having the form dispatch it.

61
00:04:58.469 --> 00:05:02.477
&gt;&gt; Kent C. Dodds: Yeah, so that's actually
like the reason that seems complicated is

62
00:05:02.477 --> 00:05:05.656
because you're used to
something that's simpler and

63
00:05:05.656 --> 00:05:08.850
this is actually what those
simpler things are doing.

64
00:05:10.140 --> 00:05:14.280
So a part of the experience
of you understanding and

65
00:05:14.280 --> 00:05:19.360
having a good grasp of
this is understanding what

66
00:05:19.360 --> 00:05:23.440
is happening under the hood, so you can
use your abstractions more effectively.

67
00:05:23.440 --> 00:05:28.328
So, that's why we're gonna switch to
an abstraction here in a sec, but yes,

68
00:05:28.328 --> 00:05:29.077
thank you.

69
00:05:29.077 --> 00:05:31.326
&gt;&gt; off screen male: Okay, so
I was gonna ask a question,

70
00:05:31.326 --> 00:05:36.545
because normally I would use refs so
that I don't have to do Dom traversal.

71
00:05:36.545 --> 00:05:37.705
&gt;&gt; Kent C. Dodds: Okay.

72
00:05:37.705 --> 00:05:40.765
&gt;&gt; off screen male: And
is that something that you wanna

73
00:05:40.765 --> 00:05:43.905
avoid in a react-testing situation?

74
00:05:43.905 --> 00:05:44.619
&gt;&gt; Kent C. Dodds: Yeah, good question.

75
00:05:44.619 --> 00:05:47.715
So, you're saying, in your source
code you're gonna be using ref so

76
00:05:47.715 --> 00:05:50.065
you don't have to [INAUDIBLE].

77
00:05:50.065 --> 00:05:54.800
So, yeah and
whether to do that in the test.

78
00:05:54.800 --> 00:05:56.110
So what we're going to,

79
00:05:56.110 --> 00:05:59.860
the abstraction we're going to use here in
a little bit will actually give us an even

80
00:05:59.860 --> 00:06:05.360
better way of selecting the different
notes that we're looking for.

81
00:06:05.360 --> 00:06:09.570
If you wanted to use refs what you would
have to do is you would have to expose

82
00:06:09.570 --> 00:06:15.980
a prop like UsernameRef=[] and
so on and so forth and then

83
00:06:15.980 --> 00:06:20.350
those would have to be forwarded on, it
could get to be a real pain really fast.

84
00:06:20.350 --> 00:06:23.770
Cuz okay, now I'm gonna move this to
a separate component now I've got to,

85
00:06:23.770 --> 00:06:27.040
you're propt are only refs
which would not be fun.

86
00:06:27.040 --> 00:06:33.189
So yeah we do have a better way to select
these components and we'll do that next.

87
00:06:34.260 --> 00:06:36.378
That's a good question to lead us in.

88
00:06:38.529 --> 00:06:39.423
&gt;&gt; Kent C. Dodds: Yes?

89
00:06:39.423 --> 00:06:42.170
&gt;&gt; off screen male: I mean,
I think just one observation from me.

90
00:06:42.170 --> 00:06:47.120
I started unit testing last week for
the first time and we were using enzyme,

91
00:06:47.120 --> 00:06:51.770
so it was interesting to see
actually using React DOM to render.

92
00:06:52.900 --> 00:06:58.690
You know the components in the actual test
&gt;&gt; Kent C. Dodds: Yeah, yup, so this is,

93
00:06:58.690 --> 00:07:05.250
enzyme does a lot of stuff but
this is kind of similar.

94
00:07:05.250 --> 00:07:09.052
This is like a light weight version
of what the mount function does.

95
00:07:09.052 --> 00:07:12.112
It does create a domino and
it does mount it or

96
00:07:12.112 --> 00:07:17.074
it does render it with React Dom,
then it adds a whole lot of host of other

97
00:07:17.074 --> 00:07:21.066
things that you can do with
the wrapper that you get back.

98
00:07:21.066 --> 00:07:23.210
But, yeah, this is basically
what's happening under the hood.

