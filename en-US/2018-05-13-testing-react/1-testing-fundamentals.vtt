WEBVTT

1
00:00:00.000 --> 00:00:01.690
&gt;&gt; Kent C. Dodds: So we're gonna talk
about different forms of testing

2
00:00:01.690 --> 00:00:03.120
really briefly.

3
00:00:03.120 --> 00:00:06.640
This is one form of testing,
Static Code Analysis.

4
00:00:06.640 --> 00:00:10.764
This is happening through
a tool called ESLint.

5
00:00:10.764 --> 00:00:13.090
If you have your editor
configured to work with ESLint,

6
00:00:13.090 --> 00:00:15.670
you might see some ESLint
warnings as you're going through.

7
00:00:16.910 --> 00:00:23.200
ESLint can be really helpful at
identifying very simple bugs.

8
00:00:23.200 --> 00:00:27.270
There's also static type checkers
like Flow that can catch also,

9
00:00:27.270 --> 00:00:28.330
pretty simple bugs.

10
00:00:28.330 --> 00:00:32.150
But, in general,
the nice thing about these tools is that

11
00:00:32.150 --> 00:00:34.650
they work statically and so
they don't have to run your code.

12
00:00:34.650 --> 00:00:36.880
So you don't have to
really write these tests.

13
00:00:36.880 --> 00:00:41.500
With Flow, you're sort of writing
tests in the source with the typing.

14
00:00:41.500 --> 00:00:46.710
But yeah, in general,
there's not a whole lot of effort around

15
00:00:47.750 --> 00:00:52.150
writing these kinds of tests or
configuring these kinds of tools.

16
00:00:52.150 --> 00:00:55.070
So I highly recommend
that you use these tools.

17
00:00:55.070 --> 00:00:56.930
We will not be using these tools today.

18
00:00:56.930 --> 00:01:00.920
I thought it was enough just
to teach you testing React.

19
00:01:00.920 --> 00:01:04.570
It'd be a whole another workshop to
teach you a static type checker.

20
00:01:05.770 --> 00:01:12.330
But in your applications, I definitely
in React recommend using flow-typed or

21
00:01:12.330 --> 00:01:16.820
TypeScript, and
then obviously ESLint is kind of a given.

22
00:01:16.820 --> 00:01:19.960
One thing I should say about ESLint
is please don't enforce style

23
00:01:19.960 --> 00:01:23.200
rules with ESLint like code style,
code formating.

24
00:01:23.200 --> 00:01:25.810
It's silly, because we have Prettier,

25
00:01:25.810 --> 00:01:29.610
an amazing tool that will automatically
format your code for you.

26
00:01:29.610 --> 00:01:35.140
Use that instead, and then us ESLint
just to catch actually problems like.

27
00:01:35.140 --> 00:01:37.460
Variables aren't defined, stuff like that.

28
00:01:39.410 --> 00:01:44.040
Because the last thing I wanna do is see a
red squiggly because I have an extra space

29
00:01:44.040 --> 00:01:45.550
after the function keyword.

30
00:01:45.550 --> 00:01:47.622
My code's still gonna work, and

31
00:01:47.622 --> 00:01:49.770
then Prettier's gonna fix that
when I hit the save key anyway.

32
00:01:50.920 --> 00:01:53.050
So here's just a quick
example of a unit test,

33
00:01:53.050 --> 00:01:55.620
don't look to closely because
this is you first exercise.

34
00:01:55.620 --> 00:01:58.880
Just kidding,
feel free to look as closely as you like.

35
00:01:58.880 --> 00:02:02.570
So we have React and ReactDOM.

36
00:02:02.570 --> 00:02:06.840
And when you wanna render an application,
you ReactDOM.render.

37
00:02:06.840 --> 00:02:10.490
You could do the same thing in your test,
there's nothing wrong with doing that.

38
00:02:10.490 --> 00:02:12.416
And I'll show you with Jest,

39
00:02:12.416 --> 00:02:16.746
you can configure it to simulate
the browser environment in Node.

40
00:02:16.746 --> 00:02:22.370
And it's using jsdom, so
doing document.creatElement totally works.

41
00:02:22.370 --> 00:02:27.259
And yeah, you just use the component
the way that you would use

42
00:02:27.259 --> 00:02:29.717
it in a source code elsewhere.

43
00:02:29.717 --> 00:02:33.220
And then you can make assertions
based on what is rendered.

44
00:02:34.280 --> 00:02:36.680
So we'll look deeper into that, but

45
00:02:36.680 --> 00:02:39.130
unit tests are generally
pretty straightforward.

46
00:02:39.130 --> 00:02:45.840
And from a purist standpoint, a unit test
will mock out all of the dependencies.

47
00:02:45.840 --> 00:02:47.190
I care less about that.

48
00:02:47.190 --> 00:02:51.850
So for me, the unit versus integration
test is a little bit fluid.

49
00:02:51.850 --> 00:02:55.459
But in general,
unit test is a kind of a smaller test,

50
00:02:55.459 --> 00:02:57.881
testing something in particular.

51
00:02:57.881 --> 00:03:04.304
Integration tests with regard to React is
a little bit kind of a bigger experience.

52
00:03:04.304 --> 00:03:10.370
And so here we're rendering the entire
application with the router.

53
00:03:10.370 --> 00:03:13.149
And we can specify, hey,
route to this page and

54
00:03:13.149 --> 00:03:15.453
I'll show you how to do all this stuff.

55
00:03:15.453 --> 00:03:19.032
And so it takes a little bit more work.

56
00:03:19.032 --> 00:03:21.510
You have to mock out API calls and stuff.

57
00:03:22.840 --> 00:03:30.170
But with this, you're rendering more of
the many components working together.

58
00:03:32.980 --> 00:03:36.230
Yeah, so
that's the idea of an integration test.

59
00:03:36.230 --> 00:03:38.810
You get a lot more coverage with
an integration test than you do with

60
00:03:38.810 --> 00:03:39.920
the unit test.

61
00:03:39.920 --> 00:03:45.800
But in general, they can be a little bit
slower and also can be a little harder to

62
00:03:45.800 --> 00:03:50.280
set up, because of the network requesting
things that you have to mock out.

63
00:03:50.280 --> 00:03:55.210
End-to-end tests is
a totally different thing.

64
00:03:55.210 --> 00:03:56.160
It's not Jest.

65
00:03:56.160 --> 00:03:57.720
This is with Cypress.

66
00:03:57.720 --> 00:04:03.830
And you're kind of treating
the application as a black box that user,

67
00:04:03.830 --> 00:04:08.250
from a user's perspective clicking
on things and typing in some text.

68
00:04:08.250 --> 00:04:11.590
And then verifying the state
of the application

69
00:04:11.590 --> 00:04:13.660
sort of in a way the user would.

70
00:04:13.660 --> 00:04:16.750
And so
that is an example of an end-to-end, and

71
00:04:16.750 --> 00:04:19.340
we'll look into all of
these forms of tests.

72
00:04:21.260 --> 00:04:24.430
Okay, so
I'm not gonna go too deep into this, but

73
00:04:24.430 --> 00:04:28.750
this is link to a blog
post They have called.

74
00:04:28.750 --> 00:04:31.210
But really what is a JavaScript test?

75
00:04:31.210 --> 00:04:37.140
Where I kind of iteratively build an
insertion library and testing framework.

76
00:04:37.140 --> 00:04:40.260
We actually did that in
the testing workshop yesterday.

77
00:04:40.260 --> 00:04:45.194
And if you're interested, then you can
jump in the project in the other directory

78
00:04:45.194 --> 00:04:48.680
whats-a-test and start with 1.todo and
follow the instructions.

79
00:04:48.680 --> 00:04:52.800
And you too can build your assertion
library in JavaScript framework.

80
00:04:54.320 --> 00:04:58.279
But the fundamental concept
of a test in JavaScript

81
00:04:58.279 --> 00:05:03.167
is it's something that throws
an error when things are wrong.

82
00:05:03.167 --> 00:05:07.117
So if I pass the numbers one and
two to the sum function and

83
00:05:07.117 --> 00:05:11.168
I don't get three back,
then I'm gonna throw an error.

84
00:05:11.168 --> 00:05:15.429
And then the testing framework's
responsibility is to make it clear

85
00:05:15.429 --> 00:05:20.410
why that error occurred,
where the problem is, and how to fix it.

86
00:05:20.410 --> 00:05:24.412
That's kind of a hard task, but that's the
general idea of what a JavaScript test is.

