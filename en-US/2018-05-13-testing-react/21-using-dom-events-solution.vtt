WEBVTT

1
00:00:00.050 --> 00:00:04.130
&gt;&gt; Kent C. Dodds: Okey-dokey, so
that was a fun exercise, right?

2
00:00:04.130 --> 00:00:12.210
So let's go ahead and we'll re-factor
from render into documents.

3
00:00:12.210 --> 00:00:16.800
So that we can actually click on
the button and get that submit to happen.

4
00:00:17.930 --> 00:00:21.840
So this isn't necessarily any
better than what we had before.

5
00:00:21.840 --> 00:00:24.455
But I think most users are gonna
be clicking on the button, and so

6
00:00:24.455 --> 00:00:26.860
that's kinda why I wanna test it that way.

7
00:00:26.860 --> 00:00:29.210
So I'm gonna call this
render into documents.

8
00:00:30.990 --> 00:00:33.080
And then we'll just do the same thing.

9
00:00:34.220 --> 00:00:36.279
Render into documents, very, very small.

10
00:00:37.330 --> 00:00:39.690
API on top of render and

11
00:00:39.690 --> 00:00:45.550
all that it does in addition is append
to the container to the document body.

12
00:00:45.550 --> 00:00:50.870
And with that, it allows us to take
that submit button node and click on it.

13
00:00:52.290 --> 00:00:56.890
That's just a regular dom API and
then we can get rid of this cuz if it

14
00:00:56.890 --> 00:00:59.400
actually doesn't submit,
then we know that its type is submit.

15
00:00:59.400 --> 00:01:00.240
Or at least it works.

16
00:01:00.240 --> 00:01:01.580
It doesn't matter that the type is submit,

17
00:01:01.580 --> 00:01:03.490
just the fact that it works
is good enough for us.

18
00:01:05.190 --> 00:01:06.930
And our tests are still passing,

19
00:01:08.040 --> 00:01:09.640
especially because we're
not running the right ones.

20
00:01:09.640 --> 00:01:10.812
So let's run [LAUGH] the right ones.

21
00:01:10.812 --> 00:01:15.020
Login.step-3.todo, okay, good.

22
00:01:15.020 --> 00:01:16.250
Now are tests are still passing.

23
00:01:16.250 --> 00:01:17.360
Let's make sure that they can fail,

24
00:01:17.360 --> 00:01:19.830
just to be totally sure that
we're running the right ones.

25
00:01:22.650 --> 00:01:26.580
Cool, this means we don't need
the container any more, but

26
00:01:26.580 --> 00:01:29.250
here's a little bit of a problem.

27
00:01:29.250 --> 00:01:37.470
At the end,
we console.log document.body.innerHTML.

28
00:01:37.470 --> 00:01:39.804
And we'll see that it has our form in it,
and

29
00:01:39.804 --> 00:01:42.090
there's nothing in there cleaning it up.

30
00:01:42.090 --> 00:01:45.820
So if we had another test,
and we put this in there,

31
00:01:47.140 --> 00:01:50.200
the document body is still messed up,
right?

32
00:01:50.200 --> 00:01:52.900
So there are a couple of
ways we can deal with this.

33
00:01:52.900 --> 00:01:58.790
We could pull the unmount utility
out here, and then call a mount.

34
00:01:58.790 --> 00:02:04.067
And that'll pull it out, so now it
actually unmounted the component but

35
00:02:04.067 --> 00:02:07.560
it didn't actually remove the container.

36
00:02:07.560 --> 00:02:08.970
So unmount doesn't do
anything about the container.

37
00:02:08.970 --> 00:02:12.080
It just makes the component
itself unmount.

38
00:02:12.080 --> 00:02:13.960
So if we really wanna clean everything up,

39
00:02:13.960 --> 00:02:19.750
we could do document.body.enterHTML
equals empty strain.

40
00:02:19.750 --> 00:02:21.520
And then we fix everything up.

41
00:02:21.520 --> 00:02:27.430
Or we could just have a testing
library that is really useful and

42
00:02:27.430 --> 00:02:30.020
we have it after each cleanup.

43
00:02:31.950 --> 00:02:36.200
We'll pull that cleanup from
the react-testing library.

44
00:02:36.200 --> 00:02:37.729
Then that cleans everything up for
us nice.

45
00:02:39.130 --> 00:02:44.300
So if you're going to use render into
document which is a handy method,

46
00:02:44.300 --> 00:02:49.660
then it's pretty recommended that you
also have this after each here too.

47
00:02:51.890 --> 00:02:56.610
One other thing about this is sometimes
a click event isn't enough or

48
00:02:56.610 --> 00:03:00.840
the click method isn't enough, and
you want to simulate a mouse over or

49
00:03:00.840 --> 00:03:01.540
something like that.

50
00:03:03.610 --> 00:03:05.420
Or sorry, you don't wanna simulate it.

51
00:03:05.420 --> 00:03:09.710
You wanna fire an actual event,
then you can pull in fireEvent.

52
00:03:10.790 --> 00:03:15.470
And this will do that new
window.event here's the type.

53
00:03:15.470 --> 00:03:18.590
And it has a similar API to simulate.

54
00:03:18.590 --> 00:03:22.940
And so we could do fireEvent.click.

55
00:03:22.940 --> 00:03:25.860
We're gonna fire that event
on the submit button node.

56
00:03:27.280 --> 00:03:28.970
So that's another way that we
could go about doing that.

