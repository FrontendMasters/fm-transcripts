WEBVTT

1
00:00:00.000 --> 00:00:03.850
&gt;&gt; Kent C. Dodds: The solution for this
is remarkably similar to the registration

2
00:00:06.030 --> 00:00:06.950
experience.

3
00:00:06.950 --> 00:00:11.070
And actually normally in an application,
I would not have two

4
00:00:11.070 --> 00:00:14.330
tests that are doing all this stuff,
it's basically the same thing.

5
00:00:14.330 --> 00:00:17.180
If I really wanted to, maybe I'd
abstract this test away and just call

6
00:00:17.180 --> 00:00:20.240
a function with a couple parameters
to change a couple of those things.

7
00:00:20.240 --> 00:00:25.320
But what I probably do is just test one
of them and then test the other one

8
00:00:25.320 --> 00:00:29.200
to make sure that at least you can get to
the login screen or something like that.

9
00:00:29.200 --> 00:00:31.790
Cuz yeah,
these are all using exact same components,

10
00:00:31.790 --> 00:00:34.050
they're very similar to each other.

11
00:00:34.050 --> 00:00:37.690
And that said, like it's not really
expensive once you have the test

12
00:00:37.690 --> 00:00:41.450
to keep it around so that's it's sixes.

13
00:00:41.450 --> 00:00:43.890
Testing is just so loosy goosy.

14
00:00:43.890 --> 00:00:46.875
So before each one,
we're gonna initialize our application,

15
00:00:46.875 --> 00:00:51.460
setup the state that we need, and then
we'll render our app with the router so

16
00:00:51.460 --> 00:00:54.410
it has React router context all built in.

17
00:00:54.410 --> 00:01:01.840
We could start at a particular route say,
oops, route is log-in.

18
00:01:01.840 --> 00:01:04.521
That's part of the abstraction
that I showed you earlier from

19
00:01:04.521 --> 00:01:07.650
the client-test-utils.

20
00:01:07.650 --> 00:01:12.600
But I kinda have actually clicking and
going to the route,

21
00:01:12.600 --> 00:01:16.030
make sure I have my route
configuration set up properly.

22
00:01:16.030 --> 00:01:20.259
So, that's what I'm going with here.

23
00:01:21.380 --> 00:01:27.350
We wait for things to finish loading,
so back in that abstraction here.

24
00:01:27.350 --> 00:01:31.060
Finish loading is using the wait
abstraction which just waits until this no

25
00:01:31.060 --> 00:01:37.400
longer throws an error and so
we expect the loading to be null.

26
00:01:37.400 --> 00:01:42.800
So once that query returns something
that's null then we'll be good to go.

27
00:01:42.800 --> 00:01:44.550
Actually, as kind of a part of this,

28
00:01:44.550 --> 00:01:49.530
we could change this a little
bit to the getByText.

29
00:01:49.530 --> 00:01:52.770
And then we could actually
remove the whole expectation cuz

30
00:01:52.770 --> 00:01:55.190
this will actually throw an error also.

31
00:01:55.190 --> 00:01:58.710
And so, well actually no,
that's the inverse.

32
00:01:58.710 --> 00:02:01.930
So, yeah I guess that's why I
had to does the expect, but

33
00:02:01.930 --> 00:02:06.649
I just wanted to point out that
all of the getBy APIs have

34
00:02:06.649 --> 00:02:09.732
a queryBy which is actually
what they're built on top of.

35
00:02:09.732 --> 00:02:14.892
And that queryBy will return
null whereas the getBy will

36
00:02:14.892 --> 00:02:19.740
throw an error if they
can't find anything, okay?

37
00:02:21.210 --> 00:02:25.930
So once the loading is gone,
then we'll click on the login and

38
00:02:25.930 --> 00:02:29.010
with the left click,
thank you React router].

39
00:02:29.010 --> 00:02:34.030
And we'll make sure that we've
navigated to the other page, and

40
00:02:34.030 --> 00:02:36.910
then we'll generate a fake user.

41
00:02:36.910 --> 00:02:40.050
We don't care what the username
password is, we'll get the username and

42
00:02:40.050 --> 00:02:45.850
password fields in the form and
we'll set those values.

43
00:02:45.850 --> 00:02:47.660
And then we'll submit the form, but

44
00:02:47.660 --> 00:02:52.630
before we do we need to prepare Axios so
that it's mocked in such

45
00:02:52.630 --> 00:02:57.730
a way to return the data that we want
it to return when the post is called.

46
00:02:57.730 --> 00:03:01.050
And so we set that up with our fake user.

47
00:03:01.050 --> 00:03:03.450
We generate a token for that fake user and

48
00:03:03.450 --> 00:03:08.460
then return or resolve with
data that has an object or that

49
00:03:08.460 --> 00:03:13.350
is an object with the user property that
consists of the fake user and the token.

50
00:03:14.700 --> 00:03:16.280
And then we simulate a submit.

51
00:03:16.280 --> 00:03:20.560
Alternatively, and maybe better,
it would be better to

52
00:03:20.560 --> 00:03:25.940
actually load this into the DOM and
then click on the submit button.

53
00:03:25.940 --> 00:03:27.926
So you could do that either way.

54
00:03:27.926 --> 00:03:32.450
Danny at told me that this simulate
thing from React DOM test-utils is

55
00:03:32.450 --> 00:03:36.640
as overly complicated and
we probably shouldn't be using it.

56
00:03:36.640 --> 00:03:38.920
Old habits die hard, I guess.

57
00:03:38.920 --> 00:03:42.440
So yeah, you might want to just
load this into the DOM and

58
00:03:42.440 --> 00:03:45.590
then do actual quick events on there.

59
00:03:46.610 --> 00:03:50.410
The only reason you actually have to do
that is because the way React does event

60
00:03:50.410 --> 00:03:56.020
handling, it uses event delegation and
attaches a single event handler for

61
00:03:56.020 --> 00:04:00.064
every event type on the body or
on the document.

62
00:04:00.064 --> 00:04:03.560
And then any event will bubble
up all the way through that and

63
00:04:03.560 --> 00:04:06.610
then it can send things off
to where it's supposed to go.

64
00:04:06.610 --> 00:04:11.380
Event delegation was really popular back
in jQuery days for performance reasons.

65
00:04:11.380 --> 00:04:14.240
I'm pretty sure that it's not
really a problem any more,

66
00:04:14.240 --> 00:04:16.030
browsers are a lot faster.

67
00:04:16.030 --> 00:04:17.360
Preact, for example,

68
00:04:17.360 --> 00:04:22.630
does not do any of the delegation,
it just attaches directly to those nodes.

69
00:04:22.630 --> 00:04:27.130
And so, eventually, maybe React
will remove its event delegation or

70
00:04:27.130 --> 00:04:30.800
at least it will only attach things to
the root node that you're rendering.

71
00:04:30.800 --> 00:04:31.740
That would be really great and

72
00:04:31.740 --> 00:04:35.130
then we wouldn't have to worry about
putting things in the document.

73
00:04:35.130 --> 00:04:37.050
But for now that's what we have to do.

74
00:04:38.430 --> 00:04:43.240
Okay, so then, oops,
after we submit we're gonna wait for

75
00:04:43.240 --> 00:04:47.050
all of the requests to finish and
we finish loading, that loading goes away.

76
00:04:47.050 --> 00:04:53.400
And then, we ensure that the post
on our axiosMock was called once.

77
00:04:53.400 --> 00:04:58.210
And that was called with auth-login and
the fake user and then we verify that

78
00:04:58.210 --> 00:05:03.200
our logic to get the user in a login
in state was actually worked.

79
00:05:03.200 --> 00:05:05.810
So, we now have the token
in local storage,

80
00:05:05.810 --> 00:05:10.350
we're not on the login page anymore and
the username display shows

81
00:05:10.350 --> 00:05:14.539
our fake user's username and
that the logout button exists.

82
00:05:18.000 --> 00:05:23.900
Okay, so that's that,
any questions about integration testing,

83
00:05:23.900 --> 00:05:29.000
UI, or React applications, yes?
&gt;&gt; Speaker 2: I was kinda wondering for

84
00:05:29.000 --> 00:05:30.240
both this test and last test,

85
00:05:30.240 --> 00:05:35.100
we checked that it wasn't on the login
page or the registration page anymore.

86
00:05:35.100 --> 00:05:37.519
Is there a good way and

87
00:05:37.519 --> 00:05:43.356
we're just checking string for that.
&gt;&gt; Kent C. Dodds: Yeah,

88
00:05:43.356 --> 00:05:48.270
I think we could probably check that the,
let's see, href,

89
00:05:48.270 --> 00:05:54.200
let's console log this,
window.location.href and

90
00:05:54.200 --> 00:05:58.240
I think we need to run app login.

91
00:05:58.240 --> 00:06:02.967
So yeah, we could just say, 2b,

92
00:06:02.967 --> 00:06:07.994
expect, oops, there we go.

93
00:06:07.994 --> 00:06:12.340
And actually, it is only that
because I've configured it to be so.

94
00:06:12.340 --> 00:06:17.121
If we got to adjust configuration
&gt;&gt; Kent C. Dodds: Maybe it's in,

95
00:06:17.121 --> 00:06:17.750
there it is.

96
00:06:17.750 --> 00:06:23.180
Test environments URL, so
that's why it is what that is,

97
00:06:23.180 --> 00:06:26.280
but if you say 2b,
then it couldn't also be login.

98
00:06:27.330 --> 00:06:31.770
So you could do that just as well,
I wouldn't have any problem with that.

99
00:06:31.770 --> 00:06:33.320
That's actually better,

100
00:06:33.320 --> 00:06:38.640
it's more specific to what we want,
any other questions or concerns?

101
00:06:41.830 --> 00:06:46.626
Okay so, one person asked
me during the break to talk

102
00:06:46.626 --> 00:06:49.780
about testing a failure case.

103
00:06:49.780 --> 00:06:51.510
So, what if the log in fails?

104
00:06:51.510 --> 00:06:54.380
So, and how would you go about doing that?

105
00:06:54.380 --> 00:06:58.840
So, you could simulate a failed
request right here with this mock

106
00:06:58.840 --> 00:07:01.880
implementation you say promise or reject.

107
00:07:01.880 --> 00:07:04.050
May be the server sends
an error message or

108
00:07:04.050 --> 00:07:09.250
something like that,
whatever it takes for that to happen.

109
00:07:09.250 --> 00:07:12.320
And then you have to

110
00:07:13.770 --> 00:07:18.180
check the error messages displayed
properly or whatever's happening.

111
00:07:18.180 --> 00:07:22.889
So, maybe you'd still wait finish
loading and then you dissent that,

112
00:07:22.889 --> 00:07:25.880
the error message is displayed and
what not.

113
00:07:25.880 --> 00:07:29.070
I might do one of those and then if there
are a bunch of different other edge cases

114
00:07:29.070 --> 00:07:34.660
like that I'd move that down closer
to the unit test because otherwise,

115
00:07:34.660 --> 00:07:36.600
you wind up testing the same thing a lot.

116
00:07:38.200 --> 00:07:41.550
You're testing, loading the whole app,
and finish loading, and all that stuff,

117
00:07:41.550 --> 00:07:43.920
all over, over and over and over again.

118
00:07:43.920 --> 00:07:50.670
Generally, I kinda stick with the happy
path, and then for the higher level tests,

119
00:07:50.670 --> 00:07:55.590
and then when I get to edge cases, then I
go down further as far as is reasonable.

