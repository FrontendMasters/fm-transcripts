WEBVTT

1
00:00:00.000 --> 00:00:04.220
&gt;&gt; Kent C. Dodds: So
let's refactor this a little bit.

2
00:00:04.220 --> 00:00:07.569
So I actually didn't mention
the generate method,

3
00:00:07.569 --> 00:00:10.764
but that's just to generate
a login form for you so

4
00:00:10.764 --> 00:00:15.270
you don't have to use the Chuck Norris
username if you don't want to.

5
00:00:15.270 --> 00:00:18.490
But I'm going to keep using that.

6
00:00:18.490 --> 00:00:22.540
No, that actually is kind
of an important point.

7
00:00:22.540 --> 00:00:24.690
If the particular user name and

8
00:00:24.690 --> 00:00:29.880
password aren't relevant, then having
them in your test can be a distraction.

9
00:00:29.880 --> 00:00:33.270
I might think, maybe there's an actual
user name, Chuck Norris, and

10
00:00:33.270 --> 00:00:35.260
that has some significance.

11
00:00:35.260 --> 00:00:36.320
Or something.

12
00:00:36.320 --> 00:00:40.950
So by abstracting away the things
that are not relevant,

13
00:00:40.950 --> 00:00:44.480
you can kind of communicate that it
doesn't really matter what this is.

14
00:00:44.480 --> 00:00:47.740
So I'm gonna say loginform here.

15
00:00:47.740 --> 00:00:52.400
And then we're also going to
pull in render and simulate.

16
00:00:52.400 --> 00:00:55.843
And rather than ReactDOM.render,

17
00:00:55.843 --> 00:01:01.300
I'm going to just use render
from react testing library.

18
00:01:01.300 --> 00:01:03.660
And here we'll call this container.

19
00:01:03.660 --> 00:01:08.050
And we'll also need getByLabelText
to get our form fields and

20
00:01:08.050 --> 00:01:13.980
getByText to get our submit button,
which I'll show you why here in a second.

21
00:01:13.980 --> 00:01:16.270
And then we don't need to pass the div.

22
00:01:16.270 --> 00:01:19.690
Fun fact, you could actually
pass a container here and

23
00:01:19.690 --> 00:01:20.960
render to something specific.

24
00:01:20.960 --> 00:01:25.510
If you created a div and you wanted to
render to that one for some reason,

25
00:01:25.510 --> 00:01:30.550
that's actually how you could rerender
a component, like change its props.

26
00:01:30.550 --> 00:01:33.530
So you just rerender the same
thing to the same container and

27
00:01:33.530 --> 00:01:35.229
that'll be like updating the props.

28
00:01:37.210 --> 00:01:39.680
Cool.
So then we can get rid of this div,

29
00:01:39.680 --> 00:01:41.550
we don't need that any more.

30
00:01:41.550 --> 00:01:44.840
And to get our usernameNode and

31
00:01:44.840 --> 00:01:48.230
our passwordNode,
we're gonna do that differently now.

32
00:01:48.230 --> 00:01:54.580
We'll say, the usernameNode is
getByLabelText, username is capitalised.

33
00:01:54.580 --> 00:01:55.870
But it actually doesn't matter.

34
00:01:55.870 --> 00:01:57.050
It will be lower case.

35
00:01:57.050 --> 00:01:59.320
User doesn't care if it's capitalized,
all caps, anything.

36
00:01:59.320 --> 00:02:02.510
So the library doesn't care either.

37
00:02:02.510 --> 00:02:05.140
So it will compare them lower cased.

38
00:02:05.140 --> 00:02:06.626
You can also pass a regex.

39
00:02:06.626 --> 00:02:11.340
I didn't mention that, but you can pass
a regex or even a function that accepts

40
00:02:11.340 --> 00:02:14.570
the element and its text and
you can check it that way.

41
00:02:15.600 --> 00:02:17.460
Okay, so then this one will be Password.

42
00:02:19.580 --> 00:02:21.730
And we can get rid of that.

43
00:02:21.730 --> 00:02:28.830
And then for the form node, so we could
add a data test attribute to this one.

44
00:02:28.830 --> 00:02:31.261
If you want to, you could do that.

45
00:02:31.261 --> 00:02:36.073
I think at some point it's reasonable to
assume that we're not ever going to have

46
00:02:36.073 --> 00:02:38.902
more than one form in this
log in component, and

47
00:02:38.902 --> 00:02:42.900
so it'd be okay to just say,
container.querySelect your form.

48
00:02:42.900 --> 00:02:44.740
Just get me the form that's in there.

49
00:02:44.740 --> 00:02:51.395
I would not recommend doing
firstChild.firstChild.

50
00:02:51.395 --> 00:02:53.125
That will also get you the form.

51
00:02:53.125 --> 00:02:55.685
But then that ties your test
to the structure of the DOM,

52
00:02:55.685 --> 00:02:58.475
where the user doesn't care
about the structure of the DOM.

53
00:02:58.475 --> 00:03:02.222
So what the user cares about
is finding that form, what we

54
00:03:02.222 --> 00:03:07.930
care about is finding that form too,
so that's how we are going to do that.

55
00:03:07.930 --> 00:03:10.610
And then I'm also going to
get that submit button.

56
00:03:10.610 --> 00:03:13.760
But I'm gonna get it by the text, because.

57
00:03:13.760 --> 00:03:16.580
Sorry, I forgot to mention this.

58
00:03:16.580 --> 00:03:19.490
The form component actually
renders a submit button.

59
00:03:19.490 --> 00:03:20.630
And I don't think that.

60
00:03:22.376 --> 00:03:25.630
Yeah, maybe you didn't actually do
anything with the submit button, but

61
00:03:25.630 --> 00:03:27.180
we're gonna do that.

62
00:03:27.180 --> 00:03:28.630
I'm gonna show you something with that.

63
00:03:28.630 --> 00:03:34.190
So anyway, this form component
renders the submit button right here.

64
00:03:34.190 --> 00:03:36.190
So we're gonna just look for
it by its text.

65
00:03:38.080 --> 00:03:42.400
And so we'll say getByText, Submit.

66
00:03:43.490 --> 00:03:45.360
&gt;&gt; Speaker 2: It's case sensitive?

67
00:03:45.360 --> 00:03:47.970
&gt;&gt; Kent C. Dodds: No, so
it's totally insensitive.

68
00:03:47.970 --> 00:03:49.070
Cuz your users don't care.

69
00:03:49.070 --> 00:03:51.630
Could be all caps and
they still can understand what's going on.

70
00:03:53.030 --> 00:03:55.080
&gt;&gt; Speaker 2: That is a regex though,
right?

71
00:03:55.080 --> 00:03:58.392
&gt;&gt; Kent C. Dodds: So, this is a regex.

72
00:03:58.392 --> 00:03:59.890
Yeah, and we can do it that way too.

73
00:03:59.890 --> 00:04:02.860
If we wanna make sure that it is
submit and nothing but submit and

74
00:04:02.860 --> 00:04:06.050
it's case sensitive,
then this is what we would do.

75
00:04:06.050 --> 00:04:10.070
Say it starts with submit,
ends with submit.

76
00:04:10.070 --> 00:04:14.682
And if we want to make it case
insensitive, we add an i, but

77
00:04:14.682 --> 00:04:17.990
the general case, I don't really care.

78
00:04:17.990 --> 00:04:24.380
Cuz somebody could come in later and
say submit form for the elements.

79
00:04:24.380 --> 00:04:28.934
You can decide if that matters to you
if you want your tests to break if they

80
00:04:28.934 --> 00:04:31.184
change the text in that kind of way.

81
00:04:31.184 --> 00:04:34.110
But as long as it contains the text
submit, then it's good to go.

82
00:04:36.010 --> 00:04:36.537
Okay, cool.
So

83
00:04:36.537 --> 00:04:39.792
then the rest of this right
here is gonna be the same.

84
00:04:39.792 --> 00:04:44.951
Rather than using raw DOM APIs for
this, we're gonna use

85
00:04:44.951 --> 00:04:50.449
React's simulate method to
simulate a submit on the forum.

86
00:04:50.449 --> 00:04:51.618
Whoops.

87
00:04:53.706 --> 00:04:57.580
&gt;&gt; Kent C. Dodds: And
our tests are passing.

88
00:04:57.580 --> 00:05:00.574
So one thing that is in here that
we didn't talk about before.

89
00:05:00.574 --> 00:05:06.970
But I have this assertion that this
submit button has the type of submit.

90
00:05:06.970 --> 00:05:10.240
The reason that we have that
is because if it doesn't,

91
00:05:10.240 --> 00:05:14.120
then clicking on the submit
button will not submit the form.

92
00:05:14.120 --> 00:05:17.440
Because the submit button doesn't
have an onclick handler on it.

93
00:05:17.440 --> 00:05:20.300
The form has a submit on it.

94
00:05:20.300 --> 00:05:23.970
And in addition to that,
if you don't have any button at all or

95
00:05:23.970 --> 00:05:28.560
if it's not typed submit, then you hit
Enter and that also will not submit.

96
00:05:28.560 --> 00:05:33.273
So it's important that the submit
node has a submit on it.

97
00:05:33.273 --> 00:05:38.186
And so there are some other things that
if we were to try and take this submit

98
00:05:38.186 --> 00:05:42.798
button and click on it, our form
actually will not actually submit.

99
00:05:42.798 --> 00:05:47.630
And this is due to event delegation and
how React does that.

100
00:05:47.630 --> 00:05:49.477
It's kinda frustrating.

101
00:05:49.477 --> 00:05:54.430
And we can resolve that
in our next exercise.

102
00:05:54.430 --> 00:05:56.360
But that's what we're doing so far.

103
00:05:56.360 --> 00:05:59.704
If you wanna use submit, then you
have to do some extra, or simulate,

104
00:05:59.704 --> 00:06:03.347
then you have to do some extra work to
make sure that things are gonna be okay.

105
00:06:06.769 --> 00:06:10.880
&gt;&gt; Kent C. Dodds: Okay, so
what questions do you have about this?

106
00:06:10.880 --> 00:06:14.529
Actually, before you ask your
questions cuz I know you have many.

107
00:06:14.529 --> 00:06:19.744
And I know you have lots of feedback and
elaboration to submit.

108
00:06:19.744 --> 00:06:24.207
But I just want to ask what do you
think about the testing library and

109
00:06:24.207 --> 00:06:27.170
the experience of writing
a test with this?

110
00:06:29.050 --> 00:06:33.211
I'm seeing nods, but that doesn't,
like yes, my assumptions were correct,

111
00:06:33.211 --> 00:06:34.873
this is a terrible experience.

112
00:06:34.873 --> 00:06:36.447
No.

113
00:06:36.447 --> 00:06:39.533
&gt;&gt; Speaker 2: So I like all
the helpers to get by label text,

114
00:06:39.533 --> 00:06:45.190
and all the documentation there to
find these different selectors.

115
00:06:45.190 --> 00:06:49.140
I'm not very familiar with Enzyme, so
I didn't really have a comparison there.

116
00:06:49.140 --> 00:06:56.437
A question I have is, I wasn't quite
sure why would you use getByLabelText.

117
00:06:56.437 --> 00:07:00.800
I wasn't sure what that was
finding versus getByText.

118
00:07:00.800 --> 00:07:04.387
GetByText is just actual text that's
rendered to the screen versus?

119
00:07:04.387 --> 00:07:08.100
&gt;&gt; Kent C. Dodds: Yeah, let me,
that's a great question for clarification.

120
00:07:08.100 --> 00:07:10.470
So getByLabelText.

121
00:07:10.470 --> 00:07:18.140
The object of this query is to get
a form control that is labeled.

122
00:07:18.140 --> 00:07:23.920
And so, here as an example, we have a
label and that has an HTML for attribute.

123
00:07:23.920 --> 00:07:26.440
So, what it's doing under
the covers is it looks for

124
00:07:26.440 --> 00:07:29.410
all labels that have
the text that you specify.

125
00:07:29.410 --> 00:07:32.429
And once it finds one,
it's going to check the HTML for

126
00:07:32.429 --> 00:07:35.198
attribute and
find the input that has the same ID.

127
00:07:35.198 --> 00:07:37.890
And then that's what it's gonna give you.

128
00:07:37.890 --> 00:07:41.666
Or the text area, or the check box,
or whatever the case may be.

129
00:07:41.666 --> 00:07:47.471
If, then there are alternative ways
to associate a label to an input for

130
00:07:47.471 --> 00:07:49.930
accessibility purposes.

131
00:07:49.930 --> 00:07:52.986
And that is, and
also functional purposes as well.

132
00:07:52.986 --> 00:07:55.381
And that is for
the label to have an ID and

133
00:07:55.381 --> 00:07:58.010
then the input to have
an ARIA labelled by.

134
00:07:58.010 --> 00:08:02.510
And then there are couple other mechanisms
to associate levels with form fields.

135
00:08:02.510 --> 00:08:07.445
But yeah, so for accessibility reasons,
you're using a screen reader,

136
00:08:07.445 --> 00:08:10.440
you come to an element,
if it has a label, it'll read the label.

137
00:08:11.980 --> 00:08:16.130
And if it's not associated properly,
then it doesn't read that label.

138
00:08:16.130 --> 00:08:20.970
And so you want to make sure that these
things are associated with each other.

139
00:08:20.970 --> 00:08:22.400
On top of that,

140
00:08:22.400 --> 00:08:27.230
when you have a form, if the label is
associated, you can click on the label.

141
00:08:27.230 --> 00:08:29.020
It'll put focus on the input.

142
00:08:29.020 --> 00:08:34.310
So there's functionality
associated with that too.

143
00:08:34.310 --> 00:08:35.851
Yeah, does that answer your question?

144
00:08:35.851 --> 00:08:36.381
&gt;&gt; Speaker 2: It does, yeah.

145
00:08:36.381 --> 00:08:37.468
Thank you.

146
00:08:37.468 --> 00:08:38.331
&gt;&gt; Kent C. Dodds: Okay.

147
00:08:38.331 --> 00:08:39.863
And then on the getByText,

148
00:08:39.863 --> 00:08:43.469
we could actually get the label
element itself with getByText.

149
00:08:43.469 --> 00:08:48.272
So we'd say get me the element
that has the text password.

150
00:08:48.272 --> 00:08:49.840
And that would get us the label element.

151
00:08:49.840 --> 00:08:53.956
But we don't really operate on that,
so we don't care.

152
00:08:53.956 --> 00:08:56.602
&gt;&gt; Speaker 2: If you have multiple
elements with the same name,

153
00:08:56.602 --> 00:08:58.350
does it return an array then?

154
00:08:58.350 --> 00:08:59.630
&gt;&gt; Kent C. Dodds: That's a good question.

155
00:08:59.630 --> 00:09:02.154
No, it does not.

156
00:09:02.154 --> 00:09:05.800
I suppose I could see a situation
where that might be useful.

157
00:09:05.800 --> 00:09:11.130
And so
maybe that's something we could add.

158
00:09:11.130 --> 00:09:14.730
The challenge there is, what I might do

159
00:09:17.100 --> 00:09:19.700
with whatever it is that
you're trying to accomplish.

160
00:09:19.700 --> 00:09:25.830
Maybe you have rows of form fields, so
they're the same, or something like that.

161
00:09:25.830 --> 00:09:28.800
So what I do is,
I'd find the row that I want first, and

162
00:09:28.800 --> 00:09:31.430
then I'd use the DOM testing library.

163
00:09:31.430 --> 00:09:36.360
Because you can specify a container for
the scope.

164
00:09:36.360 --> 00:09:40.860
So getByLabelText, here's my container,
I want you to do that searching.

165
00:09:40.860 --> 00:09:44.350
So that's probably how I'd go about that.

166
00:09:44.350 --> 00:09:48.200
There might be a use case to make
that a little bit easier though, so.

167
00:09:49.830 --> 00:09:50.796
Other questions?

168
00:09:53.818 --> 00:09:54.491
&gt;&gt; Kent C. Dodds: Okay?

169
00:09:54.491 --> 00:09:58.394
&gt;&gt; Speaker 3: I would say
validation on this library.

170
00:09:58.394 --> 00:10:02.871
Because using Enzyme to run
some of the tests that I’ve

171
00:10:02.871 --> 00:10:07.460
written in the past,
I think I was looking for an input.

172
00:10:08.520 --> 00:10:11.008
And I’d have to find
the actual input versus.

173
00:10:11.008 --> 00:10:14.997
Like, so there wasn't really any
way to test to make sure the label

174
00:10:14.997 --> 00:10:18.260
was displaying what I was expecting.

175
00:10:18.260 --> 00:10:22.590
Just kind of makes sense that we should be

176
00:10:22.590 --> 00:10:24.770
really testing it from
the user standpoint.

177
00:10:24.770 --> 00:10:28.930
Like this is the label for this input, so.

178
00:10:30.240 --> 00:10:32.170
&gt;&gt; Kent C. Dodds: Yeah, so actually,

179
00:10:32.170 --> 00:10:37.490
when I first wrote the library,
everything was just data test IDs.

180
00:10:37.490 --> 00:10:40.170
I didn't have getByLabelText or
any of that.

181
00:10:40.170 --> 00:10:43.030
And then somebody commented
on my blog post about it.

182
00:10:43.030 --> 00:10:45.620
And it was like, hey,
this is actually a really bad idea.

183
00:10:45.620 --> 00:10:48.469
You should be.

184
00:10:48.469 --> 00:10:51.844
Well, first off, you shouldn't be
changing your production code for tests.

185
00:10:51.844 --> 00:10:55.261
And it's like yeah, I know, but
it's kinda better than CSS class names.

186
00:10:55.261 --> 00:10:58.630
And said, no,
I'm not suggesting class names.

187
00:10:58.630 --> 00:11:04.824
I'm suggesting doing this with as
if the user was using your stuff,

188
00:11:04.824 --> 00:11:09.401
using ARIA attributes and
things of that nature.

189
00:11:09.401 --> 00:11:10.420
And that made a lot of sense.

190
00:11:10.420 --> 00:11:16.570
So that's where we got the getByLabelText
and getByText and things like that.

191
00:11:16.570 --> 00:11:21.931
So, I'm glad that you liked that,
I do too.

192
00:11:21.931 --> 00:11:23.040
All right, cool.

193
00:11:24.510 --> 00:11:27.340
So now I am excited to
hear what you learned.

194
00:11:27.340 --> 00:11:29.613
Well, I guess some of you kinda
mentioned what you learned.

195
00:11:29.613 --> 00:11:34.873
But what else did you take away from
this refactor that we just did?

196
00:11:37.756 --> 00:11:39.928
&gt;&gt; Kent C. Dodds: Yes, Peter?

197
00:11:39.928 --> 00:11:45.620
&gt;&gt; Peter: So, like people have mentioned,
this library is obviously

198
00:11:45.620 --> 00:11:50.866
very opinionated about how
you should be testing your,

199
00:11:50.866 --> 00:11:56.240
and sort of specifically like a form and
input elements.

200
00:11:57.560 --> 00:12:04.979
And I like that you have to,
it communicates that pretty well.

201
00:12:04.979 --> 00:12:10.026
So sort of what you explained
about how you have to, how it sort

202
00:12:10.026 --> 00:12:16.700
of limitation of React simulate that we
have to go in and grab the form node.

203
00:12:16.700 --> 00:12:21.090
Even though the form node is
sort of transparent to the user,

204
00:12:21.090 --> 00:12:22.540
they really don't care
about the form node.

205
00:12:22.540 --> 00:12:25.340
&gt;&gt; Kent C. Dodds: Yeah.
&gt;&gt; Peter: The library communicates that

206
00:12:25.340 --> 00:12:30.230
pretty well, I think, by, you know,
we have to use the container and

207
00:12:30.230 --> 00:12:31.580
use querySelector to do that.

208
00:12:31.580 --> 00:12:33.031
It's not as convenient.

209
00:12:33.031 --> 00:12:37.954
And it sort of gives us
a smell of like that problem.

210
00:12:37.954 --> 00:12:38.557
&gt;&gt; Kent C. Dodds: Yeah.

211
00:12:38.557 --> 00:12:40.248
&gt;&gt; Peter: It explains why it's necessary,
but it's [INAUDIBLE].

212
00:12:40.248 --> 00:12:41.509
&gt;&gt; Kent C. Dodds: No, that's a good point.

213
00:12:41.509 --> 00:12:44.245
It's kind of like,
this is hard on purpose.

214
00:12:44.245 --> 00:12:44.961
&gt;&gt; Peter: Right.

215
00:12:44.961 --> 00:12:45.609
&gt;&gt; Kent C. Dodds: Yep.

216
00:12:45.609 --> 00:12:47.188
&gt;&gt; Peter: And it's not really hard.

217
00:12:47.188 --> 00:12:51.035
&gt;&gt; Kent C. Dodds: Right.
&gt;&gt; Peter: But if it's one extra step.

218
00:12:51.035 --> 00:12:52.504
And if you stop and
think about it you can see.

219
00:12:52.504 --> 00:12:54.140
So I liked that.

220
00:12:54.140 --> 00:12:56.200
&gt;&gt; Kent C. Dodds: Awesome.
Yeah, that's a good point.

221
00:12:56.200 --> 00:13:04.110
Another thing that is hard on purpose is
getting like an instance of the component.

222
00:13:04.110 --> 00:13:08.640
I have had some cases where getting
an instance of the component was the only

223
00:13:08.640 --> 00:13:11.080
way I could possibly test something.

224
00:13:11.080 --> 00:13:17.646
Without doing some really complicated
stuff with other tools and things.

225
00:13:17.646 --> 00:13:23.930
And so,
what I think makes a tool valuable,

226
00:13:23.930 --> 00:13:28.600
or an important part of a valuable tool,
is when it

227
00:13:28.600 --> 00:13:33.970
makes the less optimal things hard,
but not impossible.

228
00:13:33.970 --> 00:13:38.650
That's what I love about React,
is there's the React way of doing things,

229
00:13:38.650 --> 00:13:42.190
but sometimes you gotta use that
library that's using DOM manipulation.

230
00:13:42.190 --> 00:13:44.435
And so I'm grateful for refs and

231
00:13:44.435 --> 00:13:49.690
componentDidMount to be able to
kind of use these escape hatches.

232
00:13:49.690 --> 00:13:56.530
And that's kind of what I'm happy
about that with this library is

233
00:13:56.530 --> 00:14:01.340
that it makes some of these things kind of
harder, but not impossible to accomplish.

