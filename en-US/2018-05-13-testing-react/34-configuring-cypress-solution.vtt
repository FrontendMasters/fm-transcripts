WEBVTT

1
00:00:00.260 --> 00:00:04.020
&gt;&gt; Kent C. Dodds: Okay, so let's go in and
we'll work through this solution.

2
00:00:04.020 --> 00:00:09.030
So what we need is,
I'm gonna just create a new user so

3
00:00:09.030 --> 00:00:13.020
that I can login in that user cuz we
already have the registration test.

4
00:00:13.020 --> 00:00:17.470
So we don't need to have any other kind of
confirmation that the registration works.

5
00:00:17.470 --> 00:00:21.880
So I'm gonna use this custom command,
createNewUser.

6
00:00:21.880 --> 00:00:24.980
That will hit the endpoint directly
to create the user for me and

7
00:00:24.980 --> 00:00:28.060
give me back that user object.

8
00:00:28.060 --> 00:00:33.670
So I'm going to create the user
variable here, let user.

9
00:00:33.670 --> 00:00:35.680
And then before each one of these tests,

10
00:00:35.680 --> 00:00:38.920
before any of the tests run,
I'm going to queue up for

11
00:00:38.920 --> 00:00:43.930
Cypress a couple of commands to run and
accomplish before it runs any of my tests.

12
00:00:43.930 --> 00:00:46.680
So here I'm going to say createNewUser.

13
00:00:47.800 --> 00:00:51.139
And then for each of these commands,

14
00:00:51.139 --> 00:00:55.670
whatever that command is,
it's premise based.

15
00:00:55.670 --> 00:01:00.200
So whatever that premise resolves to
is going to be called the subject.

16
00:01:00.200 --> 00:01:06.460
And so the subject of the next thing,
of the next command I execute, is

17
00:01:06.460 --> 00:01:12.300
how I select the username field and
then I type this.

18
00:01:12.300 --> 00:01:15.250
That type command is gonna
execute on the subject.

19
00:01:15.250 --> 00:01:17.870
And so
I need to get that user that was created.

20
00:01:17.870 --> 00:01:19.210
So I'm gonna add a then, and

21
00:01:19.210 --> 00:01:24.000
the subject of the then is going to be
what was resolved by this createNewUser.

22
00:01:24.000 --> 00:01:27.230
So I realize this is, if you look at this,
you're like, well no,

23
00:01:27.230 --> 00:01:28.740
that's just how premises work.

24
00:01:28.740 --> 00:01:30.380
It's sort of how premises work.

25
00:01:30.380 --> 00:01:32.760
That's why I described
it in a different way.

26
00:01:32.760 --> 00:01:36.570
So then I'm gonna get the user and
I'll just assign user to that user.

27
00:01:37.710 --> 00:01:42.642
And then once we have the user created,

28
00:01:42.642 --> 00:01:46.681
I'll visit the app at the root.

29
00:01:46.681 --> 00:01:49.442
Okay, cool.

30
00:01:49.442 --> 00:01:52.490
So here, let's go ahead and do this.

31
00:01:54.280 --> 00:01:58.910
Okay, so when I start my test,
I've already visited the app, so

32
00:01:58.910 --> 00:02:01.502
I'm gonna look for the login link, so

33
00:02:01.502 --> 00:02:06.770
I'll getByText{'Login'},
and then I'll .click() it.

34
00:02:06.770 --> 00:02:11.615
I'm gonna save that and
we'll pop open our browser.

35
00:02:11.615 --> 00:02:14.684
Here I'm gonna get rid of this thing and

36
00:02:14.684 --> 00:02:21.770
we're just in the login.todo.
&gt;&gt; off screen male: Is it visit,

37
00:02:21.770 --> 00:02:25.015
not visit out?
&gt;&gt; [INAUDIBLE]

38
00:02:28.264 --> 00:02:29.475
&gt;&gt; Kent C. Dodds: Here we go, okay.

39
00:02:29.475 --> 00:02:33.339
[SOUND] Logout, that should work.

40
00:02:33.339 --> 00:02:34.760
There we go, okay, thank you.

41
00:02:37.080 --> 00:02:39.660
So great, so we're just gonna visit that.

42
00:02:39.660 --> 00:02:44.510
And then we go to the login and
we click, click, or

43
00:02:44.510 --> 00:02:48.680
we click on the login,
that gets us to the login screen, okay?

44
00:02:48.680 --> 00:02:50.420
So far, so good.

45
00:02:50.420 --> 00:02:56.000
So next, I'm going to getByLabelText,

46
00:02:56.000 --> 00:03:02.210
I want the Username field, and
I'm going to type in user.username.

47
00:03:02.210 --> 00:03:07.070
And then I'll .getByLabelText again,
the password, this changes the subject.

48
00:03:07.070 --> 00:03:11.455
So the next command I execute
will operate on that subject,

49
00:03:11.455 --> 00:03:15.460
.type(user.password).

50
00:03:15.460 --> 00:03:19.500
And then I'll .getByText
the submit button.

51
00:03:19.500 --> 00:03:22.671
And I'll click on it.
&gt;&gt; Kent C. Dodds: And

52
00:03:22.671 --> 00:03:27.710
let's just see what that does.
&gt;&gt; Kent C. Dodds: Cool, and I'm logged in.

53
00:03:27.710 --> 00:03:31.650
And I can verify that
the display name is correct, and

54
00:03:31.650 --> 00:03:34.790
potentially that the route
is in the right place.

55
00:03:34.790 --> 00:03:38.460
And yeah, so on and so forth.

56
00:03:38.460 --> 00:03:40.680
So I'll just actually
copy this right quick.

57
00:03:42.800 --> 00:03:46.800
So the assert route is a handy command,
like I said,

58
00:03:46.800 --> 00:03:48.930
that I think should really be built in.

59
00:03:48.930 --> 00:03:55.670
But it just makes sure that the URL
is equal to whatever route I pass in.

60
00:03:56.890 --> 00:04:00.323
And then weâ€™re gonna get
the username-display and

61
00:04:00.323 --> 00:04:03.450
expect that it contains
our user's username.

62
00:04:03.450 --> 00:04:09.760
And that gets our test to pass.
&gt;&gt; Kent C. Dodds: All right,

63
00:04:09.760 --> 00:04:13.906
what questions do you have about
cypress and writing end-to-end

64
00:04:13.906 --> 00:04:19.380
tasks?
&gt;&gt; Kent C. Dodds: Anything

65
00:04:19.380 --> 00:04:27.050
from chat that I may have missed?
&gt;&gt; off screen male: To clarify something.

66
00:04:27.050 --> 00:04:30.880
Get labeled text over
here in Cypress land.

67
00:04:31.900 --> 00:04:35.710
Is that also case insensitive by default?
&gt;&gt; Kent C. Dodds: Yeah,

68
00:04:35.710 --> 00:04:37.280
it works exactly the same way.

69
00:04:37.280 --> 00:04:40.599
Actually under the hood,
it uses dom-testing-library,

70
00:04:40.599 --> 00:04:43.473
which is the same thing
React testing library uses.

71
00:04:43.473 --> 00:04:45.450
Yeah, so you could use Regex here too.

72
00:04:45.450 --> 00:04:48.532
So if you wanted it to be case sensitive,
for example,

73
00:04:48.532 --> 00:04:53.155
then you just turn it to Regex, and if you
wanted to be like, it only is this thing,

74
00:04:53.155 --> 00:04:55.232
it's starts with and ends with, and

75
00:04:55.232 --> 00:04:58.810
that should actually still work too.
&gt;&gt; off screen male: But kinda following

76
00:04:58.810 --> 00:05:04.200
the idea that the user really doesn't
care whether it's initial capped or not.

77
00:05:04.200 --> 00:05:08.860
Isn't the inclusion of the initial caps
here almost suggestive that you're

78
00:05:08.860 --> 00:05:13.600
looking for that, you know what I mean?
&gt;&gt; Kent C. Dodds: I see, so

79
00:05:13.600 --> 00:05:16.540
you're suggesting maybe I should
just do lowercase password?

80
00:05:16.540 --> 00:05:19.830
Yeah, that could be, and
that's totally fair.

81
00:05:19.830 --> 00:05:22.750
I actually was kinda wrestling
with that myself recently.

82
00:05:23.990 --> 00:05:27.540
Maybe I should just have it all
be lowercase, or uppercase,

83
00:05:27.540 --> 00:05:29.084
as the case may be.

84
00:05:29.084 --> 00:05:34.350
[LAUGH]
&gt;&gt; Kent C. Dodds: Any other questions,

85
00:05:34.350 --> 00:05:35.420
yeah?
&gt;&gt; off screen male: Yeah, so

86
00:05:35.420 --> 00:05:40.610
without the Cypress testing library then,
and you was to use Cypress, you'd be

87
00:05:40.610 --> 00:05:45.790
using things like getByID, getByClassName
&gt;&gt; Kent C. Dodds: Yeah,

88
00:05:45.790 --> 00:05:51.810
yeah so they have the get and
then this is query selector.

89
00:05:51.810 --> 00:05:55.890
And so I could say, some-class-name, and

90
00:05:55.890 --> 00:05:58.830
then I could do that.
&gt;&gt; off screen male: So

91
00:05:58.830 --> 00:06:01.060
you could use a pseudo selector there?
&gt;&gt; Kent C. Dodds: Yeah,

92
00:06:01.060 --> 00:06:05.949
you could use pseudo selector there.
&gt;&gt; Kent C. Dodds: Like I said,

93
00:06:05.949 --> 00:06:09.450
Cypress is very well documented,
so Cypress.ao is the website.

94
00:06:09.450 --> 00:06:11.810
Here, just so you know it when you see it.

95
00:06:11.810 --> 00:06:15.560
I should have just
opened it up in Cypress.

96
00:06:15.560 --> 00:06:19.935
This is what it looks like,

97
00:06:19.935 --> 00:06:23.770
and then it has docs.

98
00:06:23.770 --> 00:06:26.500
By the way,
it does have a pricing right here.

99
00:06:26.500 --> 00:06:29.840
So I probably should explain that because
people are always concerned like,

100
00:06:29.840 --> 00:06:30.890
it costs money.

101
00:06:30.890 --> 00:06:32.830
So Cypress is totally open source.

102
00:06:32.830 --> 00:06:37.030
It has been for over a year now,
or about a year I think.

103
00:06:37.030 --> 00:06:42.560
And the pricing is for
the dashboard feature.

104
00:06:42.560 --> 00:06:45.264
So it's really awesome.

105
00:06:45.264 --> 00:06:50.720
It's basically just a place to store
all of your CI runs of Cypress.

106
00:06:50.720 --> 00:06:54.490
Cypress collects a silly amount
of data and takes the video.

107
00:06:54.490 --> 00:06:59.300
And so what this is, is you hook it
up with your CI and it'll send all of

108
00:06:59.300 --> 00:07:05.960
the data to their dashboard and then it
allows you to manage the runs of Cypress.

109
00:07:05.960 --> 00:07:09.180
So a lot of really awesome features,
but that's the part that costs money.

110
00:07:09.180 --> 00:07:14.610
That's how Cypress can exist as a company
and support this open source stuff,

111
00:07:14.610 --> 00:07:19.380
but all the stuff that you saw right now,
that's all open source, will be forever.

112
00:07:19.380 --> 00:07:21.040
You can run it behind your own servers,
everything.

