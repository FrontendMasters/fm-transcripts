WEBVTT

1
00:00:00.170 --> 00:00:04.000
&gt;&gt; Kent C. Dodds: So, before JEST entered
my life, code coverage was always,

2
00:00:04.000 --> 00:00:08.570
it was really important that I always
set up code coverage for my staff.

3
00:00:08.570 --> 00:00:12.010
But it normally involved installing at
least six dependencies and trying to wire

4
00:00:12.010 --> 00:00:16.110
them altogether, and configure them
in ways that were really annoying.

5
00:00:16.110 --> 00:00:21.559
Now that JEST is in my life,
that's all it takes.

6
00:00:22.790 --> 00:00:24.830
Yay, I love you Jest, it's so great.

7
00:00:25.960 --> 00:00:30.030
So part of the reason why it's so
complicated before, for code coverage,

8
00:00:30.030 --> 00:00:32.250
is because we're transpilling our code.

9
00:00:32.250 --> 00:00:36.330
And so the tools at the time
were not able to figure

10
00:00:38.120 --> 00:00:43.360
out how to get my
non-transpiled code covered.

11
00:00:43.360 --> 00:00:47.200
Now it just kind of takes care of all
that stuff for me and it's just magic so

12
00:00:47.200 --> 00:00:53.220
I run MPMT now with a dash dash coverage
and it will give me a report of coverage.

13
00:00:54.810 --> 00:00:55.750
So that's kind of nice.

14
00:00:55.750 --> 00:00:59.570
And I can open the coverage
folder that I created so

15
00:01:00.590 --> 00:01:03.830
that appeared right here, coverage.

16
00:01:03.830 --> 00:01:09.760
And instead of that, it's alcov report,
index Html, pop that open.

17
00:01:09.760 --> 00:01:11.820
And here we go,
that's our coverage report.

18
00:01:11.820 --> 00:01:16.284
Looks like autoscaling test, test we
never actually run componented update,

19
00:01:16.284 --> 00:01:18.748
so we should probably
run some more tests for

20
00:01:18.748 --> 00:01:23.420
that.
&gt;&gt; Kent C. Dodds: So this is kinda fun.

21
00:01:23.420 --> 00:01:26.760
The calculator definitely needs some work.
&gt;&gt; Kent C. Dodds: And

22
00:01:26.760 --> 00:01:28.780
that all just comes for free.

23
00:01:28.780 --> 00:01:31.220
Now there is one problem here and

24
00:01:31.220 --> 00:01:36.219
that is we are reporting coverage for
our test files.

25
00:01:37.580 --> 00:01:44.830
And that kind of changes what the coverage
report means, the overall coverage number.

26
00:01:44.830 --> 00:01:51.800
So this is actually, because our
overall coverage is low, the test files

27
00:01:51.800 --> 00:01:56.110
are actually bringing our overall coverage
report higher than we think that it is.

28
00:01:56.110 --> 00:01:58.720
Or than it should be.

29
00:01:58.720 --> 00:02:04.070
Because it's like you're tests aren't what
you're trying to measure coverage for.

30
00:02:04.070 --> 00:02:09.090
So add in including those in the coverage
report, not something you want.

31
00:02:09.090 --> 00:02:14.910
And by default the test files
themselves will not be included, but

32
00:02:14.910 --> 00:02:19.460
yeah, we don't want our supporting
test files to include it either.

33
00:02:19.460 --> 00:02:25.150
So we can fix this in our
jest configuration with,

34
00:02:25.150 --> 00:02:32.555
hold on a second, with the property,

35
00:02:32.555 --> 00:02:38.900
collect coverage from and
this will be an array of where we want.

36
00:02:38.900 --> 00:02:44.119
It's a white list of files that we
want to collect coverage from and

37
00:02:44.119 --> 00:02:50.454
for us we can do anything that matches
this glob, anything inside the source JS,

38
00:02:50.454 --> 00:02:55.185
and then we can run MPMT.
&gt;&gt; Kent C. Dodds: And

39
00:02:55.185 --> 00:02:59.610
now it's only the stuff that's
in the source directory.

40
00:02:59.610 --> 00:03:02.800
But it still is excluding our tests.

41
00:03:02.800 --> 00:03:07.664
There's a blacklist version of this as
well, and by default that includes your

42
00:03:07.664 --> 00:03:12.534
tests.
&gt;&gt; Kent C. Dodds: Cool, so

43
00:03:12.534 --> 00:03:17.950
one other thing about coverage,
we do not have great coverage today.

44
00:03:17.950 --> 00:03:22.011
And that's probably,
especially if you're just getting started

45
00:03:22.011 --> 00:03:26.863
in writing your test for your app,
it's probably gonna be really, really low.

46
00:03:26.863 --> 00:03:31.266
And you don't really want your coverage to
dip below a certain point, especially when

47
00:03:31.266 --> 00:03:35.367
you're bringing tests into an existing
application with a team of developers,

48
00:03:35.367 --> 00:03:38.340
you wanna make sure that
it doesn't ever dip lower.

49
00:03:38.340 --> 00:03:42.750
It can stay the same, if you're gonna
add code, just test it while you add it.

50
00:03:42.750 --> 00:03:46.620
And then the coverage will stay the same,
but I don't want it to go any lower.

51
00:03:46.620 --> 00:03:51.284
And so
we can make sure that happens by adding

52
00:03:51.284 --> 00:03:55.643
a coverageThreshold.
&gt;&gt; Kent C. Dodds: And

53
00:03:55.643 --> 00:03:59.703
this is actually a very versatile option,
you can specify thresholds for

54
00:03:59.703 --> 00:04:03.580
specific files or groups of files,
like it's pretty, pretty cool.

55
00:04:03.580 --> 00:04:06.760
So if there is a section of the after
like, this should never ever ever break.

56
00:04:06.760 --> 00:04:09.800
So you are like 100%
code coverage in here or

57
00:04:09.800 --> 00:04:14.436
something like 95% co coverage always
in this section of the app or for

58
00:04:14.436 --> 00:04:18.960
this file because it's really complicated,
something like that.

59
00:04:18.960 --> 00:04:22.937
For us and
most of the times I just do global and

60
00:04:22.937 --> 00:04:27.600
this will just apply to
these numbers at the top.

61
00:04:27.600 --> 00:04:30.550
Overall, together what should
those numbers be like?

62
00:04:30.550 --> 00:04:34.130
And so when I'm setting up code coverage,

63
00:04:35.200 --> 00:04:38.820
I look at, or setting up this threshold,

64
00:04:38.820 --> 00:04:43.310
I look at what the current numbers are and
I do 2% lower than that.

65
00:04:43.310 --> 00:04:46.960
Just to give us a little bit of wiggle
room as we're getting started with that.

66
00:04:46.960 --> 00:04:52.370
So, I'll say statements is, let's see,

67
00:04:52.370 --> 00:04:56.950
18, and branches, wait is it?

68
00:04:58.000 --> 00:05:00.700
Goodness, now I forgot if it's branches or
branch.

69
00:05:00.700 --> 00:05:07.170
Branches, like pretty sure it's branches,
is 10 and see, this is.

70
00:05:07.170 --> 00:05:09.070
I need to see it lined up.

71
00:05:09.070 --> 00:05:15.270
Functions is 19, and lines is 18.

72
00:05:15.270 --> 00:05:20.750
So, it doesn't have to be totally perfect,
exact, but.

73
00:05:20.750 --> 00:05:22.410
Cool, so everything's working.

74
00:05:22.410 --> 00:05:25.998
Let's see what happens if,
lets say we set branches to 13 and

75
00:05:25.998 --> 00:05:28.109
then someone bumped it down to 12.

76
00:05:30.540 --> 00:05:34.351
Made some changes, added some branches,
and now this script will actually fail.

77
00:05:34.351 --> 00:05:36.231
So it would fail in CI and

78
00:05:36.231 --> 00:05:41.214
it'd say hey you have your
coverage threshold set to 13% but

79
00:05:41.214 --> 00:05:46.869
it's actually at 12 so add some more
tests for cover those branches.

80
00:05:48.380 --> 00:05:51.940
So we're talking about this statements,
branches, functions line, so let me just

81
00:05:51.940 --> 00:05:58.050
show you really quick in this coverage
report what those different things are.

82
00:05:58.050 --> 00:06:03.860
So right here, this is considered
a branch, and it's also a statement.

83
00:06:03.860 --> 00:06:09.880
So this line is a statement itself,
and this is the consequent.

84
00:06:11.530 --> 00:06:12.710
Here's maybe a better example.

85
00:06:12.710 --> 00:06:16.150
You've got your if statement, this is
the consequent, this is the alternate.

86
00:06:16.150 --> 00:06:20.810
Neither one of those branches is covered
and so you get 0% for that branch.

87
00:06:20.810 --> 00:06:24.980
Well you get 0% for this branch and
0% for that one, it's two branches.

88
00:06:24.980 --> 00:06:28.300
And then each one of these
is a also a statement.

89
00:06:28.300 --> 00:06:31.760
This is a function, so we're not
getting coverage for the function.

90
00:06:31.760 --> 00:06:34.490
As you can see,
the highlighting isn't perfect,

91
00:06:34.490 --> 00:06:36.080
and that's a poor request
waiting to happen.

