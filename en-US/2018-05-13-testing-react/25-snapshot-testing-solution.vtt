WEBVTT

1
00:00:00.040 --> 00:00:04.140
&gt;&gt; Kent C. Dodds: Okidoki,
let's make this magic snapshot happen.

2
00:00:04.140 --> 00:00:09.800
So we'll go to login.step-3.todo.

3
00:00:09.800 --> 00:00:12.809
That's what we're doing, right?

4
00:00:12.809 --> 00:00:18.710
Step 3,step 4, sorry, login.step-4.todo.

5
00:00:18.710 --> 00:00:24.050
Great, so to take a snapshot,
I'm going to get the container.

6
00:00:24.050 --> 00:00:24.960
And I can use render,

7
00:00:24.960 --> 00:00:28.310
I don't have to render it into
the document to get a snapshot.

8
00:00:28.310 --> 00:00:31.680
So I'll pull in render from
react-testing-library and

9
00:00:31.680 --> 00:00:34.020
we'll just render the login.

10
00:00:34.020 --> 00:00:36.180
And because I'm not actually
gonna be clicking the submit,

11
00:00:36.180 --> 00:00:40.440
I don't really need to have any
sort of useful function there.

12
00:00:40.440 --> 00:00:43.160
So I'll just pass nothing.

13
00:00:43.160 --> 00:00:48.410
I don't think it has prop types on it so
I'm probably fine with just that and

14
00:00:48.410 --> 00:00:55.700
then I will expect the
container.firstChild to match snapshot.

15
00:00:55.700 --> 00:01:00.190
So, the reason I do first child is because
the container's always going to be a div

16
00:01:00.190 --> 00:01:04.280
and so I don't really need to include that
in my snapshot, it doesn't really change.

17
00:01:04.280 --> 00:01:09.280
If you were rendering a react fragment and
have multiple elements in there then first

18
00:01:09.280 --> 00:01:13.380
child would only get the first one,
so consider that but

19
00:01:13.380 --> 00:01:16.880
in this case we're rendering a div
as a root anyway so we're good.

20
00:01:16.880 --> 00:01:23.350
So I save that and we get snapshot
written and here is our snapshot summary.

21
00:01:23.350 --> 00:01:26.040
One snap chat written and one test read.

22
00:01:26.040 --> 00:01:28.430
So we can then look at our snapshots.

23
00:01:28.430 --> 00:01:31.510
Check out log in step forward.to do.

24
00:01:31.510 --> 00:01:35.780
That is our one snapshot, cool.

25
00:01:35.780 --> 00:01:36.688
And it shows us our CSS.

26
00:01:36.688 --> 00:01:41.052
These are not actually the class names
that would be applied if you are curious

27
00:01:41.052 --> 00:01:43.550
to learn more about glamour and glamorous.

28
00:01:43.550 --> 00:01:46.010
You can check out the docs, but
that's not what it would look like.

29
00:01:46.010 --> 00:01:50.700
It's just the snapshot serializer
does this so that it's more,

30
00:01:51.720 --> 00:01:55.560
like if you make changes to the CSS, it
doesn't change the hash that it's using.

31
00:01:55.560 --> 00:01:57.890
And so the snapshot is more stable.

32
00:01:57.890 --> 00:02:02.570
But yeah, it's kind of nice, like if I
were to change the align items to VLeft,

33
00:02:02.570 --> 00:02:04.550
I would see that update in my snapshot.

34
00:02:04.550 --> 00:02:08.500
So it's really, really one of the reasons
why I kind of like snapshots is so

35
00:02:08.500 --> 00:02:13.620
that I can get some sort of idea of
when my CSS is changing and what impact

36
00:02:13.620 --> 00:02:19.590
that CSS change has on other parts of
my application where it's snapshotted.

37
00:02:19.590 --> 00:02:23.520
But then here we have our dom.

38
00:02:24.610 --> 00:02:26.980
And it all looks to be in order.

39
00:02:26.980 --> 00:02:30.530
And so you'd commit this to your
source control and push it up.

40
00:02:30.530 --> 00:02:34.150
You get port request reviewed and
everything is awesome.

