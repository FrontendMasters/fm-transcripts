WEBVTT

1
00:00:00.000 --> 00:00:03.132
&gt;&gt; Kent C. Dodds: So
I'm gonna talk a little bit about how you

2
00:00:03.132 --> 00:00:07.140
can take snapshots too far and
what their real role is.

3
00:00:07.140 --> 00:00:13.090
But before I do that, does anybody have
any questions or observations, yeah?

4
00:00:13.090 --> 00:00:18.580
&gt;&gt; off screen male: So, part of render
automatically generates a snapshot?

5
00:00:19.660 --> 00:00:21.160
&gt;&gt; Kent C. Dodds: Good question,
I'm glad you asked.

6
00:00:21.160 --> 00:00:24.300
So render doesn't actually
care anything about snapshots.

7
00:00:24.300 --> 00:00:31.300
It's all very just, like, DOM focused and
rendering React components to DOM nodes.

8
00:00:31.300 --> 00:00:35.010
So the snapshot,
the job of the snapshot is jest and

9
00:00:35.010 --> 00:00:37.760
this assertion to match snapshots.

10
00:00:37.760 --> 00:00:42.740
So we pass a DOM node to match snapshot,
and it will be responsible for

11
00:00:42.740 --> 00:00:45.340
serializing it and
saving it into a snapshot file.

12
00:00:45.340 --> 00:00:50.210
&gt;&gt; off screen male: So then, the first
time it tries to do a comparison, if there

13
00:00:50.210 --> 00:00:55.620
is nothing, if there is no existing
snapshot it will generate the initial.

14
00:00:55.620 --> 00:00:56.750
&gt;&gt; Kent C. Dodds: Yep,
that's exactly right.

15
00:00:56.750 --> 00:00:58.510
So, I'm glad you asked that also,

16
00:00:58.510 --> 00:01:01.610
cuz it would be good to see
what an update would look like.

17
00:01:01.610 --> 00:01:07.870
If I change this to name, for example,
then we'll see the snapshot fails.

18
00:01:07.870 --> 00:01:11.137
And it shows us what
that failure looks like.

19
00:01:11.137 --> 00:01:13.724
And then it'll tell us right here,

20
00:01:13.724 --> 00:01:17.640
inspect your code changes or
press U to update them.

21
00:01:17.640 --> 00:01:20.160
I could press U and
it'll update my snapshot.

22
00:01:20.160 --> 00:01:24.640
Except now my other test is broken cuz
it depends on this being username.

23
00:01:24.640 --> 00:01:28.620
So I'll change it back and my snapshot
will now fail because it updated.

24
00:01:28.620 --> 00:01:31.760
So I'm gonna hit U to update it again and
we're all set.

25
00:01:31.760 --> 00:01:36.536
And because we're including CSS,
because of that snapshot serializer,

26
00:01:36.536 --> 00:01:40.571
if I go to form, where we're
using glamourous for this stuff.

27
00:01:40.571 --> 00:01:42.150
And I align items left.

28
00:01:44.440 --> 00:01:48.140
Then I'm going to see
that also will change.

29
00:01:48.140 --> 00:01:51.360
That includes our vendor prefixes,
which happens at runtime.

30
00:01:51.360 --> 00:01:55.574
You see that's not actually written out,
but it is important here, so.

31
00:01:55.574 --> 00:01:58.739
And we could update that with you and
so on and so forth.

32
00:02:00.450 --> 00:02:05.660
So snapshots are not the only way
to accomplish what we're doing,

33
00:02:05.660 --> 00:02:06.920
but it pretty much enables it.

34
00:02:06.920 --> 00:02:10.856
Cuz like I would certainly not want to
copy paste all of that into my test file

35
00:02:10.856 --> 00:02:13.626
and then the serializer
aspect of it as well.

36
00:02:13.626 --> 00:02:17.040
Where it formats it nicely for
you and everything.

37
00:02:17.040 --> 00:02:19.480
So I'm glad we have snapshots,
it's pretty cool.

38
00:02:20.640 --> 00:02:22.290
Yes.
&gt;&gt; off screen male: Do they contribute to

39
00:02:22.290 --> 00:02:23.790
the coverage report?

40
00:02:23.790 --> 00:02:25.030
&gt;&gt; Kent C. Dodds: Yes.

41
00:02:25.030 --> 00:02:27.960
So I'm rendering the component.

42
00:02:27.960 --> 00:02:31.217
I'm running all this code to get
that container in the first place.

43
00:02:31.217 --> 00:02:36.650
And so the fact that I'm running all
that code will count it as coverage.

44
00:02:36.650 --> 00:02:39.558
&gt;&gt; off screen male: So
if you rendered an entire component,

45
00:02:39.558 --> 00:02:43.844
would that be [INAUDIBLE] if new
component was just the HTML.

46
00:02:43.844 --> 00:02:44.356
&gt;&gt; Kent C. Dodds: Mm-hm.

47
00:02:44.356 --> 00:02:47.699
&gt;&gt; off screen male: Would that give
you 100% coverage right off the bat?

48
00:02:47.699 --> 00:02:49.400
&gt;&gt; Kent C. Dodds: Yep, it certainly would.

49
00:02:49.400 --> 00:02:52.989
And if your component's
just like pure HTML,

50
00:02:52.989 --> 00:02:57.966
then that would be a potentially
reasonable thing to snapshot.

51
00:02:57.966 --> 00:03:03.365
But if I'm looking at a pull request of
a component that's just HTML stuff and

52
00:03:03.365 --> 00:03:06.640
then the snapshot,
I'm gonna see two diffs.

53
00:03:06.640 --> 00:03:09.889
I'm gonna see the diff in
the component that's just HTML.

54
00:03:09.889 --> 00:03:12.641
And then I'm gonna see
an identical diff in the snapshot.

55
00:03:12.641 --> 00:03:18.220
And then I'm gonna wonder to myself, what
value is that test really providing me?

56
00:03:18.220 --> 00:03:21.485
Because it would provide me value if it,

57
00:03:21.485 --> 00:03:25.020
like, I didn't realize that this
update was gonna change this.

58
00:03:25.020 --> 00:03:29.590
But, no, yes, clearly I did
because the diff looks identical.

59
00:03:29.590 --> 00:03:33.699
You won't even know, is this the snapshot
I'm looking at or the component?

60
00:03:33.699 --> 00:03:36.138
So I wouldn't really snapshot
something like that.

61
00:03:36.138 --> 00:03:37.400
Good question, yeah?

62
00:03:37.400 --> 00:03:41.980
&gt;&gt; off screen male: Is there a way
to undo an update of a snapshot?

63
00:03:41.980 --> 00:03:42.823
&gt;&gt; Kent C. Dodds: Yeah, git reset.

64
00:03:42.823 --> 00:03:46.020
[LAUGH] Or
git checkout that snapshot file.

65
00:03:46.020 --> 00:03:48.360
Yeah, jest won't keep track of those for
you, though.

66
00:03:50.120 --> 00:03:55.040
So snapshots kind of in that
vein are not really useful for

67
00:03:55.040 --> 00:03:57.130
TDD, test driven developement.

68
00:03:57.130 --> 00:04:02.170
Because unless you handcraft the snapshot,
which when I'm doing the babel plugin,

69
00:04:02.170 --> 00:04:04.735
sometimes I do actually
handcraft the snapshot,

70
00:04:04.735 --> 00:04:06.830
cuz I know exactly what
I want it to look like.

71
00:04:06.830 --> 00:04:09.690
But generally you don't
handcraft the snapshot.

72
00:04:09.690 --> 00:04:13.478
So yeah, it's not really normally
a good candidate for TDD.

73
00:04:16.547 --> 00:04:18.620
&gt;&gt; Kent C. Dodds: Any other questions?

74
00:04:18.620 --> 00:04:21.700
You're wondering what I have to say
about effective use of snapshots?

75
00:04:21.700 --> 00:04:24.720
Let me show you an ineffective
use of snapshots.

76
00:04:24.720 --> 00:04:31.580
And this is a pretty small app
that we're running in here.

77
00:04:31.580 --> 00:04:38.800
But I have a snapshot of the entire app,
the homepage of the app.

78
00:04:38.800 --> 00:04:43.100
It's a pretty small app, but
this snapshot's 260 lines of code.

79
00:04:44.230 --> 00:04:48.810
When I first started doing snapshots
on my team, we started getting snapshot

80
00:04:48.810 --> 00:04:53.330
files that were easily 1,500 lines long or
way longer.

81
00:04:53.330 --> 00:04:55.480
And that was pretty cool.

82
00:04:55.480 --> 00:05:00.970
It's like, man, we will never not
know that things are going to change.

83
00:05:00.970 --> 00:05:02.370
That's great.

84
00:05:02.370 --> 00:05:05.040
But you already know that
because you see a git diff.

85
00:05:05.040 --> 00:05:07.010
Yes, things changed, clearly.

86
00:05:07.010 --> 00:05:11.360
The nice thing about snapshots is
that you know what impact a change,

87
00:05:11.360 --> 00:05:13.970
like you change the button,
all the snapshots are gonna break.

88
00:05:13.970 --> 00:05:14.870
And you can update those, and

89
00:05:14.870 --> 00:05:17.360
you're like, okay,
that button's used over here, so it broke.

90
00:05:17.360 --> 00:05:20.456
So that's kind of useful, it's kinda nice.

91
00:05:20.456 --> 00:05:24.710
But what ends up happening, and
Peter and I were talking about this,

92
00:05:24.710 --> 00:05:26.460
it's 3 o'clock in the afternoon.

93
00:05:26.460 --> 00:05:30.470
You're like, you just wanna make this pull
request so people will review it, and so

94
00:05:30.470 --> 00:05:32.470
you're like, okay, great.

95
00:05:32.470 --> 00:05:36.980
It says seven snapshots failed,
you're scrolling through the, looks good.

96
00:05:36.980 --> 00:05:41.049
You hit the U key, you get them updated,
you push it up to GitLab or GitHub or

97
00:05:41.049 --> 00:05:45.377
whatever, people, now it's 4 o'clock and
your coworkers are like, okay,

98
00:05:45.377 --> 00:05:47.329
let's just get this thing merged.

99
00:05:47.329 --> 00:05:49.480
Peter really wants to get this in.

100
00:05:49.480 --> 00:05:51.312
So I'm just gonna scroll through,
yeah, it looks.

101
00:05:51.312 --> 00:05:55.042
And he probably was careful about this,
so I'm gonna just trust him and

102
00:05:55.042 --> 00:05:56.297
I'll just merge this.

103
00:05:56.297 --> 00:06:01.180
And now you have a broken app because
people didn't review it carefully enough.

104
00:06:01.180 --> 00:06:03.870
So that's kind of a team
discipline problem.

105
00:06:03.870 --> 00:06:07.870
But if our software allows team
discipline to break our software,

106
00:06:07.870 --> 00:06:08.860
then maybe we should.

107
00:06:08.860 --> 00:06:11.400
Or if our tools allow team
discipline to break our software,

108
00:06:11.400 --> 00:06:13.850
maybe we should be using different tools.

109
00:06:13.850 --> 00:06:19.290
And so I have this blog post
called effective snapshot testing.

110
00:06:19.290 --> 00:06:22.011
Here, I'll post this in the chat,
I keep forgetting to do that.

111
00:06:22.011 --> 00:06:24.973
Hey look, George already did that.

112
00:06:24.973 --> 00:06:30.360
[LAUGH] Thanks, George.

113
00:06:30.360 --> 00:06:36.810
But I quote Justin Searls,
who is a really big tester,

114
00:06:36.810 --> 00:06:41.870
especially in the Ruby ecosystem but
also in the JavaScript ecosystem.

115
00:06:41.870 --> 00:06:46.430
And he explains several of the things
that he doesn't like about snapshots.

116
00:06:46.430 --> 00:06:49.390
And basically says
snapshots are worthless.

117
00:06:49.390 --> 00:06:53.763
I take a step back from that a little bit
and I say, yeah, snapshots do have their

118
00:06:53.763 --> 00:06:57.184
places and there are a couple
places where they really shine.

119
00:06:57.184 --> 00:07:01.185
So Babel plugins and
with being able to snapshot CSS.

120
00:07:01.185 --> 00:07:06.366
So if you have various components that
are style-specific, it can be nice to

121
00:07:06.366 --> 00:07:12.620
know when those styles are going to change
and what impact those changes will have.

122
00:07:12.620 --> 00:07:16.590
And then it gives you a couple ideas
of things that you can to improve

123
00:07:16.590 --> 00:07:18.660
your effective use of snapshots.

124
00:07:18.660 --> 00:07:23.470
So in general, what we're trying
to accomplish when we're testing,

125
00:07:23.470 --> 00:07:25.970
well, there's the side of
testing where it's like,

126
00:07:25.970 --> 00:07:29.910
okay, I'm testing to enhance my workflow,
that's TDD stuff.

127
00:07:29.910 --> 00:07:34.641
But normally what I care about with
testing is to bring confidence to

128
00:07:34.641 --> 00:07:39.715
myself that my applications are working
in the way that I intend them to.

129
00:07:39.715 --> 00:07:43.725
And snapshots don't quite do that.

130
00:07:43.725 --> 00:07:49.138
Because when I say my application's
working the way that I intend it to,

131
00:07:49.138 --> 00:07:54.746
well, this snapshot could break if
somebody refactors and removes that.

132
00:07:54.746 --> 00:07:59.200
But my application's still working
the way I intend it, right?

133
00:07:59.200 --> 00:08:01.830
So there's nothing that
actually changes with that.

134
00:08:01.830 --> 00:08:04.460
That's actually kind of
an implementation detail.

135
00:08:04.460 --> 00:08:07.940
And so there's no way for
me, in a snapshot,

136
00:08:07.940 --> 00:08:13.040
to communicate what part of this snapshot
really matters for this particular test.

137
00:08:13.040 --> 00:08:14.245
What's important here.

138
00:08:14.245 --> 00:08:18.015
And so because that's hard to communicate,

139
00:08:18.015 --> 00:08:24.264
somebody coming down the line to maintain
your tests that you left around,

140
00:08:24.264 --> 00:08:29.840
they are unable to know, like,
I broke a snapshot, is that okay?

141
00:08:29.840 --> 00:08:33.950
They don't really know if it's
okay to break a certain snapshot.

142
00:08:33.950 --> 00:08:41.260
And so generally what I would
suggest is try to query around

143
00:08:41.260 --> 00:08:47.150
the DOM to the specific thing that's
important for your test and snapshot that.

144
00:08:47.150 --> 00:08:49.730
And what often happens is like,

145
00:08:49.730 --> 00:08:54.530
this test only cares that the image gets
or this image gets the right source.

146
00:08:54.530 --> 00:08:56.090
And so I'm gonna snapshot that.

147
00:08:56.090 --> 00:08:57.000
And now I have an image.

148
00:08:57.000 --> 00:08:58.730
And it's got the right
source in my snapshot.

149
00:08:58.730 --> 00:09:00.680
And then I'll take another step back and

150
00:09:00.680 --> 00:09:03.230
think, I could actually
just change the assertion.

151
00:09:03.230 --> 00:09:05.760
Instead of two match snapshot,

152
00:09:05.760 --> 00:09:10.080
like get attribute source
equals this source string.

153
00:09:10.080 --> 00:09:11.114
And just put that right in my test.

154
00:09:11.114 --> 00:09:13.640
So now I don't need a snapshot anyway.

155
00:09:13.640 --> 00:09:15.140
So snapshots are great.

156
00:09:15.140 --> 00:09:19.190
Just use them like with critical thinking

157
00:09:19.190 --> 00:09:22.430
about whether you really actually
need to use the snapshot.

158
00:09:24.450 --> 00:09:25.190
Yes?

159
00:09:25.190 --> 00:09:29.800
&gt;&gt; off screen male: Okay, so by explaining
how we shouldn't use them, you're

160
00:09:29.800 --> 00:09:34.780
describing a lot of situations where
there's a really high signal to noise

161
00:09:34.780 --> 00:09:40.092
ratio so that people basically
get into the habit of

162
00:09:40.092 --> 00:09:45.234
ignoring the noise.

163
00:09:45.234 --> 00:09:48.368
And so that's the danger,
I understand that.

164
00:09:48.368 --> 00:09:54.450
I'm still trying to wrap my, yeah, okay,
so narrowing the focus of your snapshot so

165
00:09:54.450 --> 00:09:58.730
that you're isolating just
the thing that you care about.

166
00:09:58.730 --> 00:10:02.681
Well, isn't that the point of any of the
other testing tools that are built into

167
00:10:02.681 --> 00:10:03.360
jest?

168
00:10:03.360 --> 00:10:05.696
&gt;&gt; Kent C. Dodds: Yeah, so
you're suggesting, okay, so

169
00:10:05.696 --> 00:10:09.787
what's the point of snapshots if
we're going to narrow it down anyway?

170
00:10:09.787 --> 00:10:14.200
&gt;&gt; off screen male: And also, following
along with the point that you have been

171
00:10:14.200 --> 00:10:17.905
going along with,
the whole way has been, look,

172
00:10:17.905 --> 00:10:23.870
pay attention to what the user would
see and what the user cares about.

173
00:10:23.870 --> 00:10:28.128
The user doesn't care about
how it looks when the DOM-

174
00:10:28.128 --> 00:10:30.220
&gt;&gt; Kent C. Dodds: What the DOM looks like.

175
00:10:30.220 --> 00:10:33.740
&gt;&gt; off screen male: Yeah,
what the DOM pukes out into text?

176
00:10:33.740 --> 00:10:38.895
They care about how it looks and/or
whether there's a spinner or not.

177
00:10:38.895 --> 00:10:40.020
&gt;&gt; Kent C. Dodds: Mm-hm.

178
00:10:40.020 --> 00:10:43.562
&gt;&gt; off screen male: Whatever the label
on an input or a submit button, so.

179
00:10:43.562 --> 00:10:46.413
&gt;&gt; Kent C. Dodds: Yeah, no,
I totally agree with you.

180
00:10:46.413 --> 00:10:50.260
And honestly,
I don't use snapshots a whole lot.

181
00:10:50.260 --> 00:10:53.180
Recently, when I was preparing this
workshop, I was thinking critically about

182
00:10:53.180 --> 00:10:56.810
this, and like, okay, how can I tell
these people that snapshots, or

183
00:10:56.810 --> 00:11:00.050
how can I communicate that
snapshots do have a place?

184
00:11:00.050 --> 00:11:00.950
And I actually tweeted,

185
00:11:00.950 --> 00:11:04.070
I'm like, I actually don't think
that snapshots do have a place.

186
00:11:04.070 --> 00:11:08.800
And some people kind of convinced
me that snapshots are useful if

187
00:11:08.800 --> 00:11:14.230
you can as a team decide that they
don't replace good unit tests.

188
00:11:14.230 --> 00:11:18.530
And so you'll notice that we actually
have like full coverage with this test.

189
00:11:18.530 --> 00:11:21.280
But then in addition, we have a snapshot.

190
00:11:21.280 --> 00:11:24.390
And so it's okay if your team
is conditioned to just update.

191
00:11:25.760 --> 00:11:29.780
But I wouldn't condition the team to just
update and not think about it at all.

192
00:11:29.780 --> 00:11:33.910
But having a snapshot in
place means that if I

193
00:11:33.910 --> 00:11:37.440
make a change to one of these
dependencies and I say, okay,

194
00:11:37.440 --> 00:11:42.816
now the font size is gonna be 17 and
then my snapshot breaks.

195
00:11:42.816 --> 00:11:46.483
It might break a snapshot that
I wasn't expecting it to break.

196
00:11:46.483 --> 00:11:50.780
I didn't realize that component
X uses FieldContainer.

197
00:11:50.780 --> 00:11:53.350
Now I have to kind of think
about that a little bit.

198
00:11:53.350 --> 00:11:56.540
So as long as you as a team decide, okay,

199
00:11:56.540 --> 00:12:01.740
these are not going to replace solid unit
tests, but they're just here to supplement

200
00:12:02.840 --> 00:12:07.170
the existing unit tests to kind of help
us catch those little cases like that.

201
00:12:07.170 --> 00:12:11.600
Then it's okay to not really
rigorously review those snapshots,

202
00:12:11.600 --> 00:12:14.460
because you have a whole suite of unit
tests that would catch the things

203
00:12:14.460 --> 00:12:16.140
that actually really do matter.

204
00:12:16.140 --> 00:12:21.797
And so that's kind of where I've landed
on how I feel about snapshot testing with

205
00:12:21.797 --> 00:12:27.202
a UI is that its more of a just kind of a
gut check that this is changing things and

206
00:12:27.202 --> 00:12:30.549
the things that it's
changing I'm okay with.

207
00:12:30.549 --> 00:12:31.207
Yes?

208
00:12:31.207 --> 00:12:34.905
&gt;&gt; off screen male: So
is it like a snapshot can be used only for

209
00:12:34.905 --> 00:12:37.130
the UI elements?

210
00:12:37.130 --> 00:12:40.550
Or can we use the snapshot for
some kind of utility functions or

211
00:12:40.550 --> 00:12:42.100
some transformation functions?

212
00:12:42.100 --> 00:12:42.900
&gt;&gt; Kent C. Dodds: Yeah.
&gt;&gt; off screen male: Can we still use

213
00:12:42.900 --> 00:12:48.280
snapshot, or do you think it is just a UI
document renders, we can use snapshot?

214
00:12:48.280 --> 00:12:55.370
&gt;&gt; Kent C. Dodds: No, so
in my example here right down here.

215
00:12:55.370 --> 00:12:57.900
So we're snapshotting an object.

216
00:12:57.900 --> 00:13:01.970
Here we're snapshotting, and
that object includes errors and dates and

217
00:13:01.970 --> 00:13:02.800
all kinds of stuff.

218
00:13:02.800 --> 00:13:03.890
So yeah.

219
00:13:03.890 --> 00:13:06.250
So it can be useful for
snapshotting lots of stuff.

220
00:13:06.250 --> 00:13:13.430
And actually, there is another
assertion that I find quite useful.

221
00:13:13.430 --> 00:13:19.570
It's called, let's see,
toThrowErrorMatchingSnapshot.

222
00:13:19.570 --> 00:13:22.930
So if you have an error message,
you're like, it throws an error.

223
00:13:22.930 --> 00:13:26.456
I could say like, you wanna make
sure it's throwing the right error.

224
00:13:26.456 --> 00:13:30.102
And so you're gonna have like a regex that
matches your error or something like that.

225
00:13:30.102 --> 00:13:32.030
Instead, you just snapshot that.

226
00:13:32.030 --> 00:13:34.470
And somebody changes the error message,
really easy to update.

227
00:13:34.470 --> 00:13:36.020
Like it's totally fine.

228
00:13:36.020 --> 00:13:37.600
It's a way to verify that.

229
00:13:37.600 --> 00:13:40.390
So I actually use this one a fair amount.

