WEBVTT

1
00:00:00.000 --> 00:00:03.040
&gt;&gt; Kent C. Dodds: Just a couple more and
then I'll set you free.

2
00:00:03.040 --> 00:00:07.312
So simulate is actually
built into ReactDOM, so

3
00:00:07.312 --> 00:00:11.820
this is just a re-export from ReactDOM.

4
00:00:11.820 --> 00:00:14.100
And you could check out the docs there.

5
00:00:14.100 --> 00:00:15.110
It's pretty straightforward.

6
00:00:15.110 --> 00:00:18.890
Simulate whatever event you want,
the element you wanna simulate it on, and

7
00:00:18.890 --> 00:00:22.080
then any extra data that you
want to simulate that on.

8
00:00:22.080 --> 00:00:26.220
In our integration test, we're gonna click
on a link that's a React router link.

9
00:00:26.220 --> 00:00:30.010
In React router,
make sure that you're doing a left click.

10
00:00:30.010 --> 00:00:33.970
And so
you have to add extra event data, so

11
00:00:33.970 --> 00:00:37.580
that you can inform React router
that it's actually a left click.

12
00:00:37.580 --> 00:00:42.170
And I have an example of that, but
that's a use case for that event data.

13
00:00:43.690 --> 00:00:45.640
Wait accepts a callback.

14
00:00:45.640 --> 00:00:50.220
You can also pass some options for
how quick your interval should be.

15
00:00:50.220 --> 00:00:53.460
Cuz it's just checking every
x number of seconds and

16
00:00:53.460 --> 00:00:57.630
running your callback, waiting for
it to not throw an error.

17
00:00:57.630 --> 00:00:59.380
And then, also timeout.

18
00:00:59.380 --> 00:01:04.190
The default is like 4,500 milliseconds
because Jest will time out after

19
00:01:04.190 --> 00:01:06.580
5,000 milliseconds.

20
00:01:06.580 --> 00:01:09.950
You can also do this, well, yeah.

21
00:01:12.940 --> 00:01:15.414
There's also a utility
in DOM testing library,

22
00:01:15.414 --> 00:01:18.686
which I don't think is exposed
from React testing library yet.

23
00:01:18.686 --> 00:01:23.089
But it's waitForElement, and with this,

24
00:01:23.089 --> 00:01:27.320
you can actually say wait for element.

25
00:01:27.320 --> 00:01:33.230
And it will give you back
the element that you're waiting for,

26
00:01:33.230 --> 00:01:35.460
which is pretty handy dandy.

27
00:01:36.510 --> 00:01:40.420
So you can check that out
later if you want to.

28
00:01:40.420 --> 00:01:42.080
Okay, and
we'll look at the fireEvent later.

29
00:01:43.890 --> 00:01:47.010
All right, you ready to refactor
your test to use this stuff?

30
00:01:48.400 --> 00:01:50.390
Give it a try at least.

31
00:01:50.390 --> 00:01:55.170
You could install Enzyme if you really
want to, and feel free to do that.

32
00:01:55.170 --> 00:01:59.280
And then you'll have to be like,
I have to install an adaptor too.

33
00:01:59.280 --> 00:02:03.820
And like but
have fun with that if you want to.

34
00:02:03.820 --> 00:02:10.250
So where we're gonna be
working is login.step-2.todo.

35
00:02:10.250 --> 00:02:14.682
And I've got some things that
you can just comment out and

36
00:02:14.682 --> 00:02:17.140
make some changes and stuff.

37
00:02:17.140 --> 00:02:19.060
Just play around with it a little bit.

38
00:02:19.060 --> 00:02:20.640
I think we'll just do this for
five minutes.

39
00:02:20.640 --> 00:02:23.160
It should be pretty quick,
and then we'll come back and

40
00:02:23.160 --> 00:02:24.970
we'll work though the solution.

41
00:02:24.970 --> 00:02:30.290
So you're in watch mode,
you hit p, log in.step.2.todo,

42
00:02:30.290 --> 00:02:34.340
and that all get your
login step 2 test running.

