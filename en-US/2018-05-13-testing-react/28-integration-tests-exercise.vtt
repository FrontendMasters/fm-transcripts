WEBVTT

1
00:00:00.070 --> 00:00:01.730
&gt;&gt; Kent C. Dodds: So
this is where this lives.

2
00:00:01.730 --> 00:00:05.420
And I actually really strongly recommend
that you have a file like this.

3
00:00:05.420 --> 00:00:08.950
Utilities that are specific
to testing this application.

4
00:00:08.950 --> 00:00:14.304
In here,
I have a couple of utilities that I employ

5
00:00:14.304 --> 00:00:19.030
from React testing library and
I use those.

6
00:00:19.030 --> 00:00:23.345
And then I just expose it a couple of
useful things that we might use through

7
00:00:23.345 --> 00:00:24.520
the application.

8
00:00:24.520 --> 00:00:28.490
So it's almost like your own little node
module, like your utility known module

9
00:00:28.490 --> 00:00:32.140
that you can pretend that it's published
on npm, but it doesn't really have to be.

10
00:00:34.180 --> 00:00:40.860
Okay, so this renderWithRouter, it take
some UI, so React create element some jsx.

11
00:00:40.860 --> 00:00:43.520
It also takes some options.

12
00:00:43.520 --> 00:00:47.360
And here we have route
is one of those options.

13
00:00:47.360 --> 00:00:52.120
Because we're mounting the entire
application with the router,

14
00:00:52.120 --> 00:00:55.520
we can initialize the router
to the specific route.

15
00:00:55.520 --> 00:00:56.760
That'll default to the home, but

16
00:00:56.760 --> 00:01:00.230
you can actually initialize it to be on
the registration or on the editor, or

17
00:01:00.230 --> 00:01:03.950
wherever you want the app
to be at that time.

18
00:01:03.950 --> 00:01:07.560
What's cool about rendering
with the whole router like this

19
00:01:07.560 --> 00:01:12.490
is that you can verify that your route
configuration is set up properly.

20
00:01:12.490 --> 00:01:16.630
So your route exact path equals slash and

21
00:01:16.630 --> 00:01:20.100
if you test it like this, then you
know that those paths actually work.

22
00:01:21.120 --> 00:01:23.010
And it's pretty easy to set up.

23
00:01:23.010 --> 00:01:27.494
Because we're not actually in the browser,
we're going to create memory history.

24
00:01:27.494 --> 00:01:32.100
And that'll simulate the history API,
well, actually, it's coming from history.

25
00:01:32.100 --> 00:01:36.310
So this is how the react router docs work.

26
00:01:37.690 --> 00:01:40.810
They're using the memory history.

27
00:01:40.810 --> 00:01:47.650
So it keeps track of the back and forward
and all of the stack of history in memory.

28
00:01:47.650 --> 00:01:51.968
And so we initialize it with the route,
so that that's where it is right now.

29
00:01:51.968 --> 00:01:55.374
And then we provide that
history to our router and

30
00:01:55.374 --> 00:01:58.040
then render the UI within the router.

31
00:01:58.040 --> 00:02:03.990
So all the links and everything will be
referencing this instance of the router,

32
00:02:03.990 --> 00:02:06.520
whatever it sticks in the context.

33
00:02:06.520 --> 00:02:09.590
And then we render that
with react-testing-library,

34
00:02:09.590 --> 00:02:11.620
we get back our utils.

35
00:02:11.620 --> 00:02:13.410
And then we return the utils.

36
00:02:13.410 --> 00:02:17.380
And then also, this is one of
the reasons why I suggest having

37
00:02:19.440 --> 00:02:23.840
utility functions like this, because there
are some things that you're going to want

38
00:02:23.840 --> 00:02:26.420
to do in several of your tests.

39
00:02:26.420 --> 00:02:30.010
For example, when we open up this in
the first place, if we go to the deployed

40
00:02:30.010 --> 00:02:32.810
version, you're gonna see that
loading happening right there.

41
00:02:32.810 --> 00:02:36.310
What's happening is, actually, it's
starting up the server cuz it was asleep.

42
00:02:36.310 --> 00:02:37.120
So it'll take a second.

43
00:02:37.120 --> 00:02:38.559
When we refresh it,
it'll happen really quick.

44
00:02:39.560 --> 00:02:42.490
But anyway, we start out with the loading.

45
00:02:42.490 --> 00:02:45.870
And when I boot up the application,
when I render it in the first place,

46
00:02:45.870 --> 00:02:50.000
it's gonna try to make a request to say,
is this users logged in and

47
00:02:50.000 --> 00:02:52.650
let me get all the users and
all the posts and everything.

48
00:02:52.650 --> 00:02:55.470
And so we're going to wait for
that loading to go away,

49
00:02:55.470 --> 00:02:56.800
just like your user would.

50
00:02:56.800 --> 00:02:59.290
A users know that the app is
loaded when the loading goes away.

51
00:02:59.290 --> 00:03:02.266
And so
that because it's a really common thing,

52
00:03:02.266 --> 00:03:06.890
we're exposing a finishLoading
function that people can call.

53
00:03:06.890 --> 00:03:11.191
And so that you don't have
to have basically this code.

54
00:03:11.191 --> 00:03:14.670
It's just a little abstruction that
you make yourself and you can use.

55
00:03:14.670 --> 00:03:20.215
And that's one of the reasons why I say
every project should have a test-utils

56
00:03:20.215 --> 00:03:25.350
file for little stuff like this that's
kinda specific to that project.

57
00:03:27.000 --> 00:03:28.010
But other than that,

58
00:03:28.010 --> 00:03:31.860
this operates just like the render
method from react-testing-libraries.

59
00:03:31.860 --> 00:03:36.402
So you'll have your getByText,
your getBy so

60
00:03:36.402 --> 00:03:39.900
on and so forth, so there's that.

61
00:03:41.930 --> 00:03:45.590
And so we render with the router,
we render a full app and

62
00:03:45.590 --> 00:03:47.300
we get our container and all those things.

63
00:03:47.300 --> 00:03:48.430
Got finish by loading.

64
00:03:48.430 --> 00:03:50.830
That's the first thing we're
gonna do is like, just wait for

65
00:03:50.830 --> 00:03:52.060
that loading thing to go away.

66
00:03:54.080 --> 00:03:58.900
And thhen we'll go ahead and
click on the register link.

67
00:03:58.900 --> 00:04:02.065
So we're gonna find that,
here let's see what we got.

68
00:04:02.065 --> 00:04:03.420
Let's log out.

69
00:04:03.420 --> 00:04:05.430
So we'll click on the register link.

70
00:04:05.430 --> 00:04:07.963
That'll pop up, open this form, and

71
00:04:07.963 --> 00:04:12.010
we'll verify that the window
location href is registered.

72
00:04:12.010 --> 00:04:14.450
So that kind of is confirming, yes,

73
00:04:14.450 --> 00:04:19.430
that when I click on that register link,
it's taking me to the right page.

74
00:04:21.050 --> 00:04:24.290
And then we fill out the form, so
I'm just gonna generate a login form.

75
00:04:24.290 --> 00:04:25.870
I don't care what they are.

76
00:04:25.870 --> 00:04:27.120
Get the username and passwords.

77
00:04:27.120 --> 00:04:30.960
So this actually is very similar to the
test that you just wrote for the login.

78
00:04:32.550 --> 00:04:35.870
And that brings up a question
that you can ask later.

79
00:04:35.870 --> 00:04:39.765
Please do ask it later about, okay, so
now we're covering the same thing twice,

80
00:04:39.765 --> 00:04:41.580
we're testing the same thing twice.

81
00:04:41.580 --> 00:04:43.380
Where does it make the most sense?

82
00:04:43.380 --> 00:04:44.190
Ask me about that later.

83
00:04:45.500 --> 00:04:48.440
So we're gonna get those,
all the things that we need.

84
00:04:48.440 --> 00:04:54.080
And then before we submit the form,
we're going to go ahead and

85
00:04:54.080 --> 00:04:57.300
mock out the implementation of post.

86
00:04:57.300 --> 00:05:01.340
And I'm sorry I couldn't
make this any simpler.

87
00:05:01.340 --> 00:05:04.605
But you'll probably just wanna
look at this and copy and

88
00:05:04.605 --> 00:05:06.900
paste how this is working.

89
00:05:06.900 --> 00:05:10.440
And then you can talk to me after or
something.

90
00:05:10.440 --> 00:05:12.931
Ping me on Twitter or
something to figure out what's going on or

91
00:05:12.931 --> 00:05:16.630
you can just look into the [INAUDIBLE]
yourself and figure out what it's doing.

92
00:05:16.630 --> 00:05:22.210
But anyway, you wanna get the post,
you wanna mock its implementation, so

93
00:05:22.210 --> 00:05:25.820
that you can return a token.

94
00:05:25.820 --> 00:05:29.590
In your case, you'll be logging
in with an existing user, so

95
00:05:29.590 --> 00:05:33.570
you'll use that user's token,
or you'll just return.

96
00:05:33.570 --> 00:05:35.250
You can generate a token as well.

97
00:05:35.250 --> 00:05:41.110
Just return that token when
you're making a post request.

98
00:05:41.110 --> 00:05:44.250
So that's what's happening here,
and then we submit.

99
00:05:44.250 --> 00:05:48.090
And then we wait for the loading
to go away, so once you log in,

100
00:05:48.090 --> 00:05:49.370
it takes to the loading screen.

101
00:05:49.370 --> 00:05:51.680
We wait for that to go away.

102
00:05:51.680 --> 00:05:53.980
And then we can make some assertions.

103
00:05:53.980 --> 00:05:56.580
We assert that the post was indeed called.

104
00:05:56.580 --> 00:05:59.870
And then it was called
with the right arguments.

105
00:05:59.870 --> 00:06:05.830
So that fake login form, that fake user,
and we call the auth/register endpoint.

106
00:06:05.830 --> 00:06:09.940
And then ensure that, after that happen,

107
00:06:09.940 --> 00:06:13.150
we set the token so
now the user can be logged in.

108
00:06:13.150 --> 00:06:15.880
And they refresh the pages,
they're still logged in.

109
00:06:15.880 --> 00:06:18.120
We're no longer on the registration page.

110
00:06:18.120 --> 00:06:23.850
We could add an assertion that
it only is slash, I suppose.

111
00:06:23.850 --> 00:06:28.310
And then we have a getbytestID
because this is a username display.

112
00:06:28.310 --> 00:06:31.050
There's not really like
any aria attributes or

113
00:06:31.050 --> 00:06:33.130
anything relevent that we could select.

114
00:06:33.130 --> 00:06:37.330
So we're doing a test ID
to get the text content.

115
00:06:37.330 --> 00:06:44.760
And then make sure that the logout appears
so actually we can log in with TIL, TIL.

116
00:06:44.760 --> 00:06:50.040
And then actually, no,
here, we'll register.

117
00:06:50.040 --> 00:06:52.090
We're doing registration anyway, TIL, TIL.

118
00:06:53.570 --> 00:06:55.000
And loading will go away, and

119
00:06:55.000 --> 00:06:58.910
then that's the user display and
that's the logout button, okay?

120
00:06:58.910 --> 00:07:03.230
And that's pretty much,
as a manual tester, what we just did,

121
00:07:03.230 --> 00:07:05.480
that's how I verify that it works.

122
00:07:05.480 --> 00:07:09.130
Okay, my username is displayed there and
the logout button is there.

123
00:07:14.110 --> 00:07:15.430
All right, and that's it.

124
00:07:16.700 --> 00:07:21.720
So I'm gonna set you free for
about a half hour.

125
00:07:23.710 --> 00:07:25.642
Maybe not quite that long.

126
00:07:25.642 --> 00:07:32.000
Maybe we'll do 20 minutes, and
you'll be doing the login.

127
00:07:32.000 --> 00:07:36.965
So it's client/src/_tests_app.login.todo.

