WEBVTT

1
00:00:00.000 --> 00:00:04.972
What we're gonna do in this last
part is set up JSON Web Tokens.

2
00:00:04.972 --> 00:00:08.406
I'm not an expert on JSON Web Tokens.

3
00:00:08.406 --> 00:00:13.160
I don't claim to be, nor do I want to be,
but what is a JSON Web Token?

4
00:00:13.160 --> 00:00:17.929
A JWT is essentially that.

5
00:00:17.929 --> 00:00:26.227
It is a URL that is containing information
specific to the person accepting or

6
00:00:26.227 --> 00:00:30.193
the system accepting this request.

7
00:00:30.193 --> 00:00:33.526
So we have a blue portion,
green portion, and a red portion.

8
00:00:33.526 --> 00:00:35.907
The blue portion is the algorithm.

9
00:00:35.907 --> 00:00:41.745
What do we use to create an hash
RJWT because they're hashed, right?

10
00:00:41.745 --> 00:00:45.998
We don't want information to be
leaking left-right and center.

11
00:00:45.998 --> 00:00:47.414
So what is the algorithm?

12
00:00:47.414 --> 00:00:53.164
Which is in the JSON of ALG and HS256
is one of the more popular ones to hash

13
00:00:53.164 --> 00:00:59.032
your text representation or essentially
hash your payload and signature.

14
00:00:59.032 --> 00:01:01.620
Payload is information
that you wanna give it.

15
00:01:01.620 --> 00:01:02.585
It could be anything.

16
00:01:02.585 --> 00:01:04.645
It could be the user ID,
it could be his admin.

17
00:01:04.645 --> 00:01:06.338
It could be X, Y, Z.

18
00:01:06.338 --> 00:01:11.116
It's a payload that you create that you
can use to transfer information between

19
00:01:11.116 --> 00:01:13.754
the requester and your backend system, and

20
00:01:13.754 --> 00:01:16.622
then the most important
part is the signature.

21
00:01:16.622 --> 00:01:19.420
This signature is incredibly important.

22
00:01:19.420 --> 00:01:21.664
Forget to take away anything
from JWT's signature part.

23
00:01:21.664 --> 00:01:25.641
The reason for that is if you get
a request from a different JWT,

24
00:01:25.641 --> 00:01:30.668
someone like a bad agent or a bad actor
inserts their own JWT, you wanna make sure

25
00:01:30.668 --> 00:01:35.794
that you're only accepting requests from
jots that you create, that you sign.

26
00:01:35.794 --> 00:01:39.880
So typically, the signature is based
off of a string, which is again,

27
00:01:39.880 --> 00:01:43.434
is like a hash that you create and
store very, very secretly.

28
00:01:43.434 --> 00:01:47.388
They do not touch or
store in code or whatever.

29
00:01:47.388 --> 00:01:52.800
And basically, what any parsing library
will do is it will check the signature and

30
00:01:52.800 --> 00:01:57.283
identify did this essentially come
from me or another third party?

31
00:01:57.283 --> 00:01:58.822
If it's third party, you wanna remove it.

32
00:01:58.822 --> 00:02:02.389
You don't want that in your code at all.

33
00:02:02.389 --> 00:02:04.169
And why this matters, I mean,

34
00:02:04.169 --> 00:02:07.808
I think everyone here has
an understanding of how these works.

35
00:02:07.808 --> 00:02:12.203
But basically, client asks our backend,
our backend gives the token.

36
00:02:12.203 --> 00:02:16.654
This token is our JWT, our jot, and then
whenever our client wants super secret

37
00:02:16.654 --> 00:02:20.243
routes, we take that token,
we check it out, validate it, and

38
00:02:20.243 --> 00:02:23.122
then we either give it
a protected resource or not.

39
00:02:25.787 --> 00:02:28.447
Right, I mean, not too groundbreaking.

40
00:02:28.447 --> 00:02:30.170
I kept it fairly simple.

41
00:02:30.170 --> 00:02:32.593
You can go crazy with this.

42
00:02:32.593 --> 00:02:37.092
And there's actually a very good
article here from Medium, again,

43
00:02:37.092 --> 00:02:41.372
this is gonna be in the resources,
so this is all gonna be attach.

44
00:02:41.372 --> 00:02:45.916
And this is essentially what I'm going
to follow to create our JWT, but

45
00:02:45.916 --> 00:02:50.007
essentially how to use this package
how you create your token and

46
00:02:50.007 --> 00:02:51.994
how you can parse them, okay?

47
00:02:51.994 --> 00:02:56.130
I take it one step further because I
cradled middleware around our routes, so

48
00:02:56.130 --> 00:03:00.151
it starts to look a little bit gnarly,
especially the method signatures.

49
00:03:00.151 --> 00:03:04.468
And passing an index function and
the method chain, but TLDR,

50
00:03:04.468 --> 00:03:09.941
this is kind of how it's done, or just
a good resource of how it's done, okay?

51
00:03:12.088 --> 00:03:15.556
Cool, so let's go cd back into our lambda.

52
00:03:15.556 --> 00:03:20.755
And the very first thing
we're gonna need is

53
00:03:20.755 --> 00:03:29.335
another last package is go get
github.com/golang-jwt/jwt/v5.

54
00:03:29.335 --> 00:03:34.637
We get that package installed,
we're gonna go ahead and import it.

55
00:03:34.637 --> 00:03:41.724
So github.com/golang-jwt/jwt/v5.

56
00:03:41.724 --> 00:03:45.618
I'm gonna create a function
called func CreateToken.

57
00:03:45.618 --> 00:03:48.689
And this is gonna accept
a user of type user,

58
00:03:48.689 --> 00:03:52.104
and all it's gonna do is return a string,
okay?

59
00:03:52.104 --> 00:03:54.699
And this string is gonna
represent our JWT,

60
00:03:54.699 --> 00:03:58.080
the job that we're gonna
basically assemble right now.

61
00:03:58.080 --> 00:04:01.989
So now what we wanna do,
is now is time.now.

62
00:04:01.989 --> 00:04:05.089
So what is the current time
we're executing this function,

63
00:04:05.089 --> 00:04:07.655
which is essentially gonna
be when a user logs in?

64
00:04:07.655 --> 00:04:13.022
We get the current timestamp, and
then we create expires, push back,

65
00:04:13.022 --> 00:04:18.486
validUntil, and this is where we assign
how long is this token good for?

66
00:04:18.486 --> 00:04:22.269
You typically talk to the good, you have
short term tokens, long-term tokens.

67
00:04:22.269 --> 00:04:25.447
This is a whole different topic
that we can definitely get into.

68
00:04:25.447 --> 00:04:29.308
But for now, I'm gonna say that
this token is good for one hour.

69
00:04:29.308 --> 00:04:30.463
Is that the best practice?

70
00:04:30.463 --> 00:04:31.973
Depends on what are you using it for.

71
00:04:31.973 --> 00:04:34.874
But it is what it is.

72
00:04:34.874 --> 00:04:37.334
I'm gonna do one, whoops.

73
00:04:40.427 --> 00:04:45.003
So one hour, and
I'm gonna convert that to Unix, okay?

74
00:04:45.003 --> 00:04:48.944
And now we're gonna assemble
the payload of our JWT and

75
00:04:48.944 --> 00:04:52.123
this is also considered as claims, right?

76
00:04:52.123 --> 00:04:53.992
I'm gonna bring in our JWT.

77
00:04:53.992 --> 00:04:59.574
I'm gonna do new,
sorry jwt.MapClaims, okay?

78
00:04:59.574 --> 00:05:00.877
It's gonna be a struct, and

79
00:05:00.877 --> 00:05:03.383
this is where we put in the fields
that we want to put in.

80
00:05:03.383 --> 00:05:07.656
So this is information that we require,
like the payload that we're interested in.

81
00:05:07.656 --> 00:05:11.589
So here we're gonna put user,
and it's gonna be user.username,

82
00:05:11.589 --> 00:05:16.350
just to have something in there and then
expires, which this is important because

83
00:05:16.350 --> 00:05:21.045
we're gonna parse that in our validation
logic and our validation middleware.

84
00:05:21.045 --> 00:05:24.869
I'm gonna expires,
is going to be valid until, okay?

85
00:05:24.869 --> 00:05:27.163
One hour from the time it's issued,

86
00:05:27.163 --> 00:05:32.056
that's how it's gonna be good if it's
a second over, it's expired, okay?

87
00:05:32.056 --> 00:05:34.885
So now let's assemble this token, so JWT.

88
00:05:34.885 --> 00:05:40.438
I'm gonna do a new token, new with claims,
that's gonna take the method.

89
00:05:40.438 --> 00:05:45.336
So the signing method, what's the
algorithm we're using to sign this JWT?

90
00:05:45.336 --> 00:05:50.033
And the most important,
not important, the most famous one,

91
00:05:50.033 --> 00:05:52.608
the most popular one is HX256.

92
00:05:52.608 --> 00:05:55.265
Don't know what that algorithm means.

93
00:05:55.265 --> 00:05:59.720
People, PhDs, theorists know,
I'm just using this, right?

94
00:05:59.720 --> 00:06:02.720
I just know it's secure,
it's good, it's popular, and

95
00:06:02.720 --> 00:06:04.346
we can put in our claims and nil.

96
00:06:04.346 --> 00:06:06.593
Nil for no additional features,

97
00:06:06.593 --> 00:06:11.258
no additional information to be
appended to our claims here, okay?

98
00:06:11.258 --> 00:06:13.826
Next is this part, this is a wonky part.

99
00:06:13.826 --> 00:06:18.403
This is basically where you want to store
your secret and not what I'm doing.

100
00:06:18.403 --> 00:06:20.818
Do not do what I do right now.

101
00:06:20.818 --> 00:06:24.969
This is a secret that should
be stored in AWS secrets or

102
00:06:24.969 --> 00:06:27.651
something else, in a .env file.

103
00:06:27.651 --> 00:06:30.868
I'm just using this just so
we can get the ball rolling here, but

104
00:06:30.868 --> 00:06:32.430
secret is the signing method.

105
00:06:32.430 --> 00:06:37.493
That important thing I was pointing at,
this is the signing method,

106
00:06:37.493 --> 00:06:41.960
so keep it secret, and then so
we're gonna do tokenString.

107
00:06:41.960 --> 00:06:45.416
And I believe this returns an error,
yes it does.

108
00:06:45.416 --> 00:06:49.041
We're gonna do that token,
and we're gonna SignedString.

109
00:06:49.041 --> 00:06:53.066
And this SignedString is
gonna take a slice of bytes,

110
00:06:53.066 --> 00:06:55.759
and we're gonna put in the secret.

111
00:06:55.759 --> 00:06:59.217
So now we basically signed our token
with this last piece of information.

112
00:06:59.217 --> 00:07:04.476
I'm gonna say if error does not
equal to nil, what I'm gonna do is,

113
00:07:04.476 --> 00:07:08.279
which could be to return an empty string,
okay?

114
00:07:08.279 --> 00:07:11.554
And we can log in internally like,
hey, there's an error or hey,

115
00:07:11.554 --> 00:07:12.793
something's going on.

116
00:07:12.793 --> 00:07:15.985
But for our case,
we just return an empty string,

117
00:07:15.985 --> 00:07:19.408
otherwise we're gonna return tokenString,
okay?

118
00:07:19.408 --> 00:07:23.717
And this tokenString is that
assortment that LongHashed will create.

119
00:07:23.717 --> 00:07:28.042
And right now, this is gonna include
our claims, when it expires, and

120
00:07:28.042 --> 00:07:29.352
the signing method.

