WEBVTT

1
00:00:00.000 --> 00:00:04.747
Now, I think it's a good time
to start that refactor that was

2
00:00:04.747 --> 00:00:06.713
kind of drilling about.

3
00:00:06.713 --> 00:00:10.167
So you can see here, we have this
one function, registerUserHandler.

4
00:00:10.167 --> 00:00:15.113
And what I really wanna do is not have
my lambda function only be invoked by

5
00:00:15.113 --> 00:00:15.935
one thing.

6
00:00:15.935 --> 00:00:20.265
And there's an easy way to do this,
it's just kind of a pain.

7
00:00:20.265 --> 00:00:23.851
So we're gonna take the aws-lambda-go.

8
00:00:23.851 --> 00:00:27.477
Instead of lambda, we're gonna put events.

9
00:00:27.477 --> 00:00:30.922
And events is something that
directly understands that it

10
00:00:30.922 --> 00:00:34.800
comes from some sorta proxy,
some sort of gateway, if you will.

11
00:00:34.800 --> 00:00:38.599
And that is how we can extract
the request, we can extract paths,

12
00:00:38.599 --> 00:00:40.409
we can do a lot of stuff with it.

13
00:00:42.019 --> 00:00:43.310
But we need to kind of refactor this.

14
00:00:43.310 --> 00:00:47.865
So here, what I'm gonna do is I'm gonna
completely wipe our start function.

15
00:00:47.865 --> 00:00:52.982
What I'm gonna do is pass a func, and
this is gonna take a request, okay?

16
00:00:52.982 --> 00:00:56.510
And it's going to be of

17
00:00:56.510 --> 00:01:04.317
events.APIGatewayProxyRequest, all right?

18
00:01:04.317 --> 00:01:10.735
And this is gonna return
an events.APIGatewayProxy,

19
00:01:10.735 --> 00:01:14.975
oops, ProxyResponse and an error.

20
00:01:20.266 --> 00:01:23.720
And this is basically hook
up your lambda function,

21
00:01:23.720 --> 00:01:25.996
bare bone to your AWS API Gateway,

22
00:01:25.996 --> 00:01:30.640
because we're gonna pass in these
new requests coming in from users.

23
00:01:30.640 --> 00:01:33.361
The gateway's gonna proxy them, and

24
00:01:33.361 --> 00:01:37.962
we're gonna pass that into our
lambda function and vice versa.

25
00:01:37.962 --> 00:01:42.794
When we respond, we're also gonna make
sure that they are transformed to the API

26
00:01:42.794 --> 00:01:44.582
proxy response type as well.

27
00:01:47.327 --> 00:01:49.671
Now, how do we still switch between paths?

28
00:01:49.671 --> 00:01:51.050
We're gonna use a switch statement.

29
00:01:51.050 --> 00:01:57.374
So switch based on request.Path, okay?

30
00:01:57.374 --> 00:02:00.146
And we're gonna change it on
basically what path we invoke.

31
00:02:00.146 --> 00:02:03.217
So we know those two paths,
cuz we just assembled them in CDK.

32
00:02:03.217 --> 00:02:08.235
We do case/register, Okay,

33
00:02:08.235 --> 00:02:12.795
and here,
what I'm going to write is we're gonna

34
00:02:12.795 --> 00:02:17.577
return our
myApp.ApiuserRegisterUserHandler,

35
00:02:17.577 --> 00:02:21.608
but this time it's going
to take a request.

36
00:02:21.608 --> 00:02:25.131
Because this is the request
that we're processing,

37
00:02:25.131 --> 00:02:29.056
it's the request we're getting
from our clients, okay?

38
00:02:29.056 --> 00:02:32.972
And every time you do switch them in Go,
you have to have this default as well.

39
00:02:32.972 --> 00:02:37.588
As the default base said, okay,
you didn't hit any path that we know of,

40
00:02:37.588 --> 00:02:41.022
so we're gonna return
the events API proxy response.

41
00:02:41.022 --> 00:02:46.195
And the body of this
is gonna be Not found.

42
00:02:46.195 --> 00:02:51.871
And you have to append the StatusCode
as well, and the http-StatusNotFound.

43
00:02:56.456 --> 00:02:58.501
So there's a big issue going on, right?

44
00:02:58.501 --> 00:03:04.250
We are expecting our registered user to
essentially accept this request path,

45
00:03:04.250 --> 00:03:08.967
even though right now it's written
to only accept our events, so

46
00:03:08.967 --> 00:03:11.141
we have to go and change that.

47
00:03:11.141 --> 00:03:17.315
And it's a little painful, I can't lie,
but it's not the end of the world.

48
00:03:17.315 --> 00:03:20.605
And I did it on purpose,
so you can hate me.

49
00:03:20.605 --> 00:03:24.516
But if I go back, if I copy this and
we go to our Types here and paste it,

50
00:03:24.516 --> 00:03:28.909
cuz we're gonna expect that same type
structure from our events lamda here.

51
00:03:28.909 --> 00:03:31.719
And let's just go ahead and
pull the bandit off.

52
00:03:31.719 --> 00:03:36.886
So first this is gonna
accept a request from

53
00:03:36.886 --> 00:03:43.491
events.APIGatewayProxyRequest, and
we're gonna

54
00:03:43.491 --> 00:03:50.537
return events.APIGatewayProxyResponse and
an error.

55
00:03:50.537 --> 00:03:54.233
And we get a lot of errors, which is fine,

56
00:03:54.233 --> 00:03:58.260
we can help them, nothing too crazy, okay?

57
00:03:58.260 --> 00:04:02.181
So you may be thinking to yourself, well,
how am I gonna process the username and

58
00:04:02.181 --> 00:04:02.931
the password,

59
00:04:02.931 --> 00:04:06.466
because it's not request.username,
it's not request.password.

60
00:04:06.466 --> 00:04:09.243
We're gonna do something we
just looked at in database.

61
00:04:09.243 --> 00:04:14.519
We're gonna use the initialized
variable for a register user.

62
00:04:14.519 --> 00:04:20.604
So here, we're gonna var registerUser
is gonna be a types RegisterUser.

63
00:04:22.949 --> 00:04:27.111
Okay, Question?

64
00:04:27.111 --> 00:04:31.116
&gt;&gt; In the routes, so reason we did slash
register this time instead of just

65
00:04:31.116 --> 00:04:32.997
register as we defined earlier?

66
00:04:32.997 --> 00:04:35.023
&gt;&gt; Yeah, because in the CDK code,

67
00:04:35.023 --> 00:04:40.521
you don't need to specify the slash route
registered, it appends it automatically.

68
00:04:40.521 --> 00:04:41.998
It kind of knows how to do that.

69
00:04:41.998 --> 00:04:44.846
But because our switch statement here,

70
00:04:44.846 --> 00:04:48.540
our switch statement here
has no logic of anything.

71
00:04:48.540 --> 00:04:52.172
So we have to be very specific
on what path we're gonna invoke.

72
00:04:52.172 --> 00:04:55.167
So we can't just say register,
it has to be slash register,

73
00:04:55.167 --> 00:04:57.657
cuz that's where invocations
are gonna come to.

74
00:05:00.595 --> 00:05:03.585
Okay, so here, before we use registerUser,

75
00:05:03.585 --> 00:05:07.740
we have to use another library
built in called the JSON library.

76
00:05:07.740 --> 00:05:12.569
And this is a very popular library in Go,
and this is actually the first instance

77
00:05:12.569 --> 00:05:16.045
where we're going to make use
of those JSON tags, okay?

78
00:05:16.045 --> 00:05:21.491
So I'm gonna do err, put JSON,
I'm gonna unmarshal this request.

79
00:05:21.491 --> 00:05:23.869
So we're gonna unmarshal it.

80
00:05:23.869 --> 00:05:28.533
So first,
we're gonna take in our request.Body.

81
00:05:28.533 --> 00:05:32.739
So this is what we get from our front-end,
or from our client, I should say,

82
00:05:32.739 --> 00:05:33.663
more specific.

83
00:05:33.663 --> 00:05:35.776
We're gonna unmarshal
that to our registerUser.

84
00:05:45.335 --> 00:05:49.919
And the reason why this works is because
our JSON payload is gonna have those keys,

85
00:05:49.919 --> 00:05:54.704
username and password, and we don't need
to specify anything else because our types

86
00:05:54.704 --> 00:05:57.846
registerUser has those tags,
username and password.

87
00:05:57.846 --> 00:06:00.977
So the unmartialed library
implicitly undersdands,

88
00:06:00.977 --> 00:06:04.513
okay, you're adjacent with this key,
I'm gonna unmarshal

89
00:06:04.513 --> 00:06:08.743
to distruct where you have that tag
associated with it, with that field.

90
00:06:08.743 --> 00:06:12.624
Okay, you guys know what's next.

91
00:06:12.624 --> 00:06:15.036
Errors, baby, errors all day.

92
00:06:15.036 --> 00:06:17.783
We're gonna return
events.APIProxyResponse.

93
00:06:17.783 --> 00:06:21.911
The body of this is gonna
be Invalid Request, right?

94
00:06:21.911 --> 00:06:29.218
They sent us something that we don't know,
the http.Status, what is it, BadRequest?

95
00:06:29.218 --> 00:06:33.561
Cool, and here, we're actually
going to just feed that error up.

96
00:06:33.561 --> 00:06:38.060
So this error, the second
parameter is what we will see in

97
00:06:38.060 --> 00:06:42.186
our lambda CloudWatch logs,
where that first one,

98
00:06:42.186 --> 00:06:47.276
the APIGatewayProxyResponse is
what callers are going to see.

99
00:06:47.276 --> 00:06:49.104
I just wanna make that distinction, and

100
00:06:49.104 --> 00:06:52.243
why there's kind of essentially
two errors being surfaced, okay?

101
00:06:52.243 --> 00:06:54.726
One is for developers to understand like,
wait, what?

102
00:06:54.726 --> 00:06:55.785
Why did that error out?

103
00:06:55.785 --> 00:06:57.978
The other one's like, wait,
why did my call error out?

104
00:07:01.710 --> 00:07:04.791
Okay, and
we can keep the similar logic here.

105
00:07:04.791 --> 00:07:09.322
So instead of event,
it's going to be, what do we call it?

106
00:07:09.322 --> 00:07:13.112
Register user, so registerUser.Username.

107
00:07:13.112 --> 00:07:19.188
And then over here,
it's gonna be registeruser.Password.

108
00:07:19.188 --> 00:07:23.386
We're gonna do return
events.APIGatewayProxyResponse.

109
00:07:23.386 --> 00:07:28.374
Again, we could make the same body,
so we could do invalid request,

110
00:07:28.374 --> 00:07:34.407
Invalid request, or we could just,
fields empty, something like that, right?

111
00:07:34.407 --> 00:07:42.764
StatusCode is gonna be
http.StatusBadRequest and an error.

112
00:07:42.764 --> 00:07:46.039
Oops, not a dot and an error, okay?

113
00:07:52.707 --> 00:07:58.150
Cool, now, here to modify,
this is not event.Username.

114
00:08:01.741 --> 00:08:09.484
This is instead registerUser.Username,
return.

115
00:08:11.055 --> 00:08:14.837
And I'm being implicit on
the returns on purpose.

116
00:08:14.837 --> 00:08:18.806
You can obviously make a helper function
that does this all for you, but

117
00:08:18.806 --> 00:08:21.652
we're gonna return a body
internal server error,

118
00:08:21.652 --> 00:08:24.585
meaning something on our
backend crapped out on us.

119
00:08:24.585 --> 00:08:27.802
Something on our backend stopped
working successfully, right?

120
00:08:27.802 --> 00:08:30.152
So we can do StatusInternal,

121
00:08:36.568 --> 00:08:40.052
Okay, and then we can surface that
error back to our published logs.

122
00:08:44.100 --> 00:08:46.923
If the user exists, same thing.

123
00:08:46.923 --> 00:08:52.650
return events, proxy response,
Body "User already exists".

124
00:08:52.650 --> 00:08:55.335
StatusCode is gonna be
http.StatusConflict.

125
00:08:55.335 --> 00:08:59.613
There might be better StatusCodes there,
not fully sure.

126
00:08:59.613 --> 00:09:03.755
And then lastly, or I guess not fully
last, there's a few things we got to do.

127
00:09:03.755 --> 00:09:07.406
We added two more return statements here,
but

128
00:09:07.406 --> 00:09:11.534
instead of event,
we're gonna put registerUser.

129
00:09:11.534 --> 00:09:16.203
And here, if we have an error
entering the user in our database,

130
00:09:16.203 --> 00:09:20.789
we're gonna return
events.APIGatewayProxyResponse, and

131
00:09:20.789 --> 00:09:24.522
we're gonna do our Body
as Internal server error.

132
00:09:24.522 --> 00:09:28.345
It depends if you want to surface more
information to your caller or not,

133
00:09:28.345 --> 00:09:30.234
that's an engineering decision.

134
00:09:30.234 --> 00:09:35.076
There's risks to that, but also, it could
make debugging easier for your client.

135
00:09:35.076 --> 00:09:38.876
So that's up to you to decide.

136
00:09:38.876 --> 00:09:42.626
We'll do http.StatusInternalServerError.

137
00:09:42.626 --> 00:09:46.874
And then here,
let's just send that error back.

138
00:09:46.874 --> 00:09:49.177
Kind of lazy error handling,
I won't lie, but

139
00:09:49.177 --> 00:09:52.583
it's up to you how you wanna decide
what makes it easy for you to debug.

140
00:09:52.583 --> 00:09:54.184
You can always wrap these two, right?

141
00:09:54.184 --> 00:09:59.173
Again, let's not forget that we have
this tool, this fmt.Errorf, and

142
00:09:59.173 --> 00:10:01.268
we can wrap our error, right?

143
00:10:01.268 --> 00:10:07.605
error inserting user, right, and
then we could wrap the error.

144
00:10:11.309 --> 00:10:12.989
Cool, and instead of returning nil,

145
00:10:12.989 --> 00:10:15.731
we still have to be very specific
with our return statements.

146
00:10:15.731 --> 00:10:21.288
Now, so we're gonna return
events.APIGatewayProxyResponse,

147
00:10:21.288 --> 00:10:26.265
the Body, we can just say,
Successfully registered user.

148
00:10:26.265 --> 00:10:34.023
The StatusCode is gonna be http.StatusOK,
and then nil.

149
00:10:36.650 --> 00:10:45.243
So I know that was a ton of code we
just wrote from everything holistically.

150
00:10:45.243 --> 00:10:51.334
But it's just how we have to do it.

151
00:10:51.334 --> 00:10:52.817
There's also another portion.

152
00:10:52.817 --> 00:10:57.706
So remember, we were working on this
types, and we have this new user.

153
00:10:57.706 --> 00:11:01.187
I think now's a good time to
implement this new user function,

154
00:11:01.187 --> 00:11:05.402
cuz we're already dabbling in
the registerUser API function here, okay?

155
00:11:05.402 --> 00:11:08.537
So before we register or
insert the user, I should say,

156
00:11:08.537 --> 00:11:10.349
we need to create that new user.

157
00:11:10.349 --> 00:11:15.339
So here, user,
error is going to be types.NewUser and

158
00:11:15.339 --> 00:11:20.982
put in the registerUser here if
the error does not equal to nil.

159
00:11:20.982 --> 00:11:25.264
And again, you can ignore these errors,
you can just ignore them.

160
00:11:25.264 --> 00:11:28.455
And that's totally up to
you if you want to do that.

161
00:11:28.455 --> 00:11:32.939
We can do events.APIProxy,
APIGatewayProxyResponse,

162
00:11:32.939 --> 00:11:35.455
excuse me, yhen we can say Body.

163
00:11:35.455 --> 00:11:40.522
Again, we can put internal server error,
cuz it is what that issue is,

164
00:11:40.522 --> 00:11:43.828
Internal server error,
to be more specific.

165
00:11:43.828 --> 00:11:49.647
StatusCode is going to be
http.StatusInternalServerError.

166
00:11:49.647 --> 00:11:52.690
And in here, let's just say,
I'm gonna be more specific on this error.

167
00:11:52.690 --> 00:11:57.772
I'm gonna say,
could not create new user and

168
00:11:57.772 --> 00:12:02.195
we're gonna wrap that with our error.

169
00:12:02.195 --> 00:12:05.275
And now, when we call insert user,

170
00:12:05.275 --> 00:12:10.832
instead of specifying registerUser,
we specify user, okay?

171
00:12:10.832 --> 00:12:14.821
Now, if we go back to where
we defined the InsertUser,

172
00:12:14.821 --> 00:12:19.528
if they change this from type
registerUser to just type.User.

173
00:12:22.578 --> 00:12:26.830
And it is gonna be an issue, and
this highlights kind of interfaces.

174
00:12:26.830 --> 00:12:30.753
If you go down here,
InsertUser types.registerUser,

175
00:12:30.753 --> 00:12:32.886
we want types.user, right?

176
00:12:32.886 --> 00:12:35.693
So again,
a nice little feature of interfaces.

177
00:12:35.693 --> 00:12:37.140
I guess it could be annoying.

178
00:12:37.140 --> 00:12:42.789
And that's because our DynamoDBClient
here implement InsertUser

179
00:12:42.789 --> 00:12:47.655
with the type.registerUser,
but it should be now user.

180
00:12:47.655 --> 00:12:53.768
And then down here relative .line 68,
so it's gonna be user.Passwordhash

