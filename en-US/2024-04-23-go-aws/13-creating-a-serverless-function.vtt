WEBVTT

1
00:00:00.450 --> 00:00:05.810
So here in our main.go,
we actually have to pull in some packages.

2
00:00:05.810 --> 00:00:08.407
So there's gonna be the first
time we're not gonna depend just

3
00:00:08.407 --> 00:00:09.850
on the standard library.

4
00:00:09.850 --> 00:00:14.627
We have to depend on the Go AWS SDK, okay?

5
00:00:14.627 --> 00:00:17.931
So first, I want to type

6
00:00:17.931 --> 00:00:25.880
GoGetGithub.com/AWS/AWS-Lambda-Go/Lambda.

7
00:00:28.337 --> 00:00:30.776
You can see that we have
that package added, okay?

8
00:00:32.296 --> 00:00:39.506
And like I said, all Lambda does
is it handles a function for us.

9
00:00:39.506 --> 00:00:41.101
So we're gonna to define that function.

10
00:00:42.981 --> 00:00:44.856
So what I'm gonna do here,

11
00:00:44.856 --> 00:00:49.766
is I'm gonna create a new function
called func HandleRequest, okay?

12
00:00:49.766 --> 00:00:53.021
Let's just give it that bare bone
skeleton for any Go function.

13
00:00:53.021 --> 00:01:00.242
And what this function is going to do is,
it's going to take in a payload, right?

14
00:01:00.242 --> 00:01:04.544
And do something with it, okay?

15
00:01:04.544 --> 00:01:05.904
Let's just keep it simple, right?

16
00:01:05.904 --> 00:01:10.523
KISS, and so the first thing
I wanna define is a struct,

17
00:01:10.523 --> 00:01:16.828
because that struct is going to be the
data that our payload is gonna come in.

18
00:01:16.828 --> 00:01:20.724
So we're gonna do type, let's just
say it's gonna be called my event.

19
00:01:20.724 --> 00:01:23.809
It's gonna be a struct, and
if you think about this, the only,

20
00:01:23.809 --> 00:01:27.631
like right now, the only field I care
about is a field called username.

21
00:01:27.631 --> 00:01:29.831
Let's create a username field.

22
00:01:29.831 --> 00:01:33.031
It's gonna be a string, okay?

23
00:01:33.031 --> 00:01:37.161
And there's something I did not mention
earlier when I talked about structs.

24
00:01:37.161 --> 00:01:42.802
Structs in Go have an additional
option to tag it, okay?

25
00:01:42.802 --> 00:01:45.078
Tagging is a way for Go and

26
00:01:45.078 --> 00:01:51.022
other libraries to really
handle data into your struct.

27
00:01:51.022 --> 00:01:54.907
A very popular example of
tagging is using the JSON tags.

28
00:01:54.907 --> 00:01:59.616
So we can do backtick JSON,
and then we can put username.

29
00:02:02.629 --> 00:02:03.590
So, what is this?

30
00:02:03.590 --> 00:02:04.539
What did we just do?

31
00:02:04.539 --> 00:02:07.656
Basically, when we get a JSON payload or

32
00:02:07.656 --> 00:02:13.309
JSON request from our client,
typically it's JSON, right?

33
00:02:13.309 --> 00:02:17.103
It's gonna have a username and then
whatever the value of that username is.

34
00:02:17.103 --> 00:02:18.039
So, mine's gonna be Melky.

35
00:02:19.099 --> 00:02:24.004
With this ability, we can actually
unmarshal that raw request, that raw HTTP

36
00:02:24.004 --> 00:02:29.641
request we're getting from our client
into this struct with one line of code.

37
00:02:29.641 --> 00:02:34.453
And now we have abilities to handle
everything in that payload from our client

38
00:02:34.453 --> 00:02:36.491
with our struct.

39
00:02:36.491 --> 00:02:40.459
We call methods on it, we can just
take that field, take that attribute,

40
00:02:40.459 --> 00:02:42.902
do whatever you want
with this property now.

41
00:02:46.319 --> 00:02:48.044
So we have the Tunnel Request.

42
00:02:48.044 --> 00:02:51.891
What I'm gonna do is this handle
request is gonna take my event type.

43
00:02:51.891 --> 00:02:54.184
So it's gonna be event, my event.

44
00:02:54.184 --> 00:02:57.070
So we know what we're gonna
expect to call with our function,

45
00:02:57.070 --> 00:03:00.413
what our Lambda is gonna expect to
do with this function, I should say.

46
00:03:00.413 --> 00:03:03.900
And then here, let's do some basic logic.

47
00:03:03.900 --> 00:03:09.980
We'll say if event.username is empty,
right?

48
00:03:09.980 --> 00:03:13.280
Basically what I wanna do
here is return an error,

49
00:03:13.280 --> 00:03:18.075
something happened from our client
that we did not expect, and with Go,

50
00:03:18.075 --> 00:03:21.466
we need to also tell it what
is gonna be return type.

51
00:03:21.466 --> 00:03:24.411
What is the expected return
type of our function here?

52
00:03:26.103 --> 00:03:28.377
For right now, we just need an error.

53
00:03:28.377 --> 00:03:31.236
An error is a native type in Go.

54
00:03:31.236 --> 00:03:36.697
These are individual types, and
one core thing about Go, and

55
00:03:36.697 --> 00:03:42.669
I have not talked about this yet,
errors, our values in Go.

56
00:03:42.669 --> 00:03:46.689
There's no real try-catch
exceptions nothing like that.

57
00:03:46.689 --> 00:03:49.528
You treat an error as if you
treat any other value from

58
00:03:49.528 --> 00:03:53.011
the values you've handled with
structs anything from like a for

59
00:03:53.011 --> 00:03:55.669
loop that value you handle
it the exact same way.

60
00:03:55.669 --> 00:03:57.409
What does this mean?

61
00:03:57.409 --> 00:04:02.045
One is your code is now fully in your
control of how you handle these errors,

62
00:04:02.045 --> 00:04:02.868
right?

63
00:04:02.868 --> 00:04:04.959
If there's an error that
you did not suspect,

64
00:04:04.959 --> 00:04:08.710
you have to kinda handle that code, maybe
bubble it up back to the caller, but say,

65
00:04:08.710 --> 00:04:10.873
hey, we experienced this error,
here you go.

66
00:04:10.873 --> 00:04:12.529
It's an error type or

67
00:04:12.529 --> 00:04:18.242
maybe there's an unforeseen behavior
in your code and it's dangerous.

68
00:04:18.242 --> 00:04:19.352
Well, now we wanna panic.

69
00:04:19.352 --> 00:04:24.181
We wanna just completely this was
not something that we had thought of

70
00:04:24.181 --> 00:04:29.009
this should never exist but it did
we have to panic our application and

71
00:04:29.009 --> 00:04:31.187
basically run it down, okay?

72
00:04:31.187 --> 00:04:35.075
But there's also things you can
do with errors that aren't so

73
00:04:35.075 --> 00:04:39.858
scary as panicking can gracefully handle
it you can log it totally up to you in

74
00:04:39.858 --> 00:04:44.893
some cases like we showed before, you can
just ignore it cuz errors are values.

75
00:04:44.893 --> 00:04:47.647
Remember when we had the for loop and
we didn't use like an index or a value,

76
00:04:47.647 --> 00:04:48.832
we just put underscore?

77
00:04:48.832 --> 00:04:51.042
You can do the exact same with an error.

78
00:04:51.042 --> 00:04:54.503
So it's dangerous, but
it gives us as the software developer,

79
00:04:54.503 --> 00:04:58.091
software engineer, more control as
to how our code is executed and

80
00:04:58.091 --> 00:05:00.609
how it's handled under certain situations.

81
00:05:03.142 --> 00:05:08.108
Cool, so here, if the event.Username
is empty, what I'm gonna do is return.

82
00:05:08.108 --> 00:05:09.595
I'm gonna use our format package.

83
00:05:09.595 --> 00:05:12.896
I'm gonna create, basically,
a new error type with error format.

84
00:05:12.896 --> 00:05:20.126
I'm gonna say,
username cannot be empty, okay?

85
00:05:20.126 --> 00:05:24.209
And it's gonna get bubbled back
up to our client, the caller.

86
00:05:24.209 --> 00:05:29.690
And then here, what I'd like to do is,
if it's not an error, and this is,

87
00:05:29.690 --> 00:05:35.193
again, a super basic example,
we're gonna do return format.sprintf.

88
00:05:35.193 --> 00:05:39.476
And what sprintf does,
different than printf or

89
00:05:39.476 --> 00:05:44.077
println, is it returns a value for
us to use, okay?

90
00:05:45.547 --> 00:05:47.847
So then we have access to this new string.

91
00:05:47.847 --> 00:05:49.010
We can use it accordingly.

92
00:05:49.010 --> 00:05:50.491
We can pass it down whatever we want.

93
00:05:50.491 --> 00:05:54.237
That's the difference between printf and
sprintf, okay?

94
00:05:54.237 --> 00:05:58.902
Here, let's just do
successfully called by, and

95
00:05:58.902 --> 00:06:06.069
let's add our format specifiers, so
modulo s and we can do event.Username.

96
00:06:09.563 --> 00:06:15.613
Okay, and here we're actually going to do
is modify this and not only be an error,

97
00:06:15.613 --> 00:06:20.911
but also a string so we can return
multiple things from our Go code.

98
00:06:20.911 --> 00:06:23.933
So I'm gonna do string error, and
now we're gonna get to say, hey,

99
00:06:23.933 --> 00:06:25.821
there's not enough returns here.

100
00:06:25.821 --> 00:06:29.761
So in our first return,
we're gonna return empty string, okay?

101
00:06:31.331 --> 00:06:32.730
So nothing successful.

102
00:06:32.730 --> 00:06:36.672
It's gonna run on the error
that gets returned.

103
00:06:36.672 --> 00:06:40.238
And then down here, this can be the first
return, and then the second one is nil.

104
00:06:41.508 --> 00:06:43.708
Now, why is it nil?

105
00:06:43.708 --> 00:06:45.062
Does anyone have like a guess?

106
00:06:47.139 --> 00:06:48.518
The zero value of an error is a nil.

107
00:06:50.298 --> 00:06:55.891
So we can use nil to satisfy the error
type constraint for our functions here.

108
00:06:55.891 --> 00:06:58.795
And you'll see this very commonly, right?

109
00:06:58.795 --> 00:07:03.141
If error does not equal to nil, we're
gonna write a ton of that, don't worry.

110
00:07:03.141 --> 00:07:05.540
But nil values are dangerous, but

111
00:07:05.540 --> 00:07:10.431
they're also useful in how you
wanna orchestrate your code, right?

112
00:07:10.431 --> 00:07:13.787
And references,
they also zero to a nil value.

113
00:07:13.787 --> 00:07:18.124
Which makes it contentiously maybe
easier to handle some logic, but

114
00:07:18.124 --> 00:07:22.978
also, again, if you try to run a method
on a nil, you're gonna get a panic and

115
00:07:22.978 --> 00:07:26.065
that's not something you can control,
right?

116
00:07:26.065 --> 00:07:29.581
In terms of if you can control a panic,
you can literally write, if you get

117
00:07:29.581 --> 00:07:33.465
an error, we have the option just running
panic and do whatever we want, right?

118
00:07:33.465 --> 00:07:35.636
Panic, no, this is really bad.

119
00:07:37.216 --> 00:07:37.772
We can do that.

120
00:07:37.772 --> 00:07:38.847
I don't want to.

121
00:07:38.847 --> 00:07:42.313
It seems I don't want to
panic mentor application,

122
00:07:42.313 --> 00:07:44.450
I can handle it a different way.

123
00:07:44.450 --> 00:07:47.466
I can just return to the caller,
okay, this is an error there you go,

124
00:07:47.466 --> 00:07:48.925
maybe fix something on your end.

