WEBVTT

1
00:00:00.007 --> 00:00:04.271
And next, we have this app,
this AWS CDK new app.

2
00:00:04.271 --> 00:00:06.243
And what is an app?

3
00:00:06.243 --> 00:00:08.901
What are we even declaring here?

4
00:00:08.901 --> 00:00:15.560
CDK has this very interesting
concept of constructs, all right?

5
00:00:15.560 --> 00:00:20.198
And the way I like to think
of CDK is like Lego pieces.

6
00:00:20.198 --> 00:00:22.569
You're gonna have bigger Lego pieces.

7
00:00:22.569 --> 00:00:24.208
They can put smaller Lego pieces and

8
00:00:24.208 --> 00:00:27.002
even smaller Lego pieces they
can put on those smaller ones.

9
00:00:27.002 --> 00:00:28.973
So it's like once you define something,

10
00:00:28.973 --> 00:00:32.635
you define something else that gets
attached to that higher level definition

11
00:00:32.635 --> 00:00:35.130
and smaller components that
get attached to those.

12
00:00:35.130 --> 00:00:39.949
Where I'm going with this is that app
acts as our kind of source of truth and

13
00:00:39.949 --> 00:00:43.075
the biggest first
construct implementation.

14
00:00:43.075 --> 00:00:47.678
That first Lego piece that we will
then bind all the other infrastructure

15
00:00:47.678 --> 00:00:50.471
to next to where
the application came from,

16
00:00:50.471 --> 00:00:54.711
where was this infrastructure deployed,
where did it come from?

17
00:00:54.711 --> 00:00:57.644
And so
that's what kind of app does for us.

18
00:00:57.644 --> 00:01:02.796
And then we will use app be passed
in to the next smaller component,

19
00:01:02.796 --> 00:01:05.473
which is a concept called stacks.

20
00:01:05.473 --> 00:01:11.130
And stacks, I'm gonna switch back to
the presentation here for just a second.

21
00:01:11.130 --> 00:01:18.493
Stacks are basically a collection of
individual infrastructure, all right?

22
00:01:18.493 --> 00:01:23.325
So you have a stack and that stack can
have many different components to it.

23
00:01:23.325 --> 00:01:25.897
An example that we're gonna write today,

24
00:01:25.897 --> 00:01:29.909
we're gonna have one stack with
three pieces of infrastructure.

25
00:01:29.909 --> 00:01:33.149
Three resources defined within that stack,

26
00:01:33.149 --> 00:01:37.847
which is AWS Lambda, AWS DynamoDB,
and the API Gateway, okay?

27
00:01:37.847 --> 00:01:41.791
So we're gonna piece those together
to find them to our stack and

28
00:01:41.791 --> 00:01:44.579
our stack is gonna bind
to our app construct.

29
00:01:44.579 --> 00:01:46.425
Again, think Lego pieces, okay,

30
00:01:46.425 --> 00:01:49.631
where the lowest level are these
individual resources here.

31
00:01:51.995 --> 00:01:55.685
In your application code, you have
multiple stacks, multiple resources,

32
00:01:55.685 --> 00:01:57.455
up to how you're gonna define them.

33
00:01:57.455 --> 00:02:02.429
We're gonna keep it into one stack, and
this can allow us to kind of organize

34
00:02:02.429 --> 00:02:05.707
our code in a bit more of
a constructed way, okay?

35
00:02:08.743 --> 00:02:13.717
So you go back, that is exactly what
this NewGoCdkStack function does.

36
00:02:13.717 --> 00:02:17.064
So I'm gonna jump into it,
even though it's defined right above.

37
00:02:17.064 --> 00:02:21.771
So here, we have this function,
and it's taking in arguments,

38
00:02:21.771 --> 00:02:26.477
it's taking in a scope,
which is a type of construct, an ID, and

39
00:02:26.477 --> 00:02:31.355
props, properties, which we will
then use to help us add different

40
00:02:31.355 --> 00:02:35.654
capabilities to our constructs,
different parameters.

41
00:02:35.654 --> 00:02:39.400
This could be anything from logging,
identity, environment variables,

42
00:02:39.400 --> 00:02:42.980
specific things like that,
that's where properties comes into play.

43
00:02:42.980 --> 00:02:46.756
But what I want you to really pay
attention to just right now is the first

44
00:02:46.756 --> 00:02:48.614
argument, the scope construct.

45
00:02:48.614 --> 00:02:50.976
Because when we call NewGoCdk,

46
00:02:50.976 --> 00:02:55.355
we are passing in our app into
this first argument, right?

47
00:02:55.355 --> 00:02:58.510
Again, so I'm just emphasizing
the point of Lego pieces.

48
00:02:58.510 --> 00:03:02.581
App gets passed in stacks,
gets attached to app, and

49
00:03:02.581 --> 00:03:08.294
stacks then gets attached, or
resources then get attached to our stacks.

50
00:03:08.294 --> 00:03:11.693
So if we dive a little deeper into this,
I'm gonna keep the example, and

51
00:03:11.693 --> 00:03:13.867
I hope you all didn't
delete the example too,

52
00:03:13.867 --> 00:03:16.403
cuz it's a really good one
to strengthen this point.

53
00:03:16.403 --> 00:03:20.528
But first, what we're basically doing
is constructing our properties, right?

54
00:03:20.528 --> 00:03:24.841
If our properties are not nil, we're gonna
instantiate our new properties and then

55
00:03:24.841 --> 00:03:29.297
we're gonna use those properties to define
our stack, right, this line right here.

56
00:03:29.297 --> 00:03:34.704
It looks very similar to the app
declaration we just saw right here, right?

57
00:03:34.704 --> 00:03:39.161
We have app is instantiated and
declared as new app,

58
00:03:39.161 --> 00:03:42.302
whereas if we scrolled right above,

59
00:03:42.302 --> 00:03:48.202
we have stack which is declared and
initialized as NewStack, okay?

60
00:03:48.202 --> 00:03:53.099
And this NewStack takes in
the scope which is our app id and

61
00:03:53.099 --> 00:03:56.883
the reference to those properties, okay?

62
00:03:56.883 --> 00:03:59.047
So far, that's okay, cool.

63
00:03:59.047 --> 00:04:05.389
And then this is really the core
piece that I wanna double down on.

64
00:04:05.389 --> 00:04:08.395
This is an example of resource.

65
00:04:08.395 --> 00:04:13.220
This CDK init app gave us an example
resource as a queuing system,

66
00:04:13.220 --> 00:04:17.885
this awssqs.NewQueue, and
this is an individual resource.

67
00:04:17.885 --> 00:04:22.320
This is just like the Lambda,
the DynamoDB, the API Gateway,

68
00:04:22.320 --> 00:04:25.004
which I shared in the previous slide.

69
00:04:25.004 --> 00:04:29.168
So if I just go, I know I'm
moving back and forth, so please.

70
00:04:29.168 --> 00:04:33.184
But think of the cue that we see in
this example as just being one of those

71
00:04:33.184 --> 00:04:35.170
inner weight rectangles, okay?

72
00:04:35.170 --> 00:04:40.038
And this inner weight rectangle
wouldn't be binded to our stack, okay?

73
00:04:40.038 --> 00:04:44.643
So if you go back, you can see
that if we were to uncommon this,

74
00:04:44.643 --> 00:04:49.084
you guys don't have to do this,
just kind of follow along.

75
00:04:49.084 --> 00:04:52.635
We have, and let's just,
import this just for a second,

76
00:04:52.635 --> 00:04:55.474
just we don't get our
compiler yelling at us.

77
00:04:55.474 --> 00:04:58.212
But we have this queue, and if you notice,

78
00:04:58.212 --> 00:05:02.945
this queue is taking in that stack
that we just defined, whoops, sorry,

79
00:05:05.555 --> 00:05:10.694
Okay, and if we dive deep into this queue,
if we just go into it,

80
00:05:10.694 --> 00:05:14.517
it's taking in the exact
same type signature.

81
00:05:14.517 --> 00:05:20.148
It's taking in this type
of constructs.Construct.

82
00:05:20.148 --> 00:05:23.332
Okay, so at the end of the day,
no matter what level you are,

83
00:05:23.332 --> 00:05:28.078
if you're at the app level, stack level,
resource level, we're always communicating

84
00:05:28.078 --> 00:05:31.842
with this concept of constructs,
this concept of Lego pieces, okay?

85
00:05:31.842 --> 00:05:36.173
And this resource is gonna be that lowest
level that accepts a construct that will

86
00:05:36.173 --> 00:05:36.945
then bind to.

87
00:05:39.559 --> 00:05:43.852
All right, and at the end of this
function, we return our stack.

88
00:05:43.852 --> 00:05:47.893
So we have now binded
a resource into a stack, and

89
00:05:47.893 --> 00:05:53.522
we've returned it back when we
call this NewGoCdkStack function.

90
00:05:53.522 --> 00:05:56.790
So we have it here, and
now we do app.Synth,

91
00:05:56.790 --> 00:06:00.667
because now we know that
we're gonna return a stack.

92
00:06:00.667 --> 00:06:06.470
Our app can synthesize that we have passed
down the app construct to a stack and

93
00:06:06.470 --> 00:06:11.467
we are then going to compile and
create what we need for AWS to read,

94
00:06:11.467 --> 00:06:16.488
hey, I need the following resources
defined inside of our stack.

95
00:06:20.921 --> 00:06:24.092
Initializing this, do you have to
manage ports and things like this or

96
00:06:24.092 --> 00:06:25.716
is that it's all abstracted away?

97
00:06:25.716 --> 00:06:28.045
You don't even have to manage any ports.

98
00:06:28.045 --> 00:06:33.065
Nothing's gonna be binding on your port
here, on your computer to the cloud.

99
00:06:33.065 --> 00:06:36.769
And the port management between
resources is done via CDK.

100
00:06:36.769 --> 00:06:42.043
There's some resources that you do
have to do some port manipulation.

101
00:06:42.043 --> 00:06:44.748
But for the most case,
CDK does abstract it for you and

102
00:06:44.748 --> 00:06:47.514
it kinda used the content of
more config and stuff, but

103
00:06:47.514 --> 00:06:50.784
that's still something that
you'd pass into the properties.

104
00:06:50.784 --> 00:06:53.412
Of okay,
I wanna actually run on this port or

105
00:06:53.412 --> 00:06:58.116
to something that's specific to my needs
that you can control with the props.

106
00:06:58.116 --> 00:07:00.160
Okay, and one last portion here.

107
00:07:00.160 --> 00:07:05.005
So this props isn't necessarily empty,
we're passing in this Env value.

108
00:07:05.005 --> 00:07:07.763
And Env value is this env function.

109
00:07:07.763 --> 00:07:12.583
If you go down, it's this really big
piece of commented out code, but

110
00:07:12.583 --> 00:07:16.191
if you really look at it,
it's just returning nil.

111
00:07:16.191 --> 00:07:20.994
Now, the reason why it's returning nil
is because it's using the default AWS

112
00:07:20.994 --> 00:07:24.803
account and region that you set
up when you run AWS configure.

113
00:07:24.803 --> 00:07:27.781
When you map your CDK,
it knows all of that kind of innately and

114
00:07:27.781 --> 00:07:29.225
use the default properties.

115
00:07:29.225 --> 00:07:30.889
But for whatever reason,

116
00:07:30.889 --> 00:07:36.332
let's say you want to deploy this stack to
a different account or a different region,

117
00:07:36.332 --> 00:07:40.576
this example shows exactly how you
can do that with the Following.

118
00:07:40.576 --> 00:07:46.190
You can just return an AWS CDK environment
and specify directly the account and

119
00:07:46.190 --> 00:07:50.199
the region or
any other kinda property you want, okay?

120
00:07:50.199 --> 00:07:53.999
So for our case,
we're gonna keep it as default

121
00:07:53.999 --> 00:07:58.186
just to kind of extract some
further kind of nuance.

122
00:07:58.186 --> 00:08:01.698
But that's something I do wanna
point out that that is how you can

123
00:08:01.698 --> 00:08:05.357
control the development and
the deployment of your application.

