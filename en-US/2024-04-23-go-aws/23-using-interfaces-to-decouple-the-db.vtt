WEBVTT

1
00:00:00.008 --> 00:00:04.572
Chapter 2,
it's a fun chapter in my opinion,

2
00:00:04.572 --> 00:00:10.629
because we start going away from
the infrastructure portion.

3
00:00:10.629 --> 00:00:13.989
We have this last piece of info that we're
gonna deploy, which is the API gateway.

4
00:00:13.989 --> 00:00:15.239
I'm explaining what that is.

5
00:00:15.239 --> 00:00:17.802
We also introduced an interface for
the first time.

6
00:00:17.802 --> 00:00:20.165
We wrote so much code,
we didn't even talk about interfaces.

7
00:00:20.165 --> 00:00:24.028
We're gonna show an interface,
we're going to hash the user passwords,

8
00:00:24.028 --> 00:00:26.558
and we're going to have
to do some refactoring.

9
00:00:26.558 --> 00:00:30.209
A lot of people are not gonna be happy
with that, but because we're introducing

10
00:00:30.209 --> 00:00:33.605
our API gateway, we're gonna have to
change the function that we wrote.

11
00:00:33.605 --> 00:00:36.296
So if you're excited, let's go.

12
00:00:36.296 --> 00:00:37.799
[LAUGH] All right, so

13
00:00:37.799 --> 00:00:42.406
the first thing I wanna do is
actually head to our database DB.

14
00:00:42.406 --> 00:00:45.640
This is a nice little
function we've got going on.

15
00:00:45.640 --> 00:00:48.425
We have some constants,
we have a bunch of cool stuff.

16
00:00:48.425 --> 00:00:52.700
And it revolves around our star,
which are our DynamoDBClient struct.

17
00:00:52.700 --> 00:00:55.966
But let me ask everyone here a question,

18
00:00:55.966 --> 00:00:59.622
what if one day we decide
not to use DynamoDB?

19
00:00:59.622 --> 00:01:00.687
Yeah, we don't.

20
00:01:00.687 --> 00:01:03.495
No, let's go back to Postgres, right?

21
00:01:03.495 --> 00:01:07.822
In our example here,
the implication isn't too bad, right?

22
00:01:07.822 --> 00:01:09.528
We can make a do, we can kind of fix it.

23
00:01:09.528 --> 00:01:14.061
However, where you have tightly
coupled logic with your

24
00:01:14.061 --> 00:01:17.844
table can cause some
real pain moving forward.

25
00:01:17.844 --> 00:01:22.389
And what I wanna introduce
here is an interface.

26
00:01:22.389 --> 00:01:28.323
And what an interface is,
is a collection of method signatures.

27
00:01:28.323 --> 00:01:29.633
That's all it is.

28
00:01:29.633 --> 00:01:32.993
It's a type that has functions defined.

29
00:01:32.993 --> 00:01:36.880
And those functions quite literally don't
do anything cuz you're just defining

30
00:01:36.880 --> 00:01:37.788
a function there.

31
00:01:37.788 --> 00:01:39.348
And why is this important?

32
00:01:39.348 --> 00:01:45.223
Well, this interface we are gonna use,
instead of our DynamoDB client,

33
00:01:45.223 --> 00:01:50.340
we're gonna pass it down and
we're not gonna no longer depend on

34
00:01:50.340 --> 00:01:55.300
our DynamoDB client to be passed
up from our API layer, okay?

35
00:01:55.300 --> 00:01:59.586
So I'm gonna show you what
this actually looks like.

36
00:01:59.586 --> 00:02:01.154
So right above our DynamoDB client.

37
00:02:01.154 --> 00:02:05.284
And one thing to note, you typically
wouldn't define your interface

38
00:02:05.284 --> 00:02:09.206
in the actual file that you're
gonna essentially abstract from.

39
00:02:09.206 --> 00:02:14.246
You define your interface where you're
gonna call the DB, but I'm putting it here

40
00:02:14.246 --> 00:02:19.142
just as an example to showcase the method
signatures with the defined methods and

41
00:02:19.142 --> 00:02:22.823
how we're no longer depending
on a direct DynamoDB client.

42
00:02:22.823 --> 00:02:27.574
So do type typically,
interfaces in Go they have very

43
00:02:27.574 --> 00:02:30.962
general names and are very specific.

44
00:02:30.962 --> 00:02:34.062
It's not like DynamoDB interface or
interface,

45
00:02:34.062 --> 00:02:38.432
they have to be very specific or
very general cuz that's what they do.

46
00:02:38.432 --> 00:02:42.421
They generalize the interacting with.

47
00:02:42.421 --> 00:02:47.064
So I'm gonna call this one user store cuz
what we're gonna be inserting into our

48
00:02:47.064 --> 00:02:48.043
user database.

49
00:02:48.043 --> 00:02:50.295
It's gonna be interface, okay?

50
00:02:50.295 --> 00:02:53.404
And like I said, this doesn't have fields.

51
00:02:53.404 --> 00:02:57.725
You don't put name string I should say or
anything like that.

52
00:02:57.725 --> 00:02:59.802
You actually define functions, and

53
00:02:59.802 --> 00:03:04.096
here in the UserStore we're gonna find
a function we should already using.

54
00:03:04.096 --> 00:03:11.113
So we have two functions in our client
now, we have DoesUserExist, okay?

55
00:03:11.113 --> 00:03:16.129
And the way we can define this is
if you go down here, DoesUserExist,

56
00:03:16.129 --> 00:03:20.816
takes in a username, string and
returns a Boolean and an error.

57
00:03:20.816 --> 00:03:25.639
So that's we're gonna right,
it's gonna be username, oops.

58
00:03:25.639 --> 00:03:27.352
Okay, guess it did not like that.

59
00:03:27.352 --> 00:03:31.719
DoesUserExist(username string), and

60
00:03:31.719 --> 00:03:37.061
it's gonna return bool and
error, and that's it.

61
00:03:37.061 --> 00:03:41.857
Next it's gonna be the second
function we have, InsertUser, okay?

62
00:03:41.857 --> 00:03:46.531
This InsertUser is going to be
user types.RegisterUser, and

63
00:03:46.531 --> 00:03:48.742
it's gonna return an error.

64
00:03:48.742 --> 00:03:49.713
And why is that?

65
00:03:49.713 --> 00:03:53.656
Well, that's actually what is
happening in the InsertUser function.

66
00:03:53.656 --> 00:03:58.131
Takes in a user of types RegisterUser,
and it returns an error.

67
00:04:00.643 --> 00:04:04.521
All right, so
this is what the interface is.

68
00:04:04.521 --> 00:04:08.537
To be honest, so far,
our interface hasn't done much.

69
00:04:08.537 --> 00:04:10.458
It's just a collection of methods.

70
00:04:10.458 --> 00:04:14.758
The logic still remains as is, we're not
gonna get any errors, not gonna to gain

71
00:04:14.758 --> 00:04:18.571
any compilation errors, nothing is
gonna go bad with this interface.

72
00:04:18.571 --> 00:04:22.941
But now the real magic
happens when we actually

73
00:04:22.941 --> 00:04:27.434
are expecting the type for
our database layer.

74
00:04:27.434 --> 00:04:35.047
So you can see here we're explicitly
saying this is gonna be a DynamoDB client.

75
00:04:35.047 --> 00:04:38.189
Let's remove that and just put UserStore.

76
00:04:38.189 --> 00:04:41.617
We're gonna get yelled
at in just a second.

77
00:04:41.617 --> 00:04:47.540
Wait for it but, if you go here,

78
00:04:47.540 --> 00:04:53.646
we change this to now a UserStore, okay?

79
00:04:53.646 --> 00:04:55.710
We basically now removed and

80
00:04:55.710 --> 00:05:01.474
decoupled our database from the rest of
our code cuz now we have this interface.

81
00:05:01.474 --> 00:05:02.285
So what does this mean?

82
00:05:02.285 --> 00:05:04.787
What does it truly mean
that we've done this?

83
00:05:04.787 --> 00:05:09.967
If we go to our database.go,
what I'm saying here is any struct,

84
00:05:09.967 --> 00:05:13.308
so now we have a specific DynamoDB client.

85
00:05:13.308 --> 00:05:17.011
But what if we create
a Postgres DB client and

86
00:05:17.011 --> 00:05:23.232
that Postgres DB client has a
DoesUserExist and an insert user function?

87
00:05:23.232 --> 00:05:29.152
If we do that and we go all the way
back to our app.go and we call it,

88
00:05:29.152 --> 00:05:34.978
we can pass that as the type to
satisfy the UserStore interface.

89
00:05:36.784 --> 00:05:41.213
Because look,
we are still calling DB on line 15.

90
00:05:41.213 --> 00:05:46.218
From new DB client, we are getting
a DB client as the return here,

91
00:05:46.218 --> 00:05:49.494
we're not getting a UserStore return, so

92
00:05:49.494 --> 00:05:55.335
when we're instantiating our DB,
it's explicitly returning this type.

93
00:05:55.335 --> 00:06:00.828
But the new API handler is
expecting a UserStore type,

94
00:06:00.828 --> 00:06:03.941
not the Dynamo DB client type.

95
00:06:03.941 --> 00:06:08.218
And the reason for
that is because the Dynamo DB client,

96
00:06:08.218 --> 00:06:14.685
the methods on that struct, are satisfying
the method signature of the interface.

97
00:06:14.685 --> 00:06:21.480
So now, in practical use case,
you can swap out your DB.

98
00:06:21.480 --> 00:06:25.818
And the only part you really
need to make the change

99
00:06:25.818 --> 00:06:30.473
besides the actual database.go
file is right here.

100
00:06:30.473 --> 00:06:34.026
Instead of calling NewDynamoDBClient,
you can call new Postgres client,

101
00:06:34.026 --> 00:06:35.087
whatever DB you want.

102
00:06:35.087 --> 00:06:38.328
If it satisfies the interface,
your business logic,

103
00:06:38.328 --> 00:06:40.163
your API logic stays the same.

104
00:06:40.163 --> 00:06:43.678
So I think that's really cool [LAUGH]
I think it's super powerful thing.

105
00:06:43.678 --> 00:06:45.768
This is called like
decoupling our database.

106
00:06:45.768 --> 00:06:48.278
And it gives us more kind of flexibility.

107
00:06:48.278 --> 00:06:53.259
And this is why organizing your code in
Go has a lot of like merit to it because

108
00:06:53.259 --> 00:06:56.345
you can start using things
like interfaces and

109
00:06:56.345 --> 00:07:01.507
start throwing around different ways
to pass things down into your structs.

110
00:07:01.507 --> 00:07:04.530
Any questions on interfaces
on what we just did?

111
00:07:07.123 --> 00:07:12.458
&gt;&gt; So it's structural typing
versus nominals typing,

112
00:07:12.458 --> 00:07:18.385
where the names in TypeScript
if the names don't match up,

113
00:07:18.385 --> 00:07:22.672
even though the objects are the same
&gt;&gt; Yeah.

114
00:07:22.672 --> 00:07:28.126
&gt;&gt; You get an error but and go if
the objects look the same, they satisfy

115
00:07:28.126 --> 00:07:32.569
&gt;&gt; No so great point.

116
00:07:32.569 --> 00:07:35.907
If, let's say our interface here, right?

117
00:07:35.907 --> 00:07:37.640
Well, we only care about the types.

118
00:07:37.640 --> 00:07:40.212
So we can change this username to
be whatever you whatever we want.

119
00:07:40.212 --> 00:07:44.966
But if we change this to an int, okay,
our interface is gonna be good, but

120
00:07:44.966 --> 00:07:48.205
look at all the red that
just happened on our code.

121
00:07:48.205 --> 00:07:54.037
And the reason for this, if we go back
down to app, we're getting this error.

122
00:07:54.037 --> 00:07:59.060
Does user exist has,
we have a string returns bool error,

123
00:07:59.060 --> 00:08:03.275
but we want is an integer in a bool error,
right?

124
00:08:03.275 --> 00:08:07.537
So the type is really what is
constraining the binding of

125
00:08:07.537 --> 00:08:11.534
a struct definition to
the interface expectation.

126
00:08:11.534 --> 00:08:14.129
And the name of the function also matters,
so

127
00:08:14.129 --> 00:08:16.872
the name of the function
does matter actually.

128
00:08:16.872 --> 00:08:20.468
Because you can have another function
that's exactly the same, but

129
00:08:20.468 --> 00:08:24.872
if it's not called DoesUserExist, and
like DoesUserExists with a plural or typo.

130
00:08:24.872 --> 00:08:27.865
You're gonna get the same error that you
cannot satisfy the constraint of this

131
00:08:27.865 --> 00:08:28.690
method of this type.

132
00:08:32.077 --> 00:08:36.044
Cool, let's make sure we
go back to a string here.

133
00:08:36.044 --> 00:08:38.579
So those are kind of interfaces
in a more practical sense.

134
00:08:38.579 --> 00:08:41.558
There's a lot more use case of interfaces,
a lot more.

135
00:08:41.558 --> 00:08:44.669
You can have a naked interface which
is kind of the any type equivalent.

136
00:08:44.669 --> 00:08:49.819
So if you come from Typescript and you
have the any type, the naked interface, so

137
00:08:49.819 --> 00:08:54.899
it's basically just interface like this
is considered the naked interface and

138
00:08:54.899 --> 00:08:57.208
you can pass any parameter in here.

139
00:08:57.208 --> 00:08:59.152
You can pass any type in here.

140
00:08:59.152 --> 00:09:00.787
Don't satisfy that.

141
00:09:00.787 --> 00:09:03.811
Because the underlying data
structure on the majority,

142
00:09:03.811 --> 00:09:05.957
if not all things in Go is the interface.

