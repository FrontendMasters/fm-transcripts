WEBVTT

1
00:00:00.304 --> 00:00:04.250
So here, I already have
everything kind of going for us,

2
00:00:04.250 --> 00:00:08.048
we already have the underlying,
that's not we want.

3
00:00:08.048 --> 00:00:12.805
The underlying function for us to
actually communicate with our DB layer so

4
00:00:12.805 --> 00:00:15.760
we can kind of go through
this pretty quickly.

5
00:00:15.760 --> 00:00:17.219
I'm gonna do a login user.

6
00:00:17.219 --> 00:00:21.242
This again is going to take the request

7
00:00:21.242 --> 00:00:26.906
events.APIGatewayProxyRequest, where
are you?

8
00:00:26.906 --> 00:00:32.046
ProxyRequest, it's going to return

9
00:00:32.046 --> 00:00:40.084
events.APIGatewayProxyResponse and
our error, okay?

10
00:00:40.084 --> 00:00:44.406
And over here, we're gonna basically
create a new struct to handle requests.

11
00:00:44.406 --> 00:00:47.129
This is gonna look exactly like
the register user request,

12
00:00:47.129 --> 00:00:49.207
it's gonna have the username and password.

13
00:00:49.207 --> 00:00:51.653
We could refactor that as well.

14
00:00:51.653 --> 00:00:54.532
Because it's already
been x amount of time,

15
00:00:54.532 --> 00:00:58.332
I'm gonna take the lazy way and
just do type LoginRequest.

16
00:00:58.332 --> 00:01:00.126
Okay, it's gonna be a struct.

17
00:01:00.126 --> 00:01:04.173
I'm gonna put here username,
it's gonna be a string,

18
00:01:04.173 --> 00:01:08.746
json: "username", exact same thing,
and then password.

19
00:01:08.746 --> 00:01:13.590
It's gonna be a string,
json: "password", okay?

20
00:01:13.590 --> 00:01:17.498
And we're gonna use this struct
only when we get LoginRequests.

21
00:01:17.498 --> 00:01:20.267
We can do var loginRequest.

22
00:01:20.267 --> 00:01:22.972
There's gonna be a typed LoginRequest.

23
00:01:22.972 --> 00:01:29.002
And now we're gonna unmarshal the request
field we get when this method is invoked.

24
00:01:29.002 --> 00:01:36.362
So what we can do is error is
going to be json.Unmarshal.

25
00:01:36.362 --> 00:01:41.557
Okay, I'm gonna take in that
slice of bytes from request.body,

26
00:01:41.557 --> 00:01:45.916
and we're gonna pass in
the reference to our log in under

27
00:01:45.916 --> 00:01:50.676
the initialized variable here,
a loginRequest variable.

28
00:01:50.676 --> 00:01:55.353
And if the error does not equal to no,
we're gonna do return

29
00:01:57.682 --> 00:02:01.236
Events.APIGatewayProxyResponse.

30
00:02:01.236 --> 00:02:05.297
The body of this could
just say Invalid request.

31
00:02:05.297 --> 00:02:12.294
Status code is gonna be
http.StatusBadRequest, okay?

32
00:02:12.294 --> 00:02:14.706
Return that error as well.

33
00:02:14.706 --> 00:02:19.128
And then here, we basically need to check,
does this user exist?

34
00:02:19.128 --> 00:02:24.095
And then check, does it match our
password, our store password here?

35
00:02:24.095 --> 00:02:28.762
Okay, so here we're gonna user and

36
00:02:28.762 --> 00:02:35.153
our error are going to
be from our api.dbstore.

37
00:02:35.153 --> 00:02:41.522
Db .get

38
00:02:44.341 --> 00:02:46.536
User.

39
00:02:46.536 --> 00:02:48.582
&gt;&gt; Isn't that on the interface?

40
00:02:48.582 --> 00:02:52.223
&gt;&gt; It's not an interface, it is not
an interface, yeah, you're right.

41
00:02:55.056 --> 00:02:58.482
Yep, nice.

42
00:02:58.482 --> 00:03:02.430
GetUser, so this GetUser as
we kind of find it earlier,

43
00:03:02.430 --> 00:03:07.568
username is going to be a string and
it's gonna return our types.User.

44
00:03:07.568 --> 00:03:10.083
Thank you for that.

45
00:03:10.083 --> 00:03:14.368
Okay, I'm gonna get a bunch of complaints,
why is that?

46
00:03:14.368 --> 00:03:16.275
Cuz GetUser returns a typeUser and
an error.

47
00:03:16.275 --> 00:03:17.277
Okay, cool.

48
00:03:21.956 --> 00:03:27.422
Types.User and

49
00:03:27.422 --> 00:03:30.938
an error.

50
00:03:30.938 --> 00:03:31.763
Okay, cool.

51
00:03:31.763 --> 00:03:35.005
All those errors went away,
so let's go back here.

52
00:03:35.005 --> 00:03:39.041
Let's just kind of get completion for
us, dot.

53
00:03:39.041 --> 00:03:40.058
Hey, there it is.

54
00:03:40.058 --> 00:03:43.964
GetUser, let's go add in pass
in on loginRequest.Username.

55
00:03:43.964 --> 00:03:47.058
If error does not equal to nil,

56
00:03:47.058 --> 00:03:52.175
what we can do here is just
return exact same thing,

57
00:03:52.175 --> 00:03:59.911
event.APIGatewayProxyResponse, it's
gonna be Internal server error.

58
00:04:02.030 --> 00:04:03.279
I could spell that right.

59
00:04:04.943 --> 00:04:12.418
Okay, and then the StatusCode is
going to be http.InternalServerError.

60
00:04:12.418 --> 00:04:14.723
All right, so now we have our user.

61
00:04:14.723 --> 00:04:18.954
The one thing we have to do is validate
the password we're getting from our plain

62
00:04:18.954 --> 00:04:22.633
text password matches the password
that's stored in our database.

63
00:04:22.633 --> 00:04:27.080
So here we can do types.ValidatePassword,
and remember the order here matters.

64
00:04:27.080 --> 00:04:32.867
So the user.PasswordHash,
loginRequest.Password.

65
00:04:32.867 --> 00:04:34.842
Users what we got from our database,

66
00:04:34.842 --> 00:04:37.913
loginRequest what we're
getting from the user, okay?

67
00:04:37.913 --> 00:04:43.915
And we're basically saying if this
is false, so if they do not match or

68
00:04:43.915 --> 00:04:49.816
if there is an error, I'm gonna
return in events API body response,

69
00:04:49.816 --> 00:04:53.812
and I'm gonna say Invalid
user credentials.

70
00:04:53.812 --> 00:05:01.192
The status is going to be, let's see.

71
00:05:01.192 --> 00:05:05.408
The status is going to be http,
I guess we just do bad request.

72
00:05:05.408 --> 00:05:09.232
StatusBadRequest, okay, nil.

73
00:05:09.232 --> 00:05:10.929
And here, we need to add if.

74
00:05:14.941 --> 00:05:18.780
Okay, so if this is false,
we're going to return this.

75
00:05:18.780 --> 00:05:22.430
Otherwise, we know that we
have a successful login, so

76
00:05:22.430 --> 00:05:25.703
we can do our hyperpath
event APIProxyResponse.

77
00:05:25.703 --> 00:05:33.003
Okay, we can go
Body: Successfully logged in.

78
00:05:33.003 --> 00:05:36.025
That's code http.StatusOK.

79
00:05:39.730 --> 00:05:41.270
Okay, and this could be nil.

80
00:05:43.873 --> 00:05:44.625
And this is it.

81
00:05:44.625 --> 00:05:50.847
And all we have to do now is just create
a new register case for score /login.

82
00:05:50.847 --> 00:05:54.813
Our API handler just has to do LoginUser.

83
00:05:58.800 --> 00:06:03.057
So that was a lot in this chapter,
I know it's pretty heavy duty.

84
00:06:03.057 --> 00:06:05.122
Again, this is kind of why
we have that code available.

85
00:06:05.122 --> 00:06:08.578
So if you didn't catch up, just hopefully,
when I was talking to the code,

86
00:06:08.578 --> 00:06:11.501
it was making sense, looked at
some of the things we were doing.

87
00:06:11.501 --> 00:06:15.901
But yeah, essentially, what we've done, we
have a router that slapped on our lambda,

88
00:06:15.901 --> 00:06:17.264
we're going to deploy it.

89
00:06:17.264 --> 00:06:19.850
And now we have different routes
to handle different calls.

90
00:06:19.850 --> 00:06:22.454
So a registered call or a login call.

91
00:06:24.321 --> 00:06:30.975
You can go make, build, Go back up,
we can do our cdk diff.

92
00:06:30.975 --> 00:06:31.573
Cool.

93
00:06:31.573 --> 00:06:35.480
As you can see here, obviously we're gonna
have a bunch of different methods and

94
00:06:35.480 --> 00:06:36.005
changes.

95
00:06:36.005 --> 00:06:40.266
We're adding a bunch of permissions to our
gateway, and let's go ahead and rock and

96
00:06:40.266 --> 00:06:41.595
roll with the cdk deploy.

97
00:06:41.595 --> 00:06:42.440
Cool.

