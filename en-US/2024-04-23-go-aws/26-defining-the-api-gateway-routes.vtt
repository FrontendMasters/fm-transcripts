WEBVTT

1
00:00:00.280 --> 00:00:03.722
Let's go ahead and first define this
infrastructure, and this is gonna be kinda

2
00:00:03.722 --> 00:00:08.020
the last piece of info we're gonna find
here together right now in this workshop.

3
00:00:08.020 --> 00:00:12.349
So like I always like to do, let's
just grab this, instead of AWS Lambda,

4
00:00:12.349 --> 00:00:14.228
it's gonna be awsapigateway.

5
00:00:14.228 --> 00:00:16.921
All right, cool.

6
00:00:16.921 --> 00:00:18.520
Scroll all the way down.

7
00:00:18.520 --> 00:00:21.281
We can put it above the, you know what,

8
00:00:21.281 --> 00:00:24.650
let's put it below
the GrantReadWrite table.

9
00:00:24.650 --> 00:00:26.922
It doesn't really matter, but
let's just put it below just for

10
00:00:26.922 --> 00:00:28.233
keeping things consistent.

11
00:00:28.233 --> 00:00:30.279
We're gonna define API.

12
00:00:30.279 --> 00:00:34.770
We're gonna do awsapigateway.NewRestApi.

13
00:00:34.770 --> 00:00:36.509
You can see how many different
resources available.

14
00:00:36.509 --> 00:00:38.146
We're gonna do a NewRestApi.

15
00:00:38.146 --> 00:00:40.647
We're gonna pass in our stack,
the main Lego piece.

16
00:00:40.647 --> 00:00:42.580
Hope you all didn't forget that.

17
00:00:42.580 --> 00:00:47.416
I'm gonna do jsii.String,
give it some sort

18
00:00:47.416 --> 00:00:52.253
of identity you want, myAPIGateway, okay?

19
00:00:52.253 --> 00:00:56.480
So that's fine, and then obviously
we need the specific resource props.

20
00:00:56.480 --> 00:01:00.475
I'm gonna do awsgateway.RestApiProps.

21
00:01:07.025 --> 00:01:11.674
And if we dive into this, so
this is where it kind of,

22
00:01:11.674 --> 00:01:17.703
I don't wanna say it gets more
complicated cuz it really doesn't,

23
00:01:17.703 --> 00:01:22.462
but it just introduces a new
aspect of web security and

24
00:01:22.462 --> 00:01:26.864
calling and CORS options and all of that.

25
00:01:26.864 --> 00:01:31.126
So this is where it kinda dances
around that, but these props, again,

26
00:01:31.126 --> 00:01:36.029
I always wanna be consistent and say, if
you are confused or don't know what props

27
00:01:36.029 --> 00:01:40.815
to put, obviously these resources
are good, but also there's the docs here.

28
00:01:40.815 --> 00:01:42.948
So everything that we've
kinda gone through,

29
00:01:42.948 --> 00:01:45.520
I have a link to it here
that I've kinda reserved.

30
00:01:45.520 --> 00:01:48.320
This would probably be available
like in the repo or whatever.

31
00:01:48.320 --> 00:01:51.564
But for example,
this is the AWS Lambda Construct,

32
00:01:51.564 --> 00:01:56.151
we can see those same properties that
we use, the runtime handling code.

33
00:01:56.151 --> 00:01:57.320
Question?

34
00:01:57.320 --> 00:02:00.000
&gt;&gt; Is the API Gateway
considered a reverse proxy?

35
00:02:00.000 --> 00:02:03.302
&gt;&gt; It can be a reverse proxy,
it can be but

36
00:02:03.302 --> 00:02:09.406
we actually are gonna be using it as
a proxy here for our backend logic.

37
00:02:09.406 --> 00:02:12.402
So there's different ways you
can configure your API gateway.

38
00:02:12.402 --> 00:02:14.801
You can just make it basically
route things, and that's it.

39
00:02:14.801 --> 00:02:18.178
But it can also act as a proxy for
incoming requests and

40
00:02:18.178 --> 00:02:20.513
outputting your responses as well.

41
00:02:22.884 --> 00:02:23.425
Cool, and

42
00:02:23.425 --> 00:02:27.464
this API gateway is gonna kinda shift
the way we start testing our deployments.

43
00:02:27.464 --> 00:02:31.288
And I'll show why we're gonna
actually have a different style.

44
00:02:31.288 --> 00:02:37.072
But with all that being said,
let's kinda go into this REST API props.

45
00:02:37.072 --> 00:02:41.760
And there's a lot that we may
want to look at but I think for

46
00:02:41.760 --> 00:02:45.340
right now, let's keep it kinda simple.

47
00:02:45.340 --> 00:02:47.270
Kinda keep it at a level that we want.

48
00:02:47.270 --> 00:02:50.090
So the very first one that's
actually very important is

49
00:02:50.090 --> 00:02:52.420
the DefaultCorsPreflightOptions.

50
00:02:52.420 --> 00:02:58.796
If you've ever faced and dealt with CORS,
you know how it's a pain.

51
00:02:58.796 --> 00:03:03.280
Cross origin resource sharing,
I think that's what CORS stands for.

52
00:03:03.280 --> 00:03:05.288
Yeah, yeah, yeah, why not?

53
00:03:05.288 --> 00:03:09.739
Again, I don't wanna act like an expert,
I'm not in this field whatsoever, but

54
00:03:09.739 --> 00:03:13.932
basically from my understanding,
it's the way to how different browsers or

55
00:03:13.932 --> 00:03:16.787
different domains speak with one another,
right?

56
00:03:16.787 --> 00:03:20.786
So a very, very basic example I
can think of, let's say we have

57
00:03:20.786 --> 00:03:25.554
our frontend deployed into Next JSF and
it's hosted on a specific domain.

58
00:03:25.554 --> 00:03:29.040
If that frontend application
can talk to your backend,

59
00:03:29.040 --> 00:03:31.866
which is also separately deployed, right?

60
00:03:31.866 --> 00:03:34.235
If you have this kinda
separation of concerns, and

61
00:03:34.235 --> 00:03:37.982
not everything is defined in Next, the
communication between your frontend and

62
00:03:37.982 --> 00:03:40.478
your backend,
both of them deployed individually.

63
00:03:40.478 --> 00:03:43.135
The connection between them is CORS, or

64
00:03:43.135 --> 00:03:46.270
CORS regulates how they
can talk to each other.

65
00:03:46.270 --> 00:03:51.187
It's a pain, please,
I don't wanna get into CORS here, but

66
00:03:51.187 --> 00:03:56.713
let's go and head and
populate our props here, our struck.

67
00:03:56.713 --> 00:03:58.012
So we're gonna have AllowHeaders.

68
00:03:58.012 --> 00:04:01.812
Now, this important field,
one thing to know, this is JI strings,

69
00:04:01.812 --> 00:04:07.044
because this is basically gonna be a list
of strings, not just an individual string.

70
00:04:07.044 --> 00:04:09.988
And this is gonna basically say,
for incoming requests,

71
00:04:09.988 --> 00:04:13.064
do you have the header I expect,
we're only gonna have two.

72
00:04:13.064 --> 00:04:16.636
The first one is the most classic,
the content type, and

73
00:04:16.636 --> 00:04:20.144
that's typically gonna be
application JSON, right?

74
00:04:20.144 --> 00:04:22.980
If you make a request, you're gonna
have to put this head off as JSON.

75
00:04:22.980 --> 00:04:24.723
And second one is authorization.

76
00:04:27.993 --> 00:04:30.984
Okay, we're not gonna use
authorization just yet.

77
00:04:30.984 --> 00:04:34.440
But remember that access code badge
thing I mentioned way way long ago,

78
00:04:34.440 --> 00:04:36.954
that's what's gonna come into play.

79
00:04:36.954 --> 00:04:40.280
So now we have this AllowHeaders,
the next one is gonna be AllowMethods.

80
00:04:40.280 --> 00:04:43.462
It's gonna be the same thing,
jsii.Strings,

81
00:04:43.462 --> 00:04:47.630
and this is what methods are we
gonna allow request to call.

82
00:04:47.630 --> 00:04:51.555
Can you post, can you get, can you put,
can you delete, the options,

83
00:04:51.555 --> 00:04:53.668
all of that is what we can define here.

84
00:04:53.668 --> 00:04:56.563
I'm just gonna make them all even
though we're only gonna be using two,

85
00:04:56.563 --> 00:04:57.760
so go ahead and do that.

86
00:04:57.760 --> 00:05:04.681
Get, post, delete, put, and options.

87
00:05:07.250 --> 00:05:12.755
Cool, okay, and
the most dreaded one of them all,

88
00:05:12.755 --> 00:05:20.493
the final boss, Is this AllowOrigins.

89
00:05:21.634 --> 00:05:28.054
If you've seen that error message on your
computer, it's like CORS preflight option.

90
00:05:28.054 --> 00:05:31.444
This is this origin kind of source.

91
00:05:31.444 --> 00:05:36.579
I'm just gonna keep it 100 with you all,
we're gonna do a wild card, all right?

92
00:05:36.579 --> 00:05:40.184
We're not gonna open that
Pandora's box just yet.

93
00:05:40.184 --> 00:05:42.420
So we're gonna do AllowOrigins
as just everything coming in.

94
00:05:42.420 --> 00:05:45.520
Again, it's all gonna be controlled, and
nothing's gonna be too public-facing, so

95
00:05:45.520 --> 00:05:46.818
there's not really a concern here.

96
00:05:46.818 --> 00:05:53.384
And we'll tear all this down at
the end of this workshop, okay?

97
00:05:53.384 --> 00:05:55.279
Really, this is all you need.

98
00:05:55.279 --> 00:05:58.757
At a super, super high level,
this is all you need, and

99
00:05:58.757 --> 00:06:01.434
then this gets slapped onto your backend.

100
00:06:01.434 --> 00:06:05.464
And I'm gonna show you how this is done,
but you can do a few other things.

101
00:06:05.464 --> 00:06:07.862
One is, I personally deploy options, and

102
00:06:07.862 --> 00:06:11.754
the only property I like to
deploy options is logging.

103
00:06:11.754 --> 00:06:16.413
Because again, if you don't have the right
preflight options, if your CORS are not

104
00:06:16.413 --> 00:06:20.160
set correctly, you wanna have
a good way to log all that info.

105
00:06:20.160 --> 00:06:25.110
So we can do awsapi StageOptions and
then just put LoggingLevel,

106
00:06:25.110 --> 00:06:29.078
and it's gonna be
AWS MethodLoggingLevel_INFO.

107
00:06:38.611 --> 00:06:39.756
Cool.

108
00:06:41.252 --> 00:06:48.640
All right, now in this snapshot of time,
if we deploy this, nothing's gonna change.

109
00:06:48.640 --> 00:06:52.091
Cuz again,
remember the same thing with the table,

110
00:06:52.091 --> 00:06:54.293
it all comes down to Lego pieces.

111
00:06:54.293 --> 00:06:57.738
The table needs to know that
our lambda can invoke it.

112
00:06:57.738 --> 00:07:02.204
Just like our API gateway needs to
know where it's gonna send request to,

113
00:07:02.204 --> 00:07:04.219
and that's the lambda.

114
00:07:04.219 --> 00:07:06.443
So we're gonna have to
integrate those two together.

115
00:07:06.443 --> 00:07:11.422
So all at the bottom here, we're going to

116
00:07:11.422 --> 00:07:16.696
create a new variable integration, okay?

117
00:07:16.696 --> 00:07:20.665
And it's gonna be basically awsapigateway,

118
00:07:20.665 --> 00:07:24.743
I'm gonna put NewLambdaIntegration, okay?

119
00:07:24.743 --> 00:07:26.557
Cuz sometimes your backend isn't a lambda.

120
00:07:26.557 --> 00:07:28.484
Sometimes it could just be something else.

121
00:07:28.484 --> 00:07:30.664
So we're gonna do a new
lambda integration.

122
00:07:30.664 --> 00:07:33.543
And the first thing that we're gonna
pass it in is this myFunction.

123
00:07:40.884 --> 00:07:43.749
And right now, again,
it's not doing anything.

124
00:07:43.749 --> 00:07:45.914
It's just a variable,
it still has no binding back.

125
00:07:45.914 --> 00:07:50.118
If you look at this, this has no
interaction with line relative 11,

126
00:07:50.118 --> 00:07:53.054
where we have that API unused variable,
right?

127
00:07:53.054 --> 00:07:57.139
So still, we truly haven't done anything,
we just declared a new integration.

128
00:07:57.139 --> 00:07:59.911
But now,
what I wanna do is define the routes,

129
00:07:59.911 --> 00:08:02.978
and this is where
the integration comes into play.

130
00:08:04.338 --> 00:08:07.406
So we're gonna do a registerResource.

131
00:08:08.912 --> 00:08:10.177
The registerResource is fine.

132
00:08:10.177 --> 00:08:13.098
I was gonna do registerRoute but
it is what it is.

133
00:08:13.098 --> 00:08:16.878
Then we'll do API, which is
the gateway that we were defining.

134
00:08:16.878 --> 00:08:19.366
We're gonna do route, okay?

135
00:08:19.366 --> 00:08:24.539
And here we're gonna add a resource,
AddResource.

136
00:08:24.539 --> 00:08:29.146
And the first parameter into
this AddResource is the path for

137
00:08:29.146 --> 00:08:31.865
the invocation from the requests.

138
00:08:31.865 --> 00:08:35.905
So this defines local hosts,
let's say 3000/register.

139
00:08:35.905 --> 00:08:38.178
This is where that /register
part gets defined.

140
00:08:39.558 --> 00:08:43.353
So we're gonna do,
I almost got caught with that,

141
00:08:43.353 --> 00:08:46.814
jsii.String, and you put register, okay?

142
00:08:46.814 --> 00:08:48.583
We're gonna no additional parameters.

143
00:08:48.583 --> 00:08:52.330
And again, you can put the wildcard or

144
00:08:52.330 --> 00:08:57.968
something like register/id,
you can do this, right?

145
00:08:57.968 --> 00:09:00.290
And then parse that ID from the request.

146
00:09:00.290 --> 00:09:02.421
There's no need for us to do it here, but

147
00:09:02.421 --> 00:09:06.648
that's just how you would go about doing
it if that's something you need to do.

148
00:09:09.089 --> 00:09:13.757
Cool, now, we'll do registerResource and
we're gonna do AddMethod.

149
00:09:13.757 --> 00:09:16.746
And this basically defines, okay,
what method, is this a GET method,

150
00:09:16.746 --> 00:09:19.273
is it a POST method,
could be both, could be a ton.

151
00:09:19.273 --> 00:09:22.237
We're in jsii.String and
this is gonna be a POST.

152
00:09:22.237 --> 00:09:25.777
And now this is where
you pass in integration.

153
00:09:31.234 --> 00:09:32.687
So now we've completed that loop.

154
00:09:33.807 --> 00:09:35.774
Now we have the API gateway.

155
00:09:35.774 --> 00:09:39.598
We have this integration between
API gateway, knowing hey,

156
00:09:39.598 --> 00:09:41.886
this can be new lambda integration.

157
00:09:41.886 --> 00:09:44.974
AWS is gonna do some magic
behind the scenes for us.

158
00:09:44.974 --> 00:09:49.369
And then we're registering a route,
which is /register,

159
00:09:49.369 --> 00:09:53.430
to the integration,
to that lambda to gateway bridge.

160
00:09:56.801 --> 00:10:01.772
Cool, while we're here, we're gonna
actually make the next route, so

161
00:10:01.772 --> 00:10:04.989
you can go ahead and
just copy this and paste it.

162
00:10:04.989 --> 00:10:08.654
And instead of registerResource,
let's do loginResource,

163
00:10:08.654 --> 00:10:11.013
everything else is gonna stay the same.

164
00:10:11.013 --> 00:10:13.360
Instead of register, I'm gonna put login.

165
00:10:13.360 --> 00:10:18.049
It's still gonna be a POST, and
again just make sure that it's login here.

166
00:10:23.930 --> 00:10:29.453
Cool, any questions on this?

167
00:10:29.453 --> 00:10:30.430
Any questions at all?

168
00:10:32.500 --> 00:10:33.723
Yes.

169
00:10:33.723 --> 00:10:37.823
&gt;&gt; I mean, this is all preference.

170
00:10:37.823 --> 00:10:40.084
So this function is getting pretty big.

171
00:10:40.084 --> 00:10:43.518
Is it common to break these out into
smaller functions to set up your API,

172
00:10:43.518 --> 00:10:46.180
this function set up your,
whatever, this function?

173
00:10:46.180 --> 00:10:47.986
&gt;&gt; You're talking about the stack
definition here, right?

174
00:10:47.986 --> 00:10:48.663
&gt;&gt; Yeah.

175
00:10:48.663 --> 00:10:54.225
&gt;&gt; So truthfully, stacked functions
are pretty long because they are pretty

176
00:10:54.225 --> 00:10:59.690
much constructed as is where you
have everything kind of defined.

177
00:10:59.690 --> 00:11:04.326
The layer of abstraction that's kind
of been implemented, because, I agree,

178
00:11:04.326 --> 00:11:08.757
it's kind of getting gnarly, is you
could separate and have almost your just

179
00:11:08.757 --> 00:11:12.869
internal library where you define
snippets of the construct, right?

180
00:11:12.869 --> 00:11:15.906
So you know how we're
defining the lambda fully?

181
00:11:15.906 --> 00:11:19.710
You can actually have a construct
that's just the lambda definition and

182
00:11:19.710 --> 00:11:22.836
then bring that in into
your stack definition.

183
00:11:22.836 --> 00:11:27.803
So there is a layer of
abstracting it if you want,

184
00:11:27.803 --> 00:11:31.681
but typically, again preference but

185
00:11:31.681 --> 00:11:36.792
you do see pretty crazy
stack functions defined.

186
00:11:36.792 --> 00:11:38.776
Yes, question.

187
00:11:38.776 --> 00:11:42.095
&gt;&gt; And
thanks to all cliffs in the chat for

188
00:11:42.095 --> 00:11:45.736
integration as a typo in your code there.

189
00:11:48.916 --> 00:11:50.138
&gt;&gt; It does.

190
00:11:50.138 --> 00:11:52.318
Integrate, yes, nice.

191
00:11:52.318 --> 00:11:54.242
I also can't spell.

192
00:11:56.679 --> 00:11:58.230
Is that how you spell integration?

193
00:11:58.230 --> 00:12:00.287
Okay, [LAUGH] sweet.

