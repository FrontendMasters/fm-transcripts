WEBVTT

1
00:00:00.000 --> 00:00:03.071
Yeah, let's kinda go back
into our database layer and

2
00:00:03.071 --> 00:00:05.425
create our functions to register a user.

3
00:00:05.425 --> 00:00:10.184
So when I think of registering a user,
there's really two main functions that I

4
00:00:10.184 --> 00:00:13.248
think makes sense,
maybe you agree with it or not.

5
00:00:13.248 --> 00:00:18.280
But essentially first is,
does this user exists, right?

6
00:00:18.280 --> 00:00:21.826
If we have a bunch of values in our db and
we wanna insert a new one,

7
00:00:21.826 --> 00:00:25.967
we wanna make sure that it's new,
it's unique, it doesn't constrain or

8
00:00:25.967 --> 00:00:29.214
conflict with a primary key
that we've created earlier.

9
00:00:29.214 --> 00:00:36.135
And then the second one is,
how do I insert a new record,

10
00:00:36.135 --> 00:00:40.125
essentially, into DynamoDB?

11
00:00:40.125 --> 00:00:46.084
Okay, and to help explain this, especially
the first part where we're first checking

12
00:00:46.084 --> 00:00:51.235
if this user exists, I find it really
useful to look at the documentation for

13
00:00:51.235 --> 00:00:54.635
getting item from a DynamoDB
table using AWS SDK.

14
00:00:54.635 --> 00:00:59.479
And you can see here, SDK is supported
by a bunch of different languages,

15
00:00:59.479 --> 00:01:03.620
Go, Colin, Javascript,
Swift is in there, but basically,

16
00:01:03.620 --> 00:01:07.710
this is the TLDR of how you can
retrieve a value from DynamoDB.

17
00:01:07.710 --> 00:01:12.170
You have this struct, it contains our
client, very similar to what we have.

18
00:01:12.170 --> 00:01:17.278
We have a struct, it interacts
directly with our DynamoDBClient,

19
00:01:17.278 --> 00:01:22.937
and then it has this notion of retrieving
the item by calling our dbClient.

20
00:01:22.937 --> 00:01:26.578
And then, putting all that into
a reference of get item input,

21
00:01:26.578 --> 00:01:29.683
where we're calling it by the key and
the table name.

22
00:01:29.683 --> 00:01:33.301
And that key is primary key constraint,
when you insert a value, it's that really,

23
00:01:33.301 --> 00:01:36.518
really important actual structure thing
that we need to identify of records

24
00:01:36.518 --> 00:01:37.939
are being inserted into Dynamo.

25
00:01:40.723 --> 00:01:45.678
And there's different properties here of
how they choose to put the table name into

26
00:01:45.678 --> 00:01:46.472
the struct.

27
00:01:46.472 --> 00:01:49.624
I chose it to do a different way, but
again, it's one of those things where

28
00:01:49.624 --> 00:01:52.141
you can do whatever you want,
whatever makes sense to you.

29
00:01:52.141 --> 00:01:55.930
But essentially this is a gist,
we're gonna assemble our response using

30
00:01:55.930 --> 00:01:59.184
the key and table name properties
of the GetItem input struct.

31
00:02:03.488 --> 00:02:05.520
Cool, so let's go ahead and do this.

32
00:02:05.520 --> 00:02:12.733
So, first I want to create a function
that has a receiver to our actual client.

33
00:02:12.733 --> 00:02:18.075
So, I think it makes sense to make this
you, and we'll do DynamoDBClient().

34
00:02:18.075 --> 00:02:21.433
So that struct can actually call this or
do GetUser().

35
00:02:21.433 --> 00:02:26.278
Now that you GetUser,
let's actually make two functions,

36
00:02:26.278 --> 00:02:29.226
we gonna first DoesUserExist().

37
00:02:29.226 --> 00:02:34.265
And I'm gonna tell you right away, you
can combine these two functions into one,

38
00:02:34.265 --> 00:02:37.936
you can check if a user exists
while retrieving it into one.

39
00:02:37.936 --> 00:02:43.011
I just think it makes a little bit more
sense if we separate it, but, yeah,

40
00:02:43.011 --> 00:02:47.927
you can definitely combine this into
making a more solid function as both

41
00:02:47.927 --> 00:02:52.787
purposes, and then this is gonna
return a Boolean and an error, okay?

42
00:02:52.787 --> 00:02:54.751
Basically does the exist, yes, no.

43
00:02:54.751 --> 00:02:57.450
If there's an error,
let's send back that error.

44
00:02:57.450 --> 00:03:01.616
And following that DynamoDB documentation,

45
00:03:01.616 --> 00:03:06.636
we gonna basically do u.databaseStore,
the property

46
00:03:06.636 --> 00:03:12.095
that we have on our DynamoDBClient,
we hit GetItem, okay?

47
00:03:12.095 --> 00:03:16.863
And this GetItem is gonna take
our dynamodb.GetItemInput(), and

48
00:03:16.863 --> 00:03:22.373
clear that, and the only thing we care
about are two values, key and table name.

49
00:03:22.373 --> 00:03:27.274
So, before we input our table name,
we have to declare it.

50
00:03:27.274 --> 00:03:31.965
And again, I'm working backwards,
cuz we don't have a table right now,

51
00:03:31.965 --> 00:03:33.763
it doesn't exist, right?

52
00:03:33.763 --> 00:03:37.669
So what I'm going to do is I'm gonna
create a const all the way up here, and

53
00:03:37.669 --> 00:03:39.507
this is gonna house my table name.

54
00:03:39.507 --> 00:03:45.056
So TABLE_NAME, and
can just state this userTable, okay?

55
00:03:45.056 --> 00:03:45.743
It's fine,

56
00:03:45.743 --> 00:03:49.685
we're not gonna get any complaints
from the compiler cuz of the constant.

57
00:03:49.685 --> 00:03:52.493
So go back to our GetItemInput,
our struct here.

58
00:03:52.493 --> 00:03:59.525
We're gonna put TableName as
aws.String(TABLE NAME), okay?

59
00:03:59.525 --> 00:04:01.422
This is one of the important
products to identify, like, okay,

60
00:04:01.422 --> 00:04:02.535
what table we're actually hitting.

61
00:04:02.535 --> 00:04:03.647
And I'm gonna have a key.

62
00:04:03.647 --> 00:04:05.460
So key is going to be a map.

63
00:04:05.460 --> 00:04:09.202
The first value is a string, and

64
00:04:09.202 --> 00:04:15.313
it's going to map to our
DynamoDB attribute value.

65
00:04:15.313 --> 00:04:20.181
And this attribute value is basically
the definition of the records that

66
00:04:20.181 --> 00:04:23.225
we wanna check if they
exist in our DynamoDB.

67
00:04:23.225 --> 00:04:25.763
And you can use attribute value for
a bunch of different things.

68
00:04:25.763 --> 00:04:30.754
You can have it for multiple fields,
for this purpose, all we're checking is

69
00:04:30.754 --> 00:04:35.078
by the main primary key,
which is our username, which is a string.

70
00:04:35.078 --> 00:04:37.934
So here, we put username, okay?

71
00:04:37.934 --> 00:04:41.677
And it's gonna be struct 2S.

72
00:04:41.677 --> 00:04:44.273
This S is specific for AWS.

73
00:04:44.273 --> 00:04:47.958
This represents that
the field is a string, okay?

74
00:04:47.958 --> 00:04:51.755
And it's different values, you can have
like a float, an int, a Boolean, and

75
00:04:51.755 --> 00:04:55.175
all those, each of them have a separate
character associated to them.

76
00:04:55.175 --> 00:04:59.608
So here we have username,
I'm gonna put, aws.String(username).

77
00:05:03.518 --> 00:05:05.966
Okay?

78
00:05:05.966 --> 00:05:10.162
So this is basically the operation,
it's gonna tell us, hey,

79
00:05:10.162 --> 00:05:15.056
do we have a record in our DynamoDB table,
where the main key is username and

80
00:05:15.056 --> 00:05:19.737
the value is what we're passing in,
which is string username, okay?

81
00:05:19.737 --> 00:05:21.207
Yes.
&gt;&gt; Can you repeat,

82
00:05:21.207 --> 00:05:23.424
how did you define table name again?

83
00:05:23.424 --> 00:05:25.376
Is it just a const at the top?

84
00:05:25.376 --> 00:05:26.044
&gt;&gt; Yeah, yeah.

85
00:05:26.044 --> 00:05:31.764
So, the table name over here is just
a const at the top, just user table.

86
00:05:31.764 --> 00:05:36.195
The documentation, they have this as
a field on the DynamoDBClient struct,

87
00:05:36.195 --> 00:05:37.089
totally fine.

88
00:05:37.089 --> 00:05:40.169
That's absolutely that makes sense.

89
00:05:40.169 --> 00:05:44.155
I'm just choosing just to put const here,
just, I don't know,

90
00:05:44.155 --> 00:05:46.187
makes it more simplistic for me.

91
00:05:48.255 --> 00:05:49.262
Yes, question.

92
00:05:49.262 --> 00:05:53.776
&gt;&gt; A couple of questions about
the address versus pointer.

93
00:05:53.776 --> 00:05:57.324
Yeah, GetItem parameter for the DynamoDB.

94
00:05:57.324 --> 00:05:58.187
&gt;&gt; Yep.

95
00:05:58.187 --> 00:05:59.857
&gt;&gt; Why you are using that.

96
00:05:59.857 --> 00:06:04.015
&gt;&gt; Yep, if I remove this,
I'm gonna get a giant compilation error.

97
00:06:04.015 --> 00:06:05.796
So I'm forced to use this.

98
00:06:05.796 --> 00:06:11.462
And this is by AWS design, because AWS,
this is one of the properties

99
00:06:11.462 --> 00:06:16.069
of having references,
you have the ability to use nil.

100
00:06:16.069 --> 00:06:20.893
And AWS has probably some logic under the
hood that is using this know property to

101
00:06:20.893 --> 00:06:22.702
be able to handle some logic.

102
00:06:22.702 --> 00:06:28.196
But also, when you pass a reference,
it's more efficient than passing by copy.

103
00:06:28.196 --> 00:06:33.249
So if, imagine, our key here is
it's dumb simple to one string.

104
00:06:33.249 --> 00:06:37.020
If you pass it by reference or
copy, nothing's going to move.

105
00:06:37.020 --> 00:06:41.012
But imagine where we're inserting
a humongous amount properties,

106
00:06:41.012 --> 00:06:45.851
we don't want to copy that through and
through, it's not gonna be as performant.

107
00:06:45.851 --> 00:06:49.981
So, passing by reference is
gonna give us a little bit more

108
00:06:49.981 --> 00:06:52.607
performance to our execution here.

109
00:06:52.607 --> 00:06:58.023
And then, there's the nil ability as well,
to handle nil correctly.

110
00:06:58.023 --> 00:07:00.426
Not correctly, but
you can handle nil however you want.

111
00:07:00.426 --> 00:07:04.095
Okay, so now, most famous line in Go,

112
00:07:04.095 --> 00:07:09.231
if error does not equal to no,
we're going to search.

113
00:07:09.231 --> 00:07:12.665
So if the user exists,
if there's an unforeseen error,

114
00:07:12.665 --> 00:07:14.604
we don't want to return false.

115
00:07:14.604 --> 00:07:18.203
And the reason for that,
even if this user does not exist,

116
00:07:18.203 --> 00:07:23.131
if we experienced an error, let's say
our DyamoDB table is down or something.

117
00:07:23.131 --> 00:07:28.361
We don't want to let our user know in
the front of our logic to get mixed up and

118
00:07:28.361 --> 00:07:31.950
give them any kind of
possibility to insert a user.

119
00:07:31.950 --> 00:07:35.985
And you can check this multiple ways,
so really this first argument it's,

120
00:07:35.985 --> 00:07:38.396
you don't really need
cuz you can put false.

121
00:07:38.396 --> 00:07:41.237
I like to just be a little extra safe and
put false, and

122
00:07:41.237 --> 00:07:43.902
in here what's actually
required is this error.

123
00:07:43.902 --> 00:07:48.199
Because once we call this function,
if there is an error,

124
00:07:48.199 --> 00:07:53.652
we will then catch that error in
the layer above, in the API layer, okay?

125
00:07:53.652 --> 00:07:58.520
Now, if result.Item is nil,
this is one of those properties of

126
00:07:58.520 --> 00:08:03.388
why we're using reference and
why AWS chose to use references,

127
00:08:03.388 --> 00:08:08.010
cuz we can do this no property,
this zero value comparison.

128
00:08:08.010 --> 00:08:10.485
What this means is, does the user exist?

129
00:08:10.485 --> 00:08:12.437
No, there is no item here.

130
00:08:12.437 --> 00:08:17.339
So we can return false And nil.

131
00:08:20.844 --> 00:08:24.456
Okay?
Otherwise, there is an item, so

132
00:08:24.456 --> 00:08:27.778
we're gonna return true and nil.

133
00:08:27.778 --> 00:08:31.156
So there's three different categories,
error, they exist, they don't exist.

134
00:08:34.950 --> 00:08:35.610
Cool?

135
00:08:38.045 --> 00:08:39.447
Anyone got any questions on that?

136
00:08:41.719 --> 00:08:43.098
Okay.

137
00:08:43.098 --> 00:08:44.161
Yes.

138
00:08:44.161 --> 00:08:47.848
&gt;&gt; You have multiple return statements
in there, like, other languages,

139
00:08:47.848 --> 00:08:51.957
when you run that first return statement,
no further code execution [INAUDIBLE].

140
00:08:51.957 --> 00:08:52.980
&gt;&gt; Yes.
Exactly [INAUDIBLE]

141
00:08:52.980 --> 00:08:54.263
&gt;&gt; Yep, that's correct.

142
00:08:54.263 --> 00:08:56.507
Yeah, so if we hit this block line 40,

143
00:08:56.507 --> 00:08:59.015
we'll not execute the rest
of the code here.

144
00:08:59.015 --> 00:09:03.670
That's what we actually have this return
here to kind of go have our function and

145
00:09:03.670 --> 00:09:07.153
to return some value if we never
hit these if conditionals.

146
00:09:07.153 --> 00:09:12.949
All right, so, that basically takes care
of the function where we are checking,

147
00:09:12.949 --> 00:09:14.297
does a user exist?

148
00:09:14.297 --> 00:09:16.260
Now let's actually insert the user.

149
00:09:16.260 --> 00:09:19.194
So, given the exact same thing,
let's go and ahead and

150
00:09:19.194 --> 00:09:23.267
make a receiver to our DynamoDBClient,
and let's just call it InsertUser.

151
00:09:23.267 --> 00:09:28.401
And now this is where we're gonna
use the very first file we modified,

152
00:09:28.401 --> 00:09:31.807
the user, which is of types.RegisterUser.

153
00:09:31.807 --> 00:09:39.056
You can bring this in up here,
lambda-func/types.

154
00:09:39.056 --> 00:09:42.719
That was the very first file
we modified here, okay?

155
00:09:42.719 --> 00:09:44.307
And so, now we can return,

156
00:09:44.307 --> 00:09:48.394
basically the only thing we wanna
return from this is an error, okay?

157
00:09:48.394 --> 00:09:51.110
Because we're choosing to
separate our function and

158
00:09:51.110 --> 00:09:55.332
we have this earlier DoesUserExist,
we don't need anything returned from this,

159
00:09:55.332 --> 00:09:57.042
just, it is an error, yes, no?

160
00:09:57.042 --> 00:10:01.859
Okay, now,
inserting a record into DynamoDB is not

161
00:10:01.859 --> 00:10:05.702
just like executing raw SQL or using ORM.

162
00:10:05.702 --> 00:10:10.959
You basically have to assemble your record
in a type that DynamoDB understands,

163
00:10:10.959 --> 00:10:12.827
to be put into the database.

164
00:10:12.827 --> 00:10:16.451
Okay, so we first have to assemble
the item and then we insert it.

165
00:10:16.451 --> 00:10:18.660
So let's go ahead and assemble this.

166
00:10:18.660 --> 00:10:25.078
We can do item is going to be a reference

167
00:10:25.078 --> 00:10:31.505
to dynamodb.PutItemInput, okay?

168
00:10:31.505 --> 00:10:34.707
Again, reference versus non-reference,

169
00:10:34.707 --> 00:10:39.011
this is just how AWS SDK chose
to organize their code, okay?

170
00:10:39.011 --> 00:10:43.099
We're gonna put TableName: aws.String,
we're gonna put our const as table name.

171
00:10:43.099 --> 00:10:48.854
And the exact same thing we're gonna
assemble, not our key, but our item, okay?

172
00:10:48.854 --> 00:10:51.296
Because we wanna basically
insert something into this.

173
00:10:51.296 --> 00:10:56.940
But it's gonna follow the same
structure as a string,

174
00:10:56.940 --> 00:11:01.120
okay, to dynamodb.AttributeValue.

175
00:11:01.120 --> 00:11:04.723
And this struct is gonna basically
contain all the records we wanna insert.

176
00:11:04.723 --> 00:11:08.884
So first is gonna be a username, okay,
which as we've already wrote this

177
00:11:08.884 --> 00:11:13.581
aws.String, and it can be user.username,
okay, because we're passing in our

178
00:11:13.581 --> 00:11:16.888
registered user and
it has those fields associated to it.

179
00:11:16.888 --> 00:11:21.156
And here we can do password and

180
00:11:21.156 --> 00:11:29.710
still gonna be sharing
aws.String(user.password).

181
00:11:29.710 --> 00:11:35.091
Now, I know what you're thinking,
this is the plain text password, it is.

182
00:11:35.091 --> 00:11:37.084
As of right now it,
is the plain text password.

183
00:11:37.084 --> 00:11:41.910
So once we call this, we are literally
going to be storing the actual password

184
00:11:41.910 --> 00:11:44.300
you put it as a user into our database.

185
00:11:44.300 --> 00:11:47.664
It's not a permanent solution,
we're gonna fix this.

186
00:11:47.664 --> 00:11:49.682
But all we've done so
far is assemble the item,

187
00:11:49.682 --> 00:11:51.705
we actually haven't
inserted the item at all.

188
00:11:51.705 --> 00:11:56.437
And to insert an item, we're gonna
actually have to bring in a new,

189
00:11:56.437 --> 00:12:00.008
well, we don't actually
have to bring anything,

190
00:12:00.008 --> 00:12:03.427
what we do have to do though
is just call PutItem.

191
00:12:03.427 --> 00:12:07.505
And this PutItem just takes the item
that we just assembled above.

192
00:12:07.505 --> 00:12:12.200
The reason why we're ignoring the first
argument is because that is a return that

193
00:12:12.200 --> 00:12:15.584
you can specify to return
the user that you've inserted or

194
00:12:15.584 --> 00:12:19.883
return a property of that user once
you've put it in the database, okay?

195
00:12:19.883 --> 00:12:22.706
And again, you're gonna have to get
used to if error does not equal to null.

196
00:12:22.706 --> 00:12:24.999
We could write a helper function,
but that's not fun.

197
00:12:24.999 --> 00:12:26.609
Here, and then we can return null.

198
00:12:31.284 --> 00:12:36.053
Cool, and so
we've kind of just assembled our logic for

199
00:12:36.053 --> 00:12:40.529
handling our DB connectivity,
our DB experience.

200
00:12:40.529 --> 00:12:44.943
Check if the user exists and
then entering the user into that DB table.

