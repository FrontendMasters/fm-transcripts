WEBVTT

1
00:00:00.400 --> 00:00:03.644
Let's get started with Go here.

2
00:00:03.644 --> 00:00:07.120
There's a lot of cool
things that Go offers.

3
00:00:07.120 --> 00:00:12.657
And I've been using Go professionally for
about three years at Twitch.

4
00:00:12.657 --> 00:00:15.312
I joined, I didn't know anything about Go.

5
00:00:15.312 --> 00:00:18.542
Kind of put me in a deep end,
started writing it, was completely lost.

6
00:00:18.542 --> 00:00:21.333
I came from Python,
very different language,

7
00:00:21.333 --> 00:00:24.698
just this conceptually like
even the compiler portion.

8
00:00:24.698 --> 00:00:28.371
I was just like what what do you mean
I can't run this script, what it is?

9
00:00:28.371 --> 00:00:32.572
So, Go really changed my thinking
of how to write software.

10
00:00:32.572 --> 00:00:36.400
So I'm very passionate about Go,
that's why I like to make videos,

11
00:00:36.400 --> 00:00:38.846
that's why I like to
make a course about Go.

12
00:00:38.846 --> 00:00:43.132
But for those who don't know, or
those may be new, what is it?

13
00:00:43.132 --> 00:00:46.322
It's a statically typed,
compiled program language.

14
00:00:46.322 --> 00:00:49.492
It's very different, it's very fast,
it's very efficient.

15
00:00:49.492 --> 00:00:55.632
I think the typing system Go offers,
it's like the best typing system.

16
00:00:55.632 --> 00:00:59.677
And I know I'm gonna probably catch
some flack, from other people, for

17
00:00:59.677 --> 00:01:01.547
other languages, typescript.

18
00:01:01.547 --> 00:01:06.272
But I think Go really has everything you
truly need without losing your mind and

19
00:01:06.272 --> 00:01:11.210
spending as much time writing application
code to writing your type safety kind of

20
00:01:11.210 --> 00:01:12.659
surface for that code.

21
00:01:12.659 --> 00:01:14.399
So I think Go just does it right.

22
00:01:14.399 --> 00:01:20.570
It's a compiled programming language, so
it's not interpreted, it's trebly fast.

23
00:01:20.570 --> 00:01:23.290
And then there's the who.

24
00:01:23.290 --> 00:01:26.673
And I actually wanna hyper-focus
on the who for a second.

25
00:01:26.673 --> 00:01:33.660
It was designed at Google by
a very smart group of individuals.

26
00:01:33.660 --> 00:01:37.287
Rob Grazmer, Rob Pike, and Ken Thompson
again sorry if I'm mispronouncing any

27
00:01:37.287 --> 00:01:39.170
names, plus a lot of other individuals.

28
00:01:40.608 --> 00:01:45.505
They made this programming language at
Google and the history of it isn't that

29
00:01:45.505 --> 00:01:50.588
these individuals came together and
they said, you know what we need?

30
00:01:50.588 --> 00:01:54.238
Another programming language,
that's what the world is missing.

31
00:01:54.238 --> 00:01:56.851
That's not how Go originated.

32
00:01:56.851 --> 00:02:01.422
Go originated based on
the mantra of how can we allow

33
00:02:01.422 --> 00:02:05.410
individuals to write software easier.

34
00:02:05.410 --> 00:02:09.870
That is the TLDR,
the Gold Star of Ghost Mission.

35
00:02:10.940 --> 00:02:17.041
Because, this group of individuals
are very smart and they're rewriting C.

36
00:02:17.041 --> 00:02:23.509
Back in 2005 I googled, writing C in 2005,
there's not a lot of resources you will

37
00:02:23.509 --> 00:02:29.144
have to go to a textbook probably find
something, go to forums on the internet.

38
00:02:29.144 --> 00:02:33.165
So these individuals really knew how
software is written at a low level.

39
00:02:34.895 --> 00:02:39.665
But they realized,
when they got new people joining the team,

40
00:02:39.665 --> 00:02:46.417
new junior engineers, new interns, they
couldn't really write C all that well.

41
00:02:46.417 --> 00:02:50.237
There were some gaps in knowledge,
they weren't as efficient with C.

42
00:02:50.237 --> 00:02:53.325
And so the team was kind of
scratching their heads, well,

43
00:02:53.325 --> 00:02:56.540
we need them to write essentially
much better software, but

44
00:02:56.540 --> 00:03:00.889
they just don't have that breadth and
that depth of knowledge with C.

45
00:03:00.889 --> 00:03:03.969
So, that's how Go originated from.

46
00:03:03.969 --> 00:03:08.928
It was designed to be a language
that allows people to write software

47
00:03:08.928 --> 00:03:10.359
much easier.

48
00:03:10.359 --> 00:03:14.851
And it abstracts a lot of the
complications that C introduced or C has,

49
00:03:14.851 --> 00:03:20.106
with its garbage collecting,
with its system of structs and interfaces.

50
00:03:20.106 --> 00:03:23.495
With, a lot of different
things concurrency,

51
00:03:23.495 --> 00:03:28.408
it really did make writing Go and
it really changed the period of how to

52
00:03:28.408 --> 00:03:32.306
write software efficiently and
much quicker.

53
00:03:32.306 --> 00:03:35.716
And then there's the why, right?

54
00:03:35.716 --> 00:03:37.336
Why should you learn Go?

55
00:03:37.336 --> 00:03:39.694
Why should you spend your
time allocating to Go,

56
00:03:39.694 --> 00:03:42.224
why should you try to convince
your manager team to,

57
00:03:42.224 --> 00:03:46.445
maybe we should migrate to Go, maybe we
should write this new project using Go.

58
00:03:46.445 --> 00:03:48.237
And it's known for its simplicity and

59
00:03:48.237 --> 00:03:51.265
efficiency and in strong support for
concurrent programming.

60
00:03:51.265 --> 00:03:55.245
I just wanna say that
concurrency is not parallelism.

61
00:03:55.245 --> 00:03:59.516
Rob Pike has an excellent talk describing
that, concurrency is different

62
00:03:59.516 --> 00:04:04.073
concurrency is how you can run multiple
things differently in the same thread.

63
00:04:04.073 --> 00:04:06.145
So you don't need to, it's not writing and

64
00:04:06.145 --> 00:04:09.673
executing the same thing in multiple
processes, it's just you have one,

65
00:04:09.673 --> 00:04:13.353
you have the same resource but
you're doing multiple things at once.

66
00:04:13.353 --> 00:04:17.245
So concurrency allows for
a lot of strong code to be used,

67
00:04:17.245 --> 00:04:20.265
a great example is maybe cleanup code.

68
00:04:20.265 --> 00:04:23.758
At the end of your execution,
if you have something spun up,

69
00:04:23.758 --> 00:04:25.949
you can have a concurrent Go routine,

70
00:04:25.949 --> 00:04:30.345
which is a very light thread to
clean up your code at the end.

71
00:04:30.345 --> 00:04:34.225
So, that's tells you what,
who, and why with Go.

72
00:04:34.225 --> 00:04:36.848
Obviously, I'm a big supporter of it,

73
00:04:36.848 --> 00:04:40.254
I try to consume as much Go
content as I possibly can.

74
00:04:40.254 --> 00:04:44.841
And it's really again coming from
Python or even JavaScript that time,

75
00:04:44.841 --> 00:04:49.352
Go introduce things to me that just
made me a better software engineer,

76
00:04:49.352 --> 00:04:51.327
I still write bad code, okay?

77
00:04:51.327 --> 00:04:53.137
I still write bad code, but

78
00:04:53.137 --> 00:04:58.038
it makes me think in a different way of
how I can go about writing said code.

79
00:04:58.038 --> 00:05:00.091
So hopefully you all feel the same.

80
00:05:01.542 --> 00:05:04.082
But yeah, so why should you use Go?

81
00:05:04.082 --> 00:05:06.412
For a lot of people
there's different reasons.

82
00:05:06.412 --> 00:05:10.612
But I think really the biggest selling
point to me is the versatility.

83
00:05:11.982 --> 00:05:17.182
When you think of Go, you probably think
it's a back-end programming language.

84
00:05:17.182 --> 00:05:22.090
I can use it for the back-end,
I can write an HTTP server or an RPC,

85
00:05:22.090 --> 00:05:25.214
GRPC server, or I could make a CLI.

86
00:05:25.214 --> 00:05:27.704
Yeah, I mean you totally can,
you totally should.

87
00:05:27.704 --> 00:05:29.854
That's the bread and butter of Go.

88
00:05:29.854 --> 00:05:31.564
That's a really good application of it.

89
00:05:31.564 --> 00:05:36.069
But we're seeing nowadays,
Go is being used in a variety of

90
00:05:36.069 --> 00:05:40.496
different applications,
even front-end stuff.

91
00:05:40.496 --> 00:05:44.938
Now Go natively has a lot of great
support with its standard library,

92
00:05:44.938 --> 00:05:47.626
arguably has the best standard library.

93
00:05:47.626 --> 00:05:52.412
So you're not gonna have a huge dependency
tree, you're not gonna have a package JSON

94
00:05:52.412 --> 00:05:56.496
with like 40 different dependencies
all with their specific version.

95
00:05:56.496 --> 00:05:58.756
If you change one, it breaks another one.

96
00:05:58.756 --> 00:06:02.446
You rarely see that if ever
in Go because a lot of time,

97
00:06:02.446 --> 00:06:07.045
you can write literally everything
from the standard library.

98
00:06:07.045 --> 00:06:08.645
It offers everything you need.

99
00:06:08.645 --> 00:06:12.182
And on the topic of the front-end portion,

100
00:06:12.182 --> 00:06:16.881
Go now plays really well with
new upcoming technologies.

101
00:06:16.881 --> 00:06:22.263
HTMX, even the package built
in Go ecosystem temple,

102
00:06:22.263 --> 00:06:28.466
where you can generate these HTML files,
render them in a dom.

103
00:06:28.466 --> 00:06:33.335
And then actually play around with
web components, web UI elements,

104
00:06:33.335 --> 00:06:36.729
and keep all that state and
Go as your back-end.

105
00:06:36.729 --> 00:06:39.389
So really you can use, Go for
a lot of different things nowadays.

106
00:06:39.389 --> 00:06:43.389
I bought a lot of cool things with Grue,
I'm gonna showcase one.

107
00:06:43.389 --> 00:06:47.762
So it's very very versatile and
it's beginner friendly,

108
00:06:47.762 --> 00:06:52.485
not from the perspective of I've
never touched programming and

109
00:06:52.485 --> 00:06:58.535
I'm interested, but I've written PHP
code for 510 years and I want to use Go.

110
00:06:58.535 --> 00:07:03.054
That's also a beginner friendliness,
because it's great for

111
00:07:03.054 --> 00:07:06.734
those new to programming or
those who wanna switch,

112
00:07:06.734 --> 00:07:11.938
because going from zero to 100 and
Go is super super easy, super fast.

113
00:07:11.938 --> 00:07:15.582
Going from zero to 100 and
language like rust,

114
00:07:15.582 --> 00:07:21.236
that's a whole different beast and
that plays into this third point of jobs.

115
00:07:21.236 --> 00:07:26.553
More and more companies, big tech and
startups are choosing to adopt Go.

116
00:07:26.553 --> 00:07:30.685
And it's not because of its incredible
performance, which it is very performant,

117
00:07:30.685 --> 00:07:34.427
but because of that beginner friendliness,
because that learning curve.

118
00:07:34.427 --> 00:07:40.082
You can basically get developers
from different areas of programming.

119
00:07:40.082 --> 00:07:42.901
You can say, hey we use Go and
they'll ramp up in two weeks.

120
00:07:42.901 --> 00:07:44.672
You use Go full-time for two weeks,

121
00:07:44.672 --> 00:07:49.011
you will have enough knowledge where you
can start building and reading the code.

122
00:07:49.011 --> 00:07:51.411
And I think that's what a lot
of companies are recognizing.

123
00:07:51.411 --> 00:07:53.601
And this isn't the case for everyone.

124
00:07:53.601 --> 00:07:58.651
A very popular example of a company going
the other way was actually in 2021,

125
00:07:58.651 --> 00:07:59.328
Discord.

126
00:07:59.328 --> 00:08:01.409
Discord went from Go to Rust.

127
00:08:01.409 --> 00:08:02.749
So this isn't a blanket statement, right?

128
00:08:02.749 --> 00:08:06.899
I don't want you to be like, Melkey
said there's gonna be a pop-off in jobs.

129
00:08:06.899 --> 00:08:10.069
I think more and more companies
are adopting it seeing the potential.

130
00:08:10.069 --> 00:08:14.449
And so I think it's a worthy investment at
this point, if you are looking to look for

131
00:08:14.449 --> 00:08:17.589
new programming language to
kind of broaden your horizon.

132
00:08:18.636 --> 00:08:21.606
And obviously, that's gonna
increase the number of Go jobs.

133
00:08:21.606 --> 00:08:25.496
But, like I said, when you think of
Go you think of back-end development.

134
00:08:25.496 --> 00:08:28.229
There's also that core application
of cloud deployments, right?

135
00:08:28.229 --> 00:08:30.994
Kubernetes and Docker,
those are built with Go.

136
00:08:30.994 --> 00:08:34.331
So there's so many things and so
many different jobs that will just say,

137
00:08:34.331 --> 00:08:36.246
hey we want to be a cloud engineer.

138
00:08:36.246 --> 00:08:39.099
But really you look in the fine print,
they're looking for

139
00:08:39.099 --> 00:08:42.307
a Go developer because of how well
it plays with that environment.

140
00:08:44.197 --> 00:08:47.157
And arguably, my favorite is the velocity.

141
00:08:48.307 --> 00:08:50.607
I'm a big fan of shipping code.

142
00:08:50.607 --> 00:08:55.395
I come from this more practical
mindset where I do believe

143
00:08:55.395 --> 00:08:58.396
in running good, clean software.

144
00:08:58.396 --> 00:09:01.699
But I don't really like
the idea to spin my wheels for

145
00:09:01.699 --> 00:09:04.861
two weeks deploying
something it doesn't work.

146
00:09:04.861 --> 00:09:08.083
I like let's iterate on it,
let's deploy a version MVP.

147
00:09:08.083 --> 00:09:10.337
Let's get a tracer bullet out of the way.

148
00:09:10.337 --> 00:09:11.732
Deploy that, see how it works?

149
00:09:11.732 --> 00:09:12.262
Do we like it?

150
00:09:12.262 --> 00:09:14.057
Thumbs up or let's improve.

151
00:09:14.057 --> 00:09:16.091
We totally miss something,
all right cool, tear it down improve it,

152
00:09:16.091 --> 00:09:16.857
let's iterate that way.

153
00:09:16.857 --> 00:09:21.017
So, Go gives us that fast velocity
to build applications, and

154
00:09:21.017 --> 00:09:24.678
that just translates to
writing code faster.

155
00:09:24.678 --> 00:09:27.938
I mean, like I said, the team at Google,
that's what they wanted.

156
00:09:27.938 --> 00:09:31.950
They wanted people to write code faster,
but not just write stuff in an editor and

157
00:09:31.950 --> 00:09:34.548
send it off, but
actually write good stuff.

158
00:09:34.548 --> 00:09:38.424
And so, they realized they can't
only depend on those engineers,

159
00:09:38.424 --> 00:09:43.184
they're going to depend on themselves to
make something those engineers could use

160
00:09:43.184 --> 00:09:44.549
to deploy code faster.

