WEBVTT

1
00:00:00.180 --> 00:00:03.551
So we just deployed our API gateway.

2
00:00:03.551 --> 00:00:06.857
And if you look at the deployment, there's
actually something super interesting.

3
00:00:06.857 --> 00:00:07.720
We got an endpoint.

4
00:00:08.860 --> 00:00:12.340
We have an actual endpoint that
we can query and check things.

5
00:00:12.340 --> 00:00:16.638
So remember I told you earlier,
I wanna do everything from the CLI.

6
00:00:16.638 --> 00:00:17.824
That's kinda my style.

7
00:00:17.824 --> 00:00:21.683
So I want to just curl it from the CLI.

8
00:00:21.683 --> 00:00:24.861
And you can use something
to help you do this.

9
00:00:24.861 --> 00:00:29.731
You could use Postman, or
Insomnia, or another tool.

10
00:00:29.731 --> 00:00:32.484
Postwoman, I think there's
a bunch of different ones.

11
00:00:32.484 --> 00:00:35.738
Call me old-fashioned like prime,
I just wanna curl it, okay?

12
00:00:35.738 --> 00:00:38.507
But before we do that,
it's always good to double check,

13
00:00:38.507 --> 00:00:41.738
triple check what's going on in
cloud formation in the resources.

14
00:00:41.738 --> 00:00:46.365
So here, our table looking nice,
LambdaFunction, looking nice.

15
00:00:46.365 --> 00:00:49.760
API Gateway, sweet, this is new.

16
00:00:49.760 --> 00:00:52.822
If we go in and click this,
we should see our defined methods there.

17
00:00:55.010 --> 00:00:57.222
There you go.
So /login and /register,

18
00:00:57.222 --> 00:00:58.726
we can post both of them.

19
00:00:58.726 --> 00:00:59.683
This is very good.

20
00:00:59.683 --> 00:01:04.080
So there is some confirmation that
we've deployed something that

21
00:01:04.080 --> 00:01:09.108
resonated with AWS resource to
allocate what we've wanted to, right?

22
00:01:09.108 --> 00:01:11.478
The only question is, did it work?

23
00:01:11.478 --> 00:01:14.983
And again, this is kinda that pain
point of that iterative deployment,

24
00:01:14.983 --> 00:01:15.908
iterative speed.

25
00:01:15.908 --> 00:01:18.948
This is where local deployments
will definitely come into play.

26
00:01:18.948 --> 00:01:22.342
But for our case here,
I should not have cleared that.

27
00:01:22.342 --> 00:01:24.580
I should not have cleared that.

28
00:01:24.580 --> 00:01:27.040
This will be quick, I have to redeploy it.

29
00:01:27.040 --> 00:01:30.950
But because we're not spitting up infra,
it's just gonna quickly just give me,

30
00:01:30.950 --> 00:01:33.908
the stack is gonna check,
the diff is gonna be the exact same.

31
00:01:33.908 --> 00:01:35.253
It's gonna give me the endpoint.

32
00:01:35.253 --> 00:01:37.030
I accidentally cleared the endpoint.

33
00:01:37.030 --> 00:01:37.890
There you go, that's all I needed.

34
00:01:38.900 --> 00:01:42.082
So this endpoint,
we're actually gonna call it.

35
00:01:42.082 --> 00:01:44.643
So copy, so curl.

36
00:01:44.643 --> 00:01:47.598
If you've never done
curl request like this,

37
00:01:47.598 --> 00:01:50.949
I'm gonna maybe show you something new,
-X POST.

38
00:01:50.949 --> 00:01:53.866
We're gonna paste the link
that we just got.

39
00:01:53.866 --> 00:01:57.254
And the endpoint is going to be register,
okay?

40
00:01:57.254 --> 00:02:02.009
And I'm gonna add a header,
so -H, double quotes.

41
00:02:02.009 --> 00:02:04.657
I like to,
when you create something on the CLI,

42
00:02:04.657 --> 00:02:06.735
cuz you don't get the autocomplete.

43
00:02:06.735 --> 00:02:10.517
If you do something open,
do it close in the next character.

44
00:02:10.517 --> 00:02:12.847
So if you do an open parentheses,
close it right away.

45
00:02:12.847 --> 00:02:14.988
Don't open, fill it out, and then close.

46
00:02:14.988 --> 00:02:15.893
You'll forget.

47
00:02:15.893 --> 00:02:19.862
So here, just open, close the quotations.

48
00:02:19.862 --> 00:02:25.435
And we'll do Content-Type, capital T.

49
00:02:25.435 --> 00:02:30.005
Content-Type is application/json, right?

50
00:02:30.005 --> 00:02:32.430
We know this is something that we want,

51
00:02:32.430 --> 00:02:36.476
cuz we told our API gateway of
the Content-Type header, right?

52
00:02:36.476 --> 00:02:37.704
So we know this exists.

53
00:02:37.704 --> 00:02:41.029
And then we need the actual body,
so -d, little d.

54
00:02:41.029 --> 00:02:46.495
And then we'll do single quotes,
these curly brackets.

55
00:02:46.495 --> 00:02:49.237
And then we'll put in username.

56
00:02:49.237 --> 00:02:53.037
And then my username, let's say marcG.

57
00:02:53.037 --> 00:02:56.940
And then here, we'll put password.

58
00:02:56.940 --> 00:03:00.712
I'll put, ilovePrime.

59
00:03:00.712 --> 00:03:03.322
&gt;&gt; You have a typo in Content-Type.

60
00:03:03.322 --> 00:03:07.689
There should be an N in there,
the Content-Type header.

61
00:03:07.689 --> 00:03:09.333
&gt;&gt; There should be what?

62
00:03:09.333 --> 00:03:12.132
&gt;&gt; Content-Type is just spelled wrong,
it says contet.

63
00:03:12.132 --> 00:03:14.733
&gt;&gt; Yes, thank you, thank you.

64
00:03:14.733 --> 00:03:17.899
Again, I can't type, Content.

65
00:03:19.619 --> 00:03:24.165
I'm gonna double check this right now,
curl -X POST,

66
00:03:24.165 --> 00:03:28.903
the endpoint with appended /register,
header, big H,

67
00:03:28.903 --> 00:03:32.206
Content-Type, application/json.

68
00:03:32.206 --> 00:03:34.437
And then we put in the payload, little d.

69
00:03:34.437 --> 00:03:37.647
We've got everything closed, looks good.

70
00:03:37.647 --> 00:03:38.909
Anyone see anything?

71
00:03:38.909 --> 00:03:40.275
Do we run this?

72
00:03:40.275 --> 00:03:44.257
Okay, this is the moment of truth.

73
00:03:47.880 --> 00:03:52.626
Sweet, successfully registered user,
I'm very happy.

74
00:03:52.626 --> 00:03:55.032
[LAUGH] Okay?

75
00:03:55.032 --> 00:04:01.027
And if we refresh this,
marcG with the hash password, let's go.

76
00:04:01.027 --> 00:04:03.161
Sweet, it's all coming together.

77
00:04:03.161 --> 00:04:06.333
Now, I don't know his
password is ilovePrime.

78
00:04:06.333 --> 00:04:07.753
I don't look at his accounts.

79
00:04:07.753 --> 00:04:08.933
I just know that by knowing it.

80
00:04:08.933 --> 00:04:11.193
But now,
no one else will know that information.

81
00:04:13.003 --> 00:04:14.899
Let's log in.

82
00:04:14.899 --> 00:04:18.642
And the really cool thing
about doing it in curl,

83
00:04:18.642 --> 00:04:23.583
it's like you can just go up
then change /register to /login.

84
00:04:23.583 --> 00:04:25.422
This is also a very stressful point.

85
00:04:25.422 --> 00:04:29.819
Cuz if login doesn't work,
we have to debug live.

86
00:04:32.851 --> 00:04:35.815
All right,
do you think it's gonna work for us, T?

87
00:04:35.815 --> 00:04:37.020
We got a shrug.

88
00:04:37.020 --> 00:04:41.659
Okay, successfully logged in.

89
00:04:41.659 --> 00:04:43.986
Cool, but this could be a false positive.

90
00:04:43.986 --> 00:04:49.746
Let's go back up and
let's change ilovePrime to iloveDustin.

91
00:04:49.746 --> 00:04:50.640
Let's see if this works, right?

92
00:04:50.640 --> 00:04:56.222
We change the password of an already
registered user, invalid user credentials.

93
00:04:56.222 --> 00:05:01.149
So there you go,
we have a way to register users and login.

94
00:05:01.149 --> 00:05:02.142
And that's pretty cool, right?

95
00:05:02.142 --> 00:05:06.596
I totally think this is,
maybe it's simple, it is.

96
00:05:06.596 --> 00:05:11.154
But in terms of using this AWS
infrastructure, I'm a big fan of this.

97
00:05:11.154 --> 00:05:16.769
So yeah, I mean if you're still here,
if you're still not checked out, good.

98
00:05:16.769 --> 00:05:19.258
[LAUGH] I don't know what to say.

99
00:05:19.258 --> 00:05:21.082
But any questions on, yes?

100
00:05:21.082 --> 00:05:29.530
&gt;&gt; Just one thing, the configuration
line about logging, further up.

101
00:05:29.530 --> 00:05:32.308
&gt;&gt; Further up?

102
00:05:32.308 --> 00:05:35.552
&gt;&gt; When we're setting up the API,
the NewRestApi bit, the stack function.

103
00:05:35.552 --> 00:05:36.354
&gt;&gt; You mean here?

104
00:05:36.354 --> 00:05:37.690
Yeah, yeah.

105
00:05:37.690 --> 00:05:41.190
&gt;&gt; No, sorry, in the go_cdk.go.

106
00:05:41.190 --> 00:05:42.710
&gt;&gt; Yep, we're going right here?

107
00:05:42.710 --> 00:05:43.469
&gt;&gt; Yeah.
&gt;&gt; Yep.

108
00:05:43.469 --> 00:05:44.440
&gt;&gt; Keep going up.

109
00:05:44.440 --> 00:05:45.299
&gt;&gt; Keep going up?

110
00:05:45.299 --> 00:05:48.210
&gt;&gt; Right there,
the DeployOptions LoggingLevel.

111
00:05:48.210 --> 00:05:49.031
&gt;&gt; Yeah?

112
00:05:49.031 --> 00:05:51.139
&gt;&gt; That busted my deploy.

113
00:05:51.139 --> 00:05:53.181
&gt;&gt; Really?
&gt;&gt; So I erased it, and it worked fine.

114
00:05:53.181 --> 00:05:54.680
&gt;&gt; Well,
do you remember what the error was?

115
00:05:56.130 --> 00:06:01.416
&gt;&gt; It's CloudWatch Logs role ARN must be
set in account settings to enable logging.

116
00:06:01.416 --> 00:06:02.217
&gt;&gt; You got it too?

117
00:06:02.217 --> 00:06:03.588
&gt;&gt; I commented it out-
&gt;&gt; Okay.

118
00:06:03.588 --> 00:06:04.986
&gt;&gt; Instead of setting it up properly.

119
00:06:04.986 --> 00:06:09.922
&gt;&gt; Interesting, I don't remember if I set
anything up differently to CloudWatch

120
00:06:09.922 --> 00:06:11.553
to get the LoggingLevel.

121
00:06:11.553 --> 00:06:17.411
Maybe I did spin up CloudWatch way
long ago that has this enabled.

122
00:06:17.411 --> 00:06:22.078
But yeah, I should have stated that
the MethodLoggingLevel goes directly to

123
00:06:22.078 --> 00:06:22.953
CloudWatch.

124
00:06:22.953 --> 00:06:25.723
So that's how we kinda see
the source of truth of, okay,

125
00:06:25.723 --> 00:06:28.537
where's the errors that are in CloudWatch?

126
00:06:28.537 --> 00:06:30.357
But yeah, if you have to comment it out,
then yeah, comment it out.

127
00:06:30.357 --> 00:06:31.772
But thank you for raising that,

128
00:06:31.772 --> 00:06:34.246
cuz I'm pretty sure other
people had that problem too.

