WEBVTT

1
00:00:00.260 --> 00:00:01.628
All that being said,

2
00:00:01.628 --> 00:00:06.790
we're gonna get into more practical
example here with writing Go Code.

3
00:00:06.790 --> 00:00:11.463
This portion like I said, it's gonna
be mainly a beginner focus, right like,

4
00:00:11.463 --> 00:00:15.320
from the Hello World,
maybe a few concepts and data structures.

5
00:00:15.320 --> 00:00:17.030
We're gonna type those all out.

6
00:00:18.580 --> 00:00:23.316
But before we start, if you've never spun
up a Go Project from scratch, the very

7
00:00:23.316 --> 00:00:28.309
first command you're gonna write is Go
mod init and then the name of the module.

8
00:00:28.309 --> 00:00:31.449
And I wanna focus on the name of the
module just just for a quick portion here.

9
00:00:32.799 --> 00:00:34.232
This plays a critical role,

10
00:00:34.232 --> 00:00:38.089
especially if you're making something
that's gonna be public-facing.

11
00:00:38.089 --> 00:00:40.435
Like if you wanna make a package
that people depend on,

12
00:00:40.435 --> 00:00:42.066
this does play a critical role.

13
00:00:42.066 --> 00:00:46.149
And you can always change it, so
it's not like, okay, I gotta restart.

14
00:00:46.149 --> 00:00:46.651
No, you can change it.

15
00:00:46.651 --> 00:00:50.982
It's not the end of the world, but it does
allow your project to have this underlying

16
00:00:50.982 --> 00:00:53.376
structure as you move forward with it.

17
00:00:53.376 --> 00:00:58.086
And I wanna show an example, and
this is a project I made on open source.

18
00:00:58.086 --> 00:01:01.343
It's called Go Blueprint, you can check it
out, I don't wanna plug it too much, but

19
00:01:01.343 --> 00:01:02.849
it spins up a Go Project for you, okay?

20
00:01:02.849 --> 00:01:04.325
That's the TLDR.

21
00:01:04.325 --> 00:01:10.348
But when you run go mod init, you will
generate what's called a go.mod file.

22
00:01:10.348 --> 00:01:12.068
Let's just jump into this for a second.

23
00:01:15.315 --> 00:01:19.055
This go.modfile, is gonna include
a bunch of different things.

24
00:01:19.055 --> 00:01:22.652
It's a kind of wanna say it's your past,
package.json, but it's not,

25
00:01:22.652 --> 00:01:26.205
I think it's kinda doing a disservice,
but it's similar in that sense.

26
00:01:26.205 --> 00:01:27.715
So we have this module name.

27
00:01:27.715 --> 00:01:29.005
This is what I wanna focus on.

28
00:01:29.005 --> 00:01:33.235
So be new when we spun up this project,
I wanna be an open source project.

29
00:01:33.235 --> 00:01:36.465
I wanted people to use it,
pull it in, check it out.

30
00:01:36.465 --> 00:01:41.721
And the convention in Go is when you have
this idea of making something open source,

31
00:01:41.721 --> 00:01:46.195
you follow this kind of pattern
where it's hosted, so github.com.

32
00:01:46.195 --> 00:01:49.444
This is either the name of the author,
the name of the organization,

33
00:01:49.444 --> 00:01:51.964
maybe it follows a suite
from a different package, so

34
00:01:51.964 --> 00:01:56.225
that's kind of what this middle portion
is, and then it's the name of the project.

35
00:01:56.225 --> 00:01:57.945
So this is called Go Blueprint.

36
00:01:57.945 --> 00:02:03.072
And why this is effective is that this
is the identity of the app everywhere.

37
00:02:03.072 --> 00:02:07.391
If anyone was to pull this in, did you go
get and then this is what they put in and

38
00:02:07.391 --> 00:02:10.762
they'll get the package in
their repository, right?

39
00:02:10.762 --> 00:02:14.882
So this is why it's important because you
can really write anything you want and

40
00:02:14.882 --> 00:02:18.877
that Go mod init portion, and the compiler
is not gonna stop you to say, hey,

41
00:02:18.877 --> 00:02:21.990
wait, I expect to have
slashes doesn't exist.

42
00:02:21.990 --> 00:02:24.137
But if you kinda say something
that doesn't make sense,

43
00:02:24.137 --> 00:02:26.790
it could throw off some potential
people that wanna use your package.

44
00:02:26.790 --> 00:02:28.186
So that's just some food for

45
00:02:28.186 --> 00:02:32.210
thought if you do wantto make something
client facing or available to the public.

46
00:02:32.210 --> 00:02:36.100
And then you have the version that
go that we used to spun it up.

47
00:02:36.100 --> 00:02:37.509
You have your direct dependencies and

48
00:02:37.509 --> 00:02:40.735
then you have your indirect dependencies
here and these required blocks, all right?

49
00:02:40.735 --> 00:02:42.463
So these are things that
we specify that we need.

50
00:02:42.463 --> 00:02:46.630
So we literally run the Go Get Command on
these packages, also very good packages,

51
00:02:46.630 --> 00:02:50.509
check them out, and then we have
the indirect dependencies here.

52
00:02:50.509 --> 00:02:54.969
In this entire workshop,
you will not need to pull any code.

53
00:02:54.969 --> 00:02:59.183
There is no like, use this and
write all the code for you and

54
00:02:59.183 --> 00:03:06.047
we're gonna add in things, no, we're gonna
literally build stuff from zero to hero.

55
00:03:06.047 --> 00:03:08.680
But if you wanna snapshot the finish code,

56
00:03:08.680 --> 00:03:12.537
I have a public repository
here frontend masters.

57
00:03:12.537 --> 00:03:14.100
All right, you can check this out.

58
00:03:14.100 --> 00:03:20.063
This is the link,
github.com/milk dev/frontend masters.

59
00:03:20.063 --> 00:03:21.850
And there's a bunch of
different branches there,

60
00:03:21.850 --> 00:03:23.894
and the readme basically
describes kind of the branches.

61
00:03:23.894 --> 00:03:27.173
So the main branch has everything
you need for the Go portion.

62
00:03:27.173 --> 00:03:32.602
Chapter 0 is the chapter 0 stuff,
chapter 1, chapter 2, and chapter 3.

63
00:03:32.602 --> 00:03:33.378
So yeah, pull this down.

64
00:03:33.378 --> 00:03:34.422
You don't have to.

65
00:03:34.422 --> 00:03:35.492
I kinda prefer if you don't.

66
00:03:35.492 --> 00:03:37.643
I'm kidding, just have it in the backlog.

67
00:03:37.643 --> 00:03:41.427
Have it in the back pocket if you wanna go
check it out, if you get lost, whatever.

68
00:03:41.427 --> 00:03:43.537
And we're gonna audit some stories.

69
00:03:43.537 --> 00:03:47.987
Okay, I gotta start myself.

70
00:03:47.987 --> 00:03:53.087
All right, so here, this is gonna be
the branch that we're working on.

71
00:03:53.087 --> 00:03:55.847
It's gonna call it live
underscore workshop.

72
00:03:55.847 --> 00:04:00.167
So we just have a snapshot are done, but
we're gonna be doing something here,

73
00:04:00.167 --> 00:04:03.506
I'm also gonna deploy this branch,
so if we go on a tangent,

74
00:04:03.506 --> 00:04:07.777
go explore different topics, it'll be
on the live workshop branch as well.

75
00:04:10.167 --> 00:04:12.566
All right.
So the first thing, let's go ahead and

76
00:04:12.566 --> 00:04:16.178
do a Go mod init, you can see that in
this, hopefully you guys can all see,

77
00:04:16.178 --> 00:04:18.710
there's nothing here just to read me,
all right?

78
00:04:18.710 --> 00:04:21.323
So go ahead and do a Go mod init.

79
00:04:21.323 --> 00:04:26.481
I'm gonna call it, femBasics.

80
00:04:26.481 --> 00:04:28.862
I don't think that's too crazy.

81
00:04:28.862 --> 00:04:30.816
Let's do a touch main.go.

82
00:04:30.816 --> 00:04:34.998
Go files are defined by
their extension as dot go.

83
00:04:34.998 --> 00:04:36.786
And this is it.
And already we're getting an error.

84
00:04:36.786 --> 00:04:38.826
The compiler is already yelling at us,
I love it.

85
00:04:38.826 --> 00:04:41.543
I haven't even done anything,
just created a file.

86
00:04:41.543 --> 00:04:47.913
Basic Go files have two
pivotal components at minimum.

87
00:04:47.913 --> 00:04:49.303
The first one is package declaration.

88
00:04:49.303 --> 00:04:52.943
Every package in Go, every file
has this package declared to it.

89
00:04:52.943 --> 00:04:57.013
And I'm specifically using package main
here, and there's a reason for that.

90
00:04:57.013 --> 00:05:00.567
You can name your packages
different things, package whatever,

91
00:05:00.567 --> 00:05:03.549
package database, package API, whatever.

92
00:05:03.549 --> 00:05:06.789
And that's gonna basically help us
organize our code, it's gonna help

93
00:05:06.789 --> 00:05:10.779
construct our code, it's used for
imports, but package main is different.

94
00:05:10.779 --> 00:05:14.859
Package main is specifically used and
it's a keyword.

95
00:05:14.859 --> 00:05:16.358
I'm gonna explain why in just a second.

96
00:05:16.358 --> 00:05:18.649
And then you have a function here.

97
00:05:18.649 --> 00:05:23.269
Functions and Go are defined with the func
keyword and then the name of the function,

98
00:05:23.269 --> 00:05:26.784
I'm gonna use main, and
then parentheses for any arguments and

99
00:05:26.784 --> 00:05:29.020
then what you're gonna do in the logic.

100
00:05:29.020 --> 00:05:32.920
And then right after the parentheses,
there is a return type.

101
00:05:32.920 --> 00:05:36.030
So what is your function gonna
return if it returns anything?

102
00:05:36.030 --> 00:05:37.300
And then you have some logic here.

103
00:05:38.960 --> 00:05:42.168
I purposely named this file func main.

104
00:05:42.168 --> 00:05:45.058
And this is what the compiler expects.

105
00:05:45.058 --> 00:05:49.071
Every time you create a Go project a,
Go application,

106
00:05:49.071 --> 00:05:54.407
you are gonna have to have a package
main and a func main, no matter what.

107
00:05:54.407 --> 00:05:57.018
You can have other packages
can have other repositories.

108
00:05:57.018 --> 00:05:59.328
You can slice and dice your code everyone.

109
00:05:59.328 --> 00:06:01.486
This is a must and the reason for

110
00:06:01.486 --> 00:06:06.835
that is this acts as the entry point
to your entire application, okay?

111
00:06:06.835 --> 00:06:11.892
If you ever get into a new company, a new
repository, and it's a giant monolith,

112
00:06:11.892 --> 00:06:15.835
and you have no idea where to start,
this is where you start.

113
00:06:15.835 --> 00:06:17.518
And then you work backwards.

114
00:06:17.518 --> 00:06:21.204
Cuz this is the entry point,
I'm gonna show a very, hopefully,

115
00:06:21.204 --> 00:06:25.722
a good example down the line of why
this is designed to be the way it is.

116
00:06:25.722 --> 00:06:28.977
But for our purpose, just understand
right now, this is our main entry point.

117
00:06:28.977 --> 00:06:30.734
Question?

118
00:06:30.734 --> 00:06:34.035
&gt;&gt; Do you have any VS Code
extensions installed for Go?

119
00:06:34.035 --> 00:06:34.712
&gt;&gt; Yes.

120
00:06:34.712 --> 00:06:35.312
Great question.

121
00:06:35.312 --> 00:06:36.932
I have one VS Code extension.

122
00:06:36.932 --> 00:06:41.354
It's the Go PLS,
the Go Please or PLS extension.

123
00:06:41.354 --> 00:06:45.294
It just helps with formatting LinkedIn,
it comes with a bunch of stuff.

124
00:06:45.294 --> 00:06:47.554
That's the only VS Code
extension you need.

125
00:06:47.554 --> 00:06:52.904
And for my NeoVim homies,
get the LSP, get GoPLS.

126
00:06:52.904 --> 00:06:57.334
I do build up both, but I think VS Code is
gonna just look a little nicer for this.

127
00:06:57.334 --> 00:06:59.601
So anyone use NeoVim here or Vim?

128
00:07:01.322 --> 00:07:02.662
Okay, awesome.

129
00:07:02.662 --> 00:07:06.492
&gt;&gt; Yeah, everyone that's in your chat
right now because they came from Prime.

130
00:07:06.492 --> 00:07:09.452
&gt;&gt; Literally, yeah,
I'm about to get roasted.

131
00:07:09.452 --> 00:07:13.482
Okay, so with that roast underway, we're
going ahead and continue cooking our code.

132
00:07:13.482 --> 00:07:16.745
We're gonna do an import, imports have
this keyword and you can do anything input

133
00:07:16.745 --> 00:07:20.694
your packages, the standard library, we're
gonna use something called Got the format.

134
00:07:20.694 --> 00:07:25.334
And like every beginner project,
we're gonna write format dot print line.

135
00:07:25.334 --> 00:07:26.094
Hello World.

136
00:07:27.094 --> 00:07:30.214
I can type sweet, exciting stuff.

137
00:07:30.214 --> 00:07:35.224
If you're if you wanna run this code,
you can do Go run main.go.

138
00:07:35.224 --> 00:07:35.964
Hello World.

139
00:07:35.964 --> 00:07:36.542
Awesome.

140
00:07:36.542 --> 00:07:37.264
That's it.

141
00:07:37.264 --> 00:07:39.653
Thank you for coming to the workshop,
hope you have a great day.

142
00:07:41.294 --> 00:07:44.089
Pretty simple stuff, the Go run main go.

143
00:07:44.089 --> 00:07:47.870
It basically runs this main
entry point function, and

144
00:07:47.870 --> 00:07:51.974
we can see that format print line,
print a new line.

145
00:07:51.974 --> 00:07:52.893
Cool.

146
00:07:52.893 --> 00:07:55.108
Nothing too crazy there,
nothing too exciting.

147
00:07:55.108 --> 00:08:00.437
Let's actually jump into still beginner
stuff, but maybe some newer stuff.

148
00:08:00.437 --> 00:08:06.347
So what I wanna do is, let's create
a new folder called variables.

149
00:08:06.347 --> 00:08:09.155
Any variables create new
file called main.go, okay?

150
00:08:09.155 --> 00:08:14.807
And here we're gonna do another func man.

151
00:08:14.807 --> 00:08:16.397
Now why am I doing this?

152
00:08:16.397 --> 00:08:19.603
I just said every Go Apple
application has this one entry point.

153
00:08:19.603 --> 00:08:21.957
I just made another one
the same project route.

154
00:08:21.957 --> 00:08:23.624
What am I doing?

155
00:08:23.624 --> 00:08:24.374
This is by design.

156
00:08:25.734 --> 00:08:29.901
Go applications and
go project can have multiple entry points,

157
00:08:29.901 --> 00:08:32.054
can have multiple executions.

158
00:08:32.054 --> 00:08:34.581
Basically you can have
multiple microservices defined

159
00:08:34.581 --> 00:08:35.914
in like a model list.

160
00:08:35.914 --> 00:08:40.504
And this is for any purpose you
wanna execute code individually.

161
00:08:40.504 --> 00:08:44.383
Shouldn't execute that's separate
from another package, a main package.

162
00:08:44.383 --> 00:08:48.082
As long as they are separated
by a parent directory,

163
00:08:48.082 --> 00:08:53.693
it almost acts as its own individual
entry point, if you will, okay?

164
00:08:53.693 --> 00:08:54.693
So there's something to keep in mind.

165
00:08:54.693 --> 00:08:56.543
And the reason why I wanna do this is,

166
00:08:56.543 --> 00:08:59.363
I think it modularizes a lot
of the conflict cover here.

167
00:08:59.363 --> 00:09:02.713
So if one day you're looking back or
somebody's looking back and like, okay,

168
00:09:02.713 --> 00:09:04.211
how do we run the variables?

169
00:09:04.211 --> 00:09:07.203
I don't wanna have all these imports
mashed into one entry point,

170
00:09:07.203 --> 00:09:08.601
let's just keep it separate.

171
00:09:08.601 --> 00:09:11.361
Variables would be its own executable.

172
00:09:11.361 --> 00:09:15.161
Go up into loops, go up into maps,
and we'll execute them as we go.

173
00:09:15.161 --> 00:09:17.111
So how are variable and
what are variables?

174
00:09:17.111 --> 00:09:18.141
Pretty simple stuff.

175
00:09:18.141 --> 00:09:22.217
There's two ways to declare variable and
Go, there's your explicit way and

176
00:09:22.217 --> 00:09:25.995
you're in third way, so you can do
something like VAR my name, right?

177
00:09:25.995 --> 00:09:28.455
And you can put a string,
you can define a string.

178
00:09:28.455 --> 00:09:29.560
Let's say my name is Melkey.

179
00:09:29.560 --> 00:09:31.118
Cool.

180
00:09:31.118 --> 00:09:35.888
So we have the name of our variable, the
type it is and what we declare it to be.

181
00:09:35.888 --> 00:09:42.272
And another gotcha in Go already
is my name declared and not used.

182
00:09:42.272 --> 00:09:43.572
We cannot compile this.

183
00:09:43.572 --> 00:09:45.272
If you use Go,
you know what I'm talking about.

184
00:09:45.272 --> 00:09:46.622
This is one of those gotcha.

185
00:09:46.622 --> 00:09:51.486
Go compiler, if you have unused imports,
unused variables, it will not compile,

186
00:09:51.486 --> 00:09:53.132
it will not run.

187
00:09:53.132 --> 00:09:54.812
Okay, so we have to use this.

188
00:09:54.812 --> 00:09:56.412
And you can use it in different ways.

189
00:09:56.412 --> 00:09:58.522
You can just print it, it's fine.

190
00:09:58.522 --> 00:10:03.432
We can do a, was bringing our format
package again to do format printf.

191
00:10:03.432 --> 00:10:07.478
This printf takes something
called format specifiers.

192
00:10:07.478 --> 00:10:10.038
So it's different than the print line.

193
00:10:10.038 --> 00:10:15.628
This is printf, and
this is a way to do concatenation in Go.

194
00:10:15.628 --> 00:10:16.146
All right?
Cuz

195
00:10:16.146 --> 00:10:19.138
you can specify the type that you
wanna concatenate with your string.

196
00:10:19.138 --> 00:10:21.008
So if I go back, oops.

197
00:10:22.958 --> 00:10:26.938
If I go back, we can write here,
hello my name is, and

198
00:10:26.938 --> 00:10:30.488
then we can do our specifier percent s,
right?

199
00:10:30.488 --> 00:10:32.138
And type in that string.

200
00:10:32.138 --> 00:10:37.458
And percent s is, or modular s is for
the string type, okay?

201
00:10:37.458 --> 00:10:40.682
You can have different types like ink,
float, Boolean, and

202
00:10:40.682 --> 00:10:43.175
each have their own format specifier.

203
00:10:43.175 --> 00:10:46.723
And if we wanna run this code,
we can't just do Go run main.go,

204
00:10:46.723 --> 00:10:48.960
like our last executable command here,

205
00:10:48.960 --> 00:10:52.835
because it's gonna run the hello
world from the previous main.go.

206
00:10:52.835 --> 00:10:56.515
So how do we run this variable, main.go?

207
00:10:56.515 --> 00:10:59.795
Go run the directory, so
variables, and then main.go.

208
00:10:59.795 --> 00:11:01.305
You can see here.

209
00:11:01.305 --> 00:11:05.885
Hello, my name is Melkey, and
I'm actually kinda disappointed in myself.

210
00:11:05.885 --> 00:11:07.685
I told myself I wouldn't do this.

211
00:11:07.685 --> 00:11:12.895
I've practiced this over 15 times,
and I still do it.

212
00:11:12.895 --> 00:11:13.635
Classic gotcha.

213
00:11:13.635 --> 00:11:16.995
If you don't do print line,
you will not print a new line.

214
00:11:16.995 --> 00:11:21.400
You have to break the line with the /n,
all right?

215
00:11:21.400 --> 00:11:23.211
That is how you break a new line.

216
00:11:23.211 --> 00:11:27.601
Because if I were to remove this, let's
just copy and paste this if I run this.

217
00:11:30.236 --> 00:11:31.286
It's pretty ugly.

218
00:11:31.286 --> 00:11:35.210
So make sure you add that break
character here to create a new line.

219
00:11:35.210 --> 00:11:37.540
I'm probably gonna do
this a few more times and

220
00:11:37.540 --> 00:11:41.806
every time I'm gonna be upset with myself
cuz I'm like I'm afraid forgot it again.

221
00:11:41.806 --> 00:11:42.976
I forgot it again.

222
00:11:42.976 --> 00:11:44.756
So yeah, there you go.

223
00:11:45.936 --> 00:11:46.656
This is fine.

224
00:11:46.656 --> 00:11:48.926
This way of declaring variables is fine,
it's cool.

225
00:11:48.926 --> 00:11:54.196
It's kind of long, I don't know,
VAR, name, type, declared.

226
00:11:56.236 --> 00:11:59.796
So let's insert the type.

227
00:11:59.796 --> 00:12:04.498
So again my name and we can do, this
operator kinda looks like a walrus and

228
00:12:04.498 --> 00:12:06.592
just do Melkey and there you go.

229
00:12:06.592 --> 00:12:07.322
Same thing.

230
00:12:07.322 --> 00:12:09.482
The compiler infers a type to be a string.

231
00:12:09.482 --> 00:12:13.477
We can use it, as it satisfies our format
specifier here and we can rock and

232
00:12:13.477 --> 00:12:15.422
roll if you run this code.

233
00:12:15.422 --> 00:12:16.292
Hello, my name is Melkey.

234
00:12:17.362 --> 00:12:17.952
Cool.

235
00:12:17.952 --> 00:12:19.532
And this extends to different types too.

236
00:12:19.532 --> 00:12:23.720
So my init let's just say is 10.

237
00:12:23.720 --> 00:12:27.347
My float, let's say is 10 float.

238
00:12:28.895 --> 00:12:29.789
Not that.

239
00:12:31.971 --> 00:12:34.012
10 float, and
then let's just specify those, right?

240
00:12:34.012 --> 00:12:36.212
So hello, my name is string.

241
00:12:36.212 --> 00:12:40.560
My int is modulo t for int, and
then my float is modulo f for

242
00:12:40.560 --> 00:12:43.852
float and just append those over here.

243
00:12:43.852 --> 00:12:48.762
Gonna do myInt and then myFloat, cool.

244
00:12:48.762 --> 00:12:53.182
And I was about to run the code,
no one stopped me, but I added the break.

245
00:12:53.182 --> 00:12:54.814
So there you go.
My name is Melkey, myInt is 10,

246
00:12:54.814 --> 00:12:56.012
myFloat is 10 float.

247
00:12:56.012 --> 00:12:57.752
Cool, nothing too groundbreaking.

248
00:12:57.752 --> 00:13:00.384
We have a way to infer types and
we can use them.

249
00:13:00.384 --> 00:13:04.110
Another gotcha that I wanna introduce,
a core concept is,

250
00:13:04.110 --> 00:13:05.834
let me just kind of show it.

251
00:13:05.834 --> 00:13:10.722
So let's say I make a new variable
called my friend's name and

252
00:13:10.722 --> 00:13:13.449
let's say it's a string, okay?

253
00:13:13.449 --> 00:13:19.266
And then let's make another
variable of a Boolean, VAR my boo,

254
00:13:19.266 --> 00:13:24.587
type Boolean and then my other end,
var my other end.

255
00:13:24.587 --> 00:13:25.087
And isn't it?

256
00:13:26.457 --> 00:13:29.337
So what why is it compiler yelling at us?

257
00:13:29.337 --> 00:13:30.567
Is the Quran I use?

258
00:13:30.567 --> 00:13:33.177
Okay, let's just use them.

259
00:13:33.177 --> 00:13:36.650
Okay, so format F printf All right?

260
00:13:36.650 --> 00:13:42.756
Let's say my other friends name module s,
my bool, module t for

261
00:13:42.756 --> 00:13:49.212
Boolean and myother int %d, and
let's just append these, okay?

262
00:13:49.212 --> 00:13:54.593
So my friends name, my bool, myother int.

263
00:13:54.593 --> 00:14:00.174
Before I print this, again,
no one called it, didn't break the line.

264
00:14:00.174 --> 00:14:02.526
So let's break this line.

265
00:14:02.526 --> 00:14:04.526
What what is gonna happen here?

266
00:14:06.426 --> 00:14:08.674
We didn't declare these variables.

267
00:14:08.674 --> 00:14:11.066
So nothing is yelling at me.

268
00:14:11.066 --> 00:14:12.036
The code can compile.

269
00:14:14.236 --> 00:14:19.823
If I run this,
my other friends named blank,

270
00:14:19.823 --> 00:14:24.242
my bool false and my other int zero.

271
00:14:25.602 --> 00:14:30.192
I didn't declare false or
0, they're here declared.

272
00:14:30.192 --> 00:14:34.692
And what's happening here is
go as a concept of zero value.

273
00:14:34.692 --> 00:14:38.087
Because we can declare or
initialize the type here and

274
00:14:38.087 --> 00:14:43.446
it will have an underlying data structure,
but we don't assign it a value.

275
00:14:43.446 --> 00:14:48.586
And this is okay with Go,
because it goes down to the 0 value.

276
00:14:48.586 --> 00:14:51.148
So for a string, it's an empty string.

277
00:14:51.148 --> 00:14:56.416
For Boolean it's false for a integer,
it's 0, or a float, it's 0 float.

278
00:14:56.416 --> 00:15:01.770
We'll get into more nuanced examples,
but it's worth mentioning that

279
00:15:01.770 --> 00:15:06.858
if you initialize your variable,
but don't assign it to anything,

280
00:15:06.858 --> 00:15:11.617
you run the risk of having your
code run its logic on the 0 value.

281
00:15:11.617 --> 00:15:15.602
Which isn't bad because you
can do my friend's name Prime,

282
00:15:15.602 --> 00:15:17.956
Brian Prime and, and there you go.

283
00:15:17.956 --> 00:15:22.590
My friend's name is Prime,
my bool is follows my other to 0.

284
00:15:22.590 --> 00:15:26.270
In Go, different data structures
have different zero values.

285
00:15:26.270 --> 00:15:30.922
These ones do not equate to nil,
but other data structures do.

286
00:15:30.922 --> 00:15:32.885
We're gonna go into
some of those examples.

287
00:15:32.885 --> 00:15:35.004
And that's another really good gotcha.

