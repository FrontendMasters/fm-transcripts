WEBVTT

1
00:00:00.410 --> 00:00:05.491
All right, yeah, so I found structs
a little challenging when I first

2
00:00:05.491 --> 00:00:10.740
got introduced to them, and
I haven't even touched on interfaces.

3
00:00:10.740 --> 00:00:14.591
But interface is a concept that
I personally really enjoy, but

4
00:00:14.591 --> 00:00:19.880
I never understood them until I saw how
they were used in a practical application.

5
00:00:19.880 --> 00:00:24.064
So I'm saving that for after,
but just remember, interfaces and

6
00:00:24.064 --> 00:00:27.886
structs are a core component of
how Go implements its logic.

7
00:00:27.886 --> 00:00:30.898
If you look at a lot of
packages that define Go,

8
00:00:30.898 --> 00:00:33.670
they always have an interface type.

9
00:00:33.670 --> 00:00:36.780
I'm gonna go example as to why
that is in just a little bit here.

10
00:00:36.780 --> 00:00:40.738
But I think that's it for structs,
I think they're super important.

11
00:00:40.738 --> 00:00:44.751
The whole thing of pointers and references
is kind of cool too if you never use it.

12
00:00:44.751 --> 00:00:45.951
I know I never did until Go.

13
00:00:45.951 --> 00:00:48.167
So, again, that's one of those
things I started learning.

14
00:00:48.167 --> 00:00:52.391
As I started using go, it just made me
kind of be aware of the depth of software

15
00:00:52.391 --> 00:00:56.220
engineering and software programming
more once I started using it.

16
00:00:56.220 --> 00:00:57.191
Okay, cool.

17
00:00:57.191 --> 00:00:58.256
All that's super nice.

18
00:00:58.256 --> 00:00:58.778
There's one more.

19
00:00:58.778 --> 00:01:02.115
Let's go into imports.

20
00:01:02.115 --> 00:01:03.574
We're doing alive.

21
00:01:03.574 --> 00:01:04.345
Let's go into imports.

22
00:01:04.345 --> 00:01:05.397
A lot of people are asking about this.

23
00:01:05.397 --> 00:01:08.839
So, make a new pack
directly called imports,

24
00:01:08.839 --> 00:01:14.447
but this time the file,
I want you to name it imports.go, okay?

25
00:01:14.447 --> 00:01:18.247
And then for the package instead of main,
you package imports.

26
00:01:19.500 --> 00:01:24.800
All right, so lots of great questions
around importing and exporting in Go.

27
00:01:24.800 --> 00:01:28.540
This is a very, very famous gotcha in Go.

28
00:01:28.540 --> 00:01:32.025
So let's just make, I don't know.

29
00:01:32.025 --> 00:01:34.770
Let's create a new struct.

30
00:01:34.770 --> 00:01:39.148
Let's go Ticket struct, and
it's gonna have two fields, not fun.

31
00:01:39.148 --> 00:01:40.478
Funk, sorry.

32
00:01:40.478 --> 00:01:45.219
Let's go type ticket struck,
and say it's two fields.

33
00:01:45.219 --> 00:01:48.873
Let's say the ticket's gonna have an ID,

34
00:01:48.873 --> 00:01:54.567
which is gonna be an INT and then,
event, which is small e, okay?

35
00:01:54.567 --> 00:01:56.269
So we have both right now.

36
00:01:56.269 --> 00:01:58.802
And then let's create
a function on our ticket.

37
00:01:58.802 --> 00:01:59.520
So func.

38
00:01:59.520 --> 00:02:03.310
Let's make a receiver so T,
Ticket and let's just say,

39
00:02:05.569 --> 00:02:11.874
printEvent that took me way
too long to come up with.

40
00:02:11.874 --> 00:02:13.595
So it's not gonna take any argument.

41
00:02:13.595 --> 00:02:21.298
All it's going to do is do
a fmt.Println on t.event.

42
00:02:21.298 --> 00:02:22.868
Okay, cool.

43
00:02:22.868 --> 00:02:24.478
Ignore the yellow squiggly for a second.

44
00:02:26.648 --> 00:02:32.798
If we go back to the first main.go file we
created, remember this Hello World one.

45
00:02:32.798 --> 00:02:34.978
Let's hop back into that for
just a second.

46
00:02:37.128 --> 00:02:42.546
If you want to import something
from a neighboring package.

47
00:02:42.546 --> 00:02:46.276
You may be thinking, okay, will I do
something like this and then go import?

48
00:02:46.276 --> 00:02:50.616
No, Go doesn't have this notation for
relative imports.

49
00:02:50.616 --> 00:02:54.886
If you go back to our go.mod file here,
this module not only played a role for

50
00:02:54.886 --> 00:02:58.492
us to define something that could
be consumed by other parties,

51
00:02:58.492 --> 00:03:03.636
but it's also how we define our own
packages in our own scoped application.

52
00:03:03.636 --> 00:03:07.957
So go back to main.go, and
right under the F format,

53
00:03:07.957 --> 00:03:11.476
we'll do femgo/name of the package.

54
00:03:11.476 --> 00:03:13.743
We named it, I forget,
what do we named it?

55
00:03:13.743 --> 00:03:15.261
Imports, right?

56
00:03:15.261 --> 00:03:16.196
And this is a bad name.

57
00:03:16.196 --> 00:03:19.304
I probably shouldn't even packages, but

58
00:03:19.304 --> 00:03:22.596
I just hope you get
the gist here from basics.

59
00:03:24.121 --> 00:03:26.470
Changes to femme basics, okay?

60
00:03:26.470 --> 00:03:29.125
We are composite language again.

61
00:03:29.125 --> 00:03:34.205
Import not used, so again,
go does not like when you don't use stuff.

62
00:03:34.205 --> 00:03:36.825
So here,
let's say we create a new ticket, right?

63
00:03:36.825 --> 00:03:41.363
So we can do new ticket is,
To import dot ticket,

64
00:03:41.363 --> 00:03:46.025
and then we can do the ID,
let's say just 123.

65
00:03:46.025 --> 00:03:48.835
But, we cannot have the event fields.

66
00:03:48.835 --> 00:03:53.315
If I put an event and
I put a front end masters course.

67
00:03:54.375 --> 00:03:56.255
I'm really not a creative individual.

68
00:03:56.255 --> 00:03:57.847
We're getting yelled at, right?

69
00:03:57.847 --> 00:04:02.251
It's gonna say a Unknown field event
instruct literal of type imports ticket,

70
00:04:02.251 --> 00:04:07.442
which is strange because if you dig down
into ticket, we have event defined here.

71
00:04:07.442 --> 00:04:10.135
But this is where that capitalization and
making functions and

72
00:04:10.135 --> 00:04:12.202
properties public comes into place.

73
00:04:12.202 --> 00:04:15.607
Even though our ticket struck
is capitalized with a T,

74
00:04:15.607 --> 00:04:20.283
and we've actually used it over here,
we're able to create a new Ticket.

75
00:04:20.283 --> 00:04:24.630
And with the ID but we can't put event
because e is not capitalized here.

76
00:04:24.630 --> 00:04:29.298
So here we can just change
this to be a capital E.

77
00:04:29.298 --> 00:04:32.538
We'll go down here,
change this to capital E as well.

78
00:04:32.538 --> 00:04:37.400
To go back to remain.go, we can just
change this from lowercase to capital and

79
00:04:37.400 --> 00:04:39.619
now we have our new ticket, right?

80
00:04:39.619 --> 00:04:45.744
And we could do format, println,
and I should say new ticket.

81
00:04:45.744 --> 00:04:49.749
And if you run this, again,
this is the root main.go file, so

82
00:04:49.749 --> 00:04:52.113
all you need to do is go run main.go.

83
00:04:52.113 --> 00:04:57.218
You now see we have 1, 2,
3 FEM course as a properties or ticket.

84
00:04:57.218 --> 00:04:59.615
But we have a function
method on that type.

85
00:05:00.645 --> 00:05:04.832
So if we go back up here and
we'll do new ticket.event,

86
00:05:04.832 --> 00:05:09.642
those are the only properties that
we have on our type right now,

87
00:05:09.642 --> 00:05:12.425
on our ticket type or ticket struck.

88
00:05:14.145 --> 00:05:16.957
And again, that is because if
you go back to our imports.go,

89
00:05:16.957 --> 00:05:18.383
our print is not capitalized.

90
00:05:18.383 --> 00:05:24.358
So once we capitalize the P,
and we go back,

91
00:05:24.358 --> 00:05:31.151
we can now call new ticket.Printevent,
right?

92
00:05:31.151 --> 00:05:37.312
And now if we run this code
from course 123 FCM course.

93
00:05:37.312 --> 00:05:39.796
Yes.

94
00:05:39.796 --> 00:05:44.762
&gt;&gt; If you have the qualified
name with the GitHub.com etc,

95
00:05:44.762 --> 00:05:50.695
does that have to be included in
the import for a local package?

96
00:05:50.695 --> 00:05:51.945
&gt;&gt; No, not the whole thing.

97
00:05:51.945 --> 00:05:53.799
&gt;&gt; Okay
&gt;&gt; Only be the actual go.mod name

98
00:05:53.799 --> 00:05:55.405
of the package and define it.

99
00:05:55.405 --> 00:05:58.535
So only like the Go blueprint part or
like the name of the package.

100
00:05:58.535 --> 00:06:00.704
The entire Definition.

101
00:06:00.704 --> 00:06:03.623
Actually, wait, I'm wrong.

102
00:06:03.623 --> 00:06:08.346
As a person importing the package,
it is that whole definition, okay?

103
00:06:08.346 --> 00:06:13.252
So you're right, you would have
to put GitHub.com/, etc, etc.

104
00:06:13.252 --> 00:06:16.263
If I'm someone who depends on it or
whatever,

105
00:06:16.263 --> 00:06:19.207
as the person creating the package, right?

106
00:06:19.207 --> 00:06:22.961
You can maintain that Go mod or
the whole thing as the whole string, or

107
00:06:22.961 --> 00:06:26.999
you can shorten it to be something
aliased when you're developing it.

108
00:06:26.999 --> 00:06:29.612
Because around the whole thing, when
you're kind of creating that software,

109
00:06:29.612 --> 00:06:30.719
can become cumbersome.

110
00:06:30.719 --> 00:06:34.115
I want to say client-facing,
but more on user-facing,

111
00:06:34.115 --> 00:06:37.639
you would have to still
depend on the entire string.

112
00:06:37.639 --> 00:06:45.117
So we do go get, let's say entire name
package, GitHub.com/xyz, whatever.

113
00:06:45.117 --> 00:06:49.807
Let's just say that for example, and
as someone who's gonna consume it,

114
00:06:49.807 --> 00:06:53.313
what you have to do is
literally put GitHub.com/xyz.

115
00:06:53.313 --> 00:06:57.938
But as a reference, you can see
here we have our imports, right?

116
00:06:57.938 --> 00:07:02.817
But we're not putting fembasics/imports,
when we're calling the method,

117
00:07:02.817 --> 00:07:04.723
it's only imports.ticket.

118
00:07:04.723 --> 00:07:05.509
So what would it be?

119
00:07:05.509 --> 00:07:08.148
It would be the last portion
that you're bringing in.

120
00:07:08.148 --> 00:07:14.040
So it would be xyz.MethodFromPackage,
okay?

121
00:07:14.040 --> 00:07:16.788
And to avoid collision, right?

122
00:07:16.788 --> 00:07:18.807
Let's say I have GitHub.com/xyz.

123
00:07:18.807 --> 00:07:22.842
And for whatever reason,
I also named my package xyz.

124
00:07:22.842 --> 00:07:29.437
Which xyz is gonna take, the compiler
says, hey, you can't use another xyz,

125
00:07:29.437 --> 00:07:34.470
so you can actually just add
an alias prepended like GitHub.

126
00:07:34.470 --> 00:07:35.383
That's a bad example.

127
00:07:35.383 --> 00:07:39.413
Outside xyz, right?

128
00:07:39.413 --> 00:07:41.895
And then you can use
the package like that, okay?

129
00:07:41.895 --> 00:07:48.189
So, you can change the name of
the import if in case it's collisions.

130
00:07:48.189 --> 00:07:49.440
Did that answer your question?

131
00:07:49.440 --> 00:07:50.608
Was that, cool?

132
00:07:50.608 --> 00:07:51.669
Thank you.
Yes.

133
00:07:51.669 --> 00:07:55.918
&gt;&gt; So with that, you probably wouldn't
normally name a package imports.

134
00:07:55.918 --> 00:07:58.961
&gt;&gt; You would not.
&gt;&gt; If your imports was all about tickets,

135
00:07:58.961 --> 00:08:01.883
is it normal to see like ticket.ticket?

136
00:08:01.883 --> 00:08:03.191
&gt;&gt; Yeah, great.

137
00:08:03.191 --> 00:08:03.954
Yeah, thank you.

138
00:08:03.954 --> 00:08:08.784
You're right,
don't name any imported package as import.

139
00:08:08.784 --> 00:08:13.434
This was a bad example to try to showcase
the module of how importing works, but

140
00:08:13.434 --> 00:08:16.544
in practicality,
it kind of loses that mojo.

141
00:08:16.544 --> 00:08:20.708
If you were to,
let's say make a new package.

142
00:08:20.708 --> 00:08:22.361
It's a more practical example and

143
00:08:22.361 --> 00:08:24.932
we're gonna see this when
we build our AWS software.

144
00:08:24.932 --> 00:08:28.393
You will have something called database,
right?

145
00:08:28.393 --> 00:08:29.458
As the directory.

146
00:08:29.458 --> 00:08:32.619
And within your database,
you'll have database.go.

147
00:08:32.619 --> 00:08:36.015
And in your package name,
in the scope of your actual application,

148
00:08:36.015 --> 00:08:38.530
it's completely fine to
have package database.

149
00:08:38.530 --> 00:08:41.568
And then functions that define
the type of your database,

150
00:08:41.568 --> 00:08:45.245
functions that define methods
that interact with the database.

151
00:08:45.245 --> 00:08:48.300
But this is a completely reasonable,
I made a typo, but

152
00:08:48.300 --> 00:08:51.425
it's a completely reasonable
way to structure Go code.

153
00:08:51.425 --> 00:08:55.221
And we're gonna go into this and
more once you write more Go code.

