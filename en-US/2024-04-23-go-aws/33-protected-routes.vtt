WEBVTT

1
00:00:00.500 --> 00:00:03.551
So this is a very juicy
kind of function here.

2
00:00:03.551 --> 00:00:10.996
We've created our own middleware in
a very brute sense, that's what we did.

3
00:00:10.996 --> 00:00:16.229
And now what I want to do is apply this
middleware into a protected function.

4
00:00:16.229 --> 00:00:20.652
And it will process if that user can hit
that protected function based on the token

5
00:00:20.652 --> 00:00:21.898
that we get provided.

6
00:00:23.788 --> 00:00:29.908
So we go back up here, let's go ahead and
create a protected function here.

7
00:00:29.908 --> 00:00:35.469
So we'll just do func protected handler,

8
00:00:35.469 --> 00:00:42.734
it will be request events.API
gateway proxy request.

9
00:00:42.734 --> 00:00:50.823
It's gonna return the events API
proxy response and the error.

10
00:00:50.823 --> 00:00:55.295
Okay, and I have a typo and
it's gonna be super simple,

11
00:00:55.295 --> 00:00:58.352
just we're gonna return right away.

12
00:00:58.352 --> 00:01:00.885
Yeah, there it is, response,
I'm gonna say body.

13
00:01:03.921 --> 00:01:09.511
This is a secret path, I don't know.

14
00:01:09.511 --> 00:01:12.764
I mean, we could just keep it like that,

15
00:01:12.764 --> 00:01:17.376
status code is gonna be HTTP status,
okay, and then no.

16
00:01:17.376 --> 00:01:21.660
Okay, and
now I'm gonna bring in our, so case,

17
00:01:21.660 --> 00:01:27.493
when do instead of log in,
it's gonna be protected, okay.

18
00:01:27.493 --> 00:01:32.477
And instead of having all this, what I'm
going to do is return first middleware,

19
00:01:32.477 --> 00:01:34.009
so let's bring that in.

20
00:01:34.009 --> 00:01:40.707
So lambda-func/middleware, okay, cool.

21
00:01:40.707 --> 00:01:45.437
And now we're going to wrap our handler,
that handler function with our middleware.

22
00:01:45.437 --> 00:01:50.207
So we're going to return
middleware.validatejwtmiddleware.

23
00:01:50.207 --> 00:01:52.704
We're going to pass in that
protected handler, and

24
00:01:52.704 --> 00:01:55.027
then here we're going to pass in request.

25
00:01:55.027 --> 00:01:58.915
And this syntax notation in go,
this kind of function and

26
00:01:58.915 --> 00:02:03.372
another request being beside it
is how we chain functions and go.

27
00:02:03.372 --> 00:02:07.692
So you saw when we defined a jwt
middleware, it had that next keyword.

28
00:02:07.692 --> 00:02:14.107
This is how we call the next
function in the chain method.

29
00:02:14.107 --> 00:02:15.487
And we're basically finished.

30
00:02:15.487 --> 00:02:18.769
The only thing we have to do is add
one more line to our cdk deployment,

31
00:02:18.769 --> 00:02:20.602
because we've now added a new route.

32
00:02:20.602 --> 00:02:23.482
We're gonna deploy it,
I'm gonna check if it works.

33
00:02:23.482 --> 00:02:27.912
I don't wanna say like in middleware and
authentication I'm any expert.

34
00:02:27.912 --> 00:02:31.622
This is mostly from the research
I found doing this a few times.

35
00:02:31.622 --> 00:02:33.220
But this is a generic flow and

36
00:02:33.220 --> 00:02:37.562
there's also back in go frameworks that
do a lot of the heavy lifting for you.

37
00:02:37.562 --> 00:02:38.889
So for example chi,

38
00:02:38.889 --> 00:02:43.273
it's a very popular HTTP framework
on go that has the middleware.

39
00:02:43.273 --> 00:02:46.490
That you can do and it'll do a lot
of this work for you as well.

40
00:02:48.997 --> 00:02:53.304
Okay, so that's cool, while we're
in our lambda let's go ahead and

41
00:02:53.304 --> 00:02:55.720
make a build, do not forget to do that.

42
00:02:55.720 --> 00:03:00.803
Let's jump out into our cdk and
let's go into cdk.go,

43
00:03:00.803 --> 00:03:05.360
and I'm basically just
gonna yoink doodle this.

44
00:03:05.360 --> 00:03:11.560
Go here, and instead of login resource,
I'm gonna do protected resource.

45
00:03:11.560 --> 00:03:16.097
Instead of /login,
let's do /protected, and

46
00:03:16.097 --> 00:03:19.670
instead of post, it's gonna be a get.

47
00:03:19.670 --> 00:03:22.292
Okay, that's one thing
that has been in me,

48
00:03:22.292 --> 00:03:26.502
it's making sure I get the right
method attached and will be protected.

49
00:03:33.402 --> 00:03:38.510
All right, moment of truth,
let's hit it with the cdk diff.

50
00:03:41.051 --> 00:03:43.026
Alright, so
let's see what are we doing here.

51
00:03:43.026 --> 00:03:47.633
So we are modifying our lambda function
because we've added more functionality,

52
00:03:47.633 --> 00:03:50.279
cool, it's a different
hash associate to it.

53
00:03:50.279 --> 00:03:53.088
And we're modifying our
API gateway deployment.

54
00:03:53.088 --> 00:03:58.046
We're adding a new res resource protected,
there you go, so that looks good,

55
00:03:58.046 --> 00:04:00.127
let's go ahead and deploy this.

56
00:04:11.348 --> 00:04:17.316
And, I actually forgot to do something,
I got ahead of myself.

57
00:04:17.316 --> 00:04:20.717
We do not need to deploy just yet,
what we can do instead, and

58
00:04:20.717 --> 00:04:23.274
the one thing we have to
include is in our API.

59
00:04:23.274 --> 00:04:27.534
When we log in, we have to include
that create token because right now,

60
00:04:27.534 --> 00:04:30.032
we have no method of creating that token.

61
00:04:30.032 --> 00:04:33.140
So this is the one part I forgot,
but it's super quick.

62
00:04:33.140 --> 00:04:36.710
After we validated the password, we know
this user exists and we're about to send,

63
00:04:36.710 --> 00:04:37.880
hey, HTTP status 500.

64
00:04:37.880 --> 00:04:39.893
We need to do an access token session.

65
00:04:39.893 --> 00:04:46.813
Access token is gonna be
types.createtoken passing our user, okay.

66
00:04:46.813 --> 00:04:52.730
And now once we have this access token,
we're gonna do,

67
00:04:52.730 --> 00:04:58.171
success message is going to be,
format.Sprint F.

68
00:04:58.171 --> 00:05:02.048
I always read a sprint F, but som people
don't like that going to backticks.

69
00:05:02.048 --> 00:05:06.368
I'm going to do curly braces and

70
00:05:06.368 --> 00:05:14.540
the first field here is going
to be access underscore token.

71
00:05:14.540 --> 00:05:20.249
Okay, I'm going to do into this we're
going to do modulo s at the end.

72
00:05:20.249 --> 00:05:23.295
We're gonna just append our access token,
and

73
00:05:23.295 --> 00:05:27.500
then here we're gonna just say
body is gonna be success message.

74
00:05:31.030 --> 00:05:32.510
All right, so if you're gonna
copy that down, that's fine.

75
00:05:32.510 --> 00:05:37.354
I'm gonna go ahead and go back to our
lambda, I'm gonna re build the artifacts.

76
00:05:37.354 --> 00:05:41.266
I'm gonna head back to the cdk and
hit it with the cdk deploy,

77
00:05:41.266 --> 00:05:42.814
it'd be nice to spell.

78
00:05:47.997 --> 00:05:50.709
So now what the expectation is,
before we call it,

79
00:05:50.709 --> 00:05:54.195
I'm gonna go through the whole
flow again of registering login.

80
00:05:54.195 --> 00:05:57.825
And then hitting this protected route,
but we're gonna register a new user.

81
00:05:57.825 --> 00:06:02.115
That new user is going to basically
be registered in our database.

82
00:06:02.115 --> 00:06:03.665
Then we're gonna right away
log in with that user.

83
00:06:03.665 --> 00:06:07.763
We're gonna get back the access token, and
we're gonna hit the protected route, and

84
00:06:07.763 --> 00:06:08.621
then it's done.

85
00:06:13.575 --> 00:06:17.628
&gt;&gt; While this is deploying,
when you created a token,

86
00:06:17.628 --> 00:06:20.215
you specified a signing method.

87
00:06:20.215 --> 00:06:20.789
&gt;&gt; Yes.

88
00:06:20.789 --> 00:06:25.804
&gt;&gt; In the parsing logic, you didn't,
is the jwt package smart enough to

89
00:06:25.804 --> 00:06:31.509
parse it without telling it which signing
method was used or create a jwt token?

90
00:06:31.509 --> 00:06:35.942
&gt;&gt; No, so the jwt parsing method is not
smart enough to understand what algorithm

91
00:06:35.942 --> 00:06:36.759
that parses.

92
00:06:36.759 --> 00:06:40.693
You have to add that extra logic,
I chose to omit that for

93
00:06:40.693 --> 00:06:42.889
constraints of time and such.

94
00:06:42.889 --> 00:06:47.775
However, there is a portion where
you can actually hit the headers

95
00:06:47.775 --> 00:06:52.585
endpoint with the alg,
like we saw in the definition jwt tokens.

96
00:06:52.585 --> 00:06:55.193
So if I go back here and go back a slide,

97
00:06:55.193 --> 00:06:59.937
you can actually access the alg
property here from the token string.

98
00:06:59.937 --> 00:07:04.437
And compared it to the signature method
that you expect versus the signature

99
00:07:04.437 --> 00:07:06.626
method or the algorithm you expect.

100
00:07:06.626 --> 00:07:09.869
Versus the algorithm that's used
in the token you're receiving.

101
00:07:09.869 --> 00:07:11.937
But it would be added in
the callback function.

102
00:07:11.937 --> 00:07:15.796
So a callback on when we do jwt parse,
when we're returning that secret shrink,

103
00:07:15.796 --> 00:07:17.997
that's when you add that logic.

104
00:07:17.997 --> 00:07:23.665
And I have the code on Github
has that implemented so.

105
00:07:23.665 --> 00:07:27.234
Okay, cool moment of truth,
so let's go ahead and

106
00:07:27.234 --> 00:07:31.147
register a new user,
instead of Mark G, I don't know.

107
00:07:31.147 --> 00:07:34.560
Let's go prime g, I only know four people.

108
00:07:34.560 --> 00:07:39.242
So prime G the passwords can
be I love prime fitting.

109
00:07:39.242 --> 00:07:42.892
We're going to register that,
I'm joking, I love you, prime.

110
00:07:42.892 --> 00:07:46.712
Successfully registered a user, I think
we've already validated that we're going

111
00:07:46.712 --> 00:07:49.962
to have a login, a method for that,
or an entry for that in our database.

112
00:07:51.002 --> 00:07:52.412
Now we're going to log in.

113
00:07:52.412 --> 00:07:53.499
And before when we logged in,

114
00:07:53.499 --> 00:07:56.172
we got the same strings that
successfully logged in our user.

115
00:07:56.172 --> 00:07:58.795
Here, what we expect is when we log in,

116
00:07:58.795 --> 00:08:04.084
we will see a access token appended,
there you go, we got an access token.

117
00:08:04.084 --> 00:08:08.966
It says beautiful string all the way
at the bottom, so it's actually users.

118
00:08:08.966 --> 00:08:13.319
So don't clear console, we're gonna find
there's gonna be few things, so first,

119
00:08:13.319 --> 00:08:14.776
let's copy this endpoint.

120
00:08:14.776 --> 00:08:18.231
Well, you know what, I'm going to
write from scratch just because it's

121
00:08:18.231 --> 00:08:19.746
already getting kind of messy.

122
00:08:19.746 --> 00:08:22.875
So we're going to do curl- x get,
remember,

123
00:08:22.875 --> 00:08:27.026
we specify the protected method
to be a get instead of a post.

124
00:08:27.026 --> 00:08:28.614
We're going to paste the endpoint,

125
00:08:28.614 --> 00:08:31.576
my endpoint is going to look
different than your endpoint.

126
00:08:31.576 --> 00:08:36.656
And it's going to be /protected, okay,
because that's the route we've defined it.

127
00:08:36.656 --> 00:08:37.876
And then we're going to do two headers.

128
00:08:37.876 --> 00:08:41.691
So one is going to be the header for

129
00:08:41.691 --> 00:08:46.063
content type, application/json.

130
00:08:47.693 --> 00:08:52.592
Okay, and then we have a second
header that we're going to add,

131
00:08:52.592 --> 00:08:55.415
which is going to be authorization.

132
00:08:55.415 --> 00:09:01.686
And this authorization is going
to be bearer, B E A R E R.

133
00:09:01.686 --> 00:09:06.667
And we're gonna then copy and
paste this generated token that

134
00:09:06.667 --> 00:09:10.898
we've created,
I'm gonna append it here, okay.

135
00:09:10.898 --> 00:09:15.393
And then we're gonna close this,
and if we send this,

136
00:09:15.393 --> 00:09:18.334
this is a secret path, so it works.

137
00:09:18.334 --> 00:09:20.561
This literally is how
our jwt nuller works.

138
00:09:20.561 --> 00:09:22.901
And you may be asking yourself,
well, what's the big deal?

139
00:09:22.901 --> 00:09:30.781
If I just change one from capital A to Q,
and I send this, internal server error.

140
00:09:30.781 --> 00:09:32.882
You're unauthorized, right?

