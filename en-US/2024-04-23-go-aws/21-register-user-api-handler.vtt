WEBVTT

1
00:00:00.000 --> 00:00:02.826
Since we worked on the database layer,

2
00:00:02.826 --> 00:00:07.632
the next step logically is to
actually work on the register layer.

3
00:00:07.632 --> 00:00:10.215
It's gonna follow the exact same suite,
so we're gonna do func,

4
00:00:10.215 --> 00:00:11.423
we're gonna have a receiver.

5
00:00:11.423 --> 00:00:14.280
This is gonna be to our ApiHandler, and

6
00:00:14.280 --> 00:00:17.924
we're gonna call RegisterUserHandler,
okay?

7
00:00:19.884 --> 00:00:24.712
And this RegisterUserHandler is gonna
take an event of types.RegisterUser,

8
00:00:24.712 --> 00:00:28.541
because we've specified that before,
we have the JSON tags.

9
00:00:28.541 --> 00:00:31.976
So when we get a request from a client
with a username and password as JSON tags,

10
00:00:31.976 --> 00:00:33.861
we know exactly what
we wanna do with this.

11
00:00:36.546 --> 00:00:41.097
Okay, and now we just basically
can do some logic to check,

12
00:00:41.097 --> 00:00:47.030
if an event.Username is blank or
empty, or event.Password, same thing.

13
00:00:49.123 --> 00:00:52.483
And what we can do is we have to
return error, so we're gonna return.

14
00:00:52.483 --> 00:00:54.056
Let's add that return statement over here.

15
00:00:57.989 --> 00:01:02.518
I'm gonna return fmt.Errorf.

16
00:01:02.518 --> 00:01:11.293
I'm gonna say request, Has empty
parameters, or something like that.

17
00:01:11.293 --> 00:01:15.605
You can get spicy with how you want
to create your error statements.

18
00:01:15.605 --> 00:01:18.663
But these get bubbled back to the client,
so this should be kind of helpful.

19
00:01:18.663 --> 00:01:22.070
And the first thing we wanna do is
call that first function we define.

20
00:01:22.070 --> 00:01:26.521
Does a user with this
username already exist?

21
00:01:29.763 --> 00:01:34.642
Okay, so what we can do is we can call

22
00:01:34.642 --> 00:01:39.370
api.dbStore.DoesUserExist.

23
00:01:39.370 --> 00:01:41.985
So that is where we're using
that piping down, right?

24
00:01:41.985 --> 00:01:46.953
We can just call these methods on our
ApiHandler directly to our dbHandler.

25
00:01:46.953 --> 00:01:50.908
And now our dbHandler is gonna
handle all the logic we just wrote

26
00:01:50.908 --> 00:01:55.247
without really getting into the weeds
of our API letter here, okay?

27
00:01:55.247 --> 00:01:58.868
You can put in the event.Username,
cuz that's what it expects.

28
00:01:58.868 --> 00:02:04.927
And we know that DoesUserExists returns
two values, a Boolean and an error.

29
00:02:04.927 --> 00:02:10.596
So what we can do is userExists,
error, okay?

30
00:02:10.596 --> 00:02:13.180
It's gonna complain these are unused.

31
00:02:13.180 --> 00:02:17.280
So what we can do is if
error does not equal to nil,

32
00:02:17.280 --> 00:02:20.593
we can again just return fmt.Errorf.

33
00:02:20.593 --> 00:02:23.910
And again, you can make a bunch
of helper functions to do this,

34
00:02:23.910 --> 00:02:26.486
I wanna be just more explicit for
this workshop.

35
00:02:26.486 --> 00:02:31.845
So a user with that username
already exists, okay?

36
00:02:31.845 --> 00:02:34.972
And in here, we can say,
does the user exist?

37
00:02:34.972 --> 00:02:42.255
So if userExists, right, meaning true,
our return statement is going to be true.

38
00:02:42.255 --> 00:02:46.313
Actually, this should go down here.

39
00:02:46.313 --> 00:02:50.707
And this error statement should
just be return fmt.Errorf.

40
00:02:50.707 --> 00:02:55.114
And you can put internal server error,
you can do whatever you want.

41
00:02:55.114 --> 00:02:59.467
What I like to do, if there's an error
that stems, so I didn't create the error,

42
00:02:59.467 --> 00:03:03.584
if it comes from a third-party library,
I'd like to surface that error up.

43
00:03:03.584 --> 00:03:07.075
And the way you can do that is the exact
same thing with format specifiers.

44
00:03:07.075 --> 00:03:09.814
Remember the modular string,
modular float, modular int,

45
00:03:09.814 --> 00:03:11.928
there's a specific one for
wrapping an error.

46
00:03:11.928 --> 00:03:17.307
So here, we can put there was
an error checking if user exists,

47
00:03:17.307 --> 00:03:20.464
which is a really bad error message.

48
00:03:20.464 --> 00:03:23.558
I don't know what happened, how is
the developer going to know what happened,

49
00:03:23.558 --> 00:03:24.355
right, or anyone?

50
00:03:24.355 --> 00:03:28.671
So what you can do is put this
module w and put the error.

51
00:03:28.671 --> 00:03:32.924
And now we're basically gonna wrap
that error that we get from the call

52
00:03:32.924 --> 00:03:35.317
to DynamoDB up, we're gonna wrap it.

53
00:03:35.317 --> 00:03:37.934
If there's an error, check if
the user exists, see what we add, and

54
00:03:37.934 --> 00:03:38.986
this all gets surfaced up.

55
00:03:41.648 --> 00:03:42.248
Cool, and

56
00:03:42.248 --> 00:03:47.004
here, if the user exists, let's return
a user with that username already exists.

57
00:03:47.004 --> 00:03:51.697
And if we hit this point in our code,
we know that a user does not exist,

58
00:03:51.697 --> 00:03:54.653
right, does not exist with this username.

59
00:03:54.653 --> 00:03:57.626
So the next logical step
will be to insert this user.

60
00:03:57.626 --> 00:04:01.257
So we're gonna be api.dbStore.InsertUser.

61
00:04:01.257 --> 00:04:07.579
We're gonna put in our entire event,
cuz it's a type register user,

62
00:04:07.579 --> 00:04:11.339
and then all we need to do is error, okay?

63
00:04:11.339 --> 00:04:16.289
And if our error does not equal to nil,

64
00:04:16.289 --> 00:04:21.401
we're gonna say return fmt.Errorf.

65
00:04:21.401 --> 00:04:24.065
Again, we can put another,
there was an error inserting the user or

66
00:04:24.065 --> 00:04:26.003
registering the user,
whatever you wanna say.

67
00:04:26.003 --> 00:04:31.173
So we can put error registering the user,
we can wrap that error,

68
00:04:31.173 --> 00:04:35.600
and we can wrap here,
otherwise we can just return nil.

69
00:04:42.841 --> 00:04:45.878
Okay, so
it's a pretty straightforward function,

70
00:04:45.878 --> 00:04:48.178
just some layer to check if it's empty.

71
00:04:48.178 --> 00:04:52.836
We check if that user exists, and
then we check if we can insert that user.

72
00:04:52.836 --> 00:04:55.067
We're gonna do some basic
level error handling, okay?

73
00:04:59.405 --> 00:05:02.041
And that's all we have to do for
our Go portion.

74
00:05:02.041 --> 00:05:06.288
The only part that remains is actually
writing the code that defines our

75
00:05:06.288 --> 00:05:11.125
DynamoDB, cuz again, that has yet to be
constructed, that has yet to be built.

76
00:05:11.125 --> 00:05:15.244
So what I like to do is at this point,
I like to just do make build.

77
00:05:19.717 --> 00:05:23.714
I'm gonna create a new artifact files for
our lambda and the zip.

78
00:05:23.714 --> 00:05:29.514
And if we go back down to our go_cdk_test,
or just go_cdk file,

79
00:05:29.514 --> 00:05:36.366
we're gonna just basically create a new
table, create DB table here, okay?

80
00:05:37.396 --> 00:05:41.311
And so what we need is not the aws lambda,
I just like to use this print statement or

81
00:05:41.311 --> 00:05:42.476
this input statement.

82
00:05:42.476 --> 00:05:46.539
We can awsdynamodb, okay?

83
00:05:46.539 --> 00:05:52.046
If you go back down,
we can define our table, okay?

84
00:05:52.046 --> 00:05:56.324
It's gonna be awsdynamodb,
I'm gonna put NewTable.

85
00:05:56.324 --> 00:06:00.159
And again, it's gonna take a very
familiar set of properties and

86
00:06:00.159 --> 00:06:03.099
arguments that we define
in the lambda function.

87
00:06:03.099 --> 00:06:07.421
So we're gonna take our stack,
cuz it's all gonna exist in one stack, and

88
00:06:07.421 --> 00:06:08.323
then the name.

89
00:06:08.323 --> 00:06:15.230
So we can do jsii.String,
we can put myUserTable.

90
00:06:17.204 --> 00:06:18.466
Remove that, okay?

91
00:06:18.466 --> 00:06:22.693
And put a reference to
awsdynamodb.TableProps.

92
00:06:22.693 --> 00:06:26.729
And the real nice thing is when you
get these table props, you can just

93
00:06:26.729 --> 00:06:31.193
dive into them and see exactly what
they expect for values to input, right?

94
00:06:31.193 --> 00:06:33.958
As you can see here, we have
the partition key, which is an attribute.

95
00:06:33.958 --> 00:06:37.131
And that's the kind of main key,
that main identifier for

96
00:06:37.131 --> 00:06:40.306
inserting values into DynamoDB,
taking values out, and

97
00:06:40.306 --> 00:06:44.027
then also the table name itself,
what we're gonna name our table.

98
00:06:44.027 --> 00:06:47.159
So I always recommend if there's
a new piece of info that you're

99
00:06:47.159 --> 00:06:49.769
going to be using,
always check these prop structs,

100
00:06:49.769 --> 00:06:53.019
or these props if you're using it
in a CDK in a different language.

101
00:06:53.019 --> 00:06:55.281
&gt;&gt; Did you have to do another
import to get that to work?

102
00:06:55.281 --> 00:06:56.663
&gt;&gt; Yes, I think I missed that part.

103
00:06:56.663 --> 00:06:58.905
Yep, sorry, right here.

104
00:06:58.905 --> 00:07:03.045
Yep, so it comes from
the exact same awscdk/v2, but

105
00:07:03.045 --> 00:07:06.378
it's not AWS lambda, it's AWS DynamoDB.

106
00:07:08.696 --> 00:07:11.675
And then the last piece of info
is gonna follow the similar suit,

107
00:07:11.675 --> 00:07:12.956
it's gonna come from v2.

108
00:07:16.789 --> 00:07:21.231
Cool, all right, so let's go ahead and
build this partition key.

109
00:07:21.231 --> 00:07:24.573
So this partition key,
it's gonna obviously, yes, question?

110
00:07:24.573 --> 00:07:28.373
&gt;&gt; Before we move on, is there
a relationship between myUserTable and

111
00:07:28.373 --> 00:07:32.655
the const that you defined in the other
one, or is it a completely unique ID?

112
00:07:32.655 --> 00:07:36.726
&gt;&gt; This user table will define the table
as it stands in terms of resources for

113
00:07:36.726 --> 00:07:41.537
your cloud formation, but the actual table
name is where we're gonna use that const.

114
00:07:41.537 --> 00:07:45.244
But to answer your question,
there is no strong relationship.

115
00:07:45.244 --> 00:07:48.975
You typically maybe pull those from
.env file to share them across.

116
00:07:48.975 --> 00:07:49.757
In this case,

117
00:07:49.757 --> 00:07:54.273
we're just gonna basically re-declare
that user table from the previous file.

118
00:07:57.005 --> 00:08:00.357
Cool, so here it's gonna take
an AWS DynamoDB attribute,

119
00:08:00.357 --> 00:08:04.725
which we saw from the table props, and
then it's gonna be the name of the key.

120
00:08:04.725 --> 00:08:06.472
And this is pretty important, right?

121
00:08:06.472 --> 00:08:10.133
String, it has to be username,
cuz that's what we base our logic to do.

122
00:08:10.133 --> 00:08:12.490
We base our logic with
the primary key as username.

123
00:08:12.490 --> 00:08:15.895
When we check if a user exists or
if we wanna enter a user,

124
00:08:15.895 --> 00:08:18.511
we're checking by this username, okay?

125
00:08:18.511 --> 00:08:21.342
And the type,
AWS just expects a type from here.

126
00:08:21.342 --> 00:08:25.543
So we can do AWS,
you can put a binary number string.

127
00:08:25.543 --> 00:08:29.443
I'm gonna put a string, okay, and
the last value is the table name.

128
00:08:29.443 --> 00:08:35.309
So TableName: jsii.String, and
this is gonna be userTable.

129
00:08:35.309 --> 00:08:38.354
And this is exactly what
that question was earlier.

130
00:08:38.354 --> 00:08:41.973
Typically, you'd probably wanna put
a .env that's puling that value so

131
00:08:41.973 --> 00:08:46.121
you can share so you don't have this case,
or maybe Amazon secrets or whatever it is.

132
00:08:46.121 --> 00:08:48.673
But right now we're just kinda
hard coding these values.

133
00:08:48.673 --> 00:08:53.171
We wanna make sure that userTable is, in
fact, the constant we have declared here.

134
00:08:53.171 --> 00:09:00.079
So userTable, right, userTable, go back,
userTable, so it definitely matches.

135
00:09:01.199 --> 00:09:03.271
Okay, now there's one more thing.

136
00:09:03.271 --> 00:09:06.498
So you can see here, there's something
different between our lambda and

137
00:09:06.498 --> 00:09:07.025
our table.

138
00:09:07.025 --> 00:09:11.233
Our table, we're returning this value,
this table variable, right?

139
00:09:11.233 --> 00:09:12.935
But we didn't do that for the lambda.

140
00:09:12.935 --> 00:09:17.132
And the reason for that is cuz we
didn't have to, there was no need.

141
00:09:17.132 --> 00:09:18.519
But here there is a need.

142
00:09:18.519 --> 00:09:23.376
And the need for that is because our table
as is has no way of being communicated

143
00:09:23.376 --> 00:09:24.957
by our lambda function.

144
00:09:24.957 --> 00:09:30.170
Yes, they exist in the same stack,
but in terms of actual infrastructure,

145
00:09:30.170 --> 00:09:34.253
our lambda has no idea that
the Dynamo DB table even exists.

146
00:09:34.253 --> 00:09:36.830
It doesn't have the right
permission to communicate with it.

147
00:09:36.830 --> 00:09:40.028
So what I wanna do is
you can put myFunction,

148
00:09:40.028 --> 00:09:43.498
you can declare that
from awslambda function.

149
00:09:43.498 --> 00:09:50.011
And in here, we're gonna do
table.GrantReadWriteData to myFunction.

150
00:09:53.566 --> 00:09:59.128
And what we're saying here is our DynamoDB
table has a method that we're gonna call.

151
00:09:59.128 --> 00:10:02.340
I'm basically saying the role
that our lambda has,

152
00:10:02.340 --> 00:10:06.647
it's gonna have permissions to read
that data and grant that data, or

153
00:10:06.647 --> 00:10:09.788
read that data and
write that data, my apologies.

154
00:10:09.788 --> 00:10:12.482
Cuz if you don't have this and
you try to call a function,

155
00:10:12.482 --> 00:10:16.262
you're gonna get permission denied,
and permission issues are a nightmare.

156
00:10:16.262 --> 00:10:21.479
So this is an important step into
making sure it works correctly.

