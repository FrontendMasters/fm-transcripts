WEBVTT

1
00:00:00.060 --> 00:00:04.607
Now is gonna be a good time to kinda
go into more of the application

2
00:00:04.607 --> 00:00:08.610
portion that we're going
to write with CDK.

3
00:00:08.610 --> 00:00:11.656
Let's go switch over to our coding editor.

4
00:00:11.656 --> 00:00:15.350
[COUGH] So
here I have like an empty directory.

5
00:00:15.350 --> 00:00:18.990
There is quite literally nothing here.

6
00:00:18.990 --> 00:00:20.619
But that's gonna change in a quick second.

7
00:00:20.619 --> 00:00:24.771
So what we're going to do is
first validate that we have

8
00:00:24.771 --> 00:00:29.468
everything installed, so
you can do aws -version, right,

9
00:00:29.468 --> 00:00:34.460
to make sure you have the correct
AWS version or AWS --version.

10
00:00:34.460 --> 00:00:38.429
There you go, and
we can do CDK --version as well.

11
00:00:38.429 --> 00:00:40.090
So those are the versions I'm using.

12
00:00:40.090 --> 00:00:44.996
So if you're gonna map it to yours,
you don't need to be on the exact build

13
00:00:44.996 --> 00:00:50.930
version, but it may help with what I'm
using and certain intricacies there.

14
00:00:50.930 --> 00:00:52.958
So with CDK, like I said,

15
00:00:52.958 --> 00:00:58.232
it's a framework built by Amazon
to build infrastructure as code.

16
00:00:58.232 --> 00:01:02.309
And CDK offers us this way to
kind of spin up our project.

17
00:01:02.309 --> 00:01:05.533
If you've ever used a Create React app or
anything like that,

18
00:01:05.533 --> 00:01:07.589
this is gonna be very similar with CDK.

19
00:01:07.589 --> 00:01:12.211
So to get started, we're going to do
cdk init, and we're gonna do app, and

20
00:01:12.211 --> 00:01:16.177
we're gonna do -- language,
and we can put go.

21
00:01:16.177 --> 00:01:22.270
So before I run this command,
CDK was natively created with TypeScript.

22
00:01:22.270 --> 00:01:27.599
The AWS team created CDK and
you use TypeScript to use this framework.

23
00:01:27.599 --> 00:01:31.635
And fun fact,
when I wanted to first create this course,

24
00:01:31.635 --> 00:01:34.561
I had CDK with TypeScript involved.

25
00:01:34.561 --> 00:01:38.085
But I thought to myself,
is that really what I wanna do here?

26
00:01:38.085 --> 00:01:43.004
Because it's a Go plus AWS course, not a
Go plus Typescript plus AWS course, right?

27
00:01:43.004 --> 00:01:46.388
And so
we're gonna use Go to write our CDK.

28
00:01:46.388 --> 00:01:48.996
So go ahead and press Enter.

29
00:01:48.996 --> 00:01:53.066
You can see that on the left screen there,
we've generated a bunch new files.

30
00:01:53.066 --> 00:01:55.613
I'm gonna go walk through
every single one of these,

31
00:01:55.613 --> 00:01:59.078
but this basically allows us to start
rolling with our CDK application.

32
00:02:00.328 --> 00:02:02.590
I wanna take a minute to
look at this message here.

33
00:02:02.590 --> 00:02:05.599
So you can see here applying
project template app for go.

34
00:02:05.599 --> 00:02:07.949
And it says welcome to you CDK Go project.

35
00:02:09.039 --> 00:02:12.036
This is a blank project for
CDK development with Go.

36
00:02:12.036 --> 00:02:16.950
The cdk.json file tells the CDK
toolkit how to execute your app.

37
00:02:16.950 --> 00:02:18.518
So you're gonna check that out.

38
00:02:18.518 --> 00:02:22.652
And then some useful commands and
these are pretty useful commands, right?

39
00:02:22.652 --> 00:02:25.012
The first one is cdk deploy, and

40
00:02:25.012 --> 00:02:30.006
this is gonna deploy our stack to
our default AWS account/region.

41
00:02:30.006 --> 00:02:32.448
And this is an important note here.

42
00:02:32.448 --> 00:02:37.262
It's the default, the one you have set
up on your .aws credentials files.

43
00:02:37.262 --> 00:02:40.092
That's where it's all going to map, okay?

44
00:02:40.092 --> 00:02:45.908
And there's a cdk diff, and this compares
the deployed stack with the current state.

45
00:02:45.908 --> 00:02:50.844
So CDK has a concept of keeping
state of your deployment.

46
00:02:50.844 --> 00:02:54.535
And this is super helpful in case
you deploy something incorrectly,

47
00:02:54.535 --> 00:02:56.587
in case you make a mistake.

48
00:02:56.587 --> 00:02:57.670
Again, like I said,

49
00:02:57.670 --> 00:03:01.043
if you're doing a lightweight
infrastructure like S3 buckets,

50
00:03:01.043 --> 00:03:05.642
not a big deal, not the end of the world,
you can tear that down fairly quickly.

51
00:03:05.642 --> 00:03:09.995
However, there's instances where you
have to be even more cautious than

52
00:03:09.995 --> 00:03:11.898
using the UI and typing things.

53
00:03:11.898 --> 00:03:15.595
As programmers, like I said, we all
make mistakes, and when we create code,

54
00:03:15.595 --> 00:03:18.856
we're gonna write something that
maybe we didn't intend to write.

55
00:03:18.856 --> 00:03:23.043
So cdk diff is going to allow us to be
basically understand the difference of

56
00:03:23.043 --> 00:03:26.173
what our preview state is
versus what we want to deploy.

57
00:03:26.173 --> 00:03:30.084
And then we have cdk Synth, which
synthesizes the CloudFormation template.

58
00:03:30.084 --> 00:03:35.248
Again, like I said earlier, CDK is
communicating with CloudFormation under

59
00:03:35.248 --> 00:03:40.410
the hood, and it's creating our code,
written in Go, to be consumed and used

60
00:03:40.410 --> 00:03:46.341
by cloud formation in the flat file kind
of semantics that CloudFormation uses.

61
00:03:46.341 --> 00:03:49.295
And then there's go test,
run unit tests, okay?

62
00:03:49.295 --> 00:03:52.590
So let's actually jump
into the cdk.json file.

63
00:03:52.590 --> 00:03:56.321
Now, this is a large file with a bunch
of dependencies, a bunch of stuff here.

64
00:03:56.321 --> 00:03:59.331
The only thing we really
care about is this app line.

65
00:03:59.331 --> 00:04:04.122
This is what actually is being
executed when we run our command, and

66
00:04:04.122 --> 00:04:08.439
this is a go mod download and
go run go_cdk.go.

67
00:04:08.439 --> 00:04:13.019
So if you recognize that first
portion over here, the go run,

68
00:04:13.019 --> 00:04:18.587
when we are running and using go,
we were writing go run main.go, right?

69
00:04:18.587 --> 00:04:20.649
And essentially it's doing
the similar thing here.

70
00:04:20.649 --> 00:04:26.902
The file name is go_cdk.go, but it's
executing the entry point to this file.

71
00:04:28.142 --> 00:04:31.287
And I'm gonna show you this in a bit.

72
00:04:31.287 --> 00:04:35.902
The next part is this go_cdk_test.go file.

73
00:04:35.902 --> 00:04:38.522
It's all commented out.

74
00:04:38.522 --> 00:04:40.952
We're not gonna be
actually using this file.

75
00:04:40.952 --> 00:04:43.809
So we're essentially not gonna
be testing our infrastructure.

76
00:04:43.809 --> 00:04:47.429
We're gonna be relying on CDK deploy
to test our infrastructure for us.

77
00:04:47.429 --> 00:04:52.340
However, it's worth noting that this
is a really good example of how you

78
00:04:52.340 --> 00:04:56.269
can test your infrastructure
in using tests, right?

79
00:04:56.269 --> 00:05:00.849
You can have an assertion, make sure
that it is what you expect it to do.

80
00:05:00.849 --> 00:05:03.813
So I do encourage you all to check it out.

81
00:05:03.813 --> 00:05:06.643
Personally, testing
infrastructure is tough.

82
00:05:06.643 --> 00:05:09.816
You really don't know what's
gonna happen once you deploy,

83
00:05:09.816 --> 00:05:13.601
but there are levels of security you
can implement to really validate what

84
00:05:13.601 --> 00:05:16.863
you're deploying is what you
want to deploy, all right?

85
00:05:16.863 --> 00:05:23.744
And then we will go into the meat and
potatoes, which is this go_cdk.go file.

86
00:05:23.744 --> 00:05:27.085
And this is really where we're going
to be doing a lot of our stuff.

87
00:05:27.085 --> 00:05:28.472
And there's a lot of code here.

88
00:05:28.472 --> 00:05:33.555
And if you've never seen CDK, it could
look pretty overwhelming, especially if

89
00:05:33.555 --> 00:05:38.729
we go from our toy Go examples to what we
got going on now, it's a little different.

90
00:05:38.729 --> 00:05:42.760
And you can see right away
we have some errors, right?

91
00:05:42.760 --> 00:05:45.364
Our compiler doesn't know
what we're trying to get.

92
00:05:45.364 --> 00:05:47.882
So the first thing I would
like you to do is, in here,

93
00:05:47.882 --> 00:05:49.384
you can run the command go get.

94
00:05:51.114 --> 00:05:53.879
When you run go get, it's gonna
download all those dependencies for us.

95
00:05:53.879 --> 00:05:56.749
It's gonna download everything
that we need to run our code.

96
00:05:56.749 --> 00:06:01.884
And you can see here the compiler is like,
okay, now I'm Gucci, now I'm fine.

97
00:06:01.884 --> 00:06:06.748
So like I said earlier, anytime you
get presented with a new file in Go,

98
00:06:06.748 --> 00:06:09.911
instead of kind of
navigating away yourself,

99
00:06:09.911 --> 00:06:13.963
always start with this func
main in the package main.

100
00:06:13.963 --> 00:06:17.332
Cuz this is essentially the source
of truth of what gets executed.

101
00:06:17.332 --> 00:06:19.493
So this is where I'm gonna start.

102
00:06:19.493 --> 00:06:25.184
The first thing you may notice is we
have this defer function on jsii.Close.

103
00:06:25.184 --> 00:06:27.639
Like what is defer, what is jsii?

104
00:06:27.639 --> 00:06:32.997
I'm gonna start with explaining
what the jsii is, or jsi.

105
00:06:32.997 --> 00:06:38.981
I might be mispronouncing it, but
conceptually, it is another framework that

106
00:06:38.981 --> 00:06:45.161
AWS built that allows us to use CDK with
a language that's not TypeScript, okay?

107
00:06:45.161 --> 00:06:49.536
It's basically gonna transpile our
code written in Go, .NET, Python,

108
00:06:49.536 --> 00:06:52.523
Java, whatever you want to
write your CDK code in,

109
00:06:52.523 --> 00:06:56.075
to communicate with TypeScript
under the hood, all right?

110
00:06:56.075 --> 00:07:00.315
So again, if you use TypeScript
natively to write your CDK code,

111
00:07:00.315 --> 00:07:02.715
you don't have to worry about this.

112
00:07:02.715 --> 00:07:05.769
But if you're going to use another
language that's supported,

113
00:07:05.769 --> 00:07:08.053
you're going to have to
use the jsii framework.

114
00:07:08.053 --> 00:07:13.623
And this comes kinda built in when you run
the cdk init command that we just ran.

115
00:07:13.623 --> 00:07:19.391
And what this defer does here is defer
basically tells our Go code that I want

116
00:07:19.391 --> 00:07:26.051
you to run this line of code, this
execution after everything else has run.

117
00:07:26.051 --> 00:07:28.697
Basically, I want this to
be done at the end, okay?

118
00:07:28.697 --> 00:07:30.610
Even though it's defined up here,

119
00:07:30.610 --> 00:07:35.139
you could have existing processes, things
that are running in the background, and

120
00:07:35.139 --> 00:07:38.294
you want your defer to execute
when those are done, okay?

121
00:07:38.294 --> 00:07:41.938
And the purpose of this,
if you kind of dive into this close,

122
00:07:41.938 --> 00:07:44.652
it's basically a kernel that's running and

123
00:07:44.652 --> 00:07:48.948
it's processing the code that we're
writing into TypeScript for us.

124
00:07:48.948 --> 00:07:53.055
So when we do this close, we're basically
saying, hey, we finished the execution,

125
00:07:53.055 --> 00:07:56.547
we've synthesized our application,
we've done all the transpiling,

126
00:07:56.547 --> 00:07:59.897
we've deployed it to AWS, now you
can close the kernel or the client.

