WEBVTT

1
00:00:00.000 --> 00:00:04.144
We just deployed our first lambda,
it's pretty exciting, and

2
00:00:04.144 --> 00:00:05.994
that's kind of Chapter 0.

3
00:00:05.994 --> 00:00:10.421
So if you're following along with
the git project that's hosted on

4
00:00:10.421 --> 00:00:16.181
mulkydev/frontendmasters, that's gonna
be the code that's on Chapter 0 branch.

5
00:00:16.181 --> 00:00:18.928
And I think I like kind of
breaking up the chapters.

6
00:00:18.928 --> 00:00:23.624
They're not really like, core chapters in
terms of introducing anything novel, but

7
00:00:23.624 --> 00:00:26.453
I just think it's a good
timestamp that now, okay,

8
00:00:26.453 --> 00:00:29.503
we've deployed a very slight
baby functional lambda.

9
00:00:29.503 --> 00:00:30.695
Let's pause here,

10
00:00:30.695 --> 00:00:35.049
let's figure out the next piece of
infrastructure that we wanna deploy.

11
00:00:35.049 --> 00:00:38.413
And I'm gonna talk about what
we're gonna do in this chapter.

12
00:00:38.413 --> 00:00:41.529
We're gonna add better project structure,
number one.

13
00:00:41.529 --> 00:00:45.256
Right now we just have a main file,
a bunch of bootstraps, some executables,

14
00:00:45.256 --> 00:00:46.282
it's kind of a mess.

15
00:00:46.282 --> 00:00:50.360
We're gonna create an API handler,
we're gonna create a database handler,

16
00:00:50.360 --> 00:00:53.154
an app struct, and
we're gonna register our users.

17
00:00:53.154 --> 00:00:55.417
So that's the goal of this chapter,

18
00:00:55.417 --> 00:00:59.218
we're gonna actually now
register the users into DynamoDB.

19
00:00:59.218 --> 00:01:06.102
Cool, let's head back into our function,
just go right into it.

20
00:01:06.102 --> 00:01:10.594
And actually,
the very first thing I wanna do is running

21
00:01:10.594 --> 00:01:15.768
the goBuild command and
zipping it every time you make a change.

22
00:01:15.768 --> 00:01:20.809
I mean,
it's not the best experience, right?

23
00:01:20.809 --> 00:01:26.228
So let's actually make something
that makes all that helps us do it.

24
00:01:26.228 --> 00:01:32.357
So let's seed back into our lambda, and
I want you to make a file called MakeFile.

25
00:01:32.357 --> 00:01:36.249
If you ever used MakeFiles,
I personally like them.

26
00:01:36.249 --> 00:01:37.289
I really like MakeFiles.

27
00:01:37.289 --> 00:01:42.020
They basically allow you to run code
with your own alias for the command.

28
00:01:42.020 --> 00:01:45.359
So I'm gonna put build,
cuz that's what this code is going to do.

29
00:01:45.359 --> 00:01:50.204
I'm going to do @GOOS,
I'm gonna put the exact same command,

30
00:01:50.204 --> 00:01:53.702
Linux, and
GOARCH is going to be amd64, and

31
00:01:53.702 --> 00:01:58.117
it's gonna go build -o for
output, and then bootstrap.

32
00:01:58.117 --> 00:02:02.363
And right underneath there, we're
gonna call that zip function in line.

33
00:02:02.363 --> 00:02:04.989
So zip, function.zip bootstrap.

34
00:02:04.989 --> 00:02:09.471
Make sure you don't get any
typos there in bootstrap or

35
00:02:09.471 --> 00:02:13.472
the function zip that we're deploying,
okay?

36
00:02:13.472 --> 00:02:14.339
Yes.

37
00:02:14.339 --> 00:02:17.201
&gt;&gt; Quick question on the build process,

38
00:02:17.201 --> 00:02:22.842
do you commit the outputs to version
control, or should those be ignored?

39
00:02:22.842 --> 00:02:24.098
&gt;&gt; Those should be ignored.

40
00:02:24.098 --> 00:02:25.594
&gt;&gt; The cdk.out?

41
00:02:25.594 --> 00:02:30.760
&gt;&gt; Yeah, you can ignore the cdk.out, you
can also, if you're manually deploying,

42
00:02:30.760 --> 00:02:34.490
you can ignore the bootstrap and
the function.zip as well.

43
00:02:34.490 --> 00:02:36.784
And your doc get ignored over there.

44
00:02:36.784 --> 00:02:39.829
Yeah, all right, so
now you can see here, if I add ls,

45
00:02:39.829 --> 00:02:43.737
we have our bootstrap in function.zip,
I'm gonna be kind of wild and

46
00:02:43.737 --> 00:02:46.805
remove the bootstrap rm -rf function.zip,
right?

47
00:02:46.805 --> 00:02:48.143
So now they're no longer there.

48
00:02:48.143 --> 00:02:51.535
And if you wanna rebuild everything,
instead of doing those two commands,

49
00:02:51.535 --> 00:02:53.183
all you have to do is go, make build.

50
00:02:53.183 --> 00:02:57.168
And now we have both of them.

51
00:02:57.168 --> 00:03:00.801
So a nice little nifty,
I don't know, should I say quoi,

52
00:03:00.801 --> 00:03:02.817
to help you deploy this?

53
00:03:02.817 --> 00:03:05.850
Whatever, save you some time.

54
00:03:05.850 --> 00:03:10.574
Okay, so like I said earlier, I want to
start with a better project structure,

55
00:03:10.574 --> 00:03:13.828
I actually wanna start giving
this project some meat.

56
00:03:13.828 --> 00:03:16.816
So first,
I'm gonna make a bunch of directories.

57
00:03:16.816 --> 00:03:21.458
First one would be types, and in types, I
would like you to make it a types.go file.

58
00:03:21.458 --> 00:03:26.335
We're gonna make another
directory called database, okay?

59
00:03:26.335 --> 00:03:29.744
In this database,
we're gonna make a database.go file.

60
00:03:29.744 --> 00:03:36.083
You're gonna make another one called api,
api.go.

61
00:03:36.083 --> 00:03:39.896
And we're gonna make one more called
app as the folder, and then within app,

62
00:03:39.896 --> 00:03:41.432
we're going to make app.go.

63
00:03:41.432 --> 00:03:43.847
&gt;&gt; Are these all subfolders
of the lambda folder?

64
00:03:43.847 --> 00:03:46.246
&gt;&gt; Yes, they're all subfolders, let me
make it a little bit more obvious here.

65
00:03:46.246 --> 00:03:50.233
So, these are all within the lambda but
they're each individual.

66
00:03:50.233 --> 00:03:54.210
So it's going to be lambda,
then lambda/api,

67
00:03:54.210 --> 00:03:58.964
lambda/app, lambda/database,
and lambda/types.

68
00:03:58.964 --> 00:04:03.327
And each of those directories is gonna
have the name directory.go file, api.go,

69
00:04:03.327 --> 00:04:05.424
database.go, app.go, types.go.

70
00:04:05.424 --> 00:04:08.206
And we have a bunch of errors,
don't worry,

71
00:04:08.206 --> 00:04:11.732
that's the compiler yelling at us,
it likes to do that.

72
00:04:11.732 --> 00:04:13.996
So let's go into types.go.

73
00:04:13.996 --> 00:04:18.398
Types.go is gonna be the file we're
gonna have, can you guess what it is?

74
00:04:18.398 --> 00:04:20.010
All of our type definitions.

75
00:04:20.010 --> 00:04:24.845
That's not really true, I'm also gonna
use it as a miscellaneous function bed,

76
00:04:24.845 --> 00:04:26.538
something, I don't know.

77
00:04:26.538 --> 00:04:28.590
I'm gonna write code in here, too.

78
00:04:28.590 --> 00:04:33.496
But the first step I wanna define is, like
I said, the goal is to register users.

79
00:04:33.496 --> 00:04:38.030
And we know that we can control the struct
that we could unmartial the payload for

80
00:04:38.030 --> 00:04:39.257
registering a user.

81
00:04:39.257 --> 00:04:40.917
So let's go ahead and do that.

82
00:04:40.917 --> 00:04:43.288
So we're gonna type RegisterUser.

83
00:04:43.288 --> 00:04:44.522
It's gonna be a struct.

84
00:04:44.522 --> 00:04:47.992
And what do we need when
you register a user?

85
00:04:49.699 --> 00:04:51.714
Username, right?

86
00:04:51.714 --> 00:04:55.342
Let's back tick,
we need our json tags here.

87
00:04:55.342 --> 00:04:57.146
It would put username, okay?

88
00:04:57.146 --> 00:05:03.101
And then, unlike the previous event,
we're also gonna have password.

89
00:05:03.101 --> 00:05:08.138
And this can be a string, and
this can be json:"password".

90
00:05:08.138 --> 00:05:11.437
Cool, we have this new struct,
it's a type, we're good, we're laughing.

91
00:05:11.437 --> 00:05:15.171
Cuz we expect our payload or client,
let's say we have a controlled client

92
00:05:15.171 --> 00:05:18.193
experience where the form is
gonna send us a username json and

93
00:05:18.193 --> 00:05:21.057
a password json with the value
associated to those keys.

94
00:05:21.057 --> 00:05:24.440
We'd have a really good way to
unmarshal and handle all that.

95
00:05:24.440 --> 00:05:31.610
Okay, and now this is where
it becomes a little dicey.

96
00:05:31.610 --> 00:05:37.603
Let's go into our database.go,
make a package database.

97
00:05:37.603 --> 00:05:41.031
The way we're going to
set up a project is,

98
00:05:41.031 --> 00:05:44.850
we're gonna have the highest
layer being app.

99
00:05:44.850 --> 00:05:50.066
Our app.go file is gonna basically
house the app struct, all right?

100
00:05:50.066 --> 00:05:57.230
And that is going to have primarily
one field, which is our API layer.

101
00:05:57.230 --> 00:06:02.151
Our API layer is gonna basically process
the logic that we're getting from

102
00:06:02.151 --> 00:06:06.680
our invocations, do some cleaning,
do some register, whatever,

103
00:06:06.680 --> 00:06:10.449
and then it's gonna communicate
to our database layer.

104
00:06:10.449 --> 00:06:14.367
So this is where we're gonna define
everything for our database layer.

105
00:06:14.367 --> 00:06:16.511
API layer, call database layer.

106
00:06:16.511 --> 00:06:19.927
So they're nested within each other.

107
00:06:19.927 --> 00:06:20.863
Cool.

108
00:06:20.863 --> 00:06:25.360
So for now, what I want you
to do is create a new type,

109
00:06:25.360 --> 00:06:28.232
let's call it DynamoDBClient.

110
00:06:28.232 --> 00:06:29.771
It's gonna be a struct.

111
00:06:29.771 --> 00:06:31.097
It's gonna have one field.

112
00:06:31.097 --> 00:06:33.566
This field,
we're gonna call it databaseStore.

113
00:06:33.566 --> 00:06:36.512
And for now, just make it a string.

114
00:06:36.512 --> 00:06:39.138
I'll explain my zaniness and
wackiness in a little bit, okay?

115
00:06:39.138 --> 00:06:39.997
I promise.

116
00:06:39.997 --> 00:06:42.552
And down here, make a new func, right?

117
00:06:42.552 --> 00:06:46.511
Cuz I like making new
DynamoDBClient functions.

118
00:06:46.511 --> 00:06:48.942
This is gonna take pretty much nothing and

119
00:06:48.942 --> 00:06:53.116
it's gonna return the DynamoDBClient
struct we just defined, okay?

120
00:06:53.116 --> 00:06:58.629
And then we're just gonna say,
return DynamoDBClient,

121
00:06:58.629 --> 00:07:03.588
and for a databaseStore,
put just database store.

122
00:07:03.588 --> 00:07:04.579
We're gonna change this all up.

123
00:07:04.579 --> 00:07:06.173
Just put any string here,
it doesn't really matter.

124
00:07:06.173 --> 00:07:10.442
You can't call any substantial
logic on a string,

125
00:07:10.442 --> 00:07:13.926
this is just for architecturing our app.

126
00:07:13.926 --> 00:07:15.729
So this is the lowest level, right?

127
00:07:15.729 --> 00:07:18.328
In our application, the lowest level we're
gonna communicate is our database layer.

128
00:07:18.328 --> 00:07:24.800
The level right above that is
going to be our API layer, okay?

129
00:07:24.800 --> 00:07:28.529
And our API layer,
it's gonna follow familiar structure.

130
00:07:28.529 --> 00:07:32.447
So package api, and
we're gonna create a type.

131
00:07:32.447 --> 00:07:37.882
So type, we're gonna make this ApiHandler,
it's gonna be a struct, okay?

132
00:07:37.882 --> 00:07:41.685
And this ApiHandler struct
is going to contain,

133
00:07:41.685 --> 00:07:45.127
what do you guys think it's gonna contain?

134
00:07:45.127 --> 00:07:50.129
If we have this kind of
organization of app, ApiHandler,

135
00:07:50.129 --> 00:07:55.459
DBStore, It's gonna-
&gt;&gt; Host methods or something here.

136
00:07:55.459 --> 00:07:59.893
&gt;&gt; It's going to contain the struct that
we just defined in database.go, okay?

137
00:07:59.893 --> 00:08:03.913
So, if it's a little confusing,
it should be.

138
00:08:03.913 --> 00:08:10.882
What we're gonna do here is put database
store, we're gonna import, okay?

139
00:08:10.882 --> 00:08:12.180
Remember how imports work.

140
00:08:12.180 --> 00:08:14.334
Lambda-func, why is it lambda-func?

141
00:08:14.334 --> 00:08:17.270
Cuz that's what we named our module,
/database.

142
00:08:17.270 --> 00:08:19.977
If you did it right,
you should be complaining it's unused.

143
00:08:19.977 --> 00:08:26.002
And then in here, we're gonna put
database right there, DBClient.

144
00:08:28.930 --> 00:08:29.972
What does this mean?

145
00:08:29.972 --> 00:08:34.322
This means when we call our API
functions and we handle our API layer,

146
00:08:34.322 --> 00:08:37.397
we have an easy way to hit
right into our dbStore,

147
00:08:37.397 --> 00:08:40.861
our database store,
where we can separate our logic.

148
00:08:40.861 --> 00:08:43.759
Contain it, and not have any
mixed match or spaghetti code.

149
00:08:47.127 --> 00:08:53.029
Cool, obviously we're not done,
let's create func NewApiHandler.

150
00:08:53.029 --> 00:08:58.033
ApiHandler is gonna take an argument,
it's gonna be dbStore.

151
00:08:58.033 --> 00:09:03.352
It's gonna be type string, cuz that's
what we defined our DynamoDBClient,

152
00:09:03.352 --> 00:09:06.104
remember, string, right over there.

153
00:09:06.104 --> 00:09:12.173
And it's going to return
the APIHandler type, okay?

154
00:09:12.173 --> 00:09:18.506
So we do return APIHandler,
dbStore as dbStore.

155
00:09:21.138 --> 00:09:23.900
There is a way to kinda
do this with a string.

156
00:09:23.900 --> 00:09:26.411
I want to first execute it
with just a string, but

157
00:09:26.411 --> 00:09:29.181
I think I've probably
confused myself a little bit.

158
00:09:29.181 --> 00:09:30.964
If we just go back to our database,

159
00:09:30.964 --> 00:09:34.103
we just kinda do it correctly
from the beginning, instead.

160
00:09:34.103 --> 00:09:38.313
I think the string parameter is
kind of messing me up a little bit.

161
00:09:38.313 --> 00:09:43.298
But essentially, instead of having this
string type, we could just have this

162
00:09:43.298 --> 00:09:48.147
actual data type that it's expecting,
which is the DynamoDBClient here.

163
00:09:48.147 --> 00:09:54.388
Here, we'll just instantiate and
we'll have to pull in the DynamoDBSDK.

164
00:09:54.388 --> 00:09:58.105
Instead of doing the string, we're
gonna pass the actual expectation what

165
00:09:58.105 --> 00:10:00.845
Dynamo expects to interact
with our DynamoDB DB layer.

166
00:10:00.845 --> 00:10:08.376
So we'll do,
go get github.com/aws/aws/sdk-go,

167
00:10:08.376 --> 00:10:13.608
and then we will do service/dynamodb.

168
00:10:18.144 --> 00:10:19.665
Gonna take some time to download.

169
00:10:22.870 --> 00:10:23.639
Okay, cool.

170
00:10:23.639 --> 00:10:27.523
And there's gonna be something
else that we'll need for DynamoDB.

171
00:10:27.523 --> 00:10:31.576
Go AWS has this concept when you
interact with different infrastructure,

172
00:10:31.576 --> 00:10:34.417
they're going to have
something called a session.

173
00:10:34.417 --> 00:10:40.998
And this session, it's basically a live
method to interact with our DB and

174
00:10:40.998 --> 00:10:47.488
it associates our DB with our live
session client that we're executing.

175
00:10:47.488 --> 00:10:52.089
So when we first execute this lambda,
we first call our NewDynamoDB function,

176
00:10:52.089 --> 00:10:55.397
we're gonna pass it a new
session that we're creating.

177
00:10:55.397 --> 00:10:58.025
And basically, every time we
wanna interact with our DynamoDB,

178
00:10:58.025 --> 00:10:58.893
we use this session.

179
00:10:58.893 --> 00:11:03.086
And this kinda handles closing
the DB in case you have it open, and

180
00:11:03.086 --> 00:11:04.618
all that kind of stuff.

181
00:11:04.618 --> 00:11:08.149
So it does all that for
you under the hood.

182
00:11:08.149 --> 00:11:12.805
So here, we're gonna

183
00:11:12.805 --> 00:11:17.466
import our DynamoDB.

184
00:11:17.466 --> 00:11:24.271
So here, we'll go
github.com/aws/aws-sdk-go/service/

185
00:11:24.271 --> 00:11:25.471
dynamodb.

186
00:11:25.471 --> 00:11:29.377
Okay, and then we will essentially also
need to pull in another package for

187
00:11:29.377 --> 00:11:31.051
that session I just mentioned.

188
00:11:31.051 --> 00:11:34.465
So we'll do go get

189
00:11:34.465 --> 00:11:44.942
github.com/aws/aws-sdk-go/aws/session.

190
00:11:44.942 --> 00:11:47.194
Cool.

191
00:11:47.194 --> 00:11:52.710
And now, in this client, instead of
DBClient struct being a database

192
00:11:52.710 --> 00:11:58.614
store to a string, what we're actually
gonna do is pull it for a DynamoDB.

193
00:11:58.614 --> 00:12:01.641
So we're gonna do DynamoDBClient, okay?

194
00:12:01.641 --> 00:12:06.097
And now we have this error saying,
hey, our database store,

195
00:12:06.097 --> 00:12:10.479
we can't actually, like,
it's not expecting anything.

196
00:12:10.479 --> 00:12:13.166
Or it's not expecting
that this is a string,

197
00:12:13.166 --> 00:12:15.865
we actually need to
create that DB instance.

198
00:12:15.865 --> 00:12:18.901
And now I understand why
the previous example did not work,

199
00:12:18.901 --> 00:12:20.186
we did not instantiate.

200
00:12:20.186 --> 00:12:22.142
It has come full circle.

201
00:12:22.142 --> 00:12:24.170
But that's okay.

202
00:12:24.170 --> 00:12:30.336
Instead, we'll do a dbSession we can
do new dbSession as session.Must.

203
00:12:30.336 --> 00:12:33.792
And I'm gonna put a session.NewSession.

204
00:12:33.792 --> 00:12:38.352
Cool, I'm gonna call this function.

205
00:12:38.352 --> 00:12:43.551
Awesome, and now we're going to put,
db is going to be dynamodb.New, and

206
00:12:43.551 --> 00:12:48.750
it just expects our session to create
that, looking at what I talked about,

207
00:12:48.750 --> 00:12:52.596
of instantiating a proper session and
passing it down.

208
00:12:52.596 --> 00:12:56.793
Okay, so instead of a string here,
I'm gonna do a db.

