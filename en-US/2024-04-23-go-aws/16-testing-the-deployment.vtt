WEBVTT

1
00:00:00.160 --> 00:00:01.707
Now, if we go back, right?

2
00:00:01.707 --> 00:00:05.390
So okay, our CLI gave us the thumbs up,
sweet, everyone's happy.

3
00:00:05.390 --> 00:00:10.652
We can go to AWS and click CloudFormation,
and if you click it, boom, new stack.

4
00:00:10.652 --> 00:00:15.191
Go CDK stack, created,
better be created when you made it,

5
00:00:15.191 --> 00:00:17.595
there's a status of it, okay?

6
00:00:17.595 --> 00:00:20.079
And you can drop down and
click this Go CDK,

7
00:00:20.079 --> 00:00:22.659
and it gives you a lot of info on this.

8
00:00:22.659 --> 00:00:27.490
Stack info events, so right now
we've creation event, you can see

9
00:00:27.490 --> 00:00:32.689
what it took to create, it took a log for
what was created for events.

10
00:00:32.689 --> 00:00:35.464
And you can say,
if you deploy someone to delete it,

11
00:00:35.464 --> 00:00:38.419
it will be here in your event stack,
right?

12
00:00:38.419 --> 00:00:41.592
Because remember,
a stack is not only a lambda.

13
00:00:41.592 --> 00:00:45.333
Right now it is, but a stack could have
a bunch of different resources and

14
00:00:45.333 --> 00:00:49.462
if you delete one resource, but not
the stack, that will be highlighted here.

15
00:00:51.370 --> 00:00:53.897
And then we have resources.

16
00:00:53.897 --> 00:00:57.742
Resources is interesting cuz this is
what we actually care about, the infra.

17
00:00:57.742 --> 00:00:59.682
You can see here my lambda function,
right?

18
00:00:59.682 --> 00:01:02.855
The unique ID, the logical ID for
that's right there.

19
00:01:02.855 --> 00:01:06.505
If you click that, you can actually
click this physical ID link.

20
00:01:06.505 --> 00:01:10.079
So let me just open this up,
you click this physical ID, and

21
00:01:10.079 --> 00:01:13.595
it takes you to our Lambda portal,
a Lambda UI right here.

22
00:01:14.935 --> 00:01:17.715
This is a bunch of different
properties to the package size, right?

23
00:01:17.715 --> 00:01:22.733
So that zip function that we deployed,
with our Go binary, 5.3 megabytes certain

24
00:01:22.733 --> 00:01:29.034
hashes, a lot of cool information handler,
the runtime Amazon Linux 2023, right?

25
00:01:29.034 --> 00:01:30.692
We've configured all that.

26
00:01:30.692 --> 00:01:33.714
And now we should probably test it.

27
00:01:33.714 --> 00:01:39.130
So there's a little nice tab called Test,
and in here event JSON.

28
00:01:39.130 --> 00:01:41.801
So we can actually go ahead and
test our code here.

29
00:01:41.801 --> 00:01:44.251
So, it has key 1, value1.

30
00:01:44.251 --> 00:01:46.084
What will happen if I run this as is?

31
00:01:48.355 --> 00:01:49.441
&gt;&gt; Error.

32
00:01:49.441 --> 00:01:51.601
&gt;&gt; Yeah,
cuz we're expecting the username, right?

33
00:01:51.601 --> 00:01:54.591
Because we actually have that function,
that logic listed in.

34
00:01:54.591 --> 00:01:57.881
So we can put username, and
let's put any username.

35
00:01:57.881 --> 00:02:01.550
Put yours, I'm gonna put Melkey as mine,
Shmelkey, cool.

36
00:02:01.550 --> 00:02:02.560
And then you can click test.

37
00:02:04.270 --> 00:02:05.440
Succeeded.

38
00:02:05.440 --> 00:02:07.480
You go here,
successfully called by Melkey.

39
00:02:09.860 --> 00:02:12.443
Now, this is pretty simple, but

40
00:02:12.443 --> 00:02:18.274
it's really cool in a sense because
now we've deployed back-end logic.

41
00:02:18.274 --> 00:02:21.994
Of course it's simple, but let's ignore
that for a second, into the cloud.

42
00:02:21.994 --> 00:02:24.534
We can run things in the cloud and
invoke it.

43
00:02:24.534 --> 00:02:25.444
It's not on our machine.

44
00:02:25.444 --> 00:02:27.791
We have nothing running
on our machine right now.

45
00:02:29.954 --> 00:02:34.644
So I think this is like,
I always geek out about this.

46
00:02:34.644 --> 00:02:39.584
You can see different execution times,
31 seconds, request ID,

47
00:02:39.584 --> 00:02:43.770
a lot of different things that
maps to your Lambda, okay?

48
00:02:43.770 --> 00:02:47.785
And one interesting tidbit that I could
throw in here is you can actually see

49
00:02:47.785 --> 00:02:50.283
Monitor, and
you can actually see your logs.

50
00:02:50.283 --> 00:02:53.492
So if you click Monitor and
view CloudWatch Logs and even Insights,

51
00:02:53.492 --> 00:02:55.237
you can see a number of invocations,

52
00:02:55.237 --> 00:02:58.862
you can see a bunch of different things
I'll populate in these fields here.

53
00:02:58.862 --> 00:03:01.447
So if you open up CloudWatch Logs.

54
00:03:02.687 --> 00:03:06.075
This is where you're gonna have more
information as to what is happening to

55
00:03:06.075 --> 00:03:07.647
your function, to your lambdas.

56
00:03:07.647 --> 00:03:08.820
You can see there's a log stream.

57
00:03:08.820 --> 00:03:14.407
This is data to the execution hash,
the latest timestamp.

58
00:03:14.407 --> 00:03:18.493
So if you dig this, you can see here
it executed, it has a report time and

59
00:03:18.493 --> 00:03:22.059
anything you wanna log,
this is where you will see it, okay?

60
00:03:22.059 --> 00:03:25.601
&gt;&gt; How did you know that if you had to
build for the AMD 64 architecture and

61
00:03:25.601 --> 00:03:27.385
is that just in the dock somewhere?

62
00:03:27.385 --> 00:03:31.364
&gt;&gt; Yeah, that's literally in the docks
when you see the runtime migration docks,

63
00:03:31.364 --> 00:03:33.385
eight of it is provided.

64
00:03:33.385 --> 00:03:38.195
They specify that they want the AMD 64 for
CloudWatch.

65
00:03:38.195 --> 00:03:39.335
Yeah, yep, yep.

