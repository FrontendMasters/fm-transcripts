WEBVTT

1
00:00:00.250 --> 00:00:02.499
Before going into any further,

2
00:00:02.499 --> 00:00:08.640
I wanna introduce the third piece of our
infrastructure, the AWS API Gateway.

3
00:00:08.640 --> 00:00:12.261
So maybe some of you people
are the most lambdas, DynamoDB,

4
00:00:12.261 --> 00:00:14.890
maybe someone's the most API Gateway.

5
00:00:14.890 --> 00:00:18.840
I think this one doesn't get
as much attention, maybe.

6
00:00:18.840 --> 00:00:21.254
Maybe it's kind of under the hood, but

7
00:00:21.254 --> 00:00:25.219
it plays a vital role in everything
that we're building today.

8
00:00:25.219 --> 00:00:28.237
I'm gonna read the definition,
the textbook definition,

9
00:00:28.237 --> 00:00:32.200
a fully managed service that makes it
easy for developers to create, publish,

10
00:00:32.200 --> 00:00:35.421
maintain, monitor and
secure API's at any scale.

11
00:00:35.421 --> 00:00:38.051
Okay, a bunch of great words.

12
00:00:38.051 --> 00:00:42.047
But what I enjoy is actually
the access data, business logic, or

13
00:00:42.047 --> 00:00:45.020
functionality from backend services.

14
00:00:45.020 --> 00:00:48.350
That's a definition I think
it's gonna apply mostly to us.

15
00:00:48.350 --> 00:00:55.890
The way we're gonna use our AWS API
Gateway is almost like a router, okay?

16
00:00:55.890 --> 00:00:57.200
And why do I bring this up?

17
00:00:57.200 --> 00:00:58.024
Why does it matter?

18
00:00:58.024 --> 00:01:02.883
Because if you look back and
we go to our main.go,

19
00:01:02.883 --> 00:01:06.019
there's a clear problem here.

20
00:01:06.019 --> 00:01:07.719
Can anyone tell me what that problem is?

21
00:01:10.149 --> 00:01:12.194
It's on this line.

22
00:01:12.194 --> 00:01:15.889
&gt;&gt; Are you registering the user anytime?

23
00:01:15.889 --> 00:01:16.929
&gt;&gt; No, that's not a problem.

24
00:01:16.929 --> 00:01:18.269
I hope that's not a problem.

25
00:01:18.269 --> 00:01:20.995
But actually, you're right,
because every time we invoke the function,

26
00:01:20.995 --> 00:01:24.089
that's the only thing we're doing,
is just registering the user.

27
00:01:24.089 --> 00:01:25.219
We have no flexibility.

28
00:01:25.219 --> 00:01:27.299
What if we make a login handler?

29
00:01:27.299 --> 00:01:28.259
We can't put that in, right?

30
00:01:28.259 --> 00:01:32.710
Because we have to either take out our
registered user handler and put in the new

31
00:01:32.710 --> 00:01:37.219
login user handler, or we have to
choose between one or the other, right?

32
00:01:37.219 --> 00:01:41.118
And there's different ways you can maybe,
I don't know.

33
00:01:41.118 --> 00:01:45.425
Find a way like a hacky fix to make it
work, but this is where the AWS Gateway

34
00:01:45.425 --> 00:01:50.375
gives us flexibility to add different
functionalities to a single lambda, right?

35
00:01:50.375 --> 00:01:55.676
And this is an architecture decision, you
can have different decisions where instead

36
00:01:55.676 --> 00:02:00.695
of having one lambda that has a capability
of running three different functions.

37
00:02:00.695 --> 00:02:04.133
You'd have one lambda, bind it to
one function and deploy each one.

38
00:02:04.133 --> 00:02:06.984
That's totally fair.

39
00:02:06.984 --> 00:02:09.896
The Code for that is you have to
kind of tell each lambda how to

40
00:02:09.896 --> 00:02:11.950
communicate with respect to each other.

41
00:02:11.950 --> 00:02:14.574
Like all these lambdas,
that can get kind of messy.

42
00:02:14.574 --> 00:02:18.532
I've personally liked for something simple
like a CRUD app, just to have one lambda

43
00:02:18.532 --> 00:02:22.714
that can execute a bunch of different
things depending on how it's invoked.

44
00:02:22.714 --> 00:02:25.214
Registering a user,
give me the register user function.

45
00:02:25.214 --> 00:02:27.604
Logging a user,
give me the logging user function, right?

46
00:02:27.604 --> 00:02:31.433
I don't really see the core argument
to have all these different lambdas

47
00:02:31.433 --> 00:02:33.704
doing something that could be contained.

48
00:02:33.704 --> 00:02:36.649
But, again, pros and
cons to every kind of decision and

49
00:02:36.649 --> 00:02:38.350
architecture you want to make.

50
00:02:38.350 --> 00:02:41.732
And one more thing on
the API Gateway is that,

51
00:02:41.732 --> 00:02:44.977
it also adds and
acts like a filter for us.

52
00:02:44.977 --> 00:02:46.518
It adds like a layer of security,

53
00:02:46.518 --> 00:02:49.058
because this is where we're
gonna process requests.

54
00:02:49.058 --> 00:02:52.979
And this is where we can basically
tell someone or a requester, okay?

55
00:02:52.979 --> 00:02:54.898
No, you don't have
the right header I expect.

56
00:02:54.898 --> 00:02:57.979
Or no, you're from a different region,
or etc.

57
00:02:57.979 --> 00:03:01.895
Like I do not want you
to go into the back-end.

58
00:03:01.895 --> 00:03:06.557
I don't want this request to have any sort
of ability to invoke the back-end logic,

59
00:03:06.557 --> 00:03:09.064
and this is what
the API Gateway can do for us.

60
00:03:09.064 --> 00:03:09.790
So that's how we're gonna use it.

61
00:03:09.790 --> 00:03:13.186
We're gonna make it act as like a bit
of a security layer, very, very

62
00:03:13.186 --> 00:03:17.645
minimal security if I'm being honest, but
mostly gonna be acting as a router for us.

63
00:03:17.645 --> 00:03:22.961
And again, as with any of these
infrastructures developed by a AWS,

64
00:03:22.961 --> 00:03:24.897
the use case is massive.

65
00:03:24.897 --> 00:03:26.487
There's so many things you can go with it.

66
00:03:26.487 --> 00:03:28.577
There's so
many things you can run with it.

67
00:03:28.577 --> 00:03:30.527
And this is just, honestly,

68
00:03:30.527 --> 00:03:35.446
the tip of the iceberg just to get our
dipper toes in the AWS lake if you will.

