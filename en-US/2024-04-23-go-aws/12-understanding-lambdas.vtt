WEBVTT

1
00:00:00.630 --> 00:00:01.690
So with that being said,

2
00:00:01.690 --> 00:00:04.422
I'm gonna just remove all this cuz
I think it looks kind of ugly.

3
00:00:04.422 --> 00:00:09.307
I'm gonna keep the nil, we're gonna
just keep it as returning a nil, okay?

4
00:00:09.307 --> 00:00:11.318
Cool.

5
00:00:11.318 --> 00:00:15.687
And with all that being said,
we are gonna do the majority of our

6
00:00:15.687 --> 00:00:20.150
development in this single function,
in this new go CDK stack.

7
00:00:20.150 --> 00:00:21.763
I'm gonna go ahead and uncomment this.

8
00:00:21.763 --> 00:00:25.970
I'm gonna keep it, not delete it,
cuz we're gonna reference it when we first

9
00:00:25.970 --> 00:00:29.633
deploy our very first resource,
which is gonna be a Lambda, okay?

10
00:00:30.903 --> 00:00:33.609
Now all that,
I want us to go into our terminal and

11
00:00:33.609 --> 00:00:36.318
I want you to make a new
directory called Lambda.

12
00:00:38.522 --> 00:00:41.691
I want you to cd into Lambda,
I'm gonna do a go mod in it.

13
00:00:41.691 --> 00:00:45.066
Go mod in it, and
you can call this whatever you want,

14
00:00:45.066 --> 00:00:47.993
I'm gonna call mine Lambda dash func,
okay?

15
00:00:47.993 --> 00:00:52.385
You can see here on your Lambda directory,
this new go dot mod file.

16
00:00:52.385 --> 00:00:53.462
We already know what these are.

17
00:00:53.462 --> 00:00:56.823
I'm gonna inside that Lambda
directory we're gonna touch main.go.

18
00:00:58.983 --> 00:00:59.535
There you go.

19
00:00:59.535 --> 00:01:00.255
All right?

20
00:01:00.255 --> 00:01:05.050
And like we've already practiced
package main, func main.

21
00:01:06.850 --> 00:01:07.920
Create a skeleton for us, right?

22
00:01:09.700 --> 00:01:11.430
So what is this?

23
00:01:11.430 --> 00:01:12.560
What is this directory?

24
00:01:13.580 --> 00:01:15.190
Well, this is basically our back end.

25
00:01:16.540 --> 00:01:20.326
This Lambda directory is
where we're gonna house and

26
00:01:20.326 --> 00:01:27.065
define all the backend logic that we're
going to need for our application, okay?

27
00:01:27.065 --> 00:01:29.685
And this is gonna be then packaged and
zipped and

28
00:01:29.685 --> 00:01:31.595
deployed to our Lambda function.

29
00:01:33.979 --> 00:01:37.810
All right, so let's see.

30
00:01:37.810 --> 00:01:41.175
What I would like to
actually start with is,

31
00:01:43.278 --> 00:01:47.802
Let's go ahead and talk about what
is a Lambda in the first place.

32
00:01:49.123 --> 00:01:52.056
So what is an AWS Lambda?

33
00:01:52.056 --> 00:01:54.086
I've said this maybe a few times now.

34
00:01:54.086 --> 00:01:59.965
I haven't really given it the justice
of explaining what it is, but

35
00:01:59.965 --> 00:02:06.893
an AWS Lambda is a serverless compute
service that triggers two events, okay?

36
00:02:06.893 --> 00:02:11.818
It automatically manages a lot of
things first, like computing, scaling,

37
00:02:11.818 --> 00:02:14.150
and all those kind of details.

38
00:02:14.150 --> 00:02:17.675
So when I say serverless,
do I mean there's a new hidden

39
00:02:17.675 --> 00:02:21.776
technology concept that you can
run code without on a server?

40
00:02:21.776 --> 00:02:24.947
No, because it's still on
a server that's own a AWS, but

41
00:02:24.947 --> 00:02:27.186
it goes even further than that.

42
00:02:27.186 --> 00:02:31.736
Serverless basically means it's
abstracting a lot of the server

43
00:02:31.736 --> 00:02:36.535
management core principles that you
would have to be responsible for

44
00:02:36.535 --> 00:02:39.036
in a server-based architecture.

45
00:02:39.036 --> 00:02:43.155
So talking to a few of you, we've had
maybe like digital ocean droplets,

46
00:02:43.155 --> 00:02:47.084
we've had our own Linux kinda box
that we've deployed code to, etc.

47
00:02:47.084 --> 00:02:49.523
We have to manage a lot of
the stuff there, right?

48
00:02:49.523 --> 00:02:52.647
Like scaling, Nginx,
all this stuff we kind of have

49
00:02:52.647 --> 00:02:56.423
to manage when we have
a server-based architecture, right?

50
00:02:56.423 --> 00:03:00.232
It's more than just deploy code, there's
a little bit more granularity there.

51
00:03:00.232 --> 00:03:04.072
In serverless, you don't have to worry
about that serverless scales for you.

52
00:03:04.072 --> 00:03:08.208
And why that's important is like most
of our applications, we have no users,

53
00:03:08.208 --> 00:03:08.842
all right?

54
00:03:08.842 --> 00:03:10.352
So it doesn't really matter.

55
00:03:10.352 --> 00:03:13.233
But let's say one day you have
something deployed in a server-based

56
00:03:13.233 --> 00:03:14.942
architecture and it pops off.

57
00:03:14.942 --> 00:03:18.782
It goes from zero users to 1,000,10,000,

58
00:03:18.782 --> 00:03:24.753
where you did not facilitate your
architecture to handle that traffic.

59
00:03:24.753 --> 00:03:25.503
So what happens?

60
00:03:25.503 --> 00:03:28.853
Well, now you risk that your users
are gonna have a poor experience.

61
00:03:28.853 --> 00:03:30.340
They might even hit your code.

62
00:03:30.340 --> 00:03:33.633
You might have panics, you might
have stuff that just doesn't run.

63
00:03:33.633 --> 00:03:37.786
Serverless, you never have to kind
of think of the concept of scaling,

64
00:03:37.786 --> 00:03:41.319
because the way serverless works and
the way a Lambda works,

65
00:03:41.319 --> 00:03:45.308
it only runs when it's invoked,
and it handles the scaling for us.

66
00:03:45.308 --> 00:03:49.423
Server-based architecture, you basically
have something running all the time.

67
00:03:49.423 --> 00:03:53.383
Unless by design, choose to run it down,
or spin it back up.

68
00:03:53.383 --> 00:03:54.752
Typically, it's constantly running.

69
00:03:54.752 --> 00:03:59.631
It's a server deployed somewhere, that's
doing some logic all the time, 24/7.

70
00:03:59.631 --> 00:04:01.564
Server list, that's not the case.

71
00:04:01.564 --> 00:04:04.194
Serverless architecture
basically drops down to,

72
00:04:04.194 --> 00:04:06.654
it's just a function that's invoked.

73
00:04:06.654 --> 00:04:08.064
That's all it is.

74
00:04:08.064 --> 00:04:12.292
And these invocations can come
from S3 events, DynamoDB events,

75
00:04:12.292 --> 00:04:17.054
things called Kinesis, SNS events,
or just users invoking the endpoint.

76
00:04:18.204 --> 00:04:22.994
And once that endpoint is invoked,
that's when it starts to function, okay?

77
00:04:22.994 --> 00:04:25.207
So it speeds everything
up in calls to function.

78
00:04:25.207 --> 00:04:30.007
That's all AWS Lambda is in a nutshell,
okay?

79
00:04:30.007 --> 00:04:31.924
And there's pros and cons to this.

80
00:04:31.924 --> 00:04:36.197
I'm not here to tell you server list
based architecture is the way to go.

81
00:04:36.197 --> 00:04:37.329
Yes.

82
00:04:37.329 --> 00:04:41.427
Not having to worry about scaling and
all these other things is very nice, but

83
00:04:41.427 --> 00:04:44.422
there comes at a cost, a literal cost.

84
00:04:44.422 --> 00:04:46.352
Lambda itself are very cheap.

85
00:04:46.352 --> 00:04:49.487
You, me, all of us,
we're gonna be doing this, we're not even,

86
00:04:49.487 --> 00:04:52.242
it's gonna be a fraction of a penny, okay?

87
00:04:52.242 --> 00:04:56.391
But again, if we use the example we
scaled from one user to a 1,000,

88
00:04:56.391 --> 00:05:00.032
10,000 invocations,
our bill will also go up.

89
00:05:00.032 --> 00:05:02.704
So there's pros and
cons to this to how you wanna develop and

90
00:05:02.704 --> 00:05:04.813
deploy your infrastructure.

91
00:05:04.813 --> 00:05:09.662
Surveys have its pros and cons,
serverless has their pros and cons, okay?

92
00:05:09.662 --> 00:05:14.092
And then our Lambda here after
executing that function,

93
00:05:14.092 --> 00:05:20.223
has the capability of doing anything
else in either AWS or wherever, right?

94
00:05:20.223 --> 00:05:21.897
It's just a function.

95
00:05:21.897 --> 00:05:26.047
So we can access different services in
our example to access DynamoDB, right?

96
00:05:26.047 --> 00:05:28.967
So we're gonna use our Lambda function,
it's gonna be invoked,

97
00:05:28.967 --> 00:05:32.247
it's gonna do some logic, and
it's gonna invoke our DynamoDB here.

98
00:05:32.247 --> 00:05:37.427
So the less deployments are a little
more manageable in a sense.

99
00:05:37.427 --> 00:05:42.257
Again, if you use VS code, they use ad
with Lambdas in their pipelines as well.

