WEBVTT

1
00:00:00.150 --> 00:00:02.705
Okay, so, we have,
everything defined for a CDK,

2
00:00:02.705 --> 00:00:05.630
we have everything defined for Go code.

3
00:00:05.630 --> 00:00:09.630
Now, I have to handle this interesting
portion of deployment code.

4
00:00:09.630 --> 00:00:13.750
So you may think, OK, let's just create
another executable and then send it over.

5
00:00:13.750 --> 00:00:18.130
Because we have to provide the runtime,
it gets a little bit more involved.

6
00:00:18.130 --> 00:00:21.451
So here, we're actually going to type in,
Go operating software,

7
00:00:21.451 --> 00:00:23.325
is gonna be Linux, okay?

8
00:00:23.325 --> 00:00:27.035
Go arch, arch, by the way,
is gonna be AMD 64, okay?

9
00:00:28.815 --> 00:00:34.545
And now we're gonna do go build-output and
you have to call it bootstrap.

10
00:00:34.545 --> 00:00:40.172
This is a hard requirement on
the provisioned native AWS Linux system,

11
00:00:40.172 --> 00:00:46.472
that's what the AL portion stands for
in the runtime, AL Amazon Linux, okay?

12
00:00:46.472 --> 00:00:51.034
If you run this,
now we have this bootstrap executable.

13
00:00:51.034 --> 00:00:57.289
You can go ahead and
remove that main if you want.

14
00:00:59.361 --> 00:01:04.042
Cool, I almost had a heart attack,
I thought I just removed all of main.go,

15
00:01:04.042 --> 00:01:05.586
luckily I didn't.

16
00:01:05.586 --> 00:01:08.645
So now we just have to bootstrap, but

17
00:01:08.645 --> 00:01:14.086
we're not done because this also
expects us to pass in a zip file.

18
00:01:15.156 --> 00:01:17.906
We can't just pass in the binary,
we have to zip it.

19
00:01:17.906 --> 00:01:22.828
So you can do zip function.zip and
the name of the binary bootstrap.

20
00:01:24.598 --> 00:01:29.978
So now we have an executable that we
can run and the zip version of it.

21
00:01:29.978 --> 00:01:34.451
And the name that function.zip
is essentially random, but

22
00:01:34.451 --> 00:01:40.672
it has to map to where we defined
our go_cdk code here, function.zip.

23
00:01:40.672 --> 00:01:42.975
Okay, this is the kind of
thing like telling CDK, hey,

24
00:01:42.975 --> 00:01:44.982
this is where we put your code, take it.

25
00:01:44.982 --> 00:01:50.452
Okay, so we zipped it, now, we can CD
back out to the root of our project.

26
00:01:50.452 --> 00:01:53.802
And this is where we're gonna
run our first CDK command.

27
00:01:53.802 --> 00:01:55.902
I'm gonna clear this, I'm gonna cdk diff.

28
00:02:00.228 --> 00:02:04.840
And like we saw earlier,
cdk diff is basically gonna compare

29
00:02:04.840 --> 00:02:09.905
a snapshot in time of the previous
deployed version of our stack and

30
00:02:09.905 --> 00:02:15.068
application with the new version
of what we wanna deploy.

31
00:02:15.068 --> 00:02:18.895
Luckily for us, we don't have that
snapshot, so there's gonna be all net new,

32
00:02:18.895 --> 00:02:21.673
which is why it's Green positives, right?

33
00:02:21.673 --> 00:02:26.488
We're asking, hey, it recognized that
we are going to create a new lambda,

34
00:02:26.488 --> 00:02:29.894
it's gonna give it an associate role for
the lambda and

35
00:02:29.894 --> 00:02:32.283
the actual lambda function, right?

36
00:02:32.283 --> 00:02:36.375
It recognized myLambdaFunction,
that's what we call that construct,

37
00:02:36.375 --> 00:02:40.394
that's what we call that piece
of code in the resource.

38
00:02:40.394 --> 00:02:43.624
It's actually right here,
my Lambda function.

39
00:02:43.624 --> 00:02:45.464
So it recognized it, it picked it up.

40
00:02:47.524 --> 00:02:51.248
So with cdk diff out of the way,
we can now run CDK deploy.

41
00:02:52.852 --> 00:02:57.084
It's gonna synthesize, right?

42
00:02:57.084 --> 00:02:58.324
We know what synthesizing is.

43
00:02:59.409 --> 00:03:03.149
To make it native to Cloudformation,
some magic under the hood here.

44
00:03:04.749 --> 00:03:07.931
And one thing I want to add
while we syndicate deploy,

45
00:03:07.931 --> 00:03:13.119
it's gonna give us this kind of prop of
like, hey, there's some changes here.

46
00:03:13.119 --> 00:03:15.409
Do you want to deploy these changes?

47
00:03:15.409 --> 00:03:18.066
And it's not just me telling you,
hey, yeah,

48
00:03:18.066 --> 00:03:22.653
some infrastructure is more expensive
Expensive, more costly to deploy, it's

49
00:03:22.653 --> 00:03:27.637
a well-known thing in cloud infrastructure
that if you deploy something incorrectly,

50
00:03:27.637 --> 00:03:30.771
it's kind of out of,
it's only in your hands, right?

51
00:03:30.771 --> 00:03:34.561
Because it could be expensive,
it could be a long time for it to deploy.

52
00:03:34.561 --> 00:03:38.136
That's why there's these levels of,
are you sure you want to deploy this?

53
00:03:38.136 --> 00:03:39.111
Double-check everything.

54
00:03:39.111 --> 00:03:43.585
Make sure it's working.
What'd you actually expect it to do?Right.

55
00:03:43.585 --> 00:03:45.495
So here you can see we have that summary.

56
00:03:45.495 --> 00:03:49.345
Okay, the lambda function looks good to
me a policy change for a new function.

57
00:03:49.345 --> 00:03:51.505
This was good to me you wish
to deploy these changes?

58
00:03:51.505 --> 00:03:52.005
Yes, I do.

59
00:03:54.195 --> 00:03:54.965
Question.

60
00:03:54.965 --> 00:03:58.539
&gt;&gt; Did get a error on CDK bootstrap So
here,

61
00:03:58.539 --> 00:04:04.009
I think there was a prerequisite
in getting started with CDK,

62
00:04:04.009 --> 00:04:09.162
where I believe it does have,
so install this AWS CDK CLI,

63
00:04:09.162 --> 00:04:13.182
and there's like a bootstrap environment.

64
00:04:13.182 --> 00:04:18.162
I'm going to assume maybe CERN
users didn't do this step.

65
00:04:18.162 --> 00:04:19.515
Maybe I didn't communicate.

66
00:04:19.515 --> 00:04:22.445
This correctly for everyone, my apologies.

67
00:04:22.445 --> 00:04:27.075
But it'd be good to just follow that and
bootstrap your environment.

68
00:04:29.855 --> 00:04:30.895
That does take some time.

69
00:04:30.895 --> 00:04:31.835
Infrastructure is slow.

70
00:04:33.195 --> 00:04:37.848
And you'll realize like iteration speed
when creating new infra is a slow task and

71
00:04:37.848 --> 00:04:42.272
so it There's a lot of that goes into
it to make sure we do it correctly.

72
00:04:42.272 --> 00:04:47.011
And so Boots Shop is one of those aspects
where it's able to basically create all

73
00:04:47.011 --> 00:04:50.898
the artifacts for you to run the C DK
deploys to run the CDK diffs and

74
00:04:50.898 --> 00:04:52.812
map it to your account.

75
00:04:52.812 --> 00:04:54.902
Curious
&gt;&gt; On the line 21 there?

76
00:04:54.902 --> 00:04:57.892
&gt;&gt; Yeah.
&gt;&gt; With the string name.

77
00:04:57.892 --> 00:05:00.870
Can you talk a little bit
about Abservability and

78
00:05:00.870 --> 00:05:04.071
sort of troubleshooting
when it comes to that name.

79
00:05:04.071 --> 00:05:07.064
Is that the key that you try
to trace throughout your

80
00:05:07.064 --> 00:05:09.326
system if something's going wrong?

81
00:05:09.326 --> 00:05:12.701
&lt;&lt; Yes, but yes, the answer is yes.

82
00:05:12.701 --> 00:05:17.351
This is kind of, because you can have
multiple Lambda functions, right?

83
00:05:17.351 --> 00:05:18.331
So let's say we have one.

84
00:05:18.331 --> 00:05:19.519
So it's kind of easy in this or.

85
00:05:19.519 --> 00:05:21.139
Architecture.
Okay,there's a problem in Lambda.

86
00:05:21.139 --> 00:05:21.729
I know where it is.

87
00:05:21.729 --> 00:05:24.219
Lemme just go in there and fix it up.

88
00:05:24.219 --> 00:05:28.759
But what if you had like 13 crazy example,
bear with me.

89
00:05:28.759 --> 00:05:32.672
We need to identify each Lambda
function with this unique identifier so

90
00:05:32.672 --> 00:05:36.973
that when we get errors upstream from
our clients, or even in the code itself,

91
00:05:36.973 --> 00:05:41.210
we'll actually have logs that say,
This Lambda, your My Lambda function or

92
00:05:41.210 --> 00:05:44.860
Lambda 123 or Register User Lambda,
experience an error, and

93
00:05:44.860 --> 00:05:48.425
that's where you can go trace
your actual Lambda code.

94
00:05:48.425 --> 00:05:51.982
&gt;&gt; I've been burned by trying
to make my own zip files for

95
00:05:51.982 --> 00:05:55.295
Lambda before by using
the Mac OS Zip function.

96
00:05:55.295 --> 00:05:58.755
It ends up creating a folder
with all your stuff in it.

97
00:05:58.755 --> 00:06:02.404
If you have your stuff Stuff in a folder,
Lambda will fail.

98
00:06:02.404 --> 00:06:06.904
So command line version,
very tidy way to do it.

99
00:06:06.904 --> 00:06:08.384
&gt;&gt; Yes, yeah, yeah, yeah.

100
00:06:08.384 --> 00:06:11.044
So thank you for bringing that up.

101
00:06:11.044 --> 00:06:12.204
Everything I try to do is command line.

102
00:06:12.204 --> 00:06:14.788
There's gonna be portions where
we're gonna like, down the road,

103
00:06:14.788 --> 00:06:16.954
where we deploy multiple routes for
a function.

104
00:06:16.954 --> 00:06:18.911
We can test these routes on the UI,

105
00:06:18.911 --> 00:06:23.241
no Going to use straight up curl requests
to do it the way we're supposed to.

106
00:06:23.241 --> 00:06:25.907
So I'm a big fan of doing as
much as I can and see a lot and

107
00:06:25.907 --> 00:06:28.951
not bring in third parties or
packages when I don't need to.

