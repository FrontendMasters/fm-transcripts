WEBVTT

1
00:00:00.164 --> 00:00:02.880
Now we're still gonna see
that same error in the API.

2
00:00:02.880 --> 00:00:04.542
It's still gonna be the exact same error,

3
00:00:04.542 --> 00:00:06.442
I actually did not solve
that error whatsoever.

4
00:00:06.442 --> 00:00:11.426
But I'm gonna walk us through keeping
that error and then going through app and

5
00:00:11.426 --> 00:00:13.095
passing that error down.

6
00:00:13.095 --> 00:00:16.794
Okay, so here, we're gonna have
the exact same DynamoDBClient.

7
00:00:16.794 --> 00:00:20.691
So, here our dbStore is
database.DynamoDBClient,

8
00:00:20.691 --> 00:00:22.645
which is this struct here.

9
00:00:22.645 --> 00:00:27.891
Can go back, and here,
instead of giving our

10
00:00:27.891 --> 00:00:33.837
dbStore as a string,
could do database DBClient.

11
00:00:33.837 --> 00:00:40.322
And here, if we open up dbStore,
there you go, now it's satisfied.

12
00:00:40.322 --> 00:00:46.231
With the typing from dbStore initializing
that DynamoDBClient here, okay?

13
00:00:46.231 --> 00:00:51.055
But then the question remains of where do
we actually call this new API handler to

14
00:00:51.055 --> 00:00:56.250
pass in the dbStore actual initialization
and the actual declaration of it, right?

15
00:00:56.250 --> 00:00:59.193
And that's all gonna happen in the app.go.

16
00:00:59.193 --> 00:01:02.096
So if you go up here,
go all the way up to app.go.

17
00:01:02.096 --> 00:01:05.527
I'm gonna do package app, okay?

18
00:01:05.527 --> 00:01:08.696
And I'm gonna do an App type,
App is a struct, and

19
00:01:08.696 --> 00:01:12.033
this App struct is gonna
contain one thing.

20
00:01:12.033 --> 00:01:17.218
If we kinda continue our scheme of layers,
right, our API layer is calling

21
00:01:17.218 --> 00:01:21.927
our database layer, then our app
layer is gonna call our API layer.

22
00:01:21.927 --> 00:01:25.984
So here we're gonna do ApiHandler, and
it's important you do capitalize it.

23
00:01:25.984 --> 00:01:31.639
I'm gonna do import,
it's gonna be lambda-func/api.

24
00:01:31.639 --> 00:01:34.534
And this type's gonna be api.ApiHandler.

25
00:01:34.534 --> 00:01:37.751
Okay, so you can see, we basically are
doing the exact same thing three times.

26
00:01:37.751 --> 00:01:41.300
But every layer has a particular purpose.

27
00:01:41.300 --> 00:01:45.247
DB layer, API layer and
the actual app initialization layer.

28
00:01:47.740 --> 00:01:51.767
Let's do a func NewApp,
it's not gonna take any arguments,

29
00:01:51.767 --> 00:01:54.717
it's gonna return instead, an App struct.

30
00:01:54.717 --> 00:02:01.946
And in here, this is where we
actually initialize our dbStore.

31
00:02:01.946 --> 00:02:08.643
And that initialization gets
passed down into the API handler.

32
00:02:08.643 --> 00:02:14.053
Cool, so let's go ahead and do that,
so first we need to not only bring

33
00:02:14.053 --> 00:02:20.128
in the API, let's go ahead and
bring in the lambda-func/database, okay?

34
00:02:20.128 --> 00:02:23.170
What's going on here?

35
00:02:23.170 --> 00:02:24.767
Typo, cool.

36
00:02:24.767 --> 00:02:27.906
We go down here,
let's initialize our DB, so

37
00:02:27.906 --> 00:02:31.696
we're gonna do dp is gonna
be database.NewDBClient.

38
00:02:31.696 --> 00:02:35.036
I'm gonna call this function, okay?

39
00:02:35.036 --> 00:02:40.418
Not DBClient, NewDynamoDBClient, cool.

40
00:02:40.418 --> 00:02:45.378
I'm gonna put apiHandler is going to

41
00:02:45.378 --> 00:02:49.379
be api.NewAPIHandler, and

42
00:02:49.379 --> 00:02:55.626
expects an argument,
which is our db, okay?

43
00:02:55.626 --> 00:03:00.842
So you can see here, we're kinda doing
this piping down our db initialization

44
00:03:00.842 --> 00:03:04.965
into our API handler, and
the type satisfies what we expect.

45
00:03:04.965 --> 00:03:10.107
Our database.DynamoDBClient is
what we expect this type to be.

46
00:03:10.107 --> 00:03:12.807
And because we're initializing it and

47
00:03:12.807 --> 00:03:17.975
it's returning this DynamoDBClient,
that's why we can do this, okay?

48
00:03:17.975 --> 00:03:24.093
And then lastly, we need to turn app,
and in here is ApiHandler to apiHandler.

49
00:03:26.534 --> 00:03:31.006
So now we've basically constructed
our project structure.

50
00:03:31.006 --> 00:03:35.035
We have this app, and our app is
going to have access to one field,

51
00:03:35.035 --> 00:03:36.439
which is ApiHandler.

52
00:03:37.459 --> 00:03:42.244
And that ApiHandler is gonna have
access to our database field.

53
00:03:42.244 --> 00:03:46.683
So we can do .dbStore and
modify our values in our DB or

54
00:03:46.683 --> 00:03:50.938
any kind of interaction we
have with our database.

55
00:03:50.938 --> 00:03:53.863
But the question remains
what do we do with app?

56
00:03:53.863 --> 00:03:55.955
Where do we actually call,
we've called everything else.

57
00:03:55.955 --> 00:03:59.709
We've called the client, we've called
the ApiHandler, where do we call app?

58
00:03:59.709 --> 00:04:02.532
So we'll actually call
this in our function main.

59
00:04:02.532 --> 00:04:04.612
And right now it's not gonna do anything.

60
00:04:04.612 --> 00:04:07.052
But you can do myApp.

61
00:04:07.052 --> 00:04:10.332
You can do, let's say you have to
bring it in, so let's pull it in.

62
00:04:10.332 --> 00:04:15.088
So it's lambda-func/app,
can go all the way down.

63
00:04:15.088 --> 00:04:19.197
And here, you can put app.NewApp, okay?

64
00:04:19.197 --> 00:04:22.825
It's gonna complain that it's unused,
that's fine, let's ignore it for now.

65
00:04:22.825 --> 00:04:26.248
But we will be definitely using this,
right?

66
00:04:26.248 --> 00:04:30.131
So now we have everything piped for
the rest of our application.

