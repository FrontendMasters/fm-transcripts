WEBVTT

1
00:00:00.239 --> 00:00:03.279
With all that being said,
I did prepare an exercise.

2
00:00:03.279 --> 00:00:07.191
I think everyone here will actually
just eat that exercise like nothing.

3
00:00:07.191 --> 00:00:10.798
I think you all will be
able to do it in one blink.

4
00:00:10.798 --> 00:00:13.692
I'm still gonna show it, so yeah,

5
00:00:13.692 --> 00:00:18.907
this is gonna be kinda the last
thing we do for this portion of Go.

6
00:00:18.907 --> 00:00:21.638
I'm just gonna create something,
you don't have to copy this.

7
00:00:21.638 --> 00:00:23.436
I'm just gonna paste the exercise in here.

8
00:00:23.436 --> 00:00:28.466
It's gonna be just exercise at text.

9
00:00:28.466 --> 00:00:31.202
And then I'm gonna go to
my secret screen here.

10
00:00:31.202 --> 00:00:36.916
All I wanted you to do was create a circle
struc with a single field of radius,

11
00:00:36.916 --> 00:00:40.775
type float 64, and
then add two methods onto it.

12
00:00:40.775 --> 00:00:45.994
One method is calculating circumference
and one method is calculating the area.

13
00:00:45.994 --> 00:00:48.829
I have the formula right there.

14
00:00:48.829 --> 00:00:51.253
You can use pi as a constant.

15
00:00:51.253 --> 00:00:54.583
That's actually, hold on,
I didn't go through constants.

16
00:00:54.583 --> 00:01:00.167
Super quick, it's gonna make a constant,
it's just const.

17
00:01:00.167 --> 00:01:04.902
You can do, let's say pi,
you can make that 3.14.

18
00:01:04.902 --> 00:01:05.573
So this is constants.

19
00:01:05.573 --> 00:01:10.669
Typically, they're declared at the top of
your package of your file, cuz they're

20
00:01:10.669 --> 00:01:15.575
treated as a global variable, and Go will
not complain about unused constants.

21
00:01:15.575 --> 00:01:18.643
Cuz it's const, it doesn't have to worry
about any kind of memory management,

22
00:01:18.643 --> 00:01:19.464
memory allocating.

23
00:01:19.464 --> 00:01:23.221
So it's just like, okay, I know what
you are, I can infer your type,

24
00:01:23.221 --> 00:01:24.256
go rate your code.

25
00:01:24.256 --> 00:01:27.557
So that's why you can use a const, okay?

26
00:01:27.557 --> 00:01:31.581
So yeah, basically all this is
pretty straightforward stuff.

27
00:01:31.581 --> 00:01:36.073
You'll have your package main,
I don't even think I need to do this part.

28
00:01:36.073 --> 00:01:40.494
Make your package main, add some imports,
create your circle struck,

29
00:01:40.494 --> 00:01:44.767
add those two methods, and at the end,
have a function that just calls

30
00:01:44.767 --> 00:01:48.113
a circumference and
prints the actual value and area.

31
00:01:53.161 --> 00:01:57.061
Okay, let's just go in the main.

32
00:01:57.061 --> 00:02:00.942
Let's just delete all of this.

33
00:02:00.942 --> 00:02:07.542
Let's do const, pie, so yeah,
make your const as 3.14,

34
00:02:07.542 --> 00:02:13.033
let's do a type, Circle,
it's gonna be a struct.

35
00:02:13.033 --> 00:02:17.307
What I want, the radius, so
capital or not, it's fine,

36
00:02:17.307 --> 00:02:21.512
you can make it whatever you like,
this is fine, float.

37
00:02:21.512 --> 00:02:26.968
Cool and it's gonna say unused and
let's make a method on this, so func,

38
00:02:26.968 --> 00:02:31.987
I want to calculate the circumference so
let's pointer to Circle,

39
00:02:36.157 --> 00:02:42.002
Circumference kinda a long title but
not going to need any arguments here.

40
00:02:42.002 --> 00:02:45.665
Let's go here and just do, what's it?

41
00:02:45.665 --> 00:02:52.000
It's 2 pi r, all right,
so we'll just say 2 pi.

42
00:02:52.000 --> 00:02:54.398
So we have the constant pi area,
we have radius.

43
00:02:54.398 --> 00:02:59.928
Okay, cool, so what we could do is just,

44
00:02:59.928 --> 00:03:04.040
let's see, circumference,

45
00:03:10.382 --> 00:03:13.161
I didn't wanna return it,
actually, I want to print it.

46
00:03:13.161 --> 00:03:16.623
Fmt.print.

47
00:03:21.686 --> 00:03:28.767
Cool, and let's actually just
create a quick helper function,

48
00:03:28.767 --> 00:03:34.947
func NewCircle,
it's gonna take radius of float64,

49
00:03:34.947 --> 00:03:39.065
then all I want to do is return Circle,

50
00:03:39.065 --> 00:03:44.865
radius as radius,
Then return type of our Circle.

51
00:03:46.897 --> 00:03:48.374
And all the way down here,
let's create our new circle.

52
00:03:48.374 --> 00:03:53.321
So myCircle is going to be a NewCircle,
radius,

53
00:03:53.321 --> 00:03:58.886
I don't know, but
raised to everyone use any values.

54
00:03:58.886 --> 00:04:04.957
&gt;&gt; 4
&gt;&gt; I already put 1.5 [LAUGH].

55
00:04:14.436 --> 00:04:17.801
That's it, this is basically how we do it.

56
00:04:17.801 --> 00:04:19.227
I don't think this needs an explanation.

57
00:04:19.227 --> 00:04:20.153
Const, method,

58
00:04:20.153 --> 00:04:24.122
create a new circle, you don't even
have to have this new circle function.

59
00:04:24.122 --> 00:04:25.561
I do it as a habit.

60
00:04:25.561 --> 00:04:27.518
Just makes it a little cleaner.

61
00:04:27.518 --> 00:04:28.834
Don't need it.

62
00:04:28.834 --> 00:04:33.805
&gt;&gt; So Go seems to know that
the calculate circumference method is

63
00:04:33.805 --> 00:04:35.436
on the circle type.

64
00:04:35.436 --> 00:04:41.176
Is there a way to add those methods
into the type or is that not important?

65
00:04:41.176 --> 00:04:42.259
&gt;&gt; Which method into the type?.

66
00:04:42.259 --> 00:04:47.008
&gt;&gt; So you can call myCircle
with calculator conference.

67
00:04:47.008 --> 00:04:48.131
&gt;&gt; You can call it, yep, right here.

68
00:04:48.131 --> 00:04:51.572
&gt;&gt; So
is the calculator conference just kind of,

69
00:04:51.572 --> 00:04:56.867
it seems like it's extending myCircle
by adding a method a little bit,

70
00:04:56.867 --> 00:05:00.677
but the type doesn't need
to have the method on it.

71
00:05:00.677 --> 00:05:02.676
You could just get keep
adding methods to the type.

72
00:05:02.676 --> 00:05:04.863
&gt;&gt; Yeah, so that's kinda
the principle of the composite.

73
00:05:04.863 --> 00:05:09.601
You can keep composing your
struc to include methods of

74
00:05:09.601 --> 00:05:13.206
different types and different structs.

75
00:05:13.206 --> 00:05:17.256
And this method, I don't know
if I would use the word extend.

76
00:05:17.256 --> 00:05:20.315
It's just a method that's
bound to the type.

77
00:05:20.315 --> 00:05:22.806
And so circle being a struc,
which is a type,

78
00:05:22.806 --> 00:05:25.176
it just bounds that method onto that type.

79
00:05:25.176 --> 00:05:28.206
And you can bound more
methods onto specific types.

80
00:05:28.206 --> 00:05:30.638
You can actually bound
methods on a different struc,

81
00:05:30.638 --> 00:05:33.241
and then your parent struc and
have that struc embedded.

82
00:05:33.241 --> 00:05:35.741
And that will also have
the method available to it.

83
00:05:35.741 --> 00:05:39.930
So that's kind of how, it's a blocking
piece of composition versus just like

84
00:05:39.930 --> 00:05:41.970
extending it, kind of limitlessly.

85
00:05:41.970 --> 00:05:44.872
&gt;&gt; Okay, but
can you add a function to a type?

86
00:05:44.872 --> 00:05:48.925
&gt;&gt; Yeah, yeah, yeah,
what do you mean, add a function?

87
00:05:48.925 --> 00:05:53.412
&gt;&gt; I don't know could you,
[LAUGH] could you type the circle and

88
00:05:53.412 --> 00:05:56.385
then have circumference on that type?

89
00:05:56.385 --> 00:05:59.436
&gt;&gt; And
then that will call the circumference.

90
00:05:59.436 --> 00:06:02.234
And that will call a calculus
circumference, essentially.

91
00:06:02.234 --> 00:06:07.373
You can, I think actually, no, I think you
have to create a method which is just,

92
00:06:07.373 --> 00:06:10.741
I don't think it's gonna
need func type in a struct.

93
00:06:10.741 --> 00:06:15.771
I think that's where interfaces come
into play and that will kind of

94
00:06:15.771 --> 00:06:21.788
open up the grounds for how you can have
different functions on a pool of structs.

95
00:06:21.788 --> 00:06:28.616
And they can call it c dot,
circle.circumference or whatever.

