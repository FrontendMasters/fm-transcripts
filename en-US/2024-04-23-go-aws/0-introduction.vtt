WEBVTT

1
00:00:00.000 --> 00:00:00.914
Welcome everyone.

2
00:00:00.914 --> 00:00:03.035
I'm very excited to present this course.

3
00:00:03.035 --> 00:00:07.653
I want to say that, first,
who is this course for?

4
00:00:07.653 --> 00:00:12.095
And if you've ever written any Go,
I think you're gonna benefit from this.

5
00:00:12.095 --> 00:00:16.848
If you've never written a lick of Go,
I think you're gonna benefit from this.

6
00:00:16.848 --> 00:00:18.084
Same thing with AWS.

7
00:00:18.084 --> 00:00:20.626
If you're familiar with AWS, awesome.

8
00:00:20.626 --> 00:00:25.525
Never touched it, sweet, because what
we're gonna do is build off the knowledge

9
00:00:25.525 --> 00:00:29.359
from the Go side, build off
the knowledge from the AWS side, and

10
00:00:29.359 --> 00:00:31.921
just put them together to build software.

11
00:00:31.921 --> 00:00:35.866
So I'm gonna pick up these
kind of beginner principles,

12
00:00:35.866 --> 00:00:40.397
intermediate concepts into a fully
deployed piece of software.

13
00:00:40.397 --> 00:00:43.108
And it's gonna be pretty exciting.

14
00:00:43.108 --> 00:00:46.193
Maybe there's some things with Go that
I'll explain that you've never known

15
00:00:46.193 --> 00:00:46.899
before, or AWS.

16
00:00:46.899 --> 00:00:50.081
So that's the gist of this course.

17
00:00:50.081 --> 00:00:53.700
We have to start with
the classic Hello World slide.

18
00:00:53.700 --> 00:00:55.292
My name is Melkey.

19
00:00:55.292 --> 00:01:00.353
I am a machine learning
infrastructure engineer at Twitch.

20
00:01:00.353 --> 00:01:03.229
It's a really cool sounding title, but

21
00:01:03.229 --> 00:01:07.799
really I'm not the smart person
making these neural networks,

22
00:01:07.799 --> 00:01:12.037
making these ML models,
I work with the scientists who do.

23
00:01:12.037 --> 00:01:16.609
So my job is very bare-boned
software engineer.

24
00:01:16.609 --> 00:01:21.219
I take the model artifact that they've
created, they've deployed, smart PhD

25
00:01:21.219 --> 00:01:25.643
people, and then the question I have to
solve is, how do we make this usable?

26
00:01:25.643 --> 00:01:29.038
We just have a bunch of expensive
scientists build something,

27
00:01:29.038 --> 00:01:32.753
now I have to make it serviceable
in a production level environment,

28
00:01:32.753 --> 00:01:34.498
make an application around it.

29
00:01:34.498 --> 00:01:38.221
So that's kind of my role,
I build infrastructure,

30
00:01:38.221 --> 00:01:43.119
I build the code around it, and
try to make it serviceable for Twitch.

31
00:01:43.119 --> 00:01:47.834
And I've worked on a bunch of different
features at Twitch, touching gifting flow,

32
00:01:47.834 --> 00:01:51.973
fraud prevention, all of that,
I've had my hands dabbled around there.

33
00:01:51.973 --> 00:01:56.104
So I've been there for
almost three years, and it's been fun.

34
00:01:56.104 --> 00:01:58.425
I stream live code at twitch.tv/melkey.

35
00:01:58.425 --> 00:02:00.718
So, if you're watching there,
awesome, shout out.

36
00:02:00.718 --> 00:02:04.471
I also make videos on my YouTube channel,
a lot of them are Go related.

37
00:02:04.471 --> 00:02:09.799
A lot of them just things in tech kind
of the world from my perspective.

38
00:02:09.799 --> 00:02:13.085
But I think the most important
thing is this last line, and

39
00:02:13.085 --> 00:02:16.185
it's I make mistakes and
there's gonna be mistakes.

40
00:02:16.185 --> 00:02:19.353
So if you think this is gonna be flawless,
perfect course from start to finish,

41
00:02:19.353 --> 00:02:20.266
it's not gonna be it.

42
00:02:20.266 --> 00:02:21.426
I'm gonna make mistakes.

43
00:02:21.426 --> 00:02:22.471
I'm gonna fumble.

44
00:02:22.471 --> 00:02:23.437
You're gonna make mistakes.

45
00:02:23.437 --> 00:02:24.295
You're gonna fumble.

46
00:02:24.295 --> 00:02:25.722
But we're gonna solve them together.

47
00:02:25.722 --> 00:02:30.432
And I think that's really that live
workshop element where I want to be very

48
00:02:30.432 --> 00:02:35.014
back and forth cohesive, we kind of
figure things out together as we go.

49
00:02:35.014 --> 00:02:36.586
Pun intended.

50
00:02:36.586 --> 00:02:39.133
So what's in this course?

51
00:02:39.133 --> 00:02:42.789
There's a table of content slide,
it looks pretty nice.

52
00:02:42.789 --> 00:02:45.239
We're in the first one where
I'm introducing the course,

53
00:02:45.239 --> 00:02:48.677
talking about the prerequisites, which I
think everyone here has already set up.

54
00:02:48.677 --> 00:02:52.246
I think there may have been a little bit
more prerequisites involved with this one

55
00:02:52.246 --> 00:02:55.779
than maybe some other courses, so I
appreciate everyone kind of setting it up.

56
00:02:55.779 --> 00:03:00.041
I'm gonna talk about the general
course info, what we're gonna do.

57
00:03:00.041 --> 00:03:02.579
And then will I jump
into learning some Go?

58
00:03:02.579 --> 00:03:06.072
I'm gonna talk about the philosophy and
concepts of Go,

59
00:03:06.072 --> 00:03:08.122
why it was designed the way it is.

60
00:03:08.122 --> 00:03:10.514
I know some people have used Go,
which is great.

61
00:03:10.514 --> 00:03:13.198
Some people may have never used it,
which is also great.

62
00:03:13.198 --> 00:03:16.801
So I wanna talk and refresh ourselves
about what it means to write

63
00:03:16.801 --> 00:03:19.077
Go from the people who actually made it.

64
00:03:19.077 --> 00:03:20.719
So not from my mouth, but

65
00:03:20.719 --> 00:03:24.799
from the actual engineers at
Google who made it way back when.

66
00:03:24.799 --> 00:03:28.131
Then we're gonna go into AWS,
Amazon Web Services.

67
00:03:28.131 --> 00:03:33.138
In my opinion, that's going to be
the most exciting part because we're

68
00:03:33.138 --> 00:03:37.979
gonna take those concepts from Go,
roll them into actually deploying

69
00:03:37.979 --> 00:03:42.676
them using infrastructure,
using a framework that AWS provided.

70
00:03:42.676 --> 00:03:46.400
And then we'll see it all
come together at the end.

71
00:03:46.400 --> 00:03:51.000
So we're gonna build off these blocks,
very similar to how CDK has the concept of

72
00:03:51.000 --> 00:03:54.530
constructs, which we'll get
into in just a little bit here.

73
00:03:54.530 --> 00:03:57.008
So yeah, that's the introduction.

74
00:03:57.008 --> 00:03:59.638
Prereqs, so
everyone here should have everything.

75
00:03:59.638 --> 00:04:03.693
But if you don't, if you're watching this,
the first one is have Go installed.

76
00:04:03.693 --> 00:04:06.497
No surprise, this is a Go course.

77
00:04:06.497 --> 00:04:07.742
So have Go installed.

78
00:04:07.742 --> 00:04:13.382
My suggestion, always try to get
the latest version, but Go is boring.

79
00:04:13.382 --> 00:04:17.708
So if you miss a version for whatever,
life gets busy, just don't see it,

80
00:04:17.708 --> 00:04:18.540
don't fret.

81
00:04:18.540 --> 00:04:20.581
There's not gonna be anything monumental.

82
00:04:20.581 --> 00:04:25.860
Go kinda moves at this controlled
cadence where if I were to bet my money,

83
00:04:25.860 --> 00:04:28.809
there will never be a Go 2.0 release.

84
00:04:28.809 --> 00:04:32.156
There's never gonna be a major
release like Python 2 to Python 3,

85
00:04:32.156 --> 00:04:34.987
where you have to rewrite all
their apps or migrate them.

86
00:04:34.987 --> 00:04:38.443
Go moves pretty controlled,
so have it installed.

87
00:04:38.443 --> 00:04:43.138
If you can't get 122, at least try to get
118, that's where generics are involved.

88
00:04:43.138 --> 00:04:48.005
I think that's where more of
a substantial update may have occurred.

89
00:04:48.005 --> 00:04:51.562
But moving forward,
you also need an AWS account.

90
00:04:51.562 --> 00:04:55.455
Everything we're gonna touch today,
goes under the free tier.

91
00:04:55.455 --> 00:05:00.027
I know AWS has this boogeyman monitor,
like if you have something running,

92
00:05:00.027 --> 00:05:02.606
you're gonna have a giant bill at the end.

93
00:05:02.606 --> 00:05:04.107
We're definitely gonna avoid that.

94
00:05:04.107 --> 00:05:08.726
We're not building anything,
no Netflix level traffic here.

95
00:05:08.726 --> 00:05:10.887
So everything,
we're gonna use it the free tier.

96
00:05:10.887 --> 00:05:14.023
And following that,
you're going to need the AWS CLI, so

97
00:05:14.023 --> 00:05:15.947
make sure you have that installed.

98
00:05:15.947 --> 00:05:19.205
It's a pretty straightforward
installation, whether you're on Mac,

99
00:05:19.205 --> 00:05:22.105
Windows, Linux, whatever, and
configure your credentials.

100
00:05:22.105 --> 00:05:25.552
So have your .AWS files configured.

101
00:05:25.552 --> 00:05:28.812
You can configure all that using the AWS
configure command at the bottom.

102
00:05:28.812 --> 00:05:32.824
So that will run you through pretty simple
CLI script to match your credentials,

103
00:05:32.824 --> 00:05:34.716
match your region, account number.

104
00:05:34.716 --> 00:05:39.633
So if you haven't, maybe do that now,
if you have, awesome, thumbs up.

105
00:05:39.633 --> 00:05:41.235
And then have CDK installed.

106
00:05:41.235 --> 00:05:43.518
CDK is the framework AWS made.

107
00:05:43.518 --> 00:05:48.451
It's what's going to allow us to
communicate to AWS without having

108
00:05:48.451 --> 00:05:49.754
to go on their UI.

109
00:05:49.754 --> 00:05:51.071
We don't have to go on the UI at all.

110
00:05:51.071 --> 00:05:55.552
We can literally do everything from
your IDE, whether that's VSCode,

111
00:05:55.552 --> 00:05:59.749
Neovim, whatever, you just have
it popped open and you're good.

112
00:05:59.749 --> 00:06:00.702
Question?

113
00:06:00.702 --> 00:06:03.266
&gt;&gt; What language are we
using the CDK with?

114
00:06:03.266 --> 00:06:04.367
&gt;&gt; Go, baby.

115
00:06:04.367 --> 00:06:08.795
I love that question cuz I originally
wrote this course using TypeScript for

116
00:06:08.795 --> 00:06:13.232
CDK, cuz that's where CDk was natively
written, but then it hit me, why?

117
00:06:13.232 --> 00:06:17.233
Why would I have an intro
to Go course deploying Go

118
00:06:17.233 --> 00:06:20.657
application logic with TypeScript CDK?

119
00:06:20.657 --> 00:06:22.005
I was just like,
let's just do everything in Go.

120
00:06:22.005 --> 00:06:22.535
Why not?

121
00:06:22.535 --> 00:06:25.432
Let's just double down,
triple down on this Go usage.

122
00:06:25.432 --> 00:06:27.446
So yeah,
everything's gonna be written in Go.

123
00:06:27.446 --> 00:06:28.852
No TypeScript here, okay?

124
00:06:28.852 --> 00:06:30.721
There's no TypeScript at all.

125
00:06:30.721 --> 00:06:33.999
We're not gonna be touching
that in this workshop.

126
00:06:33.999 --> 00:06:36.339
Cool, so goals of this course.

127
00:06:36.339 --> 00:06:38.590
All right, there is four goals.

128
00:06:38.590 --> 00:06:40.963
First is to teach a basic Go.

129
00:06:40.963 --> 00:06:44.326
I know a lot of people here have already
used Go, have experience with Go.

130
00:06:44.326 --> 00:06:45.043
That's awesome.

131
00:06:45.043 --> 00:06:46.603
That's wonderful.

132
00:06:46.603 --> 00:06:48.429
So we're gonna breeze through that.

133
00:06:48.429 --> 00:06:51.659
We're going to touch on
the data structures that

134
00:06:51.659 --> 00:06:55.124
I think are important to Go,
but data structures and

135
00:06:55.124 --> 00:07:00.107
principles of Go that are actually going
to use when we build the software.

136
00:07:00.107 --> 00:07:03.897
Go is a programming language built by
people who are much smarter than me.

137
00:07:03.897 --> 00:07:04.957
There's a lot to it.

138
00:07:04.957 --> 00:07:09.928
Even though it's a simple language,
I just don't wanna go through every niche

139
00:07:09.928 --> 00:07:14.020
detail of it if we're not gonna
use it in the AWS portion, right?

140
00:07:14.020 --> 00:07:17.897
So in that kind of beginner slot,
everything we're gonna be introducing

141
00:07:17.897 --> 00:07:21.220
there, it's gonna roll over
into the next portions, right?

142
00:07:21.220 --> 00:07:26.108
We're gonna also introduce design patterns
of Go and recognize common gotchas.

143
00:07:26.108 --> 00:07:28.092
Every language is gonna have gotchas.

144
00:07:28.092 --> 00:07:33.420
People who wrote languages wrote them for
a reason, and there's things

145
00:07:33.420 --> 00:07:39.025
you may be scratching your head like why
did the team choose to do it that way?

146
00:07:39.025 --> 00:07:39.788
Why is it this?

147
00:07:39.788 --> 00:07:40.678
What does this even mean?

148
00:07:40.678 --> 00:07:44.105
So I wanna show some gotchas that,
obviously, I go through that,

149
00:07:44.105 --> 00:07:47.113
we've probably gone through already,
highlight them.

150
00:07:47.113 --> 00:07:51.321
And then the third point is introduce how
to use Go with the most popular cloud

151
00:07:51.321 --> 00:07:51.991
provider.

152
00:07:51.991 --> 00:07:52.757
That's a fact.

153
00:07:52.757 --> 00:07:56.592
That's just not me trying to sell you
on anything, that's just how it is.

154
00:07:56.592 --> 00:07:59.474
The market share, AWS is king.

155
00:07:59.474 --> 00:08:02.067
And we're gonna go through
all of this in detail,

156
00:08:02.067 --> 00:08:05.786
but how do we use a great language
like Go with a popular cloud provider?

157
00:08:05.786 --> 00:08:10.306
And then the fourth portion is, how do
we actually deploy infrastructure, and

158
00:08:10.306 --> 00:08:13.010
run Go code in a production
level environment?

159
00:08:13.010 --> 00:08:15.556
So we have a bunch of info
that we're gonna deploy,

160
00:08:15.556 --> 00:08:18.341
we're gonna have all of our
Go code deploying that, and

161
00:08:18.341 --> 00:08:21.854
we're gonna have our actual application
logic written in Go as well.

162
00:08:21.854 --> 00:08:25.357
&gt;&gt; What's your thoughts on Terraform,
that it's written in Go?

163
00:08:25.357 --> 00:08:32.567
&gt;&gt; I mean, personally, I chose to use CDK,
could have done it with Terraform.

164
00:08:32.567 --> 00:08:34.733
My personal preference is CDK.

165
00:08:34.733 --> 00:08:38.845
It just feels more natural from
a software development perspective,

166
00:08:38.845 --> 00:08:43.453
like writing code, you're not just
writing a YAML file or whatever, right?

167
00:08:43.453 --> 00:08:45.445
You're just writing functions,

168
00:08:45.445 --> 00:08:49.022
you're passing that function
around into a hierarchy tree.

169
00:08:49.022 --> 00:08:52.389
So to me, it just feels a little
bit more fluent than running CDK,

170
00:08:52.389 --> 00:08:55.817
feels more like, okay,
I'm just writing code, assembling it,

171
00:08:55.817 --> 00:08:59.947
versus making sure I write this script,
this file, which then gets deployed.

172
00:08:59.947 --> 00:09:03.173
So my personal preference
has always been CDK.

173
00:09:03.173 --> 00:09:07.344
So target audience, I think I touched on
this a little bit in the beginning, but

174
00:09:07.344 --> 00:09:09.349
it's anyone who just wants to learn.

175
00:09:09.349 --> 00:09:10.952
I think that's the best way I can say it.

176
00:09:10.952 --> 00:09:12.455
It's anybody who wants to learn anything.

177
00:09:12.455 --> 00:09:15.582
I know talking to some of
the people in the workshop,

178
00:09:15.582 --> 00:09:20.346
there's a diverse group of individuals
who come from different backgrounds,

179
00:09:20.346 --> 00:09:24.700
whether it's your pro at front end,
you're a master back in whatever.

180
00:09:24.700 --> 00:09:27.820
I think if you just wanna learn
something new, this is a great workshop.

181
00:09:27.820 --> 00:09:32.475
And obviously it's particularly targeted
to those maybe new to Go, new to AWS or

182
00:09:32.475 --> 00:09:33.238
vice versa.

183
00:09:33.238 --> 00:09:35.172
And one key thing I wanna say,

184
00:09:35.172 --> 00:09:40.218
it's let's say at the end of this you
still wanna go to your bread and butter.

185
00:09:40.218 --> 00:09:44.289
Let's say you're a PHP dev, Java dev,
Python dev, whatever it could be,

186
00:09:44.289 --> 00:09:48.947
I want you to still be able to incorporate
AWS into what you're familiar with, right?

187
00:09:48.947 --> 00:09:53.395
Or let's say you are a master at Go,
but you just don't like AWS for

188
00:09:53.395 --> 00:09:54.679
whatever reason.

189
00:09:54.679 --> 00:09:59.222
Let's say the docs aren't there, maybe the
company you're working for use Azure, GCP,

190
00:09:59.222 --> 00:10:00.356
then swap it, right?

191
00:10:00.356 --> 00:10:04.364
So maybe there's something in those
two components that you like,

192
00:10:04.364 --> 00:10:08.667
that's kind of the perfect audience,
in my opinion, for this course.

193
00:10:08.667 --> 00:10:11.359
Okay, so what are we gonna be building?

194
00:10:11.359 --> 00:10:13.471
I have this beautiful diagram,

195
00:10:13.471 --> 00:10:17.703
and I know you guys are thinking
that I'm an artist, which I am.

196
00:10:17.703 --> 00:10:18.814
But this is it.

197
00:10:18.814 --> 00:10:20.793
I mean, this is the workshop.

198
00:10:20.793 --> 00:10:22.188
Thank you for coming.

199
00:10:22.188 --> 00:10:25.158
But we have this client box
all the way to the left, and

200
00:10:25.158 --> 00:10:27.148
that's gonna be making requests.

201
00:10:27.148 --> 00:10:33.227
And we're gonna have this nice green
vertical box called API Gateway.

202
00:10:33.227 --> 00:10:36.600
It's gonna take these requests to go and
do some logic and do some magic.

203
00:10:36.600 --> 00:10:41.163
And it's gonna just send it over to this
orange box called Lambda, all right?

204
00:10:41.163 --> 00:10:43.611
We're gonna get into what a Lambda is, but

205
00:10:43.611 --> 00:10:47.692
the cool part is there's a box within
the Lambda box which says Go code.

206
00:10:47.692 --> 00:10:49.409
We're gonna write that Go code.

207
00:10:49.409 --> 00:10:50.886
We're gonna package it up.

208
00:10:50.886 --> 00:10:53.828
We're gonna shove it into this Lambda,
deploy it, and

209
00:10:53.828 --> 00:10:57.909
it's gonna receive requests essentially
from the API Gateway, all right?

210
00:10:57.909 --> 00:11:02.281
And this API Gateway, we'll go into
all of this in more detail, but

211
00:11:02.281 --> 00:11:05.748
the AWS Gateway is basically
acting as a proxy for us.

212
00:11:05.748 --> 00:11:09.428
It's receiving these incoming
requests from our client.

213
00:11:09.428 --> 00:11:11.003
It's gonna say, okay, who are you?

214
00:11:11.003 --> 00:11:12.956
Are you even allowed to query us?

215
00:11:12.956 --> 00:11:13.737
What do you want?

216
00:11:13.737 --> 00:11:14.968
Where do you wanna go?

217
00:11:14.968 --> 00:11:16.947
We'll go into all this and more.

218
00:11:16.947 --> 00:11:20.041
And then lastly, we are gonna go
into this DynamoDB, a database.

219
00:11:20.041 --> 00:11:23.123
So we're gonna actually take requests,
put them into a DB, and

220
00:11:23.123 --> 00:11:25.594
then take all of that and
send it back to our client.

221
00:11:25.594 --> 00:11:26.849
Did it work?

222
00:11:26.849 --> 00:11:27.766
Did it not work?

223
00:11:27.766 --> 00:11:28.734
Why did it not work?

224
00:11:28.734 --> 00:11:34.325
So this is the end-to-end architecture
of what we're going to build.

225
00:11:36.275 --> 00:11:40.710
And then here's a more
sophisticated diagram.

226
00:11:40.710 --> 00:11:47.539
You have the Gateway,
the Lambda function, and Amazon DynamoDB.

227
00:11:47.539 --> 00:11:50.717
If you've never touched any of
these pieces of infrastructure or

228
00:11:50.717 --> 00:11:53.331
you may be confused as to what you are,
that's good.

229
00:11:53.331 --> 00:11:58.182
I'm gonna go into detail into all of
these further down, but this is how and

230
00:11:58.182 --> 00:11:59.581
Go interact together.

231
00:11:59.581 --> 00:12:03.112
There's gonna be this concept
of an IAM role, permissions.

232
00:12:03.112 --> 00:12:06.248
But what I really enjoy when
I was building this, and

233
00:12:06.248 --> 00:12:10.596
obviously I'm biased cuz I built this
course, but I really like the fact

234
00:12:10.596 --> 00:12:15.086
that we can literally send something
from our computer, write it all out,

235
00:12:15.086 --> 00:12:18.389
type it, get really heavy and
dirty with it, deploy.

236
00:12:18.389 --> 00:12:21.094
And it's no longer on our computer,
it's on the cloud.

237
00:12:21.094 --> 00:12:23.431
And then we can send
requests to each other.

238
00:12:23.431 --> 00:12:28.281
We can send requests to ourselves, and
actually see our DB processing those

239
00:12:28.281 --> 00:12:31.861
requests, storing them, and
we get the request back.

240
00:12:31.861 --> 00:12:32.888
So I think that's really cool.

241
00:12:32.888 --> 00:12:34.030
Nothing's on the local machine.

242
00:12:34.030 --> 00:12:37.510
You're not gonna have
a process on localhost 3000 or

243
00:12:37.510 --> 00:12:39.982
localhost 8081 running anything.

244
00:12:39.982 --> 00:12:41.232
So it's all deployed.

245
00:12:41.232 --> 00:12:43.169
That's how we're gonna
be running this code.

246
00:12:43.169 --> 00:12:46.889
And this is a deeper dive into
the architecture diagram,

247
00:12:46.889 --> 00:12:49.924
more from application perspective, right?

248
00:12:49.924 --> 00:12:50.846
What are we gonna do?

249
00:12:50.846 --> 00:12:54.047
So we have a client,
we're gonna basically have two endpoints.

250
00:12:54.047 --> 00:12:57.637
We want to register a new user,
or we want to log them in.

251
00:12:57.637 --> 00:13:02.414
Register, pretty simple, we're gonna
get a JSON payload with your username,

252
00:13:02.414 --> 00:13:03.758
plaintext password.

253
00:13:03.758 --> 00:13:07.121
We're gonna hash that,
store in our DB, we're done.

254
00:13:07.121 --> 00:13:09.074
Second endpoint, login.

255
00:13:09.074 --> 00:13:11.473
Are they registered, yes, awesome.

256
00:13:11.473 --> 00:13:16.370
Does the plaintext password I'm
providing in the JSON match the hashed

257
00:13:16.370 --> 00:13:18.258
password in the DynamoDB?

258
00:13:18.258 --> 00:13:19.591
It is, cool.

259
00:13:19.591 --> 00:13:24.041
And then we go to this next part,
which is issuing a JWT,

260
00:13:24.041 --> 00:13:28.137
pronounced jot, and
it stands for JSON Web token.

261
00:13:28.137 --> 00:13:32.722
And this acts as an access card,
like a batch card, right?

262
00:13:32.722 --> 00:13:36.344
If you enter this building or enter
anything, you have to scan your badge.

263
00:13:36.344 --> 00:13:39.267
And depending on who you are,
depending on the permissions of your card,

264
00:13:39.267 --> 00:13:40.365
you have different rules.

265
00:13:40.365 --> 00:13:41.937
Can you enter this room or not?

266
00:13:41.937 --> 00:13:44.966
So this is a TLD or
an authentication method,

267
00:13:44.966 --> 00:13:48.091
which are gonna go more
in depth down the line.

268
00:13:48.091 --> 00:13:51.042
But this is truly the course broken down.

269
00:13:51.042 --> 00:13:56.288
We're gonna have the whole kind of
interaction with our user to our entire

270
00:13:56.288 --> 00:14:01.635
system, issuing a way to authenticate
them, and rock and roll with that.

271
00:14:01.635 --> 00:14:04.742
So I think, holistically,
it's a pretty simple,

272
00:14:04.742 --> 00:14:08.498
straightforward application,
essentially like a REST API.

273
00:14:08.498 --> 00:14:12.987
But there's a lot of intricacies that
are introduced when you wanna deploy it on

274
00:14:12.987 --> 00:14:15.064
AWS, especially on scale, right?

275
00:14:15.064 --> 00:14:19.672
Cuz what I'm introducing here,
it can handle 0 traffic to 100, to 1,000,

276
00:14:19.672 --> 00:14:23.579
to 10,000 with the infrastructure
that we're going to be using.

277
00:14:23.579 --> 00:14:27.053
So I'm excited, I hope you are too.

