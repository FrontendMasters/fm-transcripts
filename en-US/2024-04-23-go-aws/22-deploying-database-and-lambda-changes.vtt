WEBVTT

1
00:00:00.500 --> 00:00:03.455
So now that we have our
Lambda artifacts created and

2
00:00:03.455 --> 00:00:08.072
we've defined our infrastructure,
we can then go back to those CDK commands.

3
00:00:08.072 --> 00:00:13.199
We can do a CDK diff, And
take your time, don't rush.

4
00:00:13.199 --> 00:00:14.528
I'm just gonna showcase this.

5
00:00:14.528 --> 00:00:17.853
If you need to see some code,
please, just ask me, I'll go back.

6
00:00:17.853 --> 00:00:23.420
If you run CDK diff,
you'll see it's gonna take some time.

7
00:00:23.420 --> 00:00:26.199
It's gonna look at that snapshot,
which actually exists this time and

8
00:00:26.199 --> 00:00:27.784
it's no longer just added green stuff.

9
00:00:27.784 --> 00:00:31.559
We're making modifications to our stack,
right?

10
00:00:31.559 --> 00:00:35.655
If you scroll up,
we're adding a new DynamoDB:Table.

11
00:00:35.655 --> 00:00:37.599
We're adding a new policy and

12
00:00:37.599 --> 00:00:41.891
this is a modification to
the existing Lambda Function, right?

13
00:00:41.891 --> 00:00:45.788
And there's some metadata
that is changing, right?

14
00:00:45.788 --> 00:00:48.751
Basically adding a new service or
default policy, which,

15
00:00:48.751 --> 00:00:53.033
in layman's terms allows this Lambda
communicate with a DynamoDB:Table, right?

16
00:00:53.033 --> 00:00:56.692
But this is, I want to highlight kind of
the value of doing a CDK diff as like

17
00:00:56.692 --> 00:00:58.537
a layer of protection to see, okay?

18
00:00:58.537 --> 00:01:01.434
Is this really what I'm doing
my deploying what I wanna do?

19
00:01:01.434 --> 00:01:07.481
And then you can just do CDK deploy.

20
00:01:07.481 --> 00:01:11.379
Once you deploy items, the first time,
it's always the longest time because

21
00:01:11.379 --> 00:01:13.812
that's to spin up the brand
new resource for it.

22
00:01:13.812 --> 00:01:20.860
When you're making updates to the
infrastructure, it's a lot faster, okay?

23
00:01:20.860 --> 00:01:24.114
There was a really good question
about the local deployment.

24
00:01:24.114 --> 00:01:28.948
I definitely think if you are going to
have CDK, something you do like 24-7,

25
00:01:28.948 --> 00:01:32.929
having a local instance where you
can test stuff and kind of move and

26
00:01:32.929 --> 00:01:35.437
iterate faster is worth the investment.

27
00:01:35.437 --> 00:01:37.835
It's just if I were to set that up for
this workshop,

28
00:01:37.835 --> 00:01:40.572
it would have been a good portion
of it just setting that up.

29
00:01:43.052 --> 00:01:45.822
So we can just wait while this
finishes updating and creating.

30
00:01:47.932 --> 00:01:52.788
And if all works well, once we query and
invoke our Lambda Function,

31
00:01:52.788 --> 00:01:56.568
we should see the record
in our new DynamoDB :Table.

32
00:01:56.568 --> 00:01:58.907
And it should be the username and
the password we pass it in.

33
00:01:58.907 --> 00:02:02.374
Now let's go back to
our Cloudformation and

34
00:02:02.374 --> 00:02:05.472
we can just go back here, go to stacks.

35
00:02:05.472 --> 00:02:10.230
If we refresh just in case,
we can remove these props, these tabs.

36
00:02:10.230 --> 00:02:14.462
Go to our stack, you can see resources,
now we'll have a user table.

37
00:02:14.462 --> 00:02:18.150
So our lambda function and our user table,
we can click into this user table,

38
00:02:18.150 --> 00:02:19.814
click into this lambda function.

39
00:02:19.814 --> 00:02:23.789
Lambda function, it's really gonna look
exactly the same as the previous UI.

40
00:02:23.789 --> 00:02:27.372
Nothing's different, maybe the package
size is a little bit increased because

41
00:02:27.372 --> 00:02:29.859
we've added more,
a lot more files and folders, etc.

42
00:02:29.859 --> 00:02:32.377
So obviously that's gonna increase.

43
00:02:32.377 --> 00:02:36.068
But if you look at our DynamoDB,
if you go to explore table items,

44
00:02:36.068 --> 00:02:39.977
you'll see here there's no items
it's an empty database, right?

45
00:02:39.977 --> 00:02:41.443
But now we have it deployed.

46
00:02:41.443 --> 00:02:45.107
So we have a way to store data
which I think is really cool.

47
00:02:45.107 --> 00:02:49.503
And now if you go to test and
run pretty much the exact same test.

48
00:02:49.503 --> 00:02:53.225
Let's go ahead instead of doing one
parameter will be two parameters.

49
00:02:53.225 --> 00:02:58.900
I'm gonna put username as milky and
if you're faster than me just go ahead and

50
00:02:58.900 --> 00:03:06.216
insert it right and
put password 123, And put password,

51
00:03:06.216 --> 00:03:11.473
let's go ahead and test,
boom, successfully called.

52
00:03:12.609 --> 00:03:15.948
You know what?

53
00:03:15.948 --> 00:03:17.113
I did miss something.

54
00:03:17.113 --> 00:03:19.004
My apologies.
We didn't actually pipe down

55
00:03:19.004 --> 00:03:20.513
the function here.

56
00:03:20.513 --> 00:03:22.343
We have the same handler request.

57
00:03:22.343 --> 00:03:25.565
So I got too excited.

58
00:03:25.565 --> 00:03:30.018
Instead of doing just that handler request
cuz it's still calling the same function,

59
00:03:30.018 --> 00:03:32.224
we now actually have to
make use is our app.

60
00:03:32.224 --> 00:03:34.495
To do my app, okay?

61
00:03:34.495 --> 00:03:35.582
We're gonna declare it.

62
00:03:35.582 --> 00:03:38.382
And instead of passing
the direct function,

63
00:03:38.382 --> 00:03:43.553
what we're going to do is my app.API
handler that register user handler.

64
00:03:43.553 --> 00:03:48.716
And now when we again unfortunately
have to go through that same process of

65
00:03:48.716 --> 00:03:53.730
creating artifacts, redeploying it but
this one will be much faster.

66
00:03:53.730 --> 00:03:57.201
So go back to a lambda directory,
you can run a make build and

67
00:03:57.201 --> 00:04:00.267
then go back and
go right away into a city key deploy.

68
00:04:00.267 --> 00:04:04.518
And because our CDK deploy is not
deploying new infrastructure,

69
00:04:04.518 --> 00:04:10.269
it's not gonna give us that prompt of you
want to confirm the change yes or no.

70
00:04:10.269 --> 00:04:12.414
Because we're modifying existing infra and

71
00:04:12.414 --> 00:04:16.029
we're not changing the underlying
properties of that infrastructure, so

72
00:04:16.029 --> 00:04:19.937
we're not gonna get that confirmation
message, it's going to deploy it for us.

73
00:04:22.961 --> 00:04:24.869
You can see here, there's gonna
be an update in progress, right?

74
00:04:24.869 --> 00:04:26.685
So now we're updating our lambda function,

75
00:04:26.685 --> 00:04:30.097
we're updating everything that's gonna
be touched with this new CDK deployment.

76
00:04:37.219 --> 00:04:40.497
Cool, so now we have it, we can go back.

77
00:04:40.497 --> 00:04:44.300
I like to do a hard
refresh no matter what and

78
00:04:44.300 --> 00:04:49.265
if you go back to test if it's
on JSON have to put all these

79
00:04:49.265 --> 00:04:53.702
parameters in again password One,
Two, Three,

80
00:04:53.702 --> 00:04:58.564
put our password value here
I'm gonna put username and

81
00:04:58.564 --> 00:05:04.094
the value instead of value one
let's just put Melkey test it.

82
00:05:04.094 --> 00:05:07.494
Boom, no, no error.

83
00:05:07.494 --> 00:05:11.556
If we go back to our DynamoDB we hit
this with a refresh Melkey password One,

84
00:05:11.556 --> 00:05:12.340
Two, Three.

85
00:05:12.340 --> 00:05:17.727
So now we have this way to invoke
functions and have that invoked function

86
00:05:17.727 --> 00:05:22.778
hit other infer that didn't know
existed 20, 30 minutes ago.

87
00:05:25.551 --> 00:05:27.911
And again,
I know we're showing plain text passwords.

88
00:05:27.911 --> 00:05:30.691
You can put the pitchforks
down a little bit.

89
00:05:30.691 --> 00:05:33.842
We're gonna change this when the hash will
make it work in a more production level,

90
00:05:33.842 --> 00:05:35.927
starting with hashing and
validating that password.

91
00:05:35.927 --> 00:05:39.111
But I want to show the step of how we
now interact with another piece of

