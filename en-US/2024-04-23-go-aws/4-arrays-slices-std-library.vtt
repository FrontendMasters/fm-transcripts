WEBVTT

1
00:00:00.176 --> 00:00:04.893
Right, so let's go make a new folder
called loops in here, main.go.

2
00:00:04.893 --> 00:00:05.841
You know the drill.

3
00:00:05.841 --> 00:00:09.922
Package main, func main, awesome.

4
00:00:09.922 --> 00:00:15.612
All right, so in go looping,
you have to loop over something.

5
00:00:15.612 --> 00:00:17.859
What do you loop over?

6
00:00:17.859 --> 00:00:19.455
There's arrays.

7
00:00:19.455 --> 00:00:20.768
We know what arrays are.

8
00:00:20.768 --> 00:00:23.878
They're lists,
they can store value, all right?

9
00:00:23.878 --> 00:00:28.858
And arrays in Go basically can be,
they're fixed in size.

10
00:00:28.858 --> 00:00:30.976
So when you declare an array,

11
00:00:30.976 --> 00:00:34.720
you are declaring the size
right away with an array.

12
00:00:34.720 --> 00:00:36.861
So an example of an array
in the syntax is,

13
00:00:36.861 --> 00:00:39.017
let's say we create an array of animals.

14
00:00:39.017 --> 00:00:40.861
And we can infer the type.

15
00:00:40.861 --> 00:00:46.922
And the syntax to create an array is [],
and then, what is this gonna store?

16
00:00:46.922 --> 00:00:51.271
So let's say it just stores 2,
and we're gonna put string, okay?

17
00:00:51.271 --> 00:00:55.161
And basically, in Go,
you cannot have mixed types in arrays.

18
00:00:55.161 --> 00:00:59.975
So this is gonna be an array that
has two strings in it, all right?

19
00:00:59.975 --> 00:01:03.110
And if you wanna add
a value to to our array,

20
00:01:03.110 --> 00:01:06.260
you can do this equals, let's say, dog.

21
00:01:06.260 --> 00:01:11.906
Awesome, and then if you want
to do another one, it's cat.

22
00:01:11.906 --> 00:01:13.963
We have an array of dog and cat.

23
00:01:13.963 --> 00:01:18.900
If you want to put another animal in
the second index, it's gonna yell at us.

24
00:01:18.900 --> 00:01:23.604
Sad arrange, so go strict,
Go knows what you're trying to do.

25
00:01:23.604 --> 00:01:28.568
And arrays are very good in
terms of memory and efficiency.

26
00:01:28.568 --> 00:01:30.958
Because at the time of declaration,

27
00:01:30.958 --> 00:01:35.748
you're already assigning all the memory
it is going to need, all right?

28
00:01:35.748 --> 00:01:40.002
Now, there is a con to this, and
that comes in the form of flexibility.

29
00:01:40.002 --> 00:01:44.749
We can't append a new
value into our array.

30
00:01:44.749 --> 00:01:46.472
That's not how arrays work.

31
00:01:46.472 --> 00:01:48.201
So there's trade off.

32
00:01:48.201 --> 00:01:50.334
They're useful but they're not flexible.

33
00:01:50.334 --> 00:01:51.999
So use them accordingly, right?

34
00:01:51.999 --> 00:01:54.868
And we can just print
this format print line,

35
00:01:54.868 --> 00:01:57.745
let's just print a line of animals, right?

36
00:01:57.745 --> 00:02:02.905
And then we can run this, go run,
go into our loops, main.go.

37
00:02:02.905 --> 00:02:04.635
Ta da, dog, cat.

38
00:02:04.635 --> 00:02:07.891
Cool, we can reassign them,
it's all good, nothing too crazy.

39
00:02:07.891 --> 00:02:12.316
If you don't like this method of indexing
what value, cuz if you have a hundred or

40
00:02:12.316 --> 00:02:14.088
something, can get annoying.

41
00:02:14.088 --> 00:02:17.320
Another maybe easier way, you can just
go in here and declare them at start.

42
00:02:17.320 --> 00:02:20.369
So, dog, cat, okay?

43
00:02:20.369 --> 00:02:22.121
And if you run this,
it's the exact same thing.

44
00:02:22.121 --> 00:02:27.266
And you can modify the string
that's in that index.

45
00:02:27.266 --> 00:02:28.513
So those are arrays.

46
00:02:28.513 --> 00:02:33.214
However, there is a different native
data structure in Go, let's go ahead and

47
00:02:33.214 --> 00:02:36.037
just delete this, and
that's called a slice.

48
00:02:36.037 --> 00:02:40.342
And a slice, if you guys can guess,
it is a flexible,

49
00:02:40.342 --> 00:02:43.708
dynamic set sized, align essentially.

50
00:02:43.708 --> 00:02:46.746
It can be expanded,
you can append things to it,

51
00:02:46.746 --> 00:02:50.751
you can delete elements from
the slice because it's flexible,

52
00:02:50.751 --> 00:02:54.920
it's dynamic, again,
costs more memory, yada, yada, yada.

53
00:02:54.920 --> 00:02:56.379
In the syntax, it's just the same thing.

54
00:02:56.379 --> 00:03:03.219
String, like this, but we do not assign a
value in those square brackets, all right?

55
00:03:03.219 --> 00:03:05.588
So it's just anything, so
now Go knows, okay, this is a slice,

56
00:03:05.588 --> 00:03:06.419
let's rock and roll.

57
00:03:06.419 --> 00:03:10.117
Looks very,
very close to an array, all right?

58
00:03:10.117 --> 00:03:13.134
And let's just append our values in here.

59
00:03:13.134 --> 00:03:17.990
Let's do dog, cat, cool, awesome.

60
00:03:17.990 --> 00:03:19.763
And now, because it's a slice,

61
00:03:19.763 --> 00:03:23.066
we actually get introduced to
some helper functions from Go.

62
00:03:23.066 --> 00:03:27.924
Let's say want to add a new animal,
a moose, we can do animals, and

63
00:03:27.924 --> 00:03:33.123
we can do append, so a built-in method,
an append takes in the slice and

64
00:03:33.123 --> 00:03:36.388
animals and
a type that we wanna append to it.

65
00:03:36.388 --> 00:03:37.927
So I'll put moose.

66
00:03:37.927 --> 00:03:42.158
Okay, format print line, animals.

67
00:03:42.158 --> 00:03:43.566
Save this.

68
00:03:43.566 --> 00:03:46.410
If we run it, dog, cat, moose.

69
00:03:46.410 --> 00:03:49.925
We got a crazy zoo, a Canadian Zoo, okay?

70
00:03:49.925 --> 00:03:51.291
This is cool.

71
00:03:51.291 --> 00:03:55.996
If you want to delete a value from
a slice, there's no pop method,

72
00:03:55.996 --> 00:03:59.957
there's no like,
remove this index method in Go.

73
00:03:59.957 --> 00:04:04.831
And prior to Go 121,
removing an element from a slice,

74
00:04:04.831 --> 00:04:09.704
it's still the case, but
you basically create two slices

75
00:04:09.704 --> 00:04:14.398
from the original slice and
then append them together.

76
00:04:14.398 --> 00:04:17.737
I swear, that's how you would move
an element in slice in Go, and

77
00:04:17.737 --> 00:04:19.335
that's still how it's done.

78
00:04:19.335 --> 00:04:22.861
But in Go 1 21,
they introduced In a helper package,

79
00:04:22.861 --> 00:04:27.901
a thin wrapper around that logic,
we're gonna explore that, called slices.

80
00:04:27.901 --> 00:04:32.694
If you don't have Go 121,
don't worry, it's not a big deal.

81
00:04:32.694 --> 00:04:34.335
We're gonna go through it as well.

82
00:04:34.335 --> 00:04:36.923
But basically if you do have slices,

83
00:04:36.923 --> 00:04:43.019
what you do is you have to re-declare the
value in animals, if you do slices.delete,

84
00:04:43.019 --> 00:04:47.549
put in the animal slice, and
like here, you have to put a range.

85
00:04:47.549 --> 00:04:48.776
You give it the range,

86
00:04:48.776 --> 00:04:52.468
the indexes of where you want to
remove the element from your slice.

87
00:04:52.468 --> 00:04:56.953
So let's say we wanna remove our dog,
really didn't wanna ever say that sentence

88
00:04:56.953 --> 00:05:01.373
out loud, but we'll put the 0 and 1,
basically target the range from the first

89
00:05:01.373 --> 00:05:04.830
element that we're presenting,
which is 0, up towards 1.

90
00:05:04.830 --> 00:05:09.087
And if you print animals, we should
get cat, moose, boom, cat, moose.

91
00:05:09.087 --> 00:05:13.129
I'm more of a dog person, but
that is what the delete method does.

92
00:05:13.129 --> 00:05:17.243
And let's take a little peek
into this method, all right?

93
00:05:17.243 --> 00:05:22.167
Don't worry about everything but
this line right here,

94
00:05:22.167 --> 00:05:26.271
this is literally how you
would run a new slice or

95
00:05:26.271 --> 00:05:32.027
create a new slice by removing
element before the slices package.

96
00:05:32.027 --> 00:05:36.861
You're basically calling append
method on the existing slice two

97
00:05:36.861 --> 00:05:41.965
times with a range i and j, and
then you have this dot dot dot notation.

98
00:05:41.965 --> 00:05:45.424
This dot dot dot notation in Go
is called a variadic function,

99
00:05:45.424 --> 00:05:50.028
which basically means it can accept any
number of arguments in a slice formation.

100
00:05:50.028 --> 00:05:55.235
And so what's happening is append
is taking our first element here,

101
00:05:55.235 --> 00:06:00.080
our first slice of the array, or
our first portion of the slice,

102
00:06:00.080 --> 00:06:05.049
and we're saying, append to it
every element after the range j.

103
00:06:08.041 --> 00:06:10.064
Could it work?

104
00:06:10.064 --> 00:06:12.164
Yeah, sure, once you do it,
once you got it.

105
00:06:12.164 --> 00:06:15.820
That's why I think the slice package is
a little nice, cuz we as just the phasing

106
00:06:15.820 --> 00:06:18.943
developers, all we have to do is
write delete and kind of handle it.

107
00:06:18.943 --> 00:06:23.071
So it's a little bit more manageable,
it's the best, eh, but still works.

