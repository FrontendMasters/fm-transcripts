WEBVTT

1
00:00:00.186 --> 00:00:01.572
AWS.

2
00:00:01.572 --> 00:00:05.746
We finished the first, module and
the second module go again,

3
00:00:05.746 --> 00:00:09.838
I think it was a little bit more intro,
that was by design, and

4
00:00:09.838 --> 00:00:14.204
I didn't go into like every concept
of go like we just mentioned.

5
00:00:14.204 --> 00:00:17.642
I mentioned interface a few times,
we didn't go into detail of it, because,

6
00:00:17.642 --> 00:00:20.207
I think some things are better
shown with like an example.

7
00:00:20.207 --> 00:00:23.164
And so when we go through
building our software with AWS,

8
00:00:23.164 --> 00:00:26.564
we're gonna actually write and
use interfaces more in-depth.

9
00:00:26.564 --> 00:00:29.078
But, that was go,
let's switch gears to AWS.

10
00:00:31.621 --> 00:00:35.554
So, if you don't know what AWS is,
if you've never used it, AWS stands for

11
00:00:35.554 --> 00:00:39.686
Amazon Web Services and it's a cloud
provider, that's kind of the gist of it.

12
00:00:39.686 --> 00:00:46.266
And cloud provider does is it offers
fully featured services to consumers.

13
00:00:46.266 --> 00:00:50.528
These fully featured services, there's,
I'm not even joking, like so many,

14
00:00:50.528 --> 00:00:54.187
it says 200, I'm pretty sure
there's more I've never counted.

15
00:00:54.187 --> 00:00:57.927
But it's anything from databases,
computing engines, networking,

16
00:00:57.927 --> 00:01:00.696
storage options,
machine learning capabilities.

17
00:01:00.696 --> 00:01:05.728
I mean literally anything you could want,
either AWS has a version of it or they

18
00:01:05.728 --> 00:01:11.159
somehow got propriety access to make it
into their cloud providing systems, okay?

19
00:01:11.159 --> 00:01:16.526
And why did I choose AWS for
this course, why go in AWS,

20
00:01:16.526 --> 00:01:20.507
why not go in Azure or something else?.

21
00:01:20.507 --> 00:01:26.068
And I really find it important to have
a course that has the most practical

22
00:01:26.068 --> 00:01:31.368
benefit to person taking it, and
I'm sure everyone will take away.

23
00:01:31.368 --> 00:01:36.226
If it was Azure, but it'll take away
concepts Azure and that's gonna be helpful

24
00:01:36.226 --> 00:01:40.028
but from a job perspective,
AWS has the biggest market share.

25
00:01:40.028 --> 00:01:46.059
And this is a stat from, last quarter,
Amazon owns 31% of the market share,

26
00:01:46.059 --> 00:01:51.912
so it's a substantial portion, almost
one third of of all cloud providing,

27
00:01:51.912 --> 00:01:55.356
functionality with Azure coming in second.

28
00:01:55.356 --> 00:01:59.147
And then you have Google Cloud, GCP,
Alibaba Cloud, Salesforce, IBM cloud,

29
00:01:59.147 --> 00:02:03.052
Oracle, Tencent Cloud and then a bunch of
other smaller components that maybe have

30
00:02:03.052 --> 00:02:05.710
like half a percent market
share percent market share.

31
00:02:05.710 --> 00:02:10.573
And so AWS is known to be king, it has the
biggest availability and this translates

32
00:02:10.573 --> 00:02:15.170
to typically more jobs available for
companies looking for an AWS engineer.

33
00:02:15.170 --> 00:02:19.565
You see a lot of companies facilitate like
if you complete my AWS course you'll get

34
00:02:19.565 --> 00:02:23.148
a certificate or even AWS offers
his native certificate courses.

35
00:02:23.148 --> 00:02:27.098
And these have a lot of substance
when applying to stuff, right?

36
00:02:27.098 --> 00:02:31.305
So for me, like AWS makes a lot of
sense because I think goes practical.

37
00:02:31.305 --> 00:02:34.989
I just think AWS, if anything is more
practical in terms of software engineering

38
00:02:34.989 --> 00:02:37.544
developing because it's not
bounded to one language.

39
00:02:37.544 --> 00:02:40.354
It's bounded to more,
what do you want to build with it?

40
00:02:40.354 --> 00:02:42.785
And basically, it enables businesses and

41
00:02:42.785 --> 00:02:45.901
developers to run virtually
everything in the cloud.

42
00:02:45.901 --> 00:02:49.490
And again, the 200 fully featured
services, like this is queuing systems,

43
00:02:49.490 --> 00:02:52.976
this is like Kafka real-time systems,
machine learning endpoints with Sage

44
00:02:52.976 --> 00:02:55.387
maker, you can have relational
databases with RDS.

45
00:02:55.387 --> 00:02:57.994
You can have non-SQL
databases with DynamoDB.

46
00:02:57.994 --> 00:03:01.963
You can have, literally everything,
you can have server-based architecture,

47
00:03:01.963 --> 00:03:03.728
serverless-based architecture.

48
00:03:03.728 --> 00:03:05.882
The list goes on and on, and

49
00:03:05.882 --> 00:03:11.425
I don't wanna bore you with all
those possibilities that AWS offers.

50
00:03:11.425 --> 00:03:17.083
But AWS and
the AWS is used extensively with CDK or

51
00:03:17.083 --> 00:03:21.364
it can be used extensively with CDK.

52
00:03:21.364 --> 00:03:26.491
And I kind of want to actually break this
for a second to go and show you AWS.

53
00:03:26.491 --> 00:03:30.339
If you've never seen AWS or
the console, this is the UI.

54
00:03:30.339 --> 00:03:31.234
This is like AWS,

55
00:03:31.234 --> 00:03:34.589
I've logged into my account,
you can see here Mockito has hello.

56
00:03:34.589 --> 00:03:37.418
And you can see a list of
recently visited services, right?

57
00:03:37.418 --> 00:03:41.683
You have CloudFormation, DB, CodeBuild,
CodePipeline, Gateway, whatever.

58
00:03:41.683 --> 00:03:45.423
It's just some of the port
services it has offered, and

59
00:03:45.423 --> 00:03:49.332
you can go to services,
you can check them all out, okay?

60
00:03:49.332 --> 00:03:53.191
And if I wanna spin something up, a piece
of infrastructure, like AWS offers,

61
00:03:53.191 --> 00:03:56.821
let's say we go through an S3 bucket,
an S3 bucket, just blob storage,

62
00:03:56.821 --> 00:03:58.397
you can store anything in here.

63
00:03:58.397 --> 00:04:00.921
It could be CSV files, it could be images,

64
00:04:00.921 --> 00:04:03.529
let's just say we want
to make a new bucket.

65
00:04:03.529 --> 00:04:06.258
I can go ahead and create a bucket here,

66
00:04:06.258 --> 00:04:11.076
I can follow this really nicely
designed system to create my bucket.

67
00:04:11.076 --> 00:04:16.768
And that's fine, that works
nothing's wrong with that, maybe.

68
00:04:16.768 --> 00:04:23.877
Because that is where CDK comes into play,
in CDK, framework built by AWS,

69
00:04:23.877 --> 00:04:29.000
which allows us to define
our infrastructure as code.

70
00:04:29.000 --> 00:04:33.575
So it eliminates that portion of where
I go in the UI, I click a button,

71
00:04:33.575 --> 00:04:38.320
type a few parameters, click Create,
and to an extent, that's fine.

72
00:04:38.320 --> 00:04:40.083
Like creating an S3 bucket,
no one's going to lose sleep.

73
00:04:40.083 --> 00:04:44.063
Kratom on the UI, whatever they're like,
up down time is pretty easy,

74
00:04:44.063 --> 00:04:46.752
you can destroy them in
less time they make them.

75
00:04:46.752 --> 00:04:51.181
But when we deal with heavier
infrastructure now I'm talking like

76
00:04:51.181 --> 00:04:54.675
redshift clusters,
you don't wanna mess that up.

77
00:04:54.675 --> 00:04:57.984
Because the uptime to make a redshift
cluster takes some time, and

78
00:04:57.984 --> 00:05:01.470
then if you mess it up, if you
configure it improperly, or whatever,

79
00:05:01.470 --> 00:05:03.736
destroying it is also
a time consuming task.

80
00:05:03.736 --> 00:05:07.552
So you're taking time away from your
iterative speed when you do it like that.

81
00:05:07.552 --> 00:05:13.086
And infrastructure's code is something
that allows us to provision and

82
00:05:13.086 --> 00:05:17.540
write a code and
in deploy all that to AWS CloudFormation.

83
00:05:17.540 --> 00:05:21.631
AWS CloudFormation is a service on AWS,

84
00:05:21.631 --> 00:05:26.084
which basically uses
flat file templates to

85
00:05:26.084 --> 00:05:30.429
provision what service do you need on AWS?

86
00:05:30.429 --> 00:05:34.508
It's kind of like this channel
where we write our code using CDK,

87
00:05:34.508 --> 00:05:38.067
we deploy that, and
then deploy to CloudFormation, and

88
00:05:38.067 --> 00:05:43.202
CloudFormation is able to then transform
that code into these JSON or YAML files.

89
00:05:43.202 --> 00:05:45.127
These template files essentially,

90
00:05:45.127 --> 00:05:47.866
which then communicate to
the rest of the AWS suite.

91
00:05:47.866 --> 00:05:51.989
This individual needs a cluster,
a bucket, a lambda, etc,

92
00:05:51.989 --> 00:05:55.892
with these configurations,
I'm gonna deploy for them.

93
00:05:55.892 --> 00:06:00.793
And that is all existing in
CloudFormation as our source of

94
00:06:00.793 --> 00:06:03.301
truth when we use CDK, okay?

95
00:06:03.301 --> 00:06:06.624
And yeah, we'll go into detail of
infrastructure's code if this is kind

96
00:06:06.624 --> 00:06:09.156
of your first time hearing it,
like hearing that term.

97
00:06:09.156 --> 00:06:13.818
But yeah, essentially it allows us to spin
up light or heavy-duty infrastructure

98
00:06:13.818 --> 00:06:17.690
services to the cloud without
actually interacting with the AWS UI.

99
00:06:17.690 --> 00:06:20.217
And here, what is Infrastructure as code?

100
00:06:20.217 --> 00:06:24.278
So it's a key concept in DevOps and
in cloud computing practices,

101
00:06:24.278 --> 00:06:29.211
like I just mentioned, it automates any
sort of management of infrastructure,

102
00:06:29.211 --> 00:06:31.550
so it replaces any manual processes.

103
00:06:31.550 --> 00:06:37.100
And this is one really example that I kind
of like, and let's say you, three months

104
00:06:37.100 --> 00:06:42.671
ago, deployed some infrastructure,
let's use the redshift clusters example.

105
00:06:42.671 --> 00:06:45.513
You deploy it and you deploy it on the UI.

106
00:06:45.513 --> 00:06:48.077
So you configured it,
you had to play around with this cat and

107
00:06:48.077 --> 00:06:50.339
mouse game like okay did I
provision it to expensive,

108
00:06:50.339 --> 00:06:52.726
is my boss gonna yell at me
because it's too expensive?

109
00:06:52.726 --> 00:06:54.320
Does it do the right thing, can it scale?

110
00:06:54.320 --> 00:06:58.255
But let's say at the end of that process,
you have this configuration for

111
00:06:58.255 --> 00:07:01.123
this cluster that does exactly
what you need it to do.

112
00:07:01.123 --> 00:07:04.258
But in three months down the line,
six months down the line,

113
00:07:04.258 --> 00:07:05.684
you get this new engineer.

114
00:07:05.684 --> 00:07:10.101
He's like, hey, Melkey,
I need to make the exact same cluster for

115
00:07:10.101 --> 00:07:14.460
our team, what did you do,
where's the config set, can I see it?

116
00:07:14.460 --> 00:07:18.341
And of course, the user can go in the UI,
they can see the settings, but

117
00:07:18.341 --> 00:07:21.868
that's pretty cumbersome,
that could probably have a lot of.

118
00:07:21.868 --> 00:07:25.393
If they copy something incorrectly,
they may skip something, right?

119
00:07:25.393 --> 00:07:29.106
It's, it's not the best system and
it's prone to errors.

120
00:07:29.106 --> 00:07:32.671
But what's not prone to errors and
what's something you can just like

121
00:07:32.671 --> 00:07:36.721
safely reference is like the code that
you use that's now been battle tested and

122
00:07:36.721 --> 00:07:39.636
this is where infrastructure's
code comes into place.

123
00:07:39.636 --> 00:07:42.706
You basically define all
the infrastructure you need,

124
00:07:42.706 --> 00:07:46.564
all the configurations you need,
any sort of properties using code.

125
00:07:46.564 --> 00:07:50.177
This is just like writing a function,
all the functions we wrote,

126
00:07:50.177 --> 00:07:53.675
changing the name name of a property,
you can have that for CDK.

127
00:07:53.675 --> 00:07:58.003
And it's defining code
using declarative files and

128
00:07:58.003 --> 00:08:03.028
allows infrastructure to be versioned,
shared or reused.

129
00:08:03.028 --> 00:08:07.740
So CDK is kind of this breaker of
like a DR, like driver principle.

130
00:08:07.740 --> 00:08:11.808
You can define one construct, one piece of
infrastructure, and you can reuse that if

131
00:08:11.808 --> 00:08:15.162
you make into a function into other
piece of our application, right?

132
00:08:15.162 --> 00:08:17.251
So as long as you have
this one definition, and

133
00:08:17.251 --> 00:08:21.000
you are able to make that into a function,
you can just keep calling that function,

134
00:08:21.000 --> 00:08:24.076
or you can just copy and paste it and
define it right into your stack.

135
00:08:24.076 --> 00:08:28.733
So again,
it's however you want to write your code.

136
00:08:28.733 --> 00:08:30.449
But why does this actually matter?

137
00:08:30.449 --> 00:08:34.233
And it's because when you run
applications in different environments,

138
00:08:34.233 --> 00:08:36.613
like development, testing and production,

139
00:08:36.613 --> 00:08:39.369
these are very drastic things
to deploy your code on.

140
00:08:39.369 --> 00:08:43.879
Your testing sandbox shouldn't
be the most up-to-date

141
00:08:43.879 --> 00:08:47.108
version of the production environment.

142
00:08:47.108 --> 00:08:51.413
Your testing sandbox should be able
to handle specific testing scenarios,

143
00:08:51.413 --> 00:08:53.640
specific maybe burst of load testing.

144
00:08:53.640 --> 00:08:56.968
But to have the provision as if it
is your full production environment,

145
00:08:56.968 --> 00:08:59.747
maybe that's costly,
maybe that's just not efficient.

146
00:08:59.747 --> 00:09:04.076
So that's why we want to be able
to separate these environments and

147
00:09:04.076 --> 00:09:07.321
separate them using code,
and when we deploy it,

148
00:09:07.321 --> 00:09:12.685
we'll have more security of how and what
is deployed in terms of infrastructure.

149
00:09:12.685 --> 00:09:17.788
And it's used a lot in cloud environments,
so again, CDK's native to AWS,

150
00:09:17.788 --> 00:09:22.277
but there's a native version for
GCP, a native version for Azure.

151
00:09:22.277 --> 00:09:26.122
I don't know them I actually being
truthful, I haven't used them,

152
00:09:26.122 --> 00:09:27.064
I just know CDK.

153
00:09:27.064 --> 00:09:30.701
And you can also define your
infrastructure using TerraForm,

154
00:09:30.701 --> 00:09:33.795
has anyone like used Terraform
to deploy infra here?

155
00:09:33.795 --> 00:09:38.232
Yeah, so you can use Terraform as well,
it's just kinda a different flavor CDK,

156
00:09:38.232 --> 00:09:42.347
like I said before it's the way I like
to break it down as like it's deploying

157
00:09:42.347 --> 00:09:44.429
infrastructure in a functional way.

158
00:09:44.429 --> 00:09:49.764
Writing functions that get deployed.

159
00:09:49.764 --> 00:09:51.613
And then why AWS and CDK?

160
00:09:51.613 --> 00:09:55.064
So like I said,
the biggest market share has AWS, so

161
00:09:55.064 --> 00:09:57.973
I think it's gonna be really good for
jobs.

162
00:09:57.973 --> 00:10:02.876
I think if you apply with more knowledge
of AWS, I think it makes you more

163
00:10:02.876 --> 00:10:06.900
of a hot commodity, if you will,
on an engineering team.

164
00:10:06.900 --> 00:10:10.668
And the next point is it's,
it's mainstream in a sense that a lot

165
00:10:10.668 --> 00:10:13.969
of popular companies like
Versal use AWS under the hood.

166
00:10:13.969 --> 00:10:18.196
So lots of these companies are coming up,
use a lot of the AWS services or

167
00:10:18.196 --> 00:10:21.238
infrastructure to make them successful,
right?

168
00:10:21.238 --> 00:10:24.479
Cuz they recognize what
they can do with AWS, and

169
00:10:24.479 --> 00:10:30.111
also another interesting example like
barcode scanning or any kinda application.

170
00:10:30.111 --> 00:10:32.707
You go to a restaurant and
you scan the QR code for a menu,

171
00:10:32.707 --> 00:10:34.817
that's probably using AWS as well, right?

172
00:10:34.817 --> 00:10:38.200
You can actually see
when it renders the page,

173
00:10:38.200 --> 00:10:42.987
there's like an S3 address, and
that's obviously using AWS.

174
00:10:42.987 --> 00:10:46.050
And AWS has many different services,
CDK allows us to communicate with

175
00:10:46.050 --> 00:10:49.021
their services, allows us to
configure them, use them how we want.

176
00:10:49.021 --> 00:10:53.119
And then the practical example,
maybe more specific to this course,

177
00:10:53.119 --> 00:10:58.126
is we can combine CDK with Go to create
practical real-world applications, right?

178
00:10:58.126 --> 00:11:03.217
So we're gonna write everything in Go and
we can deploy the infrastructure that can,

179
00:11:03.217 --> 00:11:08.111
how is that code or what database you're
going to interact with using Go with CDK.

180
00:11:08.111 --> 00:11:10.346
But everyone get a chance to
set up their environments.

181
00:11:10.346 --> 00:11:15.704
So you have like your AWS account,
you have a method to communicate with your

182
00:11:15.704 --> 00:11:21.079
AWS account from the CLI, CDK all
configured, everyone kind of thumbs up.

183
00:11:21.079 --> 00:11:22.845
Yeah, cool.

184
00:11:22.845 --> 00:11:26.326
And there's different ways to act like for
setting up your permissions.

185
00:11:26.326 --> 00:11:33.932
Sorry setting up your permissions in
AWS I have a resource up here let's see.

186
00:11:33.932 --> 00:11:36.093
Yeah, what is this?

187
00:11:36.093 --> 00:11:37.001
Okay, this is the CK1.

188
00:11:37.001 --> 00:11:39.503
So setting up the AWS CLI.

189
00:11:39.503 --> 00:11:44.047
There's a bunch of different methods for
setting up your credential information,

190
00:11:44.047 --> 00:11:47.449
you can do short-term access,
you can do long-term access.

191
00:11:47.449 --> 00:11:51.185
It's not recommended to use
long-term credentials with IM.

192
00:11:51.185 --> 00:11:54.726
I personally think for this kind of
environment, this toyish example,

193
00:11:54.726 --> 00:11:57.919
this non-production example,
I think is a better way to say it,

194
00:11:57.919 --> 00:11:59.793
you can use long-term credentials.

195
00:11:59.793 --> 00:12:02.858
It will be fine,
obviously don't share them and

196
00:12:02.858 --> 00:12:07.809
if you've never set anything any of these
app, you can actually set up to AWS.

197
00:12:07.809 --> 00:12:12.850
Here and their is a service called IAM,
and it's kind of funny joke where,

198
00:12:12.850 --> 00:12:15.985
if you wanna learn AWS,
all you need to do IAM.

199
00:12:15.985 --> 00:12:20.721
But yeah here I have two users here, and
we need to spend up some of this app you

200
00:12:20.721 --> 00:12:25.213
can give them different permissions,
like root permission, or be granular.

201
00:12:25.213 --> 00:12:31.093
Can this user interact with Redshift,
or MWA, or all these other services,

202
00:12:31.093 --> 00:12:36.078
you have this granular control of
the permission level with IAM.

203
00:12:36.078 --> 00:12:42.029
And then you basically spat out also these
kind of access keys here on the right.

204
00:12:42.029 --> 00:12:43.363
There's an access key and

205
00:12:43.363 --> 00:12:46.704
a secret access key,
don't share your secret access key at all.

206
00:12:46.704 --> 00:12:50.400
I'm pretty sure it's like once you
spin it up, you only have one time

207
00:12:50.400 --> 00:12:53.792
to copy that the JSON or save it as CSV,
so you only get one time.

208
00:12:53.792 --> 00:12:57.004
So you copy those into
your .aws credentials and

209
00:12:57.004 --> 00:12:59.990
that will set you up to
communicate with AWS.

210
00:12:59.990 --> 00:13:04.216
And then last there is obviously,
you can check this with AWS S3 LS, so

211
00:13:04.216 --> 00:13:07.253
if you run that command on
your terminal right now.

212
00:13:07.253 --> 00:13:10.685
If you have your list of buckets,
it'll show them,

213
00:13:10.685 --> 00:13:15.600
if there's a permission issue,
it'll pop it up, so try doing AWS S3 LS.

214
00:13:15.600 --> 00:13:18.503
And then there's the last command,
the get caller identity,

215
00:13:18.503 --> 00:13:20.268
this will show you who's calling it.

216
00:13:20.268 --> 00:13:23.947
So what account did you set up,
is it the right account,

217
00:13:23.947 --> 00:13:26.390
what permissions that account has?

218
00:13:26.390 --> 00:13:28.117
Cool, and the last part is installing CDK.

219
00:13:28.117 --> 00:13:30.618
So it's like an NPM install,
you can follow that link.

220
00:13:30.618 --> 00:13:34.745
I think I again have it open right here,
getting sort of AWS CDK, so

221
00:13:34.745 --> 00:13:39.040
I think there's a bunch of different
things that you can solve here.

222
00:13:39.040 --> 00:13:42.698
Yes, NPMG install type script, so
there's different ways that you can,

223
00:13:42.698 --> 00:13:45.153
Install your CDK code and
get it all provisioned.

