WEBVTT

1
00:00:00.330 --> 00:00:02.552
All right, moving along,

2
00:00:02.552 --> 00:00:07.677
I want to now just quickly create
our last package middleware.

3
00:00:09.278 --> 00:00:13.781
Middleware, and in here I'm gonna
make a middleware.go, okay?

4
00:00:13.781 --> 00:00:18.093
And this is gonna be a package middleware,
and it's gonna take a few things.

5
00:00:18.093 --> 00:00:24.160
So this package middleware is
gonna be basically responsible for

6
00:00:24.160 --> 00:00:27.689
A, extracting the request headers,

7
00:00:27.689 --> 00:00:32.779
extracting our claims, and
then lastly validating.

8
00:00:36.415 --> 00:00:37.120
Okay?

9
00:00:37.120 --> 00:00:41.364
So I'm gonna go kinda fast,
cuz it's a pretty long and nasty function,

10
00:00:41.364 --> 00:00:45.540
because it's basically going to be
on top of our existing routers, and

11
00:00:45.540 --> 00:00:48.824
we're basically chaining
what function to call next.

12
00:00:48.824 --> 00:00:53.362
So basically our method signature here is
gonna pass in the next function to call on

13
00:00:53.362 --> 00:00:57.527
the method chain, but we have to define
the arguments and the return type.

14
00:00:57.527 --> 00:01:00.012
So that's where it can get kinda messy.

15
00:01:00.012 --> 00:01:04.712
So I'm gonna do func
validate JWT middleware.

16
00:01:04.712 --> 00:01:07.235
I'm gonna do next func, okay?

17
00:01:07.235 --> 00:01:12.622
Next func is gonna basically
take in the request,

18
00:01:12.622 --> 00:01:18.278
which is event.APIGatewayProxyRequest,
okay?

19
00:01:21.346 --> 00:01:29.926
It's then gonna respond with
events.APIGatewayProxyResponse and

20
00:01:29.926 --> 00:01:34.725
an error, Okay?

21
00:01:36.986 --> 00:01:43.132
And the return for
the first function call, okay?

22
00:01:43.132 --> 00:01:44.193
They're still gonna be the exact same.

23
00:01:44.193 --> 00:01:52.474
So we're gonna basically duplicate
this events.APIGatewayProxyRequest.

24
00:01:52.474 --> 00:02:00.787
Go here
the events.APIGatewayProxyResponse and

25
00:02:00.787 --> 00:02:03.303
error, okay?

26
00:02:03.303 --> 00:02:06.692
And I'm gonna open up the function call.

27
00:02:06.692 --> 00:02:08.242
Let me see that put in the error here.

28
00:02:08.242 --> 00:02:10.195
Yeah.
And the first thing that you wanna do is

29
00:02:10.195 --> 00:02:13.602
actually return that first function
in a method change to return func.

30
00:02:13.602 --> 00:02:15.332
It's gonna take in the exact same thing.

31
00:02:15.332 --> 00:02:24.187
So last time, request
events.APIGatewayProxyRequest, okay?

32
00:02:24.187 --> 00:02:29.006
Here events.API,

33
00:02:31.470 --> 00:02:38.740
GatewayProxyReques and error, okay?

34
00:02:41.398 --> 00:02:42.440
Let's go over here.

35
00:02:44.055 --> 00:02:44.638
Cool.

36
00:02:44.638 --> 00:02:49.220
And now we can start working on
this middleware validation logic.

37
00:02:49.220 --> 00:02:51.956
So the first thing we wanna
do is extract the token.

38
00:02:51.956 --> 00:02:56.068
We can do this in line, but I'm gonna
make a quick little helper function,

39
00:02:56.068 --> 00:03:00.006
it's gonna parse request headers,
and it's gonna split the string.

40
00:03:00.006 --> 00:03:01.166
That's all it's going to do.

41
00:03:01.166 --> 00:03:05.269
So I'm gonna do extract the headers, and

42
00:03:05.269 --> 00:03:12.079
then let's make another function
func extractTokenFromHeaders.

43
00:03:12.079 --> 00:03:14.895
And this is gonna be,
I'm gonna say headers,

44
00:03:14.895 --> 00:03:19.891
it's gonna be a map string to string, and
this is going to return a string as well.

45
00:03:19.891 --> 00:03:24.384
And all it's going to do is
gonna take our headers and

46
00:03:24.384 --> 00:03:28.277
see, does it have an authorization header.

47
00:03:28.277 --> 00:03:33.101
And we'll know it will because
our proxy is set up that way,

48
00:03:33.101 --> 00:03:37.744
but just to be extra safe,
we'll do authheader, okay?

49
00:03:37.744 --> 00:03:41.588
It's going to be the headers,
and we're gonna see,

50
00:03:41.588 --> 00:03:44.246
does it have authorization, okay?

51
00:03:44.246 --> 00:03:49.509
And if not okay, meaning if this
does not exist on this map,

52
00:03:49.509 --> 00:03:52.683
we're gonna return empty string.

53
00:03:55.846 --> 00:03:56.586
Okay?

54
00:03:56.586 --> 00:03:59.773
Otherwise we know we're accepting and
getting this header.

55
00:03:59.773 --> 00:04:02.477
So now we can do split token,

56
00:04:02.477 --> 00:04:08.001
let's see split token is going
to be strings.split, and

57
00:04:08.001 --> 00:04:13.652
we're gonna be splitting our
authheader on there, okay?

58
00:04:13.652 --> 00:04:17.826
So if you're gonna send
a authorization token, or a JWT,

59
00:04:17.826 --> 00:04:23.451
the typical process you have an
authheader, that's called authorization,

60
00:04:23.451 --> 00:04:27.389
and the values to be bearer space and
the actual token.

61
00:04:27.389 --> 00:04:31.971
So this split is going to allow us
to extract the actual token string,

62
00:04:31.971 --> 00:04:36.003
the hash token representation
of our JSON Web Token, okay?

63
00:04:36.003 --> 00:04:41.689
Again, I'm gonna say if the length of
split token does not equal to two,

64
00:04:41.689 --> 00:04:45.059
it should just be the bearer and
the token.

65
00:04:45.059 --> 00:04:47.346
We're gonna return an empty string,

66
00:04:47.346 --> 00:04:51.144
and in here we're gonna return
split token at the first index.

67
00:04:57.971 --> 00:04:58.823
Okay?

68
00:04:58.823 --> 00:05:03.344
So then here we can do is actually
call this extract token function.

69
00:05:03.344 --> 00:05:07.030
So we can call it tokenString.

70
00:05:07.030 --> 00:05:10.932
It's gonna be extract token from headers,
and

71
00:05:10.932 --> 00:05:15.038
the value we put here is
gonna request.headers.

72
00:05:18.106 --> 00:05:18.685
All right?

73
00:05:18.685 --> 00:05:21.186
And we don't have an explicit error, but

74
00:05:21.186 --> 00:05:24.864
what we can do is if token
string equals an empty string.

75
00:05:24.864 --> 00:05:31.084
What we're gonna return is return
events.APIGatewayProxyResponse, our body

76
00:05:31.084 --> 00:05:37.584
is gonna say missing authtoken cuz that's
what we've basically short circuiting.

77
00:05:37.584 --> 00:05:42.653
If we see a non authorized header,
we're just gonna return an empty string.

78
00:05:42.653 --> 00:05:45.323
So we're gonna say missing our authtoken.

79
00:05:45.323 --> 00:05:52.769
I'm gonna do a status code,
HTTP unauthorized, okay?

80
00:05:52.769 --> 00:05:55.804
And then for the error,
we could just return no.

81
00:05:55.804 --> 00:06:00.349
So here we've extracted the token,
next, we need to actually parse it.

82
00:06:00.349 --> 00:06:05.387
We need to parse our token for its claims.

83
00:06:05.387 --> 00:06:09.967
And there's a lot of
ways to go about this.

84
00:06:09.967 --> 00:06:14.353
The article that we will attach as
a resource kind of goes into a very simple

85
00:06:14.353 --> 00:06:18.833
approach, but you can basically
validate on, is the algorithm correct?

86
00:06:18.833 --> 00:06:23.585
Doesn't have the expected payload?

87
00:06:23.585 --> 00:06:26.985
There's a bunch of different things that
you can validate your your token on.

88
00:06:26.985 --> 00:06:29.052
I'm gonna keep it fairly simple.

89
00:06:29.052 --> 00:06:33.932
So we're gonna create a function called
func parse token is going to take

90
00:06:33.932 --> 00:06:38.732
in a token string of type string,
and it's going to return two things.

91
00:06:38.732 --> 00:06:41.735
One, the JWT .MAP claim.

92
00:06:41.735 --> 00:06:45.975
So this is the same JWT package
we use to create our token.

93
00:06:45.975 --> 00:06:49.925
Remember when we also hashed our
passwords, we had the same logic to hash

94
00:06:49.925 --> 00:06:52.965
the passwords and
the same package to unhash it.

95
00:06:52.965 --> 00:06:54.685
Same concept here, right?

96
00:06:54.685 --> 00:06:56.365
And it's gonna return an error.

97
00:06:56.365 --> 00:07:01.627
And the error here is for the purpose on,
if our token is not properly claimed,

98
00:07:01.627 --> 00:07:05.771
if it doesn't come from us,
if it has a different algorithm,

99
00:07:05.771 --> 00:07:10.875
then we want to return an error and
handle that error upstream saying, hey,

100
00:07:10.875 --> 00:07:15.936
you're unauthorized to be calling this or
calling this protected route.

101
00:07:15.936 --> 00:07:17.714
So that's the point of the error here.

102
00:07:22.078 --> 00:07:23.167
Question.

103
00:07:23.167 --> 00:07:23.784
Cool.

104
00:07:23.784 --> 00:07:27.305
Okay, so next up, we're actually
gonna start using our token.

105
00:07:27.305 --> 00:07:32.892
Actually, we're gonna create
a callback function to the built

106
00:07:32.892 --> 00:07:38.588
in JWT parse function that this
library has a jwt.Parse, okay?

107
00:07:38.588 --> 00:07:41.677
I mean,
we're gonna do our token string, okay?

108
00:07:41.677 --> 00:07:44.327
I'm gonna do a callback, and

109
00:07:44.327 --> 00:07:49.848
it's gonna take token which
is type JWT.token, all right?

110
00:07:49.848 --> 00:07:52.421
It's gonna return a naked interface.

111
00:07:52.421 --> 00:07:53.685
So could be whatever.

112
00:07:53.685 --> 00:07:58.933
And the reason why this is the way it,
is because when you make your claims and

113
00:07:58.933 --> 00:08:03.898
you create that payload again,
this has no idea what that payload is.

114
00:08:03.898 --> 00:08:07.108
It could be 19 things,
it could be like two things.

115
00:08:07.108 --> 00:08:11.635
So this naked interface allows us to
return almost this any type, if you will,

116
00:08:11.635 --> 00:08:12.328
all right?

117
00:08:14.078 --> 00:08:18.598
And so what this callback function is
going to do, is we're gonna call the parse

118
00:08:18.598 --> 00:08:21.985
function, but
also remember that secret that we created.

119
00:08:23.026 --> 00:08:25.266
So this secret we're
gonna append right here.

120
00:08:25.266 --> 00:08:26.826
It's gonna be secret.

121
00:08:26.826 --> 00:08:31.698
I'm gonna actually double check
that in my types that go it's just

122
00:08:31.698 --> 00:08:34.576
secret get good, cuz it has too match.

123
00:08:34.576 --> 00:08:38.554
If it doesn't,
you're gonna be in trouble or

124
00:08:38.554 --> 00:08:43.046
actually return this place
of bite from the secret.

125
00:08:46.322 --> 00:08:49.886
So what this jwt.Parse function is going
to do is we're setting this callback

126
00:08:49.886 --> 00:08:51.074
function to jwt.Parse.

127
00:08:51.074 --> 00:08:55.416
And we're saying, hey, it does
a bunch of things under the hood, but

128
00:08:55.416 --> 00:08:59.905
one of the things it does and one of
the things we kind of just craft in these

129
00:08:59.905 --> 00:09:04.469
two lines is we're sending back the Byte
representation of our secret and

130
00:09:04.469 --> 00:09:08.149
JWT parts is then going to investigate and
say, hey, yes,

131
00:09:08.149 --> 00:09:12.661
this is like the right signing method for
the token that I'm receiving.

132
00:09:15.334 --> 00:09:16.353
Cool.

133
00:09:16.353 --> 00:09:18.044
Anyone have any questions?

134
00:09:20.916 --> 00:09:22.402
Cool.
All right.

135
00:09:22.402 --> 00:09:25.510
Yeah, next up,
we have to do our lovely error handling.

136
00:09:25.510 --> 00:09:30.890
If our error does not equal to nil,
we can return token as is,

137
00:09:30.890 --> 00:09:36.392
or we can return h, the empty string or
we can even return nil.

138
00:09:36.392 --> 00:09:43.092
We can do a format error f, and
we can say just unauthorized.

139
00:09:43.092 --> 00:09:45.369
I am probably gonna have a typo and
unauthorized in one of these.

140
00:09:45.369 --> 00:09:47.940
So, if you see it,
it's all right just ignore it.

141
00:09:47.940 --> 00:09:49.180
It's not there.

142
00:09:49.180 --> 00:09:53.867
Then we can say if our token is not valid,
this innate property that the JWT

143
00:09:53.867 --> 00:09:58.870
package gives us, in that callback
function right above relative line 10.

144
00:09:58.870 --> 00:10:04.913
It will append the property of being
valid or not into the token struck, okay?

145
00:10:04.913 --> 00:10:08.605
Or into the token returned from JWT parse.

146
00:10:08.605 --> 00:10:12.490
So we're saying if it's not valid,
what I'm gonna do is return nil?

147
00:10:12.490 --> 00:10:17.141
I'm gonna do format error f
token is not valid, right?

148
00:10:17.141 --> 00:10:20.755
Token is not valid,

149
00:10:20.755 --> 00:10:25.014
unauthorized, okay?

150
00:10:25.014 --> 00:10:25.888
We can do one more.

151
00:10:25.888 --> 00:10:29.834
So the whole purpose of this function
is to return our claims, and

152
00:10:29.834 --> 00:10:34.065
we have yet to really touch on those
claims at all, but they do exist and

153
00:10:34.065 --> 00:10:36.615
they exist in the to claims field.

154
00:10:36.615 --> 00:10:38.954
So what we can do is claims, okay,

155
00:10:38.954 --> 00:10:43.408
I'm gonna check if they're even
there by doing Token.claims.

156
00:10:43.408 --> 00:10:45.514
There's that property, and

157
00:10:45.514 --> 00:10:50.586
I want to make sure that these
claims are of type JWT map claims.

158
00:10:50.586 --> 00:10:53.215
So when we created back in types.go,

159
00:10:53.215 --> 00:10:58.811
we created our claims with this struct
definition here, with this struct type.

160
00:10:58.811 --> 00:11:03.299
And so we wanna make sure because
this evil doers are crafty,

161
00:11:03.299 --> 00:11:09.288
that the claims that's actually in this
token match the JWT claims type, okay?

162
00:11:09.288 --> 00:11:15.613
I'm gonna say if not OK,
we're gonna type in,

163
00:11:15.613 --> 00:11:23.061
we can just return nil and
say fmt.error f claims of on.

164
00:11:25.653 --> 00:11:26.432
Something like that.

165
00:11:26.432 --> 00:11:30.670
Otherwise, let's just
return our claims and nil.

166
00:11:35.376 --> 00:11:35.940
Okay?

167
00:11:35.940 --> 00:11:40.537
So these are two functions that we
really need in our definition here.

168
00:11:40.537 --> 00:11:42.677
Cuz now we're just gonna roll the punches.

169
00:11:42.677 --> 00:11:44.417
We basically have everything we need.

170
00:11:44.417 --> 00:11:47.714
Because we have the token string from
the previous function we just defined,

171
00:11:47.714 --> 00:11:49.907
we're not gonna put that
in to our parse function.

172
00:11:49.907 --> 00:11:54.205
We're gonna get our claims,
we're gonna validate the claims on

173
00:11:54.205 --> 00:11:58.972
the expires field and if everything
passes, then we know we can show this

174
00:11:58.972 --> 00:12:02.664
route to the user calling it or
to the client calling it.

175
00:12:02.664 --> 00:12:03.165
Let's go with it.

176
00:12:03.165 --> 00:12:07.199
Claims error is going
to be a part of token.

177
00:12:07.199 --> 00:12:12.135
We're gonna pass in our token string
if error does not equal to nil,

178
00:12:12.135 --> 00:12:15.299
return events are API proxy response.

179
00:12:15.299 --> 00:12:20.765
The body is gonna be pretty simple, pretty
straight forward, you're unauthorized.

180
00:12:20.765 --> 00:12:23.622
So user unauthorized, okay?

181
00:12:23.622 --> 00:12:30.356
And a status code is gonna be,
HTTP unauthorized, okay?

182
00:12:30.356 --> 00:12:35.530
And we can return our error,
we can surface our error up, I should say.

183
00:12:35.530 --> 00:12:39.226
But if we have our claims, this is where
we can actually extract one particular

184
00:12:39.226 --> 00:12:43.497
field that we're really interested in
our case, which is the expires field.

185
00:12:43.497 --> 00:12:50.467
So we can do expires is claims expires,
right?

186
00:12:50.467 --> 00:12:55.699
But what we wanna do is when we
put in expires over in types.go,

187
00:12:55.699 --> 00:12:58.877
we put it as a Unix timestamp, right?

188
00:12:58.877 --> 00:13:03.591
We've converted it as Valid, so time.now
we've added one hour of convert to Unix.

189
00:13:03.591 --> 00:13:08.454
So what we need to do is here, I wanna
make sure that's the right type and

190
00:13:08.454 --> 00:13:13.201
then convert it, because we're
gonna compare it to the time.now.

191
00:13:13.201 --> 00:13:17.777
So basically, I'm gonna leave this
error here, but what I wanna do is,

192
00:13:17.777 --> 00:13:21.020
if expires,
is greater than time dot now, right?

193
00:13:21.020 --> 00:13:24.736
Then what I wanna do is
say this is invalid,

194
00:13:24.736 --> 00:13:29.902
this is just the kinda pseudocode but
here what we're gonna

195
00:13:29.902 --> 00:13:35.168
do is expires is claims I'm gonna
do map that to float 64 and

196
00:13:35.168 --> 00:13:39.712
then around here I'm gonna
make this into int 64,

197
00:13:39.712 --> 00:13:46.355
cuz that's the proper time to compare
from the native time.now function.

198
00:13:46.355 --> 00:13:47.225
Okay, we got an error.

199
00:13:47.225 --> 00:13:49.305
What's going on?

200
00:13:49.305 --> 00:13:50.817
Let's see.

201
00:13:50.817 --> 00:13:53.247
Where'd he go?

202
00:13:55.451 --> 00:13:57.480
Okay, weird.

203
00:13:57.480 --> 00:14:03.997
Okay, now we're seeing if time.now.unix,
okay?

204
00:14:03.997 --> 00:14:07.287
Is greater than expires, okay?

205
00:14:07.287 --> 00:14:09.797
Meaning this token has expired.

206
00:14:09.797 --> 00:14:13.527
It's no longer good to return our events,

207
00:14:13.527 --> 00:14:19.234
API Gateway Proxy Response,
the body is gonna be token expired.

208
00:14:19.234 --> 00:14:21.543
Status code.

209
00:14:21.543 --> 00:14:26.515
There's probably one for expired tokens,
I'm gonna keep it as unauthorized and

210
00:14:26.515 --> 00:14:31.355
then we're gonna return nil, cuz it's
kind of a controlled response, okay?

211
00:14:31.355 --> 00:14:36.698
Otherwise return next, Request.

