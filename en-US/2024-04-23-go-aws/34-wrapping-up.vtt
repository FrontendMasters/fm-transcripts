WEBVTT

1
00:00:00.370 --> 00:00:05.928
Every introduction to programming language
should start from the source of truth,

2
00:00:05.928 --> 00:00:08.130
kind of from the horse's mouth.

3
00:00:08.130 --> 00:00:09.110
And that's from go.dev.

4
00:00:09.110 --> 00:00:12.200
That's the official website for
Go development.

5
00:00:12.200 --> 00:00:15.991
They have this tour of
Go that you can use.

6
00:00:15.991 --> 00:00:20.189
I think it's like a 14 module experience.

7
00:00:20.189 --> 00:00:25.203
It goes around in the hello world to drive
into concept like strux, interfaces,

8
00:00:25.203 --> 00:00:29.494
concurrency, looping, deferring,
maps, pointers, all that.

9
00:00:29.494 --> 00:00:32.634
I think it's a really good source.

10
00:00:32.634 --> 00:00:34.088
And it comes from the developers.

11
00:00:34.088 --> 00:00:37.846
Arguably, it really can't get
that much better in terms

12
00:00:37.846 --> 00:00:41.620
of like the raw knowledge and
how was intended to be used.

13
00:00:41.620 --> 00:00:45.292
And then, if you've done that, there's
another good resource called gobyexample.

14
00:00:45.292 --> 00:00:50.098
And I really like gobyexample, because if
you pull it up, if you guys can pull it up

15
00:00:50.098 --> 00:00:53.383
in your website,
it literally is like a flat HTML file.

16
00:00:53.383 --> 00:00:58.762
There's like no CSS, it just renders
an ordered list of these modules.

17
00:00:58.762 --> 00:01:02.833
And if you click them, it's just
another HTML Script, two columns.

18
00:01:02.833 --> 00:01:06.418
One is just text and the other one
is like a static image of code.

19
00:01:06.418 --> 00:01:08.618
And, that's all you really need.

20
00:01:08.618 --> 00:01:11.303
I don't want fancy animations.

21
00:01:11.303 --> 00:01:15.212
I don't want like sparkles,
if I just wanna learn something,

22
00:01:15.212 --> 00:01:18.695
let's just give me the dirty,
just go into write html.

23
00:01:18.695 --> 00:01:19.623
Let me read it.

24
00:01:19.623 --> 00:01:23.734
And it breaks it down into
a very digestible way.

25
00:01:23.734 --> 00:01:26.011
The snippet of text isn't too long.

26
00:01:26.011 --> 00:01:27.934
You're not gonna spend an hour reading it.

27
00:01:27.934 --> 00:01:31.960
It kind of breaks down exactly
the component that it maps to in the image

28
00:01:31.960 --> 00:01:32.514
of code.

29
00:01:32.514 --> 00:01:35.778
And the reason why it's a little
different than Tour of Go,

30
00:01:35.778 --> 00:01:38.206
it's because there's a lot more modules.

31
00:01:38.206 --> 00:01:42.684
It goes into a bit more granularity
into very specific concepts.

32
00:01:42.684 --> 00:01:47.291
So I definitely think these two
are a great way to truly start

33
00:01:47.291 --> 00:01:51.261
understanding Go if you're
a complete beginner.

34
00:01:51.261 --> 00:01:53.084
And then there's that last resource.

35
00:01:53.084 --> 00:01:59.687
And to me, this is arguably the best
resource when it comes to Go.

36
00:01:59.687 --> 00:02:01.674
I don't be careful how I say that, but

37
00:02:01.674 --> 00:02:04.170
I think I want to put my
name in the line for that.

38
00:02:04.170 --> 00:02:05.573
It's called Effective Go.

39
00:02:05.573 --> 00:02:08.763
It was developed by the official Go team.

40
00:02:08.763 --> 00:02:09.777
What is it?

41
00:02:09.777 --> 00:02:14.666
It's a blog post in 2009, that's all this.

42
00:02:14.666 --> 00:02:16.824
And they haven't updated it since.

43
00:02:16.824 --> 00:02:18.857
It's long.

44
00:02:18.857 --> 00:02:22.629
It's greasy, again, no CSS.

45
00:02:22.629 --> 00:02:30.945
But, what this blog post describes is very
different than the previous two examples.

46
00:02:30.945 --> 00:02:34.909
The previous two examples,
it's syntax, it's code examples,

47
00:02:34.909 --> 00:02:39.807
some explanation, effective Go doesn't
introduce any kind of hidden secrets.

48
00:02:39.807 --> 00:02:44.147
Okay, you did this, this is the hidden
secret of how you write good code.

49
00:02:44.147 --> 00:02:49.147
Effective Go describes how to
think like a Go developer.

50
00:02:50.597 --> 00:02:54.254
I wanna kind of let that waft
in the air a little bit,

51
00:02:54.254 --> 00:02:58.848
because thinking like a Go developer,
you will probably be able

52
00:02:58.848 --> 00:03:03.378
to use the tools that they intended,
more like a Go developer.

53
00:03:03.378 --> 00:03:07.968
Because like some of us,
Go wasn't my first programming language.

54
00:03:07.968 --> 00:03:08.788
I came from Python.

55
00:03:08.788 --> 00:03:13.149
And then I started writing Go
code like a Python developer.

56
00:03:13.149 --> 00:03:13.980
And it worked.

57
00:03:13.980 --> 00:03:15.678
It was fine.

58
00:03:15.678 --> 00:03:18.258
There was really no big problem with that.

59
00:03:18.258 --> 00:03:22.604
But if Effective Go is able to
really shift your focus and

60
00:03:22.604 --> 00:03:28.905
think more how the core engineering team
wanted you to think like a Go developer.

61
00:03:28.905 --> 00:03:29.920
So it's a really good resource.

62
00:03:29.920 --> 00:03:33.188
I always say if you're done the tours
of Go, the Hello World to Go, whatever,

63
00:03:33.188 --> 00:03:34.337
read this Effective of Go.

64
00:03:34.337 --> 00:03:40.067
It's a must to be honest for
any Go engineer.

65
00:03:40.067 --> 00:03:42.448
If you're a fan of textbooks,
I got some textbooks recommendation.

66
00:03:42.448 --> 00:03:45.624
There's a really good book called the Go
Programming Language by Jonathan Cohen

67
00:03:45.624 --> 00:03:46.988
again, it's a really nice book.

68
00:03:46.988 --> 00:03:51.568
I think, if you see that the cover you
will recognize it's just white and blue.

69
00:03:51.568 --> 00:03:53.158
It's a really good book.

70
00:03:53.158 --> 00:03:57.658
Again, I really like easily things
are easily consumable, easily digestible.

71
00:03:57.658 --> 00:04:01.418
I think this Go book does
a really good job of it.

72
00:04:01.418 --> 00:04:04.713
And then there's two
textbooks by Alex Edwards,

73
00:04:04.713 --> 00:04:08.378
who deserves an incredible
shot of her work.

74
00:04:08.378 --> 00:04:11.503
The two books are called Let's Go and
Let's Go Further.

75
00:04:11.503 --> 00:04:14.918
Has anyone heard of those textbooks here?

76
00:04:14.918 --> 00:04:16.215
Nice, okay.

77
00:04:16.215 --> 00:04:20.102
For those of you that didn't,
who haven't, that's a treat.

78
00:04:20.102 --> 00:04:23.415
These two textbooks have
shaped a lot of how

79
00:04:23.415 --> 00:04:27.472
Go is written from like
an HTTP server perspective.

80
00:04:29.232 --> 00:04:34.412
So Let's Go is this first intro to Go, you
build an application, it's really nice.

81
00:04:34.412 --> 00:04:37.024
I wouldn't say it's dense,
but it's just long.

82
00:04:37.024 --> 00:04:39.568
I think it's like five 500 plus pages, but

83
00:04:39.568 --> 00:04:43.498
it really goes through the entire
suite of how to build an application.

84
00:04:43.498 --> 00:04:47.578
I think you build a code bin or
something I may forgot in the first book.

85
00:04:47.578 --> 00:04:50.928
But I really,
really like Let's Go Further.

86
00:04:50.928 --> 00:04:54.657
And I've read
Let's Go Further three times,

87
00:04:54.657 --> 00:04:59.064
because it really taught me
how to write servers in Go.

88
00:04:59.064 --> 00:05:01.230
How to process handlers.

89
00:05:01.230 --> 00:05:03.023
How to decouple my functions.

90
00:05:03.023 --> 00:05:08.013
How to use these native data structures
go offers to write my application code.

91
00:05:08.013 --> 00:05:12.623
And again, it's like 500 pages, but
it does not feel like you're in 500 pages.

92
00:05:12.623 --> 00:05:17.004
You literally just go, go, go, go,
emphasis on all of those intended,

93
00:05:17.004 --> 00:05:17.722
all right?

94
00:05:17.722 --> 00:05:18.835
That's a really good book.

95
00:05:18.835 --> 00:05:22.753
I think it's only available on PDF, so
there's no actual physical textbook.

96
00:05:22.753 --> 00:05:24.710
Hopefully, that's not
too much of a turnoff.

97
00:05:24.710 --> 00:05:26.643
It's worth it, trust me.

98
00:05:26.643 --> 00:05:32.171
And in the last resource that I don't
really see too many individuals

99
00:05:32.171 --> 00:05:37.223
talk about, it's a conference talks,
Go conference talks,

100
00:05:37.223 --> 00:05:41.600
specifically ones made and
hosted by Rob Pike.

101
00:05:41.600 --> 00:05:43.464
Again, Rob Pike was one
of the core engineers.

102
00:05:43.464 --> 00:05:48.101
He was actually the tech lead, if memory
system correctly of Goaling back in 06,

103
00:05:48.101 --> 00:05:50.698
07, 08, and when they released in 09.

104
00:05:50.698 --> 00:05:56.120
And his conference talks are like
bar non some of the best resources.

105
00:05:56.120 --> 00:06:00.653
Even the ones from 2009 and earlier,
and you may be thinking like, what?

106
00:06:00.653 --> 00:06:04.139
It's almost been like 20 years,
15 years since those.

107
00:06:04.139 --> 00:06:07.095
How is it possible that
those are still valid?

108
00:06:07.095 --> 00:06:09.585
And it emphasized the point earlier.

109
00:06:09.585 --> 00:06:12.695
Go is boring, go move slow.

110
00:06:12.695 --> 00:06:16.655
The code that Rob and
his team wrote back then in those

111
00:06:16.655 --> 00:06:21.335
conference talks in 2008 and
in 2009 will look very,

112
00:06:21.335 --> 00:06:26.736
very similar to the code you will
write today in this day and age, okay?

113
00:06:26.736 --> 00:06:27.662
And that's by design.

114
00:06:27.662 --> 00:06:31.317
That's because of the simplicity
that Go was baked in with.

115
00:06:31.317 --> 00:06:35.300
So I definitely recommend looking at these
Rob Pike conference talks, he talks,

116
00:06:35.300 --> 00:06:38.955
some of them concurrency patterns,
advanced concurrency patterns.

117
00:06:38.955 --> 00:06:40.785
Concurrency is not parallelism.

118
00:06:40.785 --> 00:06:42.362
He always goes to gopher con,

119
00:06:42.362 --> 00:06:45.338
I think once or
twice here different areas in the world.

120
00:06:45.338 --> 00:06:50.936
There's a gopher con Australia, Amsterdam,
there's one state, so he's everywhere.

121
00:06:50.936 --> 00:06:52.565
So check them out there on YouTube.

122
00:06:52.565 --> 00:06:59.650
I highly recommend these resource,
just play it observe, take it in And then.

123
00:06:59.650 --> 00:07:03.850
Yeah, but the most important thing is,
build stuff.

124
00:07:03.850 --> 00:07:05.820
Bar none, bar absolute none.

125
00:07:05.820 --> 00:07:07.317
You got to build stuff, all right?

126
00:07:07.317 --> 00:07:11.910
If you're just consuming content, reading.

127
00:07:11.910 --> 00:07:15.930
The best analogy is like
a swimmer who never swam.

128
00:07:15.930 --> 00:07:19.693
You're watching videos on swimming,
you're reading how to do the Breaststroke,

129
00:07:19.693 --> 00:07:21.813
whatever, but
you've never gone to the pool,

130
00:07:21.813 --> 00:07:25.035
you can't really say you're
a good swimmer until you do that.

131
00:07:25.035 --> 00:07:27.165
So always just build stuff.

132
00:07:27.165 --> 00:07:30.255
A common thing I always get asked
is how do I know what to build?

133
00:07:30.255 --> 00:07:34.372
What if I don't have a project idea,
what do i do?

134
00:07:34.372 --> 00:07:36.765
Just build simple HTTP.

135
00:07:36.765 --> 00:07:39.867
So just build randomness,
nothingness, literally.

136
00:07:39.867 --> 00:07:42.121
Pull up an IDE, make your main.go,

137
00:07:42.121 --> 00:07:45.192
slap some basic routes
using a standard library.

138
00:07:45.192 --> 00:07:47.547
And if you have to do that
two days in a row, so be it.

139
00:07:47.547 --> 00:07:52.014
But just get that memory habit of
just writing code on your keyboard,

140
00:07:52.014 --> 00:07:55.106
writing Go, and
I think it goes a very long way.

141
00:07:55.106 --> 00:07:59.128
&gt;&gt; Is there an easy way to tear down
all of the infrastructure with the CDK?

142
00:07:59.128 --> 00:08:00.809
&gt;&gt; Yeah,
you can do it through the command line.

143
00:08:00.809 --> 00:08:04.192
There's a command, I think it's
called CDK Destroy, quite literally.

144
00:08:04.192 --> 00:08:06.742
I'll destroy all
the infrastructure you deployed.

145
00:08:06.742 --> 00:08:11.147
But all this will not actually
continue to run the bill.

146
00:08:11.147 --> 00:08:15.742
Lambda invocation won't be, if you're not
invoking, it's not gonna run up the bill.

147
00:08:15.742 --> 00:08:18.606
That would be populated, so yeah.

148
00:08:18.606 --> 00:08:20.856
Yeah, roasted turkey destroyed
to run the CDK that we read.

149
00:08:20.856 --> 00:08:23.434
Thank you for that, great great point.

150
00:08:23.434 --> 00:08:28.671
I mean with all that being said,
that's that's the end.

151
00:08:28.671 --> 00:08:30.606
That's it, thank you guys for watching.

152
00:08:30.606 --> 00:08:31.106
&gt;&gt; [APPLAUSE]

