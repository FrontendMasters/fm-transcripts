WEBVTT

1
00:00:00.000 --> 00:00:02.881
I'm gonna go ahead and
remove the delete, just for

2
00:00:02.881 --> 00:00:05.293
now, because now I wanna go over looping.

3
00:00:05.293 --> 00:00:08.951
And in Go, prior to Go 1.22,
there's almost two ways,

4
00:00:08.951 --> 00:00:11.822
there's still two ways to loop something,
but

5
00:00:11.822 --> 00:00:16.724
there's always this question like, which
way am I gonna use to run my loops now?

6
00:00:16.724 --> 00:00:20.727
The first way is more of the traditional
sense of a loop, so you can declare i:=0.

7
00:00:20.727 --> 00:00:25.875
Let's say the conditional is,
while i is less than the length

8
00:00:25.875 --> 00:00:30.336
of our animal slice, and
then we increment i, okay?

9
00:00:30.336 --> 00:00:34.150
And here we wanna just go over
all the elements in our slice.

10
00:00:34.150 --> 00:00:35.431
We can do fmt.Printf.

11
00:00:35.431 --> 00:00:40.319
I'm gonna say, this is my animal, cool.

12
00:00:41.547 --> 00:00:45.193
And then we do animals at the ith index,
all right?

13
00:00:45.193 --> 00:00:49.417
I'm gonna go ahead and
move this print line animals at the end.

14
00:00:49.417 --> 00:00:54.004
To run this, No one called me out again.

15
00:00:54.004 --> 00:00:56.840
We need like a counter,
every time I forget this break line.

16
00:00:56.840 --> 00:01:00.656
We can go again and you can see this is
my animal dog, this is my animal, cat,

17
00:01:00.656 --> 00:01:02.280
this is my animal moose, okay?

18
00:01:02.280 --> 00:01:06.010
So this is like a traditional sense, if
you come from like JavaScript or whatever,

19
00:01:06.010 --> 00:01:08.164
you probably recognize
the syntax to a degree.

20
00:01:08.164 --> 00:01:11.744
You can do the same thing with an end,
right?

21
00:01:11.744 --> 00:01:16.906
So for i:=0, let's say,
while i &lt; 10, or something,

22
00:01:16.906 --> 00:01:22.763
and we increment i, we'll go over
we could do format just print line,

23
00:01:22.763 --> 00:01:28.654
cuz we don't need to do any kind of
formatting or concatenation here.

24
00:01:28.654 --> 00:01:31.072
And we run it.
You can see here 0 to 9.

25
00:01:31.072 --> 00:01:33.123
Cool, simple, easy stuff.

26
00:01:33.123 --> 00:01:35.833
But then, what am I even talking about?

27
00:01:35.833 --> 00:01:39.625
What is this other way that somehow
was introduced recently in Go 1.22.

28
00:01:39.625 --> 00:01:41.537
And that's the built-in range function.

29
00:01:41.537 --> 00:01:45.715
So, I'm gonna go ahead and
delete these four loops, okay?

30
00:01:45.715 --> 00:01:50.427
And in Go, you could also iterate through
a slice using the built-in range key.

31
00:01:50.427 --> 00:01:55.372
So you can do for index,
value, range, animals,

32
00:01:55.372 --> 00:01:58.592
and you can just do fmt.Printf.

33
00:01:58.592 --> 00:02:06.684
This is my index, And this is my animal.

34
00:02:09.080 --> 00:02:10.108
All right, and

35
00:02:10.108 --> 00:02:15.504
then we should put the index value that we
get as a return value and end value here.

36
00:02:15.504 --> 00:02:21.269
And if you run this, caught it,
I was about to do it again.

37
00:02:21.269 --> 00:02:21.900
Here you go.

38
00:02:21.900 --> 00:02:25.801
If you run it, you can see here,
this is my index 0, 1, 2.cat, moose, okay?

39
00:02:25.801 --> 00:02:27.677
So what's the contention?

40
00:02:27.677 --> 00:02:33.515
The contention is, prior to Go 1.22,
you could not use range with an int, okay?

41
00:02:33.515 --> 00:02:36.358
So you can not iterate through
an integer with the range function,

42
00:02:36.358 --> 00:02:38.358
you'd have to do it with
the previous method.

43
00:02:38.358 --> 00:02:43.316
But now we can do for value, range 10, and

44
00:02:43.316 --> 00:02:48.680
you can just do fmt.Printline value,
right?

45
00:02:48.680 --> 00:02:51.723
And if you run this, boom, 0 tonight.

46
00:02:51.723 --> 00:02:55.851
Super easy stuff,
I personally like the range function,

47
00:02:55.851 --> 00:02:58.390
I think it's like very like go ask.

48
00:02:58.390 --> 00:03:01.636
It's something about like,
I'm only gonna see that in Go,

49
00:03:01.636 --> 00:03:04.575
which I kind of adopt to
the more things that Go offers.

50
00:03:04.575 --> 00:03:09.313
Again, there's some gotchas here and
there, but they're not too bad.

51
00:03:09.313 --> 00:03:12.189
And the last thing about
loops is a while loop.

52
00:03:12.189 --> 00:03:13.386
How do we make while loops?

53
00:03:13.386 --> 00:03:17.249
There's no while keyword,
the only looping keyword in Go is for.

54
00:03:17.249 --> 00:03:20.617
So if you really wanna break your
computer right now, run this.

55
00:03:20.617 --> 00:03:22.195
It's gonna be a loop, right?

56
00:03:22.195 --> 00:03:25.165
You can print something it doesn't
you're not gonna break out of it, right?

57
00:03:25.165 --> 00:03:30.252
But what you can do instead is,
like a traditional for

58
00:03:30.252 --> 00:03:35.114
loop, you can do something
like declare i:=0,

59
00:03:35.114 --> 00:03:39.635
and in for,
this is the condition while i &lt; 5,

60
00:03:39.635 --> 00:03:46.103
we can do a fmt.Println(i), and
then we can increment i, okay?

61
00:03:46.103 --> 00:03:49.031
Okay, and let's go ahead and
remove this portion here,

62
00:03:49.031 --> 00:03:51.662
cuz we're gonna get confused, 1, 2, 3, 4.

63
00:03:51.662 --> 00:03:53.633
So that's while loops in Go, okay?

64
00:03:53.633 --> 00:03:58.440
It's just using the for
keyword as a conditional, but essentially,

65
00:03:58.440 --> 00:04:00.405
it's the same thing, yes.

66
00:04:00.405 --> 00:04:01.881
&gt;&gt; I had a question about the append.

67
00:04:01.881 --> 00:04:03.119
&gt;&gt; Yes.

68
00:04:03.119 --> 00:04:08.309
&gt;&gt; So, it returns a new array
that you reassign to animals,

69
00:04:08.309 --> 00:04:10.698
so it's a pure function.

70
00:04:10.698 --> 00:04:13.723
&gt;&gt; Depends, it actually conditionally
does, either returns a new array or

71
00:04:13.723 --> 00:04:14.661
it just appends to it.

72
00:04:14.661 --> 00:04:19.484
So you can see here,
append elements to the end of a slice,

73
00:04:19.484 --> 00:04:23.325
if it has sufficient capacity, it doesn't,

74
00:04:23.325 --> 00:04:27.567
but it will re-accommodate and
return new slice.

75
00:04:27.567 --> 00:04:30.170
So it's very conditional
on how Go does it.

76
00:04:30.170 --> 00:04:34.039
So sometimes it is like a brand,
you do have to redeclare the slice with

77
00:04:34.039 --> 00:04:38.319
the append method, but sometimes you
get returned a new slice all together.

78
00:04:38.319 --> 00:04:41.393
&gt;&gt; Okay, so
you can't just say append slice?.

79
00:04:41.393 --> 00:04:43.267
&gt;&gt; No, and it won't change in place,

80
00:04:43.267 --> 00:04:46.709
you have to re-declare the slice
that you'd statuated before.

81
00:04:46.709 --> 00:04:48.677
&gt;&gt; Cool.

82
00:04:48.677 --> 00:04:51.893
&gt;&gt; What happens if you use
an out of range index,

83
00:04:51.893 --> 00:04:54.780
as in the previous traditional loop?.

84
00:04:54.780 --> 00:04:57.063
&gt;&gt; If you use an out of range index.

85
00:04:57.063 --> 00:05:03.176
&gt;&gt; Like, if you went to five,
but your array is only three.

86
00:05:03.176 --> 00:05:08.555
&gt;&gt; You'll have a runtime panic,
because that's out of range.

87
00:05:08.555 --> 00:05:10.774
You won't even be able to compile it,
actually.

88
00:05:10.774 --> 00:05:14.798
If you go back to,
like the delete function, for example,

89
00:05:14.798 --> 00:05:18.917
Go knows what you can iterate
over in the capacity of things.

90
00:05:18.917 --> 00:05:23.735
So let's say we go back
to our animal slice, and

91
00:05:23.735 --> 00:05:28.674
we do a delete, or sorry,
slices.delete, and

92
00:05:28.674 --> 00:05:34.221
we put in the animals array,
this has how many values?

93
00:05:34.221 --> 00:05:35.546
3, and we go 3, 4.

94
00:05:35.546 --> 00:05:40.034
This was a, let's see,
no m was never used.

95
00:05:40.034 --> 00:05:44.407
Sorry, let's go here,
it should give us an error.

96
00:05:53.031 --> 00:05:56.732
Yeah, runtime error,
slice bounds out of range.

97
00:05:56.732 --> 00:05:58.930
So we'll get these out-of-range panics and

98
00:05:58.930 --> 00:06:01.473
these nils depending on kinda
how you write the code.

99
00:06:01.473 --> 00:06:05.163
So that's something to look out for.

100
00:06:05.163 --> 00:06:08.576
Great question.

101
00:06:08.576 --> 00:06:13.751
&gt;&gt; If you append animals and
you created a new variable,

102
00:06:13.751 --> 00:06:17.093
would animals remain unchanged?

103
00:06:17.093 --> 00:06:21.810
&gt;&gt; Yeah, because you're passing
a copy of the original animal slice.

104
00:06:21.810 --> 00:06:25.808
We're gonna get into that
more in detail right now.

105
00:06:29.097 --> 00:06:29.858
Great question.

106
00:06:29.858 --> 00:06:34.693
Okay, so we did loops,
variables, I wanna go into,

107
00:06:34.693 --> 00:06:39.752
yeah, I'm gonna do this,
I'm gonna go into structs.

108
00:06:39.752 --> 00:06:42.018
This is where, I think,
it gets a little bit more exciting.

109
00:06:42.018 --> 00:06:47.332
So we're gonna do package main,
func.main, okay, here.

110
00:06:47.332 --> 00:06:49.865
So structs, what are they?

111
00:06:49.865 --> 00:06:55.615
The bare bone definition of a struct
is that it's a type that holds data and

112
00:06:55.615 --> 00:06:59.530
passes that data along
around your application.

113
00:06:59.530 --> 00:07:04.819
That is kind of the textbook definition
of a struct in a purist form.

114
00:07:04.819 --> 00:07:11.625
But the way you can use structs with
other concepts in Golang at interface,

115
00:07:11.625 --> 00:07:17.903
it is kind of Go's answer to
object-oriented programming, okay?

116
00:07:17.903 --> 00:07:21.282
So, Go does not have
the contents of classes, and

117
00:07:21.282 --> 00:07:24.264
Go choose a composition over inheritance.

118
00:07:24.264 --> 00:07:28.521
And I'm not saying this is innately
better, there's pros and cons, right?

119
00:07:28.521 --> 00:07:33.393
If you come from a class-based
language like Java, Python,

120
00:07:33.393 --> 00:07:38.559
PHP, you write great code and
it has inherited classes, right?

121
00:07:38.559 --> 00:07:40.697
But there is pros and cons, and

122
00:07:40.697 --> 00:07:45.809
the Go development team chose
composition versus inheritance, right?

123
00:07:45.809 --> 00:07:49.561
And structs play a vital role
of how they achieved that.

124
00:07:49.561 --> 00:07:54.536
But I wanna showcase first
handling data field portion before

125
00:07:54.536 --> 00:07:57.796
we move on to that composition example.

126
00:07:57.796 --> 00:08:01.588
So, to declare a struct in Go,
use the type keyword, and

127
00:08:01.588 --> 00:08:04.671
instead we're gonna
create a person struct.

128
00:08:04.671 --> 00:08:07.062
So person struct, all right?

129
00:08:07.062 --> 00:08:10.907
And then, every struct can contain fields.

130
00:08:10.907 --> 00:08:15.285
And these fields are like properties,
but they hold data essentially, right?

131
00:08:15.285 --> 00:08:20.753
Let's say we want a person to have a name,
string age int, okay?

132
00:08:20.753 --> 00:08:25.626
And this is fine, Go will not yell at
you if you have an unused drug type.

133
00:08:25.626 --> 00:08:28.292
This is just a type definition, all right?

134
00:08:28.292 --> 00:08:29.961
So the compiler is with this.

135
00:08:29.961 --> 00:08:33.321
And let's say we wanna create
a new person, we'll just say,

136
00:08:33.321 --> 00:08:37.789
myPerson is going to be, type Person,
and then we're gonna populate the field.

137
00:08:37.789 --> 00:08:43.143
So name is gonna be Melky,
string Melky, right?

138
00:08:43.143 --> 00:08:47.340
And you can notice one thing,
is the compiler is yelling at us for

139
00:08:47.340 --> 00:08:50.309
person is declared not used,
which is fine.

140
00:08:50.309 --> 00:08:51.464
We'll just print it.

141
00:08:51.464 --> 00:08:54.043
But it's not yelling at us for the age.

142
00:08:54.043 --> 00:08:55.115
And why is that?

143
00:08:57.425 --> 00:08:58.954
Because it goes back to the zero value,
right?

144
00:08:58.954 --> 00:09:02.173
So if you don't populate the field,
they go back to the zero values.

145
00:09:02.173 --> 00:09:04.790
Here's a key example of why they have,

146
00:09:04.790 --> 00:09:09.403
one of the reasons why they had that
type zero declaration fallback.

147
00:09:09.403 --> 00:09:11.954
All right, but let's say for
our case, I put in my age.

148
00:09:11.954 --> 00:09:13.376
Okay, 26, and then here.

149
00:09:13.376 --> 00:09:16.930
So now I'll do a fmt.Println,
and it'll put myPerson.

150
00:09:19.466 --> 00:09:23.196
And we can run this,
Go run structs/main.go.

151
00:09:23.196 --> 00:09:25.095
Boom, Melkey, 26.

152
00:09:25.095 --> 00:09:29.916
I find this to be a decent
print statement, but

153
00:09:29.916 --> 00:09:34.501
if I look at this, I'm like, what is this?

154
00:09:34.501 --> 00:09:40.090
So, personally,
what you can use is the format package.

155
00:09:40.090 --> 00:09:45.161
Fmt.Printf, and
you can use this is myPerson,

156
00:09:45.161 --> 00:09:50.118
and you can do %+v, and
put myPerson, okay?

157
00:09:50.118 --> 00:09:56.683
And now if you run it, you see this
is my person {Name:melkey, Age:26}.

158
00:09:56.683 --> 00:10:01.828
The v format specifier is basically for
interfaces, it can accept any type.

159
00:10:01.828 --> 00:10:04.863
I'm gonna go into interface
in a lot more detail, but

160
00:10:04.863 --> 00:10:07.568
it basically can accept
any type that you want.

161
00:10:07.568 --> 00:10:11.475
And then the plus in front of v
shows the actual name of the field.

162
00:10:11.475 --> 00:10:16.488
So it's a little bit more explicit
into what a struct is, okay?

163
00:10:16.488 --> 00:10:19.201
Cool, and
this is some pretty powerful stuff, right?

164
00:10:19.201 --> 00:10:21.247
We have a person we can do,
we can print our person,

165
00:10:21.247 --> 00:10:24.021
we can change the name of the person,
so we have access to the fields.

166
00:10:24.021 --> 00:10:27.849
So myPerson.Name,
let's change that to Marc, right?

167
00:10:27.849 --> 00:10:30.940
And now if we reprint our person,
we have {Name:Marc, Age:26}.

168
00:10:30.940 --> 00:10:31.864
All right, so

169
00:10:31.864 --> 00:10:36.494
we can change these values in case
you have access to these properties.

170
00:10:36.494 --> 00:10:41.552
Cool, there's a bunch of different use
cases of why this would be necessary.

171
00:10:41.552 --> 00:10:46.758
But if you wanna change the name, it's a
little cumbersome to just do it in place.

172
00:10:46.758 --> 00:10:48.296
So let's create a function for it.

173
00:10:48.296 --> 00:10:51.924
So the first function that we do that's
action be not just main, so func,

174
00:10:51.924 --> 00:10:53.458
we're gonna do a change name.

175
00:10:53.458 --> 00:10:55.772
That's the name of the function,
is gonna two arguments.

176
00:10:55.772 --> 00:10:58.691
One is gonna be the name,
for actually, you know what?

177
00:10:58.691 --> 00:11:02.900
Sorry, before that, I'm gonna create a new
function, and it should be newPerson.

178
00:11:02.900 --> 00:11:06.001
Because what I like to do,
if I know if I'm gonna have a struct,

179
00:11:06.001 --> 00:11:08.008
I can initialize the court all the time.

180
00:11:08.008 --> 00:11:11.050
I want a function that does the work,
rather than writing this my person,

181
00:11:11.050 --> 00:11:14.409
nothing innately wrong with it, I just
liked the structure of function, okay?

182
00:11:14.409 --> 00:11:17.976
So we're gonna do newPerson, and
this is gonna take two arguments.

183
00:11:17.976 --> 00:11:21.887
The first one, let's say is the name,
which is string,

184
00:11:21.887 --> 00:11:26.549
and then age, which is int, and
this is gonna return a person type.

185
00:11:26.549 --> 00:11:30.957
Cuz remember,
a struct is just a data type in Go.

186
00:11:30.957 --> 00:11:35.416
So when we return variables and
values in Go, we have to specify the type.

187
00:11:35.416 --> 00:11:38.366
here we're gonna return the person type.

188
00:11:38.366 --> 00:11:42.077
And in here we're gonna do return person,
all right, and

189
00:11:42.077 --> 00:11:44.577
we're gonna populate the name field,

190
00:11:44.577 --> 00:11:49.135
where the name parameter get passed
into our function and an age as age.

191
00:11:49.135 --> 00:11:52.297
And here we can just delete this.

192
00:11:52.297 --> 00:11:55.610
And can do myPerson is just NewPerson,
NewPerson and

193
00:11:55.610 --> 00:12:00.551
person, those arguments, melkey and
then 26, and everything works as is.

194
00:12:00.551 --> 00:12:04.499
So if we run this again,
exact same print statement,

195
00:12:04.499 --> 00:12:08.200
there's a little helper function for
us, okay?

196
00:12:08.200 --> 00:12:12.077
Next, like I said, I wanna keep doing
person.name to change the name,

197
00:12:12.077 --> 00:12:15.656
let's create a little function to
make it a little easier, okay?

198
00:12:15.656 --> 00:12:19.522
Func.changeName, this is
going to take two things.

199
00:12:19.522 --> 00:12:22.487
One is the actual person type,
cuz we want to modify our person.

200
00:12:22.487 --> 00:12:24.751
So we're gonna pass in our person.

201
00:12:24.751 --> 00:12:30.806
So person is gonna be person type, and
then new name is gonna be of string type.

202
00:12:30.806 --> 00:12:33.163
This isn't gonna return anything,
cuz we've changed the property.

203
00:12:33.163 --> 00:12:36.362
We don't need a return value here,
we're not reassigning anything just yet.

204
00:12:36.362 --> 00:12:42.998
And we're just gonna say,
person.Name is newName, cool.

205
00:12:42.998 --> 00:12:45.299
The compiler is not happy
because it's unused.

206
00:12:45.299 --> 00:12:46.109
So let's go ahead and use this.

207
00:12:46.109 --> 00:12:48.230
Let's change myperson.Name.

208
00:12:48.230 --> 00:12:55.680
We're gona do changeName, I'm gonna pass
in myPerson and the new name of Marc.

209
00:12:55.680 --> 00:13:00.702
So now, if you run this,
now we should build a helper function, and

210
00:13:00.702 --> 00:13:05.657
so we'll see the name is,
it still says, melkey, okay, my bad.

211
00:13:05.657 --> 00:13:07.028
Let's just check this out.

212
00:13:07.028 --> 00:13:11.857
If I debug this, fmt.Println,
person.Name, and

213
00:13:11.857 --> 00:13:17.561
we'll do a nameBefore, and
I'm passing in something weird.

214
00:13:20.677 --> 00:13:28.121
Let's do this, we have after, let's go
here and just do something like that.

215
00:13:28.121 --> 00:13:30.881
So let's just see what's
going on behind the scenes.

216
00:13:30.881 --> 00:13:36.569
Name before milking after Marc,
but it's not persistent thing.

217
00:13:36.569 --> 00:13:39.369
This is, I'm playing a bit,
I'm a really bad actor, I'm sorry.

218
00:13:39.369 --> 00:13:40.980
This is on purpose, okay?

219
00:13:40.980 --> 00:13:46.354
Because Go has this concept of passing
in values as copies or references, okay?

220
00:13:46.354 --> 00:13:51.310
And I thought the best way to show this
is with an example rather than me try to

221
00:13:51.310 --> 00:13:56.044
explain it, and we're gonna go into
how this all works under the hood.

222
00:13:56.044 --> 00:14:00.411
But essentially, we're passing a copy
of our person type here, okay?

223
00:14:00.411 --> 00:14:05.460
So myPerson, we declared it here,
and initialize it here,

224
00:14:05.460 --> 00:14:11.202
when we call this changeName, and
we expect this person argument for

225
00:14:11.202 --> 00:14:14.280
passing a copy of our person, okay?

226
00:14:14.280 --> 00:14:19.364
And so when we change the name,
we're changing only the name of the copy,

227
00:14:19.364 --> 00:14:25.025
but the original reference, the original
allocated memory is still unchanged.

228
00:14:25.025 --> 00:14:29.454
It's actually hasn't even been
touched since we declared it.

229
00:14:29.454 --> 00:14:35.352
Okay, so this is a core concept in Go when
it comes to passing values as copies and

230
00:14:35.352 --> 00:14:37.652
passing values by reference.

231
00:14:37.652 --> 00:14:38.989
So, how can we change this?

232
00:14:38.989 --> 00:14:42.336
How can we actually change
the property of name?

233
00:14:42.336 --> 00:14:46.371
I wanna be Marc, or I wanna change
from Melkey to Mark, so what do I do?

234
00:14:46.371 --> 00:14:50.093
Well, let's first clean
a few things up here.

235
00:14:50.093 --> 00:14:53.702
Let's instead of passing in a person,
that's a little cumbersome, right?

236
00:14:53.702 --> 00:14:57.691
What if our struct's really big and
we keep passing it in?

237
00:14:57.691 --> 00:14:59.340
That's just, to me, it doesn't make sense.

238
00:14:59.340 --> 00:15:03.572
So instead,
let's do what's called a receiver in Go.

239
00:15:03.572 --> 00:15:07.995
And this is gonna be kind of
what I mentioned about that more

240
00:15:07.995 --> 00:15:10.717
object-oriented solution to Go.

241
00:15:10.717 --> 00:15:13.054
This is called a receiver.

242
00:15:13.054 --> 00:15:18.503
And the textbook definition,
is a method implemented on a type.

243
00:15:18.503 --> 00:15:24.213
That is, I believe,
the direct quote for a receiver.

244
00:15:24.213 --> 00:15:29.922
And what this does is now changeName
can only be called on persontype,

245
00:15:29.922 --> 00:15:34.877
because you can see here on line eight,
it's yelling at me.

246
00:15:34.877 --> 00:15:37.424
Undefined changeName,
doesn't know what it is anymore.

247
00:15:37.424 --> 00:15:40.028
So how do we call it?

248
00:15:40.028 --> 00:15:41.978
MyPerson.changeName.

249
00:15:41.978 --> 00:15:45.919
Nice, this is really powerful stuff,
right?

250
00:15:45.919 --> 00:15:50.992
This is how we have that ability
of composition versus inheritance.

251
00:15:50.992 --> 00:15:54.720
Cuz you can compose your structs
with different structs as well,

252
00:15:54.720 --> 00:15:59.534
you can build off of these structs with
different methods, different properties,

253
00:15:59.534 --> 00:16:02.677
and have more granularity to
how you define your code.

254
00:16:02.677 --> 00:16:06.061
So here, let's go ahead and
just remove this and skip Marc.

255
00:16:06.061 --> 00:16:08.076
We have to fix a few things up here.

256
00:16:08.076 --> 00:16:11.877
So instead of person will do p,
and now finally,

257
00:16:11.877 --> 00:16:16.067
because we have this receiver,
it's going to work.

258
00:16:16.067 --> 00:16:19.986
So if you run this code,
it's still Melkey.

259
00:16:19.986 --> 00:16:24.356
All right, at this point, it's not
about how you write your function,

260
00:16:24.356 --> 00:16:28.096
it's not about how you choose to pass in,
it's still a copy.

261
00:16:28.096 --> 00:16:33.749
ChangeName is still only changing
the copy of our person's struct.

262
00:16:33.749 --> 00:16:37.225
We have to actually pass
the real reference where

263
00:16:37.225 --> 00:16:40.287
the memory is actually allocated, okay?

264
00:16:40.287 --> 00:16:41.508
And how do we do this?

265
00:16:41.508 --> 00:16:44.245
Well, we can just change one thing.

266
00:16:44.245 --> 00:16:45.283
Let's put an asterix here.

267
00:16:47.979 --> 00:16:50.995
Now asterix has dual meaning in Go.

268
00:16:50.995 --> 00:16:56.786
The one that we're focused on right now,
is this defines that this is an actual

269
00:16:56.786 --> 00:17:02.861
reference to the allocated memory of our
person struct, our personType, okay?

270
00:17:02.861 --> 00:17:06.473
So here, if I now run this code,

271
00:17:09.322 --> 00:17:13.444
Name before Melkey, after Marc, it's Marc.

272
00:17:13.444 --> 00:17:17.461
It's now persisted, because we've changed
the actual allocated memory, right?

273
00:17:17.461 --> 00:17:20.739
And if you want to find out in
a more systematic way, let's say,

274
00:17:20.739 --> 00:17:24.263
you forget the asterisks or
you compose your code in a different way,

275
00:17:24.263 --> 00:17:26.718
there's actually a really
cool feature in Go.

276
00:17:26.718 --> 00:17:30.262
So let's remove the asterisks,
let's go back a step.

277
00:17:30.262 --> 00:17:32.510
I wanna do something.

278
00:17:32.510 --> 00:17:37.428
I'm gonna do fmt.Println,
what I'm gonna say is,

279
00:17:37.428 --> 00:17:42.470
address of copy, and
there's going to be &amp;p.Name.

280
00:17:42.470 --> 00:17:45.245
Bear with me, okay?

281
00:17:45.245 --> 00:17:47.808
I'm gonna remove these
print statements here, so

282
00:17:47.808 --> 00:17:51.636
we're not gonna see them before an astersk
cuz I wanna clean up what we show.

283
00:17:51.636 --> 00:17:53.736
And then here,
I'm going to call the same thing.

284
00:17:53.736 --> 00:17:55.756
So let's grab this print
statement over here.

285
00:17:55.756 --> 00:17:58.028
Let's jump down, paste it.

286
00:17:58.028 --> 00:18:05.338
I'm gonna do address of allocated memory.

287
00:18:05.338 --> 00:18:12.100
Instead of p.Name, we'll do myPerson.Name.

288
00:18:12.100 --> 00:18:17.586
All right, and I'm gonna just print
this and we'll see that address

289
00:18:17.586 --> 00:18:23.179
allocated is this address, and
the address of the copy is different.

290
00:18:23.179 --> 00:18:27.830
So this is the fundamental method of
seeing that you are either passing a copy

291
00:18:27.830 --> 00:18:31.480
or an actual reference to where
that memory exists, okay?

292
00:18:31.480 --> 00:18:35.674
So you can see here, this is kind of the
proof in the pudding that we're changing

293
00:18:35.674 --> 00:18:39.823
the type in our copy, but it doesn't
persist to the actual allocated memory.

