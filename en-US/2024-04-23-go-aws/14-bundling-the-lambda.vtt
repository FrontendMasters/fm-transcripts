WEBVTT

1
00:00:00.080 --> 00:00:03.884
And now, this is where, like I said
everything the source of truth to

2
00:00:03.884 --> 00:00:06.323
everything in this main function, right?

3
00:00:06.323 --> 00:00:11.320
And you may think we need to pass in
handle request, and then event like so.

4
00:00:11.320 --> 00:00:13.490
That's not the way we're
gonna deploy a lambda.

5
00:00:13.490 --> 00:00:17.300
We're gonna do is lambda which can
bring in that package from up.

6
00:00:17.300 --> 00:00:20.230
I was gonna say upstairs,
we're gonna bring it in.

7
00:00:20.230 --> 00:00:21.417
So, let's keep our format.

8
00:00:21.417 --> 00:00:29.947
And in here,
GitHub.com/AWS/AWS-lambda-go/lambda, okay?

9
00:00:29.947 --> 00:00:33.467
If we go back down,
this lambda is gonna take an argument.

10
00:00:33.467 --> 00:00:35.207
Or we're gonna call a method on this,
which is start.

11
00:00:36.727 --> 00:00:42.293
And then we pass in our function here,
our handle request.

12
00:00:44.750 --> 00:00:50.004
And you may have noticed, there is no
call, we're not calling handler request.

13
00:00:51.394 --> 00:00:52.564
We're not doing this.

14
00:00:52.564 --> 00:00:56.144
And the reason for that is functions
are first class citizens in Go.

15
00:00:56.144 --> 00:00:59.407
Meaning, you can pass
functions as values as well.

16
00:01:00.567 --> 00:01:02.793
Okay, so essentially, we're not telling,

17
00:01:02.793 --> 00:01:05.708
lambda.start to call
this function right away.

18
00:01:05.708 --> 00:01:10.798
We're just saying, hey,
lambda.start on invocation, okay?

19
00:01:10.798 --> 00:01:14.378
Here's the function that you're going to
run, which are handle request function.

20
00:01:14.378 --> 00:01:17.904
And there's a lot of like really
interesting complexity that

21
00:01:17.904 --> 00:01:19.748
goes behind the scenes of this.

22
00:01:19.748 --> 00:01:26.987
Cuz like I said, we created this type,
we created as MyEvent.

23
00:01:26.987 --> 00:01:29.537
The go AWS SDK doesn't know what this is.

24
00:01:29.537 --> 00:01:32.277
It doesn't know that has a user name,
we could change that, right?

25
00:01:32.277 --> 00:01:37.022
So there's lots of interesting
thought philosophy with using Go and

26
00:01:37.022 --> 00:01:40.306
how you can handle these
cases of this unknown.

27
00:01:40.306 --> 00:01:42.930
We're gonna go to a few examples of these,
but

28
00:01:42.930 --> 00:01:46.975
just recognize that lambda.start
is not calling the function.

29
00:01:46.975 --> 00:01:49.614
It's being passed a function to call.

30
00:01:52.130 --> 00:01:54.590
Cool, so, we're done with this main.go,

31
00:01:54.590 --> 00:01:57.695
we're done with our first
definition of lambda.

32
00:01:57.695 --> 00:02:00.675
Let's switch gears back to our
Go CDK file here for a second.

33
00:02:02.375 --> 00:02:06.205
So in this file, we're not going
to touch anything that main.go.

34
00:02:06.205 --> 00:02:09.022
Actually, never going to touch this.

35
00:02:09.022 --> 00:02:09.755
Just ignore it.

36
00:02:09.755 --> 00:02:12.971
We're going to touch everything,
and this is our playground, okay?

37
00:02:12.971 --> 00:02:17.001
And here, as you can see the example
resource define a new queue,

38
00:02:17.001 --> 00:02:18.696
we can define a new lambda.

39
00:02:18.696 --> 00:02:23.683
So, the first thing I want to do is this
is why I guess I did remove the example.

40
00:02:23.683 --> 00:02:24.279
That's okay.

41
00:02:24.279 --> 00:02:26.613
We're going to first bring
in our example here.

42
00:02:26.613 --> 00:02:27.393
So let's see.

43
00:02:27.393 --> 00:02:31.521
The definition for that example,

44
00:02:31.521 --> 00:02:37.363
it's just GitHub.com/AWS/AWS-CDK.go.

45
00:02:37.363 --> 00:02:41.877
And it's going to be V2 AWS Lambda.

46
00:02:45.287 --> 00:02:48.918
Cool, let's see that I
get the right AWS-CDK.

47
00:02:48.918 --> 00:02:51.863
Let's go, before the V2.

48
00:02:51.863 --> 00:02:57.882
Sorry, it's a long, I think AWS CDK.

49
00:02:57.882 --> 00:02:58.441
There you go.
And

50
00:02:58.441 --> 00:03:00.186
you can see there's
a different input right here.

51
00:03:00.186 --> 00:03:02.126
Already, now we're just going
to complain that's unused.

52
00:03:03.506 --> 00:03:05.277
Before we're getting a different
error message saying, hey,

53
00:03:05.277 --> 00:03:06.046
I don't know what this is.

54
00:03:06.046 --> 00:03:07.526
This is not importing our go.mod.

55
00:03:07.526 --> 00:03:08.556
I don't know what this is.

56
00:03:08.556 --> 00:03:13.277
Now, since we know return a compiler,
hey, we have this and said yes,

57
00:03:13.277 --> 00:03:15.496
we do, now it's unused, okay?

58
00:03:15.496 --> 00:03:18.586
So, here we're gonna keep the same
structure as this resource, but

59
00:03:18.586 --> 00:03:19.929
let's clean up our car loop.

60
00:03:19.929 --> 00:03:21.161
Let's remove this line.

61
00:03:21.161 --> 00:03:22.501
Let's remove this line.

62
00:03:22.501 --> 00:03:28.168
And let's actually just remove
everything for right now, okay?

63
00:03:28.168 --> 00:03:29.484
I'm going to use that same definition.

64
00:03:29.484 --> 00:03:32.863
So I'm going to do AWS Lambda.

65
00:03:32.863 --> 00:03:37.932
I'm going to put New function, okay?

66
00:03:37.932 --> 00:03:40.367
And this new function
takes certain properties.

67
00:03:40.367 --> 00:03:45.547
Just like anything else, we saw with
the queue, we're going to see a DynamoDB.

68
00:03:45.547 --> 00:03:46.952
We're going to go to API Gateway.

69
00:03:46.952 --> 00:03:48.937
It takes specific properties
to call this function.

70
00:03:48.937 --> 00:03:52.567
If you go dive into this new function,
right?

71
00:03:52.567 --> 00:03:56.326
You can see there's gonna be a few
examples of how we can run it and

72
00:03:56.326 --> 00:04:01.402
what expects but here the first thing
that we need to pass in Is our stack.

73
00:04:01.402 --> 00:04:06.652
That first baby piece that we kind
of lay going onto is the stack.

74
00:04:06.652 --> 00:04:09.908
So now we're saying, hey, this stack
is gonna have this lambda function, and

75
00:04:09.908 --> 00:04:11.672
we're gonna say the name of the function.

76
00:04:11.672 --> 00:04:16.027
You can even see here new function expects
a contract type, an ID, string and

77
00:04:16.027 --> 00:04:19.242
a props,
which is AWS Lambda function props.

78
00:04:19.242 --> 00:04:22.421
So here let's I should give it an ID,
js, double A string.

79
00:04:22.421 --> 00:04:26.689
And let's just call
this MyLambda function.

80
00:04:26.689 --> 00:04:27.741
You can call whatever you want.

81
00:04:27.741 --> 00:04:30.861
This is just the ID of this
particular lambda function.

82
00:04:30.861 --> 00:04:35.951
And then we're gonna pass it a ref
to AWS Lambda function props.

83
00:04:35.951 --> 00:04:37.351
I'm gonna open that up.

84
00:04:37.351 --> 00:04:41.969
And this is actually what I
intended to go into first.

85
00:04:41.969 --> 00:04:47.185
So if we go in here,
this is a very good resource to know and

86
00:04:47.185 --> 00:04:51.120
understand what does this really expect?

87
00:04:51.120 --> 00:04:53.240
What can we call our function props?

88
00:04:53.240 --> 00:04:58.343
And there's some examples in the raw CDK
code that shows you how to use this,

89
00:04:58.343 --> 00:05:00.839
and there's a really good example.

90
00:05:00.839 --> 00:05:06.089
The function prompts has these three
properties, runtime, handler and code.

91
00:05:06.089 --> 00:05:10.703
Again, every resource is gonna have
their own definition for properties.

92
00:05:10.703 --> 00:05:14.891
These are lambda specific properties
that we're dealing with here, okay?

93
00:05:14.891 --> 00:05:18.038
The runtime basically tells
a lambda function hey,

94
00:05:18.038 --> 00:05:19.834
this is the runtime of a Code.

95
00:05:19.834 --> 00:05:22.346
This is what we've
written our back end in.

96
00:05:22.346 --> 00:05:26.796
And again, this could be Python,
this could be Node, Go, whatever.

97
00:05:26.796 --> 00:05:29.636
So it's important that
we pass in our runtime.

98
00:05:29.636 --> 00:05:34.336
The handler is basically where
does this code exist, right?

99
00:05:34.336 --> 00:05:37.792
We're gonna bundle our code up,
and then we have to use that code,

100
00:05:37.792 --> 00:05:40.836
give it to our lambda contract
to be deployed with, okay?

101
00:05:40.836 --> 00:05:43.232
Because as of right now,
if we do not give it a handler,

102
00:05:43.232 --> 00:05:45.645
we're gonna deploy quite
literally an empty lambda.

103
00:05:46.645 --> 00:05:50.676
So this handler is where our code
should be packaged and bundled.

104
00:05:50.676 --> 00:05:56.015
And then the code,
how do we actually execute our code, okay?

105
00:05:56.015 --> 00:06:01.429
Where is the code going to be executed and
how are we going to get executed, right?

106
00:06:01.429 --> 00:06:05.333
So I can go back and
show a quick example here.

107
00:06:05.333 --> 00:06:09.323
So we can first pass in the Runtime, okay?

108
00:06:09.323 --> 00:06:14.321
And the runtime, unfortunately,
GoCDK recently made a change in

109
00:06:14.321 --> 00:06:19.048
their runtime where, for Go,
it used to support Go natively,

110
00:06:19.048 --> 00:06:23.265
but now we have to pass it in
a custom runtime provision.

111
00:06:23.265 --> 00:06:28.578
So it's going to be
Runtime_PROVIDED_AL2023, okay?

112
00:06:28.578 --> 00:06:30.055
And this is a recent change they've made.

113
00:06:30.055 --> 00:06:34.691
They've deprecated support for
bundling native Go functions, so

114
00:06:34.691 --> 00:06:37.095
we have to provide the runtime.

115
00:06:37.095 --> 00:06:42.220
But this actually isn't a big deal cuz,
I'm gonna show you how Go makes it

116
00:06:42.220 --> 00:06:47.524
super easy for us to define the runtime
of where you can run this code, okay?

117
00:06:47.524 --> 00:06:50.081
Next, is gonna be the code property.

118
00:06:50.081 --> 00:06:51.511
So we're gonna say code.

119
00:06:51.511 --> 00:06:54.781
And in here, it's going to be AWS Lambda,
and it's a few options.

120
00:06:54.781 --> 00:06:58.914
You can see it from Asset Image,
and from Bucket.

121
00:06:58.914 --> 00:07:03.686
So you can actually host your application
in sdbucket and reference it from there.

122
00:07:03.686 --> 00:07:08.320
You can host it on like a docker image or
an ECR image, host it from there, or

123
00:07:08.320 --> 00:07:10.706
you can actually do from asset.

124
00:07:10.706 --> 00:07:14.896
And from asset means we're gonna give
you literally the function to run.

125
00:07:14.896 --> 00:07:16.962
So it's gonna be AWS Lambda.

126
00:07:19.508 --> 00:07:25.342
Oops, hold on.

127
00:07:25.342 --> 00:07:27.279
Asset code from Asset.

128
00:07:27.279 --> 00:07:30.476
And this, we have to pass in basically
the path over this code is gonna live.

129
00:07:30.476 --> 00:07:33.608
So we're gonna do JSI string, because
it needs to compile that string for

130
00:07:33.608 --> 00:07:34.172
us, right?

131
00:07:34.172 --> 00:07:40.879
This JSI framework basically compiling
a Goshen type to a TypeScript string type.

132
00:07:40.879 --> 00:07:43.020
That's kinda what it's
doing under the hood, okay?

133
00:07:43.020 --> 00:07:43.689
And then the path.

134
00:07:43.689 --> 00:07:47.736
So this is gonna be lambda,
the directory that we just created, and

135
00:07:47.736 --> 00:07:50.868
into what we're gonna call function.zip,
okay?

136
00:07:50.868 --> 00:07:52.808
And then the nil is gonna be saying,

137
00:07:52.808 --> 00:07:55.769
we don't want to pass any
additional properties.

138
00:07:55.769 --> 00:07:59.755
There's nothing more that we wanna
provide our asset from code.

139
00:07:59.755 --> 00:08:02.173
But it's gonna be straight zip,
it's gonna have everything you need.

140
00:08:02.173 --> 00:08:04.023
You can deploy it, you can use it.

141
00:08:04.023 --> 00:08:07.681
There might be some further instances of,
again, controlling granularity might be

142
00:08:07.681 --> 00:08:10.133
interested in, but no, for
right now we don't need it.

143
00:08:10.133 --> 00:08:12.143
And then the handler.

144
00:08:12.143 --> 00:08:16.822
And this is a very important kind
of concept I wanna tie really

145
00:08:16.822 --> 00:08:22.593
back from when we first started
writing code in the first part.

146
00:08:22.593 --> 00:08:24.866
Remember when I said,
anytime you run code and

147
00:08:24.866 --> 00:08:28.373
Go the source of choose the main
function and it has to be packaged main.

148
00:08:29.453 --> 00:08:32.404
This is why,
because when we run our Go code,

149
00:08:32.404 --> 00:08:35.369
you can actually compile
it to machine code.

150
00:08:35.369 --> 00:08:39.777
They can execute anytime you want,
but to do that successfully and

151
00:08:39.777 --> 00:08:45.302
to do that in a very intelligent way, you
have to identify a specific package main.

152
00:08:45.302 --> 00:08:49.618
And that package main is expected
to have a function called main,

153
00:08:49.618 --> 00:08:53.344
which serves as the entry point for
our Go application.

154
00:08:53.344 --> 00:08:56.714
I'm gonna show you a little example here.

155
00:08:56.714 --> 00:08:58.454
So we're gonna kind of deviate from this.

156
00:08:58.454 --> 00:09:02.134
If you go here,
go to Go back to our lambda main.go.

157
00:09:02.134 --> 00:09:02.664
Yes, question.

158
00:09:02.664 --> 00:09:06.014
&gt;&gt; Question about that before
we get into that, the runtime,

159
00:09:06.014 --> 00:09:09.443
what's the relationship between
the runtime and the code?

160
00:09:09.443 --> 00:09:11.914
So if you have like a Ruby runtime-
&gt;&gt; Yeah.

161
00:09:13.004 --> 00:09:17.084
&gt;&gt; Does that mean that you could run
Ruby code without shipping Ruby?

162
00:09:17.084 --> 00:09:20.996
Like it's available in
the Runtime already.

163
00:09:20.996 --> 00:09:25.286
&gt;&gt; Yeah, specifically in Ruby and lambda,
I don't know if that's supported,

164
00:09:25.286 --> 00:09:26.916
but conceptually, yes.

165
00:09:26.916 --> 00:09:30.196
So, let's say something I can
probably speak further on as a node.

166
00:09:30.196 --> 00:09:34.746
You're basically saying if the runtime is
node, the lambda you're gonna deploy to is

167
00:09:34.746 --> 00:09:37.756
gonna have everything ready
to run that version of node.

168
00:09:37.756 --> 00:09:39.248
And it's different but node 18,

169
00:09:39.248 --> 00:09:42.205
node 16 16 as one of the options
there if I'm not mistaken.

170
00:09:42.205 --> 00:09:44.404
So it's basically telling, hey,

171
00:09:44.404 --> 00:09:49.475
this lambda function can call a typescript
function that's going to run on node.

172
00:09:49.475 --> 00:09:54.095
And in this case,
we're gonna provide it the runtime.

173
00:09:54.095 --> 00:09:57.735
But let's say we did this like a year ago,
it's gonna have to go runtime.

174
00:09:57.735 --> 00:10:00.797
The lambda is going to say, hey,
we're gonna call this lambda function,

175
00:10:00.797 --> 00:10:03.141
it's going to run Go code on the Lambda,
right?

176
00:10:03.141 --> 00:10:04.611
So you can't really mix up with Node and
Go.

177
00:10:04.611 --> 00:10:06.521
You're gonna have like a gnarly error.

178
00:10:06.521 --> 00:10:07.661
So you want to avoid that.

179
00:10:07.661 --> 00:10:09.021
But that's conceptually what it is.

180
00:10:09.021 --> 00:10:12.451
Because we're not gonna different
from server-based architecture,

181
00:10:12.451 --> 00:10:16.421
we have to download like Node, all
these dependencies to run your program.

182
00:10:16.421 --> 00:10:19.756
This is how we handle that in
a serverless-based architecture.

183
00:10:21.098 --> 00:10:23.904
That was a really good question,
thank you.

184
00:10:23.904 --> 00:10:26.164
So I wanna showcase an ability of Go.

185
00:10:26.164 --> 00:10:28.584
Here we have this lambda.start, right?

186
00:10:28.584 --> 00:10:30.231
Do me favorite comment this out.

187
00:10:32.672 --> 00:10:36.311
And then all I want you to
do is our classic format,

188
00:10:36.311 --> 00:10:38.835
print line, hello world, okay?

189
00:10:38.835 --> 00:10:39.706
We took a few steps back.

190
00:10:39.706 --> 00:10:43.570
We've regressed, all right?

191
00:10:43.570 --> 00:10:47.060
Now in our Lambda directory, I want you
to run it go run main dog, all right?

192
00:10:47.060 --> 00:10:48.090
That's how we do it.

193
00:10:48.090 --> 00:10:50.240
Hello World, cool.

194
00:10:50.240 --> 00:10:52.480
We've done this before,
why am I showing you this?

195
00:10:52.480 --> 00:10:56.512
Here's some magic gobuild-outputmain.

196
00:10:59.105 --> 00:11:00.642
Did anyone see what happened?

197
00:11:02.686 --> 00:11:03.578
Something's different.

198
00:11:03.578 --> 00:11:06.884
There's an acronym and see what it is.

199
00:11:06.884 --> 00:11:07.850
&gt;&gt; Executable.

200
00:11:07.850 --> 00:11:08.997
&gt;&gt; Yes, exactly.

201
00:11:08.997 --> 00:11:10.148
We have an executable main here.

202
00:11:11.238 --> 00:11:14.788
This compiled our entire Go
code into machine code, right?

203
00:11:14.788 --> 00:11:18.567
And now you can just do main.

204
00:11:18.567 --> 00:11:20.110
You can execute as if it's scripted.

205
00:11:20.110 --> 00:11:23.979
As if it's just an executable
piece of software, right?

206
00:11:23.979 --> 00:11:28.450
And so now you can understand the power
of how easy it is to deploy Go in

207
00:11:28.450 --> 00:11:30.596
different environments.

208
00:11:30.596 --> 00:11:34.046
CICD pipelines, all you gotta
do is execute like this, right?

209
00:11:34.046 --> 00:11:38.776
And that's why we followed that package
main main function entry point hierarchy.

210
00:11:38.776 --> 00:11:43.042
Because the source of truth of what this
is going to run basically bubbles down to

211
00:11:43.042 --> 00:11:44.135
the main function.

212
00:11:46.618 --> 00:11:48.883
Cool, all right, yes.

213
00:11:48.883 --> 00:11:52.782
&gt;&gt; Can you bypass the whole
runtime process and

214
00:11:52.782 --> 00:11:57.635
just upload that binary file to Lambda and
execute it.

215
00:11:57.635 --> 00:11:58.878
That's like a Linux binary?

216
00:11:58.878 --> 00:12:01.721
&gt;&gt; No, you can't, because,

217
00:12:01.721 --> 00:12:06.815
we're kind of going to do
that in the next command,

218
00:12:06.815 --> 00:12:12.391
but we still have to tell
the Lambda what the runtime is.

219
00:12:12.391 --> 00:12:14.737
So even if we just give
it this binary file,

220
00:12:14.737 --> 00:12:17.670
I think the way lambdas
are constructed engineered,

221
00:12:17.670 --> 00:12:21.859
there's maybe too much wiggle room of
what can happen on these deployment.

222
00:12:21.859 --> 00:12:26.076
So I think the team at AWS wanted to
really confine what the runtime will be

223
00:12:26.076 --> 00:12:27.882
when you deploy it.

224
00:12:27.882 --> 00:12:31.283
And again, you can think of like if
you're deploying like Python runtime or

225
00:12:31.283 --> 00:12:34.738
something like that, you have to provide
this runtime so it can do whatever it

226
00:12:34.738 --> 00:12:37.631
has to do to download everything
to run your code successfully.

227
00:12:37.631 --> 00:12:40.544
And there's a reason why
they remove the runtime.

228
00:12:40.544 --> 00:12:43.447
And we're gonna show why that is Is
in just a second with like native go

229
00:12:43.447 --> 00:12:43.956
features.

230
00:12:46.835 --> 00:12:48.883
Okay, so now we have this main.

231
00:12:48.883 --> 00:12:50.621
Let's go ahead and delete this.

232
00:12:50.621 --> 00:12:52.061
I was just showing you that for example.

233
00:12:53.241 --> 00:12:58.001
Fun fact, if you have go PLS on VS code or
near him and you save something,

234
00:12:58.001 --> 00:13:01.411
it actually automatically
brings in a package.

235
00:13:01.411 --> 00:13:02.281
So I didn't bring it in.

236
00:13:02.281 --> 00:13:04.361
It kind of brought it in
itself once I saved it.

