WEBVTT

1
00:00:00.000 --> 00:00:04.152
Let's actually start fixing
our RegisterUser function.

2
00:00:04.152 --> 00:00:05.900
I'm gonna do that in our types.go.

3
00:00:05.900 --> 00:00:10.880
So there's one big, glaring issue, and
that's we are storing plaintext passwords.

4
00:00:10.880 --> 00:00:12.631
That's not good, we don't want that.

5
00:00:12.631 --> 00:00:14.115
So how can we change this?

6
00:00:14.115 --> 00:00:17.851
If you go back,
let's make a new type called User.

7
00:00:17.851 --> 00:00:20.507
And it's gonna be a struct, and
it's gonna look very similar.

8
00:00:20.507 --> 00:00:23.488
We're gonna have a Username field,
Username string.

9
00:00:23.488 --> 00:00:27.003
It's gonna be a string, it's gonna
have the same json: "username", okay?

10
00:00:27.003 --> 00:00:31.659
But this time, instead of just plaintext
password, which we get from the request,

11
00:00:31.659 --> 00:00:35.279
we're gonna have Passworhash,
still gonna be a string, okay?

12
00:00:35.279 --> 00:00:41.467
And it's gonna be json, and it's gonna
be password, and it should be password.

13
00:00:41.467 --> 00:00:44.839
Yeah, I don't think we need
to change that, yeah, cool.

14
00:00:44.839 --> 00:00:48.673
Okay, so this new type looks exactly
the same, password, not harsh.

15
00:00:48.673 --> 00:00:53.939
Let's change this,
I think I'm typing too fast,

16
00:00:53.939 --> 00:00:57.126
PasswordHash, cool, okay?

17
00:00:57.126 --> 00:01:01.866
And so where this user is gonna come into
play is once we know there's no existing

18
00:01:01.866 --> 00:01:06.749
users, once we have confidence that
there's no errors, before we insert user,

19
00:01:06.749 --> 00:01:09.935
we're not gonna be inserting
of type RegisterUser,

20
00:01:09.935 --> 00:01:12.807
we're gonna be inserting of type User,
okay?

21
00:01:12.807 --> 00:01:18.875
We're gonna do func NewUser, it's gonna
take a registerUser of type RegisterUser.

22
00:01:18.875 --> 00:01:24.222
And what it's going to return
is a User and an error, okay?

23
00:01:24.222 --> 00:01:25.361
And why is that?

24
00:01:25.361 --> 00:01:26.319
Why am I doing all this work?

25
00:01:26.319 --> 00:01:29.660
Because this is where we're gonna
create the hashedPassword function.

26
00:01:29.660 --> 00:01:34.358
Now, I would be an absolute fool if I
were to stand in front of you and say,

27
00:01:34.358 --> 00:01:36.450
we're gonna make this our own.

28
00:01:36.450 --> 00:01:41.302
I will never ever say I know enough
about security to a level where I

29
00:01:41.302 --> 00:01:43.784
think I can hash my own password.

30
00:01:43.784 --> 00:01:47.111
That's why we're gonna use packages,
it's gonna make our lives a little easier.

31
00:01:47.111 --> 00:01:50.369
So make sure you cd into your lambda,
clear this.

32
00:01:50.369 --> 00:01:55.337
I'm gonna do go get, and the package we're
gonna use is gonna be called bcrypt.

33
00:01:55.337 --> 00:02:00.413
golang.org, so it's not Github,

34
00:02:00.413 --> 00:02:04.514
okay, x/crypto/bcrypt.

35
00:02:04.514 --> 00:02:11.089
Make sure I got that right,
golang.org/x/crypto and bcrypt, sweet.

36
00:02:11.089 --> 00:02:12.281
Now, we got it.

37
00:02:12.281 --> 00:02:15.209
bcrypt is gonna do the heavy lifting for
us, okay?

38
00:02:15.209 --> 00:02:19.282
You do not wanna be responsible for
hashing passwords,

39
00:02:19.282 --> 00:02:23.535
I do not recommend that, but
it's not financial advice.

40
00:02:23.535 --> 00:02:27.364
Go here, we import that same thing,

41
00:02:27.364 --> 00:02:32.064
golang.org/x/crypto/bcrypt, cool.

42
00:02:32.064 --> 00:02:37.160
Imported and not used,
that's the best message here.

43
00:02:37.160 --> 00:02:40.947
And then here,
we're gonna do hashedPassword, and

44
00:02:40.947 --> 00:02:43.144
then it also returns an error.

45
00:02:43.144 --> 00:02:46.740
It's going to be bcrypt, and
we're gonna do, not compare and hash.

46
00:02:46.740 --> 00:02:50.692
We're gonna use that afterwards, but
we're gonna do GenerateFromPassword.

47
00:02:50.692 --> 00:02:54.394
And this GenerateFromPassword
takes a slice of bytes,

48
00:02:54.394 --> 00:02:59.052
which is another underlying data
structure and essential type to Go.

49
00:02:59.052 --> 00:03:03.064
That's how a lot of the conversion
between strings, different parameters

50
00:03:03.064 --> 00:03:07.767
are processed with functions within Go for
performance reasons, efficiency reasons,

51
00:03:07.767 --> 00:03:11.800
and just natively being able to be more
flexible with that implementation.

52
00:03:11.800 --> 00:03:14.669
So here, how do we get a byte?

53
00:03:14.669 --> 00:03:16.374
How do we transform a string from a byte?

54
00:03:16.374 --> 00:03:18.632
We can just easily transform
that with something like this.

55
00:03:18.632 --> 00:03:23.413
So first,
it's gonna expect a slice of bytes, and

56
00:03:23.413 --> 00:03:27.985
it can transform
the registerUser.Password.

57
00:03:27.985 --> 00:03:32.950
And this conversion transforms that string
representation into a slice of bytes

58
00:03:32.950 --> 00:03:33.466
for us.

59
00:03:35.527 --> 00:03:39.800
Okay, and the next parameter is this
hashing algorithm, the salt, I think,

60
00:03:39.800 --> 00:03:42.026
if you will, we're gonna go with 10.

61
00:03:42.026 --> 00:03:46.113
The higher you go,
the more it's going to take,

62
00:03:46.113 --> 00:03:51.808
processing-wise, to salt your password,
to hash it correctly.

63
00:03:51.808 --> 00:03:55.048
But again, the higher you go,
the more secure it is,

64
00:03:55.048 --> 00:03:57.284
but the longer it takes to create it.

65
00:03:57.284 --> 00:04:03.270
10 is a good value, where we have
a good security into the hashing,

66
00:04:03.270 --> 00:04:07.931
and it's not gonna take too
long to generate, okay?

67
00:04:07.931 --> 00:04:13.138
And now if the error does not
equal to nil, what I'm gonna

68
00:04:13.138 --> 00:04:18.471
do is return an empty User type,
doesn't really matter.

69
00:04:18.471 --> 00:04:20.959
And I'm actually gonna
talk about something.

70
00:04:20.959 --> 00:04:22.551
So we can easily do something here.

71
00:04:22.551 --> 00:04:25.976
Remember how we were asked,
when do we use this versus not?

72
00:04:25.976 --> 00:04:28.596
Well, this is an example of when
you could just do nil, right?

73
00:04:28.596 --> 00:04:34.483
Cuz this zero value of
a point of reference is nil.

74
00:04:34.483 --> 00:04:36.885
So there's applications
where this matters,

75
00:04:36.885 --> 00:04:40.376
there's some applications where
maybe it doesn't matter as much.

76
00:04:40.376 --> 00:04:44.693
For our case, because I know I'm
gonna be calling this NewUser, and

77
00:04:44.693 --> 00:04:48.799
where I'm calling it,
I'm just gonna be checking on the error.

78
00:04:48.799 --> 00:04:54.376
I really don't care what this value is
here, if it's nil or an empty User type.

79
00:04:54.376 --> 00:04:55.282
If I get an error,

80
00:04:55.282 --> 00:04:58.794
that's the only thing I'm focusing
on in that block of code, okay?

81
00:05:03.252 --> 00:05:07.817
Okay, and so now, once we have
the password, all we're gonna do is return

82
00:05:07.817 --> 00:05:11.300
an instance of User, but
this one's not gonna be empty.

83
00:05:11.300 --> 00:05:15.305
So our username is going to be
from registerUser.Username.

84
00:05:15.305 --> 00:05:18.906
And then the password, PasswordHash,
is gonna be the string.

85
00:05:18.906 --> 00:05:21.407
Cuz remember, this returns a byte,

86
00:05:21.407 --> 00:05:25.853
a slice of bytes generated from password,
this bcrypt library.

87
00:05:25.853 --> 00:05:31.048
So we have to do string, and we're
gonna put in the hashedPassword, okay?

88
00:05:31.048 --> 00:05:34.980
And it's complaining, because we
don't have enough return types, so

89
00:05:34.980 --> 00:05:36.791
it's gonna return User and nil.

90
00:05:44.654 --> 00:05:50.185
Cool, while we're here,
it's interesting to kinda think

91
00:05:50.185 --> 00:05:57.462
about this from when you implement it
versus when it's working, okay, wait.

92
00:05:57.462 --> 00:06:00.833
Right now, if we look at our database,
the passwords are plaintext passwords.

93
00:06:00.833 --> 00:06:05.698
Okay, but if we kinda think forward
a little bit, once we use this NewUser

94
00:06:05.698 --> 00:06:11.113
function, every time we call that register
function, invoke it, I should say,

95
00:06:11.113 --> 00:06:16.078
it's gonna be the username and
the hash representation of that password.

96
00:06:16.078 --> 00:06:20.422
And that's great, but then it's like,
well, when we log in,

97
00:06:20.422 --> 00:06:24.532
which is something we're gonna build here,
what do you do?

98
00:06:24.532 --> 00:06:29.098
Cuz no one is ever gonna have that
hashed representation of your password,

99
00:06:29.098 --> 00:06:31.349
certainly not your client, right?

100
00:06:31.349 --> 00:06:35.459
So how do we go from the plaintext
password to the hashed password?

101
00:06:35.459 --> 00:06:38.493
And we could do it later on,
I'm gonna do it right now just so

102
00:06:38.493 --> 00:06:40.025
we have it in our back pocket.

103
00:06:40.025 --> 00:06:43.888
But the function is gonna be just
a ValidatePassword function, okay?

104
00:06:43.888 --> 00:06:47.545
This ValidatePassword function
is gonna take two arguments,

105
00:06:47.545 --> 00:06:49.546
it's gonna be a hashedPassword.

106
00:06:49.546 --> 00:06:52.176
So this hashedPassword is
gonna come from our database,

107
00:06:52.176 --> 00:06:54.545
that's the only place
it's actually gonna come.

108
00:06:54.545 --> 00:07:01.329
And then it's gonna be
also plainTextPassword.

109
00:07:01.329 --> 00:07:04.667
plainTextPassword comes from
a request from our clients.

110
00:07:04.667 --> 00:07:07.331
And this little short form notation,
hashedPassword,

111
00:07:07.331 --> 00:07:11.170
if you note, they're both can be strings,
you can just append string at the end.

112
00:07:11.170 --> 00:07:15.438
So instead of doing hashedPassword string,
plainPassword string,

113
00:07:15.438 --> 00:07:18.848
you can just do both, and
then string at the end, okay?

114
00:07:18.848 --> 00:07:22.122
And the only thing that it's gonna
return is a Boolean, true or false,

115
00:07:22.122 --> 00:07:23.333
only thing we care about.

116
00:07:23.333 --> 00:07:25.148
Here, I'm gonna declare an error.

117
00:07:25.148 --> 00:07:29.969
I'm gonna say, basically,
we need bcrypt.CompareHashAndPassword.

118
00:07:29.969 --> 00:07:34.591
Be very careful here about
the direction you put your arguments,

119
00:07:34.591 --> 00:07:36.027
cuz it does matter.

120
00:07:36.027 --> 00:07:39.447
The first argument has to be
the hashed representation.

121
00:07:39.447 --> 00:07:43.208
The second argument can be
the plaintext password.

122
00:07:43.208 --> 00:07:47.044
And similar thing,
we're gonna pass in a list of bytes.

123
00:07:47.044 --> 00:07:49.490
We're gonna transform our hashedPassword.

124
00:07:49.490 --> 00:07:55.190
List of bytes,
it's gonna be the plainTextPassword, okay?

125
00:07:55.190 --> 00:07:59.764
And what we're gonna do is return error

126
00:07:59.764 --> 00:08:04.763
if our error basically equals nil, okay?

127
00:08:04.763 --> 00:08:07.536
So this is gonna be a truthy or falsey.

128
00:08:07.536 --> 00:08:11.035
It's gonna basically return,
do you have an error, yes, return True.

129
00:08:11.035 --> 00:08:14.891
I mean, if there's an error, return False,
if there's no error, return True.

130
00:08:14.891 --> 00:08:17.726
Which is why we have that Boolean return
in the ValidatePassword function.

131
00:08:17.726 --> 00:08:20.435
So we're not really doing
too much of hashing,

132
00:08:20.435 --> 00:08:25.107
we're kind of leaving that up to a much
smarter package that we're depending on,

133
00:08:25.107 --> 00:08:28.447
but we're still using it in
our application code, okay?

