WEBVTT

1
00:00:00.230 --> 00:00:03.536
Now I'm not gonna deploy this just yet,
we always say that at the end,

2
00:00:03.536 --> 00:00:04.501
got a little treat.

3
00:00:04.501 --> 00:00:08.230
Everything works well, and if it doesn't,
that's where I sweat and panic, but

4
00:00:08.230 --> 00:00:10.679
we're gonna pretend like
that's not gonna happen.

5
00:00:10.679 --> 00:00:16.873
Next thing we're gonna do is we
have the hash, we have the CDK.

6
00:00:16.873 --> 00:00:20.780
I think we should define the function
that's gonna interact with our database on

7
00:00:20.780 --> 00:00:24.062
logging in the user, so
getting that user, retrieving that user.

8
00:00:24.062 --> 00:00:27.951
Because like I said, I like working
from the lowest level all the way up.

9
00:00:27.951 --> 00:00:32.427
It just makes it easier for
me to think about it in a weird way.

10
00:00:32.427 --> 00:00:39.101
And also, there's a fun little gotcha
that we're gonna showcase here, cool.

11
00:00:39.101 --> 00:00:44.665
So we have the DoesUserExist, this is
where also, if you remember what I said,

12
00:00:44.665 --> 00:00:49.163
we could have made the first
function essentially return this.

13
00:00:49.163 --> 00:00:50.315
You could still do that.

14
00:00:50.315 --> 00:00:52.613
Honestly, if you want,
go ahead and do that.

15
00:00:52.613 --> 00:00:56.220
I'm gonna keep it separate and
it's gonna be a lot of repeating code.

16
00:00:56.220 --> 00:00:59.886
Please, clean code enthusiasts,
I apologize, sincerely, sincerely,

17
00:00:59.886 --> 00:01:00.527
sincerely.

18
00:01:00.527 --> 00:01:01.663
But this is just for

19
00:01:01.663 --> 00:01:06.567
me to kind of showcase how we can defined
functions under this method, call them.

20
00:01:06.567 --> 00:01:09.139
But of course,
there's a way to make it better.

21
00:01:09.139 --> 00:01:13.151
So here we're gonna do a func u,
it's gonna be our DynamoDBClient and

22
00:01:13.151 --> 00:01:14.991
it's gonna be called GetUser.

23
00:01:14.991 --> 00:01:19.223
What GetUser is going to
take is a username, string.

24
00:01:19.223 --> 00:01:21.524
And what is it gonna return?

25
00:01:21.524 --> 00:01:26.894
It's gonna return type.user and
an error, right?

26
00:01:26.894 --> 00:01:30.243
Cuz we're no longer gonna be
handling those registered users.

27
00:01:30.243 --> 00:01:34.343
So we have this, and just like the code we
wrote above, it's gonna be very similar.

28
00:01:34.343 --> 00:01:37.722
We're gonna call our database store,
we're gonna get the item.

29
00:01:37.722 --> 00:01:40.101
We're gonna see if it exists if it's no,
whatever.

30
00:01:40.101 --> 00:01:43.435
And then we're gonna go
unmarshal it to our user struct.

31
00:01:43.435 --> 00:01:47.278
So I'm gonna go into what
that really means, okay?

32
00:01:47.278 --> 00:01:51.841
So here let's go ahead, first declare or
instantiate a user var.

33
00:01:51.841 --> 00:01:55.787
So var user is gonna be types user and
that's it.

34
00:01:55.787 --> 00:02:02.369
So remember now it's a nil value, because
now it's a zero value of our struct, okay?

35
00:02:02.369 --> 00:02:06.311
So now, we can go ahead and
basically retrieve the item.

36
00:02:06.311 --> 00:02:11.137
So we can do result error is going to be

37
00:02:11.137 --> 00:02:16.288
u.databaseStore.Getitem, okay?

38
00:02:16.288 --> 00:02:21.035
And this get item is
DynamoDB.GetItemInput.

39
00:02:21.035 --> 00:02:25.671
First field, let's put in our table
name just to get that out of the way,

40
00:02:25.671 --> 00:02:27.805
aws.String(TABLE_NAME).

41
00:02:27.805 --> 00:02:32.340
The second value is gonna be a key,
could be map(string).

42
00:02:32.340 --> 00:02:38.381
And it's going to be pointer
to dynamodb.attribute value.

43
00:02:43.561 --> 00:02:48.653
All right, I'm gonna assemble
the exact same thing as we did before.

44
00:02:48.653 --> 00:02:52.793
I'm gonna assemble this key as a string,
where we're gonna pass in that username

45
00:02:52.793 --> 00:02:55.554
as the main field that we're
trying to retrieve from.

46
00:02:55.554 --> 00:03:00.228
So here we're gonna put username,
struct string aws.String and

47
00:03:00.228 --> 00:03:04.241
put that username that we get
as the argument in GetUser.

48
00:03:11.348 --> 00:03:14.977
All right, and here I'm gonna do if
the error does not equal to nil.

49
00:03:14.977 --> 00:03:22.432
What we're gonna do is return that user
that we have defined right above here.

50
00:03:22.432 --> 00:03:27.740
Okay, we're gonna return that and
the error, right?

51
00:03:30.632 --> 00:03:35.019
Then we're gonna check
if result.item is nil.

52
00:03:35.019 --> 00:03:41.092
This is basically saying,
this user does not exist, okay?

53
00:03:41.092 --> 00:03:44.073
So we're gonna again return the user.

54
00:03:44.073 --> 00:03:48.080
I'm gonna do format.Errorf,
I'm gonna say user not found.

55
00:03:52.115 --> 00:03:55.798
And this is where the difference comes
from the previous DoesUserExists function.

56
00:03:55.798 --> 00:04:00.863
We're gonna create something
called a Dynamo DB attribute

57
00:04:00.863 --> 00:04:05.622
to unmarshal the value that's
stored in our Dynamo DB to

58
00:04:05.622 --> 00:04:10.699
the struct we have created above here,
to our user struct.

59
00:04:10.699 --> 00:04:14.018
So we need to modify our import,
I'm gonna paste this.

60
00:04:14.018 --> 00:04:16.986
And at the end, it's gonna be, what is it?

61
00:04:16.986 --> 00:04:22.365
dynamodbattribute, dynamodbattribute.

62
00:04:22.365 --> 00:04:22.921
Go all the way down.

63
00:04:28.852 --> 00:04:33.769
We're basically gonna say error is
going to be that attribute value,

64
00:04:33.769 --> 00:04:37.614
so dynamodbattribute's
already populating for us.

65
00:04:37.614 --> 00:04:39.575
dynamodbattribute, I'm
gonna do unmarshall.

66
00:04:39.575 --> 00:04:42.896
And it's not gonna just
a regular unmarshall,

67
00:04:42.896 --> 00:04:45.226
it's gonna be an unmartial map.

68
00:04:45.226 --> 00:04:50.484
I'm gonna take the result, so result.item,
I'm gonna unmarshal it into our var.

69
00:04:50.484 --> 00:04:52.603
Or not var sorry, our user.

70
00:04:55.249 --> 00:05:00.725
Okay, and then we can lastly do if error
does not, oops does not equal to nil,

71
00:05:00.725 --> 00:05:05.213
return user and that error,
otherwise, let's return user.

72
00:05:12.527 --> 00:05:17.015
So it's basically the exact same function
that we wrote for DoesUserExist, but

73
00:05:17.015 --> 00:05:18.799
with this added unmarshaling.

74
00:05:18.799 --> 00:05:21.612
I'm gonna go into details of what
unmarshaling truly means in just

75
00:05:21.612 --> 00:05:22.222
a little bit.

