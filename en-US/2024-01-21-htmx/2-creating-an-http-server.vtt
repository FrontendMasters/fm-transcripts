WEBVTT

1
00:00:00.276 --> 00:00:02.171
All right, time to build a server.

2
00:00:02.171 --> 00:00:05.480
So if you're adept at how
to launch a server, and

3
00:00:05.480 --> 00:00:10.163
you want to use a different language
than Go, you can follow along and

4
00:00:10.163 --> 00:00:14.886
not use Go because the server will
not be a huge part of the code today.

5
00:00:14.886 --> 00:00:17.785
Well, actually, I mean,
it will be about half the code today,

6
00:00:17.785 --> 00:00:20.202
the other half will be literally HTML.

7
00:00:20.202 --> 00:00:22.701
All I need is that your server
should be able to produce HTML,

8
00:00:22.701 --> 00:00:25.452
you should be able to respond
with various status codes.

9
00:00:25.452 --> 00:00:29.918
You should be able to make routes with
params i.e like contacts with ID.

10
00:00:29.918 --> 00:00:32.847
You should be able to read query
parameters, form parameters,

11
00:00:32.847 --> 00:00:33.830
anything like that.

12
00:00:33.830 --> 00:00:37.533
And you should be able to create verb
based routes, GET, POST, DELETE.

13
00:00:37.533 --> 00:00:42.052
So as long as you can do that and you
feel like you can keep up, then use that.

14
00:00:42.052 --> 00:00:46.402
That's one of the beauties of HTMX is
that you don't have any requirements

15
00:00:46.402 --> 00:00:47.308
on the server.

16
00:00:47.308 --> 00:00:50.484
Choose whatever language you want,
whatever you're most comfortable with.

17
00:00:50.484 --> 00:00:55.416
It has absolutely no decisions or
thoughts about what a server should do.

18
00:00:55.416 --> 00:00:59.410
And I think that that is very,
very important part of HTMX.

19
00:00:59.410 --> 00:01:00.998
There you go.

20
00:01:00.998 --> 00:01:01.666
So where do we start?

21
00:01:01.666 --> 00:01:04.207
Well, I think the best place to
start is usually the beginning.

22
00:01:04.207 --> 00:01:07.927
So we're gonna create a very simple
HTTP server and an index page and

23
00:01:07.927 --> 00:01:12.049
then upgraded to use HTMX to give like
the very first kind of introduction.

24
00:01:12.049 --> 00:01:15.274
I know in today's world,
templates are not sexy.

25
00:01:15.274 --> 00:01:17.637
No one says, hey, everybody,
let's use templates.

26
00:01:17.637 --> 00:01:21.513
Everyone wants that JSX
that RSX that JESX,

27
00:01:21.513 --> 00:01:26.765
that's Go's version of JSX,
which does actually exist.

28
00:01:26.765 --> 00:01:29.266
They are simple,
they can become annoying, and

29
00:01:29.266 --> 00:01:31.833
I fully agree templates
sometimes are annoying.

30
00:01:31.833 --> 00:01:34.357
But so are other options,
every option has its trade off.

31
00:01:34.357 --> 00:01:36.847
I intentionally chose templates
because of the same reason above.

32
00:01:36.847 --> 00:01:39.404
I want zero dependencies and
I want this as simple as possible.

33
00:01:39.404 --> 00:01:44.348
Anyone with any reasonable amount of
programming experience can look at

34
00:01:44.348 --> 00:01:49.630
a template and pretty much figure out
what's happening, and that's that.

35
00:01:49.630 --> 00:01:52.786
Which also means I'm gonna try to do
everything as grub-brain as possible.

36
00:01:52.786 --> 00:01:56.295
I'm just gonna have one thing in the file
for the templates and one file for

37
00:01:56.295 --> 00:01:56.925
the server.

38
00:01:56.925 --> 00:01:58.813
We're not trying to do
good programming here.

39
00:01:58.813 --> 00:02:02.309
But if I were to use something and I
wanted something a little bit more spicy,

40
00:02:02.309 --> 00:02:04.509
I would consider using
something like temple.

41
00:02:04.509 --> 00:02:05.502
Temple is pretty cool.

42
00:02:05.502 --> 00:02:08.706
It's an impossible word to Google for.

43
00:02:08.706 --> 00:02:10.665
So you try to go Google Go Lang Temple,

44
00:02:10.665 --> 00:02:15.334
you'll probably not get the results that
you're looking for, it's quite surprising.

45
00:02:15.334 --> 00:02:19.372
So if you ever get interested in it,
it's just literally temple.guide.

46
00:02:19.372 --> 00:02:22.369
And then you get this whole great
little thing about how to build it.

47
00:02:22.369 --> 00:02:24.548
So you get to use something
that looks like JSX,

48
00:02:24.548 --> 00:02:27.342
you can only use string interpolation,
all that fun stuff.

49
00:02:27.342 --> 00:02:28.234
It's actually pretty good.

50
00:02:28.234 --> 00:02:31.888
I had a great time of
playing around with it.

51
00:02:31.888 --> 00:02:35.440
All right, now back to our regular
scheduled programming, and

52
00:02:35.440 --> 00:02:39.779
that's gonna be, and so our task is to
display a count that represents how many

53
00:02:39.779 --> 00:02:41.652
times a page has been requested.

54
00:02:41.652 --> 00:02:46.842
So let's first start with the view,
the delicious HTML.

55
00:02:46.842 --> 00:02:49.642
So I'm going to jump in here,
I'm going to open it up at the base and

56
00:02:49.642 --> 00:02:50.951
I'm going to go down to views.

57
00:02:50.951 --> 00:02:54.182
Don't worry about what's in blocks,
we'll come there later, okay?

58
00:02:54.182 --> 00:02:57.605
And I'm just gonna create
a new file called index.html.

59
00:02:57.605 --> 00:02:58.926
I'm sure everyone can join in.

60
00:02:58.926 --> 00:03:02.400
Now, me personally, I love naming
every one of the blocks in a file.

61
00:03:02.400 --> 00:03:05.869
I don't know what it is about it, but
I like having names for my templates.

62
00:03:05.869 --> 00:03:09.812
So I'm going to go block index this and
there you go,

63
00:03:09.812 --> 00:03:12.334
I've named my block, perfect.

64
00:03:12.334 --> 00:03:17.301
And so I'm gonna create a quick HTML5
document, pretty straightforward.

65
00:03:17.301 --> 00:03:21.798
And all we're going to do is
just put a count in there, so

66
00:03:21.798 --> 00:03:25.065
that should be as simple as Count Count.

67
00:03:25.065 --> 00:03:27.750
Now if you're unfamiliar
with Go templating,

68
00:03:27.750 --> 00:03:32.593
these little two squirrely braces on each
side, simply say, hey, what's in here?

69
00:03:32.593 --> 00:03:34.743
I think it's actually Lisp
that gets executed in there.

70
00:03:34.743 --> 00:03:39.731
So practically old camel, but
what's inside of here, simply I'm saying,

71
00:03:39.731 --> 00:03:44.426
hey, whatever objects passed in,
give me the property count off of it.

72
00:03:44.426 --> 00:03:46.446
All right, so
now we need to set up the server.

73
00:03:46.446 --> 00:03:49.423
You need to definitely get
these two items installed.

74
00:03:49.423 --> 00:03:53.632
This is just echo, it's just a really
simple server as far as I can tell.

75
00:03:53.632 --> 00:03:55.554
I think they have a decent
amount of features.

76
00:03:55.554 --> 00:04:00.316
If during your time you're using echo and
you keep seeing an error popping up on

77
00:04:00.316 --> 00:04:03.562
your import,
despite you doing a go get of that item,

78
00:04:03.562 --> 00:04:06.540
just execute a go mod tidy,
it cleans things up.

79
00:04:06.540 --> 00:04:09.330
I'm not really sure what a go mod tidy
does other than it must organize your

80
00:04:09.330 --> 00:04:12.345
files, make sure you're using all
the things that you said you're using, and

81
00:04:12.345 --> 00:04:13.887
then ensures that they're installed.

82
00:04:13.887 --> 00:04:15.841
That's my guess on what it does.

83
00:04:15.841 --> 00:04:20.374
And I'm sure the gophers can validate and
or tell me I'm wrong.

84
00:04:20.374 --> 00:04:22.449
But that's pretty much
what I guess happens.

85
00:04:22.449 --> 00:04:23.654
All right, so we're gonna come back here.

86
00:04:23.654 --> 00:04:26.880
Okay, so
I'm gonna execute those two things,

87
00:04:26.880 --> 00:04:31.164
go get github echo lab V4, and
go get echo lab V4 middleware.

88
00:04:31.164 --> 00:04:32.844
It's going to probably
do those two things,

89
00:04:32.844 --> 00:04:36.133
I think I already technically accidentally
have them already installed, fantastic.

90
00:04:36.133 --> 00:04:38.928
We're gonna go to the command directory.

91
00:04:38.928 --> 00:04:41.651
I'm gonna open this up and
just create a main.go.

92
00:04:41.651 --> 00:04:47.314
So, you can see right here,
touch command main.go, awesome.

93
00:04:47.314 --> 00:04:51.736
Create a little quick package main,
a quick func main, awesome.

94
00:04:51.736 --> 00:04:55.690
And I'm just gonna start using it
as if echo is here, so echo, echo,

95
00:04:55.690 --> 00:04:56.793
open up a new echo.

96
00:04:56.793 --> 00:04:59.178
Make sure it's v4,
as you can see, I'm using v4,

97
00:04:59.178 --> 00:05:01.101
don't accidentally use something else.

98
00:05:01.101 --> 00:05:04.930
There we go, New, let's see,
we're gonna use a middleware.

99
00:05:04.930 --> 00:05:08.186
Look at that co-pilot already
knows exactly what we want to do.

100
00:05:08.186 --> 00:05:09.704
Add the middleware here.

101
00:05:09.704 --> 00:05:12.727
So look at this I am having that same
problem that I was talking about how it's

102
00:05:12.727 --> 00:05:16.000
just like, I don't know what this is,
I don't believe any of this stuff exists.

103
00:05:16.000 --> 00:05:19.412
I'm gonna do a little go mod tidy,
everything should be nice there.

104
00:05:19.412 --> 00:05:21.022
All right, fantastic.

105
00:05:21.022 --> 00:05:25.190
And usually that goes away,
there we go, fantastic.

106
00:05:25.190 --> 00:05:28.157
And I'm not using the correct middleware,
look at that, see?

107
00:05:28.157 --> 00:05:31.465
V4, there we go, [SOUND].

108
00:05:31.465 --> 00:05:32.957
So everything's going good now.

109
00:05:32.957 --> 00:05:36.992
Now this is the only part of the course
that has a whole bunch of programming

110
00:05:36.992 --> 00:05:41.760
that's not really about programming the
problem, it's about setting up a project.

111
00:05:41.760 --> 00:05:46.431
So if you've never used templates or echo,
you can set it up such that echo can take

112
00:05:46.431 --> 00:05:51.121
in a template renderer and it just makes
programming down the road a touch easier.

113
00:05:51.121 --> 00:05:52.576
So I'm gonna do a couple things.

114
00:05:52.576 --> 00:05:56.462
First, I'm gonna create a quick
struct called templates, why not?

115
00:05:56.462 --> 00:05:59.116
And it's gonna be pretty easy,
I'm gonna call it, there we go,

116
00:05:59.116 --> 00:06:01.209
copilot pretty much auto
completes it all for you.

117
00:06:01.209 --> 00:06:04.459
Make sure you get the HTML template.

118
00:06:04.459 --> 00:06:05.287
There we go.

119
00:06:05.287 --> 00:06:08.505
I am going to add, look at this,
it's copilot already knows,

120
00:06:08.505 --> 00:06:11.256
that's the one,
that's the one I want right there.

121
00:06:11.256 --> 00:06:15.845
You wanna create this function called
render that is based off the templates and

122
00:06:15.845 --> 00:06:17.773
it will simply have an IO Writer.

123
00:06:17.773 --> 00:06:18.849
It's gonna have a name.

124
00:06:18.849 --> 00:06:21.017
It's going to have the data for
the template,

125
00:06:21.017 --> 00:06:24.088
and it's gonna have the context from echo,
it returns an error.

126
00:06:24.088 --> 00:06:27.433
Pretty much how echo works is just that
it has functions that return errors,

127
00:06:27.433 --> 00:06:30.842
usually takes in a context, return
out an error, that's pretty standard.

128
00:06:30.842 --> 00:06:34.533
And I'm just gonna execute the template,
and that means I'm gonna write to

129
00:06:34.533 --> 00:06:38.239
the writer whatever's in the template and
pass in the data and everything.

130
00:06:38.239 --> 00:06:40.339
So it kind of takes care
of all this stuff for you.

131
00:06:40.339 --> 00:06:43.854
And then I also usually like to do like a
new templates, I don't know why I like to

132
00:06:43.854 --> 00:06:47.127
do this kind of stuff and copilot too
is really good at auto completing it.

133
00:06:47.127 --> 00:06:51.218
Just create a new templates that ensures
that we are able to parse out the HTML.

134
00:06:51.218 --> 00:06:53.781
All of our HTML is in the views folder,

135
00:06:53.781 --> 00:06:56.837
so I have it in the views folder,
there we go.

136
00:06:56.837 --> 00:06:59.361
So if you're familiar with
a different way to produce views and

137
00:06:59.361 --> 00:07:02.503
to use a different server, again, you
can even use a different server and go,

138
00:07:02.503 --> 00:07:05.957
I don't really care, long as you can just
do your basic verb routing and everything.

139
00:07:05.957 --> 00:07:11.986
So I think we have everything we need at
this point to produce a delicious route.

140
00:07:11.986 --> 00:07:15.533
So I'm going to go down here, and
I'll leave this up for one more moment,

141
00:07:15.533 --> 00:07:16.974
let everyone try to catch up.

142
00:07:16.974 --> 00:07:20.451
If you're using co pilot it should,
if you have echo imported, and

143
00:07:20.451 --> 00:07:24.599
you just start typing templates pretty
much everything will be auto-completed

144
00:07:24.599 --> 00:07:28.206
because this pattern just exists
thousands of times on the internet.

145
00:07:28.206 --> 00:07:31.632
So it can pretty much recognize
it right off the rip, awesome.

146
00:07:31.632 --> 00:07:35.460
All right, so now all we're gonna
is I'm gonna set up a renderer, so

147
00:07:35.460 --> 00:07:39.024
I'm just gonna say, hey,
renderer here's a new template, so

148
00:07:39.024 --> 00:07:43.116
all a renderer needs to be has a renderer
function with that same arguments

149
00:07:43.116 --> 00:07:47.015
that I said above, a writer, a name,
data, and the context, boom.

150
00:07:47.015 --> 00:07:51.313
So now we can start using that renderer
really easily within the go routes

151
00:07:51.313 --> 00:07:52.731
going off the context.

152
00:07:52.731 --> 00:07:57.968
All right, so we're gonna do an e.GET and
I am going to pass in a function that

153
00:07:57.968 --> 00:08:03.308
takes a echo context, returns an error,
pretty much everything that I said.

154
00:08:03.308 --> 00:08:08.238
And now we just simply need
to render out the index.html.

155
00:08:08.238 --> 00:08:13.119
Now, if you remember, you may not
remember, but we expect an object that

156
00:08:13.119 --> 00:08:17.861
has a dot count property on it and
we're going to render that property.

157
00:08:17.861 --> 00:08:21.921
So I'm going to jump back here and
we need to create that struct, so

158
00:08:21.921 --> 00:08:25.921
I'm gonna go type Count struct
that has a Count int, fantastic.

159
00:08:25.921 --> 00:08:29.856
And then I'm gonna create
a count = Count Count 0,

160
00:08:29.856 --> 00:08:34.611
I think that's how you do these
specifications, there we go.

161
00:08:34.611 --> 00:08:36.376
Too many languages bounced
around in my head.

162
00:08:36.376 --> 00:08:40.824
So every single time count or
slash is requested I'm gonna

163
00:08:40.824 --> 00:08:46.012
increment the count and
then I'm gonna render the index template.

164
00:08:46.012 --> 00:08:49.714
Remember, I named all my blocks,
so this is the index block.

165
00:08:49.714 --> 00:08:51.699
I'm just going to render it out,
there we go.

166
00:08:51.699 --> 00:08:56.019
I want a 200, I want the name template and
here's the object I want to use for

167
00:08:56.019 --> 00:08:57.673
that template, fantastic.

168
00:08:57.673 --> 00:09:01.753
That's why we did all that work up above,
make this park kind of easy right here so

169
00:09:01.753 --> 00:09:03.859
everyone should be able to follow along.

170
00:09:03.859 --> 00:09:08.180
At the end of the day this is
the code we had to write, fantastic.

171
00:09:08.180 --> 00:09:12.303
And if we've done everything correctly,
which we have one more item which look at

172
00:09:12.303 --> 00:09:16.304
that copilot just knows, it just knows we
have to do this e Logger Fatal we have to

173
00:09:16.304 --> 00:09:20.247
actually listen now, so I'll go on
port 42069 and we'll go over here and

174
00:09:20.247 --> 00:09:24.292
do a little local host 42069,
you'll start it, site can't be reached.

175
00:09:24.292 --> 00:09:25.244
Why can't it be reached?

176
00:09:25.244 --> 00:09:26.516
You didn't actually start the program.

177
00:09:26.516 --> 00:09:27.748
You gotta start the program, okay?

178
00:09:27.748 --> 00:09:28.564
It's that simple.

179
00:09:28.564 --> 00:09:31.252
So in a second terminal, just type in air.

180
00:09:31.252 --> 00:09:35.883
Air has all the configuration for
this project to just watch.

181
00:09:35.883 --> 00:09:38.240
So if we change any files,
including HTML files,

182
00:09:38.240 --> 00:09:40.438
it will automatically
recompile our server.

183
00:09:40.438 --> 00:09:41.992
It's super fast,
this makes it really easy.

184
00:09:41.992 --> 00:09:45.778
You probably won't be able to get to the
browser in time from your editor before Go

185
00:09:45.778 --> 00:09:46.903
has already reloaded.

186
00:09:46.903 --> 00:09:49.251
Goes super fast,
it'll make this pretty easy.

187
00:09:49.251 --> 00:09:51.329
So when I refresh, it's count one.

188
00:09:51.329 --> 00:09:54.524
It's count two, it's count three, four,
five, six, seven, eight, nine, ten,

189
00:09:54.524 --> 00:09:56.057
all the way up to whatever number we want.

190
00:09:56.057 --> 00:09:57.830
There's all of our logs,
because we use the logger.

191
00:09:57.830 --> 00:10:02.846
So we may need to use this for debugging
at some point during this course.

192
00:10:02.846 --> 00:10:03.951
There we go, fantastic.

193
00:10:03.951 --> 00:10:09.315
Okay, so we've done it, we have built
step one, which is the counter.

194
00:10:09.315 --> 00:10:10.945
&gt;&gt; That command was just air?

195
00:10:10.945 --> 00:10:12.165
&gt;&gt; Air, yeah, A-I-R.

196
00:10:12.165 --> 00:10:16.730
So once you did that go install air,
it will make it publicly available.

197
00:10:16.730 --> 00:10:18.628
You may need to do a hash dash r or

198
00:10:18.628 --> 00:10:23.302
you may need to make sure that wherever
the go bin path is is within your path.

199
00:10:23.302 --> 00:10:26.231
So if you don't have air,
air is effectively node mon, yeah,

200
00:10:26.231 --> 00:10:27.574
that's a fair way to put it.

201
00:10:27.574 --> 00:10:30.615
Air is kind of or
maybe it's a little bit better to say air

202
00:10:30.615 --> 00:10:35.300
is more like Webpack dev serve, is having
everything, it's watching everything.

203
00:10:35.300 --> 00:10:38.568
The moment you make a change,
it's redoing, it's the vibe of Go.

204
00:10:38.568 --> 00:10:40.863
In case I forgot how to program,
here's all the things.

205
00:10:40.863 --> 00:10:44.531
Look, that's pretty much, I pretty much
program the exact same thing each time.

206
00:10:44.531 --> 00:10:45.752
All right, fantastic.

