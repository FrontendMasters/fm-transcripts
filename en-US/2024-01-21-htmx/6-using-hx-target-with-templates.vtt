WEBVTT

1
00:00:00.190 --> 00:00:02.800
Let's debug what happened and
then we're gonna fix the issue.

2
00:00:02.800 --> 00:00:06.030
So if we go back to here,
let's open up the Chrome DevTools.

3
00:00:06.030 --> 00:00:09.086
Okay, it'll make life easy
having these available.

4
00:00:09.086 --> 00:00:13.200
So let's just refresh this and
I'm gonna hit the word Count.

5
00:00:13.200 --> 00:00:16.351
And now let's look at
the response of Count, okay?

6
00:00:16.351 --> 00:00:18.231
Cuz we can see we made the request.

7
00:00:18.231 --> 00:00:22.337
The Headers look like we made
a post to localhost 42069/count.

8
00:00:22.337 --> 00:00:27.033
So we have the right path, we did get
a nice response, which is this right here.

9
00:00:27.033 --> 00:00:30.493
And if we look at the response HTML,
look at what we sent down.

10
00:00:30.493 --> 00:00:33.353
We sent down the entire document.

11
00:00:33.353 --> 00:00:35.453
Now, HTMX does a little bit of a trick.

12
00:00:35.453 --> 00:00:39.903
If it receives an entire document,
it will only select out the body content.

13
00:00:41.084 --> 00:00:44.507
It'll just kind of go, okay, obviously
you don't need these new headers,

14
00:00:44.507 --> 00:00:47.634
you don't need all this stuff,
you just need the body content.

15
00:00:47.634 --> 00:00:50.200
And so put the body content
into the requesting div,

16
00:00:50.200 --> 00:00:54.106
which is obvious what happened if you open
up the element and you look at button,

17
00:00:54.106 --> 00:00:58.974
you'll notice that button has the exact
same stuff that Count has right here.

18
00:00:58.974 --> 00:01:03.106
So oopsie daisy, we just sent down,
and we just put it into the button.

19
00:01:03.106 --> 00:01:06.305
So let's solve this,
it's actually a pretty simple solve.

20
00:01:06.305 --> 00:01:07.916
We need to set a target.

21
00:01:07.916 --> 00:01:10.186
So I'm gonna go like this, hx-target.

22
00:01:10.186 --> 00:01:14.790
So if you don't know what target is,
target allows you to specify which

23
00:01:14.790 --> 00:01:18.793
element should receive this
content after the AJAX request.

24
00:01:18.793 --> 00:01:25.896
You can use a CSS selector or a series
of basic supported JavaScript selectors.

25
00:01:25.896 --> 00:01:28.427
They're from,
you can read about them on MDN.

26
00:01:28.427 --> 00:01:32.227
So you can do find, next, previous,
this, closest, or a CSS selector.

27
00:01:32.227 --> 00:01:34.247
So I'm gonna go body.

28
00:01:34.247 --> 00:01:34.767
There we go.

29
00:01:34.767 --> 00:01:38.007
So just do whatever you're doing,
but attach it to the body.

30
00:01:38.007 --> 00:01:40.264
So if you're using Air,
it will automatically recompile,

31
00:01:40.264 --> 00:01:42.890
if you're not using Air,
you're gonna have to execute it yourself.

32
00:01:43.930 --> 00:01:47.351
And now look at that it just says here and
it just counts.

33
00:01:47.351 --> 00:01:51.693
But I mean, let's be real for
a second, is that great?

34
00:01:51.693 --> 00:01:55.078
Do we want to always be responding and
replacing the body,

35
00:01:55.078 --> 00:01:57.576
is that just how you
want to live your life?

36
00:01:57.576 --> 00:02:00.953
I've seen head shakes all over the place,
absolutely.

37
00:02:00.953 --> 00:02:05.933
So let's try to boil this down just
a touch more, how does that sound?

38
00:02:05.933 --> 00:02:08.203
Let's make it a little bit better,
all right.

39
00:02:08.203 --> 00:02:11.243
So I'm gonna jump back over to,
well, first off,

40
00:02:11.243 --> 00:02:13.733
you'll notice also the HTML is correct.

41
00:02:13.733 --> 00:02:16.133
So good thing to always double check.

42
00:02:16.133 --> 00:02:17.403
All right, HTML is correct.

43
00:02:17.403 --> 00:02:21.184
So let's go over here and
I'm gonna create a new block.

44
00:02:21.184 --> 00:02:24.355
Block, we'll call this thing, count.

45
00:02:27.222 --> 00:02:30.281
And I'm gonna go up here and
I'm just gonna take out the body and

46
00:02:30.281 --> 00:02:31.861
I'm gonna just post it in here.

47
00:02:31.861 --> 00:02:35.695
And then I'm gonna go back up and
I'm gonna go template count.

48
00:02:35.695 --> 00:02:36.362
So there we go.

49
00:02:36.362 --> 00:02:40.216
So I'm gonna just say, hey,
we want this small little bit.

50
00:02:40.216 --> 00:02:42.366
I don't need to send
down the entire response,

51
00:02:42.366 --> 00:02:46.176
I'm just gonna send down the things
that I think are worthy of change.

52
00:02:46.176 --> 00:02:47.710
Feels pretty good, right?

53
00:02:50.083 --> 00:02:51.704
I'll let everyone take a moment.

54
00:02:51.704 --> 00:02:55.296
I'm sure you guys can program
these templates pretty easily.

55
00:02:55.296 --> 00:02:56.885
They're fairly well understood.

56
00:02:56.885 --> 00:02:59.401
I assume no one has a question
about what this means.

57
00:02:59.401 --> 00:03:02.794
But in case you do render
template named count and

58
00:03:02.794 --> 00:03:05.617
pass in the object that was passed to me.

59
00:03:06.827 --> 00:03:08.867
Pretty straightforward, right?

60
00:03:08.867 --> 00:03:13.425
All right, and this block says, I'm
block count, and I accept an object, and

61
00:03:13.425 --> 00:03:15.697
I will now use that object right here.

62
00:03:15.697 --> 00:03:20.647
Okay, everyone gets it pretty
straightforward, easy peasy lemon squeezy.

63
00:03:20.647 --> 00:03:25.207
So now that we have that, let's jump
back over to our code and in our post,

64
00:03:25.207 --> 00:03:29.269
instead of rendering the index,
let's render just that count.

65
00:03:29.269 --> 00:03:32.447
So I'm gonna take the count,
I'm gonna replace index with count.

66
00:03:32.447 --> 00:03:34.737
So there we go, fantastic.

67
00:03:35.847 --> 00:03:39.210
So now if I were to run the server,
let's just refresh everything so

68
00:03:39.210 --> 00:03:42.020
we can see it's all in
the Into its original state.

69
00:03:42.020 --> 00:03:43.132
When I press this,

70
00:03:43.132 --> 00:03:47.788
we still get this beautiful updating, but
it is the entire body not as cool, but

71
00:03:47.788 --> 00:03:52.090
notice that the response now is
just this little bit, better?

72
00:03:52.090 --> 00:03:54.190
Yes, best?

73
00:03:54.190 --> 00:03:57.620
No, we can all agree this is not best,
it's just simply better.

74
00:03:57.620 --> 00:04:02.036
So we should probably try to
make it even better, okay?

75
00:04:02.036 --> 00:04:05.259
So I'm gonna go back here, let's just
make sure this is what I wanted to do.

76
00:04:05.259 --> 00:04:07.419
Okay, yeah,
I didn't wanna do it here, all right.

77
00:04:07.419 --> 00:04:10.339
So let's try rendering
something slightly different.

78
00:04:10.339 --> 00:04:13.592
Let's change how we do this so
called HTML.

79
00:04:13.592 --> 00:04:17.974
So what I'm gonna do here is I'm
gonna take the button out of here.

80
00:04:17.974 --> 00:04:22.101
I'm gonna put it right here and then
I'm gonna add a digit div and call id,

81
00:04:22.101 --> 00:04:24.043
how about this one count, right?

82
00:04:29.548 --> 00:04:35.410
Fantastic, and instead of targeting
the body, let's target count.

83
00:04:35.410 --> 00:04:39.902
So I'm just gonna use a CSS selector
again, to just simply say, hey,

84
00:04:39.902 --> 00:04:42.720
when you press this make a post request,
but

85
00:04:42.720 --> 00:04:46.242
I want you to target the div count for
the replacement.

86
00:04:47.562 --> 00:04:50.784
And now my count template
literally looks like this.

87
00:04:50.784 --> 00:04:52.122
It's nothing, right?

88
00:04:52.122 --> 00:04:53.742
It's absolutely nothing.

89
00:04:53.742 --> 00:04:57.500
But we're still gonna refer to it,
which means that when I go to the server,

90
00:04:57.500 --> 00:05:00.494
I'm still only rendering that,
but when I go to the client,

91
00:05:00.494 --> 00:05:03.274
I'm only gonna be replacing
this small amount of text.

92
00:05:03.274 --> 00:05:06.595
So it is now as minimally
defined as possible.

93
00:05:06.595 --> 00:05:09.301
Second thing I'd like to
highlight right here,

94
00:05:09.301 --> 00:05:14.445
is the entirety of the behavior of this,
is within eyeshot of four lines of code.

95
00:05:14.445 --> 00:05:17.455
So often they refer to this
as locality of behavior.

96
00:05:17.455 --> 00:05:22.009
You can kind of understand what's
happening in its entirety by just looking

97
00:05:22.009 --> 00:05:24.438
at a few lines of very declarative code.

98
00:05:24.438 --> 00:05:27.838
So HTMX tends to be a very declarative
driver of your application.

99
00:05:27.838 --> 00:05:32.056
Now, there are some imperative
procedural parts of HTMX, but for

100
00:05:32.056 --> 00:05:34.933
the most part it's very declarative style.

101
00:05:34.933 --> 00:05:39.966
So, now I'm gonna go back here, we'll now
press Count and we'll still increment when

102
00:05:39.966 --> 00:05:44.882
we look at our Element, you'll notice that
it beautifully just counts right there.

103
00:05:44.882 --> 00:05:48.033
We're no longer replacing body,
and when you look at the Network,

104
00:05:48.033 --> 00:05:50.149
we're just replacing it with the string 5.

105
00:05:50.149 --> 00:05:52.387
Now, we could even make it smaller.

106
00:05:52.387 --> 00:05:56.737
We could even just make it so it only
transfers down just that singular byte.

107
00:05:56.737 --> 00:06:01.141
But I hate to let you people down, if
you're transferring less than 1500 bytes,

108
00:06:01.141 --> 00:06:02.620
it's all the same, right?

109
00:06:02.620 --> 00:06:05.554
That's called the TCP packet.

110
00:06:05.554 --> 00:06:09.164
That's the MTU,
the maximum transmission unit.

111
00:06:09.164 --> 00:06:13.704
So, whether you're transferring one byte
or 1499, it's pretty much all the same.

112
00:06:13.704 --> 00:06:15.630
So you're not making any
more W's at this point.

113
00:06:15.630 --> 00:06:18.174
So now that we did that,
absolutely fantastic.

114
00:06:18.174 --> 00:06:20.414
Hopefully everyone kind of
kept up with that idea.

115
00:06:20.414 --> 00:06:23.992
You can kinda see how we started
targeting HTMX to make updates within

116
00:06:23.992 --> 00:06:24.987
the application.

