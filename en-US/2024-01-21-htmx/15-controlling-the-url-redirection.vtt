WEBVTT

1
00:00:00.330 --> 00:00:04.120
There's a couple more things
I want to just talk about.

2
00:00:04.120 --> 00:00:05.760
First off, practice makes perfect.

3
00:00:05.760 --> 00:00:09.530
You kinda gotta know and use these for a
little bit and you'll discover new items.

4
00:00:09.530 --> 00:00:11.493
I made this really stupid example here for

5
00:00:11.493 --> 00:00:14.872
a quick second that is just like this
really nice little, look at that.

6
00:00:14.872 --> 00:00:18.190
And I used v.0, so look how pretty
that is, I didn't design any of that.

7
00:00:18.190 --> 00:00:20.045
And when you click it,
it does all that nice stuff.

8
00:00:20.045 --> 00:00:23.959
We did this all today, went over here made
sure that you can't have a valid email.

9
00:00:23.959 --> 00:00:26.178
And when you hit subscribe
it disables the button for

10
00:00:26.178 --> 00:00:28.699
a little bit of time while
the the request is happening, and

11
00:00:28.699 --> 00:00:31.388
then gives you that nice little air,
that's nice and pretty.

12
00:00:31.388 --> 00:00:33.358
It feels pretty, it looks pretty.

13
00:00:33.358 --> 00:00:37.053
And I did that all with v.0 plus
a little bit of htmx, so pretty easy.

14
00:00:37.053 --> 00:00:41.101
We could do in between swaps as well as we
have these nice transition between scenes,

15
00:00:41.101 --> 00:00:43.307
just didn't do any of that stuff.

16
00:00:43.307 --> 00:00:47.279
And we're gonna go over a couple examples
from the book to kinda show more of

17
00:00:47.279 --> 00:00:49.997
the engineering aspect of HTMX.

18
00:00:49.997 --> 00:00:53.677
Okay, there's a lot more examples in here,
go check them out.

19
00:00:53.677 --> 00:00:57.787
First off, current URL can be controlled
by HTMX, which is really great.

20
00:00:57.787 --> 00:01:01.792
So as we make transitions through our app,
if you wish to update the URL,

21
00:01:01.792 --> 00:01:03.122
you can do that.

22
00:01:03.122 --> 00:01:04.352
You can choose how you want it.

23
00:01:04.352 --> 00:01:06.462
You can say, hey, don't update the URL.

24
00:01:06.462 --> 00:01:10.147
So when we do a body swap, you don't
want to update the URL, then hey,

25
00:01:10.147 --> 00:01:13.342
don't update the URL, so
we can do all those kind of things.

26
00:01:13.342 --> 00:01:16.392
So let's say we want to
create a contacts page.

27
00:01:16.392 --> 00:01:19.211
So when you clicked on a contact
it actually went to a page with

28
00:01:19.211 --> 00:01:20.997
all the information.

29
00:01:20.997 --> 00:01:23.527
But we also wanted to be able
to delete from the page.

30
00:01:23.527 --> 00:01:26.127
Our current delete endpoint
wouldn't work that way, right?

31
00:01:26.127 --> 00:01:31.517
It will send down no contact or
no content, what would happen?

32
00:01:31.517 --> 00:01:33.267
Well, the button would disappear.

33
00:01:33.267 --> 00:01:35.417
You wouldn't know that
the contact has been deleted.

34
00:01:35.417 --> 00:01:37.427
We just wouldn't have an experience there.

35
00:01:37.427 --> 00:01:38.757
So what should happen?

36
00:01:38.757 --> 00:01:41.071
Well, first we can create
a very simple delete button.

37
00:01:41.071 --> 00:01:44.817
Which is a nice little indicator,
we can push the URL.

38
00:01:44.817 --> 00:01:48.957
So when we do a change with the button,
it will actually save that change and

39
00:01:48.957 --> 00:01:50.777
update our URL.

40
00:01:50.777 --> 00:01:54.537
We can target the body if we want to, but
again, we're just sending down no content.

41
00:01:54.537 --> 00:01:57.177
So it'd be kind of weird,
we just make the page go blank.

42
00:01:57.177 --> 00:01:59.357
So what we can do is we can
actually do a couple things.

43
00:01:59.357 --> 00:02:03.778
So first off we can always disable
the button during the request.

44
00:02:03.778 --> 00:02:07.817
Here's a simple JavaScript function that I
have that you can just attach the window

45
00:02:07.817 --> 00:02:09.398
called disableButton.

46
00:02:09.398 --> 00:02:12.995
You pass any button that you create into
it, and it will automatically listen to

47
00:02:12.995 --> 00:02:15.968
the request and disable it during
the lifetime of a request.

48
00:02:15.968 --> 00:02:17.408
Pretty simple to make right?

49
00:02:17.408 --> 00:02:21.757
Not only that, but how do we do the Delete
on the contacts page, how would that work?

50
00:02:21.757 --> 00:02:24.087
Well, you have to understand a 303.

51
00:02:24.087 --> 00:02:27.299
And so first, what you're probably
thinking is that if you were

52
00:02:27.299 --> 00:02:30.510
to delete on a contact page,
you would press the delete button,

53
00:02:30.510 --> 00:02:33.177
it would go to the server,
it would do a delete.

54
00:02:33.177 --> 00:02:36.905
And if you're in a modern front-end world,
you'd need to tell your client,

55
00:02:36.905 --> 00:02:39.400
your front end to do
a navigation to a separate page.

56
00:02:39.400 --> 00:02:43.008
And make sure that the data is up to date
and rehydrate your data and make sure

57
00:02:43.008 --> 00:02:46.927
that your local cache matches your server
in more of this kind of like HTMX world.

58
00:02:46.927 --> 00:02:49.404
You do the standard which is to
actually do a delete to the server,

59
00:02:49.404 --> 00:02:50.763
the server responds with a 302.

60
00:02:50.763 --> 00:02:55.452
But if you do a 302, a 302 redirect
carries forward the verb and so

61
00:02:55.452 --> 00:03:00.241
that would cause you to call delete
on slash, so that wouldn't be good.

62
00:03:00.241 --> 00:03:05.313
What you would wanna do is a 303 view
a 303, it won't care for the verb instead,

63
00:03:05.313 --> 00:03:09.343
it'll do a get on the slash or
on whatever kind of 303 next thing.

64
00:03:09.343 --> 00:03:13.787
Like we said earlier,
if we push the URL and do the Delete,

65
00:03:13.787 --> 00:03:16.616
we'll get the indicator to show up.

66
00:03:16.616 --> 00:03:20.495
We'll disable the button when the risk
response happens and it does a 303,

67
00:03:20.495 --> 00:03:23.372
our URL will be updated to make
sure it's now at slash, and

68
00:03:23.372 --> 00:03:26.778
we will have that context deleted and
everything we've done.

69
00:03:26.778 --> 00:03:30.539
And so another thing I'd like to kinda
de confuse if you're doing inline or

70
00:03:30.539 --> 00:03:34.118
not inline, you can just literally
add a redirect tool, right?

71
00:03:34.118 --> 00:03:37.363
You can kinda go back to the old days
where you don't have to come up with

72
00:03:37.363 --> 00:03:40.006
super generalized solutions for
every single problem,

73
00:03:40.006 --> 00:03:42.836
just come up with the solution for
the problem at hand.

74
00:03:42.836 --> 00:03:45.896
This would make the whole
thing just simply work, right?

75
00:03:45.896 --> 00:03:48.146
So I like that you can make it a link and
do a boost.

76
00:03:48.146 --> 00:03:50.296
There's all sorts of different
kinds of tricks you can do.

77
00:03:50.296 --> 00:03:53.796
I actually really like that approach.

78
00:03:53.796 --> 00:03:55.596
I feel like it's very engineering, right?

79
00:03:55.596 --> 00:03:58.511
I know how to set up a problem to
do that for any type of content and

80
00:03:58.511 --> 00:04:02.321
it's very simple to follow the logical
steps throughout your application.

81
00:04:02.321 --> 00:04:04.536
All right, next problem,
you have too many contacts, right?

82
00:04:04.536 --> 00:04:07.830
This would definitely happen to the point
where you couldn't just send down a page

83
00:04:07.830 --> 00:04:08.851
full of contacts.

84
00:04:08.851 --> 00:04:11.601
It would absolutely just
destroy your experience.

85
00:04:11.601 --> 00:04:16.199
So there are nonstandard events in HTMX
trigger, which include load, reveal, and

86
00:04:16.199 --> 00:04:16.921
intercept.

87
00:04:16.921 --> 00:04:20.365
If you're doing some CSS fancy magic,
you Intersect allows for

88
00:04:20.365 --> 00:04:22.230
a scroll y scroll x kind of offset.

89
00:04:22.230 --> 00:04:27.226
Whereas reveal simply has if an element
is visible onto the viewport,

90
00:04:27.226 --> 00:04:29.525
I want you to trigger an action.

91
00:04:29.525 --> 00:04:32.565
And so it's kind of a cool way
to be able to load content more.

92
00:04:32.565 --> 00:04:35.203
Kinda when you're on Twitter and
you're scrolling down.

93
00:04:35.203 --> 00:04:39.553
I want to add in a final element that's
like, hey, when I show up, do something.

94
00:04:39.553 --> 00:04:41.263
You could also be pretty
clever about that.

95
00:04:41.263 --> 00:04:45.192
You could put that element maybe further
into the list and then do two updates.

96
00:04:45.192 --> 00:04:47.318
A no content update to delete that thing,

97
00:04:47.318 --> 00:04:50.232
plus an out of bands update to
add more things to the list so

98
00:04:50.232 --> 00:04:54.463
that way you can trigger a request
earlier before the content all runs out.

99
00:04:54.463 --> 00:04:57.512
A lot of little strategies here, but
I made a little program called blocks,

100
00:04:57.512 --> 00:04:58.283
remember blocks?

101
00:04:58.283 --> 00:05:00.645
We talked about it about blocks earlier
at the very beginning of the course.

102
00:05:00.645 --> 00:05:03.055
I can kinda show you what that looks like.

103
00:05:03.055 --> 00:05:04.455
Here we go, very, very simple.

104
00:05:04.455 --> 00:05:07.105
We have our template right here
that does infinite scrolling.

105
00:05:07.105 --> 00:05:11.280
And all blocks does is it will simply make
a block with the ID that was added to

106
00:05:11.280 --> 00:05:12.305
the block.

107
00:05:12.305 --> 00:05:16.257
And if there are more to reveal,
then I'll do a trigger on reveal,

108
00:05:16.257 --> 00:05:18.666
swap the outer HTML of this div element.

109
00:05:18.666 --> 00:05:22.295
So meaning what comes back from the
server, this div will be replaced with,

110
00:05:22.295 --> 00:05:25.366
and I already have effectively
the cursor right here.

111
00:05:25.366 --> 00:05:27.896
Blocks start equals
the next place to start at.

112
00:05:27.896 --> 00:05:31.922
So I can generate the URL I need to
continue to go through my list of

113
00:05:31.922 --> 00:05:33.376
whatever it is.

114
00:05:33.376 --> 00:05:38.141
And that would look something
like command that's Cmake,

115
00:05:38.141 --> 00:05:41.065
don't [SOUND] Let's not do any of that.

116
00:05:41.065 --> 00:05:42.966
That's just the worst
stuff in the universe.

117
00:05:42.966 --> 00:05:46.926
All right, so if we did that,
we go to, did I do it at 68?

118
00:05:46.926 --> 00:05:48.055
What did I do it at?

119
00:05:48.055 --> 00:05:51.556
Yeah, I did it at 69 slash blocks.

120
00:05:51.556 --> 00:05:55.255
So if we look at the network, we'll see
that it made two requests right off

121
00:05:55.255 --> 00:05:58.966
the rip because when this page landed,
10 was already in the viewport.

122
00:05:58.966 --> 00:06:02.185
That little thing was revealed so
then it added the next 10 and

123
00:06:02.185 --> 00:06:06.072
then that thing was still in the view
port and made that third request.

124
00:06:06.072 --> 00:06:08.762
And as I scroll down,
it's gonna just start making requests,

125
00:06:08.762 --> 00:06:10.962
making it feel like there's
more content coming.

126
00:06:10.962 --> 00:06:12.522
You could do an HTMX Indicator.

127
00:06:12.522 --> 00:06:14.546
You could have little
spinner at the bottom so

128
00:06:14.546 --> 00:06:16.722
that way you know more content's coming.

129
00:06:16.722 --> 00:06:18.302
There's all sorts of
interactions you can do.

130
00:06:18.302 --> 00:06:22.069
And this is a relatively unfun
thing to program, generally,

131
00:06:22.069 --> 00:06:25.990
which has been made relatively simple,
especially for a tool.

132
00:06:25.990 --> 00:06:29.548
Like, how many times have you used a
stupid build tool where you just wanna see

133
00:06:29.548 --> 00:06:32.580
more things and, like,
that process just totally sucks.

134
00:06:32.580 --> 00:06:33.980
It just doesn't have to suck, right?

135
00:06:33.980 --> 00:06:35.220
It just, it really doesn't have to suck.

136
00:06:35.220 --> 00:06:39.564
You can make pretty simple servers to
manage to do all this stuff, very simple.

137
00:06:40.954 --> 00:06:44.901
So contacts are the exact same thing,
add a reveal more at the end, scroll down,

138
00:06:44.901 --> 00:06:46.074
what about filtering?

139
00:06:46.074 --> 00:06:48.323
Well, filtering is the same
problem as the previous one.

140
00:06:48.323 --> 00:06:52.220
Besides for the very simple case where you
have ten items, you don't need to make

141
00:06:52.220 --> 00:06:56.024
a server request, and I'm sure you could
add some fancy JavaScript for this.

142
00:06:56.024 --> 00:06:58.590
But in general, you have many items.

143
00:06:58.590 --> 00:07:01.590
And so when you start filtering,
you have to make a server request.

144
00:07:01.590 --> 00:07:05.650
Because you have to filter your 10,000
items down to some small match that you

145
00:07:05.650 --> 00:07:09.368
can display on the screen, and then also
add an active reveal if you need to.

146
00:07:09.368 --> 00:07:11.348
And so this is called active search.

147
00:07:11.348 --> 00:07:13.638
And here's a very simple
example of an active search.

148
00:07:13.638 --> 00:07:17.155
You have a form that you can
submit to search for contacts.

149
00:07:17.155 --> 00:07:21.203
But while you're typing, the input
field is actually making requests and

150
00:07:21.203 --> 00:07:23.018
updating the element below.

151
00:07:23.018 --> 00:07:26.878
So id search, you can fill it in with
the previous value if you want to.

152
00:07:26.878 --> 00:07:29.886
So in case you already have a search
going and the page refreshes,

153
00:07:29.886 --> 00:07:31.728
you maintain all the same stuff.

154
00:07:31.728 --> 00:07:34.568
So you have a trigger on key up delay for
200 milliseconds.

155
00:07:34.568 --> 00:07:37.628
In other words throttling and
if the contents been changed,

156
00:07:37.628 --> 00:07:39.388
make a request to the server.

157
00:07:39.388 --> 00:07:41.980
You add some cached headers,
add some sort of list to it,

158
00:07:41.980 --> 00:07:43.278
add some sort of key values.

159
00:07:43.278 --> 00:07:46.713
So if the contacts haven't changed,
you can just use cached values from

160
00:07:46.713 --> 00:07:50.838
within your actual like browser cache,
all sorts of good ways to do stuff here.

161
00:07:50.838 --> 00:07:54.028
And it's just a very simple
method to do active searching.

162
00:07:54.028 --> 00:07:57.259
And so again,
kind of engineering in a way.

163
00:07:57.259 --> 00:07:59.544
So I want you to feel that.

164
00:07:59.544 --> 00:08:04.189
Its whole goal is to return to more of
what feels like a computer science-y or

165
00:08:04.189 --> 00:08:07.334
a very engineering way
to approach problems.

166
00:08:07.334 --> 00:08:09.904
It doesn't feel like how
do you want to solve this?

167
00:08:09.904 --> 00:08:11.564
What ways can you envision?

168
00:08:11.564 --> 00:08:12.544
Do you want to write your own?

169
00:08:12.544 --> 00:08:13.584
Do we wanna use redux?

170
00:08:13.584 --> 00:08:15.344
What can we explore?

171
00:08:15.344 --> 00:08:18.222
It's like no, there's actually a really
defined way to do these things that's

172
00:08:18.222 --> 00:08:19.464
existed for a long time.

173
00:08:19.464 --> 00:08:22.687
Let's just don't to do step-by-step
procedures for everything because anyone

174
00:08:22.687 --> 00:08:25.854
can memorize these 10 patterns and
be pretty successful at building tools.

175
00:08:25.854 --> 00:08:29.021
You're probably asking yourself how
many URLs can be represented or

176
00:08:29.021 --> 00:08:31.964
how many states can be represented
by URLs and HTTP codes.

177
00:08:31.964 --> 00:08:32.944
Well, quite a bit.

178
00:08:32.944 --> 00:08:36.274
You can do quite a bit
of things with HTMX.

179
00:08:36.274 --> 00:08:39.416
Here's some obvious examples that
you would never use HTMX for, maps,

180
00:08:39.416 --> 00:08:40.712
it wouldn't make any sense.

181
00:08:40.712 --> 00:08:44.692
The Chrome could totally be HTML,
but maps itself.

182
00:08:44.692 --> 00:08:46.182
You obviously need that spreadsheet.

183
00:08:46.182 --> 00:08:51.382
Why would you ever do Compute Side
stuff instead of client side stuff?

184
00:08:51.382 --> 00:08:54.155
Conway's game of life,
the actual game can be played, but

185
00:08:54.155 --> 00:08:57.760
if you wish to have something that can
save states of Conway's game of life and

186
00:08:57.760 --> 00:08:59.808
all that, you could use HTML to actually.

187
00:08:59.808 --> 00:09:02.059
Trigger all those events and
do all the saving and loading and

188
00:09:02.059 --> 00:09:04.518
giving you a list of different
games you've played before.

189
00:09:04.518 --> 00:09:07.709
I actually built this once just to kind of
test it out to see if I can do a really

190
00:09:07.709 --> 00:09:11.413
nice rich client-side experience where you
have a game where you can select different

191
00:09:11.413 --> 00:09:14.378
items and draw your own Conway's life and
then play Conway's life.

