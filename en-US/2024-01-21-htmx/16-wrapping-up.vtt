WEBVTT

1
00:00:00.210 --> 00:00:02.279
Hopefully you like, subscribe,
do all those things on Twitch.

2
00:00:02.279 --> 00:00:05.287
And there you go, that's really
the entirety of the HTMX course.

3
00:00:05.287 --> 00:00:09.389
Hopefully that was not too much of a brief
introduction, but enough to show you that

4
00:00:09.389 --> 00:00:13.040
there's quite a bit of things you
can do with such a simple library.

5
00:00:13.040 --> 00:00:18.468
And again, the entire non-GZIP
size of HTMX is like 40k.

6
00:00:18.468 --> 00:00:20.104
Its GZIP size is, I think,

7
00:00:20.104 --> 00:00:25.024
12k I've been to websites recently that
all it was was a simple marketing page.

8
00:00:25.024 --> 00:00:27.486
And it's GZIP size was 370k.

9
00:00:27.486 --> 00:00:30.056
And its actual size was two megabytes.

10
00:00:30.056 --> 00:00:33.726
Two megabytes of JavaScript did show
some colored squares plus a buy button.

11
00:00:33.726 --> 00:00:37.415
Kind of wild to think about maybe,
just maybe we've jumped the shark here,

12
00:00:37.415 --> 00:00:42.006
just saying, maybe we should consider
something different for the simple things.

13
00:00:42.006 --> 00:00:43.180
&gt;&gt; If I put a delay in for

14
00:00:43.180 --> 00:00:48.096
the response, does it delay the server's
response to other users on the site?

15
00:00:48.096 --> 00:00:50.948
I'm guessing no, but
I'd like to know for sure.

16
00:00:50.948 --> 00:00:54.056
&gt;&gt; You're talking about in
HTMX the delay or in Go?

17
00:00:54.056 --> 00:00:55.072
Because obviously the Go one,

18
00:00:55.072 --> 00:00:57.036
that's an endpoint,
we just put it in intentional sleep.

19
00:00:57.036 --> 00:00:59.606
You'd never sleep in
an endpoint intentionally.

20
00:00:59.606 --> 00:01:01.652
I mean,
I have no idea why you would do that.

21
00:01:01.652 --> 00:01:02.952
If you're sleeping in an endpoint and

22
00:01:02.952 --> 00:01:05.802
there's an intention to it, you're
doing something kind of wild, right?

23
00:01:05.802 --> 00:01:08.282
You're doing something that
may be misdesigned there.

24
00:01:08.282 --> 00:01:11.302
But if you're doing it on the client side,
yeah, it has no effect, right?

25
00:01:11.302 --> 00:01:12.752
That's just your standard server client.

26
00:01:14.442 --> 00:01:16.271
&gt;&gt; I've also been-
&gt;&gt; Okay, to be real though,

27
00:01:16.271 --> 00:01:19.838
you could put in some small sleeps, maybe
some millisecond sleeps here and there.

28
00:01:19.838 --> 00:01:23.268
Then when your boss is like, we need
to make things faster, what do you do?

29
00:01:23.268 --> 00:01:25.788
Start removing some of those sleeps,
you know what I'm talking about?

30
00:01:25.788 --> 00:01:28.718
Improving endpoint performance, all right?

31
00:01:28.718 --> 00:01:31.578
Christmas is around the corner,
people plan for it.

32
00:01:33.518 --> 00:01:36.590
&gt;&gt; I've also been told to reduce
round trips to the server, and

33
00:01:36.590 --> 00:01:38.828
this seems to increase those.

34
00:01:38.828 --> 00:01:40.483
Does that slow the site down at all?

35
00:01:40.483 --> 00:01:42.266
&gt;&gt; It could and it couldn't.

36
00:01:42.266 --> 00:01:47.196
I don't know if I buy that as an argument
yet, in the sense that you get to choose

37
00:01:47.196 --> 00:01:51.680
how much data you first frontload as
a server as you send down stuff, and

38
00:01:51.680 --> 00:01:55.973
then you choose how much interaction or
what interaction it takes.

39
00:01:55.973 --> 00:02:01.334
If you rendered a website that had friends
that you had to go click on, right?

40
00:02:01.334 --> 00:02:04.371
You could put all that stuff first
on the page, but if you went and

41
00:02:04.371 --> 00:02:08.253
hovered over a friend to see a pop-up, do
you think that they transferred all that

42
00:02:08.253 --> 00:02:10.984
data down before you ever
put your mouse over that?

43
00:02:10.984 --> 00:02:11.864
Probably not.

44
00:02:11.864 --> 00:02:13.004
How much do you want to bet?

45
00:02:13.004 --> 00:02:14.614
They're requesting that information.

46
00:02:14.614 --> 00:02:17.167
Now, as long as you
have nice HTTP caching,

47
00:02:17.167 --> 00:02:21.864
you have some acceptance of potentially
stale data, how you wish to model that?

48
00:02:21.864 --> 00:02:23.889
You could always cash
it at a browser level,

49
00:02:23.889 --> 00:02:26.978
a lot of these requests long as you
use the right verbs and all that.

50
00:02:26.978 --> 00:02:31.264
So there are ways you can do things
that make sense to make it fast.

51
00:02:31.264 --> 00:02:33.964
This is just one way and
I'm not saying this solves all problems.

52
00:02:33.964 --> 00:02:39.580
Maybe you want to use your own JavaScript
requesting/library/rendering to do this.

53
00:02:39.580 --> 00:02:41.440
And there are some cases
where it makes sense.

54
00:02:41.440 --> 00:02:44.508
I can think of something Dax recently
built, if you don't know who Dax is,

55
00:02:44.508 --> 00:02:45.520
he's on Twitter.

56
00:02:45.520 --> 00:02:47.520
He has the spiciest takes of all time.

57
00:02:47.520 --> 00:02:50.710
And he built this thing that's super,
super fast, super smooth feeling.

58
00:02:50.710 --> 00:02:54.160
And it's all about viewing and
introspecting data logs from your server.

59
00:02:54.160 --> 00:02:57.020
To me, that seems like, yeah, you're
gonna want to really think about your

60
00:02:57.020 --> 00:02:59.880
caching for that one, cuz you really
don't want to just be hitting servers,

61
00:02:59.880 --> 00:03:01.565
scrubbing logs causing
a bunch of transfer.

62
00:03:01.565 --> 00:03:03.955
You don't want to be interrupting
production and all that.

63
00:03:03.955 --> 00:03:06.485
And you want it to be really,
really nice and highly cached.

64
00:03:06.485 --> 00:03:08.695
Yeah, I could see you
wanting to do it then.

65
00:03:08.695 --> 00:03:09.835
Do you have to?

66
00:03:09.835 --> 00:03:12.954
I mean, maybe you don't,
maybe you want to cache it at a browser,

67
00:03:12.954 --> 00:03:14.355
get level and that's fine.

68
00:03:14.355 --> 00:03:17.595
And then you can do all of
your filtering at that level.

69
00:03:17.595 --> 00:03:19.406
It's just one way to do things.

70
00:03:20.877 --> 00:03:23.697
&gt;&gt; Does it make sense to mix HTML and
React?

71
00:03:23.697 --> 00:03:26.207
&gt;&gt; People mixed HTML and
Reacts, I've seen it done.

72
00:03:27.387 --> 00:03:31.821
In fact, the Bethe stack, which is that
one that I mentioned earlier is bun,

73
00:03:31.821 --> 00:03:33.335
elixir, torso and HTML.

74
00:03:33.335 --> 00:03:37.656
What they don't say is they're using
react as the server side template engine.

75
00:03:37.656 --> 00:03:42.137
So they're still using react just
only on the server, so interesting.

76
00:03:43.907 --> 00:03:46.727
We call it a React cocktail, okay?

77
00:03:46.727 --> 00:03:50.996
And then there's one on the client side
that did this cool like eventing and

78
00:03:50.996 --> 00:03:52.027
stuff like that.

79
00:03:52.027 --> 00:03:55.960
&gt;&gt; Can we get some more examples of
projects that would not be favorable

80
00:03:55.960 --> 00:03:57.407
for HTMX?

81
00:03:57.407 --> 00:04:03.496
&gt;&gt; Anytime I mean, you could always
shoehorn in some amount of HTML.

82
00:04:03.496 --> 00:04:06.050
So you can always argue why
you shouldn't use HTML.

83
00:04:06.050 --> 00:04:11.154
Anytime that I see something that is
highly client interactive, and what I mean

84
00:04:11.154 --> 00:04:16.475
by highly client interactive, I don't
mean a bunch of squares on the screen.

85
00:04:16.475 --> 00:04:18.190
So if you went to twitter.com,

86
00:04:18.190 --> 00:04:20.994
a lot of this is a bunch of
squares on screen, right?

87
00:04:22.159 --> 00:04:23.178
Look at that, htmx org guy, right?

88
00:04:23.178 --> 00:04:25.643
There saying something who
knows what he's even saying?

89
00:04:25.643 --> 00:04:28.142
But anyways, a lot of this is
a bunch of squares on screen,

90
00:04:28.142 --> 00:04:30.294
how much of this needs to
be dynamically updated?

91
00:04:30.294 --> 00:04:32.154
Well, we have a little
notification right here.

92
00:04:32.154 --> 00:04:34.101
If you can stream in out of band updates,

93
00:04:34.101 --> 00:04:36.634
you kind of already
have that thing solved.

94
00:04:36.634 --> 00:04:39.112
And so, it's like how much
do you need Interactivity.

95
00:04:39.112 --> 00:04:41.734
If I can drag and drop and
move a bunch of stuff around and

96
00:04:41.734 --> 00:04:45.622
create really customized views, maybe
that part should definitely not be HMX.

97
00:04:45.622 --> 00:04:47.172
You shouldn't try to make that HMX.

98
00:04:47.172 --> 00:04:48.692
It'd be crazy to try to make that HTMX.

99
00:04:48.692 --> 00:04:52.580
I don't even think it's possible, you'd
want a Javascript side experience here,

100
00:04:52.580 --> 00:04:54.203
and that would make way more sense.

101
00:04:54.203 --> 00:04:57.747
&gt;&gt; There was a question about how you
would get in your autocomplete with

102
00:04:57.747 --> 00:04:58.994
HTMX, the LSP?

103
00:04:58.994 --> 00:05:02.133
&gt;&gt; How's it going the autocomplete
made an I made an LSP,

104
00:05:02.133 --> 00:05:04.152
it's pretty straightforward.

105
00:05:04.152 --> 00:05:11.306
GitHub, sorry I have it at 4k and
I never have it at 4k.

106
00:05:11.306 --> 00:05:14.263
HTMX LSP, it pretty much works.

107
00:05:14.263 --> 00:05:17.052
Couple of people have been contributing
to it really made it awesome.

108
00:05:17.052 --> 00:05:18.342
There's still like a bug or two.

109
00:05:19.573 --> 00:05:23.506
It's in cargo, so you can cargo install
HTMX LSP, but I don't have it, so

110
00:05:23.506 --> 00:05:25.293
it's hooked up with Mason.

111
00:05:25.293 --> 00:05:28.373
And I believe there is
a VS Code client right here.

112
00:05:28.373 --> 00:05:31.633
I'm not exactly sure how well it
integrates with the VS Code client.

113
00:05:31.633 --> 00:05:33.810
It might be in the readme
somewhere down here.

114
00:05:33.810 --> 00:05:35.195
VS Code, no official support.

115
00:05:35.195 --> 00:05:36.443
Emacs, no official supports.

116
00:05:36.443 --> 00:05:37.173
There you go.

117
00:05:37.173 --> 00:05:40.228
So, I'm just kinda honestly,
I'm just waiting for somebody to say, Hey,

118
00:05:40.228 --> 00:05:42.544
we got it in Mason, and
I'll be like, hey, there you go.

119
00:05:42.544 --> 00:05:46.229
You can install it now with Neo Vim,
and then if someone wants to do it for

120
00:05:46.229 --> 00:05:48.644
whatever it takes to do in VS code,
go do it.

121
00:05:48.644 --> 00:05:51.864
I'll be potentially building
an LSP here soon again for work.

122
00:05:51.864 --> 00:05:54.174
So I'll probably learn all
about the VS code side.

123
00:05:54.174 --> 00:05:57.534
So if it's not done by then
I'll just do it for this.

124
00:05:57.534 --> 00:06:02.230
&gt;&gt; This is a little related to the React
question earlier, but do you have any

125
00:06:02.230 --> 00:06:07.155
thoughts on a JavaScript framework that
is a good match with HTMX in general,

126
00:06:07.155 --> 00:06:08.629
like Solid or Svelte?

127
00:06:08.629 --> 00:06:11.247
&gt;&gt; I don't know how Svelte will do, but

128
00:06:11.247 --> 00:06:15.637
I would just assume if you're
already using a big framework,

129
00:06:15.637 --> 00:06:20.464
you should just use the one you know
best or the one you want to learn.

130
00:06:20.464 --> 00:06:23.656
Right, I don't think there's
a lot of dictation required.

131
00:06:23.656 --> 00:06:26.965
You can use Leptos and Rust if you
really want to you can use Camel and

132
00:06:26.965 --> 00:06:29.677
dream if you want to write
you got a lot of options.

133
00:06:29.677 --> 00:06:33.347
It's not something that dictates, right?

134
00:06:33.347 --> 00:06:35.267
It's something that is trying
to be like the opposite of it.

135
00:06:35.267 --> 00:06:38.596
It's having as little opinions about
how you do anything as possible.

136
00:06:40.316 --> 00:06:42.876
&gt;&gt; Is there a way to preserve
state without a form submission?

137
00:06:42.876 --> 00:06:47.386
The example, I'm thinking is
a tabbed view with multiple steps.

138
00:06:47.386 --> 00:06:50.191
I want the user to be able
to go through the wizard and

139
00:06:50.191 --> 00:06:54.040
then have the previous steps data
persist when they go to the next tab or

140
00:06:54.040 --> 00:06:58.431
another component, but not Submit anything
until the final step is finished.

141
00:06:58.431 --> 00:07:00.675
&gt;&gt; Yeah, you're gonna need to have
a bit of JavaScript for that one.

142
00:07:00.675 --> 00:07:03.714
That's gonna have to be some
level of JavaScript going on.

143
00:07:03.714 --> 00:07:08.364
I've never tried to build that one in
HTML, so I don't know how much that is.

144
00:07:08.364 --> 00:07:12.585
But to me, that sounds like, yeah,
you're kind of breaking into potentially,

145
00:07:12.585 --> 00:07:15.888
I mean, the problem about that
entire thing is that it's hard to

146
00:07:15.888 --> 00:07:17.494
represent that state as a URL.

147
00:07:17.494 --> 00:07:20.727
You have this whole problem
where you're really representing

148
00:07:20.727 --> 00:07:23.594
a single piece of content
into three separate windows,

149
00:07:23.594 --> 00:07:27.730
or four separate windows, or
however many are in the sign-up wizard.

150
00:07:27.730 --> 00:07:29.480
And so that's difficult.

151
00:07:29.480 --> 00:07:32.130
You can use cookies,
you could use local storage.

152
00:07:32.130 --> 00:07:35.530
You could do a bunch of stuff to
be able to recall from wherever.

153
00:07:35.530 --> 00:07:37.002
So is it impossible?

154
00:07:37.002 --> 00:07:38.306
Absolutely not.

155
00:07:38.306 --> 00:07:38.876
Is it hard?

156
00:07:38.876 --> 00:07:40.026
Probably not.

157
00:07:40.026 --> 00:07:45.014
I just have never tried so I don't, I've
never tried to do it with local storage or

158
00:07:45.014 --> 00:07:45.966
cookies, so.

159
00:07:47.206 --> 00:07:47.816
Sure you can, though.

160
00:07:50.486 --> 00:07:53.623
&gt;&gt; I'd do something like hidden input
fields, like a fake form kind of thing.

161
00:07:53.623 --> 00:07:54.309
&gt;&gt; Say that again?

162
00:07:54.309 --> 00:07:57.464
&gt;&gt; Hidden input fields, you can have
a form on the page with a bunch of hidden

163
00:07:57.464 --> 00:07:59.621
input fields that can't keep state.

164
00:07:59.621 --> 00:08:00.521
&gt;&gt; Yeah, you could do it.

165
00:08:00.521 --> 00:08:02.971
Yeah, input fields would be really
easy to kinda make that happen.

166
00:08:05.041 --> 00:08:08.431
&gt;&gt; Is there a reason you weren't
using VEM syntax in your CSS?

167
00:08:10.031 --> 00:08:10.732
&gt;&gt; Using which syntax?

168
00:08:10.732 --> 00:08:12.486
&gt;&gt; BEM.

169
00:08:12.486 --> 00:08:13.604
&gt;&gt; I don't know what BEM is.

170
00:08:13.604 --> 00:08:16.406
&gt;&gt; That's that block object modifier.

171
00:08:16.406 --> 00:08:17.650
I think, something that's not
in the code someone's trolling.

172
00:08:17.650 --> 00:08:19.021
&gt;&gt; I don't do CSS, okay?

173
00:08:19.021 --> 00:08:20.612
So we've already talked about this.

174
00:08:20.612 --> 00:08:22.844
I call it a Google first language.

175
00:08:22.844 --> 00:08:28.692
Well, now I guess it's a ChatGPT first
language, or a V0 first language, okay?

176
00:08:31.752 --> 00:08:33.522
Don't test me on that, okay?

177
00:08:33.522 --> 00:08:34.302
I don't know them.

178
00:08:34.302 --> 00:08:37.419
I did a flex list without looking it up.

179
00:08:37.419 --> 00:08:38.792
And I did it in both two
different directions.

180
00:08:38.792 --> 00:08:43.159
I already feel like I
have 95% weight there.

181
00:08:43.159 --> 00:08:44.739
Appreciate this time.

182
00:08:44.739 --> 00:08:45.709
It was fantastic.

