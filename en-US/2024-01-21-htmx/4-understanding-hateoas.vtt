WEBVTT

1
00:00:00.110 --> 00:00:01.975
So first thing is HATEOAS.

2
00:00:01.975 --> 00:00:05.110
You've probably seen this term,
heard this term, it stands for

3
00:00:05.110 --> 00:00:07.450
Hypermedia As The Engine
Of Application State.

4
00:00:07.450 --> 00:00:12.304
Meaning the state of your HTML is the
state of your program and that is how we

5
00:00:12.304 --> 00:00:17.100
drive the changes, further on down
the line is what is currently there.

6
00:00:17.100 --> 00:00:19.536
In the modern world, we don't do that.

7
00:00:19.536 --> 00:00:23.857
What we do in the modern world is that
we have the virtual DOM usually contains

8
00:00:23.857 --> 00:00:25.422
the state of your program.

9
00:00:25.422 --> 00:00:28.577
Then you have a secondary state,
which is all the closures and

10
00:00:28.577 --> 00:00:31.125
things within your JavaScript,
the use states,

11
00:00:31.125 --> 00:00:34.297
all the little bits that are going
to update that virtual DOM.

12
00:00:34.297 --> 00:00:35.746
That's your second layer of state.

13
00:00:35.746 --> 00:00:37.421
Then typically if you're more enterprise,

14
00:00:37.421 --> 00:00:39.634
you'll have a third layer state
which is your Redux state.

15
00:00:39.634 --> 00:00:44.102
Which is controlling your routes, it could
be controlling how you're getting data,

16
00:00:44.102 --> 00:00:45.020
async reducers,

17
00:00:45.020 --> 00:00:48.644
selectors all that fun stuff to just
simply drive the engine of state.

18
00:00:48.644 --> 00:00:53.021
And so, in the HTMX world,
we try to make it simple.

19
00:00:53.021 --> 00:00:57.928
The hypermedia, the HTML,
that's the engine of application state,

20
00:00:57.928 --> 00:01:01.301
not all the other things,
all the other layers.

21
00:01:01.301 --> 00:01:05.020
It's your server is the truth, your
client is the reflection of the truth,

22
00:01:05.020 --> 00:01:06.657
and there's little in between.

23
00:01:06.657 --> 00:01:07.797
Now you can go as much as you want.

24
00:01:07.797 --> 00:01:12.237
I've seen projects where they use HTMX for
all the chrome and all the stuff around

25
00:01:12.237 --> 00:01:16.952
the application, and they use React inside
of it to drive all the user interactions.

26
00:01:16.952 --> 00:01:21.422
Totally reasonable, you can emit events
from within a React application and

27
00:01:21.422 --> 00:01:25.064
have HTMX actually run on the outside and
do all the updating and

28
00:01:25.064 --> 00:01:27.694
executing on the outside, so totally okay.

29
00:01:27.694 --> 00:01:31.228
Does that mean HTML is finally
a programming language?

30
00:01:31.228 --> 00:01:33.333
Yes, does that mean you're
finally an HTML engineer?

31
00:01:33.333 --> 00:01:36.309
Absolutely, what a great day to be alive,
finally.

32
00:01:36.309 --> 00:01:42.871
Also, this is a 2011 nice little document,
which you should read.

33
00:01:42.871 --> 00:01:46.882
This is by the current
community manager of Rust, and

34
00:01:46.882 --> 00:01:52.868
he has a whole talk about how to do
HATEOAS and all this stuff, even in 2011.

35
00:01:52.868 --> 00:01:57.271
So this is a fairly, again, this concept
has been around for quite some time,

36
00:01:57.271 --> 00:01:58.817
this is not something new.

37
00:01:58.817 --> 00:02:03.995
It just feels new because some unhinged
Montana man has now made it popular.

38
00:02:03.995 --> 00:02:06.435
And that by the way,
I'm not the unhinged Montana man.

39
00:02:06.435 --> 00:02:08.034
All right, so let's do this.

40
00:02:08.034 --> 00:02:12.149
Hopefully I have the exact link,
yes, I do.

41
00:02:12.149 --> 00:02:13.186
Fantastic.

42
00:02:13.186 --> 00:02:17.026
So typically this is kind of like
your standard server interaction,

43
00:02:17.026 --> 00:02:20.333
I do a GET at the root and
the server responds with some HTML,

44
00:02:20.333 --> 00:02:24.899
that has links off to JavaScript, maybe
it's not a server that actually does it,

45
00:02:24.899 --> 00:02:27.442
maybe it's like a CDN
in front of the server.

46
00:02:27.442 --> 00:02:31.773
Whatever happens, something happens and
you get HTML back, right?

47
00:02:31.773 --> 00:02:36.932
And so typically we're gonna be doing
something like this with a HTMX.

48
00:02:36.932 --> 00:02:39.979
Any element may have some sort of hx-VERB.

49
00:02:39.979 --> 00:02:42.031
That VERB will have a path,

50
00:02:42.031 --> 00:02:46.861
we will make a VERB request to that path,
it will hit the server.

51
00:02:46.861 --> 00:02:49.953
The server's expectation
is to respond with HTML.

52
00:02:49.953 --> 00:02:55.683
The contents of the HTML will replace
the inner HTML of the element

53
00:02:55.683 --> 00:03:02.260
that initiated the request and
that is only if it responds with the 200.

54
00:03:02.260 --> 00:03:04.798
So if you respond with the 400 or
500 or whatever,

55
00:03:04.798 --> 00:03:07.180
you now have to define some
sort of custom behavior.

56
00:03:07.180 --> 00:03:11.636
HTMX just says no, we're not gonna
do anything in the 400 to 500s.

57
00:03:11.636 --> 00:03:15.171
So, that means if we had
a div that posted to foo,

58
00:03:15.171 --> 00:03:18.795
and it had the contents of
four green squares, and

59
00:03:18.795 --> 00:03:23.456
the server responds with two blue squares,
the final state will

60
00:03:23.456 --> 00:03:28.313
look something like this,
the div will now have two blue squares.

61
00:03:28.313 --> 00:03:30.021
HTMX does emit a lot of events, so

62
00:03:30.021 --> 00:03:33.441
you can hook in with JavaScript if
you want to add custom behavior.

63
00:03:33.441 --> 00:03:36.048
It can react on a lot of different things,
including custom events.

64
00:03:36.048 --> 00:03:38.328
It has ways to reduce
HTML from the request, so

65
00:03:38.328 --> 00:03:42.535
you don't actually get the entire request,
you can just select out parts you want and

66
00:03:42.535 --> 00:03:46.231
it also has ways to redirect to the HTML
to other parts of your application.

67
00:03:46.231 --> 00:03:49.337
So this is all a part of it and
you can even redirect from the server or

68
00:03:49.337 --> 00:03:50.960
you can redirect from the client.

69
00:03:50.960 --> 00:03:55.670
You can make the choice yourself
depending on where and how you do it.

70
00:03:55.670 --> 00:03:57.260
All right, so pretty fantastic.

71
00:03:57.260 --> 00:03:59.564
Hopefully everyone's like that's it,

72
00:03:59.564 --> 00:04:02.403
I just taught you pretty
much all of HTMX right now.

73
00:04:02.403 --> 00:04:05.327
So we're gonna kind of go through some
exercises and put this into practice.

74
00:04:05.327 --> 00:04:08.295
I just really want you to
see this image right here.

75
00:04:08.295 --> 00:04:12.052
This is, I think,
is the best image to understand HTMX.

76
00:04:12.052 --> 00:04:15.357
Starts with some green squares
inside of it, you make a request,

77
00:04:15.357 --> 00:04:19.761
server responds with blue squares, now you
have blue squares inside of that same div.

78
00:04:19.761 --> 00:04:22.343
The div was not removed,
the insides were removed.

79
00:04:22.343 --> 00:04:26.250
All right, so that probably
explains what happened here, right?

80
00:04:26.250 --> 00:04:31.416
I think we can start guessing as to why
our button has a button inside of it.

