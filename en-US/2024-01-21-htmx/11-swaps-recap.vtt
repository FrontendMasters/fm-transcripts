WEBVTT

1
00:00:00.350 --> 00:00:03.985
So let's look at the HTML and
ensure that this is correct.

2
00:00:03.985 --> 00:00:06.453
I actually have no idea if this
is going to be correct or not.

3
00:00:06.453 --> 00:00:09.471
I put this in here because there
should have been an error, but

4
00:00:09.471 --> 00:00:11.620
I may have actually programmed it correct,

5
00:00:11.620 --> 00:00:14.073
I'm thinking I know I
programmed it by accident.

6
00:00:14.073 --> 00:00:14.883
All right, so let's see.

7
00:00:14.883 --> 00:00:16.454
What do we got here?

8
00:00:16.454 --> 00:00:20.141
Well, okay, I mean, that is all correct.

9
00:00:20.141 --> 00:00:21.617
Our form is all correct.

10
00:00:21.617 --> 00:00:25.412
So I think what I was supposed to do is I
supposed to forget to do the old HX swap

11
00:00:25.412 --> 00:00:29.598
on the outer, and then we'd start having
forms embedding themselves within it.

12
00:00:29.598 --> 00:00:32.585
It creates no actual problem,
it's just inside,

13
00:00:32.585 --> 00:00:35.508
I just I don't want potential problems,
right?

14
00:00:35.508 --> 00:00:40.902
I don't want the occasion for a problem,
so I goofed up there and now look at us.

15
00:00:40.902 --> 00:00:42.802
Just disappoint.

16
00:00:42.802 --> 00:00:47.745
All right, so
I actually programmed something correct.

17
00:00:47.745 --> 00:00:49.611
I knew it was going to happen,
I just knew for

18
00:00:49.611 --> 00:00:52.596
a fact I'd do it correctly when I
wasn't supposed to do it correctly.

19
00:00:52.596 --> 00:00:56.749
All right, there's all our code,
lot of code here, lot of stuff.

20
00:00:56.749 --> 00:00:58.460
By the way,
I threw this in here at the end.

21
00:00:58.460 --> 00:01:01.663
Sometimes when I'm testing I'll just
throw a little test block in here,

22
00:01:01.663 --> 00:01:03.946
I'll highlight it red,
put it like a big red block.

23
00:01:03.946 --> 00:01:07.741
So I can kind of see where things are
going, if I want to just test like when

24
00:01:07.741 --> 00:01:10.432
I was just learning I found
this to be super useful.

25
00:01:10.432 --> 00:01:14.060
So I'd highly recommend that also
another kind of super useful thing.

26
00:01:14.060 --> 00:01:18.473
If you're just kind of new and you're
trying to discover what is going on in

27
00:01:18.473 --> 00:01:22.887
HTMX, what available stuff it has I
suggest turning on HTMX.logall, and

28
00:01:22.887 --> 00:01:26.040
when you execute that,
when we add another contact,

29
00:01:26.040 --> 00:01:29.496
you'll see that it does a whole
bunch of stuff right here.

30
00:01:29.496 --> 00:01:33.287
It has, let's go all the way up to
the tippy top, we have the trigger,

31
00:01:33.287 --> 00:01:34.395
what triggered it.

32
00:01:34.395 --> 00:01:35.089
We can listen to that.

33
00:01:35.089 --> 00:01:38.080
So we can listen to the trigger
that started some HTMX event.

34
00:01:38.080 --> 00:01:39.713
We can listen to a confirmed case.

35
00:01:39.713 --> 00:01:44.541
We can say validation case on
a validation case on this one.

36
00:01:44.541 --> 00:01:49.130
We can add in a config request,
validate URL before request, before send,

37
00:01:49.130 --> 00:01:53.954
then it does all the XHR stuff, and then
afterwards we have a before swap event.

38
00:01:53.954 --> 00:01:56.618
Notice that we actually
used the before swap event.

39
00:01:56.618 --> 00:02:00.069
If you go back to right here, that's
where we did this whole DOM listener.

40
00:02:00.069 --> 00:02:03.855
Before we swap in the content, let's make
sure that we can respond to error codes in

41
00:02:03.855 --> 00:02:05.656
a way we want to respond to error codes.

42
00:02:05.656 --> 00:02:08.473
And so, there is quite a bit of stuff
that you can actually respond to.

43
00:02:08.473 --> 00:02:11.605
And including every single element
that got cleaned up also goes

44
00:02:11.605 --> 00:02:13.520
through this before clean up element.

45
00:02:13.520 --> 00:02:15.572
So you can actually really go in there,
and

46
00:02:15.572 --> 00:02:19.676
you can really be quite expressive
with what you would like to do.

47
00:02:19.676 --> 00:02:20.768
You just don't have to.

48
00:02:20.768 --> 00:02:22.566
If you don't want to, that's fine.

49
00:02:22.566 --> 00:02:26.239
There's also after swap, after request,
after load, after settle,

50
00:02:26.239 --> 00:02:29.011
meaning that everything has
been replaced on the DOM,

51
00:02:29.011 --> 00:02:32.708
there's no more delays, all the throttles
or everything are all done.

52
00:02:32.708 --> 00:02:34.900
Here you go,
we're in a new finish state, so

53
00:02:34.900 --> 00:02:37.104
then you can do something
else at that point.

54
00:02:37.104 --> 00:02:39.899
You can add a set time-out and
then close your module.

55
00:02:39.899 --> 00:02:42.920
I'm not a big fan of module or modalities,
however you want to pronounce it.

56
00:02:42.920 --> 00:02:46.726
I think that's like a North coast
versus West coast pronunciation issue.

57
00:02:46.726 --> 00:02:49.463
North Coast being Montana,
greatest state in the union.

58
00:02:49.463 --> 00:02:50.406
All right.

59
00:02:50.406 --> 00:02:51.976
&gt;&gt; Question from the chat,

60
00:02:51.976 --> 00:02:55.652
is Echo handling the HTML
serialization with c.render.

61
00:02:55.652 --> 00:02:59.397
&gt;&gt; Okay, so is Echo handling
the HTML serialization with render?

62
00:02:59.397 --> 00:03:04.100
So I'm not super familiar with Echo, but
effectively what is happening when you do

63
00:03:04.100 --> 00:03:07.472
a dot render,
it calls your renderer's render function.

64
00:03:07.472 --> 00:03:11.388
So remember at the very beginning of the
class, we have this function right here,

65
00:03:11.388 --> 00:03:11.970
renderer.

66
00:03:11.970 --> 00:03:15.551
And so
it will call that function with a name,

67
00:03:15.551 --> 00:03:20.182
a data, a context, and
then where to write that value to.

68
00:03:20.182 --> 00:03:23.809
And so that way when we execute
the template, it produces a string, but

69
00:03:23.809 --> 00:03:27.377
that string instead of just returning
you the string of the template,

70
00:03:27.377 --> 00:03:29.811
instead it writes that
string into the writer.

71
00:03:29.811 --> 00:03:31.749
The writer is supposed to be a nice,
efficient way so

72
00:03:31.749 --> 00:03:33.959
you don't have to have nearly
as much memory allocations.

73
00:03:33.959 --> 00:03:35.671
Maybe it has a nice large buffer.

74
00:03:35.671 --> 00:03:40.337
There might be a way to pre-configure how
much underlying starting memory a writer

75
00:03:40.337 --> 00:03:43.536
starts with I have no idea,
but that would be fantastic so

76
00:03:43.536 --> 00:03:47.955
that way you know you could have some
nice some delicious efficiencies there.

77
00:03:47.955 --> 00:03:51.729
But when you call render notice
that we do a pass in a string and

78
00:03:51.729 --> 00:03:56.391
we pass in some data, if we go back up to
the top, notice that we get a name and

79
00:03:56.391 --> 00:03:59.129
we get a piece of data that is if for
those that

80
00:03:59.129 --> 00:04:03.948
are the go uninitiated interface squirly
is effectively any in TypeScript.

81
00:04:03.948 --> 00:04:06.660
It's not any, but
you can imagine it's any.

82
00:04:06.660 --> 00:04:09.586
Easiest way to put it,
it just says, hey, it's a type.

83
00:04:09.586 --> 00:04:12.835
I don't know, go figure it out yourself.

84
00:04:12.835 --> 00:04:13.439
So there you go.

85
00:04:15.309 --> 00:04:17.120
So yeah,
that's all that happens right there.

86
00:04:17.120 --> 00:04:21.162
I don't really understand exactly
what happens underneath the hood, but

87
00:04:21.162 --> 00:04:22.710
I know most of that happens.

88
00:04:22.710 --> 00:04:25.151
You can use any now but okay, so for
those that are talking about gov,

89
00:04:25.151 --> 00:04:27.064
that any is completely
different than a TypeScript?

90
00:04:27.064 --> 00:04:28.226
Any, okay.

91
00:04:28.226 --> 00:04:32.829
It's not even the same, it's more
like a template t than it is in any,

92
00:04:32.829 --> 00:04:34.638
that's just ridiculous.

93
00:04:34.638 --> 00:04:35.758
Don't be ridiculous.

94
00:04:35.758 --> 00:04:37.461
All right, let's get back to HTMX.

