WEBVTT

1
00:00:00.130 --> 00:00:01.752
All right, so before we go on though,

2
00:00:01.752 --> 00:00:05.210
let's go over a couple common
arguments you will hear against HTMX.

3
00:00:05.210 --> 00:00:08.320
Aren't servers supposed
to respond with JSON?

4
00:00:08.320 --> 00:00:10.050
What if I need a different view?

5
00:00:10.050 --> 00:00:12.644
Why would my server ever want to
understand the representation of

6
00:00:12.644 --> 00:00:13.560
the client?

7
00:00:13.560 --> 00:00:17.236
Well, even before I go to part one, your
server does understand the representation

8
00:00:17.236 --> 00:00:19.462
of your client because it
is responding with JSON,

9
00:00:19.462 --> 00:00:23.314
it already has some understanding of how
you are communicating between the two.

10
00:00:23.314 --> 00:00:26.290
You've agreed upon names of keys,
you've agreed upon types of values,

11
00:00:26.290 --> 00:00:29.754
you've already made a lot of
agreements that are implicitly there.

12
00:00:29.754 --> 00:00:31.834
Second, you can use accept headers.

13
00:00:31.834 --> 00:00:34.058
I accept HTML or I accept JSON, and

14
00:00:34.058 --> 00:00:39.273
your server can be the one that has all
the smarts to say, this is a request for

15
00:00:39.273 --> 00:00:43.919
data in the format of JSON,
here is the JSON view of the same data.

16
00:00:43.919 --> 00:00:48.567
You are requesting HTML,
here's the HTML view for that same data.

17
00:00:48.567 --> 00:00:52.244
So, don't sleep on headers,
headers have a lot of control.

18
00:00:52.244 --> 00:00:54.263
A second important thing about state,

19
00:00:54.263 --> 00:00:57.871
right now the current approach is this,
the server knows the state and

20
00:00:57.871 --> 00:01:01.197
produces a view into it,
JSON being the most popular transfer.

21
00:01:01.197 --> 00:01:05.135
The view is then transferred across the
turtles after being created into a set of

22
00:01:05.135 --> 00:01:05.972
zeros and ones.

23
00:01:05.972 --> 00:01:09.905
The client decodes those zeros and ones
and turns it into some sort of object or

24
00:01:09.905 --> 00:01:12.825
representation it can understand,
usually JSON pars.

25
00:01:12.825 --> 00:01:17.182
It then reconciles the JavaScript state,
and then it produces HTML from that

26
00:01:17.182 --> 00:01:21.516
reconciliation to be updated
somewhere within the application.

27
00:01:21.516 --> 00:01:23.976
So, I mean, there's a lot of
things that can go wrong there.

28
00:01:23.976 --> 00:01:27.306
HTMX is more that your server
produces a view, HTML.

29
00:01:27.306 --> 00:01:30.596
The view is transferred across
the turtles via some sort of encoding.

30
00:01:30.596 --> 00:01:33.536
Usually strings are already ones and
zeros, so it's pretty easy to do.

31
00:01:33.536 --> 00:01:37.507
The view is then decoded and turned into
HTML and placed according to the rules on

32
00:01:37.507 --> 00:01:40.824
the originating element or
the server overrides.

33
00:01:40.824 --> 00:01:44.159
I said this is a slight lie,
that's because I just mentioned right now,

34
00:01:44.159 --> 00:01:47.464
the server can override a couple things,
all right, you get that.

35
00:01:47.464 --> 00:01:49.674
Isn't producing HTML slow?

36
00:01:49.674 --> 00:01:51.544
No, it's not slow.

37
00:01:51.544 --> 00:01:52.294
What is slower?

38
00:01:52.294 --> 00:01:56.184
Crawling an object in which you are
discovering all the keys, concating all

39
00:01:56.184 --> 00:02:00.501
the strings, going through every single
value and slowly crawling everything, or

40
00:02:00.501 --> 00:02:04.495
is just doing string interpolation
with rope strings slower, faster.

41
00:02:04.495 --> 00:02:08.092
I don't think you're going to see,
if anything, I think you'll see probably

42
00:02:08.092 --> 00:02:10.955
a better performance with HTML
than you will with Jason.

43
00:02:10.955 --> 00:02:16.561
I can't 100% confirm this, it's just that
I've never tested everything fully myself,

44
00:02:16.561 --> 00:02:19.728
but at the end of the day,
producing JSON is not fast.

45
00:02:19.728 --> 00:02:24.779
There was an Intel paper in 2012 or
13 that claimed that

46
00:02:24.779 --> 00:02:31.278
over 60% of all server time is
spent copying data, and that is it.

47
00:02:31.278 --> 00:02:33.239
And if you think about what JSON does,

48
00:02:33.239 --> 00:02:38.434
it is literally the ultimate copying of
data from one format into another format.

49
00:02:38.434 --> 00:02:40.935
All right, seems like HTMX is for
back-end divs,

50
00:02:40.935 --> 00:02:43.504
no serious UI/UX engineer would use HTMX,
right?

51
00:02:43.504 --> 00:02:49.634
I mean, I made a nice little
pretty application with it.

52
00:02:49.634 --> 00:02:53.828
I mean, there is no indication into
whether the client is interactive or

53
00:02:53.828 --> 00:02:55.904
not interactive with JavaScript.

54
00:02:55.904 --> 00:02:59.345
There is no indication into how
much styles you do or don't use,

55
00:02:59.345 --> 00:03:01.727
it's up to the person who implements it.

56
00:03:01.727 --> 00:03:03.147
So, can someone use it?

57
00:03:03.147 --> 00:03:04.417
Absolutely, do you have to use it?

58
00:03:04.417 --> 00:03:07.787
You don't have to, you can write a web
1.0 styled website if you want to, or

59
00:03:07.787 --> 00:03:09.947
you can make it really pretty.

60
00:03:09.947 --> 00:03:12.917
Just don't go web three, once you go
web three, if you've jumped the shark,

61
00:03:12.917 --> 00:03:16.047
now you have a whole different
website you're creating.

62
00:03:16.047 --> 00:03:19.676
And so one more time, just in case
you forget, if we make this element,

63
00:03:19.676 --> 00:03:24.047
HTMX will bind an onclick handler
because the default action is a click.

64
00:03:24.047 --> 00:03:26.009
We can override what the action is, but

65
00:03:26.009 --> 00:03:28.537
the default is an onclick
handler on the div.

66
00:03:28.537 --> 00:03:31.527
When the div gets clicked,
it sends a get request to some resource.

67
00:03:31.527 --> 00:03:35.312
When the server responds, the contents of
the div will be swapped out with whatever

68
00:03:35.312 --> 00:03:37.027
the server responds with.

69
00:03:37.027 --> 00:03:39.366
With HTMX,
aren't you going against your own advice,

70
00:03:39.366 --> 00:03:42.140
making statements about
performance without testing?

71
00:03:42.140 --> 00:03:45.760
With the HTML production,
that's why I said I don't know.

72
00:03:45.760 --> 00:03:48.509
I just know that adding
strings together in a rope

73
00:03:48.509 --> 00:03:50.730
data structure is exceedingly cheap.

74
00:03:52.280 --> 00:03:55.254
Crawling an object and
all of its properties in a dynamic or

75
00:03:55.254 --> 00:03:57.790
reflection-based way is expensive.

76
00:03:57.790 --> 00:04:02.856
That's just long standing intuition,
probably plays a pretty good role here.

77
00:04:02.856 --> 00:04:06.176
I would still test it though,
I would always test it.

78
00:04:06.176 --> 00:04:09.921
Never just assume you're right
on how things are performance,

79
00:04:09.921 --> 00:04:13.396
based because almost always you're wrong.

80
00:04:13.396 --> 00:04:15.644
Typically, your gut dev or

81
00:04:15.644 --> 00:04:20.643
your gut feel is usually wrong
when it comes to performance.

82
00:04:20.643 --> 00:04:23.253
Just always test,
always measure, very simple.

83
00:04:23.253 --> 00:04:26.243
What Node.js templating
engine do you recommend?

84
00:04:27.903 --> 00:04:32.273
I am not really a big fan of Node.js for
server stuff.

85
00:04:32.273 --> 00:04:35.053
If I were to use one,
I have no strong feelings.

86
00:04:35.053 --> 00:04:37.620
I mean, there's plenty of little
templating libraries I've played around

87
00:04:37.620 --> 00:04:38.737
with, they've all been fun.

88
00:04:38.737 --> 00:04:44.097
I've in general not enjoyed
using React like or JSX.

89
00:04:44.097 --> 00:04:47.137
I should probably say
JSX styled templating.

90
00:04:47.137 --> 00:04:52.517
I find that I tend to over complicate
it with a bunch of logic piece I can.

91
00:04:52.517 --> 00:04:57.443
Once you have that available path,
I tend to take that available path, and

92
00:04:57.443 --> 00:05:00.386
then I find that I'm very upset about JSX.

93
00:05:00.386 --> 00:05:04.186
So, it's not a React problem,
it's definitely a JSX problem.

94
00:05:04.186 --> 00:05:09.166
Yeah, people really like a Bun, Elysian
and HTMX and React and Turso, right?

95
00:05:09.166 --> 00:05:13.056
The BETH stack, right, that's Bun,
Elysian, Turso and HTMX.

96
00:05:13.056 --> 00:05:15.436
People really like that stack,
that's by Ethan.

97
00:05:15.436 --> 00:05:16.856
A super cool stack.

98
00:05:16.856 --> 00:05:20.340
How is HTMX lighter on
resources than React?

99
00:05:20.340 --> 00:05:23.966
So, now we're talking about
dynamic fetching of data and

100
00:05:23.966 --> 00:05:27.000
all that stuff,
I would love to talk about that.

101
00:05:27.000 --> 00:05:31.780
I think DAX, if you know who DAX is,
and I will be having a podcast on this.

102
00:05:31.780 --> 00:05:36.219
I've spent a lot of time thinking about
JavaScript data fetching and how to do it

103
00:05:36.219 --> 00:05:40.789
optimally, how to have components to find
their own data that they need, and to be

104
00:05:40.789 --> 00:05:45.257
able to aggregate that into something
that can like batch and dedupe requests.

105
00:05:45.257 --> 00:05:48.233
Request duplication is very,
very difficult to do.

106
00:05:48.233 --> 00:05:51.905
We have a full working thing that
we used to have at Netflix and

107
00:05:51.905 --> 00:05:53.921
we're moving over to a GraphQL.

108
00:05:53.921 --> 00:05:58.845
But it's a very complicated process and
it's 100% not a soft process, and

109
00:05:58.845 --> 00:06:01.649
I don't think it is
actually a soft process.

110
00:06:01.649 --> 00:06:06.336
I would like to talk about that more, but
I think that it's gonna be a different

111
00:06:06.336 --> 00:06:09.479
thing, because that's
a whole realm onto itself.

