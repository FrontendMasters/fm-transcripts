WEBVTT

1
00:00:00.910 --> 00:00:06.757
So the next one, if we pull this back out,
is useImperativeHandle Example.

2
00:00:06.757 --> 00:00:13.413
I'm going to venture and say you will
never use this, let's do it [LAUGH].

3
00:00:13.413 --> 00:00:16.435
This is for libraries, I'm showing
you something that is really just for

4
00:00:16.435 --> 00:00:18.871
libraries that are building
something on top of React, for

5
00:00:18.871 --> 00:00:20.254
something like Formik, right?

6
00:00:20.254 --> 00:00:23.519
I haven't looked at what Formik
does underneath the hood, but

7
00:00:23.519 --> 00:00:27.660
I would very likely think that they would
use ImperativeHandle underneath it.

8
00:00:28.900 --> 00:00:32.914
So, I do not blame you if you
don't go through this thoroughly.

9
00:00:32.914 --> 00:00:35.586
It's good to know that there's
something like this exists, but

10
00:00:35.586 --> 00:00:37.300
you don't really need learn it in depth.

11
00:00:39.110 --> 00:00:41.194
So let's talk through the use
case really quick here,

12
00:00:41.194 --> 00:00:43.970
I have this useImperativeHandle
Example right here.

13
00:00:43.970 --> 00:00:47.690
And I have a city and state here, right?

14
00:00:48.700 --> 00:00:51.268
Let's say that I have some form
that I wanna validate that

15
00:00:51.268 --> 00:00:53.045
everything works correctly, right?

16
00:00:53.045 --> 00:00:57.716
So I have in here Seattle, and let's say
the person forgot to put in the state.

17
00:00:57.716 --> 00:01:03.650
And I wanna highlight this in red if
the person didn't do it correctly, right?

18
00:01:03.650 --> 00:01:06.860
Pretty normal stuff, right?

19
00:01:06.860 --> 00:01:08.256
There's other ways you can do this, but

20
00:01:08.256 --> 00:01:10.323
I'm gonna show you how to do
it with useImperativeHandle.

21
00:01:13.061 --> 00:01:16.120
So we're gonna have two things here,
one's called forwardRef,

22
00:01:16.120 --> 00:01:19.340
which you have to use with
the useImperativeHandle.

23
00:01:19.340 --> 00:01:22.170
And we have this function here
called useImperativeHandle.

24
00:01:22.170 --> 00:01:26.500
So let's start here with our
ImperativeHandleComponent here.

25
00:01:27.690 --> 00:01:31.815
You can think of this like
elaborate input function,

26
00:01:31.815 --> 00:01:34.940
as like a piece of library code, right?

27
00:01:34.940 --> 00:01:38.637
This would be something like maybe
your design system teams might make.

28
00:01:38.637 --> 00:01:41.780
It might be something that an open
source library that you might be using.

29
00:01:41.780 --> 00:01:46.341
But typically, you, developer working on
an app, you are not going to be writing

30
00:01:46.341 --> 00:01:51.121
something like elaborate input yourself,
you're going to be consuming it, okay?

31
00:01:51.121 --> 00:01:53.883
So we're writing this form, right?

32
00:01:53.883 --> 00:01:56.220
And we have an ImperativeHandle
component here.

33
00:01:56.220 --> 00:02:01.460
It's got a state, it's got a city,
and it has an error state as well.

34
00:02:03.130 --> 00:02:06.304
So here with city element and
state element,

35
00:02:06.304 --> 00:02:10.741
what this library might ask you to do,
is you can see down here.

36
00:02:10.741 --> 00:02:17.184
We're passing a ref into the elaborate
input here and here, right?

37
00:02:20.167 --> 00:02:21.793
Okay, this becomes important,

38
00:02:21.793 --> 00:02:24.763
because later we write this
function here called validate.

39
00:02:24.763 --> 00:02:29.385
Which again, I just directly
stole this from Stack Overflow,

40
00:02:29.385 --> 00:02:34.710
barely modified it at all, so
normal programming kind of stuff, okay?

41
00:02:36.330 --> 00:02:39.590
So if this doesn't work,
blame Stack Overflow, don't blame me.

42
00:02:39.590 --> 00:02:43.396
Okay, so this just does a check to
see is the city a valid city, right?

43
00:02:43.396 --> 00:02:46.240
And is the state a valid state.

44
00:02:46.240 --> 00:02:52.420
And then here, if this matches, which
means there's an error in the city, right?

45
00:02:52.420 --> 00:02:54.526
But I do as I said,
there's an error on city, so

46
00:02:54.526 --> 00:02:56.600
setError("city") right there, right?

47
00:02:57.820 --> 00:03:04.825
And then here, I call a function on the
current here so that it focuses, right?

48
00:03:04.825 --> 00:03:06.880
So this becomes important here, right?

49
00:03:06.880 --> 00:03:10.590
Because if someone's writing
something here, and they say,

50
00:03:10.590 --> 00:03:14.790
let's just refresh the page,
stay on page, we can refresh it up here.

51
00:03:17.809 --> 00:03:21.613
Down here, if the user has a problem here,

52
00:03:21.613 --> 00:03:25.530
I want the focus to go on that input,
right?

53
00:03:26.710 --> 00:03:29.918
So if I hit Delete here,
notice I'm not focused on it, but

54
00:03:29.918 --> 00:03:35.490
if I click Validate Form, now I'm focused
again here, that's what I want to happen.

55
00:03:35.490 --> 00:03:40.530
So that's where this forwardRef and
useImperativeHandle gets helpful.

56
00:03:41.670 --> 00:03:44.880
So one, this is not possible unless
you do the forwardRef thing, right?

57
00:03:46.880 --> 00:03:54.551
And then here,
I put the ref here on the input, right?

58
00:03:55.831 --> 00:04:02.652
And then this forwardRef allows me to
expose this ImperativeHandle here.

59
00:04:02.652 --> 00:04:07.569
Which allows a person to
call the ref.focus to allow

60
00:04:07.569 --> 00:04:10.037
me to focus on that input.

61
00:04:14.710 --> 00:04:17.753
I'm inverting the control here,
that's really the sum of the stories.

62
00:04:17.753 --> 00:04:22.516
I'm inverting the control that typically
I ElaborateInput itself with call,

63
00:04:22.516 --> 00:04:25.014
hey, I want you to focus on this, right?

64
00:04:25.014 --> 00:04:29.570
Typically I would just pass in something,
I would use the normal one-way data flow.

65
00:04:29.570 --> 00:04:35.026
But if I don't write that ElaborateInput,
if that's library code, I need some way to

66
00:04:35.026 --> 00:04:40.425
expose that to the user, which is what
I'm doing here with input.current.focus.

67
00:04:40.425 --> 00:04:48.325
Because the ref is controlled here
by the ImperativeHandle component,

68
00:04:48.325 --> 00:04:54.484
Which I made, Here, right,
wherever I made that ref, hit these refs.

69
00:04:58.563 --> 00:05:03.599
So you might be looking at this as like,
I don't really get it or care about it.

70
00:05:03.599 --> 00:05:06.892
Both of those are totally fine, I just
want you to know that this is out there.

71
00:05:06.892 --> 00:05:10.666
That if you somehow need to have this
inverted control in your application, one,

72
00:05:10.666 --> 00:05:12.930
rethink about what you're doing, right?

73
00:05:12.930 --> 00:05:14.657
If you control all of
the code top to bottom,

74
00:05:14.657 --> 00:05:16.115
you can remodel this in a better way.

75
00:05:16.115 --> 00:05:19.912
Where basically you just pass
in an error state here, and

76
00:05:19.912 --> 00:05:24.830
then you call focus on that directly
in the child's component yourself.

77
00:05:24.830 --> 00:05:28.468
But if you don't control that,
this is how you would handle that.

78
00:05:30.275 --> 00:05:34.747
So, you're going to use this either if
you're an open source maintainer, or

79
00:05:34.747 --> 00:05:36.795
if you're making a design system.

80
00:05:40.545 --> 00:05:42.979
Cuz even this, again,
imagine that you don't write this,

81
00:05:42.979 --> 00:05:45.090
this is something that's
coming in from a library.

82
00:05:46.710 --> 00:05:51.990
This is still a weird API that you have
to make a ref and pass that in, right?

83
00:05:51.990 --> 00:05:54.598
Most people are gonna be like,
why am I doing this?

84
00:05:54.598 --> 00:05:55.652
So, anyway.

