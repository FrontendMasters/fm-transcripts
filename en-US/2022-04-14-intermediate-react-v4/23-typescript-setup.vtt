WEBVTT

1
00:00:00.300 --> 00:00:02.750
This is not a TypeScript course.

2
00:00:02.750 --> 00:00:06.017
There is TypeScript courses on
Frontend Masters, and they are quite good.

3
00:00:06.017 --> 00:00:09.590
One from my former co-worker and
friend, Mike.

4
00:00:09.590 --> 00:00:12.212
So if you wanna get really
in depth into TypeScript,

5
00:00:12.212 --> 00:00:15.200
Mike's course is a really good
jumping off point for that.

6
00:00:16.690 --> 00:00:20.800
I just wanted to show you how I would
refactor our current app to use

7
00:00:20.800 --> 00:00:21.713
TypeScript.

8
00:00:21.713 --> 00:00:24.525
And I think this would be like a good
jumping off point of like I understand

9
00:00:24.525 --> 00:00:26.140
this application, I understand react,

10
00:00:26.140 --> 00:00:28.135
I wanna see how the two
work together really quick.

11
00:00:28.135 --> 00:00:29.664
So that's kind of the point here.

12
00:00:29.664 --> 00:00:33.512
So quickly we're gonna do an entire
migration over from our totally

13
00:00:33.512 --> 00:00:37.570
JavaScript application,
to a totally TypeScript application.

14
00:00:37.570 --> 00:00:41.300
It's kind of a good example of you, like
what migrating to TypeScript feels like.

15
00:00:41.300 --> 00:00:43.911
In that it's very painful
at the beginning, and

16
00:00:43.911 --> 00:00:47.296
then it gets better as you go on and
get further towards the end.

17
00:00:47.296 --> 00:00:51.189
And then it's great once you have it,
but migrating is a pain.

18
00:00:51.189 --> 00:00:57.108
So first thing what you do is I want you
to make another copy of this Adopt Me app,

19
00:00:57.108 --> 00:01:00.623
which is here the 12-portals-and-ref.

20
00:01:00.623 --> 00:01:03.247
So I'm gonna go do that really quick.

21
00:01:08.313 --> 00:01:14.551
So I'm gonna put that in TypeScript, And

22
00:01:14.551 --> 00:01:16.690
then I am gonna open
that in my code editor.

23
00:01:18.670 --> 00:01:21.369
Make sure you run npm install on that.

24
00:01:23.286 --> 00:01:26.682
So I'm saying that out loud because
I need to run npm install on it.

25
00:01:28.200 --> 00:01:29.930
To get all of our dependencies.

26
00:01:32.040 --> 00:01:35.794
So if you're not incredibly familiar
with what like TypeScript is,

27
00:01:35.794 --> 00:01:37.650
why you use TypeScript.

28
00:01:37.650 --> 00:01:40.880
You've probably heard about it on
the interwebs or on the Twittersphere.

29
00:01:40.880 --> 00:01:44.165
But let's just walk over like
the value proposition of what

30
00:01:44.165 --> 00:01:45.550
TypeScript is good for.

31
00:01:47.300 --> 00:01:49.890
So if I just open one of
these random files here.

32
00:01:52.968 --> 00:01:58.173
If I have TypeScript here,
and I say something like

33
00:01:58.173 --> 00:02:03.143
const x = 5 and then as try and
say x.toString.

34
00:02:05.618 --> 00:02:09.046
Right now JavaScript's like, all right,
that seems pretty cool to me,

35
00:02:09.046 --> 00:02:10.110
I can do that, right?

36
00:02:11.500 --> 00:02:13.015
Actually that probably would work.

37
00:02:13.015 --> 00:02:20.761
[LAUGH].
Let's do a, Yeah,

38
00:02:20.761 --> 00:02:23.599
two upper case, that's a better one,
two upper case.

39
00:02:26.339 --> 00:02:31.600
Obviously, there's no two
uppercase function on a number.

40
00:02:31.600 --> 00:02:34.944
But JavaScript is more than happy to say
like this looks like plausible JavaScript

41
00:02:34.944 --> 00:02:36.010
to me, great.

42
00:02:36.010 --> 00:02:40.030
Here some not gonna catch this obviously
pretty doesn't catch errors like that.

43
00:02:40.030 --> 00:02:43.730
So you need something that's actually
going to go into type checking, right?

44
00:02:43.730 --> 00:02:48.090
So at this point x is a number,
right, it a 5.

45
00:02:48.090 --> 00:02:51.218
This is a function that's
only available on strings,

46
00:02:51.218 --> 00:02:53.330
therefore this will err at run time.

47
00:02:54.620 --> 00:02:57.756
Typescript actually are gonna say like,
hey, this is a number and

48
00:02:57.756 --> 00:03:00.560
then later you are trying to
call two upper case on a number.

49
00:03:01.770 --> 00:03:03.080
That doesn't make any sense.

50
00:03:03.080 --> 00:03:03.900
I don't think you should do that.

51
00:03:05.090 --> 00:03:09.698
So that's kind of the initial value
proposition of what TypeScript does for

52
00:03:09.698 --> 00:03:13.730
you, but that's kind of like the very
surface level like checks or

53
00:03:13.730 --> 00:03:15.098
types kind of things.

54
00:03:15.098 --> 00:03:19.057
The thing that I actually find more
compelling about TypeScripts is

55
00:03:19.057 --> 00:03:23.780
the fact that it's kind of immediate
documentation on your application that you

56
00:03:23.780 --> 00:03:25.110
don't have to write.

57
00:03:25.110 --> 00:03:27.960
It's just kind of generated
by TypeScript itself.

58
00:03:27.960 --> 00:03:31.510
And then visual studio code
can immediately read from it.

59
00:03:31.510 --> 00:03:33.964
And other editors, but
the TypeScript team and

60
00:03:33.964 --> 00:03:37.410
the visual studio code team are like
the same team at Microsoft.

61
00:03:37.410 --> 00:03:40.300
I know that cuz I was on that team, right?

62
00:03:40.300 --> 00:03:43.875
So that TypeScript is built first for
VS code.

63
00:03:43.875 --> 00:03:49.110
I don't know if that's a common knowledge
kind of thing, but that's actually true.

64
00:03:49.110 --> 00:03:52.008
So I'm trying to think of like where some
of that you could show that would be

65
00:03:52.008 --> 00:03:54.360
really interesting this
particular application.

66
00:03:54.360 --> 00:03:59.444
Maybe here where we use theme
context we use it in details.

67
00:04:02.137 --> 00:04:07.522
So if I look at this theme context thing
here, notice that if I just mouse over it,

68
00:04:07.522 --> 00:04:10.980
it says const theme context
is a React context.

69
00:04:10.980 --> 00:04:17.510
And it's of type string or void or
string and it returns a void function.

70
00:04:19.540 --> 00:04:21.320
We didn't write that type anywhere, right?

71
00:04:21.320 --> 00:04:25.562
That's just TypeScript reading our
application where we created that

72
00:04:25.562 --> 00:04:28.389
here in the theme context and
generating that,

73
00:04:28.389 --> 00:04:31.230
it's like, okay,
I understand what this is.

74
00:04:32.990 --> 00:04:35.599
So you get a lot of TypeScript
benefit in VS code,

75
00:04:35.599 --> 00:04:38.400
even if you're not using TypeScript.

76
00:04:38.400 --> 00:04:40.657
However, we can actually make
this significantly better.

77
00:04:43.610 --> 00:04:45.570
Cool, so I think that's my spiel.

78
00:04:45.570 --> 00:04:49.832
I think it's living documentation of your
application that your editor just kind of

79
00:04:49.832 --> 00:04:51.102
makes for you on the fly.

80
00:04:53.392 --> 00:04:56.560
And we'll see a bunch of
examples of this as we go on.

81
00:04:56.560 --> 00:05:03.485
So the first thing I want you
to do is open your code or

82
00:05:03.485 --> 00:05:09.605
your terminal here and
say npm install -D and

83
00:05:09.605 --> 00:05:14.455
we want typescript@4.5.5.

84
00:05:19.496 --> 00:05:26.050
Okay, so we are gonna use TypeScript for
this part of the course.

85
00:05:26.050 --> 00:05:29.220
In previous versions of this course,
I had taught flow.

86
00:05:29.220 --> 00:05:32.620
Flow is made by Facebook,
and it was made for React.

87
00:05:32.620 --> 00:05:34.890
So actually a lot of the types of
React are built into flow itself.

88
00:05:36.690 --> 00:05:38.864
I'm just gonna throw out
there that TypeScript one.

89
00:05:38.864 --> 00:05:44.969
[LAUGH] It's not really
a decision at this point.

90
00:05:44.969 --> 00:05:49.693
TypeScript is like blue ray and flow is
like HD DVD that's some people still use

91
00:05:49.693 --> 00:05:51.923
it, but it's because they have to.

92
00:05:51.923 --> 00:05:58.785
[LAUGH] And I won't go into like
the merits of either one of them.

93
00:05:58.785 --> 00:06:02.766
All right, so we're gonna say npx tsc,

94
00:06:02.766 --> 00:06:06.632
tsc trypescript compiler -- in it and

95
00:06:06.632 --> 00:06:11.925
this will generate our
initial configuration file.

96
00:06:14.536 --> 00:06:17.445
Okay, you'll see here we
have our tsconfig down here.

97
00:06:19.660 --> 00:06:21.464
This is called Json C.

98
00:06:21.464 --> 00:06:25.225
So Json with comments, so
that's why all these comments are in here.

99
00:06:25.225 --> 00:06:29.580
You can see, there is a lot of things
you can configure with TypeScript.

100
00:06:29.580 --> 00:06:36.346
So we're just gonna
configure a few things.

101
00:06:36.346 --> 00:06:42.337
Okay, first make this one es2021,
this target here and

102
00:06:42.337 --> 00:06:47.152
then I think we have to
do the preserve JSX, yep,

103
00:06:47.152 --> 00:06:53.690
this one right here, line 16,
just uncomment that line.

104
00:06:53.690 --> 00:06:59.830
So the next thing is react does
not ship with types, right?

105
00:06:59.830 --> 00:07:03.254
So some of it will just
implicitly understand

106
00:07:03.254 --> 00:07:07.780
because it'll import some
of those types for you.

107
00:07:07.780 --> 00:07:11.440
But let's be explicit and
actually install the types for react.

108
00:07:11.440 --> 00:07:15.117
But some libraries come with
the types right out of the box, so

109
00:07:15.117 --> 00:07:17.035
you don't have to do anything.

110
00:07:17.035 --> 00:07:19.761
I don't like Apollo I think is
one of them that does, right,

111
00:07:19.761 --> 00:07:23.140
like you don't have to do anything
the types come with the library itself.

112
00:07:23.140 --> 00:07:26.270
Some libraries don't write
the libraries in TypeScript and so

113
00:07:26.270 --> 00:07:29.814
there's another project called
definitely typed, that you can go and

114
00:07:29.814 --> 00:07:32.190
install separately the types for
the project.

115
00:07:32.190 --> 00:07:35.893
So even if open source author doesn't
wanna maintain their own types,

116
00:07:35.893 --> 00:07:37.940
the open source community can go safe.

117
00:07:37.940 --> 00:07:39.742
That's fine, we'll maintain it for you.

118
00:07:39.742 --> 00:07:44.618
Because it's a million times easier if
you have the types for your library.

119
00:07:44.618 --> 00:07:52.342
So again back here in your project,

120
00:07:52.342 --> 00:07:58.520
we're gonna say npm install

121
00:07:58.520 --> 00:08:07.539
-D @types/react@17.0.39.

122
00:08:07.539 --> 00:08:11.712
And then we're gonna do it again for

123
00:08:11.712 --> 00:08:16.164
react router or so not react router but

124
00:08:16.164 --> 00:08:22.437
react dom @types/react-dom@17.0.11.

125
00:08:25.576 --> 00:08:29.162
Okay, I think this is pretty cool,
it's like a kind a a cool way of

126
00:08:29.162 --> 00:08:33.209
managing the types here cuz now If you
look in your dev dependencies here,

127
00:08:33.209 --> 00:08:34.990
you just have these types here.

128
00:08:34.990 --> 00:08:38.996
So you'll generally see that a lot in
TypeScript projects is still have to

129
00:08:38.996 --> 00:08:43.730
install a lot of types for all the various
different libraries that don't support it.

130
00:08:43.730 --> 00:08:46.495
For example, I don't think we need to do
react router dom because I believe that

131
00:08:46.495 --> 00:08:48.410
one's actually just written
in TypeScript already.

132
00:08:48.410 --> 00:08:50.660
So we don't have to do anything,
they don't have to do anything.

133
00:08:50.660 --> 00:08:53.200
The types just come with
the project automatically.

134
00:08:53.200 --> 00:08:55.440
Actually, I'm positive that's true.

135
00:08:55.440 --> 00:08:58.387
Cuz I looked, cuz I wrote this course,
believe it or not, I wrote this course.

136
00:09:00.639 --> 00:09:04.963
Okay, so we're gonna do a migration
which is very possible and

137
00:09:04.963 --> 00:09:08.241
actually TypeScript makes
it not too bad to do.

138
00:09:11.856 --> 00:09:14.660
I think the other thing we want to,
this is already in strict mode, right?

139
00:09:14.660 --> 00:09:16.430
Strict, it is.

140
00:09:16.430 --> 00:09:18.780
Okay, line 77 here I'm
just gonna throw out here.

141
00:09:18.780 --> 00:09:20.310
You almost always want this on.

142
00:09:20.310 --> 00:09:24.827
The only reason that you don't wanna turn
strict mode on is if you're in the middle

143
00:09:24.827 --> 00:09:28.710
of a huge migration, and
you can't quite get there yet.

144
00:09:28.710 --> 00:09:31.996
But strict checking is gonna make
sure that you don't do a bunch

145
00:09:31.996 --> 00:09:33.299
of really silly things.

146
00:09:35.270 --> 00:09:38.527
But it does make it harder to work with,
right, it makes it more strict, so

147
00:09:38.527 --> 00:09:39.418
it's aptly named.

