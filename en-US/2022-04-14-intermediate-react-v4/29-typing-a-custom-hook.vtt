WEBVTT

1
00:00:00.370 --> 00:00:05.723
So let's pop over to pet.jsx.

2
00:00:05.723 --> 00:00:11.172
Well, JS, and
then we're going to rename it to pet.tsx.

3
00:00:13.572 --> 00:00:19.680
Okay, so let's go ahead and
grab function component import,

4
00:00:19.680 --> 00:00:26.134
function component from react,
and we're gonna make this pet a,

5
00:00:26.134 --> 00:00:31.570
function component and
it's got a bunch of props here.

6
00:00:31.570 --> 00:00:37.381
Obviously this is not a, class component,
so let's go ahead and give it some,

7
00:00:37.381 --> 00:00:42.258
IProps or props or whatever you
wanna call this little thing here.

8
00:00:42.258 --> 00:00:45.712
And we're gonna just make an interface,

9
00:00:45.712 --> 00:00:50.260
IProps, and
it's gonna take a name which is a string.

10
00:00:50.260 --> 00:00:56.931
It's gonna take an animal
which is a string.

11
00:00:56.931 --> 00:01:01.380
Take a breed, which is a string, images,

12
00:01:04.193 --> 00:01:08.968
Which is a string array, and location,

13
00:01:08.968 --> 00:01:14.876
which is a string and
ID which has a number, okay?

14
00:01:16.925 --> 00:01:20.557
Now I imagine at least someone
out there is thinking is like,

15
00:01:20.557 --> 00:01:22.563
why don't we just make this pet?

16
00:01:22.563 --> 00:01:24.918
Well, I'm gonna give you two reasons for
that.

17
00:01:24.918 --> 00:01:27.562
One, location is actually different,
right?

18
00:01:27.562 --> 00:01:31.486
So if you remember in pet and
I'll bring that up here so

19
00:01:31.486 --> 00:01:34.115
you can see our API response types.

20
00:01:34.115 --> 00:01:37.443
This gives you city and state and
you might remember from writing in

21
00:01:37.443 --> 00:01:41.367
Complete Intro to React, we actually
put those things together as one thing,

22
00:01:41.367 --> 00:01:44.650
which is a location, so
these actually don't match each other.

23
00:01:44.650 --> 00:01:47.098
The other thing is just kind
of a personal preference.

24
00:01:47.098 --> 00:01:50.528
I try not to make these function,
I always do an IProps thing and

25
00:01:50.528 --> 00:01:53.636
then I'm specific at what I
expected in a component one,

26
00:01:53.636 --> 00:01:56.324
this kind of documentation for
this component.

27
00:01:56.324 --> 00:01:58.061
And two things change over time.

28
00:01:58.061 --> 00:02:01.317
They may not be a pet,
they might be a pet and a thing,

29
00:02:01.317 --> 00:02:05.165
in which case you get into union
typing and things like that and

30
00:02:05.165 --> 00:02:09.918
you're just out in weeds, and
at that point it's like, just be explicit.

31
00:02:09.918 --> 00:02:12.097
This thing expects this and

32
00:02:12.097 --> 00:02:16.651
then it makes it easy to maintain and
read going forward.

33
00:02:16.651 --> 00:02:18.989
Don't get clever with types,
please don't get clever with types,

34
00:02:18.989 --> 00:02:26.528
just be explicit, Okay,
that's it for this I think.

35
00:02:26.528 --> 00:02:28.438
I think everything else is just fine.

36
00:02:28.438 --> 00:02:29.732
So that's all good.

37
00:02:35.851 --> 00:02:37.928
So let's keep going.

38
00:02:37.928 --> 00:02:42.439
We're gonna go do use BreedList.

39
00:02:42.439 --> 00:02:47.307
We're going to rename this to use pre
this ts, there's no JSX in here so

40
00:02:47.307 --> 00:02:50.164
we don't need it to run it through there.

41
00:02:50.164 --> 00:02:57.196
Okay so let's add something

42
00:02:57.196 --> 00:03:03.367
to our, API response types up here.

43
00:03:03.367 --> 00:03:04.771
So go back to that for just a second.

44
00:03:04.771 --> 00:03:11.258
And we're just gonna export a new type in
here, which is a BreedList API response.

45
00:03:11.258 --> 00:03:13.785
So export interface.

46
00:03:15.152 --> 00:03:19.462
BreedList API response.

47
00:03:19.462 --> 00:03:24.038
I like to keep these API response
things in separate in their own files.

48
00:03:24.038 --> 00:03:26.691
If I ever had to call this
BreedList somewhere else,

49
00:03:26.691 --> 00:03:29.766
it wouldn't be stuck in this
weird location of being, hey,

50
00:03:29.766 --> 00:03:32.810
you have to import this custom
hook to get the correct type.

51
00:03:32.810 --> 00:03:35.505
That seems weird to me,
it makes more sense of like, hey,

52
00:03:35.505 --> 00:03:36.606
I have an API response.

53
00:03:36.606 --> 00:03:40.395
I expect that to find that in the API
response TypeScript file This is

54
00:03:40.395 --> 00:03:44.788
preference, I leave it up to you of what
you think is a better way of doing that.

55
00:03:44.788 --> 00:03:48.159
This just makes sense to my
lizard brain that I have.

56
00:03:50.666 --> 00:03:57.179
So an animal, an animal, and
breeds is just an array of strings.

57
00:03:59.495 --> 00:04:00.757
Okay, pretty simple there.

58
00:04:03.110 --> 00:04:05.005
Obvious are at least not a lot to it.

59
00:04:05.005 --> 00:04:07.341
We're gonna go back to
use BreedList now and

60
00:04:07.341 --> 00:04:10.069
we're going to import that
type that we just made.

61
00:04:10.069 --> 00:04:14.888
So we're going to import animal and

62
00:04:14.888 --> 00:04:18.429
BreedList API response.

63
00:04:18.429 --> 00:04:24.550
From ./APIResponseTypes, okay?

64
00:04:24.550 --> 00:04:29.256
So local cache,
this one's kind of fun thing to type.

65
00:04:29.256 --> 00:04:31.289
Because what is local cache gonna be?

66
00:04:31.289 --> 00:04:36.559
Local cache is going to be a list
of arbitrary keys that then

67
00:04:36.559 --> 00:04:41.414
represent objects of
responses are strings rather.

68
00:04:41.414 --> 00:04:44.816
So how do you type that in TypeScript?

69
00:04:44.816 --> 00:04:50.798
Well, you're gonna have an object,
right, which is what it is, oops,

70
00:04:50.798 --> 00:04:57.081
and then it's going to have arbitrary
indexes, which are strings, right?

71
00:04:57.081 --> 00:05:02.858
Which is what this square brackets are,
okay?

72
00:05:02.858 --> 00:05:05.956
And then those are going to
represent strings arrays.

73
00:05:07.984 --> 00:05:11.646
So this is just saying like, I don't know
what the strings are actually gonna be in

74
00:05:11.646 --> 00:05:13.947
here, but
it's just gonna be arbitrary, right?

75
00:05:13.947 --> 00:05:17.033
So these are gonna be indexes or
whatever you choose to call them.

76
00:05:17.033 --> 00:05:19.763
And then those are gonna
be strings themselves.

77
00:05:19.763 --> 00:05:24.330
And now we have local cache,
which as you can see here,

78
00:05:24.330 --> 00:05:27.608
it has arbitrary strings as its keys and

79
00:05:27.608 --> 00:05:32.195
then those keys are going
to represent string arrays.

80
00:05:32.195 --> 00:05:35.698
Okay, and
then I'm gonna have a type status in here.

81
00:05:35.698 --> 00:05:40.635
And I'm gonna keep this type in
here because this is actually very

82
00:05:40.635 --> 00:05:43.969
specific to this custom
hook that we wrote.

83
00:05:43.969 --> 00:05:49.029
And it's gonna be a enumerated

84
00:05:49.029 --> 00:05:55.647
type it's either going to be unloaded or

85
00:05:55.647 --> 00:06:00.708
loading or loaded which is what

86
00:06:00.708 --> 00:06:05.786
we returned down here, okay?

87
00:06:05.786 --> 00:06:11.916
So, function use breed this animal
as you may guess is a animal.

88
00:06:18.701 --> 00:06:22.053
Okay, BreedList and setBreedList,
this is an array, but

89
00:06:22.053 --> 00:06:24.408
we need to tell it what
type of array it is.

90
00:06:24.408 --> 00:06:29.707
So this array is an array of string.

91
00:06:29.707 --> 00:06:34.266
So now it knows that this, because we
give it a default thing here in useState,

92
00:06:34.266 --> 00:06:36.133
it's smart enough knows okay,

93
00:06:36.133 --> 00:06:39.672
this is going to be a string
array that I'm going to get back.

94
00:06:39.672 --> 00:06:43.060
And this is a thing that you can
only call with a string array.

95
00:06:43.060 --> 00:06:45.782
So react has really good typings that way.

96
00:06:47.539 --> 00:06:50.190
Same thing with status and set status.

97
00:06:50.190 --> 00:06:53.431
Right now and
things like this is a string and

98
00:06:53.431 --> 00:06:57.734
we have to let it know specifically
that this is a a status.

99
00:06:57.734 --> 00:07:01.367
So now it knows that you can only
call this with unloaded loading or

100
00:07:01.367 --> 00:07:04.822
loaded and if I call with something
else it's gonna be upset.

101
00:07:07.118 --> 00:07:14.160
Okay, we're gonna have to
cast our API response here.

102
00:07:14.160 --> 00:07:21.837
So this you're gonna have to wrap in this,
wait, This is going to come back,

103
00:07:21.837 --> 00:07:24.741
actually it's the JSON, sorry,
it's this one that you cast.

104
00:07:28.529 --> 00:07:33.991
So whatever this comes back as, we want
to cast that as a bBeedList API response.

105
00:07:33.991 --> 00:07:38.224
So now we know this JSON object has
all the things that we expect out of

106
00:07:38.224 --> 00:07:39.798
a BreedList API object.

107
00:07:43.996 --> 00:07:44.750
Okay.

108
00:07:48.038 --> 00:07:50.877
Let's see what did we miss here,
requestBreedList.

109
00:07:55.875 --> 00:07:57.406
This was kind of a fun one.

110
00:08:00.864 --> 00:08:05.631
So, request free list is
a function it's an a sync

111
00:08:05.631 --> 00:08:10.853
function in what do all
asynchrony functions return,

112
00:08:10.853 --> 00:08:16.122
promises, So
basically any with an a sync function,

113
00:08:16.122 --> 00:08:19.611
no matter what, if you call it the thing
that you get back from it as a promise,

114
00:08:19.611 --> 00:08:22.805
and then you can await the promise to
get whatever you get back from it.

115
00:08:22.805 --> 00:08:25.926
You can see here that we actually
don't return anything out here.

116
00:08:25.926 --> 00:08:31.499
So if you awaited this you
would get undefined, right?

117
00:08:31.499 --> 00:08:35.998
But still,
this is still giving you back a promise.

118
00:08:35.998 --> 00:08:39.169
This is telling me here and
I think this is actually from es lint.

119
00:08:39.169 --> 00:08:42.686
It is TypeScript, floating promises.

120
00:08:42.686 --> 00:08:44.141
It's basically saying,

121
00:08:44.141 --> 00:08:48.116
you need to explicitly tell me that
you're ignoring the promise here.

122
00:08:48.116 --> 00:08:52.208
So the way that you do that
is you just say void, and

123
00:08:52.208 --> 00:08:58.354
that's explicitly saying I do not care
what comes back from this promise.

124
00:08:58.354 --> 00:09:01.918
Cuz we're just calling this and
we're using a sync to make it so

125
00:09:01.918 --> 00:09:04.146
that we can use a sync a weight, right?

126
00:09:04.146 --> 00:09:08.823
So we actually don't care about
the promise coming back hence you have

127
00:09:08.823 --> 00:09:13.515
to say I'm calling something here,
but you can ignore it and move on.

128
00:09:13.515 --> 00:09:18.349
So this will actually make sure
that it returns everything.

129
00:09:18.349 --> 00:09:26.848
Like if you do this x will now be
equal to, Undefined right void.

130
00:09:26.848 --> 00:09:29.711
This keyword void basically means I'm
going to give you something after it.

131
00:09:29.711 --> 00:09:33.050
It's a unary operator, if you want
to get into the technical details.

132
00:09:33.050 --> 00:09:36.419
Whatever comes after this, make it
undefined, cuz I don't care what it is.

133
00:09:37.951 --> 00:09:40.094
Not something we use
a terrible much in JavaScript,

134
00:09:40.094 --> 00:09:42.445
because why would you want
to make something undefined.

135
00:09:44.268 --> 00:09:46.294
This is the one case that
you probably wanna do that.

136
00:09:48.619 --> 00:09:51.770
Again, this is an ESLint rule that's
making us do this TypeScript in general

137
00:09:51.770 --> 00:09:52.499
wouldn't care.

138
00:09:52.499 --> 00:09:55.881
It's just ESLint that cares.

139
00:09:55.881 --> 00:09:59.920
I probably would just go and ignore that
rule if it was me on my own project,

140
00:09:59.920 --> 00:10:02.348
cuz this doesn't really tell me very much.

141
00:10:02.348 --> 00:10:05.262
This and
that tell me the exact same thing, but

142
00:10:05.262 --> 00:10:09.236
someone somewhere felt it was
important to enforce that on us.

143
00:10:12.168 --> 00:10:15.671
Okay, any questions so far?

144
00:10:15.671 --> 00:10:17.373
&gt;&gt; Just real quick, just double check,

145
00:10:17.373 --> 00:10:20.204
void is from just JavaScript
it's not TypeScript [INAUDIBLE].

146
00:10:20.204 --> 00:10:20.952
&gt;&gt; Correct.

147
00:10:20.952 --> 00:10:23.164
&gt;&gt; That's what I thought.

148
00:10:23.164 --> 00:10:25.025
&gt;&gt; Void is a JavaScript keyword.

149
00:10:28.676 --> 00:10:30.490
We just never use it.

150
00:10:30.490 --> 00:10:34.317
The only reason that you would ever use
void is if you wanted to explicitly

151
00:10:34.317 --> 00:10:36.899
communicate your code I
don't care about this.

152
00:10:36.899 --> 00:10:41.535
But usually that's fairly implicit.

153
00:10:41.535 --> 00:10:44.930
In other words, I have never used void
outside of this particular use case.

