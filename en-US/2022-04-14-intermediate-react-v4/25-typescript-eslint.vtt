WEBVTT

1
00:00:00.280 --> 00:00:04.760
We do have a bit of a problem
at the moment that our

2
00:00:04.760 --> 00:00:09.242
ESLint doesn't know how
to check TypeScript.

3
00:00:09.242 --> 00:00:12.374
And obviously,
we want the ESLint to check TypeScript.

4
00:00:12.374 --> 00:00:15.070
We used to use a project called TSLint.

5
00:00:15.070 --> 00:00:17.560
TSLint is now deprecated.

6
00:00:17.560 --> 00:00:19.439
And that team just basically said,
you know what,

7
00:00:19.439 --> 00:00:20.755
everyone should just be on ESLint.

8
00:00:20.755 --> 00:00:24.725
So they actually augmented ESLint with
the ability to check things based on type

9
00:00:24.725 --> 00:00:27.450
in addition to all the other
things I was doing before,

10
00:00:27.450 --> 00:00:30.370
which was the ability that
TSLint had that ESLint lacked.

11
00:00:31.890 --> 00:00:34.464
It's a bit of ceremony to
get it all set up, but

12
00:00:34.464 --> 00:00:37.040
I'll show you how to do
it right really quick.

13
00:00:38.350 --> 00:00:42.070
So if we go in to package.json, let's
make sure that we have everything here.

14
00:00:42.070 --> 00:00:43.070
Yeah, this is all good.

15
00:00:44.280 --> 00:00:48.219
So, we are going to open our code editor.

16
00:00:48.219 --> 00:00:52.291
So we're gonna do npm install -D

17
00:00:52.291 --> 00:01:01.020
eslint-import-resolver-typescript@2.4.0,
by the way,

18
00:01:01.020 --> 00:01:06.110
you can totally copy this out of my notes,

19
00:01:06.110 --> 00:01:10.910
you do not have to follow along with me,

20
00:01:10.910 --> 00:01:14.120
@typescript- eslint.

21
00:01:14.120 --> 00:01:18.644
This is the name of the project that does
the bridging between the two, by the way.

22
00:01:20.912 --> 00:01:30.912
/eslint-plugin@4.16.1@typescript,

23
00:01:38.482 --> 00:01:47.252
-eslint/parser@4.16.1.

24
00:01:49.782 --> 00:01:50.563
Okay.

25
00:01:52.479 --> 00:01:54.226
I probably misspelled something?

26
00:02:07.687 --> 00:02:13.969
Eslint-import-resolver-typescript@2.4,
eslint this.

27
00:02:13.969 --> 00:02:16.714
Let me just grab it out of my notes,
rather than make you sit here and

28
00:02:16.714 --> 00:02:17.460
debug it with me.

29
00:02:19.000 --> 00:02:22.540
So we're down here in TypeScript and
ESLint and

30
00:02:22.540 --> 00:02:25.560
I want you to grab this line right there.

31
00:02:36.119 --> 00:02:40.370
And still has a problem here,
could not resolve dependency eslint.

32
00:02:42.130 --> 00:02:43.860
I have eslint@ version 8.

33
00:02:43.860 --> 00:02:46.094
So it wants to be at 7.

34
00:02:47.810 --> 00:02:50.413
All right, well,
let's just take the version off of these.

35
00:02:56.379 --> 00:02:58.540
I might have you install
too old of a version here.

36
00:03:00.250 --> 00:03:05.190
The versions that I want to install for
this are, And

37
00:03:05.190 --> 00:03:09.134
actually I can just kinda start that
piece again with the correct versions.

38
00:03:12.266 --> 00:03:15.364
So, and
then I'll fix this in my notes later.

39
00:03:19.067 --> 00:03:25.506
I went into an npm, oops, npm install

40
00:03:25.506 --> 00:03:34.162
-D eslint-import-resolver-typescript@,

41
00:03:34.162 --> 00:03:40.401
eslint import, I have 2.5.0,

42
00:03:40.401 --> 00:03:47.041
then we are gonna do, let's see here,

43
00:03:47.041 --> 00:03:55.106
@typescript- eslint/eslint-plugin@.

44
00:03:55.106 --> 00:03:59.287
And this one is supposed to

45
00:03:59.287 --> 00:04:04.228
be version 5.13.0, and

46
00:04:04.228 --> 00:04:13.161
then we're gonna do
@typescript-eslint/parser,

47
00:04:13.161 --> 00:04:20.204
and that's also at version 5.13.0.

48
00:04:20.204 --> 00:04:25.547
Okay, and that should give
you all the tools that you'll

49
00:04:25.547 --> 00:04:31.013
need to be able to run ESLlint
on your TypeScript project.

50
00:04:31.013 --> 00:04:34.694
Okay, come back to your package.json.

51
00:04:34.694 --> 00:04:40.017
And then here on your lint function,
we're just gonna add ts and

52
00:04:40.017 --> 00:04:46.142
tsx in here as well, cuz we wanna run
now eslint on those projects as well.

53
00:04:48.380 --> 00:04:53.893
Okay, Let's

54
00:04:53.893 --> 00:04:58.830
go fix our eslintrc.json to
make this run typescript stuff.

55
00:05:00.080 --> 00:05:04.860
So the next thing to run in here, just
again, make sure this is above prettier.

56
00:05:04.860 --> 00:05:09.401
The order of these does not matter in the
extends except that prettier must be last.

57
00:05:09.401 --> 00:05:12.073
So we're gonna do

58
00:05:12.073 --> 00:05:19.738
plugin:@typescript-eslint/recommended.

59
00:05:22.660 --> 00:05:23.359
Okay.

60
00:05:25.869 --> 00:05:30.616
We are gonna turn off one rule here,

61
00:05:30.616 --> 00:05:37.906
is @typescript-eslint/no-empty-functions.

62
00:05:40.520 --> 00:05:43.499
We use in one place in our application and
I think it's fine, so

63
00:05:43.499 --> 00:05:45.085
we're just gonna turn that off.

64
00:05:48.070 --> 00:05:50.720
Okay, here instead of plugins,
this one doesn't matter.

65
00:05:50.720 --> 00:05:57.770
You can put them in any order,
we're just gonna add @typescript-eslint.

66
00:05:58.980 --> 00:06:04.520
This will augment the ability of of ESLint
to check TypeScript specific rules.

67
00:06:06.360 --> 00:06:13.107
Okay, here in the settings array
down here underneath react,

68
00:06:13.107 --> 00:06:17.069
we're gonna put import/parsers.

69
00:06:19.076 --> 00:06:23.198
We have to tell it how to
import TypeScript files,

70
00:06:23.198 --> 00:06:27.430
otherwise it would just
ignore TypeScript files.

71
00:06:27.430 --> 00:06:29.496
Or rather it wouldn't ignore them, but

72
00:06:29.496 --> 00:06:33.221
you're telling it that you have to use
a different parser for it to work.

73
00:06:33.221 --> 00:06:39.693
So typescript-eslint/parser.

74
00:06:39.693 --> 00:06:45.572
And you're saying use this
parser on anything that ends in,

75
00:06:45.572 --> 00:06:48.811
as you may guess, .ts or .tsx.

76
00:06:51.616 --> 00:06:54.935
Otherwise it's gonna use the normal
JavaScript ESLint parser.

77
00:06:57.452 --> 00:07:01.728
Okay, one more thing underneath here,

78
00:07:01.728 --> 00:07:05.754
we're gonna put import/resolver,

79
00:07:05.754 --> 00:07:12.942
you have to tell it that on TypeScript
files to always try the types.

80
00:07:23.295 --> 00:07:24.003
Okay.

81
00:07:26.053 --> 00:07:29.180
It's a bit of, again,
a bit of ceremony to get this all set up.

82
00:07:29.180 --> 00:07:30.644
It's better than it used to be.

83
00:07:30.644 --> 00:07:32.750
It used to be a hot mess
to set all this up.

84
00:07:32.750 --> 00:07:35.258
And you might say this is
just a medium mess, and

85
00:07:35.258 --> 00:07:38.040
I am much happier with
the medium mess than hot mess.

86
00:07:39.780 --> 00:07:41.043
Life advice from Brian again.

87
00:07:45.288 --> 00:07:51.855
Okay, so
what happens now if you say npm run lint?

88
00:07:54.528 --> 00:07:55.028
It works.

89
00:07:56.620 --> 00:07:58.165
Let's enforce type checking.

90
00:07:58.165 --> 00:08:01.254
So under here, under extends here,

91
00:08:01.254 --> 00:08:09.221
we're gonna add, Plugin:@typescript,

92
00:08:12.547 --> 00:08:15.724
-eslint/recommended-,

93
00:08:17.583 --> 00:08:24.691
requiring-type-checking.

94
00:08:31.622 --> 00:08:36.870
Okay, so this worked and it had no
problems and everything was fine.

95
00:08:36.870 --> 00:08:41.007
Now I think if we run npm run lint,
it's going to be extremely upset at us.

96
00:08:52.892 --> 00:08:56.543
On this one, you have to give
it the project, that's right.

97
00:09:01.984 --> 00:09:07.460
This one,
I think you just have to do here.

98
00:09:07.460 --> 00:09:11.770
All right, we need to add one more thing.

99
00:09:11.770 --> 00:09:13.528
And that is here in the parser options,

100
00:09:13.528 --> 00:09:15.993
you have to tell it where
your TypeScript configures.

101
00:09:15.993 --> 00:09:21.269
So you can just say here, "project": and

102
00:09:21.269 --> 00:09:26.544
then you just tell it,
you can have multiple

103
00:09:26.544 --> 00:09:31.962
project files, we obviously only have one,

104
00:09:31.962 --> 00:09:36.970
it's just we type ./tsconfig.json.

105
00:09:36.970 --> 00:09:37.870
And then put a comma there.

106
00:09:39.620 --> 00:09:42.450
Now ESLint knows where your
project configuration is.

107
00:09:43.850 --> 00:09:50.160
So now if you say npm run lint, we'll get
a whole slew of TypeScript errors that

108
00:09:50.160 --> 00:09:56.006
if we were not doing all our migration
all at once, you would not do this.

109
00:09:56.006 --> 00:09:57.803
But because we gonna be
doing this all at once,

110
00:09:57.803 --> 00:09:59.890
this makes sense because now
we can go piece by piece.

111
00:09:59.890 --> 00:10:04.510
And by the end of this, we'll have no
TypeScript errors, no ESLint errors.

112
00:10:04.510 --> 00:10:05.999
And yeah, and
then we can keep going from there.

113
00:10:07.910 --> 00:10:10.634
So, yeah, one thing I wanted to show you,

114
00:10:10.634 --> 00:10:13.530
if you go over here and
you click on this link.

115
00:10:14.930 --> 00:10:18.375
You can see here that's actually
adding a bunch of new TypeScript

116
00:10:18.375 --> 00:10:21.393
specific rules in terms of
how to write good TypeScript.

117
00:10:21.393 --> 00:10:26.168
And additional cool typing checking
kind of things that ESLint would not be

118
00:10:26.168 --> 00:10:28.742
capable of, but now TSLint, sorry,

119
00:10:28.742 --> 00:10:32.866
ESLint is capable of checking
in conjunction with TypeScript.

120
00:10:32.866 --> 00:10:33.856
That's all here.

121
00:10:33.856 --> 00:10:37.226
So I'll leave you to go through and
check all those,

122
00:10:37.226 --> 00:10:41.590
everything here that has a wrench
next to it means it can auto fix it,

123
00:10:41.590 --> 00:10:45.280
which is pretty cool, so,
a bunch of really cool stuff.

