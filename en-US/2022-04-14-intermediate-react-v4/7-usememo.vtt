WEBVTT

1
00:00:00.710 --> 00:00:09.230
Now we're gonna get into, you may never
have to do use these kind of hooks, right?

2
00:00:09.230 --> 00:00:13.101
Everything that I showed you up until now,
there's a likely chance that you're gonna

3
00:00:13.101 --> 00:00:16.457
use at some point in your React career,
if you end up writing enough React.

4
00:00:16.457 --> 00:00:22.350
The ones after this, 50-50 at best
that you'll ever have to use these.

5
00:00:23.360 --> 00:00:26.525
The next two, useMemo and
useCallback, one, are more or

6
00:00:26.525 --> 00:00:30.150
less the same thing with
a slightly different API.

7
00:00:30.150 --> 00:00:35.154
And two, specifically,
they are performance optimizations.

8
00:00:37.340 --> 00:00:39.813
So let's get into useMemo.

9
00:00:39.813 --> 00:00:43.271
I have to look these up, by the way,
these ones from here on out,

10
00:00:43.271 --> 00:00:45.913
I do not use them enough
that I can remember them.

11
00:00:45.913 --> 00:00:48.838
So I have to look them up every single
time, which is why I have my notes here.

12
00:00:52.672 --> 00:00:53.961
Okay, so memo.

13
00:00:57.779 --> 00:01:01.670
So here is a performance problem for you.

14
00:01:01.670 --> 00:01:06.530
Here we're gonna talk a little
bit about Fibonacci sequences.

15
00:01:06.530 --> 00:01:10.995
But we're doing it because
explicitly they're extremely

16
00:01:10.995 --> 00:01:14.540
computationally expensive, right?

17
00:01:14.540 --> 00:01:21.661
So you can replace your Fibonacci
with SuperExpensiveThingToDo, right?

18
00:01:21.661 --> 00:01:24.285
This could be like crypto hashes or
something like that,

19
00:01:24.285 --> 00:01:27.466
something that's just gonna require
a lot of computational power.

20
00:01:27.466 --> 00:01:30.826
In this case, I made an intentionally
bad Fibonacci sequence.

21
00:01:33.012 --> 00:01:37.116
Please render, thank you.

22
00:01:37.116 --> 00:01:41.199
I made an intentionally
bad Fibonacci sequence so

23
00:01:41.199 --> 00:01:44.025
that it takes forever to process.

24
00:01:46.265 --> 00:01:50.750
And also it's just doing excessive
recursion, is what this does.

25
00:01:50.750 --> 00:01:53.831
In fact,
that would be a better thing to call,

26
00:01:53.831 --> 00:01:56.991
this function is excessive recursion,
okay?

27
00:01:56.991 --> 00:02:00.785
So I have two things here happening.

28
00:02:00.785 --> 00:02:05.748
I have my state of what
the number is here.

29
00:02:05.748 --> 00:02:09.997
So the Fibonacci of 1 is 1,
if I click 1, Fibonacci is 2 of 2.

30
00:02:09.997 --> 00:02:14.891
And notice that at first this is pretty
good, but then once we start getting into

31
00:02:14.891 --> 00:02:18.851
bigger and bigger numbers,
this will start getting very slow.

32
00:02:18.851 --> 00:02:22.603
Once we're getting into the 40s,
yeah, here we go.

33
00:02:25.194 --> 00:02:29.726
So notice if I click this,
it takes a while to update, right?

34
00:02:33.056 --> 00:02:33.971
And why is that?

35
00:02:33.971 --> 00:02:39.201
It's literally adding one to itself this
many times, that's what Fibonacci does.

36
00:02:39.201 --> 00:02:40.242
So that takes a while.

37
00:02:43.571 --> 00:02:48.896
But we have a problem here, is that the
user may want to use this other very cool,

38
00:02:48.896 --> 00:02:52.330
red-green clicker here
while this is computing.

39
00:02:53.790 --> 00:02:54.934
So how would you handle that?

40
00:02:57.320 --> 00:03:04.208
Well, we can use something called useMemo,
To kind of help along with that.

41
00:03:06.773 --> 00:03:11.889
So if I click + here, notice that
I can't click on this right now.

42
00:03:16.785 --> 00:03:22.860
But notice that if I do click on
this right now, it does work, right?

43
00:03:22.860 --> 00:03:24.560
So why is it working that way?

44
00:03:25.720 --> 00:03:27.460
Well, useMemo is helping me along here.

45
00:03:27.460 --> 00:03:32.864
If I did not do that,
if I did this instead,

46
00:03:32.864 --> 00:03:38.584
const fib = fibonacci(num), like this.

47
00:03:42.293 --> 00:03:46.287
And let's just have
the start at 25 right now.

48
00:03:49.626 --> 00:03:53.608
So if I kept this up until,
I don't know, 30 or something like that.

49
00:03:56.034 --> 00:04:00.240
Okay, so now it's in a state where
now it's expensive to call Fibonacci.

50
00:04:00.240 --> 00:04:06.052
If I click on useMemo, notice how
long it takes me to change over.

51
00:04:10.932 --> 00:04:13.000
Right, because what is it doing here?

52
00:04:13.000 --> 00:04:16.385
It's recalculating it every
single time that it renders.

53
00:04:16.385 --> 00:04:18.170
That's a problem, right?

54
00:04:18.170 --> 00:04:20.480
Cuz I want both of these
things to stay responsive.

55
00:04:22.220 --> 00:04:23.690
So that's what useMemo is here.

56
00:04:23.690 --> 00:04:27.690
You can use it to say, hey,
I do need you to run this, right?

57
00:04:27.690 --> 00:04:32.070
I do need to know what the Fibonacci
of 38 is right now, right?

58
00:04:32.070 --> 00:04:38.693
But I also need users to be able to
click on my red-green clicker here.

59
00:04:40.513 --> 00:04:41.890
Does that make sense?

60
00:04:41.890 --> 00:04:44.070
It's a very niche use case.

61
00:04:44.070 --> 00:04:48.190
So one, hopefully you're not calculating
the Fibonacci on every re-render, right?

62
00:04:48.190 --> 00:04:51.595
But you can imagine probably cases
where I have to go do something and

63
00:04:51.595 --> 00:04:52.980
it's expensive, right?

64
00:04:52.980 --> 00:04:55.704
I have to go run this web
crypto hash here, but

65
00:04:55.704 --> 00:04:58.610
I don't wanna hold up
the rest of my React app.

66
00:04:58.610 --> 00:05:01.674
And then I don't have to do it very often.

67
00:05:01.674 --> 00:05:05.110
I only have to recalculate this only
when the user increments the number.

68
00:05:05.110 --> 00:05:07.830
It's gonna be the same number every
single time after that, right?

69
00:05:07.830 --> 00:05:11.250
The Fibonacci of 38 is always
going to be the same thing.

70
00:05:11.250 --> 00:05:13.749
Therefore, I can say,
hey, calculate this, but

71
00:05:13.749 --> 00:05:16.322
then keep it as long as
number doesn't change here.

72
00:05:16.322 --> 00:05:19.942
This number array works just
like useEffect, it's like hey,

73
00:05:19.942 --> 00:05:22.345
only recalculate this when num changes.

74
00:05:25.594 --> 00:05:26.940
So let's make this again.

75
00:05:29.056 --> 00:05:29.826
40, right?

76
00:05:29.826 --> 00:05:31.640
So this will take forever to re-render.

77
00:05:34.512 --> 00:05:37.713
But now, notice I can click on this as
much as I want and it goes back and forth,

78
00:05:37.713 --> 00:05:38.267
no problem.

79
00:05:41.510 --> 00:05:46.740
Okay, so, first thing, I've shown you
a very powerful performance tool,

80
00:05:46.740 --> 00:05:49.730
do not go and use and
abuse this everywhere.

81
00:05:51.040 --> 00:05:54.233
Because, what happens if later I
start expecting this to re-render?

82
00:05:54.233 --> 00:05:56.917
It's like, why is the Fibonacci
not re-rendering, right?

83
00:05:56.917 --> 00:05:58.924
This makes no sense.

84
00:05:58.924 --> 00:06:02.433
The state's updating, things are
happening, why is that not re-rendering?

85
00:06:02.433 --> 00:06:06.718
And they have to go in and track down as
like, this person used useMemo in here,

86
00:06:06.718 --> 00:06:09.180
that's why this is not re-rendering.

87
00:06:09.180 --> 00:06:13.091
You run into this new class of bugs of
why is my state not changing when I

88
00:06:13.091 --> 00:06:13.907
expect it to?

89
00:06:13.907 --> 00:06:17.890
It's not obvious, right?

90
00:06:21.421 --> 00:06:25.135
So again, with performance problems,
I've kind of reiterated this several times

91
00:06:25.135 --> 00:06:27.437
throughout all the courses
that I've taught here,

92
00:06:27.437 --> 00:06:30.853
is have a performance problem first
before you solve a performance problem.

93
00:06:30.853 --> 00:06:33.900
Because almost always you
will solve the wrong problem.

94
00:06:33.900 --> 00:06:36.340
You're thinking this is
definitely gonna be a problem.

95
00:06:36.340 --> 00:06:38.172
And one,
it wasn't ever going to be a problem.

96
00:06:38.172 --> 00:06:41.010
And two, you created a new problem for
yourself.

97
00:06:41.010 --> 00:06:41.828
So don't do that.

98
00:06:45.435 --> 00:06:50.544
So that's my advice for useMemo is,
only use useMemo when you

99
00:06:50.544 --> 00:06:57.631
actually have a performance problem that
you're explicitly solving at the moment.

100
00:06:59.609 --> 00:07:00.162
Yeah.

101
00:07:00.162 --> 00:07:03.307
&gt;&gt; So,
I'm trying to understand it really well.

102
00:07:03.307 --> 00:07:08.342
So to state in pure English what useMemo
is doing, is it's kind of saying like

103
00:07:08.342 --> 00:07:13.078
you said, is it accurate to say we're
maybe adding a hook or something?

104
00:07:13.078 --> 00:07:18.035
Or using that to say, don't render
this unless the dependency array,

105
00:07:18.035 --> 00:07:21.590
or some value in
the dependency arrays change?

106
00:07:21.590 --> 00:07:26.840
&gt;&gt; Yeah, let me tweak your phrase in
there, is don't recalculate this.

107
00:07:26.840 --> 00:07:27.750
&gt;&gt; Don't recalculate.

108
00:07:27.750 --> 00:07:29.050
&gt;&gt; Don't run this function, right?

109
00:07:29.050 --> 00:07:31.613
You're giving it a function of,

110
00:07:31.613 --> 00:07:38.040
if you need to recalculate fib here
because num changed, run this, right?

111
00:07:38.040 --> 00:07:42.450
Otherwise, just use what it was last time,
right?

112
00:07:42.450 --> 00:07:47.660
Cuz again, num didn't change between
my click here and here, right?

113
00:07:47.660 --> 00:07:50.599
But isGreen did, and
every time isGreen changes,

114
00:07:50.599 --> 00:07:53.340
it re-renders the entire component, right?

115
00:07:54.490 --> 00:07:58.892
But because num didn't change,
you just say, don't re-render this,

116
00:07:58.892 --> 00:08:00.880
just leave it as is, it's fine.

117
00:08:00.880 --> 00:08:06.612
Unlike if we were being quite silly,
we could put isStillGreen,

118
00:08:06.612 --> 00:08:09.960
I don't know, something like that.

119
00:08:11.730 --> 00:08:18.223
And then this could be isGreen, and
this could be dependent on isGreen.

120
00:08:18.223 --> 00:08:23.258
And then here down here
we would do isStillGreen.

121
00:08:28.349 --> 00:08:30.774
Now, why the hell would you do that?

122
00:08:30.774 --> 00:08:33.956
You wouldn't, this is objectively
a horrible idea, right?

123
00:08:33.956 --> 00:08:37.304
But I just wanted to show you that
you can memoize anything, right?

124
00:08:37.304 --> 00:08:41.229
This is just a function that's
going to return something, right?

125
00:08:41.229 --> 00:08:46.020
But by wrapping this in a function
instead of just putting fibonacci here,

126
00:08:47.847 --> 00:08:49.850
If you do this,
it's gonna calculate it, right?

127
00:08:49.850 --> 00:08:52.381
Because you're actively
invoking that function.

128
00:08:52.381 --> 00:08:56.765
If you put this inside of a function,
this isn't gonna get

129
00:08:56.765 --> 00:09:01.700
calculated until this little
function that we created gets run.

130
00:09:01.700 --> 00:09:05.330
So with useMemo, you're just
providing it a function of, hey,

131
00:09:05.330 --> 00:09:09.291
anytime num gets changed, run this,
and that'll be the value of fib.

132
00:09:11.246 --> 00:09:14.070
I don't know,
does that help clarify a little bit?

133
00:09:14.070 --> 00:09:14.827
Okay, cool.

134
00:09:16.422 --> 00:09:19.060
Don't do this, that's upsetting.

135
00:09:19.060 --> 00:09:21.232
I don't know why I did that.

136
00:09:21.232 --> 00:09:23.944
&gt;&gt; Well, ternary computational power.

137
00:09:23.944 --> 00:09:28.975
&gt;&gt; [LAUGH] I saw a code base
that someone was working on,

138
00:09:28.975 --> 00:09:33.194
and it's like they memoized everything.

139
00:09:33.194 --> 00:09:39.551
They actually wrote a ESLint rule that's
like, you must memoize all of your state.

140
00:09:39.551 --> 00:09:46.015
No, don't, React is really fast,
even old devices handle this just fine.

141
00:09:46.015 --> 00:09:48.611
There's no reason to make your life so
much harder.

142
00:09:50.798 --> 00:09:53.280
&gt;&gt; Actually, I have one further
understanding statement.

143
00:09:53.280 --> 00:09:55.076
&gt;&gt; Sure.
&gt;&gt; Is it essentially that useMemo, then,

144
00:09:55.076 --> 00:09:57.275
like you said,
we don't recalculate these values?

145
00:09:57.275 --> 00:10:01.134
Is that then essentially the code level,
not the DOM?

146
00:10:01.134 --> 00:10:03.031
We're not talking about render,
we're talking about in our code.

147
00:10:03.031 --> 00:10:07.108
We're not gonna update these values,
because then updating a value would

148
00:10:07.108 --> 00:10:11.783
trigger a refresh of the DOM, a rerender
of the DOM, because something had changed.

149
00:10:11.783 --> 00:10:13.537
&gt;&gt; Well, basically, this MemoComponent,

150
00:10:13.537 --> 00:10:15.580
it's gonna have to re-render a bunch,
right?

151
00:10:15.580 --> 00:10:20.604
Because, especially if this is a popular
thing for people to click on, this useMemo

152
00:10:20.604 --> 00:10:25.580
example, every time I click on this,
this function gets run, 100% of times.

153
00:10:25.580 --> 00:10:28.548
And then sometimes, even still,
even when I'm not clicking on it,

154
00:10:28.548 --> 00:10:32.150
you don't know when React is going to
choose to rerender your components, right?

155
00:10:33.790 --> 00:10:35.490
So this function is gonna get run a lot.

156
00:10:37.450 --> 00:10:40.547
And basically, it's saying, I know
this is gonna have to get run a lot.

157
00:10:40.547 --> 00:10:45.440
But as long as num is not changing,
do not calculate this again.

158
00:10:45.440 --> 00:10:48.935
Just use what it used to be,
because I know what it used to be.

159
00:10:48.935 --> 00:10:53.590
Reliably, the Fibonacci of 40 is
always going to be this, right?

160
00:10:53.590 --> 00:10:57.653
So despite the fact that MemoComponent
function is running frequently,

161
00:10:57.653 --> 00:10:59.691
don't calculate this unless this.

162
00:10:59.691 --> 00:11:04.520
Don't run this function, use what it
used to be, so that you don't have to.

163
00:11:04.520 --> 00:11:08.480
&gt;&gt; Okay, and so maybe that's why you
brought up the pure state of this.

164
00:11:08.480 --> 00:11:13.572
The fact that given to the same inputs,
you always have the same output.

165
00:11:13.572 --> 00:11:17.516
If there were for some reason,
some dependent input,

166
00:11:17.516 --> 00:11:19.755
then this wouldn't be valid.

167
00:11:19.755 --> 00:11:24.460
Because maybe useMemo wouldn't know that
something had changed when it should have,

168
00:11:24.460 --> 00:11:25.823
or something like that.

169
00:11:25.823 --> 00:11:27.377
&gt;&gt; You would just put that in here, right?

170
00:11:27.377 --> 00:11:28.700
So you can have multiple things in here.

171
00:11:28.700 --> 00:11:30.095
&gt;&gt; Okay, cuz of your dependency,
right, yeah.

172
00:11:30.095 --> 00:11:30.595
&gt;&gt; Yeah.

173
00:11:32.540 --> 00:11:33.186
&gt;&gt; Cool, thank you.

174
00:11:33.186 --> 00:11:36.090
&gt;&gt; Yep, good questions, yeah, Mark.

175
00:11:36.090 --> 00:11:40.913
&gt;&gt; When would we use this instead
of the other pattern you showed,

176
00:11:40.913 --> 00:11:46.160
which is useEffect dependency
array when something changes?

177
00:11:46.160 --> 00:11:46.660
&gt;&gt; Yeah.

178
00:11:49.175 --> 00:11:55.610
So useEffect is for causing side effects,
so this is a good question.

179
00:11:55.610 --> 00:12:01.410
useEffect is for side effects, so that's
like requesting something from an API.

180
00:12:01.410 --> 00:12:04.512
It's basically like render my function,
and then go find something for me and

181
00:12:04.512 --> 00:12:06.640
bring it back, and
then let's rerender it again.

182
00:12:06.640 --> 00:12:10.520
Or posting to an API,
maybe you're doing your analytics there.

183
00:12:10.520 --> 00:12:13.313
Or you're reaching out to something else,

184
00:12:13.313 --> 00:12:17.850
whether that's a browser API,
an API, something like that, right?

185
00:12:19.540 --> 00:12:22.803
For that, you provide it with an array
of dependencies of this is when you

186
00:12:22.803 --> 00:12:24.470
would need to do this again, right?

187
00:12:24.470 --> 00:12:27.349
The user committed some sort of action,
so call my telemetry again.

188
00:12:27.349 --> 00:12:34.170
Or the user typed something into my
search bar, run typeahead again, right?

189
00:12:34.170 --> 00:12:35.586
So it's basically saying,

190
00:12:35.586 --> 00:12:38.891
I'm causing effects based on
something else that's happening.

191
00:12:38.891 --> 00:12:42.629
And then you're providing it with
when do I wanna do this again?

192
00:12:42.629 --> 00:12:44.816
That's useEffect in a nutshell.

193
00:12:44.816 --> 00:12:48.009
useMemo is like, I have some data that's

194
00:12:48.009 --> 00:12:52.484
computationally extremely expensive for
me to acquire.

195
00:12:52.484 --> 00:12:55.354
Basically, I know what the number is, but

196
00:12:55.354 --> 00:13:00.477
turning number into the Fibonacci answer,
I know is extremely expensive.

197
00:13:00.477 --> 00:13:06.144
And I only wanna do it when I have to.

198
00:13:06.144 --> 00:13:10.141
So in other words,
useMemo is purely for performance, 100%,

199
00:13:10.141 --> 00:13:12.533
it's just performance optimization.

200
00:13:12.533 --> 00:13:16.792
You don't use it for anything else ever.

201
00:13:16.792 --> 00:13:19.548
Yeah, I feel okay in saying that.

202
00:13:19.548 --> 00:13:24.217
Don't use it for anything else ever,
otherwise you're abusing the tool.

203
00:13:24.217 --> 00:13:27.707
useEffect, it's much more
generally applicable,

204
00:13:27.707 --> 00:13:32.681
it's like I have something that I need
to do outside of my normal rendering.

205
00:13:33.853 --> 00:13:38.510
You typically wouldn't use useEffect for
performance optimizations.

206
00:13:38.510 --> 00:13:39.595
I think that's fair to say.

207
00:13:42.526 --> 00:13:44.421
I'll have to think more about that one.

208
00:13:44.421 --> 00:13:46.570
Yeah, you have a question?

209
00:13:46.570 --> 00:13:49.281
&gt;&gt; This explanation may not make sense,
but it helps in my brain.

210
00:13:49.281 --> 00:13:53.470
useMemo has to exist because we're using
functional components which have closure

211
00:13:53.470 --> 00:13:54.886
in the call stack and stuff.

212
00:13:54.886 --> 00:13:57.860
And you're kind of forcing it
to do something it wouldn't.

213
00:13:57.860 --> 00:14:00.699
Like a function would redefine
a variable every time,

214
00:14:00.699 --> 00:14:03.114
and we're saying, please, don't do that.

215
00:14:03.114 --> 00:14:07.463
&gt;&gt; Yeah, I think that's fair to say.

216
00:14:07.463 --> 00:14:12.047
You're trying to move something out
of the pop path here, basically.

217
00:14:15.102 --> 00:14:15.680
Okay.

218
00:14:19.250 --> 00:14:21.261
I think that's fair.

219
00:14:21.261 --> 00:14:28.605
Let's go on to useCallback, right, yeah.

220
00:14:28.605 --> 00:14:30.441
&gt;&gt; I think you covered this yesterday, but

221
00:14:30.441 --> 00:14:33.840
why are the hooks always placed
on the top of the function?

222
00:14:33.840 --> 00:14:36.997
&gt;&gt; They don't have to be,
but it's a really good idea.

223
00:14:36.997 --> 00:14:42.360
For me, it's just habit, so that I look
at the top of the function component,

224
00:14:42.360 --> 00:14:46.932
and I can see here's all the hooks
that Brian's currently using.

225
00:14:46.932 --> 00:14:50.100
But the only thing that you have to,
is an absolute must,

226
00:14:50.100 --> 00:14:53.599
is you gotta keep your hooks out
of if statements and for loops.

227
00:14:53.599 --> 00:14:57.265
Or while loops or
anything that has some sort of

228
00:14:57.265 --> 00:15:01.216
variable amount of times
that it might be called.

229
00:15:01.216 --> 00:15:04.696
By putting in an if statement, it might
only be called one through zero, right?

230
00:15:04.696 --> 00:15:09.582
Which is bad, or if I call it in a for
loop, it might be called ten times,

231
00:15:09.582 --> 00:15:12.280
it might be called five times, right?

232
00:15:13.710 --> 00:15:18.858
Now, I've seen people do dumb things like,
well,

233
00:15:18.858 --> 00:15:24.370
I know if I do for let i = 0,
i is less than 10, right?

234
00:15:26.010 --> 00:15:31.300
i++, and they try and get cute with this
and make an object or an array of these.

235
00:15:32.420 --> 00:15:33.936
Just don't, just put ten lines of code.

236
00:15:36.516 --> 00:15:39.713
I don't know, if you were making 100
hooks at the same time, I don't know,

237
00:15:39.713 --> 00:15:42.040
just make one hook that that's an array,
right?

238
00:15:42.040 --> 00:15:46.085
Instead of trying to make 100,
yeah, anyway, it's dumb.

239
00:15:50.405 --> 00:15:53.850
I feel okay saying never
put hooks in if statements,

240
00:15:53.850 --> 00:15:56.997
never put hooks in array or
in loops of any kind.

241
00:15:59.106 --> 00:16:03.287
There's a different way you could rethink
the problem that would lead to using one

242
00:16:03.287 --> 00:16:04.691
hook instead of ten hooks.

243
00:16:06.278 --> 00:16:08.053
Okay, any other questions, yeah.

244
00:16:08.053 --> 00:16:10.151
&gt;&gt; I was gonna say I've seen people,
too, use objects.

245
00:16:10.151 --> 00:16:13.242
Like if you have ten useStates,
then you just switch to an object.

246
00:16:13.242 --> 00:16:16.485
&gt;&gt; Yeah, I'm like use reducer or
something like that, yeah, totally.

