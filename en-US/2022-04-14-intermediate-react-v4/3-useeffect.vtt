WEBVTT

1
00:00:00.188 --> 00:00:06.071
So let's date let's move on to effect for
use effect.

2
00:00:06.071 --> 00:00:08.955
So you can see here,
this is just a clock at the moment, right?

3
00:00:08.955 --> 00:00:10.784
It's just counting up.

4
00:00:10.784 --> 00:00:15.284
It's currently 10:21AM here

5
00:00:15.284 --> 00:00:19.637
in kind of hazy gray Minneapolis.

6
00:00:19.637 --> 00:00:22.616
So let's go over what
this is actually doing.

7
00:00:22.616 --> 00:00:25.096
It's using state, so
we're using new state again.

8
00:00:25.096 --> 00:00:29.590
And then it's just creating the current
date here as the initial state.

9
00:00:29.590 --> 00:00:36.989
And then it's doing a timer here,
which is a set timeout.

10
00:00:36.989 --> 00:00:38.679
And it's setting the time so

11
00:00:38.679 --> 00:00:43.045
it's calling the set time on use state
with the new date every one second,

12
00:00:43.045 --> 00:00:47.076
right, so basically it's just
advancing the clock every second.

13
00:00:47.076 --> 00:00:52.178
Okay we'll talk about this in just
a second ignore that line but

14
00:00:52.178 --> 00:00:58.146
that's what use effect is doing is is
basically creating a side effect for

15
00:00:58.146 --> 00:01:01.239
your particular component, right?

16
00:01:01.239 --> 00:01:04.733
We couldn't do this inside of the render
because we want this to be scheduled

17
00:01:04.733 --> 00:01:06.269
outside of the rendering cycle.

18
00:01:06.269 --> 00:01:09.135
And then every time that we
call set time from use to here,

19
00:01:09.135 --> 00:01:11.367
react knows, something has changed.

20
00:01:11.367 --> 00:01:12.832
I need to rerender.

21
00:01:12.832 --> 00:01:14.525
So that's what it's doing here.

22
00:01:14.525 --> 00:01:19.442
Every second it's re rendering the clock
so you could do things like make this

23
00:01:19.442 --> 00:01:24.134
like render faster than that which
would be pointless because this isn't

24
00:01:24.134 --> 00:01:28.219
always going to change or
we can make it change slower than that so

25
00:01:28.219 --> 00:01:31.345
you can see it'll start
skipping numbers here.

26
00:01:37.420 --> 00:01:39.276
Okay, and then we're here down,

27
00:01:39.276 --> 00:01:42.988
the component is actually just
returning time to local time string,

28
00:01:42.988 --> 00:01:46.576
which is just like a date function
built into JavaScript, right?

29
00:01:46.576 --> 00:01:50.778
Which is where it's getting
the 10:23AM formatted string.

30
00:01:53.450 --> 00:01:58.343
Okay so, Before I talk about

31
00:01:58.343 --> 00:02:01.588
this line does anyone have any questions
about what use effect is doing.

32
00:02:04.080 --> 00:02:07.413
This is basically where you wanna
do things that are outside of like

33
00:02:07.413 --> 00:02:08.789
your normal render cycle.

34
00:02:08.789 --> 00:02:11.630
So if you're coming from like
an older version of React,

35
00:02:11.630 --> 00:02:14.647
this is where you want to do
like component did mount things,

36
00:02:14.647 --> 00:02:17.193
component will unmount,
component did unmount,

37
00:02:17.193 --> 00:02:20.943
those kinds of things are gonna be kind
of located inside of Effects right?

38
00:02:20.943 --> 00:02:23.575
Which is what that use effect
function here is doing.,

39
00:02:28.863 --> 00:02:31.825
Okay, and then something else
this using effect is doing,

40
00:02:31.825 --> 00:02:35.212
is you notice that it keeps getting
run over and over again, right?

41
00:02:35.212 --> 00:02:37.062
It's getting run every second.

42
00:02:37.062 --> 00:02:38.868
Why is that?

43
00:02:38.868 --> 00:02:44.114
Well actually didn't give it any
dependencies so basically anytime any

44
00:02:44.114 --> 00:02:49.793
of the hook data changes in this it's
going to schedule itself again, right?

45
00:02:49.793 --> 00:02:54.650
As opposed if I give it this notice
is actually going to stop counting

46
00:02:54.650 --> 00:02:59.509
because this means it's gonna run
once now keep in mind that anytime

47
00:02:59.509 --> 00:03:04.539
that I type in this code sandbox
automatically restarts everything so

48
00:03:04.539 --> 00:03:11.448
if I just start putting something in here
notice it will update Right, and that's

49
00:03:11.448 --> 00:03:14.287
just because code sandbox is runs it
every time that I type something in here.

50
00:03:14.287 --> 00:03:17.810
So that's what this is doing this
is a an array of dependencies.

51
00:03:17.810 --> 00:03:23.356
Now if I put time back in here,
this will start updating again, why?

52
00:03:23.356 --> 00:03:26.886
Because now it is updating
every time that time updates,

53
00:03:26.886 --> 00:03:28.878
which is every second, right?

54
00:03:28.878 --> 00:03:34.457
Which is why this is keeps getting
rounding every single second but

55
00:03:34.457 --> 00:03:39.149
if I put like set time in here,
set time is not changing.

56
00:03:39.149 --> 00:03:40.664
It's just a function right?

57
00:03:40.664 --> 00:03:43.645
So this then stops updating again.

58
00:03:43.645 --> 00:03:48.242
So actually the better way to write this
would be time because this has an explicit

59
00:03:48.242 --> 00:03:49.471
dependency on time.

60
00:03:49.471 --> 00:03:52.006
If I then later go back and
add more hooks,

61
00:03:52.006 --> 00:03:54.477
it'll still only be dependent on time.

62
00:03:54.477 --> 00:03:58.246
So it's better to be explicit
with your dependencies right or

63
00:03:58.246 --> 00:04:00.646
when you want this effect to run again.

64
00:04:00.646 --> 00:04:02.763
Because if I just leave it off,

65
00:04:02.763 --> 00:04:08.139
it's implicitly saying run this whenever
anything changes, which works for

66
00:04:08.139 --> 00:04:13.351
this because I just have one other use
state hook in this but if I ever expanded

67
00:04:13.351 --> 00:04:18.018
the scope of this then it would work
differently which could be bad.

68
00:04:18.018 --> 00:04:24.190
Okay let's talk about line eight here
whenever you're running a Timer right so

69
00:04:24.190 --> 00:04:29.441
you're basically scheduling yourself
to run a second in the future

70
00:04:29.441 --> 00:04:34.413
what happens if I unmount the component
in the middle of that this

71
00:04:34.413 --> 00:04:39.501
this timer is still scheduler is
still going to run in the future.

72
00:04:39.501 --> 00:04:44.253
So clear timeout allows you to just take
in whatever the result of set timeout is

73
00:04:44.253 --> 00:04:48.141
set timeout gives you back a number
that corresponds to the timer

74
00:04:48.141 --> 00:04:51.684
that you're actually running so
if you actually look at.

75
00:04:51.684 --> 00:04:56.122
Console.log timer.

76
00:04:56.122 --> 00:04:57.742
I think this just ends
up being a number right?

77
00:04:57.742 --> 00:04:58.489
It is right.

78
00:04:58.489 --> 00:05:01.212
So this is just a number
that's getting put out here.

79
00:05:01.212 --> 00:05:04.698
But if I say clear timeout with
the correct timer number here,

80
00:05:04.698 --> 00:05:07.927
it'll prevent the timer that
I scheduled from running.

81
00:05:07.927 --> 00:05:12.732
In other words, this function here that
you return at the end of an effect Is what

82
00:05:12.732 --> 00:05:14.895
gets run to clean up the component.

83
00:05:14.895 --> 00:05:19.245
So if I later go and unmounts the effect
component, which you can see my code base,

84
00:05:19.245 --> 00:05:20.328
I actually don't.

85
00:05:20.328 --> 00:05:26.119
So it's kind of unnecessary, but if I did,
I would want to clear that timeouts so

86
00:05:26.119 --> 00:05:31.079
that I was not calling set time when
this component went out of scope.

87
00:05:31.079 --> 00:05:35.047
Now is it a big deal if
it actually does run?

88
00:05:35.047 --> 00:05:39.205
No it's not going to really change that
much but imagine if you were doing maybe

89
00:05:39.205 --> 00:05:43.615
heavy computations or something like that
and you wanted to cancel that because you

90
00:05:43.615 --> 00:05:47.403
unmounted the component and
that computation is no longer effective.

91
00:05:47.403 --> 00:05:52.011
Or maybe you have like some components
making like a sequence of API requests and

92
00:05:52.011 --> 00:05:56.895
you want to like interrupt that sequence
right there's a bunch of reasons why you'd

93
00:05:56.895 --> 00:05:59.531
want to clean that up or
another good reason.

94
00:05:59.531 --> 00:06:04.024
Let's say I had to write a component
to connect react to a jQuery like,

95
00:06:04.024 --> 00:06:08.228
I don't know, like date picker or
something like that, right?

96
00:06:08.228 --> 00:06:11.938
The way you would do that is you'd
actually control that here and

97
00:06:11.938 --> 00:06:15.785
then from an effect, whenever you
had to unmount that component,

98
00:06:15.785 --> 00:06:18.620
you'd use that to clean up your jQuery,
right?

99
00:06:18.620 --> 00:06:20.704
Otherwise you're gonna get memory leaks.

100
00:06:20.704 --> 00:06:25.047
99 times out of 100 that's even
go with 999 times out of 100.

101
00:06:25.047 --> 00:06:28.326
You're doing this so
you don't have memory leaks, right?

102
00:06:28.326 --> 00:06:34.308
That's what most of this like returned
function is cleanup stuff is for

103
00:06:34.308 --> 00:06:37.006
It's to prevent memory leaks.

104
00:06:37.006 --> 00:06:41.130
Kind of an advanced use case but you
chose to watch intermediate react not me.

105
00:06:41.130 --> 00:06:44.212
[LAUGH] Any questions?

106
00:06:44.212 --> 00:06:47.298
&gt;&gt; Is that comment specific
to the use effect hook then?

107
00:06:47.298 --> 00:06:48.119
&gt;&gt; Yes.

108
00:06:48.119 --> 00:06:51.596
&gt;&gt; Is the only the clock we rendered or
the whole page?

109
00:06:51.596 --> 00:06:56.659
&gt;&gt; Only, so React is really intelligent
about what it chooses to rerender.

110
00:06:56.659 --> 00:07:01.571
So in this particular case it is
only the effect component that's

111
00:07:01.571 --> 00:07:04.876
being re rendered right so
it's not like for

112
00:07:04.876 --> 00:07:09.701
example this use state one is not
being re rendered because React

113
00:07:09.701 --> 00:07:14.464
is smart to see like okay the effect
had a state change, right?

114
00:07:14.464 --> 00:07:18.163
Because I know data doesn't flow
up right cuz of one way data flow.

115
00:07:18.163 --> 00:07:22.709
I can just rerender the effect component
and leave everything else as is.

116
00:07:22.709 --> 00:07:25.024
That's a good question.

117
00:07:25.024 --> 00:07:27.794
Yeah,
&gt;&gt; The effects are called a second

118
00:07:27.794 --> 00:07:29.789
time does the first timer clear?

119
00:07:32.866 --> 00:07:38.618
&gt;&gt; No, so
it's been called every second, right?

120
00:07:38.618 --> 00:07:42.279
But I think I can see what
the person's asking is like,

121
00:07:42.279 --> 00:07:46.976
what happens if there's overlap,
right that it runs again before cuz

122
00:07:46.976 --> 00:07:50.657
another hook could change or
cause it to render again.

123
00:07:50.657 --> 00:07:53.709
There's nothing here that would
clean up that code right,

124
00:07:53.709 --> 00:07:57.739
there's nothing here that would prevent
it from running which means you could

125
00:07:57.739 --> 00:08:00.077
definitely run into race conditions there.

126
00:08:00.077 --> 00:08:04.663
In which case you just have to be like
more defensively coding to make sure that

127
00:08:04.663 --> 00:08:08.827
your race conditions don't race,
is that how you say that I think so,

128
00:08:08.827 --> 00:08:10.259
I'm sticking with it.

129
00:08:13.758 --> 00:08:14.679
Yeah?
&gt;&gt; I do have

130
00:08:14.679 --> 00:08:18.904
a bit of a tangential question since
we just mentioned race conditions.

131
00:08:18.904 --> 00:08:23.792
I find maybe this is colored because
I'm JavaScript developers worked

132
00:08:23.792 --> 00:08:26.162
in old JavaScript for a while too.

133
00:08:26.162 --> 00:08:27.676
And maybe you haven't had
a lot of these updates.

134
00:08:27.676 --> 00:08:30.862
But for example,
we use set time a lot in these examples.

135
00:08:30.862 --> 00:08:34.389
And I'm curious to know a lot of
my work and a lot of problems come

136
00:08:34.389 --> 00:08:38.716
by in like loading assets and having long
calls that take a while to resolve and

137
00:08:38.716 --> 00:08:40.862
then dependent assets based on that.

138
00:08:40.862 --> 00:08:44.083
It doesn't seem like that's
ever come up here, but so far,

139
00:08:44.083 --> 00:08:46.239
obviously we're doing simple things.

140
00:08:46.239 --> 00:08:50.539
In a general sense do you find do you use
like await async await a lot to deal with

141
00:08:50.539 --> 00:08:52.457
those things or how does react So,

142
00:08:52.457 --> 00:08:56.254
what tools or how would you approach
kinda timing things like that?

143
00:08:56.254 --> 00:08:57.385
I'm sure.

144
00:08:57.385 --> 00:09:01.751
&gt;&gt; I mean I think the you can kinda
distill that question down is like I have

145
00:09:01.751 --> 00:09:04.571
to do a synchronous orchestration, right?

146
00:09:04.571 --> 00:09:09.489
And there's several very
valid approaches to that.

147
00:09:09.489 --> 00:09:12.129
If you have like very
complicated workflows,

148
00:09:12.129 --> 00:09:16.943
we're gonna talk about Redux later,
that's actually where Redox really shines.

149
00:09:16.943 --> 00:09:22.714
You can do things with Redox sagas
that make it really nice to visualize.

150
00:09:22.714 --> 00:09:27.056
Do this, do this, do this maybe do this,
maybe do that, right.

151
00:09:27.056 --> 00:09:32.113
That's is the use case of Redox,
that is if you need to do stuff like,

152
00:09:32.113 --> 00:09:36.911
that if it's really just do a call,
wait get the answer do a second

153
00:09:36.911 --> 00:09:41.731
call writing an async await function
is gonna do that just great.

154
00:09:45.464 --> 00:09:48.338
Yeah, I think that that's I'm
satisfied with that answer.

155
00:09:48.338 --> 00:09:49.067
&gt;&gt; I appreciate that.

156
00:09:49.067 --> 00:09:50.698
&gt;&gt; Yes.

157
00:09:50.698 --> 00:09:54.147
Any other questions?

158
00:09:54.147 --> 00:09:57.601
It's good for
you to really understand state and effect.

159
00:09:57.601 --> 00:10:01.045
Cuz those are by far
the two most used hooks

160
00:10:01.045 --> 00:10:04.299
everything else is a pretty long tail.

161
00:10:04.299 --> 00:10:08.410
Have you ever seen like the pattern of
usage with language where there's the word

162
00:10:08.410 --> 00:10:12.158
that's used the most and then there's
these worthies the second most and

163
00:10:12.158 --> 00:10:15.604
third most it's like this curve that
goes on to a really long tail and

164
00:10:15.604 --> 00:10:18.409
it applies to way more things
than you think it should.

165
00:10:18.409 --> 00:10:22.204
Definitely applies to hook right
there's like state here effect here.

166
00:10:22.204 --> 00:10:26.496
Maybe reducer because there's
people that missed Redux.

167
00:10:26.496 --> 00:10:29.612
And then there's like a long
tail after that right?

168
00:10:29.612 --> 00:10:32.346
Or context maybe I don't
know one of those.

169
00:10:32.346 --> 00:10:35.491
Yeah, that curve definitely applies here.

170
00:10:35.491 --> 00:10:36.785
Yeah, Mark.

171
00:10:36.785 --> 00:10:40.641
&gt;&gt; If I didn't use use effect,
but using set timeout,

172
00:10:40.641 --> 00:10:44.595
how can I clear the timeout and
prevent a memory like.

173
00:10:44.595 --> 00:10:48.035
&gt;&gt; You can't, Or

174
00:10:48.035 --> 00:10:53.193
you shouldn't because that would
be creating a side effect in

175
00:10:53.193 --> 00:10:58.660
your render function which is don't,
please God don't [LAUGH].

176
00:10:58.660 --> 00:11:01.706
The point of use effect is to
contain side effects, right?

177
00:11:01.706 --> 00:11:04.878
And if you're asked me is like how do I
contain a side effect without the thing

178
00:11:04.878 --> 00:11:06.476
that contains side effects, right?

179
00:11:06.476 --> 00:11:07.736
That's, you can't or

180
00:11:07.736 --> 00:11:12.087
you shouldn't he probably could figure out
a way to do it and it would be a bad idea.

181
00:11:12.087 --> 00:11:15.737
There's other functions we could
use here like layout effect

182
00:11:15.737 --> 00:11:18.614
that technically would be
able to handle it, but

183
00:11:18.614 --> 00:11:22.282
he would be bending the tool to
use it in the wrong way, right?

184
00:11:22.282 --> 00:11:24.905
It'd be like using
a screwdriver as a hammer

185
00:11:24.905 --> 00:11:27.935
&gt;&gt; Is it common to update the state and

186
00:11:27.935 --> 00:11:33.277
use effect and also have that
state in the dependency array?

187
00:11:33.277 --> 00:11:38.292
&gt;&gt; Yes so the question is is
here we're updating time right

188
00:11:38.292 --> 00:11:43.745
we're using set time and
we should have here time like this.

189
00:11:43.745 --> 00:11:49.048
That is a really good rule of
thumb here if you see your self

190
00:11:49.048 --> 00:11:54.907
referencing either by setting it or
reading from almost always

191
00:11:54.907 --> 00:12:00.453
is going to be a dependency
down here in your dependencies.

192
00:12:00.453 --> 00:12:03.555
It would be the exception that
it would not be down there.

193
00:12:03.555 --> 00:12:08.837
So there's a ES lint rule called the React
hooks rule put out it's an official

194
00:12:08.837 --> 00:12:14.461
ES lint package from the React core team
and it actually enforces that you do that.

195
00:12:14.461 --> 00:12:15.424
So actually,

196
00:12:15.424 --> 00:12:20.491
if the ES lint rule would actually require
me to put in here set time as well.

197
00:12:20.491 --> 00:12:23.406
Stop that, there we go set time.

198
00:12:23.406 --> 00:12:28.463
Cuz technically if set time changed,
it would also fact that it won't because

199
00:12:28.463 --> 00:12:33.595
it's a function and it wouldn't do that
but the ES lint rule would require you to

200
00:12:33.595 --> 00:12:38.755
down here to put that yeah that's that's
a astute that's a good observation.

