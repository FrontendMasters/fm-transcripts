WEBVTT

1
00:00:00.630 --> 00:00:03.235
This one's a little bit more
familiar to many of you.

2
00:00:03.235 --> 00:00:06.397
We're gonna talk about useReducer here for
a second.

3
00:00:06.397 --> 00:00:12.288
If you are a Redux dev already, this
is going to feel super familiar to you.

4
00:00:12.288 --> 00:00:15.756
If you're not,
it's going to by the end of this course.

5
00:00:19.536 --> 00:00:24.587
So let's talk about this, so
we have this useReducer example here.

6
00:00:24.587 --> 00:00:26.809
And if you click +,
it will make it more red.

7
00:00:26.809 --> 00:00:29.653
If you click green,
it will make it more green.

8
00:00:29.653 --> 00:00:32.887
If you click blue,
it will make it more blue.

9
00:00:32.887 --> 00:00:36.281
Very, very technical art here.

10
00:00:39.029 --> 00:00:42.307
Best kind of art.

11
00:00:42.307 --> 00:00:47.216
The idea with a store in a Redux
sort of fashion is that you

12
00:00:47.216 --> 00:00:52.033
have a central object that
contains all of your state.

13
00:00:52.033 --> 00:00:56.299
And then the way that you affect that
state is that you pass it an action, and

14
00:00:56.299 --> 00:01:00.786
then it does something based on the
action, and that's how you update state.

15
00:01:00.786 --> 00:01:04.816
So let's take a look at how that works.

16
00:01:07.667 --> 00:01:11.855
So I have RGB, right, red, green,
blue, that's where that's coming from.

17
00:01:11.855 --> 00:01:16.835
And that's going to be my state that
I'm keeping track of here, right?

18
00:01:16.835 --> 00:01:19.840
And then I have a function
here called dispatch,

19
00:01:19.840 --> 00:01:23.370
which allows me to dispatch
action objects to the store.

20
00:01:23.370 --> 00:01:25.880
And then I useReducer function here.

21
00:01:25.880 --> 00:01:29.650
So my reducer I have up here,
which will go over here in just a second.

22
00:01:31.110 --> 00:01:35.222
A reducer function,
all does is it takes in a state,

23
00:01:35.222 --> 00:01:40.468
it takes in an action, and
it returns to the new state, full stop.

24
00:01:40.468 --> 00:01:44.239
So my initial state here is,
you can see it's black, right?

25
00:01:44.239 --> 00:01:48.556
So it's red 0, green 0, blue 0.

26
00:01:48.556 --> 00:01:52.069
And then if someone clicks +r, right?

27
00:01:52.069 --> 00:01:57.386
This got 50 more red, and
that's a number between 0 and 255.

28
00:01:57.386 --> 00:02:02.740
So now it's 100, 150, 200, 250,

29
00:02:02.740 --> 00:02:08.487
255, and
then it doesn't go above that, right?

30
00:02:08.487 --> 00:02:12.873
So the way that works is
every time that I click +r,

31
00:02:12.873 --> 00:02:20.062
you can see down here my event listeners,
It is dispatching a,

32
00:02:22.046 --> 00:02:26.180
Action of type increment r, increment red.

33
00:02:28.020 --> 00:02:33.550
So this object is getting
passed in to the reducer.

34
00:02:33.550 --> 00:02:39.581
So it calls this function here,
my reducer, with the current state, right?

35
00:02:39.581 --> 00:02:42.300
So at the beginning,
let's just kinda diagram it out.

36
00:02:44.110 --> 00:02:51.390
At the beginning, it's r: 0,
g: 0, b: 0, right?

37
00:02:51.390 --> 00:02:52.910
That's the initial state.

38
00:02:52.910 --> 00:02:55.247
So that's what's being
passed in here to state.

39
00:02:55.247 --> 00:03:01.137
And then if I click +r, it's dispatching,

40
00:03:01.137 --> 00:03:04.237
let's just say state,

41
00:03:04.237 --> 00:03:09.668
an action of type INCREMENT_R, right?

42
00:03:11.946 --> 00:03:13.350
So that's what action is.

43
00:03:14.380 --> 00:03:16.340
So then it's gonna do a switch statement.

44
00:03:16.340 --> 00:03:19.570
Many of us have seen switch statements,
it's just a normal JavaScript thing.

45
00:03:19.570 --> 00:03:23.986
I think the only time I use switch
statements is in conjunction with reducers

46
00:03:23.986 --> 00:03:24.610
or Redux.

47
00:03:25.700 --> 00:03:30.211
Otherwise, I'm just lazy and
use if else statements, okay?

48
00:03:30.211 --> 00:03:32.062
So I switch on the action.type.

49
00:03:32.062 --> 00:03:36.461
So here I have INCREMENT_R, so
it's gonna hit this first case, right?

50
00:03:36.461 --> 00:03:38.449
So it's gonna execute here.

51
00:03:38.449 --> 00:03:43.172
And then it's going to return a new state,
so it's an empty object,

52
00:03:43.172 --> 00:03:45.080
that's critical here.

53
00:03:45.080 --> 00:03:46.382
I want you to underscore that fact.

54
00:03:46.382 --> 00:03:48.237
It's critical that it's a new object and

55
00:03:48.237 --> 00:03:51.220
that you're not just
affecting the old state, why?

56
00:03:51.220 --> 00:03:54.770
Because if it's the same object,
Redux or not Redux, in this case,

57
00:03:54.770 --> 00:03:56.500
essentially Redux, who cares?

58
00:03:56.500 --> 00:04:00.205
But the reducer here is gonna say, this
is the same object that I passed to you,

59
00:04:00.205 --> 00:04:01.682
you didn't update anything.

60
00:04:01.682 --> 00:04:03.569
And it doesn't update.

61
00:04:03.569 --> 00:04:07.326
So the way that you signify to
React is like, please go and

62
00:04:07.326 --> 00:04:09.925
update this, you give it a new object.

63
00:04:09.925 --> 00:04:15.060
Cuz it's just doing a shallow triple
equals equality check to see if it's new.

64
00:04:15.060 --> 00:04:17.133
If it's new, it updates.

65
00:04:17.133 --> 00:04:21.680
If it's not new,
it just leaves it the same, okay?

66
00:04:21.680 --> 00:04:26.127
So I pass on the old state and
then I wrote this little

67
00:04:26.127 --> 00:04:30.896
function here that's dumb and
has a bunch of.

68
00:04:30.896 --> 00:04:34.540
So basically, it makes sure that a number
of states between 0 and 255, that's all.

69
00:04:35.780 --> 00:04:38.457
So if this is 300, it will return to 255.

70
00:04:38.457 --> 00:04:44.528
If you ask it to be -50, it return 0,
that's all this does, okay?

71
00:04:44.528 --> 00:04:48.910
And so it adds the step,
the step here I've just have 50, but

72
00:04:48.910 --> 00:04:54.959
you could change this to be 255 and this
would all sudden get very dramatic, right?

73
00:04:54.959 --> 00:04:58.579
So now if I click -, +, -, +, right?

74
00:04:58.579 --> 00:05:01.302
Now, it's going between
all the color seamlessly.

75
00:05:07.644 --> 00:05:10.620
Okay, that's it, that's all a reducer is.

76
00:05:12.120 --> 00:05:17.260
Now you might ask, this seems like
this is useState with extra steps.

77
00:05:17.260 --> 00:05:21.020
That's because it is
useState with extra steps.

78
00:05:21.020 --> 00:05:24.340
Why, why do you care about this?

79
00:05:24.340 --> 00:05:30.860
Well, most bugs are caused by not
accounting for change correctly, right?

80
00:05:32.060 --> 00:05:36.310
Or not handling deltas and
state very well.

81
00:05:36.310 --> 00:05:40.989
You can say basically all bugs
arise from that somewhat.

82
00:05:40.989 --> 00:05:44.720
So the idea behind useReducer is,

83
00:05:44.720 --> 00:05:50.261
let's break this apart and
then make it testable.

84
00:05:50.261 --> 00:05:57.191
That's the core value concept here is now,
this reducer thing,

85
00:05:57.191 --> 00:06:02.363
it's pure, right, and
it has no side effects.

86
00:06:02.363 --> 00:06:05.902
And if you give it the same state and
the same action,

87
00:06:05.902 --> 00:06:10.570
you'll get the same answer
every single time, right?

88
00:06:10.570 --> 00:06:15.867
So if I give it state r: 0, g: 0, b: 0,

89
00:06:15.867 --> 00:06:20.452
and I give it an INCREMENT_R action,

90
00:06:20.452 --> 00:06:26.470
every single time,
I'm going to get back state,

91
00:06:26.470 --> 00:06:31.470
r: 50, g: 0, b: 0, right?

92
00:06:31.470 --> 00:06:34.020
All right,
we'll call this the new state, right?

93
00:06:36.820 --> 00:06:40.740
This is the correct answer
given these two things, right?

94
00:06:40.740 --> 00:06:44.878
If I call this ten trillion times with
these exact same two parameters, I get

95
00:06:44.878 --> 00:06:49.780
the same answer every single time, which
means this is extremely testable, right?

96
00:06:49.780 --> 00:06:53.635
So I can write a unit test to account for
change in my application,

97
00:06:53.635 --> 00:06:59.170
which eliminates most classes of bugs that
you're gonna get in your application.

98
00:06:59.170 --> 00:07:00.610
That's why people really like this.

99
00:07:02.420 --> 00:07:05.160
Now you ask me how often
do I use useReducer?

100
00:07:05.160 --> 00:07:09.814
Almost never, cuz I'm extremely lazy.

101
00:07:09.814 --> 00:07:14.168
But for something like this, where it's
like a kind of a state machine, I mean,

102
00:07:14.168 --> 00:07:18.290
I guess basically everything can
be modeled as a state machine.

103
00:07:18.290 --> 00:07:21.290
But it's like a very
obvious state machine here.

104
00:07:23.670 --> 00:07:25.330
This works extremely well, right?

105
00:07:26.910 --> 00:07:31.238
This is a good use case for it.

106
00:07:31.238 --> 00:07:35.294
But there are people out there that
say I will never use useState ever,

107
00:07:35.294 --> 00:07:37.026
I will only ever useReducer.

108
00:07:37.026 --> 00:07:41.824
Seems extreme to me, but
you can make a use case for it for sure.

109
00:07:45.259 --> 00:07:47.983
Okay, any questions about useReducer?

110
00:07:47.983 --> 00:07:52.568
&gt;&gt; Yeah, I was just gonna say the other
good example I've seen is if you're making

111
00:07:52.568 --> 00:07:53.740
a web-based game.

112
00:07:53.740 --> 00:07:57.048
If you're making a game in React and
you want to track the game state,

113
00:07:57.048 --> 00:08:00.660
then you can have the player's health,
their location within the world.

114
00:08:00.660 --> 00:08:04.521
And then it becomes a really good way
to even just organize all the different

115
00:08:04.521 --> 00:08:07.350
actions that can occur in the game and
track the state.

116
00:08:07.350 --> 00:08:13.950
&gt;&gt; Yep, for sure, at that point, I'd
probably use something thing like XState.

117
00:08:13.950 --> 00:08:19.953
So there is a class I believe on
state machines on Frontend Masters,

118
00:08:19.953 --> 00:08:22.491
right, from Davidkpiano.

119
00:08:22.491 --> 00:08:23.545
XState is awesome,

120
00:08:23.545 --> 00:08:27.644
it basically prevents your app from
getting into impossible states, right?

121
00:08:27.644 --> 00:08:30.560
Which is a problem that,
a game is a good example, right?

122
00:08:30.560 --> 00:08:33.060
You can't both be alive and
dead at the same time.

123
00:08:34.880 --> 00:08:39.898
And so an X state will prevent you
from being in impossible states.

124
00:08:39.898 --> 00:08:43.510
Cuz you have to describe all
of your changes explicitly and

125
00:08:43.510 --> 00:08:46.762
you have to describe your dependent state,
right?

126
00:08:46.762 --> 00:08:49.066
So if you're dead,
then your health is 0, right?

127
00:08:49.066 --> 00:08:55.738
And you can't be dead and
have health of 100, stuff like that, yeah.

128
00:08:55.738 --> 00:09:01.427
&gt;&gt; There is a question around
the object.assign, first argument

129
00:09:01.427 --> 00:09:06.260
being an empty curly brace that's-
&gt;&gt; Yeah, we talked about that.

130
00:09:06.260 --> 00:09:10.612
&gt;&gt; So yeah, to create a new object,
[CROSSTALK].

131
00:09:10.612 --> 00:09:11.260
&gt;&gt; Yeah.

132
00:09:11.260 --> 00:09:14.192
&gt;&gt; Always operating on something fresh and
new.

133
00:09:14.192 --> 00:09:15.316
&gt;&gt; Yeah, I mean,

134
00:09:15.316 --> 00:09:21.029
I'm pretty sure if I just do this where
now the state is gonna be the same state.

135
00:09:22.450 --> 00:09:28.897
And I do this, no, I forked it, well.

136
00:09:28.897 --> 00:09:33.379
If I do this now, it is modifying
the state and that number is different.

137
00:09:33.379 --> 00:09:37.700
So if I click green there,
it actually, now it's red, right,

138
00:09:37.700 --> 00:09:39.872
which doesn't make any sense.

139
00:09:39.872 --> 00:09:42.147
But it's because every time
that I was clicking this,

140
00:09:42.147 --> 00:09:44.225
it was getting the same state back,
is like okay,

141
00:09:44.225 --> 00:09:47.804
you didn't change anything cuz it's not
actually doing any sort of depth analysis.

142
00:09:47.804 --> 00:09:51.115
It's just doing a simple equality check.

143
00:09:51.115 --> 00:09:56.087
But now that I do this, it'll actually
modify every single time now.

