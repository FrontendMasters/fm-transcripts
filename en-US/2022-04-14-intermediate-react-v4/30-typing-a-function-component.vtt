WEBVTT

1
00:00:00.291 --> 00:00:04.008
We're gonna go do SearchParams now,

2
00:00:04.008 --> 00:00:08.888
we're gonna rename this
to SearchParams.tsx,

3
00:00:08.888 --> 00:00:12.618
play the game, play the whack moles.

4
00:00:12.618 --> 00:00:16.123
All right, so the next thing we're
gonna import is a function component.

5
00:00:20.090 --> 00:00:26.079
Okay, and it's gonna always be upset
about results until we fix that.

6
00:00:26.079 --> 00:00:26.649
That's fine.

7
00:00:26.649 --> 00:00:28.052
But notice that useBreedList and

8
00:00:28.052 --> 00:00:30.262
ThemeContext are fine cuz
those are already typed.

9
00:00:30.262 --> 00:00:32.634
We already did those.

10
00:00:32.634 --> 00:00:39.356
We're gonna import some of our responses,
PetAPIResponse, we're gonna import Animal,

11
00:00:39.356 --> 00:00:44.634
and we're gonna import Pet from
APIResponseTypes, that's all good.

12
00:00:44.634 --> 00:00:48.103
ANIMALS is obviously an array of Animal,

13
00:00:48.103 --> 00:00:54.377
so, Again, we don't have to do this but

14
00:00:54.377 --> 00:00:59.468
we know that this is what this is,
so we might as well do it.

15
00:00:59.468 --> 00:01:04.043
And rather than do this in every single
file, probably at some point we'll just

16
00:01:04.043 --> 00:01:06.910
make a file of enumerated
type things that I have,

17
00:01:06.910 --> 00:01:09.468
I could put status in
there that we just did.

18
00:01:09.468 --> 00:01:12.185
And then I would import that
from that file which would come

19
00:01:12.185 --> 00:01:14.360
with that type rather
than just doing it here.

20
00:01:14.360 --> 00:01:16.532
But this is the only place
where we use animals, so

21
00:01:16.532 --> 00:01:18.199
we're just gonna leave it like that.

22
00:01:20.765 --> 00:01:21.890
Okay.

23
00:01:23.440 --> 00:01:27.215
We're gonna say this is
a function component.

24
00:01:27.215 --> 00:01:29.638
Has no props, so
we don't have to worry about that.

25
00:01:35.368 --> 00:01:37.978
So, yeah,
I guess this is kind of a rule of thumb.

26
00:01:37.978 --> 00:01:41.405
I don't think you actually have
to tell that this is a function,

27
00:01:41.405 --> 00:01:43.829
I think this would type
just fine without it.

28
00:01:43.829 --> 00:01:46.165
Maybe I'd have to check.

29
00:01:46.165 --> 00:01:48.514
But in general, if I know a type and

30
00:01:48.514 --> 00:01:54.346
I know something more specific than what
TypeScript can derive itself, I'll try and

31
00:01:54.346 --> 00:01:59.297
tell TypeScript, hey, this thing
that you have here is actually this.

32
00:01:59.297 --> 00:02:02.922
So in this case, I know SearchParams
is no mere normal function, right?

33
00:02:02.922 --> 00:02:04.890
If you just hover over right now,

34
00:02:04.890 --> 00:02:09.334
it's gonna tell you this is a function
that returns a JSX element, right?

35
00:02:09.334 --> 00:02:13.516
Which essentially is a function component,
right, but we can actually tell

36
00:02:13.516 --> 00:02:17.975
it explicitly, no, this is actually
a function component from the React types.

37
00:02:22.066 --> 00:02:25.292
Okay, so animal here,
this empty string, these are fine,

38
00:02:25.292 --> 00:02:29.171
we don't have to change these, but
this one specifically is an animal.

39
00:02:32.827 --> 00:02:34.471
Okay, and then pets.

40
00:02:34.471 --> 00:02:38.823
This is a Pet array.

41
00:02:38.823 --> 00:02:42.373
So now you can see everything in here,
it has to be a pet to go into here.

42
00:02:44.485 --> 00:02:49.480
Okay, this one here,
we're going to await this as

43
00:02:49.480 --> 00:02:55.690
a PetAPIResponse, Okay?

44
00:02:58.262 --> 00:03:00.389
That's good.

45
00:03:00.389 --> 00:03:01.749
requestPets here.

46
00:03:01.749 --> 00:03:04.669
Same thing, we got to void that.

47
00:03:10.187 --> 00:03:14.592
Okay, this is one's gonna be like, hey,
you're trying to call updateAnimal

48
00:03:14.592 --> 00:03:18.622
here with e.target.value,
it's like, that's arbitrary string.

49
00:03:18.622 --> 00:03:20.280
I don't know what that is.

50
00:03:20.280 --> 00:03:27.518
We know because we made the options there
that this is always gonna be an animal,

51
00:03:27.518 --> 00:03:33.798
so I feel pretty confident to just
cast that as an animal, same here.

52
00:03:40.053 --> 00:03:43.901
And we kind of backed ourselves into this
corner by telling it that this always has

53
00:03:43.901 --> 00:03:44.702
to be an animal.

54
00:03:44.702 --> 00:03:47.313
So, you could just leave
it off on both sides and

55
00:03:47.313 --> 00:03:49.413
it would just be an arbitrary string.

56
00:03:49.413 --> 00:03:53.310
But it's good to signify to your future
self, hey, this has got to be an animal.

57
00:03:56.760 --> 00:03:59.651
Cool, and then here you got a void again.

58
00:04:04.173 --> 00:04:08.789
Okay, I think that covers everything,
we got breeds down here.

59
00:04:18.596 --> 00:04:23.631
I think this is a problem
from the other typings.

60
00:04:23.631 --> 00:04:26.710
Cuz breeds,
we told it it's a string array, but

61
00:04:26.710 --> 00:04:31.668
now it's saying that it's either a string
array or it's one of the statuses,

62
00:04:31.668 --> 00:04:34.992
and therefore it can't
type it cuz it's an any's.

63
00:04:34.992 --> 00:04:36.515
So that tells me we use breedLists.

64
00:04:36.515 --> 00:04:38.966
We got to come over here, and

65
00:04:38.966 --> 00:04:43.972
it thinks that our return type
here is either a breedList or

66
00:04:43.972 --> 00:04:48.670
a status, but we have to,
I think, type this just as,

67
00:04:48.670 --> 00:04:53.703
this is always going to be
a string array and then a status.

68
00:04:57.773 --> 00:05:00.869
And this is now as telling types,
which is like,

69
00:05:00.869 --> 00:05:06.089
this is not a heterogeneous array where it
could be anything on either one of them.

70
00:05:06.089 --> 00:05:09.000
We're telling this, like, no, no, no,

71
00:05:09.000 --> 00:05:14.298
definitely index zero has to be a string
array, and index one has to be a status.

72
00:05:14.298 --> 00:05:16.890
They're not gonna swap, and
they're not gonna mix and match,

73
00:05:16.890 --> 00:05:17.947
and don't let it do that.

74
00:05:22.450 --> 00:05:25.605
So now this is going to be,
that's definitely a string,

75
00:05:25.605 --> 00:05:27.330
that's definitely a string.

76
00:05:27.330 --> 00:05:28.866
It's still upset at this, though.

77
00:05:36.788 --> 00:05:41.900
I think that might be cuz breeds,

78
00:05:45.322 --> 00:05:47.627
Breeds, this has to be a string array.

79
00:05:47.627 --> 00:05:51.880
Okay, so yeah,
all I had to do here was move this around.

80
00:05:51.880 --> 00:05:55.819
And then now, everything should
be typed correctly, it is,

81
00:05:55.819 --> 00:06:00.080
except results but we still will go
to that in here in just a second.

82
00:06:00.080 --> 00:06:05.603
&gt;&gt; In the Pet component,
shouldn't animal be type Animal?

83
00:06:05.603 --> 00:06:07.414
&gt;&gt; Yeah, it should.

84
00:06:07.414 --> 00:06:14.046
Good call, Animal, and then we just
import that from APIResponses.

85
00:06:15.669 --> 00:06:19.207
Good call, I mean obviously, it was
gonna work because it is a string but

86
00:06:19.207 --> 00:06:22.861
the person is following my advice,
which is when you know the type better,

87
00:06:22.861 --> 00:06:24.616
you should give it the better type.

88
00:06:26.986 --> 00:06:30.218
&gt;&gt; And
why is animals not an array of strings?

89
00:06:33.285 --> 00:06:34.971
&gt;&gt; It's literally what I just said.

90
00:06:34.971 --> 00:06:37.873
It's funny that those two questions
came right next to each other.

91
00:06:37.873 --> 00:06:40.821
So this obviously is an array of string.

92
00:06:40.821 --> 00:06:44.828
And if you call this an array of string,
it'll be fine.

93
00:06:44.828 --> 00:06:46.238
In fact, you don't even have to do that.

94
00:06:46.238 --> 00:06:49.892
You can just delete that because
it knows this is all strings.

95
00:06:49.892 --> 00:06:52.755
But to the previous question's point and

96
00:06:52.755 --> 00:06:56.778
the point that I've be been
belaboring this entire time.

97
00:06:56.778 --> 00:07:00.769
We know that Animal here is a,

98
00:07:00.769 --> 00:07:05.720
these are all Animal types that we got

99
00:07:05.720 --> 00:07:10.683
from our APIResponse here, right?

100
00:07:10.683 --> 00:07:14.675
So this type Animal,
this enumerator type is very specific.

101
00:07:14.675 --> 00:07:18.952
So now if I try and
say something like, going back to,

102
00:07:18.952 --> 00:07:22.958
what was I using,
SearchParams, is that right?

103
00:07:22.958 --> 00:07:27.950
Yeah, for example, if I tried to then

104
00:07:27.950 --> 00:07:33.262
say here ANIMALS.push("goat").

105
00:07:33.262 --> 00:07:38.099
This should error out and say,
I don't know about goats, right?

106
00:07:38.099 --> 00:07:39.592
Goats are not allowed in this string,
right?

107
00:07:39.592 --> 00:07:43.070
Despite the fact that this is a string,
right, this fits with the type here.

108
00:07:43.070 --> 00:07:46.363
But we're being even more specific in
saying, no, these are the only kind of

109
00:07:46.363 --> 00:07:49.110
animals that we're concerned
about in this particular array.

