WEBVTT

1
00:00:00.000 --> 00:00:02.280
We're gonna go piece by piece and

2
00:00:02.280 --> 00:00:06.198
we're going to migrate our
application to TypeScript.

3
00:00:06.198 --> 00:00:10.586
And it's kinda cool, as long as everything
says JS, it'll leave it in JS mode,

4
00:00:10.586 --> 00:00:13.370
which it won't do any
necessarily checking on it.

5
00:00:13.370 --> 00:00:16.740
But for example,
we're gonna go just start with modal.

6
00:00:16.740 --> 00:00:19.148
If you rename this to modal.tsx and

7
00:00:19.148 --> 00:00:24.686
the x is actually important here because
TypeScript won't check React typings or

8
00:00:24.686 --> 00:00:28.551
it won't understand it well,
unless we put the x there.

9
00:00:28.551 --> 00:00:33.262
So the x is actually required this time,
okay?

10
00:00:33.262 --> 00:00:37.256
So as soon as I change this to x, now,
it's giving me a bunch of errors.

11
00:00:37.256 --> 00:00:40.226
It's like I don't know what this is,
I don't know what this is,

12
00:00:40.226 --> 00:00:41.469
I don't know what this is.

13
00:00:41.469 --> 00:00:45.678
And then we get to, basically play
whack a mole with type errors.

14
00:00:47.840 --> 00:00:55.430
Okay, so first thing up here inside of
this, now we can import types as well.

15
00:00:55.430 --> 00:00:59.410
So we're gonna import
a FunctionComponent type and

16
00:00:59.410 --> 00:01:07.449
we're going to import
a MutableRefObject type Okay?

17
00:01:10.303 --> 00:01:12.533
Good so far.

18
00:01:12.533 --> 00:01:21.767
Now, we're gonna say modal ur,
a FunctionComponent, Which is pretty cool.

19
00:01:23.320 --> 00:01:27.955
So if you contrast that with our class
components, it knows that it's a class

20
00:01:27.955 --> 00:01:32.094
component because you're telling it,
it extends type component or

21
00:01:32.094 --> 00:01:35.895
extends class component,
which knows is a type of component.

22
00:01:35.895 --> 00:01:39.296
Here, it doesn't know modal
from any other functions.

23
00:01:39.296 --> 00:01:44.625
So we have to explicitly tell it,
this is a FunctionComponent.

24
00:01:44.625 --> 00:01:48.994
That's what this colon means, the colon
means I'm about to give you some more

25
00:01:48.994 --> 00:01:53.574
typing information, I'm about to narrow
the typing down to specifically this.

26
00:01:53.574 --> 00:01:57.266
So now if you mouse over, like modal down
here, it's gonna be like, I know what this

27
00:01:57.266 --> 00:02:00.024
is, this is a FunctionComponent
that accepts no properties.

28
00:02:02.844 --> 00:02:06.867
Yeah, children just comes with everything,
so that's fine.

29
00:02:08.465 --> 00:02:09.886
Okay?

30
00:02:09.886 --> 00:02:12.965
Here, elRef, it does know that
it's a MutableRefObject, but

31
00:02:12.965 --> 00:02:14.567
it doesn't know what type it is.

32
00:02:14.567 --> 00:02:18.626
So we kinda have to tell it what
kind of MutableRefObject it can be.

33
00:02:18.626 --> 00:02:24.975
So we're gonna say this is a ref object,
MutableRefObject.

34
00:02:24.975 --> 00:02:27.021
Then we have to give it some parameters.

35
00:02:27.021 --> 00:02:31.651
So the way you give parameters
to this MutableRefObject is

36
00:02:31.651 --> 00:02:33.926
with these angle brackets.

37
00:02:35.792 --> 00:02:40.796
Okay, and then inside of there,
we're gonna say

38
00:02:40.796 --> 00:02:47.114
that this useRef is either going
to contain a HTMLDivElement,

39
00:02:47.114 --> 00:02:50.946
HTMLDivElement, or it'll be null.

40
00:02:54.250 --> 00:02:58.227
Okay, it can only be one
of those two things.

41
00:02:58.227 --> 00:03:04.679
So now later, I mean, just to show
you if I say elRef.current = 5,

42
00:03:04.679 --> 00:03:08.590
it's gonna say, no, it can't do that.

43
00:03:08.590 --> 00:03:10.971
You told me that it can't do that,
I'm not gonna let you do that, right?

44
00:03:10.971 --> 00:03:16.979
You told me it can be either a div or
nothing and it cannot be a number.

45
00:03:16.979 --> 00:03:19.696
Whereas if I don't do that,
it won't know, right?

46
00:03:19.696 --> 00:03:21.345
It won't know what it's supposed to be.

47
00:03:23.850 --> 00:03:25.680
Okay, and now everywhere,

48
00:03:25.680 --> 00:03:30.262
I have strong guarantees that this is
either empty or it contains a div.

49
00:03:34.830 --> 00:03:35.847
Okay?

50
00:03:37.410 --> 00:03:40.116
So that's good so far.

51
00:03:40.116 --> 00:03:44.505
Now, we have this problem here,
it's gonna say, hey,

52
00:03:44.505 --> 00:03:49.361
you told me that modal route might
be null, so what about that?

53
00:03:49.361 --> 00:03:53.104
You can't call a pen child on
something that's null, right?

54
00:03:53.104 --> 00:03:57.456
You can call and some of it's
an HTML element, but I can't let you

55
00:03:57.456 --> 00:04:01.986
call it without you assuring me
specifically that this is not null.

56
00:04:01.986 --> 00:04:07.138
So you get into this kinda like
defensive programming stance.

57
00:04:07.138 --> 00:04:11.569
Now, I'm picturing like old martial art
movies, it's very different from that.

58
00:04:11.569 --> 00:04:16.168
Modal, if no modalRoot or

59
00:04:16.168 --> 00:04:19.936
no elRef.current.

60
00:04:19.936 --> 00:04:22.437
So we're just gonna do
a quick null check here.

61
00:04:22.437 --> 00:04:24.055
We're just gonna say return.

62
00:04:26.398 --> 00:04:29.319
Now, you might say like, well,
it was never going to be null,

63
00:04:29.319 --> 00:04:30.713
our program was fine before.

64
00:04:30.713 --> 00:04:33.614
But we have to kinda like
assure the type systems,

65
00:04:33.614 --> 00:04:38.326
this is definitely not gonna crash,
cuz the type system doesn't know, right?

66
00:04:40.754 --> 00:04:44.184
All right, so there's that, that's fine.

67
00:04:44.184 --> 00:04:47.505
And then we have to do the same
check here in the cleanup function.

68
00:04:51.762 --> 00:04:55.801
So if elRef.current, so if it does exist,

69
00:04:55.801 --> 00:05:00.182
then just go ahead and
remove that from the DOM.

70
00:05:04.225 --> 00:05:06.783
And now this file is fully typed.

71
00:05:08.985 --> 00:05:12.930
Now, I will say that there
are many ways to skin a cat in

72
00:05:12.930 --> 00:05:15.141
this particular situation.

73
00:05:15.141 --> 00:05:18.669
There's a bunch of ways you could
have handled the MutableRefObject,

74
00:05:18.669 --> 00:05:22.096
there's other ways you could have
handled the functionComponent.

75
00:05:22.096 --> 00:05:26.350
So there's not necessarily one correct
way, there probably is like one best way,

76
00:05:26.350 --> 00:05:28.983
but I'm just showing you
the way that I would do it.

77
00:05:32.231 --> 00:05:36.198
Okay, cool, so,

78
00:05:40.883 --> 00:05:46.239
The nice thing is that we
only have to type the things

79
00:05:46.239 --> 00:05:50.858
that TypeScript cannot figure out itself.

80
00:05:50.858 --> 00:05:54.556
So for example, we have modalRoot here.

81
00:05:54.556 --> 00:05:56.836
This is always gonna be an HTML element or
null, and

82
00:05:56.836 --> 00:06:00.880
it knows that because that's what you get
back from document.getElementById, right?

83
00:06:00.880 --> 00:06:02.685
It just knows that that's
what returns it said.

84
00:06:02.685 --> 00:06:07.415
I never had to tell, this is what
modalRoot is, it's just like, okay,

85
00:06:07.415 --> 00:06:08.591
I got it, right?

86
00:06:08.591 --> 00:06:11.628
So anytime we're like,
it can pull that information out,

87
00:06:11.628 --> 00:06:14.984
we don't have to go back and
tell it later, you are this, right?

88
00:06:17.871 --> 00:06:20.618
For example, if this was like let, and

89
00:06:20.618 --> 00:06:25.206
I tried to say that modalRoot is now = 5,
it's gonna get upset.

90
00:06:25.206 --> 00:06:29.910
It's like, no,
I have a type for this before.

91
00:06:29.910 --> 00:06:33.508
If you want this to be true, then you
have to go and tell me beforehand, hey,

92
00:06:33.508 --> 00:06:34.874
this could also be a number.

93
00:06:37.342 --> 00:06:38.868
In other words,
TypeScript is pretty smart.

94
00:06:38.868 --> 00:06:42.030
You just have to kinda fill in the blanks
where it could not be able to figure out

95
00:06:42.030 --> 00:06:43.210
what that is supposed to be.

96
00:06:45.183 --> 00:06:50.166
&gt;&gt; How can I figure out what type
of object I could need if I don't

97
00:06:50.166 --> 00:06:54.193
know MutableRefObject or
any other React type?

98
00:06:54.193 --> 00:06:55.832
Is there a trick for that?

99
00:06:55.832 --> 00:07:00.617
&gt;&gt; Yeah, it's always a bit of
snooping around an investigation,

100
00:07:00.617 --> 00:07:02.574
that's a good question.

101
00:07:02.574 --> 00:07:06.422
You wanna know how I found it out,
is I just moused over what useRef is.

102
00:07:06.422 --> 00:07:08.460
It's like okay,
what does use ref give back?

103
00:07:08.460 --> 00:07:13.960
It gives back a React mutable object,
or MutableRefObject, right?

104
00:07:13.960 --> 00:07:18.298
So a lot of times, you can just mouse
over the function that you're calling,

105
00:07:18.298 --> 00:07:20.788
it'll tell you, I expect to give you this.

106
00:07:20.788 --> 00:07:24.655
So for example, getElementById,
it gives you back,

107
00:07:24.655 --> 00:07:29.037
this is either gonna be an HTML element or
it's gonna be null.

108
00:07:29.037 --> 00:07:31.270
You'll notice that I put
HTMLDivElement up here.

109
00:07:31.270 --> 00:07:35.109
The reason why I did that, cuz I knew
down here is gonna give you this.

110
00:07:35.109 --> 00:07:38.846
And I just specifically typed into
a div because I knew down here I was

111
00:07:38.846 --> 00:07:39.777
creating a div.

112
00:07:39.777 --> 00:07:46.500
So elRef.current, this is definitely
gonna be a HTMLDivElement.

113
00:07:46.500 --> 00:07:50.084
So that's the easiest way.

114
00:07:55.572 --> 00:07:57.903
I'm trying to think if
there's anything additional,

115
00:07:57.903 --> 00:08:01.137
I think that that's almost like 99% of
the sleuthing that I do is that way.

116
00:08:01.137 --> 00:08:06.453
The one thing to know is, with React
is basically everything ends up,

117
00:08:06.453 --> 00:08:12.146
that it returns being a ReactNode,
yes, you have the React.ReactNode.

118
00:08:12.146 --> 00:08:16.196
That's like the most important type
in JavaScript, or not in JavaScript,

119
00:08:16.196 --> 00:08:20.452
but in React, is everything that your
functions return have to be a ReactNode.

120
00:08:20.452 --> 00:08:24.950
Which is like a thing that React knows
how to renders, it's what a ReactNode is.

121
00:08:24.950 --> 00:08:28.837
Yeah, just use VS code to
tell you what things are.

122
00:08:28.837 --> 00:08:29.900
That's how I do it.

