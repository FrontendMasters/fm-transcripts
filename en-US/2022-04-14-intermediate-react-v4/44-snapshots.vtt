WEBVTT

1
00:00:00.388 --> 00:00:03.012
So I'm gonna show you a feature of,

2
00:00:06.580 --> 00:00:11.237
Jest that I'm not a huge fan of, but
I think you should know about it.

3
00:00:11.237 --> 00:00:12.437
It's called Snapshot.

4
00:00:15.398 --> 00:00:19.111
It's very divisive,
people either love it or they hate it.

5
00:00:19.111 --> 00:00:23.483
They're called low confidence,
low cost tests,

6
00:00:23.483 --> 00:00:27.551
because they're super easy to implement,
but

7
00:00:27.551 --> 00:00:32.649
they mean next to nothing,
not quite nothing, next to it.

8
00:00:32.649 --> 00:00:36.278
So make a new file here.

9
00:00:36.278 --> 00:00:40.961
We're gonna write a test for

10
00:00:40.961 --> 00:00:44.672
Results.test.js.

11
00:00:47.194 --> 00:00:53.744
Need our pragma,
I'm just gonna copy that here from that,

12
00:00:53.744 --> 00:00:58.460
and then we're going to import ( expect,

13
00:00:58.460 --> 00:01:04.965
test) from @jest, Jest/globals.

14
00:01:06.613 --> 00:01:12.628
Import {create} from react-test-render,

15
00:01:12.628 --> 00:01:20.107
which we're gonna have to NPM
install here in just a second,

16
00:01:20.107 --> 00:01:24.961
and import Results from ../Results

17
00:01:32.244 --> 00:01:37.368
So react-test-render, actually,
is put out by the react team themselves,

18
00:01:37.368 --> 00:01:42.885
it's just a really simple render,
it's even simpler than react-test-library.

19
00:01:42.885 --> 00:01:50.130
So go ahead and with me say npm install
-D, react-test-renderer, right?

20
00:01:50.130 --> 00:01:57.139
Make sure that you have erer,
I know that's kind of odd,

21
00:01:57.139 --> 00:02:02.261
but it's a renderer, @17.0.2.

22
00:02:02.261 --> 00:02:06.569
So this will match whatever version
of react you are using, right,

23
00:02:06.569 --> 00:02:09.603
they release those things
all at the same time.

24
00:02:09.603 --> 00:02:11.775
Okay, now we have that.

25
00:02:11.775 --> 00:02:16.521
We can run our test watch again,
that's fine.

26
00:02:16.521 --> 00:02:20.151
It's failing at the moment,
that's expected.

27
00:02:20.151 --> 00:02:27.850
Test renders correctly with no pets.

28
00:02:32.456 --> 00:02:35.737
This one doesn't have to be async,
it could be, doesn't matter.

29
00:02:35.737 --> 00:02:42.289
const tree = create(Results).

30
00:02:42.289 --> 00:02:46.556
pets equals nothing, right, so we're not
gonna give it anything at the moment.

31
00:02:49.307 --> 00:02:51.283
And we're gonna get that toJSON.

32
00:02:53.592 --> 00:02:58.695
And then we're gonna say expect(tree)

33
00:02:58.695 --> 00:03:03.948
toMatchSnapshot, that went down there.

34
00:03:08.492 --> 00:03:13.585
So you can see here,
this test immediately passed,

35
00:03:13.585 --> 00:03:18.115
and you can see here one
snapshot was written.

36
00:03:18.115 --> 00:03:22.994
So you can see here it created
this _snaps directory here,

37
00:03:22.994 --> 00:03:27.200
and if I click on this and
look at that, we get this.

38
00:03:27.200 --> 00:03:30.331
You might not have syntax highlighting,
you have to install an extension to get

39
00:03:30.331 --> 00:03:33.148
that, it might even prompt you like,
hey, do you wanna install this?

40
00:03:33.148 --> 00:03:35.958
And the answer is maybe.

41
00:03:35.958 --> 00:03:41.063
So what it does here is it just renders it
out and then it says, okay, this is what

42
00:03:41.063 --> 00:03:45.959
this looks like, and the first time you
run it, it assumes this is correct.

43
00:03:45.959 --> 00:03:48.308
Now, if I go back and
I say inside of Results and

44
00:03:48.308 --> 00:03:51.680
I just maybe add a couple of
question marks, like this, right, so

45
00:03:51.680 --> 00:03:54.534
now it's gonna render
something slightly different.

46
00:03:54.534 --> 00:03:55.971
Now, if I go look at my tests,

47
00:03:55.971 --> 00:03:59.998
it's gonna say your tests failed because
last time I rendered this, I found this,

48
00:03:59.998 --> 00:04:03.987
and now that you have a bunch of question
marks here, this does not match anymore.

49
00:04:03.987 --> 00:04:05.574
Therefore, I will fail your test.

50
00:04:09.516 --> 00:04:14.750
Now, I need you to ask yourself,
do I think that's useful?

51
00:04:14.750 --> 00:04:19.035
This literally took me 10
seconds to write a test, right,

52
00:04:19.035 --> 00:04:21.397
so it's low cost, but do I care?

53
00:04:24.804 --> 00:04:28.057
My answer is no, I don't care,
I don't write these tests anymore.

54
00:04:31.372 --> 00:04:34.009
But there's other people
who love them because,

55
00:04:34.009 --> 00:04:36.784
this is the shortcut to
get 100% test coverage.

56
00:04:40.406 --> 00:04:42.865
So that's what that is.

57
00:04:50.802 --> 00:04:57.574
Now, you can basically see here, say here,
Let's say I'm happy with this and

58
00:04:57.574 --> 00:05:01.544
I actually do want it to have all those
question marks, so I don't want it to fail

59
00:05:01.544 --> 00:05:09.567
anymore, I can say, if I hit u here,
Or even better, I can hit i.

60
00:05:09.567 --> 00:05:15.458
So if I hit i, it's gonna say, I found
this snapshot, do you wanna save this one?

61
00:05:15.458 --> 00:05:18.573
Let's say you broke a bunch of them
all the same time, you could say,

62
00:05:18.573 --> 00:05:21.334
update this one, update this one,
don't update this one.

63
00:05:21.334 --> 00:05:26.859
So this one, I'm gonna say,
update, I updated the snapshot.

64
00:05:26.859 --> 00:05:30.845
And now if I look at my snapshot here,
you'll see that this is correct, and

65
00:05:30.845 --> 00:05:34.159
it saves that, and
this is something you would commit to Git.

66
00:05:37.708 --> 00:05:43.857
So again, I don't find this
particularly useful, but you might.

67
00:05:43.857 --> 00:05:50.204
But let's take this a little step further,
I got some dummy data here in Snapshots.

68
00:05:50.204 --> 00:05:53.198
If you wanna go copy and
paste this cuz I definitely don't wanna,

69
00:05:57.641 --> 00:05:59.209
I do not wanna write that myself.

70
00:06:04.966 --> 00:06:07.061
Wow, don't do that.

71
00:06:07.061 --> 00:06:08.512
Okay, so I'm gonna go grab that.

72
00:06:12.028 --> 00:06:19.211
And here underneath that, Okay, I put in
a bunch of dummy data now, that's fine.

73
00:06:25.179 --> 00:06:31.348
Okay, and then down here, I'm gonna, So

74
00:06:31.348 --> 00:06:37.202
this react-test-renderer, this is just
going to blindly render out everything.

75
00:06:37.202 --> 00:06:40.770
And it's gonna go down to all
of the leaf nodes as well.

76
00:06:40.770 --> 00:06:41.769
This can be problematic.

77
00:06:41.769 --> 00:06:47.157
So let's say I have this here, if I write
a test here now using the same renderer,

78
00:06:47.157 --> 00:06:51.534
if you remember in Results.js,
this renderer's pet, right?

79
00:06:53.478 --> 00:06:57.905
I actually don't wanna render all of
my pets in my results snapshot, right,

80
00:06:57.905 --> 00:07:02.004
because if I have a problem in my
Pet.js test, I want that test to fail.

81
00:07:02.004 --> 00:07:06.143
I don't want my results test to fail,
because that's now misleading, right?

82
00:07:08.560 --> 00:07:11.968
The point of your test is to tell you
precisely where something is going wrong,

83
00:07:11.968 --> 00:07:15.067
and if I have something going wrong and
pet pointing at my results test,

84
00:07:15.067 --> 00:07:17.982
I'm gonna go check results,
which is gonna waste a bunch of time.

85
00:07:17.982 --> 00:07:21.405
So what you can do is you can do
what's called a shallow render, so

86
00:07:21.405 --> 00:07:23.533
we're gonna do that really quick here.

87
00:07:23.533 --> 00:07:28.186
So up at the top here, I'm going to

88
00:07:28.186 --> 00:07:32.680
import ( createRenderer ) from

89
00:07:32.680 --> 00:07:37.820
react-test-renderer/shallow.

90
00:07:40.767 --> 00:07:43.736
This one's fine, I don't have to do
anything for that top test, this one.

91
00:07:46.291 --> 00:07:48.179
But here, in this test, my second one,

92
00:07:54.027 --> 00:08:00.481
I'm gonna do, Renders correctly, oops,

93
00:08:00.481 --> 00:08:05.875
I didn't put that in the string,
renders correctly with some pets.

94
00:08:09.278 --> 00:08:13.169
Again, this doesn't need to be async cuz
we are not doing anything async in here.

95
00:08:13.169 --> 00:08:21.484
And we're gonna say const tree =,
What did I call that?

96
00:08:21.484 --> 00:08:22.654
createRenderer.

97
00:08:32.671 --> 00:08:36.727
Oops, there we go, sorry,

98
00:08:36.727 --> 00:08:40.790
const r = createRenderer.

99
00:08:40.790 --> 00:08:49.331
And then here, I will say
r.render( &lt;Results pets = (pets).

100
00:08:54.086 --> 00:08:59.290
And then I'll say expect(
r.getRenderOutput),

101
00:09:03.857 --> 00:09:06.489
To match in line or to match snapshot.

102
00:09:12.457 --> 00:09:17.307
Okay, so
now I got a second snapshot in here.

103
00:09:19.904 --> 00:09:21.006
Let's just minimize that,

104
00:09:32.324 --> 00:09:35.660
Okay, so
now renders correctly with some pets.

105
00:09:35.660 --> 00:09:38.659
Notice it's not actually
rendering what's inside of pet,

106
00:09:38.659 --> 00:09:41.319
it's rendering this kind
of high level pet, right?

107
00:09:41.319 --> 00:09:44.171
It's rendering the name of
the react component and

108
00:09:44.171 --> 00:09:47.166
it's not actually rendering
what's inside of pet.

109
00:09:47.166 --> 00:09:50.499
This is much better cuz now I can
just investigate like, all right,

110
00:09:50.499 --> 00:09:53.538
this is passing all the things
that I expect into pet, and now I

111
00:09:53.538 --> 00:09:57.485
can write separate tests for pet that
test all these various different things.

112
00:09:57.485 --> 00:09:58.438
So I have here my notes,

113
00:09:58.438 --> 00:10:00.839
if you wanna write it the other
way to see what it looks like.

114
00:10:00.839 --> 00:10:04.608
But basically, it would just render
everything here that's in pet, it would

115
00:10:04.608 --> 00:10:08.505
render the a tag, the div, all that kind
of stuff, which is not what we wanna do.

116
00:10:12.657 --> 00:10:17.857
This is slightly maybe 5% more valuable,
right?

117
00:10:17.857 --> 00:10:23.945
I can see what I expect from giving
these sets of parameters into results,

118
00:10:23.945 --> 00:10:27.787
I expect these sorts of
parameters going out.

119
00:10:27.787 --> 00:10:30.031
I see some value in that, but, again,

120
00:10:30.031 --> 00:10:33.297
there's such thrash in UI
code that I just, in general,

121
00:10:33.297 --> 00:10:38.010
kinda skip these tests, cuz I feel like
I'm just chasing coverage at that point.

