WEBVTT

1
00:00:00.228 --> 00:00:04.980
Let's test fetch.

2
00:00:04.980 --> 00:00:06.799
So this is great.

3
00:00:06.799 --> 00:00:08.829
This test that if we give us breed list,

4
00:00:08.829 --> 00:00:12.226
nothing that it gives us back
an empty list and an unloaded state.

5
00:00:12.226 --> 00:00:14.853
That's exactly what I
would expect from it.

6
00:00:14.853 --> 00:00:18.727
But that's not really the point of
views breed list, use breed list.

7
00:00:18.727 --> 00:00:23.180
If I give it an animal I wanted to call
the API and give me back a list of breeds.

8
00:00:23.180 --> 00:00:25.136
That's actually the point of it.

9
00:00:25.136 --> 00:00:28.881
So lets go a head and make it do that.

10
00:00:28.881 --> 00:00:34.487
I want to install another
library here called

11
00:00:34.487 --> 00:00:43.499
just fetch merch impairment-D,
just-fetch-merch@.3.0.3

12
00:00:46.974 --> 00:00:50.631
This is just a little package that's
going to mock out fetch for us.

13
00:00:50.631 --> 00:00:51.709
We can tell it.

14
00:00:51.709 --> 00:00:52.931
We expect to be called with this.

15
00:00:52.931 --> 00:00:54.795
We expect it to be given back this.

16
00:00:57.360 --> 00:00:59.839
Okay, I want you to go
to your package.json.

17
00:01:03.706 --> 00:01:08.080
And we have to add a little
configuration down here at the bottom.

18
00:01:08.080 --> 00:01:12.979
We gonna say jest,
we gonna say auto mock false.

19
00:01:12.979 --> 00:01:16.303
So don't automatically mock everything.

20
00:01:16.303 --> 00:01:21.390
That was a dark time when Jest used to
do that all that, when it worked it

21
00:01:21.390 --> 00:01:26.581
was fabulous but most of the time it
didn't work and it was horrifying.

22
00:01:26.581 --> 00:01:28.964
It demoed really well though,
people got really stoked about it.

23
00:01:28.964 --> 00:01:33.790
Anyway, that's a history lesson that I
would need several more beers to tell.

24
00:01:33.790 --> 00:01:36.889
And then set up files.

25
00:01:36.889 --> 00:01:41.769
Basically you can say hey just before
you run test run this file to set

26
00:01:41.769 --> 00:01:43.234
up my environment.

27
00:01:43.234 --> 00:01:48.666
So we're going to make one in
source called Source/setup jest or

28
00:01:48.666 --> 00:01:52.131
whatever you want to call your file .js.

29
00:01:52.131 --> 00:01:56.802
Now just we'll run this file
before any of your other files to

30
00:01:56.802 --> 00:01:59.281
make sure that you can set it up.

31
00:01:59.281 --> 00:02:00.950
Okay, cool.

32
00:02:00.950 --> 00:02:02.997
That's all nice.

33
00:02:02.997 --> 00:02:05.917
Don't put this into the test directory,
right?

34
00:02:05.917 --> 00:02:09.521
Because if you put in the test directory,
just is gonna think it's a test.

35
00:02:09.521 --> 00:02:14.363
So don't put it in there, we have to put
in just our normal source directory.

36
00:02:14.363 --> 00:02:18.688
This is gonna be called setupJest.js or
you could make another folder called like

37
00:02:18.688 --> 00:02:21.961
test helpers or something like that,
whatever you wanna do.

38
00:02:23.991 --> 00:02:30.620
This is gonna be super short,
we're gonna say import,

39
00:02:30.620 --> 00:02:36.133
enable, fetch, mocks from just fetch mock.

40
00:02:38.421 --> 00:02:39.901
Then just enable it.

41
00:02:39.901 --> 00:02:44.259
That's all, you just run the function.

42
00:02:44.259 --> 00:02:47.516
It's going to basically patch
in that Jes time environment.

43
00:02:47.516 --> 00:02:49.226
What fetch is supposed to do.

44
00:02:49.226 --> 00:02:56.915
So then that we can basically control how
fetch responds to our use breed list.

45
00:03:00.113 --> 00:03:05.568
All right, so
go back to our use breed list test.

46
00:03:05.568 --> 00:03:08.466
Okay, down underneath this one
we're gonna give it another test.

47
00:03:08.466 --> 00:03:13.883
This one's gonna be say,
gives back breeds with an animal.

48
00:03:17.241 --> 00:03:18.872
Make sure that that is async.

49
00:03:22.688 --> 00:03:26.507
Okay, tell about the breeds
that you care about.

50
00:03:26.507 --> 00:03:27.614
We'll just give it a list of breeds.

51
00:03:27.614 --> 00:03:29.389
You can put whatever you want in here.

52
00:03:29.389 --> 00:03:35.199
I'm gonna give it Havanese Bichon Frise.

53
00:03:37.904 --> 00:03:41.366
Poodle, Maltese.

54
00:03:44.080 --> 00:03:45.890
Golden Retriever.

55
00:03:48.043 --> 00:03:51.877
Labrador, and Husky.

56
00:03:51.877 --> 00:03:54.124
Okay, so just a bunch of dog breeds.

57
00:03:57.204 --> 00:04:01.999
Okay, and then we're gonna patch the fetch

58
00:04:01.999 --> 00:04:07.707
implementation to say
fetch.mockResponseOnce.

59
00:04:10.024 --> 00:04:14.280
And then we're just going to tell it
what to give back whenever the next time

60
00:04:14.280 --> 00:04:15.306
fetches called.

61
00:04:15.306 --> 00:04:17.451
JSON.Stringify.

62
00:04:20.066 --> 00:04:24.577
Animal: dog and breeds.

63
00:04:24.577 --> 00:04:27.628
We're just mocking with that,
API response looks like.

64
00:04:29.218 --> 00:04:30.793
We could get more technical here,

65
00:04:30.793 --> 00:04:33.902
we could test that it calls the right
URL with the right parameters.

66
00:04:33.902 --> 00:04:36.863
In reality all it cares if
it gets back the correct

67
00:04:36.863 --> 00:04:40.197
information that it's given
it back to me correctly.

68
00:04:42.575 --> 00:04:45.941
Okay, so here I'm gonna save fetch sorry.

69
00:04:45.941 --> 00:04:50.544
I did that already, we're gonna do say

70
00:04:50.544 --> 00:04:55.158
const result and wait for next update.

71
00:04:55.158 --> 00:04:58.371
This is just a nice little
helper functions is like

72
00:04:58.371 --> 00:05:02.976
wait until react like all its dust
settles up at three renders, right?

73
00:05:02.976 --> 00:05:05.498
And then check.

74
00:05:05.498 --> 00:05:08.334
I think this is actually a promise.

75
00:05:08.334 --> 00:05:12.192
We'll check here in just
a second render hook.

76
00:05:13.744 --> 00:05:18.444
Same thing up here but
we're gonna give it us breed list, and

77
00:05:18.444 --> 00:05:20.484
we're gonna give it dog.

78
00:05:20.484 --> 00:05:25.691
This is a some sort of function,
it's a function that returns a promise.

79
00:05:25.691 --> 00:05:27.715
That's what it is.

80
00:05:27.715 --> 00:05:31.303
So you say wait for next update.

81
00:05:33.872 --> 00:05:35.473
That is a promise, right?

82
00:05:35.473 --> 00:05:36.822
That doesn't return anything.

83
00:05:40.174 --> 00:05:42.702
At this point,
we can be guaranteed that result.

84
00:05:42.702 --> 00:05:45.770
Whatever result is,
is going to be what we expected.

85
00:05:45.770 --> 00:05:52.447
So we can say const pre list status

86
00:05:52.447 --> 00:05:57.941
equals result.current.

87
00:06:00.238 --> 00:06:06.425
Expect status to be loaded and

88
00:06:06.425 --> 00:06:12.373
expect breed list to equal,

89
00:06:15.955 --> 00:06:17.400
Breeds.

90
00:06:17.400 --> 00:06:21.860
Now important that this is not to be it
would check to see is do I have literally

91
00:06:21.860 --> 00:06:23.882
the same array which is actually,

92
00:06:23.882 --> 00:06:27.666
we don't care about identity here
we just care about equality.

93
00:06:27.666 --> 00:06:31.322
You can give me back to
different arrays as long as they

94
00:06:31.322 --> 00:06:35.561
contain the same things does
every literally the same array.

95
00:06:35.561 --> 00:06:38.875
Actually, this might come back
to be I don't know how it works

96
00:06:38.875 --> 00:06:41.573
underneath the hood, but
doesn't matter to me.

97
00:06:41.573 --> 00:06:45.286
I don't want to test that.

98
00:06:45.286 --> 00:06:51.359
Mpm run, Test watch, and it passes.

99
00:06:53.577 --> 00:06:55.896
So that is how you test fetch.

100
00:07:01.459 --> 00:07:02.387
Questions?

101
00:07:09.185 --> 00:07:14.276
All right, in the past have actually
written code that actually will hit

102
00:07:14.276 --> 00:07:19.295
the API or it will like spin up a fake
API and like hit that, just mock it.

103
00:07:19.295 --> 00:07:21.330
That's nine times out of ten
what you care about anyway.

