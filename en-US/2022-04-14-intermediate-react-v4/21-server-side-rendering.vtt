WEBVTT

1
00:00:00.000 --> 00:00:04.031
We do have to change the way
our app works a tiny bit.

2
00:00:04.031 --> 00:00:08.008
When you're rendering in a node
environment, you cannot access the DOM.

3
00:00:08.008 --> 00:00:09.522
I think that makes sense.

4
00:00:09.522 --> 00:00:13.486
However, we've coded our entire
application up to this point,

5
00:00:13.486 --> 00:00:16.595
thinking that it's going
to be running in the DOM.

6
00:00:16.595 --> 00:00:21.426
Now, I can help you cheat a little bit,
and I intentionally helped you write it in

7
00:00:21.426 --> 00:00:24.497
such a way that we didn't
have to change very much.

8
00:00:24.497 --> 00:00:28.598
But basically, it means that for
that critical path, first render,

9
00:00:28.598 --> 00:00:33.459
we have to get the, basically, window and
document out of the way, and fetch, for

10
00:00:33.459 --> 00:00:34.311
that matter.

11
00:00:34.311 --> 00:00:37.209
So an example of where this
could have been a problem.

12
00:00:37.209 --> 00:00:43.792
Here in Modal, notice that here we have to
do document.createElement("div"), right?

13
00:00:43.792 --> 00:00:47.839
You can't call document in node,
this will crash, right?

14
00:00:47.839 --> 00:00:50.211
No, I made it here in such
a way that you don't have to.

15
00:00:50.211 --> 00:00:54.858
So it's fine, cuz we don't render
modal on the first render, right?

16
00:00:54.858 --> 00:00:56.652
Don't render modals on the first render.

17
00:00:56.652 --> 00:01:00.954
I think that's generally just a good
rule of not being a crappy human being.

18
00:01:00.954 --> 00:01:04.798
I probably just offended someone there,
that's fine.

19
00:01:04.798 --> 00:01:09.268
[LAUGH] Welcome to the hill I die on,
modals are terrible.

20
00:01:09.268 --> 00:01:13.111
But if you are trying to render modal on
the first render, this would crash, right,

21
00:01:13.111 --> 00:01:14.806
because you're calling document.

22
00:01:14.806 --> 00:01:18.634
So you have to go take care of
all those concerns upfront.

23
00:01:18.634 --> 00:01:24.119
And then the other thing
that we can do here is we're

24
00:01:24.119 --> 00:01:29.621
calling from here,
Render from react-dom here.

25
00:01:29.621 --> 00:01:33.268
This is obviously gonna try and talk
to the window and the document, right?

26
00:01:33.268 --> 00:01:36.131
So we actually have to move
this into a special file.

27
00:01:36.131 --> 00:01:41.052
So just create a file here
with me called ClientApp.js.

28
00:01:41.052 --> 00:01:42.193
You can call it whatever you want.

29
00:01:42.193 --> 00:01:46.471
I called it ClientApp cuz this is what's
actually going to render in the browser.

30
00:01:46.471 --> 00:01:50.998
So everything that you put in ClientApp.js
will happen in the browser and

31
00:01:50.998 --> 00:01:52.541
will not happen in node.

32
00:01:52.541 --> 00:01:54.718
So think about all the things
that you might wanna do.

33
00:01:54.718 --> 00:01:59.038
For example, Google Analytics, you don't
wanna fire analytics from your server,

34
00:01:59.038 --> 00:02:01.381
you wanna fire analytics
from their browser.

35
00:02:01.381 --> 00:02:07.788
So you'd put all of your Google Analytics
calls here in ClientApp.js.

36
00:02:07.788 --> 00:02:11.712
So what we're gonna do here
instead of rendering App out here,

37
00:02:11.712 --> 00:02:16.080
like we do here in this document call,
which would definitely crash,

38
00:02:16.080 --> 00:02:18.760
we're gonna just say export default App.

39
00:02:20.464 --> 00:02:23.646
We're just gonna copy and paste that,
cuz we're gonna put that in ClientApp.

40
00:02:27.828 --> 00:02:29.767
And then we'll get rid of
render up here on line 1.

41
00:02:32.969 --> 00:02:36.907
Okay, here in ClientApp,
we're gonna put that line of render here.

42
00:02:36.907 --> 00:02:43.383
So first of all, We're going to import,

43
00:02:45.844 --> 00:02:50.582
render from react-dom,

44
00:02:50.582 --> 00:02:55.318
and we're going to import

45
00:02:55.318 --> 00:03:00.066
App from ./App, okay?

46
00:03:00.066 --> 00:03:07.694
Now, we have one more problem,
With App.js here.

47
00:03:07.694 --> 00:03:10.587
What about BrowserRouter?

48
00:03:10.587 --> 00:03:14.542
Well, BrowserRouter only
can happen in the DOM.

49
00:03:14.542 --> 00:03:17.495
Kind of a problem,
because we still need a router, right?

50
00:03:17.495 --> 00:03:19.323
So we're gonna pull this out as well.

51
00:03:22.855 --> 00:03:27.551
And you can just delete those
components here from React.

52
00:03:27.551 --> 00:03:31.418
Link will work, everything else will work,
it's just specifically

53
00:03:31.418 --> 00:03:35.631
BrowserRouter can't be rendered in Node,
it has to happen in the browser.

54
00:03:35.631 --> 00:03:41.063
So here in ClientApp,
we're also going to import BrowserRouter

55
00:03:41.063 --> 00:03:47.897
from react-router-dom, and then we'll
just wrap App here, BrowserRouter.

56
00:03:56.240 --> 00:03:57.856
There you go, like that.

57
00:04:01.524 --> 00:04:07.567
Okay, we're not quite there,
we actually don't wanna use render.

58
00:04:07.567 --> 00:04:09.153
Now, why?

59
00:04:09.153 --> 00:04:13.629
Render makes the fundamental assumption
that we're constructing this app from

60
00:04:13.629 --> 00:04:14.691
nothing, right?

61
00:04:14.691 --> 00:04:21.273
It's telling React, it's like, all right,
here's your space, get started.

62
00:04:21.273 --> 00:04:24.513
What we need to tell React is,
hey, we already did this for you,

63
00:04:24.513 --> 00:04:27.276
we just want you to take
over existing markup, right?

64
00:04:27.276 --> 00:04:29.144
Cuz what we're gonna do is,
on our first pass,

65
00:04:29.144 --> 00:04:30.935
we're going to render
out the complete app.

66
00:04:30.935 --> 00:04:35.024
We're gonna send that down to the user so
they immediately get static HTML.

67
00:04:35.024 --> 00:04:38.395
Then we have to tell React,
I already did the HTML part for

68
00:04:38.395 --> 00:04:42.064
you, I want you to just take
over the existing static markup.

69
00:04:42.064 --> 00:04:47.390
And the way you do that, instead of
saying render, we're gonna say hydrate.

70
00:04:50.844 --> 00:04:52.372
Cuz you can never drink enough water.

71
00:04:57.592 --> 00:05:00.554
The idea is, it's like you dry it out,
right, and then you send it down, and

72
00:05:00.554 --> 00:05:02.120
then it rehydrates it on the other side.

73
00:05:04.291 --> 00:05:06.316
Or it's just someone trying to remind
themselves to drink more water.

74
00:05:06.316 --> 00:05:07.751
It's one of the two,
I can't figure out which it is.

75
00:05:12.907 --> 00:05:18.648
One last thing here in index.html, instead
of having the entry point be App.js,

76
00:05:18.648 --> 00:05:21.281
we have to tell Parcel where to start.

77
00:05:21.281 --> 00:05:25.756
And the new place to
start is ClientApp.js.

78
00:05:25.756 --> 00:05:32.335
And I still have this here,
I gotta go delete that,

79
00:05:32.335 --> 00:05:36.167
delete those two things too.

80
00:05:38.718 --> 00:05:45.954
Okay, I think so

81
00:05:45.954 --> 00:05:52.638
far we are ready to go into node mode,
which I meant to rhyme just now.

82
00:05:52.638 --> 00:05:58.469
So first thing here is
we're gonna npm install,

83
00:05:58.469 --> 00:06:02.177
and we're gonna use Express.

84
00:06:02.177 --> 00:06:05.650
This is not a commentary that you
should or should not use Express,

85
00:06:05.650 --> 00:06:08.390
it's just the one that
everyone's familiar with.

86
00:06:11.913 --> 00:06:16.148
I tend to use express a lot,
cuz I've been writing node for a decade.

87
00:06:16.148 --> 00:06:19.471
And that's just the one that I can
write without thinking about it.

88
00:06:19.471 --> 00:06:22.955
But I will tell you that if I
was gonna start a startup today,

89
00:06:22.955 --> 00:06:25.474
I probably wouldn't build it on Express.

90
00:06:25.474 --> 00:06:28.886
Fastify would probably be
a strong choice there.

91
00:06:28.886 --> 00:06:33.209
I'd probably write my
frontend service in Next, and

92
00:06:33.209 --> 00:06:37.225
then my APIs in something like Fastify.

93
00:06:37.225 --> 00:06:38.852
Or Express, Express is fine.

94
00:06:43.163 --> 00:06:47.503
When I was at Netflix, we used Restify,
which is really similar.

95
00:06:47.503 --> 00:06:53.888
Okay, so now we have package.json, we look
here, we have express right there, great.

96
00:06:57.051 --> 00:07:00.371
Last thing here, ya, no,
we got that, that's fine.

97
00:07:02.705 --> 00:07:05.356
Go to your package.json, we're there.

98
00:07:05.356 --> 00:07:09.877
So we have dev here
that'll start our server.

99
00:07:09.877 --> 00:07:11.423
We also need to start our web server.

100
00:07:11.423 --> 00:07:14.104
So we're gonna put start here.

101
00:07:16.277 --> 00:07:20.971
And we also have to have to build.

102
00:07:20.971 --> 00:07:26.821
Let's do build first,
cuz that's gonna make more sense.

103
00:07:28.536 --> 00:07:35.004
Okay, so build is going to do
parcel build, which is fine.

104
00:07:37.602 --> 00:07:43.870
And then start is gonna do npm -s, which
is silent, I think, is what that means.

105
00:07:43.870 --> 00:07:45.628
You're gonna run build.

106
00:07:45.628 --> 00:07:48.219
So basically, every time that I run start,

107
00:07:48.219 --> 00:07:53.201
I wanna make sure that I build the server
anew again, which is what that's gonna do.

108
00:07:53.201 --> 00:07:55.570
And then we're gonna end.

109
00:07:55.570 --> 00:08:00.540
You might need to change how that works if
you're in Windows and not in PowerShell.

110
00:08:03.724 --> 00:08:10.661
Anyway, yeah, I'm wondering if
the double ampersand works in Windows.

111
00:08:10.661 --> 00:08:13.471
I don't remember exactly how to do it.

112
00:08:13.471 --> 00:08:16.503
If you're having trouble with it,

113
00:08:16.503 --> 00:08:21.765
then just make npm run start
node dist/backend/inde.js.

114
00:08:22.850 --> 00:08:25.935
And then just make sure you
always run build first,

115
00:08:25.935 --> 00:08:28.529
that's the way that you take care of that.

116
00:08:28.529 --> 00:08:32.396
For the rest of you just go ahead and
do npm -s run build,

117
00:08:32.396 --> 00:08:36.841
it's just easy to forget to run build and
you'll be wondering,

118
00:08:36.841 --> 00:08:40.487
I just changed this code,
why is it not rebuilding?

119
00:08:40.487 --> 00:08:43.450
So just an easy way to not do that.

120
00:08:44.820 --> 00:08:46.998
Okay, now we do have to give parcels and

121
00:08:46.998 --> 00:08:51.740
configuration cuz we actually needed
to build multiple things now, why?

122
00:08:51.740 --> 00:08:57.213
Well, if you think about it,
our entire application is written in jsx,

123
00:08:57.213 --> 00:08:59.994
we're gonna try and run jsx in node,

124
00:08:59.994 --> 00:09:05.590
which means something needs to compile it,
Because node doesn't speak jsx.

125
00:09:05.590 --> 00:09:08.208
Node also doesn't speak ES
module by default either, right?

126
00:09:10.446 --> 00:09:12.057
So down here at the bottom,

127
00:09:12.057 --> 00:09:17.728
we're gonna just add a couple of little
configuration items, it called targets.

128
00:09:17.728 --> 00:09:22.730
And we're gonna make two targets.

129
00:09:22.730 --> 00:09:26.220
One's gonna be called front end, which is
basically what we've already been doing.

130
00:09:27.710 --> 00:09:35.610
And its source is gonna be
source/index.html, right?

131
00:09:36.660 --> 00:09:45.355
And it's public URL,
Is going to be /frontend

132
00:09:47.560 --> 00:09:51.547
We're basically just telling
it where to find it, okay?

133
00:09:57.603 --> 00:09:58.695
And underneath that,

134
00:09:58.695 --> 00:10:01.920
we're gonna have a back end now
that we were not doing previously.

135
00:10:05.236 --> 00:10:12.072
Source is gonna be in, Server/index.js,

136
00:10:14.875 --> 00:10:19.230
I guess this can be an array or
cannot be an array, either way is fine.

137
00:10:19.230 --> 00:10:21.710
I think I originally had multiple
things here and took that out.

138
00:10:23.090 --> 00:10:23.846
Either way, both are fine.

139
00:10:28.195 --> 00:10:30.151
Optimize, because this is not
being sent over the wire,

140
00:10:30.151 --> 00:10:32.950
we don't need to like minify it and
manage it and all that kind of stuff.

141
00:10:32.950 --> 00:10:35.920
It's actually preferable if we don't
cuz we'll get better error messages.

142
00:10:35.920 --> 00:10:40.741
So for optimize,
we're gonna put that as false contexts.

143
00:10:40.741 --> 00:10:42.657
So we're gonna tell it please build for
node.

144
00:10:45.265 --> 00:10:48.830
And then, we'll have to tell what
version of node to build for.

145
00:10:48.830 --> 00:10:53.130
And we're gonna tell it to build for
whatever version of node you're using.

146
00:10:53.130 --> 00:10:54.121
I'm using node 16.

147
00:10:54.121 --> 00:10:57.099
So I'm gonna tell it to build for 16

148
00:11:00.464 --> 00:11:04.340
Again, I have a ligature there.

149
00:11:04.340 --> 00:11:07.199
This is angle bracket equal and
when I put them together,

150
00:11:07.199 --> 00:11:09.830
my font pushes them together
to make it look like that

151
00:11:13.735 --> 00:11:16.886
I need a colon there.

152
00:11:18.988 --> 00:11:24.671
Okay, This is what parcel

153
00:11:24.671 --> 00:11:29.225
is gonna read to build this.

154
00:11:32.101 --> 00:11:35.455
And this is also the way you would
build it to go out to production.

155
00:11:35.455 --> 00:11:37.907
So you can kinda take this as
like a double lesson in terms of,

156
00:11:37.907 --> 00:11:41.145
this is how you would set up parcel to
build multiple things to go to production.

157
00:11:42.935 --> 00:11:45.228
We're not gonna build a good
developer experience here.

158
00:11:45.228 --> 00:11:50.062
You typically, what you wanna do is
you'd wanna have parcels start on your

159
00:11:50.062 --> 00:11:54.680
web server and then it's like hot
refresh dev server in there, right?

160
00:11:54.680 --> 00:11:57.180
But that would add a lot of code
to make that all supported for

161
00:11:57.180 --> 00:11:58.480
a nice developer experience.

162
00:11:58.480 --> 00:12:01.440
And I'm just gonna show you how to
build this for production for today.

163
00:12:05.167 --> 00:12:08.550
Okay, now you and
I have to write a node server together.

164
00:12:09.950 --> 00:12:13.316
And there's a little bit to write here,

165
00:12:13.316 --> 00:12:17.771
so let's do that together,
make a new folder here and

166
00:12:17.771 --> 00:12:22.929
call it server, then here make
a new file and call it index.js

167
00:12:26.574 --> 00:12:30.879
Now you could write this in common js
typically that's how you write node-js,

168
00:12:30.879 --> 00:12:33.650
how you previously have been writing it.

169
00:12:33.650 --> 00:12:36.450
Future node code will be ES modules.

170
00:12:36.450 --> 00:12:38.050
So let's just do that.

171
00:12:38.050 --> 00:12:39.940
It's already running
through parcel anyway, so

172
00:12:39.940 --> 00:12:41.700
might as well make it
futuristic JavaScript.

173
00:12:43.040 --> 00:12:45.199
Import express from express.

174
00:12:48.571 --> 00:12:54.416
Import renderToString from

175
00:12:54.416 --> 00:12:59.291
react-dom/server.

176
00:13:00.710 --> 00:13:05.017
So there's a special like little sub
package here that allows us to render

177
00:13:05.017 --> 00:13:06.761
the stream from react-dom.

178
00:13:08.729 --> 00:13:14.600
We're gonna import a module
from React Router DOM

179
00:13:14.600 --> 00:13:19.930
called StaticRouter react-router-dom.

180
00:13:19.930 --> 00:13:22.607
Again they mimic the same
pattern which is server.

181
00:13:26.133 --> 00:13:31.092
We're gonna import our good friend fs,
from fs, this is file system,

182
00:13:31.092 --> 00:13:33.250
it's just a node core module.

183
00:13:35.940 --> 00:13:41.843
And import app from ../source/App.

184
00:13:48.245 --> 00:13:50.923
Okay, these are all of our core modules.

185
00:13:50.923 --> 00:13:54.802
We're gonna declare the port that
we're gonna be listening on.

186
00:13:54.802 --> 00:13:58.208
So you can either just set
that to straight up be 1000,

187
00:13:58.208 --> 00:14:01.545
I have a force of habit from
working at a cloud provider for

188
00:14:01.545 --> 00:14:06.015
too long to say process.env.PORT or
some default port which is 3000.

189
00:14:06.015 --> 00:14:10.679
The reason why I do it this way is if
you deploy it to like Azure for example,

190
00:14:10.679 --> 00:14:15.344
it will provide you an environment
variable to tell you what port to listen

191
00:14:15.344 --> 00:14:18.070
because it's always a nonstandard port.

192
00:14:19.410 --> 00:14:23.698
It's a security thing, kind of, not
really, probably just the way they do it.

193
00:14:25.790 --> 00:14:28.770
Okay, we're gonna kind of
cheat this a little bit.

194
00:14:28.770 --> 00:14:33.641
There's a lot of ways that you can think
about how to do server side rendering.

195
00:14:33.641 --> 00:14:38.354
A lot of people will make a special
react component that's only meant to be

196
00:14:38.354 --> 00:14:42.015
rendered on the server that
renders the body of the HTML.

197
00:14:42.015 --> 00:14:46.540
We don't need to do that right now, so
we're not going to, but you could do it

198
00:14:46.540 --> 00:14:50.947
that way, and I'll say it's probably
one of the more common ways to do it.

199
00:14:50.947 --> 00:14:55.970
What we're gonna do instead is we're going
to read from our generated HTML document.

200
00:14:55.970 --> 00:14:57.090
In fact, you can see here.

201
00:14:58.700 --> 00:15:00.360
Well, we haven't built it yet.

202
00:15:02.120 --> 00:15:05.542
This is going to get built into another
HTML document that's gonna be put into our

203
00:15:05.542 --> 00:15:06.510
dist folder, right?

204
00:15:08.240 --> 00:15:12.370
That's going to have all of the correct
JavaScript and CSS linked, rather than try

205
00:15:12.370 --> 00:15:16.382
and figure out what parcel did, we're just
going to take that generated file and

206
00:15:16.382 --> 00:15:19.830
we're going to use that
to server-side render.

207
00:15:19.830 --> 00:15:20.800
So let me show you what I mean.

208
00:15:22.806 --> 00:15:28.702
I'm gonna say const html = fs.readFileSync

209
00:15:30.484 --> 00:15:37.678
And we're gonna read from
dist/frontend/index.html, right?

210
00:15:37.678 --> 00:15:43.390
This is the generated index html which
is gonna have all the correct paths.

211
00:15:44.710 --> 00:15:47.016
And then we'll say ToString here.

212
00:15:47.016 --> 00:15:50.450
In general, I don't recommend
using readFileSync for node,

213
00:15:50.450 --> 00:15:53.186
unless you're starting up your server,
right?

214
00:15:53.186 --> 00:15:55.860
I'm only gonna do this once.

215
00:15:55.860 --> 00:16:01.210
It's gonna pause the invocation of the
rest of the code here until this is done.

216
00:16:01.210 --> 00:16:06.500
You don't wanna do that in your
response cycle to your users,

217
00:16:06.500 --> 00:16:11.601
that would be dumb, but
it's fine for starting up, okay.

218
00:16:11.601 --> 00:16:17.848
Const parts equals, so
if you look at this document now,

219
00:16:17.848 --> 00:16:25.411
this index at HTML, where does our
react code go, our react markup?

220
00:16:25.411 --> 00:16:28.217
It goes right here, right.

221
00:16:28.217 --> 00:16:33.155
So I wanna render this part first,
I wanna not render not rendered, and

222
00:16:33.155 --> 00:16:35.552
then I wanna render the rest of it.

223
00:16:35.552 --> 00:16:40.523
So typically what people will do here
is they'll put some fancy comment of

224
00:16:40.523 --> 00:16:42.935
break here or something like that.

225
00:16:44.646 --> 00:16:46.462
That would be like
the normal sane thing to do.

226
00:16:46.462 --> 00:16:51.200
I'm just gonna break on not
rendered because why not.

227
00:16:51.200 --> 00:16:52.427
It's a good delimiter, right.

228
00:16:52.427 --> 00:16:55.144
No, it's a terrible delimiter but
we're gonna do it anyway.

229
00:16:55.144 --> 00:17:00.623
HTML.split not rendered.

230
00:17:04.551 --> 00:17:07.459
This is just a string function,
right, parts is a string,

231
00:17:07.459 --> 00:17:09.974
you can see literally right there,
it is a string.

232
00:17:11.713 --> 00:17:14.958
And then we're just splitting
on it on not rendered, so

233
00:17:14.958 --> 00:17:18.892
we're basically using it like
a commo we would in a string, right,

234
00:17:18.892 --> 00:17:22.295
but we're doing it literally
on the string not rendered.

235
00:17:22.295 --> 00:17:24.545
So not rendered will not be included,
right,

236
00:17:24.545 --> 00:17:27.210
cuz the limiters are not
included when you call split.

237
00:17:28.780 --> 00:17:34.561
So now parts zero will be all of this,

238
00:17:34.561 --> 00:17:40.540
and parts one will be all of this.

239
00:17:40.540 --> 00:17:42.103
Now, let me tell you why
this is a horrible idea,

240
00:17:42.103 --> 00:17:45.490
what happens if we have the string not
rendered somewhere in our react app?

241
00:17:45.490 --> 00:17:51.185
It will be fine in our react app, but
let's say somewhere else in our index.HTML

242
00:17:51.185 --> 00:17:57.110
for whatever dumb reason it got output
here, then it would mess up everything.

243
00:17:57.110 --> 00:17:58.780
So we're making this a little fragile but
it's fine.

244
00:18:00.950 --> 00:18:07.053
Okay, const app equals express,
we're making a new server,

245
00:18:07.053 --> 00:18:12.696
we're gonna serve all of our
static assets.app.use for

246
00:18:12.696 --> 00:18:18.246
slash front end,
express.static, dist.front end.

247
00:18:18.246 --> 00:18:22.601
This will just correctly serve
all of our front end assets.

248
00:18:24.271 --> 00:18:27.324
That's where we set the public
URL to be slash front end so

249
00:18:27.324 --> 00:18:29.046
this would all work correctly.

250
00:18:32.787 --> 00:18:39.238
Okay, and then we're gonna say app.use
takes in a request and a response.

251
00:18:41.186 --> 00:18:43.580
And then here is where all
the magic is going to happen.

252
00:18:45.760 --> 00:18:50.463
Const react markup equals, and again,
remember this is going through Babel, or

253
00:18:50.463 --> 00:18:55.060
it's not what is going through Babel but
it's going through Parcel.

254
00:18:55.060 --> 00:18:59.170
So we can actually write JSX directly in
our note code and that's totally fine.

255
00:18:59.170 --> 00:19:05.282
So we're gonna see a static
router location equals req.URL,

256
00:19:05.282 --> 00:19:11.410
so we're passing in the URL from
the request to static router.

257
00:19:11.410 --> 00:19:14.897
This is going to run a server
side rendering of this,

258
00:19:14.897 --> 00:19:17.209
and then we're gonna render app.

259
00:19:18.880 --> 00:19:23.622
At the end of this react markup is going
to be whatever the generation is of

260
00:19:23.622 --> 00:19:26.750
this or
basically the create element thereof.

261
00:19:29.220 --> 00:19:33.166
Then once this is all done,
we're gonna say res.send.

262
00:19:37.315 --> 00:19:42.432
Basically just parts zero +

263
00:19:42.432 --> 00:19:48.193
render to string react markup,

264
00:19:50.287 --> 00:19:52.524
+ parts one, right.

265
00:19:57.352 --> 00:19:58.849
In my notes I did it as a template string,

266
00:19:58.849 --> 00:20:01.060
you can do it either way,
whatever seems more clear to you.

267
00:20:04.862 --> 00:20:09.805
That's it, this will now be the complete
server side rendering of our code,

268
00:20:09.805 --> 00:20:12.248
and then you just gonna say res.end.

269
00:20:15.489 --> 00:20:19.034
Console.log, I always do this just
to remember what port I'm on.

270
00:20:22.546 --> 00:20:31.723
Listening on http://localhost: port,

271
00:20:31.723 --> 00:20:36.070
port, port, port,

272
00:20:36.070 --> 00:20:39.692
port, okay, and

273
00:20:39.692 --> 00:20:44.768
then app.listenonport

274
00:20:52.733 --> 00:20:57.931
Okay, there's three dots there,
just need two.

275
00:21:01.153 --> 00:21:05.652
Before I take some questions,
let me make sure that this

276
00:21:05.652 --> 00:21:11.220
actually invokes, okay,
I'm gonna run NPM run start.

277
00:21:11.220 --> 00:21:18.883
Okay, package.JSON, I messed up that
this should be engines number 44 there.

278
00:21:24.699 --> 00:21:27.838
This is one of my favorite
things about Parcel though,

279
00:21:27.838 --> 00:21:30.372
their error messages are awesome, right.

280
00:21:30.372 --> 00:21:32.649
Did you mean to call this engines?

281
00:21:32.649 --> 00:21:33.449
Yes I did

282
00:21:42.012 --> 00:21:46.400
So here you can see everything that
the front end built here, which is good.

283
00:21:46.400 --> 00:21:50.587
We can see here with the backend built,
index.JS.

284
00:21:50.587 --> 00:21:55.800
Now I can just control click on this,
and my app still works.

285
00:21:57.700 --> 00:22:01.830
Now if you look at the mark,
I'm just doing view source here, right.

286
00:22:03.210 --> 00:22:08.016
Oops, notice that the adopt me,
all this stuff that was being generated in

287
00:22:08.016 --> 00:22:10.850
React is now being
generated on the server.

288
00:22:10.850 --> 00:22:15.409
So the users getting actually more
complete looking application.

289
00:22:15.409 --> 00:22:20.335
To kind of drive home my point a little
bit, one, no one turns off their

290
00:22:20.335 --> 00:22:26.640
JavaScript anymore, you can assume that at
all times users have JavaScript enabled.

291
00:22:26.640 --> 00:22:27.650
That's not a thing anymore.

292
00:22:27.650 --> 00:22:31.958
I hear people say,
well this needs to work without

293
00:22:31.958 --> 00:22:35.971
JavaScript enable, we're past that point.

294
00:22:35.971 --> 00:22:38.699
But this works without JavaScript.

295
00:22:42.300 --> 00:22:46.818
So this page, right, it's rendering,
all of this stuff is coming through so

296
00:22:46.818 --> 00:22:51.209
no JavaScript is executing, obviously
our app is not functional, right.

297
00:22:51.209 --> 00:22:54.575
But they at least get the first view
without any JavaScript enabled.

