WEBVTT

1
00:00:00.458 --> 00:00:05.046
So we're gonna go move on and
talk about useCallback.

2
00:00:05.046 --> 00:00:11.034
This is gonna look really familiar to you
because it's relatively the same thing.

3
00:00:11.034 --> 00:00:15.450
And actually useCallback is implemented
by using useMemo internally.

4
00:00:15.450 --> 00:00:20.150
So they actually have
the same sort of mechanism.

5
00:00:23.541 --> 00:00:28.666
So, same sort of thing here,
notice we have used callback here,

6
00:00:28.666 --> 00:00:32.216
and we have a timer
that's counting up here.

7
00:00:32.216 --> 00:00:35.366
But notice this last
rerender here is 11:36, so

8
00:00:35.366 --> 00:00:37.820
it's different from what's down here.

9
00:00:37.820 --> 00:00:42.636
But as soon as I click this current count,
it does rerender down here, right?

10
00:00:42.636 --> 00:00:46.209
So it's only re-rendering every
time that I increment this.

11
00:00:46.209 --> 00:00:49.460
Let's talk about why that is.

12
00:00:49.460 --> 00:00:53.417
So I have this expensive computation
component, which is doing the same thing,

13
00:00:53.417 --> 00:00:55.347
it's using Fibonacci again, right?

14
00:00:57.620 --> 00:00:59.711
Compute, where's my compute function here?

15
00:01:03.904 --> 00:01:05.844
It's coming from that, okay?

16
00:01:05.844 --> 00:01:07.994
And then here I have my Fibonacci again.

17
00:01:07.994 --> 00:01:12.204
But just you can replace this in your
brain as a really expensive thing to

18
00:01:12.204 --> 00:01:13.338
compute, right?

19
00:01:13.338 --> 00:01:18.275
So here the callback component, the parent
component, I have the time, the set time,

20
00:01:18.275 --> 00:01:20.495
right, and that's counting up here.

21
00:01:20.495 --> 00:01:24.974
And then I have the count and
set count, so that's what this is.

22
00:01:24.974 --> 00:01:26.678
It's just counting up.

23
00:01:26.678 --> 00:01:32.239
And then I have an effect here in
the parent component that's counting up,

24
00:01:32.239 --> 00:01:35.869
right, or
rather it's updating with the time.

25
00:01:35.869 --> 00:01:37.772
Okay, I have my Fibonacci here.

26
00:01:39.940 --> 00:01:45.834
And then down here,
What I'm doing is I'm passing

27
00:01:45.834 --> 00:01:51.887
into the expensive computation component
down here, useCallback with Fibonacci,

28
00:01:51.887 --> 00:01:57.363
and then I'm just telling it to not
re-render, unless it changes, right?

29
00:02:00.401 --> 00:02:01.586
So why do we do that?

30
00:02:01.586 --> 00:02:06.410
Cuz Fibonacci is actually
being calculated down here

31
00:02:06.410 --> 00:02:10.277
in the expensive computation component.

32
00:02:10.277 --> 00:02:13.570
And the reason why that's bad,
if I just pass in Fibonacci directly here,

33
00:02:20.450 --> 00:02:25.310
Notice this is now re-rendering
every single time, why?

34
00:02:25.310 --> 00:02:29.842
Well, Fibonacci here which exists
inside of callback component gets

35
00:02:29.842 --> 00:02:34.000
recreated every single time that
we re-render the component.

36
00:02:34.000 --> 00:02:34.929
So every time,

37
00:02:34.929 --> 00:02:39.940
this is actually going to be a different
function that does the same thing, right?

38
00:02:39.940 --> 00:02:44.619
But to react down here in
expensive computation component,

39
00:02:44.619 --> 00:02:48.945
it says, hey,
compute is changing every single time.

40
00:02:48.945 --> 00:02:51.427
Why does it think that?

41
00:02:51.427 --> 00:02:53.680
And why does it matter
in this particular case?

42
00:02:53.680 --> 00:02:58.069
Well count, if you have like x = 5, right?

43
00:02:58.069 --> 00:03:04.170
And then later I go back to say,
hey, is x = = = 5?

44
00:03:04.170 --> 00:03:08.712
The answer is, yeah, right, it is.

45
00:03:08.712 --> 00:03:13.503
However, if I have a function

46
00:03:13.503 --> 00:03:19.464
here, Function y.

47
00:03:20.723 --> 00:03:21.640
Okay, let's do it this way.

48
00:03:25.790 --> 00:03:26.930
Why does it stopped doing that?

49
00:03:29.727 --> 00:03:33.717
Okay, I have cons y = generic function,
right?

50
00:03:33.717 --> 00:03:38.659
This is just like the most basic function,

51
00:03:38.659 --> 00:03:41.691
let's even just do this.

52
00:03:41.691 --> 00:03:43.367
All right,
it's just a generic function here.

53
00:03:43.367 --> 00:03:50.469
If I go back and
ask later is y = = = function like that?

54
00:03:52.002 --> 00:03:52.519
It's not, right?

55
00:03:52.519 --> 00:03:55.999
They're both empty functions but

56
00:03:55.999 --> 00:04:00.681
they're different empty functions, okay?

57
00:04:00.681 --> 00:04:02.448
Why is that important?

58
00:04:02.448 --> 00:04:06.275
That's important because expensive
computation component is judging,

59
00:04:06.275 --> 00:04:10.115
do I need to re-render by looking at
the props and saying is count the same.

60
00:04:10.115 --> 00:04:11.364
Yeah, it's the same.

61
00:04:11.364 --> 00:04:13.301
Is compute the same?

62
00:04:13.301 --> 00:04:15.424
No, I got a different compute this time,
right?

63
00:04:15.424 --> 00:04:16.717
It's the same function, but

64
00:04:16.717 --> 00:04:19.522
it's the same principle here
of like it's different, right?

65
00:04:19.522 --> 00:04:23.113
It's a different instance of the same
function because I'm recreating it every

66
00:04:23.113 --> 00:04:25.399
single time here in this render function,
right?

67
00:04:25.399 --> 00:04:27.748
That's a problem.

68
00:04:34.163 --> 00:04:37.443
That's why, you don't want that anyway,
we can get rid of that

69
00:04:39.949 --> 00:04:44.999
That's a problem here because,
if this number starts

70
00:04:44.999 --> 00:04:49.737
getting really big,
let's make this 30 again.

71
00:04:49.737 --> 00:04:54.770
It's re-computing this
every single time because

72
00:04:54.770 --> 00:04:59.239
this compute thing is
coming back different.

73
00:04:59.239 --> 00:05:01.711
So this is what useCallback does for you.

74
00:05:01.711 --> 00:05:07.771
If I put now useCallback And

75
00:05:07.771 --> 00:05:11.976
I say Fibonacci is never changing,
it's always the same one.

76
00:05:13.155 --> 00:05:17.170
Therefore, this will not re-render
cuz it's giving it back the same

77
00:05:17.170 --> 00:05:18.337
function, right?

78
00:05:18.337 --> 00:05:25.797
In the same way that useMemo is giving you
back the same thing over and over again.

79
00:05:25.797 --> 00:05:28.311
Now, it's a very specific use case here.

80
00:05:28.311 --> 00:05:31.897
There's a bunch of ways that you
could optimize people saying, like,

81
00:05:31.897 --> 00:05:33.889
why don't we just pull Fibonacci out?

82
00:05:33.889 --> 00:05:36.627
That's a wonderful idea and
you should definitely do that, right?

83
00:05:36.627 --> 00:05:40.925
But there are specific use
cases where useCallback here

84
00:05:40.925 --> 00:05:45.783
can be helpful to help your app
not unnecessarily re-render.

85
00:05:45.783 --> 00:05:48.792
All right, let's make that so
it's not doing that every single time.

86
00:05:48.792 --> 00:05:49.990
30, let's put that down to 1.

87
00:05:49.990 --> 00:05:56.334
So again,
very specific performance optimization.

88
00:05:56.334 --> 00:06:01.055
But I guess what the major takeaway from
you here is, the way that React decides,

89
00:06:01.055 --> 00:06:05.239
am I gonna re-render or not,
is it checks your props and it say, okay.

90
00:06:05.239 --> 00:06:08.408
Compute encountered the same
thing not gonna re-render this,

91
00:06:08.408 --> 00:06:11.753
even though the parent has to re-render,
it'll just give you back

92
00:06:11.753 --> 00:06:15.463
the same result before for the child
component if the props don't change.

93
00:06:18.391 --> 00:06:22.248
That's again my side effects are very
important that you're not causing side

94
00:06:22.248 --> 00:06:24.360
effects in your render functions, yeah.

95
00:06:24.360 --> 00:06:28.810
&gt;&gt; There's a question in the chat about
the memo function there on line four and

96
00:06:28.810 --> 00:06:30.131
I'm curious, yeah,

97
00:06:30.131 --> 00:06:34.250
is that part of what's necessary
to have this useCallback function?

98
00:06:34.250 --> 00:06:34.750
&gt;&gt; Yes.

99
00:06:37.288 --> 00:06:42.292
So, memo is a function that comes from
React, that allows this kind of thing

100
00:06:42.292 --> 00:06:47.308
to do here, which is to say that it
checks the props and only re-renders it.

101
00:06:47.308 --> 00:06:48.289
Otherwise, it would just do it anyway.

102
00:06:51.057 --> 00:06:53.050
I think if I just got rid of that.

103
00:06:57.370 --> 00:07:01.371
Now, notice down here,
it's re-rendering every single time.

104
00:07:04.530 --> 00:07:07.313
So yeah, what I was just saying
about it checking the props,

105
00:07:07.313 --> 00:07:09.070
that only applies if memo is applied.

106
00:07:13.184 --> 00:07:21.522
Yep, But

107
00:07:21.522 --> 00:07:25.330
now notice I put it back in,
and it is not re-rendering.

108
00:07:30.073 --> 00:07:34.550
Cool, other questions?

109
00:07:34.550 --> 00:07:39.369
I see a lot of people that will always
wrap their components in memo as well,

110
00:07:39.369 --> 00:07:40.453
terrible idea.

111
00:07:40.453 --> 00:07:44.650
Again, in general, React is very fast,
and so this re-compute are very fast.

112
00:07:44.650 --> 00:07:50.094
And so you typically don't have to worry
about these performance optimizations.

113
00:07:50.094 --> 00:07:53.176
Only use memo when you actually have
an expensive component to render.

114
00:07:55.270 --> 00:07:59.466
Now, I'm showing you this with like
an expensive function like Fibonacci.

115
00:07:59.466 --> 00:08:04.450
But imagine if you had like a spreadsheet
component that had,100,000 lines in it,

116
00:08:04.450 --> 00:08:07.571
that's a really good thing
that you might put memo on it.

117
00:08:07.571 --> 00:08:12.015
And you might use some of these
things on it where it's really

118
00:08:12.015 --> 00:08:16.560
expensive to render 100,000
lines of a spreadsheet.

119
00:08:16.560 --> 00:08:18.010
Sometimes you might need to re-render it.

120
00:08:18.010 --> 00:08:20.172
You only wanna re-render
when you absolutely have to.

121
00:08:22.300 --> 00:08:23.186
That makes sense?

122
00:08:27.260 --> 00:08:29.740
But honestly, you probably still
wanna check the performance profile,

123
00:08:29.740 --> 00:08:31.429
you might still wanna re-render it,
who knows?

124
00:08:34.017 --> 00:08:39.233
Okay, any other questions
about useCallback.

125
00:08:39.233 --> 00:08:46.249
&gt;&gt; As so
we can't use useCallback without memo?

126
00:08:46.249 --> 00:08:51.730
&gt;&gt; Probably,
I'm struggling to think of when you could.

127
00:08:51.730 --> 00:08:53.980
Let's say that they're almost
always hooked together.

128
00:08:53.980 --> 00:08:56.707
I'm sure someone can invent
the reason why not to.

129
00:08:56.707 --> 00:09:01.208
But the primary reason is that you would
want to cause your child's component to

130
00:09:01.208 --> 00:09:04.165
not re-render when you're
passing it a function,

131
00:09:04.165 --> 00:09:07.407
which would require useCallback or
would require memo.

132
00:09:07.407 --> 00:09:10.017
So you can use memo without useCallback,
but

133
00:09:10.017 --> 00:09:13.459
I'm pretty sure you can't use
useCallback without memo.

134
00:09:15.941 --> 00:09:19.727
If I'm wrong,
someone correct me in the chat.

135
00:09:19.727 --> 00:09:25.422
&gt;&gt; So to clarify, memo is checking the
props to see if they changed to re-render,

136
00:09:25.422 --> 00:09:27.891
I thought React already did this?

137
00:09:27.891 --> 00:09:30.420
&gt;&gt; It doesn't, no,
React is just gonna re-render.

138
00:09:33.351 --> 00:09:37.480
Yeah, I kind of misspoke
a little bit earlier on that.

139
00:09:37.480 --> 00:09:41.492
&gt;&gt; Is what they're thinking of is probably
the dependent arrays that we pass to

140
00:09:41.492 --> 00:09:42.125
our hooks.

141
00:09:45.625 --> 00:09:48.165
&gt;&gt; Not sure I understood what you said.

142
00:09:48.165 --> 00:09:50.899
&gt;&gt; I'm guessing what this user
was thinking and guessing and

143
00:09:50.899 --> 00:09:53.576
checking the props to see if
they changed through under,

144
00:09:53.576 --> 00:09:56.835
that sounds like the behavior about
dependency arrays that we pass.

145
00:09:56.835 --> 00:09:57.779
&gt;&gt; I think it's pretty close, yeah.

146
00:10:02.780 --> 00:10:07.879
I mean, the long story short is just
making sure that this use or this

147
00:10:07.879 --> 00:10:14.156
Fibonacci that you're passing to it is
the same callback everything single time.

148
00:10:23.212 --> 00:10:25.833
Anyway, I've never had
professionals use this.

149
00:10:25.833 --> 00:10:27.149
We've spent a bunch of
time learning about it.

150
00:10:27.149 --> 00:10:30.430
I've never had any
professional use useCallback.

151
00:10:30.430 --> 00:10:31.700
So it is not the most useful.

152
00:10:31.700 --> 00:10:36.584
And I've actually heard someone on
the React core team say that they

153
00:10:36.584 --> 00:10:40.184
probably should have just
left it with useMemo and

154
00:10:40.184 --> 00:10:43.964
let users re-implement
useCallback themselves.

155
00:10:43.964 --> 00:10:46.180
It is a fairly nice use case

