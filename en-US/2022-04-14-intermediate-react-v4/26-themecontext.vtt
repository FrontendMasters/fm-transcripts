WEBVTT

1
00:00:00.170 --> 00:00:03.471
You can see the state of
the project now at typescript-1.

2
00:00:03.471 --> 00:00:09.030
I think there's through 5,
let's make sure that that's the case.

3
00:00:09.030 --> 00:00:11.379
Yeah, typescript 1 through typescript 5.

4
00:00:15.254 --> 00:00:17.220
All right, let's keep going.

5
00:00:19.200 --> 00:00:21.240
Let's do ThemeContext.

6
00:00:21.240 --> 00:00:24.681
This one's not too bad to do.

7
00:00:24.681 --> 00:00:28.497
Okay, kind of a side note,
a pause here for me to kind of,

8
00:00:28.497 --> 00:00:31.453
I've done a lot of
migrations on my career.

9
00:00:31.453 --> 00:00:34.558
People pay me a lot of money
to do migrations in my career,

10
00:00:34.558 --> 00:00:36.900
I feel like I've wasted
a lot of my career.

11
00:00:36.900 --> 00:00:38.377
That's it, that's the whole statement.

12
00:00:38.377 --> 00:00:39.970
I'm just kidding.

13
00:00:42.100 --> 00:00:45.969
The way I go about doing migrations and
specifically typescripts

14
00:00:45.969 --> 00:00:49.845
migrations is that I try and
start at like the leaf nodes, right?

15
00:00:49.845 --> 00:00:52.133
The things that are the furthest out.

16
00:00:52.133 --> 00:00:54.590
If I tried to start my
migration with app.js,

17
00:00:54.590 --> 00:00:58.123
it would be a nightmare because
everything is dependent, right?

18
00:00:58.123 --> 00:01:02.519
And so you would kinda have to go
through this entire project of trying to

19
00:01:02.519 --> 00:01:05.830
basically boil the ocean all at once and
that's bad.

20
00:01:05.830 --> 00:01:07.210
You don't wanna do it that way.

21
00:01:07.210 --> 00:01:10.824
It's much better if you start at something
like ThemeContext where it does not

22
00:01:10.824 --> 00:01:12.740
dependent, right?

23
00:01:12.740 --> 00:01:14.556
Everything imports ThemeContext,

24
00:01:14.556 --> 00:01:18.660
ThemeContext is not importing other things
if that makes any sense to you, right?

25
00:01:21.910 --> 00:01:26.072
What's nice about this is that I
can finish ThemeContext right away.

26
00:01:26.072 --> 00:01:30.541
And now, everywhere that it's being
imported will have those types but

27
00:01:30.541 --> 00:01:33.704
I don't have to go type that
file to make it useful.

28
00:01:33.704 --> 00:01:38.381
This just makes it easier and it makes
it so you can have quick wins, and

29
00:01:38.381 --> 00:01:40.538
I'm all about that serotonin.

30
00:01:40.538 --> 00:01:45.830
All right, so here in ThemeContext,
we have to just tell

31
00:01:45.830 --> 00:01:51.140
it what type of context we're
going to be creating here.

32
00:01:51.140 --> 00:01:56.874
So first of all,
rename this to be ThemeContext.ts.

33
00:01:56.874 --> 00:01:59.839
You could make it tsx,
there's no jsx here so

34
00:01:59.839 --> 00:02:03.360
that's totally up to you,
I don't care either way.

35
00:02:06.630 --> 00:02:07.594
Okay?

36
00:02:07.594 --> 00:02:12.218
And then here we're gonna tell it that
the kind of context that we're creating is

37
00:02:12.218 --> 00:02:13.520
gonna be Hook shaped.

38
00:02:13.520 --> 00:02:18.590
So it's gonna be a string and
then it's going to be

39
00:02:18.590 --> 00:02:24.627
a function that's gonna take in
a theme which is a string and

40
00:02:24.627 --> 00:02:29.852
it is going to return
nothing which is void, okay?

41
00:02:32.890 --> 00:02:35.299
There's again many ways to skin this,

42
00:02:35.299 --> 00:02:39.170
I actually just typed in literally
here what a Hook looks like.

43
00:02:39.170 --> 00:02:43.080
I think you can find a way to make this
actually know that it is specifically

44
00:02:43.080 --> 00:02:47.134
supposed to be a use State Hook but
honestly this is fine, this works for me.

45
00:02:47.134 --> 00:02:51.225
So it's now a react context that
specifically gonna take a array of two

46
00:02:51.225 --> 00:02:55.470
things, if you try to give it three
things, it won't be happy about it.

47
00:02:55.470 --> 00:02:56.970
The first one is gonna be a string and

48
00:02:56.970 --> 00:03:00.385
the second one is going to be a function
that takes in a theme and returns nothing.

49
00:03:04.184 --> 00:03:06.220
That's it, that's the whole thing.

50
00:03:06.220 --> 00:03:08.525
Congratulations, you did ThemeContext.

51
00:03:10.643 --> 00:03:12.115
Okay?
Let's move on to the next one.

52
00:03:14.530 --> 00:03:19.883
So frequently what I'll find myself doing
is I'll make a file of useful types and

53
00:03:19.883 --> 00:03:25.249
sometimes useful types will break down
further into many files of useful types.

54
00:03:26.780 --> 00:03:29.487
And a really good example of when
you wanna do that is with API

55
00:03:29.487 --> 00:03:30.750
responses, right?

56
00:03:30.750 --> 00:03:34.090
Your API response doesn't come with types.

57
00:03:34.090 --> 00:03:36.778
There's no way the typescript
would have a concept of like,

58
00:03:36.778 --> 00:03:40.590
I'm gonna call this API and this API
is going to give me back these things.

59
00:03:40.590 --> 00:03:44.694
So you have to tell it, here's what
I expect to get back from the API.

60
00:03:44.694 --> 00:03:49.258
So I want you to make a new file here and

61
00:03:49.258 --> 00:03:56.335
you can just call it something
like API responses types.

62
00:03:56.335 --> 00:03:59.738
I call it responsestypes.ts, okay?

63
00:03:59.738 --> 00:04:04.377
And then here I'm gonna
export a type Animal, and

64
00:04:04.377 --> 00:04:09.799
this is gonna be what you would
call it an enumerated type.

65
00:04:10.940 --> 00:04:15.882
An animal can be either

66
00:04:15.882 --> 00:04:20.822
a dog or a cat or a bird or

67
00:04:20.822 --> 00:04:25.771
a reptile or a rabbit.

68
00:04:25.771 --> 00:04:29.858
So now if I try and say,
I don't know somewhere else I say,

69
00:04:29.858 --> 00:04:33.540
this is an animal and
I say animals now equal to goat.

70
00:04:33.540 --> 00:04:36.970
It's gonna be, I don't know what that is,
I'm not gonna let you do that.

71
00:04:36.970 --> 00:04:39.885
But now I can assign to say,
all right, this thing is an animal and

72
00:04:39.885 --> 00:04:42.709
it's a bird and types can be cool,
I know what that is, right?

73
00:04:42.709 --> 00:04:47.031
It limits the types of
strings that can be in there,

74
00:04:47.031 --> 00:04:51.562
aka an enumerated type,
which is kind of fun, okay?

75
00:04:51.562 --> 00:04:58.690
So this is a type and then we're gonna
make these down here interfaces.

76
00:04:58.690 --> 00:05:04.333
So the pet interface is gonna be what kind
of pets we get back from the pet API.

77
00:05:04.333 --> 00:05:06.985
So it's gonna be an ID which is a number,

78
00:05:06.985 --> 00:05:11.821
it's gonna be a name which is a string,
it's gonna be an animal which is as

79
00:05:11.821 --> 00:05:15.647
you might have guessed an animal
the one that we just made.

80
00:05:15.647 --> 00:05:19.429
Description string,

81
00:05:19.429 --> 00:05:23.608
breed string, images,

82
00:05:23.608 --> 00:05:28.789
it's gonna be a string array.

83
00:05:28.789 --> 00:05:35.703
A city string, state string.

84
00:05:38.292 --> 00:05:39.136
Okay?

85
00:05:39.136 --> 00:05:42.642
So now we have a pet type that we can
throw around anytime we get back a pet

86
00:05:42.642 --> 00:05:45.152
from the API and
we know it always looks like this.

87
00:05:47.210 --> 00:05:49.451
Okay?
And then we have one more thing,

88
00:05:49.451 --> 00:05:50.800
we have a pet response.

89
00:05:50.800 --> 00:05:58.078
So we're gonna do an export Interface,
PetAPIResponse.

90
00:05:58.078 --> 00:06:02.031
And that is a number of

91
00:06:02.031 --> 00:06:07.088
results which is a number.

92
00:06:07.088 --> 00:06:11.340
A start index which as a number.

93
00:06:11.340 --> 00:06:16.146
An end index which you may
have guessed is a number.

94
00:06:16.146 --> 00:06:20.151
hasNext which is a Boolean and

95
00:06:20.151 --> 00:06:24.481
a pets which is a pet type array.

96
00:06:24.481 --> 00:06:26.693
It's an array of these things.

97
00:06:29.739 --> 00:06:31.226
Cool, now we have this file,

98
00:06:31.226 --> 00:06:34.690
we can now import this anywhere
that we're calling the API, right?

99
00:06:34.690 --> 00:06:38.539
So we could call the API in two different
places in our application and now we get

100
00:06:38.539 --> 00:06:42.410
to share this type so we don't have to
retype it every single time that we do it.

101
00:06:44.340 --> 00:06:48.733
We made animal type instead of an
interface, this confuses people a lot and

102
00:06:48.733 --> 00:06:50.488
it's kind of preferential.

103
00:06:50.488 --> 00:06:53.432
Though I will say that as far as I know,

104
00:06:53.432 --> 00:06:58.320
the types community strongly
prefers interfaces over types.

105
00:06:58.320 --> 00:07:00.487
But I'm just gonna say
to some of the answers,

106
00:07:00.487 --> 00:07:02.440
that really doesn't typically matter.

107
00:07:02.440 --> 00:07:07.394
Usually they're close enough
that it doesn't really

108
00:07:07.394 --> 00:07:10.737
matter which one you're choosing.

109
00:07:10.737 --> 00:07:15.731
I'm not gonna speak too much more on that
cuz I really don't have a strong opinion

110
00:07:15.731 --> 00:07:19.551
on it but generally interfaces
are tend to be more flexible and

111
00:07:19.551 --> 00:07:22.575
fit more places that
you're gonna want them to.

112
00:07:22.575 --> 00:07:25.155
Whereas types are much
more strict they're like,

113
00:07:25.155 --> 00:07:27.640
this is you know all this can ever be.

114
00:07:27.640 --> 00:07:30.675
Whereas interface has
some composability and

115
00:07:30.675 --> 00:07:35.040
some other fun tools you can do with
them and I'll leave it at that.

116
00:07:35.040 --> 00:07:39.464
If you want more in depth and
explanation on that probably check

117
00:07:39.464 --> 00:07:44.150
out Mike's course because Mike will
go into that more than I will.

118
00:07:44.150 --> 00:07:45.540
In other words, you can't please everyone.

119
00:07:47.080 --> 00:07:50.950
Again, more of life advice with Brian,
can't please everybody.

120
00:07:50.950 --> 00:07:54.551
&gt;&gt; How would you go about typing
if it was a nested object?

121
00:07:54.551 --> 00:07:57.226
&gt;&gt; If it's a nested object.

122
00:08:00.184 --> 00:08:00.836
I believe and again,
this is off top my head.

123
00:08:12.866 --> 00:08:14.083
It looks really familiar, right?

124
00:08:14.083 --> 00:08:16.512
It's just really just objects syntax.

125
00:08:16.512 --> 00:08:20.485
Generally these nested objects tend to be
another type that you can pull out, right?

126
00:08:20.485 --> 00:08:23.770
Which is precisely what I did
here with pet API response.

127
00:08:23.770 --> 00:08:26.138
I could have basically just copied and

128
00:08:26.138 --> 00:08:30.810
pasted this whole pet thing here but
now I get to use pet and pass pet around.

129
00:08:30.810 --> 00:08:35.051
And I can also say that this pet
API response is a pet array.

130
00:08:35.051 --> 00:08:37.839
So I try not to nest a ton.

131
00:08:37.839 --> 00:08:41.694
Semantically nested objects
tend to be a thing, right?

132
00:08:41.694 --> 00:08:46.941
So let's say like
a location thing here and

133
00:08:46.941 --> 00:08:51.168
inside of that location was this,

134
00:08:51.168 --> 00:08:57.014
I probably would make a location type,
right?

135
00:08:57.014 --> 00:09:01.577
So I would say or an interface export

136
00:09:01.577 --> 00:09:07.356
Interface Location, I'd put these here and

137
00:09:07.356 --> 00:09:12.540
then I would say location is a location.

138
00:09:14.210 --> 00:09:17.764
It's not a hard and fast rule cuz in
general don't believe in hard and

139
00:09:17.764 --> 00:09:19.615
fast rules when it comes to coding.

140
00:09:19.615 --> 00:09:21.814
But now if I ever pulled
out this location and

141
00:09:21.814 --> 00:09:25.815
I start passing it around to different
files, I don't have to retype it again.

142
00:09:25.815 --> 00:09:29.030
I can just say okay, this is a location
that came from this type, right?

143
00:09:33.230 --> 00:09:38.213
So personal opinion there but
it's a good one, it's a good opinion.

144
00:09:38.213 --> 00:09:40.070
Yeah, Mark.

145
00:09:40.070 --> 00:09:43.438
&gt;&gt; They're saying that
instead of fizz buzz or

146
00:09:43.438 --> 00:09:46.358
foo bar people should use LOL and WTF.

147
00:09:46.358 --> 00:09:47.983
&gt;&gt; Indeed, yeah, hard requirement.

148
00:09:47.983 --> 00:09:53.849
There's another favorite
is obviously barbecue,

149
00:09:53.849 --> 00:09:57.053
OMG very important, yeah?

150
00:09:57.053 --> 00:10:02.566
That's just solid computer science

151
00:10:02.566 --> 00:10:07.730
I think [LAUGH] yeah, definitely.

152
00:10:07.730 --> 00:10:10.929
Yeah, I don't like foo and bar,
at least LOL and OMG make me laugh.

