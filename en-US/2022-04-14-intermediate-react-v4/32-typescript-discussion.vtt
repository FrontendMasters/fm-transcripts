WEBVTT

1
00:00:00.640 --> 00:00:03.110
Let's talk about my feelings
in general with TypeScript.

2
00:00:05.660 --> 00:00:11.060
TypeScript you are trading
off developer velocity and

3
00:00:11.060 --> 00:00:17.163
undoubtedly TypeScript makes you
move a little bit slower for

4
00:00:17.163 --> 00:00:21.052
long term velocity and long term bugs.

5
00:00:21.052 --> 00:00:24.902
And the way the reason I say that is like
people love to highlight that thing that I

6
00:00:24.902 --> 00:00:28.771
was just showing you where like it won't
let you call to uppercase and a number.

7
00:00:28.771 --> 00:00:30.890
In general that's not my biggest problem.

8
00:00:30.890 --> 00:00:34.550
That's not generally my
biggest issue with coding,

9
00:00:34.550 --> 00:00:38.696
a much bigger issue is that
immediate feedback cycle of hey,

10
00:00:38.696 --> 00:00:43.430
you're doing this, this has this
type has these things available.

11
00:00:43.430 --> 00:00:46.530
You can you can do these things,
you can't do these things.

12
00:00:46.530 --> 00:00:51.254
And me doing that and then immediately
seeing that inside of my code that right

13
00:00:51.254 --> 00:00:54.170
there is the value
proposition of TypeScript.

14
00:00:55.960 --> 00:00:59.724
So any code that I might like rule of
thumb in my brain is that anything that

15
00:00:59.724 --> 00:01:02.747
I intend to maintain less than,
like two weeks or a month or

16
00:01:02.747 --> 00:01:06.946
something like that, I'll just write in
JavaScript because I intend on going,

17
00:01:06.946 --> 00:01:09.240
I just wanna go fast, right?

18
00:01:09.240 --> 00:01:10.962
I don't wanna fight
the TypeScript compiler for

19
00:01:10.962 --> 00:01:14.000
something that I'm not going to
reap the benefit down the road.

20
00:01:14.000 --> 00:01:17.097
However, if I was gonna start
any long term code base today,

21
00:01:17.097 --> 00:01:20.862
anything that I intended on maintaining
longer than two weeks to a month,

22
00:01:20.862 --> 00:01:23.009
I'm gonna write in TypeScript, right.

23
00:01:23.009 --> 00:01:27.368
Because that maintainability and
readability and documentation all that

24
00:01:27.368 --> 00:01:30.965
kinda thing makes me move faster
in a long term perspective and

25
00:01:30.965 --> 00:01:34.023
means I have to maintain
things less going forward.

26
00:01:36.066 --> 00:01:37.680
So I don't know is that makes sense?

27
00:01:37.680 --> 00:01:39.276
That's the trade off tight.

28
00:01:39.276 --> 00:01:41.208
There are some people that
say like I use TypeScript for

29
00:01:41.208 --> 00:01:42.972
everything no matter what
I'm not that person and

30
00:01:42.972 --> 00:01:45.828
there's other people say I will never use
TypeScript which I think is a mistake.

31
00:01:49.294 --> 00:01:50.310
Okay, question.

32
00:01:51.790 --> 00:01:55.400
&gt;&gt; How does TypeScript
impacts the bundle size?

33
00:01:57.030 --> 00:01:58.993
&gt;&gt; How does TypeScript
impact the bundle size?

34
00:01:58.993 --> 00:02:02.450
So let me give you two
sides to that answer.

35
00:02:03.930 --> 00:02:06.849
Simply adding TypeScript to
a project as zero to the bundle.

36
00:02:08.280 --> 00:02:13.690
All the typescript compiler does is
it just takes out the types, right?

37
00:02:13.690 --> 00:02:15.249
So if I go in here and and

38
00:02:15.249 --> 00:02:20.931
run this through the TypeScript compiler
this code will look precisely the same.

39
00:02:20.931 --> 00:02:24.250
It'll just remove this bit, right?

40
00:02:25.700 --> 00:02:28.460
So that part won't make
it into production.

41
00:02:28.460 --> 00:02:31.580
So from that perspective,
it adds literally nothing.

42
00:02:31.580 --> 00:02:33.650
It doesn't add any runtime,
it doesn't anything like that.

43
00:02:33.650 --> 00:02:36.969
TypeScript does not augment
JavaScript in that capacity at all.

44
00:02:39.221 --> 00:02:43.855
Now, what will affect the bundle
size is something like, yeah,

45
00:02:43.855 --> 00:02:46.140
let's look in Moodle, right?

46
00:02:46.140 --> 00:02:50.517
We had to do all this defensive
coding in here Right,

47
00:02:50.517 --> 00:02:53.190
which we didn't have to do
previous to TypeScript.

48
00:02:53.190 --> 00:02:56.840
That will I mean, technically
increase your bundle size, right?

49
00:02:56.840 --> 00:03:01.597
Technically that does increase like
the runtime cost just like a drop in

50
00:03:01.597 --> 00:03:03.560
an ocean amount, right?

51
00:03:03.560 --> 00:03:09.038
So I can confidently say that effectively
it does nothing to your bundle size or

52
00:03:09.038 --> 00:03:10.450
your performance.

53
00:03:10.450 --> 00:03:13.710
But literally, yeah,
you have to do some things like this but

54
00:03:13.710 --> 00:03:17.408
this is such a small amount of code
that even the lowest end device is not

55
00:03:17.408 --> 00:03:20.500
gonna be any slower or
any larger because because of that.

56
00:03:23.850 --> 00:03:29.920
So in other words, not a concern for
performance that's we'll stick with that.

57
00:03:29.920 --> 00:03:34.123
Someone's gonna prove me wrong and
whatever it's fine.

58
00:03:34.123 --> 00:03:37.080
What was the useBreedList return type?

59
00:03:37.080 --> 00:03:38.300
It's not in the GitHub repo.

60
00:03:40.728 --> 00:03:41.370
&gt;&gt; Yeah.

61
00:03:41.370 --> 00:03:44.479
I'll go fix that.

62
00:03:44.479 --> 00:03:50.690
useBreedList return type down here, yeah.

63
00:03:50.690 --> 00:03:55.801
So before I had this returning
without this, which basically is

64
00:03:55.801 --> 00:04:00.830
telling TypeScript this is a,
it's not homogenous, right?

65
00:04:00.830 --> 00:04:05.586
It's not all the same type, so therefore
anything that, any one index in here

66
00:04:05.586 --> 00:04:10.000
can either be a string list or
it can be of type status, right?

67
00:04:10.000 --> 00:04:15.130
Cuz breed, this is a list of strings
status of type status here, right?

68
00:04:16.230 --> 00:04:21.059
Which is not true, right, we actually have
index zero is hard typed as a thing and

69
00:04:21.059 --> 00:04:23.610
index one is hard typed as a thing.

70
00:04:23.610 --> 00:04:27.116
So therefore we have to have
this as string array so

71
00:04:27.116 --> 00:04:32.010
that this is always a string array and
this is always a status.

72
00:04:32.010 --> 00:04:34.510
And the other thing is like,
this can't have anything else in it right?

73
00:04:34.510 --> 00:04:35.647
So there's no index 2.

74
00:04:38.797 --> 00:04:41.567
You might be able to take it out and it
might still work, I don't know, let's try,

75
00:04:41.567 --> 00:04:42.930
let's just run the type checker again.

76
00:04:44.600 --> 00:04:46.400
NPM run type check.

77
00:04:48.240 --> 00:04:51.840
No, see, it actually will air out there,
so you actually do have to do that.

78
00:04:51.840 --> 00:04:55.062
I think you'll probably see
having watched me done this and

79
00:04:55.062 --> 00:04:57.897
like I've done this a bunch of times now,
but like,

80
00:04:57.897 --> 00:05:01.990
writing TypeScript code has a lot
of guests and check, right?

81
00:05:01.990 --> 00:05:03.150
Did I upset the compiler?

82
00:05:03.150 --> 00:05:04.389
Did I satisfy the compiler?

83
00:05:04.389 --> 00:05:05.490
And I just do that cost?

84
00:05:05.490 --> 00:05:07.157
So that's what when I
say fight the compiler,

85
00:05:07.157 --> 00:05:09.487
I really just mean that I'm doing
a bunch of guessing checking.

86
00:05:17.535 --> 00:05:22.498
Cool I will say for however often I have

87
00:05:22.498 --> 00:05:26.447
to fight the compiler, I think in equal
amounts on the other side of that,

88
00:05:26.447 --> 00:05:30.287
that I get something right away that
I would not have gotten right away.

89
00:05:30.287 --> 00:05:34.571
Because the TypeScript compiler told me
you're I expect that you're about to get

90
00:05:34.571 --> 00:05:35.820
this out of this right.

91
00:05:35.820 --> 00:05:39.297
So I like I call a method that I'm
unfamiliar with and then tells me,

92
00:05:39.297 --> 00:05:41.190
this is what this object looks like.

93
00:05:42.290 --> 00:05:46.799
Previously, I either have to go
read the documentation to what

94
00:05:46.799 --> 00:05:49.530
lodash dot something gives me right?

95
00:05:51.320 --> 00:05:54.128
Or I would have to run my code and

96
00:05:54.128 --> 00:05:59.312
console log out the object to
see what I got back, right?

97
00:05:59.312 --> 00:06:01.938
Type script really helps you out in
those kind of situations like, hey,

98
00:06:01.938 --> 00:06:03.090
here's your return type.

99
00:06:03.090 --> 00:06:04.855
Here's all the stuff you can
expect to get back from that.

100
00:06:04.855 --> 00:06:08.640
Here's you can,
I didn't show you this but let's see.

101
00:06:10.480 --> 00:06:11.720
What's a good example here.

102
00:06:13.360 --> 00:06:19.350
I mean here, like, request breathers
if I just right command click on it,

103
00:06:19.350 --> 00:06:23.060
or I think it's Ctrl Click in Windows.

104
00:06:23.060 --> 00:06:26.940
It'll highlight here you can
see request releases here.

105
00:06:26.940 --> 00:06:29.260
So it'll show me that it's there.

106
00:06:29.260 --> 00:06:33.999
Or if I do something like, fetch, it'll
actually take me to the API definition

107
00:06:33.999 --> 00:06:37.626
here, which obviously this
one's a little dense, right?

108
00:06:37.626 --> 00:06:44.370
This is actually for the browser but
I can actually see the entire type here.

109
00:06:44.370 --> 00:06:46.320
Okay, fetch takes an input.

110
00:06:46.320 --> 00:06:49.046
It takes an a knit,
which I don't know what that is, and

111
00:06:49.046 --> 00:06:51.600
it returns a promise with a response.

112
00:06:51.600 --> 00:06:53.200
And let's say I don't know what that is.

113
00:06:53.200 --> 00:06:54.560
I'm gonna right click on that.

114
00:06:54.560 --> 00:06:55.960
This is what a request and it is.

115
00:06:55.960 --> 00:06:59.529
It has a body, it has a cache credentials.

116
00:06:59.529 --> 00:07:03.186
This is something I would have had
to go to MDN to figure out but

117
00:07:03.186 --> 00:07:07.561
now that I'm just command clicking on
it in my VS code I can just pop around

118
00:07:07.561 --> 00:07:12.553
the various different API's here so I
don't know what a request credentials is.

119
00:07:12.553 --> 00:07:17.780
Command click it can be include,
omit or same origin neat, right?

120
00:07:17.780 --> 00:07:19.673
So this kind of like,

121
00:07:19.673 --> 00:07:26.040
really fast go to definition
hopping in code is super useful.

122
00:07:26.040 --> 00:07:28.740
Or you can even do it in your code.

123
00:07:28.740 --> 00:07:30.430
So, where do I use breed?

124
00:07:30.430 --> 00:07:32.220
That's in search params.

125
00:07:32.220 --> 00:07:37.770
So if I go to search params.TSX and I have
this like what is used breed list write?

126
00:07:37.770 --> 00:07:39.290
What idiot wrote that?

127
00:07:39.290 --> 00:07:40.550
This idiot did.

128
00:07:40.550 --> 00:07:44.044
But if I command click on it, it'll
take me to my code here's like, okay,

129
00:07:44.044 --> 00:07:47.660
here's is useBreedList and then I can
read the code that someone else wrote.

130
00:07:49.810 --> 00:07:54.073
Now, if you're writing like Java or
like C++ like this is like yeah,

131
00:07:54.073 --> 00:07:56.270
I do this all day, right?

132
00:07:56.270 --> 00:08:00.450
But for people writing JavaScript,
go to definition is a revelation for us or

133
00:08:00.450 --> 00:08:03.680
at least what like I missed it
from when I used to write Java.

134
00:08:07.370 --> 00:08:10.556
TypeScript really allows your
tools to like be augmented,

135
00:08:10.556 --> 00:08:13.495
which is, as a developer
tools pm I'm very into that.

136
00:08:19.090 --> 00:08:20.804
Cool, any other questions
about TypeScript?

137
00:08:27.459 --> 00:08:28.700
Yeah?

138
00:08:28.700 --> 00:08:32.250
&gt;&gt; With this code and config and
stuff work with Webpack or

139
00:08:32.250 --> 00:08:36.530
what would you have to do to get
it to work and with Webpack?

140
00:08:36.530 --> 00:08:42.382
&gt;&gt; Yeah, so the code and the config would
all work with Webpack, cuz basically

141
00:08:42.382 --> 00:08:49.320
all of these tools are just bringing in
the TypeScript compiler and running that.

142
00:08:49.320 --> 00:08:53.017
So Parcell does it that way,
Webpack does it that way, yes,

143
00:08:53.017 --> 00:08:55.930
build all of them they're
gonna do it that way.

144
00:08:57.060 --> 00:09:00.230
The question then becomes like,
how do you set it up?

145
00:09:00.230 --> 00:09:05.008
And I think with Webpack there is just
a TypeScript plugin that you include and

146
00:09:05.008 --> 00:09:10.168
it'll run the TypeScript compiler is one
of the steps of Webpack building things.

147
00:09:12.813 --> 00:09:17.109
And then you'd have to have your Babel
config ready to deal with types.

148
00:09:17.109 --> 00:09:23.006
That'd be it,
Yeah it shouldn't be terribly difficult.

149
00:09:23.006 --> 00:09:27.246
This TypeScript is not hard
to set up in most projects.

150
00:09:27.246 --> 00:09:31.330
It's hardest to get to play nice
with ES lint to be honest but

151
00:09:31.330 --> 00:09:35.020
once it does then you can do
a lot of really cool stuff.

152
00:09:38.180 --> 00:09:41.433
&gt;&gt; What's your experience of how much
TypeScript is used day to day at

153
00:09:41.433 --> 00:09:43.130
the companies you've worked in?

154
00:09:44.210 --> 00:09:44.913
&gt;&gt; That's a good question.

155
00:09:48.113 --> 00:09:52.928
I would say most big companies that
I know of now use some sort of typed

156
00:09:52.928 --> 00:09:58.100
JavaScript or if they're not currently
they're all talking about it.

157
00:09:59.340 --> 00:10:04.248
And I think they all just recognize that
when you have lots of engineers working on

158
00:10:04.248 --> 00:10:08.002
the same project it's just a really
good tool to make sure that

159
00:10:08.002 --> 00:10:10.109
everything plays nice together.

160
00:10:10.109 --> 00:10:14.158
In theory it reduces the amount of
runtime errors that you're gonna get but

161
00:10:14.158 --> 00:10:18.399
again I don't think that's the biggest
benefit I think the biggest benefit is

162
00:10:18.399 --> 00:10:21.370
the productivity of the engineers
work working on it.

163
00:10:23.450 --> 00:10:30.360
So yeah I would say most big companies
are either on it or moving towards it.

164
00:10:32.405 --> 00:10:33.631
Atleast the ones that I work with.

165
00:10:38.651 --> 00:10:42.927
It's a good skill to know for sure and so
I'll just plug Mike's course again like if

166
00:10:42.927 --> 00:10:47.040
you want to get in depth into TypeScript
Mike does a good job of going through it.

