WEBVTT

1
00:00:00.000 --> 00:00:04.240
Let's move on to details and
make use of our API responses.

2
00:00:04.240 --> 00:00:06.550
So we're gonna pop over to Details.js.

3
00:00:06.550 --> 00:00:11.096
You can see there's already
some fun errors waiting for us.

4
00:00:11.096 --> 00:00:18.343
We are going to rename
this to Details.tsx.

5
00:00:18.343 --> 00:00:20.758
And now we get a ton of errors, right?

6
00:00:20.758 --> 00:00:21.721
But here we are.

7
00:00:21.721 --> 00:00:25.370
This is the game of
Whack-a-Mole TypeScript errors and

8
00:00:25.370 --> 00:00:29.937
if you've written any TypeScript before,
this feels very familiar.

9
00:00:29.937 --> 00:00:32.513
So carousel and
error boundary won't fix right now,

10
00:00:32.513 --> 00:00:34.870
these won't get fixed
until we fix those files.

11
00:00:34.870 --> 00:00:39.134
So just go ahead and
ignore those ones for right now.

12
00:00:39.134 --> 00:00:43.758
Up here at the top, we're going to

13
00:00:43.758 --> 00:00:48.064
import pet[API]Response and

14
00:00:48.064 --> 00:00:55.089
Pet from our newly minted
./APIResponsesTypes.

15
00:00:55.089 --> 00:00:58.769
Okay, one thing that we can do here
that makes things a ton easier,

16
00:00:58.769 --> 00:01:03.701
we don't have default state for all of our
animal breeds, city, state, description,

17
00:01:03.701 --> 00:01:05.711
name, images, all these things.

18
00:01:05.711 --> 00:01:07.852
That's why this is so mad right now.

19
00:01:09.705 --> 00:01:12.967
So if we just give it a default state for
all these different things,

20
00:01:12.967 --> 00:01:16.801
then it's gonna know immediately,
okay, I already know what these are,

21
00:01:16.801 --> 00:01:18.539
I don't have to retype them later.

22
00:01:18.539 --> 00:01:22.423
Okay, so showModal, we got that false.

23
00:01:22.423 --> 00:01:25.989
And again, I don't have to tell
it that loading is a Boolean,

24
00:01:25.989 --> 00:01:30.533
it knows because I gave it true or
false, it's like, that's a Boolean.

25
00:01:30.533 --> 00:01:33.059
So I'm just gonna give it
a default state for everything and

26
00:01:33.059 --> 00:01:34.635
then it'll just know what they are.

27
00:01:34.635 --> 00:01:39.363
So animal is just an empty string, but
we actually wanna type this a little bit

28
00:01:39.363 --> 00:01:42.513
further, we wanna say this
is actually an animal.

29
00:01:42.513 --> 00:01:46.417
Cuz we know it's actually one of those
enumerated types that we created, so

30
00:01:46.417 --> 00:01:48.249
let's import animal up here well.

31
00:01:50.496 --> 00:01:53.795
On line seven,
I also added an animal import.

32
00:01:53.795 --> 00:01:58.370
So now, it'll make sure that animal stays,
bird, rabbit, reptile, and

33
00:01:58.370 --> 00:02:00.738
doesn't end up being something else.

34
00:02:00.738 --> 00:02:06.994
Okay, and then the rest of these,
we're just going to say breed,

35
00:02:06.994 --> 00:02:12.805
empty string, city, empty string,
state, empty string,

36
00:02:12.805 --> 00:02:17.873
description, empty string,
name, empty string.

37
00:02:17.873 --> 00:02:20.966
And images,
we're gonna have it be empty array, but

38
00:02:20.966 --> 00:02:23.867
we wanna tell it what kind
of array it's gonna be.

39
00:02:23.867 --> 00:02:27.018
And it's a homogenous array,
right, it's gonna be just strings.

40
00:02:27.018 --> 00:02:35.066
So we're gonna say as string[ ].

41
00:02:35.066 --> 00:02:39.153
And now, notice all of these type
errors down here in line 36 are gone,

42
00:02:39.153 --> 00:02:41.570
because now it knows
what all of these are.

43
00:02:41.570 --> 00:02:43.200
Description, I know that's a string.

44
00:02:43.200 --> 00:02:46.325
I know that images is a string array.

45
00:02:50.688 --> 00:02:53.405
So that's pretty cool.

46
00:02:57.472 --> 00:03:00.359
So that's what this as word means,
you're just basically saying,

47
00:03:00.359 --> 00:03:01.602
I'm giving you an array, but

48
00:03:01.602 --> 00:03:04.710
I'm actually going to give you something
even more specific than array.

49
00:03:04.710 --> 00:03:09.062
It's an array of specifically strings.

50
00:03:09.062 --> 00:03:13.436
Just general advice for working with
arrays in TypeScript, it's much easier

51
00:03:13.436 --> 00:03:17.623
if you make your arrays homogenous,
right, so they're not mixed types.

52
00:03:17.623 --> 00:03:22.454
I think in general, that's kinda how we
mostly operate cuz that makes sense to us

53
00:03:22.454 --> 00:03:26.874
logically, but it makes it very explicit
when you do that in TypeScript.

54
00:03:26.874 --> 00:03:33.343
It's possible to do other things, but
I'll suggest this where possible.

55
00:03:33.343 --> 00:03:38.382
Okay, up here, We

56
00:03:38.382 --> 00:03:43.449
need to type the props, right,
cuz this gets some props as well.

57
00:03:43.449 --> 00:03:47.671
So we have Component here and we need
to give it some typing for its props.

58
00:03:47.671 --> 00:03:53.822
So you can see up there on my tooltip,
I have P, which stands for props.

59
00:03:53.822 --> 00:03:54.868
We can give it types for that.

60
00:03:54.868 --> 00:03:57.450
We can actually give it the typings for
the state.

61
00:03:57.450 --> 00:04:01.803
If I hadn't done this right here,
we'd have to give it typings for

62
00:04:01.803 --> 00:04:06.575
the state, but the good news is we
don't have to because I did that here.

63
00:04:06.575 --> 00:04:08.414
Same thing, if I gave it default props,

64
00:04:08.414 --> 00:04:10.751
we wouldn't have to give
it props typings either.

65
00:04:10.751 --> 00:04:13.614
But we don't wanna give it default props,
so we're not gonna do that.

66
00:04:13.614 --> 00:04:18.558
Instead, we're gonna
give it these parameters.

67
00:04:18.558 --> 00:04:24.191
And we're gonna say, you can expect
an object that's gonna have params and

68
00:04:24.191 --> 00:04:27.461
that params might have an ID on it,
so id?.

69
00:04:27.461 --> 00:04:31.684
Because we can't actually guarantee what
react router is gonna give back to us,

70
00:04:31.684 --> 00:04:34.056
we actually have to be
defensive about that.

71
00:04:34.056 --> 00:04:40.560
So we might get an id back, which is what
that question mark means, it's optional.

72
00:04:40.560 --> 00:04:43.590
And if it does get an id,
then that's gonna be a string.

73
00:04:47.458 --> 00:04:52.518
Now, I'll see people as well say,
interface Props,

74
00:04:52.518 --> 00:04:57.908
or iProps, people like to put the i there,
I don't care.

75
00:04:57.908 --> 00:05:01.287
But the I stands for interface, right?

76
00:05:01.287 --> 00:05:08.333
And you can say params ( id?) string.

77
00:05:08.333 --> 00:05:10.349
Some people will only do it this way.

78
00:05:16.971 --> 00:05:20.625
I'll generally do this if
I have a lot of props.

79
00:05:20.625 --> 00:05:22.966
When I don't have many props,
I'm quite lazy and

80
00:05:22.966 --> 00:05:24.709
I'll just put it directly in there.

81
00:05:24.709 --> 00:05:28.824
So I'm fine with whatever you choose
to do, we'll do it both ways.

82
00:05:28.824 --> 00:05:34.822
So, I'll do it that way.

83
00:05:34.822 --> 00:05:39.271
Okay, So here we are.

84
00:05:42.623 --> 00:05:47.292
This here ends up being an any,
it's like I don't know what that is.

85
00:05:47.292 --> 00:05:51.133
So any type is your enemy in TypeScript.

86
00:05:51.133 --> 00:05:55.193
An any type is basically like,
this could be anything and I refuse to

87
00:05:55.193 --> 00:05:59.980
tell you anything about it, which defeats
the purpose of TypeScript, right?

88
00:05:59.980 --> 00:06:02.897
You want no anys in your
code as much as possible.

89
00:06:02.897 --> 00:06:07.191
And we've actually turned it on so
that we say, don't allow any in here,

90
00:06:07.191 --> 00:06:09.221
get that any business out of here.

91
00:06:09.221 --> 00:06:13.425
So what we can do here is we can
actually wrap this in parentheses.

92
00:06:13.425 --> 00:06:18.287
And then we're gonna say,
whatever this comes back as,

93
00:06:18.287 --> 00:06:21.439
we expect it to be a petAPIResponse.

94
00:06:21.439 --> 00:06:25.376
And now, we know that this what
it got back was a petAPIResponse.

95
00:06:30.974 --> 00:06:34.362
Now, you can still technically
get runtime errors here, right,

96
00:06:34.362 --> 00:06:37.338
because what happens if your
API changes shapes, right?

97
00:06:37.338 --> 00:06:42.074
But that's just the nature
of computing systems, right,

98
00:06:42.074 --> 00:06:44.831
we're not gonna solve that here.

99
00:06:44.831 --> 00:06:49.967
Okay, That's fine, this is good.

100
00:06:49.967 --> 00:06:52.536
This one's a fun one.

101
00:06:52.536 --> 00:06:57.151
So window.location = blah, which I have
been using since literally I can remember

102
00:06:57.151 --> 00:06:59.625
the first time I wrote browser-based code.

103
00:06:59.625 --> 00:07:01.897
It's actually technically not the API.

104
00:07:01.897 --> 00:07:05.125
It's a hack that I think they
threw in Internet Explorer 7 or

105
00:07:05.125 --> 00:07:09.684
something like that, I don't know,
some ancient browser, and everyone's like,

106
00:07:09.684 --> 00:07:13.258
well, I guess we're doing this now,
and that's why this works.

107
00:07:13.258 --> 00:07:16.713
But technically,
the API is actually href =,

108
00:07:18.916 --> 00:07:22.147
window.location.href =.

109
00:07:22.147 --> 00:07:25.672
And now this works, because it's
actually using the correct API.

110
00:07:29.773 --> 00:07:34.421
Okay, So

111
00:07:34.421 --> 00:07:38.029
this is all looking much better,
we're getting far less errors.

112
00:07:40.403 --> 00:07:45.218
UseParams here, you might just,

113
00:07:45.218 --> 00:07:50.566
I expect this to be a, And

114
00:07:50.566 --> 00:07:55.127
what I'm using out of this is I'm
going to get an id string out of this.

115
00:07:59.717 --> 00:08:03.445
Okay, and then we know that we
expect to get id into here,

116
00:08:03.445 --> 00:08:06.639
which is going to match up
with this type up here.

117
00:08:09.466 --> 00:08:10.595
Cool.

118
00:08:16.321 --> 00:08:18.036
Any questions about any of this?

119
00:08:18.036 --> 00:08:20.195
I think at this point,
we are done with details.

120
00:08:20.195 --> 00:08:23.070
Obviously, these two are still erroring,
but we'll fix those and

121
00:08:23.070 --> 00:08:24.644
then this will stop erroring there.

122
00:08:28.130 --> 00:08:29.367
&gt;&gt; Yeah, I have a quick question.

123
00:08:29.367 --> 00:08:30.311
&gt;&gt; Yeah, please.

124
00:08:30.311 --> 00:08:34.160
&gt;&gt; About, let's see here,
about that API call.

125
00:08:34.160 --> 00:08:38.530
I know you're saying about competing
systems and the potential for

126
00:08:38.530 --> 00:08:40.838
the shape of that object to change.

127
00:08:40.838 --> 00:08:43.910
Is there any type of error
handling you would recommend to be

128
00:08:43.910 --> 00:08:45.144
defensive about that?

129
00:08:45.144 --> 00:08:48.640
&gt;&gt; Sure, this is an async function,

130
00:08:48.640 --> 00:08:54.559
which means you can wrap it when
you call it with try catch.

131
00:08:54.559 --> 00:08:56.501
So you could do it that way.

132
00:08:59.692 --> 00:09:03.978
So let's say you just do try blah,

133
00:09:06.961 --> 00:09:09.502
Catch e, right, and so on and so forth.

134
00:09:09.502 --> 00:09:13.302
That would be the immediately
obvious way to do it.

135
00:09:13.302 --> 00:09:16.947
The other thing that we've actually
technically already done is this is

136
00:09:16.947 --> 00:09:18.928
wrapped in an error boundary, right?

137
00:09:18.928 --> 00:09:22.076
So if there's an error here and
then componentDidMount,

138
00:09:22.076 --> 00:09:25.299
it's actually gonna hit our
error boundary here, right?

139
00:09:25.299 --> 00:09:28.177
And then this will show a nice page,
like there was an error on this page,

140
00:09:28.177 --> 00:09:30.119
we're gonna redirect you
back to the homepage.

141
00:09:30.119 --> 00:09:32.019
That's the react way of doing it.

142
00:09:33.445 --> 00:09:37.389
But it's contextual to how you wanna
handle those sorts of situations and

143
00:09:37.389 --> 00:09:41.331
how unreliable your system is, or,
I guess, what tolerance you have for

144
00:09:41.331 --> 00:09:43.060
unreliability in your system.

