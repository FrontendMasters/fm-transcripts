WEBVTT

1
00:00:00.260 --> 00:00:02.690
So let's go to ref.js here.

2
00:00:02.690 --> 00:00:09.740
Again, we did talk a little bit about this
one in the complete Intro to React v7.

3
00:00:09.740 --> 00:00:10.790
We used it for our modal.

4
00:00:12.760 --> 00:00:17.394
And I'm gonna kinda get into the details
here a little bit with of like, when and

5
00:00:17.394 --> 00:00:18.790
why you would use this.

6
00:00:19.900 --> 00:00:24.330
So it says useRef Example here.

7
00:00:24.330 --> 00:00:28.467
So I have this number here,
which I have a ref and

8
00:00:28.467 --> 00:00:32.914
I have a set state number here,
right, so a state,

9
00:00:32.914 --> 00:00:39.340
one of them is using state and one of
them is using this useRef here, okay?

10
00:00:41.000 --> 00:00:45.933
If I click delay logging,
you can say increments and delay logging,

11
00:00:45.933 --> 00:00:50.866
so what this does is it increments
both numbers it's gonna increment

12
00:00:50.866 --> 00:00:53.859
the state number here by using set state.

13
00:00:55.930 --> 00:00:57.346
State number plus one, right?

14
00:00:57.346 --> 00:01:03.430
And then this ref thing is a container for
state as well, right?

15
00:01:04.460 --> 00:01:06.120
So it's going to increment that as well.

16
00:01:06.120 --> 00:01:08.620
You can see here by the plus plus.

17
00:01:08.620 --> 00:01:13.785
Then it's gonna set a timeout,
and it's going to alert you to

18
00:01:13.785 --> 00:01:19.559
what the current state of
numRef.current and stateNumber is here.

19
00:01:19.559 --> 00:01:23.470
So if I click delay logging,
what would you expect it to alert you to?

20
00:01:26.370 --> 00:01:30.628
I would expect personally if not coming
into this blind to say I would expect it

21
00:01:30.628 --> 00:01:34.780
to alert one on one right because
it's incrementing both things.

22
00:01:34.780 --> 00:01:39.780
However, it doesn't,
it does 0 and it does 1.

23
00:01:39.780 --> 00:01:41.656
Let's talk about why.

24
00:01:41.656 --> 00:01:47.010
So, this numRef.current, this current

25
00:01:47.010 --> 00:01:52.800
is going to be the same
across all renders.

26
00:01:52.800 --> 00:01:57.520
So if I click this a bunch of times
you'll see a huge difference, right?

27
00:01:57.520 --> 00:01:59.710
This will be six and
then this will be one.

28
00:01:59.710 --> 00:02:04.246
And then as I click OK, it's going to
be you can see ref is not changing, but

29
00:02:04.246 --> 00:02:06.560
the state is incrementing over time.

30
00:02:08.550 --> 00:02:12.941
That's because across all renders, I'm
getting the same number every single time.

31
00:02:12.941 --> 00:02:14.975
And that's the point of a ref is like,

32
00:02:14.975 --> 00:02:18.280
no matter what I want this to
always be the most current thing,

33
00:02:18.280 --> 00:02:22.960
as opposed to state number here, this is
gonna get captured in the closure, right?

34
00:02:22.960 --> 00:02:26.640
So you can see here I'm not actually
incrementing the state number directly.

35
00:02:26.640 --> 00:02:30.380
I'm calling set state which is
being given back to me by the hook.

36
00:02:30.380 --> 00:02:34.115
And therefore, when I call this
increment and delay logging,

37
00:02:34.115 --> 00:02:36.519
it's capturing the state number here.

38
00:02:36.519 --> 00:02:39.054
In that current state, by a closure.

39
00:02:41.040 --> 00:02:45.250
Now splitting hairs here, for the most
part, you really don't need to care, but

40
00:02:45.250 --> 00:02:49.276
where this comes into play is like if I
need to have the most current thing across

41
00:02:49.276 --> 00:02:51.491
all renders no matter
what all of the time.

42
00:02:51.491 --> 00:02:55.674
Or I need to have the same thing that
would be another thing that reason to

43
00:02:55.674 --> 00:02:56.940
do that.

44
00:02:56.940 --> 00:03:00.011
The reason why we did this in
complete intro to react V seven is

45
00:03:00.011 --> 00:03:02.010
we wanted to have the same div, right?

46
00:03:02.010 --> 00:03:04.396
So we actually created a DOM
div programmatically, and

47
00:03:04.396 --> 00:03:06.400
then we inserted that into the DOM.

48
00:03:06.400 --> 00:03:09.398
And then later when we cleaned it up,

49
00:03:09.398 --> 00:03:13.171
we wanted to get the exact
correct div later for

50
00:03:13.171 --> 00:03:18.615
us to clean up later, which was
a perfect use case for this useRef.

51
00:03:18.615 --> 00:03:21.989
Okay, and
then here you can see as we increment it,

52
00:03:21.989 --> 00:03:27.095
later when we go back to reference
numRef.current, because this is getting

53
00:03:27.095 --> 00:03:32.530
incremented directly on the object that
allows us to get the most current number.

54
00:03:35.170 --> 00:03:38.850
So again, you can see that here
it's hilarious, you have state six.

55
00:03:38.850 --> 00:03:44.931
You can see here the state is rendering
10 because the state has been updated,

56
00:03:44.931 --> 00:03:50.485
but this delay logging was captured
when we clicked the Button, right?

57
00:03:52.005 --> 00:03:53.203
Which is why we did the delay there.

58
00:03:56.633 --> 00:04:00.218
So it's a little mind bending,
it's very niche in your use case,

59
00:04:00.218 --> 00:04:03.845
most people would probably
never have to useRefs.

60
00:04:03.845 --> 00:04:07.526
But when you need it,
you definitely need it.

61
00:04:07.526 --> 00:04:13.250
Which is why this one it's a rarely used
but sometimes needed kind of thing, right?

62
00:04:13.250 --> 00:04:15.197
So I just wanted you to kind of
be aware that it's out there.

63
00:04:17.655 --> 00:04:19.660
All right, any questions about that?

64
00:04:19.660 --> 00:04:24.748
Actually, I have one more
thing to point out about this,

65
00:04:24.748 --> 00:04:30.371
numRef is an object and
it only has one thing available to read.

66
00:04:30.371 --> 00:04:34.768
And write to it I think if
you actually say numRef,

67
00:04:34.768 --> 00:04:40.019
let's put it up here actually,
numRef.somethingElse.

68
00:04:41.660 --> 00:04:43.257
Equals five.

69
00:04:43.257 --> 00:04:50.761
I think it actually will yell at you.

70
00:04:50.761 --> 00:04:51.886
Can I clear this?

71
00:04:59.683 --> 00:05:00.383
In any case,

72
00:05:00.383 --> 00:05:04.338
you shouldn't the only thing you should
ever write to numRef is current.

73
00:05:12.350 --> 00:05:14.159
It might just ignore it.

74
00:05:18.425 --> 00:05:23.202
Yeah, so look at that, despite the fact
that I'm setting num ref something else to

75
00:05:23.202 --> 00:05:25.540
be five, it's ignoring this, right?

76
00:05:25.540 --> 00:05:29.010
And it's because it's a frozen object.

77
00:05:29.010 --> 00:05:32.850
The only thing that's available to read
and write to is something or is current.

78
00:05:32.850 --> 00:05:34.170
Everything else is like cool.

79
00:05:34.170 --> 00:05:35.250
Ignore everything else.

80
00:05:35.250 --> 00:05:38.664
Just allow current to be written to you.

81
00:05:38.664 --> 00:05:41.106
Why did they do that,
and why is it an object?

82
00:05:41.106 --> 00:05:45.388
Why isn't it just like a value is because
they want it to be like an object so

83
00:05:45.388 --> 00:05:48.842
that you can use kind of
the properties of objects that allow

84
00:05:48.842 --> 00:05:52.112
you to track that it's always
the same object, right?

85
00:05:52.112 --> 00:05:53.623
So therefore, if I update it,

86
00:05:53.623 --> 00:05:57.649
it's gonna update across all num refs
because I'm referencing seen the object.

87
00:06:02.108 --> 00:06:06.301
It's in JavaScript trickery is
probably the best way to put it.

88
00:06:10.969 --> 00:06:13.324
Okay, questions about Ref?

89
00:06:18.018 --> 00:06:25.358
&gt;&gt; Thought useRef was used in conjunction
with the ref attribute on a DOM element.

90
00:06:25.358 --> 00:06:29.617
&gt;&gt; It's one of the use cases but
it's not all of the use cases of it.

91
00:06:33.761 --> 00:06:36.525
I know exactly what that
person is talking about.

92
00:06:36.525 --> 00:06:42.737
And that's actually a very valid point
that we hadn't really talked about.

93
00:06:44.376 --> 00:06:50.515
So let's say I needed to, let's see if
I can do this off the top of my head.

94
00:06:50.515 --> 00:06:55.191
Ref equals, I don't know if this I have
not used this API in a very long time.

95
00:06:59.357 --> 00:07:06.362
Let's say you'll have to look
up at the exact syntax of that.

96
00:07:06.362 --> 00:07:10.695
Let's say I needed to refer to
specifically this h1 right here from

97
00:07:10.695 --> 00:07:11.820
my code.

98
00:07:11.820 --> 00:07:14.367
You can actually assign a ref to it.

99
00:07:14.367 --> 00:07:20.990
Maybe it's this, all right,
let's try this const my h1.

100
00:07:20.990 --> 00:07:24.057
Apologies if this doesn't work.

101
00:07:24.057 --> 00:07:27.844
We're pulling out of
the memory banks here.

102
00:07:27.844 --> 00:07:30.707
And I say

103
00:07:30.707 --> 00:07:37.662
ref={{el} =&gt;

104
00:07:37.662 --> 00:07:45.853
myH1.current = el.

105
00:07:45.853 --> 00:07:52.870
And then here I say console.log(myH1).

106
00:07:57.732 --> 00:08:02.478
Wow, I'm impressed with myself
[LAUGH] that was dangerous.

107
00:08:02.478 --> 00:08:05.904
Okay so this is another valid use case for
using refs.

108
00:08:05.904 --> 00:08:10.807
Let's see I need to specifically
refer to this h1 in my code because

109
00:08:10.807 --> 00:08:14.775
react is constantly creating and
destroying things.

110
00:08:14.775 --> 00:08:19.046
And you don't really know
the state of the DOM ever, right?

111
00:08:19.046 --> 00:08:23.210
If I said document.getElementByID.

112
00:08:23.210 --> 00:08:25.300
This h1, right?

113
00:08:25.300 --> 00:08:28.785
That might be it at the moment, but later
it could be created and destroyed and

114
00:08:28.785 --> 00:08:31.855
you have no guarantee that that h1
is going to be the same h1 later.

115
00:08:31.855 --> 00:08:35.137
You just have the guarantee that like
react is going to render it however you

116
00:08:35.137 --> 00:08:35.930
tell it, right?

117
00:08:37.170 --> 00:08:40.443
So let's say I'm integrating with
something like a jQuery plugin where I

118
00:08:40.443 --> 00:08:42.569
need to be referencing
specifically that h1.

119
00:08:42.569 --> 00:08:46.043
And it needs to be the correct
that h1 all the time.

120
00:08:46.043 --> 00:08:51.097
The way you can do that is with this ref
attribute, and this ref hook, and then I

121
00:08:51.097 --> 00:08:56.250
can make sure that it references the same
one here, by giving it this ref thing.

122
00:08:56.250 --> 00:09:00.923
And now you can see here I
have a handle on this h1 here.

123
00:09:00.923 --> 00:09:06.705
So that's that would be a use case
probably a pretty good use case for

124
00:09:06.705 --> 00:09:07.929
refs as well.

125
00:09:11.238 --> 00:09:14.213
Good question, that took me
down memory lane for a second.

126
00:09:14.213 --> 00:09:16.010
I hadn't done that a while.

127
00:09:16.010 --> 00:09:16.690
Yeah, question.

128
00:09:16.690 --> 00:09:20.550
&gt;&gt; I've used a library called popper
in the best interest free tool tips.

129
00:09:21.810 --> 00:09:26.689
And you have to do something very
similar by adding a ref to an element.

130
00:09:26.689 --> 00:09:31.375
But there was something like the change
between a class component and

131
00:09:31.375 --> 00:09:36.650
a functional component where using
the useRef hook gets kind of broken Dean.

132
00:09:36.650 --> 00:09:40.564
I always get confused as to
what changed between the two.

133
00:09:40.564 --> 00:09:44.574
&gt;&gt; Well, I mean, you can't use hooks so
you're gonna be have to,

134
00:09:44.574 --> 00:09:46.747
there is a way to assign a ref to it.

135
00:09:46.747 --> 00:09:49.590
And that one, it's been even
longer since I've done that so

136
00:09:49.590 --> 00:09:51.552
I couldn't do that off the top of my head.

137
00:09:54.575 --> 00:09:56.683
Yeah, sorry, I can remember.

138
00:09:59.350 --> 00:10:01.036
You all are very lucky
that I remember this.

139
00:10:01.036 --> 00:10:05.984
[LAUGH]
&gt;&gt; We can pass ref

140
00:10:05.984 --> 00:10:10.109
using forward ref only, right?

141
00:10:10.109 --> 00:10:11.866
&gt;&gt; Yeah, we'll get into that.

142
00:10:11.866 --> 00:10:17.252
That's a different sort of,
we'll do it here and imperative handle.

143
00:10:17.252 --> 00:10:19.479
Unless you're a library author,
you really don't need to do that though.

