WEBVTT

1
00:00:00.180 --> 00:00:04.260
One last thing that I'm pretty excited to
show you, this is one of my favorite parts

2
00:00:04.260 --> 00:00:08.245
about jest and actually one of the primary
reasons I end up using jest quite a bit.

3
00:00:08.245 --> 00:00:13.169
Coming to your package.json we're

4
00:00:13.169 --> 00:00:17.783
going to add another script here.

5
00:00:17.783 --> 00:00:25.002
I'll do it here, test: coverage and

6
00:00:25.002 --> 00:00:29.965
we're gonna say jest --

7
00:00:29.965 --> 00:00:35.391
coverage like that, okay?

8
00:00:35.391 --> 00:00:40.282
You can cancel this now
say npm run test:coverage.

9
00:00:43.407 --> 00:00:48.340
So what this does, is it runs jest and it
just runs all of your tests normally, but

10
00:00:48.340 --> 00:00:52.933
then it generates a report of what
things you have covered with your tests.

11
00:00:54.746 --> 00:00:59.021
This uses a library called Istanbul
which is really common one or sometimes,

12
00:00:59.021 --> 00:01:01.388
you might have used something called NYC,

13
00:01:01.388 --> 00:01:05.090
which is just a symbol that's been
wrapped to make it more useful.

14
00:01:06.870 --> 00:01:11.446
So you can see here, I ran four tests,
seven tests, two snapshots, and

15
00:01:11.446 --> 00:01:15.740
this tells me what percentage of
statements were covered in there.

16
00:01:15.740 --> 00:01:19.380
So for example, carousel.js literally
every line of that's covered,

17
00:01:19.380 --> 00:01:23.770
you can see here and use pre this I
have something that's not being covered.

18
00:01:23.770 --> 00:01:25.070
Looks like that's an if statement.

19
00:01:26.168 --> 00:01:29.932
There you go, I'm missing line 13,
no test is hitting that.

20
00:01:31.883 --> 00:01:34.208
This used to be incredibly
painful to set up, and

21
00:01:34.208 --> 00:01:38.530
that's why I like about jest is jest
has it built into it out of the box.

22
00:01:38.530 --> 00:01:42.644
Let's take this a step further and say,

23
00:01:42.644 --> 00:01:46.637
you now have a coverage folder here, so

24
00:01:46.637 --> 00:01:52.580
if you say open
coverage/lcov-report/index.html.

25
00:01:52.580 --> 00:01:54.748
This will now open it in your browser and

26
00:01:54.748 --> 00:01:57.318
you can actually get
a nice report out of this.

27
00:01:59.694 --> 00:02:05.168
So imagine if you have a huge test Suite,
you can click into one of these and

28
00:02:05.168 --> 00:02:11.812
you can see, for example, line 13 here, I
have no test that covers this line, right?

29
00:02:11.812 --> 00:02:14.651
So that could tell me it's like,
okay, this actually

30
00:02:14.651 --> 00:02:18.800
is a somewhat important line, we probably
should cover that with a test right?

31
00:02:18.800 --> 00:02:20.770
And so then I can go back and do that.

32
00:02:20.770 --> 00:02:24.865
You can also see here that it's not
covering this or statement at the moment,

33
00:02:24.865 --> 00:02:27.140
so I could consider covering that as well.

34
00:02:28.150 --> 00:02:32.550
You can also see here these
lines are being run once,

35
00:02:32.550 --> 00:02:35.750
this line here is being hit six times,

36
00:02:35.750 --> 00:02:41.350
you can kind of see the various
different levels of coverage here.

37
00:02:41.350 --> 00:02:45.639
And you can see here we have results, and
that we have 100% test coverage here,

38
00:02:45.639 --> 00:02:46.874
that it's a damn live.

39
00:02:46.874 --> 00:02:50.690
All we're doing here is
doing a snapshot test.

40
00:02:50.690 --> 00:02:55.365
Basically snapshot in this
context just means like, hey,

41
00:02:55.365 --> 00:02:59.206
you don't have any syntax errors here,
right?

42
00:02:59.206 --> 00:03:02.524
But this part of it's really cool that
it'll generate this test coverage report

43
00:03:02.524 --> 00:03:03.804
for you out of the box for free.

44
00:03:03.804 --> 00:03:06.591
I did nothing to set this
up it just comes with jest

45
00:03:11.512 --> 00:03:17.218
Cool, so we're now code complete for
testing,

46
00:03:17.218 --> 00:03:22.366
you can grab the testing
branch folder out of

47
00:03:22.366 --> 00:03:28.510
the complete intro to react
V7 project directory.

48
00:03:28.510 --> 00:03:31.815
Here testing that's one we just did.

49
00:03:31.815 --> 00:03:33.704
I got one more thing to
show you on testing and

50
00:03:33.704 --> 00:03:35.812
then I'll take all
the questions you wanna ask.

51
00:03:37.869 --> 00:03:42.858
If you're on VS Code,
make sure you Install the jest extension.

52
00:03:44.456 --> 00:03:49.338
I already have it, this is put out by
Orta, Orta was my former co-worker at

53
00:03:49.338 --> 00:03:53.698
Microsoft, Orta is very smart,
and also knows VS code very well.

54
00:03:53.698 --> 00:03:57.562
So his jest extension is very cool.

55
00:04:04.667 --> 00:04:06.212
There we go.

56
00:04:06.212 --> 00:04:10.900
So you can see here now I had this
little testing lab beaker thing here,

57
00:04:10.900 --> 00:04:15.272
this allows you to do a bunch of
really cool things directly from VS

58
00:04:15.272 --> 00:04:17.200
code directly in your code.

59
00:04:18.230 --> 00:04:20.492
So when I can just look at
my tests in general and

60
00:04:20.492 --> 00:04:23.340
I can see all of my tests
that are passing here.

61
00:04:23.340 --> 00:04:28.260
For some reason, if I need to run I click
play, it requires a bit of ceremony to

62
00:04:28.260 --> 00:04:33.060
set up with VS code so you can actually
run it directly in the debugger mode.

63
00:04:33.060 --> 00:04:37.730
So you can actually step by
step directly from VS code.

64
00:04:37.730 --> 00:04:41.181
I can see all the tests here,
I can run them,

65
00:04:41.181 --> 00:04:44.352
if I go into my tests
here source tests and

66
00:04:44.352 --> 00:04:49.296
I look at like pet.js you can see
here it gives you a check mark,

67
00:04:49.296 --> 00:04:54.559
this one's currently passing,
this one's currently passing.

68
00:04:58.219 --> 00:05:02.300
You can click on it'll
take you over there,

69
00:05:02.300 --> 00:05:06.614
you can click up here to
run everything again.

70
00:05:06.614 --> 00:05:11.489
Again some of this you do have to kind of
set it up again which I'm not gonna do at

71
00:05:11.489 --> 00:05:16.514
the moment, you can see the testing
output, let's just we'd love the windows

72
00:05:16.514 --> 00:05:23.814
see what happens So you can see
everything, yeah, this one is cool,

73
00:05:23.814 --> 00:05:27.670
it'll take you directly to the snapshots,
you can see like view snapshot.

74
00:05:27.670 --> 00:05:30.149
It'll open up here in
like a little window, so

75
00:05:30.149 --> 00:05:33.152
you can see them side by side but
it's getting out of it.

76
00:05:33.152 --> 00:05:36.718
Just a lot of really nice helpers for
running your tests and,

77
00:05:40.553 --> 00:05:43.465
So if you're gonna be
using jest in particular,

78
00:05:43.465 --> 00:05:46.671
I would highly suggest using
that VS code extension.

79
00:05:48.798 --> 00:05:50.158
Definitely one of my favorite ones.

80
00:05:56.204 --> 00:05:59.324
Yeah about coverage,
so for just one second,

81
00:05:59.324 --> 00:06:03.895
you do need to add to your get ignore
here make sure you add coverage.

82
00:06:03.895 --> 00:06:08.398
I already had it in there for you but
you do not check in the coverage report.

83
00:06:12.434 --> 00:06:17.605
And then, I guess, let's just
make sure with these tests here,

84
00:06:17.605 --> 00:06:20.817
let's just make one fail for some reason

85
00:06:25.639 --> 00:06:28.536
So now it read this out here, right?

86
00:06:28.536 --> 00:06:30.660
I get a nice read here,
if I go look in here,

87
00:06:30.660 --> 00:06:32.725
it'll tell me exactly what's failing.

88
00:06:32.725 --> 00:06:36.689
So it'll tell me exactly which
part of the test is failing.

89
00:06:39.740 --> 00:06:43.523
Or like what's even more compelling
is I have these tests and

90
00:06:43.523 --> 00:06:46.053
now let's say I'm working on pet.js.

91
00:06:46.053 --> 00:06:49.914
And this is now one dot jpg,
I'll save it and then we'll say,

92
00:06:49.914 --> 00:06:54.666
hey, that last say that you just did,
you get the instant feedback of that,

93
00:06:54.666 --> 00:06:56.386
you cause the test to fail.

94
00:06:58.215 --> 00:07:00.637
That's incredibly compelling, right?

95
00:07:00.637 --> 00:07:03.700
The faster you can give feedback to
a developer that something is failing,

96
00:07:03.700 --> 00:07:06.468
they still have context in their
brain of what they were just doing so

97
00:07:06.468 --> 00:07:07.899
they'll have to regain context.

98
00:07:13.098 --> 00:07:13.896
So there you go.

99
00:07:18.671 --> 00:07:21.816
Yeah, if we took some time, you could set
it up so you can do all the debugging,

100
00:07:21.816 --> 00:07:23.449
that's really nice thing to do as well.

101
00:07:23.449 --> 00:07:26.510
And then I haven't right now set
up to run my tests on every save.

102
00:07:26.510 --> 00:07:30.409
Obviously, if you have a big test suite or
heavy test suite that can be

103
00:07:30.409 --> 00:07:34.324
a little burdensome, but I mean,
on my M1 Mac it works really well.

104
00:07:36.152 --> 00:07:38.499
So yeah, highly suggest it.

105
00:07:41.258 --> 00:07:44.914
So any questions about testing at all?

106
00:07:44.914 --> 00:07:47.318
We have concluded the testing section.

107
00:07:47.318 --> 00:07:50.323
So I showed you unit
testing in particular and

108
00:07:50.323 --> 00:07:53.020
I did not get into integration testing.

109
00:07:54.760 --> 00:07:57.870
And the reason for
that is it deserves its own course, right?

110
00:07:57.870 --> 00:08:04.135
It's a large subject matter, and one that,
I used to do selenium and WebDriver and

111
00:08:04.135 --> 00:08:10.239
stuff like that and I got trauma from that
so I'm not eager to go back there [LAUGH].

112
00:08:10.239 --> 00:08:13.681
So suffice to say if you're interested in
going further than that into integration

113
00:08:13.681 --> 00:08:16.350
testing, there's other great
front of masters courses on it.

114
00:08:16.350 --> 00:08:19.608
Watch Steve's course on Cypress,
that's my plea to you.

115
00:08:19.608 --> 00:08:23.678
I think I'll say that if I was
gonna write only a few tests

116
00:08:23.678 --> 00:08:27.664
I would write a few just damn
good integration tests and

117
00:08:27.664 --> 00:08:32.367
then do nothing else and
I think will be the best for you, right?

118
00:08:32.367 --> 00:08:35.942
A couple things like, can the user
log in?, can the user checkout?,

119
00:08:35.942 --> 00:08:37.744
can the user cancel their account?

120
00:08:37.744 --> 00:08:41.489
Those kind of critical flows in all of
your application, and then call that good.

121
00:08:41.489 --> 00:08:43.310
If you're doing that,

122
00:08:43.310 --> 00:08:48.783
your users can at least commit
essential actions on your application.

123
00:08:51.005 --> 00:08:55.382
And make sure you only have
a few integration tests.

124
00:08:55.382 --> 00:08:59.560
Because if you test everything,
it becomes unruly to maintain.

125
00:08:59.560 --> 00:09:03.738
The integration tests are just hard to
maintain cuz there's so much going on,

126
00:09:03.738 --> 00:09:06.474
there's so much latency and
tools moving around.

127
00:09:06.474 --> 00:09:10.548
So it's important to have a few really
good ones that you keep super up to date

128
00:09:10.548 --> 00:09:13.870
rather than having 50 of them
that you kind of half ass, so.

