WEBVTT

1
00:00:00.260 --> 00:00:04.708
We just finished TypeScript-4
if you wanna hop into that

2
00:00:04.708 --> 00:00:09.440
checkpoint in the code,
we're about to do the last one here.

3
00:00:12.510 --> 00:00:13.490
So go to results.

4
00:00:13.490 --> 00:00:15.640
We wanna fix this one next.

5
00:00:15.640 --> 00:00:18.900
Results.js rename.

6
00:00:18.900 --> 00:00:21.732
We're gonna call this .tsx, okay?

7
00:00:21.732 --> 00:00:26.800
This is we're gonna
import at the top here.

8
00:00:26.800 --> 00:00:31.216
I mean a really easy way to do this,
again, if you're using VS code is you can

9
00:00:31.216 --> 00:00:35.429
just start saying, hey, actually I
know this is a function component.

10
00:00:35.429 --> 00:00:37.680
And then you just find it in here.

11
00:00:37.680 --> 00:00:39.850
So I see function
component here from react.

12
00:00:39.850 --> 00:00:42.700
If I click on that,
it will just import it for me.

13
00:00:43.840 --> 00:00:45.660
I'm all about that.

14
00:00:45.660 --> 00:00:48.929
Let's type as little as possible life.

15
00:00:48.929 --> 00:00:52.060
And then here, this is a good one to know.

16
00:00:53.280 --> 00:00:56.741
So we did kind of a bad thing here
that we have a pet component and

17
00:00:56.741 --> 00:00:58.550
we also have a pet type, right?

18
00:00:58.550 --> 00:01:05.070
So if you go and look in our API
response types, we have a pet type here.

19
00:01:05.070 --> 00:01:08.616
This is why proponents of like,
you should call this iPet, right?

20
00:01:08.616 --> 00:01:13.237
Therefore everything would, you'd have the
pet component and then the iPet interface,

21
00:01:13.237 --> 00:01:15.500
ain't nobody got time for that.

22
00:01:15.500 --> 00:01:17.833
Just kidding.
It's probably a good idea, but

23
00:01:17.833 --> 00:01:20.810
I'll show you how to handle that here.

24
00:01:20.810 --> 00:01:24.468
I'm going to import pet as pet type.

25
00:01:26.673 --> 00:01:32.620
From ./apiresponse types, and
now I can just use this as pet type.

26
00:01:34.720 --> 00:01:40.090
So, results function component,

27
00:01:40.090 --> 00:01:45.460
and then this is going to take in pets

28
00:01:45.460 --> 00:01:51.010
which is of pet type array like that.

29
00:01:54.226 --> 00:01:57.530
And that is enough to
finish typing results.

30
00:02:02.820 --> 00:02:04.839
Again, the react types are really nice.

31
00:02:04.839 --> 00:02:08.184
In general, if you just kind of
tell it like here's my component,

32
00:02:08.184 --> 00:02:10.993
here's what it expects,
nine times out of 10 that's

33
00:02:10.993 --> 00:02:13.943
enough what you have to do to
finish typing in components.

34
00:02:13.943 --> 00:02:16.570
It's smarter to kind of pipe
the types around that you need.

35
00:02:16.570 --> 00:02:17.848
Let's go and do app.js.

36
00:02:17.848 --> 00:02:20.342
looks like that's our last one, right?

37
00:02:20.342 --> 00:02:25.836
Don't worry, this one takes awhile and
is the hardest one to do, so buckle up.

38
00:02:27.121 --> 00:02:29.324
App.tsx, okay done, yeah,

39
00:02:29.324 --> 00:02:34.169
we will have to do anything else
[LAUGH] everything else is finished.

40
00:02:34.169 --> 00:02:39.096
And I find that happens frequently
as well when you're doing

41
00:02:39.096 --> 00:02:42.875
typings with react,
is this one has no props.

42
00:02:42.875 --> 00:02:43.835
It has no state.

43
00:02:43.835 --> 00:02:46.135
I mean, the state here is just a string.

44
00:02:46.135 --> 00:02:49.991
I guess we could have gone and
made like a theme type, right?

45
00:02:49.991 --> 00:02:53.976
Until it's like, this can only be
the colors that I support, but

46
00:02:53.976 --> 00:02:55.870
I think that's totally fine.

47
00:02:55.870 --> 00:02:57.308
We don't need to do that.

48
00:02:57.308 --> 00:03:04.640
And that's it, you and I just retyped
an entire code base in TypeScript.

49
00:03:05.720 --> 00:03:09.340
So now if we do npm run lint,
I think we should get no errors.

50
00:03:10.880 --> 00:03:11.702
Yeah, we don't.

51
00:03:13.110 --> 00:03:15.860
Let's go ahead and add a type check step.

52
00:03:17.390 --> 00:03:20.704
So, a big part of this is that
whenever I deploy my code and

53
00:03:20.704 --> 00:03:24.226
I run it through CICD,
I want it to run TypeScript to make sure

54
00:03:24.226 --> 00:03:28.302
that if future developers are checking
in code, that it passes lint,

55
00:03:28.302 --> 00:03:32.897
that it passes typing, that it passes
prettierc, all those kinds of things.

56
00:03:34.443 --> 00:03:39.505
So, what I would do is I'd
add a type check here.

57
00:03:44.032 --> 00:03:46.977
And you would just dotsc --noEmit.

58
00:03:46.977 --> 00:03:52.104
So, by default, type checker is actually
going to run the TypeScript compiler,

59
00:03:52.104 --> 00:03:56.861
check all your types and then spit out
the compiled files which we don't want

60
00:03:56.861 --> 00:03:58.940
TypeScript to take care of that,

61
00:03:58.940 --> 00:04:03.060
we have Parcel which is already
running TSC underneath the hood.

62
00:04:04.330 --> 00:04:09.040
This is the thing that we will just
have it run in our GitHub action.

63
00:04:09.040 --> 00:04:11.933
So now if I say npm run typecheck.

64
00:04:13.703 --> 00:04:15.550
This is just running TypeScript now.

65
00:04:16.770 --> 00:04:17.778
So that's fine.

66
00:04:17.778 --> 00:04:24.416
And I always like to make sure things
break when I expect them to break.

67
00:04:24.416 --> 00:04:29.540
Cuz, It's great that my editor does this.

68
00:04:29.540 --> 00:04:34.083
But like, let's say that I have another
colleague that doesn't wanna use this.

69
00:04:34.083 --> 00:04:37.899
They only code in notepad which obviously
doesn't do type checking for you.

70
00:04:37.899 --> 00:04:44.035
They would have to rely on your CLI
as opposed to relying on your editor.

71
00:04:44.035 --> 00:04:48.086
So here you can see alright
you tried to do this,

72
00:04:48.086 --> 00:04:51.947
you can't do to uppercase on a five,
right?

73
00:04:51.947 --> 00:04:55.110
All right, I meant to actually do that.

74
00:04:56.400 --> 00:04:59.647
All the same, they're like, hey,
this is actually a five and

75
00:04:59.647 --> 00:05:02.110
five doesn't have a to
uppercase method on it.

76
00:05:05.120 --> 00:05:08.680
Another thing a nice thing about
TypeScript as you can see this TS2339.

77
00:05:08.680 --> 00:05:14.955
You can just Google that, and
then it'll take you to what broke.

78
00:05:14.955 --> 00:05:18.190
So it's a very friendly compiler.

79
00:05:21.040 --> 00:05:26.190
Okay, and
then here now I'd go into my package.json,

80
00:05:26.190 --> 00:05:32.326
I would have my GitHub action run
type check I'd have it run Lint and

81
00:05:32.326 --> 00:05:37.498
I'd have it run format,
I'd make like a format check.

82
00:05:37.498 --> 00:05:42.202
So what you would do
here is this is how you'd

83
00:05:42.202 --> 00:05:46.800
make it run prettier in CICD, --check.

84
00:05:46.800 --> 00:05:50.967
So then I would have it run format check
first, then I'd have it run probably type

85
00:05:50.967 --> 00:05:53.930
check next, and
then probably have have a run Lint next.

86
00:05:55.530 --> 00:05:58.690
And if it passes all three of those things
and then probably your test suite, right?

87
00:05:58.690 --> 00:06:01.499
And then once you've passed all three or
four of those things,

88
00:06:01.499 --> 00:06:04.100
then you know like all right,
this passes all of my rules.

89
00:06:04.100 --> 00:06:05.290
This is ready to go to production.

90
00:06:06.554 --> 00:06:08.680
That is something that we did not do.

91
00:06:09.880 --> 00:06:16.750
Here and package that JSON you
have to change Dev from parcel.

92
00:06:16.750 --> 00:06:20.030
It's not there, it's on index.html.

93
00:06:20.030 --> 00:06:22.226
This has to be app.tsx.

94
00:06:25.177 --> 00:06:27.908
Otherwise, parcel doesn't
know where to start, right?

95
00:06:30.092 --> 00:06:31.799
So save that, now we try and run this.

96
00:06:34.322 --> 00:06:36.900
Let's refresh the page here.

97
00:06:38.130 --> 00:06:39.543
I mean, you'd be on 1, 2, 3, 4.

98
00:06:42.805 --> 00:06:48.720
So the way that, Mohammed asked, how would
I know what those API responses look like?

99
00:06:48.720 --> 00:06:51.150
And the answer is just you have to look,
right?

100
00:06:51.150 --> 00:06:58.547
Okay, so if I look at the XHR here,
I can see this one.

101
00:06:58.547 --> 00:07:02.299
And I can see here in the response,
it has a has an x and index,

102
00:07:02.299 --> 00:07:07.240
you just have to look at what the, I guess
there's a couple of things you can do.

103
00:07:07.240 --> 00:07:09.268
One, you could have something
like open API spec,

104
00:07:09.268 --> 00:07:10.690
which will generate types for you.

105
00:07:10.690 --> 00:07:13.154
That would be the ideal way if
your company works that way.

106
00:07:13.154 --> 00:07:17.392
Otherwise, you just have to look at
the API response here and I can see all of

107
00:07:17.392 --> 00:07:21.920
these various different things here that
are coming back from the API, right?

108
00:07:23.170 --> 00:07:25.880
And I just went through and
wrote the typings myself, right?

109
00:07:26.940 --> 00:07:30.220
So that it has a start index and
index has next.

110
00:07:30.220 --> 00:07:33.070
You just have to look at
the response to get that, okay?

111
00:07:33.070 --> 00:07:36.154
Douglas asked, from the API,
you get a number of results?

112
00:07:36.154 --> 00:07:40.570
This number of results is how
many total results are available.

113
00:07:40.570 --> 00:07:43.988
Not necessarily how many
are being returned to this.

114
00:07:43.988 --> 00:07:44.941
API always returns 10.

115
00:07:44.941 --> 00:07:48.328
So you have to paginate the next
one to get the next ten.

116
00:07:52.626 --> 00:07:57.580
Then this has next here is basically
is there another page available to you.

117
00:07:57.580 --> 00:07:59.620
Yep that's it, that's the whole thing.

