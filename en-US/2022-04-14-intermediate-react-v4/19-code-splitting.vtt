WEBVTT

1
00:00:00.000 --> 00:00:02.580
Let's move on to code splitting.

2
00:00:02.580 --> 00:00:07.019
So what I want you to do right now
is we're gonna start from with our

3
00:00:07.019 --> 00:00:08.728
project all over again.

4
00:00:08.728 --> 00:00:12.238
So we're not gonna build on
top of the tailwind CSS, and

5
00:00:12.238 --> 00:00:16.509
we're gonna rebuild from that last
version of the repo that we had.

6
00:00:16.509 --> 00:00:20.153
So the way I was doing that as here,
let me make this much bigger

7
00:00:27.020 --> 00:00:29.862
I'm gonna copy.

8
00:00:29.862 --> 00:00:33.372
Let's see, we'll move intermediate.

9
00:00:33.372 --> 00:00:36.568
We need to be in desktop.

10
00:00:36.568 --> 00:00:41.293
And we're gonna move intermediate
to tailwind, so I can ignore it.

11
00:00:41.293 --> 00:00:48.042
And then I'm gonna copy
from 12- portals and

12
00:00:48.042 --> 00:00:52.942
refs I need to move that from this.

13
00:00:52.942 --> 00:00:55.047
So we have this complete
intro to react project.

14
00:00:55.047 --> 00:01:01.115
I'm going to copy from that
project/12-portals-and-refs and

15
00:01:01.115 --> 00:01:06.989
I'm going to move that to we're
going to do code-splitting next.

16
00:01:06.989 --> 00:01:09.417
And then I'm gonna code in code splitting

17
00:01:16.506 --> 00:01:18.339
There we go.

18
00:01:18.339 --> 00:01:21.004
So again,
this is just a fresh copy of the repo,

19
00:01:21.004 --> 00:01:24.280
you can see here we don't have
any tailwind stuff in here.

20
00:01:24.280 --> 00:01:31.868
And we are going to be
writing code splitting.

21
00:01:31.868 --> 00:01:35.967
All right, so
let's talk about code splitting,

22
00:01:35.967 --> 00:01:40.274
what it is,
why we want to do it why it's important.

23
00:01:40.274 --> 00:01:45.952
If you have a large application,
a really big one like a Netflix sized one,

24
00:01:45.952 --> 00:01:51.556
like a LinkedIn sized one,
were it's several megabytes of JavaScript.

25
00:01:51.556 --> 00:01:54.489
Sometimes it's unavoidable that
you just have big libraries or

26
00:01:54.489 --> 00:01:56.728
you're doing a really
big heavy lifting thing.

27
00:01:56.728 --> 00:01:59.020
I can't imagine you can fit
things like Adobe Photoshop,

28
00:01:59.020 --> 00:02:00.527
which they're doing in the browser.

29
00:02:00.527 --> 00:02:04.600
Now, you can't fit that in under
a couple of megabytes of JavaScript.

30
00:02:04.600 --> 00:02:07.064
It's a very big application.

31
00:02:07.064 --> 00:02:08.776
So you have two choices there.

32
00:02:08.776 --> 00:02:12.180
You can make your users wait forever for
it to load,

33
00:02:12.180 --> 00:02:17.026
right ,or you can be intelligent about
what code you send to them first.

34
00:02:17.026 --> 00:02:21.032
Send them the most important things like
the app shell, welcome screen ,hello

35
00:02:21.032 --> 00:02:25.243
screen, tooltips, and then don't panic and
load everything in the background.

36
00:02:25.243 --> 00:02:27.225
Right?

37
00:02:27.225 --> 00:02:30.559
That's the way to do it is panic, right?

38
00:02:30.559 --> 00:02:31.992
Just kidding.

39
00:02:31.992 --> 00:02:34.993
But the way to do it is something
called code splitting, right?

40
00:02:34.993 --> 00:02:37.070
We send them the most
important things first so

41
00:02:37.070 --> 00:02:40.598
that the browser can start loading
everything that it needs to start loading.

42
00:02:40.598 --> 00:02:43.337
And then in the background,
we can start sending them.

43
00:02:43.337 --> 00:02:45.927
Things that they need to
kind of finish that out.

44
00:02:45.927 --> 00:02:50.292
And or we don't have to send them
the parts that they don't need yet, right?

45
00:02:50.292 --> 00:02:54.366
So for example, if I'm on linkedin.com,
and I'm just scrolling through my feed,

46
00:02:54.366 --> 00:02:57.437
I don't need all the JavaScript for
LinkedIn recruiter right?

47
00:02:57.437 --> 00:03:01.069
So I can just not load that
until the user heads there or

48
00:03:01.069 --> 00:03:03.180
expresses intent to go there.

49
00:03:03.180 --> 00:03:07.670
Or if I'm not signed up for LinkedIn
recruiter downloaded it all right.

50
00:03:07.670 --> 00:03:11.521
So you do this through a process
called code splitting.

51
00:03:11.521 --> 00:03:16.950
I'm gonna show you kind of the base way of
doing it, I'm gonna show you how to do it,

52
00:03:16.950 --> 00:03:21.605
how to code split over routes,
which is not always the best way to do it,

53
00:03:21.605 --> 00:03:26.136
it's kinda the obvious way to do it,
but you can also do things like.

54
00:03:26.136 --> 00:03:28.076
I'll show you how to
code spit out the modal,

55
00:03:28.076 --> 00:03:31.207
which is a terrible idea because it's
such a tiny amount of JavaScript.

56
00:03:31.207 --> 00:03:34.877
But I'm gonna show you
how to do it anyway.

57
00:03:34.877 --> 00:03:38.238
So the thing I'm gonna say
about code splitting is it's,

58
00:03:38.238 --> 00:03:42.506
easy to make code splitting a negative
thing in your application as well.

59
00:03:42.506 --> 00:03:45.448
For example,
if we code split out our modal,

60
00:03:45.448 --> 00:03:51.186
it's just adding latency to something that
didn't need to have latency added anyway.

61
00:03:51.186 --> 00:03:53.964
You need to be splitting out
actually a couple hundred a kilo.

62
00:03:53.964 --> 00:03:57.227
Well, let's say at least a hundred
kilobytes before it makes any

63
00:03:57.227 --> 00:03:58.068
sense, right?

64
00:03:58.068 --> 00:04:02.544
Otherwise you're just slowing
down the user for no good reason.

65
00:04:02.544 --> 00:04:05.829
And you're complicating your app for
no good reason.

66
00:04:05.829 --> 00:04:11.176
All right, so we'll get there,
let's talk about it.

67
00:04:11.176 --> 00:04:14.733
Add it in like React complete
intro to react version five.

68
00:04:14.733 --> 00:04:17.189
So that would have been
intermediate react view one.

69
00:04:17.189 --> 00:04:20.630
We used to use the thing
called react loadable.

70
00:04:20.630 --> 00:04:21.807
You don't have to do that anymore.

71
00:04:21.807 --> 00:04:25.205
You can actually just do it directly with
react with something called react.lazy.

72
00:04:25.205 --> 00:04:30.461
[INAUDIBLE] Okay so let's head to

73
00:04:30.461 --> 00:04:36.195
app.js, And up here where we're importing

74
00:04:36.195 --> 00:04:39.911
all this stuff from react we have to
import two more things, one's called lazy.

75
00:04:42.200 --> 00:04:44.842
And one is called Suspense.

76
00:04:44.842 --> 00:04:50.656
Capital S in Suspense,
lowercase l for lazy.

77
00:04:50.656 --> 00:04:52.632
And we're going to code split out apps.

78
00:04:52.632 --> 00:04:56.640
Are our routes rather so
that we don't load details and

79
00:04:56.640 --> 00:05:02.495
we don't load search params upfront,
we only do it after the user requests it.

80
00:05:02.495 --> 00:05:06.535
So the first thing is delete line five and
line six.

81
00:05:06.535 --> 00:05:09.919
The import details
are not the same context.

82
00:05:09.919 --> 00:05:13.794
You want to delete details and
search prompts a line to add lines.

83
00:05:13.794 --> 00:05:20.108
Five if you deleted theme context,
put that back in.

84
00:05:20.108 --> 00:05:24.108
So delete search params and
delete details.

85
00:05:24.108 --> 00:05:25.792
Okay.

86
00:05:25.792 --> 00:05:32.125
Then I want you to say
const details= lazy.

87
00:05:32.125 --> 00:05:39.508
And then we're gonna write In
a function that calls import,

88
00:05:39.508 --> 00:05:43.431
this is called dynamic import.

89
00:05:43.431 --> 00:05:49.129
And it's from ./details.

90
00:05:49.129 --> 00:05:56.417
Okay, and then we'll do the same thing for
search params=lazy.

91
00:05:56.417 --> 00:06:01.487
And then we're going to import

92
00:06:01.487 --> 00:06:05.780
from ./search params.

93
00:06:05.780 --> 00:06:09.173
Now what have I done here.

94
00:06:09.173 --> 00:06:10.938
Let's talk about import first.

95
00:06:10.938 --> 00:06:15.482
This is something that's built into
JavaScript this is actually part of

96
00:06:15.482 --> 00:06:17.127
the ESM six modules spec.

97
00:06:17.127 --> 00:06:21.614
These are static imports,
which means that these cannot change.

98
00:06:21.614 --> 00:06:24.673
So, for example,

99
00:06:24.673 --> 00:06:29.456
you cannot say like constant x

100
00:06:29.456 --> 00:06:35.197
equals./ Theme context.and say

101
00:06:35.197 --> 00:06:40.372
import theme context from, X.

102
00:06:40.372 --> 00:06:45.614
This line does not work
because this is static.

103
00:06:45.614 --> 00:06:49.938
This thing will only work If this is
actually a fully supplied string at

104
00:06:49.938 --> 00:06:54.776
the time, in other words, this does not
execute at runtime this executes like

105
00:06:54.776 --> 00:06:58.733
build time, your tools are meant
to pick this up and therefore,

106
00:06:58.733 --> 00:07:01.257
you cannot do dynamic imports this way.

107
00:07:01.257 --> 00:07:04.281
This is a departure from how
common JS worked, right?

108
00:07:04.281 --> 00:07:08.835
You used to be able to say const or

109
00:07:08.835 --> 00:07:13.568
theme context equals require x.

110
00:07:13.568 --> 00:07:16.420
This used to work, right?

111
00:07:16.420 --> 00:07:19.975
Because this was done at runtime,
this was dynamic.

112
00:07:19.975 --> 00:07:25.393
So they provided this thing called Import
like this to kind of bridge that gap.

113
00:07:25.393 --> 00:07:28.793
So what this does, is it actually
gives you back a promise and

114
00:07:28.793 --> 00:07:31.401
that promise when it
resolves is that module.

115
00:07:31.401 --> 00:07:32.810
Again, this is not a react thing.

116
00:07:32.810 --> 00:07:35.812
This is just a JavaScript thing.

117
00:07:35.812 --> 00:07:41.542
Okay, so
that's what import is it's dynamic import.

118
00:07:41.542 --> 00:07:48.458
So in theory, you could say constx = blah.

119
00:07:48.458 --> 00:07:50.615
But it's not gonna work.

120
00:07:50.615 --> 00:07:56.694
We're gonna say, JavaScript will let you
do that, Parcel won't let you do that.

121
00:07:56.694 --> 00:07:59.911
Because Parcel is gonna say, hey,
I see a dynamic import here,

122
00:07:59.911 --> 00:08:02.305
this is somewhere I can split the code,
right?

123
00:08:02.305 --> 00:08:05.689
I don't have to set up parcels or do
anything, it just figures out like I see

124
00:08:05.689 --> 00:08:08.506
dynamic import,
I'm going to split out the details module.

125
00:08:08.506 --> 00:08:10.039
Did not include anything in it.

126
00:08:10.039 --> 00:08:12.680
And I'm only going to load
that when it's asked for.

127
00:08:14.091 --> 00:08:16.447
Okay?

128
00:08:16.447 --> 00:08:19.843
Lazy is gonna make
a component out of this.

129
00:08:19.843 --> 00:08:22.942
So this is now a component that
we can render like we do here.

130
00:08:22.942 --> 00:08:25.506
So we actually don't have to
change any of the code down here.

131
00:08:25.506 --> 00:08:28.010
This is all just gonna
work out of the box.

132
00:08:28.010 --> 00:08:29.275
Likes but that's what lazy generates.

133
00:08:29.275 --> 00:08:31.729
You can see here that lazy returns to you,

134
00:08:31.729 --> 00:08:35.600
a lazy exotic component I did not
know that's what it's called.

135
00:08:35.600 --> 00:08:36.995
But now I want to use it everywhere.

136
00:08:36.995 --> 00:08:42.592
[LAUGH]
Cool.

137
00:08:42.592 --> 00:08:44.886
We're not quite done yet.

138
00:08:44.886 --> 00:08:50.262
What happens when we try and load
the Detail page and it's not loaded yet.

139
00:08:50.262 --> 00:08:53.718
Well, right now react
doesn't know what to do.

140
00:08:53.718 --> 00:08:54.920
I actually don't even know what to do.

141
00:08:54.920 --> 00:09:00.291
I think it, would it crash, does it crash?

142
00:09:00.291 --> 00:09:03.088
It doesn't load because you'd
have to start the server, okay.

143
00:09:06.231 --> 00:09:10.179
And today I need to NPM install again.

144
00:09:10.179 --> 00:09:11.472
Cuz I didn't do that yet.

145
00:09:18.348 --> 00:09:19.013
Yeah, again,

146
00:09:19.013 --> 00:09:22.091
notice we don't have to install
anything to make code splitting work.

147
00:09:22.091 --> 00:09:25.247
It's all built into React and
built into Parcel.

148
00:09:25.247 --> 00:09:27.570
All that stuff just works out of the box.

149
00:09:27.570 --> 00:09:29.421
No additional dependencies required.

150
00:09:33.116 --> 00:09:37.167
Yeah, like I thought it just doesn't
know what to do in a crashes.

151
00:09:37.167 --> 00:09:40.513
So we have to tell it what
to do when it loads this and

152
00:09:40.513 --> 00:09:42.675
it doesn't have what it needs.

153
00:09:42.675 --> 00:09:44.363
That is what suspense is for.

154
00:09:44.363 --> 00:09:46.685
Suspense is basically this component
that you can throw in there.

155
00:09:46.685 --> 00:09:51.478
It says, hey if you hit me or
you render me and something is still

156
00:09:51.478 --> 00:09:56.464
loading inside of me,
do this until the thing finishes loading.

157
00:09:56.464 --> 00:09:59.957
So here inside of strict mode or inside
of theme context or inside a browser,

158
00:09:59.957 --> 00:10:01.278
it doesn't really matter.

159
00:10:01.278 --> 00:10:02.096
Wherever you wanna put it.

160
00:10:02.096 --> 00:10:04.479
We're gonna put it here.

161
00:10:04.479 --> 00:10:10.243
We're gonna put suspense and
we're gonna say, the fallback,

162
00:10:10.243 --> 00:10:15.165
is equal to whatever you
wanna put when it's loading.

163
00:10:15.165 --> 00:10:20.508
So I'm gonna put like an h2 here,
that says loading or something like that.

164
00:10:20.508 --> 00:10:25.434
Or be patient, you weirdo,
I find it best like user

165
00:10:25.434 --> 00:10:30.491
experience to insult your
users on a regular basis.

166
00:10:30.491 --> 00:10:31.537
Let him know who's boss.

167
00:10:34.293 --> 00:10:36.077
I'm a good developer.

168
00:10:36.077 --> 00:10:38.153
That's what my wife tells me.

169
00:10:38.153 --> 00:10:42.286
All right, so inside a strict mode here.

170
00:10:42.286 --> 00:10:43.314
There we go.

171
00:10:43.314 --> 00:10:45.668
And now we have this suspense thing.

172
00:10:45.668 --> 00:10:50.563
So if you refresh the page for a second,
you'll It's goes fast enough, but

173
00:10:50.563 --> 00:10:53.866
you can probably kind of
sometimes see it up there.

174
00:10:53.866 --> 00:10:56.312
Loading, be patient, you weirdo, right?

175
00:10:56.312 --> 00:10:58.970
Obviously, it's low loading for
your local development environment.

176
00:10:58.970 --> 00:11:01.638
So it's extremely fast but
that's the point.

177
00:11:01.638 --> 00:11:05.497
Obviously, what you should do here you
should make some sort of like nice loading

178
00:11:05.497 --> 00:11:06.187
experience.

179
00:11:06.187 --> 00:11:08.448
Don't do it like this, right?

180
00:11:08.448 --> 00:11:13.112
And you probably want to load
the homepage every single time and

181
00:11:13.112 --> 00:11:15.760
not make the homepage lazy loaded.

182
00:11:15.760 --> 00:11:17.793
You have to ask yourself,
like, how does my app work?

183
00:11:17.793 --> 00:11:21.097
And how do I expect my
users to navigate around?

184
00:11:21.097 --> 00:11:23.255
I'm just showing you how
to lazy load a route.

185
00:11:23.255 --> 00:11:27.180
It's up to you how you want to apply that.

186
00:11:27.180 --> 00:11:31.351
But to prove my point here, let's refresh
the page and let's look at our network tab

187
00:11:31.351 --> 00:11:34.308
and we're going to look at what
the JavaScript is loading.

188
00:11:34.308 --> 00:11:40.025
So notice before it was only loading
index.js everything was one bundle, right?

189
00:11:40.025 --> 00:11:43.415
But now I learned I load index.js
then I load search params.

190
00:11:43.415 --> 00:11:46.601
So it's split into two
separate JavaScript things.

191
00:11:46.601 --> 00:11:49.474
This is a megabyte point two again,
this is development mode.

192
00:11:49.474 --> 00:11:53.867
So it's obviously going to be very
large And then this is 38 kilobytes.

193
00:11:53.867 --> 00:11:59.571
Now, if you click on Luna here,
it's gonna load for a hot split second and

194
00:11:59.571 --> 00:12:05.103
then notice down here it's gonna
load details.js, and there you go.

195
00:12:09.623 --> 00:12:12.504
Now what's cool about this,
let's say you don't have to do this.

196
00:12:12.504 --> 00:12:18.278
I'm just gonna do something
to show you really

197
00:12:18.278 --> 00:12:25.978
quickly If I npm install moment
which is a very large library,

198
00:12:25.978 --> 00:12:30.865
and I go into details.js and I import,

199
00:12:30.865 --> 00:12:34.880
moment as star from the moment.

200
00:12:37.141 --> 00:12:40.194
I don't know I've not used moment in
a while so I don't remember exactly how to

201
00:12:40.194 --> 00:12:42.615
do this and then I'm just going
to like console.log moment.

202
00:12:49.166 --> 00:12:50.470
Does not have like a default.

203
00:12:57.239 --> 00:12:58.818
Or is it stars moment.

204
00:13:02.574 --> 00:13:09.550
There we go, And
then I run my server again.

205
00:13:09.550 --> 00:13:14.168
So I'm just doing this because I
know moment is a very large library.

206
00:13:14.168 --> 00:13:18.327
Moment is only being used in details
therefore parcel should pick up I was

207
00:13:18.327 --> 00:13:22.691
like, I only need to load moment,
when details is being loaded, when I load

208
00:13:22.691 --> 00:13:27.120
an app I don't and so it's able to cut
off that part of the dependency graph and

209
00:13:27.120 --> 00:13:28.858
only intelligently do that.

210
00:13:28.858 --> 00:13:33.375
Let's, again,
I'm possibly famous last words here.

211
00:13:36.097 --> 00:13:39.295
So 38 kilobytes, if I click on this, yeah,

212
00:13:39.295 --> 00:13:42.578
notice that this is now
significantly bigger.

213
00:13:42.578 --> 00:13:44.888
Go back, go away.

214
00:13:44.888 --> 00:13:49.514
185 kilobytes and that's because
it's smart to say like okay,

215
00:13:49.514 --> 00:13:52.193
cool, moment only goes with details,

216
00:13:52.193 --> 00:13:56.590
I'm only gonna include it with that one,
pretty cool, right?

217
00:13:58.272 --> 00:14:01.847
So, again, this is one of the reasons
that I quite enjoy React and

218
00:14:01.847 --> 00:14:03.934
code splitting all the kind of stuff.

219
00:14:03.934 --> 00:14:06.086
It's really fairly straightforward.

220
00:14:06.086 --> 00:14:10.073
We didn't have to do any extra song and
dance and parcel in particular,

221
00:14:10.073 --> 00:14:13.075
just a smarter way to handle
this stuff out of the box.

222
00:14:13.075 --> 00:14:17.703
This used to take quite a bit of
setup to get it right in web Pack.

223
00:14:17.703 --> 00:14:21.871
It was possible and web pack definitely
placed the way but parcel made it easy.

224
00:14:29.314 --> 00:14:33.488
All right, one more thing and
then we'll take some questions after that.

225
00:14:33.488 --> 00:14:38.833
Head to modal.js, Or

226
00:14:38.833 --> 00:14:41.665
sorry not modal,
we're going to do it in details.

227
00:14:41.665 --> 00:14:46.015
We're going to make it lazy load modal.

228
00:14:46.015 --> 00:14:47.850
So again, the same thing here.

229
00:14:47.850 --> 00:14:49.596
Get rid of modal here.

230
00:14:49.596 --> 00:14:54.465
We're gonna import lazy from react.

231
00:14:54.465 --> 00:14:56.698
We're gonna say const modal.

232
00:14:56.698 --> 00:15:00.804
Equals lazy function,

233
00:15:00.804 --> 00:15:05.532
return import./modal.

234
00:15:08.973 --> 00:15:09.995
That's it.

235
00:15:09.995 --> 00:15:12.199
We just now made modal lazy loaded.

236
00:15:17.094 --> 00:15:22.024
So let's actually move all
this business now to modal.

237
00:15:24.114 --> 00:15:29.074
So I'm moving all of my
moment stuff into modal.

238
00:15:29.074 --> 00:15:33.209
So that now modal will lazy load moment.

239
00:15:35.276 --> 00:15:39.233
So now if we go back over here,
refresh your page a little bit.

240
00:15:39.233 --> 00:15:43.726
So, first of all, noticed that
we did not add another suspense.

241
00:15:43.726 --> 00:15:45.405
Why?

242
00:15:45.405 --> 00:15:49.010
Cuz it's fine, we don't need to load
suspense because it's being loaded or

243
00:15:49.010 --> 00:15:52.849
there's already a suspense in capturing
modal because it's all the way up here.

244
00:15:52.849 --> 00:15:57.041
It'll bubble up until it hits the first
suspense that it sees right now we could

245
00:15:57.041 --> 00:16:01.043
hear in details we could put another
suspense in here and we would apply that

246
00:16:01.043 --> 00:16:05.125
one because we'd hit that one first
because it just bubbles outward right.

247
00:16:05.125 --> 00:16:10.037
But we don't need to if we don't have to
we don't have to if we don't need to,

248
00:16:10.037 --> 00:16:10.880
either way.

249
00:16:13.291 --> 00:16:16.398
All right, so
here we load index we load details.

250
00:16:16.398 --> 00:16:18.734
Notice that we did not load some primes,
for

251
00:16:18.734 --> 00:16:21.337
examples cuz we did not
have the homepage first.

252
00:16:21.337 --> 00:16:28.138
And now, if I click adopt Luna,
We get 170 kilobyte modal.

253
00:16:28.138 --> 00:16:32.609
So not only is it modal, which it sucks,
objectively, it's a fat modal.

254
00:16:32.609 --> 00:16:35.545
Which no one especially likes.

255
00:16:35.545 --> 00:16:40.321
Or let's rephrase that it,
is a lot of kilobytes modal [LAUGH] it's

256
00:16:40.321 --> 00:16:44.769
an expensive modal, yeah,
that's a good way of putting it.

257
00:16:49.177 --> 00:16:51.850
But yeah notice again if you
refresh the page here for

258
00:16:51.850 --> 00:16:54.963
a hot second it'll show you
the loading here from suspense,

259
00:16:57.026 --> 00:17:01.275
Now obviously this is all local
environment so it's going fairly fast but

260
00:17:01.275 --> 00:17:05.814
If this is going between here and AWS,
that'll take more than a millisecond.

261
00:17:05.814 --> 00:17:08.012
&gt;&gt; Will the same code work with Web pack?

262
00:17:10.370 --> 00:17:15.619
&gt;&gt; The same code will look
exactly the same with Web pack.

263
00:17:15.619 --> 00:17:19.070
It's been a while since
I've done it with Web pack.

264
00:17:19.070 --> 00:17:22.154
So you'll definitely have to
set it up differently but

265
00:17:22.154 --> 00:17:25.045
I don't think the codes
gonna look any different.

266
00:17:25.045 --> 00:17:30.276
Or ES build or snow pack or any one of
those because what I'm showing you here

267
00:17:30.276 --> 00:17:35.360
is just standard JavaScript there's
nothing parcel specific in here.

268
00:17:35.360 --> 00:17:39.884
The question that I have is is there
anything Web pack specific which I

269
00:17:39.884 --> 00:17:44.732
pretty sure the answer is no but
you'd have to validate that's the case.

270
00:17:44.732 --> 00:17:49.743
&gt;&gt; Can we use codes split
in server side rendering.

271
00:17:49.743 --> 00:17:53.036
&gt;&gt; Yeah, the reason why I didn't
show you this together is

272
00:17:53.036 --> 00:17:54.871
it gets a little complicated.

273
00:17:54.871 --> 00:17:59.032
And when I say a little company gets
pretty complicated, it's possible and

274
00:17:59.032 --> 00:18:01.902
difficult, I think is
the answer to your question.

275
00:18:01.902 --> 00:18:07.482
So, you can now get code splitting

276
00:18:07.482 --> 00:18:12.106
is the name of the Repo here.

277
00:18:12.106 --> 00:18:17.585
If you go down to code splitting
down here, there is code splitting.

278
00:18:17.585 --> 00:18:19.921
They click on that and
you can see where we're at

