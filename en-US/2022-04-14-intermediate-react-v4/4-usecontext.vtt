WEBVTT

1
00:00:00.176 --> 00:00:04.023
So let's talk about context.

2
00:00:04.023 --> 00:00:07.991
So this next one here, the first level
second, this one here on the right side,

3
00:00:07.991 --> 00:00:08.891
this is context.

4
00:00:13.117 --> 00:00:19.583
So, you can see here, I have a very
professional username here Bob Olsen.

5
00:00:19.583 --> 00:00:24.048
That's Bob Robertson example.com.

6
00:00:24.048 --> 00:00:29.291
This is an example object
that we're creating here.

7
00:00:29.291 --> 00:00:33.627
So let's talk about what context is and
what context solves.

8
00:00:33.627 --> 00:00:36.767
And we go over this a decent amount
in the complete intro to react.

9
00:00:36.767 --> 00:00:41.508
So if you want more intro to context,
there's a good section on that there.

10
00:00:41.508 --> 00:00:49.799
But there is a kinda problem in react
because data flows very explicit in react.

11
00:00:49.799 --> 00:00:54.224
You have a component that lives
in the top component like your

12
00:00:54.224 --> 00:00:57.186
app.js overall arching application.

13
00:00:57.186 --> 00:01:02.133
But you'll have components five
layers down that you need to read.

14
00:01:02.133 --> 00:01:04.486
Then from that component, right?

15
00:01:04.486 --> 00:01:06.238
So say for example, here and

16
00:01:06.238 --> 00:01:09.381
this component has something
here at first level.

17
00:01:09.381 --> 00:01:13.635
And I needed to read it from down here.

18
00:01:13.635 --> 00:01:16.004
In this particular level, right?

19
00:01:16.004 --> 00:01:20.593
If this was if I was not using context,
I'd have to pass that piece of data parent

20
00:01:20.593 --> 00:01:24.377
to child parent to child parent
to child all the way down, right?

21
00:01:24.377 --> 00:01:31.667
So you can see here I have my level,
one component here.

22
00:01:31.667 --> 00:01:34.491
Which is like the context component,
right?

23
00:01:34.491 --> 00:01:39.186
That then renders a level two here, right?

24
00:01:39.186 --> 00:01:43.018
Then renders a level three,
that renders a level four,

25
00:01:43.018 --> 00:01:45.476
that renders a level five, right?

26
00:01:45.476 --> 00:01:53.153
If I wanted to pass the user
state down here to level two.

27
00:01:53.153 --> 00:02:00.540
I'd have to do this bit by bit by
saying user state equals user state.

28
00:02:00.540 --> 00:02:03.860
It and then I'd have to do this on
every single one of them right?

29
00:02:03.860 --> 00:02:05.205
I'd have to do it here.

30
00:02:07.225 --> 00:02:09.233
Then I'd have to do it here.

31
00:02:09.233 --> 00:02:12.757
And this will come in from props,
right props that user state.

32
00:02:15.988 --> 00:02:17.872
Again and so on and so forth.

33
00:02:17.872 --> 00:02:21.240
And I'd have to prop drill
that's the name of that problem.

34
00:02:21.240 --> 00:02:22.591
In the react community.

35
00:02:22.591 --> 00:02:26.002
And we used to have to have to
do this all the time, right?

36
00:02:26.002 --> 00:02:30.535
So this component like level two and level
three, they don't care at all about user

37
00:02:30.535 --> 00:02:34.772
state cuz they're not reading reading
from it, they're not rendering it.

38
00:02:34.772 --> 00:02:40.554
All they're doing is they're just passing
it from the parent to the child blindly.

39
00:02:40.554 --> 00:02:41.689
This is a problem on several levels.

40
00:02:41.689 --> 00:02:45.377
One, it just makes your code more
complicated than it needs to be, right.

41
00:02:45.377 --> 00:02:48.716
And then the other thing is like if I
go to test level two or level three.

42
00:02:48.716 --> 00:02:52.757
I have to like pass in these arbitrary
things because it expects them even though

43
00:02:52.757 --> 00:02:53.915
it's not using them.

44
00:02:53.915 --> 00:02:56.606
Or maybe like level three
was like more reusable and.

45
00:02:56.606 --> 00:02:59.417
But it doesn't always
need that user state.

46
00:02:59.417 --> 00:03:02.240
I still have to would have to pass
in that user state because they're

47
00:03:02.240 --> 00:03:03.088
expected, right?

48
00:03:04.771 --> 00:03:10.127
So enter context.

49
00:03:10.127 --> 00:03:12.655
You can think of context as
basically like a wormhole

50
00:03:12.655 --> 00:03:15.596
in your application that you can
like dump stuff in one side.

51
00:03:15.596 --> 00:03:17.852
And it's gonna come out
the other side right?

52
00:03:17.852 --> 00:03:22.344
So here in this user context provider,
I'm dumping in the value of user state,

53
00:03:22.344 --> 00:03:24.503
which is this hook from here, right.

54
00:03:24.503 --> 00:03:26.627
It does not have to be a hook, right.

55
00:03:26.627 --> 00:03:27.876
It could be anything, right.

56
00:03:27.876 --> 00:03:32.189
It can be a string, it can be an object,
it can be anything, right.

57
00:03:32.189 --> 00:03:36.392
I'm just using the hook here
because it's convenient, right.

58
00:03:36.392 --> 00:03:39.798
And then here down at
the bottom inside of this,

59
00:03:39.798 --> 00:03:44.152
I'm using the US context here
to pull out that hook, right?

60
00:03:44.152 --> 00:03:46.650
So I have something I'm creating here,
level one.

61
00:03:46.650 --> 00:03:49.846
And then I'm reading it
down here at level five.

62
00:03:49.846 --> 00:03:52.549
That's what context does for you.

63
00:03:52.549 --> 00:03:57.379
So I'm gonna now that I've taught you this
like magic way to circumvent the one way

64
00:03:57.379 --> 00:04:00.392
data flow of react,
please use it very sparingly.

65
00:04:00.392 --> 00:04:03.383
Because now I have this very
I haven't have level five and

66
00:04:03.383 --> 00:04:05.512
level one that are kinda tied together.

67
00:04:05.512 --> 00:04:08.525
But it's not explicit, right?

68
00:04:08.525 --> 00:04:09.746
It's hard to reason about that.

69
00:04:09.746 --> 00:04:12.581
If I'm reading my code, especially
like if I'm hearing like level four or

70
00:04:12.581 --> 00:04:13.125
level three.

71
00:04:13.125 --> 00:04:16.629
I'm like wondering how
the hell does it get?

72
00:04:16.629 --> 00:04:19.670
Does this child component get
access to that information, right?

73
00:04:19.670 --> 00:04:23.749
Because but typically with react
you'd see that prop drilling.

74
00:04:23.749 --> 00:04:26.953
So I'm kinda talking out of
both sides of my mouth here of

75
00:04:26.953 --> 00:04:31.265
like hey here's this really cool way
of doing it never do it that way right.

76
00:04:31.265 --> 00:04:34.546
To me what's important here.

77
00:04:34.546 --> 00:04:37.111
And the reason why I chose
like a user here is you want.

78
00:04:37.111 --> 00:04:40.349
Things that go into context
be application level state.

79
00:04:40.349 --> 00:04:43.010
And when I say application level state,
things like users, right?

80
00:04:43.010 --> 00:04:46.605
So if I'm logged into my user account,
I have to read and

81
00:04:46.605 --> 00:04:50.290
write to that user account
from all over my application.

82
00:04:50.290 --> 00:04:56.684
So the example that I used in the intro
is like your Netflix user account.

83
00:04:56.684 --> 00:05:00.057
I have to be able to set my settings
which reads from the user account,

84
00:05:00.057 --> 00:05:02.509
I have to be able to see
my streaming preferences.

85
00:05:02.509 --> 00:05:05.568
Which comes from the user account
have to be able to upgrade my plan or

86
00:05:05.568 --> 00:05:07.242
downgrade my plan or cancel my plan.

87
00:05:07.242 --> 00:05:08.950
All those things read
from the user accounts.

88
00:05:08.950 --> 00:05:11.215
So that is universal application state.

89
00:05:11.215 --> 00:05:14.326
The user makes sense to my
entire application soon.

90
00:05:14.326 --> 00:05:18.379
That is a wonderful candidate for
something to put into context.

91
00:05:18.379 --> 00:05:20.747
But I don't know a counter or something,

92
00:05:20.747 --> 00:05:23.668
you're just lazing you
don't wanna pass around.

93
00:05:23.668 --> 00:05:29.691
That's not a great candidate
to put into context.

94
00:05:29.691 --> 00:05:34.986
Okay and then the last thing I was gonna
show you here is because I'm using a hook.

95
00:05:34.986 --> 00:05:37.716
You can update it from level
five down here right so

96
00:05:37.716 --> 00:05:39.671
I have a button here that if I click.

97
00:05:39.671 --> 00:05:44.891
Notice here that I can increment it down
here, this number is incrementing here.

98
00:05:44.891 --> 00:05:49.339
Despite the fact that that's still
state is being stored up here.

99
00:05:49.339 --> 00:05:50.510
In level one, right.

100
00:05:50.510 --> 00:05:55.307
Despite the fact that the it's being
called down here in level five.

101
00:05:55.307 --> 00:06:00.201
So you can do things that where
you can actually update the parent

102
00:06:00.201 --> 00:06:02.384
as well from the child held.

103
00:06:02.384 --> 00:06:06.719
But again, it's a very implicit
relationship that those

104
00:06:06.719 --> 00:06:10.535
things have their implicit
code is the worst code.

105
00:06:10.535 --> 00:06:13.318
Because it just makes it
hard to follow and debug.

106
00:06:13.318 --> 00:06:17.844
If there was a bug here on James
the Jameson the it was like skipping to be

107
00:06:17.844 --> 00:06:20.086
every two or something like that.

108
00:06:20.086 --> 00:06:22.019
It's kinda hard to reason about it.

109
00:06:22.019 --> 00:06:24.758
At that point, what's going wrong.

110
00:06:24.758 --> 00:06:27.558
Because we have this context,
worm hole in the middle of it.

111
00:06:27.558 --> 00:06:30.344
And we don't know which
side has the problem.

112
00:06:30.344 --> 00:06:32.930
It just makes it harder to debug.

113
00:06:36.794 --> 00:06:42.341
As you can tell, I basically like my
entire theory around programming.

114
00:06:42.341 --> 00:06:44.339
Because I know I'm gonna
make a lot of mistakes.

115
00:06:44.339 --> 00:06:47.028
How can I recover from
those mistakes the fastest?

116
00:06:49.761 --> 00:06:51.885
Yeah, that's sad.

117
00:06:51.885 --> 00:07:00.210
[LAUGH] Anyway, anyone have any
questions about context or use context?

118
00:07:00.210 --> 00:07:02.489
I guess I didn't really
touch on the hook very much.

119
00:07:02.489 --> 00:07:05.723
If it's the use context hook is
like one of the nicest to use.

120
00:07:05.723 --> 00:07:09.900
All you have to do is give it the context,
which is this create context thing here.

121
00:07:09.900 --> 00:07:12.237
And then you can just pull
things out of context.

122
00:07:13.770 --> 00:07:15.042
Pull things out of context.

123
00:07:15.042 --> 00:07:16.420
Nice, anyway.

124
00:07:16.420 --> 00:07:17.600
Yes.

125
00:07:17.600 --> 00:07:20.870
&gt;&gt; How do you avoid the urge
to not use context everywhere?

126
00:07:20.870 --> 00:07:25.237
Experience I think is
the answer to that question.

127
00:07:25.237 --> 00:07:29.502
I've had enough problems of where is
this coming from also I used to use

128
00:07:29.502 --> 00:07:32.631
the old react context API
which was a mess, right?

129
00:07:32.631 --> 00:07:37.194
So I think that react context just
sends chills down my spine so

130
00:07:37.194 --> 00:07:38.873
that helps a lot to me.

131
00:07:42.187 --> 00:07:45.551
I don't use it everywhere because
most things are not application level

132
00:07:45.551 --> 00:07:46.387
states, right?

133
00:07:46.387 --> 00:07:48.635
Most things are like view state, right?

134
00:07:48.635 --> 00:07:50.470
Sure, am I in dark mode or
light mode, actually,

135
00:07:50.470 --> 00:07:52.458
that would be a good candidate but
in context as well.

136
00:07:52.458 --> 00:07:53.889
Because that would apply your entire app.

137
00:07:53.889 --> 00:07:57.725
The like is this button on or off right.

138
00:07:57.725 --> 00:07:59.646
That's definitely like view level state.

139
00:07:59.646 --> 00:08:04.153
Most things in your application you're
gonna end up being view level state.

140
00:08:04.153 --> 00:08:08.485
If a user is filling out a form right
I don't need to store that in the for

141
00:08:08.485 --> 00:08:12.025
the entire application to read
from it just stays there.

142
00:08:12.025 --> 00:08:16.427
So, yeah I recognize that as soon as
I introduce context I'm introducing

143
00:08:16.427 --> 00:08:19.415
something that can be
really hard to debug later.

144
00:08:19.415 --> 00:08:22.513
And that keeps me from
putting everything in there.

145
00:08:22.513 --> 00:08:25.853
&gt;&gt; Can use context be scoped
if I create a context and

146
00:08:25.853 --> 00:08:31.085
a component is available to the whole
app or only in the component children.

147
00:08:31.085 --> 00:08:32.539
&gt;&gt; Good question.

148
00:08:34.715 --> 00:08:37.452
Which I didn't actually
cover super well here.

149
00:08:37.452 --> 00:08:38.690
So create context here.

150
00:08:38.690 --> 00:08:40.832
This gives you like this
user context object.

151
00:08:40.832 --> 00:08:44.400
There's two things that come on this.

152
00:08:44.400 --> 00:08:46.081
One of them is the provider.

153
00:08:46.081 --> 00:08:49.990
So you can see here I'm wrapping this
entire component in the user context

154
00:08:49.990 --> 00:08:50.628
provider.

155
00:08:50.628 --> 00:08:54.849
Everything inside of this provider
can then access that context.

156
00:08:54.849 --> 00:09:00.090
Nothing outside of that context, can
access the data inside of that context.

157
00:09:00.090 --> 00:09:03.626
So you actually you are actually
scoping it to that part of the app.

158
00:09:03.626 --> 00:09:11.008
I can actually have two separate,
context components here.

159
00:09:11.008 --> 00:09:13.703
That have different contexts right.

160
00:09:13.703 --> 00:09:16.474
You can also nest it right so
I can actually put it.

161
00:09:16.474 --> 00:09:20.303
Another provider here in fact
let's just do it it might be fun.

162
00:09:20.303 --> 00:09:24.221
User context provider and

163
00:09:24.221 --> 00:09:28.675
value equals use state I guess

164
00:09:28.675 --> 00:09:33.668
I need the whole object don't I.

165
00:10:03.105 --> 00:10:06.295
User context provider, that one.

166
00:10:15.843 --> 00:10:20.055
So you can see here now it's actually
reading from the closer one here

167
00:10:20.055 --> 00:10:22.607
Sam Sanderson instead of James Jamison.

168
00:10:23.887 --> 00:10:26.144
Because this one's closer to it right.

169
00:10:26.144 --> 00:10:28.495
So you can actually have like sub scopes.

170
00:10:28.495 --> 00:10:32.649
So I really don't want you to do this
because this would be even like we're

171
00:10:32.649 --> 00:10:35.142
talking about making things hard to debug.

172
00:10:35.142 --> 00:10:38.857
You could definitely see a situation
where like I found where the context is

173
00:10:38.857 --> 00:10:39.552
coming from.

174
00:10:39.552 --> 00:10:43.043
And then you don't realize that there's
a context in between the two of them.

175
00:10:43.043 --> 00:10:45.703
I don't really know when you would
have a good reason to do this, but

176
00:10:45.703 --> 00:10:47.444
I'm just letting you know it's possible.

177
00:10:51.610 --> 00:10:52.930
But please don't.

178
00:10:52.930 --> 00:10:55.547
Don't make me regret showing you that.

179
00:10:55.547 --> 00:11:00.124
If you really like Redux but you don't
wanna pull in the whole Redux library.

180
00:11:00.124 --> 00:11:02.099
And we'll talk about Redux later.

181
00:11:02.099 --> 00:11:07.219
If you use the two hooks together,
use context and use reducer.

182
00:11:07.219 --> 00:11:10.398
You kinda get like most of what Redux is.

183
00:11:10.398 --> 00:11:11.369
Fun fact.

184
00:11:11.369 --> 00:11:16.257
&gt;&gt; How do you usually handle more than one

185
00:11:16.257 --> 00:11:21.612
different types of objects in a context?

186
00:11:21.612 --> 00:11:25.221
&gt;&gt; How do you handle more than one
type of object inside of context?

187
00:11:25.221 --> 00:11:26.888
You just put make it an object, right?

188
00:11:26.888 --> 00:11:30.416
So you can see here,
I have this object here which is a user.

189
00:11:30.416 --> 00:11:33.801
If I had,
well there's two ways of going about this.

190
00:11:33.801 --> 00:11:35.722
You can either have two
different contexts, right?

191
00:11:35.722 --> 00:11:40.981
So I could create a user context and
a preferences context, right?

192
00:11:40.981 --> 00:11:45.407
Or I could have one talk context
where I have A top level.

193
00:11:45.407 --> 00:11:49.462
I have an object and inside of the object
there is the preferences part of it.

194
00:11:49.462 --> 00:11:51.896
And there is the user part of it, right?

195
00:11:51.896 --> 00:11:55.453
Basically treating it like
a Redux store at that point.

196
00:11:55.453 --> 00:11:57.758
And you might be asked me
which one is preferable and

197
00:11:57.758 --> 00:12:01.196
I'm gonna say that's super contextual
to what you're doing unintended.

198
00:12:01.196 --> 00:12:07.617
[LAUGH] There's not a right or
wrong answer there.

199
00:12:07.617 --> 00:12:09.160
You can make cases for both of them.

200
00:12:09.160 --> 00:12:14.621
And I don't think that I have
strong feelings either way.

201
00:12:14.621 --> 00:12:17.193
It would be annoying if I
looked at an application and

202
00:12:17.193 --> 00:12:20.472
there was like 19 of these contexts
providers wrapping things.

203
00:12:20.472 --> 00:12:24.048
So there's definitely a layer
of too little granularity.

204
00:12:24.048 --> 00:12:27.565
But if you have two things that
are totally unalike in the same context

205
00:12:27.565 --> 00:12:30.122
I also take a little bit
of offense at that as well.

206
00:12:30.122 --> 00:12:35.264
So somewhere in the middle
I guess is my answer.

