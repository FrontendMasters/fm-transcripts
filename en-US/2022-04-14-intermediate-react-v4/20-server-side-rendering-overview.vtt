WEBVTT

1
00:00:00.660 --> 00:00:04.050
We're moving on to server side rendering.

2
00:00:05.630 --> 00:00:09.086
So this is the only point we're gonna
be writing a little bit of Node.js,

3
00:00:09.086 --> 00:00:12.450
specifically we're gonna be writing
a server side component to this.

4
00:00:13.620 --> 00:00:18.217
It'd be helpful if you knew a little
bit of Node.js, not required.

5
00:00:18.217 --> 00:00:21.700
Node.js will not be the emphasis
of what's going on here.

6
00:00:21.700 --> 00:00:24.990
If you need Node.js,
I like brushing up on that.

7
00:00:24.990 --> 00:00:28.450
Frontend Masters has a plentiful
library of great Node content.

8
00:00:29.980 --> 00:00:32.192
Again, I really liked
Scott Moss's courses.

9
00:00:34.259 --> 00:00:36.751
I just like Scott, he's a good guy.

10
00:00:36.751 --> 00:00:40.491
Except if he beats me at Apex Legends,
then he's a jerk.

11
00:00:40.491 --> 00:00:44.450
Okay, so we're done with
the code splitting part of this,

12
00:00:44.450 --> 00:00:47.150
we're gonna restart our application.

13
00:00:47.150 --> 00:00:49.360
So go ahead and do that again.

14
00:00:50.800 --> 00:00:55.846
Basically, we're gonna cp- R this,
so I'm just gonna cp -R

15
00:00:55.846 --> 00:01:01.860
this 12-portals-and-refs, and
I'm gonna make another copy of it.

16
00:01:01.860 --> 00:01:04.380
And this one we'll just call ssr or
something like that.

17
00:01:05.750 --> 00:01:09.665
So go into your project,
you're gonna run npm install.

18
00:01:13.539 --> 00:01:14.887
It'll take a second.

19
00:01:20.260 --> 00:01:23.944
People like to ask me where do
I get this thing for my prompt.

20
00:01:23.944 --> 00:01:27.993
This is called Spaceship, so
if you just Google Spaceship prompt,

21
00:01:27.993 --> 00:01:30.061
it'll tell you how to set that up.

22
00:01:33.227 --> 00:01:39.372
Okay, so
I'm gonna open this in my code editor.

23
00:01:39.372 --> 00:01:44.017
And now you can see again,
none of my code splitting

24
00:01:44.017 --> 00:01:48.241
stuff is in here, or
moment, then thank God.

25
00:01:52.392 --> 00:01:59.271
Okay, so let's talk about what
server side rendering is,

26
00:01:59.271 --> 00:02:05.060
why you'd wanna do it,
all those kind of things.

27
00:02:05.060 --> 00:02:08.970
So performance in general is kind of
a front and center sort of concern for

28
00:02:08.970 --> 00:02:10.520
us as frontend developers.

29
00:02:12.360 --> 00:02:16.259
In particular, I'm gonna say more so
than other disciplines of engineering,

30
00:02:16.259 --> 00:02:18.248
and I've been across the entire stack.

31
00:02:18.248 --> 00:02:21.364
I've been in all the way from DevOps and
SRE,

32
00:02:21.364 --> 00:02:25.430
all the way to being
basically a design engineer.

33
00:02:25.430 --> 00:02:28.140
And now I'm a PM, so
I've been all over that stack, right?

34
00:02:30.360 --> 00:02:33.880
Frontend engineering has a peculiar
kind of performance engineering.

35
00:02:33.880 --> 00:02:37.310
Well, we're doing a ton with
human psychology, right?

36
00:02:37.310 --> 00:02:41.884
There's actual performance, which is like
how fast can your Kubernetes cluster munge

37
00:02:41.884 --> 00:02:44.120
and spit back out those requests, right?

38
00:02:44.120 --> 00:02:45.707
That's one kind of performance.

39
00:02:45.707 --> 00:02:47.894
But there's another kind of performance,

40
00:02:47.894 --> 00:02:51.804
of how fast can a human comprehend what
you're trying to communicate to them.

41
00:02:51.804 --> 00:02:54.631
One of the ways that we can do
that is server side render.

42
00:02:54.631 --> 00:02:59.442
We can basically render out our React app
preemptively and send that to the user, so

43
00:02:59.442 --> 00:03:01.726
that immediately they see something.

44
00:03:01.726 --> 00:03:05.770
And there's a lot of research that's gone
into that the human will see something,

45
00:03:05.770 --> 00:03:08.484
comprehend it,
make a decision what they wanna do, and

46
00:03:08.484 --> 00:03:10.075
then they'll go to click on it.

47
00:03:10.075 --> 00:03:14.835
And in general, we can be fast enough as
frontend engineers to show them something,

48
00:03:14.835 --> 00:03:16.990
then they're gonna make a decision.

49
00:03:16.990 --> 00:03:20.090
And by the time they get to
clicking on it, we can catch up and

50
00:03:20.090 --> 00:03:21.950
make our app interactive, right?

51
00:03:23.320 --> 00:03:26.180
A big part of that is
server side rendering.

52
00:03:26.180 --> 00:03:28.620
Now this is helpful for
a couple of reasons.

53
00:03:28.620 --> 00:03:31.858
One is just because I have
a brand new iPhone, right?

54
00:03:31.858 --> 00:03:35.392
And so my iPhone is pretty fast
at rendering out webpages, right?

55
00:03:35.392 --> 00:03:39.770
But if you're on a legacy Android device,
or even just old iPhones, right?

56
00:03:39.770 --> 00:03:46.209
That process can be really
slow on a low end 2G device.

57
00:03:46.209 --> 00:03:48.205
I kind of alluded to the other
thing that's important.

58
00:03:48.205 --> 00:03:52.275
We talked about code splitting, which
is able to split your packages across

59
00:03:52.275 --> 00:03:56.170
the wire there, so that you can load
things kind of more progressively.

60
00:03:56.170 --> 00:04:00.816
But with server side rendering, we're
able to sometimes load things in smaller

61
00:04:00.816 --> 00:04:03.702
packets upfront so
people can see things sooner.

62
00:04:03.702 --> 00:04:08.186
Then we load the big JavaScript
payload and then things happen, right?

63
00:04:08.186 --> 00:04:13.289
By making that critical path
of time to first meaningful

64
00:04:13.289 --> 00:04:20.357
render as short as possible, then we
can get perceived higher performance.

65
00:04:20.357 --> 00:04:21.902
Cuz web performance is great, but

66
00:04:21.902 --> 00:04:25.269
the thing that actually matters is what
the hell does a user think, right?

67
00:04:25.269 --> 00:04:28.960
We can have the time to
first paint be zero, but

68
00:04:28.960 --> 00:04:33.135
if your first paint is loading,
who cares, right?

69
00:04:33.135 --> 00:04:38.101
It doesn't matter unless your user
is actually getting meaningful

70
00:04:38.101 --> 00:04:40.150
things in front of them.

71
00:04:40.150 --> 00:04:43.700
I used to give a performance talk.

72
00:04:43.700 --> 00:04:48.470
And one of the things that I made people
do in the middle of this talk is I

73
00:04:48.470 --> 00:04:50.211
loaded linkedin.com.

74
00:04:50.211 --> 00:04:53.981
At the time I worked at LinkedIn,
so I was kind of self-shaming.

75
00:04:53.981 --> 00:04:58.807
And I made them watch it on a 2G
network on a low-end device,

76
00:04:58.807 --> 00:05:00.710
it takes over a minute.

77
00:05:00.710 --> 00:05:03.636
And I made everyone put their phones away,
I made everyone be super quiet and

78
00:05:03.636 --> 00:05:04.653
just stare at the screen.

79
00:05:04.653 --> 00:05:08.939
As like, I want you to feel
this pain in your heart, right?

80
00:05:08.939 --> 00:05:12.401
And I made people, and I actually
got in trouble, I worked there, and

81
00:05:12.401 --> 00:05:13.647
it was totally worth it.

82
00:05:13.647 --> 00:05:18.465
But that's what we're doing here with
server side rendering is we're kind of

83
00:05:18.465 --> 00:05:22.418
trying to fit our app the best
way to human psychology possible.

84
00:05:22.418 --> 00:05:24.898
And I will say that server side rendering
won't always solve this for you.

85
00:05:24.898 --> 00:05:29.474
Sometimes it can make things worse, so
that's why measuring is important, right?

86
00:05:29.474 --> 00:05:33.733
Time to paint, time to first meaningful
paint, time to first bit, these are all

87
00:05:33.733 --> 00:05:38.011
kind of brushstrokes on a canvas of what
the performance of your application is.

88
00:05:38.011 --> 00:05:41.349
You have to take a look
at it holistically, okay,

89
00:05:41.349 --> 00:05:46.280
that's kind of like a overall spiel and
just web performance in general.

