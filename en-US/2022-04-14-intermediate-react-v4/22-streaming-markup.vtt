WEBVTT

1
00:00:00.760 --> 00:00:04.260
So we're gonna do a little bit more to do
that we're gonna do to make this even more

2
00:00:04.260 --> 00:00:04.883
performant.

3
00:00:04.883 --> 00:00:06.430
But any questions so far?

4
00:00:06.430 --> 00:00:08.424
This is like the Hello World
of server side rendering.

5
00:00:11.903 --> 00:00:12.767
Yeah.

6
00:00:12.767 --> 00:00:15.952
&gt;&gt; Got a question, but
I just right now spent the last week and

7
00:00:15.952 --> 00:00:19.602
a half figuring out how to make some
of our parts of our site do this.

8
00:00:19.602 --> 00:00:23.510
To fix the user experience,
I appreciate seeing this.

9
00:00:23.510 --> 00:00:27.329
Like icons slowly lagging,
like loading in that was just jarring to

10
00:00:27.329 --> 00:00:29.942
the user as opposed to
just showing it off, and

11
00:00:29.942 --> 00:00:32.632
slightly delaying when
they could click on it.

12
00:00:32.632 --> 00:00:38.350
&gt;&gt; Yep, It's really frustrating for
a user to see something trying to interact

13
00:00:38.350 --> 00:00:41.195
with it, and not have it be interactive,
cuz then they think it's broken.

14
00:00:41.195 --> 00:00:45.320
&gt;&gt; Yeah, or I think it's also when it
moves out of the way all sudden, like you

15
00:00:45.320 --> 00:00:50.603
go to Click and then the ad comes in and-
&gt;&gt; Like as a good reason, flare,

16
00:00:50.603 --> 00:00:55.895
or flash of unstyled text, or
flash of unstyled content, right?

17
00:00:55.895 --> 00:00:58.970
All sorts of reasons for
why that can happen.

18
00:00:58.970 --> 00:01:02.577
But yeah, if you're taking enough time
there that a user can see something,

19
00:01:02.577 --> 00:01:04.130
make a decision and try and do it,

20
00:01:04.130 --> 00:01:06.928
they're either gonna think
that they're doing it wrong.

21
00:01:06.928 --> 00:01:08.488
Or they're thinking I think,

22
00:01:08.488 --> 00:01:11.670
that you suck which is the more
correct thing to think, right?

23
00:01:11.670 --> 00:01:14.376
You might ask me what happens, Brian,

24
00:01:14.376 --> 00:01:18.320
if I go to slash something
like a non-valid thing right?

25
00:01:21.980 --> 00:01:26.238
Right now it's just gonna be a giant
error, and it's not gonna work.

26
00:01:26.238 --> 00:01:30.349
Now you can make React handle this,
you can make React Router, deal with hey,

27
00:01:30.349 --> 00:01:34.731
404, didn't find this, I'll redirect
you to the homepage, you can do that.

28
00:01:34.731 --> 00:01:38.973
And you can see how to do that in the
React Router docs if you want to do that.

29
00:01:38.973 --> 00:01:43.881
Here is the big problem with how to do at
the moment with React Router version 6.

30
00:01:43.881 --> 00:01:46.702
That was not a problem
with React version 5.

31
00:01:46.702 --> 00:01:50.530
StaticRouter used to let you pass in
a context object that allows you to then

32
00:01:50.530 --> 00:01:51.518
read afterwards.

33
00:01:51.518 --> 00:01:53.585
Hey, how'd the rendering go, right?

34
00:01:53.585 --> 00:01:57.812
So you can then ask yourself okay, cool.

35
00:01:57.812 --> 00:02:00.040
Did I 404, did I 500?

36
00:02:00.040 --> 00:02:06.596
And then here you could have said
res.status, 500 if it went wrong.

37
00:02:06.596 --> 00:02:09.940
This is a positive thing
because if you tell Google hey,

38
00:02:09.940 --> 00:02:14.577
200, Google's like cool,
I'm gonna update your SEO for this, right?

39
00:02:14.577 --> 00:02:18.947
So if you're on a serious website,
you do have to care about that.

40
00:02:18.947 --> 00:02:20.990
Or 400 or 300 or
something like that, right?

41
00:02:20.990 --> 00:02:22.404
If you do a redirect.

42
00:02:22.404 --> 00:02:27.386
Right now, the way that we have this
right now, it's gonna 200 on everything.

43
00:02:27.386 --> 00:02:32.550
So you're always telling Google,
please update my SEO right now.

44
00:02:32.550 --> 00:02:35.196
This is still possible to do
with React Router version 6,

45
00:02:35.196 --> 00:02:38.333
I dropped the link in there if you
wanna go in and actually dig into it.

46
00:02:38.333 --> 00:02:42.266
It's pretty involved now and
it used to be really easy, and

47
00:02:42.266 --> 00:02:45.580
now it's hard,
I'm a little peeved about that.

48
00:02:45.580 --> 00:02:50.409
Cuz I don't like it when you
take something away from

49
00:02:50.409 --> 00:02:53.713
a user that was really nice to have.

50
00:02:55.063 --> 00:02:58.573
Basically their reasoning is hey,
we made Remix, you should use Remix.

51
00:02:59.701 --> 00:03:01.075
That's on them.

52
00:03:01.075 --> 00:03:05.013
Remix is very cool to be fair, but, okay,

53
00:03:09.187 --> 00:03:12.530
So we just did server side rendering -1,
which is like the Hello World.

54
00:03:12.530 --> 00:03:15.460
We're gonna take this a step further and

55
00:03:15.460 --> 00:03:19.948
we're gonna do streaming now,
which is a little bit cooler.

56
00:03:19.948 --> 00:03:22.847
We're all about cool code here.

57
00:03:22.847 --> 00:03:24.481
We do stuff because it is cool.

58
00:03:24.481 --> 00:03:28.563
[LAUGH] That's funny that's literally
my first line of my notes here.

59
00:03:28.563 --> 00:03:30.144
I'm not joking, I'm such a nerd.

60
00:03:30.144 --> 00:03:37.620
[LAUGH] I just need to
prove my point to you.

61
00:03:37.620 --> 00:03:40.445
I'm just a damn broken record.

62
00:03:40.445 --> 00:03:43.555
Anyway, let's make it cool.

63
00:03:43.555 --> 00:03:48.496
So what we're gonna do,
go back to your code here.

64
00:03:48.496 --> 00:03:52.584
So instead of doing render to string,

65
00:03:52.584 --> 00:03:56.811
we're gonna do render to node stream.

66
00:03:56.811 --> 00:04:03.218
A stream is a data type inside of inside
of node, that this is what it sounds like.

67
00:04:03.218 --> 00:04:07.198
It's kind of like a bash stream or
like a command line stream,

68
00:04:07.198 --> 00:04:10.120
where data progressively arrives, right?

69
00:04:10.120 --> 00:04:14.132
As opposed to render to string
just like it does everything and

70
00:04:14.132 --> 00:04:16.920
then spits out the entire
thing at the end.

71
00:04:16.920 --> 00:04:21.971
Node stream is going to progressively
give you pieces as it renders it.

72
00:04:21.971 --> 00:04:25.172
With the advent of HTTP version 2,
we can stream mark-up to the users.

73
00:04:25.172 --> 00:04:28.521
So we can have long live connections
like here's a little bit more,

74
00:04:28.521 --> 00:04:31.240
here's a little bit more,
here's a little bit more.

75
00:04:31.240 --> 00:04:33.118
Okay, I'm done right?

76
00:04:33.118 --> 00:04:38.690
As opposed to HTTP 1.1 was just like,
here's everything all at once.

77
00:04:38.690 --> 00:04:42.376
Now if we had a giant application, for
example, something like LinkedIn or

78
00:04:42.376 --> 00:04:44.516
Facebook, this is a massive deal, right?

79
00:04:44.516 --> 00:04:45.707
Because there's so
many things coming down.

80
00:04:45.707 --> 00:04:50.580
We're sending down literally probably 50
kilobytes of just straight up HTML, right?

81
00:04:50.580 --> 00:04:52.169
This makes a big difference.

82
00:04:52.169 --> 00:04:55.746
For application it might even be slower,
so

83
00:04:55.746 --> 00:04:59.430
this is probably a bad idea,
but it's fine.

84
00:04:59.430 --> 00:05:03.870
So we're gonna modify I think pretty
much just this part right here, so

85
00:05:03.870 --> 00:05:10.335
you can probably just, Delete at least
this part down here at the bottom.

86
00:05:10.335 --> 00:05:15.032
The first thing we're gonna
do here at the top is

87
00:05:15.032 --> 00:05:19.860
we're gonna say res.write(parts[0]).

88
00:05:23.487 --> 00:05:24.518
So why?

89
00:05:24.518 --> 00:05:26.834
Why are we doing this immediately?

90
00:05:26.834 --> 00:05:28.307
Well, one,
we already know what it is, right?

91
00:05:28.307 --> 00:05:31.532
If you look at our index.html, in fact,

92
00:05:31.532 --> 00:05:35.598
now we have a built version,
so let's look at that.

93
00:05:35.598 --> 00:05:39.876
dist, front end index.HTML,
up into not rendered.

94
00:05:39.876 --> 00:05:42.430
This part we already know all of this,
right?

95
00:05:42.430 --> 00:05:45.677
This never changes,
we can just send them this immediately.

96
00:05:45.677 --> 00:05:47.510
Why this is actually critical and

97
00:05:47.510 --> 00:05:50.336
a big part of the web
performance is what is in here?

98
00:05:50.336 --> 00:05:54.575
The stylesheet just lets the browser
go ahead and get started and

99
00:05:54.575 --> 00:05:59.854
loading all the CSS while we're still
figuring out the rest of the node markup.

100
00:05:59.854 --> 00:06:02.970
So this actually can be a pretty
big win performance wise

101
00:06:02.970 --> 00:06:06.032
because the user immediately
starts getting the CSS.

102
00:06:06.032 --> 00:06:08.256
So we're kind of multitasking now,

103
00:06:08.256 --> 00:06:11.635
as opposed to them getting all
of the market all at once.

104
00:06:11.635 --> 00:06:16.130
The browser then starts parsing,
hits the CSS, it's not paying attention to

105
00:06:16.130 --> 00:06:19.756
the rest of the DOM at all until
it finishes parsing all of this.

106
00:06:19.756 --> 00:06:24.160
It finishes downloading and then parsing
all the CSS, and then it continues, right?

107
00:06:24.160 --> 00:06:28.169
Unless you're doing something like preload
or prefetch or something like that, but

108
00:06:28.169 --> 00:06:31.899
suffice to say that can be kind of slow,
particularly on like a low end device and

109
00:06:31.899 --> 00:06:33.027
if you have a lot of CSS.

110
00:06:34.690 --> 00:06:38.362
By doing this, we get to get them
started on that immediately,

111
00:06:38.362 --> 00:06:40.180
then we render all of our code.

112
00:06:42.590 --> 00:06:44.950
Okay, so we do that.

113
00:06:44.950 --> 00:06:48.835
Honestly, this might be the biggest
win of the entire thing with Velum.

114
00:06:48.835 --> 00:06:50.171
What am about to show you.

115
00:06:51.424 --> 00:06:55.903
Then I'm gonna say const stream =

116
00:06:55.903 --> 00:07:01.314
renderToNodeStream(reactMarkup).

117
00:07:01.314 --> 00:07:03.082
This is gonna kick off the node render and

118
00:07:03.082 --> 00:07:06.210
it's just gonna start spitting out
parts as soon as it's done with it.

119
00:07:10.181 --> 00:07:13.473
Okay, and
then I'm gonna say stream.pipe, so

120
00:07:13.473 --> 00:07:17.179
I'm going to connect that
stream to the user via this.

121
00:07:17.179 --> 00:07:21.121
Critically I have to tell it,
this is not the end.

122
00:07:21.121 --> 00:07:27.963
I got more stuff to do as soon as you're
done click to finish parts, right?

123
00:07:27.963 --> 00:07:29.715
So you just say end: false,

124
00:07:29.715 --> 00:07:34.025
otherwise as soon as it finishes
streaming this it's gonna say cool,

125
00:07:34.025 --> 00:07:38.795
he's done or she's done or they're done,
and then just finish the stream.

126
00:07:41.969 --> 00:07:47.078
Okay, then we're gonna say, stream.on and

127
00:07:47.078 --> 00:07:53.628
so as soon as they're done with
this render to node stream,

128
00:07:53.628 --> 00:07:58.999
finish it out there and
say, res.write(parts

129
00:07:58.999 --> 00:08:03.732
1 Write the last bit of it, for
example, if you remember correctly.

130
00:08:08.029 --> 00:08:11.416
Here in the index.html,
this is where the JavaScript is,

131
00:08:11.416 --> 00:08:13.190
it's after the not rendered.

132
00:08:13.190 --> 00:08:15.495
So very critical that you get that there.

133
00:08:19.413 --> 00:08:23.482
And then here I'm gonna say res.end just
to let the stream know we have finished

134
00:08:23.482 --> 00:08:26.533
the request, you can mark this
as a 200 and close it out.

135
00:08:29.678 --> 00:08:31.874
Well, I guess it would have
already been marked as a 200.

136
00:08:31.874 --> 00:08:36.999
But in any case, you can finish out
the request, you can close the connection.

137
00:08:36.999 --> 00:08:38.736
Now, in case you didn't know that,

138
00:08:38.736 --> 00:08:41.045
you actually never have
to end your connection.

139
00:08:42.265 --> 00:08:44.935
You can keep sending stuff
to users via HTTP push.

140
00:08:44.935 --> 00:08:49.848
In fact, there is a wonderful course on
Frontend Masters called the Complete Intro

141
00:08:49.848 --> 00:08:53.515
to Real Time taught by a very dashing and
attractive teacher.

142
00:08:55.145 --> 00:08:56.374
That I show you how to
do exactly just that.

143
00:08:59.094 --> 00:09:00.860
Seems like a cool guy,
I hear he's cool, anyway.

144
00:09:02.890 --> 00:09:04.982
Okay, so now this should work and

145
00:09:04.982 --> 00:09:09.781
this should be streaming markup instead
of just one big payload all at once.

146
00:09:15.429 --> 00:09:17.840
Critical here, make sure you stop and
start your server.

147
00:09:17.840 --> 00:09:20.310
In fact, I probably should
have mentioned that earlier.

148
00:09:20.310 --> 00:09:22.136
This is building your server
every single time and

149
00:09:22.136 --> 00:09:23.622
it's also building your application.

150
00:09:23.622 --> 00:09:27.181
So if you're making changes,
if I wanna do a console.log here,

151
00:09:32.567 --> 00:09:36.722
This won't happen until I stop and
start the server again.

152
00:09:38.892 --> 00:09:41.306
Again, this is what I told you, it's not
a great developer experience right now.

153
00:09:41.306 --> 00:09:45.658
It'll take a bit to get that working,
but you would use something

154
00:09:45.658 --> 00:09:50.184
like Node Daemon or Node demon or
Node demon, gotta catch them all.

155
00:09:53.043 --> 00:09:56.190
There's no official way to pronounce that,
by the way, in case you're wondering,

156
00:09:56.190 --> 00:09:57.780
it's however you choose to pronounce it.

157
00:09:59.180 --> 00:10:03.427
Okay, so now localhost 3000.

158
00:10:03.427 --> 00:10:06.789
We're not really gonna see a difference,
because it's all localhost and

159
00:10:06.789 --> 00:10:08.450
going super fast.

160
00:10:08.450 --> 00:10:13.630
But this has the potential be
a significant improvement in performance.

161
00:10:13.630 --> 00:10:17.352
Now, I'm going to implore you, with code
splitting, with render to string and

162
00:10:17.352 --> 00:10:19.049
render to node stream, measure it,

163
00:10:19.049 --> 00:10:22.420
make sure that it actually is
a better performance thing.

164
00:10:22.420 --> 00:10:26.408
I'm pretty sure that for
an app as small as Adopt Me is,

165
00:10:26.408 --> 00:10:30.420
I think it's probably a net negative,
just my guess.

166
00:10:32.170 --> 00:10:34.045
So you need a certain amount of heft,

167
00:10:34.045 --> 00:10:36.707
you need to have some
intelligence in terms of how and

168
00:10:36.707 --> 00:10:40.720
where you're splitting your application
for this to actually be effective.

169
00:10:40.720 --> 00:10:43.528
But for example, when I was at Netflix,
we did measure it and

170
00:10:43.528 --> 00:10:46.679
we made some pretty significant
gains in terms of signups, right?

171
00:10:46.679 --> 00:10:51.507
Because there's a ton of research out
there that the faster your web performance

172
00:10:51.507 --> 00:10:55.559
is, to a point, the better your
conversion rate's gonna be, so.

173
00:11:02.768 --> 00:11:07.797
All right, that is server-side rendering.

174
00:11:07.797 --> 00:11:09.799
Any questions?

175
00:11:09.799 --> 00:11:11.063
Yeah?

176
00:11:11.063 --> 00:11:17.410
&gt;&gt; The only question I have here so far
is, this is from about ten minutes ago.

177
00:11:17.410 --> 00:11:19.360
What if production is not Express?

178
00:11:20.950 --> 00:11:27.155
&gt;&gt; Okay, so I am showing you
everything in terms of Express.js,

179
00:11:27.155 --> 00:11:33.950
which is just a pretty thin server
side framework for Node.js.

180
00:11:33.950 --> 00:11:37.281
If you're coming from Ruby it's most
comparable to something like Sinatra,

181
00:11:37.281 --> 00:11:39.910
where it's just really meant to
be as bare bones as possible.

182
00:11:42.528 --> 00:11:47.251
It really looks just about the same,
because these req and res objects here,

183
00:11:47.251 --> 00:11:51.020
request and response,
these are not Express objects.

184
00:11:51.020 --> 00:11:56.279
These are actually directly
Node native objects.

185
00:11:56.279 --> 00:12:00.647
Which is to say something like Fastify,
something like Restify,

186
00:12:00.647 --> 00:12:02.678
they expose the same objects.

187
00:12:02.678 --> 00:12:07.423
You can even write this in terms of HTTP,
right?

188
00:12:07.423 --> 00:12:10.300
There's a import http from http,

189
00:12:10.300 --> 00:12:15.520
which is the direct HTTP
library from Node.js itself.

190
00:12:15.520 --> 00:12:17.490
Express does not do very much for you.

191
00:12:17.490 --> 00:12:20.514
The reason why I even include in in
the first place is I did not wanna write

192
00:12:20.514 --> 00:12:22.240
the Express static.

193
00:12:22.240 --> 00:12:26.214
This line right here is 30 lines of
code that I just didn't wanna write.

194
00:12:29.034 --> 00:12:30.830
Otherwise you could've just
done everything with HTTP.

195
00:12:33.120 --> 00:12:37.415
So I guess my point being here is,

196
00:12:39.745 --> 00:12:44.094
The exact syntax will vary from
framework to framework a little bit, but

197
00:12:44.094 --> 00:12:46.314
the concept here is always the same.

198
00:12:51.412 --> 00:12:52.961
Cool, okay, other questions?

199
00:12:55.450 --> 00:12:58.825
&gt;&gt; Is SSR better for securing API keys?

200
00:13:01.255 --> 00:13:07.018
&gt;&gt; Is server side rendering better for
securing API keys?

201
00:13:10.372 --> 00:13:14.439
No, I mean, for an API key,
the point of an API key is so

202
00:13:14.439 --> 00:13:17.280
you can make a request against an API.

203
00:13:19.450 --> 00:13:23.071
And if you're gonna do that in
the browser, no matter what,

204
00:13:23.071 --> 00:13:24.564
gotta send down the key.

205
00:13:24.564 --> 00:13:26.722
There's no way to kind of obfuscate that.

206
00:13:29.457 --> 00:13:33.200
You always have to have secure
API keys no matter what.

207
00:13:33.200 --> 00:13:34.890
So it's either gonna be
behind your own API.

208
00:13:34.890 --> 00:13:39.058
So for example, let's say I'm making
requests to the Google Maps API, right,

209
00:13:39.058 --> 00:13:40.480
which is not free anymore.

210
00:13:41.640 --> 00:13:45.076
I either have to hide it behind my own
API and hide my API key that way, or

211
00:13:45.076 --> 00:13:48.535
I have to send it to the user,
which is bad cuz they're gonna steal it.

212
00:13:48.535 --> 00:13:50.442
Someone's gonna steal it.

213
00:13:50.442 --> 00:13:53.145
So yeah, let's go with no bearing.

214
00:13:56.661 --> 00:13:57.520
Yeah.

215
00:13:57.520 --> 00:14:01.764
&gt;&gt; How would this process process
differ for a TypeScript code base?

216
00:14:05.725 --> 00:14:07.902
&gt;&gt; I mean relatively little,

217
00:14:07.902 --> 00:14:13.970
because we're already running our
entire server through a build process.

218
00:14:13.970 --> 00:14:18.030
Which is the challenge with TypeScript and
Node is you have to build your server.

219
00:14:18.030 --> 00:14:21.763
We did that,
we could literally just rewrite this as,

220
00:14:21.763 --> 00:14:24.740
hell let's try it, see what happens.

221
00:14:24.740 --> 00:14:27.940
Worse that happens is
that I embarrass myself.

222
00:14:27.940 --> 00:14:30.519
So it's gonna be upset by some types

223
00:14:33.868 --> 00:14:35.990
I think that's because it doesn't
know about that, that's fine.

224
00:14:40.232 --> 00:14:41.662
Cannot find name, anyway,

225
00:14:41.662 --> 00:14:45.786
obviously TypeScript is already gonna be
pretty upset by a bunch of these things.

226
00:14:53.181 --> 00:14:57.300
So anyway, you would have to go and
fix all these type errors.

227
00:14:57.300 --> 00:14:59.316
But once you have done that,
everything would work just fine.

228
00:14:59.316 --> 00:15:01.170
&gt;&gt; Tomcat won't work.

229
00:15:01.170 --> 00:15:02.989
&gt;&gt; Thank God I'm not a Tomcat expert.

230
00:15:02.989 --> 00:15:08.350
[LAUGH] I don't know how
Tomcat would play into this.

231
00:15:10.470 --> 00:15:11.832
Yeah, I don't know
enough to speak to that.

232
00:15:11.832 --> 00:15:14.562
I have much more familiarity
with something like Nginx.

233
00:15:14.562 --> 00:15:19.301
In which case you would just probably
have Nginx be the ingress to your pod or

234
00:15:19.301 --> 00:15:23.378
Kubernetes or whatever service
provider you're using there.

235
00:15:23.378 --> 00:15:28.438
And then that would pool your
connections basically through this

236
00:15:28.438 --> 00:15:33.501
front door of your Node front end,
middle end, server, right?

237
00:15:33.501 --> 00:15:36.510
But at that point, we're just talking
about how your networking works.

238
00:15:37.750 --> 00:15:41.400
Server side rendering doesn't make that
any more interesting or less interesting.

239
00:15:41.400 --> 00:15:45.669
The only thing that it makes it mildly
interesting at all is basically all of

240
00:15:45.669 --> 00:15:49.397
your requests to your clients
probably at some point are gonna hit

241
00:15:49.397 --> 00:15:51.120
your Node front end, right?

242
00:15:51.120 --> 00:15:54.523
And then those are gonna fan
out to other services in your,

243
00:15:57.176 --> 00:15:59.990
Your micro-services or
however you choose to do that.

244
00:16:09.537 --> 00:16:14.258
Cool.
Other questions?

245
00:16:14.258 --> 00:16:17.830
&gt;&gt; Yeah, I can have a general just review
question between code splitting and

246
00:16:17.830 --> 00:16:20.051
server side rendering and
streaming markup.

247
00:16:20.051 --> 00:16:23.261
I know we've talked a lot about not
solving performance issues until they

248
00:16:23.261 --> 00:16:26.056
become an actual problem to solve,
of these three solutions for

249
00:16:26.056 --> 00:16:27.418
getting better performance.

250
00:16:27.418 --> 00:16:31.871
I guess, how do they kind of compare
to each other in terms of like,

251
00:16:31.871 --> 00:16:34.905
no deliverable results, that makes sense.

252
00:16:34.905 --> 00:16:35.405
&gt;&gt; Yeah.

253
00:16:40.185 --> 00:16:44.343
The point of code splitting
is to reduce the amount of

254
00:16:44.343 --> 00:16:49.177
kilobytes that a user needs to
get the application working.

255
00:16:49.177 --> 00:16:52.023
So, that's like I'm loading the homepage,
and

256
00:16:52.023 --> 00:16:56.492
I have some buttons that I want the users
to be able to click as fast as possible,

257
00:16:56.492 --> 00:17:00.447
that time to first interactive is
where code splitting really shines

258
00:17:04.173 --> 00:17:09.649
Time to first meaningful interactive,
I don't know if that's actually a metric,

259
00:17:09.649 --> 00:17:13.053
but I just invented it and
it seems really good to me.

260
00:17:13.053 --> 00:17:16.655
Time to first meaningful interactive,
yeah, something like that,

261
00:17:16.655 --> 00:17:19.226
that's where code splitting
is really helpful.

262
00:17:19.226 --> 00:17:23.801
You're basically saying I'm delaying
making all this other stuff work

263
00:17:23.801 --> 00:17:28.526
to make sure that this thing works
immediately, this is optimizing for and

264
00:17:28.526 --> 00:17:31.837
these are just two strategies
to get the same thing.

265
00:17:31.837 --> 00:17:36.368
That being server side rendering the
render to string or render to streaming,

266
00:17:36.368 --> 00:17:39.194
your goal is to first meaningful paint,
right?

267
00:17:39.194 --> 00:17:43.623
So it's not to interact if this doesn't
help interactive it might even make

268
00:17:43.623 --> 00:17:45.432
interactive a tiny bit worse.

269
00:17:45.432 --> 00:17:49.344
But what you're trying to do here,
is you're trying to make it so

270
00:17:49.344 --> 00:17:53.056
that the user sees something
meaningful as fast as possible.

271
00:17:53.056 --> 00:17:55.397
Which of those is more important,

272
00:17:55.397 --> 00:17:59.440
really depends on what your
application is doing, right?

273
00:17:59.440 --> 00:18:01.672
For blog post,
you don't care if it's interactive,

274
00:18:01.672 --> 00:18:04.452
the people just want to read things
which this can handle just fine.

275
00:18:04.452 --> 00:18:07.604
Ecommerce, yeah, you want that thing as
interactive as fast as possible because

276
00:18:07.604 --> 00:18:10.298
the user clicks on it like,
they're trying to click the buy button and

277
00:18:10.298 --> 00:18:11.043
it doesn't work.

278
00:18:11.043 --> 00:18:13.959
And then they click it 19 times and
then they buy it 19 times,

279
00:18:13.959 --> 00:18:15.744
someone's going to be upset, right?

280
00:18:15.744 --> 00:18:20.469
Now speaking from experience,
or anything like that, but

281
00:18:20.469 --> 00:18:25.857
that definitely happened to me,
thank you, Angular, thank you,

282
00:18:25.857 --> 00:18:31.354
Brian who wrote crappy Angular,
that's a better way of putting it.

283
00:18:31.354 --> 00:18:33.131
I'm kind of probably
oversimplifying a little bit, but

284
00:18:33.131 --> 00:18:35.436
those are probably maybe the chief
wins from those two different things.

285
00:18:35.436 --> 00:18:39.206
And you can probably, you can, you can
mix and match them a little bit to say,

286
00:18:39.206 --> 00:18:41.990
all right,
we're gonna do a server-side rendering and

287
00:18:41.990 --> 00:18:44.206
then send the minimum
amount of JavaScript.

288
00:18:44.206 --> 00:18:49.918
In fact, a really kind of cool performance
optimization that occurred to me,

289
00:18:49.918 --> 00:18:54.950
what you would do here,
let's look at our just normal index, html.

290
00:18:54.950 --> 00:18:59.808
You would build two packages,
one would be here in the head

291
00:18:59.808 --> 00:19:04.766
of a script tag of like,
you might even just make it directly

292
00:19:04.766 --> 00:19:09.252
in here like the most critical
Jas goes here, right.

293
00:19:09.252 --> 00:19:13.025
So that the user gets this
immediately right away,

294
00:19:13.025 --> 00:19:16.019
you could probably then put here style,

295
00:19:19.865 --> 00:19:26.439
The most critical CSS, and
then you could move this down here,

296
00:19:26.439 --> 00:19:31.541
to after the user gets this afterwards,
right?

297
00:19:31.541 --> 00:19:34.046
Or you can do something like this defer,
so

298
00:19:34.046 --> 00:19:38.291
you can put all this stuff up here as
well, and then if you did something,

299
00:19:38.291 --> 00:19:42.974
I think module has different semantics
that I'm not thinking of at the moment.

300
00:19:42.974 --> 00:19:49.665
But there's a defer, and there's another
one a sync, which basically says like,

301
00:19:49.665 --> 00:19:55.616
I want you to load this particular
damn time like this, don't block here.

302
00:19:55.616 --> 00:19:59.260
This would be tricky to get right,
but if you could, you could basically

303
00:19:59.260 --> 00:20:02.190
get the user downloading
everything as fast as possible,

304
00:20:02.190 --> 00:20:05.027
but not blocking the browser
from finished rendering.

305
00:20:08.687 --> 00:20:12.847
Yeah, I would have to
work a lot more on that,

306
00:20:12.847 --> 00:20:18.868
cuz now we will get into a spider's
webs have a bunch of problems,

307
00:20:18.868 --> 00:20:26.333
but it could be pretty cool if you could
get it right, that answer your question?

308
00:20:26.333 --> 00:20:29.782
&gt;&gt; Yeah, no, I really appreciate it like,
the broad level perspective on use case

309
00:20:29.782 --> 00:20:30.790
and just strategy so,
&gt;&gt; Cool.

