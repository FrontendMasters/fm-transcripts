WEBVTT

1
00:00:00.310 --> 00:00:06.300
So, we have this pet adoption app, right?

2
00:00:06.300 --> 00:00:10.140
And if I click on this image,
this image to change to match it, right?

3
00:00:11.170 --> 00:00:16.003
So as a user, if I click on a thumbnail
I expect the main image to change,

4
00:00:16.003 --> 00:00:19.000
again, it's another user story, right?

5
00:00:19.000 --> 00:00:23.900
It's not me testing does the active hook,
it gets sent to the be the correct thing,

6
00:00:23.900 --> 00:00:25.860
that's the wrong thing to test.

7
00:00:27.200 --> 00:00:32.190
If a user clicks this, they expect to see
this kind of logic, so let's go do that.

8
00:00:32.190 --> 00:00:37.900
So make a new file in
here inside of test,this

9
00:00:37.900 --> 00:00:43.172
is gonna be called Carousel.test.js.

10
00:00:44.926 --> 00:00:51.141
Okay, import {expect,

11
00:00:51.141 --> 00:00:58.768
test} from @jest/globals,

12
00:00:58.768 --> 00:01:04.418
import {render} from

13
00:01:04.418 --> 00:01:12.327
@ testing-library/ react and

14
00:01:12.327 --> 00:01:17.412
import Carousel from

15
00:01:17.412 --> 00:01:21.960
../Carousel.

16
00:01:21.960 --> 00:01:25.610
We are also gonna need our little,

17
00:01:28.949 --> 00:01:35.291
Thing up here as well, this comment to let
it know to run this in a GSM environment.

18
00:01:40.396 --> 00:01:41.363
Okay.

19
00:01:45.151 --> 00:01:47.227
So you can see right away,
it picked it up,

20
00:01:47.227 --> 00:01:51.576
it's already a failing test cuz it's like,
hey, your test suite needs to test things.

21
00:01:51.576 --> 00:01:52.866
Otherwise, it's not
a very good test suite.

22
00:01:55.998 --> 00:02:02.271
Okay, so this is going to lets
users click on thumbnails

23
00:02:02.271 --> 00:02:08.285
to make them the hero Image,
okay, async function.

24
00:02:13.766 --> 00:02:20.702
Okay, let's make another array of images,

25
00:02:20.702 --> 00:02:26.727
const images = (0.jpg,1.jpg,

26
00:02:26.727 --> 00:02:30.388
2.jpg, 3.jpg).

27
00:02:30.388 --> 00:02:35.484
Okay, const carousel = render,
we don't need to bring

28
00:02:35.484 --> 00:02:41.125
static router this time,
because there's no links, right?

29
00:02:41.125 --> 00:02:45.470
We only have to do that when react
router DOM is involved, that's fine.

30
00:02:45.470 --> 00:02:49.675
We're gonna make carousel,
we're gonna make images = images.

31
00:02:53.968 --> 00:02:57.730
The const hero = await

32
00:02:57.730 --> 00:03:04.030
carousel.findByTestId, right?

33
00:03:04.030 --> 00:03:04.961
Yeah, Test Id.

34
00:03:07.908 --> 00:03:10.160
And we'll call that 1 hero cool.

35
00:03:12.730 --> 00:03:18.876
And then out of the bat, off the bat, not
out of the bat, maybe out of the bat too,

36
00:03:18.876 --> 00:03:23.510
off the bat, we expect 0.jpg
to be the hero image, right?

37
00:03:23.510 --> 00:03:25.380
The first one obviously
should be set to that.

38
00:03:25.380 --> 00:03:28.143
So we're gonna say,

39
00:03:28.143 --> 00:03:33.671
expect(hero.src) equal to not equal,

40
00:03:33.671 --> 00:03:39.053
but toContain rather images 0, right?

41
00:03:39.053 --> 00:03:46.254
So, we expect this one to
be the hero of the bat.

42
00:03:52.551 --> 00:03:56.404
Okay, and then we can write a for loop
that's gonna go click each one of them,

43
00:03:56.404 --> 00:03:57.846
and make sure that it works.

44
00:03:57.846 --> 00:04:04.093
So for( let i = 0,i &lt;
images.length; i ++) now,

45
00:04:04.093 --> 00:04:10.224
we absolutely could have just
said done one click test.

46
00:04:10.224 --> 00:04:13.458
And say, well if one click works
then probably multiple work, but

47
00:04:13.458 --> 00:04:17.125
I mean maybe you have a problem that
does every second click doesn't work.

48
00:04:17.125 --> 00:04:23.928
You'd catch a problem like that,
const image = images( i).

49
00:04:28.171 --> 00:04:34.373
Const thumb = await carousel.findByTestId,

50
00:04:34.373 --> 00:04:39.667
and then we'll do thumbnails (i), and

51
00:04:39.667 --> 00:04:45.125
then we'll go make these Tests Ids later.

52
00:04:48.573 --> 00:04:53.441
Okay, first thing we do is were gonna do
thumb.click, because we got this from

53
00:04:53.441 --> 00:04:58.660
react testing library, they give us
a bunch of helper functions on here.

54
00:04:58.660 --> 00:05:01.936
So you can see here,
this is actually an HTML element or

55
00:05:01.936 --> 00:05:04.581
just actually calling click on it, right?

56
00:05:04.581 --> 00:05:06.103
And then, here we'll expect,

57
00:05:08.349 --> 00:05:14.200
(hero.src).toContain(image).

58
00:05:16.244 --> 00:05:19.646
And then, we can also go and make sure
that the correct highlighting, right?

59
00:05:19.646 --> 00:05:23.225
So, if I click on this one, you can see
it's kind of grayed out a little bit.

60
00:05:25.307 --> 00:05:33.849
So here, we can say, expect(
thumb.classList).toContain( active).

61
00:05:42.512 --> 00:05:45.317
Okay, so our test is failing, that's good.

62
00:05:48.325 --> 00:05:51.721
It's good because,
we haven't added the Test Ids yet, right?

63
00:05:56.415 --> 00:06:01.105
So this one already is failing, because
it doesn't have a Test Id for hero, so

64
00:06:01.105 --> 00:06:04.320
let's head over into carousel and
make that happen.

65
00:06:05.880 --> 00:06:07.240
So where's the hero?

66
00:06:07.240 --> 00:06:10.457
The hero is Is this one, right?

67
00:06:10.457 --> 00:06:15.737
So we're gonna say, data- Test id = hero.

68
00:06:15.737 --> 00:06:18.596
And then the image here,

69
00:06:18.596 --> 00:06:24.178
we're gonna say that this
is data- testid = and

70
00:06:24.178 --> 00:06:29.909
we have to add, thumbnail$ {index}, right?

71
00:06:45.885 --> 00:06:51.617
Cool, so it looks like our test is still
failing, let's figure out why that is?

72
00:06:51.617 --> 00:06:56.537
And I put an extra s in there,
so in carousel test

73
00:06:56.537 --> 00:07:01.703
remove this s here,
it should just be thumbnail.

74
00:07:01.703 --> 00:07:03.224
Whatever it is as long as
they match each other,

75
00:07:03.224 --> 00:07:04.792
doesn't matter what they're called, right?

76
00:07:07.893 --> 00:07:09.320
But now our test works.

77
00:07:10.610 --> 00:07:15.237
So, again, here in Carousel we
added a data-Testid to hero and

78
00:07:15.237 --> 00:07:17.990
we added a dat- Testid to here.

79
00:07:17.990 --> 00:07:22.365
This index is like whatever
index is on that loop, right?

80
00:07:22.365 --> 00:07:26.979
In fact, if you wanna look at it and

81
00:07:26.979 --> 00:07:34.140
I inspect image here,
this one is data- index = 0,

82
00:07:34.140 --> 00:07:39.401
date to data, I do interesting.

83
00:07:39.401 --> 00:07:41.007
This is actually not even running, so

84
00:07:41.007 --> 00:07:44.290
you'd have to be running your server
to make that work which we can, right?

85
00:07:44.290 --> 00:07:52.047
We can say, npm run dev,
I have to break that as well,

86
00:07:52.047 --> 00:07:58.370
this is just giving you warnings,
ignore all these warnings it's fine.

87
00:08:08.934 --> 00:08:14.498
Okay, but now if I inspect this,
You can see now,

88
00:08:14.498 --> 00:08:18.467
that this has the thumbnail ID for
the testid right there,

89
00:08:18.467 --> 00:08:21.310
it's actually output to the DOM as well.

90
00:08:23.330 --> 00:08:27.623
People get weird about is like, well I'm
shipping testing module for production,

91
00:08:27.623 --> 00:08:29.199
should I do that or not do that?

92
00:08:29.199 --> 00:08:32.671
Again, we're talking about the on
the order of a few bites here and

93
00:08:32.671 --> 00:08:35.470
there, if you end up with
better tests because of it.

94
00:08:35.470 --> 00:08:37.784
I think that means,
less broken code for users,

95
00:08:37.784 --> 00:08:40.111
which I think is on the whole positive for
users.

96
00:08:44.381 --> 00:08:45.378
Okay.

97
00:08:49.636 --> 00:08:51.565
Trash that one, that's fine.

98
00:08:51.565 --> 00:08:56.874
All right, so there we are, we're so
far so good, we got 3 total test going,

99
00:08:56.874 --> 00:09:01.951
this carousel 1 is a pretty good test,
I'm pretty happy with it, right?

100
00:09:01.951 --> 00:09:04.230
This test quite a bit and
one little test here,

101
00:09:04.230 --> 00:09:08.211
I feel pretty confident that if I do this
that my testing logic works pretty well.

102
00:09:08.211 --> 00:09:15.574
Notice that it even works on the first run
through, it's gonna to click on 0, right?

103
00:09:15.574 --> 00:09:20.482
It's already set to 0, so we're also
testing that, if I click on this multiple

104
00:09:20.482 --> 00:09:24.613
times even though, this is set this
is not gonna error out, right?

105
00:09:24.613 --> 00:09:27.413
So, pretty exhaustive tests here
that I'm really happy with.

