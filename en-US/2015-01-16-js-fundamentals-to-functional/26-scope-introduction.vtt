WEBVTT

1
00:00:00.000 --> 00:00:10.000
[MUSIC]

2
00:00:39.119 --> 00:00:42.924
&gt;&gt; Bianca Gandolfo: So this class is for
someone who has for the first time,

3
00:00:42.924 --> 00:00:48.990
who's just started learning JavaScript for
a few months, usually two to six months.

4
00:00:48.990 --> 00:00:50.940
Maybe you completed an online tutorial,

5
00:00:50.940 --> 00:00:55.270
like Code Academy, Code School
Khan Academy, something like that.

6
00:00:55.270 --> 00:00:59.200
You want to continue
solidifying your fundamentals.

7
00:00:59.200 --> 00:01:00.860
You're looking for more practice.

8
00:01:00.860 --> 00:01:02.400
Or you're trying to get
into a Hack Reactor.

9
00:01:02.400 --> 00:01:05.360
So I initially create this
class to help you prepare for

10
00:01:05.360 --> 00:01:06.380
the Hack Reactor interview.

11
00:01:06.380 --> 00:01:07.790
It's a two-part class.

12
00:01:07.790 --> 00:01:08.960
And this is the second part.

13
00:01:10.440 --> 00:01:14.618
The first part which I taught
yesterday and will be also released on

14
00:01:14.618 --> 00:01:21.080
Front End Masters, just reviews
the core foundations of JavaScript.

15
00:01:21.080 --> 00:01:22.920
We talked about objects,
arrays, and functions.

16
00:01:22.920 --> 00:01:25.630
Those are some of the most
important aspects of the language,

17
00:01:25.630 --> 00:01:28.000
as well as the most confusing for
beginners.

18
00:01:28.000 --> 00:01:30.230
And then today we're gonna,
we're gonna build on that,

19
00:01:30.230 --> 00:01:33.750
and we're gonna explore
even more into functions.

20
00:01:33.750 --> 00:01:38.130
And you get started with some functional
programming, with the underscore library.

21
00:01:38.130 --> 00:01:41.610
And the hope for this class is,
once you have this strong foundation,

22
00:01:41.610 --> 00:01:48.450
you can go out and be an even
stronger JavaScript engineer, cool.

23
00:01:50.230 --> 00:01:52.340
And so
I'm just gonna jump right into review,

24
00:01:52.340 --> 00:01:58.300
cuz we have a lot to cover today and
we only have seven hours, so here we go.

25
00:01:58.300 --> 00:02:01.968
So here's a chart from yesterday and
we have the anatomy of a function.

26
00:02:01.968 --> 00:02:07.062
So what is the declaration or
the definition

27
00:02:07.062 --> 00:02:16.688
of a function from yesterday?
&gt;&gt; Bianca Gandolfo: Joe.

28
00:02:16.688 --> 00:02:17.620
&gt;&gt; Joe: The.

29
00:02:18.830 --> 00:02:20.010
It's the actual commands

30
00:02:22.470 --> 00:02:26.720
that get executed as part of the function.
&gt;&gt; Bianca Gandolfo: Yeah.

31
00:02:26.720 --> 00:02:30.630
So the function declaration

32
00:02:30.630 --> 00:02:35.400
just starts with the keyword function and
it follows through to the brackets.

33
00:02:35.400 --> 00:02:36.850
So it contains the function.

34
00:02:36.850 --> 00:02:39.610
It contains the keyword function.

35
00:02:39.610 --> 00:02:41.650
The parameters and the function body.

36
00:02:43.610 --> 00:02:46.420
And what about the function name?

37
00:02:46.420 --> 00:02:49.270
You know that the function name
here is being used loosely,

38
00:02:49.270 --> 00:02:53.280
to mean any way that we can refer
to the function later in our code.

39
00:02:53.280 --> 00:02:55.280
So that could be the actual
function name or

40
00:02:55.280 --> 00:02:57.790
it could be a variable where
the function is stored.

41
00:02:59.960 --> 00:03:00.820
So, we have the function name.

42
00:03:00.820 --> 00:03:04.300
This is an add function, so
we have yellow add here.

43
00:03:04.300 --> 00:03:07.520
That's the function name, and
we refer to it down here as well.

44
00:03:08.860 --> 00:03:10.980
And then, we have the parameters.

45
00:03:10.980 --> 00:03:14.000
The parameters are placeholders or
variables.

46
00:03:14.000 --> 00:03:16.830
They're like variables in
that they don't have a value

47
00:03:16.830 --> 00:03:18.710
until they're assigned a value.

48
00:03:18.710 --> 00:03:22.850
The way that we assign parameters
a value is by passing them arguments.

49
00:03:22.850 --> 00:03:26.830
And so here are arguments down here,
we pass the arguments at call time.

50
00:03:26.830 --> 00:03:28.360
Or when we invoke the function.

51
00:03:28.360 --> 00:03:31.460
When we invoke the function is
when we pass the arguments.

52
00:03:31.460 --> 00:03:35.940
And at that point,
is when our parameters gain a value.

53
00:03:35.940 --> 00:03:40.560
Before that, our parameters are undefined.

54
00:03:42.250 --> 00:03:45.430
And then the other, the other
important thing is the function body.

55
00:03:45.430 --> 00:03:49.580
The function body is never run
until we call the function.

56
00:03:49.580 --> 00:03:55.120
So the functions body is in between these
two parentheses here, and that code,

57
00:03:55.120 --> 00:04:00.870
that return A plus B is never,
is never run until down here.

58
00:04:00.870 --> 00:04:05.630
So, if we were to pretend that we were
in the interpreter, we'd start here,

59
00:04:05.630 --> 00:04:07.200
above this add function.

60
00:04:07.200 --> 00:04:10.350
We'd say, okay, great,
we're going to create a variable and

61
00:04:10.350 --> 00:04:13.790
store this function on definition
in that variable and memory.

62
00:04:13.790 --> 00:04:17.320
And then it's going to skip
the entire function body, so

63
00:04:17.320 --> 00:04:21.620
that return a + b is never It's never run.

64
00:04:21.620 --> 00:04:25.590
And then once we get to the add functions,

65
00:04:25.590 --> 00:04:30.430
this variable add, yeah, it's a function,
then we're gonna call it.

66
00:04:31.880 --> 00:04:34.510
And we're gonna pass these arguments here,
three, four, and five.

67
00:04:36.050 --> 00:04:40.060
Then, at that point only does,
it go into the function body, and

68
00:04:40.060 --> 00:04:41.090
run the containing code.

69
00:04:41.090 --> 00:04:44.080
So, we, We invoked it down here.

70
00:04:44.080 --> 00:04:45.560
And we skip back up.

71
00:04:47.080 --> 00:04:50.750
And then it goes into this statement,
which is return A plus B.

72
00:04:50.750 --> 00:04:56.120
And also at that point is when
we give value to our parameter.

73
00:04:56.120 --> 00:05:01.820
So at this point, is when A and B,
now contain the values three and four.

74
00:05:03.850 --> 00:05:05.130
So, that was a review.

75
00:05:05.130 --> 00:05:09.660
Do we have any questions on sort of the
anatomy of the function, the vocab words?

76
00:05:11.780 --> 00:05:12.320
So thumbs.

77
00:05:13.370 --> 00:05:18.220
So, and those of you joining online,
thumbs, a thumb up is a B and

78
00:05:18.220 --> 00:05:24.020
a thumb down is a P, and
then a middle thumb Is just a dash.

79
00:05:24.020 --> 00:05:28.590
And so we use our thumb to gauge
where everyone's at in the room.

80
00:05:28.590 --> 00:05:31.500
And we're trying to be honest with
each other about where we are,

81
00:05:31.500 --> 00:05:36.620
so that I can go slower or
faster based on how the collective.

82
00:05:36.620 --> 00:05:40.190
And then, also, just gives me
feedback on if I explained something

83
00:05:40.190 --> 00:05:42.820
thoroughly enough, or if I should
explain something a different way.

84
00:05:42.820 --> 00:05:48.520
So it's really important to really be
honest when we do our thumbs, cool.

85
00:05:48.520 --> 00:05:53.069
Lot's of thumbs up,

86
00:05:53.069 --> 00:05:57.405
down there, cool.

87
00:05:57.405 --> 00:06:01.245
So, so the slides,
the slides link where it says.

88
00:06:01.245 --> 00:06:04.420
Forward/live.

89
00:06:04.420 --> 00:06:06.800
That is the live slideshow.

90
00:06:06.800 --> 00:06:10.690
So you can tune in there or you can
just go through the slides yourself.

