WEBVTT

1
00:00:00.000 --> 00:00:04.052
[MUSIC]

2
00:00:04.052 --> 00:00:09.810
&gt;&gt; Bianca Gandolfo: Let's just quickly
go over the exercises from before lunch.

3
00:00:09.810 --> 00:00:12.400
So these are our array
exercises where we're

4
00:00:12.400 --> 00:00:16.890
practicing creating data structure for
our e-farming application.

5
00:00:16.890 --> 00:00:21.150
And this is gonna be a collection
of our animal users.

6
00:00:21.150 --> 00:00:26.080
You can imagine your application, if you
have different pages you'll have perhaps

7
00:00:26.080 --> 00:00:29.940
user profile page,
if you think of your Facebook profile,

8
00:00:29.940 --> 00:00:34.440
that would be the model or
our first object from step 1, the object's

9
00:00:35.830 --> 00:00:41.220
portion, and
then there's the portion where maybe you

10
00:00:43.070 --> 00:00:46.880
have a browse, where you can browse
the different users on your website, or

11
00:00:46.880 --> 00:00:49.960
a search function where you
would then have a collection of

12
00:00:49.960 --> 00:00:53.650
all these different users
shown on that page.

13
00:00:53.650 --> 00:00:56.660
And so this would be like different
scenarios where you'd be using either

14
00:00:56.660 --> 00:01:00.390
just a model data structure,
versus your whole collection,

15
00:01:00.390 --> 00:01:03.550
which would be an array user models.

16
00:01:04.890 --> 00:01:08.899
Any questions on sort of just that
general concepts of sort of how to

17
00:01:08.899 --> 00:01:11.762
architect your data in
a way that makes sense for

18
00:01:11.762 --> 00:01:16.513
the view that's gonna correspond to
the situation that you're gonna use it?

19
00:01:23.794 --> 00:01:24.872
&gt;&gt; Bianca Gandolfo: All right.

20
00:01:24.872 --> 00:01:27.414
Did you have a question?

21
00:01:27.414 --> 00:01:30.091
No.
&gt;&gt; Student 1: [INAUDIBLE]

22
00:01:30.091 --> 00:01:31.150
&gt;&gt; Bianca Gandolfo: Cool.

23
00:01:31.150 --> 00:01:35.960
So, I'm just gonna quickly go
over some of the exercises.

24
00:01:35.960 --> 00:01:37.510
So here we're creating a noise array,

25
00:01:37.510 --> 00:01:42.310
and we're just adding,
we're adding a string there called purr.

26
00:01:42.310 --> 00:01:46.280
Notice this is just like
the object literal notation where

27
00:01:46.280 --> 00:01:47.270
we can just add it in there.

28
00:01:47.270 --> 00:01:53.890
If you wanted to do two,
we can just say, I don't know.

29
00:01:53.890 --> 00:01:55.090
I don't know what's a sound?

30
00:01:57.230 --> 00:01:58.140
What's a sound?

31
00:01:58.140 --> 00:01:58.920
&gt;&gt; Student 2: Oink.

32
00:01:58.920 --> 00:01:59.470
&gt;&gt; Bianca Gandolfo: Oink.

33
00:01:59.470 --> 00:02:02.670
Okay, so we have a cat, also oinks.

34
00:02:02.670 --> 00:02:05.540
So just like in our
object literal notation

35
00:02:05.540 --> 00:02:09.100
you can see we have our values
separated by commas, and

36
00:02:09.100 --> 00:02:13.130
that we just put them directly into
the brackets the corresponding brackets.

37
00:02:13.130 --> 00:02:17.040
And that's array literal notation,
same as or

38
00:02:17.040 --> 00:02:21.740
really similar to object literal
notation in so far as you can just

39
00:02:21.740 --> 00:02:26.320
automatically add your values in there,
you don't necessarily have to use bracket

40
00:02:26.320 --> 00:02:31.360
notation to add them or
a method like shift or unshift.

41
00:02:31.360 --> 00:02:32.530
I'm sorry, unshift or push.

42
00:02:34.700 --> 00:02:39.350
Cool, so and here we are we're
using unshift for our noise array.

43
00:02:39.350 --> 00:02:40.610
What does this method do?

44
00:02:42.140 --> 00:02:44.380
&gt;&gt; Student 3: Put's it
in the first position?

45
00:02:44.380 --> 00:02:45.190
&gt;&gt; Bianca Gandolfo: Yep.

46
00:02:45.190 --> 00:02:50.410
So unshift will have your array and it
will put that value at the first position.

47
00:02:50.410 --> 00:02:52.070
So everything will be shifted over once.

48
00:02:53.270 --> 00:02:57.330
And the 0F would then
be whatever you passed.

49
00:02:57.330 --> 00:03:01.020
And so this is, unshift is what we
would call a native array method.

50
00:03:01.020 --> 00:03:04.270
So it's a function on the array.

51
00:03:04.270 --> 00:03:07.200
That comes out of the box with JavaScript.

52
00:03:09.840 --> 00:03:12.010
And then push is another one
of those array methods, and

53
00:03:12.010 --> 00:03:14.230
again, a method is just a function.

54
00:03:14.230 --> 00:03:15.810
And we can tell that this is a function,
right,

55
00:03:15.810 --> 00:03:18.890
cuz we're calling it with those
two parentheses right there.

56
00:03:18.890 --> 00:03:23.490
Just like we would call a regular function
if you said var x equals function, And

57
00:03:23.490 --> 00:03:29.270
you returned whatever and you wanted to
call it, you'd just say x parentheses.

58
00:03:29.270 --> 00:03:31.990
Just like, I don't have mine.

59
00:03:31.990 --> 00:03:32.868
Just like this.

60
00:03:32.868 --> 00:03:36.990
So var x equals a function.

61
00:03:38.000 --> 00:03:39.030
Right?

62
00:03:39.030 --> 00:03:41.760
And if we were to call that
function we would just

63
00:03:41.760 --> 00:03:44.960
do that by having two
trailing parentheses.

64
00:03:44.960 --> 00:03:52.270
Right and
if we said var obj equals our object.

65
00:03:52.270 --> 00:04:00.797
And then we said obj.x
we have our function.

66
00:04:00.797 --> 00:04:02.870
Uh-oh.

67
00:04:02.870 --> 00:04:04.884
Maybe it doesn't like that it's empty.

68
00:04:13.744 --> 00:04:14.524
&gt;&gt; Bianca Gandolfo: Okay.

69
00:04:14.524 --> 00:04:19.465
And so just like, we can call x by itself,
like this, right,

70
00:04:19.465 --> 00:04:23.470
we can also just call it
on the object the same way.

71
00:04:24.850 --> 00:04:30.780
So that's all our array methods are.

72
00:04:30.780 --> 00:04:36.320
And then here on line 15, we are just
adding using backend notation and

73
00:04:36.320 --> 00:04:40.130
a number and
we're just adding the value, growl.

74
00:04:40.130 --> 00:04:45.610
And so then we can console
log our noisearray.length.

75
00:04:45.610 --> 00:04:46.700
And what is that gonna log?

76
00:04:50.670 --> 00:04:53.980
How about, who haven't, how about Kashore?

77
00:04:53.980 --> 00:04:55.755
What is this line gonna log?

78
00:04:55.755 --> 00:04:59.700
&gt;&gt; Kashore: 4.

79
00:04:59.700 --> 00:05:02.640
&gt;&gt; Bianca Gandolfo: Close,
it's five because I added an extra one.

80
00:05:04.100 --> 00:05:08.410
Yeah so
this gonna console.log then five.5 And

81
00:05:08.410 --> 00:05:11.348
then if you want-
&gt;&gt; Student 3: If it's noiseArray[3],

82
00:05:11.348 --> 00:05:13.680
is that gonna replace meow?

83
00:05:13.680 --> 00:05:16.140
&gt;&gt; Bianca Gandolfo: You're right,
yep you're right, it would be 4.

84
00:05:16.140 --> 00:05:17.460
&gt;&gt; Student 3: Do we get a point for that,

85
00:05:17.460 --> 00:05:18.140
for-
&gt;&gt; Bianca Gandolfo: Yeah,

86
00:05:18.140 --> 00:05:19.770
extra points, yeah.

87
00:05:22.070 --> 00:05:23.870
So many points, bonus points.

88
00:05:23.870 --> 00:05:25.320
And a gold star.

89
00:05:27.390 --> 00:05:31.725
Okay.
So line 20, console log we're just

90
00:05:31.725 --> 00:05:36.910
inspecting our array and
our array is gonna look

91
00:05:36.910 --> 00:05:41.860
something like this and so animal.noises.

92
00:05:41.860 --> 00:05:43.890
We then added a noise array and

93
00:05:43.890 --> 00:05:48.870
what's happening here is we're
just overriding that empty array.

94
00:05:48.870 --> 00:05:51.810
So we're not actually adding
something to the previous array,

95
00:05:51.810 --> 00:05:53.770
we're just completely overriding it.

96
00:05:53.770 --> 00:05:57.950
When we see this equal sign,
that's not augmenting,

97
00:05:57.950 --> 00:05:59.320
it's not adding or anything like that.

98
00:05:59.320 --> 00:06:01.010
It's just gonna completely override it.

99
00:06:02.090 --> 00:06:07.215
So that is something important to keep in
mind and now you can see your animal has

100
00:06:07.215 --> 00:06:12.454
its user name, tagline, and
also this array, the property name noises.

101
00:06:14.439 --> 00:06:15.959
&gt;&gt; Bianca Gandolfo: Cool,
any questions on that so far?

102
00:06:23.016 --> 00:06:24.676
&gt;&gt; Bianca Gandolfo: No, okay.

103
00:06:24.676 --> 00:06:30.755
So, then here we go,
we have our animals collection.

104
00:06:30.755 --> 00:06:33.495
Which we're just gonna
initialize as an empty array.

105
00:06:33.495 --> 00:06:37.359
And then, what this is gonna be is it's
gonna be an array of animal objects.

106
00:06:38.790 --> 00:06:41.700
And so we have our first
animal that we're pushing on,

107
00:06:41.700 --> 00:06:46.690
which if you remember is the cat Mittens,
and

108
00:06:46.690 --> 00:06:53.371
then we're gonna take quackers and
we're gonna add quackers to where?

109
00:06:53.371 --> 00:06:57.900
&gt;&gt; Student 1: [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: To the end, mm-hm.

110
00:06:57.900 --> 00:07:00.960
So that's actually It's
gonna be the length.

111
00:07:00.960 --> 00:07:04.290
The length is the last index.

112
00:07:04.290 --> 00:07:07.219
Or is the last index plus one, so

113
00:07:07.219 --> 00:07:12.770
this would be the same as
saying array.push, for example.

114
00:07:12.770 --> 00:07:16.150
You might even imagine that that's
what array.push does under the hood.

115
00:07:16.150 --> 00:07:17.674
It wouldn't hurt you.

116
00:07:17.674 --> 00:07:22.790
And then console.log(animals)
just to check to see where

117
00:07:22.790 --> 00:07:28.340
you are to see what your expecting and
it should print out something like this.

118
00:07:28.340 --> 00:07:29.640
So you see we have an array,

119
00:07:29.640 --> 00:07:32.980
and then inside of the array
we have one object here.

120
00:07:32.980 --> 00:07:36.300
And then we have the start
of another object here.

121
00:07:38.650 --> 00:07:43.498
And then again we can create
our object dog with our,

122
00:07:43.498 --> 00:07:48.730
just using object literal notation and

123
00:07:48.730 --> 00:07:53.210
then we can create honey badger and we're
gonna be using all dot notation here.

124
00:07:54.380 --> 00:08:00.610
And also, then we can use the push method,
which can take more than one argument.

125
00:08:03.490 --> 00:08:07.600
And here's where that
array.length metaphor breaks down

126
00:08:07.600 --> 00:08:09.140
because you can have
more than one argument.

127
00:08:11.230 --> 00:08:14.620
And then you can console log animals,
length and then you have four.

128
00:08:14.620 --> 00:08:16.640
And that's how you create a collection.

129
00:08:16.640 --> 00:08:20.260
Has anyone used Backbone before?

130
00:08:21.540 --> 00:08:23.970
A little bit.
So this might sound a little bit familiar.

131
00:08:23.970 --> 00:08:26.600
I work with a lot of Backbone, and

132
00:08:26.600 --> 00:08:30.920
this is how you can envision the models
and the collections in Backbone.

133
00:08:30.920 --> 00:08:33.630
And also general MVC concepts.

134
00:08:35.730 --> 00:08:42.214
Cool, any questions about these
exercises before I move on to functions?

135
00:08:47.715 --> 00:08:48.235
&gt;&gt; Bianca Gandolfo: Good?

136
00:08:48.235 --> 00:08:50.975
Thumbs, nice.

137
00:08:50.975 --> 00:08:52.412
Awesome.

