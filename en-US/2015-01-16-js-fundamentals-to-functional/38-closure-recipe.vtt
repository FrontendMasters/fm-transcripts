WEBVTT

1
00:00:00.000 --> 00:00:03.762
[MUSIC]

2
00:00:03.762 --> 00:00:06.901
&gt;&gt; Bianca Gandolfo: And
here's just like a recipe outline,

3
00:00:06.901 --> 00:00:11.900
sort of outline, sort of the ideas
of how do we create a closure?

4
00:00:13.090 --> 00:00:15.860
So the first think is you have
to create the parent function.

5
00:00:17.220 --> 00:00:20.810
So here we have the function checkscope,
and it's a picture so

6
00:00:20.810 --> 00:00:22.590
I can't highlight it.

7
00:00:22.590 --> 00:00:23.220
It goes here.

8
00:00:24.740 --> 00:00:28.730
Then we define some variables in
the parent's local scope up here,

9
00:00:28.730 --> 00:00:29.570
this innerVar.

10
00:00:31.060 --> 00:00:34.730
And then you put a function inside of it
so the function again could be inside

11
00:00:34.730 --> 00:00:37.200
an object as well but
it has to be a function.

12
00:00:39.350 --> 00:00:41.780
And then you return that
function without calling it

13
00:00:43.040 --> 00:00:46.620
from the parent function, right?

14
00:00:46.620 --> 00:00:51.650
So that's how you create the closure,
or you start to get there.

15
00:00:52.880 --> 00:00:57.180
And then, if you execute,
this is how you would execute it.

16
00:00:57.180 --> 00:01:00.510
So here's our checkscope, right?

17
00:01:00.510 --> 00:01:04.360
We create a variable.

18
00:01:04.360 --> 00:01:08.660
We store that return
function from checkscope, so

19
00:01:08.660 --> 00:01:14.770
we call checkscope here, it goes inside
the bracket, we create a local variable.

20
00:01:14.770 --> 00:01:19.070
Then we see, great, there's an innerFunc,
we skip the innerFunc and

21
00:01:19.070 --> 00:01:21.150
then we return it here.

22
00:01:21.150 --> 00:01:22.520
So we return this innerFunc,

23
00:01:22.520 --> 00:01:26.580
so test is now innerFunc which
will then just return scope.

24
00:01:28.220 --> 00:01:31.800
And then if you just check test and
you make sure it's a function.

25
00:01:31.800 --> 00:01:33.510
This is optional.

26
00:01:33.510 --> 00:01:37.318
And then you run test, and
test will return if it's a local scope or

27
00:01:37.318 --> 00:01:38.212
global scope.

28
00:01:38.212 --> 00:01:41.815
And of course we know,
since we're all experts at scope now,

29
00:01:41.815 --> 00:01:44.046
that it's gonna return localscope.

30
00:01:46.296 --> 00:01:48.730
&gt;&gt; Bianca Gandolfo: Cool?

31
00:01:48.730 --> 00:01:53.845
So, that's just a recipe and
a way to execute for when you're doing

32
00:01:53.845 --> 00:01:59.796
the exercises, you can refer back to these
slides to sort of get a step by step.

33
00:01:59.796 --> 00:02:02.481
Cool, so-
&gt;&gt; Speaker 2: So,

34
00:02:02.481 --> 00:02:03.515
there's a slide called gotcha.

35
00:02:03.515 --> 00:02:07.795
&gt;&gt; Bianca Gandolfo: [LAUGH] It's
not that bad, it's not that bad.

36
00:02:07.795 --> 00:02:14.583
So we have this sayAlice function and
we're gonna call it,

37
00:02:14.583 --> 00:02:20.197
and let's just,
&gt;&gt; Bianca Gandolfo: And

38
00:02:20.197 --> 00:02:21.450
let's just see what it says.

39
00:02:23.480 --> 00:02:26.159
So let's start with, who did we leave off?

40
00:02:27.760 --> 00:02:29.430
Kevin did you go, last time?

41
00:02:29.430 --> 00:02:31.129
Okay, so we'll start with Kevin.

42
00:02:31.129 --> 00:02:34.796
&gt;&gt; Speaker 3: So
define a function called sayAlice.

43
00:02:34.796 --> 00:02:38.470
&gt;&gt; Bianca Gandolfo: Yep, so we define
a function called sayAlice and then Ben?

44
00:02:40.000 --> 00:02:43.730
&gt;&gt; Speaker 3: Skips to the lines-
&gt;&gt; Bianca Gandolfo: You know this class

45
00:02:43.730 --> 00:02:47.610
has been the most picked up
the skipping the function body

46
00:02:47.610 --> 00:02:49.970
faster than any other
class I've ever taught.

47
00:02:49.970 --> 00:02:50.850
Good job, guys.

48
00:02:50.850 --> 00:02:51.870
&gt;&gt; Speaker 3: Go Minnesota.

49
00:02:51.870 --> 00:02:53.770
&gt;&gt; Bianca Gandolfo: Yeah,
it's Minnesota, that's what it is.

50
00:02:53.770 --> 00:02:55.086
&gt;&gt; Speaker 3: What about online students,
too?

51
00:02:55.086 --> 00:02:58.671
&gt;&gt; Bianca Gandolfo: Yeah, and the world.

52
00:02:58.671 --> 00:03:03.587
Maybe I just got better at
really emphasizing that.

53
00:03:03.587 --> 00:03:04.087
I don't know.

54
00:03:05.380 --> 00:03:08.870
So we skip it, and then, Jake?

55
00:03:09.870 --> 00:03:16.475
&gt;&gt; Jake: So we, I guess we start at
the bottom at variable what, sayAlice.

56
00:03:16.475 --> 00:03:17.380
&gt;&gt; Bianca Gandolfo: Mm-hm.

57
00:03:17.380 --> 00:03:21.090
So we call sayAlice and then Tanner?

58
00:03:21.090 --> 00:03:23.430
&gt;&gt; Tanner: We go into
our sayAlice function.

59
00:03:23.430 --> 00:03:27.890
&gt;&gt; Bianca Gandolfo: Yeah, we go into
the function body and then Phil?

60
00:03:30.060 --> 00:03:33.800
&gt;&gt; Phil: So the first thing you
do is you skip the makeLog.

61
00:03:33.800 --> 00:03:37.800
&gt;&gt; Bianca Gandolfo: Well, we recognize
that there is a makeLog, we store, and

62
00:03:37.800 --> 00:03:38.921
then we skip it.

63
00:03:38.921 --> 00:03:47.379
&gt;&gt; Phil: And
then assign that text to Alice.

64
00:03:47.379 --> 00:03:53.463
&gt;&gt; Bianca Gandolfo: Mm-hm, and then John?

65
00:03:53.463 --> 00:03:54.210
So we're here.

66
00:04:00.212 --> 00:04:04.165
&gt;&gt; John: It's gonna return the inner
function makeLog back to the caller.

67
00:04:04.165 --> 00:04:09.254
&gt;&gt; Bianca Gandolfo: Mm-hm, so
it's returning this function.

68
00:04:09.254 --> 00:04:11.879
So what is now a function.

69
00:04:11.879 --> 00:04:14.466
And then if we call, I know which,

70
00:04:14.466 --> 00:04:19.400
whatDoesSheSay, that's what we
should call it, whatDoesSheSay.

71
00:04:22.610 --> 00:04:30.838
So what is it going to console.log?

72
00:04:32.796 --> 00:04:37.129
&gt;&gt; John: On the files?

73
00:04:37.129 --> 00:04:39.587
&gt;&gt; Bianca Gandolfo: Good guess.

74
00:04:39.587 --> 00:04:43.310
It's actually gonna console log,
why hello there, Alice.

75
00:04:43.310 --> 00:04:48.230
The reason is is because if you notice
when we walk through this code line

76
00:04:48.230 --> 00:04:52.337
by line, we initialize this
variable alice and it exists.

77
00:04:52.337 --> 00:04:56.202
By the time that we call it down here,

78
00:04:56.202 --> 00:05:01.830
alice has already been created and
assigned a value.

79
00:05:01.830 --> 00:05:05.238
&gt;&gt; Speaker 2: So
because it's still apparent to makeLog, so

80
00:05:05.238 --> 00:05:07.462
makeLog has alice available.

81
00:05:07.462 --> 00:05:09.438
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; Speaker 2: Whether it's done above or

82
00:05:09.438 --> 00:05:10.005
below.

83
00:05:10.005 --> 00:05:13.297
&gt;&gt; Bianca Gandolfo: Right,
unless you move this up here.

84
00:05:13.297 --> 00:05:17.254
&gt;&gt; Speaker 2: Right.
&gt;&gt; Bianca Gandolfo: Then it wouldn't work,

85
00:05:20.004 --> 00:05:23.003
&gt;&gt; Bianca Gandolfo: Or something, yep.

86
00:05:23.003 --> 00:05:25.212
&gt;&gt; Phil: I have a more
fundamental question.

87
00:05:25.212 --> 00:05:27.605
&gt;&gt; Bianca Gandolfo: Sure.
&gt;&gt; Phil: On the very first line where you

88
00:05:27.605 --> 00:05:30.046
say var sayAlice = function(){.

89
00:05:30.046 --> 00:05:31.171
&gt;&gt; Bianca Gandolfo: Mm-hm.

90
00:05:31.171 --> 00:05:34.630
&gt;&gt; Phil: Could you rewrite that to say
function space sayAlice parentheses?

91
00:05:35.930 --> 00:05:38.171
&gt;&gt; Bianca Gandolfo: Yes, you could.
&gt;&gt; Phil: That would be the same thing?

92
00:05:38.171 --> 00:05:39.586
&gt;&gt; Bianca Gandolfo: Basically, yes.

93
00:05:39.586 --> 00:05:41.962
&gt;&gt; Phil: Okay.

94
00:05:41.962 --> 00:05:47.042
&gt;&gt; Bianca Gandolfo: The cool thing about
the fact that we can save a function

95
00:05:47.042 --> 00:05:54.830
to variable like this shows us that in
JavaScript, a function is just data.

96
00:05:54.830 --> 00:05:59.530
So that's kinda cool and that's why we
can return functions from functions like

97
00:05:59.530 --> 00:06:01.337
makeLog, is because of that.

98
00:06:04.172 --> 00:06:08.715
&gt;&gt; Phil: So, if on the second line,
makeLog, if you wrote that function space

99
00:06:08.715 --> 00:06:13.337
makeLog parentheses, you wrote it
that way, you can still return it?

100
00:06:13.337 --> 00:06:16.950
&gt;&gt; Bianca Gandolfo: Yeah,
you can return it anyway.

101
00:06:16.950 --> 00:06:21.422
So this is an anonymous
function stored in a variable.

102
00:06:21.422 --> 00:06:26.877
If we had makeLog,
&gt;&gt; Bianca Gandolfo: Like this,

103
00:06:26.877 --> 00:06:31.329
function makeLog,
this is called a named function.

104
00:06:32.850 --> 00:06:34.754
So this is getting-
&gt;&gt; Phil: Working this case the same way?

105
00:06:34.754 --> 00:06:36.754
&gt;&gt; Bianca Gandolfo: Yeah,
it would work the same way.

106
00:06:36.754 --> 00:06:38.754
And you could even do-
&gt;&gt; Phil: So why would we call it?

107
00:06:41.837 --> 00:06:43.463
&gt;&gt; Bianca Gandolfo: Why would
you use one over the other?

108
00:06:43.463 --> 00:06:45.700
&gt;&gt; Phil: Is it a matter of
personal preference or?

109
00:06:45.700 --> 00:06:50.502
&gt;&gt; Bianca Gandolfo: It's mostly,
it has a lot to do with scope actually is

110
00:06:50.502 --> 00:06:56.370
where at what point in your
code can you call the function?

111
00:06:56.370 --> 00:07:01.380
If you store it in
a variable like makeLog,

112
00:07:01.380 --> 00:07:06.000
then you can't call the function

113
00:07:07.090 --> 00:07:11.340
until this line has been
called in that scope.

114
00:07:11.340 --> 00:07:16.180
But if you had it the other way,
we could call makeLog up here.

115
00:07:18.130 --> 00:07:21.420
Something called hoisting which
happens to all variables, but

116
00:07:21.420 --> 00:07:23.510
when you name a function,

117
00:07:23.510 --> 00:07:28.060
it doesn't hoist the initialization of it,
it hoists the entire definition.

118
00:07:28.060 --> 00:07:32.550
So you could call it and the reason it's a
little bit dangerous to do it this way is

119
00:07:32.550 --> 00:07:39.370
because if you have an if else statement
with two functions of the same name,

120
00:07:39.370 --> 00:07:43.390
and the hoisting will overwrite
it in ways that aren't expected.

121
00:07:43.390 --> 00:07:52.129
So in general, I recommend just to call
it to store in a variable like this.

122
00:07:55.087 --> 00:07:56.628
&gt;&gt; Bianca Gandolfo: Cool.

123
00:07:56.628 --> 00:08:01.672
&gt;&gt; Speaker 2: So I think I was confused
about the value of Alice because we're

124
00:08:01.672 --> 00:08:06.147
defining Alice after makeLog but
because it's still in

125
00:08:06.147 --> 00:08:11.070
the parent scope of that console
log has access to variable.

126
00:08:11.070 --> 00:08:15.540
&gt;&gt; Bianca Gandolfo: Mm-hm, because we
actually initialize this and, excuse me,

127
00:08:15.540 --> 00:08:22.330
and gave it a value before
we actually called makelog.

128
00:08:22.330 --> 00:08:24.926
&gt;&gt; Speaker 2: Is that
because of hoisting as well,

129
00:08:24.926 --> 00:08:29.215
it hoists it to the top of the function,
sayAlice function?

130
00:08:29.215 --> 00:08:31.286
&gt;&gt; Bianca Gandolfo: Yeah,
that's part of it, but

131
00:08:31.286 --> 00:08:36.640
the fact that it has a value is because
of the order in which it's called, yeah.

132
00:08:39.962 --> 00:08:42.212
&gt;&gt; Bianca Gandolfo: So
here's a stopwatch example.

133
00:08:44.254 --> 00:08:48.860
&gt;&gt; Bianca Gandolfo: So,
&gt;&gt; Bianca Gandolfo: Let's see.

134
00:08:48.860 --> 00:08:54.160
So makeStopwatch is called here, so
we enter into this block of code.

135
00:08:56.230 --> 00:09:02.330
And it's gonna console.log('initialized')
and we're gonna set elapsed at 0.

136
00:09:02.330 --> 00:09:05.690
Then we're gonna console.log(elapsed),
just to see what it is.

137
00:09:06.780 --> 00:09:11.600
And you'll notice too that these two
console logs will only be run once

138
00:09:12.760 --> 00:09:15.070
every time you call makeStopwatch.

139
00:09:15.070 --> 00:09:20.836
So even if we called,
&gt;&gt; Bianca Gandolfo: Called x down here,

140
00:09:20.836 --> 00:09:25.879
these two console.log's won't run,
because we're not ever going back up here.

141
00:09:27.672 --> 00:09:30.270
&gt;&gt; Bianca Gandolfo: We're just gonna
go immediately inside of this function.

142
00:09:32.190 --> 00:09:35.666
So then we have this stopwatch
function which all it will do is

143
00:09:35.666 --> 00:09:38.675
console.log('stopwatch') and
return elapsed.

144
00:09:40.280 --> 00:09:43.504
But we're gonna skip over it
cuz we haven't even called it.

145
00:09:43.504 --> 00:09:48.753
Then we have this increase function
which is on a setInterval.

146
00:09:48.753 --> 00:09:54.255
So like setInterval, I'm sorry,
like setTimeout that we saw earlier,

147
00:09:54.255 --> 00:09:58.605
setInterval will just,
it's not a blocking operation,

148
00:09:58.605 --> 00:10:03.421
it will just call increase every
one second basically forever.

149
00:10:03.421 --> 00:10:07.445
So, we'll just keep calling increase,
so this is our stopwatch,

150
00:10:07.445 --> 00:10:08.797
it will keep the time.

151
00:10:08.797 --> 00:10:11.387
And then when we return stopwatch,
and again,

152
00:10:11.387 --> 00:10:15.030
stopwatch is this function,
that's just gonna return elapsed.

153
00:10:16.730 --> 00:10:17.630
So let's investigate.

154
00:10:18.800 --> 00:10:23.254
So let's investigate what happens.

155
00:10:28.004 --> 00:10:30.672
&gt;&gt; Bianca Gandolfo: Let's pop this out,
see if I can make it bigger.

156
00:10:33.421 --> 00:10:34.170
&gt;&gt; Bianca Gandolfo: Nope.

157
00:10:36.962 --> 00:10:41.880
&gt;&gt; Bianca Gandolfo: Hm,
it's not making it, there we go.

158
00:10:41.880 --> 00:10:45.581
So I'm just putting that code in there and

159
00:10:45.581 --> 00:10:51.629
then we can say var watch =
makeStopwatch and we're gonna call it.

160
00:10:51.629 --> 00:10:56.520
And so we see that initialized and
0 are called and

161
00:10:56.520 --> 00:11:01.878
we have otherWatch and
we can do makeStopwatch again,

162
00:11:01.878 --> 00:11:04.920
oops, makeStopwatch again.

163
00:11:04.920 --> 00:11:12.970
And we see that those two console logs
happen, the very beginning here again.

164
00:11:12.970 --> 00:11:20.665
However, when we call watch,
&gt;&gt; Bianca Gandolfo: Initialized and

165
00:11:20.665 --> 00:11:27.210
0 aren't running and that shows us that
this code up here is only run once.

166
00:11:27.210 --> 00:11:32.473
So that scope is created once and
then we will call this down here,

167
00:11:32.473 --> 00:11:35.254
the body in here will be run again.

168
00:11:38.545 --> 00:11:40.337
&gt;&gt; Bianca Gandolfo: So we have watch.

169
00:11:40.337 --> 00:11:47.921
And then we have otherWatch, 38,
&gt;&gt; Bianca Gandolfo: Etc.

170
00:11:53.796 --> 00:11:54.569
&gt;&gt; Bianca Gandolfo: That make sense?

171
00:11:57.330 --> 00:12:01.000
So that's just another example
of how you can use closure.

