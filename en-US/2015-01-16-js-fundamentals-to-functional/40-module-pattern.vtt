WEBVTT

1
00:00:00.000 --> 00:00:03.672
[MUSIC]

2
00:00:03.672 --> 00:00:06.582
&gt;&gt; Bianca Gandolfo: So, the next thing
that I wanna talk about just at a really

3
00:00:06.582 --> 00:00:08.700
high level is the module pattern.

4
00:00:08.700 --> 00:00:10.600
Module pattern,
there's a little more to it, but

5
00:00:12.480 --> 00:00:16.770
in essence the module pattern is a way
that you can modularize your code, or

6
00:00:16.770 --> 00:00:22.720
you can do things like make sort of
class like structures in Java script.

7
00:00:22.720 --> 00:00:27.749
It's a way to construct sort
of API which is just like

8
00:00:27.749 --> 00:00:33.007
an interface of interacting
with your data and so, for

9
00:00:33.007 --> 00:00:39.546
example you can have some private
methods and private properties.

10
00:00:39.546 --> 00:00:43.120
And then, this returns an object
that has some public properties,

11
00:00:43.120 --> 00:00:47.462
which can be accessed by the public, and
there's public methods that can be run.

12
00:00:47.462 --> 00:00:52.110
And then there's a privileged method
that could access the private method.

13
00:00:52.110 --> 00:00:53.384
What this does,

14
00:00:53.384 --> 00:00:58.587
it limits what your application can
do with the data inside of here.

15
00:00:58.587 --> 00:01:03.280
And this is just sort of a overview.

16
00:01:03.280 --> 00:01:08.750
And I'll go into more detail
of how we'd actually use it.

17
00:01:08.750 --> 00:01:13.080
So, here's an example of a car function,
a constructor function.

18
00:01:13.080 --> 00:01:16.000
We can create different
kinds of cars like this.

19
00:01:16.000 --> 00:01:19.780
This would be like, if you had a car game
and you didn't want people to cheat and

20
00:01:19.780 --> 00:01:24.580
change the gasoline level, like maybe,
this maybe most boring card game

21
00:01:24.580 --> 00:01:27.088
ever where like you keep going
until you run out of gas.

22
00:01:27.088 --> 00:01:32.493
[LAUGH] And so, how you would,
what you would do to sort of

23
00:01:32.493 --> 00:01:37.785
limit that cheating is that
we'd have this privileged

24
00:01:37.785 --> 00:01:44.713
method here that's called go which
calls useGas and passes the speed.

25
00:01:44.713 --> 00:01:49.607
And so, what that does is that you can't
change the gasoline level directly

26
00:01:49.607 --> 00:01:53.520
on the car, and let's just run
this just to kinda look at it.

27
00:01:53.520 --> 00:01:57.390
So, no, my timer's still going.

28
00:01:57.390 --> 00:02:04.840
So, we have here our cars, so
we can say like var, what's a kind of car.

29
00:02:04.840 --> 00:02:07.212
I don't know.
&gt;&gt; Speaker 2: A Ferrari.

30
00:02:07.212 --> 00:02:08.421
&gt;&gt; Bianca Gandolfo: A Ferrari.

31
00:02:08.421 --> 00:02:12.462
How do you spell Ferrari?
&gt;&gt; Speaker 2: F-E-R-R-A-R-I.

32
00:02:12.462 --> 00:02:13.111
&gt;&gt; Bianca Gandolfo: Okay,

33
00:02:13.111 --> 00:02:17.010
equals car [INAUDIBLE] take anything, no.

34
00:02:18.430 --> 00:02:20.710
So, now we have our Ferrari and
we can look at it.

35
00:02:20.710 --> 00:02:24.220
So, a Ferrari is an object
that has a go function, and

36
00:02:24.220 --> 00:02:27.960
you can change the radio station and
also you can just see the radio station.

37
00:02:29.380 --> 00:02:35.520
And so, if we wanted to say
ferrari.go(2) and we can pass our speed.

38
00:02:35.520 --> 00:02:40.460
So, let's we're going to, everyone goes,
the speed limits about two, right?

39
00:02:42.000 --> 00:02:44.480
No?
Okay, so quiet today you guys.

40
00:02:46.390 --> 00:02:52.330
And so, you can keep going until you run
out of gas, and it will print out of gas.

41
00:02:54.400 --> 00:02:59.830
And so, we see here when we use gas,
we pass it's speed and it goes up here.

42
00:02:59.830 --> 00:03:02.680
And useGas is a private function.

43
00:03:03.690 --> 00:03:07.836
So, we can't change how the gas is used.

44
00:03:07.836 --> 00:03:11.815
And so, this would prevent someone
from cheating on the car game,

45
00:03:11.815 --> 00:03:16.378
where they would give themselves more
gas than someone else, for example.

46
00:03:16.378 --> 00:03:22.424
And the whole idea here is sort of
abstracting away what is important and

47
00:03:22.424 --> 00:03:25.970
what is not dangerous for someone to use?

48
00:03:25.970 --> 00:03:28.900
If you think about just
the car metaphor in general,

49
00:03:28.900 --> 00:03:32.740
when we talk about APIs we would say,

50
00:03:34.810 --> 00:03:39.870
so to drive a car you don't have to
know how the engine works, right?

51
00:03:39.870 --> 00:03:42.690
And in fact, it's better that when
you're driving the car that you're not

52
00:03:42.690 --> 00:03:44.040
touching the engine.

53
00:03:44.040 --> 00:03:48.776
You're just only touching what
is public to you which is

54
00:03:48.776 --> 00:03:54.129
the steering wheel,
maybe the ignition, the shifter thing.

55
00:03:54.129 --> 00:03:58.631
And so, our car API is abstracting away
how the engines actually working, so

56
00:03:58.631 --> 00:04:02.719
you can drive a car and not actually
understand how the engine works and

57
00:04:02.719 --> 00:04:06.042
it might be dangerous if you did,
and you went in there and

58
00:04:06.042 --> 00:04:09.120
started messing around with it,
and then it broke.

59
00:04:09.120 --> 00:04:10.560
So, that's the same idea here.

60
00:04:10.560 --> 00:04:14.650
So, we have some things that are private
in our car, like the gasoline level and

61
00:04:14.650 --> 00:04:16.970
how to use the gas in general.

62
00:04:16.970 --> 00:04:20.080
Whereas something that's less dangerous
like changing the radio station or

63
00:04:20.080 --> 00:04:21.520
just going.

64
00:04:21.520 --> 00:04:23.970
So go,
would be like pressing the ignition.

65
00:04:24.980 --> 00:04:26.110
We have access to that.

66
00:04:27.320 --> 00:04:30.540
And so, we can use closures
to create an interface like

67
00:04:30.540 --> 00:04:34.840
that.
&gt;&gt; Bianca Gandolfo: Does that make sense?

68
00:04:34.840 --> 00:04:35.450
Thumbs on that?

69
00:04:37.390 --> 00:04:46.120
Thumbs?
&gt;&gt; Speaker 2: So,

70
00:04:46.120 --> 00:04:49.890
is this kinda building on the closure?
&gt;&gt; Bianca Gandolfo: Yeah, so

71
00:04:49.890 --> 00:04:50.970
this is using a closure.

72
00:04:50.970 --> 00:04:53.341
See how we're returning this object-
&gt;&gt; Speaker 2: That useGas is kinda

73
00:04:53.341 --> 00:04:58.292
the function within the function?
&gt;&gt; Bianca Gandolfo: Yeah, exactly,

74
00:04:58.292 --> 00:05:05.379
exactly and that's just another
way to think about closure.

75
00:05:05.379 --> 00:05:06.800
Any questions about closures?

76
00:05:06.800 --> 00:05:11.960
Because we're gonna keep moving.
&gt;&gt; Speaker 3: To make a comment on that,

77
00:05:11.960 --> 00:05:16.250
where before when we were naming
a function it was a global scope,

78
00:05:16.250 --> 00:05:21.505
this one is not, it's a function scope
cuz it's defined within that function?

79
00:05:21.505 --> 00:05:23.280
&gt;&gt; Bianca Gandolfo: Mm-hm, yeah, exactly.

80
00:05:23.280 --> 00:05:28.220
And you can use a module
pattern to organize your whole

81
00:05:28.220 --> 00:05:30.590
code base into different modules as well.

82
00:05:30.590 --> 00:05:34.700
So, you have private components
of your app that you can use.

83
00:05:34.700 --> 00:05:38.450
So, the module pattern is used all over
and this is just a simple example of

84
00:05:38.450 --> 00:05:41.520
how we could use the module
pattern to make classes,

85
00:05:42.800 --> 00:05:47.140
as like a factory to make objects, mm-hm.
&gt;&gt; Speaker 3: Can you

86
00:05:47.140 --> 00:05:50.740
call a function within one of
the functions that you're returning?

87
00:05:50.740 --> 00:05:55.795
So for example, here could you call
the go function within the change station

88
00:05:55.795 --> 00:06:00.672
function?
&gt;&gt; Bianca Gandolfo: Yep, you could.

89
00:06:00.672 --> 00:06:02.662
&gt;&gt; Speaker 3: Okay.

