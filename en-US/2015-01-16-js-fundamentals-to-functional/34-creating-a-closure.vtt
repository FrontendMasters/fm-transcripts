WEBVTT

1
00:00:00.000 --> 00:00:03.880
[MUSIC]

2
00:00:03.880 --> 00:00:07.735
&gt;&gt; Bianca Gandolfo: So here is the same
thing, except hold on, I like it when it

3
00:00:07.735 --> 00:00:11.899
says, I'm stuck in a closure.
&gt;&gt; Bianca Gandolfo: Let's put that

4
00:00:11.899 --> 00:00:15.866
there.
&gt;&gt; Bianca Gandolfo: I see,

5
00:00:15.866 --> 00:00:17.130
that's why I changed it.

6
00:00:17.130 --> 00:00:20.300
Never mind, it can't do it.

7
00:00:20.300 --> 00:00:20.800
Done.

8
00:00:21.920 --> 00:00:23.671
So here we have our closureAlert.

9
00:00:23.671 --> 00:00:28.137
The one thing that we did
change here is we change x to 0

10
00:00:28.137 --> 00:00:32.421
because we're gonna be
changing it when we alert.

11
00:00:32.421 --> 00:00:35.783
And the other thing that we change is
instead of calling it inside of here,

12
00:00:35.783 --> 00:00:37.940
we're just returning it.

13
00:00:37.940 --> 00:00:40.530
This is really similar from our
scope exercises as well, right?

14
00:00:42.010 --> 00:00:47.278
So we return alerter,
&gt;&gt; Bianca Gandolfo: Which means that when

15
00:00:47.278 --> 00:00:53.420
we call closureAlert,
we enter into the function body, right?

16
00:00:54.530 --> 00:00:56.600
First thing it does is initializes x at 0.

17
00:00:56.600 --> 00:01:00.050
It sees that we have, whoops.

18
00:01:00.050 --> 00:01:04.410
It sees that we have this alerter
function, skips over it and

19
00:01:04.410 --> 00:01:05.280
then returns it.

20
00:01:07.390 --> 00:01:15.950
And so our funcStorer is storing alerter.

21
00:01:15.950 --> 00:01:18.267
And let's just put that in the console so

22
00:01:18.267 --> 00:01:23.601
we can look at it.
&gt;&gt; Bianca Gandolfo: So,

23
00:01:23.601 --> 00:01:28.230
if we just type out funcStorer here, we
see that it's just that function, right?

24
00:01:28.230 --> 00:01:31.210
And the same with funcStorer2.

25
00:01:33.370 --> 00:01:37.990
Again, and what's it doing is
incrementing x and then returning x.

26
00:01:37.990 --> 00:01:39.650
That's what ++x means.

27
00:01:39.650 --> 00:01:42.480
So you add 1 to x, then you return it.

28
00:01:43.950 --> 00:01:51.097
Whereas x++ is you return and then you
add, so it doesn't show up as well.

29
00:01:51.097 --> 00:01:55.162
So, if we wanted to then call alerter,

30
00:01:55.162 --> 00:02:03.181
how do we go about doing that?
&gt;&gt; Speaker 2: funcStore and

31
00:02:03.181 --> 00:02:05.419
then indication?
&gt;&gt; Bianca Gandolfo: Yeah, so

32
00:02:05.419 --> 00:02:10.025
we just have funcStorer.
&gt;&gt; Bianca Gandolfo: And

33
00:02:10.025 --> 00:02:14.696
we call it just like that.
&gt;&gt; Bianca Gandolfo: What's it gonna

34
00:02:14.696 --> 00:02:19.546
alert?
&gt;&gt; Speaker 3: One.

35
00:02:19.546 --> 00:02:20.844
&gt;&gt; Bianca Gandolfo: Yep, and

36
00:02:20.844 --> 00:02:25.378
then if we call it again?
&gt;&gt; Speaker 3: Two.

37
00:02:25.378 --> 00:02:26.380
&gt;&gt; Bianca Gandolfo: Two.

38
00:02:28.504 --> 00:02:29.630
&gt;&gt; Bianca Gandolfo: Why is it two?

39
00:02:37.504 --> 00:02:39.509
&gt;&gt; Speaker 4: It remembers the scope that

40
00:02:39.509 --> 00:02:41.963
it was in.
&gt;&gt; Bianca Gandolfo: Mm-hm.

41
00:02:44.379 --> 00:02:45.012
&gt;&gt; Bianca Gandolfo: And so

42
00:02:45.012 --> 00:02:50.320
this is our closure.
&gt;&gt; Bianca Gandolfo: Which is a fancy word.

43
00:02:52.370 --> 00:02:55.870
Just forget the word for now, but
for those of you who are wondering,

44
00:02:55.870 --> 00:02:58.270
that's the closure, and
I'll talk about it a little bit more.

45
00:02:59.970 --> 00:03:02.968
So when funcStorer, we call it,

46
00:03:02.968 --> 00:03:08.380
it's totally referenced
to this alerter function.

47
00:03:08.380 --> 00:03:13.940
So you can kind of imagine that when we
call it, it goes into this function body

48
00:03:13.940 --> 00:03:18.660
and increments x,
then returns it as an alert.

49
00:03:18.660 --> 00:03:20.080
And so x is then 1.

50
00:03:20.080 --> 00:03:22.010
If we call it again.

51
00:03:22.010 --> 00:03:23.910
And I see I'll call you in a second.

52
00:03:25.450 --> 00:03:30.001
Call it again, so this is 1,
it's gonna go back

53
00:03:30.001 --> 00:03:34.776
inside alerter and
it's gonna increment again and

54
00:03:34.776 --> 00:03:38.500
alert it, it's gonna alert two.
&gt;&gt; Speaker 5: Is

55
00:03:38.500 --> 00:03:41.870
that because we're really
kind of storing it?

56
00:03:41.870 --> 00:03:45.505
We're not calling closureAlert,
we're storing it.

57
00:03:45.505 --> 00:03:49.026
Sort of referenced to it.
&gt;&gt; Bianca Gandolfo: Yeah, yeah, so

58
00:03:49.026 --> 00:03:55.758
you're storing it in a variable so that we
can access it later and call it later and

59
00:03:55.758 --> 00:04:02.206
that function because of lexical scope
has access to its parent scope still.

60
00:04:02.206 --> 00:04:06.840
So in a way it remembers
the environment that it's from.

61
00:04:06.840 --> 00:04:07.854
&gt;&gt; Speaker 4: So you're calling

62
00:04:07.854 --> 00:04:12.225
the closureAlert but the closureAlert is
returning a function it's going to find

63
00:04:12.225 --> 00:04:13.330
internally.
&gt;&gt; Bianca Gandolfo: Mm-hm.

64
00:04:14.740 --> 00:04:15.670
&gt;&gt; Speaker 4: But you haven't executed

65
00:04:15.670 --> 00:04:18.910
that internal function yet.
&gt;&gt; Speaker 5: So the difference would be

66
00:04:18.910 --> 00:04:25.060
if we on the console just
invoked closureAlert twice, you

67
00:04:25.060 --> 00:04:29.970
just get 1 every time you do closureAlert.
&gt;&gt; Speaker 4: You would get.

68
00:04:29.970 --> 00:04:31.830
&gt;&gt; Speaker 5: If you're not storing it.

69
00:04:31.830 --> 00:04:32.340
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

70
00:04:32.340 --> 00:04:33.110
&gt;&gt; Speaker 4: You would get a new copy of

71
00:04:33.110 --> 00:04:36.870
the alerted function as the return value.
&gt;&gt; Bianca Gandolfo: Mm-hm.

72
00:04:36.870 --> 00:04:43.350
So, if we did funcStorer2, that's still

73
00:04:43.350 --> 00:04:47.430
gonna alert 1 because every time we call
a function it creates a brand new scope.

74
00:04:51.140 --> 00:04:54.863
And did you have a question, Mark?
&gt;&gt; Speaker 2: [COUGH] I just wanted you to

75
00:04:54.863 --> 00:04:58.950
cover preincrement versus post increment.
&gt;&gt; Bianca Gandolfo: Mm.

76
00:04:58.950 --> 00:05:00.260
&gt;&gt; Speaker 2: And then the other question

77
00:05:00.260 --> 00:05:03.804
was is return alerter the same
as calling invoking alerter?

78
00:05:05.000 --> 00:05:05.960
And I think-
&gt;&gt; Bianca Gandolfo: Okay.

79
00:05:07.740 --> 00:05:12.032
So as far as the incrementer here,

80
00:05:12.032 --> 00:05:17.212
++x, what that does is it adds 1 to x and

81
00:05:17.212 --> 00:05:21.356
then returns it, versus x++,

82
00:05:21.356 --> 00:05:26.690
it returns x first and then increments it.

83
00:05:27.990 --> 00:05:29.990
But that's not important.
&gt;&gt; Speaker 6: By returns you mean

84
00:05:29.990 --> 00:05:32.800
make available to the alert function?
&gt;&gt; Bianca Gandolfo: Yes, yes.

85
00:05:32.800 --> 00:05:36.006
So if we changed it then it would first,

86
00:05:36.006 --> 00:05:41.140
if we did this it would say 0 and
it just isn't very good for my example.

87
00:05:41.140 --> 00:05:46.037
Da, and then the second question is,
is returning alerter the same as

88
00:05:46.037 --> 00:05:50.770
invoking it and returning it, and
the question is absolutely not.

89
00:05:51.790 --> 00:05:57.780
Because if we're invoking it here,
then we can't call it down here.

90
00:05:57.780 --> 00:05:59.980
What we're doing when we don't invoke it,

91
00:05:59.980 --> 00:06:03.510
is that we're just returning
the function definition itself.

92
00:06:03.510 --> 00:06:07.988
So, instead of returning it, if we, right
here we can like console log it here.

93
00:06:07.988 --> 00:06:10.670
Console.log, (alerter).

94
00:06:10.670 --> 00:06:12.790
And this will show us
what we're gonna return.

95
00:06:14.270 --> 00:06:16.310
We'll put this in the console and
kind of look at it.

96
00:06:18.140 --> 00:06:20.140
So again,
we're just console logging alerter.

97
00:06:20.140 --> 00:06:22.210
And then, it's gonna be returned.

98
00:06:22.210 --> 00:06:26.341
And so we know whatever this function
returns is then gonna be stored in this

99
00:06:26.341 --> 00:06:32.852
variable.
&gt;&gt; Bianca Gandolfo: Yeah,

100
00:06:32.852 --> 00:06:34.400
and then there's our console log.

101
00:06:36.340 --> 00:06:37.440
There's our console log there and

102
00:06:37.440 --> 00:06:41.230
then we can also look at funcStorer and
we see that it's the same thing.

103
00:06:41.230 --> 00:06:45.080
And since it's a function now,
we can call it.

104
00:06:45.080 --> 00:06:48.130
If it wasn't a function,
we couldn't call it.

105
00:06:49.330 --> 00:06:54.730
So for example,
if we just returned alerter and

106
00:06:54.730 --> 00:07:01.120
called it already, it's gonna return
whatever this function is returning.

107
00:07:01.120 --> 00:07:03.297
So in this case,
it's not returning anything.

108
00:07:03.297 --> 00:07:07.649
But if we wanted to put a return there,

109
00:07:07.649 --> 00:07:12.546
just for the example, we can return true.

110
00:07:12.546 --> 00:07:16.690
So the change here is inside the alerter
function, I'm returning true.

111
00:07:16.690 --> 00:07:21.500
And then instead of just returning
the function definition, I'm returning and

112
00:07:21.500 --> 00:07:26.379
invoking the function, so it's gonna
invoke the function, and return whatever

113
00:07:26.379 --> 00:07:35.337
that function invokes.
&gt;&gt; Bianca Gandolfo: Cool,

114
00:07:35.337 --> 00:07:42.185
oops.
&gt;&gt; Bianca Gandolfo: So

115
00:07:42.185 --> 00:07:46.710
then if we look at funcStorer now,
it's undefined.

116
00:07:46.710 --> 00:07:47.210
That's weird.

117
00:07:48.920 --> 00:07:49.780
I changed it.

118
00:07:49.780 --> 00:07:53.630
So, I guess I erased that return true.

119
00:07:53.630 --> 00:07:57.461
So it's undefined because this
function is returning undefined.

120
00:08:00.046 --> 00:08:03.656
&gt;&gt; Bianca Gandolfo: But if we return true,

121
00:08:03.656 --> 00:08:08.600
return true, and then did it.

122
00:08:08.600 --> 00:08:14.910
And we looked at funcStorer,
and now holds the value true.

123
00:08:14.910 --> 00:08:18.480
And you can't, true is not a function,
true is a value,

124
00:08:18.480 --> 00:08:22.330
so you couldn't call true,
that doesn't make sense.

125
00:08:23.960 --> 00:08:27.500
So that's why we want
funcStorer to be a function and

126
00:08:27.500 --> 00:08:31.470
not the result of the function.

127
00:08:31.470 --> 00:08:36.437
So that we have this little window into
that parent scope that we can access laer

128
00:08:36.437 --> 00:08:41.914
and it can be very powerful.
&gt;&gt; Bianca Gandolfo: And now since

129
00:08:41.914 --> 00:08:47.629
funcStorer is a function, we can go ahead
and call it and then we can call it again.

130
00:08:47.629 --> 00:08:49.458
And this is our counter, we can count.

