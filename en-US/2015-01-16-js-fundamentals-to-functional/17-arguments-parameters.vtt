WEBVTT

1
00:00:00.000 --> 00:00:03.925
[MUSIC]

2
00:00:03.925 --> 00:00:06.681
&gt;&gt; Bianca Gandolfo: So now I wanna talk
a little bit about the difference between

3
00:00:06.681 --> 00:00:10.042
arguments and parameters, and
this is something that's like really,

4
00:00:10.042 --> 00:00:11.870
is really confused by people.

5
00:00:11.870 --> 00:00:15.378
So there are different,
they're not interchangeable.

6
00:00:15.378 --> 00:00:19.490
Invocation and
call-time mean the same thing.

7
00:00:19.490 --> 00:00:22.060
Arguments and
parameters are fundamentally different.

8
00:00:22.060 --> 00:00:27.306
So, parameters, like I was saying,
are right after the function definition,

9
00:00:27.306 --> 00:00:30.870
or function key word and
they're just place holders.

10
00:00:30.870 --> 00:00:33.270
So, they're like variables, right?

11
00:00:33.270 --> 00:00:38.250
They hold values but
before call time, they have no value.

12
00:00:38.250 --> 00:00:39.120
They are undefined.

13
00:00:40.140 --> 00:00:44.430
And the way they get a value
is if you pass them arguments,

14
00:00:44.430 --> 00:00:47.918
just like when we were
improving Tanner's name.

15
00:00:47.918 --> 00:00:52.910
What was it?

16
00:00:52.910 --> 00:00:53.970
What was it?

17
00:00:55.760 --> 00:00:57.150
Buff.

18
00:00:57.150 --> 00:00:59.163
So name and adj at this,

19
00:00:59.163 --> 00:01:05.110
when I'm walking through the code
at this line, the first line here.

20
00:01:05.110 --> 00:01:08.530
Name an adj have no value.

21
00:01:08.530 --> 00:01:11.760
This doesn't even run yet,
so it skips to the end.

22
00:01:11.760 --> 00:01:19.330
And once it gets here, that's when we're
giving name and adj Adjective, the value.

23
00:01:19.330 --> 00:01:21.300
So, Tanner and Buff are then,

24
00:01:22.565 --> 00:01:26.660
given a value to our parameters,
and order is important.

25
00:01:26.660 --> 00:01:28.200
So, they map by order.

26
00:01:28.200 --> 00:01:30.810
So, name is the first one.

27
00:01:30.810 --> 00:01:33.870
So, the first argument is gonna give
the first parameter it's name, so

28
00:01:33.870 --> 00:01:36.880
name is then Tanner.

29
00:01:36.880 --> 00:01:38.960
And then the second one buff is then adj.

30
00:01:40.660 --> 00:01:43.620
And there's no way you can,
you can't mix up the order.

31
00:01:43.620 --> 00:01:49.010
The order is super, super important, and
that's the only way that your code knows

32
00:01:49.010 --> 00:01:55.680
which argument goes with which parameter.
&gt;&gt; Bianca Gandolfo: Cool.

33
00:01:57.130 --> 00:01:57.800
&gt;&gt; Speaker 2: Which one,

34
00:01:57.800 --> 00:02:01.350
so name and adj are the parameters?
&gt;&gt; Bianca Gandolfo: Yes.

35
00:02:01.350 --> 00:02:01.960
&gt;&gt; Speaker 2: And tanner and

36
00:02:01.960 --> 00:02:03.070
buff are the arguments?

37
00:02:03.070 --> 00:02:06.990
&gt;&gt; Bianca Gandolfo: Yes.
&gt;&gt; Speaker 2: Okay.

38
00:02:06.990 --> 00:02:07.530
&gt;&gt; Bianca Gandolfo: And the words

39
00:02:07.530 --> 00:02:10.745
themselves, aren't that important,
it's just the concept.

40
00:02:10.745 --> 00:02:15.776
That these are variable like,
and that they're placeholders,

41
00:02:15.776 --> 00:02:18.710
and this is the actual value, right?

42
00:02:20.200 --> 00:02:23.970
And you can kind of tell that these
are variable like just cuz they don't have

43
00:02:25.870 --> 00:02:28.970
like, they're not keywords
like function or return.

44
00:02:28.970 --> 00:02:34.348
But they're also, they don't have quotes
around them, they're not any other kind

45
00:02:34.348 --> 00:02:38.532
of, data type.

46
00:02:38.532 --> 00:02:44.180
So, where do we see,
let's go through, parameters.

47
00:02:45.270 --> 00:02:48.490
So we just said that name and
adj are parameters.

48
00:02:48.490 --> 00:02:50.420
Where else do we see parameters?

49
00:02:50.420 --> 00:02:51.130
Where did we leave off,

50
00:02:51.130 --> 00:02:54.124
did we leave off at Tanner?
&gt;&gt; Speaker 3: [INAUDIBLE]

51
00:02:54.124 --> 00:02:59.200
First.
&gt;&gt; Bianca Gandolfo: So

52
00:02:59.200 --> 00:03:01.216
parameters are just the placeholders.
&gt;&gt; Speaker 3: Right.

53
00:03:01.216 --> 00:03:09.350
So after after name improver?
&gt;&gt; Bianca Gandolfo: Yeah.

54
00:03:09.350 --> 00:03:10.158
&gt;&gt; Speaker 3: Those are our arguments.

55
00:03:10.158 --> 00:03:15.722
Okay.
&gt;&gt; Bianca Gandolfo: You

56
00:03:15.722 --> 00:03:19.000
can phone a friend if you want.
&gt;&gt; Speaker 3: How about after four

57
00:03:19.000 --> 00:03:22.940
h?
&gt;&gt; Bianca Gandolfo: Close so four h is

58
00:03:22.940 --> 00:03:25.040
actually a function that's being called.
&gt;&gt; Speaker 3: Right.

59
00:03:26.080 --> 00:03:26.930
&gt;&gt; Bianca Gandolfo: But here that's

60
00:03:26.930 --> 00:03:29.400
a parameter val, that's a parameter.

61
00:03:32.650 --> 00:03:35.930
I think that's the only one,
because this function has no parameters.

62
00:03:38.280 --> 00:03:39.950
And then what about arguments?

63
00:03:39.950 --> 00:03:41.810
Where are we passing arguments?

64
00:03:41.810 --> 00:03:44.280
So arguments are past to
the function at call time.

65
00:03:47.710 --> 00:03:54.127
So, Grace, I think it's your turn.
&gt;&gt; Grace: Would

66
00:03:54.127 --> 00:03:54.888
that be something like a click?
&gt;&gt; Speaker 5: And

67
00:03:54.888 --> 00:04:00.979
then what about arguments?
&gt;&gt; Bianca Gandolfo: Yeah.

68
00:04:00.979 --> 00:04:03.600
Yeah, click.
So, click is an argument, so

69
00:04:03.600 --> 00:04:07.049
it's the string, and
this function is also an argument.

70
00:04:08.300 --> 00:04:13.300
I was wondering if before each,
isn't the function

71
00:04:14.430 --> 00:04:19.700
parameter, or is that the argument.

72
00:04:19.700 --> 00:04:22.460
So this is the argument, right here.

73
00:04:22.460 --> 00:04:28.958
That function is an argument.
&gt;&gt; Bianca Gandolfo: And

74
00:04:28.958 --> 00:04:31.576
where else do we see arguments?
&gt;&gt; Speaker 6: Right

75
00:04:31.576 --> 00:04:32.730
there?

76
00:04:32.730 --> 00:04:34.110
&gt;&gt; Bianca Gandolfo: Uh-huh.

77
00:04:34.110 --> 00:04:34.610
&gt;&gt; Speaker 6: The j query.

78
00:04:34.610 --> 00:04:35.270
&gt;&gt; Bianca Gandolfo: Yeah.

79
00:04:35.270 --> 00:04:36.190
So.
&gt;&gt; Speaker 6: button.

80
00:04:36.190 --> 00:04:36.690
&gt;&gt; Bianca Gandolfo: Yeah.

81
00:04:36.690 --> 00:04:37.640
Here.

82
00:04:37.640 --> 00:04:43.370
So this is also an argument.

83
00:04:46.780 --> 00:04:48.620
Do you see any more, Kim?
&gt;&gt; Kim: Don't

84
00:04:48.620 --> 00:04:50.560
press my buttons.
&gt;&gt; Bianca Gandolfo: Yeah,

85
00:04:50.560 --> 00:04:52.030
don't press my buttons.

86
00:04:52.030 --> 00:04:54.305
So console.log.

87
00:04:54.305 --> 00:04:57.301
In the console.log.

88
00:04:57.301 --> 00:04:58.010
Cool.

89
00:04:58.010 --> 00:04:59.070
Any questions about that?

90
00:04:59.070 --> 00:05:02.690
It's kind of a, it's kind of a gray area.

91
00:05:02.690 --> 00:05:04.109
It's easy to get them confused.

92
00:05:06.640 --> 00:05:08.840
Any questions of clarification
before I move on?

93
00:05:13.270 --> 00:05:13.770
Cool.

94
00:05:14.860 --> 00:05:17.480
So the next thing I want to talk about is

95
00:05:17.480 --> 00:05:21.110
what it means to return a value
versus having a side effect.

96
00:05:21.110 --> 00:05:26.010
So if you don't have an explicit
return statement in your function,

97
00:05:26.010 --> 00:05:27.820
it is just going to return undefined.

98
00:05:30.470 --> 00:05:31.450
Okay?

99
00:05:31.450 --> 00:05:35.500
So if we want a function to return
a value, we have to explicitly say return.

100
00:05:35.500 --> 00:05:38.440
And the thing about return is that
it is going to immediately break

101
00:05:38.440 --> 00:05:42.450
out of the function and return that value,
whether it is in an if block or

102
00:05:42.450 --> 00:05:45.610
a four loop, it is just going to
immediately return out of that function.

103
00:05:45.610 --> 00:05:49.250
So you have to be careful about where
you place your return statements, but

104
00:05:49.250 --> 00:05:52.770
if you do in fact want your
function to return a value,

105
00:05:52.770 --> 00:05:55.060
the only way you can do
that is by having a return.

106
00:05:57.970 --> 00:06:02.616
And everything else that you do
that's doing work is a side effect.

107
00:06:02.616 --> 00:06:06.230
So, this console.log here.

108
00:06:06.230 --> 00:06:09.800
That's considered a side effect, cuz
this function is not actually returning

109
00:06:09.800 --> 00:06:17.130
anything it's just console logging.
&gt;&gt; Speaker 2: So

110
00:06:17.130 --> 00:06:20.670
if you change the assignment on
a variable but don't return anything

111
00:06:20.670 --> 00:06:23.740
that's a side effect of.
&gt;&gt; Bianca Gandolfo: Totally, exactly.

112
00:06:23.740 --> 00:06:29.044
Or if you're selecting, if you're creating
dom nodes and appending them inside

113
00:06:29.044 --> 00:06:35.440
of a function that would be considered
a side effect and not returning.

114
00:06:35.440 --> 00:06:40.270
So you have an explicit return
statement which you like returns like

115
00:06:40.270 --> 00:06:41.480
some data right.

116
00:06:42.520 --> 00:06:43.840
Or you have side effects.

117
00:06:43.840 --> 00:06:45.099
And those are the two different things.

118
00:06:55.830 --> 00:06:56.350
Cool.
So

119
00:06:56.350 --> 00:06:58.500
just a quick review,
where did we leave off?

120
00:06:58.500 --> 00:06:59.890
I think it's your turn.

121
00:06:59.890 --> 00:07:00.570
Andy, right?

122
00:07:03.530 --> 00:07:09.600
So what is this add thing going to,
this add function going to return?

123
00:07:11.270 --> 00:07:12.840
Just testing your math skills.
&gt;&gt; Andy: Seven.

124
00:07:12.840 --> 00:07:13.518
&gt;&gt; Bianca Gandolfo: Hope you studied.

125
00:07:13.518 --> 00:07:14.953
Yeah.

126
00:07:14.953 --> 00:07:16.744
Seven.

127
00:07:16.744 --> 00:07:19.250
Awesome.

128
00:07:19.250 --> 00:07:23.150
And take a moment and
explain to the person next to you

129
00:07:23.150 --> 00:07:27.160
how you would change this add function so
that it would add to 13.

130
00:07:28.320 --> 00:07:29.790
And you can't minus 1.

131
00:07:31.430 --> 00:07:32.330
Wait.
Here, let me change this.

132
00:07:33.600 --> 00:07:34.100
Okay.

133
00:07:35.910 --> 00:07:38.680
Actually, it doesn't matter.

134
00:07:38.680 --> 00:07:43.186
Without doing, without someone,
I did this the other day and

135
00:07:43.186 --> 00:07:46.429
they were like 'yeah, just a+b minus 1.

136
00:07:46.429 --> 00:07:49.840
[LAUGH] That's not what I'm asking.

137
00:07:51.410 --> 00:07:55.640
So yeah, explain to your partner how
we would get this to return 13 without

138
00:07:55.640 --> 00:07:59.050
doing any extra math.
&gt;&gt; Speaker 2: You change the function.

139
00:07:59.050 --> 00:08:00.240
&gt;&gt; Bianca Gandolfo: Change the function.

140
00:08:00.240 --> 00:08:01.460
So explain to someone next to you.

141
00:08:04.890 --> 00:08:08.900
Or in the chat you can type it out if you

142
00:08:08.900 --> 00:08:16.320
want.
&gt;&gt; Bianca Gandolfo: So

143
00:08:16.320 --> 00:08:19.800
and what we're changing
is the function itself.

144
00:08:19.800 --> 00:08:23.985
Not the arguments.
&gt;&gt; Speaker 2: [INAUDIBLE]

145
00:08:23.985 --> 00:08:27.219
[CROSSTALK]

146
00:08:27.219 --> 00:08:32.533
&gt;&gt; Bianca Gandolfo: What did you come up

147
00:08:32.533 --> 00:08:37.750
with?
&gt;&gt; Speaker 2: [INAUDIBLE].

148
00:08:37.750 --> 00:08:40.710
&gt;&gt; Bianca Gandolfo: Anyone come
up with any brilliant solutions?

149
00:08:40.710 --> 00:08:42.800
This complicating coding problem.

150
00:08:49.950 --> 00:08:52.202
&gt;&gt; Speaker 2: I would add a comma C so

151
00:08:52.202 --> 00:08:55.958
that the definition has A,B,C and

152
00:08:55.958 --> 00:09:00.940
then I would return A, or B plus C.
&gt;&gt; Bianca Gandolfo: Totally.

153
00:09:03.990 --> 00:09:09.980
And here we see that we don't
need to use all the arguments,

154
00:09:09.980 --> 00:09:14.790
or even do any work on parameters.

155
00:09:16.200 --> 00:09:19.590
We can just skip them and
JavaScript is really flexible like that.

156
00:09:19.590 --> 00:09:20.740
It doesn't mind.

157
00:09:20.740 --> 00:09:23.270
And even when we did only have two here.

158
00:09:24.840 --> 00:09:25.930
A and B.

159
00:09:25.930 --> 00:09:30.039
Notice when we pass three arguments,
it just ignored them, and

160
00:09:30.039 --> 00:09:33.570
that's one of the cool things, it's one
of the dangerous things about JavaScript,

161
00:09:33.570 --> 00:09:36.410
that flexibility, but
it's also one of the cool things.

162
00:09:36.410 --> 00:09:40.930
And, what comes from that,
or a cool thing that we

163
00:09:40.930 --> 00:09:45.974
have in JavaScript that works with that is
this thing called the arguments keyword.

164
00:09:45.974 --> 00:09:50.840
And an argument's keyword
is a special keyword in

165
00:09:50.840 --> 00:09:54.330
JavaScript that lives inside functions.

166
00:09:54.330 --> 00:09:56.960
And it gets a value of

167
00:09:56.960 --> 00:10:01.520
the arguments that you pass in in
the form of an array like object.

168
00:10:02.590 --> 00:10:07.256
And what it would look like
if we passed 3,10, and

169
00:10:07.256 --> 00:10:11.300
5 to our add function, and
then we just console logged the arguments,

170
00:10:11.300 --> 00:10:14.290
it would log something that
looks a lot like an array,

171
00:10:14.290 --> 00:10:18.400
looks like an array of all the arguments
in the order that you passed them.

172
00:10:18.400 --> 00:10:24.060
And so this is really powerful when
you don't know how many arguments your

173
00:10:24.060 --> 00:10:27.349
function can take, so you can have that
flexibility like maybe you're going to add

174
00:10:28.370 --> 00:10:32.180
several numbers and you want to have it
flexible, you can add a bunch of them.

175
00:10:32.180 --> 00:10:34.136
So you can loop through it and
just add it that way.

176
00:10:34.136 --> 00:10:39.598
Another cool thing that you can
do with the arguments key word,

177
00:10:39.598 --> 00:10:43.977
is you can have different
versions of functions.

178
00:10:43.977 --> 00:10:47.250
So you can say like if you
pass three arguments do this.

179
00:10:47.250 --> 00:10:50.550
If you pass five arguments
you know do this.

180
00:10:50.550 --> 00:10:51.940
So, you can have different options for

181
00:10:51.940 --> 00:10:55.560
how your function works.
&gt;&gt; Speaker 5: So,

182
00:10:55.560 --> 00:10:59.070
if we define the function
with the empty brackets.

183
00:10:59.070 --> 00:11:00.540
Instead of (a, b), it's just empty.

184
00:11:01.650 --> 00:11:08.383
But when you call the function,
you add I wanted to say 3, 4 arguments or

185
00:11:08.383 --> 00:11:14.661
prime or arguments.
&gt;&gt; Speaker 5: Then two acts as those,

186
00:11:14.661 --> 00:11:18.395
do you have to kinda loop through
this argument's list or array I mean?

187
00:11:18.395 --> 00:11:20.820
&gt;&gt; Bianca Gandolfo: Mm-hm.

188
00:11:20.820 --> 00:11:23.584
Yeah, so if you had a bunch.
&gt;&gt; Speaker 5: Because that's the only

189
00:11:23.584 --> 00:11:26.200
way you'd like reference something.
&gt;&gt; Bianca Gandolfo: I might have that

190
00:11:26.200 --> 00:11:29.636
slide.
&gt;&gt; Bianca Gandolfo: No, I don't.

191
00:11:29.636 --> 00:11:32.590
&gt;&gt; Speaker 5: [COUGH]

192
00:11:32.590 --> 00:11:33.800
&gt;&gt; Bianca Gandolfo: So if you did want to,

193
00:11:33.800 --> 00:11:37.530
have this all add together, you know,

194
00:11:38.910 --> 00:11:43.800
what you could do is,
you know do our for loop, remember this?

195
00:11:45.470 --> 00:11:50.480
So arguments is not an array, but it does
have a dot length property which is handy.

196
00:11:53.420 --> 00:11:58.390
And then we can have like results = 0.

197
00:11:58.390 --> 00:12:06.530
And then we can say results
+ = arguments at i.

198
00:12:06.530 --> 00:12:13.290
And so this is how we would then
just like, if you wanted to add

199
00:12:15.760 --> 00:12:21.361
all these arguments.
&gt;&gt; Bianca Gandolfo: Hopefully I

200
00:12:21.361 --> 00:12:25.740
have no syntax errors, let's see.

201
00:12:25.740 --> 00:12:28.214
Cool.
So 138.

202
00:12:30.190 --> 00:12:32.080
So that's, one use case.

203
00:12:34.820 --> 00:12:35.980
Cool.

204
00:12:35.980 --> 00:12:41.670
So, how then would we,
if we wanted to, have an equal 18,

205
00:12:41.670 --> 00:12:45.970
using the arguments keyword,
what would we change in the add function?

206
00:12:50.719 --> 00:12:54.637
&gt;&gt; Bianca Gandolfo: So if we wanted to add

207
00:12:54.637 --> 00:13:00.287
something here.
&gt;&gt; Speaker 2: Arguments

208
00:13:00.287 --> 00:13:02.240
too?
&gt;&gt; Bianca Gandolfo: Yup.

209
00:13:02.240 --> 00:13:03.826
So it'd be arguments[2].

210
00:13:03.826 --> 00:13:05.222
And that'll return 18.

211
00:13:10.450 --> 00:13:11.870
Cool.

212
00:13:11.870 --> 00:13:12.810
Awesome.

213
00:13:12.810 --> 00:13:17.170
And so I said, it really isn't an array,
its an array like object.

214
00:13:17.170 --> 00:13:18.400
What does that mean?

215
00:13:18.400 --> 00:13:20.400
Why is that important to us?

216
00:13:20.400 --> 00:13:25.920
Its important mostly for when you
are trying to use array methods on it.

217
00:13:25.920 --> 00:13:31.650
It won't have slice, for example,
which is a little unfortunate.

218
00:13:31.650 --> 00:13:35.440
But there are methods that you can,

219
00:13:37.120 --> 00:13:39.780
there are ways that you
can turn it into an array.

220
00:13:39.780 --> 00:13:43.210
And it's kind of a little bit out of the
scope of what we're doing because it goes

221
00:13:43.210 --> 00:13:47.240
into the prototype but something like
could even be typing this wrong.

222
00:13:47.240 --> 00:13:53.260
It's like prototype, call,

223
00:13:53.260 --> 00:13:57.900
that slice, dot call.

224
00:13:57.900 --> 00:14:01.220
Something like this, so
you can just google it actually,

225
00:14:01.220 --> 00:14:03.373
the exact syntax I can't remember.

226
00:14:03.373 --> 00:14:04.761
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Is it?

227
00:14:06.540 --> 00:14:07.160
Okay, cool.

228
00:14:07.160 --> 00:14:09.120
Arguments, 0.

229
00:14:09.120 --> 00:14:14.442
Thank you.
&gt;&gt; Bianca Gandolfo: So

230
00:14:14.442 --> 00:14:18.780
this would be an example of how
you would turn it into an array.

231
00:14:18.780 --> 00:14:20.499
&gt;&gt; Speaker 2: And it's array,

232
00:14:20.499 --> 00:14:21.881
it's array.

233
00:14:21.881 --> 00:14:24.105
&gt;&gt; Speaker 5: [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Mm.

234
00:14:24.105 --> 00:14:25.290
Thank you.

235
00:14:27.620 --> 00:14:28.120
Awesome.

236
00:14:31.220 --> 00:14:35.840
So, if you want to use any of
the handy array methods you will first

237
00:14:35.840 --> 00:14:39.840
have to turn it into a real array and
then you can do those operations, but

238
00:14:39.840 --> 00:14:42.450
if you're trying to do it without it,
it's going to give you an error.

239
00:14:45.590 --> 00:14:46.090
Cool.

240
00:14:48.308 --> 00:14:50.400
Also functions or objects.

241
00:14:50.400 --> 00:14:53.239
Which means those rules that
we were talking about before,

242
00:14:53.239 --> 00:14:56.440
with the dot notation and
bracket notation, all remain the same.

243
00:14:56.440 --> 00:15:01.200
I'm not going to go into a whole spiel
about it, but I hope by now you trust me,

244
00:15:01.200 --> 00:15:04.640
and I don't have to show you all
the examples that dot notation and

245
00:15:04.640 --> 00:15:08.230
bracket notation work
the same on functions.

246
00:15:08.230 --> 00:15:12.920
And you actually use this a lot for
when you're making constructors.

