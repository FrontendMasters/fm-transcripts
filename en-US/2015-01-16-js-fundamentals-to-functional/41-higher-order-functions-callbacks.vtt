WEBVTT

1
00:00:00.000 --> 00:00:04.101
[MUSIC]

2
00:00:04.101 --> 00:00:06.971
&gt;&gt; Bianca Gandolfo: So now we're gonna
talk about higher order functions and

3
00:00:06.971 --> 00:00:08.360
callbacks.

4
00:00:08.360 --> 00:00:10.310
So what is a higher order function?

5
00:00:10.310 --> 00:00:15.180
So a higher order function either
takes a function as an argument or

6
00:00:15.180 --> 00:00:18.270
it returns a function as an output.

7
00:00:18.270 --> 00:00:21.960
So we've done a lot of returning functions
when we were going through closures,

8
00:00:21.960 --> 00:00:26.710
now we're gonna talk about
how functions take functions.

9
00:00:26.710 --> 00:00:28.380
And how to master that,

10
00:00:28.380 --> 00:00:33.280
so once we get to deep diving
into our functional programming

11
00:00:33.280 --> 00:00:37.220
stuff we will have those concepts mastered
and it won't be confusing hopefully.

12
00:00:37.220 --> 00:00:43.330
So here's an example of a function
taking a function as an argument.

13
00:00:43.330 --> 00:00:44.720
So this is adding a click event.

14
00:00:46.790 --> 00:00:52.450
And the callback would
be this function here.

15
00:00:52.450 --> 00:00:55.210
So a callback is
a function as an argument.

16
00:00:55.210 --> 00:00:59.612
And then here, this looks familiar to
us cuz we've just been doing it and

17
00:00:59.612 --> 00:01:02.871
this is returning a function
from inside a function.

18
00:01:05.471 --> 00:01:06.431
&gt;&gt; Bianca Gandolfo: Cool.

19
00:01:08.432 --> 00:01:09.820
&gt;&gt; Bianca Gandolfo: So callbacks.

20
00:01:09.820 --> 00:01:13.960
So here's the example of an ifElse
statement abstracted into a function.

21
00:01:13.960 --> 00:01:16.860
And so in functional programming
we're using functions

22
00:01:18.980 --> 00:01:23.160
rather than procedures I guess.

23
00:01:23.160 --> 00:01:27.370
Or we're using functions as

24
00:01:27.370 --> 00:01:31.900
units of abstraction versus abstracting
over data in functional programming.

25
00:01:31.900 --> 00:01:35.520
And so some silly example is
you could just use an if else

26
00:01:35.520 --> 00:01:37.990
function instead of
an actual if else statement.

27
00:01:37.990 --> 00:01:44.230
And so here's an example of that,
where we are passing a condition and

28
00:01:44.230 --> 00:01:47.660
then we're passing a callback function for
the true condition and

29
00:01:47.660 --> 00:01:53.940
then we're passing a and another
callback for the is false condition

30
00:01:53.940 --> 00:01:58.720
so here for
example we are just passing true.

31
00:01:58.720 --> 00:02:05.441
So the condition is true and
it's going to enter into this block.

32
00:02:05.441 --> 00:02:08.855
So what's going to happen when

33
00:02:08.855 --> 00:02:11.566
this code runs?
&gt;&gt; Speaker 2: Console

34
00:02:11.566 --> 00:02:14.216
log true.
&gt;&gt; Speaker 3: It's going to print out

35
00:02:14.216 --> 00:02:20.300
the function The content of a function?
&gt;&gt; Bianca Gandolfo: All very good guesses.

36
00:02:20.300 --> 00:02:23.860
What's actually gonna happen is
it's gonna return undefined.

37
00:02:23.860 --> 00:02:29.234
So we're not returning these things,
and we're not calling

38
00:02:29.234 --> 00:02:36.364
them.
&gt;&gt; Bianca Gandolfo: So

39
00:02:36.364 --> 00:02:40.860
it's important to note that when you
are doing this, you need to call it.

40
00:02:40.860 --> 00:02:45.460
And so, when we call a function
that's a parameter or

41
00:02:45.460 --> 00:02:51.370
that's an argument, it's just like
referencing it as a variable.

42
00:02:51.370 --> 00:02:55.800
So if we wanna call isFalse(),
we just add the invocation operator,

43
00:02:55.800 --> 00:02:58.900
also known as two parentheses
next to that function name.

44
00:03:00.940 --> 00:03:03.640
So these are two anonymous
functions that we're passing in.

45
00:03:04.800 --> 00:03:08.500
But we could also pass
in other variable names.

46
00:03:08.500 --> 00:03:11.140
So if we have this function,

47
00:03:11.140 --> 00:03:16.120
stored at log true, you could pass
it then as log true or log false.

48
00:03:17.150 --> 00:03:18.320
And that would work just the same.

49
00:03:18.320 --> 00:03:22.930
Is true would just be log true,
would be this function

50
00:03:24.390 --> 00:03:28.230
and is false would then be log false.

51
00:03:31.650 --> 00:03:35.020
And so if we did this.

52
00:03:35.020 --> 00:03:40.860
What would happen?
&gt;&gt; Bianca Gandolfo: What's gonna happen?

53
00:03:40.860 --> 00:03:46.304
Kim, do you know?
&gt;&gt; Speaker 4: [INAUDIBLE]

54
00:03:46.304 --> 00:03:47.263
&gt;&gt; Bianca Gandolfo: What

55
00:03:47.263 --> 00:03:49.260
is it?
&gt;&gt; Speaker 4: logFalse?

56
00:03:49.260 --> 00:03:49.990
&gt;&gt; Bianca Gandolfo: Yep, it's just gonna

57
00:03:49.990 --> 00:03:52.757
logFalse.
&gt;&gt; Speaker 2: Could you go to

58
00:03:52.757 --> 00:03:54.139
the previous slide?

59
00:03:54.139 --> 00:03:56.011
It's a silly question.

60
00:03:56.011 --> 00:04:02.051
You can't put applications
in the parameter.

61
00:04:02.051 --> 00:04:02.789
&gt;&gt; Bianca Gandolfo: No, so

62
00:04:02.789 --> 00:04:06.000
it will just give you an error.

63
00:04:06.000 --> 00:04:10.610
So, the thing about parameter they're
just like un-initialized variables.

64
00:04:10.610 --> 00:04:14.170
Until you pass an argument.

65
00:04:14.170 --> 00:04:18.670
So just like a variable,
you couldn't call, if we just had var X

66
00:04:20.280 --> 00:04:25.060
here, just an uninitialized variable, you
can't call X because X is just undefined.

67
00:04:25.060 --> 00:04:26.930
So it wouldn't make sense.

68
00:04:26.930 --> 00:04:32.290
We're just here declaring them
as undefined, just saying

69
00:04:32.290 --> 00:04:37.230
if there's an argument, passed on
this place, its gonna hold a value,

70
00:04:37.230 --> 00:04:41.010
if not its just going to be undefined.
&gt;&gt; Speaker 5: There's question on the,

71
00:04:41.010 --> 00:04:44.830
can you walk-through this step by step,
they're stuck on the ifElse function and

72
00:04:44.830 --> 00:04:49.280
how it works.
&gt;&gt; Bianca Gandolfo: Yeah sure.

73
00:04:49.280 --> 00:04:50.950
So, let's do the next slide.

74
00:04:52.550 --> 00:04:57.130
So how our browser with read this,
it would say, okay great.

75
00:04:57.130 --> 00:04:59.030
We're creating a space
in memory called ifElse,

76
00:04:59.030 --> 00:05:01.250
we're gonna store a function there.

77
00:05:01.250 --> 00:05:05.606
This function just happens to have three
parameters by these names which at this

78
00:05:05.606 --> 00:05:07.500
point they have no value, right?

79
00:05:08.980 --> 00:05:14.150
Then we say logTrue is another function,
logFalse is another function,

80
00:05:15.760 --> 00:05:21.190
so then we pass to our ifElse false,
logTrue and logFalse.

81
00:05:21.190 --> 00:05:25.910
So, once we call the function,
we're gonna enter into the function body.

82
00:05:25.910 --> 00:05:28.450
And at this point is when our
parameters get their value.

83
00:05:28.450 --> 00:05:33.962
So, condition is gonna be false,
isTrue is gonna be log true,

84
00:05:33.962 --> 00:05:37.520
is false, is then log false.

85
00:05:39.050 --> 00:05:43.870
So we go into the function body now and
it says if condition.

86
00:05:43.870 --> 00:05:51.689
And so,
what happens when you put a variable or

87
00:05:51.689 --> 00:05:55.280
an expression in between
these two parenthesis.

88
00:05:55.280 --> 00:05:59.530
And it's gonna force it into a true or
false value, into a Boolean value.

89
00:05:59.530 --> 00:06:05.120
And so luckily ours is already a Boolean
value, and so condition is false.

90
00:06:05.120 --> 00:06:08.260
So if it's false it's not
gonna enter into this block,

91
00:06:08.260 --> 00:06:10.710
it will enter into the else block.

92
00:06:10.710 --> 00:06:15.780
However, if this was true, so if we change
this down here to true, so if condition,

93
00:06:15.780 --> 00:06:21.160
so this is the same as saying if
condition is true, if the value at

94
00:06:22.560 --> 00:06:30.500
condition, stored in condition is true,
enter into this part.

95
00:06:30.500 --> 00:06:34.320
And then,
since we're in this part of the block,

96
00:06:34.320 --> 00:06:37.040
this if block, it's gonna call isTrue.

97
00:06:40.360 --> 00:06:43.220
Otherwise if it's false,
it's gonna do the else.

98
00:06:43.220 --> 00:06:47.740
And then once a calls is true, it just
skips to the bottom here and it basically,

99
00:06:47.740 --> 00:06:50.449
you can just imagine it
says return undefined.

100
00:06:52.680 --> 00:06:57.900
So if its true it goes here and
then it skips down there,

101
00:06:57.900 --> 00:07:01.960
which means that this else block is
never entered if this condition is true.

102
00:07:01.960 --> 00:07:05.651
If the condition is false,
then this is never run.

103
00:07:16.110 --> 00:07:17.111
&gt;&gt; Bianca Gandolfo: Yeah.

104
00:07:17.111 --> 00:07:23.054
So and then you can read this function

105
00:07:23.054 --> 00:07:28.811
as like if True do this else do this.

