WEBVTT

1
00:00:00.000 --> 00:00:03.672
[MUSIC]

2
00:00:03.672 --> 00:00:08.780
&gt;&gt; Bianca Gandolfo: So here is
an example of how we could use Closure.

3
00:00:08.780 --> 00:00:11.130
So maybe we have this add function.

4
00:00:11.130 --> 00:00:15.290
And we want to make
a generic add function,

5
00:00:15.290 --> 00:00:21.630
like add5 = add(5).

6
00:00:21.630 --> 00:00:29.720
And now we have this add5 function that
we can call later with another number.

7
00:00:29.720 --> 00:00:31.450
Let's do a smaller number.

8
00:00:31.450 --> 00:00:33.879
And that would give us 7.

9
00:00:33.879 --> 00:00:37.960
And let's walk through
exactly how this is working.

10
00:00:37.960 --> 00:00:38.510
Let's play it again.

11
00:00:38.510 --> 00:00:42.600
Where do we leave off for
our game, do we leave off?

12
00:00:42.600 --> 00:00:43.590
Grace you went.

13
00:00:43.590 --> 00:00:44.090
Joe went.

14
00:00:44.090 --> 00:00:45.970
I think it is your turn.

15
00:00:45.970 --> 00:00:49.820
Let's walk through how this
is running in our browser.

16
00:00:51.470 --> 00:00:52.005
&gt;&gt; Speaker 2: Well,

17
00:00:52.005 --> 00:00:56.587
you set the function add as a variable.
&gt;&gt; Bianca Gandolfo: Mm-hm.

18
00:00:56.587 --> 00:00:58.320
&gt;&gt; Speaker 2: You skipped down

19
00:00:58.320 --> 00:00:59.550
to the bottom?
&gt;&gt; Bianca Gandolfo: Cool.

20
00:01:01.170 --> 00:01:02.010
Perfect.

21
00:01:02.010 --> 00:01:05.745
Okay.
&gt;&gt; Speaker 3: Variable,

22
00:01:05.745 --> 00:01:08.360
add5 = add(5).
&gt;&gt; Bianca Gandolfo: So

23
00:01:08.360 --> 00:01:12.410
we'd call the add function,
and then who's up back there?

24
00:01:12.410 --> 00:01:13.940
William.
&gt;&gt; William: So

25
00:01:16.120 --> 00:01:19.460
you'd call that function that
the variable add is pointing to.

26
00:01:19.460 --> 00:01:24.250
So the value of 5 goes into the num.
&gt;&gt; Bianca Gandolfo: Again,

27
00:01:24.250 --> 00:01:25.830
to the function body.

28
00:01:26.870 --> 00:01:28.160
Num is now 5.

29
00:01:30.400 --> 00:01:32.770
And then, Andy?
&gt;&gt; Andy: I remember

30
00:01:32.770 --> 00:01:37.475
creating a local variable called num1,
setting it to the parameter 5.

31
00:01:37.475 --> 00:01:38.171
&gt;&gt; Bianca Gandolfo: Mm-hm.

32
00:01:42.671 --> 00:01:43.225
&gt;&gt; Speaker 6: And

33
00:01:43.225 --> 00:01:47.669
a new function add to num2.

34
00:01:47.669 --> 00:01:51.090
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; Speaker 7: Just divide.

35
00:01:51.090 --> 00:01:55.095
And then you return that
function without running it.

36
00:01:55.095 --> 00:01:55.640
&gt;&gt; Bianca Gandolfo: Yep.

37
00:01:55.640 --> 00:01:57.290
So we skip over the function body here.

38
00:01:57.290 --> 00:01:59.030
This never is run.

39
00:01:59.030 --> 00:02:03.590
Then we just return,
add to num1, and then, Jake.

40
00:02:03.590 --> 00:02:06.897
&gt;&gt; Speaker 8: And it's complete?

41
00:02:06.897 --> 00:02:08.380
&gt;&gt; Bianca Gandolfo: Almost.

42
00:02:08.380 --> 00:02:15.629
So we return it, where does it return to?
&gt;&gt; Speaker 8: add5(2)?

43
00:02:15.629 --> 00:02:16.250
&gt;&gt; Bianca Gandolfo: Yeah, so

44
00:02:16.250 --> 00:02:20.991
now var add5 is whatever that
function returns, which is addToNum1,

45
00:02:20.991 --> 00:02:24.171
right?
&gt;&gt; Bianca Gandolfo: So

46
00:02:24.171 --> 00:02:25.420
now this is a function.

47
00:02:25.420 --> 00:02:31.796
And then Tanner?
&gt;&gt; Tanner: Now we're passing 5, or

48
00:02:38.190 --> 00:02:40.850
&gt;&gt; Tanner: Passing 5 into the number?

49
00:02:40.850 --> 00:02:41.790
&gt;&gt; Bianca Gandolfo: We just did that

50
00:02:41.790 --> 00:02:44.392
one so we skipped past that.
&gt;&gt; Tanner: And

51
00:02:44.392 --> 00:02:47.995
then we add 2 to 5?
&gt;&gt; Bianca Gandolfo: Mm-hm, so

52
00:02:47.995 --> 00:02:51.180
we are calling the add5 function

53
00:02:51.180 --> 00:02:52.160
&gt;&gt; Tanner: Twice.
&gt;&gt; Bianca Gandolfo: with

54
00:02:52.160 --> 00:02:52.750
the argument too.

55
00:02:52.750 --> 00:02:54.020
&gt;&gt; Tanner: Okay.
&gt;&gt; Bianca Gandolfo: No,

56
00:02:54.020 --> 00:02:54.810
we only called it once.

57
00:02:54.810 --> 00:02:56.050
We called it here.

58
00:02:56.050 --> 00:02:56.780
This is a different one.

59
00:02:56.780 --> 00:02:57.310
This is add.

60
00:02:58.330 --> 00:03:00.245
Now this one's add5.

61
00:03:00.245 --> 00:03:05.550
Add5, remember, is gonna be this function
here because that's what we returned.

62
00:03:07.320 --> 00:03:08.230
And then we pass it too.

63
00:03:08.230 --> 00:03:12.253
And then where does it go, Phil?
&gt;&gt; Speaker 10: [COUGH] Well,

64
00:03:12.253 --> 00:03:16.503
because add5 contains that function,

65
00:03:16.503 --> 00:03:20.628
it also contains the variable num1 and

66
00:03:20.628 --> 00:03:23.779
the original scope.
&gt;&gt; Bianca Gandolfo: Mm-hm.

67
00:03:23.779 --> 00:03:25.715
&gt;&gt; Speaker 10: Which is 5.

68
00:03:25.715 --> 00:03:26.940
&gt;&gt; Bianca Gandolfo: Mm-hm.

69
00:03:26.940 --> 00:03:28.402
So, we hop back up here.
&gt;&gt; Speaker 10: But

70
00:03:28.402 --> 00:03:31.914
the return statement [INAUDIBLE].

71
00:03:31.914 --> 00:03:36.120
I mean 2, 5.
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

72
00:03:36.120 --> 00:03:44.106
So we call add5 with 2, we jump up here
to the function body, num2 is now 2.

73
00:03:45.250 --> 00:03:48.180
And then we add num1 + num2.

74
00:03:48.180 --> 00:03:53.870
Num1, again, we got from
the first time that we called add.

75
00:03:53.870 --> 00:03:55.590
So, num1 = 1.

76
00:03:55.590 --> 00:04:00.520
We got 5 from here, and
because of closure we have access to

77
00:04:00.520 --> 00:04:04.460
the environment here.
&gt;&gt; Speaker 10: The previous

78
00:04:04.460 --> 00:04:05.440
environment.
&gt;&gt; Bianca Gandolfo: The previous

79
00:04:05.440 --> 00:04:07.901
environment, yes.
&gt;&gt; Bianca Gandolfo: And

80
00:04:07.901 --> 00:04:12.883
that's how we've got 7.
&gt;&gt; Speaker 10: So, if you can identify

81
00:04:12.883 --> 00:04:19.166
[INAUDIBLE] right?
&gt;&gt; Bianca Gandolfo: Well, actually,

82
00:04:19.166 --> 00:04:25.260
we add 5 and do 3
&gt;&gt; Bianca Gandolfo: it's gonna be 8.

83
00:04:28.030 --> 00:04:34.337
Why?
&gt;&gt; Speaker 11: Because the add(5)

84
00:04:34.337 --> 00:04:38.936
is retained as num1 = 5.
&gt;&gt; Bianca Gandolfo: Mm-hm.

85
00:04:38.936 --> 00:04:44.070
Because, so even though we have
reference to this scope here,

86
00:04:44.070 --> 00:04:48.190
every time we call add5,
we're creating a new scope here.

87
00:04:48.190 --> 00:04:53.190
So num2 is gonna change, and
we're not actually affecting num1.

88
00:04:53.190 --> 00:04:54.110
Num1 is being saved.

89
00:04:54.110 --> 00:04:56.660
Num1 is always gonna be 5 in add5.

90
00:04:56.660 --> 00:05:01.150
But num2 is gonna be the one that changes.

91
00:05:01.150 --> 00:05:07.300
So when we pass 2 here,

92
00:05:07.300 --> 00:05:11.921
num2 is then 2.

93
00:05:11.921 --> 00:05:15.130
And when we pass 3, at that point,
we make a new scope.

94
00:05:15.130 --> 00:05:19.940
This new scope here, but just because
we have a new scope for the addToNum1

95
00:05:19.940 --> 00:05:25.630
function, that doesn't mean the parent
scope is different, it's still the same.

96
00:05:25.630 --> 00:05:29.630
And then num2 would be 3 which would be 8.

97
00:05:36.440 --> 00:05:39.419
&gt;&gt; Speaker 11: What if we didn't have that

98
00:05:39.419 --> 00:05:41.754
addToNum function.

99
00:05:41.754 --> 00:05:46.235
Let's just assume that that whole
function definition of addToNum1 is gone.

100
00:05:46.235 --> 00:05:47.242
&gt;&gt; Bianca Gandolfo: Mm-hm.

101
00:05:47.242 --> 00:05:48.850
&gt;&gt; Speaker 11: I guess that defeats

102
00:05:48.850 --> 00:05:52.130
the purpose of that enclosure but,
&gt;&gt; Bianca Gandolfo: Mm-hm.

103
00:05:52.130 --> 00:05:53.140
&gt;&gt; Speaker 11: but you could still, so

104
00:05:53.140 --> 00:05:57.570
then that's,
then when you assign add(5) to add5,

105
00:05:57.570 --> 00:06:01.110
you're just like,
&gt;&gt; Bianca Gandolfo: It would call this

106
00:06:01.110 --> 00:06:03.254
whole thing over again.
&gt;&gt; Speaker 11: Yep.

107
00:06:03.254 --> 00:06:04.109
&gt;&gt; Bianca Gandolfo: And it would reset

108
00:06:04.109 --> 00:06:05.820
this variable.
&gt;&gt; Speaker 11: Right.

109
00:06:05.820 --> 00:06:09.160
So it'll just be like a regular
storing a function in that variable,

110
00:06:09.160 --> 00:06:10.430
like your plain vanilla?

111
00:06:10.430 --> 00:06:11.320
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 11: Got it.

112
00:06:11.320 --> 00:06:11.957
&gt;&gt; Bianca Gandolfo: Yeah, so

113
00:06:11.957 --> 00:06:16.739
the key here is that for the closure,
is that we have a function in here,

114
00:06:16.739 --> 00:06:21.332
and then we're returning it
&gt;&gt; Bianca Gandolfo: so

115
00:06:21.332 --> 00:06:25.160
that we can call it later.
&gt;&gt; Speaker 11: And then using

116
00:06:25.160 --> 00:06:31.320
the parent variable for permanence.
&gt;&gt; Bianca Gandolfo: Yeah,

117
00:06:31.320 --> 00:06:32.730
and actually we don't need this here.

118
00:06:32.730 --> 00:06:34.270
This is just for clarification.

119
00:06:34.270 --> 00:06:38.110
You could actually delete this and
call this num.

120
00:06:38.110 --> 00:06:42.890
It would actually still work.
&gt;&gt; Speaker 10: So just for fun,

121
00:06:42.890 --> 00:06:50.434
if you had after that last statement,
if you had add(10),

122
00:06:50.434 --> 00:06:54.030
and then you,
&gt;&gt; Bianca Gandolfo: Like where?

123
00:06:54.030 --> 00:06:54.570
&gt;&gt; Speaker 10: I'm sorry if you

124
00:06:54.570 --> 00:06:56.950
add.
&gt;&gt; Bianca Gandolfo: Here?

125
00:06:56.950 --> 00:06:57.855
&gt;&gt; Speaker 10: No, at the very bottom.

126
00:06:57.855 --> 00:06:58.770
&gt;&gt; Bianca Gandolfo: Mm-hm.

127
00:06:58.770 --> 00:07:03.360
&gt;&gt; Speaker 10: If you said add5 = add(10).

128
00:07:06.030 --> 00:07:08.879
&gt;&gt; Bianca Gandolfo: Add5 = add(10)?

129
00:07:08.879 --> 00:07:09.879
&gt;&gt; Speaker 10: Yes.

130
00:07:09.879 --> 00:07:10.546
&gt;&gt; Bianca Gandolfo: Mm-hm.

131
00:07:10.546 --> 00:07:12.843
&gt;&gt; Speaker 10: And then you said add5(2),

132
00:07:12.843 --> 00:07:16.005
what would you get?
&gt;&gt; Bianca Gandolfo: So

133
00:07:16.005 --> 00:07:19.964
this would be rewriting add5.

134
00:07:19.964 --> 00:07:27.860
So add5 was add(5), right,
which is gonna be this function.

135
00:07:27.860 --> 00:07:28.950
This would overwrite it.

136
00:07:28.950 --> 00:07:31.790
Oops.

137
00:07:31.790 --> 00:07:35.869
This would overwrite it.
&gt;&gt; Bianca Gandolfo: And make it 10, so

138
00:07:35.869 --> 00:07:37.060
then, whoa, okay.

139
00:07:38.870 --> 00:07:45.859
It doesn't like it when I click there.
&gt;&gt; Bianca Gandolfo: So

140
00:07:45.859 --> 00:07:50.577
if we did add5(2), then that would be 12,

141
00:07:50.577 --> 00:07:55.411
because whenever we use
an assignment like this,

142
00:07:55.411 --> 00:07:59.211
it's going to completely override and

143
00:07:59.211 --> 00:08:02.330
just delete it.
&gt;&gt; Speaker 11: Whatever was there?

144
00:08:02.330 --> 00:08:02.970
&gt;&gt; Bianca Gandolfo: Whatever was there,

145
00:08:02.970 --> 00:08:06.880
yeah.
&gt;&gt; Speaker 11: Is add5 keeping that same

146
00:08:06.880 --> 00:08:10.560
reference in memory?
&gt;&gt; Bianca Gandolfo: It will override.

147
00:08:10.560 --> 00:08:11.306
&gt;&gt; Speaker 11: It'll override

148
00:08:11.306 --> 00:08:12.210
that down.
&gt;&gt; Bianca Gandolfo: Yeah.

149
00:08:12.210 --> 00:08:13.130
It'll overwrite everything.

150
00:08:13.130 --> 00:08:17.400
Yeah, but it would be better if we
could just call that add10, right?

151
00:08:20.090 --> 00:08:24.270
But if we didn't want to do that,
it would still be the same.

