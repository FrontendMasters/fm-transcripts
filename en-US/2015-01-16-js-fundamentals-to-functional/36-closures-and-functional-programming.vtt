WEBVTT

1
00:00:00.000 --> 00:00:03.672
[MUSIC]

2
00:00:03.672 --> 00:00:08.780
&gt;&gt; Bianca Gandolfo: So here is
an example of how we could use Closure.

3
00:00:08.780 --> 00:00:11.130
So maybe we have this add function.

4
00:00:11.130 --> 00:00:15.290
And we want to make
a generic add function,

5
00:00:15.290 --> 00:00:21.630
like add5 = add(5).

6
00:00:21.630 --> 00:00:29.720
And now we have this add5 function that
we can call later with another number.

7
00:00:29.720 --> 00:00:31.450
Let's do a smaller number.

8
00:00:31.450 --> 00:00:33.879
And that would give us 7.

9
00:00:33.879 --> 00:00:37.960
And let's walk through
exactly how this is working.

10
00:00:37.960 --> 00:00:38.510
Let's play it again.

11
00:00:38.510 --> 00:00:42.600
Where do we leave off for
our game, do we leave off?

12
00:00:42.600 --> 00:00:43.590
Grace you went.

13
00:00:43.590 --> 00:00:44.090
Joe went.

14
00:00:44.090 --> 00:00:45.970
I think it is your turn.

15
00:00:45.970 --> 00:00:49.820
Let's walk through how this
is running in our browser.

16
00:00:51.470 --> 00:00:54.962
&gt;&gt; Speaker 2: Well,
you set the function add as a variable.

17
00:00:54.962 --> 00:00:56.587
&gt;&gt; Bianca Gandolfo: Mm-hm.

18
00:00:56.587 --> 00:00:59.330
&gt;&gt; Speaker 2: You skipped
down to the bottom?

19
00:00:59.330 --> 00:00:59.830
&gt;&gt; Bianca Gandolfo: Cool.

20
00:01:01.170 --> 00:01:02.010
Perfect.

21
00:01:02.010 --> 00:01:02.510
Okay.

22
00:01:04.520 --> 00:01:08.170
&gt;&gt; Speaker 3: Variable, add5 = add(5).

23
00:01:08.170 --> 00:01:12.410
&gt;&gt; Bianca Gandolfo: So we'd call the add
function, and then who's up back there?

24
00:01:12.410 --> 00:01:13.330
William.

25
00:01:13.330 --> 00:01:19.460
&gt;&gt; William: So you'd call that function
that the variable add is pointing to.

26
00:01:19.460 --> 00:01:23.750
So the value of 5 goes into the num.

27
00:01:23.750 --> 00:01:25.830
&gt;&gt; Bianca Gandolfo: Again,
to the function body.

28
00:01:26.870 --> 00:01:28.160
Num is now 5.

29
00:01:30.400 --> 00:01:31.920
And then, Andy?

30
00:01:31.920 --> 00:01:35.430
&gt;&gt; Andy: I remember creating
a local variable called num1,

31
00:01:35.430 --> 00:01:37.475
setting it to the parameter 5.

32
00:01:37.475 --> 00:01:38.171
&gt;&gt; Bianca Gandolfo: Mm-hm.

33
00:01:42.671 --> 00:01:47.669
&gt;&gt; Speaker 6: And
a new function add to num2.

34
00:01:47.669 --> 00:01:50.640
&gt;&gt; Bianca Gandolfo: Mm-hm.

35
00:01:50.640 --> 00:01:51.350
&gt;&gt; Speaker 7: Just divide.
And

36
00:01:51.350 --> 00:01:55.095
then you return that
function without running it.

37
00:01:55.095 --> 00:01:55.640
&gt;&gt; Bianca Gandolfo: Yep.

38
00:01:55.640 --> 00:01:57.290
So we skip over the function body here.

39
00:01:57.290 --> 00:01:59.030
This never is run.

40
00:01:59.030 --> 00:02:03.590
Then we just return,
add to num1, and then, Jake.

41
00:02:03.590 --> 00:02:06.897
&gt;&gt; Speaker 8: And it's complete?

42
00:02:06.897 --> 00:02:08.380
&gt;&gt; Bianca Gandolfo: Almost.

43
00:02:08.380 --> 00:02:10.145
So we return it, where does it return to?

44
00:02:10.145 --> 00:02:15.629
&gt;&gt; Speaker 8: add5(2)?

45
00:02:15.629 --> 00:02:19.514
&gt;&gt; Bianca Gandolfo: Yeah, so now var
add5 is whatever that function returns,

46
00:02:19.514 --> 00:02:21.546
which is addToNum1, right?

47
00:02:24.047 --> 00:02:25.420
&gt;&gt; Bianca Gandolfo: So
now this is a function.

48
00:02:25.420 --> 00:02:28.357
And then Tanner?

49
00:02:28.357 --> 00:02:31.796
&gt;&gt; Tanner: Now we're passing 5, or

50
00:02:38.190 --> 00:02:40.850
&gt;&gt; Tanner: Passing 5 into the number?

51
00:02:40.850 --> 00:02:43.920
&gt;&gt; Bianca Gandolfo: We just did
that one so we skipped past that.

52
00:02:43.920 --> 00:02:47.095
&gt;&gt; Tanner: And then we add 2 to 5?

53
00:02:47.095 --> 00:02:47.995
&gt;&gt; Bianca Gandolfo: Mm-hm, so

54
00:02:47.995 --> 00:02:52.000
we are calling the add5 function
&gt;&gt; Tanner: Twice.

55
00:02:52.000 --> 00:02:52.750
&gt;&gt; Bianca Gandolfo: with the argument too.

56
00:02:52.750 --> 00:02:53.945
&gt;&gt; Tanner: Okay.

57
00:02:53.945 --> 00:02:54.810
&gt;&gt; Bianca Gandolfo: No,
we only called it once.

58
00:02:54.810 --> 00:02:56.050
We called it here.

59
00:02:56.050 --> 00:02:56.780
This is a different one.

60
00:02:56.780 --> 00:02:57.310
This is add.

61
00:02:58.330 --> 00:03:00.245
Now this one's add5.

62
00:03:00.245 --> 00:03:05.550
Add5, remember, is gonna be this function
here because that's what we returned.

63
00:03:07.320 --> 00:03:08.230
And then we pass it too.

64
00:03:08.230 --> 00:03:10.878
And then where does it go, Phil?

65
00:03:10.878 --> 00:03:16.503
&gt;&gt; Speaker 10: [COUGH] Well,
because add5 contains that function,

66
00:03:16.503 --> 00:03:22.879
it also contains the variable num1 and
the original scope.

67
00:03:22.879 --> 00:03:23.779
&gt;&gt; Bianca Gandolfo: Mm-hm.

68
00:03:23.779 --> 00:03:25.715
&gt;&gt; Speaker 10: Which is 5.

69
00:03:25.715 --> 00:03:26.940
&gt;&gt; Bianca Gandolfo: Mm-hm.

70
00:03:26.940 --> 00:03:28.040
So, we hop back up here.

71
00:03:28.040 --> 00:03:31.914
&gt;&gt; Speaker 10: But
the return statement [INAUDIBLE].

72
00:03:31.914 --> 00:03:32.790
I mean 2, 5.

73
00:03:34.390 --> 00:03:36.120
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

74
00:03:36.120 --> 00:03:44.106
So we call add5 with 2, we jump up here
to the function body, num2 is now 2.

75
00:03:45.250 --> 00:03:48.180
And then we add num1 + num2.

76
00:03:48.180 --> 00:03:53.870
Num1, again, we got from
the first time that we called add.

77
00:03:53.870 --> 00:03:55.590
So, num1 = 1.

78
00:03:55.590 --> 00:04:02.500
We got 5 from here, and because of closure
we have access to the environment here.

79
00:04:03.850 --> 00:04:04.970
&gt;&gt; Speaker 10: The previous environment.

80
00:04:04.970 --> 00:04:06.212
&gt;&gt; Bianca Gandolfo: The previous
environment, yes.

81
00:04:07.754 --> 00:04:09.030
&gt;&gt; Bianca Gandolfo: And
that's how we've got 7.

82
00:04:09.030 --> 00:04:15.978
&gt;&gt; Speaker 10: So,
if you can identify [INAUDIBLE] right?

83
00:04:15.978 --> 00:04:21.158
&gt;&gt; Bianca Gandolfo: Well,
actually, we add 5 and

84
00:04:21.158 --> 00:04:25.260
do 3
&gt;&gt; Bianca Gandolfo: it's gonna be 8.

85
00:04:28.030 --> 00:04:28.530
Why?

86
00:04:31.310 --> 00:04:38.004
&gt;&gt; Speaker 11: Because the add(5)
is retained as num1 = 5.

87
00:04:38.004 --> 00:04:38.936
&gt;&gt; Bianca Gandolfo: Mm-hm.

88
00:04:38.936 --> 00:04:44.070
Because, so even though we have
reference to this scope here,

89
00:04:44.070 --> 00:04:48.190
every time we call add5,
we're creating a new scope here.

90
00:04:48.190 --> 00:04:53.190
So num2 is gonna change, and
we're not actually affecting num1.

91
00:04:53.190 --> 00:04:54.110
Num1 is being saved.

92
00:04:54.110 --> 00:04:56.660
Num1 is always gonna be 5 in add5.

93
00:04:56.660 --> 00:05:01.150
But num2 is gonna be the one that changes.

94
00:05:01.150 --> 00:05:07.300
So when we pass 2 here,

95
00:05:07.300 --> 00:05:11.921
num2 is then 2.

96
00:05:11.921 --> 00:05:15.130
And when we pass 3, at that point,
we make a new scope.

97
00:05:15.130 --> 00:05:19.940
This new scope here, but just because
we have a new scope for the addToNum1

98
00:05:19.940 --> 00:05:25.630
function, that doesn't mean the parent
scope is different, it's still the same.

99
00:05:25.630 --> 00:05:29.630
And then num2 would be 3 which would be 8.

100
00:05:36.440 --> 00:05:41.754
&gt;&gt; Speaker 11: What if we didn't
have that addToNum function.

101
00:05:41.754 --> 00:05:46.235
Let's just assume that that whole
function definition of addToNum1 is gone.

102
00:05:46.235 --> 00:05:47.242
&gt;&gt; Bianca Gandolfo: Mm-hm.

103
00:05:47.242 --> 00:05:50.325
&gt;&gt; Speaker 11: I guess that defeats
the purpose of that enclosure but,

104
00:05:50.325 --> 00:05:52.130
&gt;&gt; Bianca Gandolfo: Mm-hm.

105
00:05:52.130 --> 00:05:56.780
&gt;&gt; Speaker 11: but you could still, so
then that's, then when you assign add(5)

106
00:05:56.780 --> 00:06:00.700
to add5, you're just like,
&gt;&gt; Bianca Gandolfo: It would

107
00:06:00.700 --> 00:06:02.190
call this whole thing over again.

108
00:06:02.190 --> 00:06:03.254
&gt;&gt; Speaker 11: Yep.

109
00:06:03.254 --> 00:06:05.350
&gt;&gt; Bianca Gandolfo: And
it would reset this variable.

110
00:06:05.350 --> 00:06:06.030
&gt;&gt; Speaker 11: Right.
So

111
00:06:06.030 --> 00:06:09.160
it'll just be like a regular storing
a function in that variable,

112
00:06:09.160 --> 00:06:10.430
like your plain vanilla?

113
00:06:10.430 --> 00:06:11.320
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 11: Got it.

114
00:06:11.320 --> 00:06:13.471
&gt;&gt; Bianca Gandolfo: Yeah,
so the key here is that for

115
00:06:13.471 --> 00:06:16.978
the closure,
is that we have a function in here, and

116
00:06:16.978 --> 00:06:21.332
then we're returning it
&gt;&gt; Bianca Gandolfo: so

117
00:06:21.332 --> 00:06:22.660
that we can call it later.

118
00:06:23.680 --> 00:06:29.160
&gt;&gt; Speaker 11: And then using
the parent variable for permanence.

119
00:06:30.240 --> 00:06:32.730
&gt;&gt; Bianca Gandolfo: Yeah, and
actually we don't need this here.

120
00:06:32.730 --> 00:06:34.270
This is just for clarification.

121
00:06:34.270 --> 00:06:38.110
You could actually delete this and
call this num.

122
00:06:38.110 --> 00:06:39.520
It would actually still work.

123
00:06:41.760 --> 00:06:46.470
&gt;&gt; Speaker 10: So just for fun,
if you had after that last statement,

124
00:06:46.470 --> 00:06:54.030
if you had add(10), and then you,
&gt;&gt; Bianca Gandolfo: Like where?

125
00:06:54.030 --> 00:06:54.740
&gt;&gt; Speaker 10: I'm sorry if you add.

126
00:06:56.070 --> 00:06:56.950
&gt;&gt; Bianca Gandolfo: Here?

127
00:06:56.950 --> 00:06:57.855
&gt;&gt; Speaker 10: No, at the very bottom.

128
00:06:57.855 --> 00:06:58.770
&gt;&gt; Bianca Gandolfo: Mm-hm.

129
00:06:58.770 --> 00:07:03.360
&gt;&gt; Speaker 10: If you said add5 = add(10).

130
00:07:06.030 --> 00:07:08.879
&gt;&gt; Bianca Gandolfo: Add5 = add(10)?

131
00:07:08.879 --> 00:07:09.879
&gt;&gt; Speaker 10: Yes.

132
00:07:09.879 --> 00:07:10.546
&gt;&gt; Bianca Gandolfo: Mm-hm.

133
00:07:10.546 --> 00:07:14.296
&gt;&gt; Speaker 10: And then you said add5(2),
what would you get?

134
00:07:15.712 --> 00:07:19.964
&gt;&gt; Bianca Gandolfo: So
this would be rewriting add5.

135
00:07:19.964 --> 00:07:27.860
So add5 was add(5), right,
which is gonna be this function.

136
00:07:27.860 --> 00:07:28.950
This would overwrite it.

137
00:07:28.950 --> 00:07:31.790
Oops.

138
00:07:31.790 --> 00:07:32.879
This would overwrite it.

139
00:07:34.753 --> 00:07:37.060
&gt;&gt; Bianca Gandolfo: And
make it 10, so then, whoa, okay.

140
00:07:38.870 --> 00:07:40.130
It doesn't like it when I click there.

141
00:07:45.629 --> 00:07:50.577
&gt;&gt; Bianca Gandolfo: So if we did add5(2),
then that would be 12,

142
00:07:50.577 --> 00:07:55.411
because whenever we use
an assignment like this,

143
00:07:55.411 --> 00:08:01.700
it's going to completely override and
just delete it.

144
00:08:01.700 --> 00:08:02.330
&gt;&gt; Speaker 11: Whatever was there?

145
00:08:02.330 --> 00:08:03.120
&gt;&gt; Bianca Gandolfo: Whatever was there,
yeah.

146
00:08:05.010 --> 00:08:07.670
&gt;&gt; Speaker 11: Is add5 keeping
that same reference in memory?

147
00:08:10.010 --> 00:08:10.560
&gt;&gt; Bianca Gandolfo: It will override.

148
00:08:10.560 --> 00:08:11.930
&gt;&gt; Speaker 11: It'll override that down.

149
00:08:11.930 --> 00:08:13.130
&gt;&gt; Bianca Gandolfo: Yeah.
It'll overwrite everything.

150
00:08:13.130 --> 00:08:17.400
Yeah, but it would be better if we
could just call that add10, right?

151
00:08:20.090 --> 00:08:24.270
But if we didn't want to do that,
it would still be the same.

