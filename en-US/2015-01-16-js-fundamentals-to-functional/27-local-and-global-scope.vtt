WEBVTT

1
00:00:00.000 --> 00:00:04.113
[MUSIC]

2
00:00:04.113 --> 00:00:05.437
&gt;&gt; Bianca Gandolfo: So
the first thing we're going to,

3
00:00:05.437 --> 00:00:08.060
we're just going to jump right into Scope.

4
00:00:08.060 --> 00:00:09.320
What is Scope?

5
00:00:09.320 --> 00:00:14.940
How many people here have heard of Scope,
meh, never heard of Scope.

6
00:00:14.940 --> 00:00:20.924
What is Scope then?
&gt;&gt; Bianca Gandolfo: How about Andy,

7
00:00:20.924 --> 00:00:26.900
what is Scope?
&gt;&gt; Andy: I'd say Scope is,

8
00:00:26.900 --> 00:00:30.900
from what I understand, a set of rules
where defines where variables are stored,

9
00:00:31.910 --> 00:00:33.900
I guess?
&gt;&gt; Bianca Gandolfo: Yeah, so

10
00:00:33.900 --> 00:00:38.458
it defines where we can access variables,
where variables kind of live or exist.

11
00:00:38.458 --> 00:00:40.483
Cool.

12
00:00:40.483 --> 00:00:45.543
What about Rich.

13
00:00:45.543 --> 00:00:49.062
&gt;&gt; Rich: Yeah, I look at it as an area

14
00:00:49.062 --> 00:00:54.900
where a variable is relevant.
&gt;&gt; Bianca Gandolfo: Mm-hm.

15
00:00:54.900 --> 00:00:56.210
&gt;&gt; Rich: Outside of that scope

16
00:00:56.210 --> 00:00:59.980
that variable may not even exist or.
&gt;&gt; Bianca Gandolfo: Yeah.

17
00:00:59.980 --> 00:01:02.100
&gt;&gt; Rich: So it's like a hierarchy of maybe

18
00:01:02.100 --> 00:01:05.260
spaces, if you will.
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

19
00:01:06.690 --> 00:01:10.840
So, in essence,
Scope is where our variables have meaning.

20
00:01:10.840 --> 00:01:14.990
So if we try to access
a variable outside of its Scope,

21
00:01:14.990 --> 00:01:17.880
that variable won't exist and
it would throw an error.

22
00:01:17.880 --> 00:01:21.570
And the important thing about Scope
is Scope is created dynamically

23
00:01:21.570 --> 00:01:23.410
whenever we call the function.

24
00:01:23.410 --> 00:01:30.332
So we think about scope a lot of times
as being in the function body itself.

25
00:01:30.332 --> 00:01:35.189
And you can sort of think of
these two brackets here that

26
00:01:35.189 --> 00:01:40.160
define the function body as
a representation of Scope.

27
00:01:41.190 --> 00:01:46.480
However, the Scope itself isn't created
until we call that function here.

28
00:01:48.380 --> 00:01:51.460
So, every time we call a function,
we create a new Scope.

29
00:01:51.460 --> 00:01:57.820
So, if we call this add function three
times, we then have three Scopes created.

30
00:01:57.820 --> 00:02:00.910
And that's why we can have different
values in the function body.

31
00:02:00.910 --> 00:02:04.770
Using the same function, have different
values for our parameters for

32
00:02:04.770 --> 00:02:05.670
example, or anything.

33
00:02:05.670 --> 00:02:08.381
You have a question?
&gt;&gt; Speaker 3: I have a question.

34
00:02:08.381 --> 00:02:13.407
Other structures besides functions
that have curly brackets,

35
00:02:13.407 --> 00:02:14.950
like-
&gt;&gt; Bianca Gandolfo: Mm-hm, like blocks.

36
00:02:14.950 --> 00:02:16.480
&gt;&gt; Speaker 3: Like whiles and fors.

37
00:02:16.480 --> 00:02:20.050
Do they create their own Scope?
&gt;&gt; Bianca Gandolfo: Not in JavaScript.

38
00:02:20.050 --> 00:02:20.960
&gt;&gt; Speaker 3: Only functions?

39
00:02:20.960 --> 00:02:21.752
&gt;&gt; Bianca Gandolfo: Only functions.

40
00:02:21.752 --> 00:02:26.126
Mm-hm.
&gt;&gt; Bianca Gandolfo: So,

41
00:02:26.126 --> 00:02:28.390
we have this thing called local scope.

42
00:02:28.390 --> 00:02:31.740
And this is how we create
a scope in JavaScript,

43
00:02:31.740 --> 00:02:33.050
is by wrapping it in a function.

44
00:02:33.050 --> 00:02:38.817
And this is the only way that we
can create a scope, is by saying

45
00:02:38.817 --> 00:02:44.010
var Name inside of a function body.

46
00:02:44.010 --> 00:02:48.290
So, if, for example, we console.log(local)
out here, this would be outside of that

47
00:02:48.290 --> 00:02:53.040
scope, and that would give us an error
because there's no local variable there.

48
00:02:53.040 --> 00:02:58.813
And this is also, do you have a question?
&gt;&gt; Speaker 4: Question is,

49
00:02:58.813 --> 00:03:06.071
if you declare a named variable as
the function versus a function and

50
00:03:06.071 --> 00:03:09.860
the name is it the same thing?
&gt;&gt; Bianca Gandolfo: What's

51
00:03:09.860 --> 00:03:10.860
the difference?
&gt;&gt; Speaker 4: Yeah.

52
00:03:11.970 --> 00:03:12.660
&gt;&gt; Bianca Gandolfo: It's basically

53
00:03:12.660 --> 00:03:13.330
the same thing.

54
00:03:13.330 --> 00:03:18.694
So the question is, what's the difference
between naming a function like this or

55
00:03:18.694 --> 00:03:27.490
like this?
&gt;&gt; Bianca Gandolfo: The difference

56
00:03:27.490 --> 00:03:34.109
is that this function name here is gonna
be hoisted to the top of the scope and

57
00:03:34.109 --> 00:03:39.678
that you can refer to this function,
the whole function body,

58
00:03:39.678 --> 00:03:44.220
everything, it'll be hoisted to the top.

59
00:03:44.220 --> 00:03:47.980
Whereas if you store it in a variable,
it will follow variable hoisting rules.

60
00:03:47.980 --> 00:03:49.960
We're not gonna get into hoisting today.

61
00:03:49.960 --> 00:03:56.010
It's kind of like a
&gt;&gt; Bianca Gandolfo: I don't know.

62
00:03:56.010 --> 00:03:58.490
It's something that happens in JavaScript.

63
00:03:58.490 --> 00:04:00.230
That's sort of like extra
points if you know it,

64
00:04:00.230 --> 00:04:05.200
but if you just follow the general rules,
you shouldn't have to worry about it.

65
00:04:06.280 --> 00:04:10.460
But in general I would recommend to
store it in a function, I'm sorry,

66
00:04:10.460 --> 00:04:14.360
to store it in a variable rather
than just creating a named function.

67
00:04:15.840 --> 00:04:16.930
&gt;&gt; Speaker 5: If you take

68
00:04:16.930 --> 00:04:20.280
the VAR off of that second line
&gt;&gt; Bianca Gandolfo: Uh-huh.

69
00:04:20.280 --> 00:04:21.520
&gt;&gt; Speaker 5: Then will the console

70
00:04:21.520 --> 00:04:24.610
log work?
&gt;&gt; Bianca Gandolfo: That's my next slide.

71
00:04:24.610 --> 00:04:25.180
So good.
You're a step

72
00:04:25.180 --> 00:04:26.100
ahead.
&gt;&gt; Speaker 5: Sorry.

73
00:04:26.100 --> 00:04:27.020
&gt;&gt; Bianca Gandolfo: No worries.

74
00:04:27.020 --> 00:04:32.210
So this is a private variable and
our locals is in the local scope.

75
00:04:32.210 --> 00:04:35.930
And then we have something else
that's called global scope.

76
00:04:35.930 --> 00:04:39.670
So global variables can be accessed
anywhere in your application.

77
00:04:39.670 --> 00:04:43.880
This could be dangerous if
you have naming collisions.

78
00:04:43.880 --> 00:04:46.760
You might not know which one wins, and
then you could have unexpected results.

79
00:04:46.760 --> 00:04:50.750
So, in general, you want to avoid
putting things in the global scope.

80
00:04:50.750 --> 00:04:54.820
So one way to create something in
the global scope is to simply,

81
00:04:54.820 --> 00:04:57.610
outside of a function, say var x = global.

82
00:04:59.410 --> 00:05:01.750
Or even if it's inside of a function,

83
00:05:01.750 --> 00:05:03.970
what you could do is you
could leave the var off.

84
00:05:03.970 --> 00:05:05.380
This would still work,

85
00:05:05.380 --> 00:05:09.240
it just automatically makes that
variable part of the global scope.

86
00:05:11.140 --> 00:05:15.430
So, make sure that you do have those vars.
&gt;&gt; Speaker 6: Now, the indentation there

87
00:05:15.430 --> 00:05:18.840
is not relevant in JavaScript?
&gt;&gt; Bianca Gandolfo: No.

88
00:05:18.840 --> 00:05:19.995
A white space doesn't matter.
&gt;&gt; Speaker 6: Okay.

89
00:05:19.995 --> 00:05:22.580
&gt;&gt; Bianca Gandolfo: Mm-hm.

90
00:05:22.580 --> 00:05:25.570
And another thing that's kind
of a hack is that you could

91
00:05:25.570 --> 00:05:26.870
put it on the window object.

92
00:05:26.870 --> 00:05:31.890
So all global variables
are located on the window object.

93
00:05:31.890 --> 00:05:34.590
So you could say, window.y,
at least in the browser.

94
00:05:34.590 --> 00:05:42.400
So in browser land, every global variable
is attached to the window object.

95
00:05:42.400 --> 00:05:45.930
So this wouldn't be true in different
other environments like node or

96
00:05:45.930 --> 00:05:49.370
if you're programming like a TESL or
something, the different, the environment

97
00:05:50.480 --> 00:05:55.105
depends on this but in the browser
window is where all of our globals live.

98
00:05:55.105 --> 00:05:56.250
Mm-hm?
&gt;&gt; Speaker 7: So

99
00:05:56.250 --> 00:06:01.530
that z = global here tool,
that's global because you didn't

100
00:06:01.530 --> 00:06:02.430
use the var?
&gt;&gt; Bianca Gandolfo: Yes.

101
00:06:04.480 --> 00:06:07.500
Any other questions?
&gt;&gt; Speaker 7: And I could access x, or

102
00:06:07.500 --> 00:06:11.040
z, with window.x or z later on?
&gt;&gt; Bianca Gandolfo: Yes.

103
00:06:11.040 --> 00:06:11.540
Yep.

