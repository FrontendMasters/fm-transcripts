WEBVTT

1
00:00:00.000 --> 00:00:03.755
[MUSIC]

2
00:00:03.755 --> 00:00:06.710
&gt;&gt; Bianca Gandolfo: So
here's an add on to that example.

3
00:00:06.710 --> 00:00:08.550
The difference here is
we have a setTimeout.

4
00:00:08.550 --> 00:00:13.180
What does a setTimeout do?
&gt;&gt; John: [INAUDIBLE]

5
00:00:13.180 --> 00:00:16.100
&gt;&gt; Bianca Gandolfo: What would an alert

6
00:00:16.100 --> 00:00:18.560
do?
&gt;&gt; Rich: [INAUDIBLE]

7
00:00:18.560 --> 00:00:20.160
&gt;&gt; Bianca Gandolfo: Yes, so it will

8
00:00:20.160 --> 00:00:23.330
wait 1000 milliseconds, which is 1 second.

9
00:00:24.640 --> 00:00:27.890
And then it will call this function.

10
00:00:27.890 --> 00:00:30.130
So, it doesn't call it right away,
it creates a delay.

11
00:00:32.130 --> 00:00:40.520
And so if you call this function here
closureAlert, lets walk through it.

12
00:00:40.520 --> 00:00:46.430
So, from the top, from the top let's see.

13
00:00:46.430 --> 00:00:48.660
Remind me of your name again, is it John?

14
00:00:48.660 --> 00:00:49.310
&gt;&gt; John: John, yeah.
&gt;&gt; Bianca Gandolfo: Okay.

15
00:00:51.010 --> 00:00:53.510
So let's walk through how this code would

16
00:00:54.940 --> 00:00:56.857
run in the browser.
&gt;&gt; John: All

17
00:00:56.857 --> 00:01:00.500
right.
&gt;&gt; Bianca Gandolfo: Everyone gets

18
00:01:00.500 --> 00:01:01.980
one line.
&gt;&gt; John: This one

19
00:01:01.980 --> 00:01:02.520
mine?
&gt;&gt; Bianca Gandolfo: Mm-hm.

20
00:01:02.520 --> 00:01:05.840
&gt;&gt; John: Going to see the closure alert,

21
00:01:05.840 --> 00:01:09.295
define function.
&gt;&gt; Bianca Gandolfo: And then Rich?

22
00:01:09.295 --> 00:01:12.250
&gt;&gt; Rich: [INAUDIBLE]

23
00:01:12.250 --> 00:01:15.380
Then it jumps past all that to

24
00:01:15.380 --> 00:01:19.030
set time out to that.
&gt;&gt; Bianca Gandolfo: So

25
00:01:19.030 --> 00:01:21.230
this is the entire function body.
&gt;&gt; John: The entire function body, okay.

26
00:01:21.230 --> 00:01:22.770
&gt;&gt; Rich: So it goes after that and

27
00:01:22.770 --> 00:01:24.950
it calls closure alert?

28
00:01:24.950 --> 00:01:27.553
And invokes that.
&gt;&gt; Bianca Gandolfo: Mm-hm, and

29
00:01:27.553 --> 00:01:31.810
then Grace.
&gt;&gt; Grace: So, we're in the body function

30
00:01:31.810 --> 00:01:37.520
and it assigns the string to x.
&gt;&gt; Bianca Gandolfo: Yep, and

31
00:01:37.520 --> 00:01:42.075
then Joe.
&gt;&gt; Joe: There's another function there,

32
00:01:42.075 --> 00:01:46.450
but it gets skipped, right?
&gt;&gt; Bianca Gandolfo: Yeah, we skip it.

33
00:01:47.840 --> 00:01:53.160
Skip this function.
&gt;&gt; Joe: Then you setTimeout,

34
00:01:53.160 --> 00:01:56.370
wait 1,000 milliseconds.
&gt;&gt; Bianca Gandolfo: Does it wait

35
00:01:56.370 --> 00:01:58.680
now?
&gt;&gt; Joe: Yeah.

36
00:01:58.680 --> 00:02:00.010
&gt;&gt; Bianca Gandolfo: Does it pause?

37
00:02:00.010 --> 00:02:01.796
&gt;&gt; Joe: It pauses one second.

38
00:02:01.796 --> 00:02:02.446
&gt;&gt; Bianca Gandolfo: It's actually

39
00:02:02.446 --> 00:02:04.980
asynchronous so it's not gonna pause.

40
00:02:04.980 --> 00:02:07.020
It's not gonna pause it for that.

41
00:02:07.020 --> 00:02:09.250
That's a common misconception.
&gt;&gt; Joe: So

42
00:02:09.250 --> 00:02:11.290
it's like a scheduler.
&gt;&gt; Bianca Gandolfo: Yeah, so it says,

43
00:02:11.290 --> 00:02:16.010
okay, do call alerter in one second.
&gt;&gt; Joe: But

44
00:02:16.010 --> 00:02:17.360
I'm gonna do whatever else
&gt;&gt; Bianca Gandolfo: But

45
00:02:17.360 --> 00:02:18.810
it's gonna keep running, keep going.

46
00:02:21.170 --> 00:02:26.399
And then, Kim?
&gt;&gt; Kim: Console

47
00:02:28.760 --> 00:02:29.450
&gt;&gt; Bianca Gandolfo: And then, William?

48
00:02:29.450 --> 00:02:33.050
&gt;&gt; William: I'm sorry,

49
00:02:33.050 --> 00:02:33.830
I was looking at the comments.

50
00:02:33.830 --> 00:02:36.020
Where we at?
&gt;&gt; Bianca Gandolfo: Right here.

51
00:02:36.020 --> 00:02:38.930
We're at this console out log.
&gt;&gt; William: All the fun stuff's

52
00:02:38.930 --> 00:02:39.477
over.
&gt;&gt; Bianca Gandolfo: I

53
00:02:39.477 --> 00:02:45.616
know.
&gt;&gt; Bianca Gandolfo: So

54
00:02:45.616 --> 00:02:49.110
then, where does it go?
&gt;&gt; William: It will jump

55
00:02:49.110 --> 00:02:52.784
out of running that function, go back
to where it's called a closureAlert.

56
00:02:52.784 --> 00:02:53.985
&gt;&gt; Bianca Gandolfo: Mm-hm.

57
00:02:53.985 --> 00:02:56.583
&gt;&gt; [INAUDIBLE].

58
00:02:56.583 --> 00:03:01.748
&gt;&gt; Bianca Gandolfo: And then
&gt;&gt; Bianca Gandolfo: And

59
00:03:01.748 --> 00:03:06.046
in one second, what happens?
&gt;&gt; William: That alerter is called

60
00:03:06.046 --> 00:03:07.460
final.
&gt;&gt; Bianca Gandolfo: Yep.

61
00:03:07.460 --> 00:03:08.740
The alerter is called.

62
00:03:08.740 --> 00:03:09.626
So then what do we do?

63
00:03:09.626 --> 00:03:16.719
Kevin?
&gt;&gt; Kevin: alert(x).

64
00:03:16.719 --> 00:03:19.173
&gt;&gt; Bianca Gandolfo: I'll get to that

65
00:03:19.173 --> 00:03:23.212
question in just a second.

66
00:03:23.212 --> 00:03:26.410
So alert(x).

67
00:03:26.410 --> 00:03:30.895
And what's x been?
&gt;&gt; Kevin: Just the string?

68
00:03:30.895 --> 00:03:32.379
&gt;&gt; Bianca Gandolfo: Mm-hm.

69
00:03:32.379 --> 00:03:33.129
&gt;&gt; Kevin: It's defined earlier.

70
00:03:33.129 --> 00:03:33.712
&gt;&gt; Bianca Gandolfo: Yep.

71
00:03:33.712 --> 00:03:34.629
&gt;&gt; Kevin: A closure.

72
00:03:34.629 --> 00:03:35.254
&gt;&gt; Bianca Gandolfo: What does it say?

73
00:03:35.254 --> 00:03:37.129
You can read it in a funny
voice if you want.

74
00:03:37.129 --> 00:03:38.164
&gt;&gt; Kevin: Help, I'm a variable

75
00:03:38.164 --> 00:03:38.950
stuck.
&gt;&gt; Bianca Gandolfo: That's your funny

76
00:03:38.950 --> 00:03:40.421
voice.
&gt;&gt; [LAUGH]

77
00:03:40.421 --> 00:03:42.546
&gt;&gt; Kevin: A closure.

78
00:03:42.546 --> 00:03:43.497
&gt;&gt; Bianca Gandolfo: All right,

79
00:03:43.497 --> 00:03:46.629
[LAUGH], that works.
&gt;&gt; Speaker 9: Just to note here that

80
00:03:46.629 --> 00:03:51.837
everyone can please raise our voices
a little bit so we can hear the questions.

81
00:03:53.587 --> 00:03:56.213
&gt;&gt; Bianca Gandolfo: Okay.

82
00:03:56.213 --> 00:03:57.254
Cool.

83
00:03:57.254 --> 00:04:02.296
So we alert it, and then where does it go?

84
00:04:02.296 --> 00:04:09.792
Jake, we just need to complete.
&gt;&gt; Jake: It's all complete,

85
00:04:09.792 --> 00:04:11.610
so go down there.
&gt;&gt; Bianca Gandolfo: Yeah, and

86
00:04:11.610 --> 00:04:14.895
then it just goes down here.
&gt;&gt; Jake: In one second.

87
00:04:14.895 --> 00:04:15.644
&gt;&gt; Bianca Gandolfo: Yeah.

88
00:04:15.644 --> 00:04:17.550
Awesome, Tanner?
&gt;&gt; Tanner: So

89
00:04:17.550 --> 00:04:23.800
do you ever have to worry about setting
In that case, you set it as second.

90
00:04:23.800 --> 00:04:28.290
You don't have to worry about the code
catching up to the timer that you set, so

91
00:04:28.290 --> 00:04:29.570
that stuff might get out of order.

92
00:04:29.570 --> 00:04:34.530
Like in this example,
let's say you did this on a 386 or

93
00:04:34.530 --> 00:04:37.220
something.
&gt;&gt; Bianca Gandolfo: On a what?

94
00:04:37.220 --> 00:04:38.410
&gt;&gt; Tanner: On a really old

95
00:04:38.410 --> 00:04:39.196
computer.
&gt;&gt; Bianca Gandolfo: Uh-huh.

96
00:04:39.196 --> 00:04:40.420
&gt;&gt; Tanner: Would it

97
00:04:40.420 --> 00:04:45.070
Would it ever get to the point where
it accidentally didn't get that far.

98
00:04:45.070 --> 00:04:47.400
Do you see what I'm saying?
&gt;&gt; Bianca Gandolfo: Like

99
00:04:47.400 --> 00:04:49.440
it would be too slow?
&gt;&gt; Tanner: Right.

100
00:04:49.440 --> 00:04:51.420
&gt;&gt; Bianca Gandolfo: I don't know I never

101
00:04:51.420 --> 00:04:56.330
had I've never done anything where the
millisecond is really important something

102
00:04:56.330 --> 00:05:01.820
down to the millisecond but
I can't imagine that it's so accurate.

103
00:05:01.820 --> 00:05:05.780
Because of the way like the queue and
the stack and the event loop work.

104
00:05:05.780 --> 00:05:11.120
So the event loop doesn't
run all the time.

105
00:05:11.120 --> 00:05:14.342
So the way I imagine that it wouldn't be

106
00:05:14.342 --> 00:05:17.550
100% accurate.
&gt;&gt; Tanner: If you had a loop here that was

107
00:05:17.550 --> 00:05:22.720
looking Code that was executing
without ever returning

108
00:05:22.720 --> 00:05:26.050
back to the event, the process would work.

109
00:05:26.050 --> 00:05:30.850
If that took five seconds to run,
set time object would then

110
00:05:30.850 --> 00:05:34.560
run as soon as that event gets rescheduled
&gt;&gt; Bianca Gandolfo: Yeah, okay.

111
00:05:34.560 --> 00:05:36.470
&gt;&gt; Tanner: Rather than waiting a second

112
00:05:36.470 --> 00:05:37.520
after it.

113
00:05:37.520 --> 00:05:40.980
Finished running that five second process.
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

114
00:05:40.980 --> 00:05:44.590
And then you had a question?
&gt;&gt; Speaker 9: The question was

115
00:05:44.590 --> 00:05:45.670
what is the said time out?

116
00:05:45.670 --> 00:05:47.930
Is that a function?
&gt;&gt; John: Yeah.

117
00:05:47.930 --> 00:05:49.090
&gt;&gt; Speaker 9: Where does that come from?

118
00:05:49.090 --> 00:05:50.210
&gt;&gt; Bianca Gandolfo: Set time out is

119
00:05:50.210 --> 00:05:54.180
just a native function that comes,
I belive with the browser.

120
00:05:57.150 --> 00:06:01.240
And we know it's a function because we see
these These two parentheses next to it.

121
00:06:01.240 --> 00:06:05.190
And that's calling a function, we call it.

122
00:06:06.200 --> 00:06:09.587
What are some other times that we
see two parentheses near each other.

123
00:06:09.587 --> 00:06:14.191
So we talked a little bit about where we
saw two squiggly brackets near each other,

124
00:06:14.191 --> 00:06:20.281
when else do we see this syntax?
&gt;&gt; Speaker 9: Expression

125
00:06:20.281 --> 00:06:23.935
statement.
&gt;&gt; Bianca Gandolfo: This is specifically.

126
00:06:23.935 --> 00:06:24.670
&gt;&gt; Speaker 9: An if

127
00:06:24.670 --> 00:06:25.930
&gt;&gt; Bianca Gandolfo: Yeah, like an if, so

128
00:06:25.930 --> 00:06:30.110
you have an if statement, or
use it so if, parentheses and

129
00:06:30.110 --> 00:06:33.910
they only have the curly brackets.
&gt;&gt; Speaker 12: I have

130
00:06:33.910 --> 00:06:35.120
a different question.

131
00:06:35.120 --> 00:06:37.380
&gt;&gt; John: Okay.
&gt;&gt; Speaker 12: Loops.

132
00:06:37.380 --> 00:06:38.050
&gt;&gt; Bianca Gandolfo: Loops, so

133
00:06:38.050 --> 00:06:39.630
we use them for loops as well.

134
00:06:41.810 --> 00:06:45.418
Where else?
We use them in functions right after

135
00:06:45.418 --> 00:06:49.712
the function keyword here or
the function name.

136
00:06:49.712 --> 00:06:52.310
And that's all I can think of.
&gt;&gt; Speaker 12: And does

137
00:06:52.310 --> 00:06:56.830
mathematical expression insert precedence?
&gt;&gt; Bianca Gandolfo: Yeah, totally.

138
00:06:56.830 --> 00:07:02.213
So we can use it to change the order
of the math the way it's I guess

139
00:07:02.213 --> 00:07:08.414
precedence is a good way of saying it.
&gt;&gt; Bianca Gandolfo: Yeah,

140
00:07:08.414 --> 00:07:11.260
so those are the only times I can
think of off the top of my head.

141
00:07:11.260 --> 00:07:14.120
So we have if statements, we have loops.

142
00:07:14.120 --> 00:07:18.546
There's also switch, and
then in the functions.

143
00:07:18.546 --> 00:07:22.890
Those are the off the top of my head,
the only times when we see that.

144
00:07:22.890 --> 00:07:25.030
And so just keep that in mind.

145
00:07:25.030 --> 00:07:28.580
If it doesn't look like a loop,
we know what loops look like.

146
00:07:28.580 --> 00:07:32.140
If it doesn't look like an if
statement and all these things,

147
00:07:32.140 --> 00:07:37.380
then you're probably calling a function.
&gt;&gt; Kevin: What about when

148
00:07:37.380 --> 00:07:40.640
you wanna create an anonymous function?
&gt;&gt; Bianca Gandolfo: Mm-hm.

149
00:07:40.640 --> 00:07:43.670
&gt;&gt; Kevin: Is that just like a hack or

150
00:07:43.670 --> 00:07:46.740
is that a valid JavaScript?
&gt;&gt; Bianca Gandolfo: That's a valid

151
00:07:46.740 --> 00:07:48.455
JavaScript, you can use
an anonymous function.

152
00:07:48.455 --> 00:07:51.860
Mm-hm?
&gt;&gt; Joe: I think,

153
00:07:51.860 --> 00:07:53.290
I'm lost.
&gt;&gt; Bianca Gandolfo: Sure.

154
00:07:54.860 --> 00:07:55.840
&gt;&gt; Joe: If I were the interpreter,

155
00:07:56.980 --> 00:08:00.600
the first thing I would do is skip
all the way Next to the bottom

156
00:08:00.600 --> 00:08:02.080
line.
&gt;&gt; Bianca Gandolfo: Yes.

157
00:08:02.080 --> 00:08:03.500
&gt;&gt; Joe: We're on closureAlert,

158
00:08:03.500 --> 00:08:08.050
then I would go up to the top and
run the function to set X and

159
00:08:08.050 --> 00:08:11.280
skip the next function.

160
00:08:11.280 --> 00:08:15.820
Now, I hit the time out, I wait a second
and I would run the alerter function.

161
00:08:15.820 --> 00:08:18.700
I would go back up and
set x [INAUDIBLE] alert.

162
00:08:18.700 --> 00:08:20.510
&gt;&gt; Bianca Gandolfo: Let me stop you there.

163
00:08:20.510 --> 00:08:21.270
&gt;&gt; Joe: Okay good, so I'm all-

164
00:08:21.270 --> 00:08:22.330
&gt;&gt; Bianca Gandolfo: Set time is not

165
00:08:22.330 --> 00:08:23.680
blocking.
&gt;&gt; Joe: Say that again?

166
00:08:23.680 --> 00:08:25.325
&gt;&gt; Bianca Gandolfo: The set time out is

167
00:08:25.325 --> 00:08:30.813
not blocking so it will actually
run the console log next and

168
00:08:30.813 --> 00:08:35.314
then it will actually just
exit this function and

169
00:08:35.314 --> 00:08:41.241
it will wait one second down here And
once the setTimeout works,

170
00:08:41.241 --> 00:08:45.671
that's when we get into
the alerter function.

171
00:08:51.547 --> 00:08:55.879
&gt;&gt; [INAUDIBLE]

172
00:08:55.879 --> 00:08:58.080
&gt;&gt; Joe: So

173
00:08:58.080 --> 00:08:59.300
What does this have to do with closure.

174
00:09:00.450 --> 00:09:03.070
I can't put the two together.
&gt;&gt; Bianca Gandolfo: We're getting

175
00:09:03.070 --> 00:09:03.950
there.
&gt;&gt; Joe: Okay.

176
00:09:03.950 --> 00:09:04.680
&gt;&gt; Bianca Gandolfo: We're getting there,

177
00:09:04.680 --> 00:09:05.180
yeah.

178
00:09:06.220 --> 00:09:10.510
I'm just starting off with some things
that don't seem too unusual and we've done

179
00:09:10.510 --> 00:09:16.710
before and we're comfortable with them and
then we're going to get in closure.

180
00:09:16.710 --> 00:09:20.390
I like to start it off slow.

181
00:09:20.390 --> 00:09:21.730
And then we'll get there.

182
00:09:21.730 --> 00:09:25.980
And then I just out of
nowhere trick you and

183
00:09:25.980 --> 00:09:28.644
I was like ha.
&gt;&gt; Joe: [INAUDIBLE]

184
00:09:28.644 --> 00:09:29.170
&gt;&gt; Bianca Gandolfo: Yeah.

185
00:09:29.170 --> 00:09:29.670
[LAUGH]

