WEBVTT

1
00:00:00.000 --> 00:00:03.755
[MUSIC]

2
00:00:03.755 --> 00:00:06.710
&gt;&gt; Bianca Gandolfo: So
here's an add on to that example.

3
00:00:06.710 --> 00:00:08.550
The difference here is
we have a setTimeout.

4
00:00:08.550 --> 00:00:09.545
What does a setTimeout do?

5
00:00:09.545 --> 00:00:13.380
&gt;&gt; John: [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: What

6
00:00:14.510 --> 00:00:16.195
would an alert do?

7
00:00:16.195 --> 00:00:18.770
&gt;&gt; Rich: [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yes,

8
00:00:18.770 --> 00:00:23.330
so it will wait 1000 milliseconds,
which is 1 second.

9
00:00:24.640 --> 00:00:27.890
And then it will call this function.

10
00:00:27.890 --> 00:00:30.130
So, it doesn't call it right away,
it creates a delay.

11
00:00:32.130 --> 00:00:40.520
And so if you call this function here
closureAlert, lets walk through it.

12
00:00:40.520 --> 00:00:46.430
So, from the top, from the top let's see.

13
00:00:46.430 --> 00:00:48.660
Remind me of your name again, is it John?

14
00:00:48.660 --> 00:00:49.310
&gt;&gt; John: John, yeah.
&gt;&gt; Bianca Gandolfo: Okay.

15
00:00:51.010 --> 00:00:56.770
So let's walk through how this
code would run in the browser.

16
00:00:56.770 --> 00:00:57.270
&gt;&gt; John: All right.

17
00:00:59.640 --> 00:01:01.570
&gt;&gt; Bianca Gandolfo: Everyone
gets one line.

18
00:01:01.570 --> 00:01:02.275
&gt;&gt; John: This one mine?

19
00:01:02.275 --> 00:01:05.840
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; John: Going to see the closure alert,

20
00:01:05.840 --> 00:01:06.736
define function.

21
00:01:06.736 --> 00:01:09.295
&gt;&gt; Bianca Gandolfo: And then Rich?

22
00:01:09.295 --> 00:01:13.640
&gt;&gt; Rich: [INAUDIBLE]
Then it jumps

23
00:01:13.640 --> 00:01:17.850
past all that to set time out to that.

24
00:01:18.880 --> 00:01:20.968
&gt;&gt; Bianca Gandolfo: So
this is the entire function body.

25
00:01:20.968 --> 00:01:22.770
&gt;&gt; John: The entire function body, okay.
&gt;&gt; Rich: So it goes after that and

26
00:01:22.770 --> 00:01:24.950
it calls closure alert?

27
00:01:24.950 --> 00:01:25.616
And invokes that.

28
00:01:25.616 --> 00:01:29.500
&gt;&gt; Bianca Gandolfo: Mm-hm, and then Grace.

29
00:01:29.500 --> 00:01:35.320
&gt;&gt; Grace: So, we're in the body function
and it assigns the string to x.

30
00:01:35.320 --> 00:01:37.898
&gt;&gt; Bianca Gandolfo: Yep, and then Joe.

31
00:01:37.898 --> 00:01:42.492
&gt;&gt; Joe: There's another function there,
but

32
00:01:42.492 --> 00:01:45.820
it gets skipped, right?

33
00:01:45.820 --> 00:01:46.450
&gt;&gt; Bianca Gandolfo: Yeah, we skip it.

34
00:01:47.840 --> 00:01:48.760
Skip this function.

35
00:01:50.270 --> 00:01:55.720
&gt;&gt; Joe: Then you setTimeout,
wait 1,000 milliseconds.

36
00:01:55.720 --> 00:01:56.570
&gt;&gt; Bianca Gandolfo: Does it wait now?

37
00:01:58.170 --> 00:01:58.680
&gt;&gt; Joe: Yeah.

38
00:01:58.680 --> 00:02:00.010
&gt;&gt; Bianca Gandolfo: Does it pause?

39
00:02:00.010 --> 00:02:01.796
&gt;&gt; Joe: It pauses one second.

40
00:02:01.796 --> 00:02:04.980
&gt;&gt; Bianca Gandolfo: It's actually
asynchronous so it's not gonna pause.

41
00:02:04.980 --> 00:02:07.020
It's not gonna pause it for that.

42
00:02:07.020 --> 00:02:08.150
That's a common misconception.

43
00:02:09.150 --> 00:02:10.400
&gt;&gt; Joe: So it's like a scheduler.

44
00:02:10.400 --> 00:02:15.880
&gt;&gt; Bianca Gandolfo: Yeah, so it says,
okay, do call alerter in one second.

45
00:02:15.880 --> 00:02:17.360
&gt;&gt; Joe: But I'm gonna do whatever else
&gt;&gt; Bianca Gandolfo: But

46
00:02:17.360 --> 00:02:18.810
it's gonna keep running, keep going.

47
00:02:21.170 --> 00:02:21.960
And then, Kim?

48
00:02:26.110 --> 00:02:29.450
&gt;&gt; Kim: Console
&gt;&gt; Bianca Gandolfo: And then, William?

49
00:02:29.450 --> 00:02:33.830
&gt;&gt; William: I'm sorry,
I was looking at the comments.

50
00:02:33.830 --> 00:02:34.330
Where we at?

51
00:02:35.590 --> 00:02:37.050
&gt;&gt; Bianca Gandolfo: Right here.
We're at this console out log.

52
00:02:38.200 --> 00:02:39.410
&gt;&gt; William: All the fun stuff's over.

53
00:02:39.410 --> 00:02:39.910
&gt;&gt; Bianca Gandolfo: I know.

54
00:02:45.504 --> 00:02:46.899
&gt;&gt; Bianca Gandolfo: So
then, where does it go?

55
00:02:46.899 --> 00:02:50.600
&gt;&gt; William: It will jump out
of running that function,

56
00:02:50.600 --> 00:02:52.784
go back to where it's
called a closureAlert.

57
00:02:52.784 --> 00:02:53.985
&gt;&gt; Bianca Gandolfo: Mm-hm.

58
00:02:53.985 --> 00:02:56.583
&gt;&gt; [INAUDIBLE].

59
00:02:56.583 --> 00:03:01.748
&gt;&gt; Bianca Gandolfo: And then
&gt;&gt; Bianca Gandolfo: And

60
00:03:01.748 --> 00:03:03.870
in one second, what happens?

61
00:03:05.110 --> 00:03:07.250
&gt;&gt; William: That alerter is called final.

62
00:03:07.250 --> 00:03:08.740
&gt;&gt; Bianca Gandolfo: Yep.
The alerter is called.

63
00:03:08.740 --> 00:03:09.626
So then what do we do?

64
00:03:09.626 --> 00:03:11.992
Kevin?

65
00:03:11.992 --> 00:03:16.719
&gt;&gt; Kevin: alert(x).

66
00:03:16.719 --> 00:03:23.212
&gt;&gt; Bianca Gandolfo: I'll get to
that question in just a second.

67
00:03:23.212 --> 00:03:26.410
So alert(x).

68
00:03:26.410 --> 00:03:27.504
And what's x been?

69
00:03:29.797 --> 00:03:30.895
&gt;&gt; Kevin: Just the string?

70
00:03:30.895 --> 00:03:32.379
&gt;&gt; Bianca Gandolfo: Mm-hm.

71
00:03:32.379 --> 00:03:33.129
&gt;&gt; Kevin: It's defined earlier.

72
00:03:33.129 --> 00:03:33.712
&gt;&gt; Bianca Gandolfo: Yep.

73
00:03:33.712 --> 00:03:34.629
&gt;&gt; Kevin: A closure.

74
00:03:34.629 --> 00:03:35.254
&gt;&gt; Bianca Gandolfo: What does it say?

75
00:03:35.254 --> 00:03:37.129
You can read it in a funny
voice if you want.

76
00:03:37.129 --> 00:03:38.546
&gt;&gt; Kevin: Help, I'm a variable stuck.

77
00:03:38.546 --> 00:03:39.128
&gt;&gt; Bianca Gandolfo: That's
your funny voice.

78
00:03:39.128 --> 00:03:42.546
&gt;&gt; [LAUGH]
&gt;&gt; Kevin: A closure.

79
00:03:42.546 --> 00:03:45.212
&gt;&gt; Bianca Gandolfo: All right,
[LAUGH], that works.

80
00:03:45.212 --> 00:03:49.071
&gt;&gt; Speaker 9: Just to note here that
everyone can please raise our voices

81
00:03:49.071 --> 00:03:51.837
a little bit so we can hear the questions.

82
00:03:53.587 --> 00:03:56.213
&gt;&gt; Bianca Gandolfo: Okay.

83
00:03:56.213 --> 00:03:57.254
Cool.

84
00:03:57.254 --> 00:04:02.296
So we alert it, and then where does it go?

85
00:04:02.296 --> 00:04:06.128
Jake, we just need to complete.

86
00:04:08.670 --> 00:04:11.300
&gt;&gt; Jake: It's all complete,
so go down there.

87
00:04:11.300 --> 00:04:12.848
&gt;&gt; Bianca Gandolfo: Yeah, and
then it just goes down here.

88
00:04:12.848 --> 00:04:14.895
&gt;&gt; Jake: In one second.

89
00:04:14.895 --> 00:04:15.644
&gt;&gt; Bianca Gandolfo: Yeah.

90
00:04:15.644 --> 00:04:17.370
Awesome, Tanner?

91
00:04:17.370 --> 00:04:22.770
&gt;&gt; Tanner: So do you ever have to
worry about setting In that case,

92
00:04:22.770 --> 00:04:23.800
you set it as second.

93
00:04:23.800 --> 00:04:28.290
You don't have to worry about the code
catching up to the timer that you set, so

94
00:04:28.290 --> 00:04:29.570
that stuff might get out of order.

95
00:04:29.570 --> 00:04:36.340
Like in this example, let's say you
did this on a 386 or something.

96
00:04:36.340 --> 00:04:37.220
&gt;&gt; Bianca Gandolfo: On a what?

97
00:04:37.220 --> 00:04:38.728
&gt;&gt; Tanner: On a really old computer.

98
00:04:38.728 --> 00:04:40.420
&gt;&gt; Bianca Gandolfo: Uh-huh.
&gt;&gt; Tanner: Would it

99
00:04:40.420 --> 00:04:45.070
Would it ever get to the point where
it accidentally didn't get that far.

100
00:04:45.070 --> 00:04:46.870
Do you see what I'm saying?

101
00:04:46.870 --> 00:04:49.030
&gt;&gt; Bianca Gandolfo: Like
it would be too slow?

102
00:04:49.030 --> 00:04:51.420
&gt;&gt; Tanner: Right.
&gt;&gt; Bianca Gandolfo: I don't know I never

103
00:04:51.420 --> 00:04:56.330
had I've never done anything where the
millisecond is really important something

104
00:04:56.330 --> 00:05:01.820
down to the millisecond but
I can't imagine that it's so accurate.

105
00:05:01.820 --> 00:05:05.780
Because of the way like the queue and
the stack and the event loop work.

106
00:05:05.780 --> 00:05:11.120
So the event loop doesn't
run all the time.

107
00:05:11.120 --> 00:05:15.834
So the way I imagine that it
wouldn't be 100% accurate.

108
00:05:15.834 --> 00:05:21.000
&gt;&gt; Tanner: If you had a loop here that was
looking Code that was executing without

109
00:05:21.000 --> 00:05:26.050
ever returning back to the event,
the process would work.

110
00:05:26.050 --> 00:05:30.850
If that took five seconds to run,
set time object would then

111
00:05:30.850 --> 00:05:34.560
run as soon as that event gets rescheduled
&gt;&gt; Bianca Gandolfo: Yeah, okay.

112
00:05:34.560 --> 00:05:37.520
&gt;&gt; Tanner: Rather than
waiting a second after it.

113
00:05:37.520 --> 00:05:39.520
Finished running that five second process.

114
00:05:39.520 --> 00:05:40.980
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

115
00:05:40.980 --> 00:05:42.790
And then you had a question?

116
00:05:42.790 --> 00:05:45.670
&gt;&gt; Speaker 9: The question was
what is the said time out?

117
00:05:45.670 --> 00:05:47.400
Is that a function?

118
00:05:47.400 --> 00:05:47.930
&gt;&gt; John: Yeah.

119
00:05:47.930 --> 00:05:49.090
&gt;&gt; Speaker 9: Where does that come from?

120
00:05:49.090 --> 00:05:52.610
&gt;&gt; Bianca Gandolfo: Set time out is
just a native function that comes,

121
00:05:52.610 --> 00:05:54.180
I belive with the browser.

122
00:05:57.150 --> 00:06:01.240
And we know it's a function because we see
these These two parentheses next to it.

123
00:06:01.240 --> 00:06:05.190
And that's calling a function, we call it.

124
00:06:06.200 --> 00:06:09.587
What are some other times that we
see two parentheses near each other.

125
00:06:09.587 --> 00:06:14.191
So we talked a little bit about where we
saw two squiggly brackets near each other,

126
00:06:14.191 --> 00:06:16.004
when else do we see this syntax?

127
00:06:19.629 --> 00:06:21.000
&gt;&gt; Speaker 9: Expression statement.

128
00:06:23.160 --> 00:06:23.935
&gt;&gt; Bianca Gandolfo: This is specifically.

129
00:06:23.935 --> 00:06:25.930
&gt;&gt; Speaker 9: An if
&gt;&gt; Bianca Gandolfo: Yeah, like an if, so

130
00:06:25.930 --> 00:06:30.110
you have an if statement, or
use it so if, parentheses and

131
00:06:30.110 --> 00:06:31.540
they only have the curly brackets.

132
00:06:33.720 --> 00:06:35.120
&gt;&gt; Speaker 12: I have
a different question.

133
00:06:35.120 --> 00:06:36.370
&gt;&gt; John: Okay.

134
00:06:36.370 --> 00:06:37.380
&gt;&gt; Speaker 12: Loops.

135
00:06:37.380 --> 00:06:39.630
&gt;&gt; Bianca Gandolfo: Loops, so
we use them for loops as well.

136
00:06:41.810 --> 00:06:45.418
Where else?
We use them in functions right after

137
00:06:45.418 --> 00:06:49.712
the function keyword here or
the function name.

138
00:06:49.712 --> 00:06:50.970
And that's all I can think of.

139
00:06:50.970 --> 00:06:55.600
&gt;&gt; Speaker 12: And does mathematical
expression insert precedence?

140
00:06:55.600 --> 00:06:56.830
&gt;&gt; Bianca Gandolfo: Yeah, totally.

141
00:06:56.830 --> 00:07:00.518
So we can use it to change
the order of the math

142
00:07:00.518 --> 00:07:05.421
the way it's I guess precedence
is a good way of saying it.

143
00:07:08.087 --> 00:07:10.707
&gt;&gt; Bianca Gandolfo: Yeah, so those are
the only times I can think of off the top

144
00:07:10.707 --> 00:07:11.260
of my head.

145
00:07:11.260 --> 00:07:14.120
So we have if statements, we have loops.

146
00:07:14.120 --> 00:07:18.546
There's also switch, and
then in the functions.

147
00:07:18.546 --> 00:07:22.890
Those are the off the top of my head,
the only times when we see that.

148
00:07:22.890 --> 00:07:25.030
And so just keep that in mind.

149
00:07:25.030 --> 00:07:28.580
If it doesn't look like a loop,
we know what loops look like.

150
00:07:28.580 --> 00:07:32.140
If it doesn't look like an if
statement and all these things,

151
00:07:32.140 --> 00:07:34.520
then you're probably calling a function.

152
00:07:36.940 --> 00:07:39.115
&gt;&gt; Kevin: What about when you wanna
create an anonymous function?

153
00:07:39.115 --> 00:07:40.640
&gt;&gt; Bianca Gandolfo: Mm-hm.

154
00:07:40.640 --> 00:07:46.280
&gt;&gt; Kevin: Is that just like a hack or
is that a valid JavaScript?

155
00:07:46.280 --> 00:07:47.170
&gt;&gt; Bianca Gandolfo: That's
a valid JavaScript,

156
00:07:47.170 --> 00:07:48.455
you can use an anonymous function.

157
00:07:48.455 --> 00:07:50.800
Mm-hm?

158
00:07:50.800 --> 00:07:53.080
&gt;&gt; Joe: I think, I'm lost.

159
00:07:53.080 --> 00:07:53.580
&gt;&gt; Bianca Gandolfo: Sure.

160
00:07:54.860 --> 00:07:55.840
&gt;&gt; Joe: If I were the interpreter,

161
00:07:56.980 --> 00:08:00.760
the first thing I would do is skip
all the way Next to the bottom line.

162
00:08:01.840 --> 00:08:03.500
&gt;&gt; Bianca Gandolfo: Yes.
&gt;&gt; Joe: We're on closureAlert,

163
00:08:03.500 --> 00:08:08.050
then I would go up to the top and
run the function to set X and

164
00:08:08.050 --> 00:08:11.280
skip the next function.

165
00:08:11.280 --> 00:08:15.820
Now, I hit the time out, I wait a second
and I would run the alerter function.

166
00:08:15.820 --> 00:08:18.700
I would go back up and
set x [INAUDIBLE] alert.

167
00:08:18.700 --> 00:08:20.510
&gt;&gt; Bianca Gandolfo: Let me stop you there.

168
00:08:20.510 --> 00:08:22.330
&gt;&gt; Joe: Okay good, so I'm all-
&gt;&gt; Bianca Gandolfo: Set time is not

169
00:08:22.330 --> 00:08:23.210
blocking.

170
00:08:23.210 --> 00:08:25.325
&gt;&gt; Joe: Say that again?
&gt;&gt; Bianca Gandolfo: The set time out is

171
00:08:25.325 --> 00:08:30.813
not blocking so it will actually
run the console log next and

172
00:08:30.813 --> 00:08:35.314
then it will actually just
exit this function and

173
00:08:35.314 --> 00:08:41.241
it will wait one second down here And
once the setTimeout works,

174
00:08:41.241 --> 00:08:45.671
that's when we get into
the alerter function.

175
00:08:51.547 --> 00:08:58.080
&gt;&gt; [INAUDIBLE]
&gt;&gt; Joe: So

176
00:08:58.080 --> 00:08:59.300
What does this have to do with closure.

177
00:09:00.450 --> 00:09:02.540
I can't put the two together.

178
00:09:02.540 --> 00:09:03.790
&gt;&gt; Bianca Gandolfo: We're getting there.

179
00:09:03.790 --> 00:09:04.340
&gt;&gt; Joe: Okay.
&gt;&gt; Bianca Gandolfo: We're getting

180
00:09:04.340 --> 00:09:04.840
there, yeah.

181
00:09:06.220 --> 00:09:10.510
I'm just starting off with some things
that don't seem too unusual and we've done

182
00:09:10.510 --> 00:09:16.710
before and we're comfortable with them and
then we're going to get in closure.

183
00:09:16.710 --> 00:09:20.390
I like to start it off slow.

184
00:09:20.390 --> 00:09:21.730
And then we'll get there.

185
00:09:21.730 --> 00:09:27.006
And then I just out of nowhere
trick you and I was like ha.

186
00:09:27.006 --> 00:09:29.170
&gt;&gt; Joe: [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah.

187
00:09:29.170 --> 00:09:29.670
[LAUGH]

