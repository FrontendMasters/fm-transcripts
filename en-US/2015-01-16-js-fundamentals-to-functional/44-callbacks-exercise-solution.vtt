WEBVTT

1
00:00:00.000 --> 00:00:04.088
[MUSIC]

2
00:00:04.088 --> 00:00:08.087
&gt;&gt; Bianca Gandolfo: So we were just
doing the last closure exercise.

3
00:00:12.020 --> 00:00:16.292
&gt;&gt; Bianca Gandolfo: Which
is to use the module

4
00:00:16.292 --> 00:00:21.381
pattern to create a toaster.

5
00:00:23.400 --> 00:00:27.930
And there's a bunch of different ways you
can do this, this is just sort of like

6
00:00:27.930 --> 00:00:34.210
expressing, I don't know, your creative
side when making your program.

7
00:00:34.210 --> 00:00:42.360
So this is an example of a toaster
that has a maxTemp of 500.

8
00:00:42.360 --> 00:00:48.690
So, how we'd call this, we'd say, var,
this is actually gonna be toaster.

9
00:00:48.690 --> 00:00:54.838
So var myToaster = toaster

10
00:00:54.838 --> 00:00:59.649
: and then you can say

11
00:00:59.649 --> 00:01:07.410
myToaster.setTemp I'm sorry.

12
00:01:07.410 --> 00:01:08.660
This should also be private.

13
00:01:19.500 --> 00:01:25.807
SetTemp = I don't know,
300 and then so, I'm sorry,

14
00:01:25.807 --> 00:01:32.800
we should pass the 300 like this,
since it's a function.

15
00:01:32.800 --> 00:01:36.680
So myToaster.setTemp,
we're gonna pass it 300.

16
00:01:36.680 --> 00:01:42.087
So and this says if the newTemp here.

17
00:01:42.087 --> 00:01:43.762
&gt;&gt; Speaker 2: We wanna
come after calculate.

18
00:01:46.960 --> 00:01:52.252
&gt;&gt; Bianca Gandolfo: Nope
because good point,

19
00:01:52.252 --> 00:01:54.900
there we go.

20
00:01:57.090 --> 00:01:58.430
Thank you.

21
00:01:58.430 --> 00:02:02.080
So we have set temp
we're gonna pass at 300.

22
00:02:02.080 --> 00:02:07.050
So, newTemp is now 300 and it says,
if newTemp is greater than maxTemp,

23
00:02:07.050 --> 00:02:15.320
maxTemp is 500 or console.log, that temp
is too high, otherwise temp = newTemp.

24
00:02:15.320 --> 00:02:17.880
And so, what this does is this prevents

25
00:02:17.880 --> 00:02:21.210
people from being able to set the
temperature of your toaster to too high.

26
00:02:23.360 --> 00:02:24.270
Anyone else?

27
00:02:24.270 --> 00:02:26.190
How else do people implement this?

28
00:02:27.390 --> 00:02:28.360
A different implementation?

29
00:02:31.700 --> 00:02:33.370
Rich I think you had one, what was yours?

30
00:02:34.400 --> 00:02:36.535
&gt;&gt; Rich: I just kind of
modeled it over the car one.

31
00:02:36.535 --> 00:02:37.800
&gt;&gt; Bianca Gandolfo: Mm-hm.

32
00:02:37.800 --> 00:02:44.190
&gt;&gt; Rich: And let the user increment
the like the light dark type things?

33
00:02:44.190 --> 00:02:46.200
&gt;&gt; Bianca Gandolfo: Okay,
so like the timer kind of?

34
00:02:46.200 --> 00:02:47.912
&gt;&gt; Rich: Yeah, exactly.

35
00:02:47.912 --> 00:02:54.490
And then they're gonna input
like if it was just one slice

36
00:02:54.490 --> 00:02:58.220
then it wasn't gonna go for as long, and
if it was two slices it would or whatever.

37
00:02:59.280 --> 00:03:04.120
But it wouldn't let the user mess
with the inner workings of how

38
00:03:04.120 --> 00:03:08.490
long the toaster should run.

39
00:03:08.490 --> 00:03:13.488
Your user can't change the next temp,
so overrun it.

40
00:03:13.488 --> 00:03:17.147
&gt;&gt; Bianca Gandolfo: Right,
cool, awesome, so

41
00:03:17.147 --> 00:03:22.483
that is really an example
of making a class

42
00:03:22.483 --> 00:03:28.900
like constructor and
JavaScript which is cool.

43
00:03:28.900 --> 00:03:34.030
The second thing we were gonna do that
we did was the callback exercises.

44
00:03:37.800 --> 00:03:39.140
So I'm just gonna paste this in.

45
00:03:40.880 --> 00:03:41.921
Do this really quick.

46
00:03:50.254 --> 00:03:52.020
&gt;&gt; Bianca Gandolfo: All right.

47
00:03:52.020 --> 00:03:56.520
So the first one says, write a function,
funcCaller, that takes func which would be

48
00:03:56.520 --> 00:04:01.900
a function, and an arg which
could be any kind of data, and

49
00:04:01.900 --> 00:04:07.880
the function returns func called
with the arg as an argument.

50
00:04:07.880 --> 00:04:12.280
So the first thing we need to do is to
write a function called funcCaller.

51
00:04:13.640 --> 00:04:17.962
So that just equals the function and
again it takes the func,

52
00:04:17.962 --> 00:04:19.754
and then it takes an arg.

53
00:04:25.795 --> 00:04:30.519
&gt;&gt; Bianca Gandolfo: And
excuse me, and then we are going

54
00:04:30.519 --> 00:04:35.254
to call func with arg and return it.

55
00:04:42.170 --> 00:04:43.310
&gt;&gt; Bianca Gandolfo: So
that's the first one.

56
00:04:45.100 --> 00:04:48.080
The second one is
the function called firstVal.

57
00:04:48.080 --> 00:04:53.140
So we say firstVal equal the function,
right?

58
00:04:53.140 --> 00:04:58.890
There's our function body and our first
parameter is going to be an array and

59
00:04:58.890 --> 00:05:03.010
then the next one is gonna be a function,
and

60
00:05:03.010 --> 00:05:08.330
we're gonna call the function with
the first value of the array, right?

61
00:05:08.330 --> 00:05:11.800
So, array, at the zeroth index.

62
00:05:11.800 --> 00:05:14.421
And we're gonna call that
index which is gonna be zero.

63
00:05:14.421 --> 00:05:16.629
And then we're gonna
pass the entire array.

64
00:05:20.087 --> 00:05:20.587
&gt;&gt; Bianca Gandolfo: Cool?

65
00:05:23.050 --> 00:05:24.900
&gt;&gt; Rich: And
that's where I kind of got tripped up.

66
00:05:24.900 --> 00:05:29.110
&gt;&gt; Bianca Gandolfo: Do you
have a question about it?

67
00:05:30.940 --> 00:05:36.280
&gt;&gt; Rich: Yeah, I guess it's maybe
the wording of the thing so it's gonna

68
00:05:36.280 --> 00:05:40.920
call a function with just those three
arguments, one half will be the first one.

69
00:05:40.920 --> 00:05:42.180
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Rich: Next one,

70
00:05:42.180 --> 00:05:45.400
I don't understand index
pound index number.

71
00:05:45.400 --> 00:05:46.030
&gt;&gt; Bianca Gandolfo: Yeah, index number.

72
00:05:48.410 --> 00:05:50.120
And then the whole array, yeah.

73
00:05:53.620 --> 00:05:54.120
Cool.

74
00:05:55.480 --> 00:05:58.470
And, so now we're going to write
a different version of first file,

75
00:05:58.470 --> 00:06:03.010
that doesn't matter if it's an array or
object.

76
00:06:03.010 --> 00:06:05.020
So, we're just going to call it a list.

77
00:06:05.020 --> 00:06:05.796
It's gonna take a func.

78
00:06:08.171 --> 00:06:10.339
&gt;&gt; Bianca Gandolfo: So
what we can do here,

79
00:06:10.339 --> 00:06:14.710
we can say if we can
say like Array.isArray.

80
00:06:14.710 --> 00:06:21.730
So this is just a method that
checks if something is an array.

81
00:06:21.730 --> 00:06:24.720
So, we can just pass
only pass list to it and

82
00:06:24.720 --> 00:06:27.040
then it will return true if it's an array.

83
00:06:28.480 --> 00:06:31.690
So if it's an array, we're just gonna
do like the same as before right.

84
00:06:31.690 --> 00:06:32.920
We're just gonna pass the first one.

85
00:06:40.750 --> 00:06:43.200
Else, we're going to deal
with it if it's an object.

86
00:06:43.200 --> 00:06:45.449
So we're just assuming that
it's either array or an object.

87
00:06:46.560 --> 00:06:52.739
So one way we could do this,
we could just loop

88
00:06:52.739 --> 00:07:01.490
through, so var k in list.

89
00:07:01.490 --> 00:07:06.180
So we can just loop through the list, and
then we can just return out of it, return.

90
00:07:07.660 --> 00:07:09.050
And this would just loop once.

91
00:07:11.295 --> 00:07:15.900
K, our list[k], so
this is just a property value, and

92
00:07:15.900 --> 00:07:18.650
this is the property, and
this is the entire list.

93
00:07:18.650 --> 00:07:23.670
And if you return out of it,
then it will stop looping,

94
00:07:23.670 --> 00:07:25.780
then we can just return this one too,
so it's consistent.

95
00:07:29.810 --> 00:07:35.580
So that's one way to do it,
you can also just do, so

96
00:07:35.580 --> 00:07:41.670
there's this one method
called object.keys, and

97
00:07:41.670 --> 00:07:46.570
then you can pass the list there, and this
returns an array of all of the properties,

98
00:07:46.570 --> 00:07:51.170
so we can call this propArray and
then we can say,

99
00:07:52.390 --> 00:07:57.970
then we can say, func and
then we don't need to return it.

100
00:07:59.380 --> 00:08:05.131
We say func proper a,

101
00:08:05.131 --> 00:08:10.770
func list, and this is getting the value.

102
00:08:10.770 --> 00:08:14.677
List prop array at I,

103
00:08:14.677 --> 00:08:18.802
prop array at I which,

104
00:08:18.802 --> 00:08:24.020
again, is the proper name.

105
00:08:24.020 --> 00:08:25.120
So, object.key.

106
00:08:25.120 --> 00:08:28.450
So what it does is it returns an array
of all the keys in that object.

107
00:08:31.500 --> 00:08:32.040
And then list.

108
00:08:33.940 --> 00:08:37.380
So, that's just another
way that you can do it.

109
00:08:37.380 --> 00:08:40.610
&gt;&gt; Rich: Where are the I's coming from.

110
00:08:40.610 --> 00:08:41.660
&gt;&gt; Bianca Gandolfo: I'm sorry,
it should be zero.

111
00:08:41.660 --> 00:08:46.071
I'm just so used to doing I, thank you.

112
00:08:46.071 --> 00:08:48.441
Yeah, zero.

