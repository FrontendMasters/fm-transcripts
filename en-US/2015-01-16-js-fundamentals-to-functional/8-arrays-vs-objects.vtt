WEBVTT

1
00:00:00.000 --> 00:00:04.019
[MUSIC]

2
00:00:04.019 --> 00:00:08.060
&gt;&gt; Bianca Gandolfo: Arrays, so
what do we know about arrays?

3
00:00:08.060 --> 00:00:09.150
&gt;&gt; Speaker 2: Container.

4
00:00:09.150 --> 00:00:11.120
&gt;&gt; Bianca Gandolfo: Array is a container,
just like an object,

5
00:00:11.120 --> 00:00:14.434
it's a data structure.

6
00:00:14.434 --> 00:00:19.609
[CROSSTALK] Yeah, so
we can have an ordered list in our array.

7
00:00:19.609 --> 00:00:20.970
&gt;&gt; Speaker 2: You can nest them.

8
00:00:20.970 --> 00:00:22.210
&gt;&gt; Bianca Gandolfo: Yeah,
you can nest them.

9
00:00:22.210 --> 00:00:26.489
You can save any data type as a value
in your array just like an object.

10
00:00:28.369 --> 00:00:29.188
&gt;&gt; Speaker 2: No.

11
00:00:29.188 --> 00:00:31.120
&gt;&gt; Bianca Gandolfo: Anything else?

12
00:00:31.120 --> 00:00:32.160
&gt;&gt; Speaker 3: An array is an object?

13
00:00:32.160 --> 00:00:34.370
&gt;&gt; Bianca Gandolfo: Yeah,
an array is as an object.

14
00:00:34.370 --> 00:00:39.530
If you're coming from an object
oriented language, you could

15
00:00:39.530 --> 00:00:44.900
think of an array as a subclass of an
object in that it inherits from an object.

16
00:00:44.900 --> 00:00:49.070
If that doesn't mean anything to you,
don't worry about it, but

17
00:00:49.070 --> 00:00:53.140
that might sort of clarify for
those who've had that background.

18
00:00:54.740 --> 00:00:55.770
We have arrays.

19
00:00:55.770 --> 00:00:59.060
Arrays are a data structure.

20
00:00:59.060 --> 00:01:03.050
They're another data structure that
comes out of a box with JavaScript.

21
00:01:03.050 --> 00:01:08.090
We tend to use them for
things that are ordered because of

22
00:01:08.090 --> 00:01:13.480
the numerical indicies gives us just
a natural way because numbers are ordered.

23
00:01:13.480 --> 00:01:18.200
It's a natural way to keep things
in order versus objects when

24
00:01:18.200 --> 00:01:23.270
we tend to have string properties
that don't have an inherent order.

25
00:01:23.270 --> 00:01:27.030
But at it's core, what's important to
note is that an array is an object and

26
00:01:27.030 --> 00:01:29.430
so the rules are going to be the same.

27
00:01:30.450 --> 00:01:31.650
We're gonna explore that and

28
00:01:31.650 --> 00:01:36.660
then we're gonna talk a lot
about how arrays are objects.

29
00:01:36.660 --> 00:01:39.540
And then we're gonna talk a little
bit about how arrays are different

30
00:01:39.540 --> 00:01:40.320
than objects.

31
00:01:41.650 --> 00:01:42.340
Cool.

32
00:01:42.340 --> 00:01:45.747
Just an overview, arrays versus objects,
we're gonna be talking about access &amp;&amp;

33
00:01:45.747 --> 00:01:49.270
assignments, we're gonna be talking
about native methods &amp;&amp; properties.

34
00:01:49.270 --> 00:01:53.900
When I say native, all I mean is it comes
with a language, cuz there's some methods

35
00:01:53.900 --> 00:01:56.850
that you get from libraries, such as
the underscore library, which we'll cover

36
00:01:56.850 --> 00:02:01.250
tomorrow but there's also methods
that just come out of the box.

37
00:02:01.250 --> 00:02:05.541
You can just open your console and
say like, array dot and then,

38
00:02:05.541 --> 00:02:07.699
actually that's not working.

39
00:02:10.539 --> 00:02:12.328
&gt;&gt; Bianca Gandolfo: And
then you can say array dot, and

40
00:02:12.328 --> 00:02:15.560
then we have all of these methods
that just come out of the box.

41
00:02:17.340 --> 00:02:19.910
Some of them you might be familiar with.

42
00:02:20.930 --> 00:02:26.690
And then we're also gonna talk
about iteration techniques and

43
00:02:26.690 --> 00:02:30.530
how they're different for
arrays and the same.

44
00:02:32.200 --> 00:02:34.990
when would we use an array
versus an object?

45
00:02:36.960 --> 00:02:38.985
When would you choose to
use one versus the other?

46
00:02:38.985 --> 00:02:42.521
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah, so

47
00:02:42.521 --> 00:02:43.669
if you want it to be ordered.

48
00:02:47.989 --> 00:02:49.990
&gt;&gt; Speaker 2: Doesn't
have named properties.

49
00:02:49.990 --> 00:02:51.520
&gt;&gt; Bianca Gandolfo: Yeah, so
if it doesn't make sense for

50
00:02:51.520 --> 00:02:56.660
it to have named properties,
like maybe you have like a bunch of names.

51
00:02:56.660 --> 00:03:00.750
You could say var names equals and
then you could put like the names of.

52
00:03:01.980 --> 00:03:07.899
Here let me put that up and
then you could put the names of your pets.

53
00:03:12.279 --> 00:03:13.279
&gt;&gt; Bianca Gandolfo: Whatever
your pets are.

54
00:03:15.719 --> 00:03:18.467
&gt;&gt; Bianca Gandolfo: Does
anyone have a pet, pet name?

55
00:03:18.467 --> 00:03:21.027
&gt;&gt; Speaker 4: Wonder Woman.

56
00:03:21.027 --> 00:03:23.590
&gt;&gt; Bianca Gandolfo: Wonder Woman?

57
00:03:23.590 --> 00:03:24.700
That's a good one.

58
00:03:24.700 --> 00:03:29.849
This just makes sense for it to be a
series, can you guys see that in the back?

59
00:03:34.110 --> 00:03:36.940
Because it's all the same thing,
they're all names, so you wouldn't want to

60
00:03:36.940 --> 00:03:41.256
say like var names and
then have an array and just be like name1.

61
00:03:41.256 --> 00:03:49.750
That's not adding to the data, that's just
adding extra data that's not important.

62
00:03:49.750 --> 00:03:54.120
Maybe they're all the same thing, you
don't need a key-value pair, it's ordered.

63
00:03:55.220 --> 00:03:55.930
What else?

64
00:03:55.930 --> 00:03:58.520
Maybe you want to use the array
methods that come with it.

65
00:03:58.520 --> 00:04:01.310
Maybe you want to be able to sort,

66
00:04:01.310 --> 00:04:06.790
maybe you want to do something
with the length property.

67
00:04:06.790 --> 00:04:07.919
What else?

68
00:04:09.530 --> 00:04:10.470
That's all I can think of right now.

69
00:04:10.470 --> 00:04:15.190
But yeah, so there's certain use cases for
arrays and objects and so

70
00:04:15.190 --> 00:04:16.270
you need to choose wisely.

