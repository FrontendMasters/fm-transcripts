WEBVTT

1
00:00:00.000 --> 00:00:03.837
[MUSIC]

2
00:00:03.837 --> 00:00:06.970
&gt;&gt; Bianca Gandolfo: So
now we're gonna move on to functions.

3
00:00:06.970 --> 00:00:08.690
What do we know about functions?

4
00:00:08.690 --> 00:00:13.172
Let's see,
&gt;&gt; Bianca Gandolfo: Joe,

5
00:00:13.172 --> 00:00:16.740
what do you know about functions?

6
00:00:16.740 --> 00:00:17.337
Just one thing.

7
00:00:19.962 --> 00:00:24.345
&gt;&gt; Joe: Functions are just
small modules of code that

8
00:00:24.345 --> 00:00:28.460
try to isolate a certain operation.

9
00:00:28.460 --> 00:00:30.950
&gt;&gt; Bianca Gandolfo: Sure, so
you can use functions for encapsulation.

10
00:00:33.250 --> 00:00:34.040
What about Tanner?

11
00:00:34.040 --> 00:00:35.254
What do you know about functions?

12
00:00:36.671 --> 00:00:40.380
&gt;&gt; Tanner: This is kinda the part
where the code does something.

13
00:00:40.380 --> 00:00:44.300
&gt;&gt; Bianca Gandolfo: Yeah, yeah, so you
could think of it having like a button,

14
00:00:44.300 --> 00:00:46.953
and you can hit the button and
then it goes and it runs something.

15
00:00:46.953 --> 00:00:48.046
Mm-hm.

16
00:00:50.982 --> 00:00:52.133
&gt;&gt; Bianca Gandolfo: Let's see.

17
00:00:52.133 --> 00:00:57.770
What about Ben?

18
00:00:57.770 --> 00:00:59.030
&gt;&gt; Ben: Functions are objects.

19
00:00:59.030 --> 00:00:59.768
&gt;&gt; Bianca Gandolfo: Functions are objects!

20
00:00:59.768 --> 00:01:03.540
Nice, extra points.

21
00:01:03.540 --> 00:01:05.130
Let's see, who else wants to go.

22
00:01:06.210 --> 00:01:07.220
William, did you wanna go?

23
00:01:08.980 --> 00:01:13.240
&gt;&gt; William: I know that the parameters
can be passed in willy-nilly.

24
00:01:13.240 --> 00:01:14.870
&gt;&gt; Bianca Gandolfo: Yeah, so
you can pass arguments and

25
00:01:14.870 --> 00:01:16.640
there's parameters that hold values.

26
00:01:17.970 --> 00:01:19.760
Awesome, so these are all true.

27
00:01:19.760 --> 00:01:25.200
So the way that I think of functions are,
they're an object, just like Ben said.

28
00:01:25.200 --> 00:01:27.730
But they're an object that does something.

29
00:01:27.730 --> 00:01:31.130
And the fact that functions
are objects in JavaScript,

30
00:01:31.130 --> 00:01:32.490
is a really interesting concept.

31
00:01:32.490 --> 00:01:36.248
The fact that we can assign them to
variables, and pass them around as data,

32
00:01:36.248 --> 00:01:40.537
which we'll talk about more tomorrow when
we get into like, higher order functions,

33
00:01:40.537 --> 00:01:42.080
is really, really powerful.

34
00:01:42.080 --> 00:01:45.690
So that's just a cool thing.

35
00:01:45.690 --> 00:01:47.730
And so we can pass them around.

36
00:01:47.730 --> 00:01:50.360
And one metaphor that we use
a lot at Hack Reactor is,

37
00:01:50.360 --> 00:01:52.610
we talk about how a function is a blender.

38
00:01:52.610 --> 00:01:53.510
And we say,

39
00:01:53.510 --> 00:01:58.040
so a blender is an object, and you can
have a factory that makes blenders.

40
00:01:58.040 --> 00:02:02.100
So if you have some constructor that's
making more functions, for example,

41
00:02:02.100 --> 00:02:03.330
you could do that.

42
00:02:03.330 --> 00:02:07.210
And you can give the blender,
I can give the blender to Grace, and

43
00:02:07.210 --> 00:02:12.820
Grace can give the blender to Kashore,
for example.

44
00:02:12.820 --> 00:02:19.170
Or we could set the blender down,
put some fruit in it, right?

45
00:02:19.170 --> 00:02:21.420
Arguments, and
press the button and make juice.

46
00:02:21.420 --> 00:02:24.310
And so once you press the button,
that's running the function, and

47
00:02:24.310 --> 00:02:28.110
the metaphor of the button
is those two parenthesis.

48
00:02:28.110 --> 00:02:28.760
The fancy name for

49
00:02:28.760 --> 00:02:32.760
that is the invocation operator, but
two parentheses next to each other.

50
00:02:35.020 --> 00:02:39.020
And so that's sort of the metaphor of how
I think about a function as data, and

51
00:02:39.020 --> 00:02:43.660
also as something,
a unit that has an action that can be run.

52
00:02:44.930 --> 00:02:50.830
For the next thing that I've also
heard about to describe it is,

53
00:02:50.830 --> 00:02:57.600
it takes care of some detail work that
we don't then want to be worried about.

54
00:02:57.600 --> 00:03:01.630
So it's just a very easy way to do
something that then, you know it works.

55
00:03:03.910 --> 00:03:07.200
Kind of abstracting it, so
I don't have to really worry about well,

56
00:03:07.200 --> 00:03:11.140
how does it figure out the cube of x or
whatever, it just does it.

57
00:03:11.140 --> 00:03:15.120
Yeah, yeah, totally, so
when we get into more functional concepts,

58
00:03:15.120 --> 00:03:20.210
we talk about functions as units of
abstraction and actions that we can then

59
00:03:20.210 --> 00:03:23.250
combine in interesting ways
that could be very powerful.

60
00:03:24.430 --> 00:03:27.200
&gt;&gt; Speaker 6: People think of
the properties being the nouns and

61
00:03:27.200 --> 00:03:29.390
the functions being the verbs.

62
00:03:29.390 --> 00:03:30.690
&gt;&gt; Bianca Gandolfo: Yeah,
absolutely, I like that, so

63
00:03:30.690 --> 00:03:35.110
the functions being the verbs and
objects being the nouns, cool.

64
00:03:35.110 --> 00:03:36.760
&gt;&gt; Speaker 7: And functions are scoped.

65
00:03:36.760 --> 00:03:40.100
&gt;&gt; Bianca Gandolfo: Yeah, functions have
scope, that's super, super important.

66
00:03:40.100 --> 00:03:45.080
So whenever we call a function, it creates
a scope, every time, that's important.

67
00:03:46.480 --> 00:03:47.430
Did you have a question Mark?

68
00:03:47.430 --> 00:03:49.790
&gt;&gt; Mark: [COUGH] Yeah I was
just trying to figure out,

69
00:03:49.790 --> 00:03:53.590
they were asking about nesting in
the arrays chapter, do we skip that?

70
00:03:53.590 --> 00:03:54.400
&gt;&gt; Bianca Gandolfo: We're
gonna get to that.

71
00:03:54.400 --> 00:03:56.158
&gt;&gt; Mark: Okay,
that's what they were wondering.

72
00:03:56.158 --> 00:04:00.427
[COUGH]
&gt;&gt; Bianca Gandolfo: Mm-hm.

73
00:04:00.427 --> 00:04:01.570
Cool.

74
00:04:01.570 --> 00:04:02.390
Sweet.

75
00:04:02.390 --> 00:04:08.680
So we're just gonna do an overview
of the anatomy of the function,

76
00:04:08.680 --> 00:04:10.420
really quick, and
then we're gonna go into nesting.

77
00:04:10.420 --> 00:04:13.710
I just wanted to do something new,
and then we're gonna go back and

78
00:04:13.710 --> 00:04:17.292
see if we still remember
the rules that don't change,

79
00:04:17.292 --> 00:04:20.700
and we're gonna apply that to
a nest of data structures.

80
00:04:20.700 --> 00:04:24.000
So here's just a quick
anatomy of a function.

81
00:04:24.000 --> 00:04:25.840
Some key words that are important.

82
00:04:25.840 --> 00:04:30.740
So we have the function definition or
declaration, and that includes

83
00:04:30.740 --> 00:04:35.590
things like the keyword function, the
parentheses, and the entire function body.

84
00:04:35.590 --> 00:04:38.780
And I'm sorry for
those of you who are color blind.

85
00:04:38.780 --> 00:04:44.820
I put arrows to kind of help out there,
but I don't know how else to visualize it.

86
00:04:44.820 --> 00:04:47.780
And so then we have the function name.

87
00:04:47.780 --> 00:04:52.080
You can have a function name or you can
save an anonymous function to a variable.

88
00:04:53.430 --> 00:04:57.520
Both ways you can refer to the function
later, just like a variable.

89
00:04:58.580 --> 00:05:04.780
Then we have the parameters,
which are a and b in this case here.

90
00:05:04.780 --> 00:05:05.280
A and b.

91
00:05:06.500 --> 00:05:10.080
And then our perimeters get
values during call-time,

92
00:05:10.080 --> 00:05:14.048
they get values when we
pass them arguments here.

93
00:05:14.048 --> 00:05:20.020
And then call-time is when
we have the two parentheses.

94
00:05:20.020 --> 00:05:25.070
That's when we press that go button,
and we also call that call-time,

95
00:05:25.070 --> 00:05:30.400
invoking the function, I don't know,
that's all I can think of right now.

96
00:05:31.640 --> 00:05:33.770
&gt;&gt; Speaker 9: Do I have,
do we have to put var, I mean,

97
00:05:33.770 --> 00:05:36.850
do we have to, when we define it?

98
00:05:36.850 --> 00:05:38.330
&gt;&gt; Bianca Gandolfo: No.
&gt;&gt; Speaker 9: We don't,

99
00:05:38.330 --> 00:05:40.410
but is that a global scope thing?

100
00:05:40.410 --> 00:05:41.800
&gt;&gt; Bianca Gandolfo: Yeah,
its a hoisting thing, so

101
00:05:41.800 --> 00:05:46.590
I recommend that you always just say
var function name equals function.

102
00:05:49.210 --> 00:05:51.360
Yeah, it has to do with hoisting and
scope,

103
00:05:51.360 --> 00:05:55.430
and it can get a little hairy
if you're not careful, so

