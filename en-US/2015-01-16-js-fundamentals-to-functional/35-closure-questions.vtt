WEBVTT

1
00:00:00.000 --> 00:00:03.962
[MUSIC]

2
00:00:03.962 --> 00:00:06.281
&gt;&gt; Bianca Gandolfo: So
in similarly to our last exercise,

3
00:00:06.281 --> 00:00:08.530
we're just calling alerter later.

4
00:00:09.680 --> 00:00:13.796
So the setTimeout is JavaScript
calling it later, in one second.

5
00:00:17.796 --> 00:00:21.138
&gt;&gt; Bianca Gandolfo: And here,
we are deciding to call it later.

6
00:00:21.138 --> 00:00:23.963
Explicitly.

7
00:00:29.296 --> 00:00:31.090
&gt;&gt; Bianca Gandolfo: Thumbs?

8
00:00:31.090 --> 00:00:33.060
It's okay if you have a middle thumb.

9
00:00:33.060 --> 00:00:34.254
Most people don't understand this.

10
00:00:36.462 --> 00:00:37.989
&gt;&gt; Bianca Gandolfo: Thumbs online.

11
00:00:43.547 --> 00:00:45.540
&gt;&gt; Bianca Gandolfo: Any questions?

12
00:00:45.540 --> 00:00:49.530
What is most confusing about

13
00:00:50.880 --> 00:00:54.820
this idea right now?

14
00:00:54.820 --> 00:00:58.630
&gt;&gt; Speaker 2: So
I get the part where you're storing

15
00:00:58.630 --> 00:01:01.900
closure alert in the funcStorer and
that becomes a function and

16
00:01:01.900 --> 00:01:03.970
so there's like that permanence with x?

17
00:01:05.640 --> 00:01:10.810
Because you're not really calling
anything, you know what I mean?

18
00:01:10.810 --> 00:01:14.330
But I still don't understand
why is that called closure, or

19
00:01:14.330 --> 00:01:15.670
what's the closure in it?

20
00:01:15.670 --> 00:01:16.430
&gt;&gt; Bianca Gandolfo: Yeah, so

21
00:01:16.430 --> 00:01:22.470
this part is the closure, The closure is
the function that you can call later.

22
00:01:24.060 --> 00:01:29.150
And it's called a closure because
it holds, it has reference

23
00:01:29.150 --> 00:01:33.550
to a variable from the environment.

24
00:01:33.550 --> 00:01:34.940
From its parent environment.

25
00:01:34.940 --> 00:01:36.470
So, this is a closure.

26
00:01:36.470 --> 00:01:39.610
FuncStorer is a closure because
it holds reference to x.

27
00:01:39.610 --> 00:01:43.530
So x is initialized and
manipulated in a different scope.

28
00:01:43.530 --> 00:01:45.800
So we could do a bunch of stuff to x.

29
00:01:45.800 --> 00:01:47.320
In this case, we're just adding to it, but

30
00:01:47.320 --> 00:01:50.260
you can imagine that you could
do a lot of different things.

31
00:01:53.000 --> 00:01:58.254
And since funcStorer holds a reference
to the environment, it's a closure.

32
00:02:01.172 --> 00:02:05.278
&gt;&gt; Speaker 2: If you just wrap all that
code in an anonymous function with no

33
00:02:05.278 --> 00:02:09.700
name, is that all that code would
be in a closure as a function?

34
00:02:09.700 --> 00:02:10.963
Is that true, I guess?

35
00:02:14.671 --> 00:02:15.660
&gt;&gt; Bianca Gandolfo: No.

36
00:02:15.660 --> 00:02:16.730
I'm not sure.

37
00:02:16.730 --> 00:02:19.910
So you're saying if I
wrapped all of this in?l

38
00:02:19.910 --> 00:02:20.750
&gt;&gt; Speaker 2: Yeah, because the way I'm

39
00:02:20.750 --> 00:02:25.620
saying it is you can either
assign a function to a variable.

40
00:02:25.620 --> 00:02:31.080
Assign, if you took off the line where
it says var funcStore = closureAlert,

41
00:02:32.140 --> 00:02:33.960
if you took the parentheses off,

42
00:02:33.960 --> 00:02:39.540
you'd just be reassigning the function to
funcStorer and it wouldn't be a closure.

43
00:02:39.540 --> 00:02:41.400
But if you leave the parentheses on,
it is a closure.

44
00:02:41.400 --> 00:02:43.900
So really it's just a function.

45
00:02:44.990 --> 00:02:48.280
&gt;&gt; Bianca Gandolfo: It's because
the key here about why we're calling it

46
00:02:48.280 --> 00:02:50.380
is cuz it's storing a function.

47
00:02:50.380 --> 00:02:53.838
So this closureAlert is
returning a function.

48
00:02:58.588 --> 00:03:02.023
&gt;&gt; Speaker 2: So what's the difference
between var funcStorer = closureAlert

49
00:03:02.023 --> 00:03:04.730
without parentheses and that one?

50
00:03:04.730 --> 00:03:10.582
&gt;&gt; Bianca Gandolfo: Sure,
that's a great question, so let's do that.

51
00:03:10.582 --> 00:03:12.948
So we can first just.

52
00:03:12.948 --> 00:03:16.266
Oops.

53
00:03:16.266 --> 00:03:21.766
So there's our closure

54
00:03:21.766 --> 00:03:25.620
alert, right?

55
00:03:25.620 --> 00:03:29.960
If we just type out closure alert it's
just a function that's not called.

56
00:03:29.960 --> 00:03:32.440
So it just prints out the function body.

57
00:03:32.440 --> 00:03:36.260
So if we call it funkStore.

58
00:03:36.260 --> 00:03:37.690
This is where you store the funk.

59
00:03:39.240 --> 00:03:44.880
And we just assign that to
closureAlert like this.

60
00:03:44.880 --> 00:03:48.090
It's just gonna assign
the function body of closureAlert.

61
00:03:49.340 --> 00:03:53.230
So now if we look at funkStore, with a k.

62
00:03:53.230 --> 00:03:55.020
It's just a function body,
and we could call it.

63
00:03:56.250 --> 00:03:57.270
What is this going to return?

64
00:03:57.270 --> 00:04:02.199
&gt;&gt; Speaker 2: A new alerter function.

65
00:04:02.199 --> 00:04:04.110
&gt;&gt; Bianca Gandolfo: Mm-hm.

66
00:04:04.110 --> 00:04:06.421
It might return something
that looks like this, right?

67
00:04:09.797 --> 00:04:11.151
&gt;&gt; Bianca Gandolfo: Right?

68
00:04:11.151 --> 00:04:12.379
Whoops.

69
00:04:21.087 --> 00:04:22.254
&gt;&gt; Bianca Gandolfo: And what we want is,

70
00:04:22.254 --> 00:04:26.050
we wanna be able to call the alerter
function, from funcStorer.

71
00:04:27.100 --> 00:04:34.957
So what we could do [blank audio] So

72
00:04:34.957 --> 00:04:39.773
this is myAlertFunc =

73
00:04:39.773 --> 00:04:44.850
closureAlert ();.

74
00:04:44.850 --> 00:04:47.838
Now myAlertFunc.

75
00:04:49.510 --> 00:04:53.363
&gt;&gt; Bianca Gandolfo: Is actually that
function, which then you can call and

76
00:04:53.363 --> 00:04:55.780
it will actually alert.

77
00:04:55.780 --> 00:04:59.296
Versus, what did I call it, funcStore?

78
00:05:01.630 --> 00:05:04.820
&gt;&gt; Bianca Gandolfo: If I call it,
it's just returning that function.

79
00:05:04.820 --> 00:05:07.160
We'd have to do something like this for
it to work.

80
00:05:07.160 --> 00:05:08.310
And that's just weird.

81
00:05:09.360 --> 00:05:11.400
And it wouldn't work,
if we wanted to do it twice.

82
00:05:11.400 --> 00:05:14.090
It would always just alert once.

83
00:05:16.830 --> 00:05:21.741
So by storing that alerter function in
a variable and being able to call it more

84
00:05:21.741 --> 00:05:25.822
than once, we can continue to
have access to that parent scope,

85
00:05:25.822 --> 00:05:31.216
to this variable x
&gt;&gt; Speaker 3: So

86
00:05:31.216 --> 00:05:36.270
its not like you have to have a global
variable, you know what I mean?

87
00:05:36.270 --> 00:05:39.750
I'm trying to think of very simple
real world applications for

88
00:05:39.750 --> 00:05:44.320
this as opposed to saying I'm gonna set
x to be a global variable at my window.

89
00:05:45.360 --> 00:05:46.490
&gt;&gt; Bianca Gandolfo: Right.
&gt;&gt; Speaker 3: And messing with that.

90
00:05:46.490 --> 00:05:50.345
It's a compact way to can
still have that functionality.

91
00:05:50.345 --> 00:05:52.470
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; Speaker 3: But keeping it local.

92
00:05:52.470 --> 00:05:53.190
&gt;&gt; Bianca Gandolfo: Yeah, totally.

93
00:05:54.680 --> 00:05:59.190
So we wanted to,
&gt;&gt; Bianca Gandolfo: Let's see, so

94
00:05:59.190 --> 00:06:04.310
another example here unless we
have questions with this example?

95
00:06:06.000 --> 00:06:08.694
Yeah.
&gt;&gt; Speaker 4: The alert ++x Why does that

96
00:06:08.694 --> 00:06:09.850
increment x?

97
00:06:11.070 --> 00:06:12.110
&gt;&gt; Bianca Gandolfo: That's
just a shorthand.

98
00:06:12.110 --> 00:06:16.900
You can think of it saying x-
&gt;&gt; Speaker 4: The alert,

99
00:06:16.900 --> 00:06:19.190
that gives you an alert box, right?

100
00:06:19.190 --> 00:06:20.190
&gt;&gt; Bianca Gandolfo: Yeah,
it would be in the alert.

101
00:06:20.190 --> 00:06:23.160
So it's gonna increment it,
and then it will alert it,

102
00:06:23.160 --> 00:06:25.110
and that creates an alert box.

103
00:06:26.110 --> 00:06:27.506
That's just a browser feature.

104
00:06:27.506 --> 00:06:32.007
&gt;&gt; Speaker 4: After that,

105
00:06:32.007 --> 00:06:35.290
CNB one?

106
00:06:35.290 --> 00:06:35.830
&gt;&gt; Bianca Gandolfo: Yeah, right here?

107
00:06:35.830 --> 00:06:36.500
&gt;&gt; Speaker 4: Yes.

108
00:06:36.500 --> 00:06:37.000
&gt;&gt; Bianca Gandolfo: Yeah.

109
00:06:39.410 --> 00:06:41.780
&gt;&gt; Speaker 4: And so
when you're saving it down at the log,

110
00:06:41.780 --> 00:06:47.010
let me see if I understand this,
you're not saving only the function but

111
00:06:47.010 --> 00:06:50.130
all of the value function,
after the function writing?

112
00:06:51.930 --> 00:06:56.120
&gt;&gt; Bianca Gandolfo: Yes, so you're saving
all the values within the function and

113
00:06:56.120 --> 00:07:00.530
also all the values it has
access to in the scope.

114
00:07:00.530 --> 00:07:04.710
So also it has access
to this parent scope.

115
00:07:04.710 --> 00:07:08.459
So it has access to its own scope
as well as the previous scope.

116
00:07:15.750 --> 00:07:19.060
Which is the same as how
we were doing it here.

117
00:07:19.060 --> 00:07:25.490
We just alert X and this alerter
function had access to X up here.

118
00:07:27.950 --> 00:07:32.070
And then for this example,
we have the set time out.

119
00:07:33.650 --> 00:07:37.210
Even though alerter's being called later,
and one second.

120
00:07:37.210 --> 00:07:42.430
It still holds access
to its' parent scope.

121
00:07:42.430 --> 00:07:46.546
The only difference for this one is
that we're actually just returning it.

122
00:07:51.587 --> 00:07:54.080
&gt;&gt; Bianca Gandolfo: And then, once we
return it, then we can call it later.

123
00:07:55.120 --> 00:07:58.410
So for the set timeout example,
JavaScript's calling it later.

124
00:07:59.430 --> 00:08:01.300
In this example, we're calling it later.

125
00:08:03.270 --> 00:08:08.267
We're calling it later here.

126
00:08:08.267 --> 00:08:15.221
[BLANK AUDIO] One more question.

127
00:08:15.221 --> 00:08:21.730
[BLANK AUDIO]
&gt;&gt; Speaker 5: Can you do solo y's or y?

128
00:08:21.730 --> 00:08:23.010
&gt;&gt; Bianca Gandolfo: Why you would do this?

129
00:08:23.010 --> 00:08:24.230
&gt;&gt; Speaker 5: What's in it for
the programmer?

130
00:08:24.230 --> 00:08:25.390
&gt;&gt; Bianca Gandolfo: What's in it for
the programmer?

131
00:08:26.850 --> 00:08:27.350
There's a lot.

132
00:08:28.480 --> 00:08:30.360
&gt;&gt; Speaker 5: Give us the top three, here.

133
00:08:31.500 --> 00:08:32.450
&gt;&gt; Bianca Gandolfo: The top three?

134
00:08:32.450 --> 00:08:36.380
Well, I'm gonna go through
different use cases, next.

135
00:08:42.050 --> 00:08:44.450
But I mean,
the biggest thing is privacy, right?

136
00:08:44.450 --> 00:08:48.040
Is that you can make an interface into,

137
00:08:48.040 --> 00:08:52.350
when we get into the module pattern
I'll show you how you can kind of.

138
00:08:52.350 --> 00:08:57.660
You can make classes, basically,
classes in JavaScript using closure, and

139
00:08:57.660 --> 00:09:03.299
you can limit how your program can
interface with certain values.

140
00:09:05.440 --> 00:09:06.960
So once it's private,

141
00:09:06.960 --> 00:09:12.420
the only thing that can access it once
you have this closure scope here.

142
00:09:12.420 --> 00:09:14.940
The only thing that can access and

143
00:09:14.940 --> 00:09:18.120
manipulate that data up
here is this function.

144
00:09:18.120 --> 00:09:20.800
And so you can really limit

145
00:09:20.800 --> 00:09:24.690
on how you can manipulate whatever
variables you have in the closure.

146
00:09:24.690 --> 00:09:26.220
So that's the biggest thing.

147
00:09:27.260 --> 00:09:30.860
But there's a lot of
different use cases for it.

148
00:09:33.080 --> 00:09:34.420
&gt;&gt; Speaker 5: There's
one more question here.

149
00:09:34.420 --> 00:09:36.320
&gt;&gt; Bianca Gandolfo: Sure.
&gt;&gt; Speaker 5: The funcStorer calls

150
00:09:36.320 --> 00:09:39.230
alerter, she's asking if that's correct.

151
00:09:39.230 --> 00:09:40.400
&gt;&gt; Bianca Gandolfo: Yes.

152
00:09:40.400 --> 00:09:41.240
&gt;&gt; Speaker 5: Okay.

153
00:09:41.240 --> 00:09:43.690
It doesn't call closureAlert.

154
00:09:43.690 --> 00:09:45.160
&gt;&gt; Bianca Gandolfo: No.
It does not call closure alert.

155
00:09:45.160 --> 00:09:48.600
Cuz what happens Is once
we call closureAlert,

156
00:09:49.860 --> 00:09:54.820
whatever that function returns is
actually being stored in the variable.

157
00:09:54.820 --> 00:09:59.840
It's not actually, when we refer to
funcStorer later it's not looking up and

158
00:09:59.840 --> 00:10:02.030
calling closureAlert again.

159
00:10:02.030 --> 00:10:04.810
ClosureAlert at this point
is being called once.

160
00:10:06.060 --> 00:10:07.990
And then when we reference it.

161
00:10:07.990 --> 00:10:08.630
Down here?

162
00:10:10.230 --> 00:10:13.580
It's just referencing whatever this
had returned from the beginning.

163
00:10:13.580 --> 00:10:19.160
So when we call it again,
it's not recalling closureAlert cause

164
00:10:19.160 --> 00:10:23.900
if that was the case, we would be
resetting x to zero every time.

