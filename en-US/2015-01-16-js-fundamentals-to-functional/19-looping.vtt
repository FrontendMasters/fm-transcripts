WEBVTT

1
00:00:00.000 --> 00:00:03.880
[MUSIC]

2
00:00:03.880 --> 00:00:04.390
&gt;&gt; Bianca Gandolfo: Cool.

3
00:00:04.390 --> 00:00:08.010
So we have our animal maker,
its returning object has speak.

4
00:00:08.010 --> 00:00:11.650
We can even put a name function
on it if we wanted to, just so

5
00:00:11.650 --> 00:00:13.860
we can remember who's who.

6
00:00:13.860 --> 00:00:20.640
Say name, his name, and
then we can, I don't know,

7
00:00:20.640 --> 00:00:27.721
owner maybe.
&gt;&gt; Bianca Gandolfo: So

8
00:00:27.721 --> 00:00:33.560
what if we wanted to loop
through these animal names,

9
00:00:33.560 --> 00:00:38.250
and create an animal object with each one?

10
00:00:42.010 --> 00:00:43.080
How do we go about doing that?

11
00:00:44.230 --> 00:00:45.470
Actually, I'll give you a moment.

12
00:00:45.470 --> 00:00:49.500
I'll give you five minutes
to try this out on your own.

13
00:00:49.500 --> 00:00:51.680
So what we're gonna do is
we're gonna loop through.

14
00:00:51.680 --> 00:00:56.799
For each name, we are going to
pass it to AnimalMaker and create

15
00:00:56.799 --> 00:01:06.231
a AnimalObject.
&gt;&gt; Bianca Gandolfo: Cool.

16
00:01:12.132 --> 00:01:13.695
&gt;&gt; Bianca Gandolfo: Let me know when you

17
00:01:13.695 --> 00:01:21.296
guys have done that.
&gt;&gt; Bianca Gandolfo: And

18
00:01:21.296 --> 00:01:25.960
then too, the question about
counsel log with the plus sign.

19
00:01:25.960 --> 00:01:28.320
So you can use a plus sign if you want.

20
00:01:30.640 --> 00:01:33.920
What it does though to this variable
is that it forces it into a string.

21
00:01:33.920 --> 00:01:36.740
So if name was an object,

22
00:01:36.740 --> 00:01:40.350
that would run into some problems
cuz if you stringify an object,

23
00:01:42.930 --> 00:01:48.040
it's saying this, string plus some object.

24
00:01:48.040 --> 00:01:52.430
It's gonna quote object Object,
and when you're console logging,

25
00:01:52.430 --> 00:01:57.060
maybe that's not gonna enlighten
you the way that you need to.

26
00:01:57.060 --> 00:02:03.087
And if you wanted to print out what it is,
you can just use the comma.

27
00:02:09.796 --> 00:02:11.200
&gt;&gt; Bianca Gandolfo: And it will just print

28
00:02:11.200 --> 00:02:17.671
out the object prettier.
&gt;&gt; Bianca Gandolfo: I forgot to mention

29
00:02:17.671 --> 00:02:21.006
that you wanna add it to your farm.
&gt;&gt; Bianca Gandolfo: So

30
00:02:21.006 --> 00:02:24.388
you want your animal
objects to be in your farm,

31
00:02:24.388 --> 00:02:28.755
which is just an array.
&gt;&gt; Bianca Gandolfo: So

32
00:02:28.755 --> 00:02:34.635
when you're looping through your array,
you're creating your animal objects,

33
00:02:34.635 --> 00:02:41.634
and then adding them to your farm array.
&gt;&gt; Bianca Gandolfo: All right,

34
00:02:41.634 --> 00:02:44.130
so what's the first thing I need to do?

35
00:02:44.130 --> 00:02:48.010
I suddenly, guys,
I have this like periodic

36
00:02:48.010 --> 00:02:53.650
amnesia that happens where I just forget
everything I ever knew about JavaScript.

37
00:02:53.650 --> 00:02:55.480
So I'm gonna have to rely on you.

38
00:02:55.480 --> 00:02:59.300
I'm kind of in a high pressure situation,
I'm on camera.

39
00:02:59.300 --> 00:03:00.270
So I need your help.

40
00:03:01.650 --> 00:03:02.960
Really desperately need your help.

41
00:03:04.080 --> 00:03:12.250
How do I make my farm?
&gt;&gt; Bianca Gandolfo: You

42
00:03:12.250 --> 00:03:14.880
guys are not the rescue type?

43
00:03:14.880 --> 00:03:19.093
I'm here on the spot.
&gt;&gt; Speaker 2: Sorry,

44
00:03:19.093 --> 00:03:20.832
what is the question?
&gt;&gt; Bianca Gandolfo: So,

45
00:03:20.832 --> 00:03:23.360
how are we gonna loop through this array?
&gt;&gt; Bianca Gandolfo: All right.

46
00:03:23.360 --> 00:03:25.180
We're gonna make a for loop.

47
00:03:29.800 --> 00:03:35.930
For var key in, should I do it this way?

48
00:03:35.930 --> 00:03:38.570
&gt;&gt; Speaker 2: Yep.
&gt;&gt; Bianca Gandolfo: Yeah?

49
00:03:40.310 --> 00:03:41.880
Probably not, right?

50
00:03:41.880 --> 00:03:42.690
We kinda talked about that.

51
00:03:42.690 --> 00:03:46.101
This is for objects, so we want the I one,

52
00:03:46.101 --> 00:03:51.523
right?
&gt;&gt; Bianca Gandolfo: AnimalNames.length,

53
00:03:51.523 --> 00:03:54.680
right?
&gt;&gt; Bianca Gandolfo: I sometimes make

54
00:03:54.680 --> 00:03:56.260
mistakes so let me know.

55
00:03:59.550 --> 00:04:00.810
Okay, so I wrote my for loop, so

56
00:04:00.810 --> 00:04:03.350
this loop is going to loop
through all my animal names.

57
00:04:06.920 --> 00:04:12.254
And now I want to create
an animal object for each one.

58
00:04:18.879 --> 00:04:22.113
&gt;&gt; Speaker 3: On Animal Maker and

59
00:04:22.113 --> 00:04:26.500
pass in the index.
&gt;&gt; Bianca Gandolfo: Pass in the index?

60
00:04:26.500 --> 00:04:28.298
All right.
&gt;&gt; Speaker 3: AnimalNames.i.

61
00:04:28.298 --> 00:04:30.572
[INAUDIBLE] for syntax.
&gt;&gt; Bianca Gandolfo: Like

62
00:04:30.572 --> 00:04:36.099
that?
&gt;&gt; Speaker 3: Bracket.

63
00:04:36.099 --> 00:04:37.718
&gt;&gt; Bianca Gandolfo: Bracket.

64
00:04:37.718 --> 00:04:40.750
And then what?

65
00:04:40.750 --> 00:04:45.570
So now we're creating the animal objects,
but they're just going out in space,

66
00:04:45.570 --> 00:04:46.760
we want to add them to our farm.

67
00:04:50.740 --> 00:04:53.115
Otherwise they're wild animals and
this would be the jungle.

68
00:04:53.115 --> 00:04:53.760
&gt;&gt; Speaker 4: Farm,

69
00:04:53.760 --> 00:04:57.312
square bracket I equals Animal Maker.

70
00:04:57.312 --> 00:05:04.300
Or in front of that, animal maker.
&gt;&gt; Bianca Gandolfo: I see.

71
00:05:04.300 --> 00:05:11.596
Whoops.
&gt;&gt; Bianca Gandolfo: So,

72
00:05:11.596 --> 00:05:17.040
is this gonna work?
&gt;&gt; Speaker 5: I see.

73
00:05:17.040 --> 00:05:18.740
&gt;&gt; Bianca Gandolfo: I think it'll work.

74
00:05:20.290 --> 00:05:20.790
It'll work.

75
00:05:21.800 --> 00:05:22.680
That's one way to do it.

76
00:05:22.680 --> 00:05:23.560
Awesome.
So this is how

77
00:05:23.560 --> 00:05:24.480
we're gonna create our farm.

78
00:05:24.480 --> 00:05:27.240
We're gonna use our constructor function.

79
00:05:27.240 --> 00:05:29.510
We're gonna loop through
our animal names and

80
00:05:29.510 --> 00:05:33.000
be coming up with these robust animal
objects that have methods on them.

81
00:05:33.000 --> 00:05:36.650
So all of our animals on
our farm can now speak.

82
00:05:36.650 --> 00:05:42.380
And if we later wanted to change our
constructive function to load differently.

83
00:05:42.380 --> 00:05:44.840
We could maybe even add more.

84
00:05:46.240 --> 00:05:50.210
So here's an example of the answers
of how we could do that.

85
00:05:50.210 --> 00:05:52.070
We could do farm.push.

86
00:05:52.070 --> 00:05:58.850
So the one we did before
was farm(i) = AnimalMaker.

87
00:05:58.850 --> 00:06:02.300
Another way we could do it, we could just
use the .push method where we say var

88
00:06:02.300 --> 00:06:05.950
animal equals again
AnimalMaker(animalNames[i]) and

89
00:06:05.950 --> 00:06:07.890
then we just push it.

90
00:06:07.890 --> 00:06:11.630
Each one, or
we can just do it all it one line.

91
00:06:11.630 --> 00:06:17.329
So we could say
farm.push(AnimalMaker(animalNames[i])).

92
00:06:19.310 --> 00:06:20.545
Thumbs on how we got there?

93
00:06:20.545 --> 00:06:22.900
Thumbs, thumbs, thumbs.

94
00:06:22.900 --> 00:06:26.680
Thumbs in the front?

95
00:06:26.680 --> 00:06:29.456
Cool.
&gt;&gt; Speaker 6: Is there a reason why you're

96
00:06:29.456 --> 00:06:35.270
not using new, new to create the-
&gt;&gt; Bianca Gandolfo: Because then

97
00:06:35.270 --> 00:06:40.060
I would have to explain this,
I would have to explain the key word new.

98
00:06:40.060 --> 00:06:42.650
And, at the end of the day,
when you use the keyword new,

99
00:06:42.650 --> 00:06:44.420
all it's doing is returning an object.

100
00:06:46.010 --> 00:06:49.910
So, at its core, like there's
a bunch of different class patterns,

101
00:06:49.910 --> 00:06:55.170
that you can use in Java Script,
cause we don't really have formal classes.

102
00:06:55.170 --> 00:06:58.280
So you can just write a function
that returns an object.

103
00:06:58.280 --> 00:07:01.090
And there you are,
you have a class or a constructor.

104
00:07:01.090 --> 00:07:04.820
And then there is a way using
the keyword new, you can look it up,

105
00:07:04.820 --> 00:07:08.030
it's called pseudo classical,
that's the pattern.

106
00:07:08.030 --> 00:07:13.940
And that tends to be the typical
pattern using the keyword new.

107
00:07:13.940 --> 00:07:18.420
You see this in there a lot,
the .prototype, etc.

108
00:07:18.420 --> 00:07:22.730
But that's like, I have another class on
[INAUDIBLE] Java Script, it's a week long.

109
00:07:22.730 --> 00:07:27.370
So it's just like a whole other animal,
and I try not to introduce too much extra,

110
00:07:27.370 --> 00:07:29.640
too much extra stuff, but good question.

111
00:07:32.110 --> 00:07:35.642
Any other questions?
&gt;&gt; Speaker 7: Kate's asking,

112
00:07:35.642 --> 00:07:38.470
how the object is being created.

113
00:07:38.470 --> 00:07:42.480
She doesn't understand that.
&gt;&gt; Bianca Gandolfo: Sure.

114
00:07:42.480 --> 00:07:43.950
So this return statement here.

115
00:07:45.010 --> 00:07:46.620
These two.

116
00:07:46.620 --> 00:07:52.600
These curly brackets here
are the object that's being created.

117
00:07:52.600 --> 00:07:57.430
So, if we just copy this
quickly into our console.

118
00:07:59.080 --> 00:07:59.980
Let me make it a little bigger.

119
00:08:03.770 --> 00:08:08.074
And we just save our

120
00:08:08.074 --> 00:08:12.925
obj = AnimalMaker.

121
00:08:12.925 --> 00:08:14.440
So, whatever.

122
00:08:14.440 --> 00:08:18.620
So how this is working,
is that whatever this

123
00:08:18.620 --> 00:08:22.970
function is returning is then
gonna be stored in this variable.

124
00:08:25.080 --> 00:08:30.140
And so obj, since AnimalMaker,

125
00:08:30.140 --> 00:08:33.320
when we know what AnimalMaker
is returning, if we go back up.

126
00:08:33.320 --> 00:08:34.930
We look into the function body.

127
00:08:34.930 --> 00:08:36.870
Again, the function body is
between the curly brackets.

128
00:08:36.870 --> 00:08:38.900
And we look at that return statement.

129
00:08:38.900 --> 00:08:42.060
And that return statement is going to
explicitly tell us what we're returning.

130
00:08:42.060 --> 00:08:45.170
And notice we have these curly brackets.

131
00:08:45.170 --> 00:08:48.450
It's a little bit confusing because
there's a lot of curly brackets in there.

132
00:08:48.450 --> 00:08:51.650
But there's no function keyword,
there's no if, there's no for.

133
00:08:51.650 --> 00:08:57.610
They're just naked curly brackets and that
tells us that that's an object literal.

134
00:08:57.610 --> 00:09:01.100
And so that return statement is just
explicitly returning an object.

135
00:09:02.410 --> 00:09:11.300
So if we for example went back here and
we just deleted the speak function,

136
00:09:11.300 --> 00:09:15.850
which is adding some extra curly brackets,
and we just looked at it like this.

137
00:09:15.850 --> 00:09:18.338
You can see that it's
just returning an object.

138
00:09:20.462 --> 00:09:21.215
&gt;&gt; Bianca Gandolfo: And that's just where

139
00:09:21.215 --> 00:09:30.845
the object's coming from.
&gt;&gt; Bianca Gandolfo: Mm-hm.

140
00:09:30.845 --> 00:09:32.785
So there's nothing fancy-special here.

141
00:09:32.785 --> 00:09:34.951
It's just literally
returning an object literal.

142
00:09:34.951 --> 00:09:37.019
Mm-hm?
&gt;&gt; Speaker 8: Can you console.log

143
00:09:37.019 --> 00:09:38.275
something there?

144
00:09:38.275 --> 00:09:44.045
I can't understand what's in the array.
&gt;&gt; Bianca Gandolfo: In

145
00:09:44.045 --> 00:09:45.652
the farm?
&gt;&gt; Speaker 8: Yeah.

146
00:09:45.652 --> 00:09:47.305
&gt;&gt; Bianca Gandolfo: Sure.

147
00:09:47.305 --> 00:09:52.261
[BLANK AUDIO] I

148
00:09:52.261 --> 00:09:56.232
don't know.

149
00:09:56.232 --> 00:10:01.462
[BLANK AUDIO] [NOISE] So here we have

150
00:10:01.462 --> 00:10:07.712
our farm which is an array
of three objects.

151
00:10:07.712 --> 00:10:13.538
So for every animal name,
we have an animal object for

152
00:10:13.538 --> 00:10:17.300
them that we had put into the farm.

153
00:10:17.300 --> 00:10:22.710
So if we look at the object, it's just
an object that has a speak method on it.

154
00:10:24.060 --> 00:10:26.568
So each one will do that.

155
00:10:26.568 --> 00:10:32.780
And then does that answer your question?
&gt;&gt; Speaker 9: How

156
00:10:32.780 --> 00:10:36.264
do I get the names to actually show up?
&gt;&gt; Bianca Gandolfo: Mm,

157
00:10:36.264 --> 00:10:41.505
well what we could do is
we could change this to.

158
00:10:49.963 --> 00:10:51.353
&gt;&gt; Bianca Gandolfo: And then I think,

159
00:10:51.353 --> 00:10:54.910
lets see if it'll show it now, yeah.

160
00:10:54.910 --> 00:11:00.900
So, now you can see the actual name.
&gt;&gt; Speaker 9: Okay, let

161
00:11:00.900 --> 00:11:04.550
me see what you did then.
&gt;&gt; Bianca Gandolfo: All I did is I added

162
00:11:04.550 --> 00:11:08.680
another property on there called name just
so you could explicitly see the name.

163
00:11:08.680 --> 00:11:13.921
Before we just had a function in there.

164
00:11:13.921 --> 00:11:23.189
Cool?
&gt;&gt; Bianca Gandolfo: Awesome.

165
00:11:24.940 --> 00:11:28.920
So now, what if we wanted to

166
00:11:30.070 --> 00:11:35.610
then loop through our farm now, and
have all our animals say their name.

167
00:11:35.610 --> 00:11:37.770
We're having like a farm role call.

168
00:11:37.770 --> 00:11:44.647
How would we do that?
&gt;&gt; Speaker 10: In

169
00:11:44.647 --> 00:11:49.010
the [INAUDIBLE]
stage

170
00:11:49.010 --> 00:11:53.220
animal [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: So,

171
00:11:53.220 --> 00:11:55.810
we want to loop through the farm, right?

172
00:11:55.810 --> 00:11:57.350
So, it would be a new for loop, right?
&gt;&gt; Speaker 10: Yep.

173
00:11:57.350 --> 00:11:59.370
&gt;&gt; Bianca Gandolfo: I'm going to delete

174
00:11:59.370 --> 00:12:01.330
this old one, is that okay?

175
00:12:01.330 --> 00:12:01.830
Just for room.

176
00:12:04.220 --> 00:12:08.484
For var i = 0,

177
00:12:08.484 --> 00:12:13.733
i &lt; farm.lengt;

178
00:12:13.733 --> 00:12:17.673
i++ [SOUND].

179
00:12:17.673 --> 00:12:18.879
Okay.

180
00:12:18.879 --> 00:12:21.297
And then what do we have to do?

181
00:12:21.297 --> 00:12:31.144
What's the next step?
&gt;&gt; Speaker 10: Farm [i].speak()

182
00:12:31.144 --> 00:12:32.305
&gt;&gt; Bianca Gandolfo: Cool,

183
00:12:32.305 --> 00:12:36.960
thumbs on where we're at.

184
00:12:36.960 --> 00:12:40.520
Can I see everyone's thumbs just so
I can have a check?

185
00:12:40.520 --> 00:12:42.420
Thumbs, thumbs, okay, cool.

186
00:12:44.860 --> 00:12:46.116
So let's test it out.

187
00:12:46.116 --> 00:12:54.795
Wait, let's just do this one.
&gt;&gt; Bianca Gandolfo: Cool.

188
00:12:54.795 --> 00:12:56.368
&gt;&gt; Speaker 10: Could you go back to that

189
00:12:56.368 --> 00:12:59.421
slide?
&gt;&gt; Bianca Gandolfo: Mm-hm.

190
00:12:59.421 --> 00:13:00.711
&gt;&gt; Speaker 10: On that function animal

191
00:13:00.711 --> 00:13:03.100
maker, that's where we're defining it.

192
00:13:04.360 --> 00:13:07.470
We don't need the var there or
anything like that?

193
00:13:07.470 --> 00:13:08.860
I mean [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah, so

194
00:13:08.860 --> 00:13:09.430
that's the other.

195
00:13:09.430 --> 00:13:14.020
Remember I was saying there's two
ways that you can name a function?

196
00:13:14.020 --> 00:13:15.000
This is the other way.

197
00:13:15.000 --> 00:13:16.530
This is the way actually
I don't recommend, but

198
00:13:16.530 --> 00:13:21.650
because of slide real estate,
I use them a lot in my slides.

199
00:13:21.650 --> 00:13:26.740
But in code,
you should just use var X equals function,

200
00:13:26.740 --> 00:13:29.825
so you could say I guess
this one has more room.

201
00:13:29.825 --> 00:13:35.188
Could say var AnimalMaker, not mater,
because that's a different thing.

202
00:13:35.188 --> 00:13:43.340
Actually, maybe that's accurate.

203
00:13:43.340 --> 00:13:45.500
So, it's more or less the same.

204
00:13:45.500 --> 00:13:49.460
It does have different implications as
far as like hoisting and scope things,

205
00:13:49.460 --> 00:13:53.900
but for
today we'll just go with it's the same.

206
00:13:53.900 --> 00:13:56.340
We talk about scope tomorrow,
so we can talk about that.

207
00:13:56.340 --> 00:13:58.640
So stack crease around errors too?

