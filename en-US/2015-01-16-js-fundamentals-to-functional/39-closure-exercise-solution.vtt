WEBVTT

1
00:00:00.000 --> 00:00:03.837
[MUSIC]

2
00:00:03.837 --> 00:00:06.842
&gt;&gt; Bianca Gandolfo: So the first one was
write a function called nonsense that

3
00:00:06.842 --> 00:00:08.470
takes an input string.

4
00:00:08.470 --> 00:00:12.660
This function contains another function
blab which alerts that string and

5
00:00:12.660 --> 00:00:17.440
is immediately called inside
the function nonsense.

6
00:00:18.870 --> 00:00:20.810
And here's an example of
what blab should look like.

7
00:00:20.810 --> 00:00:24.390
It's just a function alert string, and

8
00:00:24.390 --> 00:00:29.270
so we have our function nonsense here,
I called the parameter string.

9
00:00:29.270 --> 00:00:32.510
And then if we were gonna call nonsense,

10
00:00:32.510 --> 00:00:36.930
we could say nonsense, and we could,
I actually already did that down there.

11
00:00:37.980 --> 00:00:41.510
So we can call nonsense down
here with blah blah blah, so

12
00:00:41.510 --> 00:00:45.117
string is now this blah blah blah.

13
00:00:45.117 --> 00:00:49.030
And then,
we enter through the function body here.

14
00:00:49.030 --> 00:00:54.017
We see that there's another function,
we skip it, we call blab,

15
00:00:54.017 --> 00:00:56.253
and blab then alerts, what?

16
00:00:56.253 --> 00:00:59.154
&gt;&gt; Speaker 2: Blah blah blah.
&gt;&gt; Bianca Gandolfo: Yep, blah blah blah,

17
00:00:59.154 --> 00:01:00.337
exactly.

18
00:01:00.337 --> 00:01:04.270
So for the second one, we're doing
something a little bit different.

19
00:01:04.270 --> 00:01:09.610
Instead of immediately calling blab,
we're calling it after two seconds.

20
00:01:09.610 --> 00:01:14.588
So we're setTimeout, and
then it will still alert blab.

21
00:01:19.504 --> 00:01:23.092
&gt;&gt; Bianca Gandolfo: So for the third one,
instead of calling it inside, or

22
00:01:23.092 --> 00:01:28.180
doing a set time out,
we're just gonna return the function body.

23
00:01:28.180 --> 00:01:31.600
So we see here on line 34,
that we return blab,

24
00:01:31.600 --> 00:01:33.830
which is gonna return the function body.

25
00:01:33.830 --> 00:01:37.600
So blabLater is actually gonna
be the function body here,

26
00:01:37.600 --> 00:01:40.160
and it's gonna alert when we call it.

27
00:01:40.160 --> 00:01:45.080
So if we call blabLater here,
it's going to what?

28
00:01:47.480 --> 00:01:48.337
What is it going to alert?

29
00:01:53.463 --> 00:01:57.671
&gt;&gt; Bianca Gandolfo: Kevin do you know?

30
00:02:04.921 --> 00:02:05.860
&gt;&gt; Kevin: Blah blah blah.

31
00:02:05.860 --> 00:02:07.200
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

32
00:02:07.200 --> 00:02:13.216
So it's gonna alert blah blah blah and

33
00:02:13.216 --> 00:02:18.481
then blabAgainLater, we called

34
00:02:18.481 --> 00:02:23.380
it what's that gonna return?

35
00:02:23.380 --> 00:02:24.172
Tanner?

36
00:02:31.462 --> 00:02:33.254
&gt;&gt; Tanner: It's gonna
return blah blah blah?

37
00:02:33.254 --> 00:02:34.171
&gt;&gt; Bianca Gandolfo: Close.

38
00:02:34.171 --> 00:02:35.921
It's actually gonna return hehehe.

39
00:02:38.255 --> 00:02:43.320
&gt;&gt; Bianca Gandolfo: Because we
called nonsense with hehehe.

40
00:02:43.320 --> 00:02:46.740
So string, and
this case is gonna be hehehe.

41
00:02:46.740 --> 00:02:48.839
Can you guys see that in the back?

42
00:02:51.756 --> 00:02:53.080
&gt;&gt; Bianca Gandolfo: Cool.

43
00:02:53.080 --> 00:02:56.171
What if we did blabLater here?

44
00:02:56.171 --> 00:03:00.712
What's that gonna alert?

45
00:03:00.712 --> 00:03:03.671
John?

46
00:03:03.671 --> 00:03:06.080
&gt;&gt; John: Could you repeat
the question please?

47
00:03:06.080 --> 00:03:08.930
&gt;&gt; Bianca Gandolfo: I'm sorry,
I didn't realize you were on your phone.

48
00:03:08.930 --> 00:03:13.296
If we called blab again later right here,
what is that gonna return?

49
00:03:22.963 --> 00:03:24.337
&gt;&gt; Bianca Gandolfo: What
is this gonna alert?

50
00:03:29.879 --> 00:03:30.963
&gt;&gt; John: Blah blah blah.

51
00:03:30.963 --> 00:03:33.210
&gt;&gt; Bianca Gandolfo: Yup, so
it's still gonna alert blah blah blah.

52
00:03:33.210 --> 00:03:38.611
So the fact that BlabAgainLater
is a learning hehehe

53
00:03:38.611 --> 00:03:45.005
doesn't affect the blah blah blah,
if that makes any sense.

54
00:03:45.005 --> 00:03:46.770
[LAUGH] And why is that?

55
00:03:46.770 --> 00:03:48.962
Why are they two separate things?

56
00:03:56.880 --> 00:03:58.280
&gt;&gt; Bianca Gandolfo: Grace,
do you remember?

57
00:03:58.280 --> 00:03:59.390
Tanner remembers.

58
00:03:59.390 --> 00:04:01.350
Why Tanner?
&gt;&gt; Tanner: I just want redemption because

59
00:04:01.350 --> 00:04:04.785
you're passing the variables.

60
00:04:04.785 --> 00:04:06.010
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

61
00:04:06.010 --> 00:04:10.030
And every time we call that function,
the inner function's creating a new scope.

62
00:04:10.030 --> 00:04:14.890
Even though they both are sharing
the same parent scope, it's new.

63
00:04:14.890 --> 00:04:18.380
It's a new inner scope here for
this function.

64
00:04:21.130 --> 00:04:22.046
&gt;&gt; Bianca Gandolfo: Cool.

65
00:04:28.421 --> 00:04:31.690
&gt;&gt; Bianca Gandolfo: So
this is a function called lastNameTrier.

66
00:04:31.690 --> 00:04:35.110
You pass it your first name, and
it creates this complicated algorithm.

67
00:04:35.110 --> 00:04:40.720
You can try on last names, like little
girls do when they have a crush.

68
00:04:40.720 --> 00:04:47.208
If you have lots of crushes you can see
which one sounds better with your name.

69
00:04:47.208 --> 00:04:51.502
So, how it works is you pass in your first
name so if your first name is Farmer,

70
00:04:51.502 --> 00:04:52.838
you would pass Farmer.

71
00:04:52.838 --> 00:04:57.712
And then you can try on last name Brown
and that's going to log Farmer Brown.

72
00:04:57.712 --> 00:05:00.259
And it's also really
convenient If you really,

73
00:05:00.259 --> 00:05:04.430
really like someone and if you wanna just
write their name all over everything.

74
00:05:04.430 --> 00:05:10.254
You can just like do
this a bunch of times.

75
00:05:10.254 --> 00:05:14.940
I don't think boys do this, but girls
they write their crushes names a lot.

76
00:05:14.940 --> 00:05:16.190
No?
No?

77
00:05:16.190 --> 00:05:17.838
No one?
Okay.

78
00:05:17.838 --> 00:05:22.005
Just me, all right fine.

79
00:05:22.005 --> 00:05:23.490
&gt;&gt; Speaker 6: Do you use those gel pens?

80
00:05:23.490 --> 00:05:25.300
&gt;&gt; Bianca Gandolfo: What?
Yeah, with gel pens, absolutely.

81
00:05:25.300 --> 00:05:29.250
You've got to be careful because
they smear, there's an art to it.

82
00:05:29.250 --> 00:05:33.200
Okay, anyway, too much information.

83
00:05:34.730 --> 00:05:37.570
So here, if you want to try
on different Farmer names, so

84
00:05:37.570 --> 00:05:41.260
Farmer Jane Farmer Lin, for example.

85
00:05:41.260 --> 00:05:43.940
&gt;&gt; Kevin: That's for the farmer to find
out if he's gonna marry a Jane or a Lin.

86
00:05:45.580 --> 00:05:46.260
&gt;&gt; Bianca Gandolfo: Yeah.

87
00:05:46.260 --> 00:05:48.010
&gt;&gt; Kevin: So guys could use this one.

88
00:05:48.010 --> 00:05:48.640
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

89
00:05:48.640 --> 00:05:50.460
It's a gender neutral.

90
00:05:50.460 --> 00:05:52.200
&gt;&gt; Kevin: Or
it could be a female farmer, too.

91
00:05:52.200 --> 00:05:53.360
&gt;&gt; Bianca Gandolfo: Yeah.

92
00:05:53.360 --> 00:05:54.720
&gt;&gt; Kevin: Marry a farmer like Jane or Lin.

93
00:05:54.720 --> 00:05:57.332
&gt;&gt; Bianca Gandolfo: Or
if you're giving birth, and

94
00:05:57.332 --> 00:06:02.962
you know that your prodigy's gonna
be a farmer, you can match that.

95
00:06:02.962 --> 00:06:07.250
&gt;&gt; Kevin: It's very unisex, yeah.

96
00:06:07.250 --> 00:06:08.820
&gt;&gt; Bianca Gandolfo: Yeah, cool.

97
00:06:08.820 --> 00:06:11.950
Anyway, so here we have our function.

98
00:06:11.950 --> 00:06:18.510
So our parent function is here, and
then we have an inner function here.

99
00:06:18.510 --> 00:06:20.060
And again, we're returning that inner.

100
00:06:20.060 --> 00:06:26.180
So how we'd run this is we'd say,
and I forgot to mention,

101
00:06:26.180 --> 00:06:33.280
Katrina is our, these are Katrina's
solutions, she is awesome.

102
00:06:33.280 --> 00:06:36.050
Look her up, add her on Twitter,
all those things.

103
00:06:36.050 --> 00:06:41.694
So Katrina, so var firstNameKatrina
pass the string Katrina,

104
00:06:41.694 --> 00:06:44.210
and then to lastNameTrier.

105
00:06:44.210 --> 00:06:46.840
So the string Katrina is now a first name.

106
00:06:48.020 --> 00:06:50.140
We have this inner function.

107
00:06:50.140 --> 00:06:52.000
We skip it, and we return it.

108
00:06:52.000 --> 00:06:57.660
So, firstNameKatrina now is
the value of this inner function.

109
00:06:59.526 --> 00:07:01.120
So now when we call first name Katrina,

110
00:07:01.120 --> 00:07:06.460
we can pass her last name which not
gonna try to pronounce, Uychaco.

111
00:07:08.230 --> 00:07:08.920
I guess I tried it.

112
00:07:10.220 --> 00:07:12.650
So Uychaco is last name and

113
00:07:12.650 --> 00:07:16.350
then we're just gonna console that log
the first name plus the last name.

114
00:07:16.350 --> 00:07:22.480
The cool thing here is that this
parameter stays the same, Katrina.

115
00:07:22.480 --> 00:07:27.123
We don't actually have
to say var firstName,

116
00:07:27.123 --> 00:07:32.250
like this, = firstName,
or anything like that.

117
00:07:33.490 --> 00:07:36.586
It just holds reference to the parameters
cuz they also live in the scope.

118
00:07:39.046 --> 00:07:42.032
&gt;&gt; Bianca Gandolfo: So
we can just do it like that, and

119
00:07:42.032 --> 00:07:45.890
then you can also try
it with Smith as well.

120
00:07:48.040 --> 00:07:48.910
Any questions on that?

121
00:07:51.330 --> 00:07:55.894
&gt;&gt; Kevin: Just like you can do Fibonacci
series with these because you're restoring

122
00:07:55.894 --> 00:07:57.422
the results of the next.

123
00:07:57.422 --> 00:07:58.172
&gt;&gt; Bianca Gandolfo: Yeah.

124
00:07:58.172 --> 00:08:00.363
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah you can do a lot

125
00:08:00.363 --> 00:08:02.754
of different things with it.

126
00:08:06.254 --> 00:08:07.630
&gt;&gt; Bianca Gandolfo: I
think there's one thing.

127
00:08:09.570 --> 00:08:11.250
There's one thing I wanted to mention for

128
00:08:11.250 --> 00:08:16.940
this nonsense function,
a common mistake that I see.

129
00:08:16.940 --> 00:08:19.800
Is that when you are writing
the inner function,

130
00:08:19.800 --> 00:08:24.770
you'll also give it a parameter name of
the same name from the parent function.

131
00:08:24.770 --> 00:08:29.830
And that's not gonna work because
if you don't pass anything to blab,

132
00:08:29.830 --> 00:08:34.550
so when we're calling blab
here with no arguments.

133
00:08:34.550 --> 00:08:37.750
That means string is now undefined and
the most local

134
00:08:40.330 --> 00:08:45.780
the most local variable
value is the one that wins.

135
00:08:45.780 --> 00:08:49.360
So this alert here is going to then alert

136
00:08:49.360 --> 00:08:52.580
undefined because it's being
overwritten by this parameter name.

137
00:08:52.580 --> 00:08:56.362
So if you're seeing that problem,
just double check your inner function's

138
00:08:56.362 --> 00:09:00.087
parameter and make sure that that
function is actually taking an argument,

139
00:09:00.087 --> 00:09:02.254
If it's not then it's gonna be undefined.

140
00:09:07.338 --> 00:09:09.529
&gt;&gt; Bianca Gandolfo: Cool, so
we have lastNameTrier, and

141
00:09:09.529 --> 00:09:11.380
then we have this storyWriter.

142
00:09:12.440 --> 00:09:17.890
So this is a function that returns
an object with two methods, one method

143
00:09:17.890 --> 00:09:22.980
is addWords, which will add words to your
function, and the other one is u rays.

144
00:09:22.980 --> 00:09:27.250
So you might imagine that this is like
that game that people play where you start

145
00:09:27.250 --> 00:09:32.170
off with like the beginning of a sentence,
then the next person adds a sentence,

146
00:09:32.170 --> 00:09:34.610
then you go on and on,
you create a big story.

147
00:09:34.610 --> 00:09:37.790
Has anyone played that
like on road trips before?

148
00:09:37.790 --> 00:09:38.730
Not in Minnesota?

149
00:09:38.730 --> 00:09:40.090
Okay some of you have.

150
00:09:40.090 --> 00:09:40.590
Okay.

151
00:09:41.950 --> 00:09:46.440
So we have,
just an example of how we'd use it,

152
00:09:46.440 --> 00:09:49.320
we have this variable farmLoveStory.

153
00:09:49.320 --> 00:09:53.421
And we have storyWriter,
which is a function that we call.

154
00:09:53.421 --> 00:09:56.755
And then farmLoveStory is
now gonna be an object.

155
00:09:56.755 --> 00:10:00.660
That has a property addWords,
which you can then pass a string.

156
00:10:00.660 --> 00:10:04.350
And so this string was,
There was once a lonely cow.

157
00:10:04.350 --> 00:10:05.360
And then that will just return.

158
00:10:05.360 --> 00:10:08.290
There was once a lonely cow, and
then you can add more words, and

159
00:10:08.290 --> 00:10:10.087
then it will concatenate that string.

160
00:10:10.087 --> 00:10:13.698
It will say there was once a lonely cow,
it saw a friendly face,

161
00:10:13.698 --> 00:10:15.690
because we just added this there.

162
00:10:17.330 --> 00:10:20.490
Another example would be story of my life,

163
00:10:20.490 --> 00:10:24.410
which is my code broke, and
then I ate some ice cream.

164
00:10:24.410 --> 00:10:27.090
It's pretty consistent in my day to day.

165
00:10:27.090 --> 00:10:28.530
And then you can erase it.

166
00:10:28.530 --> 00:10:29.760
So that's how you would implement.

167
00:10:29.760 --> 00:10:33.220
That'd be the functionality
of the story writer function.

168
00:10:33.220 --> 00:10:35.900
And so
this is what it looks like on the inside.

169
00:10:35.900 --> 00:10:39.520
So in our closure scope,
we have our story.

170
00:10:40.920 --> 00:10:43.140
Which just starts off empty right?

171
00:10:43.140 --> 00:10:47.650
And then we return this object and
this object has two properties.

172
00:10:47.650 --> 00:10:50.923
The first one's addWords,
which is a method.

173
00:10:50.923 --> 00:10:55.270
And this method takes a string.

174
00:10:55.270 --> 00:10:59.000
And you add the string and
then I put a space in between.

175
00:10:59.000 --> 00:11:00.510
And then I return the story.trim.

176
00:11:00.510 --> 00:11:08.200
And what that does is it just
deletes the trailing space,

177
00:11:09.980 --> 00:11:14.300
so it doesn't print like,
I ate some ice cream, and then space.

178
00:11:14.300 --> 00:11:15.490
It doesn't actually turn them off,

179
00:11:15.490 --> 00:11:21.340
it just shows a copy of the string
without the last space.

180
00:11:21.340 --> 00:11:24.440
So the space actually
still exists in story.

181
00:11:25.580 --> 00:11:28.130
And the other, and
the erase function's pretty simple.

182
00:11:28.130 --> 00:11:30.671
You just set story back
to an empty string.

183
00:11:35.629 --> 00:11:36.129
&gt;&gt; Bianca Gandolfo: Cool?

184
00:11:38.470 --> 00:11:39.296
Any questions about that?

185
00:11:44.587 --> 00:11:49.564
&gt;&gt; Kevin: I wasn't getting, so when you
run that does, where you see that on the,

186
00:11:49.564 --> 00:11:52.933
it'll actually print
that off one the console?

187
00:11:52.933 --> 00:11:53.981
&gt;&gt; Bianca Gandolfo: Yeah.

188
00:11:53.981 --> 00:11:57.240
&gt;&gt; Kevin: Because I wasn't
getting mine to print out.

189
00:11:57.240 --> 00:11:58.797
&gt;&gt; Bianca Gandolfo: In the console?

190
00:11:58.797 --> 00:12:01.090
&gt;&gt; Kevin: Well, not in the console,

191
00:12:01.090 --> 00:12:05.129
in the-
&gt;&gt; Bianca Gandolfo: What do you mean?

192
00:12:05.129 --> 00:12:06.946
This one?
&gt;&gt; Speaker 7: It builds it correctly but

193
00:12:06.946 --> 00:12:11.500
it doesn't opt for the console like
your examples show us it should.

194
00:12:11.500 --> 00:12:12.670
&gt;&gt; Bianca Gandolfo: Are you returning?

195
00:12:13.760 --> 00:12:15.587
Are you saying my example isn't?

196
00:12:15.587 --> 00:12:17.296
&gt;&gt; Kevin: No, mine isn't.

197
00:12:17.296 --> 00:12:18.837
&gt;&gt; Bianca Gandolfo: Make
sure that you're returning.

198
00:12:18.837 --> 00:12:20.757
&gt;&gt; Kevin: On a trend, but
it just returns story.

199
00:12:27.758 --> 00:12:32.599
&gt;&gt; Speaker 7: Since it's not being
executed from the console, it's not gonna

200
00:12:32.599 --> 00:12:37.629
dump it out there unless you actually
have a console log statement.

201
00:12:37.629 --> 00:12:40.220
If you execute the call
from a console statement,

202
00:12:40.220 --> 00:12:43.255
because that's the return value,
then it would show it.

203
00:12:45.212 --> 00:12:45.757
&gt;&gt; Bianca Gandolfo: Right.
&gt;&gt; Speaker 7: So

204
00:12:45.757 --> 00:12:47.587
when you're refreshing your page,
it doesn't.

205
00:12:47.587 --> 00:12:49.670
&gt;&gt; Bianca Gandolfo: Are you
doing it in JS Bin?

206
00:12:49.670 --> 00:12:51.050
&gt;&gt; Speaker 7: I was not.

207
00:12:51.050 --> 00:12:53.410
None of us were using
the strings.js file from yesterday.

208
00:12:55.400 --> 00:12:58.135
&gt;&gt; Bianca Gandolfo: Yeah, you can just run
it directly in your console like this, and

209
00:12:58.135 --> 00:12:59.046
it should print out.

210
00:12:59.046 --> 00:13:00.255
&gt;&gt; Kevin: It's doing it now.

211
00:13:00.255 --> 00:13:00.755
&gt;&gt; Bianca Gandolfo: Cool.

