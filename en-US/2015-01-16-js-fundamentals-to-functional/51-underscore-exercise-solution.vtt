WEBVTT

1
00:00:00.000 --> 00:00:03.770
[MUSIC]

2
00:00:03.770 --> 00:00:05.538
&gt;&gt; Bianca Gandolfo: So
we're gonna use an each loop,

3
00:00:05.538 --> 00:00:09.710
to loop through an array in
console.log with different values.

4
00:00:09.710 --> 00:00:14.029
And the way that we would do that is,
here we have our array and

5
00:00:14.029 --> 00:00:16.756
here's our call back function here.

6
00:00:16.756 --> 00:00:20.773
If we wanted the console log the value,
so this gonna be the value.

7
00:00:20.773 --> 00:00:23.140
This will be the index.

8
00:00:23.140 --> 00:00:24.840
And this one would be the list.

9
00:00:24.840 --> 00:00:27.490
So if we wanna console.log the value,
we do that.

10
00:00:28.660 --> 00:00:34.310
And then, if we wanted to console.log
the index, we would do it that way.

11
00:00:35.450 --> 00:00:40.160
And how would this be different,
if you were looping through an object?

12
00:00:43.018 --> 00:00:43.871
&gt;&gt; Bianca Gandolfo: Anyone?

13
00:00:47.317 --> 00:00:49.460
&gt;&gt; Speaker 2: Do the properties?

14
00:00:49.460 --> 00:00:50.540
&gt;&gt; Bianca Gandolfo: Yeah, so

15
00:00:50.540 --> 00:00:54.600
the main difference in,
there's not really a big difference,

16
00:00:54.600 --> 00:00:59.570
the only difference is that instead of the
indexes, it would just be the properties.

17
00:00:59.570 --> 00:01:02.479
It would just, you could still call
it index and it wouldn't matter.

18
00:01:04.140 --> 00:01:04.640
Cool.

19
00:01:05.830 --> 00:01:11.540
So our second function
is called check value,

20
00:01:11.540 --> 00:01:13.630
it searches an array for a certain value.

21
00:01:13.630 --> 00:01:18.110
If it contains that value, it'll return
true, otherwise it will return false.

22
00:01:19.320 --> 00:01:23.416
So here we are with just our regular for
loop, we are initializing it i 0 and

23
00:01:23.416 --> 00:01:26.548
we're gonna loop,
while i is less than array.length.

24
00:01:26.548 --> 00:01:28.900
And then, we're gonna plus one every time.

25
00:01:29.900 --> 00:01:34.660
And for every index of the array,
we're gonna run this block.

26
00:01:34.660 --> 00:01:42.390
So we're gonna say if array i, so
the first one, is zero, I should.do this.

27
00:01:44.040 --> 00:01:51.476
So check value, so
we're gonna check the value for, for bye.

28
00:01:54.640 --> 00:01:59.642
So, it's gonna say if I array I,
if the first time

29
00:01:59.642 --> 00:02:04.680
is gonna be zero, so
if bonjour is the same as bye.

30
00:02:04.680 --> 00:02:05.270
Oops, I'm sorry.

31
00:02:06.300 --> 00:02:07.080
We have to do this.

32
00:02:08.410 --> 00:02:09.380
Let's start over.

33
00:02:09.380 --> 00:02:13.590
So we're passing helloArray, and we're
also passing bye as a string that we're

34
00:02:13.590 --> 00:02:17.932
checking to see if that is in the array.

35
00:02:17.932 --> 00:02:22.480
So, we're looping through, so
the first one would be bonjour, and

36
00:02:22.480 --> 00:02:25.680
the value that we're
checking against says, bye.

37
00:02:25.680 --> 00:02:27.580
So that doesn't equal each other.

38
00:02:27.580 --> 00:02:30.280
So, we won't enter into this block here.

39
00:02:31.350 --> 00:02:35.932
We're gonna skip this, and
then we're gonna run it again.

40
00:02:35.932 --> 00:02:39.160
And it says, if hello equals bye.

41
00:02:39.160 --> 00:02:43.200
And it doesn't, so
it's gonna skip it again.

42
00:02:43.200 --> 00:02:45.400
It will run this block one more time.

43
00:02:45.400 --> 00:02:50.300
And it says, hola, so
it does hola equal goodbye, no.

44
00:02:50.300 --> 00:02:55.490
So then, it's gonna skip this if block,
and then this for loop is done.

45
00:02:55.490 --> 00:02:57.280
So then, we're gonna return false.

46
00:02:58.530 --> 00:03:03.700
However, for hello,
well let's just do bonjour.

47
00:03:03.700 --> 00:03:06.790
For bonjour, we are going to say,

48
00:03:08.180 --> 00:03:12.810
we're gonna loop through the array and
if bonjour equals bonjour,

49
00:03:14.380 --> 00:03:18.500
which it does, we're gonna skip in
here and we're gonna return true.

50
00:03:18.500 --> 00:03:22.320
The important thing about returning true,
right here, is that,

51
00:03:22.320 --> 00:03:25.550
it's gonna break out of if, and
it's gonna break out of the for, and

52
00:03:25.550 --> 00:03:27.110
it's gonna break out of the function.

53
00:03:27.110 --> 00:03:30.700
So the entire function at that point will
return true, it's gonna stop looping.

54
00:03:31.990 --> 00:03:34.760
So be really careful about
where you're returning.

55
00:03:34.760 --> 00:03:38.691
If you're returning inside a for loop, you
wanna make sure that you really wanna stop

56
00:03:38.691 --> 00:03:41.603
looping at that point,
where you have that return statement.

57
00:03:44.067 --> 00:03:49.184
&gt;&gt; Bianca Gandolfo: Cool, and then,
so that same thing with bonjour,

58
00:03:49.184 --> 00:03:52.350
put it this down here.

59
00:03:52.350 --> 00:03:54.430
I'm sorry, with wow.

60
00:03:54.430 --> 00:03:58.760
I'm sorry, with each,
it's been a long two days of teaching.

61
00:04:00.200 --> 00:04:04.010
So, the same check value with each, and

62
00:04:04.010 --> 00:04:06.900
how we're gonna do that is because
we can't return anything from each,

63
00:04:06.900 --> 00:04:11.820
we have to initialize the value
before it and return it after.

64
00:04:11.820 --> 00:04:17.020
So we're going to loop through and
we're gonna check if the value,

65
00:04:17.020 --> 00:04:21.210
the first value, equals val, etc, etc.

66
00:04:21.210 --> 00:04:24.140
If it does,
we're gonna say result is true.

67
00:04:24.140 --> 00:04:26.670
And it will, but this won't stop the loop,
it will keep looping.

68
00:04:28.700 --> 00:04:32.780
And then, once we're done looping out of
the each, we're gonna return the result.

69
00:04:32.780 --> 00:04:35.030
And so, result is false.

70
00:04:35.030 --> 00:04:35.990
Unless, proven true.

71
00:04:35.990 --> 00:04:38.480
And it will be proven true in here,

72
00:04:38.480 --> 00:04:41.270
otherwise it will just remain false and
that's fine.

73
00:04:41.270 --> 00:04:42.440
We're gonna return it down there.

74
00:04:43.730 --> 00:04:46.594
Any questions about those first few ones?

75
00:04:53.559 --> 00:04:57.975
&gt;&gt; Speaker 2: I'm looking at underscore,
it also has a some function?

76
00:04:57.975 --> 00:04:58.679
&gt;&gt; Bianca Gandolfo: Underscore?

77
00:04:58.679 --> 00:05:00.750
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Bianca Gandolfo: Has a some function,

78
00:05:00.750 --> 00:05:01.726
like s o m e.

79
00:05:01.726 --> 00:05:03.166
&gt;&gt; Speaker 2: S-O-M-E.

80
00:05:03.166 --> 00:05:05.790
Which would break off the first
term it returns false, part true.

81
00:05:05.790 --> 00:05:06.366
&gt;&gt; Bianca Gandolfo: Mm-hm.

82
00:05:06.366 --> 00:05:07.812
Cool.

83
00:05:07.812 --> 00:05:08.345
Yep.

84
00:05:08.345 --> 00:05:09.486
&gt;&gt; Speaker 2: More efficient than each.

85
00:05:09.486 --> 00:05:11.860
&gt;&gt; Bianca Gandolfo: Mm-hm, mm-hm.

86
00:05:11.860 --> 00:05:17.400
So underscore has tons and tons of awesome
utility functions that you can go through.

87
00:05:17.400 --> 00:05:19.491
And once you get more
familiar with the library,

88
00:05:19.491 --> 00:05:21.384
you'll these things will just come to you.

89
00:05:23.710 --> 00:05:24.455
&gt;&gt; Bianca Gandolfo: Cool, so

90
00:05:24.455 --> 00:05:31.180
we're gonna write a loop that pushes all
the values in an object to an array.

91
00:05:31.180 --> 00:05:33.170
We're going to skip this, and
we're just gonna do the map.

92
00:05:34.380 --> 00:05:36.960
And so, we're gonna say var, what is it?

93
00:05:36.960 --> 00:05:40.012
MyNums equals map, so

94
00:05:40.012 --> 00:05:45.320
map is gonna loop through this object.

95
00:05:47.280 --> 00:05:50.586
And it's gonna and then the second
the first parameter's a value,

96
00:05:50.586 --> 00:05:53.200
the second one is gonna be
the property name, right?

97
00:05:55.190 --> 00:05:56.380
So adjust for reference.

98
00:05:58.040 --> 00:05:59.450
And then, we're just gonna return val.

99
00:05:59.450 --> 00:06:06.040
So val is gonna be 2, 4, 3, and this
is the number, not the string, and 12.

100
00:06:06.040 --> 00:06:13.280
However, if we wanted to return the
property names, we could just return prop.

101
00:06:13.280 --> 00:06:20.208
And that would return
an array of property names.

102
00:06:24.945 --> 00:06:25.808
&gt;&gt; Bianca Gandolfo: Cool.

103
00:06:25.808 --> 00:06:26.821
Any questions on that one?

104
00:06:30.448 --> 00:06:31.790
&gt;&gt; Bianca Gandolfo: Cool.

105
00:06:31.790 --> 00:06:34.120
So then the last one is filter.

106
00:06:34.120 --> 00:06:38.979
It's really similar to map in each,

107
00:06:38.979 --> 00:06:42.899
except filter only returns,

108
00:06:42.899 --> 00:06:47.287
only returns the true, hold on,

109
00:06:47.287 --> 00:06:52.190
let me think how to explain this.

110
00:06:52.190 --> 00:06:55.860
So for the callback function,
filter just returns.

111
00:06:57.770 --> 00:06:59.620
And we'll just add it, if it's true.

112
00:07:03.080 --> 00:07:06.700
Okay, actually, let me double check that,
now I'm starting to doubt myself.

113
00:07:06.700 --> 00:07:07.590
Let's look up filters.

114
00:07:07.590 --> 00:07:08.620
So loops through the list.

115
00:07:09.690 --> 00:07:10.880
Yeah, so pass the truth test.

116
00:07:10.880 --> 00:07:13.630
So, if.

117
00:07:13.630 --> 00:07:15.367
I see.
So I actually implemented it wrong.

118
00:07:15.367 --> 00:07:19.460
Excuse me.

119
00:07:19.460 --> 00:07:22.043
So, we can just return.

120
00:07:22.043 --> 00:07:28.730
It will give the value, if this is true.

121
00:07:28.730 --> 00:07:34.245
So val mod two will equal zero,
if val is even.

122
00:07:40.303 --> 00:07:42.223
&gt;&gt; Bianca Gandolfo: And then,
we can double check this.

123
00:07:46.148 --> 00:07:47.288
&gt;&gt; Bianca Gandolfo: Just to make sure.

124
00:07:50.849 --> 00:07:52.579
&gt;&gt; Bianca Gandolfo: Syntax error.

125
00:07:57.603 --> 00:07:59.086
&gt;&gt; Bianca Gandolfo: Okay.

126
00:08:03.939 --> 00:08:05.847
&gt;&gt; Bianca Gandolfo: Curly
bracket at the end, I think.

127
00:08:07.426 --> 00:08:14.658
&gt;&gt; Bianca Gandolfo: Thank you.

128
00:08:14.658 --> 00:08:15.250
Of course.

129
00:08:16.490 --> 00:08:19.460
So I need to, whenever you see this error,
underscore is not defined,

130
00:08:19.460 --> 00:08:22.720
that means you don't have
the library in that window.

131
00:08:25.720 --> 00:08:27.266
And you can always do a quick check here.

132
00:08:27.266 --> 00:08:29.350
Whoops, not that one.

133
00:08:29.350 --> 00:08:31.960
Just by,
you can literally just type underscore.

134
00:08:31.960 --> 00:08:35.300
And for some reason on
the annotated source code page,

135
00:08:35.300 --> 00:08:36.650
we don't have underscore loaded.

136
00:08:38.980 --> 00:08:43.840
But if we check here, we see that we have
underscore just returns an object, or

137
00:08:43.840 --> 00:08:44.560
a function, I'm sorry.

138
00:08:47.130 --> 00:08:51.509
Okay.
Val is not defined.

139
00:08:51.509 --> 00:08:52.330
Val.

140
00:08:52.330 --> 00:08:52.830
There we go.

141
00:08:54.300 --> 00:08:54.900
So, that's filter.

142
00:08:54.900 --> 00:09:01.370
So, filter is going to push
whatever values in the array,

143
00:09:01.370 --> 00:09:05.590
or I'm sorry, in the object or
the array, into an array.

144
00:09:05.590 --> 00:09:08.500
If this function returns true.

145
00:09:11.730 --> 00:09:14.510
So, val mod two is true.

146
00:09:16.790 --> 00:09:20.593
Is equals, equals zero, when it's even.

147
00:09:20.593 --> 00:09:23.310
Does everyone know how the module works?

148
00:09:23.310 --> 00:09:23.928
Thumbs on module.

149
00:09:23.928 --> 00:09:24.940
Okay.

150
00:09:24.940 --> 00:09:25.952
Cool.

151
00:09:25.952 --> 00:09:27.709
Awesome.

152
00:09:29.650 --> 00:09:32.579
So do you have any questions
on those exercises?

153
00:09:35.032 --> 00:09:37.655
&gt;&gt; Bianca Gandolfo: Let me
put the correct answer.

154
00:09:44.780 --> 00:09:46.972
&gt;&gt; Speaker 3: Yeah,
I have a question on line 43 there.

155
00:09:46.972 --> 00:09:48.158
&gt;&gt; Bianca Gandolfo: Mm-hm?

156
00:09:48.158 --> 00:09:52.080
&gt;&gt; Speaker 3: [COUGH] So
map runs through your object,

157
00:09:52.080 --> 00:09:55.890
pulls out each property
that you're returning.

158
00:09:55.890 --> 00:09:59.480
And then, that looks like magic to me,
that it puts it into that array?

159
00:10:01.837 --> 00:10:04.835
&gt;&gt; Bianca Gandolfo: It looks like magic?

160
00:10:04.835 --> 00:10:06.960
&gt;&gt; Speaker 3: Both that.

161
00:10:06.960 --> 00:10:07.745
&gt;&gt; Bianca Gandolfo: Is that a question?

162
00:10:07.745 --> 00:10:11.690
[LAUGH] Is it magic?

163
00:10:11.690 --> 00:10:13.230
&gt;&gt; Speaker 3: Where's myNums?

164
00:10:13.230 --> 00:10:15.135
&gt;&gt; Bianca Gandolfo: So my.

165
00:10:15.135 --> 00:10:18.260
&gt;&gt; Speaker 3: MyNums is declared
right there on line 43, right?

166
00:10:18.260 --> 00:10:20.150
&gt;&gt; Bianca Gandolfo: Right.
&gt;&gt; Speaker 3: So we're not telling it's

167
00:10:20.150 --> 00:10:21.700
an array, it's an object or anything.

168
00:10:23.190 --> 00:10:24.243
So Javascript.
&gt;&gt; Bianca Gandolfo: Well,

169
00:10:24.243 --> 00:10:26.961
map always returns an array Map does?

170
00:10:26.961 --> 00:10:27.690
So that's just map.

171
00:10:27.690 --> 00:10:32.659
Yeah, the mechanics of map is that, it's
always gonna return an array, and that

172
00:10:32.659 --> 00:10:37.525
array is always gonna contain the values
that are returned from this function.

173
00:10:37.525 --> 00:10:39.010
&gt;&gt; Speaker 3: Okay.

174
00:10:39.010 --> 00:10:40.840
&gt;&gt; Bianca Gandolfo: So,
since we're returning the val here,

175
00:10:42.100 --> 00:10:45.150
we know that's gonna be
an array of the values.

176
00:10:45.150 --> 00:10:49.220
And filters really similar except that,
if the value returns true,

177
00:10:50.950 --> 00:10:54.660
it will save that into an array.

178
00:10:54.660 --> 00:10:55.580
So it's still looping.

179
00:10:55.580 --> 00:10:58.290
The only difference with the map is that,

180
00:10:58.290 --> 00:11:03.090
it's the array is gonna be the length
of the original array or object.

181
00:11:03.090 --> 00:11:09.670
So this length is important,
so we have four properties.

182
00:11:09.670 --> 00:11:14.380
So we know that for map, it's gonna
return an array with four indices, and

183
00:11:14.380 --> 00:11:19.112
filter is cool because you can sort of
decide on how long that's gonna be.

184
00:11:21.690 --> 00:11:27.710
So you couldn't use map to filter,
for example.

185
00:11:27.710 --> 00:11:31.914
Even though it kind of seems like it,
cuz filter also returns an array, and

186
00:11:31.914 --> 00:11:33.200
map returns an array.

187
00:11:34.310 --> 00:11:35.670
Map always,

188
00:11:35.670 --> 00:11:40.150
just the mechanics of the loop, it's
always just gonna return the same length,

189
00:11:40.150 --> 00:11:44.730
and since filter is a shorter usually,
or the same size or shorter.

190
00:11:44.730 --> 00:11:46.450
You can't use map.

191
00:11:46.450 --> 00:11:49.325
&gt;&gt; Speaker 4: So will you get
a bunch of like, undefined gaps?

192
00:11:49.325 --> 00:11:50.270
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Speaker 4: So like, so

193
00:11:50.270 --> 00:11:53.269
if you did the modulus on
three that'd be undefined.

194
00:11:53.269 --> 00:11:54.100
&gt;&gt; Bianca Gandolfo: Mm-hm.

195
00:11:54.100 --> 00:11:55.110
&gt;&gt; Speaker 4: Stuff like that?

196
00:11:55.110 --> 00:11:56.600
&gt;&gt; Bianca Gandolfo: Yeah, yeah.

197
00:11:56.600 --> 00:12:01.443
So, and the difference here is that,
this is actually just returning true or

198
00:12:01.443 --> 00:12:04.136
false, this isn't returning the value.

199
00:12:04.136 --> 00:12:04.701
You know?

200
00:12:04.701 --> 00:12:08.490
Where here, you actually have
to explicitly return the value.

201
00:12:09.860 --> 00:12:14.286
If we did this in map,
it would just return, it would be,

202
00:12:14.286 --> 00:12:18.089
it would then be an array of true or
false values.

203
00:12:23.806 --> 00:12:28.488
&gt;&gt; Bianca Gandolfo: [NOISE] Cool.

204
00:12:28.488 --> 00:12:30.491
Just went away.

205
00:12:30.491 --> 00:12:32.128
Awesome.

206
00:12:32.128 --> 00:12:39.010
So, that concludes our everything.

207
00:12:39.010 --> 00:12:40.930
Yeah.
Thank you guys so much for coming.

208
00:12:40.930 --> 00:12:43.410
I'll stick around for more questions.

209
00:12:43.410 --> 00:12:48.400
Just a couple things, Mark will be sending
out a link to submit for solutions,

210
00:12:48.400 --> 00:12:51.550
I'll submit them all in bulk, later today.

211
00:12:53.880 --> 00:12:54.920
What else?
So

212
00:12:54.920 --> 00:12:57.970
we teach these classes
live at Hack Reactor.

213
00:12:57.970 --> 00:13:02.190
About once a month, we have a different
class that we teach to the public.

214
00:13:02.190 --> 00:13:04.310
You can find that on meetup.

215
00:13:04.310 --> 00:13:10.321
So www.meetup.com/ hackreactor,
we have all of our events there.

216
00:13:10.321 --> 00:13:11.474
We have regular meetups too.

217
00:13:11.474 --> 00:13:13.660
Study groups, etc.

218
00:13:13.660 --> 00:13:16.420
And we also teach these
classes through there.

219
00:13:16.420 --> 00:13:18.540
All live, in person in San Fransisco.

220
00:13:19.990 --> 00:13:24.360
Yeah, thank you guys so much, and
I really appreciate everything.

