WEBVTT

1
00:00:00.000 --> 00:00:03.811
[MUSIC]

2
00:00:03.811 --> 00:00:06.614
&gt;&gt; Bianca Gandolfo: So here's some
examples on how you've probably used

3
00:00:06.614 --> 00:00:08.290
arrays in the past.

4
00:00:08.290 --> 00:00:11.340
So, here we have our box.

5
00:00:11.340 --> 00:00:16.240
Notice the difference here is that we have
the brackets and not the curly braces.

6
00:00:16.240 --> 00:00:20.570
And we have box and index 0 is true.

7
00:00:20.570 --> 00:00:22.250
So we're adding a Boolean there, right.

8
00:00:22.250 --> 00:00:24.150
That's why we don't have quotes around it.

9
00:00:24.150 --> 00:00:28.310
Because true is a value in and
of itself, it's not a string, and

10
00:00:28.310 --> 00:00:32.820
then at the second index, or
the first index, I'm sorry, we have meow,

11
00:00:33.970 --> 00:00:38.290
and we can always use box.push
to add something at the end, and

12
00:00:38.290 --> 00:00:43.920
here we are just adding an array.

13
00:00:43.920 --> 00:00:45.050
I'm sorry, an object here.

14
00:00:46.480 --> 00:00:52.230
And then if wanted to use i, we'd probably
use i before when we're using a loop,

15
00:00:52.230 --> 00:00:54.710
the for loop with semicolons.

16
00:00:54.710 --> 00:00:56.890
And you could just use i here.

17
00:00:56.890 --> 00:00:58.070
What do you think this is gonna equal?

18
00:00:58.070 --> 00:00:58.840
Can everyone see that?

19
00:00:58.840 --> 00:01:02.354
It's kind of small.
&gt;&gt; Speaker 2: True?

20
00:01:02.354 --> 00:01:04.090
&gt;&gt; Bianca Gandolfo: True.

21
00:01:04.090 --> 00:01:07.750
Right, because i is gonna do a look up and
it's gonna be 0, and so

22
00:01:07.750 --> 00:01:10.680
we can imagine that's
substituted there as 0, and

23
00:01:10.680 --> 00:01:16.008
then that's true.
&gt;&gt; Bianca Gandolfo: Cool,

24
00:01:16.008 --> 00:01:19.600
and then, the 1 we know is what?

25
00:01:19.600 --> 00:01:22.410
Meow.

26
00:01:22.410 --> 00:01:23.830
And then, what if we box.pop?

27
00:01:23.830 --> 00:01:27.940
What is that gonna return?
&gt;&gt; Speaker 2: True.

28
00:01:27.940 --> 00:01:30.049
&gt;&gt; Bianca Gandolfo: [CROSSTALK]

29
00:01:32.472 --> 00:01:33.264
&gt;&gt; Bianca Gandolfo: Actually, there's

30
00:01:33.264 --> 00:01:35.030
a return.
I think it returns

31
00:01:35.030 --> 00:01:38.970
the thing that you remove.
&gt;&gt; Bianca Gandolfo: Mm-hm.

32
00:01:38.970 --> 00:01:40.890
So what is it gonna return?
&gt;&gt; Speaker 2: {'hello' : 'goodbye'}?

33
00:01:40.890 --> 00:01:41.940
The object?
&gt;&gt; Bianca Gandolfo: Yes.

34
00:01:41.940 --> 00:01:46.324
It's gonna return this object.
&gt;&gt; Bianca Gandolfo: And

35
00:01:46.324 --> 00:01:52.801
then if I said, console.log(box),

36
00:01:52.801 --> 00:01:58.330
what is box going to look like now.

37
00:02:01.350 --> 00:02:04.100
Yeah.
So, what pop() does, is it takes the last

38
00:02:05.320 --> 00:02:10.660
thing off, it returns it and
so after that, we just have

39
00:02:13.860 --> 00:02:16.350
two things in our array.

40
00:02:17.980 --> 00:02:21.790
Any questions about that?
&gt;&gt; Bianca Gandolfo: So

41
00:02:21.790 --> 00:02:23.400
we've all seen that before, right?

42
00:02:23.400 --> 00:02:25.130
We're using bracket notation.

43
00:02:25.130 --> 00:02:26.920
We're using push and pop.

44
00:02:26.920 --> 00:02:30.520
We're using variable i,
all things that we've seen before.

45
00:02:32.040 --> 00:02:32.540
Cool.

46
00:02:34.430 --> 00:02:37.020
So, cool.
We're comfortable with that.

47
00:02:37.020 --> 00:02:42.810
Now let's talk about how our
array is similar to our object.

48
00:02:43.880 --> 00:02:47.490
And so, this is just our box
in the previous example.

49
00:02:47.490 --> 00:02:50.340
So we have box as an object,
and then we change one thing.

50
00:02:50.340 --> 00:02:53.030
Do you guys see that change?

51
00:02:53.030 --> 00:02:55.480
It really settles the first line, really.

52
00:02:55.480 --> 00:02:59.520
We're changing those curly
brackets to square brackets.

53
00:02:59.520 --> 00:03:04.840
And now let's explore what this
does to our data structure.

54
00:03:06.350 --> 00:03:06.850
So.

55
00:03:09.340 --> 00:03:14.941
What do we predict this is
gonna do here on the second

56
00:03:14.941 --> 00:03:21.019
to last line?
&gt;&gt; Speaker 2: 9?

57
00:03:21.019 --> 00:03:21.887
&gt;&gt; Bianca Gandolfo: 9.

58
00:03:21.887 --> 00:03:25.977
Anyone else?
&gt;&gt; Speaker 3: I

59
00:03:25.977 --> 00:03:29.325
think it's number five?
&gt;&gt; Speaker 4: Bianca?

60
00:03:29.325 --> 00:03:30.220
&gt;&gt; Bianca Gandolfo: Mm-hm?

61
00:03:30.220 --> 00:03:31.100
&gt;&gt; Speaker 4: There's some questions

62
00:03:31.100 --> 00:03:32.330
in the chat room, and I have one, too.

63
00:03:32.330 --> 00:03:34.374
Can you go back one slide?
&gt;&gt; Bianca Gandolfo: Sure.

64
00:03:34.374 --> 00:03:36.417
&gt;&gt; Speaker 2: [COUGH]

65
00:03:36.417 --> 00:03:41.180
&gt;&gt; Speaker 4: So, underneath box.push,

66
00:03:41.180 --> 00:03:44.940
if you did another, I don't know what the
word for it is, but another assignment to

67
00:03:44.940 --> 00:03:50.970
the box Like box[3], and then you
did that same box.pop at the bottom.

68
00:03:50.970 --> 00:03:53.080
Would you still get what you pushed, or

69
00:03:53.080 --> 00:03:56.070
would you get the last thing?
&gt;&gt; Bianca Gandolfo: You always get

70
00:03:56.070 --> 00:03:56.990
the last thing.

71
00:03:56.990 --> 00:04:02.873
So this push would be,
this would be at 2, so index 2.

72
00:04:04.650 --> 00:04:06.790
And then we add something to three and

73
00:04:06.790 --> 00:04:09.550
then if we popped it would
then be the last thing.

74
00:04:09.550 --> 00:04:17.981
So pop always does the last index.
&gt;&gt; Bianca Gandolfo: And

75
00:04:17.981 --> 00:04:21.361
it returns the last index and
it's destructed so

76
00:04:21.361 --> 00:04:25.330
it takes off the last thing so
that's important to note.

77
00:04:26.710 --> 00:04:27.210
Cool.

78
00:04:28.570 --> 00:04:29.700
So any other questions?

79
00:04:33.150 --> 00:04:34.180
Okay.
&gt;&gt; Speaker 2: As for that one,

80
00:04:34.180 --> 00:04:36.680
I think you just answered
their other question but,

81
00:04:36.680 --> 00:04:40.235
can you then reference
those different copies?

82
00:04:40.235 --> 00:04:42.467
Or their actually,

83
00:04:42.467 --> 00:04:48.530
GS doesn't actually alter the original
array, it just makes copies?

84
00:04:48.530 --> 00:04:55.370
It modifies those?
&gt;&gt; Bianca Gandolfo: I'm not sure.

85
00:04:55.370 --> 00:05:01.290
So, I can kind of show var x = this.

86
00:05:02.770 --> 00:05:08.476
So here's an array, so we x.pop.
&gt;&gt; Bianca Gandolfo: So

87
00:05:08.476 --> 00:05:11.148
it's destructive, so

88
00:05:11.148 --> 00:05:16.167
it actually is deleting.
&gt;&gt; Speaker 2: But if you were to

89
00:05:16.167 --> 00:05:19.840
assign like, that array x to [CROSSTALK]
&gt;&gt; Speaker 2: But

90
00:05:19.840 --> 00:05:20.720
it's passed by,
&gt;&gt; Bianca Gandolfo: Right,

91
00:05:20.720 --> 00:05:23.070
I see what you mean.
&gt;&gt; Speaker 2: Value in that numbers.

92
00:05:23.070 --> 00:05:24.070
&gt;&gt; Bianca Gandolfo: In that case yeah,

93
00:05:24.070 --> 00:05:24.830
that is a copy.

94
00:05:24.830 --> 00:05:26.520
Yeah, I see what you're saying.

95
00:05:26.520 --> 00:05:30.420
So if you did y=x.

96
00:05:30.420 --> 00:05:34.244
Right, so we have y and then we say x.pop.

97
00:05:34.244 --> 00:05:37.520
And then we look at x.

98
00:05:37.520 --> 00:05:39.470
And then we look at y.

99
00:05:39.470 --> 00:05:41.020
No it is the same.

100
00:05:41.020 --> 00:05:43.980
It is destructive.
&gt;&gt; [INAUDIBLE]

101
00:05:43.980 --> 00:05:45.310
&gt;&gt; Bianca Gandolfo: Yeah, yeah.

102
00:05:45.310 --> 00:05:51.515
So arrays [INAUDIBLE] but, yeah, okay,

103
00:05:51.515 --> 00:05:57.460
cool.
&gt;&gt; Bianca Gandolfo: So here we go.

104
00:05:57.460 --> 00:06:01.700
So some people said it was undefined here,
box, bracket size.

105
00:06:01.700 --> 00:06:09.639
Oops.
&gt;&gt; Bianca Gandolfo: Any other guesses?

106
00:06:11.140 --> 00:06:16.720
Who thinks it's gonna be 9?
&gt;&gt; Bianca Gandolfo: Who

107
00:06:16.720 --> 00:06:18.870
thinks it's gonna be undefined?

108
00:06:18.870 --> 00:06:21.250
Okay, a few people.

109
00:06:22.840 --> 00:06:25.780
Well the cool thing, and
maybe the confusing thing about this

110
00:06:25.780 --> 00:06:31.250
is that it's actually gonna be 9 because
an array is an object at it's core.

111
00:06:31.250 --> 00:06:34.120
That means that you can
add properties to it.

112
00:06:34.120 --> 00:06:39.650
And you can kind of think
of the array like this.

113
00:06:39.650 --> 00:06:45.180
So we have an index zero called meow.

114
00:06:45.180 --> 00:06:47.360
Or a property zero you could even call it.

115
00:06:47.360 --> 00:06:48.900
And then we have size 9, so

116
00:06:48.900 --> 00:06:54.150
you can think of your array is really just
an object that also has numerical indices.

117
00:06:55.830 --> 00:07:05.118
So, what's box at zero?
&gt;&gt; Bianca Gandolfo: What

118
00:07:05.118 --> 00:07:10.428
about Kim?
&gt;&gt; Speaker 5: Nine?

119
00:07:10.428 --> 00:07:14.003
&gt;&gt; Bianca Gandolfo: box[0]?

120
00:07:14.003 --> 00:07:15.596
&gt;&gt; Speaker 5: Nine?

121
00:07:15.596 --> 00:07:19.260
&gt;&gt; Bianca Gandolfo: That's a good guess.

122
00:07:19.260 --> 00:07:20.960
So, that's a common confusion,

123
00:07:20.960 --> 00:07:26.010
that since we put size in first,
that that would be in the zero place.

124
00:07:26.010 --> 00:07:28.060
But it actually has nothing to do with it,

125
00:07:28.060 --> 00:07:32.840
since our bracket notation is the same
as when we look up on an object.

126
00:07:32.840 --> 00:07:36.870
It's looking at that property zero,
and it's gonna return as meow.

127
00:07:38.010 --> 00:07:42.170
Whereas size here,
if we wanted to look up size,

128
00:07:42.170 --> 00:07:45.585
we'd just have to reference it by size.
&gt;&gt; Speaker 4: So how does

129
00:07:45.585 --> 00:07:48.252
it order it then, if your allowed to put-
&gt;&gt; Bianca Gandolfo: We'll

130
00:07:48.252 --> 00:07:48.840
get to that soon.

131
00:07:49.840 --> 00:07:50.350
Yeah, no problem.

132
00:07:52.380 --> 00:07:54.170
Cool, is that clear?

133
00:07:54.170 --> 00:07:59.210
So even though size is added on first,
it's not at the 0 width index.

134
00:07:59.210 --> 00:08:04.771
It's actually just a property
on the object called size.

135
00:08:04.771 --> 00:08:06.472
&gt;&gt; Speaker 4: And stepping back,

136
00:08:06.472 --> 00:08:10.080
how prevalent is this in actually coding?

137
00:08:10.080 --> 00:08:16.530
Somebody using an array versus an object-
&gt;&gt; Bianca Gandolfo: You use it indirectly.

138
00:08:16.530 --> 00:08:18.330
These rules you use indirectly.

139
00:08:18.330 --> 00:08:20.240
Like for example,
we're gonna get into it a little more.

140
00:08:20.240 --> 00:08:22.948
But we have different properties and

141
00:08:22.948 --> 00:08:26.100
methods on arrays that
we use all the time.

142
00:08:26.100 --> 00:08:31.089
And then, it goes further when you
start diving deeper into JavaScript and

143
00:08:31.089 --> 00:08:33.703
you start talking about prototypes and

144
00:08:33.703 --> 00:08:38.693
things like that It becomes really
clear why it's important to understand

145
00:08:38.693 --> 00:08:43.390
these underlying concepts of
the mechanics of the array as an object.

146
00:08:43.390 --> 00:08:45.556
Mhm?

147
00:08:45.556 --> 00:08:47.838
Cool.

148
00:08:47.838 --> 00:08:57.703
Alright, what about box.size?
&gt;&gt; Bianca Gandolfo: 9, yeah.

149
00:08:57.703 --> 00:08:58.877
So the rules are the same.

150
00:08:58.877 --> 00:09:00.956
So we can use dot notation.

151
00:09:00.956 --> 00:09:03.810
We can use praco notation.

152
00:09:03.810 --> 00:09:09.436
Just the same as with an object.
&gt;&gt; Bianca Gandolfo: Yay

153
00:09:09.436 --> 00:09:11.110
the rules don't change!

154
00:09:11.110 --> 00:09:11.990
Aren't we so excited.

155
00:09:11.990 --> 00:09:14.372
That makes things a lot simpler, right?

156
00:09:14.372 --> 00:09:15.444
Or not.

157
00:09:15.444 --> 00:09:16.936
Simpler?

158
00:09:16.936 --> 00:09:19.070
Simpler, or not simpler?

159
00:09:21.560 --> 00:09:22.210
Middle.

160
00:09:22.210 --> 00:09:23.120
Okay.

161
00:09:23.120 --> 00:09:27.880
Well, maybe in time you'll feel
more at ease with this concept.

162
00:09:27.880 --> 00:09:30.970
What about, so
where is the box that's size is nine?

163
00:09:30.970 --> 00:09:38.495
What about box size zero?
&gt;&gt; Bianca Gandolfo: What about Ben.

164
00:09:38.495 --> 00:09:43.040
&gt;&gt; Speaker 6: [INAUDIBLE] That would be.

165
00:09:43.040 --> 00:09:46.475
You can't do that right.

166
00:09:46.475 --> 00:09:47.450
&gt;&gt; Bianca Gandolfo: Right.

167
00:09:47.450 --> 00:09:48.170
&gt;&gt; Speaker 6: It's
&gt;&gt; Bianca Gandolfo: Cuz it's

168
00:09:48.170 --> 00:09:48.990
a number.
&gt;&gt; Speaker 6: Yeah

169
00:09:48.990 --> 00:09:49.620
&gt;&gt; Bianca Gandolfo: Yay!

170
00:09:49.620 --> 00:09:50.120
Good job.

171
00:09:51.820 --> 00:09:57.390
I usually trick people with that one.
&gt;&gt; Speaker 6: [INAUDIBLE] Minnesota.

172
00:09:57.390 --> 00:09:57.990
&gt;&gt; Bianca Gandolfo: What did you say,

173
00:09:57.990 --> 00:09:59.012
not in Minnesota?

174
00:09:59.012 --> 00:10:02.107
[LAUGH] Is that where we are?
&gt;&gt; Speaker 6: Today.

175
00:10:02.107 --> 00:10:03.008
&gt;&gt; Bianca Gandolfo: Today.

176
00:10:03.008 --> 00:10:05.341
[LAUGH] Cool.

