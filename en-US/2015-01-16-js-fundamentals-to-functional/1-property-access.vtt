WEBVTT

1
00:00:00.000 --> 00:00:03.503
&gt;&gt; Bianca Gandolfo: [MUSIC]

2
00:00:03.503 --> 00:00:05.830
So, what are objects?

3
00:00:05.830 --> 00:00:09.550
How many here, people here have used,
let's practice thumbs.

4
00:00:09.550 --> 00:00:11.130
Thumbs on objects.

5
00:00:11.130 --> 00:00:14.164
You've seen an object before.

6
00:00:14.164 --> 00:00:17.830
Everyone's gotta do it, even if you
don't want to, you have to do it.

7
00:00:17.830 --> 00:00:21.150
Even Mark has to do it.

8
00:00:21.150 --> 00:00:23.020
So, what is an object then?

9
00:00:23.020 --> 00:00:24.270
Can you tell me what an object is?

10
00:00:25.540 --> 00:00:28.587
It doesn't have to be 100%
the whole definition, but

11
00:00:28.587 --> 00:00:30.712
what's a characteristic of an object?

12
00:00:34.003 --> 00:00:36.145
I'm gonna sit here and
stare at you until you answer, so.

13
00:00:36.145 --> 00:00:39.090
&gt;&gt; Speaker 2: [LAUGH] A way to store data.

14
00:00:39.090 --> 00:00:39.670
&gt;&gt; Bianca Gandolfo: Yeah, so

15
00:00:39.670 --> 00:00:41.490
it's a data structure
in which we store data.

16
00:00:43.040 --> 00:00:45.170
That's important for
a data driven application.

17
00:00:45.170 --> 00:00:49.040
We have to put our data somewhere.
&gt;&gt; Speaker 3: Properties methods?

18
00:00:49.040 --> 00:00:49.940
&gt;&gt; Bianca Gandolfo: Yeah, so

19
00:00:49.940 --> 00:00:52.290
we can store properties on them.

20
00:00:52.290 --> 00:00:53.330
They can be any type.

21
00:00:53.330 --> 00:00:56.050
They can be a function,
which would make it a method.

22
00:00:56.050 --> 00:00:57.430
Or it could be a string or a number.

23
00:00:57.430 --> 00:00:59.460
Or it could be another object or an array.

24
00:01:01.160 --> 00:01:02.286
What else do we know about objects?

25
00:01:02.286 --> 00:01:05.700
Yes.
&gt;&gt; Speaker 4: Key value pairs?

26
00:01:05.700 --> 00:01:06.595
&gt;&gt; Bianca Gandolfo: Absolutely,

27
00:01:06.595 --> 00:01:09.950
so we have a key value pair,
where the key is a string,

28
00:01:09.950 --> 00:01:14.587
usually a series of characters in a word
that makes sense to us in some way.

29
00:01:18.129 --> 00:01:22.650
Blueprint of a class we have online,
something that has properties, awesome.

30
00:01:24.430 --> 00:01:25.900
Cool, and all those things are right.

31
00:01:25.900 --> 00:01:27.930
So, an object is a data structure.

32
00:01:27.930 --> 00:01:30.340
We have key value pairs.

33
00:01:30.340 --> 00:01:33.560
We store our data in there and

34
00:01:33.560 --> 00:01:37.410
the data that we store at those
property names can be any type.

35
00:01:38.430 --> 00:01:43.450
And just some overview of what we're gonna
talk about today as far as objects is,

36
00:01:43.450 --> 00:01:46.780
we're gonna talk about property access,
assignment,

37
00:01:46.780 --> 00:01:51.240
bracket notation, dot notation, when
to use the brackets, when do the dots.

38
00:01:51.240 --> 00:01:52.510
What does it mean?

39
00:01:52.510 --> 00:01:56.412
We're gonna get into nested objects
which is important when you,

40
00:01:56.412 --> 00:01:59.890
this is probably how how you're gonna
encounter most of your objects anyway.

41
00:01:59.890 --> 00:02:02.838
In a nested data structure,
usually the form of JSON.

42
00:02:02.838 --> 00:02:06.740
And you're gonna need to know
how to traverse them and

43
00:02:06.740 --> 00:02:10.360
manipulate them to get that data out
that you want as well as change them and

44
00:02:10.360 --> 00:02:15.220
send them back to your API or
your back end or whatever you're doing.

45
00:02:15.220 --> 00:02:19.456
And we're gonna talk about iteration and
how which is just a fancy word for

46
00:02:19.456 --> 00:02:20.490
looping really.

47
00:02:22.280 --> 00:02:22.780
Cool.

48
00:02:25.960 --> 00:02:27.420
Awesome.

49
00:02:27.420 --> 00:02:30.190
So what we have here in
this first slide is we

50
00:02:30.190 --> 00:02:35.360
have a variable called box in which
we're storing an object literal.

51
00:02:35.360 --> 00:02:39.046
So we just have an empty object here and
we're storing in a variable.

52
00:02:41.173 --> 00:02:44.330
Cool, whoops.

53
00:02:44.330 --> 00:02:46.810
And here we have something
called dot notation.

54
00:02:47.840 --> 00:02:51.760
And we're just creating
a property on our object.

55
00:02:51.760 --> 00:02:57.760
And we do this by using a dot, property
name equals whatever value that is.

56
00:02:57.760 --> 00:03:00.510
And again,
the value here can be any data type.

57
00:03:00.510 --> 00:03:02.870
Even another object.

58
00:03:02.870 --> 00:03:08.200
Here's just a visual of
what that would look like.

59
00:03:08.200 --> 00:03:12.290
We have a property material here,
and a value here cardboard.

60
00:03:13.420 --> 00:03:18.053
My question to you is when are some
other times that you've seen dots in

61
00:03:18.053 --> 00:03:24.288
JavaScript?
&gt;&gt; Speaker 4: jQuery

62
00:03:24.288 --> 00:03:26.194
chains.
&gt;&gt; Bianca Gandolfo: Yeah,

63
00:03:26.194 --> 00:03:27.212
you use them in jQuery.

64
00:03:31.879 --> 00:03:35.080
You guys have typed a bunch
of dots in JavaScript before.

65
00:03:37.830 --> 00:03:38.800
What about online,

66
00:03:38.800 --> 00:03:44.510
do we have any experience using dots?
&gt;&gt; Speaker 3: Like

67
00:03:44.510 --> 00:03:48.825
in the URL's?
&gt;&gt; Bianca Gandolfo: In URL's?

68
00:03:48.825 --> 00:03:50.893
Yeah dot com, that's true,

69
00:03:50.893 --> 00:03:54.599
that would be a string normally.
&gt;&gt; Speaker 5: Function

70
00:03:54.599 --> 00:03:56.220
calls?
&gt;&gt; Bianca Gandolfo: Who said that?

71
00:03:57.290 --> 00:04:00.950
Function calls, yeah so
if we have a method, we use a dot.

72
00:04:03.100 --> 00:04:04.320
Where else have we seen dots?

73
00:04:06.020 --> 00:04:11.693
So I feel like these guys in the middle
row to the left are averting their eyes so

74
00:04:11.693 --> 00:04:14.940
when have you used some
dots in JavaScript.

75
00:04:16.780 --> 00:04:17.440
In general.

76
00:04:17.440 --> 00:04:19.210
Just-
&gt;&gt; Speaker 6: Navigating directory

77
00:04:19.210 --> 00:04:21.030
structure?
&gt;&gt; Bianca Gandolfo: Okay.

78
00:04:21.030 --> 00:04:25.020
Sure.
&gt;&gt; Speaker 6: I haven't touched JavaScript

79
00:04:25.020 --> 00:04:28.240
in a few months, so refreshing.
&gt;&gt; Bianca Gandolfo: Okay.

80
00:04:28.240 --> 00:04:31.510
You can open up your text editor,
look at some old code.

81
00:04:31.510 --> 00:04:36.040
Command F, just a dot, and
let me know what comes up.

82
00:04:36.040 --> 00:04:37.160
What about in the very back?

83
00:04:39.150 --> 00:04:42.488
When have we used dots in the very back?

84
00:04:42.488 --> 00:04:44.504
Anyone back there alive?

85
00:04:48.253 --> 00:04:50.465
You guys have never used
a dot in JavaScript?

86
00:04:51.920 --> 00:04:53.300
Have you used a dot?

87
00:04:53.300 --> 00:04:58.040
When have you used a dot?
&gt;&gt; Speaker 7: In objects in order

88
00:04:59.600 --> 00:05:02.760
to refer to the value of [INAUDIBLE]
&gt;&gt; Bianca Gandolfo: Yeah.

89
00:05:02.760 --> 00:05:03.730
Absolutely.

90
00:05:03.730 --> 00:05:08.945
To get the value of an object.
&gt;&gt; Speaker 7: [INAUDIBLE]

91
00:05:08.945 --> 00:05:10.070
&gt;&gt; Bianca Gandolfo: Mm-hm.

92
00:05:10.070 --> 00:05:13.520
Cool, yeah, so we can't use weird
characters in dot notation.

93
00:05:13.520 --> 00:05:15.170
What about in the front?

94
00:05:15.170 --> 00:05:19.030
Did you answer the question yet?
&gt;&gt; Speaker 8: Some people might use

95
00:05:19.030 --> 00:05:19.750
it for a name space.

96
00:05:21.010 --> 00:05:26.492
I keep referencing that that's not
much more than traversing an object.

97
00:05:26.492 --> 00:05:27.740
&gt;&gt; Bianca Gandolfo: Yeah, totally.

98
00:05:27.740 --> 00:05:32.990
What about here with the stripe shirt?
&gt;&gt; Speaker 9: Properties?

99
00:05:32.990 --> 00:05:33.520
&gt;&gt; Bianca Gandolfo: Yeah, someone

100
00:05:33.520 --> 00:05:39.620
accessing a property.
&gt;&gt; Speaker 9: I don't think we said that.

101
00:05:39.620 --> 00:05:40.576
&gt;&gt; Bianca Gandolfo: What about like dot

102
00:05:40.576 --> 00:05:41.606
length on an array?

103
00:05:41.606 --> 00:05:44.634
Who's done that?

104
00:05:44.634 --> 00:05:45.880
Dot length?

105
00:05:45.880 --> 00:05:52.510
Or what about, dot push, dot pop,
you know, object dot keys.

106
00:05:52.510 --> 00:05:54.180
So we use, we use dots a lot.

107
00:05:54.180 --> 00:05:59.010
And what I'm gonna, to let you know is
that whenever you use a dot you know for

108
00:05:59.010 --> 00:06:01.430
sure, unless it gives you an error,

109
00:06:01.430 --> 00:06:03.829
whatever's to the left
of the dot is an object.

110
00:06:04.890 --> 00:06:08.970
And, so whether that's an array or
a function, it's still at it's core,

111
00:06:08.970 --> 00:06:13.560
an object, and those rules of syntax rules
of dot notation, also bracket notation,

112
00:06:13.560 --> 00:06:17.530
which we'll go through soon,
stay the same.

113
00:06:17.530 --> 00:06:19.310
And so, that's important.

114
00:06:19.310 --> 00:06:21.890
That's important that all
these things are objects and

115
00:06:21.890 --> 00:06:25.850
that we understand that as we're
going through this workshop together.

116
00:06:27.010 --> 00:06:27.510
Cool.

117
00:06:28.622 --> 00:06:32.160
So we used dot annotation
to add a property and

118
00:06:32.160 --> 00:06:35.090
now we're using dot notation
to access a property.

119
00:06:35.090 --> 00:06:39.999
What is whenever I have these
two question marks here

120
00:06:39.999 --> 00:06:44.253
that means I want you
to answer the question.

121
00:06:44.253 --> 00:06:46.376
So what about plaid shirt, second row,

122
00:06:46.376 --> 00:06:49.870
here of the glasses who's
not paying attention to me.

123
00:06:49.870 --> 00:06:50.710
No worries.

124
00:06:50.710 --> 00:06:59.040
So, what is this gonna return?
&gt;&gt; Speaker 9: Cardboard.

125
00:06:59.040 --> 00:06:59.790
&gt;&gt; Bianca Gandolfo: Yeah, absolutely.

126
00:06:59.790 --> 00:07:02.030
It's going to return a stream, cardboard.

127
00:07:04.530 --> 00:07:05.040
Just like that.

128
00:07:06.510 --> 00:07:09.120
And so that would be what we
call access with dot notation.

129
00:07:09.120 --> 00:07:12.590
&gt;&gt; Speaker 10: Does your,

130
00:07:12.590 --> 00:07:17.370
does your slide deck move mine on my
screen if I'm watching down there?

131
00:07:17.370 --> 00:07:18.210
&gt;&gt; Bianca Gandolfo: I don't think so.

132
00:07:18.210 --> 00:07:20.990
I don't think so.

133
00:07:20.990 --> 00:07:23.910
The URL does reflect which line I'm on.

134
00:07:26.140 --> 00:07:27.610
Could you see that?
&gt;&gt; Speaker 10: Yeah.

135
00:07:27.610 --> 00:07:28.330
&gt;&gt; Bianca Gandolfo: Yeah, so.

136
00:07:30.960 --> 00:07:35.060
Cool, and so here we are,
we are returning that value cardboard and

137
00:07:35.060 --> 00:07:36.950
we're saving it in a variable cb.

138
00:07:36.950 --> 00:07:39.910
You've all done that before, right?

139
00:07:39.910 --> 00:07:42.700
Raise your thumbs on that,
we've all done that.

140
00:07:42.700 --> 00:07:43.380
Great, good.

141
00:07:43.380 --> 00:07:45.650
If you haven't, I don't know.

142
00:07:45.650 --> 00:07:48.370
I don't know what to say.

143
00:07:48.370 --> 00:07:51.460
So, we just said that
this is cardboard right?

144
00:07:54.770 --> 00:07:59.850
So here we are, we're creating an empty
object, we're adding a property cardboard.

145
00:07:59.850 --> 00:08:04.310
We're using dot notation to
access the value cardboard and

146
00:08:04.310 --> 00:08:07.030
we're storing it in the variable cb.

147
00:08:07.030 --> 00:08:08.320
Then once we type out cb,

148
00:08:08.320 --> 00:08:12.900
and you can imagine that this is in the
console, it's gonna print out cardboard.

149
00:08:14.140 --> 00:08:20.040
And what happens if we say box.material
and we assign it to titanium.

150
00:08:20.040 --> 00:08:21.180
We upgraded our box.

151
00:08:21.180 --> 00:08:24.799
We're no longer a cardboard box and
now we have titanium box.

152
00:08:26.250 --> 00:08:27.048
What does that,

153
00:08:27.048 --> 00:08:30.650
how is that gonna affect cb?
&gt;&gt; Speaker 10: Still cardboard.

154
00:08:30.650 --> 00:08:31.850
&gt;&gt; Bianca Gandolfo: Still cardboard.

155
00:08:31.850 --> 00:08:33.120
What does everyone, does everyone agree?

156
00:08:33.120 --> 00:08:34.320
Still cardboard?

157
00:08:34.320 --> 00:08:35.250
Not still cardboard.

158
00:08:37.730 --> 00:08:43.920
We have some mixed feelings.

159
00:08:43.920 --> 00:08:46.730
And I'm going to assert that
it is gonna be cardboard.

160
00:08:46.730 --> 00:08:51.450
And this is an example of something
we call storing things by value,

161
00:08:51.450 --> 00:08:54.870
which we hopefully will get to today.

162
00:08:54.870 --> 00:09:01.370
But it's just important to note that when
we access the variable cardboard here,

163
00:09:01.370 --> 00:09:08.620
we're not actually looking up in our
code and then referencing box.material.

164
00:09:08.620 --> 00:09:13.526
We're actually looking in memory where we
had stored whatever value box.materials

165
00:09:13.526 --> 00:09:14.240
returning.

166
00:09:14.240 --> 00:09:17.587
And since box.material
is returning cardboard,

167
00:09:17.587 --> 00:09:22.380
cb now only stores cardboard with
no reference to box.material.

168
00:09:22.380 --> 00:09:29.476
And therefore cb here is going to be
cardboard no matter if you change

169
00:09:29.476 --> 00:09:35.915
box.material later on in your code.
&gt;&gt; Speaker 10: So

170
00:09:35.915 --> 00:09:40.180
to change cb you explicitly
then have to assign it whatever

171
00:09:40.180 --> 00:09:42.800
you're going to assign it to new values?
&gt;&gt; Bianca Gandolfo: Absolutely.

172
00:09:42.800 --> 00:09:43.300
Absolutely.

173
00:09:46.320 --> 00:09:49.390
And just a side note, this is dangerous,
but just a side note,

174
00:09:49.390 --> 00:09:54.120
that this isn't true for objects, arrays
and functions who are stored by reference.

175
00:09:54.120 --> 00:09:57.130
So this would be the opposite for that.

176
00:09:57.130 --> 00:10:01.340
But I'll hopefully get into more detail

177
00:10:01.340 --> 00:10:05.920
about that later.
&gt;&gt; Speaker 10: Just to refresh on the dot

178
00:10:05.920 --> 00:10:10.420
material, so
the second line when we're using quotes,

179
00:10:10.420 --> 00:10:13.330
that's just when we're
not using dot notation?

180
00:10:13.330 --> 00:10:15.320
So if I wanted to put material in quotes,

181
00:10:15.320 --> 00:10:21.006
obviously not with dot notation but.
&gt;&gt; Bianca Gandolfo: So

182
00:10:21.006 --> 00:10:23.720
dot notation assumes that it's a string.

183
00:10:23.720 --> 00:10:28.730
So you can assume that material,
the property material stored as a string

184
00:10:28.730 --> 00:10:32.030
which has quotes around it.

185
00:10:32.030 --> 00:10:38.642
The syntax you won't use quotations,
good question.

186
00:10:38.642 --> 00:10:43.909
Cool, so, we've discussed that
box.material is gonna return cardboard,

187
00:10:43.909 --> 00:10:47.440
what if we do box.size,
what is that gonna return?

188
00:10:49.530 --> 00:10:51.140
What is it?
&gt;&gt; Speaker 7: Undefined.

189
00:10:51.140 --> 00:10:52.370
&gt;&gt; Bianca Gandolfo: Undefined.

190
00:10:52.370 --> 00:10:55.910
Thank you guys for answering that
all in unison, that was beautiful.

191
00:10:55.910 --> 00:10:56.710
Just kidding.

192
00:10:56.710 --> 00:10:59.420
So undefined,
why am I writing undefined here with no

193
00:10:59.420 --> 00:11:03.220
quotes?
&gt;&gt; Speaker 7: Undefined is

194
00:11:03.220 --> 00:11:04.390
a type.
&gt;&gt; Bianca Gandolfo: Yeah,

195
00:11:04.390 --> 00:11:06.260
undefined is its own type.

196
00:11:06.260 --> 00:11:10.060
And therefore, if we put quotes around it,
then it becomes a string, and

197
00:11:10.060 --> 00:11:13.380
it's gonna mean something
completely different.

198
00:11:13.380 --> 00:11:17.060
So, when we do a property look
up on something that doesn't yet

199
00:11:17.060 --> 00:11:20.360
exist in our object,
we're simply gonna get undefined.

