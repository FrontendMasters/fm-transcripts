WEBVTT

1
00:00:00.000 --> 00:00:03.673
[MUSIC]

2
00:00:03.673 --> 00:00:06.743
&gt;&gt; Bianca Gandolfo: So those are some
things that are kinda cool about arrays

3
00:00:06.743 --> 00:00:09.240
that makes them just like objects.

4
00:00:09.240 --> 00:00:11.700
And we were just talking about this loop,
this for

5
00:00:11.700 --> 00:00:14.960
in loop, that we can use with objects.

6
00:00:14.960 --> 00:00:17.720
If an array is an object,
shouldn't it work?

7
00:00:19.130 --> 00:00:20.055
What are our predictions?

8
00:00:22.127 --> 00:00:23.160
&gt;&gt; Bianca Gandolfo: Is that a prediction?

9
00:00:24.590 --> 00:00:26.000
&gt;&gt; Speaker 2: No.
&gt;&gt; Bianca Gandolfo: Okay, I'll get to

10
00:00:26.000 --> 00:00:27.110
you in a second.

11
00:00:27.110 --> 00:00:27.920
What's your prediction?

12
00:00:27.920 --> 00:00:31.190
What about, let's see, what about Kevin?

13
00:00:33.418 --> 00:00:34.388
&gt;&gt; Bianca Gandolfo: You have a prediction?

14
00:00:34.388 --> 00:00:38.560
&gt;&gt; Speaker 3: Log the values.

15
00:00:38.560 --> 00:00:39.340
&gt;&gt; Bianca Gandolfo: The values?

16
00:00:39.340 --> 00:00:39.840
&gt;&gt; Speaker 3: Yeah.

17
00:00:39.840 --> 00:00:41.300
&gt;&gt; Bianca Gandolfo: Or
the properties names?

18
00:00:41.300 --> 00:00:42.080
&gt;&gt; Speaker 3: The values.

19
00:00:42.080 --> 00:00:43.860
&gt;&gt; Bianca Gandolfo: The values, okay.

20
00:00:43.860 --> 00:00:45.030
So we have a guess for the values.

21
00:00:45.030 --> 00:00:46.704
What about Andy?

22
00:00:46.704 --> 00:00:48.320
&gt;&gt; Andy: I think it's the gonna
be the property names.

23
00:00:48.320 --> 00:00:49.280
&gt;&gt; Bianca Gandolfo: Property names.

24
00:00:49.280 --> 00:00:51.560
&gt;&gt; Andy: If the rules don't change,
it's property names.

25
00:00:51.560 --> 00:00:52.690
&gt;&gt; Bianca Gandolfo: Yep, so

26
00:00:52.690 --> 00:00:55.150
it's gonna be the property names
because the rules don't change.

27
00:00:55.150 --> 00:00:56.760
And if you don't believe
me you can try it out.

28
00:00:59.870 --> 00:01:01.460
And the rules don't change.

29
00:01:01.460 --> 00:01:06.730
Check this out, our zeroeth numerical
index is actually a string.

30
00:01:06.730 --> 00:01:07.675
That's interesting, right?

31
00:01:10.513 --> 00:01:11.550
&gt;&gt; Bianca Gandolfo: So
the rules don't change.

32
00:01:11.550 --> 00:01:12.640
And we can do it.

33
00:01:12.640 --> 00:01:14.650
Did you have a question Mark,
I'm sorry, I forgot.

34
00:01:14.650 --> 00:01:16.950
&gt;&gt; Mark: Yeah, do you have the chat up?

35
00:01:16.950 --> 00:01:20.290
It might help, just to look at
the question, a couple back now about

36
00:01:20.290 --> 00:01:22.940
any difference between and
they have a few examples there.

37
00:01:26.630 --> 00:01:29.610
&gt;&gt; Bianca Gandolfo: So the question
is is there any difference between,

38
00:01:30.980 --> 00:01:33.880
here I'll type it our here on
the screen so everyone can see.

39
00:01:35.000 --> 00:01:41.186
Box two and then
&gt;&gt; Bianca Gandolfo: So,

40
00:01:41.186 --> 00:01:45.443
we have box.asdf = true, and

41
00:01:45.443 --> 00:01:52.534
then box2.asdf = false, I'm sorry, = true.

42
00:01:52.534 --> 00:01:54.970
And it says, is there any difference here?

43
00:01:54.970 --> 00:01:59.344
And I'm gonna argue, no,
that there's no difference between

44
00:01:59.344 --> 00:02:04.049
how we're adding a property and
a value to an array versus an object.

45
00:02:04.049 --> 00:02:08.857
I'm gonna argue that
that is exactly the same,

46
00:02:08.857 --> 00:02:11.749
even though it's an array.

47
00:02:18.589 --> 00:02:21.251
&gt;&gt; Bianca Gandolfo: Cool,
so we have this loop and

48
00:02:21.251 --> 00:02:26.050
this k is printing out again
just the property names.

49
00:02:27.330 --> 00:02:30.148
So if we wanted to get those values
out how would we do that again?

50
00:02:30.148 --> 00:02:34.150
What about Grace?

51
00:02:34.150 --> 00:02:37.260
&gt;&gt; Grace: You would add bracket,
square brackets.

52
00:02:37.260 --> 00:02:37.760
&gt;&gt; Bianca Gandolfo: Absolutely.

53
00:02:40.250 --> 00:02:40.750
Cool.

54
00:02:42.050 --> 00:02:47.620
And so that's going to then log our
values, which would be 9 and meow, right?

55
00:02:49.190 --> 00:02:49.690
Thumbs so far?

56
00:02:51.799 --> 00:02:52.920
&gt;&gt; Bianca Gandolfo: Thumbs.
Thumbs in the back?

57
00:02:54.450 --> 00:02:54.950
Thumbs?

58
00:02:56.450 --> 00:02:56.950
Cool.

59
00:02:58.720 --> 00:02:59.560
All right.
What about this?

60
00:02:59.560 --> 00:03:00.261
What is this going to log?

61
00:03:16.761 --> 00:03:17.839
&gt;&gt; Bianca Gandolfo: Anyone?

62
00:03:17.839 --> 00:03:19.030
&gt;&gt; Speaker 2: Nine and meow.

63
00:03:19.030 --> 00:03:20.270
&gt;&gt; Andy: The values.

64
00:03:20.270 --> 00:03:21.370
&gt;&gt; Bianca Gandolfo: The values?

65
00:03:21.370 --> 00:03:25.853
Good guess but remember that
whole variable .notation rule.

66
00:03:28.669 --> 00:03:29.730
&gt;&gt; Bianca Gandolfo: Remember that rule?

67
00:03:29.730 --> 00:03:31.000
Thumbs if you remember the rule.

68
00:03:31.000 --> 00:03:33.820
That you can't use dot
notation with a variable.

69
00:03:33.820 --> 00:03:36.720
Thumbs, thumbs.

70
00:03:36.720 --> 00:03:40.360
So since k is a variable we
can only use bracket notation.

71
00:03:40.360 --> 00:03:43.924
I'm just going back to this
rule that we discussed earlier.

72
00:03:48.599 --> 00:03:50.350
&gt;&gt; Bianca Gandolfo: So
this is gonna be actually undefined.

73
00:03:51.440 --> 00:03:56.570
Undefined, because k is a variable.

74
00:03:56.570 --> 00:04:01.440
And if we go back to that slide, the
rules, all the way down, down, down, down.

75
00:04:03.800 --> 00:04:08.330
That for DOTS, we can't use variables.

76
00:04:10.770 --> 00:04:11.728
For brackets, we can.

77
00:04:11.728 --> 00:04:15.015
Okay.

78
00:04:15.015 --> 00:04:19.950
So, cool.

79
00:04:19.950 --> 00:04:23.100
And we know, again, k is a variable,
because we just see var here, right?

80
00:04:23.100 --> 00:04:25.550
For var, that means k is a variable.

81
00:04:26.910 --> 00:04:27.960
Cool.

82
00:04:27.960 --> 00:04:30.040
So this is how we would do it, then.

83
00:04:30.040 --> 00:04:31.365
Here we have the bracket notation.

84
00:04:31.365 --> 00:04:32.675
Cool.

85
00:04:32.675 --> 00:04:38.570
Cool, so that's great.

86
00:04:38.570 --> 00:04:40.860
It behaves exactly the same as an object.

87
00:04:43.280 --> 00:04:47.110
Then, how come we've never
really noticed that before?

88
00:04:47.110 --> 00:04:50.354
Like when we loop right,
we don't really use the for in loop,

89
00:04:50.354 --> 00:04:54.970
because we're not really interested,
and usually if we're using an array,

90
00:04:54.970 --> 00:04:57.540
we're not interested in
those names properties.

91
00:04:57.540 --> 00:05:01.130
So even if we did have this

92
00:05:02.920 --> 00:05:07.380
size here, this size property,
we're probably not too interested in it,

93
00:05:07.380 --> 00:05:11.330
and if we were, we'd probably choose
to use just a vanilla object.

94
00:05:12.610 --> 00:05:13.350
So how are we gonna loop?

95
00:05:13.350 --> 00:05:16.070
We're probably gonna use a loop like this,
right?

96
00:05:16.070 --> 00:05:20.323
Has everyone seen, thumbs on this loop,
this for loop with semicolons here?

97
00:05:22.693 --> 00:05:23.193
&gt;&gt; Bianca Gandolfo: Cool.

98
00:05:25.060 --> 00:05:29.430
So this for loop with semicolons
Is pretty interesting.

99
00:05:29.430 --> 00:05:31.075
Remember when I said the for

100
00:05:31.075 --> 00:05:36.430
in loop, was like a thing that was
made specifically for objects.

101
00:05:36.430 --> 00:05:41.940
That's not true for this for in loop,
this for in loop is just mathematical.

102
00:05:41.940 --> 00:05:44.880
If you look at it, all this.

103
00:05:44.880 --> 00:05:49.736
How you give directions to the for
loop is in this signature right here.

104
00:05:49.736 --> 00:05:55.350
We have for and we have var i = 0, so
that's saying create a variable, i,

105
00:05:55.350 --> 00:06:02.360
start at 0, and it says loop while i
is less than the length of our box.

106
00:06:02.360 --> 00:06:02.860
Right?

107
00:06:04.270 --> 00:06:08.100
And then this one says increment
i plus one every time.

108
00:06:08.100 --> 00:06:11.781
So every time we loop,
we're gonna increment i.

109
00:06:11.781 --> 00:06:13.807
And we can change that.

110
00:06:13.807 --> 00:06:16.980
We can do +=2 if we wanted.

111
00:06:16.980 --> 00:06:20.070
If you wanna do every other one or
every third one, right?

112
00:06:20.070 --> 00:06:21.090
You can change it.

113
00:06:21.090 --> 00:06:23.760
But i++ seems to be the norm.

114
00:06:23.760 --> 00:06:25.770
You could also count down, right, i--.

115
00:06:27.290 --> 00:06:31.040
But the mechanics here is
that they're just numbers.

116
00:06:31.040 --> 00:06:31.540
Right?

117
00:06:33.350 --> 00:06:38.066
So if we console.log(i),
what is that logging?

118
00:06:43.521 --> 00:06:44.663
&gt;&gt; Andy: 0, 1, 2, 3?

119
00:06:47.637 --> 00:06:50.122
&gt;&gt; Andy: 0, 1, 2.

120
00:06:50.122 --> 00:06:51.372
&gt;&gt; Bianca Gandolfo: Yeah.
&gt;&gt; Mark: 0, 1.

121
00:06:51.372 --> 00:06:52.854
&gt;&gt; Bianca Gandolfo: 0, 1.

122
00:06:52.854 --> 00:06:56.313
We're gonna get to the length
property in a bit, but

123
00:06:56.313 --> 00:06:59.970
the point here is that i is just a number.

124
00:06:59.970 --> 00:07:04.100
i doesn't know anything about our array.

125
00:07:04.100 --> 00:07:07.830
The only thing it knows about,
is this number here, box.length,

126
00:07:07.830 --> 00:07:12.040
which we could really just change to 2,
and it would be equivalent.

127
00:07:12.040 --> 00:07:15.460
So there's no relationship
between this loop and the array.

128
00:07:16.690 --> 00:07:18.510
It's just like mathematical directions.

129
00:07:21.130 --> 00:07:26.049
And so, if we say, increment until 2,

130
00:07:26.049 --> 00:07:30.262
it'll just console log 0 and 1.

131
00:07:30.262 --> 00:07:30.988
Thumbs on that?

132
00:07:33.921 --> 00:07:35.041
&gt;&gt; Bianca Gandolfo: Cool.

133
00:07:39.890 --> 00:07:40.770
&gt;&gt; Bianca Gandolfo: What about this?

134
00:07:43.430 --> 00:07:43.930
Actually.

135
00:07:45.570 --> 00:07:46.330
&gt;&gt; Speaker 7: I have a question.

136
00:07:46.330 --> 00:07:47.590
&gt;&gt; Bianca Gandolfo: Sure.

137
00:07:47.590 --> 00:07:51.070
&gt;&gt; Speaker 7: So,
why is length 2 and not 3?

138
00:07:51.070 --> 00:07:53.440
&gt;&gt; Bianca Gandolfo: We're gonna
get to that in just a second.

139
00:07:53.440 --> 00:07:53.940
&gt;&gt; Bianca Gandolfo: Yeah.

140
00:07:56.590 --> 00:07:57.298
Let's just do this.

141
00:08:02.988 --> 00:08:06.520
&gt;&gt; Bianca Gandolfo: So, if we wanted to
access the value could we do it this way?

142
00:08:10.540 --> 00:08:12.100
No.
&gt;&gt; Speaker 2: It's variable.

143
00:08:12.100 --> 00:08:14.730
&gt;&gt; Bianca Gandolfo: I'm
going to drill this into you

144
00:08:14.730 --> 00:08:17.320
until everyone hates me for it.

145
00:08:17.320 --> 00:08:20.450
So here we have again,
just our bracket notation with a variable.

146
00:08:22.130 --> 00:08:26.050
Maybe we're starting to see
that i is just a variable, and

147
00:08:26.050 --> 00:08:30.800
we have to use the bracket notation
only because it's a variable.

148
00:08:30.800 --> 00:08:34.520
Not because the array is an array,

149
00:08:34.520 --> 00:08:37.080
and there's some special
syntax surrounding it.

150
00:08:37.080 --> 00:08:38.990
It's simply because it's a variable.

151
00:08:38.990 --> 00:08:43.340
And also,
if we go back here to box['0'], for

152
00:08:43.340 --> 00:08:48.060
numbers, remember, numbers we always
have to use a bracket notation.

153
00:08:48.060 --> 00:08:51.840
And that's why you tend to see
bracket notation with arrays.

154
00:08:51.840 --> 00:08:54.930
Because we tend to use them for
their numerical indices.

155
00:08:56.190 --> 00:08:58.810
And bracket notation just makes sense.

156
00:09:01.280 --> 00:09:06.940
&gt;&gt; Andy: So when I loop through that,
my output is meow and then Woohoo!, so

157
00:09:06.940 --> 00:09:12.970
what in index is the size or
is the value 9 at?

158
00:09:12.970 --> 00:09:17.540
&gt;&gt; Bianca Gandolfo: Yeah, so if you look
down here you can think of it this way.

159
00:09:17.540 --> 00:09:19.720
So we have 0, we have 1,
and then we have size.

160
00:09:19.720 --> 00:09:21.540
It's not at an index.

161
00:09:21.540 --> 00:09:23.340
This is a property on the object.

162
00:09:23.340 --> 00:09:24.650
&gt;&gt; Mark: It's a property.

163
00:09:24.650 --> 00:09:25.450
&gt;&gt; Bianca Gandolfo: Yeah.

164
00:09:25.450 --> 00:09:30.610
And so, since we're looping until 2 and
i is a number, it's just gonna be an i.

165
00:09:30.610 --> 00:09:34.930
Remember it's gonna be 0,1,
so it's gonna say box set 0.

166
00:09:34.930 --> 00:09:36.130
Right?

167
00:09:36.130 --> 00:09:37.740
Which is meow.

168
00:09:37.740 --> 00:09:39.540
You can think of it like this too.

169
00:09:40.686 --> 00:09:46.630
Or box set 1, which is gonna be Whoohoo!,
cuz we pushed that onto the end.

170
00:09:46.630 --> 00:09:50.660
Right and so wee see we have this
property 1, with the value, Whoohooo!

171
00:09:53.330 --> 00:09:53.988
That make sense?

172
00:09:53.988 --> 00:09:55.383
&gt;&gt; Andy: [INAUDIBLE] size [CROSSTALK].

173
00:09:55.383 --> 00:09:57.592
&gt;&gt; Bianca Gandolfo: And then we have
size which we don't touch, right,

174
00:09:57.592 --> 00:09:58.757
because i is just a number.

175
00:10:06.112 --> 00:10:06.670
&gt;&gt; Bianca Gandolfo: All right.

176
00:10:06.670 --> 00:10:09.610
Can I have one question from the audience.

177
00:10:11.950 --> 00:10:15.020
&gt;&gt; Mark: Why would we use
arrays instead of objects

178
00:10:15.020 --> 00:10:17.420
when it's pretty much the same thing?

179
00:10:17.420 --> 00:10:19.400
&gt;&gt; Bianca Gandolfo: So why would
we use arrays instead of objects?

180
00:10:19.400 --> 00:10:25.600
Because arrays have methods
on them that deal with order,

181
00:10:25.600 --> 00:10:31.040
and you can sort them, you can slice them
in ways that you can't do for an object.

182
00:10:31.040 --> 00:10:37.041
Objects are better for
other things like quick look-ups,

183
00:10:37.041 --> 00:10:40.769
or having data that is categorized.

184
00:10:40.769 --> 00:10:43.422
If you had a user just
like our animal user,

185
00:10:43.422 --> 00:10:48.600
it as different categories on it You have
a user name, then there's a value there.

186
00:10:48.600 --> 00:10:52.860
And you have maybe an age and
then it has a value, versus and array.

187
00:10:52.860 --> 00:10:57.390
If you try to represent a user data as
an array, like the name, then the age,

188
00:10:57.390 --> 00:10:59.000
it's hard to keep track.

189
00:10:59.000 --> 00:11:02.680
You'd have to keep track of the index

190
00:11:02.680 --> 00:11:04.410
if you're using an array
in a traditional way.

191
00:11:06.230 --> 00:11:08.170
&gt;&gt; Speaker 2: Typically,
I guess it depends on the browser,

192
00:11:08.170 --> 00:11:12.550
but iterating over an array is faster.

193
00:11:12.550 --> 00:11:14.120
Is that true?
&gt;&gt; Bianca Gandolfo: No, I'm not sure.

194
00:11:14.120 --> 00:11:15.150
I haven't tested that.

195
00:11:15.150 --> 00:11:19.240
&gt;&gt; Speaker 2: Well there's a little test
thing I found, and in my browser, it is.

196
00:11:19.240 --> 00:11:21.490
What I like, quite a bit actually.

197
00:11:21.490 --> 00:11:22.110
So.

198
00:11:22.110 --> 00:11:23.350
&gt;&gt; Bianca Gandolfo: Interesting.
&gt;&gt; Speaker 2: I don't know if that's true.

199
00:11:23.350 --> 00:11:27.341
I guess it depends on the browser, and how
they implement their engine or whatever.

200
00:11:27.341 --> 00:11:28.710
&gt;&gt; Bianca Gandolfo: Yeah,
and that makes sense to me.

201
00:11:28.710 --> 00:11:32.630
Cool.
Mm-hm?

202
00:11:32.630 --> 00:11:35.390
&gt;&gt; Speaker 7: So what is the length then?

203
00:11:35.390 --> 00:11:38.250
&gt;&gt; Bianca Gandolfo: Hm.
Let's see, how many.

204
00:11:38.250 --> 00:11:38.890
I'm almost there.

205
00:11:38.890 --> 00:11:39.580
&gt;&gt; Speaker 7: Okay.

206
00:11:39.580 --> 00:11:41.230
&gt;&gt; Bianca Gandolfo: Okay wait,
actually I'm there, and we just,

207
00:11:41.230 --> 00:11:42.360
we're covering this.

208
00:11:42.360 --> 00:11:44.030
So the cool thing.

209
00:11:44.030 --> 00:11:46.967
So I'll just jump into this unless we
have anymore questions about iteration.

210
00:11:49.454 --> 00:11:52.229
&gt;&gt; Mark: I think this might be but so

211
00:11:52.229 --> 00:11:55.640
there are a couple things behind this,
but.

212
00:11:55.640 --> 00:11:56.890
&gt;&gt; Bianca Gandolfo: Okay.

213
00:11:56.890 --> 00:12:00.136
&gt;&gt; Mark: So if i is less than 3,
it still wouldn't print size?

214
00:12:00.136 --> 00:12:02.600
&gt;&gt; Bianca Gandolfo: True, true,

215
00:12:02.600 --> 00:12:08.408
because the reason is it would just so
if we just change this to 3 here.

216
00:12:08.408 --> 00:12:14.374
What it would print would be meow,

217
00:12:14.374 --> 00:12:20.560
Whoohooo!, and then undefined.

218
00:12:20.560 --> 00:12:25.250
Because what it's gonna do once
it gets to the index 2, so

219
00:12:25.250 --> 00:12:27.949
once i is 2 it will say box set 2.

220
00:12:27.949 --> 00:12:30.650
And then we'll do a lookup at our box.

221
00:12:30.650 --> 00:12:32.740
And we don't have a property at 2, right?

222
00:12:32.740 --> 00:12:36.770
We only have 0, we have a 1,
and then we have a string size.

223
00:12:36.770 --> 00:12:44.210
So it's never going to
return size in this loop.

224
00:12:44.210 --> 00:12:49.475
And this is a loop we tend to use,
because again, when we're using an array,

225
00:12:49.475 --> 00:12:55.307
we're not usually using it to have string
properties that are characters like size,

226
00:12:55.307 --> 00:12:56.284
for example.

227
00:12:59.772 --> 00:13:00.520
&gt;&gt; Bianca Gandolfo: Mm-hm?

228
00:13:00.520 --> 00:13:03.920
&gt;&gt; Speaker 2: So in the console,
I did a box, and

229
00:13:03.920 --> 00:13:06.630
I put a size, like you have size 9.

230
00:13:06.630 --> 00:13:10.450
And then I have 0 in quotes and
one enclosed,

231
00:13:10.450 --> 00:13:15.640
and when I just boxed,
the size part doesn't come out.

232
00:13:15.640 --> 00:13:16.450
&gt;&gt; Bianca Gandolfo: True.

233
00:13:16.450 --> 00:13:19.852
So the console just prints,

234
00:13:19.852 --> 00:13:25.098
it depends on what
console you're using and

235
00:13:25.098 --> 00:13:29.775
version of Chrome and all that, but for

236
00:13:29.775 --> 00:13:33.619
example, I have 3 undefined.

237
00:13:33.619 --> 00:13:34.240
Let's see.

238
00:13:34.240 --> 00:13:39.953
So we have box
&gt;&gt; Bianca Gandolfo: That's because.

239
00:13:39.953 --> 00:13:40.453
Yeah.

240
00:13:42.232 --> 00:13:43.480
&gt;&gt; Bianca Gandolfo: Look at that.
This needs to be i.

241
00:13:44.730 --> 00:13:45.630
Cool.

242
00:13:45.630 --> 00:13:51.390
So if we look at box,
it appears just to have two things.

243
00:13:51.390 --> 00:13:54.140
But if you actually, if you consoled
out log box, sometimes you can see.

244
00:13:54.140 --> 00:13:54.640
Let's see.

245
00:13:56.220 --> 00:13:57.190
So size is there.

246
00:13:58.450 --> 00:14:00.850
It's just not in a numerical index.

247
00:14:00.850 --> 00:14:03.410
And your console probably isn't
gonna pay attention to it,

248
00:14:03.410 --> 00:14:07.700
because it's assuming that you are only
worried about the numerical indices.

249
00:14:07.700 --> 00:14:10.800
And it's really up to whoever
is designing the console.

250
00:14:10.800 --> 00:14:12.806
&gt;&gt; Speaker 2: Right.
&gt;&gt; Bianca Gandolfo: To what it's showing,

251
00:14:12.806 --> 00:14:16.491
what's not showing,
because really, under the hood,

252
00:14:16.491 --> 00:14:20.869
there's a lot of different methods and
properties on everything,

253
00:14:20.869 --> 00:14:24.578
especially natively,
that it just not gonna print out.

254
00:14:24.578 --> 00:14:26.440
&gt;&gt; Speaker 2: And same thing with length.

255
00:14:26.440 --> 00:14:29.820
It's length of 2 when I just hit.

256
00:14:29.820 --> 00:14:33.400
Not when I do console log.

257
00:14:33.400 --> 00:14:34.770
&gt;&gt; Bianca Gandolfo: Do
you have a question?

258
00:14:34.770 --> 00:14:38.460
&gt;&gt; Mark: I just want you to verify that
arrays stay ordered and objects don't?

259
00:14:39.830 --> 00:14:43.590
&gt;&gt; Bianca Gandolfo: So, the arrays
are only ordered because of the numbers.

260
00:14:46.090 --> 00:14:48.850
Because it starts from zero and
it counts up.

261
00:14:48.850 --> 00:14:49.775
That's why there's order.

262
00:14:54.220 --> 00:14:57.484
&gt;&gt; Bianca Gandolfo: There's nothing
magical happening that is keeping track of

263
00:14:57.484 --> 00:14:58.130
the order.

264
00:14:58.130 --> 00:14:58.960
It's just the numbers.

