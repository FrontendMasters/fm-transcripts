WEBVTT

1
00:00:00.000 --> 00:00:03.762
[MUSIC]

2
00:00:03.762 --> 00:00:06.390
&gt;&gt; Bianca Gandolfo: So
I have the exercise.

3
00:00:06.390 --> 00:00:11.085
We go to the very first slide, we have

4
00:00:11.085 --> 00:00:16.830
the bit.ly which is func-exercises?
&gt;&gt; Speaker 2: There's

5
00:00:16.830 --> 00:00:20.980
a question I'm not sure
if do you need the var?

6
00:00:22.150 --> 00:00:28.190
And then you said the 4 inblock.
&gt;&gt; Bianca Gandolfo: The question is,

7
00:00:28.190 --> 00:00:29.010
do you need var?

8
00:00:30.540 --> 00:00:35.710
No you don't,
I didn't want to give it away though.

9
00:00:35.710 --> 00:00:37.610
So, the question is do we need var.

10
00:00:37.610 --> 00:00:41.600
I can't delete that but
do we need var, this var?

11
00:00:41.600 --> 00:00:45.500
No you don't.
&gt;&gt; Speaker 3: That a red herring?

12
00:00:47.190 --> 00:00:49.150
&gt;&gt; Bianca Gandolfo: What's that?

13
00:00:49.150 --> 00:00:51.091
&gt;&gt; Speaker 3: If you put it there it's not

14
00:00:51.091 --> 00:00:56.093
gonna matter, yeah.
&gt;&gt; Speaker 3: The last

15
00:00:56.093 --> 00:01:03.470
stuff you could touch on a lot fewer?
&gt;&gt; Bianca Gandolfo: Basically-

16
00:01:03.470 --> 00:01:06.200
&gt;&gt; Speaker 3: Will we cover let in varied

17
00:01:06.200 --> 00:01:10.130
scope and
let in the advanced JavaScript course

18
00:01:10.130 --> 00:01:11.660
on what matters?
&gt;&gt; Bianca Gandolfo: Yeah.

19
00:01:11.660 --> 00:01:12.230
&gt;&gt; Speaker 3: So if you don't.

20
00:01:13.380 --> 00:01:14.770
&gt;&gt; Bianca Gandolfo: Yeah, basically what

21
00:01:14.770 --> 00:01:20.430
let, it's just like instead of using var,
you could say I can't edit this.

22
00:01:20.430 --> 00:01:28.220
Instead of var here, you would say let
i = 0, then i would be in that block.

23
00:01:28.220 --> 00:01:31.920
I've never used it before,

24
00:01:31.920 --> 00:01:36.020
I don't have any experience with it,
but that's the idea.

25
00:01:36.020 --> 00:01:38.610
If you take the advanced JavaScript
course it'll go more in depth.

26
00:01:39.720 --> 00:01:42.230
On that and more in depth on scope.

27
00:01:42.230 --> 00:01:45.990
There's lots of aspects to scope and you
can really dive deep into the mechanics of

28
00:01:45.990 --> 00:01:50.660
how the JavaScript engine works and
how it parses it and

29
00:01:50.660 --> 00:01:54.280
goes through and more in depth.

30
00:01:54.280 --> 00:01:59.160
And it's really, really interesting and
it will really inform

31
00:01:59.160 --> 00:02:02.780
your understanding of how JavaScript's
really working in the background the way I

32
00:02:02.780 --> 00:02:06.800
do it is just kind of willy nilly kind of
just the basic idea of how its run but

33
00:02:06.800 --> 00:02:08.750
there's a lot more too it actually.

34
00:02:10.080 --> 00:02:11.170
Cool.

35
00:02:11.170 --> 00:02:17.410
So here is a link for the function
exercises and we're gonna start with

36
00:02:17.410 --> 00:02:24.140
scope This is a little different then
the exercises that we did yesterday.

37
00:02:24.140 --> 00:02:26.360
The scope exercises are test driven.

38
00:02:26.360 --> 00:02:33.200
I have a dock here, the read me,
that will explain exactly how to do it.

39
00:02:33.200 --> 00:02:38.110
But, the basic idea is,
let me see if I have it open, No.

40
00:02:39.680 --> 00:02:47.400
The basic idea is if we go here, is
that you're going to, you can copy this.

41
00:02:50.590 --> 00:02:54.940
You can clone down the repo, if you're
familiar with that, or you can just

42
00:02:54.940 --> 00:02:59.550
download the zip once you download
the zip, you can go into the scope folder.

43
00:03:00.730 --> 00:03:02.850
You open your SpecRunner in your browser,
and

44
00:03:02.850 --> 00:03:05.030
that's gonna show you
a bunch of failing tests.

45
00:03:06.860 --> 00:03:12.341
I'll just do it, let me,
&gt;&gt; Bianca Gandolfo: I'll

46
00:03:12.341 --> 00:03:17.873
just show you how to do it, let's see.
&gt;&gt; Bianca Gandolfo: Okay

47
00:03:20.412 --> 00:03:23.610
&gt;&gt; Bianca Gandolfo: And then let's see.

48
00:03:23.610 --> 00:03:25.340
So I just download it.

49
00:03:25.340 --> 00:03:30.197
And you unzip it, scope-exercises.

50
00:03:32.397 --> 00:03:36.300
&gt;&gt; Bianca Gandolfo: Where'd it go?

51
00:03:36.300 --> 00:03:41.960
Here it is so, inside there we have our
spec runner which we open in the browser.

52
00:03:45.460 --> 00:03:49.012
And you can see that we have one pass and
eleven failures.

53
00:03:56.392 --> 00:03:57.005
&gt;&gt; Bianca Gandolfo: And then,

54
00:03:57.005 --> 00:03:58.030
let's see here.

55
00:04:01.050 --> 00:04:07.292
Then we want to open up this function.js.

56
00:04:07.292 --> 00:04:13.200
And you're going to open
it with your text editor.

57
00:04:13.200 --> 00:04:18.810
And here we have some where our
failing tests are see if I can.

58
00:04:22.860 --> 00:04:28.810
So we have this describe block which
is gonna encapsulate all of our tests.

59
00:04:29.900 --> 00:04:31.163
And you see that we're running it

60
00:04:31.163 --> 00:04:35.516
immediately down there at the bottom.
&gt;&gt; Bianca Gandolfo: And

61
00:04:35.516 --> 00:04:41.110
then inside of the callback function here.

62
00:04:42.270 --> 00:04:50.440
We have before each, so before every it
block that's before each is gonna be run.

63
00:04:50.440 --> 00:04:56.190
And we have this var actual variable
that is initialize on the find.

64
00:04:56.190 --> 00:04:58.710
And so before each is run
actuals gonna be set to null.

65
00:04:59.880 --> 00:05:02.050
And then, instead of this it block,

66
00:05:02.050 --> 00:05:07.190
we're going to explore the rule
that this string describes.

67
00:05:07.190 --> 00:05:11.770
So this one says, a function has access
to it's own local skull variables.

68
00:05:11.770 --> 00:05:17.180
And in this call back function,
we are gonna be testing that.

69
00:05:17.180 --> 00:05:19.670
So here, we have this function.

70
00:05:19.670 --> 00:05:21.370
And then we have a variable named inner.

71
00:05:21.370 --> 00:05:24.710
We set ACTUAL to name,
we call that function,

72
00:05:24.710 --> 00:05:27.250
and then we have this expect statement.

73
00:05:27.250 --> 00:05:34.230
So it's gonna be expect(ACTUAL
=== 'inner').to.be.true.

74
00:05:34.230 --> 00:05:40.400
So we want this to,
this conditional here to be true.

75
00:05:41.430 --> 00:05:44.220
So you could just actually type in true,
but that would be cheating.

76
00:05:45.280 --> 00:05:50.350
The way you wanna do is go through and
change these three question marks

77
00:05:51.900 --> 00:05:56.930
to what, it would be either be null or
undefined or some string.

78
00:05:58.250 --> 00:06:00.830
And so you go through and
then check your answers.

79
00:06:00.830 --> 00:06:05.218
You can,
here let's just make this one false.

80
00:06:05.218 --> 00:06:09.790
You save it.

81
00:06:09.790 --> 00:06:12.380
And then you go to your spec runner,
you refresh your spec runner,

82
00:06:12.380 --> 00:06:13.360
and it will show up.

83
00:06:13.360 --> 00:06:15.990
So we can see that this one didn't pass.

84
00:06:15.990 --> 00:06:23.030
And then if we want it to actually pass,
we'll just change it to what it is,

85
00:06:23.030 --> 00:06:28.220
we save it, and then we refresh the page,
and we see up here, can you guys see that?

86
00:06:28.220 --> 00:06:30.270
See up here that we have one pass.

87
00:06:30.270 --> 00:06:34.750
And this will show you the rest of
the ones that you need to change.

88
00:06:34.750 --> 00:06:38.780
And it has a little
description of the error here.

