WEBVTT

1
00:00:00.000 --> 00:00:03.630
[MUSIC]

2
00:00:03.630 --> 00:00:06.620
&gt;&gt; Bianca Gandolfo: Does anybody
have any questions about?

3
00:00:08.650 --> 00:00:09.230
Yeah, Mark?

4
00:00:09.230 --> 00:00:11.250
&gt;&gt; Mark: This one was in
the chat room at the beginning.

5
00:00:11.250 --> 00:00:14.077
So I'm not sure if they
answered it themselves, but

6
00:00:14.077 --> 00:00:18.840
what means tagline in an animal object,
like any string?

7
00:00:20.510 --> 00:00:21.861
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, it could be any string,

8
00:00:21.861 --> 00:00:23.140
it could be any string, so the top.

9
00:00:23.140 --> 00:00:26.532
&gt;&gt; Speaker 3: So no spot for animal
dating, that's what you were looking for.

10
00:00:26.532 --> 00:00:28.130
&gt;&gt; Bianca Gandolfo: What was that?

11
00:00:28.130 --> 00:00:30.730
&gt;&gt; Speaker 3: Your go to spot for
animal dating, that was the tagline?

12
00:00:30.730 --> 00:00:32.999
&gt;&gt; Bianca Gandolfo: Well it would
be like your user tagline, so

13
00:00:32.999 --> 00:00:34.639
on your profile I don't know,

14
00:00:34.639 --> 00:00:38.062
like under your name you could say like-
&gt;&gt; Mark: I'm the hottest sheep on

15
00:00:38.062 --> 00:00:38.607
the farm.

16
00:00:38.607 --> 00:00:39.440
&gt;&gt; Bianca Gandolfo: Yeah,
&gt;&gt; Mark: [LAUGH]

17
00:00:39.440 --> 00:00:40.285
&gt;&gt; Bianca Gandolfo: Something to

18
00:00:40.285 --> 00:00:42.981
that effect, something to that effect.

19
00:00:42.981 --> 00:00:46.599
So, like single sheep looking for

20
00:00:46.599 --> 00:00:51.920
love, something to that effect, okay.

21
00:00:51.920 --> 00:00:53.280
&gt;&gt; Mark: And other animals.

22
00:00:53.280 --> 00:00:55.030
&gt;&gt; Bianca Gandolfo: What?
&gt;&gt; Mark: And two other animals.

23
00:00:55.030 --> 00:00:58.716
&gt;&gt; Bianca Gandolfo: Yeah, and
two other sheep, sometimes cows.

24
00:00:58.716 --> 00:01:02.045
&gt;&gt; Mark: [LAUGH]
&gt;&gt; Bianca Gandolfo: Just kidding, so

25
00:01:02.045 --> 00:01:05.250
that's just gonna be a solution.

26
00:01:05.250 --> 00:01:10.220
I wanna thank Katrina, who's my
awesome lead TA at Hack Reactor for

27
00:01:10.220 --> 00:01:11.130
providing the solutions.

28
00:01:12.350 --> 00:01:14.580
She is awesome.

29
00:01:14.580 --> 00:01:18.610
Okay, so first thing is we're just
gonna create an empty animal object.

30
00:01:18.610 --> 00:01:23.770
So we're just using the object literal
notation, storing in a variable.

31
00:01:23.770 --> 00:01:27.570
We're giving it a name,
so animal.username.

32
00:01:27.570 --> 00:01:32.020
We're gonna call it Mittens and it's gonna
have a tagline, which is pet me, and

33
00:01:32.020 --> 00:01:35.490
so this is dot notation,
this is bracket notation.

34
00:01:35.490 --> 00:01:37.670
Again, at this point
they're interchangeable.

35
00:01:39.040 --> 00:01:40.910
So here we're creating an array.

36
00:01:40.910 --> 00:01:44.990
I know we haven't gotten to arrays, but
I'm assuming that you've used them before.

37
00:01:44.990 --> 00:01:52.100
An empty array, and then we're assigning
that empty array to animal.noises.

38
00:01:52.100 --> 00:01:56.880
So when we console log our,
one second here.

39
00:01:56.880 --> 00:02:02.100
When we console log our animal object, we

40
00:02:02.100 --> 00:02:06.400
see in our console that we have an object,
should print out something like this.

41
00:02:06.400 --> 00:02:10.850
We have an empty array with a tag line,
and a user name.

42
00:02:10.850 --> 00:02:12.900
Thumbs, did everyone get that far?

43
00:02:15.220 --> 00:02:16.266
Is everyone being honest?

44
00:02:16.266 --> 00:02:22.281
Cool, awesome, thank you everyone.

45
00:02:22.281 --> 00:02:27.553
So, for the counting one, we are going to

46
00:02:27.553 --> 00:02:33.890
loop through all of
the properties in the object.

47
00:02:33.890 --> 00:02:37.370
So we have key and every time we loop
we're gonna increment our counter.

48
00:02:37.370 --> 00:02:44.000
So count plus plus is the same as
saying count equals count plus 1,

49
00:02:44.000 --> 00:02:48.899
it's just a short hand, and
here we're gonna do that check

50
00:02:50.450 --> 00:02:53.800
I'm gonna recommend that we
always use triple equals.

51
00:02:56.760 --> 00:02:57.490
Yeah?
&gt;&gt; Speaker 4: Can you explain

52
00:02:57.490 --> 00:02:58.520
that a little bit?

53
00:02:58.520 --> 00:03:00.870
That's one thing that I've
never really understood.

54
00:03:00.870 --> 00:03:03.990
&gt;&gt; Bianca Gandolfo: Triple
equals versus double equals?

55
00:03:03.990 --> 00:03:10.292
So triple equals is a strict check, and
then double equals is more lenient.

56
00:03:10.292 --> 00:03:18.030
So for example, if we do string one
double equals one might return through.

57
00:03:18.030 --> 00:03:22.790
Even though that might not be
what you are looking for, and

58
00:03:22.790 --> 00:03:27.450
then, because Java Script has some weird
like falsy, truthy boolean things.

59
00:03:27.450 --> 00:03:31.370
It's better just to always do
a strict check with the three equals.

60
00:03:32.810 --> 00:03:35.340
&gt;&gt; Speaker 4: Could you
argue that in some cases

61
00:03:35.340 --> 00:03:37.090
you'd wanna use double equals because.

62
00:03:37.090 --> 00:03:37.590
&gt;&gt; Bianca Gandolfo: Yeah.

63
00:03:38.720 --> 00:03:42.110
&gt;&gt; Speaker 4: You might not be sure what
the value is, or something like that?

64
00:03:42.110 --> 00:03:44.020
&gt;&gt; Bianca Gandolfo: Yeah,
I mean hopefully.

65
00:03:44.020 --> 00:03:46.795
&gt;&gt; Speaker 4: Maybe if you were
developing an app should you try to force

66
00:03:46.795 --> 00:03:49.250
yourself to using triple
equals all the time, and.

67
00:03:49.250 --> 00:03:50.434
&gt;&gt; Bianca Gandolfo: Yeah, you.
&gt;&gt; Speaker 4: And ensure that you know

68
00:03:50.434 --> 00:03:51.348
what this-
&gt;&gt; Bianca Gandolfo: Even though

69
00:03:51.348 --> 00:03:53.930
JavaScript's really flexible,
you should try to be strict.

70
00:03:53.930 --> 00:03:54.640
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Bianca Gandolfo: And kinda

71
00:03:54.640 --> 00:03:56.140
know what your expecting.

72
00:03:56.140 --> 00:03:58.980
You don't want your app to give you
something that you're not expecting.

73
00:03:58.980 --> 00:04:00.310
&gt;&gt; Speaker 4: Yeah, that makes sense.

74
00:04:00.310 --> 00:04:02.770
&gt;&gt; Bianca Gandolfo: Cuz who
knows the consequences of that?

75
00:04:02.770 --> 00:04:04.130
So try not to.

76
00:04:04.130 --> 00:04:08.140
If you really need to for some reason,
then if you're working with some

77
00:04:08.140 --> 00:04:09.990
other code that you don't
really have control over, and

78
00:04:09.990 --> 00:04:12.060
you know what you're doing, yeah.

79
00:04:13.170 --> 00:04:14.750
&gt;&gt; Speaker 4: Thanks.
&gt;&gt; Bianca Gandolfo: Mm-hm?

80
00:04:14.750 --> 00:04:18.300
&gt;&gt; Speaker 5: Some of the type conversions
can be variable on how the browser

81
00:04:18.300 --> 00:04:21.153
manufacturer implements it as well,
so you might not have the same-

82
00:04:21.153 --> 00:04:21.790
&gt;&gt; Bianca Gandolfo: Mm-hm, and

83
00:04:21.790 --> 00:04:22.590
that's also a good point.

84
00:04:22.590 --> 00:04:24.360
&gt;&gt; Speaker 5: Same
behavior across browsers.

85
00:04:24.360 --> 00:04:24.860
&gt;&gt; Bianca Gandolfo: Absolutely.

86
00:04:26.200 --> 00:04:29.960
&gt;&gt; Mark: I just wanted to clarify
something, that the variable returns from

87
00:04:29.960 --> 00:04:34.180
those for-in loop is always the name of
the property, not the property itself.

88
00:04:35.410 --> 00:04:35.910
Is that correct?

89
00:04:35.910 --> 00:04:41.180
&gt;&gt; Bianca Gandolfo: The variable
return from the for-in loop.

90
00:04:41.180 --> 00:04:43.990
Well, there's no variable
here being returned, for

91
00:04:43.990 --> 00:04:48.320
example, if I return the variable here-
&gt;&gt; Mark: So what key gets set to there in

92
00:04:48.320 --> 00:04:52.757
the for-in
&gt;&gt; Bianca Gandolfo: What key is it any

93
00:04:52.757 --> 00:04:53.910
given moment?

94
00:04:53.910 --> 00:04:58.370
&gt;&gt; Mark: Yeah, it's the name of
the property, not the property itself.

95
00:04:58.370 --> 00:05:01.790
&gt;&gt; Bianca Gandolfo: Yeah, so it's
the property so we have it like a property

96
00:05:01.790 --> 00:05:05.990
name and then a property value, and so the
key is always gonna be the property name.

97
00:05:05.990 --> 00:05:11.990
If you think of an object as like a filing
cabinet or a some language like python

98
00:05:11.990 --> 00:05:17.200
called them dictionaries, you can call it
dictionary or a hash, you can think of

99
00:05:17.200 --> 00:05:22.230
it as a filing cabinet where we have
the files and then there's a label.

100
00:05:22.230 --> 00:05:26.740
So the label in which we're gonna look up,
our files, is gonna be the property name,

101
00:05:26.740 --> 00:05:30.210
and then what's contained within
those folders is gonna be the values.

102
00:05:30.210 --> 00:05:35.080
So for example if you want to look up
the user name in your filing cabinet.

103
00:05:35.080 --> 00:05:37.490
You would have to say,
filingcabinet.username, so

104
00:05:37.490 --> 00:05:41.080
that means you're gonna be opening
the filing cabinet, looking through,

105
00:05:41.080 --> 00:05:45.390
selecting that file who's tab, says.

106
00:05:45.390 --> 00:05:48.230
I don't know if people even know what
filing cabinets look like anymore,

107
00:05:48.230 --> 00:05:53.120
but whose tab says username, and
you pull out that file and you open it.

108
00:05:53.120 --> 00:05:55.010
What's contained in it is the value,

109
00:05:55.010 --> 00:05:58.460
and that's like the metaphor I
like to think of for an object.

110
00:05:59.800 --> 00:06:03.750
So, and the key would be the property
name, which is that tab.

111
00:06:11.130 --> 00:06:11.720
Cool, awesome.

112
00:06:11.720 --> 00:06:15.380
&gt;&gt; Speaker 6: I just wanted to
make a comment on equals equals,

113
00:06:15.380 --> 00:06:19.046
that's basically allowing
typical version and

114
00:06:19.046 --> 00:06:23.645
Cal Simpson's new you don't
know JavaScript book series.

115
00:06:23.645 --> 00:06:24.532
&gt;&gt; Bianca Gandolfo: Mm-hm.
&gt;&gt; Speaker 6: He covers a lot of

116
00:06:24.532 --> 00:06:25.740
type origin.

117
00:06:25.740 --> 00:06:30.210
In JavaScript, in his fourth book in
the series called Types and Grammar.

118
00:06:30.210 --> 00:06:30.900
&gt;&gt; Bianca Gandolfo: Cool.
&gt;&gt; Speaker 6: Its like,

119
00:06:30.900 --> 00:06:35.258
a good place to go if you want to
learn the ins and outs of coercion.

120
00:06:35.258 --> 00:06:41.227
&gt;&gt; Bianca Gandolfo: Awesome, cool.

121
00:06:41.227 --> 00:06:44.610
So back to the exercise,
/ai we have this for loop, and

122
00:06:44.610 --> 00:06:47.710
here we're going to count excuse me.

123
00:06:47.710 --> 00:06:52.190
We're gonna count how many times
we're looping through, and

124
00:06:52.190 --> 00:06:53.960
we know that whatever this number is,

125
00:06:53.960 --> 00:06:57.230
it's gonna be the number of properties
we have in our object, right?

126
00:06:58.600 --> 00:07:01.740
So every time we loop we're
gonna increment the counter.

127
00:07:01.740 --> 00:07:04.020
We're also gonna do
this if-else statement.

128
00:07:04.020 --> 00:07:06.320
So it's always gonna check if the key,

129
00:07:06.320 --> 00:07:09.220
that property name,
equals the string username.

130
00:07:09.220 --> 00:07:13.607
If so, it's gonna come into this block and
console.log.

131
00:07:13.607 --> 00:07:15.490
Hi my name is and then name.

132
00:07:15.490 --> 00:07:20.160
And so notice here we're
accessing the value at that key

133
00:07:20.160 --> 00:07:23.840
versus on this line we're
accessing the property name.

134
00:07:23.840 --> 00:07:25.250
So, important thing and

135
00:07:25.250 --> 00:07:29.340
we're doing bracket notation
again because key is a variable.

136
00:07:29.340 --> 00:07:34.850
And just remember in loops when you have
like var i equals zero in some loops,

137
00:07:34.850 --> 00:07:37.590
or key those are always
gonna be variables.

138
00:07:37.590 --> 00:07:41.360
And so that should be a que if you
are looping that you're gonna be using

139
00:07:41.360 --> 00:07:44.240
the bracket notation and
not that dot notation.

140
00:07:45.410 --> 00:07:48.800
So in here the same thing
except if it's a tag line

141
00:07:50.830 --> 00:07:55.920
you I like to say, and
then animal key in this case it's pet me.

142
00:07:58.170 --> 00:08:02.730
So a follow up question is
what happens if you return

143
00:08:02.730 --> 00:08:07.440
hi my name is plus whatever instead
of using console log inside the loop.

144
00:08:10.260 --> 00:08:11.720
What's gonna happen.

145
00:08:11.720 --> 00:08:13.200
Anyone try that out?

146
00:08:13.200 --> 00:08:14.000
&gt;&gt; Speaker 6: Me.
&gt;&gt; Bianca Gandolfo: Did you get it

147
00:08:14.000 --> 00:08:15.080
to get there?

148
00:08:15.080 --> 00:08:16.080
Who got to that point?

149
00:08:18.460 --> 00:08:22.770
Okay, so
can I see thumbs on who got to this part?

150
00:08:24.070 --> 00:08:25.878
Okay so most people didn't okay.

151
00:08:28.438 --> 00:08:30.141
&gt;&gt; Bianca Gandolfo: Okay.

152
00:08:30.141 --> 00:08:35.450
Well, the answer is that when you put
a return statement inside a loop,

153
00:08:35.450 --> 00:08:38.688
actually I don't know if you can even put
a return statement outside of a function.

154
00:08:38.688 --> 00:08:40.821
&gt;&gt; Speaker 5: So that's,
there's exceptions.

155
00:08:40.821 --> 00:08:45.240
&gt;&gt; Bianca Gandolfo: Okay cool, so but
if this was inside of a function and

156
00:08:45.240 --> 00:08:47.830
you put a return statement inside
the loop what it would do,

157
00:08:47.830 --> 00:08:51.390
it would immediately stop looping and
return out of the function.

158
00:08:51.390 --> 00:08:55.400
We'll get into more detail about that when
we get to functions in a few minutes.

159
00:08:55.400 --> 00:08:59.790
But that's something important,
that's why I have you console.logging and

160
00:08:59.790 --> 00:09:02.120
not returning because
it would stop the loop.

