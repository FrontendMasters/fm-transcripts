WEBVTT

1
00:00:00.198 --> 00:00:03.868
[MUSIC]

2
00:00:03.868 --> 00:00:07.018
&gt;&gt; Bianca Gandolfo: So that second
line box square bracket size equals

3
00:00:07.018 --> 00:00:07.900
nine.
&gt;&gt; Speaker 2: Mm-hm.

4
00:00:07.900 --> 00:00:08.770
&gt;&gt; Bianca Gandolfo: There's no way to get

5
00:00:08.770 --> 00:00:13.292
that value out by using indexing with

6
00:00:13.292 --> 00:00:16.120
integers.
&gt;&gt; Speaker 2: True.

7
00:00:16.120 --> 00:00:20.890
True, because the only way you can get
the value nine out Is by looking it

8
00:00:20.890 --> 00:00:25.620
up by the property name, which is size,
which is not number, right?

9
00:00:26.630 --> 00:00:27.710
So.
&gt;&gt; Bianca Gandolfo: So arrays can be

10
00:00:27.710 --> 00:00:31.310
accessed by index number
as well as property names?

11
00:00:31.310 --> 00:00:31.810
Yep.

12
00:00:33.180 --> 00:00:41.720
So here I am using dot notation,
box dot size, box bracket size, right?

13
00:00:41.720 --> 00:00:42.690
If you look at box.

14
00:00:42.690 --> 00:00:45.010
And then we have our numerical
indices as well right?

15
00:00:45.010 --> 00:00:50.130
We have meow and we also have woo hoo.
&gt;&gt; Speaker 2: Isn't it better to say

16
00:00:50.130 --> 00:00:55.760
arrays can have can have properties

17
00:00:55.760 --> 00:01:00.300
and indices?
&gt;&gt; Bianca Gandolfo: I'm

18
00:01:00.300 --> 00:01:03.230
not sure.
&gt;&gt; Speaker 2: Is box an object that has

19
00:01:03.230 --> 00:01:08.130
an array as a property, or is it
an array that has a object array sized.

20
00:01:09.790 --> 00:01:12.050
&gt;&gt; Bianca Gandolfo: Box is an object.

21
00:01:13.910 --> 00:01:16.990
It's an array, but
an array is also an object.

22
00:01:16.990 --> 00:01:19.400
So it's both an array and an object.

23
00:01:19.400 --> 00:01:24.650
And the thing that's special about
arrays is not really numerical indexes,

24
00:01:24.650 --> 00:01:27.850
it's really the properties and
the methods that come with it.

25
00:01:27.850 --> 00:01:33.150
So that dot length property is
something that makes arrays different.

26
00:01:33.150 --> 00:01:36.610
And based on the dot length property
you can calculate a lot of things.

27
00:01:36.610 --> 00:01:42.260
So if you have an object that's
keeping track of the length, and

28
00:01:42.260 --> 00:01:48.050
then you have the array methods
that are working off of the length.

29
00:01:48.050 --> 00:01:49.730
Then you have an array.

30
00:01:49.730 --> 00:01:54.001
So you can create your own array just by
having that magical length property that's

31
00:01:54.001 --> 00:01:55.538
keeping track of the length.

32
00:01:57.738 --> 00:02:00.513
And so, how the length property works,

33
00:02:00.513 --> 00:02:05.002
it's only going to keep track of
the highest numerical indices,

34
00:02:05.002 --> 00:02:09.260
so it's going to ignore size,
it's going to ignore itself.

35
00:02:09.260 --> 00:02:13.510
Length itself is a property, right,
see we have this dot notation, box.length?

36
00:02:13.510 --> 00:02:16.480
You know it's not counting that,

37
00:02:16.480 --> 00:02:21.500
it's not counting box.push,
pop, things like that.

38
00:02:22.760 --> 00:02:26.746
So it's only going to be keeping
track of those numerical indices, and

39
00:02:26.746 --> 00:02:29.669
based on the length and
the numerical indecencies,

40
00:02:29.669 --> 00:02:33.657
those methods can do cool things with
the data that we have stored in this

41
00:02:33.657 --> 00:02:37.537
array slash object.
&gt;&gt; Speaker 3: So

42
00:02:37.537 --> 00:02:42.020
if box is object,
then length would be three.

43
00:02:43.260 --> 00:02:44.720
is that right?
&gt;&gt; Bianca Gandolfo: Well,

44
00:02:44.720 --> 00:02:47.370
objects don't have a length property.
&gt;&gt; Speaker 3: Yeah.

45
00:02:51.490 --> 00:02:52.930
&gt;&gt; Speaker 2: So because arrays are

46
00:02:52.930 --> 00:02:58.870
objects, let's say you have an empty array
you're assigning meow to the first index?

47
00:02:58.870 --> 00:03:04.240
Behind the scenes does it add a property
called zero and then a value called

48
00:03:04.240 --> 00:03:07.340
meow or whatever you're saying it is.
&gt;&gt; Bianca Gandolfo: Yeah,

49
00:03:07.340 --> 00:03:08.430
that's a perfect way to think of it.

50
00:03:08.430 --> 00:03:10.700
And that's kind of why
I draw it like this.

51
00:03:10.700 --> 00:03:11.940
You can kind of see.

52
00:03:11.940 --> 00:03:15.000
This is kind of how I think about it,
Is that it's just an object and

53
00:03:15.000 --> 00:03:16.660
it has these properties on it.

54
00:03:16.660 --> 00:03:18.480
And then it has the length property and

55
00:03:18.480 --> 00:03:23.580
a bunch of methods that give us
some powerful functionality.

56
00:03:23.580 --> 00:03:25.470
Like we can sort things,
we can reverse it.

57
00:03:25.470 --> 00:03:31.758
Slice, all those things that
you can't do with an object.

58
00:03:33.938 --> 00:03:35.690
Yeah.
&gt;&gt; Speaker 2: So

59
00:03:35.690 --> 00:03:40.890
when you're console logging you're
actually logging an object.

60
00:03:40.890 --> 00:03:43.380
So that's why it shows the size.
&gt;&gt; Bianca Gandolfo: That's why we

61
00:03:43.380 --> 00:03:45.220
can use this for, this other for loop.

62
00:03:46.550 --> 00:03:54.920
Remember this, the for and loop will
work with box even if it's an array.

63
00:03:54.920 --> 00:04:00.624
And that's because, cuz it's an object.
&gt;&gt; Speaker 2: In

64
00:04:00.624 --> 00:04:04.900
that case you do pick up [INAUDIBLE].
&gt;&gt; Bianca Gandolfo: Yes in that case you

65
00:04:04.900 --> 00:04:08.190
do because you just gonna be looping
through all of the property names.

66
00:04:08.190 --> 00:04:13.838
That includes numerical properties as
well as named string properties yeah.

67
00:04:18.339 --> 00:04:19.079
Oops.

68
00:04:20.498 --> 00:04:21.918
Cool.
You had a question?

69
00:04:21.918 --> 00:04:23.834
&gt;&gt; Speaker 4: There was a question on why

70
00:04:23.834 --> 00:04:27.151
you would want to add
a property to the array.

71
00:04:29.190 --> 00:04:30.498
&gt;&gt; Bianca Gandolfo: For different reasons.

72
00:04:30.498 --> 00:04:32.078
This will.

73
00:04:34.878 --> 00:04:39.860
It depends, you can add methods to it,
to the prototype and things.

74
00:04:41.260 --> 00:04:45.213
That will add,
you can extend functionality that way.

75
00:04:45.213 --> 00:04:46.911
You can.

76
00:04:49.350 --> 00:04:50.910
I don't know.

77
00:04:50.910 --> 00:04:52.300
Mm hm?
&gt;&gt; Speaker 4: And

78
00:04:52.300 --> 00:04:56.120
then I guess following up from that,
another question I saw is if I have

79
00:04:56.120 --> 00:05:01.780
an object with an attribute
called length push pop et cetera,

80
00:05:01.780 --> 00:05:04.740
it will be an array?
&gt;&gt; Bianca Gandolfo: Yeah.

81
00:05:04.740 --> 00:05:09.301
So if the length property is keeping
track of the numerical indices,

82
00:05:09.301 --> 00:05:11.659
every time you add something to it,

83
00:05:11.659 --> 00:05:17.544
then yes.
&gt;&gt; Speaker 4: Do

84
00:05:17.544 --> 00:05:22.597
we use object notation and
you add those properties to it,

85
00:05:22.597 --> 00:05:26.130
it's not going to make it an array.
&gt;&gt; Bianca Gandolfo: But,

86
00:05:26.130 --> 00:05:28.160
you can mimic array functionality.
&gt;&gt; Speaker 4: But

87
00:05:28.160 --> 00:05:30.770
you have to build that all into your-
&gt;&gt; Speaker 2: Well,

88
00:05:30.770 --> 00:05:31.680
that's what he was saying.

89
00:05:31.680 --> 00:05:35.170
If you do build it out,
they're both objects, right.

90
00:05:35.170 --> 00:05:37.130
One is native, one is not.
&gt;&gt; Bianca Gandolfo: The only hard

91
00:05:37.130 --> 00:05:39.980
part would be keeping
track of the numerical.

92
00:05:39.980 --> 00:05:45.116
So you'd have to have some way to know
whenever you're adding a property to

93
00:05:45.116 --> 00:05:50.730
the object so
that you could adjust the length property.

94
00:05:50.730 --> 00:05:54.260
So you'd have to user a getter or
setter or something.

95
00:05:54.260 --> 00:05:55.142
&gt;&gt; Speaker 4: Adding the length property

96
00:05:55.142 --> 00:05:56.190
to that doesn't make an array.

97
00:05:56.190 --> 00:05:59.990
You're not gonna pick up
automatically the pop push slice.

98
00:05:59.990 --> 00:06:00.640
&gt;&gt; Speaker 2: We have to act

99
00:06:00.640 --> 00:06:03.270
he has to build all that up.
&gt;&gt; Speaker 4: He has to build all that up.

100
00:06:03.270 --> 00:06:05.210
To make a fall that functionality.
&gt;&gt; Bianca Gandolfo: Yeah.

101
00:06:05.210 --> 00:06:06.920
Right.
It's little more complicated, but.

102
00:06:06.920 --> 00:06:09.134
Yeah.
Cool.

103
00:06:09.134 --> 00:06:11.742
Sweet.

104
00:06:11.742 --> 00:06:17.888
All right, what about this?

105
00:06:23.168 --> 00:06:24.108
What's this gonna log?

106
00:06:30.069 --> 00:06:31.140
Is this even gonna work?
&gt;&gt; Speaker 2: No.

107
00:06:32.510 --> 00:06:33.770
&gt;&gt; Bianca Gandolfo: Why?

108
00:06:34.950 --> 00:06:37.009
&gt;&gt; Speaker 2: Cuz the length is in quotes.

109
00:06:38.110 --> 00:06:40.364
Was looking for that.
&gt;&gt; Bianca Gandolfo: Because length is

110
00:06:40.364 --> 00:06:40.930
in quotes?

111
00:06:43.570 --> 00:06:44.340
What is length?

112
00:06:44.340 --> 00:06:49.982
So length in quotes, again remember
it's the same as dot notation, right?

113
00:06:49.982 --> 00:06:52.290
True?

114
00:06:52.290 --> 00:06:55.000
Length in quotes the same as dot notation,
thumbs on that?

115
00:06:55.000 --> 00:06:56.450
Cool.

116
00:06:56.450 --> 00:06:57.469
So the length is 4.

117
00:06:59.600 --> 00:07:03.370
Right, and that goes,
again to how length is working.

118
00:07:03.370 --> 00:07:07.280
So length is keeping
track of the last index.

119
00:07:08.460 --> 00:07:15.785
It's not keeping track of the number
of actual values in the array.

120
00:07:15.785 --> 00:07:20.920
Mm hm?
&gt;&gt; Speaker 2: They wanted

121
00:07:20.920 --> 00:07:24.850
me to ask you that in theory you could get
away with never using dot notation and

122
00:07:24.850 --> 00:07:27.360
only using bracket notation.
&gt;&gt; Bianca Gandolfo: True,

123
00:07:27.360 --> 00:07:29.560
you could only use bracket notation.

124
00:07:30.640 --> 00:07:31.860
It's just more to type.

125
00:07:36.480 --> 00:07:37.960
Cool, what about this?

126
00:07:42.139 --> 00:07:49.060
What if I change this?
&gt;&gt; Speaker 2: Two.

127
00:07:49.060 --> 00:07:50.060
&gt;&gt; Bianca Gandolfo: Undefined because

128
00:07:50.060 --> 00:07:53.950
length does not have quotes around it.
&gt;&gt; Speaker 2: That's tricky.

129
00:07:53.950 --> 00:07:55.480
That's not fair.
&gt;&gt; Bianca Gandolfo: I know.

130
00:07:55.480 --> 00:07:58.040
You guys should just know that
I'm tricking you the whole time.

131
00:07:59.120 --> 00:07:59.990
And look out for that.

132
00:07:59.990 --> 00:08:01.360
And think about those rules.

133
00:08:01.360 --> 00:08:04.560
And as you're coding you should be
actively thinking about the rules.

134
00:08:04.560 --> 00:08:10.120
Is this, series of characters,
is this a string,

135
00:08:10.120 --> 00:08:14.250
is this a variable, is it
an expression that needs to evaluated.

136
00:08:14.250 --> 00:08:17.460
You should always be thinking that and
keeping track of what it is.

137
00:08:17.460 --> 00:08:20.240
And then, if it is a variable, you should
also be keeping track of what that

138
00:08:20.240 --> 00:08:24.790
variable can represent in
different scenarios all the time.

139
00:08:25.880 --> 00:08:27.140
Can't just take it for granted.
&gt;&gt; Speaker 2: Yeah,

140
00:08:28.340 --> 00:08:30.491
can you go back one slide again?
&gt;&gt; Bianca Gandolfo: Sure.

141
00:08:34.891 --> 00:08:35.881
&gt;&gt; Speaker 2: What did you say at the very

142
00:08:35.881 --> 00:08:37.060
tail end of this explanation?

143
00:08:37.060 --> 00:08:41.080
Is that all it looks at the last-
&gt;&gt; Bianca Gandolfo: Yeah it looks at

144
00:08:41.080 --> 00:08:47.700
the last, the highest,
numeric index and it adds one.

145
00:08:47.700 --> 00:08:53.500
Because a length is always plus one.
&gt;&gt; Speaker 2: Because it's zero based.

146
00:08:53.500 --> 00:08:54.040
&gt;&gt; Bianca Gandolfo: Because it's zero

147
00:08:54.040 --> 00:08:55.155
based, absolutely.

148
00:08:55.155 --> 00:08:57.656
Mm hm.
&gt;&gt; Speaker 2: That's weird.

149
00:08:57.656 --> 00:08:59.737
&gt;&gt; Bianca Gandolfo: That's programming.

150
00:08:59.737 --> 00:09:03.239
[LAUGH]
&gt;&gt; Speaker 2: [COUGH]

151
00:09:03.239 --> 00:09:04.020
&gt;&gt; Bianca Gandolfo: Yeah.

152
00:09:04.020 --> 00:09:07.305
Yeah, I tell some of my students
you're my number zero student.

153
00:09:07.305 --> 00:09:08.550
&gt;&gt; Speaker 2: [LAUGH]

154
00:09:08.550 --> 00:09:11.770
&gt;&gt; Bianca Gandolfo: Let's see.

155
00:09:11.770 --> 00:09:12.820
So we did that one.

156
00:09:12.820 --> 00:09:15.320
And then, here.

157
00:09:15.320 --> 00:09:23.961
So what if we- What if we wanted
to look at the last index.

158
00:09:27.440 --> 00:09:30.130
Of our array?
&gt;&gt; Speaker 4: Minus 1.

159
00:09:30.130 --> 00:09:31.230
&gt;&gt; Speaker 2: Minus 1.

160
00:09:31.230 --> 00:09:32.309
&gt;&gt; Bianca Gandolfo: Like this?

161
00:09:36.130 --> 00:09:36.930
&gt;&gt; Speaker 2: Just the length?

162
00:09:36.930 --> 00:09:40.520
Just minus 1.
&gt;&gt; Bianca Gandolfo: Actually that only

163
00:09:40.520 --> 00:09:41.600
works with slice.

164
00:09:41.600 --> 00:09:42.604
You're thinking of slice.

165
00:09:42.604 --> 00:09:44.440
So.
&gt;&gt; Speaker 4: Box.length?

166
00:09:44.440 --> 00:09:46.575
&gt;&gt; Bianca Gandolfo: Box.length minus 1,

167
00:09:46.575 --> 00:09:47.562
totally.

168
00:09:47.562 --> 00:09:52.060
So box.length, right,
is gonna be four, and

169
00:09:52.060 --> 00:09:56.580
then our last index is three as we can
see here, so we need to subtract one.

170
00:09:56.580 --> 00:10:00.330
And then back to the thing about the
bracket notation being able to evaluate

171
00:10:00.330 --> 00:10:04.260
expressions, this is a perfect
example of when you'd wanna do that.

172
00:10:04.260 --> 00:10:07.930
So here we're doing a property look up and
we're doing math.

173
00:10:07.930 --> 00:10:11.030
So all those things are happening and
those are things that you cannot do in

174
00:10:11.030 --> 00:10:14.220
dot notation, and it just looks
weird right like look at this.

175
00:10:15.430 --> 00:10:17.020
Right, that just doesn't look right.

