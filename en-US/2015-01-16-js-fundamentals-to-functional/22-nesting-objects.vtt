WEBVTT

1
00:00:00.000 --> 00:00:04.019
[MUSIC]

2
00:00:04.019 --> 00:00:06.962
&gt;&gt; Bianca Gandolfo: So, we kind of
play with this a little bit, but

3
00:00:06.962 --> 00:00:11.494
I wanna talk more in depth about
dealing with nested data structures and

4
00:00:11.494 --> 00:00:16.349
how to access them, and how to think
about them in a way that makes it easier.

5
00:00:16.349 --> 00:00:21.280
You're gonna deal a lot with nested data
structures, usually in the form of JSON.

6
00:00:21.280 --> 00:00:24.580
Which is how you're probably gonna get
your data for your back end or your API.

7
00:00:26.740 --> 00:00:30.010
So here's just an example
of how you get started.

8
00:00:30.010 --> 00:00:35.006
So we start with a box, our box that
we've learned to love over the day,

9
00:00:35.006 --> 00:00:37.858
and in the box, we can have an inner box.

10
00:00:37.858 --> 00:00:47.060
An inner box is a property inbox that
contains a value which is also an object.

11
00:00:47.060 --> 00:00:52.715
And so, this is a nested object.
&gt;&gt; Bianca Gandolfo: And

12
00:00:52.715 --> 00:00:55.570
the rules are the same here.

13
00:00:55.570 --> 00:00:59.960
So we can also use bracket notation if we
wanted to, and our results are the same.

14
00:01:02.070 --> 00:01:05.600
And then if we wanted to add
a property to that innerBox,

15
00:01:05.600 --> 00:01:08.330
simply what we do is we
continue the pattern.

16
00:01:09.370 --> 00:01:13.590
So first we access box, right.

17
00:01:13.590 --> 00:01:20.230
So we access the whole box, right,
which would be this whole object and

18
00:01:20.230 --> 00:01:24.110
then we access the property value, right?

19
00:01:24.110 --> 00:01:29.830
So box('innerBox') is going to
evaluate to a value which is

20
00:01:30.880 --> 00:01:35.500
the value at that property which
happens to be an entire object.

21
00:01:37.200 --> 00:01:42.989
And then from there It's
creating a property full,

22
00:01:42.989 --> 00:01:47.727
and it's assigning it the value true, and

23
00:01:47.727 --> 00:01:51.425
that's where we get that value.

24
00:01:55.085 --> 00:01:57.785
&gt;&gt; Bianca Gandolfo: Does that make sense?

25
00:01:57.785 --> 00:02:00.725
Thumbs on that?

26
00:02:00.725 --> 00:02:01.350
Sideways.

27
00:02:01.350 --> 00:02:04.049
Do you have a question about it?
&gt;&gt; Speaker 2: What are we doing?

28
00:02:04.049 --> 00:02:05.718
You're dusting what?
&gt;&gt; Bianca Gandolfo: We're putting

29
00:02:05.718 --> 00:02:11.431
an object inside of our object.
&gt;&gt; Speaker 2: How about why?

30
00:02:11.431 --> 00:02:15.750
Why?
&gt;&gt; Bianca Gandolfo: Just like,

31
00:02:15.750 --> 00:02:18.460
you're going to be dealing with
nested data structures a lot.

32
00:02:18.460 --> 00:02:23.400
And you're gonna be creating them, moving
them around, getting data out of them,

33
00:02:23.400 --> 00:02:26.100
organizing that data in
a way that's meaningful for

34
00:02:26.100 --> 00:02:29.090
your application.
&gt;&gt; Speaker 2: So that's similar to having

35
00:02:29.090 --> 00:02:31.550
an array of objects though?
&gt;&gt; Bianca Gandolfo: Yep, so

36
00:02:31.550 --> 00:02:33.490
you can have an array of objects,

37
00:02:33.490 --> 00:02:37.790
you can have an object with an array
that contains more objects.

38
00:02:37.790 --> 00:02:41.800
And you're gonna find that, you're gonna
have these super nested data structures

39
00:02:41.800 --> 00:02:43.290
that you're gonna get from your API, and

40
00:02:43.290 --> 00:02:48.910
then you're gonna have to turn that
into DOM and make it a user interface.

41
00:02:48.910 --> 00:02:52.310
But first you need to learn how to deal
with a nested data structure before

42
00:02:52.310 --> 00:02:56.140
you can even get there.
&gt;&gt; Speaker 3: Is there

43
00:02:56.140 --> 00:02:58.660
on a lot of the more complex.

44
00:02:58.660 --> 00:03:02.060
Let's say, nested structures.

45
00:03:02.060 --> 00:03:02.780
Is there any way to,

46
00:03:04.130 --> 00:03:06.090
because I see a wall of text.
&gt;&gt; Bianca Gandolfo: Mm-hm.

47
00:03:06.090 --> 00:03:06.875
&gt;&gt; Speaker 3: That's what JSON.

48
00:03:06.875 --> 00:03:07.400
&gt;&gt; Bianca Gandolfo: Mm-hm.

49
00:03:07.400 --> 00:03:08.390
&gt;&gt; Speaker 3: Is there a way to

50
00:03:08.390 --> 00:03:12.330
run something to see
what that structure is?

51
00:03:12.330 --> 00:03:14.190
Without the values in it.

52
00:03:14.190 --> 00:03:18.560
Typically it's a bunch of v's or is that?
&gt;&gt; Bianca Gandolfo: Right, so

53
00:03:18.560 --> 00:03:20.380
if you're getting it from an API,

54
00:03:20.380 --> 00:03:25.040
hopefully the documentation might
have some information on that.

55
00:03:25.040 --> 00:03:28.350
If you have an end point for the API,
or you're receiving the data.

56
00:03:28.350 --> 00:03:30.420
You could actually just
directly go to that URL,

57
00:03:30.420 --> 00:03:33.180
and it will print out the data for
you directly.

58
00:03:33.180 --> 00:03:36.630
Then there is Chrome extensions that
sort of pre-defy it to indent it and

59
00:03:36.630 --> 00:03:37.560
stuff.
&gt;&gt; Speaker 3: Okay so

60
00:03:37.560 --> 00:03:39.250
the pre defy of it.
&gt;&gt; Bianca Gandolfo: Yeah.

61
00:03:39.250 --> 00:03:40.400
&gt;&gt; Speaker 3: But it's like a tree like

62
00:03:40.400 --> 00:03:41.240
structure.
&gt;&gt; Bianca Gandolfo: Yeah, and

63
00:03:41.240 --> 00:03:44.030
so you can look at it.
&gt;&gt; Speaker 3: Okay.

64
00:03:45.390 --> 00:03:46.490
Thanks.
&gt;&gt; Bianca Gandolfo: Yeah,

65
00:03:46.490 --> 00:03:49.780
great question though.

66
00:03:51.440 --> 00:03:53.960
Cool.
So, and again the rules don't change,

67
00:03:53.960 --> 00:03:57.000
you're going to also use dot notation
right after using bracket notation,

68
00:03:57.000 --> 00:03:59.160
it's still the same.

69
00:04:01.260 --> 00:04:04.080
So, what is this gonna be?

70
00:04:04.080 --> 00:04:05.751
What is this gonna look like?

71
00:04:05.751 --> 00:04:13.163
box.innerbox?
&gt;&gt; Speaker 2: Squiggly line,

72
00:04:13.163 --> 00:04:20.468
full, pull and true?
&gt;&gt; Bianca Gandolfo: Does everyone agree?

73
00:04:20.468 --> 00:04:22.089
Thumbs on the answer.

74
00:04:22.089 --> 00:04:25.349
Feel like its been a long day and
we're starting to fall asleep.

75
00:04:25.349 --> 00:04:28.983
We're almost there, almost there.

76
00:04:28.983 --> 00:04:30.882
So close.

77
00:04:30.882 --> 00:04:32.062
Awesome.

78
00:04:32.062 --> 00:04:38.822
So what if we assigned box
myInnerBox to a variable?

79
00:04:38.822 --> 00:04:47.042
What does this look like?
&gt;&gt; Speaker 3: Same then?

80
00:04:47.042 --> 00:04:47.642
&gt;&gt; Bianca Gandolfo: Yeah.

81
00:04:47.642 --> 00:04:49.942
Absolutely, it's gonna be the same.

82
00:04:49.942 --> 00:04:55.536
Oops.
&gt;&gt; Bianca Gandolfo: Full = true.

83
00:04:59.896 --> 00:05:03.470
&gt;&gt; Bianca Gandolfo: So, what about here?

84
00:05:03.470 --> 00:05:07.630
What if we triply nest our object?

85
00:05:07.630 --> 00:05:12.061
And now we have a box, we have an inner
box, and then we have the baby box.

86
00:05:12.061 --> 00:05:14.830
We have a little box family.

87
00:05:18.190 --> 00:05:20.769
So then we're just going to
console log this line here.

88
00:05:22.840 --> 00:05:26.950
What is that gonna look like?

89
00:05:28.660 --> 00:05:29.920
What is it gonna look like?

90
00:05:29.920 --> 00:05:30.870
&gt;&gt; Speaker 3: Empty object?
&gt;&gt; Bianca Gandolfo: Yeah.

91
00:05:30.870 --> 00:05:32.430
It's just gonna be an empty object.
&gt;&gt; Speaker 2: But

92
00:05:32.430 --> 00:05:35.570
it wouldn't have three squigglies on the
left and three squigglies on the right?

93
00:05:35.570 --> 00:05:36.270
That it's just.
&gt;&gt; Bianca Gandolfo: No,

94
00:05:36.270 --> 00:05:37.450
it's just one object.
&gt;&gt; Speaker 3: Just

95
00:05:37.450 --> 00:05:38.040
one?
&gt;&gt; Bianca Gandolfo: Mm-hm.

96
00:05:38.040 --> 00:05:38.540
&gt;&gt; Speaker 2: Okay.

97
00:05:38.540 --> 00:05:39.180
Got it.

98
00:05:39.180 --> 00:05:39.790
&gt;&gt; Bianca Gandolfo: Cuz a way to think

99
00:05:39.790 --> 00:05:42.050
about it, again,
is we first access box, right?

100
00:05:42.050 --> 00:05:44.650
Which is this, this whole object.

101
00:05:46.800 --> 00:05:53.350
And then we say box.innerBox,
right, which is, here's innerBox.

102
00:05:53.350 --> 00:05:59.846
So the value stored there is this one.
&gt;&gt; Bianca Gandolfo: And

103
00:05:59.846 --> 00:06:01.150
then we say babyBox.

104
00:06:02.260 --> 00:06:06.180
And so, the value stored at babyBox,
is this object.

105
00:06:06.180 --> 00:06:10.305
This is before we add the property,
so it would empty at that point.

106
00:06:10.305 --> 00:06:10.960
So it would be an empty object.

107
00:06:13.110 --> 00:06:16.630
And then if we do it afterwards.

108
00:06:17.880 --> 00:06:18.380
Whoops.

109
00:06:20.160 --> 00:06:28.869
What is it gonna look like now?
&gt;&gt; Speaker 2: It's up?

110
00:06:28.869 --> 00:06:29.536
&gt;&gt; Bianca Gandolfo: Yep.

111
00:06:33.096 --> 00:06:37.978
&gt;&gt; Bianca Gandolfo: It's kind

112
00:06:37.978 --> 00:06:42.319
of cool.

113
00:06:50.876 --> 00:06:51.998
&gt;&gt; Bianca Gandolfo: So the interesting

114
00:06:51.998 --> 00:06:55.021
thing about,
I'm going to delete this last line.

115
00:06:55.021 --> 00:07:00.671
So the interesting thing also

116
00:07:00.671 --> 00:07:07.903
about objects is that If we say var bb,

117
00:07:07.903 --> 00:07:13.101
which is gonna be baby box,

118
00:07:13.101 --> 00:07:15.820
equals that.

119
00:07:16.940 --> 00:07:22.840
So here, we're gonna assign this
empty object to the variable bb.

120
00:07:25.350 --> 00:07:32.830
Then when we add a property to our
baby box and we check BB, every

121
00:07:35.770 --> 00:07:41.250
time I do a question mark it does that.

122
00:07:42.890 --> 00:07:44.539
What is that going to log there?

123
00:07:54.889 --> 00:07:55.433
&gt;&gt; Bianca Gandolfo: It's okay if

124
00:07:55.433 --> 00:07:58.950
you're wrong.
&gt;&gt; Speaker 3: Blank, empty string.

125
00:07:58.950 --> 00:07:59.528
&gt;&gt; Bianca Gandolfo: Empty string?

126
00:07:59.528 --> 00:08:04.468
&gt;&gt; Speaker 3: Empty parenthesis, curly.

127
00:08:04.468 --> 00:08:05.589
&gt;&gt; Bianca Gandolfo: Good guess.

128
00:08:05.589 --> 00:08:11.250
And that would be true, it would be
an empty object, if it was a string.

129
00:08:11.250 --> 00:08:17.228
So if we did this, and it wasn't a string
and it wasn't actually an object,

130
00:08:17.228 --> 00:08:22.740
it wouldn't change.

131
00:08:22.740 --> 00:08:27.820
However, because of something we call
being passed around by reference,

132
00:08:27.820 --> 00:08:35.680
bb now is going to actually be
referencing the same objects.

133
00:08:35.680 --> 00:08:42.349
So, if you add properties to this object,

134
00:08:42.349 --> 00:08:47.020
It's going to show up later.

135
00:08:47.020 --> 00:08:54.530
And this is true for
objects that raise n functions.

136
00:08:54.530 --> 00:08:59.257
This is not true for
primitive values, like numbers,

137
00:08:59.257 --> 00:09:05.010
boolean values, strings Null,
undefined, things like that.

138
00:09:05.010 --> 00:09:06.420
Just objects raised and functions.

139
00:09:06.420 --> 00:09:07.500
Anything that's an object.

140
00:09:09.540 --> 00:09:13.690
And so that's something to keep in mind
when things start to change a little

141
00:09:13.690 --> 00:09:18.570
weird, and things start to change
when you're not expecting it to,

142
00:09:18.570 --> 00:09:21.290
and it's an object,
you may want to check on this.

