WEBVTT

1
00:00:00.000 --> 00:00:03.871
[MUSIC]

2
00:00:03.871 --> 00:00:07.454
&gt;&gt; Bianca Gandolfo: So we're talking
about how to make privacy with or

3
00:00:07.454 --> 00:00:10.356
make local variables in our functions,

4
00:00:10.356 --> 00:00:14.900
but what if we have a function
nested inside another function?

5
00:00:14.900 --> 00:00:16.491
How does that effect our scope?

6
00:00:16.491 --> 00:00:22.530
What do we need to know about that
to effectively handle our functions?

7
00:00:22.530 --> 00:00:28.610
So we have here, just a review is
we have this blender function.

8
00:00:28.610 --> 00:00:31.050
And here see, this is a name function.

9
00:00:31.050 --> 00:00:32.950
This isn't one that's
being stored in a var.

10
00:00:34.120 --> 00:00:38.314
So we have a blender function,
it takes fruit and

11
00:00:38.314 --> 00:00:43.032
it assigns that fruit to b and
then it blends smoothie.

12
00:00:43.032 --> 00:00:48.042
BS means blends smoothie and
it's gonna alert the fruit,

13
00:00:48.042 --> 00:00:53.359
whatever you pass into to it plus
yogurt makes a fruit swirl and

14
00:00:53.359 --> 00:00:57.571
then we call it here and
then we call it down here.

15
00:00:57.571 --> 00:01:02.557
And the question is like
where can we access these

16
00:01:02.557 --> 00:01:06.660
variables and this nested scope?

17
00:01:06.660 --> 00:01:11.051
So, the parent that has null
access to the child scope.

18
00:01:11.051 --> 00:01:14.691
So if we said, var,

19
00:01:14.691 --> 00:01:20.270
I don't know, x = 'asdf'.

20
00:01:21.660 --> 00:01:25.111
My creative juices are a little
slow this morning.

21
00:01:25.111 --> 00:01:31.978
We couldn't say down here,
we couldn't console.log(x).

22
00:01:31.978 --> 00:01:35.820
That's because while
child scopes are nested,

23
00:01:35.820 --> 00:01:41.536
internested function has access to
the parent scope as well as the global

24
00:01:41.536 --> 00:01:46.521
scope where the parents don't
have access to the child scope.

25
00:01:46.521 --> 00:01:49.057
And at Hack Reactor,
we use this metaphor for

26
00:01:49.057 --> 00:01:53.210
functions that I mentioned yesterday
where a function is like a blender.

27
00:01:53.210 --> 00:01:55.481
A blender is an object.,
we can move it around.

28
00:01:55.481 --> 00:02:00.560
I can hand it to different people and
we can save it in a variable if

29
00:02:00.560 --> 00:02:05.545
we wanted to, but to run the function or
to turn on the blender,

30
00:02:05.545 --> 00:02:09.795
you have to put in the fruit and
then press the button.

31
00:02:09.795 --> 00:02:15.010
And so call time is pressing the button,
for example.

32
00:02:18.490 --> 00:02:21.912
And so the extension of that
metaphor as it applies to scope,

33
00:02:21.912 --> 00:02:26.491
it's a little gruesome, but you never
want to put your hand inside the blender.

34
00:02:26.491 --> 00:02:29.920
So if you kind of forget which way?

35
00:02:29.920 --> 00:02:30.771
Who can access what?

36
00:02:30.771 --> 00:02:34.793
If it's the parent or the child, just
remember, you can't put your hand inside

37
00:02:34.793 --> 00:02:38.121
of a blender or you don't want to
put your hand inside of a blender.

38
00:02:38.121 --> 00:02:41.888
And that will help you remember that the
parent can't reach into the child's scope,

39
00:02:41.888 --> 00:02:45.430
but the child can actually
reach into the parent's scope.

40
00:02:45.430 --> 00:02:48.090
So that's why here in this alert,

41
00:02:48.090 --> 00:02:52.680
we can access the variables
in the parent's scope here.

42
00:02:52.680 --> 00:02:56.856
Y and v, but we can't cancel.log(x)
down here at the bottom.

43
00:02:59.991 --> 00:03:02.651
&gt;&gt; Speaker 2: I guess I'm
confused with the analogy.

44
00:03:02.651 --> 00:03:06.471
Why would you want a child
to reaching into a blender.

45
00:03:06.471 --> 00:03:10.091
&gt;&gt; Bianca Gandolfo: [LAUGH] You don't
want children reaching into blenders.

46
00:03:10.091 --> 00:03:14.496
That's not what I'm trying to promote.

47
00:03:14.496 --> 00:03:18.320
So we have nested function here,
you see that we have this blend smoothie

48
00:03:18.320 --> 00:03:20.900
function and
then we have the blender function.

49
00:03:22.260 --> 00:03:25.714
So we have this function inside of
the function and the question is,

50
00:03:25.714 --> 00:03:26.511
which scopes.

51
00:03:26.511 --> 00:03:28.610
So, we have two different scopes
that we're talking about.

52
00:03:28.610 --> 00:03:32.319
We have the parent scope and
then we have the child scope, and

53
00:03:32.319 --> 00:03:36.851
we're trying to figure out which
scopes have access to which variables.

54
00:03:36.851 --> 00:03:42.323
So the child one, the inner function
has access to the parent scope and

55
00:03:42.323 --> 00:03:45.861
the global scope and
all the way up the chain.

56
00:03:45.861 --> 00:03:48.718
So if it was nested many times,
any parent,

57
00:03:48.718 --> 00:03:52.150
it has access to those
variables in that scope.

58
00:03:52.150 --> 00:03:57.510
However, the parent cannot
access the child scope.

59
00:03:57.510 --> 00:04:03.243
So this outer scope here can't
access this inner scope and

60
00:04:03.243 --> 00:04:09.106
that's why this console.log(x)
would throw an error.

61
00:04:13.880 --> 00:04:16.241
&gt;&gt; Bianca Gandolfo: That make sense?

62
00:04:16.241 --> 00:04:17.021
Cool.

63
00:04:17.021 --> 00:04:21.821
&gt;&gt; Speaker 2: Somebody in chat was just
asking I think of why you were calling

64
00:04:21.821 --> 00:04:25.620
the bs function there
rather than returning it?

65
00:04:25.620 --> 00:04:27.841
&gt;&gt; Bianca Gandolfo: Rather
than returning it?

66
00:04:27.841 --> 00:04:30.000
&gt;&gt; Speaker 2: Yeah.

67
00:04:30.000 --> 00:04:33.400
&gt;&gt; Bianca Gandolfo: Just because we're
just calling it, there's no reason.

68
00:04:33.400 --> 00:04:40.091
We could return it, but then that adds
an extra step of having to call it later.

69
00:04:40.091 --> 00:04:43.740
We're not returning anything from this
function at all, we're just alerting.

70
00:04:43.740 --> 00:04:49.561
So, we could play with
this function want it to.

71
00:04:58.230 --> 00:05:00.630
&gt;&gt; Bianca Gandolfo: So I don't know if you
can read that, but it says, blueberry and

72
00:05:00.630 --> 00:05:01.879
yogurt makes a blueberry swirl.

73
00:05:03.824 --> 00:05:07.090
&gt;&gt; Bianca Gandolfo: And so,
we just created a scope here.

74
00:05:07.090 --> 00:05:11.939
So when we called this blender function,
we created this scope,

75
00:05:11.939 --> 00:05:15.652
that you can kind of
represent by these brackets.

76
00:05:15.652 --> 00:05:20.143
We created a scope there and then here,

77
00:05:20.143 --> 00:05:25.178
when we call this blend smoothie function,

78
00:05:25.178 --> 00:05:27.910
bs is terrible naming.

79
00:05:27.910 --> 00:05:29.165
I didn't think about that at the time.

80
00:05:29.165 --> 00:05:31.940
[LAUGH] We call
the blend-smoothie function.

81
00:05:33.310 --> 00:05:35.441
We create a second scope here.

82
00:05:35.441 --> 00:05:42.540
So this interscope has access to
the parent scope, and that's why b and y.

83
00:05:43.860 --> 00:05:46.491
No, they know what values they hold,

84
00:05:46.491 --> 00:05:49.711
because the child scope
accesses the parent.

85
00:05:49.711 --> 00:05:54.035
&gt;&gt; Speaker 3: If you move the bs()
indication down two lines would that work?

86
00:05:54.035 --> 00:05:58.853
&gt;&gt; Bianca Gandolfo: No and so
the question was if we move this

87
00:05:58.853 --> 00:06:04.260
bs() call time down here, would it work?

88
00:06:05.290 --> 00:06:06.230
And the answer is no,

89
00:06:06.230 --> 00:06:12.100
because the function bs is actually
local to the blender function.

90
00:06:12.100 --> 00:06:17.623
And so, just like we couldn't
console.log local up here,

91
00:06:17.623 --> 00:06:22.081
because it's private,
we can't console log.

92
00:06:25.840 --> 00:06:29.061
&gt;&gt; Bianca Gandolfo: We
can't access the bs here.

93
00:06:29.061 --> 00:06:33.761
&gt;&gt; Speaker 4: See so and the other thing
is there's no arguments being passed to

94
00:06:33.761 --> 00:06:37.265
bs, but
it's still rendering the blueberry and

95
00:06:37.265 --> 00:06:40.472
the yogurt, because they're-
&gt;&gt; Bianca Gandolfo: Because it has access

96
00:06:40.472 --> 00:06:41.411
to the parent's scope.

97
00:06:41.411 --> 00:06:44.610
&gt;&gt; Speaker 4: It has access
to the parent scope.

98
00:06:44.610 --> 00:06:48.155
&gt;&gt; Speaker 3: To followup
the [INAUDIBLE] the indication,

99
00:06:48.155 --> 00:06:52.955
if you moved it down two lines
could you say, blender.ps.

100
00:06:52.955 --> 00:06:54.433
&gt;&gt; Bianca Gandolfo: No, no.

101
00:06:54.433 --> 00:06:57.433
&gt;&gt; Speaker 5: But if you name
it that wouldn't it hoist it up.

102
00:06:57.433 --> 00:07:00.494
&gt;&gt; Bianca Gandolfo: It would
hoist it to the top of the scope.

103
00:07:00.494 --> 00:07:04.890
So, it would be like
equivalent to just like.

104
00:07:04.890 --> 00:07:08.961
So, how the voicing would work is it would
be the equivalent of just putting it up at

105
00:07:08.961 --> 00:07:09.671
the very top.

106
00:07:09.671 --> 00:07:14.089
So we could, technically, oops.

107
00:07:14.089 --> 00:07:16.809
We could technically-
&gt;&gt; Speaker 3: [COUGH]

108
00:07:16.809 --> 00:07:17.952
&gt;&gt; Bianca Gandolfo: Call it up here and

109
00:07:17.952 --> 00:07:21.385
this is like not something
I wanna cover too in depth,

110
00:07:21.385 --> 00:07:24.180
cuz it's a little bit confusing.

111
00:07:24.180 --> 00:07:26.280
But the way that this function works is,
it's hoisted, so

112
00:07:26.280 --> 00:07:28.096
that you could actually
call the function up here.

113
00:07:32.343 --> 00:07:33.301
&gt;&gt; Bianca Gandolfo: Yep?

114
00:07:33.301 --> 00:07:36.010
&gt;&gt; Speaker 2: Question
about the variable x.

115
00:07:36.010 --> 00:07:39.487
If it was declared with the bar keyword,
would it be in the global scope or

116
00:07:39.487 --> 00:07:40.691
just the scope above it?

117
00:07:40.691 --> 00:07:41.671
&gt;&gt; Bianca Gandolfo: Good question.

118
00:07:41.671 --> 00:07:44.580
So if we do it like that,
we take off the bar,

119
00:07:44.580 --> 00:07:47.190
then that would be in the global scope.

120
00:07:48.940 --> 00:07:51.575
So it'd be the equivalent of
being in the scope up here.

121
00:07:51.575 --> 00:07:53.144
&gt;&gt; Speaker 3: [COUGH]

