WEBVTT

1
00:00:00.000 --> 00:00:04.005
[MUSIC]

2
00:00:04.005 --> 00:00:06.400
&gt;&gt; Bianca Gandolfo: So,
another one that we use a lot is map.

3
00:00:06.400 --> 00:00:08.990
And map and each have a lot in common.

4
00:00:08.990 --> 00:00:14.120
The important thing to note about each is
that you can't return anything from each.

5
00:00:15.160 --> 00:00:18.740
So if we see here we're
pushing to our farm, but

6
00:00:18.740 --> 00:00:20.450
we're not using a return statement.

7
00:00:21.550 --> 00:00:24.040
You cannot use a return
statement in this function.

8
00:00:25.300 --> 00:00:25.800
It won't work.

9
00:00:27.230 --> 00:00:29.210
So just keep that in mind.

10
00:00:29.210 --> 00:00:32.890
However, in map,
it's really important what you return.

11
00:00:32.890 --> 00:00:37.880
So map does the same thing where
it's gonna loop through an object or

12
00:00:37.880 --> 00:00:41.760
an array and
it's going to apply it to a function.

13
00:00:41.760 --> 00:00:44.120
The difference here is what we return.

14
00:00:44.120 --> 00:00:49.460
So if we return here,
you return some value here.

15
00:00:50.500 --> 00:00:54.210
That's gonna be placed into an array.

16
00:00:54.210 --> 00:01:00.770
And so we have to save this in a variable

17
00:01:00.770 --> 00:01:05.880
until nums would then be again
just an array of numbers.

18
00:01:07.060 --> 00:01:08.030
So it would return that.

19
00:01:08.030 --> 00:01:14.040
So whatever is returned from the callback
is going to be put into an array.

20
00:01:15.950 --> 00:01:21.510
So we can return like nums,
the valley + 1.

21
00:01:21.510 --> 00:01:25.520
I output two, three, four.

22
00:01:25.520 --> 00:01:27.633
So then you can transform
your data this way.

23
00:01:31.004 --> 00:01:35.436
&gt;&gt; Bianca Gandolfo: So it produces a new
array of values by mapping each value in

24
00:01:35.436 --> 00:01:39.330
the list and
transforming it using this function.

25
00:01:41.680 --> 00:01:44.220
And the same holds true
with the parameters.

26
00:01:44.220 --> 00:01:46.879
They're always gonna be the value,
the index, and the entire list.

27
00:01:50.464 --> 00:01:51.629
&gt;&gt; Bianca Gandolfo: Cool.

28
00:01:56.130 --> 00:02:01.799
&gt;&gt; Bianca Gandolfo: So
back to our pocketmon example.

29
00:02:01.799 --> 00:02:07.150
We have an array of pocketmons and

30
00:02:07.150 --> 00:02:09.850
then we have a function
called excited array and

31
00:02:09.850 --> 00:02:15.400
this is my algorithm that takes any string
and suddenly makes it an excited string.

32
00:02:15.400 --> 00:02:19.820
So, how do we use this, using map?

33
00:02:19.820 --> 00:02:25.640
So, of course, we'd say underscore
dot map and what do we pass it?

34
00:02:25.640 --> 00:02:26.330
How about Tanner?

35
00:02:26.330 --> 00:02:34.980
&gt;&gt; Tanner: We pass it
a 123 in the brackets.

36
00:02:34.980 --> 00:02:35.680
No, I'm sorry.

37
00:02:35.680 --> 00:02:37.650
&gt;&gt; Bianca Gandolfo: Yeah,
you're one slide behind.

38
00:02:37.650 --> 00:02:39.700
&gt;&gt; Tanner: We pass it
the function pocketmon.

39
00:02:40.990 --> 00:02:43.080
&gt;&gt; Bianca Gandolfo: Yeah.
So we pass it pocketmon,

40
00:02:43.080 --> 00:02:43.868
which is an array.

41
00:02:43.868 --> 00:02:47.380
Of our pocketmons.

42
00:02:47.380 --> 00:02:50.400
So it'd be pocketmons or pocketmon?

43
00:02:50.400 --> 00:02:51.860
What do you think?

44
00:02:51.860 --> 00:02:53.800
&gt;&gt; Tanner: Pocketmon.
&gt;&gt; Bianca Gandolfo: Pocketmon, for plural.

45
00:02:53.800 --> 00:02:55.220
So it's like sheep sheep.

46
00:02:55.220 --> 00:02:55.940
Okay.

47
00:02:55.940 --> 00:02:56.870
&gt;&gt; Tanner: Or deer.

48
00:02:56.870 --> 00:02:58.280
&gt;&gt; Bianca Gandolfo: Or deer, yeah.

49
00:02:58.280 --> 00:02:58.780
Cool.

50
00:02:59.950 --> 00:03:01.172
And then what do we pass?

51
00:03:06.587 --> 00:03:11.560
&gt;&gt; Bianca Gandolfo: So.

52
00:03:11.560 --> 00:03:13.030
What about William, you've been quiet.

53
00:03:14.940 --> 00:03:16.390
&gt;&gt; William: Gotta set
the callback function,

54
00:03:16.390 --> 00:03:17.570
you wanna call for each one of them.

55
00:03:17.570 --> 00:03:19.120
So I think it's excitedArr.

56
00:03:19.120 --> 00:03:19.700
&gt;&gt; Bianca Gandolfo: Yep.

57
00:03:20.780 --> 00:03:24.260
There is no other functions on page and so

58
00:03:24.260 --> 00:03:28.990
we just pass excitedArr notice we're
not calling it here we're simply

59
00:03:28.990 --> 00:03:33.616
passing it that's important.

60
00:03:33.616 --> 00:03:34.640
Cool.

61
00:03:34.640 --> 00:03:37.690
&gt;&gt; Speaker 3: How do we
know that its gonna use

62
00:03:41.350 --> 00:03:48.390
the value cuz when you're defining
excitedArr that she's using val?

63
00:03:48.390 --> 00:03:49.770
&gt;&gt; Bianca Gandolfo: Yeah,
so that's just a parameter.

64
00:03:51.220 --> 00:03:52.760
We can call this like str too.

65
00:03:52.760 --> 00:03:57.290
&gt;&gt; Speaker 3: I know, but maybe I
&gt;&gt; Bianca Gandolfo: It's just

66
00:03:57.290 --> 00:03:59.980
the mechanics, how it works.

67
00:03:59.980 --> 00:04:04.530
Is that the first things it calls the
function with, whatever function it is?

68
00:04:04.530 --> 00:04:13.570
Whether or not it has parameters or
not it's gonna call excitedArr like this.

69
00:04:13.570 --> 00:04:20.540
So if we're doing this example it would be
pocketmon at the first one would be zero.

70
00:04:22.630 --> 00:04:28.880
Yeah, it would be zero and then zero and
then it would be just pocketmon.

71
00:04:31.900 --> 00:04:34.950
So, that's what it's doing under the hood,
it's calling it like that every time and

72
00:04:34.950 --> 00:04:42.200
then the second time it
calls it like this, right?

73
00:04:42.200 --> 00:04:49.450
And then the third and
the final time it will call it like that.

74
00:04:49.450 --> 00:04:54.260
&gt;&gt; Speaker 3: So and
because pocket mon square bracket zero

75
00:04:54.260 --> 00:04:57.600
is the first value,
that get's substituted for

76
00:04:57.600 --> 00:05:01.570
STR and the rest just doesn't get
&gt;&gt; Bianca Gandolfo: Exactly.

77
00:05:01.570 --> 00:05:02.640
&gt;&gt; Speaker 3: This is discarded?

78
00:05:02.640 --> 00:05:03.850
&gt;&gt; Bianca Gandolfo: Totally.
So

79
00:05:03.850 --> 00:05:08.179
first argument is gonna amount to
the first parameter and since STR,

80
00:05:08.179 --> 00:05:14.070
first parameter, STR is now pocket
mon at zero which is char source.

81
00:05:16.930 --> 00:05:20.880
&gt;&gt; Speaker 5: Questions, is passing the
function in the underscore map parameter

82
00:05:20.880 --> 00:05:27.037
the same as calling it.

83
00:05:27.037 --> 00:05:29.250
&gt;&gt; Bianca Gandolfo: So
is it the same as calling it?

84
00:05:29.250 --> 00:05:33.870
When you pass it to map,
we aren't calling it.

85
00:05:33.870 --> 00:05:35.540
But map calls it for you.

86
00:05:36.710 --> 00:05:38.370
So yes and no.

87
00:05:40.190 --> 00:05:43.410
If you don't want this function to be
called, then you shouldn't be passing it

88
00:05:43.410 --> 00:05:47.520
to map cuz map will just, under
the hood it calls the function for you.

89
00:05:47.520 --> 00:05:51.890
Really similar to in our callback
exercises where we took a function and

90
00:05:51.890 --> 00:05:53.540
we called it immediately.

91
00:05:53.540 --> 00:05:57.330
&gt;&gt; Speaker 3: So isn't that one that you
have highlighted, that's just a reference,

92
00:05:57.330 --> 00:06:00.620
so it's telling map this
is where that function is.

93
00:06:00.620 --> 00:06:02.490
Is not actually doing the function.

94
00:06:02.490 --> 00:06:05.110
But then when map does
its internal things.

95
00:06:05.110 --> 00:06:06.220
&gt;&gt; Bianca Gandolfo: Right.
&gt;&gt; Speaker 3: It's going

96
00:06:06.220 --> 00:06:07.850
to that address and saying,
there's a function..

97
00:06:07.850 --> 00:06:09.620
&gt;&gt; Bianca Gandolfo: Exactly,
so map is its own function.

98
00:06:09.620 --> 00:06:11.490
So we're calling map.

99
00:06:11.490 --> 00:06:15.120
And somewhere in underscore library
we're entering into the function body of

100
00:06:15.120 --> 00:06:16.770
map, right?

101
00:06:16.770 --> 00:06:22.910
And we have two arguments
that we're giving to map.

102
00:06:22.910 --> 00:06:27.470
And map has some functionality that it
does always with these two arguments.

103
00:06:27.470 --> 00:06:31.870
So inside the function body it's
gonna loop through this list and

104
00:06:31.870 --> 00:06:35.430
it's going to call this function
with each value of the list.

105
00:06:35.430 --> 00:06:37.430
So as it loops, it's gonna call it.

106
00:06:37.430 --> 00:06:40.860
And that's how It works under the hood,
and we can even look at it,

107
00:06:40.860 --> 00:06:42.300
if we wanted to, map.

108
00:06:43.600 --> 00:06:49.590
So we see it takes an object and
it takes an iterator,

109
00:06:49.590 --> 00:06:54.700
and if we look somewhere in here,
we see that

110
00:06:54.700 --> 00:06:59.840
it's calling the iterator function so
it's looping first of all, right.

111
00:06:59.840 --> 00:07:00.400
See that loop?

112
00:07:01.560 --> 00:07:06.970
And it's calling, it's doing a little
bit more than what I'm expressing.

113
00:07:06.970 --> 00:07:09.310
But the main point is that it's looping,
right.

114
00:07:10.500 --> 00:07:18.600
And then it's calling that iterator
function with the value with the property.

115
00:07:20.100 --> 00:07:22.010
And with the entire object.

116
00:07:22.010 --> 00:07:22.510
Right.

117
00:07:23.990 --> 00:07:25.530
So that's what map is
doing under the hood.

118
00:07:28.470 --> 00:07:29.780
Cool.

119
00:07:29.780 --> 00:07:30.630
Any questions on that?

120
00:07:34.230 --> 00:07:38.320
And the key thing here is we
want to say this save this in

121
00:07:38.320 --> 00:07:41.356
a variable because it's
returning an array.

122
00:07:41.356 --> 00:07:50.380
So var excitedPocketmon equals this.

123
00:07:50.380 --> 00:07:55.680
So now we have transformed our
array into an excited array.

124
00:07:55.680 --> 00:08:00.540
&gt;&gt; Speaker 3: Could you have saved it in
your same pocket lan one to over write and

125
00:08:00.540 --> 00:08:01.655
that should be okay?

126
00:08:01.655 --> 00:08:02.155
&gt;&gt; Bianca Gandolfo: Mm-hm.
Yep.

