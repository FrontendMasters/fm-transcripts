WEBVTT

1
00:00:00.000 --> 00:00:03.754
[MUSIC]

2
00:00:03.754 --> 00:00:08.466
&gt;&gt; Bianca: So we have a couple dos and
don'ts for our dot notation,

3
00:00:08.466 --> 00:00:10.880
what's this gonna return?

4
00:00:10.880 --> 00:00:15.991
Again, the green,
these green question marks

5
00:00:15.991 --> 00:00:21.629
mean that I want someone,
I want a victim to answer.

6
00:00:27.047 --> 00:00:29.129
&gt;&gt; Bianca: Don't yell at all,
all out at once.

7
00:00:29.129 --> 00:00:32.672
Undefined.
Yeah, here we go.

8
00:00:32.672 --> 00:00:33.546
Great.

9
00:00:35.837 --> 00:00:38.046
&gt;&gt; Bianca: What about this one?

10
00:00:38.046 --> 00:00:39.963
&gt;&gt; Student: I gave you.

11
00:00:39.963 --> 00:00:40.879
&gt;&gt; Bianca: What is it?

12
00:00:40.879 --> 00:00:43.254
&gt;&gt; Student: I gave you
&gt;&gt; Bianca: Material?

13
00:00:43.254 --> 00:00:47.853
&gt;&gt; Student: [INAUDIBLE] no,
[INAUDIBLE] different.

14
00:00:47.853 --> 00:00:50.831
&gt;&gt; Bianca: Yeah, undefined,
why is this one undefined?

15
00:00:50.831 --> 00:00:56.278
&gt;&gt; Student: Because the [INAUDIBLE]
string, and keeping value,

16
00:00:56.278 --> 00:01:00.424
so key value is, they us the key value.

17
00:01:00.424 --> 00:01:04.990
&gt;&gt; Bianca: Absolutely, so the reason this
is undefined is because the dot notation

18
00:01:04.990 --> 00:01:08.130
is equivalent to using the bracket
notation with the quotes.

19
00:01:08.130 --> 00:01:11.660
So the first two lines
are looking up the same thing.

20
00:01:11.660 --> 00:01:18.936
They're looking up a property called key
on the object box which doesn't exist,

21
00:01:18.936 --> 00:01:24.562
it's undefined
&gt;&gt; Student 2: So

22
00:01:24.562 --> 00:01:28.832
if you wanted cardboard, you would
do the brackets without the quotes,

23
00:01:28.832 --> 00:01:32.440
key without the quotes and
the bracket notation.

24
00:01:32.440 --> 00:01:32.940
&gt;&gt; Bianca: Absolutely.

25
00:01:35.296 --> 00:01:35.990
&gt;&gt; Bianca: Where's my thing?

26
00:01:37.920 --> 00:01:38.889
So what's this one?

27
00:01:38.889 --> 00:01:40.138
&gt;&gt; Student 3: Cardboard.

28
00:01:40.138 --> 00:01:41.395
&gt;&gt; Bianca: Cardboard.

29
00:01:41.395 --> 00:01:45.108
&gt;&gt; Student 3: [LAUGH]
&gt;&gt; Bianca: Very good.

30
00:01:45.108 --> 00:01:45.961
Cool.

31
00:01:49.337 --> 00:01:51.740
&gt;&gt; Bianca: So here's some dos and don'ts.

32
00:01:51.740 --> 00:01:55.000
Don't use dot notation with a variable.

33
00:01:55.000 --> 00:01:57.950
Don't use quotations around your variable,

34
00:01:57.950 --> 00:01:59.870
it's gonna give you
some undesired results.

35
00:02:02.390 --> 00:02:05.300
Yeah, if you have a variable,
just put it in there without the quotes.

36
00:02:06.740 --> 00:02:10.970
So what about some non valid
characters and numbers and things?

37
00:02:10.970 --> 00:02:16.760
So, with dot notation,
you have to use valid variable names.

38
00:02:16.760 --> 00:02:21.130
What I mean valid variable names, I don't
mean a variable name, I mean something

39
00:02:21.130 --> 00:02:29.230
not, if you type it up in your console
here that, can everyone see this?

40
00:02:29.230 --> 00:02:33.010
If I said like var 0 = 'asdf'',

41
00:02:33.010 --> 00:02:36.520
that won't work cuz numbers
aren't valid variable names.

42
00:02:36.520 --> 00:02:38.710
So that means that for.

43
00:02:40.420 --> 00:02:42.710
Not for our object.

44
00:02:42.710 --> 00:02:49.200
If we said box.0 equals something,
that's also not gonna work.

45
00:02:49.200 --> 00:02:54.160
So if you can't say var whatever
it is the that's considered it

46
00:02:54.160 --> 00:02:59.420
invalid variable name and
you cannot use it with dot notation, so

47
00:02:59.420 --> 00:03:04.520
some things other than numbers that
are invalid are just weird characters.

48
00:03:04.520 --> 00:03:08.560
And the way that we get around this if you
have to use them is by using the bracket

49
00:03:08.560 --> 00:03:10.980
notation with quotation marks.

50
00:03:10.980 --> 00:03:14.150
Unless it's a number, in which case,
quotation marks are optional.

51
00:03:15.860 --> 00:03:21.540
But for example, here,
we have this really semantic name

52
00:03:21.540 --> 00:03:25.140
here, upper carat, ampersand, star.

53
00:03:26.330 --> 00:03:30.805
I name most of my properties like this for
readability purposes.

54
00:03:30.805 --> 00:03:34.209
&gt;&gt; Student 3: [LAUGH]
&gt;&gt; Bianca: And so that's how we deal with

55
00:03:34.209 --> 00:03:39.130
non valid characters,
numbers, things like that.

56
00:03:40.620 --> 00:03:43.870
And then also if we want to access them,
it's the same way,

57
00:03:43.870 --> 00:03:49.120
we have to keep those quotations
around it with the bracket notation.

58
00:03:51.910 --> 00:03:54.630
Cool, and here's a picture of what
our object kind of looks like.

59
00:03:56.480 --> 00:03:59.580
And notice that our numbers,
even though we pass it in as a number,

60
00:03:59.580 --> 00:04:01.380
it's actually stored as a string.

61
00:04:01.380 --> 00:04:05.290
Under the hood, whenever you use bracket
notation, it's actually string of fine.

62
00:04:05.290 --> 00:04:06.980
Once it's evaluate the expression,

63
00:04:06.980 --> 00:04:09.990
it's gonna stringify those
values even if it's a number.

64
00:04:13.170 --> 00:04:17.950
Even if it's array or a function as well
because those are objects under the hood.

65
00:04:19.575 --> 00:04:23.039
&gt;&gt; Student 2: Are single quotes equivalent
to double quotes and all these places.

66
00:04:24.090 --> 00:04:26.090
&gt;&gt; Bianca: Yes, yeah.

67
00:04:26.090 --> 00:04:29.504
Quotations are super flexible
as long as they match.

68
00:04:32.550 --> 00:04:37.460
&gt;&gt; Bianca: [COUGH] So
here are the rules, kinda laid out.

69
00:04:38.480 --> 00:04:43.150
So, as we can see, bracket notations
a lot more powerful than dot notation,

70
00:04:44.230 --> 00:04:48.000
dot notation, you can really only put
strings in there, and remember those

71
00:04:48.000 --> 00:04:51.700
strings have to be valid variable names,
which means they can't be numbers, they

72
00:04:51.700 --> 00:04:56.440
can't have weird characters, they can't
be expressions like math or a function.

73
00:04:56.440 --> 00:04:59.270
You can't put quotations around it.

74
00:04:59.270 --> 00:05:04.910
For brackets you can do pretty much
anything, somethings do need quotes.

75
00:05:04.910 --> 00:05:09.020
I have a little key here,
so if it has this key here,

76
00:05:09.020 --> 00:05:10.190
that means it requires quotes.

77
00:05:10.190 --> 00:05:13.300
So, if you want "string,
it has to have quotes.

78
00:05:13.300 --> 00:05:17.940
If you want to do anything with
a "weird character, you need,

79
00:05:17.940 --> 00:05:20.540
you require, excuse me.

80
00:05:20.540 --> 00:05:24.472
You require the quotes as well and
then variables, numbers, and

81
00:05:24.472 --> 00:05:27.130
expressions without the quotation marks.

82
00:05:28.421 --> 00:05:29.500
&gt;&gt; Bianca: Cool?
Mm-hm.

83
00:05:29.500 --> 00:05:31.990
&gt;&gt; Student 2: If you pass in
a function in the brackets,

84
00:05:31.990 --> 00:05:33.140
does it have to return a string?

85
00:05:34.660 --> 00:05:36.400
&gt;&gt; Bianca: It should return a string.

86
00:05:36.400 --> 00:05:37.590
&gt;&gt; Student 2: Okay.
&gt;&gt; Bianca: Whatever

87
00:05:37.590 --> 00:05:39.940
returns is gonna be stringified.

88
00:05:39.940 --> 00:05:43.350
The danger with, I don't know why
you would really, I don't know,

89
00:05:43.350 --> 00:05:45.030
maybe you would put a function.

90
00:05:45.030 --> 00:05:49.510
I've never put a function in bracket
notation, but if you don't call

91
00:05:49.510 --> 00:05:54.410
the function, then it's just gonna
basically it's like stringified functions.

92
00:05:54.410 --> 00:06:00.270
So if you say var x = function
It's just gonna say X.toString,

93
00:06:00.270 --> 00:06:04.760
and then it's gonna do a property
lookup on something that looks like

94
00:06:04.760 --> 00:06:06.390
function with quotation marks.

95
00:06:06.390 --> 00:06:08.712
So make sure that you
actually call your function.

96
00:06:13.505 --> 00:06:16.170
&gt;&gt; Bianca: If you must do that,
but I wouldn't recommend it.

97
00:06:16.170 --> 00:06:21.102
It was more of an example of that
you can do that because it evaluates

98
00:06:21.102 --> 00:06:24.547
expressions and those brackets.

99
00:06:24.547 --> 00:06:27.555
&gt;&gt; Student 2: Does the stringify in
the brackets like if it's a number?

100
00:06:27.555 --> 00:06:28.680
&gt;&gt; Bianca: Mm-hm.
&gt;&gt; Student 2: And so

101
00:06:28.680 --> 00:06:30.180
anything if it's defined.

102
00:06:30.180 --> 00:06:31.140
&gt;&gt; Bianca: Yep.
&gt;&gt; Student 2: Got it.

103
00:06:31.140 --> 00:06:32.700
&gt;&gt; Bianca: Yep.
&gt;&gt; Student 2: Are there any special

104
00:06:32.700 --> 00:06:37.170
string interpolation rules for
single versus double quotes?

105
00:06:37.170 --> 00:06:40.630
Some languages single just single
quotes is just a string of literal-

106
00:06:41.750 --> 00:06:42.890
&gt;&gt; Bianca: No it doesn't matter.

107
00:06:42.890 --> 00:06:46.450
&gt;&gt; Student 2: So you can proper-
&gt;&gt; Bianca: Yeah, it could be anything.

108
00:06:46.450 --> 00:06:47.390
Yeah, it really doesn't matter.

109
00:06:48.850 --> 00:06:51.850
You guys are really in
to the quotations today.

110
00:06:51.850 --> 00:06:52.670
So many quotes.

111
00:06:54.050 --> 00:06:56.920
Cool, all right so those are the rules.

112
00:06:56.920 --> 00:07:01.110
Any questions about these rules and

113
00:07:01.110 --> 00:07:04.020
really important about these rules,
that they don't change.

114
00:07:04.020 --> 00:07:08.010
So I go saying before,
everything in JavaScripts and Objects.

115
00:07:08.010 --> 00:07:14.370
And because they're Objects, these Objects
rules for the syntax stay the same.

116
00:07:14.370 --> 00:07:17.500
So keep that in mind, wherever you see
dot notation, wherever you see bracket

117
00:07:17.500 --> 00:07:20.860
notation, just remember these rules and
they're always gonna be the same.

