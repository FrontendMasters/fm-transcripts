WEBVTT

1
00:00:04.100 --> 00:00:05.810
&gt;&gt; Bianca Gandolfo: Anyone
think about any questions,

2
00:00:05.810 --> 00:00:11.900
some scope questions during the break?
&gt;&gt; Bianca Gandolfo: Yeah.

3
00:00:13.200 --> 00:00:14.525
&gt;&gt; Speaker 2: So when you have nested

4
00:00:14.525 --> 00:00:18.079
scopes is that the same thing as,
I looked it up a little bit,

5
00:00:18.079 --> 00:00:20.393
is that the same thing as lexcal scope?

6
00:00:20.393 --> 00:00:23.108
When you have nested scopes?
&gt;&gt; Bianca Gandolfo: So,

7
00:00:23.108 --> 00:00:28.483
lexical scope basically means
that if you look at it,

8
00:00:28.483 --> 00:00:32.190
the scope is defined by how it looks.

9
00:00:32.190 --> 00:00:38.060
So if the nested scope is inside of it,
that's yes, so I guess you could think of

10
00:00:38.060 --> 00:00:44.730
it that way like nested scope is
an example of lexical scope, yeah.

11
00:00:44.730 --> 00:00:48.746
So, if you have the function, a sibling
and even though you're calling it

12
00:00:48.746 --> 00:00:53.296
from inside, that scope doesn't work
because of something called lexical scope.

13
00:00:53.296 --> 00:00:58.966
And the way I think about it is that if
you see the function actually inside,

14
00:00:58.966 --> 00:01:00.504
then it has access.

15
00:01:00.504 --> 00:01:02.322
It's not like an academic definition,

16
00:01:02.322 --> 00:01:05.159
but that's just like my working
understanding of how that is.

17
00:01:07.000 --> 00:01:10.337
Cool, and Joe you said you had a question?
&gt;&gt; Joe: You answered it.

18
00:01:10.337 --> 00:01:11.376
&gt;&gt; Bianca Gandolfo: You answered it,

19
00:01:11.376 --> 00:01:12.420
awesome, cool.

20
00:01:12.420 --> 00:01:13.620
Anyone else have any questions?

21
00:01:16.110 --> 00:01:19.410
All right, so
we're gonna talk about closure.

22
00:01:20.560 --> 00:01:24.470
So closure is the next step with scope.

23
00:01:24.470 --> 00:01:30.400
A closure happens when you return
a function from inside the function and

24
00:01:30.400 --> 00:01:33.470
that inner function retains
access to the scope.

25
00:01:33.470 --> 00:01:39.210
We saw that a little bit in our
exercises here at the very bottom.

26
00:01:39.210 --> 00:01:47.770
So even though we made this inner
function global, it still had access.

27
00:01:47.770 --> 00:01:52.285
And it remembered, quote unquote,
that we had incremented

28
00:01:52.285 --> 00:01:56.160
our counterInnerScope to 12, and so-
&gt;&gt; Joe: Why?

29
00:01:57.720 --> 00:01:59.940
&gt;&gt; Bianca Gandolfo: Why, we're going to

30
00:01:59.940 --> 00:02:01.070
get there, we're going to get there.

31
00:02:01.070 --> 00:02:01.830
We'll walk through it.

32
00:02:03.010 --> 00:02:10.495
And so, that is an example of closure.
&gt;&gt; Joe: Isn't

33
00:02:10.495 --> 00:02:15.353
that a violation of scope thing?
&gt;&gt; Bianca Gandolfo: It's a violation

34
00:02:15.353 --> 00:02:16.430
of scope.

35
00:02:16.430 --> 00:02:21.268
No, I think it's taking advantage
of the power of scope to

36
00:02:21.268 --> 00:02:23.914
do some interesting things.
&gt;&gt; Joe: But

37
00:02:23.914 --> 00:02:27.571
didn't we say that the variable inside
the function is not available to something

38
00:02:27.571 --> 00:02:29.300
that's outside the function.
&gt;&gt; Bianca Gandolfo: But

39
00:02:29.300 --> 00:02:33.482
if you return a function
from inside the function,

40
00:02:33.482 --> 00:02:38.420
that function was originally
inside the function.

41
00:02:38.420 --> 00:02:39.710
But we'll get there,
we'll walk through it.

42
00:02:39.710 --> 00:02:44.650
We'll walk through it step by step and
talk about what I mean when I say closure.

43
00:02:46.210 --> 00:02:50.550
So our first thing I want us to look at
is this function called closureAlert.

44
00:02:52.230 --> 00:02:57.054
And it says it's a function that has
a variable that's initialized that says,

45
00:02:57.054 --> 00:02:57.630
"Help!

46
00:02:57.630 --> 00:03:00.484
I'm a variable stuck in a closure!" and

47
00:03:00.484 --> 00:03:06.046
then we have this inner function called
alerter, and all it does is alert(x).

48
00:03:06.046 --> 00:03:08.450
And then we call alerter from inside.

49
00:03:09.700 --> 00:03:15.507
So let's play with this in our console.
&gt;&gt; Bianca Gandolfo: Can

50
00:03:15.507 --> 00:03:18.200
everyone see that, even in the back?

51
00:03:20.720 --> 00:03:22.990
Cool, thanks.

52
00:03:25.120 --> 00:03:30.640
So now so we have closure alert so
if I just type out closure alert what's

53
00:03:30.640 --> 00:03:38.338
gonna happen?
&gt;&gt; Bianca Gandolfo: How about Ben?

54
00:03:38.338 --> 00:03:41.560
What's gonna happen if I just
type out closureAlert like that?

55
00:03:41.560 --> 00:03:42.610
&gt;&gt; Speaker 4: It's gonna return

56
00:03:42.610 --> 00:03:45.190
the definition of the function.
&gt;&gt; Bianca Gandolfo: Absolutely,

57
00:03:45.190 --> 00:03:47.670
so it's just gonna return
the definition of the function.

58
00:03:47.670 --> 00:03:53.630
And then if we wanna call the function,
we'd put the two parenthesis, right?

59
00:03:53.630 --> 00:03:59.310
So we call it, once we call it, it's
gonna go into this function body, right?

60
00:04:00.500 --> 00:04:03.560
It's gonna declare this variable,
it's gonna say great there's a function.

61
00:04:03.560 --> 00:04:08.573
Then it's gonna call alerter and then that
point it goes inside alerter's function

62
00:04:08.573 --> 00:04:13.324
body and alerts x.
&gt;&gt; Bianca Gandolfo: And

63
00:04:13.324 --> 00:04:14.400
then we have this alert.

64
00:04:15.550 --> 00:04:18.470
Can someone read that.
&gt;&gt; Joe: Help I'm

65
00:04:18.470 --> 00:04:22.517
a variable stuck in an enclosure.
&gt;&gt; Bianca Gandolfo: Thank you.

66
00:04:22.517 --> 00:04:27.010
Awesome, so that seems comfortable.

67
00:04:27.010 --> 00:04:30.300
We've done that before,
right, in previous exercises.

68
00:04:30.300 --> 00:04:33.120
We're just calling a function
from inside of a function.

69
00:04:33.120 --> 00:04:38.120
It's not a surprise to us that this
x refers to the x in the parent

70
00:04:38.120 --> 00:04:43.610
function cuz we know that their child
function retains access to that parent.

71
00:04:45.670 --> 00:04:50.912
Cool, any questions on that, thumbs?
&gt;&gt; Bianca Gandolfo: Cool, did

72
00:04:50.912 --> 00:04:58.880
you have a question with the side thumb?
&gt;&gt; Speaker 5: Not quite there.

73
00:04:58.880 --> 00:05:01.087
&gt;&gt; Bianca Gandolfo: Okay.

74
00:05:01.087 --> 00:05:02.722
&gt;&gt; Speaker 6: I didn't see where you

75
00:05:02.722 --> 00:05:04.701
called the closure alert so

76
00:05:04.701 --> 00:05:08.340
that never gets called at all then?
&gt;&gt; Bianca Gandolfo: Well I

77
00:05:08.340 --> 00:05:09.720
just called it in the console.

78
00:05:09.720 --> 00:05:10.676
But for example,

79
00:05:10.676 --> 00:05:16.305
you could just do like this.
&gt;&gt; Speaker 2: Yeah.

