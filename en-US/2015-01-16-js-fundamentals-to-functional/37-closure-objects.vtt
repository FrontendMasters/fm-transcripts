WEBVTT

1
00:00:00.178 --> 00:00:03.899
[MUSIC]

2
00:00:03.899 --> 00:00:08.710
&gt;&gt; Bianca Gandolfo: So the other cool
thing is that this also works if

3
00:00:08.710 --> 00:00:13.086
we're returning an object with methods.

4
00:00:13.086 --> 00:00:14.720
So the same rules apply.

5
00:00:14.720 --> 00:00:19.299
Now see, look, we have these functions
that are still inside this parent scope.

6
00:00:20.320 --> 00:00:22.710
Even though we're actually
returning it in an object.

7
00:00:24.790 --> 00:00:31.896
So let's explore it that looks like.
&gt;&gt; Bianca Gandolfo: Well I'll

8
00:00:31.896 --> 00:00:34.290
type it out here and then I'll paste it.

9
00:00:34.290 --> 00:00:39.424
So we're gonna call,
&gt;&gt; Bianca Gandolfo: So here's like

10
00:00:39.424 --> 00:00:45.645
a counter, we're gonna call counter.
&gt;&gt; Bianca Gandolfo: Okay,

11
00:00:45.645 --> 00:00:47.840
so where did we leave off?

12
00:00:50.070 --> 00:00:52.568
Actually I think we failure the last one,
right last time, so

13
00:00:52.568 --> 00:00:53.974
we should start at the beginning.

14
00:00:53.974 --> 00:00:57.014
I guess that'll be you, Rich.
&gt;&gt; Rich: Okay so,

15
00:00:57.014 --> 00:01:02.439
[COUGH] it's like a global function,

16
00:01:02.439 --> 00:01:07.207
I guess, called counter.
&gt;&gt; Bianca Gandolfo: Mm-hm.

17
00:01:07.207 --> 00:01:10.050
&gt;&gt; Rich: It's based on and

18
00:01:10.050 --> 00:01:11.210
then it finds that and

19
00:01:11.210 --> 00:01:15.550
it goes down to the, skips the whole body.
&gt;&gt; Bianca Gandolfo: So we said great,

20
00:01:15.550 --> 00:01:16.750
there's the counter and we skip it.

21
00:01:16.750 --> 00:01:21.820
And then Grace.
&gt;&gt; Grace: Signed myCounter.

22
00:01:21.820 --> 00:01:27.550
The returned value of counter function.
&gt;&gt; Bianca Gandolfo: Mm-hm,

23
00:01:27.550 --> 00:01:30.490
sure, so we called counter and
then it goes into the counter body.

24
00:01:30.490 --> 00:01:35.194
And then Joe.
&gt;&gt; Joe: Sets the local

25
00:01:35.194 --> 00:01:37.920
variable n to zero.
&gt;&gt; Bianca Gandolfo: Mm-hm.

26
00:01:41.560 --> 00:01:43.660
&gt;&gt; Joe: Then my counter is equal

27
00:01:43.660 --> 00:01:47.510
to the return value so you return that.
&gt;&gt; Bianca Gandolfo: What is

28
00:01:47.510 --> 00:01:48.190
this?
&gt;&gt; Joe: Two

29
00:01:48.190 --> 00:01:53.516
functions.
&gt;&gt; Bianca Gandolfo: Yeah, so this is

30
00:01:53.516 --> 00:01:57.780
an object literal, it has two properties
on it, one is count and one is reset.

31
00:01:57.780 --> 00:02:00.370
And they're both, so
you could call it a method.

32
00:02:00.370 --> 00:02:05.750
It might not look like an object in
this form, but if we delete this,

33
00:02:07.440 --> 00:02:14.700
you can see that that's just an object
with our properties in there.

34
00:02:16.840 --> 00:02:19.050
So we're returning an object, great.

35
00:02:19.050 --> 00:02:23.552
So what is myCounter now, Kim?
&gt;&gt; Kim: Object

36
00:02:23.552 --> 00:02:27.294
count colon the function.
&gt;&gt; Bianca Gandolfo: Mm-hm,

37
00:02:27.294 --> 00:02:31.634
totally.
&gt;&gt; Bianca Gandolfo: And

38
00:02:31.634 --> 00:02:37.690
then if we wanted to increment the
counter, how would we do that, William?

39
00:02:39.980 --> 00:02:44.735
Noting that my counter is an object,
actually let's inspect it before we jump

40
00:02:44.735 --> 00:02:50.111
ahead.
&gt;&gt; Bianca Gandolfo: So,

41
00:02:50.111 --> 00:02:56.261
we have my counter,
is an object with two properties so,

42
00:02:56.261 --> 00:03:02.154
if we want it to count,
we wanted our counter to count,

43
00:03:02.154 --> 00:03:08.150
how do we access the counter property?
&gt;&gt; Grace: Dot.

44
00:03:08.150 --> 00:03:09.040
&gt;&gt; Bianca Gandolfo: Yeah we

45
00:03:09.040 --> 00:03:10.590
could use a dot.

46
00:03:10.590 --> 00:03:14.300
Dot what?
&gt;&gt; Grace: Dot count.

47
00:03:14.300 --> 00:03:15.090
&gt;&gt; Bianca Gandolfo: Dot count, like this?

48
00:03:18.200 --> 00:03:22.460
So if we don't call it right,
it's just gonna be the name,

49
00:03:23.780 --> 00:03:27.170
so we need to invoke our function and
it's gonna increment it.

50
00:03:27.170 --> 00:03:29.021
There's one, and
we could keep doing it right,

51
00:03:29.021 --> 00:03:35.739
it's just gonna keep counting.
&gt;&gt; Bianca Gandolfo: So we can see

52
00:03:35.739 --> 00:03:39.713
my counter, it's still just an object that
we haven't effected it or anything and

53
00:03:39.713 --> 00:03:45.544
then if we wanted to reset it,
&gt;&gt; Bianca Gandolfo: Can

54
00:03:45.544 --> 00:03:50.085
we do this?
&gt;&gt; Rich: Yep.

55
00:03:50.085 --> 00:03:50.670
&gt;&gt; Bianca Gandolfo: Yep, that

56
00:03:50.670 --> 00:03:51.200
will also work.

57
00:03:51.200 --> 00:03:53.358
You can use bracket notation.

58
00:03:53.358 --> 00:03:53.998
And so,

59
00:04:01.557 --> 00:04:04.700
&gt;&gt; Bianca Gandolfo: Count like that.

60
00:04:04.700 --> 00:04:11.370
So as we see, we can return the functions
from inside of an object as well.

61
00:04:12.660 --> 00:04:19.630
And this n is still holding access to its
parent scope in its previous environment.

62
00:04:19.630 --> 00:04:25.850
[NOISE]
So if we wanted to call it again, oops.

63
00:04:25.850 --> 00:04:30.038
It's myCounter.count(), and we have
to call that since it's a function.

64
00:04:30.038 --> 00:04:38.662
It's gonna be one.
&gt;&gt; Bianca Gandolfo: This one will be two,

65
00:04:38.662 --> 00:04:46.667
etc.
&gt;&gt; Bianca Gandolfo: Cool,

66
00:04:46.667 --> 00:04:51.590
thumbs?
&gt;&gt; Rich: The only difference between

67
00:04:51.590 --> 00:04:55.960
this and the previous example is that
we're using the dot notation to access

68
00:04:55.960 --> 00:04:58.340
a function in an object.
&gt;&gt; Bianca Gandolfo: Yeah.

69
00:04:58.340 --> 00:05:00.310
&gt;&gt; Rich: That's being returned from the-

70
00:05:00.310 --> 00:05:00.880
&gt;&gt; Bianca Gandolfo: Right, so

71
00:05:00.880 --> 00:05:04.310
the main difference is that, for this one,
we're just returning one function.

72
00:05:04.310 --> 00:05:09.750
And the next one we're returning
an object that contains two functions.

73
00:05:09.750 --> 00:05:15.850
So if you wanted to have to do different
things like reset the counter,

74
00:05:15.850 --> 00:05:19.550
you're gonna need two different functions,
right.

75
00:05:19.550 --> 00:05:20.909
So this is how you would do that.

