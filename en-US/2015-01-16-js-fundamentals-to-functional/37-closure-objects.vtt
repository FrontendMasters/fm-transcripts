WEBVTT

1
00:00:00.178 --> 00:00:03.899
[MUSIC]

2
00:00:03.899 --> 00:00:08.710
&gt;&gt; Bianca Gandolfo: So the other cool
thing is that this also works if

3
00:00:08.710 --> 00:00:13.086
we're returning an object with methods.

4
00:00:13.086 --> 00:00:14.720
So the same rules apply.

5
00:00:14.720 --> 00:00:19.299
Now see, look, we have these functions
that are still inside this parent scope.

6
00:00:20.320 --> 00:00:22.710
Even though we're actually
returning it in an object.

7
00:00:24.790 --> 00:00:26.268
So let's explore it that looks like.

8
00:00:31.468 --> 00:00:34.290
&gt;&gt; Bianca Gandolfo: Well I'll type
it out here and then I'll paste it.

9
00:00:34.290 --> 00:00:38.733
So we're gonna call,
&gt;&gt; Bianca Gandolfo: So

10
00:00:38.733 --> 00:00:41.568
here's like a counter,
we're gonna call counter.

11
00:00:45.048 --> 00:00:47.840
&gt;&gt; Bianca Gandolfo: Okay,
so where did we leave off?

12
00:00:50.070 --> 00:00:52.568
Actually I think we failure the last one,
right last time, so

13
00:00:52.568 --> 00:00:53.974
we should start at the beginning.

14
00:00:53.974 --> 00:00:55.614
I guess that'll be you, Rich.

15
00:00:55.614 --> 00:01:02.439
&gt;&gt; Rich: Okay so,
[COUGH] it's like a global function,

16
00:01:02.439 --> 00:01:06.475
I guess, called counter.

17
00:01:06.475 --> 00:01:07.207
&gt;&gt; Bianca Gandolfo: Mm-hm.

18
00:01:07.207 --> 00:01:11.210
&gt;&gt; Rich: It's based on and
then it finds that and

19
00:01:11.210 --> 00:01:14.760
it goes down to the, skips the whole body.

20
00:01:14.760 --> 00:01:16.750
&gt;&gt; Bianca Gandolfo: So we said great,
there's the counter and we skip it.

21
00:01:16.750 --> 00:01:19.519
And then Grace.

22
00:01:20.670 --> 00:01:21.820
&gt;&gt; Grace: Signed myCounter.

23
00:01:21.820 --> 00:01:25.905
The returned value of counter function.

24
00:01:25.905 --> 00:01:29.170
&gt;&gt; Bianca Gandolfo: Mm-hm,
sure, so we called counter and

25
00:01:29.170 --> 00:01:30.490
then it goes into the counter body.

26
00:01:30.490 --> 00:01:32.140
And then Joe.

27
00:01:34.030 --> 00:01:36.854
&gt;&gt; Joe: Sets the local variable n to zero.

28
00:01:36.854 --> 00:01:37.920
&gt;&gt; Bianca Gandolfo: Mm-hm.

29
00:01:41.560 --> 00:01:47.190
&gt;&gt; Joe: Then my counter is equal to
the return value so you return that.

30
00:01:47.190 --> 00:01:48.090
&gt;&gt; Bianca Gandolfo: What is this?

31
00:01:48.090 --> 00:01:48.590
&gt;&gt; Joe: Two functions.

32
00:01:52.690 --> 00:01:54.519
&gt;&gt; Bianca Gandolfo: Yeah, so
this is an object literal,

33
00:01:54.519 --> 00:01:57.780
it has two properties on it,
one is count and one is reset.

34
00:01:57.780 --> 00:02:00.370
And they're both, so
you could call it a method.

35
00:02:00.370 --> 00:02:05.750
It might not look like an object in
this form, but if we delete this,

36
00:02:07.440 --> 00:02:14.700
you can see that that's just an object
with our properties in there.

37
00:02:16.840 --> 00:02:19.050
So we're returning an object, great.

38
00:02:19.050 --> 00:02:20.610
So what is myCounter now, Kim?

39
00:02:22.910 --> 00:02:26.018
&gt;&gt; Kim: Object count colon the function.

40
00:02:26.018 --> 00:02:28.730
&gt;&gt; Bianca Gandolfo: Mm-hm, totally.

41
00:02:31.351 --> 00:02:35.131
&gt;&gt; Bianca Gandolfo: And then if we
wanted to increment the counter,

42
00:02:35.131 --> 00:02:37.690
how would we do that, William?

43
00:02:39.980 --> 00:02:42.213
Noting that my counter is an object,

44
00:02:42.213 --> 00:02:45.248
actually let's inspect
it before we jump ahead.

45
00:02:49.599 --> 00:02:52.289
&gt;&gt; Bianca Gandolfo: So,
we have my counter,

46
00:02:52.289 --> 00:02:56.261
is an object with two properties so,

47
00:02:56.261 --> 00:03:02.154
if we want it to count,
we wanted our counter to count,

48
00:03:02.154 --> 00:03:06.400
how do we access the counter property?

49
00:03:08.060 --> 00:03:09.040
&gt;&gt; Grace: Dot.
&gt;&gt; Bianca Gandolfo: Yeah we

50
00:03:09.040 --> 00:03:10.590
could use a dot.

51
00:03:10.590 --> 00:03:11.090
Dot what?

52
00:03:13.690 --> 00:03:14.300
&gt;&gt; Grace: Dot count.

53
00:03:14.300 --> 00:03:15.090
&gt;&gt; Bianca Gandolfo: Dot count, like this?

54
00:03:18.200 --> 00:03:22.460
So if we don't call it right,
it's just gonna be the name,

55
00:03:23.780 --> 00:03:27.170
so we need to invoke our function and
it's gonna increment it.

56
00:03:27.170 --> 00:03:30.294
There's one, and we could keep doing it
right, it's just gonna keep counting.

57
00:03:35.173 --> 00:03:36.363
&gt;&gt; Bianca Gandolfo: So
we can see my counter,

58
00:03:36.363 --> 00:03:39.713
it's still just an object that we
haven't effected it or anything and

59
00:03:39.713 --> 00:03:46.250
then if we wanted to reset it,
&gt;&gt; Bianca Gandolfo: Can we do this?

60
00:03:49.380 --> 00:03:50.085
&gt;&gt; Rich: Yep.

61
00:03:50.085 --> 00:03:51.200
&gt;&gt; Bianca Gandolfo: Yep,
that will also work.

62
00:03:51.200 --> 00:03:53.358
You can use bracket notation.

63
00:03:53.358 --> 00:03:53.998
And so,

64
00:04:01.557 --> 00:04:04.700
&gt;&gt; Bianca Gandolfo: Count like that.

65
00:04:04.700 --> 00:04:11.370
So as we see, we can return the functions
from inside of an object as well.

66
00:04:12.660 --> 00:04:19.630
And this n is still holding access to its
parent scope in its previous environment.

67
00:04:19.630 --> 00:04:25.850
[NOISE]
So if we wanted to call it again, oops.

68
00:04:25.850 --> 00:04:30.038
It's myCounter.count(), and we have
to call that since it's a function.

69
00:04:30.038 --> 00:04:32.498
It's gonna be one.

70
00:04:36.318 --> 00:04:39.318
&gt;&gt; Bianca Gandolfo: This one will be two,
etc.

71
00:04:45.758 --> 00:04:47.880
&gt;&gt; Bianca Gandolfo: Cool, thumbs?

72
00:04:50.700 --> 00:04:54.200
&gt;&gt; Rich: The only difference between
this and the previous example is that

73
00:04:54.200 --> 00:04:57.285
we're using the dot notation to
access a function in an object.

74
00:04:57.285 --> 00:04:58.340
&gt;&gt; Bianca Gandolfo: Yeah.

75
00:04:58.340 --> 00:05:00.880
&gt;&gt; Rich: That's being returned from the-
&gt;&gt; Bianca Gandolfo: Right, so

76
00:05:00.880 --> 00:05:04.310
the main difference is that, for this one,
we're just returning one function.

77
00:05:04.310 --> 00:05:09.750
And the next one we're returning
an object that contains two functions.

78
00:05:09.750 --> 00:05:15.850
So if you wanted to have to do different
things like reset the counter,

79
00:05:15.850 --> 00:05:19.550
you're gonna need two different functions,
right.

80
00:05:19.550 --> 00:05:20.909
So this is how you would do that.

