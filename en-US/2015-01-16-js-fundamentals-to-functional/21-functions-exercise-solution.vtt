WEBVTT

1
00:00:00.000 --> 00:00:03.739
[MUSIC]

2
00:00:03.739 --> 00:00:06.630
&gt;&gt; Bianca Gandolfo: It's supposed to be
a little bit of a difficult challenge.

3
00:00:06.630 --> 00:00:10.560
It's really combining all the different
things that we've gone over today,

4
00:00:10.560 --> 00:00:17.140
functions, arrays, objects, loops, and
just really tying everything together.

5
00:00:17.140 --> 00:00:22.530
So let's see,
let me find my solutions, here we go.

6
00:00:25.360 --> 00:00:27.710
&gt;&gt; Speaker 2: Is there
a solution file somewhere?

7
00:00:27.710 --> 00:00:29.740
&gt;&gt; Bianca Gandolfo: There
is a solution slide.

8
00:00:29.740 --> 00:00:31.980
I'll tell you how to get
to the solutions later.

9
00:00:31.980 --> 00:00:36.820
I don't want give it away ahead of
time because then you'll cheat and

10
00:00:36.820 --> 00:00:39.400
that would be too easy.

11
00:00:40.850 --> 00:00:43.770
The first thing is for

12
00:00:43.770 --> 00:00:47.930
questions one and two combined,
we have this animal test user.

13
00:00:47.930 --> 00:00:52.790
For the first one though,
let me just type out the first version.

14
00:00:53.940 --> 00:01:01.610
For the first one,
we can save our AnimalTest = a function.

15
00:01:01.610 --> 00:01:06.800
And this function takes
a username as a parameter.

16
00:01:06.800 --> 00:01:08.400
And then it just returns an object.

17
00:01:11.020 --> 00:01:13.160
So, see that,
see how I expanded that object?

18
00:01:13.160 --> 00:01:16.840
So there's an object there, and
then I just expand it out, and

19
00:01:16.840 --> 00:01:19.710
in there,
I'm going to write some properties and

20
00:01:19.710 --> 00:01:24.456
the property was, I believe it was
just username and then username.

21
00:01:26.020 --> 00:01:27.310
So, this is a little bit confusing.

22
00:01:27.310 --> 00:01:30.450
So, we have username on
one side of the colon and

23
00:01:30.450 --> 00:01:33.330
then we have username on
the other side of the colon.

24
00:01:33.330 --> 00:01:35.380
And username's a parameter,

25
00:01:35.380 --> 00:01:40.170
which one actually is the one that's
going to be turned into the username.

26
00:01:40.170 --> 00:01:42.859
So, if I called this and

27
00:01:42.859 --> 00:01:48.373
I said var myCow = AnimalTest and
then I passed,

28
00:01:48.373 --> 00:01:54.170
what's a good cow name,
like Bessy or something.

29
00:01:56.000 --> 00:01:58.890
Bessy.
I don't know how to spell Bessy, but

30
00:01:58.890 --> 00:02:05.190
that's as good as it's gonna get.

31
00:02:05.190 --> 00:02:10.250
So is the property name Bessy,
or is that value gonna be Bessy?

32
00:02:12.270 --> 00:02:12.870
Absolutely.
So

33
00:02:12.870 --> 00:02:15.850
the value in this case is gonna be Bessy.

34
00:02:15.850 --> 00:02:17.350
Here's the parameter.

35
00:02:17.350 --> 00:02:22.140
When we have a property name on
the left side of the colon like that,

36
00:02:22.140 --> 00:02:26.300
that's gonna be assumed as a string
in object literal notation.

37
00:02:27.390 --> 00:02:30.440
And it won't ever be
evaluated as an expression.

38
00:02:30.440 --> 00:02:35.550
So before I was talking about how we could
use bracket notation to put an expression

39
00:02:35.550 --> 00:02:40.079
for the property name, we can't do
that with object literal notation.

40
00:02:40.079 --> 00:02:42.960
So, keep that in mind that this
will always be assumed as a string.

41
00:02:42.960 --> 00:02:47.561
If it makes you feel better, you can just
put it in quotes to remind yourself that

42
00:02:47.561 --> 00:02:49.483
this one on the left is a string and

43
00:02:49.483 --> 00:02:54.010
the value on the right is the one
that's going to be my parameter.

44
00:02:54.010 --> 00:02:58.630
Which, once I pass the string Bessy,

45
00:02:58.630 --> 00:03:03.670
then that parameter has the value Bessy.

46
00:03:03.670 --> 00:03:12.076
And if we just wanted to
console.log(myCow.username),

47
00:03:12.076 --> 00:03:17.740
that is going to print out Bessy, right?

48
00:03:20.110 --> 00:03:20.720
Thumbs on that?

49
00:03:21.770 --> 00:03:22.650
Thumbs on that?

50
00:03:22.650 --> 00:03:24.100
How many people have finished that one?

51
00:03:26.230 --> 00:03:27.220
Awesome, good job guys.

52
00:03:29.340 --> 00:03:31.110
So that's step one.

53
00:03:31.110 --> 00:03:38.230
Then the second part of the question was,
if the arguments are, let's see.

54
00:03:38.230 --> 00:03:43.830
If the length of the arguments is greater
then one, put the other arguments

55
00:03:43.830 --> 00:03:50.585
as a property, or as an array.

56
00:03:51.780 --> 00:03:52.930
Sorry, let me reword that.

57
00:03:52.930 --> 00:03:58.650
As a property with the value of
an array of those arguments.

58
00:03:58.650 --> 00:03:59.190
Are you guys following?

59
00:03:59.190 --> 00:04:01.950
I kind of lost myself in that explanation.

60
00:04:01.950 --> 00:04:07.280
So, other args is going to be
an array of the arguments passed in,

61
00:04:07.280 --> 00:04:10.000
if there's more than one argument.

62
00:04:10.000 --> 00:04:12.620
And so there's a few ways
you could have done that.

63
00:04:12.620 --> 00:04:14.810
So one way you could do it,
so here we have args,

64
00:04:14.810 --> 00:04:19.810
which is going to be the length of the,
I think a better one would be like,

65
00:04:20.810 --> 00:04:24.640
argLength, just to be like a little
more clear on what args is.

66
00:04:24.640 --> 00:04:28.430
So we say argLength.

67
00:04:28.430 --> 00:04:31.750
So that's going to be the length of
the arg, it's going to be a number, and

68
00:04:31.750 --> 00:04:33.071
then we have a-
&gt;&gt; Speaker 2: Arglength,

69
00:04:33.071 --> 00:04:34.089
in the if statement?

70
00:04:34.089 --> 00:04:36.546
No?

71
00:04:36.546 --> 00:04:38.089
&gt;&gt; Bianca Gandolfo: Thank you.

72
00:04:38.089 --> 00:04:39.210
Someone's paying attention.

73
00:04:39.210 --> 00:04:43.140
Awesome.

74
00:04:44.820 --> 00:04:49.630
So if the length is greater than one, then
we're going to enter into this if block.

75
00:04:49.630 --> 00:04:54.060
And the simplest way, I'm using
the concepts that we actually covered in

76
00:04:54.060 --> 00:04:59.000
the class, is just to loop
through that arguments array and

77
00:04:59.000 --> 00:05:03.340
push them except for the first one,
so that's why our i there,

78
00:05:03.340 --> 00:05:07.420
our var i is gonna start
at one instead of zero.

79
00:05:07.420 --> 00:05:10.680
And so you loop through, and
you push each argument into an array,

80
00:05:10.680 --> 00:05:11.900
and that would create an array.

81
00:05:11.900 --> 00:05:14.870
The other one is what I
mentioned briefly earlier,

82
00:05:14.870 --> 00:05:21.890
the array.prototype.slice.call
will also turn it into an array.

83
00:05:23.190 --> 00:05:26.620
But we can stick to this one
because it's more straightforward.

84
00:05:26.620 --> 00:05:30.540
The other one goes into prototype land
which is not somewhere I really wanna

85
00:05:30.540 --> 00:05:31.250
go right now.

86
00:05:32.930 --> 00:05:35.190
Any questions about this method?

87
00:05:35.190 --> 00:05:38.657
&gt;&gt; Speaker 3: I didn't see that
slice.call in the documentation so

88
00:05:38.657 --> 00:05:41.680
call is a function of slice,
which is a method.

89
00:05:41.680 --> 00:05:45.210
&gt;&gt; Bianca Gandolfo: Call is
a method on all functions.

90
00:05:45.210 --> 00:05:50.203
And if we have time tomorrow
I have some slides that go

91
00:05:50.203 --> 00:05:53.610
over call and apply if we have time.

92
00:05:53.610 --> 00:05:54.630
Fingers crossed.

93
00:05:54.630 --> 00:05:56.006
&gt;&gt; Speaker 3: Call and apply.
&gt;&gt; Bianca Gandolfo: Yeah, so call and

94
00:05:56.006 --> 00:06:00.167
apply are two function methods that are
commonly used and they're really useful

95
00:06:00.167 --> 00:06:05.040
for functional programming when you're
doing some generic things with functions.

96
00:06:05.040 --> 00:06:07.200
But we'll see if we get there tomorrow.

97
00:06:07.200 --> 00:06:08.100
Hopefully we will.

98
00:06:08.100 --> 00:06:10.860
&gt;&gt; Speaker 3: So they're part of any
built in method of any other object.

99
00:06:10.860 --> 00:06:12.499
&gt;&gt; Bianca Gandolfo: Yeah, yeah, exactly.

100
00:06:12.499 --> 00:06:16.117
So like how push is a native array method,
call and

101
00:06:16.117 --> 00:06:18.800
apply are native function methods.

102
00:06:18.800 --> 00:06:20.288
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Bianca Gandolfo: And that goes back to

103
00:06:20.288 --> 00:06:24.448
how functions are also objects,
they also have methods, etc.

104
00:06:24.448 --> 00:06:25.080
Cool.

105
00:06:25.080 --> 00:06:25.877
Did you have a question?

106
00:06:25.877 --> 00:06:27.238
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Bianca Gandolfo: No?

107
00:06:27.238 --> 00:06:28.378
Cool.

108
00:06:36.158 --> 00:06:41.240
&gt;&gt; Bianca Gandolfo: Sweet.

109
00:06:44.510 --> 00:06:48.700
So let's put on word wrap here so
we can see everything.

110
00:06:50.780 --> 00:06:55.830
So here's a more complicated
version of our first animal user.

111
00:06:55.830 --> 00:06:58.854
So it takes a username,
it takes a species, it takes a tag line,

112
00:06:58.854 --> 00:07:00.030
it takes noises.

113
00:07:00.030 --> 00:07:02.200
So starting to sound familiar?

114
00:07:02.200 --> 00:07:04.100
From our other exercises.

115
00:07:04.100 --> 00:07:08.509
So what we're doing here is we're
creating a constructor function for

116
00:07:08.509 --> 00:07:09.690
our animal model.

117
00:07:12.250 --> 00:07:14.498
&gt;&gt; Bianca Gandolfo: And so
here we have an object and

118
00:07:14.498 --> 00:07:19.410
we're just storing it in
a variable which you could do.

119
00:07:19.410 --> 00:07:22.960
And again you can just
put quotes around this.

120
00:07:22.960 --> 00:07:24.850
So you know which one's which.

121
00:07:24.850 --> 00:07:32.540
There you go and
we're just initializing these values.

122
00:07:32.540 --> 00:07:37.497
And here at the very end,
we're returning that object,

123
00:07:37.497 --> 00:07:42.455
and another way that you can
do this is simply by returning

124
00:07:42.455 --> 00:07:47.030
the object literal,
instead of the variable name.

125
00:07:47.030 --> 00:07:49.400
But they do the exact same thing.

126
00:07:49.400 --> 00:07:50.630
There's no difference there.

127
00:07:54.990 --> 00:07:57.870
&gt;&gt; Bianca Gandolfo: Any
questions on this one?

128
00:07:57.870 --> 00:07:59.030
No?

129
00:07:59.030 --> 00:08:00.543
Cool.

130
00:08:00.543 --> 00:08:04.160
So here's just an example
of how you would use it.

131
00:08:04.160 --> 00:08:09.916
So we're passing in a series of arguments,
and then you can console.log(sheep) and

132
00:08:09.916 --> 00:08:17.416
you'll see that sheep is going to be,
&gt;&gt; Bianca Gandolfo: Hopefully,

133
00:08:17.416 --> 00:08:21.980
oops, is going to be an object.

134
00:08:21.980 --> 00:08:23.210
So here's sheep.

135
00:08:23.210 --> 00:08:27.540
Our sheep, and
we see how its name is cloud.

136
00:08:27.540 --> 00:08:29.080
It's a sheep.

137
00:08:29.080 --> 00:08:33.810
Tag line is you can count on me and
it has a noises array of

138
00:08:33.810 --> 00:08:37.440
the noises, and
it has an empty friends array.

139
00:08:39.960 --> 00:08:40.610
I lost where I was.

140
00:08:43.070 --> 00:08:43.598
Questions on that?

141
00:08:43.598 --> 00:08:47.337
Cool.

142
00:08:47.337 --> 00:08:52.467
So, I'm gonna try to go
through this quick so

143
00:08:52.467 --> 00:08:55.620
that we can keep going.

144
00:08:55.620 --> 00:08:58.420
So here's our function add friend,
it takes an animal and

145
00:08:58.420 --> 00:09:02.090
it takes a friend which you
want to add to the friend.

146
00:09:02.090 --> 00:09:07.275
So if you wanted to simply
push the whole object,

147
00:09:07.275 --> 00:09:11.448
it would be animal.friends.push and

148
00:09:11.448 --> 00:09:18.411
you would push that friend and so
that would be the entire object.

149
00:09:18.411 --> 00:09:23.551
So at this point, if we looked at it,
we could do this.

150
00:09:23.551 --> 00:09:24.611
Oops.

151
00:09:24.611 --> 00:09:27.011
I keep trying to open
the console up in Sublime.

152
00:09:27.011 --> 00:09:29.830
It's not liking that.

153
00:09:29.830 --> 00:09:31.553
Do we have sheep here still?

154
00:09:31.553 --> 00:09:32.622
No.

155
00:09:32.622 --> 00:09:33.511
Okay.

156
00:09:37.031 --> 00:09:41.164
&gt;&gt; Bianca Gandolfo: So let's do this.

157
00:09:49.289 --> 00:09:53.620
&gt;&gt; Bianca Gandolfo: [SOUND] Okay.

158
00:10:00.799 --> 00:10:01.660
&gt;&gt; Bianca Gandolfo: Okay.

159
00:10:01.660 --> 00:10:04.000
So we have sheep, and
now I think we'll just add.

160
00:10:07.220 --> 00:10:08.640
&gt;&gt; Bianca Gandolfo: Cloud's
gonna be his own friend.

161
00:10:08.640 --> 00:10:11.099
So we're gonna give sheep a sheep.

162
00:10:13.419 --> 00:10:18.650
&gt;&gt; Bianca Gandolfo: And so
now we can see that sheep

163
00:10:18.650 --> 00:10:22.840
has itself as a friend.

164
00:10:22.840 --> 00:10:24.220
And you can see there.

165
00:10:32.139 --> 00:10:36.582
&gt;&gt; Bianca Gandolfo: And then, if you
wanted to save space, you didn't want to

166
00:10:36.582 --> 00:10:41.843
pass around whole objects or
you didn't want to save whole objects,

167
00:10:41.843 --> 00:10:47.670
you can just keep the username there or
their user ID or something like that.

168
00:10:50.470 --> 00:10:55.249
And do it that way.

169
00:10:55.249 --> 00:10:56.529
And, in that case it
would just save the name.

170
00:10:59.990 --> 00:11:08.270
&gt;&gt; Bianca Gandolfo: So, here are some
other ones, cows, sheep and llamas.

171
00:11:08.270 --> 00:11:10.360
So here's one way that
we can create our farm,

172
00:11:10.360 --> 00:11:14.680
by just using our array little notation,

173
00:11:14.680 --> 00:11:19.810
putting those variables in there that
represent our animal objects like that.

174
00:11:19.810 --> 00:11:22.830
&gt;&gt; Speaker 2: So those were already
created in the animal creator?

175
00:11:22.830 --> 00:11:23.340
&gt;&gt; Bianca Gandolfo: Yeah, up here.

176
00:11:23.340 --> 00:11:24.536
You can kind of see.

177
00:11:24.536 --> 00:11:28.580
Here's llama, here's cow and

178
00:11:28.580 --> 00:11:32.785
here's how you can add matches.

179
00:11:32.785 --> 00:11:33.363
So.

180
00:11:39.323 --> 00:11:40.038
&gt;&gt; Bianca Gandolfo: Okay.

181
00:11:40.038 --> 00:11:43.010
Let's see.

182
00:11:43.010 --> 00:11:46.760
So we're looping through farm.

183
00:11:46.760 --> 00:11:50.320
We could actually use,
which might be better.

184
00:11:50.320 --> 00:11:54.773
Is we could just use it regular for
loop with semicolons rather than this for

185
00:11:54.773 --> 00:11:55.510
in-loop.

186
00:11:55.510 --> 00:11:58.080
Because, again, if we had some properties

187
00:11:58.080 --> 00:12:00.940
on our array it might do some silly
things that we aren't expecting.

188
00:12:04.000 --> 00:12:05.210
But you can also do that as well.

189
00:12:05.210 --> 00:12:09.490
So we have farm and
then inside farm we have animal.

190
00:12:10.600 --> 00:12:13.360
For each animal on the farm, .matches.

191
00:12:13.360 --> 00:12:18.590
So the matches,
it's creating a matches property there and

192
00:12:18.590 --> 00:12:20.050
initializing it to an empty array.

193
00:12:20.050 --> 00:12:26.500
So this function just gives each animal
in our farm the ability to have a match.

194
00:12:30.590 --> 00:12:32.810
Whereas before,
they can only have friends.

195
00:12:32.810 --> 00:12:35.600
Maybe you only get matches
if you're a premium user,

196
00:12:35.600 --> 00:12:39.816
so you can only have friends, and if you
wanted to do the dating-matching part or

197
00:12:39.816 --> 00:12:43.040
something, then you can upgrade them and
give them matches.

198
00:12:46.590 --> 00:12:49.590
Just don't tell them they could just
put this function in their console and

199
00:12:49.590 --> 00:12:50.850
they wouldn't have to pay anything.

200
00:12:52.370 --> 00:12:53.820
That business model will be perfect.

201
00:12:55.610 --> 00:12:58.580
So and
then here's a function that gives matches.

202
00:12:58.580 --> 00:13:04.840
And it looks like it is just gonna loop
through all those animals in the farm.

203
00:13:04.840 --> 00:13:09.363
And it's going to push the first

204
00:13:09.363 --> 00:13:14.060
friend of each animal as a match.

205
00:13:14.060 --> 00:13:17.910
You could get fancy with this and
make it a random match.

206
00:13:17.910 --> 00:13:21.870
Or perhaps in future iterations
of your data structure,

207
00:13:21.870 --> 00:13:26.650
you'll have some ratings based
on a test that they take.

208
00:13:26.650 --> 00:13:31.310
And then they'll find in the farm
other animals that have a similar,

209
00:13:31.310 --> 00:13:33.215
a close rating to them and
then match that way.

210
00:13:33.215 --> 00:13:34.710
Mm-hm.

211
00:13:34.710 --> 00:13:39.770
&gt;&gt; Speaker 2: So on this one, animal,
is it like cow, sheep, llama,

212
00:13:39.770 --> 00:13:43.590
is that what it's, it's not like going
to the username and matching usernames.

213
00:13:43.590 --> 00:13:44.100
&gt;&gt; Bianca Gandolfo: Right.
It's-

214
00:13:44.100 --> 00:13:45.220
&gt;&gt; Speaker 2: It's saying sheep to sheep

215
00:13:45.220 --> 00:13:46.560
and cow to cow.

216
00:13:46.560 --> 00:13:49.100
&gt;&gt; Bianca Gandolfo: Yeah,
exactly, so it's looping through.

217
00:13:49.100 --> 00:13:55.269
And again, this would be better as a for
loop with semi-colons.

218
00:13:55.269 --> 00:13:58.330
It will work this way, but in general,
you only wanna use those for

219
00:13:58.330 --> 00:14:01.349
loops with semi-colons when
you're looping through an array.

220
00:14:01.349 --> 00:14:02.280
&gt;&gt; Speaker 3: I used for each.

221
00:14:03.300 --> 00:14:04.680
&gt;&gt; Bianca Gandolfo: Yeah,
or you can use for each.

222
00:14:04.680 --> 00:14:05.830
We'll talk about that more tomorrow.

223
00:14:07.340 --> 00:14:10.570
Cool, and
this is how you would use giveMatches.

224
00:14:10.570 --> 00:14:15.900
You just pass the whole farm to it.

225
00:14:15.900 --> 00:14:20.030
And then you can check it by
just inspecting your farm and

226
00:14:20.030 --> 00:14:24.020
seeing if there's other
animals in your matches.

227
00:14:26.110 --> 00:14:28.410
I think I said that all without breathing.

228
00:14:28.410 --> 00:14:31.969
Any questions?

229
00:14:31.969 --> 00:14:34.170
No?

230
00:14:34.170 --> 00:14:34.870
&gt;&gt; Speaker 4: I have a question.

231
00:14:34.870 --> 00:14:35.869
&gt;&gt; Bianca Gandolfo: Sure.

232
00:14:35.869 --> 00:14:39.829
&gt;&gt; Speaker 4: [COUGH] Line 75 and line 76.

233
00:14:39.829 --> 00:14:43.530
So, farm on line 75 is an array.

234
00:14:43.530 --> 00:14:48.740
&gt;&gt; Bianca Gandolfo: Same thing with this.

235
00:14:48.740 --> 00:14:53.810
&gt;&gt; Speaker 4: And then that variable
animal, is some indexer into the array.

236
00:14:55.260 --> 00:14:57.510
What is it actually doing
on line 76 where it says

237
00:14:57.510 --> 00:14:59.510
farm-
&gt;&gt; Bianca Gandolfo: So

238
00:14:59.510 --> 00:15:03.340
animal is actually gonna be,
is gonna be the i.

239
00:15:03.340 --> 00:15:09.200
So you could,
maybe it would look better if it was an i.

240
00:15:09.200 --> 00:15:11.870
But in general you're gonna wanna use
the for loop with semicolons here,

241
00:15:11.870 --> 00:15:18.510
where you say for var i equal less than
array.length, that one would be better.

242
00:15:18.510 --> 00:15:21.670
This will work, but
since farm is an array,

243
00:15:22.690 --> 00:15:28.190
in a lot MVCs, at least Backbone,
which is the one I use mostly,

244
00:15:28.190 --> 00:15:30.800
is that your collection is
actually going to be an object.

245
00:15:30.800 --> 00:15:35.450
It's not usually an array, it's usually
an object that contains an array.

246
00:15:37.230 --> 00:15:40.580
That's probably where
the solution is basing that on.

247
00:15:44.890 --> 00:15:45.974
Cool.

248
00:15:45.974 --> 00:15:50.890
All right, so if you don't have any
questions on that, we'll just move

249
00:15:50.890 --> 00:15:51.560
on to nesting.

250
00:15:51.560 --> 00:15:53.440
And that's going to be our last topic for
today.

251
00:15:55.500 --> 00:16:01.890
&gt;&gt; Speaker 2: Can you just speak to the
assignment or the exercise file where you

252
00:16:01.890 --> 00:16:07.130
have under each exercise number
you have a code area and

253
00:16:07.130 --> 00:16:13.010
then you have some items commented out is
that a hint for what you're trying to do?

254
00:16:13.010 --> 00:16:13.510
&gt;&gt; Bianca Gandolfo: Let's see.

255
00:16:15.540 --> 00:16:16.120
This here?

256
00:16:16.120 --> 00:16:16.830
&gt;&gt; Speaker 2: Yeah, so.

257
00:16:16.830 --> 00:16:21.610
&gt;&gt; Bianca Gandolfo: Yeah, so that's saying
that this console log will print out this.

258
00:16:23.440 --> 00:16:25.040
&gt;&gt; Speaker 2: What about
on three below that.

259
00:16:26.230 --> 00:16:27.659
&gt;&gt; Bianca Gandolfo: Yeah, so
we're console logging sheep.

260
00:16:27.659 --> 00:16:29.197
So, sheep should be an object
that looks like this.

261
00:16:29.197 --> 00:16:31.218
&gt;&gt; Speaker 2: So
that's what the log [CROSSTALK] for that.

262
00:16:31.218 --> 00:16:32.518
&gt;&gt; Bianca Gandolfo: Yeah.

263
00:16:32.518 --> 00:16:36.187
So, it's just going to give you some
guidance into what you should be expecting

264
00:16:36.187 --> 00:16:37.518
your solution to look like.

265
00:16:37.518 --> 00:16:38.550
&gt;&gt; Speaker 2: All right, thanks.

266
00:16:38.550 --> 00:16:40.095
&gt;&gt; Speaker 4: Can you go
down to the number eight?

267
00:16:40.095 --> 00:16:41.570
&gt;&gt; Bianca Gandolfo: Mm-hm.

268
00:16:41.570 --> 00:16:43.500
&gt;&gt; Speaker 4: Then so, that matches Zeny?

269
00:16:44.750 --> 00:16:51.040
So that Zeny is a sheep, and
that's why Zeny's in the matches?

270
00:16:51.040 --> 00:16:54.910
&gt;&gt; Bianca Gandolfo: It really depends
on how you implement your matches,

271
00:16:54.910 --> 00:16:56.280
your give matches function.

272
00:16:58.540 --> 00:17:02.560
We don't do species
discrimination on eFarmony,

273
00:17:02.560 --> 00:17:07.011
so it's usually just the first one.

274
00:17:07.011 --> 00:17:09.700
The solution does the first one, so

275
00:17:09.700 --> 00:17:13.680
actually in the solution, it would be moo,
because that would be the frist index.

276
00:17:16.250 --> 00:17:19.000
In this one,
maybe it's always the last one.

277
00:17:19.000 --> 00:17:20.290
Just depends on how you implement it.

278
00:17:20.290 --> 00:17:21.730
There's no robust-
&gt;&gt; Speaker 4: So

279
00:17:21.730 --> 00:17:23.880
we're like matching one thing to another.

280
00:17:23.880 --> 00:17:26.400
We're just saying the first or
the last or whatever.

281
00:17:26.400 --> 00:17:29.430
&gt;&gt; Bianca Gandolfo: Yeah, so
someone from your friends list

282
00:17:29.430 --> 00:17:30.570
will be one of your match.

283
00:17:30.570 --> 00:17:32.210
&gt;&gt; Speaker 4: Got it, okay, right on.

284
00:17:32.210 --> 00:17:34.970
&gt;&gt; Bianca Gandolfo: Yeah and if you want
to build that out into something more

285
00:17:34.970 --> 00:17:36.886
interesting, you're welcome to do that.

286
00:17:36.886 --> 00:17:37.557
&gt;&gt; Speaker 4: Got it.

287
00:17:37.557 --> 00:17:38.579
&gt;&gt; Bianca Gandolfo: Yeah.

288
00:17:38.579 --> 00:17:39.800
&gt;&gt; Speaker 4: Like matching
sheep to sheep or?

289
00:17:39.800 --> 00:17:40.580
&gt;&gt; Bianca Gandolfo: Yeah.

