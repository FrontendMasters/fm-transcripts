WEBVTT

1
00:00:03.657 --> 00:00:05.570
&gt;&gt; Estelle Weyl: But wait, there's more.

2
00:00:05.570 --> 00:00:07.270
Ed Valenti is the one who
did the Ginsu knives.

3
00:00:07.270 --> 00:00:10.770
Some of you may be too old to remember
that Ginsu knife, but yeah, so

4
00:00:10.770 --> 00:00:12.120
there's more.

5
00:00:12.120 --> 00:00:15.691
So we'll basically set up a basic flex.

6
00:00:15.691 --> 00:00:20.362
So let's deep dive, now,
into the properties that

7
00:00:20.362 --> 00:00:24.618
impact the flex container
which is the parent.

8
00:00:28.664 --> 00:00:31.791
&gt;&gt; Estelle Weyl: So there are ways
where you control the flex items,

9
00:00:31.791 --> 00:00:36.446
which are those children, like all
that things from bananas to xylophone,

10
00:00:36.446 --> 00:00:40.027
and can't remember what was A,
those are all flex items.

11
00:00:40.027 --> 00:00:43.430
So the flex container is that
box that they were all in, and

12
00:00:43.430 --> 00:00:47.873
that's the thing we put display flex on,
and you can control the appearance

13
00:00:47.873 --> 00:00:52.267
of the children partially through some
properties of the flex container.

14
00:00:52.267 --> 00:00:57.524
So there's the justify-content property,
and it has many different values,

15
00:00:57.524 --> 00:01:04.265
including flex-start, flex-end, center,
space-between, space-around, space-evenly.

16
00:01:04.265 --> 00:01:09.612
The justify content properties aligns
flex items along the main axis,

17
00:01:09.612 --> 00:01:12.654
which in this case is from left to right.

18
00:01:12.654 --> 00:01:17.677
The align content is on the cross axis,
which is top to bottom.

19
00:01:17.677 --> 00:01:20.379
And that's why I want to cover cross and
main access, so

20
00:01:20.379 --> 00:01:22.000
you'd understand those terms.

21
00:01:22.000 --> 00:01:29.417
So here I have a display flex and,
&gt;&gt; Estelle Weyl: Only three items so

22
00:01:29.417 --> 00:01:31.880
they don't take up the whole space.

23
00:01:31.880 --> 00:01:36.697
So basically justify
content property deals with

24
00:01:36.697 --> 00:01:41.397
what to do with the space
if the sum of the widths or

25
00:01:41.397 --> 00:01:46.213
the heights,
the main dimension of the flex items

26
00:01:46.213 --> 00:01:50.702
is not exactly equal to
the parent container.

27
00:01:50.702 --> 00:01:52.632
So in this case,
we have a lot of free space.

28
00:01:52.632 --> 00:01:55.344
But sometimes,
remember when it was overflowing?

29
00:01:55.344 --> 00:01:57.069
What happens when it overflows?

30
00:01:57.069 --> 00:02:00.253
Does it start at the left, does it start
at the right, does it go in the center?

31
00:02:00.253 --> 00:02:05.653
So these are,
basically the justify-content

32
00:02:05.653 --> 00:02:09.433
says what to do with extra space or

33
00:02:09.433 --> 00:02:13.753
the lack of space along the main axis.

34
00:02:13.753 --> 00:02:18.213
So here we've put space between,
which puts even amounts,

35
00:02:18.213 --> 00:02:23.991
it puts the first one on the left or at
the cross start, I mean at the main start.

36
00:02:23.991 --> 00:02:28.422
So number one, always goes at main start
which is important later on when you have

37
00:02:28.422 --> 00:02:29.347
too many items.

38
00:02:29.347 --> 00:02:32.517
When you have too many items,
a is still gonna be in that corner,

39
00:02:32.517 --> 00:02:33.650
it's gonna grow out.

40
00:02:33.650 --> 00:02:39.135
It puts the second one at main end,
and then it puts this

41
00:02:39.135 --> 00:02:44.156
equal amounts of space
every time it adds ones in.

42
00:02:44.156 --> 00:02:47.471
So that's what space-between does.

43
00:02:47.471 --> 00:02:53.415
Space-around puts the same amount of
space on each side of each element.

44
00:02:53.415 --> 00:02:57.307
So if there's 20 pixels on the left of a,
there's 20 pixels on the right of a, and

45
00:02:57.307 --> 00:03:00.712
there's 20 pixels on the left of b,
and 20 pixels on the right of b, and

46
00:03:00.712 --> 00:03:03.300
20 pixels on the right of c and
on the left of c.

47
00:03:03.300 --> 00:03:06.305
So that means the space between a and

48
00:03:06.305 --> 00:03:10.822
b is twice as wide as the space
between the start and a.

49
00:03:10.822 --> 00:03:12.765
And that's ugly, right?

50
00:03:12.765 --> 00:03:14.950
Who here thinks that's ugly?

51
00:03:14.950 --> 00:03:19.717
So there's also a property called
space-evenly, and that takes care of it,

52
00:03:19.717 --> 00:03:23.776
and puts the same amount of space
on the outside than on the inside.

53
00:03:23.776 --> 00:03:27.318
Space-evenly is not in
the flex box specification,

54
00:03:27.318 --> 00:03:31.813
it's in the positioning specification,
or something like that.

55
00:03:31.813 --> 00:03:35.273
So if you don't see it in the flex box,
it actually is,

56
00:03:35.273 --> 00:03:39.795
it's just they've stopped the flex box and
they've added spacing and

57
00:03:39.795 --> 00:03:43.281
stuff like that, or
whatever that specification is.

58
00:03:43.281 --> 00:03:46.161
So we might get other features.

59
00:03:46.161 --> 00:03:49.334
You have to basically click
through the specification,

60
00:03:49.334 --> 00:03:51.722
which is why this took
four years to write.

61
00:03:51.722 --> 00:03:56.679
It actually took more than that, cuz Eric
had written the first and second and

62
00:03:56.679 --> 00:04:02.181
third edition, so he already had this much
content, and we had to add that much more.

63
00:04:02.181 --> 00:04:06.343
Okay, so that's just,
no, let's go a few more.

64
00:04:06.343 --> 00:04:10.565
There's center,
which groups them all at the center.

65
00:04:10.565 --> 00:04:18.044
There's flex-start, which is main start,
the start of the main access.

66
00:04:18.044 --> 00:04:19.733
There's flex-end.

67
00:04:21.795 --> 00:04:23.793
&gt;&gt; Estelle Weyl: And I think that's it.

68
00:04:23.793 --> 00:04:28.674
Okay, then we have the align-items
property which basically aligns

69
00:04:28.674 --> 00:04:30.666
items along the cross axis.

70
00:04:30.666 --> 00:04:33.646
We just learned main axis
which is justify-content.

71
00:04:33.646 --> 00:04:36.107
Align does it along the cross axis.

72
00:04:36.107 --> 00:04:41.976
And similarly we have flex-start,
flex-end, center, baseline and stretch.

73
00:04:41.976 --> 00:04:44.694
So here are three elements that I have.

74
00:04:44.694 --> 00:04:48.975
[BLANK AUDIO].

75
00:04:48.975 --> 00:04:51.073
And they are all centered.

76
00:04:51.073 --> 00:04:53.313
That is not the default.

77
00:04:53.313 --> 00:04:57.946
The default, which is what
you usually want, is stretch.

78
00:04:57.946 --> 00:05:02.019
There is a three column layout,
right, with no work whatsoever.

79
00:05:02.019 --> 00:05:08.172
It's just display flex,
and that's it, right?

80
00:05:08.172 --> 00:05:11.452
So align-items, center,

81
00:05:11.452 --> 00:05:16.925
we can also do flex-start
which puts it up top.

82
00:05:16.925 --> 00:05:19.960
Flex-end, which puts it at the bottom.

83
00:05:21.760 --> 00:05:24.040
And when I mean bottom I
actually mean in cross end.

84
00:05:24.040 --> 00:05:27.506
It aligns it in cross end, but
I think bottom's easier to use.

85
00:05:27.506 --> 00:05:29.491
We already showed stretch.

86
00:05:29.491 --> 00:05:32.059
We showed center.

87
00:05:32.059 --> 00:05:33.824
So let me show baseline.

88
00:05:35.447 --> 00:05:37.846
&gt;&gt; Estelle Weyl: Baseline
is a little bit weird.

89
00:05:37.846 --> 00:05:41.431
But if you actually took something
like a piece of paper and

90
00:05:41.431 --> 00:05:43.269
went across the whole thing.

91
00:05:43.269 --> 00:05:49.149
This is a another and
header width are all perfectly aligned,

92
00:05:49.149 --> 00:05:52.438
cuz they aligned along baseline.

93
00:05:52.438 --> 00:05:56.093
So if I have more padding
on the top of one or

94
00:05:56.093 --> 00:06:00.908
more margin on the top of one,
it's a one on baseline.

95
00:06:00.908 --> 00:06:04.202
Which is kind of interesting when
you have an aside on one side and

96
00:06:04.202 --> 00:06:05.549
a nav on the another side.

97
00:06:05.549 --> 00:06:07.069
And your main article,

98
00:06:07.069 --> 00:06:11.941
and you have an H1 and an H2 and an H3,
you can align all three at baseline.

99
00:06:11.941 --> 00:06:14.920
Everything else will
just flow in after that.

100
00:06:14.920 --> 00:06:18.012
But the thing is, that does not
lead to a three column layout.

101
00:06:18.012 --> 00:06:22.312
I would rather stretch it, right, and

102
00:06:22.312 --> 00:06:27.795
then make sure that I made
my top padding the same.

103
00:06:27.795 --> 00:06:29.274
But that is baseline.

104
00:06:29.274 --> 00:06:36.527
Okay, so I did say that I would
have the visibility of collapse.

105
00:06:39.327 --> 00:06:44.288
&gt;&gt; Estelle Weyl: It looks
like visibility hidden.

106
00:06:44.288 --> 00:06:45.918
Doesn't it?

107
00:06:45.918 --> 00:06:51.056
Because that says align-items: center,
that's center this way.

108
00:06:52.686 --> 00:06:55.884
&gt;&gt; Estelle Weyl: The default is
flex-start, so if I do justify.

109
00:07:01.903 --> 00:07:03.660
&gt;&gt; Estelle Weyl: Okay.

110
00:07:03.660 --> 00:07:06.325
See, I look things up.

111
00:07:06.325 --> 00:07:12.841
If I do,
&gt;&gt; Estelle Weyl: Justify-content:

112
00:07:12.841 --> 00:07:18.678
flex-start; it doesn't change.

113
00:07:18.678 --> 00:07:25.204
Because the item is taking up its full
width, it's basically disability hidden.

114
00:07:25.204 --> 00:07:27.423
Okay, then we have
the align-content property, and

115
00:07:27.423 --> 00:07:30.464
the values of the align-content
are flex-start, flex-end, center,

116
00:07:30.464 --> 00:07:33.277
space-between, space-around,
stretch, and space-evenly.

117
00:07:33.277 --> 00:07:37.649
Doesn't that sound exactly
like justify-content?

118
00:07:37.649 --> 00:07:41.884
&gt;&gt; Estelle Weyl: But that only
applies to multi-line containers,

119
00:07:41.884 --> 00:07:46.223
originally it was just
within its one line, right?

120
00:07:46.223 --> 00:07:49.027
We were aligns thing within one line.

121
00:07:49.027 --> 00:07:52.242
Sometimes we have more than one line.

122
00:07:52.242 --> 00:07:55.993
So,
&gt;&gt; Estelle Weyl: So

123
00:07:55.993 --> 00:07:58.564
here we have the align-content property.

124
00:07:58.564 --> 00:08:06.000
And right now, the value is flex-end,
so all the lines are at the bottom.

125
00:08:06.000 --> 00:08:09.067
Before it was just the flex
items in that one line,

126
00:08:09.067 --> 00:08:12.074
we're at the bottom of their flex line,
right?

127
00:08:12.074 --> 00:08:15.517
Here, all the lines are at
the bottom of this container.

128
00:08:15.517 --> 00:08:19.605
So this container is 400 pixels high,
and it could be anywhere.

129
00:08:19.605 --> 00:08:22.384
It could be at flex-start.

130
00:08:23.669 --> 00:08:26.343
&gt;&gt; Estelle Weyl: Right, so
all the lines are pushed to the top.

131
00:08:28.432 --> 00:08:31.166
&gt;&gt; Estelle Weyl: We have stretch.

132
00:08:31.166 --> 00:08:38.722
And when I said the example doesn't
work for stretch, it apparently does.

133
00:08:38.722 --> 00:08:42.264
Before, the yellow and
red lines would not be in the right spot.

134
00:08:42.264 --> 00:08:45.990
So no, it doesn't, cuz these
are actually taking up the whole thing.

135
00:08:45.990 --> 00:08:47.029
They're stretching.

136
00:08:47.029 --> 00:08:49.109
The yellow and
red lines would actually meet.

137
00:08:49.109 --> 00:08:51.722
So when I say this example
doesn't work for stretch,

138
00:08:51.722 --> 00:08:54.112
the lines are actually
taking up the full width.

139
00:08:54.112 --> 00:08:56.772
It's just you can't see it.

140
00:08:56.772 --> 00:08:58.987
Then, we have baseline.

141
00:09:01.636 --> 00:09:02.410
&gt;&gt; Estelle Weyl: And then,

142
00:09:02.410 --> 00:09:08.395
we have space-between
&gt;&gt; Estelle Weyl: And so you see here,

143
00:09:08.395 --> 00:09:13.803
the first line is at the top,
the second line is placed at the bottom,

144
00:09:13.803 --> 00:09:18.384
and the third line the spaces
evenly around both of those.

145
00:09:18.384 --> 00:09:23.844
So we can do space-around and
then space-evenly.

146
00:09:26.193 --> 00:09:31.148
&gt;&gt; Estelle Weyl: So the difference
between this one and the other one,

147
00:09:31.148 --> 00:09:33.029
let me just go here.

148
00:09:35.568 --> 00:09:39.022
&gt;&gt; Estelle Weyl: So
I want all items at flex-start.

149
00:09:39.022 --> 00:09:45.598
I could also do a stretch,
&gt;&gt; Estelle Weyl: Right?

150
00:09:48.025 --> 00:09:50.420
&gt;&gt; Estelle Weyl: And
that makes all of them stretch.

151
00:09:50.420 --> 00:09:52.191
And then let's see what
happens when I do stretch.

152
00:09:54.358 --> 00:09:58.305
&gt;&gt; Estelle Weyl: So remember, I said
the example doesn't work with stretch?

153
00:09:58.305 --> 00:10:00.797
It's the example's actually working
fine with stretch, it's the yellow and

154
00:10:00.797 --> 00:10:02.750
red lines that aren't moving.

155
00:10:02.750 --> 00:10:04.891
So you see how a, b, c, d, and

156
00:10:04.891 --> 00:10:08.694
e go all the way from the yellow
line to the yellow line.

157
00:10:08.694 --> 00:10:13.009
And f, g, h, i, j go all the way from
the yellow line to the next yellow line.

158
00:10:13.009 --> 00:10:16.735
And k goes all the way from
the yellow line to the bottom,

159
00:10:16.735 --> 00:10:20.956
because all the elements
are stretched within their own line.

160
00:10:20.956 --> 00:10:24.180
And the align-content is stretched.

161
00:10:24.180 --> 00:10:34.111
So let's switch this to,
&gt;&gt; Estelle Weyl: Center.

162
00:10:34.111 --> 00:10:38.736
Okay, so
here they're all grouped in the center.

163
00:10:38.736 --> 00:10:45.658
They're all stretched with
the align-items property.

164
00:10:45.658 --> 00:10:51.560
But, all the lines are grouped in the
center with the align-content property.

165
00:10:51.560 --> 00:10:56.870
Are you understanding the difference
between align-items and align-content?

166
00:10:56.870 --> 00:10:59.619
I would be surprised if
you were because this took

167
00:10:59.619 --> 00:11:01.573
me forever to wrap my head around.

168
00:11:01.573 --> 00:11:06.342
Just realize that the align-items
is within its own line.

169
00:11:06.342 --> 00:11:09.636
Is it at the top, at the bottom,
in the middle or stretched?

170
00:11:09.636 --> 00:11:13.460
And the align-content is the full line,

171
00:11:13.460 --> 00:11:17.290
like all the lines within the container.

172
00:11:17.290 --> 00:11:18.647
Are they all grouped at the top?

173
00:11:18.647 --> 00:11:19.841
Are they all grouped at the bottom?

174
00:11:19.841 --> 00:11:21.287
Are they all grouped in the center?

175
00:11:21.287 --> 00:11:25.183
Are they spaced out, or not?

176
00:11:25.183 --> 00:11:27.230
So let me put this back to flex-start, or

177
00:11:27.230 --> 00:11:30.394
I'm gonna put it at flex-end just
to make life more confusing.

178
00:11:32.668 --> 00:11:34.423
&gt;&gt; Estelle Weyl: And
let me go back to the top.

179
00:11:37.374 --> 00:11:41.943
&gt;&gt; Estelle Weyl: Align-content, so we did
center, and then let's do space-evenly.

180
00:11:43.830 --> 00:11:49.410
&gt;&gt; Estelle Weyl: So
there's as much space between

181
00:11:49.410 --> 00:11:54.923
main start and the yellow line.

182
00:11:54.923 --> 00:11:58.342
No, that's cross start in the yellow line,
between the red and

183
00:11:58.342 --> 00:12:01.444
the yellow line,
between the second red and yellow line,

184
00:12:01.444 --> 00:12:03.742
and between the third red line and
the end.

185
00:12:03.742 --> 00:12:05.593
Does that make sense to people?

186
00:12:05.593 --> 00:12:09.783
This is one of those things where I
don't expect you to fully graph it.

187
00:12:09.783 --> 00:12:12.818
Hopefully, after we're done with
grids you'll fully understand it.

