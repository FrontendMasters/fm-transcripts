WEBVTT

1
00:00:03.126 --> 00:00:04.534
&gt;&gt; Estelle Weyl: So
let's go onto the attribute

2
00:00:04.534 --> 00:00:09.301
selectors.
&gt;&gt; Estelle Weyl: Originally we had just

3
00:00:09.301 --> 00:00:13.610
the attribute selector,
which is does this attribute exist?

4
00:00:13.610 --> 00:00:17.231
So every HTML element can
have a series of attributes.

5
00:00:17.231 --> 00:00:22.230
Some of them are valid,
some of them are invalid.

6
00:00:22.230 --> 00:00:25.440
Doesn't matter if they're valid or
invalid, CSS will still match them.

7
00:00:26.530 --> 00:00:29.060
But it's better to use valid attributes.

8
00:00:29.060 --> 00:00:31.500
Like you really don't need
a type attribute on a paragraph,

9
00:00:31.500 --> 00:00:33.390
cuz it doesn't make any sense.

10
00:00:33.390 --> 00:00:36.895
But you could put a type attribute
on a paragraph and target it.

11
00:00:36.895 --> 00:00:39.260
So you can use these.

12
00:00:39.260 --> 00:00:41.230
Here I have [alt].

13
00:00:42.460 --> 00:00:45.190
Which says, does the alt attribute exist?

14
00:00:45.190 --> 00:00:51.450
The alt attribute is basically
an attribute of the image element,

15
00:00:51.450 --> 00:00:57.510
and I think of the area for,
anyone remember image maps?

16
00:00:59.380 --> 00:01:01.449
Anyone used an image map
in the last ten years?

17
00:01:02.500 --> 00:01:06.051
In the last ten years?
&gt;&gt; Speaker 2: The last ten years?

18
00:01:06.051 --> 00:01:06.630
&gt;&gt; Estelle Weyl: Yeah.

19
00:01:06.630 --> 00:01:08.973
Yeah, okay, we have one person-
&gt;&gt; Speaker 2: And

20
00:01:08.973 --> 00:01:12.272
it's probably been nine years ago.
&gt;&gt; Estelle Weyl: Okay.

21
00:01:12.272 --> 00:01:19.210
[LAUGH] So the alt attribute, this would
be a good way of actually doing testing.

22
00:01:20.910 --> 00:01:24.912
Which element do you have,
which element has an alt attribute?

23
00:01:24.912 --> 00:01:29.730
Because you always want to include and
alt attribute with all of your images.

24
00:01:29.730 --> 00:01:31.240
No matter what your image has,

25
00:01:31.240 --> 00:01:35.250
if you have the image element,
put an alt attribute in it.

26
00:01:35.250 --> 00:01:36.530
It is not accessible if you don't.

27
00:01:37.860 --> 00:01:39.800
And that means if it's just pretty and

28
00:01:39.800 --> 00:01:42.000
doesn't have any content
put an empty element.

29
00:01:42.000 --> 00:01:44.116
It doesn't matter but
always include the alt attribute.

30
00:01:45.380 --> 00:01:49.936
So you could say,
&gt;&gt; Estelle Weyl: Image alt display none,

31
00:01:49.936 --> 00:01:54.889
and then all the images that you have that
don't have the attributes would still show

32
00:01:54.889 --> 00:01:59.493
and then you would know which ones are
inaccessible and you could update them,

33
00:01:59.493 --> 00:02:02.864
or you could do something
like img:not:([alt]).

34
00:02:04.040 --> 00:02:06.500
And say which images don't have alt
attributes and target that way,

35
00:02:06.500 --> 00:02:07.610
we'll cover not in a bit.

36
00:02:08.940 --> 00:02:11.910
And then you could say which elements
that are descended with a form,

37
00:02:11.910 --> 00:02:14.470
have a type attribute and
target it that way.

38
00:02:15.960 --> 00:02:18.854
So, it would match input type date but

39
00:02:18.854 --> 00:02:24.914
it would not match a select because even
though select is a descendant of a form,

40
00:02:24.914 --> 00:02:28.635
the type attribute makes
no sense on the select.

41
00:02:28.635 --> 00:02:31.570
So CSS 2 gave us a few
attribute selectors.

42
00:02:31.570 --> 00:02:35.000
This came on the one we just saw
on the first page, came in CSS 2.

43
00:02:35.000 --> 00:02:37.280
And it gave us a few others.

44
00:02:37.280 --> 00:02:41.680
Not only could we use attribute to say is
the attribute present, it doesn't matter

45
00:02:41.680 --> 00:02:46.705
what the value is, but we could also
target if it's the exact value.

46
00:02:46.705 --> 00:02:53.780
Case-sensitive, if the value
itself is case-sensitive.

47
00:02:53.780 --> 00:02:55.620
So type equals date.

48
00:02:55.620 --> 00:02:58.710
That's HTML, that is not case-sensitive.

49
00:02:58.710 --> 00:03:00.910
But, if you put class.

50
00:03:00.910 --> 00:03:04.400
Like a string that you would generate
anytime you generate a string and

51
00:03:04.400 --> 00:03:07.040
you created it yourself,
it is case sensitive.

52
00:03:07.040 --> 00:03:11.710
So it would be a case sensitive
string that is an exact match.

53
00:03:13.420 --> 00:03:18.610
And then we've got also the | =,
which matches anything that

54
00:03:18.610 --> 00:03:24.240
starts with whatever that value is, with
or without a dash that comes after it.

55
00:03:24.240 --> 00:03:25.842
So why would you need something like that?

56
00:03:25.842 --> 00:03:33.323
Languages, so EN-US or EN-UK,
you could just say LANG pipe equals EN and

57
00:03:33.323 --> 00:03:40.120
then you would match any English no
matter what country it was from.

58
00:03:41.370 --> 00:03:47.635
And here is the example right there.
&gt;&gt; Estelle Weyl: And

59
00:03:47.635 --> 00:03:51.435
then we have attribute selectors
that we received in level 3.

60
00:03:51.435 --> 00:03:56.831
You can put the carat
before the equals sign,

61
00:03:56.831 --> 00:04:02.795
right here, and
say any attribute, right here,

62
00:04:02.795 --> 00:04:07.350
who's value starts with that value.

63
00:04:08.580 --> 00:04:13.220
So you could find an external link,
which with http and

64
00:04:13.220 --> 00:04:20.110
that would match https and http://,

65
00:04:20.110 --> 00:04:23.310
or you could target,
in this example I've done a mail two link.

66
00:04:25.890 --> 00:04:30.790
This isn't quite right, cuz you could
actually have a folder called http.

67
00:04:30.790 --> 00:04:35.500
But, if you really wanted to do it exact,
so, these two examples,

68
00:04:35.500 --> 00:04:36.960
I actually put here for a reason.

69
00:04:38.220 --> 00:04:40.850
These are two good examples to use.

70
00:04:40.850 --> 00:04:44.640
If you are printing a style sheet,
like if you're in your print style sheet.

71
00:04:44.640 --> 00:04:48.880
If someone is printing your page,
they can't see where the link goes, right?

72
00:04:48.880 --> 00:04:54.331
So if it's a mail-to link,
you can actually,

73
00:04:54.331 --> 00:04:58.282
it says email me, like George@ or

74
00:04:58.282 --> 00:05:02.932
if it's an, H, like an external link.

75
00:05:02.932 --> 00:05:08.417
In this example it says after
any link that starts with H ref,

76
00:05:08.417 --> 00:05:13.473
that's H ref rather starts with http,
as the content,

77
00:05:13.473 --> 00:05:20.809
put an opening parenthesis, the attribute
H ref and then closing parenthesis.

78
00:05:20.809 --> 00:05:23.969
And so when you printed a link,
but it would print out,

79
00:05:23.969 --> 00:05:26.716
like if you printed a page and
it had links in it,

80
00:05:26.716 --> 00:05:30.340
it would actually add the URL,
but only for external links.

81
00:05:30.340 --> 00:05:34.070
Because internal links, do you
really want to show your navigation?

82
00:05:35.200 --> 00:05:39.870
No, but if you're saying like, this is a
really good restaurant, here is their URL

83
00:05:39.870 --> 00:05:44.910
and you just say a Chinese restaurant,
and it's around Chinese restaurant.

84
00:05:44.910 --> 00:05:46.470
Well, I don't know what
Chinese restaurant that is.

85
00:05:46.470 --> 00:05:49.850
When you print it,
it doesn't help you, but here,

86
00:05:49.850 --> 00:05:52.260
that's one way to print that URL.

87
00:05:52.260 --> 00:05:54.440
The one above it is not actually for

88
00:05:54.440 --> 00:05:59.290
print, it's for
providing progressive enhancement.

89
00:05:59.290 --> 00:06:04.127
So basically, you have a mail to link and
if you have a wider screen you could put

90
00:06:04.127 --> 00:06:09.112
the full email address plus the icon, if
you have a narrower screen you could just

91
00:06:09.112 --> 00:06:14.049
put the icon.
&gt;&gt; Estelle Weyl: You could

92
00:06:14.049 --> 00:06:17.130
add a background image and
some padding to it, or whatever.

93
00:06:18.170 --> 00:06:23.180
Then there's the ending, so dollar sign
says it's an attribute selector that says

94
00:06:23.180 --> 00:06:29.940
any element that has this attribute with a
value that ends in whatever that value is.

95
00:06:29.940 --> 00:06:33.380
So in these examples, I use PDF.

96
00:06:33.380 --> 00:06:37.980
There is nothing I hate more than opening
a link and not knowing that it is going to

97
00:06:37.980 --> 00:06:42.170
open an application or
it's gonna download something.

98
00:06:42.170 --> 00:06:45.420
So this something that improves usability.

99
00:06:45.420 --> 00:06:49.700
When you say find every single
link that ends with PDF, and

100
00:06:49.700 --> 00:06:55.660
either put an icon of
the PDF icon on that link,

101
00:06:55.660 --> 00:06:59.980
or put the content
parenthesis PDF afterwards.

102
00:06:59.980 --> 00:07:04.100
It improves usabilty and also if you're
doing like a content management system and

103
00:07:04.100 --> 00:07:07.810
you have no control over who is
putting content onto your website.

104
00:07:07.810 --> 00:07:10.610
You can just say whenever somebody puts
a mail to link I'm gonna put a little

105
00:07:10.610 --> 00:07:11.260
email icon.

106
00:07:11.260 --> 00:07:12.680
Whenever someone puts a PDF,

107
00:07:12.680 --> 00:07:15.180
I don't even have to teach them that
this is what they're supposed to do.

108
00:07:15.180 --> 00:07:17.170
That they're supposed to indicate and
to use best usability,

109
00:07:17.170 --> 00:07:21.630
and progressively enhance stuff,
I'm just gonna do it for them.

110
00:07:21.630 --> 00:07:25.119
And then we have E[attr*=val] and

111
00:07:25.119 --> 00:07:30.351
what that does is it's with,
that string val is anywhere

112
00:07:30.351 --> 00:07:35.412
within the content.
&gt;&gt; Estelle Weyl: So

113
00:07:35.412 --> 00:07:41.579
earlier I was talking
about case sensitivity.

114
00:07:41.579 --> 00:07:48.635
In HTML five, attribute values
are not case sensitive and

115
00:07:48.635 --> 00:07:54.539
attributes themselves
are not case sensitive.

116
00:07:56.130 --> 00:07:57.710
But there are some that
are case sensitive.

117
00:07:57.710 --> 00:08:01.000
I did mention that whenever you
have a string that you create it's

118
00:08:01.000 --> 00:08:03.443
case sensitive.

119
00:08:03.443 --> 00:08:10.291
In CSS Selector level 4, we actually get
this little i that we can do a space i and

120
00:08:10.291 --> 00:08:15.009
it basically says,
this value but case insensitive.

121
00:08:16.370 --> 00:08:21.210
So if you were using XML and

122
00:08:21.210 --> 00:08:25.520
you had check box that was lowercase
that would be the correct way to do it.

123
00:08:25.520 --> 00:08:27.996
Because it's XML it's
suppose to be all lowercase.

124
00:08:31.270 --> 00:08:33.880
So I did a CodePen Test.

125
00:08:33.880 --> 00:08:35.720
I think I did an interesting example here.

126
00:08:35.720 --> 00:08:36.220
Let's just see.

127
00:08:37.440 --> 00:08:42.190
This was to test for
case insensitivity and if it still worked.

128
00:08:42.190 --> 00:08:47.450
So I have, if red it's not supported,
if light's green, it's supported.

129
00:08:47.450 --> 00:08:50.520
So when I wrote this deck,
when I started writing it,

130
00:08:50.520 --> 00:08:52.786
it wasn't supported in all browsers.

131
00:08:52.786 --> 00:08:59.790
And so what would be case sensitive
versus not case sensitive.

132
00:08:59.790 --> 00:09:02.950
I have a div with an ID of foo,
right, lowercase foo.

133
00:09:05.250 --> 00:09:11.480
I can say, match with id of FOO uppercase.

134
00:09:11.480 --> 00:09:12.120
Is this big enough?

135
00:09:12.120 --> 00:09:14.280
Let's make this bigger, right?

136
00:09:15.820 --> 00:09:17.290
And says background color blue.

137
00:09:17.290 --> 00:09:18.510
But it's not blue.

138
00:09:18.510 --> 00:09:24.640
If I add an I right there it turned blue.

139
00:09:27.460 --> 00:09:29.020
So that means it's
supported in this browser.

140
00:09:31.190 --> 00:09:36.050
With type text, right is in,
it's not case-sensitive,

141
00:09:36.050 --> 00:09:40.550
cuz it's an HTML attribute value, versus
this, which is a string that I created.

142
00:09:40.550 --> 00:09:42.969
And so the &lt;input type ="text"/&gt;,

143
00:09:42.969 --> 00:09:47.752
which is the second thing here,
&gt;&gt; Estelle Weyl: It's blue,

144
00:09:47.752 --> 00:09:51.640
because it inherited from this,
and overwrote that.

145
00:09:51.640 --> 00:09:53.380
Oops, it overwrote this.

146
00:09:53.380 --> 00:09:58.240
Because here, it says input[type="TEXT"
i], case insensitive.

147
00:09:58.240 --> 00:10:01.724
And then with the exact same specificity,
both of these have,

148
00:10:01.724 --> 00:10:06.895
this has a specificity,
&gt;&gt; Estelle Weyl: Of 1 for the element,

149
00:10:06.895 --> 00:10:13.308
and the attribute selector is considered
to have the same specificity as a class.

150
00:10:13.308 --> 00:10:16.380
So it's zero, one, one.

151
00:10:16.380 --> 00:10:19.520
And this has zero, one, one as well.

152
00:10:19.520 --> 00:10:24.270
The i has no weight so even though

153
00:10:24.270 --> 00:10:28.470
this one is actually more specific than
that one cuz that's case insensitive.

154
00:10:28.470 --> 00:10:31.640
So because this is not case sensitive,

155
00:10:31.640 --> 00:10:36.160
cuz it's an HTML attribute,
then that's why this was blue.

156
00:10:36.160 --> 00:10:37.858
But this was case sensitive,
so it's green.

