WEBVTT

1
00:00:02.724 --> 00:00:04.789
&gt;&gt; Estelle Weyl: I wanna talk
about relational selectors and

2
00:00:04.789 --> 00:00:08.028
combinators.
&gt;&gt; Estelle Weyl: So,

3
00:00:08.028 --> 00:00:13.039
as previously mentioned,
there is the descendant selector.

4
00:00:13.039 --> 00:00:16.229
It's the combinator of a space.

5
00:00:16.229 --> 00:00:21.591
So here it says ul li, so
it matches every list item

6
00:00:21.591 --> 00:00:26.454
that it is a descendant
of an unordered list.

7
00:00:26.454 --> 00:00:31.145
So here, on the right-hand side,
we have ordered list, and

8
00:00:31.145 --> 00:00:34.857
nested within that,
we have an unordered list.

9
00:00:34.857 --> 00:00:40.171
If I say ol li it matches everything.

10
00:00:40.171 --> 00:00:45.010
And so I actually added some opacity and
you'll see that A B and

11
00:00:45.010 --> 00:00:47.343
C were kind of matched twice.

12
00:00:47.343 --> 00:00:53.128
Because, the li,
that is a descendant of the unordered

13
00:00:53.128 --> 00:00:57.940
list is also a descendant
of the ordered list.

14
00:00:57.940 --> 00:01:03.235
But the ones that are just a descendant of
the ordered list only match the first one.

15
00:01:03.235 --> 00:01:06.764
So basically it got the color

16
00:01:06.764 --> 00:01:13.664
twice.
&gt;&gt; Estelle Weyl: It

17
00:01:13.664 --> 00:01:15.954
got the color twice from just that.

18
00:01:15.954 --> 00:01:18.617
Because it is both a child and
a grandchild.

19
00:01:18.617 --> 00:01:24.936
Here, if I click on ol
greater-than sign li,

20
00:01:24.936 --> 00:01:29.958
that means, just the list items that

21
00:01:29.958 --> 00:01:34.341
are a child of the ordered list.

22
00:01:34.341 --> 00:01:40.266
So why is a, b, and c gray?
&gt;&gt; Estelle Weyl: Because

23
00:01:40.266 --> 00:01:45.000
it actually is nested within a gray
parent, which is the parent li.

24
00:01:45.000 --> 00:01:48.183
So that parent li has been
targeted as being gray, and so

25
00:01:48.183 --> 00:01:50.915
the whole thing has
a background of being gray.

26
00:01:50.915 --> 00:01:55.484
It's not those individual items
that then were also targeted.

27
00:01:55.484 --> 00:01:59.887
Then there's the adjacent
siblings selector.

28
00:01:59.887 --> 00:02:06.348
So number 4 has a class of hasaclass,
I should come up with better names.

29
00:02:06.348 --> 00:02:12.363
So this selector right here says find
the li that comes immediately after,

30
00:02:12.363 --> 00:02:15.234
basically having the same parent.

31
00:02:15.234 --> 00:02:17.366
It's nested in the same parent.

32
00:02:17.366 --> 00:02:21.658
It comes immediately after
an li that has a class.

33
00:02:21.658 --> 00:02:23.519
That's considered the adjacent
sibling selector.

34
00:02:23.519 --> 00:02:25.894
So let me see if I can get rid of this.

35
00:02:25.894 --> 00:02:30.838
No, I can't.
&gt;&gt; Estelle Weyl: Okay.

36
00:02:30.838 --> 00:02:35.769
I have a small problem which is the last

37
00:02:35.769 --> 00:02:40.401
one is not visible and it has tilde.

38
00:02:40.401 --> 00:02:44.975
So instead of the plus
right here it has a tilde.

39
00:02:44.975 --> 00:02:49.129
The tilde is the general sibling selector.

40
00:02:49.129 --> 00:02:55.208
So, the general sibling selector,
which was new in IE7,

41
00:02:55.208 --> 00:03:00.203
so it's not new anymore,
targets the element.

42
00:03:00.203 --> 00:03:04.010
So if it said li.hasaclass till the li,
it,

43
00:03:04.010 --> 00:03:09.421
it means match any li that comes after,
not immediately after,

44
00:03:09.421 --> 00:03:13.650
but just generally after
an ally that has a class.

45
00:03:13.650 --> 00:03:18.950
So here, number 4 has a class, and
5, 6 and 7 are general siblings.

46
00:03:18.950 --> 00:03:22.847
They're not the adjacent sibling, which
is the plus sign, they are the tilde,

47
00:03:22.847 --> 00:03:28.918
which is the general sibling.
&gt;&gt; Estelle Weyl: Just so

48
00:03:28.918 --> 00:03:32.009
you know how I actually did that
JavaScript, I used the selectors API.

49
00:03:32.009 --> 00:03:37.339
And I basically, the reason I'm pointing
this out is, in JavaScript you can

50
00:03:37.339 --> 00:03:41.921
see querySelector and querySelectorAll.
&gt;&gt; Estelle Weyl: And

51
00:03:41.921 --> 00:03:46.838
target, you can put any css
select that we cover today

52
00:03:46.838 --> 00:03:50.672
can put in there and target that element.

53
00:03:50.672 --> 00:03:54.290
The first one comes back
with just the first element.

54
00:03:54.290 --> 00:03:58.528
The second one which is querySelectorAll
comes back with all of the element.

55
00:03:58.528 --> 00:04:02.020
And then you could do something..

56
00:04:02.020 --> 00:04:05.203
You see,
this is a little bit more complex.

57
00:04:05.203 --> 00:04:08.753
It says, find me all the elements
that had the class of foo,

58
00:04:08.753 --> 00:04:10.463
that are descendant of bar.

59
00:04:10.463 --> 00:04:12.751
And you can actually get
much complex than this.

60
00:04:12.751 --> 00:04:14.924
You can put,

61
00:04:24.331 --> 00:04:30.570
&gt;&gt; Estelle Weyl: Any descendent of
bar that also has a type attribute.

62
00:04:30.570 --> 00:04:31.896
So you can put anything in there and

63
00:04:31.896 --> 00:04:34.333
you can use JavaScript to define
those elements if you need to.

64
00:04:34.333 --> 00:04:38.339
And so I basically used the selectors
API with the class list,

65
00:04:38.339 --> 00:04:42.821
which is a feature in JavaScript as well,
to add and remove classes.

66
00:04:42.821 --> 00:04:48.618
And that's how I did the JavaScript
that selected those.

67
00:04:48.618 --> 00:04:53.378
So I want you to think about the fact
that you can add and remove classes and

68
00:04:53.378 --> 00:04:54.939
have query selector and

69
00:04:54.939 --> 00:04:59.797
querySelectorAll in your JS and
add move classList and target elements.

