WEBVTT

1
00:00:03.270 --> 00:00:09.587
&gt;&gt; Estelle: So we've talked
about controlling the placement.

2
00:00:09.587 --> 00:00:11.487
But we actually haven't talked
about making it pretty yet.

3
00:00:11.487 --> 00:00:16.228
So now that we have all of these
items we want to make them grow, and

4
00:00:16.228 --> 00:00:18.741
shrink, and to be the right size.

5
00:00:18.741 --> 00:00:21.206
So for that we have flexibility.

6
00:00:21.206 --> 00:00:25.200
So we have three properties that
are actually part of the flex shorthand.

7
00:00:25.200 --> 00:00:30.187
And you are highly encouraged to use
the flex shorthand and not the flex-grow,

8
00:00:30.187 --> 00:00:32.206
flex-shrink or flex-basis.

9
00:00:32.206 --> 00:00:35.680
But we're gonna cover the flex-grow,
flex-shrink and flex-basis so

10
00:00:35.680 --> 00:00:37.030
you fully understand them.

11
00:00:37.030 --> 00:00:40.337
That way you fully understand what you're
writing when you write the shorthand.

12
00:00:40.337 --> 00:00:45.485
So the flex-grow basically says
if you have any extra space,

13
00:00:45.485 --> 00:00:52.221
if there's any available space, how do
you divide that up among the flex items?

14
00:00:52.221 --> 00:00:56.909
You divide it up among the flex
items that have a flex-grow value of

15
00:00:56.909 --> 00:01:02.132
anything greater than zero.
&gt;&gt; Estelle: Proportionally

16
00:01:02.132 --> 00:01:03.260
based on that value.

17
00:01:03.260 --> 00:01:06.739
So if you have one that has 0.1,
one that has a value of 1, and

18
00:01:06.739 --> 00:01:12.004
one that has a value of 2.
&gt;&gt; Estelle: Let's

19
00:01:12.004 --> 00:01:17.360
say you have 210 pixels, no, 310 pixels.

20
00:01:17.360 --> 00:01:23.468
The one that says 2 will get 200 pixels,
the one that says 1 will get 100 pixels.

21
00:01:23.468 --> 00:01:26.595
And the one that says
0.1 will get 10 pixels,

22
00:01:26.595 --> 00:01:31.531
and that is not actually accurate,
because it's gonna be off by a little bit.

23
00:01:31.531 --> 00:01:37.417
It's basically you have
3.1 flex-growth factors,

24
00:01:37.417 --> 00:01:41.880
and you have to divide, whatever.

25
00:01:41.880 --> 00:01:46.342
Okay, then you have flex-shrink, and
that's if there's not enough room and

26
00:01:46.342 --> 00:01:50.352
items are allowed to shrink,
how much to they shrink proportionally?

27
00:01:50.352 --> 00:01:53.290
And they shrink proportionally
based on their shrink factor.

28
00:01:53.290 --> 00:01:57.215
And then you have flex-basis which says,
okay,

29
00:01:57.215 --> 00:02:03.389
what is the starting size of this element
and how much should it grow or shrink?

30
00:02:03.389 --> 00:02:08.158
So here, we have a flex container,
it's displayed flex and

31
00:02:08.158 --> 00:02:10.877
it has flex-flow of row and wrap.

32
00:02:10.877 --> 00:02:15.281
Just like all the other A through Zs,
but it looks different.

33
00:02:15.281 --> 00:02:19.206
It looks different because, as I said,

34
00:02:19.206 --> 00:02:23.708
every odd element should
be allowed to grow and

35
00:02:23.708 --> 00:02:28.338
it should have a starting
width 220 pixels.

36
00:02:28.338 --> 00:02:30.657
So that does not mean
it's going to have 220

37
00:02:30.657 --> 00:02:37.033
pixels.
&gt;&gt; Estelle: Because

38
00:02:37.033 --> 00:02:40.536
it really also depends on
what the other words are.

39
00:02:40.536 --> 00:02:43.791
So xylophone, pterodactyl,
janitors, nincompoop,

40
00:02:43.791 --> 00:02:46.366
valentine, petunia, this is gonna sound,

41
00:02:46.366 --> 00:02:50.732
well if someone was actually transcripting
this would sound really weird.

42
00:02:50.732 --> 00:02:56.851
But all of the ones that aren't allowed
to grow are the width of their content.

43
00:02:56.851 --> 00:03:00.763
Their flex-basis is basically
their content and that's it,

44
00:03:00.763 --> 00:03:03.877
they're not growing,
they're not shrinking.

45
00:03:03.877 --> 00:03:08.531
Remember when, as I said,
if I said no wrap,

46
00:03:08.531 --> 00:03:12.941
yeah no wrap, alphabet is 220 pixels,

47
00:03:12.941 --> 00:03:16.748
banana is the size of it's content.

48
00:03:16.748 --> 00:03:21.523
Crayons is 220 pixels,
dinosaurs is the size

49
00:03:21.523 --> 00:03:26.303
of it's content and
eggplant is 220 pixels.

50
00:03:26.303 --> 00:03:32.246
Now if I allow it to wrap, you see that
part of the one that starts with the F?

51
00:03:32.246 --> 00:03:34.501
You can see part of it, right?

52
00:03:34.501 --> 00:03:40.030
If I allow it to wrap, the foundation
goes down to the next line and eggplant,

53
00:03:40.030 --> 00:03:45.582
crayons, and alphabet actually grew,
because it has a growth factor of 1.

54
00:03:45.582 --> 00:03:49.171
So don't worry if you don't
understand this right now,

55
00:03:49.171 --> 00:03:54.056
I just wanna show you what we're coming
up with and what we're trying to fix.

56
00:03:54.056 --> 00:03:57.179
And then at the end of this section,
you'll understand how to do this.

57
00:03:57.179 --> 00:04:00.109
So it's basically saying by default,

58
00:04:00.109 --> 00:04:04.368
make it 220 pixels, and
if there's any room to grow,

59
00:04:04.368 --> 00:04:08.837
divide it evenly among all those
that have a growth factor.

60
00:04:08.837 --> 00:04:12.068
So this has a growth factor of 1,
this has a growth factor of 1, and

61
00:04:12.068 --> 00:04:13.565
this has a growth factor of 1.

62
00:04:13.565 --> 00:04:16.714
We had about 30 extra pixels,
so these are actually,

63
00:04:16.714 --> 00:04:20.400
probably, 230 pixels,
230 pixels, and 230 pixels.

64
00:04:20.400 --> 00:04:23.312
And what we can do is.

65
00:04:28.334 --> 00:04:30.648
&gt;&gt; Estelle: We can go to the kittens, and

66
00:04:30.648 --> 00:04:35.958
go to, eggplant was one of the ones
that was able to grow, right?

67
00:04:35.958 --> 00:04:42.154
Computed it's 228 pixels wide,
so we got about 8 pixels.

68
00:04:44.348 --> 00:04:47.598
&gt;&gt; Estelle: Okay, so flex,

69
00:04:47.598 --> 00:04:53.405
I basically said, flex 2 for

70
00:04:53.405 --> 00:04:58.064
a and b and flex 1 for c.

71
00:04:58.064 --> 00:05:01.800
So that sets two growth factors,
flex-grow.

72
00:05:12.924 --> 00:05:15.619
&gt;&gt; Estelle: The reason that comes out

73
00:05:15.619 --> 00:05:21.015
looking different is because
C has way more text.

74
00:05:21.015 --> 00:05:24.889
So that's why it's important
to understand everything.

75
00:05:24.889 --> 00:05:30.476
So basically here,
it's saying the flex-basis is zero,

76
00:05:30.476 --> 00:05:37.304
for A, B and C because I used
the short hand so, it's 200 and 100.

77
00:05:37.304 --> 00:05:43.974
And because A and B have the flex-grow
factor, of 2, there's 2 of them right?

78
00:05:43.974 --> 00:05:46.601
So that's a total of four growth factors.

79
00:05:46.601 --> 00:05:52.673
And C has a growth factor of 1,
so that's a fifth growth factor.

80
00:05:52.673 --> 00:05:55.530
So let's say it's 1,000 pixels wide,
which it's not, but

81
00:05:55.530 --> 00:05:59.017
let's say it's a 1,000 pixels wide,
because that's easy to do the math.

82
00:05:59.017 --> 00:06:03.855
Then C would be 200 pixels and
A and B would both be 400 pixels.

83
00:06:03.855 --> 00:06:09.287
And right now it's more likely
that it's 150, 300, and 300.

84
00:06:09.287 --> 00:06:16.088
And let's do that again, let's look at
our debugger, click this, go to computed.

85
00:06:16.088 --> 00:06:21.467
334.
&gt;&gt; Estelle: 334.

86
00:06:21.467 --> 00:06:28.486
And 167,167 is half of 334
&gt;&gt; Estelle: Okay, so

87
00:06:28.486 --> 00:06:36.215
flex-basis is what is the basis
on which it's allowed to grow?

88
00:06:36.215 --> 00:06:38.929
There's many values.

89
00:06:38.929 --> 00:06:42.107
We saw 220 pixels and
said basically start with 220 pixels.

90
00:06:42.107 --> 00:06:47.219
This thing is 220 pixels wide,
and then whatever

91
00:06:47.219 --> 00:06:52.105
else is attributed to the growth factor,
right?

92
00:06:52.105 --> 00:06:58.013
So when you use Auto, Auto says basically,
this element is its width.

93
00:06:58.013 --> 00:07:01.792
Or it's main size is the main
size of its content.

94
00:07:01.792 --> 00:07:04.660
So the width,
in this case the width of its text.

95
00:07:04.660 --> 00:07:07.664
So in the first one, the mains,

96
00:07:07.664 --> 00:07:13.573
the auto means that the flex-basis
is the width of this thing.

97
00:07:13.573 --> 00:07:15.697
It's the width of this thing and
it's the width of this thing.

98
00:07:15.697 --> 00:07:21.940
So this has a flex growth factor of 3,
1, and 2.

99
00:07:21.940 --> 00:07:26.526
So, let say it has an extra 120 pixels,
right,

100
00:07:26.526 --> 00:07:30.059
there's 120 pixels of free space.

101
00:07:30.059 --> 00:07:34.422
So here it would have 10 pixels, 10
pixels, 10 pixels, 10 pixels, 10 pixels,

102
00:07:34.422 --> 00:07:36.702
10 pixels,
it would have three on each side.

103
00:07:36.702 --> 00:07:39.560
Here it would have one on each side and
here it would have two on each side.

104
00:07:39.560 --> 00:07:45.368
It basically divided that
extra space into six parts.

105
00:07:45.368 --> 00:07:49.275
And then gave each one
of those flex items.

106
00:07:49.275 --> 00:07:53.775
1/6 when the flex plural factor is one,
2/6 or

107
00:07:53.775 --> 00:07:57.661
1/3 when the flex plural factor is 2, and

108
00:07:57.661 --> 00:08:02.382
50% of the flex plural
factor when the factor is 3.

109
00:08:02.382 --> 00:08:06.433
Because the default was auto,
thats a tiny little space.

110
00:08:06.433 --> 00:08:11.365
When the flex-basis is zero,
it means by default the width is zero.

111
00:08:11.365 --> 00:08:13.265
The width of this element is zero.

112
00:08:13.265 --> 00:08:17.213
So, a hundred percent of
the width of the container is

113
00:08:17.213 --> 00:08:21.705
the available space to be divided
among the course factors.

114
00:08:21.705 --> 00:08:27.178
And so, the flex side among the right
gets 3/6th of that or half of it.

115
00:08:27.178 --> 00:08:31.894
The one in the middle gets one-sixth of
it cuz the flex growth factor is one.

116
00:08:31.894 --> 00:08:36.919
And the one on the left gets
one-third because its flex factor is,

117
00:08:36.919 --> 00:08:40.328
growth factor's two so
it's two out of six or

118
00:08:40.328 --> 00:08:44.246
one-third.
&gt;&gt; Estelle: Does that make sense how does

119
00:08:44.246 --> 00:08:45.343
was this distributed?

120
00:08:45.343 --> 00:08:49.043
It's really important to understand
the difference between auto and zero.

121
00:08:49.043 --> 00:08:51.720
&gt;&gt; Speaker 2: So auto [COUGH] just Takes

122
00:08:51.720 --> 00:08:55.548
into account actual content and
zero disregards and

123
00:08:55.548 --> 00:08:58.135
just divides the space equally.
&gt;&gt; Estelle: So

124
00:08:58.135 --> 00:09:03.058
it could've been instead of zero percent
it could have been 100 pixels and so

125
00:09:03.058 --> 00:09:07.612
each one of those would be 100 pixels
would be attributed to each one and

126
00:09:07.612 --> 00:09:12.700
then the rest of the available space would
be divided amongst the growth factors.

127
00:09:12.700 --> 00:09:17.262
So when you have zero, it means by
default it's zero pixels wide so

128
00:09:17.262 --> 00:09:19.548
everything is available space.

129
00:09:19.548 --> 00:09:24.229
When you don't say what the flex basis is,
when it defaults to auto or

130
00:09:24.229 --> 00:09:28.281
you set it to auto,
it says what is the width of the content.

131
00:09:28.281 --> 00:09:30.716
We will eventually get the value
of content but that is not yet

132
00:09:30.716 --> 00:09:35.537
supported in browsers.
&gt;&gt; Estelle: Okay.

133
00:09:40.669 --> 00:09:42.916
&gt;&gt; Estelle: So here is a different way of

134
00:09:42.916 --> 00:09:44.194
looking at it.

135
00:09:44.194 --> 00:09:46.031
We have flex containers.

136
00:09:46.031 --> 00:09:50.971
There's not enough available space.
&gt;&gt; Estelle: And so

137
00:09:50.971 --> 00:09:56.512
these are allowed to shrink.
&gt;&gt; Estelle: The thing is they

138
00:09:56.512 --> 00:10:01.625
will never shrink to less
than their longest word.

139
00:10:01.625 --> 00:10:09.161
So the content with the comma
is the longest word.

140
00:10:09.161 --> 00:10:12.954
And the word explicitly
is the longest word.

141
00:10:12.954 --> 00:10:18.996
So even though the three on the right, the
three on the right are actually growing,

142
00:10:18.996 --> 00:10:22.030
because they have a flex-basis of zero.

143
00:10:22.030 --> 00:10:26.656
So the available space should be,
the one on the right,

144
00:10:26.656 --> 00:10:32.377
you'd think it would be three times
the size of the one in the middle.

145
00:10:32.377 --> 00:10:38.954
But it's still not going to, if it has,
it will be as least as wide as its,

146
00:10:38.954 --> 00:10:45.052
narrowest, or widest word,
because it doesn't want to cut off words.

147
00:10:45.052 --> 00:10:49.500
It's not going to make a strip of just one
letter; I don't know if anyone here uses-

148
00:10:49.500 --> 00:10:52.773
like I use squirrel-mail- And
half the time that I get mail.

149
00:10:52.773 --> 00:10:54.342
it's just one letter all the way down.

150
00:10:54.342 --> 00:10:58.725
And I'm like, it's not possible to
read this and I'm not going to try.

151
00:10:58.725 --> 00:11:00.467
And that's when I drew a resource and

152
00:11:00.467 --> 00:11:02.891
tried to find out what they
were actually writing.

153
00:11:02.891 --> 00:11:09.469
Here, it is basically to show that even
though you have a flex-basis of zero,

154
00:11:09.469 --> 00:11:14.251
it's still going to try to
fit because it's basically,

155
00:11:14.251 --> 00:11:17.658
it's dividing up the available space.

156
00:11:17.658 --> 00:11:18.721
But it's also saying,

157
00:11:18.721 --> 00:11:24.334
I wanna fit the content.
&gt;&gt; Estelle: Okay.

158
00:11:27.599 --> 00:11:29.183
&gt;&gt; Estelle: When you look at the slide and

159
00:11:29.183 --> 00:11:32.216
you're like, what was I trying to prove?

160
00:11:32.216 --> 00:11:33.192
Okay.

161
00:11:33.192 --> 00:11:39.896
So, number B is of the order negative one,
and it has a flex of 40%,

162
00:11:39.896 --> 00:11:46.262
which means it's allowed- all
of them have a flex of 20%,

163
00:11:46.262 --> 00:11:52.652
so it would be one fifth the size- and
this one has a flex of 40%.

164
00:11:52.652 --> 00:11:55.395
and it's actually twice
the size of the others.

