WEBVTT

1
00:00:03.670 --> 00:00:07.400
&gt;&gt; Estelle Weyl: The components are, our
flexbox, our first to create a flexbox,

2
00:00:07.400 --> 00:00:09.680
which is simply the display property.

3
00:00:09.680 --> 00:00:13.130
Then to set the direction,
which is done with flex-flow,

4
00:00:13.130 --> 00:00:16.830
which is both the direction,
as to whether it's row and columns, and

5
00:00:16.830 --> 00:00:17.760
to whether it's allowed to wrap.

6
00:00:18.940 --> 00:00:23.056
Then you have alignment, which is
justify-content, align-items, align-self,

7
00:00:23.056 --> 00:00:24.680
and align-content.

8
00:00:24.680 --> 00:00:27.684
Then you can order things, and
you saw me order, the taking nav and

9
00:00:27.684 --> 00:00:30.974
move it some place else, so you can
actually change the order of an item.

10
00:00:30.974 --> 00:00:33.530
And then you have flexibility
of the items themselves.

11
00:00:33.530 --> 00:00:37.970
The article was allowed to grow,
that means it was flexible, it could grow.

12
00:00:37.970 --> 00:00:41.980
So flexibility is a flex property which
means it can grow, it can shrink,

13
00:00:41.980 --> 00:00:45.190
and it will do so
proportional to how you declare it.

14
00:00:45.190 --> 00:00:48.340
Proportional to the other elements
that can grow and shrink.

15
00:00:48.340 --> 00:00:52.380
And that is all part of this
thing called flex property

16
00:00:52.380 --> 00:00:55.612
which has three components called
flex-grow, flex-shrink and flex-basis.

17
00:00:57.160 --> 00:01:00.168
So if you thought we were done for
the day, these are actually the properties

18
00:01:00.168 --> 00:01:04.396
that we're about to go over.
&gt;&gt; Estelle Weyl: Okay?

19
00:01:05.913 --> 00:01:06.700
&gt;&gt; Estelle Weyl: So let's dive in.

20
00:01:08.080 --> 00:01:13.040
So the first step is to add display
flex or inline flex to a parent.

21
00:01:14.140 --> 00:01:18.040
Then set the flex-direction
to horizontal or vertical and

22
00:01:18.040 --> 00:01:23.890
then say whether you can wrap, your
items can wrap onto more than one line.

23
00:01:25.700 --> 00:01:30.280
So we have a display property and
the display property has many,

24
00:01:30.280 --> 00:01:31.500
many different values.

25
00:01:31.500 --> 00:01:33.332
If you've ever taken an interview and

26
00:01:33.332 --> 00:01:37.410
they've asked you what are the five
values of the display property.

27
00:01:37.410 --> 00:01:40.450
You should say, how did you get this job
cuz you don't know what you're doing?

28
00:01:40.450 --> 00:01:43.500
Cuz I've actually been asked that and
I'm like, five?

29
00:01:43.500 --> 00:01:45.520
There's so many more.

30
00:01:45.520 --> 00:01:50.030
And that was before flex and
grid came out.

31
00:01:50.030 --> 00:01:55.726
We've always had table-cell, table-row but
most people know inline-block, list-item.

32
00:01:55.726 --> 00:01:57.394
Display none, and

33
00:01:57.394 --> 00:02:02.174
what other ones do they know?
&gt;&gt; Estelle Weyl: That's

34
00:02:02.174 --> 00:02:04.230
mostly what people think are the five.

35
00:02:04.230 --> 00:02:10.760
Inline, block, list-item, none,
and one other one in here.

36
00:02:10.760 --> 00:02:14.410
Anyway, we have two new values for
flex which is flex and

37
00:02:14.410 --> 00:02:19.544
inline-flex.
&gt;&gt; Estelle Weyl: I actually

38
00:02:19.544 --> 00:02:25.506
one time got that interview question and
I think I rattled off ruby,

39
00:02:25.506 --> 00:02:31.810
ruby-base, ruby-text, and
the guy thought I was wrong, and yeah.

40
00:02:31.810 --> 00:02:35.580
So we have, this

41
00:02:35.580 --> 00:02:37.994
was inline-block was the one I forgot
when I was just mentioning, okay.

42
00:02:39.060 --> 00:02:45.123
So we have inline-block,
list-item, flex and inline-flex.

43
00:02:45.123 --> 00:02:49.974
So display flex is basically
a block size element and

44
00:02:49.974 --> 00:02:53.622
inline-flex would be inline-flex.

45
00:02:53.622 --> 00:02:57.060
Which would mean it would not
do it clear both before and

46
00:02:57.060 --> 00:03:02.254
after.
&gt;&gt; Estelle Weyl: Is Flexbox supported in

47
00:03:02.254 --> 00:03:07.856
your browser?
&gt;&gt; Estelle Weyl: Can I

48
00:03:07.856 --> 00:03:10.070
use prefixless Flex Box?

49
00:03:10.070 --> 00:03:12.933
If yes, if it supports display flex,

50
00:03:12.933 --> 00:03:17.653
make the background green.
&gt;&gt; Estelle Weyl: And

51
00:03:17.653 --> 00:03:21.296
if it supports display block, which means
it supports the supports property cuz

52
00:03:21.296 --> 00:03:23.410
everything supports display block.

53
00:03:23.410 --> 00:03:25.635
It would have made it red because
then it would have been no.

54
00:03:25.635 --> 00:03:28.757
If it was white it
didn't support supports.

55
00:03:28.757 --> 00:03:30.930
Okay, so that was just a fun feature.

56
00:03:30.930 --> 00:03:36.490
Okay, so
let's add display flex to this box.

57
00:03:36.490 --> 00:03:39.460
So we have a first box,
a second box, and a third box.

58
00:03:39.460 --> 00:03:45.649
By default, when we hit display flex,
&gt;&gt; Estelle Weyl: It,

59
00:03:48.508 --> 00:03:50.036
&gt;&gt; Estelle Weyl: Takes every element and

60
00:03:50.036 --> 00:03:51.720
makes it into a flex item.

61
00:03:53.320 --> 00:03:55.860
And it says basically it can't grow or
shrink,

62
00:03:55.860 --> 00:03:58.080
it just becomes the size of its content.

63
00:03:58.080 --> 00:03:58.990
So that's why it's so small.

64
00:04:00.110 --> 00:04:05.950
If I said actually flex 20%,
that's not 20% that's 33%, right?

65
00:04:05.950 --> 00:04:10.540
So we're gonna cover flex later,
but it's basically saying,

66
00:04:10.540 --> 00:04:14.900
yes it can grow, yes it can shrink,
and it should be 20%.

67
00:04:14.900 --> 00:04:18.721
It, by default, will start off at being
20% and then allow it to grow to take up

68
00:04:18.721 --> 00:04:25.300
all the available space.
&gt;&gt; Estelle Weyl: Display: inline-flex.

69
00:04:25.300 --> 00:04:27.747
We've already covered that one.

70
00:04:27.747 --> 00:04:32.851
Okay, what is a flex item?
&gt;&gt; Estelle Weyl: So

71
00:04:32.851 --> 00:04:36.970
when you display flex on an element,
that becomes a flex container.

72
00:04:38.330 --> 00:04:41.460
And all of its direct children,
not its grandchildren, but

73
00:04:41.460 --> 00:04:49.620
just its direct descendants, all of
them become flex items, including text.

74
00:04:49.620 --> 00:04:55.510
So if you have text without a parent,
if you say display flex on a paragraph and

75
00:04:55.510 --> 00:04:58.689
it's a paragraph that has four lengths and
two spans.

76
00:05:00.070 --> 00:05:04.510
Everything that comes before the first
link and after the first link and between,

77
00:05:04.510 --> 00:05:09.530
before the second link, all of that,
you'll have many individual flex items.

78
00:05:09.530 --> 00:05:11.550
Those are called anonymous flex items.

79
00:05:12.560 --> 00:05:15.950
They will inherit all the flex,

80
00:05:15.950 --> 00:05:19.960
like they will be impacted
by all the flex properties.

81
00:05:19.960 --> 00:05:24.688
But they aren't directly targetable,
so you can't actually grow and

82
00:05:24.688 --> 00:05:25.812
shrink on them.

83
00:05:25.812 --> 00:05:28.672
It can't get the flex bases,
it can't get the flex property, but

84
00:05:28.672 --> 00:05:30.180
it will become a flex item.

85
00:05:30.180 --> 00:05:31.786
So it can be aligned top,

86
00:05:31.786 --> 00:05:35.772
it can be aligned bottom which
we'll learn how to do later on.

87
00:05:35.772 --> 00:05:40.870
So all non-absolutely positioned
child nodes are flex items.

88
00:05:40.870 --> 00:05:43.990
Generated content,
if you have generated content,

89
00:05:43.990 --> 00:05:45.180
that would actually be a flex item.

90
00:05:46.620 --> 00:05:51.540
So you could start off with a generated
content flex item, have that text,

91
00:05:51.540 --> 00:05:55.350
then that link and the spans in
that paragraph I was talking about.

92
00:05:55.350 --> 00:05:58.411
And then the after generated content.

93
00:05:58.411 --> 00:06:03.463
And when I say not absolutely
positioned child nodes, if something is

94
00:06:03.463 --> 00:06:09.300
absolutely positioned, the paint order
is still within the order of the flex.

95
00:06:09.300 --> 00:06:13.670
And it inherits some things, such as
the width of the flex container, but

96
00:06:13.670 --> 00:06:16.160
it doesn't take up any of the space.

97
00:06:16.160 --> 00:06:19.820
So it's kind of a flex item,
but not really a flex item.

98
00:06:19.820 --> 00:06:23.680
So at the bottom it says flex items,
all non-absolutely positioned child nodes.

99
00:06:23.680 --> 00:06:26.502
And at the bottom it says,
well kind of, absolutely fixed and

100
00:06:26.502 --> 00:06:31.953
position elements are kind of flex nodes.
&gt;&gt; Estelle Weyl: Things

101
00:06:31.953 --> 00:06:36.300
that are not flex items are the first
line and the first letter.

102
00:06:36.300 --> 00:06:38.610
So if you actually,
you can do generate content before and

103
00:06:38.610 --> 00:06:42.520
after those will be flex nodes but
first line and first letter will not.

104
00:06:42.520 --> 00:06:46.430
And if you have just white space
between that start of the paragraph and

105
00:06:46.430 --> 00:06:49.560
the first link, that white space
will not become a flex item.

106
00:06:51.050 --> 00:06:54.360
So you have many things that
are becoming flex items.

107
00:06:54.360 --> 00:06:57.420
It's best to just basically have
everything in an element, so

108
00:06:57.420 --> 00:06:58.680
that you can control it.

109
00:06:58.680 --> 00:07:04.210
But if you're not doing that, you will
have what they call anonymous flex items.

110
00:07:06.330 --> 00:07:10.690
So there are certain CSS properties
that are impacted by flex.

111
00:07:13.500 --> 00:07:17.450
So some of the CSS properties,

112
00:07:17.450 --> 00:07:20.550
when you have something that becomes
a flex item, it just ignored.

113
00:07:20.550 --> 00:07:21.810
Like the float.

114
00:07:21.810 --> 00:07:23.850
You know how like we float it left and
right?

115
00:07:23.850 --> 00:07:27.880
That would just be ignored cuz
you can't float a flex item.

116
00:07:27.880 --> 00:07:30.460
So you can have the fallback
of doing floats.

117
00:07:30.460 --> 00:07:35.160
You can do a whole floated layout and
then include flex, and you're good.

118
00:07:35.160 --> 00:07:39.530
They're not gonna conflict,
because it will just ignore the float.

119
00:07:39.530 --> 00:07:42.980
A vertical-align,
it has its own alignment, so

120
00:07:42.980 --> 00:07:44.530
you don't need vertical-align.

121
00:07:44.530 --> 00:07:48.938
Clearing won't work, and
all the column properties like column gap,

122
00:07:48.938 --> 00:07:53.434
column count, column width.
&gt;&gt; Estelle Weyl: Certain

123
00:07:53.434 --> 00:07:57.090
properties are changed,
have a different impact.

124
00:07:57.090 --> 00:08:03.190
Margin, when you have two adjacent
margins, they collapse upon each other.

125
00:08:03.190 --> 00:08:04.370
In flex, they don't.

126
00:08:06.400 --> 00:08:11.800
Min-width and
min-height normally default to zero.

127
00:08:11.800 --> 00:08:16.571
When it comes to flex box,
it actually defaults to auto.

128
00:08:16.571 --> 00:08:21.741
And visibility,
collapse is a feature that,

129
00:08:21.741 --> 00:08:26.125
basically, you can't really use it.

130
00:08:26.125 --> 00:08:29.205
So it'll collapse it and
it normally just makes it hidden.

