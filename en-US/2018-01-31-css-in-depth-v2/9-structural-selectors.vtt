WEBVTT

1
00:00:01.970 --> 00:00:04.070
&gt;&gt; Estelle Weyl: Okay, so
then we have structural selectors.

2
00:00:04.070 --> 00:00:11.070
As you saw, I just said, li nth of type
two, which caught the second list item.

3
00:00:12.090 --> 00:00:15.170
So let's see how you can actually do that.

4
00:00:15.170 --> 00:00:20.880
So an HTML page is built a certain way,
it has a certain structure.

5
00:00:22.830 --> 00:00:26.320
There's the root element,
which in HTML is the HTML element.

6
00:00:26.320 --> 00:00:28.280
But in XML, it might be the XML element.

7
00:00:28.280 --> 00:00:29.298
And in a shadow DOM element,

8
00:00:29.298 --> 00:00:34.429
it might be something else.
&gt;&gt; Estelle Weyl: You can have empty or

9
00:00:34.429 --> 00:00:35.330
blank.

10
00:00:35.330 --> 00:00:39.810
You can have nth-child, nth-last-child,
first-child, last-child, only-child,

11
00:00:39.810 --> 00:00:44.580
nth-of-type, nth-last-of-type,
first-of-type, last-of-type, only-of-type.

12
00:00:45.580 --> 00:00:50.000
So these structural
selectors target elements

13
00:00:50.000 --> 00:00:54.380
based on their relationships to other
elements within the document object model.

14
00:00:55.480 --> 00:00:59.374
When you update the page with JavaScript,
or if someone's typing and

15
00:00:59.374 --> 00:01:03.739
you have a WYSIWYG or something, I don't
know exactly how that would happen.

16
00:01:03.739 --> 00:01:07.013
Generally, it's people
who are using JavaScript,

17
00:01:07.013 --> 00:01:10.370
it will update automatically
if they add a paragraph.

18
00:01:12.680 --> 00:01:17.060
So far, I've been able to
edit all of these features.

19
00:01:17.060 --> 00:01:19.680
I don't know what the class
is on anything, but

20
00:01:19.680 --> 00:01:22.010
I know it's the fifth list item.

21
00:01:22.010 --> 00:01:23.920
Like you saw,
I knew it was the second list item,

22
00:01:23.920 --> 00:01:25.990
might as well talk about it in a second.

23
00:01:25.990 --> 00:01:29.140
So I'm going to explain this by example.

24
00:01:29.140 --> 00:01:33.880
And I'm going to start with first,
last, and only, of the of types.

25
00:01:35.360 --> 00:01:40.590
Because a lot of people don't understand
this and it's really hard to explain.

26
00:01:40.590 --> 00:01:46.280
So, I'm gonna open up this in a new
window, and we're gonna just play along.

27
00:01:46.280 --> 00:01:50.892
So everything is light blue,

28
00:01:50.892 --> 00:01:54.400
and it is underlined.

29
00:01:56.450 --> 00:02:04.953
Let's make this a little bit darker.
&gt;&gt; Estelle Weyl: Saturation lightness,

30
00:02:04.953 --> 00:02:06.320
make this 80.

31
00:02:06.320 --> 00:02:11.675
Nope, wrong way, a 10.
&gt;&gt; Estelle Weyl: I

32
00:02:11.675 --> 00:02:16.861
have no clue what I just did,
let's reload the page.

33
00:02:16.861 --> 00:02:21.702
Well, okay, so thatâ€™s a prettier color.

34
00:02:21.702 --> 00:02:28.321
So,
&gt;&gt; Estelle Weyl: If I do first-of-type,

35
00:02:28.321 --> 00:02:32.620
everything just turned blue.

36
00:02:34.290 --> 00:02:36.900
Can anyone tell me why they think
that everything just turned blue?

37
00:02:38.830 --> 00:02:40.080
&gt;&gt; Speaker 2: The absence of a selector

38
00:02:40.080 --> 00:02:45.893
defaults to select everything?
&gt;&gt; Estelle Weyl: I selected the first

39
00:02:45.893 --> 00:02:51.776
of everything, and the first of everything

40
00:02:51.776 --> 00:02:56.875
is the body.
&gt;&gt; Estelle Weyl: Right,

41
00:02:56.875 --> 00:03:03.276
if I did first-child,
&gt;&gt; Estelle Weyl: The body

42
00:03:03.276 --> 00:03:07.709
is not the first-child.
&gt;&gt; Estelle Weyl: I have no clue why it

43
00:03:07.709 --> 00:03:12.348
covered everything.
&gt;&gt; Estelle Weyl: It shouldn't have covered

44
00:03:12.348 --> 00:03:17.137
everything.
&gt;&gt; Estelle Weyl: Last-child?

45
00:03:23.491 --> 00:03:25.700
&gt;&gt; Estelle Weyl: Okay, body :last-child.

46
00:03:26.940 --> 00:03:30.740
Cuz there is a space there, so
basically every last-child.

47
00:03:30.740 --> 00:03:32.940
So body is never the last.

48
00:03:34.210 --> 00:03:41.673
Yeah, there is a mistake in my HTML,
because the body is the last-child.

49
00:03:41.673 --> 00:03:43.840
It should be of the HTML element.

50
00:03:43.840 --> 00:03:45.600
So there's a typo in here.

51
00:03:45.600 --> 00:03:48.810
I'm just gonna put body, and
I'm gonna put a space, and

52
00:03:48.810 --> 00:03:53.870
I'm gonna do div:first-child.

53
00:03:53.870 --> 00:03:56.544
So that div is the first-child of its

54
00:03:56.544 --> 00:04:00.780
parent.
&gt;&gt; Estelle Weyl: Right?

55
00:04:02.982 --> 00:04:06.007
&gt;&gt; Estelle Weyl: If I do just body, space,

56
00:04:06.007 --> 00:04:07.940
first-child.

57
00:04:09.050 --> 00:04:14.840
It's the first-child of every div, right?

58
00:04:14.840 --> 00:04:18.560
So it's basically saying within each
element, if there's a child, match it.

59
00:04:18.560 --> 00:04:24.120
If I do last-child,
it matches the last-child.

60
00:04:25.620 --> 00:04:28.060
So it's the last paragraph or
the last h1, it doesn't matter.

61
00:04:29.730 --> 00:04:37.130
If I do last-of-type,
why was this H1 highlighted?

62
00:04:40.070 --> 00:04:42.467
Because within its div,

63
00:04:42.467 --> 00:04:47.820
it is the last h1 of its type.
&gt;&gt; Estelle Weyl: So

64
00:04:47.820 --> 00:04:52.938
this is the last h1,
this is the last h2, and

65
00:04:52.938 --> 00:04:57.810
this is the last paragraph
within that div.

66
00:04:57.810 --> 00:05:02.290
And this matches because it's the last
h1 and because it's the last div.

67
00:05:02.290 --> 00:05:07.861
So it's the last div in the,
&gt;&gt; Estelle Weyl: If I

68
00:05:07.861 --> 00:05:13.270
did last-child, so that's
the difference between type and child.

69
00:05:13.270 --> 00:05:19.130
Type is actually any element,
and child means any element.

70
00:05:20.370 --> 00:05:23.900
Type is a specific element,
like paragraph or whatever.

71
00:05:23.900 --> 00:05:26.920
So there could be more than one
last-of-types within a div.

72
00:05:28.156 --> 00:05:31.230
But last-child,
it doesn't matter if it's a div or

73
00:05:31.230 --> 00:05:34.670
a paragraph or an h3, it's the last-child.

74
00:05:35.920 --> 00:05:39.880
The thing is these do not match classes.

75
00:05:39.880 --> 00:05:48.618
So if I do, li .foo last-child,
&gt;&gt; Estelle Weyl: Or foo last-child,

76
00:05:48.618 --> 00:05:54.650
if the last element does not have
the class of foo, it will not match.

77
00:05:55.660 --> 00:05:59.780
If I do foo last-of-type,

78
00:05:59.780 --> 00:06:03.610
it will be any element that has the class
of foo that is the last of its type.

79
00:06:03.610 --> 00:06:07.150
So basically, it has to be the last of
its type that also has a class of foo.

80
00:06:07.150 --> 00:06:10.410
It's not, has a class of foo,
then the last one, right?

81
00:06:10.410 --> 00:06:11.510
Does that make sense to people?

82
00:06:11.510 --> 00:06:12.830
It's a little confusing.

83
00:06:12.830 --> 00:06:13.780
No, it does not make sense.

84
00:06:15.290 --> 00:06:22.016
Unfortunately, I don't have,
it's basically the last-child and

85
00:06:22.016 --> 00:06:26.576
the last-of-type, or the first-child, or

86
00:06:26.576 --> 00:06:32.853
when it's an of-type,
it is matching the type, not the class.

87
00:06:32.853 --> 00:06:34.816
Then it matches the class.

88
00:06:34.816 --> 00:06:38.300
So if it's not the last-child,
it doesn't matter what its class is.

89
00:06:38.300 --> 00:06:40.320
It's not gonna go up and say.

90
00:06:42.160 --> 00:06:46.538
So if I do .foo last-child,

91
00:06:46.538 --> 00:06:51.441
it has to be a child that also has to

92
00:06:51.441 --> 00:06:56.520
be the last child of its parent that

93
00:06:56.520 --> 00:07:01.669
also has a class of foo.
&gt;&gt; Estelle Weyl: So

94
00:07:01.669 --> 00:07:08.049
you can't,
&gt;&gt; Estelle Weyl: Paragraph

95
00:07:08.049 --> 00:07:11.970
foo last-of-type,
will find the last paragraph.

96
00:07:11.970 --> 00:07:14.080
If it has the class of foo, it will match.

97
00:07:14.080 --> 00:07:16.550
If it doesn't have the class of foo,
it won't match.

98
00:07:16.550 --> 00:07:21.310
But it won't go up and say this is the
last paragraph that has a class of foo.

99
00:07:21.310 --> 00:07:22.465
That's not how it matches it.

100
00:07:22.465 --> 00:07:23.619
Does that make sense now?

101
00:07:23.619 --> 00:07:28.398
Okay.
&gt;&gt; Estelle Weyl: So,

102
00:07:29.723 --> 00:07:32.246
&gt;&gt; Estelle Weyl: Only-of-type, so

103
00:07:32.246 --> 00:07:37.600
let's find out what is the only-of-type.

104
00:07:37.600 --> 00:07:41.100
Now if I did this, it matches the body.

105
00:07:41.100 --> 00:07:43.429
Because the body is the only
of its type in this document.

106
00:07:44.810 --> 00:07:47.780
So we're gonna add body, put a space in.

107
00:07:47.780 --> 00:07:52.010
And so it matches this H1, but
it doesn't match any of the paragraphs,

108
00:07:52.010 --> 00:07:54.235
because there's three paragraphs.

109
00:07:54.235 --> 00:07:55.060
It matches this H1,

110
00:07:55.060 --> 00:07:59.970
but it doesn't match either of these
this h2's, because there's two h2's.

111
00:07:59.970 --> 00:08:02.321
So it's only-of-type,

112
00:08:02.321 --> 00:08:08.300
it's when there's only one of that type.
&gt;&gt; Estelle Weyl: So

113
00:08:08.300 --> 00:08:12.878
if you did p.foo only-of-type,
there would be,

114
00:08:12.878 --> 00:08:17.663
it would only match a paragraph
that has a class of foo,

115
00:08:17.663 --> 00:08:22.400
if it is the only paragraph
within that parent.

116
00:08:22.400 --> 00:08:25.110
And it's based on the parent,
it is not based on the grandparent.

117
00:08:25.110 --> 00:08:31.430
So it's not like, and the count restarts
the next time, for every parent.

118
00:08:31.430 --> 00:08:34.870
You close out a div,
it starts counting fresh again.

119
00:08:34.870 --> 00:08:38.150
So only-of-type, and
then let's do only-child.

120
00:08:40.180 --> 00:08:43.256
So I could get rid of this body here,

121
00:08:43.256 --> 00:08:47.475
because the body should
not be the only-child.

122
00:08:47.475 --> 00:08:50.080
But maybe, I don't know, okay.

123
00:08:50.080 --> 00:08:54.120
But since there's a typo somewhere
in my thing, I'm gonna go this way.

124
00:08:54.120 --> 00:08:57.880
This is the only one where
it only has one child.

125
00:08:57.880 --> 00:09:02.350
So an element that only has one child
is the only thing it would match.

126
00:09:02.350 --> 00:09:09.828
If I did h,
&gt;&gt; Estelle Weyl: Okay,

127
00:09:09.828 --> 00:09:15.005
so this one only has one H1, right?
&gt;&gt; Estelle Weyl: If I do h1,

128
00:09:15.005 --> 00:09:19.150
it doesn't match this,
because it's not the only child.

129
00:09:19.150 --> 00:09:22.190
But it is the only-of-type.

130
00:09:22.190 --> 00:09:23.650
It is the only h1 of that type.

131
00:09:25.560 --> 00:09:26.650
Generally making sense?

132
00:09:26.650 --> 00:09:28.770
Not 100%, but close enough?

133
00:09:28.770 --> 00:09:32.656
Just realize that when you hit a bug,
that's what happening, right?

134
00:09:32.656 --> 00:09:36.341
So you get used to it after a while.

135
00:09:36.341 --> 00:09:39.300
And you might get used to it by the time
we're done with this section, okay?

