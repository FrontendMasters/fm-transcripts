WEBVTT

1
00:00:03.877 --> 00:00:09.737
&gt;&gt; Estelle Weyl: Let's move on
to user interface selectors.

2
00:00:09.737 --> 00:00:14.907
So in HTML, you can have elements
that are enabled or disabled,

3
00:00:14.907 --> 00:00:19.326
you can have elements that are checked or
not checked.

4
00:00:19.326 --> 00:00:24.982
So here it says,
can anyone read this to me?

5
00:00:24.982 --> 00:00:29.307
Well, let me show you how you read it,
you read it from the end.

6
00:00:29.307 --> 00:00:33.677
So it says any label,
what does the plus sign mean?

7
00:00:33.677 --> 00:00:35.329
&gt;&gt; Speaker 2: Immediately following.
&gt;&gt; Estelle Weyl: Immediately following,

8
00:00:35.329 --> 00:00:35.858
very good.

9
00:00:35.858 --> 00:00:44.110
So any label that comes immediately
after a checked input of type checkbox.

10
00:00:45.450 --> 00:00:48.830
So right here we have a checkbox, and we
have a label, and we have a checkbox, and

11
00:00:48.830 --> 00:00:50.100
we have a label.

12
00:00:50.100 --> 00:00:53.540
So if I check this checkbox,
the color changes to red.

13
00:00:55.310 --> 00:00:59.699
If I uncheck it, it changes back, cuz it
is no longer checked, same thing for here.

14
00:01:00.720 --> 00:01:04.825
And because I was thinking about
accessibility and I included a label,

15
00:01:04.825 --> 00:01:07.640
I don't actually have to
click on the checkbox.

16
00:01:07.640 --> 00:01:14.247
I can click right here on the label,
and that will toggle it on and off.

17
00:01:14.247 --> 00:01:19.231
So that's toggling the checkbox,
which is then activating the CSS,

18
00:01:19.231 --> 00:01:21.859
because this then starts matching.

19
00:01:21.859 --> 00:01:26.327
And so when I said earlier
that CSS updates immediately,

20
00:01:26.327 --> 00:01:31.832
I just updated the UI feature and
the CSS said now I match, right.

21
00:01:33.873 --> 00:01:38.113
&gt;&gt; Estelle Weyl: So the UI features that
we have are default, valid, invalid,

22
00:01:38.113 --> 00:01:44.033
required, optional, in-range and
out-of-range, read-only and read-write,

23
00:01:44.033 --> 00:01:49.793
placeholder-shown, and we're gonna have
either user-error or user-invalid.

24
00:01:49.793 --> 00:01:53.778
Neither of them are supported right now,
it's in the spec, it seemed to be in flux,

25
00:01:53.778 --> 00:01:56.039
I read both of them
depending on which version.

26
00:01:56.039 --> 00:01:57.648
So I'm not telling you
which one it's gonna be.

27
00:01:57.648 --> 00:02:02.427
So in this form right here, we have,

28
00:02:02.427 --> 00:02:08.610
if it's valid,
it has a border that's green.

29
00:02:08.610 --> 00:02:13.089
If it's invalid,
it has a border that's red.

30
00:02:13.089 --> 00:02:19.710
If it's required, either via
the required attribute being present,

31
00:02:19.710 --> 00:02:26.234
aria-required being set to true,
it's gonna have a border of 5px.

32
00:02:26.234 --> 00:02:30.286
If it's optional,
which means it's not required,

33
00:02:30.286 --> 00:02:35.610
it doesn't have the required attribute,
the border will be 10px.

34
00:02:35.610 --> 00:02:40.566
Right, if it's out of range, which means,

35
00:02:40.566 --> 00:02:46.579
in notes, it says 5 to 7,
that means 5, 6, or 7.

36
00:02:46.579 --> 00:02:51.179
Number between 0 and 10 means 0,
1, 2, 3, 4, 5, 6, 7, 8, 9, 10.

37
00:02:51.179 --> 00:02:56.624
It does not mean 5.2,
it does not mean 5.758.

38
00:02:57.670 --> 00:03:03.283
Because in HTML, when you have a range,
you have a min and a max, and right here,

39
00:03:03.283 --> 00:03:08.420
we have a min and a max, there's a step
attribute that we did not include.

40
00:03:08.420 --> 00:03:13.061
The step attribute defaults to
the value of 1, if I had said step any,

41
00:03:13.061 --> 00:03:17.875
then it would have been 5, 5.0001,
would also have been valid.

42
00:03:17.875 --> 00:03:21.900
But I did not include the step,
so it defaults to the value of 1.

43
00:03:23.393 --> 00:03:26.963
&gt;&gt; Estelle Weyl: In the second one,
I put step 0.1.,

44
00:03:26.963 --> 00:03:31.690
so 0.1 will be valid,
0.11 will not be valid.

45
00:03:33.995 --> 00:03:39.697
&gt;&gt; Estelle Weyl: Here,
it is invalid because it is required.

46
00:03:39.697 --> 00:03:43.969
We see that it's required because it has
5px, and I don't have a number in it.

47
00:03:43.969 --> 00:03:47.066
So it's matching required equals true,

48
00:03:47.066 --> 00:03:50.874
of having a 5px border
instead of a 10px border.

49
00:03:50.874 --> 00:03:56.888
And because it is empty and
it's not optional, it is not valid.

50
00:03:56.888 --> 00:04:01.517
So,
&gt;&gt; Estelle Weyl: If I type 4,

51
00:04:01.517 --> 00:04:06.114
it is not valid, and it is out of range.

52
00:04:09.182 --> 00:04:14.159
&gt;&gt; Estelle Weyl: If I put 5,
it's valid because it is in range.

53
00:04:15.340 --> 00:04:18.506
&gt;&gt; Estelle Weyl: And
the background became light green.

54
00:04:18.506 --> 00:04:25.498
When there is no value,
it's not required, it's in range.

55
00:04:25.498 --> 00:04:31.301
So here, if I put -3, it's not valid.

56
00:04:34.081 --> 00:04:37.869
&gt;&gt; Estelle Weyl: It becomes
valid if I do 0.1, it's valid,

57
00:04:37.869 --> 00:04:40.793
if I do 0.15, it's not valid.

58
00:04:40.793 --> 00:04:44.648
So that's a mixture of HTML and
CSS that you need to understand.

59
00:04:44.648 --> 00:04:48.817
So one of the things that is
really important is to understand

60
00:04:48.817 --> 00:04:50.954
the attributes that you have.

61
00:04:50.954 --> 00:04:54.903
So a lot of the CSS that we've seen so
far has just been based on selectors and

62
00:04:54.903 --> 00:04:57.863
classes, right,
that's what we use most of the time.

63
00:04:57.863 --> 00:05:01.413
But if you understand HTML and
all the attributes that it has,

64
00:05:01.413 --> 00:05:05.113
you can really make CSS even more
powerful, you had a question?

65
00:05:05.113 --> 00:05:09.074
&gt;&gt; Speaker 3: Does not valid express
the same condition as invalid?

66
00:05:09.074 --> 00:05:10.792
&gt;&gt; Estelle Weyl: Yes.

67
00:05:10.792 --> 00:05:11.566
&gt;&gt; Speaker 3: Okay.

68
00:05:11.566 --> 00:05:13.457
&gt;&gt; Estelle Weyl: And you know what,
we can test it, let's just double check.

69
00:05:15.470 --> 00:05:23.328
&gt;&gt; Estelle Weyl: So here I'm gonna do not.

70
00:05:32.080 --> 00:05:37.716
&gt;&gt; Estelle Weyl: Yes, so if you wanna
play around with this for just a minute.

71
00:05:37.716 --> 00:05:42.224
Okay, so when I was saying that CSS is
powerful, if you're in the deck and

72
00:05:42.224 --> 00:05:46.973
you're playing with this, you're
basically playing on a different page.

73
00:05:46.973 --> 00:05:50.965
So to move the deck forward,
just click anywhere where it's pink, and

74
00:05:50.965 --> 00:05:52.839
then the arrows will work again.

75
00:05:52.839 --> 00:05:55.126
So when you're in here and
you're editing this,

76
00:05:55.126 --> 00:05:59.059
the right arrow will actually make it move
right, so it doesn't make the deck break.

77
00:05:59.059 --> 00:06:01.498
Right, so
you have to just click anywhere out, and

78
00:06:01.498 --> 00:06:03.530
then you can move forward again, yes?

79
00:06:03.530 --> 00:06:07.590
&gt;&gt; Speaker 4: The email address one,
I'm curious about, cuz as you're typing,

80
00:06:07.590 --> 00:06:11.511
you might be typing an email address and
it might be frustrating for

81
00:06:11.511 --> 00:06:14.752
an end user to see it go red,
is there a way around that?

82
00:06:14.752 --> 00:06:18.712
&gt;&gt; Estelle Weyl: You would not make it go
red, you would actually, you'd do this,

83
00:06:18.712 --> 00:06:20.707
it's all over the web right now.

84
00:06:20.707 --> 00:06:24.486
But it's so subtly, this is obnoxious, so
one of the things we're going to do today

85
00:06:24.486 --> 00:06:26.687
is, we're going to make
really ugly websites.

86
00:06:26.687 --> 00:06:28.520
And the goal is,
if you make an ugly website,

87
00:06:28.520 --> 00:06:30.951
you're not gonna worry about
whether it looks good or not.

88
00:06:30.951 --> 00:06:33.423
So this doesn't look good, but

89
00:06:33.423 --> 00:06:38.377
your UI designer will put a little
spinner while it's invalid.

90
00:06:38.377 --> 00:06:41.543
And then, yay, check mark when it's valid.

91
00:06:41.543 --> 00:06:44.137
Something less obnoxious than red and
green,

92
00:06:44.137 --> 00:06:47.075
which we shouldn't be using
colors anyways alone.

93
00:06:47.075 --> 00:06:50.172
Because some people cannot see
the difference between that red and green.

94
00:06:50.172 --> 00:06:54.579
So whenever we do examples,
it's fine today to make things ugly,

95
00:06:54.579 --> 00:06:57.503
do not put this ugly
stuff into production.

96
00:06:57.503 --> 00:07:01.106
And so here's a little nifty trick, which
you should also not put into production,

97
00:07:01.106 --> 00:07:02.843
but it's kind of cool that you can do it.

98
00:07:02.843 --> 00:07:07.321
So if you see at the bottom, it says,
you have zero invalid entries.

99
00:07:10.004 --> 00:07:12.894
&gt;&gt; Estelle Weyl: Right,
cuz none of these are required, so

100
00:07:12.894 --> 00:07:15.150
this works with the JavaScript.

101
00:07:15.150 --> 00:07:22.250
But if I put the number 8 and the number
2, I now have 2 invalid entries.

102
00:07:22.250 --> 00:07:25.270
There is no JavaScript in this page.

103
00:07:25.270 --> 00:07:27.581
What I'm doing is,
I'm using a CSS counter, and

104
00:07:27.581 --> 00:07:30.550
I think we'll talk about
CSS counters later on.

105
00:07:30.550 --> 00:07:36.530
But basically saying, on the body,
we set the counter to 0.

106
00:07:36.530 --> 00:07:41.310
And then every time you hit something
that's invalid, increment it.

107
00:07:42.650 --> 00:07:47.483
And then in the paragraph,
generate content that says,

108
00:07:47.483 --> 00:07:52.115
you have,
whatever that invalidCount is currently,

109
00:07:52.115 --> 00:07:55.851
the counter of invalidCount, print that.

110
00:07:55.851 --> 00:08:01.325
And the reason that it has to come after,
right, it comes after everything,

111
00:08:01.325 --> 00:08:06.480
is because I have to actually have
those invalid entries for it to count.

112
00:08:06.480 --> 00:08:10.146
So that paragraph has to be
after those invalid entries.

113
00:08:10.146 --> 00:08:15.420
Otherwise if I put it at the top,
right, if I did,

114
00:08:15.420 --> 00:08:20.314
body,
&gt;&gt; Estelle Weyl: It wouldn't be

115
00:08:20.314 --> 00:08:20.960
able to count.

116
00:08:20.960 --> 00:08:22.383
If I did,

117
00:08:27.569 --> 00:08:30.887
&gt;&gt; Estelle Weyl: liinth-of-type-2,

118
00:08:30.887 --> 00:08:35.711
which we'll cover later on, right,

119
00:08:35.711 --> 00:08:41.299
it would only be able
to count the first one.

120
00:08:41.299 --> 00:08:44.674
If I did after, let's see if this works,
I've never done this before.

121
00:08:44.674 --> 00:08:49.595
Yeah, so
you can actually count your errors.

122
00:08:49.595 --> 00:08:54.894
This is not the best way to do stuff,
this is not best practices at all.

123
00:08:54.894 --> 00:08:57.041
But I want to show you the power of CSS,

124
00:08:57.041 --> 00:09:01.554
that you can actually do all sorts of
things if your JavaScript isn't working.

125
00:09:01.554 --> 00:09:05.690
Or if you want to tell some user how many
errors they have, that their form isn't

126
00:09:05.690 --> 00:09:09.600
filled out and have it continually
counting, you could actually do that.

127
00:09:09.600 --> 00:09:12.377
Progressive enhancement,
don't make it required.

