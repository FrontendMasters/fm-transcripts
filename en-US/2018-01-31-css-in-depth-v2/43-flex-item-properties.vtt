WEBVTT

1
00:00:02.846 --> 00:00:05.363
&gt;&gt; Estelle Weyl: Next we're
gonna talk about flex items.

2
00:00:05.363 --> 00:00:10.018
So we've been talking so far all
the properties have controlled the flex

3
00:00:10.018 --> 00:00:14.674
items based on the flex container but
you can actually control flex items

4
00:00:14.674 --> 00:00:18.218
individually.
&gt;&gt; Estelle Weyl: So

5
00:00:18.218 --> 00:00:23.285
we have the align self property,
remember we had the align items property,

6
00:00:23.285 --> 00:00:25.754
Which align an item within its line.

7
00:00:25.754 --> 00:00:29.446
And they all went to the top, or
they all went to the bottom, or

8
00:00:29.446 --> 00:00:31.013
they were all stretched.

9
00:00:31.013 --> 00:00:35.897
You can override that align
items on each individual one.

10
00:00:35.897 --> 00:00:42.699
So here C by default, the whole container
is gonna be the same height as C,

11
00:00:42.699 --> 00:00:47.115
because C is the one with
the most information.

12
00:00:47.115 --> 00:00:50.871
And I've aligned all the items in
the center, but I said, just B,

13
00:00:50.871 --> 00:00:52.880
I want it to stretch.

14
00:00:52.880 --> 00:00:55.317
So A and C are both centereds, but

15
00:00:55.317 --> 00:00:59.943
C looks like it's stretched
because it is taking up 100%.

16
00:00:59.943 --> 00:01:03.510
And B is not being a line centered,
it's actually stretched.

17
00:01:06.575 --> 00:01:11.261
Flex-end, I can bring it
all the way to the bottom.

18
00:01:11.261 --> 00:01:14.483
I can bring it all the way up to the top.

19
00:01:14.483 --> 00:01:19.355
I can do baseline.
&gt;&gt; Estelle Weyl: And

20
00:01:19.355 --> 00:01:24.426
since it's the only one at baseline,
it goes all the way to the top.

21
00:01:24.426 --> 00:01:25.948
What does auto do?

22
00:01:25.948 --> 00:01:30.685
Someone asked that earlier, right?
&gt;&gt; Estelle Weyl: Auto

23
00:01:30.685 --> 00:01:36.047
basically says align center because
that's what the parent is saying to do.

24
00:01:36.047 --> 00:01:42.345
And then we had center stretched baseline,
okay, so we're good.

25
00:01:42.345 --> 00:01:49.074
I could have done the same thing with A.
&gt;&gt; Estelle Weyl: All right,

26
00:01:49.074 --> 00:01:50.054
so I'm only moving one.

27
00:01:50.054 --> 00:01:55.871
That is the align-self, which overwrites
the align-items property just for

28
00:01:55.871 --> 00:02:03.108
the elements on which it's declared.
&gt;&gt; Estelle Weyl: So

29
00:02:03.108 --> 00:02:08.617
here just the h.

30
00:02:08.617 --> 00:02:12.660
So this previous one here
was a single line, right?

31
00:02:12.660 --> 00:02:14.639
This is a single line of flex items.

32
00:02:14.639 --> 00:02:17.410
Here we have multiple lines of flex items.

33
00:02:17.410 --> 00:02:23.010
The letter h is the one where I'm
gonna overwrite because it says h or

34
00:02:23.010 --> 00:02:24.295
line stretch.

35
00:02:24.295 --> 00:02:28.843
So all of them on the container,
it says align-items: flex

36
00:02:28.843 --> 00:02:33.622
start;.
&gt;&gt; Estelle Weyl: Or

37
00:02:33.622 --> 00:02:38.720
align-content: flex end;, rather.
&gt;&gt; Estelle Weyl: So

38
00:02:38.720 --> 00:02:42.467
align-content: flex end;, means that
all the content is down at the bottom.

39
00:02:42.467 --> 00:02:47.406
Or align-items mean that within each
line every item is aligned to the top of

40
00:02:47.406 --> 00:02:48.493
that flex line.

41
00:02:48.493 --> 00:02:53.933
So the difference between align-content
says go all the way down to the bottom,

42
00:02:53.933 --> 00:02:57.216
align-item says within
each line go to the top.

43
00:02:57.216 --> 00:03:00.481
And then align-self says just for

44
00:03:00.481 --> 00:03:05.096
one item on which I'm
gonna declare it flex end,

45
00:03:05.096 --> 00:03:09.726
oops, and
you see how the h is down at the bottom.

46
00:03:09.726 --> 00:03:14.706
So F, G, I, J, A, B, C, D, E and

47
00:03:14.706 --> 00:03:20.187
K they all inherit the align-item from

48
00:03:20.187 --> 00:03:25.015
the parent, from the container.

49
00:03:25.015 --> 00:03:28.240
And that's usually what you wanna do, you
want all your elements to look the same.

50
00:03:28.240 --> 00:03:31.892
You don't want one to look different,
this does not look good.

51
00:03:31.892 --> 00:03:34.304
But even if they were
all looking the same,

52
00:03:34.304 --> 00:03:38.592
it would still look like crap because
I used a pale green, orange, yellow,

53
00:03:38.592 --> 00:03:42.965
an icky font, cuz we are trying to make
things look as ugly as possible today.

54
00:03:42.965 --> 00:03:47.340
So that's the align-self property.
&gt;&gt; Estelle Weyl: Then we have

55
00:03:47.340 --> 00:03:51.378
the order property.
&gt;&gt; Estelle Weyl: So by default,

56
00:03:51.378 --> 00:03:58.413
every single element, or a flex item
has the order of 0, they're all 0.

57
00:03:58.413 --> 00:04:03.523
So they all will be in the order
that they were declared,

58
00:04:03.523 --> 00:04:08.633
every order value, so
you can change the order to -1,

59
00:04:08.633 --> 00:04:12.459
to -50, to 400 whatever you want.

60
00:04:12.459 --> 00:04:19.230
But every single item that has the order
property with the value of -1,

61
00:04:19.230 --> 00:04:23.231
will come before all of those that have 0.

62
00:04:23.231 --> 00:04:26.694
But all of those within the group that
have the value of zero would be in

63
00:04:26.694 --> 00:04:27.776
order of the mark up.

64
00:04:27.776 --> 00:04:32.341
And all of those with -1 would be
in order of the mark up in terms of

65
00:04:32.341 --> 00:04:34.530
the ones that have value of 1.

66
00:04:34.530 --> 00:04:38.705
So let's show by example cause
explaining it is a little bit hard.

67
00:04:38.705 --> 00:04:43.891
So here, we already know that this
go in alphabetical order, right?

68
00:04:43.891 --> 00:04:46.461
So let me just do X and X.

69
00:04:46.461 --> 00:04:51.293
It goes Alphabet, Banana, Crayons,
Dinosaurs, Eggplant, Foundation, Ghost,

70
00:04:51.293 --> 00:04:52.430
Happy, right?

71
00:04:52.430 --> 00:04:54.891
It's in alphabetical order.

72
00:04:54.891 --> 00:04:56.740
I've put display flex.

73
00:04:58.130 --> 00:05:00.242
So it's a flex box on the parent.

74
00:05:00.242 --> 00:05:02.260
And then the flex flow says row.

75
00:05:02.260 --> 00:05:04.377
So it's gonna go across
from left to right.

76
00:05:04.377 --> 00:05:10.220
And then top to bottom because it allows
to wrap but it's not wrap reverse.

77
00:05:10.220 --> 00:05:14.065
So the cross axis is from top to bottom
the main axis is from left to right.

78
00:05:14.065 --> 00:05:19.230
Then I say every third one,
give it an order of -1.

79
00:05:19.230 --> 00:05:24.289
So all the dark gray ones came before
the medium gray and the white ones.

80
00:05:25.800 --> 00:05:28.852
But within the dark gray ones,
they're still in alphabetical order.

81
00:05:28.852 --> 00:05:34.512
It says Crayons, Foundation, Igloo, Lasso,
Orange, Rancid, Umbrella, Xylophone.

82
00:05:34.512 --> 00:05:37.020
I have no clue what mood I was in
when I came up with these words.

83
00:05:40.280 --> 00:05:43.735
So all the ones with an order of -1,

84
00:05:43.735 --> 00:05:47.974
comes before all of those
with an order of 0.

85
00:05:47.974 --> 00:05:51.317
Then I'm gonna give all these a 1,

86
00:05:51.317 --> 00:05:57.000
which means they all come after
the ones with the value of 0,

87
00:05:57.000 --> 00:06:00.917
but they are also in alphabetical order.

88
00:06:00.917 --> 00:06:05.289
So the third group is Alphabet, Dinosaurs,
Ghosts, Janitors, Magic 8-ball, Petunia,

89
00:06:05.289 --> 00:06:06.503
Shoelace and Valentine.

90
00:06:06.503 --> 00:06:10.700
If I were to do -2,
&gt;&gt; Estelle Weyl: Or-

91
00:06:13.555 --> 00:06:14.766
&gt;&gt; Estelle Weyl: -11, they would

92
00:06:14.766 --> 00:06:19.417
come before all those with a -1.
&gt;&gt; Estelle Weyl: And

93
00:06:19.417 --> 00:06:25.996
then if I were to give all of these,
order -22.

94
00:06:25.996 --> 00:06:29.350
That's on the parent,
it has to be on the child.

95
00:06:29.350 --> 00:06:31.589
Okay, that's why it didn't work.

96
00:06:31.589 --> 00:06:34.411
So do you understand how order works?

97
00:06:34.411 --> 00:06:39.483
Not only does it change the order,
but once, if more than one

98
00:06:39.483 --> 00:06:45.258
element has the same value for
order, it's in the order of the HTML.

99
00:06:45.258 --> 00:06:46.844
It'll be in the same order as the code of

100
00:06:46.844 --> 00:06:51.649
the markup.
&gt;&gt; Estelle Weyl: And

101
00:06:51.649 --> 00:06:53.281
this is just here because it's pretty.

102
00:06:53.281 --> 00:06:59.951
No, it's here because the navigation here-
&gt;&gt; Estelle Weyl: I

103
00:06:59.951 --> 00:07:05.209
gave it the order of 4.
&gt;&gt; Estelle Weyl: And

104
00:07:05.209 --> 00:07:09.392
so it's at the bottom,
because it's greater than 0.

105
00:07:09.392 --> 00:07:12.078
But you'll notice what I did.

106
00:07:12.078 --> 00:07:16.702
I gave it both the nav and
the footer in order of 4,

107
00:07:16.702 --> 00:07:21.123
because by default nav and
footer both have 0.

108
00:07:21.123 --> 00:07:25.933
If I only gave nav an order of 4,
footer would still have 0 and

109
00:07:25.933 --> 00:07:27.977
will come before the nav.

110
00:07:27.977 --> 00:07:31.119
And I definitely want the footer
to come after the nav.

111
00:07:31.119 --> 00:07:36.130
So by giving nav and footer both order
a value of 4, they're both last,

112
00:07:36.130 --> 00:07:41.324
but they're still in the order in terms
of the HTML, nav can be for footer.

113
00:07:41.324 --> 00:07:45.600
Does that make sense to everyone?
&gt;&gt; Estelle Weyl: Okay, so

114
00:07:45.600 --> 00:07:50.907
in terms of accessibility.
&gt;&gt; Estelle Weyl: The screen

115
00:07:50.907 --> 00:07:55.786
reader is gonna read it in the source
order, I think except for Mozilla.

116
00:07:55.786 --> 00:07:59.394
But that will probably be fixed,
but I'm not sure.

117
00:07:59.394 --> 00:08:04.645
I think there's one browser that
was like maybe we should read it.

118
00:08:04.645 --> 00:08:08.790
The interesting thing is and
the thing to worry about is the tab order.

119
00:08:08.790 --> 00:08:14.444
A lot of people access websites
using the keyboard not their mouse.

120
00:08:14.444 --> 00:08:19.262
So a visual reader will look at it and
point to something and click.

121
00:08:19.262 --> 00:08:24.293
But that's fine but if you're tabbing,
and you have the top part for

122
00:08:24.293 --> 00:08:28.371
search engine optimization,
some bs stuff on the top,

123
00:08:28.371 --> 00:08:32.133
because it says baseball,
baseball, baseball.

124
00:08:32.133 --> 00:08:35.150
Or actually, it would be sex,
sex, sex, sex, sex,

125
00:08:35.150 --> 00:08:38.308
because that will bring up
your order on many more views.

126
00:08:38.308 --> 00:08:42.384
And you put that on the bottom, and
someone starts tabbing through your page,

127
00:08:42.384 --> 00:08:44.744
they're not gonna see
where their mouse is.

128
00:08:44.744 --> 00:08:49.107
So realize that you wanna think about
the tab order when you're reordering

129
00:08:49.107 --> 00:08:51.917
things.
&gt;&gt; Estelle Weyl: And

130
00:08:51.917 --> 00:08:56.631
then right to left languages,
it's kind of awesome,

131
00:08:56.631 --> 00:09:02.584
because it will flip it for you,
and it'll follow the source order.

132
00:09:02.584 --> 00:09:07.675
So it'll put your first div to the right.

133
00:09:07.675 --> 00:09:10.968
And then,
a second in the order that they read.

