WEBVTT

1
00:00:02.554 --> 00:00:07.573
&gt;&gt; Estelle Weyl: So specificity,
&gt;&gt; Estelle Weyl: So

2
00:00:07.573 --> 00:00:12.496
in terms of specificity,
we've covered a lot of selectors, and

3
00:00:12.496 --> 00:00:16.040
they all have a specificity weight.

4
00:00:16.040 --> 00:00:19.130
We didn't actually cover the global
selector, which is the star,

5
00:00:19.130 --> 00:00:25.060
which means match anything and
anything and everything, all elements.

6
00:00:25.060 --> 00:00:28.300
They will not match all pseudoelements and
stuff like that, but

7
00:00:28.300 --> 00:00:30.260
it matches everything.

8
00:00:30.260 --> 00:00:34.118
It has a specificity of 0-0-0.

9
00:00:34.118 --> 00:00:38.289
So that sounds like it has no specificity,
but it actually has specificity,

10
00:00:38.289 --> 00:00:39.517
it matches elements.

11
00:00:39.517 --> 00:00:43.194
So it's not that it has no specificity,
it's just that the weight is 0.

12
00:00:44.450 --> 00:00:49.035
An element has a specificity of 0-0-1.

13
00:00:49.035 --> 00:00:54.991
If you have two elements, it's a bit
more specific and it would be 0-0-2.

14
00:00:54.991 --> 00:00:59.969
If you have 12 elements
listed in your selector,

15
00:00:59.969 --> 00:01:06.120
you've got a problem, but
the specificity is 0-0-12.

16
00:01:06.120 --> 00:01:13.063
No matter how many element selectors you
have, one class selector will overwrite,

17
00:01:13.063 --> 00:01:19.830
or will be more specific than no matter
how many element selectors you have.

18
00:01:19.830 --> 00:01:22.900
So a single class is 0-1-0.

19
00:01:22.900 --> 00:01:26.470
So whatever that value is in that middle
column overwrites the value that's

20
00:01:26.470 --> 00:01:27.530
in the right column.

21
00:01:27.530 --> 00:01:32.700
So you first compare the column on the
left, then the middle, and then the right.

22
00:01:34.400 --> 00:01:38.970
So here I have a global
selector in front of my class.

23
00:01:38.970 --> 00:01:41.420
The global one has a specificity of 0.

24
00:01:41.420 --> 00:01:48.450
And the myClass has a specificity
of 0-1-0, so total, you have 0-1-0.

25
00:01:49.860 --> 00:01:53.760
If you have an attribute
selector like type=checkbox,

26
00:01:53.760 --> 00:01:57.831
that has the same weight as a class
selector, so it's 0-1-0 as well.

27
00:01:59.060 --> 00:02:03.630
Only-of-type, a structural selector,
same specificity, 0-1-0.

28
00:02:05.270 --> 00:02:10.590
If you put an element selector with
a class or an attribute selector or

29
00:02:10.590 --> 00:02:15.440
structural selector, right, you have one

30
00:02:15.440 --> 00:02:20.300
class weighted out
selector there of 0-1-0.

31
00:02:20.300 --> 00:02:24.520
And then you have here,
you have one element, an li here and

32
00:02:24.520 --> 00:02:26.930
an LIli there, so 0-1-1.

33
00:02:26.930 --> 00:02:31.110
Here, you have two elements,
li nth-of-type 3n, tilde li.

34
00:02:32.660 --> 00:02:38.270
So it matches any li that is an adjacent
sibling that comes after the third.

35
00:02:38.270 --> 00:02:42.520
So it'd be the fourth list item,
fifth, sixth, seventh, and eighth.

36
00:02:42.520 --> 00:02:47.696
And it has a specificity of
0-1-2 because we have two lis,

37
00:02:47.696 --> 00:02:51.050
we have an li here and an li there.

38
00:02:51.050 --> 00:02:52.370
Does that make sense?

39
00:02:52.370 --> 00:02:54.850
We start with an li and we end with an li.

40
00:02:54.850 --> 00:03:00.075
Similarly, form input of type email.

41
00:03:00.075 --> 00:03:05.934
So it's an input type that has a type
attribute with a value of email,

42
00:03:05.934 --> 00:03:09.180
that is descendant of a form, right?

43
00:03:09.180 --> 00:03:12.089
One element, two elements.

44
00:03:12.089 --> 00:03:16.355
One element is the input,
one element is the form, so that's 0-0-2,

45
00:03:16.355 --> 00:03:20.771
plus the attribute selector,
which is 0-1-0, so you have 0-1-2.

46
00:03:22.620 --> 00:03:24.500
Going down on this page a little bit,

47
00:03:24.500 --> 00:03:27.810
which is easier to do in the next
slide because this is a pdf.

48
00:03:27.810 --> 00:03:31.350
So this link right here, you can print it
up and put it up on your desk at home.

49
00:03:33.620 --> 00:03:40.790
Okay, going down, here I'll skip this one,
I'll go to this one.

50
00:03:40.790 --> 00:03:45.990
The not, so here we have input
that has a type attribute.

51
00:03:45.990 --> 00:03:50.640
So that's 0-1-1, and
then we have a not and a class.

52
00:03:50.640 --> 00:03:56.516
The not has no weight whatsoever, it is
the parameter that's past the argument,

53
00:03:56.516 --> 00:04:00.210
that is a class, right, so that's 0-1-0.

54
00:04:00.210 --> 00:04:04.272
So you have 0-1-0, 0-1-0, and 0-0-1, for

55
00:04:04.272 --> 00:04:08.643
a total of 0-2-1.
&gt;&gt; Estelle Weyl: Then here,

56
00:04:08.643 --> 00:04:12.870
we have ten classes,
attributes and pseudo classes.

57
00:04:14.400 --> 00:04:17.482
If you ever do this, find a new job.
&gt;&gt; Speaker 2: [LAUGH]

58
00:04:17.482 --> 00:04:19.024
&gt;&gt; Estelle Weyl: But this is what sess or

59
00:04:19.024 --> 00:04:21.660
less will sometimes produce.

60
00:04:21.660 --> 00:04:25.753
So be careful, right, you don't want
to increase your specificity like that,

61
00:04:25.753 --> 00:04:28.114
because it makes it
really hard to overwrite.

62
00:04:28.114 --> 00:04:31.445
And some people will use
an id to overwrite this.

63
00:04:31.445 --> 00:04:33.350
They should just never produce
this in the first place.

64
00:04:34.680 --> 00:04:38.440
So an id selector is a weight of 1-0-0,
and

65
00:04:38.440 --> 00:04:42.960
here I use cute plankton,
they're the cutest, right?

66
00:04:42.960 --> 00:04:48.970
Then the fish, and the shark isn't that
cute because the shark isn't that nice.

67
00:04:48.970 --> 00:04:50.670
We don't wanna use sharks.

68
00:04:50.670 --> 00:04:53.010
We can use sharks if we need to,
right, but

69
00:04:53.010 --> 00:04:56.180
we wanna avoid them cuz
we don't like sharks.

70
00:04:56.180 --> 00:04:59.117
So basically,
try to avoid div-itis and id-itis,

71
00:04:59.117 --> 00:05:02.589
because the weight is really high and
it's hard to overwrite.

72
00:05:04.220 --> 00:05:07.760
So here we have two plankton,
two fish and a shark,

73
00:05:07.760 --> 00:05:13.100
because it's my id li.class a href.

74
00:05:13.100 --> 00:05:17.030
So you have one class weight here
as an href attribute selector, and

75
00:05:17.030 --> 00:05:20.550
one class here, so
that's where the middle 0-2-0 comes from.

76
00:05:20.550 --> 00:05:26.358
You have one element as an a and
an li, so that's 0-0-2 right there,

77
00:05:26.358 --> 00:05:32.282
and then you have one div which is
the id selector, so that's 1-2-2.

78
00:05:32.282 --> 00:05:37.539
And then here you have div-itis for no
reason, you have two id selectors, right?

79
00:05:37.539 --> 00:05:41.486
Or almost no reason, it's very rare
that you need them, and then the link.

80
00:05:41.486 --> 00:05:46.530
So you've saying this link that's in my
div, that is nested within something that

81
00:05:46.530 --> 00:05:52.170
it has div-itis,

82
00:05:52.170 --> 00:05:57.610
so this right here is more specific,
has more weight than that.

83
00:05:57.610 --> 00:06:00.180
Even though this is very specific, right?

84
00:06:00.180 --> 00:06:04.440
This is very specific, it's saying,
I want a link that has an href attribute

85
00:06:04.440 --> 00:06:09.020
that isn't an li that has a class of
class, that is in this specific div.

86
00:06:10.170 --> 00:06:13.980
That's very specific, but
it has less weight than something saying

87
00:06:13.980 --> 00:06:16.180
I have div-itis and
I'm gonna use a bunch of ids.

88
00:06:17.600 --> 00:06:22.941
Then you have the style, which has
more weight than any number of sharks,

89
00:06:22.941 --> 00:06:26.120
cuz that's an inline, right?

90
00:06:26.120 --> 00:06:27.590
And that is the BP oil tanker.

91
00:06:27.590 --> 00:06:32.040
And if we all remember the BP oil tanker
that destroyed half of the Gulf of Mexico,

92
00:06:32.040 --> 00:06:32.730
we don't like that.

93
00:06:33.800 --> 00:06:38.540
And even worse than that is important,
and that is a nuclear bomb.

94
00:06:38.540 --> 00:06:40.490
And important is the nuclear bomb option.

95
00:06:42.500 --> 00:06:44.920
So you want to avoid this like the plague.

96
00:06:44.920 --> 00:06:50.130
I use it all the time to check
out why my CSS isn't working, but

97
00:06:50.130 --> 00:06:52.540
I never put it into production.

98
00:06:52.540 --> 00:06:56.150
I use it in my debugger
while I'm in the dev tools.

99
00:06:56.150 --> 00:07:00.188
I open it up and I look and
I add important, and

100
00:07:00.188 --> 00:07:05.840
then I'm like I was targeting a link and
this is a button.

101
00:07:05.840 --> 00:07:08.882
So I was targeting the wrong element,
obviously that's where I went wrong.

102
00:07:08.882 --> 00:07:11.930
And I find where my mistakes are with
important, but I don't put them in.

103
00:07:11.930 --> 00:07:13.060
So there's some notes down here.

104
00:07:14.090 --> 00:07:20.315
So I already explained that x-0-0 is
the div, the number of id selectors.

105
00:07:20.315 --> 00:07:25.323
0-y-0 is the number of class selectors,
attribute selectors, and pseudo classes.

106
00:07:25.323 --> 00:07:29.380
0-0-z is the number of type selectors and
pseudo elements.

107
00:07:30.500 --> 00:07:33.230
So element selector,
it's actually called a type selector,

108
00:07:33.230 --> 00:07:34.890
I was using the wrong terminology.

109
00:07:34.890 --> 00:07:39.668
And pseudo elements like first letter,
first line, before, and after.

110
00:07:39.668 --> 00:07:43.355
And then here, the reason I want to point
out the stuff at the bottom is because

111
00:07:43.355 --> 00:07:45.660
this is the important stuff.

112
00:07:45.660 --> 00:07:51.800
The star, the plus, the greater than,
the tilde, and then the space.

113
00:07:51.800 --> 00:07:57.570
The space that is between that
combinator between e space f,

114
00:07:57.570 --> 00:07:59.350
that's also a combinator.

115
00:07:59.350 --> 00:08:00.630
Those have no value.

116
00:08:00.630 --> 00:08:03.580
They increase specificity to
make things more specific, but

117
00:08:03.580 --> 00:08:04.580
they don't add to the weight.

118
00:08:06.120 --> 00:08:09.337
And then the not, and I think I said
this enough, but I'll say it for

119
00:08:09.337 --> 00:08:11.955
hopefully the last time,
the not itself has no value.

120
00:08:11.955 --> 00:08:17.569
It's the x, it's the argument
that increases the specificity.

121
00:08:19.190 --> 00:08:21.605
So this basically
summarizes all of that and

122
00:08:21.605 --> 00:08:26.548
explains how it works.
&gt;&gt; Estelle Weyl: This also,

123
00:08:26.548 --> 00:08:30.166
we've already gone over all of this,
but it's in writing for

124
00:08:30.166 --> 00:08:32.820
later on if you want to
use this as a resource.

125
00:08:33.870 --> 00:08:37.920
Now, in terms of hacking,
I said avoid !important.

126
00:08:37.920 --> 00:08:39.900
There's a few ways I avoid !important.

127
00:08:39.900 --> 00:08:46.170
A lot of people do this,
when something has a class of .disabled,

128
00:08:46.170 --> 00:08:51.910
make the cursor the default cursor,
and make that important, always.

129
00:08:51.910 --> 00:08:54.926
Anything that has a class of .disabled,

130
00:08:54.926 --> 00:08:58.640
the clicker will never look
like it can click on it.

131
00:08:58.640 --> 00:09:07.665
p.btn (cursor: pointer;)
&gt;&gt; Estelle Weyl: So

132
00:09:07.665 --> 00:09:13.221
you have a p that has a class of btn,
right, cuz you're an idiot and

133
00:09:13.221 --> 00:09:16.810
you wanna make a button
out of a paragraph.

134
00:09:18.590 --> 00:09:20.010
I'm sorry, I'm really judgmental.

135
00:09:23.030 --> 00:09:26.464
So that will never overwrite
the previous statement, right?

136
00:09:26.464 --> 00:09:30.720
There's no way that thing actually also
had the class disabled by accident

137
00:09:30.720 --> 00:09:33.500
somehow, that you could
have the right cursor.

138
00:09:34.600 --> 00:09:38.641
So one thing you can do is just
do .disabled.disabled.disabled.

139
00:09:38.641 --> 00:09:43.875
It's really important to me, but
when you need to overwrite it, you can.

140
00:09:43.875 --> 00:09:50.138
That's what that's saying, that's giving
you a specificity instead of 1-0-0-0-0,

141
00:09:50.138 --> 00:09:55.490
it's giving you a specificity of 0-3-0,
which is pretty good.

142
00:09:55.490 --> 00:09:58.461
You shouldn't be having more than
three classes on anything anyway.

143
00:09:58.461 --> 00:10:01.200
You could put 5, you could put 12.

144
00:10:01.200 --> 00:10:03.910
It basically says does
the class disabled exist?

145
00:10:04.950 --> 00:10:08.480
Yes, okay, so does this other
class which says disabled exist?

146
00:10:08.480 --> 00:10:12.600
Yes, or does this other class which
we have on this list disabled exist,

147
00:10:12.600 --> 00:10:14.680
yes so it doesn't have to be
on the element three times.

148
00:10:14.680 --> 00:10:16.934
It only has to be on it once,
cuz it basically checks the first one,

149
00:10:16.934 --> 00:10:19.130
then the next one and the next one and
matches every single time.

150
00:10:20.220 --> 00:10:21.080
So that's how that works.

151
00:10:21.080 --> 00:10:23.310
Let me go onto one more thing and
then answer your question.

152
00:10:23.310 --> 00:10:26.960
So that's for classes,
but what about divs?

153
00:10:26.960 --> 00:10:30.947
You have a third party API, they put an id
on their thing and they made everything

154
00:10:30.947 --> 00:10:34.233
blue, and it just does not match
the blue scheme of your website.

155
00:10:34.233 --> 00:10:38.337
Uh-oh, right, they put !important on it.

156
00:10:38.337 --> 00:10:41.356
Well, you should never put !important
if you're doing a third-party widget,

157
00:10:41.356 --> 00:10:45.355
cuz you should just,
&gt;&gt; Estelle Weyl: Don't buy

158
00:10:45.355 --> 00:10:46.290
their stock options.

159
00:10:46.290 --> 00:10:50.540
Okay, what you can do is similarly
do #TheirWidget#TheirWidget,

160
00:10:50.540 --> 00:10:53.750
because you need to overwrite
whatever they have.

161
00:10:53.750 --> 00:10:57.384
And they've used an id, and
you can't go beyond their id selector.

162
00:10:57.384 --> 00:10:59.990
How can you do it without !important,
right?

163
00:10:59.990 --> 00:11:05.030
You could inline style, you could write
important, those are your two options.

164
00:11:05.030 --> 00:11:09.610
If they just did this, right,
without the important, right,

165
00:11:09.610 --> 00:11:12.080
how can you be more
specific than TheirWidget?

166
00:11:12.080 --> 00:11:16.290
You just do it twice, right?

167
00:11:16.290 --> 00:11:18.300
So it says does it have
the id of TheirWidget?

168
00:11:18.300 --> 00:11:21.787
Yes, and then it says does it
have the ID of TheirWidget?

169
00:11:21.787 --> 00:11:24.130
Yes, and so you have 2-0-0.

170
00:11:24.130 --> 00:11:29.137
Whenever you use this one or this
bottom one, disabled.disabled.disabled,

171
00:11:29.137 --> 00:11:33.699
in your markup, in your code,
always comment out why you're doing it cuz

172
00:11:33.699 --> 00:11:36.659
anyone else would think
that's a big mistake.

173
00:11:36.659 --> 00:11:41.857
And just say adding specificity
cuz we will not say what

174
00:11:41.857 --> 00:11:49.120
we think of these people who are putting
in ids in their third party widgets.

175
00:11:49.120 --> 00:11:53.290
So hack in case of
emergency would be a:not,

176
00:11:53.290 --> 00:11:58.342
idDoesNotExist idDoesNotExist id,
cuz if you don't

177
00:11:58.342 --> 00:12:03.539
know what their ids are,
cuz their ids change, right?

178
00:12:03.539 --> 00:12:08.597
So this is just saying any a, but
it's giving the a a specificity

179
00:12:08.597 --> 00:12:12.453
like this is a link element,
it's an a element.

180
00:12:12.453 --> 00:12:16.788
And it's an a with a specificity of 3-0-1,

181
00:12:16.788 --> 00:12:20.720
that's how you can give specificity.

182
00:12:20.720 --> 00:12:26.500
Don't ever do this unless
it's something you can't

183
00:12:26.500 --> 00:12:29.840
target, because it's someone else's
markup coming from some other server, and

184
00:12:29.840 --> 00:12:31.020
you really need to overwrite it.

185
00:12:32.820 --> 00:12:34.996
Okay, we're gonna come up on a break soon.

186
00:12:34.996 --> 00:12:38.723
But before that,
I want to cover worst case scenario,

187
00:12:38.723 --> 00:12:41.000
how do you overwrite important?

188
00:12:43.420 --> 00:12:48.367
This is the worst hack in the world,
but it says, color: white !important.

189
00:12:48.367 --> 00:12:51.166
Do these look white to you?

190
00:12:51.166 --> 00:12:54.420
No, because I have an animation.

191
00:12:55.470 --> 00:12:58.100
We'll learn about animations later on,
probably tomorrow.

192
00:12:59.430 --> 00:13:01.720
It says keyframes color.

193
00:13:01.720 --> 00:13:04.220
So the name of the animation is color.

194
00:13:04.220 --> 00:13:07.690
And at the 100%, make it orange.

195
00:13:07.690 --> 00:13:12.310
And then li says call this
animation called color.

196
00:13:12.310 --> 00:13:15.350
And then stop at the 100% mark and
leave it there.

197
00:13:16.780 --> 00:13:21.664
So if I actually change this to,
just to show you that

198
00:13:21.664 --> 00:13:26.649
it worked.
&gt;&gt; Estelle Weyl: And

199
00:13:26.649 --> 00:13:29.737
this is just in case everyone knows
selectors, they don't know this.

200
00:13:29.737 --> 00:13:32.507
So it's okay, at least someone can
learn something during this session.

