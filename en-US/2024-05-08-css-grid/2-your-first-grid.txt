[00:00:00]
>> All right, so let's go on to chapter two here. And in chapter two, we're gonna do an introduction to Grid. So now that you know how Grid works, let's explore its structure and its syntax. So if you click the button here for the beginning CodePen. This should open up in a new window and in honor of the eclipse that's coming to America.

[00:00:24]
We've got a whole bunch of astronomy pictures here as the theme for this particular course. If this is your first time using CodePen, anybody here in this room, have you all used CodePen before?
>> That's my first.
>> First time, okay, great. So what you'll wanna do here as you open up your CodePen, you'll probably wanna sign up for the free account.

[00:00:44]
That would be a great thing to do. And then down at the bottom of the page, way, way, way down at the bottom, there's a button down here that says Fork. Fork is a fancy word for make a copy of this CodePen to my own account. So if you click that button, it will make a copy of the code here for you.

[00:01:03]
Then the last thing that I like to do to try to set up CodePen is by default, all the code goes across the top of the page. I prefer it to be on the left hand side. So up at the top here, there is a thing that looks like a cupcake.

[00:01:17]
We're gonna tip that cupcake over to the left and that will put your code on the left hand side. And I like this because you can grab the bar in the middle here, and you can drag things back and forth and see how the screen is gonna look kind of at larger and smaller dimensions, okay.

[00:01:33]
So any time we get started here, we always wanna start by just looking at our HTML code. We start with an h1 here, we have our moons of Jupiter, inside of this we have a series of figures. One of the features of CodePen, also in VS Code that I love, is the ability to collapse things here using these triangles so we can see what's going on.

[00:01:57]
We have four figures here inside of our document and if we un-collapse one of those and take a look at it. If you're not familiar with the HTML figure element, it's designed to associate a photo with text that goes with it. So in other words like a description for the picture.

[00:02:15]
On the top here we have our picture and of course with its alt text and then underneath of that we might have a caption of some kind. In this case we have the in fact that this is Volcanic Activity on IO. For those of you who like accessibility note that the alt text helps people who can't actually see the picture.

[00:02:37]
So I've written here A pizza-looking moon. [LAUGH] The outline of an erupting volcano is on the left, okay? Whereas the caption just says Volcanic Activity on IO, all right? So that is going to be the same for all of our other figures that are here on this page and these are the four Galilean Moons of Jupiter.

[00:02:59]
Always super cool to look at, right? These are the ones you can see from Earth. Has anybody ever looked through a telescope and seen these before? It's very, very cool if you get the chance. Just use a regular old telescope, you can see them, okay. So
>> Can I ask?

[00:03:15]

>> Of course.
>> Is the cite HTML elements something that belongs within fig caption specifically or can that be used outside of fig caption also?
>> Cite can be used anywhere that a citation is taking place. And, of course, in this case I'm citing the source of my image.

[00:03:33]
So cite is a great element for using them.
>> What's the point or what does it do that the yeah, it doesn't.
>> So what cite does is it flags this as a citation. So in other words, we know that this is now the source of something and that's the purpose of it.

[00:03:50]
It'll be really helpful to people in particular who have screen readers. So the first thing that I would like to do, is I would like to put all four of these moons next to each other in a nice little row, okay? And what I have right now is I have four individual figures, one for each one of these moons.

[00:04:09]
So if you think about it in your mind, how is this gonna look? We're gonna have four moons going here in a row, correct? Make sense? Okay, so somehow we need to apply Grid such that these figures wind up being the so-called children. And we need to have a parent that will contain our declaration to display Grid.

[00:04:31]
Right now, we don't have that here in our HTML. So anytime you are in a situation like this and you started to mark up your content systematically which is what is already done here for you. What we're gonna do then is add to this a div, in this case because all it's gonna do for us is serve as a grouping mechanism for these items.

[00:04:53]
So we'll say div with a class of, whatever you wanna call it, I'm gonna call mine grid-container. Grid-container, grid parent mean the same entire thing then we can close that right after the figure. Okay, so now I have grouped my figures all together very, very nicely here on my page.

[00:05:23]
Now when I go into my CSS here, just to point out what I have, I put in just a little bit of basic formatting here. Basically assigning a font family to the body, setting up my images to have a max width of 100%. This makes the scale be a little bit flexible as the screen gets smaller.

[00:05:44]
We haven't swapped these out using picture sizes or source set just yet. So we're just gonna work with this max width little thing for now. And figure by default has a little bit of margin or padding associated with it so I've turned that off, all right. So here it is my CSS style then we need to set up a grid-container class.

[00:06:10]
And we get started, guess how we start working with grid? What would be the first thing that I put here? Anybody wanna take a guess? Yes.
>> Display.
>> Display what?
>> Grid.
>> Grid, awesome. Well done and absolutely nothing happens, okay? We got to keep going. Now I wanna have four columns.

[00:06:31]
Anybody know how I might state? I wanna have four columns here on my page.
>> Col-4?
>> That's a great idea. That would be a perfect name for a class. But the CSS property is grid-template-columns. So grid-template-columns. So in other words, we're gonna set up a pattern. And this pattern is going to be some number of columns going across the page.

[00:06:56]
And I am going to type the following 1fr, 1fr, 1fr, 1fr. Does that mean I have four French people here inside of my grid layout? What is an fr?
>> Frame or
>> Frame.
>> Front row?
>> Front row those are all great guesses. First row, I love it.

[00:07:19]
Any other guesses?
>> Online people said fraction.
>> Fraction. Fraction is what it stands for. So this stands for fractions. One of the wonderful things about Grid is we do not have to do math. We can just say, hey Grid, break this page into four fractions and it will do the math for you.

[00:07:36]
And look at that we have four evenly size columns here on the page. Isn't that amazing? With two little decorations here, we are done. We actually have our four columns. So that is gonna put these things all next to each other with no space in between. I can hear the graphic designer screaming already.

[00:07:55]
How about you? Okay, so if we want some space between these, we can say gap, something like 2rem. What is a rem?
>> Relative something.
>> Relative something.
>> [LAUGH]
>> Element?
>> Relative size of an m.
>> It's the relative size of an m?
>> [LAUGH]
>> Yeah.

[00:08:17]

>> Yep, kind of like that. It's a root relative m. What is an m? So helpful, right? What is an m?
>> The leader of MI6.
>> [LAUGH] Nice, not that. The letter m, that letter m. In typography land the letter m is often used as a reference letter to determine how big or small something is.

[00:08:45]
So if you have one of those really fat fonts, your letter m, it's 1m wide, but it's a really fat 1m. Whereas if you're using the narrow web fonts, it's a really skinny m, that's still 1m, okay? So it's relative to that. Here, we're looking at the root of the document so HTML.

[00:09:02]
Usually this means 16 pixels. Why would we wanna go through all the bother of doing this with rems?
>> So if you change your font, it'll change as well.
>> Exactly, so if I change my font size, if I wanna scale things up. Everything scales up proportionately, right?

[00:09:23]
Okay, so my gap number here by the way, 2rem is actually has two dimensions to it. We can have, if you prefer, you could have two numbers here. We can say our column-gap is 2rem and we could also say we have a row gap. Maybe you want a different number for that.

[00:09:50]
I don't know, 1rem, okay? We don't have any rows yet, but you can break those into two numbers using that type of notation. You can also combine these. You'll also see this done. So we have just a regular old gap again and I think it's 1rem 2rem, yes.

[00:10:12]
I always get confused which number comes first. So it's row and then the column. What if I wanna have two moons on the top and two moons underneath? How am I gonna set that up, anyone have a suggestion? Based on what you know or at least what would be a start?

[00:10:26]

>> Have two 1fr's in the columns.
>> Change this to just 1fr 1fr.
>> Yeah.
>> Hey, look at that, it worked. That's kinda cool, so let's talk about it's probably kind of surprising that that actually worked, isn't it? [LAUGH] So why did that work? Well, this is Grid trying to be helpful and guess at what you want.

[00:10:53]
So what Grid did was it looked at how many figures we had. We have four of them. And we have in our template columns we only have two template columns. So Grid said, well, I've got to do something with these other two pieces of content that are affected by the grid-container.

[00:11:07]
What should I do? Well, I'll just wrap around and put them in the next row, okay? Now we can declare rows as well. I often don't because I think usually columns is efficient for this very reason. This is called the intrinsic properties of Grid, that it's gonna try to guess for you, but you can call out your rows as well if you prefer.

