WEBVTT

1
00:00:00.280 --> 00:00:01.350
Hello everyone.

2
00:00:01.350 --> 00:00:02.706
My name is Jen Kramer.

3
00:00:02.706 --> 00:00:07.437
I am the Director of Learning Design and
Technology at AnnieCannons, and

4
00:00:07.437 --> 00:00:12.510
this is grid and Flexbox for Responsive
Design here at Frontend Masters.

5
00:00:12.510 --> 00:00:16.550
I'm thrilled to be presenting this
third version of this course.

6
00:00:16.550 --> 00:00:18.890
The first time I taught this was in 2017.

7
00:00:18.890 --> 00:00:23.682
Back when Flexbox was really the focus
of what we did for web page layouts.

8
00:00:23.682 --> 00:00:28.252
We were just starting to dig into
grid as a thing to layout web pages.

9
00:00:28.252 --> 00:00:33.712
Now that it's 2024, our focus is really
should be on grid filling out web pages.

10
00:00:33.712 --> 00:00:36.822
Flexbox is gonna handle a few
exceptions to the rule.

11
00:00:36.822 --> 00:00:39.592
And so we're gonna talk a lot
about that in this course.

12
00:00:40.693 --> 00:00:47.293
The website for this course is
at grid-flexbox.css.education.

13
00:00:47.293 --> 00:00:51.546
On this website, you'll find all of
the background behind the course and

14
00:00:51.546 --> 00:00:56.071
you will find down here a listing of all
the various chapters with links to all of

15
00:00:56.071 --> 00:00:59.583
the code pens that we'll be
working on in this course.

16
00:00:59.583 --> 00:01:04.331
This course does focus pretty much on
CodePen as a way for learning grid and

17
00:01:04.331 --> 00:01:07.624
Flexbox, and
also container queries, subgrid,

18
00:01:07.624 --> 00:01:10.558
and responsive images along the way.

19
00:01:10.558 --> 00:01:14.306
And the reason why is because we can just
jump right into CodePen and see what we're

20
00:01:14.306 --> 00:01:18.608
doing while we're coding, and there's
nothing to install and nothing to set up.

21
00:01:18.608 --> 00:01:21.290
We won't be building whole
web pages in this course,

22
00:01:21.290 --> 00:01:25.104
we'll be building parts of web pages,
so that we can understand how grid and

23
00:01:25.104 --> 00:01:27.499
Flexbox really work in
smaller environments.

24
00:01:28.969 --> 00:01:32.952
All right, so if we get started here,
we're going to start with chapter 1,

25
00:01:32.952 --> 00:01:35.899
you wanna click on that link there and
you'll see here.

26
00:01:35.899 --> 00:01:39.484
I wanna talk a little bit about
the history of responsive design and

27
00:01:39.484 --> 00:01:43.721
kind of remind you of where we've been so
that we can learn where we're going.

28
00:01:43.721 --> 00:01:45.927
There are slides that
are here available for

29
00:01:45.927 --> 00:01:48.550
you if you wanna download them and
follow along, and

30
00:01:48.550 --> 00:01:52.471
we'll refer back to this deck a couple
of times here in this course.

31
00:01:52.471 --> 00:01:55.961
So I started in this
industry in the year 2000.

32
00:01:55.961 --> 00:02:00.406
And so it is now year 24 that I
have been coding for the web.

33
00:02:00.406 --> 00:02:04.512
And when I graduated from my
master's degree program in 2001,

34
00:02:04.512 --> 00:02:09.196
the state of the web was really maybe
5% of the tools that we have today.

35
00:02:09.196 --> 00:02:11.286
We were using tables for layouts.

36
00:02:11.286 --> 00:02:16.436
We were using FTP to move our
files up to a web server.

37
00:02:16.436 --> 00:02:21.267
And there was really almost no CSS
support at all inside of web browsers.

38
00:02:21.267 --> 00:02:25.022
CSS has always kind of been behind the
curve in terms of support inside of web

39
00:02:25.022 --> 00:02:25.963
browsers.

40
00:02:25.963 --> 00:02:30.103
And at that particular point in time,
our web browsers were a big deal.

41
00:02:30.103 --> 00:02:32.602
You had to download them,
you had to install them,

42
00:02:32.602 --> 00:02:35.113
you had to consciously
update your browser.

43
00:02:35.113 --> 00:02:39.161
And so things were always just very behind
in terms of everything that we had in

44
00:02:39.161 --> 00:02:40.426
2001.

45
00:02:40.426 --> 00:02:43.656
When we got to 2008, fortunately,
we'd made some progress.

46
00:02:43.656 --> 00:02:46.014
We'd finally ditched table-based layouts,
and

47
00:02:46.014 --> 00:02:48.526
we were looking more at
float-based layouts.

48
00:02:48.526 --> 00:02:53.245
A lot of our building was done inside of
content management systems like WordPress,

49
00:02:53.245 --> 00:02:55.006
Joomla, and Drupal.

50
00:02:55.006 --> 00:03:00.004
And jQuery was the hot thing of
the day because jQuery addressed a lot

51
00:03:00.004 --> 00:03:01.328
of issues for us.

52
00:03:01.328 --> 00:03:04.292
Prior to this, if you were
working with regular JavaScript,

53
00:03:04.292 --> 00:03:07.998
browsers had different ideas of what
the document object model looked like.

54
00:03:07.998 --> 00:03:10.362
You had a document object model for
Netscape and

55
00:03:10.362 --> 00:03:12.228
you had a different one for IE.

56
00:03:12.228 --> 00:03:15.138
So JavaScript was just a nightmare and
a disaster.

57
00:03:15.138 --> 00:03:19.061
One of the big problems that jQuery solved
was that we finally had a tool that was

58
00:03:19.061 --> 00:03:21.088
actually cross-browser compatible.

59
00:03:21.088 --> 00:03:24.140
Of course,
Netscape was mostly gone by then,

60
00:03:24.140 --> 00:03:27.125
we were back to Mozilla
at that point in time.

61
00:03:27.125 --> 00:03:31.664
Once we get to 2010, we wound up
with the iPhone for the first time,

62
00:03:31.664 --> 00:03:34.693
the iPad was shortly coming along there.

63
00:03:34.693 --> 00:03:37.865
And Ethan Marcotte wrote
his famous article from

64
00:03:37.865 --> 00:03:42.384
A List Apart that defined this
concept of responsive design.

65
00:03:42.384 --> 00:03:46.505
And it consisted of
a flexible grid-based layout,

66
00:03:46.505 --> 00:03:50.324
media queries and images that resize.

67
00:03:50.324 --> 00:03:54.231
And what was radical about this idea at
that point in time was that there was

68
00:03:54.231 --> 00:03:58.384
a single code base that could address
all of the devices all at once.

69
00:03:58.384 --> 00:04:03.268
Prior to this we had Separate code bases,
usually something like jQuery Mobile,

70
00:04:03.268 --> 00:04:06.041
which would build
the entire mobile website.

71
00:04:06.041 --> 00:04:08.627
And then you'd have your
separate desktop website,

72
00:04:08.627 --> 00:04:10.471
two separate code bases frequently.

73
00:04:10.471 --> 00:04:14.263
Even if you had a database behind it that
would serve up different content to those

74
00:04:14.263 --> 00:04:18.521
different form factors, it was still kind
of a nightmare to keep things in sync.

75
00:04:18.521 --> 00:04:23.084
So responsive design helped us put
everything behind one particular

76
00:04:23.084 --> 00:04:23.876
code base.

77
00:04:23.876 --> 00:04:27.187
And we started to think about
response design this way,

78
00:04:27.187 --> 00:04:30.565
which was starting with
our grid-based layouts.

79
00:04:30.565 --> 00:04:35.363
So in 2010 we did this with float
based-layouts and floats for

80
00:04:35.363 --> 00:04:39.302
layouts is truly a hack and
it was kind of a nightmare and

81
00:04:39.302 --> 00:04:43.338
no one really understands how floats work.

82
00:04:43.338 --> 00:04:45.488
They forget that you have
to clear if you float.

83
00:04:45.488 --> 00:04:50.208
And so Bootstrap wound up addressing
that issue really effectively.

84
00:04:50.208 --> 00:04:54.154
People were so happy that they finally had
something that could work for layout and

85
00:04:54.154 --> 00:04:56.739
they didn't have to try to
figure it out on their own.

86
00:04:56.739 --> 00:05:01.550
Between 2014 and 2017, the grid-based
layouts were largely coded with

87
00:05:01.550 --> 00:05:06.232
Flexbox and we were still kind of obsessed
with Bootstrap at that point in time.

88
00:05:06.232 --> 00:05:08.377
And that was because
grid was a new spec and

89
00:05:08.377 --> 00:05:10.839
it was still reaching
some of the web browsers.

90
00:05:10.839 --> 00:05:12.749
By 2018, we had support for

91
00:05:12.749 --> 00:05:16.584
grid pretty much in all of the web
browsers at that point in time.

92
00:05:16.584 --> 00:05:20.589
And now moving on,
we've got support for size queries,

93
00:05:20.589 --> 00:05:24.852
container-size queries,
that's of February 2023.

94
00:05:24.852 --> 00:05:29.629
And subgrid got supported in all
the major browsers by September of 2023.

95
00:05:29.629 --> 00:05:33.303
So as we move forward in time
in terms of the page layouts,

96
00:05:33.303 --> 00:05:36.683
we need to give up some of
our old way of doing things.

97
00:05:36.683 --> 00:05:39.491
I think no one wants to go
back to table-based layouts,

98
00:05:39.491 --> 00:05:42.500
except maybe a few of you
old school PHP programmers.

99
00:05:42.500 --> 00:05:46.590
Every time I talk to PHP people, they tell
me how much they love table-based layouts.

100
00:05:46.590 --> 00:05:48.066
But other than you guys,

101
00:05:48.066 --> 00:05:52.820
no one really wants to go back to those
old days of different kinds of layouts.

102
00:05:52.820 --> 00:05:55.682
We are at a point in time where
we need to start pivoting and

103
00:05:55.682 --> 00:05:59.203
starting to use some of these newer
tools that really were designed for

104
00:05:59.203 --> 00:06:01.131
laying out whole web pages like grid.

105
00:06:02.701 --> 00:06:05.961
The other part of this
is images that resize.

106
00:06:05.961 --> 00:06:11.051
And there was a whole long stretch
of time where this was a disaster.

107
00:06:11.051 --> 00:06:15.964
But today we have solutions that are
solid, stable, cross-browser compatible,

108
00:06:15.964 --> 00:06:18.631
and they're in the HTML of all things.

109
00:06:18.631 --> 00:06:24.068
So the picture element is one of these
ways of creating images that resize,

110
00:06:24.068 --> 00:06:26.499
and also sizes, and source set.

111
00:06:26.499 --> 00:06:28.558
Finally, we have media queries.

112
00:06:28.558 --> 00:06:31.432
I always like to point out with media
queries because people are generally

113
00:06:31.432 --> 00:06:33.388
familiar with them at this point in time.

114
00:06:33.388 --> 00:06:36.777
They're familiar with min width media
queries, or max width media queries,

115
00:06:36.777 --> 00:06:39.386
where we're querying
the size of the view port.

116
00:06:39.386 --> 00:06:42.286
But there's also various other
kinds of media queries as well.

117
00:06:42.286 --> 00:06:47.143
You can test on height, aspect-ratio,
orientation, colors, and

118
00:06:47.143 --> 00:06:51.696
there are various kinds of
print characteristics as well.

119
00:06:51.696 --> 00:06:56.036
So these have continued to grow
over time for media queries.

120
00:06:57.886 --> 00:07:01.880
So how does Ethan Marcotte's definition
of responsive design hold up today?

121
00:07:01.880 --> 00:07:05.829
Well, we typically are doing
our grid-based layouts using

122
00:07:05.829 --> 00:07:08.140
various kinds of CSS frameworks.

123
00:07:08.140 --> 00:07:12.500
So we're using Tailwind a lot of the time,
Bootstrap to a lesser extent.

124
00:07:12.500 --> 00:07:15.020
Some people are starting to use CSS grid.

125
00:07:15.020 --> 00:07:18.662
The images that resize often get
forgotten, and it is important,

126
00:07:18.662 --> 00:07:22.758
especially if you're gonna use some of
those great big giant banner images

127
00:07:22.758 --> 00:07:26.812
that are very large in file size
that we use images that resize.

128
00:07:26.812 --> 00:07:29.882
For some reason, developers seem to
be trying to avoid media queries.

129
00:07:29.882 --> 00:07:32.642
I'm not entirely sure why that is.

130
00:07:32.642 --> 00:07:35.298
They don't add a lot to
the performance of the web page, and

131
00:07:35.298 --> 00:07:37.332
they are pretty straightforward to manage.

132
00:07:37.332 --> 00:07:41.543
But I think a lot of people think that
media queries are defined by your

133
00:07:41.543 --> 00:07:44.896
framework and
that they can't be changed, perhaps.

134
00:07:44.896 --> 00:07:48.511
And then of course, there's always
the attitude that container queries and

135
00:07:48.511 --> 00:07:50.680
subgrid are gonna solve
all of our problems and

136
00:07:50.680 --> 00:07:53.358
we will live in a perfect world
of rainbows and unicorns.

137
00:07:54.388 --> 00:07:56.725
And I'm here to tell you that that's
never going to be the case, and

138
00:07:56.725 --> 00:07:57.638
nothing is ever perfect.

139
00:07:59.488 --> 00:08:04.338
Okay, so consider these as guiding
principles as you start to think about

140
00:08:04.338 --> 00:08:05.825
laying out web pages,

141
00:08:05.825 --> 00:08:10.696
that we wanna start with CSS grid as
our first tool in laying out web pages.

142
00:08:10.696 --> 00:08:14.646
Sometimes we'll use Flexbox, and we're
gonna talk about when that is appropriate,

143
00:08:14.646 --> 00:08:17.748
but grid should be the first
tool that you reach for.

144
00:08:17.748 --> 00:08:22.186
As you think about the images that resize,
consider using the picture element, sizes,

145
00:08:22.186 --> 00:08:26.621
and source set, which are attributes
that go inside of the image element.

146
00:08:26.621 --> 00:08:29.941
And then you can start thinking about
media queries and container queries.

147
00:08:29.941 --> 00:08:34.581
We'll go into the difference between those
and how they work later on in this course.

148
00:08:34.581 --> 00:08:38.021
So let's talk about this
Flexbox versus grid thing.

149
00:08:38.021 --> 00:08:39.952
Okay, that's not Flexbox and
grid up there,

150
00:08:39.952 --> 00:08:43.295
those are developers that are hashing
it out up there on the screen.

151
00:08:43.295 --> 00:08:45.625
Flexbox and
grid are two perfectly good specs.

152
00:08:45.625 --> 00:08:47.115
They're totally awesome.

153
00:08:47.115 --> 00:08:48.855
They are modern.

154
00:08:48.855 --> 00:08:49.815
They're up to date.

155
00:08:49.815 --> 00:08:51.795
You should be using both of them.

156
00:08:51.795 --> 00:08:55.728
But we seem to have a lot of conflict in
the community about which is better and

157
00:08:55.728 --> 00:08:59.125
which should we be using, and
which ones should we leave behind?

158
00:09:00.480 --> 00:09:05.238
So I made a little bit of controversy
here recently on one of these social

159
00:09:05.238 --> 00:09:08.650
media platforms when I
said that it's 2024 and

160
00:09:08.650 --> 00:09:12.160
we should be teaching
students grid from the start.

161
00:09:12.160 --> 00:09:15.748
We shouldn't start with Flexbox, we ought
to start with grid because Flexbox is

162
00:09:15.748 --> 00:09:17.760
really an exception for most layouts.

163
00:09:17.760 --> 00:09:20.630
Grid was designed to layout web pages.

164
00:09:20.630 --> 00:09:22.950
We should be laying out
web pages with grid.

165
00:09:22.950 --> 00:09:24.024
And of course,

166
00:09:24.024 --> 00:09:29.670
we had people who had comments to say
about that particular kind of stuff.

167
00:09:29.670 --> 00:09:34.050
So this particular person thought
that there's more work involved for

168
00:09:34.050 --> 00:09:39.307
varying viewport sizes using grid versus
flex, and shifts in layout construction.

169
00:09:39.307 --> 00:09:41.939
I'm here to tell you that that is,
in fact, not true.

170
00:09:41.939 --> 00:09:47.478
I'm sorry that you were not taught
appropriately how grid works.

171
00:09:47.478 --> 00:09:52.525
Flexbox and grid, in terms of their
HTML markup can be extremely similar,

172
00:09:52.525 --> 00:09:55.020
it's the CSS that's gonna change.

173
00:09:55.020 --> 00:09:57.808
And we're gonna take a look at
that in a lot of great detail.

174
00:09:57.808 --> 00:10:01.185
So if you think about grid, and
all the things that it can do,

175
00:10:01.185 --> 00:10:02.983
by the way, it does a whole lot.

176
00:10:02.983 --> 00:10:05.992
I'm not even gonna be able to cover
all the things that grid does in this

177
00:10:05.992 --> 00:10:06.919
particular course.

178
00:10:07.929 --> 00:10:11.289
Those things tend to be where
you're trying to use Flexbox.

179
00:10:11.289 --> 00:10:15.571
Flexbox does a much smaller subset of
that, and there are some things that

180
00:10:15.571 --> 00:10:19.106
Flexbox does better and
does uniquely that grid does not do.

181
00:10:19.106 --> 00:10:24.392
So basically, what I'm suggesting here is
that where you can go either with grid or

182
00:10:24.392 --> 00:10:26.881
Flexbox, go with grid.

183
00:10:26.881 --> 00:10:30.916
Where you need to use Flexbox,
because that's your only choice,

184
00:10:30.916 --> 00:10:32.681
use Flexbox, okay?

185
00:10:32.681 --> 00:10:34.351
So that is all I have to be saying.

186
00:10:34.351 --> 00:10:36.281
Things change over time.

187
00:10:36.281 --> 00:10:41.317
Your bootcamp taught you Flexbox in 2015
because of cross-browser compatibility.

188
00:10:41.317 --> 00:10:42.707
It's just the way it was.

189
00:10:42.707 --> 00:10:45.217
Bootstrap use Flexbox
because of browser support.

190
00:10:46.777 --> 00:10:49.717
Grid was designed for webpage layouts.

191
00:10:49.717 --> 00:10:54.847
HTML tables, floats, Flexbox were
never designed for webpage layouts.

192
00:10:54.847 --> 00:10:57.697
Grid is the first tool that
was designed for that.

193
00:10:57.697 --> 00:11:00.977
And sorry for
the last 20 years of hacks before this,

194
00:11:00.977 --> 00:11:04.076
who knew that we wanted
to lay out web pages?

195
00:11:04.076 --> 00:11:07.712
But, finally, we have addressed
this particular issue with grid.

