WEBVTT

1
00:00:00.210 --> 00:00:02.810
I have hidden something.

2
00:00:03.840 --> 00:00:05.454
We're gonna do this app three times this.

3
00:00:05.454 --> 00:00:07.520
Yeah, this is round one,
there's three rounds.

4
00:00:07.520 --> 00:00:11.492
I keep moving the problem around, right?

5
00:00:11.492 --> 00:00:15.338
If you grab main, you won't find an issue
cuz there's nothing hidden in main.

6
00:00:15.338 --> 00:00:21.470
But if you grab the initial
slowdown exercise,

7
00:00:21.470 --> 00:00:28.686
I've hidden a performance
issue that you need to find.

8
00:00:28.686 --> 00:00:30.403
The game itself is terrible.

9
00:00:30.403 --> 00:00:32.675
The game itself is, Mark and

10
00:00:32.675 --> 00:00:38.178
I were joking about hex codes that
make words and there was a website.

11
00:00:38.178 --> 00:00:43.782
And so I grab that and
then this basically picks a random color,

12
00:00:43.782 --> 00:00:50.000
a completely random color of I
guess 16 to the sixth colors.

13
00:00:50.000 --> 00:00:54.644
And by staring at the color,
you have to guess what the hex code is.

14
00:00:54.644 --> 00:00:57.524
You're not going to win the game,
don't play the game, right?

15
00:00:57.524 --> 00:01:00.624
This was me when I should have been doing
more important things during my day,

16
00:01:00.624 --> 00:01:03.676
thinking this would be a fun thing to
start making that I realized I should not

17
00:01:03.676 --> 00:01:04.601
be doing this my time.

18
00:01:04.601 --> 00:01:08.378
And I stopped, I put the performance
problem in and I moved on with my life.

19
00:01:08.378 --> 00:01:13.225
But there is a performance problem that
should, and you enthrall your computer

20
00:01:13.225 --> 00:01:17.292
if it's like yeah, it's still
fasten you have a great computer.

21
00:01:17.292 --> 00:01:21.000
But typing that in Input
field should be painful.

22
00:01:22.000 --> 00:01:27.211
And so spend a little bit of time, and
we'll just talk about what's happening.

23
00:01:27.211 --> 00:01:29.350
And I'm gonna add it to
other places on you later.

24
00:01:29.350 --> 00:01:30.490
So it'll be fun.

25
00:01:34.602 --> 00:01:35.934
All right, we are doing this.

26
00:01:35.934 --> 00:01:38.983
So it's actually not
hiding that component,

27
00:01:38.983 --> 00:01:42.276
there will be stuff hiding
that component later.

28
00:01:42.276 --> 00:01:44.650
This one is actually
hidden in plain sight.

29
00:01:44.650 --> 00:01:46.257
Did anyone find it?

30
00:01:46.257 --> 00:01:46.878
I just found it.

31
00:01:46.878 --> 00:01:49.340
&gt;&gt; I think it has to deal
with generate random color.

32
00:01:49.340 --> 00:01:52.828
&gt;&gt; Yes, it does have to do with
generate random color, right?

33
00:01:52.828 --> 00:01:55.360
The trick is, I guess there's two things.

34
00:01:55.360 --> 00:01:58.547
So find where I put the same
thing that slows us down, right?

35
00:01:58.547 --> 00:02:02.394
That's one, and then how do we deal
with it is I think the second challenge.

36
00:02:02.394 --> 00:02:05.841
So it is hiding in
generate random color and

37
00:02:05.841 --> 00:02:09.970
I have produced many
a performance issue in my day.

38
00:02:10.970 --> 00:02:15.248
This is like I was working on something at
work to where it's we had to put something

39
00:02:15.248 --> 00:02:16.804
into an error state, right?

40
00:02:16.804 --> 00:02:19.691
When you're trying to intentionally create
performance issues is a lot harder.

41
00:02:19.691 --> 00:02:24.096
But where's it hiding, they will always
be, why just block the main thread for

42
00:02:24.096 --> 00:02:25.720
a hot minute, right?

43
00:02:25.720 --> 00:02:31.110
But then the question is why, yeah?

44
00:02:31.110 --> 00:02:36.150
&gt;&gt; I think it has to do with that it's
an arrow function, and I think when it

45
00:02:36.150 --> 00:02:41.698
causes the render to application,
it changes the identity in the use stages.

46
00:02:41.698 --> 00:02:46.589
This is not was there before that and
recalls it.

47
00:02:46.589 --> 00:02:52.499
Most importantly it doesn't just
record once judging from the profiler,

48
00:02:52.499 --> 00:02:53.840
close it twice.

49
00:02:53.840 --> 00:02:57.282
&gt;&gt; So everything will roughly,
if you look at the console for

50
00:02:57.282 --> 00:02:59.259
those things will happen twice.

51
00:02:59.259 --> 00:03:04.315
Yeah, that is the right thread and
it's even a little bit simpler than

52
00:03:04.315 --> 00:03:10.580
that which is, is it a react issue or is
JavaScript just being JavaScript, right?

53
00:03:10.580 --> 00:03:14.454
Which is okay, it goes,
it parses this first line, right?

54
00:03:14.454 --> 00:03:18.551
And it's like JavaScript still
evaluates all the code, right?

55
00:03:18.551 --> 00:03:21.540
And says yo, generate random number.

56
00:03:21.540 --> 00:03:25.677
And so it does and it passes under U
state, and even this case reactions, like

57
00:03:25.677 --> 00:03:30.085
I already have the correct answer that
I'm holding on to between the keystrokes.

58
00:03:30.085 --> 00:03:33.367
Cuz obviously we don't wanna
have it handy new one in, right?

59
00:03:33.367 --> 00:03:36.465
If the answer change and
the color change whatever keystroke,

60
00:03:36.465 --> 00:03:39.510
this will leave you in a worse
game than it already is, right?

61
00:03:41.160 --> 00:03:45.544
The issue is that as the parser and the
compiler is reading through all this stuff

62
00:03:45.544 --> 00:03:50.071
is like, I gotta go through the the return
value of this function is, right?

63
00:03:50.071 --> 00:03:54.370
And a little thing like that can
be what slows up the works, right?

64
00:03:55.570 --> 00:03:59.000
So in this case,
it turns out that in the same way,

65
00:03:59.000 --> 00:04:02.690
the SEC correct answer you
might have seen you can do.

66
00:04:07.750 --> 00:04:09.207
And you can give it a value, right?

67
00:04:09.207 --> 00:04:11.145
Yeah.

68
00:04:14.069 --> 00:04:19.506
But in the same way the setter also,
[INAUDIBLE] that's fine.

69
00:04:19.506 --> 00:04:22.048
Can take a function
which is previous value.

70
00:04:22.048 --> 00:04:24.014
I'm not gonna hit this code.

71
00:04:24.014 --> 00:04:28.064
And then does something to it to
get to what it should set it to.

72
00:04:28.064 --> 00:04:30.933
You can set, you stay with a value, or

73
00:04:30.933 --> 00:04:35.870
you can give it a function that
it should call the first time.

74
00:04:35.870 --> 00:04:39.080
So by taking this and wrapping it
in an anonymous function, right?

75
00:04:39.080 --> 00:04:42.280
It doesn't immediately get
executed by JavaScript, right?

76
00:04:42.280 --> 00:04:46.090
The same way if I have made
this mistake this week,

77
00:04:46.090 --> 00:04:52.010
where you're writing code,
you're writing code, you're writing code.

78
00:04:52.010 --> 00:04:54.752
You put it on change handler,
you just pass in the function and

79
00:04:54.752 --> 00:04:58.447
that you that eventually should be called
in there, and it executes immediately,

80
00:04:58.447 --> 00:05:01.345
which then it's like a set count or
a set whatever you have.

81
00:05:01.345 --> 00:05:06.164
And now you've spun yourself into
an infinite loop before react cuts you

82
00:05:06.164 --> 00:05:08.378
off after a 1001 reminders.

83
00:05:08.378 --> 00:05:11.745
That's why we put event handlers
in anonymous functions, right?

84
00:05:11.745 --> 00:05:14.641
It's that aren't immediately called so
that we can pass this in,

85
00:05:14.641 --> 00:05:16.616
it will call it the first time and
then set it.

86
00:05:16.616 --> 00:05:20.465
And now JavaScript is good to see
an anonymous function pass by and it won't

87
00:05:20.465 --> 00:05:24.394
immediately execute it, and thereby
your slow code path is not triggered.

88
00:05:24.394 --> 00:05:29.163
&gt;&gt; Does calling state dispatch within
the main render function logic have any

89
00:05:29.163 --> 00:05:31.140
performance problems?

90
00:05:31.140 --> 00:05:35.087
The one in application jsx
is being set with a boolean.

91
00:05:35.087 --> 00:05:39.408
So it won't run into pass
by reference issues, but

92
00:05:39.408 --> 00:05:44.442
are there any other considerations
we should worry about?

93
00:05:44.442 --> 00:05:47.169
&gt;&gt; So the question was basically,
so we have it with this one, but

94
00:05:47.169 --> 00:05:49.030
what if these are all primitives, right?

95
00:05:49.030 --> 00:05:51.747
And so they are value equality.

96
00:05:51.747 --> 00:05:54.661
Even if we had an object,
it is taking it the first time,

97
00:05:54.661 --> 00:05:58.629
that's why I said before where like react
uses fibers to kind of keep track of

98
00:05:58.629 --> 00:06:02.738
the kind of a history line of a hook,
it's not looking for that value anymore.

99
00:06:02.738 --> 00:06:06.872
It has it stored whatever you set
it to through other interactions.

100
00:06:06.872 --> 00:06:11.585
So even it's not doing an equality check
on future runthroughs of this component,

101
00:06:11.585 --> 00:06:15.287
but the problem was this code was
executing before it even got in to

102
00:06:15.287 --> 00:06:16.252
react, right?

103
00:06:16.252 --> 00:06:20.788
JavaScript itself, the JavaScript
compiler was stepping in, running,

104
00:06:20.788 --> 00:06:25.540
generate random color, producing
a random color, which was expensive, and

105
00:06:25.540 --> 00:06:28.428
then handing it to U state to be ignored,
Mark.

106
00:06:28.428 --> 00:06:33.107
&gt;&gt; Could you please step back and show how
we can see this performance issue first?

107
00:06:33.107 --> 00:06:33.871
&gt;&gt; Yeah.

108
00:06:33.871 --> 00:06:37.119
&gt;&gt; Because it feels like we're fixing
a problem that we haven't measured.

109
00:06:37.119 --> 00:06:41.210
&gt;&gt; Absolutely, I mean, one of the best
ways I fix it already, hold on.

110
00:06:41.210 --> 00:06:45.389
Can't measure the fixed one,
we got to go in.

111
00:06:45.389 --> 00:06:50.360
&gt;&gt; And also, bump the block for
a little bit to make it even more obvious.

112
00:06:50.360 --> 00:06:54.241
&gt;&gt; We're gonna bump or throttle,
yeah, both I think are options.

113
00:06:54.241 --> 00:06:56.778
Let's throttle,
let's use the tools, right?

114
00:06:56.778 --> 00:07:01.966
Rather than increase the fake thing,
let's use the real tools in this case.

115
00:07:01.966 --> 00:07:04.800
All right, so go into performance, right?

116
00:07:04.800 --> 00:07:06.876
We've got a bunch of different
ways we can handle this, right?

117
00:07:06.876 --> 00:07:12.550
So we can go ahead and
start by looking at the profiler, right?

118
00:07:12.550 --> 00:07:16.221
But like I said,
one of the heuristics, I think for me,

119
00:07:16.221 --> 00:07:21.474
one of the places where I immediately know
that I have a problem is the one place.

120
00:07:21.474 --> 00:07:24.221
I think what Google has,
I think it's rail, and

121
00:07:24.221 --> 00:07:29.116
it's like there's a set of heuristics for
how you actually think about performance,

122
00:07:29.116 --> 00:07:31.600
and one of the ones is response time.

123
00:07:31.600 --> 00:07:36.224
The moment you are interacting with
any way, and it is feeling slow,

124
00:07:36.224 --> 00:07:38.631
is a time to start looking, right?

125
00:07:38.631 --> 00:07:42.289
And so
in this case we could theoretically, And

126
00:07:42.289 --> 00:07:47.110
I'm even typing, I took forever to, So

127
00:07:47.110 --> 00:07:52.096
you can see as they're coming in, we're
taking 304 milliseconds to render, right?

128
00:07:52.096 --> 00:07:58.080
And so when you have a chart that even in
and of itself is showing every keystroke,

129
00:07:58.080 --> 00:08:02.310
we've got these incredibly
long 300 milliseconds.

130
00:08:02.310 --> 00:08:04.541
You're aiming for 16, right?

131
00:08:04.541 --> 00:08:09.970
Now granted, yes, this is a purposely
slow find the react quirk that made

132
00:08:09.970 --> 00:08:15.938
this happen, or in this case a JavaScript
quirk that react didn't need or want.

133
00:08:15.938 --> 00:08:17.838
But we can kind of see it in the tools.

134
00:08:17.838 --> 00:08:20.068
And then the other great way to do this,

135
00:08:20.068 --> 00:08:24.280
is you can actually see that I got
a little heads up over here as well.

136
00:08:24.280 --> 00:08:27.842
That's cuz I have a CPU throttling,
let's see.

137
00:08:27.842 --> 00:08:32.657
The other way that I will very
frequently do this, and again this

138
00:08:32.657 --> 00:08:37.660
kind of goes to Alex's question,
of which set of tools do you use?

139
00:08:39.100 --> 00:08:45.601
Scroll down,
is a really great way is Chromium, right?

140
00:08:45.601 --> 00:08:50.836
So depending on which browser, will flag
anything that it thinks is problematic,

141
00:08:50.836 --> 00:08:53.410
literally with a red flag, right?

142
00:08:53.410 --> 00:08:59.437
And so if you run a profiler, and you
see anything with this little red thing,

143
00:08:59.437 --> 00:09:02.889
it's hey, that took way too long, right?

144
00:09:02.889 --> 00:09:06.981
And I'm just gonna tell you now,
there are things that you didn't

145
00:09:06.981 --> 00:09:11.531
think were bad that it still feels as bad,
and it will hurt your feelings.

146
00:09:11.531 --> 00:09:13.927
So be aware of that, right?

147
00:09:13.927 --> 00:09:19.469
But we got a 300 millisecond
lag in application rendering.

148
00:09:19.469 --> 00:09:23.751
So we can tell it's pretty high up there.

149
00:09:23.751 --> 00:09:28.590
If application was this big, wide bar, but
underneath it, there was another equally

150
00:09:28.590 --> 00:09:33.260
wide bar, which when we find the bug,
not to spoil it for you, you will see.

151
00:09:33.260 --> 00:09:38.451
But that kind of shows you the depth
of that flame graph and how wide.

152
00:09:38.451 --> 00:09:43.130
It shows you how deep in
the component hierarchy it is.

153
00:09:43.130 --> 00:09:48.256
The other thing is you can
see that we are peeking.

154
00:09:48.256 --> 00:09:51.980
And again, this is intentionally
blocking the main thread, right?

155
00:09:51.980 --> 00:09:56.214
But you can see we get flags here,
and as I said before,

156
00:09:56.214 --> 00:09:59.265
you wouldn't see this in production.

157
00:09:59.265 --> 00:10:03.697
Application, and
then generate random color, right?

158
00:10:03.697 --> 00:10:07.820
Those wouldn't have their
names in the production build.

159
00:10:07.820 --> 00:10:11.553
It is the providing of all
that information, which again,

160
00:10:11.553 --> 00:10:14.327
doing stuff is slower
than not doing stuff.

161
00:10:14.327 --> 00:10:19.490
So in production,
it does not do these things technically.

162
00:10:19.490 --> 00:10:21.047
Unless again,
you work on a developer tool.

163
00:10:21.047 --> 00:10:24.696
A lot of times your customers
are not the ones debugging and

164
00:10:24.696 --> 00:10:27.990
triaging your performance issues for
you, right?

165
00:10:27.990 --> 00:10:30.999
So you don't provide them all that
stuff because it slows it down.

166
00:10:30.999 --> 00:10:35.901
But for us, we can actually see what
function was the one kind of calling it in

167
00:10:35.901 --> 00:10:38.670
this sense, and get a sense there as well.

168
00:10:38.670 --> 00:10:41.789
But yeah, the red flags and
looking at that CPU graph, but

169
00:10:41.789 --> 00:10:43.964
then also seeing which component it is.

170
00:10:43.964 --> 00:10:45.495
And as we play the game a little bit more,

171
00:10:45.495 --> 00:10:48.310
we'll see it a little bit more
if it's hiding down a level.

172
00:10:48.310 --> 00:10:50.689
You'll see where the wide
part of the flame graph was.

173
00:10:50.689 --> 00:10:52.676
You can kind of get a sense of what is,

174
00:10:52.676 --> 00:10:55.770
this one was literally the second
line of the root thing.

175
00:10:55.770 --> 00:10:59.144
So it is a long and sad,

176
00:10:59.144 --> 00:11:03.769
but relatively simple graph.

177
00:11:03.769 --> 00:11:06.550
&gt;&gt; You had mentioned 60 milliseconds.

178
00:11:06.550 --> 00:11:08.372
Is that like a heuristic
we're trying to head?

179
00:11:08.372 --> 00:11:09.957
&gt;&gt; Yeah, that's a heuristic.

180
00:11:09.957 --> 00:11:10.705
&gt;&gt; Okay.

181
00:11:10.705 --> 00:11:16.126
&gt;&gt; Yeah, I think the heuristic is
refresh rate of 60 frames a second,

182
00:11:16.126 --> 00:11:22.027
a second divided by 60 16.66666,
and so on, so forth, right?

183
00:11:22.027 --> 00:11:28.585
And so beating that doesn't really do any
good cuz yeah, the screen refreshes 120.

184
00:11:28.585 --> 00:11:30.880
That is why the heuristic exists.

185
00:11:32.680 --> 00:11:35.484
It depends like most things, right?

186
00:11:35.484 --> 00:11:40.702
I work at a company that
also needs to make money,

187
00:11:40.702 --> 00:11:49.253
and me getting it from 20 to 16 is not
always gonna get me adulation, right?

188
00:11:49.253 --> 00:11:54.429
And so there is what is what we should
aim for and then what is practical.

189
00:11:54.429 --> 00:11:56.940
So we continue getting a paycheck as well.

190
00:11:58.570 --> 00:12:03.537
&gt;&gt; Kind of along those same lines,
a number that I circulate with Adam,

191
00:12:03.537 --> 00:12:08.761
cuz he works on one of the teams that
I work with, is generally speaking,

192
00:12:08.761 --> 00:12:13.409
humans can't perceive anything
less than 50 milliseconds.

193
00:12:13.409 --> 00:12:17.839
So If you have a single render
cycle that takes 50 milliseconds,

194
00:12:17.839 --> 00:12:20.190
you're probably okay.

195
00:12:20.190 --> 00:12:25.838
But it definitely adds up if you get in
that render loop and you stack them up.

196
00:12:25.838 --> 00:12:28.898
&gt;&gt; I forget what the threshold for
the Chrome tools yelling at me is,

197
00:12:28.898 --> 00:12:31.190
I know that 300 obviously passed it.

198
00:12:31.190 --> 00:12:36.115
But I don't remember off the top
of my head what it is, Mark.

199
00:12:36.115 --> 00:12:42.083
&gt;&gt; Maybe you're gonna do this, but could
you fix it and then let's see it again?

200
00:12:42.083 --> 00:12:44.373
&gt;&gt; And Alex, why didn't you ask
me a question while I fix it?

201
00:12:44.373 --> 00:12:49.957
&gt;&gt; Yeah, so I think this was a great
example when we actually need to combine

202
00:12:49.957 --> 00:12:55.741
the React profiler, and it looks like
when the issue is with the GS itself.

203
00:12:55.741 --> 00:13:00.537
This [INAUDIBLE] because the the React
profiler wasn't particularly specific in

204
00:13:00.537 --> 00:13:03.128
terms of where-
&gt;&gt; Exactly, showed you what component

205
00:13:03.128 --> 00:13:06.231
it was in, but it didn't show you in
the same way that this did, right?

206
00:13:06.231 --> 00:13:11.543
All the fixing rerenders in the world is
not gonna save if you from your slow,

207
00:13:11.543 --> 00:13:14.034
just regular JavaScript, right?

208
00:13:14.034 --> 00:13:16.733
But yeah,
using them together will then help,

209
00:13:16.733 --> 00:13:19.034
at least you find as a concerted effort.

210
00:13:19.034 --> 00:13:22.000
Let's do this one first, let's go in here.

211
00:13:22.000 --> 00:13:23.948
So I added the anonymous function.

212
00:13:31.597 --> 00:13:35.320
All right, and now you can see,
I don't have those long peaks, right?

213
00:13:35.320 --> 00:13:39.763
The probably initial R render
still somewhat unhappy with,

214
00:13:39.763 --> 00:13:43.780
cuz it does call generate
random number ones, right?

215
00:13:43.780 --> 00:13:46.091
That function is still slow, right?

216
00:13:46.091 --> 00:13:48.359
So I do get yelled at over there, but

217
00:13:48.359 --> 00:13:53.290
you can see that subsequent rerenders
are not calling the issue in this case.

218
00:13:54.600 --> 00:14:01.738
And let's do it,
let's pull up the, As well.

219
00:14:06.113 --> 00:14:10.119
All right, in this case now we're
at 2.1 milliseconds, right?

220
00:14:10.119 --> 00:14:13.715
And we are probably the only time that
those are probably in existence, but

221
00:14:13.715 --> 00:14:15.328
probably so tiny in comparison.

222
00:14:15.328 --> 00:14:18.450
They can make a bigger appearance
in a 2.1 millisecond line than they

223
00:14:18.450 --> 00:14:20.580
can in a 300 millisecond line.

224
00:14:20.580 --> 00:14:23.045
But yeah, are there as well.

225
00:14:23.045 --> 00:14:28.157
I get these are kind of, you can see
game input was changed at this point.

226
00:14:28.157 --> 00:14:29.880
You can see what changed each time.

227
00:14:31.100 --> 00:14:32.752
Expensive component is not expensive yet.

228
00:14:32.752 --> 00:14:35.469
It will be, and you can guess
where I'm moving the problem next.

229
00:14:35.469 --> 00:14:37.950
But next you don't get to just
like figure out where it is.

230
00:14:37.950 --> 00:14:40.139
You got to do something
with the component, and so

231
00:14:40.139 --> 00:14:42.758
it's like I can name it a little
bit more obvious next time.

