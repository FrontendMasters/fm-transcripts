WEBVTT

1
00:00:00.360 --> 00:00:03.867
So I do like one of my favorite
things about this workshop so

2
00:00:03.867 --> 00:00:08.674
far is that people are asking like some of
the questions like before we get to it.

3
00:00:08.674 --> 00:00:11.624
And so we talked a little
bit about react memo, and

4
00:00:11.624 --> 00:00:15.429
I want to, one of the questions
that we saw that we talked about.

5
00:00:15.429 --> 00:00:18.637
But we didn't like look at it in action,
was like, okay,

6
00:00:18.637 --> 00:00:23.166
we're moving like expensive component and
around and again on purpose, right?

7
00:00:23.166 --> 00:00:27.684
Because again, step one is can you just
work with your component hierarchy in

8
00:00:27.684 --> 00:00:31.993
a way that does not involve extra taxes
yeah one extra check is no big deal as

9
00:00:31.993 --> 00:00:34.773
they add up right like
performance problems but

10
00:00:34.773 --> 00:00:38.110
sometimes that is the strategy it's like.

11
00:00:38.110 --> 00:00:40.230
As due diligence,
you should see can you do it?

12
00:00:40.230 --> 00:00:44.440
Can you can you solve your performance
issue without, like, you know, it's not I

13
00:00:44.440 --> 00:00:48.730
wouldn't say it's like using like a like
exclamation point important on a CSS tag.

14
00:00:48.730 --> 00:00:54.330
It's not that but like,
the metaphor has its has its virtues.

15
00:00:54.330 --> 00:00:57.770
But it is a thing that works and
like we'll talk about in a second but

16
00:00:57.770 --> 00:01:02.070
let's see it first and then we'll
talk about it so this I grabbed.

17
00:01:02.070 --> 00:01:07.609
In a previous one of the earlier bad
ones right where expressive component

18
00:01:07.609 --> 00:01:12.432
is a sibling and is causing all
the problems that it likes to cause

19
00:01:12.432 --> 00:01:17.543
that you're still living over in
game two but it's not being used.

20
00:01:17.543 --> 00:01:22.333
The joys of switching get branches
repeatedly In a way that it was

21
00:01:22.333 --> 00:01:27.300
never meant to handle so let's go
take a look at that I think it is yep

22
00:01:27.300 --> 00:01:32.356
it's up in 3001 We are slow, and
there are like we said before,

23
00:01:32.356 --> 00:01:37.190
we are just doing this thing,
parent re rendered.

24
00:01:37.190 --> 00:01:39.040
Every child is asked to re render.

25
00:01:39.040 --> 00:01:41.830
They're most good ways of doing anything.

26
00:01:41.830 --> 00:01:44.707
There was a way to be like, hey, listen,

27
00:01:44.707 --> 00:01:48.750
I know what's going on here,
stand back I got this right?

28
00:01:48.750 --> 00:01:53.521
And so react memo is basically like
we said before when someone asks

29
00:01:53.521 --> 00:01:58.034
the question of like,
it gives the ability to hug a component,

30
00:01:58.034 --> 00:02:02.804
right with some logic to like look
at the props before they make it to

31
00:02:02.804 --> 00:02:07.520
that expensive component like
we were moving stuff around.

32
00:02:07.520 --> 00:02:11.600
So that new changes didn't
make it to a component.

33
00:02:11.600 --> 00:02:14.660
This is a way to be,
let me see that first.

34
00:02:14.660 --> 00:02:19.426
And there are different ways to do it for
class based components versus

35
00:02:19.426 --> 00:02:24.113
function components and
hooks should component update method on a,

36
00:02:24.113 --> 00:02:27.690
you can wrap a class component
in reactive memo too.

37
00:02:27.690 --> 00:02:30.761
So it's Should component update and
there's another one

38
00:02:30.761 --> 00:02:34.334
functional components are unique to
both of them react that memo and

39
00:02:34.334 --> 00:02:38.094
wrapping the component works on both but
there's other ways to do it but

40
00:02:38.094 --> 00:02:42.103
they all predate react I would say at this
point this is the preferred way to do

41
00:02:42.103 --> 00:02:46.396
it if I was dispensing advices on best
practices my version of the best practice.

42
00:02:46.396 --> 00:02:48.708
And what it does is it
checks the props and

43
00:02:48.708 --> 00:02:52.803
then does not rerender it if the props
are the same as last time, right?

44
00:02:52.803 --> 00:02:56.780
And particularly for expensive component,
which does not take any props.

45
00:02:57.890 --> 00:03:02.875
They are always going to be the same
because like empty is the same as empty

46
00:03:02.875 --> 00:03:05.830
every time Right, does null equals null?

47
00:03:05.830 --> 00:03:09.960
It's one of the final truths in JavaScript
where things don't always make sense.

48
00:03:11.520 --> 00:03:13.070
And using it is very easy.

49
00:03:13.070 --> 00:03:16.690
You put a space for
that all to complete niceness.

50
00:03:18.160 --> 00:03:21.430
Memo, it's on the React Library and
you wrap it.

51
00:03:24.140 --> 00:03:28.042
Memo does theoretically take a second
argument so if we hover over and

52
00:03:28.042 --> 00:03:32.617
get the type information you can see right
there props are equal is a function that

53
00:03:32.617 --> 00:03:37.146
takes the previous props and the next
props and returns a Boolean or undefined.

54
00:03:37.146 --> 00:03:41.351
You can take a lucky guess what it does
right now just a shallow comparison,

55
00:03:41.351 --> 00:03:45.491
which it looks at the first property
it doesn't if one of those properties

56
00:03:45.491 --> 00:03:50.120
is an object, it'll just say like is this
object the same as the other object?

57
00:03:50.120 --> 00:03:54.270
It's not gonna recursively because
deep equal is shockingly expensive.

58
00:03:54.270 --> 00:03:59.000
And if you want to find a way
to make your performance

59
00:03:59.000 --> 00:04:02.520
issues worse By trying to solve them.

60
00:04:04.150 --> 00:04:06.758
I worked on a team where they
thought you had to do that to

61
00:04:06.758 --> 00:04:11.110
keep immutability in react and
use a db equal on every single set state.

62
00:04:11.110 --> 00:04:15.560
That was the first time I got to use
a lot of these tools, just repeatedly.

63
00:04:15.560 --> 00:04:17.726
And so yeah, it wraps it and

64
00:04:17.726 --> 00:04:23.300
gives you your own ability to check
to see Have I ever used that before?

65
00:04:23.300 --> 00:04:23.800
Yes.

66
00:04:25.040 --> 00:04:28.060
Was it four to five years ago?

67
00:04:28.060 --> 00:04:29.900
Of course.

68
00:04:29.900 --> 00:04:31.650
Do I remember what the issue was?

69
00:04:31.650 --> 00:04:33.170
Absolutely not,right?

70
00:04:33.170 --> 00:04:36.240
I think it was like I really
only cared about like one prop?

71
00:04:36.240 --> 00:04:37.530
or something like that,right?

72
00:04:37.530 --> 00:04:39.130
And the rest were irrelevant.

73
00:04:39.130 --> 00:04:43.453
And possibly could change but like only
one thing mattered I don't really remember

74
00:04:43.453 --> 00:04:45.340
it was not my favorite day,right?

75
00:04:45.340 --> 00:04:48.840
It was one of these things I guess
I'm doing this today kind of things.

76
00:04:48.840 --> 00:04:53.469
So you can pass the second one in recent
memory I have not had a particularly good

77
00:04:53.469 --> 00:04:54.460
excuse to do it.

78
00:04:54.460 --> 00:04:58.597
So now we're exporting as default so
we can still call it expensive component

79
00:04:58.597 --> 00:05:02.240
everywhere but it's our hugged
The expensive component, right?

80
00:05:02.240 --> 00:05:05.610
So it's not it's not the same
expensive component as we had before.

81
00:05:05.610 --> 00:05:08.337
And unless it gets new and different
props, which, if this is TypeScript,

82
00:05:08.337 --> 00:05:11.090
it definitely couldn't because
the compiler would yell at me.

83
00:05:11.090 --> 00:05:12.860
JavaScript.
I'm sure I can manage it.

84
00:05:12.860 --> 00:05:14.719
But ideally, it shouldn't get it but

85
00:05:14.719 --> 00:05:18.147
at least it's not going to get on
every render, and things will stop so

86
00:05:18.147 --> 00:05:20.720
it can it can sit where it was,
and we should be good.

87
00:05:21.830 --> 00:05:23.068
Just go back.

88
00:05:23.068 --> 00:05:24.956
And see.

89
00:05:27.913 --> 00:05:28.690
Look at that.

90
00:05:30.560 --> 00:05:33.530
You just wrap it, and yeah,
there's a slight cost to that.

91
00:05:33.530 --> 00:05:37.506
But like in a lot of cases where
any of these other techniques

92
00:05:37.506 --> 00:05:40.844
are available to you,
it's a valid way to do it but

93
00:05:40.844 --> 00:05:44.044
it's not it should not be
the fist thing you do.

94
00:05:44.044 --> 00:05:46.925
Because again it's not
necessarily free and

95
00:05:46.925 --> 00:05:51.924
as to get the golden rule was not doing
stuff is faster than doing stuff right and

96
00:05:51.924 --> 00:05:54.752
there's always technical answers right.

97
00:05:54.752 --> 00:05:59.686
I always think about as somebody who
leads the team to which is the second you

98
00:05:59.686 --> 00:06:03.460
start like You start that then
everyone starts doing it.

99
00:06:03.460 --> 00:06:06.058
The next thing you're taking
components don't even have subtrees and

100
00:06:06.058 --> 00:06:08.780
just everyone, well, that's what
we do in this code base, right?

101
00:06:08.780 --> 00:06:12.023
And things get out of control and
sometimes you need rules.

102
00:06:12.023 --> 00:06:16.690
And so that's a thing.

103
00:06:16.690 --> 00:06:17.740
And so that's in place.

104
00:06:17.740 --> 00:06:19.331
So let's like okay for

105
00:06:19.331 --> 00:06:25.120
all those renders in the other app right
that packing lists up and we get 3002.

106
00:06:25.120 --> 00:06:25.800
Yay.

107
00:06:27.480 --> 00:06:30.430
We had all the crazy we fixed it there.

108
00:06:30.430 --> 00:06:32.200
We still have it.

109
00:06:32.200 --> 00:06:37.830
Just for changing one will
rerender everything All the time.

110
00:06:37.830 --> 00:06:42.608
So, ideally, what I should be able to do,
is just slather on

111
00:06:42.608 --> 00:06:47.690
some react out memos and
all my problems should go away, right?

112
00:06:49.110 --> 00:06:49.610
Lets do it.

113
00:06:50.930 --> 00:06:54.518
Without big apps,
it's not going to be that bad.

114
00:06:54.518 --> 00:06:58.961
&gt;&gt; Alright, so application,
the general structure of this app

115
00:06:58.961 --> 00:07:03.500
application has that new item has
like a marker was red button.

116
00:07:03.500 --> 00:07:07.319
The real two things are two lists,
one for patch and one for unpacked items.

117
00:07:08.870 --> 00:07:11.090
Those then have a series of items.

118
00:07:11.090 --> 00:07:12.870
Right?
Not a lot going on here.

119
00:07:12.870 --> 00:07:20.365
So what we'll say is listen item
list if you get the same like,

120
00:07:20.365 --> 00:07:25.710
array of things like don't rerender memo.

121
00:07:25.710 --> 00:07:30.682
I gotta import it Mean not important
how many times I've done that and

122
00:07:30.682 --> 00:07:36.083
then given item on the list like if
.Yeah especially like gives you imagine

123
00:07:36.083 --> 00:07:41.225
like the list of probably change right
if one of them gets his name change

124
00:07:41.225 --> 00:07:46.050
like that's gonna remap an array
Arrays get changed all the time.

125
00:07:46.050 --> 00:07:49.862
And I'm gonna just say that one more time
cuz when we talk about some of these other

126
00:07:49.862 --> 00:07:53.622
memorization things, like if you ever
memorize something where you're using

127
00:07:53.622 --> 00:07:55.978
a map and
returning a new array right before that,

128
00:07:55.978 --> 00:07:59.720
then guess two arrays with the same
things are not the same array.

129
00:07:59.720 --> 00:08:04.884
And this is why like using the tools and
looking after you do something

130
00:08:04.884 --> 00:08:09.868
like a lot of times like 95% of
time the thing that you think would

131
00:08:09.868 --> 00:08:15.032
happen happened notice I said 95
just memo everything let's go for

132
00:08:15.032 --> 00:08:19.163
it like this is I think in
a lot of cases like Guess what?

133
00:08:19.163 --> 00:08:24.800
A younger not as handsome but
more naive version of me.

134
00:08:25.830 --> 00:08:27.965
Like I've seen pictures of
myself a few years ago.

135
00:08:30.643 --> 00:08:35.440
And like, would have done right which
is this I'm gonna do this everywhere.

136
00:08:35.440 --> 00:08:37.316
All right, and would find out later,

137
00:08:37.316 --> 00:08:41.540
there was one time that I was definitely
contributing factor in the problem, right,

138
00:08:41.540 --> 00:08:44.200
cuz it's like yo,
I this is what I'm supposed to do.

139
00:08:44.200 --> 00:08:47.720
It was before I had come across my
own now adage of then if that's true,

140
00:08:47.720 --> 00:08:50.720
then they would have just done
it in the framework, right?

141
00:08:52.030 --> 00:08:55.195
This isn't just a fun like a little chore
they let me do to make me feel like I was

142
00:08:55.195 --> 00:08:56.240
important.

143
00:08:56.240 --> 00:09:00.806
So I think I got it mostly everybody
to get an header I can see cuz it's not

144
00:09:00.806 --> 00:09:02.830
a modified file.

145
00:09:02.830 --> 00:09:04.856
It was we're just making
a point at this point.

146
00:09:04.856 --> 00:09:10.300
So like, yeah memo.

147
00:09:10.300 --> 00:09:11.840
Toss it everywhere.

148
00:09:11.840 --> 00:09:12.340
Great.

149
00:09:13.810 --> 00:09:18.430
And so now like things shouldn't change,
right?

150
00:09:18.430 --> 00:09:22.922
I should be able to like I don't know
like, edit the name of one of these or

151
00:09:22.922 --> 00:09:24.922
shouldn't affect this array.

152
00:09:30.562 --> 00:09:31.650
Nothing, nothing is better.

153
00:09:33.160 --> 00:09:36.340
Everything is still as bad as it ever was,
right?

154
00:09:37.930 --> 00:09:42.684
In fact, I could literally

155
00:09:42.684 --> 00:09:47.232
do something silly to make

156
00:09:47.232 --> 00:09:52.400
the to make a ridiculous point

157
00:09:52.400 --> 00:09:57.775
Let's do it in the actual thing

158
00:09:57.775 --> 00:10:02.962
let's say nothing important

159
00:10:09.934 --> 00:10:14.240
And we'll say, yo, after you load.

160
00:10:19.282 --> 00:10:20.365
Wait, like, a second and

161
00:10:20.365 --> 00:10:24.020
let's just flip it to true.&amp;nbsp; Let's
just change literally anything, right?

162
00:10:24.020 --> 00:10:27.921
Does that, so you don't go like,
well actually,

163
00:10:27.921 --> 00:10:33.660
maybe cuz you changed the name of
one that generated Wait a second.

164
00:10:38.755 --> 00:10:41.707
I'll act like I know
how you state works for

165
00:10:41.707 --> 00:10:46.877
a second,I was gonna say well I've
never seen that implementation,this

166
00:10:46.877 --> 00:10:50.896
is why,I put this this is like
one of the like problems that

167
00:10:50.896 --> 00:10:55.680
I have now I like which is like sometimes
I will have a mistake and a PR.

168
00:10:55.680 --> 00:11:00.459
And someone will be like, When I thought
you did that on purpose, I'm like,

169
00:11:00.459 --> 00:11:02.740
No, I'm just an idiot.

170
00:11:02.740 --> 00:11:03.470
Right?

171
00:11:03.470 --> 00:11:06.950
Like, I just, I was just tired.

172
00:11:06.950 --> 00:11:08.510
It was just the end of the day and

173
00:11:08.510 --> 00:11:11.948
I thought it was responsible to push
up my code before I made dinner.

174
00:11:11.948 --> 00:11:14.135
All right.

175
00:11:14.135 --> 00:11:15.230
Cool.

176
00:11:15.230 --> 00:11:16.180
So let's go ahead.

177
00:11:16.180 --> 00:11:19.976
And you can see that in that second,
the entire app,

178
00:11:19.976 --> 00:11:24.292
nothing to do with the items re
rendered everything right so

179
00:11:24.292 --> 00:11:27.832
just me following that blind advice and
going for

180
00:11:27.832 --> 00:11:32.840
it didn't I mean maybe something
didn't remember that before, but

181
00:11:32.840 --> 00:11:38.850
like, generally speaking Yeah,
it looks like packing lists was fine.

182
00:11:38.850 --> 00:11:40.020
Like the number of items.

183
00:11:41.030 --> 00:11:42.180
That one was fine.

184
00:11:42.180 --> 00:11:45.510
And I'm pretty sure that was
everything else we rendered.

185
00:11:45.510 --> 00:11:52.434
I mean, I literally have tools I could say
go hit that one over, refresh and do it.

186
00:11:54.674 --> 00:11:58.534
Cool everything re-rendered.

187
00:11:58.534 --> 00:11:59.982
Why?
Why did everything well I can

188
00:11:59.982 --> 00:12:01.020
find out why, that's good.

189
00:12:03.190 --> 00:12:05.085
That was the first time
we went the second time.

190
00:12:05.085 --> 00:12:05.635
A second later.

191
00:12:08.707 --> 00:12:11.795
Look, the tool is telling
me props changed.

192
00:12:13.345 --> 00:12:17.009
It said like Ram was
doing his job is like,

193
00:12:17.009 --> 00:12:23.245
I will not let this component re
render unless the props change.

194
00:12:23.245 --> 00:12:27.180
I told her story about how I wrote
a custom one I don't remember why.

195
00:12:28.420 --> 00:12:31.187
I don't remember if I was doing something
really dark that I shouldn't have now I

196
00:12:31.187 --> 00:12:32.950
have this like sudden
existential sense of dread.

197
00:12:32.950 --> 00:12:35.550
I was like putting over all the functions,
right?

198
00:12:35.550 --> 00:12:39.910
Which in class based components
might have been okay.

199
00:12:39.910 --> 00:12:41.728
But closures are a thing and hooks and

200
00:12:41.728 --> 00:12:44.140
like you would have
the wrong variable in there.

201
00:12:44.140 --> 00:12:45.180
Don't do that.

202
00:12:45.180 --> 00:12:45.890
I don't know.

203
00:12:45.890 --> 00:12:46.500
That's what I did.

204
00:12:46.500 --> 00:12:49.020
But like now I'm worried that like,
whatever thing I did.

205
00:12:49.020 --> 00:12:52.900
Four or five years ago was potentially
terrible it's pretty hoax.

206
00:12:52.900 --> 00:12:54.300
I couldn't have been that bad.

207
00:12:54.300 --> 00:12:57.695
And might not have been that but
yeah, we can see update and

208
00:12:57.695 --> 00:13:00.766
remove other reasons that
everything is changing.

209
00:13:00.766 --> 00:13:02.591
And again.

210
00:13:05.156 --> 00:13:07.160
Like here's the thing.

211
00:13:07.160 --> 00:13:08.360
JavaScript exists.

212
00:13:09.790 --> 00:13:13.390
Sometimes we forget that,
but it's still a thing.

213
00:13:13.390 --> 00:13:16.070
And like, it's not even bad.

214
00:13:16.070 --> 00:13:17.930
It's just like there are rules.

215
00:13:17.930 --> 00:13:18.740
Right?

216
00:13:18.740 --> 00:13:22.673
And if we look at this, like we have
the eternal problem and I kind of did

217
00:13:22.673 --> 00:13:27.343
the thing where it's like you have to like
mention whatever the murder weapon was in

218
00:13:27.343 --> 00:13:31.745
chapter one if it ends up biting you later
Which is like we have all these helpful

219
00:13:31.745 --> 00:13:36.416
things of like Cool yeah make an item with
the right properties great here's the one

220
00:13:36.416 --> 00:13:39.884
that like maps to the array of it
has the right ID and updates and

221
00:13:39.884 --> 00:13:44.155
all this stuff they have to do with
immutable data structures that now we just

222
00:13:44.155 --> 00:13:45.980
you know live with.

223
00:13:45.980 --> 00:13:49.805
And yeah this one filters off
does have the right ID but

224
00:13:49.805 --> 00:13:55.500
it didn't have the ability to set the
items because I don't have that until I'm

225
00:13:55.500 --> 00:14:00.953
in this function right so what did I do
it could just wire them up life went on.

226
00:14:00.953 --> 00:14:06.437
However like almost like what we saw on
the very first time right this despite

227
00:14:06.437 --> 00:14:11.835
the fact that it does the same thing as
the last time this Ran is a new function

228
00:14:11.835 --> 00:14:17.169
in memory right and in JavaScript like
the like when I say there are rules.

229
00:14:18.780 --> 00:14:23.580
It's like one equals one totally
depending on how many equal signs you use

230
00:14:23.580 --> 00:14:28.303
two are true can also equal one but
generally speaking if we stick to using

231
00:14:28.303 --> 00:14:33.670
three equal signs one will equal one
a string or EagleEye same string like.

232
00:14:33.670 --> 00:14:36.570
Primitives are passed by value.

233
00:14:36.570 --> 00:14:39.390
Objects are passed by
the reference in memory, right?

234
00:14:39.390 --> 00:14:43.490
So, two arrays with the same items
are different objects in memory thereby

235
00:14:43.490 --> 00:14:45.250
they're not equal.

236
00:14:45.250 --> 00:14:47.510
Same is true for
two functions that do the same thing.

237
00:14:47.510 --> 00:14:50.826
They are different they
are different memory addresses and

238
00:14:50.826 --> 00:14:52.490
thereby are not equal.

239
00:14:52.490 --> 00:14:57.970
So when react a memo looks at this
function that is in our eyes.

240
00:14:57.970 --> 00:15:02.454
See the same thing and the one I got
last time right it's like well these

241
00:15:02.454 --> 00:15:05.125
are different because it's a computer.

242
00:15:05.125 --> 00:15:09.292
This is why I'm not worried about
like robots taking over just yet

243
00:15:09.292 --> 00:15:13.558
like [LAUGH] let's deal with this
things like this automatically.

244
00:15:13.558 --> 00:15:16.972
And then I'll then I'll
worry I'm Famous last words.

