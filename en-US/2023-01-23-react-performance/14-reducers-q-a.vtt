WEBVTT

1
00:00:00.120 --> 00:00:02.260
Cool, all right, so
we had one question from the chat.

2
00:00:02.260 --> 00:00:04.040
And then one question from the room.

3
00:00:04.040 --> 00:00:06.849
So the question in the chat was
can I repeat what the main benefit

4
00:00:06.849 --> 00:00:08.710
of switching to use reducer.

5
00:00:08.710 --> 00:00:11.240
I'm taking that over use state.

6
00:00:12.270 --> 00:00:15.264
To be clear,
if you're going to pass use state down and

7
00:00:15.264 --> 00:00:18.856
you can deal with what you're
getting in the function callback.

8
00:00:18.856 --> 00:00:23.596
And not wrapping additional
functions in that top level that you

9
00:00:23.596 --> 00:00:26.415
need to have the memory reference to.

10
00:00:26.415 --> 00:00:30.885
Use state is just a abstraction over use
reducer they are functionally the same,

11
00:00:30.885 --> 00:00:34.020
which means it comes down to
a matter of taste, right?

12
00:00:34.020 --> 00:00:39.090
With use state you have just that one
item that you set in the very beginning.

13
00:00:39.090 --> 00:00:41.810
Could you set it to an object
with multiple values?

14
00:00:41.810 --> 00:00:42.330
You could.

15
00:00:43.460 --> 00:00:47.770
At that point are you almost just
reimplementing use reducer with your state

16
00:00:47.770 --> 00:00:49.880
which is on top of use reducer?

17
00:00:49.880 --> 00:00:51.410
You are also doing that, right?

18
00:00:51.410 --> 00:00:53.471
But in terms of technically and
functionally,

19
00:00:53.471 --> 00:00:55.420
it's purely a matter of taste, right?

20
00:00:55.420 --> 00:01:00.290
That said items or whatever,
that was static, right?

21
00:01:00.290 --> 00:01:02.210
And the same thing,
dispatch is also the same.

22
00:01:02.210 --> 00:01:05.544
I just like having one dispatch
where I could have a whole bunch

23
00:01:05.544 --> 00:01:07.603
of things that are derived from that.

24
00:01:07.603 --> 00:01:12.160
I personally, and I can pull that function
out and unit test it super easily.

25
00:01:12.160 --> 00:01:16.730
I personally like it.

26
00:01:16.730 --> 00:01:18.671
And I can just say, hey,
this thing happened.

27
00:01:18.671 --> 00:01:20.292
Here's all the information you need and

28
00:01:20.292 --> 00:01:22.620
cast it away instead of
doing it by UI layer.

29
00:01:22.620 --> 00:01:24.930
That is not a performance hack.

30
00:01:24.930 --> 00:01:28.771
That is simply I think the pattern is
really good and then also dispatched and

31
00:01:28.771 --> 00:01:31.100
I don't even, it's just one function.

32
00:01:31.100 --> 00:01:32.330
It's always the same.

33
00:01:32.330 --> 00:01:34.250
It's the simplicity of it.

34
00:01:34.250 --> 00:01:36.026
Causes me to make better
performance decisions and

35
00:01:36.026 --> 00:01:37.690
I don't feel like I'm giving anything up.

36
00:01:37.690 --> 00:01:42.749
So I like it, but
I don't feel like if you were no,

37
00:01:42.749 --> 00:01:48.542
I really wanna use use state,
I'm okay, that's fine.

38
00:01:50.340 --> 00:01:51.855
Alex, had a question.

39
00:01:51.855 --> 00:01:54.490
&gt;&gt; Yeah, I noticed in the flame graph.

40
00:01:54.490 --> 00:02:00.238
The leaf most items such as
the most components do not contain,

41
00:02:00.238 --> 00:02:04.147
the pure HTML elements there for renters.

42
00:02:04.147 --> 00:02:04.855
Can you address that?

43
00:02:04.855 --> 00:02:08.510
&gt;&gt; Yep, so yeah, the question was,
basically we only see components in here.

44
00:02:08.510 --> 00:02:13.163
Right, and that's kind of a subtle
nuance to one of the kind of

45
00:02:13.163 --> 00:02:16.310
graphs that we saw in the very beginning.

46
00:02:16.310 --> 00:02:23.470
Is the way that it works is like,
components get rendered, right?

47
00:02:23.470 --> 00:02:25.925
Because they have logic in them.

48
00:02:25.925 --> 00:02:28.368
And so React goes through each one,
renders them.

49
00:02:28.368 --> 00:02:34.013
Runs through the logic, gets the output,
and keeps moving along.

50
00:02:34.013 --> 00:02:37.435
Either of you ever take JSX and
look at the compiled code?

51
00:02:37.435 --> 00:02:40.645
It's like, you know,
JSX.createElement, so on and so forth.

52
00:02:40.645 --> 00:02:45.343
It's like, we all tried in like 20 14 for
a hot minute to be like,

53
00:02:45.343 --> 00:02:47.940
I'm not using this JSX thing.

54
00:02:47.940 --> 00:02:49.935
I'm gonna write it in regular JavaScript.

55
00:02:49.935 --> 00:02:54.183
And we all did that for a good day, right?

56
00:02:54.183 --> 00:02:56.190
Or maybe two if we were really stubborn.

57
00:02:56.190 --> 00:02:57.710
So you can see what it looks like.

58
00:02:57.710 --> 00:02:59.050
But those aren't actually functions.

59
00:02:59.050 --> 00:03:00.740
They're just strings at that point.

60
00:03:00.740 --> 00:03:03.869
And so like for React that is a dead end.

61
00:03:03.869 --> 00:03:07.222
Assuming it does not continue
going down those they don't.

62
00:03:07.222 --> 00:03:10.057
If you think about these
with that children, right?

63
00:03:10.057 --> 00:03:11.785
They don't really have any logic in them,

64
00:03:11.785 --> 00:03:14.474
they have children which belong
to the parent component, right?

65
00:03:14.474 --> 00:03:18.082
That same thing that we saw with
the pulling the content up is true but

66
00:03:18.082 --> 00:03:19.870
they also are not functions.

67
00:03:19.870 --> 00:03:23.390
So React is not working through
them in the rendering cycle.

68
00:03:23.390 --> 00:03:26.180
That is the end of the line
of each one of those traits.

69
00:03:26.180 --> 00:03:29.811
So as soon as you get to the final
component that is only HTML elements.

70
00:03:29.811 --> 00:03:32.812
It is game over but
they are not rendered per se.

71
00:03:32.812 --> 00:03:37.249
They're not going through this entire
process of comparing a button with X, Y,

72
00:03:37.249 --> 00:03:38.040
and Z things.

73
00:03:38.040 --> 00:03:41.706
It's just gonna turn into the same
effective data structure the same ASC

74
00:03:41.706 --> 00:03:42.377
every time.

