WEBVTT

1
00:00:00.090 --> 00:00:03.727
But I guess the other issue is that our
input sets stayed on each key press and

2
00:00:03.727 --> 00:00:05.470
we should probably debounce that.

3
00:00:06.670 --> 00:00:08.210
&gt;&gt; I mean, that depends, right?

4
00:00:08.210 --> 00:00:11.604
Debouncing, the act of debouncing it,
like, on the input,

5
00:00:11.604 --> 00:00:14.170
you don't really get to debounce it,
right?

6
00:00:14.170 --> 00:00:16.260
You do have to update
the input when they hit keys.

7
00:00:17.730 --> 00:00:23.600
Right, you play a game where it's like,
Sure you'll be calling less things right?

8
00:00:23.600 --> 00:00:27.940
But if again, that comes down to
that like heuristic of did it take?

9
00:00:27.940 --> 00:00:31.960
I mean, like 2.1 milliseconds, right?

10
00:00:31.960 --> 00:00:34.822
And is it what are you going to do
bounce you're going to wait for

11
00:00:34.822 --> 00:00:37.250
how long do you show them a keystroke,
right?

12
00:00:37.250 --> 00:00:40.650
And so becomes a little bit tricky,
and does the cost of debouncing.

13
00:00:40.650 --> 00:00:42.280
Add more, so on and so forth.

14
00:00:42.280 --> 00:00:46.782
Now If they were typing, and this is
actually like the example that we end on

15
00:00:46.782 --> 00:00:50.140
which is the final example in
this like our time together

16
00:00:50.140 --> 00:00:54.723
is a forum where like loading and
filtering the list takes Forever, right?

17
00:00:54.723 --> 00:00:59.111
And like how do you like concurrent
react update the input while waiting on

18
00:00:59.111 --> 00:00:59.760
the list.

19
00:00:59.760 --> 00:01:02.880
So like, should you denounce?

20
00:01:02.880 --> 00:01:06.910
Like hitting the network on
a autocomplete for a search?

21
00:01:06.910 --> 00:01:07.740
Yes.

22
00:01:07.740 --> 00:01:10.230
Right should you to bounce
rendering everything else?

23
00:01:10.230 --> 00:01:14.310
But I think like prioritizing the feedback
for the user that they did the thing

24
00:01:14.310 --> 00:01:18.642
right you do usually that's what you know
the difference between what is an urgent

25
00:01:18.642 --> 00:01:21.115
update and
what can wait a little bit, right?

26
00:01:21.115 --> 00:01:25.085
Especially like there is a certain amount
of insofar that network requests take

27
00:01:25.085 --> 00:01:29.070
time, there's a certain expectation
that things aren't always immediate.

28
00:01:29.070 --> 00:01:34.800
But me, typing should be right me clicking
on a thing I should get feedback, right?

29
00:01:34.800 --> 00:01:38.010
The idea that the network request goes
out and comes back or something happens.

30
00:01:38.010 --> 00:01:41.370
There's a certain amount of grace for
that but If I hover over a button,

31
00:01:41.370 --> 00:01:42.270
it should change.

32
00:01:42.270 --> 00:01:45.100
If I type in an input field,
it should respect that field.

33
00:01:45.100 --> 00:01:47.190
But if I click,
I should get that response.

34
00:01:47.190 --> 00:01:50.764
And those are the things like I think
we've all used enough UIs in our life to

35
00:01:50.764 --> 00:01:53.960
know as those are the things that
drive us absolutely nuts, yeah.

36
00:01:53.960 --> 00:01:57.065
&gt;&gt; Yeah, I think it pretty that
the effects will be very similar to

37
00:01:57.065 --> 00:01:57.910
oversee, right?

38
00:01:57.910 --> 00:02:01.290
&gt;&gt; Yeah,
we'd purposely create the issue, right?

39
00:02:01.290 --> 00:02:03.980
We have a set of conditionals here,
and we're just gonna call it, right?

40
00:02:03.980 --> 00:02:08.780
Should we Do you use effect to let it
finish this thing so on and so forth,

41
00:02:08.780 --> 00:02:09.630
right.

42
00:02:09.630 --> 00:02:14.266
During the use effect would let it
finish and then go for it again,

43
00:02:14.266 --> 00:02:17.210
do the whole commit phase it's tricky.

44
00:02:17.210 --> 00:02:20.998
With concurrent react like if there was
a this would count as an urgent update

45
00:02:20.998 --> 00:02:24.903
because we haven't like things are urgent
lists you say they're non urgent,

46
00:02:24.903 --> 00:02:28.660
like this would stop a non urgent
thing because it's counted as urgent.

47
00:02:28.660 --> 00:02:30.474
So maybe you would want that, I mean,

48
00:02:30.474 --> 00:02:34.220
this app is one that's supposed
to intentionally have problems.

49
00:02:34.220 --> 00:02:35.630
So yeah,
you can find a few more in here too.

50
00:02:35.630 --> 00:02:36.795
And you will, but

51
00:02:36.795 --> 00:02:41.300
like with this one like what I put in
a use effect probably not what I put

52
00:02:41.300 --> 00:02:46.055
it maybe in a use memo which is like hey
only if only even try to figure out.

53
00:02:46.055 --> 00:02:50.834
Like if any of these things that depends
on have changed right that might make

54
00:02:50.834 --> 00:02:55.254
a lot more sense in this case here
we're going to check no matter what.

55
00:02:55.254 --> 00:02:59.105
But like, yeah, like I don't know
if I would use use effect but

56
00:02:59.105 --> 00:03:04.110
I would probably use a use memo,
right to be like, run this function.

57
00:03:04.110 --> 00:03:05.040
Right?

58
00:03:05.040 --> 00:03:09.947
If and only if the things that he's even
cares about have changed at all right and

59
00:03:09.947 --> 00:03:11.851
what we said before React is for

60
00:03:11.851 --> 00:03:16.390
every hook React is keeping track
almost like I'm As every version of it,

61
00:03:16.390 --> 00:03:20.230
it's like almost like linked
lists like structure, right?

62
00:03:20.230 --> 00:03:24.816
It knows when these things changes to
trigger a use callback, to trigger use

63
00:03:24.816 --> 00:03:29.545
effect, to trigger use memo, but,
since use memo has a dependency list, and

64
00:03:29.545 --> 00:03:34.347
then recalculates the value Setting a use
effect to have a dependency list, and

65
00:03:34.347 --> 00:03:39.938
then you'll manually set the thing is just
like, I would use probably in this case,

66
00:03:39.938 --> 00:03:43.550
but then also this is just
flipping of too, right?

67
00:03:43.550 --> 00:03:48.300
And so the question there is like,
we completely a game of, let's measure it.

68
00:03:48.300 --> 00:03:52.320
But they will probably both
be infinitesimally nothing.

69
00:03:52.320 --> 00:03:56.164
All right, so the question was,
Why is it bad this way and

70
00:03:56.164 --> 00:04:00.910
not the other one is like
the simplification of the question, right?

71
00:04:03.360 --> 00:04:08.209
This one is like almost not,
it's React adjacent but

72
00:04:08.209 --> 00:04:12.600
not necessarily a React thing which is.

73
00:04:12.600 --> 00:04:17.357
Before this ever even gets into U state
right where like jobs is going along it's

74
00:04:17.357 --> 00:04:22.185
like yeah cops I love cops, right It's
gonna be stored it's gonna be a table

75
00:04:22.185 --> 00:04:25.470
that we split up into an array
I love it I'm here for it.

76
00:04:25.470 --> 00:04:28.760
Or look a call to U state.

77
00:04:28.760 --> 00:04:30.810
I wonder what we're gonna hand you state.

78
00:04:30.810 --> 00:04:35.530
It then gets to this generate random
color which is being called immediately.

79
00:04:35.530 --> 00:04:38.790
JavaScript which is single threaded,
right?

80
00:04:38.790 --> 00:04:42.440
Blocks, the main thread says,
we're calling this.

81
00:04:42.440 --> 00:04:46.750
I need to get the return value of
this function right now, right?

82
00:04:46.750 --> 00:04:49.160
And that is our slow function.

83
00:04:49.160 --> 00:04:50.300
It gets the return value.

84
00:04:51.310 --> 00:04:56.020
The hooks in React only care about that
value the first time they're ever called.

85
00:04:56.020 --> 00:05:00.158
Right that's why hook order matters if
you ever like tried to put like a hook in

86
00:05:00.158 --> 00:05:04.488
a conditional React is like absolutely not
right like this is all held together by

87
00:05:04.488 --> 00:05:09.075
like it's both very sophisticated and very
fragile at the same time right that's why

88
00:05:09.075 --> 00:05:12.895
if you have anything like you put
the hooks in a for loop react will yell at

89
00:05:12.895 --> 00:05:16.904
you If you put the hooks in a continuous
like the order of the hooks matter and

90
00:05:16.904 --> 00:05:18.622
so when react see is like, hey,

91
00:05:18.622 --> 00:05:22.350
this is a second use days like
I already had a value for that.

92
00:05:22.350 --> 00:05:25.780
I don't care what gets passed in
JavaScript stopped what it was doing.

93
00:05:27.050 --> 00:05:30.757
halted everything,
ran your super expensive function and

94
00:05:30.757 --> 00:05:35.960
then handle that return value for
react to throw it on the floor, right?

95
00:05:35.960 --> 00:05:38.535
When we wrap it in
an anonymous function And

96
00:05:38.535 --> 00:05:41.690
maybe we start with
the character at the beginning.

97
00:05:43.490 --> 00:05:47.420
We say, just par says,
yeah, this is a function.

98
00:05:47.420 --> 00:05:48.859
Cool.
I don't have to call it yet,

99
00:05:48.859 --> 00:05:51.430
cuz this is like an uncalled function,
right?

100
00:05:51.430 --> 00:05:54.805
Hey, react if this is your
first time with this hook,

101
00:05:54.805 --> 00:05:59.840
go run this function and it'll give
you the initial value and react again.

102
00:05:59.840 --> 00:06:01.390
It's like I've already
run this hook before.

103
00:06:01.390 --> 00:06:01.920
I'm aware of it.

104
00:06:01.920 --> 00:06:05.987
It's the second hope The second hook
of the four that are happening in here

105
00:06:05.987 --> 00:06:07.440
are five I guess.

106
00:06:07.440 --> 00:06:10.437
And the use,
it's easy to be in the right order,

107
00:06:10.437 --> 00:06:13.380
the sets can obviously happen wherever.

108
00:06:13.380 --> 00:06:16.510
But it's the second of the fourth of
the four hooks that I know about.

109
00:06:16.510 --> 00:06:18.000
I already have a value for that.

110
00:06:18.000 --> 00:06:20.680
Thank you for this anonymous function
which happens to be expensive.

111
00:06:20.680 --> 00:06:21.460
You.

112
00:06:21.460 --> 00:06:25.140
We'll be throwing it on the floor now,
and it has never called and not calling

113
00:06:25.140 --> 00:06:29.320
the extension function is faster
than calling the expensive function.

114
00:06:29.320 --> 00:06:31.550
&gt;&gt; Why after every keystroke wasn't it?

115
00:06:31.550 --> 00:06:33.740
Like giving you a different answer?

116
00:06:33.740 --> 00:06:37.721
Like you said earlier,
&gt;&gt; A new color was getting generated right

117
00:06:37.721 --> 00:06:40.470
by JavaScript and React didn't care.

118
00:06:41.740 --> 00:06:46.375
Okay I have the first one yeah I'm
not like it's like imagine there's

119
00:06:46.375 --> 00:06:49.843
a condition al,
this is not how the code is written.

120
00:06:49.843 --> 00:06:54.684
Imagining this conditional if this is
the first time this the second use

121
00:06:54.684 --> 00:06:58.809
state hook is called I care about
the value if not first time.

122
00:06:58.809 --> 00:07:03.769
No op, right and so it's like you did
all that like JavaScript did all this

123
00:07:03.769 --> 00:07:08.169
work on this expensive function,
handed it over and react as I and

124
00:07:08.169 --> 00:07:13.250
nobody cares like uninterested
in this thank you for this gift.

125
00:07:13.250 --> 00:07:16.786
I am going to go put it
in the other room and

126
00:07:16.786 --> 00:07:23.080
never look at it again Yeah,
the other question is like, says yes.

127
00:07:23.080 --> 00:07:26.139
Is it not always best practice
is having to bounce yeah,

128
00:07:26.139 --> 00:07:30.302
like I said before on an input field,
like, generally speaking the like for

129
00:07:30.302 --> 00:07:33.800
most performance advice,
it is never an always right.

130
00:07:33.800 --> 00:07:37.120
Like it is, you know,
otherwise frameworks would do it.

131
00:07:37.120 --> 00:07:40.401
Out of the box, or the DOM would I mean,

132
00:07:40.401 --> 00:07:45.330
you can't trust the DOM to
adjust the stuff, right?

133
00:07:45.330 --> 00:07:49.689
But generally speaking, it would be just
kind of in place by most frameworks or

134
00:07:49.689 --> 00:07:51.220
things along those lines.

135
00:07:51.220 --> 00:07:54.020
But that is probably not
always the UX you want.

136
00:07:54.020 --> 00:07:57.930
Now, should you debounce
the side effect from that change?

137
00:07:57.930 --> 00:08:01.626
Should you to bounce it slamming the
server as you're like typing out your like

138
00:08:01.626 --> 00:08:06.390
magnum opus and to search for you know
the whatever Pokemon you're looking for?

139
00:08:06.390 --> 00:08:08.899
Absolutely, you should have bounced
because you don't want to like slam

140
00:08:08.899 --> 00:08:10.679
the server because like
they're still typing, but

141
00:08:10.679 --> 00:08:13.420
you should show them the characters
that they're typing.

142
00:08:13.420 --> 00:08:13.951
Right.
So

143
00:08:13.951 --> 00:08:19.000
there's like usually the bounce things
about the inputfield Absolutely.

144
00:08:19.000 --> 00:08:21.602
Right.
The actual like Cuz React is not gonna

145
00:08:21.602 --> 00:08:24.110
change the contents of the input field.

146
00:08:24.110 --> 00:08:28.150
If you take off the onChange handler,
you can hit buttons all day.

147
00:08:28.150 --> 00:08:29.880
It will just never show it in there.

148
00:08:29.880 --> 00:08:33.990
Other frameworks might, with two-way
bindings and stuff like that, handle it.

149
00:08:33.990 --> 00:08:35.903
But unless you change the state,

150
00:08:35.903 --> 00:08:40.220
you will not see the letters
you typed in that input field.

151
00:08:40.220 --> 00:08:41.540
In that input field.

152
00:08:41.540 --> 00:08:43.933
So it will look like I said before,

153
00:08:43.933 --> 00:08:47.990
it will look like you have
the performance issue in there.

154
00:08:47.990 --> 00:08:50.010
So yeah, the question was,
did I get it right?

155
00:08:50.010 --> 00:08:52.656
The first version of the function
generate random color was still called on

156
00:08:52.656 --> 00:08:53.610
every stroke.

157
00:08:53.610 --> 00:08:55.110
It just didn't update the state.

158
00:08:55.110 --> 00:08:57.770
Yeah, it was called, it was expensive.

159
00:08:57.770 --> 00:09:03.320
And so now we're saying hey useState,
only call this if you think you need it.

160
00:09:03.320 --> 00:09:05.290
And after the first one,
it's like I don't need this.

161
00:09:05.290 --> 00:09:07.341
And so it doesn't get called, and

162
00:09:07.341 --> 00:09:11.818
not calling the expensive function is
way faster than calling it, exactly

