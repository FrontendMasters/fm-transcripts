WEBVTT

1
00:00:00.254 --> 00:00:03.655
Your job for about five minutes
is to kind of ghost the lunking.

2
00:00:03.655 --> 00:00:06.653
There are a few of these
little ones in here because as

3
00:00:06.653 --> 00:00:09.515
of that grew in complexity,
there are a few like,

4
00:00:09.515 --> 00:00:13.351
when I found a bunch of them,
I was like, great, yeah, totally.

5
00:00:13.351 --> 00:00:17.860
But there are a few of them and see what
interesting ones that we can find and

6
00:00:17.860 --> 00:00:22.619
lead us to work cuz I think it's very
simple app's fine, it's cool, cool.

7
00:00:22.619 --> 00:00:26.522
As it starts to grow, and
again, we wanna use the tools.

8
00:00:26.522 --> 00:00:27.619
What are some of the optimizations?

9
00:00:27.619 --> 00:00:30.372
And some of them, we can talk about
some of them we can do, right?

10
00:00:30.372 --> 00:00:33.690
Cuz some of them just like, as soon as
we understand the philosophical thing,

11
00:00:33.690 --> 00:00:35.200
I think we've got the major point,

12
00:00:35.200 --> 00:00:38.698
but I want you to spend a few minutes,
five minutes, go looking for them, right?

13
00:00:38.698 --> 00:00:40.245
And let's talk about some
of the ones that come up.

14
00:00:40.245 --> 00:00:44.610
I'm gonna look at the chat in the room and
we can kind of figure out which ones what

15
00:00:44.610 --> 00:00:48.733
some are thoughts and theories around
them and what we would do about them.

16
00:00:51.486 --> 00:00:56.638
All right, so there are three or
four, some of them planted.

17
00:00:56.638 --> 00:00:59.145
I will talk about the accidental one.

18
00:00:59.145 --> 00:01:02.643
I will talk about the main one that leads
me to my next point, but I'll do that,

19
00:01:02.643 --> 00:01:04.728
especially when it leads
me to the next point.

20
00:01:04.728 --> 00:01:06.646
Feels appropriate to do towards the end.

21
00:01:06.646 --> 00:01:10.082
Did anyone else find any interesting
ones as they went in triage?

22
00:01:10.082 --> 00:01:12.146
&gt;&gt; I mean standard ones.

23
00:01:12.146 --> 00:01:15.198
I've added three memos regarding
comments or play around with them.

24
00:01:15.198 --> 00:01:19.944
But so I'm around that common common and
post it solves a bunch of renders.

25
00:01:19.944 --> 00:01:24.775
&gt;&gt; Yeah, I want to talk particularly
about the post comments, and

26
00:01:24.775 --> 00:01:26.393
a little bit as well.

27
00:01:26.393 --> 00:01:27.569
But yeah, those as well.

28
00:01:27.569 --> 00:01:31.999
And I think in the drop down with the
users was pulling the users it's nested in

29
00:01:31.999 --> 00:01:35.133
there ,like that one probably
can get its own state and

30
00:01:35.133 --> 00:01:38.361
be completely isolated from
everything else, right?

31
00:01:38.361 --> 00:01:42.719
With just a callback, like we saw before
we just say, yo, when this changes,

32
00:01:42.719 --> 00:01:44.976
let me know but other than that I don't.

33
00:01:44.976 --> 00:01:47.569
This thing is it's got its
own context in there, right?

34
00:01:47.569 --> 00:01:52.355
To point out so, we know that we
have posted we have users, right?

35
00:01:52.355 --> 00:01:56.643
And so to Alex's point, in the post,

36
00:01:56.643 --> 00:02:01.467
right, we have, instead of add comment,

37
00:02:01.467 --> 00:02:06.561
we grabbed the entire list of users,
right?

38
00:02:06.561 --> 00:02:11.305
And so, someone left a console log
in their code, to figure out what

39
00:02:11.305 --> 00:02:16.886
the selected user was theoretically,
that could be encapsulated on its own and

40
00:02:16.886 --> 00:02:20.737
not necessarily need to
involve stuff in here as well.

41
00:02:20.737 --> 00:02:22.105
That's a big one.

42
00:02:22.105 --> 00:02:23.879
Do we have any other interesting ones,

43
00:02:23.879 --> 00:02:27.504
I'll tell you the one that actually I
didn't expect and had to squint, right?

44
00:02:27.504 --> 00:02:30.994
So I kind of alluded to before
we started this I'm like,

45
00:02:30.994 --> 00:02:33.312
I shouldn't get into this part yet.

46
00:02:33.312 --> 00:02:40.737
I should let you explore first, but
any other interesting ones, throughout.

47
00:02:42.980 --> 00:02:47.680
Okay, yeah, well,
we'll call it the obvious one which is

48
00:02:47.680 --> 00:02:52.204
the core set of data structures
is problematic, right?

49
00:02:52.204 --> 00:02:55.860
And where I wanna lead with this is,
we talked about component hierarchy,

50
00:02:55.860 --> 00:02:58.718
we need to talk about the state
hierarchy as well, right?

51
00:02:58.718 --> 00:03:01.438
And there's just some things and
all the memos and

52
00:03:01.438 --> 00:03:04.241
contexts in the world
aren't gonna save you from.

53
00:03:04.241 --> 00:03:08.462
And we'll kind of do the high level cuz a
lot of it is the conceptual understanding,

54
00:03:08.462 --> 00:03:12.141
the actual tedious part of doing the work
is moving stuff from one place to

55
00:03:12.141 --> 00:03:12.771
the other.

56
00:03:12.771 --> 00:03:17.608
Which is somebody who originally planned
to do that in front of you did it with

57
00:03:17.608 --> 00:03:20.870
a test audience and
it was like watching paint dry.

58
00:03:20.870 --> 00:03:24.179
So we will talk about it a little bit.

59
00:03:24.179 --> 00:03:26.737
But I wanna talk about the one
that slightly surprised me and

60
00:03:26.737 --> 00:03:28.080
I think I fixed in this branch.

61
00:03:28.080 --> 00:03:32.660
So we're gonna see how angry
the development server gets if I keep

62
00:03:32.660 --> 00:03:37.657
switching get branches with different
code over and over again on it and

63
00:03:37.657 --> 00:03:40.756
see how it likes that, but we'll find out.

64
00:03:40.756 --> 00:03:41.864
So if we look.

65
00:03:44.871 --> 00:03:49.731
If I go ahead and I'll clear this out

66
00:03:49.731 --> 00:03:54.429
I'll record was moving to user and

67
00:03:54.429 --> 00:03:58.817
maybe it was adding, I forgot.

68
00:03:58.817 --> 00:04:01.584
We got a bunch in here though.

69
00:04:03.816 --> 00:04:07.453
Let's see which one,
I just recreated it to.

70
00:04:07.453 --> 00:04:13.462
I will show you in a moment, if I can't
figure out exactly how I recreated it or

71
00:04:13.462 --> 00:04:17.728
if I'm on the branch that
has effects we'll find out.

72
00:04:17.728 --> 00:04:21.114
Don't embarrass me right now.

73
00:04:21.114 --> 00:04:27.123
So what I got was,
make sure I'm on the right.

74
00:04:30.608 --> 00:04:33.344
Don't save anything,
go back to the way everything was.

75
00:04:37.023 --> 00:04:39.413
&gt;&gt; There was one weird one with children.

76
00:04:39.413 --> 00:04:41.142
&gt;&gt; Yeah, that's the one I'm looking for.

77
00:04:41.142 --> 00:04:43.320
Do you remember how we got that one?

78
00:04:43.320 --> 00:04:47.820
&gt;&gt; I'm on a live coding branch and
I've added memos to,

79
00:04:50.889 --> 00:04:52.914
To users, not the user itself.

80
00:04:52.914 --> 00:04:58.557
&gt;&gt; Yeah, yeah, that's exactly
the one that I'm looking for.

81
00:04:58.557 --> 00:05:00.489
Now, I can't recreate it but
I can show you what the issue was.

82
00:05:00.489 --> 00:05:04.515
So yeah, Alex,
can at least back me up that as well.

83
00:05:04.515 --> 00:05:08.265
Which is we're like, go children
that's great we should do that, right?

84
00:05:08.265 --> 00:05:13.221
And this is again why we test
these things because what is

85
00:05:13.221 --> 00:05:18.073
super interesting is thinking about,
so it's like,

86
00:05:18.073 --> 00:05:24.522
it takes the child component and
we map in the button, I believe, yeah.

87
00:05:24.522 --> 00:05:25.500
Hold on, is this the one that's fixed?

88
00:05:25.500 --> 00:05:26.574
Is that why it's not working?

89
00:05:26.574 --> 00:05:30.149
&gt;&gt; Yeah, [INAUDIBLE] because
I have a different version.

90
00:05:30.149 --> 00:05:32.583
&gt;&gt; All I get jumping around.

91
00:05:32.583 --> 00:05:35.120
&gt;&gt; It's in the user,
it's supposed to be in user JSX.

92
00:05:35.120 --> 00:05:38.823
&gt;&gt; Yeah,
this might actually work on one hand.

93
00:05:38.823 --> 00:05:43.623
Okay, yeah, we can actually see the diff
but let's let's go recreate the problems,

94
00:05:43.623 --> 00:05:45.545
I can verify as you all believe me.

95
00:05:45.545 --> 00:05:49.650
Turns out,
switching git branches repeatedly back and

96
00:05:49.650 --> 00:05:54.374
forth to try to get ready make
a point doesn't always serve you.

97
00:05:54.374 --> 00:05:55.425
So let's go check it out.

98
00:06:07.978 --> 00:06:09.169
&gt;&gt; Tony I believe.

99
00:06:09.169 --> 00:06:09.978
&gt;&gt; Okay.

100
00:06:09.978 --> 00:06:10.891
&gt;&gt; Well you're a mobile user.

101
00:06:13.624 --> 00:06:17.093
&gt;&gt; Yeah they all changed individually,
thinking about when you go about an item,

102
00:06:17.093 --> 00:06:20.842
an individual item didn't change when we
removed another individual item, right?

103
00:06:20.842 --> 00:06:25.179
All the rest of them were like, I'm the
same thing in memory, it's cool, right?

104
00:06:25.179 --> 00:06:30.263
And yet, we get this issue right here,

105
00:06:30.263 --> 00:06:34.742
props changed children, right?

106
00:06:34.742 --> 00:06:38.700
And we're like, yo, I thought the whole
thing when we're gonna pull content up and

107
00:06:38.700 --> 00:06:42.064
we're gonna have the children,
is that it's all gonna work, right?

108
00:06:42.064 --> 00:06:48.147
And yes, but again, rules apply and

109
00:06:48.147 --> 00:06:54.042
things exist for reasons, right?

110
00:06:54.042 --> 00:06:58.725
So the reason why that
works is because when

111
00:06:58.725 --> 00:07:03.279
something happens in the lower component

112
00:07:03.279 --> 00:07:08.104
when we saw it with the stupid game,
right?

113
00:07:08.104 --> 00:07:14.143
The problematic component was slotted
in in between parts of the game,

114
00:07:14.143 --> 00:07:17.573
but it lived up in application, right?

115
00:07:17.573 --> 00:07:22.091
And so cool, it was the same
component React's like, I know you,

116
00:07:22.091 --> 00:07:25.334
you're not even on my path,
nothing, right?

117
00:07:25.334 --> 00:07:26.352
Nothing has changed,

118
00:07:26.352 --> 00:07:29.522
it never trigger the change
the application to start at that subtree.

119
00:07:29.522 --> 00:07:32.253
Never even went up and looked.

120
00:07:32.253 --> 00:07:36.173
The interesting part is here,

121
00:07:36.173 --> 00:07:44.029
these children are delineated
by the array of users, right?

122
00:07:44.029 --> 00:07:47.810
And so before that was just a component
that existed that I put in here.

123
00:07:47.810 --> 00:07:51.627
When we remove a user,
what are we doing to the array of users?

124
00:07:51.627 --> 00:07:52.916
&gt;&gt; It's a new every time.

125
00:07:52.916 --> 00:07:54.922
&gt;&gt; We're throwing out the array of users,

126
00:07:54.922 --> 00:07:58.108
which means we threw out this
array of children and replaced it.

127
00:07:58.108 --> 00:08:03.036
So any performance optimization
that we thought we were getting to

128
00:08:03.036 --> 00:08:07.700
make a point didn't work because yes,
they are children, but

129
00:08:07.700 --> 00:08:12.726
that is a set of children that
are based on an array that is changing.

130
00:08:12.726 --> 00:08:15.844
Which causes them to get thrown out,
right?

131
00:08:15.844 --> 00:08:21.145
And so, it's why sometimes,
just following, it's like even for

132
00:08:21.145 --> 00:08:25.153
all the ones that I hid,
that's not one that I hid.

133
00:08:25.153 --> 00:08:29.200
All right that was one that was
like ,that's weird as I was like,

134
00:08:29.200 --> 00:08:33.996
you hide the Easter eggs and you check
on them before the kid wakes up, right?

135
00:08:33.996 --> 00:08:38.290
I'm like, that's a that's a super
interesting one because I was just,

136
00:08:38.290 --> 00:08:42.389
again, I was just going about my
business whipping up an example app.

137
00:08:42.389 --> 00:08:46.704
Tried to make a few different points and
didn't expect that one, right?

138
00:08:46.704 --> 00:08:51.148
And then I had to squint a few
days ago and look at it and

139
00:08:51.148 --> 00:08:55.698
be like, yeah, that's interesting, right?

140
00:08:55.698 --> 00:08:58.777
Because it seemed innocuous,
it seemed like it was just the thing,

141
00:08:58.777 --> 00:09:00.840
that's what I wasn't even thinking about.

142
00:09:00.840 --> 00:09:04.074
I'm gonna pull this up cuz it's
more performing, I was just like,

143
00:09:04.074 --> 00:09:05.455
this seems easier right on.

144
00:09:05.455 --> 00:09:07.844
But understanding that, yeah,

145
00:09:07.844 --> 00:09:12.794
it's really a game about how
JavaScript cheats objects in memory and

146
00:09:12.794 --> 00:09:17.166
some of the things with immutable
state and what that means.

147
00:09:17.166 --> 00:09:20.253
The fact that we keep everything
mutable is not a first class citizen in

148
00:09:20.253 --> 00:09:22.829
JavaScript, there aren't
immutable data structures.

149
00:09:22.829 --> 00:09:26.251
We do these things now almost out of
habit where we spread operators and

150
00:09:26.251 --> 00:09:27.121
stuff like that.

151
00:09:27.121 --> 00:09:31.252
But sometimes, you will be surprised
even as you just think you're just

152
00:09:31.252 --> 00:09:34.855
doing the thing that this, yeah,
this is using the children.

153
00:09:34.855 --> 00:09:40.261
But because the act of doing this does
cause a brand new in that higher level.

154
00:09:40.261 --> 00:09:44.933
You could also see this then if I did that
to stop a cascade down a bunch of other

155
00:09:44.933 --> 00:09:49.547
components I've accidentally
retriggered the entire cascade, right?

156
00:09:49.547 --> 00:09:52.077
There's, again, this app isn't
big enough to do all of that.

157
00:09:52.077 --> 00:09:56.667
But those subtle little things, if you're
not kind of getting in the habit of taking

158
00:09:56.667 --> 00:10:00.109
a look every once in a while and
as you're implementing stuff.

159
00:10:00.109 --> 00:10:03.019
You should not over rotate on performance

160
00:10:03.019 --> 00:10:07.353
all the time at the absence of
getting anything done, right?

161
00:10:07.353 --> 00:10:12.015
But as you're coding, you should develop
the habit of the same way you go,

162
00:10:12.015 --> 00:10:15.644
what happens if I put an emoji
in this input field, right?

163
00:10:15.644 --> 00:10:18.888
On the unhappy path of being like,
does this perform?

164
00:10:18.888 --> 00:10:24.678
This is doing what I expected to
do because that cause a rerender,

165
00:10:24.678 --> 00:10:27.532
could have got the bug, right?

166
00:10:27.532 --> 00:10:29.953
What if I never expected those
components to mount and unmount?

167
00:10:29.953 --> 00:10:32.004
What if they did something
theoretically like,

168
00:10:32.004 --> 00:10:35.263
they had to use a fact that was hooked up
to a web socket or something like that.

169
00:10:35.263 --> 00:10:38.042
All sorts of different things
that weren't totally expecting,

170
00:10:38.042 --> 00:10:39.971
these same principles
about how React work.

171
00:10:39.971 --> 00:10:43.281
Yes, totally more performing apps,
absolutely, here for it.

172
00:10:43.281 --> 00:10:48.098
But at the same time, they are also like,
okay, this is how the underlying

173
00:10:48.098 --> 00:10:52.463
fundamentals actually work and
this is what they're doing for us.

174
00:10:54.156 --> 00:10:58.057
Hopefully, if tuples and
the immutable record objects come out,

175
00:10:58.057 --> 00:11:00.575
we should get better primitives for this.

176
00:11:00.575 --> 00:11:05.120
Yes, there was still be, again,
we are left with the hard,

177
00:11:05.120 --> 00:11:07.540
squishy parts of programming.

178
00:11:07.540 --> 00:11:10.692
And so
things constantly keep getting better,

179
00:11:10.692 --> 00:11:15.815
especially in the JavaScript ecosystem,
but building the muscle memory and

180
00:11:15.815 --> 00:11:19.615
habit of just occasionally
checking in on these things.

181
00:11:19.615 --> 00:11:23.471
And seeing it,
I think does create really useful and

182
00:11:23.471 --> 00:11:28.478
allows him to insights to write,
again, in a larger app over time.

183
00:11:28.478 --> 00:11:31.676
This might not have even been a
performance issue as much as it might have

184
00:11:31.676 --> 00:11:33.718
had weird unexpected side effects, right?

185
00:11:33.718 --> 00:11:38.768
So I think that these things go
hand in hand and the act of doing

186
00:11:38.768 --> 00:11:44.329
this also gives you a deeper depth
into what React is doing and why.

187
00:11:44.329 --> 00:11:50.416
Didn't even occur to me until I was
here with this thing a week ago.

188
00:11:50.416 --> 00:11:52.181
And so that's super interesting.

189
00:11:52.181 --> 00:11:56.287
The other one that we saw,
there's a lot going on,

190
00:11:56.287 --> 00:12:00.694
most of the meat lives in
the post comment thing right?

191
00:12:00.694 --> 00:12:06.590
The data which both is not great and
also not totally shocking

192
00:12:06.590 --> 00:12:11.921
from other things that I've
seen is somewhat common.

193
00:12:11.921 --> 00:12:18.537
Which is a collection
is an array right on.

194
00:12:18.537 --> 00:12:20.184
It has the user kind of baked in,

195
00:12:20.184 --> 00:12:23.485
which is weird because I have
a different list of users, right?

196
00:12:23.485 --> 00:12:26.725
So what happens if I do need
to change the user's name?

197
00:12:26.725 --> 00:12:29.574
Now I have two places to do it, right?

198
00:12:29.574 --> 00:12:31.710
It's tricky because sometimes
that is a good choice.

199
00:12:31.710 --> 00:12:34.291
And sometimes it's not but
it's been thinking of these things.

200
00:12:34.291 --> 00:12:39.464
But the interesting part is
the act of removing a comment

201
00:12:39.464 --> 00:12:43.766
also like rerendered an entire post,
right?

202
00:12:43.766 --> 00:12:47.686
And there's no number of memos in
the world that are gonna save me from

203
00:12:47.686 --> 00:12:48.774
that one, right?

204
00:12:48.774 --> 00:12:51.395
And this is one of those things which is,

205
00:12:51.395 --> 00:12:55.880
we have a tendency because our UIs
are these tree-like structures.

206
00:12:55.880 --> 00:13:00.375
That our data structure should
be a tree-like structure, right?

207
00:13:00.375 --> 00:13:04.517
But if you've ever, especially,
in a Redux like thing or

208
00:13:04.517 --> 00:13:09.939
reducer like thing where you're like,
okay, I need to change something.

209
00:13:09.939 --> 00:13:13.476
Three things deep in a data
structure is like spread operator,

210
00:13:13.476 --> 00:13:17.614
spread operator spread operator,
right, to get to that bottom thing and

211
00:13:17.614 --> 00:13:20.234
you have to rebuild
everything all the way up.

212
00:13:20.234 --> 00:13:23.827
Yeah this is working with
immutable data structures, but

213
00:13:23.827 --> 00:13:28.152
if your memory lane on something
having the same reference in memory,

214
00:13:28.152 --> 00:13:30.957
then what are you doing to that memo,
right?

215
00:13:30.957 --> 00:13:33.614
You are actively recreating,

216
00:13:33.614 --> 00:13:38.824
if you wanted to change the user
name on this comment, cool,

217
00:13:38.824 --> 00:13:43.850
you immutably spread out and
replace that entire object.

218
00:13:43.850 --> 00:13:47.660
And you can see these actually
have comments built in too, right?

219
00:13:47.660 --> 00:13:50.572
This goes,
it gets a little insane on purpose.

220
00:13:50.572 --> 00:13:55.755
Then you'd have to, they're the comments
array, that's, yeah, separate in there.

221
00:13:55.755 --> 00:14:00.222
You get the user,
you'd have to then rebuild the comments,

222
00:14:00.222 --> 00:14:02.683
you'd have to rebuild the post.

223
00:14:02.683 --> 00:14:06.382
So you end up in your data structure,
React aside,

224
00:14:06.382 --> 00:14:10.686
the simple act of changing your
immutable data structure is

225
00:14:10.686 --> 00:14:15.785
triggering all these re-renders
regardless of what you do, right?

226
00:14:15.785 --> 00:14:20.497
And so, I think the two things
I definitely just wanna, and

227
00:14:20.497 --> 00:14:23.807
one I've said repeatedly, but why not?

228
00:14:23.807 --> 00:14:28.312
Is that the component hierarchy can
sometimes matter more than the tools that

229
00:14:28.312 --> 00:14:30.946
are meant for
helping with performance, but

230
00:14:30.946 --> 00:14:33.456
also the structure of your state, right?

231
00:14:33.456 --> 00:14:36.788
Actually in the beginning of a project,
right, sitting down and

232
00:14:36.788 --> 00:14:39.454
think about regardless of
what you get from the API,

233
00:14:39.454 --> 00:14:43.530
think about what is the structure of the
state that I need for this application.

234
00:14:43.530 --> 00:14:45.253
And what do I need to do early on.

235
00:14:45.253 --> 00:14:48.549
Cuz sometimes once it's wired in there,

236
00:14:48.549 --> 00:14:52.985
the weight of the refactor
becomes untenable, right?

237
00:14:52.985 --> 00:14:56.211
And so, again, sometimes we don't get
to make these decisions over there.

238
00:14:56.211 --> 00:14:59.893
It's usually a new future somewhere we can
decide to do this of thinking about how

239
00:14:59.893 --> 00:15:01.368
are we gonna orchestrate this?

240
00:15:01.368 --> 00:15:05.228
And yes, as a front end engineer
who's been doing this for a while,

241
00:15:05.228 --> 00:15:09.654
I have the deepest empathy for we all
don't get the APIs that we want, right?

242
00:15:09.654 --> 00:15:15.446
We fight the battle with the APIs that
we have, not with the APIs that we want.

243
00:15:15.446 --> 00:15:18.819
I have had to do dark things like
stitch together seven different APIs.

244
00:15:18.819 --> 00:15:21.804
I once said, somebody asked me,
what does a front end architect do?

245
00:15:21.804 --> 00:15:25.834
My joke was how you like to break stuff
into tiny little microservices that don't

246
00:15:25.834 --> 00:15:27.501
know anything about each other?

247
00:15:27.501 --> 00:15:29.105
He's like, yeah.

248
00:15:29.105 --> 00:15:31.621
I'm like, my job is to hide
that from our customers and

249
00:15:31.621 --> 00:15:33.652
make sure they never
know that you did that.

250
00:15:33.652 --> 00:15:35.642
Right, but
there are things to think about.

251
00:15:35.642 --> 00:15:38.610
And so one of the patterns that I
really like that is more of a kind

252
00:15:38.610 --> 00:15:40.962
of state management data
structure pattern, but

253
00:15:40.962 --> 00:15:43.937
I think has immeasurable benefits
on your React application.

254
00:15:43.937 --> 00:15:48.584
Is having a layer that even if you
have a back end for front end Great.

255
00:15:48.584 --> 00:15:50.655
Good luck now being on call for a service.

