WEBVTT

1
00:00:00.000 --> 00:00:01.846
So guess what's next?

2
00:00:01.846 --> 00:00:04.350
What could be next?

3
00:00:04.350 --> 00:00:09.040
There's another branch on
everyone's favourite game called

4
00:00:09.040 --> 00:00:11.788
pushing state down, the exercise.

5
00:00:11.788 --> 00:00:17.040
I could tell you where the bug is,
by fill the branch name, and

6
00:00:17.040 --> 00:00:22.001
everything I just said in
the last five minutes spoils it.

7
00:00:25.824 --> 00:00:28.908
My face is different last time,
but I've moved the problem.

8
00:00:28.908 --> 00:00:30.267
What's gonna happen?

9
00:00:30.267 --> 00:00:35.880
It is once again slow,
who 400 milliseconds this time.

10
00:00:35.880 --> 00:00:40.681
And as you can see,
it's pretty easy even in the reactors

11
00:00:40.681 --> 00:00:43.790
to see where the culprit is, right?

12
00:00:43.790 --> 00:00:48.932
Yeah, application is long, but it's got an
equally long child in it as well, right?

13
00:00:48.932 --> 00:00:53.442
Which to be clear is
named ExpensiveComponent.

14
00:00:53.442 --> 00:00:56.782
I don't think there was a mystery
of where it was this time.

15
00:00:56.782 --> 00:00:59.455
It was hiding in plain sight.

16
00:00:59.455 --> 00:01:03.498
And again, if we kind of look even though
I said I don't think we really care about

17
00:01:03.498 --> 00:01:05.104
the componentry at this point,

18
00:01:05.104 --> 00:01:08.507
it kind of gives a sense which is
application needed to re-render.

19
00:01:08.507 --> 00:01:12.188
The fact with the packing
list that input didn't,

20
00:01:12.188 --> 00:01:15.965
I guess it's kind of the opposite problem,
right?

21
00:01:15.965 --> 00:01:19.860
But application,
the rest of these things cared.

22
00:01:19.860 --> 00:01:25.034
It was really just this expensive
one over here that didn't, right?

23
00:01:25.034 --> 00:01:29.788
And so in this case like before, we took
that input field and packing list and

24
00:01:29.788 --> 00:01:32.107
we pushed it down by itself, right?

25
00:01:32.107 --> 00:01:36.057
In this case, we're kind of going to
do the same idea, but in the opposite

26
00:01:36.057 --> 00:01:39.844
approach which is ExpensiveComponent
doesn't even take any props.

27
00:01:39.844 --> 00:01:42.920
So it certainly doesn't care
about that input field, right?

28
00:01:42.920 --> 00:01:47.289
So if we push everything else down
a level, they won't talk to application.

29
00:01:47.289 --> 00:01:51.518
They'll talk amongst themselves,
and not bother application,

30
00:01:51.518 --> 00:01:55.229
which will then not bother
expensive component, right?

31
00:01:55.229 --> 00:02:00.147
And we get the same performance
gain as we got before by

32
00:02:00.147 --> 00:02:03.441
just same philosophy, opposite.

33
00:02:03.441 --> 00:02:05.258
Before, we just took the thing and
pushed it down.

34
00:02:05.258 --> 00:02:09.303
Now, we're taking everything else and
isolating to make that

35
00:02:09.303 --> 00:02:13.822
ExpensiveComponent now like the crazy
uncle or something like that.

36
00:02:13.822 --> 00:02:14.600
So we'll go ahead.

37
00:02:14.600 --> 00:02:18.388
And this is a very heavy refactor,
which is,

38
00:02:18.388 --> 00:02:22.688
I selected it all except for
ExpensiveComponent.

39
00:02:22.688 --> 00:02:27.079
I cut,
sure we have a CSS issue at some point.

40
00:02:27.079 --> 00:02:33.151
We'll make a new component,
I'm gonna call it game.

41
00:02:33.151 --> 00:02:36.647
And we will then go ahead and.

42
00:02:40.923 --> 00:02:43.386
Call it game.

43
00:02:43.386 --> 00:02:47.953
And I gotta put some wrapper around it.

44
00:02:47.953 --> 00:02:50.632
We have lots of imports yelling at me,
but those are easily, let's find out.

45
00:02:50.632 --> 00:02:55.622
We were joking about auto import and
half the time, it's amazing.

46
00:02:55.622 --> 00:02:59.120
Will it serve me,
these are pretty safe ones.

47
00:02:59.120 --> 00:03:01.480
Just let them all kind of
auto-import their way, and

48
00:03:01.480 --> 00:03:02.901
the rest of them are variables.

49
00:03:02.901 --> 00:03:04.137
Cool, cool.

50
00:03:04.137 --> 00:03:08.085
I do need to grab some,
let's say that we were changing.

51
00:03:09.647 --> 00:03:12.042
Pretty much, all of it since nothing else,

52
00:03:12.042 --> 00:03:14.779
ExpensiveComponent that
really doesn't care.

53
00:03:14.779 --> 00:03:16.888
Grab that.

54
00:03:16.888 --> 00:03:19.702
Probably back for
some of the CSS classes in a second.

55
00:03:28.097 --> 00:03:29.611
Awesome.

56
00:03:31.704 --> 00:03:32.798
Cool, cool.

57
00:03:32.798 --> 00:03:35.761
All right, so now, it should be mostly
there other than the fact that I have

58
00:03:35.761 --> 00:03:37.328
a whole bunch of useless stuff in here.

59
00:03:40.966 --> 00:03:43.327
And we got to actually put
the game component in there.

60
00:03:50.430 --> 00:03:54.096
So, now all of those
state changes happen down

61
00:03:54.096 --> 00:03:57.108
a level on the tree right inside game.

62
00:03:57.108 --> 00:03:59.541
ExpensiveComponent still is expensive,
right?

63
00:03:59.541 --> 00:04:03.961
We didn't make ExpensiveComponent
any less expensive.

64
00:04:03.961 --> 00:04:09.840
What we did was basically just say, no
one's going to bother ExpensiveComponent.

65
00:04:09.840 --> 00:04:13.525
Just because it happens lower in the tree,
React doesn't even think to touch it.

66
00:04:13.525 --> 00:04:17.983
And if you don't call it, it doesn't
really matter how slow it is except for

67
00:04:17.983 --> 00:04:19.250
the very first time.

68
00:04:19.250 --> 00:04:22.354
And so
we just kind of use our state hierarchy or

69
00:04:22.354 --> 00:04:28.006
component hierarchy to make your app more
performing without doing anything else,

70
00:04:28.006 --> 00:04:31.923
but then thinking in the way
that React would prefer us to.

71
00:04:31.923 --> 00:04:33.789
So, we can kind of go back over.

72
00:04:33.789 --> 00:04:37.147
And yeah, could I use some more
spacing between those things?

73
00:04:37.147 --> 00:04:41.124
And a little bit of flexbox in the gap,
I absolutely could.

74
00:04:41.124 --> 00:04:45.528
But you're gonna say now,
It's pretty snappy again.

75
00:04:52.823 --> 00:04:57.063
Application did not render,
ExpensiveComponent did not render, right?

76
00:04:57.063 --> 00:05:02.245
They are left alone, and
nothing else really even counted.

77
00:05:02.245 --> 00:05:03.788
Which is pretty cool, right?

78
00:05:03.788 --> 00:05:04.735
They didn't.

79
00:05:04.735 --> 00:05:11.027
The nice part is they all go gray when
they don't render at all, which is nice.

80
00:05:11.027 --> 00:05:15.447
Cool, and that is one way to handle this,
just by thinking you take the expensive

81
00:05:15.447 --> 00:05:18.700
parts and try to separate them
from other parts of the tree.

82
00:05:18.700 --> 00:05:22.570
Whether that's taking everything else and
pushing it down, or pushing it down,

83
00:05:22.570 --> 00:05:25.721
whatever the state is depending
on the nature of the application.

84
00:05:25.721 --> 00:05:28.741
It's not just a one size fits all,
if it's like, hey,

85
00:05:28.741 --> 00:05:32.984
it's the only thing that needs it, you
push it down, or the expensive thing is

86
00:05:32.984 --> 00:05:37.006
the only thing it doesn't need it,
you push everyone else down, right?

87
00:05:37.006 --> 00:05:39.975
You just separate the problem
from the rest of the group.

88
00:05:39.975 --> 00:05:41.413
So one bad apple kind of thing.

89
00:05:41.413 --> 00:05:45.881
One question,
can use a memo on ExpensiveComponent?

90
00:05:45.881 --> 00:05:47.577
You could, yeah, right?

91
00:05:47.577 --> 00:05:51.882
However, this goes back to the thing of,
so the question was could I grab

92
00:05:51.882 --> 00:05:55.640
an ExpensiveComponent and
we'll use React memo a little bit?

93
00:05:55.640 --> 00:05:59.861
Could you say memo which is a higher
order component, which we'll talk about.

94
00:05:59.861 --> 00:06:01.170
And it says like it,

95
00:06:01.170 --> 00:06:05.871
higher-order component is a component
that wraps another component.

96
00:06:05.871 --> 00:06:08.381
A lot of times it doesn't
have maybe any UI of itself.

97
00:06:08.381 --> 00:06:12.799
It's just receiving the props beforehand
and then passing them through.

98
00:06:12.799 --> 00:06:17.669
And so memo is a higher-order
component built into React.

99
00:06:17.669 --> 00:06:21.212
And what it does is it sends me
forward that should kind of update and

100
00:06:21.212 --> 00:06:22.748
some of those other things.

101
00:06:22.748 --> 00:06:27.585
It looks at the prompts before we pass
it to the problematic component, or

102
00:06:27.585 --> 00:06:30.245
just a component we wanna stop, right?

103
00:06:30.245 --> 00:06:35.730
And it says,
are these prompts any different, right?

104
00:06:35.730 --> 00:06:42.976
And if they're not, then, I'm not gonna
bother the component that I'm wrapping.

105
00:06:42.976 --> 00:06:47.571
It's sleeping, it's not causing problems,
we'll stop this here either

106
00:06:47.571 --> 00:06:52.237
cuz it's expensive or it has one dillion
children that's gonna start a whole

107
00:06:52.237 --> 00:06:56.568
cascading tree that could have one
expensive component in it, right?

108
00:06:56.568 --> 00:07:00.849
Well, let's leave this one alone.

109
00:07:00.849 --> 00:07:06.203
And particularly for components
that don't take any props, right?

110
00:07:06.203 --> 00:07:07.690
Guess what?

111
00:07:07.690 --> 00:07:10.320
Nothing and
nothing are always the same, right?

112
00:07:10.320 --> 00:07:13.182
And so, in that case,
in the shallow comparison,

113
00:07:13.182 --> 00:07:15.721
which is just the first
level of everything.

114
00:07:15.721 --> 00:07:20.239
It's cool, nothing, awesome.

115
00:07:20.239 --> 00:07:22.689
Yeah, and so
that will stop it from rendering, right?

116
00:07:22.689 --> 00:07:26.461
However, also it's not
going to render again,

117
00:07:26.461 --> 00:07:29.687
because we did the component hierarchy.

118
00:07:29.687 --> 00:07:31.308
So in this case, could we do it?

119
00:07:31.308 --> 00:07:33.218
Probably, would I do it?

120
00:07:33.218 --> 00:07:39.047
Probably, it's actually slight cost
because we put functionality that

121
00:07:39.047 --> 00:07:44.417
checks the components not running,
but it's also not rendering.

122
00:07:44.417 --> 00:07:46.604
It's not going to gain us anything.

123
00:07:46.604 --> 00:07:51.179
But I would probably still do it,
because it's always that thing like,

124
00:07:51.179 --> 00:07:53.660
what's happening in your code today?

125
00:07:53.660 --> 00:07:57.500
Is not necessarily what's happening
your code nine months from now, right?

126
00:07:57.500 --> 00:08:02.300
And so sometimes you think about future,
you look forward and do things that

127
00:08:02.300 --> 00:08:07.325
maybe if we're being pedantic, you're
like well it's not doing anything but

128
00:08:07.325 --> 00:08:11.525
it's something else is gonna
appear in application eventually.

129
00:08:11.525 --> 00:08:13.557
Let's do the thing, right?

130
00:08:13.557 --> 00:08:16.210
But yeah, memo throw it.

131
00:08:16.210 --> 00:08:17.895
I don't have a problem with doing it.

132
00:08:17.895 --> 00:08:22.321
What I would love to caution us against
is just having that be the first thing we

133
00:08:22.321 --> 00:08:25.128
reach for
because pushing the site down is free.

134
00:08:26.455 --> 00:08:29.010
Rubbing everything in
memo as we saw before,

135
00:08:29.010 --> 00:08:32.313
it can slowly become the problem in and
of itself, right?

136
00:08:32.313 --> 00:08:36.256
We don't want the medicine to
be worse than the disease.

137
00:08:36.256 --> 00:08:37.287
Awesome!

138
00:08:39.790 --> 00:08:41.858
So that was an awesome segue,

139
00:08:41.858 --> 00:08:47.422
because it kind of covers a little bit of
the next thing we're gonna talk about.

140
00:08:47.422 --> 00:08:49.500
You know,
doing less stuff takes less time.

141
00:08:49.500 --> 00:08:51.144
So we pushed the state down.

142
00:08:51.144 --> 00:08:52.000
We did in this game.

143
00:08:52.000 --> 00:08:52.840
All right, cool.

144
00:08:52.840 --> 00:08:56.424
Yes, Mark,
&gt;&gt; Would it be okay to use Memo in cases

145
00:08:56.424 --> 00:09:01.267
where a component is doing weird things
like displaying a 3D graphics canvas, and

146
00:09:01.267 --> 00:09:04.658
you don't want a component to
ever re-render because you

147
00:09:04.658 --> 00:09:05.997
only want one canvas?

148
00:09:05.997 --> 00:09:10.105
&gt;&gt; Yeah, it's tricky, right?

149
00:09:10.105 --> 00:09:14.012
Cuz that will only work if it
doesn't ever get new props, right?

150
00:09:14.012 --> 00:09:19.097
We could argue, is that the right way,

151
00:09:19.097 --> 00:09:24.037
is a use effect with no dependencies.

152
00:09:24.037 --> 00:09:28.123
If it's just drawing onto a canvas,
you probably have a ref to that canvas.

153
00:09:28.123 --> 00:09:30.367
And like probably see if
a ref has a current, and

154
00:09:30.367 --> 00:09:33.525
if ref has current not doing the thing,
that's the right answer.

155
00:09:33.525 --> 00:09:36.657
[LAUGH] I don't think about the question.

156
00:09:36.657 --> 00:09:42.110
Given the options of wrapping it
in a memo, so never re-renders.

157
00:09:42.110 --> 00:09:48.647
A use effect that only does it the first
time, in this particular use case.

158
00:09:48.647 --> 00:09:50.705
Those other two aren't bad.

159
00:09:50.705 --> 00:09:55.889
But in the case where I needed to
get that canvas element anyway,

160
00:09:55.889 --> 00:10:00.305
once it has a canvas element and
is drawn to the canvas,

161
00:10:00.305 --> 00:10:06.362
ref.current will not be false here,
will not be undefined, right or no?

162
00:10:06.362 --> 00:10:11.656
Which point you should then
be able to never do it again?

163
00:10:11.656 --> 00:10:15.868
ref.current is used for
a lot of hacks in this area.

164
00:10:15.868 --> 00:10:18.992
Obviously, it was meant to
reference a DOM node, but

165
00:10:18.992 --> 00:10:21.710
in the same way state
changes on every render.

166
00:10:21.710 --> 00:10:24.965
If you needed whatever the new state was,
and

167
00:10:24.965 --> 00:10:28.831
the previous state was,
ref has what I had last time.

168
00:10:28.831 --> 00:10:32.356
So a lot of times you'll
see move where it's cool.

169
00:10:32.356 --> 00:10:34.556
Store the current state and a ref.

170
00:10:34.556 --> 00:10:37.743
And then before we restore it in there,
we can see the previous state and

171
00:10:37.743 --> 00:10:38.657
the current state.

172
00:10:38.657 --> 00:10:41.319
You can do stuff like that with it.

173
00:10:41.319 --> 00:10:43.838
Is it intended?

174
00:10:43.838 --> 00:10:49.290
Is it done frequently across probably
half the libraries that you use?

175
00:10:49.290 --> 00:10:50.411
Maybe [LAUGH].

176
00:10:50.411 --> 00:10:52.674
So yeah, it's there's a thing.

177
00:10:52.674 --> 00:10:57.061
But to show you the power of this,
a large application you can see that,

178
00:10:57.061 --> 00:11:01.598
this technique of not even using memo or
anything like that does pay off and

179
00:11:01.598 --> 00:11:04.910
is definitely worth investigating and
evaluating.

180
00:11:04.910 --> 00:11:09.499
We'll see it's got a sibling kind of
methodology that we'll look at too.

