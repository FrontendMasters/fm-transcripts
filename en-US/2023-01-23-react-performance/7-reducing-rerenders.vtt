WEBVTT

1
00:00:00.390 --> 00:00:03.645
So, we are going to take
a small little app and

2
00:00:03.645 --> 00:00:07.685
figure out how to now reduce
the Rerenders a little bit.

3
00:00:07.685 --> 00:00:13.199
It is there, and you can see
right now in the initial version,

4
00:00:13.199 --> 00:00:20.530
it not only, one point if I keep typing, I
can get it to go even to a yellow, right?

5
00:00:20.530 --> 00:00:25.703
Cuz it's just a lot of things
are changing a lot, right?

6
00:00:25.703 --> 00:00:28.261
And what we wanna do is, to be clear,

7
00:00:28.261 --> 00:00:32.064
you want some change when
something happens, right?

8
00:00:32.064 --> 00:00:33.972
You just don't want more than you need.

9
00:00:33.972 --> 00:00:35.890
It's like as much changes to the DOM and

10
00:00:35.890 --> 00:00:39.202
to the renders as you need as little
as you can get away with, right,

11
00:00:39.202 --> 00:00:43.120
unless the act of stopping it is more
expensive than just letting it go, right?

12
00:00:43.120 --> 00:00:47.150
In this case, it probably is cuz I didn't
hide any ridiculous functions in there.

13
00:00:47.150 --> 00:00:51.525
I just wanted something where
there was lots of glowing boxes.

14
00:00:51.525 --> 00:00:55.097
So in this case, doing any of that
will trigger all these things.

15
00:00:55.097 --> 00:00:58.422
It seems a little ridiculous that typing

16
00:00:58.422 --> 00:01:03.225
in an input field would make
the whole app go wild, right?

17
00:01:03.225 --> 00:01:08.536
So what we'll do is, first,
we will look at some ways to just kind of

18
00:01:08.536 --> 00:01:14.879
work with our component structure without
using any memorization stuff at all,

19
00:01:14.879 --> 00:01:18.440
without trying to stop anything ourselves.

20
00:01:18.440 --> 00:01:23.055
And then after that, we will go ahead and,
okay, there's some things where we have

21
00:01:23.055 --> 00:01:26.450
to step in and go,
this doesn't matter, this does, right?

22
00:01:26.450 --> 00:01:29.601
And again,
this one is not a particularly so out, but

23
00:01:29.601 --> 00:01:33.392
it has enough of the patterns that
we would see if we measured it.

24
00:01:33.392 --> 00:01:35.390
Could I put things to make it slow, sure.

25
00:01:35.390 --> 00:01:40.158
But yeah, try to parse outlook
2003 emails into an ASD,

26
00:01:40.158 --> 00:01:44.003
and you'll find your
slow places very quickly.

27
00:01:44.003 --> 00:01:47.380
It's the same methods
to solve it either way.

28
00:01:48.770 --> 00:01:52.961
Awesome, so I'm gonna switch over to that
app and kind of do some changes as well.

29
00:02:00.317 --> 00:02:04.069
Sure, he's whatever port you want.

30
00:02:04.069 --> 00:02:06.909
And we'll open up the tools, and

31
00:02:06.909 --> 00:02:12.695
we'll verify what my very fancy
screen recording already told us,

32
00:02:12.695 --> 00:02:16.971
that things rerender quite a bit in here,
right?

33
00:02:16.971 --> 00:02:20.880
Every keystroke changes everything, right?

34
00:02:20.880 --> 00:02:23.253
And let's take a look and see,

35
00:02:23.253 --> 00:02:27.464
let's see if we can acquiesce
some of the issues here.

36
00:02:34.160 --> 00:02:40.207
Then we can see that application is
rendering, which runs as the header.

37
00:02:40.207 --> 00:02:43.940
Nice ways you can hover over renders or
items list, both of them over here.

38
00:02:43.940 --> 00:02:48.590
Those are the intergrain,
a bunch of items to rerender as well.

39
00:02:50.200 --> 00:02:52.330
They're getting new props, that's cool.

40
00:02:52.330 --> 00:02:54.430
That seems interesting.

41
00:02:54.430 --> 00:02:59.370
That's probably just function, so they're
gonna call eventually, because each one so

42
00:02:59.370 --> 00:03:00.280
on and so forth.

43
00:03:01.770 --> 00:03:02.890
And there they are.

44
00:03:02.890 --> 00:03:05.090
They exist, things ago.

45
00:03:05.090 --> 00:03:08.966
So you guys see the color kind of
signifies how much you need to deal

46
00:03:08.966 --> 00:03:10.140
with it.

47
00:03:10.140 --> 00:03:11.925
But let's go take a look at the app and

48
00:03:11.925 --> 00:03:14.350
see what we immediately
see just by staring at it.

49
00:03:14.350 --> 00:03:19.199
We know that it's application at
the very top root of everything that

50
00:03:19.199 --> 00:03:20.797
is causing the issue.

51
00:03:20.797 --> 00:03:22.231
But let's take a tour of the absence.

52
00:03:22.231 --> 00:03:25.824
We're gonna spend a little bit
of time on it as well, and

53
00:03:25.824 --> 00:03:29.658
then probably some things will
jump out at us along the way.

54
00:03:29.658 --> 00:03:34.266
We could argue that that could go in
one of those functions as well, but

55
00:03:34.266 --> 00:03:37.560
it's literally just reading a JSON file,
cool.

56
00:03:37.560 --> 00:03:39.520
We got a set stage and empty string.

57
00:03:39.520 --> 00:03:43.339
We make all the different functions that
we need cuz we don't have set items until

58
00:03:43.339 --> 00:03:44.752
we're inside the function.

59
00:03:44.752 --> 00:03:47.670
Right, we don't have the hook for
changing the state.

60
00:03:47.670 --> 00:03:53.166
I can't put that outside, otherwise,
all of the, how do you immutably change

61
00:03:53.166 --> 00:03:58.838
an array, that lives over in another file
because it didn't need to live in here.

62
00:03:58.838 --> 00:04:04.793
But I need to then set items
accordingly with everything it has.

63
00:04:04.793 --> 00:04:08.271
Awesome, there are some
things that strike us at,

64
00:04:08.271 --> 00:04:11.306
do I have to filter these every time,
probably.

65
00:04:11.306 --> 00:04:15.761
You'd have to filter them somewhere,
right, if they're changing, right.

66
00:04:15.761 --> 00:04:19.064
If you can confirm that they
haven't changed any way, shape,

67
00:04:19.064 --> 00:04:21.950
or form, but
that's the same as mapping over them.

68
00:04:21.950 --> 00:04:27.070
So, okay, unpacked, cool, cool, cool.

69
00:04:27.070 --> 00:04:30.180
And then we're just using
regular prop drilling here.

70
00:04:30.180 --> 00:04:37.359
So itself doesn't really
care about removing an item.

71
00:04:37.359 --> 00:04:41.920
I mean, it could, right, but
that's actually an interesting refactor.

72
00:04:41.920 --> 00:04:44.730
We could too maybe, but
they pass them through.

73
00:04:44.730 --> 00:04:47.420
But the first thing we
saw was that typing in

74
00:04:47.420 --> 00:04:50.970
the input field was somewhat problematic.

75
00:04:50.970 --> 00:04:55.599
And so, we look, this is where we talked
about in the very beginning when we saw

76
00:04:55.599 --> 00:04:57.646
that picture of the tree, right?

77
00:04:57.646 --> 00:05:01.495
Here, we have, whatever that
new items name is going to be,

78
00:05:01.495 --> 00:05:06.248
that draft state, whatever they've
currently typed in the input field,

79
00:05:06.248 --> 00:05:08.598
that lives in application, right?

80
00:05:08.598 --> 00:05:11.920
And we saw that application was
the one triggering everything in this

81
00:05:11.920 --> 00:05:12.669
initial case.

82
00:05:12.669 --> 00:05:14.590
And some things will live in application,
right?

83
00:05:14.590 --> 00:05:17.805
Cuz again, in React, generally speaking,

84
00:05:17.805 --> 00:05:22.712
whatever the shared state has to live
at the highest most node that all

85
00:05:22.712 --> 00:05:26.790
of the components are using it,
have in common, right?

86
00:05:28.330 --> 00:05:32.718
So at some point, that is application for
things like everyone's favorite current

87
00:05:32.718 --> 00:05:35.205
user, right, and
replace along those lines.

88
00:05:35.205 --> 00:05:36.567
So, that trigger stuff.

89
00:05:36.567 --> 00:05:38.789
And sometimes the name of the game is,

90
00:05:38.789 --> 00:05:44.622
before we start smothering stuff in
a React app or use or component update or

91
00:05:44.622 --> 00:05:49.770
anything like that, it is like,
could we get that tree smaller, right?

92
00:05:49.770 --> 00:05:52.073
And my hypothesis is that we can,

93
00:05:52.073 --> 00:05:57.450
because I am passing in that draft
state to this new item component.

94
00:05:57.450 --> 00:06:02.790
I am passing in the set new item name,
and I am passing in the Add Item.

95
00:06:02.790 --> 00:06:07.470
And you might be, hey, this might
seem a little silly, but it is very,

96
00:06:07.470 --> 00:06:12.384
I saw a code last week where, yeah,
they didn't break out into a component

97
00:06:12.384 --> 00:06:17.082
pass every day, and they did have
the input field just in here, right?

98
00:06:17.082 --> 00:06:21.294
And that is, the refactoring
sometimes the name of the game is,

99
00:06:21.294 --> 00:06:26.880
take what was just literally just some
innocuous HTML to look totally fine.

100
00:06:26.880 --> 00:06:30.984
But in pushing that state down and
by taking some just HTML JSX and

101
00:06:30.984 --> 00:06:34.480
refactoring into component
to push the stuff that only

102
00:06:34.480 --> 00:06:37.299
that little chunk cares
about down a level.

103
00:06:37.299 --> 00:06:41.898
So it becomes, remember that graph we had,
that one that was just by itself and

104
00:06:41.898 --> 00:06:44.420
didn't really care about anything?

105
00:06:44.420 --> 00:06:49.605
If that one was changing on every
keystroke what the draft item name was,

106
00:06:49.605 --> 00:06:54.791
the rest of the application doesn't
need to know until they hit Submit.

107
00:06:54.791 --> 00:06:56.360
And then, yeah,
you've added a new one to the list.

108
00:06:56.360 --> 00:06:57.687
We gotta update the list.

109
00:06:57.687 --> 00:06:59.510
But sometimes the name of the game is,
yeah, and

110
00:06:59.510 --> 00:07:00.857
I just didn't want it to sit there.

111
00:07:00.857 --> 00:07:02.930
And like, let me copy some HTML and
make a new file.

112
00:07:02.930 --> 00:07:04.280
So it's made for us.

113
00:07:04.280 --> 00:07:08.379
But sometimes the name of the game is
taking just HTML that seems like it's not

114
00:07:08.379 --> 00:07:09.400
hurting anybody.

115
00:07:09.400 --> 00:07:13.684
And I don't need to break this out into
its own component, and maybe you don't,

116
00:07:13.684 --> 00:07:15.957
right, that wasn't particularly slow.

117
00:07:15.957 --> 00:07:21.141
But the pattern in this case is making
the component, pushing that stuff down.

118
00:07:21.141 --> 00:07:25.532
So it is now on a lower node and
not affecting one of its siblings.

119
00:07:25.532 --> 00:07:28.908
That would cause everything to rerender.

120
00:07:28.908 --> 00:07:31.150
Cuz that could be further down that tree,

121
00:07:31.150 --> 00:07:33.970
which is now getting thrashed
all the time, whether

122
00:07:33.970 --> 00:07:38.640
generating random numbers constantly,
random colors, or what have you.

123
00:07:38.640 --> 00:07:43.140
So in this case,
the refactor is pretty easy.

124
00:07:43.140 --> 00:07:47.826
We go into this new item and

125
00:07:47.826 --> 00:07:51.025
we say, what if?

126
00:07:51.025 --> 00:07:51.682
It says,

127
00:07:51.682 --> 00:07:57.288
you are the only component in my app that
cares about what's in that input field.

128
00:07:57.288 --> 00:07:59.738
We care when it hits event,
I'm here for it.

129
00:07:59.738 --> 00:08:03.490
When they hit Submit,
please tell me about what it is.

130
00:08:03.490 --> 00:08:09.612
But in the meantime, why don't you keep
that information to yourself, right?

131
00:08:09.612 --> 00:08:11.285
And this one gets filed under.

132
00:08:11.285 --> 00:08:15.632
I think I told you there was the things
you should probably maybe always do,

133
00:08:15.632 --> 00:08:19.501
things you should definitely always do,
run in production mode.

134
00:08:19.501 --> 00:08:22.721
Things you should probably maybe always
do, which is something like this,

135
00:08:22.721 --> 00:08:25.560
which is just pushing it down the tree,
not memorizing anything.

136
00:08:25.560 --> 00:08:29.084
You're not doing anything, you're just
taking anything that was happening and

137
00:08:29.084 --> 00:08:30.214
having its blast radius.

138
00:08:30.214 --> 00:08:31.897
It's like taking your worst friend and

139
00:08:31.897 --> 00:08:34.203
not letting them hang out
with the ones that you like.

140
00:08:34.203 --> 00:08:37.570
You still wanna hang out with them,
but not all the time.

141
00:08:37.570 --> 00:08:39.139
It's how Mark feels about me.

142
00:08:39.139 --> 00:08:41.890
And so,
we kind of have that state in there.

143
00:08:41.890 --> 00:08:44.687
And that will go ahead and
keep track of all that, and

144
00:08:44.687 --> 00:08:47.570
now I can get rid of
it out of application.

145
00:08:47.570 --> 00:08:52.530
&gt;&gt; So you've had sibling components
that you would essentially be creating

146
00:08:52.530 --> 00:08:54.858
that same use-state in each one.

147
00:08:54.858 --> 00:08:58.986
Would you then put that in context
somewhere else so you don't have to have

148
00:08:58.986 --> 00:09:03.540
the same line of code in three different
components, or 18, or whatever?

149
00:09:03.540 --> 00:09:06.590
&gt;&gt; Yeah, if you have shared code, then
all of a sudden now you play the game of,

150
00:09:06.590 --> 00:09:07.410
pull it up the tray.

151
00:09:09.130 --> 00:09:13.273
The thing about using a context API is,
if you're pulling it up the tree, right,

152
00:09:13.273 --> 00:09:14.304
the context wraps.

153
00:09:14.304 --> 00:09:16.730
You and your entire application
doesn't [INAUDIBLE] we typically.

154
00:09:16.730 --> 00:09:21.771
Well, context API, put on the entire
application theoretically.

155
00:09:21.771 --> 00:09:24.344
And maybe you should by
maybe definitely like,

156
00:09:24.344 --> 00:09:28.220
if only a subset of that tree needed
that context, wrap it around that.

157
00:09:28.220 --> 00:09:34.503
But there's really no difference of
pulling that up and wrapping in context,

158
00:09:34.503 --> 00:09:39.278
that's just a way to more
conveniently pull it up, right?

159
00:09:39.278 --> 00:09:41.279
&gt;&gt; So that's essentially where we started.

160
00:09:41.279 --> 00:09:41.810
&gt;&gt; Yeah.

161
00:09:41.810 --> 00:09:44.288
&gt;&gt; Right, yeah, okay.

162
00:09:44.288 --> 00:09:46.442
&gt;&gt; And so
now we've gotten rid of that one.

163
00:09:46.442 --> 00:09:49.092
&gt;&gt; And let's make sure my code compiles
while Alex asks me a question.

164
00:09:49.092 --> 00:09:52.152
&gt;&gt; Yeah,
what about the most obvious thing,

165
00:09:52.152 --> 00:09:56.912
wrapping the git original items
into an anonymous function here.

166
00:09:56.912 --> 00:09:58.099
&gt;&gt; That'll do it too.

167
00:09:58.099 --> 00:10:02.258
That one wasn't particularly fast,
we can do it, both work.

168
00:10:02.258 --> 00:10:05.078
Cuz it's tricky,
cuz this thing isn't actually that.

169
00:10:05.078 --> 00:10:07.970
So it is rerendering all over the place.

170
00:10:07.970 --> 00:10:10.973
So now we can say, and
if you look at the green lines,

171
00:10:10.973 --> 00:10:14.470
what's the yellow if I
really slam on the keyboard?

172
00:10:15.910 --> 00:10:18.324
What's the only thing rerendering?

173
00:10:18.324 --> 00:10:21.571
Now it's its own subtree, and
it's not bothering anyone else,

174
00:10:21.571 --> 00:10:23.352
it's not talking to application.

175
00:10:23.352 --> 00:10:25.250
Now, if I hit add, right?

176
00:10:25.250 --> 00:10:29.290
Okay, but that's worth it,
that's where the items live.

177
00:10:29.290 --> 00:10:30.808
If it was an application,

178
00:10:30.808 --> 00:10:34.400
that is the common denominator
of the pact in the unpack list.

179
00:10:36.710 --> 00:10:38.293
But that input field wasn't.

180
00:10:38.293 --> 00:10:43.837
That is one of the very first easy
optimizations that isn't harming anyone,

181
00:10:43.837 --> 00:10:44.442
right?

182
00:10:44.442 --> 00:10:48.802
Push that, say, down to the lowest
common denominator that needs it,

183
00:10:48.802 --> 00:10:53.612
and lift it up as high as you need to, but
as low as you can get away with, right?

184
00:10:53.612 --> 00:10:56.807
Instantly just makes the tree shorter
without calling any crazy Malwise

185
00:10:56.807 --> 00:11:00.230
functions, or any kind of cache,
or anything like that.

186
00:11:00.230 --> 00:11:03.491
Just trying to limit its blast radius and
what renders it causes,

187
00:11:03.491 --> 00:11:05.458
immediately kinda solves that issue.

