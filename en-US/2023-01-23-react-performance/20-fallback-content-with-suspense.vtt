WEBVTT

1
00:00:00.000 --> 00:00:04.240
We get into the ones where like this one
is, I think, pretty safe and pretty easy.

2
00:00:04.240 --> 00:00:11.838
And it's a suspense is a somewhat
hard thing to talk about in React,

3
00:00:11.838 --> 00:00:18.791
because it's a lot of things and
only some of them we have now.

4
00:00:18.791 --> 00:00:20.632
So that makes sense.

5
00:00:20.632 --> 00:00:21.150
Yeah.

6
00:00:21.150 --> 00:00:28.135
So suspense is this idea of like what
do you need to load the initial page?

7
00:00:28.135 --> 00:00:31.290
Do you need all the components for
every page everywhere in your app always?

8
00:00:31.290 --> 00:00:33.348
Probably not like there are,

9
00:00:33.348 --> 00:00:38.368
if you pulled out the metrics on the out
that you work on, you would likely

10
00:00:38.368 --> 00:00:43.409
see that there are some pages that
get visited more than others, right?

11
00:00:43.409 --> 00:00:46.244
Like there's probably some
deep Admin Tools, preferences,

12
00:00:46.244 --> 00:00:47.749
pain that doesn't get visited.

13
00:00:47.749 --> 00:00:52.174
So let's load that the initial bundle,
right?

14
00:00:52.174 --> 00:00:56.345
Like, even like React, this idea of like
a synchronous data fetching, like we have

15
00:00:56.345 --> 00:00:59.958
ways to do it like we either jam stuff
in a use effect and hope for the best.

16
00:00:59.958 --> 00:01:04.381
We use something like Redux saga or
something like that, SWR,

17
00:01:04.381 --> 00:01:06.473
React query, what have you.

18
00:01:06.473 --> 00:01:08.403
There are lots of ways to do it, but

19
00:01:08.403 --> 00:01:11.808
React doesn't have a lot of
built-in primitives for that.

20
00:01:11.808 --> 00:01:13.940
So what suspense is, is a series of APIs.

21
00:01:13.940 --> 00:01:16.098
There is suspense data fetching, right?

22
00:01:16.098 --> 00:01:19.656
Where you can say, hey, component,
show a loading indicator,

23
00:01:19.656 --> 00:01:22.773
because we know that we don't
have the data yet, right?

24
00:01:22.773 --> 00:01:26.113
And when you get the data,
fill it in, right?

25
00:01:26.113 --> 00:01:30.123
And some other frameworks have this,
React doesn't presently.

26
00:01:30.123 --> 00:01:32.823
Suspense data fetching hasn't shipped yet,
it's

27
00:01:32.823 --> 00:01:36.942
still only certain like next can use it,
I believe in remix and stuff like that.

28
00:01:36.942 --> 00:01:41.114
But generally speaking, you unless you're
using one of those super opinionated

29
00:01:41.114 --> 00:01:43.180
frameworks, you can't really use it.

30
00:01:43.180 --> 00:01:47.126
You will eventually one day, but it's
still kind of like in a working phase.

31
00:01:47.126 --> 00:01:51.212
The only one that is kind
of fully in place at this

32
00:01:51.212 --> 00:01:54.901
point is the one that fetches components.

33
00:01:54.901 --> 00:02:00.120
So this idea of like, hey,
maybe you load the first page first.

34
00:02:00.120 --> 00:02:03.005
Should they then go to that second page?

35
00:02:03.005 --> 00:02:05.495
Sure, then go pull in more data, right?

36
00:02:05.495 --> 00:02:10.460
Because like, it's not just like,
the reason that we care about

37
00:02:10.460 --> 00:02:14.537
bundle size is not always
the download of the bundle.

38
00:02:14.537 --> 00:02:19.375
Like homework assignment that I will
give you later is there's like this

39
00:02:19.375 --> 00:02:23.517
post called the cost of JavaScript,
where like bundle size.

40
00:02:23.517 --> 00:02:27.041
Bundles take a long time to
download if they're big, right?

41
00:02:27.041 --> 00:02:33.905
Turns out that if I was to give you
a JavaScript file that was 100 kilobytes,

42
00:02:33.905 --> 00:02:40.565
an image that is 100 kilobytes,
you know which one takes longer to load?

43
00:02:41.959 --> 00:02:43.530
The JavaScript.

44
00:02:43.530 --> 00:02:47.908
Cuz the image, you take the bits,
put them on the screen.

45
00:02:47.908 --> 00:02:54.004
JavaScript will send you our code,
browser, go compile this, right?

46
00:02:54.004 --> 00:02:56.540
And then do all the other things, right?

47
00:02:56.540 --> 00:03:00.395
And so like there are places where
like all of a sudden it becomes

48
00:03:00.395 --> 00:03:03.597
more tenable to basically
have the ability to like,

49
00:03:03.597 --> 00:03:07.483
let's give you what you need to
get you up and running, right?

50
00:03:07.483 --> 00:03:11.642
Should you go, we will then progressively
give you more and more of the application,

51
00:03:11.642 --> 00:03:13.838
which is incredibly powerful idea, right,

52
00:03:13.838 --> 00:03:17.569
that we don't have to send you like in
the early days here's the entire app.

53
00:03:17.569 --> 00:03:21.851
Every time it's anything like download
an iOS app, it's like, every three days,

54
00:03:21.851 --> 00:03:25.731
we're gonna send you this big wad of
JavaScript, parse it and live with it.

55
00:03:25.731 --> 00:03:27.820
So we can progressively
be in to load the app.

56
00:03:27.820 --> 00:03:33.058
And one thing I love about it Is,
and there was a library called,

57
00:03:33.058 --> 00:03:36.756
like React, lazy, lazy, load, I forget.

58
00:03:36.756 --> 00:03:40.659
But it's basically the same basic idea
where you have these suspense boundaries,

59
00:03:40.659 --> 00:03:42.610
which are kind of like error boundaries,

60
00:03:42.610 --> 00:03:45.974
and you have a fallback, which is
like some kind of loading indicator.

61
00:03:45.974 --> 00:03:50.502
And we'll see in fully in a second when I
like show it to you in the notes app that

62
00:03:50.502 --> 00:03:53.444
we're gonna build or
that we're gonna add it to.

63
00:03:53.444 --> 00:03:58.733
But you'll see that like for
the most part it will show that loading

64
00:03:58.733 --> 00:04:03.560
indicator while it waits for
the import promise to resolve.

65
00:04:03.560 --> 00:04:07.625
And once the import promise resolves,
then it will go show the full thing.

66
00:04:07.625 --> 00:04:13.148
So it will automatically build out your
entire application, that is basically,

67
00:04:13.148 --> 00:04:17.562
at this moment, the only part of
suspense that you can use today.

68
00:04:17.562 --> 00:04:21.146
And so the rest of it will ideally
come at some point or another, but

69
00:04:21.146 --> 00:04:24.037
that is the part that we have
access to at this moment.

70
00:04:24.037 --> 00:04:28.923
And, but it does give you the ability,
it's the amount of work and

71
00:04:28.923 --> 00:04:30.940
effort to have it in place.

72
00:04:30.940 --> 00:04:36.107
It's one of those things which is
almost no real downside, all right?

73
00:04:36.107 --> 00:04:41.783
Unless you have for some reason an older
infrastructure that can't support it,

74
00:04:41.783 --> 00:04:47.458
but should work just using modern web,
like the water would import statement and

75
00:04:47.458 --> 00:04:53.236
be able to kind of load your app as time
goes on, and like works pretty seamlessly.

76
00:04:53.236 --> 00:04:54.313
So let's take a look.

77
00:04:54.313 --> 00:04:56.453
I'm gonna switch over to that Notes app.

78
00:05:04.913 --> 00:05:06.346
So project notes.

79
00:05:06.346 --> 00:05:07.086
Yeah.

80
00:05:11.971 --> 00:05:12.620
Cool.

81
00:05:17.607 --> 00:05:20.831
And like right now, it doesn't
have any of this in place, right?

82
00:05:20.831 --> 00:05:23.209
And so,
let's just take a quick tour of the app.

83
00:05:23.209 --> 00:05:24.430
I'll show it to you real quick.

84
00:05:33.430 --> 00:05:34.630
You can see notes.

85
00:05:36.121 --> 00:05:37.502
You can edit them.

86
00:05:40.756 --> 00:05:42.974
You can close the editor.

87
00:05:42.974 --> 00:05:44.065
You can close the Note.

88
00:05:44.065 --> 00:05:45.501
It's an app.

89
00:05:45.501 --> 00:05:46.617
That's the thing.

90
00:05:46.617 --> 00:05:51.747
What I would love to do is this one
we maybe not they start out with no,

91
00:05:51.747 --> 00:05:55.170
again, it was slightly contrived, right?

92
00:05:55.170 --> 00:05:59.166
They start with nothing there, so we don't
necessarily need to show them one, but

93
00:05:59.166 --> 00:06:01.749
like, maybe like,
they almost never click on edit.

94
00:06:01.749 --> 00:06:06.386
So maybe, we don't pull in this whole
edit interface until they go navigate it.

95
00:06:06.386 --> 00:06:11.409
And the nice part is step one is,
like, load it when you need it, right?

96
00:06:11.409 --> 00:06:15.398
Step two is like,
there's nothing stopping from kicking off

97
00:06:15.398 --> 00:06:19.324
that promise as they hover over
the edit button, all right?

98
00:06:19.324 --> 00:06:25.183
Like, you can build, like, increasingly
sophisticated implementations of this,

99
00:06:25.183 --> 00:06:28.567
right, to kind of have your cake and
eat it, too.

100
00:06:28.567 --> 00:06:31.511
All right, so
if we look at the application,

101
00:06:31.511 --> 00:06:34.618
it's got a notes list,
it's got a notes view.

102
00:06:34.618 --> 00:06:36.629
We can imagine what that is.

103
00:06:36.629 --> 00:06:39.233
If we go into the notes view,

104
00:06:39.233 --> 00:06:44.994
you can see that it displays a note,
great, or empty, right?

105
00:06:44.994 --> 00:06:46.968
And we can have both in place like that.

106
00:06:46.968 --> 00:06:52.918
So what I might try to do in this
case is like let's do it with,

107
00:06:52.918 --> 00:06:58.080
let's do it with this note
if they choose to load it.

108
00:06:58.080 --> 00:07:00.357
So yeah, we'll put that in place, and

109
00:07:00.357 --> 00:07:04.987
what we wanna do is just like load that as
time goes on or like, and see the place.

110
00:07:04.987 --> 00:07:09.453
And I have a loading indicator like
pre-baked, and ready to go for us.

111
00:07:09.453 --> 00:07:16.377
So what we'll do is we'll go, and
we'll try to load it as time goes on.

112
00:07:16.377 --> 00:07:20.570
So in our note.js

113
00:07:23.844 --> 00:07:28.721
We've got this note content, which is
like, let's do this like when we need it,

114
00:07:28.721 --> 00:07:29.225
right?

115
00:07:29.225 --> 00:07:35.406
And like if it's editing,
we show the editing, so on and so forth.

116
00:07:35.406 --> 00:07:38.730
So what I wanna do,
I guess we'll do it for the editor.

117
00:07:40.803 --> 00:07:47.727
I also have this, there is in sleep there
is simulate network I'm running locally.

118
00:07:47.727 --> 00:07:49.150
It's gonna be instantaneous.

119
00:07:49.150 --> 00:07:54.157
All this does is it takes my promise and
makes me, wait a second.

120
00:07:54.157 --> 00:07:55.229
It's fake.

121
00:07:55.229 --> 00:07:57.302
I'm on my own machine.

122
00:07:57.302 --> 00:07:59.260
It'll be too fast, you'll never see it.

123
00:07:59.260 --> 00:08:05.511
[COUGH] Cool, and so what we can do here
is, so we can bring in lazy from React,

124
00:08:05.511 --> 00:08:09.627
that's React out lazy,
it's like a buddy memo.

125
00:08:09.627 --> 00:08:16.900
It's built in these days and
suspense, which is a component, cool.

126
00:08:16.900 --> 00:08:21.756
And now we need that simulate network,
which you don't normally need but

127
00:08:21.756 --> 00:08:22.784
like, again.

128
00:08:22.784 --> 00:08:25.883
And so now, instead of importing editing,

129
00:08:25.883 --> 00:08:30.236
right, which we could totally do,
what we can do instead is,

130
00:08:30.236 --> 00:08:35.035
and this will actually work for
other, not just React components.

131
00:08:35.035 --> 00:08:39.975
Like, there is an import function
that returns a promise that

132
00:08:39.975 --> 00:08:43.875
will import files that are ESX modules,
right?

133
00:08:43.875 --> 00:08:48.155
Bundler if it's out of date, like if you
have an old bundle you've just been like,

134
00:08:48.155 --> 00:08:51.901
should totally do that web pack three
upgrade one of these days, right?

135
00:08:51.901 --> 00:08:53.894
That was a joke.

136
00:08:53.894 --> 00:08:56.134
Like, you might have some issues with it,
right?

137
00:08:56.134 --> 00:08:59.986
But I would like to tell you that
the technology exists, right?

138
00:08:59.986 --> 00:09:04.049
I too have had a legacy app and
longed for some of these things.

139
00:09:04.049 --> 00:09:05.025
I'm there with you.

140
00:09:05.025 --> 00:09:08.378
The cool thing that we can do is
instead of importing the normal way.

141
00:09:08.378 --> 00:09:12.902
We can do and, the lazy part is because
of the React pieces and to hook it

142
00:09:12.902 --> 00:09:17.582
up with the suspense boundaries, but
like import itself I can work, and

143
00:09:17.582 --> 00:09:21.826
I even need to get something not
a top level at all actually works.

144
00:09:21.826 --> 00:09:23.204
And we say lazy, and

145
00:09:23.204 --> 00:09:28.409
then lazy takes something that should
ideally return that import promise.

146
00:09:28.409 --> 00:09:34.841
So normally, it would look like this,
and then we do the same.

147
00:09:37.267 --> 00:09:41.806
Call it at this time, okay, edit like
that is normally what it would look like.

148
00:09:41.806 --> 00:09:46.626
But for me,
since that will be instantaneous.

149
00:09:46.626 --> 00:09:47.723
We're gonna slow it down.

150
00:09:53.915 --> 00:09:55.814
To see it in place.

151
00:09:55.814 --> 00:09:58.413
So that's gonna simulate the fact that
it took a second over the network.

152
00:09:58.413 --> 00:09:59.458
It's not new.

153
00:09:59.458 --> 00:10:02.425
What I showed you in the very
beginning is more accurate, right?

154
00:10:02.425 --> 00:10:05.812
So now if it's editing,

155
00:10:10.249 --> 00:10:13.372
Then in that case we want return,
and this is the important part.

156
00:10:13.372 --> 00:10:17.877
You need these suspense boundaries, other
like that is predominantly actually just

157
00:10:17.877 --> 00:10:21.955
ES not ES6 anymore, I guess right,
like it's yes, 2015 is 2022.

158
00:10:21.955 --> 00:10:26.569
I think we can modern JavaScript,
how about that?

159
00:10:26.569 --> 00:10:30.316
Suspense, and you do have to give it
the fallback, like what should it show?

160
00:10:30.316 --> 00:10:34.201
And that could literally be a paragraph
tag with the word loading if you really

161
00:10:34.201 --> 00:10:35.889
want, like, doesn't matter.

162
00:10:35.889 --> 00:10:37.821
So we've got this paragraph
tag when we say like,

163
00:10:37.821 --> 00:10:39.617
I've got a loading indicator that'll show.

164
00:10:42.186 --> 00:10:45.049
Claim, I'm happy with it.

165
00:10:45.049 --> 00:10:50.983
And when I make something that I'm
happy with in CSS, I wanna show it off.

166
00:10:50.983 --> 00:10:52.398
And I don't even spell suspense right.

167
00:10:55.072 --> 00:10:59.199
Sure to copy that alone,
yeah all right, so I can paste it in.

168
00:10:59.199 --> 00:11:04.544
And now you can kind of see
a load as I go through.

169
00:11:04.544 --> 00:11:10.644
So that should all be in place,
we can pop over, now I hit at it.

170
00:11:10.644 --> 00:11:15.522
We see the loading indicator that
code was not in the original bundle,

171
00:11:15.522 --> 00:11:19.003
it was dynamically loaded as I needed it,
right?

172
00:11:19.003 --> 00:11:22.850
Again, not doing things as faster than
doing things on initial load there's

173
00:11:22.850 --> 00:11:26.756
a page, maybe you're never going to edit
it no maybe just once you were there,

174
00:11:26.756 --> 00:11:28.430
dinner reservation is, right?

175
00:11:28.430 --> 00:11:29.311
You can yeah.

176
00:11:29.311 --> 00:11:32.969
And there, you can probably think of
like the last app that you've played

177
00:11:32.969 --> 00:11:35.683
around with or worked on,
of places where it's like,

178
00:11:35.683 --> 00:11:38.456
this is the main event,
these are all the other things.

179
00:11:38.456 --> 00:11:41.351
Again, putting that stuff off is a very,

180
00:11:41.351 --> 00:11:46.257
very easy performance win with
relatively little downside, right?

181
00:11:46.257 --> 00:11:51.450
And so like if you asked me hey I just
generally want to work on the performance

182
00:11:51.450 --> 00:11:56.399
of my app, should I put memos on
everything maybe, or should I like start

183
00:11:56.399 --> 00:12:01.695
breaking my app up into pieces, so
it doesn't load all that at once, right?

184
00:12:01.695 --> 00:12:03.850
But I made this joke at the very
beginning of the workshop.

185
00:12:03.850 --> 00:12:08.558
If your app is not on a CDN,
like, do that first right?

186
00:12:08.558 --> 00:12:10.384
And to be clear,
I have worked on apps that were not out.

187
00:12:10.384 --> 00:12:12.035
They were just served at
a one data center in Chicago.

188
00:12:12.035 --> 00:12:16.450
Yes, there's no shame in
that sometimes getting

189
00:12:16.450 --> 00:12:21.505
the infrastructure in place
to do that is a task, right?

190
00:12:21.505 --> 00:12:26.669
Deepest respect I have been there, I have
like that Joe was making fun of me, right?

191
00:12:26.669 --> 00:12:29.694
And like it's totally worth it.

192
00:12:29.694 --> 00:12:33.037
But some of these things
become very big wins, right?

193
00:12:33.037 --> 00:12:38.197
That we often times overlook, and
are worth doing all these cases,

194
00:12:38.197 --> 00:12:43.094
and that's the Suspense API that
you can use today, all right?

195
00:12:43.094 --> 00:12:43.842
More is coming.

196
00:12:43.842 --> 00:12:47.653
There is versions for like, hey,
this is data that we haven't loaded yet.

197
00:12:47.653 --> 00:12:51.139
And so that way, like we all have
done the rigmarole or use libraries.

198
00:12:51.139 --> 00:12:55.657
Okay, when I kick off the promise,
I'm gonna set loading to true.

199
00:12:55.657 --> 00:12:57.743
Then, I'm going to set error to false.

200
00:12:57.743 --> 00:13:01.685
And then when it comes back, I'm gonna
then I'm going to set loading to false.

201
00:13:01.685 --> 00:13:06.833
And then the data is a true, and
I've got a conditional that yes, right?

202
00:13:06.833 --> 00:13:10.475
Things that are tedious like that should
probably be solved by the framework, but

203
00:13:10.475 --> 00:13:13.134
I say that like you're only
left with these squishy stuff.

204
00:13:13.134 --> 00:13:16.878
You're also left with a few annoying
things, right because they are tricky

205
00:13:16.878 --> 00:13:19.992
problems to solve, and
to do reliability cost the framework.

