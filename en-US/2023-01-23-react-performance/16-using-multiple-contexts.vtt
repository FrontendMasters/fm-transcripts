WEBVTT

1
00:00:00.000 --> 00:00:08.136
I would like to present my case, If I may,
I'll let this sit on the screen for

2
00:00:08.136 --> 00:00:12.937
just bordering on what becomes an almost
uncomfortable amount of time that doesn't

3
00:00:12.937 --> 00:00:16.946
feels like putting a cut in, but
just long enough for dramatic pause.

4
00:00:16.946 --> 00:00:19.377
Does anyone see what the problem is?

5
00:00:25.739 --> 00:00:28.995
So Justin, so
he's about to hit the button, all right.

6
00:00:31.870 --> 00:00:37.574
On the fly, at the very last minute,
we're taking these two things and

7
00:00:37.574 --> 00:00:41.009
we're putting them in a brand new object.

8
00:00:42.524 --> 00:00:47.934
That brand new object, it's not
the same object as it was last time.

9
00:00:47.934 --> 00:00:54.736
Items might be the same,
dispatch might be the same, right?

10
00:00:54.736 --> 00:00:58.113
But this object is brand new,

11
00:00:58.113 --> 00:01:04.472
which invalidates all of
those checks in React.memo.

12
00:01:06.066 --> 00:01:12.128
And some things just care about dispatch,
right?

13
00:01:12.128 --> 00:01:16.966
Before items, by themselves, they're like,
yo, if I'm getting the same item I got

14
00:01:16.966 --> 00:01:20.499
last time, even if the list is all new,
I'm good, I'm cool.

15
00:01:20.499 --> 00:01:23.912
Dispatch is the same,
getting the same item, right?

16
00:01:23.912 --> 00:01:30.081
But here, technically, it is pulling
dispatch off of a brand new object, right?

17
00:01:30.081 --> 00:01:32.600
The ES6 syntax hides it from us, but

18
00:01:32.600 --> 00:01:36.026
the rules are being followed once again,
right?

19
00:01:36.026 --> 00:01:40.154
All of the initial rules that we set
up in the very beginning are true, and

20
00:01:40.154 --> 00:01:42.060
we just opted out of everything.

21
00:01:42.060 --> 00:01:44.050
While also still having
those React.memo checks, and

22
00:01:44.050 --> 00:01:45.412
they're doing nothing now, right?

23
00:01:45.412 --> 00:01:47.170
They're useless,
they might as well take them out.

24
00:01:48.580 --> 00:01:54.069
So, does anyone have hypotheses
on how we would solve this, Alex.

25
00:01:54.069 --> 00:01:58.049
&gt;&gt; We just create object ones above
return, destructure in there and

26
00:01:58.049 --> 00:02:00.119
then just pass the dot reference?

27
00:02:00.119 --> 00:02:02.667
&gt;&gt; But the problem is, items will change.

28
00:02:02.667 --> 00:02:04.284
So we'll have to make
a new one every time.

29
00:02:06.916 --> 00:02:08.152
Dustin.

30
00:02:08.152 --> 00:02:10.705
&gt;&gt; Memoize provider value?

31
00:02:10.705 --> 00:02:14.048
&gt;&gt; Memoize provider value,
but then I might get an old,

32
00:02:14.048 --> 00:02:17.029
but that'll get broken
by the items changing.

33
00:02:17.029 --> 00:02:21.869
And even for the individual item
that only cared about poor dispatch.

34
00:02:21.869 --> 00:02:24.059
Dustin, well, I think you're
reading from the chat room, but

35
00:02:24.059 --> 00:02:26.555
you're gonna get credit because I-
&gt;&gt; Two contexts?

36
00:02:26.555 --> 00:02:33.408
&gt;&gt; Yes, so one context caused our problem,
do you know how we solve it?

37
00:02:33.408 --> 00:02:35.610
I heard you like contexts.

38
00:02:35.610 --> 00:02:37.529
So I put context in your context.

39
00:02:37.529 --> 00:02:39.928
Why didn't I make that meme and
have it on a slide ready to go?

40
00:02:39.928 --> 00:02:46.888
One context created our problem,
two contexts is our way out, right?

41
00:02:46.888 --> 00:02:50.370
Cuz we don't mind things
rerendering when things change,

42
00:02:50.370 --> 00:02:52.676
that is what is React is supposed to do.

43
00:02:52.676 --> 00:02:56.523
That's why it is rerendering,
because things change, that it has to put.

44
00:02:56.523 --> 00:02:59.543
Rerenderings are not bad in and
of themselves,

45
00:02:59.543 --> 00:03:02.348
they're just bad when we don't want them.

46
00:03:02.348 --> 00:03:06.439
So things like the items list
changing when the items change.

47
00:03:06.439 --> 00:03:12.740
Okay, right on, the items changed,
please show that in the UI to me, love it.

48
00:03:12.740 --> 00:03:16.227
The things that just rely on dispatch,
well, that seems silly.

49
00:03:16.227 --> 00:03:21.579
So yes, the answer to all
the problems that one context solved,

50
00:03:21.579 --> 00:03:23.374
it's two contexts.

51
00:03:23.374 --> 00:03:29.174
One for the things that change, and one
for the things that don't change, right?

52
00:03:29.174 --> 00:03:35.070
If that hurts your feelings,
that's good, yeah, that's valid.

53
00:03:35.070 --> 00:03:39.776
&gt;&gt; So by then, we will need to wrap each
individual component with the context

54
00:03:39.776 --> 00:03:43.520
that the one that changes to
prevent the same thing, or no?

55
00:03:43.520 --> 00:03:46.803
&gt;&gt; Well, so we already have this
abstraction here that is taking one

56
00:03:46.803 --> 00:03:50.156
context and wrapping children,
which is the whole application.

57
00:03:50.156 --> 00:03:55.173
And are you all familiar
with the turducken, right?

58
00:03:55.173 --> 00:04:00.998
We can just keep it's a turkey,
a duck, and a chicken, all in one dish.

59
00:04:02.757 --> 00:04:08.728
And what we can do is basically
take the same approach, And

60
00:04:08.728 --> 00:04:10.495
try some dark move like this.

61
00:04:12.290 --> 00:04:15.226
I don't even know what
they name stuff anymore.

62
00:04:15.226 --> 00:04:18.687
ActionContext, cool, cool, cool.

63
00:04:20.873 --> 00:04:27.658
Now for the items,
That's just gonna be passing through.

64
00:04:27.658 --> 00:04:29.107
And then what we do,

65
00:04:42.135 --> 00:04:45.597
This is now a static value
that is never gonna change.

66
00:04:48.453 --> 00:04:53.185
Right, and so now the important
tasting note that I wanna call

67
00:04:53.185 --> 00:04:56.189
out is the order is important, right?

68
00:04:56.189 --> 00:05:00.728
Because all parents trigger
rerenders on their children, right?

69
00:05:00.728 --> 00:05:03.057
So we're gonna put the one
that doesn't change,

70
00:05:04.420 --> 00:05:05.969
Outside of the one that does change.

71
00:05:05.969 --> 00:05:11.465
That's the same way that we
pushed down the changes earlier.

72
00:05:11.465 --> 00:05:16.407
We're doing that here now, effectively,
which is the one that doesn't change is

73
00:05:16.407 --> 00:05:19.174
going to be inside of
the one that does change.

74
00:05:19.174 --> 00:05:20.952
Yeah, could you memoize them?

75
00:05:20.952 --> 00:05:23.499
Yes, I can, I don't want to, right?

76
00:05:23.499 --> 00:05:27.159
That doing stuff as fast
as I'm doing stuff.

77
00:05:27.159 --> 00:05:31.534
So we've got those in place.

78
00:05:31.534 --> 00:05:35.572
And now I have two, so
now instead of useContext,

79
00:05:35.572 --> 00:05:39.624
if you need the items,
you use the ItemsContext.

80
00:05:39.624 --> 00:05:45.183
And if you need the actions,
you use the ActionsContext, right?

81
00:05:45.183 --> 00:05:49.246
And let's try it out, and
we'll go into the individual item.

82
00:05:49.246 --> 00:05:51.729
Now we should be able to just
swap this one out, at least.

83
00:05:54.525 --> 00:05:55.818
And pull that in.

84
00:05:58.908 --> 00:06:00.191
What you're mad about?

85
00:06:00.191 --> 00:06:01.840
I mean, there's plenty to be mad about.

86
00:06:04.547 --> 00:06:07.969
Header's mad, I don't really care.

87
00:06:07.969 --> 00:06:11.881
Cuz they're pulling on,
they're deconstructing object before, so

88
00:06:11.881 --> 00:06:14.957
I can't just change it in one place,
that makes sense.

89
00:06:14.957 --> 00:06:20.115
This is now just pulling
out the regular old items.

90
00:06:20.115 --> 00:06:25.085
And did I see, only other place, yeah.

91
00:06:27.971 --> 00:06:34.235
Dispatch is not a function, I left
also the deconstructing here as well.

92
00:06:34.235 --> 00:06:39.360
The express purpose was not to
make new objects, so lets falter.

93
00:06:39.360 --> 00:06:45.005
And you look,
all of my performance gains are back,

94
00:06:45.005 --> 00:06:47.840
but at what cost, right?

95
00:06:47.840 --> 00:06:50.370
We can make it a little bit better, right?

96
00:06:50.370 --> 00:06:55.962
I have a rule, which is,
sometimes we have to do bad things.

97
00:06:55.962 --> 00:06:58.570
And what do we do when we do bad things?

98
00:06:58.570 --> 00:07:01.208
We cover them up, [LAUGH] right?

99
00:07:01.208 --> 00:07:05.289
If you do bad thing in your code base and
you cover it up, it's okay.

100
00:07:05.289 --> 00:07:06.414
I have bad news for you,

101
00:07:06.414 --> 00:07:09.802
there's electrons going through
copper wires in this thing, right?

102
00:07:09.802 --> 00:07:13.674
This is all [LAUGH] built on top of
a pile of lies and obstructions, so

103
00:07:13.674 --> 00:07:15.898
obstructions are just lies, right?

104
00:07:15.898 --> 00:07:20.869
And so that's what's happening here,
it's just complexity of electrons,

105
00:07:20.869 --> 00:07:23.969
I don't even know how Wi-Fi works,
honestly.

106
00:07:23.969 --> 00:07:27.432
So all of that, and so what I would do in
this case, if that hurts your feelings,

107
00:07:27.432 --> 00:07:30.518
you need two different contexts, and
then have to keep track of this.

108
00:07:30.518 --> 00:07:35.265
And if you have a suspicion that
this is going to get out of hand,

109
00:07:35.265 --> 00:07:37.605
of course it is, [LAUGH] right?

110
00:07:37.605 --> 00:07:39.660
It's absolutely gonna get out of hand.

111
00:07:39.660 --> 00:07:43.599
So what I do usually, and
I would highly recommend this, and

112
00:07:43.599 --> 00:07:46.235
where you put it, I don't really care.

113
00:07:47.790 --> 00:07:51.706
Which is, you cover the bad
thing that you did up, right?

114
00:07:51.706 --> 00:07:57.113
UseItems, And useItems is great.

115
00:07:57.113 --> 00:08:02.283
useItems is gonna do useContext,
it's gonna take the ItemsContext,

116
00:08:10.193 --> 00:08:12.715
Return those items, and we'll export this.

117
00:08:16.481 --> 00:08:19.893
And then we'll go ahead and say,

118
00:08:27.705 --> 00:08:32.834
The records show that I can type,
it's just I don't normally stand and

119
00:08:32.834 --> 00:08:36.609
work like this for
several hours in front of people.

120
00:08:36.609 --> 00:08:41.567
So here we'll say, const dispatch.

121
00:08:41.567 --> 00:08:46.134
= useContext, that ActionsContext.

122
00:08:47.214 --> 00:08:52.034
Let's say we can do all that,
that should do the trick.

123
00:08:52.034 --> 00:08:56.733
I don't need to wrap this one to use
callback cuz it is the same value.

124
00:08:56.733 --> 00:09:00.637
Just doing that might make me feel good,
but it should be the same value,

125
00:09:00.637 --> 00:09:01.534
no matter what.

126
00:09:01.534 --> 00:09:07.129
And so, to say make sure this is the same
value when it's already the same value,

127
00:09:07.129 --> 00:09:09.370
is not doing anyone any favors.

128
00:09:09.370 --> 00:09:12.103
This one,
I'm a little more on the fence about.

129
00:09:12.103 --> 00:09:15.578
Because it's almost always gonna
change if it ever gets called,

130
00:09:15.578 --> 00:09:17.421
it's like the opposite problem.

131
00:09:17.421 --> 00:09:18.801
This will always be the same.

132
00:09:18.801 --> 00:09:22.921
And this one is the literal only
[LAUGH] business logic thing in my app.

133
00:09:22.921 --> 00:09:26.798
So I could wrap it, and
it will always get invalidated, right?

134
00:09:26.798 --> 00:09:28.578
Like two sides of the same coin.

135
00:09:28.578 --> 00:09:33.878
And so now,
I can go inside my application,

136
00:09:33.878 --> 00:09:37.038
and we'll swap this out.

137
00:09:37.038 --> 00:09:39.510
This is not a performance
talk anymore at this moment.

138
00:09:39.510 --> 00:09:45.701
This is simply hiding the stuff you did
in the name of performance from yourself.

139
00:09:45.701 --> 00:09:50.122
Right, and so now we've got that in place,
and now in the individual item.

140
00:09:55.768 --> 00:09:57.630
Did I export the second one?

141
00:09:57.630 --> 00:09:59.157
&gt;&gt; I think was useDispatch.

142
00:09:59.157 --> 00:10:01.551
&gt;&gt; useDispatch, no.

143
00:10:01.551 --> 00:10:05.101
[LAUGH] That means the thing.

144
00:10:05.101 --> 00:10:09.084
There's a reason why I should do that,
that's smart, I should do that.

145
00:10:09.084 --> 00:10:11.379
The literal words that I was about to say.

146
00:10:11.379 --> 00:10:14.788
The nice thing about doing this
is that if you ever decide,

147
00:10:14.788 --> 00:10:19.748
the question before is like, at what point
do I go from useReducer to Redux, right?

148
00:10:19.748 --> 00:10:23.962
Now that I've given myself these
abstractions and these hooks,

149
00:10:23.962 --> 00:10:25.119
whenever I want.

150
00:10:25.119 --> 00:10:28.416
Cuz I would just change one file and
get all the new ones.

151
00:10:28.416 --> 00:10:31.547
This way used to especially be good, cuz
React Redux has that useDispatch thing.

152
00:10:31.547 --> 00:10:35.818
And it gives you a dispatch, that would
have been smart, I should have done that.

153
00:10:35.818 --> 00:10:40.100
And now it doesn't take an argument,
or if it does, it ignores it.

154
00:10:40.100 --> 00:10:45.281
And so, if you need to do this,
and again, now, to be clear,

155
00:10:45.281 --> 00:10:50.567
if the problem with using the context
API was we lost all those,

156
00:10:50.567 --> 00:10:52.884
the rerendering support.

157
00:10:52.884 --> 00:10:57.247
Well, we got it back, and the cost
of getting it back was complexity.

158
00:10:57.247 --> 00:11:00.680
We did just hide the complexity
in one place, right?

159
00:11:00.680 --> 00:11:02.270
I don't know, like,
look at the React source code.

160
00:11:02.270 --> 00:11:05.291
There is complexity lying around,
and it was just hidden from you,

161
00:11:05.291 --> 00:11:07.845
you didn't have a problem
with until you saw it, right?

162
00:11:07.845 --> 00:11:09.440
So here's the thing that you can do.

163
00:11:09.440 --> 00:11:11.029
And again, it's all sort of trade offs.

164
00:11:11.029 --> 00:11:14.780
Now this is a thing that you own,
[LAUGH] right?

165
00:11:14.780 --> 00:11:18.892
And so, yeah, that is there as well,
and a thing to consider.

166
00:11:18.892 --> 00:11:20.428
Was one question here.

167
00:11:20.428 --> 00:11:21.808
Okay, can I show the profiler now?

168
00:11:21.808 --> 00:11:22.838
Yes, I can.

169
00:11:22.838 --> 00:11:24.443
And then there was another question.

170
00:11:24.443 --> 00:11:26.213
Let's look at the profiler.

171
00:11:26.213 --> 00:11:28.762
Let's do some recording.

172
00:11:28.762 --> 00:11:32.050
And we'll move some things.

173
00:11:32.050 --> 00:11:35.713
And then, I keep right clicking for
some reason.

174
00:11:35.713 --> 00:11:38.879
So you can see that
they are not rendering.

175
00:11:38.879 --> 00:11:42.674
These extra stacks are my new providers,

176
00:11:42.674 --> 00:11:46.693
which are in existence, right, totally.

177
00:11:46.693 --> 00:11:52.439
But you can see that the kinda
core piece here is fine, right?

178
00:11:52.439 --> 00:11:56.926
And less than 0.1 ms,

179
00:11:56.926 --> 00:12:02.510
0.1 ms, I am okay with that,
[LAUGH] right?

180
00:12:02.510 --> 00:12:06.324
It's not like stop renders at all costs,
right?

181
00:12:06.324 --> 00:12:09.790
It is about making sure that you
don't have more than you need.

182
00:12:09.790 --> 00:12:15.128
Sure, but
I gained not having to pass stuff through.

183
00:12:15.128 --> 00:12:20.411
I can probably take the React.memo
off of the items list now.

184
00:12:20.411 --> 00:12:24.172
Since it's only ever getting
the items which are changing,

185
00:12:24.172 --> 00:12:27.941
it's not getting needless
things pass through it anymore.

186
00:12:27.941 --> 00:12:34.420
So yeah, I got some contexts
now that are rerendering.

187
00:12:34.420 --> 00:12:37.437
Sure, seems good, I'm into it, right?

188
00:12:37.437 --> 00:12:39.921
And so I think that that works, okay.

189
00:12:39.921 --> 00:12:42.179
One glance to the chat real quick.

190
00:12:42.179 --> 00:12:48.194
So a question on your question that
you've passed children to component,

191
00:12:48.194 --> 00:12:50.871
the children calculated first.

192
00:12:50.871 --> 00:12:55.431
How would they be able to access context
values when they're getting calculated

193
00:12:55.431 --> 00:12:57.183
before the context provider?

194
00:12:57.183 --> 00:12:59.401
Do they fall back to
the default context values?

195
00:12:59.401 --> 00:13:00.746
I mean, they get updated, right?

196
00:13:00.746 --> 00:13:03.122
There's the very first time where
they might get the first value.

197
00:13:03.122 --> 00:13:06.307
But they will quickly,
when those state changes happen,

198
00:13:06.307 --> 00:13:08.127
they are hooking into that prop.

199
00:13:08.127 --> 00:13:12.411
It is like they are reading from it at
that time, and getting those updates.

200
00:13:12.411 --> 00:13:17.103
Cuz that is, again, it's that secret prop
thing where it is a prop is passed to all

201
00:13:17.103 --> 00:13:21.396
of them through this API that runs kind
of aside the normal hierarchy tree.

202
00:13:21.396 --> 00:13:24.126
That's why the context API exists, right?

203
00:13:24.126 --> 00:13:29.915
It's to kinda give us that thread that
it binds all components together.

204
00:13:29.915 --> 00:13:33.439
It's like the Force, but for
components, and triggers rerenders,

205
00:13:33.439 --> 00:13:35.118
that's not what the Force does.

206
00:13:35.118 --> 00:13:39.486
But it will then, those things
are what triggers those updates and

207
00:13:39.486 --> 00:13:42.374
renders from that,
cuz it counts as a prop.

208
00:13:42.374 --> 00:13:47.210
And so, it being its own special API
does have some special rules around it.

209
00:13:48.590 --> 00:13:53.053
Another question, do we need to put the
provider with a context that won't change

210
00:13:53.053 --> 00:13:55.916
over provider with the context that will,
and why?

211
00:13:55.916 --> 00:13:58.128
So I don't really know.

212
00:13:58.128 --> 00:14:01.236
So it was one of the things I
was thinking about, which is,

213
00:14:01.236 --> 00:14:04.798
it is a thing that I did the very
first time cuz I have always done it.

214
00:14:04.798 --> 00:14:11.707
So the question is, I said, put the one
that doesn't change outside first, right?

215
00:14:11.707 --> 00:14:15.745
But then I was thinking about that chat
we just had about children get pulled up.

216
00:14:15.745 --> 00:14:20.628
I was like, have I just been doing
that for the last several years?

217
00:14:20.628 --> 00:14:25.708
Because I thought it in the year 2018 and
have just done it every time.

218
00:14:25.708 --> 00:14:28.039
The order might not matter
as much as I thought,

219
00:14:28.039 --> 00:14:31.256
as I was saying those words the very
first time out loud to people.

220
00:14:31.256 --> 00:14:35.512
Because yeah, we talked about the content
gets pulled up and they might render.

221
00:14:35.512 --> 00:14:37.651
But it's definitely worth
the experimentation.

