WEBVTT

1
00:00:00.022 --> 00:00:03.753
As I just joked, we're gonna take
the more perilous ones to live code.

2
00:00:03.753 --> 00:00:06.469
We'll do it at the end, yeah.

3
00:00:06.469 --> 00:00:07.787
Go out with a bang.

4
00:00:07.787 --> 00:00:11.786
So this is one of the newest
APIs in React 18.

5
00:00:11.786 --> 00:00:15.513
And if suspense is one where
it's either background fetching,

6
00:00:15.513 --> 00:00:19.032
getting rid of a loaded route,
and stuff along those lines,

7
00:00:19.032 --> 00:00:21.900
is a great way to build
a strategy around it.

8
00:00:21.900 --> 00:00:24.674
This one is definitely if you need it,
right?

9
00:00:24.674 --> 00:00:29.565
It's not like I would not, but there's
a powerful concept that solves a bunch

10
00:00:29.565 --> 00:00:32.688
of issues which is, so
I have got this large list.

11
00:00:32.688 --> 00:00:38.020
It's got 10,000 items,
it's filtering and sorting them.

12
00:00:38.020 --> 00:00:41.596
It might be intentionally slowed down
a little bit because this is a very fancy

13
00:00:41.596 --> 00:00:42.710
MacBook.

14
00:00:42.710 --> 00:00:46.860
If you throw out your computer,
you get it nice and painful, right?

15
00:00:47.960 --> 00:00:51.153
It's big, and sometimes it is.

16
00:00:51.153 --> 00:00:53.069
There's an example on
the use of the doctors.

17
00:00:53.069 --> 00:00:56.157
It's one of those things that
does a whole network graph and

18
00:00:56.157 --> 00:00:59.710
shows you all the related nodes and
charts out an entire thing.

19
00:00:59.710 --> 00:01:04.455
There are tons of times where there is
something that it is computationally

20
00:01:04.455 --> 00:01:05.820
expensive, right?

21
00:01:07.450 --> 00:01:10.826
Sometimes, it's like, all right,
let's whip it out to a web worker and

22
00:01:10.826 --> 00:01:14.110
stuff like that, but that comes with
its own sets of problems, right?

23
00:01:14.110 --> 00:01:16.460
There's some things that you
can't necessarily do, right?

24
00:01:16.460 --> 00:01:18.519
There's some times what your
infrastructure will constrain

25
00:01:18.519 --> 00:01:19.080
you on, right?

26
00:01:19.080 --> 00:01:22.179
There are lots of different
trade-offs that you have to make.

27
00:01:23.700 --> 00:01:28.905
And one of the problems
earlier in React 17 and

28
00:01:28.905 --> 00:01:36.076
before is that when you triggered
a render, it was synchronous.

29
00:01:36.076 --> 00:01:39.989
It's still synchronous,
but it would trigger and

30
00:01:39.989 --> 00:01:45.730
it would go through and if it was
blocking, we had a problem, right?

31
00:01:45.730 --> 00:01:51.313
And one of the things that the concurrency
model in modern React and React 18 and

32
00:01:51.313 --> 00:01:56.976
later brings is at least this idea, and
I kind of mentioned this in the beginning,

33
00:01:56.976 --> 00:02:00.940
of, well, if everything's urgent,
then nothing is.

34
00:02:00.940 --> 00:02:03.980
And if nothing's urgent,
then everything is, right?

35
00:02:03.980 --> 00:02:10.024
And so really one of the most core
things that it brings is this idea.

36
00:02:10.024 --> 00:02:14.520
It's not that you can say
that this is urgent, but

37
00:02:14.520 --> 00:02:19.461
you can say that something
else is not urgent, right?

38
00:02:19.461 --> 00:02:21.713
There was a really great question
at the beginning of like,

39
00:02:21.713 --> 00:02:24.000
should we debounce inputs all the time,
right?

40
00:02:24.000 --> 00:02:27.540
And it's like,
there's nuance to that question, right?

41
00:02:28.580 --> 00:02:29.962
There's a lot of stuff like,

42
00:02:29.962 --> 00:02:32.775
should you debounce the network
calls that an input makes?

43
00:02:32.775 --> 00:02:37.330
Yes, right, especially if
they're typing a lot in a field,

44
00:02:37.330 --> 00:02:39.879
you don't wanna slam the server.

45
00:02:39.879 --> 00:02:42.417
You might get four twenty nined, right?

46
00:02:42.417 --> 00:02:44.410
There's lots of reasons
why you could do that.

47
00:02:44.410 --> 00:02:48.260
If you're gonna fill a large
list of 10,000 things,

48
00:02:48.260 --> 00:02:51.300
you might choose to debounce it, right?

49
00:02:51.300 --> 00:02:55.013
But with a lot of the ways that our
hooks are working of like, yeah,

50
00:02:55.013 --> 00:02:59.254
this triggers this thing and then effect
goes off and stuff along those lines.

51
00:02:59.254 --> 00:03:01.550
That can get a little bit gnarly as well.

52
00:03:01.550 --> 00:03:05.014
And the idea that React itself,
once it starts,

53
00:03:05.014 --> 00:03:08.660
doesn't really have a great
way to handle things.

54
00:03:08.660 --> 00:03:13.648
And this is part of the reason why
the concurrency model in React 18 exists,

55
00:03:13.648 --> 00:03:14.196
right?

56
00:03:14.196 --> 00:03:19.394
And it's this idea to say,
non-urgent things can and

57
00:03:19.394 --> 00:03:26.973
should be either paused, stopped, thrown
away if a new urgent thing comes in.

58
00:03:26.973 --> 00:03:31.277
And so that we can prioritize that not
all user actions and not all events and

59
00:03:31.277 --> 00:03:34.520
not all state changes are created equal,
right?

60
00:03:34.520 --> 00:03:38.300
And then we can say, these things
are important but less important.

61
00:03:38.300 --> 00:03:41.036
So if I go back to this example over here,

62
00:03:41.036 --> 00:03:44.743
this is literally because
we had that great question.

63
00:03:44.743 --> 00:03:46.113
We talked about this a little
bit in the beginning.

64
00:03:46.113 --> 00:03:47.790
It makes my job easier now.

65
00:03:47.790 --> 00:03:53.603
Showing the user feedback
that they typed in the box,

66
00:03:53.603 --> 00:03:56.582
critical, right, it is.

67
00:03:56.582 --> 00:04:02.461
I built the app to be intentionally slow
and needed it to be slow to make a point,

68
00:04:02.461 --> 00:04:06.040
and still got annoyed when it was slow,
right?

69
00:04:06.040 --> 00:04:07.838
Yeah, but I typed a thing,

70
00:04:07.838 --> 00:04:12.620
and it wasn't showing up is both what
I wanted and frustrating, right?

71
00:04:12.620 --> 00:04:17.160
It's like that old thing, which is bad
Internet is worse than no Internet.

72
00:04:17.160 --> 00:04:19.691
Unreliable Wi-Fi is worse than
just not having the Internet.

73
00:04:19.691 --> 00:04:22.300
Not having the internet,
you go read a book, right?

74
00:04:22.300 --> 00:04:26.945
Having spotty Wi-Fi,
you will get very angry.

75
00:04:26.945 --> 00:04:29.636
And we're very used to sometimes,

76
00:04:29.636 --> 00:04:34.938
especially if it has a network request,
seeing a loading indicator.

77
00:04:34.938 --> 00:04:37.302
Yeah, we want that to be as
fast as possible, obviously.

78
00:04:38.861 --> 00:04:43.175
But when I typed a letter,
it not showing up on the screen and

79
00:04:43.175 --> 00:04:48.096
getting that little happy beach
ball that macOS still has, right,

80
00:04:48.096 --> 00:04:50.702
and stuff like that, is not great.

81
00:04:50.702 --> 00:04:53.490
Or locking up the main thread completely,
it isn't great.

82
00:04:54.510 --> 00:04:58.684
So this idea that there is now
kind of the primitives and

83
00:04:58.684 --> 00:05:02.224
the infrastructure within React to say,
yo,

84
00:05:02.224 --> 00:05:07.882
showing the actual updated list,
especially if they're still typing.

85
00:05:07.882 --> 00:05:11.451
It's not important to show
them the thing they asked for.

86
00:05:11.451 --> 00:05:14.320
It's saying,
actually catching the characters and

87
00:05:14.320 --> 00:05:16.942
getting them there is
probably more important.

88
00:05:16.942 --> 00:05:21.629
And kind of building on some of the
primitives to cancel stuff, so on and so

89
00:05:21.629 --> 00:05:22.698
forth, right?

90
00:05:22.698 --> 00:05:26.100
This stuff has existed.

91
00:05:26.100 --> 00:05:27.906
We did a course on RxJS a while back.

92
00:05:27.906 --> 00:05:32.096
And in observables,
there is this concept of cancellation and

93
00:05:32.096 --> 00:05:33.922
doing all sorts of things.

94
00:05:33.922 --> 00:05:36.370
And just ignore that,
we moved on to this new version.

95
00:05:36.370 --> 00:05:40.390
They typed a letter again, abandon that
stream, shift over to the next one.

96
00:05:40.390 --> 00:05:41.550
These ideas exist.

97
00:05:41.550 --> 00:05:47.806
They just weren't fundamentally in
the 2013 version of React, right?

98
00:05:47.806 --> 00:05:52.678
It's one thing to then do them fresh, but
then also how do you migrate and keep?

99
00:05:52.678 --> 00:05:56.859
How do you not rewrite React in the
process or at least on a fundamentally,

100
00:05:56.859 --> 00:06:00.919
on API level and end up with a new
framework, so on and so forth, right?

101
00:06:00.919 --> 00:06:05.431
And so we have a lot of us now in React
18, and we'll show it in this example.

102
00:06:05.431 --> 00:06:09.308
And it's definitely like,
should you immediately go and

103
00:06:09.308 --> 00:06:12.955
find a thing that you should
do it in your app tomorrow?

104
00:06:12.955 --> 00:06:13.470
No, you should not.

105
00:06:14.840 --> 00:06:17.040
Some point, there will be a problem.

106
00:06:17.040 --> 00:06:21.529
Everyone's debating about a whole
bunch of terrible solutions and

107
00:06:21.529 --> 00:06:23.662
you will be like, [LAUGH] right?

108
00:06:23.662 --> 00:06:24.520
You will be the hero of the day.

