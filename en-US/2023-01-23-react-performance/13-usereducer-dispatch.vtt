WEBVTT

1
00:00:00.234 --> 00:00:05.107
This is where another thought exercise
that literally considered and thought

2
00:00:05.107 --> 00:00:09.995
about and then opted not to do, because
I think that it's probably a bad idea.

3
00:00:09.995 --> 00:00:15.486
So these packed and unpacked items
are generated on the fly, right?

4
00:00:15.486 --> 00:00:20.156
They're generated from taking the overall
list and you filter them, right?

5
00:00:20.156 --> 00:00:24.607
If there were a lot of changes that
didn't involve them moving back and

6
00:00:24.607 --> 00:00:29.433
forth between the two lists, right,
one thing I could do is I could wire up my

7
00:00:29.433 --> 00:00:32.847
state management in a way
that had two lists, right?

8
00:00:32.847 --> 00:00:36.402
And then I would manually have to
shuffle them back and forth, right?

9
00:00:36.402 --> 00:00:39.908
And you'd want some unit tests with that,
even in that simple example,

10
00:00:39.908 --> 00:00:41.005
you want to unit test.

11
00:00:41.005 --> 00:00:45.312
And then I could then memorize or
have things based on each of those.

12
00:00:45.312 --> 00:00:50.320
But then I'd have to have each of those
add, update, and remove functions.

13
00:00:50.320 --> 00:00:54.810
And I would have to do the act of
shuffling them back and forth.

14
00:00:54.810 --> 00:00:58.660
And sometimes, one, I don't actually
know of all that extra work and

15
00:00:58.660 --> 00:01:03.260
having double of everything and following
stuff back and forth is worth it.

16
00:01:03.260 --> 00:01:06.827
And two, the complexity cost is
also probably not worth it for

17
00:01:06.827 --> 00:01:09.180
almost no performance gain, right?

18
00:01:09.180 --> 00:01:13.768
But again, you have options, and
to always reach for one thing blindly,

19
00:01:13.768 --> 00:01:17.330
is probably at least slightly problematic,
right?

20
00:01:17.330 --> 00:01:20.993
But you can also again, you can get
a look at that flame chart and be like,

21
00:01:20.993 --> 00:01:23.336
are the things that I'm
expecting to render or

22
00:01:23.336 --> 00:01:26.630
rerender actually doing that in this case,
right.

23
00:01:26.630 --> 00:01:31.617
One thing I'm curious about too,
just to look real quick,

24
00:01:31.617 --> 00:01:35.420
is I would expect
an individual item isn't.

25
00:01:37.100 --> 00:01:39.683
They're getting a new update and remove.

26
00:01:39.683 --> 00:01:42.050
So, could we make this better?

27
00:01:42.050 --> 00:01:43.400
I think we could.

28
00:01:43.400 --> 00:01:44.523
Let's do it.

29
00:01:44.523 --> 00:01:50.080
All right, as I said before, we're getting
the update if we pass either set items or

30
00:01:50.080 --> 00:01:53.447
dispatch all the way through,
those stay static,

31
00:01:53.447 --> 00:01:56.442
they don't get regenerated based on items.

32
00:01:56.442 --> 00:01:59.690
All right, but then the problem
with passing set items through,

33
00:01:59.690 --> 00:02:00.760
is what does it need?

34
00:02:03.930 --> 00:02:05.745
I mean, theoretically,
it needs a list of items,

35
00:02:05.745 --> 00:02:07.109
unless we use the function callback.

36
00:02:07.109 --> 00:02:07.790
So let's do it.

37
00:02:07.790 --> 00:02:10.405
I could do it either way.

38
00:02:10.405 --> 00:02:11.680
We'll get the same effect.

39
00:02:11.680 --> 00:02:16.270
Let's do it with a reducer, but also
using the function callback would work.

40
00:02:16.270 --> 00:02:16.770
So check it out.

41
00:02:17.920 --> 00:02:22.254
It's almost like I had pre baked reducer,
it does all the things that you think,

42
00:02:22.254 --> 00:02:26.070
it adds stuff, it removes stuff,
so on and so forth.

43
00:02:26.070 --> 00:02:31.850
So in this case, what we'll do is
we'll change this to, Use reducer.

44
00:02:39.146 --> 00:02:43.847
We'll give it that get initial items,
Which is

45
00:02:43.847 --> 00:02:45.460
literally just returning a JSON array.

46
00:02:45.460 --> 00:02:47.331
I don't even know why it's a function.

47
00:02:47.331 --> 00:02:49.504
And so this becomes called Items.

48
00:02:52.388 --> 00:02:54.475
Yep and we'll call it dispatch now.

49
00:02:54.475 --> 00:02:59.440
Now, dispatch just fires actions.

50
00:02:59.440 --> 00:03:02.050
It doesn't actually need to know
what the current items are.

51
00:03:02.050 --> 00:03:05.140
It's just saying, hey, this item,
we're toggling it, right?

52
00:03:05.140 --> 00:03:08.700
And the reducer gets everything and
figures it all out, right?

53
00:03:08.700 --> 00:03:12.700
As we know that setItems, if we still
had it, you could do this as well.

54
00:03:12.700 --> 00:03:17.506
It's really, setState being a, or
useState being an abstraction over

55
00:03:17.506 --> 00:03:22.880
useReducer it's not even to call them
different things, they do do either way.

56
00:03:22.880 --> 00:03:25.250
It's different flavors of the same way.

57
00:03:25.250 --> 00:03:29.969
This would give you a reference to the
current items that you would not have to

58
00:03:29.969 --> 00:03:30.938
pass through.

59
00:03:30.938 --> 00:03:34.790
But then, again, I know you could do it,
you could do it for some of these and

60
00:03:34.790 --> 00:03:37.030
make it all kind of happen, right?

61
00:03:37.030 --> 00:03:40.853
I'll leave that one the use reducer,
because it's just different and

62
00:03:40.853 --> 00:03:44.020
I can make a point and
you can do some of the items here.

63
00:03:44.020 --> 00:03:47.518
So now we're gonna pass dispatch all
the way through, which means really,

64
00:03:47.518 --> 00:03:49.770
I get to do one of my
favorite things in the world.

65
00:03:51.150 --> 00:03:52.506
Can't delete the two lists.

66
00:03:57.857 --> 00:04:03.432
That one, and we can see that instead
of passing all these things through,

67
00:04:03.432 --> 00:04:05.215
we literally just say.

68
00:04:11.801 --> 00:04:12.360
Awesome.

69
00:04:13.780 --> 00:04:15.440
Do it here as well.

70
00:04:15.440 --> 00:04:19.139
I'll pass it to the others and probably
only to do the two lists in front of us

71
00:04:19.139 --> 00:04:21.270
because it's just variations on a theme.

72
00:04:23.100 --> 00:04:26.480
So pass it item list, in item list,

73
00:04:26.480 --> 00:04:32.020
we will go ahead really didn't
need that at another time.

74
00:04:32.020 --> 00:04:32.810
I wouldn't know the pain.

75
00:04:34.950 --> 00:04:38.669
We'll swap out the fact that we're
given an update and remove and

76
00:04:38.669 --> 00:04:42.090
we just give it that regular old dispatch.

77
00:04:42.090 --> 00:04:45.160
And notice I got rid of all those
use callbacks that I wrote,

78
00:04:45.160 --> 00:04:46.460
they're gone, right?

79
00:04:46.460 --> 00:04:49.900
So by definition, this is going
to be slightly better for us.

80
00:04:51.110 --> 00:04:54.080
And then the individual item,
setting an update and

81
00:04:54.080 --> 00:04:59.890
remove I literally have on my clipboard.

82
00:05:00.940 --> 00:05:03.520
Cool, and then we'll go down one,
one deeper.

83
00:05:04.660 --> 00:05:05.352
Get rid of it again.

84
00:05:11.004 --> 00:05:16.400
Now in so far that I'm very lazy,
the action creators have the same names.

85
00:05:16.400 --> 00:05:17.376
So I just need to import them

86
00:05:27.567 --> 00:05:29.730
So now the only thing
coming through is dispatch.

87
00:05:30.800 --> 00:05:36.711
So that now wraps each of these,
these will dispatch those objects.

88
00:05:41.484 --> 00:05:45.349
It doesn't need to know anything about the
items, it's just telling the reducer hey,

89
00:05:45.349 --> 00:05:48.455
they said they wanted to
remove the one with this ID.

90
00:05:48.455 --> 00:05:51.034
Reducer is like, yo I got all the items,
I'll figure it out.

91
00:05:54.487 --> 00:05:57.996
I think that I'm accidentally getting
myself the reputation as a reducer fanboy,

92
00:05:57.996 --> 00:05:58.905
and I'm here for it.

93
00:06:00.405 --> 00:06:01.065
I don't have a problem.

94
00:06:02.885 --> 00:06:03.945
So let's check it out.

95
00:06:05.245 --> 00:06:08.055
You see that I don't have the individual
items flashing anymore, and

96
00:06:08.055 --> 00:06:09.398
we'll verify that in the tools.

97
00:06:15.277 --> 00:06:16.330
Right, sure.

98
00:06:16.330 --> 00:06:19.970
The first time it was rendered,
probably once it changed.

99
00:06:19.970 --> 00:06:21.996
But you can see at this point
it is not rerendering them,

100
00:06:21.996 --> 00:06:24.360
because they're getting the same dispatch.

101
00:06:24.360 --> 00:06:25.710
They are the same item in memory.

102
00:06:25.710 --> 00:06:28.410
Because you just changed something,
the array is different.

103
00:06:28.410 --> 00:06:32.960
All of the objects in that array are the
same ones unless you change them, right?

104
00:06:32.960 --> 00:06:35.910
That's part of the promise of
the immutability, it's the same object.

105
00:06:35.910 --> 00:06:36.820
So that was fine.

106
00:06:36.820 --> 00:06:38.409
Just because it was a new
array full of objects,

107
00:06:38.409 --> 00:06:39.890
doesn't mean the objects were different.

108
00:06:39.890 --> 00:06:42.100
It's just a new box that they're in.

109
00:06:42.100 --> 00:06:45.757
And so we got rid of all the use
callbacks that we just installed.

110
00:06:45.757 --> 00:06:50.786
All we have is that react memo
that we had in the very beginning.

111
00:06:50.786 --> 00:06:54.716
And yet we actually stopped
an entirely additional,

112
00:06:54.716 --> 00:06:58.995
removing a use callback and
taking a different approach,

113
00:06:58.995 --> 00:07:03.290
was more performant than
using the useCallback, right?

114
00:07:03.290 --> 00:07:06.271
And that's kind of a running theme
that we have today, which is sure,

115
00:07:06.271 --> 00:07:08.020
these tools are great.

116
00:07:08.020 --> 00:07:10.500
But are they the best one, right?

117
00:07:10.500 --> 00:07:12.540
Sometimes they are the right one.

118
00:07:12.540 --> 00:07:16.155
Sometimes the trade offs are worth it,
but just being like,

119
00:07:16.155 --> 00:07:20.650
you have to do this blindly every time,
is maybe not always the best way forward.

120
00:07:22.980 --> 00:07:24.608
And we could do it with that items too.

121
00:07:24.608 --> 00:07:32.131
Right, Let's go for a quick bonus round.

122
00:07:34.300 --> 00:07:35.425
So we had use state.

123
00:07:40.935 --> 00:07:44.305
That should give us what they get initial
items that we put in a function because we

124
00:07:44.305 --> 00:07:45.556
learned something earlier.

125
00:07:48.399 --> 00:07:49.631
This is now set items.

126
00:07:53.843 --> 00:07:55.859
So in this case we'll now change this.

127
00:08:02.181 --> 00:08:03.587
The joke I made the other day,

128
00:08:03.587 --> 00:08:06.523
which is anywhere near tax
developers because multi cursor.

129
00:08:10.214 --> 00:08:12.953
And if you hit some of the ones I didn't
fully wire up the dispatch they will

130
00:08:12.953 --> 00:08:14.080
break, so just don't hit them.

131
00:08:16.640 --> 00:08:21.845
Cool, you can pass all these through,

132
00:08:21.845 --> 00:08:28.467
now what we should be able
to do as I go off roading,

133
00:08:28.467 --> 00:08:35.128
is swap it in here And these are gonna

134
00:08:35.128 --> 00:08:39.430
be slightly different now, I have those
helper functions that we're using.

135
00:08:39.430 --> 00:08:40.810
So this is what update items.

136
00:08:43.967 --> 00:08:49.065
This now gets, we'll give
the function version where it's like

137
00:08:49.065 --> 00:08:56.160
all the items And
that takes all the items.

138
00:08:56.160 --> 00:09:00.765
The reason I wrote these in
TypeScript was that I could

139
00:09:00.765 --> 00:09:03.646
have help the current Item.id.

140
00:09:03.646 --> 00:09:09.150
What's the other one?

141
00:09:09.150 --> 00:09:10.050
And I need the updates.

142
00:09:10.050 --> 00:09:11.810
In this case, it is just packed and
we're switching it.

143
00:09:11.810 --> 00:09:14.027
I'm only going to wire up this
one just to make the point.

144
00:09:25.735 --> 00:09:26.960
Grab the event.

145
00:09:32.426 --> 00:09:36.261
Cool, actually we want just
the opposite of whatever it was,

146
00:09:36.261 --> 00:09:38.342
just like we had before, right?

147
00:09:42.891 --> 00:09:46.596
For name we might need that all but
we're just toggling us.

148
00:09:46.596 --> 00:09:50.826
All right, so I have to this, we'll see
and then I will take Mark's question.

149
00:09:50.826 --> 00:09:51.451
We broke it.

150
00:09:51.451 --> 00:09:52.320
Mark, what's your question?

151
00:09:54.680 --> 00:09:56.930
&gt;&gt; Why does use.

152
00:09:56.930 --> 00:09:58.766
Reducer work better than useMemo and

153
00:09:58.766 --> 00:10:02.322
useCallback
&gt;&gt; Because it doesn't need to be used

154
00:10:02.322 --> 00:10:06.606
in useCallback at all, useCallback is
a way to say, hey don't give me a new

155
00:10:06.606 --> 00:10:10.595
reference to this function
&gt;&gt; For these reasons.

156
00:10:10.595 --> 00:10:15.125
But if any of those reasons change,
I need a new version of this function.

157
00:10:15.125 --> 00:10:17.985
Dispatch is always the same one, right?

158
00:10:17.985 --> 00:10:19.125
It doesn't ever change.

159
00:10:19.125 --> 00:10:22.116
It is from the very beginning
of when you call that hook.

160
00:10:22.116 --> 00:10:25.166
If it gives you a dispatch,
which will always be the same dispatch.

161
00:10:25.166 --> 00:10:28.449
So it eliminates your need for
useCallback completely, the only reason we

162
00:10:28.449 --> 00:10:32.090
needed useCallback because we were
whipping up functions on the fly.

163
00:10:32.090 --> 00:10:36.234
If we're willing to pass down,
either the set items or dispatch,

164
00:10:36.234 --> 00:10:41.280
basically they're effectively useCallback
way before we ever got it, right.

165
00:10:41.280 --> 00:10:43.927
Here we're taking something that
was already useCallbacks and

166
00:10:43.927 --> 00:10:45.130
wrapping it in another one.

167
00:10:45.130 --> 00:10:45.660
&gt;&gt; All right.

168
00:10:45.660 --> 00:10:48.330
So it's not necessarily that
they're better morally.

169
00:10:49.380 --> 00:10:55.620
They're just, doing things less is
better than doing it more, yep.

170
00:10:57.040 --> 00:11:00.013
&gt;&gt; Is there any performance
advantage in using Redux

171
00:11:00.013 --> 00:11:02.830
over how you're using the reducers here?

172
00:11:02.830 --> 00:11:03.330
&gt;&gt; Yeah.

173
00:11:04.630 --> 00:11:12.312
So, like everything, it depends, right?

174
00:11:12.312 --> 00:11:14.702
As I called it name for some reason?

175
00:11:14.702 --> 00:11:17.640
We're doing packed on this one.

176
00:11:17.640 --> 00:11:20.903
So having my talking type, but
so yeah, the question was,

177
00:11:20.903 --> 00:11:23.630
is there advantages to using Redux?

178
00:11:23.630 --> 00:11:29.610
So, there are advantages to is using
Redux, right, use reducer is great.

179
00:11:29.610 --> 00:11:30.740
Awesome.
You get a reducer.

180
00:11:30.740 --> 00:11:33.380
You get dispatch, cool, cool, cool.

181
00:11:33.380 --> 00:11:35.382
Things you don't get, middleware.

182
00:11:35.382 --> 00:11:38.470
Things you don't get, Redux dev tools.

183
00:11:38.470 --> 00:11:42.788
A few other things you don't get is like
all of the TypeScript support that's

184
00:11:42.788 --> 00:11:44.190
built in React to Redux.

185
00:11:46.610 --> 00:11:50.738
Imagine once we get this thing now
rendering, that we're gonna pull it,

186
00:11:50.738 --> 00:11:53.734
just hypothetically that
the next section was like,

187
00:11:53.734 --> 00:11:57.240
let's wrap this thing in the context API,
right?

188
00:11:57.240 --> 00:12:01.242
You will see that all the performance
gains that we got immediately go

189
00:12:01.242 --> 00:12:02.910
away, right?

190
00:12:02.910 --> 00:12:07.320
We'll get them back by doing
a bunch of work, right?

191
00:12:08.960 --> 00:12:13.845
If you were to then do the same example as
an exercise to the reader like later and

192
00:12:13.845 --> 00:12:17.041
just grab reactivated does
the simplest version.

193
00:12:17.041 --> 00:12:21.616
You would see that you would have all
the performance gains out of the box for

194
00:12:21.616 --> 00:12:24.220
free, right for two reasons, right?

195
00:12:24.220 --> 00:12:27.260
Some of them are newer reasons and
an older reasons, right?

196
00:12:27.260 --> 00:12:27.785
For two reasons.

197
00:12:27.785 --> 00:12:32.305
One is that those performance
gains have been done for you.

198
00:12:32.305 --> 00:12:36.978
Two is that modern React Redux,
at least the current version,

199
00:12:36.978 --> 00:12:39.448
I don't know when this changed,

200
00:12:39.448 --> 00:12:44.049
I verified by looking at the source
code like a week or two ago.

201
00:12:44.049 --> 00:12:48.880
It doesn't use the context API,
it uses that sync external store.

202
00:12:50.000 --> 00:12:52.420
I literally almost typed it a second ago.

203
00:12:52.420 --> 00:12:56.734
And it uses that, which is like,
because by definition in React,

204
00:12:56.734 --> 00:13:01.819
that user reducer is a hook, which means
it has to be defined in that function,

205
00:13:01.819 --> 00:13:05.350
which means the store at least,
or that state.

206
00:13:05.350 --> 00:13:07.270
Is new every time, right?

207
00:13:07.270 --> 00:13:11.699
You think about when you set up Redux,
you're saying out even before you did your

208
00:13:11.699 --> 00:13:16.540
first component, before you created that
route, you're like create store, right?

209
00:13:16.540 --> 00:13:20.210
So that is a static object that is just
floating there, the same one in memory.

210
00:13:20.210 --> 00:13:24.500
It has a get state method and a subscribe
which just tells you to call get state,

211
00:13:24.500 --> 00:13:28.300
where it'll give you the newest and
most immutable version.

212
00:13:28.300 --> 00:13:29.841
If that state hasn't changed,

213
00:13:29.841 --> 00:13:33.110
you automatically get the same
object as you got last time.

214
00:13:33.110 --> 00:13:35.509
It's only if it changed
that you get a new object.

215
00:13:35.509 --> 00:13:39.757
The store itself isn't gonna change
cuz it's in the initial scope that you

216
00:13:39.757 --> 00:13:40.639
defined it in.

217
00:13:40.639 --> 00:13:43.899
So, is it simply, it's better in so

218
00:13:43.899 --> 00:13:49.699
far that use reducer doesn't seek
to be a complete replacement.

219
00:13:49.699 --> 00:13:53.547
It seems to be in that there
are certain distances that you will

220
00:13:53.547 --> 00:13:58.360
definitely walk to and you'll be like,
I'm not taking a car there, right?

221
00:13:58.360 --> 00:14:01.084
And then after a certain point, I'm
either gonna get the bike, or the car, or

222
00:14:01.084 --> 00:14:02.230
something like that.

223
00:14:02.230 --> 00:14:04.956
I think use reducers is like,
I need a little bit of a reducer,

224
00:14:04.956 --> 00:14:08.050
I need something where I've got a form,
multiple things changing and

225
00:14:08.050 --> 00:14:10.570
I'm deriving the state at the end.

226
00:14:10.570 --> 00:14:14.362
Pulling in Redux this one feels like
a bit much, right, or what have you,

227
00:14:14.362 --> 00:14:16.332
state management library of choice.

228
00:14:16.332 --> 00:14:18.394
I like Redux, cool, cool, cool.

229
00:14:18.394 --> 00:14:20.666
You might like mob x or
what have you, cool.

230
00:14:20.666 --> 00:14:25.969
But there's usually, sometimes it's like,
is it really time for this yet?

231
00:14:25.969 --> 00:14:27.537
Yeah?
&gt;&gt; [INAUDIBLE] Let's say just

232
00:14:27.537 --> 00:14:31.332
use Redux for the global part and
use it to do search for the forms or

233
00:14:31.332 --> 00:14:36.360
individual pieces, where it doesn't
feel like it's supposed to and global.

234
00:14:36.360 --> 00:14:38.884
&gt;&gt; Exactly, that is that was
the point I was gonna make, so

235
00:14:38.884 --> 00:14:40.632
I'm gonna repeat it like it was mine.

236
00:14:40.632 --> 00:14:42.285
[LAUGH]
&gt;&gt; [CROSSTALK] so

237
00:14:42.285 --> 00:14:46.753
maybe originally I thought what do
you meant, it's like either or.

238
00:14:46.753 --> 00:14:47.901
&gt;&gt; It's not either or, right.

239
00:14:47.901 --> 00:14:51.792
And so one of the things we talked
about in a different workshop together,

240
00:14:51.792 --> 00:14:53.436
was different types of state.

241
00:14:53.436 --> 00:14:58.859
There is your kind of your model, whatever
the business logic is of your application,

242
00:14:58.859 --> 00:15:03.550
that stuff that a lot of would go
into the context API in some cases.

243
00:15:03.550 --> 00:15:05.240
Or in Redux.

244
00:15:05.240 --> 00:15:08.710
And then there's, yeah,
is this form valid, right?

245
00:15:08.710 --> 00:15:11.650
You're not gonna put
that in your Redux store.

246
00:15:11.650 --> 00:15:14.822
At the same time, it might have
enough complexity that you don't

247
00:15:14.822 --> 00:15:18.065
want 17 sub-states, right, or
your states in there, right?

248
00:15:18.065 --> 00:15:21.883
And so you're like, I just use one
reducer that checks all the fields and

249
00:15:21.883 --> 00:15:23.980
figures out one list of all the errors.

250
00:15:23.980 --> 00:15:25.891
So something along those lines, right?

251
00:15:25.891 --> 00:15:27.959
Every time I've ever grabbed
a React form library,

252
00:15:27.959 --> 00:15:29.990
it is about a week before
we throw it in the garbage.

253
00:15:29.990 --> 00:15:32.441
And just write a reducer
that grabs all the values,

254
00:15:32.441 --> 00:15:36.090
tells us all the errors that we can
unit test and call it a day, right?

255
00:15:36.090 --> 00:15:39.910
And so yeah, for that ephemeral state,
is this accordion open or closed?

256
00:15:39.910 --> 00:15:40.940
Is this form valid?

257
00:15:40.940 --> 00:15:42.807
I would probably use reducer every time,

258
00:15:42.807 --> 00:15:44.787
even if I had Redux in the codebase,
right.

259
00:15:44.787 --> 00:15:46.470
I think it's a yes end.

260
00:15:46.470 --> 00:15:49.448
But as I was talking and
typing at the same time,

261
00:15:49.448 --> 00:15:51.900
I just named it named instead of pact.

262
00:15:51.900 --> 00:15:53.455
And so it's like, yeah.

263
00:15:53.455 --> 00:15:57.444
You can see that without
a single useCallback, just, yeah,

264
00:15:57.444 --> 00:16:01.818
the React memos are still in there,
without a single useCallback,

265
00:16:01.818 --> 00:16:06.904
I'm not re-rendering all those items and
just, just to keep myself honest.

266
00:16:14.377 --> 00:16:18.250
You see that we get all of
the performance gains that we had before.

267
00:16:18.250 --> 00:16:22.198
So again, the major point here
is that there is not one,

268
00:16:22.198 --> 00:16:25.480
you have to do it this way all the time,
right?

269
00:16:25.480 --> 00:16:28.420
There are different trade offs, there's
different things you could choose to do.

270
00:16:28.420 --> 00:16:32.007
If I had a nest that threw a whole bunch,
right,

271
00:16:32.007 --> 00:16:34.890
maybe I don't wanna do that anymore.

272
00:16:34.890 --> 00:16:40.650
Maybe yeah, hey, the act,
maybe I gotta go 38 components.

273
00:16:40.650 --> 00:16:43.590
And sure, maybe it is more
performant to do that, but there's

274
00:16:43.590 --> 00:16:48.100
a likelihood that in the next month, we're
actually gonna have to move that box.

275
00:16:48.100 --> 00:16:52.040
Over there,
right in a different part of the subtree.

276
00:16:52.040 --> 00:16:55.470
And you measure the context API,
which we'll look at in a second, and

277
00:16:55.470 --> 00:16:57.660
had no memorization or whatever.

278
00:16:57.660 --> 00:16:59.300
And it's still wicked fast.

279
00:17:00.570 --> 00:17:02.560
Yeah, do that, right.

280
00:17:02.560 --> 00:17:04.090
I'm not saying don't use the context API.

281
00:17:04.090 --> 00:17:05.360
I'm not saying don't use these things.

282
00:17:05.360 --> 00:17:09.960
I'm saying definitely think about it,
definitely consider the options.

283
00:17:09.960 --> 00:17:13.350
Do the thing that just is
React naturally first, right?

284
00:17:13.350 --> 00:17:18.170
Or at least consider that first before
starting to cache and memorize things.

285
00:17:18.170 --> 00:17:21.903
Cuz yeah, the second you're caching
values, if you mess that up,

286
00:17:21.903 --> 00:17:24.993
you will get those weird bugs
that you cannot recreate.

287
00:17:24.993 --> 00:17:32.467
And I say that as somebody who has lost
days of my life, not that long ago.

288
00:17:32.467 --> 00:17:35.460
Embarrassing to admit how long ago,
within the last month or two,

289
00:17:35.460 --> 00:17:39.212
to little things like that, because yeah,
it seemed more convenient at the time.

290
00:17:39.212 --> 00:17:42.199
And now I have these squarely issues,
and it's just never worth it.

291
00:17:42.199 --> 00:17:45.547
And so it's worth considering all
the options, what the trade offs are,

292
00:17:45.547 --> 00:17:49.390
you might still choose to use useMemo,
useCallback, react.memo, absolutely.

293
00:17:49.390 --> 00:17:52.060
My job is not to tell you which one to
do all the time, cuz there's no point.

294
00:17:52.060 --> 00:17:54.600
I'd just give you a list and
I'd walk out of here, right?

295
00:17:54.600 --> 00:17:57.672
My job is to basically,
here are the considerations.

296
00:17:57.672 --> 00:18:01.528
All the things that could have been done
by the compiler, the framework, whatever.

297
00:18:01.528 --> 00:18:04.752
The computer itself,
the microprocessor have been done,

298
00:18:04.752 --> 00:18:08.619
we're left with the weird squishy
trade offs that could go either way,

299
00:18:08.619 --> 00:18:12.626
that's in our day to day jobs
the problems that we're left with, right.

