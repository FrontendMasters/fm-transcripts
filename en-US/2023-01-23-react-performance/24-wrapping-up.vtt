WEBVTT

1
00:00:00.180 --> 00:00:03.065
At the very beginning, I showed you the
last slide, I'm showing it to you again.

2
00:00:03.065 --> 00:00:08.074
This is, I think, the heuristic
that makes a ton of sense, right?

3
00:00:11.105 --> 00:00:13.939
If you can solve the problem
with the state, as we saw,

4
00:00:13.939 --> 00:00:18.265
those posts in the app were slow because
they were nested data structures.

5
00:00:18.265 --> 00:00:20.120
They were causing re-renders, right,

6
00:00:20.120 --> 00:00:22.403
just simply cuz of the way
the data was structured.

7
00:00:22.403 --> 00:00:27.475
The fact that you would have to bust out
of all memoization just to update the UI,

8
00:00:27.475 --> 00:00:32.412
means that it's probably worth having
a function on the ingest of that data.

9
00:00:32.412 --> 00:00:36.014
To reorganize it in a way that
you can minimize changing and

10
00:00:36.014 --> 00:00:40.146
replacing as many objects as
possible when using immutable data.

11
00:00:40.146 --> 00:00:42.835
No library like Immer or
whatever is gonna solve it for

12
00:00:42.835 --> 00:00:45.540
you if you have these deeply
nested data structures.

13
00:00:45.540 --> 00:00:47.874
Cuz that's the way that
immutability works in JavaScript,

14
00:00:47.874 --> 00:00:49.301
is you gotta change it all the way up.

15
00:00:49.301 --> 00:00:54.029
So creating the flattest possible
data structure that you can will stop

16
00:00:54.029 --> 00:00:58.610
rerenders when you use any of
the memoization out of the box, right?

17
00:00:58.610 --> 00:01:00.856
Doing it otherwise just
doesn't make any sense.

18
00:01:00.856 --> 00:01:05.393
Also React fundamentals in the way that
you shape your component hierarchy can

19
00:01:05.393 --> 00:01:07.945
sometimes completely eliminate the need.

20
00:01:07.945 --> 00:01:11.975
Sometimes we threw some React.memos
in there, and we're like, or

21
00:01:11.975 --> 00:01:14.903
they use callbacks with
the passing dispatcher.

22
00:01:14.903 --> 00:01:17.870
We can rip it out,
we still get all the benefits, right?

23
00:01:17.870 --> 00:01:22.813
Sometimes using some of just
the React-like primitives out of the box

24
00:01:22.813 --> 00:01:26.680
will do it for
you with no cost of checking two objects.

25
00:01:26.680 --> 00:01:30.804
And yet, they should be very clear.

26
00:01:30.804 --> 00:01:34.335
At a given, checking two objects
is probably not that expensive.

27
00:01:34.335 --> 00:01:37.160
If it is your immediate go to,
it can pile up on you.

28
00:01:37.160 --> 00:01:41.479
I have been bitten by it before
personally, if you never get bitten,

29
00:01:41.479 --> 00:01:42.673
awesome, right?

30
00:01:42.673 --> 00:01:47.812
But you will not ever get bitten by
just following the React way, right?

31
00:01:47.812 --> 00:01:52.645
And so that should a lot of times
be at least the first inclination.

32
00:01:52.645 --> 00:01:54.749
And I think we saw it before, it's like,

33
00:01:54.749 --> 00:01:58.918
sometimes you will get surprised by what
doesn't just not trigger a re-render.

34
00:01:58.918 --> 00:02:03.095
That said, if it's triggered
a bunch of re-renders, and

35
00:02:03.095 --> 00:02:08.369
they're like, nothing, I don't know
if it's always the best, right?

36
00:02:08.369 --> 00:02:14.021
And so developing that sense of
looking at it and being realistic.

37
00:02:14.021 --> 00:02:17.777
But also, some of those things do
help you maybe suss out other bugs.

38
00:02:17.777 --> 00:02:22.457
Like, this thing that I didn't
expect to even re-render at all,

39
00:02:22.457 --> 00:02:26.516
just normally, was doing it cuz
the children were replaced?

40
00:02:26.516 --> 00:02:31.098
That seems like if I was in no
way expecting that to happen and

41
00:02:31.098 --> 00:02:35.692
it happened, what else could
be going wrong here, right?

42
00:02:35.692 --> 00:02:37.955
And so some of that stuff
it's super useful, right?

43
00:02:37.955 --> 00:02:42.458
And also a lot of times there are bugs,
yeah because there's suddenly other thing,

44
00:02:42.458 --> 00:02:44.998
cool, cool, cool,
I think makes a ton of sense.

45
00:02:44.998 --> 00:02:50.366
That said, memoization,
React.memo, useMemo,

46
00:02:50.366 --> 00:02:55.240
I use them all the time,
all the time, right?

47
00:02:55.240 --> 00:02:58.479
They're not to say you shouldn't use them,
use them.

48
00:02:58.479 --> 00:03:01.938
But also, yeah, think about the first
one first, but they are there for you,

49
00:03:01.938 --> 00:03:03.049
they exist for a reason.

50
00:03:03.049 --> 00:03:06.999
It's not like people put them in like,
but never use that, don't be ridiculous.

51
00:03:06.999 --> 00:03:08.713
I mean, there are certain
things you should never use.

52
00:03:08.713 --> 00:03:12.248
But that's not one of them, right?

53
00:03:12.248 --> 00:03:16.446
It's like, what does the with
keyword in JavaScript even do?

54
00:03:16.446 --> 00:03:18.455
I still can't write a switch statement.

55
00:03:18.455 --> 00:03:21.193
But, yeah, so memoization,
it's definitely there for you, right?

56
00:03:21.193 --> 00:03:25.736
Using the Suspense API to progressively
load your application, kind of getting

57
00:03:25.736 --> 00:03:29.694
stuff in the background ready to go and
not sending the entire bundle.

58
00:03:29.694 --> 00:03:33.914
Yeah, and
there is more coming from that API.

59
00:03:33.914 --> 00:03:35.642
This is just not totally ready,

60
00:03:35.642 --> 00:03:38.843
it's like React server components
are not totally ready.

61
00:03:38.843 --> 00:03:41.025
We'll come back and
talk about them when they are.

62
00:03:41.025 --> 00:03:44.535
But at this moment some of those
things like useEffect came and

63
00:03:44.535 --> 00:03:45.758
went in a few months.

64
00:03:45.758 --> 00:03:49.607
So I am a little more reluctant to talk
about things that haven't shipped.

65
00:03:49.607 --> 00:03:52.311
And then when you have things where, no,

66
00:03:52.311 --> 00:03:56.731
this is computationally expensive and
it needs to happen, right?

67
00:03:56.731 --> 00:04:00.710
I just need to then still figure
out ways to keep my UI performant.

68
00:04:00.710 --> 00:04:04.315
You do have primitives in React before
you try to wire your own, right?

69
00:04:04.315 --> 00:04:06.478
Before you're like,
I'm gonna do this set timeout thing, and

70
00:04:06.478 --> 00:04:07.771
it's gonna kick off this web worker.

71
00:04:07.771 --> 00:04:11.960
And then that's gonna send a broadcast
message to all the other tabs,

72
00:04:11.960 --> 00:04:14.731
and then there is service worker,
whatever.

73
00:04:14.731 --> 00:04:17.720
You're not the first person
to have this problem, right?

74
00:04:17.720 --> 00:04:21.062
Look to kind of the core pieces first.

75
00:04:21.062 --> 00:04:25.390
Yeah, questions, and
I'm gonna look at the chat too, but.

76
00:04:25.390 --> 00:04:28.600
&gt;&gt; Suspense was with 18,
right, not before then?

77
00:04:28.600 --> 00:04:30.766
I couldn't remember what it is.

78
00:04:30.766 --> 00:04:33.760
&gt;&gt; I don't remember,
I think some parts of Suspense,

79
00:04:33.760 --> 00:04:37.241
I can't remember if they were
unstable ones I could pull in.

80
00:04:37.241 --> 00:04:41.681
And there was a library that
Jamie Kyle made, it would by just being

81
00:04:41.681 --> 00:04:46.525
called lazy or something along
those lines, I can look at that.

82
00:04:46.525 --> 00:04:49.005
&gt;&gt; That you mentioned.

83
00:04:49.005 --> 00:04:52.926
&gt;&gt; There was a version of that
that was not in React core.

84
00:04:55.203 --> 00:04:57.826
It was 2017, 2018 maybe, right?

85
00:04:57.826 --> 00:05:04.417
So a version of that concept, right?

86
00:05:04.417 --> 00:05:06.896
At that point you're playing a game
which does your Webpack's configuration.

87
00:05:06.896 --> 00:05:11.659
But some version of that concept has

88
00:05:11.659 --> 00:05:15.951
existed for four or five years.

89
00:05:15.951 --> 00:05:20.148
Fully being in React, it was coming for
so long, I can't fully remember.

90
00:05:20.148 --> 00:05:23.364
And React 18 came much
later than I expected.

91
00:05:23.364 --> 00:05:24.760
Some things came,

92
00:05:24.760 --> 00:05:30.006
the time-space continuum during COVID
[LAUGH] is a little flaky for me?

93
00:05:30.006 --> 00:05:32.934
But yes, maybe 17, yeah?

94
00:05:36.198 --> 00:05:40.073
Detransition stuff, I believe, is new,

95
00:05:40.073 --> 00:05:45.576
all the concurrency pieces are new for
React 18, though.

96
00:05:45.576 --> 00:05:50.491
&gt;&gt; Do you have any recommendations for
additional reading resources?

97
00:05:50.491 --> 00:05:54.448
&gt;&gt; I will find it, but if you do React WG,
there is the working group for

98
00:05:54.448 --> 00:05:58.821
the React team, where for a lot of these
things, all of the discussions and

99
00:05:58.821 --> 00:06:02.376
updates about here's a new feature,
here's how it works.

100
00:06:02.376 --> 00:06:06.320
And then also, hey, we're not doing
this thing now, and here's why.

101
00:06:06.320 --> 00:06:09.490
So they might be like,
I heard this thing was coming,

102
00:06:09.490 --> 00:06:12.315
a lot of times you can see
the rationale for why.

103
00:06:12.315 --> 00:06:15.621
And for me learning about these things,
that was incredibly valued to see

104
00:06:15.621 --> 00:06:18.626
the person who wrote the feature
kinda do the documentation on it.

105
00:06:18.626 --> 00:06:20.939
Discuss some of the trade offs and

106
00:06:20.939 --> 00:06:24.417
thoughts around it was
absolutely fascinating.

107
00:06:24.417 --> 00:06:28.378
And there's a super how that at one point
there's some thread in there, which is

108
00:06:28.378 --> 00:06:32.533
like, people put terms that confuse you,
and then somebody will try to explain it.

109
00:06:32.533 --> 00:06:33.974
And everyone up was like,

110
00:06:33.974 --> 00:06:38.112
draw a graph of how concurrency is kind
of like a game of telephone, right?

111
00:06:38.112 --> 00:06:42.559
And some of just actually from the actual
core team itself in a public forum,

112
00:06:42.559 --> 00:06:45.768
as they're discussing
the implementation details.

113
00:06:45.768 --> 00:06:48.395
And the thought and
consideration that went into these,

114
00:06:48.395 --> 00:06:49.769
is absolutely fascinating.

115
00:06:49.769 --> 00:06:55.247
And so that would be the first and
most immediate thing.

116
00:06:55.247 --> 00:07:01.172
I was like, you should just Google it,
as if I did not had a computer, hold on.

117
00:07:05.182 --> 00:07:10.084
If only I could just type that instead of,
I'll drop it in the chat too.

118
00:07:10.084 --> 00:07:16.079
Big fan of this, totally worth, there's,
yeah, the Discussion tab, right.

119
00:07:16.079 --> 00:07:20.443
And then you go into Announcements, that's
the one I like, and Deep Dive is good too.

120
00:07:20.443 --> 00:07:25.201
Yeah, some of them are a year or
so old, but still,

121
00:07:25.201 --> 00:07:28.964
they explain, look, new in 18,

122
00:07:28.964 --> 00:07:34.079
selective hydration,
there's useDeferredValue.

123
00:07:34.079 --> 00:07:39.039
You can see explain it, and then also
check out the length of the comments

124
00:07:39.039 --> 00:07:42.389
in the thread,
that's where the good stuff is.

125
00:07:42.389 --> 00:07:46.561
The announcement, sure, sure,
sure, but the discussion and

126
00:07:46.561 --> 00:07:50.194
the questions and
the answers explaining everything,

127
00:07:50.194 --> 00:07:53.994
for me was incredible to get it
from the team that built it.

128
00:07:53.994 --> 00:07:58.846
&gt;&gt; How long have they been doing this,
since the beginning of React?

129
00:07:58.846 --> 00:08:02.272
&gt;&gt; I was only aware of it for React 18.

130
00:08:02.272 --> 00:08:06.581
So I can't say that it wasn't happening
the whole time, but I've only been fully

131
00:08:06.581 --> 00:08:10.592
aware of it for the kind of lead up over
the last year, or year and a half or so.

132
00:08:10.592 --> 00:08:12.814
Thank you all so much.

133
00:08:12.814 --> 00:08:18.000
&gt;&gt; [APPLAUSE]

