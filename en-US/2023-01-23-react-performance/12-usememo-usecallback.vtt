WEBVTT

1
00:00:00.165 --> 00:00:02.595
So like these are different
values are stored.

2
00:00:02.595 --> 00:00:05.602
So it compares this function to another
function, different memory addresses.

3
00:00:05.602 --> 00:00:07.747
We're assigning it each way through.

4
00:00:07.747 --> 00:00:12.251
Okay, the rules of react,
memo apply, everything works, right.

5
00:00:12.251 --> 00:00:17.615
It's like the code works just not
as you expected, but it works.

6
00:00:17.615 --> 00:00:22.333
So we clearly need like a few more
tools in order to handle this, right.

7
00:00:22.333 --> 00:00:26.740
And react has those tools for
us because this is obviously like,

8
00:00:26.740 --> 00:00:30.587
why would react memo exist if
you use hooks and thereby?

9
00:00:30.587 --> 00:00:31.848
It wasn't a thing.

10
00:00:31.848 --> 00:00:35.810
Interestingly, this is not as
much of an issue with classes,

11
00:00:35.810 --> 00:00:37.800
because methods are the same.

12
00:00:37.800 --> 00:00:41.528
They're the same function attached to
that object on the prototype, right.

13
00:00:41.528 --> 00:00:45.406
So, point four class-based components,

14
00:00:45.406 --> 00:00:52.969
that methods are the same object in memory
every time, you're not redefining them.

15
00:00:52.969 --> 00:00:55.398
Unless you do some of the modern stuff,

16
00:00:55.398 --> 00:00:58.568
where you're gonna assign
it to a class variable.

17
00:00:58.568 --> 00:01:01.694
Unless you do the kind of class components
I was writing before I switched over to

18
00:01:01.694 --> 00:01:02.730
functional components.

19
00:01:02.730 --> 00:01:05.976
Where I was just opting out of
most of the goodness anyway.

20
00:01:05.976 --> 00:01:10.473
But generally speaking react has
some tools to help us with this.

21
00:01:10.473 --> 00:01:14.961
UseMemo not to be confused with
react now and useCallback, right.

22
00:01:14.961 --> 00:01:17.318
You've probably heard of these before,

23
00:01:17.318 --> 00:01:19.750
useMemo is a way to say
use effects friend.

24
00:01:19.750 --> 00:01:24.240
It's like use effect and use callback
are hanging out with each other.

25
00:01:24.240 --> 00:01:27.347
It's saying like, hey,
generate random number,

26
00:01:27.347 --> 00:01:29.826
that was an expensive function, right.

27
00:01:29.826 --> 00:01:32.562
And let's say it took some arguments.

28
00:01:32.562 --> 00:01:36.908
If all these other things that you
rely on are the same, don't run.

29
00:01:36.908 --> 00:01:40.409
If you have a pure function that
the idea of a pure function is like.

30
00:01:40.409 --> 00:01:44.368
If the same inputs go in
the same value comes out, right?

31
00:01:44.368 --> 00:01:47.313
And you've seen these are the same
inputs you saw as last time.

32
00:01:47.313 --> 00:01:50.375
We don't need running again,
we know how the story ends, right.

33
00:01:50.375 --> 00:01:55.256
So it's great for any kind of expensive
value that you might be running.

34
00:01:55.256 --> 00:01:58.130
You can even use it or on components and
stuff like that to like, okay,

35
00:01:58.130 --> 00:02:00.249
we've run out we've got
the component rendered.

36
00:02:00.249 --> 00:02:03.230
There's a bunch of interesting
things you can do with it.

37
00:02:04.400 --> 00:02:08.533
Probably more commonly is useCallback and
useCallback is,

38
00:02:08.533 --> 00:02:11.090
I'm gonna hand you this function.

39
00:02:11.090 --> 00:02:14.640
It's clearly got set items
from a closure scope, right.

40
00:02:14.640 --> 00:02:16.250
And you definitely need
to know about that.

41
00:02:16.250 --> 00:02:19.050
And items more importantly,
cuz if you're gonna push onto the array.

42
00:02:19.050 --> 00:02:21.036
If you have an old array.

43
00:02:21.036 --> 00:02:23.124
You're gonna push on to an old array and

44
00:02:23.124 --> 00:02:25.729
now you state matters
it's gonna get all weird.

45
00:02:25.729 --> 00:02:28.408
So all the things that
you rely on are the same.

46
00:02:28.408 --> 00:02:31.695
Don't with function held on last time.

47
00:02:31.695 --> 00:02:37.186
This is kind of when we saw you say
initializer function on the floor or

48
00:02:37.186 --> 00:02:39.657
previous values on the floor.

49
00:02:39.657 --> 00:02:44.948
These data structures in that react fibres
are familiar with what happened last time,

50
00:02:44.948 --> 00:02:46.259
even if you're not.

51
00:02:46.259 --> 00:02:50.356
As you say if I just looked at all
the things you said that this thing cares

52
00:02:50.356 --> 00:02:52.012
about, they're the same.

53
00:02:52.012 --> 00:02:54.836
So I'll give you back the one
from last time, right.

54
00:02:54.836 --> 00:02:59.138
And that will actually get you the same
memory reference to the function and

55
00:02:59.138 --> 00:03:00.713
then make all of this work.

56
00:03:03.080 --> 00:03:07.776
So we can go ahead, and
this becomes basically as simple as,

57
00:03:10.798 --> 00:03:15.619
UseCallback, we can wrap the function and
we're given that

58
00:03:15.619 --> 00:03:20.546
dependency list, really the only
one we care about is items.

59
00:03:20.546 --> 00:03:23.624
And you'll notice that like,
yes, lint doesn't yell at me for

60
00:03:23.624 --> 00:03:24.772
not having said items.

61
00:03:24.772 --> 00:03:26.459
Would anyone like to venture a guess why?

62
00:03:30.036 --> 00:03:31.795
Yeah.

63
00:03:31.795 --> 00:03:34.758
&gt;&gt; Just because it's still
within the scope, right.

64
00:03:34.758 --> 00:03:38.054
&gt;&gt; Yesish,
because this is just setting it,

65
00:03:38.054 --> 00:03:41.728
react is already actually
using effectively.

66
00:03:41.728 --> 00:03:43.957
UseCallback to give me
the same version every time.

67
00:03:43.957 --> 00:03:46.022
This one is not changing.

68
00:03:46.022 --> 00:03:50.413
I am getting a same memory
reference every time to set item.

69
00:03:50.413 --> 00:03:54.745
But items,
I'm literally redefining it all the time.

70
00:03:54.745 --> 00:03:58.253
The only thing in this app is items so
by definition,

71
00:03:58.253 --> 00:04:00.740
those are regenerating every time.

72
00:04:00.740 --> 00:04:05.423
But this is saying like
unless items has changed.

73
00:04:05.423 --> 00:04:07.815
I don't need you worrying about this,
right.

74
00:04:07.815 --> 00:04:10.293
And so useCallback will kind of give
you the same thing as long as this

75
00:04:10.293 --> 00:04:10.996
hasn't changed.

76
00:04:10.996 --> 00:04:15.522
Now, like we said before, most of the time
that is like the thing that changes in

77
00:04:15.522 --> 00:04:18.035
this application like
I could pull back up.

78
00:04:18.035 --> 00:04:21.565
The draft item, I could go put in
that ridiculous code that I had.

79
00:04:21.565 --> 00:04:25.901
This is mostly to kind of show you the
demonstration of why it didn't work and

80
00:04:25.901 --> 00:04:26.865
how it can work.

81
00:04:26.865 --> 00:04:31.051
But it is the kind of solution for
this problem and like for this one,

82
00:04:31.051 --> 00:04:34.218
especially for functions,
which don't change.

83
00:04:34.218 --> 00:04:35.683
This is a pretty safe and

84
00:04:35.683 --> 00:04:41.051
reasonable thing to do especially if you
are creating custom hooks yourself, right.

85
00:04:41.051 --> 00:04:44.605
In the same way that set
items is static every time.

86
00:04:44.605 --> 00:04:47.876
I would expect that if I got
a some kind of setter function.

87
00:04:47.876 --> 00:04:49.834
From either a third party hook or

88
00:04:49.834 --> 00:04:53.469
one that we made the same
principle would be there, right.

89
00:04:53.469 --> 00:04:55.768
This is a thing that yeah,
we're binding them together.

90
00:04:55.768 --> 00:04:59.764
Awesome, and I'll show you how
to not do this in a second too.

91
00:04:59.764 --> 00:05:03.779
But for the most part like this I think
is under the things where it's like,

92
00:05:03.779 --> 00:05:06.535
I think this is definitely a fair and
safe one to do.

93
00:05:06.535 --> 00:05:10.206
Cuz you're not getting any benefits
by whipping up a new function every

94
00:05:10.206 --> 00:05:10.948
time either.

95
00:05:10.948 --> 00:05:13.780
So, gotta give the list.

96
00:05:20.623 --> 00:05:21.375
Items.

97
00:05:24.880 --> 00:05:28.093
And then there's a need be like
I should use use memo on these.

98
00:05:28.093 --> 00:05:32.892
It's tricky because the only thing
that's out that could ever change is

99
00:05:32.892 --> 00:05:37.690
the items and so if there were more
things and this was expensive, yeah,

100
00:05:37.690 --> 00:05:39.513
totally go for it right on.

101
00:05:39.513 --> 00:05:45.435
But doing that,
when you get no benefit is just pointless,

102
00:05:45.435 --> 00:05:50.834
right, And so some of this stuff is like.

103
00:05:50.834 --> 00:05:55.187
If the answer was always yes,
it would happen for you,

104
00:05:55.187 --> 00:05:57.366
like they would just do it.

105
00:05:57.366 --> 00:05:58.884
Yes, Mark.

106
00:05:58.884 --> 00:06:00.738
&gt;&gt; So you recommend using,

107
00:06:00.738 --> 00:06:05.959
useCallback instead of useMemo due
to creating of the new functions?

108
00:06:05.959 --> 00:06:07.477
&gt;&gt; So you use them for different cases.

109
00:06:07.477 --> 00:06:12.910
If I wanted the value to be persisted
unless things change I use useMemo.

110
00:06:12.910 --> 00:06:16.190
If I want a function that's the same
reference every time I useCallback.

111
00:06:16.190 --> 00:06:18.212
UseCallback is for when I need a function.

112
00:06:18.212 --> 00:06:19.673
UseMemo is for when I need a value.

113
00:06:19.673 --> 00:06:21.678
It's just basically joining a value or

114
00:06:21.678 --> 00:06:25.335
a function if I use useMemo here I
would get the result of this all right.

115
00:06:25.335 --> 00:06:28.212
Now the function itself that I
wanna pass down to items, so

116
00:06:28.212 --> 00:06:31.751
the items are the ones that will pass
in the ID to remove them, yes Mark,

117
00:06:31.751 --> 00:06:34.819
&gt;&gt; Will memo work with nested prop

118
00:06:34.819 --> 00:06:35.883
changes.

119
00:06:35.883 --> 00:06:37.425
&gt;&gt; I think it's still a shallow compare.

120
00:06:37.425 --> 00:06:41.906
I'm trying to remember if it takes
another argument I don't think it does.

121
00:06:41.906 --> 00:06:45.239
It's like in the same way you saw that
react that memo took it like is now it's I

122
00:06:45.239 --> 00:06:47.306
think it's just looking
at the highest level.

123
00:06:47.306 --> 00:06:52.101
But you could say object.property if you
only cared about one property of that.

124
00:06:52.101 --> 00:06:57.297
It's like the nice part is that
like EsLint will do both for you.

125
00:06:57.297 --> 00:07:04.239
If you ever set up it will both yell
at you when you're missing something.

126
00:07:04.239 --> 00:07:06.746
I think, if I'm not mistaken sometimes,

127
00:07:06.746 --> 00:07:10.238
yell at you if you pass something
that's not gonna change.

128
00:07:10.238 --> 00:07:13.729
I have been yelled at it by before,
but will tell you.

129
00:07:13.729 --> 00:07:16.357
But generally speaking,
the things that you basically,

130
00:07:16.357 --> 00:07:19.311
you can have static analysis to it or
you can look at your own code.

131
00:07:19.311 --> 00:07:21.088
What are the things that you're calling.

132
00:07:21.088 --> 00:07:22.963
That are coming from
outside the closure scope.

133
00:07:22.963 --> 00:07:30.168
So obviously, this exists
statically cuz I'm importing it.

134
00:07:30.168 --> 00:07:33.593
These two arguments, it's really items and
set items that could be possibly,

135
00:07:33.593 --> 00:07:36.212
I think if I put like update
items in here I'll get yelled at.

136
00:07:41.191 --> 00:07:46.866
Yeah, you can see React to reduce
callback has an unnecessary dependency.

137
00:07:46.866 --> 00:07:49.594
Update item either exclude it or
remove the dependency array.

138
00:07:49.594 --> 00:07:53.359
Other out of scope values like aren't
valid dependencies cuz doesn't rerender

139
00:07:53.359 --> 00:07:54.141
the component.

140
00:07:56.519 --> 00:08:00.541
So you get a sense of what
the right things are in that sense.

141
00:08:00.541 --> 00:08:01.711
You can have the tooling help you.

142
00:08:07.214 --> 00:08:09.934
You can put it through all these.

143
00:08:09.934 --> 00:08:14.096
Should have kept that set up just function
there but we'll do it in a second.

144
00:08:16.858 --> 00:08:21.443
But these are now every unless items
change which is a thing that happens

145
00:08:21.443 --> 00:08:25.036
a lot In this particular if I
put something else in here,

146
00:08:25.036 --> 00:08:28.490
like a timer or something,
that doesn't change it.

147
00:08:28.490 --> 00:08:32.920
These will stay the same and
they won't trigger a reminder, right yeah.

148
00:08:32.920 --> 00:08:37.955
&gt;&gt; So, definitely speaking,
if the function does not have any effect.

149
00:08:37.955 --> 00:08:41.910
And it definitely is a pure function and
you're interested only in the output you

150
00:08:41.910 --> 00:08:44.658
useMemo because you don't
even need to run it anymore.

151
00:08:44.658 --> 00:08:46.920
&gt;&gt; Mm-hm.
&gt;&gt; And in cases like this,

152
00:08:46.920 --> 00:08:52.932
when you have some sort of effect where
you're in state or doing anything else.

153
00:08:52.932 --> 00:08:56.507
You useCallback because you're
interested in the execution of the body.

154
00:08:56.507 --> 00:08:58.631
&gt;&gt; Yep, exactly right.

155
00:08:58.631 --> 00:09:01.148
And the important thing
to note is that like,

156
00:09:01.148 --> 00:09:03.209
this is only if I want these helpers.

157
00:09:03.209 --> 00:09:08.217
If I was comfortable passing down
set items to the entire chain or

158
00:09:08.217 --> 00:09:10.083
dispatch on a reducer.

159
00:09:10.083 --> 00:09:12.775
Like I said before those
are the same value every time.

160
00:09:12.775 --> 00:09:15.581
It's only because I'm whipping these
functions up on the fly up here.

161
00:09:15.581 --> 00:09:19.328
Cuz I need to for some reason maybe
there's some information that they need

162
00:09:19.328 --> 00:09:21.238
up here something along those lines.

163
00:09:21.238 --> 00:09:25.474
Then I do need to say unless it as
long as the things you rely on,

164
00:09:25.474 --> 00:09:30.442
as long as the reason why you're up
here hasn't changed be the same one,

165
00:09:30.442 --> 00:09:35.263
but set items itself dispatch on use
reducer stuff along those lines.

166
00:09:35.263 --> 00:09:36.963
Those are static every time,

167
00:09:36.963 --> 00:09:40.841
they are the same reference like
this has already been done to them.

168
00:09:40.841 --> 00:09:45.141
Cuz they're just updating that
data structure inside of React.

169
00:09:45.141 --> 00:09:46.832
They have access to
the full history of things.

170
00:09:46.832 --> 00:09:47.417
They know everything.

171
00:09:47.417 --> 00:09:51.182
They don't necessarily care about
what's in this current closure scope.

172
00:09:51.182 --> 00:09:53.621
But if you define the function here,

173
00:09:53.621 --> 00:09:56.700
everything in this scope
is accessible to it.

174
00:09:56.700 --> 00:10:01.362
And if those variables have changed,
you're gonna get

175
00:10:01.362 --> 00:10:06.432
an old version of the function
that knows about an old world.

176
00:10:06.432 --> 00:10:10.861
When Hooks came out,
it's like you traded all of your class

177
00:10:10.861 --> 00:10:14.767
hierarchy problems for
closure problems, right?

178
00:10:14.767 --> 00:10:15.680
It's so much simpler.

179
00:10:15.680 --> 00:10:19.878
Now you have a new set of things a worker,
which is how closures work in JavaScript.

180
00:10:19.878 --> 00:10:24.761
And will occasionally bite you but
this will always be whatever items

181
00:10:24.761 --> 00:10:29.484
was at the time it was written,
not what it is eventually, right.

182
00:10:29.484 --> 00:10:33.047
So this says if items changes
throw the old one out.

183
00:10:33.047 --> 00:10:35.621
And get me one that knows about
what the current latest and

184
00:10:35.621 --> 00:10:37.398
greatest version of items is, right.

185
00:10:37.398 --> 00:10:41.754
And since we immutably changed things if
we had mutable state that wouldn't be

186
00:10:41.754 --> 00:10:43.935
the same thing that we were modifying.

187
00:10:43.935 --> 00:10:48.764
But like we've long since either discarded
it or actually garbage collected it.

188
00:10:48.764 --> 00:10:51.682
Not because there's a closure scope,
but generally speaking,

189
00:10:51.682 --> 00:10:53.599
it will be an old version
of that variable.

190
00:10:53.599 --> 00:10:59.041
So this is a way to say that's totally
cool because I wanna React Memo to work,

191
00:10:59.041 --> 00:11:00.568
but at the same time.

192
00:11:00.568 --> 00:11:04.339
If that becomes out of date,
then go get me a fresh one, all right.

193
00:11:04.339 --> 00:11:06.715
Which way you do need to pass
that new thing down, and

194
00:11:06.715 --> 00:11:07.961
have all that kind of work.

195
00:11:07.961 --> 00:11:10.899
And this is true even with
the context API, right.

196
00:11:10.899 --> 00:11:14.039
Because the contact API is just basically
pulling this out of the function.

197
00:11:14.039 --> 00:11:19.240
And letting places hook into it but all
the same rules apply in this case as well.

198
00:11:19.240 --> 00:11:23.634
But this is a powerful way to get
functions that we find that will then work

199
00:11:23.634 --> 00:11:25.083
us through React Memo.

200
00:11:25.083 --> 00:11:29.577
I should put back that silly
function that I wrote earlier.

201
00:11:29.577 --> 00:11:31.719
Did I just saved it?

202
00:11:31.719 --> 00:11:35.064
No, so, we'll just say

203
00:11:45.539 --> 00:11:46.424
Cool.

204
00:11:57.659 --> 00:12:04.111
SetTimeout, For

205
00:12:04.111 --> 00:12:08.107
a second here

206
00:12:08.107 --> 00:12:13.925
we'll flip over,

207
00:12:17.890 --> 00:12:20.359
And just so you make sure we're
keeping ourselves honest.

208
00:12:34.662 --> 00:12:37.008
The application re-renders, right.

209
00:12:37.008 --> 00:12:39.250
You saw the big box
around the entire thing.

210
00:12:39.250 --> 00:12:41.377
Because that's where we're
changing that state.

211
00:12:41.377 --> 00:12:44.524
Now that should, but
nothing else re-rendered.

212
00:12:44.524 --> 00:12:46.794
Right, because those are still
the same update and remove.

213
00:12:46.794 --> 00:12:48.726
They're getting passed
all the way through.

214
00:12:48.726 --> 00:12:52.644
Like I said before, if you just wanted
to pass setItems all the way through and

215
00:12:52.644 --> 00:12:56.260
then figure out everything else down
at the bottom, that also works and

216
00:12:56.260 --> 00:12:58.387
will save you the useCallbacks, right.

217
00:12:58.387 --> 00:13:02.304
You can just import all these functions in
all the different places that you need to.

218
00:13:02.304 --> 00:13:07.078
And I think that works if you're just
trying to get it down to one grandchild,

219
00:13:07.078 --> 00:13:08.997
great grandchild component.

220
00:13:08.997 --> 00:13:11.928
If you find yourself needing it
at various places along the way,

221
00:13:11.928 --> 00:13:14.383
now you're just importing
stuff all over the place.

222
00:13:14.383 --> 00:13:16.666
Now it becomes like, is it performance?

223
00:13:16.666 --> 00:13:21.014
Sure, is it code that you can maintain?

224
00:13:21.014 --> 00:13:25.979
No, right, one of my hot takes is
that backend services when they

225
00:13:25.979 --> 00:13:30.871
don't scale it's because
the database falls over under load.

226
00:13:30.871 --> 00:13:35.007
And stuff like that a lot of times with
front end code bases we do manage just

227
00:13:35.007 --> 00:13:36.616
like tons and tons of state.

228
00:13:36.616 --> 00:13:38.869
It's that like all of a sudden
when we get asked for

229
00:13:38.869 --> 00:13:41.079
a very simple feature we
tell them three months.

230
00:13:41.079 --> 00:13:44.800
It's because sometimes we over
optimized for different things.

231
00:13:44.800 --> 00:13:48.307
And now maintaining your own code
base is borderline impossible, right.

232
00:13:48.307 --> 00:13:52.549
And so sometimes it's about thinking about
those trade offs in that sense as well.

233
00:13:52.549 --> 00:13:57.049
But yeah, these are static but
any function that you make,

234
00:13:57.049 --> 00:14:00.292
along the way, if you don't deal with it.

235
00:14:00.292 --> 00:14:03.852
Or either rapid or then do these
techniques where you're just passing thing

236
00:14:03.852 --> 00:14:06.424
and then importing the other
pieces where you need it.

237
00:14:06.424 --> 00:14:10.242
You will end up breaking your own React
memo, and then also paying the cost for

238
00:14:10.242 --> 00:14:12.194
that react revenue in the first place.

239
00:14:12.194 --> 00:14:14.443
It's like you get
the worst of both worlds.

240
00:14:14.443 --> 00:14:17.020
You're now doing
the comparison all the time.

241
00:14:17.020 --> 00:14:20.394
And it's always failing, right.

242
00:14:20.394 --> 00:14:23.173
You might as well just taking it would
have been more performant without

243
00:14:23.173 --> 00:14:24.854
the React memo on it at that point, right.

244
00:14:24.854 --> 00:14:26.878
Because like it would have
been re-rendering anyway.

245
00:14:26.878 --> 00:14:31.059
And so it's like that's where sometimes
measuring is important which is sure.

246
00:14:31.059 --> 00:14:34.274
Try it out, absolutely put it on there.

247
00:14:34.274 --> 00:14:36.952
Try to guess a future you is
gonna have to deal with, right,

248
00:14:36.952 --> 00:14:39.541
because you can't measure
future years code right now.

249
00:14:39.541 --> 00:14:41.783
But then make sure that you're
actually getting a gain or

250
00:14:41.783 --> 00:14:43.380
make sure they're stopping anything.

251
00:14:43.380 --> 00:14:47.160
If you just blindly take it as advice.

252
00:14:47.160 --> 00:14:51.003
And you just go for it you could
literally be making the problem maybe not

253
00:14:51.003 --> 00:14:53.065
dramatically worse, but over time.

254
00:14:53.065 --> 00:14:56.203
Incrementally worse,
right until you then have to.

255
00:14:56.203 --> 00:15:00.900
And it's a lot harder to triage
why a bunch of light implicitly

256
00:15:00.900 --> 00:15:04.075
memorizing stuff is slowing stuff down.

257
00:15:04.075 --> 00:15:06.638
Than just seeing a prop shoot
all the way down through it, so

258
00:15:06.638 --> 00:15:07.932
you get a harder bug to solve.

259
00:15:07.932 --> 00:15:12.669
Also, the idea of caching stuff
when it shouldn't be cast.

260
00:15:12.669 --> 00:15:15.965
Every year you take on not
only performance risk, but

261
00:15:15.965 --> 00:15:20.738
you also take on a little bit of a
weirdness cache invalidation problem mess.

262
00:15:20.738 --> 00:15:22.183
Where you now have a weird bug, right.

263
00:15:22.183 --> 00:15:23.847
You're playing with a little bit of fire.

264
00:15:23.847 --> 00:15:28.792
That's why component hierarchies first,
right stuff like memo lane,

265
00:15:28.792 --> 00:15:31.884
those things are there for
a reason, right.

266
00:15:31.884 --> 00:15:36.105
Absolutely use them, but we try to do our
due diligence as we're going through.

267
00:15:36.105 --> 00:15:37.692
And we try to understand the problem and

268
00:15:37.692 --> 00:15:39.720
see what our options are that
are available to us.

269
00:15:41.243 --> 00:15:45.312
Awesome, so generally speaking,
let's look at,

270
00:15:45.312 --> 00:15:49.943
if I take out my silly code,
let's use the app a little bit.

271
00:15:49.943 --> 00:15:52.979
There's still gonna be a decent amount
of cuz there's really only items in this

272
00:15:52.979 --> 00:15:53.671
particular one.

273
00:15:53.671 --> 00:15:55.538
We'll play with some
other ones in a second.

274
00:15:55.538 --> 00:15:57.613
But like if I edit one,

275
00:15:57.613 --> 00:16:03.301
it's a lot of things like new
item name is that one rendering.

276
00:16:03.301 --> 00:16:04.035
That's interesting.

277
00:16:04.035 --> 00:16:04.789
Do we put it on that one?

278
00:16:04.789 --> 00:16:08.719
Cuz that one should not, right?

279
00:16:08.719 --> 00:16:11.796
That's when we would like
to see stop at this point.

280
00:16:11.796 --> 00:16:12.726
That's interesting.

281
00:16:12.726 --> 00:16:16.002
I'm curious why.

282
00:16:16.002 --> 00:16:18.049
it's getting an item to ever
useCallback on that one.

283
00:16:18.049 --> 00:16:19.291
That one should stop.

284
00:16:19.291 --> 00:16:19.937
Let's take a look

285
00:16:27.720 --> 00:16:29.813
Interesting, let's make sure
that's actually happening.

286
00:16:29.813 --> 00:16:31.095
Well, I'll take a look at the second.

287
00:16:35.465 --> 00:16:37.014
That's true.

288
00:16:42.131 --> 00:16:45.553
All right, so we saw header.

289
00:16:45.553 --> 00:16:48.055
It might just been the one above and
the one below it and

290
00:16:48.055 --> 00:16:49.341
the shell around the side.

291
00:16:49.341 --> 00:16:52.428
I can tell that I saw the green thing,
I was like, is that rendering?

292
00:16:52.428 --> 00:16:53.346
It's clearly not.

293
00:16:53.346 --> 00:16:57.173
The two lists which are theoretically
the same list before they're rendered.

294
00:16:57.173 --> 00:16:59.108
And let's talk about
that a little bit too,

295
00:16:59.108 --> 00:17:02.730
cuz I think there's an interesting point
there that is a tricky problem to solve.

296
00:17:02.730 --> 00:17:06.158
The only things that are item was
prompting to update removed because

297
00:17:06.158 --> 00:17:06.935
items change.

298
00:17:06.935 --> 00:17:09.741
Everything is actually at this
moment working as expected.

