WEBVTT

1
00:00:00.380 --> 00:00:03.984
Often do you need to defer to the Chrome
Dev Tools when you work on the React

2
00:00:03.984 --> 00:00:06.160
application what are the cases.

3
00:00:06.160 --> 00:00:11.420
Let's say,
when is the React profiler not enough?

4
00:00:11.420 --> 00:00:12.460
&gt;&gt; I mean, so it's tricky, right?

5
00:00:12.460 --> 00:00:16.715
Like insofar that I'm working
on a JavaScript application, so

6
00:00:16.715 --> 00:00:21.040
stuff like the debugger and
break points and console logs.

7
00:00:21.040 --> 00:00:25.403
It is tricky for me to delineate cuz
I am in them all the time, right?

8
00:00:25.403 --> 00:00:31.176
I would say that I still just generally
did my code behave the way I wanted it to,

9
00:00:31.176 --> 00:00:34.239
stuff like the elements in the console and

10
00:00:34.239 --> 00:00:38.637
some of the other pieces
are still incredibly useful to me.

11
00:00:38.637 --> 00:00:40.780
I think it's when I know I have a problem.

12
00:00:40.780 --> 00:00:44.524
And for me, part of the reason it's really
hard for me to answer that question is cuz

13
00:00:44.524 --> 00:00:48.950
if any of the tools are open, I'm still
getting those green flashing boxes.

14
00:00:48.950 --> 00:00:52.026
So I'm simultaneously
looking at my console and

15
00:00:52.026 --> 00:00:55.787
getting information from
the React tools at the same time.

16
00:00:55.787 --> 00:01:00.749
So for me it's ubiquitous in both
cases which is one of the things I

17
00:01:00.749 --> 00:01:02.926
really like about the tool.

18
00:01:02.926 --> 00:01:09.143
&gt;&gt; And the second question is how much
overhead does the benchmarking itself add?

19
00:01:09.143 --> 00:01:12.016
So let's say if I'm noticing
a particular number,

20
00:01:12.016 --> 00:01:15.820
do I need to discount it by a certain
percent when assuming it runs in-

21
00:01:15.820 --> 00:01:17.699
&gt;&gt; I don't know if there's a heuristic.

22
00:01:17.699 --> 00:01:21.161
It is multiple times slower, right?

23
00:01:21.161 --> 00:01:23.627
I've even heard the word
exponential thrown around,

24
00:01:23.627 --> 00:01:25.351
that sounds like hyperbole, right?

25
00:01:25.351 --> 00:01:29.449
But I think it is saying that it is
maybe two to three times slower is

26
00:01:29.449 --> 00:01:30.502
probably fair.

27
00:01:30.502 --> 00:01:34.645
&gt;&gt; So the general heuristic I think we
could agree on is that if you're running

28
00:01:34.645 --> 00:01:39.337
and you see proportionally that this has
decreased, that means you've improved.

29
00:01:39.337 --> 00:01:44.014
But the exam it probably will be even
more performant once you run production

30
00:01:44.014 --> 00:01:46.735
build without the overhead of the.

31
00:01:46.735 --> 00:01:49.578
&gt;&gt; Yeah, and it depends on the size
of the code base and stuff like that.

32
00:01:49.578 --> 00:01:53.890
There is a way to build a production
at least in create React app.

33
00:01:53.890 --> 00:01:55.792
And there's different ways for
every different setup,

34
00:01:55.792 --> 00:01:57.890
whether you're using Vite,
Webpack, your own thing.

35
00:01:57.890 --> 00:02:02.426
There are various ways to also make a
production build that has the profiling in

36
00:02:02.426 --> 00:02:03.190
it, right?

37
00:02:03.190 --> 00:02:05.910
So you can get a closer
to a real number and

38
00:02:05.910 --> 00:02:09.830
the regular Chrome tools will
work on a production build,

39
00:02:09.830 --> 00:02:14.240
you just won't get a cheat sheet
to what component it is, right?

40
00:02:14.240 --> 00:02:19.111
The thing that is costing you all that
extra time is all the information that

41
00:02:19.111 --> 00:02:20.560
makes it useful.

42
00:02:20.560 --> 00:02:26.068
But yeah, to your point, especially if one
has a system where they can kind of a lot,

43
00:02:26.068 --> 00:02:29.482
they have metrics in their
build process to be like,

44
00:02:29.482 --> 00:02:34.839
it doesn't necessarily matter if it was
60 milliseconds in development mode,

45
00:02:34.839 --> 00:02:37.820
if it is 12% worse than
it was last sprint.

46
00:02:39.660 --> 00:02:44.756
Yeah, that's still a problem right and so
the relative numbers are still useful for

47
00:02:44.756 --> 00:02:47.425
figuring out if you
have an emerging issue.

48
00:02:47.425 --> 00:02:50.418
But yeah, it's just one of those
things which is the exact number,

49
00:02:50.418 --> 00:02:53.742
you shouldn't take particularly
seriously because it will be inflated.

50
00:02:55.440 --> 00:02:57.841
First, we're gonna talk about
Steve's Golden Rule of Performance,

51
00:02:57.841 --> 00:02:59.410
which I alluded to earlier and ruined.

52
00:02:59.410 --> 00:03:03.880
I forgot that I made that animation
because I felt it was that important.

53
00:03:03.880 --> 00:03:07.850
We will talk about the corollaries
doing this, which is,

54
00:03:07.850 --> 00:03:10.210
anything you don't do is faster.

55
00:03:10.210 --> 00:03:13.166
It's like preventing renders but
also preventing memoization,

56
00:03:13.166 --> 00:03:16.437
preventing renders, everything you
don't do is faster than doing it and

57
00:03:16.437 --> 00:03:18.830
that's ultimately what
performance comes down to.

58
00:03:18.830 --> 00:03:21.864
It's not like computer spending
extra time thinking and

59
00:03:21.864 --> 00:03:26.650
pondering life, it is doing extra work
that you have deemed unnecessary, right?

60
00:03:26.650 --> 00:03:29.774
Or as we'll get to the very
end of this course,

61
00:03:29.774 --> 00:03:34.970
it is doing work that is necessary at
a time that is not optimal, right?

62
00:03:34.970 --> 00:03:39.996
And where we end at the very end and
just kinda like paint the picture,

63
00:03:39.996 --> 00:03:45.730
which is sometimes you're doing a thing
that, yeah, it takes a lot, right?

64
00:03:46.830 --> 00:03:52.210
What the concurrency APIs in React do that
we'll see towards is they allow you to

65
00:03:52.210 --> 00:03:58.290
say like, hey, but first, maybe we react
to their actual typing and clicking.

66
00:03:58.290 --> 00:04:00.880
And then we can go back to doing
the expensive thing, right?

67
00:04:00.880 --> 00:04:02.860
Because that's really what we care about,
right?

68
00:04:02.860 --> 00:04:05.950
Long things might take long.

69
00:04:07.020 --> 00:04:10.769
Absolutely, but
we wanna get to the point where, okay, but

70
00:04:10.769 --> 00:04:14.210
our thing shouldn't totally freeze up,
right?

71
00:04:14.210 --> 00:04:17.630
And we should still respond to
keystrokes and stuff along those lines.

72
00:04:17.630 --> 00:04:19.355
But yeah, generally speaking,

73
00:04:19.355 --> 00:04:23.160
the recurring theme is not
rendering is faster than rendering.

74
00:04:23.160 --> 00:04:25.080
Not memorizing faster than memorizing.

75
00:04:26.620 --> 00:04:29.870
Loading stuff later when you need it is
faster than loading in the very beginning.

76
00:04:31.070 --> 00:04:32.430
Yes, right.

77
00:04:32.430 --> 00:04:35.728
This is all true.

78
00:04:35.728 --> 00:04:38.942
Awesome, and so the color is,
as I kinda mentioned,

79
00:04:38.942 --> 00:04:43.371
not doing stuff as faster than doing
stuff, checking to see if you can skip

80
00:04:43.371 --> 00:04:47.962
doing stuff is sometimes actual work
that was slower than doing it, right?

81
00:04:47.962 --> 00:04:49.990
And this is why the measuring matters.

82
00:04:49.990 --> 00:04:53.550
If you think like, the thing's rendering,
it shouldn't totally render.

83
00:04:53.550 --> 00:04:57.378
You should look at that and see how much
it cost to stop it from rendering because

84
00:04:57.378 --> 00:05:00.730
maybe the act of rendering was
faster than memorizing it right?

85
00:05:00.730 --> 00:05:05.587
And that's why we use the tools, that's
why we use objective truth rather than

86
00:05:05.587 --> 00:05:09.447
just like I've written a blog post,
I should totally do this.

87
00:05:09.447 --> 00:05:14.127
Yep, and then, yeah, these things we'll
see in the kind of third chapter of

88
00:05:14.127 --> 00:05:17.810
the course,
which is putting stuff off is better.

89
00:05:17.810 --> 00:05:22.030
And then lastly, this is new to React 18.

90
00:05:22.030 --> 00:05:25.470
In React 17, everything was urgent, right?

91
00:05:25.470 --> 00:05:27.140
Well, it's one of those things,
everything was equal.

92
00:05:27.140 --> 00:05:29.869
And if everything's urgent,
nothing's urgent.

93
00:05:29.869 --> 00:05:34.414
And so React 18 gives us the ability to
delay between, this is important, this can

94
00:05:34.414 --> 00:05:39.037
wait, and we'll see how to use it in cases
where we're stuck with some kind of issue.

