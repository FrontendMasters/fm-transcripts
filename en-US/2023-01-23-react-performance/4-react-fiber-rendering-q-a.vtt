WEBVTT

1
00:00:00.290 --> 00:00:04.016
And under the hood,
while this is all happening from 16 later,

2
00:00:04.016 --> 00:00:07.358
which is I believe hooks,
yeah, hooks related to fiber.

3
00:00:07.358 --> 00:00:11.589
Fibers are just a data structure where
it keeps track of component interests as

4
00:00:11.589 --> 00:00:13.448
siblings, all those things, and

5
00:00:13.448 --> 00:00:16.605
try to figure out how to optimize
this as much as possible.

6
00:00:16.605 --> 00:00:18.010
This is why stuff like keys are important.

7
00:00:18.010 --> 00:00:22.032
This is why the general kind of other
advice that I would give you is, for

8
00:00:22.032 --> 00:00:26.392
instance, if something is mostly the same
but for some reason you're like,

9
00:00:26.392 --> 00:00:30.815
I've got this crazy trick where I'm gonna
switch it from a div to a span, those

10
00:00:30.815 --> 00:00:35.812
are the things where React's like I don't
even know what's going on anymore, right?

11
00:00:35.812 --> 00:00:40.660
And so this is a piece of programming
advice I will just give you which is

12
00:00:40.660 --> 00:00:43.947
that really fancy stuff seems really cool,
and

13
00:00:43.947 --> 00:00:48.138
the kind of more explicit stuff
is on a long enough timeline,

14
00:00:48.138 --> 00:00:52.437
almost always better for
both the computer and your friends.

15
00:00:52.437 --> 00:00:56.333
But yeah, fibers are how kind of
React wires this all together.

16
00:00:56.333 --> 00:00:59.296
It's the status structure,
we can keep the kinda previous iterations,

17
00:00:59.296 --> 00:01:00.986
it has a structure that it's looking at.

18
00:01:00.986 --> 00:01:04.856
And this is why I say the whole,
it's just a virtual DOM thing is less and

19
00:01:04.856 --> 00:01:06.018
less true these days.

20
00:01:06.018 --> 00:01:08.052
It's actually grown a bit since 2013.

21
00:01:08.052 --> 00:01:13.775
Imagine that, frameworks change
over almost a decade now, right?

22
00:01:13.775 --> 00:01:16.248
So yeah, there are lots of things but
this is why the keys are important.

23
00:01:16.248 --> 00:01:17.927
It's what was the order?

24
00:01:17.927 --> 00:01:23.213
Do I need to throw away this entire
list or table or what have you?

25
00:01:23.213 --> 00:01:25.548
Can I just insert one DOM element?

26
00:01:25.548 --> 00:01:31.109
Because sometimes I did this course on
JavaScript performance a long time ago.

27
00:01:31.109 --> 00:01:35.885
But sometimes it's actually cheaper
when you're updating the DOM to just

28
00:01:35.885 --> 00:01:39.239
blow away an entire section and
put it back, right?

29
00:01:39.239 --> 00:01:41.907
And sometimes it's cheaper
to just add one to the end.

30
00:01:41.907 --> 00:01:45.336
And so if you do not give React
the information that it needs,

31
00:01:45.336 --> 00:01:47.835
it cannot make good
choices on your behalf.

32
00:01:47.835 --> 00:01:50.648
And then you're like, React is slow.

33
00:01:50.648 --> 00:01:52.370
I'm like, is it React?

34
00:01:52.370 --> 00:01:55.051
Or are you making poor choices, right?

35
00:01:55.051 --> 00:01:59.455
And so understanding that
there are complications and

36
00:01:59.455 --> 00:02:05.302
that the whole process in which it
does this is not magic, is important.

37
00:02:05.302 --> 00:02:08.686
&gt;&gt; Mine might just be a misunderstanding,
but were you saying semantic HTML

38
00:02:08.686 --> 00:02:11.316
is worse than just divs for
React or the other way around?

39
00:02:11.316 --> 00:02:15.377
&gt;&gt; No, I'm saying if you came up
with some really fancy technique of,

40
00:02:15.377 --> 00:02:19.938
in this moment I'm gonna change it from
being a div to a span for this reason,

41
00:02:19.938 --> 00:02:22.030
it's gonna throw it out, right?

42
00:02:22.030 --> 00:02:26.542
Semantic HTML, great,
consistently semantic HTML, like weird,

43
00:02:26.542 --> 00:02:30.843
dynamic programming thing that
you did to impress your friends.

44
00:02:30.843 --> 00:02:31.954
&gt;&gt; Out of place.

45
00:02:31.954 --> 00:02:36.182
&gt;&gt; Yeah, is almost always going to
confuse the very delicate set of

46
00:02:36.182 --> 00:02:40.979
heuristics that has been finetuned
over the last nine years to help you.

47
00:02:40.979 --> 00:02:43.476
&gt;&gt; So one or the other throughout.

48
00:02:43.476 --> 00:02:49.410
&gt;&gt; Yeah, like the fancier you get,
the more you're walking on the edge.

49
00:02:49.410 --> 00:02:54.272
&gt;&gt; Is there a reason not to auto
sign a unique key at least to

50
00:02:54.272 --> 00:02:58.620
handle the remove and
change order to your list?

51
00:02:58.620 --> 00:03:01.473
&gt;&gt; As long as it's consistent, right?

52
00:03:01.473 --> 00:03:06.820
For instance, yeah,
bad ideas math.random, but, okay, right?

53
00:03:06.820 --> 00:03:09.009
That's a ridiculous bad idea.

54
00:03:09.009 --> 00:03:10.585
Other bad ideas, the array index,

55
00:03:10.585 --> 00:03:13.221
cuz that will change every
time the array changes, right?

56
00:03:13.221 --> 00:03:15.995
But that one seems like I don't have one,

57
00:03:15.995 --> 00:03:19.707
I'll just use that to get React
to be quiet and leave me alone.

58
00:03:19.707 --> 00:03:24.825
But sometimes we have situations where
it's like if you're usually getting

59
00:03:24.825 --> 00:03:29.874
something from an API, you usually got
some kind of ID to work with, right?

60
00:03:29.874 --> 00:03:32.491
But if you don't, then to your question,

61
00:03:32.491 --> 00:03:36.927
the right thing to do is around the time
you get that array or collection or

62
00:03:36.927 --> 00:03:40.654
whatever, assign everything
in their unique identifier.

63
00:03:40.654 --> 00:03:44.201
Map over it first before
[INAUDIBLE] a React component.

64
00:03:44.201 --> 00:03:49.803
Give them all, even a standard integer
that's not gonna change based on the where

65
00:03:49.803 --> 00:03:54.933
it is in the array or UUID, or grab
the NanoID like library and just, yeah.

66
00:03:54.933 --> 00:03:59.211
If you need to give stuff, if it didn't
come for you with some way, shape or form,

67
00:03:59.211 --> 00:04:02.995
like it was just an array of strings
that could have duplicates, right?

68
00:04:02.995 --> 00:04:07.585
Go through them first and maybe map them
into an object that's got whatever that

69
00:04:07.585 --> 00:04:10.061
string was, and then a unique ID, right?

70
00:04:10.061 --> 00:04:12.871
Especially if it's changing in any way,
shape, or form.

71
00:04:12.871 --> 00:04:15.406
Which is like on a long enough timeline,

72
00:04:15.406 --> 00:04:20.419
assume anything like when you first wrote
the code, this array never changes.

73
00:04:20.419 --> 00:04:23.750
If you've been doing this more than
three months, it's changed on you.

74
00:04:23.750 --> 00:04:26.458
Right, so yeah,
I think grabbing it first and

75
00:04:26.458 --> 00:04:30.709
putting a unique identifier from
something in some way, shape or form.

76
00:04:30.709 --> 00:04:33.968
I said this in a previous one,
I got bit by this one time.

77
00:04:33.968 --> 00:04:37.826
We had actually an API with a unique
ID and for some reason somebody

78
00:04:37.826 --> 00:04:42.667
else on my team had used the name of the
templates cuz there's a list of templates,

79
00:04:42.667 --> 00:04:44.859
the name of the templates as the key.

80
00:04:44.859 --> 00:04:49.486
But you could have two of those, you could
have two templates of the same name, and

81
00:04:49.486 --> 00:04:53.042
it wasn't until I was like,
we were doing a migration thing and

82
00:04:53.042 --> 00:04:54.673
I had to reinvent the thing.

83
00:04:54.673 --> 00:04:58.685
I was throwing a bunch of dummy data
at it, where I had multiple ones and

84
00:04:58.685 --> 00:05:02.637
React went to a weird mode where
things weren't changing or moving.

85
00:05:02.637 --> 00:05:06.027
It didn't know what to update when cuz I
had two with the same unique identifier.

86
00:05:06.027 --> 00:05:07.587
And I thought I had found some unique bug.

87
00:05:07.587 --> 00:05:12.413
And then my teammate walked up to me,
looked at my screen,

88
00:05:12.413 --> 00:05:16.850
pointed at it and
reminded me that it was not the case.

89
00:05:16.850 --> 00:05:20.778
But above and beyond performance issues,
you could also end up with things aren't

90
00:05:20.778 --> 00:05:24.046
changing the way you thought and
you're getting no error messages.

91
00:05:24.046 --> 00:05:27.745
&gt;&gt; And run into similar examples of,
I think it's a unique ID, but

92
00:05:27.745 --> 00:05:30.430
it turns out under some
circumstances is not.

93
00:05:30.430 --> 00:05:35.183
If you do a search and
the search result array comes back and

94
00:05:35.183 --> 00:05:39.755
there might be a link to the page for
that search result.

95
00:05:39.755 --> 00:05:43.396
But if there are multiple
matches on a target page and

96
00:05:43.396 --> 00:05:48.197
they both come back as a different
search result, because they match

97
00:05:48.197 --> 00:05:51.359
different parts of the document-
&gt;&gt; Yep.

98
00:05:51.359 --> 00:05:54.316
&gt;&gt; They might have the same identifier,
so good.

99
00:05:54.316 --> 00:05:54.994
&gt;&gt; Yep.

100
00:05:54.994 --> 00:05:58.459
&gt;&gt; Good scenario to when you
get the API response just

101
00:05:58.459 --> 00:06:01.935
uniquely identify each element and
then render.

102
00:06:01.935 --> 00:06:03.822
&gt;&gt; Exactly,
if you don't get a unique thing,

103
00:06:03.822 --> 00:06:06.679
then you can give it to it upon
receiving it and use that to track it.

104
00:06:06.679 --> 00:06:08.918
Yeah, Mark.

105
00:06:08.918 --> 00:06:14.542
&gt;&gt; So we need to be very careful with the
context API as it lifts the state up for

106
00:06:14.542 --> 00:06:15.643
you, right?

107
00:06:15.643 --> 00:06:19.139
&gt;&gt; Yeah,
we spend a whole hour on that one.

108
00:06:19.139 --> 00:06:21.899
[LAUGH] I'm gonna do the spoiler alert.

109
00:06:21.899 --> 00:06:23.218
I'm gonna spoil it now.

110
00:06:23.218 --> 00:06:27.646
We're gonna do a bunch of things to make
an app renderless, and then we're gonna

111
00:06:27.646 --> 00:06:31.305
add the context API to it, and
then we're gonna start over [LAUGH].

112
00:06:31.305 --> 00:06:36.678
So as we're going through that initial
one just don't get your hopes up, right?

113
00:06:36.678 --> 00:06:41.654
So yes, the question was, does the context
API which then sits literally,

114
00:06:41.654 --> 00:06:44.920
if you think about where
you put those providers,

115
00:06:44.920 --> 00:06:48.530
you put it around the application
component, right?

116
00:06:48.530 --> 00:06:51.479
So they will trigger all sorts of things.

117
00:06:51.479 --> 00:06:54.327
Now, there are ways to solve for this.

118
00:06:54.327 --> 00:06:58.651
And one of the things that
you'll notice that a lot of

119
00:06:58.651 --> 00:07:03.368
the other larger libraries
don't have these problems,

120
00:07:03.368 --> 00:07:07.987
let's say hypothetically
I'm gonna use context API,

121
00:07:07.987 --> 00:07:13.307
I may use like my own,
I don't even need Redux, right?

122
00:07:13.307 --> 00:07:14.776
You'll notice flashes of green everywhere.

123
00:07:14.776 --> 00:07:17.270
And you'll notice install React Redux,
it doesn't.

124
00:07:17.270 --> 00:07:20.596
One, it's just optimized more than
you did at the very first thing.

125
00:07:20.596 --> 00:07:22.903
And then, two, in React 18,

126
00:07:22.903 --> 00:07:27.613
Redux is structured differently in so
far as the store external.

127
00:07:27.613 --> 00:07:31.274
And so it's not necessarily using
all the hooks that trigger stuff.

128
00:07:31.274 --> 00:07:35.992
It's actually using a completely
different hook called useSyncExterna.

129
00:07:35.992 --> 00:07:40.484
That is mostly meant for

130
00:07:40.484 --> 00:07:46.099
libraries to interact with,

131
00:07:46.099 --> 00:07:53.521
right, that you could totally use to.

132
00:07:53.521 --> 00:07:57.296
And if we have free time at some point,
I'll show it to you but like,

133
00:07:57.296 --> 00:08:00.831
yeah, using the context API,
then you get a new set of things.

134
00:08:00.831 --> 00:08:05.487
Luckily, in this workshop, if I might sell
you on sticking out with me, we will run

135
00:08:05.487 --> 00:08:10.010
into that issue and we will address that
issue, and we will solve that issue, and

136
00:08:10.010 --> 00:08:13.493
then will break it again, and
we'll solve it again, right?

137
00:08:13.493 --> 00:08:15.040
Fun times, all right.

138
00:08:17.594 --> 00:08:22.182
Speaking of questions coming in
that set me up for making promises,

139
00:08:22.182 --> 00:08:26.045
like I said before,
we talked about automate batching so

140
00:08:26.045 --> 00:08:29.602
I won't spend too long on it now,
but in React 18.

141
00:08:29.602 --> 00:08:34.700
And if you notice, if you just bump
up ]your React 18 from 17 to 18,

142
00:08:34.700 --> 00:08:38.909
and your package JSON,
you will immediately get yelled at.

143
00:08:38.909 --> 00:08:41.811
Without polite warning in the console,

144
00:08:41.811 --> 00:08:45.311
which is like you're
using React DOM.render,

145
00:08:45.311 --> 00:08:50.451
you need to use create route and
then from that route render it, right?

146
00:08:50.451 --> 00:08:53.169
That is an API change
that actually opts you

147
00:08:53.169 --> 00:08:57.108
in to effectively some new
functionality that gets you this.

148
00:08:57.108 --> 00:09:00.174
So if you use,
I guess the other, it depends.

149
00:09:00.174 --> 00:09:05.923
Do you get automatic batching as if
you've chosen to upgrade to React 18 and

150
00:09:05.923 --> 00:09:10.700
ignore that suggestion,
then know you don't cuz you're still

151
00:09:10.700 --> 00:09:15.491
using React 17 earlier as
React DOM implementation, right?

152
00:09:15.491 --> 00:09:20.539
And so you get automatic batching if
you use the recommended concurrent

153
00:09:20.539 --> 00:09:25.097
C supporting version of mounting
the initial root node, Mark.

154
00:09:25.097 --> 00:09:28.322
&gt;&gt; Yeah,
there's a clarification on how this works.

155
00:09:28.322 --> 00:09:33.586
So is React rendering each component and
then saving the result of it and

156
00:09:33.586 --> 00:09:37.283
then when it re renders
kind of comparing the two?

157
00:09:37.283 --> 00:09:38.531
&gt;&gt; Basically yeah.

158
00:09:38.531 --> 00:09:43.488
So the question was,
it's saving the output from last time.

159
00:09:43.488 --> 00:09:44.310
Looking how it's changed.

160
00:09:44.310 --> 00:09:47.277
That is how it collects all the data for
the commit phase, right?

161
00:09:49.509 --> 00:09:50.452
Awesome.

162
00:09:52.217 --> 00:09:57.459
On the topic of the automatic batching,
which is before

163
00:09:57.459 --> 00:10:02.476
React 18, there was a way to like,
there was like,

164
00:10:02.476 --> 00:10:07.383
forget the name was like
unstable_batch updates,

165
00:10:07.383 --> 00:10:11.196
that might have actually been the name.

166
00:10:11.196 --> 00:10:14.267
And you could use that and like React
Redux used in other libraries used it like

167
00:10:14.267 --> 00:10:17.357
in the same way that before there was
the context API that we all know and love.

168
00:10:17.357 --> 00:10:20.996
There was always legacy,
never fully supported,

169
00:10:20.996 --> 00:10:26.083
always unstable one that all these
libraries used originally as well.

170
00:10:26.083 --> 00:10:28.162
And so there's this one
that those libraries used.

171
00:10:28.162 --> 00:10:31.001
Now that it's supported in React 18 for
everyone.

172
00:10:31.001 --> 00:10:34.839
I guess sometimes you need to, for
some reason, give people the opposite.

173
00:10:34.839 --> 00:10:39.432
So if you for some reason, need to get
out of automatic batching which you

174
00:10:39.432 --> 00:10:44.097
better have a real good reason like
when that when that PR lands on my desk,

175
00:10:44.097 --> 00:10:46.385
I'm gonna have questions for you.

176
00:10:46.385 --> 00:10:48.959
And if it's like I totally needed it for

177
00:10:48.959 --> 00:10:52.243
this very like the burden
of proof is on you to use.

178
00:10:52.243 --> 00:10:57.499
Look at all the docs even frames it, like
it starts out with a big warning thing.

179
00:10:57.499 --> 00:11:00.880
Using flushSync is uncommon and
can hurt the performance of your app.

180
00:11:00.880 --> 00:11:05.502
The burden of proof is on you if
you choose to use this one, but

181
00:11:05.502 --> 00:11:11.319
I just want to do my due diligence to make
you aware that it does in fact exist.

182
00:11:11.319 --> 00:11:16.473
If you need it, I've done my job,
I've told you about it.

183
00:11:16.473 --> 00:11:20.630
If you mention my name in the PR,
I will deny every minute of it despite

184
00:11:20.630 --> 00:11:23.657
the fact that this is recorded and
live streamed.

