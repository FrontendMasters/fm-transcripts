WEBVTT

1
00:00:00.000 --> 00:00:00.865
Hi, my name is Steve.

2
00:00:00.865 --> 00:00:03.709
I am the head of frontend
engineering at Temporal.

3
00:00:03.709 --> 00:00:07.831
We are going to talk
about React performance.

4
00:00:07.831 --> 00:00:13.428
And performance is a multifaceted
thing to talk about, right?

5
00:00:13.428 --> 00:00:17.940
Cuz even if you were trying to
make a React app performant,

6
00:00:17.940 --> 00:00:21.717
there are other things
that are React adjacent to

7
00:00:21.717 --> 00:00:25.881
the performance of your React application,
right?

8
00:00:25.881 --> 00:00:30.399
For instance, if you follow every
piece of advice in this talk and

9
00:00:30.399 --> 00:00:34.031
it's not on a CDN,
there's pieces there, right?

10
00:00:34.031 --> 00:00:35.573
There are other pieces to performance.

11
00:00:35.573 --> 00:00:40.188
So this talk we're gonna focus
mostly on what that means in

12
00:00:40.188 --> 00:00:42.644
terms of a React application.

13
00:00:42.644 --> 00:00:45.401
And I think it's super
exciting cuz along the way,

14
00:00:45.401 --> 00:00:48.488
you kind of learn a little bit
more about how React works.

15
00:00:48.488 --> 00:00:52.157
So we'll kinda get into what we're
gonna talk about and go over today.

16
00:00:52.157 --> 00:00:59.258
I do wanna point out that there are,
not one, not two, but five repos.

17
00:00:59.258 --> 00:01:03.271
Because, coming up with example apps that
highlight every different thing you wanna

18
00:01:03.271 --> 00:01:06.010
talk about, doing that one app,
turns out is difficult.

19
00:01:06.010 --> 00:01:11.441
During five apps, it's not as easy to
cover those but then you have five apps.

20
00:01:11.441 --> 00:01:15.261
So, I will put these here now, for
people who are tuning in live,

21
00:01:15.261 --> 00:01:16.522
they are in the chat.

22
00:01:16.522 --> 00:01:21.218
For those of you watching later, there
are probably someways convenient below or

23
00:01:21.218 --> 00:01:23.677
next to this video that you're watching.

24
00:01:23.677 --> 00:01:27.703
But yes,
I would right now kind of we will start,

25
00:01:27.703 --> 00:01:33.020
they are effectively in
chronological order, so no pressure.

26
00:01:33.020 --> 00:01:35.450
But we'll do a few little challenges and

27
00:01:35.450 --> 00:01:38.885
spelunking adventures with
the React Developer Tools,

28
00:01:38.885 --> 00:01:42.690
solve different kinds of problems and
different challenges.

29
00:01:42.690 --> 00:01:46.057
One of them I've just hidden
the slow part in various places,

30
00:01:46.057 --> 00:01:49.055
you can go suss it out and
figure out how to solve for it.

31
00:01:49.055 --> 00:01:49.888
And so, yeah,

32
00:01:49.888 --> 00:01:54.131
we have some practical examples that we
can work through in our time together.

33
00:01:54.131 --> 00:01:58.817
So let's kinda just level set and talk
about what are we gonna talk about in this

34
00:01:58.817 --> 00:02:02.090
course and who is it for,
and stuff along those lines.

35
00:02:02.090 --> 00:02:04.263
Basically, if you're looking for

36
00:02:04.263 --> 00:02:07.894
more insight to actually how
React does the thing, right?

37
00:02:07.894 --> 00:02:12.362
You're like, I heard something,
something virtual dom, right,

38
00:02:12.362 --> 00:02:14.528
or something along those lines.

39
00:02:14.528 --> 00:02:17.258
In the effort to understand
how we can either, A,

40
00:02:17.258 --> 00:02:20.055
help the performance of
a React applications or B,

41
00:02:20.055 --> 00:02:24.032
accidentally hurt the performance
of our React applications, right?

42
00:02:24.032 --> 00:02:30.825
We are accidentally going to have
to learn how React reacts, right?

43
00:02:30.825 --> 00:02:36.829
And then, along the way, the kind of
core thing is building a tool set for

44
00:02:36.829 --> 00:02:40.386
diagnosing performance issues in React.

45
00:02:40.386 --> 00:02:44.967
React is decently fast out of the box,
one of the things I will say is that a lot

46
00:02:44.967 --> 00:02:49.422
of the applications we are going to
use are simplified versions, right?

47
00:02:49.422 --> 00:02:51.992
Sometimes I had to put
an intentionally slow pace.

48
00:02:51.992 --> 00:02:55.084
I'm like, all right,
let's put 10,000 rows on the page, right?

49
00:02:55.084 --> 00:02:59.719
Most performance issues are usually
the accumulation of a bunch of

50
00:02:59.719 --> 00:03:03.774
tiny things that happened over three,
six months a year,

51
00:03:03.774 --> 00:03:08.014
none of them in and
of themselves are maybe the one big thing.

52
00:03:08.014 --> 00:03:12.411
It is possible to do one big terrible
thing that slows down your app, but

53
00:03:12.411 --> 00:03:15.069
you usually find that out pretty quickly.

54
00:03:15.069 --> 00:03:17.835
And there's who made
the last commit to main and

55
00:03:17.835 --> 00:03:20.196
you kinda reverse engineer from there.

56
00:03:20.196 --> 00:03:24.968
I think what is more interesting and
probably more practical is the,

57
00:03:24.968 --> 00:03:29.342
hey, when we did get init in whatever,
everything was great.

58
00:03:29.342 --> 00:03:31.678
18 months in, and now we're like,

59
00:03:31.678 --> 00:03:35.985
you start the jokes about how you're
gonna jokingly rewrite the app.

60
00:03:35.985 --> 00:03:38.866
And then eventually the jokes
become a not joke thing, right?

61
00:03:38.866 --> 00:03:42.343
And so this is to stop you from that thing
cuz everyone thinks that's a good idea

62
00:03:42.343 --> 00:03:43.194
in the beginning.

63
00:03:43.194 --> 00:03:46.188
I've done it more than once,
it's never a good idea.

64
00:03:46.188 --> 00:03:51.893
And then, I think probably the piece
that I'm most excited about,

65
00:03:51.893 --> 00:03:55.797
is as we walk towards
those first two bullets,

66
00:03:55.797 --> 00:03:59.801
looking at how to follow
React best practices,

67
00:03:59.801 --> 00:04:04.127
understanding why they are what they are,
right?

68
00:04:04.127 --> 00:04:09.363
So you ideally don't get yourself
into the situation where you

69
00:04:09.363 --> 00:04:15.005
have this increasingly burdensome
amount of bugs you have to find.

70
00:04:15.005 --> 00:04:18.981
The nice part about solving these
performance issues is the techniques that

71
00:04:18.981 --> 00:04:22.833
we're gonna see on these relatively
small example apps that are clear and

72
00:04:22.833 --> 00:04:23.589
to the point.

73
00:04:23.589 --> 00:04:28.381
Those techniques are the same
ones that you use when

74
00:04:28.381 --> 00:04:32.737
it's a big tangled mess
of performance bugs.

75
00:04:32.737 --> 00:04:35.042
Solving is just applying it repeatedly.

76
00:04:35.042 --> 00:04:37.185
It's kinda like untying a big knot, right?

77
00:04:37.185 --> 00:04:40.206
You just start pulling out the threads
with the technique you know how to do.

78
00:04:40.206 --> 00:04:45.404
And that is definitely
a running theme around here.

79
00:04:45.404 --> 00:04:50.544
Generally speaking,
there are kind of three major topics,

80
00:04:50.544 --> 00:04:57.516
about three or four major ways that you
can solve for performance issues in React.

81
00:04:57.516 --> 00:04:59.411
So what do we learn?

82
00:04:59.411 --> 00:05:04.668
We're gonna learn about all the caching
and memorizing stuff that you see,

83
00:05:04.668 --> 00:05:09.117
particularly the moment you go
React performance into Google.

84
00:05:09.117 --> 00:05:11.241
And you see these blog
posts that are like,

85
00:05:11.241 --> 00:05:13.312
throw React memo on everything, right?

86
00:05:13.312 --> 00:05:15.446
That's not a good idea.

87
00:05:15.446 --> 00:05:21.037
And the nice part is we will understand
what the tradeoffs are at that point.

88
00:05:21.037 --> 00:05:24.597
It is a tool that sometimes you need to
use and sometimes it is the right choice.

89
00:05:24.597 --> 00:05:29.630
But the second bullet of the way that you
structure your components and the way

90
00:05:29.630 --> 00:05:34.896
that you structure your state sometimes
can actually eliminate the performance

91
00:05:34.896 --> 00:05:39.639
problem without having to use,
I'm gonna cache this and memoize that.

92
00:05:39.639 --> 00:05:41.585
Because one of the themes,

93
00:05:41.585 --> 00:05:46.074
I have a slide dedicated to
Steve's Golden Rule performance.

94
00:05:46.074 --> 00:05:47.819
I'll do a spoiler now,

95
00:05:47.819 --> 00:05:52.631
which is that not doing stuff is
faster than doing stuff, right?

96
00:05:52.631 --> 00:05:53.942
And there's corollaries to that,

97
00:05:53.942 --> 00:05:55.957
which is doing stuff later
is better than doing it now.

98
00:05:55.957 --> 00:05:59.593
These works for both life as
well as performance, by the way.

99
00:05:59.593 --> 00:06:03.756
But the act of checking to see
if something's in the cache or

100
00:06:03.756 --> 00:06:06.430
memorized, that is a thing, right?

101
00:06:06.430 --> 00:06:10.082
And so yes, if it saves you more work than
rendering an expensive tree, totally.

102
00:06:10.082 --> 00:06:13.374
At the same time, if you structure your
code where you don't have to check, well,

103
00:06:13.374 --> 00:06:14.564
that's way faster, right?

104
00:06:14.564 --> 00:06:18.931
And so we'll talk about how you can
actually not have to use the kinda common

105
00:06:18.931 --> 00:06:23.108
performance tools and get better
performance than having to use them.

106
00:06:23.108 --> 00:06:28.181
And then React 18 brought a bunch of
new concurrency features, and for

107
00:06:28.181 --> 00:06:33.351
the weapons grade performance problem
that you really need to solve for.

108
00:06:33.351 --> 00:06:36.392
And we'll take a look at those brand
new concurrency features in React and

109
00:06:36.392 --> 00:06:38.367
how to use them and
when they're appropriate.

110
00:06:38.367 --> 00:06:43.427
They are definitely the, like,
okay, I have a very bespoke special

111
00:06:43.427 --> 00:06:48.325
issue that no amount of rearranging
my components is gonna solve.

112
00:06:48.325 --> 00:06:52.500
You now have some really great tools for
solving that.

113
00:06:52.500 --> 00:06:57.149
This is the last slide in the deck,
it's also the fourth or fifth slide or

114
00:06:57.149 --> 00:06:59.066
whatever, the fifth slide.

115
00:06:59.066 --> 00:07:03.923
But it's also the 48th slide as well,
and so kinda just give you a preview of

116
00:07:03.923 --> 00:07:08.065
the end, and where we end at the end
of this whole story together.

117
00:07:08.065 --> 00:07:11.017
Which is the kind of
hierarchy that you should

118
00:07:11.017 --> 00:07:15.066
follow when solving a performance
problem in React, right?

119
00:07:15.066 --> 00:07:17.863
One is if you can just
structure your components and

120
00:07:17.863 --> 00:07:20.333
state in a way that eases the problem,
well,

121
00:07:20.333 --> 00:07:24.494
that's good because you're not like,
other than rearranging your code,

122
00:07:24.494 --> 00:07:28.807
you're not doing the memoization and
caching, those extra checks, right?

123
00:07:28.807 --> 00:07:32.308
So that is inherently gonna be faster,
right?

124
00:07:32.308 --> 00:07:37.624
And like caching and memoization
are solid strategies but not only do they

125
00:07:37.624 --> 00:07:43.024
have a hopefully smaller cost than
rendering that entire part of the tree,

126
00:07:43.024 --> 00:07:47.412
but if you mess up caching,
you can have weird bugs, right?

127
00:07:47.412 --> 00:07:48.414
So it's like,

128
00:07:48.414 --> 00:07:53.667
you have to hope that the medicine is
better than the disease sometimes, right?

129
00:07:53.667 --> 00:07:58.274
As I say in, what are the only two
hard problems in computer science?

130
00:07:58.274 --> 00:08:02.018
Are naming things, cache invalidation
off by one errors, all right?

131
00:08:02.018 --> 00:08:05.348
As somebody who had to name a bunch of
projects, I definitely feel number one as

132
00:08:05.348 --> 00:08:08.030
somebody who has been bitten by
the caching memoization bugs.

133
00:08:08.030 --> 00:08:11.385
I understand number two as well.

134
00:08:11.385 --> 00:08:14.758
Then we have some of
the newer APIs in React.

135
00:08:14.758 --> 00:08:17.838
Suspense is a set of APIs.

136
00:08:17.838 --> 00:08:20.649
Really there's about one of them
that you can use currently,

137
00:08:20.649 --> 00:08:22.770
which is the idea of
lazy loading components.

138
00:08:22.770 --> 00:08:27.386
Stuff like lazily doing data fetching
is only available if you use a highly

139
00:08:27.386 --> 00:08:32.381
opinionated framework like next, or
remix, or something along those lines.

140
00:08:32.381 --> 00:08:37.828
So we'll just cover the ones that are
generally applicable to React apps today,

141
00:08:37.828 --> 00:08:43.048
which is loading components lazily,
who doesn't like doing stuff lazily?

142
00:08:43.048 --> 00:08:47.150
And then lastly, we'll talk a little bit
about the transition API which is brand

143
00:08:47.150 --> 00:08:48.128
new to React 18.

144
00:08:48.128 --> 00:08:51.852
And how and when and
why you might use it as well as,

145
00:08:51.852 --> 00:08:55.238
how exactly it works,
and all those things.

146
00:08:55.238 --> 00:08:56.794
So that's kinda where we end up.

