WEBVTT

1
00:00:00.000 --> 00:00:04.163
So now, let's talk about how does
React do, what it does, right?

2
00:00:04.163 --> 00:00:08.052
Because it's really hard to triage and
think about what could be the cause of

3
00:00:08.052 --> 00:00:11.894
the issue if you're like something
in virtual DOM, life is good, right?

4
00:00:11.894 --> 00:00:16.206
And so
let's talk about when something changes,

5
00:00:16.206 --> 00:00:19.395
what exactly goes on under the hood?

6
00:00:19.395 --> 00:00:24.014
So React's rendering cycle
has effectively three phases.

7
00:00:24.014 --> 00:00:27.600
And I think we mostly know about them,
right?

8
00:00:27.600 --> 00:00:29.195
And so we have the render phase.

9
00:00:29.195 --> 00:00:34.820
I think that the whole,
it's not necessarily true.

10
00:00:34.820 --> 00:00:38.110
There is a virtual dom, and
that was definitely true in 2013.

11
00:00:38.110 --> 00:00:40.631
It is increasingly less
true at this point.

12
00:00:40.631 --> 00:00:44.773
But the process still, and we'll see this
in another slide to see actually how

13
00:00:44.773 --> 00:00:47.178
it plays out,
which is the rendering phase.

14
00:00:47.178 --> 00:00:51.379
Our components at the end of the day
are a bunch of functions, or possibly,

15
00:00:51.379 --> 00:00:52.660
JavaScript classes.

16
00:00:52.660 --> 00:00:56.594
And so when something changes,
cuz once we render the page,

17
00:00:56.594 --> 00:01:02.165
if the user never clicks on a single thing
ever, you don't have performance issues.

18
00:01:02.165 --> 00:01:06.800
They took some kind of action,
or you're polling for

19
00:01:06.800 --> 00:01:13.299
the API every 30 seconds, something
has to happen to trigger rerender.

20
00:01:13.299 --> 00:01:18.461
React does not choose to rerender on
its own, something occurred either

21
00:01:18.461 --> 00:01:23.296
through your code, or most likely
cuz the user did a thing, right?

22
00:01:23.296 --> 00:01:26.686
They tend to do that on applications,
right?

23
00:01:26.686 --> 00:01:30.805
And if they never do a thing ever,
I wonder why this is a React app and

24
00:01:30.805 --> 00:01:35.017
not either a, a server side rendered app,
or b, just an HTML page.

25
00:01:35.017 --> 00:01:36.628
Those are super performance, right?

26
00:01:36.628 --> 00:01:38.392
You wanna solve your React
performance problems,

27
00:01:38.392 --> 00:01:39.670
that's the way to do it right there.

28
00:01:39.670 --> 00:01:43.585
So when something changes,
we go through the render phase,

29
00:01:43.585 --> 00:01:47.806
which is it invokes all the classes,
it calls all the functions,

30
00:01:47.806 --> 00:01:52.896
it looks at the output, and goes,
what's different from last time, right?

31
00:01:52.896 --> 00:01:55.142
And it gathers up all of those things.

32
00:01:55.142 --> 00:01:59.627
And then with the array of things,
array is probably an overloaded word.

33
00:01:59.627 --> 00:02:05.333
With the list of things that have
changed since the last time it rendered,

34
00:02:05.333 --> 00:02:10.224
it goes and figures out what
the most heuristic set of changes.

35
00:02:10.224 --> 00:02:15.274
Post performance data changes to the DOM
are to make and it makes us, right?

36
00:02:15.274 --> 00:02:19.326
It is one of those things where,
yes, if you were gonna sit there and

37
00:02:19.326 --> 00:02:23.325
handcraft every change on the page,
you can probably beat React.

38
00:02:23.325 --> 00:02:27.318
But as a general heuristic,
it has a set of rules that it applies, or

39
00:02:27.318 --> 00:02:30.833
what the right thing is to do
most of the time, and it works.

40
00:02:30.833 --> 00:02:35.600
And that's when it enters the commit
phase, it takes this list of changes it

41
00:02:35.600 --> 00:02:40.081
needs to make to the DOM, and
it does them, it updates the DOM, right?

42
00:02:40.081 --> 00:02:42.365
And if you ever use a ref in React,

43
00:02:42.365 --> 00:02:45.721
it also needs to then update those refs,
right?

44
00:02:45.721 --> 00:02:48.490
Refs are basically references
to exact DOM nodes.

45
00:02:48.490 --> 00:02:52.842
If it has changed the DOM, it does need
to do one more sweep to make sure like,

46
00:02:52.842 --> 00:02:56.174
are all those refs still pointing
to objects that exist and

47
00:02:56.174 --> 00:02:57.614
wiring them all back up?

48
00:02:57.614 --> 00:03:00.080
And then we have the clean up phase.

49
00:03:00.080 --> 00:03:05.110
Implicitly, in between commit and clean
up, there is this passive effects phase.

50
00:03:05.110 --> 00:03:07.850
That's where stuff like
use effect happens, right?

51
00:03:07.850 --> 00:03:12.750
And as we know, a use effect could call
a set state, and we're back, right?

52
00:03:12.750 --> 00:03:16.828
And that's why the dependency list matters
and stuff along those lines, Mark.

53
00:03:16.828 --> 00:03:21.550
&gt;&gt; Where do animations happen, and
how does that affect rendering?

54
00:03:21.550 --> 00:03:22.820
&gt;&gt; Animations depend, right?

55
00:03:22.820 --> 00:03:27.508
If it is an animation,
that is done through CSS, right?

56
00:03:27.508 --> 00:03:31.230
Then those actually will a lot of
times not happen on the main thread.

57
00:03:31.230 --> 00:03:36.189
If you are on the other hand taking a DOM
node and changing a value on it, those

58
00:03:36.189 --> 00:03:41.790
are synchronous, and they happen during a
lot of times you'll be modifying the DOM.

59
00:03:41.790 --> 00:03:43.425
It'll either happen to
a series of renders.

60
00:03:43.425 --> 00:03:44.888
It really depends,
if you're doing it on ref,

61
00:03:44.888 --> 00:03:46.140
then it will happen in the commit phase.

62
00:03:46.140 --> 00:03:50.240
If you're doing it by changing the state
every second, you're just gonna go on this

63
00:03:50.240 --> 00:03:53.547
Ferris wheel, is spinning very
fast through this entire process.

64
00:03:53.547 --> 00:03:57.657
But if it's a CSS class, then it will
happen on a different process altogether.

65
00:03:57.657 --> 00:04:02.083
Cool?

66
00:04:02.083 --> 00:04:08.226
All right, so let's look at this render
phase and how it actually works.

67
00:04:08.226 --> 00:04:13.920
Basically, the kind of high level is we've
got this idea of something happened.

68
00:04:13.920 --> 00:04:19.163
Usually, almost always,
that is some kind of state change.

69
00:04:19.163 --> 00:04:21.346
It's either a state change or
a prop change, but

70
00:04:21.346 --> 00:04:23.220
what's changed in something's props.

71
00:04:23.220 --> 00:04:27.595
Eventually, there was a state
change somewhere, right?

72
00:04:27.595 --> 00:04:30.266
The context could change,
but a lot of times,

73
00:04:30.266 --> 00:04:33.359
there's a use state hiding
in that context, right?

74
00:04:33.359 --> 00:04:39.682
And as I've talked about before and
we will talk about later,

75
00:04:39.682 --> 00:04:44.921
use state is just an abstraction
over use reducer.

76
00:04:44.921 --> 00:04:50.720
So if it happens in use state,
then it happens in use reducer.

77
00:04:50.720 --> 00:04:54.190
So we start out with our state change,
that triggers a render.

78
00:04:54.190 --> 00:04:59.699
And then the heuristic that React uses for
whether it should

79
00:04:59.699 --> 00:05:05.440
render a child component is,
did the parent change, right?

80
00:05:05.440 --> 00:05:09.709
There's no like, let me guess,
there's no other heuristic of

81
00:05:09.709 --> 00:05:13.670
the state change will trigger
on some parent node, right?

82
00:05:13.670 --> 00:05:18.804
And then all of its children will
be asked to rerender, right?

83
00:05:18.804 --> 00:05:20.834
And then at the end of that render phase,

84
00:05:20.834 --> 00:05:24.800
React will gather them all up before them
the guy who is different now, right?

85
00:05:24.800 --> 00:05:27.648
But every single one regardless.

86
00:05:30.074 --> 00:05:32.711
&gt;&gt; There's a question around,

87
00:05:32.711 --> 00:05:38.199
do these changes batch if
there's two separate components?

88
00:05:38.199 --> 00:05:39.880
&gt;&gt; I love questions
that I have slides for.

89
00:05:39.880 --> 00:05:43.196
I will answer now, then I'll answer it
again because I'm not gonna be rude and

90
00:05:43.196 --> 00:05:43.910
not answer now.

91
00:05:43.910 --> 00:05:49.446
So the question was, what happens
if we took a two state changes,

92
00:05:49.446 --> 00:05:52.575
three, five, ten at the same time?

93
00:05:52.575 --> 00:05:57.380
And do I go through this
rigmarole x number of times?

94
00:05:57.380 --> 00:06:03.290
And that question somewhat depends on
what version of React you are using.

95
00:06:03.290 --> 00:06:06.335
If you're using React 17 and earlier,

96
00:06:06.335 --> 00:06:10.174
which is a very real possibility for
a lot of people.

97
00:06:10.174 --> 00:06:15.142
React 18 has not been out that long, and
sometimes trying to get that upgrade

98
00:06:15.142 --> 00:06:19.670
prioritized on the old list isn't
the easiest thing to do in the world.

99
00:06:19.670 --> 00:06:22.208
There's no shame about that.

100
00:06:22.208 --> 00:06:26.162
So in React 17 and earlier,
sometimes they were batched,

101
00:06:26.162 --> 00:06:29.273
they were batched in an event handler,
right?

102
00:06:29.273 --> 00:06:34.533
So in and on change, in and
on submit, they were batched.

103
00:06:34.533 --> 00:06:40.556
There's a giant asterisk and seven other
disclaimers on that only in that function.

104
00:06:40.556 --> 00:06:45.251
If that event handler had a set timeout,
or

105
00:06:45.251 --> 00:06:50.599
I don't know, a promise and
an async function,

106
00:06:50.599 --> 00:06:54.783
no longer were they batched, right?

107
00:06:54.783 --> 00:07:00.160
So in a very small subset of cases,
they were batched in React 17 and earlier.

108
00:07:00.160 --> 00:07:06.880
In React 18 and later, which I guess
is just React 18 and whatever.

109
00:07:06.880 --> 00:07:11.369
Minor version's on at this point,
you get automatic batch.

110
00:07:11.369 --> 00:07:15.178
And now,
they are batched across the board.

111
00:07:15.178 --> 00:07:19.175
In React 18, they will basically
run through the code or

112
00:07:19.175 --> 00:07:21.715
collect up all of the state changes.

113
00:07:21.715 --> 00:07:25.898
And then when it's got through that
entire process, then it will go and

114
00:07:25.898 --> 00:07:28.000
do the next round of state changes.

115
00:07:28.000 --> 00:07:29.742
So the answer is it depends.

116
00:07:29.742 --> 00:07:32.890
It depends on whether you're using 18 or
17.

117
00:07:32.890 --> 00:07:38.307
If you're using 18, yes,
if you're using 17, it depends,

118
00:07:38.307 --> 00:07:43.160
right, in a probably the most common case,
yeah, right?

119
00:07:43.160 --> 00:07:49.048
But also awaiting promises is
relatively common as well.

120
00:07:49.048 --> 00:07:55.213
Yeah, the heuristic is a state change
can happen anywhere in the tree,

121
00:07:55.213 --> 00:08:00.479
and at that point,
it tells all of its children to rerender.

122
00:08:00.479 --> 00:08:08.160
Now, really, this graph is 90%
of what we're focusing on today.

123
00:08:08.160 --> 00:08:10.470
So there's a bunch of strategies here.

124
00:08:10.470 --> 00:08:15.387
One, right now, it's happening at
the top of this very simple tree.

125
00:08:15.387 --> 00:08:20.515
If you moved it down to one of those,
that second row, right, whatever,

126
00:08:20.515 --> 00:08:26.078
if you can make that state change happen
lower, fewer things have to rerender.

127
00:08:26.078 --> 00:08:29.316
It doesn't make everything rerender
whenever something happens,

128
00:08:29.316 --> 00:08:32.170
it says from the point that
the state change on down, right?

129
00:08:32.170 --> 00:08:34.051
So the further you can push
down that state change,

130
00:08:34.051 --> 00:08:37.126
which is sometimes antithetical to what
we're told when we first learning React.

131
00:08:37.126 --> 00:08:41.316
It's like you lift everything up and
you pass everything down, but

132
00:08:41.316 --> 00:08:45.078
don't lift it too high is what
this chart is saying, right?

133
00:08:45.078 --> 00:08:48.632
You lift it too high, you're gonna
trigger a lot of rerenders and

134
00:08:48.632 --> 00:08:50.062
stuff along those lines.

135
00:08:50.062 --> 00:08:54.980
So pushing it down as much as possible,
right, is the first and best, and arguably

136
00:08:54.980 --> 00:08:59.991
not always attainable, but step one, the
first thing that you should try, right?

137
00:08:59.991 --> 00:09:04.031
There's a step two,
which is kind of equally as good, but

138
00:09:04.031 --> 00:09:06.760
we'll talk about that one in a second.

139
00:09:06.760 --> 00:09:12.711
Then if that one doesn't work and
the tree is worthy of this,

140
00:09:12.711 --> 00:09:17.736
then it is worth saying,
somewhere in the middle.

141
00:09:17.736 --> 00:09:22.463
Can one of you step in and see if
this really needs to continue, right,

142
00:09:22.463 --> 00:09:25.043
just cuz that one up there started it.

143
00:09:25.043 --> 00:09:30.884
For me and my family,
nothing's changed for us.

144
00:09:30.884 --> 00:09:35.481
Especially, let's imagine this one down,
okay, we have a node that ends,

145
00:09:35.481 --> 00:09:36.839
right, right there.

146
00:09:36.839 --> 00:09:38.855
Memorizing that one, pointless.

147
00:09:38.855 --> 00:09:42.565
The act of doing it is not cuz we render.

148
00:09:42.565 --> 00:09:47.412
But let's say on the right
side of the screen,

149
00:09:47.412 --> 00:09:50.906
that goes down 47 more levels.

150
00:09:50.906 --> 00:09:56.570
Stopping that at level two or
three is probably worth it, right?

151
00:09:56.570 --> 00:09:59.703
Again, React does not try to
figure it out, it does not care,

152
00:09:59.703 --> 00:10:01.221
it's just gonna go, right.

153
00:10:01.221 --> 00:10:06.284
So where the cost benefit for any of these
techniques come to is how expensive if

154
00:10:06.284 --> 00:10:11.365
we kept going down this path at the place
that we could have stopped it, right?

155
00:10:11.365 --> 00:10:13.548
How expensive would have been?

156
00:10:13.548 --> 00:10:16.190
And it isn't worth it, and that's
the point where like, yeah, at that point.

157
00:10:16.190 --> 00:10:18.704
You've done the cost-benefit analysis,
it makes total sense.

158
00:10:18.704 --> 00:10:22.646
But doing it on a trade that's about to
end, probably not even worth it, right?

159
00:10:22.646 --> 00:10:28.470
Even if it's worth re-rendering,
okay, it's fine, relax.

160
00:10:28.470 --> 00:10:30.891
But yeah, they trigger down,
they keep going down.

161
00:10:30.891 --> 00:10:33.874
So part of it is to push that state
change down as far as you possibly can.

162
00:10:33.874 --> 00:10:36.860
And the second one is to stop it,
if you can.

163
00:10:36.860 --> 00:10:41.042
&gt;&gt; If I recall correctly at some
point in Reddit, there was something,

164
00:10:41.042 --> 00:10:45.380
like if props didn't really change,
the component won't rerender.

165
00:10:45.380 --> 00:10:46.143
&gt;&gt; Yep.

166
00:10:46.143 --> 00:10:48.550
&gt;&gt; So that does not necessarily fit.

167
00:10:48.550 --> 00:10:52.245
And I remember I was confused when
profiling myself why it wasn't

168
00:10:52.245 --> 00:10:54.808
holding true, would you describe how true?

169
00:10:54.808 --> 00:10:57.705
But I clearly remember until,
as soon as props remain the same,

170
00:10:57.705 --> 00:11:00.130
the child will not rerender,
how does that fit here?

171
00:11:00.130 --> 00:11:02.784
&gt;&gt; Yeah, so there's a bunch of ways,
one of it we'll do today.

172
00:11:02.784 --> 00:11:07.627
So in class based components,
it was should component update, right?

173
00:11:07.627 --> 00:11:12.038
That was a method that you
can put in a class one, and

174
00:11:12.038 --> 00:11:17.690
that method got two arguments,
old props and new props, right?

175
00:11:17.690 --> 00:11:19.590
And you could theoretically look at them,
right?

176
00:11:19.590 --> 00:11:22.790
That was a manual way, and
we're doing manually with hooks.

177
00:11:22.790 --> 00:11:29.504
I believe you could have a class
that inherited from pure component.

178
00:11:29.504 --> 00:11:32.184
And pure component was
basically a subclass

179
00:11:32.184 --> 00:11:35.807
of component that had a should
component update that said,

180
00:11:35.807 --> 00:11:39.516
just do even a triple equal sign
on these two things, right?

181
00:11:39.516 --> 00:11:45.510
Or just shallowly compare them,
and then it would stop it.

182
00:11:45.510 --> 00:11:51.292
And I believe for the functional
components, there was maybe React or

183
00:11:51.292 --> 00:11:56.784
functional component, or
maybe it was a pure component version.

184
00:11:56.784 --> 00:12:01.743
But yeah, there was a functional
component version as well that did

185
00:12:01.743 --> 00:12:06.538
the very shallow should component
update out of the box, right?

186
00:12:06.538 --> 00:12:11.074
The tricky part to that is, one of the
things you always have to think about with

187
00:12:11.074 --> 00:12:14.785
performance is that if it was you
should always do this, right,

188
00:12:14.785 --> 00:12:18.455
then they would have just built
it into the framework, right?

189
00:12:18.455 --> 00:12:22.794
And so what happens is a lot of
those quality checks were completely

190
00:12:22.794 --> 00:12:24.351
unnecessary, right?

191
00:12:24.351 --> 00:12:30.087
Again, it is useful because failing one
of those should component updates or

192
00:12:30.087 --> 00:12:35.468
react dot memo or one of the other ones
very high on a tree that has a great,

193
00:12:35.468 --> 00:12:40.614
great, great to the 100th power
grandchild, totally worth it.

194
00:12:40.614 --> 00:12:43.548
But also calling on every almost dead end,
right,

195
00:12:43.548 --> 00:12:46.357
would slow your app down
more than it would help.

196
00:12:46.357 --> 00:12:49.746
And so what happened was you'll use those
components just as by default, right?

197
00:12:49.746 --> 00:12:53.744
Without thinking about it like, well,
that one's better cuz it checks, right?

198
00:12:53.744 --> 00:12:59.456
And then all of a sudden, they're doing
a thousand of these memoization checks for

199
00:12:59.456 --> 00:13:04.035
gains that were less than the cost
of doing the memoization check.

200
00:13:04.035 --> 00:13:09.817
So those, I believe, they might even
still be in there, I don't know.

201
00:13:09.817 --> 00:13:13.390
Sugar component obviously react at
memo which are the manual ones.

202
00:13:13.390 --> 00:13:18.598
But yeah, there are ways to do it, but
I will still, even if they are still

203
00:13:18.598 --> 00:13:23.660
in there, warn against them because
doing it everywhere all the time.

204
00:13:23.660 --> 00:13:28.937
Now, I think there was a talk about
a year ago about someone working

205
00:13:28.937 --> 00:13:33.932
on React kinda working on a heuristic
where they could actually

206
00:13:33.932 --> 00:13:38.855
do it when necessary and
not do it when not necessary, right?

207
00:13:38.855 --> 00:13:41.201
We've seen that sometimes, not doing
it all the time can be problematic.

208
00:13:41.201 --> 00:13:43.000
That's our jobs today.

209
00:13:43.000 --> 00:13:46.374
We've also seen from
the example we're pointing out,

210
00:13:46.374 --> 00:13:49.693
doing it all the time no
matter what also problematic.

211
00:13:49.693 --> 00:13:54.357
But if we could have a computer figure
out when to do it, when not to do, and

212
00:13:54.357 --> 00:13:59.026
get it right 98% of the time, again,
the gains will probably outweigh

213
00:13:59.026 --> 00:14:03.348
the 2% of the time that it calls
a memo when it shouldn't, right?

214
00:14:03.348 --> 00:14:04.790
So that's kind of the name of the game.

215
00:14:04.790 --> 00:14:07.988
So it's work on this,
and you think about it.

216
00:14:07.988 --> 00:14:12.084
The question that came up
before about batching, right?

217
00:14:12.084 --> 00:14:15.127
There was a little bit of
batching in certain cases, and

218
00:14:15.127 --> 00:14:17.800
then there was automatic fashion and
it worked.

219
00:14:17.800 --> 00:14:22.375
So it'd be interesting a year from now,
two years from now, the answer might be

220
00:14:22.375 --> 00:14:26.489
like the heuristic has shift, right,
there's work being done on it.

221
00:14:26.489 --> 00:14:31.532
But at this moment,
It falls under things that,

222
00:14:31.532 --> 00:14:40.143
the tricky parts that are left on us with
the knowledge of our application, right?

223
00:14:40.143 --> 00:14:43.455
In the same way, we start to put keys in
there cuz it's like React doesn't totally

224
00:14:43.455 --> 00:14:44.895
know what makes that thing unique,

225
00:14:44.895 --> 00:14:48.090
it just needs one piece of information
to know if it's roughly the same thing.

226
00:14:48.090 --> 00:14:52.111
There's still a few things left on us
to do to kind of inform React about

227
00:14:52.111 --> 00:14:53.621
what our intentions are.

228
00:14:53.621 --> 00:14:56.737
And so that's where it comes out here,
but so you're using what,

229
00:14:56.737 --> 00:15:00.202
if your component for the class-based
ones, but yeah class based ones.

230
00:15:00.202 --> 00:15:05.735
But yeah, using those consistently
can be more problematic than not.

231
00:15:05.735 --> 00:15:09.674
And so
I think an important thing to think about.

232
00:15:09.674 --> 00:15:14.452
We won't spend too much time on this,
but this is kind of an overall, like,

233
00:15:14.452 --> 00:15:19.305
how everything goes down, which is you
start out with a component mounting,

234
00:15:19.305 --> 00:15:22.607
which is run the function,
call the class, right?

235
00:15:22.607 --> 00:15:25.116
Figure out what that original output is,
that's the kind of purple section, right?

236
00:15:25.116 --> 00:15:29.630
You'll get back some JSX, whether it's the
render method on a class based component,

237
00:15:29.630 --> 00:15:31.400
or the output on a functional one.

238
00:15:31.400 --> 00:15:33.523
And that will kind of be there.

239
00:15:33.523 --> 00:15:36.970
And then cool, with the first one, you
don't even need to do any diffing, right?

240
00:15:36.970 --> 00:15:42.488
It's like this thing doesn't exist,
go put it on the page right on.

241
00:15:42.488 --> 00:15:44.380
And that's when it happens
in the commit phase.

242
00:15:44.380 --> 00:15:49.191
And then after that, which is
sometimes why using use effect for

243
00:15:49.191 --> 00:15:54.003
AJAX requests, network requests,
is somewhat problematic or

244
00:15:54.003 --> 00:15:58.297
tricky because you wait until
you've done everything.

245
00:15:58.297 --> 00:16:01.022
And then you're like let's go fetch
the data for this component, right?

246
00:16:01.022 --> 00:16:06.850
And there's various tricks, I think
maybe the libraries like React query,

247
00:16:06.850 --> 00:16:09.821
use SWR, and stuff along those lines.

248
00:16:09.821 --> 00:16:15.382
Yeah, I think user WR will make
a ref that can cache between cycles.

249
00:16:15.382 --> 00:16:17.960
It doesn't like trickery, right?

250
00:16:17.960 --> 00:16:21.960
But yeah, the use effect will happen after
you've already committed to the DOM.

251
00:16:21.960 --> 00:16:24.928
And then we'll clean up effects,
which might trigger some stuff.

252
00:16:24.928 --> 00:16:29.487
Then like we said before, and that much,
much simpler version of this,

253
00:16:29.487 --> 00:16:32.625
right, a use state or
use reducer will go ahead and

254
00:16:32.625 --> 00:16:36.627
be the thing that the catalyst for
the updating phase, right?

255
00:16:36.627 --> 00:16:40.314
We'll figure out what all the changes are,
we'll trigger that tree,

256
00:16:40.314 --> 00:16:44.747
we'll update the DOM again, and the things
kinda continue and go forward like that.

257
00:16:44.747 --> 00:16:49.923
But that is a simplified version
of the relatively involved process

258
00:16:49.923 --> 00:16:56.571
of figuring everything out, but is like we
mount that first time, then what changed?

259
00:16:58.978 --> 00:17:02.616
.Cool, the other interesting ones cuz
we will use them today is use memo,

260
00:17:02.616 --> 00:17:06.310
gets set that very first time, and then
use call backs are kind of pulled in to

261
00:17:06.310 --> 00:17:08.654
make sure we're not
redefining the function.

262
00:17:08.654 --> 00:17:13.048
So if you've never used those hooks
before, we'll use a whole lot today,

263
00:17:13.048 --> 00:17:17.118
don't worry, you will you ever use
them by the end, how about that?

264
00:17:17.118 --> 00:17:21.342
That is the kind of situation we find
ourselves in that we are going to be able

265
00:17:21.342 --> 00:17:22.158
to deal with.

