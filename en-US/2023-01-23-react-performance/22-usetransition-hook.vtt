WEBVTT

1
00:00:00.070 --> 00:00:02.410
There are two kind of new hooks.

2
00:00:02.410 --> 00:00:05.015
They're hooks even though the first
one says startTransition,

3
00:00:05.015 --> 00:00:06.540
it comes out the useTransition hook.

4
00:00:07.910 --> 00:00:11.479
Using the metaphor of use callback and

5
00:00:11.479 --> 00:00:16.283
use memo is a great way to
think about this, right?

6
00:00:16.283 --> 00:00:23.294
One of these is like, this function
I'm about to run is not urgent.

7
00:00:23.294 --> 00:00:27.432
The other one is like, well, you would put
a dependency array for something else.

8
00:00:27.432 --> 00:00:30.668
Which is like,
if you depend on that value,

9
00:00:30.668 --> 00:00:35.820
know that it's expensive, and
you should hold off, right?

10
00:00:35.820 --> 00:00:38.130
If there's nothing going on,
yeah, go for it, do it, right?

11
00:00:38.130 --> 00:00:43.926
Cuz an expensive function that's running
while the user's not doing anything,

12
00:00:43.926 --> 00:00:46.030
it's fine, [LAUGH], right?

13
00:00:46.030 --> 00:00:48.908
There's set auto callback in the browser,
right?

14
00:00:48.908 --> 00:00:51.752
Doing expensive stuff is not the problem.

15
00:00:51.752 --> 00:00:56.555
It's doing expensive stuff at the expense
of having a performing UI, right?

16
00:00:56.555 --> 00:01:01.328
And so waiting until some downtime to
then do the expensive things is the way

17
00:01:01.328 --> 00:01:02.025
forward.

18
00:01:03.035 --> 00:01:07.229
So I'm gonna spin up the, and
we're gonna do both, and I'll show you.

19
00:01:07.229 --> 00:01:13.015
But it's basically a way to then say,
hey, immediately update the input field.

20
00:01:13.015 --> 00:01:18.402
But wait until some downtime to
do the expensive thing, right?

21
00:01:18.402 --> 00:01:21.281
And this one's so bad that if you catch it
at the wrong moment you can still recreate

22
00:01:21.281 --> 00:01:21.961
something alike.

23
00:01:21.961 --> 00:01:28.152
But you will still become
noticeably better.

24
00:01:28.152 --> 00:01:29.694
So let's kinda take a look at that.

25
00:01:32.130 --> 00:01:33.572
Spin it up.

26
00:01:45.177 --> 00:01:47.422
All right, it's got ten thousand items.

27
00:01:47.422 --> 00:01:56.450
So let's see, It can get a little bit,
yeah, I just hit Delete a bunch of times.

28
00:01:56.450 --> 00:01:58.387
You have to believe me that
I've slammed on a keyboard,

29
00:01:58.387 --> 00:02:00.510
especially if you throttle
the CPU a little bit.

30
00:02:00.510 --> 00:02:05.198
Again, they bought me a nice one, right?

31
00:02:05.198 --> 00:02:06.910
But if you throttle the CPU,
you can definitely.

32
00:02:06.910 --> 00:02:09.564
But even if you try hard enough,
you can, yeah.

33
00:02:09.564 --> 00:02:13.128
[SOUND] I'm gonna regret that.

34
00:02:13.128 --> 00:02:15.535
So I should talk while that happens.

35
00:02:15.535 --> 00:02:18.981
It is going through this big list and
is trying to sort it, or filter it.

36
00:02:18.981 --> 00:02:22.837
I almost added sorting, too, and
I thought enough was enough, right?

37
00:02:22.837 --> 00:02:25.340
And so, yeah,
the experience isn't great, right?

38
00:02:25.340 --> 00:02:28.772
And yeah, maybe we don't have 10,000 rows,
of course, right?

39
00:02:28.772 --> 00:02:33.240
But there have been,
I think I alluded to this before.

40
00:02:33.240 --> 00:02:38.729
I worked on an email editor
where the initial version,

41
00:02:38.729 --> 00:02:45.170
a decade or more ago, used jQuery
to just manipulate the HTML and

42
00:02:45.170 --> 00:02:49.126
saved all the HTML to a server, right?

43
00:02:49.126 --> 00:02:53.083
And each version had to be
backwards-compatible with the last, right?

44
00:02:53.083 --> 00:02:55.579
And had all this legacy stuff in it.

45
00:02:55.579 --> 00:02:58.337
And so you couldn't just break and
do any of the modern parsers.

46
00:02:58.337 --> 00:03:01.253
You just break into an AST, move this
stuff around as you're dragging and

47
00:03:01.253 --> 00:03:02.770
dropping, sew it all back together.

48
00:03:02.770 --> 00:03:07.947
So, what we had to do is, take the HTML,
which had Outlook is based

49
00:03:07.947 --> 00:03:12.763
on Word's HTML engine,
not Microsoft Internet explorers.

50
00:03:12.763 --> 00:03:16.123
Yeah, yeah, yeah,
it's like hold my beer, I-

51
00:03:16.123 --> 00:03:17.333
&gt;&gt; [LAUGH]

52
00:03:17.333 --> 00:03:19.605
&gt;&gt; And has these weird HTML comments that

53
00:03:19.605 --> 00:03:22.731
mean things only in Outlook
that don't get parsed.

54
00:03:22.731 --> 00:03:26.956
And so, because of this in a modern React
app where you can't just manipulate

55
00:03:26.956 --> 00:03:28.194
the DOM and resave it.

56
00:03:28.194 --> 00:03:31.440
And the fact that that worked,
at all, it didn't, hence the rewrite.

57
00:03:31.440 --> 00:03:33.550
But we had to work with each version.

58
00:03:33.550 --> 00:03:38.090
So we had to parse these emails and
do all this crazy stuff.

59
00:03:38.090 --> 00:03:42.391
And depending on what was in the email,
it was the core functionality of the app,

60
00:03:42.391 --> 00:03:43.600
I couldn't not do it.

61
00:03:43.600 --> 00:03:47.083
I couldn't be like, well,
performance, [COUGH], it's like, yo,

62
00:03:47.083 --> 00:03:48.388
the business value here.

63
00:03:48.388 --> 00:03:51.820
And I didn't have this at the time,
so we did all sorts of wild stuff.

64
00:03:52.960 --> 00:03:56.572
But there are times where you have these,
they're like, no,

65
00:03:56.572 --> 00:04:01.270
there's not memorize it away, yet
do it as little as possible here for it.

66
00:04:01.270 --> 00:04:05.366
But there are some times you have
to do a computationally-intensive

67
00:04:05.366 --> 00:04:08.130
thing on somebody else's computer, right?

68
00:04:08.130 --> 00:04:13.320
Yes, when was the backend team supposed
to, yes, yes, yes, yes, it never happened.

69
00:04:13.320 --> 00:04:14.470
So there I was.

70
00:04:14.470 --> 00:04:16.610
And so this is kind of inspired by that.

71
00:04:16.610 --> 00:04:19.300
That's why you got the war
story all of a sudden.

72
00:04:19.300 --> 00:04:21.466
So let's talk about how to use this API.

73
00:04:21.466 --> 00:04:25.992
And now, there is a fundamental thing
that we have to think about here,

74
00:04:25.992 --> 00:04:30.569
which is, I think, One of the more,

75
00:04:30.569 --> 00:04:36.010
not mind-bending parser, think about.

76
00:04:36.010 --> 00:04:37.330
And here's a simple implementation.

77
00:04:37.330 --> 00:04:38.739
The fact of the matter is,

78
00:04:38.739 --> 00:04:42.534
we can argue about a useMemo versus
a useEffect, it doesn't matter.

79
00:04:42.534 --> 00:04:46.930
The function,
it's computationally-intensive JavaScript.

80
00:04:46.930 --> 00:04:50.495
I don't even know if the useMemo does
anything important at this point.

81
00:04:50.495 --> 00:04:53.319
It was for due diligence.

82
00:04:53.319 --> 00:04:57.543
But if you think about the concept,
we set the filter like we would on

83
00:04:57.543 --> 00:05:01.488
a normal input element,
like we always do every time, right?

84
00:05:01.488 --> 00:05:04.387
And if either the filters or
the list of task changes, right?

85
00:05:04.387 --> 00:05:10.630
Go get me a new filter list of tasks and
show them, right?

86
00:05:10.630 --> 00:05:13.940
And that is what we seek to do.

87
00:05:13.940 --> 00:05:18.290
But it's obviously not working
out well for us, right?

88
00:05:18.290 --> 00:05:22.510
I'm sure it pegs the CPU,
if we pulled out the profiler tools.

89
00:05:22.510 --> 00:05:26.932
And so what we wanna say is, hey,
responding to the user feedback,

90
00:05:26.932 --> 00:05:32.330
setting that filter that's powering
that input field, super important.

91
00:05:32.330 --> 00:05:35.507
Do that, absolutely.

92
00:05:35.507 --> 00:05:40.095
Filtering the list,
if you gotta wait a second

93
00:05:40.095 --> 00:05:44.104
before you do that, have at it, right?

94
00:05:44.104 --> 00:05:49.218
Okay and so this is a kind of a new API
that gives us the ability to do that,

95
00:05:49.218 --> 00:05:51.713
that we didn't have previously.

96
00:05:51.713 --> 00:05:54.250
And so, as I said before,
we have two new hooks.

97
00:05:54.250 --> 00:05:56.576
One of them is this useTransition.

98
00:05:56.576 --> 00:06:03.838
And the transition is something saying,
do this when you can, right?

99
00:06:03.838 --> 00:06:07.490
You can even see, it's got great
documentation in it already, right?

100
00:06:07.490 --> 00:06:10.170
Allows components to avoid
undesirable loading states.

101
00:06:10.170 --> 00:06:11.593
That's what I had, by waiting for

102
00:06:11.593 --> 00:06:14.007
content to load before
transitioning to the next screen.

103
00:06:14.007 --> 00:06:17.187
Also allows components to defer slower,
data fetching updates until subsequent

104
00:06:17.187 --> 00:06:19.620
renders so that more critical
can be rendered immediately.

105
00:06:19.620 --> 00:06:22.660
The latter one is like the use
case that we have here.

106
00:06:22.660 --> 00:06:24.735
But it's basically, yes,

107
00:06:24.735 --> 00:06:29.672
the ability to kind of put this thing off,
and get it ready and do it.

108
00:06:29.672 --> 00:06:33.916
And so, how this works,
if we pull out the useTransition hook,

109
00:06:33.916 --> 00:06:37.151
it's like it has the same
two values every time.

110
00:06:43.761 --> 00:06:46.722
Right, useTransition and
we get two things.

111
00:06:49.622 --> 00:06:52.720
IsPending, that's a boolean value.

112
00:06:52.720 --> 00:06:53.605
And you know why it's great?

113
00:06:55.095 --> 00:06:59.115
That means your thing is happening,
or your thing is at least cued, and

114
00:06:59.115 --> 00:07:01.785
you can show a loading indicator, right?

115
00:07:01.785 --> 00:07:04.938
This is when we're talking about,
with suspense data fetching,

116
00:07:04.938 --> 00:07:06.585
that we seek to have these things.

117
00:07:06.585 --> 00:07:08.355
You can see,
these are some of the parameters.

118
00:07:08.355 --> 00:07:10.596
Yes, your thing is happening and

119
00:07:10.596 --> 00:07:16.230
it will automatically turn that boolean
to false when you are done, right?

120
00:07:16.230 --> 00:07:25.000
And then when you say startTransition,
Awesome.

121
00:07:25.000 --> 00:07:28.470
And so now it is like, this one is the one
I said, one was kinda like useCallback,

122
00:07:28.470 --> 00:07:30.290
one was kinda like useMemo.

123
00:07:30.290 --> 00:07:35.597
This one is more like the useCallback,
which is like, hey,

124
00:07:35.597 --> 00:07:41.757
I'm gonna give you a function to run,
when it is a good time to do that.

125
00:07:41.757 --> 00:07:44.594
So we have this handle change, right?

126
00:07:44.594 --> 00:07:47.780
Here, we don't necessarily need
to trigger this all I did.

127
00:07:47.780 --> 00:07:51.191
So, what I might do is
begin to separate this out.

128
00:07:51.191 --> 00:07:56.516
I wanna separate the, right now,
updating the filter input and

129
00:07:56.516 --> 00:08:02.441
kicking off the getting the visible
tasks are intrinsically related.

130
00:08:02.441 --> 00:08:05.790
And there's probably different
ways I can go about this.

131
00:08:05.790 --> 00:08:13.023
Yeah, I think it's at the same points,
the half does at 16 here.

132
00:08:13.023 --> 00:08:17.430
I'm gonna completely separate them out.

133
00:08:18.630 --> 00:08:27.400
So we'll have, Filter, there we go.

134
00:08:31.022 --> 00:08:34.680
Because if they make them happen at the
same time, they're bound together, right?

135
00:08:34.680 --> 00:08:37.081
So if I wanna say one is important and
one is not,

136
00:08:37.081 --> 00:08:38.950
they have to be different concepts.

137
00:08:44.655 --> 00:08:47.740
So we've got these filters.

138
00:08:47.740 --> 00:08:50.249
This is just like,
it's a little thing that handles,

139
00:08:50.249 --> 00:08:52.750
it's a reducer because I like reducers.

140
00:08:52.750 --> 00:08:53.260
Leave me alone.

141
00:08:54.550 --> 00:08:57.840
That has, because it's got the drop downs
and there's three different fields,

142
00:08:57.840 --> 00:08:59.940
it manages it all to one thing.

143
00:08:59.940 --> 00:09:01.590
But you can look at the hook.

144
00:09:01.590 --> 00:09:03.500
It's just an abstraction over use reducer.

145
00:09:04.630 --> 00:09:05.860
Cool, so we've got that in place.

146
00:09:05.860 --> 00:09:08.284
So we've got this idea of
the filter inputs, and

147
00:09:08.284 --> 00:09:09.890
we can kinda use that, as well.

148
00:09:09.890 --> 00:09:13.345
And we will put those
in there at one point.

149
00:09:14.969 --> 00:09:18.226
Cool, cool, cool, so
we'll put the filter inputs.

150
00:09:18.226 --> 00:09:19.971
The filter inputs, that's what is in this.

151
00:09:19.971 --> 00:09:21.410
If we click in here,

152
00:09:21.410 --> 00:09:26.970
it's just inputs that are styled
with all the things that I need.

153
00:09:26.970 --> 00:09:30.210
So we'll keep that,
these will be based on that.

154
00:09:30.210 --> 00:09:32.990
So it'll still trigger the handle change,
right?

155
00:09:32.990 --> 00:09:36.629
But the input itself is now very quickly,
we're gonna set some strings and

156
00:09:36.629 --> 00:09:38.560
we're gonna call it a day, right?

157
00:09:38.560 --> 00:09:43.220
The one that is gonna kick off this beast,
right?

158
00:09:43.220 --> 00:09:45.120
We're gonna separate out
into the transition.

159
00:09:45.120 --> 00:09:49.580
So we're saying,
set the filter inputs immediately.

160
00:09:49.580 --> 00:09:50.390
That is important.

161
00:09:52.100 --> 00:09:53.690
Do it, right?

162
00:09:53.690 --> 00:09:57.093
Maybe I should pluralize this,
FilterInputs.

163
00:10:00.078 --> 00:10:01.910
Do it immediately.

164
00:10:01.910 --> 00:10:06.035
So right now, if I save this and

165
00:10:06.035 --> 00:10:11.127
flip over, super responsive again.

166
00:10:14.158 --> 00:10:16.178
But mostly because we're
not doing anything.

167
00:10:16.178 --> 00:10:20.387
[LAUGH] Again, to really highlight the
fact that not doing stuff is faster than

168
00:10:20.387 --> 00:10:24.013
doing stuff, breaking your app and
removing the functionality is

169
00:10:24.013 --> 00:10:27.010
an incredibly way to make
the inputs more responsive.

170
00:10:28.520 --> 00:10:32.772
So we never trigger the setting of
the filters that triggers this entirely

171
00:10:32.772 --> 00:10:33.879
expensive thing.

172
00:10:33.879 --> 00:10:37.472
So we're saying, immediately do this.

173
00:10:37.472 --> 00:10:39.786
But we talked about automatic
batching in the beginning.

174
00:10:39.786 --> 00:10:43.480
So it was like,
it's not like doing this and doing

175
00:10:49.119 --> 00:10:52.840
Yeah, well, first we'll set the inputs and
we'll get all the feedback we wanted, and

176
00:10:52.840 --> 00:10:54.763
then we'll do the expensive thing, right?

177
00:10:54.763 --> 00:10:55.627
No, we talked about this.

178
00:10:55.627 --> 00:10:58.718
We talked about this in the beginning.

179
00:10:58.718 --> 00:11:01.864
It always batches in event handlers,
right?

180
00:11:01.864 --> 00:11:04.542
I guess maybe previously
you could have tried to do

181
00:11:04.542 --> 00:11:07.985
some tomfoolery with a set timeout and
a dance with loading, and

182
00:11:07.985 --> 00:11:11.647
hope that they weren't typing when
your timeout came due, right?

183
00:11:11.647 --> 00:11:16.377
And could you get 20% of the way
there with a set timeout,

184
00:11:16.377 --> 00:11:21.108
and then have the other 80%
of complexity of canceling,

185
00:11:21.108 --> 00:11:25.758
and throwing away updates,
and having race conditions?

186
00:11:25.758 --> 00:11:27.437
You totally could.

187
00:11:27.437 --> 00:11:32.025
So this won't work because they batch,
you've now just have a more complicated

188
00:11:32.025 --> 00:11:34.666
version of the same thing
you originally had.

189
00:11:34.666 --> 00:11:39.818
What we wanna say is, yo,
put this on your list, do it.

190
00:11:39.818 --> 00:11:46.600
But responding to our user,
that's the most important thing.

191
00:11:46.600 --> 00:11:49.987
So we go ahead and we say startTransition.

192
00:11:53.647 --> 00:11:57.730
Give it an anonymous function, cuz if we
don't, we saw how that bit us, right?

193
00:11:57.730 --> 00:11:58.640
It's all coming together.

194
00:11:59.950 --> 00:12:05.025
And we'll go ahead and
we will kick that off when it chooses to.

195
00:12:05.025 --> 00:12:10.924
And then we have one final thing, which
is, we got our new friend here, right?

196
00:12:10.924 --> 00:12:14.110
And I did not make a pretty loading
opponent like I did last time.

197
00:12:14.110 --> 00:12:16.808
So we'll just do a simple one here.

198
00:12:21.095 --> 00:12:22.520
That should do.

199
00:12:38.397 --> 00:12:41.034
That feels appropriate.

200
00:12:41.034 --> 00:12:45.384
So I'll say this, and again,
these APIs are, I posted this once but

201
00:12:45.384 --> 00:12:48.234
there was a conceptual weight to it,
right?

202
00:12:48.234 --> 00:12:51.729
But the actual, the typity typity part,
unlike some of the other stuff with

203
00:12:51.729 --> 00:12:55.554
some weird how threading dispatch through
tedious annoying, get lazy loading for

204
00:12:55.554 --> 00:12:56.224
a component.

205
00:12:56.224 --> 00:12:58.360
It's not so bad.

206
00:12:58.360 --> 00:13:02.790
There's a conceptual way to this,
but the actual API is, I think,

207
00:13:02.790 --> 00:13:04.830
shockingly elegant, right?

208
00:13:06.080 --> 00:13:11.084
So yeah, state updates caused inside
the callback are allowed to be deferred,

209
00:13:11.084 --> 00:13:12.220
absolutely.

210
00:13:12.220 --> 00:13:15.344
If some state update causes
a component to suspend,

211
00:13:15.344 --> 00:13:19.750
as you can see, this is kind of related
to some of the other suspend stuff.

212
00:13:19.750 --> 00:13:22.466
The state should be wrapped
in a transition, right?

213
00:13:22.466 --> 00:13:28.466
Cool, all right, so now we try it out.

214
00:13:31.379 --> 00:13:35.300
I mean, nothing matches that,
but you can see typing is great.

215
00:13:35.300 --> 00:13:37.350
The expensive thing is still happening.

216
00:13:37.350 --> 00:13:41.244
I get that loading indicator
when it's running.

217
00:13:41.244 --> 00:13:45.085
And it automatically pulls it up and
tears it down for me,

218
00:13:45.085 --> 00:13:47.170
which is incredible, right?

219
00:13:47.170 --> 00:13:49.133
And it's all kind of baked into React 18.

220
00:13:49.133 --> 00:13:52.555
Now you do have to be using a create route
and all the rest of that kind of stuff.

221
00:13:52.555 --> 00:13:55.608
But the idea that you kinda
get these primitives for

222
00:13:55.608 --> 00:13:59.728
those cases where no amount of
tweaking and cache memory is working.

223
00:13:59.728 --> 00:14:02.502
I have an expensive thing,
it needs to happen, but

224
00:14:02.502 --> 00:14:04.965
I still also need to
prioritize user inputs.

225
00:14:04.965 --> 00:14:07.894
These are things that did
not exist prior to this, and

226
00:14:07.894 --> 00:14:09.661
they are things that exist now.

