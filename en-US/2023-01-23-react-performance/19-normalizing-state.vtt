WEBVTT

1
00:00:00.090 --> 00:00:03.631
The other thing that you can also do is
just have a layer when you take an API

2
00:00:03.631 --> 00:00:04.600
request take.

3
00:00:04.600 --> 00:00:09.194
Okay, this was the request but let me then
transform this thing immediately before

4
00:00:09.194 --> 00:00:13.790
it gets to my view layer of how do I
want this actually to be structured?

5
00:00:13.790 --> 00:00:17.240
And like one of the opinions
that it will offer.

6
00:00:18.520 --> 00:00:25.820
That is, I think, pretty standard,
is this idea of normalizing your state.

7
00:00:26.820 --> 00:00:30.510
Right, which means, regardless of
what the API that you get is, right.

8
00:00:30.510 --> 00:00:33.145
Thinking about what
the structure should be.

9
00:00:34.185 --> 00:00:38.009
And we won't go all the way through this
because it's more of an exercise of data

10
00:00:38.009 --> 00:00:38.819
manipulation.

11
00:00:38.819 --> 00:00:42.045
And you could write some unit tests,
you can make it work.

12
00:00:42.045 --> 00:00:44.801
I do wanna introduce the concept though,
and talk about it and

13
00:00:44.801 --> 00:00:47.725
also answer any questions about
because I think it is important.

14
00:00:47.725 --> 00:00:49.055
This is what we had, right?

15
00:00:49.055 --> 00:00:50.505
I showed it to you in
the browser a second ago.

16
00:00:51.660 --> 00:00:56.612
Deeply nested data structures that
cause us to break our own performance

17
00:00:56.612 --> 00:00:59.626
optimizations just to manage our own data.

18
00:00:59.626 --> 00:01:03.211
And like one of the questions Alex brought
up in the very beginning was like.

19
00:01:03.211 --> 00:01:07.955
Hey, if I don't get keys, should I put
unique keys on things on the way in?

20
00:01:07.955 --> 00:01:10.375
And we're like, yeah,
yeah, you should do that.

21
00:01:10.375 --> 00:01:14.405
And I would say, yes and
right, you should do that.

22
00:01:14.405 --> 00:01:16.895
And there is more to this at this point,
right?

23
00:01:16.895 --> 00:01:18.475
Like a more normalized data structure.

24
00:01:18.475 --> 00:01:20.425
This is part of I have a file,
I don't know why I'm showing you this.

25
00:01:20.425 --> 00:01:23.172
I literally have the files
open on my computer.

26
00:01:23.172 --> 00:01:29.113
But one of the things I really like about
this is, let's actually pull it up.

27
00:01:29.113 --> 00:01:32.880
[LAUGH] Turn off the slide,
that's my editor now.

28
00:01:32.880 --> 00:01:36.631
I have a normalized version we could
play around with, it's an exercise,

29
00:01:36.631 --> 00:01:37.950
which is for everything.

30
00:01:37.950 --> 00:01:42.120
So for users,
I have an array of all the ideas.

31
00:01:43.370 --> 00:01:46.414
Right, and this is just,
if you took the array of users and

32
00:01:46.414 --> 00:01:50.240
mapped it to just pulling out the ID,
you'd end up with this.

33
00:01:50.240 --> 00:01:54.540
And then taking all the individual
users and having an object, right?

34
00:01:54.540 --> 00:01:58.225
So now if I wanna show a list of users,
instead of taking an array of users,

35
00:01:58.225 --> 00:02:00.490
right, I just have all
their different IDs.

36
00:02:01.540 --> 00:02:06.358
And I have this JavaScript object that I
can key in on any given key on that object

37
00:02:06.358 --> 00:02:07.606
and get that value.

38
00:02:07.606 --> 00:02:12.413
And what's really cool is, let's say that
list that is just getting in this case

39
00:02:12.413 --> 00:02:14.540
their fake ID, so one through ten.

40
00:02:14.540 --> 00:02:17.160
But imagine they're IDs or
something like that.

41
00:02:18.320 --> 00:02:21.450
Let's say we edit an item name.

42
00:02:21.450 --> 00:02:24.480
If the list is just saying, I know
about item one, two, three and four.

43
00:02:24.480 --> 00:02:25.636
I'm just taking item ID.

44
00:02:27.855 --> 00:02:30.180
Next time it renders,
even if it's a brand new item.

45
00:02:31.510 --> 00:02:34.530
All the name has changed and all those
things like brand new item and memory.

46
00:02:35.570 --> 00:02:37.830
It's like, I just know that I'm
supposed to be playing item nine.

47
00:02:37.830 --> 00:02:40.630
In the same way keys work in React, right?

48
00:02:40.630 --> 00:02:44.689
And so it's like then you have the actual
item that will just go into that object.

49
00:02:44.689 --> 00:02:49.420
And grab item 9 directly and
doesn't care which other ones got removed.

50
00:02:49.420 --> 00:02:51.662
You're separating the order and
sorting and

51
00:02:51.662 --> 00:02:55.310
which ones are on the list from
the actual pulling of that data.

52
00:02:55.310 --> 00:02:57.610
&gt;&gt; There's actually a library
that does this for Redux.

53
00:02:57.610 --> 00:02:59.140
&gt;&gt; Yeah, there's one called normalizer.

54
00:02:59.140 --> 00:03:00.891
It's like, you can tell.

55
00:03:00.891 --> 00:03:06.420
It's usable and works it's currently
archived, it's not taking anything.

56
00:03:06.420 --> 00:03:10.516
I was gonna jump to because it's
normalizer without an E in the end like

57
00:03:10.516 --> 00:03:13.100
the internet 10 years ago.

58
00:03:13.100 --> 00:03:17.648
He has a library that will kinda do this,
it's also relatively simple to do

59
00:03:17.648 --> 00:03:20.550
yourself, right and
I think either one works.

60
00:03:20.550 --> 00:03:23.629
But it would create a data structure
where you can just swap out one and

61
00:03:23.629 --> 00:03:26.352
then you get the comments ideas and
you keep those separate.

62
00:03:26.352 --> 00:03:30.726
So if they change everyone is just
kind of keying into that object and

63
00:03:30.726 --> 00:03:32.194
has all these things.

64
00:03:32.194 --> 00:03:36.650
And the lists don't care because
they're just looking at the ideas.

65
00:03:36.650 --> 00:03:40.050
And you begin to separate this idea
out of how you store these things.

66
00:03:40.050 --> 00:03:44.425
So you're like you've done
all this work to only

67
00:03:44.425 --> 00:03:48.379
rerender if an object
is changed in memory.

68
00:03:48.379 --> 00:03:50.646
And then confirming that you're not
actually doing it when it hasn't.

69
00:03:50.646 --> 00:03:54.880
To then change every object in memory all
the time for any reason whatsoever, right?

70
00:03:54.880 --> 00:03:59.890
And again, because those optimizations,
those memorizations weren't free.

71
00:04:01.560 --> 00:04:04.430
You've either done nothing or
made the problem worse, right.

72
00:04:04.430 --> 00:04:07.919
And that's why the thinking
about it looking at the tools.

73
00:04:07.919 --> 00:04:12.382
Starting to investigate one you
might find things that surprise you.

74
00:04:12.382 --> 00:04:16.321
You might understand that there's
a fundamental problem which is all

75
00:04:16.321 --> 00:04:18.600
the technologies working as expected.

76
00:04:18.600 --> 00:04:22.725
What you expect it is not or yeah what
is expected is not what you wanted.

77
00:04:22.725 --> 00:04:25.480
And those are two fundamentally
different things.

