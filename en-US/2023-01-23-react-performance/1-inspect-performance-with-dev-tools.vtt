WEBVTT

1
00:00:00.000 --> 00:00:04.515
There are some do not pass go, do not
collect $200 if you're gonna worry about

2
00:00:04.515 --> 00:00:08.507
the performance of your application
without at least checking these two

3
00:00:08.507 --> 00:00:12.781
things, right, which is one,
are you running in production mode, right?

4
00:00:12.781 --> 00:00:16.117
And so we actually do like,
local server is in development mode.

5
00:00:16.117 --> 00:00:20.510
And it does things like give you console
logs and yell at you about things and say,

6
00:00:20.510 --> 00:00:24.581
hey, you're doing this wrong and
put extra things in the React DevTools,

7
00:00:24.581 --> 00:00:28.546
which is what we're gonna look at,
and a whole slew of things like that.

8
00:00:28.546 --> 00:00:33.981
Again, doing stuff takes more
time than not doing stuff, right?

9
00:00:33.981 --> 00:00:40.317
So no not be the person who pulls down
your co-worker's branch after this course.

10
00:00:40.317 --> 00:00:44.207
Pulls it up in development,
opens up the tools like,

11
00:00:44.207 --> 00:00:48.189
did you see you have a 60
millisecond response time?

12
00:00:48.189 --> 00:00:53.599
It should be 16 because that might not
actually be like that in the real app,

13
00:00:53.599 --> 00:00:57.192
and then you're going to
have to make new friends.

14
00:00:57.192 --> 00:01:01.731
And the easiest way to tell if your React
application is running production mode is

15
00:01:01.731 --> 00:01:05.677
if you have the developer tools installed,
and it's not, you'll see

16
00:01:05.677 --> 00:01:09.982
an angry red React icon, which is what
you wanna see in development, right?

17
00:01:09.982 --> 00:01:12.529
Cuz you're in development
mode in development.

18
00:01:12.529 --> 00:01:17.997
But if you go to whatever your
company is dot com and you see that,

19
00:01:17.997 --> 00:01:23.990
it's time to tweak Webpack configs and
make that not happen, right?

20
00:01:23.990 --> 00:01:27.399
If you use something like
create_react_app, you should get it for

21
00:01:27.399 --> 00:01:30.944
free, if you use most of the boiler
plates, you should get it for free.

22
00:01:30.944 --> 00:01:36.595
I have been bitten by this because we
had the bespoke Webpack configuration

23
00:01:36.595 --> 00:01:42.352
that someone built in 2017 and
every upgrade, things happen, right?

24
00:01:42.352 --> 00:01:45.731
So it's definitely worth checking that,
and the remedy for

25
00:01:45.731 --> 00:01:49.716
that is, you just set the Webpack
environment to production, right?

26
00:01:49.716 --> 00:01:53.783
And whatever got you accidentally in
that case is gonna be different for

27
00:01:53.783 --> 00:01:56.645
everyone, but
the solution is roughly the same.

28
00:01:56.645 --> 00:01:57.588
Fix it.

29
00:01:57.588 --> 00:01:59.110
And then the other one,

30
00:01:59.110 --> 00:02:04.061
which you have gotten yelled at in your
console when you've forgotten them,

31
00:02:04.061 --> 00:02:09.180
cuz I've gotten yelled at it, and I don't
think the devtool just yelled at me.

32
00:02:09.180 --> 00:02:13.644
Which is if you're iterating over a list
and you're mapping over a list of items to

33
00:02:13.644 --> 00:02:17.475
render them and you don't give each
one a key, you'll get yelled at.

34
00:02:17.475 --> 00:02:20.605
If you give it something like the index,
and

35
00:02:20.605 --> 00:02:24.507
we'll talk about why when we
get to like a later slide.

36
00:02:24.507 --> 00:02:27.499
So that React can keep track of which
one is which if they get resorted or

37
00:02:27.499 --> 00:02:28.319
one gets removed.

38
00:02:28.319 --> 00:02:32.172
If you don't use keys while you're mapping
over, use keys don't mean anything like

39
00:02:32.172 --> 00:02:35.991
the index of the array, which is literally
gonna shift every time the array shifts.

40
00:02:35.991 --> 00:02:41.951
That is the immediate gotcha that is like,
there's not a lot to say other than

41
00:02:41.951 --> 00:02:47.650
listen to the warning message in your
console, right, and do the thing.

42
00:02:47.650 --> 00:02:53.852
Those are the two easy ones that
we'll kinda get out of the way.

43
00:02:53.852 --> 00:02:58.102
They don't have those trade offs of,
if you memorize it, you could accidentally

44
00:02:58.102 --> 00:03:01.746
make it slower cuz the act of memoir
is no, no, these are the big wins.

45
00:03:01.746 --> 00:03:04.229
There's no downside, just do them, right?

46
00:03:04.229 --> 00:03:05.655
They work.

47
00:03:05.655 --> 00:03:09.520
The other thing,
if you do not already have it,

48
00:03:09.520 --> 00:03:13.492
is to go get yourself
the React Developer Tools.

49
00:03:13.492 --> 00:03:21.344
They are available for at least every
chromium-based browser and Firefox.

50
00:03:21.344 --> 00:03:27.073
I don't know if they are available for
Safari.

51
00:03:27.073 --> 00:03:31.805
It turns out I learned that you can
go to the Chrome Store in Edge and

52
00:03:31.805 --> 00:03:35.260
install the Chrome plugin in Edge and
it works.

53
00:03:35.260 --> 00:03:40.475
So if you dive in React Developer Tools,
you will find those.

54
00:03:40.475 --> 00:03:45.563
And we can take a look at those kinda for
a second just to see how they work and get

55
00:03:45.563 --> 00:03:50.752
a sense of them, cuz I will send you on
vision quests with those in a little bit.

56
00:03:50.752 --> 00:03:54.600
So if you have them installed,
one, you can choose whether or

57
00:03:54.600 --> 00:03:56.157
not you want to see this.

58
00:03:56.157 --> 00:04:01.477
I have done this mostly for show on
a normal day, I do the hide from toolbar,

59
00:04:01.477 --> 00:04:06.291
I don't need to see an angry orange
React icon as I'm developing but

60
00:04:06.291 --> 00:04:08.075
I'm here for you today.

61
00:04:08.075 --> 00:04:13.370
So we've got that, and then what it
does is it adds two extra tabs to

62
00:04:13.370 --> 00:04:18.870
your developer tools,
there's profiler and there is components.

63
00:04:18.870 --> 00:04:22.802
Components basically gives you
a component tree, which is useful,

64
00:04:22.802 --> 00:04:27.408
especially cuz it will give you the key,
it'll let you see what is being passed or

65
00:04:27.408 --> 00:04:30.898
the state, you can actually
tweak the state and component.

66
00:04:30.898 --> 00:04:34.141
It's very good for developing.

67
00:04:34.141 --> 00:04:39.135
It is not necessarily super relevant for
diagnosing and

68
00:04:39.135 --> 00:04:42.010
triaging performance issues.

69
00:04:42.010 --> 00:04:43.821
But you get them both together.

70
00:04:43.821 --> 00:04:46.719
So, okay.

71
00:04:46.719 --> 00:04:51.407
The one that is of more concern
to us today is profiler, and

72
00:04:51.407 --> 00:04:56.482
profiler kinda works like
the Performance tab does in Chrome or

73
00:04:56.482 --> 00:04:58.316
Edge or what have you.

74
00:04:58.316 --> 00:05:03.249
And the kind of best way to do it is to,
when you're ready,

75
00:05:03.249 --> 00:05:08.285
you can go and hit this Record button and
do things, right,

76
00:05:08.285 --> 00:05:14.775
like remove a user, remove a post,
add a thing, so on and so forth, right?

77
00:05:14.775 --> 00:05:16.979
You can make some things move around.

78
00:05:16.979 --> 00:05:22.225
And then usually, can you go
spelunking for performance problems?

79
00:05:22.225 --> 00:05:24.932
Absolutely, but it's tricky, right?

80
00:05:24.932 --> 00:05:29.558
Just cuz React is rendering
doesn't necessarily mean

81
00:05:29.558 --> 00:05:32.480
that it's problematic, right?

82
00:05:32.480 --> 00:05:38.764
You should take advantage of the fact
that I have a ridiculous laptop, right?

83
00:05:38.764 --> 00:05:43.397
And we'll talk a little bit in one
second about how to simulate a less

84
00:05:43.397 --> 00:05:45.437
ridiculous laptop, right?

85
00:05:45.437 --> 00:05:49.756
But also understanding that the act
of it rendering does not necessarily

86
00:05:49.756 --> 00:05:52.319
mean that you have a performance problem.

87
00:05:52.319 --> 00:05:57.194
But you can kinda see this shows you
basically everything that rendered,

88
00:05:57.194 --> 00:06:00.272
and this is kind of each interaction,
right?

89
00:06:00.272 --> 00:06:03.157
So this is whatever the first
thing that I did was,

90
00:06:03.157 --> 00:06:06.330
you can kinda see this is all
of the rendering process.

91
00:06:06.330 --> 00:06:09.757
And we'll talk about
what that process is and

92
00:06:09.757 --> 00:06:14.549
what these words mean in a slide or
two, but it kinda shows you.

93
00:06:14.549 --> 00:06:17.914
And the really interesting part is that
not only will it show you the given

94
00:06:17.914 --> 00:06:20.505
components, you hover over it,
what its parents was,

95
00:06:20.505 --> 00:06:23.448
you can kinda see all the different
interactions that you did.

96
00:06:23.448 --> 00:06:26.542
But if you click on one of them,
like on this one,

97
00:06:26.542 --> 00:06:29.497
you can kinda see why did this render,
right?

98
00:06:29.497 --> 00:06:32.334
And so
to trace back what the cause of it was.

99
00:06:32.334 --> 00:06:37.248
If something was rendering that you
didn't think should have rendered, so for

100
00:06:37.248 --> 00:06:40.343
instance, I know one here,
so I'll hit Record.

101
00:06:40.343 --> 00:06:41.672
I'll hit Remove on a user.

102
00:06:44.096 --> 00:06:47.951
Right, and so
that trigger almost everything, right?

103
00:06:47.951 --> 00:06:54.869
And so there are questions of, did
an individual post need to post comment,

104
00:06:54.869 --> 00:06:59.533
right, which one of these
really truly needed to.

105
00:06:59.533 --> 00:07:02.574
And I can kinda figure out
why did you re-render?

106
00:07:02.574 --> 00:07:06.263
Obviously, this is an example with
known performance issues, right, or

107
00:07:06.263 --> 00:07:08.086
known rendering issues, at least.

108
00:07:08.086 --> 00:07:09.789
And you can kinda get a sense for
what it was.

109
00:07:09.789 --> 00:07:11.997
But it's very interesting is that once
you know you have a real problem,

110
00:07:11.997 --> 00:07:13.239
you should always start with a problem.

111
00:07:13.239 --> 00:07:16.797
If you just go surreptitiously
optimizing your application, one,

112
00:07:16.797 --> 00:07:18.758
you might be wasting your time, two,

113
00:07:18.758 --> 00:07:21.785
you might be causing more
problems than you have, right?

114
00:07:21.785 --> 00:07:27.324
It usually starts with either
my favorite bug report ever,

115
00:07:27.324 --> 00:07:29.994
which is it is slow, right?

116
00:07:29.994 --> 00:07:34.404
Which is both like, it's also a question
I ask a lot during interviews, which is,

117
00:07:34.404 --> 00:07:38.635
tell me your thought process around that,
cuz it's one that happens, right?

118
00:07:38.635 --> 00:07:41.738
It's a way to start figuring it out, or
even when you're developing a feature

119
00:07:41.738 --> 00:07:44.005
as you're in the middle of coding,
you might notice it.

120
00:07:44.005 --> 00:07:46.930
So it's always important
to start with a problem and

121
00:07:46.930 --> 00:07:50.131
then try to solve it rather
than go looking for problems.

122
00:07:50.131 --> 00:07:54.828
I believe Rob Pike, one of the creators
of the Go programming language,

123
00:07:54.828 --> 00:07:59.448
I believe the quote is something like
measure first before you optimize

124
00:07:59.448 --> 00:08:04.536
performance and then even then measure
again, right, to make sure, right?

125
00:08:04.536 --> 00:08:06.271
And that holds true, right?

126
00:08:06.271 --> 00:08:10.515
Yes, we have simple apps but
that does not give you a license to go and

127
00:08:10.515 --> 00:08:12.387
just find problems, right?

128
00:08:12.387 --> 00:08:16.823
Once you know you have a problem,
the easiest one, the one where you know

129
00:08:16.823 --> 00:08:21.697
quickly is when you're typing in an input
field, and the keys are not showing up

130
00:08:21.697 --> 00:08:25.745
in the input field as you're typing in,
and I show up all at once.

131
00:08:25.745 --> 00:08:31.431
That is for me the most classic one where
I'm like, I have a problem here, right?

132
00:08:31.431 --> 00:08:33.890
Or when the browser truly locks up, right,

133
00:08:33.890 --> 00:08:37.890
those are the issues of when it's time
to pull out the tools and jump in.

134
00:08:37.890 --> 00:08:41.980
But these tools are available and they're
here and they give you the ability to kind

135
00:08:41.980 --> 00:08:46.142
of begin to dig in and look, and they're
actually incredibly powerful and useful.

136
00:08:46.142 --> 00:08:51.878
The other thing that you will notice if
you look very closely at my screen and

137
00:08:51.878 --> 00:08:55.808
I use this when I know that
I have a problem, right?

138
00:08:55.808 --> 00:08:59.621
What I actually use,
personally, this is just me,

139
00:08:59.621 --> 00:09:03.606
subjective opinion,
a lot is if you wanna hit Remove,

140
00:09:03.606 --> 00:09:07.521
see those green boxes flashing everywhere,
right?

141
00:09:07.521 --> 00:09:11.569
Those are everything that's re-rendering,
right?

142
00:09:11.569 --> 00:09:14.581
And those will happen,
I believe there's a setting actually,

143
00:09:14.581 --> 00:09:16.045
you can go into the tools here.

144
00:09:16.045 --> 00:09:18.716
Record why each component rendered,
we got general.

145
00:09:18.716 --> 00:09:22.457
Yeah, highlight updates
when components render.

146
00:09:22.457 --> 00:09:24.282
I would definitely go turn that on.

147
00:09:24.282 --> 00:09:26.533
And then whenever your
developer tools are open and

148
00:09:26.533 --> 00:09:30.142
not when they're not open, which is both
good for your general web browsing, but

149
00:09:30.142 --> 00:09:33.124
also you will think you have the most
performant app in your world for

150
00:09:33.124 --> 00:09:35.777
a second until you realize you
closed the developer tools.

151
00:09:35.777 --> 00:09:38.866
That will happen to you at least once.

152
00:09:38.866 --> 00:09:46.095
Supper useful for just as you're working,
everything is flashing green.

153
00:09:46.095 --> 00:09:49.492
Again, we were not seeking to
solve problems before they exist,

154
00:09:49.492 --> 00:09:53.629
we're also not seeking to ignore our act
of creating a problem at the same time,

155
00:09:53.629 --> 00:09:57.375
right, especially if it is one of
the no-cost performance remedies.

156
00:09:57.375 --> 00:10:02.138
For instance, we saw keys, production
mode, and the one that we'll talk about at

157
00:10:02.138 --> 00:10:05.968
the second is either state management,
or component hierarchy.

158
00:10:05.968 --> 00:10:08.550
Those are zero downside optimizations,

159
00:10:08.550 --> 00:10:12.616
while memorization some of the other
ones have some cost to them.

160
00:10:12.616 --> 00:10:16.062
And sometimes, you always have to
think about even the zero cost and

161
00:10:16.062 --> 00:10:18.673
performance ones,
do they have complexity cost?

162
00:10:18.673 --> 00:10:22.911
Cuz if they have complexity cost,
then also it's like, yeah,

163
00:10:22.911 --> 00:10:28.087
the code is a microsecond faster now, and
it takes me ten more extra minutes for

164
00:10:28.087 --> 00:10:31.392
a new person looking at
this component to read it.

165
00:10:31.392 --> 00:10:33.218
I don't know that you
made the best tradeoff.

166
00:10:33.218 --> 00:10:37.192
So we'll kinda talk about and
think about those things as we go through.

167
00:10:37.192 --> 00:10:42.112
The other thing I wanna point down here
is choosing the regular tools under

168
00:10:42.112 --> 00:10:43.152
Performance.

169
00:10:43.152 --> 00:10:48.442
One thing that React will do once you
have the tools installed if you're

170
00:10:48.442 --> 00:10:53.491
running in development mode is,
In the regular tools,

171
00:10:59.295 --> 00:11:04.521
Use the user timing API to at least
start to annotate some of the different.

172
00:11:04.521 --> 00:11:08.286
This one doesn't have particularly slow
JavaScript in it like some of the other

173
00:11:08.286 --> 00:11:11.206
ones do, but it will tell you
what component was rendering and

174
00:11:11.206 --> 00:11:14.315
stuff along those lines,
while it won't do that in production.

175
00:11:14.315 --> 00:11:16.782
So you get a little bit
more extra information.

176
00:11:16.782 --> 00:11:22.218
But the more interesting part,
cuz I usually use the other one,

177
00:11:22.218 --> 00:11:27.149
is if you are on a incredibly
fancy MacBook Pro like I am with

178
00:11:27.149 --> 00:11:31.597
more RAM than I thought they
could put in a computer.

179
00:11:31.597 --> 00:11:34.934
You can go ahead and
hit this little thing here,

180
00:11:34.934 --> 00:11:39.947
which is to either throttle your
network or throttle your CPU, right?

181
00:11:39.947 --> 00:11:44.910
And a lot of times, especially
depending on what you're working on,

182
00:11:44.910 --> 00:11:49.956
incredibly useful, cuz what might
seem fast on your computer might not

183
00:11:49.956 --> 00:11:55.784
work unlike the average, for instance,
computer on a coffee shop WiFi, right?

184
00:11:55.784 --> 00:11:57.507
And so getting a sense for

185
00:11:57.507 --> 00:12:02.595
both of these things on a slow network
connection and with a throttle CPU,

186
00:12:02.595 --> 00:12:07.682
right, I think is a good use of kind
of having empathy for your customers,

187
00:12:07.682 --> 00:12:12.960
particularly, I personally work on
a bunch of developer tooling, right?

188
00:12:12.960 --> 00:12:18.323
So I can make a few assumptions about
the computers that my customers are using.

189
00:12:18.323 --> 00:12:22.652
But prior to that,
I worked on a consumer product, right,

190
00:12:22.652 --> 00:12:25.000
very different demographics.

191
00:12:25.000 --> 00:12:30.003
And also it's tricky because while my
current customers have faster computers,

192
00:12:30.003 --> 00:12:33.710
they will also shame me for
performance a lot faster as well.

193
00:12:33.710 --> 00:12:35.133
So the bar is higher,

194
00:12:35.133 --> 00:12:39.410
I just don't necessarily need
to throttle my computer as much.

195
00:12:39.410 --> 00:12:41.466
But they will show up in my GitHub issues.

196
00:12:41.466 --> 00:12:43.517
So, awesome.

197
00:12:43.517 --> 00:12:47.119
So those are the developer tools and
they're super useful and

198
00:12:47.119 --> 00:12:51.629
we will use them throughout the day to
figure out why stuff is re-rendering.

