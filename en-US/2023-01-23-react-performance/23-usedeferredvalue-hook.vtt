WEBVTT

1
00:00:00.000 --> 00:00:03.419
Real quick,
let's just look at the opposite, and

2
00:00:03.419 --> 00:00:05.654
then kind of get a sense for that.

3
00:00:05.654 --> 00:00:10.890
So that is great if you are in
charge of who calls the function.

4
00:00:10.890 --> 00:00:13.594
Yeah.
&gt;&gt; Can we cancel or start a transition?

5
00:00:13.594 --> 00:00:14.899
&gt;&gt; It does it under the hood.

6
00:00:14.899 --> 00:00:20.641
If it's something else,
I don't fully know what the heuristic is,

7
00:00:20.641 --> 00:00:23.811
it will definitely pause it or delay.

8
00:00:23.811 --> 00:00:28.624
If it's keeping track of something that
like fundamentally changes what the result

9
00:00:28.624 --> 00:00:31.005
will be, it will throw one away, right?

10
00:00:31.005 --> 00:00:35.154
It's got a heuristic in place for that,
I don't think we can actually step in and

11
00:00:35.154 --> 00:00:35.833
cancel one.

12
00:00:35.833 --> 00:00:39.110
But I believe it's like, if it was
supposed to like rely on one of these

13
00:00:39.110 --> 00:00:40.890
values or something along those lines.

14
00:00:40.890 --> 00:00:42.490
And those have changed, right?

15
00:00:42.490 --> 00:00:44.202
It'd be like, I don't need this anymore,

16
00:00:44.202 --> 00:00:46.581
in the same way that I will throw
away entire parts of the DOM.

17
00:00:46.581 --> 00:00:50.358
If it feels like it is not like accurate
anymore, I just refigure stuff out.

18
00:00:50.358 --> 00:00:54.734
You're saying this is important,
but not that important, right?

19
00:00:54.734 --> 00:00:57.145
And it gives you the ability
to have that in place.

20
00:00:57.145 --> 00:01:02.332
So this will probably be the one
that used, most of the time,

21
00:01:02.332 --> 00:01:07.030
because usually you are the one
kicking off the thing.

22
00:01:07.030 --> 00:01:11.087
If for some reason you're receiving
like a value that is coming from us,

23
00:01:11.087 --> 00:01:14.227
it's one of those other like,
react data structures.

24
00:01:14.227 --> 00:01:17.538
You can say like,
I am listening on this thing.

25
00:01:17.538 --> 00:01:21.853
I am responding to changes in my
like use memo or whatever, right?

26
00:01:21.853 --> 00:01:26.076
But if this is one of the ones, treat this
entire thing we're doing is not important.

27
00:01:26.076 --> 00:01:28.033
Cuz that thing is unreliable, right?

28
00:01:28.033 --> 00:01:29.829
Or it's slow or
something along those lines.

29
00:01:29.829 --> 00:01:32.571
So the last one you were
kicking it off and saying,

30
00:01:32.571 --> 00:01:34.937
the thing I'm about to do is problematic.

31
00:01:34.937 --> 00:01:36.342
Just letting you know, right?

32
00:01:36.342 --> 00:01:39.976
Now, you're saying like
the thing I'm relying on and

33
00:01:39.976 --> 00:01:44.167
that dependency list,
that thing over there is problematic.

34
00:01:44.167 --> 00:01:47.847
So like,
treat me as like problematic as well.

35
00:01:47.847 --> 00:01:51.834
Cool, so in that case like, we do kind
of walk some of those back a little bit.

36
00:01:51.834 --> 00:01:59.505
And so this goes back to like,
Being the filters in this case.

37
00:02:03.398 --> 00:02:05.036
Awesome, pull some of this out.

38
00:02:05.036 --> 00:02:09.359
Let's just say we couldn't do that, right?

39
00:02:09.359 --> 00:02:15.410
And to be clear, the other one is a lot
easier to think of use cases for.

40
00:02:15.410 --> 00:02:20.425
But I think, just for
full due diligence, we'll have in place.

41
00:02:20.425 --> 00:02:21.599
So we don't have this idea.

42
00:02:21.599 --> 00:02:24.448
Let's say, we can't do the thing
where we keep two different things.

43
00:02:24.448 --> 00:02:25.912
We're gonna say, this thing could change.

44
00:02:25.912 --> 00:02:28.892
And that is what kicked off this useMemo.

45
00:02:28.892 --> 00:02:31.508
But we're gonna say, yo, for

46
00:02:31.508 --> 00:02:36.846
putting that filters in the input fields,
go for it right now.

47
00:02:36.846 --> 00:02:44.174
For kicking this off,
maybe chill, maybe, wait a sec.

48
00:02:44.174 --> 00:02:46.987
Cool, so in this case,
instead of use transition,

49
00:02:49.845 --> 00:02:54.229
We have, No.

50
00:03:01.812 --> 00:03:05.170
Right, returns a deferred version of
the value that may lag behind it.

51
00:03:05.170 --> 00:03:07.611
Commonly used to keep
the interface responsive,

52
00:03:07.611 --> 00:03:10.692
we have something to render
immediately based on user input and

53
00:03:10.692 --> 00:03:14.719
something that needs to wait for the data
to fetch or something along those lines.

54
00:03:14.719 --> 00:03:18.669
So, yeah, you can see some of

55
00:03:18.669 --> 00:03:23.577
this becomes useful as time goes on.

56
00:03:23.577 --> 00:03:25.393
While but it's immediately useful for our
purposes of worrying about performance.

57
00:03:25.393 --> 00:03:28.341
So now, what we can do is
say we've got these filters.

58
00:03:40.267 --> 00:03:43.794
So now, make a version of this
that I am less concerned about for

59
00:03:43.794 --> 00:03:45.868
tricking off this useMemo, right?

60
00:03:45.868 --> 00:03:48.998
This one can be problematic,
I do it like later.

61
00:03:53.943 --> 00:03:57.481
It is going to be the same value.

62
00:03:57.481 --> 00:04:03.834
Yeah, like this one is pending,
but the easy way to say is like,

63
00:04:16.328 --> 00:04:17.774
If you think about it,

64
00:04:17.774 --> 00:04:21.968
if the deferred filter is a value
that can lag behind the real one.

65
00:04:21.968 --> 00:04:26.838
Then, when they're caught up,
they're the same object.

66
00:04:26.838 --> 00:04:31.260
But there's a moment where for the things
that aren't gonna like lock up and

67
00:04:31.260 --> 00:04:32.585
like be problematic.

68
00:04:32.585 --> 00:04:36.224
That gets the new one immediately.

69
00:04:36.224 --> 00:04:40.004
The filter tasks which takes forever
gets it when it's ready for it,

70
00:04:40.004 --> 00:04:41.186
you know what I mean?

71
00:04:41.186 --> 00:04:44.626
So then, for a half minute,
they are not the same value.

72
00:04:44.626 --> 00:04:48.113
But when react catches up,

73
00:04:48.113 --> 00:04:54.033
they're once again joined
as the same value.

74
00:04:55.370 --> 00:04:57.414
If they do not equal each other, surely,

75
00:05:04.159 --> 00:05:06.187
My input field is performant.

76
00:05:06.187 --> 00:05:10.258
The slow thing still takes slow time,
but now, I can like separate what is

77
00:05:10.258 --> 00:05:14.604
immediate, what is important, and
what can based on like my own heuristics.

78
00:05:14.604 --> 00:05:18.909
I kind of said in the beginning, sometimes
it's our job to step in and be like,

79
00:05:18.909 --> 00:05:22.972
I know the business problem I'm trying
to solve, I know what I'm doing.

80
00:05:22.972 --> 00:05:24.985
Let me help you out here and guide you.

81
00:05:24.985 --> 00:05:31.077
And now, we have some of
the primitives to make that happen.

