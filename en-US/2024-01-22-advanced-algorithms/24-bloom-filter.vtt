WEBVTT

1
00:00:00.070 --> 00:00:02.490
Okay, so we do have time for
our super bonus algorithm.

2
00:00:02.490 --> 00:00:03.510
I'm gonna do it.

3
00:00:03.510 --> 00:00:04.885
Okay, it only takes like five minutes.

4
00:00:04.885 --> 00:00:05.970
Okay, this is my favorite one.

5
00:00:05.970 --> 00:00:07.300
This is the one I'm most excited about.

6
00:00:07.300 --> 00:00:08.191
This is the one I really wanted to do.

7
00:00:08.191 --> 00:00:14.180
I have never actually tried to do this and
I've only ever seen it.

8
00:00:14.180 --> 00:00:16.440
I've never actually used it and
I always wanted to do it.

9
00:00:16.440 --> 00:00:17.910
It's called a Bloom filter.

10
00:00:17.910 --> 00:00:22.345
So if you don't know what a Bloom filter
is, it's pretty exciting, all right?

11
00:00:22.345 --> 00:00:28.105
It's a very fast way to tell if something
is in or not in a set, meaning that,

12
00:00:28.105 --> 00:00:34.615
I know, that's kind of a weird way to
do it, because it's like, why not in?

13
00:00:34.615 --> 00:00:38.585
How it works, effectively, is that
you have a series of hash functions.

14
00:00:38.585 --> 00:00:41.436
You have, say, three hash functions, and

15
00:00:41.436 --> 00:00:45.507
you run through the hash functions,
marking into a set.

16
00:00:45.507 --> 00:00:47.457
We'll talk about that here in a second.

17
00:00:47.457 --> 00:00:51.042
And what a Bloom filter
can do is it can say, yes,

18
00:00:51.042 --> 00:00:54.027
something could be in this set, maybe.

19
00:00:54.027 --> 00:00:55.607
We're not 100% sure.

20
00:00:55.607 --> 00:00:59.958
But it can say with 100% certainty
if something's not in the set.

21
00:00:59.958 --> 00:01:03.058
And so Akamai uses this for
what they call one-hit wonders.

22
00:01:03.058 --> 00:01:07.311
They use a more complicated version, but
it's the same principle, which is hey,

23
00:01:07.311 --> 00:01:08.928
this one website got loaded.

24
00:01:08.928 --> 00:01:11.048
Do we need to store this into CDN?

25
00:01:11.048 --> 00:01:12.111
Probably not right now, but

26
00:01:12.111 --> 00:01:14.318
what happen if we're gonna see
that site a bunch of times?

27
00:01:14.318 --> 00:01:15.268
Then we're gonna want to see it.

28
00:01:15.268 --> 00:01:18.221
And we're gonna want to put that into a
special place where we can have it highly

29
00:01:18.221 --> 00:01:19.891
cached and it moves really, really quick.

30
00:01:19.891 --> 00:01:25.230
So it has the chance of false positives,
but it has no chance of false negatives.

31
00:01:25.230 --> 00:01:28.570
If it's not in the Bloom filter,
it's not in the Bloom filter at all.

32
00:01:28.570 --> 00:01:30.700
So let's go over what that means really,
really quickly.

33
00:01:30.700 --> 00:01:34.550
It's pretty simple,
let's pretend we have one byte of data.

34
00:01:36.240 --> 00:01:38.010
Right, so this is one byte.

35
00:01:38.010 --> 00:01:40.952
All right, I have eight bits,
one byte, and

36
00:01:40.952 --> 00:01:44.156
we have a hash function
that's pretty easy.

37
00:01:44.156 --> 00:01:47.546
If I provide a value,
I'm gonna use the value itself.

38
00:01:47.546 --> 00:01:52.216
So that's one function is just to
return the value modulo the length.

39
00:01:53.436 --> 00:01:57.293
We're gonna do another one where I
square the value modulo the length.

40
00:01:57.293 --> 00:02:01.039
And another one where I double
the value and then modulo the length.

41
00:02:02.479 --> 00:02:04.019
So, what is that gonna look like?

42
00:02:04.019 --> 00:02:07.092
I wish I could do some bigger math, but I
can't put like 69 in there because I don't

43
00:02:07.092 --> 00:02:09.579
know how to square 69 in my head,
and then modulo the length.

44
00:02:09.579 --> 00:02:13.153
Way too difficult,
completely out of my powers, and so, and

45
00:02:13.153 --> 00:02:15.439
I'm also gonna just use 10 instead.

46
00:02:15.439 --> 00:02:18.504
Let's not, because 10 is just
way easier to do modulo math on,

47
00:02:18.504 --> 00:02:22.085
because you just use the last number,
and there you go, fantastic.

48
00:02:22.085 --> 00:02:24.735
All right, so let's pretend
we're gonna store the value 10.

49
00:02:24.735 --> 00:02:30.965
All right, so what is 10 modulo length?

50
00:02:30.965 --> 00:02:31.795
0, right?

51
00:02:31.795 --> 00:02:36.325
So I just assume this is 0,
this over here is 10.

52
00:02:36.325 --> 00:02:38.285
So therefore I'm gonna put a 1 right here.

53
00:02:39.400 --> 00:02:41.996
All right, then we're going to do
the next function, which is, say,

54
00:02:41.996 --> 00:02:43.680
that's 100 modulo the length.

55
00:02:43.680 --> 00:02:46.007
That's a 1 again.

56
00:02:46.007 --> 00:02:49.450
All right, then we're going to double it,
which is 20, which is 1 again.

57
00:02:49.450 --> 00:02:53.210
Okay, we have a pretty crappy hashing
algorithm, but let's keep on going.

58
00:02:53.210 --> 00:02:56.534
All right, let's do a 7.

59
00:02:56.534 --> 00:02:59.832
All right, 7 length,
we're going to go over to 7, right?

60
00:03:02.074 --> 00:03:04.208
Not a 7.
I wrote a 7.

61
00:03:04.208 --> 00:03:06.940
7 modulo length is 7 right here.

62
00:03:06.940 --> 00:03:10.011
7 squared is 49 modulo
length is going to be 9,

63
00:03:10.011 --> 00:03:13.492
which is gonna be this answer right here.

64
00:03:13.492 --> 00:03:15.822
Wait, hold on, that means 7's right here?

65
00:03:15.822 --> 00:03:16.972
There we go.

66
00:03:16.972 --> 00:03:17.892
I'm really good at this.

67
00:03:17.892 --> 00:03:19.376
All right, and then the last one.

68
00:03:19.376 --> 00:03:21.876
Double, which is 14,
which means we're gonna have the 14th one.

69
00:03:21.876 --> 00:03:23.196
Zero, one two, three, four.

70
00:03:23.196 --> 00:03:24.236
All right, there we go.

71
00:03:25.526 --> 00:03:27.926
So that is our Bloom filter for seven.

72
00:03:27.926 --> 00:03:31.386
So now let's say,
does eight exist within this set?

73
00:03:31.386 --> 00:03:32.066
Let's find out.

74
00:03:32.066 --> 00:03:33.586
So what we'll do an 8.

75
00:03:33.586 --> 00:03:37.686
So, 8 modulo the length is 8 right here.

76
00:03:37.686 --> 00:03:39.046
Does it exist in the set?

77
00:03:39.046 --> 00:03:39.844
No, it does not.

78
00:03:39.844 --> 00:03:41.254
We can just fast bail right out of it.

79
00:03:41.254 --> 00:03:42.864
We don't even have to think about it.

80
00:03:42.864 --> 00:03:44.354
It does not equal this set.

81
00:03:44.354 --> 00:03:47.424
All right, let's do, how about 9?

82
00:03:47.424 --> 00:03:49.064
We'll do a 9, a quick 9 check.

83
00:03:49.064 --> 00:03:51.104
All right, 9 modulo length.

84
00:03:51.104 --> 00:03:53.054
Okay, maybe nine's in here.

85
00:03:54.064 --> 00:03:54.814
Let's do it again.

86
00:03:54.814 --> 00:03:55.584
What's 9 squared?

87
00:03:55.584 --> 00:03:57.614
81, right here.

88
00:03:57.614 --> 00:03:59.184
It's not in here.

89
00:03:59.184 --> 00:04:03.834
So we know right away that 9 was
not stored within this filter.

90
00:04:03.834 --> 00:04:07.044
So the thing about a Bloom filter
is you don't remove values.

91
00:04:07.044 --> 00:04:11.206
Because you can't remove values because
there's some level of overlapping at any

92
00:04:11.206 --> 00:04:11.804
one point.

93
00:04:11.804 --> 00:04:13.474
And so that's kind of an important thing.

94
00:04:13.474 --> 00:04:17.444
So if we were to put 5 in here,
we would go over here and we'd set 5 to 1.

95
00:04:17.444 --> 00:04:21.805
We would then square it, again,
it gets written right here.

96
00:04:21.805 --> 00:04:23.625
And then we double it, which is a 0.

97
00:04:23.625 --> 00:04:25.215
And then we'd go right here.

98
00:04:25.215 --> 00:04:30.468
And so you could imagine that if we try to
remove 5, we would remove this as a 0 and

99
00:04:30.468 --> 00:04:34.664
this as a 0, which would also
remove our value 10 out of here.

100
00:04:34.664 --> 00:04:35.865
So there you go.

101
00:04:35.865 --> 00:04:38.615
That's the basic principle
of a Bloom filter.

102
00:04:38.615 --> 00:04:40.053
So here's where it falls apart.

103
00:04:40.053 --> 00:04:41.583
Let's say we do 20.

104
00:04:41.583 --> 00:04:43.093
All right, 20.

105
00:04:43.093 --> 00:04:44.191
What's the modulo of 20?

106
00:04:44.191 --> 00:04:45.334
&gt;&gt; 0.

107
00:04:45.334 --> 00:04:47.643
&gt;&gt; 0, okay, could be in here.

108
00:04:47.643 --> 00:04:49.066
What's the square of 20?

109
00:04:49.066 --> 00:04:50.212
&gt;&gt; 40.
&gt;&gt; 400.

110
00:04:50.212 --> 00:04:51.303
&gt;&gt; 400.

111
00:04:51.303 --> 00:04:53.079
&gt;&gt; 0 again, okay.

112
00:04:53.079 --> 00:04:54.944
Times it by 2.

113
00:04:54.944 --> 00:04:56.193
&gt;&gt; 40.

114
00:04:56.193 --> 00:04:57.313
&gt;&gt; 40.
Zero, okay.

115
00:04:57.313 --> 00:04:59.343
It could be in the set.

116
00:04:59.343 --> 00:04:59.908
Is it in the set?

117
00:05:00.979 --> 00:05:03.289
No, but it could be in the set.

118
00:05:03.289 --> 00:05:06.322
And so you use this if you have
a really expensive operation,

119
00:05:06.322 --> 00:05:08.649
if this operation takes
like seconds of time.

120
00:05:09.739 --> 00:05:13.690
But you could have a Bloom filter that
says like a megabyte of ones and zeros,

121
00:05:13.690 --> 00:05:16.239
and you can just flip
a bunch of modulos in there.

122
00:05:16.239 --> 00:05:19.179
And to do the hashing function
takes like one millisecond.

123
00:05:19.179 --> 00:05:20.334
Of course, you're gonna wanna do this.

124
00:05:20.334 --> 00:05:22.214
Because you may only have to
do this every now and then.

125
00:05:22.214 --> 00:05:26.404
And you just only want to do
it if it could be in the set.

126
00:05:26.404 --> 00:05:28.634
If it's not in the set,
just don't even do it.

127
00:05:28.634 --> 00:05:32.633
And so Bloom filters allow for
super fast maybes and

128
00:05:32.633 --> 00:05:36.074
maybes are just way, way, way important.

129
00:05:37.104 --> 00:05:38.749
And so
you can do a lot of super cool stuff.

130
00:05:38.749 --> 00:05:42.113
This is probably one of the most practical
algorithms that we've shown today.

131
00:05:42.113 --> 00:05:44.862
Just because you can actually do
something with this out in the real world

132
00:05:44.862 --> 00:05:45.503
pretty easily.

133
00:05:45.503 --> 00:05:48.565
You can think of many expensive
operations in which the key,

134
00:05:48.565 --> 00:05:50.433
you don't need to do all of it.

135
00:05:50.433 --> 00:05:53.755
Again, this is how Chrome used to do stuff
for malicious websites, is that they

136
00:05:53.755 --> 00:05:57.029
figured out malicious websites, but
to check if that website's malicious,

137
00:05:57.029 --> 00:06:00.223
they'd have to go make a call somewhere
else to some sort of service.

138
00:06:00.223 --> 00:06:03.683
So instead they had a basic Bloom filter
that could take in any website and go,

139
00:06:03.683 --> 00:06:05.053
could you be malicious?

140
00:06:05.053 --> 00:06:07.524
Based on our hashing functions,
you could be malicious.

141
00:06:07.524 --> 00:06:10.730
But at this point the internet's gotten so
big and there's so much maliciousness,

142
00:06:10.730 --> 00:06:12.185
t hey now have a different algorithm.

143
00:06:12.185 --> 00:06:16.304
But at one point when times were a simpler
and people only cheated the old-fashioned

144
00:06:16.304 --> 00:06:20.248
way, then it was easier to use something
that could be checked really quickly and

145
00:06:20.248 --> 00:06:22.278
then verified against a slower service so

146
00:06:22.278 --> 00:06:24.616
you wouldn't have a bad
internet experience.

147
00:06:24.616 --> 00:06:27.716
Because if you go to Google.com,
you'd expect it not to intersect.

148
00:06:27.716 --> 00:06:30.397
You'd want it to go super fast so
you don't have to wait for

149
00:06:30.397 --> 00:06:33.176
a network call before you can
even look up the web page.

150
00:06:33.176 --> 00:06:34.786
I think we went pretty dang fast,
question.

151
00:06:34.786 --> 00:06:37.715
&gt;&gt; When you say maybes are very important,

152
00:06:37.715 --> 00:06:41.848
do you mean like maybe is
in like the monad, maybe?

153
00:06:41.848 --> 00:06:42.498
&gt;&gt; No, no.

154
00:06:42.498 --> 00:06:45.578
What I mean by that is
it's maybe in the set.

155
00:06:45.578 --> 00:06:48.718
We don't know if it is in the set,
but it looks like it's in the set.

156
00:06:48.718 --> 00:06:50.975
Just like how we had
a 10 put into this set,

157
00:06:50.975 --> 00:06:53.768
but a 20 looks like it
also belongs in the set.

158
00:06:53.768 --> 00:06:56.518
It may be a part of this set.

159
00:06:56.518 --> 00:07:00.331
It might not be, we don't know, but
it definitely is potentially in the set.

160
00:07:00.331 --> 00:07:03.670
Whereas a 9 you look it up and
you go, it's not in the set.

161
00:07:03.670 --> 00:07:04.640
It's just not even there.

162
00:07:04.640 --> 00:07:05.840
We know right away.

163
00:07:05.840 --> 00:07:07.120
Don't even worry about 9.

164
00:07:07.120 --> 00:07:09.611
And so
the maybe question is really important.

165
00:07:09.611 --> 00:07:13.500
Not like the monad, okay, monad's
mentioned, people are just loving it.

166
00:07:13.500 --> 00:07:14.801
People love monads.

