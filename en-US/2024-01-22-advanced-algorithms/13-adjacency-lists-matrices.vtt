WEBVTT

1
00:00:00.260 --> 00:00:01.310
So how do we represent a graph?

2
00:00:01.310 --> 00:00:05.417
So I'm going to do A, B, C, D,

3
00:00:05.417 --> 00:00:10.459
all roads lead to D, or C, fantastic.

4
00:00:10.459 --> 00:00:11.661
This is beautiful.

5
00:00:11.661 --> 00:00:15.695
So there are different ways
we can represent this graph.

6
00:00:15.695 --> 00:00:19.531
First way is an adjacency list.

7
00:00:19.531 --> 00:00:26.623
Now adjacency list is a giant list in
which, say A maps to the first spot.

8
00:00:26.623 --> 00:00:32.272
B maps to the second spot, C maps to the
third spot, and D maps to the fourth spot.

9
00:00:32.272 --> 00:00:38.837
I'm going to put one more arrow, nope,
that's fine, actually, this works out.

10
00:00:38.837 --> 00:00:41.369
No, I'm going to do this, I'm going to
do one more right there, this is great.

11
00:00:41.369 --> 00:00:47.509
This is great, all right, so that means A,
we would represent this as A goes to D.

12
00:00:47.509 --> 00:00:53.629
And if we had a weight, say five, we could
even put the weight in here five, right.

13
00:00:53.629 --> 00:00:56.792
A goes to D with a weight of five.

14
00:00:56.792 --> 00:01:00.696
A goes to C with a weight, it doesn't
really matter if you don't have weights,

15
00:01:00.696 --> 00:01:03.691
you don't have to represent weights,
but you get the idea.

16
00:01:03.691 --> 00:01:07.093
A goes to D, A goes to C,
you can represent them either way.

17
00:01:07.093 --> 00:01:08.656
You can kinda choose your own
adventure here, B exact same thing.

18
00:01:08.656 --> 00:01:11.491
B goes to D, and it goes to C, and

19
00:01:11.491 --> 00:01:17.167
now I'm just doing weightless,
I'm just doing a list in here.

20
00:01:17.167 --> 00:01:20.877
That's why it's called an adjacency list,
it's a list of lists of adjacencies,

21
00:01:20.877 --> 00:01:22.455
what you're connected to.

22
00:01:22.455 --> 00:01:25.935
But notice that when I do C,
C only goes to D.

23
00:01:27.175 --> 00:01:31.178
We don't talk about going to
A because this isn't directed graph,

24
00:01:31.178 --> 00:01:34.085
there is no connection back from C to A.

25
00:01:34.085 --> 00:01:39.024
So therefore, that's how we'd represent
it, and D it's lonely, once you're at D,

26
00:01:39.024 --> 00:01:40.782
that's all there is, right.

27
00:01:40.782 --> 00:01:44.226
No one going out of D, it's a roach motel
as they call it and so there we go,

28
00:01:44.226 --> 00:01:45.515
that is an adjacency list.

29
00:01:45.515 --> 00:01:50.495
There's also an adjacency
matrix it sounds fancy,

30
00:01:50.495 --> 00:01:53.900
it's really just a lot of numbers.

31
00:01:53.900 --> 00:01:58.702
All right, so I'd have A, B, C,

32
00:01:58.702 --> 00:02:03.171
D, A, B, C, D draw lines now,

33
00:02:03.171 --> 00:02:07.175
not very good box planning.

34
00:02:07.175 --> 00:02:12.522
These boxes are way too big, so now all
you do is look is A connected to A no.

35
00:02:12.522 --> 00:02:18.316
Is A connected to B, no, is A connected
to C, yes, is A connected to D.

36
00:02:18.316 --> 00:02:21.228
In this situation I put a little
fake weight just only on D and so

37
00:02:21.228 --> 00:02:22.803
typically an adjacency matrix.

38
00:02:22.803 --> 00:02:25.986
If it's just a directed or undirected
weightless graph you just put a one,

39
00:02:25.986 --> 00:02:27.729
there's a connection there.

40
00:02:27.729 --> 00:02:31.509
So, if you had weights you could put
the weight inside the adjacency matrix.

41
00:02:31.509 --> 00:02:35.328
All right, is B connected to A,
no, is B connected to itself, no.

42
00:02:35.328 --> 00:02:37.536
You can be connected to yourself
like that's a real thing,

43
00:02:37.536 --> 00:02:40.208
that's thing that happens, people do that.

44
00:02:40.208 --> 00:02:41.688
We're not gonna do that, but people do.

45
00:02:41.688 --> 00:02:46.797
All right, is B connected to C,
absolutely, is B connected to D,

46
00:02:46.797 --> 00:02:53.018
absolutely, is C connected to A,
no, no, no, yes, no, no, no, no.

47
00:02:53.018 --> 00:02:57.418
There you go, so you can see some obvious
advantages and disadvantages here.

48
00:02:57.418 --> 00:03:01.704
If you had a lot of connections,
an adjacency list kinda sucks because what

49
00:03:01.704 --> 00:03:04.638
happened if I wanted to find
out is A connected to C?

50
00:03:04.638 --> 00:03:08.652
I go to A, easy lookup, right to it.

51
00:03:08.652 --> 00:03:13.412
But I then have to go, hey,
are you C, you're not C, hey,

52
00:03:13.412 --> 00:03:15.999
are you C, you are C, awesome.

53
00:03:15.999 --> 00:03:19.347
Let's go to this, and so that sucks,
right, you don't wanna do that.

54
00:03:19.347 --> 00:03:20.847
And so if there's a lot of edges,

55
00:03:20.847 --> 00:03:23.485
something like an adjacency
matrix makes way more sense.

56
00:03:23.485 --> 00:03:29.651
Because it's easy access in,
right here, yes, we are connected.

57
00:03:29.651 --> 00:03:33.741
And so, you kind of have to make the
trade-off of how you wish to represent it.

58
00:03:33.741 --> 00:03:36.981
There's actually a third way, which is,
I don't know why people would do it, but

59
00:03:36.981 --> 00:03:39.181
you'd actually do what
is called an edge list.

60
00:03:39.181 --> 00:03:41.961
We're not gonna do that, no,
I've never seen it done.

61
00:03:41.961 --> 00:03:43.443
I don't know anyone that would do that.

62
00:03:43.443 --> 00:03:46.581
But you do something like A goes
to D with the weight of five.

63
00:03:46.581 --> 00:03:49.071
A goes to C with a weight of one.

64
00:03:49.071 --> 00:03:52.618
I'm not sure why you would do that,
but it does exist.

65
00:03:52.618 --> 00:03:55.731
Okay, I've got to be
somewhat complete here.

66
00:03:55.731 --> 00:03:59.277
All right, so there you go,
that is like the basics of a graph.

67
00:03:59.277 --> 00:04:04.657
Is everybody feeling like they
understand the basics of a graph?

68
00:04:04.657 --> 00:04:05.997
Yeah, feeling good?

69
00:04:05.997 --> 00:04:07.847
Okay, yeah, okay, sweet.

70
00:04:07.847 --> 00:04:09.527
Hey, pretty cool, all right.

