WEBVTT

1
00:00:00.450 --> 00:00:03.621
So let's talk about Prim's algorithm.

2
00:00:03.621 --> 00:00:08.467
So Prim's algorithm and Kruskal's
algorithm are ways to take a graph and

3
00:00:08.467 --> 00:00:13.090
turn it into a spanning tree,
particularly a minimum spanning tree.

4
00:00:13.090 --> 00:00:15.370
So first off, what is a spanning tree?

5
00:00:15.370 --> 00:00:19.544
Let's just say we have a four node graph.

6
00:00:19.544 --> 00:00:22.051
A spanning tree would be the minimal

7
00:00:22.051 --> 00:00:26.825
amount of edges required to have
a connection to every single node.

8
00:00:26.825 --> 00:00:29.253
So this right here is a spanning tree.

9
00:00:29.253 --> 00:00:33.028
This is a spanning tree.

10
00:00:33.028 --> 00:00:35.183
This is a spanning tree.

11
00:00:35.183 --> 00:00:36.692
That's a spanning tree.

12
00:00:36.692 --> 00:00:37.852
Okay, so we get the idea.

13
00:00:37.852 --> 00:00:40.352
If you had a graph that looked
like this with the floating node,

14
00:00:40.352 --> 00:00:43.341
you can't make a spanning tree because
we can't visit every single node.

15
00:00:43.341 --> 00:00:44.630
So that's a requirement.

16
00:00:44.630 --> 00:00:50.196
Now what happened if these
edges had weight, 8, 4, 3, 2?

17
00:00:50.196 --> 00:00:54.447
Well, if we wanted to make a spanning
tree here that was the minimum cost,

18
00:00:54.447 --> 00:00:58.376
we'd have to start at any node,
doesn't really matter what node.

19
00:00:58.376 --> 00:01:00.269
Let's just say we start here, and

20
00:01:00.269 --> 00:01:03.025
we want to be able to build
out that spanning tree.

21
00:01:03.025 --> 00:01:06.189
By the way, spanning trees may or
may not all look the same,

22
00:01:06.189 --> 00:01:09.800
you could have multiple minimum
spanning trees for a single graph,

23
00:01:09.800 --> 00:01:12.731
if there's multiple same
weight edges along the way.

24
00:01:12.731 --> 00:01:16.576
All right, so if we were to just
kind of build one with our eyeballs,

25
00:01:16.576 --> 00:01:19.887
I think the obvious answer is,
don't use eight, right?

26
00:01:19.887 --> 00:01:21.211
We are able to do that and

27
00:01:21.211 --> 00:01:24.932
the thing about doing this is we
are able to do it greedily, right?

28
00:01:24.932 --> 00:01:27.497
We could just look at it and
go, I already know which ones.

29
00:01:27.497 --> 00:01:32.242
That means if we had something here and
here and it was a 1 versus a 9, again,

30
00:01:32.242 --> 00:01:35.903
you can be as like greedy as
you like with these algorithms.

31
00:01:35.903 --> 00:01:39.284
I can obviously not take the 9 and
clearly take the 1, right?

32
00:01:39.284 --> 00:01:42.372
All right, awesome.

33
00:01:42.372 --> 00:01:43.292
So this is a spanning tree,
we are building a spanning tree.

34
00:01:43.292 --> 00:01:47.930
The weight of the spanning tree of course
is the sum of all the edges which is 5, 9,

35
00:01:47.930 --> 00:01:51.071
10, it would be 10 that
would be the weight, okay?

36
00:01:51.071 --> 00:01:54.562
We don't really care,
I mean you can care about these for

37
00:01:54.562 --> 00:01:57.047
our problems we don't care about them.

38
00:01:57.047 --> 00:02:00.015
I actually have, I've never tried
to make a minimum spanning tree and

39
00:02:00.015 --> 00:02:02.896
then use it in an application, so
I don't really know why you do it.

40
00:02:02.896 --> 00:02:06.691
I assume every time I hear anything about
spanning trees, I just immediately, or

41
00:02:06.691 --> 00:02:08.011
anything to do with graphs,

42
00:02:08.011 --> 00:02:10.820
I'm just like networking problem and
then I just walk away.

43
00:02:10.820 --> 00:02:14.208
Like it's usually almost
always comes down to networks.

44
00:02:14.208 --> 00:02:17.311
Cuz if you really think about it,
everything's kind of a network.

45
00:02:17.311 --> 00:02:21.772
When you connect them all, you know that
one of the original graph problems was,

46
00:02:21.772 --> 00:02:25.381
there was a certain set of bridges and
some royalty was just like,

47
00:02:25.381 --> 00:02:28.201
I want to be able to walk
across all these bridges and

48
00:02:28.201 --> 00:02:32.367
visit every part of my town without
having to cross a bridge more than once.

49
00:02:32.367 --> 00:02:34.495
I forget what it was, but
I believe Euler then was called.

50
00:02:34.495 --> 00:02:36.728
Euler the famous mathematician
that we all call Euler.

51
00:02:36.728 --> 00:02:40.704
Euler was called and he did a proof and he
was just like, you can't actually do this,

52
00:02:40.704 --> 00:02:42.386
it's impossible and here's why.

53
00:02:42.386 --> 00:02:43.440
Very fantastic.

54
00:02:43.440 --> 00:02:44.463
I absolutely love that source.

55
00:02:44.463 --> 00:02:47.752
I wanna put down my black marker and
we're gonna get another black marker.

56
00:02:47.752 --> 00:02:48.485
All right, feeling good.

57
00:02:48.485 --> 00:02:49.667
Had to change things up a little bit.

58
00:02:49.667 --> 00:02:54.016
All right, so
now we are going to do Prim's.

59
00:02:54.016 --> 00:02:56.819
So what is Prim's algorithm?

60
00:02:56.819 --> 00:02:58.790
Prim's algorithm.

61
00:02:58.790 --> 00:03:04.413
And we're also going to compare
it with Kruskal's algorithm.

62
00:03:04.413 --> 00:03:07.284
All right, so very fantastic.

63
00:03:07.284 --> 00:03:11.624
I particularly like this one because this
is like almost my whole name right there,

64
00:03:11.624 --> 00:03:14.049
so it feels like I'm
a part of this algorithm.

65
00:03:14.049 --> 00:03:16.711
I have a nice little graph, I just wanna
make sure I have it all in my head.

66
00:03:16.711 --> 00:03:18.405
I think I have it all in my head.

67
00:03:18.405 --> 00:03:18.935
All right,

68
00:03:18.935 --> 00:03:22.227
we're gonna be building a minimum
spanning tree off the following tree.

69
00:03:28.439 --> 00:03:29.466
Look how beautiful.

70
00:03:33.078 --> 00:03:37.396
It's a beautifully,
please stop clapping, please stop.

71
00:03:37.396 --> 00:03:39.592
Man, that's just to kind of everybody.

72
00:03:39.592 --> 00:03:49.565
All right,
&gt;&gt; Lots of clapping in the chat.

73
00:03:49.565 --> 00:03:54.370
&gt;&gt; I knew they would chat cuz they like
me, unlike some other people here.

74
00:03:54.370 --> 00:03:58.638
All right, so, with Prim's algorithm,
our goal again is to do

75
00:03:58.638 --> 00:04:03.475
a minimum spanning tree and our goal
is to do this as quickly as possible.

76
00:04:03.475 --> 00:04:06.288
And so Prim's is a greedy algorithm.

77
00:04:06.288 --> 00:04:10.852
One of the big differences between Prim's
and Kruskal's is with Prim's you start

78
00:04:10.852 --> 00:04:14.126
by picking a node, in Kruskal's,
you don't pick a node.

79
00:04:14.126 --> 00:04:15.027
So we'll first start here.

80
00:04:15.027 --> 00:04:18.825
So step one is pick a node.

81
00:04:18.825 --> 00:04:22.308
Pick a node, any node,
come on, from the audience go.

82
00:04:22.308 --> 00:04:23.066
&gt;&gt; E.

83
00:04:23.066 --> 00:04:24.426
&gt;&gt; E, best node yet.

84
00:04:24.426 --> 00:04:25.668
All right, fantastic.

85
00:04:25.668 --> 00:04:30.098
Next, we're gonna take and we're gonna
add all these edges to a collection.

86
00:04:30.098 --> 00:04:35.032
I'm using the term collection
intentionally because I want it to be

87
00:04:35.032 --> 00:04:37.638
nebulous in the beginning, okay?

88
00:04:37.638 --> 00:04:40.841
So add to collection,
add edges to collection.

89
00:04:40.841 --> 00:04:46.695
We're gonna do a little bit of
analyzing on this algorithm, okay?

90
00:04:46.695 --> 00:04:50.967
Because graphs are really good to do it
and this one, this one right here, this

91
00:04:50.967 --> 00:04:55.243
thing right here always catches me every
single time I relearn about graphs and

92
00:04:55.243 --> 00:04:58.328
trying to understand its runtime,
every single time.

93
00:04:58.328 --> 00:04:59.679
Absolutely hate this one.

94
00:04:59.679 --> 00:05:03.648
All right,
after adding e to the collections,

95
00:05:03.648 --> 00:05:08.909
we're gonna get smallest edge,
remember greedy algorithm,

96
00:05:08.909 --> 00:05:14.281
to the smallest edge, edge,
smallest edge to unvisited node.

97
00:05:18.183 --> 00:05:24.415
And we're gonna just pretty much
repeat this, V- 1 times, okay?

98
00:05:24.415 --> 00:05:27.449
Because you have already a starting node,

99
00:05:27.449 --> 00:05:31.587
and now we just need to do that
minus one times, all right?

100
00:05:31.587 --> 00:05:34.943
I believe, maybe V times, I'm gonna
have to make sure, there's a V -1,

101
00:05:34.943 --> 00:05:35.999
maybe I got that wrong.

102
00:05:35.999 --> 00:05:38.872
Depending if you count this one
as already done or not done, so

103
00:05:38.872 --> 00:05:40.708
we're going to do this V times, okay?

104
00:05:40.708 --> 00:05:42.473
Pick a starting node,
then we do that V times.

105
00:05:42.473 --> 00:05:44.355
All right, awesome.

106
00:05:44.355 --> 00:05:48.316
So, we start with A,
we have visited A, right?

107
00:05:48.316 --> 00:05:50.017
So we don't have to add A again.

108
00:05:50.017 --> 00:05:51.878
Wait, no, we're starting with e.

109
00:05:51.878 --> 00:05:56.095
By the way, I'm very happy you guys
said e because e was the node I wanted

110
00:05:56.095 --> 00:06:00.542
everyone to start off with, so
I've done this 9,000 IQ play all day.

111
00:06:00.542 --> 00:06:04.042
All of these are capital letters, this
one's lowercase, I was just really trying

112
00:06:04.042 --> 00:06:06.742
to make this happen so
I'm very excited that you did this for me.

113
00:06:06.742 --> 00:06:10.766
All right, there we go, e is selected.

114
00:06:10.766 --> 00:06:15.873
Now, we are gonna have this collection

115
00:06:15.873 --> 00:06:19.892
that has e to F at a weight of 1,

116
00:06:19.892 --> 00:06:25.457
we are going to have a e
to G at a weight of 3,

117
00:06:25.457 --> 00:06:31.377
and we're gonna have a e
to C at a weight of 3.

118
00:06:31.377 --> 00:06:33.163
All right, I'm not gonna do that.

119
00:06:33.163 --> 00:06:35.950
There we go, so that's our kind of
our edges that we need to look at.

120
00:06:38.349 --> 00:06:41.111
All right, so
now we need to select the lowest edge.

121
00:06:41.111 --> 00:06:45.606
First off, our edge weight is infinity,
it's now 1, is 1 less than 3?

122
00:06:45.606 --> 00:06:46.455
Yes, it is.

123
00:06:46.455 --> 00:06:47.400
Is 1 less than 3?

124
00:06:47.400 --> 00:06:48.285
Yes, it is.
Okay, so

125
00:06:48.285 --> 00:06:50.256
this is the edge we're going to pick.

126
00:06:50.256 --> 00:06:53.435
I'm going to erase this edge out of here,
and

127
00:06:53.435 --> 00:06:57.628
we're going to add this edge
to our minimum spanning tree.

128
00:06:57.628 --> 00:07:02.287
F is now visited,
let me just put these on the back.

129
00:07:02.287 --> 00:07:06.802
If I was good at this and I've already put
them on the back, I'm not good at this and

130
00:07:06.802 --> 00:07:09.034
I just drew on myself, I drew on myself.

131
00:07:09.034 --> 00:07:10.505
All right, there we go.

132
00:07:10.505 --> 00:07:12.279
Now we're gonna do the same thing with F.

133
00:07:12.279 --> 00:07:15.229
All right, so
we start first with adding the edges.

134
00:07:15.229 --> 00:07:18.132
We're going to have F to
G at a weight of 2, and

135
00:07:18.132 --> 00:07:22.524
we're going to have F to D at a weight
of 4, and we're going to have F to

136
00:07:22.524 --> 00:07:27.298
E at a weight of 1, but E has already
been visited, we don't add it back in.

137
00:07:27.298 --> 00:07:29.467
Edge already seen, don't do it.

138
00:07:29.467 --> 00:07:31.812
All right, we do it again.

139
00:07:31.812 --> 00:07:35.507
E, G, 3,
that is our minimum weight right now.

140
00:07:35.507 --> 00:07:38.063
All right, it is the equal,
so we don't take that one.

141
00:07:38.063 --> 00:07:40.245
This one is less than, so
this is our new minimum one.

142
00:07:40.245 --> 00:07:41.473
Do we take this one?

143
00:07:41.473 --> 00:07:43.710
No, it's too large, it's a 4, there we go.

144
00:07:43.710 --> 00:07:47.761
So this is the one we're going to
be taking, so let's erase that out,

145
00:07:47.761 --> 00:07:50.524
that's F to G and so
now we do that, fantastic.

146
00:07:50.524 --> 00:07:54.730
Again, same thing, G cannot add e,
G cannot add F we've already seen them so

147
00:07:54.730 --> 00:07:59.417
G is kind of like the nice little terminal
experience, we don't need to do anything.

148
00:07:59.417 --> 00:08:01.582
So we pick again.

149
00:08:01.582 --> 00:08:06.033
E to G, you can't pick that one,
G's already been visited, toss it out.

150
00:08:06.033 --> 00:08:07.824
Get the hell outta here.

151
00:08:07.824 --> 00:08:10.406
E to C haven't been visited,
awesome, let's pick this one.

152
00:08:10.406 --> 00:08:15.242
F to D, it's larger, it's a 4 versus a 3,
so we're gonna keep on picking

153
00:08:15.242 --> 00:08:19.571
the smallest one every single time
we bring it up here, fantastic.

154
00:08:19.571 --> 00:08:24.167
Now we add C, C can do B at a weight of 1,
that's a 1 by the way.

155
00:08:24.167 --> 00:08:27.224
7s always contain a cross,
1s don't, that's how you know, and

156
00:08:27.224 --> 00:08:29.379
you'll never get mixed
up again if you do that.

157
00:08:29.379 --> 00:08:32.571
All right, so C to B at a weight of 1.

158
00:08:32.571 --> 00:08:36.706
Let's see, C to D at a weight of 8.

159
00:08:36.706 --> 00:08:38.862
Can't do the e one, already visited.

160
00:08:38.862 --> 00:08:41.396
We've marked C as visited, fantastic.

161
00:08:41.396 --> 00:08:43.589
C to B, 1, this is our new minimum weight.

162
00:08:43.589 --> 00:08:44.211
Is it less than 8?

163
00:08:44.211 --> 00:08:45.367
Yes it is.
Is it less than 4?

164
00:08:45.367 --> 00:08:46.184
Yes it is.

165
00:08:46.184 --> 00:08:51.197
Keep this one right here and now we're
gonna pop this one off, fantastic.

166
00:08:51.197 --> 00:08:53.191
You're probably thinking I get
the algorithm at this point,

167
00:08:53.191 --> 00:08:55.042
we're gonna keep on doing it
all the way through, okay?

168
00:08:55.042 --> 00:08:58.259
It's important to always play
algorithms all the way through.

169
00:08:58.259 --> 00:09:03.251
All right, B, we can add A to 9, so

170
00:09:03.251 --> 00:09:06.586
B, A, 9, B, D, 8.

171
00:09:06.586 --> 00:09:08.540
D is not visited yet and there we go.

172
00:09:08.540 --> 00:09:12.067
So B, A, 9, 9 is the largest up,
this is less than, so

173
00:09:12.067 --> 00:09:15.756
we're going to go with this one,
C to D for 8, B to D for 8.

174
00:09:15.756 --> 00:09:17.518
Notice that if this was reversed,

175
00:09:17.518 --> 00:09:20.329
we would have actually chose
this one versus this one.

176
00:09:20.329 --> 00:09:23.325
But then we get to here F to D it's 4,
obviously choose that one,

177
00:09:23.325 --> 00:09:24.590
that's the smallest one.

178
00:09:24.590 --> 00:09:27.114
So we're gonna go up to here, fantastic.

179
00:09:27.114 --> 00:09:31.166
So we do this, now B to A,
that's our new lowest one, it's at a 9,

180
00:09:31.166 --> 00:09:33.890
up this one's lower, this one's the same.

181
00:09:33.890 --> 00:09:37.561
So we choose this one but, hey, this
one's already been seen, nothing to do.

182
00:09:37.561 --> 00:09:41.830
Again start here, B to A that's a 9,
B to D, that's lower, but

183
00:09:41.830 --> 00:09:43.867
we've already seen this one.

184
00:09:43.867 --> 00:09:45.300
Get this one out of here.

185
00:09:45.300 --> 00:09:48.109
Now we go back to here,
we see B to A, it's our only choice,

186
00:09:48.109 --> 00:09:49.131
this is the one we do.

187
00:09:49.131 --> 00:09:53.095
This is the minimum spanning tree,
A, B, C, e, F, D, and G,

188
00:09:53.095 --> 00:09:55.307
that is the minimum spanning tree.

189
00:09:55.307 --> 00:09:59.038
You can kind of just visually prove that
this is the smallest amount of weights,

190
00:09:59.038 --> 00:10:00.997
and that is how Prim's algorithm works.

191
00:10:00.997 --> 00:10:02.939
Does that make sense?

192
00:10:02.939 --> 00:10:06.232
Okay, Prim's algorithm is pretty
simple in how it works, but

193
00:10:06.232 --> 00:10:08.853
we did a lot of things super inefficient,
right?

194
00:10:08.853 --> 00:10:12.599
Let's just think about
our runtime right now.

195
00:10:12.599 --> 00:10:15.100
Our runtime is picking a node,
constant time.

196
00:10:15.100 --> 00:10:18.713
There's also some setup that
I didn't really talk about.

197
00:10:18.713 --> 00:10:23.575
Like, we have to set up a visited list,
the visited list should be the size of V,

198
00:10:23.575 --> 00:10:24.094
right?

199
00:10:24.094 --> 00:10:25.897
So, that's a V right there.

200
00:10:25.897 --> 00:10:29.989
Now, what is the runtime
of this statement?

201
00:10:29.989 --> 00:10:32.269
We're gonna do a little analysis,
I know we haven't done any yet,

202
00:10:32.269 --> 00:10:33.438
we're gonna do a little bit here.

203
00:10:33.438 --> 00:10:35.707
Graphs just tend to require
a lot more analysis.

204
00:10:35.707 --> 00:10:38.528
What is the runtime of that statement?

205
00:10:38.528 --> 00:10:43.209
Now, one might think, well,
we're doing this V times and

206
00:10:43.209 --> 00:10:47.813
we have to go over a collection
of potentially e elements.

207
00:10:47.813 --> 00:10:52.951
Therefore, it is V times e, but
you would be wrong, it is not V times e.

208
00:10:52.951 --> 00:10:57.479
This is one of those deceptive things
that every single time I forget this and

209
00:10:57.479 --> 00:11:01.668
I have to relearn it every time I go
back to graphs, every single time.

210
00:11:01.668 --> 00:11:04.302
Think about it this way.

211
00:11:04.302 --> 00:11:10.285
If we go to A, we look at this edge once.

212
00:11:10.285 --> 00:11:11.722
When we add B,
we look at this edge one more time.

213
00:11:11.722 --> 00:11:15.254
We will literally never look
at that edge ever again.

214
00:11:15.254 --> 00:11:22.215
That means this statement, despite being
in a loop, will always be two edge.

215
00:11:22.215 --> 00:11:25.662
It is permanently that, 100% of the time,

216
00:11:25.662 --> 00:11:30.415
it always executes in two edge
because you visit each edge twice.

217
00:11:30.415 --> 00:11:31.952
I know, isn't it just the worst?

218
00:11:31.952 --> 00:11:36.819
Because it's in a loop and just, it throws
me for a loop every single time but

219
00:11:36.819 --> 00:11:38.961
it is literally 2e, very cool.

220
00:11:38.961 --> 00:11:40.967
Hopefully that blows
every last person's mind.

221
00:11:40.967 --> 00:11:45.339
Now this one right here, this is
the thing that we got to figure out,

222
00:11:45.339 --> 00:11:47.193
what is the run time of this?

223
00:11:51.721 --> 00:11:53.595
Worst case,
we always just say it in worst case,

224
00:11:53.595 --> 00:11:55.906
we're not gonna do like a little
omega around here, okay?

225
00:11:55.906 --> 00:11:57.528
We're just gonna do worst case.

226
00:11:57.528 --> 00:12:00.856
&gt;&gt; Linear because you're searching
through the list that you have.

227
00:12:00.856 --> 00:12:04.035
&gt;&gt; Yeah, linear to edge, so
it's proportional to the edge, right?

228
00:12:04.035 --> 00:12:08.504
And so you could imagine a situation
in which you have a graph that has all

229
00:12:08.504 --> 00:12:09.257
the edges.

230
00:12:09.257 --> 00:12:11.804
And so the first time you do
it you have all the edges and

231
00:12:11.804 --> 00:12:14.133
then now you're walking over it and
worse time.

232
00:12:14.133 --> 00:12:18.638
So, this is edge, so that means we are
doing something V times e because we have

233
00:12:18.638 --> 00:12:20.361
to do this every single time.

234
00:12:20.361 --> 00:12:23.546
We will multiple times visit
the same edge over and over and

235
00:12:23.546 --> 00:12:26.214
over again,
like you saw with our A9 business.

236
00:12:26.214 --> 00:12:29.872
If we would have started on B,
this would have remained in the graph for

237
00:12:29.872 --> 00:12:33.406
the entirety of Prim's algorithm,
and we would have checked it for

238
00:12:33.406 --> 00:12:34.460
every single node.

239
00:12:34.460 --> 00:12:41.457
So, it is, right now,
our runtime is O of Ve, not great, right?

240
00:12:41.457 --> 00:12:45.865
This is not a W right now,
we're not winning, okay?

241
00:12:45.865 --> 00:12:47.068
We're not loving it.

