WEBVTT

1
00:00:00.034 --> 00:00:02.283
We're gonna go on we're gonna
do one more graph algorithm.

2
00:00:02.283 --> 00:00:05.135
I'm very excited about this graph
algorithm It's called Ford-Fulkerson.

3
00:00:05.135 --> 00:00:08.002
Has anyone heard of Ford-Fulkerson?

4
00:00:08.002 --> 00:00:11.120
Well, you can say Fulkerson like
Fulkerson it just sounds fun.

5
00:00:11.120 --> 00:00:13.554
I don't know what it is about it but
it's a great one.

6
00:00:13.554 --> 00:00:22.265
This one is called max flow min cut,
all right?

7
00:00:22.265 --> 00:00:23.962
There the same problem in some sense.

8
00:00:23.962 --> 00:00:25.693
It's very, very exciting.

9
00:00:25.693 --> 00:00:28.234
And I have this little note right here and

10
00:00:28.234 --> 00:00:31.764
I kid you not it literally
says car algo British people.

11
00:00:31.764 --> 00:00:34.680
That's what it says because it's very
fantastic I'll explain that one sec.

12
00:00:34.680 --> 00:00:37.428
I just want to leave you guys with
that one because it's super exciting.

13
00:00:37.428 --> 00:00:38.016
All right, so

14
00:00:38.016 --> 00:00:40.866
I have this really I actually have
one right here that's super good.

15
00:00:40.866 --> 00:00:47.096
So, we'll do this I know,
car algorithm British people,

16
00:00:47.096 --> 00:00:51.344
classic phrase you hear on the regular.

17
00:00:51.344 --> 00:00:54.498
Now, usually whenever we're
doing a max flow problem,

18
00:00:54.498 --> 00:00:56.875
they always are directed graphs, right?

19
00:00:56.875 --> 00:01:01.395
It would be kinda weird to try to do
an undirected situation going on here but

20
00:01:01.395 --> 00:01:04.361
in some sense they're
also undirected graphs.

21
00:01:04.361 --> 00:01:09.446
Now you're probably hearing that going

22
00:01:09.446 --> 00:01:14.381
well that doesn't make much more sense

23
00:01:14.381 --> 00:01:19.316
that makes frankin sense I'm gonna put

24
00:01:19.316 --> 00:01:24.549
a 0/10, 0/8, 0/5, 0/5,

25
00:01:24.549 --> 00:01:29.351
0/5, 0/8 did I get that right?

26
00:01:29.351 --> 00:01:32.397
I guess it really didn't matter 0/6,

27
00:01:32.397 --> 00:01:37.283
0/8 hold on one second,
there's a little bit of setup to this.

28
00:01:37.283 --> 00:01:42.401
All right, a maximum flow problem usually
starts off with something called a source.

29
00:01:42.401 --> 00:01:44.759
We pretend the source
has an infinite input.

30
00:01:44.759 --> 00:01:46.469
It can just keep on putting
stuff into the graph.

31
00:01:46.469 --> 00:01:48.918
We have a sync our destination.

32
00:01:48.918 --> 00:01:50.389
Where do we want to go?

33
00:01:50.389 --> 00:01:53.192
T for sync, of course,
because well source and

34
00:01:53.192 --> 00:01:55.798
sync I mean just really truly unfortunate.

35
00:01:55.798 --> 00:01:58.803
And you also didn't use any other
letters from the word sync it's t, okay?

36
00:01:58.803 --> 00:02:00.297
That's just what we do here.

37
00:02:00.297 --> 00:02:03.139
You'll notice that instead
of having a weight,

38
00:02:03.139 --> 00:02:05.369
we have a weight with like a zero on it.

39
00:02:05.369 --> 00:02:09.792
And so what that means is that's how
much flow is in this current point.

40
00:02:09.792 --> 00:02:12.214
Now, okay people are saying t or
terminal or terminus.

41
00:02:12.214 --> 00:02:15.976
Okay, tough guy I'm gonna say t for sync.

42
00:02:15.976 --> 00:02:20.989
Okay, and so our goal is try to
maximize the flow through this network.

43
00:02:20.989 --> 00:02:23.874
You can imagine this could be used for
networks.

44
00:02:23.874 --> 00:02:26.207
Remember how I said I'll graph
problems come down to networks.

45
00:02:26.207 --> 00:02:29.369
We can imagine that's what you're trying
to do is try to figure that out or

46
00:02:29.369 --> 00:02:32.531
traffic, traffic is kinda like another
way you could do something as they

47
00:02:32.531 --> 00:02:34.732
have to figure out how to
get enough stuff through.

48
00:02:34.732 --> 00:02:39.722
The Ford-Fulkerson algorithm does
not specify how you choose a path

49
00:02:39.722 --> 00:02:43.431
from s to t that's like
choose your own adventure.

50
00:02:43.431 --> 00:02:46.061
You could do a depth-first search,
you could do a breadth-first search,

51
00:02:46.061 --> 00:02:47.673
there's something called Dynex algorithm.

52
00:02:47.673 --> 00:02:51.065
You could do all sorts of different stuff
we're just gonna keep it simple and

53
00:02:51.065 --> 00:02:52.661
I'm just gonna draw a path, okay?

54
00:02:52.661 --> 00:02:54.892
I have eyeballs,
I'm pretty good at making paths for

55
00:02:54.892 --> 00:02:56.489
stuff in order to kinda choose a path.

56
00:02:56.489 --> 00:02:59.502
Eventually you will hit a maximum flow.

57
00:02:59.502 --> 00:03:02.262
So let's just start kind of by example.

58
00:03:02.262 --> 00:03:08.056
So I'm gonna choose this top
route right here, very simple.

59
00:03:08.056 --> 00:03:12.286
And then what you do is you find the
minimum flow throughout that top route.

60
00:03:12.286 --> 00:03:15.265
I have a seven, ten, eight.

61
00:03:15.265 --> 00:03:19.754
It's obviously a seven that means I can
use seven units of flow right here, I can

62
00:03:19.754 --> 00:03:24.114
use seven units of flow right here and
I can use seven units of flow right here.

63
00:03:24.114 --> 00:03:26.552
Next, we'll choose this one.

64
00:03:26.552 --> 00:03:30.004
I can choose a, this one has a here,
I'm gonna erase this and

65
00:03:30.004 --> 00:03:32.386
I'm just gonna reuse these lines again.

66
00:03:32.386 --> 00:03:37.768
This one has a flow of six, this one has a
flow of eight, this one has a flow of one.

67
00:03:37.768 --> 00:03:41.932
There's only one unit left in this in
this pipe so that means we can use one.

68
00:03:41.932 --> 00:03:45.972
So I could draw a little one right here,
I could draw a little one right here and

69
00:03:45.972 --> 00:03:49.410
I can draw an 8 right here we've
maximized our flow right there.

70
00:03:49.410 --> 00:03:54.868
Well we still have another side so I can
do a five, five, ten our minimum flow or

71
00:03:54.868 --> 00:03:58.865
our maximum flow we can get
through this is five, right?

72
00:03:58.865 --> 00:04:03.373
Because this is our
smallest pipe right here,

73
00:04:03.373 --> 00:04:06.619
all right, five, five, five.

74
00:04:06.619 --> 00:04:10.376
And so there's no other path left in this
graph because if I try to go up here,

75
00:04:10.376 --> 00:04:11.454
it's already full.

76
00:04:11.454 --> 00:04:12.814
If I try to go over here,

77
00:04:12.814 --> 00:04:17.449
you can't get to this node without going
through this one which is already full.

78
00:04:17.449 --> 00:04:22.787
So therefore, this is our max
flow of the graph which is 13.

79
00:04:22.787 --> 00:04:27.937
That is our maximum flow, which our
minimum cut of the graph is also 13.

80
00:04:27.937 --> 00:04:32.721
And a cut is defined in how do you remove,
how do you break apart

81
00:04:32.721 --> 00:04:37.601
the graph such that the source and
the sync can no longer touch.

82
00:04:37.601 --> 00:04:40.194
They're no longer in the same sub graph.

83
00:04:40.194 --> 00:04:41.947
So that's called the minimum cut,

84
00:04:41.947 --> 00:04:44.586
the minimal amount of value
you can cut through this.

85
00:04:44.586 --> 00:04:48.628
I'll show you what that means here in a
moment that's the whole car British people

86
00:04:48.628 --> 00:04:51.572
thing that I was talking about but
keep that in mind, okay,

