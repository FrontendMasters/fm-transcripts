WEBVTT

1
00:00:00.120 --> 00:00:03.740
We'll do the other case,
the arguably more complicated case.

2
00:00:03.740 --> 00:00:09.188
So let's do A, B, C.

3
00:00:09.188 --> 00:00:13.768
We'll have another Br, CL, CR, AL.

4
00:00:13.768 --> 00:00:18.566
So we're gonna do the exact same thing.

5
00:00:18.566 --> 00:00:24.275
We need to do a small rotation this way,
followed by a large rotation this way.

6
00:00:24.275 --> 00:00:27.863
Now, technically, you can do this
rotation in one maneuver, okay?

7
00:00:27.863 --> 00:00:30.860
You can really be the top
gun of maneuvering, but

8
00:00:30.860 --> 00:00:35.485
we're gonna keep it simple and just do
it in a singular move or in two moves.

9
00:00:35.485 --> 00:00:36.850
It's just easier to reason about.

10
00:00:36.850 --> 00:00:42.190
So typically, what would happen
is that B would come down,

11
00:00:42.190 --> 00:00:44.784
And C would come up.

12
00:00:44.784 --> 00:00:48.469
Now this would normally be fine,
but since we have Br and CR or

13
00:00:48.469 --> 00:00:51.521
kind of in a little bit,
our jimmies rustled now.

14
00:00:51.521 --> 00:00:54.586
What do we do here?

15
00:00:54.586 --> 00:00:57.824
&gt;&gt; Compare B to CR.

16
00:00:57.824 --> 00:00:59.650
&gt;&gt; B to CR, exactly.

17
00:00:59.650 --> 00:01:01.519
What do we know about CR?

18
00:01:01.519 --> 00:01:04.212
CR is strictly greater than C.

19
00:01:04.212 --> 00:01:06.670
It is strictly less than B.

20
00:01:06.670 --> 00:01:11.688
Therefore, if it were to be moved
over to here, and C moved up to here,

21
00:01:11.688 --> 00:01:17.322
well, it is still strictly greater than C,
and is still strictly less than B.

22
00:01:17.322 --> 00:01:19.480
We haven't broken any of the rules.

23
00:01:19.480 --> 00:01:23.219
So C's right goes to
the rotation of B's left,

24
00:01:23.219 --> 00:01:27.152
and therefore,
Br remains in the same position.

25
00:01:27.152 --> 00:01:28.850
We can get the hell out of here, C.

26
00:01:28.850 --> 00:01:33.701
And then we can put CL remains right
there, because CL is still less than C,

27
00:01:33.701 --> 00:01:35.164
still greater than A.

28
00:01:35.164 --> 00:01:39.872
And now we just do that final rotation
of dropping down A down to here,

29
00:01:39.872 --> 00:01:41.503
keeping AL where it is.

30
00:01:41.503 --> 00:01:44.436
Now we need to do this,
we need to think about CL.

31
00:01:44.436 --> 00:01:47.488
CL is strictly less than C,
but greater than A.

32
00:01:47.488 --> 00:01:52.873
Therefore, CL can go right here,
and B remains the way it is.

33
00:01:52.873 --> 00:01:57.490
All right, we're feeling confident
with our AVL experience here.

34
00:01:57.490 --> 00:01:59.000
All right, all right, I like this.

35
00:01:59.000 --> 00:02:00.403
This is fun?

36
00:02:00.403 --> 00:02:01.435
So there we go.

37
00:02:01.435 --> 00:02:03.775
Insertion just follows these rules.

38
00:02:03.775 --> 00:02:06.268
The moment you insert,
you start from there and

39
00:02:06.268 --> 00:02:09.022
you just walk up the path
recalculating the height.

40
00:02:09.022 --> 00:02:13.433
The moment you hit a violation, you just
perform one of these four rotations.

41
00:02:13.433 --> 00:02:15.402
So there's no real need
to show these things,

42
00:02:15.402 --> 00:02:17.074
deletion works the exact same way too.

43
00:02:17.074 --> 00:02:19.364
Follow your three cases of deletion.

44
00:02:19.364 --> 00:02:22.652
Wherever your node ends, if you have
to hop all the way down the tree,

45
00:02:22.652 --> 00:02:24.191
you need to perform a rotation.

46
00:02:24.191 --> 00:02:27.338
Wherever the deletion happens,
you just walk up the tree looking for

47
00:02:27.338 --> 00:02:29.790
any violations, and
then perform these rotations.

48
00:02:29.790 --> 00:02:33.397
So pretty great,
pretty simple, pretty exciting.

49
00:02:33.397 --> 00:02:36.168
I absolutely think AVL trees
are just the greatest.

50
00:02:36.168 --> 00:02:37.868
They're just the greatest.

51
00:02:37.868 --> 00:02:39.927
Now what can we say about an AVL tree?

52
00:02:39.927 --> 00:02:45.398
Well, what we can say about it is that
at some point, no matter how big it is,

53
00:02:45.398 --> 00:02:50.955
we'll only be out of balance at the root
by either one extra level on the left or

54
00:02:50.955 --> 00:02:53.112
one extra level on the right.

55
00:02:53.112 --> 00:02:57.309
So that's really important to know,

56
00:02:57.309 --> 00:03:03.343
which means that our height
will be the log(n) +1,

57
00:03:03.343 --> 00:03:05.975
potentially, right?

58
00:03:05.975 --> 00:03:09.326
And since this is computer science,
we don't deal with constants.

59
00:03:09.326 --> 00:03:10.685
Get the constants out of there, okay?

60
00:03:10.685 --> 00:03:11.707
We don't even think about it.

61
00:03:11.707 --> 00:03:14.438
So it's always a log n search.

62
00:03:14.438 --> 00:03:19.238
That means also we have to potentially
go down the tree on insertion,

63
00:03:19.238 --> 00:03:20.325
which is log n.

64
00:03:20.325 --> 00:03:27.805
But we also have to go back up the tree,
which is log n, which means we have 2logn.

65
00:03:27.805 --> 00:03:30.986
Which means if we're really fun with math,
we can say we have log n squared, but

66
00:03:30.986 --> 00:03:32.899
don't wanna do that, that's just ignorant.

67
00:03:32.899 --> 00:03:35.062
You definitely don't wanna do that,
instead, it's a constant.

68
00:03:35.062 --> 00:03:35.593
You drop it.

69
00:03:35.593 --> 00:03:36.227
We're just looking at it.

70
00:03:36.227 --> 00:03:37.316
We're just still log n.

71
00:03:37.316 --> 00:03:38.498
It's fantastic.

72
00:03:38.498 --> 00:03:39.809
We're so fast.

73
00:03:39.809 --> 00:03:41.354
Deletions follow the same principle.

74
00:03:41.354 --> 00:03:42.614
You gotta find the item.

75
00:03:42.614 --> 00:03:44.437
You gotta do potentially some moving.

76
00:03:44.437 --> 00:03:45.448
You gotta do the deletion.

77
00:03:45.448 --> 00:03:47.238
Then you gotta walk all the way back up.

78
00:03:47.238 --> 00:03:49.385
So again, it would be 2log n.

79
00:03:49.385 --> 00:03:50.051
Delete the 2.

80
00:03:50.051 --> 00:03:51.389
So there we go.

81
00:03:51.389 --> 00:03:53.734
So we now know the running time.

82
00:03:53.734 --> 00:03:55.671
How is everyone feeling?

83
00:03:55.671 --> 00:03:56.579
Feeling good?
Are we feeling good?

84
00:03:56.579 --> 00:03:59.753
Do you have questions?

85
00:03:59.753 --> 00:04:01.594
Come on, what's the questions?

86
00:04:01.594 --> 00:04:04.499
I know there's at least one of them.

87
00:04:04.499 --> 00:04:06.630
&gt;&gt; What are some use cases for this one?

88
00:04:06.630 --> 00:04:07.308
&gt;&gt; AVL tree?

89
00:04:07.308 --> 00:04:11.071
It's that if you're just constructing
a binary search tree on the fly and

90
00:04:11.071 --> 00:04:14.242
you don't want to just have
the linked list problem, right?

91
00:04:14.242 --> 00:04:17.943
Because at some point, if you're
just inserting elements into a tree,

92
00:04:17.943 --> 00:04:19.651
it eventually just falls apart.

93
00:04:19.651 --> 00:04:24.715
Because if you insert it in order,
you create worst ordered tree.

94
00:04:24.715 --> 00:04:28.712
You'd have to accidentally insert it in
median, left, right, left, right, left,

95
00:04:28.712 --> 00:04:29.806
right, left, right.

96
00:04:29.806 --> 00:04:32.610
You'd have to be correct
on your insertion.

97
00:04:32.610 --> 00:04:36.045
And so, we just don't have to
think about that, instead,

98
00:04:36.045 --> 00:04:37.843
you just maintain it this way.

99
00:04:37.843 --> 00:04:43.470
And typically, you're gonna wanna use
an AVL if you are search-heavy, right?

100
00:04:43.470 --> 00:04:48.286
Cuz if you're search-heavy, you're just
getting the best possible time always.

101
00:04:48.286 --> 00:04:52.797
But if you're insertion-heavy,
you may not want to use this one.

102
00:04:52.797 --> 00:04:55.625
You may want to use a red black tree,

103
00:04:55.625 --> 00:05:00.258
which does not organize the tree
nearly as tight as an AVL.

104
00:05:00.258 --> 00:05:05.025
But it will allow still log and
search and insertion and the deletion.

105
00:05:05.025 --> 00:05:06.386
So it's a little bit different.

106
00:05:06.386 --> 00:05:10.218
The rules are much more complicated on
a red black tree than they are on an AVL.

107
00:05:10.218 --> 00:05:13.629
People say red black trees are easier
to implement, that they're nicer.

108
00:05:13.629 --> 00:05:15.102
I have yet to believe that.

109
00:05:15.102 --> 00:05:16.777
I think AVL trees are fantastic.

110
00:05:16.777 --> 00:05:17.526
And I think they're simple.

111
00:05:17.526 --> 00:05:20.934
So, maybe it's a perspective problem here,
all right.

112
00:05:20.934 --> 00:05:24.466
&gt;&gt; If insertions and
deletions are both log n,

113
00:05:24.466 --> 00:05:27.434
what are the issues with an AVL tree?

114
00:05:28.721 --> 00:05:31.531
&gt;&gt; It just requires rotations, right?

115
00:05:31.531 --> 00:05:35.456
So if you already have a balanced tree,
when you insert something, you don't have

116
00:05:35.456 --> 00:05:38.783
to re-walk back up and check for
every single one of these rotations.

117
00:05:38.783 --> 00:05:41.569
So obviously,
rotations are done in constant time, but

118
00:05:41.569 --> 00:05:43.374
you still have to do a bunch of stuff.

119
00:05:43.374 --> 00:05:45.856
So it's constant, but
it still requires work.

120
00:05:45.856 --> 00:05:48.642
And so but you have to do that
constant check, and potentially,

121
00:05:48.642 --> 00:05:51.025
that constant rotation every
single node up the tree.

122
00:05:51.025 --> 00:05:52.970
So it's just slower, right?

123
00:05:52.970 --> 00:05:56.888
AVL is just simply gonna be slower,
but it's more complete.

124
00:05:56.888 --> 00:05:59.839
It's a nicer tree that gets generated.

125
00:05:59.839 --> 00:06:04.799
&gt;&gt; How do you practice this stuff,
getting to know these?

126
00:06:04.799 --> 00:06:09.680
I guess this is more general question,
but do you think of use cases or

127
00:06:09.680 --> 00:06:14.411
do you like to practice it with
whiteboarding specifically, or?

128
00:06:14.411 --> 00:06:16.178
&gt;&gt; I have a whiteboard at home, but

129
00:06:16.178 --> 00:06:20.508
my daughter ruins all my whiteboard by
drawing on them with permanent marker.

130
00:06:20.508 --> 00:06:23.578
And so,
my favorite one is there's the book.

131
00:06:23.578 --> 00:06:25.030
Everybody knows the book.

132
00:06:25.030 --> 00:06:30.315
If you know the algorithms book, it's
like you start to see this little thing.

133
00:06:30.315 --> 00:06:34.365
There's a leaf and a tree, and
then there's four authors right here.

134
00:06:34.365 --> 00:06:39.645
And I think the current iteration is the
3rd version, which is brown background.

135
00:06:39.645 --> 00:06:42.708
I forget the name of it, but
it's the algorithms book.

136
00:06:42.708 --> 00:06:47.175
It's 600 pages long.

137
00:06:47.175 --> 00:06:47.819
It's a thick book.

138
00:06:47.819 --> 00:06:49.055
You could kill somebody with this book.

139
00:06:49.055 --> 00:06:49.945
It is gigantic.

140
00:06:49.945 --> 00:06:51.393
You might even kill yourself on accident.

141
00:06:51.393 --> 00:06:52.712
It's huge.

142
00:06:52.712 --> 00:06:56.551
It's extremely technical.

143
00:06:56.551 --> 00:06:58.728
CRLS book, that's what they call it.

144
00:06:58.728 --> 00:07:01.780
CRLS, I'm sure each one
of these are an author.

145
00:07:01.780 --> 00:07:04.494
But it's an awesome algorithms book.

146
00:07:04.494 --> 00:07:05.670
I used it in college.

147
00:07:05.670 --> 00:07:09.609
I've bought in it twice or three times or
purchased it, bought in it, bought in it,

148
00:07:09.609 --> 00:07:10.170
botanist.

149
00:07:10.170 --> 00:07:14.778
I'm a botanist, but I have purchased it
three times maybe in the course of my

150
00:07:14.778 --> 00:07:17.226
lifetime, and I've lost it yet again.

151
00:07:17.226 --> 00:07:21.532
And so I'm actually you're probably gonna
re-buy this book because it is such

152
00:07:21.532 --> 00:07:22.248
a good book.

153
00:07:22.248 --> 00:07:24.217
And so typically,
I like practicing algorithms.

154
00:07:24.217 --> 00:07:25.131
I like looking at them.

155
00:07:25.131 --> 00:07:27.255
So a few times a year,
I'll go on YouTube and

156
00:07:27.255 --> 00:07:30.594
just watch through them cuz they're
just really fun to think about.

157
00:07:30.594 --> 00:07:32.950
I don't know, I enjoy the process
of knowing how to do that.

158
00:07:32.950 --> 00:07:37.199
And then every now and then at your job,
you'll run into something and you'll go,

159
00:07:37.199 --> 00:07:39.096
aha, union fine path compression.

160
00:07:39.096 --> 00:07:42.441
And you'll just be able to use
an algorithm that people won't know about,

161
00:07:42.441 --> 00:07:44.792
because you have something
in the talk at all times.

162
00:07:44.792 --> 00:07:46.988
And so it's good to just know they exist.

163
00:07:46.988 --> 00:07:50.627
I always made this joke that I will hire
somebody as long as they say the word

164
00:07:50.627 --> 00:07:53.619
priority queue, cuz I just want
you to know that they exist,

165
00:07:53.619 --> 00:07:56.451
because at some point,
you might need a priority queue.

166
00:07:56.451 --> 00:07:59.004
But if you don't have
a concept that they exist,

167
00:07:59.004 --> 00:08:02.504
you can't even know how to solve
a problem in an efficient manner.

168
00:08:02.504 --> 00:08:06.135
And so, it leads to all these weird
oddities if you just don't even have

169
00:08:06.135 --> 00:08:07.356
the thing in your head.

170
00:08:07.356 --> 00:08:10.820
So that's kind of how I always
like to joke about it in my head.

171
00:08:10.820 --> 00:08:13.947
It's not true if you don't
say the word priority queue,

172
00:08:13.947 --> 00:08:17.281
it's not like I'm gonna say no to you,
but you get the idea.

173
00:08:17.281 --> 00:08:20.941
The more complete picture you
have of what is available,

174
00:08:20.941 --> 00:08:24.688
I think it's easier to solve problems,
just in general.

175
00:08:24.688 --> 00:08:28.162
Even if you rarely use them, you know how
to move everything around in your head.

176
00:08:28.162 --> 00:08:31.986
And I think it's just a really good
exercise to be able to see larger problems

177
00:08:31.986 --> 00:08:33.080
at once in your head.

178
00:08:33.080 --> 00:08:34.964
It's kind of practicing the abstraction.

179
00:08:34.964 --> 00:08:37.316
And I think it just makes me a better.

180
00:08:37.316 --> 00:08:41.184
I mostly develop tools, so I deal a lot
with trees and things like that at work.

181
00:08:41.184 --> 00:08:45.464
But because I develop tools, I constantly
have to think about algorithms cuz they

182
00:08:45.464 --> 00:08:47.272
come into play pretty regularly.

183
00:08:47.272 --> 00:08:51.051
But kind of like I have the vision of
the landscape of what's available.

184
00:08:51.051 --> 00:08:54.879
And so as I solve these problems,
it just feels easier to put together

185
00:08:54.879 --> 00:08:58.455
all the things, cuz it's like
putting together an algorithm.

186
00:08:58.455 --> 00:08:59.715
It's the same kinda concept.

187
00:08:59.715 --> 00:09:02.679
Anyways, I don't know, I think it's good.

188
00:09:02.679 --> 00:09:06.415
Anytime you can make a concept go from
something abstract in your head to

189
00:09:06.415 --> 00:09:10.586
practical in an editor, it's just like
you're just plus one in your ability to

190
00:09:10.586 --> 00:09:12.478
solve larger and larger problems.

191
00:09:12.478 --> 00:09:13.626
So, that's my advice.

192
00:09:13.626 --> 00:09:17.138
Solve them, do them,
enjoy them, experience them.

193
00:09:17.138 --> 00:09:20.723
&gt;&gt; Do you use these a lot on if
you're traversing the file system?

194
00:09:20.723 --> 00:09:24.254
&gt;&gt; Yeah, a file system is a forest.

195
00:09:24.254 --> 00:09:28.534
A file system is a tree, but it's also
more than a tree because of symlinks.

196
00:09:28.534 --> 00:09:30.283
Here we go.

197
00:09:30.283 --> 00:09:31.054
We're about to mention it.

198
00:09:31.054 --> 00:09:33.327
Everyone makes fun of me every
time I mention this, Falcor.

199
00:09:33.327 --> 00:09:34.745
If you've heard of Falcor,

200
00:09:34.745 --> 00:09:38.762
it's one of the first data-fetching
libraries out there in JavaScript that's

201
00:09:38.762 --> 00:09:42.500
meant to aggregate all the requests
into something that's like GraphQL.

202
00:09:42.500 --> 00:09:43.432
It was developed.

203
00:09:43.432 --> 00:09:45.421
We actually used to go to Facebook and

204
00:09:45.421 --> 00:09:48.059
talk to Facebook about
GraphQL before GraphQL.

205
00:09:48.059 --> 00:09:49.627
And we'd be like,
how are you solving this?

206
00:09:49.627 --> 00:09:50.810
How are you doing this?

207
00:09:50.810 --> 00:09:53.994
And it is the identical
problem as a file system.

208
00:09:53.994 --> 00:09:56.034
Cuz a file system is just a general tree.

209
00:09:56.034 --> 00:09:59.866
But then at some point, you have
a symlink that is another tree, but

210
00:09:59.866 --> 00:10:03.376
that technically,
you need it to be transparent right here.

211
00:10:03.376 --> 00:10:06.382
So it feels you're just
walking through it, but

212
00:10:06.382 --> 00:10:08.813
it actually is somewhere else as well.

213
00:10:08.813 --> 00:10:10.352
And so this is the same problem as Falcor.

214
00:10:10.352 --> 00:10:11.984
So you can kind of think of filesystem.

215
00:10:11.984 --> 00:10:14.305
In my head,
I like to think of it like a forest,

216
00:10:14.305 --> 00:10:16.879
even though it's better to
think of it like a tree.

217
00:10:16.879 --> 00:10:18.404
It's just like there's a root place.

218
00:10:18.404 --> 00:10:19.187
So, there you go.

219
00:10:19.187 --> 00:10:20.828
That's all you got.

220
00:10:20.828 --> 00:10:23.253
It's fun times file systems.

221
00:10:23.253 --> 00:10:24.118
They're way more complicated than this.

222
00:10:24.118 --> 00:10:28.508
This is just the world's simplest version.

223
00:10:28.508 --> 00:10:31.278
Please, don't take these things for
gospel, cuz someone's gonna be like, well,

224
00:10:31.278 --> 00:10:32.320
actually, did you know about?

225
00:10:32.320 --> 00:10:35.059
That I'm gonna be like, yeah,
okay, cool, great story.

226
00:10:35.059 --> 00:10:36.059
You get the idea.

