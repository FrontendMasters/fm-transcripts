WEBVTT

1
00:00:00.030 --> 00:00:03.119
So this is where things get
a little bit more wild.

2
00:00:03.119 --> 00:00:07.246
This is where we really have to apply
all of our great understanding.

3
00:00:07.246 --> 00:00:10.587
So, all we've been talking
about are binary trees,

4
00:00:10.587 --> 00:00:15.650
where it's always this situation where
there's zero, one, or two children.

5
00:00:15.650 --> 00:00:17.528
But why do we have to keep it that way?

6
00:00:17.528 --> 00:00:20.196
Can't we have more children?

7
00:00:20.196 --> 00:00:21.128
Yeah, probably.

8
00:00:21.128 --> 00:00:26.168
But can we maintain the binary
search mechanism where

9
00:00:26.168 --> 00:00:32.105
we can take advantage of fast search,
but we have more splits?

10
00:00:32.105 --> 00:00:33.694
The answer, of course, is yes.

11
00:00:33.694 --> 00:00:37.298
It's called an m-way tree.

12
00:00:37.298 --> 00:00:38.670
Very excite.

13
00:00:38.670 --> 00:00:41.414
These things are pretty wild.

14
00:00:41.414 --> 00:00:45.670
Everyone says they're used in database
indexing, and fast searching, and

15
00:00:45.670 --> 00:00:46.985
you can make B-trees.

16
00:00:46.985 --> 00:00:48.376
We're gonna get to B-tree, but

17
00:00:48.376 --> 00:00:50.572
you can make B-tree lookups and
all that fun stuff.

18
00:00:50.572 --> 00:00:55.735
But how an m-way search tree works is
it follows this exact same principle,

19
00:00:55.735 --> 00:00:58.813
except for
z may look a little bit different.

20
00:00:58.813 --> 00:01:05.479
So you could imagine you have
a list of keys at any node.

21
00:01:05.479 --> 00:01:10.350
And so I could have, say I have 10, 20,

22
00:01:10.350 --> 00:01:13.789
30, so this is my root node.

23
00:01:13.789 --> 00:01:19.135
Now, that means every child off
of 10 is going to be less than,

24
00:01:19.135 --> 00:01:24.391
whoopsie, that's the wrong way,
is gonna be less than 10.

25
00:01:24.391 --> 00:01:29.719
All right, that means every child off
of here is going to be greater than 10,

26
00:01:29.719 --> 00:01:31.112
but less than 20.

27
00:01:31.112 --> 00:01:35.983
That means every child right here,
same thing, is gonna be great,

28
00:01:35.983 --> 00:01:40.625
my goodness, it's gonna be
greater than 20 and less than 30.

29
00:01:40.625 --> 00:01:43.159
And the exact same thing right here,

30
00:01:43.159 --> 00:01:48.013
which is everything right here
is going to be greater than 30.

31
00:01:48.013 --> 00:01:50.534
That was a terrible circle.

32
00:01:50.534 --> 00:01:51.932
All right, look at that.

33
00:01:51.932 --> 00:01:57.488
So that is the core concept
behind an m-way search tree.

34
00:01:57.488 --> 00:02:01.801
One thing that's really nice about an
m-way search tree, obviously, you can get

35
00:02:01.801 --> 00:02:05.940
a whole more amount of items inside of
your tree without a huge amount of height.

36
00:02:05.940 --> 00:02:07.271
I think this inherently makes sense,
right?

37
00:02:07.271 --> 00:02:11.629
Does anyone have any questions,
by the way, on this exact item,

38
00:02:11.629 --> 00:02:13.460
this m-way kind of setup?

39
00:02:13.460 --> 00:02:18.578
&gt;&gt; Does this mean that
every node would have

40
00:02:18.578 --> 00:02:24.157
1 plus the length of
the array of children?

41
00:02:24.157 --> 00:02:28.989
&gt;&gt; [SOUND] Precisely, so that's gonna be
one of our definitions about to happen.

42
00:02:28.989 --> 00:02:34.049
For every item you always have,
if you have x items in

43
00:02:34.049 --> 00:02:38.880
your m-way tree, you'll have x+1 children.

44
00:02:38.880 --> 00:02:40.967
I think that inherently makes sense,

45
00:02:40.967 --> 00:02:44.300
because you have to be able to
have sides here and sides here.

46
00:02:44.300 --> 00:02:47.491
Now, in a standard m-way tree,
that's not necessarily true.

47
00:02:47.491 --> 00:02:51.837
Meaning that you don't have to have, this
node just doesn't have to exist, right?

48
00:02:51.837 --> 00:02:55.716
A standard m-way tree has no
bounds as to what you're doing.

49
00:02:55.716 --> 00:02:59.071
Just like a binary tree,
you don't have to have both children.

50
00:02:59.071 --> 00:03:02.317
You just have to have an adherence
to zero, one, or two.

51
00:03:02.317 --> 00:03:06.815
An m-way is you have to have
an adherence to zero, one, two, three,

52
00:03:06.815 --> 00:03:08.587
up to, depending on the m.

53
00:03:08.587 --> 00:03:12.252
I forget if the m specifies the keys or
the amount of children.

54
00:03:12.252 --> 00:03:16.191
I wanna say m specifies the amount of
children, so up to m children, and

55
00:03:16.191 --> 00:03:18.111
then you'll have m minus 1 keys.

56
00:03:18.111 --> 00:03:19.221
I could be wrong on that one.

57
00:03:19.221 --> 00:03:22.801
Now that we got that concept down, we're
gonna move on to the more exciting part.

58
00:03:22.801 --> 00:03:27.150
So an m-way tree has no rules about
how you set it up or anything.

59
00:03:27.150 --> 00:03:34.077
So I'm going to use an m-way tree and
we are going to insert a few values.

60
00:03:34.077 --> 00:03:41.626
All right, so we'll just do 10,
20, 30, 40, 50, 69, 70.

61
00:03:41.626 --> 00:03:47.141
Okay, so let's just pretend
we have a three-way tree.

62
00:03:47.141 --> 00:03:49.595
And so
we'll start off by inserting these keys.

63
00:03:49.595 --> 00:03:51.451
So I'm gonna insert a 10 in here.

64
00:03:51.451 --> 00:03:52.650
All right, awesome.

65
00:03:52.650 --> 00:03:54.261
Now we're gonna insert a 20.

66
00:03:54.261 --> 00:03:58.013
Well, 20 is larger than 10,
should I make it its child?

67
00:03:58.013 --> 00:03:59.868
Why not, all right?

68
00:03:59.868 --> 00:04:00.750
Let's do the 30.

69
00:04:00.750 --> 00:04:02.041
Well, 30 is larger than 10.

70
00:04:02.041 --> 00:04:04.226
It's larger than 20.

71
00:04:04.226 --> 00:04:06.228
You wanna guess the problem
we're currently having?

72
00:04:06.228 --> 00:04:07.668
&gt;&gt; We're turning it into a linked list.

73
00:04:07.668 --> 00:04:10.548
&gt;&gt; We're turning it into a linked list,
and you're like, whoa, whoa, whoa, whoa,

74
00:04:10.548 --> 00:04:11.677
whoa, that's not how you do it.

75
00:04:11.677 --> 00:04:13.954
Why don't you put all the things
in the same right here?

76
00:04:13.954 --> 00:04:17.052
Okay, okay, okay, okay, okay, calm down.

77
00:04:17.052 --> 00:04:18.014
We'll go 10.

78
00:04:18.014 --> 00:04:19.647
We'll put in 20.

79
00:04:19.647 --> 00:04:21.183
We'll put in 30.

80
00:04:21.183 --> 00:04:21.774
We got it.

81
00:04:21.774 --> 00:04:23.349
We're full, so now we put in 40.

82
00:04:23.349 --> 00:04:25.559
Well, 40 better hang off here.

83
00:04:25.559 --> 00:04:27.102
All right, so now we got 40.

84
00:04:27.102 --> 00:04:28.308
We got 50.

85
00:04:28.308 --> 00:04:29.576
We got 69.

86
00:04:29.576 --> 00:04:30.679
Now we put in 70.

87
00:04:30.679 --> 00:04:31.247
Guess what?

88
00:04:31.247 --> 00:04:34.618
We pretty much have the exact
same problem again, right?

89
00:04:34.618 --> 00:04:38.068
So no matter how you just have
simple rules to an m-way tree,

90
00:04:38.068 --> 00:04:42.618
you're gonna run into the exact same
problem that you did with the binary tree.

91
00:04:42.618 --> 00:04:48.046
So therefore, what do you think
we need for an m-way tree?

92
00:04:48.046 --> 00:04:50.120
A tree balancing algorithm.

93
00:04:50.120 --> 00:04:50.885
Let's go.

94
00:04:50.885 --> 00:04:52.421
Tree balancing algorithm, called it.

95
00:04:52.421 --> 00:04:53.566
Man, so exciting.

