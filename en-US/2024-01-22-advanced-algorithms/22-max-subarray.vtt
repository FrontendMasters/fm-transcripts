WEBVTT

1
00:00:00.780 --> 00:00:02.740
Now, right now,
this is not really great problems.

2
00:00:02.740 --> 00:00:05.630
I feel whenever I see these,
it doesn't hit home.

3
00:00:05.630 --> 00:00:07.179
So we wanna take it up one more level.

4
00:00:07.179 --> 00:00:09.775
We're gonna do the maximum subarray.

5
00:00:09.775 --> 00:00:13.717
So this is like a classic
interview debacle,

6
00:00:13.717 --> 00:00:19.124
where you are asked to find
the maximum array within an array.

7
00:00:19.124 --> 00:00:21.709
So an array can look something like this.

8
00:00:21.709 --> 00:00:28.899
3, -4, 1, 2, -1, 5, -7.

9
00:00:28.899 --> 00:00:32.773
The maximum subarray is very obvious,
1, 2, -1, 5.

10
00:00:32.773 --> 00:00:37.166
Add all those numbers together,
that is your largest contiguous subarray.

11
00:00:37.166 --> 00:00:42.364
Now a naive solution would
to do something like this,

12
00:00:42.364 --> 00:00:50.307
sum, sum, sum, sum, sum, sum,
sum, sum, step forward once, sum.

13
00:00:50.307 --> 00:00:51.950
Now we're on the -4.

14
00:00:51.950 --> 00:00:54.647
Then we go all the way again.

15
00:00:54.647 --> 00:00:57.037
Right, we're gonna do
that every single time,

16
00:00:57.037 --> 00:00:59.148
just trying to find the maximum subarray.

17
00:00:59.148 --> 00:01:03.348
Computing the same value though many, many
times throughout this over and over and

18
00:01:03.348 --> 00:01:04.321
over again.

19
00:01:04.321 --> 00:01:09.841
We are gonna do an n squared walk here and
we're gonna do that n times.

20
00:01:09.841 --> 00:01:11.022
So it's an n cubed algorithm,

21
00:01:11.022 --> 00:01:13.621
which is just like that's just
not what you want in your life.

22
00:01:13.621 --> 00:01:16.841
This is almost always
a bad plan to do n cubed.

23
00:01:17.861 --> 00:01:19.759
Unless if you're multiplying matrices.

24
00:01:19.759 --> 00:01:23.234
Then you need a degree in physics, and
then you can somehow get it to be less and

25
00:01:23.234 --> 00:01:26.496
there's like crazy optimizations and
somehow everything works out and

26
00:01:26.496 --> 00:01:27.319
it's fast.

27
00:01:27.319 --> 00:01:29.659
All right, so how do we do this?

28
00:01:30.679 --> 00:01:32.449
Well, let's think about
it in a different way.

29
00:01:33.829 --> 00:01:36.719
At this point,
we know the maximum value, right?

30
00:01:36.719 --> 00:01:38.769
So we start out at 1.

31
00:01:38.769 --> 00:01:40.571
One the maximum value no matter what.

32
00:01:40.571 --> 00:01:43.792
If you have an array of one, the maximum
value is just that first element.

33
00:01:43.792 --> 00:01:46.752
So right now we have a max value of 3.

34
00:01:46.752 --> 00:01:53.902
We also have a current sum of 3, right?

35
00:01:53.902 --> 00:01:57.827
All right, let's walk forward once.

36
00:01:57.827 --> 00:02:00.803
Is our current sum negative?

37
00:02:00.803 --> 00:02:04.894
No, therefore,
let's add this number to it.

38
00:02:05.984 --> 00:02:08.493
So current sum becomes -1.

39
00:02:08.493 --> 00:02:10.594
Is -1 bigger than our maximum value.

40
00:02:12.084 --> 00:02:14.884
No, therefore,
our maximum value remains as 3.

41
00:02:14.884 --> 00:02:15.924
We go here.

42
00:02:17.024 --> 00:02:18.991
Is our current sum negative?

43
00:02:18.991 --> 00:02:19.674
Yes it is.

44
00:02:19.674 --> 00:02:25.618
We found a spot where the maximum value
goes below 0, therefore it just can't be.

45
00:02:25.618 --> 00:02:28.728
We're in a bad spot,
we just ignore it, right?

46
00:02:28.728 --> 00:02:32.588
And so therefore we're gonna reset
current sum to the current node.

47
00:02:33.728 --> 00:02:34.460
It's not 1.

48
00:02:34.460 --> 00:02:37.170
Is one less than the maximum value?

49
00:02:39.045 --> 00:02:41.615
Or sorry,
is 1 greater than the maximum value?

50
00:02:41.615 --> 00:02:43.433
No!
Leave it alone.

51
00:02:43.433 --> 00:02:44.603
All right, go to 2.

52
00:02:45.973 --> 00:02:49.163
Is current value or
current sum less than 0?

53
00:02:49.163 --> 00:02:49.773
Is it negative?

54
00:02:51.123 --> 00:02:53.693
No, therefore,
add that number to our current sum.

55
00:02:55.613 --> 00:02:57.903
All right,
is this larger than our maximum value?

56
00:02:59.063 --> 00:03:01.009
No, therefore, we move forward.

57
00:03:01.009 --> 00:03:03.454
Is our current sound less than 0?

58
00:03:03.454 --> 00:03:08.969
No, it's not add that to it.1 is
it greater than our maximum value?

59
00:03:08.969 --> 00:03:10.759
No, therefore move forward.

60
00:03:12.489 --> 00:03:13.545
Is this less than 0?

61
00:03:13.545 --> 00:03:15.679
No, it's not therefore add it.

62
00:03:15.679 --> 00:03:16.299
We are at 6.

63
00:03:16.299 --> 00:03:19.022
Is this greater than or
less than our current maximum value?

64
00:03:19.022 --> 00:03:19.918
It's greater than.

65
00:03:19.918 --> 00:03:21.846
Update your maximum value.

66
00:03:21.846 --> 00:03:23.266
Now we go forward.

67
00:03:23.266 --> 00:03:24.566
That's right here.

68
00:03:24.566 --> 00:03:25.996
Is this thing less than 0?

69
00:03:25.996 --> 00:03:26.956
No, it's not.

70
00:03:26.956 --> 00:03:29.326
Now it's a -1 cuz we added it to it.

71
00:03:29.326 --> 00:03:31.345
Is this greater than or
less than our maximum value?

72
00:03:31.345 --> 00:03:35.170
No, it's not our maximum
sub array is a value of 6.

73
00:03:35.170 --> 00:03:39.902
If we just do it with our eyes,
that's 1 + 2 + -1 + 5 or

74
00:03:39.902 --> 00:03:44.565
simply 4, that is a 3,
3+4, that's 7, we got it.

75
00:03:44.565 --> 00:03:46.978
All right, fantastic, wait.

76
00:03:46.978 --> 00:03:49.758
&gt;&gt; [LAUGH] You-
&gt;&gt; Did I do terrible?

77
00:03:49.758 --> 00:03:50.842
I did do terrible math.

78
00:03:50.842 --> 00:03:53.161
I went 1 to 2, didn't die,
and then I went back to 1.

79
00:03:53.161 --> 00:03:54.415
Okay, it should be a 3.

80
00:03:54.415 --> 00:03:56.540
Okay, no one's, and
I said quick math today.

81
00:03:56.540 --> 00:03:58.555
Okay, my quick math's
not that great today.

82
00:03:58.555 --> 00:04:00.068
Okay, quick math.

83
00:04:00.068 --> 00:04:01.798
You get the idea though.

84
00:04:01.798 --> 00:04:07.478
That is how we are using previous
values to compute forward values.

85
00:04:07.478 --> 00:04:10.498
We're taking it and
we're walking across this and doing it.

86
00:04:10.498 --> 00:04:12.230
Now if this doesn't make it clear,

87
00:04:12.230 --> 00:04:16.233
we have one more problem that should make
it really clear how to think about these.

88
00:04:16.233 --> 00:04:17.925
Now, how you think about these and

89
00:04:17.925 --> 00:04:21.143
how you come up with dynamic
solutions is incredibly difficult.

90
00:04:21.143 --> 00:04:23.844
Anyone that's just like,
dynamic programming is easy.

91
00:04:23.844 --> 00:04:26.871
I'm like, no, it's not, and
you're being jerk because it's not easy.

92
00:04:26.871 --> 00:04:27.946
It's crazy.

93
00:04:27.946 --> 00:04:32.158
It's like I only know how to solve dynamic
problems because I know how to solve those

94
00:04:32.158 --> 00:04:33.189
problems already.

95
00:04:33.189 --> 00:04:37.403
It's very hard to see a new one and
just be able to do it really quickly.

