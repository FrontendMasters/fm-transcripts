WEBVTT

1
00:00:00.313 --> 00:00:03.927
Let's try a different path because
obviously I chose one path that totally

2
00:00:03.927 --> 00:00:04.564
worked out.

3
00:00:04.564 --> 00:00:06.109
But what happens if we
do a different path?

4
00:00:06.109 --> 00:00:10.392
What happens if things don't work out as
nicely as we just had them work out here?

5
00:00:10.392 --> 00:00:14.043
Let me just erase all these little things.

6
00:00:14.043 --> 00:00:18.276
Cuz there's another path through this
graph that kinda screws things up.

7
00:00:18.276 --> 00:00:23.807
So 0, 0, 0, 0, 0, 0, 0, 0.

8
00:00:23.807 --> 00:00:30.939
Lets' start at the bottom and
I'm gonna choose five, five, five, eight.

9
00:00:30.939 --> 00:00:34.057
So I'm gonna go down, down,
through the middle to eight.

10
00:00:34.057 --> 00:00:38.188
So that means we will be able to have
a maximum flow of five cuz that is our

11
00:00:38.188 --> 00:00:39.178
smallest pipe.

12
00:00:42.008 --> 00:00:43.467
But I want you to make an observation.

13
00:00:43.467 --> 00:00:45.151
What is the problem with this flow?

14
00:00:47.190 --> 00:00:50.380
&gt;&gt; Cuts off the bottom, yeah.

15
00:00:50.380 --> 00:00:52.698
&gt;&gt; Cuts off the bottom node, exactly.

16
00:00:52.698 --> 00:00:57.838
So a part of the Ford-Fulkerson algorithm
is they call this the augmenting path,

17
00:00:57.838 --> 00:00:59.856
the path that changes the flow.

18
00:00:59.856 --> 00:01:05.306
And so what it allows for
is after you make a flow to a node,

19
00:01:05.306 --> 00:01:08.496
you actually create a back link.

20
00:01:08.496 --> 00:01:12.308
This back link has a negative five flow.

21
00:01:12.308 --> 00:01:15.797
This back link has a negative five flow.

22
00:01:15.797 --> 00:01:19.631
This back link has
a negative five flow and

23
00:01:19.631 --> 00:01:23.368
this back link has a negative five flow.

24
00:01:23.368 --> 00:01:28.410
The rest all have zeros, negative zeros,
if you're IEEE floating point standard.

25
00:01:28.410 --> 00:01:30.219
We're not floating point standards here,
okay?

26
00:01:30.219 --> 00:01:32.553
So now, if I wish to try to do something,

27
00:01:32.553 --> 00:01:35.185
I can't go along this
bottom route anymore.

28
00:01:35.185 --> 00:01:37.130
I can no longer take advantage of this.

29
00:01:37.130 --> 00:01:41.876
But if I choose to go seven,
ten, negative five,

30
00:01:41.876 --> 00:01:46.848
ten I'm able to put five
units of flow this direction

31
00:01:46.848 --> 00:01:51.261
back through cuz we have
a negative five flow.

32
00:01:51.261 --> 00:01:55.450
So I can bring this one back down
to zero as much as possible.

33
00:01:55.450 --> 00:01:58.210
If you think about this will
make more sense, we'll just see.

34
00:01:58.210 --> 00:02:01.448
So if I put five units
of flow this direction,

35
00:02:01.448 --> 00:02:05.637
it will turn this into a zero and
turn this back into a zero.

36
00:02:05.637 --> 00:02:09.554
And now, I'm able to put five units
of flow through here at the very end.

37
00:02:09.554 --> 00:02:10.906
If you've noticed,

38
00:02:10.906 --> 00:02:15.574
we've re effectively created the exact
same problem that we had before.

39
00:02:15.574 --> 00:02:19.085
Now we've chosen and
now we've kind of healed or

40
00:02:19.085 --> 00:02:22.258
augmented our path to
be back to what it was.

41
00:02:22.258 --> 00:02:27.149
So now, you can see I just went reverse
through, cleared everything out, and

42
00:02:27.149 --> 00:02:29.817
now I can do this path or
I can do this path and

43
00:02:29.817 --> 00:02:33.175
create again the maximum
amount of flow that we need.

44
00:02:33.175 --> 00:02:34.223
So, I can just go like this.

45
00:02:34.223 --> 00:02:37.205
We can do two or
three along this line, right?

46
00:02:37.205 --> 00:02:43.602
So I can just go 3, 3, 8.

47
00:02:43.602 --> 00:02:47.422
And now, again, our maximum flow is 13.

48
00:02:47.422 --> 00:02:50.302
And so,
the goal here is just to find a path, and

49
00:02:50.302 --> 00:02:52.617
you may have to use negative weights.

50
00:02:52.617 --> 00:02:56.969
The negative weights will be going back
through and reversing a flow which allows

51
00:02:56.969 --> 00:02:59.979
you to effectively open up
this path down at the bottom.

52
00:02:59.979 --> 00:03:04.642
So if you goof something up,
the negative flow will help you.

53
00:03:04.642 --> 00:03:06.114
All right, awesome.

54
00:03:06.114 --> 00:03:07.070
Everyone feeling good?

55
00:03:07.070 --> 00:03:12.471
Yeah, because we just put five
flow units through this way.

56
00:03:12.471 --> 00:03:14.236
I can do that, I can just do that, okay?

57
00:03:14.236 --> 00:03:19.004
All right, so what do I mean
by car problem British people?

58
00:03:19.004 --> 00:03:19.913
It's very funny.

59
00:03:19.913 --> 00:03:22.079
I listened to this person
a long time ago and

60
00:03:22.079 --> 00:03:25.036
he did this explanation of how
do you find the minimum cut?

61
00:03:25.036 --> 00:03:28.115
And he's just like when he was talking,

62
00:03:28.115 --> 00:03:32.743
he was talking about a car driving
through the maze this way.

63
00:03:32.743 --> 00:03:36.564
And when driving through the maze he
called this the passenger side and

64
00:03:36.564 --> 00:03:37.803
this the driver side.

65
00:03:37.803 --> 00:03:41.088
So I knew right away,
something's off here, okay?

66
00:03:41.088 --> 00:03:43.083
That's not how things work.

67
00:03:43.083 --> 00:03:48.071
And so, if you have a flow that hits
the passenger side of your very

68
00:03:48.071 --> 00:03:52.079
not American car,
you add that to your minimum cut.

69
00:03:52.079 --> 00:03:55.226
If it hits this side,
you don't add it to your minimum cut.

70
00:03:55.226 --> 00:03:59.791
And this does make sense cuz look at this,
how much flow is going through this?

71
00:03:59.791 --> 00:04:01.848
None, we don't even use this link.

72
00:04:01.848 --> 00:04:03.228
This is an unused link,

73
00:04:03.228 --> 00:04:07.103
so when we make a minimum cut,
it does not count towards our total.

74
00:04:07.103 --> 00:04:11.891
And so, if you imagine we drive our car,
our car gets hit on the passenger side,

75
00:04:11.891 --> 00:04:16.626
our car gets hit on the driver's side,
our car gets hit on the passenger side.

76
00:04:16.626 --> 00:04:20.598
So we will do 5 plus 0 plus 8 or 13,

77
00:04:20.598 --> 00:04:26.828
the minimum cut across this
graph to separate out the sync.

78
00:04:26.828 --> 00:04:29.857
Wait, the sync from the source,
there you go.

79
00:04:29.857 --> 00:04:32.770
Kinda fun little way to remember it,
that's how I always remembered it.

80
00:04:32.770 --> 00:04:35.391
I don't know why I just think this
is a great way to remember it.

81
00:04:35.391 --> 00:04:37.194
So in my head, I'm always like car,
British people.

82
00:04:37.194 --> 00:04:40.242
And then I just drive my car
through there and it just works.

83
00:04:40.242 --> 00:04:42.488
And you can kinda think of this,
if this was like,

84
00:04:42.488 --> 00:04:46.126
if you had a hose completely on and water
was flowing through here, what would end

85
00:04:46.126 --> 00:04:49.469
up happening is all of your water would
go here and none of it would go here.

86
00:04:49.469 --> 00:04:54.005
So if you cut it, nothing would come out,
theoretically, nothing would come out.

87
00:04:54.005 --> 00:04:55.909
Would that actually happen
in a practical world?

88
00:04:55.909 --> 00:04:59.578
Probably not because things aren't
as clean in the real world as they

89
00:04:59.578 --> 00:05:02.437
are in the fake world, so
you'd probably get stuff.

90
00:05:02.437 --> 00:05:05.774
But in the theoretical world, no flow
would happen here because the sync's

91
00:05:05.774 --> 00:05:08.291
taking all the flow that it
can through this bottom part.

92
00:05:08.291 --> 00:05:11.516
All right, there you go,

93
00:05:11.516 --> 00:05:16.066
that is maximum flow, minimum cut.

94
00:05:16.066 --> 00:05:21.095
&gt;&gt; Would this work when scaling
up to multiple sources and syncs?

95
00:05:21.095 --> 00:05:25.207
&gt;&gt; I'm sure there is a multiple source,
multiple sync problem.

96
00:05:25.207 --> 00:05:27.239
I haven't looked at it so
I don't know that one.

97
00:05:27.239 --> 00:05:31.690
Anytime you get into multiple like
Dijkstra's multi stuff you get into NP

98
00:05:31.690 --> 00:05:35.947
hard super difficult problems that
aren't very easy to solve at all.

99
00:05:35.947 --> 00:05:39.791
Every graph problem is just teetering
on the edge of becoming a really hard

100
00:05:39.791 --> 00:05:40.356
problem.

101
00:05:40.356 --> 00:05:42.857
And so the moment you add one
more condition, it just blows up.

102
00:05:42.857 --> 00:05:46.301
I don't know that one, I'm sure there is
some algorithm that has explored this.

103
00:05:46.301 --> 00:05:49.556
I've just never tried it,
so I do not know.

104
00:05:49.556 --> 00:05:51.676
All right, so
there is one more thing to say about this.

105
00:05:51.676 --> 00:05:55.018
What is the runtime of this algorithm?

106
00:05:55.018 --> 00:05:56.445
Kinda crazy, right?

107
00:06:01.192 --> 00:06:02.491
Anyone wanna make a guess?

108
00:06:02.491 --> 00:06:06.093
No one can Google though,
no Googlies, okay?

109
00:06:06.093 --> 00:06:08.035
&gt;&gt; I can guess linear?

110
00:06:08.035 --> 00:06:09.539
&gt;&gt; Linear, no.

111
00:06:09.539 --> 00:06:11.971
Yes, but no, V squared?

112
00:06:11.971 --> 00:06:13.483
Wrong, you're dead.

113
00:06:13.483 --> 00:06:16.908
All right, so I'm gonna make a graph
that hopefully it makes sense.

114
00:06:16.908 --> 00:06:18.531
Okay, you can just see it right away.

115
00:06:18.531 --> 00:06:24.933
So we have a source, we have a sync, and
in between, we have these two nodes.

116
00:06:28.538 --> 00:06:31.008
And then this one across here.

117
00:06:31.008 --> 00:06:38.654
This has a maximum flow of 1, this has
a maximum flow of 100, 100, 100, 100.

118
00:06:38.654 --> 00:06:41.933
So that means, remember,
we're doing a depth for search,

119
00:06:41.933 --> 00:06:43.877
do you have any guarantee on order?

120
00:06:43.877 --> 00:06:45.436
You don't know the graph ahead of time.

121
00:06:45.436 --> 00:06:51.904
So you could imagine you go and
you choose a flow of 1.

122
00:06:51.904 --> 00:06:57.408
When that flow of 1 happens,
you get one out of 100,

123
00:06:57.408 --> 00:07:02.091
you get 0 out of 1,
you get a back link of -1,

124
00:07:02.091 --> 00:07:05.037
then you get 1 out of 100.

125
00:07:05.037 --> 00:07:08.817
The next time you search, you do this,
you backflow the other direction,

126
00:07:08.817 --> 00:07:11.399
you backflow the other direction,
you back flow.

127
00:07:11.399 --> 00:07:14.775
You just keep on going back and forth and
you're doing one flow at a time.

128
00:07:14.775 --> 00:07:19.733
Eventually, you would eventually at
the very end hit a maximum flow of 200,

129
00:07:19.733 --> 00:07:23.137
but it would take you 200
times through the graph and

130
00:07:23.137 --> 00:07:26.171
you could potentially
touch every single edge.

131
00:07:26.171 --> 00:07:31.301
So the runtime is the maximum
flow times the number of edges.

132
00:07:31.301 --> 00:07:33.537
It is the strangest of them all, okay?

133
00:07:33.537 --> 00:07:36.786
The strange runtime,
people don't often see this one.

134
00:07:36.786 --> 00:07:39.780
If you could whip out a maximum
flow runtime in the interview,

135
00:07:39.780 --> 00:07:42.611
I think the person would just,
so what is happening here?

136
00:07:42.611 --> 00:07:43.995
It's just like using square root of n.

137
00:07:43.995 --> 00:07:47.487
If you can hit them with the square
root of n runtime, blows their mind.

138
00:07:47.487 --> 00:07:54.964
But that is the worst possible case
of the maximum flow algorithm.

139
00:07:54.964 --> 00:07:57.153
So there you go, it's maxflow times edge.

