WEBVTT

1
00:00:00.000 --> 00:00:01.301
So the next thing is a red black tree.

2
00:00:01.301 --> 00:00:06.741
I'm not gonna cover this one in detail,
just because there's 75 rules to it,

3
00:00:06.741 --> 00:00:10.513
and I would rather move on
to more exciting algorithms.

4
00:00:10.513 --> 00:00:12.630
And so,
we already know a tree balance algorithm.

5
00:00:12.630 --> 00:00:15.215
So just to kind of give you
the basics of a red black tree,

6
00:00:15.215 --> 00:00:16.830
there's a few rules to it.

7
00:00:16.830 --> 00:00:20.448
One, the root and nil nodes,
nil is important,

8
00:00:20.448 --> 00:00:24.331
they actually count the empty
spot as a node itself,

9
00:00:24.331 --> 00:00:29.429
so you kind of always have to keep
that in your mind, are black.

10
00:00:29.429 --> 00:00:32.579
They're always black,
that's just the way it goes.

11
00:00:32.579 --> 00:00:40.346
Number 2,
all nodes are either red or black.

12
00:00:40.346 --> 00:00:42.048
Okay, makes sense, right,
red black tree, but

13
00:00:42.048 --> 00:00:43.976
kind of silly if you could
have something else.

14
00:00:43.976 --> 00:00:51.846
Number 3,
you cannot have a red parent + red child.

15
00:00:53.856 --> 00:00:57.306
You can't have that situation,
but you can have black black.

16
00:00:57.306 --> 00:01:00.548
You just cannot have red red,
that's pretty much,

17
00:01:00.548 --> 00:01:05.467
I don't think there's any other rules,
I always have to think about that.

18
00:01:05.467 --> 00:01:09.080
But that's about it, and obviously, number
4, they maintain the binary search tree.

19
00:01:09.080 --> 00:01:12.529
Right, they're still a binary search tree,
they still work that way, so

20
00:01:12.529 --> 00:01:13.531
we stay right there.

21
00:01:13.531 --> 00:01:19.116
So, if you think about it,
if we have a root, it will be black.

22
00:01:19.116 --> 00:01:22.478
And, yeah,
I don't know how did I forget that.

23
00:01:22.478 --> 00:01:27.692
All paths have same number

24
00:01:27.692 --> 00:01:31.721
of black children.

25
00:01:35.765 --> 00:01:37.681
So, that should be pretty easy.

26
00:01:37.681 --> 00:01:42.156
So, this one always, when I was thinking
about it and implementing it, in my head,

27
00:01:42.156 --> 00:01:45.322
this seems like an incredibly
difficult problem, right?

28
00:01:45.322 --> 00:01:47.950
Cuz how do you know all paths have this?

29
00:01:47.950 --> 00:01:50.100
That feels really difficult.

30
00:01:50.100 --> 00:01:53.124
But when you go through and actually do
it, you calculate the black height at

31
00:01:53.124 --> 00:01:56.256
every level, it gets a little bit easier
and the rotations aren't that hard.

32
00:01:56.256 --> 00:01:58.267
And there's a whole bunch of coloring,
dances you do, and

33
00:01:58.267 --> 00:01:59.243
a bunch of different stuff.

34
00:01:59.243 --> 00:02:01.756
But, just to kind of give you
the general idea, and so,

35
00:02:01.756 --> 00:02:04.448
we can just talk about the runtime,
is roots always black?

36
00:02:04.448 --> 00:02:09.857
And then, you can have red children, or
I can have a black child right here.

37
00:02:09.857 --> 00:02:12.118
And then remember, nil nodes are black.

38
00:02:12.118 --> 00:02:15.558
Don't forget that,
that's a very important kind of sidestep.

39
00:02:15.558 --> 00:02:18.333
On this side,
you could imagine I have red,

40
00:02:18.333 --> 00:02:23.450
which means I can have two black nodes,
I cannot have red nodes at this point.

41
00:02:23.450 --> 00:02:27.950
They cannot have parent-child
red noding relation,

42
00:02:27.950 --> 00:02:33.812
which means that I can also have more red,
and then, I can have the empty

43
00:02:33.812 --> 00:02:39.050
nodes right here, which also
means right here and right here.

44
00:02:39.050 --> 00:02:40.508
So I want you to think about this.

45
00:02:40.508 --> 00:02:41.858
Is this a red black tree?

46
00:02:43.268 --> 00:02:45.966
Does it follow all of our five rules?

47
00:02:51.148 --> 00:02:52.352
&gt;&gt; I know.

48
00:02:52.352 --> 00:02:54.544
&gt;&gt; What doesn't follow?

49
00:02:54.544 --> 00:02:58.408
&gt;&gt; The left side has one less
black no than the right side.

50
00:02:58.408 --> 00:03:04.179
&gt;&gt; Let's find out 1, 2, 1, 2 or

51
00:03:04.179 --> 00:03:09.362
2, I know it's kind of wild.

52
00:03:09.362 --> 00:03:14.466
In other words, what that means is that,
you can get into a situation

53
00:03:14.466 --> 00:03:20.015
where the worst case scenario is one
side is twice as high as the other side.

54
00:03:20.015 --> 00:03:24.838
Cuz you have all black on one side and
you have red black, red black, red black.

55
00:03:24.838 --> 00:03:27.135
And so,
you can have twice the height on one side,

56
00:03:27.135 --> 00:03:28.742
half the height on the other side.

57
00:03:28.742 --> 00:03:32.036
Now, the rotations work in such a way
that every single time you insert,

58
00:03:32.036 --> 00:03:33.666
you always insert it as a red child.

59
00:03:33.666 --> 00:03:35.661
If you have red red,
you have to do a coloring, or

60
00:03:35.661 --> 00:03:38.703
you have to do a flipping depending on
the uncle and the color of the uncle.

61
00:03:38.703 --> 00:03:42.278
Kind of confusing that's why you can
actually run into this specific situation

62
00:03:42.278 --> 00:03:44.320
is that is how you'd run into it,
all right?

63
00:03:44.320 --> 00:03:47.839
So, there you go, that is all I'm gonna
really say about red black trees.

64
00:03:47.839 --> 00:03:51.590
Because again, it would just take
a long time to get all the way through,

65
00:03:51.590 --> 00:03:52.463
very exciting.

66
00:03:52.463 --> 00:03:58.714
But that means that searching is still log
n, because remember, it could be 2h, or

67
00:03:58.714 --> 00:04:03.926
in other words, 2log n,
cuz it's going to be relatively balanced.

68
00:04:03.926 --> 00:04:07.966
They're never gonna get into a situation
where it's not much further apart.

69
00:04:07.966 --> 00:04:12.810
And if you double one side versus
the other, you still are at h, right?

70
00:04:12.810 --> 00:04:14.676
Because we'd always drop the constant.

71
00:04:14.676 --> 00:04:19.256
So we're still at h, we're still
sitting at the log n area, very nice.

72
00:04:19.256 --> 00:04:22.731
Insertions, deletions,
all the same things, all right?

