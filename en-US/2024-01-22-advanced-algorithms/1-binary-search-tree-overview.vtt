WEBVTT

1
00:00:00.160 --> 00:00:02.380
The first thing I wanted to
talk about are binary trees,

2
00:00:02.380 --> 00:00:03.951
everyone familiar with binary trees.

3
00:00:03.951 --> 00:00:07.702
If you're not familiar with binary trees,
either you have zero children,

4
00:00:07.702 --> 00:00:09.860
one child, or two child, that is it.

5
00:00:09.860 --> 00:00:12.670
So a binary tree simply just
looks like this for everybody.

6
00:00:12.670 --> 00:00:18.966
If you're not familiar with it, this
right here is called a full binary tree.

7
00:00:18.966 --> 00:00:23.559
Meaning that every single possible
node has two children and

8
00:00:23.559 --> 00:00:27.530
it is perfectly in,
there's just no extra levels.

9
00:00:27.530 --> 00:00:29.892
The levels completely filled
at every single style, so

10
00:00:29.892 --> 00:00:31.747
that is called a full binary tree.

11
00:00:31.747 --> 00:00:35.256
If you have one missing this is called
a partial complete binary tree and

12
00:00:35.256 --> 00:00:36.668
why it is partial complete.

13
00:00:36.668 --> 00:00:38.674
Is a complete binary tree would be this,

14
00:00:38.674 --> 00:00:41.452
kind of odd that a partial
complete can have more nodes.

15
00:00:41.452 --> 00:00:44.145
Where a complete binary
tree will have less nodes.

16
00:00:44.145 --> 00:00:46.974
A complete binary tree just
simply means that every

17
00:00:46.974 --> 00:00:49.505
single node has its max children on it.

18
00:00:49.505 --> 00:00:52.775
So it's a little bit different than a full
fold being the greatest binary tree

19
00:00:52.775 --> 00:00:53.565
possible.

20
00:00:53.565 --> 00:00:55.275
But I figured everyone kind
of knows a binary tree.

21
00:00:55.275 --> 00:00:58.995
I just wanted to say it just in case
people are a little bit behind on that.

22
00:00:58.995 --> 00:01:02.024
So really what we're gonna focus
on is binary search trees.

23
00:01:02.024 --> 00:01:06.254
So let's start there, if you're not
familiar with the binary search tree,

24
00:01:06.254 --> 00:01:08.283
you can imagine that at any one node.

25
00:01:08.283 --> 00:01:12.710
You have a link to a parent and
a link to potentially two children.

26
00:01:12.710 --> 00:01:14.937
On this side of the binary tree,

27
00:01:14.937 --> 00:01:19.235
everything is going to be less
than whatever is in the middle.

28
00:01:19.235 --> 00:01:20.694
On this side of the binary tree,

29
00:01:20.694 --> 00:01:23.464
everything is going to be greater
than what's on this side.

30
00:01:23.464 --> 00:01:25.508
So if this side is Y, this side is X,

31
00:01:25.508 --> 00:01:28.914
X is going to be lower
than whatever is in here.

32
00:01:28.914 --> 00:01:30.414
And this side is going
to be always larger.

33
00:01:30.414 --> 00:01:32.793
So that's kind of like a rule
you must have in your head.

34
00:01:32.793 --> 00:01:35.424
Because the rest of the course
will make literally no sense for

35
00:01:35.424 --> 00:01:36.644
the next two to three hours.

36
00:01:36.644 --> 00:01:39.604
Or however long this takes to
get through the binary section

37
00:01:39.604 --> 00:01:42.575
because it just is like,
we will use this to move children.

38
00:01:42.575 --> 00:01:45.955
We'll use this to kind of visualize
how to walk through everything,

39
00:01:45.955 --> 00:01:48.475
because it is just
fundamentally very important.

40
00:01:48.475 --> 00:01:54.136
So I'll just do something
like this right here,

41
00:01:54.136 --> 00:01:57.735
so is this value larger than z?

42
00:01:59.255 --> 00:02:00.243
No, good job, right.

43
00:02:00.243 --> 00:02:03.914
Any sub tree has to follow
the rules of its parents, good job.

44
00:02:03.914 --> 00:02:07.234
This is a very special node, by the way,
we will cover that special node.

45
00:02:07.234 --> 00:02:09.794
All right, so I just want to make sure
everyone just understands the basic

46
00:02:09.794 --> 00:02:11.044
principles of binary search tree.

47
00:02:11.044 --> 00:02:12.400
So let's actually write one out.

48
00:02:12.400 --> 00:02:16.977
So I'll just go out here and

49
00:02:16.977 --> 00:02:22.160
do 10, 8, 3, 9, 20.

50
00:02:22.160 --> 00:02:23.447
You can have duplicates, and

51
00:02:23.447 --> 00:02:25.983
there are algorithms that
talk about having duplicates.

52
00:02:25.983 --> 00:02:29.193
But in general, when people are teaching
or talking about binary trees,

53
00:02:29.193 --> 00:02:31.253
we never actually put duplicates in it.

54
00:02:31.253 --> 00:02:33.814
There are things with B plus trees
in which there are duplicates, and

55
00:02:33.814 --> 00:02:36.033
there are certain ways
you move things around.

56
00:02:36.033 --> 00:02:38.059
But we're just not going to
do those today, sounds good?

57
00:02:38.059 --> 00:02:41.617
All right, fantastic,
I like everyone's enthusiasm this morning.

58
00:02:41.617 --> 00:02:44.932
All right, so
searching a binary tree is pretty simple.

59
00:02:44.932 --> 00:02:47.311
If I had the value, say we had 15 in here,

60
00:02:47.311 --> 00:02:50.412
you start at the tip-pity
top of the binary tree.

61
00:02:50.412 --> 00:02:54.202
And since we have that really simple rule,
which is everything to one side of it,

62
00:02:54.202 --> 00:02:55.283
is gonna be less than.

63
00:02:55.283 --> 00:02:58.103
Everything to the other
side's gonna be greater than,

64
00:02:58.103 --> 00:03:00.327
we just need to determine
are we this value?

65
00:03:01.727 --> 00:03:03.087
Resounding no, exactly.

66
00:03:03.087 --> 00:03:05.450
So should we go right or
should we go left?

67
00:03:05.450 --> 00:03:06.506
&gt;&gt; Right.

68
00:03:06.506 --> 00:03:07.557
&gt;&gt; Right, exactly.

69
00:03:07.557 --> 00:03:10.857
So when we go right,
notice that something happened here.

70
00:03:10.857 --> 00:03:14.597
Half of the binary tree just
became completely invalid.

71
00:03:14.597 --> 00:03:16.907
We don't even have to look
at that entire half side.

72
00:03:16.907 --> 00:03:21.078
So that means we just eliminated one
half of all possibilities if this binary

73
00:03:21.078 --> 00:03:23.494
tree is nicely balanced like this.

74
00:03:23.494 --> 00:03:27.077
So we do it again, are we greater than,
less than, or equal to this point?

75
00:03:27.077 --> 00:03:27.826
&gt;&gt; Less.

76
00:03:27.826 --> 00:03:29.166
&gt;&gt; Less than, so
which direction should we go?

77
00:03:29.166 --> 00:03:30.113
&gt;&gt; Left.

78
00:03:30.113 --> 00:03:31.124
&gt;&gt; Left, perfect.

79
00:03:31.124 --> 00:03:33.334
So when we go left,
notice what happened again.

80
00:03:34.424 --> 00:03:37.704
Another one half of the remaining
tree has been cut out again.

81
00:03:37.704 --> 00:03:40.924
Or in other words, one fourth of
the total tree has been cut out.

82
00:03:40.924 --> 00:03:43.741
And so at this point we land here,
we realize we are this value,

83
00:03:43.741 --> 00:03:45.934
therefore this value is
contained in this tree.

84
00:03:45.934 --> 00:03:49.007
Even though there are seven
unique values in here,

85
00:03:49.007 --> 00:03:51.964
it took us three checks
to get to this point.

86
00:03:51.964 --> 00:03:56.601
And so as the trees expand when we
double the amount of nodes by having one

87
00:03:56.601 --> 00:03:57.311
more row.

88
00:03:57.311 --> 00:03:59.652
We can still do that cutting
out in a really fast space.

89
00:03:59.652 --> 00:04:02.552
Now notice that it only takes
four checks to find out if there

90
00:04:02.552 --> 00:04:04.064
is a node in this tree.

91
00:04:04.064 --> 00:04:09.334
As opposed to I forget how many that is,
what we at seven, that's 15 nodes.

92
00:04:09.334 --> 00:04:12.634
It'd be 15, and we're only doing four
checks, so it just grows really slow.

93
00:04:12.634 --> 00:04:17.486
That growth is called logarithmic,
meaning that search is going to be

94
00:04:17.486 --> 00:04:21.115
log of n lookup, n being,
how many nodes there are.

95
00:04:21.115 --> 00:04:25.226
Or another way to put it,
is that it takes the height of the tree

96
00:04:25.226 --> 00:04:28.560
amount of searching to find a node,
sounds good.

97
00:04:28.560 --> 00:04:31.846
Don't worry,
we'll be not super hard on the math today.

98
00:04:31.846 --> 00:04:35.337
Just because I mean, we'll do some
quick maths, but not a lot of maths.

99
00:04:35.337 --> 00:04:39.001
Because either I can show you the
algorithms or we can focus on analysis and

100
00:04:39.001 --> 00:04:42.103
there's just there's not a lot
of time to do all of it.

101
00:04:42.103 --> 00:04:44.273
So we're gonna kind of focus on,
I think, the good parts.

102
00:04:44.273 --> 00:04:47.349
Because once you understand
how to do some analyzing.

103
00:04:47.349 --> 00:04:50.996
It's gonna get easier for
you to kinda pick up these algorithms and

104
00:04:50.996 --> 00:04:53.286
really understand why they are runtime.

