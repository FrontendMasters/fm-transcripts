WEBVTT

1
00:00:00.000 --> 00:00:02.815
So let's talk about the types
of traversals you do in a graph,

2
00:00:02.815 --> 00:00:05.805
which there's two of them,
breadth-first and depth-first.

3
00:00:05.805 --> 00:00:09.721
We already covered this in the previous
algorithms course, including this intro.

4
00:00:09.721 --> 00:00:12.322
I just wanted to do it one more time,
so nobody is lost.

5
00:00:12.322 --> 00:00:15.170
We're not gonna go super
in-depth on these things.

6
00:00:15.170 --> 00:00:17.620
So, we'll erase the representation.

7
00:00:17.620 --> 00:00:20.579
We don't care how we're gonna
be representing the graphs,

8
00:00:20.579 --> 00:00:23.666
because we're gonna be doing
algorithms across them, okay?

9
00:00:23.666 --> 00:00:27.566
Though representation does make a big
difference on potentially the runtime

10
00:00:27.566 --> 00:00:31.286
speed of an algorithm, because if you
have to set up an adjacency matrix,

11
00:00:31.286 --> 00:00:33.626
you have to put in
the squared amount of items.

12
00:00:33.626 --> 00:00:36.473
You can't get away from that, that's
just just how it works, it's just life.

13
00:00:36.473 --> 00:00:38.550
That is what it is.

14
00:00:38.550 --> 00:00:42.646
All right, so,
let's do a quick breath-first search.

15
00:00:42.646 --> 00:00:46.237
All right, I'm gonna go like this,
and we're just gonna make a fun graph.

16
00:00:54.105 --> 00:01:01.921
All right, and then, I should write some
letters in there, right, C, D, E, F, G H.

17
00:01:01.921 --> 00:01:05.239
It really bothers me that I went lowest,
lowest, and

18
00:01:05.239 --> 00:01:08.870
then, lowest, and
then went inverted, at the very end.

19
00:01:08.870 --> 00:01:11.157
I don't know why I did that,
just really upsetting.

20
00:01:11.157 --> 00:01:13.838
All right, so we're gonna do
a breadth-first search right here.

21
00:01:13.838 --> 00:01:16.873
That means, we pick a node,
we'll just say, A, and

22
00:01:16.873 --> 00:01:21.340
we're gonna go and we're gonna take a
queue to kind of help us walk this graph.

23
00:01:21.340 --> 00:01:23.646
All right, so breadth-first
search is really, really simple.

24
00:01:23.646 --> 00:01:27.864
It's starting node, pick that,
add all the edges to that,

25
00:01:27.864 --> 00:01:30.758
mark this thing as it visited, and then,

26
00:01:30.758 --> 00:01:35.824
pop the next item off the queue until
there's nothing left in the queue.

27
00:01:35.824 --> 00:01:37.783
And you just do that over and over again.

28
00:01:37.783 --> 00:01:39.549
So we have A.

29
00:01:39.549 --> 00:01:40.587
A is in our queue queue to begin with.

30
00:01:40.587 --> 00:01:42.731
What do we do with A?

31
00:01:42.731 --> 00:01:46.985
We get A out of there and we mark A as
visited, but instead, we put in B and C.

32
00:01:48.850 --> 00:01:49.819
All right, awesome.

33
00:01:49.819 --> 00:01:52.747
So now, we just pop the next
item out of our queue.

34
00:01:52.747 --> 00:01:53.948
So we have visited A.

35
00:01:53.948 --> 00:01:55.427
Now, we're gonna visit B.

36
00:01:55.427 --> 00:01:58.737
B will be marked as visited, we can
add an A, A has already been visited,

37
00:01:58.737 --> 00:01:59.946
we don't need to do that.

38
00:01:59.946 --> 00:02:04.192
We need to add in D, fantastico.

39
00:02:04.192 --> 00:02:07.022
So we go C, D, all right?

40
00:02:07.022 --> 00:02:08.692
Now, we pop it out again.

41
00:02:08.692 --> 00:02:11.462
We get C and we visit C.

42
00:02:11.462 --> 00:02:14.132
And then, we try to add D,
D is already in there.

43
00:02:14.132 --> 00:02:15.259
You could technically,

44
00:02:15.259 --> 00:02:18.808
you could technically make an algorithm
in which you actually have both D's.

45
00:02:18.808 --> 00:02:20.153
And then, when you take out the second D,

46
00:02:20.153 --> 00:02:21.900
you check to see if you've
already visited this one.

47
00:02:21.900 --> 00:02:23.270
And if you've already visited it,

48
00:02:23.270 --> 00:02:26.573
then just keep on going forward, you don't
have to retry to add the edges, all that.

49
00:02:26.573 --> 00:02:31.482
So, either or, and so, now,
we pop off the next D,

50
00:02:31.482 --> 00:02:34.278
and we add in E, F, G, and H.

51
00:02:34.278 --> 00:02:40.757
E, F, G, and H, awesome.

52
00:02:40.757 --> 00:02:42.285
And so, now, we pop off the next D.

53
00:02:42.285 --> 00:02:43.564
We've already seen that D.

54
00:02:43.564 --> 00:02:46.494
Move it on, go with the E, E comes down.

55
00:02:46.494 --> 00:02:50.011
We have now visited E, E has been visited,
E has no neighbors to add,

56
00:02:50.011 --> 00:02:54.117
D has already been visited, so we move on,
we pop off F, exact same thing.

57
00:02:54.117 --> 00:02:57.637
Pop off F, visit F, F can only add D,
D has already been added.

58
00:02:57.637 --> 00:03:03.061
We've already seen it, so we pop off G,
G goes on here, mark G has visited.

59
00:03:03.061 --> 00:03:04.407
D has already been added, we don't add D.

60
00:03:04.407 --> 00:03:09.286
Then we pop off H, H goes here, tries
to add D, D has already been visited,

61
00:03:09.286 --> 00:03:12.475
and now we go try to add I,
I has not been visited.

62
00:03:12.475 --> 00:03:15.476
I goes into the Q and now we write I,
and we pop off I, and

63
00:03:15.476 --> 00:03:18.366
we do all the marking, and
we do all the great stuff.

64
00:03:18.366 --> 00:03:21.347
That is a breath-first search, we use
a queue to manage how we visit things.

65
00:03:21.347 --> 00:03:24.167
Now, there's a very special
property with breadth-first search.

66
00:03:24.167 --> 00:03:31.134
Notice that this is 0, that this is 1,
that this, all the way not there.

67
00:03:31.134 --> 00:03:35.562
This is 2, and this is 3,
meaning that we are at A,

68
00:03:35.562 --> 00:03:39.811
that is where we start
our breath-first search.

69
00:03:39.811 --> 00:03:42.902
We are able to find,
either of these people in 1 hop,

70
00:03:42.902 --> 00:03:46.013
we are able to find D in 2 hops,
I did that wrong.

71
00:03:46.013 --> 00:03:51.769
D goes like that, D is 2,
this is 3, this is 4, then E,

72
00:03:51.769 --> 00:03:56.831
F, G, and H are 3 hops away,
and I is 4 hops away.

73
00:03:56.831 --> 00:04:02.410
Breath-first search goes out in
concentric rings in some sort of sense.

74
00:04:02.410 --> 00:04:05.897
It finds further and further away nodes,
which is pretty cool,

75
00:04:05.897 --> 00:04:10.032
because you know the really neat
application of breadth-first search is,

76
00:04:10.032 --> 00:04:13.860
if you have a weightless undirected graph,
let's just go like this.

77
00:04:17.090 --> 00:04:19.155
We're almost there, can you feel it?

78
00:04:20.796 --> 00:04:22.246
Are you excited?

79
00:04:22.246 --> 00:04:26.006
We have a start, we have an end,
and we have walls.

80
00:04:28.233 --> 00:04:33.283
A breath-first search will literally find
the shortest path from S to E by the very

81
00:04:33.283 --> 00:04:38.201
nature of how it works because it walks
in these little further distance rings.

82
00:04:38.201 --> 00:04:41.451
Meaning that, if we can only go left,
right, up here,

83
00:04:41.451 --> 00:04:43.531
we'll do it in this order too.

84
00:04:43.531 --> 00:04:46.079
We go up, we'll go top,
we'll do CSS order, right?

85
00:04:46.079 --> 00:04:49.893
Top, right, bottom, left,
all right, fantastic.

86
00:04:49.893 --> 00:04:54.676
CSS order that has never been stated
once in a class about graphs.

87
00:04:54.676 --> 00:04:57.651
Okay, I think I'm the first
person ever to say this phrase.

88
00:04:57.651 --> 00:05:00.987
All right,
that means this would be distance 0.

89
00:05:00.987 --> 00:05:03.197
This would be distance 1.

90
00:05:03.197 --> 00:05:05.807
This will be distance 2.

91
00:05:05.807 --> 00:05:09.668
This will be distance 3, there we go.

92
00:05:09.668 --> 00:05:16.267
This will be distance 4,
this will be distance 5.

93
00:05:16.267 --> 00:05:22.021
This will be distance 6,

94
00:05:22.021 --> 00:05:26.734
7, 8, 9, 10.

95
00:05:26.734 --> 00:05:30.105
And so, you can see this thing slowly
going out, because we'd walked it.

96
00:05:30.105 --> 00:05:34.521
So if I were to actually do
this in this order, I'd go 1,

97
00:05:34.521 --> 00:05:37.741
then I'd go 2, then I'd go 3, right,

98
00:05:37.741 --> 00:05:43.178
we've kind of go in this ordering
where we actually do it one at a time.

99
00:05:43.178 --> 00:05:47.062
And you can see the path this thing
takes because it just do them all at

100
00:05:47.062 --> 00:05:47.959
the same time.

101
00:05:47.959 --> 00:05:49.229
And that's how we'd all add them in.

102
00:05:49.229 --> 00:05:51.914
And so, that's how breadth-first
search works, it's pretty neat,

103
00:05:51.914 --> 00:05:53.729
that it actually creates
this nice little path.

104
00:05:55.319 --> 00:05:58.966
That is the shortest path from
start to end following our rules.

105
00:05:58.966 --> 00:06:02.347
So if we were to add diagonals, obviously
at that point, we would have been able to

106
00:06:02.347 --> 00:06:04.944
go 1, 2, we'd have been able to
just kind of go right there.

107
00:06:04.944 --> 00:06:08.097
And it would have been able to
find all those within those rings.

108
00:06:08.097 --> 00:06:10.307
Alright, good times, depth-first search.

109
00:06:10.307 --> 00:06:12.603
Good to know, by the way, this is
kind of like the basis of Dijkstra's.

110
00:06:12.603 --> 00:06:16.467
I went over Dijkstra's last time, so
I'm not gonna be doing it this time, but

111
00:06:16.467 --> 00:06:18.589
Dijkstra's shortest path, fantastic.

112
00:06:18.589 --> 00:06:21.062
Then there's A star, even more fantastic.

113
00:06:21.062 --> 00:06:24.203
Then there's Jump Point Search,
which is even more fantastic.

114
00:06:24.203 --> 00:06:28.131
Then there's Jump Point Search Plus,
which is even more fantastic.

115
00:06:28.131 --> 00:06:29.931
I think they use one of
these two in StarCraft for

116
00:06:29.931 --> 00:06:32.318
moving things across these already
known fields and all that.

117
00:06:32.318 --> 00:06:35.589
Because if you really think about it,
if you have a big graph and

118
00:06:35.589 --> 00:06:37.690
you have these little structures here,

119
00:06:37.690 --> 00:06:41.920
really, you could take the entirety of
the movement here and put it into points.

120
00:06:41.920 --> 00:06:45.427
You don't have to walk every last
little teeny tiny point in the graph,

121
00:06:45.427 --> 00:06:47.075
you just walk the thing, right?

122
00:06:47.075 --> 00:06:48.388
And these little fun,

123
00:06:48.388 --> 00:06:52.823
these fun algorithmic kind of challenges
you get to do in game programming.

124
00:06:52.823 --> 00:06:57.293
I'm not a game programmer, I'm not
talented enough to be a game programmer,

125
00:06:57.293 --> 00:07:00.833
is very hard job, bless their hearts,
love Baldur's Gate.

126
00:07:00.833 --> 00:07:04.692
All right, so now that we did that,
let's erase the stuff, okay?

127
00:07:04.692 --> 00:07:06.244
Erase the things.

128
00:07:06.244 --> 00:07:08.325
I'd like to keep this graph,
but I have to rewrite it.

129
00:07:08.325 --> 00:07:14.617
I've kind of made it really hard to see,
okay, just forget about it, you're dead.

