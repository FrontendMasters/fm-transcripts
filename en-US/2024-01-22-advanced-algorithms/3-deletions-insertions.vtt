WEBVTT

1
00:00:00.530 --> 00:00:02.780
Alright, so we're going to talk
about deletions from a binary tree.

2
00:00:02.780 --> 00:00:06.760
So this is where things get a little bit
intense we didn't cover this last time.

3
00:00:06.760 --> 00:00:08.435
I just wanna make sure we have this for

4
00:00:08.435 --> 00:00:11.160
knowledge because now
covering this will be fun.

5
00:00:11.160 --> 00:00:13.880
All right, so there's three
cases when it comes to deletion.

6
00:00:13.880 --> 00:00:16.900
So I'm just gonna come up here and
say three cases.

7
00:00:16.900 --> 00:00:19.521
So let's cover case number one,

8
00:00:19.521 --> 00:00:23.931
which is you're just a child
with no children, right?

9
00:00:23.931 --> 00:00:25.648
You're somewhere in the tree,

10
00:00:25.648 --> 00:00:29.062
I guess I could have just said
you're a node with no children.

11
00:00:29.062 --> 00:00:31.182
That probably makes more sense.

12
00:00:31.182 --> 00:00:34.412
So let's just draw out just
a fictional binary tree.

13
00:00:34.412 --> 00:00:36.252
We don't even have to fill in the values.

14
00:00:36.252 --> 00:00:40.910
If we were to delete this right here,
there is no special handling required,

15
00:00:40.910 --> 00:00:41.638
right?

16
00:00:41.638 --> 00:00:45.468
Because when I delete this, well,
it's just gone, there's no adjusting.

17
00:00:45.468 --> 00:00:49.461
So I would just simply delete the link and
whatever reclamation you have to do for

18
00:00:49.461 --> 00:00:52.978
your node you can do if this is rust,
it drops it automatically.

19
00:00:52.978 --> 00:00:54.224
If it's JavaScript,

20
00:00:54.224 --> 00:00:58.558
you'll collect it later at some point
with a nice garbage collection halt.

21
00:00:58.558 --> 00:01:01.867
All right, now the next one
it's going to be one child.

22
00:01:03.257 --> 00:01:04.767
This one's a bit more difficult.

23
00:01:04.767 --> 00:01:08.498
And I'm gonna continue to use
these terms in a general sense,

24
00:01:08.498 --> 00:01:12.967
because I think it's a little bit
easier than putting concrete numbers.

25
00:01:12.967 --> 00:01:15.947
Because the moment you put concrete
numbers, you think in more concrete terms.

26
00:01:15.947 --> 00:01:21.490
But remember, all we are gonna think
about is less than, greater than.

27
00:01:21.490 --> 00:01:26.170
So in other words, x is less than, I'll
put z in the middle, which is less than y.

28
00:01:26.170 --> 00:01:30.078
So always think in these terms because
it makes it really easy to organize and

29
00:01:30.078 --> 00:01:31.700
understand this tree.

30
00:01:31.700 --> 00:01:36.076
So down here, let's just pretend
this is A, this is B, and

31
00:01:36.076 --> 00:01:40.906
potentially we have B right children and
we have B left children.

32
00:01:40.906 --> 00:01:43.379
Look at that BR, Brazil mentioned.

33
00:01:43.379 --> 00:01:44.974
People love Brazilian mentions,

34
00:01:44.974 --> 00:01:47.979
it's the quickest way to
get 1,000 likes on a tweet.

35
00:01:47.979 --> 00:01:52.079
Just say Brazil and it'll just be filled
with Brazil mentioned, they just love it.

36
00:01:52.079 --> 00:01:55.551
All right, so now that we got that done,

37
00:01:55.551 --> 00:01:59.139
if we were to delete A,
how do we delete A?

38
00:01:59.139 --> 00:02:00.047
Anyone have any ideas?

39
00:02:01.778 --> 00:02:02.808
&gt;&gt; Place it with B?

40
00:02:02.808 --> 00:02:04.228
&gt;&gt; Yeah, that's pretty much it.

41
00:02:04.228 --> 00:02:07.938
You erase, erase, down.

42
00:02:07.938 --> 00:02:10.468
It's pretty much straightforward
when you only have one child,

43
00:02:10.468 --> 00:02:13.618
you don't have to worry about this,
because is this still true?

44
00:02:13.618 --> 00:02:16.988
What is BL's relation to up here?

45
00:02:16.988 --> 00:02:18.448
I'll put x as the root.

46
00:02:18.448 --> 00:02:19.748
Well, we know one thing.

47
00:02:19.748 --> 00:02:22.005
BL is less than B.

48
00:02:22.005 --> 00:02:25.845
B was less than A, but
A is greater than X.

49
00:02:25.845 --> 00:02:29.618
And since it's all on this side, we also
know that BL is, by the very nature,

50
00:02:29.618 --> 00:02:30.985
greater than X.

51
00:02:30.985 --> 00:02:32.475
So therefore, we can just move it up.

52
00:02:32.475 --> 00:02:34.615
We don't have to move any
of these nodes around.

53
00:02:34.615 --> 00:02:38.123
We know they're all still upholding
the rules of a binary search tree,

54
00:02:38.123 --> 00:02:39.125
which is just this.

55
00:02:39.125 --> 00:02:42.092
You must maintain this rule,
so it's very, very important.

56
00:02:42.092 --> 00:02:43.572
I like the hood up, this is a good move.

57
00:02:44.592 --> 00:02:46.642
All right, so let's do one more.

58
00:02:46.642 --> 00:02:47.614
I'm gonna, again,

59
00:02:47.614 --> 00:02:51.972
just use very general terms cuz numbers
really don't help you in this situation.

60
00:02:51.972 --> 00:02:58.132
So let's just pretend we have
the node in which we wish to delete,

61
00:02:58.132 --> 00:03:05.540
but we have A, B and we have A C and there
are B left children, B right children.

62
00:03:06.630 --> 00:03:11.120
There is C left children and
there's C right children.

63
00:03:11.120 --> 00:03:13.300
So this one is a little bit more tricky.

64
00:03:13.300 --> 00:03:16.810
So we do know that whatever is up here,
all of these nodes are greater than,

65
00:03:16.810 --> 00:03:20.189
we're gonna pretend this
is on the right hand side.

66
00:03:20.189 --> 00:03:24.003
So we kind of have that in our minds, so
we know kind of where we're at in life it

67
00:03:24.003 --> 00:03:27.882
really doesn't matter you just know that
whatever it is we don't have to worry

68
00:03:27.882 --> 00:03:31.983
about anything on this side cuz we're only
dealing with this subtree right here.

69
00:03:31.983 --> 00:03:36.981
All right, so a strategy is you kind
of have two choices when it comes to

70
00:03:36.981 --> 00:03:41.318
case three which is of course
the two child problem.

71
00:03:41.318 --> 00:03:44.068
Kind of like the three-body problem,
but not as long of a book.

72
00:03:44.068 --> 00:03:49.348
So we have to choose, do we want to
delete from the left or the right?

73
00:03:49.348 --> 00:03:51.390
Now I did leave up this right here,

74
00:03:51.390 --> 00:03:55.738
because we are gonna use this term
in order very, very importantly.

75
00:03:55.738 --> 00:04:00.935
There is something called the in-order
successor and the in-order predecessor.

76
00:04:00.935 --> 00:04:05.387
It probably makes sense to you because you
know that when we printed out everything

77
00:04:05.387 --> 00:04:08.715
in the tree in order,
the numbers were in order, right?

78
00:04:08.715 --> 00:04:12.558
So let's just pretend we had a tree that
when we printed it out, it did 10, 20, 30.

79
00:04:12.558 --> 00:04:15.148
And there's also just a bunch
of stuff on this side and

80
00:04:15.148 --> 00:04:17.375
a bunch of stuff on this side.

81
00:04:17.375 --> 00:04:20.937
As we went through the tree,
if we are thinking about 20,

82
00:04:20.937 --> 00:04:25.890
this is its in-order predecessor,
this is its in-order successor.

83
00:04:25.890 --> 00:04:28.551
And what that means is that
if we were to go to A and

84
00:04:28.551 --> 00:04:32.481
we wanted to find the in-order successor,
we would go to the right and

85
00:04:32.481 --> 00:04:36.160
then find the smallest child
in the larger hand branch.

86
00:04:36.160 --> 00:04:39.369
The predecessor would be
going to the left and

87
00:04:39.369 --> 00:04:43.425
then finding the largest
item within the left branch.

88
00:04:43.425 --> 00:04:48.142
Cuz what we know is that whatever the
largest item is in the left branch will be

89
00:04:48.142 --> 00:04:49.555
one less or some less.

90
00:04:49.555 --> 00:04:51.695
It will be the next thing next to A,
right?

91
00:04:51.695 --> 00:04:54.745
So if we were to print it all
out in order, it is the 10.

92
00:04:54.745 --> 00:04:56.415
This one would be the 30.

93
00:04:56.415 --> 00:04:58.885
And so
we have to pick one of those two nodes.

94
00:04:58.885 --> 00:05:02.472
You get to choose which one you
want to pick, and at that point,

95
00:05:02.472 --> 00:05:04.785
you can just swap places like whole hog.

96
00:05:04.785 --> 00:05:07.475
So let's just pretend we went C and a CL.

97
00:05:07.475 --> 00:05:10.148
And let's pretend whatever that value is,

98
00:05:10.148 --> 00:05:13.365
we'll just call it C's left largest,
right?

99
00:05:13.365 --> 00:05:14.925
We're gonna bring that up.

100
00:05:14.925 --> 00:05:18.821
We're gonna race out A, and
we have C's left largest in here, and

101
00:05:18.821 --> 00:05:20.616
now we have A down here.

102
00:05:20.616 --> 00:05:25.517
The first thing you must notice is that
we reduced A's case down to case one or

103
00:05:25.517 --> 00:05:30.130
case two, because you can still have
some children here on that side.

104
00:05:30.130 --> 00:05:31.756
Wait, hold on, let's see, yeah.

105
00:05:31.756 --> 00:05:34.006
Not on that side, my bad,
on the other side.

106
00:05:34.006 --> 00:05:37.126
You could still potentially
have children on this side.

107
00:05:37.126 --> 00:05:39.297
And what I mean by that is that
as we go down the left side,

108
00:05:39.297 --> 00:05:41.136
we're trying to go all the way right.

109
00:05:41.136 --> 00:05:44.156
You could still have a left branch
coming off the right, but that is okay.

110
00:05:44.156 --> 00:05:46.136
We already know how to delete that one.

111
00:05:46.136 --> 00:05:49.336
You just simply break the link,
break the link, go right here.

112
00:05:49.336 --> 00:05:52.156
So that's easy to delete A,
we know how to delete A.

113
00:05:52.156 --> 00:05:53.546
Why is this true?

114
00:05:54.986 --> 00:05:57.176
Well, what can we say about this one?

115
00:05:57.176 --> 00:06:02.049
This one is smaller than C,
it's smaller than all of C's children

116
00:06:02.049 --> 00:06:06.677
on the left because it was
the smallest child on the left.

117
00:06:06.677 --> 00:06:08.792
Therefore, if it goes into this place,

118
00:06:08.792 --> 00:06:12.227
it 100% upholds this because
we already know C, right?

119
00:06:12.227 --> 00:06:13.054
They're all larger than C.

120
00:06:13.054 --> 00:06:15.797
This was on the left hand side so
we know it's smaller.

121
00:06:15.797 --> 00:06:19.388
So we can maintain this rule
by moving the largest or

122
00:06:19.388 --> 00:06:23.920
the smallest large item up,
same thing with the other side.

123
00:06:23.920 --> 00:06:27.954
You move the largest small item up,
it will be larger than everything on this

124
00:06:27.954 --> 00:06:31.480
side, but it'll be smaller
than everything on this side.

125
00:06:31.480 --> 00:06:34.240
So we do get to maintain this by
just simply grabbing that out.

126
00:06:34.240 --> 00:06:37.560
So that's a very kind
of important concept.

127
00:06:37.560 --> 00:06:39.200
Hopefully everyone kinda gets that.

128
00:06:39.200 --> 00:06:40.525
Are we feeling good about delete?

129
00:06:40.525 --> 00:06:42.375
Does this make sense?

130
00:06:42.375 --> 00:06:45.982
&gt;&gt; So you're saying that A might
still have children, but CL,

131
00:06:45.982 --> 00:06:47.915
was that a leaf node?

132
00:06:47.915 --> 00:06:49.445
&gt;&gt; It's sort of a leaf node.

133
00:06:49.445 --> 00:06:53.048
Here, I'll draw it up in concrete
terms now, really quickly, and

134
00:06:53.048 --> 00:06:55.875
we can just kind of see
this happen in action.

135
00:06:55.875 --> 00:06:57.565
And I'll make sure it
happens in a good way.

136
00:06:57.565 --> 00:06:59.117
So I'm just gonna put 100 in here,

137
00:06:59.117 --> 00:07:02.032
because that way I don't have
to plan has had nearly as well.

138
00:07:02.032 --> 00:07:06.048
Let's do 50, 60, 70, 65 and

139
00:07:06.048 --> 00:07:14.232
then we don't care what's on this side,
okay, we'll just call that B.

140
00:07:14.232 --> 00:07:18.322
So if we were to do the in order
predecessor at this point, we would go and

141
00:07:18.322 --> 00:07:20.482
find the largest value on this site.

142
00:07:20.482 --> 00:07:24.262
So we'd go left once, and
we'd drill right as far as possible.

143
00:07:24.262 --> 00:07:29.215
So right, right, can no longer go right,
so we choose 70.

144
00:07:29.215 --> 00:07:31.162
Now 70 is gonna go up here.

145
00:07:31.162 --> 00:07:34.442
100 will go right here.

146
00:07:34.442 --> 00:07:37.675
100 is currently in violation,
but we're deleting out

147
00:07:37.675 --> 00:07:41.502
that element since now we've reduced
it down to a case one or case two.

148
00:07:41.502 --> 00:07:46.341
It should be pretty easy, since its
case to delete link, delete link,

149
00:07:46.341 --> 00:07:48.773
delete node, establish new link.

150
00:07:48.773 --> 00:07:51.997
And you'll notice that it maintains
the correctness, but now this thing

151
00:07:51.997 --> 00:07:55.447
is on the right hand side because we
deleted off the right hand side node.

152
00:07:55.447 --> 00:07:58.084
But notice that 70 is larger
than everything on this side but

153
00:07:58.084 --> 00:08:00.628
we know it's smaller than
everything else on this side.

154
00:08:00.628 --> 00:08:01.858
Does that make sense?

155
00:08:01.858 --> 00:08:05.448
You can still have children,
you can still run to the 1K side.

156
00:08:05.448 --> 00:08:07.375
Because when you drill to the left,

157
00:08:07.375 --> 00:08:11.708
there's still potentially the leftmost
node may have a right child.

158
00:08:11.708 --> 00:08:15.138
Just like this one,
the rightmost node had a left child.

159
00:08:15.138 --> 00:08:20.301
&gt;&gt; So you go until you can't find
any greater number, and then that

160
00:08:20.301 --> 00:08:26.528
nodes parent, it's new right becomes
the node that you're deleting left.

161
00:08:27.738 --> 00:08:31.718
&gt;&gt; Yes, yes, which makes sense because
here I'll reestablish this situation.

162
00:08:31.718 --> 00:08:32.718
So let's go back here.

163
00:08:32.718 --> 00:08:36.256
So we had 100 moved in right here and
we had 65 right here.

164
00:08:36.256 --> 00:08:38.548
100 is to the left of 60.

165
00:08:38.548 --> 00:08:43.640
So when we just simply remove out 100 and
keep this up, we know for a fact that

166
00:08:43.640 --> 00:08:48.950
everything within this subtree is gonna
be larger than whatever's right here.

167
00:08:48.950 --> 00:08:52.040
So of course it naturally has to
move into the right-hand position.

168
00:08:52.040 --> 00:08:54.843
So it's very good just to kind of keep
this in mind because this is one of

169
00:08:54.843 --> 00:08:58.172
the trickiest parts about algorithms,
is understanding the basic principles and

170
00:08:58.172 --> 00:09:00.385
how to move things around
in the basic principles.

171
00:09:00.385 --> 00:09:03.819
That is why I actually started with
deletion as opposed to insertion,

172
00:09:03.819 --> 00:09:06.215
cuz insertion is actually rather simple.

173
00:09:06.215 --> 00:09:09.165
So we're gonna move on to
insertion really quickly.

174
00:09:09.165 --> 00:09:11.205
This one is not very hard at all.

175
00:09:11.205 --> 00:09:13.507
So I'm gonna put in these following nodes.

176
00:09:16.317 --> 00:09:20.132
All right, should be pretty easy so
we start with 10, nothing here,

177
00:09:20.132 --> 00:09:21.224
boom we have a 10.

178
00:09:21.224 --> 00:09:25.322
All right, we're gonna insert 20 Which
direction do we go left or right?

179
00:09:25.322 --> 00:09:26.042
&gt;&gt; Right.

180
00:09:26.042 --> 00:09:26.542
&gt;&gt; Awesome.

181
00:09:28.162 --> 00:09:31.943
All right, we're gonna insert in 30,
30 is larger than 10 goes down to 20,

182
00:09:31.943 --> 00:09:33.457
20 is still smaller than 30.

183
00:09:33.457 --> 00:09:35.983
So therefore we go right again,
we put it in.

184
00:09:35.983 --> 00:09:40.159
All right now we're gonna put in 40, 40
is larger than 10, 40 is larger than 20,

185
00:09:40.159 --> 00:09:43.363
40 larger than 30,
therefore we go all the way down here.

186
00:09:43.363 --> 00:09:44.913
What has happened to our tree?

187
00:09:45.973 --> 00:09:46.783
&gt;&gt; Upside of it.

188
00:09:46.783 --> 00:09:48.303
&gt;&gt; Our tree sucks, right?

189
00:09:48.303 --> 00:09:51.709
Like this is actually,
if you really think about it,

190
00:09:51.709 --> 00:09:55.353
we just got done writing a very
complicated linked list.

191
00:09:55.353 --> 00:09:58.453
That's all we just got done doing,
we have just made a linked list.

192
00:09:58.453 --> 00:10:02.762
And so this thing sucks and we want to
be able to do something about this.

193
00:10:02.762 --> 00:10:08.462
Our search time, remember,
is not log n, it's technically h.

194
00:10:08.462 --> 00:10:13.649
In a well balanced binary tree that
is log n, but in this tree h is n.

195
00:10:13.649 --> 00:10:15.992
And so that totally sucks.

196
00:10:15.992 --> 00:10:17.072
And so there you go.

197
00:10:17.072 --> 00:10:21.307
This is the introduction to the last
algorithms course you'll ever want because

198
00:10:21.307 --> 00:10:24.543
hopefully by the end of it,
you never wanna see a whiteboard or

199
00:10:24.543 --> 00:10:28.788
an algorithm again because this is
gonna get slightly complicated.

200
00:10:28.788 --> 00:10:31.808
All right,
that's the fundamental knowledge you need.

201
00:10:31.808 --> 00:10:34.097
Now we can get into some data
structures and algorithms.

