WEBVTT

1
00:00:00.220 --> 00:00:03.177
Alright, so we're going to start doing a
little bit of dynamic programming because

2
00:00:03.177 --> 00:00:05.269
we haven't even covered any
dynamic programming have we?

3
00:00:05.269 --> 00:00:05.850
Yeah, thank you.

4
00:00:05.850 --> 00:00:08.050
The answer is no we haven't.

5
00:00:08.050 --> 00:00:10.710
Can you define dynamic programming?

6
00:00:10.710 --> 00:00:16.040
Yes, dynamic programming is using past
results to compute future values?

7
00:00:17.450 --> 00:00:18.761
It's very very simple, so

8
00:00:18.761 --> 00:00:22.474
let's just start with a very simple
Version of dynamic programming.

9
00:00:22.474 --> 00:00:24.674
Factorial of n, right?

10
00:00:24.674 --> 00:00:25.174
Wait.

11
00:00:27.125 --> 00:00:28.144
That was not n.

12
00:00:28.144 --> 00:00:28.864
N factorial!

13
00:00:28.864 --> 00:00:30.494
Alright, so there we go, n factorial.

14
00:00:30.494 --> 00:00:34.414
To compute n factorial,
we could do this the recursive way.

15
00:00:34.414 --> 00:00:39.148
I could literally have factorial of n,
and so

16
00:00:39.148 --> 00:00:44.355
then I just literally return factorial.

17
00:00:44.355 --> 00:00:48.782
All real old people are going to be
molding because I didn't do a tail

18
00:00:48.782 --> 00:00:50.425
recursion right there?

19
00:00:50.425 --> 00:00:53.685
Molding, molding in the chat
right now you can feel it.

20
00:00:53.685 --> 00:00:54.585
So there you go.

21
00:00:54.585 --> 00:00:56.605
This would be the recursive solution.

22
00:00:56.605 --> 00:01:00.850
Technically, you're still using kind of
like past values to calculate future ones.

23
00:01:00.850 --> 00:01:01.900
So that's not quite the same.

24
00:01:01.900 --> 00:01:04.810
You could imagine you could do the exact
same thing with a for loop, right?

25
00:01:04.810 --> 00:01:09.340
For i equals one, two n and
you just simply sum up the numbers, right?

26
00:01:10.630 --> 00:01:11.360
Or whatever it is.

27
00:01:11.360 --> 00:01:13.960
You get the idea, I, there you go.

28
00:01:13.960 --> 00:01:14.930
And then we return sum.

29
00:01:14.930 --> 00:01:19.402
All right, so this would be like the
simple conversion from a recursive case to

30
00:01:19.402 --> 00:01:20.622
an iterative case and

31
00:01:20.622 --> 00:01:25.158
typically this is what you would see
when it comes to dynamic programming.

32
00:01:25.158 --> 00:01:28.008
Typically it's a recursion to
an iterative solution, but

33
00:01:28.008 --> 00:01:29.778
you usually reduce the dimensions.

34
00:01:29.778 --> 00:01:32.638
There's only one dimension here,
nothing actually has changed.

35
00:01:32.638 --> 00:01:36.088
So let's go with something with
a little bit more interestingness.

36
00:01:36.088 --> 00:01:37.298
Let's talk about Fibonacci.

37
00:01:37.298 --> 00:01:41.872
So this is like the next most
obvious dynamic Programming versus

38
00:01:41.872 --> 00:01:44.799
just like your standard approach.

39
00:01:44.799 --> 00:01:46.540
If you do your standard Fibonacci solve,

40
00:01:46.540 --> 00:01:48.839
what you're going to see is
you're going to see this.

41
00:01:48.839 --> 00:01:52.543
I'm sure you've all seen this,

42
00:01:52.543 --> 00:01:58.639
which is going to be fib
(n-1) plus fib (n-2).

43
00:01:58.639 --> 00:02:03.304
All right, so
the Fibonacci sequence is zero one one two

44
00:02:03.304 --> 00:02:08.377
three five eight,
gosh 13 can't do math anymore, 21.

45
00:02:08.377 --> 00:02:11.807
What you're going to see is
that you solve this problem.

46
00:02:11.807 --> 00:02:14.188
Now what happens inside of this one?

47
00:02:14.188 --> 00:02:15.789
Well this one, what do you solve?

48
00:02:15.789 --> 00:02:24.409
Well, you're actually going to solve
Fib(n-2) plus fib(n-3), right?

49
00:02:24.409 --> 00:02:25.788
That's what you're going
to solve right here.

50
00:02:25.788 --> 00:02:27.092
Look at this and look at this.

51
00:02:28.512 --> 00:02:31.092
You're going to compute
that value multiple times.

52
00:02:31.092 --> 00:02:34.262
For every single time
you go down that tree,

53
00:02:34.262 --> 00:02:39.932
you're computing a huge subset of
that tree over and and over again.

54
00:02:39.932 --> 00:02:42.288
So that is why people don't
like to do it this way.

55
00:02:42.288 --> 00:02:47.191
It's the cleanest way to do it, but it's
also super just not great way to do it.

56
00:02:47.191 --> 00:02:50.993
The iterative version of this is
you're going to have an a and a b,

57
00:02:50.993 --> 00:02:53.565
a will be equal to zero,
b will equal to one.

58
00:02:53.565 --> 00:02:58.352
You're going to four from this
would be one, two, right?

59
00:02:58.352 --> 00:03:00.298
So this would be the second
number in the solution.

60
00:03:00.298 --> 00:03:04.409
So if it's less, if you have two or less,
then you just return out the number.

61
00:03:04.409 --> 00:03:07.199
So if we're gonna start with three, so
that means we have to start at two,

62
00:03:07.199 --> 00:03:07.839
going to three.

63
00:03:07.839 --> 00:03:11.744
So if i equals three up to n inclusive,

64
00:03:11.744 --> 00:03:16.139
by the way, here, we'll go like this.

65
00:03:16.139 --> 00:03:19.703
Temp equals b, a, or

66
00:03:19.703 --> 00:03:24.658
b equals a plus b, a equals b.

67
00:03:24.658 --> 00:03:26.213
Or a equals t.

68
00:03:26.213 --> 00:03:28.520
So there we go.

69
00:03:28.520 --> 00:03:29.790
We've swapped the two values.

70
00:03:29.790 --> 00:03:33.590
That means we went from zero and
one for a, to one and one.

71
00:03:33.590 --> 00:03:36.100
Then we're going to go from that.

72
00:03:36.100 --> 00:03:37.480
Here's a, here's b.

73
00:03:37.480 --> 00:03:40.590
We're going to go again,
a will become the temporary variable.

74
00:03:40.590 --> 00:03:42.438
So, a will remain one, b will become two.

75
00:03:42.438 --> 00:03:44.942
Then you're going to have two and
you're going to have three, and

76
00:03:44.942 --> 00:03:47.058
you're going to just watch
that thing kind of count up.

77
00:03:47.058 --> 00:03:50.470
So we're no longer, we're using past
results to calculate future values.

