WEBVTT

1
00:00:00.000 --> 00:00:05.167
So now, we're gonna go A,

2
00:00:05.167 --> 00:00:10.330
B, C, D, E, I wanna say,

3
00:00:10.330 --> 00:00:14.821
F was down here, G, H,

4
00:00:14.821 --> 00:00:17.987
I, there we go.

5
00:00:17.987 --> 00:00:21.233
I think I just created the exact
same graph, fantastic.

6
00:00:21.233 --> 00:00:22.077
We created the same graph.

7
00:00:22.077 --> 00:00:27.436
All right, so now,
we're gonna do a depth-first search.

8
00:00:27.436 --> 00:00:31.252
All right, so depth-first search is kind
of like the opposite of a breadth-first

9
00:00:31.252 --> 00:00:33.827
search, it uses your stack
as a way to maintain things.

10
00:00:33.827 --> 00:00:36.360
So last time we used a Q for
a breadth-first search,

11
00:00:36.360 --> 00:00:40.288
I know Q is not spelt with 1Q, but
it's just easy to write that way.

12
00:00:40.288 --> 00:00:44.359
Depth-first search is gonna use your
recursive stack, you can technically just

13
00:00:44.359 --> 00:00:48.783
use a stack, and then keep track of where
you're at and added pushed to the stack.

14
00:00:48.783 --> 00:00:52.224
If you need to really be caring about
optimizations in like a compiled language,

15
00:00:52.224 --> 00:00:54.723
that could be a really
awesome way to avoid things.

16
00:00:54.723 --> 00:00:57.533
In-lining it I think pretty
much yields the same operation.

17
00:00:57.533 --> 00:01:00.027
I don't know I have never tested,
but with the depth-first search,

18
00:01:00.027 --> 00:01:02.786
we're gonna start here, and then,
we have to have some rules, right?

19
00:01:02.786 --> 00:01:04.727
So my general rule is that,
I'm gonna start and

20
00:01:04.727 --> 00:01:07.556
I'm gonna always add things
from top to bottom, okay?

21
00:01:07.556 --> 00:01:11.356
Makes sense, so that means,
we start with A, is our starting node.

22
00:01:11.356 --> 00:01:13.295
Well, I'm gonna have to go
over each child, right?

23
00:01:13.295 --> 00:01:17.536
For each child,
we need to visit that child, right?

24
00:01:17.536 --> 00:01:20.360
So now, I need to go visit each child.

25
00:01:20.360 --> 00:01:22.395
Whatever that child is here at C,
there we go.

26
00:01:22.395 --> 00:01:23.803
So we're gonna have to
kind of do that thing.

27
00:01:23.803 --> 00:01:27.115
So I'm just gonna try to iterate them
in correct item, which means, we're

28
00:01:27.115 --> 00:01:31.078
in-function visit right here, which means
that we're just gonna recursively call it.

29
00:01:31.078 --> 00:01:33.300
So A will be visited.

30
00:01:33.300 --> 00:01:37.101
And then that means we're gonna have to
add B and C, but since it's recursive,

31
00:01:37.101 --> 00:01:38.999
we just go to B, B will then be visited.

32
00:01:38.999 --> 00:01:41.017
Now, we do B's children,
which Which is D and A.

33
00:01:41.017 --> 00:01:43.468
A has already been seen, D will be next.

34
00:01:43.468 --> 00:01:47.117
So now we visit D, and
now D starts going with its children.

35
00:01:47.117 --> 00:01:48.116
We'll go this way.

36
00:01:48.116 --> 00:01:49.328
We hit B first.

37
00:01:49.328 --> 00:01:50.195
We've already seen B.

38
00:01:50.195 --> 00:01:51.568
Therefore, we're gonna go to C.

39
00:01:51.568 --> 00:01:56.050
C will then be visited, and then,
we go to F, F will be visited next.

40
00:01:56.050 --> 00:01:57.717
Then we'll go to G,
G will be visited next.

41
00:01:57.717 --> 00:01:59.445
Then we'll go to H,
H will be visited next.

42
00:01:59.445 --> 00:02:01.126
Then we'll go to E,
E will be visited next.

43
00:02:01.126 --> 00:02:04.845
And then, we kind of have to do this whole
unwinding for, wait, hold on, whoa, whoa,

44
00:02:04.845 --> 00:02:07.313
whoa, whoa, I went into
breath-first there for a second.

45
00:02:07.313 --> 00:02:12.101
We get to H, H has children, so therefore,
we're gonna go to I, I has no children,

46
00:02:12.101 --> 00:02:15.143
we walk back once, we go to H,
H has no more children.

47
00:02:15.143 --> 00:02:18.848
We go back to D, D has more children,
E, now, we visit E, E has no children,

48
00:02:18.848 --> 00:02:21.533
go back to D,
D has already visited all their children.

49
00:02:21.533 --> 00:02:24.234
And go back to B,
B now has visited all of its children.

50
00:02:24.234 --> 00:02:27.239
We go back to A, A has now visited all
of its, or not all of its children,

51
00:02:27.239 --> 00:02:29.555
it tries to visit C,
C has already been visited.

52
00:02:29.555 --> 00:02:31.295
We go back to A, we're done.

53
00:02:31.295 --> 00:02:33.475
Okay, so
you kind of do it in the recursive style.

54
00:02:33.475 --> 00:02:37.110
That's a depth-first search, so
what is the runtime, of course?

55
00:02:37.110 --> 00:02:39.654
You have to visit everything,
you have to traverse every single node.

56
00:02:39.654 --> 00:02:43.006
So that's a classic,
that's the classic E+V, right?

57
00:02:43.006 --> 00:02:45.796
But E is larger than V,
everyone knows that.

58
00:02:47.506 --> 00:02:50.285
So therefore, you just say E,
E's fantastic.

59
00:02:50.285 --> 00:02:51.766
Same thing with breadth-first search.

60
00:02:51.766 --> 00:02:55.566
Now, there's a pretty neat application
you can do with depth-first search.

61
00:02:55.566 --> 00:03:03.175
Let's pretend for a second that
this is actually a directive graph.

62
00:03:03.175 --> 00:03:06.711
All right, whoopsies,
wrong direction there.

63
00:03:06.711 --> 00:03:10.287
And this happens to be your module graph.

64
00:03:10.287 --> 00:03:12.201
Like this is how you built your program.

65
00:03:12.201 --> 00:03:16.348
These are all files and
A requires B and C, which requires D,

66
00:03:16.348 --> 00:03:19.771
D requires E, H, G and
F, and H requires I.

67
00:03:19.771 --> 00:03:22.294
So, if I were to start at A and

68
00:03:22.294 --> 00:03:27.567
do a depth-first search in
post order traversal, right?

69
00:03:27.567 --> 00:03:32.271
Meaning, I add them after I'm done
visiting every last possible child, I will

70
00:03:32.271 --> 00:03:36.849
actually come up with your module graph or
this is known as topological sort.

71
00:03:36.849 --> 00:03:40.763
We're gonna sort them in the order
in which we visit them last.

72
00:03:40.763 --> 00:03:45.758
So, we start with A,
we go to B, B goes to D,

73
00:03:45.758 --> 00:03:50.349
D goes to E, there's no children left.

74
00:03:50.349 --> 00:03:57.449
E, all right, we come back to D, D goes to
H, H goes to I, there's no more children.

75
00:03:57.449 --> 00:04:02.700
I, we go back, there's no more
children for H, we put an H.

76
00:04:02.700 --> 00:04:06.666
We go back to D, we visit G,
there's no more children, G.

77
00:04:06.666 --> 00:04:10.830
We go back to D, go to F,
there's no more children, F.

78
00:04:11.850 --> 00:04:16.528
We go back to D, and now we're like, okay,
look, notice that it's directed towards D,

79
00:04:16.528 --> 00:04:18.451
we cannot take this path backwards.

80
00:04:18.451 --> 00:04:21.529
No more children left for D,
we load in D, we go back to B,

81
00:04:21.529 --> 00:04:24.237
there's no more children left for
B, we put in B.

82
00:04:24.237 --> 00:04:28.437
We go back to A, A still has a child left,
C, we visit C, D's already been visited,

83
00:04:28.437 --> 00:04:32.459
no need to do that, and then, finally,
we end back at A, no more children left,

84
00:04:32.459 --> 00:04:34.759
this would be it's topological sort.

85
00:04:34.759 --> 00:04:39.018
Now, you can technically start at any
node, and it will produce slightly

86
00:04:39.018 --> 00:04:42.383
different variants of this,
like if we were to start at H,

87
00:04:42.383 --> 00:04:45.700
we would get I than H,
which is slightly different here.

88
00:04:46.700 --> 00:04:49.827
But then we'd have to pick another node,
we'd have to go say to B, and

89
00:04:49.827 --> 00:04:52.848
then B would produce most of the rest
of the graph and end right here,

90
00:04:52.848 --> 00:04:55.290
then we do a which would produce C and
then A.

91
00:04:55.290 --> 00:04:57.734
And so,
there might be slight different ordering,

92
00:04:57.734 --> 00:05:01.063
cuz you can imagine that C could be in
place of B, B could be in place of C,

93
00:05:01.063 --> 00:05:05.807
depending on how you choose which child to
visit or how they're stored in what order.

94
00:05:05.807 --> 00:05:08.537
Just wanted to show you that, so this is
called topological sort, pretty neat.

95
00:05:08.537 --> 00:05:10.995
I thought it was pretty neat,
good times, right?

96
00:05:10.995 --> 00:05:12.297
You get, you can use this.

97
00:05:12.297 --> 00:05:14.212
So if you had to build
Webpack really quickly,

98
00:05:14.212 --> 00:05:16.338
you might need to do a little
topological sorting.

99
00:05:18.496 --> 00:05:19.687
There you go, okay?

100
00:05:19.687 --> 00:05:23.358
So, introduction to graphs, everyone's
feeling pretty good right now, or

101
00:05:23.358 --> 00:05:24.535
feeling happy about it?

