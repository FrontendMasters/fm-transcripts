WEBVTT

1
00:00:00.250 --> 00:00:03.085
So now that means we have to
do the other side of deletion,

2
00:00:03.085 --> 00:00:05.520
which is deleting internal nodes.

3
00:00:05.520 --> 00:00:08.150
That's where things kinda get
a little bit more tricksy.

4
00:00:08.150 --> 00:00:12.032
But if you remember our original deletion
rules, which I just, my goodness,

5
00:00:12.032 --> 00:00:15.000
I just happened to delete
the original deletion rules.

6
00:00:15.000 --> 00:00:17.170
There's only three cases
in deletion world.

7
00:00:17.170 --> 00:00:19.722
Case number 2, you have to use
the in-order predecessor or

8
00:00:19.722 --> 00:00:21.080
the in-order successor rule.

9
00:00:21.080 --> 00:00:23.295
Guess what we're gonna be doing again?

10
00:00:23.295 --> 00:00:24.132
Exact same rule.

11
00:00:24.132 --> 00:00:24.972
It's the same thing.

12
00:00:24.972 --> 00:00:27.051
It's just the same thing
cuz it's all just this.

13
00:00:27.051 --> 00:00:30.992
It just boils down to the same problem,
which is you have a spot in which one side

14
00:00:30.992 --> 00:00:33.819
is less than, one side's greater than,
or the value.

15
00:00:33.819 --> 00:00:36.719
You can do the same operations,
the same maneuvers.

16
00:00:36.719 --> 00:00:40.721
I wish it had some super cool name for
the maneuver, but it doesn't.

17
00:00:40.721 --> 00:00:44.805
All right, so I'm just gonna erase
this and make it look prettier, and

18
00:00:44.805 --> 00:00:46.725
we're gonna do some deletions.

19
00:00:46.725 --> 00:00:47.391
You're dead.

20
00:00:49.161 --> 00:00:50.851
What is that from, by the way?

21
00:00:50.851 --> 00:00:52.831
Is that Zootopia?

22
00:00:52.831 --> 00:00:53.761
And you're dead.

23
00:00:53.761 --> 00:00:54.603
Yeah, I think it's Zootopia.

24
00:00:54.603 --> 00:00:55.521
I think it's Zootopia.

25
00:00:56.551 --> 00:00:58.261
I think it's Zootopia.

26
00:00:58.261 --> 00:00:59.147
Anyways, doesn't really matter.

27
00:00:59.147 --> 00:01:00.770
Okay, it doesn't matter.

28
00:01:00.770 --> 00:01:03.107
All right, so
I'm gonna just put an x over here.

29
00:01:03.107 --> 00:01:06.883
I don't think we need to consider or
worry about that tree for now.

30
00:01:06.883 --> 00:01:12.175
And so I'm gonna have [1, 2, 3], [13,

31
00:01:12.175 --> 00:01:17.972
14, whoa,
that's a tight one right there, 16.

32
00:01:17.972 --> 00:01:19.887
Then let's go.

33
00:01:19.887 --> 00:01:20.696
What do we wanna do here?

34
00:01:20.696 --> 00:01:22.216
What do we wanna do here?

35
00:01:22.216 --> 00:01:25.696
Let's go, [17, 18, 19], why not?

36
00:01:25.696 --> 00:01:26.677
I'm just gonna put an x over here.

37
00:01:26.677 --> 00:01:29.911
I don't think we actually
need to worry about that one.

38
00:01:29.911 --> 00:01:32.447
So let's delete 16.

39
00:01:32.447 --> 00:01:39.293
So case 1 of our internal deletions
is pretty straightforward.

40
00:01:39.293 --> 00:01:45.234
Case 1 is in-order predecessor.

41
00:01:47.245 --> 00:01:52.391
All right, which means that if we
are deleting 16, we are gonna go to our

42
00:01:52.391 --> 00:01:58.822
smaller side, largest element, and
we're going to swippity swap it out, okay?

43
00:01:58.822 --> 00:02:03.637
So that means the 15 is gonna go where the
16 is, the 16 is gonna go where the 15 is.

44
00:02:03.637 --> 00:02:07.858
And then we've now reduced ourselves
down to the simplest possible case,

45
00:02:07.858 --> 00:02:09.467
which is a leaf node delete.

46
00:02:09.467 --> 00:02:12.951
And so now we just replay all
the rules of a leaf node delete.

47
00:02:12.951 --> 00:02:17.071
And this only works if your
in-order predecessor, technically,

48
00:02:17.071 --> 00:02:20.031
it comes to a point where
you break this rule, but

49
00:02:20.031 --> 00:02:23.808
this only works if your in-order
predecessor has kmin + 1.

50
00:02:23.808 --> 00:02:25.854
So this creates a very simple deletion.

51
00:02:25.854 --> 00:02:29.238
You just swap, delete it out, very easy.

52
00:02:29.238 --> 00:02:33.757
Number 2 is in-order, Successor.

53
00:02:35.217 --> 00:02:36.381
Do the exact same thing.

54
00:02:36.381 --> 00:02:39.064
If we were to delete 15,
again, this place,

55
00:02:39.064 --> 00:02:41.422
this is just the worst
place to be in this.

56
00:02:41.422 --> 00:02:46.386
You go down, you find the in-order
successor, you swap it out,

57
00:02:46.386 --> 00:02:49.831
put a 15 right here, put a 17 right here.

58
00:02:49.831 --> 00:02:53.757
And now, very simple delete,
case 1 deletion.

59
00:02:53.757 --> 00:02:59.978
Again, this is only if you
have kmin + 1 or more keys.

60
00:02:59.978 --> 00:03:01.433
Okay, so we're looking pretty good.

61
00:03:01.433 --> 00:03:05.079
But what'd happen if you don't have that,
right?

62
00:03:05.079 --> 00:03:09.366
And now we wanna delete 17.

63
00:03:09.366 --> 00:03:10.451
&gt;&gt; Merge.

64
00:03:10.451 --> 00:03:12.462
&gt;&gt; Merge, merge is a possible solution.

65
00:03:12.462 --> 00:03:16.547
Now, the problem is that when
you look at material on this,

66
00:03:16.547 --> 00:03:19.830
they always talk about it
in this kind of sense.

67
00:03:19.830 --> 00:03:24.191
Which meaning that you're talking about
something internal that has leaf nodes

68
00:03:24.191 --> 00:03:25.666
right below the internal,

69
00:03:25.666 --> 00:03:30.191
which is kind of unfair just to say
we just simply merge this, right?

70
00:03:30.191 --> 00:03:35.442
Cuz we merge it, delete it,
and that's that.

71
00:03:35.442 --> 00:03:40.114
I would probably be pretty crappy
of me to leave it right here.

72
00:03:40.114 --> 00:03:43.164
Though everything you look at
pretty much leaves it right here,

73
00:03:43.164 --> 00:03:45.634
that's not technically what should happen.

74
00:03:45.634 --> 00:03:48.416
Because what happens if you're
deep in the internal tree?

75
00:03:48.416 --> 00:03:52.066
You can't just grab your in-order
predecessor and your in-order successor

76
00:03:52.066 --> 00:03:55.767
nodes and merge them, cuz they could be
two completely separate subtrees, and

77
00:03:55.767 --> 00:03:58.545
you just break everything and
all things would fall apart.

78
00:03:58.545 --> 00:04:02.140
Really, you should swap it
out with one of them, and

79
00:04:02.140 --> 00:04:07.330
then run this algorithm at that point
where you merge back up the tree.

80
00:04:07.330 --> 00:04:09.931
But in this case, since it's simple,
and we can look at it,

81
00:04:09.931 --> 00:04:13.010
we're just simply going to
just do this right here.

82
00:04:13.010 --> 00:04:16.840
We just merged those two nodes,
and now we have one less node.

83
00:04:16.840 --> 00:04:21.127
And this just keeps on going over and
over and over again.

84
00:04:21.127 --> 00:04:22.007
And that's really it.

85
00:04:22.007 --> 00:04:24.801
That's the deletion part of B-trees.

86
00:04:24.801 --> 00:04:26.107
Everything else is the same thing.

87
00:04:26.107 --> 00:04:31.802
You just keep on merging,
you shrink down, you grow up.

88
00:04:31.802 --> 00:04:34.528
Grow up, [LAUGH] I like that.

89
00:04:34.528 --> 00:04:35.054
That's great.

90
00:04:35.054 --> 00:04:36.562
I'm gonna use that more often.

91
00:04:36.562 --> 00:04:42.007
All right, well, that concludes most

92
00:04:42.007 --> 00:04:48.278
of the tree portion of
the algorithms class.

93
00:04:48.278 --> 00:04:50.336
Is everyone happy about that?

94
00:04:50.336 --> 00:04:51.383
Are we happy about the trees?

95
00:04:51.383 --> 00:04:52.829
The trees are great?

96
00:04:52.829 --> 00:04:53.967
Trees are really cool.

97
00:04:53.967 --> 00:04:56.707
There's obviously more things
you can do with the tree.

98
00:04:56.707 --> 00:05:02.540
But this really covers the basic
idea of all advanced usage of trees.

99
00:05:02.540 --> 00:05:06.027
You now understand B-trees,
for the most part.

100
00:05:06.027 --> 00:05:08.614
Very hard to implement,
obviously, lots of little rules,

101
00:05:08.614 --> 00:05:10.656
lots of easy ways to shoot
yourself in the foot.

102
00:05:10.656 --> 00:05:13.681
You're pretty much walking just
on guns that are shooting,

103
00:05:13.681 --> 00:05:15.590
it's very, very easy to screw it up.

104
00:05:15.590 --> 00:05:16.935
I suggest a lot of tests.

105
00:05:16.935 --> 00:05:21.479
This is the only time in the universe
that I would ever suggest something like

106
00:05:21.479 --> 00:05:25.170
TDD because you know the input and
you know the output.

107
00:05:25.170 --> 00:05:27.966
I would never suggest this professionally,
okay?

108
00:05:27.966 --> 00:05:29.537
Don't let anyone know I'm suggesting this.

109
00:05:29.537 --> 00:05:33.775
But for these type of things, if you're
ever implementing a problem that can be

110
00:05:33.775 --> 00:05:37.204
boiled down to such a simple in and
out, always use TDD for that.

111
00:05:37.204 --> 00:05:40.674
Besides to that, don't you do it,
don't be a fool.

112
00:05:40.674 --> 00:05:44.816
Professional advice, with me,
teaching an algorithms class.

113
00:05:44.816 --> 00:05:48.761
Also, never take advice from anyone
that writes exclusively on a whiteboard.

114
00:05:48.761 --> 00:05:53.015
That is just like, they just haven't been
out in the real world for a long time.

115
00:05:54.773 --> 00:05:57.532
I think I've created you
a logical conundrum.

