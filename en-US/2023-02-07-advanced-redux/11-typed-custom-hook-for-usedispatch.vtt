WEBVTT

1
00:00:00.000 --> 00:00:03.834
There is a version of this
that is very similar for

2
00:00:03.834 --> 00:00:06.743
dispatch as well that we can look at.

3
00:00:06.743 --> 00:00:12.312
Easier is a strong word cuz other than
grabbing something from the library and

4
00:00:12.312 --> 00:00:18.064
using it, which is getting the type of
the dispatch is a very similar endeavor.

5
00:00:21.083 --> 00:00:23.621
I don't want to select you're
gonna go into store, sorry.

6
00:00:26.983 --> 00:00:31.738
And this will, since this is
based on the output of Git state,

7
00:00:31.738 --> 00:00:36.782
it will automatically stay current
with your state management.

8
00:00:36.782 --> 00:00:38.163
So application dispatch.

9
00:00:42.551 --> 00:00:48.667
And that is simply Type

10
00:00:48.667 --> 00:00:53.594
of Right, so this is the one

11
00:00:53.594 --> 00:00:57.390
that's bound to the actions that you're
currently accepting, so on and so forth.

12
00:00:57.390 --> 00:01:01.971
So this is the type of your state,
this is the type of

13
00:01:01.971 --> 00:01:06.890
what we are kind of taking and
ready to go at this point.

14
00:01:08.060 --> 00:01:09.854
So we'll also add a hook for that too.

15
00:01:19.323 --> 00:01:22.388
And that one we don't need a custom
type cuz this is the type.

16
00:01:25.435 --> 00:01:29.990
It's cuz we know that used all, like used
dispatch does is gives you a copy of

17
00:01:29.990 --> 00:01:33.993
dispatch that you couldn't import
cuz you made it in a component.

18
00:01:33.993 --> 00:01:37.939
So we've got that ready to go, and
that's just gonna wrap useDispatch.

19
00:01:40.189 --> 00:01:45.010
So it's one of those things where
you can make these effectively once.

20
00:01:45.010 --> 00:01:45.570
What do I got here?

21
00:01:47.846 --> 00:01:52.910
It's used here,
you sure angry about one type argument.

22
00:01:52.910 --> 00:01:53.410
What did I miss?

23
00:01:59.806 --> 00:02:04.267
Take a look at my store again.

24
00:02:16.434 --> 00:02:17.900
&gt;&gt; Should that dispatch?

25
00:02:17.900 --> 00:02:21.839
&gt;&gt; I've grabbed the one from React instead
of, [LAUGH] autocomplete failed me,

26
00:02:21.839 --> 00:02:23.534
a lot of things that start with R,

27
00:02:23.534 --> 00:02:26.940
I grab the dispatch from React
instead of the one from React Redux.

28
00:02:28.010 --> 00:02:31.405
So happens when you're talking and
you're typing.

29
00:02:31.405 --> 00:02:37.281
So we want the one from my store.

30
00:02:37.281 --> 00:02:44.992
We want the one from here As well.

31
00:02:44.992 --> 00:02:47.328
Cool, so grab

32
00:02:58.235 --> 00:03:00.521
Cool, still angry with me.

33
00:03:03.621 --> 00:03:07.330
&gt;&gt; Are you still updating
part of useDisptach?

34
00:03:07.330 --> 00:03:07.949
&gt;&gt; What's that?

35
00:03:11.031 --> 00:03:12.358
Thank you.
That's why you code with your friends.

36
00:03:12.358 --> 00:03:16.794
It's like pair programming on steroids,
right?

37
00:03:16.794 --> 00:03:19.610
Cool, so we've got that in place and
now I can use these everywhere.

38
00:03:19.610 --> 00:03:27.211
So I think we already used the AP
selector earlier in the task list,

39
00:03:27.211 --> 00:03:34.974
and now we just gotta go put the other
one in and create task, right?

40
00:03:34.974 --> 00:03:39.362
Cuz this one if you look,
it's like it takes any action, like,

41
00:03:39.362 --> 00:03:41.079
that's not what I want.

42
00:03:41.079 --> 00:03:45.980
This one takes the actions
that I know about.

43
00:03:45.980 --> 00:03:48.103
Let's verify that this is
wired up correctly first.

44
00:03:50.733 --> 00:03:52.165
We'll go back to that first app.

45
00:03:54.967 --> 00:03:56.820
And now we have a task that is set up.

46
00:03:56.820 --> 00:04:01.336
We've got our initial kind of state
management piece kind of wired up and

47
00:04:01.336 --> 00:04:02.159
ready to go.

48
00:04:02.159 --> 00:04:04.240
And that is kind of in place.

49
00:04:04.240 --> 00:04:08.733
Just to try one more thing,
let's go ahead and remove a task.

50
00:04:08.733 --> 00:04:12.185
And then after I remove a task,
you have a few minutes to just type.

51
00:04:12.185 --> 00:04:16.281
To try your hand, I will push up
this branch which will have kind of

52
00:04:16.281 --> 00:04:19.860
adding a task, removing a task,
and showing the tasks.

53
00:04:19.860 --> 00:04:23.984
And I'll put the branch up and then you
can kinda use that as inspiration for

54
00:04:23.984 --> 00:04:26.342
how would this look like on a user, right,

55
00:04:26.342 --> 00:04:31.013
which is effectively the same pattern just
with a different data model in this case.

56
00:04:31.013 --> 00:04:31.839
So we'll give it a shot.

57
00:04:31.839 --> 00:04:35.967
But let's actually let's get to the point
where we can go to individual task and

58
00:04:35.967 --> 00:04:37.637
we could remove it in this case.

59
00:04:37.637 --> 00:04:41.780
These are still pulling columns and
stuff from the context API.

60
00:04:41.780 --> 00:04:43.030
So we'll leave those in there.

61
00:04:43.030 --> 00:04:47.351
We will obviously get rid of this one
when you do your job in a little bit, or

62
00:04:47.351 --> 00:04:49.530
at least when I solve it afterwards.

63
00:04:49.530 --> 00:04:52.140
Cuz even if you write it,
it will not be in my code.

64
00:04:52.140 --> 00:04:54.958
So I will also have to
join you in that endeavor.

65
00:04:54.958 --> 00:04:58.335
But if we wanted to get
that useDispatch or

66
00:04:58.335 --> 00:05:02.393
useAppdispatch in this case,
useAppdispatch.

67
00:05:06.364 --> 00:05:09.100
Awesome, and we've got that ready to go.

68
00:05:09.100 --> 00:05:11.424
And so now simply,
now anywhere in our code base.

69
00:05:11.424 --> 00:05:16.060
This is a sales pitch for
just regular Redux right here.

70
00:05:16.060 --> 00:05:18.170
But one of the things I
really love about Redux is,

71
00:05:18.170 --> 00:05:21.150
I just have these dispatch
actions to say stuff happens.

72
00:05:21.150 --> 00:05:25.045
Everything else is like, my view layer
is really a view layer at this point.

73
00:05:25.045 --> 00:05:26.712
So we've got that in place.

74
00:05:26.712 --> 00:05:33.173
And now I just gotta find this Remove
button over here and we'll say, onClick.

75
00:05:38.139 --> 00:05:40.973
And we'll call dispatch.

76
00:05:46.413 --> 00:05:53.689
I don't think we fully implemented roof
tasks yet, but where's my autocomplete?

77
00:05:53.689 --> 00:05:57.644
Did I explore it, let's see.

78
00:06:02.391 --> 00:06:03.733
RemoveTask gets in there.

79
00:06:13.276 --> 00:06:15.660
Cool, removeTask, that takes the payload.

80
00:06:15.660 --> 00:06:19.560
This point is undefined,
which is again TypeScript working for us.

81
00:06:19.560 --> 00:06:23.000
So let's make it angry, and
then we'll make it happy.

82
00:06:23.000 --> 00:06:24.010
How's that sound?

83
00:06:24.010 --> 00:06:28.103
But in the room, you get to decide,
should I make it just take the ID, or

84
00:06:28.103 --> 00:06:30.580
does it take an object
with the ID key in it?

85
00:06:31.790 --> 00:06:33.622
You get to decide my API at this point.

86
00:06:33.622 --> 00:06:34.970
Whatchu wanna do?

87
00:06:34.970 --> 00:06:41.820
Should we do id equals task id,
or just passing the task id?

88
00:06:41.820 --> 00:06:43.664
&gt;&gt; In this case, I just passed an id.

89
00:06:43.664 --> 00:06:44.440
&gt;&gt; All right.

90
00:06:44.440 --> 00:06:45.895
&gt;&gt; That's what I have in my notes.

91
00:06:45.895 --> 00:06:49.259
So let's do that.

92
00:06:49.259 --> 00:06:50.310
I always have two minds about it.

93
00:06:50.310 --> 00:06:57.045
So I get the red squiggly, which makes
total sense cuz, again, the system works.

94
00:06:57.045 --> 00:06:58.205
So now in here.

95
00:06:58.205 --> 00:07:01.818
And now this is the tricky part
because I feel like for me,

96
00:07:01.818 --> 00:07:03.938
this is a personal opinion time.

97
00:07:03.938 --> 00:07:08.660
You can put that like some [LAUGH] stars
and rainbows, personal opinion time.

98
00:07:08.660 --> 00:07:10.910
For adding stuff and stuff like that,

99
00:07:10.910 --> 00:07:14.210
I love the fact that I can
treat things as mutable.

100
00:07:14.210 --> 00:07:17.837
For removing, I'm so used to just
filtering things that don't match

101
00:07:17.837 --> 00:07:20.770
the ID that we're gonna have
to do this one together.

102
00:07:20.770 --> 00:07:22.682
So we'll go ahead and we'll try it out.

103
00:07:22.682 --> 00:07:26.950
And what we need to do is,
so we've got the state.

104
00:07:26.950 --> 00:07:28.980
We've got action, right?

105
00:07:28.980 --> 00:07:30.655
And that action is going to be
what these payload actions.

106
00:07:34.510 --> 00:07:35.719
And this case,

107
00:07:35.719 --> 00:07:41.115
this is we just said that it was going
to be the ID that is a string as we.

108
00:07:41.115 --> 00:07:44.110
Now I could grab it off, I've two choices.

109
00:07:44.110 --> 00:07:45.856
IDs are pretty safe.

110
00:07:45.856 --> 00:07:51.089
If that makes you uncomfortable,
you could do task id as well.

111
00:07:51.089 --> 00:07:52.718
Guess what that is, it's a string.

112
00:07:52.718 --> 00:07:56.348
But if your IDs ever change to a number,
this will all be correct,

113
00:07:56.348 --> 00:07:58.665
which is nice when you're refactoring.

114
00:07:58.665 --> 00:08:03.795
For other properties, all the different
properties, stuff like that,

115
00:08:03.795 --> 00:08:09.990
then have TypeScript tell you, hey, 17
files away, there's an issue, it is nice.

116
00:08:09.990 --> 00:08:11.950
IDs are a pretty safe one.

117
00:08:11.950 --> 00:08:12.622
And we'll keep this one for now, though.

118
00:08:14.991 --> 00:08:18.714
Awesome, and so now, in this case,

119
00:08:18.714 --> 00:08:23.170
really the standard
practice is to do this.

120
00:08:23.170 --> 00:08:28.278
Say, state.entities.findIndex.

121
00:08:28.278 --> 00:08:32.532
And then probably after several years of,

122
00:08:32.532 --> 00:08:37.148
I could have done the entire task too,
right?

123
00:08:37.148 --> 00:08:42.701
After several years of
being told that everything

124
00:08:42.701 --> 00:08:47.326
should always be immutable at all times,

125
00:08:47.326 --> 00:08:54.478
you have to figure out how to
mutably remove a task from an array.

126
00:08:54.478 --> 00:08:56.255
Cool, so let's take a look at that.

127
00:08:56.255 --> 00:09:00.450
So this findIndex takes a callback
like most of the other array methods.

128
00:09:00.450 --> 00:09:05.031
And we'll say,
find the index of the one where

129
00:09:05.031 --> 00:09:09.623
the task ID equals the payload,
in this case.

130
00:09:09.623 --> 00:09:14.303
So we'll get the index for
that, and that's a number.

131
00:09:14.303 --> 00:09:16.611
And what we'll do is we'll simply say,

132
00:09:20.092 --> 00:09:25.500
From that index, and
remove one from there, state.entities.

133
00:09:27.780 --> 00:09:29.130
Could you name this task?

134
00:09:29.130 --> 00:09:31.973
Since it's scoped to tasks,
you absolutely could.

135
00:09:31.973 --> 00:09:36.665
I have done it both ways,
I don't know which one I like more.

136
00:09:36.665 --> 00:09:40.528
So if you had a strong opinion, now,
I think it should be called task,

137
00:09:40.528 --> 00:09:43.425
I will give you the permission
structure to go do it.

138
00:09:43.425 --> 00:09:44.536
I waffled back and

139
00:09:44.536 --> 00:09:49.063
forth multiple times when thinking
about which one I wanted to do today.

140
00:09:49.063 --> 00:09:52.357
I went with state in this case mostly
to make it clear that this was

141
00:09:52.357 --> 00:09:54.008
the Redux state for all y'all.

142
00:09:54.008 --> 00:09:58.838
But you're welcome to just call
up the thing in this case too.

143
00:09:58.838 --> 00:10:02.120
What you do on your own is totally cool.

144
00:10:02.120 --> 00:10:05.007
So let's verify that this all works,
and then I'll push it up.

145
00:10:08.566 --> 00:10:11.515
I can load in those the same way as
loading that data before I can load it as

146
00:10:11.515 --> 00:10:12.720
the initial state as well.

147
00:10:12.720 --> 00:10:13.275
So we'll probably do that in a second.

148
00:10:20.036 --> 00:10:21.350
You can add it.

149
00:10:21.350 --> 00:10:22.045
Let's say, nope.

150
00:10:24.732 --> 00:10:27.880
So this is where having
the Redux DevTools comes in handy.

151
00:10:27.880 --> 00:10:28.470
So let's take a look.

152
00:10:28.470 --> 00:10:32.764
We can pull those up.

153
00:10:32.764 --> 00:10:35.427
So we add task.

154
00:10:35.427 --> 00:10:38.508
The nice part is, and if you don't have
the Redux DevTools, I'll also drop a link.

155
00:10:38.508 --> 00:10:40.277
We'll put it in the notes for

156
00:10:40.277 --> 00:10:43.978
later, which is it shows you
a running log of every action.

157
00:10:43.978 --> 00:10:45.607
This is one of the things.

158
00:10:45.607 --> 00:10:50.389
A question I a lot of times get is, well,
there's useReducer now in the context API.

159
00:10:50.389 --> 00:10:51.830
Do I need any of this stuff?

160
00:10:51.830 --> 00:10:54.639
Well, yeah,
maybe you don't in a lot of cases.

161
00:10:56.560 --> 00:11:00.545
Nice parts include, yeah, a lot of
this tooling that we're seeing today,

162
00:11:00.545 --> 00:11:01.970
kind of built in.

163
00:11:01.970 --> 00:11:06.872
Other nice things are this Redux
developer tools which will show you

164
00:11:06.872 --> 00:11:11.860
the running log of every action that
has happened in your app since you

165
00:11:11.860 --> 00:11:16.686
kind of loaded it again, and
let you go back in time and see things.

166
00:11:16.686 --> 00:11:21.936
And you can also export the current state,
right, with these buttons down here and

167
00:11:21.936 --> 00:11:26.500
then also load up a fully hydrated
state of the application.

168
00:11:26.500 --> 00:11:28.651
So it's nice especially if you have,

169
00:11:28.651 --> 00:11:31.753
it's hard to get a full JSON
from a consumer customer.

170
00:11:31.753 --> 00:11:35.170
But I feel like you have QA or something
like that kind of going through, and

171
00:11:35.170 --> 00:11:38.114
they find you to be able to load
up the entire state and triage it.

172
00:11:38.114 --> 00:11:39.133
Makes total sense.

173
00:11:39.133 --> 00:11:42.106
But I can see that I'm literally
just not getting an action here.

174
00:11:42.106 --> 00:11:44.888
I don't have to do the whole thing of
like, let me throw a console log in there.

175
00:11:44.888 --> 00:11:50.132
And see, I can literally just figure out,
okay, it's definitely not firing.

176
00:11:50.132 --> 00:11:51.572
So let's take a look at the code.

177
00:11:51.572 --> 00:11:53.282
If I find out the issues
I didn't save the file.

178
00:11:53.282 --> 00:11:53.934
I'm gonna be.

179
00:11:58.250 --> 00:11:59.982
All right, we've got that.

180
00:11:59.982 --> 00:12:02.434
I'm gonna guess that red
squiggly under dispatch means.

181
00:12:02.434 --> 00:12:06.104
I You can call an action creator,
and it will make an object.

182
00:12:06.104 --> 00:12:07.240
You can absolutely do that.

183
00:12:08.630 --> 00:12:12.410
If you don't dispatch that object,
it does not enter the store.

184
00:12:14.170 --> 00:12:16.010
Luckily, tooling is nice.

185
00:12:16.010 --> 00:12:20.760
So now we get to demo the Redux DevTools,
all right, that sounds like a chapter.

186
00:12:21.970 --> 00:12:24.160
Now we get to demo the Redux DevTools.

187
00:12:24.160 --> 00:12:26.300
So now you can see, there it goes.

188
00:12:26.300 --> 00:12:31.500
As soon as I dispatch the action,
we'll do one for order as well.

189
00:12:31.500 --> 00:12:34.290
And the nice part is,
I can see the action.

190
00:12:34.290 --> 00:12:37.160
I can see the state
during each one of those.

191
00:12:37.160 --> 00:12:44.039
So initially, we had tasks as entities,
we added one, there it is.

192
00:12:44.039 --> 00:12:48.336
We removed it,
it was gone again, we added it.

193
00:12:48.336 --> 00:12:51.470
And just cuz I'm showing off.

194
00:12:51.470 --> 00:12:53.410
I can take this timeline and
scrub back and

195
00:12:53.410 --> 00:12:56.525
forth through the entire interaction
model with the app, right?

196
00:12:56.525 --> 00:13:00.080
[LAUGH] All right, here's a tool that's
been here for a really long time.

197
00:13:00.080 --> 00:13:02.464
But the nice part is, we get it for free.

198
00:13:02.464 --> 00:13:04.230
I didn't set that up, right?

199
00:13:04.230 --> 00:13:07.970
I use configure store, so I guess I
did set it up from Redux toolkit.

200
00:13:07.970 --> 00:13:10.850
But I got it completely for free.

201
00:13:10.850 --> 00:13:15.447
Normally, I am not gonna do this, but
you can go treat yourself into the.

202
00:13:15.447 --> 00:13:17.259
Cuz you install the extension,

203
00:13:17.259 --> 00:13:21.431
it puts this underscore all capital
letter thing onto the window object.

204
00:13:21.431 --> 00:13:25.465
But first you have to check it exists cuz
we tried to call it as a function, and

205
00:13:25.465 --> 00:13:27.190
it was a lot easier.

206
00:13:27.190 --> 00:13:28.832
I'd have to do anything,
&gt;&gt; Is it excluded from

207
00:13:28.832 --> 00:13:30.296
the production bill?

208
00:13:30.296 --> 00:13:31.890
&gt;&gt; Yeah, it is not included, yep.

209
00:13:31.890 --> 00:13:35.952
All of that is kind of
built in ready to go, yep.

