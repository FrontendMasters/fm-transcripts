WEBVTT

1
00:00:00.000 --> 00:00:04.343
Let's talk about just my strategy,

2
00:00:04.343 --> 00:00:08.132
right, for dealing with this.

3
00:00:08.132 --> 00:00:11.128
We will talk to APIs later and
stuff along those lines.

4
00:00:11.128 --> 00:00:14.706
But one of the questions that came up the
other days during another workshop was,

5
00:00:14.706 --> 00:00:17.561
when you don't immediately have IDs for
stuff, what do you do?

6
00:00:17.561 --> 00:00:18.335
And this is true.

7
00:00:18.335 --> 00:00:20.852
If you're dealing with
stuff client side as well,

8
00:00:20.852 --> 00:00:23.729
you need to give it unique
identifiers normally for keys.

9
00:00:23.729 --> 00:00:27.040
If you're talking to an API, hopefully
your server is doing that as well.

10
00:00:27.040 --> 00:00:29.459
As long as you're getting from somewhere,
it doesn't really matter.

11
00:00:29.459 --> 00:00:32.153
We will eventually talk to APIs, but for

12
00:00:32.153 --> 00:00:35.172
now we'll kinda see what
it looks like here.

13
00:00:35.172 --> 00:00:37.372
The error, just to be clear,

14
00:00:37.372 --> 00:00:42.932
we're saying it's a task where we're
obviously missing the ID, right?

15
00:00:42.932 --> 00:00:45.111
Fine, could you put it in here?

16
00:00:45.111 --> 00:00:46.562
Could you come up with an ID?

17
00:00:46.562 --> 00:00:48.062
Could you use a library in here?

18
00:00:48.062 --> 00:00:50.095
You absolutely could.

19
00:00:50.095 --> 00:00:55.084
I would argue that you should not,
and this is mostly a kind of strategic

20
00:00:55.084 --> 00:00:58.910
thing and a belief system
that this is your view layer,

21
00:00:58.910 --> 00:01:02.005
its job is to know what
the current state is.

22
00:01:02.005 --> 00:01:06.842
And to deal with user input like stuff
getting your model ready by assigning

23
00:01:06.842 --> 00:01:11.465
an ID and formatting it, should not
happen in your component, right?

24
00:01:11.465 --> 00:01:15.311
I believe that all of the kind
of things that create and

25
00:01:15.311 --> 00:01:20.114
set up all of your state should
happen inside the reducer, right?

26
00:01:20.114 --> 00:01:23.139
And so we wanna give ourselves
the primitives to make that happen.

27
00:01:23.139 --> 00:01:27.459
And that way, it's all in one place, you
don't play where are all the places that I

28
00:01:27.459 --> 00:01:29.770
get this thing throughout my different UI?

29
00:01:29.770 --> 00:01:32.626
Having it centralized,
it is very tempting to do it here.

30
00:01:32.626 --> 00:01:33.688
I have been tempted.

31
00:01:33.688 --> 00:01:37.221
I've done it here before,
I have regretted it.

32
00:01:37.221 --> 00:01:40.234
So I'm not doing that
while I'm being recorded.

33
00:01:40.234 --> 00:01:41.481
We're gonna do it right.

34
00:01:41.481 --> 00:01:43.004
So here, we have a bunch of ways, and

35
00:01:43.004 --> 00:01:46.309
this involves just a little bit TypeScript
knowledge that can help us, right?

36
00:01:46.309 --> 00:01:50.835
Could you just define a version
of the type that has different

37
00:01:50.835 --> 00:01:52.620
optional properties?

38
00:01:52.620 --> 00:01:54.633
You absolutely could.

39
00:01:54.633 --> 00:01:59.451
My kind of move with TypeScript
in this case is trying

40
00:01:59.451 --> 00:02:04.274
to assign stuff and
say this thing is another thing.

41
00:02:04.274 --> 00:02:07.022
A lot of times doesn't work super well for
me, there's nothing wrong with it.

42
00:02:07.022 --> 00:02:08.132
You can totally do it.

43
00:02:08.132 --> 00:02:10.336
You can say, you can cast as a type.

44
00:02:10.336 --> 00:02:14.746
I like to make functions that will say,
take a partial version of this and

45
00:02:14.746 --> 00:02:18.433
fill in all the actual details
to make this a real version that

46
00:02:18.433 --> 00:02:20.913
something might be expecting, right?

47
00:02:20.913 --> 00:02:25.719
And one of the ways that you can do this
is there's a utility method in TypeScript

48
00:02:25.719 --> 00:02:29.826
that's a partial that lets you
kinda just pick off certain things.

49
00:02:29.826 --> 00:02:32.190
So what I will do a lot of times, and

50
00:02:32.190 --> 00:02:36.197
I usually will not export this
type until the need arises.

51
00:02:36.197 --> 00:02:40.069
If I need it in more than one place and
fine, but a lot of times, I want this to

52
00:02:40.069 --> 00:02:44.009
kind of be an internal implementation
detail in my either slice or reducer or

53
00:02:44.009 --> 00:02:44.829
what have you.

54
00:02:44.829 --> 00:02:47.674
And I'll call it DraftTask or
something like that,

55
00:02:47.674 --> 00:02:51.887
whatever the version that does not have
all the things that a real task needs.

56
00:02:51.887 --> 00:02:52.774
At this point,

57
00:02:52.774 --> 00:02:57.502
the simplest version that you could do is
just say it's a partial of task, right?

58
00:02:57.502 --> 00:03:01.421
And if you've never seen this before
in TypeScript, this is simply saying,

59
00:03:01.421 --> 00:03:05.001
take all the required properties and
make them all optional, right?

60
00:03:05.001 --> 00:03:09.026
Gotta deal with why users any in a second.

61
00:03:09.026 --> 00:03:12.816
But for the most part, cool.

62
00:03:12.816 --> 00:03:14.760
Now, it is one way I can
actually have a draft version.

63
00:03:14.760 --> 00:03:17.028
Now, that's still not going on my array.

64
00:03:17.028 --> 00:03:21.742
I've just moved the problem from getting
yelled at when I change it here,

65
00:03:21.742 --> 00:03:25.012
from getting yelled at when
I dispatch the action,

66
00:03:25.012 --> 00:03:29.135
which again, I love that I was
immediately yelled out for that.

67
00:03:29.135 --> 00:03:30.545
Now, I've moved it down one line.

68
00:03:30.545 --> 00:03:34.167
And I do have an old saying,
which is as long as the error is moving,

69
00:03:34.167 --> 00:03:36.130
you're making progress, right?

70
00:03:36.130 --> 00:03:39.286
So I will take that because
now it's like yeah, cool.

71
00:03:39.286 --> 00:03:43.788
The action can be a draft task, but you
still can't push one of those on there.

72
00:03:43.788 --> 00:03:48.136
So the pattern that I really like for
this is I will a lot of times just have

73
00:03:48.136 --> 00:03:50.962
a method that will take
the thing that I have and

74
00:03:50.962 --> 00:03:53.087
turn it into the thing that I want.

75
00:03:53.087 --> 00:03:58.097
And appease TypeScript rather than casting
it and doing all this kind of stuff,

76
00:03:58.097 --> 00:04:01.785
I'll basically say something
like createTask, right?

77
00:04:01.785 --> 00:04:06.204
And that will take a DraftTask.

78
00:04:08.958 --> 00:04:13.136
This is one of those things where I
define the return value up front,

79
00:04:13.136 --> 00:04:17.998
not because I know that TypeScript will
automatically assign the right type.

80
00:04:17.998 --> 00:04:21.114
I do this even cuz it doesn't necessarily
have to be called a task as long as it

81
00:04:21.114 --> 00:04:22.543
meets the requirements of a task.

82
00:04:22.543 --> 00:04:25.308
I do this to make sure that
the code I write is fine, right?

83
00:04:25.308 --> 00:04:28.879
It's a fun little unit test right for
me right here right now by defining

84
00:04:28.879 --> 00:04:31.333
the return type as I start
to write the function.

85
00:04:31.333 --> 00:04:34.090
So it's also strategy that
I really like in this case.

86
00:04:34.090 --> 00:04:36.216
And this case, really,

87
00:04:36.216 --> 00:04:41.597
I know that the thing that I'm
missing here is that I need an ID.

88
00:04:41.597 --> 00:04:44.198
Lots of ways to do this,
Nano ID is around.

89
00:04:44.198 --> 00:04:49.143
Nano ID is also included in Redux toolkit,
so you don't have to get another MPM and

90
00:04:49.143 --> 00:04:51.447
import, or install rather, right?

91
00:04:51.447 --> 00:04:54.333
Personally, it's like, yeah,
I'm excited to start a new thing.

92
00:04:54.333 --> 00:04:58.397
And then it's like death by MPM installs
as I remember everything that I need in

93
00:04:58.397 --> 00:05:01.430
a modern web app over the course
of the next several hours.

94
00:05:01.430 --> 00:05:04.236
I also have it in the package JSON too.

95
00:05:04.236 --> 00:05:05.162
So we can do that.

96
00:05:05.162 --> 00:05:09.348
We need to basically say return,
and we can say,

97
00:05:09.348 --> 00:05:14.661
everything that's on the DraftTask,
but then also make sure

98
00:05:14.661 --> 00:05:19.787
that we've got an ID,
that is you can see I've got to them.

99
00:05:19.787 --> 00:05:21.259
We'll just pull the one
from Redux toolkit.

100
00:05:21.259 --> 00:05:23.907
Let's see.

101
00:05:23.907 --> 00:05:27.615
&gt;&gt; You mentioned user ID
the other day in React, is that?

102
00:05:27.615 --> 00:05:30.192
&gt;&gt; So user ID is different.

103
00:05:30.192 --> 00:05:35.278
I think I have that somewhere,
maybe not in this app.

104
00:05:35.278 --> 00:05:39.342
Let's talk about user IDs for
a moment cuz it's a great question.

105
00:05:39.342 --> 00:05:46.589
User ID is a hook, so it's only
available to you in React components.

106
00:05:46.589 --> 00:05:50.927
User ID does give you a unique value.

107
00:05:50.927 --> 00:05:52.428
It is predominantly for

108
00:05:52.428 --> 00:05:57.080
giving you a unique identifier that
is both consistent on server rendered

109
00:05:57.080 --> 00:06:01.442
components in React as well as when
they're hydrated on the client.

110
00:06:01.442 --> 00:06:04.547
For instance, for a form,
you should have an ID on the inputs, and

111
00:06:04.547 --> 00:06:06.335
then the label has an HTML4, right?

112
00:06:06.335 --> 00:06:09.264
But sometimes, especially if
you're generating on the server or

113
00:06:09.264 --> 00:06:10.728
you have a bunch of these things,

114
00:06:10.728 --> 00:06:14.457
you might not necessarily at the time have
a completely unique identifier for that.

115
00:06:14.457 --> 00:06:20.195
So you can use user ID to create
an identifier for yourself, cool.

116
00:06:20.195 --> 00:06:22.120
And so let's see.

117
00:06:22.120 --> 00:06:25.236
I think I did this the other option,
the other order.

118
00:06:27.310 --> 00:06:30.419
Because since ID could be
undefined in my partial task.

119
00:06:30.419 --> 00:06:33.222
See return,
what are we getting yelled at for here?

120
00:06:35.291 --> 00:06:38.126
ID, we've got string,
we got to actually say that these exist.

121
00:06:41.880 --> 00:06:45.042
So really, actually,
what the DraftTask should be,

122
00:06:45.042 --> 00:06:47.184
we know I got halfway there partial.

123
00:06:47.184 --> 00:06:51.193
The other thing we can do is
the partial is everything's optional,

124
00:06:51.193 --> 00:06:52.964
which I can combine this one.

125
00:06:52.964 --> 00:06:56.723
But really, I do actually want the type
safety to make sure that I have a title.

126
00:06:56.723 --> 00:06:58.795
It's like, hey, cool,
everything's optional.

127
00:06:58.795 --> 00:07:02.236
You set an ID,
titles can't be optional in real tasks.

128
00:07:02.236 --> 00:07:05.760
Everything else can be, or you've set
the ID, the user and the column can be.

129
00:07:05.760 --> 00:07:10.297
So partial make everything optional, and
I'll build towards this in a second.

130
00:07:10.297 --> 00:07:16.068
Really, what I also need is I just need
to pick certain things out too, right?

131
00:07:16.068 --> 00:07:21.041
And so I could say that we do want to
pick the title off of there as well.

132
00:07:21.041 --> 00:07:23.980
And I'll show you why like where I use
both of them together in a second.

133
00:07:23.980 --> 00:07:28.671
So we say, pick, we say the title.

134
00:07:28.671 --> 00:07:31.107
So now, this is expecting what
we've only got the title, right?

135
00:07:31.107 --> 00:07:32.083
You can kind of see.

136
00:07:32.083 --> 00:07:35.451
It is sometimes nice if you have some of
the other information for whatever reason.

137
00:07:35.451 --> 00:07:39.104
You could imagine that maybe when
this became a full comp on board,

138
00:07:39.104 --> 00:07:42.169
I already have the column, or
if it was from a user page,

139
00:07:42.169 --> 00:07:44.868
I might already have the user
ready to go as well.

140
00:07:44.868 --> 00:07:48.030
And so I'll show you a helper
type that I make in a second, but

141
00:07:48.030 --> 00:07:51.875
let's kind of get the rest of this wired
up, and then I will show you that.

142
00:07:51.875 --> 00:07:53.004
So we've got that, and

143
00:07:53.004 --> 00:07:55.841
now you can see this counts as
a real task as soon as I call it.

144
00:07:55.841 --> 00:08:05.139
So I can say, createTask,
pass it in that action payload.

145
00:08:12.204 --> 00:08:17.558
And boom, the types are happy,
thereby I am happy.

