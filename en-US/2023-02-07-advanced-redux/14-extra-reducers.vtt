WEBVTT

1
00:00:00.070 --> 00:00:04.990
Let's talk about having
interrelated reducers.

2
00:00:04.990 --> 00:00:09.458
So like the use case, the problem
statement is when I unassign a user or

3
00:00:09.458 --> 00:00:14.228
I remove a user, which I probably need
to wire up that button at some point,

4
00:00:14.228 --> 00:00:15.546
someone remind me.

5
00:00:15.546 --> 00:00:21.890
When I remove a user, it should unassign
them from whatever tasks are assigned.

6
00:00:21.890 --> 00:00:25.670
That seems like reasonable, there's other
fun things you can do in this repo if you

7
00:00:25.670 --> 00:00:28.262
want to play around afterwards
there's select things,

8
00:00:28.262 --> 00:00:30.260
we can change all sorts
of other fun things.

9
00:00:30.260 --> 00:00:33.202
Some of this I will leave in there in
case the spirit moved us, or if you want

10
00:00:33.202 --> 00:00:36.011
to try some of the stuff out later
I've left the setup in there for you.

11
00:00:36.011 --> 00:00:37.750
But I think we've got to remove button.

12
00:00:37.750 --> 00:00:42.340
We've got both pieces that seems like
a fair place to go in and do something.

13
00:00:42.340 --> 00:00:49.641
So let's go ahead and kind of look
at how we might go about that.

14
00:00:49.641 --> 00:00:54.414
Okay, so let's see,
the fun part is we got to allude to this

15
00:00:54.414 --> 00:00:58.711
before is that I will show
you this again just in case,

16
00:00:58.711 --> 00:01:04.660
on top of reducers,
there is this idea called extraReducers.

17
00:01:04.660 --> 00:01:10.908
And the heuristic here is the reducers are
the ones that are tightly bound the slice,

18
00:01:10.908 --> 00:01:16.890
extraReducers are the other things that
the thing might care about, right?

19
00:01:16.890 --> 00:01:20.486
So for instance, maybe there's
a logout action where you maybe want

20
00:01:20.486 --> 00:01:24.740
to just dump everything that's in
state and then clean it out, right?

21
00:01:24.740 --> 00:01:27.258
So they're not walking around some zombie
state where they're logged out, but

22
00:01:27.258 --> 00:01:29.070
all the data's still loaded.

23
00:01:29.070 --> 00:01:30.170
That's like a use case.

24
00:01:30.170 --> 00:01:34.360
There's all sorts of things that might
happen that you might want to deal with.

25
00:01:35.620 --> 00:01:40.631
ExtraReduces are like,
here are the extra or additional things

26
00:01:40.631 --> 00:01:45.287
that aren't the done for
me prewired up ready to go things.

27
00:01:45.287 --> 00:01:47.827
So really if we think about it like

28
00:01:51.281 --> 00:01:54.960
The tasks wants to know when
a user has been removed, right?

29
00:01:54.960 --> 00:01:58.660
It has a concern over there, and
I don't wanna fire two actions.

30
00:01:58.660 --> 00:02:01.640
I don't wanna fire user slash remove user.

31
00:02:01.640 --> 00:02:06.550
And then also tasks slash
unassigned user from tasks, right?

32
00:02:06.550 --> 00:02:11.480
Because every reducer gets
every action no matter what.

33
00:02:11.480 --> 00:02:14.273
So you have multiple things that
are just amazing because again,

34
00:02:14.273 --> 00:02:16.830
you just say that a thing
happened in a Redux codebase.

35
00:02:16.830 --> 00:02:19.560
You're like, a user has been removed.

36
00:02:19.560 --> 00:02:22.000
Everyone gets the message, right?

37
00:02:22.000 --> 00:02:24.352
Whoever cares about it can deal with it,
and

38
00:02:24.352 --> 00:02:29.000
whoever doesn't care about it just lets
it fall through the conditions, right?

39
00:02:29.000 --> 00:02:31.312
It's actually super elegant and

40
00:02:31.312 --> 00:02:37.890
makes sometimes what seems like otherwise
complicated things make a ton of sense.

41
00:02:37.890 --> 00:02:39.650
So that's where that
builder comes back in.

42
00:02:39.650 --> 00:02:44.105
There is an object notation again just
like you saw above, where you can use

43
00:02:44.105 --> 00:02:48.927
the action types and then use that syntax
with the square brackets to key them in.

44
00:02:48.927 --> 00:02:52.122
That is planned to be deprecated for

45
00:02:52.122 --> 00:02:57.730
Redux Tools Kit 2.0, so
I'm just not gonna do it.

46
00:02:57.730 --> 00:03:01.167
You can look it up but even maybe by
the time you watch it, it's gone so

47
00:03:01.167 --> 00:03:03.553
we're gonna do the thing
that's here to stay.

48
00:03:03.553 --> 00:03:06.960
And so, we'll have that in place
also because it's a nice pattern.

49
00:03:06.960 --> 00:03:07.460
I like it.

50
00:03:08.700 --> 00:03:09.954
We've got the builder and

51
00:03:09.954 --> 00:03:13.262
this works exactly like the create
reducer that I showed you before.

52
00:03:13.262 --> 00:03:18.031
That create reducer that we're using,
didn't have this idea, it wasn't a slice,

53
00:03:18.031 --> 00:03:22.335
it didn't have this idea of these bound
actions to it, it simply was there for

54
00:03:22.335 --> 00:03:25.890
anything, I made those strings
up increment decrement.

55
00:03:25.890 --> 00:03:29.352
I made all that up, I mean I didn't make
up the word increment and decrement and

56
00:03:29.352 --> 00:03:32.840
the idea that would change the number
at a counter, but you get what I mean.

57
00:03:32.840 --> 00:03:38.076
So this works the same way,
and where this becomes really

58
00:03:38.076 --> 00:03:43.095
really cool which is builder,
the addCase .remove,

59
00:03:43.095 --> 00:03:49.442
or not even removed just pass in,
like we saw this actually earlier.

60
00:03:49.442 --> 00:03:54.349
That's why I kind of seated in to both
sell you on the fact that you could use

61
00:03:54.349 --> 00:03:59.275
these things piecemeal, and also to
kind of lay the groundwork for this.

62
00:03:59.275 --> 00:04:03.730
That is the action creator that we
call to create the action that we

63
00:04:03.730 --> 00:04:05.860
eventually dispatched.

64
00:04:05.860 --> 00:04:09.320
But that is all that
builder needs to know.

65
00:04:09.320 --> 00:04:11.770
I'll set up all the conditions and
everything for this, and

66
00:04:11.770 --> 00:04:13.390
we'll be good to go.

67
00:04:13.390 --> 00:04:16.600
And you ready for this?

68
00:04:16.600 --> 00:04:17.100
It's coming.

69
00:04:18.520 --> 00:04:19.695
Not if I put the comma there.

70
00:04:24.488 --> 00:04:25.201
I'm going to be so happy.

71
00:04:28.709 --> 00:04:29.360
All right.

72
00:04:29.360 --> 00:04:32.516
Here's one that's not a surprise.

73
00:04:33.659 --> 00:04:34.490
Yeah, I didn't read it yet.

74
00:04:34.490 --> 00:04:36.333
It's fine.

75
00:04:36.333 --> 00:04:37.104
The state.

76
00:04:37.104 --> 00:04:38.610
Don't spoil the surprise.

77
00:04:38.610 --> 00:04:40.370
The task state is the task state, right?

78
00:04:40.370 --> 00:04:40.870
Cool, cool, cool.

79
00:04:42.490 --> 00:04:43.680
That action is perfectly typed.

80
00:04:44.840 --> 00:04:46.028
It knew everything about it.

81
00:04:46.028 --> 00:04:49.625
It grabs the return type as we saw
before in the counter example.

82
00:04:49.625 --> 00:04:53.717
And so, I don't have to guess and remember
and jump back over to that reducer or

83
00:04:53.717 --> 00:04:57.195
that action creator and try to guess
what the properties on it are.

84
00:04:57.195 --> 00:05:00.535
It knows the type of it,
it knows what the payload is going to be.

85
00:05:00.535 --> 00:05:01.638
Everything is good to go,

86
00:05:01.638 --> 00:05:05.100
especially because I think we made a game
time decision to just use the IDs.

87
00:05:05.100 --> 00:05:07.750
It knows that payload is just a string.

88
00:05:07.750 --> 00:05:11.800
And I get all of that wired up,
ready to go.

89
00:05:13.040 --> 00:05:17.659
And so there we can basically
say now the tricky part is,

90
00:05:17.659 --> 00:05:22.574
it's you have to remember how
to do stuff immutably which is

91
00:05:22.574 --> 00:05:28.490
a little bit fun, but
let's go ahead and we'll try it out.

92
00:05:28.490 --> 00:05:31.540
And this is where you
can't outright replace it.

93
00:05:31.540 --> 00:05:32.660
So let's see.

94
00:05:32.660 --> 00:05:37.320
We got let's grab the user ID,
let's just for the action payload.

95
00:05:37.320 --> 00:05:39.600
Yeah, I want to call it that so
it's less confusing for me.

96
00:05:41.670 --> 00:05:46.311
Actually not payload just to name
it a little bit better I guess I

97
00:05:46.311 --> 00:05:50.614
could have done something fun there but
I'm not going to.

98
00:05:50.614 --> 00:05:55.015
And then what I'm going to do
unless someone's got a better plan,

99
00:05:55.015 --> 00:05:58.475
because I'm here for
it especially in TypeScript,

100
00:05:58.475 --> 00:06:03.663
object at entries loses its type,
definitions, it doesn't really know that

101
00:06:03.663 --> 00:06:08.719
the key is the key of the object if you
said, like object.keys or whatever.

102
00:06:08.719 --> 00:06:14.173
So I can't do some stuff, so
I'm very happy with four loops now,

103
00:06:14.173 --> 00:06:18.733
which is a thing that if you
would ask me five years ago,

104
00:06:18.733 --> 00:06:23.116
the last time, people change and
they grow, okay?

105
00:06:23.116 --> 00:06:26.072
So iterate through,

106
00:06:26.072 --> 00:06:31.334
that cost task of the state entities.

107
00:06:31.334 --> 00:06:34.816
And we're going to say hey,

108
00:06:34.816 --> 00:06:39.171
if your test user is equals userId,

109
00:06:39.171 --> 00:06:44.552
I guess I could delete
it off the object too.

110
00:06:44.552 --> 00:06:46.780
I'm so uncomfortable with immutable state.

111
00:06:46.780 --> 00:06:47.670
But it's nice.

112
00:06:47.670 --> 00:06:50.170
Most of the time I don't have to sit
there and spread operator my way up.

113
00:06:50.170 --> 00:06:51.642
But it's still slightly disorienting.

114
00:06:55.030 --> 00:07:00.850
All right, so go through every task.

115
00:07:00.850 --> 00:07:03.874
If previously you were
pointing to user 123 and

116
00:07:03.874 --> 00:07:08.339
user 123 is the one that we removed,
destroy that reference, right?

117
00:07:08.339 --> 00:07:15.611
Just set it to undefined and that task is
no longer pointed at that user, right?

118
00:07:15.611 --> 00:07:17.910
And that's it really.

119
00:07:17.910 --> 00:07:21.485
And now if we wire up the remove button,
we should see that in place and yeah.

120
00:07:21.485 --> 00:07:25.506
So now since every slice, every reducer
listens to everything, you just tell them

121
00:07:25.506 --> 00:07:28.560
what they care about and
you say what you should do to yourself.

122
00:07:28.560 --> 00:07:32.211
They only have access to their own state,
but they have access to messages and

123
00:07:32.211 --> 00:07:35.060
actions from throughout the application.

124
00:07:35.060 --> 00:07:38.569
So let's go ahead and we'll just
&gt;&gt; So this is when you delete a user.

125
00:07:38.569 --> 00:07:39.970
&gt;&gt; Yep.
&gt;&gt; Delete all their tasks.

126
00:07:39.970 --> 00:07:43.124
How would the scale with a for
loop like that?

127
00:07:43.124 --> 00:07:45.040
&gt;&gt; I mean, ideally like one.

128
00:07:48.190 --> 00:07:54.190
Hopefully, I have a API at some point.

129
00:07:54.190 --> 00:07:57.679
This remove user could be
the ones that state or

130
00:07:57.679 --> 00:08:00.550
I'm getting back a new list of users.

131
00:08:00.550 --> 00:08:03.880
I'm blowing it away from the API,
or something like that, right?

132
00:08:03.880 --> 00:08:06.860
If this is purely just
the client side thing, right?

133
00:08:06.860 --> 00:08:11.310
Ideally the list hasn't grown that big,
right?

134
00:08:11.310 --> 00:08:15.934
So yeah, this assumes, one of the things
we'll talk about a little bit is I think

135
00:08:15.934 --> 00:08:17.226
estate management and

136
00:08:17.226 --> 00:08:21.449
data fetching are two problems that
are similar both different, right?

137
00:08:21.449 --> 00:08:26.110
And so here we're aiming for,
this is probably a relatively constrained

138
00:08:26.110 --> 00:08:29.880
data set because it all clients
data to begin with, right?

139
00:08:29.880 --> 00:08:33.838
This could have been like, they were like
they had a bunch of search queries and

140
00:08:33.838 --> 00:08:37.288
we removed, like the last time I did
this is it was a advanced search query

141
00:08:37.288 --> 00:08:40.390
builder that wasn't going to
get more than five or six rows.

142
00:08:40.390 --> 00:08:44.187
But when you hit an X, I needed to remove
it from the filtering on the list and

143
00:08:44.187 --> 00:08:48.130
remove it from the UI, which were being
stored in different places, right?

144
00:08:48.130 --> 00:08:50.430
So I simply announced
that they removed it.

145
00:08:50.430 --> 00:08:51.740
The various two or three places.

146
00:08:51.740 --> 00:08:54.520
I think it changed the URL,
two of the query programs, right?

147
00:08:54.520 --> 00:08:56.933
So I had three different parts of my UI,
but

148
00:08:56.933 --> 00:09:01.270
it wasn't me processing big data that
I had loaded in memory in Permium.

149
00:09:01.270 --> 00:09:02.340
&gt;&gt; Right, okay.

150
00:09:02.340 --> 00:09:07.065
It was bound and I think, yeah, if you
have something that grows to a bigger

151
00:09:07.065 --> 00:09:10.550
thing, there are things that you can do.

152
00:09:10.550 --> 00:09:12.360
It's tricky because most
of them involve asynchrony.

153
00:09:12.360 --> 00:09:15.386
So you would have to either right
middleware or use a thunk tl dr,

154
00:09:15.386 --> 00:09:19.210
when you have to iterate over a whole
bunch of stuff in the browser.

155
00:09:19.210 --> 00:09:23.135
Setting a, doing 10, set a timeout for
the next hit of the event loop and

156
00:09:23.135 --> 00:09:26.554
doing another 10, is a great
strategy cause it lets clicks and

157
00:09:26.554 --> 00:09:28.480
other things get in there, right?

158
00:09:28.480 --> 00:09:30.815
So there are ways to do it, but
we're gonna assume this is,

159
00:09:30.815 --> 00:09:33.523
I had just had some UI and we were
building a thing that eventually I was

160
00:09:33.523 --> 00:09:36.120
going to have to put together, but
it didn't get too big in size.

161
00:09:37.800 --> 00:09:38.970
All right.

162
00:09:38.970 --> 00:09:40.020
So we've got that in place.

163
00:09:40.020 --> 00:09:46.010
Now I do need to go to an individual
user and wire up that delete button.

164
00:09:47.750 --> 00:09:55.221
So we go ahead and one day doesn't remove
user, a day it's gonna remove user today.

165
00:09:55.221 --> 00:10:01.037
Today is the day that removes a user.

166
00:10:01.037 --> 00:10:04.623
It's nice to leave yourself a little
presence when you're live coding.

167
00:10:04.623 --> 00:10:07.574
So we pull that in, and
then we've got a use AppDispatch.

168
00:10:13.054 --> 00:10:18.550
That should be your shortcut
editor eventually, awesome.

169
00:10:18.550 --> 00:10:20.300
And we can do editing,
we can do a whole bunch of stuff.

170
00:10:20.300 --> 00:10:23.258
And this will be interesting,
because if I do show the user,

171
00:10:23.258 --> 00:10:25.520
I'll give you this one
is kind of an exercise.

172
00:10:25.520 --> 00:10:26.640
I'm just being mindful of time.

173
00:10:28.400 --> 00:10:31.470
Where you can say they edit
the name in the sidebar.

174
00:10:31.470 --> 00:10:36.060
I also want to edit the name on the tasks,
right?

175
00:10:36.060 --> 00:10:39.610
That's definitely a side quest that
one should investigate going on.

176
00:10:40.860 --> 00:10:42.820
But here it will just
dispatch that action.

177
00:10:42.820 --> 00:10:45.050
And I guess I made a different
decision last time.

178
00:10:47.650 --> 00:10:51.874
We'll do the user ID and
we'll dispatch it.

179
00:10:59.085 --> 00:11:04.709
Cool, let's verify that everything works
before I say it does and push stuff up.

180
00:11:04.709 --> 00:11:06.700
So ideally, if we remove Dr.

181
00:11:06.700 --> 00:11:11.770
Strange, you can see this now no
one is assigned by two things.

182
00:11:11.770 --> 00:11:14.170
Just I announced that happen once.

183
00:11:14.170 --> 00:11:15.280
Everything that cares.

184
00:11:15.280 --> 00:11:17.800
Everyone that cares does
what they need to do.

185
00:11:17.800 --> 00:11:19.330
And life goes on.

186
00:11:21.390 --> 00:11:22.930
And is that easy to test?

187
00:11:22.930 --> 00:11:23.943
Yeah.

188
00:11:23.943 --> 00:11:28.442
You just have an array in your tasks that
have one of them with the right user ID,

189
00:11:28.442 --> 00:11:31.851
you've send one of those actions and
the action creator and

190
00:11:31.851 --> 00:11:33.850
you make sure it's gone, right?

191
00:11:33.850 --> 00:11:35.740
And then you leave that
test in there forever.

192
00:11:35.740 --> 00:11:38.670
Because that runs in a millisecond.

193
00:11:38.670 --> 00:11:40.230
And you have confidence.

194
00:11:40.230 --> 00:11:43.040
But this does that thing forever and
ever and ever.

195
00:11:45.110 --> 00:11:46.250
And I've got a bunch of unassigned tasks.

196
00:11:47.520 --> 00:11:50.404
Yeah, there are side quests to go on
here if you wanna explore more and

197
00:11:50.404 --> 00:11:52.240
like just want a playground to play in.

198
00:11:52.240 --> 00:11:54.170
There's some selects you can drop in here.

199
00:11:54.170 --> 00:11:55.450
There's a bunch of other stuff like that.

