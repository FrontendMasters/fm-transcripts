WEBVTT

1
00:00:00.000 --> 00:00:02.942
So I help you set up a task,
your job is to set up a user.

2
00:00:02.942 --> 00:00:05.667
And then when we come back,
we'll talk a little bit about like, so

3
00:00:05.667 --> 00:00:08.101
how do we deal like the question
that I got earlier from who,

4
00:00:08.101 --> 00:00:10.357
these slices seem tightly
bound to their own actions.

5
00:00:10.357 --> 00:00:15.202
I showed a little bit what actually
implemented to see how do we deal with

6
00:00:15.202 --> 00:00:19.104
actions from other reducers and
coordinate all of that.

7
00:00:19.104 --> 00:00:20.454
And then we'll do async, and it'll be fun.

8
00:00:24.972 --> 00:00:29.356
All right, let's do a thing
called creating a user slice,

9
00:00:29.356 --> 00:00:31.909
the solution, hypothetically.

10
00:00:31.909 --> 00:00:36.747
All right, so we had a task once,
that can kinda be our inspiration here,

11
00:00:36.747 --> 00:00:41.136
and we can use that to figure out
how we would do the same basic idea.

12
00:00:41.136 --> 00:00:45.302
And then like I said before, we'll wire
them together and do some things there.

13
00:00:45.302 --> 00:00:48.891
And then we will figure out
how to make them talk and

14
00:00:48.891 --> 00:00:53.697
then do some asynchronous stuff as well,
cuz that's always fun.

15
00:00:53.697 --> 00:00:56.886
All right, so we have a tasks-slice.

16
00:00:56.886 --> 00:00:59.772
Again, the way to kinda
think about this is for

17
00:00:59.772 --> 00:01:04.212
you to kind of model in your application
for each thing, for each noun,

18
00:01:04.212 --> 00:01:07.254
if you will,
we'll have both of these in place.

19
00:01:07.254 --> 00:01:11.124
So a lot of this is somewhere from before,
last time,

20
00:01:11.124 --> 00:01:16.715
we kinda broke it up into pieces, let's
see it together in one kind of piece.

21
00:01:16.715 --> 00:01:21.228
So one thing that we can do is,
if I wanted to pull in the preloaded data,

22
00:01:21.228 --> 00:01:22.145
I can do that.

23
00:01:22.145 --> 00:01:24.355
And then we'll talk about
APIs in a little bit.

24
00:01:24.355 --> 00:01:26.447
But let's pull in the preloaded data.

25
00:01:26.447 --> 00:01:29.236
We'll say,

26
00:01:33.313 --> 00:01:36.674
../, it's an API, I guess, right?

27
00:01:36.674 --> 00:01:37.814
So we have that in place.

28
00:01:37.814 --> 00:01:42.329
Now, that's not gonna do us too much good
just yet, but we'll have that for now.

29
00:01:42.329 --> 00:01:48.018
And then we'll say that our
initialState as we saw before.

30
00:01:50.343 --> 00:01:55.572
I'm gonna follow the same
pattern as I followed last time,

31
00:01:55.572 --> 00:01:58.094
which is this idea of a user.

32
00:01:58.094 --> 00:02:03.654
And curious if I accidentally deleted
someone when I was in a file area,

33
00:02:03.654 --> 00:02:04.685
let's see.

34
00:02:04.685 --> 00:02:06.107
User, we got a user.

35
00:02:13.081 --> 00:02:17.023
Again, if I write for the seventh time
today, write constant set of type,

36
00:02:17.023 --> 00:02:19.849
we will find out that things
don't work as expected.

37
00:02:19.849 --> 00:02:22.756
It's like you're using types as a value,
I was.

38
00:02:22.756 --> 00:02:27.627
Awesome, so we've got that in place, and
there's some other pieces that we'll do,

39
00:02:27.627 --> 00:02:29.508
but let's start with the slice.

40
00:02:29.508 --> 00:02:33.690
So I'll say const usersSlice,
and actually,

41
00:02:33.690 --> 00:02:38.509
this is really should be our UserState or
UsersState.

42
00:02:38.509 --> 00:02:41.812
And then we do wanna make mixing
two thoughts together, right?

43
00:02:45.117 --> 00:02:46.521
This will be our userState.

44
00:02:46.521 --> 00:02:47.021
&gt;&gt; Type.

45
00:02:49.785 --> 00:02:50.983
&gt;&gt; Type, const?

46
00:02:50.983 --> 00:02:53.134
&gt;&gt; I know you want type instead of const.

47
00:02:53.134 --> 00:02:54.398
&gt;&gt; I want const this time.

48
00:02:54.398 --> 00:02:57.528
This is the type, this will give
me the value for the initialState.

49
00:02:57.528 --> 00:02:59.719
Yeah, I'm gonna say, of this type, right?

50
00:02:59.719 --> 00:03:02.010
So we kind of separated them.

51
00:03:02.010 --> 00:03:06.083
Theoretically, slice is
a great point actually,

52
00:03:06.083 --> 00:03:11.967
the slice will take the shape of
the initialState and use that as the type.

53
00:03:11.967 --> 00:03:15.615
So I could have just actually
defined an initialState and

54
00:03:15.615 --> 00:03:17.746
said that it was a user's array.

55
00:03:17.746 --> 00:03:20.254
It's a little trickier than an object.

56
00:03:20.254 --> 00:03:23.881
And then if I ever I do need to know
the shape of just this piece sometimes,

57
00:03:23.881 --> 00:03:26.093
I am gonna have to break it out and
export it.

58
00:03:26.093 --> 00:03:28.973
So I as a habit at this
point just separate them,

59
00:03:28.973 --> 00:03:33.509
you could theoretically just make
an initialState, but with that array,

60
00:03:33.509 --> 00:03:35.747
sometimes it can be a little tricky.

61
00:03:35.747 --> 00:03:37.354
Take the entities, and
that will be empty array.

62
00:03:37.354 --> 00:03:41.298
Now, it will know that that is an array of
users because we have assigned it to this

63
00:03:41.298 --> 00:03:42.115
state, right?

64
00:03:42.115 --> 00:03:43.966
But great point.

65
00:03:43.966 --> 00:03:48.549
So const usersSlice, and
that's gonna be my createSlice.

66
00:03:55.682 --> 00:04:02.216
CreateSlice, and that will take a name,
pretty easy in this case, users.

67
00:04:02.216 --> 00:04:09.806
It'll take an initialState, and then the
other thing that it requires is reducers.

68
00:04:09.806 --> 00:04:12.103
And now,
that reducers could be an empty object,

69
00:04:12.103 --> 00:04:14.302
you just have to hand it
something in that case.

70
00:04:14.302 --> 00:04:17.138
So we have that kind of in place,
and so now,

71
00:04:17.138 --> 00:04:20.683
we're gonna have the same
basic actions here for now.

72
00:04:20.683 --> 00:04:25.065
addUser, and that will take a state.

73
00:04:25.065 --> 00:04:28.725
We're gonna need that draft user ID in
a second, but we'll start with just this.

74
00:04:32.168 --> 00:04:36.895
Take a payload action, It doesn't

75
00:04:36.895 --> 00:04:40.173
figure out user type unless
you make it a full object.

76
00:04:40.173 --> 00:04:43.861
We'll have that, we'll start out with just
a user, I'll swap that out in a second.

77
00:04:43.861 --> 00:04:45.017
And so we have that in place.

78
00:04:45.017 --> 00:04:47.378
And then here we'll just say, actually,

79
00:04:47.378 --> 00:04:51.653
let's handle it cuz I'm gonna need that
createUser function at this point.

80
00:04:51.653 --> 00:04:56.695
So say createUser,
that will take this idea of a draft user.

81
00:04:56.695 --> 00:04:59.265
Luckily, this is why I
made the helper before,

82
00:04:59.265 --> 00:05:01.586
I don't have to think about this anymore.

83
00:05:01.586 --> 00:05:04.524
What are the things that
I care about on a user?

84
00:05:04.524 --> 00:05:08.833
They have real names and alter egos,

85
00:05:08.833 --> 00:05:13.421
I probably want both of those, right?

86
00:05:13.421 --> 00:05:19.214
And so we'll say that
a DraftUser is that RequireOnly,

87
00:05:21.706 --> 00:05:24.912
A type DraftUser RequireOnly.

88
00:05:24.912 --> 00:05:32.819
And off of the user object,
we'll take the, Autocomplete for the win.

89
00:05:34.221 --> 00:05:37.545
RealName and alterEgo.

90
00:05:37.545 --> 00:05:43.632
And so we have that,
that's gonna take, A DraftUser,

91
00:05:46.087 --> 00:05:50.791
And it will return as a real user, or
at least a valid user, how about that?

92
00:05:50.791 --> 00:05:52.922
I'm getting yelled at cuz it's
not doing that correctly.

93
00:05:52.922 --> 00:05:55.079
So here we'll just say,

94
00:05:57.705 --> 00:06:02.206
It'll pull in nanoid as we did before,
and then everything else.

95
00:06:02.206 --> 00:06:07.537
And the other reason to kinda
do it in this order is that way,

96
00:06:07.537 --> 00:06:12.762
with object spreads,
if there is an ID in that DraftUser,

97
00:06:12.762 --> 00:06:16.084
it will override the one I just made.

98
00:06:16.084 --> 00:06:20.755
So either way, if for
some reason I do have the ID,

99
00:06:20.755 --> 00:06:27.106
this still works but it will guarantee
that we have an ID, awesome.

100
00:06:27.106 --> 00:06:32.962
And so we'll do that, and
we'll say draftUser for the rest of this.

101
00:06:32.962 --> 00:06:34.310
Okay, and it's angry with me.

102
00:06:34.310 --> 00:06:35.824
Why are you angry?

103
00:06:35.824 --> 00:06:40.012
Cuz it also expects, Unclear, let's see.

104
00:06:40.012 --> 00:06:43.477
What are you angry about?

105
00:06:43.477 --> 00:06:46.002
That one, it wants something.

106
00:06:46.002 --> 00:06:51.209
So we can say, okay,
this is good, I'm okay with this,

107
00:06:51.209 --> 00:06:58.489
cuz actually, so tasks, the relationship,
it's like string or undefined.

108
00:06:58.489 --> 00:07:01.545
I actually never wanna deal with that
situation ever again in my life.

109
00:07:01.545 --> 00:07:05.906
So I do wanna say that
the tasks are an empty array.

110
00:07:05.906 --> 00:07:09.316
I don't ever wanna deal with the fact
that an array could be undefined.

111
00:07:09.316 --> 00:07:11.806
If I didn't pass one in,
that's totally cool.

112
00:07:11.806 --> 00:07:12.976
Make an empty array,

113
00:07:12.976 --> 00:07:16.554
it will be the correct type because
the user type is based on that.

114
00:07:16.554 --> 00:07:19.018
In this case, that is an array of strings.

115
00:07:19.018 --> 00:07:22.565
And then if I did have that
information for some reason,

116
00:07:22.565 --> 00:07:25.054
if I was creating a user based on a task,

117
00:07:25.054 --> 00:07:30.200
you've seen forms where it's like you can
do one thing based on the other thing.

118
00:07:30.200 --> 00:07:34.513
This will all work just as expected.

119
00:07:34.513 --> 00:07:37.058
Awesome, and so we've got that in place.

120
00:07:37.058 --> 00:07:42.267
And now we can do, Const user, and

121
00:07:42.267 --> 00:07:49.017
we'll say, With that action.payload.

122
00:07:49.017 --> 00:07:53.595
And one of the things I really like is I
can be mostly confident about all of this

123
00:07:53.595 --> 00:07:55.505
cuz the type system has my back.

124
00:07:55.505 --> 00:08:00.886
And so we'll say, unshift,
our user on there.

125
00:08:00.886 --> 00:08:05.869
And remove is much like we saw before,
where we say,

126
00:08:05.869 --> 00:08:09.281
cool, just got to state an action.

127
00:08:11.898 --> 00:08:14.301
And that's the PayloadAction of,

128
00:08:14.301 --> 00:08:19.425
we'll follow the same pattern that we
did last time, which is in this case,

129
00:08:19.425 --> 00:08:24.730
it's gonna be, finish that so I don't
get yelled at in the meantime, the ID.

130
00:08:26.486 --> 00:08:27.882
Either choice, I can argue for or against.

131
00:08:27.882 --> 00:08:32.460
Doing two different things in
two different slices is the only

132
00:08:32.460 --> 00:08:34.933
truly wrong option in this case.

133
00:08:34.933 --> 00:08:36.917
So we've got that in place.

134
00:08:36.917 --> 00:08:40.837
And now, again, for this,
we had to find the index and

135
00:08:40.837 --> 00:08:43.488
then slice it out, not my favorite.

136
00:08:43.488 --> 00:08:45.958
I could see myself writing
a helper method for

137
00:08:45.958 --> 00:08:48.628
this if I had to do it
probably any more than this.

138
00:08:51.767 --> 00:08:58.074
The same way for other things,
I've done that as well.

139
00:08:58.074 --> 00:09:00.604
So we've got this and we can say
findIndex, we can take the user.

140
00:09:03.584 --> 00:09:07.917
The user with the ID that equals that.

141
00:09:10.516 --> 00:09:13.720
Cool, we didn't put an ID
on there this time.

142
00:09:15.239 --> 00:09:21.390
State.entities, awesome, and
then we splice that one right out.

143
00:09:23.029 --> 00:09:27.501
And so this is where I put in
the entities cuz you can modify things.

144
00:09:27.501 --> 00:09:32.261
If state was an array, it's a draft, then
you destroy the draft that was there, so

145
00:09:32.261 --> 00:09:36.209
that's why it's nice to have the array
kinda as a child in that case.

146
00:09:36.209 --> 00:09:38.450
So we've got that in place, and

147
00:09:38.450 --> 00:09:42.604
then we say state.entities.splice
index and 1 past it.

148
00:09:47.576 --> 00:09:49.430
Awesome, and
that's now we just export stuff.

149
00:09:49.430 --> 00:09:53.058
And now, I have a working,
we'll make this a default export.

150
00:09:53.058 --> 00:09:58.484
I do things that I need to do, and
I say them out loud now before I forget,

151
00:09:58.484 --> 00:10:01.023
and I'll answer your question.

152
00:10:01.023 --> 00:10:05.464
I need to add it to the store, and
then, yeah, otherwise all this is for

153
00:10:05.464 --> 00:10:09.926
nothing, cuz there will be nothing
listening to those actions later.

154
00:10:09.926 --> 00:10:10.993
Yeah, what's your question?

155
00:10:10.993 --> 00:10:14.760
&gt;&gt; I should have asked this earlier, but-
&gt;&gt; I'm here for it.

156
00:10:14.760 --> 00:10:19.624
&gt;&gt; I thought you said you like to
create the IDs in the reducer, right?

157
00:10:19.624 --> 00:10:22.125
&gt;&gt; I mean, I am,
this function gets called in the reducer.

158
00:10:22.125 --> 00:10:22.992
&gt;&gt; Okay.
&gt;&gt; Right?

159
00:10:22.992 --> 00:10:23.492
&gt;&gt; Right there, okay.
&gt;&gt; Yeah.

160
00:10:23.492 --> 00:10:23.992
&gt;&gt; Sorry.

161
00:10:23.992 --> 00:10:26.604
&gt;&gt; It's sitting up here to keep this

162
00:10:26.604 --> 00:10:29.144
nice and neat.
It's happening

163
00:10:29.144 --> 00:10:30.098
there-
&gt;&gt; Right.

164
00:10:30.098 --> 00:10:33.248
&gt;&gt; It's just written slightly above mostly

165
00:10:33.248 --> 00:10:38.378
so I can export it, so I can write
a unit test, or more importantly,

166
00:10:38.378 --> 00:10:43.334
if I can do a spoiler alert, may I spoil?
So that I can use it in my test

167
00:10:43.334 --> 00:10:46.988
to create users, right?
So I can make it an initialState that has

168
00:10:46.988 --> 00:10:50.509
this stuff in it, right?
And I don't have to like call add, or

169
00:10:50.509 --> 00:10:55.160
if I'm testing add, calling ad to set
up the state to test add, feels bad.

170
00:10:55.160 --> 00:10:58.553
So we got that in place.

171
00:11:00.815 --> 00:11:04.900
I'll do the default export first,

172
00:11:04.900 --> 00:11:09.158
degault, usersSlice.

173
00:11:09.158 --> 00:11:13.403
And we got that, and
then we'll do the other pieces.

174
00:11:13.403 --> 00:11:19.905
In the same fashion I did before,
we've got this export const usersReducer.

175
00:11:19.905 --> 00:11:25.352
And for those of you all who have
done the make six different files,

176
00:11:25.352 --> 00:11:30.423
I'm typing obviously, but
I'm talking while I'm typing.

177
00:11:30.423 --> 00:11:36.995
And it is definitely a lot more delightful
than doing it in Vanilla Redux,

178
00:11:36.995 --> 00:11:41.558
and that's not even the free
TypeScript support.

179
00:11:41.558 --> 00:11:47.852
So yeah, [LAUGH] it's the smiling and
nodding, right?

180
00:11:47.852 --> 00:11:50.471
The other thing that I have learned the
hard way is I wanted to call these just

181
00:11:50.471 --> 00:11:51.066
add and remove.

182
00:11:51.066 --> 00:11:54.756
But then again,
auto import being your friend,

183
00:11:54.756 --> 00:11:59.086
it is worth it to make it a little
more clear what they are.

184
00:11:59.086 --> 00:12:03.299
What makes sense in one file
doesn't always make sense when

185
00:12:03.299 --> 00:12:07.355
you have the power of auto
import to pull stuff in for you.

186
00:12:07.355 --> 00:12:14.126
And getting the wrong one or just not
having a useful list there is not fun.

187
00:12:14.126 --> 00:12:20.033
Awesome, And so that's a full set of
actions in reducers I can use anywhere.

188
00:12:20.033 --> 00:12:23.214
I'm gonna pull them into my store,
and that's as simple as doing this.

189
00:12:27.006 --> 00:12:31.125
Boom, now I have full support.

190
00:12:31.125 --> 00:12:33.165
And my type was updated for

191
00:12:33.165 --> 00:12:38.374
me cuz it's based on the result of
getState, and we are good to go.

192
00:12:38.374 --> 00:12:44.100
We can go put it somewhere in our
UI to verify that reality exists.

193
00:12:44.100 --> 00:12:47.616
One thing that I should
do is I went through

194
00:12:47.616 --> 00:12:51.141
the work of pulling in this default data.

195
00:12:55.493 --> 00:12:59.704
And even though this is a JSON file,
if you've used other type systems,

196
00:12:59.704 --> 00:13:03.307
you know that, if it's not really
of that class or whatever.

197
00:13:03.307 --> 00:13:08.098
TypeScript goes, like, yo, it's got
everything that a user has in here

198
00:13:08.098 --> 00:13:11.211
cuz I literally just saved
it from the mock API.

199
00:13:11.211 --> 00:13:15.029
And so even though it's a JSON file,
even though it's just data,

200
00:13:15.029 --> 00:13:17.292
it fits the characteristics of a user.

201
00:13:17.292 --> 00:13:21.891
So it is fair game to be put into
the store, I don't have to think about it,

202
00:13:21.891 --> 00:13:23.463
everything just works.

203
00:13:23.463 --> 00:13:26.386
Everything is good, life is easy.

204
00:13:26.386 --> 00:13:31.671
All right, so in the users-list,
I got to put this in the UI, this is just

205
00:13:31.671 --> 00:13:37.243
a stupid hard coded thing in here,
useAppSelector, and that'll be state.

206
00:13:37.243 --> 00:13:42.345
And again, watch this,
cuz it makes me happy every time.

207
00:13:42.345 --> 00:13:45.716
Look, it knows that users exists, right?

208
00:13:45.716 --> 00:13:47.298
It knows when to pull in the entities.

209
00:13:52.094 --> 00:13:53.688
Now, it's happy, all right?

210
00:13:53.688 --> 00:13:57.564
This is actually not shown in the UI
originally cuz there was nothing to show.

211
00:13:57.564 --> 00:14:05.415
But look, it's almost like I knew that,
Except I didn't import it.

212
00:14:05.415 --> 00:14:07.060
Awesome, and we should see it on the page.

213
00:14:12.118 --> 00:14:14.015
There they are, right?

214
00:14:14.015 --> 00:14:17.885
So two things we wanna learn before we
go into the async stuff is I wanna learn

215
00:14:17.885 --> 00:14:20.473
how to make two of these
things talk to each other.

216
00:14:20.473 --> 00:14:26.484
The other thing I wanna learn is alluded
to how easy this stuff is to unit test.

217
00:14:26.484 --> 00:14:30.151
So let's spend a little bit time looking
at what testing looks like for a second.

218
00:14:30.151 --> 00:14:33.266
And then we'll look at how you have two
different models talk to each other.

219
00:14:33.266 --> 00:14:35.221
And then we'll start to look at some of,

220
00:14:35.221 --> 00:14:39.029
we're gonna focus mostly on just
the built-in subterranean Redux Toolkit.

221
00:14:39.029 --> 00:14:41.800
I'm gonna talk a little
bit about RTK query, but

222
00:14:41.800 --> 00:14:45.720
we're gonna focus mostly on
the Redux Toolkit part because, well,

223
00:14:45.720 --> 00:14:49.655
I'll talk about why when we get to it,
but we'll take a look at that.

224
00:14:49.655 --> 00:14:53.105
But first, let's talk about,
I'm gonna load up the task just so

225
00:14:53.105 --> 00:14:55.125
I have a UI that looks like something.

226
00:14:55.125 --> 00:14:59.568
And I'm gonna push this up,
and then two minutes later,

227
00:14:59.568 --> 00:15:03.837
we'll talk about unit testing reducers and
slicers.

228
00:15:03.837 --> 00:15:06.274
So let's go and add that in.

229
00:15:06.274 --> 00:15:11.684
And can I show you all something that
I just learned literally this morning?

230
00:15:14.494 --> 00:15:20.390
Unused imports, go away, and
it just removes all of them.

231
00:15:20.390 --> 00:15:23.686
But yeah, we've got that, and now we
want to just add the tasks in there.

232
00:15:23.686 --> 00:15:26.117
And that's the same thing I
did with that data just so

233
00:15:26.117 --> 00:15:28.722
I have something to show in
the UI that I had originally.

234
00:15:35.147 --> 00:15:38.709
Data.json, and
we'll pop that into my initialState.

235
00:15:43.339 --> 00:15:47.519
It's nice that I saw that error
from the red squiggly line.

236
00:15:47.519 --> 00:15:49.827
Awesome, so I've just loaded in that data.

237
00:15:49.827 --> 00:15:53.764
So I'm gonna push this up, and then we're
gonna switch gears a little bit to talking

238
00:15:53.764 --> 00:15:57.715
about unit testing and see some examples
there about some strategies around there.

239
00:15:57.715 --> 00:16:03.268
We'll talk about some strategies around
things that affect multiple reducers.

240
00:16:03.268 --> 00:16:07.639
And then like I said before, we'll talk
about how to deal with asynchronous

241
00:16:07.639 --> 00:16:09.840
actions in Redux very, very easily.

