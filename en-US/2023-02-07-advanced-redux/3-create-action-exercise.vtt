WEBVTT

1
00:00:00.000 --> 00:00:05.117
We'll take this

2
00:00:05.117 --> 00:00:09.872
initial code.

3
00:00:09.872 --> 00:00:11.988
I think I need to actually add
it to the app in this case,

4
00:00:11.988 --> 00:00:14.978
cuz I pulled it into this when I bought
it, because I'd like to put it in here,

5
00:00:14.978 --> 00:00:17.282
I'll bring it in, and
we'll push up a live coding branch.

6
00:00:17.282 --> 00:00:18.454
For the workshop is,

7
00:00:18.454 --> 00:00:22.637
see if you can kind of refactor the rest
of these and kind of get them in place.

8
00:00:22.637 --> 00:00:23.594
And we'll get a sense, and

9
00:00:23.594 --> 00:00:26.230
then we'll switch out the reducer
as a second thing as well.

10
00:00:26.230 --> 00:00:29.200
So let me just add that to that branch,
I'll push it up and drop it in the chat.

11
00:00:29.200 --> 00:00:32.977
Take a few minutes, try it out, and then
we'll refactor a little bit more together.

12
00:00:32.977 --> 00:00:35.338
And then,
we'll kind of see the component pieces and

13
00:00:35.338 --> 00:00:37.975
then we'll go back to these
kinds of larger abstractions.

14
00:00:42.177 --> 00:00:47.155
Awesome, all right, so to prove our point,
let's go ahead and let's refactor this

15
00:00:47.155 --> 00:00:51.529
a little bit with the actions, and
then we'll swap in the reducer as well.

16
00:00:51.529 --> 00:00:56.487
So what we can do here is, again,
the createAction, and why not, I'll repeat

17
00:00:56.487 --> 00:01:01.445
it one more time, is great because you
can use just anything you have right now,

18
00:01:01.445 --> 00:01:03.974
even the reducer we'll see in a second.

19
00:01:03.974 --> 00:01:05.906
You can use anything
that you have right now.

20
00:01:05.906 --> 00:01:09.174
So here we'll say that add amount,

21
00:01:11.376 --> 00:01:14.471
Third time's the charm in
spelling it is a number.

22
00:01:14.471 --> 00:01:20.807
So there's what I wrote before as well,
and that will return a payload,

23
00:01:22.653 --> 00:01:25.767
That is that amount.

24
00:01:30.186 --> 00:01:39.920
Cool, if we grab that for
a decrement as well, Keep that the same.

25
00:01:39.920 --> 00:01:41.781
Could you make an abstraction?

26
00:01:41.781 --> 00:01:45.301
Should you?
No, and then finally we'll do one more.

27
00:01:54.876 --> 00:01:57.603
And this one doesn't need anything,
so we give it no function.

28
00:01:57.603 --> 00:02:03.158
It will automatically hit
this type correctly, right?

29
00:02:03.158 --> 00:02:07.709
This idea of a payload that doesn't match,
right, cuz it's defined as undefined.

30
00:02:07.709 --> 00:02:10.629
I might get yelled at, I'm pretty
sure that I get away with it if it is

31
00:02:10.629 --> 00:02:13.415
explicitly undefined cuz that's
how JavaScript object work.

32
00:02:13.415 --> 00:02:16.913
But this type that had nothing to do, this
type isn't my hypothetical existing code

33
00:02:16.913 --> 00:02:19.888
base, I'm trying to just have better
tools and better abstractions.

34
00:02:19.888 --> 00:02:24.717
So that the next feature I work on is
less tedious than the one before, so

35
00:02:24.717 --> 00:02:26.259
I can impress my boss.

36
00:02:26.259 --> 00:02:29.418
If we have this in place,
we should be able to then just say,

37
00:02:36.260 --> 00:02:41.383
Wait, if I don't define these in
variables, they just don't exist.

38
00:02:44.569 --> 00:02:45.880
So, this is why you live code
in front of your friends.

39
00:02:50.797 --> 00:02:52.112
And then finally reset.

40
00:02:59.016 --> 00:03:00.300
And these are the action creators.

41
00:03:00.300 --> 00:03:03.717
These are ones if I call
these functions later,

42
00:03:03.717 --> 00:03:08.340
and I pass a number,
it will create the correct action, right?

43
00:03:08.340 --> 00:03:09.313
And that will just kind of work for me.

44
00:03:09.313 --> 00:03:10.138
Now we can use it,

45
00:03:10.138 --> 00:03:13.174
we'll show how to bind it to dispatch
as well if we really need to.

46
00:03:14.701 --> 00:03:17.618
But cool, so we'll have that in place,
and now I can just swap these out.

47
00:03:17.618 --> 00:03:23.134
I no longer have to do that entire
ceremony as I mentioned earlier,

48
00:03:23.134 --> 00:03:29.115
of making the action type,
Storing them in Constant,

49
00:03:29.115 --> 00:03:33.690
and then making the action creators
by hand, that is just done for me.

50
00:03:33.690 --> 00:03:41.187
And as I alluded to earlier, right,
if I'm using type script, if I try to do,

51
00:03:45.902 --> 00:03:49.530
Even as I hit the dot, you'll see
payload is not an option on this one.

52
00:03:49.530 --> 00:03:52.020
But if I went up here,
payload clearly works.

53
00:03:52.020 --> 00:03:54.747
I'm not getting a type script error,
automatically typed,

54
00:03:54.747 --> 00:03:56.012
automatically ready to go.

55
00:03:56.012 --> 00:04:00.592
All the boiler plate gone through
one simple function that worked with

56
00:04:00.592 --> 00:04:03.941
user reducer,
works with vanilla Redux, right?

57
00:04:03.941 --> 00:04:08.726
So even if you only grab that piece
of the buffet and good to go,

58
00:04:08.726 --> 00:04:13.620
awesome, more productive,
ready, rock and roll, Philip.

59
00:04:13.620 --> 00:04:18.030
&gt;&gt; Do these actions it's creating
have a success and a fail and

60
00:04:18.030 --> 00:04:23.146
all that stuff, or are we gonna do that-
&gt;&gt; When we do the asynchronous ones,

61
00:04:23.146 --> 00:04:24.677
we will actually, yes.

62
00:04:24.677 --> 00:04:25.671
These don't.

63
00:04:25.671 --> 00:04:26.595
[LAUGH]
&gt;&gt; Okay.

64
00:04:26.595 --> 00:04:27.599
&gt;&gt; These do not, right?

65
00:04:27.599 --> 00:04:31.200
Cuz these are just asynchronous,
hey, this thing happened, right?

66
00:04:31.200 --> 00:04:36.839
But all of the ceremony around thunks and
promises resolving, and pending and

67
00:04:36.839 --> 00:04:42.221
failing, there are also abstractions for
that, and it's all wired up and

68
00:04:42.221 --> 00:04:46.680
ready to go in a way that you can
use just out of the box, right?

69
00:04:46.680 --> 00:04:48.690
And so we will see that, absolutely.

70
00:04:48.690 --> 00:04:51.040
These are just standard,
like nothing happened.

71
00:04:51.040 --> 00:04:56.410
I'm just telling you, reducer deal with
it or don't deal with it, as well.

72
00:04:56.410 --> 00:04:58.670
So we're gonna have that in place too.

73
00:04:58.670 --> 00:05:01.808
And like I said, any of these pieces
that you like, it's like, for

74
00:05:01.808 --> 00:05:04.860
everything I'm showing to you,
you just take what you like.

75
00:05:04.860 --> 00:05:07.640
You take the little pieces that work for
you and work in your code base.

76
00:05:07.640 --> 00:05:12.093
You take the free TypeScript support,
you take the convenience, right,

77
00:05:12.093 --> 00:05:14.280
you leave what you don't want.

78
00:05:14.280 --> 00:05:15.410
It's totally cool with me.

79
00:05:15.410 --> 00:05:18.460
I won't feel bad about it.

80
00:05:18.460 --> 00:05:22.891
Yeah, and so now we've eliminated a whole
bunch of that kind of common complaining

81
00:05:22.891 --> 00:05:27.790
about React, which to be clear, I have
participated in the complaining, right?

82
00:05:27.790 --> 00:05:30.190
And that has just taken care of it for us.

83
00:05:30.190 --> 00:05:32.308
Now one thing that we can do, and

84
00:05:32.308 --> 00:05:37.960
this is a little bit of just a TypeScript
hack which is like the return types here.

85
00:05:37.960 --> 00:05:42.176
All these functions theoretically
we could use, right?

86
00:05:42.176 --> 00:05:45.498
So we could take it and say,

87
00:05:45.498 --> 00:05:49.836
we wanna get rid of this piece here.

88
00:05:51.956 --> 00:05:54.906
I'm just gonna move it down underneath.

89
00:05:56.883 --> 00:06:00.298
We could say, either,

90
00:06:02.306 --> 00:06:05.782
Type of, either one of these will work.

91
00:06:10.159 --> 00:06:14.085
Like that, if you look at this one,
you'll see that it's now automatically got

92
00:06:14.085 --> 00:06:17.395
the correct type, or you could do
the return value of the function.

93
00:06:17.395 --> 00:06:20.141
You could do, you can pull it out.

94
00:06:20.141 --> 00:06:24.312
Actually, I would recommend
actually this instead.

95
00:06:24.312 --> 00:06:26.284
But the other one will work
if that's what you need.

96
00:06:28.758 --> 00:06:30.875
Type of return value.

97
00:06:40.503 --> 00:06:41.488
Return type.

98
00:06:51.517 --> 00:06:54.863
Return type, during the function
returned of an argument,

99
00:06:54.863 --> 00:06:57.035
what's that question mark at the end?

100
00:06:57.035 --> 00:06:58.798
That was just me having a typo.

101
00:06:58.798 --> 00:06:59.472
There we go.

102
00:06:59.472 --> 00:07:04.411
Typo gone, and if you look at the counter
action, we will get the same union by just

103
00:07:04.411 --> 00:07:07.850
grabbing the return types of
these created actions, and

104
00:07:07.850 --> 00:07:10.410
will automatically as we add things.

105
00:07:10.410 --> 00:07:14.036
Now there are other ways, if we use some
of those slices, we'll get all this for

106
00:07:14.036 --> 00:07:17.665
free as well, but this is some of how this
is working on our behalf in case you're

107
00:07:17.665 --> 00:07:18.994
like, I don't like magic.

108
00:07:18.994 --> 00:07:23.714
Well, I'm here to dispell the magic for
you, and we say Return type,

109
00:07:23.714 --> 00:07:25.080
type of decrement.

110
00:07:27.183 --> 00:07:30.631
And then we can say, for the same as,

111
00:07:32.818 --> 00:07:36.367
Could you write a very fancy type that
just took a list of them and did this?

112
00:07:36.367 --> 00:07:37.700
You absolutely could.

113
00:07:37.700 --> 00:07:39.790
Could you put them in array?

114
00:07:39.790 --> 00:07:41.109
Yes, you can do a bunch of stuff.

115
00:07:41.109 --> 00:07:44.390
I'm just here to show you that you will
get the full automatic type support for

116
00:07:44.390 --> 00:07:47.035
the counteraction,
just like you manually wrote it before.

117
00:07:51.794 --> 00:07:56.285
Cool, now you will get the same, only
passing the arguments that work, so on and

118
00:07:56.285 --> 00:07:56.894
so forth.

119
00:07:56.894 --> 00:07:59.160
This is the same type that we had before.

120
00:07:59.160 --> 00:08:01.870
Payload undefined, number,
number for the other two.

121
00:08:01.870 --> 00:08:02.800
Boom, done.

122
00:08:02.800 --> 00:08:07.008
All convenient, no guessing, no manually
having to try to figure it out yourself.

123
00:08:07.008 --> 00:08:09.205
Based on the code that you defined,

124
00:08:09.205 --> 00:08:12.805
you've declaratively also
set up all the types, right?

125
00:08:12.805 --> 00:08:17.100
And I will make this point once again
cuz you all brought it up, you get for

126
00:08:17.100 --> 00:08:18.861
fun at least autocomplete and

127
00:08:18.861 --> 00:08:23.108
helpful hover hints in VS code if
you're in JavaScript, so, why not?

128
00:08:23.108 --> 00:08:24.300
Until we get all of that in place.

