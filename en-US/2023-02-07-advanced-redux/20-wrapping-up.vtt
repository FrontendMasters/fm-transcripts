WEBVTT

1
00:00:00.500 --> 00:00:04.413
That is the kind of large part of the,
these are the things,

2
00:00:04.413 --> 00:00:07.388
the kind of the more
between the transcript,

3
00:00:07.388 --> 00:00:12.497
between some of these two lanes,
between some of the practices around that.

4
00:00:12.497 --> 00:00:18.031
Things that you will encounter kind of
beyond the basics as you go to then put in

5
00:00:18.031 --> 00:00:24.260
tests, put in TypeScripts, start putting
some of the fetching pieces, right?

6
00:00:24.260 --> 00:00:29.410
What you choose to do will likely
impact an existing application, right?

7
00:00:29.410 --> 00:00:34.132
And how you pull these things together
is that, if you're doing NPM and

8
00:00:34.132 --> 00:00:38.730
it maybe you can do the some of
the basic stuff a lot of times.

9
00:00:38.730 --> 00:00:43.265
Stuff that you can take piecemeal and
just grab that has that

10
00:00:43.265 --> 00:00:47.797
reliability of immediate typing,
easy to test, I think,

11
00:00:47.797 --> 00:00:55.030
becomes the pieces of infrastructure that
you can more reasonably rely on over time.

12
00:00:55.030 --> 00:01:00.126
I think it's a trope, but
I think as I've done this longer and

13
00:01:00.126 --> 00:01:04.340
longer, when I get what
about this shiny new tool,

14
00:01:04.340 --> 00:01:08.473
I'm kind of like,
I don't have it in me, right?

15
00:01:08.473 --> 00:01:11.110
I need something that's simple,
reliable, easy to test.

16
00:01:11.110 --> 00:01:13.620
But then when I do need to
do kind of advanced things,

17
00:01:13.620 --> 00:01:15.850
has an ecosystem ready to plug it in.

18
00:01:15.850 --> 00:01:20.240
And those, I think, become much more
sustainable patterns over time.

19
00:01:20.240 --> 00:01:23.005
&gt;&gt; Is it rude to just go
into work on Monday and

20
00:01:23.005 --> 00:01:28.310
just start using Redux Toolkit on my own
without referencing or asking my team?

21
00:01:28.310 --> 00:01:29.588
&gt;&gt; All right.
&gt;&gt; And TypeScript and

22
00:01:29.588 --> 00:01:30.716
all these other things.

23
00:01:30.716 --> 00:01:32.002
[LAUGH]
&gt;&gt; [COUGH] All right,

24
00:01:32.002 --> 00:01:33.747
let's peel apart parts of that question.

25
00:01:33.747 --> 00:01:36.280
&gt;&gt; [LAUGH] Is it rude, first of all?

26
00:01:36.280 --> 00:01:38.600
&gt;&gt; That's the question we're gonna answer.

27
00:01:38.600 --> 00:01:41.060
I have the secret advantage
of being the boss.

28
00:01:41.060 --> 00:01:46.039
So I have to still tread
lightly because nobody likes

29
00:01:46.039 --> 00:01:49.102
[LAUGH] the person who then goes.

30
00:01:49.102 --> 00:01:52.432
Yeah, they have to hear me talk cuz I can
say stuff like that towards the end of

31
00:01:52.432 --> 00:01:54.490
the workshop cuz there's no way.

32
00:01:54.490 --> 00:01:55.521
So I think it depends.

33
00:01:55.521 --> 00:02:00.327
So to the point that we made at
the beginning of the workshop,

34
00:02:00.327 --> 00:02:04.098
stuff like the create action,
create reduce or

35
00:02:04.098 --> 00:02:07.604
even create slice fit
in an existing Redux.

36
00:02:07.604 --> 00:02:10.460
There's no, we have to change everything.

37
00:02:10.460 --> 00:02:12.088
TypeScript, you're gonna get yourself,

38
00:02:12.088 --> 00:02:14.340
you're gonna have to sit down
have a conversation, right?

39
00:02:14.340 --> 00:02:20.299
Because the way it worked for us,
which is I remember it very clearly,

40
00:02:20.299 --> 00:02:25.260
which was like we were starting this,
this was 2018.

41
00:02:25.260 --> 00:02:31.700
And we were gonna start this rewrite cuz
I think I've told this story before.

42
00:02:31.700 --> 00:02:34.980
It was an application that was
originally Ruby on Rails app.

43
00:02:34.980 --> 00:02:38.660
Then it was a Ruby on Rails app
with a CoffeeScript and jQuery hat.

44
00:02:39.750 --> 00:02:44.240
Then they put a React hat on top of
the CoffeeScript and jQuery hat.

45
00:02:44.240 --> 00:02:47.168
And then they were gonna
move the back end to AWS and

46
00:02:47.168 --> 00:02:50.480
rip out the Ruby on Rails
that was underneath, right?

47
00:02:50.480 --> 00:02:56.700
So I say that because I am not the person
who cavalierly goes into the rewrite.

48
00:02:56.700 --> 00:03:00.460
Having done now two of them in my life,
I would like to never do it again.

49
00:03:00.460 --> 00:03:04.555
But that was the first, so I've made
the mistake a second time since then,

50
00:03:04.555 --> 00:03:05.150
but yeah.

51
00:03:06.200 --> 00:03:09.735
So there was this, okay,
we have to, we're basically there,

52
00:03:09.735 --> 00:03:11.440
take out the foundation of it.

53
00:03:11.440 --> 00:03:13.050
We're gonna have to do something here.

54
00:03:13.050 --> 00:03:15.232
And it was definitely one of those.

55
00:03:15.232 --> 00:03:20.083
We started a small team,
was just kind of someone's got to

56
00:03:20.083 --> 00:03:25.330
keep the lights on in the old thing,
set trail on the new thing.

57
00:03:25.330 --> 00:03:28.720
It was like,
we should do it in TypeScript.

58
00:03:28.720 --> 00:03:30.590
Nah, the team's gonna revolt.

59
00:03:30.590 --> 00:03:34.555
And then at one point, we just kinda
floated the idea and then everyone's like,

60
00:03:34.555 --> 00:03:37.480
why aren't you all doing it in TypeScript?

61
00:03:37.480 --> 00:03:41.180
And we're like,
we thought you wouldn't let us, right?

62
00:03:41.180 --> 00:03:43.258
So you might get lucky in that sense, but

63
00:03:43.258 --> 00:03:45.270
like-
&gt;&gt; I know that's not gonna happen.

64
00:03:45.270 --> 00:03:48.210
&gt;&gt; I think it's also easier in 2022,
right?

65
00:03:48.210 --> 00:03:49.140
&gt;&gt; Another question.

66
00:03:49.140 --> 00:03:53.543
So it seems straightforward with Redux
toolkit where I can just start doing it

67
00:03:53.543 --> 00:03:57.870
in Files moving forward and we can
slowly go back and refactor old ones.

68
00:03:57.870 --> 00:04:00.153
But with TypeScript,
is it something you can just like, okay,

69
00:04:00.153 --> 00:04:01.692
I have this new component I'm gonna make.

70
00:04:01.692 --> 00:04:05.430
I'm gonna do TypeScript on this even
though nothing else is TypeScript yet.

71
00:04:05.430 --> 00:04:08.480
&gt;&gt; Yes-ish, when we talked about
in the React performance course,

72
00:04:08.480 --> 00:04:11.970
a lot of those I didn't pure JavaScript
simply to make them accessible.

73
00:04:11.970 --> 00:04:13.980
I didn't wanna have
a prerequisite on TypeScript.

74
00:04:15.180 --> 00:04:17.627
All of the utility functions and

75
00:04:17.627 --> 00:04:22.790
all of the reducers that I was just
using to manage the state, a lot of

76
00:04:22.790 --> 00:04:28.790
those were all in TypeScript being
imported into JavaScript files, right?

77
00:04:28.790 --> 00:04:31.070
So yeah, it takes a little
tweaking in the configuration.

78
00:04:31.070 --> 00:04:35.250
And stuff along those lines,
but you can integrate them.

79
00:04:35.250 --> 00:04:39.270
Now backwards, they all get typed as any.

80
00:04:39.270 --> 00:04:39.954
&gt;&gt; The other way around.

81
00:04:39.954 --> 00:04:44.068
&gt;&gt; Yeah, they'll get types and you can
pull JavaScript files, cuz obviously,

82
00:04:44.068 --> 00:04:48.840
as we know, the JavaScript ecosystem is
way bigger than the TypeScript ecosystem.

83
00:04:48.840 --> 00:04:53.824
You can pull them in, you just then
have to, in one of those definition,

84
00:04:53.824 --> 00:04:58.320
the d.ts files, you then have to go and
start declaring types for

85
00:04:58.320 --> 00:05:01.210
what it should be based on stuff, right?

86
00:05:01.210 --> 00:05:05.262
And so you can integrate them and
to your question of,

87
00:05:05.262 --> 00:05:08.690
what is the sell on some of these things?

88
00:05:08.690 --> 00:05:12.384
Some of this is dealing with the fear,
uncertainty and

89
00:05:12.384 --> 00:05:17.284
doubt about it, which is the store,
you've always theoretically been

90
00:05:17.284 --> 00:05:21.080
able to slowly migrate from
JavaScript to TypeScript.

91
00:05:21.080 --> 00:05:27.467
However, the 2018 version of that story,
I guess, it was technically true.

92
00:05:27.467 --> 00:05:31.564
The 2022 story is a lot better, but
sometimes you always have to deal with,

93
00:05:31.564 --> 00:05:34.760
well, I tried TypeScript once and
I didn't like it, right?

94
00:05:34.760 --> 00:05:38.220
And yeah,
I tried Flow before I tried TypeScript.

95
00:05:38.220 --> 00:05:39.789
And I was like, nah, not for me, right?

96
00:05:39.789 --> 00:05:44.785
Sometimes that learning curve is tricky,
but I think the benefits.

97
00:05:44.785 --> 00:05:49.037
I am at the point now where it's not using
TypeScript, or even though I use it,

98
00:05:49.037 --> 00:05:51.300
I will reach a Redux very quickly as well.

99
00:05:51.300 --> 00:05:55.592
Because the reliability
especially with Redux toolkit,

100
00:05:55.592 --> 00:06:00.760
the reliability I'm getting those
types and just the as I'm coding,

101
00:06:00.760 --> 00:06:05.664
it's every time I go back to just
not having either Vanilla Redux or

102
00:06:05.664 --> 00:06:08.222
and or because the types, right?

103
00:06:08.222 --> 00:06:12.678
It's very nerve-wracking, right, and
I think once you see the benefit,

104
00:06:12.678 --> 00:06:16.017
but yes, how do we to tell your team,
hey, next sprint,

105
00:06:16.017 --> 00:06:20.060
what if we were slower cuz we
were learning a new thing?

106
00:06:20.060 --> 00:06:21.400
It is tricky, right?

107
00:06:21.400 --> 00:06:24.160
I think it's one of those things that
has to be done with a lot of empathy.

108
00:06:25.750 --> 00:06:27.390
So yes, you will annoy them.

109
00:06:27.390 --> 00:06:31.809
It will be rude, but
maybe it's good, yeah, yeah.

110
00:06:31.809 --> 00:06:35.654
&gt;&gt; Yeah, if I recall correctly, the lazy
version of the query will let you have

111
00:06:35.654 --> 00:06:37.954
control at exactly what
point you can fetch.

112
00:06:37.954 --> 00:06:39.450
&gt;&gt; Yeah, when you choose to kick it off.

113
00:06:39.450 --> 00:06:42.600
So you can have the hook with lazy,
you choose when you want to invoke it.

114
00:06:43.880 --> 00:06:45.000
That one is just gonna fetch the data.

115
00:06:46.010 --> 00:06:48.350
&gt;&gt; And that happens.

116
00:06:48.350 --> 00:06:53.294
So effectively,
it's equivalent to started rendering

117
00:06:53.294 --> 00:06:56.700
the same fetch, or how does that work?

118
00:06:56.700 --> 00:07:01.478
&gt;&gt; I have not, so I have dug into the
colorful SWR, which doesn't use effect,

119
00:07:01.478 --> 00:07:02.010
right?

120
00:07:02.010 --> 00:07:05.798
They do a trick with a ref.current and
then to concurrent,

121
00:07:05.798 --> 00:07:08.920
get it at a different point in the cycle,
right?

122
00:07:08.920 --> 00:07:11.390
And then use that ref.current to make
sure they don't repeatedly do it.

123
00:07:11.390 --> 00:07:15.530
So they do it initially, and the reason
we use use effect is that array,

124
00:07:15.530 --> 00:07:20.010
make sure it doesn't happen again
like the empty dependency array.

125
00:07:20.010 --> 00:07:24.210
A ref has a current that is
persisted through re renders.

126
00:07:24.210 --> 00:07:29.280
So once you set that from false to true or
whatever, you have access to it again.

127
00:07:29.280 --> 00:07:32.160
My assumption is that is what they use,
right?

128
00:07:32.160 --> 00:07:33.639
I have not dug into this code base,

129
00:07:33.639 --> 00:07:37.560
I have dug into some of the other ones to
figure out, what you're doing in there?

130
00:07:37.560 --> 00:07:39.825
And that is the methodology
that those use and

131
00:07:39.825 --> 00:07:43.885
that is what I'm going to assume that
they're doing but I don't actually know.

132
00:07:43.885 --> 00:07:47.263
The other thing could be actually,
if I was gonna make assumptions,

133
00:07:47.263 --> 00:07:48.672
the store is already going.

134
00:07:48.672 --> 00:07:52.210
The store is completely external and
not relying on a hook.

135
00:07:52.210 --> 00:07:54.480
There's probably, we saw it, hold on.

136
00:07:55.670 --> 00:07:56.480
Let's go back over.

137
00:07:56.480 --> 00:08:00.479
Here's my hypothesis,
because that's what you wanted, right?

138
00:08:00.479 --> 00:08:07.210
[COUGH] I'll start this up again.

139
00:08:07.210 --> 00:08:14.019
My suspicion is that around the time that
an event got fired, [CROSSTALK] yeah.

140
00:08:14.019 --> 00:08:17.046
&gt;&gt; Yeah, because there is a timestamp
of zero difference, right?

141
00:08:17.046 --> 00:08:23.132
&gt;&gt; Yeah, so it's probably, they probably
can fire an action on the mountain, too.

142
00:08:23.132 --> 00:08:27.515
Since the nice thing that Redux gets that
hooks doesn't get you is it is completely

143
00:08:27.515 --> 00:08:31.274
pulled away from the reaction component
cycle and not beholden to it.

144
00:08:31.274 --> 00:08:35.138
Anything involving use the fact, anything
involving the component lifecycle,

145
00:08:35.138 --> 00:08:36.319
it can dispatch events.

146
00:08:36.319 --> 00:08:39.843
It lives outside of the component
lifecycle and do whatever it wants.

147
00:08:42.746 --> 00:08:46.079
&gt;&gt; But I think you're right,
judging from the timestamps,

148
00:08:46.079 --> 00:08:50.620
there is zero delay between when
middleware registers and depending.

149
00:08:50.620 --> 00:08:54.139
&gt;&gt; This was the application component,
so we're kind of cheating to write.

150
00:08:54.139 --> 00:08:59.440
It is the very first component
that mounts in the application.

151
00:08:59.440 --> 00:09:00.850
&gt;&gt; I know.

152
00:09:00.850 --> 00:09:06.087
&gt;&gt; But likely, I'm gonna guess that
the hook fires that basically immediately.

153
00:09:06.087 --> 00:09:10.713
And it doesn't need to use use
effect because it's not a component,

154
00:09:10.713 --> 00:09:13.650
it's not beholden to the re renders.

155
00:09:13.650 --> 00:09:15.627
Awesome, thank you all so much.

156
00:09:15.627 --> 00:09:16.901
&gt;&gt; Thank you.

157
00:09:16.901 --> 00:09:20.806
&gt;&gt; [APPLAUSE]

