WEBVTT

1
00:00:00.320 --> 00:00:04.310
Let's pull in the use selector
cuz we're gonna come to

2
00:00:04.310 --> 00:00:08.831
our next problem that again,
I have an elegant solution for.

3
00:00:08.831 --> 00:00:13.195
But first, let's suffer a little bit and
we'll take a look at it, cool.

4
00:00:13.195 --> 00:00:14.645
So your question was like, so

5
00:00:14.645 --> 00:00:17.374
what's this use selector thing
that I can put in there?

6
00:00:17.374 --> 00:00:19.523
That's a great,
why don't you ask me that question again?

7
00:00:19.523 --> 00:00:21.517
[LAUGH]
&gt;&gt; Yeah, so I have to save the crops so

8
00:00:21.517 --> 00:00:23.146
I can replace with use selector, right?

9
00:00:23.146 --> 00:00:25.370
&gt;&gt; You can, we should do that.

10
00:00:25.370 --> 00:00:27.820
Absolutely, let's try it out.

11
00:00:29.310 --> 00:00:34.500
So here, I'm pulling the tasks from that
contacts API that had sitting around.

12
00:00:34.500 --> 00:00:36.472
So we've got use selector.

13
00:00:39.246 --> 00:00:44.246
And this, you can imagine what use
selector takes as an argument, and

14
00:00:44.246 --> 00:00:46.044
why it wants one from me.

15
00:00:46.044 --> 00:00:50.228
&gt;&gt; [INAUDIBLE]
&gt;&gt; No, this isn't React Redux.

16
00:00:50.228 --> 00:00:54.848
But it is,
they did a complete rewrite effectively,

17
00:00:54.848 --> 00:01:00.699
reactory docs had a major rewrite,
I wanna say two years ago-ish,

18
00:01:00.699 --> 00:01:05.319
where it was completely
written in TypeScript and for

19
00:01:05.319 --> 00:01:09.034
supporting all these hooks out of the box.

20
00:01:09.034 --> 00:01:12.255
So yeah, when hooks dropped,
there wasn't necessarily supporting,

21
00:01:12.255 --> 00:01:14.439
there had to be a lot of rethinking and
what to do.

22
00:01:14.439 --> 00:01:17.355
And now we do have this
little thing there,

23
00:01:17.355 --> 00:01:22.590
they're pretty nice in the sense as
well and so welcome to the problem.

24
00:01:22.590 --> 00:01:25.174
So the normal way of just writing
JavaScript is you do like,

25
00:01:25.174 --> 00:01:26.580
this is your entire state tree.

26
00:01:26.580 --> 00:01:28.490
This is not unique to that slice.

27
00:01:28.490 --> 00:01:29.700
This is not anything.

28
00:01:29.700 --> 00:01:31.250
This is the entire state tree.

29
00:01:31.250 --> 00:01:35.260
And you would normally, in map dispatch
props, you'd write a selector like effect.

30
00:01:35.260 --> 00:01:37.738
You take the thing, you'd pull
the props you want, get them ready for

31
00:01:37.738 --> 00:01:39.670
the inside that higher order component for
whatever,

32
00:01:39.670 --> 00:01:42.220
the presentational component was,
great, awesome.

33
00:01:42.220 --> 00:01:44.460
So here we've got state.tasks.

34
00:01:45.900 --> 00:01:49.646
This doesn't feel like I
have auto complete, right?

35
00:01:49.646 --> 00:01:51.713
And I feel like I got a red squiggly line.

36
00:01:54.070 --> 00:01:57.258
And it's upset with me.

37
00:01:57.258 --> 00:01:58.740
It's like state is a type unknown.

38
00:02:01.360 --> 00:02:05.466
Cuz this selector doesn't, I mean,
it came from, to your point,

39
00:02:05.466 --> 00:02:08.670
came from a different library, right?

40
00:02:08.670 --> 00:02:09.499
It doesn't know.

41
00:02:09.499 --> 00:02:11.830
I guess, it has some,
yeah, it doesn't know.

42
00:02:11.830 --> 00:02:14.161
I'm like, could it no but
if it could know,

43
00:02:14.161 --> 00:02:16.440
they probably would have done it, right?

44
00:02:16.440 --> 00:02:21.750
If you rewrite an entire library just for
TypeScript, so what do we do?

45
00:02:21.750 --> 00:02:29.960
You could say that this is the type
of the entire state somewhere.

46
00:02:29.960 --> 00:02:31.187
You could be like,

47
00:02:31.187 --> 00:02:36.810
we know what the shape of our state tree
is right now cuz it's simple and small.

48
00:02:36.810 --> 00:02:41.850
So if I look at useSelector,
unknown is what that state is most likely.

49
00:02:41.850 --> 00:02:46.691
So I could say that it's got tasks, and

50
00:02:46.691 --> 00:02:53.178
then tasks have entities,
and that's an array.

51
00:02:53.178 --> 00:02:55.799
Look, everything's happy, right?

52
00:02:55.799 --> 00:03:00.078
That seems cool, I guess.

53
00:03:00.078 --> 00:03:03.954
It didn't even get it
totally right there but,

54
00:03:03.954 --> 00:03:06.784
we have to say the state is that shape.

55
00:03:06.784 --> 00:03:08.518
So yeah, that's fun.

56
00:03:08.518 --> 00:03:12.457
Anyway, you probably don't wanna do this.

57
00:03:12.457 --> 00:03:15.554
We can say it right here
as well defining this.

58
00:03:15.554 --> 00:03:17.339
I'm building up for the fact that
we don't have to live like this.

59
00:03:21.270 --> 00:03:25.579
Cool, it's confused about everything.

60
00:03:25.579 --> 00:03:27.180
Cuz it just thinks it's
an array of nothing, so

61
00:03:27.180 --> 00:03:28.900
I gotta say it's an array of tasks.

62
00:03:28.900 --> 00:03:31.010
Yeah, it's your first thing,
it's like, you know what I'll do?

63
00:03:31.010 --> 00:03:34.455
I'll make a type, I'll put it in my global
d.ts, and it's the shape of my state.

64
00:03:34.455 --> 00:03:37.010
You could do that, you could.

65
00:03:37.010 --> 00:03:38.280
And guess what?

66
00:03:38.280 --> 00:03:42.214
Every time you add a new reducer or
change the shape of your state, or

67
00:03:42.214 --> 00:03:44.768
just even add a property to a thing,
right,

68
00:03:44.768 --> 00:03:49.000
you're going to have to update that
in some way, shape or form, right?

69
00:03:49.000 --> 00:03:53.060
And so then you start to create
a House of Cards of other types.

70
00:03:53.060 --> 00:03:55.106
And that doesn't go super well, right?

71
00:03:55.106 --> 00:03:59.878
And so if only there was a way to
generate a type based on whatever

72
00:03:59.878 --> 00:04:03.403
the end result that came
out of your store was.

73
00:04:03.403 --> 00:04:08.242
By definition, we know the TypeScript
automatically can derive the types

74
00:04:08.242 --> 00:04:10.870
of return values of functions, right?

75
00:04:11.940 --> 00:04:16.581
Under the hood, Redux has the store object
that it gives you back has a dispatch

76
00:04:16.581 --> 00:04:19.330
method, you can guess what that does.

77
00:04:19.330 --> 00:04:20.510
Also, there's one called getState.

78
00:04:21.620 --> 00:04:23.180
You can roughly guess what that one does,
right?

79
00:04:23.180 --> 00:04:27.820
They got good names and so if there
was only a way that we could do that,

80
00:04:27.820 --> 00:04:28.870
well, we can.

81
00:04:28.870 --> 00:04:31.590
&gt;&gt; The return type of getState?

82
00:04:31.590 --> 00:04:34.481
&gt;&gt; Yep, perfect, that was a good segue.

83
00:04:34.481 --> 00:04:37.024
[LAUGH] I thought the question I was like,
yeah.

84
00:04:37.024 --> 00:04:38.615
I set it up, you got it, perfect.

85
00:04:38.615 --> 00:04:42.049
[COUGH] So let's look at that inside
store where I have this ready to go,

86
00:04:42.049 --> 00:04:44.740
and this is why I had
this out of its own file.

87
00:04:44.740 --> 00:04:51.797
And so here I can say something type.

88
00:04:51.797 --> 00:04:52.808
You can call it RouteState.

89
00:04:52.808 --> 00:04:54.050
I like to call it ApplicationState.

90
00:04:54.050 --> 00:04:56.730
I've seen a call RouteState before,
that works, too.

91
00:04:56.730 --> 00:05:01.518
And we can say that this is the same
method that we did with those actions that

92
00:05:01.518 --> 00:05:06.382
we're making ourselves earlier with
create action to get the return type of

93
00:05:06.382 --> 00:05:08.030
a function.

94
00:05:08.030 --> 00:05:16.075
We say return type and we say, Cool.

95
00:05:19.516 --> 00:05:20.303
Store.

96
00:05:24.459 --> 00:05:25.947
And look it's my issue.

97
00:05:25.947 --> 00:05:27.335
&gt;&gt; Do you need to invoke it or no?

98
00:05:27.335 --> 00:05:28.920
&gt;&gt; I don't need to invoke it.

99
00:05:28.920 --> 00:05:33.150
Perfect, I'm so used to calling
the function, all right, cool.

100
00:05:33.150 --> 00:05:36.290
So now, look,
that is the shape of our state.

101
00:05:37.740 --> 00:05:43.030
So it could be tempting to go ahead and
do this.

102
00:05:43.030 --> 00:05:44.596
And the temptation is good, but

103
00:05:44.596 --> 00:05:48.490
you can't put it in a global file because
it does need this JavaScript, right?

104
00:05:48.490 --> 00:05:49.930
It's not something you're just defining.

105
00:05:49.930 --> 00:05:51.969
If you define it yourself and
tried to keep it up to date manually,

106
00:05:51.969 --> 00:05:53.110
you can totally do that.

107
00:05:53.110 --> 00:05:56.130
But here,
it is a thing that we have to export.

108
00:05:56.130 --> 00:05:59.920
So we can go back into
the tasks list at this point.

109
00:06:01.990 --> 00:06:09.490
And we could say that, actually,
This is the ApplicationState.

110
00:06:09.490 --> 00:06:11.970
The red squiggles are gone.

111
00:06:11.970 --> 00:06:13.940
Everything is happy, life goes on.

112
00:06:15.130 --> 00:06:18.855
Welcome to the world where you have to
import this now every time you also import

113
00:06:18.855 --> 00:06:19.650
your selector.

114
00:06:21.690 --> 00:06:23.560
No, I don't want to live like this either.

115
00:06:23.560 --> 00:06:24.850
No, I'm not doing it.

116
00:06:24.850 --> 00:06:25.350
You can't make me.

