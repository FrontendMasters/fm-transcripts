WEBVTT

1
00:00:00.260 --> 00:00:05.710
The other kind of piece that we
can use is create Action Sibling.

2
00:00:05.710 --> 00:00:08.900
So now we're going to talk
about create Reducer.

3
00:00:08.900 --> 00:00:12.593
Which is if you saw on that slice before,
how I just had the properties on that

4
00:00:12.593 --> 00:00:17.230
slice, and you want to just pull that
piece as well, you can have that too.

5
00:00:17.230 --> 00:00:20.720
It's all yours and mix and
match whatever you want.

6
00:00:20.720 --> 00:00:22.729
Regular actions are working
to create reducer,

7
00:00:22.729 --> 00:00:25.380
create actions will work
with a regular reducer.

8
00:00:25.380 --> 00:00:28.170
It all can work together for you.

9
00:00:28.170 --> 00:00:30.830
So, what would it look like if I just
want to make a brand new reducer?

10
00:00:33.150 --> 00:00:35.097
So we've got this other idea of.

11
00:00:38.632 --> 00:00:41.390
Create reducer.

12
00:00:41.390 --> 00:00:42.280
I believe I pulled that in.

13
00:00:42.280 --> 00:00:45.400
Yep, go create reducer and
we'll just say like count reducer.

14
00:00:45.400 --> 00:00:47.310
So it's not the same counter reducer.

15
00:00:50.250 --> 00:00:56.650
Some it's a rare time where the typo is
a better choice than what I said out loud.

16
00:00:56.650 --> 00:00:58.150
So we'll go with it.

17
00:00:58.150 --> 00:01:02.196
And if you look immediately like it takes
some of the things that we should have

18
00:01:02.196 --> 00:01:06.429
seen from that slice that we saw earlier
because that again, like we're pulling

19
00:01:06.429 --> 00:01:10.060
apart, a slice to figure out what
all the component pieces are here.

20
00:01:12.340 --> 00:01:13.070
And so we've got this.

21
00:01:13.070 --> 00:01:15.770
It takes some kind of initial
state if we look at it.

22
00:01:15.770 --> 00:01:17.090
And these are properties on an object.

23
00:01:17.090 --> 00:01:20.883
So before you just saw me kind of use
that shorthand in JavaScript, but

24
00:01:20.883 --> 00:01:22.378
I could say initial state.

25
00:01:25.163 --> 00:01:30.428
And it's still angry with me because it's
like you need to give me a few more things

26
00:01:30.428 --> 00:01:35.808
here and so count reducer as well and

27
00:01:35.808 --> 00:01:40.611
we need to we give it this function

28
00:01:43.609 --> 00:01:48.133
This function is actually it's
actually just an argument for

29
00:01:48.133 --> 00:01:50.570
the initial state here, sorry.

30
00:01:50.570 --> 00:01:52.750
This function is a little bit interesting.

31
00:01:52.750 --> 00:01:54.270
It's a function that takes
this idea of a builder.

32
00:01:56.480 --> 00:01:59.050
&gt;&gt; So
the first argument is always the reducer.

33
00:01:59.050 --> 00:02:00.740
&gt;&gt; The first arguments
the initial state Yep.

34
00:02:00.740 --> 00:02:05.980
Exactly that slice thing that you saw
before where we had an object with keys.

35
00:02:05.980 --> 00:02:07.860
You can also technically do it here.

36
00:02:08.970 --> 00:02:14.431
The reason that I would caution against
it is when you do it in a slice,

37
00:02:14.431 --> 00:02:20.174
you have like, the slice itself knows
it's the one making the actions So

38
00:02:20.174 --> 00:02:23.020
it can wire up all the types for you.

39
00:02:24.750 --> 00:02:30.210
When you use create reducer, like this
notation is preferred because it will

40
00:02:30.210 --> 00:02:36.020
give you better TypeScript support
without really having to do anything.

41
00:02:36.020 --> 00:02:36.640
Right?

42
00:02:36.640 --> 00:02:40.679
And so if you like the one that we saw on
the slice where I just had like add task

43
00:02:40.679 --> 00:02:43.290
as a key, remove task as a key.

44
00:02:43.290 --> 00:02:47.286
You can do that, and I guess maybe if
you're like, you will not, whether it's

45
00:02:47.286 --> 00:02:51.400
the helpful hints in your code or
whatever, you will not get the same help.

46
00:02:51.400 --> 00:02:54.550
So I would recommend that you do this one.

47
00:02:55.620 --> 00:02:58.290
And so this builder is simply
has,let's take a look at it.

48
00:02:58.290 --> 00:03:02.039
I love the fact that my code
editor will give me the answers.

49
00:03:03.090 --> 00:03:06.990
Add case, add default case and
add matcher.

50
00:03:08.080 --> 00:03:12.742
Let's talk about them an order add case is
if you've ever used a switch statement, or

51
00:03:12.742 --> 00:03:16.818
if you have ever done what I do, which
is like as you saw before, I literally

52
00:03:16.818 --> 00:03:21.009
scroll down and see what I do which is
a series of if statements with returns.

53
00:03:22.590 --> 00:03:26.450
That is one of those cases, right?

54
00:03:26.450 --> 00:03:29.904
And then default case is what
you can guess it is probably,

55
00:03:29.904 --> 00:03:33.358
the thing at the bottom where
you either return state, and

56
00:03:33.358 --> 00:03:35.840
you don't actually have to define this.

57
00:03:35.840 --> 00:03:38.892
This is literally if you actually
want to catch the default You don't

58
00:03:38.892 --> 00:03:41.430
have to protect yourself
against this one at this point.

59
00:03:41.430 --> 00:03:42.970
This is now if you want to.

60
00:03:42.970 --> 00:03:44.009
Because previously,

61
00:03:44.009 --> 00:03:47.900
you had to always handle the default case
because it was just a JavaScript function.

62
00:03:49.320 --> 00:03:52.770
And if you did not return state
in some way, shape, or form, or

63
00:03:52.770 --> 00:03:56.500
do something with it,
your function would return undefined.

64
00:03:56.500 --> 00:03:58.480
You would set the state to undefined.

65
00:03:58.480 --> 00:04:02.292
Here, because we have this builder
abstraction, that's all going to get taken

66
00:04:02.292 --> 00:04:05.050
care of for you, so
you don't worry about silly mistake.

67
00:04:05.050 --> 00:04:09.753
Which, to be clear, like three weeks ago,
not this last sprint, but

68
00:04:09.753 --> 00:04:14.790
the one before, at least 20 minutes
of my life down the toilet.

69
00:04:14.790 --> 00:04:20.860
Right this will solve you
save you from that, right?

70
00:04:20.860 --> 00:04:23.439
&gt;&gt; So false case if you
don't use it as optional,

71
00:04:23.439 --> 00:04:27.060
so it'll just automatically
do the initial state for you.

72
00:04:27.060 --> 00:04:27.970
You don't do that.

73
00:04:27.970 --> 00:04:31.850
&gt;&gt; Exactly It'll give you like, it'll be
like, I don't do anything with this one.

74
00:04:31.850 --> 00:04:34.290
Right, which is no,
almost always what you want, right?

75
00:04:34.290 --> 00:04:36.560
Because Redux itself is so low level.

76
00:04:36.560 --> 00:04:39.360
You don't get that because it's
just a JavaScript function.

77
00:04:39.360 --> 00:04:42.280
Because you have a little
bit more abstraction, right?

78
00:04:42.280 --> 00:04:43.570
This will solve that for you.

79
00:04:45.500 --> 00:04:46.000
Awesome.

80
00:04:47.340 --> 00:04:49.640
So we've got that in place and
so we can say ad case.

81
00:04:50.750 --> 00:04:55.677
And what's really cool about this is
we handed just one of those action

82
00:04:55.677 --> 00:04:58.940
creators so I can say increment and like.

83
00:04:58.940 --> 00:05:02.890
Now this is one that will
catch it on increment, right?

84
00:05:05.690 --> 00:05:08.570
And we give it the state and the action.

85
00:05:09.670 --> 00:05:12.200
I'll move fully write this out
as a arrow notation function.

86
00:05:13.700 --> 00:05:17.470
Check this out, automatically typed.

87
00:05:17.470 --> 00:05:19.990
There's the like, the weird thing
that I'm going to talk about.

88
00:05:21.800 --> 00:05:25.450
Automatically typed in
here automatically typed.

89
00:05:26.740 --> 00:05:28.480
Because you gave it the action creator.

90
00:05:28.480 --> 00:05:32.615
You pass this in as the first argument
that increment action critically made

91
00:05:32.615 --> 00:05:34.810
the previous exercise.

92
00:05:34.810 --> 00:05:39.350
And so it's like, Yo, let me look at
the types that this thing produces.

93
00:05:39.350 --> 00:05:43.010
Cool, core I know what the action that
comes out of this action creator is

94
00:05:43.010 --> 00:05:45.920
the same way we wrote that
return value earlier.

95
00:05:45.920 --> 00:05:49.832
It's looking at the same return value,
knows what the shape of the type of

96
00:05:49.832 --> 00:05:52.730
the action is, and
has that ready to go for you.

97
00:05:52.730 --> 00:05:56.476
And looked at the shape
of the initial state and

98
00:05:56.476 --> 00:06:00.880
just said, that's clearly what this is.

99
00:06:00.880 --> 00:06:01.700
Ready to rock and roll.

100
00:06:03.010 --> 00:06:06.830
Now wait for it, I promise you that
I am not about to write a bug.

101
00:06:06.830 --> 00:06:08.680
Do you trust me?

102
00:06:11.930 --> 00:06:16.421
Okay, so all I'm going to do is say,
no conditional in this case,

103
00:06:16.421 --> 00:06:26.161
I'm just going to say,
I'm just going to increment that.

104
00:06:26.161 --> 00:06:28.640
I'm just going to mutate it.

105
00:06:28.640 --> 00:06:29.920
That key on the object.

106
00:06:31.020 --> 00:06:34.020
And that is valid, and that works.

107
00:06:34.020 --> 00:06:37.720
I just, and that is scoped to
only the state of this producer.

108
00:06:37.720 --> 00:06:43.270
Write correctly I can mutate
things on this object.

109
00:06:43.270 --> 00:06:47.050
You're like I can't use I'm not
supposed to use mutable state.

110
00:06:48.440 --> 00:06:53.707
This is your library called Emmer immer is
made by the same person created mob X, and

111
00:06:53.707 --> 00:06:58.670
what it is doing is it gave you a, if you
saw before if we hovered over the state,

112
00:06:58.670 --> 00:07:01.210
it's called writable draft, right?

113
00:07:01.210 --> 00:07:05.240
And so basically it gave you
a copy of the current state.

114
00:07:05.240 --> 00:07:08.230
And it's like mutate this
thing as much as you want.

115
00:07:08.230 --> 00:07:10.100
Push things onto the arrays.

116
00:07:10.100 --> 00:07:15.410
Pop things off, place them even,
see if you remember syntax place.

117
00:07:15.410 --> 00:07:18.040
Do all those of things.

118
00:07:18.040 --> 00:07:21.732
Even if you're deeply nested object,
you can find that key,

119
00:07:21.732 --> 00:07:24.999
switch the deeply nested value
to a different value and

120
00:07:24.999 --> 00:07:29.070
it will do all the readable
operations on your behalf, right?

121
00:07:29.070 --> 00:07:35.730
So your objects are still readable, But
you can pretend that they're mutable.

122
00:07:35.730 --> 00:07:40.493
And that like, lie to yourself will work
which a lot of times if you in previous

123
00:07:40.493 --> 00:07:45.403
chats, we have talked about the fact that
like having deeply nested data in like

124
00:07:45.403 --> 00:07:48.558
most react applications and
Redux applications,

125
00:07:48.558 --> 00:07:53.970
is an anti pattern because you spread
operator your way down your way back out.

126
00:07:53.970 --> 00:07:58.493
Right but sometimes we live in code
bases where like that ship has

127
00:07:58.493 --> 00:08:02.596
already sailed and
this is the world that we live in right so

128
00:08:02.596 --> 00:08:07.788
this is then a pattern that will then
save you because that is the most error

129
00:08:07.788 --> 00:08:12.600
prone code right and even unit
testing that This is doable, right?

130
00:08:12.600 --> 00:08:13.458
If you got some time,

131
00:08:13.458 --> 00:08:16.910
because then you've got to still make
sure you got to write your unit test.

132
00:08:16.910 --> 00:08:18.800
Right, who tests the unit tests?

133
00:08:18.800 --> 00:08:21.397
Right so in this case, like having
this abstraction here with Emmer,

134
00:08:21.397 --> 00:08:24.580
which is just a library, again, you can
use any of these things separately, right?

135
00:08:24.580 --> 00:08:26.500
I use them all the time.

136
00:08:26.500 --> 00:08:28.180
Like just in a regular use reducer,
what have you.

137
00:08:29.200 --> 00:08:32.382
We'll go ahead and
make your code seem mutable but

138
00:08:32.382 --> 00:08:34.590
actually be completely mutable.

139
00:08:34.590 --> 00:08:38.390
And you'll notice I didn't have to return
anything from this function either, right?

140
00:08:38.390 --> 00:08:42.019
So all those edge cases and errors
are taken care of for me and handled and

141
00:08:42.019 --> 00:08:44.330
I don't necessarily
have to worry about it.

