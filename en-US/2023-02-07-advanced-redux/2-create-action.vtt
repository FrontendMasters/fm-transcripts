WEBVTT

1
00:00:00.266 --> 00:00:05.039
So, that's great for something that
does not kind of take any argument.

2
00:00:05.039 --> 00:00:06.826
And sometimes that's true, right?

3
00:00:06.826 --> 00:00:11.346
They hit the logout button, a lot of
times there's not extra information that

4
00:00:11.346 --> 00:00:15.662
you need to give it's like user is login
out or like this thing was clicked,

5
00:00:15.662 --> 00:00:16.844
I need to do a thing.

6
00:00:16.844 --> 00:00:21.503
But sometimes, if we're adding a task,
sometimes it's helpful.

7
00:00:21.503 --> 00:00:22.321
Tell me more.

8
00:00:22.321 --> 00:00:24.059
[LAUGH] What task did they add?

9
00:00:24.059 --> 00:00:29.765
What action did they take with
the counter or what have you, right?

10
00:00:29.765 --> 00:00:30.851
Depending on what you're working on.

11
00:00:30.851 --> 00:00:33.234
And so, yeah,
we have payloads a lot of times and

12
00:00:33.234 --> 00:00:35.048
Redux itself doesn't really care.

13
00:00:35.048 --> 00:00:36.820
It's like as long as you got action type.

14
00:00:36.820 --> 00:00:38.688
Wild West for
anything else in that object.

15
00:00:38.688 --> 00:00:41.666
Use, reduce, and
react literally doesn't care.

16
00:00:41.666 --> 00:00:45.337
It could be a number,
it could be undefined for all it cares.

17
00:00:45.337 --> 00:00:49.510
But there is a pattern, it was
originally called Flux standard actions.

18
00:00:49.510 --> 00:00:52.676
And the kind of there's a meta
property and some other things.

19
00:00:52.676 --> 00:00:57.243
But the two major pieces is the structure
of the action in a way that has a type,

20
00:00:57.243 --> 00:00:59.994
which is the same string that we know and
love.

21
00:00:59.994 --> 00:01:03.212
Like what happened?

22
00:01:03.212 --> 00:01:04.225
And I'll payload and

23
00:01:04.225 --> 00:01:08.164
making sure that instead of having a bunch
of keys spread throughout this object and

24
00:01:08.164 --> 00:01:11.043
letting everyone your team
guess where you put everything.

25
00:01:11.043 --> 00:01:14.753
Just having a payload as a standard place
to make sure you don't have collisions or

26
00:01:14.753 --> 00:01:17.889
anything like that this is kind of
where all the different pieces go.

27
00:01:17.889 --> 00:01:20.921
You are for those keys and I bet you
wanna just tell the pillar to be a number

28
00:01:20.921 --> 00:01:23.735
depending on what you want,
all of those things are totally cool.

29
00:01:23.735 --> 00:01:28.928
It is up to you but that is the convection
that has been worldly popularized

30
00:01:28.928 --> 00:01:33.894
at this point and so that is what
the truly would give you out of the box.

31
00:01:33.894 --> 00:01:38.598
What is really great about this
is that in the very beginning for

32
00:01:38.598 --> 00:01:42.873
some of those types there's
not a lot that you need to do.

33
00:01:42.873 --> 00:01:46.382
So, for instance if you say add
task is gonna take an action and

34
00:01:46.382 --> 00:01:50.704
we'll talk about like why went about
do is gonna be slightly problematic and

35
00:01:50.704 --> 00:01:52.390
the second, but we'll go for

36
00:01:52.390 --> 00:01:56.872
it, we'll start with just action first,
I'll show you what happens there.

37
00:01:56.872 --> 00:02:02.580
And so, in this case, we'll say our state
which is we say, state, you'll notice that

38
00:02:02.580 --> 00:02:07.620
it is fully typed it knows the initial
state, it's all set up and ready to go.

39
00:02:07.620 --> 00:02:11.157
And if I try to push
on the action.payload,

40
00:02:11.157 --> 00:02:15.565
this case it will work cuz I
believe that counts as any.

41
00:02:15.565 --> 00:02:19.806
Now, I talked a lot
about TypeScript before,

42
00:02:19.806 --> 00:02:23.193
one any in a code base is infectious.

43
00:02:23.193 --> 00:02:27.394
And so, this is not an array that can be
anything we clearly said it should only be

44
00:02:27.394 --> 00:02:30.780
tasks, but as soon as you say
that something is any TypeScript,

45
00:02:30.780 --> 00:02:33.125
I don't know what to do with you,
I give up.

46
00:02:33.125 --> 00:02:39.433
Luckily, adding a type to this
is relatively straightforward.

47
00:02:39.433 --> 00:02:42.143
If you look at this,
this is just a JavaScript function.

48
00:02:42.143 --> 00:02:43.983
Nothing special here, right?

49
00:02:43.983 --> 00:02:47.856
And we get kind of like a type
system kind of supported in here.

50
00:02:47.856 --> 00:02:50.781
So, there are a bunch of different ones,
there's action but

51
00:02:50.781 --> 00:02:54.454
then we want the one that action that
has a payload, that's payload action.

52
00:02:54.454 --> 00:02:56.749
And then all you have to do is say
what type it should be getting.

53
00:02:56.749 --> 00:02:57.968
Alex, what's up?

54
00:02:57.968 --> 00:02:59.524
&gt;&gt; Yeah, just a couple of quick questions.

55
00:02:59.524 --> 00:03:05.492
So, here I'm seeing you create the slice,
and you create a bunch of reducers.

56
00:03:05.492 --> 00:03:09.695
And I remember in vanilla React Redux,
every action and

57
00:03:09.695 --> 00:03:12.209
is dispatched to every reducer.

58
00:03:12.209 --> 00:03:13.014
&gt;&gt; Yeah.

59
00:03:13.014 --> 00:03:14.264
&gt;&gt; How does it act here?

60
00:03:14.264 --> 00:03:19.643
Does only the reducers from this list
gonna receive those actions or no?

61
00:03:19.643 --> 00:03:22.523
&gt;&gt; So, everything you know about
Redux is still true, right?

62
00:03:22.523 --> 00:03:24.758
And that is a really great question,
we will also cover later.

63
00:03:24.758 --> 00:03:27.843
I'll give you a,
we'll do the sneak peek now, right?

64
00:03:27.843 --> 00:03:32.283
So, Alex's question was hey,
don't every action go to every reducer cuz

65
00:03:32.283 --> 00:03:36.653
combined reducers just taking a bunch
of functions and running it there,

66
00:03:36.653 --> 00:03:38.432
it's just wiring up for you.

67
00:03:38.432 --> 00:03:43.289
These by default are bound to the slice,
there is a another property

68
00:03:43.289 --> 00:03:48.233
here called extra reducers, right,
which are one of the things that

69
00:03:48.233 --> 00:03:52.600
this slice is not in charge of
that it might need to deal with.

70
00:03:52.600 --> 00:03:55.468
So, at one point later today
we're gonna do the feature,

71
00:03:55.468 --> 00:03:59.405
which is if like we remove a user from
a list, unassign all their tasks, right?

72
00:03:59.405 --> 00:04:03.398
What I don't wanna have to do to
your point is dispatch two actions,

73
00:04:03.398 --> 00:04:06.354
one to the user's slice,
one to the tasks slice.

74
00:04:06.354 --> 00:04:11.561
I just wanna say, yo, user was removed,
unassign their stuff.

75
00:04:11.561 --> 00:04:13.562
All right, and like make it happen.

76
00:04:13.562 --> 00:04:17.659
So, there's actually a really great syntax
and the nice part about this is even with

77
00:04:17.659 --> 00:04:20.777
that, even when it's like
everything listens to everything,

78
00:04:20.777 --> 00:04:23.046
we will get full TypeScript support,
right?

79
00:04:23.046 --> 00:04:27.680
And we will get the full type safety with
other than right now writing the type for

80
00:04:27.680 --> 00:04:31.483
the state, which I just use cuz I
didn't want to write it in line,

81
00:04:31.483 --> 00:04:35.591
we've written very little TypeScript for
full type safety, right?

82
00:04:35.591 --> 00:04:39.126
And I guess this typing this action right
here, say like, this will be a task.

83
00:04:39.126 --> 00:04:42.652
And what's nice about this is now
I get all the safety that can

84
00:04:42.652 --> 00:04:45.362
autocomplete it and
stuff along those lines.

85
00:04:45.362 --> 00:04:50.656
And now kind of if we look at this action,
it assumes that that payload is a task.

86
00:04:50.656 --> 00:04:54.302
It will not let me accidentally call
methods so on and so forth, right?

87
00:04:54.302 --> 00:04:59.243
A lot of the error proneness of using
redox is, it's a bunch of conditionals or

88
00:04:59.243 --> 00:05:02.996
switch statement, and
you mistyped the action type, right?

89
00:05:02.996 --> 00:05:06.651
Or you call the wrong property on
the object cuz you forgot the actual

90
00:05:06.651 --> 00:05:07.369
shape of it.

91
00:05:07.369 --> 00:05:11.853
So, stopping a lot of the mistakes and
not really asking for much for

92
00:05:11.853 --> 00:05:13.436
you in return, right?

93
00:05:13.436 --> 00:05:16.410
You get most of this for
free at this point.

94
00:05:16.410 --> 00:05:19.684
And you can just kind of use
it is really pretty great.

95
00:05:19.684 --> 00:05:25.317
So again, if we say,
tasksSlice and we look at it now,

96
00:05:25.317 --> 00:05:29.847
it's action creator
with a payload task and

97
00:05:29.847 --> 00:05:33.039
we'll dispense that action.

98
00:05:33.039 --> 00:05:37.546
So, even when we tried to call it,
it will, like expect that the payload is

99
00:05:37.546 --> 00:05:42.483
a task, and make sure that we are handing
it valid data, when we use it wherever our

100
00:05:42.483 --> 00:05:47.373
UI, whether that's react or something
else as well, all of that will be there.

101
00:05:47.373 --> 00:05:51.005
And so
vast if you aren't a JavaScript code base,

102
00:05:51.005 --> 00:05:55.500
you will not get the enforcement but
you will get the helpful,

103
00:05:55.500 --> 00:05:59.063
hover over answers to
everything along the way.

104
00:05:59.063 --> 00:06:02.901
And so, the benefits are still there for
something that you can very

105
00:06:02.901 --> 00:06:06.887
easily use today in your initial,
in your existing infrastructure.

106
00:06:06.887 --> 00:06:10.316
And so, instead of,
just because I don't wanna scroll down,

107
00:06:10.316 --> 00:06:11.944
I'm just gonna say unshift.

108
00:06:11.944 --> 00:06:14.425
Unshift puts it at the beginning
of the array versus the end.

109
00:06:14.425 --> 00:06:18.791
So that when I hit the button and
I go, it doesn't work, it does work,

110
00:06:18.791 --> 00:06:21.318
I just have to scroll or
put it at the top.

111
00:06:21.318 --> 00:06:23.385
So we'll have that in place,
it'd be great.

112
00:06:23.385 --> 00:06:27.795
And we'll kind of move to our first
kind of little challenge here.

113
00:06:27.795 --> 00:06:33.813
Which is, what does this look
like if I wanna migrate?

114
00:06:33.813 --> 00:06:39.229
Let's say like, this is cool, I like the
fact that it wires up all of this for me,

115
00:06:39.229 --> 00:06:44.408
what are the pieces that make this up that
I could use in my existing code base,

116
00:06:44.408 --> 00:06:44.984
right?

117
00:06:44.984 --> 00:06:49.563
So, I have that little counter app for
you to play around with and I will kind of

118
00:06:49.563 --> 00:06:54.212
show you a little bit and to give you kind
of just an excuse to try it out in an app,

119
00:06:54.212 --> 00:06:57.804
but I will kind of show you some
of the general pattern first,

120
00:06:57.804 --> 00:06:59.654
before I cut you loose on that.

121
00:06:59.654 --> 00:07:04.139
So, I'm just gonna make a scratch file
that I'm not gonna keep real quick.

122
00:07:04.139 --> 00:07:05.038
Yes?

123
00:07:05.038 --> 00:07:05.737
&gt;&gt; Would you talk real quick
about why it's called a slice?

124
00:07:05.737 --> 00:07:08.185
&gt;&gt; I would love to.

125
00:07:08.185 --> 00:07:14.481
Naming things is hard,
it's like a slice of your application.

126
00:07:14.481 --> 00:07:18.920
I guess the answer is no, I can't
talk about why it's called a slice.

127
00:07:18.920 --> 00:07:23.343
I personally, If I'm being candid and
honest, it's not my favorite name for

128
00:07:23.343 --> 00:07:23.886
a thing.

129
00:07:23.886 --> 00:07:25.386
&gt;&gt; Well,
I guess they were talking about children.

130
00:07:25.386 --> 00:07:26.745
&gt;&gt; Yeah.

131
00:07:26.745 --> 00:07:28.020
&gt;&gt; [INAUDIBLE] better call.

132
00:07:28.020 --> 00:07:31.243
&gt;&gt; Yeah, there's a bunch of names,
yeah, the joke that

133
00:07:31.243 --> 00:07:35.871
bears repeating is the two hard problems
computer science are naming things,

134
00:07:35.871 --> 00:07:40.102
cache invalidation off by one errors,
right, naming things is hard.

135
00:07:40.102 --> 00:07:43.898
Yeah, I remember it's one of those things
where it's the first time I heard that I

136
00:07:43.898 --> 00:07:45.947
was like, I'm not taking that seriously.

137
00:07:45.947 --> 00:07:49.300
And now it's been four years and
I don't think about it anymore.

138
00:07:49.300 --> 00:07:54.005
So, I agree with you,
I feel that same initial thought.

139
00:07:54.005 --> 00:07:56.893
&gt;&gt; I've always thought about
it as like a slice of the pie.

140
00:07:56.893 --> 00:07:57.713
&gt;&gt; Yeah.

141
00:07:57.713 --> 00:08:01.772
&gt;&gt; I but I'm from Jersey, so I think
about everything in terms of pizza.

142
00:08:01.772 --> 00:08:02.672
&gt;&gt; Sure.

143
00:08:02.672 --> 00:08:06.887
&gt;&gt; Yeah, awesome.

144
00:08:06.887 --> 00:08:13.440
So, imagine if you will,
we had a simple reducer look like this.

145
00:08:13.440 --> 00:08:16.186
This is regular old redox this is like hi,

146
00:08:16.186 --> 00:08:20.821
I'm learning on React, I guess I
have some type information in here.

147
00:08:20.821 --> 00:08:25.475
But other than that, it is kind of just
a regular, this could be useReducer for

148
00:08:25.475 --> 00:08:25.975
React.

149
00:08:25.975 --> 00:08:27.826
This could be anything,
it doesn't matter, right?

150
00:08:27.826 --> 00:08:29.367
This is just the general pattern.

151
00:08:29.367 --> 00:08:34.450
It's technically not even Redux because
it's just a reducer function and

152
00:08:34.450 --> 00:08:36.396
this idea of an action type.

153
00:08:36.396 --> 00:08:40.903
And you're like, I would like
to to migrate from this, right?

154
00:08:40.903 --> 00:08:45.383
The slice thing seems cool, but
it's like automatically naming actions,

155
00:08:45.383 --> 00:08:46.787
I can't do any of this.

156
00:08:46.787 --> 00:08:50.806
All of the pieces
are available to you as well.

157
00:08:50.806 --> 00:08:55.346
So, let's kind of talk about what
this would look like if we wanted

158
00:08:55.346 --> 00:09:00.292
to migrate it and get a sense,
that will help us understand a little bit,

159
00:09:00.292 --> 00:09:03.237
what's kind of going under the hood here?

160
00:09:03.237 --> 00:09:04.826
And so, there are some,

161
00:09:04.826 --> 00:09:09.917
slices are made up from two component
pieces that are just regular redux ideas.

162
00:09:09.917 --> 00:09:13.450
One is this createAction,
right and createAction,

163
00:09:13.450 --> 00:09:18.080
there have been libraries that you
could use that have done the similar

164
00:09:18.080 --> 00:09:22.238
thing that I think are great and
a createAction is just trying to

165
00:09:22.238 --> 00:09:25.714
give you a standard way of
making an action creator.

166
00:09:25.714 --> 00:09:31.004
Action creator is a function that formats
the action that you had to dispatch,

167
00:09:31.004 --> 00:09:31.573
right?

168
00:09:31.573 --> 00:09:32.544
And normally,

169
00:09:32.544 --> 00:09:37.410
it was one of those best practices that
we were just supposed to know how to do.

170
00:09:37.410 --> 00:09:42.412
Nothing forces you to do it, nothing made
you do it, but we're supposed to do it and

171
00:09:42.412 --> 00:09:46.986
we're all supposed to hope that everyone
on the team did it consistently and

172
00:09:46.986 --> 00:09:48.000
in the same way.

173
00:09:48.000 --> 00:09:52.800
And there's a lot of smiling and
nodding going on right now because we

174
00:09:52.800 --> 00:09:56.296
all know that that's not how that works,
right?

175
00:09:56.296 --> 00:09:58.157
Especially as the team grows,
it becomes harder.

176
00:09:58.157 --> 00:10:01.760
So, with createAction, we can just say,
what is the type of this action?

177
00:10:01.760 --> 00:10:07.507
So, for instance, if I needed actions,
I could say increment.

178
00:10:07.507 --> 00:10:08.918
Same way I did before.

179
00:10:08.918 --> 00:10:12.005
And then I give it some function.

180
00:10:12.005 --> 00:10:14.701
And let's say in this case,
what do you want?

181
00:10:14.701 --> 00:10:19.322
If I don't give it anything, I will
actually get a valid action out of it.

182
00:10:19.322 --> 00:10:20.077
So, I can say.

183
00:10:26.242 --> 00:10:27.939
We've got to save that in
some kind of variable, right?

184
00:10:33.049 --> 00:10:35.863
Can't reference stuff you
don't save in variables.

185
00:10:35.863 --> 00:10:41.183
And we call it,
you will see that I get a valid,

186
00:10:41.183 --> 00:10:45.282
actually, I get hand to dispatch.

187
00:10:45.282 --> 00:10:49.061
What is even better, thouogh.

188
00:10:49.061 --> 00:10:55.712
If I go incrementAction .type,

189
00:10:55.712 --> 00:10:59.715
it's because functions are objects, so

190
00:10:59.715 --> 00:11:03.385
you can put properties on functions.

191
00:11:03.385 --> 00:11:04.777
That is the type.

192
00:11:04.777 --> 00:11:08.494
So all of that kind of ceremony that we
used to have to do of like, all right,

193
00:11:08.494 --> 00:11:10.385
I'm gonna make a bunch of constants.

194
00:11:10.385 --> 00:11:14.870
That's the string in all caps so
that I can't mistype it, and

195
00:11:14.870 --> 00:11:19.612
my code will now compile if I say
success has like 1C or 4Ss in it or

196
00:11:19.612 --> 00:11:23.862
something along those lines,
you will get this for free.

197
00:11:23.862 --> 00:11:29.995
So now you could actually if
you look on increment too.

198
00:11:33.684 --> 00:11:35.936
It is also increment.

199
00:11:35.936 --> 00:11:37.578
So now, you can pass, later on,

200
00:11:37.578 --> 00:11:40.704
you could actually say we'll
refactor it right now actually.

201
00:11:44.270 --> 00:11:48.672
So, the same function that creates
your actions lets you dispatch them,

202
00:11:48.672 --> 00:11:51.521
you can also use an irregular reducer,
right?

203
00:11:51.521 --> 00:11:56.609
And this will be now the actions that
come out of that increment action creator

204
00:11:56.609 --> 00:12:01.791
will be of the type increment and the
functions type property is also the same.

205
00:12:01.791 --> 00:12:07.460
So, now you've removed all of this
make constants for the action types,

206
00:12:07.460 --> 00:12:12.033
you remove the entire file
where you make action creators,

207
00:12:12.033 --> 00:12:17.080
all that very chore level stuff
that you had to do, gone, right.

208
00:12:17.080 --> 00:12:21.624
And if it does take a payload,
the nice part about this one is that

209
00:12:21.624 --> 00:12:25.087
payload is not undefined or
something, right.

210
00:12:25.087 --> 00:12:29.881
It is assuming that the payload on this
type of this increment action is in fact

211
00:12:29.881 --> 00:12:32.485
not defined because we did not define it.

212
00:12:32.485 --> 00:12:35.900
So, if you accidentally tried
to call a payload on it, and

213
00:12:35.900 --> 00:12:38.707
you're using TypeScript,
you get yelled at.

214
00:12:38.707 --> 00:12:42.932
And for the ones where you do define
a payload, you will make sure that you're

215
00:12:42.932 --> 00:12:46.389
using the right properties with
almost no work from yourself.

216
00:12:46.389 --> 00:12:48.519
And I love when I get
good things with no work.

217
00:12:48.519 --> 00:12:50.341
That's the best.

218
00:12:50.341 --> 00:12:52.332
We've got this increment and

219
00:12:52.332 --> 00:12:57.594
then what we can do is let's say we do
want to take some kind of payload, right?

220
00:12:57.594 --> 00:13:03.285
So, action graders I usually use the
pattern for making sure we get we want.

221
00:13:03.285 --> 00:13:10.567
So, I could say something
like Amount is a number.

222
00:13:13.081 --> 00:13:16.748
And that will give me back,
I do have to format it in the payload, so

223
00:13:16.748 --> 00:13:20.038
let's make it a full function so
it's clear for everyone.

224
00:13:20.038 --> 00:13:24.935
I can say return an object
that has the payload.

225
00:13:24.935 --> 00:13:26.811
And you can either say it's
the amount like that or

226
00:13:26.811 --> 00:13:28.381
you can make it an amount
key on an object.

227
00:13:28.381 --> 00:13:31.558
Whatever you think you're gonna need,
like in this silly example,

228
00:13:31.558 --> 00:13:32.776
like I think this is fine.

229
00:13:32.776 --> 00:13:37.420
And you already get a hint on the number
of squiggly lines that I have down here

230
00:13:37.420 --> 00:13:39.390
where things are upset with me.

231
00:13:39.390 --> 00:13:43.600
Which is now I have to
call this with a number.

232
00:13:43.600 --> 00:13:46.359
And it will know that
the payload is a number, so,

233
00:13:46.359 --> 00:13:49.384
I get full TypeScript support once again,
and again,

234
00:13:49.384 --> 00:13:54.288
autocomplete if I'm using JavaScript, no
work whatsoever, it's just there for me.

235
00:13:54.288 --> 00:13:57.659
And like I said before, this reducer
has nothing to do with redox toolkit.

236
00:13:57.659 --> 00:14:00.707
It's just a thing that you can have and
use right now and

237
00:14:00.707 --> 00:14:03.101
it's battle tested types, it's crazy.

238
00:14:03.101 --> 00:14:07.457
There's a conditional now you can go
click and look at, it's a lot of fun.

239
00:14:07.457 --> 00:14:11.601
And if you really don't even want
pull in the dependency, go and

240
00:14:11.601 --> 00:14:13.305
steal the types, right?

241
00:14:13.305 --> 00:14:15.662
You can actually do some
of these patterns as well.

242
00:14:15.662 --> 00:14:19.914
But I think it's a way to figure out a lot
of the best practices cuz these are kinda

243
00:14:19.914 --> 00:14:22.022
the battle tested agreed upon pieces.

244
00:14:22.022 --> 00:14:26.424
And, I am using this on, a sophisticated
application right now, and that seem very,

245
00:14:26.424 --> 00:14:27.645
brush my shoulder off.

246
00:14:27.645 --> 00:14:31.997
But on a big application, and I can
guarantee that it's serves and scales,

247
00:14:31.997 --> 00:14:33.976
there's my personal guarantee.

248
00:14:33.976 --> 00:14:38.733
So, we have that in place, and
now if I said, something like three,

249
00:14:38.733 --> 00:14:42.436
you'll see that I get,
the correctly typed action.

250
00:14:42.436 --> 00:14:45.598
We have all those things in place and
it will now know if I say,

251
00:14:45.598 --> 00:14:48.273
it now as knows the payload
in this case is a number.

252
00:14:48.273 --> 00:14:52.195
Everything is typed, I don't think
I wrote a single type in this file.

253
00:14:52.195 --> 00:14:56.913
I guess I wrote these ones that I'm not
using that were already in the file for

254
00:14:56.913 --> 00:15:00.009
counteraction but
I didn't write a single type,

255
00:15:00.009 --> 00:15:03.714
I've got full TypeScript
support in here as well, right?

256
00:15:03.714 --> 00:15:07.941
And so, it's kind of interesting we can
kind of put all of these things together

257
00:15:07.941 --> 00:15:11.555
and have it available for us, and
it's all on there and ready to go.

258
00:15:11.555 --> 00:15:14.160
And like I said before, you can use
it with anything that you want.

