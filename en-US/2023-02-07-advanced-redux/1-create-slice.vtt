WEBVTT

1
00:00:00.160 --> 00:00:03.345
We are going to look at
this idea of a slice, and

2
00:00:03.345 --> 00:00:06.042
the reason I bring up in the beginning,

3
00:00:06.042 --> 00:00:10.819
this is the only kind of brand new
concept that we're talking about.

4
00:00:10.819 --> 00:00:11.864
Everything else is,

5
00:00:11.864 --> 00:00:15.170
I guess the RTK query stuff at the end
is also a brand new concept, but

6
00:00:15.170 --> 00:00:19.133
this is the true brand new concept, which
is an amalgamation of other concepts.

7
00:00:19.133 --> 00:00:23.993
That I like this abstraction because
I have previously tried to build

8
00:00:23.993 --> 00:00:28.792
my own form of this abstraction that
I have not liked nearly as much.

9
00:00:28.792 --> 00:00:32.488
But it starts to show some of
the nice things that we get and

10
00:00:32.488 --> 00:00:37.416
some of the thought process around how
you can create stuff with the patterns

11
00:00:37.416 --> 00:00:41.574
in Redux that don't necessarily
always involve setting up five

12
00:00:41.574 --> 00:00:46.040
different files to do the simplest
thing every single time, right?

13
00:00:46.040 --> 00:00:48.444
And I think that is where Redux
got something of a bad rap.

14
00:00:48.444 --> 00:00:52.322
And so these are patterns that you could
use today in your regular Redux app or

15
00:00:52.322 --> 00:00:53.482
in Redux Toolkit app.

16
00:00:53.482 --> 00:00:57.544
You can pick, this is like a buffet,
it's not like I have to go all in.

17
00:00:57.544 --> 00:01:00.336
You can pick whatever you
want from this buffet and

18
00:01:00.336 --> 00:01:04.475
it will work at whatever level of
granularity makes sense to you, right?

19
00:01:04.475 --> 00:01:08.654
And that's why we're kinda looking in
this sense cuz it's all pick and choose,

20
00:01:08.654 --> 00:01:10.694
you do not have to go all in at any point.

21
00:01:10.694 --> 00:01:12.147
But let's look at what a slice is and

22
00:01:12.147 --> 00:01:15.540
let's look at some of the practices around
that, cuz it's gonna give me a chance to

23
00:01:15.540 --> 00:01:18.658
talk about mistakes that I have made in
the past and how you cannot be like me.

24
00:01:18.658 --> 00:01:21.647
Or you can be like current me and
not like past me.

25
00:01:21.647 --> 00:01:22.920
Nobody wants to be like past me.

26
00:01:24.180 --> 00:01:26.888
Awesome, so,
we normally need something like,

27
00:01:26.888 --> 00:01:31.400
we don't wanna write this in Gitkeep,
that's not a place to write things.

28
00:01:31.400 --> 00:01:34.000
That's just a place to make sure
you have the folder already.

29
00:01:34.000 --> 00:01:38.050
We'll make a new file called task,
tasks plural, slice,

30
00:01:38.050 --> 00:01:42.800
which I'm just gonna love saying
repeatedly all day today.

31
00:01:42.800 --> 00:01:45.953
I could have picked any other euphemism
to do something like that, but

32
00:01:45.953 --> 00:01:47.480
here we are already.

33
00:01:47.480 --> 00:01:49.420
And we're gonna make it happen.

34
00:01:49.420 --> 00:01:54.080
And we need some data structure
to hold on to our tasks.

35
00:01:54.080 --> 00:01:58.952
And this is one of the first places
where I tend to get bitten and yeah,

36
00:01:58.952 --> 00:02:03.910
this is just a how do we structure our
state question more than it is a how

37
00:02:03.910 --> 00:02:06.490
do I even Redux the question?

38
00:02:06.490 --> 00:02:09.810
Briefly, we will look at
just the shape of a task,

39
00:02:09.810 --> 00:02:12.510
a task is basically has id, has a title.

40
00:02:13.760 --> 00:02:17.294
If we choose to go full Kanban board with
this, that will become important, but

41
00:02:17.294 --> 00:02:19.190
otherwise it belongs to a user.

42
00:02:19.190 --> 00:02:20.270
A user has many tasks.

43
00:02:21.290 --> 00:02:26.180
So a basic relationship model that is
a little bit more than what we see in

44
00:02:26.180 --> 00:02:27.809
the kind of basics, but

45
00:02:27.809 --> 00:02:32.723
definitely something we often have
to deal with in our real code bases.

46
00:02:32.723 --> 00:02:37.871
So, it is very tempting when coming up
with the shape of the initial state,

47
00:02:37.871 --> 00:02:40.910
to be like, yooh, it's an array of tasks.

48
00:02:40.910 --> 00:02:44.753
I got this, right, it'd be something like,

49
00:02:45.766 --> 00:02:49.256
const initialState is an array.

50
00:02:52.908 --> 00:02:57.738
Now there's a number of problems with
this, some of these will be easily solved,

51
00:02:57.738 --> 00:02:59.700
all of them are easily solvable.

52
00:02:59.700 --> 00:03:04.185
Which is TypeScript out of
the box does not know what

53
00:03:04.185 --> 00:03:08.789
an empty array is in any way,
shape or form, right?

54
00:03:08.789 --> 00:03:13.066
It's this could be anything and worse,
if we solve our second problem,

55
00:03:13.066 --> 00:03:15.039
we make the first problem worse.

56
00:03:15.039 --> 00:03:19.600
So, right now it thinks it's absolutely
anything, if we put it in an object,

57
00:03:19.600 --> 00:03:22.420
it'll think it's absolutely nothing.

58
00:03:22.420 --> 00:03:25.215
Lemme show you what I mean by that.

59
00:03:25.215 --> 00:03:29.889
So if we said something like entities,
and that'll be an array.

60
00:03:32.626 --> 00:03:35.912
Then it becomes an array of never,
because it's like, hey,

61
00:03:35.912 --> 00:03:39.579
this is initially set as an array
of nothing, which means this object

62
00:03:39.579 --> 00:03:43.527
must just hold on to an array of nothing
forever and ever and ever, right?

63
00:03:43.527 --> 00:03:46.865
And that's not particularly great.

64
00:03:46.865 --> 00:03:49.201
And it gets a little harder
to dynamically type it here.

65
00:03:49.201 --> 00:03:52.196
So it makes sense if we're
gonna use TypeScript 2, and

66
00:03:52.196 --> 00:03:56.354
this is probably a good thing to do in
general, what is the shape of our state?

67
00:03:56.354 --> 00:03:58.571
And we want something we
can add to over time.

68
00:03:58.571 --> 00:04:03.559
So I always have this inclination of,
why should I just start with an array?

69
00:04:03.559 --> 00:04:05.940
And that's problematic for
a number of reasons.

70
00:04:05.940 --> 00:04:11.451
If I need to hold on to anything else
like, is this list currently loading?

71
00:04:11.451 --> 00:04:13.953
Is it pulling from
the server at this moment?

72
00:04:13.953 --> 00:04:18.437
Do I wanna keep the actual fundamental
objects separate from the IDs so

73
00:04:18.437 --> 00:04:22.769
I can iterate over an array of
strings to populate things versus have

74
00:04:22.769 --> 00:04:26.040
an indexable object to get
the different objects?

75
00:04:26.040 --> 00:04:30.359
Starting out with just the kind of, I only
need this, a lot of times gets you to

76
00:04:30.359 --> 00:04:34.545
a place where as soon as you need the
second thing, you have to rework almost

77
00:04:34.545 --> 00:04:38.150
all of your kind of, for
this at least part of your application.

78
00:04:38.150 --> 00:04:41.396
And if you make it repeatedly
more than one place,

79
00:04:41.396 --> 00:04:46.433
part of your application you have to
rework this over and over and over again.

80
00:04:46.433 --> 00:04:51.888
So, one of the things that I would implore
you to do especially in a larger and

81
00:04:51.888 --> 00:04:57.447
real code base, is to kind of start out
with an object that you can add keys to.

82
00:04:57.447 --> 00:05:02.365
And there's a bunch of ways you could
do this, but we'll say our type of our

83
00:05:02.365 --> 00:05:08.411
TaskState, Will have
this idea of entities,

84
00:05:08.411 --> 00:05:12.841
which will be an array of,
in my case, those tasks, right?

85
00:05:12.841 --> 00:05:16.780
And the nice part about doing it in a type
is that I can say what the array is, so

86
00:05:16.780 --> 00:05:20.474
now when I just use the array in an
initial state and if I say that the whole

87
00:05:20.474 --> 00:05:24.132
object is of this type, TypeScript
will figure all the rest of it out.

88
00:05:24.132 --> 00:05:27.232
And again, this means that later
I can add additional keys.

89
00:05:27.232 --> 00:05:31.886
The other reason for this is, the other
thing that is a lot of times really

90
00:05:31.886 --> 00:05:36.160
tricky about state management in
Redux is if you have deeply nested

91
00:05:36.160 --> 00:05:40.299
objects that immutability involves
a lot of spread operators.

92
00:05:40.299 --> 00:05:44.184
That a lot of the tooling that comes with
Redux Toolkit has this library called

93
00:05:44.184 --> 00:05:45.031
immer, right?

94
00:05:45.031 --> 00:05:48.067
And immer lets you just pretend
that your state is mutable.

95
00:05:48.067 --> 00:05:50.893
You push things onto arrays,
pop them off, right?

96
00:05:50.893 --> 00:05:54.486
Just flip boolean values,
reassign strings, it's cool.

97
00:05:54.486 --> 00:05:57.525
The only thing that you cannot do, really,

98
00:05:57.525 --> 00:06:02.880
is flat out replace that object you
were given at the very beginning, right?

99
00:06:02.880 --> 00:06:07.621
Cuz it's just gonna use this, right, try
to look at the changes to that object and

100
00:06:07.621 --> 00:06:08.870
it just won't work.

101
00:06:08.870 --> 00:06:13.608
So if you only gave yourself an array and
you ever come to the situation of I had

102
00:06:13.608 --> 00:06:18.492
this array, I've made a new network
request of blog posts, tweets, items,

103
00:06:18.492 --> 00:06:20.064
I wanna just swap it out.

104
00:06:20.064 --> 00:06:24.198
If the array is your base level object,
you can't.

105
00:06:24.198 --> 00:06:28.089
And by the time you're at that level
of working on whatever feature,

106
00:06:28.089 --> 00:06:31.393
you are already several hours or
several days in, right?

107
00:06:31.393 --> 00:06:36.229
And so,
I know that it seems a little much now,

108
00:06:36.229 --> 00:06:39.460
but future you will thank you.

109
00:06:39.460 --> 00:06:41.628
Could you call it tasks?

110
00:06:41.628 --> 00:06:43.490
You absolutely could.

111
00:06:43.490 --> 00:06:49.004
When you use combined reducer,
it's gonna be tasks.tasks, so, whatever.

112
00:06:49.004 --> 00:06:52.980
The important part is,
I'm not here to argue about naming things,

113
00:06:52.980 --> 00:06:56.907
the important part is that you
have something called out, right?

114
00:06:56.907 --> 00:07:00.282
And you can switch what that data
structure looks like and how it's shaped

115
00:07:00.282 --> 00:07:03.385
later, but having some way that you
have an object that you can add or

116
00:07:03.385 --> 00:07:05.796
remove keys to,
to store additional information.

117
00:07:05.796 --> 00:07:09.605
Cuz otherwise you'll end up finding
yourself making other reducers and

118
00:07:09.605 --> 00:07:12.039
other slices and
stuff along those lines, and

119
00:07:12.039 --> 00:07:15.174
there's no reason to start out
in that general direction.

120
00:07:15.174 --> 00:07:17.020
So starting out with a shape for

121
00:07:17.020 --> 00:07:20.430
your state that makes sense
will serve you in the future.

122
00:07:21.860 --> 00:07:23.750
But now we have that.

123
00:07:23.750 --> 00:07:25.494
And so,
now we can say that our initialState,

124
00:07:27.486 --> 00:07:32.170
Which is a form of TasksState, plural?

125
00:07:32.170 --> 00:07:38.649
Plural, even though that means I have to
say it more, it's still the right choice.

126
00:07:38.649 --> 00:07:44.851
And that can start out as simply, And

127
00:07:44.851 --> 00:07:49.135
now, if you look at the type of this one,
other than the fact that it's not used,

128
00:07:49.135 --> 00:07:51.597
right, you can see that
it has the right type.

129
00:07:51.597 --> 00:07:55.620
So now we can push task on it and nothing
else, so we get all the type safety.

130
00:07:55.620 --> 00:07:58.137
Type safety is totally worth it
as long as you don't accidentally

131
00:07:58.137 --> 00:07:59.720
opt yourself out of it.

132
00:07:59.720 --> 00:08:04.128
And I will probably need this shape for
unit tests later, so I'll export it now.

133
00:08:04.128 --> 00:08:08.630
So we've got that shape there, now what
we wanna do is just create a slice, so

134
00:08:08.630 --> 00:08:10.730
we can kinda see the pieces in here.

135
00:08:10.730 --> 00:08:15.670
And so with that, we can say createSlice
and pull that off of Redux Toolkit.

136
00:08:15.670 --> 00:08:20.261
If you have Redux Toolkit, you have Redux.

137
00:08:20.261 --> 00:08:23.263
This is a thing in Redux Toolkit,
but you can use them,

138
00:08:23.263 --> 00:08:26.541
you can migrate them together,
it works out really great.

139
00:08:26.541 --> 00:08:30.351
So we'll say that this is a tasksSlice.

140
00:08:33.068 --> 00:08:34.933
And this takes an object.

141
00:08:36.931 --> 00:08:40.986
And what this will do is we give it
a name, and this is just what it prefixes

142
00:08:40.986 --> 00:08:45.370
all the actions with, so that when you
see in the dev tooling, cuz you be like,

143
00:08:45.370 --> 00:08:47.245
I'm gonna call this action add.

144
00:08:47.245 --> 00:08:51.122
And then later, two weeks now,
you're like, what is it even adding?

145
00:08:51.122 --> 00:08:52.101
I don't even know.

146
00:08:52.101 --> 00:08:55.410
So this gives you the ability
to namespace that right now.

147
00:08:55.410 --> 00:09:00.630
We pass in the initialState and then
finally, it needs some level of reducers.

148
00:09:00.630 --> 00:09:03.286
And reducers look a little bit different,
but

149
00:09:03.286 --> 00:09:07.290
I don't think I can repeat this
enough in the very beginning.

150
00:09:07.290 --> 00:09:12.211
This will just basically spit out stuff
you can normally use in a regular

151
00:09:12.211 --> 00:09:13.202
Redux setup.

152
00:09:13.202 --> 00:09:17.344
None of this, I will say it one more time,
this is all like a buffet, take the parts

153
00:09:17.344 --> 00:09:20.972
that interests you, take the parts
that you can use today or tomorrow.

154
00:09:20.972 --> 00:09:25.740
Keep your existing infrastructure, you
do not have to rewrite anything, right?

155
00:09:25.740 --> 00:09:29.812
But you will get some niceties and
some conveniences, if you're like, hey,

156
00:09:29.812 --> 00:09:32.409
new features moving forward,
awesome, right?

157
00:09:32.409 --> 00:09:34.929
Existing stuff we keep,
especially if it's working,

158
00:09:34.929 --> 00:09:38.110
sometimes rewriting stuff that
works is fraught with peril.

159
00:09:38.110 --> 00:09:40.970
So we'll keep that in place here.

160
00:09:40.970 --> 00:09:47.036
And then we create some actions, but
we don't have to make 17 other files.

161
00:09:47.036 --> 00:09:49.528
Everything will live,
everything about this concept of a task,

162
00:09:49.528 --> 00:09:52.110
I'll even lowercase the l
like a normal person.

163
00:09:52.110 --> 00:09:57.072
And everything can live inside this
file and have one encapsulated place,

164
00:09:57.072 --> 00:10:01.954
but it's all the same stuff that we'll
get under the hood no matter what,

165
00:10:01.954 --> 00:10:04.809
again, with better TypeScript support.

166
00:10:04.809 --> 00:10:09.811
So we will also then say stuff like
addTask and we'll just start out by

167
00:10:09.811 --> 00:10:15.387
saying, And it looks like these
are almost like mini reducers.

168
00:10:19.022 --> 00:10:20.727
Right, well, they'll take the state,

169
00:10:20.727 --> 00:10:22.882
you can guess that the second
argument is an action.

170
00:10:22.882 --> 00:10:27.397
But instead of writing a series of
conditionals or, I still don't know

171
00:10:27.397 --> 00:10:32.820
the syntax for a switch statement, and
I at this point don't care to learn it.

172
00:10:32.820 --> 00:10:37.972
But instead of worrying about these
things and all those pieces you

173
00:10:37.972 --> 00:10:44.620
can basically say, have a bunch of methods
for the tasks that you expect to have.

174
00:10:44.620 --> 00:10:51.323
And what's really cool about this is that
not only is this setting up your reducer,

175
00:10:51.323 --> 00:10:56.495
but it's also creating the actions
that you can hand to dispatch

176
00:10:56.495 --> 00:11:04.000
as well as the action creators and wiring
up all of the types in TypeScript for you.

177
00:11:04.000 --> 00:11:05.660
So you will get it all for free.

178
00:11:05.660 --> 00:11:08.361
Now, if you're like, you turn out
you don't like this abstraction,

179
00:11:08.361 --> 00:11:11.440
you can actually take the two pieces
of createReducer and createActions.

180
00:11:11.440 --> 00:11:14.773
I use createAction even when
I'm not using Redux, and

181
00:11:14.773 --> 00:11:17.620
it will still wire up a lot of this for
you.

182
00:11:17.620 --> 00:11:19.733
Let's look at it all together first.

183
00:11:19.733 --> 00:11:23.184
So we have this in place, and let's
just grab one of these for a second and

184
00:11:23.184 --> 00:11:25.804
just kinda look at what we get
at the end of the day here.

185
00:11:25.804 --> 00:11:31.827
So we'll say test slice, and
this got a bunch of things.

186
00:11:31.827 --> 00:11:36.578
Plural, And we'll say actions.

187
00:11:36.578 --> 00:11:39.980
And you can see that for
every property that I put on the reducer,

188
00:11:39.980 --> 00:11:41.685
you can see add and remove task.

189
00:11:41.685 --> 00:11:43.292
Well, do you see add and remove task here?

190
00:11:43.292 --> 00:11:45.715
For every action I put on the reducer,

191
00:11:45.715 --> 00:11:49.444
it automatically creates
an action in the reducer for me.

192
00:11:49.444 --> 00:11:54.040
And I can just have these, and these are
things I can pass into the reducer now and

193
00:11:54.040 --> 00:11:55.354
it will all just work.

194
00:11:55.354 --> 00:11:58.681
&gt;&gt; Is that with or without TypeScript?

195
00:11:58.681 --> 00:12:02.666
&gt;&gt; Normally if you're using VS Code,
if you're writing JavaScript and

196
00:12:02.666 --> 00:12:05.704
under the hood it's got types,
VS Code will be like,

197
00:12:05.704 --> 00:12:08.283
yooh, here are the options for you, right?

198
00:12:08.283 --> 00:12:11.705
It's not gonna yell at you
when you mess it up, but

199
00:12:11.705 --> 00:12:13.914
the hints will be there for you.

200
00:12:13.914 --> 00:12:19.445
So yeah, it's one of those things, even
if you're not a TypeScript shop-it-all,

201
00:12:19.445 --> 00:12:24.674
having stuff with great TypeScript support
still benefits you in your day to day,

202
00:12:24.674 --> 00:12:25.234
right?

203
00:12:25.234 --> 00:12:29.823
And also, VS Code, if you have really
great JSDoc notation written above your

204
00:12:29.823 --> 00:12:32.760
functions, you'll also get that.

205
00:12:32.760 --> 00:12:38.298
However, I think that especially for
non libraries like in internal code,

206
00:12:38.298 --> 00:12:43.070
most people do not do meticulous
JSDocs for their internal code.

207
00:12:43.070 --> 00:12:44.435
So you tend not to have it as much.

208
00:12:44.435 --> 00:12:48.100
So having some of the stuff kind of
ready to go is incredibly important.

209
00:12:49.290 --> 00:12:53.128
And out of the box you saw they
had the autocomplete there,

210
00:12:53.128 --> 00:12:59.230
it is automatically going to create a task
with the action type tasks/addTask, right?

211
00:12:59.230 --> 00:13:03.351
So you automatically get those three or
four different files that you

212
00:13:03.351 --> 00:13:07.417
would have made previously already
wired up for you and ready to go.

213
00:13:07.417 --> 00:13:10.727
And that's, again,
incredibly kind of powerful piece in here.

