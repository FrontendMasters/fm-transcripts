WEBVTT

1
00:00:00.367 --> 00:00:04.631
Before, you saw that we kicked off that
thunk ourself, and you could do that.

2
00:00:04.631 --> 00:00:08.755
What I'm gonna kinda do is show you that
to make the point of other than the fact

3
00:00:08.755 --> 00:00:13.005
that is using a Redux store under the
hood, you can do this stuff agnostically,

4
00:00:13.005 --> 00:00:16.193
or you can integrate it with
your current infrastructure.

5
00:00:16.193 --> 00:00:20.318
Either one of those are acceptable
options, in this case.

6
00:00:20.318 --> 00:00:22.726
So let's go back into our API servers for
a little bit.

7
00:00:22.726 --> 00:00:29.728
And what's kinda cool about
this is I can go in here now.

8
00:00:29.728 --> 00:00:35.604
And let's say, for instance,

9
00:00:35.604 --> 00:00:40.394
I wanted to export const.

10
00:00:40.394 --> 00:00:43.029
Export const = taskapi,

11
00:00:43.029 --> 00:00:48.550
we'll see what we get
the autocomplete with item API.

12
00:00:48.550 --> 00:00:53.155
[INAUDIBLE] I was originally gonna do this
in the other app, but I decided why not.

13
00:00:53.155 --> 00:01:01.262
So we'll say, Check this out.

14
00:01:01.262 --> 00:01:04.139
All I did was define an endpoint.

15
00:01:04.139 --> 00:01:09.002
The autocomplete there are two premade

16
00:01:09.002 --> 00:01:13.132
react hooks ready to go, right?

17
00:01:13.132 --> 00:01:18.103
So these are hooks that if you've ever
used swr, or anything along those lines,

18
00:01:18.103 --> 00:01:22.121
that will go and give you,
you write your own custom fetcher, and

19
00:01:22.121 --> 00:01:24.483
you pass it in, all that kinda stuff.

20
00:01:24.483 --> 00:01:29.262
The really cool thing that this will do is
it will generate the hook for you, right,

21
00:01:29.262 --> 00:01:30.989
that you can export and have.

22
00:01:30.989 --> 00:01:33.964
And you can then pull this in anywhere.

23
00:01:33.964 --> 00:01:38.876
As soon as you call that,
you get everything automatically and for

24
00:01:38.876 --> 00:01:40.902
free in your application.

25
00:01:40.902 --> 00:01:43.756
So let's go try it out.

26
00:01:43.756 --> 00:01:45.824
Let's go into our components.

27
00:01:45.824 --> 00:01:46.862
Let's head over into application.

28
00:01:46.862 --> 00:01:50.735
I guess I could do it in
the individual items list.

29
00:01:50.735 --> 00:01:53.620
But let's go ahead.

30
00:01:56.175 --> 00:01:58.278
Let's make one list for now.

31
00:01:58.278 --> 00:02:03.569
And we'll do stuff with it, cool.

32
00:02:03.569 --> 00:02:07.171
And so we'll say is const,

33
00:02:07.171 --> 00:02:12.636
let's do our use, ItemsQuery.

34
00:02:16.341 --> 00:02:17.642
What do we have in here?

35
00:02:20.763 --> 00:02:22.422
We've got a whole bunch of stuff.

36
00:02:22.422 --> 00:02:24.056
We've got data.

37
00:02:24.056 --> 00:02:26.145
There's data and there's current data.

38
00:02:26.145 --> 00:02:28.653
One is what is the last thing it had?

39
00:02:28.653 --> 00:02:32.379
One is immediately have or
nothing, in this case.

40
00:02:32.379 --> 00:02:37.349
We've also got isLoading,
excuse me, all the states.

41
00:02:37.349 --> 00:02:41.792
This is really cool, because to your point
before, where we were like, so we set it.

42
00:02:41.792 --> 00:02:44.985
And then when it fills, we unset it,
and all those things is like,

43
00:02:44.985 --> 00:02:46.823
those abstractions are done for you.

44
00:02:46.823 --> 00:02:51.037
So here you've got isLoading,
isSuccess, right,

45
00:02:51.037 --> 00:02:54.418
which might mean isSuccess, it's good.

46
00:02:54.418 --> 00:02:58.087
isUninitialized means we have never
even tried to load this, right,

47
00:02:58.087 --> 00:02:59.648
which could be interesting.

48
00:02:59.648 --> 00:03:01.702
isFetching is different than isLoading.

49
00:03:01.702 --> 00:03:06.528
And this is where I was like
immediately like, yo, sold,

50
00:03:06.528 --> 00:03:10.084
which is this how it goes for
me every time.

51
00:03:10.084 --> 00:03:11.954
I need a loading indicator.

52
00:03:11.954 --> 00:03:13.069
I show my loading indicator.

53
00:03:13.069 --> 00:03:14.823
You'd think I'd learned at this point.

54
00:03:14.823 --> 00:03:16.493
I show my loading indicator.

55
00:03:16.493 --> 00:03:19.068
And then eventually I'm like,
you know what I should do?

56
00:03:19.068 --> 00:03:24.227
I should update, eventually, this data.

57
00:03:24.227 --> 00:03:27.427
And then I have to deal with
the state of the array.

58
00:03:27.427 --> 00:03:30.047
I already had the first set of data.

59
00:03:30.047 --> 00:03:31.280
And now I'm loading more, and

60
00:03:31.280 --> 00:03:34.372
then I accidentally show the skeleton
loader while I'm working on it again.

61
00:03:34.372 --> 00:03:37.924
And then I have to come up with this
new state, which is we have data and

62
00:03:37.924 --> 00:03:41.723
we're loading more, which is a different
UX than we're loading data for

63
00:03:41.723 --> 00:03:43.033
the first time, right?

64
00:03:43.033 --> 00:03:46.992
And this is automatically handled for you.

65
00:03:46.992 --> 00:03:49.463
isLoading is only called the first
time it's loading the data.

66
00:03:49.463 --> 00:03:52.869
isFetching, it's called the other
times that it's updating the data.

67
00:03:52.869 --> 00:03:56.114
So instantly you know if this
is an update, or whether or

68
00:03:56.114 --> 00:04:00.613
not you're loading, and all of that is
built in for you and handled, right?

69
00:04:00.613 --> 00:04:05.431
And again, I'm using a React application,
and I'm getting the React hook for free,

70
00:04:05.431 --> 00:04:08.335
but it's completely framework agnostic,
right,

71
00:04:08.335 --> 00:04:12.437
cuz you're gonna have all these things
kinda built in for you ready to go.

72
00:04:12.437 --> 00:04:17.848
And so we gonna can pull in
isLoading in this case as well.

73
00:04:17.848 --> 00:04:20.686
And I really just want
the data at this point.

74
00:04:20.686 --> 00:04:25.174
And we'll see an interesting problem we
have to solve for in a second, which is,

75
00:04:25.174 --> 00:04:28.880
yeah, that could be undefined,
right, if it's not loaded yet.

76
00:04:28.880 --> 00:04:30.565
But we'll get the isLoading.

77
00:04:30.565 --> 00:04:35.606
And again, because I'm using mirage,
I'm just using the rest serializer again,

78
00:04:35.606 --> 00:04:38.589
I know that it's going to be,
I said it was tasks.

79
00:04:38.589 --> 00:04:42.410
But I also know that I need to deal with
the fact that I gotta get that object key

80
00:04:42.410 --> 00:04:43.504
and stuff like that.

81
00:04:43.504 --> 00:04:48.010
I can do that with my UI, we'll see how
to transform stuff, or select stuff and

82
00:04:48.010 --> 00:04:50.489
a bunch of really cool things around that.

83
00:04:50.489 --> 00:04:55.447
But let's just handle it in
the most silly way at first,

84
00:04:55.447 --> 00:04:59.996
and you can find out different
stuff along the way.

85
00:04:59.996 --> 00:05:04.071
So here we'll say, in fact,
let me actually just change the type,

86
00:05:04.071 --> 00:05:06.159
cuz a slightly line at the moment.

87
00:05:06.159 --> 00:05:12.774
So this is items with an item, and
it will deal with it in other ways later.

88
00:05:12.774 --> 00:05:17.648
Cool, and then so what I would
seek to do is say that let's do

89
00:05:17.648 --> 00:05:21.169
the most straightforward thing at first.

90
00:05:21.169 --> 00:05:25.605
We'll say that items,
and we will fix this.

91
00:05:28.000 --> 00:05:29.822
UseMemo and just,

92
00:05:36.666 --> 00:05:41.058
Or give me an empty array, that way
I don't have to deal with maps and

93
00:05:41.058 --> 00:05:42.921
stuff like that, awesome.

94
00:05:42.921 --> 00:05:45.691
And you can see my typing holds up.

95
00:05:45.691 --> 00:05:48.070
All I had to do at the very
beginning is say what it was.

96
00:05:48.070 --> 00:05:51.941
I guess you'll notice that TypeScript put
that question mark in there for me for

97
00:05:51.941 --> 00:05:53.984
my safety, but against my well, right?

98
00:05:53.984 --> 00:05:59.295
This is a reasonish syntax,
which is if you've ever had

99
00:05:59.295 --> 00:06:04.721
to do data.items or
data if it exists, then data items.

100
00:06:04.721 --> 00:06:08.715
Or this and or that and do a set of
conditional statements on the way,

101
00:06:08.715 --> 00:06:11.321
the question mark will handle that for
you.

102
00:06:11.321 --> 00:06:13.814
And we can have this in place,
and now we can pass this in.

103
00:06:21.800 --> 00:06:24.524
So we've got items,
it's not assignable, ItemProps.

104
00:06:24.524 --> 00:06:25.911
Let's see what I decided.

105
00:06:29.360 --> 00:06:32.405
I just took that out, cuz I don't wanna
get yelled at TypeScript at that moment.

106
00:06:36.380 --> 00:06:40.623
Cool, that's passing ideas off to
transform then a little bit, but

107
00:06:40.623 --> 00:06:43.302
let's actually pass in
a full item right now.

108
00:06:54.944 --> 00:06:57.668
Awesome, so
we'll see all that in a second.

109
00:07:01.219 --> 00:07:04.042
All right, and then we'll go down
into the item and get that ready.

110
00:07:10.302 --> 00:07:11.117
Cool.

111
00:07:13.432 --> 00:07:14.455
Check that out.

112
00:07:14.455 --> 00:07:15.789
Oop, item.

113
00:07:18.196 --> 00:07:21.442
I'll look at my type in a second.

114
00:07:21.442 --> 00:07:23.657
[INAUDIBLE] But we'll see.

115
00:07:31.216 --> 00:07:32.286
Awesome.

116
00:07:42.560 --> 00:07:44.447
What you mad about, let's see my types.

117
00:07:47.539 --> 00:07:51.478
I might have to glance that, cuz I'm not
quite sure why it's so angry about that,

118
00:07:51.478 --> 00:07:52.290
but we'll see.

119
00:07:54.311 --> 00:07:56.062
&gt;&gt; [CROSSTALK]
&gt;&gt; Structuring item into item,

120
00:07:56.062 --> 00:07:56.866
I don't know.

121
00:07:56.866 --> 00:07:59.014
&gt;&gt; What's that?
&gt;&gt; I don't know this is right.

122
00:07:59.014 --> 00:08:03.768
&gt;&gt; It's declared again on line 10 there.

123
00:08:03.768 --> 00:08:06.091
&gt;&gt; On this file?

124
00:08:06.091 --> 00:08:09.316
Yeah, that's the hard-coded one,
but it should still be.

125
00:08:09.316 --> 00:08:10.396
That was enough.

126
00:08:10.396 --> 00:08:11.941
Thank you, live coding friends.

127
00:08:14.318 --> 00:08:18.622
Yeah, the still render while I don't
have data protections that I put in for

128
00:08:18.622 --> 00:08:20.378
myself beat me late in the day.

129
00:08:20.378 --> 00:08:22.021
That's always lovely.

130
00:08:26.443 --> 00:08:27.641
Now we'll pass them in.

131
00:08:30.829 --> 00:08:31.763
Awesome.

132
00:08:37.257 --> 00:08:38.291
Cool, awesome.

133
00:08:38.291 --> 00:08:39.494
What you mad about?

134
00:08:42.848 --> 00:08:44.846
If I don't say files changes,
this don't matter.

135
00:08:48.540 --> 00:08:50.127
I installed that, right?

136
00:08:50.127 --> 00:08:51.364
Give me a second.
I'll work this out, and

137
00:08:51.364 --> 00:08:52.699
then we'll pick it up from there.

138
00:08:52.699 --> 00:08:54.384
Y'all watched me install that, right?

139
00:09:10.330 --> 00:09:13.097
I just need to restart the server,
awesome.

140
00:09:13.097 --> 00:09:17.979
So despite last minute refactoring there,
and the fact that if you don't save files

141
00:09:17.979 --> 00:09:22.191
and restart your server after NPM
install stuff, you have a few issues.

142
00:09:22.191 --> 00:09:24.617
But with an automatically set up hook,

143
00:09:24.617 --> 00:09:27.493
I kinda get everything
in place out of the box.

144
00:09:27.493 --> 00:09:32.445
And setting up, I wanna show you
that why I'm interested in it

145
00:09:32.445 --> 00:09:37.217
mostly in the way I have a few
features built in it right now.

146
00:09:37.217 --> 00:09:42.193
That I'm kinda in a proof of concept,
is that the fact that I then get all of

147
00:09:42.193 --> 00:09:47.171
this in the tools, and I can mostly am
in the process of swapping out a bunch

148
00:09:47.171 --> 00:09:50.898
of pieces of this,
I can kind of see that I'm getting.

149
00:09:50.898 --> 00:09:55.224
All right, the middleware is registered,
I'm getting the pendeen ready to go.

150
00:09:55.224 --> 00:09:57.500
And this is for all the items.

151
00:09:57.500 --> 00:10:02.000
I get the status of failed, all of these
things that I can then work with for

152
00:10:02.000 --> 00:10:04.552
the rest of my existing infrastructure.

153
00:10:04.552 --> 00:10:09.082
But then I get a whole bunch of
functionality that for free.

154
00:10:09.082 --> 00:10:13.519
So for instance,
I can do stuff like if I go into the hook,

155
00:10:13.519 --> 00:10:17.321
there are a bunch of options
that this will take.

156
00:10:17.321 --> 00:10:20.630
So first it takes just what was
the thing you were looking for?

157
00:10:25.557 --> 00:10:30.296
And also refetch the data on
an interval of every 120 seconds.

158
00:10:30.296 --> 00:10:35.281
I'll do something shorter so
we can see it, but we have this in place.

159
00:10:35.281 --> 00:10:42.498
And yeah, we can put a loader up too, cuz
that's fun, just put an easy one in here.

160
00:10:42.498 --> 00:10:46.450
&gt;&gt; But this is only supposed
to show up once, right?

161
00:10:46.450 --> 00:10:48.702
&gt;&gt; Loading should show up once.

162
00:10:48.702 --> 00:10:50.891
isFetching should show up every time.

163
00:10:53.680 --> 00:11:00.867
And the fact that I don't have to
do all this anymore is wonderful.

164
00:11:00.867 --> 00:11:04.573
Cool, so let's say I don't need to
style it, we'll see, it will be great.

165
00:11:07.357 --> 00:11:11.483
Let's shrink these tools
just a little bit.

166
00:11:11.483 --> 00:11:16.774
Now, those rerenders are showing you
that it is rerendered every time.

167
00:11:16.774 --> 00:11:19.015
Where did my loading go?

168
00:11:19.015 --> 00:11:22.411
But if I look at the tools,
did you see that I am getting,

169
00:11:22.411 --> 00:11:27.111
cuz I set it to something ridiculous so
that we would see it loading the tools,

170
00:11:27.111 --> 00:11:29.888
but I'm automatically getting repolling.

171
00:11:29.888 --> 00:11:33.624
There's another listener that I can set
up, which is if they re-navigate, or

172
00:11:33.624 --> 00:11:36.935
the browser reconnects, so
navigator goes offline and then online.

173
00:11:36.935 --> 00:11:39.310
You get a lot of that
functionality built in.

174
00:11:39.310 --> 00:11:44.038
Now, in so far that it it's simply
the abstraction of fetching data, and

175
00:11:44.038 --> 00:11:46.858
those actions, as we talked about before,

176
00:11:46.858 --> 00:11:51.762
will go through the remainder of your
reducers and stuff along those lines.

177
00:11:51.762 --> 00:11:54.798
It is a really great option
if you have a Redux setup.

178
00:11:54.798 --> 00:11:59.738
I think that rare query has on
the checklist a few more features,

179
00:11:59.738 --> 00:12:02.848
totally, but the part that is, for me,

180
00:12:02.848 --> 00:12:08.908
as we have to do crazy stuff with our
event history and stuff along those lines.

181
00:12:08.908 --> 00:12:11.603
The ability to cache the data
of very large payloads and

182
00:12:11.603 --> 00:12:14.836
immediately navigate and
then kick it out from memory and stuff.

183
00:12:14.836 --> 00:12:18.654
And there's a bunch of really powerful
features around this that I think work

184
00:12:18.654 --> 00:12:20.838
really well inside of this larger toolset.

185
00:12:20.838 --> 00:12:23.566
It is definitely a full thing in and
of itself.

186
00:12:23.566 --> 00:12:27.888
But something that I responsibly wanted
to kind of put on the radar, and

187
00:12:27.888 --> 00:12:29.121
I need to turn that.

188
00:12:29.121 --> 00:12:33.851
That was, all right, polling every 20
was a little, not even 20 seconds,

189
00:12:33.851 --> 00:12:38.314
right, cuz that's milliseconds,
was probably a little bit ambitious.

190
00:12:38.314 --> 00:12:41.846
So let's turn that off for a second so
I can concentrate while I talk to you.

191
00:12:41.846 --> 00:12:45.580
No stops, life is good.

192
00:12:45.580 --> 00:12:50.401
Is incredibly powerful, cuz that I get
the tooling with the rest of my state and

193
00:12:50.401 --> 00:12:53.261
kind of can navigate
around all those things.

194
00:12:53.261 --> 00:12:57.278
And it will work with any kind
of transport layer that you're

195
00:12:57.278 --> 00:12:58.552
working through.

196
00:12:58.552 --> 00:13:02.279
So I actually need to
support multiple ones,

197
00:13:02.279 --> 00:13:07.086
both literally talking to
a gRPC server running locally,

198
00:13:07.086 --> 00:13:10.138
or HTTP if I'm on the cloud version.

199
00:13:10.138 --> 00:13:14.572
And being able to do both those things by
swapping in just a different endpoints

200
00:13:14.572 --> 00:13:19.003
object, right, on the fly, is there's
a lot of power that hooks into a larger

201
00:13:19.003 --> 00:13:22.721
Redux ecosystem, and I think with
a lot of promise there as well.

202
00:13:22.721 --> 00:13:24.853
And you get most of the abstractions.

203
00:13:24.853 --> 00:13:28.683
And then all the things that we talked
about earlier, about how every action goes

204
00:13:28.683 --> 00:13:32.760
through every reducer, right, it becomes
like a very easy migration path, right?

205
00:13:32.760 --> 00:13:36.912
It becomes the fact that those will then
flow through the parts of your application

206
00:13:36.912 --> 00:13:40.342
that do have client side state can
instantly hook into and listen for

207
00:13:40.342 --> 00:13:41.197
those actions.

208
00:13:41.197 --> 00:13:44.325
Cuz you can see them right in
the DevTools, and you can hook in,

209
00:13:44.325 --> 00:13:48.476
you can kind of do the pieces as you kind
of add those functionality progressively.

210
00:13:48.476 --> 00:13:49.897
Rather than me like, okay,

211
00:13:49.897 --> 00:13:53.881
well now I gotta figure out how to hotwire
this into my state management system.

212
00:13:53.881 --> 00:13:56.266
I'm not entirely sure it's,
like I said before,

213
00:13:56.266 --> 00:14:00.439
the right choice if you're completely
tabular and you don't have Redux at all.

214
00:14:00.439 --> 00:14:04.884
But I'm gonna assume at this
point if you're in the advanced

215
00:14:04.884 --> 00:14:09.417
Redux bandwagon this far in that
it's a thing that you have and

216
00:14:09.417 --> 00:14:13.441
part of your infrastructure and
definitely worth it.

217
00:14:13.441 --> 00:14:17.939
The API is solely, that create API,
some queries, some features and tweaks and

218
00:14:17.939 --> 00:14:19.807
knobs that you can turn, right?

219
00:14:19.807 --> 00:14:24.768
But the mutations are simply you'd get
put, post, the default base query is

220
00:14:24.768 --> 00:14:28.829
just a wrap around fetch that
puts in the initial route, yeah?

221
00:14:28.829 --> 00:14:31.692
&gt;&gt; There was also something
interesting in the Redux DevTools.

222
00:14:31.692 --> 00:14:34.404
So it looks like there is
a separate tab for RTK query-

223
00:14:34.404 --> 00:14:35.122
&gt;&gt; Yeah.

224
00:14:35.122 --> 00:14:37.241
&gt;&gt; That is shown on top of this.

225
00:14:39.267 --> 00:14:41.229
&gt;&gt; Right, these are the actual queries.

226
00:14:41.229 --> 00:14:43.522
&gt;&gt; So just pulls stuff from the-
&gt;&gt; Yep.

227
00:14:43.522 --> 00:14:44.031
&gt;&gt; Store.

228
00:14:44.031 --> 00:14:47.919
&gt;&gt; And as you can see,
those isError is a successful,

229
00:14:47.919 --> 00:14:51.820
what the timings are,
you can see those specific.

230
00:14:51.820 --> 00:14:53.547
You can do stuff like tagging
of the different requests.

231
00:14:53.547 --> 00:14:56.337
You can use invalidation later.

232
00:14:56.337 --> 00:15:01.248
And a lot of really interesting parts,
you actually see what the also

233
00:15:01.248 --> 00:15:07.104
subscriptions and sockets and stuff like
that are kinda supported out of the box.

234
00:15:07.104 --> 00:15:09.970
And so there's a lot of things.

235
00:15:09.970 --> 00:15:15.099
For me, one of the reasons I kinda
wanna bring it up is cuz I was 15% into

236
00:15:15.099 --> 00:15:21.090
implementing half the stuff myself, and I
was not having a good time, [LAUGH] right?

237
00:15:21.090 --> 00:15:23.344
I was doing it, but it was slow going.

238
00:15:23.344 --> 00:15:28.164
And I think that there's a set
of problems that this solves,

239
00:15:28.164 --> 00:15:30.347
or simple stuff like this.

240
00:15:30.347 --> 00:15:33.924
But there's a lot of the best practices,
the automatic setting of the loading,

241
00:15:33.924 --> 00:15:36.671
the fetching, the success,
even for very simple use cases.

242
00:15:36.671 --> 00:15:43.383
And like everything else that we've
talked about in our time together,

243
00:15:43.383 --> 00:15:48.238
does fit in a way that you
can progressively move in.

244
00:15:48.238 --> 00:15:51.250
You don't have to be like, well, we're
rewriting our data fetching layer, right?

245
00:15:51.250 --> 00:15:53.706
I think that, for me,
one of the very core and

246
00:15:53.706 --> 00:15:57.070
interesting parts here is that
you can progressively do it for

247
00:15:57.070 --> 00:16:01.811
just one piece of the application, because
it hooks into the larger infrastructure.

248
00:16:01.811 --> 00:16:03.450
You're not throwing away a lot of code.

249
00:16:03.450 --> 00:16:07.113
I think it's for most of us, for
our state management layer and

250
00:16:07.113 --> 00:16:11.134
our data fetching layer,
rewrites are kinda off the table, right?

251
00:16:11.134 --> 00:16:14.157
And so ways that you can progressively
get these features when you need them,

252
00:16:14.157 --> 00:16:15.518
I think is critically important.

