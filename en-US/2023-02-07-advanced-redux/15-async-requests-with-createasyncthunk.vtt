WEBVTT

1
00:00:00.250 --> 00:00:05.943
Okay, so we've now talked about
cross-modal reducers, we have TypeScript

2
00:00:05.943 --> 00:00:11.131
support, we have the beginnings of
a robust and beautiful test suite.

3
00:00:11.131 --> 00:00:12.929
It's got one test.

4
00:00:12.929 --> 00:00:14.283
It's the beginnings, right?

5
00:00:14.283 --> 00:00:16.168
Good things start small.

6
00:00:16.168 --> 00:00:20.975
I think the one thing in just regular
Redux that we want to talk about a little

7
00:00:20.975 --> 00:00:25.553
bit is, yeah I saw some questions in
the chat in the very beginning about

8
00:00:25.553 --> 00:00:27.411
the book promises, right?

9
00:00:27.411 --> 00:00:33.089
And one of the things I'm gonna say is
we'll also look at RTK query which is kind

10
00:00:33.089 --> 00:00:38.510
of a little bit separate from the state
management piece, but does have a,

11
00:00:38.510 --> 00:00:43.502
it's if Redux toolkit is the batteries
included version of Redux and

12
00:00:43.502 --> 00:00:48.611
RTK query, which you don't actually
even need to be using Redux for.

13
00:00:48.611 --> 00:00:53.100
Is for a lot more of the data fetching
pieces and caching and invalidating, and

14
00:00:53.100 --> 00:00:57.384
I'll kind of like mostly just give like
a high level tour of that cuz that's

15
00:00:57.384 --> 00:01:01.125
probably a long conversation ended
up itself that is adjacent but

16
00:01:01.125 --> 00:01:03.250
like maybe not the exact same topic.

17
00:01:03.250 --> 00:01:08.142
But I'll show both of them to you cuz one
is like, you can get start with both of

18
00:01:08.142 --> 00:01:13.037
them pretty easily but we'll take a look
about them, you can figure out which

19
00:01:13.037 --> 00:01:16.610
one is appropriate for you and
to navigate around that.

20
00:01:16.610 --> 00:01:18.363
So previously on Redux,

21
00:01:18.363 --> 00:01:23.961
Redux was completely unaware of the idea
that asynchrony could exist, right?

22
00:01:23.961 --> 00:01:28.519
It's simply, like I said before,
function, currency of the world, action,

23
00:01:28.519 --> 00:01:29.736
new thing comes out.

24
00:01:29.736 --> 00:01:31.455
That's it.

25
00:01:31.455 --> 00:01:33.040
Middleware, maybe, right?

26
00:01:33.040 --> 00:01:37.127
And middleware just gave you the ability
to fire off more stuff based on the first

27
00:01:37.127 --> 00:01:38.164
thing that came in.

28
00:01:38.164 --> 00:01:39.610
And do side effects.

29
00:01:39.610 --> 00:01:43.418
One of those side effects could be wait
for the, get this thing action to come in,

30
00:01:43.418 --> 00:01:46.106
get the thing, and
then fire off the second one, right?

31
00:01:46.106 --> 00:01:50.642
And like there was a library cold Redux
thunk, which some of this might be my

32
00:01:50.642 --> 00:01:54.530
ageing memory but I remember
correctly Dami went off wrote it and

33
00:01:54.530 --> 00:01:58.710
like at first it was just kind of
a demo to show how middleware worked.

34
00:01:58.710 --> 00:02:03.183
I don't know that he fully expected it
become like the de facto way that everyone

35
00:02:03.183 --> 00:02:06.587
did a think, there was like Redux
promise there are some very

36
00:02:06.587 --> 00:02:08.752
Sophisticated libraries out there.

37
00:02:08.752 --> 00:02:13.317
I think some of the previous versions
of the state mandatorys they've done,

38
00:02:13.317 --> 00:02:17.980
we talk about like Redux observable and
I think in earlier one, Redux saga.

39
00:02:17.980 --> 00:02:22.417
And Redux observable uses like Rx js and
there's a crazy stuff that you can do in

40
00:02:22.417 --> 00:02:26.399
the middleware as well and
some interesting libraries built on that.

41
00:02:26.399 --> 00:02:31.866
And if you know that you need the stuff
in redux observable, absolutely go ahead,

42
00:02:31.866 --> 00:02:35.907
drop that in as a middleware,
do it but generally speaking,

43
00:02:35.907 --> 00:02:40.770
you probably have a very sophisticated
use case that you need to do that.

44
00:02:40.770 --> 00:02:45.284
And it lets you start and pause and
do all sorts of, use all of xjs and

45
00:02:45.284 --> 00:02:50.686
all of the observables in this flow which
is definitely necessary sometimes but

46
00:02:50.686 --> 00:02:53.603
maybe slightly overkill most of the time.

47
00:02:53.603 --> 00:02:58.500
I say that somebody who worked on a very
large app that did it like it was

48
00:02:58.500 --> 00:03:02.554
useful for us but
like we were doing lots of stuff with it,

49
00:03:02.554 --> 00:03:04.926
I don't reach for it every time.

50
00:03:04.926 --> 00:03:05.860
Cool.

51
00:03:05.860 --> 00:03:10.732
But, so let's talk about what is built in
and ready to go in the case that you're

52
00:03:10.732 --> 00:03:16.620
not gonna reach for something fully, large
with an entire, learning curve investment.

53
00:03:16.620 --> 00:03:21.189
Let's say you have a situation where
you would like to call an API.

54
00:03:21.189 --> 00:03:25.594
So I heard you'd like to call an API, and

55
00:03:25.594 --> 00:03:30.920
let's do it for
in this case creating a new task.

56
00:03:30.920 --> 00:03:33.279
I don't know if we wired that up yet.

57
00:03:33.279 --> 00:03:36.780
We have add task but we'll show how
this works cuz a lot of times you'll say

58
00:03:36.780 --> 00:03:40.890
there's a difference between firing off
the request and hearing that it came back.

59
00:03:40.890 --> 00:03:43.834
Those are actions.
Right, or at least hearing the state that

60
00:03:43.834 --> 00:03:47.726
it came back, put in your store
is still as it always was, right?

61
00:03:47.726 --> 00:03:52.415
You'll be like this thing came back,
I might choose to put in the store so

62
00:03:52.415 --> 00:03:55.098
on and so forth,
there might be other ways.

63
00:03:55.098 --> 00:04:00.066
And you could do things optimistic
updates, which is, they hit the button,

64
00:04:00.066 --> 00:04:04.746
add it to the list, right, immediately
if the promise comes back rejected,

65
00:04:04.746 --> 00:04:07.266
take it back out and put an error, right?

66
00:04:07.266 --> 00:04:11.198
To simulate, especially for
things that are pretty reliable.

67
00:04:11.198 --> 00:04:15.011
As somebody who works on
an application where the development

68
00:04:15.011 --> 00:04:17.868
version is running
locally on their machine,

69
00:04:17.868 --> 00:04:22.210
and I'm not going over a network
sometimes in our cloud offering I am.

70
00:04:22.210 --> 00:04:24.790
But when it's running the machine,
I'm not,

71
00:04:24.790 --> 00:04:28.597
I can be highly confident in those cases,
that is gonna work, right,

72
00:04:28.597 --> 00:04:32.547
especially cuz I have literally
an environment variable that tells me.

73
00:04:32.547 --> 00:04:35.080
So yeah, there's stuff that
you can do in that case.

74
00:04:35.080 --> 00:04:40.337
But I'm gonna show you the primitives
how you choose to strategize around

75
00:04:40.337 --> 00:04:45.616
it is obviously gonna matter for
your particular situation and your app.

76
00:04:45.616 --> 00:04:47.530
So let's look at how it works.

77
00:04:47.530 --> 00:04:53.224
It does happen kind of
outside of this object here.

78
00:04:53.224 --> 00:04:57.686
But the good thing is anything
that happens outside of this

79
00:04:57.686 --> 00:05:00.060
object can be handled in here.

80
00:05:01.230 --> 00:05:05.715
And I should note we saw create action
at the very beginning of this workshop.

81
00:05:05.715 --> 00:05:09.235
You can make actions don't
belong to any reducer.

82
00:05:09.235 --> 00:05:12.112
And then add them in on extra reducers.

83
00:05:12.112 --> 00:05:14.930
Do I have an example of one you would do?

84
00:05:14.930 --> 00:05:17.855
I don't.
[LAUGH] If you had something that happens

85
00:05:17.855 --> 00:05:21.986
in your application, and
it doesn't actually belong,

86
00:05:21.986 --> 00:05:25.490
it's not just reducer to or
slice to slice.

87
00:05:25.490 --> 00:05:30.621
It can be just any action anywhere
that's defined, all right?

88
00:05:30.621 --> 00:05:36.392
So with all that preamble,
we've got create async thunk and

89
00:05:36.392 --> 00:05:41.610
if the signature looks a lot
like create action to you.

90
00:05:43.550 --> 00:05:45.070
Yes.

91
00:05:45.070 --> 00:05:48.612
Right, so here we can say,

92
00:05:48.612 --> 00:05:53.850
it says tasks, tasks, tasks/fetch or

93
00:05:53.850 --> 00:05:58.870
create task or what did I wanna do.

94
00:05:58.870 --> 00:06:02.520
I want to fetch a skim from the API.

95
00:06:02.520 --> 00:06:07.639
So instead of loading if that data source,
like Warren farmer this JSON, and

96
00:06:07.639 --> 00:06:12.760
we actually hit the fake API that I
have running alongside this application,

97
00:06:12.760 --> 00:06:13.830
awesome.

98
00:06:13.830 --> 00:06:17.974
And so really in this case,
we give it an async function.

99
00:06:17.974 --> 00:06:21.473
In the same way that we
get give arguments here,

100
00:06:21.473 --> 00:06:27.660
you can pass in arguments to this case,
I just want to hit the basic API.

101
00:06:27.660 --> 00:06:30.754
So response.

102
00:06:30.754 --> 00:06:35.842
I will say that this is
going to await fetch

103
00:06:37.672 --> 00:06:39.610
API/tasks.

104
00:06:41.954 --> 00:06:44.950
Could I just get that and
then call responses to JSON?

105
00:06:44.950 --> 00:06:46.213
I could.

106
00:06:46.213 --> 00:06:48.650
I just don't want to.

107
00:06:48.650 --> 00:06:49.150
I like promise chains.

108
00:06:53.270 --> 00:06:58.190
So we've got that in place and
then with that, I might just return the,

109
00:06:58.190 --> 00:07:00.980
I know that the API is not just the array.

110
00:07:00.980 --> 00:07:04.450
It's tasks, a task key on there.

111
00:07:04.450 --> 00:07:07.078
&gt;&gt; Where does createAsyncThunk come from?

112
00:07:07.078 --> 00:07:10.590
&gt;&gt; Yeah, it is part of Redux toolkit
here so you get it for free.

113
00:07:12.020 --> 00:07:14.690
And like I said, I will repeat it again.

114
00:07:14.690 --> 00:07:17.253
Anything you see, you can have it all,

115
00:07:17.253 --> 00:07:21.950
you can just sample pieces from this-
&gt;&gt; Sir, everytime people

116
00:07:21.950 --> 00:07:24.739
talk about redux-thunk is that-
&gt;&gt; There is

117
00:07:24.739 --> 00:07:26.750
also a library called redux-thunk.

118
00:07:26.750 --> 00:07:28.939
&gt;&gt; Okay,
&gt;&gt; This is like imagine you took

119
00:07:28.939 --> 00:07:31.540
the goodness to resign create action.

120
00:07:32.560 --> 00:07:38.586
And also imagine you took redux-thunk,
And you package them up.

121
00:07:38.586 --> 00:07:39.530
What?

122
00:07:39.530 --> 00:07:40.525
&gt;&gt; But we haven't gone over yet.

123
00:07:40.525 --> 00:07:41.948
&gt;&gt; We're going through this,

124
00:07:41.948 --> 00:07:44.932
that's actually we're going to look at now
&gt;&gt; Redux-thunk.

125
00:07:44.932 --> 00:07:46.190
&gt;&gt; Yep, it is.

126
00:07:46.190 --> 00:07:51.990
The middleware is pre wired
in like Redux toolkit for us.

127
00:07:51.990 --> 00:07:55.223
When we did configure store,
it already took the middleware,

128
00:07:55.223 --> 00:07:57.940
the redux-thunk middleware,
put it in there.

129
00:07:57.940 --> 00:08:02.681
The reason we had to do that use app
dispatch is because regular use dispatch

130
00:08:02.681 --> 00:08:04.196
is not aware of thunks.

131
00:08:04.196 --> 00:08:07.610
So the use app dispatch is ready for
thunks.

132
00:08:07.610 --> 00:08:09.152
The store is configured
with the middleware.

133
00:08:09.152 --> 00:08:15.396
This is literally just now a syntactic
sugar utility function for like creating

134
00:08:15.396 --> 00:08:22.040
an action that knows when it when it's
called to initiate the promise, right?

135
00:08:22.040 --> 00:08:25.669
Or in this case or get a promise that
we're returning and our async function.

136
00:08:25.669 --> 00:08:30.445
It will then kick off is pending
action that will go through

137
00:08:30.445 --> 00:08:34.538
any reducer that cares,
right, if it goes well,

138
00:08:34.538 --> 00:08:40.192
it will figure out like the same
name of the function with fulfilled,

139
00:08:40.192 --> 00:08:43.570
and then if it goes poorly rejected.

140
00:08:43.570 --> 00:08:46.835
So it is all of the wiring
of promise.then,

141
00:08:46.835 --> 00:08:50.999
promise.catch before one
of those two things happen.

142
00:08:50.999 --> 00:08:54.278
Those actions,
as soon as this thing is kicked off,

143
00:08:54.278 --> 00:08:56.961
as soon as the like function this creates,

144
00:08:56.961 --> 00:09:01.002
is kicked off and dispatched,
those will fire as appropriate.

145
00:09:01.002 --> 00:09:03.410
And you do not have to think about it or

146
00:09:03.410 --> 00:09:07.843
even really know write anything about
it other than the fact that all

147
00:09:07.843 --> 00:09:11.996
those things that use some kind
of wire by hand are done for you.

148
00:09:11.996 --> 00:09:16.775
And as we do, if I type this correctly,
not type like finger type, but

149
00:09:16.775 --> 00:09:18.395
type is in TypeScript.

150
00:09:20.285 --> 00:09:23.823
If I type it correctly,
it will be fully typed.

151
00:09:23.823 --> 00:09:25.371
So I will get all that for

152
00:09:25.371 --> 00:09:29.410
free without feeling like I have
to figure all that stuff out.

153
00:09:30.550 --> 00:09:35.149
Cuz fetch is pretty like fast and
loose with what it gives you,

154
00:09:35.149 --> 00:09:37.372
even at the response at JSON.

155
00:09:37.372 --> 00:09:40.816
So it's a promise at any,
but if you say here, or

156
00:09:40.816 --> 00:09:43.680
even the return output of the function.

157
00:09:43.680 --> 00:09:44.589
So I can, let's try it both ways.

158
00:09:44.589 --> 00:09:46.980
Well, let's finish writing
the function first.

159
00:09:46.980 --> 00:09:51.374
I'll just say return, response.tasks and

160
00:09:51.374 --> 00:09:55.078
like, it doesn't know what that is.

161
00:09:55.078 --> 00:10:00.272
But if I say that this function
returns a promise, and

162
00:10:00.272 --> 00:10:06.044
there's a little bit you have
to know what you're doing but

163
00:10:06.044 --> 00:10:13.820
it's gonna say, okay, I'm gonna assume
that there are tasks coming out.

164
00:10:13.820 --> 00:10:16.677
So first of all you need to
store it in a variable so

165
00:10:16.677 --> 00:10:22.321
we'll call it const fetchTasks, Let's

166
00:10:22.321 --> 00:10:27.836
look at it real quick, Right?

167
00:10:27.836 --> 00:10:30.710
You can see that is assuming
that tasks come outta here.

168
00:10:30.710 --> 00:10:34.452
Now, there's a little
belief system in here, but

169
00:10:34.452 --> 00:10:38.377
like there's really no way,
no way is a strong word.

170
00:10:38.377 --> 00:10:40.810
Let's go with it, with an asterisk.

171
00:10:40.810 --> 00:10:41.524
There's no way for

172
00:10:41.524 --> 00:10:44.253
telescript to know what an API is gonna
give you from an external system.

173
00:10:44.253 --> 00:10:51.070
It can't scan that,
could you turn protobufs into types.

174
00:10:51.070 --> 00:10:53.809
Yes, but
that's just the same way of, yeah,

175
00:10:53.809 --> 00:10:58.744
you can generate types from a API spec but
truly, that's always the honor system.

176
00:10:58.744 --> 00:11:04.495
There's some bound to your system where
you have to deal with your trust issues,

177
00:11:04.495 --> 00:11:05.100
right?

178
00:11:05.100 --> 00:11:09.079
This is saying like I expect
what I expect to come

179
00:11:09.079 --> 00:11:13.066
back from this API is an array of tasks,
right?

180
00:11:13.066 --> 00:11:14.130
Cool.

181
00:11:14.130 --> 00:11:16.476
It's like my thing where it's
like when they say that,

182
00:11:16.476 --> 00:11:19.340
there's the front-end went down and
like the front end didn't go down.

183
00:11:19.340 --> 00:11:23.220
The backend went down and
that took the front-end down with it.

184
00:11:23.220 --> 00:11:26.143
When they report uptimes that
a company used to work at, OK.

185
00:11:26.143 --> 00:11:28.620
So we've got that in place.

186
00:11:28.620 --> 00:11:34.940
And now we need to deal with what do
we wanna do when this stuff happens?

187
00:11:34.940 --> 00:11:37.650
And so that lives in extra reducer land.

188
00:11:37.650 --> 00:11:43.593
And we just say, hey, builder,
just add a case for you.

189
00:11:43.593 --> 00:11:49.071
And we're gonna say something along the
lines of like I don't know like this case,

190
00:11:49.071 --> 00:11:53.921
I don't have to really think about it
at all I don't even want to know why so

191
00:11:53.921 --> 00:11:58.018
I don't know fetch tasks and
we've got fulfilled rejected.

192
00:11:58.018 --> 00:12:02.527
It's also got all the methods that
our function has unfortunately, so

193
00:12:02.527 --> 00:12:04.339
we got to deal with that too.

194
00:12:04.339 --> 00:12:08.634
It's there hiding that you can see
pending, you can see fulfilled,

195
00:12:08.634 --> 00:12:11.670
you can see rejected, but
also it is a function so

196
00:12:11.670 --> 00:12:15.180
it has prototype and
the rest of that fun stuff.

197
00:12:15.180 --> 00:12:18.522
Awesome, so say that hey,
when it's fulfilled,

198
00:12:18.522 --> 00:12:23.434
what I wanted to do is update the entire
state of the entities at this point.

199
00:12:23.434 --> 00:12:28.392
And so we just say state, Action.

200
00:12:30.146 --> 00:12:31.730
We'll peek at those in a second.

201
00:12:31.730 --> 00:12:33.494
It's gonna be the same
thing we saw last time.

202
00:12:33.494 --> 00:12:38.720
It knows that this is
gonna be a set of tasks.

203
00:12:38.720 --> 00:12:44.550
There is also a second thing that
I will talk about in a second but

204
00:12:44.550 --> 00:12:47.525
let's put this in place first.

205
00:12:47.525 --> 00:12:52.040
&gt;&gt; Can you use instead of fulfilled,
success?

206
00:12:52.040 --> 00:12:57.981
&gt;&gt; The ones that it's gonna give me for
free are fulfilled, rejected, and pending.

207
00:12:57.981 --> 00:13:01.580
You can see that this was given
to me by it automatically.

208
00:13:02.620 --> 00:13:08.572
&gt;&gt; So you no longer need to catch
the errors in the action itself.

209
00:13:08.572 --> 00:13:10.994
&gt;&gt; Not in the action itself,
I would probably,

210
00:13:10.994 --> 00:13:14.627
guess you notice this is some very
optimistic code up here, right,

211
00:13:14.627 --> 00:13:17.900
I just assumed my network
requests is gonna go well, right?

212
00:13:17.900 --> 00:13:22.793
You can also there's a second
argument in here we'll

213
00:13:22.793 --> 00:13:27.479
talk about a second I'll
show it to you real quick.

214
00:13:28.860 --> 00:13:29.439
And this object.

215
00:13:34.900 --> 00:13:36.166
I'm about to take a look at in a second.

216
00:13:36.166 --> 00:13:38.665
But there are ways to show like,

217
00:13:38.665 --> 00:13:43.910
what you want the projected
value to be and cuz promises.

218
00:13:43.910 --> 00:13:49.469
The fetch API and other promises
the fetch API only catches or

219
00:13:49.469 --> 00:13:53.185
throws if there's no network, right?

220
00:13:53.185 --> 00:13:59.780
If the fetch API comes back, and
it's got a 500 error or a 404.

221
00:13:59.780 --> 00:14:03.165
That's technically a resolved promise.

222
00:14:03.165 --> 00:14:08.239
Not what data that you wanted,
right, or were expecting,

223
00:14:08.239 --> 00:14:11.900
but it is technically a resolved promise.

224
00:14:11.900 --> 00:14:13.543
And so you have to deal with those things.

225
00:14:13.543 --> 00:14:17.270
And there are ways to kind of
deal with those cases as well.

226
00:14:17.270 --> 00:14:22.138
If the response status is greater than or
equal to 400 or something like that,

227
00:14:22.138 --> 00:14:24.296
you can do various things in there.

228
00:14:24.296 --> 00:14:25.990
Let's finish this part up first.

229
00:14:27.130 --> 00:14:28.998
So we got that.

230
00:14:28.998 --> 00:14:31.630
And we say, hey, it's fulfilled.

231
00:14:31.630 --> 00:14:34.142
You can see the action on there.

232
00:14:34.142 --> 00:14:38.240
You will see the request status
that's populated there as well.

233
00:14:38.240 --> 00:14:41.283
And that all kind of fits in there.

234
00:14:41.283 --> 00:14:46.730
And what we'll do is we'll say
when that happens, we'll just say,

235
00:14:49.554 --> 00:14:54.850
State.entities, I think I'm just
returning the array of tasks.

236
00:14:54.850 --> 00:14:57.303
At that point, that's why I pulled the,
I said response.tasks, right?

237
00:14:57.303 --> 00:15:06.470
Yeah, it's just an array of tasks,
state.entities Equals action.payload.

238
00:15:06.470 --> 00:15:10.337
It knows that that's an array of
tasks because I said that that's what

239
00:15:10.337 --> 00:15:12.117
the promise function returns.

240
00:15:12.117 --> 00:15:16.602
And so I just can swap out
that initial empty array with

241
00:15:16.602 --> 00:15:20.700
the loaded ones in this case, right?

242
00:15:20.700 --> 00:15:25.113
Let's go ahead and get rid of preloading
the data to see if that works now.

243
00:15:25.113 --> 00:15:27.933
This action was never kicked off.

244
00:15:27.933 --> 00:15:30.408
So immediately it's not gonna work.

245
00:15:30.408 --> 00:15:34.589
But ideally, so
say this is an empty array just

246
00:15:34.589 --> 00:15:38.569
don't get yelled at by various maps later.

247
00:15:38.569 --> 00:15:41.370
So we do need to kick this off somewhere.

248
00:15:41.370 --> 00:15:48.286
This is again, one of the things that I
think is cool about Redux overuse reducer.

249
00:15:48.286 --> 00:15:50.300
And user reducer is great to be clear.

250
00:15:50.300 --> 00:15:53.877
That's not a slag on user reducer,
but user reducer is a hook,

251
00:15:53.877 --> 00:15:57.535
which means what has to happen
before user reducer gets called.

252
00:15:57.535 --> 00:16:00.775
A component needs to be mounted,
which means you have gone and

253
00:16:00.775 --> 00:16:03.250
you have rendered the entire UI.

254
00:16:03.250 --> 00:16:07.098
Use effects are the last thing,
last-ish thing that happens

255
00:16:07.098 --> 00:16:11.840
in the component lifecycle or like
we've got a UI, let's go get some data.

256
00:16:15.080 --> 00:16:18.651
I usually like it in the other
direction or at the very least,

257
00:16:18.651 --> 00:16:20.621
do them at the same time, right?

258
00:16:20.621 --> 00:16:23.160
&gt;&gt; Is it layout effect?

259
00:16:23.160 --> 00:16:27.827
&gt;&gt; You still, use layout effect
is pretty late in the game too.

260
00:16:27.827 --> 00:16:32.540
It is before use effect, but at the end.

261
00:16:32.540 --> 00:16:33.810
Yeah, it's like second to last place.

262
00:16:33.810 --> 00:16:36.280
I think it's, yeah,
I forget the exact order.

263
00:16:36.280 --> 00:16:38.337
I used to like have it
completely memorized.

264
00:16:38.337 --> 00:16:40.749
Those all work and
because they're simple and again,

265
00:16:40.749 --> 00:16:45.000
it's one of those things which is like,
for some things, it doesn't really matter.

266
00:16:45.000 --> 00:16:48.006
Do the simple thing sometimes, you
don't need to bring in the big guns for

267
00:16:48.006 --> 00:16:48.597
everything.

268
00:16:48.597 --> 00:16:54.452
But generally speaking, so the cool thing
about this is since it's just an action,

269
00:16:54.452 --> 00:16:57.730
you get to choose when it gets fired.

270
00:16:57.730 --> 00:17:04.060
You can choose, to have it fired,
when a certain button is clicked, right?

271
00:17:04.060 --> 00:17:09.070
There are bindings in react router, right?

272
00:17:09.070 --> 00:17:10.353
So you can choose to do it, right?

273
00:17:10.353 --> 00:17:13.433
You can have actions fire
based on route changes and

274
00:17:13.433 --> 00:17:16.020
do stuff, right, you can choose to do it.

275
00:17:17.560 --> 00:17:19.548
When a mouse hovers over a button and

276
00:17:19.548 --> 00:17:22.338
you want to preload data into your store,
right?

277
00:17:22.338 --> 00:17:25.170
You fire this action when you deem fit.

278
00:17:25.170 --> 00:17:28.302
And you don't have a lot of
things telling you what to do.

279
00:17:28.302 --> 00:17:33.288
In fact, one of the things that we can do
is make sure I export this function cuz

280
00:17:33.288 --> 00:17:35.457
that seems to be my theme lately.

281
00:17:35.457 --> 00:17:39.086
We can go ahead and for instance,

282
00:17:39.086 --> 00:17:44.789
when the app cuz the tasks
in my task management app,

283
00:17:44.789 --> 00:17:50.506
that seems like a relatively core feature,
right?

284
00:17:50.506 --> 00:17:52.270
So what I can do is like cool.

285
00:17:52.270 --> 00:17:54.320
We're getting ready to start up the app.

286
00:17:54.320 --> 00:17:56.130
I've got the store here.

287
00:17:57.190 --> 00:18:02.327
I could theoretically say while we're
getting the app all like bootstrapped up,

288
00:18:02.327 --> 00:18:10.421
why don't you go ahead And
fetch the tasks.

289
00:18:10.421 --> 00:18:15.262
Right, so this is happening
as much as anything happens

290
00:18:15.262 --> 00:18:21.133
concurrently in the browser with
the initial rendering of the app.

291
00:18:21.133 --> 00:18:25.893
Now let's go see And
I'm gonna pull up cuz I

292
00:18:25.893 --> 00:18:30.691
don't see tasks that, so
it's currently not firing.

293
00:18:30.691 --> 00:18:31.222
Did I save that file?

294
00:18:34.930 --> 00:18:38.800
So if you got, if you don't call
functions, they don't dispatch anything.

295
00:18:38.800 --> 00:18:39.912
So it is a function.

296
00:18:39.912 --> 00:18:41.914
It's not just, you call it that is what,

297
00:18:41.914 --> 00:18:44.330
it's an action creator
just like anything else.

298
00:18:44.330 --> 00:18:48.452
So you can see it goes pending,
and it goes to field.

299
00:18:48.452 --> 00:18:51.470
And those are unique actions
that are added that are fired.

300
00:18:51.470 --> 00:18:58.768
So pending, What's really cool about this
is I can set a loading indicator, right?

301
00:18:58.768 --> 00:19:03.493
And when fulfilled happens,
I go ahead set loading to false, right?

302
00:19:03.493 --> 00:19:05.360
And it's not like setting.

303
00:19:05.360 --> 00:19:10.219
I can just do that as actions that flow
through the system, and what's really

304
00:19:10.219 --> 00:19:14.800
cool about this is let's say we
are waiting for the current user to load.

305
00:19:14.800 --> 00:19:18.185
Maybe multiple parts of
my UI care about that.

306
00:19:18.185 --> 00:19:22.809
And what probably would have been either
prop drilling or some other stuff before,

307
00:19:22.809 --> 00:19:26.989
maybe other reducers, other pieces
of state management care about that.

308
00:19:26.989 --> 00:19:28.745
User reducer is awesome, right?

309
00:19:28.745 --> 00:19:30.836
But it is bound to exactly that reducer,

310
00:19:30.836 --> 00:19:33.980
this idea that they go through
all of your state everywhere.

311
00:19:33.980 --> 00:19:37.940
And it's like, okay, multiple
things might wanna get kicked off.

312
00:19:37.940 --> 00:19:40.663
The current user and
their auth token, it just landed.

313
00:19:40.663 --> 00:19:41.463
Go and get all the data, right?

314
00:19:41.463 --> 00:19:42.590
And multiple things can kick off or
update things based on that and care.

315
00:19:42.590 --> 00:19:43.487
And I think it becomes
a really powerful abstraction.

