WEBVTT

1
00:00:00.170 --> 00:00:06.130
So unit testing may give you
the moral of the story first.

2
00:00:07.640 --> 00:00:12.656
It's very easy,
because as I've alluded to repeatedly,

3
00:00:12.656 --> 00:00:16.880
at the end of the day, it's a function.

4
00:00:16.880 --> 00:00:19.653
You put stuff and there's not like for
a certain amount of component, and

5
00:00:19.653 --> 00:00:25.931
then you have to simulate a click on that
button and then you have to, Function,

6
00:00:25.931 --> 00:00:31.842
call it you set it up and so
like there's a patterns around it,

7
00:00:31.842 --> 00:00:38.799
but generally speaking it is like
pretty elegant and one of the reasons.

8
00:00:38.799 --> 00:00:44.689
And I will just kind of lay this seed now,
so I can like, reference it later.

9
00:00:44.689 --> 00:00:46.385
When you have stuff like promises,

10
00:00:46.385 --> 00:00:50.495
normally what happens is the promise
is separate from this entire process.

11
00:00:50.495 --> 00:00:55.035
It what you might kick off in action
when you initiate the request.

12
00:00:55.035 --> 00:00:57.755
That's usually when you put up the loader,
stuff along those lines.

13
00:00:59.240 --> 00:01:03.660
And then you will kick off another action
when the request comes back, cool.

14
00:01:03.660 --> 00:01:06.889
But those are just plain old
JavaScript objects that are getting

15
00:01:06.889 --> 00:01:08.034
dispatched, right?

16
00:01:08.034 --> 00:01:12.367
And so when you write your tests,
you can just say, hey,

17
00:01:12.367 --> 00:01:17.980
if you ever hear that a promise was
fulfilled, for the data from this API.

18
00:01:17.980 --> 00:01:20.974
This is how I expect the state to
have been updated with that data.

19
00:01:20.974 --> 00:01:24.423
If you hear that there was an error, if
you here that we are in a loading state,

20
00:01:24.423 --> 00:01:26.881
this is what I expect the state
of my shape to look like.

21
00:01:26.881 --> 00:01:30.430
And then like the reaction components
are just based on those props.

22
00:01:30.430 --> 00:01:33.130
So everything should be
super easy at this point.

23
00:01:33.130 --> 00:01:38.611
I think sometimes we have a tendency
cuz we have all these like.

24
00:01:38.611 --> 00:01:41.621
They do everything for your frameworks
that you have been set up everything by

25
00:01:41.621 --> 00:01:43.254
keeping it like lightweight and simple.

26
00:01:43.254 --> 00:01:45.510
A lot of this becomes very simple.

27
00:01:45.510 --> 00:01:46.760
Let's just show an example.

28
00:01:46.760 --> 00:01:49.270
I think it's worthwhile to talk about.

29
00:01:49.270 --> 00:01:52.574
So I would call it like task slice,
and I'll probably do like one or

30
00:01:52.574 --> 00:01:54.945
two in task slice and
like, we'll revisit it.

31
00:01:54.945 --> 00:02:01.121
And we make sure that the more the nuances
between the two isn't the case,

32
00:02:01.121 --> 00:02:05.515
but it was in place that we
have a frame of reference.

33
00:02:05.515 --> 00:02:09.660
And so yeah, we probably, at this point,

34
00:02:09.660 --> 00:02:15.660
probably want the reducer from there,
and I want the action.

35
00:02:15.660 --> 00:02:17.296
So I may just call much actions and

36
00:02:17.296 --> 00:02:19.935
make sure my state changes
the way that I expect it to.

37
00:02:19.935 --> 00:02:23.877
And you'll kind of see how this looks, and
then you just follow this pattern forward.

38
00:02:23.877 --> 00:02:26.090
And it works out pretty great.

39
00:02:26.090 --> 00:02:30.690
So we can say tasksReducer,
we're gonna need that.

40
00:02:30.690 --> 00:02:34.910
addTask, removeTask,
those are the only two we have right now.

41
00:02:36.540 --> 00:02:39.390
Awesome, so those are kind of set up and
ready to go.

42
00:02:39.390 --> 00:02:44.796
And then we should be able to say describe

43
00:02:44.796 --> 00:02:51.469
tasksSlice, and
this is how it becomes incredibly easy.

44
00:02:51.469 --> 00:02:56.941
I'll add one when we do some
asynchronous stuff later.

45
00:02:56.941 --> 00:03:00.748
We'll put this in place and so

46
00:03:00.748 --> 00:03:05.467
then we say it should add a task when,

47
00:03:05.467 --> 00:03:09.750
and then do I see something cool.

48
00:03:09.750 --> 00:03:17.114
We'll switch it to a template
string when the, So

49
00:03:17.114 --> 00:03:21.207
the way that that worked in
those conditionals before,

50
00:03:21.207 --> 00:03:26.257
is that not only is the actual
graters function have a type property,

51
00:03:26.257 --> 00:03:32.195
the two string method on it gives you the
name of the action that it fires, right?

52
00:03:32.195 --> 00:03:36.400
So this will be tasks/add
task in this case.

53
00:03:39.217 --> 00:03:43.987
Awesome, and
then a lot of times I will have like

54
00:03:43.987 --> 00:03:47.695
just some initial state ready to go.

55
00:03:47.695 --> 00:03:53.165
And so let's say const initial state,

56
00:03:53.165 --> 00:03:58.810
and I'll just use my did I not export it?

57
00:04:01.290 --> 00:04:02.070
Exported user.

58
00:04:03.650 --> 00:04:07.866
And that's why I had it above and out,
like to your question earlier, so

59
00:04:07.866 --> 00:04:11.680
I can use it to set up test examples and
have them ready to go.

60
00:04:11.680 --> 00:04:15.660
It's good enough for, and
like you could also, like, I.

61
00:04:15.660 --> 00:04:20.769
I might also then like because Redux
stores everything in a JavaScript object,

62
00:04:20.769 --> 00:04:23.907
you could also just for
my production projects.

63
00:04:23.907 --> 00:04:28.547
I have a bunch of different cases where
things have bitten me before I grab

64
00:04:28.547 --> 00:04:29.316
that JSON.

65
00:04:29.316 --> 00:04:33.967
I throw that JSON file, I pull it in, and
I write a bunch of tests around it, right?

66
00:04:33.967 --> 00:04:36.075
So I also have a bunch of just JSON files,

67
00:04:36.075 --> 00:04:38.372
just in a directory in
the repo where I have.

68
00:04:38.372 --> 00:04:40.963
Okay, here's a bunch of failed
workflows and canceled workflows.

69
00:04:40.963 --> 00:04:43.150
And here was it looks like this
weird state in that weird state.

70
00:04:43.150 --> 00:04:47.720
And I kind of like, iterate through
all the cases to make sure my

71
00:04:47.720 --> 00:04:52.734
function takes every weird thing
that I've ever seen is ready to go.

72
00:04:52.734 --> 00:04:55.709
So here we say create task and
that needs a title.

73
00:05:00.672 --> 00:05:01.738
All right, tests.

74
00:05:06.941 --> 00:05:08.571
Make them pass.

75
00:05:08.571 --> 00:05:10.616
Those seem like things I should do, right?

76
00:05:10.616 --> 00:05:14.091
Awesome, and so we have this in place.

77
00:05:14.091 --> 00:05:17.267
And then, again,
you might choose to hard code these.

78
00:05:17.267 --> 00:05:20.407
I'm fine with this, but I appreciate and

79
00:05:20.407 --> 00:05:24.451
respect wanting to have
static data in there as well.

80
00:05:24.451 --> 00:05:28.784
So then we'd make that third task.

81
00:05:31.512 --> 00:05:33.729
Does anyone have an idea
what it should be?

82
00:05:40.625 --> 00:05:45.630
Title write tests, make them pass,

83
00:05:45.630 --> 00:05:48.866
profit, sounds good.

84
00:05:48.866 --> 00:05:55.276
Then the action, With that task,

85
00:05:55.276 --> 00:05:59.718
and so I expect when it goes into
the reducer, I am pretty confident that my

86
00:05:59.718 --> 00:06:04.535
action creators that came from Redux
toolkit have been tested by them, right?

87
00:06:04.535 --> 00:06:07.879
I don't feel the need to
test the action creator.

88
00:06:07.879 --> 00:06:11.061
You can argue should I
test my create task?

89
00:06:11.061 --> 00:06:14.776
Yeah, probably, but
that's not even touching Redux, so

90
00:06:14.776 --> 00:06:16.349
you can do it on your own.

91
00:06:16.349 --> 00:06:22.141
We have that in place, and then the act of
seeing if things change is super simple.

92
00:06:22.141 --> 00:06:28.728
We can say, newState is,

93
00:06:31.406 --> 00:06:36.452
tasksReducer where you pass
it in that initialState,

94
00:06:36.452 --> 00:06:39.200
and then the action, right?

95
00:06:39.200 --> 00:06:45.462
And we could expect that as like a three
I'm actually gonna say that it has,

96
00:06:45.462 --> 00:06:49.238
He's on shift this time,
right, expect that.

97
00:06:55.238 --> 00:07:00.691
A new state, That entities, right,

98
00:07:00.691 --> 00:07:07.364
to new state that yeah that was
just that one scope, right?

99
00:07:07.364 --> 00:07:11.611
To equal that new task I just made plus

100
00:07:11.611 --> 00:07:16.550
everything that was in the initial state.

101
00:07:17.920 --> 00:07:22.253
Initial State is written wrong now,
that's gotta be entities.

102
00:07:22.253 --> 00:07:27.311
TypeScript would have yelled at me,
I'm fine.

103
00:07:30.061 --> 00:07:36.747
And you could argue, yeah,
I could do, initial state,

104
00:07:43.706 --> 00:07:50.517
Data entities, And
then my new task in front of that, right?

105
00:07:50.517 --> 00:07:53.781
So we'll spread that one out.

106
00:07:53.781 --> 00:07:59.178
Leave it, logic right on that,
and then we should be able to.

107
00:08:07.084 --> 00:08:09.690
Here run test and it passes.

108
00:08:09.690 --> 00:08:13.023
Like that is a reducer test in this
pattern and pulling it in because

109
00:08:13.023 --> 00:08:16.608
you've got the action creators
already because you have everything.

110
00:08:16.608 --> 00:08:20.913
It is simply a unit test, as you know,
in love without a ton of work and

111
00:08:20.913 --> 00:08:23.830
like you can be pretty confident,
like have.

112
00:08:23.830 --> 00:08:28.415
Getting the full test coverage in this
world is a lot easier than in a lot of

113
00:08:28.415 --> 00:08:29.328
other cases.

114
00:08:29.328 --> 00:08:33.675
And this scales pretty well in terms of
just like it is very easy to attempt,

115
00:08:33.675 --> 00:08:36.851
you can actually do test
driven development with us and

116
00:08:36.851 --> 00:08:40.250
not hate yourself cuz it was
all just regular JavaScript.

117
00:08:40.250 --> 00:08:43.099
And this is like, you could do
this with use reducer too, right?

118
00:08:43.099 --> 00:08:45.255
You don't have as many of
the abstractions ready to go.

119
00:08:45.255 --> 00:08:49.059
But you can also use if you're like,
we don't use Redux, I have used to do so

120
00:08:49.059 --> 00:08:50.080
all over the place.

121
00:08:50.080 --> 00:08:54.301
Then, these are patterns you can still use
because the pattern is the same in this

122
00:08:54.301 --> 00:08:56.220
case, no matter what, right?

123
00:08:56.220 --> 00:08:58.895
And so I will leave it as an exercise for
the reader, so

124
00:08:58.895 --> 00:09:01.689
we can cover some other things
in our time together, but

125
00:09:01.689 --> 00:09:04.850
this pattern plays out in terms
of how you can go about testing.

126
00:09:06.290 --> 00:09:10.428
And like Ads a lot of confidence in a lot
of cases, especially if I'm expecting

127
00:09:10.428 --> 00:09:13.770
stuff to transform,
I can basically work out all these cases.

128
00:09:15.080 --> 00:09:16.162
Any questions about that?

129
00:09:20.988 --> 00:09:23.449
And I will push this up
on a branch as well.

130
00:09:23.449 --> 00:09:26.016
&gt;&gt; You said testing the actions
kind of pointless at this point.

131
00:09:26.016 --> 00:09:32.377
&gt;&gt; Well, the action creator like, all I
did was pass it like I'm using create act.

132
00:09:32.377 --> 00:09:35.304
I'm using create slice
like that was made for me.

133
00:09:35.304 --> 00:09:40.362
The action is I only wrote add task colon,
and then the reducer logic.

134
00:09:40.362 --> 00:09:42.930
It made that task for me.

135
00:09:42.930 --> 00:09:44.433
I could test it, but

136
00:09:44.433 --> 00:09:50.190
I am working under the assumption that
Redux toolkit has unit tests, right?

137
00:09:50.190 --> 00:09:54.060
And that I don't need to
other than to show off.

138
00:09:54.060 --> 00:10:01.030
And I like showing off, but I don't
feel super that I need to do that fact.

139
00:10:01.030 --> 00:10:02.910
It's been tested, I don't need to do that.

140
00:10:02.910 --> 00:10:06.430
For me testing is the way I know
that I don't have good enough tests.

141
00:10:06.430 --> 00:10:10.688
Is if I go to do a refactor and I have
a pit of dread in my stomach, for me,

142
00:10:10.688 --> 00:10:12.294
it's a confidence game.

