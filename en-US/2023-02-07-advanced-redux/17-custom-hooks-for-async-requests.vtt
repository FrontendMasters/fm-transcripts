WEBVTT

1
00:00:00.397 --> 00:00:05.808
I didn't do this but let's actually
have another little brief aside.

2
00:00:05.808 --> 00:00:09.117
Which is, I can do use selector but

3
00:00:09.117 --> 00:00:14.370
I have made myself that hooks file for
stuff like this,

4
00:00:14.370 --> 00:00:19.183
where you do something,
we'll say, use tasks.

5
00:00:19.183 --> 00:00:24.126
And we can say that that is going to,
that one's going to take everything and

6
00:00:24.126 --> 00:00:30.480
it's just going to take, And

7
00:00:30.480 --> 00:00:35.014
this is before we said, if we don't really
love using app selector a lot of times,

8
00:00:35.014 --> 00:00:38.974
I will abstract it into these hooks
they're just like get me the tasks.

9
00:00:38.974 --> 00:00:42.031
Whatever that means to you get them for
me, right?

10
00:00:42.031 --> 00:00:44.715
And then if I ever decide
I hate Redux later,

11
00:00:44.715 --> 00:00:48.345
I can just swap the internal
implementation or if I've done

12
00:00:48.345 --> 00:00:53.306
this already with some other either set
state or use reducer, cool, cool cool.

13
00:00:59.921 --> 00:01:02.142
Tasks.entities, parenthesis close.

14
00:01:02.142 --> 00:01:05.738
That should,
I don't know if it's off the top,

15
00:01:05.738 --> 00:01:09.334
I would have to look at
the Redux react dev tools,

16
00:01:09.334 --> 00:01:14.106
because that is probably only
changing when entities changes.

17
00:01:14.106 --> 00:01:16.770
I don't feel the need to memoize it.

18
00:01:19.000 --> 00:01:24.150
I guess I should, because I guess tasks
will change now that loading changes.

19
00:01:25.300 --> 00:01:29.500
So I probably do in fact wanna memoize the
task cause I don't need to like re-render

20
00:01:29.500 --> 00:01:31.780
because it started asking for new tasks.

21
00:01:31.780 --> 00:01:34.476
That's a good point that I asked myself.

22
00:01:34.476 --> 00:01:37.216
So we'll do loading and

23
00:01:37.216 --> 00:01:43.245
here we can do useAppSelector and
we'll say state.

24
00:01:53.356 --> 00:01:58.007
.loading and I'm just going to
make sure that that is a boolean

25
00:01:58.007 --> 00:02:03.116
because if it's undefined,
we'll say that if we're not loading.

26
00:02:03.116 --> 00:02:04.070
Awesome.

27
00:02:04.070 --> 00:02:10.196
And then so what I will do is,
There's yeah,

28
00:02:10.196 --> 00:02:13.003
there's a question of would I break these
out into two separate things, right?

29
00:02:13.003 --> 00:02:16.047
Because then I could like triggers,
re-renders differently, right?

30
00:02:16.047 --> 00:02:17.903
Because even if I don't use memo,

31
00:02:17.903 --> 00:02:21.623
loading changes would be the same
thing as if the Object got changed.

32
00:02:21.623 --> 00:02:24.462
So this app is small that some of
the advantages of using a use memo

33
00:02:24.462 --> 00:02:25.420
wouldn't serve me.

34
00:02:25.420 --> 00:02:30.622
If I bundle these together and these two
dependencies are loading and entities,

35
00:02:30.622 --> 00:02:35.289
and the, to avoid when loading changes
getting new tasks to render, and

36
00:02:35.289 --> 00:02:40.380
I bundled them the same react.memo,
they would be the same thing.

37
00:02:40.380 --> 00:02:44.163
So I would have to, theoretically,
put them in two different hooks, but

38
00:02:44.163 --> 00:02:47.160
they're actually going into
the same component anyway.

39
00:02:48.430 --> 00:02:50.300
So we're re-rendering no matter what.

40
00:02:50.300 --> 00:02:54.743
So you could do it if you wanted to.

41
00:02:54.743 --> 00:03:01.895
I don't know about the efficacy of it,
but it's a thing.

42
00:03:01.895 --> 00:03:06.146
And so
we could say you could either do the,

43
00:03:06.146 --> 00:03:11.707
like tuple syntax, tuple,
tuple, tuple, loading.

44
00:03:11.707 --> 00:03:17.558
You just wanna do it as a constant so
it knows that it is actual tuple.

45
00:03:17.558 --> 00:03:22.553
But you could probably omit
the useMemo if you wanted to.

46
00:03:22.553 --> 00:03:25.639
Right, and now I can just use,
useTasks whenever I want.

47
00:03:25.639 --> 00:03:28.729
And you can see that it is an array
of exactly only two items.

48
00:03:28.729 --> 00:03:31.190
The tasks and whether or
not we're loading.

49
00:03:31.190 --> 00:03:35.170
If this had more things
like is error state,

50
00:03:35.170 --> 00:03:39.482
is updating,
you might turn it into an object.

51
00:03:39.482 --> 00:03:44.735
But if we wanted a different syntax or,
yeah, you might have the error.

52
00:03:44.735 --> 00:03:47.920
The data structure is up for
interpretation.

53
00:03:47.920 --> 00:03:48.440
But.

54
00:03:49.990 --> 00:03:53.014
Now we know the task lists and
we can switch this out.

55
00:03:53.014 --> 00:03:57.812
Did I export it?

56
00:03:57.812 --> 00:03:59.123
It did.
Look at me.

57
00:04:03.642 --> 00:04:06.036
And now we just change this out.

58
00:04:11.375 --> 00:04:12.094
Import it.

59
00:04:15.987 --> 00:04:20.999
That'll be the tasks and loading.

60
00:04:20.999 --> 00:04:23.359
Tasks start as an empty array so
that's cool.

61
00:04:23.359 --> 00:04:25.755
Loading we're not using so
here was just pop in.

62
00:04:31.878 --> 00:04:34.145
That's the word loading a lot.

63
00:04:34.145 --> 00:04:37.360
This component I just made just
renders null if this is false, so

64
00:04:37.360 --> 00:04:41.351
I don't have to put a conditional in there
which is a pattern I really like rather

65
00:04:41.351 --> 00:04:42.560
than putting loading.

66
00:04:42.560 --> 00:04:44.332
And then the loader component I'm,

67
00:04:44.332 --> 00:04:47.777
hey, loading component I will tell
you whether or not we're loading.

68
00:04:47.777 --> 00:04:51.482
You decide if you're gonna return null or
not.

69
00:04:51.482 --> 00:04:54.150
So we can have that in place.

70
00:04:54.150 --> 00:04:56.603
All right, let's verify, loading.

71
00:04:58.462 --> 00:04:59.812
There.

72
00:04:59.812 --> 00:05:02.479
So it is setting and triggering the state.

73
00:05:02.479 --> 00:05:03.267
And we can get.

74
00:05:03.267 --> 00:05:06.400
You have full control over
everything you choose to do.

75
00:05:06.400 --> 00:05:10.546
And because it's simply kicking
off a promise, you probably,

76
00:05:10.546 --> 00:05:15.532
the nice part is it's not a big lift to
kind of move into this if you want because

77
00:05:15.532 --> 00:05:21.092
you probably already have the promise code
somewhere else in your code base, right?

78
00:05:21.092 --> 00:05:27.172
You're just kind of wrapping it in
an action that you kick off wherever maybe

79
00:05:27.172 --> 00:05:33.450
you were calling it otherwise and then
like selecting that data as you need it.

