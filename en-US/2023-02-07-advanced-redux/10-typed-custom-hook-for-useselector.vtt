WEBVTT

1
00:00:00.200 --> 00:00:04.010
This strategy that I use, and
I will continue to build on this strategy,

2
00:00:04.010 --> 00:00:08.139
and this I think, at this point, the
conventional strategy for this as well.

3
00:00:08.139 --> 00:00:12.091
This is not a Steve Kennedy personal,

4
00:00:12.091 --> 00:00:16.480
do it this way or get out kind of thing.

5
00:00:16.480 --> 00:00:23.910
It is a useful way to do this,
I think it's at this point conventional.

6
00:00:23.910 --> 00:00:25.300
So we can take that.

7
00:00:25.300 --> 00:00:28.865
What we can also do is we'll go ahead and
do the same thing for dispatch and

8
00:00:28.865 --> 00:00:31.740
then what we'll do is make custom hooks,
right?

9
00:00:31.740 --> 00:00:34.459
Which means that instead of useSelector,
you make either,

10
00:00:34.459 --> 00:00:36.390
you have to name it something fun, right?

11
00:00:36.390 --> 00:00:37.490
You can name it useSelector and

12
00:00:37.490 --> 00:00:40.210
then welcome to autocomplete
never working again.

13
00:00:40.210 --> 00:00:44.673
I think the convention I see a lot now is
useAppSelector, which I don't love, but

14
00:00:44.673 --> 00:00:47.910
I'll show you how I get
around that in a little bit.

15
00:00:47.910 --> 00:00:52.580
But we have, we can make our own
selector that we know the type.

16
00:00:52.580 --> 00:00:54.640
We know that we can
create our own functions.

17
00:00:54.640 --> 00:00:58.459
We saw ourselves do it with createTask
before, so we could create a hook that has

18
00:00:58.459 --> 00:01:01.540
the correct types and
just use that from this point forward.

19
00:01:01.540 --> 00:01:04.339
So yes, for a lot of this,
a lot of this is solved for us,

20
00:01:04.339 --> 00:01:07.511
there are still certain things
that we have to deal with and do.

21
00:01:07.511 --> 00:01:09.280
So let's go take a look at that.

22
00:01:09.280 --> 00:01:11.140
This is where I make another file.

23
00:01:12.210 --> 00:01:19.440
And that file is gonna have the very
glamorous name, Of hooks.ts.

24
00:01:19.440 --> 00:01:22.610
If that grows, should you break
it out into smaller files?

25
00:01:22.610 --> 00:01:23.760
You absolutely should.

26
00:01:23.760 --> 00:01:27.564
Should you start out with a complicated
folder hierarchy that you don't know if

27
00:01:27.564 --> 00:01:28.596
you're gonna need?

28
00:01:28.596 --> 00:01:29.830
That's a personal choice.

29
00:01:29.830 --> 00:01:33.040
I can tell you my opinion,
which is don't, right?

30
00:01:33.040 --> 00:01:39.660
And because this is a pattern, there
are some helpers for you in this case.

31
00:01:39.660 --> 00:01:44.123
So here we're gonna grab useSelector, And

32
00:01:44.123 --> 00:01:48.370
what we're gonna do is,
I'm gonna go with the convention.

33
00:01:48.370 --> 00:01:54.662
I don't love this name, but,
useAppSelector is going to

34
00:01:54.662 --> 00:02:00.632
be something that then calls, we'll
write it kinda like pseudocode first.

35
00:02:00.632 --> 00:02:05.570
It's is gonna take the state,
it's gonna figure out,

36
00:02:08.587 --> 00:02:15.417
ApplicationState, and then it will
hand that state to useSelector.

37
00:02:15.417 --> 00:02:18.550
It's really gonna make a function,
so on and so forth, right?

38
00:02:18.550 --> 00:02:22.456
But you could theoretically,
okay, this takes a state or

39
00:02:22.456 --> 00:02:26.770
should really take a selector
cuz that took a function, right?

40
00:02:28.020 --> 00:02:29.420
I'll do just a second or

41
00:02:29.420 --> 00:02:34.860
two of this because you can see how this
eventually ends with on some subset of it.

42
00:02:34.860 --> 00:02:40.160
And so this would take the, And

43
00:02:40.160 --> 00:02:46.000
even in this case, it would return
something from that object, right?

44
00:02:46.000 --> 00:02:48.924
The nice part is,
could you sit there and acquiesce?

45
00:02:48.924 --> 00:02:51.890
Could you look and
figure out what all the properties are?

46
00:02:51.890 --> 00:02:52.856
You absolutely could.

47
00:02:52.856 --> 00:02:58.467
Turns out that this is a common of
enough thing where what you can do,

48
00:02:58.467 --> 00:03:04.778
there is actually a version of this that
you can simply go ahead and try this.

49
00:03:06.113 --> 00:03:11.552
You say that this is,
whatever I'm gonna assign to this

50
00:03:11.552 --> 00:03:17.950
variable should be of
the TypedUseSelectorHook, right?

51
00:03:17.950 --> 00:03:21.482
And we say that that's gonna be
based on my ApplicationState.

52
00:03:21.482 --> 00:03:26.318
And then we just assign useSelector to it.

53
00:03:26.318 --> 00:03:29.866
And so now this version of useSelector
is simple, I just took it,

54
00:03:29.866 --> 00:03:31.931
I assigned it to one where it's like,

55
00:03:31.931 --> 00:03:35.693
let me tell you something about my
expectations of the type for this.

56
00:03:35.693 --> 00:03:39.620
And that one, you look,
it is typed and ready to go, right?

57
00:03:39.620 --> 00:03:43.661
So if you find yourself struggling with
this and you find anything that makes you

58
00:03:43.661 --> 00:03:47.240
feels like this feels like I'm
setting myself up for tedium, right?

59
00:03:47.240 --> 00:03:50.480
The heuristic that I would
like to engender in you is you

60
00:03:50.480 --> 00:03:55.424
should use that as an excuse to be like, I
think there might be a better way, right?

61
00:03:55.424 --> 00:04:00.388
Because the goal of some of these patterns
is to take the common pain points that we

62
00:04:00.388 --> 00:04:04.622
all feel and kinda prevent yourself
from writing stuff that works but

63
00:04:04.622 --> 00:04:09.300
kinda might become problematic, and
be able to kind of use it in your files.

64
00:04:09.300 --> 00:04:14.861
So let's save this and then we'll
jump back over cuz now we're cooking.

65
00:04:16.752 --> 00:04:22.091
Right, and now in this case,
instead of useSelector,

66
00:04:22.091 --> 00:04:28.410
we will do, useAppSelector,

67
00:04:28.410 --> 00:04:32.847
it knows what state is, and watch this.

68
00:04:32.847 --> 00:04:36.667
state.tasks.entities.

69
00:04:36.667 --> 00:04:37.589
Yeah.

70
00:04:37.589 --> 00:04:41.207
&gt;&gt; It's a bit of a derailed question, but

71
00:04:41.207 --> 00:04:46.809
how does this work in terms of
rerenders when state updates?

72
00:04:46.809 --> 00:04:51.766
You mentioned that map state to
props takes advantage of memo,

73
00:04:51.766 --> 00:04:54.300
what is it working in this case?

74
00:04:54.300 --> 00:05:00.300
&gt;&gt; We can look totally under the hood,
I know that doing this from memory,

75
00:05:00.300 --> 00:05:06.814
I know that map state to props took
the component implicitly wrapped in memo.

76
00:05:06.814 --> 00:05:10.693
I do think that this only gets
retriggered if the state changes, but

77
00:05:10.693 --> 00:05:15.115
it doesn't do the thing because
it's inside the component already.

78
00:05:15.115 --> 00:05:18.028
It doesn't do the thing where then there
is that equality check to make sure

79
00:05:18.028 --> 00:05:18.826
they're the same.

80
00:05:18.826 --> 00:05:20.979
So I think it is slightly less performing,
and

81
00:05:20.979 --> 00:05:23.905
what you would do in a lot of cases
is you break the selectors up,

82
00:05:23.905 --> 00:05:27.849
you'd have one that just got the tasks and
so if that was a different object, right?

83
00:05:27.849 --> 00:05:32.255
And generally speaking, you could break
it up into smaller pieces and, yeah,

84
00:05:32.255 --> 00:05:35.233
I will do a version of that
in a little bit, I think so.

85
00:05:35.233 --> 00:05:39.389
So yeah, I think less performant
out of the box or less memoized,

86
00:05:39.389 --> 00:05:43.320
performance is like,
we're just grabbing an object off it,

87
00:05:43.320 --> 00:05:46.890
V8 will compile that down to byte code so
fast, right?

88
00:05:48.220 --> 00:05:52.129
But yeah, it does not implicitly
memorize the props going

89
00:05:52.129 --> 00:05:56.458
into the component cuz the call
is coming from inside the house.

90
00:05:58.351 --> 00:06:01.927
Awesome, so that is a pattern that
if you're kind of using hooks and

91
00:06:01.927 --> 00:06:06.087
you're using any amount of TypeScript
with Redux, then I highly recommend.

92
00:06:06.087 --> 00:06:10.371
Because it will allow you to then not have
to do a whole bunch of stuff that's gonna

93
00:06:10.371 --> 00:06:12.400
make you feel really bad about types.

