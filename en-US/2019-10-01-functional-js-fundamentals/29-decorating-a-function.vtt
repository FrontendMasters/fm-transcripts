WEBVTT

1
00:00:00.050 --> 00:00:04.060
&gt;&gt; Will Sentance: Here we go, Seth, line
one, my friend, what are we doing here,

2
00:00:04.060 --> 00:00:05.540
take it away.

3
00:00:05.540 --> 00:00:07.630
&gt;&gt; Seth: A function called oncify.

4
00:00:07.630 --> 00:00:11.880
&gt;&gt; Will Sentance: Excellent,
into global memory goes, there it is.

5
00:00:14.040 --> 00:00:17.300
Oncify is saved.

6
00:00:17.300 --> 00:00:19.570
Next line, Jasmine.

7
00:00:19.570 --> 00:00:22.180
&gt;&gt; Jasmine: I'm declaring
multiply by 2 as a function.

8
00:00:22.180 --> 00:00:28.420
&gt;&gt; Will Sentance: There it is,
multiply by 2 is a function, it takes in,

9
00:00:28.420 --> 00:00:32.930
there it is, it's a function not within,
but an nom, and the result of nom by 2.

10
00:00:32.930 --> 00:00:33.991
Next line.

11
00:00:33.991 --> 00:00:36.605
&gt;&gt; Seth: [INAUDIBLE]
&gt;&gt; Will Sentance: That's exactly.

12
00:00:36.605 --> 00:00:39.110
He knew I was gonna ask, this is it.

13
00:00:39.110 --> 00:00:42.797
Anyway, left hand side, yes.

14
00:00:42.797 --> 00:00:44.876
&gt;&gt; Speaker 4: Once right, multiply by 2.

15
00:00:44.876 --> 00:00:50.308
&gt;&gt; Seth: Absolutely, and everybody
who sees these thinks that oncify

16
00:00:50.308 --> 00:00:57.417
is gonna somehow mutate, as it multiply
by 2 to make it limited to only run once.

17
00:00:57.417 --> 00:01:00.398
Can I edit functions after
they've been saved, Virginia?

18
00:01:00.398 --> 00:01:02.301
&gt;&gt; Jasmine: No.
&gt;&gt; Will Sentance: No, [SOUND], so instead,

19
00:01:02.301 --> 00:01:06.758
we're going to trick the reader,
[LAUGH], into thinking it's edited, but

20
00:01:06.758 --> 00:01:09.425
in reality, and that's a problem, right?

21
00:01:09.425 --> 00:01:10.850
It's gonna be more readable in a sense,
but

22
00:01:10.850 --> 00:01:13.870
we're not gonna have to work under
the hood, and therefore, harder to debug.

23
00:01:13.870 --> 00:01:14.714
We will know.

24
00:01:14.714 --> 00:01:19.150
We're gonna make oncify multiplied by 2
as a brand new function with a backpack.

25
00:01:19.150 --> 00:01:23.893
And I have a feeling, we're gonna
stall the multiply by 2 function into

26
00:01:23.893 --> 00:01:26.090
oncify multiple by 2 backpack.

27
00:01:26.090 --> 00:01:29.310
We're then gonna store
more than just data there.

28
00:01:29.310 --> 00:01:33.610
We can store functionality in
oncify multiply by 2 backpack.

29
00:01:33.610 --> 00:01:39.905
Oncify multiplied by 2 is going

30
00:01:39.905 --> 00:01:46.199
to be the return value of calling

31
00:01:46.199 --> 00:01:51.338
oncify on multiply by 2.

32
00:01:51.338 --> 00:01:54.490
There it is, everyone together,
a brand new-

33
00:01:54.490 --> 00:01:56.038
&gt;&gt; Speaker 5: Execution context.

34
00:01:56.038 --> 00:02:01.469
&gt;&gt; Will Sentance: Beautiful, here it is,
not a huge one, because its main job,

35
00:02:01.469 --> 00:02:08.450
people, is to set up a function that will
be stored into oncify multiplied by 2.

36
00:02:09.970 --> 00:02:15.480
And who has two key things attached to it,
in its backpack, in its persistent memory.

37
00:02:15.480 --> 00:02:17.374
Functionality multiple by 2, and

38
00:02:17.374 --> 00:02:20.096
a count to keep track of how
many times has been run.

39
00:02:20.096 --> 00:02:22.650
So that's what we're doing inside oncify.

40
00:02:22.650 --> 00:02:27.437
So let's go into it, and the local memory,
what is the first thing, Michael,

41
00:02:27.437 --> 00:02:29.589
inside of oncify's local memory?

42
00:02:29.589 --> 00:02:30.788
&gt;&gt; Speaker 4: Counter?

43
00:02:30.788 --> 00:02:32.050
&gt;&gt; Will Sentance: That's a second thing.

44
00:02:32.050 --> 00:02:33.502
What's the first thing we need?

45
00:02:33.502 --> 00:02:34.612
&gt;&gt; Speaker 5: Right, convert me.

46
00:02:34.612 --> 00:02:37.978
&gt;&gt; Will Sentance: Exactly,
this parameter convert me,

47
00:02:37.978 --> 00:02:41.550
which has stored on it, what, Michael?

48
00:02:41.550 --> 00:02:42.310
&gt;&gt; Speaker 5: Multiply by 2.

49
00:02:42.310 --> 00:02:45.379
&gt;&gt; Will Sentance: The entire
multiply by 2 functionality.

50
00:02:45.379 --> 00:02:50.407
There it is, with imperative nom,
and return value of nom by 2.

51
00:02:50.407 --> 00:02:51.833
All right, that's counter.

52
00:02:51.833 --> 00:02:55.858
And finally, the final thing,
Andrew, that we do inside of oncify,

53
00:02:55.858 --> 00:03:00.927
it's a bigger also, the penultimate thing,
the biggest the big thing we save is what?

54
00:03:00.927 --> 00:03:01.815
The function?

55
00:03:01.815 --> 00:03:03.178
The function nom button known as?

56
00:03:03.178 --> 00:03:07.612
&gt;&gt; Seth: Inner
&gt;&gt; Will Sentance: Inner, there it is,

57
00:03:07.612 --> 00:03:10.274
there it is.

58
00:03:10.274 --> 00:03:11.528
But we missed something.

59
00:03:11.528 --> 00:03:14.651
When I save a function inside
the running of another function set,

60
00:03:14.651 --> 00:03:15.608
what also happens?

61
00:03:17.263 --> 00:03:18.703
&gt;&gt; Will Sentance: When I save, Jasmine,

62
00:03:18.703 --> 00:03:22.451
a function inner inside the running
of oncify, it gets what?

63
00:03:22.451 --> 00:03:23.767
&gt;&gt; Jasmine: An execution context?

64
00:03:23.767 --> 00:03:26.020
&gt;&gt; Will Sentance: When I save it,
definitely not.

65
00:03:26.020 --> 00:03:27.461
&gt;&gt; Jasmine: You get a backpack.

66
00:03:27.461 --> 00:03:30.539
&gt;&gt; Will Sentance: I get, what, a link.

67
00:03:30.539 --> 00:03:36.940
I wouldn't even call it a backpack, I get
a link to all the surrounding memory.

68
00:03:40.202 --> 00:03:45.106
&gt;&gt; Will Sentance: Meaning, Sam,
when I return the functionality

69
00:03:45.106 --> 00:03:50.018
known as inner out into what global label,
Sam?

70
00:03:50.018 --> 00:03:53.778
The functionality declared
inside of oncify is inner,

71
00:03:53.778 --> 00:03:57.218
it gets returned out into
what global label, Sam?

72
00:03:57.218 --> 00:03:59.915
&gt;&gt; Sam: Oncified-
&gt;&gt; Will Sentance: Oncified multiplied

73
00:03:59.915 --> 00:04:00.644
by 2.

74
00:04:00.644 --> 00:04:05.633
When I return it out,
&gt;&gt; Will Sentance: Out

75
00:04:05.633 --> 00:04:10.082
it comes, it was born as inner.

76
00:04:10.082 --> 00:04:10.700
There it is.

77
00:04:10.700 --> 00:04:12.570
It was born as inner.

78
00:04:12.570 --> 00:04:15.460
What's it bring with it, Virginia?

79
00:04:15.460 --> 00:04:18.443
&gt;&gt; Virginia: The backpack.
&gt;&gt; Will Sentance: The backpack, exactly,

80
00:04:18.443 --> 00:04:24.618
attached onto it is, and
look at what's inside of it.

81
00:04:24.618 --> 00:04:29.554
It's got,
&gt;&gt; Will Sentance: What's it going inside

82
00:04:29.554 --> 00:04:30.550
of it, Jasmine?

83
00:04:35.662 --> 00:04:38.038
&gt;&gt; Will Sentance: What's
inside the functions backpack?

84
00:04:38.038 --> 00:04:38.937
&gt;&gt; Jasmine: Multiplied by 2?

85
00:04:38.937 --> 00:04:42.410
&gt;&gt; Will Sentance: Multiply by 2.

86
00:04:42.410 --> 00:04:44.950
But that's fantastic, right?

87
00:04:44.950 --> 00:04:49.504
Because we want this
oncyfied multiplied by 2,

88
00:04:49.504 --> 00:04:53.621
to have the ability to run, multiply by 2.

89
00:04:53.621 --> 00:04:59.434
Is it, is oncified multiply by 2,
multiply by 2?

90
00:04:59.434 --> 00:05:04.920
It's a brand new function called inner
that has a backpack into which we store.

91
00:05:05.930 --> 00:05:11.477
Whatever we pass into oncify,
in which that function inner was created,

92
00:05:11.477 --> 00:05:15.329
and then,
pull that stuff out on the back of inner.

93
00:05:15.329 --> 00:05:19.504
Inner's only job is to determine
by looking in its backpack,

94
00:05:19.504 --> 00:05:23.120
in new bytes new name,
oncified multiply by 2.

95
00:05:23.120 --> 00:05:25.210
His only job is its own by
looking at his backpack.

96
00:05:25.210 --> 00:05:29.247
Am I allowed to run from the backpack,
the multiply by 2 function?

97
00:05:29.247 --> 00:05:33.388
Okay, what's the other thing,
Jasmine, in the backpack?

98
00:05:33.388 --> 00:05:34.556
&gt;&gt; Jasmine: Actually,
I had a question first.

99
00:05:34.556 --> 00:05:35.389
&gt;&gt; Will Sentance: Hold on one second,
I promise.

100
00:05:35.389 --> 00:05:37.244
What's the other thing in the backpack,
Jasmine?

101
00:05:37.244 --> 00:05:38.043
&gt;&gt; Jasmine: The counter.

102
00:05:38.043 --> 00:05:39.960
&gt;&gt; Will Sentance: Counter set to what?

103
00:05:39.960 --> 00:05:41.120
&gt;&gt; Jasmine: To 0.

104
00:05:41.120 --> 00:05:42.290
&gt;&gt; Will Sentance: Set to 0.

105
00:05:42.290 --> 00:05:43.200
Go ahead, Jasmine.

106
00:05:43.200 --> 00:05:48.340
&gt;&gt; Jasmine: So the backpack is created
once the inner function is created.

107
00:05:48.340 --> 00:05:49.904
&gt;&gt; Will Sentance: As
soon as inner is created,

108
00:05:49.904 --> 00:05:53.180
it gets a link to exactly
the surrounding local memory.

109
00:05:53.180 --> 00:06:00.120
When inner gets returned out
of running oncify into where?

110
00:06:00.120 --> 00:06:02.739
&gt;&gt; Jasmine: Oncify-
&gt;&gt; Will Sentance: Oncify multiplied by 2.

111
00:06:02.739 --> 00:06:06.560
It pulls with it all that data, exactly.

112
00:06:06.560 --> 00:06:07.990
And what is that data?

113
00:06:07.990 --> 00:06:14.070
Well, it's the function we want to convert
into being a function with a memory.

114
00:06:14.070 --> 00:06:20.383
And, it's the counter that's gonna
allow us to keep track of whether

115
00:06:20.383 --> 00:06:26.698
multiply by two has been run before
inside of oncified multiply by 2.

116
00:06:26.698 --> 00:06:31.240
All right, and this execution context,
everybody, this point, gone.

117
00:06:32.530 --> 00:06:33.060
Exactly.

