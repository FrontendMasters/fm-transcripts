WEBVTT

1
00:00:00.289 --> 00:00:04.047
&gt;&gt; Will Sentance: Let's start off by
diagramming what we're doing in my kind of

2
00:00:04.047 --> 00:00:08.836
high level diagram style, rather than
the details of JavaScript execution.

3
00:00:08.836 --> 00:00:10.946
So we had, what do we have?

4
00:00:17.543 --> 00:00:20.571
&gt;&gt; Will Sentance: Multiply by 2.

5
00:00:20.571 --> 00:00:22.361
Add 3.

6
00:00:22.361 --> 00:00:24.350
This is our array where we wanna to.

7
00:00:24.350 --> 00:00:27.622
By the way, I got a question from Michael,
during the little break there.

8
00:00:27.622 --> 00:00:30.961
He said, does this relate to
what happens in React and Redux?

9
00:00:30.961 --> 00:00:34.922
Yeah, go and
absolutely realize that it is exactly.

10
00:00:34.922 --> 00:00:38.065
If you only go from one thing today
in terms of your practical use,

11
00:00:38.065 --> 00:00:41.626
it's knowing exactly what's happening
with the reducers in practice.

12
00:00:41.626 --> 00:00:43.886
Okay, all right.

13
00:00:43.886 --> 00:00:45.576
It's all exactly the same as here.

14
00:00:45.576 --> 00:00:50.792
All right, moreover, 2 and 3, divide by 5.

15
00:00:50.792 --> 00:00:55.875
And we want to run our data
because we wanna do our dream.

16
00:00:55.875 --> 00:00:58.082
We're gonna see this slightly
differently presented on the next slide.

17
00:00:58.082 --> 00:00:59.905
We're not gonna go into
it in great detail, but

18
00:00:59.905 --> 00:01:02.421
like slightly differently put
more white space in it basically.

19
00:01:02.421 --> 00:01:06.683
And we're gonna end up with individual
lines each doing one of our

20
00:01:06.683 --> 00:01:08.242
tasks nicely labeled.

21
00:01:08.242 --> 00:01:10.709
You can probably already guess what's
gonna look like, it's very beautiful.

22
00:01:10.709 --> 00:01:11.493
Well, there you go.

23
00:01:11.493 --> 00:01:15.629
So it's a multiply by 2 and 3 divided
by 5, and rather than chaining and

24
00:01:15.629 --> 00:01:20.056
parsing the result through chaining,
we're gonna instead call it compose.

25
00:01:20.056 --> 00:01:22.582
That means joining them
up by taking our 11 in.

26
00:01:22.582 --> 00:01:26.024
Taking our 11 in and

27
00:01:26.024 --> 00:01:31.960
combining it with multiplied by 2.

28
00:01:31.960 --> 00:01:36.783
Combining it with multiply by 2,
over to you,

29
00:01:36.783 --> 00:01:41.132
Virginia, combining these two gives us?

30
00:01:41.132 --> 00:01:41.888
&gt;&gt; Virginia: 22.

31
00:01:41.888 --> 00:01:43.871
&gt;&gt; Will Sentance: 22, by the way,
that was excellent for

32
00:01:43.871 --> 00:01:46.147
the audio, they love that,
that was perfect.

33
00:01:46.147 --> 00:01:49.855
These two combined to get one,
just think about that.

34
00:01:49.855 --> 00:01:53.713
Who ever thought of the notion of
combining, reducing from two to

35
00:01:53.713 --> 00:01:58.134
one that actually a function definition
is a thing, a number is a thing, or

36
00:01:58.134 --> 00:02:02.796
an input is a thing, combine them to
produce one thing, from two becomes one.

37
00:02:02.796 --> 00:02:06.706
Anyway, so
what's our rule to combine here?

38
00:02:06.706 --> 00:02:11.717
Well, it's running our function on,
we call this remember

39
00:02:11.717 --> 00:02:16.830
our accumulator,
running our function on our accumulator,

40
00:02:16.830 --> 00:02:22.356
and then taking the output of that,
and it's our combined value.

41
00:02:22.356 --> 00:02:26.959
And then taking that and
combining it with add 3,

42
00:02:26.959 --> 00:02:32.878
again add 3 on 3, and its output is,
so taking the two things,

43
00:02:32.878 --> 00:02:38.247
taking them both in and
combining them by running the array

44
00:02:38.247 --> 00:02:44.184
element on the accumulator,
the thing that's being built up.

45
00:02:44.184 --> 00:02:48.204
I call it the thing we're building up,
it's being updated each time, right?

46
00:02:48.204 --> 00:02:52.919
We're taking in building up on
the second time around the for

47
00:02:52.919 --> 00:02:56.619
loop iteration, array position one, add 3,

48
00:02:56.619 --> 00:03:01.705
combine them by throwing them both
into how to combine which is run

49
00:03:01.705 --> 00:03:07.000
functional inputs, and
the second one which is the add 3, right?

50
00:03:07.000 --> 00:03:11.595
The second thing going into how to combine
run function on input which is to add 3,

51
00:03:11.595 --> 00:03:13.402
and the first thing is the 22.

52
00:03:13.402 --> 00:03:19.199
And then inside a run function on
input we run the add 3 on the 22.

53
00:03:19.199 --> 00:03:26.599
Taking the add 3 and
running it on the 22 outcomes?

54
00:03:26.599 --> 00:03:27.473
&gt;&gt; Bivanesh: 25.

55
00:03:27.473 --> 00:03:31.159
&gt;&gt; Will Sentance: 25,
then we combine the 25.

56
00:03:31.159 --> 00:03:37.490
With the divide by 5,
by running divide by 5, on the 5.

57
00:03:37.490 --> 00:03:39.954
And out comes what?

58
00:03:39.954 --> 00:03:40.976
&gt;&gt; Bivanesh: 5.
&gt;&gt; Will Sentance: 5.

59
00:03:40.976 --> 00:03:43.645
There it is, folk.

60
00:03:43.645 --> 00:03:48.923
This here,
&gt;&gt; Will Sentance: How we combine them.

61
00:03:48.923 --> 00:03:52.575
This is gonna be known as our reducer,
our from 2 becomes 1 output of which we

62
00:03:52.575 --> 00:03:54.787
combined with the next
element 2 becomes 1.

63
00:03:54.787 --> 00:04:01.318
The reducer I'm going to call here out how
to combine our rule for how to combine,

64
00:04:01.318 --> 00:04:06.618
just so we get used to the term reducer,
it doesn't throw us off.

65
00:04:06.618 --> 00:04:09.465
Okay, that's it.

66
00:04:09.465 --> 00:04:10.344
Line 1, here we go.

67
00:04:10.344 --> 00:04:11.988
I'm going to go around
one person by person.

68
00:04:11.988 --> 00:04:13.761
And so Alex, you're up, line 1.

69
00:04:13.761 --> 00:04:17.156
What are we storing in global memory?

70
00:04:17.156 --> 00:04:19.974
There's our high level sense
of where we're getting to.

71
00:04:19.974 --> 00:04:21.855
Now let's execute it in JavaScript.

72
00:04:21.855 --> 00:04:23.079
Line 1, Alex.

73
00:04:23.079 --> 00:04:26.487
&gt;&gt; Alex: Clear your function
labeled multiply by 2.

74
00:04:26.487 --> 00:04:28.443
&gt;&gt; Will Sentance: Multiply by 2.

75
00:04:28.443 --> 00:04:31.283
Don't anybody think that like that x.

76
00:04:31.283 --> 00:04:33.406
I'm breaking my rule there.

77
00:04:36.919 --> 00:04:42.233
&gt;&gt; Will Sentance: Don't anybody think
that that x is somehow globally available

78
00:04:42.233 --> 00:04:48.359
there, people, that's just a parameter
name inside of parentheses.

79
00:04:48.359 --> 00:04:49.754
They just allow you to get
rid of the parentheses.

80
00:04:49.754 --> 00:04:51.309
But it's definitely not.

81
00:04:51.309 --> 00:04:54.171
Don't look at that and go, hold on,
we've got three xs there in global.

82
00:04:54.171 --> 00:04:56.703
No, that's a parameter name
projected inside parentheses.

83
00:04:56.703 --> 00:05:01.257
And then we've got, on the right-hand side
there, return x by 2 inside curly brace.

84
00:05:01.257 --> 00:05:03.831
We've just got a shorthand
version of it now.

85
00:05:03.831 --> 00:05:05.017
Okay, exactly, so it's a function.

86
00:05:05.017 --> 00:05:06.757
There it is.

87
00:05:06.757 --> 00:05:09.205
The hammer's taking x and
return our x by 2.

88
00:05:09.205 --> 00:05:11.183
And next line, Anna.

89
00:05:11.183 --> 00:05:14.285
&gt;&gt; Anna: We're declaring
the function add 3.

90
00:05:14.285 --> 00:05:18.573
&gt;&gt; Will Sentance: Excellent, and it takes
in x and returns x + 3, I just like this

91
00:05:18.573 --> 00:05:23.272
are short you can literally write
their code on the right-hand side.

92
00:05:23.272 --> 00:05:25.643
But think of these as little
strings of code, people.

93
00:05:25.643 --> 00:05:26.641
That's all they are.

94
00:05:26.641 --> 00:05:32.274
All right, then we have divide by 5,

95
00:05:32.274 --> 00:05:36.173
and there's its code.

96
00:05:36.173 --> 00:05:39.416
I meant to ask the next person, but okay.

97
00:05:39.416 --> 00:05:42.850
Next line is Charles, you're up.

98
00:05:42.850 --> 00:05:46.513
&gt;&gt; Charles: Yeah,
we declare a variable, reduce.

99
00:05:46.513 --> 00:05:48.551
&gt;&gt; Will Sentance: Can we just say,
do you mind again, people,

100
00:05:48.551 --> 00:05:50.117
we just say we declare a function.

101
00:05:50.117 --> 00:05:52.234
Just so
we don't think these things are different.

102
00:05:52.234 --> 00:05:54.133
That's code saved, reduce.

103
00:05:54.133 --> 00:05:55.521
Excellent, thank you, Charles.

104
00:05:55.521 --> 00:05:56.609
David, next line.

105
00:05:56.609 --> 00:05:59.879
&gt;&gt; David: Declare a function
called run function on input.

106
00:05:59.879 --> 00:06:05.048
&gt;&gt; Will Sentance: Fantastic,
this is going to be run function on input.

107
00:06:05.048 --> 00:06:06.423
There it is.

108
00:06:06.423 --> 00:06:09.509
I'm going to actually say
it takes in two parameters.

109
00:06:09.509 --> 00:06:10.798
We can call them whatever we want.

110
00:06:10.798 --> 00:06:19.215
Two things, the first of which gets
run as the input of the second of it.

111
00:06:19.215 --> 00:06:22.667
So if I pass in, I don't know
a number as the first input and

112
00:06:22.667 --> 00:06:27.318
a function of the second one, look inside,
I end up taking the second thing and

113
00:06:27.318 --> 00:06:29.174
running it on the first thing.

114
00:06:29.174 --> 00:06:33.029
And that's a very powerful way to
combine two things to become one, and

115
00:06:33.029 --> 00:06:34.901
then I return it out as the output.

116
00:06:34.901 --> 00:06:39.783
Notice how flexible reduce is,
it doesn't mind if instead I were taking

117
00:06:39.783 --> 00:06:44.265
in an array for the numbers, and
I don't know another number, and

118
00:06:44.265 --> 00:06:48.207
then combining,
suppose I was taking array for a number.

119
00:06:48.207 --> 00:06:49.788
Just to remind ourselves just briefly.

120
00:06:49.788 --> 00:06:54.868
It doesn't mind if I'm doing this,
taking 1, 2, 3,

121
00:06:54.868 --> 00:07:00.157
taking in the number 0, and
combining these two by adding or

122
00:07:00.157 --> 00:07:05.966
taking in a function a number and
combining the two things by inside

123
00:07:05.966 --> 00:07:11.462
of my rule for reducing, rule for
taking two to one running this

124
00:07:11.462 --> 00:07:16.579
thing on this thing to get out a number,
it doesn't mind.

125
00:07:16.579 --> 00:07:19.776
All it knows is that you
better pass me a rule for

126
00:07:19.776 --> 00:07:23.630
how to combine two things of
any type into one thing, and

127
00:07:23.630 --> 00:07:28.305
then that one thing is going to be
the input of the next combination.

128
00:07:28.305 --> 00:07:29.651
That's all it knows.

129
00:07:29.651 --> 00:07:31.523
Even if one of those
things you pass is in,

130
00:07:31.523 --> 00:07:35.109
the second in this case is actually gonna
be a function, run on the first thing,

131
00:07:35.109 --> 00:07:37.696
get out an output,
return that out into the building up.

132
00:07:37.696 --> 00:07:41.253
It does not mind,
it is truly the most versatile function.

133
00:07:41.253 --> 00:07:46.206
I think, I bet you sophisticated people
out there considered this process

134
00:07:46.206 --> 00:07:51.014
of data reduction to be like a deep,
general way of thinking about data.

135
00:07:51.014 --> 00:07:53.832
I bet you, I've noticed,
but I bet you they do.

136
00:07:53.832 --> 00:07:56.014
I bet you they, right, some say yes.

137
00:07:56.014 --> 00:07:57.677
One second, Sam.

138
00:07:57.677 --> 00:07:58.605
I promise I'll come to it.

139
00:07:58.605 --> 00:08:00.370
All right.

140
00:08:00.370 --> 00:08:01.526
I promise, we'll come to it.

141
00:08:01.526 --> 00:08:03.550
And there it is, we're all set up.

142
00:08:03.550 --> 00:08:08.170
Now, final line, Eric,
left-hand side, says he do what?.

143
00:08:08.170 --> 00:08:09.817
&gt;&gt; Eric: We're making the output.

144
00:08:09.817 --> 00:08:11.195
&gt;&gt; Will Sentance: Beautiful.

145
00:08:11.195 --> 00:08:12.212
&gt;&gt; Eric: Doesn't have a value yet.

146
00:08:12.212 --> 00:08:15.570
&gt;&gt; Will Sentance: Yeah.
&gt;&gt; Eric: But we'll be calling reduce.

147
00:08:15.570 --> 00:08:17.057
&gt;&gt; Will Sentance: Well-put,
Eric, will-put.

148
00:08:17.057 --> 00:08:23.325
So, let's go coreduce
with an array that is so

149
00:08:23.325 --> 00:08:28.645
different to the other arrays of data.

150
00:08:28.645 --> 00:08:35.520
This time it's an array of individual
functions, which are, Eric?

151
00:08:35.520 --> 00:08:39.394
&gt;&gt; Eric: Multiply it by 2,
add 3 and divide by 5.

152
00:08:39.394 --> 00:08:42.630
&gt;&gt; Will Sentance: Divide by 5, fantastic.

153
00:08:42.630 --> 00:08:48.347
And then a function that's going
to be filling out how to combine,

154
00:08:48.347 --> 00:08:51.932
and it's going to be run with two inputs.

155
00:08:51.932 --> 00:08:54.848
And it is known as here what, Eric?

156
00:08:54.848 --> 00:08:56.163
&gt;&gt; Eric: Run function on input run.

157
00:08:56.163 --> 00:09:01.180
&gt;&gt; Will Sentance: Run function on input,
there it is.

158
00:09:01.180 --> 00:09:06.100
And our final thing, the thing with which
we're going to combine our first function,

159
00:09:06.100 --> 00:09:08.330
which is our what, Eric?

160
00:09:08.330 --> 00:09:09.880
&gt;&gt; Eric: Are building up,
&gt;&gt; Will Sentance: Are building up,

161
00:09:09.880 --> 00:09:11.020
which has what value?

162
00:09:11.020 --> 00:09:11.628
&gt;&gt; Eric: 11.

163
00:09:11.628 --> 00:09:15.720
&gt;&gt; Will Sentance: 11,
excellent, excellent function.

164
00:09:15.720 --> 00:09:20.510
We create a brand new,
Charles [LAUGH], all of you.

165
00:09:20.510 --> 00:09:23.443
Run new-
&gt;&gt; Group: Execution contest.

166
00:09:23.443 --> 00:09:25.842
&gt;&gt; Will Sentance: Excellent, [LAUGH].

167
00:09:25.842 --> 00:09:28.640
Was miles ahead,
he finished it before we said execution.

168
00:09:28.640 --> 00:09:30.550
All right, there it is.

169
00:09:31.550 --> 00:09:32.450
It's a big one.

170
00:09:32.450 --> 00:09:34.012
It's an important one, so I'm gonna do it.

171
00:09:37.267 --> 00:09:38.436
&gt;&gt; Will Sentance: It's fine,
that's big enough.

172
00:09:45.304 --> 00:09:46.420
&gt;&gt; Will Sentance: I always go in, don't I?

173
00:09:46.420 --> 00:09:50.410
So, I'm gonna remember,
my spacial awareness is bad.

174
00:09:50.410 --> 00:09:51.557
Do I got it slightly better?

175
00:09:51.557 --> 00:09:52.505
&gt;&gt; Group: Yeah.

176
00:09:52.505 --> 00:09:54.060
&gt;&gt; Will Sentance: It's marginally
better this time, right?

177
00:09:56.300 --> 00:09:59.500
Okay, actually I'll leave it open because
I don't know how far it's gonna go.

178
00:09:59.500 --> 00:10:04.600
Into local memory we go,
into local memory we go.

179
00:10:06.240 --> 00:10:10.920
And the first thing is our what?

180
00:10:10.920 --> 00:10:12.382
Andrew,
&gt;&gt; Andrew: The array,

181
00:10:12.382 --> 00:10:14.811
&gt;&gt; Will Sentance: The array, which is?

182
00:10:14.811 --> 00:10:17.962
&gt;&gt; Andrew: Multiply by 2,
add 3 and divide by 5.

183
00:10:17.962 --> 00:10:22.643
&gt;&gt; Will Sentance: Fantastic,
thank you, give me a second,

184
00:10:22.643 --> 00:10:26.940
multiply by 2, add 3, divide by 5.

185
00:10:26.940 --> 00:10:29.767
I'm not gonna dwell yet
on just how extraordinary,

186
00:10:29.767 --> 00:10:31.509
it's got a list out functions.

187
00:10:31.509 --> 00:10:35.978
But there's a fancy name for me to list
out functions and not state the inputs and

188
00:10:35.978 --> 00:10:37.055
outputs as you go.

189
00:10:37.055 --> 00:10:39.510
It's got a very fancy name.

190
00:10:39.510 --> 00:10:40.450
We'll see it in a second.

191
00:10:40.450 --> 00:10:43.448
But that's a big deal,
this is like a special thing, and

192
00:10:43.448 --> 00:10:46.271
it ends up being a cool part
of function programming.

193
00:10:46.271 --> 00:10:50.291
Okay, now, we've got our array,
now we need our room for

194
00:10:50.291 --> 00:10:54.328
how we combine the first element
with our starting point.

195
00:10:54.328 --> 00:10:57.548
It's called,
how to combine this parameter,

196
00:10:57.548 --> 00:11:00.049
what is our rule gonna be, Michael?

197
00:11:00.049 --> 00:11:01.680
&gt;&gt; Michael: Run function on input?

198
00:11:01.680 --> 00:11:06.729
&gt;&gt; Will Sentance: Exactly,
how to combine is

199
00:11:06.729 --> 00:11:13.110
going to be run function on input.

200
00:11:13.110 --> 00:11:20.770
And it's going to take in two inputs,
two arguments, two parameters here.

201
00:11:20.770 --> 00:11:23.740
Input will be the first we run,
which, when we run it,

202
00:11:23.740 --> 00:11:25.750
that's gonna be our building up value.

203
00:11:25.750 --> 00:11:30.360
And the second one is gonna
be the fn which will end

204
00:11:30.360 --> 00:11:35.830
up being filled in with a array position
0, which will be what, everybody?

205
00:11:35.830 --> 00:11:36.920
Multiply by two.

206
00:11:36.920 --> 00:11:41.820
We're gonna pass in to run functional
input 11 and multiply by 2.

207
00:11:41.820 --> 00:11:45.169
[SOUND] In they go as an input and fn.

208
00:11:45.169 --> 00:11:48.814
Andwhen wait for it,
we're gonna take the multiply by 2 and

209
00:11:48.814 --> 00:11:50.537
run it on the 11 inside of.

210
00:11:50.537 --> 00:11:51.324
Well, we'll get to that in a moment.

211
00:11:51.324 --> 00:11:58.277
But for now let's get our, yeah, so
we're gonna run fn on input, there it is.

212
00:11:58.277 --> 00:12:01.547
Final parameter argument
combination is what?

213
00:12:01.547 --> 00:12:04.130
&gt;&gt; Bivanesh: Building up
parameter with the 11 value.

214
00:12:04.130 --> 00:12:07.309
&gt;&gt; Will Sentance: Fantastic, and
very well communicated, that it is.

215
00:12:08.840 --> 00:12:13.122
Let's block off this local memory,
so we don't.

216
00:12:13.122 --> 00:12:17.445
There it is, there's our local memory,
people, everything we need.

217
00:12:20.439 --> 00:12:23.820
&gt;&gt; Will Sentance: Okay,
now, we enter the for-loop.

218
00:12:23.820 --> 00:12:27.033
I's value, Jasmine, i's value.

219
00:12:27.033 --> 00:12:31.857
Yeah, excellent, yeah, 0.

220
00:12:31.857 --> 00:12:34.180
So, array position 0.

221
00:12:34.180 --> 00:12:37.990
The first half of the two things,
first half, the first of the two things,

222
00:12:37.990 --> 00:12:39.700
we're going to reduce to 1.

223
00:12:40.840 --> 00:12:44.506
Array position 0 is what, Jasmine?

224
00:12:44.506 --> 00:12:47.619
Multiply by, you know what,
actually, forgive me, Jasmin,

225
00:12:47.619 --> 00:12:49.190
I'm gonna write this out in full.

226
00:12:49.190 --> 00:12:53.090
So we know, really track what we're doing.

227
00:12:53.090 --> 00:13:01.344
How to combine, it's gonna have
building up and array position 0.

228
00:13:01.344 --> 00:13:07.056
And it's gonna become exactly as you said,
Jasmine.

229
00:13:07.056 --> 00:13:12.230
[SOUND] It's my favorite piece.

230
00:13:12.230 --> 00:13:17.154
&gt;&gt; Group: [LAUGH]
&gt;&gt; Will Sentance: Array position

231
00:13:17.154 --> 00:13:18.985
0 is gonna be what, Jasmine?

232
00:13:18.985 --> 00:13:19.824
&gt;&gt; Jasmine: Multiply by 2.

233
00:13:19.824 --> 00:13:22.402
&gt;&gt; Will Sentance: Multiply by 2.

234
00:13:22.402 --> 00:13:25.271
We're so used to,
at that point it'd be like a number or

235
00:13:25.271 --> 00:13:27.418
something we're going to combine with.

236
00:13:27.418 --> 00:13:31.720
No, it's a function, and
we're gonna combine it with what, Jasmine?

237
00:13:31.720 --> 00:13:32.340
&gt;&gt; Jasmine: 11.

238
00:13:32.340 --> 00:13:33.065
&gt;&gt; Will Sentance: 11, and

239
00:13:33.065 --> 00:13:37.980
we're gonna throw it into our how
to combine which is what, Jasmine?

240
00:13:37.980 --> 00:13:38.509
&gt;&gt; Jasmine: Run function on input.

241
00:13:38.509 --> 00:13:45.820
&gt;&gt; Will Sentance: Run function on input,
and into it we go.

242
00:13:47.840 --> 00:13:55.446
And the 11 is inserted into
the multiply by 2, the 11.

243
00:13:55.446 --> 00:14:00.629
And multiple by 2 go in and
then we take the multiply by 2 and

244
00:14:00.629 --> 00:14:04.060
run it on the 11 inside, there it is.

245
00:14:04.060 --> 00:14:08.990
And you might be thinking, hold on, why
can I not just have this function do that?

246
00:14:08.990 --> 00:14:11.388
Well, this function is
gotta be super generic and

247
00:14:11.388 --> 00:14:13.397
just taking two things to combine to one.

248
00:14:13.397 --> 00:14:16.950
And then it's up to us to work out how
to combine them inside of this function.

249
00:14:16.950 --> 00:14:18.560
Because how to combine,

250
00:14:18.560 --> 00:14:22.280
you can combine two numbers by adding
them whatever way you wanna combine them.

251
00:14:22.280 --> 00:14:25.189
We're combining a function and
add a number, we're taking both in.

252
00:14:25.189 --> 00:14:28.376
And inside is where we're then gonna
run the functional on the number,

253
00:14:28.376 --> 00:14:29.560
just reduce from 2 to1.

254
00:14:29.560 --> 00:14:30.640
And then return that out.

255
00:14:30.640 --> 00:14:35.112
So, multiple by 2 is gonna give out.

256
00:14:35.112 --> 00:14:39.777
Seth, multiply by 2 is gonna
give out with input of 11.

257
00:14:39.777 --> 00:14:41.693
&gt;&gt; Seth: 22.
&gt;&gt; Will Sentance: 22.

258
00:14:41.693 --> 00:14:46.657
And that therefore is going to be our
output of our how to combine with

259
00:14:46.657 --> 00:14:50.853
the input of 11 and
array position 0 multiplied by 2.

260
00:14:50.853 --> 00:14:53.642
That is to say our 22
is gonna come out and

261
00:14:53.642 --> 00:14:57.087
we're gonna update our value of what,
Virginia?

262
00:14:57.087 --> 00:15:01.812
We're gonna update our value,
the outputs are running, how to combine,

263
00:15:01.812 --> 00:15:05.719
which is run functional input
with the input of 11 and 22.

264
00:15:05.719 --> 00:15:07.850
Sorry, 11 multiplied by 2.

265
00:15:07.850 --> 00:15:12.305
We got 22, we return, the out is
gonna be assigned to what, Virginia?

266
00:15:12.305 --> 00:15:14.802
&gt;&gt; Virginia: [INAUDIBLE]
&gt;&gt; Will Sentance: Into what, Seth?

267
00:15:14.802 --> 00:15:15.345
&gt;&gt; Seth: Building up.

268
00:15:15.345 --> 00:15:21.940
&gt;&gt; Will Sentance: Into building up,
and there it goes.

269
00:15:21.940 --> 00:15:25.480
We update our building up to 22.

270
00:15:25.480 --> 00:15:30.930
This here, people,
is our building up as we go.

271
00:15:30.930 --> 00:15:35.178
Each time we do our for-loop, just in case
any of you were lost by this, each time we

272
00:15:35.178 --> 00:15:39.331
do our for-loop, we take in our building
up, we do our right-hand side first.

273
00:15:39.331 --> 00:15:42.764
We're taking whatever our given
value building up is, which was 11.

274
00:15:42.764 --> 00:15:45.762
And then multiply it by 2,
throw it into run functional input,

275
00:15:45.762 --> 00:15:49.060
throw on the multiple by2 on 11,
get 22, return it out.

276
00:15:49.060 --> 00:15:53.150
And in the same line we then
update the value of building up.

277
00:15:53.150 --> 00:16:00.363
If you ever see that thing where
you do num Equals nom plus two.

278
00:16:00.363 --> 00:16:02.649
And everything from math
tells you what is this,

279
00:16:02.649 --> 00:16:04.897
do you remember when you
first learned to code?

280
00:16:04.897 --> 00:16:09.468
[LAUGH] Because equals does not mean
equality, it means assignment, it means,

281
00:16:09.468 --> 00:16:11.458
do the right hand side where it is.

282
00:16:11.458 --> 00:16:15.463
If nom at this point is,
I don't know three, and three plus two.

283
00:16:15.463 --> 00:16:17.309
Now nom is five.

284
00:16:17.309 --> 00:16:20.280
Update that value, never get thrown
by this, you may look at this and

285
00:16:20.280 --> 00:16:22.859
go, hold on, how come building
up be on both sides of that?

286
00:16:22.859 --> 00:16:25.389
You taking the building up at
the beginning of that line,

287
00:16:25.389 --> 00:16:28.777
you do the work with it and then you
update the value of building up in global.

288
00:16:28.777 --> 00:16:33.695
Which you're then gonna use in
the next line where this time,

289
00:16:33.695 --> 00:16:37.491
Virginia, I is no longer zero,
this time I is?

290
00:16:37.491 --> 00:16:40.305
&gt;&gt; Virginia: One.
&gt;&gt; Will Sentance: One, she's spot on,

291
00:16:40.305 --> 00:16:41.288
I is one.

292
00:16:41.288 --> 00:16:44.198
Okay, Sam, array position one and

293
00:16:44.198 --> 00:16:50.130
building up the two things we wanna
combine, are what two things, Sam?

294
00:16:50.130 --> 00:16:52.761
&gt;&gt; Sam: Add three and-
&gt;&gt; Will Sentance: Add three,

295
00:16:52.761 --> 00:16:54.030
you're spot on [LAUGH] thank you.

296
00:16:54.030 --> 00:16:55.238
&gt;&gt; Sam: And then 22.

297
00:16:55.238 --> 00:16:58.003
&gt;&gt; Will Sentance: And 22,
which is our new value of building up,

298
00:16:58.003 --> 00:17:01.645
which is being policy and
we've updated our value building up,

299
00:17:01.645 --> 00:17:04.890
we come back around the loop and
we throw in that 22 now.

300
00:17:06.180 --> 00:17:10.430
And we're gonna combine it
using what rule to combine sum?

301
00:17:10.430 --> 00:17:13.479
&gt;&gt; Sam: Run function.
&gt;&gt; Will Sentance: Run function on input,

302
00:17:13.479 --> 00:17:18.543
into it we go and
inside the run function in but

303
00:17:18.543 --> 00:17:23.890
we take in 22 and
reposition 1 which is at 3.

304
00:17:23.890 --> 00:17:26.420
We could take them in and we run.

305
00:17:26.420 --> 00:17:29.471
Well, what do we run inside Seth?

306
00:17:29.471 --> 00:17:32.575
We run with-
&gt;&gt; Seth: Add 3-

307
00:17:32.575 --> 00:17:33.908
&gt;&gt; Will Sentance: On.

308
00:17:33.908 --> 00:17:34.490
&gt;&gt; Seth: 22.

309
00:17:34.490 --> 00:17:35.918
&gt;&gt; Will Sentance: On 22.

310
00:17:35.918 --> 00:17:37.277
There it is.

311
00:17:37.277 --> 00:17:43.125
Add 3 on 22, and it gives us out 25,

312
00:17:43.125 --> 00:17:46.918
which we then return out.

313
00:17:46.918 --> 00:17:50.838
Remember, all we can do is have
this function take two things and

314
00:17:50.838 --> 00:17:55.629
inside of it combine them in some way, in
this case by running one on the other to

315
00:17:55.629 --> 00:17:58.194
produce one thing and then return it out.

316
00:17:58.194 --> 00:18:02.369
And then we take that return out and
store it where Sam?

317
00:18:02.369 --> 00:18:02.990
&gt;&gt; Sam: Into building.

318
00:18:02.990 --> 00:18:04.626
&gt;&gt; Will Sentance: Into building up.

319
00:18:07.231 --> 00:18:10.685
&gt;&gt; Will Sentance: And
get building up to 25.

320
00:18:10.685 --> 00:18:12.241
But we're not done yet.

321
00:18:12.241 --> 00:18:15.269
I equals 2, or I is set to 2,

322
00:18:15.269 --> 00:18:19.895
sorry not equals 2,
I is now the value of 2.

323
00:18:19.895 --> 00:18:21.820
This is a long execution context.

324
00:18:21.820 --> 00:18:24.742
I [LAUGH] is now two and this time,

325
00:18:24.742 --> 00:18:29.081
therefore ready position
two is what Jasmine?

326
00:18:29.081 --> 00:18:30.630
&gt;&gt; Jasmine: Divide by-
&gt;&gt; Will Sentance: Divide by five.

327
00:18:30.630 --> 00:18:33.626
So we got that 25, and I divide by 5.

328
00:18:33.626 --> 00:18:41.374
Because with building up is now 25,
25 divide by 5.

329
00:18:41.374 --> 00:18:44.236
What rule Jasmine do we have for
how we're gonna combine them?

330
00:18:44.236 --> 00:18:46.332
What's that how to combine
code gonna be called?

331
00:18:46.332 --> 00:18:48.885
&gt;&gt; Jasmine: Run function-
&gt;&gt; Will Sentance: Run function on input,

332
00:18:48.885 --> 00:18:49.495
spot on.

333
00:18:49.495 --> 00:18:53.590
Run function on, I slightly shortened
it there but run function on input,

334
00:18:53.590 --> 00:18:56.364
whose result is going to
be stored where Bivanesh?

335
00:18:59.520 --> 00:19:01.745
&gt;&gt; Bivanesh: Inner function.

336
00:19:01.745 --> 00:19:03.007
Building up.

337
00:19:03.007 --> 00:19:06.129
&gt;&gt; Will Sentance: Into building up,
spot on, into building up,

338
00:19:06.129 --> 00:19:08.638
spot on Bivanesh, into building up.

339
00:19:08.638 --> 00:19:10.964
Let's go into it.

340
00:19:10.964 --> 00:19:14.819
All it does is run inside of it.

341
00:19:14.819 --> 00:19:16.493
The second thing.

342
00:19:16.493 --> 00:19:17.381
On the first thing, right?

343
00:19:17.381 --> 00:19:18.931
Just make sure everyone sees that.

344
00:19:18.931 --> 00:19:23.744
We take in,
&gt;&gt; Will Sentance: Two things, number, and

345
00:19:23.744 --> 00:19:27.760
in this case function, and
run the first one on the second one.

346
00:19:27.760 --> 00:19:29.666
So we're gonna run what
Bivanesh inside of here?

347
00:19:29.666 --> 00:19:30.712
&gt;&gt; Bivanesh: We'll have
to divide it by five.

348
00:19:30.712 --> 00:19:35.323
&gt;&gt; Will Sentance: Yeah, exactly,
divide by 5, input of 25 returns out 5 and

349
00:19:35.323 --> 00:19:39.238
that then gets returned out
of run function on input,

350
00:19:39.238 --> 00:19:42.555
we've combined two to
become one inside of.

351
00:19:42.555 --> 00:19:44.864
We could have combined them by adding,
that's what we do but

352
00:19:44.864 --> 00:19:46.326
you can't add a function to a number.

353
00:19:46.326 --> 00:19:50.388
So instead we ran the function on the
number, we had to kind of flip it around

354
00:19:50.388 --> 00:19:54.319
right because it's a weird thing,
we're going to get this function and

355
00:19:54.319 --> 00:19:58.598
run it on the building up and take out
the results and store it into building up.

356
00:19:58.598 --> 00:20:02.265
And there it is.

357
00:20:02.265 --> 00:20:04.513
And that is our final
value of building up,

358
00:20:04.513 --> 00:20:08.019
our fall loop is now done this is
the length of the array with three.

359
00:20:08.019 --> 00:20:12.946
And so I is now two Is, now three and
if we cut the other fall loop,

360
00:20:12.946 --> 00:20:17.695
final line Alex of our reduce
function where we're combining

361
00:20:17.695 --> 00:20:21.840
functions one by one with an input value.

362
00:20:21.840 --> 00:20:26.094
With the help of run function on input,
the final line says to return what Alex?

363
00:20:26.094 --> 00:20:27.661
&gt;&gt; Alex: Five in the sign it to output.

364
00:20:27.661 --> 00:20:31.980
&gt;&gt; Will Sentance: And well done with the
complete technical communication there.

365
00:20:31.980 --> 00:20:36.991
The return value is the value
of building up which is

366
00:20:36.991 --> 00:20:42.361
the number five stored into
output exactly as he said.

367
00:20:42.361 --> 00:20:48.449
Folk, this is gonna turn out to
transform how we write code and

368
00:20:48.449 --> 00:20:53.030
to be the essence of
functional programming.

