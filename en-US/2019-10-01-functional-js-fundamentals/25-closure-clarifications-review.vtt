WEBVTT

1
00:00:00.165 --> 00:00:03.178
&gt;&gt; Will Sentance: What are the names we
can call this backpack that we've given

2
00:00:03.178 --> 00:00:05.675
new function, so
that it has a permanent memory.

3
00:00:05.675 --> 00:00:08.190
I love that,
I love it now when we run that function,

4
00:00:08.190 --> 00:00:10.877
it's got this little temporary
local memory sure, but

5
00:00:10.877 --> 00:00:13.636
it's also this little permanent
memory attached to it.

6
00:00:13.636 --> 00:00:16.557
Two memories,
two stores of data behave differently,

7
00:00:16.557 --> 00:00:19.800
one individually to each function
being each function call.

8
00:00:19.800 --> 00:00:23.910
The other protected and preserved and
available to every function call to

9
00:00:23.910 --> 00:00:27.170
new function by what you might
will be thinking, hold on.

10
00:00:27.170 --> 00:00:28.624
How does this fit into
our functional goals?

11
00:00:28.624 --> 00:00:34.324
Well, I'll tell you in a second, but
what are the fancy names of the backpack?

12
00:00:34.324 --> 00:00:35.486
They're really fancy.

13
00:00:35.486 --> 00:00:37.493
So, there is this.

14
00:00:37.493 --> 00:00:40.015
This is data, it is persistent,

15
00:00:40.015 --> 00:00:43.628
it persists as long as
it's function is saved.

16
00:00:43.628 --> 00:00:46.085
If we were to delete this function,
the backpack gets deleted.

17
00:00:46.085 --> 00:00:49.007
If we were to reassign this function,
which we couldn't do with a const

18
00:00:49.007 --> 00:00:50.971
declaration anyway, but
it would be deleted.

19
00:00:50.971 --> 00:00:55.859
But it's persistent data, okay fine,

20
00:00:55.859 --> 00:01:01.193
the data is referenced
by a scope property.

21
00:01:01.193 --> 00:01:04.340
What does scope mean?

22
00:01:04.340 --> 00:01:09.609
Scope is the fancy name in programming for
any given line of my code,

23
00:01:09.609 --> 00:01:12.943
what data do I have
access to at that point?

24
00:01:12.943 --> 00:01:15.330
Just a fancy word for when I do this line,

25
00:01:15.330 --> 00:01:18.219
when I run this line what
data is available to me?

26
00:01:18.219 --> 00:01:22.753
So, this is the data, which when I run
new function, it has available to it.

27
00:01:22.753 --> 00:01:26.333
So, it's good but
it's a special type of scope.

28
00:01:26.333 --> 00:01:31.048
Here, the data I have available to me,
is the data that was

29
00:01:31.048 --> 00:01:36.451
available to me when that function
was initially saved in memory.

30
00:01:36.451 --> 00:01:39.945
When it was initially saved,
the date around.

31
00:01:39.945 --> 00:01:43.042
Forever more that function will
have access to that data, why?

32
00:01:43.042 --> 00:01:46.065
Because it's going to pull it out
along with it wherever it goes.

33
00:01:46.065 --> 00:01:49.351
And that is known as lexical or
static scope.

34
00:01:49.351 --> 00:01:53.951
It is fixed, it's static, it's fixed from
when we save the function is lexical,

35
00:01:53.951 --> 00:01:57.894
in the sense that where we position
the saving of the function on the page

36
00:01:57.894 --> 00:02:02.126
determines what data is available
whenever we end up running the function.

37
00:02:02.126 --> 00:02:06.765
As contrasted to dynamic scope, which says
the only data that will be available to

38
00:02:06.765 --> 00:02:11.427
when you run a function is a data that's
there when you're running the function.

39
00:02:11.427 --> 00:02:15.559
Instead, here, the data that is available
to us is a data from when the function was

40
00:02:15.559 --> 00:02:18.393
initially saved,
because we pull the function out, and

41
00:02:18.393 --> 00:02:19.824
we brought the data with it.

42
00:02:19.824 --> 00:02:22.479
So, we can call this,
you want to get really fancy?

43
00:02:22.479 --> 00:02:27.849
Persistent lexical scope referenced data,
another name for

44
00:02:27.849 --> 00:02:34.056
it, slightly less verbose, but
by the way you say this in interviews.

45
00:02:34.056 --> 00:02:38.502
[SOUND] They're going to
roll the red carpet out.

46
00:02:38.502 --> 00:02:41.564
They're going to, I mean the truth is I
comments injuries again because people

47
00:02:41.564 --> 00:02:42.946
want video now comments, enjoys.

48
00:02:42.946 --> 00:02:47.885
But they're going to give you their job.

49
00:02:47.885 --> 00:02:53.272
So, there it is, position let's see,
so reference data but

50
00:02:53.272 --> 00:02:58.452
there's another name for it,
which is, this local memory

51
00:02:58.452 --> 00:03:04.482
can sometimes also be known as
the variable, this is one name for it.

52
00:03:04.482 --> 00:03:05.852
The variable environment.

53
00:03:05.852 --> 00:03:08.178
That is to say the environment
is stuff around me, right?

54
00:03:08.178 --> 00:03:10.582
And these are the variables
around me inside that function.

55
00:03:10.582 --> 00:03:12.281
We said this earlier.

56
00:03:12.281 --> 00:03:16.744
We talk about that variable
environment being closed over.

57
00:03:16.744 --> 00:03:19.519
We grab it, hold on to it and
return it out.

58
00:03:19.519 --> 00:03:22.198
They call this backpack,

59
00:03:22.198 --> 00:03:27.931
also the closed over variable
environment or the cove.

60
00:03:27.931 --> 00:03:30.710
Do you see now why I call it?

61
00:03:30.710 --> 00:03:38.113
I think, it's the best name,
the backpack, what a name.

62
00:03:38.113 --> 00:03:42.603
[INAUDIBLE] but
developers colloquially tend to call this

63
00:03:42.603 --> 00:03:47.560
persistent memory attached to
our function definition when it

64
00:03:47.560 --> 00:03:51.499
was born inside the running
of another function.

65
00:03:51.499 --> 00:03:55.350
And returned out and grabbed all its
data that should have been deleted, but

66
00:03:55.350 --> 00:03:58.553
instead is attached on the back
of the function, persistent.

67
00:03:58.553 --> 00:04:02.440
They call this backpack, the closure.

68
00:04:04.990 --> 00:04:10.950
I love the name because, they also
call the overall concept closure.

69
00:04:10.950 --> 00:04:13.640
But you'll hear developers,
which is being ambiguous.

70
00:04:13.640 --> 00:04:20.439
You'll here developers say,
put that data in the functions closure.

71
00:04:20.439 --> 00:04:25.459
And people this ends up being
used everywhere in JavaScript.

72
00:04:25.459 --> 00:04:30.273
When you pass a function to
an asynchronous call back into

73
00:04:30.273 --> 00:04:34.901
an asynchronous API call,
you pass that function in.

74
00:04:34.901 --> 00:04:36.907
When it ends up being
able to run later on go,

75
00:04:36.907 --> 00:04:40.711
what's the hard parts of Asynchronous
JavaScript, when has been running wrong,

76
00:04:40.711 --> 00:04:42.576
it has always data from when it was born.

77
00:04:42.576 --> 00:04:43.226
Where?

78
00:04:43.226 --> 00:04:44.847
In the backpack.

79
00:04:44.847 --> 00:04:49.401
My favorite one, generators, generators
have functions that are plausible and

80
00:04:49.401 --> 00:04:50.261
not possible.

81
00:04:50.261 --> 00:04:54.787
You just remembered when you finish
running, when you start running them,

82
00:04:54.787 --> 00:04:57.121
you remembered what line you were on and

83
00:04:57.121 --> 00:05:00.883
all the data at that point in
the local memory in that backpack.

84
00:05:00.883 --> 00:05:04.549
So, when you started again, you grab
all the data and the code line you

85
00:05:04.549 --> 00:05:08.484
wanted the function, continue running and
grab the data in the backpack.

86
00:05:08.484 --> 00:05:13.858
They don't rate it where you run
a function to enable you to each time

87
00:05:13.858 --> 00:05:19.155
you run the function, get data out
of an array element by element.

88
00:05:19.155 --> 00:05:22.454
You've seen it's rated the first time
around the function it grabs the first

89
00:05:22.454 --> 00:05:26.122
item from the array returns out next time,
next element, next time, next element.

90
00:05:26.122 --> 00:05:28.869
How's it remembering where
it's at in the array?

91
00:05:28.869 --> 00:05:33.848
The function has stood,
counter on which elements its own

92
00:05:33.848 --> 00:05:38.225
in his backpack, and
the underlying data as well.

93
00:05:38.225 --> 00:05:42.368
For these dominate, and
we're going to use it in

94
00:05:42.368 --> 00:05:47.128
functional programming in very,
very powerful ways.

95
00:05:47.128 --> 00:05:53.971
&gt;&gt; Charles: Is closure synonymous with
lexical scope, or closures is the larger?

96
00:05:53.971 --> 00:05:58.467
&gt;&gt; Will Sentance: That's the thing, people
who I think are ambiguously developers

97
00:05:58.467 --> 00:06:01.045
call the overall concept, closure.

98
00:06:01.045 --> 00:06:04.230
I personally as a really great question
is actually literally as my favorite

99
00:06:04.230 --> 00:06:04.736
way to say.

100
00:06:04.736 --> 00:06:05.659
Thank you, Charles.

101
00:06:05.659 --> 00:06:11.347
I like to say, lexical scoping is
the concept that functions get

102
00:06:11.347 --> 00:06:17.369
a connection to their surrounding
memory in which they were saved.

103
00:06:17.369 --> 00:06:19.589
You then wherever you end
up running that function,

104
00:06:19.589 --> 00:06:23.026
wherever you end up passing that function,
moving it around your application.

105
00:06:23.026 --> 00:06:26.141
It always brings with it.

106
00:06:26.141 --> 00:06:30.346
I say backpack, but that's due to
the lexical scope feature of JavaScript,

107
00:06:30.346 --> 00:06:34.685
which is that functions immediately get
a scope reference in their surrounding

108
00:06:34.685 --> 00:06:37.809
variable environment and
pull that out wherever you go.

109
00:06:37.809 --> 00:06:41.456
Lexical scope is the feature of
the programming language that keeps data

110
00:06:41.456 --> 00:06:43.557
attached the function of where it saved.

111
00:06:43.557 --> 00:06:47.166
Closure is this ambiguous
wooly term that refers to,

112
00:06:47.166 --> 00:06:49.661
it's used to refer to the backpack.

113
00:06:49.661 --> 00:06:52.414
It's used to refer to
the lexical scoping principle.

114
00:06:52.414 --> 00:06:54.345
And it's used to refer to
the whole thing together.

115
00:06:54.345 --> 00:06:58.665
So, I think,
lexical scope is a really good name to

116
00:06:58.665 --> 00:07:03.598
describe the feature that
enables the backpack to exist.

117
00:07:03.598 --> 00:07:06.415
Yeah, very nice question, Eric.

118
00:07:06.415 --> 00:07:08.656
&gt;&gt; Eric: How does nesting affect-
&gt;&gt; Will Sentance: Yeah.

119
00:07:08.656 --> 00:07:11.265
&gt;&gt; Eric: What's included in the backpack,
you got another layer of nesting?

120
00:07:11.265 --> 00:07:13.900
&gt;&gt; Will Sentance: Sure,
backpacks get passed along,

121
00:07:13.900 --> 00:07:17.388
they are permanently
attached to the function.

122
00:07:17.388 --> 00:07:22.244
Go play with how that works layers in,
but yeah, it's as you expect.

123
00:07:22.244 --> 00:07:23.045
Sam.

124
00:07:23.045 --> 00:07:28.484
&gt;&gt; Sam: Okay so, because closure
can mean the thing that's being

125
00:07:28.484 --> 00:07:32.857
closed over or the technique of closing,
&gt;&gt; Will Sentance: Yeah, and

126
00:07:32.857 --> 00:07:35.599
the principle that enables
that closing to happen, right?

127
00:07:35.599 --> 00:07:37.211
Yeah.

128
00:07:37.211 --> 00:07:42.461
&gt;&gt; Sam: I have tended toward using
closure to refer to the technique

129
00:07:42.461 --> 00:07:46.661
whereas context is the term
that I tend to use for

130
00:07:46.661 --> 00:07:50.132
lexical scoping, is that incorrect?

131
00:07:50.132 --> 00:07:53.214
&gt;&gt; Will Sentance: I wouldn't say is
incorrect then, [INAUDIBLE] correct.

132
00:07:53.214 --> 00:07:58.336
I would just say people will use context
also wait for it, to refer to a functions,

133
00:07:58.336 --> 00:08:02.804
this keyword assignment,
which is another totally different thing.

134
00:08:02.804 --> 00:08:07.322
So, it's enough that,
whenever you sort of agree with your team,

135
00:08:07.322 --> 00:08:10.594
you use to refer to these things,
you're fine.

136
00:08:10.594 --> 00:08:15.815
But I would argue that because people use
the word, context, often to refer to this,

137
00:08:15.815 --> 00:08:19.895
this keyword assignment inside a function,
execution context.

138
00:08:19.895 --> 00:08:22.993
I think context is too general a term,
usually.

139
00:08:22.993 --> 00:08:26.210
&gt;&gt; Sam: Execution context would
clarify that, and be more appropriate,

140
00:08:26.210 --> 00:08:27.308
or it's still wrong?

141
00:08:27.308 --> 00:08:30.138
&gt;&gt; Will Sentance: But
execution context is both the memory and

142
00:08:30.138 --> 00:08:35.417
the fact that the threat is currently
running that code, whereas, we just taking

143
00:08:35.417 --> 00:08:40.722
the local memory the variable environment
and closing over it and persisting it.

144
00:08:40.722 --> 00:08:43.900
This is the execution context,
it's the local memory plus the thread.

145
00:08:43.900 --> 00:08:49.767
This is not an execution context,
this is just the persisted local memory.

146
00:08:49.767 --> 00:08:51.595
&gt;&gt; Sam: The backpack.

147
00:08:51.595 --> 00:08:52.829
&gt;&gt; Will Sentance: Very nice of you Sam,
the backpack.

148
00:08:52.829 --> 00:08:53.582
Seth?

149
00:08:53.582 --> 00:08:56.282
&gt;&gt; Seth: We've got a whole bunch of
expensive work inside outer, and it's not

150
00:08:56.282 --> 00:08:59.643
referenced inside increment counter, that
does not come along inside the backpack.

151
00:08:59.643 --> 00:09:00.922
&gt;&gt; Will Sentance: When
you say expense work,

152
00:09:00.922 --> 00:09:03.321
you mean if we saved like
massive arrays of arrays.

153
00:09:03.321 --> 00:09:04.488
&gt;&gt; Seth: Yeah
&gt;&gt; Will Sentance: Yeah,

154
00:09:04.488 --> 00:09:07.570
no it's all left behind unless
the returned out function.

155
00:09:07.570 --> 00:09:09.961
And you can recount a now newFunction
makes reference to all of that

156
00:09:09.961 --> 00:09:10.610
expensive work.

157
00:09:10.610 --> 00:09:14.400
In which case, you want it to be there
because otherwise you could try to refer

158
00:09:14.400 --> 00:09:17.565
to it inside of newFunction and
it's gone, which would be bad.

159
00:09:17.565 --> 00:09:21.795
Closure in functional JavaScript,
easier to add features.

160
00:09:21.795 --> 00:09:26.565
Our functions can now have persistent
permanent memories attached to them.

161
00:09:26.565 --> 00:09:29.730
It's going to make them
dramatically more powerful.

162
00:09:29.730 --> 00:09:33.518
Easy to do both,
[SOUND] I don't know, definitely not.

163
00:09:33.518 --> 00:09:36.056
Unless, you know how it's
working under the hood.

164
00:09:36.056 --> 00:09:39.181
Now, there's something I want to say here,
in functional programming,

165
00:09:39.181 --> 00:09:41.277
we want every function
called to be independent.

166
00:09:41.277 --> 00:09:44.853
Meaning, if I'm running this function,
and then I'm running it again,

167
00:09:44.853 --> 00:09:47.861
and it's got a permanent memory,
even if it can encapsulate,

168
00:09:47.861 --> 00:09:51.864
well, I shouldn't say that, protected
inside the function execution context.

169
00:09:51.864 --> 00:09:54.593
I'm still basically making my functions,

170
00:09:54.593 --> 00:09:59.324
I can't look at them and know they're
going to behave exactly the same way.

171
00:09:59.324 --> 00:10:01.492
And that line is, [INAUDIBLE] the line,
and I can't look at them and go,

172
00:10:01.492 --> 00:10:02.156
[SOUND], fantastic.

173
00:10:02.156 --> 00:10:06.963
I know exactly what function is doing,
because it's got to be

174
00:10:06.963 --> 00:10:11.502
not global side effects,
still a degree of side effects.

175
00:10:11.502 --> 00:10:13.421
There's two things to say about this.

176
00:10:13.421 --> 00:10:18.978
In the strict implementation of
functional programming, sorry, closure

177
00:10:18.978 --> 00:10:24.632
in functional programming, we actually
fix this data that it can't be changed.

178
00:10:24.632 --> 00:10:28.158
And therefore, all we really have
is a permanent, persistent store of

179
00:10:28.158 --> 00:10:31.592
data here that we're never
interacting with again, and changing.

180
00:10:31.592 --> 00:10:34.741
Meaning, but we'll come to this
in a bit more detail in a moment,

181
00:10:34.741 --> 00:10:36.823
meaning our functions are all still pure.

182
00:10:36.823 --> 00:10:38.858
But I also want to say in general,

183
00:10:38.858 --> 00:10:43.976
functional programming is going to be
an aspiration, especially in JavaScript.

184
00:10:43.976 --> 00:10:48.483
It's not strictly implemented
in JavaScript end to end.

185
00:10:48.483 --> 00:10:54.225
Meaning, even if we don't perfectly
conform to every single piece of it,

186
00:10:54.225 --> 00:10:58.338
even this move that makes
our functions more useful.

187
00:10:58.338 --> 00:11:02.336
It still leaves themselves contain
they're not affecting global memory,

188
00:11:02.336 --> 00:11:03.654
it's still protected.

189
00:11:03.654 --> 00:11:07.818
This is still moving in the direction
of functional programming.

190
00:11:07.818 --> 00:11:12.053
All right, so
let's take a pair programming break,

191
00:11:12.053 --> 00:11:17.713
where you're now going to start
jumping into the closure challenges.

