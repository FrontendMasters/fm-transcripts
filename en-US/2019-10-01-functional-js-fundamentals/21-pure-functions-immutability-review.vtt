WEBVTT

1
00:00:00.270 --> 00:00:06.620
&gt;&gt; Speaker 1: If your array you're passing
into map is not scalar values, right?

2
00:00:06.620 --> 00:00:08.260
Zero with index is actually an array.

3
00:00:09.440 --> 00:00:15.920
Our naive implementation of this that we
did earlier would modify that array inside

4
00:00:15.920 --> 00:00:18.950
of there thereby modifying [INAUDIBLE]
&gt;&gt; Will Sentance: Have a look and

5
00:00:18.950 --> 00:00:19.880
play with it.

6
00:00:19.880 --> 00:00:21.410
It's a very legitimate thing to raise.

7
00:00:21.410 --> 00:00:22.777
Have a look and play with it, absolutely.

8
00:00:22.777 --> 00:00:24.989
Alex, you're good?

9
00:00:24.989 --> 00:00:27.566
All right, folk,
I think at this point here,

10
00:00:27.566 --> 00:00:29.823
with just one final closing words here.

11
00:00:29.823 --> 00:00:33.430
So, pure functions and immutability.

12
00:00:33.430 --> 00:00:35.340
Easier to add feature is
very fair point from itself.

13
00:00:35.340 --> 00:00:37.370
But, that's where we had
to be smart about this and

14
00:00:37.370 --> 00:00:40.080
understand that pause
by reference somebody.

15
00:00:40.080 --> 00:00:45.160
Pure functions and immutability,
easier to add features every save function

16
00:00:45.160 --> 00:00:48.940
can be safely used in new combinations.

17
00:00:50.650 --> 00:00:52.640
Take those, use them anywhere else,

18
00:00:52.640 --> 00:00:57.060
knowing that it will not break other
parts of our app, more readable.

19
00:00:57.060 --> 00:00:58.800
Every line is self contained and complete.

20
00:00:58.800 --> 00:01:01.350
I like that word complete,
like is when its beginning and ending,

21
00:01:01.350 --> 00:01:02.200
everything's in that line.

22
00:01:03.410 --> 00:01:04.620
It's fully descriptive and

23
00:01:04.620 --> 00:01:07.070
makes it more readable like I don't
need to look at this line and go.

24
00:01:07.070 --> 00:01:08.430
Hold on.
What is this really doing?

25
00:01:08.430 --> 00:01:10.650
I can read it and
know that is its beginning and end.

26
00:01:11.770 --> 00:01:15.370
And by the way, its end is a certain
the next line, and only the next line.

27
00:01:15.370 --> 00:01:17.160
Always, as a strict rule.

28
00:01:17.160 --> 00:01:21.390
Exactly what it does is discovered by its
name unlimited that empowers as I said it.

29
00:01:21.390 --> 00:01:26.320
I just write these from my easily bug know
thousands of lines of interdependence.

30
00:01:26.320 --> 00:01:27.808
That's what you want to
mean by interdependence,

31
00:01:27.808 --> 00:01:28.786
every line depend on each other.

32
00:01:28.786 --> 00:01:32.782
Each other not directly, but via global
states, global memory, global safe data,

33
00:01:32.782 --> 00:01:34.970
which can all depend on each other.

34
00:01:34.970 --> 00:01:36.730
I can use this anywhere else.

35
00:01:36.730 --> 00:01:38.820
So please don't make this line.

36
00:01:38.820 --> 00:01:41.521
No one should not make
this line dependent,

37
00:01:41.521 --> 00:01:46.275
which can be your implicitly making all
other lines dependent on that array.

38
00:01:46.275 --> 00:01:48.970
This one line here array don't
matter if you were to mutate.

39
00:01:48.970 --> 00:01:50.656
So if you had a mutating version of map,

40
00:01:50.656 --> 00:01:52.662
it would make all other
lines dependent on it.

41
00:01:52.662 --> 00:01:54.920
Map to be clear, is smart.

42
00:01:56.190 --> 00:01:58.990
Brand new data, do not mutate.

43
00:01:58.990 --> 00:02:00.410
Focus on immutability of data.

44
00:02:01.930 --> 00:02:03.810
All right, people,
pair programming at this point.

45
00:02:05.060 --> 00:02:06.250
And after that, just so you know,

46
00:02:06.250 --> 00:02:08.277
we're going cuz I'm really
excited where we're going.

47
00:02:08.277 --> 00:02:10.821
Seth's question.

48
00:02:10.821 --> 00:02:14.772
He said, hold on, my listing of
a functions ain't gonna work you've got,

49
00:02:14.772 --> 00:02:16.815
you know what they call mismatch RRT.

50
00:02:16.815 --> 00:02:19.710
RRT is a number of inputs
your function takes and

51
00:02:19.710 --> 00:02:21.439
it's mismatch with a number of inputs.

52
00:02:21.439 --> 00:02:25.930
Your use of it's going to expect,
it would break the whole thing.

53
00:02:25.930 --> 00:02:26.580
Do not fear.

54
00:02:26.580 --> 00:02:32.760
We're going to use closure to give our
functions the most important superpower.

55
00:02:32.760 --> 00:02:36.770
We're then going to be able to decorate
functions which is a quick way of

56
00:02:36.770 --> 00:02:38.000
editing functions.

57
00:02:39.220 --> 00:02:42.080
So that we don't have to
build brand new functions.

58
00:02:42.080 --> 00:02:44.770
And giving them special properties
that if we save more ready,

59
00:02:44.770 --> 00:02:45.820
we can otherwise give them.

60
00:02:47.090 --> 00:02:51.772
And it's gonna allow us to achieve
partial application that allows

61
00:02:51.772 --> 00:02:54.656
us to edit functions, number of inputs.

