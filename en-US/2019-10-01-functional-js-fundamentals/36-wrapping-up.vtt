WEBVTT

1
00:00:03.359 --> 00:00:07.387
&gt;&gt; Will Sentence: So functional
programming is a paradigmatic shift to

2
00:00:07.387 --> 00:00:11.951
take us away from our code being
a series of instructions with

3
00:00:11.951 --> 00:00:16.784
the computer that aren't really
written for us to understand so

4
00:00:16.784 --> 00:00:21.635
clearly and where every one of
them can affect every other line.

5
00:00:21.635 --> 00:00:28.224
Into a world where every single line
is given a lovely human readable name.

6
00:00:28.224 --> 00:00:35.360
And then we break down each of our lines
into one of those individual functions.

7
00:00:35.360 --> 00:00:41.800
And then couple them back up,
combine them back up into larger tasks.

8
00:00:41.800 --> 00:00:48.736
As we'll see in a moment, it produces
code that is profoundly easier to debug,

9
00:00:48.736 --> 00:00:53.408
to interpret for others,
and to add new features to.

10
00:00:53.408 --> 00:00:58.016
We just take the pre-saved little blocks,
these little tiny functions and

11
00:00:58.016 --> 00:00:59.168
join them back up.

12
00:01:01.857 --> 00:01:06.027
&gt;&gt; Will Sentence: Now, we have to do
some interesting feats to wrestle these

13
00:01:06.027 --> 00:01:09.517
individual mini tasks,
these tiny functions,

14
00:01:09.517 --> 00:01:12.850
these units of code,
back into larger tasks.

15
00:01:14.050 --> 00:01:18.230
We saw some of them today, higher
order functions that has combined and

16
00:01:18.230 --> 00:01:23.600
make individual code more specific
by combining functions together.

17
00:01:23.600 --> 00:01:28.510
Compositional reduction of a series of
functions allows us to pass data through,

18
00:01:28.510 --> 00:01:31.624
combine it with a function,
pass it to the next function, return it so

19
00:01:31.624 --> 00:01:34.880
I'll open the next function
in a super readable manner.

20
00:01:34.880 --> 00:01:40.060
We then have to use closure
to enable partial application

21
00:01:40.060 --> 00:01:43.300
where our functions
required multiple inputs.

22
00:01:43.300 --> 00:01:46.390
And yet,
if we're having them automatically run for

23
00:01:46.390 --> 00:01:51.500
us by just listing them out, they're
expecting to only receive one input.

24
00:01:51.500 --> 00:01:54.220
And if we have multiple inputs,
the whole system breaks down.

25
00:01:55.300 --> 00:01:58.470
But folk, there's even more, and

26
00:01:58.470 --> 00:02:02.450
the goal of today's tool was not to
give you every one of those techniques.

27
00:02:02.450 --> 00:02:05.334
It was instead to give you
some of the core techniques,

28
00:02:05.334 --> 00:02:07.098
understand them under the hood.

29
00:02:07.098 --> 00:02:10.722
So you are in the best possible
position to go and tackle,

30
00:02:10.722 --> 00:02:15.556
taking on all those further techniques
out there to make your code capable of

31
00:02:15.556 --> 00:02:18.447
switching into this more functional style.

32
00:02:18.447 --> 00:02:23.001
There's libraries out there like Rounder,
all of which had these elements,

33
00:02:23.001 --> 00:02:24.670
but go far beyond it as well.

34
00:02:24.670 --> 00:02:29.752
You hopefully now have your under the hood
understanding of some of these core

35
00:02:29.752 --> 00:02:34.612
pieces on which you can now build
those ever more sophisticated models.

36
00:02:34.612 --> 00:02:39.051
But wow, if you can do it,
we get code that looks like a to

37
00:02:39.051 --> 00:02:43.208
do list of tasks that I can
pass to any fellow engineer.

38
00:02:43.208 --> 00:02:47.364
And they can say,
here we are taking in this player,

39
00:02:47.364 --> 00:02:52.590
we're taking in their name,
we're then taking the first name.

40
00:02:52.590 --> 00:02:54.970
We're up a and or proper casing it.

41
00:02:54.970 --> 00:02:59.430
We're adding a label prepended
to it saying user and

42
00:02:59.430 --> 00:03:05.310
then we're creating a template ready for
our DOM, ready to render to the DOM.

43
00:03:05.310 --> 00:03:10.490
Note by the way, here, we might've had to
partially apply one of these functions.

44
00:03:10.490 --> 00:03:14.310
What if our user template depends
on some other piece of data?

45
00:03:14.310 --> 00:03:18.710
We might have had to pre-fill that
other piece of data to make this

46
00:03:18.710 --> 00:03:21.117
createUserTemplate ready to run.

47
00:03:21.117 --> 00:03:24.483
Adding user label, we may want
to add a more general label and

48
00:03:24.483 --> 00:03:28.323
pre-fill it with a specific label
we wanna add to that piece of data.

49
00:03:28.323 --> 00:03:33.545
All of that's gonna use our
partial application technique,

50
00:03:33.545 --> 00:03:36.266
all of which relies on closure.

51
00:03:36.266 --> 00:03:38.953
But if we can do it, folk,

52
00:03:38.953 --> 00:03:44.570
our code is now a set of
independent self contained.

53
00:03:44.570 --> 00:03:48.200
This line,
its only consequence is the next function.

54
00:03:48.200 --> 00:03:53.290
Get first name, we return out will,
only consequence, pass into proper case.

55
00:03:53.290 --> 00:03:56.132
Get will with uppercase W.

56
00:03:56.132 --> 00:04:02.249
We get it, these self contained
steps we can then wield,

57
00:04:02.249 --> 00:04:07.483
recombine up to solve any
problem of our choice.

58
00:04:07.483 --> 00:04:11.383
We can become true

59
00:04:11.383 --> 00:04:16.587
composers of our code.

60
00:04:16.587 --> 00:04:20.710
It's been a pleasure sharing with you all
some of the foundations of functional

61
00:04:20.710 --> 00:04:22.160
programming.

62
00:04:22.160 --> 00:04:24.690
You've gone under the hood
of a small number today.

63
00:04:24.690 --> 00:04:32.480
Now, take these core concepts and
apply them in your own code step by step.

64
00:04:32.480 --> 00:04:36.820
And then look to the many other concepts
out there in functional programming.

65
00:04:36.820 --> 00:04:44.410
Use these foundational steps to take you
through to understand those new concepts.

66
00:04:44.410 --> 00:04:45.970
Thank you so much, people.

67
00:04:45.970 --> 00:04:49.090
It's been a pleasure sharing
with you this wonderful,

68
00:04:49.090 --> 00:04:53.828
ever more popular paradigm for
writing our code at scale.

69
00:04:53.828 --> 00:04:55.981
Thank you.

70
00:04:55.981 --> 00:04:58.725
&gt;&gt; Audience: [APPLAUSE]

