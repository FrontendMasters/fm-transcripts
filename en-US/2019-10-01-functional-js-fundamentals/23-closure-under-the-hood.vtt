WEBVTT

1
00:00:00.290 --> 00:00:02.230
&gt;&gt; Will Sentance: But
let's go through this line by line and

2
00:00:02.230 --> 00:00:04.140
understand it incompletion.

3
00:00:04.140 --> 00:00:07.450
Alex, line one, what are we saving?

4
00:00:07.450 --> 00:00:10.700
&gt;&gt; Alex: We're declaring a function,
label functionCreator.

5
00:00:10.700 --> 00:00:13.260
&gt;&gt; Will Sentance: Excellent,
there it is, no different than normal.

6
00:00:13.260 --> 00:00:19.940
Saving it into global memory
functionCreator, it's a whole function.

7
00:00:19.940 --> 00:00:21.345
People, we're almost there.

8
00:00:21.345 --> 00:00:24.210
[LAUGH] So that's not.

9
00:00:24.210 --> 00:00:30.570
All right, next line, Anna,
left-hand side of next line.

10
00:00:30.570 --> 00:00:33.400
&gt;&gt; Anna: Declaring a function
called generatedFunc.

11
00:00:34.740 --> 00:00:36.210
&gt;&gt; Will Sentance: I wouldn't say that.

12
00:00:36.210 --> 00:00:41.046
Declaring a label generatedFunc,

13
00:00:41.046 --> 00:00:46.372
into which will be stored, what Anna?

14
00:00:46.372 --> 00:00:48.590
&gt;&gt; Anna: The result of functionCreator.

15
00:00:48.590 --> 00:00:49.620
&gt;&gt; Will Sentance: Is she right?

16
00:00:49.620 --> 00:00:51.000
She's spot on.

17
00:00:51.000 --> 00:00:55.450
Exactly the output,
the executed, nothing, right?

18
00:00:55.450 --> 00:00:59.950
The return value of executing
functionCreator running it.

19
00:00:59.950 --> 00:01:01.510
And Anna, what told you that?

20
00:01:01.510 --> 00:01:06.550
What symbols told you that
right-hand side was work to be done?

21
00:01:06.550 --> 00:01:07.590
&gt;&gt; Anna: The parentheses.

22
00:01:07.590 --> 00:01:09.530
&gt;&gt; Will Sentance: The parentheses,
exactly.

23
00:01:11.320 --> 00:01:15.960
It's 1,000 times people have found
this single line one of the hardest

24
00:01:15.960 --> 00:01:17.920
is the biggest gotcha in JavaScript.

25
00:01:17.920 --> 00:01:19.710
It's not really a gotcha,
gotcha is like if I were to trick.

26
00:01:19.710 --> 00:01:22.640
More like just we really
need to understand what

27
00:01:22.640 --> 00:01:24.060
we're doing when we run functions.

28
00:01:24.060 --> 00:01:25.470
What we're doing when we say functions,

29
00:01:25.470 --> 00:01:28.460
we're doing when we declare labels
to know what's happening this line.

30
00:01:28.460 --> 00:01:29.610
Okay, there it is generatedFunk.

31
00:01:29.610 --> 00:01:34.267
For now it's uninitialized,
I was gonna tell you why?

32
00:01:34.267 --> 00:01:36.243
Why we say uninitialized?

33
00:01:36.243 --> 00:01:41.276
Undefined was what would happen
when you declared your label that

34
00:01:41.276 --> 00:01:46.687
was gonna be the output of the function
on the right hand side with var.

35
00:01:46.687 --> 00:01:49.268
Then it would default one find
while the function ran, and

36
00:01:49.268 --> 00:01:52.790
then you would redefine it as
a result of the function call.

37
00:01:52.790 --> 00:01:56.070
With a constant coloration,
you can't have two data types

38
00:01:56.070 --> 00:01:59.146
changed out you can't declare
it as undefined initially.

39
00:01:59.146 --> 00:02:01.300
Default is gonna find and then when you
get the result of the function call,

40
00:02:01.300 --> 00:02:05.570
suddenly switch it out to whatever
the result the function call is.

41
00:02:05.570 --> 00:02:11.177
So instead, you don't even actually
fully declare the label generatedFunk

42
00:02:11.177 --> 00:02:15.170
until you've actually got the result
of the right-hand side running.

43
00:02:15.170 --> 00:02:16.680
This relates back sorry, everybody.

44
00:02:16.680 --> 00:02:19.650
This relates back to Charles
his question much earlier

45
00:02:19.650 --> 00:02:22.100
about undefined versus an initialized.

46
00:02:22.100 --> 00:02:25.570
GeneratedFunc declared,
what do we need, Anna to go and

47
00:02:25.570 --> 00:02:30.430
execute to figure out what
to store in generatedFunk?

48
00:02:30.430 --> 00:02:31.307
What do we need to go and

49
00:02:31.307 --> 00:02:33.720
execute to figure out what to
store into generated function?

50
00:02:33.720 --> 00:02:34.597
&gt;&gt; Anna: FunctionCreator.

51
00:02:34.597 --> 00:02:40.905
&gt;&gt; Will Sentance: FunctionCreator,
let's get executing.

52
00:02:40.905 --> 00:02:44.400
All right, so
we're gonna execute functionCreator.

53
00:02:44.400 --> 00:02:46.260
Anna, we need a new what?

54
00:02:49.030 --> 00:02:49.811
&gt;&gt; Anna: Execution context.

55
00:02:49.811 --> 00:02:50.339
&gt;&gt; Will Sentance: Excellent.

56
00:02:50.339 --> 00:02:51.070
&gt;&gt; Anna: [LAUGH]
&gt;&gt; Will Sentance: And

57
00:02:51.070 --> 00:02:57.790
we know that whatever comes out of it is
going to be stored into generatedFunc.

58
00:02:57.790 --> 00:03:03.449
Let's create our execution context,
there it is.

59
00:03:05.752 --> 00:03:10.270
&gt;&gt; Will Sentance: And,
[LAUGH] it's a rhombus at this point.

60
00:03:10.270 --> 00:03:13.830
And Charles into it we go, line one.

61
00:03:13.830 --> 00:03:14.570
What are we gonna do?

62
00:03:14.570 --> 00:03:15.750
We're not gonna use this thing.

63
00:03:15.750 --> 00:03:16.470
I just want you to show,

64
00:03:16.470 --> 00:03:19.210
I just wanna make sure everyone knows
we're saving stuff into memory.

65
00:03:19.210 --> 00:03:21.280
What's the first thing
we save into memory?

66
00:03:21.280 --> 00:03:22.467
&gt;&gt; Charles: Counter 0.

67
00:03:22.467 --> 00:03:24.684
&gt;&gt; Will Sentance: Counter 0, exactly.

68
00:03:24.684 --> 00:03:27.920
Okay, I'm gonna do my cool stack
as well actually for this one.

69
00:03:27.920 --> 00:03:32.080
It turns out to be increasingly
important to think in terms of it

70
00:03:32.080 --> 00:03:33.260
to not get confused.

71
00:03:35.770 --> 00:03:37.090
All right, and

72
00:03:37.090 --> 00:03:41.830
first thing on it will always global,
but what are we adding to it, Michael?

73
00:03:43.808 --> 00:03:47.620
&gt;&gt; Michael: Add three, or functionCreator.

74
00:03:47.620 --> 00:03:48.350
&gt;&gt; Will Sentance: FunctionCreator,

75
00:03:48.350 --> 00:03:50.190
because we're calling what
function right now, Michael?

76
00:03:51.580 --> 00:03:53.490
&gt;&gt; Michael: We're calling functionCreator.

77
00:03:53.490 --> 00:03:55.990
&gt;&gt; Will Sentance: FunctionCreator,
it gets added to the call stack.

78
00:03:55.990 --> 00:04:01.722
Because our execution context in
action right now is functionCreators.

79
00:04:01.722 --> 00:04:05.960
Our thread of execution has
woven into functionCreator.

80
00:04:05.960 --> 00:04:10.200
That's where we are right now,
is top of our call stack, okay?

81
00:04:10.200 --> 00:04:14.100
David, we say counter is
0 inside of local memory.

82
00:04:14.100 --> 00:04:17.017
David, next line, what's it say to do?

83
00:04:17.017 --> 00:04:20.314
&gt;&gt; David: We're declaring
a function with the label add3.

84
00:04:20.314 --> 00:04:22.690
&gt;&gt; Will Sentance: Add3, there it is.

85
00:04:26.120 --> 00:04:28.369
Okay, are we gonna use it, David?

86
00:04:28.369 --> 00:04:29.198
&gt;&gt; David: Not right now.
&gt;&gt; Will Sentance: Now,

87
00:04:29.198 --> 00:04:31.428
what are we gonna do with it instead?

88
00:04:31.428 --> 00:04:32.450
&gt;&gt; David: We're gonna return it.

89
00:04:32.450 --> 00:04:37.725
&gt;&gt; Will Sentance: Exactly,
I'm gonna write that here, return add3.

90
00:04:37.725 --> 00:04:39.405
Anyone wanna tell me, therefore,

91
00:04:39.405 --> 00:04:42.350
what JavaScript actually does
in that return statement?

92
00:04:42.350 --> 00:04:45.110
Jasmine, you wanna tell me what
JavaScript does in that return statement,

93
00:04:45.110 --> 00:04:46.160
return add3?

94
00:04:46.160 --> 00:04:47.680
&gt;&gt; Jasmine: Replaces add3 with a function?

95
00:04:48.890 --> 00:04:49.690
&gt;&gt; Will Sentance: You hear this?

96
00:04:49.690 --> 00:04:54.320
Exactly, it looks up the function
definition using that label, and

97
00:04:54.320 --> 00:04:59.000
it grabs the function definition which
is the bit in the parentheses, num,

98
00:04:59.000 --> 00:04:59.860
and then the body of that.

99
00:04:59.860 --> 00:05:03.860
It grabs all that and it returns it out

100
00:05:03.860 --> 00:05:09.080
of the call to functionCreator and
stores it, Jasmine, where?

101
00:05:09.080 --> 00:05:09.900
&gt;&gt; Jasmine: In generated function.

102
00:05:09.900 --> 00:05:12.900
&gt;&gt; Will Sentance: Into
generatedFunc she is spot on.

103
00:05:12.900 --> 00:05:15.220
Into generatedFunc it goes.

104
00:05:16.950 --> 00:05:22.033
It was formerly known as
its birth name was add3,

105
00:05:22.033 --> 00:05:27.238
but now we returned out all
the code grabbed it all,

106
00:05:27.238 --> 00:05:30.521
shorted out the bottom no name.

107
00:05:30.521 --> 00:05:32.105
We lost that name, we just returned that,

108
00:05:32.105 --> 00:05:34.440
we just use it to look up
the function as Jasmine said.

109
00:05:34.440 --> 00:05:37.140
And it got stored into generatedFunc.

110
00:05:37.140 --> 00:05:43.320
If I were to now console log
generatedFunc, I would see input num,

111
00:05:43.320 --> 00:05:47.800
body, whatever it says, const result
= num + 3 would return result.

112
00:05:47.800 --> 00:05:49.380
That is now generatedFunc.

113
00:05:51.350 --> 00:05:55.624
That is what it means to return
a function from another function.

114
00:05:55.624 --> 00:06:01.750
Let's now, this is now popped off
the call stack and all this goodies here.

115
00:06:01.750 --> 00:06:05.120
Well, in theory,
the execution context is gone.

116
00:06:05.120 --> 00:06:07.516
The execution code is all deleted.

117
00:06:07.516 --> 00:06:14.160
And [INAUDIBLE]
that's really nice, and

118
00:06:15.570 --> 00:06:21.230
we go back out to global where we hit,
what line?

119
00:06:21.230 --> 00:06:22.250
Sam, left hand side.

120
00:06:23.850 --> 00:06:24.631
&gt;&gt; Sam: Result.

121
00:06:24.631 --> 00:06:25.375
&gt;&gt; Will Sentance: Result,

122
00:06:25.375 --> 00:06:30.230
and the right-hand side says
go run what function, Sam?

123
00:06:30.230 --> 00:06:31.440
&gt;&gt; Sam: GeneratedFunk.

124
00:06:31.440 --> 00:06:34.022
&gt;&gt; Will Sentance: Go run generatedFunk,
and

125
00:06:34.022 --> 00:06:39.120
what was generatedFunks original name,
Sam?

126
00:06:39.120 --> 00:06:41.354
&gt;&gt; Sam: FunctionCreator.

127
00:06:41.354 --> 00:06:42.610
&gt;&gt; Will Sentance: It's so
easy to think it, right?

128
00:06:43.840 --> 00:06:46.380
What is generatedFunc?

129
00:06:46.380 --> 00:06:46.970
&gt;&gt; Sam: Add3.

130
00:06:49.070 --> 00:06:52.757
&gt;&gt; Will Sentance: Folk with literally 10,
15 years experience,

131
00:06:52.757 --> 00:06:58.135
an enormous gift in engineering still
get caught by this every single time.

132
00:06:58.135 --> 00:07:01.773
And yet if we don't get it
absolutely precise in our head,

133
00:07:01.773 --> 00:07:05.952
everything falls apart in
understanding what's the composure.

134
00:07:05.952 --> 00:07:10.990
1,000 times, I've really stressed for
you, Sam is in the company of

135
00:07:10.990 --> 00:07:14.350
I'm literally talking about
the rock stone of us at city term.

136
00:07:14.350 --> 00:07:18.940
[LAUGH] The superstar developer
she's a person that you

137
00:07:20.350 --> 00:07:23.080
every single time this throws people.

138
00:07:23.080 --> 00:07:27.690
We've got to go run that function one
time, store something in generatedFunc.

139
00:07:27.690 --> 00:07:30.360
It is the functionality of add3, and

140
00:07:30.360 --> 00:07:36.710
from that line on generatedFunc is
the code formally known as add3.

141
00:07:36.710 --> 00:07:39.750
Thank you, Sam honestly because everybody,
who's going,

142
00:07:39.750 --> 00:07:42.560
yeah, I thought the same thing.

143
00:07:42.560 --> 00:07:43.700
Appreciate that for Sam.

144
00:07:43.700 --> 00:07:48.360
So generatedFunc Jasmine is
the function that was born as?

145
00:07:49.480 --> 00:07:50.515
&gt;&gt; Jasmine: Add3.
&gt;&gt; Will Sentance: As add3,

146
00:07:50.515 --> 00:07:53.390
the function definition for
me known as add3.

147
00:07:53.390 --> 00:07:56.510
Now known as generatedFunc,
it's global label.

148
00:07:56.510 --> 00:07:59.440
That was it's label inside of the function
created when it was originally saved

149
00:07:59.440 --> 00:08:00.780
just like we saved counter inside of that.

150
00:08:02.190 --> 00:08:05.920
But we grabbed its code, we only used,
when it says return out of 3,

151
00:08:05.920 --> 00:08:08.620
we only used that label to
find the code of the function.

152
00:08:08.620 --> 00:08:10.725
Return the out stored in generatedFunc.

153
00:08:10.725 --> 00:08:13.488
Some of you may thinking,
yeah, yeah, yeah, I got this.

154
00:08:13.488 --> 00:08:16.232
I promise you, people it is a real touchy.

155
00:08:16.232 --> 00:08:21.109
Out it comes generatedFunc is really,
David, the code formally known as?

156
00:08:21.109 --> 00:08:21.681
&gt;&gt; David: add3.

157
00:08:21.681 --> 00:08:26.542
&gt;&gt; Will Sentance: add3, meaning after I
leave functionCreator inside of which add3

158
00:08:26.542 --> 00:08:31.620
was saved, I can't reference add3 anymore,
it's gone.

159
00:08:31.620 --> 00:08:33.930
Unless, I saved it in a new global label.

160
00:08:33.930 --> 00:08:37.100
David, what was that new
global label I saved add3 in?

161
00:08:37.100 --> 00:08:37.990
&gt;&gt; David: GeneratedFunction.

162
00:08:37.990 --> 00:08:39.180
&gt;&gt; Will Sentance: GeneratedFunc, so

163
00:08:39.180 --> 00:08:42.840
when I run generatedFunc,
I'm really running what, Eric?

164
00:08:42.840 --> 00:08:43.392
&gt;&gt; Eric: Add3.

165
00:08:43.392 --> 00:08:46.610
&gt;&gt; Will Sentance: Add3, so if I want
to refer to Add 3 out and global,

166
00:08:46.610 --> 00:08:48.227
what's his new name, Andrew?

167
00:08:48.227 --> 00:08:50.189
&gt;&gt; Andrew: Generate-
&gt;&gt; Will Sentance: GeneratedFunc,

168
00:08:50.189 --> 00:08:53.501
is generatedFunc actually functionCreator,
Andrew?

169
00:08:53.501 --> 00:08:54.268
&gt;&gt; Andrew: No
&gt;&gt; Will Sentance: No,

170
00:08:54.268 --> 00:08:58.348
what I need to change, Andrew, in order to
make generatingFunc actually does a new

171
00:08:58.348 --> 00:09:00.580
label for
the whole function creative code?

172
00:09:02.030 --> 00:09:06.413
What I need to change in that line so the
generatedFunc is actually just a label for

173
00:09:06.413 --> 00:09:07.900
all the functionCreator?

174
00:09:07.900 --> 00:09:09.200
&gt;&gt; Andrew: I remove the parentheses.

175
00:09:09.200 --> 00:09:11.530
&gt;&gt; Will Sentance: Remove the parentheses,
spot on very nice from Andrew.

176
00:09:11.530 --> 00:09:16.087
All right, but it is a the output of
a one time running or function green,

177
00:09:16.087 --> 00:09:17.071
which is good.

178
00:09:17.071 --> 00:09:19.460
All right, I don't know if you
have by the way, I promise you.

179
00:09:19.460 --> 00:09:21.500
This is super tricky this bit.

180
00:09:21.500 --> 00:09:26.090
So let's run generatedFunc,
new execution context.

181
00:09:27.790 --> 00:09:30.130
There it is,
it's put it on the call stack.

182
00:09:30.130 --> 00:09:32.550
Sorry, everybody, I do apologize.

183
00:09:32.550 --> 00:09:37.659
We're executing generatedFunc
we are brand new,

184
00:09:37.659 --> 00:09:44.325
[CROSSTALK] excellent generatedFunc
formally know as add3, no.

185
00:09:44.325 --> 00:09:50.399
Yes, add3 with the input of sorry, 2, I've
done this so many times with a different

186
00:09:50.399 --> 00:09:55.840
function that I can't get my head out
of it with the input of 2, sorry folks.

187
00:09:55.840 --> 00:10:00.135
There it is, with the input 2,
there we go.

188
00:10:00.135 --> 00:10:02.405
GeneratedFunc input of 2.

189
00:10:02.405 --> 00:10:06.280
Now here is the especially tricky bit,
in my opinion of all this.

190
00:10:06.280 --> 00:10:10.126
Here is the especially tricky
bit of it all, is in order for

191
00:10:10.126 --> 00:10:14.140
me as a developer to figure out
what generatedFunc is doing.

192
00:10:14.140 --> 00:10:19.400
Where do I take my eye, Alex, in order to
figure out what generatedFunc is doing?

193
00:10:19.400 --> 00:10:21.598
&gt;&gt; Alex: You look at whatever was
returned from functionCreator.

194
00:10:21.598 --> 00:10:24.320
&gt;&gt; Will Sentance: Well, that is a very
sophisticated way of putting it, yes.

195
00:10:24.320 --> 00:10:28.520
But actually, in my eye goes
back up to add3 like I have to.

196
00:10:28.520 --> 00:10:33.450
And so we get this false
sense that JavaScript thread

197
00:10:33.450 --> 00:10:36.810
goes back up into functionCreator.

198
00:10:36.810 --> 00:10:40.480
It definitely does not, and
huge shout out to, Alex for

199
00:10:40.480 --> 00:10:43.200
stressing that by saying
actually it goes and

200
00:10:43.200 --> 00:10:48.200
looks what was saved in generatedFunc,
which was the definition of code about 3.

201
00:10:48.200 --> 00:10:52.910
In fact, this f just represents
the code of add3 being saved.

202
00:10:52.910 --> 00:10:56.260
Now we're in global, there ain't no
going back into functionCreator,

203
00:10:56.260 --> 00:10:57.620
that's done, that's gone.

204
00:10:57.620 --> 00:11:02.319
Instead, we're going and
looking in the code over in here,

205
00:11:02.319 --> 00:11:07.308
which was roughly num, and
then return out num + 3, roughly.

206
00:11:07.308 --> 00:11:09.800
That's where we're going to look,
yeah, go ahead, Virginia.

207
00:11:09.800 --> 00:11:13.690
&gt;&gt; Virginia: It's just a quick question,
so when you say we turn at 3.

208
00:11:13.690 --> 00:11:16.580
And you're saying is it
doing a literal copy of

209
00:11:16.580 --> 00:11:17.470
add3-
&gt;&gt; Will Sentance: Okay.

210
00:11:17.470 --> 00:11:19.640
&gt;&gt; Virginia: So that,
when I go and say, like I say,

211
00:11:19.640 --> 00:11:22.080
generateFunc 2 is equal to add3.

212
00:11:22.080 --> 00:11:26.237
So those two different copies
in memory of that function it-

213
00:11:26.237 --> 00:11:27.796
&gt;&gt; Will Sentance: GeneratedFunc 2 is-

214
00:11:27.796 --> 00:11:29.047
&gt;&gt; Virginia: So I can go back and say,

215
00:11:29.047 --> 00:11:31.860
generateFunc 2 equals
to function generator?

216
00:11:31.860 --> 00:11:33.610
&gt;&gt; Will Sentance: FunctionCreator
to being-

217
00:11:33.610 --> 00:11:34.590
&gt;&gt; Virginia: That same one-

218
00:11:34.590 --> 00:11:35.526
&gt;&gt; Will Sentance: No, no,

219
00:11:35.526 --> 00:11:37.640
it'll end up being?

220
00:11:37.640 --> 00:11:40.850
Do you see how important it is we get
our technical communication, right?

221
00:11:40.850 --> 00:11:43.390
So let's go on to Virginia's
question in just a second,

222
00:11:43.390 --> 00:11:44.560
once we've got through this.

223
00:11:44.560 --> 00:11:47.050
But I want you to you think, Virginia,
before you ask the question.

224
00:11:47.050 --> 00:11:50.810
You said, if I went back and
wrote generatedFunc 2 equals

225
00:11:50.810 --> 00:11:52.138
functionCreator-
&gt;&gt; Virginia: Well,

226
00:11:52.138 --> 00:11:52.882
calling functionCreator.
&gt;&gt; Will Sentance: So important,

227
00:11:52.882 --> 00:11:56.260
we'll come back to the question
in a second, Virginia, I promise.

228
00:11:56.260 --> 00:12:00.900
But just, yeah, we'll come back to that
in one second, I promise you, Virginia.

229
00:12:00.900 --> 00:12:04.240
But for now, let's stay in generatedFunc.

230
00:12:04.240 --> 00:12:08.220
We're running it, everyone together,
generatedFunc is a function definition

231
00:12:08.220 --> 00:12:13.075
that was originally known, when it
was inside the functionCreator, as?

232
00:12:13.075 --> 00:12:16.764
&gt;&gt; Add3
&gt;&gt; Will Sentance: Yeah, good, exactly, and

233
00:12:16.764 --> 00:12:18.320
so into it we go.

234
00:12:19.430 --> 00:12:23.830
And who said function multiplied by 2?

235
00:12:23.830 --> 00:12:26.410
That was a good throwback
reference that someone said that.

236
00:12:26.410 --> 00:12:29.380
All right, into it we go, and

237
00:12:29.380 --> 00:12:32.660
we, unfortunately, although we
don't have to, we can go look here.

238
00:12:32.660 --> 00:12:36.170
What's the parameter to which the two
is going to be assigned, Michael?

239
00:12:36.170 --> 00:12:38.500
&gt;&gt; Michael: Num.
&gt;&gt; Will Sentance: Num,

240
00:12:38.500 --> 00:12:41.230
raise your hand if you look back into
functionCreative to figure that out.

241
00:12:41.230 --> 00:12:43.542
But of course, we all do that we
don't memorize all phones coming out.

242
00:12:43.542 --> 00:12:46.926
But I wish we could sort
of see console generated

243
00:12:46.926 --> 00:12:50.430
funk in that middle in
between those two lines.

244
00:12:50.430 --> 00:12:53.685
And that's where we should always
restrict ourselves make ourselves console

245
00:12:53.685 --> 00:12:57.640
generatedFunc to figure out what
the code is we're running down there.

246
00:12:57.640 --> 00:13:00.580
So that we don't think of
going back into our code where

247
00:13:00.580 --> 00:13:02.460
we were initially saved
because it ain't in there.

248
00:13:02.460 --> 00:13:05.625
We don't get to thread back into that,
okay?

249
00:13:05.625 --> 00:13:12.640
But all right, number two, let me do
results, which is 2 plus 3, which is 5.

250
00:13:12.640 --> 00:13:19.270
And then we return the value of result
in to, why did I call in both results?

251
00:13:19.270 --> 00:13:20.820
Dear, I thought I changed that.

252
00:13:20.820 --> 00:13:26.088
Return the value results, everybody in
to what global constant also called?

253
00:13:26.088 --> 00:13:26.836
&gt;&gt; Results.

254
00:13:26.836 --> 00:13:29.570
&gt;&gt; Will Sentance: That's a bad
explanation by me, I apologize.

255
00:13:30.770 --> 00:13:36.230
Note these are in different domains and
so they're not gonna override each other.

256
00:13:36.230 --> 00:13:36.730
Okay.

257
00:13:39.547 --> 00:13:43.580
&gt;&gt; Will Sentance: What was I gonna ask?

258
00:13:43.580 --> 00:13:44.740
That was what I was gonna say.

259
00:13:44.740 --> 00:13:48.690
We're gonna come to thumbs,
where Virginia's gonna raise her question.

260
00:13:48.690 --> 00:13:54.110
Thumbs on in a moment, we saved code,
functionCreator, there it is.

261
00:13:54.110 --> 00:13:58.350
We then saved a label generatedFunc for

262
00:13:58.350 --> 00:14:03.332
whatever came from a one time
running of functionCreator.

263
00:14:03.332 --> 00:14:06.894
There's a friends to say
go run functionCreator, and

264
00:14:06.894 --> 00:14:10.100
do we went we created
a brand new function add3.

265
00:14:10.100 --> 00:14:14.130
And then rather than using it,
we returned out its code.

266
00:14:15.200 --> 00:14:17.970
And stored it under a new
label generatedFunc.

267
00:14:17.970 --> 00:14:24.660
And from then on forevermore generatedFunc
cares nothing about functionCreator.

268
00:14:24.660 --> 00:14:28.880
It only cares about the add3
function that's now stored in it.

269
00:14:28.880 --> 00:14:33.380
So we run it, and
we run generatedFunc and it's just add3.

270
00:14:33.380 --> 00:14:34.820
We can just do it, it feels weird.

271
00:14:34.820 --> 00:14:38.066
We didn't put friends on the end,
no problem.

272
00:14:38.066 --> 00:14:41.889
And it's running add3 and
put 2 into it, and

273
00:14:41.889 --> 00:14:45.713
it goes nominees two
result is 2 plus 3 is 5,

274
00:14:45.713 --> 00:14:49.760
return at results into
global constant result.

275
00:14:49.760 --> 00:14:54.250
Okay folk, you might be thinking
why the hell do we do this?

276
00:14:54.250 --> 00:14:57.423
Why the hell did we save a function
we could have declared globally

277
00:14:57.423 --> 00:14:58.294
inside another?

278
00:14:58.294 --> 00:15:02.818
We'll see that gives our functions
the biggest superpower in JavaScript.

