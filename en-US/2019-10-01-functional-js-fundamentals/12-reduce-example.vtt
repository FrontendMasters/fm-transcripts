WEBVTT

1
00:00:00.140 --> 00:00:01.820
&gt;&gt; Will Sentance: We need our
function to be able to handle both.

2
00:00:01.820 --> 00:00:08.273
And here it is, it's known as reduce,
it can handle a remarkable range of tasks.

3
00:00:08.273 --> 00:00:09.827
We're gonna go through it.

4
00:00:09.827 --> 00:00:11.857
I, because you know me,

5
00:00:11.857 --> 00:00:16.995
I like to hold off on giving them
their fancy names until later.

6
00:00:16.995 --> 00:00:21.604
I'm using how to combine to
refer to our rule by which we

7
00:00:21.604 --> 00:00:25.725
combine our element,
by element, by element.

8
00:00:25.725 --> 00:00:30.000
Here we're going to reduce 1,
2, 3 with our accumulate,

9
00:00:30.000 --> 00:00:35.360
I'm gonna call it buildingUp, our value
of buildingUp which is gonna be 0.

10
00:00:35.360 --> 00:00:38.485
So, we're gonna combine 0 and 1 how?

11
00:00:38.485 --> 00:00:41.566
Virginia, can you spot how
we're gonna combine 0 and 1?

12
00:00:41.566 --> 00:00:42.122
&gt;&gt; Virginia: Sorry what?

13
00:00:42.122 --> 00:00:43.400
&gt;&gt; Will Sentance: How we're
gonna combine 0 and 1?

14
00:00:43.400 --> 00:00:44.550
Can you spot Jasmine?

15
00:00:44.550 --> 00:00:45.303
&gt;&gt; Jasmine: By adding.

16
00:00:45.303 --> 00:00:46.414
&gt;&gt; Will Sentance: By adding.

17
00:00:46.414 --> 00:00:50.458
That's gonna be our rule
by which we combine.

18
00:00:50.458 --> 00:00:53.451
And then we're gonna use the outputs,
actually let's have a look at it,

19
00:00:53.451 --> 00:00:55.057
I think we can sort of see it here right?

20
00:00:55.057 --> 00:01:00.069
We're gonna take in buildingUp which is 0,
we're then gonna have our

21
00:01:00.069 --> 00:01:05.842
how to combine rule which is add and it's
gonna combine 0 with array position 0.

22
00:01:05.842 --> 00:01:07.427
Which will be the number what Jasmine?

23
00:01:07.427 --> 00:01:07.982
&gt;&gt; Jasmine: 1.

24
00:01:07.982 --> 00:01:09.789
&gt;&gt; Will Sentance: 1.
So going 0, 1, and

25
00:01:09.789 --> 00:01:14.267
if you look at how add works, it takes
in (a and b) and returns out a + b.

26
00:01:14.267 --> 00:01:19.250
So you're going to take in 0 and 1 return
out 1 and store that in buildingUp.

27
00:01:19.250 --> 00:01:23.506
In other words we gonna take 0 and 1,

28
00:01:23.506 --> 00:01:28.699
return out 1, and
store that in buildingUp.

29
00:01:28.699 --> 00:01:32.573
And then you use that as the input,
there it is 1,

30
00:01:32.573 --> 00:01:37.555
is gonna go into add with the next
value of the array which is a 2,

31
00:01:37.555 --> 00:01:41.544
combine them to get 3,
store that in buildingUp.

32
00:01:41.544 --> 00:01:43.764
Okay, all right.

33
00:01:43.764 --> 00:01:46.035
Here we go people and
you're all ready to go.

34
00:01:46.035 --> 00:01:48.207
Anna line one what are we doing?

35
00:01:48.207 --> 00:01:50.563
&gt;&gt; Anna: Declaring the function reduce.

36
00:01:50.563 --> 00:01:53.070
&gt;&gt; Will Sentance: Declaring
the function reduce.

37
00:01:53.070 --> 00:01:57.764
There it is beautiful into memory,

38
00:01:57.764 --> 00:02:01.367
into memory, there it is.

39
00:02:01.367 --> 00:02:03.439
Thank you Anna.

40
00:02:03.439 --> 00:02:09.033
Next line, let's not get confused by its
interesting syntax, what are we doing Sam?

41
00:02:09.033 --> 00:02:09.880
&gt;&gt; Sam: Declaring add.

42
00:02:09.880 --> 00:02:11.803
&gt;&gt; Will Sentance: Declaring
the function add.

43
00:02:11.803 --> 00:02:14.870
And it's a very simple function.

44
00:02:14.870 --> 00:02:20.765
It takes in an a and
a b and returns out a + b.

45
00:02:20.765 --> 00:02:24.965
By the way, we always talk about wanting
to have semantic parameter names

46
00:02:24.965 --> 00:02:26.533
meaningful to the reader.

47
00:02:26.533 --> 00:02:30.221
There's an argument in functional
program to leave them a little bit more

48
00:02:30.221 --> 00:02:34.087
general like this, so in order we can
use this function anywhere in our code,

49
00:02:34.087 --> 00:02:36.959
doesn't have to be specific
to what data we're adding.

50
00:02:36.959 --> 00:02:41.655
So, and it's very readable, because it's a
short you need meaningful parameter names

51
00:02:41.655 --> 00:02:45.492
when you got like 30 parameters and
15 lines of code in the function.

52
00:02:45.492 --> 00:02:47.635
Also necessary when it's as simple and
short as this.

53
00:02:47.635 --> 00:02:50.787
Okay, excellent, there it is saved,
hopefully not too small,

54
00:02:50.787 --> 00:02:51.830
everyone can see it.

55
00:02:51.830 --> 00:02:55.070
Charles, left-hand side here,
what are we doing?

56
00:02:55.070 --> 00:02:58.772
&gt;&gt; Charles: You're declaring
a variable called sum.

57
00:02:58.772 --> 00:03:02.340
&gt;&gt; Will Sentance: Yeah, excellent, and you
know what people I'm gonna use this moment

58
00:03:02.340 --> 00:03:05.495
to do my other type of diagram
over here to help ourselves out.

59
00:03:05.495 --> 00:03:08.767
So we're gonna call reduce on 1,
2, 3, add and 0.

60
00:03:08.767 --> 00:03:10.446
What's it gonna do?

61
00:03:10.446 --> 00:03:14.521
It's gonna take in 1, 2, 3,
&gt;&gt; Will Sentance: Okay,

62
00:03:14.521 --> 00:03:18.767
it's gonna take in 1, 2, 3,
it's going to take in our buildingUp,

63
00:03:18.767 --> 00:03:21.497
our thing with which
we're going to combine.

64
00:03:21.497 --> 00:03:26.033
We did it with an array, which honestly,
except for Sam, and real credit to Sam I

65
00:03:26.033 --> 00:03:30.706
don't say this ironically, literally it
is remarkable if your mind is able to go,

66
00:03:30.706 --> 00:03:34.612
when I'm doing map what I'm really
doing is reducing a list of data.

67
00:03:34.612 --> 00:03:38.108
Well, not a list, a first element
with an array to get an array with

68
00:03:38.108 --> 00:03:41.043
that element in,
one array with that element doubled,

69
00:03:41.043 --> 00:03:44.808
and then taking that and taking the two
and combining it to get 2 and 4.

70
00:03:44.808 --> 00:03:48.969
And then taking the 2 and 4 and
combining it with a 3 to get 2, 4, 6,

71
00:03:48.969 --> 00:03:50.626
that's a really big shift.

72
00:03:50.626 --> 00:03:56.291
So there it is our 1 and 0,
how are we combining these?

73
00:03:56.291 --> 00:03:58.231
Michael, can you spot how
we're combining them?

74
00:03:58.231 --> 00:03:58.855
&gt;&gt; Michael: We're adding them.

75
00:03:58.855 --> 00:04:01.334
&gt;&gt; Will Sentance: We're adding,
we're running an add function on them.

76
00:04:01.334 --> 00:04:04.384
So we're gonna take in the first one and

77
00:04:04.384 --> 00:04:07.902
it's gonna give us out
1 plus 0 which is 1.

78
00:04:07.902 --> 00:04:13.542
And then that's going to
go into our next adding,

79
00:04:13.542 --> 00:04:18.781
or our next combining,
and it's gonna return

80
00:04:18.781 --> 00:04:23.230
out 1 plus 2 which is what everybody?

81
00:04:23.230 --> 00:04:25.491
&gt;&gt; Michael: 3.

82
00:04:25.491 --> 00:04:26.543
&gt;&gt; Will Sentance: Geez.

83
00:04:26.543 --> 00:04:30.221
And then we're taking that one and
taking in the building all the way our

84
00:04:30.221 --> 00:04:34.337
buildingUp's being updated, this is
gonna be our buildingUp, buildingUp.

85
00:04:34.337 --> 00:04:38.770
And we're taking it in again, and
this time with a final element of the,

86
00:04:38.770 --> 00:04:41.460
final element of
the [INAUDIBLE] which is 3,

87
00:04:41.460 --> 00:04:44.605
inserting into how to
combine which is everybody?

88
00:04:44.605 --> 00:04:46.263
What is our how to combine rule?

89
00:04:46.263 --> 00:04:47.038
It is?

90
00:04:47.038 --> 00:04:47.561
&gt;&gt; Michael: Add.

91
00:04:47.561 --> 00:04:52.103
&gt;&gt; Will Sentance: Add, and
it's gonna give us out 6, there it is.

92
00:04:52.103 --> 00:04:55.926
This,
&gt;&gt; Will Sentance: People, is our

93
00:04:55.926 --> 00:05:01.981
accumulator which I'm calling buildingUp,
what we're building up as we go.

94
00:05:03.236 --> 00:05:07.991
&gt;&gt; Will Sentance: And this here people
is our rule for how to combine,

95
00:05:07.991 --> 00:05:14.970
they call it the rule for a reducing,
how to combine reducing from 2 to 1.

96
00:05:14.970 --> 00:05:18.821
All right people now let's
get running our function.

97
00:05:18.821 --> 00:05:22.000
There it is summed,
we don't know where to store it yet

98
00:05:22.000 --> 00:05:24.567
because we've got to go off and
run reduce.

99
00:05:24.567 --> 00:05:32.003
Our beautiful reduce function
the most powerful versatile of all.

100
00:05:32.003 --> 00:05:34.710
I wanna tell you now but I can't.

101
00:05:34.710 --> 00:05:36.249
I gotta do the big reveal.

102
00:05:36.249 --> 00:05:41.103
I wanna tell you now about just imagine
if what you could store in this list

103
00:05:41.103 --> 00:05:44.844
here that you could then
combine with here, element and

104
00:05:44.844 --> 00:05:49.939
then use the output from 2 becomes 1,
combine the next from 2 becomes 1,

105
00:05:49.939 --> 00:05:52.830
just imagine what you could store in here.

106
00:05:52.830 --> 00:05:55.366
Don't anyone shout out.

107
00:05:55.366 --> 00:05:59.682
All right, good summed uninitialized for
now while we go and

108
00:05:59.682 --> 00:06:03.396
run,
&gt;&gt; Will Sentance: Reduce with

109
00:06:03.396 --> 00:06:06.052
the input of what?

110
00:06:06.052 --> 00:06:07.164
Who I'm gonna call on?

111
00:06:07.164 --> 00:06:08.403
Eric?

112
00:06:08.403 --> 00:06:11.019
&gt;&gt; Eric: So we have an array with 1,
2, 3 in it.

113
00:06:11.019 --> 00:06:11.858
&gt;&gt; Will Sentance: Yep.

114
00:06:11.858 --> 00:06:14.307
&gt;&gt; Eric: We had the function add-
&gt;&gt; Will Sentance: Perfect.

115
00:06:14.307 --> 00:06:15.967
&gt;&gt; Eric: And then we have the number 0.

116
00:06:15.967 --> 00:06:16.568
&gt;&gt; Will Sentance: Fantastic,

117
00:06:16.568 --> 00:06:20.181
I don't know why I'm doing the full
function adds code there, but whatever.

118
00:06:20.181 --> 00:06:23.016
There it is, that's pretty unhelpful.

119
00:06:23.016 --> 00:06:23.922
Why did I do that?

120
00:06:23.922 --> 00:06:25.207
And then 0, okay.

121
00:06:25.207 --> 00:06:28.298
And we're gonna create,
everybody together, a new?

122
00:06:28.298 --> 00:06:30.824
&gt;&gt; Virginia: Execution context.

123
00:06:30.824 --> 00:06:31.352
&gt;&gt; Will Sentance: Welcome.

124
00:06:31.352 --> 00:06:31.920
Good.

125
00:06:31.920 --> 00:06:33.978
&gt;&gt; Virginia: [LAUGH].

126
00:06:33.978 --> 00:06:35.322
&gt;&gt; Will Sentance: Seth!

127
00:06:35.322 --> 00:06:40.492
Seth got to cut short because
he's been to hard parts before.

128
00:06:40.492 --> 00:06:42.042
You're so confident.

129
00:06:42.042 --> 00:06:42.816
&gt;&gt; Virginia: [LAUGH].

130
00:06:42.816 --> 00:06:46.189
&gt;&gt; Will Sentance: And its output when it
does eventually give us a return value

131
00:06:46.189 --> 00:06:47.679
will be stored in summed.

132
00:06:47.679 --> 00:06:50.109
Let's create the execution context,

133
00:06:50.109 --> 00:06:54.312
I'm gonna do a big old execution
context here people, there it is.

134
00:06:57.636 --> 00:06:59.054
&gt;&gt; Will Sentance: Look
at that how careful,

135
00:06:59.054 --> 00:07:03.381
I do see it's always at this angle,
I have clearly very bad spatial awareness.

136
00:07:03.381 --> 00:07:07.856
There it is, and
into the local memory or into the local

137
00:07:07.856 --> 00:07:12.931
execution context we go and
what is in our local memory first?

138
00:07:12.931 --> 00:07:16.308
What is the first thing in
our local memory Babanesh?

139
00:07:16.308 --> 00:07:17.701
&gt;&gt; Babanesh: 1, 2, 3.

140
00:07:17.701 --> 00:07:22.608
&gt;&gt; Will Sentance: Array is set to 1, 2, 3.

141
00:07:22.608 --> 00:07:29.570
Next thing Babanesh is our label how to
combine is assigned what functionality?

142
00:07:29.570 --> 00:07:30.144
Babanesh?

143
00:07:30.144 --> 00:07:30.958
&gt;&gt; Babanesh: Add.

144
00:07:30.958 --> 00:07:32.609
&gt;&gt; Will Sentance: The add functionality.

145
00:07:32.609 --> 00:07:36.987
Meaning anywhere people that
you now see how to combine

146
00:07:36.987 --> 00:07:40.616
inside of reduce it's actually saying add.

147
00:07:40.616 --> 00:07:43.452
And therefore,
we're gonna pass into a and b buildingUp,

148
00:07:43.452 --> 00:07:45.902
which looks like it's gonna be 0,
that's good.

149
00:07:45.902 --> 00:07:49.920
And the first position of the array,
which is 1, and

150
00:07:49.920 --> 00:07:53.418
combine them up by adding
to get the number 1.

151
00:07:53.418 --> 00:07:54.327
I'm happy with that.

152
00:07:54.327 --> 00:07:57.693
All right, in goes a and b and

153
00:07:57.693 --> 00:08:02.330
our function is gonna return out a + b.

154
00:08:02.330 --> 00:08:05.997
Final thing, the thing with which
we're going to combine, by the way,

155
00:08:05.997 --> 00:08:10.082
I'm going to tell you right now, I wish
this function were not called reduced but

156
00:08:10.082 --> 00:08:13.645
called reduce from two things
to one repeatedly inside itself.

157
00:08:13.645 --> 00:08:15.037
Another catchy name!

158
00:08:15.037 --> 00:08:16.231
&gt;&gt; Babanesh: Rolls off the tongue.

159
00:08:16.231 --> 00:08:17.395
&gt;&gt; Will Sentance: Rolls off the tongue.

160
00:08:17.395 --> 00:08:23.079
But otherwise, you're so tempted to think
the reduction is from here to here.

161
00:08:23.079 --> 00:08:28.032
The reduction is from that first element
with the 0 combined to produce 1 through

162
00:08:28.032 --> 00:08:30.848
our rule of combining
which is adding the two.

163
00:08:30.848 --> 00:08:33.699
And then taking the output of that,
have I said this enough times now?

164
00:08:33.699 --> 00:08:37.138
[LAUGH] Good.

165
00:08:37.138 --> 00:08:39.274
I would always rather
say it too many times,

166
00:08:39.274 --> 00:08:43.733
and you're all feeling uh-huh, yeah, yeah,
yeah too simple than the other way around.

167
00:08:43.733 --> 00:08:47.564
All right, and
then the final parameter Babanesh is?

168
00:08:47.564 --> 00:08:48.297
&gt;&gt; Babanesh: BuildingUp.

169
00:08:48.297 --> 00:08:52.138
&gt;&gt; Will Sentance: BuildingUp
which is given what value?

170
00:08:52.138 --> 00:08:53.804
Given what value Babanesh?

171
00:08:53.804 --> 00:08:55.154
&gt;&gt; Babanesh: 1 plus-
&gt;&gt; Will Sentance: No, no,

172
00:08:55.154 --> 00:08:56.149
the buildingUp is?

173
00:08:56.149 --> 00:08:56.705
&gt;&gt; Babanesh: 0.

174
00:08:56.705 --> 00:08:59.842
&gt;&gt; Will Sentance: Is given in 0, exactly.

175
00:08:59.842 --> 00:09:01.503
Okay, there it is, folk.

176
00:09:01.503 --> 00:09:05.166
We land in reduce and
the first thing we do is a for loop.

177
00:09:05.166 --> 00:09:08.870
David i's value at the start of the for
loop is what?

178
00:09:08.870 --> 00:09:11.347
&gt;&gt; David: 0.
&gt;&gt; Will Sentance: 0.

179
00:09:11.347 --> 00:09:16.537
Okay, array positions 0 is what, David?

180
00:09:16.537 --> 00:09:17.108
&gt;&gt; David: 1.

181
00:09:17.108 --> 00:09:20.473
&gt;&gt; Will Sentance: 1, redemption.

182
00:09:20.473 --> 00:09:22.893
BuildingUp David so we got our 1,

183
00:09:22.893 --> 00:09:26.991
buildingUp we're gonna combined
our 1 with what David?

184
00:09:26.991 --> 00:09:29.381
&gt;&gt; David: With buildingUp to 0-
&gt;&gt; Will Sentance: Which is 0, excellent.

185
00:09:29.381 --> 00:09:32.557
And we are gonna combine
them using what rule,

186
00:09:32.557 --> 00:09:35.250
our how to combine which is what David?

187
00:09:35.250 --> 00:09:35.856
&gt;&gt; David: The add function.

188
00:09:35.856 --> 00:09:38.366
&gt;&gt; Will Sentance: It's add function,
exactly.

189
00:09:38.366 --> 00:09:42.182
We take 0 and 1 in and we return out 1.

190
00:09:42.182 --> 00:09:46.861
And we store it where, David?

191
00:09:46.861 --> 00:09:47.536
&gt;&gt; David: In buildingUp.

192
00:09:47.536 --> 00:09:48.562
&gt;&gt; Will Sentance: Into buildingUp,
exactly.

193
00:09:48.562 --> 00:09:52.556
We update our value of buildingUp to 1.

194
00:09:52.556 --> 00:10:00.040
That is to say it gets stored
into buildingUp which is now 1.

195
00:10:00.040 --> 00:10:04.908
There it is 1,
we've reduced from 2 to become 1.

196
00:10:04.908 --> 00:10:09.217
And now we're gonna use that output of the
first reducing 2 to become 1 to combine

197
00:10:09.217 --> 00:10:13.353
could reduce with the next element of
the array to hopefully get one thing out.

198
00:10:13.353 --> 00:10:16.698
And so
we're going to say now i's value Anna is?

199
00:10:16.698 --> 00:10:17.931
&gt;&gt; Anna: 1.

200
00:10:17.931 --> 00:10:21.892
&gt;&gt; Will Sentance: Not 0 is 1,
excellent Anna.

201
00:10:21.892 --> 00:10:26.381
Is 1, Anna's spot on.

202
00:10:26.381 --> 00:10:34.207
I's value is 1 therefore array position 1
is our next element which is what Anna?

203
00:10:34.207 --> 00:10:34.933
&gt;&gt; Anna: 2.

204
00:10:34.933 --> 00:10:36.514
&gt;&gt; Will Sentance: 2, excellent.

205
00:10:36.514 --> 00:10:41.057
And our 2 is combined with
buildingUp which now is no longer 0,

206
00:10:41.057 --> 00:10:46.376
it's been updated by our combining with
the first element to be what Anna?

207
00:10:46.376 --> 00:10:49.140
&gt;&gt; Anna: 1.
&gt;&gt; Will Sentance: 1, well done from Anna.

208
00:10:49.140 --> 00:10:53.025
1 and
2 are gonna be combined by what rule Anna?

209
00:10:53.025 --> 00:10:53.549
&gt;&gt; Anna: Add.

210
00:10:53.549 --> 00:10:56.080
&gt;&gt; Will Sentance: Add
is our how to combine.

211
00:10:56.080 --> 00:11:01.144
Outcomes 3, and
we're gonna do what with that, Anna?

212
00:11:01.144 --> 00:11:02.291
&gt;&gt; Anna: Store it in buildingUp.

213
00:11:02.291 --> 00:11:05.239
&gt;&gt; Will Sentance: Into buildingUp,
she's spot on,

214
00:11:05.239 --> 00:11:09.773
into buildingUp which is now gonna be 3,
there it is.

215
00:11:09.773 --> 00:11:15.646
Whew, and now i's final value is 2.

216
00:11:15.646 --> 00:11:20.872
Therefore, array position 2 Alex, is?

217
00:11:20.872 --> 00:11:21.441
&gt;&gt; Alex: 3.

218
00:11:21.441 --> 00:11:24.746
&gt;&gt; Will Sentance: 3, and we wanna combine
it with the output of the previous

219
00:11:24.746 --> 00:11:27.315
combination which we stored in buildingUp.

220
00:11:27.315 --> 00:11:33.685
And so we do 3 and that 3 and
combine them Alex by what rule?

221
00:11:33.685 --> 00:11:35.001
&gt;&gt; Alex: Add.
&gt;&gt; Will Sentance: Add.

222
00:11:35.001 --> 00:11:41.443
It returns out 6 which gets stored into
what dates the value of what Alex?

223
00:11:41.443 --> 00:11:41.991
&gt;&gt; Alex: BuildingUp.

224
00:11:41.991 --> 00:11:43.515
&gt;&gt; Will Sentance: BuildingUp.

225
00:11:43.515 --> 00:11:47.034
And the final line of the reduction
function, the function, well,

226
00:11:47.034 --> 00:11:49.835
let's not call it that of
our reduced functionality.

227
00:11:49.835 --> 00:11:54.163
Our function that does repeat it
reduction from 2 to become 1 and

228
00:11:54.163 --> 00:11:58.978
then takes that and reduces it with
an x value to become 1 and takes that.

229
00:11:58.978 --> 00:12:02.503
The final output is our value
buildingUp which is what Alex?

230
00:12:02.503 --> 00:12:03.040
&gt;&gt; Alex: 6.

231
00:12:03.040 --> 00:12:03.677
&gt;&gt; Will Sentance: Is 6.

232
00:12:03.677 --> 00:12:05.673
And we return that out into what Alex?

233
00:12:05.673 --> 00:12:06.368
&gt;&gt; Alex: Summed.

234
00:12:06.368 --> 00:12:10.376
&gt;&gt; Will Sentance: Into summed.

235
00:12:10.376 --> 00:12:12.443
And there it is people.

236
00:12:12.443 --> 00:12:16.954
That is the heart of
the most important function

237
00:12:16.954 --> 00:12:21.706
that we use in functional programming,
reduce.

238
00:12:21.706 --> 00:12:27.088
It is not about reducing 1, 2, 3 to 6,
it is about reducing 1 with 0 through

239
00:12:27.088 --> 00:12:32.480
some rule and then taking the output of
that reduction and inserting into the rule

240
00:12:32.480 --> 00:12:37.414
again with an x value and reducing it
from 2 to become 1, 2 to become 1.

241
00:12:37.414 --> 00:12:41.333
And here's the thing people
we can reduce with anything.

242
00:12:41.333 --> 00:12:46.152
We can reduce our values with an array,
which now 1, suppose our

243
00:12:46.152 --> 00:12:51.759
reduction rule where instead with an array
our reduction rule would be 1 and

244
00:12:51.759 --> 00:12:57.478
then multiply it by 2 and push it into
the array, and we'd get 2 in an array.

245
00:12:57.478 --> 00:13:02.179
And then we'd take that one with the 2
multiply it by 2 combine it with

246
00:13:02.179 --> 00:13:05.535
the 2 array,
the array with 2 in and get 2, 4.

247
00:13:05.535 --> 00:13:09.945
And then the 2, well let's write it,
we'd combine to get, so

248
00:13:09.945 --> 00:13:15.597
we take an array combine it by multiplying
the element and pushing it in and get 2.

249
00:13:15.597 --> 00:13:20.202
And then take the next one double
push it in and get 2, 4 and

250
00:13:20.202 --> 00:13:25.567
take the next one with the 3 doubled,
push it in and get 2, 4, 6.

251
00:13:25.567 --> 00:13:32.253
And our rule for how to combine here would
be multiply element by 2 and push 2 array.

252
00:13:32.253 --> 00:13:35.037
And the things we'd take
in would be our element and

253
00:13:35.037 --> 00:13:36.994
our array which updates each time.

254
00:13:36.994 --> 00:13:40.957
Wow, what a versatile function this is.

255
00:13:40.957 --> 00:13:44.256
What a flexible function this is.

256
00:13:44.256 --> 00:13:48.904
All right, but do you see why I
think it should be called reduce by,

257
00:13:48.904 --> 00:13:50.908
it [INAUDIBLE] be to reduced.

258
00:13:50.908 --> 00:13:54.426
Reduced from two things to one
repeatedly inside the function,

259
00:13:54.426 --> 00:13:58.138
because it's not reducing 1, 2,
3 to 6 which you might think,

260
00:13:58.138 --> 00:14:01.087
cuz you can also reduce 1,
2, 3, to 2, 4, 6.

261
00:14:01.087 --> 00:14:04.977
It's the reduction from
element with accumulator, and

262
00:14:04.977 --> 00:14:08.552
that's what our buildingUp
is called officially.

263
00:14:08.552 --> 00:14:12.648
And our how to a combine rule is
called our reducer, our function,

264
00:14:12.648 --> 00:14:15.075
our rule for how we reduce from 2 to 1.

265
00:14:15.075 --> 00:14:19.099
I'm repeating it cuz it seems to easy,
hm, better that then.

266
00:14:19.099 --> 00:14:24.796
Another thing I want you to know
before we move onto further material.

267
00:14:24.796 --> 00:14:32.485
And that is arrays, objects and functions
have access to something known as methods.

268
00:14:32.485 --> 00:14:36.257
I just wanna stress,
that's what I wanted say,

269
00:14:36.257 --> 00:14:39.387
right now reducing data with more data.

270
00:14:41.980 --> 00:14:46.693
&gt;&gt; Will Sentance: Imagine if we could
reduce something element by element

271
00:14:46.693 --> 00:14:49.311
repeatedly inside of reduce.

272
00:14:49.311 --> 00:14:54.669
Inside reduce, imagine we could reduce
something that was not data but

273
00:14:54.669 --> 00:15:00.130
instead something else, not a list of
data but a list of something else.

274
00:15:00.130 --> 00:15:02.766
That would change everything
about how we write code.

