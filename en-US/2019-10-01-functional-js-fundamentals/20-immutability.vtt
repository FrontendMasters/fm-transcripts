WEBVTT

1
00:00:00.000 --> 00:00:01.640
&gt;&gt; Will Sentance: This is a side effect.

2
00:00:01.640 --> 00:00:03.703
It's a consequence of the function.

3
00:00:03.703 --> 00:00:08.913
And remember, this is especially bad
because the running of this function,

4
00:00:08.913 --> 00:00:14.701
it's only consequence must be this portion
here literally becomes the number 10.

5
00:00:14.701 --> 00:00:17.095
Meaning, we use that fact here, right?

6
00:00:17.095 --> 00:00:21.942
And we use that result into the running
of the next function in this case of

7
00:00:21.942 --> 00:00:22.979
divided by 5.

8
00:00:22.979 --> 00:00:24.821
If instead running add 3,

9
00:00:24.821 --> 00:00:29.718
in that case it was with the input of
22 by that point, if you remember.

10
00:00:29.718 --> 00:00:33.295
Add 3 [INAUDIBLE].

11
00:00:33.295 --> 00:00:37.776
If we had this add three function also
have a global state consequences,

12
00:00:37.776 --> 00:00:40.138
a consequence for our global memory.

13
00:00:40.138 --> 00:00:42.965
Again, I'm already repeating
the same thing, you already got it.

14
00:00:42.965 --> 00:00:47.723
But if you had a global effect,
that add three function isn't add three,

15
00:00:47.723 --> 00:00:50.117
it's add three plus mystery stuff.

16
00:00:50.117 --> 00:00:54.607
And our notion of our line of add three
here being truly self contained and

17
00:00:54.607 --> 00:00:57.490
it's only consequence
being the line below.

18
00:00:57.490 --> 00:01:00.821
And all of the lines having
zero dependency relation to it,

19
00:01:00.821 --> 00:01:04.600
they don't depend on it at all,
completely collapses.

20
00:01:04.600 --> 00:01:06.700
And we're back to the world
of every single line,

21
00:01:06.700 --> 00:01:10.000
I need to check exactly what it's doing
and compare whether it has any effect or

22
00:01:10.000 --> 00:01:11.767
dependency of any other line in the code.

23
00:01:11.767 --> 00:01:13.054
And the whole thing's collapsed.

24
00:01:15.007 --> 00:01:18.097
&gt;&gt; Will Sentance: If my function is able
to have these consequences outside of its

25
00:01:18.097 --> 00:01:18.930
own line.

26
00:01:18.930 --> 00:01:22.337
And if it's referring to something's
that's on its local memory in that line,

27
00:01:22.337 --> 00:01:25.307
especially in the short functions is
one line but not as local memory.

28
00:01:25.307 --> 00:01:29.609
It's impure,
it destroys our whole model here.

29
00:01:29.609 --> 00:01:33.121
Let me have thumbs at this point cuz I
don't want to keep repeating that in

30
00:01:33.121 --> 00:01:35.435
different ways if people
got it from just that.

31
00:01:35.435 --> 00:01:37.540
You lost me, clear, clarification.

32
00:01:37.540 --> 00:01:38.181
It's okay.

33
00:01:38.181 --> 00:01:39.840
Okay, some people aren't clear on it.

34
00:01:39.840 --> 00:01:42.310
All right, I sometimes over dwell on this.

35
00:01:43.330 --> 00:01:47.040
Okay, so we need functions that are pure,
only consequence being their return value.

36
00:01:48.780 --> 00:01:54.720
Well if that's the case, let's just
make sure we have no side effects.

37
00:01:54.720 --> 00:01:56.350
There may be a side effect you've missed.

38
00:01:57.690 --> 00:02:02.160
And it relies on the fact that, if we want
the only consequence in that to be on that

39
00:02:02.160 --> 00:02:06.190
line and to achieve reference to
transparency, I can replace the function

40
00:02:06.190 --> 00:02:11.100
output and it's the same,
then I need to, my function is pure.

41
00:02:11.100 --> 00:02:14.220
I need to preserve my data and
not manipulate it at all.

42
00:02:15.690 --> 00:02:20.392
Here's the problem you might have missed,
a side effect that you didn't realize.

43
00:02:20.392 --> 00:02:23.817
And it's related to the fact that
JavaScript passes when it executes

44
00:02:23.817 --> 00:02:26.721
a function, so
here we're gonna have array 1, 2, 3.

45
00:02:26.721 --> 00:02:30.101
Model number two is a function.

46
00:02:30.101 --> 00:02:33.461
We're gonna run map on that array 1, 2, 3,

47
00:02:33.461 --> 00:02:37.830
which would run probably by two
on the one, more two on to two,

48
00:02:37.830 --> 00:02:42.722
more by two on to three, and
store them in a new array for good reason.

49
00:02:42.722 --> 00:02:47.012
Because the array 1, 2, 3 that gets

50
00:02:47.012 --> 00:02:51.952
thrown into map is not
copying that array 1,

51
00:02:51.952 --> 00:02:56.121
2, 3 into maps execution context.

52
00:02:56.121 --> 00:03:00.709
In fact, it's just linking back to
the originally globally saved version.

53
00:03:02.180 --> 00:03:06.480
Meaning, if inside of map you start
altering the array that's being

54
00:03:06.480 --> 00:03:10.420
also passed in,
you're altering the array out in global.

55
00:03:11.450 --> 00:03:15.340
And now suddenly your line that
you think is nice and clean and

56
00:03:15.340 --> 00:03:21.130
has no effects outside of it,
is actually via your input of that line.

57
00:03:21.130 --> 00:03:25.140
Having global effects, having effects
that could have consequences for

58
00:03:25.140 --> 00:03:27.700
every other line in your code base.

59
00:03:27.700 --> 00:03:32.484
If map did not work the way it
does by inside of it not mutating,

60
00:03:32.484 --> 00:03:35.888
not changing the input array 1,2, 3 but

61
00:03:35.888 --> 00:03:41.592
instead creating a brand new array
taking our elements, doubling them,

62
00:03:41.592 --> 00:03:46.123
sticking those in the array,
then this would not be true.

63
00:03:46.123 --> 00:03:50.759
We would not get the same behavior
by using the same line of code.

64
00:03:50.759 --> 00:03:52.347
We would get 2, 4, 6 and

65
00:03:52.347 --> 00:03:56.020
then I guess we'd get in the next
slide if it use the same array.

66
00:03:56.020 --> 00:03:57.260
We'd get what, Seth?

67
00:03:58.800 --> 00:03:59.608
David Duke?

68
00:03:59.608 --> 00:04:00.346
&gt;&gt; David: 4, 8, 12.

69
00:04:00.346 --> 00:04:03.613
&gt;&gt; Will Sentance: Exactly,
4, 8, 12, exactly.

70
00:04:03.613 --> 00:04:06.667
If we mutate the input array of
our function, it's not pure,

71
00:04:06.667 --> 00:04:08.190
it's unpredictable.

72
00:04:08.190 --> 00:04:10.110
I can't figure out what it
does just by reading it and

73
00:04:10.110 --> 00:04:12.090
looking at its output there in that line.

74
00:04:12.090 --> 00:04:17.760
And undoes all our hard work,
because if we mutate the array,

75
00:04:17.760 --> 00:04:21.600
we change the array that we threw into
map, let's diagram it for a second.

76
00:04:21.600 --> 00:04:22.344
We've run out of space here.

77
00:04:22.344 --> 00:04:24.468
This is the last thing we're
gonna do on this whole set.

78
00:04:24.468 --> 00:04:30.104
Let's just diagram this here.

79
00:04:30.104 --> 00:04:33.193
Well, let's just write it out.

80
00:04:33.193 --> 00:04:35.641
This is the last piece of this
section before you have to prepare for

81
00:04:35.641 --> 00:04:36.218
programming.

82
00:04:36.218 --> 00:04:39.223
Anna, line one, what are we doing?

83
00:04:39.223 --> 00:04:42.732
&gt;&gt; Anna: We are declaring an array of 1,
2, 3.

84
00:04:42.732 --> 00:04:47.229
&gt;&gt; Will Sentance: 1, 2, 3, excellent.

85
00:04:47.229 --> 00:04:50.070
Next line, Alex?

86
00:04:50.070 --> 00:04:52.550
&gt;&gt; Alex: Declaring a function,
they will multiply by 2.

87
00:04:52.550 --> 00:04:53.230
&gt;&gt; Will Sentance: Thank you, Alex.

88
00:04:53.230 --> 00:04:55.710
I'm very glad you said function as well,
exactly.

89
00:04:58.510 --> 00:04:59.886
Said 2, [INAUDIBLE].

90
00:04:59.886 --> 00:05:02.508
[SOUND] You got that fine.

91
00:05:02.508 --> 00:05:05.569
Next line, Charles?

92
00:05:05.569 --> 00:05:08.113
&gt;&gt; Charles: Declaring our result.

93
00:05:08.113 --> 00:05:08.925
&gt;&gt; Will Sentance: Okay.

94
00:05:08.925 --> 00:05:13.987
And so we do result is .array 1,
2, 3 don't map,

95
00:05:13.987 --> 00:05:21.750
which we remember now is the function
that takes each element of our array.

96
00:05:21.750 --> 00:05:27.352
Creates a brand new array, creates a
array, creates a brand new array inside of

97
00:05:27.352 --> 00:05:33.059
itself applies to each element of
the array one, then two, then three.

98
00:05:33.059 --> 00:05:35.140
And takes those single element, and

99
00:05:35.140 --> 00:05:39.720
there by the way not passed around by
reference to their original birth version.

100
00:05:39.720 --> 00:05:42.746
They're passed around by
just copying them in memory.

101
00:05:42.746 --> 00:05:47.293
As a value, they're not copied,
they're just saved as a new value.

102
00:05:47.293 --> 00:05:51.556
And we double inside of this map,

103
00:05:51.556 --> 00:05:56.581
we create a new array into which the 1,

104
00:05:56.581 --> 00:06:02.694
2, 3, we take each one and
multiply it by 2.

105
00:06:02.694 --> 00:06:06.249
If we did not,
if instead we altered the input array,

106
00:06:06.249 --> 00:06:10.518
the array that gets thrown in,
we would be altering this array.

107
00:06:10.518 --> 00:06:16.291
Meaning, this line here would be
having influence on all other lines.

108
00:06:16.291 --> 00:06:19.352
Cuz any other line in my code,
I can refer to this array.

109
00:06:19.352 --> 00:06:24.151
Meaning, it becomes dependent on
my running of array.map if map

110
00:06:24.151 --> 00:06:26.781
did not work the way we wanted it to.

111
00:06:26.781 --> 00:06:30.880
And instead mutated the input one,
two, three,

112
00:06:30.880 --> 00:06:36.343
meaning we are determined in order
to make sure every line of code we

113
00:06:36.343 --> 00:06:41.710
run is self contained on that line
only to not mutate any data where

114
00:06:41.710 --> 00:06:47.198
it is passed by reference,
by a link back to its original version.

115
00:06:47.198 --> 00:06:52.129
And it's that little hidden thing where we
might otherwise break our pure function

116
00:06:52.129 --> 00:06:54.178
rules without even realizing it.

