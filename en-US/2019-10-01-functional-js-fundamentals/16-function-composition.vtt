WEBVTT

1
00:00:00.000 --> 00:00:01.062
&gt;&gt; Will Sentance: For one thing,

2
00:00:01.062 --> 00:00:06.465
we gonna make sure our outputs an array in
order to be the chain more stuff on it.

3
00:00:06.465 --> 00:00:09.456
What if I wanna chain up functions and
list them up,

4
00:00:09.456 --> 00:00:13.840
list them out rather than save the result,
positive a new function, where

5
00:00:13.840 --> 00:00:18.592
the output isn't an array that has a bunch
of shared functions I can chain along?

6
00:00:18.592 --> 00:00:21.112
We'll see what's in a second,
but first, thumbs on,

7
00:00:21.112 --> 00:00:24.168
it was I say the output of each
higher order function filter reduce,

8
00:00:24.168 --> 00:00:27.780
where it's an array reduces isn't here,
because we combining with a number.

9
00:00:27.780 --> 00:00:30.772
Has access to all the other higher
order functions, Matt reduce for

10
00:00:30.772 --> 00:00:32.149
through the prototype chain.

11
00:00:32.149 --> 00:00:36.405
He will thumbs on this chaining in the
conventional sense, you lost me, clear,

12
00:00:36.405 --> 00:00:37.418
clarifications.

13
00:00:37.418 --> 00:00:41.208
People, it's okay to ask clarification
questions, we're not getting many.

14
00:00:41.208 --> 00:00:43.183
All right, people.

15
00:00:43.183 --> 00:00:46.148
reduce,filter and
chaining higher order functions.

16
00:00:46.148 --> 00:00:47.016
Easier to add features.

17
00:00:47.016 --> 00:00:51.621
We can reuse filter with a thousand
different filtering scenarios.

18
00:00:51.621 --> 00:00:53.378
I can chain that with other functions.

19
00:00:53.378 --> 00:00:54.305
More readable.

20
00:00:54.305 --> 00:00:55.496
That's pretty readable.

21
00:00:55.496 --> 00:00:57.999
Here is my array filtered
by this condition and

22
00:00:57.999 --> 00:01:00.437
then reduce it by adding
each element to 0 and

23
00:01:00.437 --> 00:01:04.995
then taking it out putting that reduction,
I'm putting it into the next element and

24
00:01:04.995 --> 00:01:08.232
combining with that to add up and
sum up the filtered array.

25
00:01:08.232 --> 00:01:12.683
Much more readable in the individual steps
we've followed, powerfully more readable,

26
00:01:12.683 --> 00:01:13.394
look at that.

27
00:01:13.394 --> 00:01:18.019
Now, problem, I'll actually think
harder than to debug than a for-loop.

28
00:01:18.019 --> 00:01:19.669
[INAUDIBLE] seen everything.

29
00:01:19.669 --> 00:01:23.655
Here, I have no idea what I'm doing,
but now you do.

30
00:01:23.655 --> 00:01:27.309
As long as you understand what it's
doing it's just as easy to debug.

31
00:01:27.309 --> 00:01:29.322
But you've gotta know what it's doing.

32
00:01:29.322 --> 00:01:37.333
And reduce is going to enable us to
do something even more powerful.

33
00:01:37.333 --> 00:01:38.472
And now, we get into it.

34
00:01:38.472 --> 00:01:42.108
I think we pair for now,
welcome to pairing very soon.

35
00:01:42.108 --> 00:01:50.073
Here it is, function composition itself.

36
00:01:50.073 --> 00:01:55.089
Function composition itself.

37
00:01:55.089 --> 00:02:00.016
And we'll cover pure
functions here as well, and

38
00:02:00.016 --> 00:02:03.899
point freestyle and data mutability.

39
00:02:03.899 --> 00:02:08.789
But the most interesting piece by far,
people is function composition.

40
00:02:08.789 --> 00:02:10.000
Very, very special.

41
00:02:10.000 --> 00:02:15.551
So function position, we take individual
functions and join them back up again.

42
00:02:15.551 --> 00:02:19.773
Individual lines of code or a couple of
lines of code like filter and map and

43
00:02:19.773 --> 00:02:23.807
then integrated into their little
mini functions, tiny functions.

44
00:02:23.807 --> 00:02:26.452
I'm enjoying the backup again by chaining.

45
00:02:26.452 --> 00:02:28.964
Chaining with dots relies on
JavaScript prototype feature,

46
00:02:28.964 --> 00:02:32.018
functions return arrays which have
access to all the hardware functions.

47
00:02:32.018 --> 00:02:36.685
And then passing the output into
the next function using the implicit,

48
00:02:36.685 --> 00:02:38.647
this keyword inside of here.

49
00:02:38.647 --> 00:02:40.895
Somebody shouted out earlier.

50
00:02:40.895 --> 00:02:45.146
Whatever when a chain functions that just
return a regular output, not an array.

51
00:02:45.146 --> 00:02:48.179
By the way, also wonderful in chain
functions are gonna link them up in a way

52
00:02:48.179 --> 00:02:51.467
that's a little bit less dependent on
the prototype with nature of JavaScript.

53
00:02:51.467 --> 00:02:56.289
Which isn't maybe the most functional
programming paradigmatically

54
00:02:56.289 --> 00:02:57.660
consistent style.

55
00:02:57.660 --> 00:03:01.988
So it's series number on the one on
chain that multiply by 2, it takes 11,

56
00:03:01.988 --> 00:03:03.929
add 314, I thought it worked.

57
00:03:03.929 --> 00:03:07.455
Takes what, you got it, right?

58
00:03:07.455 --> 00:03:10.959
Those outputs don't automatically
get access to the next.

59
00:03:10.959 --> 00:03:12.053
Well, there's a way of doing it.

60
00:03:12.053 --> 00:03:16.783
Let's do this, multiplyBy 2,
keep it very simple with parameter name x.

61
00:03:16.783 --> 00:03:21.443
And then the result is return that by 2,
x return that by 3.

62
00:03:21.443 --> 00:03:24.334
I can run multiplyBy2
with the input of 11.

63
00:03:24.334 --> 00:03:30.635
That right-hand side, Virginia,
evaluates to 11 by 2.

64
00:03:30.635 --> 00:03:31.151
&gt;&gt; Virginia: 22.

65
00:03:31.151 --> 00:03:32.857
&gt;&gt; Will Sentance: 22.

66
00:03:32.857 --> 00:03:35.854
Stole back into where Virginia.

67
00:03:35.854 --> 00:03:36.967
&gt;&gt; Virginia: Into initial result.

68
00:03:36.967 --> 00:03:40.070
&gt;&gt; Will Sentance: Excellent,
excellent, I pull 22 in there, add 3.

69
00:03:40.070 --> 00:03:41.667
I get-
&gt;&gt; Virginia: 25.

70
00:03:41.667 --> 00:03:44.074
&gt;&gt; Will Sentance: And store into-
&gt;&gt; Virginia: Next step.

71
00:03:44.074 --> 00:03:47.050
&gt;&gt; Will Sentance: Take the next step,
pass it divideBy5,

72
00:03:47.050 --> 00:03:49.180
I get what sort of final step?

73
00:03:49.180 --> 00:03:49.890
&gt;&gt; Virginia: 5.

74
00:03:49.890 --> 00:03:50.439
&gt;&gt; Will Sentance: 5.

75
00:03:50.439 --> 00:03:54.953
[LAUGH] I should have asked Anna,
literally, normally,

76
00:03:54.953 --> 00:03:58.913
we do math is the most naive
thing I have ever said.

77
00:03:58.913 --> 00:04:03.566
Being a math grad will look at me with
frustration when I say that's what math

78
00:04:03.566 --> 00:04:04.155
is like.

79
00:04:04.155 --> 00:04:07.277
Very naive of me.
Okay, people, this is super risky.

80
00:04:07.277 --> 00:04:11.049
Not only do I parse initial
result to the next line,

81
00:04:11.049 --> 00:04:13.524
do I parse it to all future lines?

82
00:04:13.524 --> 00:04:15.862
I parse it to all future lines.

83
00:04:15.862 --> 00:04:19.656
That is an insane dependency tree,
so to speak.

84
00:04:19.656 --> 00:04:23.778
In other words, all future lines depend on
that and it feeds all the future lines,

85
00:04:23.778 --> 00:04:24.685
that's insane.

86
00:04:24.685 --> 00:04:28.948
Is there a better way,
I've got a function here being called,

87
00:04:28.948 --> 00:04:33.868
I store initial result, only then to
immediately pauses the next line.

88
00:04:33.868 --> 00:04:39.428
Alex, can you give a better way, whereby,
I skip a step here to save global labels.

89
00:04:39.428 --> 00:04:43.916
&gt;&gt; Alex: So you would have divided
by 5 ive but you would pass into it,

90
00:04:43.916 --> 00:04:47.528
add and
then you pass into that multiplied by 2.

91
00:04:47.528 --> 00:04:49.916
&gt;&gt; Will Sentance: Let me just give
a really important clarification there,

92
00:04:49.916 --> 00:04:51.337
pass into it the [INAUDIBLE] to add.

93
00:04:51.337 --> 00:04:51.930
&gt;&gt; Alex: Right.
&gt;&gt; Will Sentance: Right,

94
00:04:51.930 --> 00:04:55.793
which would then give it in the evaluated
result straight, yeah, exactly right.

95
00:04:55.793 --> 00:04:59.007
I would multiplyBy 2 instead of 11.

96
00:04:59.007 --> 00:05:03.512
Literally evaluates two 22,
it is referential transparent.

97
00:05:03.512 --> 00:05:06.750
I can replace the running of
the function with its output and

98
00:05:06.750 --> 00:05:08.513
doesn't change my code at all.

99
00:05:08.513 --> 00:05:11.239
That so, there's lots of debate about
what referential transparency means but

100
00:05:11.239 --> 00:05:12.613
it is rough since that's what it means.

101
00:05:12.613 --> 00:05:15.688
I can look at the code of the function,
I can throw that away and

102
00:05:15.688 --> 00:05:18.171
take the evaluated result,
the output of it, and

103
00:05:18.171 --> 00:05:22.219
stick it there instead, nothing changed,
which is what I would be doing there.

104
00:05:22.219 --> 00:05:24.168
Well, let's see, nesting my functions.

105
00:05:24.168 --> 00:05:27.348
Or we can use the fact that JavaScript
evaluates every function call before

106
00:05:27.348 --> 00:05:27.860
we move on.

107
00:05:27.860 --> 00:05:34.596
multiplyBy2, code with 11, 22,
throw that straight into add 3, 25.

108
00:05:34.596 --> 00:05:37.763
So that's where you divide by 5, 5.

109
00:05:37.763 --> 00:05:39.318
Pretty unreadable, though.

110
00:05:39.318 --> 00:05:43.618
Imagine if your code is made up of
a series of nested function calls be very,

111
00:05:43.618 --> 00:05:44.726
very unreadable.

112
00:05:44.726 --> 00:05:48.144
And by the way, this relies on our
functions being referential transparent,

113
00:05:48.144 --> 00:05:51.406
we can repeat the call to the function
with return value with no consequence

114
00:05:51.406 --> 00:05:51.943
in our app.

115
00:05:51.943 --> 00:05:55.714
Add that to your list of glossary fancy
terms of bring up in interviews, and say,

116
00:05:55.714 --> 00:05:58.554
I prefer my function is to be
more referential transparent.

117
00:05:58.554 --> 00:06:03.179
This is horrible, we can't do this
nesting function to be the same.

118
00:06:03.179 --> 00:06:06.113
But what are we actually doing here?

119
00:06:06.113 --> 00:06:13.457
We're combining a number with
a function to get what, Virginia?

120
00:06:13.457 --> 00:06:16.615
11 with more number 2 is combined to get
&gt;&gt; Virginia: A number.

121
00:06:16.615 --> 00:06:17.721
&gt;&gt; Will Sentance: Which is?

122
00:06:17.721 --> 00:06:18.592
&gt;&gt; Virginia: 22.

123
00:06:18.592 --> 00:06:22.839
&gt;&gt; Will Sentance: 22, then we're
combining a number 22 with a function,

124
00:06:22.839 --> 00:06:26.028
two things to get a-
&gt;&gt; Virginia: 25.

125
00:06:26.028 --> 00:06:27.557
&gt;&gt; Will Sentance: 25, a number, one thing.

126
00:06:27.557 --> 00:06:35.710
Then we're combining that with a function
divideBy5, from two becomes one.

127
00:06:35.710 --> 00:06:39.183
We're combining a function with a value to
get a result then combining that result

128
00:06:39.183 --> 00:06:41.162
with another function
to get another result.

129
00:06:41.162 --> 00:06:42.566
People, what does this remind you of?

130
00:06:43.575 --> 00:06:46.033
&gt;&gt; Will Sentance: How insane is that?

131
00:06:46.033 --> 00:06:50.673
And it turns out it is the critical
function in all of functional programming.

132
00:06:50.673 --> 00:06:54.253
It's the most versatile function.

133
00:06:54.253 --> 00:06:59.305
We can literally list
off a list of functions.

134
00:06:59.305 --> 00:07:06.125
And then pass them into reduce, and take
the first one, combine it with its input.

135
00:07:06.125 --> 00:07:08.825
Get out an output,
combine it with the next one.

136
00:07:08.825 --> 00:07:13.351
Get out an output, combine it with
the next one, when two become one,

137
00:07:13.351 --> 00:07:16.131
when two become one, when two become one.

138
00:07:16.131 --> 00:07:19.988
And the rule for combining them
is gonna be pretty sophisticated.

139
00:07:19.988 --> 00:07:24.782
Take in, we're gonna pass and run
functionally, but it's gonna combine by

140
00:07:24.782 --> 00:07:29.428
taking in the building that was our
initial inputs, the first function and

141
00:07:29.428 --> 00:07:34.097
combine it with the first, sorry,
initial input for the first function.

142
00:07:34.097 --> 00:07:38.857
Combine it with the first function in
the position in the array, position 0.

143
00:07:38.857 --> 00:07:43.456
Throw them into how to combine, which
is going to be run function on input.

144
00:07:43.456 --> 00:07:47.415
And we're going to say, okay,
in comes 11, in comes what?

145
00:07:47.415 --> 00:07:49.388
What's the first function, Jasmine?

146
00:07:49.388 --> 00:07:51.050
&gt;&gt; Jasmine: multiplyBy2.
&gt;&gt; Will Sentance: multiplyBy2, and

147
00:07:51.050 --> 00:07:55.990
then inside,
combine them by running multiplyBy2 on 11.

148
00:07:55.990 --> 00:07:58.995
Give out 22,
return that out into building up.

149
00:07:58.995 --> 00:08:04.663
That's gonna be our next value to pass and
combine with the next function.

150
00:08:04.663 --> 00:08:09.219
By the way, we're gonna discover,
we have rebuilt the most important and

151
00:08:09.219 --> 00:08:12.419
most used function in all
functional programming.

152
00:08:12.419 --> 00:08:13.357
It's the main one.

153
00:08:13.357 --> 00:08:15.230
And by the way, I went and checked.

154
00:08:15.230 --> 00:08:18.696
I went and checked in the most popular
jobs with functional programming

155
00:08:18.696 --> 00:08:19.628
library, Ramda.

156
00:08:19.628 --> 00:08:23.433
The under the hood of the most
important function they use and

157
00:08:23.433 --> 00:08:26.503
every single thing they do,
this is happening.

158
00:08:26.503 --> 00:08:29.187
Just so we know.

