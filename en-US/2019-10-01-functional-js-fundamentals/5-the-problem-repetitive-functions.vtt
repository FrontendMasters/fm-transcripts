WEBVTT

1
00:00:02.510 --> 00:00:07.377
&gt;&gt; Will Sentance: Every one of these
functions, Eric, as you rightly

2
00:00:07.377 --> 00:00:12.364
indicated by your border
is almost exactly the same.

3
00:00:12.364 --> 00:00:15.266
What's the only thing that's changing,
Eric,

4
00:00:15.266 --> 00:00:18.039
each time between these
different functions?

5
00:00:18.039 --> 00:00:24.490
Yeah, the functionality,
the thing that we're doing to what?

6
00:00:24.490 --> 00:00:26.534
To the each element of the array,

7
00:00:26.534 --> 00:00:31.356
first position zero, then position one,
position two, one, two, three.

8
00:00:31.356 --> 00:00:37.295
Every single one of them,
is otherwise identical.

9
00:00:37.295 --> 00:00:40.443
Taking an input array,
create a new output array.

10
00:00:40.443 --> 00:00:44.226
Loop through the input array to each
element, do something different.

11
00:00:44.226 --> 00:00:45.625
Look at this.

12
00:00:45.625 --> 00:00:47.392
Do something different.

13
00:00:50.065 --> 00:00:52.217
&gt;&gt; Will Sentance: That's all we're
doing differently, otherwise,

14
00:00:52.217 --> 00:00:53.277
all the code's the same.

15
00:00:53.277 --> 00:00:56.982
First principle of functions,
but also functional programming,

16
00:00:56.982 --> 00:00:58.412
don't repeat yourself.

17
00:00:58.412 --> 00:01:00.769
Save it once, do it again and again.

18
00:01:00.769 --> 00:01:03.040
And that's exactly what
we're gonna have to do here.

19
00:01:03.040 --> 00:01:05.426
How, Seth, when I go about,

20
00:01:05.426 --> 00:01:11.156
if I made my multiply by two function
general by leaving a placeholder,

21
00:01:11.156 --> 00:01:16.422
so when I ran it, it could take it
any number to be multiple by two.

22
00:01:16.422 --> 00:01:19.287
What would I doing here,
Seth, in an intuitive manner,

23
00:01:19.287 --> 00:01:23.226
no sort of fancy words, but like,
intuitively, what would I do here, Seth,

24
00:01:23.226 --> 00:01:26.232
to save myself building up
these damn functions each time?

25
00:01:26.232 --> 00:01:27.842
&gt;&gt; Seth: Passing a closure to execute?

26
00:01:27.842 --> 00:01:31.524
&gt;&gt; Will Sentance: That's not crazy to say,
but keeping it simple, Sam.

27
00:01:31.524 --> 00:01:34.481
&gt;&gt; Sam: Passing an additional argument.

28
00:01:34.481 --> 00:01:37.148
&gt;&gt; Will Sentance: Which
would be some functionality.

29
00:01:37.148 --> 00:01:39.516
Some functionality.

30
00:01:39.516 --> 00:01:43.212
Now in theory folk,
just as Seth was trying to hint,

31
00:01:43.212 --> 00:01:46.572
and Sam as well,
I guess I could do theory here,

32
00:01:46.572 --> 00:01:51.289
pass in multiply by two, and
in theory here pass and divide by two.

33
00:01:51.289 --> 00:01:55.426
So, am I allowed to pass in little
snippets of codes like that,

34
00:01:55.426 --> 00:01:56.527
in JavaScript?

35
00:01:56.527 --> 00:01:57.829
Am I allowed to pass those around?

36
00:01:57.829 --> 00:02:01.209
[SOUND] I'm not allowed to.

37
00:02:01.209 --> 00:02:04.643
In JavaScript folk, the only way I'm
allowed to store bundle up code,

38
00:02:04.643 --> 00:02:07.848
little snippet of code, and
I can imagine I could pass in a string,

39
00:02:07.848 --> 00:02:11.570
you would imagine the language where you
can just do this, and pass that in and

40
00:02:11.570 --> 00:02:12.799
it will fill that bit in.

41
00:02:12.799 --> 00:02:16.442
Pass that, you'll multiply by two,
and fill it in.

42
00:02:16.442 --> 00:02:21.348
No, in JavaScript, I couldn't do that,
I can't take the multiply by two,

43
00:02:21.348 --> 00:02:26.344
leave that bit of the blank, like I left
array a blank, and fill it in later on.

44
00:02:26.344 --> 00:02:27.382
No, no, no, no.

45
00:02:27.382 --> 00:02:34.026
In JavaScript, the only way I can
bundle up code to be used later on,

46
00:02:34.026 --> 00:02:39.518
to be inserted into another
function is to store it in a?

47
00:02:39.518 --> 00:02:40.691
&gt;&gt; Function.

48
00:02:40.691 --> 00:02:41.254
&gt;&gt; Will Sentance: Well done.

49
00:02:41.254 --> 00:02:43.497
[LAUGH] That's good.

50
00:02:43.497 --> 00:02:45.206
Exactly.

51
00:02:45.206 --> 00:02:48.476
We're breaking our principle DRY,
we're repeating ourselves heavily.

52
00:02:48.476 --> 00:02:49.591
Eric was bored.

53
00:02:49.591 --> 00:02:50.573
What can we do?

54
00:02:50.573 --> 00:02:54.839
We can generalize our functions and
we pause in our specific instruction only

55
00:02:54.839 --> 00:02:59.510
when we run, copy array, let's call it
now manipulate, go over and do something.

56
00:02:59.510 --> 00:03:04.558
We do not, in here, preset that we're
going to double each element of the array.

57
00:03:04.558 --> 00:03:08.227
We're not gonna multiply by two,
or divide it by two, or add three,

58
00:03:08.227 --> 00:03:12.595
we're instead gonna leave it a little
placeholder, the word instructions, and

59
00:03:12.595 --> 00:03:16.327
just like we didn't say copy one,
two, three, and multiply by two,

60
00:03:16.327 --> 00:03:20.474
we said copy array, and then we filled
in that array when we ran the function.

61
00:03:20.474 --> 00:03:24.959
So two, we're going to say copy, and
do something, and leave a little blank

62
00:03:24.959 --> 00:03:29.789
instructions, and just like array becomes
one, two, three when we end up running

63
00:03:29.789 --> 00:03:33.527
the code of the function, and
we save it, it could be anything.

64
00:03:33.527 --> 00:03:34.716
We're not using it yet.

65
00:03:34.716 --> 00:03:39.770
When we run it, we better fill out the
details, and we do with one, two, three

66
00:03:39.770 --> 00:03:45.378
for array, and instructions will literally
be replaced with the word multiplyBy2.

67
00:03:45.378 --> 00:03:48.607
So that anyway you see instructions and
they're [SOUND] gone, and

68
00:03:48.607 --> 00:03:52.318
it's gonna say multiplyBy2, which,
by the way, it feels pretty good.

69
00:03:52.318 --> 00:03:55.663
Array position 0,
is gonna be the number 1.

70
00:03:55.663 --> 00:03:58.958
Instruction is gonna be multiplyBy2.

71
00:03:58.958 --> 00:04:05.401
MultiplyBy2(1) means run
multiplyBy2 with the input of 1,

72
00:04:05.401 --> 00:04:11.151
the 1 will shoot into multiply 2,
1 by 2 returns out 2,

73
00:04:11.151 --> 00:04:16.442
and that multiplied by 2
input of 1 will evaluate 2,

74
00:04:16.442 --> 00:04:21.981
will become output 2, and
that 2, pushed the output.

75
00:04:21.981 --> 00:04:27.565
So let's walk through it line, by line,
and see exactly what's happening here.

76
00:04:27.565 --> 00:04:31.605
But this is actually going to be one
of the most important foundational

77
00:04:31.605 --> 00:04:34.286
principles, of everything
else we do today.

