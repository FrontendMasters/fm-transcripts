WEBVTT

1
00:00:00.350 --> 00:00:02.764
&gt;&gt; Will Sentance: Now
things get interesting.

2
00:00:02.764 --> 00:00:05.900
David, what am I calling next?

3
00:00:05.900 --> 00:00:08.356
I've saved oncifiedMultiplyBy2,
and so I'm now?

4
00:00:08.356 --> 00:00:09.483
&gt;&gt; David: Invoking it.

5
00:00:09.483 --> 00:00:11.240
&gt;&gt; Will Sentance: Invoking it.

6
00:00:11.240 --> 00:00:19.710
There it is, oncifiedMultiplyBy2

7
00:00:19.710 --> 00:00:24.180
with the input of 10.

8
00:00:24.180 --> 00:00:27.377
Now, the reader looks at that and
goes, it's multiplyBy2,

9
00:00:27.377 --> 00:00:29.182
I'm gonna run multiplyBy2.

10
00:00:29.182 --> 00:00:33.200
We know the difference,
we know the reality.

11
00:00:33.200 --> 00:00:37.450
Instead, what function are we
really running, David,

12
00:00:37.450 --> 00:00:40.290
when we run oncifiedMultiplyBy2?

13
00:00:40.290 --> 00:00:43.540
&gt;&gt; David: Inner.
&gt;&gt; Will Sentance: [SOUND] Inner, exactly.

14
00:00:43.540 --> 00:00:48.640
And thank goodness we are,
because inner has what?

15
00:00:48.640 --> 00:00:49.220
&gt;&gt; David: A backpack.

16
00:00:49.220 --> 00:00:50.320
&gt;&gt; Will Sentance: A backpack.

17
00:00:50.320 --> 00:00:54.440
And if I wanna limit a function running,
I need to remember it's previously

18
00:00:54.440 --> 00:00:58.780
being run, meaning I need a backpack to
count up that it's previously being run.

19
00:01:00.020 --> 00:01:03.660
And then to look out and
check how many times have I run inside of

20
00:01:03.660 --> 00:01:08.703
oncifiedMultiplyBy2 really inner, whatever
I wanna run, which in this case looks

21
00:01:08.703 --> 00:01:13.697
like it's going to be multiplyBy2, it's
gonna be run under the label convertMe.

22
00:01:13.697 --> 00:01:18.490
I'm only gonna allow it to run as
long as my backpack counter is 0.

23
00:01:18.490 --> 00:01:23.960
I'm editing my function to make it
more reusable in new situations.

24
00:01:25.040 --> 00:01:27.000
Okay, let's open the execution context.

25
00:01:27.000 --> 00:01:31.523
And, this, people, this is,
let's put it on the call stack.

26
00:01:33.932 --> 00:01:34.884
&gt;&gt; Will Sentance: Here's our call stack.

27
00:01:37.005 --> 00:01:39.509
Putting global.

28
00:01:39.509 --> 00:01:46.663
And we now execute oncifiedMultiplyBy2

29
00:01:46.663 --> 00:01:50.755
with the input of 10.

30
00:01:50.755 --> 00:01:52.028
Into it we go.

31
00:01:52.028 --> 00:01:56.719
I don't even know if I have room here,
but, okay, into it we go.

32
00:01:56.719 --> 00:01:57.860
And in my local memory.

33
00:01:59.360 --> 00:02:02.960
The reason it's gonna be so challenging
is, we're gonna be bouncing back and

34
00:02:02.960 --> 00:02:04.920
forwards between the backpack.

35
00:02:04.920 --> 00:02:09.240
oncifiedMultiplyBy2, again,
Jasmine was born as?

36
00:02:09.240 --> 00:02:10.511
&gt;&gt; Jasmine: Inner?
&gt;&gt; Will Sentance: Inner,

37
00:02:10.511 --> 00:02:14.992
she's spot on, gosh, here we go.

38
00:02:14.992 --> 00:02:19.760
In his backpack it has everything we need,
the functionality we wanna run, and

39
00:02:19.760 --> 00:02:24.330
a counter to limit how many times
that functionality can run.

40
00:02:24.330 --> 00:02:28.674
And then, inner's got the code to say,
go run the functionality in the backpack,

41
00:02:28.674 --> 00:02:32.272
convertMe, I can see it's gonna be
run only if the counter is 0, and

42
00:02:32.272 --> 00:02:33.846
then increment the counter.

43
00:02:33.846 --> 00:02:37.560
[SOUND] All right, here we go.

44
00:02:37.560 --> 00:02:40.650
David, first thing in local memory at 10?

45
00:02:40.650 --> 00:02:41.310
&gt;&gt; David: Input.

46
00:02:41.310 --> 00:02:43.720
&gt;&gt; Will Sentance: Input,
one on the parameter input.

47
00:02:43.720 --> 00:02:45.690
Excellent, from David, there it is.

48
00:02:47.540 --> 00:02:50.400
Now we hit our conditional.

49
00:02:50.400 --> 00:02:53.103
If counter.

50
00:02:55.289 --> 00:02:57.720
&gt;&gt; Will Sentance: Is 0.

51
00:02:57.720 --> 00:02:59.150
Here we go.

52
00:02:59.150 --> 00:03:03.170
Where do I look for counter first, David?

53
00:03:03.170 --> 00:03:03.850
&gt;&gt; David: Local memory.

54
00:03:03.850 --> 00:03:05.030
&gt;&gt; Will Sentance: Do I find it?

55
00:03:05.030 --> 00:03:07.680
Where do I go to next, David?

56
00:03:07.680 --> 00:03:08.950
&gt;&gt; David: Backpack.
&gt;&gt; Will Sentance: It's the backpack

57
00:03:08.950 --> 00:03:11.100
of the oncifiedMultiplyBy2 function,
I'm calling that.

58
00:03:11.100 --> 00:03:15.586
It was born inside the oncification of
multiplyBy2, in which inner was created,

59
00:03:15.586 --> 00:03:19.816
and pulled out multiplyBy2 in the
backpack, and I go find counter is indeed,

60
00:03:19.816 --> 00:03:20.664
what, David?

61
00:03:20.664 --> 00:03:21.422
&gt;&gt; David: 0.
&gt;&gt; Will Sentance: 0,

62
00:03:21.422 --> 00:03:25.280
0, I wanted to use a different color,
hold on.

63
00:03:28.635 --> 00:03:30.623
&gt;&gt; Will Sentance: I put
it from the backpack,

64
00:03:30.623 --> 00:03:35.900
therefore I'm gonna use it in pink,
is 0, is 0 equal to 0, David?

65
00:03:35.900 --> 00:03:36.900
&gt;&gt; David: Yes.

66
00:03:36.900 --> 00:03:42.010
&gt;&gt; Will Sentance: And so,
what line do I hit next, David?

67
00:03:42.010 --> 00:03:45.870
&gt;&gt; David: The first line inside of the
conditional, which is to define output.

68
00:03:45.870 --> 00:03:47.040
&gt;&gt; Will Sentance: Exactly.

69
00:03:48.270 --> 00:03:51.048
Okay, hold on, hold on,
hold on, give me a second.

70
00:03:51.048 --> 00:03:56.586
So, output is going to
be the return of calling

71
00:03:56.586 --> 00:04:01.540
convertMe with the argument of input.

72
00:04:01.540 --> 00:04:02.550
My goodness.

73
00:04:02.550 --> 00:04:05.520
Okay, what is convertMe, Anna?

74
00:04:05.520 --> 00:04:07.335
Where do I look for convertMe first, Anna?

75
00:04:11.415 --> 00:04:12.690
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: David,

76
00:04:12.690 --> 00:04:15.530
where do I look for convertMe first?

77
00:04:15.530 --> 00:04:17.290
Exactly of?

78
00:04:17.290 --> 00:04:18.470
&gt;&gt; David: Of the current execution code.

79
00:04:18.470 --> 00:04:19.025
&gt;&gt; Will Sentance: Which is?

80
00:04:19.025 --> 00:04:20.620
&gt;&gt; David: OncifiedMultiplyBy2.

81
00:04:20.620 --> 00:04:22.443
&gt;&gt; Will Sentance: Well done,
excellent, give it a ten.

82
00:04:22.443 --> 00:04:24.175
Do I find convertMe in there?

83
00:04:24.175 --> 00:04:26.030
&gt;&gt; David: No.
&gt;&gt; Will Sentance: No.

84
00:04:26.030 --> 00:04:28.110
Where do I look for it next?

85
00:04:28.110 --> 00:04:31.200
I'm running oncifiedMultiplyBy, it has a?

86
00:04:31.200 --> 00:04:32.447
&gt;&gt; David: Backpack.
&gt;&gt; Will Sentance: Backpack,

87
00:04:32.447 --> 00:04:37.574
a permanent persistent store of
memory that I can use, what is that?

88
00:04:37.574 --> 00:04:40.093
There you go,
that I can use again and again.

89
00:04:40.093 --> 00:04:42.650
And what do I find convertMe is?

90
00:04:42.650 --> 00:04:43.270
&gt;&gt; David: In the backpack.

91
00:04:43.270 --> 00:04:47.678
&gt;&gt; Will Sentance: It is, I grab it,
and I use it, and it's what?

92
00:04:47.678 --> 00:04:49.255
&gt;&gt; David: It's a function, multiplyBy2.

93
00:04:49.255 --> 00:04:51.737
&gt;&gt; Will Sentance: MultiplyBy2,

94
00:04:51.737 --> 00:04:55.594
look at that
&gt;&gt; Will Sentance: Is my

95
00:04:55.594 --> 00:04:59.705
oncifiedMultiplyBy2, multiplyBy2?

96
00:04:59.705 --> 00:05:02.730
It is so far away from it.

97
00:05:02.730 --> 00:05:07.961
It is a function inner that we created
inside of oncify, in order that it had

98
00:05:07.961 --> 00:05:12.958
a permanent memory even though our
multiplyBy2 was not born with one.

99
00:05:12.958 --> 00:05:16.627
And then, literally, in that pool of
memory is where we store the multiplyBy2

100
00:05:16.627 --> 00:05:19.366
function, wecause we defined
inner adjacent to all that,

101
00:05:19.366 --> 00:05:23.120
including the parameter argument
combination of convertMe and multiplyBy2.

102
00:05:23.120 --> 00:05:26.432
So when we return that inner
into oncifiedMultiplyBy2,

103
00:05:26.432 --> 00:05:30.736
there's our multiplyBy2 function
sitting happily, and we grab it.

104
00:05:30.736 --> 00:05:32.909
Anna, here's where I say it's the mind.

105
00:05:32.909 --> 00:05:35.706
I'm not gonna swear, this doesn't really
apply now, it's the mind F, there we go.

106
00:05:35.706 --> 00:05:39.292
Here is where I'm gonna say it is,
cuz look, we grab the function

107
00:05:39.292 --> 00:05:43.419
from oncifiedMultiplyBy2's backpack,
which was only there because.

108
00:05:43.419 --> 00:05:47.770
When oncifiedMultiplyBy2 was
created as inner inside of oncify,

109
00:05:47.770 --> 00:05:51.356
we had multiplyBy2,
the functionality we wanted, so

110
00:05:51.356 --> 00:05:55.880
oncify, in the convertMe parameter,
meaning it came out into here.

111
00:05:57.440 --> 00:06:03.556
Where do we get the thing we're gonna pull
in and actually multiply from, Jasmine?

112
00:06:03.556 --> 00:06:08.252
What are we gonna pass in to convertMe,
which is multiplyBy2?

113
00:06:08.252 --> 00:06:08.838
&gt;&gt; Jasmine: The 10?

114
00:06:08.838 --> 00:06:12.474
&gt;&gt; Will Sentance: Which
comes oncifiedMultiplyBy2's

115
00:06:12.474 --> 00:06:15.500
direct execution context.

116
00:06:15.500 --> 00:06:17.070
We're gonna grab it straight from there.

117
00:06:18.790 --> 00:06:22.920
The functionality that we're
gonna run that's to be oncified,

118
00:06:22.920 --> 00:06:24.540
came from the backpack.

119
00:06:24.540 --> 00:06:28.450
The condition under which we were
gonna confirm we're allowed to run it

120
00:06:28.450 --> 00:06:30.290
came from the backpack.

121
00:06:30.290 --> 00:06:35.650
And then, the thing we're gonna run
multiplyBy2 on came dynamically live

122
00:06:35.650 --> 00:06:39.910
as the input to our pretend
oncifiedMultiplyBy2 function.

123
00:06:39.910 --> 00:06:44.087
So, we as the reader are like, the 10
goes in, it must be just multiplyBy2.

124
00:06:44.087 --> 00:06:48.827
[LAUGH] It's being passed through
a layer in to a running at

125
00:06:48.827 --> 00:06:53.014
multiplyBy2 inside of oncifiedMultiplyBy2.

126
00:06:53.014 --> 00:06:57.290
Oncify and more opportunities wrapping up,
it's in sight, well,

127
00:06:57.290 --> 00:07:01.320
they call it decorating
the underlying function,

128
00:07:01.320 --> 00:07:03.250
which we grabbed from the backpack and
pull it through.

129
00:07:04.500 --> 00:07:07.024
Okay, output of that, Jasmine, is?

130
00:07:07.024 --> 00:07:07.845
&gt;&gt; Jasmine: 20?

131
00:07:07.845 --> 00:07:09.486
&gt;&gt; Will Sentance: 20,
and we stole that where?

132
00:07:09.486 --> 00:07:10.490
&gt;&gt; Jasmine: Output?

133
00:07:10.490 --> 00:07:12.273
&gt;&gt; Will Sentance: It's output,
there it is, 20.

134
00:07:12.273 --> 00:07:16.290
And then the final, but
ultimate thing we do is what, Sam?

135
00:07:16.290 --> 00:07:16.990
&gt;&gt; Jasmine: Increment counting.

136
00:07:16.990 --> 00:07:18.790
&gt;&gt; Will Sentance: We increment
the backpack counter.

137
00:07:18.790 --> 00:07:20.455
My God, there it is.

138
00:07:20.455 --> 00:07:26.186
Counter++ it's in the backpack,
we increment it to 1.

139
00:07:26.186 --> 00:07:29.580
And then finally, Jasmine, we do what?

140
00:07:29.580 --> 00:07:30.370
&gt;&gt; Jasmine: Return?

141
00:07:30.370 --> 00:07:31.199
&gt;&gt; Will Sentance: The value of?

142
00:07:32.270 --> 00:07:33.110
&gt;&gt; Jasmine: Output, which is 20.

143
00:07:33.110 --> 00:07:34.200
&gt;&gt; Will Sentance: Exactly 20.

144
00:07:34.200 --> 00:07:37.140
We don't store it anywhere,
but there it is.

145
00:07:38.690 --> 00:07:41.680
Look at that, people,
we created a function.

146
00:07:42.900 --> 00:07:45.200
We didn't create a function, well, we did.

147
00:07:45.200 --> 00:07:50.625
But, we appeared to edit
a multiplyBy2 function to create

148
00:07:50.625 --> 00:07:56.594
a function under the condition
of counter still being 0 worked,

149
00:07:56.594 --> 00:08:01.650
and appeared to look
just like multiplyBy2.

150
00:08:01.650 --> 00:08:03.860
It's called function decoration.

151
00:08:03.860 --> 00:08:07.620
It's profoundly significant,
especially in this model.

152
00:08:07.620 --> 00:08:09.100
But we're not done yet.

153
00:08:09.100 --> 00:08:13.215
Let's put oncifiedMultiplyBy2 off
the call stack, and run it again,

154
00:08:13.215 --> 00:08:14.977
this time with the input of 7.

155
00:08:14.977 --> 00:08:18.750
I remove it, put it back on, if you
wanna erase it over, put it back on.

156
00:08:18.750 --> 00:08:21.370
Let's run it again.

157
00:08:21.370 --> 00:08:30.574
OncifiedMultiplyBy2, input of 7.

158
00:08:30.574 --> 00:08:32.620
New execution context.

159
00:08:32.620 --> 00:08:34.570
Andrew, into it we go.

160
00:08:36.030 --> 00:08:40.796
Into it we go, and what's the first
thing in local memory, given,

161
00:08:40.796 --> 00:08:44.324
Andrew, oncifiedMultiplyBy2
is really just?

162
00:08:44.324 --> 00:08:45.840
&gt;&gt; Andrew: Input, which is 7.

163
00:08:45.840 --> 00:08:47.370
&gt;&gt; Will Sentance: Input, which is 7.

164
00:08:47.370 --> 00:08:52.470
Input, which is 7, and
now we do our check.

165
00:08:52.470 --> 00:08:56.828
If counter is 0.

166
00:08:56.828 --> 00:08:59.378
Counter in the local memory, Andrew?

167
00:08:59.378 --> 00:08:59.960
&gt;&gt; Andrew: No.

168
00:08:59.960 --> 00:09:00.900
&gt;&gt; Will Sentance: No, where is it?

169
00:09:00.900 --> 00:09:01.684
&gt;&gt; Andrew: It's in the back.
&gt;&gt; Will Sentance: And what is

170
00:09:01.684 --> 00:09:03.290
the value counter?

171
00:09:03.290 --> 00:09:04.832
&gt;&gt; Andrew: 1.
&gt;&gt; Will Sentance: And is that equal to 0?

172
00:09:04.832 --> 00:09:06.136
&gt;&gt; Andrew: No.
&gt;&gt; Will Sentance: No, it's not.

173
00:09:06.136 --> 00:09:08.696
So what do we auto return out?

174
00:09:08.696 --> 00:09:09.312
&gt;&gt; Andrew: Sorry.

175
00:09:09.312 --> 00:09:14.580
&gt;&gt; Will Sentance: You've turned out sorry.

176
00:09:14.580 --> 00:09:15.570
And there it is, people.

177
00:09:16.820 --> 00:09:21.570
We have here used giving
functions backpacks

178
00:09:21.570 --> 00:09:25.880
to actually edit the behavior, or
the apparent behavior, or, sorry,

179
00:09:25.880 --> 00:09:30.540
apparently edit the behavior
of our multiplyBy2 function.

180
00:09:30.540 --> 00:09:33.825
Making it more reusable in
other places in our code.

