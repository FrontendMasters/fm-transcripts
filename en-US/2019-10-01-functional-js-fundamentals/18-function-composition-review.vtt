WEBVTT

1
00:00:00.000 --> 00:00:00.950
&gt;&gt; Will Sentance: Sam, go ahead now.

2
00:00:00.950 --> 00:00:04.872
&gt;&gt; Sam: Two points, first of all,
divide by 5 in your simplified diagram,

3
00:00:04.872 --> 00:00:07.452
you're passing in a 5, it should be a 25.

4
00:00:07.452 --> 00:00:09.025
&gt;&gt; Will Sentance: [LAUGH] Thank you, Sam.

5
00:00:09.025 --> 00:00:12.132
&gt;&gt; Sam: Secondly, I want to understand,
is there a rhyme and

6
00:00:12.132 --> 00:00:17.644
reason behind why you ordered it as input,
then function, versus function then input.

7
00:00:17.644 --> 00:00:21.472
&gt;&gt; Will Sentance: Because the way reduce
works is the first thing you pass to

8
00:00:21.472 --> 00:00:26.019
the reducer function, the function
that combines from two to one,

9
00:00:26.019 --> 00:00:30.673
from two to one, the first thing
you pass is always the accumulator.

10
00:00:30.673 --> 00:00:35.318
And the second thing, and you want reducer
to be able to work on any scenario,

11
00:00:35.318 --> 00:00:38.047
but it does lead to you
kind of having to flip.

12
00:00:38.047 --> 00:00:40.055
Which is a bit of a weird feeling right?

13
00:00:40.055 --> 00:00:43.394
But it's because I want to combine,
I had a combine function,

14
00:00:43.394 --> 00:00:46.549
always has the first thing be
the thing we're building up.

15
00:00:46.549 --> 00:00:51.464
And the second thing be the element
of the array that we want to combine

16
00:00:51.464 --> 00:00:52.580
to become one.

17
00:00:52.580 --> 00:00:57.647
When we do so inside, the second
thing is now visibly on the page.

18
00:00:57.647 --> 00:01:00.202
I think it's run on the first thing and
so it looks, it's flipped.

19
00:01:00.202 --> 00:01:05.228
&gt;&gt; Sam: Okay, but it sounds like you're
describing the order inside the reduce.

20
00:01:05.228 --> 00:01:08.095
I'm asking about the run
function on input.

21
00:01:08.095 --> 00:01:10.890
&gt;&gt; Will Sentance: But where does
run function on input get replaced,

22
00:01:10.890 --> 00:01:12.190
where is it replacing?

23
00:01:12.190 --> 00:01:13.951
&gt;&gt; Sam: It's it's the reducer.

24
00:01:13.951 --> 00:01:18.294
&gt;&gt; Will Sentance: It's filling in what
what placeholder in reduce, Charles?

25
00:01:18.294 --> 00:01:19.012
&gt;&gt; Charles: Into combine.

26
00:01:19.012 --> 00:01:20.119
&gt;&gt; Will Sentance: Into how to combine.

27
00:01:20.119 --> 00:01:21.830
Meaning, Sam, I'm preset I can't,
I mean, look.

28
00:01:21.830 --> 00:01:26.568
I could theoretically fit my reduce around
but that's how the built-in reduce works

29
00:01:26.568 --> 00:01:29.741
so I'm sort of being consistent
with how that one works.

30
00:01:29.741 --> 00:01:32.884
So remember run function only gets
run in place of how to combine so

31
00:01:32.884 --> 00:01:35.755
it had better behave the way
that how to combine expects it.

32
00:01:35.755 --> 00:01:39.952
Those sort of clarifications,
people, everyone benefits from.

33
00:01:39.952 --> 00:01:42.149
I wanted to show you one little
thing here, look at this.

34
00:01:42.149 --> 00:01:45.828
All I've done on this next slide here,
is I've added an extra function just so

35
00:01:45.828 --> 00:01:47.467
you know, give you the emphasis.

36
00:01:47.467 --> 00:01:51.870
On, by the way, in case you wouldn't hear
there because the mic wasn't on Seth.

37
00:01:51.870 --> 00:01:55.906
Seth asked, what if my function
has what's called multiple arity?

38
00:01:55.906 --> 00:01:58.432
One of my functions here
expect more than one input.

39
00:01:58.432 --> 00:02:02.526
The way this is set up is much
like Sam's question was saying,

40
00:02:02.526 --> 00:02:06.567
I'm pre prescribed how these
functions are going to be run.

41
00:02:06.567 --> 00:02:10.574
Reduce is just going to take them
with my how to combine rule and

42
00:02:10.574 --> 00:02:12.668
running function on one input.

43
00:02:12.668 --> 00:02:14.017
There ain't gonna be multiple inputs,
here.

44
00:02:14.017 --> 00:02:17.950
I mean if one of my functions here
multiply by two, add, it's expected two or

45
00:02:17.950 --> 00:02:20.326
more inputs, it's gonna break, entirely.

46
00:02:20.326 --> 00:02:24.055
And that is where in the end
functional programming techniques,

47
00:02:24.055 --> 00:02:26.103
all the fancy stuff you hear about.

48
00:02:26.103 --> 00:02:29.875
Monads, partial application, carrying.

49
00:02:29.875 --> 00:02:34.544
All of them really come down to trying to
solve the problem where if you're listing

50
00:02:34.544 --> 00:02:38.482
out functions, little blocks of
code to auto run one after another.

51
00:02:38.482 --> 00:02:40.707
And you're not calling them yourself,

52
00:02:40.707 --> 00:02:43.853
you're relying on constructs
like reduce to call them.

53
00:02:43.853 --> 00:02:46.981
You need to make sure that they
behave in a very predictable manner.

54
00:02:46.981 --> 00:02:49.729
You need to make sure they have
exactly one input, one output.

55
00:02:49.729 --> 00:02:52.073
You need to make sure if
they take in an error,

56
00:02:52.073 --> 00:02:54.492
that doesn't break your
entire flow of data.

57
00:02:54.492 --> 00:02:58.945
And that's really gonna be what everything
else in functional programming is about,

58
00:02:58.945 --> 00:03:02.666
trying to ensure the consistency that
I can just list off, line of code,

59
00:03:02.666 --> 00:03:03.771
line of code, line.

60
00:03:03.771 --> 00:03:04.916
Let's see that, then.

61
00:03:04.916 --> 00:03:07.229
And so look at this, all I've done here
between these two slides is changed

62
00:03:07.229 --> 00:03:08.710
what I've done here
between these two slides.

63
00:03:08.710 --> 00:03:12.005
I've added an extra function, but
what I've done is I've moved my list of

64
00:03:12.005 --> 00:03:15.212
functions from being in a block like that,
which will do, all the time.

65
00:03:15.212 --> 00:03:18.650
I put them with white space
line by line by line.

66
00:03:18.650 --> 00:03:22.739
So you can really feel the way that
functional programmers might write this.

67
00:03:22.739 --> 00:03:27.527
Which is that each line Is
an isolated independent

68
00:03:27.527 --> 00:03:32.771
task whose only output is
passed via inside of reduce,

69
00:03:32.771 --> 00:03:35.629
passed to the next function.

70
00:03:35.629 --> 00:03:40.320
Whose only output is only
consequence of R3 is the 25 which is

71
00:03:40.320 --> 00:03:45.198
passed directly to the very next line and
the very next line only.

72
00:03:45.198 --> 00:03:47.106
Next line, you know.

73
00:03:47.106 --> 00:03:50.043
Divide by 5 is a line of code, in a sense.

74
00:03:50.043 --> 00:03:52.100
And we've now put them all on one line.

75
00:03:52.100 --> 00:03:54.448
People, this is the dream.

76
00:03:54.448 --> 00:03:57.871
All of the middlemen newer to it,
seeing this, I'm like, hold on,

77
00:03:57.871 --> 00:03:59.121
am I running this right?

78
00:03:59.121 --> 00:04:03.807
But once you get used to this structure,
being able to list out my tasks by their

79
00:04:03.807 --> 00:04:06.647
human readable name and
my starting value, and

80
00:04:06.647 --> 00:04:11.627
then know that I'm just gonna go to one
after another after another after another.

81
00:04:11.627 --> 00:04:16.469
This makes my code
profoundly more readable.

82
00:04:16.469 --> 00:04:19.437
This is the essence of
functional programming.

83
00:04:19.437 --> 00:04:24.235
Now, I will tell you this, we don't use
reduce directly to be able to do this.

84
00:04:24.235 --> 00:04:27.107
We use a function called Compose, or Pipe.

85
00:04:27.107 --> 00:04:30.872
Both of which pass function
through one by one by one.

86
00:04:30.872 --> 00:04:32.439
What are they doing inside?

87
00:04:32.439 --> 00:04:34.235
And I went and
checked that round of documentation.

88
00:04:34.235 --> 00:04:35.931
I went and checked how they built it.

89
00:04:35.931 --> 00:04:37.422
What are they doing inside?

90
00:04:37.422 --> 00:04:39.775
They’re running our good friend, reduce.

91
00:04:39.775 --> 00:04:43.273
They’re running our list of functions
through, running our value through our

92
00:04:43.273 --> 00:04:45.791
list of functions and
they’re reducing them together.

93
00:04:49.956 --> 00:04:51.101
&gt;&gt; Will Sentance: Even compose,

94
00:04:51.101 --> 00:04:56.220
the most significant programming
tool in functional programming.

95
00:04:56.220 --> 00:04:58.271
This is what's going on behind the scenes.

96
00:04:58.271 --> 00:05:01.116
When you go into that function
premiere interview, and they say, so

97
00:05:01.116 --> 00:05:02.500
how do you compose functions up?

98
00:05:02.500 --> 00:05:07.762
And you say, well, for me, it's all about
reduction of each function with a value.

99
00:05:07.762 --> 00:05:10.344
That is exactly what it's doing.

100
00:05:10.344 --> 00:05:11.974
All right, people.

101
00:05:11.974 --> 00:05:14.655
So, function composition.

102
00:05:16.849 --> 00:05:20.433
&gt;&gt; Will Sentance: Easier to add features.

103
00:05:20.433 --> 00:05:24.128
This is the essential part
of functional JavaScript,

104
00:05:24.128 --> 00:05:28.167
being able to list out our
individual units of code by name.

105
00:05:28.167 --> 00:05:33.868
Bump, bump, bump, 1, 2, 3, 4 by name.

106
00:05:33.868 --> 00:05:37.143
And have them run one by one as
independent self contained pieces whose

107
00:05:37.143 --> 00:05:38.680
only output is in the next line.

108
00:05:38.680 --> 00:05:41.310
More readable,
reduce here is often wrapped in compose.

109
00:05:41.310 --> 00:05:45.071
To say, compose, like you compose
notes into a musical melody.

110
00:05:45.071 --> 00:05:49.059
You compose individual units of
code Into a full task into a fully,

111
00:05:49.059 --> 00:05:53.897
just like you would have ten lines of code
in the function now you got ten functions

112
00:05:53.897 --> 00:05:57.336
that form a composed,
larger collection of functions.

