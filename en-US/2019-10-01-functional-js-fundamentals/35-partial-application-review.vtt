WEBVTT

1
00:00:00.000 --> 00:00:06.083
&gt;&gt; Will Sentance: So, all of that work
to adjust our function multiply here and

2
00:00:06.083 --> 00:00:10.029
reality will be adjusting functions.

3
00:00:10.029 --> 00:00:14.674
Like say we want to do a pen to
a particular piece of specific text to

4
00:00:14.674 --> 00:00:16.784
DOM a element, for example,

5
00:00:16.784 --> 00:00:21.945
will be adjusting functions in practice
much more usable the multiply.

6
00:00:21.945 --> 00:00:25.861
To adjust it,
to pre fill it with a value two,

7
00:00:25.861 --> 00:00:32.679
in practice that we might have to pre fill
more than just one value of function.

8
00:00:32.679 --> 00:00:34.608
Many functions taken 3 4 5 inputs.

9
00:00:34.608 --> 00:00:38.594
We call it era t if you want to
be fancy and sound sophisticated,

10
00:00:38.594 --> 00:00:40.786
the narrative five, and hold on.

11
00:00:40.786 --> 00:00:43.983
We honor only taking
one input to prefit it.

12
00:00:43.983 --> 00:00:49.902
Well, we have a technique to adjust any
function that takes in many inputs,

13
00:00:49.902 --> 00:00:53.877
into a not a function that
takes in many inputs, but

14
00:00:53.877 --> 00:00:58.610
a series of function calls each
taking in an input one by one.

15
00:00:58.610 --> 00:01:03.388
This dollars and is currying we're not
going to go into it in detail here,

16
00:01:03.388 --> 00:01:08.337
but it's a more generalized version
of our partial application approach.

17
00:01:08.337 --> 00:01:13.985
Partial application has allowed us
to make it easier to add features.

18
00:01:13.985 --> 00:01:18.163
We're going to see in a moment, a
practical example where we might have had

19
00:01:18.163 --> 00:01:22.406
to partially apply some of our data before
we pass that function into our list

20
00:01:22.406 --> 00:01:25.686
of functions to run one by one
by one by one automatically.

21
00:01:25.686 --> 00:01:28.493
We can now, in this case,
use the function multiply.

22
00:01:28.493 --> 00:01:31.603
We can write it once and
then use it for different situations.

23
00:01:31.603 --> 00:01:35.813
But in practice, we could write out
the more practicable functions once and

24
00:01:35.813 --> 00:01:39.644
then pre fill one of their arguments for
many different situations.

25
00:01:39.644 --> 00:01:41.470
It makes it more readable.

26
00:01:41.470 --> 00:01:46.320
When we can use functions that have
multiple arguments in our list

27
00:01:46.320 --> 00:01:51.092
of functions style,
we get a beautiful setup of readable code.

28
00:01:51.092 --> 00:01:53.424
We'll see it again in a moment,
easy to debug.

29
00:01:53.424 --> 00:01:57.564
Now we can break application
into individual units,

30
00:01:57.564 --> 00:02:02.537
even if those individual units
actually need multiple inputs.

31
00:02:02.537 --> 00:02:04.148
Now, no problem.

32
00:02:04.148 --> 00:02:07.427
Thanks to partial application and
the help of Closure.

