[00:00:00]
>> Will Sentance: Here we go, Seth, line one my friend, what are we doing here? Take it away.
>> Seth: During a function called oncify.
>> Will Sentance: Excellent, into global memory, it goes, there it is. oncify is saved. Next line, Jasmine?
>> Jasmine: Declaring multiplyBy2 as a function.
>> Will Sentance: There it is, multiplyBy2 is a function.

[00:00:24]
It takes in, there it is, it's a function 0 with input of num and the result of num by 2, next line?
>> Seth: [INAUDIBLE]
>> Will Sentance: [LAUGH] That's exactly, he knew what I was gonna ask. Anyway, left-hand side, yes.
>> Nesh: Yep, left-hand, the OncifiedMultiplyBy2.
>> Will Sentance: Absolutely, and everybody who sees these things that oncify is gonna somehow mutate as it multiplyBy2 to make it limited to only run once.

[00:00:57]
Can I edit functions of they been saved, Virginia?
>> Jasmine: No.
>> Will Sentance: No, so instead they're going to trick the reader into thinking it's edited, but in reality, and that's a problem, right? It's gonna be more readable in a sense but we're not gonna know how it's working under the hood and therefore, hard to debug.

[00:01:13]
We will know. We're gonna make oncify multipleBy2. It's a brand new function with a backpack. And I have a feeling we're gonna store the multiplyBy2 function into OncifiedMultiplyBy2's backpack. We're gonna store more than just data there. We can store functionality in OncifiedMultiplyBy2's backpack. OncifiedMultiplyBy2 is going to be the return value of calling,

[00:01:43]

>> Will Sentance: Calling oncify on multiplyBy2. There it is, everyone together. A brand new-
>> Execution context.
>> Will Sentance: Beautiful, here it is. Not a huge one, because its main job, people, is to setup a function that will be stored into OncifiedMultiplyBy2. And who has two key things attached to it in its backpack, in its persistent memory.

[00:02:15]
Functionality multipleBy2 and account to keep track of how many times it's being run. That's what we're doing inside oncify. So let's go into it, and the local memory what is the first thing, Michael, inside of oncify's local memory?
>> Micheal: Counter.
>> Will Sentance: That's a second thing. What's the first thing we need?

[00:02:33]

>> Micheal: Right, convertMe.
>> Will Sentance: Exactly, this parameter, convertMe, which has stored only, what, Michael?
>> Micheal: multiplyBy2.
>> Will Sentance: The entire multiplyBy2 functionality. There it is, with input of num and return value of num by 2. All right, there's counter. And finally, the final thing, Andrew, that we do inside of oncify, the bigger auto, the penultimate thing, the big thing we save is what?

[00:03:01]

>> Andrew: The function.
>> Will Sentance: The function known as-
>> Andrew: Inner.
>> Will Sentance: Inner, there it is, there it is. We miss something. When I save a function inside the running another function, Seth, what also happens.
>> Will Sentance: When I say you, Jasmine, a function inner inside the running of oncify it gets what?

[00:03:22]

>> Jasmine: An execution contact.
>> Will Sentance: When I save it, definitely not.
>> Jasmine: Get a backpack.
>> Will Sentance: I get what? A link, I wouldn't get hold of the backpack, I get a link to all the surrounding memory. Meaning, Sam, when I return the functionality known as inner out into what global label, Sam?

[00:03:50]
The functionality declared inside of oncify is inner, it gets returned out into what global label, Sam?
>> Sam: Oncified.
>> Will Sentance: OncifiedMultiplyBy2. When I return it out, out it comes, it was born as inner, there it is. It was born as inner, what's it bring with it, Virginia?
>> Virginia: The backpack.

[00:04:16]

>> Will Sentance: The backpack, exactly, attached on to it. And look at what's inside of it. It's got,
>> Will Sentance: What's it got inside of it, Jasmine?
>> Seth: What's inside the functions backpack?
>> Jasmine: multiplyBy2.
>> Will Sentance: multiplyBy2. That's fantastic, right? Because we want this OncifiedMultiplyBy2 to have the ability to run multiplyBy2.

[00:04:54]
Is it? Is OncifiedMultiplyBy2 multiplyBy2? Uh-uh, uh-uh, it's a brand new function who inner that has a backpack into which we store. Whatever we pass into oncify in which that function inner was created and then pull that stuff out on the back of inner. Inner's only job is to determine by looking in its backpack, inner bites new name, OncifiedMultiplyBy2.

[00:05:20]
His only job is to determine looking into his backpack, am I allowed to run from the backpack the multiplyBy2 function? [SOUND] Okay, what's the other thing, Jasmine, in the backpack?
>> Jasmine: Actually I had a question first.
>> Will Sentance: Hold on one second, first, what is the other thing in the backpack, Jasmine?

[00:05:36]

>> Jasmine: The counter.
>> Will Sentance: The counter is set to what?
>> Jasmine: To 0.
>> Will Sentance: Set to 0. Go ahead, Jasmine.
>> Jasmine: So the backpack is created once the inner function is created.
>> Will Sentance: As soon as inner is created it gets a link to exactly the surrounding local memory. When inner gets returned out of running oncify into where?

[00:05:58]

>> Jasmine: Oncified-
>> Will Sentance: OncifiedMultiplyBy2. It pulls with it all that data, exactly. And what is that data? Well, it's the function we want to convert into being a function with a memory. And it's the counter that's gonna allow us to keep track of whether multiplyBy2 has been run before inside OncifiedMultiplyBy2.

[00:06:25]
All right, and this execution context, everybody this point? Gone, exactly. Okay, now, things get interesting. David, what am I calling next? I've saved OncifiedMultiplyBy2, and so I now-
>> David: You're invoking it.
>> Will Sentance: I'm invoking it. There it is, OncifiedMultiplyBy2 with the input of 10. Now, the reader looks at that and goes, it's multiplyBy2, I'm gonna run multiplyBy2.

[00:07:05]
We know the difference, we know the reality. Instead what function are we really running, David, when we run OncifiedMultiplyBy2?
>> David: Inner.
>> Will Sentance: Inner, exactly. And thank goodness we all, because inner has what?
>> David: A backpack.
>> Will Sentance: A backpack. And if I want to limit a function running, I need to remember it's previously being run.

[00:07:30]
Meaning I need a backpack to count up that it's previously being run. And then to look at and check how many times have I run inside of OncifiedMultiplyBy2 with the inner, whatever I wanna run, which in this case, looks like it's going to be multiplyBy2, it's gonna be run in the label convertMe.

[00:07:49]
I'm only gonna allow it to run as long as my backpack counter is 0. I'm editing my function to make it more reusable in new situations. Okay, let's open the execution context and this, people, this is, let's put it on the call stack.
>> Will Sentance: It's that call stack, we're in global.

[00:08:15]
And we now execute OncifiedMultiplyBy2 with the input of 10. Into it we go, I don't even know if I'd have room here but okay, into it we go. And in my local memory. The reason it's gonna be so challenging is we're gonna be bouncing back and forwards between the backpack.

[00:08:42]
OncifiedMultiplyBy2, again, Jasmine, was born as-
>> Jasmine: Inner.
>> Will Sentance: Inner, she's spot on. Gosh, here we go. In its backpack, it has everything we need, the functionality we wanna run and a counter to limit how many times that functionality can run. And then it is got the code to say, go run the functionality in the backpack, convertMe, I can see it's gonna be run.

[00:09:05]
Only if the counter is 0, and then implement the counter. [SOUND] All right, here we go. David, first thing in local memory at 10-
>> David: Input.
>> Will Sentance: Input, what, on the parameter input. Excellent from David, there it is. Now, we hit our conditional. if counter 0, here we go.

[00:09:30]
Where do I look for counter first, David?
>> David: Local memory.
>> Will Sentance: Do I find it? Where do I go to next, David?
>> David: Backpack.
>> Will Sentance: In the backpack of the OncifiedMultiplyBy2 function, I'm calling that. It was born inside the oncification of multiplyBy2 in which and it is created and pull out multiplyBy2 in the backpack.

[00:09:54]
And I go find counter is in did what, David?
>> David: 0.
>> Will Sentance: 0, I want to use a different color. Is,
>> Will Sentance: I put it from the backpack, therefore, I'm gonna use it in pink, is 0, is 0 = 0, David?
>> David: Yes.
>> Will Sentance: And so what line do I hit next, David?

[00:10:14]

>> David: The first line inside of the conditional, which is to define output.
>> Will Sentance: Exactly. Okay, hold on, hold on, hold on, give me a second. So output is going to be the return of calling convertMe, with the input of the argument of input. My goodness, okay. What is convertMe, Anna?

[00:10:39]
Where do I look for convertMe first, Anna?
>> Seth: David, where do I look for convertMe first?
>> David: [INAUDIBLE]
>> Will Sentance: Exactly, of-
>> David: Of the current execution code.
>> Will Sentance: Which is?
>> David: OncifiedMultiplyBy2.
>> Will Sentance: Well done, x with input of ten. Do I find convertMe in there?
>> David: No.
>> Will Sentance: No.

[00:11:01]
Where do I look for it next? I'm running OncifiedMultiplyBy2, it has a-
>> David: Backpack.
>> Will Sentance: Backpack, a permanent persistence store of memory that I can use. What is that? There you go, that I can use again and again. And where do I find convertMe is?
>> David: In the backpack.

[00:11:19]

>> Will Sentance: It is, I grab it and I use it and it's what-
>> David: It's a function multiplyBy2.
>> Will Sentance: multiplyBy2. Look at that, is my OncifiedMultiplyBy2 multiplyBy2? It is so far away from it. It is a function inner that we've created inside of oncify in order that it had a permanent memory even though our multiplyBy2 was not born with one.

[00:11:46]
And then literally, that permanent memory is where we store, the multiplyBy2 function. Because we defined inner adjacent to that including the parameter argument combination of convertMe and multiplyBy2. So we return that in there into OncifiedMultiplyBy2. There's our multiplyBy2 functions sitting happily. And we grab it, and now, here's where I say it's the mind.

[00:12:08]
I know this works, I'm very polite now, is the mind F, there we go. Here's what I'm gonna say it is, cuz look, we grab the function from OncifiedMultiplyBy2's backpack, which was only there because when OncifiedMultiplyBy2 was created as the inner inside of Oncified. We had multiplyBy2, the functionality where it's a oncify in the convertMe parameter, meaning [SOUND] it came out into here.

[00:12:32]
Where do we get the thing we're gonna pass in and actually multiply from, Jasmine? What are we gonna pass into convertMe which is multiplyBy2?
>> Jasmine: [INAUDIBLE]
>> Will Sentance: Which comes from OncifiedMultiplyBy2's direct execution context. We're gonna grab it straight from there. The functionality that we're gonna run, what's that?

[00:12:56]
Oncified came from the backpack. The condition under which we're gonna confirm we're allowed to run it, came from the backpack. And then the thing we're gonna run multiplyBy2 came dynamically live in as the input into our pretend OncifiedMultiplyBy2 function. So we as the reader are like, the 10 goes in, this must be just multiplyBy2.

[00:13:20]
Uh-uh, uh-uh, uh-uh, it's being passed through a layer in to a running of multiplyBy2 inside of OncifiedMultiplyBy2. OncifiedMultiplyBy2 is wrapping up, it's inside, well, they call it decorating the underlying function. Which we grab from the backpack, and pull it through. [SOUND] Okay, output of that, Jasmine, is?
>> Jasmine: 20.

[00:13:43]

>> Will Sentance: 20, and we store that where?
>> Jasmine: Output.
>> Will Sentance: Into output, there is it, 20. And then the final, but ultimate thing we do is what, Sam?
>> Sam: Increment counter.
>> Will Sentance: We increment the backpack counter, my God. There it is, counter++, it's in the backpack, we increment it to 1.

[00:14:01]
And then finally, Jasmine, we do what?
>> Jasmine: Return
>> Will Sentance: The value of-
>> Jasmine: Which is 20.
>> Will Sentance: Exactly, 20, we don't store it anywhere, but there it is. Look at that, people. We created a function, well, we didn't create a function, well, we did, but we appeared to edit a multiplyBy2 function to create a function under a condition of counter still being 0 worked.

[00:14:31]
And appeared to look just like multiplyBy2, it's called function decoration. It's profoundly significant, especially in this model, but we're not done yet. Let's put OncifiedMultiplyBy2 off the call stack and run it again this time with the input of 7. I remove it, put it back on, I just wanna erase it all but put it back on.

[00:14:54]
And let's run it again. OncifiedMultiplyBy2 input 7. New execution context, Andrew, into it we go, into it we go. And what's the first thing in local memory given, Andrew, OncifiedMultiplyBy2 is really just-
>> Andrew: Input which is 7.
>> Will Sentance: Input is 7. Input which is 7. And now, we do our check.

[00:15:29]
if counter,
>> Will Sentance: Is 0. Counter in the local memory, Andrew?
>> Andrew: No.
>> Will Sentance: No, where is it?
>> Andrew: It's in the backpack.
>> Will Sentance: And what is the value counter?
>> Andrew: 1.
>> Will Sentance: And is that equal to 0?
>> Andrew: No.
>> Will Sentance: No, it's not, so what do we auto return out?

[00:15:47]

>> Andrew: Sorry.
>> Will Sentance: We return out sorry. And there it is, people. We have here used giving functions backpacks to actually edit the behavior or the apparent behavior, or sorry, apparently edit the behavior of our multiplyBy2 function. Making it more reusable in other places in our code.

