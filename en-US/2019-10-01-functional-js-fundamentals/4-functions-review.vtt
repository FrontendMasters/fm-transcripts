WEBVTT

1
00:00:00.000 --> 00:00:06.239
&gt;&gt; Will Sentance: Now, we move onto
the beauty of higher order functions.

2
00:00:06.239 --> 00:00:09.276
On the very next slide,
we're gonna see a task,

3
00:00:09.276 --> 00:00:14.033
a function, there's gonna be
profoundly similar, profoundly similar.

4
00:00:14.033 --> 00:00:18.800
And we're gonna go it must be some better,
and then on the third slide we're

5
00:00:18.800 --> 00:00:22.409
gonna see the same function with
only another slight change.

6
00:00:22.409 --> 00:00:25.282
And we've got to ask ourselves,
there must be a better way.

7
00:00:25.282 --> 00:00:30.594
But I'm gonna literally want you to get
bored in the next few minutes because

8
00:00:30.594 --> 00:00:35.410
when you get bored, you're never
going to make this mistake again.

9
00:00:35.410 --> 00:00:40.395
You're never going to want to
deal with this situation again.

10
00:00:40.395 --> 00:00:45.605
You're never gonna put yourself
in this position again.

11
00:00:45.605 --> 00:00:48.230
Where something takes so much longer,

12
00:00:48.230 --> 00:00:53.092
because you're doing a repeatable
task that could have been done once.

13
00:00:53.092 --> 00:00:55.697
You're never gonna be put
in that position again,

14
00:00:55.697 --> 00:00:57.642
you're gonna fight it in the future.

15
00:00:57.642 --> 00:01:02.131
You're gonna stay with your instincts and
say, actually, maybe there's a better.

16
00:01:02.131 --> 00:01:03.087
[LAUGH] All right.

17
00:01:03.087 --> 00:01:08.043
[LAUGH] Okay, good.

18
00:01:08.043 --> 00:01:09.550
&gt;&gt; Michael: It's called going meta.

19
00:01:09.550 --> 00:01:12.033
&gt;&gt; Will Sentance: Seth, line one,
what are we doing here?

20
00:01:12.033 --> 00:01:15.430
It does look good, though,
at the end, right?

21
00:01:15.430 --> 00:01:18.321
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: It is quite big.

22
00:01:18.321 --> 00:01:19.398
&gt;&gt; Michael: Global context.

23
00:01:19.398 --> 00:01:23.531
&gt;&gt; Will Sentance: Yeah, global context,
with saving in memory what, Seth?

24
00:01:23.531 --> 00:01:27.537
&gt;&gt; Michael: Renaming it some ungodly
long name, copyArrayAndMultiplyBy2.

25
00:01:27.537 --> 00:01:31.399
&gt;&gt; Will Sentance: CopyArray,
some clear semantic name,

26
00:01:31.399 --> 00:01:36.404
copyArray, MultiplyBy2,
saving it there it is.

27
00:01:36.404 --> 00:01:41.038
Next line, we're going to go to, Charles,
if we say copyArrayAndMultiplyBy2,

28
00:01:41.038 --> 00:01:44.713
what's our next line, Charles,
do we actually [INAUDIBLE] does?

29
00:01:44.713 --> 00:01:46.997
&gt;&gt; Michael: It's gonna be myArray.

30
00:01:46.997 --> 00:01:47.703
&gt;&gt; Will Sentance: Yeah.

31
00:01:47.703 --> 00:01:53.189
&gt;&gt; Michael: And it's gonna be assigned 1,
2, and 3, yeah.

32
00:01:53.189 --> 00:01:54.662
&gt;&gt; Will Sentance: An array of 1,
2, 3, excellent.

33
00:01:54.662 --> 00:02:00.326
Next line, who hadn't called on yet,
[SOUND] Mike, [LAUGH] Michael,

34
00:02:00.326 --> 00:02:04.830
Michael, what we doing
the next slide left hand side?

35
00:02:04.830 --> 00:02:07.387
&gt;&gt; Michael: We're assigning to result,

36
00:02:07.387 --> 00:02:10.530
we're assigning the result of-
&gt;&gt; Will Sentance: Yeah.

37
00:02:10.530 --> 00:02:11.119
&gt;&gt; Michael: Calling that function.

38
00:02:11.119 --> 00:02:14.502
&gt;&gt; Will Sentance: The return value of
executing copyArrayAndMultiplyBy2.

39
00:02:14.502 --> 00:02:16.855
People, that level of
technical communication,

40
00:02:16.855 --> 00:02:19.918
if you are finding this earlier
stuff a little bit too manageable,

41
00:02:19.918 --> 00:02:23.164
focus on the quality and
precision of your technical communication.

42
00:02:23.164 --> 00:02:26.781
That's the ability to communicate what
your code is doing with such precision

43
00:02:26.781 --> 00:02:29.083
that somebody else could
actually implement it,

44
00:02:29.083 --> 00:02:30.694
just by hearing you verbalize it.

45
00:02:30.694 --> 00:02:32.866
That is a key feature
of a senior developer.

46
00:02:32.866 --> 00:02:35.178
And I take my understanding
of the code base and

47
00:02:35.178 --> 00:02:39.287
make it meaningful to people who are not
even seeing it yet, that's a real skill.

48
00:02:39.287 --> 00:02:41.512
Excellent, so result is declared.

49
00:02:41.512 --> 00:02:45.503
While we head off and we execute

50
00:02:45.503 --> 00:02:51.032
copyArrayAndMultiplyBy2 with the input

51
00:02:51.032 --> 00:02:57.032
of myArray which is 1, 2, 3, there it is.

52
00:02:57.032 --> 00:02:59.794
We create, and
because all of you are not yet

53
00:02:59.794 --> 00:03:03.012
bored by saying this,
you can say it instead of me.

54
00:03:03.012 --> 00:03:04.879
We create a brand new?

55
00:03:04.879 --> 00:03:06.752
&gt;&gt; Michael: Execution context.

56
00:03:06.752 --> 00:03:07.624
&gt;&gt; Will Sentance: Very nice,

57
00:03:07.624 --> 00:03:11.823
I hope the online audience is
typing that in vigorously.

58
00:03:11.823 --> 00:03:16.588
And there it is, a thread of execution
goes in, and in our local memory,

59
00:03:16.588 --> 00:03:20.436
I'm going to try and
keep this tidy for posterity people.

60
00:03:20.436 --> 00:03:24.526
In our local memory, we have what?

61
00:03:24.526 --> 00:03:27.234
&gt;&gt; David: David, first thing?

62
00:03:27.234 --> 00:03:30.311
We have the const output.

63
00:03:30.311 --> 00:03:32.362
&gt;&gt; Will Sentance: That's
the second thing we do.

64
00:03:32.362 --> 00:03:35.941
&gt;&gt; David: I'm sorry,
the parameter coming in with the-

65
00:03:35.941 --> 00:03:36.821
&gt;&gt; Will Sentance: I would even say,

66
00:03:36.821 --> 00:03:38.415
the parameter is not coming in.

67
00:03:38.415 --> 00:03:41.568
The parameter is in there waiting,
the argument is coming in.

68
00:03:41.568 --> 00:03:46.540
The parameter is our placeholder,
the label array being filled in with what,

69
00:03:46.540 --> 00:03:47.077
David?

70
00:03:47.077 --> 00:03:48.244
&gt;&gt; David: 1, 2, 3, of myArray.

71
00:03:48.244 --> 00:03:50.944
&gt;&gt; Will Sentance: Exactly,
and that is our?

72
00:03:50.944 --> 00:03:51.756
&gt;&gt; David: Value.

73
00:03:51.756 --> 00:03:54.914
&gt;&gt; Will Sentance: Yep, often nodes
specifically in this situation as our?

74
00:03:56.981 --> 00:03:57.758
&gt;&gt; Will Sentance: Jasmine?

75
00:03:57.758 --> 00:03:59.727
&gt;&gt; Jasmine: Argument.
&gt;&gt; Will Sentance: Our argument, excellent.

76
00:03:59.727 --> 00:04:03.790
Parameter, argument, parameter, argument.

77
00:04:03.790 --> 00:04:05.231
David, what's this?

78
00:04:05.231 --> 00:04:06.120
&gt;&gt; David: An array.

79
00:04:06.120 --> 00:04:09.508
&gt;&gt; Jasmine: [LAUGH]
&gt;&gt; Will Sentance: David!

80
00:04:09.508 --> 00:04:10.958
Was that a joke?

81
00:04:10.958 --> 00:04:11.807
&gt;&gt; David: Yes, it was.

82
00:04:11.807 --> 00:04:16.103
&gt;&gt; Will Sentance: [LAUGH] Hilarious,
all right, good.

83
00:04:16.103 --> 00:04:18.274
Remove it, all right, okay?

84
00:04:18.274 --> 00:04:21.231
Output is in the array, we declared,
that’s what we need, right?

85
00:04:21.231 --> 00:04:23.654
We wanna take it out, input array,
create a new output array,

86
00:04:23.654 --> 00:04:24.935
loop it through the input array,

87
00:04:24.935 --> 00:04:27.665
double each element, stick them
in the output array, great, okay?

88
00:04:27.665 --> 00:04:29.720
Not profound maybe but let’s keep going.

89
00:04:29.720 --> 00:04:34.368
So now we're hitting the for loop, and
I'm gonna diagram my for loop like this.

90
00:04:34.368 --> 00:04:39.266
I'm gonna take my array 1, 2, 3, I'm gonna
use this sort of the left hand side where

91
00:04:39.266 --> 00:04:42.466
the thread is executing just
like is gonna working area.

92
00:04:42.466 --> 00:04:46.166
I'm not copying them,
I'm just working on them here.

93
00:04:46.166 --> 00:04:48.069
For the way about how for loop works,

94
00:04:48.069 --> 00:04:51.394
I like not to speak in hypothetical
loop through, no, no, no.

95
00:04:51.394 --> 00:04:54.964
First time you hit the body of it,
i's value is literally what, Sam?

96
00:04:54.964 --> 00:04:56.112
&gt;&gt; Sam: Zero.
&gt;&gt; Will Sentance: Zero,

97
00:04:56.112 --> 00:04:59.103
array position zero, is what?

98
00:04:59.103 --> 00:05:01.235
Array position 0 is?

99
00:05:01.235 --> 00:05:02.417
Array index zero is?

100
00:05:02.417 --> 00:05:03.099
&gt;&gt; Sam: That's the index.

101
00:05:03.099 --> 00:05:04.103
&gt;&gt; Will Sentance: Yeah.

102
00:05:04.103 --> 00:05:06.054
[LAUGH] Array zero is?

103
00:05:06.054 --> 00:05:06.629
&gt;&gt; Sam: One.
Zero.

104
00:05:06.629 --> 00:05:07.754
&gt;&gt; Will Sentance: Is one.

105
00:05:07.754 --> 00:05:08.693
Is it one?

106
00:05:08.693 --> 00:05:11.151
Yes, David, array zero is one.

107
00:05:11.151 --> 00:05:15.232
Array is 1, 2, 3, array position 0 is 1,

108
00:05:15.232 --> 00:05:19.424
when you take that 1,
we do what with it, Mike?

109
00:05:19.424 --> 00:05:20.200
&gt;&gt; Mike: We multiply it by two.

110
00:05:20.200 --> 00:05:24.383
&gt;&gt; Will Sentance: We multiply it by two,
we get two, and we do what with that,

111
00:05:24.383 --> 00:05:25.150
Jasmine?

112
00:05:25.150 --> 00:05:27.175
&gt;&gt; Mike: We push it onto the-
&gt;&gt; Will Sentance: We push it

113
00:05:27.175 --> 00:05:28.285
onto the what?

114
00:05:28.285 --> 00:05:29.017
&gt;&gt; Mike: Onto the output.

115
00:05:29.017 --> 00:05:30.047
&gt;&gt; Will Sentance: Output array.

116
00:05:30.047 --> 00:05:36.624
It's a for loop though, and
this time around, Andrew, i is what?

117
00:05:36.624 --> 00:05:37.757
&gt;&gt; Andrew: One.
&gt;&gt; Will Sentance: One,

118
00:05:37.757 --> 00:05:41.805
a reposition one is what, Andrew?

119
00:05:41.805 --> 00:05:42.423
&gt;&gt; Andrew: Two.

120
00:05:42.423 --> 00:05:46.399
&gt;&gt; Will Sentance: Two, by the way don't
worry, maybe I've given this talk here but

121
00:05:46.399 --> 00:05:49.807
on iterators,
I started off by having people experience

122
00:05:49.807 --> 00:05:54.433
developers verbalize the value of i and
the value they wanna find in an array.

123
00:05:54.433 --> 00:05:55.965
And consistently,

124
00:05:55.965 --> 00:06:01.371
I would say eight out of ten times when
I asked him what's the value of i,

125
00:06:01.371 --> 00:06:06.778
they say one, because everybody
really in their heart doesn't care so

126
00:06:06.778 --> 00:06:11.307
much about the position of
the element as just the element.

127
00:06:11.307 --> 00:06:14.693
So don't worry if they have sign you for
an offer.

128
00:06:14.693 --> 00:06:19.066
2 by 2 is 4, we push it to output there,
it is 2, 4, 6, so

129
00:06:19.066 --> 00:06:21.881
there's our output array 2, 4, 6.

130
00:06:21.881 --> 00:06:25.033
We finished our for loop,
we move quickly through this.

131
00:06:25.033 --> 00:06:29.450
And Virginia, the final line of calling
copyArrayAndMultiplyBy2 with the input of

132
00:06:29.450 --> 00:06:33.432
1, 2, 3, the final line is, we've got
our lovely output array there but

133
00:06:33.432 --> 00:06:37.322
it's stuck inside our execution context,
how do I get it out, Virginia?

134
00:06:37.322 --> 00:06:37.962
&gt;&gt; Virginia: Return.

135
00:06:37.962 --> 00:06:39.707
&gt;&gt; Will Sentance: I return what?

136
00:06:39.707 --> 00:06:41.571
&gt;&gt; Virginia: That array.

137
00:06:41.571 --> 00:06:46.027
&gt;&gt; Will Sentance: Absolutely, I return
the value of output which is the array,

138
00:06:46.027 --> 00:06:49.123
out in, Virginia, to what global label?

139
00:06:49.123 --> 00:06:49.822
&gt;&gt; Virginia: Result.

140
00:06:49.822 --> 00:06:56.283
&gt;&gt; Will Sentance: Into result,
there it is, 2, 4, and 6.

141
00:06:56.283 --> 00:07:00.649
Good, I took in an array 1, 2, 3,
I created a brand new array with the each

142
00:07:00.649 --> 00:07:05.109
element doubled 2, 4, 6, and not
an unusual they are feasible task to do.

143
00:07:05.109 --> 00:07:07.358
Do you like this function?

144
00:07:07.358 --> 00:07:08.942
Do you love this function?

145
00:07:08.942 --> 00:07:13.971
You're gonna love my very
distinctive next function.

146
00:07:15.301 --> 00:07:19.627
So different.

147
00:07:19.627 --> 00:07:20.733
What are we doing?

148
00:07:20.733 --> 00:07:22.712
I'm gonna do it down here for
the first time, how about that?.

149
00:07:22.712 --> 00:07:27.073
Alex, what are we doing here in line one
with this radically different function?

150
00:07:27.073 --> 00:07:28.803
So different.

151
00:07:31.271 --> 00:07:34.424
&gt;&gt; Michael: Storing label
of copyArrayAndDivideBy2?

152
00:07:34.424 --> 00:07:38.021
&gt;&gt; Will Sentance: Yeah, exactly, and
actually, this is a whole new app.

153
00:07:38.021 --> 00:07:43.377
There it is, a whole new app,
so don't think about the memory

154
00:07:43.377 --> 00:07:47.809
being crossing over,
copyArray and DivideBy2.

155
00:07:47.809 --> 00:07:52.061
It's a whole new function,
we're having to write and

156
00:07:52.061 --> 00:07:54.845
save all of its code all over again.

157
00:07:54.845 --> 00:07:57.306
And the next line, Alex?

158
00:07:57.306 --> 00:07:59.077
&gt;&gt; Alex: Creating
a storing label of myArray.

159
00:07:59.077 --> 00:08:00.272
&gt;&gt; Will Sentance: Yeah.

160
00:08:00.272 --> 00:08:01.651
&gt;&gt; Alex: The value of the array of 1,
2, 3.

161
00:08:01.651 --> 00:08:06.661
&gt;&gt; Will Sentance: Yeah, okay, yeah,
exactly, 1, 2, 3, next line, Sam?

162
00:08:06.661 --> 00:08:08.629
&gt;&gt; Sam: You declare copy or

163
00:08:08.629 --> 00:08:13.952
you invoke copyArrayAndDivideBy-
&gt;&gt; Will Sentance: Right, but the left hand

164
00:08:13.952 --> 00:08:19.278
side first, yeah, where I declare result
exactly., and it's it's what right now?

165
00:08:19.278 --> 00:08:21.931
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: Uninitialized, yeah,

166
00:08:21.931 --> 00:08:25.769
we don't yet
know what to store in it, okay?

167
00:08:25.769 --> 00:08:29.510
But we do have an idea what to do
to figure out what to store on it.

168
00:08:29.510 --> 00:08:31.583
We go off and run, Sam?

169
00:08:31.583 --> 00:08:34.987
&gt;&gt; Sam: You're invoking-
&gt;&gt; Will Sentance: Go ahead.

170
00:08:34.987 --> 00:08:36.272
&gt;&gt; Sam: copyArrayAndDivideBy2.

171
00:08:36.272 --> 00:08:40.949
&gt;&gt; Will Sentance: DivideBy2,
with what argument?

172
00:08:40.949 --> 00:08:41.733
&gt;&gt; Sam: myArray.

173
00:08:41.733 --> 00:08:43.642
&gt;&gt; Will Sentance: Which is what value?

174
00:08:43.642 --> 00:08:44.596
&gt;&gt; Sam: 1, 2, 3.

175
00:08:44.596 --> 00:08:46.394
&gt;&gt; Will Sentance: 1, 2, 3, excellent.

176
00:08:46.394 --> 00:08:54.230
There it is, and
it’s output will be stored into results.

177
00:08:54.230 --> 00:08:57.901
Let's create the new?

178
00:08:57.901 --> 00:08:58.484
&gt;&gt; Sam: Execution context.

179
00:08:58.484 --> 00:09:01.781
&gt;&gt; Will Sentance: Execution context,
[LAUGH] well, already,

180
00:09:01.781 --> 00:09:05.173
Mike's voice has become execution context.

181
00:09:05.173 --> 00:09:10.626
[LAUGH] Here it is,
let's go into it, there it is.

182
00:09:10.626 --> 00:09:13.821
And in local memory,

183
00:09:13.821 --> 00:09:18.797
what's the first thing we have?

184
00:09:18.797 --> 00:09:22.307
And try and be as precise as possible
with the technical communication here.

185
00:09:22.307 --> 00:09:25.330
Try and be as precise as possible,
David, you're up.

186
00:09:25.330 --> 00:09:28.253
We have what in our local memory, David?

187
00:09:28.253 --> 00:09:32.705
&gt;&gt; David: We have an array,
which is the parameter.

188
00:09:34.522 --> 00:09:35.964
&gt;&gt; Will Sentance: Nope,
giggling, [SOUND] be supportive.

189
00:09:35.964 --> 00:09:38.026
&gt;&gt; David: Argument.

190
00:09:38.026 --> 00:09:39.712
&gt;&gt; Will Sentance: Argument,
excellent, David.

191
00:09:39.712 --> 00:09:41.869
Exactly, thank you, David, spot on.

192
00:09:41.869 --> 00:09:45.387
And moving this one on as well,
and our parameter, David, is?

193
00:09:45.387 --> 00:09:45.924
&gt;&gt; David: Array.

194
00:09:45.924 --> 00:09:48.674
&gt;&gt; Will Sentance: Array, that's our
placeholder name in which we're gonna

195
00:09:48.674 --> 00:09:50.106
fill in with the actual value.

196
00:09:50.106 --> 00:09:50.988
Very nice from David.

197
00:09:50.988 --> 00:09:51.877
Thank you, David.

198
00:09:51.877 --> 00:09:53.532
There it is, array.

199
00:09:53.532 --> 00:09:55.654
Next line, Jasmine?

200
00:09:55.654 --> 00:09:56.975
&gt;&gt; Jasmine: We're declaring output.

201
00:09:56.975 --> 00:10:00.238
&gt;&gt; Will Sentance: Yeah, exactly,
we added the body of the function,

202
00:10:00.238 --> 00:10:02.102
now output is an empty array.

203
00:10:02.102 --> 00:10:07.020
Let's use that output array, let's fill it
in with each element from the input array,

204
00:10:07.020 --> 00:10:08.091
this time halved.

205
00:10:08.091 --> 00:10:13.980
Okay, for loop, we're gonna
diagram it on this side here so

206
00:10:13.980 --> 00:10:20.919
it's easier to work with array 1,
2, 3, output is an empty array.

207
00:10:20.919 --> 00:10:23.046
There it is very nice.

208
00:10:23.046 --> 00:10:29.052
And, Ana, first time you get
the body before your i's value is?

209
00:10:29.052 --> 00:10:31.444
&gt;&gt; Anna: Zero.
&gt;&gt; Will Sentance: Zero, array position,

210
00:10:31.444 --> 00:10:32.212
zero is?

211
00:10:32.212 --> 00:10:32.837
&gt;&gt; Anna: One.

212
00:10:32.837 --> 00:10:35.377
&gt;&gt; Will Sentance: One,
one divided by two is?

213
00:10:35.377 --> 00:10:36.864
&gt;&gt; Anna: 0.5.

214
00:10:36.864 --> 00:10:41.155
&gt;&gt; Will Sentance: Not 0.5, yeah, I'm going
to spread that British pronunciation,

215
00:10:41.155 --> 00:10:41.948
not 0.5.

216
00:10:44.131 --> 00:10:46.677
&gt;&gt; Will Sentance: I can't tell you this,
I can't tell the same joke at [INAUDIBLE].

217
00:10:46.677 --> 00:10:50.324
And not 0.5, and do what with it, Anna?

218
00:10:50.324 --> 00:10:51.579
Do what with the 0.5?

219
00:10:54.620 --> 00:10:55.650
&gt;&gt; Anna: Push it onto output.

220
00:10:55.650 --> 00:10:56.820
&gt;&gt; Will Sentance: Push it into output,
excellent.

221
00:10:56.820 --> 00:10:58.230
Thank you, Anna, there it is.

222
00:10:59.290 --> 00:11:03.920
And now, i's value is what, Jasmine?

223
00:11:03.920 --> 00:11:04.670
&gt;&gt; Anna: One.

224
00:11:04.670 --> 00:11:06.540
&gt;&gt; Will Sentance: I's value is one,
array position one is?

225
00:11:06.540 --> 00:11:08.400
&gt;&gt; Anna: Two.
&gt;&gt; Will Sentance: Two, two by two is?

226
00:11:08.400 --> 00:11:10.100
&gt;&gt; Anna: One.
&gt;&gt; Will Sentance: One, we do what with it?

227
00:11:10.100 --> 00:11:11.402
&gt;&gt; Anna: Push it onto the-
&gt;&gt; Will Sentance: Okay and

228
00:11:11.402 --> 00:11:12.841
then the final 1.5.

229
00:11:12.841 --> 00:11:16.221
There it is, 0.5, 1, 1.5.

230
00:11:16.221 --> 00:11:22.458
We grab that array, the value of output,
and we return it out to where, Jasmine?

231
00:11:22.458 --> 00:11:23.820
&gt;&gt; Jasmine: Result.
&gt;&gt; Will Sentance: Into result, excellent,

232
00:11:23.820 --> 00:11:24.576
Jasmine, thank you.

233
00:11:26.709 --> 00:11:27.323
&gt;&gt; Will Sentance: There it is.

