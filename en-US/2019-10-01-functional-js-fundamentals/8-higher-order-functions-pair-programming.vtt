WEBVTT

1
00:00:00.000 --> 00:00:04.667
&gt;&gt; Will Sentance: All right folks, so at
this point, we're gonna take a break for

2
00:00:04.667 --> 00:00:09.252
pair programming to come,
many more higher order functions,

3
00:00:09.252 --> 00:00:12.539
linking them up the absolute
core part five,

4
00:00:12.539 --> 00:00:17.816
the absolute core of functional
programming, function composition,

5
00:00:17.816 --> 00:00:22.423
then later we're gonna go into
closure function decoration.

6
00:00:22.423 --> 00:00:27.609
And all to come, the most advanced
pieces POS application and

7
00:00:27.609 --> 00:00:32.794
carrying, but for now,
we're gonna work through a series of

8
00:00:32.794 --> 00:00:38.097
pair program coding challenges,
on higher order functions.

9
00:00:38.097 --> 00:00:42.431
And I think I'm gonna pair you up
honestly by who you're sitting next to

10
00:00:42.431 --> 00:00:45.188
as a relatively shared
level of experience.

11
00:00:45.188 --> 00:00:50.828
So, folk on line will hopefully
be able to take these challenges,

12
00:00:50.828 --> 00:00:55.372
but I have a pair programming
set of challenges.

13
00:00:55.372 --> 00:01:00.148
I'm gonna write it on the whiteboard here,
I don't know if I'm allowed to do this,

14
00:01:00.148 --> 00:01:04.924
but here it is, CS bin, and I'm gonna tell
you about how to pair program the second,

15
00:01:04.924 --> 00:01:07.105
and I think it's called functional.

16
00:01:07.105 --> 00:01:10.382
Have a look at that,
maybe Mark's gonna look for that,

17
00:01:10.382 --> 00:01:14.429
I think it's called functional,
and it's a series of challenges,

18
00:01:14.429 --> 00:01:18.895
which we're gonna work through today,
and it's here that you're going to

19
00:01:18.895 --> 00:01:23.252
actually grow as an engineer, watching
me talk is a quarter of the story.

20
00:01:23.252 --> 00:01:24.707
It's when you actually
test it out yourself,

21
00:01:24.707 --> 00:01:27.209
when you actually hit a block and have to
use the underlying mental model you've

22
00:01:27.209 --> 00:01:29.694
hopefully built, hopefully you've
built an underlying mental model here.

23
00:01:29.694 --> 00:01:34.885
And that should enable you that is the
point of hard parts to build an underlying

24
00:01:34.885 --> 00:01:39.384
mental model, to enable you to
tackle any new challenge yourself.

25
00:01:39.384 --> 00:01:44.568
Here is the problem, you work solo,
a couple things happen, one, when you

26
00:01:44.568 --> 00:01:50.337
hit a block, we're very tempted to step
away and do anything else, it's amazing.

27
00:01:50.337 --> 00:01:54.508
It is amazing, cuz I've done it a few
times where I've not stepped away,

28
00:01:54.508 --> 00:01:57.078
I try to force myself
through in that moment.

29
00:01:57.078 --> 00:01:58.671
Cuz I know that it's the one
I most wanna step away,

30
00:01:58.671 --> 00:02:00.562
that I had the biggest breakthrough
in the next few seconds,

31
00:02:00.562 --> 00:02:01.883
literally the next few minutes usually.

32
00:02:01.883 --> 00:02:05.989
It's kind of insane like when I'm
preparing talks, and wrestling how to and

33
00:02:05.989 --> 00:02:09.085
I wanna step away,
I want anything else, I want my phone,

34
00:02:09.085 --> 00:02:11.547
thrown on the other side
of the room of course,

35
00:02:11.547 --> 00:02:15.168
my Internets turned off sort of stuff,
but still I wanna step away.

36
00:02:15.168 --> 00:02:19.913
When you go to pair programming partner,
you can't step away, you've gotta partner

37
00:02:19.913 --> 00:02:23.820
in crime so you can do the hard
challenges, and that's where you grow.

38
00:02:23.820 --> 00:02:26.562
What else is so
great about pair programming?

39
00:02:26.562 --> 00:02:29.030
Technical communication, with a pair,

40
00:02:29.030 --> 00:02:33.962
what we actually have to do suppose we had
Jasmine and Seth, I presume that sort of,

41
00:02:33.962 --> 00:02:37.781
so Jasmine and Seth,
let's suppose Jasmine is our navigator.

42
00:02:37.781 --> 00:02:42.357
So there's two roles, the navigation and
the driver, Jasmine is going to give Seth

43
00:02:42.357 --> 00:02:46.871
an overall strategy, to approach each
challenge, so she's gonna say things like

44
00:02:46.871 --> 00:02:51.340
okay, Seth, let's start off here by
declaring a function, we'll call it map.

45
00:02:51.340 --> 00:02:56.005
Let's have it, it says it's gonna take a
parameter of an array, take a parameter of

46
00:02:56.005 --> 00:02:59.839
an array, and say Seth,
let's take a function of callback, okay?

47
00:02:59.839 --> 00:03:02.627
Let's go check what we know, a callback
is always a function definition,

48
00:03:02.627 --> 00:03:04.410
okay let's have a take
a function definition.

49
00:03:04.410 --> 00:03:09.288
Let's test it out before we start invoking
it by actually calling that with those two

50
00:03:09.288 --> 00:03:14.097
arguments, and see what the return value
is, and it's undefined of course okay,

51
00:03:14.097 --> 00:03:18.494
and now Seth's job is to turn her
virtualization in more pseudo code terms,

52
00:03:18.494 --> 00:03:20.649
into actual code with the keyboard.

53
00:03:20.649 --> 00:03:25.474
Her technical communication better
be on point because Jasmine is not

54
00:03:25.474 --> 00:03:28.497
allowed to say,
Seth what I meant was this,

55
00:03:28.497 --> 00:03:32.766
get your hands on the keyboard and
start typing it out for him.

56
00:03:32.766 --> 00:03:37.397
Her job is that what ever happens it's her
responsibility to be able to communicate

57
00:03:37.397 --> 00:03:41.447
with such precision, that Seth can't
fail but to convert it into code.

58
00:03:41.447 --> 00:03:46.550
And by the way, Seth, so your technical
communication goes up immensely.

59
00:03:46.550 --> 00:03:50.269
That's why I put so much pressure on you
all to say things like yes, the one on

60
00:03:50.269 --> 00:03:54.282
the right hand side, we were gonna invoke
the function, and its returned value is

61
00:03:54.282 --> 00:03:58.332
gonna be assigned on the left hand side,
as opposed to just saying multiply by 2.

62
00:03:58.332 --> 00:04:01.543
No no, that's call multiply by
two with the argument of three,

63
00:04:01.543 --> 00:04:05.417
right it's very precise and let's say
I've actually converted into code.

64
00:04:05.417 --> 00:04:10.243
And Seth by the way even if he feels like
Jasmine's navigating him down the wrong

65
00:04:10.243 --> 00:04:15.216
path, he doesn't correct her, because
all the time she's actually right, and

66
00:04:15.216 --> 00:04:19.396
he learns a new approach to solving
the problem, but half time yeah so

67
00:04:19.396 --> 00:04:23.464
maybe she's wrong, but
you now wanna embrace getting the error.

68
00:04:23.464 --> 00:04:29.197
You wanna press Run, Seth wants to
press Run, Jasmine wants to press Run,

69
00:04:29.197 --> 00:04:33.383
see an error, and
now Seth knows what the error is, and

70
00:04:33.383 --> 00:04:37.296
that feels pretty good
because what a mean way, but

71
00:04:37.296 --> 00:04:42.143
[LAUGH] rather because now errors
are no longer a mystery to him.

72
00:04:42.143 --> 00:04:48.121
Now that error that he gets a witness
his partner puzzling over an error,

73
00:04:48.121 --> 00:04:53.815
and he knows ha got it, that error is
a tool to help me debug this code.

74
00:04:53.815 --> 00:04:58.521
Because I kind of know what it means, when
it says unexpected token or function is

75
00:04:58.521 --> 00:05:02.813
undefined, he knows why, and now that
error is no longer this black box,

76
00:05:02.813 --> 00:05:06.713
it's a black box but
he's sitting inside of it, super powerful.

