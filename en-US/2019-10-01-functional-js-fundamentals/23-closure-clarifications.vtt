WEBVTT

1
00:00:00.000 --> 00:00:01.948
&gt;&gt; Will Sentance: I'm gonna
bring it up as a little bonus.

2
00:00:01.948 --> 00:00:03.822
Here's what actually happens.

3
00:00:03.822 --> 00:00:09.319
There is actually, cuz Virginia asked,
hold on, do we pass out the code?

4
00:00:09.319 --> 00:00:12.303
What does it mean to pass out
the code from one function or other?

5
00:00:12.303 --> 00:00:14.037
Here's what it actually means.

6
00:00:14.037 --> 00:00:16.260
And I'm only giving this to
you as a little bonus, people.

7
00:00:16.260 --> 00:00:20.558
Actually, in JavaScript,
functions, objects and arrays,

8
00:00:20.558 --> 00:00:26.165
anything that's not like a number,
string, Boolean, undefined, whatever.

9
00:00:26.165 --> 00:00:29.527
They ain't stored directly
up here in our very,

10
00:00:29.527 --> 00:00:32.725
very tightly restricted
direct memory here.

11
00:00:32.725 --> 00:00:38.011
Instead, they're stored in, and
I'm gonna keep this somewhat simplified.

12
00:00:38.011 --> 00:00:40.178
Because in the end, we don't actually
have to interface with this.

13
00:00:40.178 --> 00:00:42.352
We don't even necessarily
need to know this, but

14
00:00:42.352 --> 00:00:45.997
it can give another way of looking at this
that's gonna be clearer for some people.

15
00:00:45.997 --> 00:00:50.349
There's actually a special, very flexible,
messy kind of put anything in there,

16
00:00:50.349 --> 00:00:53.843
store of memory called the Heap,
behind the scenes in JavaScript,

17
00:00:53.843 --> 00:00:55.576
in most programming languages.

18
00:00:55.576 --> 00:01:00.926
And into here, it's actually,
whenever we declare a function like add3,

19
00:01:00.926 --> 00:01:04.813
it ain't stored directly in
this little local memory.

20
00:01:04.813 --> 00:01:07.692
Instead, it's stored
down here in the Heap.

21
00:01:07.692 --> 00:01:10.140
So our add3 function,
as soon as we declare it,

22
00:01:10.140 --> 00:01:11.766
we actually store it down here.

23
00:01:11.766 --> 00:01:13.330
This isn't global memory,

24
00:01:13.330 --> 00:01:19.541
this is a totally separate,
&gt;&gt; Will Sentance: A totally

25
00:01:19.541 --> 00:01:21.457
separate store of memory down here.

26
00:01:21.457 --> 00:01:23.714
There's our add3 function.

27
00:01:23.714 --> 00:01:27.929
We don't actually directly store
the function here in the local memory.

28
00:01:27.929 --> 00:01:32.079
Instead we store,
think of it as an address like a zip code,

29
00:01:32.079 --> 00:01:36.893
I don't know, 10012,
to a position in the computer's memory

30
00:01:36.893 --> 00:01:40.379
down here where the function
is actually stored.

31
00:01:40.379 --> 00:01:43.712
This should start to give you a little
hint, Virginia, of your question.

32
00:01:43.712 --> 00:01:46.832
What actually happens
when I return out add3,

33
00:01:46.832 --> 00:01:50.349
I look up add3,
I don't grab the definitions code.

34
00:01:50.349 --> 00:01:55.652
I grab the link to the stored
version down here that I created

35
00:01:55.652 --> 00:02:00.650
when I executed functionCreator and
I return that out.

36
00:02:00.650 --> 00:02:04.347
So when I run generatedFunc,
I go, what am I meant to do?

37
00:02:04.347 --> 00:02:08.230
What is,
the function that was birthed as add3, but

38
00:02:08.230 --> 00:02:12.446
its label add3 was only one that
was inside functionCreator.

39
00:02:12.446 --> 00:02:15.794
The function's code was more permanent,
and that was stored in the Heap, but

40
00:02:15.794 --> 00:02:17.838
with a label that's not
very meaningful to us.

41
00:02:17.838 --> 00:02:20.386
And so we passed out the label,

42
00:02:20.386 --> 00:02:25.288
the thing that points to this
underlying stored function.

43
00:02:25.288 --> 00:02:26.913
Does that answer your question, Virginia?

44
00:02:26.913 --> 00:02:27.862
Do you wanna follow up to that?

45
00:02:27.862 --> 00:02:33.465
&gt;&gt; Virginia: So then, if I go and execute
functionCreator again with a new label,

46
00:02:33.465 --> 00:02:35.698
will it point to that same?

47
00:02:35.698 --> 00:02:36.229
&gt;&gt; Will Sentance: Absolutely not,
absolutely not.

48
00:02:36.229 --> 00:02:41.141
That's gonna run functionCreator again,
create a brand new local memory inside of

49
00:02:41.141 --> 00:02:45.151
it, you create a brand new counter
of 0 and a brand new add3 function

50
00:02:45.151 --> 00:02:49.817
which will be stored, I don't know,
10013, and a new copy of it, okay.

51
00:02:49.817 --> 00:02:51.765
&gt;&gt; Virginia: So
it'll be pointing to two different?

52
00:02:51.765 --> 00:02:53.319
&gt;&gt; Will Sentance: Absolutely.

53
00:02:53.319 --> 00:02:54.272
&gt;&gt; Virginia: Got it.
&gt;&gt; Will Sentance: Absolutely, so

54
00:02:54.272 --> 00:02:55.108
we didn't pass out.

55
00:02:55.108 --> 00:02:58.049
We did not return out
the full code of add3.

56
00:02:58.049 --> 00:03:01.053
I talk about that metaphorically,
when you grab all the code of add3 and

57
00:03:01.053 --> 00:03:02.341
store it into generatedFunc.

58
00:03:02.341 --> 00:03:07.277
Instead, we passed out a link to where
add3 was stored in this messy total memory

59
00:03:07.277 --> 00:03:08.303
of JavaScript.

60
00:03:08.303 --> 00:03:10.039
Unrelated to global,
it's not global memory.

61
00:03:10.039 --> 00:03:14.200
Cuz this is a hidden-behind-the-scenes
memory in which all arrays, objects, and

62
00:03:14.200 --> 00:03:17.053
functions ever declared,
they're all stored down here.

63
00:03:17.053 --> 00:03:20.519
And when we store up in
the local memory and

64
00:03:20.519 --> 00:03:24.680
even in the global memory
is a link to this single,

65
00:03:24.680 --> 00:03:29.948
shared store of, to this permanent
store of memory down here.

66
00:03:29.948 --> 00:03:30.848
No, not permanent,

67
00:03:30.848 --> 00:03:34.149
to this store of memory down here that
we don't get to interact with directly.

68
00:03:34.149 --> 00:03:38.923
And we just store links to those,
meaning we can pass those links around,

69
00:03:38.923 --> 00:03:42.476
still linking back to
the originally saved function.

70
00:03:42.476 --> 00:03:43.862
I don't always bring that up.

71
00:03:43.862 --> 00:03:45.498
Hope that's a nice little bonus for
people.

72
00:03:45.498 --> 00:03:48.615
If that didn't make any sense,
I don't think it matters.

73
00:03:48.615 --> 00:03:53.719
Just think of always we return out of
a function, another function and all of

74
00:03:53.719 --> 00:03:59.561
its code, without its name, and store it
into the new label globally generatedFunc.

75
00:03:59.561 --> 00:04:04.422
But now the question is, and people, we're
starting to get to why we might do this.

76
00:04:04.422 --> 00:04:09.094
But why would I save a function inside
another function only then to not use it

77
00:04:09.094 --> 00:04:13.085
inside that function and
instead return it out?

78
00:04:13.085 --> 00:04:14.963
&gt;&gt; Will Sentance: We're gonna get,
delete that,

79
00:04:14.963 --> 00:04:18.986
we're gonna get [LAUGH] we're gonna
get the most powerful, to be fair,

80
00:04:18.986 --> 00:04:22.287
that's just the title of this
whole section so it's not.

81
00:04:22.287 --> 00:04:24.509
[LAUGH] I sort of gave
it away from the start.

82
00:04:24.509 --> 00:04:28.303
We're gonna get super powers for
this returned out function.

83
00:04:28.303 --> 00:04:30.934
So this returned out baby
function is gonna get,

84
00:04:30.934 --> 00:04:34.279
the most powerful property in JavaScript,
without a doubt.

85
00:04:34.279 --> 00:04:38.863
And the one that infiltrates everything,
way more than just functional programming.

86
00:04:38.863 --> 00:04:42.190
This technique dominates
asynchronous JavaScript and

87
00:04:42.190 --> 00:04:45.805
the persistence of states
around asynchronous callbacks.

88
00:04:45.805 --> 00:04:49.279
It dominates iterators,
generators are just as behind the scenes.

89
00:04:49.279 --> 00:04:52.167
Async or
they're all just this behind the scenes.

90
00:04:52.167 --> 00:04:55.576
It is the most significant
concept in JavaScript.

91
00:04:55.576 --> 00:04:57.072
It is my favorite.

92
00:04:57.072 --> 00:04:59.829
Its only more important concept
out there is the event loop.

93
00:04:59.829 --> 00:05:04.313
This concept otherwise is the most
dominant thing in all of JavaScript and

94
00:05:04.313 --> 00:05:08.739
it's honestly the most misunderstood,
but it dominates everything.

