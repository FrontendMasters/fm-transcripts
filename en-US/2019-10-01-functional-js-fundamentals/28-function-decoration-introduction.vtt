WEBVTT

1
00:00:00.730 --> 00:00:02.680
&gt;&gt; Will Sentance: Function decoration.

2
00:00:02.680 --> 00:00:07.560
Now we convert our functions more
easily to make them suit our task.

3
00:00:07.560 --> 00:00:11.965
If we're saving little blocks of code,
little functions to be used again and

4
00:00:11.965 --> 00:00:16.302
again, little single tiny functions
to be used again and again, ideally,

5
00:00:16.302 --> 00:00:20.890
I don't want to have to rewrite that
code if they're slightly different.

6
00:00:20.890 --> 00:00:23.530
Now, there's one thing I can do,
write higher order functions.

7
00:00:23.530 --> 00:00:24.750
I can have my function.

8
00:00:24.750 --> 00:00:26.480
Don't need to rewrite it, I just edit it.

9
00:00:26.480 --> 00:00:29.140
When I run it, I insert some specifics.

10
00:00:29.140 --> 00:00:30.912
The problem is I've had to
have left a placeholder.

11
00:00:30.912 --> 00:00:33.967
Remember, higher order functions
like copy, write, manipulate or map,

12
00:00:33.967 --> 00:00:35.364
I'd leave a little placeholder.

13
00:00:35.364 --> 00:00:42.190
When I run map, I specify exactly how I
want to hit each element of the array.

14
00:00:42.190 --> 00:00:45.640
But sometimes I want to edit functions
where I haven't left placeholders.

15
00:00:45.640 --> 00:00:48.560
I wanna retroactively give
them new functionality.

16
00:00:50.055 --> 00:00:54.875
Problem with that people is, can I edit
a function's body after I've saved it?

17
00:00:54.875 --> 00:00:56.770
Everyone together?

18
00:00:56.770 --> 00:00:59.777
&gt;&gt; No
&gt;&gt; Will Sentance: No, I can't, exactly.

19
00:00:59.777 --> 00:01:02.770
Once a function's been saved,
I can't go in.

20
00:01:02.770 --> 00:01:06.791
Arrays, individual elements in an array,
I can add or remove stuff.

21
00:01:06.791 --> 00:01:11.258
Function code, once it's saved,
I can't go back in there and

22
00:01:11.258 --> 00:01:13.460
interact with it, it's set.

23
00:01:13.460 --> 00:01:18.280
So we want to be able to edit functions
but not rewrite them from scratch.

24
00:01:19.320 --> 00:01:23.530
So instead, we're gonna use a technique
known as function decoration.

25
00:01:24.530 --> 00:01:29.190
It's going to appear to edit
functionality that's being saved,

26
00:01:29.190 --> 00:01:32.260
it's going to appear to do so.

27
00:01:32.260 --> 00:01:35.216
It's actually not going to, though.

28
00:01:35.216 --> 00:01:40.244
Instead, it's going to
create new functions or

29
00:01:40.244 --> 00:01:44.903
a new function,
inside which the function we

30
00:01:44.903 --> 00:01:49.820
want to edit is going to
be inserted in some way.

31
00:01:49.820 --> 00:01:52.720
Such that when we run the new function,
it's going to appear to be

32
00:01:52.720 --> 00:01:55.532
running our function and
with a slightly different behavior.

33
00:01:55.532 --> 00:01:57.399
It's going to appear to
have edited our function.

34
00:01:57.399 --> 00:02:00.511
But actually, we've created a new
function where we're running the function

35
00:02:00.511 --> 00:02:02.720
inside of it that we want to edit.

36
00:02:02.720 --> 00:02:06.750
And so that new function will look like
it's the original function but edited.

37
00:02:06.750 --> 00:02:07.432
Here it is.

38
00:02:07.432 --> 00:02:11.104
So particularly if you want to add
a permanent memory, for example,

39
00:02:11.104 --> 00:02:12.954
to an existing function we saved.

40
00:02:12.954 --> 00:02:16.346
Am I able to add the feature of
a permanent memory, a backpack,

41
00:02:16.346 --> 00:02:18.397
to an existing function I've saved.

42
00:02:18.397 --> 00:02:22.563
If I've saved a function, am I able to
give it a backpack after I've saved it?

43
00:02:22.563 --> 00:02:24.890
Absolutely not.

44
00:02:24.890 --> 00:02:28.592
The only way is for me to get it is if I
saved it inside the running of another

45
00:02:28.592 --> 00:02:30.194
function and returned it out.

46
00:02:30.194 --> 00:02:35.345
So if I didn't do that,
how can I give it a permanent memory?

47
00:02:35.345 --> 00:02:37.635
Well, there is a way.

48
00:02:37.635 --> 00:02:39.622
It's called, [INAUDIBLE] use it here.

49
00:02:39.622 --> 00:02:45.659
So for example, if I want to edit
my function, here's a classic one.

50
00:02:45.659 --> 00:02:48.815
Suppose I want to edit my function,

51
00:02:48.815 --> 00:02:53.770
let's say multiply by 2,
to limit it to run only once.

52
00:02:53.770 --> 00:02:57.440
So I can only run it once and
from now on it's fixed to only run once.

53
00:02:57.440 --> 00:03:00.648
I run it one time, runs, no,
problem, multiply by two,

54
00:03:00.648 --> 00:03:02.162
let's say we give it a ten.

55
00:03:02.162 --> 00:03:04.074
Run it again, it says, sorry,
you've already run me.

56
00:03:04.074 --> 00:03:05.097
You can't run me again.

57
00:03:05.097 --> 00:03:08.720
This is a technique you wanna
use all the time in programming.

58
00:03:08.720 --> 00:03:11.510
Often we wanna limit a function from being
called, even in a game, for example,

59
00:03:11.510 --> 00:03:12.136
tic-tac-toe.

60
00:03:12.136 --> 00:03:15.635
You wanna limit a function to be
called only one time on a given cell.

61
00:03:15.635 --> 00:03:19.870
You don't wanna be able to turn it from
being a 0 to an X and then back to an X.

62
00:03:19.870 --> 00:03:21.180
You wanna limit it to run one time.

63
00:03:22.690 --> 00:03:25.790
Well, I can't edit my
multiply by two function and

64
00:03:25.790 --> 00:03:29.220
give it a backpack to say you can
only run it once, once it's saved.

65
00:03:30.390 --> 00:03:34.895
So instead I'm gonna do a technique
called function decoration.

66
00:03:34.895 --> 00:03:39.672
I'm going to use oncify a function that's

67
00:03:39.672 --> 00:03:44.581
going to appear to convert
my multiply by two

68
00:03:44.581 --> 00:03:49.890
function saved there into
a version of multiply

69
00:03:49.890 --> 00:03:54.287
by two that is limited to run only once.

70
00:03:54.287 --> 00:03:56.848
But it's gonna be a big fraud.

71
00:03:56.848 --> 00:04:00.416
In reality, inside of oncify,

72
00:04:00.416 --> 00:04:05.182
I'm going to create a brand new function.

73
00:04:05.182 --> 00:04:08.627
Seth, will my brand new function
inside of onceify have a backpack?

74
00:04:08.627 --> 00:04:09.252
&gt;&gt; Seth: Yes.

75
00:04:09.252 --> 00:04:10.273
&gt;&gt; Will Sentance: Yes, it will.

76
00:04:10.273 --> 00:04:11.802
I'm going to return that out.

77
00:04:11.802 --> 00:04:14.863
It's going to be called inner and
stored in oncify multiply by two.

78
00:04:14.863 --> 00:04:18.184
And oncify multiple by two is going to
behave just like multiple by two at least

79
00:04:18.184 --> 00:04:19.064
the the first time.

80
00:04:19.064 --> 00:04:23.224
But in reality,
it ain't behaving like multiply by two.

81
00:04:23.224 --> 00:04:28.219
In reality, inside of it,
it's going to run from its

82
00:04:28.219 --> 00:04:33.658
backpack the multiply by two
function under the condition

83
00:04:33.658 --> 00:04:39.890
that upon checking the backpack,
a counter is still zero.

84
00:04:39.890 --> 00:04:42.614
And then it's gonna increment
a counter to say now it's one.

85
00:04:42.614 --> 00:04:46.928
And if we run oncify multiple by two,
formerly known as inner again, it's going

86
00:04:46.928 --> 00:04:50.944
to say sorry, counter is now one in
the backpack, you can't run me again.

87
00:04:50.944 --> 00:04:55.452
But it's gonna be really
interesting interweaving here.

88
00:04:55.452 --> 00:04:56.954
So I said we're looking for another way.

89
00:04:56.954 --> 00:05:00.610
We're gonna map this out in full,
but let's look at another way.

90
00:05:00.610 --> 00:05:05.343
Our oncified multiply by two is
going to be the inner function that

91
00:05:05.343 --> 00:05:06.899
comes out of oncify.

92
00:05:08.280 --> 00:05:11.060
It's going to appear to
edit multiply by two.

93
00:05:11.060 --> 00:05:11.710
It ainâ€™t.

94
00:05:11.710 --> 00:05:12.920
You can't edit a function.

95
00:05:12.920 --> 00:05:16.115
It's gonna appear to give multiply by two,
you know,

96
00:05:16.115 --> 00:05:20.005
we could even actually have oncify
multiply by two be given a name,

97
00:05:20.005 --> 00:05:22.930
I don't know,
multiply by two once or whatever.

98
00:05:24.490 --> 00:05:27.950
It's gonna appear to edit multiply by two,
it's not.

99
00:05:27.950 --> 00:05:30.008
In reality, what is it doing?

100
00:05:30.008 --> 00:05:34.444
It's creating a new function that
does have access to a backpack.

101
00:05:34.444 --> 00:05:37.470
We need a backpack to be able to
limit a function to run only once.

102
00:05:37.470 --> 00:05:39.389
I should have stressed that.

103
00:05:39.389 --> 00:05:41.041
A function to run once and

104
00:05:41.041 --> 00:05:46.130
limited to only run once needs to
remember it's previously been run.

105
00:05:46.130 --> 00:05:48.690
Otherwise, how can it be
limited to run only once?

106
00:05:48.690 --> 00:05:50.420
A normal function doesn't
remember its previous running.

107
00:05:50.420 --> 00:05:52.180
So it doesn't know it's been run before.

108
00:05:52.180 --> 00:05:54.990
So we need our function
to have a backpack.

109
00:05:54.990 --> 00:05:57.170
And this is exactly
what's gonna happen here.

110
00:05:57.170 --> 00:06:00.189
But we can't give multiply
by two a backpack later.

111
00:06:00.189 --> 00:06:02.380
So we're instead going to decorate it.

112
00:06:02.380 --> 00:06:07.475
Which in the land of functional
programming means creating a brand new

113
00:06:07.475 --> 00:06:12.568
function called inner inside of oncify,
inside of which we're going

114
00:06:12.568 --> 00:06:17.833
to check a counter, which is going to
have access to a persistent counter

115
00:06:17.833 --> 00:06:23.657
in the backpack after the first running
of inner notice oncify multiple by two.

116
00:06:23.657 --> 00:06:27.291
We're going to not be
able to run convert me,

117
00:06:27.291 --> 00:06:30.746
which is gonna be multiply by two, again.

118
00:06:30.746 --> 00:06:33.537
This, people, is using closure,

119
00:06:33.537 --> 00:06:38.005
the principle of giving
functions permanent memories,

120
00:06:38.005 --> 00:06:42.938
to supercharge our functions,
to add new functionality to our

121
00:06:42.938 --> 00:06:47.609
function multiply by two once
it's been initially saved.

122
00:06:47.609 --> 00:06:52.040
And it turns out to be a core
principle of functional programming.

123
00:06:52.040 --> 00:06:57.143
Beyond this, folk, once you realize
that you can have your function,

124
00:06:57.143 --> 00:07:03.188
be pseudo-edited by building a brand new
function inside of which it's going to run

125
00:07:03.188 --> 00:07:09.960
the function that's passed to the function
oncify that produces a brand new function.

126
00:07:09.960 --> 00:07:13.330
Once you realize that,
you may not just wanna store in

127
00:07:14.550 --> 00:07:18.270
the backpack a counter, for example.

128
00:07:18.270 --> 00:07:25.750
You may actually want to store an input
for a function that requires two inputs.

129
00:07:26.750 --> 00:07:30.577
Knock that one out, and
now the function only requires one input.

130
00:07:30.577 --> 00:07:34.467
Which might start finally,
to solve Seth's worry.

131
00:07:34.467 --> 00:07:38.500
That when I list all functions, when my
dream of functional programming is listing

132
00:07:38.500 --> 00:07:42.318
off my functions, do this one, then
this one, then this one automatically.

133
00:07:42.318 --> 00:07:43.910
With point free style.

134
00:07:43.910 --> 00:07:46.826
No reference to the running of them,
no putting the parens on and

135
00:07:46.826 --> 00:07:48.940
saying what to take as the input.

136
00:07:48.940 --> 00:07:52.528
So if my function that I'm taking into my
list of functions to run one after another

137
00:07:52.528 --> 00:07:55.700
after another requires two inputs,
it's gonna break my whole setup.

138
00:07:55.700 --> 00:07:56.740
We'll see all that in a moment.

139
00:07:56.740 --> 00:07:58.896
For now, here we go, people.

140
00:07:58.896 --> 00:08:03.772
We are going to build a new,
apparent, a pretend multiply by two

141
00:08:03.772 --> 00:08:09.281
function that works just like multiply
by two, but actually is a totally

142
00:08:09.281 --> 00:08:14.909
different function that happens to
run multiply by two inside of itself.

143
00:08:14.909 --> 00:08:19.751
And we're gonna keep that multiply by
two function inside oncify multiply by

144
00:08:19.751 --> 00:08:21.550
two inside of its backpack.

