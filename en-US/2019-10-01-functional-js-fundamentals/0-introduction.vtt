WEBVTT

1
00:00:00.000 --> 00:00:02.932
&gt;&gt; Will Sentance: Hello.

2
00:00:02.932 --> 00:00:03.490
Welcome.

3
00:00:03.490 --> 00:00:04.347
I'm Will Sentance.

4
00:00:04.347 --> 00:00:10.621
I run Codesmith, a coding school online,
in Los Angeles and in New York City.

5
00:00:10.621 --> 00:00:16.324
And today I'm gonna be talking to
you about functional programming,

6
00:00:16.324 --> 00:00:22.430
an ever increasingly popular paradigm for
structuring our complex code.

7
00:00:22.430 --> 00:00:27.000
We're gonna go under the hood of some
of the fundamentals of functional

8
00:00:27.000 --> 00:00:27.998
programming.

9
00:00:27.998 --> 00:00:31.672
To give you the ability
to take these techniques,

10
00:00:31.672 --> 00:00:35.172
apply them in ways in your
professional code and

11
00:00:35.172 --> 00:00:40.332
combine them up with the other
techniques you use to write more clean,

12
00:00:40.332 --> 00:00:43.853
more readable and
more debuggable code bases.

13
00:00:43.853 --> 00:00:45.812
Here we go.

14
00:00:45.812 --> 00:00:48.564
Supposed we have a quiz application.

15
00:00:48.564 --> 00:00:54.072
We have users saved in it,
we have the users data saved in it,

16
00:00:54.072 --> 00:00:58.716
their scores, their names, their link,

17
00:00:58.716 --> 00:01:02.289
etc., we have quiz questions saved.

18
00:01:02.289 --> 00:01:06.582
And then we run functionality
on that saved data.

19
00:01:06.582 --> 00:01:12.904
For example, increasing your users score,
pretending to a user's name,

20
00:01:12.904 --> 00:01:18.334
a term indicating they are a user,
upper cases, a user's name,

21
00:01:18.334 --> 00:01:22.605
proper case all these tasks
we wanna do on our data.

22
00:01:22.605 --> 00:01:27.513
That sounds fine, except when
we building a full application.

23
00:01:27.513 --> 00:01:31.994
We have thousands and
thousands of lines all changing that data.

24
00:01:31.994 --> 00:01:34.170
This line changes the data this, and

25
00:01:34.170 --> 00:01:37.688
that data is a very Available
to all our other lines of code.

26
00:01:37.688 --> 00:01:42.077
Any change I make is high
risk to affect the rest of

27
00:01:42.077 --> 00:01:46.798
my code base my list of
instructions to my computer.

28
00:01:46.798 --> 00:01:49.320
This is untenable, certainly at scale.

29
00:01:49.320 --> 00:01:51.640
What is the answer?

30
00:01:51.640 --> 00:01:55.349
Well, the answer is always been functions.

31
00:01:55.349 --> 00:01:58.821
Functions allow us to
compartmentalize our code,

32
00:01:58.821 --> 00:02:02.291
take the 10 lines of code
that do one task and say,

33
00:02:02.291 --> 00:02:06.894
these 10 lines within them,
they can only affect each other, and

34
00:02:06.894 --> 00:02:12.003
actually create a little mini store of
data just for inside that function.

35
00:02:12.003 --> 00:02:16.304
So that when you run that code, you know
that it's only consequence hopefully is

36
00:02:16.304 --> 00:02:18.655
gonna be other lines within that function.

37
00:02:18.655 --> 00:02:23.948
But here's the problem with that,
even with a ten-line function,

38
00:02:23.948 --> 00:02:27.150
those instructions are pretty complex.

39
00:02:27.150 --> 00:02:29.913
In terms of the consequence
they can have within ten lines,

40
00:02:29.913 --> 00:02:32.468
certainly with a professional
style of writing code.

41
00:02:32.468 --> 00:02:36.246
And they're still written in
the style to instruct the computer.

42
00:02:36.246 --> 00:02:40.382
So, it is imperative start is that
how computer you're gonna do this?

43
00:02:40.382 --> 00:02:41.750
Not the declarative style.

44
00:02:41.750 --> 00:02:46.297
The nice human readable human
style of do this English or

45
00:02:46.297 --> 00:02:50.371
the language style of do this,
do this, do this.

46
00:02:50.371 --> 00:02:52.681
And by the way, when we run a function.

47
00:02:52.681 --> 00:02:56.916
We're still at risk of affecting
our global store of data,

48
00:02:56.916 --> 00:03:01.927
that is all the rest of our code via
what's known as global variables.

49
00:03:01.927 --> 00:03:06.589
To the point that
functions as we know them,

50
00:03:06.589 --> 00:03:11.634
may well not be enough for
a scalable code base.

51
00:03:11.634 --> 00:03:16.851
Imagine, If we could structure
our code into individual

52
00:03:16.851 --> 00:03:24.362
units that are small enough that each of
them every single line is self contained.

53
00:03:24.362 --> 00:03:26.266
As imagine that individual lines only
thing that affects it would be stated

54
00:03:26.266 --> 00:03:27.060
right on that line as an input.

55
00:03:27.060 --> 00:03:32.206
And the only consequence of it will be

56
00:03:32.206 --> 00:03:38.684
stated right on that line
as well as an output.

57
00:03:38.684 --> 00:03:44.280
And each of those lines will get a nice,
human readable label such

58
00:03:44.280 --> 00:03:49.798
that when we use them,
we'd know exactly what they're doing.

59
00:03:49.798 --> 00:03:53.761
If we could do that,
it would transform how we write code.

60
00:03:53.761 --> 00:04:00.091
But how, how do we do that?

61
00:04:00.091 --> 00:04:01.710
It's functional programming.

62
00:04:01.710 --> 00:04:06.886
We're gonna build up our application
from little tiny functions,

63
00:04:06.886 --> 00:04:08.807
little baby functions.

64
00:04:08.807 --> 00:04:14.532
But only do one or two small tasks, within
and give those little baby functions

65
00:04:14.532 --> 00:04:19.824
nice names that declare to the reader
what those functions do, within to

66
00:04:19.824 --> 00:04:25.484
ensure this little tiny functions have
no consequences except on that line.

67
00:04:25.484 --> 00:04:28.495
They have no dependency on other lines.

68
00:04:28.495 --> 00:04:33.284
And no other lines depend on them
besides the very next line to which

69
00:04:33.284 --> 00:04:38.773
the output is passed, and then we're
gonna have to rebuild up those lines.

70
00:04:38.773 --> 00:04:41.799
But I'm gonna rely on JavaScript rule to
also run our lines one after another.

71
00:04:41.799 --> 00:04:46.376
We're instead going to have to
couple of these lines of code each

72
00:04:46.376 --> 00:04:50.883
saved as little baby tiny functions
back up into larger tasks.

