WEBVTT

1
00:00:00.000 --> 00:00:05.362
&gt;&gt; Will Sentance: Let's keep moving
to what I consider the most important

2
00:00:05.362 --> 00:00:11.075
function in all of functional programming,
by a long way.

3
00:00:11.075 --> 00:00:15.582
And that is reduce, we're gonna
come back to this in a moment, but

4
00:00:15.582 --> 00:00:20.508
let's go now to the most powerful
function In functional programming.

5
00:00:20.508 --> 00:00:25.085
Possibly, the most versatile
function in all of programming.

6
00:00:25.085 --> 00:00:29.052
For me, the most significant JavaScript
function is probably fetch in terms of its

7
00:00:29.052 --> 00:00:31.726
usefulness and how important it is,
how complex it is.

8
00:00:31.726 --> 00:00:37.478
If you've watched asynchronous hard parts,
&gt;&gt; Will Sentance: Watch now.

9
00:00:37.478 --> 00:00:43.136
Number one most significant
function in functional programming,

10
00:00:43.136 --> 00:00:46.818
and in JavaScript, and in all, is reduce.

11
00:00:46.818 --> 00:00:48.415
The most versatile higher
order function of all.

12
00:00:48.415 --> 00:00:53.223
People,
&gt;&gt; Will Sentance: It is profound what

13
00:00:53.223 --> 00:00:57.983
reduce lets us work with, and
we are gonna use it to achieve the most

14
00:00:57.983 --> 00:01:01.993
important thing you can do
in functional programming.

15
00:01:01.993 --> 00:01:08.159
Under the hood, I gotta tell you now, the
composed function, it all depends on this.

16
00:01:08.159 --> 00:01:11.891
Then it takes a mental shift to look
at promise through the reduce lens.

17
00:01:11.891 --> 00:01:14.909
It can even enable function
composition to come.

18
00:01:14.909 --> 00:01:18.928
Well, we've already seen reduction, reduce
in action, we just didn't realize it.

19
00:01:18.928 --> 00:01:23.321
Here's our map function takes them 1,
2, 3, multiplies each element,

20
00:01:23.321 --> 00:01:28.136
takes you to the first element multiplyBy2
put the 2 into output, onto the array.

21
00:01:28.136 --> 00:01:29.674
Takes the next element,

22
00:01:29.674 --> 00:01:34.225
runs the multiplyBy2 function on it
get four put it in the output, okay?

23
00:01:34.225 --> 00:01:37.088
We made some assumptions here people.

24
00:01:37.088 --> 00:01:39.929
And I'm gonna go down to this bit
here I think to show you this.

25
00:01:39.929 --> 00:01:41.432
We made some assumptions.

26
00:01:41.432 --> 00:01:46.751
Well, maybe I can do it here,
yeah, I want to do it, whatever.

27
00:01:46.751 --> 00:01:49.142
All right, we made some assumptions.

28
00:01:50.835 --> 00:01:54.904
&gt;&gt; Will Sentance: (1, 2,
3) was our input, I'll do it here.

29
00:01:57.462 --> 00:02:02.210
&gt;&gt; Will Sentance: We assumed with map that
we were going to take the first element

30
00:02:02.210 --> 00:02:07.521
and the second element of that one,
and combine it with what, Seth?

31
00:02:07.521 --> 00:02:10.232
Combined the elements with each of
the individual elements with what?

32
00:02:10.232 --> 00:02:11.509
&gt;&gt; Seth: The callback?

33
00:02:11.509 --> 00:02:14.489
&gt;&gt; Will Sentance: Using a callback
using to combine them into?

34
00:02:14.489 --> 00:02:15.258
&gt;&gt; Seth: A new array.

35
00:02:15.258 --> 00:02:16.774
&gt;&gt; Will Sentance: A new array.

36
00:02:16.774 --> 00:02:19.231
Why do we see an array?

37
00:02:19.231 --> 00:02:20.636
That's not inherent.

38
00:02:20.636 --> 00:02:25.329
But let's be really explicit and actually
recognize that that's exactly what we did.

39
00:02:25.329 --> 00:02:30.233
We took the first element of (1, 2, 3),
and it's gonna require a mental shift.

40
00:02:30.233 --> 00:02:34.526
If anybody thought about math actually
like this under the hood in their head,

41
00:02:34.526 --> 00:02:37.529
their mathematical wizards or
a genie, or whatever.

42
00:02:37.529 --> 00:02:41.874
We actually took the 1,
and combined it with,

43
00:02:44.481 --> 00:02:46.800
&gt;&gt; Will Sentance: An empty array.

44
00:02:46.800 --> 00:02:49.774
We multiply it by 2 in the process, and

45
00:02:49.774 --> 00:02:55.830
combined it with an empty array to get
an array with the 1 multiplied by 2 in it.

46
00:02:55.830 --> 00:02:57.839
That's actually what we did.

47
00:02:57.839 --> 00:03:01.498
We assumed here we had an array.

48
00:03:01.498 --> 00:03:04.561
Let's flip our way of thinking about it,
and

49
00:03:04.561 --> 00:03:09.154
acknowledge that actually what we
did is we took our first element,

50
00:03:09.154 --> 00:03:13.358
multiplied it by 2, and
then combined it with a empty array.

51
00:03:13.358 --> 00:03:15.740
Jasmine, how to combine those two?

52
00:03:15.740 --> 00:03:17.034
How do we combine them?

53
00:03:17.034 --> 00:03:19.145
How do I combine a number with an array?

54
00:03:19.145 --> 00:03:20.681
&gt;&gt; Jasmine: You insert it in?

55
00:03:20.681 --> 00:03:21.922
&gt;&gt; Will Sentance: Using what method?

56
00:03:21.922 --> 00:03:22.952
&gt;&gt; Jasmine: Push.
&gt;&gt; Will Sentance: Push,

57
00:03:22.952 --> 00:03:27.905
I can bind it using
multiplying element and push.

58
00:03:27.905 --> 00:03:33.073
I then took that
combination as the input to

59
00:03:33.073 --> 00:03:39.114
combining with the next element,
also doubled.

60
00:03:39.114 --> 00:03:44.025
The doubled next element,
how do I combine, 2 multiplied by 2,

61
00:03:44.025 --> 00:03:46.456
for with an array with the element 2?

62
00:03:46.456 --> 00:03:50.216
And now I combine those from
two things down to one thing?

63
00:03:50.216 --> 00:03:51.004
&gt;&gt; Seth: Pushing.

64
00:03:51.004 --> 00:03:53.677
&gt;&gt; Will Sentance: Pushing,
pushing, exactly right.

65
00:03:55.313 --> 00:03:56.527
&gt;&gt; Will Sentance: There it is.

66
00:03:57.568 --> 00:04:00.402
&gt;&gt; Will Sentance: And then I took that
2 and 4, which is a single thing,

67
00:04:00.402 --> 00:04:02.757
that's a really important to know, right?

68
00:04:02.757 --> 00:04:04.476
That's a single entity.

69
00:04:04.476 --> 00:04:05.621
That's a single value.

70
00:04:05.621 --> 00:04:08.517
That's not two separate things,
it's one thing.

71
00:04:08.517 --> 00:04:10.145
Just like a number is one thing.

72
00:04:10.145 --> 00:04:11.603
Just like a string is one thing.

73
00:04:11.603 --> 00:04:12.548
Just like an object is one thing.

74
00:04:12.548 --> 00:04:14.754
They may have lots of things inside
of them, but they're one thing.

75
00:04:14.754 --> 00:04:21.197
And I took that and I combined it with the
last element by doubling the last element.

76
00:04:21.197 --> 00:04:23.195
And again, help me out.

77
00:04:23.195 --> 00:04:26.053
&gt;&gt; Seth: Pushing.
&gt;&gt; Will Sentance: Pushing it exactly, and

78
00:04:26.053 --> 00:04:31.201
look at that, my 1, 2, 3 became 2, 4, 6.

79
00:04:31.201 --> 00:04:37.138
But not by this mental model,
but by this one.

80
00:04:37.138 --> 00:04:42.882
What I'm really doing in my mapping,
taking each element, multiplying by 2,

81
00:04:42.882 --> 00:04:47.864
pushing it to an array, what I am
really doing in a more general sense,

82
00:04:47.864 --> 00:04:51.503
is taking the first element,
doubling it, sure.

83
00:04:51.503 --> 00:04:56.913
And then combining it by
pushing into an empty array,

84
00:04:56.913 --> 00:05:01.964
reducing it from two things,
my first element and

85
00:05:01.964 --> 00:05:07.154
my array,
reducing them from two into a one thing.

86
00:05:07.154 --> 00:05:11.930
And then taking the output of that
reduction from two, you reduce the price,

87
00:05:11.930 --> 00:05:13.043
you take it down.

88
00:05:13.043 --> 00:05:15.053
Reduction of two things to one,

89
00:05:15.053 --> 00:05:18.850
taking the output of that reduction
of two things to one, and

90
00:05:18.850 --> 00:05:23.771
combining with the next element and
reducing, this is one thing, one thing.

91
00:05:23.771 --> 00:05:28.211
Combining it with an element,
how many things, David, is a number and

92
00:05:28.211 --> 00:05:31.106
an array with two in,
how many things is that?

93
00:05:31.106 --> 00:05:32.934
&gt;&gt; David: Two.
&gt;&gt; Will Sentance: That's two things.

94
00:05:32.934 --> 00:05:34.645
And I wanna get it down to?

95
00:05:34.645 --> 00:05:37.038
&gt;&gt; David: One-
&gt;&gt; Will Sentance: One thing, there it is.

96
00:05:37.038 --> 00:05:40.849
And I did it by doubling and
pushing the element.

97
00:05:40.849 --> 00:05:45.560
Take that one with the next one,
double the element, and

98
00:05:45.560 --> 00:05:50.188
combine it to get one thing,
which is exactly the same.

99
00:05:50.188 --> 00:05:54.331
Raise your hand if when you think about
what we did in copyright manipulate,

100
00:05:54.331 --> 00:05:57.439
you thought about it in this
process of take the element,

101
00:05:57.439 --> 00:06:00.419
and something with which
you're gonna combine with,

102
00:06:00.419 --> 00:06:03.944
something we're gonna build up of,
you know what they call it?

103
00:06:03.944 --> 00:06:12.104
They call it the accumulator that you
thought of taking each element and

104
00:06:12.104 --> 00:06:16.184
reducing it with the accumulator.

105
00:06:16.184 --> 00:06:20.574
The thing with which we're combining
to get an array with a 2 in.

106
00:06:20.574 --> 00:06:25.331
And then taking that with the next element
doubled in reducing those two from two

107
00:06:25.331 --> 00:06:29.528
things, reducing these,
taking from two to one, two things to one.

108
00:06:29.528 --> 00:06:32.090
And then reducing those
two things a little bit,

109
00:06:32.090 --> 00:06:35.714
that output of that reduction from
two to one with the next element and

110
00:06:35.714 --> 00:06:39.865
reducing those two things into one thing,
one thing, one thing, one thing.

111
00:06:39.865 --> 00:06:41.480
I know this isn't all one thing,
but this is one thing, right?

112
00:06:41.480 --> 00:06:42.682
An array is a single thing,

113
00:06:42.682 --> 00:06:46.202
anything that we return from a function
as a single thing, I can return a raise.

114
00:06:46.202 --> 00:06:49.065
And if you will be saved to
a variable as a single thing, and

115
00:06:49.065 --> 00:06:50.243
I can save an array too.

116
00:06:50.243 --> 00:06:55.866
Raise your hand if you truly in your
heart thought of mapping as actually

117
00:06:55.866 --> 00:07:00.928
being taking two to one,
taking the output of that reduction and

118
00:07:00.928 --> 00:07:05.632
combining the next element to one,
taking that one to one?

119
00:07:05.632 --> 00:07:08.725
Raise your hand return if you actually,
Sam, you- [LAUGH]

120
00:07:08.725 --> 00:07:11.195
&gt;&gt; Sam: The shorthand, the name map,

121
00:07:11.195 --> 00:07:13.667
is a shorthand for MapReduce.

122
00:07:13.667 --> 00:07:18.718
&gt;&gt; Will Sentance: See, I told you there
will be somebody who is a gifted person,

123
00:07:18.718 --> 00:07:20.187
who's a gifted.

124
00:07:20.187 --> 00:07:24.733
But really,
this is what we're doing when we map,

125
00:07:24.733 --> 00:07:29.826
we reduce from two to one from two to one,
from two to one.

126
00:07:29.826 --> 00:07:36.339
And what's so powerful about this folk,
is here, here, we assumed that

127
00:07:36.339 --> 00:07:42.340
we were reducing each element with
the accumulated being an array.

128
00:07:42.340 --> 00:07:43.782
But you know what folk?

129
00:07:45.604 --> 00:07:53.401
&gt;&gt; Will Sentance: We could
reduce it with say a number.

130
00:07:53.401 --> 00:07:56.730
How could I reduce from 2 to 1,
the number 1 and the number 0?

131
00:07:56.730 --> 00:07:58.247
How could I,
you can think of this many ways, but

132
00:07:58.247 --> 00:07:59.775
how would I reduce from two things to one,
Seth?

133
00:07:59.775 --> 00:08:00.921
&gt;&gt; Seth: Adding.
&gt;&gt; Will Sentance: Adding,

134
00:08:00.921 --> 00:08:02.577
subtracting maybe.

135
00:08:02.577 --> 00:08:04.671
Multiplying, be a very boring.

136
00:08:04.671 --> 00:08:09.688
[LAUGH] What an amazing
reduction it would be.

137
00:08:09.688 --> 00:08:14.475
But yeah, 0 and
1 we would reduce by exactly adding,

138
00:08:14.475 --> 00:08:18.959
so 0 and
1 would reduce therefore to what, Seth?

139
00:08:18.959 --> 00:08:20.238
&gt;&gt; Seth: 1.
&gt;&gt; Will Sentance: 1, 1 and

140
00:08:20.238 --> 00:08:21.982
2 would reduce to?

141
00:08:21.982 --> 00:08:23.185
&gt;&gt; Seth: 3.

142
00:08:23.185 --> 00:08:28.502
&gt;&gt; Will Sentance: 3 by adding, 3 and
3 would reduce, so by the way, to stress,

143
00:08:28.502 --> 00:08:33.424
the output of the previous
reduction becomes the input plus

144
00:08:33.424 --> 00:08:38.753
the next element is reduce into
the next reduction from 2 to 1.

145
00:08:38.753 --> 00:08:41.446
3 and 3 added gives us out, Seth?

146
00:08:41.446 --> 00:08:42.812
&gt;&gt; Seth: 6.
&gt;&gt; Will Sentance: 6, excellent,

147
00:08:42.812 --> 00:08:43.484
there it is.

148
00:08:45.037 --> 00:08:49.818
&gt;&gt; Will Sentance: Even now, people,
I wanna stress to all of you

149
00:08:49.818 --> 00:08:53.747
reduction is not 1, 2, 3, to 6.

150
00:08:53.747 --> 00:08:59.240
[SOUND] Our reduction is from two things,
always to one thing,

151
00:08:59.240 --> 00:09:04.006
repeatedly through each
element of the input array.

152
00:09:04.006 --> 00:09:07.601
Reduction from 2 to 1,
take that array with 2 in,

153
00:09:07.601 --> 00:09:11.931
reduce it with the next element to 2 and
4, reduce that to 2 or

154
00:09:11.931 --> 00:09:16.461
4 with the next element,
these are two things, reduce it to 1.

155
00:09:16.461 --> 00:09:21.484
And we've barely even seen what this
paradigm, this model of thinking

156
00:09:21.484 --> 00:09:25.933
of data being reduced element
by element with an accumulator.

157
00:09:25.933 --> 00:09:33.390
Okay, actually, let's call this the rule
by which we combine from 2 to 1,

158
00:09:33.390 --> 00:09:37.770
reduce from 2 to 1, is known as, Jasmine?

159
00:09:37.770 --> 00:09:41.059
&gt;&gt; Jasmine: [INAUDIBLE]
&gt;&gt; Will Sentance: Sure, but it's gonna,

160
00:09:41.059 --> 00:09:44.868
it's not actually was you know I hate
the names they call these things,

161
00:09:44.868 --> 00:09:46.341
this is not the worst name.

162
00:09:46.341 --> 00:09:49.385
They call the function,
the code, the instructions,

163
00:09:49.385 --> 00:09:51.668
of how we're gonna combine from 2 to 1.

164
00:09:51.668 --> 00:09:54.389
We add over multiply by 2,
and then push the element,

165
00:09:54.389 --> 00:09:56.533
that's how we combine these two, right?

166
00:09:56.533 --> 00:10:02.561
We multiply them by 2 and
combine it with the array by pushing,

167
00:10:02.561 --> 00:10:07.473
they call this the reducer,
reduces from 2 to 1.

168
00:10:07.473 --> 00:10:12.023
It's the rule by which we combine
two things to become one,

169
00:10:12.023 --> 00:10:15.299
when two become one, when two become one,

170
00:10:15.299 --> 00:10:20.229
when two become one, when two become one,
when two become one.

171
00:10:20.229 --> 00:10:26.717
This paradigm people for taking data,
is profound what it can do.

172
00:10:26.717 --> 00:10:31.853
In fact, all of our,
I didn't wanna give it away yet.

173
00:10:31.853 --> 00:10:36.258
But the most important tool we
use in functional programming,

174
00:10:36.258 --> 00:10:40.259
the thing that allows us to
recombine functions backup.

175
00:10:40.259 --> 00:10:41.808
Because we put everything
into single lines and

176
00:10:41.808 --> 00:10:44.335
saving words in different functions,
you got to combine them back up again.

177
00:10:44.335 --> 00:10:49.946
I think that's do that in a super readable
manner, is gonna use this under the hood.

178
00:10:49.946 --> 00:10:54.605
We're gonna come to all of that for now,
here we can bite, we saw this already.

179
00:10:54.605 --> 00:10:57.798
Well, actually, by the way,
we can work with a number zero here,

180
00:10:57.798 --> 00:10:59.691
we could always combine with a string.

181
00:10:59.691 --> 00:11:03.857
Anyone kind of be able to see so if I
combine one with a string, Charles, I get?

182
00:11:03.857 --> 00:11:04.522
&gt;&gt; Charles: String.

183
00:11:04.522 --> 00:11:05.506
&gt;&gt; Will Sentance: String of one, right?

184
00:11:05.506 --> 00:11:07.680
Combine the string of
one with a two I get?

185
00:11:07.680 --> 00:11:10.774
String of- String of what?

186
00:11:10.774 --> 00:11:11.399
&gt;&gt; Charles: One, two.

187
00:11:11.399 --> 00:11:13.153
&gt;&gt; Will Sentance: One, two,
[LAUGH] great language this is,

188
00:11:13.153 --> 00:11:15.612
combine the string of one,
two, with the three, and get?

189
00:11:15.612 --> 00:11:16.519
&gt;&gt; Charles: One, two, three.

190
00:11:16.519 --> 00:11:19.059
&gt;&gt; Will Sentance: One two three, tight
coercion where you can combine things up,

191
00:11:19.059 --> 00:11:20.650
even if they don't have
the same data types.

192
00:11:21.890 --> 00:11:25.600
Therefore, if we want to build
the function that achieves this,

193
00:11:25.600 --> 00:11:30.210
we need to write our function,
so they can handle any

194
00:11:30.210 --> 00:11:35.580
accumulative thing with which we
are combining element by element.

195
00:11:35.580 --> 00:11:40.800
And then the output of that combination
is used with the next element

196
00:11:40.800 --> 00:11:43.949
to combine those two into one, and
then the output of that one is combined,.

197
00:11:45.500 --> 00:11:49.757
And any logic code functionality to do
the combining of elements from two to one,

198
00:11:49.757 --> 00:11:53.020
from two to one, from two to one,
they call that the reducer.

