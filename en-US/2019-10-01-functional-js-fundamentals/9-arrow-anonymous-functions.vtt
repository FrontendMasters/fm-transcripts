WEBVTT

1
00:00:00.000 --> 00:00:03.785
&gt;&gt; Will Sentance: We are now
going to continue into, arrow and

2
00:00:03.785 --> 00:00:05.837
anonymous functions.

3
00:00:05.837 --> 00:00:07.979
This is not like the other
sections that I've taught today.

4
00:00:07.979 --> 00:00:09.907
You can put your laptops if you want.

5
00:00:09.907 --> 00:00:14.331
It's not like the other parts
of our talk today which are more

6
00:00:14.331 --> 00:00:18.503
in-depth pieces of our
functional programming world.

7
00:00:18.503 --> 00:00:19.781
This is closer to an interlude.

8
00:00:19.781 --> 00:00:22.512
A few things that I want to
make sure you're on top of,

9
00:00:22.512 --> 00:00:25.488
they're not going to cause
confusion as we go into more and

10
00:00:25.488 --> 00:00:28.852
more of these sophisticated
pieces of functional programming.

11
00:00:28.852 --> 00:00:32.610
So there we have an arrow function,
you recognize it,

12
00:00:32.610 --> 00:00:36.216
we've all ready got pretty
used to it at this point.

13
00:00:36.216 --> 00:00:38.186
Parameter in the parentheses.

14
00:00:38.186 --> 00:00:44.943
As a pace holder that when you end up
running in this case, multiply by two,

15
00:00:44.943 --> 00:00:50.978
it gets filled in with the argument
two and then return back to two.

16
00:00:50.978 --> 00:00:56.404
But where the function has only
a single thing to do which is

17
00:00:56.404 --> 00:01:01.610
gonna be done and then returned,
which is what multiply

18
00:01:01.610 --> 00:01:06.394
by two does when he's only
got a single thing to do.

19
00:01:06.394 --> 00:01:09.444
JavaScript now allows us to do
a shorthand version of this,

20
00:01:09.444 --> 00:01:12.677
where there's no other code in
the body of the function besides

21
00:01:12.677 --> 00:01:16.414
the return key word followed by
the thing that's going to be outputted.

22
00:01:16.414 --> 00:01:20.920
Single expression, what an expression of
thing that's got to be turned into a value

23
00:01:20.920 --> 00:01:22.896
to be outputted can be returned out.

24
00:01:22.896 --> 00:01:26.266
We can actually, well,
firstly we can put it all in one line.

25
00:01:26.266 --> 00:01:28.630
Don't get confused by me putting
the multiply by two on one line there.

26
00:01:28.630 --> 00:01:29.939
It's the same as any other function.

27
00:01:29.939 --> 00:01:31.681
I just put it all in one line.

28
00:01:31.681 --> 00:01:33.744
Well, if I can put it all on one line,

29
00:01:33.744 --> 00:01:36.949
JavaScript designers you know
what we'll help you out.

30
00:01:36.949 --> 00:01:40.743
You don't need the curly braces we know
that's probably the body of the function.

31
00:01:40.743 --> 00:01:44.026
And you know what even you don't need the
return keyword if you can put on one line

32
00:01:44.026 --> 00:01:45.951
will insert the return keyword for
you there.

33
00:01:45.951 --> 00:01:47.705
We know it, you'll know it's there.

34
00:01:47.705 --> 00:01:53.059
That means that this second line here,
multiply by two input or

35
00:01:53.059 --> 00:01:58.124
parameter of input Is actually
saying return input by two.

36
00:01:58.124 --> 00:02:00.109
But it's identical to the line before.

37
00:02:00.109 --> 00:02:01.567
Nothing has changed.

38
00:02:01.567 --> 00:02:04.669
Just a slightly shorthand
way of writing it.

39
00:02:04.669 --> 00:02:08.036
Inserted, what what's the word we've
inserted there, Sam before input by two or

40
00:02:08.036 --> 00:02:09.779
what's the word the JavaScript asserts.

41
00:02:09.779 --> 00:02:11.046
They're automatically
&gt;&gt; Sam: Returned.

42
00:02:11.046 --> 00:02:12.566
&gt;&gt; Will Sentance: Returned.

43
00:02:12.566 --> 00:02:17.130
Okay, I'm going to actually diagram this
for a second just to make sure we're truly

44
00:02:17.130 --> 00:02:19.892
on top of this, but
note even here we can even remove

45
00:02:19.892 --> 00:02:24.163
the parentheses if there's only one
placeholder parameter expected input.

46
00:02:24.163 --> 00:02:29.701
And we get this very clean looking syntax,
syntax meaning wording of the function,

47
00:02:29.701 --> 00:02:34.164
but only if the thing is any different I
don't want you to think that that's some

48
00:02:34.164 --> 00:02:36.722
magic, I don't know,
I think it's any different.

49
00:02:36.722 --> 00:02:38.988
It's just I'm gonna walk through it,
just to make sure.

50
00:02:38.988 --> 00:02:42.295
By the way,
each of these is a separate file of code.

51
00:02:42.295 --> 00:02:44.871
So you don't think I'm gonna be
overriding, multiply by twos.

52
00:02:44.871 --> 00:02:47.047
Let's go over here.

53
00:02:47.047 --> 00:02:49.970
These last two lines here,
Sam, help me out.

54
00:02:49.970 --> 00:02:55.366
Line one there, simply as possible,
what am I doing in line one?

55
00:02:55.366 --> 00:02:56.790
&gt;&gt; Sam: Declaring multiple over two.

56
00:02:56.790 --> 00:02:57.693
&gt;&gt; Will Sentance: As a?

57
00:02:57.693 --> 00:02:59.581
&gt;&gt; Sam: As a constant.

58
00:02:59.581 --> 00:03:00.733
&gt;&gt; Will Sentance: As a function.

59
00:03:00.733 --> 00:03:01.396
Yeah, totally.

60
00:03:01.396 --> 00:03:03.638
Yes, it's a constant is a label,
but let's just call it a function.

61
00:03:03.638 --> 00:03:07.842
Let's just stress to ourselves
this is just a function,

62
00:03:07.842 --> 00:03:10.915
declaring the function multiplied by two.

63
00:03:10.915 --> 00:03:16.435
Okay, so
I'm gonna do a little mini memory over

64
00:03:16.435 --> 00:03:21.829
here declaring the function
multiply by two.

65
00:03:21.829 --> 00:03:23.998
There it is, as my left has ever,

66
00:03:23.998 --> 00:03:27.411
I'm going to actually put
in what the parameter is.

67
00:03:27.411 --> 00:03:32.056
I like to do this sometimes input and
then the output is input by two.

68
00:03:32.056 --> 00:03:35.387
I know it's very small writing, but
we're not really looking at it closely.

69
00:03:35.387 --> 00:03:38.051
There it is, okay, saved.

70
00:03:38.051 --> 00:03:42.177
Next line, Virginia.

71
00:03:42.177 --> 00:03:43.396
&gt;&gt; Virginia: Declaring a label output.

72
00:03:43.396 --> 00:03:46.732
&gt;&gt; Will Sentance: Yep, and
we've got to go off and run.

73
00:03:46.732 --> 00:03:47.962
What Virginia?

74
00:03:47.962 --> 00:03:49.140
&gt;&gt; Virginia: Multiply by two.

75
00:03:49.140 --> 00:03:52.017
&gt;&gt; Will Sentance: Exactly multiply
by two with what argument?

76
00:03:52.017 --> 00:03:52.803
&gt;&gt; Virginia: Three.

77
00:03:52.803 --> 00:03:55.680
&gt;&gt; Will Sentance: With
the argument of three.

78
00:03:55.680 --> 00:03:58.482
Creating a new,same as usual,
Virginia what?

79
00:03:58.482 --> 00:03:59.306
&gt;&gt; Virginia: Execution context.

80
00:03:59.306 --> 00:04:00.181
&gt;&gt; Will Sentance: Execution context.

81
00:04:00.181 --> 00:04:01.352
There it is.

82
00:04:01.352 --> 00:04:05.228
Into we go,
what Virginia is our parameter,

83
00:04:05.228 --> 00:04:10.841
our placeholder it into which
we're going to fill our argument?

84
00:04:10.841 --> 00:04:11.929
&gt;&gt; Virginia: Input.
&gt;&gt; Will Sentance: Input, and

85
00:04:11.929 --> 00:04:14.994
maybe no grands,
there maybe no keyword function, but

86
00:04:14.994 --> 00:04:16.765
it still is a regular function.

87
00:04:16.765 --> 00:04:20.848
Input to which we are assigning,
what Jasmine?

88
00:04:20.848 --> 00:04:22.645
&gt;&gt; Jasmine: Three.
&gt;&gt; Will Sentance: Three.

89
00:04:22.645 --> 00:04:25.576
What then is the body of our function?

90
00:04:25.576 --> 00:04:28.606
What keyword sum is inserted
automatically for us?

91
00:04:28.606 --> 00:04:30.571
&gt;&gt; Sam: Return.
&gt;&gt; Will Sentance: Return input by

92
00:04:30.571 --> 00:04:34.144
two that's what's really there.

93
00:04:34.144 --> 00:04:37.579
I'm sure I'm gonna have you
that's what's really there.

94
00:04:37.579 --> 00:04:39.649
Input by two is

95
00:04:39.649 --> 00:04:44.483
three by two six return it out into

96
00:04:45.823 --> 00:04:48.260
&gt;&gt; Will Sentance: Output
&gt;&gt; Will Sentance: Bit of

97
00:04:48.260 --> 00:04:48.990
an interlude right?

98
00:04:48.990 --> 00:04:51.703
This is just, this is not call learning.

99
00:04:51.703 --> 00:04:55.760
I wanna make sure that nobody is
looking at that arrow function and

100
00:04:55.760 --> 00:04:58.869
its very short version
with its implicit return.

101
00:04:58.869 --> 00:05:01.635
Implicit means we're not stating,
it has been done for us,

102
00:05:01.635 --> 00:05:03.489
and thinking it's something magical.

103
00:05:03.489 --> 00:05:06.519
No, it's a function like any other.

104
00:05:06.519 --> 00:05:07.482
Okay?

105
00:05:07.482 --> 00:05:08.568
That's really stressed.

106
00:05:08.568 --> 00:05:10.322
Maybe you all knew that all ready.

107
00:05:10.322 --> 00:05:12.234
But I feel it causes a lot of confusion.

108
00:05:12.234 --> 00:05:14.490
Well, let's now use it.

109
00:05:14.490 --> 00:05:18.757
Okay, arrow functions, by the way they
fit our functional programming paradigm.

110
00:05:18.757 --> 00:05:23.533
Every line in functional programming is to
bring it back to this is an independent,

111
00:05:23.533 --> 00:05:25.990
self contained, no other consequences,

112
00:05:25.990 --> 00:05:29.561
labeled piece of code where we
know exactly what data it uses.

113
00:05:29.561 --> 00:05:33.286
Well, if we only get it within a single
line, it's gonna take in an input and

114
00:05:33.286 --> 00:05:35.516
an output and that's the only consequence.

115
00:05:35.516 --> 00:05:39.799
We're probably not doing much else on that
single line besides taking input using

116
00:05:39.799 --> 00:05:43.894
the input in some way, and immediately
returning out in the very same line, or

117
00:05:43.894 --> 00:05:48.052
the arrow function style kind of stresses
that doesn't it right input output,

118
00:05:48.052 --> 00:05:48.702
same line.

119
00:05:48.702 --> 00:05:52.695
Arrow functions that is condense
our function so really stress that.

120
00:05:52.695 --> 00:05:53.229
Excellent.

121
00:05:53.229 --> 00:05:57.664
Okay, now, let's review our copy,
array and manipulate.

122
00:05:57.664 --> 00:05:59.084
There it is idea for a minute.

123
00:05:59.084 --> 00:06:01.764
Well, there's copyright manipulate,
there's multiple by two.

124
00:06:01.764 --> 00:06:05.993
And we called it with one,
two, three multiplied by two.

125
00:06:05.993 --> 00:06:11.185
Let's shorthand it aha multiplied by two,
same function.

126
00:06:11.185 --> 00:06:13.229
Nothing's changed.

127
00:06:13.229 --> 00:06:16.456
Parameter, input.

128
00:06:16.456 --> 00:06:19.924
Return input by two.

129
00:06:19.924 --> 00:06:25.318
Take it in instructions is enabled for
parameter input return input by two,

130
00:06:25.318 --> 00:06:29.954
meaning when I run instructions
I'm really running with input as

131
00:06:29.954 --> 00:06:33.999
my parameter take in two and
I'm running instructions,

132
00:06:33.999 --> 00:06:39.339
which turns out to be multiple by
200 running instructions with input.

133
00:06:39.339 --> 00:06:43.582
Array position one is
when we got showing here,

134
00:06:43.582 --> 00:06:48.992
which is the two instructions
input of two, take in the two,

135
00:06:48.992 --> 00:06:54.509
as input and return two by two
which is four out of instructions

136
00:06:54.509 --> 00:06:59.202
which is really multiply
that number by two, okay?

137
00:06:59.202 --> 00:07:00.610
Stop me if this is not.

138
00:07:00.610 --> 00:07:01.887
Okay, right?

139
00:07:01.887 --> 00:07:03.093
Not radical change.

140
00:07:05.966 --> 00:07:09.703
&gt;&gt; Will Sentance: We can even insert the
function that we insert into the higher

141
00:07:09.703 --> 00:07:12.494
order functions or that callback function.

142
00:07:12.494 --> 00:07:14.527
Multiply by two directly.

143
00:07:14.527 --> 00:07:18.052
That is to say anonymously,
without a label.

144
00:07:18.052 --> 00:07:20.989
So, look, multiply by two,

145
00:07:20.989 --> 00:07:26.991
saved that code parameter input,
body return input by two.

146
00:07:26.991 --> 00:07:30.936
And then just linked to it by name.

147
00:07:30.936 --> 00:07:35.001
People love avoiding saving it by
a nice English language name or

148
00:07:35.001 --> 00:07:38.779
nice to be a human readable name and
inserting device name.

149
00:07:38.779 --> 00:07:42.532
They love to write it indirectly.

150
00:07:42.532 --> 00:07:46.125
Here's the problem with that and there's
no problem with it if you understand what

151
00:07:46.125 --> 00:07:48.448
it's doing, but
here's the problem if you don't.

152
00:07:48.448 --> 00:07:52.713
You know what people think all
the time to the point I've

153
00:07:52.713 --> 00:07:57.342
literally seen people go I
thought reduced to five arguments

154
00:07:57.342 --> 00:08:01.625
because they think each of
these bits is a parameter on.

155
00:08:01.625 --> 00:08:03.490
Copyright manipulates,

156
00:08:03.490 --> 00:08:08.413
as opposed to that portion from
the word input through to number two.

157
00:08:08.413 --> 00:08:13.258
That is the code of
a function that is just

158
00:08:13.258 --> 00:08:17.961
me putting in multiply by two the code of

159
00:08:17.961 --> 00:08:22.236
the function and inserting in, but

160
00:08:22.236 --> 00:08:28.099
now which color should we
use now without a name.

161
00:08:28.099 --> 00:08:30.633
We just inserted straight in and
there it is.

162
00:08:30.633 --> 00:08:33.259
But given what label Anna do we use for

163
00:08:33.259 --> 00:08:38.855
the code formerly known as multiply by
two, inside of copyright manipulate,

164
00:08:38.855 --> 00:08:43.963
they wouldn't label to be used right
inside of copyright manipulate.

165
00:08:43.963 --> 00:08:44.536
&gt;&gt; Anna: Instructions.

166
00:08:44.536 --> 00:08:45.527
&gt;&gt; Will Sentance: Instructions.

167
00:08:45.527 --> 00:08:48.411
Meaning do we care about
the label multiply by two?

168
00:08:48.411 --> 00:08:50.647
Absolutely not.

169
00:08:50.647 --> 00:08:51.772
And that's all this is doing here.

170
00:08:51.772 --> 00:08:56.712
It's saying in the end the label multiple
by two is only us to find the function

171
00:08:56.712 --> 00:08:57.779
to insert it in.

172
00:08:57.779 --> 00:09:02.846
Well, if we insert it straight in,
then we don't need to

173
00:09:02.846 --> 00:09:07.717
go hunting for
it by its name we just inserted right in.

174
00:09:07.717 --> 00:09:10.664
And we're using instructions
as it's label anyway.

175
00:09:10.664 --> 00:09:15.641
No change except readability,
which to me goes down but not really.

176
00:09:15.641 --> 00:09:18.668
I mean,
people use this technique all the time.

177
00:09:18.668 --> 00:09:21.810
We're gonna hold off from using
it most of the time here today,

178
00:09:21.810 --> 00:09:25.978
because I think it makes getting on top
of what's actually happening much harder.

179
00:09:25.978 --> 00:09:30.981
I think it makes people think that that
lines being sort of run right there and

180
00:09:30.981 --> 00:09:34.029
then is absolutely not,
you're taking it and

181
00:09:34.029 --> 00:09:38.504
rather than saving it under a label
to be run later on inside of here.

182
00:09:38.504 --> 00:09:39.575
I get that right.

183
00:09:39.575 --> 00:09:43.477
Instead, you're taking it and
just inserting it straight in, but

184
00:09:43.477 --> 00:09:47.789
it's still ain't gonna be run until
inside of copyright manipulate we see

185
00:09:47.789 --> 00:09:50.338
the referral to instruction from parends.

186
00:09:50.338 --> 00:09:53.645
Then take that code and run it.

187
00:09:53.645 --> 00:09:57.503
But it causes I think a lot of confusion
as why this is a bit of an interlude as I

188
00:09:57.503 --> 00:10:00.506
say to make sure that you're
given the techniques to go and

189
00:10:00.506 --> 00:10:04.697
not look at other people's code and go,
what the hell I didn't see that before.

190
00:10:04.697 --> 00:10:08.574
Okay, folk, it's a bit of an interlude,
thumbs on what I've shown you there,

191
00:10:08.574 --> 00:10:11.824
this direct policy in of the code,
because we don't need a label for

192
00:10:11.824 --> 00:10:15.042
it because we never use the multiple
by two enable insider anyway.

193
00:10:15.042 --> 00:10:19.760
We just use the code and if we're going
to we only use the mobile Mattoon able to

194
00:10:19.760 --> 00:10:23.108
find the functionality we
saved outside insert it in.

195
00:10:23.108 --> 00:10:26.947
If we're inserting it straight in no
need for the multiple by two label.

196
00:10:26.947 --> 00:10:31.328
Thumbs on this people you lost me I'm
clear clarification people also clarifying

197
00:10:31.328 --> 00:10:32.158
you're sure.

198
00:10:32.158 --> 00:10:33.209
Okay.

199
00:10:33.209 --> 00:10:34.073
All right folks

