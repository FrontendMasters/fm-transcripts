WEBVTT

1
00:00:00.000 --> 00:00:01.513
&gt;&gt; Will Sentance: A function
with two inputs.

2
00:00:01.513 --> 00:00:03.873
Remember, we can auto
run a list of functions,

3
00:00:03.873 --> 00:00:07.951
each of which returns at one output and
hopefully inserts into the next function.

4
00:00:07.951 --> 00:00:10.857
If that next function needs two inputs.

5
00:00:10.857 --> 00:00:13.135
We need to reduce it to one input.

6
00:00:13.135 --> 00:00:14.501
So this is not gonna work.

7
00:00:14.501 --> 00:00:19.410
So instead we run our prefill function
on it inside of which we create

8
00:00:19.410 --> 00:00:24.164
a brand new function which grabs
the function we want to pre fill.

9
00:00:24.164 --> 00:00:31.524
And a valued refill it stores in
the function's backpack returns that out,

10
00:00:31.524 --> 00:00:36.354
has code such that when in
a runs under its new labor

11
00:00:36.354 --> 00:00:40.620
multiply by two with
a single input of five.

12
00:00:40.620 --> 00:00:43.098
And by the way,
we could call this anything of course but

13
00:00:43.098 --> 00:00:46.657
I'm trying to make it intuitive in that
sense for my read for my you know my team.

14
00:00:46.657 --> 00:00:51.881
In those the five and
inside of multiply by two really inner

15
00:00:51.881 --> 00:00:56.583
because it has this backpack
of a function and data.

16
00:00:56.583 --> 00:01:01.398
I'm able to run that backpack function
of multiply that got passed in when it

17
00:01:01.398 --> 00:01:02.310
was created.

18
00:01:02.310 --> 00:01:08.953
And the prefill value, return at the
result of that return it out and appear

19
00:01:08.953 --> 00:01:15.611
to just have had multiply by two with
my value of two pre filled in multiply.

20
00:01:15.611 --> 00:01:20.503
So this here is partial application.

21
00:01:20.503 --> 00:01:22.757
Partially applying data to a function.

22
00:01:22.757 --> 00:01:27.009
This is closure in functional
programming style because you

23
00:01:27.009 --> 00:01:30.602
notice we ain't changing
the pre-filled value.

24
00:01:30.602 --> 00:01:34.909
When we use closure,
albeit my favorite concept in JavaScript,

25
00:01:34.909 --> 00:01:38.289
if we're being strictly functional,
is it pure?

26
00:01:38.289 --> 00:01:39.398
Well, it's not.

27
00:01:39.398 --> 00:01:42.862
Notice when I run the function I altered
stuff in its backpack because it

28
00:01:42.862 --> 00:01:46.748
means next time I run this function,
I got to remember that stuff changed here.

29
00:01:46.748 --> 00:01:49.465
Meaning, my code is not
independent line to line,

30
00:01:49.465 --> 00:01:52.507
is having consequences albeit
not in global namespace.

31
00:01:52.507 --> 00:01:55.811
But technically I run that function again,
and the backpack value and

32
00:01:55.811 --> 00:01:57.214
we have the counter going up.

33
00:01:57.214 --> 00:02:00.866
That's changing,
that's reducing the purity my function.

34
00:02:00.866 --> 00:02:05.665
It's saying next time you run this code,
even wants to find multiple by two

35
00:02:05.665 --> 00:02:09.409
does this, next time you run
it is behaving differently.

36
00:02:09.409 --> 00:02:13.783
That means that that line wants
to find multiple way to the first

37
00:02:13.783 --> 00:02:17.259
time you run is affecting
the rest of my code base.

38
00:02:17.259 --> 00:02:19.956
Wherever I call that function,
again, it's affected, it's changed.

39
00:02:19.956 --> 00:02:22.958
That is not every single
line being independent unit.

40
00:02:22.958 --> 00:02:25.528
And that goes back to my final sort of,
you know,

41
00:02:25.528 --> 00:02:28.437
my overarching thesis with
functional programming.

42
00:02:28.437 --> 00:02:32.285
These are techniques that make our
code dramatically more readable, but

43
00:02:32.285 --> 00:02:35.090
we don't always have to
achieve them in perfection.

44
00:02:35.090 --> 00:02:40.828
But our use of closure or giving functions
backpack here is very legitimate

45
00:02:40.828 --> 00:02:45.759
functional permissions like
called functional programming.

46
00:02:45.759 --> 00:02:48.965
Because here, we are taking a function,

47
00:02:48.965 --> 00:02:53.098
editing it by by running it
with our value pre filled.

48
00:02:53.098 --> 00:02:57.147
And every time I run multiple by two There
is nothing changing in this backpack.

49
00:02:57.147 --> 00:02:59.953
This line is still truly independent.

50
00:02:59.953 --> 00:03:03.897
This line, I can run it knowing
there is no other consequences.

51
00:03:03.897 --> 00:03:07.637
The next time it gets run, this stuff
is still in the backpack the same.

