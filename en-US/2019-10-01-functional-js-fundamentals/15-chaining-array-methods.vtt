WEBVTT

1
00:00:00.000 --> 00:00:04.125
&gt;&gt; Will Sentance: When it hits an element
where it runs this function on it and

2
00:00:04.125 --> 00:00:06.323
it gets a return value of true.

3
00:00:06.323 --> 00:00:09.249
It takes not true and
put it in the array, no, no, no.

4
00:00:09.249 --> 00:00:12.867
It takes the element itself,
sticks it in the array.

5
00:00:12.867 --> 00:00:13.918
That's all the filter does.

6
00:00:13.918 --> 00:00:15.124
We're not gonna build it out ourselves.

7
00:00:15.124 --> 00:00:17.239
It's not hard to do so,
but that's all it's doing.

8
00:00:17.239 --> 00:00:20.458
So let's take the first element, the 1.

9
00:00:20.458 --> 00:00:24.517
And it's going to be inserted
into the greater than 2 function.

10
00:00:24.517 --> 00:00:29.073
So we do greater than 2, taking the 1,

11
00:00:29.073 --> 00:00:32.559
creates, everybody, a new?

12
00:00:32.559 --> 00:00:33.066
&gt;&gt; Jasmine: Execution.

13
00:00:33.066 --> 00:00:35.533
&gt;&gt; Will Sentance: Execution context,
exactly, there it is.

14
00:00:35.533 --> 00:00:40.125
Into it we go and in the local memory.

15
00:00:43.184 --> 00:00:47.502
&gt;&gt; Will Sentance: Jasmine, we're running
greater than 2 inside of filter on

16
00:00:47.502 --> 00:00:51.490
the first element of the array,
which is the number 1.

17
00:00:51.490 --> 00:00:55.028
And into the 1, 1 gets thrown
into greater than 2, Jasmine.

18
00:00:55.028 --> 00:00:59.276
Therefore, our parameter that
is assigned that 1 is what?

19
00:00:59.276 --> 00:01:01.378
&gt;&gt; Jasmine: Num.
&gt;&gt; Will Sentance: Num, exactly.

20
00:01:01.378 --> 00:01:04.563
And then we've got numbers,
or a greater than 2,

21
00:01:04.563 --> 00:01:07.392
which is reading return
num greater than 2.

22
00:01:07.392 --> 00:01:09.951
1 greater than 2 evaluates to what,
Jasmine?

23
00:01:09.951 --> 00:01:11.052
&gt;&gt; Jasmine: False.
&gt;&gt; Will Sentance: False, and

24
00:01:11.052 --> 00:01:12.297
we return out false.

25
00:01:12.297 --> 00:01:14.100
And so we move the hell on.

26
00:01:14.100 --> 00:01:20.494
And we do with 2 greater than 2,
input of 2.

27
00:01:20.494 --> 00:01:25.209
Well, presumably,
that still also returns out false.

28
00:01:25.209 --> 00:01:29.553
Now we take the 3, and

29
00:01:29.553 --> 00:01:35.971
we call greater than 2 on the 3.

30
00:01:35.971 --> 00:01:38.594
Let's do the execution context this time.

31
00:01:38.594 --> 00:01:43.098
And Jasmine,
the num value here will be what?

32
00:01:43.098 --> 00:01:44.319
&gt;&gt; Jasmine: 3.

33
00:01:44.319 --> 00:01:47.859
&gt;&gt; Will Sentance: Num will be 3.

34
00:01:47.859 --> 00:01:49.872
3 greater than 2, Jasmine?

35
00:01:49.872 --> 00:01:52.923
&gt;&gt; Jasmine: True.
&gt;&gt; Will Sentance: True, return it out.

36
00:01:52.923 --> 00:01:56.576
And the way filters written, and we're
not interested desperately in how it's

37
00:01:56.576 --> 00:01:59.166
doing this, but
we have to sort of figure it out, right?

38
00:01:59.166 --> 00:02:04.143
It's when it pauses in the 3, if it
returns out true from greater than 2,

39
00:02:04.143 --> 00:02:07.698
it's gonna grab that 3 and
stick it in the new array.

40
00:02:07.698 --> 00:02:09.645
Same with 4, in it goes.

41
00:02:09.645 --> 00:02:11.967
Same with 5, in it goes.

42
00:02:11.967 --> 00:02:14.026
Same with 6.

43
00:02:14.026 --> 00:02:18.037
And then this array gets

44
00:02:18.037 --> 00:02:23.461
returned out 3, 4 ,5, 6.

45
00:02:23.461 --> 00:02:29.043
We're gonna see later on, note, we have
not mutated, altered our underlying array.

46
00:02:29.043 --> 00:02:34.255
Meaning the result of this line running
filter on that array with that condition

47
00:02:34.255 --> 00:02:39.485
is all self-contained to that line,
unless we assign it to a global like this.

48
00:02:39.485 --> 00:02:44.282
It's all self-contained to that line,
or that's maybe our problem, hold on.

49
00:02:44.282 --> 00:02:46.219
Do I wanna be assigned to a global and

50
00:02:46.219 --> 00:02:49.848
have another line of code al that
all other lines of code depend on?

51
00:02:49.848 --> 00:02:54.388
No, there's a way around it, folk.

52
00:02:54.388 --> 00:02:57.426
We can chain these higher
order functions together.

53
00:02:57.426 --> 00:02:58.575
We can do this.

54
00:02:58.575 --> 00:03:01.768
Look at this,
array dot filter parsing greater than 2.

55
00:03:01.768 --> 00:03:06.967
I didn't show you this directly,
gonna show you now.

56
00:03:06.967 --> 00:03:13.227
It actually turns, array evaluates to 1,
2, 3, 4, 5, 6 becomes 1, 2, 3, 4, 5, 6.

57
00:03:13.227 --> 00:03:17.496
Running filter with the parenthesis.

58
00:03:17.496 --> 00:03:23.869
This whole portion will
actually become what?

59
00:03:23.869 --> 00:03:26.465
Raise your hand if you wanna tell me
what this whole portion will become to

60
00:03:26.465 --> 00:03:26.984
JavaScript?

61
00:03:26.984 --> 00:03:27.876
Yeah, Eric.

62
00:03:27.876 --> 00:03:29.437
&gt;&gt; Eric: An array with 3, 4, 5 and 6.

63
00:03:29.437 --> 00:03:34.591
&gt;&gt; Will Sentance: Exactly,
it evaluates to our array of 3, 4, 5, 6.

64
00:03:34.591 --> 00:03:41.763
Now, that array has access to what
collection of functions, Eric?

65
00:03:41.763 --> 00:03:43.285
&gt;&gt; Eric: The prototype chain.

66
00:03:43.285 --> 00:03:45.163
&gt;&gt; Will Sentance: Up the chain,

67
00:03:45.163 --> 00:03:50.032
up the chain,
&gt;&gt; Will Sentance: To

68
00:03:50.032 --> 00:03:54.002
our shared collection of functions
that all arrays get access to.

69
00:03:54.002 --> 00:04:00.494
Meaning, do I need to save this
result to another label and

70
00:04:00.494 --> 00:04:04.343
then go and grab these functions?

71
00:04:04.343 --> 00:04:05.584
Or can I?

72
00:04:05.584 --> 00:04:07.243
David shakes his head, he's right.

73
00:04:07.243 --> 00:04:11.632
Can I just literally write dot reduce,

74
00:04:11.632 --> 00:04:16.693
right there on the end,
whenever I wanna do.

75
00:04:16.693 --> 00:04:19.146
And know that I can stick
it right on the end.

76
00:04:19.146 --> 00:04:23.200
Meaning array dot filter being called
greater than 2 2 becomes 3, 4, 5,

77
00:04:23.200 --> 00:04:25.488
6 from our original 1, 2, 3, 4, 5, 6.

78
00:04:25.488 --> 00:04:28.522
And then that, we run the reduced
method on because the array or

79
00:04:28.522 --> 00:04:30.710
arrays have access to
the shared functions.

80
00:04:30.710 --> 00:04:32.224
We put dot reduce.

81
00:04:32.224 --> 00:04:35.585
Well, let's just quickly remind
ourselves of how reduce works.

82
00:04:35.585 --> 00:04:43.125
So 3, 4, 5, 6 reduced with the input of 0.

83
00:04:43.125 --> 00:04:47.736
How are we combining the first two,
Virginia, by what rule for

84
00:04:47.736 --> 00:04:50.265
combining the first, by adding?

85
00:04:50.265 --> 00:04:52.329
There it is we get 3.

86
00:04:52.329 --> 00:04:56.916
Combined with the next one, we get 7,
combined the output of that combination,

87
00:04:56.916 --> 00:04:58.456
that reduction of 2 to 1.

88
00:04:58.456 --> 00:05:03.942
When 2 becomes 1, we combine with
the next value, which gives us 12.

89
00:05:03.942 --> 00:05:07.976
The output of that gives us 18.

90
00:05:07.976 --> 00:05:12.790
Meaning what does this
portion evaluate to, David?

91
00:05:12.790 --> 00:05:15.490
&gt;&gt; David: 18.
&gt;&gt; Will Sentance: To 18, to 18, and

92
00:05:15.490 --> 00:05:17.768
there it is, people.

93
00:05:17.768 --> 00:05:22.583
Meaning array dot filter being called with
greater than 2, that evaluated to 3, 4,

94
00:05:22.583 --> 00:05:23.112
5, 6.

95
00:05:23.112 --> 00:05:26.605
And then that got dot reduced and
that evaluated to 18.

96
00:05:26.605 --> 00:05:31.848
And that means the whole
block evaluates to 18.

97
00:05:31.848 --> 00:05:33.827
Alex, we do what with that 18?

98
00:05:33.827 --> 00:05:35.046
&gt;&gt; Alex: Starting sum of greater than 2.

99
00:05:35.046 --> 00:05:37.184
&gt;&gt; Will Sentance: Starting sum
of greater than 2, exactly.

100
00:05:37.184 --> 00:05:39.469
Well, we had array from
our earlier version.

101
00:05:39.469 --> 00:05:43.976
We store it into sum of greater than 2,

102
00:05:43.976 --> 00:05:48.082
which is a good name for it, right?

103
00:05:48.082 --> 00:05:52.034
Because we filled that array down to 3,
4, 5, 6 and some up.

