WEBVTT

1
00:00:00.113 --> 00:00:04.131
&gt;&gt; Will Sentance: Arrays, objects and
functions have access to methods.

2
00:00:04.131 --> 00:00:07.266
That means, functionality,
they can use on themselves.

3
00:00:07.266 --> 00:00:09.185
So, let's just see this.

4
00:00:09.185 --> 00:00:11.093
Save array one, two, three.

5
00:00:11.093 --> 00:00:13.783
And we can run a method on it.

6
00:00:13.783 --> 00:00:18.350
And that function push is somehow you're
gonna have access to the array one,

7
00:00:18.350 --> 00:00:22.089
two, three in order they can add
the number 10 to that array.

8
00:00:22.089 --> 00:00:23.308
Where is that stored?

9
00:00:23.308 --> 00:00:26.042
If you've been to Hard Parts
object oriented program,

10
00:00:26.042 --> 00:00:27.502
you know this all inside out.

11
00:00:27.502 --> 00:00:30.203
Raise your hands if you been to
Hard Parts OOP at some point?

12
00:00:30.203 --> 00:00:36.588
Okay, but the rest of us is gonna be new,
let's squeeze it in.

13
00:00:36.588 --> 00:00:41.606
Squeeze it in over here and
I'm gonna use blue I think.

14
00:00:41.606 --> 00:00:45.788
So let's squeeze in over here,
or pink for the array bit.

15
00:00:45.788 --> 00:00:49.863
So, line one here, Seth,
what are we doing, simple first line?

16
00:00:49.863 --> 00:00:53.566
&gt;&gt; Speaker 2: You're declaring
the constant array value of an array.

17
00:00:53.566 --> 00:00:58.543
&gt;&gt; Will Sentance: Exactly, okay,
this one will continue my code here.

18
00:00:58.543 --> 00:01:05.744
Now if I then do array, .push(10).

19
00:01:12.362 --> 00:01:14.056
&gt;&gt; Will Sentance: JavaScript
does a look up.

20
00:01:14.056 --> 00:01:15.925
It goes array, what the hell is that?

21
00:01:15.925 --> 00:01:16.987
It goes and looks for it.

22
00:01:23.564 --> 00:01:25.564
&gt;&gt; Will Sentance: Goes and
looks for it, and it sees,

23
00:01:25.564 --> 00:01:28.047
is there a, it's like it's an array.

24
00:01:28.047 --> 00:01:32.150
Why am I trying to treat it like
it's an object, with a dot?

25
00:01:32.150 --> 00:01:34.179
Does anyone know why?

26
00:01:34.179 --> 00:01:35.671
&gt;&gt; Speaker 2: Because it is an object.

27
00:01:35.671 --> 00:01:36.342
&gt;&gt; Will Sentance: Well, that was easy.

28
00:01:36.342 --> 00:01:39.188
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: [LAUGH] Genius,

29
00:01:39.188 --> 00:01:40.510
all of you.

30
00:01:40.510 --> 00:01:45.035
It turns out as soon as you save any
array, and by the way any function,

31
00:01:45.035 --> 00:01:51.412
behind the scenes, you're also saving,
&gt;&gt; Will Sentance: An object,

32
00:01:51.412 --> 00:01:54.275
which can be accessed using dot notation.

33
00:01:54.275 --> 00:01:55.959
So when it gets here,
it looks for the object.

34
00:01:55.959 --> 00:01:58.674
And it looks for push on that object.

35
00:01:58.674 --> 00:02:00.558
For reasons that we're
not gonna go to today.

36
00:02:00.558 --> 00:02:03.669
Well, besides that you don't wanna have
a copy of the same push function on every

37
00:02:03.669 --> 00:02:04.513
single array saved.

38
00:02:04.513 --> 00:02:07.083
There's no push method saved on here.

39
00:02:07.083 --> 00:02:15.489
Instead, we have a store,
&gt;&gt; Will Sentance: There,

40
00:02:15.489 --> 00:02:18.297
these things are amazing as pens.

41
00:02:18.297 --> 00:02:24.461
We have a store,
&gt;&gt; Will Sentance: Of functions,

42
00:02:24.461 --> 00:02:31.376
that all arrays as soon as
they're saved have access to,

43
00:02:31.376 --> 00:02:38.305
and it's an object full of
beautiful useful functions.

44
00:02:38.305 --> 00:02:39.779
Push is one of them.

45
00:02:39.779 --> 00:02:41.091
What other ones do we have?

46
00:02:41.091 --> 00:02:41.832
Jasmine?

47
00:02:41.832 --> 00:02:42.521
&gt;&gt; Jasmine: Pop.

48
00:02:42.521 --> 00:02:43.291
&gt;&gt; Will Sentance: Yeah.

49
00:02:43.291 --> 00:02:44.772
Well, we'll hold on that one for now.

50
00:02:44.772 --> 00:02:45.869
Yeah, Sam?

51
00:02:45.869 --> 00:02:47.192
&gt;&gt; Sam: Lick.

52
00:02:47.192 --> 00:02:49.688
&gt;&gt; Will Sentance: That's even worse,
it's certainly different.

53
00:02:49.688 --> 00:02:51.868
There's a whole bunch of them,
we've already seen one.

54
00:02:51.868 --> 00:02:53.751
&gt;&gt; Sam: Reduce. Filter.
&gt;&gt; Will Sentance: Reduce, filter.

55
00:02:53.751 --> 00:02:57.997
Exactly reduce, filter,

56
00:02:57.997 --> 00:03:02.612
map for all of these,

57
00:03:02.612 --> 00:03:08.342
they're all stored on this object.

58
00:03:08.342 --> 00:03:11.674
And JavaScript gives all arrays
access to them, folkman,

59
00:03:11.674 --> 00:03:15.417
if you wanna know all this inside out,
it's all in OOP Hard Parts.

60
00:03:16.992 --> 00:03:19.308
&gt;&gt; Will Sentance: The least
watched of all the hard parts.

61
00:03:19.308 --> 00:03:20.869
And yet my favorite,

62
00:03:20.869 --> 00:03:25.653
read this talk is just a long warm
up to promote the OOP hard parts.

63
00:03:25.653 --> 00:03:27.189
It shouldn't be called OOP hard parts.

64
00:03:27.189 --> 00:03:31.029
It should be called clauses and prototypes
and people like that's like react.

65
00:03:31.029 --> 00:03:33.484
Let me know any more case even
that's not gonna work out.

66
00:03:33.484 --> 00:03:37.469
Anyway, so, when JavaScript sees
dot push quantum array goes and

67
00:03:37.469 --> 00:03:41.037
looks it goes up, all they want
me to look at the object bit.

68
00:03:41.037 --> 00:03:45.371
It looks at the object bit,
there ain't no push methods stored on it,

69
00:03:45.371 --> 00:03:47.288
JavaScript doesn't give up.

70
00:03:47.288 --> 00:03:52.680
It looks at a hidden
property called _proto_,

71
00:03:52.680 --> 00:04:00.187
which is a link to this shared object
that all arrays have access to.

72
00:04:00.187 --> 00:04:05.871
Just as an FYI, this shared object
is known as array.prototype.

73
00:04:05.871 --> 00:04:09.155
Which is just the label for
this object in JavaScript.

74
00:04:09.155 --> 00:04:11.935
We could go and
console log array.prototype,

75
00:04:11.935 --> 00:04:14.513
we would see this object
full of functions.

76
00:04:14.513 --> 00:04:18.573
And that means that when we run push,
JavaScript is gonna have to use

77
00:04:18.573 --> 00:04:23.218
it's amazing, I think it's probably
most well, top three best features.

78
00:04:23.218 --> 00:04:28.053
It's prototypal nature, that is its
feature that means when it doesn't find

79
00:04:28.053 --> 00:04:30.836
a method on an object,
it doesn't give up and

80
00:04:30.836 --> 00:04:35.108
it's on the property and
looks up what's next up the chain.

81
00:04:35.108 --> 00:04:37.018
And it's easy link up to
all these functions here.

82
00:04:37.018 --> 00:04:41.182
And once it it finds push, and
it grabs it, and it uses it.

83
00:04:41.182 --> 00:04:45.510
And into it, it's going to auto insert,
what was array?

84
00:04:45.510 --> 00:04:50.801
One, two, three is going to auto
insert that array into this function.

85
00:04:50.801 --> 00:04:56.669
So the ten can be added to
the array inside of push.

86
00:04:56.669 --> 00:05:00.504
Okay, and then it's going to have
the output of this whole section B.

87
00:05:00.504 --> 00:05:03.222
What would it be, (1, 2).

88
00:05:03.222 --> 00:05:04.522
Actually that's not true.

89
00:05:04.522 --> 00:05:05.544
That's actually not true.

90
00:05:05.544 --> 00:05:08.790
That's not how pushes not return that.

91
00:05:08.790 --> 00:05:10.127
Both of the time they do,
but that one does not.

92
00:05:10.127 --> 00:05:14.720
But, it's gonna add to that (1,
2, 3) to array and

93
00:05:14.720 --> 00:05:17.805
it would become (1, 2, 3) Ten.

94
00:05:17.805 --> 00:05:21.088
So that's an interlude because I want
us to use that fact to do something

95
00:05:21.088 --> 00:05:22.797
interesting we've still got time.

96
00:05:22.797 --> 00:05:26.005
So as we see, the methods that
arrays get a stolen object,

97
00:05:26.005 --> 00:05:30.395
that every array has access to when you
refer to the array, followed by adults,

98
00:05:30.395 --> 00:05:33.038
followed by the method
name see OOP hard parts.

99
00:05:33.038 --> 00:05:37.239
The link to the object from the shared
methods is on the product property of

100
00:05:37.239 --> 00:05:39.293
every arrays hidden object piece.

101
00:05:39.293 --> 00:05:42.204
Okay, I don't know if I want
to do thumbs on this honestly,

102
00:05:42.204 --> 00:05:45.137
there's a thousand interesting
questions you could ask.

103
00:05:45.137 --> 00:05:51.838
But they're all in the OOP hard parts,
so unless anyone has a really burning.

104
00:05:51.838 --> 00:05:55.710
&gt;&gt; Speaker 2: I don't know,
this must be answered in JavaScript,

105
00:05:55.710 --> 00:06:00.182
I mean gsr parts, but
what I'm saying is when you do an array,

106
00:06:00.182 --> 00:06:03.469
does it do a new array and
creates one for you?

107
00:06:03.469 --> 00:06:06.205
&gt;&gt; Will Sentance: That’s gonna
depend on which method you’re using,

108
00:06:06.205 --> 00:06:07.677
let’s see the ones that do.

109
00:06:07.677 --> 00:06:09.867
Thank you Charles, teed up perfectly.

110
00:06:09.867 --> 00:06:14.789
JavaScript has a built-in version reduce
available to all arrays, there it is.

111
00:06:14.789 --> 00:06:19.859
Reminder our version reduce,
remember it took in an array 1, 2, 3.

112
00:06:19.859 --> 00:06:23.668
Took in the function by which we're
gonna combine the first element with

113
00:06:23.668 --> 00:06:24.672
the accumulator.

114
00:06:24.672 --> 00:06:27.555
The thing with which we're gonna combine,
take the output of that,

115
00:06:27.555 --> 00:06:29.356
combined with the next factor, so forth.

116
00:06:29.356 --> 00:06:32.771
With the built-in version,
the arrays inserted

117
00:06:32.771 --> 00:06:37.658
into the reduced function automatically
as the first input argument.

118
00:06:37.658 --> 00:06:39.278
Look at this, did you see here,

119
00:06:39.278 --> 00:06:43.365
the only that changes with the built-in
version is that, let's just write it.

120
00:06:43.365 --> 00:06:44.779
I think I'm gonna write it here.

121
00:06:44.779 --> 00:06:49.056
If we did, instead,

122
00:06:49.056 --> 00:06:53.816
1, 2, 3 .reduce.

123
00:06:53.816 --> 00:06:56.115
Add is the functionality for
combining, and

124
00:06:56.115 --> 00:06:58.726
zero is the thing with
which we're gonna combine.

125
00:06:58.726 --> 00:07:03.098
It goes and looks, this 1, 2,

126
00:07:03.098 --> 00:07:08.860
3 here has access to the shared objects,
there.

127
00:07:08.860 --> 00:07:14.645
As all arrays do through it, through its
hidden proto feature of its object, right.

128
00:07:14.645 --> 00:07:18.061
Look for and choose on it, there it is.

129
00:07:18.061 --> 00:07:23.200
Grabs it functions code,
starts running it,

130
00:07:23.200 --> 00:07:27.297
and auto inserts the 123, okay.

131
00:07:27.297 --> 00:07:28.531
I don't want to dwell on this.

132
00:07:28.531 --> 00:07:31.885
Does anyone know what keyword
the reduced function you uses

133
00:07:31.885 --> 00:07:35.651
to get access to the thing to the left
of the dot, inside of itself.

134
00:07:35.651 --> 00:07:38.493
Because this function is built
using JavaScript or code,

135
00:07:38.493 --> 00:07:40.482
what keywords that use,
&gt;&gt; Speaker 2: This.

136
00:07:40.482 --> 00:07:43.066
&gt;&gt; Will Sentance: One running from this,
exactly, exactly.

137
00:07:43.066 --> 00:07:48.324
Okay, but nothing else has changed,
it's exactly the same, let's keep moving.

138
00:07:48.324 --> 00:07:50.434
As [LAUGH] I'm talking to say this,
in fact,

139
00:07:50.434 --> 00:07:53.010
we get a number of built-in
higher order functions.

140
00:07:53.010 --> 00:07:57.540
That is functions like map for
each filter, flat MAP, reduce,

141
00:07:57.540 --> 00:07:59.940
reduce right, all sort on this object.

142
00:07:59.940 --> 00:08:02.870
And all arrays have access to this object.

143
00:08:04.790 --> 00:08:10.743
All of these higher order functions
iterate through each element of the array.

144
00:08:10.743 --> 00:08:14.706
123, 123 like iterate do it one by one.

145
00:08:14.706 --> 00:08:18.180
Map doesn't say, all iterate
through each over the array, and

146
00:08:18.180 --> 00:08:19.478
run a function on each.

147
00:08:19.478 --> 00:08:24.371
And there to Charles point, and stick
the result or into probably an array,

148
00:08:24.371 --> 00:08:29.741
reduce stick the result of combining with
whatever you determine to combine with.

149
00:08:29.741 --> 00:08:33.136
Map, brand new function, brand new,
I'm sorry, array inside of it.

150
00:08:33.136 --> 00:08:35.365
We're gonna come to
that later on actually,

151
00:08:35.365 --> 00:08:39.424
let me talk about immutability of data,
Charles, but they behave differently.

152
00:08:39.424 --> 00:08:44.193
MDN, which is the Mozilla docs that
I think Jasmine shouted out earlier.

153
00:08:44.193 --> 00:08:47.183
Are our guidebook on the signature.

154
00:08:47.183 --> 00:08:52.055
The way in which each of these
built-in functions work.

155
00:08:52.055 --> 00:08:56.763
And hopefully now given you know that
this collection of functions has

156
00:08:56.763 --> 00:08:58.687
a label array .prototype.

157
00:08:58.687 --> 00:09:03.102
You understand why in MDN they
always have array.prototype.reduce.

158
00:09:03.102 --> 00:09:06.660
Array on prototype dot filter is
the label, not exactly helpful, right?

159
00:09:06.660 --> 00:09:10.585
When you're starting out you look at that,
I just wanna reduce function,

160
00:09:10.585 --> 00:09:12.846
what is this array.prototype.reduce?

161
00:09:12.846 --> 00:09:15.758
But it's just where the reduced
function is built and stored.

