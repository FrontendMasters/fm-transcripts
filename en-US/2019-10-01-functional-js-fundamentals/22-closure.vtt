WEBVTT

1
00:00:03.143 --> 00:00:08.252
&gt;&gt; Will Sentance: But it all relates to
what our dear friend Seth kindly brought

2
00:00:08.252 --> 00:00:14.860
up, which is, my dream to be able to list
off my lines of code, by name and say,

3
00:00:14.860 --> 00:00:20.700
you go now run them one by one and
take the input 11 for the first one.

4
00:00:20.700 --> 00:00:26.523
And have its output of that first line
only be affecting only locked into only

5
00:00:26.523 --> 00:00:32.165
affecting by the very nature of reduce
only be affected in the next nine out

6
00:00:32.165 --> 00:00:37.171
of three, whose cords was only
affects the next time, we got it.

7
00:00:37.171 --> 00:00:38.796
I'm not the and by the way,

8
00:00:38.796 --> 00:00:43.617
given his only effect is the next line
there's no need for me to state arguments.

9
00:00:43.617 --> 00:00:49.124
I'm gonna auto run that function under
the hood through the help reduce.

10
00:00:49.124 --> 00:00:49.995
Problem is,

11
00:00:49.995 --> 00:00:54.921
I'm therefore gonna have no control
over the inputs I pass the function.

12
00:00:54.921 --> 00:00:59.536
For example, that add three function
I've got a problem if that add three

13
00:00:59.536 --> 00:01:01.484
function expects two inputs.

14
00:01:01.484 --> 00:01:06.967
Suppose I hadn't added to numbers
function is going to be a big problem.

15
00:01:06.967 --> 00:01:12.186
Well, we're gonna discover this sort
of second half, we're gonna solve that.

16
00:01:12.186 --> 00:01:17.414
But to do so, we wanna think firstly,
if we're building applications

17
00:01:17.414 --> 00:01:21.700
centered around little baby
functions is that cool unit.

18
00:01:21.700 --> 00:01:24.878
From which we build up our applications.

19
00:01:24.878 --> 00:01:29.994
My goodness,
what if we could give them a superpower?

20
00:01:29.994 --> 00:01:33.473
What if we could make them
as powerful as possible?

21
00:01:33.473 --> 00:01:35.587
And closure is gonna do that for us.

22
00:01:35.587 --> 00:01:39.909
And it's gonna be vital for later on
enabling us to success problem that he

23
00:01:39.909 --> 00:01:43.325
raised,that holder if I'm listening or
functions, and

24
00:01:43.325 --> 00:01:47.018
one of them expects two inputs,
and I've only got one of them,

25
00:01:47.018 --> 00:01:51.717
only one input the output of the previous
line, how can I adjust that function?

26
00:01:51.717 --> 00:01:56.116
When it's gonna turn out,
I'm gonna prefill that function,

27
00:01:56.116 --> 00:02:01.012
I'm gonna need that function,
to have some sort of little persistent

28
00:02:01.012 --> 00:02:05.577
memory data store attached to it,
into which I can store the other

29
00:02:05.577 --> 00:02:10.230
input of that function, so
that it only actually needs one to run.

30
00:02:10.230 --> 00:02:12.893
But it's gonna rely all on closure.

31
00:02:12.893 --> 00:02:14.362
So here we go.

32
00:02:14.362 --> 00:02:18.797
The most esoteric concept in JavaScript in
my opinion, although having seen reduce,

33
00:02:18.797 --> 00:02:19.597
I don't know.

34
00:02:19.597 --> 00:02:23.606
Functions are our units to build but
they're limited.

35
00:02:23.606 --> 00:02:28.020
Every time they run they
forget their previous running.

36
00:02:28.020 --> 00:02:32.606
Now especially with no global states
that's not a great thing that every single

37
00:02:32.606 --> 00:02:37.349
time they run they forget the previous
anything about the previous time they ran.

38
00:02:37.349 --> 00:02:41.250
Imagine if we could give our functions
memories, permanent memories.

39
00:02:41.250 --> 00:02:42.844
The things we could do.

40
00:02:42.844 --> 00:02:46.165
And I do want somebody to raise a
challenge with this through the functional

41
00:02:46.165 --> 00:02:49.504
programming lens at some point, and
I'll give you some thoughts on that.

42
00:02:49.504 --> 00:02:55.696
But for now, let's remind ourselves
exactly how functions actually work.

43
00:02:55.696 --> 00:02:56.894
Go to function, move over to here.

44
00:02:56.894 --> 00:02:58.291
That's right.
Once again,

45
00:02:58.291 --> 00:03:03.769
I want to do it because I want you all
to just get ourselves back in the flow.

46
00:03:03.769 --> 00:03:05.314
MultiplyBy2 is a function here.

47
00:03:05.314 --> 00:03:09.866
When I run it with the input of 7 my
parameter, what's my parameter here for

48
00:03:09.866 --> 00:03:11.301
multiplyBy2, Alex?

49
00:03:11.301 --> 00:03:11.831
&gt;&gt; Alex: Input number.

50
00:03:11.831 --> 00:03:13.721
&gt;&gt; Will Sentance: Input number
is filled in with what?

51
00:03:13.721 --> 00:03:15.398
&gt;&gt; Alex: 7.
&gt;&gt; Will Sentance: 7, perfect, and

52
00:03:15.398 --> 00:03:17.919
7 by 2 is returned out 14 to output.

53
00:03:17.919 --> 00:03:21.435
When I run multiplyBy2 again,
this time I'm going to input a 3.

54
00:03:21.435 --> 00:03:26.993
Does it have any memory that it
was previously run with seven?

55
00:03:26.993 --> 00:03:30.305
Absolutely not that easy,
why wasn't worth writing direct result?

56
00:03:30.305 --> 00:03:31.384
I think we got that one.

57
00:03:31.384 --> 00:03:33.981
No memory, the previous execution.

58
00:03:33.981 --> 00:03:38.306
Imagine if we could give our
functions permanent memories.

59
00:03:38.306 --> 00:03:43.013
Now this may, this may [LAUGH] sound on
is this I'm doing some volunteer work

60
00:03:43.013 --> 00:03:45.420
well we're going to talk about that.

61
00:03:45.420 --> 00:03:49.318
But for now, let's imagine we give out
functions permanent memories such that

62
00:03:49.318 --> 00:03:52.126
they remember things about
their previous invocation.

63
00:03:52.126 --> 00:03:56.334
Previous runnings, but it all begins with
returning a function from a function.

64
00:03:56.334 --> 00:03:57.889
Now, if you've been to close your heart,

65
00:03:57.889 --> 00:04:00.715
raise your hand if you've ever been to
the closure hoppers you've watched.

66
00:04:00.715 --> 00:04:01.223
Close your heart.

67
00:04:01.223 --> 00:04:01.886
Yeah, okay.

68
00:04:01.886 --> 00:04:03.835
Then we've seen this before.

69
00:04:03.835 --> 00:04:07.728
We're gonna use it to achieve some really
powerful functional promo techniques.

70
00:04:07.728 --> 00:04:09.283
We do need to start it off.

71
00:04:09.283 --> 00:04:13.062
And this little thing here, it all begins
with returning a function from a function.

72
00:04:13.062 --> 00:04:16.223
Maybe we're now so in the head of
functions being little things bundled up

73
00:04:16.223 --> 00:04:18.472
we can pass around that
we're gonna find this okay.

74
00:04:18.472 --> 00:04:21.912
But know that the next page of
code I've done in front of,

75
00:04:21.912 --> 00:04:24.564
these fancy engineering organisations and

76
00:04:24.564 --> 00:04:29.529
seeing senior engineers not really have
precisely down what's happening here.

77
00:04:29.529 --> 00:04:32.633
So let's see that for
ourselves and build it out.

78
00:04:32.633 --> 00:04:37.411
We're going to save a function,
we're going to call it function creator,

79
00:04:37.411 --> 00:04:41.978
no inputs, we're going to then run it and
still whatever his output is.

80
00:04:41.978 --> 00:04:47.032
Intergenerational funk, we run it one
time, right multiple times and arts.

81
00:04:47.032 --> 00:04:52.617
We're definitely not storing function
creator in a generation funk.

82
00:04:52.617 --> 00:04:56.979
We're instead gonna run function creator,
whatever it returns out which probably

83
00:04:56.979 --> 00:05:00.612
people are already starting to guess
that's gonna be generated fun.

84
00:05:00.612 --> 00:05:03.471
And then the very next line,
we're going to run.

85
00:05:03.471 --> 00:05:08.094
Well, hopefully whatever we got out of
jury the funk is a function as well.

86
00:05:08.094 --> 00:05:11.932
We're gonna use generated
funk as a new label for

87
00:05:11.932 --> 00:05:15.876
that function that came
out of function creator.

88
00:05:15.876 --> 00:05:20.936
I wanna stress to you that even seasoned
engineers look at this code all the time

89
00:05:20.936 --> 00:05:26.240
they go generated fun what's generated
fun invited to all its function creator.

90
00:05:26.240 --> 00:05:29.612
All right, so
I throw two in the function creator.

91
00:05:29.612 --> 00:05:31.910
No, no, no, no, no, no, no.

92
00:05:31.910 --> 00:05:34.300
Raise your hand if you think well,
I don't know.

93
00:05:34.300 --> 00:05:37.443
Raise your hand if you've ever
instinctively maybe thought that's what's

94
00:05:37.443 --> 00:05:38.175
happening here.

95
00:05:38.175 --> 00:05:39.768
Yeah, a few of us, right?

96
00:05:39.768 --> 00:05:43.872
I wouldn't be surprised, I absolutely
have seen I'm talking seasoned engineers,

97
00:05:43.872 --> 00:05:46.380
I'm talking engineers with
ten years experience,

98
00:05:46.380 --> 00:05:48.150
who kind of get confused about this.

99
00:05:48.150 --> 00:05:51.425
No, we're gonna see this as a one-time
running of function creator,

100
00:05:51.425 --> 00:05:53.772
save whatever comes out of
it in generated fun, and

101
00:05:53.772 --> 00:05:57.230
then never care about function creator
every again unless we use it again.

102
00:05:57.230 --> 00:05:59.855
And generatedFunc is now whatever
came out of function creator.

103
00:05:59.855 --> 00:06:04.144
Which presumably is a function of free,
but let's go through this line by line and

104
00:06:04.144 --> 00:06:05.773
understand it incompletion.

105
00:06:05.773 --> 00:06:09.300
Alex, line one, what are we saving?

106
00:06:09.300 --> 00:06:12.402
&gt;&gt; Alex: Clearing function
label function creator.

107
00:06:12.402 --> 00:06:13.793
&gt;&gt; Will Sentance: Excellent, there it is.

108
00:06:13.793 --> 00:06:14.951
No different than normal.

109
00:06:14.951 --> 00:06:21.971
Saving it into global memory
function creates its own function.

110
00:06:21.971 --> 00:06:24.426
People were almost there.

111
00:06:24.426 --> 00:06:25.897
Slash not.

112
00:06:25.897 --> 00:06:32.421
All right, next line,
Anna left hand side of next line.

113
00:06:32.421 --> 00:06:35.102
&gt;&gt; Anna: Declaring a function
called generatedFunc.

114
00:06:35.102 --> 00:06:38.303
&gt;&gt; Will Sentance: I wouldn't say that,

115
00:06:38.303 --> 00:06:43.021
declaring a label generated funk

116
00:06:43.021 --> 00:06:48.088
into which will be stored what Ana?

117
00:06:48.088 --> 00:06:50.334
&gt;&gt; Anna: The function creator?

118
00:06:50.334 --> 00:06:51.409
&gt;&gt; Will Sentance: Is she right?

119
00:06:51.409 --> 00:06:53.682
She's spot on, exactly!

120
00:06:53.682 --> 00:06:57.304
The output, the executed,
no, that's not right,

121
00:06:57.304 --> 00:07:01.582
the return value of executing
function creator is running it.

122
00:07:01.582 --> 00:07:03.753
And, Anna, what told you that,

123
00:07:03.753 --> 00:07:08.264
what symbols told you that that
right-hand side was work to be done?

124
00:07:08.264 --> 00:07:09.283
&gt;&gt; Anna: The parenthesis.

125
00:07:09.283 --> 00:07:12.560
&gt;&gt; Will Sentance: The parenthesis,
exactly.

126
00:07:12.560 --> 00:07:17.339
It's a thousand times people have found
this single line one of the hardest,

127
00:07:17.339 --> 00:07:19.482
it's the biggest gotcha in Java.

128
00:07:19.482 --> 00:07:22.844
It's not really a gotcha, a gotchas like
more of a trick, it's more like just,

129
00:07:22.844 --> 00:07:25.774
we really need to understand what
we're doing when we run functions.

130
00:07:25.774 --> 00:07:27.132
What we're doing when we say functions.

131
00:07:27.132 --> 00:07:30.103
What we're doing when we declare labels,
to know what's happening in this line.

132
00:07:30.103 --> 00:07:31.281
Okay, there it is, generatedFunc.

133
00:07:31.281 --> 00:07:33.035
For now, it's uninitialized.

134
00:07:33.035 --> 00:07:35.956
I was gonna tell you why.

135
00:07:35.956 --> 00:07:40.703
Why we say uninitialized on defined
was what would happen when you

136
00:07:40.703 --> 00:07:43.638
declared you will label that was gonna be

137
00:07:43.638 --> 00:07:48.060
the output of the function on
the right hand side with valve.

138
00:07:48.060 --> 00:07:51.391
Then with the fault one fine,
one find while the function ran and

139
00:07:51.391 --> 00:07:54.486
then you would redefine it as
a result of the function call.

140
00:07:54.486 --> 00:07:58.469
With a const declaration,
you can't have two data types changed out.

141
00:07:58.469 --> 00:08:01.120
You can't declare it is
undefined initially.

142
00:08:01.120 --> 00:08:03.290
Default is one to find and then when you
get the result of the function call,

143
00:08:03.290 --> 00:08:07.570
suddenly switch it out to whatever
the result of the function call is.

144
00:08:07.570 --> 00:08:12.280
So instead, you don't even actually
fully declare the label generatedFunc

145
00:08:12.280 --> 00:08:17.550
until you've actually got the result
of the right hand side running.

146
00:08:17.550 --> 00:08:21.280
This relates back to Charles's
question much earlier,

147
00:08:21.280 --> 00:08:26.254
about undefined versus uninitialized,
generated func declared, what do

148
00:08:26.254 --> 00:08:31.242
we need honor to go and execute to figure
out what to store in generated func?

149
00:08:31.242 --> 00:08:32.448
What do we need to go and

150
00:08:32.448 --> 00:08:35.497
execute to figure out what to
store into generated func?

151
00:08:35.497 --> 00:08:36.198
&gt;&gt; Anna: Function creator.

152
00:08:36.198 --> 00:08:40.520
&gt;&gt; Will Sentance: Function creator,
let's get executing.

153
00:08:42.410 --> 00:08:46.380
All right, so
we're gonna execute functionCreator.

154
00:08:46.380 --> 00:08:47.887
Anna, we need a new what?

155
00:08:50.571 --> 00:08:52.340
&gt;&gt; Anna: Execution context.

156
00:08:52.340 --> 00:08:52.910
&gt;&gt; Will Sentance: Excellent.
&gt;&gt; Anna: [LAUGH]

157
00:08:52.910 --> 00:08:53.700
&gt;&gt; Will Sentance: And we know that

158
00:08:53.700 --> 00:08:59.780
whatever comes out of it,
is going to be stored into generatedFunc.

159
00:08:59.780 --> 00:09:05.490
Let's create our execution context,
there it is.

160
00:09:07.850 --> 00:09:12.260
And [LAUGH] it's a rhombus at this point.

161
00:09:12.260 --> 00:09:15.120
And Charles into it we go line one.

162
00:09:15.120 --> 00:09:16.560
What are we gonna do?

163
00:09:16.560 --> 00:09:18.460
We're not gonna use this thing
I just want you to show,

164
00:09:18.460 --> 00:09:21.190
I just want to make sure everyone
knows we're saving stuff into memory.

165
00:09:21.190 --> 00:09:23.270
What's the first thing
we save into memory?

166
00:09:23.270 --> 00:09:24.230
&gt;&gt; Charles: Counter.

167
00:09:24.230 --> 00:09:25.710
&gt;&gt; Will Sentance: Counter is zero.
&gt;&gt; Charles: Counter is zero.

168
00:09:25.710 --> 00:09:26.880
&gt;&gt; Will Sentance: Exactly.

169
00:09:26.880 --> 00:09:30.590
Okay, I'm gonna do my call stack as well
actually for this one, it turns out to be

170
00:09:30.590 --> 00:09:35.250
increasingly important to think in
terms of it to not get confused.

171
00:09:37.760 --> 00:09:38.670
All right?

172
00:09:38.670 --> 00:09:43.820
And first thing on it will always global,
but what are we adding to it, Michael?

173
00:09:45.768 --> 00:09:48.454
&gt;&gt; Michael: Add three.

174
00:09:48.454 --> 00:09:49.610
Function creator.

175
00:09:49.610 --> 00:09:51.560
&gt;&gt; Will Sentance: Function creator
because we're calling what function

176
00:09:51.560 --> 00:09:52.180
right now Michael?

177
00:09:53.570 --> 00:09:55.480
&gt;&gt; Michael: We're calling
function creator.

178
00:09:55.480 --> 00:09:56.330
&gt;&gt; Will Sentance: Function creator.

179
00:09:56.330 --> 00:10:00.060
So we're going to add it to the call
stack because our execution context in

180
00:10:00.060 --> 00:10:03.730
action right now is function creator's.

181
00:10:03.730 --> 00:10:07.940
Our thread of execution has
woven into function creator.

182
00:10:07.940 --> 00:10:12.190
That's where we are right now,
it's top of our call stack, okay?

183
00:10:12.190 --> 00:10:16.090
David, we've saved counter is
zero inside the local memory.

184
00:10:16.090 --> 00:10:18.930
David, next line what's it say to do?

185
00:10:18.930 --> 00:10:22.450
&gt;&gt; David: We're declaring
a function with the label at three.

186
00:10:22.450 --> 00:10:26.940
&gt;&gt; Will Sentance: At three,
there is, there it is.

187
00:10:28.110 --> 00:10:30.610
Okay are we gonna use it David?

188
00:10:30.610 --> 00:10:31.364
&gt;&gt; David: Not right now.
&gt;&gt; Will Sentance: No what are we

189
00:10:31.364 --> 00:10:32.090
gonna do with it instead?

190
00:10:33.370 --> 00:10:34.440
&gt;&gt; David: We're gonna return it.

191
00:10:34.440 --> 00:10:39.860
&gt;&gt; Will Sentance: Exactly i'm gonna
write that here return at three.

192
00:10:39.860 --> 00:10:42.620
Anybody wanna tell me therefore
what Javascript actually

193
00:10:42.620 --> 00:10:44.340
does in that return statement?

194
00:10:44.340 --> 00:10:47.046
Jasmine you wanna tell me what
Javascript does in that return statement

195
00:10:47.046 --> 00:10:48.020
return at three?

196
00:10:48.020 --> 00:10:50.120
&gt;&gt; Jasmine: It replaces
at three with a function.

197
00:10:50.120 --> 00:10:51.670
&gt;&gt; Will Sentance: You hear this?

198
00:10:51.670 --> 00:10:52.506
Exactly.

199
00:10:52.506 --> 00:10:56.300
It looks at the function
definition using that label and

200
00:10:56.300 --> 00:11:01.010
it grabs the function definition, which
is the bit in the parentheses nom and

201
00:11:01.010 --> 00:11:05.850
then the body of it it grabs all that and
it returns it out

202
00:11:05.850 --> 00:11:10.450
of the cool to function creator and
stores it Jasmine where?

203
00:11:10.450 --> 00:11:11.650
&gt;&gt; Jasmine: In generated func.

204
00:11:11.650 --> 00:11:13.220
&gt;&gt; Will Sentance: Into generated func.

205
00:11:13.220 --> 00:11:14.890
She is spot on.

206
00:11:14.890 --> 00:11:17.200
Into generated func, it goes.

207
00:11:18.940 --> 00:11:22.485
It was formerly known as its
birth name was add three.

208
00:11:23.880 --> 00:11:28.840
But now we returned out all the code,

209
00:11:28.840 --> 00:11:32.420
grabbed it all,
shot it out the bottom no name.

210
00:11:32.420 --> 00:11:33.240
We lost that name.

211
00:11:33.240 --> 00:11:36.530
We just returned that we just use it to
look up the function as Jasmine said, and

212
00:11:36.530 --> 00:11:39.120
it got stored into generated func.

213
00:11:39.120 --> 00:11:43.110
If I were to now console log
generated func, I would see

214
00:11:44.180 --> 00:11:49.790
input num body, whatever it says cons
result equals num plus three return,

215
00:11:49.790 --> 00:11:55.810
that is now generated func, that is
what it means to return a function.

216
00:11:55.810 --> 00:11:57.580
From another function.

217
00:11:57.580 --> 00:12:03.730
Let's now, so this is now popped off
the cool stack and all this goodies here.

218
00:12:03.730 --> 00:12:07.110
Well, in theory,
the execution context is gone.

219
00:12:07.110 --> 00:12:09.480
The execution context is all deleted.

220
00:12:09.480 --> 00:12:13.861
And
&gt;&gt; Will Sentance: Look at that,

221
00:12:13.861 --> 00:12:15.670
that's rather nice.

222
00:12:15.670 --> 00:12:24.260
And we go back out to global where we
hit what line, Sam left hand side?

223
00:12:26.160 --> 00:12:26.830
&gt;&gt; Sam: Result.

224
00:12:26.830 --> 00:12:32.210
&gt;&gt; Will Sentance: Result, and the right
hand side says go run what function Sam?

225
00:12:32.210 --> 00:12:33.120
&gt;&gt; Sam: Generated func.

226
00:12:33.120 --> 00:12:35.730
&gt;&gt; Will Sentance: Go run generated func.

227
00:12:35.730 --> 00:12:41.100
And what was generated
func's original name, Sam?

228
00:12:41.100 --> 00:12:42.060
&gt;&gt; Sam: Function creator.

229
00:12:42.060 --> 00:12:43.430
&gt;&gt; Will Sentance: Aaah.

230
00:12:43.430 --> 00:12:44.580
It's so easy to think it right?

231
00:12:45.820 --> 00:12:48.360
What is generated func?

232
00:12:48.360 --> 00:12:49.160
&gt;&gt; Sam: Add three.

233
00:12:51.070 --> 00:12:54.766
&gt;&gt; Will Sentance: Folk with literally 10,
15 years experiences, and

234
00:12:54.766 --> 00:12:59.848
enormous gifts in engineering, still get
caught by this every single time and

235
00:12:59.848 --> 00:13:04.776
yet if we don't get it absolutely precise
in our head everything falls apart

236
00:13:04.776 --> 00:13:07.638
in understanding what's the conclusion.

237
00:13:07.638 --> 00:13:09.240
1,000 times.

238
00:13:09.240 --> 00:13:14.608
I've really stressed for you, Sam is in
the company of I'm literally talking about

239
00:13:14.608 --> 00:13:20.050
like the rock stone, I don't want to use
that silly term, the superstar developer,

240
00:13:20.050 --> 00:13:24.534
she's the person that to all so
every single time this throws people.

241
00:13:24.534 --> 00:13:27.215
We've got to go run
that function one time,

242
00:13:27.215 --> 00:13:32.240
store something in generated func it
is the functionality of add three.

243
00:13:32.240 --> 00:13:37.140
And from that line on generated func is
the code formerly known as add three.

244
00:13:37.140 --> 00:13:43.814
Thank you, Sam Hollasey because everybody
is going, yeah I felt the same thing.

245
00:13:43.814 --> 00:13:45.976
Appreciate that from Sam.

246
00:13:45.976 --> 00:13:50.583
So generated fund Jasmine is
the function that was born as

247
00:13:50.583 --> 00:13:51.616
&gt;&gt; Jasmine: As add three?

248
00:13:51.616 --> 00:13:53.190
&gt;&gt; Will Sentance: As add three.

249
00:13:53.190 --> 00:13:56.650
The function definition formerly
known as add three now known as

250
00:13:56.650 --> 00:14:00.410
generated func its global label that was
its label inside a function created when

251
00:14:00.410 --> 00:14:02.760
it was originally saved just like
we save count from side of that.

252
00:14:04.180 --> 00:14:07.900
But we grabbed its code, we only used,
when it says return add three.

253
00:14:07.900 --> 00:14:10.610
We only used that label to
find the code of the function.

254
00:14:10.610 --> 00:14:12.340
Returned it out stored in generated func.

255
00:14:12.340 --> 00:14:13.813
You only think,
some of you maybe think, I got this.

256
00:14:13.813 --> 00:14:18.563
I promise you people it is a real
toughy out it comes generated

257
00:14:18.563 --> 00:14:22.393
func is really David
the code formerly known as?

258
00:14:22.393 --> 00:14:23.273
&gt;&gt; David: Add three.

259
00:14:23.273 --> 00:14:26.938
&gt;&gt; Will Sentance: Add three meaning
after I leave function creator inside of

260
00:14:26.938 --> 00:14:29.628
which add three was saved I can't call it,

261
00:14:29.628 --> 00:14:33.600
I can't reference add
three anymore it's gone.

262
00:14:33.600 --> 00:14:35.370
Unless I say it in a new global label,

263
00:14:35.370 --> 00:14:38.129
David what was that new global
label I saved add three in.

264
00:14:38.129 --> 00:14:39.331
&gt;&gt; David: Generated func.

265
00:14:39.331 --> 00:14:40.644
&gt;&gt; Will Sentance: Generated func, so

266
00:14:40.644 --> 00:14:44.740
when I run generated func I'm
really running what Eric?

267
00:14:44.740 --> 00:14:45.355
&gt;&gt; Eric: Add three.

268
00:14:45.355 --> 00:14:46.410
&gt;&gt; Will Sentance: Add three.

269
00:14:46.410 --> 00:14:49.790
So if I want to refer to add three
out in global, what's his new name?

270
00:14:49.790 --> 00:14:50.790
Andrew?

271
00:14:50.790 --> 00:14:52.370
&gt;&gt; Andrew: Generated func.

272
00:14:52.370 --> 00:14:54.792
&gt;&gt; Will Sentance: Is generated func
actually function creator, Andrew?

273
00:14:54.792 --> 00:14:56.182
&gt;&gt; Andrew: No.

274
00:14:56.182 --> 00:14:59.453
&gt;&gt; Will Sentance: No, what would I need to
change Andrew in order to make generated

275
00:14:59.453 --> 00:15:02.560
func act as a new label for
the whole function creative code.

276
00:15:04.050 --> 00:15:06.030
What would I need to change in that line,
so

277
00:15:06.030 --> 00:15:10.000
that the generated func is actually just
a label for all of function creator?

278
00:15:10.000 --> 00:15:11.180
&gt;&gt; Andrew: Remove the parentheses, right?

279
00:15:11.180 --> 00:15:12.330
&gt;&gt; Will Sentance: Remove the parentheses.

280
00:15:12.330 --> 00:15:13.860
Spot on very nice from Andrew.

281
00:15:13.860 --> 00:15:16.697
All right, but it is a the output
of a one time running or

282
00:15:16.697 --> 00:15:20.403
function created which actually we've
got it I don't know if we have by

283
00:15:20.403 --> 00:15:23.480
the way I promise you this
is super tricky this bit.

284
00:15:23.480 --> 00:15:28.070
So let's run generated func
new execution context.

285
00:15:29.790 --> 00:15:32.110
There it is let's put
it on the cool stack.

286
00:15:32.110 --> 00:15:33.270
Sorry everybody.

287
00:15:33.270 --> 00:15:36.938
I do apologize, we are executing
generatedfunc, we need a brand new?

288
00:15:36.938 --> 00:15:37.614
&gt;&gt; Alex: Execution.

289
00:15:37.614 --> 00:15:38.418
[CROSSTALK].

290
00:15:38.418 --> 00:15:39.315
&gt;&gt; Will Sentance: Execution code as well.

291
00:15:39.315 --> 00:15:42.578
Excellent generated func for

292
00:15:42.578 --> 00:15:47.546
all we know is add three,
no, yes add three?

293
00:15:48.582 --> 00:15:53.182
With the input of sorry, two, I've done
this so many times with a different

294
00:15:53.182 --> 00:15:57.872
function that I can't get my head out
of it with the input of two sorry vote.

295
00:15:57.872 --> 00:16:00.672
There it is, the input of two,
there we go.

296
00:16:02.080 --> 00:16:03.850
A generatedFunc input of two.

297
00:16:03.850 --> 00:16:08.125
Now, here's the especially tricky
bit in my opinion of all this.

298
00:16:08.125 --> 00:16:12.075
Here's the especially tricky
bit of it all, is in order for

299
00:16:12.075 --> 00:16:16.104
me as a developer to figure out
what generatedFunc is doing,

300
00:16:16.104 --> 00:16:21.251
where do I take my eye Alex in order to
figure out what generatedFunc is doing?

301
00:16:21.251 --> 00:16:23.485
&gt;&gt; Alex: You look at whatever was
returned from functionCreator().

302
00:16:23.485 --> 00:16:25.570
Well, that's a very
sophisticated way of putting it.

303
00:16:25.570 --> 00:16:29.342
&gt;&gt; Will Sentance: Yes, but actually
my eye goes back up to add3, right,

304
00:16:29.342 --> 00:16:30.398
like I have to.

305
00:16:30.398 --> 00:16:35.107
And so we get this false sense
that JavaScript's thread

306
00:16:35.107 --> 00:16:38.624
goes back up into functionCreator().

307
00:16:38.624 --> 00:16:43.079
It definitely does not, and
huge shout out to Alex for stressing that,

308
00:16:43.079 --> 00:16:47.800
by saying actually, it goes and
looks what was saved, in generatedFunc.

309
00:16:47.800 --> 00:16:50.180
Which was the definition of code of add3.

310
00:16:50.180 --> 00:16:56.180
In fact, this f just represents the code
of add3 being saved now in global,

311
00:16:56.180 --> 00:16:58.160
there ain't no going back
into functionCreator().

312
00:16:58.160 --> 00:16:59.610
That's done, that's gone.

313
00:16:59.610 --> 00:17:04.290
Instead we're going and looking at the
code written here, which was roughly num

314
00:17:04.290 --> 00:17:09.440
and then return out numb+3, roughly.

315
00:17:09.440 --> 00:17:11.763
That's where we go and look,
yeah, go ahead, Virginia.

316
00:17:11.763 --> 00:17:12.719
&gt;&gt; Virginia: Just a quick question.

317
00:17:12.719 --> 00:17:15.989
So when you say return add3,
you're saying,

318
00:17:15.989 --> 00:17:19.026
it is it doing a literal
copy of add3 there?

319
00:17:19.026 --> 00:17:21.029
&gt;&gt; Will Sentance: Okay.
&gt;&gt; Virginia: So that when I go and say,

320
00:17:21.029 --> 00:17:25.826
like I say, generateFunc(2) is equal
to add3, so those two different

321
00:17:25.826 --> 00:17:29.401
copies in memory of that function A-
&gt;&gt; Will Sentance: GeneratedFunc-

322
00:17:29.401 --> 00:17:30.678
&gt;&gt; Virginia: So say go back and say,

323
00:17:30.678 --> 00:17:33.779
generateFunc(2) equals
two function generator.

324
00:17:33.779 --> 00:17:36.346
&gt;&gt; Will Sentance: FunctionCreator() being-
&gt;&gt; Virginia: That same-

325
00:17:36.346 --> 00:17:37.760
&gt;&gt; Will Sentance: Even though never being?

326
00:17:39.922 --> 00:17:41.885
&gt;&gt; Will Sentance: Do you see how
important it is to get that technical

327
00:17:41.885 --> 00:17:42.830
communication right?

328
00:17:42.830 --> 00:17:46.701
So let's go into Virginia's question
just a second once you got through this,

329
00:17:46.701 --> 00:17:50.107
but I want you to think Virginia
before we ask the question, you said,

330
00:17:50.107 --> 00:17:54.070
if I went back and wrote generatedFunc(2)
is equal to functionCreator().

331
00:17:54.070 --> 00:17:55.850
&gt;&gt; Virginia: Well calling
functionCreator().

332
00:17:55.850 --> 00:17:58.721
&gt;&gt; Will Sentance: So important, we'll come
back to the question in a second Virginia,

333
00:17:58.721 --> 00:18:01.690
I promise but just yeah, we'll come
back to the question in one second,

334
00:18:01.690 --> 00:18:02.880
I promise Virginia.

335
00:18:02.880 --> 00:18:06.135
But for now, let's stay in generatedFunc.

336
00:18:06.135 --> 00:18:10.233
We're running it, everyone together,
generatedFunc is the function

337
00:18:10.233 --> 00:18:15.081
definition that was originally known when
it was inside of functionCreator() as-

338
00:18:15.081 --> 00:18:16.071
&gt;&gt; Virginia: Add3.

339
00:18:16.071 --> 00:18:18.300
&gt;&gt; Will Sentance: Yeah, good, exactly.

340
00:18:18.300 --> 00:18:20.310
And [LAUGH] so, into it we go.

341
00:18:21.410 --> 00:18:25.950
And, who said function multiplied by two?

342
00:18:25.950 --> 00:18:28.390
That was a good throwback
reference if someone said that.

343
00:18:28.390 --> 00:18:29.870
All right, into it we go.

344
00:18:31.040 --> 00:18:34.590
And unfortunately, although we
don't have to, we can go look here.

345
00:18:34.590 --> 00:18:38.083
What's the parameter to which the two
is gonna be assigned Michael?

346
00:18:38.083 --> 00:18:38.864
&gt;&gt; Michael: Num.
&gt;&gt; Will Sentance: Num,

347
00:18:38.864 --> 00:18:43.094
raise your hand if you looked back into
functionCreator() to figure that out.

348
00:18:43.094 --> 00:18:45.568
Well of course we all did, we can't
memorize all functions coming out.

349
00:18:45.568 --> 00:18:49.888
But I wish we could sort of see in
console log generatedFunc in that middle,

350
00:18:49.888 --> 00:18:54.691
in between those two lines, we should
almost restrict ourselves, make ourselves

351
00:18:54.691 --> 00:18:59.578
console log generatedFunc to figure out
what the code is we're running down there.

352
00:18:59.578 --> 00:19:03.226
So that we don't think of going back into
our code where we initially saved it

353
00:19:03.226 --> 00:19:06.483
because it ain't in there,
we don't get to thread back into that.

354
00:19:06.483 --> 00:19:09.866
Okay, but all right, num is two,

355
00:19:09.866 --> 00:19:14.301
let me do result which
is 2+3 which is 5 and

356
00:19:14.301 --> 00:19:18.399
then we return the value result in 2.

357
00:19:18.399 --> 00:19:21.260
Why did I call them both results?

358
00:19:21.260 --> 00:19:22.770
Dear, I thought I changed that.

359
00:19:22.770 --> 00:19:28.101
Return the value result, everybody,
into what global constant also called?

360
00:19:28.101 --> 00:19:28.748
&gt;&gt; Alex: Results.

361
00:19:28.748 --> 00:19:32.667
&gt;&gt; Will Sentance: That's bad
explanation by me, I apologize.

362
00:19:32.667 --> 00:19:35.354
Note these are in different domains and so

363
00:19:35.354 --> 00:19:38.513
they're not gonna override each other,
okay.

364
00:19:41.538 --> 00:19:43.428
&gt;&gt; Will Sentance: What was I gonna ask?

365
00:19:44.490 --> 00:19:46.720
That's what I was gonna say.

366
00:19:46.720 --> 00:19:50.620
We're gonna come to thumbs where
Virginia is gonna raise her question.

367
00:19:50.620 --> 00:19:51.900
Thumbs on in a moment.

368
00:19:51.900 --> 00:19:54.800
We saved code functionCreator().

369
00:19:54.800 --> 00:19:56.090
There it is.

370
00:19:56.090 --> 00:20:00.330
We then saved a label generatedFunc for

371
00:20:00.330 --> 00:20:05.420
whatever came from a one time
running of functionCreator().

372
00:20:05.420 --> 00:20:08.120
There's the params to say,
go run functionCreator().

373
00:20:08.120 --> 00:20:12.170
Into we went,
we created a brand new function add3 and

374
00:20:12.170 --> 00:20:17.320
then rather than using it,
we returned out its code and

375
00:20:17.320 --> 00:20:19.950
stored it under a new label generatedFunc.

376
00:20:19.950 --> 00:20:22.012
And from then on forevermore,

377
00:20:22.012 --> 00:20:26.640
generatedFunc cares nothing
about functionCreator().

378
00:20:26.640 --> 00:20:30.764
It only cares about the add3
function that's now stored in it.

379
00:20:30.764 --> 00:20:35.263
So we ran it and
we ran generatedFunc and it's just add3.

380
00:20:35.263 --> 00:20:36.100
We can just do it.

381
00:20:36.100 --> 00:20:38.952
It feels weird but we didn't put
prands on the end, no problem.

382
00:20:38.952 --> 00:20:40.058
No problem.

383
00:20:40.058 --> 00:20:44.100
And it's running add3, I'll put two
into it, and it goes num is two.

384
00:20:44.100 --> 00:20:46.280
Result is 2 plus 3 is 5.

385
00:20:46.280 --> 00:20:51.746
Return our result into
global constant result.

386
00:20:51.746 --> 00:20:56.106
Okay, folk, you might be thinking
why the hell did we do this?

387
00:20:56.106 --> 00:20:58.859
Why the hell did we save a function
we could have declared globally

388
00:20:58.859 --> 00:20:59.616
inside another?

389
00:20:59.616 --> 00:21:04.586
Well, we'll see that gives our functions
the biggest superpower in JavaScript.

