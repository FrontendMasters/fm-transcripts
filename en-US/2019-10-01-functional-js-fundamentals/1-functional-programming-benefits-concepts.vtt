WEBVTT

1
00:00:00.000 --> 00:00:02.579
&gt;&gt; Will Sentance: But take a look at this.

2
00:00:02.579 --> 00:00:07.363
We can produce a beautiful
to do list of our code.

3
00:00:07.363 --> 00:00:08.885
Here it is.

4
00:00:08.885 --> 00:00:15.529
Here in our quiz game, we've taken in
an object here with the name Will and

5
00:00:15.529 --> 00:00:19.828
score three and
we grabbed the player's name.

6
00:00:19.828 --> 00:00:21.609
We then take their first name.

7
00:00:21.609 --> 00:00:23.645
We're then gonna properCase it.

8
00:00:23.645 --> 00:00:28.192
We're then gonna prepend
a label saying this is a user.

9
00:00:28.192 --> 00:00:33.777
We're then gonna create a dom element or
a an element ready with that data in it.

10
00:00:33.777 --> 00:00:37.644
And we can then take that and
render it to the web page.

11
00:00:37.644 --> 00:00:40.504
And people, look at the beauty of this.

12
00:00:40.504 --> 00:00:43.024
Look at this beautiful
readable style of code.

13
00:00:43.024 --> 00:00:48.262
No mysteries here what our
code is actually doing.

14
00:00:48.262 --> 00:00:53.052
But to do so is gonna require us to
wrangle our code out of the mini baby

15
00:00:53.052 --> 00:00:58.531
blocks of code, our little mini functions
in some pretty interesting ways.

16
00:00:58.531 --> 00:01:04.207
It's gonna require us to rejoin those
lines of code up into full size tasks.

17
00:01:04.207 --> 00:01:06.559
We see a preview of it here.

18
00:01:06.559 --> 00:01:10.240
We're gonna make sure that those little
blocks of code are really reusable.

19
00:01:10.240 --> 00:01:12.620
Once you break the task
down to little baby steps,

20
00:01:12.620 --> 00:01:15.235
you can actually reuse those
steps all over the place.

21
00:01:15.235 --> 00:01:17.851
But if you're gonna be reusing
them all over the place,

22
00:01:17.851 --> 00:01:21.479
you probably wanna make sure they're
independent of anything around them.

23
00:01:21.479 --> 00:01:24.263
And that's exactly what we're
gonna have to do today.

24
00:01:24.263 --> 00:01:28.255
We're gonna start off with higher order
functions, and function composition.

25
00:01:28.255 --> 00:01:32.624
As I said, all those little atoms of
code can be reused all over the place.

26
00:01:32.624 --> 00:01:36.670
How we combine them up is gonna
depend on higher order functions and

27
00:01:36.670 --> 00:01:38.194
function composition.

28
00:01:38.194 --> 00:01:41.042
Most of those tasks,
things like implementing a number,

29
00:01:41.042 --> 00:01:43.666
looping through an array,
they're typical tasks.

30
00:01:43.666 --> 00:01:44.846
We can couple them up again.

31
00:01:44.846 --> 00:01:45.570
Use them again.

32
00:01:45.570 --> 00:01:48.529
Write them once, keep it dry,
don't repeat yourself.

33
00:01:48.529 --> 00:01:49.929
Use them again.

34
00:01:52.251 --> 00:01:55.977
&gt;&gt; Will Sentance: As I say, if we're not
going to be using that functionality once

35
00:01:55.977 --> 00:02:00.255
in one place, but all over the place,
well, we better hope that they're

36
00:02:00.255 --> 00:02:03.782
independent and not relying on
bits of data outside of them.

37
00:02:03.782 --> 00:02:09.155
We're gonna need to understand purity
of functions and state immutability.

38
00:02:09.155 --> 00:02:12.621
And if we're gonna be coupling up code and

39
00:02:12.621 --> 00:02:18.763
have those perhaps be running one after
another, not controlled by us but

40
00:02:18.763 --> 00:02:24.210
controlled by some other functions,
we may need to do some pretty

41
00:02:24.210 --> 00:02:29.581
interesting things that adjust
our existing saved functions.

42
00:02:29.581 --> 00:02:31.733
Maybe give them extra powers.

43
00:02:31.733 --> 00:02:34.950
Function decoration with
the help of closure and

44
00:02:34.950 --> 00:02:40.215
partial application with the help of
closure are gonna be our main techniques.

45
00:02:40.215 --> 00:02:45.307
But if we can do it, we're gonna end
up with code that is more readable.

46
00:02:45.307 --> 00:02:50.932
Every single line, so beautiful.

47
00:02:50.932 --> 00:02:55.546
I know exactly what it's doing,
easy to debug.

48
00:02:55.546 --> 00:02:59.789
Every single line nicely labeled, and
an individual unit whose only consequence

49
00:02:59.789 --> 00:03:03.060
is gonna be on the next slide,
not the rest of the application.

50
00:03:03.060 --> 00:03:05.668
No mysteries of what each line does and

51
00:03:05.668 --> 00:03:08.608
the risk of it damaging
the rest of our app.

52
00:03:08.608 --> 00:03:10.979
And easy to add features.

53
00:03:10.979 --> 00:03:13.991
We take these little baby functions,
these little baby units,

54
00:03:13.991 --> 00:03:15.339
we combine them all back up.

55
00:03:15.339 --> 00:03:17.018
We don't have to rewrite the components.

56
00:03:17.018 --> 00:03:20.331
We're just drawing up
pre-written components.

57
00:03:20.331 --> 00:03:22.860
And that's exactly what
we're gonna see today.

58
00:03:22.860 --> 00:03:28.193
It's gonna allow us to build out
applications where functions are reusable,

59
00:03:28.193 --> 00:03:33.850
versatile, flexible little portions of
code, independent, self contained and

60
00:03:33.850 --> 00:03:39.140
predictable steps, passing data from one
to the next to the next to the next.

61
00:03:39.140 --> 00:03:46.265
But it all starts with us being confident
with the core principles of JavaScript.

