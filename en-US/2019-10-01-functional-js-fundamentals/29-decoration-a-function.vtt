WEBVTT

1
00:00:00.050 --> 00:00:04.060
&gt;&gt; Will Sentance: Here we go, Seth, line
one my friend, what are we doing here?

2
00:00:04.060 --> 00:00:05.129
Take it away.

3
00:00:05.129 --> 00:00:06.666
&gt;&gt; Seth: During a function called oncify.

4
00:00:06.666 --> 00:00:12.309
&gt;&gt; Will Sentance: Excellent,
into global memory, it goes, there it is.

5
00:00:12.309 --> 00:00:16.208
oncify is saved.

6
00:00:16.208 --> 00:00:17.912
Next line, Jasmine?

7
00:00:17.912 --> 00:00:21.090
&gt;&gt; Jasmine: Declaring
multiplyBy2 as a function.

8
00:00:21.090 --> 00:00:24.401
&gt;&gt; Will Sentance: There it is,
multiplyBy2 is a function.

9
00:00:24.401 --> 00:00:29.052
It takes in, there it is,
it's a function 0 with input of num and

10
00:00:29.052 --> 00:00:31.603
the result of num by 2, next line?

11
00:00:31.603 --> 00:00:35.449
&gt;&gt; Seth: [INAUDIBLE]
&gt;&gt; Will Sentance: [LAUGH] That's exactly,

12
00:00:35.449 --> 00:00:37.900
he knew what I was gonna ask.

13
00:00:37.900 --> 00:00:41.409
Anyway, left-hand side, yes.

14
00:00:41.409 --> 00:00:44.681
&gt;&gt; Nesh: Yep, left-hand,
the OncifiedMultiplyBy2.

15
00:00:44.681 --> 00:00:46.272
&gt;&gt; Will Sentance: Absolutely, and

16
00:00:46.272 --> 00:00:51.682
everybody who sees these things
that oncify is gonna somehow

17
00:00:51.682 --> 00:00:57.680
mutate as it multiplyBy2 to make
it limited to only run once.

18
00:00:57.680 --> 00:01:00.540
Can I edit functions of they been saved,
Virginia?

19
00:01:00.540 --> 00:01:01.230
&gt;&gt; Jasmine: No.

20
00:01:01.230 --> 00:01:05.172
&gt;&gt; Will Sentance: No, so instead they're
going to trick the reader into thinking

21
00:01:05.172 --> 00:01:09.120
it's edited, but in reality,
and that's a problem, right?

22
00:01:09.120 --> 00:01:11.856
It's gonna be more readable in a sense but
we're not gonna know how it's working

23
00:01:11.856 --> 00:01:13.870
under the hood and
therefore, hard to debug.

24
00:01:13.870 --> 00:01:16.508
We will know.
We're gonna make oncify multipleBy2.

25
00:01:16.508 --> 00:01:19.160
It's a brand new function with a backpack.

26
00:01:19.160 --> 00:01:22.989
And I have a feeling we're gonna
store the multiplyBy2 function

27
00:01:22.989 --> 00:01:25.576
into OncifiedMultiplyBy2's backpack.

28
00:01:25.576 --> 00:01:29.310
We're gonna store more
than just data there.

29
00:01:29.310 --> 00:01:33.675
We can store functionality in
OncifiedMultiplyBy2's backpack.

30
00:01:33.675 --> 00:01:39.320
OncifiedMultiplyBy2 is going to
be the return value of calling,

31
00:01:43.148 --> 00:01:47.073
&gt;&gt; Will Sentance: Calling oncify on

32
00:01:47.073 --> 00:01:50.740
multiplyBy2.

33
00:01:50.740 --> 00:01:52.830
There it is, everyone together.

34
00:01:52.830 --> 00:01:55.943
A brand new-
&gt;&gt; Execution context.

35
00:01:55.943 --> 00:01:57.517
&gt;&gt; Will Sentance: Beautiful, here it is.

36
00:01:57.517 --> 00:02:01.477
Not a huge one,
because its main job, people,

37
00:02:01.477 --> 00:02:07.423
is to setup a function that will be
stored into OncifiedMultiplyBy2.

38
00:02:07.423 --> 00:02:15.048
And who has two key things attached to it
in its backpack, in its persistent memory.

39
00:02:15.048 --> 00:02:16.945
Functionality multipleBy2 and

40
00:02:16.945 --> 00:02:20.133
account to keep track of how
many times it's being run.

41
00:02:20.133 --> 00:02:22.650
That's what we're doing inside oncify.

42
00:02:22.650 --> 00:02:26.687
So let's go into it, and
the local memory what is the first thing,

43
00:02:26.687 --> 00:02:29.840
Michael, inside of oncify's local memory?

44
00:02:29.840 --> 00:02:30.560
&gt;&gt; Micheal: Counter.

45
00:02:30.560 --> 00:02:32.040
&gt;&gt; Will Sentance: That's a second thing.

46
00:02:32.040 --> 00:02:33.810
What's the first thing we need?

47
00:02:33.810 --> 00:02:36.230
&gt;&gt; Micheal: Right, convertMe.
&gt;&gt; Will Sentance: Exactly, this parameter,

48
00:02:36.230 --> 00:02:40.194
convertMe, which has stored only,
what, Michael?

49
00:02:40.194 --> 00:02:40.971
&gt;&gt; Micheal: multiplyBy2.

50
00:02:40.971 --> 00:02:44.295
&gt;&gt; Will Sentance: The entire
multiplyBy2 functionality.

51
00:02:44.295 --> 00:02:49.473
There it is, with input of num and
return value of num by 2.

52
00:02:49.473 --> 00:02:51.771
All right, there's counter.

53
00:02:51.771 --> 00:02:56.432
And finally, the final thing,
Andrew, that we do inside of oncify,

54
00:02:56.432 --> 00:03:01.259
the bigger auto, the penultimate thing,
the big thing we save is what?

55
00:03:01.259 --> 00:03:02.100
&gt;&gt; Andrew: The function.

56
00:03:02.100 --> 00:03:03.930
&gt;&gt; Will Sentance: The function known as-
&gt;&gt; Andrew: Inner.

57
00:03:03.930 --> 00:03:05.450
&gt;&gt; Will Sentance: Inner,
there it is, there it is.

58
00:03:10.840 --> 00:03:11.820
We miss something.

59
00:03:11.820 --> 00:03:15.210
When I save a function inside the running
another function, Seth, what also happens.

60
00:03:15.210 --> 00:03:17.337
&gt;&gt; Will Sentance: When I say you, Jasmine,

61
00:03:17.337 --> 00:03:22.187
a function inner inside the running
of oncify it gets what?

62
00:03:22.187 --> 00:03:24.240
&gt;&gt; Jasmine: An execution contact.

63
00:03:24.240 --> 00:03:25.284
&gt;&gt; Will Sentance: When I save it,
definitely not.

64
00:03:25.284 --> 00:03:26.360
&gt;&gt; Jasmine: Get a backpack.

65
00:03:27.690 --> 00:03:30.982
&gt;&gt; Will Sentance: I get what?
A link, I wouldn't get hold of

66
00:03:30.982 --> 00:03:36.290
the backpack, I get a link to
all the surrounding memory.

67
00:03:36.290 --> 00:03:42.815
Meaning, Sam,
when I return the functionality

68
00:03:42.815 --> 00:03:50.220
known as inner out into what global label,
Sam?

69
00:03:50.220 --> 00:03:54.270
The functionality declared
inside of oncify is inner,

70
00:03:54.270 --> 00:03:57.082
it gets returned out into
what global label, Sam?

71
00:03:57.082 --> 00:03:59.470
&gt;&gt; Sam: Oncified.
&gt;&gt; Will Sentance: OncifiedMultiplyBy2.

72
00:03:59.470 --> 00:04:04.378
When I return it out, out it comes,

73
00:04:04.378 --> 00:04:09.132
it was born as inner, there it is.

74
00:04:09.132 --> 00:04:14.600
It was born as inner,
what's it bring with it, Virginia?

75
00:04:14.600 --> 00:04:16.032
&gt;&gt; Virginia: The backpack.

76
00:04:16.032 --> 00:04:20.138
&gt;&gt; Will Sentance: The backpack,
exactly, attached on to it.

77
00:04:20.138 --> 00:04:23.712
And look at what's inside of it.

78
00:04:23.712 --> 00:04:28.683
It's got,
&gt;&gt; Will Sentance: What's it got inside

79
00:04:28.683 --> 00:04:30.509
of it, Jasmine?

80
00:04:35.448 --> 00:04:38.070
&gt;&gt; Seth: What's inside
the functions backpack?

81
00:04:38.070 --> 00:04:39.148
&gt;&gt; Jasmine: multiplyBy2.

82
00:04:39.148 --> 00:04:41.880
&gt;&gt; Will Sentance: multiplyBy2.

83
00:04:41.880 --> 00:04:44.465
That's fantastic, right?

84
00:04:44.465 --> 00:04:49.433
Because we want this OncifiedMultiplyBy2

85
00:04:49.433 --> 00:04:54.160
to have the ability to run multiplyBy2.

86
00:04:54.160 --> 00:04:54.670
Is it?

87
00:04:54.670 --> 00:04:57.324
Is OncifiedMultiplyBy2 multiplyBy2?

88
00:04:57.324 --> 00:04:58.840
Uh-uh, uh-uh,

89
00:04:58.840 --> 00:05:04.920
it's a brand new function who inner
that has a backpack into which we store.

90
00:05:05.940 --> 00:05:10.393
Whatever we pass into oncify in which
that function inner was created and

91
00:05:10.393 --> 00:05:13.173
then pull that stuff out
on the back of inner.

92
00:05:13.173 --> 00:05:17.253
Inner's only job is to determine
by looking in its backpack,

93
00:05:17.253 --> 00:05:20.476
inner bites new name, OncifiedMultiplyBy2.

94
00:05:20.476 --> 00:05:24.445
His only job is to determine
looking into his backpack,

95
00:05:24.445 --> 00:05:29.095
am I allowed to run from the backpack
the multiplyBy2 function?

96
00:05:29.095 --> 00:05:33.068
[SOUND] Okay, what's the other thing,
Jasmine, in the backpack?

97
00:05:33.068 --> 00:05:34.460
&gt;&gt; Jasmine: Actually I
had a question first.

98
00:05:34.460 --> 00:05:35.252
&gt;&gt; Will Sentance: Hold on one second,
first,

99
00:05:35.252 --> 00:05:36.671
what is the other thing in the backpack,
Jasmine?

100
00:05:36.671 --> 00:05:37.403
&gt;&gt; Jasmine: The counter.

101
00:05:37.403 --> 00:05:39.970
&gt;&gt; Will Sentance: The counter
is set to what?

102
00:05:39.970 --> 00:05:41.120
&gt;&gt; Jasmine: To 0.

103
00:05:41.120 --> 00:05:42.290
&gt;&gt; Will Sentance: Set to 0.

104
00:05:42.290 --> 00:05:43.210
Go ahead, Jasmine.

105
00:05:43.210 --> 00:05:48.680
&gt;&gt; Jasmine: So the backpack is created
once the inner function is created.

106
00:05:48.680 --> 00:05:51.830
&gt;&gt; Will Sentance: As soon as inner
is created it gets a link to exactly

107
00:05:51.830 --> 00:05:53.180
the surrounding local memory.

108
00:05:53.180 --> 00:05:58.440
When inner gets returned out
of running oncify into where?

109
00:05:58.440 --> 00:06:01.188
&gt;&gt; Jasmine: Oncified-
&gt;&gt; Will Sentance: OncifiedMultiplyBy2.

110
00:06:01.188 --> 00:06:04.970
It pulls with it all that data, exactly.

111
00:06:04.970 --> 00:06:07.113
And what is that data?

112
00:06:07.113 --> 00:06:14.028
Well, it's the function we want to convert
into being a function with a memory.

113
00:06:14.028 --> 00:06:19.116
And it's the counter that's
gonna allow us to keep track of

114
00:06:19.116 --> 00:06:25.545
whether multiplyBy2 has been run
before inside OncifiedMultiplyBy2.

115
00:06:25.545 --> 00:06:29.528
All right, and this execution context,
everybody this point?

116
00:06:29.528 --> 00:06:33.171
Gone, exactly.

117
00:06:33.171 --> 00:06:37.610
Okay, now, things get interesting.

118
00:06:38.870 --> 00:06:41.940
David, what am I calling next?

119
00:06:41.940 --> 00:06:44.571
I've saved OncifiedMultiplyBy2,
and so I now-

120
00:06:44.571 --> 00:06:45.330
&gt;&gt; David: You're invoking it.

121
00:06:45.330 --> 00:06:47.280
&gt;&gt; Will Sentance: I'm invoking it.

122
00:06:47.280 --> 00:06:55.710
There it is, OncifiedMultiplyBy2

123
00:06:55.710 --> 00:07:00.180
with the input of 10.

124
00:07:00.180 --> 00:07:01.500
Now, the reader looks at that and

125
00:07:01.500 --> 00:07:05.950
goes, it's multiplyBy2,
I'm gonna run multiplyBy2.

126
00:07:05.950 --> 00:07:08.724
We know the difference,
we know the reality.

127
00:07:08.724 --> 00:07:12.567
Instead what function
are we really running,

128
00:07:12.567 --> 00:07:16.320
David, when we run OncifiedMultiplyBy2?

129
00:07:16.320 --> 00:07:19.660
&gt;&gt; David: Inner.
&gt;&gt; Will Sentance: Inner, exactly.

130
00:07:19.660 --> 00:07:23.404
And thank goodness we all,
because inner has what?

131
00:07:23.404 --> 00:07:25.280
&gt;&gt; David: A backpack.

132
00:07:25.280 --> 00:07:26.320
&gt;&gt; Will Sentance: A backpack.

133
00:07:26.320 --> 00:07:28.475
And if I want to limit a function running,

134
00:07:28.475 --> 00:07:30.950
I need to remember it's
previously being run.

135
00:07:30.950 --> 00:07:35.551
Meaning I need a backpack to count
up that it's previously being run.

136
00:07:35.551 --> 00:07:39.223
And then to look at and
check how many times have I run inside of

137
00:07:39.223 --> 00:07:44.265
OncifiedMultiplyBy2 with the inner,
whatever I wanna run, which in this case,

138
00:07:44.265 --> 00:07:49.539
looks like it's going to be multiplyBy2,
it's gonna be run in the label convertMe.

139
00:07:49.539 --> 00:07:54.480
I'm only gonna allow it to run as
long as my backpack counter is 0.

140
00:07:54.480 --> 00:07:59.970
I'm editing my function to make it
more reusable in new situations.

141
00:08:01.040 --> 00:08:05.339
Okay, let's open the execution context and
this,

142
00:08:05.339 --> 00:08:09.549
people, this is,
let's put it on the call stack.

143
00:08:11.256 --> 00:08:15.662
&gt;&gt; Will Sentance: It's that call stack,
we're in global.

144
00:08:15.662 --> 00:08:23.126
And we now execute OncifiedMultiplyBy2
with the input of 10.

145
00:08:23.126 --> 00:08:31.540
Into it we go, I don't even know if I'd
have room here but okay, into it we go.

146
00:08:31.540 --> 00:08:33.363
And in my local memory.

147
00:08:33.363 --> 00:08:38.272
The reason it's gonna be so
challenging is we're gonna

148
00:08:38.272 --> 00:08:42.979
be bouncing back and
forwards between the backpack.

149
00:08:42.979 --> 00:08:46.123
OncifiedMultiplyBy2, again,
Jasmine, was born as-

150
00:08:46.123 --> 00:08:46.842
&gt;&gt; Jasmine: Inner.

151
00:08:46.842 --> 00:08:48.825
&gt;&gt; Will Sentance: Inner, she's spot on.

152
00:08:48.825 --> 00:08:49.622
Gosh, here we go.

153
00:08:49.622 --> 00:08:55.132
In its backpack, it has everything we
need, the functionality we wanna run and

154
00:08:55.132 --> 00:08:59.420
a counter to limit how many times
that functionality can run.

155
00:08:59.420 --> 00:09:03.519
And then it is got the code to say,
go run the functionality in the backpack,

156
00:09:03.519 --> 00:09:05.776
convertMe, I can see it's gonna be run.

157
00:09:05.776 --> 00:09:09.787
Only if the counter is 0, and
then implement the counter.

158
00:09:09.787 --> 00:09:12.817
[SOUND] All right, here we go.

159
00:09:12.817 --> 00:09:17.310
David, first thing in local memory at 10-
&gt;&gt; David: Input.

160
00:09:17.310 --> 00:09:18.980
&gt;&gt; Will Sentance: Input,
what, on the parameter input.

161
00:09:18.980 --> 00:09:23.082
Excellent from David, there it is.

162
00:09:23.082 --> 00:09:27.307
Now, we hit our conditional.

163
00:09:27.307 --> 00:09:30.408
if counter 0, here we go.

164
00:09:30.408 --> 00:09:35.863
Where do I look for counter first, David?

165
00:09:35.863 --> 00:09:38.406
&gt;&gt; David: Local memory.

166
00:09:38.406 --> 00:09:39.960
&gt;&gt; Will Sentance: Do I find it?

167
00:09:39.960 --> 00:09:41.233
Where do I go to next, David?

168
00:09:41.233 --> 00:09:42.336
&gt;&gt; David: Backpack.

169
00:09:42.336 --> 00:09:45.264
&gt;&gt; Will Sentance: In the backpack of
the OncifiedMultiplyBy2 function,

170
00:09:45.264 --> 00:09:46.304
I'm calling that.

171
00:09:46.304 --> 00:09:50.827
It was born inside the oncification
of multiplyBy2 in which and

172
00:09:50.827 --> 00:09:54.859
it is created and
pull out multiplyBy2 in the backpack.

173
00:09:54.859 --> 00:09:56.783
And I go find counter is in did what,
David?

174
00:09:56.783 --> 00:09:57.978
&gt;&gt; David: 0.
&gt;&gt; Will Sentance: 0,

175
00:09:57.978 --> 00:10:00.873
I want to use a different color.

176
00:10:00.873 --> 00:10:03.552
Is,
&gt;&gt; Will Sentance: I put it from

177
00:10:03.552 --> 00:10:10.084
the backpack, therefore, I'm gonna use
it in pink, is 0, is 0 = 0, David?

178
00:10:10.084 --> 00:10:10.994
&gt;&gt; David: Yes.

179
00:10:10.994 --> 00:10:14.337
&gt;&gt; Will Sentance: And so
what line do I hit next, David?

180
00:10:14.337 --> 00:10:21.934
&gt;&gt; David: The first line inside of the
conditional, which is to define output.

181
00:10:21.934 --> 00:10:25.299
&gt;&gt; Will Sentance: Exactly.
Okay, hold on, hold on, hold on,

182
00:10:25.299 --> 00:10:26.744
give me a second.

183
00:10:26.744 --> 00:10:31.932
So output is going to be
the return of calling convertMe,

184
00:10:31.932 --> 00:10:35.743
with the input of the argument of input.

185
00:10:35.743 --> 00:10:36.910
My goodness, okay.

186
00:10:36.910 --> 00:10:39.542
What is convertMe, Anna?

187
00:10:39.542 --> 00:10:42.780
Where do I look for convertMe first, Anna?

188
00:10:44.549 --> 00:10:48.202
&gt;&gt; Seth: David, where do I look for
convertMe first?

189
00:10:48.202 --> 00:10:49.824
&gt;&gt; David: [INAUDIBLE]
&gt;&gt; Will Sentance: Exactly, of-

190
00:10:49.824 --> 00:10:52.194
&gt;&gt; David: Of the current execution code.

191
00:10:52.194 --> 00:10:53.321
&gt;&gt; Will Sentance: Which is?

192
00:10:53.321 --> 00:10:55.086
&gt;&gt; David: OncifiedMultiplyBy2.

193
00:10:55.086 --> 00:10:58.539
&gt;&gt; Will Sentance: Well done,
x with input of ten.

194
00:10:58.539 --> 00:11:00.303
Do I find convertMe in there?

195
00:11:00.303 --> 00:11:01.000
&gt;&gt; David: No.

196
00:11:01.000 --> 00:11:01.530
&gt;&gt; Will Sentance: No.

197
00:11:01.530 --> 00:11:03.953
Where do I look for it next?

198
00:11:03.953 --> 00:11:07.244
I'm running OncifiedMultiplyBy2, it has a-
&gt;&gt; David: Backpack.

199
00:11:07.244 --> 00:11:07.979
&gt;&gt; Will Sentance: Backpack,

200
00:11:07.979 --> 00:11:11.440
a permanent persistence store
of memory that I can use.

201
00:11:12.740 --> 00:11:15.143
What is that?
There you go, that I can use again and

202
00:11:15.143 --> 00:11:15.672
again.

203
00:11:15.672 --> 00:11:18.906
And where do I find convertMe is?

204
00:11:18.906 --> 00:11:19.888
&gt;&gt; David: In the backpack.

205
00:11:19.888 --> 00:11:23.233
&gt;&gt; Will Sentance: It is,
I grab it and I use it and it's what-

206
00:11:23.233 --> 00:11:26.939
&gt;&gt; David: It's a function multiplyBy2.

207
00:11:26.939 --> 00:11:28.967
&gt;&gt; Will Sentance: multiplyBy2.

208
00:11:28.967 --> 00:11:35.965
Look at that,
is my OncifiedMultiplyBy2 multiplyBy2?

209
00:11:35.965 --> 00:11:38.580
It is so far away from it.

210
00:11:38.580 --> 00:11:42.904
It is a function inner that we've created
inside of oncify in order that it had

211
00:11:42.904 --> 00:11:46.912
a permanent memory even though our
multiplyBy2 was not born with one.

212
00:11:46.912 --> 00:11:50.637
And then literally,
that permanent memory is where we store,

213
00:11:50.637 --> 00:11:52.405
the multiplyBy2 function.

214
00:11:52.405 --> 00:11:56.156
Because we defined inner adjacent to
that including the parameter argument

215
00:11:56.156 --> 00:11:58.452
combination of convertMe and multiplyBy2.

216
00:11:58.452 --> 00:12:01.579
So we return that in there
into OncifiedMultiplyBy2.

217
00:12:01.579 --> 00:12:04.500
There's our multiplyBy2
functions sitting happily.

218
00:12:04.500 --> 00:12:08.392
And we grab it, and now,
here's where I say it's the mind.

219
00:12:08.392 --> 00:12:11.484
I know this works, I'm very polite now,
is the mind F, there we go.

220
00:12:11.484 --> 00:12:15.598
Here's what I'm gonna say it is,
cuz look, we grab the function from

221
00:12:15.598 --> 00:12:19.859
OncifiedMultiplyBy2's backpack,
which was only there because when

222
00:12:19.859 --> 00:12:23.939
OncifiedMultiplyBy2 was created
as the inner inside of Oncified.

223
00:12:23.939 --> 00:12:28.107
We had multiplyBy2,
the functionality where it's a oncify in

224
00:12:28.107 --> 00:12:32.290
the convertMe parameter,
meaning [SOUND] it came out into here.

225
00:12:32.290 --> 00:12:38.345
Where do we get the thing we're gonna pass
in and actually multiply from, Jasmine?

226
00:12:38.345 --> 00:12:43.377
What are we gonna pass into
convertMe which is multiplyBy2?

227
00:12:43.377 --> 00:12:44.624
&gt;&gt; Jasmine: [INAUDIBLE]
&gt;&gt; Will Sentance: Which comes

228
00:12:44.624 --> 00:12:49.176
from OncifiedMultiplyBy2's
direct execution context.

229
00:12:49.176 --> 00:12:53.110
We're gonna grab it straight from there.

230
00:12:53.110 --> 00:12:56.260
The functionality that we're gonna run,
what's that?

231
00:12:56.260 --> 00:12:59.778
Oncified came from the backpack.

232
00:12:59.778 --> 00:13:03.981
The condition under which we're gonna
confirm we're allowed to run it,

233
00:13:03.981 --> 00:13:05.418
came from the backpack.

234
00:13:05.418 --> 00:13:10.429
And then the thing we're gonna run
multiplyBy2 came dynamically live

235
00:13:10.429 --> 00:13:15.120
in as the input into our pretend
OncifiedMultiplyBy2 function.

236
00:13:15.120 --> 00:13:20.395
So we as the reader are like, the 10
goes in, this must be just multiplyBy2.

237
00:13:20.395 --> 00:13:25.029
Uh-uh, uh-uh, uh-uh,
it's being passed through a layer in to

238
00:13:25.029 --> 00:13:29.275
a running of multiplyBy2
inside of OncifiedMultiplyBy2.

239
00:13:29.275 --> 00:13:33.236
OncifiedMultiplyBy2 is wrapping up,
it's inside, well,

240
00:13:33.236 --> 00:13:36.460
they call it decorating
the underlying function.

241
00:13:36.460 --> 00:13:40.705
Which we grab from the backpack,
and pull it through.

242
00:13:40.705 --> 00:13:42.449
[SOUND] Okay, output of that, Jasmine, is?

243
00:13:42.449 --> 00:13:43.291
&gt;&gt; Jasmine: 20.

244
00:13:43.291 --> 00:13:44.852
&gt;&gt; Will Sentance: 20,
and we store that where?

245
00:13:44.852 --> 00:13:45.877
&gt;&gt; Jasmine: Output.

246
00:13:45.877 --> 00:13:47.446
&gt;&gt; Will Sentance: Into output,
there is it, 20.

247
00:13:47.446 --> 00:13:52.050
And then the final, but
ultimate thing we do is what, Sam?

248
00:13:52.050 --> 00:13:53.510
&gt;&gt; Sam: Increment counter.
&gt;&gt; Will Sentance: We increment

249
00:13:53.510 --> 00:13:56.323
the backpack counter, my God.

250
00:13:56.323 --> 00:14:01.891
There it is, counter++, it's in
the backpack, we increment it to 1.

251
00:14:01.891 --> 00:14:04.992
And then finally, Jasmine, we do what?

252
00:14:04.992 --> 00:14:06.349
&gt;&gt; Jasmine: Return
&gt;&gt; Will Sentance: The value of-

253
00:14:06.349 --> 00:14:07.950
&gt;&gt; Jasmine: Which is 20.

254
00:14:07.950 --> 00:14:12.866
&gt;&gt; Will Sentance: Exactly, 20, we don't
store it anywhere, but there it is.

255
00:14:12.866 --> 00:14:14.150
Look at that, people.

256
00:14:14.150 --> 00:14:19.454
We created a function, well,
we didn't create a function,

257
00:14:19.454 --> 00:14:24.860
well, we did, but
we appeared to edit a multiplyBy2 function

258
00:14:24.860 --> 00:14:31.090
to create a function under a condition
of counter still being 0 worked.

259
00:14:31.090 --> 00:14:34.569
And appeared to look
just like multiplyBy2,

260
00:14:34.569 --> 00:14:37.341
it's called function decoration.

261
00:14:37.341 --> 00:14:43.350
It's profoundly significant, especially
in this model, but we're not done yet.

262
00:14:43.350 --> 00:14:46.708
Let's put OncifiedMultiplyBy2
off the call stack and

263
00:14:46.708 --> 00:14:49.285
run it again this time
with the input of 7.

264
00:14:49.285 --> 00:14:54.311
I remove it, put it back on, I just
wanna erase it all but put it back on.

265
00:14:54.311 --> 00:14:57.192
And let's run it again.

266
00:14:57.192 --> 00:15:03.576
OncifiedMultiplyBy2 input 7.

267
00:15:03.576 --> 00:15:08.495
New execution context, Andrew,

268
00:15:08.495 --> 00:15:12.570
into it we go, into it we go.

269
00:15:12.570 --> 00:15:18.799
And what's the first thing in
local memory given, Andrew,

270
00:15:18.799 --> 00:15:24.513
OncifiedMultiplyBy2 is really just-
&gt;&gt; Andrew: Input which is 7.

271
00:15:24.513 --> 00:15:25.818
&gt;&gt; Will Sentance: Input is 7.

272
00:15:25.818 --> 00:15:26.563
Input which is 7.

273
00:15:26.563 --> 00:15:29.187
And now, we do our check.

274
00:15:29.187 --> 00:15:31.075
if counter,
&gt;&gt; Will Sentance: Is 0.

275
00:15:31.075 --> 00:15:34.228
Counter in the local memory, Andrew?

276
00:15:34.228 --> 00:15:35.609
&gt;&gt; Andrew: No.
&gt;&gt; Will Sentance: No, where is it?

277
00:15:35.609 --> 00:15:37.897
&gt;&gt; Andrew: It's in the backpack.

278
00:15:37.897 --> 00:15:40.467
&gt;&gt; Will Sentance: And
what is the value counter?

279
00:15:40.467 --> 00:15:41.218
&gt;&gt; Andrew: 1.

280
00:15:41.218 --> 00:15:43.035
&gt;&gt; Will Sentance: And is that equal to 0?

281
00:15:43.035 --> 00:15:43.771
&gt;&gt; Andrew: No.

282
00:15:43.771 --> 00:15:47.499
&gt;&gt; Will Sentance: No, it's not,
so what do we auto return out?

283
00:15:47.499 --> 00:15:48.624
&gt;&gt; Andrew: Sorry.

284
00:15:48.624 --> 00:15:50.213
&gt;&gt; Will Sentance: We return out sorry.

285
00:15:50.213 --> 00:15:52.967
And there it is, people.

286
00:15:52.967 --> 00:15:58.804
We have here used giving functions
backpacks to actually edit the behavior or

287
00:15:58.804 --> 00:16:01.497
the apparent behavior, or sorry,

288
00:16:01.497 --> 00:16:06.182
apparently edit the behavior
of our multiplyBy2 function.

289
00:16:06.182 --> 00:16:10.992
Making it more reusable in
other places in our code.

