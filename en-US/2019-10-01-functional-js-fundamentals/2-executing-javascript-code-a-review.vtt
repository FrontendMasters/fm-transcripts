WEBVTT

1
00:00:01.743 --> 00:00:05.825
&gt;&gt; Will Sentance: If you have been to hard
parts before you know what about to do,

2
00:00:05.825 --> 00:00:10.616
we're about to go into what exactly
happens really when JavaScript runs

3
00:00:10.616 --> 00:00:11.261
my code.

4
00:00:11.261 --> 00:00:16.291
And it's gonna seem profoundly easy,
too easy, way [LAUGH] to easy.

5
00:00:16.291 --> 00:00:21.140
But we're gonna understand it properly so
that there's no mystery about what

6
00:00:21.140 --> 00:00:24.236
our code is doing when we
get to all the hard parts.

7
00:00:24.236 --> 00:00:26.605
Okay, here we go.

8
00:00:26.605 --> 00:00:30.391
When JavaScript runs our code,
here's some code,

9
00:00:30.391 --> 00:00:34.875
two things I said it does, one,
saving data, saving stuff.

10
00:00:34.875 --> 00:00:39.079
When you play a quiz game that data
your score, the last move you took,

11
00:00:39.079 --> 00:00:43.570
quiz questions, they're not like saved
on the view on the display that's

12
00:00:43.570 --> 00:00:46.730
where they render,
that's where they displayed.

13
00:00:46.730 --> 00:00:50.819
They're saved behind
the scenes in JavaScript.

14
00:00:50.819 --> 00:00:55.710
Well, JavaScript, therefore, needs
a store of data in which we store stuff,

15
00:00:55.710 --> 00:00:57.099
we call it the memory.

16
00:00:57.099 --> 00:01:01.887
And so with that in mind,
David what are we doing in this first line

17
00:01:01.887 --> 00:01:05.822
of code here in terms of
memory sort of storage space?

18
00:01:05.822 --> 00:01:08.537
And I'm going to put everything we store
over here, I'm gonna call it memory.

19
00:01:08.537 --> 00:01:12.708
And I'm gonna list it all off bump, bump,
bump, bump stuff we're storing as we go.

20
00:01:12.708 --> 00:01:16.182
So on those terms, David, what are we
doing here in the very first line of code?

21
00:01:16.182 --> 00:01:19.545
&gt;&gt; Alex: We're declaring
a variable named num.

22
00:01:19.545 --> 00:01:20.461
&gt;&gt; Will Sentance: Num.

23
00:01:20.461 --> 00:01:22.413
&gt;&gt; Alex: And we're giving it the value 3.

24
00:01:22.413 --> 00:01:24.605
&gt;&gt; Will Sentance: 3, perfect.

25
00:01:24.605 --> 00:01:29.505
That means from now on people anywhere
in my app you see num it's referring

26
00:01:29.505 --> 00:01:30.304
to that 3.

27
00:01:30.304 --> 00:01:34.031
Already we can see three lines of code,
that's okay.

28
00:01:34.031 --> 00:01:35.187
10,000?

29
00:01:37.579 --> 00:01:40.553
&gt;&gt; Will Sentance: This global memory,
they sometimes call it global state,

30
00:01:40.553 --> 00:01:41.209
saved data.

31
00:01:43.454 --> 00:01:47.249
&gt;&gt; Will Sentance: I don't know how good I
feel about globally saved stuff like this.

32
00:01:47.249 --> 00:01:51.683
Anyway, never the less
up next lets have Alex.

33
00:01:51.683 --> 00:01:54.462
Alex what are we doing in line two here?

34
00:01:54.462 --> 00:01:57.499
&gt;&gt; Alex: Declaring a variable
named multiplyBy2.

35
00:01:57.499 --> 00:02:01.179
&gt;&gt; Will Sentance: Ok so a label
multiplyBy2 and we're storing associated

36
00:02:01.179 --> 00:02:06.481
with that label here a whole block of code
it's in the kind of new style of writing.

37
00:02:06.481 --> 00:02:07.933
Well, writing what, Alex?

38
00:02:07.933 --> 00:02:09.073
&gt;&gt; Alex: Function.
&gt;&gt; Will Sentance: A function,

39
00:02:09.073 --> 00:02:10.938
excellent from Alex, a function.

40
00:02:10.938 --> 00:02:14.104
Now, it doesn't might a little nice
keyword function that tells me

41
00:02:14.104 --> 00:02:16.547
specifically its code but
we know it's a function,

42
00:02:16.547 --> 00:02:19.955
it's got the little parenthesis there,
that's gonna await an input.

43
00:02:19.955 --> 00:02:24.010
When we run multiplyBy2 that'll be filled
in, these are known as arrow functions,

44
00:02:24.010 --> 00:02:26.429
and then in the curly braces,
when the code is run,

45
00:02:26.429 --> 00:02:28.427
that well that's the code that gets run.

46
00:02:28.427 --> 00:02:31.425
Now, that's line two that JavaScript does.

47
00:02:31.425 --> 00:02:35.859
It grabs all of that code and saves it,
I'm not gonna write all the code out,

48
00:02:35.859 --> 00:02:40.152
but it does save it all, I'm gonna instead
put a little box here with an f in

49
00:02:40.152 --> 00:02:44.336
representing the code of the function,
and that's the input output.

50
00:02:44.336 --> 00:02:49.568
So what then, Anna, what is line 3 here?

51
00:02:49.568 --> 00:02:53.830
If that was line 2, saving multiplyBy2
is the code, what's line 3, Anna?

52
00:02:53.830 --> 00:02:58.858
&gt;&gt; Anna: It is declaring the variable
name and setting it equal to will.

53
00:02:58.858 --> 00:03:02.705
&gt;&gt; Will Sentance: Declaring the constant
name and setting equal to will.

54
00:03:02.705 --> 00:03:07.341
Notice what Anna did there she skipped
over the body of multiplyBy2, it saved,

55
00:03:07.341 --> 00:03:10.426
it's done, it's finished with,
unless we run it.

56
00:03:10.426 --> 00:03:13.110
By the way, we never run it,
it never gets done.

57
00:03:13.110 --> 00:03:14.890
It never even gets done.

58
00:03:14.890 --> 00:03:16.838
Excellent, thank you to Anna.

59
00:03:16.838 --> 00:03:20.751
People we've seen already two mega
parts of what JavaScript does.

60
00:03:20.751 --> 00:03:23.808
One, save stuff to memory,
there it is, and

61
00:03:23.808 --> 00:03:27.267
the other we didn't actually
explicitly state but

62
00:03:27.267 --> 00:03:32.111
I sort of hinted it earlier even is we
went through the code line by line.

63
00:03:32.111 --> 00:03:34.899
Finish on line one didn't
stop went to line two,

64
00:03:34.899 --> 00:03:39.263
didn't stop went to the next line,
that's known as a thread of execution.

65
00:03:39.263 --> 00:03:44.647
It threads its way down the page and
executes each line of code as we go,

66
00:03:44.647 --> 00:03:49.415
a lot of the time its saving is
stuck into memory, into store.

67
00:03:49.415 --> 00:03:53.750
Okay, those two things together are all
you need really to run JavaScript,

68
00:03:53.750 --> 00:03:56.730
a place to store the stuff and
the processing power to

69
00:03:56.730 --> 00:04:00.134
go through the code line by line,
the thread of execution.

70
00:04:00.134 --> 00:04:04.914
They're known together
as an execution context.

71
00:04:04.914 --> 00:04:09.937
Context is a space to do something,
well, to space to execute my code.

72
00:04:09.937 --> 00:04:13.320
All right, this known as
the global execution context.

73
00:04:13.320 --> 00:04:18.262
It's the one which we kick off when
we start running all of our code,

74
00:04:18.262 --> 00:04:22.250
and by the way,
anything in its memory is available for

75
00:04:22.250 --> 00:04:24.870
the whole rest of the application.

76
00:04:24.870 --> 00:04:28.742
This is in contrast to
the local execution context,

77
00:04:28.742 --> 00:04:33.936
which is a mini-version of this that
we create when we run a function.

78
00:04:33.936 --> 00:04:36.896
Cuz what’s a function but a mini-program.

79
00:04:36.896 --> 00:04:40.133
People actually call it that a sub
program of our overall program.

80
00:04:40.133 --> 00:04:42.859
A little mini-app within our overall app.

81
00:04:42.859 --> 00:04:45.739
And that’s exactly what
we’re gonna do down here.

82
00:04:45.739 --> 00:04:49.967
We’re gonna execute code that we
previously saved, we’re gonna run it.

83
00:04:49.967 --> 00:04:52.161
I’ve got my name will here.

84
00:04:52.161 --> 00:04:55.359
We jump straight down
instead to Virginia what?

85
00:04:55.359 --> 00:04:58.873
If you just start with the left-hand
side there, we're declaring what,

86
00:04:58.873 --> 00:05:02.738
after you declare multiplyBy2, we're
declaring what on the left-hand side?

87
00:05:02.738 --> 00:05:03.290
&gt;&gt; Virginia: Output.

88
00:05:03.290 --> 00:05:07.658
&gt;&gt; Will Sentance: We're declaring the
constant output, there is from Virginia.

89
00:05:07.658 --> 00:05:12.703
Virginia do we know what to
store in output at this point?

90
00:05:12.703 --> 00:05:14.171
Does Java know what to store?

91
00:05:14.171 --> 00:05:14.762
&gt;&gt; Virginia: Yes.

92
00:05:14.762 --> 00:05:15.494
&gt;&gt; Will Sentance: It does?

93
00:05:15.494 --> 00:05:18.147
&gt;&gt; Virginia: Well not yet.

94
00:05:18.147 --> 00:05:20.676
&gt;&gt; Will Sentance: Not yet
because that right-hand side there

95
00:05:20.676 --> 00:05:22.187
is unfinished business.

96
00:05:22.187 --> 00:05:27.478
It's an expression that needs
to be sent away to be executed.

97
00:05:27.478 --> 00:05:30.315
Thank you to David, for
our online audience,

98
00:05:30.315 --> 00:05:32.586
the whisper approach is excellent.

99
00:05:32.586 --> 00:05:34.210
[LAUGH] It needs to be executed.

100
00:05:34.210 --> 00:05:35.753
I thought it was perfect.

101
00:05:35.753 --> 00:05:41.793
It needs to be executed and we got to
get an output from it, a returned value.

102
00:05:41.793 --> 00:05:44.694
We're gonna go and
run the code of that function, and

103
00:05:44.694 --> 00:05:49.275
that little mini-program that little
mini-app, the multipleBy2 function, is

104
00:05:49.275 --> 00:05:53.939
gonna give us an output, some data, which
will then be stored into, well, output.

105
00:05:53.939 --> 00:05:57.770
Perfect, so for
now output is uninitialized,

106
00:05:57.770 --> 00:06:01.518
we don't even give it a value yet
it's blank.

107
00:06:01.518 --> 00:06:08.231
While we go ahead and run,
we go ahead and run, multiplyBy2.

108
00:06:08.231 --> 00:06:12.166
Virginia what symbols tell me that I've
gotta go and run multiplyBy2 here?

109
00:06:12.166 --> 00:06:16.476
What are our call symbols in
JavaScript to say, go do that code?

110
00:06:16.476 --> 00:06:17.160
&gt;&gt; Virginia: The parentheses.

111
00:06:17.160 --> 00:06:18.804
&gt;&gt; Will Sentance: The parentheses,
she's spot on.

112
00:06:18.804 --> 00:06:21.871
And we're passing in what, Sam?

113
00:06:21.871 --> 00:06:22.777
&gt;&gt; Sam: 3.

114
00:06:22.777 --> 00:06:24.133
&gt;&gt; Will Sentance: 3.
Num which is 3.

115
00:06:24.133 --> 00:06:27.519
And so
everybody we're executing a function.

116
00:06:30.088 --> 00:06:32.729
&gt;&gt; Will Sentance: I already told you
[LAUGH] when you execute a function we

117
00:06:32.729 --> 00:06:36.972
create a little mini-app to execute it,
it's got a memory and it's got the thread.

118
00:06:36.972 --> 00:06:40.519
So we only got one thread, can only do
one thing at a time in JavaScript, so

119
00:06:40.519 --> 00:06:44.082
it's gonna weave its way in and
start running the code and multiplyBy2.

120
00:06:44.082 --> 00:06:48.739
To do so we need something
called an execution context,

121
00:06:48.739 --> 00:06:51.026
excellent from Virginia.

122
00:06:51.026 --> 00:06:59.331
An execution context it is basically
what we just saw but now a mini-version.

123
00:06:59.331 --> 00:07:05.042
A mini-version of our overall program
just to run the multiplyBy2 function.

124
00:07:05.042 --> 00:07:09.757
It's got two parts the same as
the main one, a thread of execution,

125
00:07:09.757 --> 00:07:14.805
that is the computer goes through
the code of this function line by line,

126
00:07:14.805 --> 00:07:18.806
and a little mini-local memory just for
stuff we store.

127
00:07:18.806 --> 00:07:21.942
So by the way already we can
see how noise functions are,

128
00:07:21.942 --> 00:07:24.969
they break our main program
up into mini-programs.

129
00:07:24.969 --> 00:07:29.404
The problem is there may be 10,
15 lines of code in here.

130
00:07:29.404 --> 00:07:30.763
And you've seen those functions?

131
00:07:30.763 --> 00:07:34.635
They aren't much easier to understand
just cuz they're only 15 lines long,

132
00:07:34.635 --> 00:07:36.383
it's still full of computer code.

133
00:07:36.383 --> 00:07:39.832
And 15 of them, that's 15 by 15
dependencies, like that line,

134
00:07:39.832 --> 00:07:42.936
14 lines depend on that line,
14 lines depend on that line,

135
00:07:42.936 --> 00:07:45.874
14 lines depend on that line,
that's still pretty hard.

136
00:07:45.874 --> 00:07:48.875
But, let's go into it for now,
we'll see how to improve this, but

137
00:07:48.875 --> 00:07:50.044
let's go into it for now.

138
00:07:50.044 --> 00:07:53.494
What is the first thing inside this
execution context as it's known as?

139
00:07:53.494 --> 00:07:57.901
What's the first thing that we
pull into the execution context?

140
00:07:57.901 --> 00:07:58.805
I'm going to call on Andrew.

141
00:07:58.805 --> 00:08:00.482
&gt;&gt; Andrew: The variable?

142
00:08:00.482 --> 00:08:02.120
&gt;&gt; Will Sentance: The variable,
talk it out to me.

143
00:08:02.120 --> 00:08:03.359
&gt;&gt; Andrew: The input number.

144
00:08:03.359 --> 00:08:03.876
&gt;&gt; Will Sentance: Input number.

145
00:08:03.876 --> 00:08:06.770
We don't call that a variable so
much as a parameter.

146
00:08:06.770 --> 00:08:10.716
So I like to think of this as a,
this overall thing is a constant,

147
00:08:10.716 --> 00:08:13.069
people do still call them variables.

148
00:08:13.069 --> 00:08:15.885
Variable literally means you
can vary what you save in them.

149
00:08:15.885 --> 00:08:19.386
So I don't know if I wannna call it that,
but let's call it find a constant or

150
00:08:19.386 --> 00:08:20.716
you want one variable fine.

151
00:08:20.716 --> 00:08:26.012
I like to split that into two parts label,
value.

152
00:08:26.012 --> 00:08:28.964
Thing you can store,
label for thing you store.

153
00:08:28.964 --> 00:08:34.534
When you're passing in an actual
value to fill in a placeholder

154
00:08:34.534 --> 00:08:40.956
of your multiplyBy2 function,
as you say to create in local variable.

155
00:08:40.956 --> 00:08:44.176
That local label has got a special name.

156
00:08:44.176 --> 00:08:45.973
Virginia?

157
00:08:45.973 --> 00:08:46.576
&gt;&gt; Virginia: Parameter.

158
00:08:46.576 --> 00:08:48.252
&gt;&gt; Will Sentance: Parameter, excellent.

159
00:08:48.252 --> 00:08:51.412
There it is parameter,
argument, parameter, argument.

160
00:08:51.412 --> 00:08:55.576
Okay, Andrew now we hit the body
of multiplyBy2, what do we do?

161
00:08:58.117 --> 00:08:58.677
&gt;&gt; Andrew: Create result.

162
00:08:58.677 --> 00:09:00.809
&gt;&gt; Will Sentance: We create results and
assign to it?

163
00:09:00.809 --> 00:09:04.294
&gt;&gt; Andrew: Well executes, I guess that-
&gt;&gt; Will Sentance: Yeah, so

164
00:09:04.294 --> 00:09:07.275
assigned to result input number which is?

165
00:09:07.275 --> 00:09:07.877
&gt;&gt; Andrew: 6.

166
00:09:07.877 --> 00:09:10.726
&gt;&gt; Will Sentance: 6,
3 by 2 which is 6, there it is.

167
00:09:10.726 --> 00:09:14.669
And the final line says return result.

168
00:09:14.669 --> 00:09:19.116
And because this is gonna come up later I
wanna stress, what actually happens here

169
00:09:19.116 --> 00:09:22.994
is JavaScript holds return for
now cuz it doesn't know what to return.

170
00:09:22.994 --> 00:09:26.666
It knows it's gotta do something, but
hold that, and it looks at this and goes,

171
00:09:26.666 --> 00:09:27.322
what is this?

172
00:09:27.322 --> 00:09:30.840
And it gets it down to a value,
cuz you can only ever a return a value.

173
00:09:30.840 --> 00:09:33.618
And so it looks at this and
goes, what is result?

174
00:09:33.618 --> 00:09:34.622
What its value?

175
00:09:34.622 --> 00:09:36.457
Cuz that's definitely not
a thing that's a value.

176
00:09:36.457 --> 00:09:39.373
That's definitely something
that could be evaluated,

177
00:09:39.373 --> 00:09:42.419
turned into a value, but
it's not a value in its own right.

178
00:09:42.419 --> 00:09:45.543
And what is its value, Virginia?

179
00:09:45.543 --> 00:09:46.209
Actually, Jasmine?

180
00:09:46.209 --> 00:09:47.256
&gt;&gt; Jasmine: 6.

181
00:09:47.256 --> 00:09:47.779
&gt;&gt; Will Sentance: Is 6.

182
00:09:47.779 --> 00:09:54.721
And so what actually gets returned out is
6 out into what global label, Jasmine?

183
00:09:54.721 --> 00:09:57.456
&gt;&gt; Jasmine: It gets put out into output.

184
00:09:57.456 --> 00:10:00.025
&gt;&gt; Will Sentance: Into output,
she's spot on, and there it is.

185
00:10:01.831 --> 00:10:07.364
&gt;&gt; Will Sentance: If you are experienced
senior developers you must be thinking,

186
00:10:07.364 --> 00:10:13.213
aha, I can tell that multiplyBy2
the input of 3 puts 6 in output.

187
00:10:14.421 --> 00:10:17.526
&gt;&gt; Will Sentance: But we hand wave,
as professors at college used to say,

188
00:10:17.526 --> 00:10:20.910
you hand wave, like sort of
understand things all the time.

189
00:10:20.910 --> 00:10:25.173
And if you build upon sort of
understanding of the fundamentals your

190
00:10:25.173 --> 00:10:28.709
next level up will only ever
be sort of understandings.

191
00:10:28.709 --> 00:10:32.644
If you have true clarity over what
the fundamentals are actually doing,

192
00:10:32.644 --> 00:10:36.074
you will your next up you can now
build upon solid foundations.

193
00:10:36.074 --> 00:10:37.871
And that's what we're gonna do today.

194
00:10:37.871 --> 00:10:43.063
All right, so our thread of execution
comes out of this function, we exit it.

195
00:10:43.063 --> 00:10:47.911
This whole function is now [SOUND]
deleted, its local memory's deleted,

196
00:10:47.911 --> 00:10:50.345
it's set for what got returned out.

197
00:10:50.345 --> 00:10:52.985
Again, I'm gonna be a little bit more
specific here because its come up

198
00:10:52.985 --> 00:10:53.651
again and again.

199
00:10:53.651 --> 00:10:58.043
The way JavaScript works is, I'll try and
keep this clean and neat, but

200
00:10:58.043 --> 00:11:01.643
when the functions output comes
out that little bit there,

201
00:11:01.643 --> 00:11:06.036
the running of multiplyBy2 with
the input of 3, actually turns into,

202
00:11:06.036 --> 00:11:09.512
before we move on from that line,
turns into the output.

203
00:11:09.512 --> 00:11:16.274
That's known as soon as evaluates to, let
me get it right, value turn into value.

204
00:11:16.274 --> 00:11:20.842
And remember, value, value, value,
even function saved code is value.

205
00:11:20.842 --> 00:11:24.105
Running of code, the command to
run code that's not a value.

206
00:11:24.105 --> 00:11:25.821
That's a command to go and
try and get a value.

207
00:11:25.821 --> 00:11:28.126
It'll literally turn into the output.

208
00:11:28.126 --> 00:11:31.237
And now we can easily see
output is assigned 6.

209
00:11:31.237 --> 00:11:34.056
Next line, we now come back out to

210
00:11:34.056 --> 00:11:38.807
global where we declare new
output is the return value.

211
00:11:38.807 --> 00:11:44.529
The return value of running multiplyBy2,
again.

212
00:11:44.529 --> 00:11:47.087
This time, people with
the input of everyone together?

213
00:11:47.087 --> 00:11:48.136
&gt;&gt; 10.

214
00:11:48.136 --> 00:11:49.048
&gt;&gt; Will Sentance: Well done.

215
00:11:49.048 --> 00:11:53.866
By the way, Frontend Masters team, Richard
Martin loves it when I do the group

216
00:11:53.866 --> 00:11:57.078
shout out because they have
to turn on all your mics,

217
00:11:57.078 --> 00:12:00.008
all at once,
it's their favorite thing to do.

218
00:12:00.008 --> 00:12:07.245
All right, as create, on that note,
we're executing a function multiplyBy2.

219
00:12:07.245 --> 00:12:11.144
What do we need to execute a function,
we a need a brand new?

220
00:12:11.144 --> 00:12:14.040
&gt;&gt; [CROSSTALK]
&gt;&gt; Will Sentance: That was horrible.

221
00:12:14.040 --> 00:12:16.351
[LAUGH] The words execution context.

222
00:12:16.351 --> 00:12:17.531
&gt;&gt; [LAUGH]
&gt;&gt; Will Sentance: I've

223
00:12:17.531 --> 00:12:18.101
done a few of these now.

224
00:12:18.101 --> 00:12:19.309
We need a brand new?

225
00:12:19.309 --> 00:12:21.441
&gt;&gt; Execution context.

226
00:12:21.441 --> 00:12:24.421
&gt;&gt; Will Sentance: Yeah, especially,
thank you very much for

227
00:12:24.421 --> 00:12:26.461
that great voluble clarity there.

228
00:12:26.461 --> 00:12:31.363
We're nothing going to actually create it
we'll just know that it's gonna return

229
00:12:31.363 --> 00:12:32.985
out 20 into new outputs.

230
00:12:32.985 --> 00:12:36.621
I made you go through all that people and
I didn't even draw out but or whatever,

231
00:12:36.621 --> 00:12:38.155
and there it is new outputs 20.

232
00:12:38.155 --> 00:12:40.787
So the thread of execution wove in,

233
00:12:40.787 --> 00:12:45.877
actually let me just use a different
pen for the thread of execution,

234
00:12:45.877 --> 00:12:50.210
it wove in, it wove out,
it wove in, and it wove back out.

235
00:12:50.210 --> 00:12:53.918
We didn't show this using context here,
we went into it, we came back out.

236
00:12:55.595 --> 00:12:58.053
&gt;&gt; Will Sentance: I wanna stress
one other thing with this,

237
00:12:58.053 --> 00:13:02.983
which I don't usually stress at this point
but it's gonna come up again and again.

238
00:13:02.983 --> 00:13:05.442
MultiplyBy2 I saved it not saying what,

239
00:13:05.442 --> 00:13:09.810
I really should've actually called
it this, multiply something by 2.

240
00:13:09.810 --> 00:13:14.846
And when I saved the code and
multiply something by 2,

241
00:13:14.846 --> 00:13:19.456
did I preset what value I
was gonna multiply by 2?

242
00:13:19.456 --> 00:13:20.150
Sam?

243
00:13:20.150 --> 00:13:20.896
&gt;&gt; Sam: No.

244
00:13:20.896 --> 00:13:21.420
&gt;&gt; Will Sentance: No.

245
00:13:21.420 --> 00:13:27.453
Already I can start to see one of the core
uses of my functions, save it once,

246
00:13:27.453 --> 00:13:32.849
use it again and again in different
scenarios with different data.

247
00:13:32.849 --> 00:13:41.214
When I run the function dynamically
live turn it into multiply 3 by 2.

248
00:13:41.214 --> 00:13:46.736
Dynamically live in that line
turn it into multiply 10 by 2.

249
00:13:46.736 --> 00:13:52.617
And it might turn out people that
we don't just want to dynamically

250
00:13:52.617 --> 00:13:58.512
set some of our data when we run
a function, rather when we save it.

251
00:13:58.512 --> 00:14:01.067
When we saved it we set it to,
we set 2 when we saved it,

252
00:14:01.067 --> 00:14:03.919
but we didn't set the other
value we're gonna multiply by.

253
00:14:06.063 --> 00:14:07.015
&gt;&gt; Will Sentance: Only
when we ran the function.

254
00:14:07.015 --> 00:14:11.162
It turns out that we may also want to only

255
00:14:11.162 --> 00:14:16.315
determine some of our
actual functionality when

256
00:14:16.315 --> 00:14:21.351
we run our function and
leave it TBD until then.

257
00:14:21.351 --> 00:14:25.155
And that's gonna be our very, very first
part of our functional programming

258
00:14:25.155 --> 00:14:27.211
paradigm, but we'll see it in a moment.

259
00:14:27.211 --> 00:14:30.760
For now, let's just stress again,
when you execute when you do a function,

260
00:14:30.760 --> 00:14:32.959
Virginia which symbol
say execute a function?

261
00:14:32.959 --> 00:14:33.696
&gt;&gt; Virginia: Parentheses.

262
00:14:33.696 --> 00:14:34.711
&gt;&gt; Will Sentance: Parentheses,
thank you dear.

263
00:14:34.711 --> 00:14:39.486
We create a new execution context
comprising the thread of execution.

264
00:14:39.486 --> 00:14:42.384
That just now means, we go through
the code of the function line by line.

265
00:14:42.384 --> 00:14:44.772
I don't always write it all out, but
know we're going through its code.

266
00:14:44.772 --> 00:14:46.488
And a little local memory,

267
00:14:46.488 --> 00:14:51.425
they call it local cuz it's only inside
the function, it's also temporary.

268
00:14:51.425 --> 00:14:55.088
If we exit that function,
ha ha except as we'll see this afternoon,

269
00:14:55.088 --> 00:14:59.594
is that it's temporary memory, it gets
deleted except for the returned out value.

270
00:14:59.594 --> 00:15:02.823
They often call it the variable,
well no one calls it variable environment,

271
00:15:02.823 --> 00:15:05.664
if you wanna be really fancy they
call it the variable environment.

272
00:15:05.664 --> 00:15:09.827
Environment it's the stuff around me,
this is my environment, and

273
00:15:09.827 --> 00:15:14.157
these are the variables that are around
me while I'm in this function.

274
00:15:14.157 --> 00:15:14.703
Yep, good?

275
00:15:14.703 --> 00:15:19.304
Okay, one final piece I wanna add before
we dive into functional programming

276
00:15:19.304 --> 00:15:19.883
itself.

