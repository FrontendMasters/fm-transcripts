WEBVTT

1
00:00:00.000 --> 00:00:04.861
&gt;&gt; Will Sentance: Partial application and
carrying, let's take it back to

2
00:00:04.861 --> 00:00:10.018
where we saw our glorious situation
where we could run through

3
00:00:10.018 --> 00:00:14.995
our list of functions by name,
line by line by line by line.

4
00:00:14.995 --> 00:00:18.310
And were Seth raised,
hold on if you're doing that,

5
00:00:18.310 --> 00:00:21.561
what if one of these functions
is taking two inputs?

6
00:00:21.561 --> 00:00:25.229
I know that my core functional programming
principle is playing out here,

7
00:00:25.229 --> 00:00:27.218
where I also run multiply by two on 11.

8
00:00:27.218 --> 00:00:32.855
And its output combining two to become
one, is auto inserted into add three.

9
00:00:32.855 --> 00:00:38.098
If add three is actually add two numbers
together, and that insertion of three

10
00:00:38.098 --> 00:00:43.578
is gonna be three and I guess undefined,
which is gonna combine to be not a number,

11
00:00:43.578 --> 00:00:48.756
probably, and pass that through to
the next one that's broken everything.

12
00:00:48.756 --> 00:00:53.316
So can I only use functions
that taking one input?

13
00:00:53.316 --> 00:00:55.716
That's gonna limit me quite a lot.

14
00:00:55.716 --> 00:00:59.286
I don't wanna have to ride a motorbike by
2 function and multiply by 7 function and

15
00:00:59.286 --> 00:01:02.459
multiply by 5 function, I wanna write
a multiply two numbers function.

16
00:01:02.459 --> 00:01:06.707
And then dynamically when I use it insert
whether it's by two or by seven or

17
00:01:06.707 --> 00:01:09.652
by five, same with,
add three I don't write add,

18
00:01:09.652 --> 00:01:14.036
I wanna be able to write a function add
two numbers, use it again and again for

19
00:01:14.036 --> 00:01:17.975
whatever numbers I wanna use it on,
do I have to rewrite functions?

20
00:01:17.975 --> 00:01:23.375
No, have a look here, what if I were
able to use the fact that I can

21
00:01:23.375 --> 00:01:28.475
have a function whose backpack
has a little baby function and

22
00:01:28.475 --> 00:01:32.275
it's supposed one that took two arguments.

23
00:01:32.275 --> 00:01:37.449
And store one of the arguments right
there in the backpack, meaning when I run

24
00:01:37.449 --> 00:01:43.430
this function, it'll appear to be, I don't
know, running a function with one input.

25
00:01:43.430 --> 00:01:46.624
Inside, it'll run a backpack function with

26
00:01:46.624 --> 00:01:50.077
my prefilled input inserted
as the other input.

27
00:01:50.077 --> 00:01:54.912
And I'll have converted, a function
that may be in here takes two inputs,

28
00:01:54.912 --> 00:01:59.059
with one of the inputs prefilled
in the backpack associated with

29
00:01:59.059 --> 00:02:03.000
the function I end up running,
that only takes in one input.

30
00:02:03.000 --> 00:02:06.522
And through that input is a second
input in the backpack, and

31
00:02:06.522 --> 00:02:08.880
use the pre saved input as the other one.

32
00:02:08.880 --> 00:02:14.672
I'm gonna be able to convert,
suppose I have a function,

33
00:02:14.672 --> 00:02:20.917
multiply and it takes in,
&gt;&gt; Will Sentance: No,

34
00:02:20.917 --> 00:02:26.352
multiply, whatever function multiply,
that takes in A and

35
00:02:26.352 --> 00:02:32.101
B, and inside it returns out A by B,
I can't use this function,

36
00:02:32.101 --> 00:02:37.021
this is a useless function
of my listing of functions.

37
00:02:37.021 --> 00:02:41.519
But if I can convert it into
a function where one of

38
00:02:41.519 --> 00:02:46.459
the values is pre-filled with two,
I basically have

39
00:02:46.459 --> 00:02:51.311
multiplied by two, and
I can then run it with seven.

40
00:02:51.311 --> 00:02:52.726
How am I gonna do it?

41
00:02:52.726 --> 00:02:56.655
I'm gonna take the multiply function,
and I'm gonna take

42
00:02:56.655 --> 00:03:01.527
a pre filled value have two, store them
in the backpack of a new function,

43
00:03:01.527 --> 00:03:06.502
give it a nice useful name, but
really it's gonna be just like intervals.

44
00:03:06.502 --> 00:03:09.686
But it's gonna run that
mode supply function in his

45
00:03:09.686 --> 00:03:11.695
backpack with a two pre filled.

46
00:03:11.695 --> 00:03:16.552
Function declaration used to
partially apply the functions to

47
00:03:16.552 --> 00:03:21.328
an existing function wrapped up
in the backpack in a closure.

48
00:03:21.328 --> 00:03:26.458
Really powerful here we go,
it's the final piece we do, and

49
00:03:26.458 --> 00:03:32.712
it's gonna allow us to use functions
with arity, that means two inputs.

50
00:03:32.712 --> 00:03:36.970
Where we expect a function with

51
00:03:36.970 --> 00:03:41.893
arity of not two, but arity of one.

52
00:03:41.893 --> 00:03:45.402
We're gonna be able to convert the arity
of our functions from two to one,

53
00:03:45.402 --> 00:03:49.478
arity just means the number of inputs that
function remember parameters our function

54
00:03:49.478 --> 00:03:50.226
is expecting.

55
00:03:50.226 --> 00:03:53.979
We have an arity mismatch, if we have
a function which takes two inputs, and

56
00:03:53.979 --> 00:03:56.618
we're trying to insert it in
our list of functions and

57
00:03:56.618 --> 00:04:00.900
reduce otherwise known as compose, we've
got always an arity mismatch because every

58
00:04:00.900 --> 00:04:04.890
function takes an output, and inserts
that next input you only have one output,

59
00:04:04.890 --> 00:04:07.677
so you can't have any functions
expecting two inputs.

60
00:04:07.677 --> 00:04:15.260
All right, almost there people,
almost there, so here we go.

61
00:04:15.260 --> 00:04:19.363
Function composition is so powerful get a
list of each function, but every function

62
00:04:19.363 --> 00:04:23.374
needs to behave exactly the same way to
yield one input, returning at one output.

63
00:04:23.374 --> 00:04:29.806
Whatever function I want to use,
it expects two inputs is arity mismatch,

64
00:04:29.806 --> 00:04:36.970
we need to decorate our function, to
prefill one of its arguments, it's inputs.

65
00:04:36.970 --> 00:04:40.609
This actually in fact in practice
means creating a brand new

66
00:04:40.609 --> 00:04:44.336
function,
&gt;&gt; Will Sentance: Brand new function we

67
00:04:44.336 --> 00:04:50.119
can call it say, multiply by two,
and have it have in its backpack,

68
00:04:50.119 --> 00:04:54.894
the actual multiply function,
and a pre filled input.

69
00:04:57.512 --> 00:04:58.549
&gt;&gt; Will Sentance: With the input and

70
00:04:58.549 --> 00:05:02.361
the multi argument function stored
conveniently in the backpack

