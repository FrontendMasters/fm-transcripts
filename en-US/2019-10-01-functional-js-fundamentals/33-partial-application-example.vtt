WEBVTT

1
00:00:00.070 --> 00:00:03.783
&gt;&gt; Speaker 1: Here we go folk,
it's known as partial application,

2
00:00:03.783 --> 00:00:06.133
this is our last code we see today.

3
00:00:06.133 --> 00:00:10.210
We're gonna create a function multiply
takes an (a, b), returns a by b.

4
00:00:10.210 --> 00:00:15.000
We're hoping to convert it into
a function multiplyBy2, so

5
00:00:15.000 --> 00:00:20.158
what we're gonna do is take into
this prefillFunction function,

6
00:00:20.158 --> 00:00:26.441
the multiply function that takes in two
inputs, and the thing we wanna prefill.

7
00:00:26.441 --> 00:00:31.230
MultiplyBy2 is just multiply prefill
where one argument is 2, right?

8
00:00:31.230 --> 00:00:35.292
It's just multiply with
the 2 already prefilled.

9
00:00:35.292 --> 00:00:39.852
We're gonna take those two, throw them
into prefillFunction, create our brand new

10
00:00:39.852 --> 00:00:43.858
function inner, which is actually
what multipleBy2 is really gonna be.

11
00:00:43.858 --> 00:00:48.814
MultiplyBy2, it's all nice and nice pretty
name but really, it's just gonna be inner.

12
00:00:48.814 --> 00:00:53.954
And inner is gonna have a backpack
full of our multiply function,

13
00:00:53.954 --> 00:00:57.236
there it is in fn and the prefilledValue.

14
00:00:57.236 --> 00:01:02.648
And I have a feeling when we run inner
by its new global name multiplyBy2 it's

15
00:01:02.648 --> 00:01:08.144
gonna take in 5 and combine that with
the prefilledValue from the backpack and

16
00:01:08.144 --> 00:01:11.743
run multiplyBy2 on it,
and out it's gonna come.

17
00:01:11.743 --> 00:01:15.006
We've gone and converted our and
multiply by function multiply,

18
00:01:15.006 --> 00:01:16.761
see I say mulitplyBy2 many times.

19
00:01:16.761 --> 00:01:21.390
Multiply functions from arity
of 2 to arity of 1, and

20
00:01:21.390 --> 00:01:25.327
it's gonna be a vital
technique in practice.

21
00:01:25.327 --> 00:01:30.554
We saw that if we want our dream, and
let's not lose sight of it people,

22
00:01:30.554 --> 00:01:36.305
that we want one thing and one thing only
to be able to list off our lines of code,

23
00:01:36.305 --> 00:01:41.276
not as obscure hard to understand
descriptive this computer is what

24
00:01:41.276 --> 00:01:46.244
you need to do, or undescriptive
this computer what you need to do,

25
00:01:46.244 --> 00:01:51.427
and that, that line can affect
anything else anywhere else on my app.

26
00:01:51.427 --> 00:01:55.469
If I wanna have my dream where I can have
each single line be nicely labeled and

27
00:01:55.469 --> 00:01:58.186
know that it's only
consequence is in that line and

28
00:01:58.186 --> 00:02:00.221
then that's passed to the next line.

29
00:02:00.221 --> 00:02:02.670
And then the only consequence
with that line is in that line,

30
00:02:02.670 --> 00:02:03.687
passed to the next line.

31
00:02:03.687 --> 00:02:08.608
Then folk my goodness I'm willing
to suffer a little bit to adjust

32
00:02:08.608 --> 00:02:11.296
my functions that have two inputs.

33
00:02:11.296 --> 00:02:14.744
When if I'm going to be listing off
functions one by one each of them needs to

34
00:02:14.744 --> 00:02:16.458
take one input, return one output.

35
00:02:16.458 --> 00:02:20.224
Then that be the input of the next
function, and it's only gonna take one

36
00:02:20.224 --> 00:02:24.455
input, and that's gonna return an output,
I can just list off my lines of code.

37
00:02:24.455 --> 00:02:29.359
I'm willing to suffer the process
of adjusting my functions

38
00:02:29.359 --> 00:02:31.868
from taking two inputs to one.

39
00:02:31.868 --> 00:02:36.449
And we're about to see for
our very last portion of

40
00:02:36.449 --> 00:02:40.921
code the process by which
we can appear to edit our

41
00:02:40.921 --> 00:02:45.831
functions with arity of 2,
inputs of two elements,

42
00:02:45.831 --> 00:02:51.967
into a function that only expects
an input of 1 with no rewriting.

43
00:02:51.967 --> 00:02:55.614
Now, to be clear, this is a simplified
example declaring multipleBy2

44
00:02:55.614 --> 00:02:59.822
doesn't seem to be that hard, but for
many functions it's gonna be more complex.

45
00:02:59.822 --> 00:03:04.601
And also even here, this is a very
nice way of declaring multiplyBy2.

46
00:03:04.601 --> 00:03:09.209
I'm explicitly determine I'm gonna use
this previous code you recognize and

47
00:03:09.209 --> 00:03:10.683
then prefill its value.

48
00:03:10.683 --> 00:03:13.294
All right, here we go people.

49
00:03:13.294 --> 00:03:17.474
Line one, the last section,
here we go Seth.

50
00:03:17.474 --> 00:03:19.443
Seth, what are we doing in line one?

51
00:03:19.443 --> 00:03:22.526
&gt;&gt; Seth: We'll be declaring
a function named multiply.

52
00:03:22.526 --> 00:03:24.701
&gt;&gt; Speaker 1: There it
is into memory we go,

53
00:03:24.701 --> 00:03:27.843
and we declare a function named multiply.

54
00:03:27.843 --> 00:03:32.110
Uh-oh, what's it's a arity Seth?

55
00:03:32.110 --> 00:03:32.654
&gt;&gt; Seth: 2.

56
00:03:32.654 --> 00:03:34.991
&gt;&gt; Speaker 1: It's an arity of 2.

57
00:03:34.991 --> 00:03:42.753
Two inputs a and
b return out a multiplied by b.

58
00:03:42.753 --> 00:03:44.393
There it is, thank you Seth.

59
00:03:46.184 --> 00:03:49.651
&gt;&gt; Speaker 1: Virginia multiply's been
saved, what's our next line Virginia?

60
00:03:49.651 --> 00:03:52.910
Notice by the way, for whatever reason
I've declared this in the old style,

61
00:03:52.910 --> 00:03:53.824
we'll live with it.

62
00:03:53.824 --> 00:03:55.643
What's our next lines gonna do, Virginia?.

63
00:03:55.643 --> 00:03:59.517
&gt;&gt; Virginia: We're declaring
a function called prefillFunction.

64
00:03:59.517 --> 00:04:04.247
&gt;&gt; Speaker 1: PrefillFunction,
there it is.

65
00:04:04.247 --> 00:04:06.344
I actually did leave that purposely.

66
00:04:06.344 --> 00:04:10.126
I knew it said the old style but I wanted
you to remember nothing has changed.

67
00:04:10.126 --> 00:04:16.123
Sam, last or line here, left-hand side,
we're declaring just what?

68
00:04:16.123 --> 00:04:18.034
&gt;&gt; Sam: MultiplyBy2.

69
00:04:18.034 --> 00:04:22.524
&gt;&gt; Speaker 1: Yeah,
just a label, multiplyBy2.

70
00:04:22.524 --> 00:04:24.728
Okay, we already know, by the way,

71
00:04:24.728 --> 00:04:28.082
though it's gonna be the output
of calling what, Sam?

72
00:04:28.082 --> 00:04:28.834
&gt;&gt; Sam: PrefillFunction.

73
00:04:28.834 --> 00:04:29.568
&gt;&gt; Speaker 1: Absolutely,

74
00:04:29.568 --> 00:04:33.856
which is gonna return out inner that don't
look anything like multiplyBy2 to me.

75
00:04:33.856 --> 00:04:38.536
But that's because to create multiplyBy2
from multiply we're gonna have to do some

76
00:04:38.536 --> 00:04:39.966
really smart wrangling.

77
00:04:39.966 --> 00:04:44.266
Mainly putting the multiply function and
it's prefilledValue of the number 2 in

78
00:04:44.266 --> 00:04:47.195
the backpack of the inner function and
get some memory,

79
00:04:47.195 --> 00:04:51.680
such that when we run multipleBy2, really
inner, we're gonna behind the scenes be

80
00:04:51.680 --> 00:04:55.380
running fn whatever that multiply
which will be in the backpack.

81
00:04:55.380 --> 00:04:57.786
All right, let's do it.

82
00:04:57.786 --> 00:04:59.815
Let's do it.

83
00:04:59.815 --> 00:05:02.076
So we're gonna go and
execute what Jasmine?

84
00:05:02.076 --> 00:05:06.709
What function are we gonna go and execute
in order to get a result into multiplyBy2?

85
00:05:06.709 --> 00:05:07.478
&gt;&gt; Jasmine: PrefillFunction.

86
00:05:07.478 --> 00:05:10.563
&gt;&gt; Speaker 1: PrefillFunction,
she's spot on.

87
00:05:10.563 --> 00:05:14.218
With the input of multiply,

88
00:05:14.218 --> 00:05:18.339
there it is, and the number 2.

89
00:05:18.339 --> 00:05:21.584
And its results is gonna me
stored into what Jasmine?

90
00:05:21.584 --> 00:05:23.319
&gt;&gt; Jasmine: It's gonna be
stored into multiplyBy2.

91
00:05:23.319 --> 00:05:25.289
&gt;&gt; Speaker 1: MultiplyBy2, she's spot on.

92
00:05:25.289 --> 00:05:28.589
We create a brand new?

93
00:05:28.589 --> 00:05:29.932
&gt;&gt; Speaker 6: Execution context.

94
00:05:29.932 --> 00:05:32.292
&gt;&gt; Speaker 1: Well done folk.

95
00:05:32.292 --> 00:05:32.836
And there it is.

96
00:05:32.836 --> 00:05:37.695
And it's really honestly just the kind
of set up this execution context to get

97
00:05:37.695 --> 00:05:42.628
a function we can return out that has a
backpack with our two important things in

98
00:05:42.628 --> 00:05:44.144
it that we can then use.

99
00:05:44.144 --> 00:05:49.129
So, with that in mind, what is
the first thing into the local memory

100
00:05:49.129 --> 00:05:52.458
that will end up in our backpack,
Virginia?

101
00:05:52.458 --> 00:05:53.090
&gt;&gt; Virginia: Function?

102
00:05:53.090 --> 00:05:54.345
&gt;&gt; Speaker 1: Well, yeah, yeah-
&gt;&gt; Virginia: Multiply.

103
00:05:54.345 --> 00:05:56.650
&gt;&gt; Speaker 1: Multiply,
given what parameter name?

104
00:05:59.530 --> 00:06:01.547
&gt;&gt; Speaker 1: What's the parameter
name multiply's given?

105
00:06:01.547 --> 00:06:03.067
&gt;&gt; Virginia: Fn.
&gt;&gt; Speaker 1: Fn, well done.

106
00:06:03.067 --> 00:06:05.710
No, no your spot on Virginia.

107
00:06:05.710 --> 00:06:09.199
PrefilledValue then gets
filled in with what, Virginia?

108
00:06:09.199 --> 00:06:10.087
&gt;&gt; Virginia: 2.

109
00:06:10.087 --> 00:06:13.575
&gt;&gt; Speaker 1: PrefilledValue
is filled in with 2.

110
00:06:13.575 --> 00:06:15.417
I like to look of this people.

111
00:06:15.417 --> 00:06:16.914
It has all the stuff I need.

112
00:06:16.914 --> 00:06:21.876
There's multiply with its input of a and
b and

113
00:06:21.876 --> 00:06:27.501
its output of a multiplied
by b slightly condense.

114
00:06:27.501 --> 00:06:30.187
And then the final thing,
Andrew, same time as last time,

115
00:06:30.187 --> 00:06:31.324
what are we saving here?

116
00:06:31.324 --> 00:06:34.550
This is what we're actually gonna end
up using, this is your path will be.

117
00:06:34.550 --> 00:06:35.278
Go ahead Andrew.

118
00:06:35.278 --> 00:06:36.663
&gt;&gt; Andrew: We're saving
the function inner.

119
00:06:36.663 --> 00:06:38.159
&gt;&gt; Speaker 1: Inner.

120
00:06:38.159 --> 00:06:41.984
Andrew help me out this time,
we're not just saving a function inner.

121
00:06:41.984 --> 00:06:45.034
&gt;&gt; Andrew: We're saving the local-
&gt;&gt; Speaker 1: No, we're saving a link too?

122
00:06:45.034 --> 00:06:46.199
&gt;&gt; Andrew: Yeah the link
to the local memory.

123
00:06:46.199 --> 00:06:50.155
&gt;&gt; Speaker 1: Exactly a link to
the surrounding local memory,

124
00:06:50.155 --> 00:06:51.897
well done to Andrew.

125
00:06:51.897 --> 00:06:56.394
We get a link to,
&gt;&gt; Speaker 1: You get a link

126
00:06:56.394 --> 00:07:03.497
to,
&gt;&gt; Speaker 1: All

127
00:07:03.497 --> 00:07:05.742
the surrounding local memory, there it is.

128
00:07:05.742 --> 00:07:09.266
And then, David,
we're not gonna run inner, of course not,

129
00:07:09.266 --> 00:07:12.537
we wanna use it to pretend to
masquerade as multiplyBy2.

130
00:07:12.537 --> 00:07:15.232
So what are we gonna do with inner?

131
00:07:15.232 --> 00:07:15.824
&gt;&gt; David: We're returning it.

132
00:07:15.824 --> 00:07:17.208
&gt;&gt; Speaker 1: We're returning it,
well done.

133
00:07:17.208 --> 00:07:24.149
We return it out into
what global label David?

134
00:07:24.149 --> 00:07:24.734
&gt;&gt; David: MultiplyBy2.

135
00:07:24.734 --> 00:07:28.647
&gt;&gt; Speaker 1: Into multiplyBy2,
there it is.

136
00:07:28.647 --> 00:07:32.383
It was born as inner not anymore now we're

137
00:07:32.383 --> 00:07:36.666
masquerading it as multiplyBy2,
what a con.

138
00:07:36.666 --> 00:07:40.278
I didn't know multiplyBy2 but

139
00:07:40.278 --> 00:07:46.039
in his backpack David is
some really useful stuff.

140
00:07:46.039 --> 00:07:49.404
What is in that backpack that
multiplyBy2 is gonna need?

141
00:07:49.404 --> 00:07:50.378
&gt;&gt; David: The function multiply.

142
00:07:50.378 --> 00:07:51.743
&gt;&gt; Speaker 1: Yeah under what label?

143
00:07:51.743 --> 00:07:52.823
&gt;&gt; David: Fn.
&gt;&gt; Speaker 1: Fn.

144
00:07:52.823 --> 00:07:58.244
So multiply which takes in a and b and

145
00:07:58.244 --> 00:08:03.496
returns out a by b, and what else?

146
00:08:03.496 --> 00:08:04.152
&gt;&gt; David: PrefilledValue.

147
00:08:04.152 --> 00:08:07.342
&gt;&gt; Speaker 1: PrefilledValue.

148
00:08:07.342 --> 00:08:08.111
Which is what?

149
00:08:08.111 --> 00:08:08.615
&gt;&gt; David: 2.

150
00:08:08.615 --> 00:08:09.639
&gt;&gt; Speaker 1: 2.

151
00:08:09.639 --> 00:08:15.852
This [SOUND] combo here of function
code and backpack is everything we need.

152
00:08:15.852 --> 00:08:19.778
We've got the functionality when
we run multiplyBy2, really inner.

153
00:08:19.778 --> 00:08:24.969
I have a feeling it's gonna run fn on or
whatever we pass into inner and

154
00:08:24.969 --> 00:08:29.903
prefillValue, and then it's gonna
be whatever we pass in by 2.

155
00:08:29.903 --> 00:08:33.156
That's it and we're gonna return that out.

156
00:08:33.156 --> 00:08:36.267
We're not really editing our function
we're creating a brand new function that's

157
00:08:36.267 --> 00:08:37.950
got all the important
stuff in its backpack.

158
00:08:37.950 --> 00:08:42.411
And so this execution context
everybody is what off the stack?

159
00:08:42.411 --> 00:08:43.164
&gt;&gt; Speaker 6: On.
Removed.

160
00:08:43.164 --> 00:08:45.145
&gt;&gt; Speaker 1: Yeah, removed,
popped off the stack.

161
00:08:45.145 --> 00:08:48.514
Let's actually put our cool stack up so
we can keep track of it.

162
00:08:49.883 --> 00:08:53.837
&gt;&gt; Speaker 1: We're in global
again now and what do we go and

163
00:08:53.837 --> 00:08:56.029
declare next Babanesh?

164
00:08:56.029 --> 00:08:58.389
&gt;&gt; Babanesh: The label [INAUDIBLE].

165
00:08:58.389 --> 00:08:59.197
&gt;&gt; Speaker 1: The label?

166
00:08:59.197 --> 00:08:59.702
&gt;&gt; Babanesh: Yeah.

167
00:08:59.702 --> 00:09:01.264
&gt;&gt; Speaker 1: Label, which label?

168
00:09:01.264 --> 00:09:01.927
&gt;&gt; Babanesh: The result label.

169
00:09:01.927 --> 00:09:04.109
&gt;&gt; Speaker 1: Result label,
there it is excellent from Babanesh.

170
00:09:04.109 --> 00:09:08.178
And we run, we run what looks
like a really simple line.

171
00:09:08.178 --> 00:09:11.609
Low key behind the scenes
it definitely isn't.

172
00:09:11.609 --> 00:09:16.318
Let's see multiplyBy2 input of 5.

173
00:09:16.318 --> 00:09:20.500
We create a new,
we're almost there everybody, a brand new?

174
00:09:20.500 --> 00:09:23.040
&gt;&gt; Speaker 6: Execution [CROSSTALK]
&gt;&gt; Speaker 1: Execution context,

175
00:09:23.040 --> 00:09:25.340
multiplyBy2 is called with 5.

176
00:09:25.340 --> 00:09:28.508
Does multiplyBy2 just take in a number and
multiply by 2?

177
00:09:28.508 --> 00:09:29.791
Uh-uh, uh-h [LAUGH].

178
00:09:29.791 --> 00:09:34.227
No because we don't want have to create
a brand new function multiplyBy2,

179
00:09:34.227 --> 00:09:38.401
we wanna be able to edit, the arity
of our existing presave functions.

180
00:09:38.401 --> 00:09:41.789
Now it may seem like there's a bit of
a lot of work to do, but in the end,

181
00:09:41.789 --> 00:09:45.653
we don't build prefill function, is
there for us in any functional language.

182
00:09:45.653 --> 00:09:48.733
Not in Java, so we have to be pre
build this in JavaScript, but

183
00:09:48.733 --> 00:09:51.815
from now on that allows us to
edit existing functions inputs,

184
00:09:51.815 --> 00:09:54.510
which we're gonna have to
do quite a bit in practice.

185
00:09:54.510 --> 00:09:59.000
Okay, mainly by the way, because things
like if you use certain APIs that expect

186
00:09:59.000 --> 00:10:02.367
multiple inputs,
we need to be able to adjust their inputs,

187
00:10:02.367 --> 00:10:06.728
not by actually editing the function,
but by, cuz that's already gone, but

188
00:10:06.728 --> 00:10:10.890
instead by wrapping them up in the
backpack of a new function that then pools

189
00:10:10.890 --> 00:10:13.958
that function with some of
the inputs pre-inserted.

190
00:10:13.958 --> 00:10:15.841
Okay, new execution context.

191
00:10:15.841 --> 00:10:19.188
And actually it's not the most
sophisticated ever but

192
00:10:19.188 --> 00:10:21.015
it's not a small one either.

193
00:10:21.015 --> 00:10:23.687
I'm thinking it's just multiplyBy2 but
of course it's not, here we go.

194
00:10:25.639 --> 00:10:30.879
&gt;&gt; Speaker 1: There it is and
it's an interesting one.

195
00:10:30.879 --> 00:10:34.700
What's the first thing,
Michael, inside multiplyBy2?

196
00:10:34.700 --> 00:10:40.399
Well firstly everybody multiplyBy2
was born as what function name?

197
00:10:40.399 --> 00:10:41.327
Everyone together.

198
00:10:41.327 --> 00:10:42.225
&gt;&gt; Speaker 6: Inner.

199
00:10:42.225 --> 00:10:43.199
&gt;&gt; Speaker 1: Well done.

200
00:10:43.199 --> 00:10:46.059
So Michael, when I run multiplyBy2
I'm really running inner,

201
00:10:46.059 --> 00:10:49.186
I'm not going back up, I literally
return this code out, there it is.

202
00:10:49.186 --> 00:10:52.106
And what is the parameter?

203
00:10:52.106 --> 00:10:52.811
&gt;&gt; Michael: The live input.

204
00:10:52.811 --> 00:10:55.220
&gt;&gt; Speaker 1: Live input, he's spot on.

205
00:10:55.220 --> 00:10:59.572
I called it that because when
multiplyBy2 is run that's the one

206
00:10:59.572 --> 00:11:02.807
we're actually gonna
provide at that moment.

207
00:11:02.807 --> 00:11:08.980
So the live rather than the one that's
prefilled in the backpack for multiplyBy2.

208
00:11:08.980 --> 00:11:11.004
Okay, there it is.

209
00:11:11.004 --> 00:11:14.600
And next line Babanesh
inside of multiplyBy2,

210
00:11:14.600 --> 00:11:15.865
inner,-
&gt;&gt; Babanesh: Output.

211
00:11:15.865 --> 00:11:16.473
&gt;&gt; Speaker 1: Output.

212
00:11:16.473 --> 00:11:18.840
Yeah, declare output.

213
00:11:18.840 --> 00:11:23.829
And now its output will be the result

214
00:11:23.829 --> 00:11:28.158
of pooling fn with live input.

215
00:11:28.158 --> 00:11:33.004
These are our, you're gonna fill these in,
aren't we in a second, prefilledValue.

216
00:11:33.004 --> 00:11:37.253
Which is really saying,
fn which is really, everybody together,

217
00:11:37.253 --> 00:11:42.335
it's not in local memory of multipliedBy2
it's in the backpack and it is what?

218
00:11:42.335 --> 00:11:42.863
&gt;&gt; Speaker 6: Multiply.

219
00:11:42.863 --> 00:11:45.139
&gt;&gt; Speaker 1: Multiply, well done folk.

220
00:11:45.139 --> 00:11:48.245
Multiply, and our live input,

221
00:11:48.245 --> 00:11:53.199
that's live right now and
that is what everybody?

222
00:11:53.199 --> 00:11:54.544
&gt;&gt; Speaker 6: 5.
&gt;&gt; Speaker 1: 5.

223
00:11:54.544 --> 00:11:58.388
And our prefilledValue, we get that from
the backpack as well and it is everyone?

224
00:11:58.388 --> 00:11:58.981
&gt;&gt; Speaker 6: 2.

225
00:11:58.981 --> 00:11:59.533
&gt;&gt; Speaker 1: 2!

226
00:11:59.533 --> 00:12:02.982
We look like we're running
multiplyBy2 input of 5, nah, nah,

227
00:12:02.982 --> 00:12:06.617
nah we're running multiply with
the input of 5 dynamically there and

228
00:12:06.617 --> 00:12:09.220
with the prefilledValue
from the backpack of 2.

229
00:12:09.220 --> 00:12:11.898
It's going to return out everybody?

230
00:12:11.898 --> 00:12:13.425
&gt;&gt; Speaker 6: 10.
&gt;&gt; Speaker 1: 10, well done.

231
00:12:13.425 --> 00:12:17.726
And we store that into output.

232
00:12:17.726 --> 00:12:19.801
And then what do we do
with that output folk?

233
00:12:19.801 --> 00:12:21.676
&gt;&gt; Speaker 6: Return it-
&gt;&gt; Speaker 1: We return it out

234
00:12:21.676 --> 00:12:25.622
into results, and no one's any the wiser,

235
00:12:25.622 --> 00:12:30.111
multiplyBy2 with input
of 5 returned out 10.

236
00:12:30.111 --> 00:12:34.599
We're able to use that function
now as an arity of 1 function

237
00:12:34.599 --> 00:12:38.560
anywhere in our listing of
individual lines of code.

