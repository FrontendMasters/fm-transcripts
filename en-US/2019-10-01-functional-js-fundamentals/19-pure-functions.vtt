WEBVTT

1
00:00:00.396 --> 00:00:04.262
&gt;&gt; Will Sentance: The functions
are run data through one by one.

2
00:00:04.262 --> 00:00:06.850
The start is called point free.

3
00:00:06.850 --> 00:00:10.123
Point free starter writing code,
sometimes ironically known as pointless.

4
00:00:10.123 --> 00:00:13.813
To start a writing code,

5
00:00:13.813 --> 00:00:18.743
we write out a list of functions.

6
00:00:18.743 --> 00:00:21.152
And we do not explicitly
state their arguments and

7
00:00:21.152 --> 00:00:23.859
their returned values in that
line in which we use them.

8
00:00:23.859 --> 00:00:28.665
We do not call them with our, we don't
explicitly state the calling of them.

9
00:00:28.665 --> 00:00:30.971
Instead, we rely on just
listing them out and

10
00:00:30.971 --> 00:00:35.097
knowing the structure by which they're
executed, which is just input output,

11
00:00:35.097 --> 00:00:37.419
output of that line,
input of the next line.

12
00:00:38.550 --> 00:00:41.099
Output of that function, input of the next
function, output of that function,

13
00:00:41.099 --> 00:00:42.260
input of the next function.

14
00:00:42.260 --> 00:00:44.122
This is point free starter coding.

15
00:00:44.122 --> 00:00:46.790
And again, increases readability.

16
00:00:46.790 --> 00:00:47.664
Do, do, do,do.

17
00:00:47.664 --> 00:00:52.133
Not, do with that value and then that
value do, maybe those two values do, and

18
00:00:52.133 --> 00:00:55.197
then those three values have
a side effect over here.

19
00:00:55.197 --> 00:00:56.122
It's do, do, do, do.

20
00:00:56.122 --> 00:00:59.320
Every line there I know
exactly what it's doing.

21
00:00:59.320 --> 00:01:02.771
No looking up the rest of my code,
it's having effects elsewhere.

22
00:01:02.771 --> 00:01:04.766
It's only effect is that very next line.

23
00:01:04.766 --> 00:01:07.930
And I get to remove the worry about
arguments then because its only input.

24
00:01:07.930 --> 00:01:10.121
I don't need to explicitly state
input because I know the only input

25
00:01:10.121 --> 00:01:11.282
is the output of the previous line.

26
00:01:11.282 --> 00:01:12.048
So why would I state it?

27
00:01:12.048 --> 00:01:13.770
It's there implicitly.

28
00:01:13.770 --> 00:01:17.696
It's known as point free style of
coding and increases readability,

29
00:01:17.696 --> 00:01:19.700
once you embrace it, enormously.

30
00:01:19.700 --> 00:01:20.768
All right.

31
00:01:20.768 --> 00:01:23.582
Easy to debug.
I know exactly the line of code my bug is

32
00:01:23.582 --> 00:01:25.625
in, firstly it's got a label.

33
00:01:25.625 --> 00:01:29.218
I can go and look it up in my call,
there it is.

34
00:01:29.218 --> 00:01:30.630
There's a label of the line.

35
00:01:30.630 --> 00:01:35.119
And it's only consequence is that line so
a bit of the question is,

36
00:01:35.119 --> 00:01:37.214
how many bugs can I really get?

37
00:01:37.214 --> 00:01:41.218
That's why you hear the functional
programming evangelists talk about why I

38
00:01:41.218 --> 00:01:43.938
never get any [LAUGH] bugs,
I've moved beyond bugs.

39
00:01:43.938 --> 00:01:48.482
I don't know if this true, but it does
come from the sense that most bugs come

40
00:01:48.482 --> 00:01:52.745
from an extraordinary end to end
dependency tree of every single line,

41
00:01:52.745 --> 00:01:55.394
every single line affects
all of the lines.

42
00:01:55.394 --> 00:02:00.457
And functions help you with that,
you reduce it to 10 dependency,

43
00:02:00.457 --> 00:02:03.443
10 lines affecting 10 other lines.

44
00:02:03.443 --> 00:02:10.133
But we know that in reality we often
have consequences outside our functions.

45
00:02:10.133 --> 00:02:15.173
So, most the time really,
all lines affect all other lines and

46
00:02:15.173 --> 00:02:19.276
this is the absolute
profound complete opposite.

47
00:02:19.276 --> 00:02:21.596
It's the extreme opposite.

48
00:02:21.596 --> 00:02:22.878
All right.

49
00:02:22.878 --> 00:02:28.388
Okay, now I want to talk a little bit
about that notion of every single

50
00:02:28.388 --> 00:02:35.420
line being entirely self-contained, having
no impact outside of it's single line.

51
00:02:36.440 --> 00:02:39.640
There's only going to be
sort of light comments here.

52
00:02:39.640 --> 00:02:41.800
It's not amazing amount of
stuff to say about this.

53
00:02:41.800 --> 00:02:45.362
But even though it's incredibly
significant in functional programming, but

54
00:02:45.362 --> 00:02:46.860
we're kind of seeing it as we go.

55
00:02:46.860 --> 00:02:51.053
Functions as tiny units to be combined and
run automatically must be,

56
00:02:51.053 --> 00:02:54.270
not highly predictable,
completely predictable.

57
00:02:54.270 --> 00:02:57.955
I must be certain their only consequence
is that line because I'm literally not

58
00:02:57.955 --> 00:03:01.045
even going to have arguments in
return values explicitly stated.

59
00:03:01.045 --> 00:03:05.067
I'm not going to go and look at that
add free function most of the time.

60
00:03:05.067 --> 00:03:07.678
It benefits only consequences
that result into the next line.

61
00:03:07.678 --> 00:03:08.432
Pure functions.

62
00:03:08.432 --> 00:03:12.281
Well, here we go, we rely on their
evaluated result to pass the input to

63
00:03:12.281 --> 00:03:14.350
the next unit of code automatically.

64
00:03:14.350 --> 00:03:17.831
Any what sort of side effects we're
gonna see in a sec what that means,

65
00:03:17.831 --> 00:03:21.144
will destroy this,
would destroy everything we're doing here.

66
00:03:21.144 --> 00:03:23.418
It would undo everything we're doing.

67
00:03:23.418 --> 00:03:26.009
I need it to be that
when I run this function,

68
00:03:26.009 --> 00:03:30.841
it's only consequence is its output in
that very line and then automatically rely

69
00:03:30.841 --> 00:03:35.760
on the structure of reduce the path
that output into the next line.

70
00:03:35.760 --> 00:03:39.380
Any other consequences in global memory,
for example, would undo everything.

71
00:03:39.380 --> 00:03:40.730
My code is no longer readable.

72
00:03:42.780 --> 00:03:44.720
This is no longer saying run probably two,
add three, divide by five.

73
00:03:44.720 --> 00:03:48.528
It's saying run add three, and maybe do
something else randomly inside there or

74
00:03:48.528 --> 00:03:51.960
somewhere else in my code,
it would undo everything.

75
00:03:51.960 --> 00:03:54.425
So we have to have functions
which are known as pure.

76
00:03:54.425 --> 00:03:57.579
Their only consequence is
that evaluated result.

77
00:03:57.579 --> 00:04:00.721
It relates to referential transparency.

78
00:04:00.721 --> 00:04:04.115
But referential transparency is a
sophisticated mathematical concept beyond

79
00:04:04.115 --> 00:04:05.692
the scope of what we're doing here.

80
00:04:05.692 --> 00:04:10.328
Well, it's beyond the scope, but
its pure functions are related, but

81
00:04:10.328 --> 00:04:12.720
let's focus on pure functions.

82
00:04:12.720 --> 00:04:14.735
Let's walk through this
little block of code here and

83
00:04:14.735 --> 00:04:16.949
just make sure everyone knows
what I mean by a side effect.

84
00:04:16.949 --> 00:04:22.028
I don't wanna dwell on this a bit
too long, because it's so short and

85
00:04:22.028 --> 00:04:27.120
yet it's so significant, but
I think it ties into everything we do.

86
00:04:27.120 --> 00:04:31.846
So it's not maybe we don't need as
long on it because we basically been

87
00:04:31.846 --> 00:04:34.100
building up to it the whole time.

88
00:04:34.100 --> 00:04:34.952
Okay.

89
00:04:37.309 --> 00:04:41.390
&gt;&gt; Will Sentance: Okay, good,
keep it small down here.

90
00:04:41.390 --> 00:04:43.810
Line one,
let's have a little mini app here.

91
00:04:43.810 --> 00:04:46.380
Just a sort of mini app
with the memory here.

92
00:04:46.380 --> 00:04:49.340
Line one, Michael, keeping it simple here,
what are we doing?

93
00:04:49.340 --> 00:04:53.306
&gt;&gt; Michael: We have the label num,
and it's assigned the value 10.

94
00:04:53.306 --> 00:04:54.090
&gt;&gt; Will Sentance: Yep.

95
00:04:55.540 --> 00:04:56.380
The next line, Reginald?

96
00:04:56.380 --> 00:04:58.400
&gt;&gt; Reginald: Add three.

97
00:04:58.400 --> 00:05:01.210
&gt;&gt; Will Sentance: He is the only person
ever, who, as soon as he sees me he goes

98
00:05:01.210 --> 00:05:03.890
straight into answering the question,
which is fantastic.

99
00:05:03.890 --> 00:05:05.103
It is actually a function add three.

100
00:05:05.103 --> 00:05:08.420
I'm gonna draw it like this, actually.

101
00:05:08.420 --> 00:05:14.870
Input of x, return value of x + 3 and
mystery stuff.

102
00:05:14.870 --> 00:05:16.611
That it does inside.

103
00:05:16.611 --> 00:05:18.442
Let's run it.
I probably should have assigned its

104
00:05:18.442 --> 00:05:19.802
results somewhere but whatever.

105
00:05:19.802 --> 00:05:25.680
Add three with the input of seven,
everyone,

106
00:05:25.680 --> 00:05:32.322
so we can reinvigorate,
three o'clock brand new.

107
00:05:32.322 --> 00:05:34.510
&gt;&gt; [CROSSTALK]
&gt;&gt; Will Sentance: Very nice.

108
00:05:34.510 --> 00:05:35.651
&gt;&gt; Will Sentance: Into it we go.

109
00:05:35.651 --> 00:05:39.777
And in the local memory,

110
00:05:39.777 --> 00:05:44.498
x is set to what, Virginia?

111
00:05:44.498 --> 00:05:45.941
&gt;&gt; Virginia: 10.

112
00:05:45.941 --> 00:05:50.295
&gt;&gt; Will Sentance: We're running at three.

113
00:05:50.295 --> 00:05:51.683
&gt;&gt; Virginia: Sorry, 7.

114
00:05:51.683 --> 00:05:53.113
&gt;&gt; Will Sentance: She's right, 7.

115
00:05:55.271 --> 00:05:57.517
&gt;&gt; Will Sentance: Num, plus, plus!
I'm gonna do it in orange.

116
00:05:57.517 --> 00:06:01.710
Everyone knows orange,

117
00:06:01.710 --> 00:06:05.309
the color of danger.

118
00:06:05.309 --> 00:06:12.690
All right, num,
is it in the local memory, Jasmine?

119
00:06:12.690 --> 00:06:15.730
No, no, so
where does JavaScript go look for it?

120
00:06:15.730 --> 00:06:16.580
&gt;&gt; Jasmine: Global.

121
00:06:16.580 --> 00:06:17.350
&gt;&gt; Will Sentance: Yeah, it goes out.

122
00:06:17.350 --> 00:06:19.960
This is literally out the side
of the execution context, and

123
00:06:19.960 --> 00:06:21.770
it does what to num?

124
00:06:21.770 --> 00:06:24.910
&gt;&gt; Jasmine: Adds 1 to it.

125
00:06:24.910 --> 00:06:29.707
&gt;&gt; Will Sentance: And then we have
our 7 plus 3 which will be 10,

126
00:06:29.707 --> 00:06:31.820
which we return out.

