WEBVTT

1
00:00:00.000 --> 00:00:02.459
&gt;&gt; Will Sentance: Function Decoration.

2
00:00:02.459 --> 00:00:07.458
Now we convert our functions more
easily to make them suit our task.

3
00:00:07.458 --> 00:00:11.018
If we're saving little blocks of code,
little functions to be used again and

4
00:00:11.018 --> 00:00:14.166
again, little single,
tiny functions to be used again and again.

5
00:00:14.166 --> 00:00:20.808
Ideally, I don't wanna have to rewrite
that code if they're slightly different.

6
00:00:20.808 --> 00:00:23.521
Now, there's one thing I can do,
write higher order functions,

7
00:00:23.521 --> 00:00:24.501
I can have my function.

8
00:00:24.501 --> 00:00:28.251
Don't need to rewrite it, I just edited
when I run it, I insert some specifics.

9
00:00:28.251 --> 00:00:31.759
The problem is, I've had to have left
a placeholder in about higher order

10
00:00:31.759 --> 00:00:35.450
functions like copywriter, manipulate or
map, I'd leave a placeholder.

11
00:00:35.450 --> 00:00:41.990
When I run map, I specify exactly how I
want to hit each element of the array.

12
00:00:41.990 --> 00:00:45.020
But sometimes I wanna edit functions
where I haven't left placeholders.

13
00:00:45.020 --> 00:00:51.141
I wanna retro actively give them new
functionality Without people is,

14
00:00:51.141 --> 00:00:54.901
can I edit a functions
body after I've saved it?

15
00:00:54.901 --> 00:00:57.572
Everyone, together.

16
00:00:57.572 --> 00:00:59.764
No, I can't exactly.

17
00:00:59.764 --> 00:01:04.635
Once the functions been saved, I can't go
in erase individual elements in a rack,

18
00:01:04.635 --> 00:01:06.110
and add or remove stuff.

19
00:01:06.110 --> 00:01:09.961
Functional code, once it's saved,
I can't go back in there and

20
00:01:09.961 --> 00:01:11.789
interact with it, it's set.

21
00:01:13.775 --> 00:01:16.437
&gt;&gt; Will Sentance: So
we wanna be able to edit functions but

22
00:01:16.437 --> 00:01:18.622
not rewrite them from scratch.

23
00:01:18.622 --> 00:01:24.295
So instead, we're gonna use a technique
known as function decoration.

24
00:01:24.295 --> 00:01:29.641
It's going to appear,
to edit functionality that's been saved,

25
00:01:29.641 --> 00:01:31.624
is gonna appear to do so.

26
00:01:31.624 --> 00:01:34.804
It's actually not going through though.

27
00:01:34.804 --> 00:01:39.500
Instead, it's going to
create new functions,

28
00:01:39.500 --> 00:01:44.539
we're a new function inside,
which the function we

29
00:01:44.539 --> 00:01:49.822
wanna edit is gonna be
inserted in somehow, some way.

30
00:01:49.822 --> 00:01:54.057
So when we run the new function, it's
gonna appear to be running our function.

31
00:01:54.057 --> 00:01:55.587
And with a slightly different behavior,

32
00:01:55.587 --> 00:01:57.389
it's gonna appear to
have edited our function.

33
00:01:57.389 --> 00:01:59.156
But actually, we created a new function,

34
00:01:59.156 --> 00:02:01.870
where we're running a function
inside of it that we want to edit.

35
00:02:01.870 --> 00:02:06.276
And so that new function will look like,
it's the original function but edited.

36
00:02:06.276 --> 00:02:06.817
Here it is.

37
00:02:06.817 --> 00:02:10.386
So particularly if you wanna add
a permanent memory, for example,

38
00:02:10.386 --> 00:02:12.457
to an existing function we've saved.

39
00:02:12.457 --> 00:02:15.862
Am I able to add the feature of
a permanent memory, a backpack,

40
00:02:15.862 --> 00:02:17.932
to an existing function I've saved?

41
00:02:17.932 --> 00:02:22.289
If I've saved a function, am I able to
give it a backpack after I've saved it?

42
00:02:23.449 --> 00:02:24.826
&gt;&gt; Will Sentance: Absolutely not.

43
00:02:24.826 --> 00:02:29.133
The only way is, for me to get it is if
I save the inside the running another

44
00:02:29.133 --> 00:02:30.838
function and return it out.

45
00:02:30.838 --> 00:02:35.162
So if I didn't do that,
how can I give it a permanent memory?

46
00:02:35.162 --> 00:02:36.593
Well there is a way.

47
00:02:36.593 --> 00:02:39.026
It's cool, because want to use it.

48
00:02:39.026 --> 00:02:44.139
So for example, if I want to edit
my function, here's a classic one.

49
00:02:45.709 --> 00:02:49.021
&gt;&gt; Will Sentance: Suppose I
wanna edit my function,

50
00:02:49.021 --> 00:02:53.709
say multiple by 2,
to limit it to run only once.

51
00:02:53.709 --> 00:02:57.454
So I can only run it once, and
from now on, it's fixed only run once.

52
00:02:57.454 --> 00:03:01.124
Run it one time, runs their problem
multiple by to say we limit of ten,

53
00:03:01.124 --> 00:03:05.437
running again, it says, sorry, you've
already run me you can't run me again.

54
00:03:05.437 --> 00:03:08.474
This is a technique we wanna use
all the time in programming.

55
00:03:08.474 --> 00:03:11.081
Often we wanna limit a function
of being called even in a game.

56
00:03:11.081 --> 00:03:12.508
For example, tic tac toe,

57
00:03:12.508 --> 00:03:16.125
you want to limit a function to be
called only one time on a given cell.

58
00:03:16.125 --> 00:03:19.498
You want to go to turn it from being
zero to an x, and then back to enact,

59
00:03:19.498 --> 00:03:21.230
you want to limit it to run one time.

60
00:03:21.230 --> 00:03:24.951
While I can't edit my
multiply by 2 function and

61
00:03:24.951 --> 00:03:30.139
give it a backpack to say you can
only run it once, once it's saved.

62
00:03:30.139 --> 00:03:34.797
So instead I'm going to do a technique
called function declaration.

63
00:03:34.797 --> 00:03:40.448
I'm going to use Wantify,
a function that's going

64
00:03:40.448 --> 00:03:45.844
to appear to convert my
multiply by 2 functions,

65
00:03:45.844 --> 00:03:50.863
save their,
into a version of multiply by 2.

66
00:03:50.863 --> 00:03:53.956
That is limited to run any once.

67
00:03:53.956 --> 00:03:56.121
But it's gonna be a big fraud.

68
00:03:56.121 --> 00:04:02.847
In reality, inside of Wantify,
I'm gonna create a brand new function,

69
00:04:02.847 --> 00:04:09.347
set for my brand new function inside
of Wantify if I have a backpack?

70
00:04:09.347 --> 00:04:10.340
Yes, it will.

71
00:04:10.340 --> 00:04:13.289
I'm gonna return that out,
it's gonna be called in there and

72
00:04:13.289 --> 00:04:14.886
stored in once by multiple by 2.

73
00:04:14.886 --> 00:04:18.084
And To buy multiple by two is gonna
behave just like multiple by 2, and

74
00:04:18.084 --> 00:04:19.009
it's the first time.

75
00:04:19.009 --> 00:04:22.181
But in reality,
it ain't behaving like multiply by 2.

76
00:04:22.181 --> 00:04:25.520
In reality, inside of it,

77
00:04:25.520 --> 00:04:30.167
it's going to run from its backpack,

78
00:04:30.167 --> 00:04:33.810
the multiply by 2 function.

79
00:04:33.810 --> 00:04:39.734
Under the condition that upon checking
back pack, a counter is still zero.

80
00:04:39.734 --> 00:04:42.903
And then its commitment
That say now is one, and

81
00:04:42.903 --> 00:04:45.871
if we run more to find
[INAUDIBLE] 2 [INAUDIBLE] Again,

82
00:04:45.871 --> 00:04:50.470
is gonna say sorry, Is now one in
the back pack, you can't run me again.

83
00:04:50.470 --> 00:04:55.643
But it's gonna be really
interesting interweaving here.

84
00:04:55.643 --> 00:04:56.641
So I said we're looking for another way.

85
00:04:56.641 --> 00:05:00.566
We're gonna map this out in full,
but let's look at another way.

86
00:05:00.566 --> 00:05:02.742
Our wants to find multiply by 2,

87
00:05:02.742 --> 00:05:06.877
is going to be the inner function
that comes out of one and five.

88
00:05:08.092 --> 00:05:11.578
&gt;&gt; Will Sentance: It's gonna appear
to edit multiply by 2, it ain't.

89
00:05:11.578 --> 00:05:12.215
You can't edit a function.

90
00:05:12.215 --> 00:05:14.917
It's gonna appear to give multiply by 2.

91
00:05:14.917 --> 00:05:20.345
You know we could even actually have one
to five multiplied by 2 be given the name,

92
00:05:20.345 --> 00:05:23.742
I don't know,
multiply by 2 once, or whatever.

93
00:05:23.742 --> 00:05:27.290
It's gonna appear to edit multiply by 2,
it's not.

94
00:05:27.290 --> 00:05:29.204
In reality, what is it doing?

95
00:05:29.204 --> 00:05:33.641
It's creating a new function that
does have access to a backpack.

96
00:05:33.641 --> 00:05:37.817
We need a backpack with a limit
of function to run only once.

97
00:05:37.817 --> 00:05:39.296
I should stress that.

98
00:05:39.296 --> 00:05:42.356
A function to run once and
limited to only run once,

99
00:05:42.356 --> 00:05:45.286
needs to remember,
it's previously been run.

100
00:05:45.286 --> 00:05:47.778
Otherwise, how can it be limited run Once?

101
00:05:47.778 --> 00:05:50.933
And he wants a normal function is,
remember his previous running, so

102
00:05:50.933 --> 00:05:52.762
he doesn't know it's been run before.

103
00:05:52.762 --> 00:05:55.167
So we need our function
to have a backpack, and

104
00:05:55.167 --> 00:05:57.517
that's exactly what's gonna happen here.

105
00:05:57.517 --> 00:06:00.110
But we can't give most
over to a backpack later.

106
00:06:00.110 --> 00:06:02.757
So we're instead going to decorate it.

107
00:06:02.757 --> 00:06:06.485
Which in the land of
functional programming, means,

108
00:06:06.485 --> 00:06:09.727
creating a brand new function,
called inner,

109
00:06:09.727 --> 00:06:14.589
inside of once Inside of which
we're going to check a counter,

110
00:06:14.589 --> 00:06:19.209
which is going to have access to
a persistent counter in the backpack

111
00:06:19.209 --> 00:06:23.450
of the first running of in a,
notice once by by multiple by 2.

112
00:06:23.450 --> 00:06:26.796
We're going to not be
able to run convert me,

113
00:06:26.796 --> 00:06:29.975
which is gonna be multiplied by two again.

114
00:06:29.975 --> 00:06:35.719
These people is using closure, the
principle of giving functions permanent

115
00:06:35.719 --> 00:06:40.842
memories, to super charge our functions,
to add new functionality

116
00:06:40.842 --> 00:06:46.161
with our function multiplied two,
once it's being initially saved.

117
00:06:47.468 --> 00:06:52.045
&gt;&gt; Will Sentance: And it turns out to be a
core principle of functional programming.

118
00:06:52.045 --> 00:06:56.875
Beyond this folk, once you realize
that you can have your function,

119
00:06:56.875 --> 00:07:01.207
the pseudo edited,
by building a brand new function inside,

120
00:07:01.207 --> 00:07:06.123
of which it's going to run the function
that's passed to the function

121
00:07:06.123 --> 00:07:09.560
once a [INAUDIBLE] Produces
a brand new function.

122
00:07:09.560 --> 00:07:16.321
Once you realized that, you may not
just wanna store in the backpack,

123
00:07:16.321 --> 00:07:21.708
a counter, for example,
you may actually want to store

124
00:07:21.708 --> 00:07:26.542
an input for
a function that requires two inputs.

125
00:07:26.542 --> 00:07:29.970
Not that one out, and
now the functionary requires one input.

126
00:07:29.970 --> 00:07:34.462
Which might start finally,
to solve Seth's worry.

127
00:07:34.462 --> 00:07:38.092
And when I list all functions with my
dream and functional programming, is

128
00:07:38.092 --> 00:07:42.372
listing of my functions, do this one, then
this one, then this one, automatically.

129
00:07:42.372 --> 00:07:44.881
With put three style,
no reference to the running of them.

130
00:07:44.881 --> 00:07:48.400
No putting the brands on and
saying what to take as the input.

131
00:07:48.400 --> 00:07:51.061
So if my function that I'm taking
into my list of functions,

132
00:07:51.061 --> 00:07:53.720
around one after another of another,
requires two inputs,

133
00:07:53.720 --> 00:07:56.761
it's gonna break my whole setup,
we'll see all that in the moment.

134
00:07:56.761 --> 00:08:01.680
For now, here we go people,
we are going to build a new,

135
00:08:01.680 --> 00:08:06.524
apparent Multiply by 2
function that works.

136
00:08:06.524 --> 00:08:10.316
As I'm gonna multiply by 2,
but actually, is a totally

137
00:08:10.316 --> 00:08:15.138
different function that happens to
run multiply by 2 inside of itself.

138
00:08:15.138 --> 00:08:18.245
And we're gonna keep that multiply
by 2 function inside of it.

139
00:08:18.245 --> 00:08:23.406
Once if I multiply by 2
inside of its backpack.

