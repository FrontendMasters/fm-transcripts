WEBVTT

1
00:00:00.000 --> 00:00:04.326
&gt;&gt; Will Sentance: We were saying that,
in fact, we got a whole number of built in

2
00:00:04.326 --> 00:00:10.003
functions available to all our arrays
in JavaScript, higher order functions.

3
00:00:10.003 --> 00:00:14.838
Each of them iterate, loop through,
an array that has access to them right

4
00:00:14.838 --> 00:00:19.702
here a dot filter, what's gonna be 1,
2, 3, 4, 5, 6 dot filter.

5
00:00:19.702 --> 00:00:21.711
And then runs some sort of function.

6
00:00:21.711 --> 00:00:23.986
Look, there it is, greater than 2.

7
00:00:23.986 --> 00:00:27.496
Which is gonna take in a number and return
the evaluated result of whether that

8
00:00:27.496 --> 00:00:31.170
number is greater or less than 2, true or
false, and then does something else.

9
00:00:31.170 --> 00:00:32.257
They all behave differently.

10
00:00:32.257 --> 00:00:34.511
Our job is to go to MDN
to figure that out.

11
00:00:34.511 --> 00:00:38.121
We're gonna see one more
here called filter.

12
00:00:38.121 --> 00:00:42.100
Then we're gonna see something called
chaining, high order functions.

13
00:00:42.100 --> 00:00:46.362
I don't think it's the most functional
programming style of writing code.

14
00:00:46.362 --> 00:00:51.898
But we're gonna see is actually the way
that often people do do it in JavaScript.

15
00:00:51.898 --> 00:00:56.456
But then after that, by which time
we'll have reinvigorated because of

16
00:00:56.456 --> 00:00:59.005
course now we've all just eaten lunch.

17
00:00:59.005 --> 00:01:03.684
But by then, will be reinvigorated
to see the functional programming

18
00:01:03.684 --> 00:01:08.604
style of writing clean compartmentalized
little baby tiny functions and

19
00:01:08.604 --> 00:01:14.020
lining them up one by one by one, do that
one, then do that one, then do that one.

20
00:01:14.020 --> 00:01:17.734
Composing little baby
functions into bigger tasks,

21
00:01:17.734 --> 00:01:22.696
just like we compose little baby
motifs in music into larger melodies.

22
00:01:25.128 --> 00:01:27.248
&gt;&gt; Will Sentance: It's got
the sender's resume the end somewhere.

23
00:01:27.248 --> 00:01:29.163
The toner,
there's gonna be end of the sentence.

24
00:01:29.163 --> 00:01:30.193
There you go.

25
00:01:30.193 --> 00:01:30.790
Good.

26
00:01:30.790 --> 00:01:32.205
&gt;&gt; Alex: [LAUGH]
&gt;&gt; Will Sentance: All right, here we go.

27
00:01:32.205 --> 00:01:36.925
So let's actually start off the way
that JavaScript behind the scenes.

28
00:01:36.925 --> 00:01:41.982
As soon as you turn JavaScript on, it
opens up its memory, it's store of data.

29
00:01:41.982 --> 00:01:47.542
And into and actually behind the scenes,
it sticks that,

30
00:01:47.542 --> 00:01:52.309
let's put it here,
that object full of functions

31
00:01:52.309 --> 00:01:56.752
that are built in and
available to all arrays.

32
00:01:56.752 --> 00:02:04.151
So we had reduce in there, we had filter.

33
00:02:04.151 --> 00:02:09.232
In there, we had map.

34
00:02:09.232 --> 00:02:13.702
In there, we had for each is another.

35
00:02:13.702 --> 00:02:14.858
There's a whole bunch of them.

36
00:02:14.858 --> 00:02:15.860
I think I listed them all out there,
right?

37
00:02:15.860 --> 00:02:18.621
You got like flat map and
other ones as well.

38
00:02:18.621 --> 00:02:20.229
Okay, they're all available to all arrays.

39
00:02:20.229 --> 00:02:22.084
Well, let's get going.

40
00:02:22.084 --> 00:02:26.632
Line one, what is the array we're
declaring right here, Alex?

41
00:02:26.632 --> 00:02:27.991
&gt;&gt; Alex: What is the actual value of it?

42
00:02:27.991 --> 00:02:30.139
&gt;&gt; Will Sentance: Just to tell
me what doing in line one here.

43
00:02:30.139 --> 00:02:33.140
&gt;&gt; Alex: We're putting
a constant labeled array.

44
00:02:33.140 --> 00:02:33.994
&gt;&gt; Will Sentance: Yeah.

45
00:02:33.994 --> 00:02:37.178
&gt;&gt; Alex: To memory,
the value is an array of 1, 2, 3, 4, 5, 6.

46
00:02:37.178 --> 00:02:37.696
&gt;&gt; Will Sentance: Lovely,

47
00:02:37.696 --> 00:02:41.719
I like that clarity of technical
communication as well Alex, thank you.

48
00:02:41.719 --> 00:02:44.787
1, 2, 3, 4, 5, 6.

49
00:02:44.787 --> 00:02:45.626
There it is.

50
00:02:45.626 --> 00:02:48.953
Okay, then, next line, David.

51
00:02:48.953 --> 00:02:53.537
&gt;&gt; David: We are declaring
a const of greater than 2.

52
00:02:53.537 --> 00:02:54.699
&gt;&gt; Will Sentance: Const is our function.

53
00:02:57.919 --> 00:02:58.689
&gt;&gt; Will Sentance: [LAUGH] Look at that.

54
00:02:58.689 --> 00:03:05.283
I converted f into greater than 2 and
it's a regular old function.

55
00:03:05.283 --> 00:03:09.706
I really stressed David don't
even say it's just a function.

56
00:03:09.706 --> 00:03:10.570
It's a function.

57
00:03:10.570 --> 00:03:11.193
It's a function.

58
00:03:11.193 --> 00:03:16.726
It's a function that takes in nom and
returns out the evaluated result

59
00:03:16.726 --> 00:03:21.808
yeah Boolean a true false whether
nom is greater or less than 2.

60
00:03:21.808 --> 00:03:23.882
So it's run with a 3,
it will return out true.

61
00:03:23.882 --> 00:03:26.940
If it's run with a 1,
it will return out false.

62
00:03:26.940 --> 00:03:33.129
Okay, now, final line, Virginia.

63
00:03:33.129 --> 00:03:35.824
&gt;&gt; Virginia: So we have-
&gt;&gt; Will Sentance: Left hand side?

64
00:03:35.824 --> 00:03:38.641
&gt;&gt; Virginia: Yes, a label filtered array.

65
00:03:38.641 --> 00:03:39.826
&gt;&gt; Will Sentance: Perfect, great.

66
00:03:39.826 --> 00:03:42.407
And the right hand side
says to go do what?

67
00:03:42.407 --> 00:03:44.333
&gt;&gt; Virginia: Execute
something on that array.

68
00:03:44.333 --> 00:03:47.300
&gt;&gt; Will Sentance: Yeah, and
the thing we're gonna execute is?

69
00:03:47.300 --> 00:03:48.978
&gt;&gt; Virginia: Greater than 2 filter.

70
00:03:48.978 --> 00:03:50.382
&gt;&gt; Will Sentance: Filter, filter, filter,

71
00:03:50.382 --> 00:03:52.790
definitely not greater
than 2 we may not use it.

72
00:03:52.790 --> 00:03:53.738
&gt;&gt; Virginia: Filter with the reducer.

73
00:03:53.738 --> 00:03:57.574
&gt;&gt; Will Sentance: Yeah, not reducer.

74
00:03:57.574 --> 00:04:02.161
The reducer is specifically the function
we take into reduce who takes each element

75
00:04:02.161 --> 00:04:06.223
of the array of reduce and accumulates
it and combines it to get an output,

76
00:04:06.223 --> 00:04:09.588
which is then combined using
the reducer with an excellent.

77
00:04:09.588 --> 00:04:11.088
We'll see it again and again, don't worry.

78
00:04:11.088 --> 00:04:14.080
Yeah, so the court exactly the focus
has been pausing the callback, okay.

79
00:04:14.080 --> 00:04:18.073
All right, so filtered.

80
00:04:20.278 --> 00:04:23.124
&gt;&gt; Will Sentance: This is a very,
very typical and usable function.

81
00:04:23.124 --> 00:04:25.328
I'm not going to go into
massive detail of it,

82
00:04:25.328 --> 00:04:28.334
we're not actually going to show it for
an execution context.

83
00:04:28.334 --> 00:04:33.016
I'm going to give you a kind of truncated
version of its execution context.

84
00:04:33.016 --> 00:04:39.864
There it is with the input of the entire

85
00:04:39.864 --> 00:04:45.864
greater than to functionality.

86
00:04:45.864 --> 00:04:53.272
There it is takes in, nom returns out,
no greater than two functionality.

87
00:04:53.272 --> 00:04:57.203
You know what actually I'm going to
evaluate the array piece here and

88
00:04:57.203 --> 00:05:00.818
put it straight in as, but
it's 3ds in as what it's going to.

89
00:05:00.818 --> 00:05:04.769
Actually be so
it's slightly easier to see.

90
00:05:04.769 --> 00:05:09.935
It's going to be 1, 2,

91
00:05:09.935 --> 00:05:17.398
3, 4, 5, 6 dot filter, wow.

92
00:05:17.398 --> 00:05:20.253
That is, that is not good is it?

93
00:05:20.253 --> 00:05:24.325
That does not look good for
the long term for the long haul.

94
00:05:24.325 --> 00:05:28.254
Let's get rid of that,

95
00:05:28.254 --> 00:05:31.986
was if you rub really,

96
00:05:31.986 --> 00:05:37.885
really hard, side yeah, indeed.

97
00:05:37.885 --> 00:05:44.464
All right, so
let's head over here filtered,

98
00:05:44.464 --> 00:05:49.562
array will be the evaluated result of

99
00:05:49.562 --> 00:05:57.960
calling on array which
is 1,2,3,4,5,6 filter.

100
00:05:57.960 --> 00:05:59.519
The method filter.

101
00:05:59.519 --> 00:06:02.790
How to get access to that filter method?

102
00:06:02.790 --> 00:06:07.543
Well that array has a bond
through its object version,

103
00:06:07.543 --> 00:06:13.343
let's not get too bogged down in
this through its proto property.

104
00:06:13.343 --> 00:06:15.744
To what?

105
00:06:15.744 --> 00:06:18.412
So what Michael?

106
00:06:18.412 --> 00:06:19.473
&gt;&gt; Michael: To the prototype?

107
00:06:19.473 --> 00:06:24.199
&gt;&gt; Will Sentance: Yes shorter to
the object full of functions here that we

108
00:06:24.199 --> 00:06:25.543
get access to.

109
00:06:25.543 --> 00:06:29.939
So when we do 1, 2, 3, 4, 5, 6 dot filter,
we go and look at the array,

110
00:06:29.939 --> 00:06:32.497
the object bit of 1, 2, 3, 4, 5, 6.

111
00:06:32.497 --> 00:06:37.407
And it's going to link down to a list of
functions we can use when we find filter.

112
00:06:37.407 --> 00:06:38.468
Let's grab it and use it.

113
00:06:38.468 --> 00:06:39.718
Let's create.

114
00:06:39.718 --> 00:06:41.795
Yes, it does create an execution context.

115
00:06:41.795 --> 00:06:43.332
Here it is.

116
00:06:43.332 --> 00:06:46.046
I'm not going to talk about
what's in his local memory.

117
00:06:46.046 --> 00:06:49.836
I'm just going to talk more generally
the first thing filter does folk I'm just

118
00:06:49.836 --> 00:06:52.679
gonna tell you what it does we
go with MDN to figure this out.

119
00:06:52.679 --> 00:06:57.262
The first thing it does inside is create
what what do you think the first thing it

120
00:06:57.262 --> 00:06:59.010
does anyone gets I guess Sam?

121
00:06:59.010 --> 00:06:59.808
David?

122
00:06:59.808 --> 00:07:00.697
Grayson?

123
00:07:00.697 --> 00:07:01.253
&gt;&gt; Alex: Empty array.

124
00:07:01.253 --> 00:07:01.899
&gt;&gt; Will Sentance: Right.

125
00:07:01.899 --> 00:07:06.816
Empty array, right good job exactly
create an empty array into which

126
00:07:06.816 --> 00:07:11.819
we're going to stick anything It
then runs this function greater than

127
00:07:11.819 --> 00:07:17.183
two on the zeroth element, then the oneth
element and the two way through.

128
00:07:17.183 --> 00:07:22.153
And it takes in that element and passes it
into the execution context of greater than

129
00:07:22.153 --> 00:07:26.626
to the function we passed in with numbers
a parameter which will be one, and

130
00:07:26.626 --> 00:07:30.744
then asked one is greater than two
false and returns that falls out and

131
00:07:30.744 --> 00:07:32.462
moves on from that element.

