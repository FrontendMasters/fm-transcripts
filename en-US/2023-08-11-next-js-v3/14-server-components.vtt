WEBVTT

1
00:00:00.320 --> 00:00:02.759
All right, now we get to talk about
fetching data and server components and

2
00:00:02.759 --> 00:00:03.464
client components.

3
00:00:03.464 --> 00:00:04.496
All right, let's get to it.

4
00:00:04.496 --> 00:00:07.575
So we talked about server components.

5
00:00:07.575 --> 00:00:10.814
As refresher server components
are components that run on the server.

6
00:00:10.814 --> 00:00:13.783
They literally execute
in a Node environment,

7
00:00:13.783 --> 00:00:16.017
which means you can do Node things.

8
00:00:16.017 --> 00:00:18.406
The other thing though,
that you might have thought about, and

9
00:00:18.406 --> 00:00:19.923
maybe you didn't know how this worked.

10
00:00:19.923 --> 00:00:24.929
But because they only execute on
a server and they're not in like React's

11
00:00:24.929 --> 00:00:29.290
context of change detection and
virtual DOM and all that stuff,

12
00:00:29.290 --> 00:00:33.995
they don't opt into the same behavior
as a regular React component.

13
00:00:33.995 --> 00:00:35.894
So you might be asking, so
what is a regular React component?

14
00:00:35.894 --> 00:00:39.921
Okay, let me ask you this,
I'm just gonna write a component.

15
00:00:39.921 --> 00:00:43.988
You don't have to follow along
here if you don't want to,

16
00:00:43.988 --> 00:00:47.564
but I'm just going to make
a new folder on the root.

17
00:00:47.564 --> 00:00:50.776
Our components, and actually,
we probably will have this folder, so

18
00:00:50.776 --> 00:00:52.391
you can follow along if you want to.

19
00:00:52.391 --> 00:00:55.343
But the code I'm about to write is not
gonna be something we're gonna use.

20
00:00:55.343 --> 00:00:59.845
But let's say I have this and I have,
I don't know, some Card component or

21
00:00:59.845 --> 00:01:01.713
something like that, right?

22
00:01:05.302 --> 00:01:11.546
Right, and then the Card component
has some state, Some state,

23
00:01:11.546 --> 00:01:16.593
some updateState thing,
Right, it has all this.

24
00:01:16.593 --> 00:01:21.358
And then somewhere down the line,
you end up calling updateState, right?

25
00:01:21.358 --> 00:01:23.991
You call this somewhere, right?

26
00:01:23.991 --> 00:01:28.079
What, do you know what happens when
you update a state from a state hook

27
00:01:28.079 --> 00:01:29.408
in a React component?

28
00:01:29.408 --> 00:01:30.477
What happens to that component?

29
00:01:30.477 --> 00:01:31.112
Anybody want to guess?

30
00:01:34.703 --> 00:01:36.559
Or why do we even need
hooks in the first place?

31
00:01:36.559 --> 00:01:38.838
What is that?

32
00:01:38.838 --> 00:01:41.416
&gt;&gt; To render it again with updated data.

33
00:01:41.416 --> 00:01:42.912
&gt;&gt; Yeah, yeah, exactly.

34
00:01:42.912 --> 00:01:46.017
When you called that updateState function,

35
00:01:46.017 --> 00:01:49.780
it does render the component
again with updated data.

36
00:01:50.810 --> 00:01:52.330
But what does it mean to render again?

37
00:01:52.330 --> 00:01:57.546
Right, if you really think about it, this
looks like a regular JavaScript function,

38
00:01:57.546 --> 00:02:00.483
but one,
you never call this function, right?

39
00:02:00.483 --> 00:02:02.958
React calls the function for
you, so that's one thing.

40
00:02:02.958 --> 00:02:06.996
And you have no control over when it gets
called because it's parent might rerender

41
00:02:06.996 --> 00:02:08.965
which causes this to rerender, right?

42
00:02:08.965 --> 00:02:10.812
You don't really get that much control.

43
00:02:10.812 --> 00:02:14.549
Yeah, you can use things like memo and
stuff like that to prevent it from

44
00:02:14.549 --> 00:02:19.433
rerendering, but that's because this isn't
just like an ordinary JavaScript function.

45
00:02:19.433 --> 00:02:22.462
You ever tried to put async in
front of this and see what happens?

46
00:02:22.462 --> 00:02:26.546
You can't async await anywhere
inside of here, right?

47
00:02:26.546 --> 00:02:30.883
That's because this entire
function it needs to return,

48
00:02:30.883 --> 00:02:35.138
synchronously needs to return
some type of JSX, right?

49
00:02:35.138 --> 00:02:38.803
You cannot block that rendering process,
you will get an error.

50
00:02:38.803 --> 00:02:40.444
So how do you do things that are async?

51
00:02:40.444 --> 00:02:42.017
Well, that's where hooks come along.

52
00:02:42.017 --> 00:02:46.355
So if you need to do anything that's
async, if you need to remember something,

53
00:02:46.355 --> 00:02:50.461
because if this is a function, I mean,
just forget about React right now.

54
00:02:50.461 --> 00:02:51.475
Don't even think about React.

55
00:02:51.475 --> 00:02:56.360
If I just had a function that did this,

56
00:02:56.360 --> 00:03:01.400
count and it took a number, let's just

57
00:03:01.400 --> 00:03:06.285
say num = 0 and then it said num ++,

58
00:03:06.285 --> 00:03:13.025
if I called count three times,
what would it be num?

59
00:03:13.025 --> 00:03:14.272
If I called count three times.

60
00:03:23.847 --> 00:03:25.233
&gt;&gt; Pure JavaScript.

61
00:03:25.233 --> 00:03:26.311
&gt;&gt; Yeah, pure JavaScript.

62
00:03:30.132 --> 00:03:31.366
&gt;&gt; Four, right?

63
00:03:31.366 --> 00:03:32.799
&gt;&gt; You would think so, no,

64
00:03:32.799 --> 00:03:37.118
it's just gonna be one cuz it's never
keeping track of anything, right?

65
00:03:37.118 --> 00:03:41.166
Every time I call this function,
this line runs what sets num to one, so

66
00:03:41.166 --> 00:03:42.458
I guess it'll be two.

67
00:03:42.458 --> 00:03:44.963
So it sets num to one and
then it increment it by one, so

68
00:03:44.963 --> 00:03:46.261
num is always gonna be two.

69
00:03:46.261 --> 00:03:50.005
So it'll be two here, iIt'll be two here,
and it'll be two here, because I'm just

70
00:03:50.005 --> 00:03:53.560
resetting, I'm just running my function
over and over and over again, right?

71
00:03:53.560 --> 00:03:58.350
So to opt out of that behavior, in the
case of React, where I wanna like, wait,

72
00:03:58.350 --> 00:04:00.720
hold on, keep track of this, hold on.

73
00:04:00.720 --> 00:04:04.511
When you call count again,
I want to remember what it was before.

74
00:04:04.511 --> 00:04:07.875
So in order to do that, you have to tell
React that you're interested in keeping

75
00:04:07.875 --> 00:04:10.203
track of this thing, and
that's where hooks come in.

76
00:04:10.203 --> 00:04:13.019
So that's because React is
gonna just call your function,

77
00:04:13.019 --> 00:04:15.005
and it's just gonna just initialize it.

78
00:04:15.005 --> 00:04:19.243
So, you have to tell React, hey, I'm
interested in keeping track of this thing.

79
00:04:19.243 --> 00:04:21.082
And React's like, cool, yeah,
you could tell me that.

80
00:04:21.082 --> 00:04:22.950
Just make sure you use this hook, and

81
00:04:22.950 --> 00:04:26.338
you can tell me that by using this
function that I give you, right?

82
00:04:26.338 --> 00:04:29.924
If you give me this function, or I'm
sorry, if you call this function that I

83
00:04:29.924 --> 00:04:33.623
give you, this function right here,
that's you telling React that, yeah,

84
00:04:33.623 --> 00:04:36.003
change that thing that I
told you to keep track of.

85
00:04:36.003 --> 00:04:38.944
And React's like, cool, here's that thing
you told me to keep track of, right?

86
00:04:38.944 --> 00:04:42.674
So this is a long way of
saying with server components,

87
00:04:42.674 --> 00:04:46.256
none of this matters,
you can just forget about it.

88
00:04:46.256 --> 00:04:48.945
This is just regular React,
that's how client components work.

89
00:04:48.945 --> 00:04:53.890
Server components don't, they're just
regular functions, they're really

90
00:04:53.890 --> 00:04:58.340
just regular functions that return
HTML that just use JSX at this point.

91
00:04:58.340 --> 00:05:01.388
So because of that, when it comes
to something like data fetching or

92
00:05:01.388 --> 00:05:04.008
something like that,
we can do whatever we would normally

93
00:05:04.008 --> 00:05:06.740
do to fetch data in a normal function,
which is really cool.

94
00:05:06.740 --> 00:05:08.386
So, let's talk about that.

95
00:05:08.386 --> 00:05:13.042
So for instance,
if I wanted to grab some data from this,

96
00:05:13.042 --> 00:05:15.371
some data in this homepage.

97
00:05:15.371 --> 00:05:17.458
Let's say that data was async data, so

98
00:05:17.458 --> 00:05:21.710
I'm gonna make this function an async
function, and I wanted to get some data.

99
00:05:21.710 --> 00:05:25.669
What I'm gonna do is I'm gonna make
a function that says getData, right?

100
00:05:25.669 --> 00:05:29.423
I'm just gonna make a function that
says getData, and it's going to

101
00:05:29.423 --> 00:05:33.254
be an async function, and then I'm
just going to await a new Promise.

102
00:05:33.254 --> 00:05:36.464
I'm just gonna make a delay here,
so we can be dramatic about it.

103
00:05:36.464 --> 00:05:43.540
I'm just gonna do a setTimeout of
some time or something like that.

104
00:05:43.540 --> 00:05:49.139
And it's just gonna resolve, [COUGH] Here,

105
00:05:49.139 --> 00:05:53.650
after some time of, let's say two seconds.

106
00:05:53.650 --> 00:05:59.421
So, it's just gonna do that and
then it's gonna return some data, right?

107
00:05:59.421 --> 00:06:05.093
And then it'll say, cool,
here's some data, here's your data, right?

108
00:06:05.093 --> 00:06:10.333
So now I can go in here and say, cool,
give my data, and I can await that.

109
00:06:10.333 --> 00:06:13.180
You've never been able
to do this in React.

110
00:06:13.180 --> 00:06:17.152
I've never been able to do async
await inside of a component.

111
00:06:17.152 --> 00:06:19.509
You couldn't do it because of
the reasons I just showed you.

112
00:06:19.509 --> 00:06:22.641
It has to be synchronous,
it has to return some JSX.

113
00:06:22.641 --> 00:06:24.631
It's not going to keep track of stuff,

114
00:06:24.631 --> 00:06:28.489
you got to use hooks if you want to do
things and that's just because how React

115
00:06:28.489 --> 00:06:31.463
does reconciliation and
keeping the render cycle clean.

116
00:06:31.463 --> 00:06:36.565
Imagine if React had to wait for
your component to get some data before it

117
00:06:36.565 --> 00:06:41.512
could render it, your app would be so
slow, no one would ever use it.

118
00:06:41.512 --> 00:06:42.796
It wouldn't work, right?

119
00:06:42.796 --> 00:06:46.418
Okay, but on the server, it's cool,
it's fine, it doesn't matter.

120
00:06:46.418 --> 00:06:48.017
So now I can do that, and
I can get the data, and

121
00:06:48.017 --> 00:06:49.633
I can do whatever I want with the data,
right?

122
00:06:49.633 --> 00:06:51.419
So, you can use that data,
I'm just gonna log in.

123
00:06:55.472 --> 00:06:56.846
All right, so
now I can just log that data like that.

124
00:06:56.846 --> 00:06:58.537
I don't know,
I'm just gonna do it this way.

125
00:06:58.537 --> 00:06:59.348
It's how I do it anyway.

126
00:07:06.522 --> 00:07:11.058
There we go, then export default Home.

127
00:07:11.058 --> 00:07:16.972
&gt;&gt; You're not returning
anything in the res or result?

128
00:07:16.972 --> 00:07:19.785
Or response, I mean.

129
00:07:19.785 --> 00:07:20.735
&gt;&gt; No, this should be fine.

130
00:07:20.735 --> 00:07:22.803
This doesn't matter.

131
00:07:22.803 --> 00:07:27.213
That's just TypeScript freaking out.

132
00:07:27.213 --> 00:07:29.941
I think it's another page,
I'm just checking my pages right quick.

133
00:07:29.941 --> 00:07:36.181
&gt;&gt; In the marketing folder,
aren't there conflicting page.tsx files?

134
00:07:36.181 --> 00:07:38.158
&gt;&gt; There is, I added those, there it is.

135
00:07:38.158 --> 00:07:40.515
See, I ran into that.

136
00:07:40.515 --> 00:07:43.235
Actually, I don't even need
this marketing folder.

137
00:07:43.235 --> 00:07:47.460
That is more likely because I feel like it
wasn't even showing the page that I was

138
00:07:47.460 --> 00:07:48.353
interested in.

139
00:07:48.353 --> 00:07:52.966
So there we go, got rid of that.

140
00:07:52.966 --> 00:07:53.793
Now I have to restart it.

141
00:07:53.793 --> 00:08:00.381
It doesn't like when you delete files and
then try to do it again.

142
00:08:00.381 --> 00:08:01.758
Okay, there we go.

143
00:08:01.758 --> 00:08:05.121
Yeah, and
this is why you don't have conflicts.

144
00:08:05.121 --> 00:08:09.558
So I think that's why I didn't add the JSX
in those pages the first time cuz I didn't

145
00:08:09.558 --> 00:08:10.649
want the conflict.

146
00:08:10.649 --> 00:08:13.314
But then it started tripping
because I didn't have JSX in it,

147
00:08:13.314 --> 00:08:14.762
which then caused the conflict.

148
00:08:14.762 --> 00:08:19.547
So now we can await it for
two seconds, we can await this data,

149
00:08:19.547 --> 00:08:23.795
we can log it, and
then we can kind of see what happens.

150
00:08:23.795 --> 00:08:26.768
So you can see it's already taken longer,
that took two seconds,

151
00:08:26.768 --> 00:08:29.222
and then you can see the data
is here on the server side.

152
00:08:29.222 --> 00:08:33.010
So it's not logging here in the console,
in the browser, right?

153
00:08:33.010 --> 00:08:37.842
Because it's server side, so
it's gonna lock in a terminal, yeah.

154
00:08:37.842 --> 00:08:42.834
&gt;&gt; This might be premature, but are there
caching or techniques to deal with,

155
00:08:42.834 --> 00:08:45.408
like the overhead of making the extra,

156
00:08:45.408 --> 00:08:49.086
just the latency of making
a second API call to get data?

157
00:08:49.086 --> 00:08:53.571
&gt;&gt; So are you talking about issues here-
&gt;&gt; Yeah,

158
00:08:53.571 --> 00:08:57.099
I'm assuming that there'll be one
server that's running Next, and

159
00:08:57.099 --> 00:09:00.108
then another API server that
actually gates the database.

160
00:09:00.108 --> 00:09:05.922
&gt;&gt; Yeah, so you can talk directly to
your database here if you want to.

161
00:09:05.922 --> 00:09:10.230
So if you have an ORM, just import your
ORM and talk to your database right here.

162
00:09:10.230 --> 00:09:13.485
So you can just do a SQL query or
whatever query you want right here.

163
00:09:13.485 --> 00:09:17.263
But if there was a third party API that
you wanted to talk to you that was behind

164
00:09:17.263 --> 00:09:19.877
that, then yeah, so
there's built-in caching.

165
00:09:19.877 --> 00:09:24.363
And I kind of talked about earlier, but if
you go to, its advanced, so wait, hold on,

166
00:09:24.363 --> 00:09:27.632
before I talk about it,
I think I am gonna talk about some of it.

167
00:09:27.632 --> 00:09:30.895
Let me just double check
before I get in there.

168
00:09:30.895 --> 00:09:32.917
No, I'm not gonna talk too much
about it because it is very complex.

169
00:09:32.917 --> 00:09:34.615
So I'll just show you right now.

170
00:09:34.615 --> 00:09:40.824
Basically, if you use the fetch
function that's built into Next.js,

171
00:09:40.824 --> 00:09:44.996
you have full control
over how it's cached, and

172
00:09:44.996 --> 00:09:48.863
when it's cached, and where it's cached,

173
00:09:48.863 --> 00:09:53.775
and you have the ability to do
tons of revalidating on it.

174
00:09:53.775 --> 00:09:58.381
So, they have a whole article about
their caching strategy, and again,

175
00:09:58.381 --> 00:10:02.259
I could talk a week just about this,
it's very complicated.

176
00:10:02.259 --> 00:10:06.547
But if you use the built-in fetch, which
is a modified version of the fetch that

177
00:10:06.547 --> 00:10:10.899
you know, you get control over how things
revalidate, where they revalidate,

178
00:10:10.899 --> 00:10:12.509
what paths revalidate them.

179
00:10:12.509 --> 00:10:16.610
And this is just not for
fetching, this is actually for

180
00:10:16.610 --> 00:10:21.782
every single page that we make,
it is cached by default by that path,

181
00:10:21.782 --> 00:10:26.955
and we get full control over how we
revalidate that page given a path by

182
00:10:26.955 --> 00:10:32.161
using a revalidate handler like
revalidate tag or things like that.

183
00:10:32.161 --> 00:10:34.813
We can actually force it
to revalidate a page,

184
00:10:34.813 --> 00:10:37.606
which we will do today
when we do server actions.

185
00:10:37.606 --> 00:10:43.240
So, it's very complicated, but
yes, you can limit that caching.

186
00:10:43.240 --> 00:10:45.903
You can also just do your own
caching that you want yourself.

187
00:10:45.903 --> 00:10:48.977
If you want to hook up Redis and
bring Redis right into this function,

188
00:10:48.977 --> 00:10:50.834
you can do that because this is just Node.

189
00:10:50.834 --> 00:10:55.265
So, whatever you can do on Express or
any server side Node technologies,

190
00:10:55.265 --> 00:10:57.056
you can bring in here as well.

191
00:10:57.056 --> 00:11:01.947
So, it's kind of crazy to think about
that you have Redis running inside of

192
00:11:01.947 --> 00:11:06.853
a component, but yeah, you can because
it's just happens on the server.

193
00:11:06.853 --> 00:11:08.032
&gt;&gt; That's what I was wondering, thanks.

194
00:11:08.032 --> 00:11:08.593
&gt;&gt; Yeah.
&gt;&gt; But

195
00:11:08.593 --> 00:11:12.304
you don't need like a separate Express
server for PG or for the Redis?

196
00:11:12.304 --> 00:11:13.359
&gt;&gt; No, no, no you don't.

197
00:11:13.359 --> 00:11:16.567
Yeah, we're actually about to install
a database right now and use it, yeah.

198
00:11:16.567 --> 00:11:19.939
[LAUGH] Yeah, cool.

