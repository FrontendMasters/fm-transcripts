WEBVTT

1
00:00:00.300 --> 00:00:04.085
Deploying, so
TLDR deploy this thing of Vercel.

2
00:00:04.085 --> 00:00:06.516
I'm just gonna be honest with
you just deployed there.

3
00:00:06.516 --> 00:00:07.058
They built the framework.

4
00:00:07.058 --> 00:00:11.210
They built the infrastructure
to support the framework.

5
00:00:11.210 --> 00:00:15.304
If you want everything has to work out of
the box without anything, deploy there.

6
00:00:15.304 --> 00:00:19.793
If that's all you take on this deployment
thing, that's all you need to know, and

7
00:00:19.793 --> 00:00:22.116
we can walk through deploying something.

8
00:00:22.116 --> 00:00:25.673
But just to walk through how that works,
like I said, in the package.json,

9
00:00:25.673 --> 00:00:27.274
you have these commands, right?

10
00:00:27.274 --> 00:00:29.780
You have build and start.

11
00:00:29.780 --> 00:00:31.473
Let's run that so
I can show you what that is.

12
00:00:31.473 --> 00:00:36.061
So if I run npm run, build and npm run
start, you've never seen the double

13
00:00:36.061 --> 00:00:41.093
ampersand, at least in OSX and Linux,
that just means run the thing on the left,

14
00:00:41.093 --> 00:00:44.279
and when that's done,
run the thing on the right.

15
00:00:44.279 --> 00:00:46.570
You do one ampersand or
to run them both in parallel.

16
00:00:46.570 --> 00:00:49.309
So I'm gonna build this thing and
then I'm gonna start this thing.

17
00:00:49.309 --> 00:00:51.610
And this is exactly what
would happen in production.

18
00:00:51.610 --> 00:00:57.169
You're gonna build it and it's going
to break because it doesn't like

19
00:00:57.169 --> 00:01:03.762
the fact that I have all these TypeScript
errors and stuff, so that's okay though.

20
00:01:03.762 --> 00:01:06.815
I can show you something
really cool that you can do.

21
00:01:06.815 --> 00:01:09.190
[LAUGH].
Let me get rid of this spot thing.

22
00:01:09.190 --> 00:01:12.393
So what you can do to
ignore a lot of that,

23
00:01:12.393 --> 00:01:17.121
you can say TypeScript and
you can say ignore build errors.

24
00:01:17.121 --> 00:01:23.730
And then you can also say eslint,
can you also shut up, and do that too.

25
00:01:23.730 --> 00:01:26.709
It will ignore both of those,
so, hopefully,

26
00:01:26.709 --> 00:01:28.948
that allows us to build something.

27
00:01:28.948 --> 00:01:30.480
So we'll try to build this again.

28
00:01:30.480 --> 00:01:34.484
If this builds, we'll see how next,

29
00:01:34.484 --> 00:01:38.836
there it is,
it did before I could even say it.

30
00:01:38.836 --> 00:01:40.747
So, of course I get this, it failed.

31
00:01:40.747 --> 00:01:43.152
Don't start because I'm already on 3000,
but that's fine.

32
00:01:43.152 --> 00:01:48.200
But what I wanted to show
you is this part right here.

33
00:01:48.200 --> 00:01:49.941
So if you look, here it is.

34
00:01:49.941 --> 00:01:53.025
So if you see, if you have a circle
next to one of these pages,

35
00:01:53.025 --> 00:01:57.680
that means it's a static page as in it was
automatically rendered as static HTML.

36
00:01:57.680 --> 00:02:02.458
Uses no initial props but if you have this
Lambda thing next to it it's a server

37
00:02:02.458 --> 00:02:06.592
side and renders at runtime as in
when someone goes to it or render.

38
00:02:06.592 --> 00:02:11.474
Looks they forgot to update their outputs
here or maybe I forgot to know this doom,

39
00:02:11.474 --> 00:02:16.214
this is this is no longer a thing, get
initial props get service high profit that

40
00:02:16.214 --> 00:02:20.410
doesn't exist anymore, but
let's just look at some of these pages.

41
00:02:20.410 --> 00:02:24.500
So, you can see if I try to go to home,
it has a circle next to it,

42
00:02:24.500 --> 00:02:29.164
which means it's static, which means
this is always going to be here.

43
00:02:29.164 --> 00:02:32.543
If someone tries to go to home when
I deploy this, it's never gonna hit

44
00:02:32.543 --> 00:02:36.611
the server, it's just gonna show the cache
version of this every single time ever,

45
00:02:36.611 --> 00:02:38.170
and until it changes.

46
00:02:38.170 --> 00:02:39.025
So how did you know that?

47
00:02:39.025 --> 00:02:44.547
Well, it's really smart because I don't
have anything here I don't have any props

48
00:02:44.547 --> 00:02:49.916
here I'm not doing anything here there's
no promises being returned, there's

49
00:02:49.916 --> 00:02:55.776
no data being fetched, so it's, you're not
using cookies, you're not using fetch.

50
00:02:55.776 --> 00:03:00.417
This is a static function,
this is in knows that nothing's ever gonna

51
00:03:00.417 --> 00:03:05.058
change about this because everything
that I could do to make it dynamic

52
00:03:05.058 --> 00:03:09.170
they've already hooked into and
know when it's being used.

53
00:03:09.170 --> 00:03:12.050
So because I'm not using it,
it's you're not doing anything.

54
00:03:12.050 --> 00:03:13.526
So there's no way this is dynamic.

55
00:03:13.526 --> 00:03:16.781
So we're just gonna just keep this static,
and they're right,

56
00:03:16.781 --> 00:03:20.341
I'm not doing a damn thing with this
function, so it should be static.

57
00:03:20.341 --> 00:03:22.972
API to do.
Okay, clearly that's literally a Lambda

58
00:03:22.972 --> 00:03:25.980
function, so
that's always gonna be Lambda.

59
00:03:25.980 --> 00:03:28.360
This docs one, this one is also dynamic.

60
00:03:28.360 --> 00:03:32.618
And the reason this one is dynamic is
because we have these spread paras here

61
00:03:32.618 --> 00:03:36.943
and we didn't use something, cuz we
didn't have time to talk about it, but

62
00:03:36.943 --> 00:03:39.240
I'm gonna show you anyway.

63
00:03:39.240 --> 00:03:42.380
We didn't use, where's my repo?

64
00:03:42.380 --> 00:03:43.540
Here we go.

65
00:03:43.540 --> 00:03:45.908
We didn't use something like this,
generateStaticParams.

66
00:03:45.908 --> 00:03:50.198
So if we were to use generateStaticParams
to get every single route that we would

67
00:03:50.198 --> 00:03:54.231
have used ahead of time, in this output,
we wouldn't have just saw this,

68
00:03:54.231 --> 00:03:57.900
we would have saw all the other
routes that got generated from this.

69
00:03:57.900 --> 00:04:02.541
So let's say I had 10 routes that
were gonna be in docs, right?

70
00:04:02.541 --> 00:04:05.660
I had ten different docs pages, and
I knew what they were ahead of time.

71
00:04:05.660 --> 00:04:09.571
And I used generateStaticParams to
return an array of those ten URLs.

72
00:04:09.571 --> 00:04:13.495
You would see all ten of those URLs here,
and they would be static.

73
00:04:13.495 --> 00:04:17.085
But because Next.js doesn't
know what these URLs are,

74
00:04:17.085 --> 00:04:22.407
because we didn't generate them statically
ahead of time, this has to be dynamic.

75
00:04:22.407 --> 00:04:27.399
It has to render every single time
because this parameter can change so

76
00:04:27.399 --> 00:04:31.723
this is a dynamic page,
this is also static it's a favicon.

77
00:04:31.723 --> 00:04:35.087
So todos, todos is dynamic,
and why is todo dynamic?

78
00:04:35.087 --> 00:04:38.185
&gt;&gt; Was it the hooks that you used in here?

79
00:04:38.185 --> 00:04:38.909
&gt;&gt; In todos,

80
00:04:38.909 --> 00:04:43.257
there is a component somewhere in
that tree that is using hooks.

81
00:04:43.257 --> 00:04:45.540
So yes,
there's some client-side stuff in there.

82
00:04:45.540 --> 00:04:47.272
That's a good one, yeah.

83
00:04:47.272 --> 00:04:51.780
Which means every time you see chunk,
this is client-side code.

84
00:04:51.780 --> 00:04:56.735
So it generated four client-side files.

85
00:04:56.735 --> 00:04:58.050
So that's a good one.

86
00:04:58.050 --> 00:05:00.968
What about another observation.

87
00:05:00.968 --> 00:05:02.970
What are we doing in todos?

88
00:05:02.970 --> 00:05:03.884
What does that page render?

89
00:05:06.077 --> 00:05:07.712
What does it show?

90
00:05:07.712 --> 00:05:09.710
&gt;&gt; Setting it to a completed.

91
00:05:09.710 --> 00:05:11.588
&gt;&gt; Setting it to completed?

92
00:05:11.588 --> 00:05:13.810
Yes, that's client side, exactly.

93
00:05:13.810 --> 00:05:16.903
So somewhere in that tree we
are using client side hooks.

94
00:05:16.903 --> 00:05:18.210
That is true.

95
00:05:18.210 --> 00:05:20.179
We had to use that use transition hook,
which is client side.

96
00:05:20.179 --> 00:05:23.606
So that's that's one of
these files somewhere.

97
00:05:25.419 --> 00:05:27.450
What about the todos page itself?

98
00:05:27.450 --> 00:05:28.954
What are we doing in that page?

99
00:05:28.954 --> 00:05:31.350
&gt;&gt; Getting the data from the database?

100
00:05:31.350 --> 00:05:32.859
&gt;&gt; Yeah,
we're getting the data from the database.

101
00:05:32.859 --> 00:05:35.020
And that has to be dynamic every time,
right?

102
00:05:35.020 --> 00:05:39.343
So every time we go to the todos page,
we want every time I refresh this page and

103
00:05:39.343 --> 00:05:43.400
go to it, t's not started right now
because I stopped it obviously, but

104
00:05:43.400 --> 00:05:46.678
I wanted to go to the database and
get it every single time.

105
00:05:46.678 --> 00:05:51.300
I'm not using React's built-in,
fetch, so it's not caching.

106
00:05:51.300 --> 00:05:53.845
I'm not manually using the cache
function that they give you, so

107
00:05:53.845 --> 00:05:54.918
you can cache it yourself.

108
00:05:54.918 --> 00:05:56.840
So it just has to get
it every single time.

109
00:05:56.840 --> 00:05:59.417
So I was, yeah,
this isn't a static page, it's dynamic.

110
00:05:59.417 --> 00:06:02.885
Every time someone goes to slasher todos,
we have to execute it on a server,

111
00:06:02.885 --> 00:06:04.140
again and again and again.

112
00:06:04.140 --> 00:06:09.308
So that's why that's the case along with
these client side JavaScript, right?

113
00:06:09.308 --> 00:06:13.550
And notice that this home page doesn't
have client side JavaScript because it's

114
00:06:13.550 --> 00:06:15.029
a server function, right?

115
00:06:15.029 --> 00:06:18.434
Any server function that doesn't have
client side JavaScript doesn't generate

116
00:06:18.434 --> 00:06:23.250
any chunks All these chunks
are client side JavaScript.

117
00:06:24.918 --> 00:06:27.193
All right, cool.

118
00:06:27.193 --> 00:06:31.257
And then right here is just some
404 thing that we didn't make.

119
00:06:31.257 --> 00:06:35.260
This seems it's created from next AS,
you can override this, I believe.

120
00:06:35.260 --> 00:06:37.164
And then middleware is just an F,

121
00:06:37.164 --> 00:06:41.385
which I believe is something very
specific to middleware and that's it.

122
00:06:41.385 --> 00:06:45.678
But yeah, you can kind of see how
that works and then you can even

123
00:06:45.678 --> 00:06:50.151
measure of the JavaScript which is
kind of cool of how that works.

124
00:06:50.151 --> 00:06:50.671
Pretty nice.

125
00:06:50.671 --> 00:06:55.454
Okay, yeah, so once you do that this
thing tried to start I'm not gonna

126
00:06:55.454 --> 00:07:00.280
try to start it cuz we already
know it's gonna work what.

127
00:07:00.280 --> 00:07:02.321
Maybe I'll just maybe
I'll just turn that off.

128
00:07:02.321 --> 00:07:03.780
And let's try that again.

129
00:07:03.780 --> 00:07:05.880
So I'm gonna start npm run,
or in this case npm start.

130
00:07:05.880 --> 00:07:10.019
So we're gonna run this in production
mode, which honestly should do the same

131
00:07:10.019 --> 00:07:13.781
thing I tried to go to do is it's
gonna break because of our middleware,

132
00:07:13.781 --> 00:07:16.620
and it's not gonna hot reload
if I tried to save this.

133
00:07:16.620 --> 00:07:19.252
So this is what you
would run in production.

134
00:07:19.252 --> 00:07:23.458
So to deploy this,
the best way to deploy this, I believe,

135
00:07:23.458 --> 00:07:28.520
is just by putting it on GitHub first,
and then heading over to Vercel.

136
00:07:30.470 --> 00:07:32.066
I have a lot of stuff here.

137
00:07:32.066 --> 00:07:33.400
I'm going to make a new project.

138
00:07:35.110 --> 00:07:39.756
I'm going to say, let me go to my thing,

139
00:07:39.756 --> 00:07:43.321
I'm gonna type in intro here.

140
00:07:43.321 --> 00:07:45.748
I have this one from four hours ago, and

141
00:07:45.748 --> 00:07:50.384
by default I don't have to change
anything because it's going to detect,

142
00:07:50.384 --> 00:07:55.624
it already detected that it was Next.js,
hopefully, they know that they made it.

143
00:07:55.624 --> 00:08:00.391
I can adjust the commands but I don't
need to because there are other commands

144
00:08:00.391 --> 00:08:02.896
that I need any environment variables.

145
00:08:02.896 --> 00:08:04.350
These are those secrets.

146
00:08:04.350 --> 00:08:10.326
So remember you have that .env file
here that we added our database,

147
00:08:10.326 --> 00:08:12.809
our database, where is it?

148
00:08:12.809 --> 00:08:14.870
Here we go, this database zero.

149
00:08:14.870 --> 00:08:17.029
This doesn't get checked in to get,
so this isn't in get somewhere.

150
00:08:17.029 --> 00:08:21.250
So I would have to add this to
the environment variable here.

151
00:08:21.250 --> 00:08:23.688
And most likely to be a different
value if we had a real database.

152
00:08:23.688 --> 00:08:26.000
You'd have a URL that
you use in development.

153
00:08:26.000 --> 00:08:29.797
That's probably some local hosting or
maybe your team has money and

154
00:08:29.797 --> 00:08:33.341
it gave you a cloud database that
you can just run rampant with.

155
00:08:33.341 --> 00:08:36.590
But whatever, it'll probably still
be different than what you put here.

156
00:08:36.590 --> 00:08:40.317
I don't actually think the SQLite
will work, but we can try.

157
00:08:40.317 --> 00:08:45.541
I just hit Paste in here and it was smart
to take the name and their value and

158
00:08:45.541 --> 00:08:51.210
separate that, without me going to
separate URLs, that was pretty obvious.

159
00:08:51.210 --> 00:08:53.543
It pasted and did that.
That's kinda blew me away I'm not

160
00:08:53.543 --> 00:08:54.241
gonna lie.

161
00:08:54.241 --> 00:08:58.139
I feel every input should have that
going for it, that was really cool.

162
00:08:58.139 --> 00:09:00.672
And then once we have that,
we can hit Deploy.

163
00:09:00.672 --> 00:09:05.216
Again I don't think the SQL database, the
SQLite database for work in production,

164
00:09:05.216 --> 00:09:09.056
but we're not gonna cover connected
to live databases in this course.

165
00:09:09.056 --> 00:09:11.510
You can watch the full
stack course of that.

166
00:09:11.510 --> 00:09:13.100
But we can just look at
the deployment here.

167
00:09:13.100 --> 00:09:16.754
So it's actually pretty simple,
It'll go in, it'll pretty much run and

168
00:09:16.754 --> 00:09:20.524
the reason I wanted to show you those
commands cuz I want you to see that's just

169
00:09:20.524 --> 00:09:22.860
going to the same commands that we did,
right?

170
00:09:22.860 --> 00:09:27.948
It's gonna do a next build, it's gonna
literally do the exact same thing we did,

171
00:09:27.948 --> 00:09:30.914
nothing new, and
this is gonna try to start it.

172
00:09:30.914 --> 00:09:32.820
So what are they saying?

173
00:09:34.650 --> 00:09:38.161
This set it broke because,
we know I told you to, wait,

174
00:09:38.161 --> 00:09:40.900
this repo I don't have
ignore tight grip on.

175
00:09:40.900 --> 00:09:43.546
So as you can see,
it doesn't like that, right?

176
00:09:43.546 --> 00:09:46.410
So it's going to fail.

177
00:09:46.410 --> 00:09:50.416
So, let me just let me just add this one
then that way I don't have to worry about

178
00:09:50.416 --> 00:09:52.558
that, just let's just create a new one.

179
00:09:52.558 --> 00:09:56.035
So now let's go back to Vercel, and
I think if you try to deploy it on

180
00:09:56.035 --> 00:10:00.350
the first time and it doesn't deploy,
it doesn't create the project.

181
00:10:00.350 --> 00:10:05.078
So it might be good there, but it looks
I already found the new one I wanted.

182
00:10:05.078 --> 00:10:07.320
Everything is good here.

183
00:10:07.320 --> 00:10:10.704
Let's add our database thing even though
I don't think that SQLite files will

184
00:10:10.704 --> 00:10:12.044
work in service environment.

185
00:10:12.044 --> 00:10:12.970
I could be wrong.

186
00:10:12.970 --> 00:10:14.535
I actually never.

187
00:10:14.535 --> 00:10:16.120
Try to use it.

188
00:10:16.120 --> 00:10:17.895
So let's see.

189
00:10:17.895 --> 00:10:19.240
And we'll deploy that.

190
00:10:19.240 --> 00:10:21.530
So hopefully we get past our TypeScript
errors and our ESLint errors now.

191
00:10:21.530 --> 00:10:26.990
I mean, if you're gonna use TypeScript
yesterday, I guess you should

192
00:10:26.990 --> 00:10:32.410
listen to it but sometimes I don't
feel I just want to deploy it quick.

193
00:10:32.410 --> 00:10:37.286
Yeah, so while that's building
we can talk about the other

194
00:10:37.286 --> 00:10:41.585
deployment methods which
would be self-hosting.

195
00:10:41.585 --> 00:10:46.942
So if you're self-hosting you
can use a docker container

196
00:10:46.942 --> 00:10:52.310
to get a lot of the benefits
that you would get from Vercel.

197
00:10:52.310 --> 00:10:57.279
A lot of the platforms do support a lot of
these things, like AWS, EC2, DigitalOcean,

198
00:10:57.279 --> 00:10:57.954
Droplets.

199
00:10:57.954 --> 00:11:00.002
You just need, there's a Next.js,

200
00:11:00.002 --> 00:11:03.330
official Next.js Docker image
that you can use to have that.

201
00:11:05.320 --> 00:11:10.326
There are other not fully managed
app providers like Vercel,

202
00:11:10.326 --> 00:11:12.834
but kind of like a half-step.

203
00:11:12.834 --> 00:11:17.480
For instance, app platform on
Digital Ocean, I've used that before.

204
00:11:17.480 --> 00:11:18.900
Heroku, I'm sure people
have heard of Heroku.

205
00:11:18.900 --> 00:11:23.410
You got Railway and Render, both of
which I use and both are really cool.

206
00:11:23.410 --> 00:11:25.044
You can deploy on those as well and for

207
00:11:25.044 --> 00:11:27.171
the most part you'll get
most of the benefits.

208
00:11:27.171 --> 00:11:28.962
You can even deploy this thing on Netlify,

209
00:11:28.962 --> 00:11:31.500
which gives you pretty much all
the benefits that they have,

210
00:11:31.500 --> 00:11:35.420
I think didn't have like a pretty good
partnership and things going there.

211
00:11:35.420 --> 00:11:39.551
So, it really just depends on where
you deploy to where you would get, but

212
00:11:39.551 --> 00:11:44.283
I don't see a reason why you would deploy
a Next.js app anywhere other than Vercel,

213
00:11:44.283 --> 00:11:46.507
in my opinion, since they created it.

214
00:11:46.507 --> 00:11:50.520
So, I would just do that, you'd
probably get some of the best benefits.

215
00:11:50.520 --> 00:11:55.352
As far as things like middleware working
on your own self-hosted deployment,

216
00:11:55.352 --> 00:12:00.181
well, because you probably, unless you
set up some edge compute yourself, or

217
00:12:00.181 --> 00:12:03.857
some hosted managed platform
that you deployed on has that,

218
00:12:03.857 --> 00:12:06.404
then by default you wouldn't have that.

219
00:12:06.404 --> 00:12:12.100
The sweet thing is that Next.js, they've
opened up their build command to work for

220
00:12:12.100 --> 00:12:15.887
any single framework and
any single hosting provider.

221
00:12:15.887 --> 00:12:20.472
So any hosting provider could implement
that to support your Next.js app.

222
00:12:20.472 --> 00:12:23.630
I forgot the name of it, but
they announced it sometime this year.

223
00:12:23.630 --> 00:12:26.361
So you would have to make sure that
that hosting provider supports it, and

224
00:12:26.361 --> 00:12:27.429
not everyone is gonna do it.

225
00:12:27.429 --> 00:12:31.450
But I think the biggest managed ones do,

226
00:12:31.450 --> 00:12:36.902
like Netlify, Railway,
Render, places like that.

227
00:12:36.902 --> 00:12:39.040
But again, just put it on for
sale, in my opinion.

228
00:12:39.040 --> 00:12:41.134
So, okay, let's see what we got here.

229
00:12:41.134 --> 00:12:48.220
So now we have, let's cache this case,
at least, Prisma.

230
00:12:48.220 --> 00:12:52.515
Okay, now it looks like
Prisma doesn't like it.

231
00:12:52.515 --> 00:12:54.740
Okay, now it wants me to run.

232
00:12:54.740 --> 00:12:59.722
Prisma, this leads to an outdated Prisma,
Prisma's auto-generating isn't triggered.

233
00:12:59.722 --> 00:13:02.410
That's funny, I've literally
never seen that error before.

234
00:13:02.410 --> 00:13:06.355
So, luckily for us, we don't have to
change the code to get this to run.

235
00:13:06.355 --> 00:13:11.960
It looks like they just want us
to add in a new build command.

236
00:13:11.960 --> 00:13:13.769
So we can just go here, we can run.

237
00:13:13.769 --> 00:13:21.756
Let say npm run build and

238
00:13:21.756 --> 00:13:26.949
then npx prisma

239
00:13:26.949 --> 00:13:31.270
generate.

240
00:13:31.270 --> 00:13:31.899
Let's try that.

241
00:13:31.899 --> 00:13:37.350
Or so let's do that.

242
00:13:41.363 --> 00:13:44.950
Cool, okay, and let's try that again.

243
00:13:46.820 --> 00:13:51.492
Deployments, but yeah, any questions on
deploying things in other environments for

244
00:13:51.492 --> 00:13:54.500
Sale, Railway, Runway,
different stuff like that?

245
00:13:57.960 --> 00:14:00.332
&gt;&gt; Can yo do the same
generate first then build.

246
00:14:00.332 --> 00:14:03.382
&gt;&gt; Yeah that's what I just did.

247
00:14:03.382 --> 00:14:06.040
Hopefully, we'll all get there.

248
00:14:06.040 --> 00:14:06.867
I didn't know that was the thing.

249
00:14:06.867 --> 00:14:10.340
I mean,
you have a specific page just for that.

250
00:14:10.340 --> 00:14:11.873
That is crazy.

251
00:14:11.873 --> 00:14:15.243
I honestly would,

252
00:14:15.243 --> 00:14:21.358
it's really what I just typed in.

253
00:14:21.358 --> 00:14:25.219
Npm run build hours, I mean it's same
thing but that's crazy, honestly,

254
00:14:25.219 --> 00:14:26.435
I've never seen that.

255
00:14:26.435 --> 00:14:31.110
I have deployed prisma to this,
to Vercel, I have never seen that before.

256
00:14:31.110 --> 00:14:34.360
&gt;&gt; [INAUDIBLE] get to the conclusion
that the doc's provide on your own.

257
00:14:34.360 --> 00:14:35.640
&gt;&gt; Yeah, it is.

258
00:14:35.640 --> 00:14:37.610
It is.
It makes me think of the person that had

259
00:14:37.610 --> 00:14:39.660
to sit there and do it and
go through that pain.

260
00:14:39.660 --> 00:14:40.471
I'm sorry.

261
00:14:40.471 --> 00:14:41.930
I'm so sorry.

262
00:14:41.930 --> 00:14:45.414
Okay, it looks like everything
got compiled and deployed and

263
00:14:45.414 --> 00:14:46.492
things like that.

264
00:14:46.492 --> 00:14:49.190
So it's looking good.

265
00:14:50.310 --> 00:14:52.104
Let's see what happens here.

266
00:14:52.104 --> 00:14:55.742
I realized I still had that middleware in
there that's preventing us from going to

267
00:14:55.742 --> 00:14:56.490
the todos page.

268
00:14:56.490 --> 00:14:58.698
So I should have took that out, but

269
00:14:58.698 --> 00:15:02.135
we'll still be able to see
the app deployed at least.

270
00:15:02.135 --> 00:15:03.950
Cool, it looks the app is deployed.

271
00:15:03.950 --> 00:15:05.600
We should see some confetti here or
something like that.

272
00:15:05.600 --> 00:15:07.220
There it is.

273
00:15:07.220 --> 00:15:08.130
Yeah, okay.

274
00:15:08.130 --> 00:15:10.480
You just click on it and
you can go to your app.

275
00:15:10.480 --> 00:15:11.509
So here's our app.

276
00:15:11.509 --> 00:15:14.740
Our middleware is working
because we can't go anywhere.

277
00:15:14.740 --> 00:15:16.752
We can't go to the todos,
but there you go.

278
00:15:16.752 --> 00:15:19.257
And then our APIs, let's check our APIs,

279
00:15:19.257 --> 00:15:22.610
which I guess this will test
to see if the database works.

280
00:15:22.610 --> 00:15:23.630
I'm actually very curious.

281
00:15:23.630 --> 00:15:27.730
So let's say API, is it todo or todos?

282
00:15:27.730 --> 00:15:30.980
It is todo.

283
00:15:30.980 --> 00:15:34.160
Yeah, that's the database does not
work in production with SQLite.

284
00:15:34.160 --> 00:15:34.987
So you can't do that.

285
00:15:34.987 --> 00:15:36.840
You need a real database.

286
00:15:36.840 --> 00:15:38.709
But again, that's kind of beyond
the scope of this course.

287
00:15:38.709 --> 00:15:41.300
We got to take the full stack course for
that.

288
00:15:41.300 --> 00:15:43.464
But yeah, and that's how you would deploy.

289
00:15:43.464 --> 00:15:48.314
Obviously there's things to
consider when deploying databases,

290
00:15:48.314 --> 00:15:51.510
Linting, Prisma apparently now.

291
00:15:51.510 --> 00:15:54.614
That you have to consider environment
variables, stuff like that.

292
00:15:54.614 --> 00:15:58.050
But if you wanna know more about that,
we'll cover that in the full stack course.

293
00:15:59.920 --> 00:16:02.567
Cool, any other questions with deploying?

294
00:16:10.390 --> 00:16:16.509
&gt;&gt; Many, so this person says,
any of my customers who want the Next.js

295
00:16:16.509 --> 00:16:21.680
app have their current ecosystems
either in AWS or Azure or

296
00:16:21.680 --> 00:16:27.290
even Netlify, could you speak
to any concerns or challenges?

297
00:16:27.290 --> 00:16:31.153
&gt;&gt; I think you're gonna have tons of
challenges if you aren't on Vercels or

298
00:16:31.153 --> 00:16:32.110
Netlify.

299
00:16:32.110 --> 00:16:36.070
I know for sure Netlify is pretty feature
consistent with Vercel seeing how they're

300
00:16:36.070 --> 00:16:40.029
their own two biggest competitors, but
they're also very friendly with each other

301
00:16:40.029 --> 00:16:43.115
as far as like being able to
support each other's technologies.

302
00:16:43.115 --> 00:16:47.600
So they're Vercel,
you can probably get away with that.

303
00:16:49.470 --> 00:16:54.347
AWS, it's AWS, the thing is, is that
all the infrastructure is there, and

304
00:16:54.347 --> 00:16:58.491
you should be able to leverage
that infrastructure on top of AWS.

305
00:16:58.491 --> 00:17:02.761
I would not be surprised if there
isn't a TerraForm script or

306
00:17:02.761 --> 00:17:07.368
a Docker container or
some AWS Cloud Formation config that isn't

307
00:17:07.368 --> 00:17:12.560
already written to support everything
that you need for Next.js.

308
00:17:12.560 --> 00:17:16.188
The only problem is it's probably lagging
behind any updates that next days might be

309
00:17:16.188 --> 00:17:16.762
happening.

310
00:17:16.762 --> 00:17:20.120
So see how next GS13 just came out.

311
00:17:20.120 --> 00:17:21.436
Some of the stuff might be out of date.

312
00:17:21.436 --> 00:17:25.396
So you got to figure out yourself or
hope someone else does it for you,

313
00:17:25.396 --> 00:17:27.445
if you're not a DevOps expert, but

314
00:17:27.445 --> 00:17:30.950
I would imagine that it wouldn't
be lagging too far behind.

315
00:17:30.950 --> 00:17:32.663
So those might be some
challenges you see there.

316
00:17:32.663 --> 00:17:34.987
Whereas if you deployed like Netlify or
Vercel,

317
00:17:34.987 --> 00:17:38.060
you probably just get that support
out of the gate immediately.

318
00:17:39.090 --> 00:17:39.643
So yeah-.

319
00:17:39.643 --> 00:17:43.511
&gt;&gt; There is one in chat
suggested SST which supports

320
00:17:43.511 --> 00:17:47.390
deploying Next.js on
the AWS infrastructure.

321
00:17:47.390 --> 00:17:48.277
&gt;&gt; Yeah, SST is really cool.

322
00:17:48.277 --> 00:17:51.690
I've actually used it a few times.

323
00:17:51.690 --> 00:17:53.968
So actually I know a lot of SST,

324
00:17:53.968 --> 00:17:58.447
so lady we have her here deployed
next year is about Astro.

325
00:17:58.447 --> 00:18:00.610
Yeah, I guess the thing is,

326
00:18:00.610 --> 00:18:04.860
it's you can use this cuz it
will deploy things for you.

327
00:18:04.860 --> 00:18:08.444
But like I said, if new features come
out that require new infrastructure,

328
00:18:08.444 --> 00:18:12.420
there's no guarantee that something other
than Verscel is gonna have that as soon as

329
00:18:12.420 --> 00:18:13.774
that new feature comes out.

330
00:18:13.774 --> 00:18:18.274
Vercel, they won't launch a new feature in
Next.js that requires new infrastructure

331
00:18:18.274 --> 00:18:21.440
if they haven't already
made the infrastructure.

332
00:18:21.440 --> 00:18:25.240
And I would imagine they have really good
partnerships with a lot of these folks

333
00:18:25.240 --> 00:18:28.523
where they tell them they're
announcing new infrastructure, but

334
00:18:28.523 --> 00:18:31.575
that doesn't mean it's on their
priority roadmap to go update

335
00:18:31.575 --> 00:18:34.190
some thing because Next.js or
Vercel asked them to.

336
00:18:34.190 --> 00:18:37.420
So I would imagine there's probably
gonna be some consistency eventually.

337
00:18:37.420 --> 00:18:41.470
But if you want something right now,
you might just have to wait, you might.

338
00:18:41.470 --> 00:18:43.250
It could be up to date, but maybe not.

339
00:18:43.250 --> 00:18:44.540
But yeah, SST is actually really cool.

