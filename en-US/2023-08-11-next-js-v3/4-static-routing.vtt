WEBVTT

1
00:00:00.320 --> 00:00:04.230
Okay, so now that we got that out of the
way, let's talk about the routing basics.

2
00:00:04.230 --> 00:00:08.190
So, Next.js, like I said,
is a React-based framework.

3
00:00:08.190 --> 00:00:12.920
But also, like I said, React doesn't have
any routing associated with it at all.

4
00:00:12.920 --> 00:00:15.410
You kind of go find your own.

5
00:00:15.410 --> 00:00:18.882
Who here has built a React app where they
had to like go find their own router

6
00:00:18.882 --> 00:00:20.110
for React?

7
00:00:20.110 --> 00:00:22.010
Right, what'd you end up using?

8
00:00:22.010 --> 00:00:22.840
&gt;&gt; React router.

9
00:00:22.840 --> 00:00:23.490
&gt;&gt; React router.

10
00:00:23.490 --> 00:00:26.449
Yeah, anyone had any other luck
with any other frameworks or

11
00:00:26.449 --> 00:00:28.140
any other libraries for routing?

12
00:00:29.290 --> 00:00:30.871
&gt;&gt; Abusing anchor tags.

13
00:00:30.871 --> 00:00:33.400
Of course just using anchor tags, yeah.

14
00:00:33.400 --> 00:00:34.130
&gt;&gt; Abusing.

15
00:00:34.130 --> 00:00:35.150
&gt;&gt; Yeah, abusing it, yeah.

16
00:00:35.150 --> 00:00:37.480
I think there's another one called,
like, Reach Router.

17
00:00:37.480 --> 00:00:39.266
I'm not sure how popular that one is, but

18
00:00:39.266 --> 00:00:42.540
I think it's also made from the same
people who made React Router as well.

19
00:00:42.540 --> 00:00:43.240
I don't know.

20
00:00:43.240 --> 00:00:45.411
But even that alone is
just enough to be like,

21
00:00:45.411 --> 00:00:49.034
now I got to go research all these routing
libraries and see which one's the best and

22
00:00:49.034 --> 00:00:51.580
the most updated and
then learn that thing.

23
00:00:51.580 --> 00:00:56.302
Well, Next.js as a framework is really
just about combining a bunch of

24
00:00:56.302 --> 00:00:59.766
conventions that do things for
you automatically,

25
00:00:59.766 --> 00:01:02.730
where it's supposed to feel magical.

26
00:01:02.730 --> 00:01:04.260
Some people like that magical feeling.

27
00:01:04.260 --> 00:01:06.650
Some people don't like
that magical feeling.

28
00:01:06.650 --> 00:01:09.464
I personally like the magical feeling
when I know what it's doing and

29
00:01:09.464 --> 00:01:10.781
I know what the alternative is.

30
00:01:10.781 --> 00:01:13.468
So one of the magical things that
they do is that they just hook up

31
00:01:13.468 --> 00:01:14.340
the router for you.

32
00:01:14.340 --> 00:01:18.750
So you don't have to go figure out and
download or even configure a router.

33
00:01:18.750 --> 00:01:21.820
You just make files and
folders and it's done.

34
00:01:21.820 --> 00:01:23.080
So how does that work?

35
00:01:23.080 --> 00:01:24.764
Well, it's all based
off the file system and

36
00:01:24.764 --> 00:01:26.910
the structure inside of our app directory.

37
00:01:26.910 --> 00:01:31.395
So basically every single folder that you
make in the app directory is going to

38
00:01:31.395 --> 00:01:35.053
correspond to a different segment
in your router for your app.

39
00:01:35.053 --> 00:01:40.846
So an example would be if we had, /app and
then we had /dashboard and then /settings

40
00:01:40.846 --> 00:01:46.720
that's going to make a route for
our website.com /dashboard /settings.

41
00:01:46.720 --> 00:01:50.422
And then to actually create a page
that loads up on that segment,

42
00:01:50.422 --> 00:01:52.970
all we have to do is
create a page component.

43
00:01:52.970 --> 00:01:59.190
So page.js or page.jsx or page.tsx,
just a page, it has to be called page.

44
00:01:59.190 --> 00:02:02.460
If you use the previous version of Next,
this wasn't the case.

45
00:02:02.460 --> 00:02:05.117
So if you use the pages directory,

46
00:02:05.117 --> 00:02:10.370
any file that you made in a folder
was going to be that route.

47
00:02:10.370 --> 00:02:12.260
So that's not the case here.

48
00:02:12.260 --> 00:02:15.600
In this case, you actually specifically
have to call it page in order for

49
00:02:15.600 --> 00:02:17.860
it to be a page in that segment.

50
00:02:17.860 --> 00:02:18.970
So let's check that out.

51
00:02:20.390 --> 00:02:21.210
We already have one.

52
00:02:21.210 --> 00:02:23.760
If you look in the app directory,
there's a page right on the root.

53
00:02:24.960 --> 00:02:29.280
So seeing how this page file is on the
root, that means its path is just slash.

54
00:02:29.280 --> 00:02:31.165
So this will be the homepage, right?

55
00:02:31.165 --> 00:02:33.610
And we couldn't make another page tsx or
jsx or

56
00:02:33.610 --> 00:02:36.809
js in this folder because we
couldn't have two home pages and

57
00:02:36.809 --> 00:02:40.490
we couldn't have two files
with the same names here.

58
00:02:40.490 --> 00:02:45.090
So you kind of got to think through how
you're working through those conflicts.

59
00:02:45.090 --> 00:02:47.503
But let's say we want to
make a another route here.

60
00:02:47.503 --> 00:02:48.780
So let's make a new folder.

61
00:02:49.890 --> 00:02:54.710
And we'll call it,
let's call it docs because we're going

62
00:02:54.710 --> 00:02:59.635
to have a docs section where we
talk about the docs for our API.

63
00:02:59.635 --> 00:03:07.496
So I can say docs and then I can go
in here then I can say page.tsx.

64
00:03:07.496 --> 00:03:11.210
And all I have to do is just export
a component that returns some jsx, right?

65
00:03:11.210 --> 00:03:13.630
So I'm just going to say const DocsPage.

66
00:03:13.630 --> 00:03:18.160
And I'm just going to make
sure that's a default export.

67
00:03:21.344 --> 00:03:26.650
All right, and then inside of here,
I'm just going to return, not here.

68
00:03:26.650 --> 00:03:34.080
Oops, inside of here, I'm just gonna
return a div that just says DocsPage.

69
00:03:34.080 --> 00:03:35.500
All right, so now we have our DocsPage.

70
00:03:35.500 --> 00:03:40.940
And now without having to stop or start
anything, I can go right into the browser.

71
00:03:40.940 --> 00:03:41.870
I can go into our app.

72
00:03:42.910 --> 00:03:49.025
I can say docs, and I get my docs page And

73
00:03:49.025 --> 00:03:52.560
that's all I had to do to make a new
route, very simple, very easy.

74
00:03:52.560 --> 00:03:55.478
Didn't have to research a router,
didn't have to learn the router,

75
00:03:55.478 --> 00:03:58.020
I didn't have to install the router,
set it up.

76
00:03:58.020 --> 00:04:02.670
I just made a new file, a new folder or
a new file, that was it, it was free.

77
00:04:04.860 --> 00:04:07.170
Any questions on that?

78
00:04:07.170 --> 00:04:09.266
&gt;&gt; Can I just see the code for
that real quick?

79
00:04:09.266 --> 00:04:10.520
&gt;&gt; Yeah, absolutely.

80
00:04:10.520 --> 00:04:13.913
So I made a new folder called docs
on the root of the app folder, and

81
00:04:13.913 --> 00:04:18.260
then I made a page.tsx in that, and
it's just a component that returns a div.

82
00:04:18.260 --> 00:04:23.449
&gt;&gt; Is there a labeling convention for
capitalizing the docs page?

83
00:04:24.660 --> 00:04:29.086
&gt;&gt; Yeah, for the for the most part, you
want to probably capitalize any component

84
00:04:29.086 --> 00:04:32.540
that's a page,
I would say that's usually the convention.

85
00:04:32.540 --> 00:04:35.486
And in fact, if you have a component
that like using for like UI and

86
00:04:35.486 --> 00:04:39.237
you don't like capitalize it, and you try
to bring it in, you will get an error from

87
00:04:39.237 --> 00:04:42.040
React saying like, all right,
this is not a real component.

88
00:04:42.040 --> 00:04:45.523
So because it can't tell if
it's an element or component.

89
00:04:45.523 --> 00:04:48.380
But in the case of this,
it's just a convention.

90
00:04:48.380 --> 00:04:51.530
I don't think obviously
Next.js doesn't care about it.

91
00:04:51.530 --> 00:04:52.236
So but yeah,

92
00:04:52.236 --> 00:04:56.820
you'll see that most of the time of just
being like capitalizing your components.

93
00:04:56.820 --> 00:04:57.967
And in fact, in my case,

94
00:04:57.967 --> 00:05:01.583
I capitalize pretty much every component
that I have just because I don't want

95
00:05:01.583 --> 00:05:06.110
to run into any issues from something like
Next.js or some future version of React.

96
00:05:06.110 --> 00:05:08.210
Also I'm very lazy.

97
00:05:08.210 --> 00:05:11.730
And sometimes I make components
the same name as elements.

98
00:05:11.730 --> 00:05:13.620
And all elements are lowercase.

99
00:05:13.620 --> 00:05:16.255
So I could just avoid that
collision by just making mine

100
00:05:16.255 --> 00:05:18.330
uppercase like a component called image.

101
00:05:18.330 --> 00:05:22.493
Well, you don't want to lowercase image
component cuz in what about the image tag

102
00:05:22.493 --> 00:05:23.490
that is also img.

103
00:05:23.490 --> 00:05:30.152
So, yeah, I just uppercase
everything Any other questions?

104
00:05:34.538 --> 00:05:39.740
Cool, yeah, and so that's pretty
much how you would make a route.

105
00:05:39.740 --> 00:05:44.170
It's basically free, but
it does get more advanced than that.

106
00:05:44.170 --> 00:05:48.490
So with the newest version of Next.js,
we have really cool features in

107
00:05:48.490 --> 00:05:52.300
the routing that allows allow
us to do some exciting stuff.

108
00:05:52.300 --> 00:05:55.960
One of the things is something
called route grouping.

109
00:05:55.960 --> 00:05:58.050
So let's just demonstrate
what route grouping is.

110
00:05:58.050 --> 00:05:58.640
So you can,

111
00:05:58.640 --> 00:06:02.660
it's better just to demonstrate than to
talk about it because it's kinda cool.

112
00:06:02.660 --> 00:06:06.133
So route grouping is basically a way for

113
00:06:06.133 --> 00:06:11.510
you to combine a bunch of routes
that live in a similar place.

114
00:06:12.840 --> 00:06:18.975
Imagine you have a dashboard
that has a very specific layout.

115
00:06:18.975 --> 00:06:21.657
It has navigation on the left,
some navigation on the top and

116
00:06:21.657 --> 00:06:22.874
then the content, right?

117
00:06:22.874 --> 00:06:25.340
And then within a dashboard,
there's 30 pages, right?

118
00:06:25.340 --> 00:06:27.300
Okay, they all have a very similar layout.

119
00:06:27.300 --> 00:06:30.970
So you kind of want them grouped
underneath the same segment.

120
00:06:32.040 --> 00:06:35.210
But let's say you don't want
to put /dashboard in your URL.

121
00:06:35.210 --> 00:06:39.159
You don't want all those routes that
live in the dashboard to have to have

122
00:06:39.159 --> 00:06:40.530
/dashboard in the URL.

123
00:06:40.530 --> 00:06:43.220
You don't want the URL to be affected
by them being grouped together.

124
00:06:43.220 --> 00:06:46.340
Because what you would normally do is
you would just make a new folder and

125
00:06:46.340 --> 00:06:47.595
call it dashboard, right?

126
00:06:47.595 --> 00:06:50.920
And then you would just put all your
stuff in here, and that's totally fine.

127
00:06:50.920 --> 00:06:55.307
But this would make our
website.com/dashboard/ the rest of our

128
00:06:55.307 --> 00:06:55.939
routes.

129
00:06:55.939 --> 00:06:57.590
I don't want that.

130
00:06:57.590 --> 00:07:01.186
But I do want them to be grouped
together and have that common layout.

131
00:07:01.186 --> 00:07:01.862
And we'll talk about layouts later.

132
00:07:01.862 --> 00:07:08.763
So what I can do is I can actually just
wrap this in a parentheses like this.

133
00:07:08.763 --> 00:07:13.899
And now I get the same benefit of any
route that I put in here that's gonna

134
00:07:13.899 --> 00:07:19.480
have the exact same layout shared across
them, but it won't affect the URL.

135
00:07:19.480 --> 00:07:21.390
So let's give it a shot.

136
00:07:21.390 --> 00:07:25.854
So the one thing that you have to think
about when you do these route groupings

137
00:07:25.854 --> 00:07:29.530
is because this segment is not
going to be part of the URL.

138
00:07:29.530 --> 00:07:33.530
That means if I go in and
I make a page.tsx in here,

139
00:07:33.530 --> 00:07:37.480
what is the actual route for this page?

140
00:07:37.480 --> 00:07:40.810
If this is ignored in the URL, so then
what would be the route for this page?

141
00:07:40.810 --> 00:07:43.660
Anyone wanna guess?

142
00:07:43.660 --> 00:07:45.314
&gt;&gt; Home is the index.
&gt;&gt; It would just be home but

143
00:07:45.314 --> 00:07:46.728
I already have one, right?

144
00:07:46.728 --> 00:07:48.091
So now I have a collision, right?

145
00:07:48.091 --> 00:07:50.330
And this is something
you have to think about.

146
00:07:50.330 --> 00:07:53.084
Because this is ignored,
this will be home now.

147
00:07:53.084 --> 00:07:54.490
But I already have a home.

148
00:07:54.490 --> 00:07:55.690
So which one is gonna render?

149
00:07:55.690 --> 00:07:57.031
Whichever one Next.js resolves to.

150
00:07:57.031 --> 00:07:59.470
Actually, I think it will
actually just throw an error.

151
00:07:59.470 --> 00:07:59.970
Let's see.

152
00:08:02.470 --> 00:08:08.312
DashboardPage, I think Next.js
is smart enough to be like,

153
00:08:08.312 --> 00:08:12.330
yeah, you have a conflict there.

154
00:08:12.330 --> 00:08:14.752
Either way, you're not going to get
the behavior that you expect it

155
00:08:14.752 --> 00:08:15.314
if you do this.

156
00:08:15.314 --> 00:08:20.503
So you just have to think about it
when you do these route groupings.

157
00:08:20.503 --> 00:08:21.856
So let's save that.

158
00:08:21.856 --> 00:08:24.912
And then let's go to just home and

159
00:08:24.912 --> 00:08:30.910
you can see it resolved to the one
that was on the route, right?

160
00:08:30.910 --> 00:08:33.230
It just went there instead
of trying to go here.

161
00:08:33.230 --> 00:08:37.744
Now, if I try to go to /dashboard,

162
00:08:37.744 --> 00:08:40.910
we get a 404, right?

163
00:08:40.910 --> 00:08:43.210
Because this segment
doesn't exist in the URL.

164
00:08:43.210 --> 00:08:44.840
So you can't even go to this page.

165
00:08:44.840 --> 00:08:47.568
It's like you just made a page for
nothing.

166
00:08:47.568 --> 00:08:52.511
So to avoid that, typically what you'll
have inside of a folder that's grouped,

167
00:08:52.511 --> 00:08:55.560
or other folders to create real segments,
right?

168
00:08:55.560 --> 00:08:59.619
So you might have dashboard here, but
then inside of dashboard you might have

169
00:08:59.619 --> 00:09:02.744
something like an actual folder
with no parenthesis on it,

170
00:09:02.744 --> 00:09:04.380
it's like settings, right?

171
00:09:04.380 --> 00:09:07.140
And then settings might have
a page inside of it, like so.

172
00:09:08.200 --> 00:09:14.555
And now I can change this from
DashboardPage to SettingsPage,

173
00:09:19.260 --> 00:09:25.046
And now I should be able to route to
/settings and then get this page, right?

174
00:09:25.046 --> 00:09:32.287
So now if I go to /settings,
I'm on the settings page.

175
00:09:32.287 --> 00:09:34.440
Okay, so again,
why would we want to do this?

176
00:09:34.440 --> 00:09:36.250
Well, it has something to do with layouts.

177
00:09:36.250 --> 00:09:38.035
I'm going to briefly talk about layouts,
but

178
00:09:38.035 --> 00:09:39.970
we have a whole thing where
we talk about layouts.

179
00:09:39.970 --> 00:09:43.808
But basically, layouts are,
if you've ever built any app in React,

180
00:09:43.808 --> 00:09:45.900
you've probably made some of these.

181
00:09:45.900 --> 00:09:49.450
This is like, I have some common UI
that I want all of these pages to share.

182
00:09:49.450 --> 00:09:52.330
So I'm going to wrap
them around these pages.

183
00:09:52.330 --> 00:09:53.730
That's basically what layouts is.

184
00:09:53.730 --> 00:09:55.000
But you don't have to do it yourself.

185
00:09:56.160 --> 00:09:57.930
All you have to do is
just make a layout file.

186
00:09:57.930 --> 00:10:02.237
So if I go into the dashboard folder and
make a layout there,

187
00:10:02.237 --> 00:10:07.423
every single page that's on the level or
below will share that layout.

188
00:10:07.423 --> 00:10:10.717
And that's why you would do group folders,
is that, I want everything in this folder

189
00:10:10.717 --> 00:10:13.860
to have the exact same layout
without affecting the URL.

190
00:10:13.860 --> 00:10:17.170
If I do want it to affect the URL, then
I would just get rid of the parentheses.

191
00:10:18.920 --> 00:10:19.800
That's basically it.

192
00:10:19.800 --> 00:10:21.210
That's route grouping.

193
00:10:21.210 --> 00:10:23.739
&gt;&gt; If there's a layout and

194
00:10:23.739 --> 00:10:27.910
a page file inside of a
&gt;&gt; A folder.

195
00:10:27.910 --> 00:10:32.820
&gt;&gt; A group, yeah, it'll render the page
and then render the layout inside of that.

196
00:10:32.820 --> 00:10:35.461
&gt;&gt; Exactly,
if there's a layout next to a page,

197
00:10:35.461 --> 00:10:38.050
the page gets rendered
in the layout always.

198
00:10:39.210 --> 00:10:45.230
Every page on the same level or below
a layout gets rendered in that layout.

199
00:10:45.230 --> 00:10:49.078
And we will talk more about layouts
cuz you can also nest layouts and

200
00:10:49.078 --> 00:10:50.590
it gets pretty crazy.

201
00:10:50.590 --> 00:10:53.810
But yeah, that's, that.

202
00:10:53.810 --> 00:10:55.650
Any questions on that?

203
00:10:57.710 --> 00:10:58.220
Okay, cool.

204
00:10:58.220 --> 00:10:59.430
So let's make the routes for our app.

205
00:10:59.430 --> 00:11:02.680
So for our app, we're going to have,
I mean, here's kind of the layout here.

206
00:11:05.670 --> 00:11:08.335
We're going to have
basically our dashboard,

207
00:11:08.335 --> 00:11:10.920
which is going to be route grouped.

208
00:11:10.920 --> 00:11:13.650
So we're not gonna have
it be part of the URL.

209
00:11:13.650 --> 00:11:15.760
Don't worry about this API thing.

210
00:11:15.760 --> 00:11:16.650
We'll talk about that a little bit.

211
00:11:16.650 --> 00:11:20.330
And then we have this docs folder
here with some crazy thing.

212
00:11:20.330 --> 00:11:21.900
We'll talk about that
crazy thing in a minute.

213
00:11:21.900 --> 00:11:24.360
So let's kinda set that up right now.

214
00:11:24.360 --> 00:11:26.100
So we already have our dashboard.

215
00:11:26.100 --> 00:11:30.410
And inside of our dashboard, we need
a todos folder where we have our page.

216
00:11:30.410 --> 00:11:31.220
So let's do that.

217
00:11:31.220 --> 00:11:34.520
So I'm gonna change
the settings from settings.

218
00:11:34.520 --> 00:11:37.089
I'm gonna rename it to todos.

219
00:11:37.089 --> 00:11:39.610
I don't know why I copid that whole thing.

220
00:11:39.610 --> 00:11:41.030
I gotta write it all over again.

221
00:11:42.620 --> 00:11:46.620
Dashboard, okay,
why did it show it like that?

222
00:11:46.620 --> 00:11:48.070
That was weird.

223
00:11:48.070 --> 00:11:51.970
It should just stop showing me the
shortcut and just show me the whole thing.

224
00:11:51.970 --> 00:11:53.400
Let's call this todos.

225
00:11:53.400 --> 00:11:56.840
There we go.
Okay, there we go.

226
00:11:56.840 --> 00:11:58.230
And then we have our page in there.

227
00:11:58.230 --> 00:12:00.550
And then our doc,
we have our page in there.

228
00:12:00.550 --> 00:12:02.118
So, so far so good.

229
00:12:02.118 --> 00:12:03.421
We have everything that we need.

230
00:12:03.421 --> 00:12:05.860
We're able to route to /todos.

231
00:12:05.860 --> 00:12:07.325
We're able to route to docs.

232
00:12:07.325 --> 00:12:10.918
And we're able to route to the page.

233
00:12:10.918 --> 00:12:13.118
So we can just verify all of that.

234
00:12:13.118 --> 00:12:18.173
I'm going to go to home,
should be able to route there.

235
00:12:18.173 --> 00:12:21.978
Should be able to route to /todos
which just say settings and

236
00:12:21.978 --> 00:12:25.720
then we should be able to route to /docs,
which says docs.

