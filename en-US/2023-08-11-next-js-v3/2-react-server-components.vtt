WEBVTT

1
00:00:00.350 --> 00:00:04.718
Let's just dive right in to the most
craziest thing about this framework and

2
00:00:04.718 --> 00:00:08.813
all the things that, hopefully,
we have a lot of questions on [LAUGH] and

3
00:00:08.813 --> 00:00:09.853
stuff like that.

4
00:00:09.853 --> 00:00:12.901
But I'm just gonna dive right in and kinda
talk about it because I think everything

5
00:00:12.901 --> 00:00:14.579
going forward is based
off this foundation,

6
00:00:14.579 --> 00:00:16.139
so I'm just gonna introduce it early on.

7
00:00:16.139 --> 00:00:18.749
So there's really not a lot
of context right now, but

8
00:00:18.749 --> 00:00:21.060
you will build the context later.

9
00:00:21.060 --> 00:00:23.660
And that is gonna be server components.

10
00:00:23.660 --> 00:00:28.638
So React server components is
a new paradigm introduced in

11
00:00:28.638 --> 00:00:32.912
React 18 and
has been adopted by Next.js 13.

12
00:00:32.912 --> 00:00:37.148
And basically,
the whole new premise of React.js 18 and

13
00:00:37.148 --> 00:00:43.080
Next.js 13 with React Server Components
is trying to address some of the earlier

14
00:00:43.080 --> 00:00:48.740
issues we've had with different types
of rendering modes in the framework.

15
00:00:48.740 --> 00:00:49.699
So before we get into that,

16
00:00:49.699 --> 00:00:52.470
let's just talk about like some of these
different types of rendering modes.

17
00:00:52.470 --> 00:00:55.985
So the one you might be familiar with
the most is called a SPA or S-P-A,

18
00:00:55.985 --> 00:00:57.430
single page application.

19
00:00:57.430 --> 00:01:01.200
This is just like,
you did create React app.

20
00:01:01.200 --> 00:01:03.957
And you just built something
with like React router or

21
00:01:03.957 --> 00:01:08.600
some other HTML based router and you built
an app, that's a single page application.

22
00:01:08.600 --> 00:01:13.205
You just have one index that HTML page in
the browser and every time you do routing,

23
00:01:13.205 --> 00:01:16.830
you're just switching out that
div with another component.

24
00:01:16.830 --> 00:01:20.320
But the HTML page never goes back to
the server and reloads or refetches.

25
00:01:20.320 --> 00:01:25.254
So it's just a single page that switches
out components based off of a router.

26
00:01:25.254 --> 00:01:26.500
And this is really cool.

27
00:01:26.500 --> 00:01:30.696
This was all the crave and
the raised back then because,

28
00:01:30.696 --> 00:01:33.200
it was quick, routing was fast.

29
00:01:33.200 --> 00:01:35.020
You didn't have to worry
about having a server.

30
00:01:35.020 --> 00:01:38.200
You can put it on a CDN,
different things like that.

31
00:01:38.200 --> 00:01:39.260
But it had problems.

32
00:01:39.260 --> 00:01:42.703
The browser had to download all
the JavaScript in order for

33
00:01:42.703 --> 00:01:47.860
people to see things, not only to see
things but to interact with those things.

34
00:01:47.860 --> 00:01:50.531
You also have problems with like crawlers.

35
00:01:50.531 --> 00:01:55.895
If you paste a link to a single-page
application and something like Facebook or

36
00:01:55.895 --> 00:02:00.538
Twitter, it might have been hard to
see those previews pop up because

37
00:02:00.538 --> 00:02:04.560
those crawlers didn't know
how to interpret JavaScript.

38
00:02:04.560 --> 00:02:05.819
And it wasn't gonna wait for
the JavaScript.

39
00:02:05.819 --> 00:02:07.262
So you just wanna see your preview.

40
00:02:07.262 --> 00:02:11.971
And I remember it was a time where even
Google was not good at crawling single

41
00:02:11.971 --> 00:02:13.330
page applications.

42
00:02:13.330 --> 00:02:17.500
So you had all these companies that would
take your app, pre-render it, spit out

43
00:02:17.500 --> 00:02:21.671
the HTML and then give that to a crawler,
or even crazier, you do it dynamically,

44
00:02:21.671 --> 00:02:25.733
you create your own server, detect
that like, a crawler is on my website.

45
00:02:25.733 --> 00:02:29.445
Don't show them the single page
application, show them the pre-rendered

46
00:02:29.445 --> 00:02:33.050
version instead, like that was a thing,
I remember having to make that.

47
00:02:33.050 --> 00:02:35.010
So it was pretty nuts.

48
00:02:35.010 --> 00:02:38.181
So to address that,
server side rendering came out, right?

49
00:02:38.181 --> 00:02:41.910
Server side rendering is basically
kind of the same thing but

50
00:02:41.910 --> 00:02:43.746
with a different first step.

51
00:02:43.746 --> 00:02:47.042
So instead of like rendering
everything on the browser and

52
00:02:47.042 --> 00:02:49.867
having the JavaScript be downloaded,
instead,

53
00:02:49.867 --> 00:02:53.984
the initial render of that page or
that component happens on the server.

54
00:02:53.984 --> 00:02:59.572
So we're gonna take that component, render
it to HTML, send that HTML to the browser,

55
00:02:59.572 --> 00:03:04.040
so it shows up instantly without
any JavaScript download.

56
00:03:04.040 --> 00:03:08.962
And then while that is being shown in the
background, download the JavaScript, and

57
00:03:08.962 --> 00:03:12.635
then have the client version of
that same component take over,

58
00:03:12.635 --> 00:03:15.010
which allows interactivity.

59
00:03:15.010 --> 00:03:19.108
And that swap happens so fast that you
don't see it, but it does happen, so

60
00:03:19.108 --> 00:03:21.920
that way people can see
the page immediately.

61
00:03:21.920 --> 00:03:25.195
Crawlers can get the information
that they want immediately, but

62
00:03:25.195 --> 00:03:29.180
you still have to wait for the JavaScript
to download in order to be interactive.

63
00:03:29.180 --> 00:03:32.312
So we did solve the problem
of seeing things quickly and

64
00:03:32.312 --> 00:03:34.497
solving the SEO and crawler problem.

65
00:03:34.497 --> 00:03:36.445
But we didn't solve the problem of, well,

66
00:03:36.445 --> 00:03:38.926
what if I wanna click on that
form as soon as I see it?

67
00:03:38.926 --> 00:03:41.940
Well you can't, cuz you gotta wait for
the JavaScript to download.

68
00:03:41.940 --> 00:03:46.067
And depending on your Internet connection
and how big the JavaScript was,

69
00:03:46.067 --> 00:03:47.520
it could take a long time.

70
00:03:47.520 --> 00:03:51.344
So then people got really fancy with like,
we'll do code splitting, so

71
00:03:51.344 --> 00:03:54.680
we'll split the bundle up and
then we'll do dynamic imports.

72
00:03:54.680 --> 00:03:57.595
So we only import code that like,
and then it's like yeah, but

73
00:03:57.595 --> 00:03:59.471
are we really solving the problem here?

74
00:03:59.471 --> 00:04:04.406
So, now this brings us to
React Server Component which tries

75
00:04:04.406 --> 00:04:07.130
to solve some of these problems.

76
00:04:07.130 --> 00:04:12.430
So React Server Components is basically
a new way of doing server-side

77
00:04:12.430 --> 00:04:17.904
rendering that is almost like server
side rendering, except for the fact

78
00:04:17.904 --> 00:04:23.932
that there is no JavaScript associated
with the components sent to the browser.

79
00:04:23.932 --> 00:04:28.718
So you could actually run
a React Server Component entirely

80
00:04:28.718 --> 00:04:31.310
without any JavaScript at all.

81
00:04:33.160 --> 00:04:37.960
But the caveat is you can't have any
interactivity in your component either.

82
00:04:37.960 --> 00:04:40.050
You still need client components for that.

83
00:04:40.050 --> 00:04:42.566
But by having these server components,

84
00:04:42.566 --> 00:04:46.490
this allows us to do all the data
fetching necessary for a page.

85
00:04:46.490 --> 00:04:49.420
Imagine you have a blog page that
needs to get content from a CMS.

86
00:04:49.420 --> 00:04:52.863
You can do that on the server while
the component is rendering and

87
00:04:52.863 --> 00:04:56.320
send that back to the client
without any JavaScript added to it.

88
00:04:56.320 --> 00:04:57.844
So there is no need to wait for

89
00:04:57.844 --> 00:05:01.983
an entire bundle of JavaScript to download
just to see anything or interact.

90
00:05:01.983 --> 00:05:05.647
And if there is some interaction on there,
well, that interaction,

91
00:05:05.647 --> 00:05:10.180
that specific component that has
interaction, let's say it's a form.

92
00:05:10.180 --> 00:05:12.268
Only that component can
be a client component.

93
00:05:12.268 --> 00:05:15.392
So therefore, the rest of
the page doesn't have to wait for

94
00:05:15.392 --> 00:05:19.870
that bundle to download to interact with
that form just so you can move around.

95
00:05:19.870 --> 00:05:23.350
So things are being progressively,
what they call progressively enhanced.

96
00:05:23.350 --> 00:05:27.915
So we're choosing what to download at
what specific time based off what needs

97
00:05:27.915 --> 00:05:31.720
versus like, we can only
download everything at one time.

98
00:05:31.720 --> 00:05:34.340
Even though, this whole page
doesn't need any interaction, but

99
00:05:34.340 --> 00:05:35.380
this one component does.

100
00:05:35.380 --> 00:05:37.153
But now we don't have to do that anymore.

101
00:05:37.153 --> 00:05:40.161
Just download the whole page and
then when this thing needs interaction,

102
00:05:40.161 --> 00:05:43.550
we can download that progressively,
we can actually stream it.

103
00:05:43.550 --> 00:05:47.315
So that's kind of like
what server components is.

104
00:05:47.315 --> 00:05:50.529
Next.js has taken that and
built it into the framework.

105
00:05:50.529 --> 00:05:53.130
And it's actually pretty cool.

106
00:05:53.130 --> 00:05:57.372
It's also slightly confusing
if you haven't worked in

107
00:05:57.372 --> 00:06:01.164
a framework that switches
between client side and

108
00:06:01.164 --> 00:06:06.220
server side JavaScript all in one repo and
it all looks the same.

109
00:06:06.220 --> 00:06:09.617
So it's not like, well, this is Express
over here and this is React, so

110
00:06:09.617 --> 00:06:13.070
I can clearly tell which one's back in and
which ones front end.

111
00:06:13.070 --> 00:06:14.552
Okay, now that's not gonna happen anymore.

112
00:06:14.552 --> 00:06:17.062
You are going to be writing
React components, and

113
00:06:17.062 --> 00:06:21.030
they could be working on the back end or
working on the front end or both.

114
00:06:21.030 --> 00:06:24.748
So like having to know which version
is doing, what is kinda confusing, but

115
00:06:24.748 --> 00:06:28.482
we're gonna walk through how best not
to get confused through some of that.

116
00:06:28.482 --> 00:06:32.278
So I'm gonna just talked about
a little bit about difference between

117
00:06:32.278 --> 00:06:35.910
React Server Components
versus server side rendering.

118
00:06:35.910 --> 00:06:40.064
But basically server side
rendering performs that.

119
00:06:40.064 --> 00:06:42.906
It only does server start reading
on that initial load, right?

120
00:06:42.906 --> 00:06:47.732
But then if you try to go back to it,
it's just gonna be client side routing, so

121
00:06:47.732 --> 00:06:49.940
you kinda lose the benefit of that.

122
00:06:49.940 --> 00:06:53.367
Whereas with React Server Components,
every time you go to it,

123
00:06:53.367 --> 00:06:55.211
it's gonna render on the server.

124
00:06:55.211 --> 00:06:59.390
So you always get that benefit
of never needing JavaScript.

125
00:06:59.390 --> 00:07:02.810
This makes the client site bundle
predictable, and cacheable,

126
00:07:02.810 --> 00:07:06.570
which is really hard to do if
the bundle size is always changing.

127
00:07:06.570 --> 00:07:09.460
Now, you don't have to worry about it
changing when you add new pages, because

128
00:07:09.460 --> 00:07:13.050
those pages don't contribute to the bundle
size because they are server components.

129
00:07:13.050 --> 00:07:18.175
So this makes performance basically
easier to do and it's not all perfect.

130
00:07:18.175 --> 00:07:19.943
But for the time being,

131
00:07:19.943 --> 00:07:24.984
I think it's a really good experiment
with the React team is doing,

132
00:07:24.984 --> 00:07:29.859
what the next year's team is doing,
and we'll see if it sticks.

133
00:07:29.859 --> 00:07:31.871
If you ever built something in.

134
00:07:31.871 --> 00:07:38.070
Let me see what's an equivalent like
Elixir, Phoenix, PHP, Ruby on Rails.

135
00:07:38.070 --> 00:07:41.674
It's basically that,
where you're just doing all the logic for

136
00:07:41.674 --> 00:07:44.634
a component executing on a server and
not on a client.

137
00:07:44.634 --> 00:07:47.570
Yeah, that was a long spiel.

138
00:07:47.570 --> 00:07:49.487
I don't expect you to remember and
know all of that.

139
00:07:49.487 --> 00:07:51.377
We're gonna go through a lot
of this in examples, but

140
00:07:51.377 --> 00:07:52.560
I wanted to give you that primer.

141
00:07:52.560 --> 00:07:55.059
So we're gonna start mentioning some of
these words as we write the code, and

142
00:07:55.059 --> 00:07:57.020
I want you to know what they are.

143
00:07:57.020 --> 00:08:02.253
Cool, any questions
&gt;&gt; I got kind of a weird one.

144
00:08:02.253 --> 00:08:08.268
Working with hot wire for rails before,
like the HTML over the wire,

145
00:08:08.268 --> 00:08:12.530
ones that mostly use web
sockets under the hood.

146
00:08:12.530 --> 00:08:14.850
Is that what RSC is doing too or is it?

147
00:08:14.850 --> 00:08:21.960
&gt;&gt; So I know React 18 implements
streaming of the HTML to the browser.

148
00:08:21.960 --> 00:08:26.911
I think Next.js has its own approach where
they actually just pre-rendered instead

149
00:08:26.911 --> 00:08:31.600
of streaming it, the HTML, but you do have
the ability to like stream data to it.

150
00:08:31.600 --> 00:08:33.300
So there is no web
socket's implemented here.

151
00:08:33.300 --> 00:08:37.108
There is no real time component of
like streaming HTML, like Hotwire or

152
00:08:37.108 --> 00:08:41.053
like what Elixir and Phoenix,
like what they do especially in Next.js.

153
00:08:41.053 --> 00:08:42.854
They did do the pre-rendering, but

154
00:08:42.854 --> 00:08:46.804
I don't think there's anything stopping
you from doing it if you want it to, but

155
00:08:46.804 --> 00:08:50.464
I think next year is does just does
the pre-rendering instead of like doing

156
00:08:50.464 --> 00:08:53.110
the streaming by default,
but no, great question.

157
00:08:53.110 --> 00:08:56.970
But as far as like, what you get
is pretty much the same thing.

