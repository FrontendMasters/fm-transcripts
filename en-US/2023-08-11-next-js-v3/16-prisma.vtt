WEBVTT

1
00:00:00.000 --> 00:00:03.586
Now, we're gonna set up all this stuff we
need to actually create some to dues and

2
00:00:03.586 --> 00:00:05.768
pull our to dues into our app and
stuff like that.

3
00:00:05.768 --> 00:00:08.728
In order to do that we
need some type of storage,

4
00:00:08.728 --> 00:00:13.545
we can use a JSON file but it's so free
and easy to set up a database these days.

5
00:00:13.545 --> 00:00:17.290
So I figured we just set up a database and
just get started with that, so

6
00:00:17.290 --> 00:00:18.440
let's just do that.

7
00:00:18.440 --> 00:00:21.517
My favorite way of doing that is
using something called Prisma.

8
00:00:21.517 --> 00:00:27.137
If you've never heard of Prisma, it's
basically just an ORM, a type-checked ORM.

9
00:00:27.137 --> 00:00:30.952
If you don't know what an ORM is,
it's an SDK for a database.

10
00:00:30.952 --> 00:00:32.203
That's literally it.

11
00:00:32.203 --> 00:00:37.051
It's an SDK for a database, Prisma,
there's an SDK for many databases.

12
00:00:37.051 --> 00:00:39.420
So you can pick whatever
database it supports and

13
00:00:39.420 --> 00:00:43.139
you still get the same code experience
no matter what database you support.

14
00:00:43.139 --> 00:00:46.501
So you don't have to like,
I need to know SQL for SQL or Postgres.

15
00:00:46.501 --> 00:00:50.051
And whatever Mongo's query languages for
Mongo or this thing for this.

16
00:00:50.051 --> 00:00:53.009
Nope, you just use Prisma and
it works for every database.

17
00:00:53.009 --> 00:00:55.282
So it doesn't matter, it's pretty sick.

18
00:00:55.282 --> 00:00:58.522
So we're just gonna get started with that,

19
00:00:58.522 --> 00:01:03.349
best way to get started with prisma
is just to npm install prisma.

20
00:01:03.349 --> 00:01:10.315
We're gonna save that as a developer,
a dev dependency, so save dev.

21
00:01:10.315 --> 00:01:15.015
And then another one is npm install

22
00:01:15.015 --> 00:01:19.235
@prisma/client at latest.

23
00:01:19.235 --> 00:01:23.517
That's not a dev dependency,
so you can hit Enter on that.

24
00:01:23.517 --> 00:01:26.846
So just those two, prisma and
then @prisma/client latest.

25
00:01:26.846 --> 00:01:31.186
Once you get those two installed, and
then we just need to set up our database.

26
00:01:31.186 --> 00:01:34.273
We'll just use SQLite, which is basically
like SQL that's based off a file.

27
00:01:34.273 --> 00:01:37.886
So that way we're not like trying to go
host a database somewhere and like and

28
00:01:37.886 --> 00:01:38.739
do all that, so.

29
00:01:40.625 --> 00:01:45.512
Once we have those two things installed,
so

30
00:01:45.512 --> 00:01:49.880
Prisma and then Prisma client latest.

31
00:01:49.880 --> 00:01:55.645
We can just do something
called mpx prisma innit,

32
00:01:55.645 --> 00:02:01.558
which is short for
initialized and we can run that.

33
00:02:01.558 --> 00:02:05.303
And it's just gonna tell us a bunch of
stuff that we don't need to care about

34
00:02:05.303 --> 00:02:08.347
right now, but I'm just gonna
walk you through what it did.

35
00:02:08.347 --> 00:02:12.592
Basically, what we got here
now is on the root of our app,

36
00:02:12.592 --> 00:02:18.441
we should see a Prisma folder, and
it's something called a schema.prisma.

37
00:02:22.016 --> 00:02:23.048
All right, everybody see that?

38
00:02:26.183 --> 00:02:29.696
Actually, I'm gonna start that or I'm
gonna delete it because I just realized I

39
00:02:29.696 --> 00:02:32.912
could add another flag to it, and
it'll generate some more stuff for me.

40
00:02:32.912 --> 00:02:37.215
So I wanna do prisma init,
but then I want to

41
00:02:37.215 --> 00:02:42.132
say data source provider,
SQLite, like that.

42
00:02:42.132 --> 00:02:45.126
If you do that, it'll create like
some other files for us as well,

43
00:02:45.126 --> 00:02:46.148
that's really cool.

44
00:02:46.148 --> 00:02:52.920
So I'll leave that up for
a little bit mpx prisma.net-data

45
00:02:52.920 --> 00:02:58.515
source data provider,
SQLite, I'll run that.

46
00:02:58.515 --> 00:03:02.778
And then what that's gonna do same thing.

47
00:03:02.778 --> 00:03:04.578
I guess it didn't do the thing
that I thought I was gonna do.

48
00:03:04.578 --> 00:03:05.383
I guess you don't have to do that.

49
00:03:05.383 --> 00:03:11.093
All I did was change this to SQLite or
whatever, that's cool, I'm cool with that.

50
00:03:11.093 --> 00:03:16.426
So this is a schema file, if you've
never written a database schema before,

51
00:03:16.426 --> 00:03:19.143
this is what you'll probably do a lot.

52
00:03:19.143 --> 00:03:22.014
You'll have to go into some schema
file and write a schema, but

53
00:03:22.014 --> 00:03:23.217
Prisma's really chill.

54
00:03:23.217 --> 00:03:27.358
It's based off of GraphQL and JavaScript,
so if you've familiar with GraphQL, or

55
00:03:27.358 --> 00:03:30.506
if you just know JavaScript,
which I think everyone here does,

56
00:03:30.506 --> 00:03:32.986
writing a schema's actually
really quite easy.

57
00:03:32.986 --> 00:03:34.870
So we're just gonna write a schema for
our todos.

58
00:03:34.870 --> 00:03:37.576
So I'm just gonna make a new
model using the model keyword.

59
00:03:37.576 --> 00:03:41.530
I'm gonna say, todo, like that.

60
00:03:41.530 --> 00:03:46.851
And I'm gonna give it an id,
let's say its id is type string.

61
00:03:46.851 --> 00:03:51.205
I'm gonna use this app sign to say this
field is is annotated as the ID field.

62
00:03:51.205 --> 00:03:53.213
I'm saying this field is the ID field.

63
00:03:56.847 --> 00:04:00.043
And then I'm just gonna say
I need to give it a default.

64
00:04:00.043 --> 00:04:03.568
And because it's a string,
I can use this built in UUID function.

65
00:04:03.568 --> 00:04:08.358
If you don't know what UUID is, it just
stands for universally unique identifier.

66
00:04:08.358 --> 00:04:14.442
I don't know how to explain it other than
it spits out guaranteed unique strings.

67
00:04:14.442 --> 00:04:17.734
That's the best way I can
describe UUID is if you use it,

68
00:04:17.734 --> 00:04:19.985
you get some unique strings, right?

69
00:04:19.985 --> 00:04:24.280
Here we go, I'm gonna get another one,
there we go, so here's a UUID.

70
00:04:24.280 --> 00:04:25.624
And every time I do it,
I get a new one, right?

71
00:04:25.624 --> 00:04:27.910
So the database will just do that for
me automatically.

72
00:04:27.910 --> 00:04:34.616
[COUGH] It's like different
versions of UUID as well.

73
00:04:34.616 --> 00:04:37.242
So that's all I'm saying,
it's like make that a UUID.

74
00:04:37.242 --> 00:04:42.479
And then I don't know, to do might have
some content whose type is string.

75
00:04:42.479 --> 00:04:48.539
It might have a created at,
whose type is thick?

76
00:04:48.539 --> 00:04:53.657
There's like a I'm sorry, type, Date Time.

77
00:04:53.657 --> 00:05:01.774
And then there's like
a special that's where's that?

78
00:05:01.774 --> 00:05:08.742
Yeah, daytime within like default So,
like, now, something like that.

79
00:05:08.742 --> 00:05:12.914
I could do another one that says,
like, completed.

80
00:05:12.914 --> 00:05:18.588
It's a Boolean, and its default is, false.

81
00:05:21.117 --> 00:05:24.854
All right, pretty simple,
we're not gonna do crazy as this.

82
00:05:24.854 --> 00:05:28.830
In the full stack course, we're gonna have
like, it's gonna be a crazy schema, but

83
00:05:28.830 --> 00:05:30.059
in this is pretty much it.

84
00:05:30.059 --> 00:05:32.037
It doesn't really matter what
database you pick, right?

85
00:05:32.037 --> 00:05:34.970
You can pick SQLite,
you can pick Postgres.

86
00:05:34.970 --> 00:05:37.804
All this is going to be the same,
for the most part.

87
00:05:37.804 --> 00:05:41.157
There's like some different directives
that you might use, but everything to

88
00:05:41.157 --> 00:05:44.658
the left of the directives is pretty much
the same no matter what database you pick,

89
00:05:44.658 --> 00:05:45.522
it's pretty cool.

90
00:05:45.522 --> 00:05:47.508
And if you already have a database
you can just add prisma to it.

91
00:05:47.508 --> 00:05:50.046
It works, it works pretty good.

92
00:05:50.046 --> 00:05:53.623
So we just need to migrate our database to
get it set up so we can start using it.

93
00:05:53.623 --> 00:05:58.760
So we'll do a, npx prisma migrate,

94
00:05:58.760 --> 00:06:03.567
not migrate, deploy, migrate,

95
00:06:03.567 --> 00:06:07.422
let's do a help on this.

96
00:06:07.422 --> 00:06:09.228
I think it's migrate.

97
00:06:09.228 --> 00:06:10.847
Let me see, let's do a migrate help.

98
00:06:10.847 --> 00:06:17.082
So I think we might want migrate dev,
I think, let's do that.

99
00:06:17.082 --> 00:06:22.774
So migrate dev, you can give it a name.

100
00:06:22.774 --> 00:06:25.853
You don't have to name it, but
I'm just gonna name it init.

101
00:06:25.853 --> 00:06:32.477
And of course it breaks because, yeah, we
got to add a DATABASE URL to our env file.

102
00:06:32.477 --> 00:06:35.513
Awesome, great,
segue into envs real quick.

103
00:06:35.513 --> 00:06:41.611
So it should have an ENV file here on the
route that Prisma probably created for us.

104
00:06:41.611 --> 00:06:45.419
If you don't know what an ENV file is, it
stands for an environment variable file.

105
00:06:45.419 --> 00:06:49.771
This is a file in which you don't check
into Git, so I just wanna make sure I go

106
00:06:49.771 --> 00:06:53.939
into my dot get ignore, make sure
that .ENV is listed in here anywhere.

107
00:06:53.939 --> 00:06:56.910
It doesn't matter what line you put it on.

108
00:06:56.910 --> 00:06:58.351
And this will tell GET to ignore it.

109
00:06:58.351 --> 00:07:01.185
The reason you ignore this is this
is where you put your secret stuff.

110
00:07:01.185 --> 00:07:05.659
If you check this into GitHub and it's
something useful, people will have it.

111
00:07:05.659 --> 00:07:10.403
So we're gonna put our database
URL in here, which for

112
00:07:10.403 --> 00:07:15.780
SQLite is where's where's my repo,
it's basically this.

113
00:07:15.780 --> 00:07:22.493
It's a file, so
it's just like file:/dev.db.

114
00:07:22.493 --> 00:07:27.177
So we have that,
now we can run our migration.

115
00:07:27.177 --> 00:07:29.425
And then boom,
it created a migration for us.

116
00:07:29.425 --> 00:07:32.853
We're ready to go,
created a database file for

117
00:07:32.853 --> 00:07:36.121
us right here, something called a journal.

118
00:07:36.121 --> 00:07:37.674
And we are ready to go on that.

119
00:07:37.674 --> 00:07:42.415
So now we're ready to actually use this
data inside of our components that we can

120
00:07:42.415 --> 00:07:46.731
actually do crud on the actual database
and try to create some to do's and

121
00:07:46.731 --> 00:07:49.172
list some to do's and things like that.

122
00:07:49.172 --> 00:07:51.373
So cool, any questions on that?

123
00:07:53.362 --> 00:07:54.924
That was a lot really quick, I know.

124
00:07:54.924 --> 00:07:59.524
I have all the code on the GitHub repo,
so if you feel like I need to catch up,

125
00:07:59.524 --> 00:08:04.570
it's all here, the link's in the initial
page of the notes, right here, remember?

126
00:08:04.570 --> 00:08:09.142
So here you go, so check that out
if you need to catch up, question?

127
00:08:09.142 --> 00:08:11.317
&gt;&gt; It's maybe more of
a personal opinion question.

128
00:08:11.317 --> 00:08:14.568
I've worked with Prisma before but
if we're just like, active record, right?

129
00:08:14.568 --> 00:08:15.846
&gt;&gt; Yeah.

130
00:08:15.846 --> 00:08:19.290
&gt;&gt; In your back, your experiences
Prisma pretty easy to drop

131
00:08:19.290 --> 00:08:24.234
down into a raw SQL when needed for like,
those walkie migrations or that one lookup

132
00:08:24.234 --> 00:08:24.763
&gt;&gt; Yeah, so

133
00:08:24.763 --> 00:08:28.804
it also depends on the database you
used to lifers if you saw that, like,

134
00:08:28.804 --> 00:08:31.669
planet scale,
which handles migrations for you.

135
00:08:31.669 --> 00:08:36.425
Then you could, but you don't, playing
scale doesn't want you to, but prisma does

136
00:08:36.425 --> 00:08:40.671
have the ability for you to drop down and
get pretty custom with raw queries.

137
00:08:40.671 --> 00:08:43.955
I think it actually has a .raw method
where you can just do whatever you want.

138
00:08:43.955 --> 00:08:47.549
So I don't think it,
it doesn't hide it from you, but

139
00:08:47.549 --> 00:08:50.143
it tries to do most of the stuff for you.

140
00:08:50.143 --> 00:08:53.087
Anytime you use a CLI, like in this case,
prisma or something like that,

141
00:08:53.087 --> 00:08:55.717
you can just put npx in front of it so
you don't have to install it.

142
00:08:55.717 --> 00:08:59.405
So that's how you know whether or
not you need to use npx or npm.

143
00:08:59.405 --> 00:09:02.535
You're probably using
npm to install things or

144
00:09:02.535 --> 00:09:05.752
run a script in a package
JSON that you have here.

145
00:09:05.752 --> 00:09:12.017
You're probably using npx to run a CLI or
some other command.

146
00:09:12.017 --> 00:09:19.182
So npx prisma init, and then that
created our data source, our SQLite,

147
00:09:19.182 --> 00:09:24.596
all this stuff here, and
then we just did a migration.

148
00:09:24.596 --> 00:09:28.626
Yeah, we just did a migration here
to sync our state with the database,

149
00:09:28.626 --> 00:09:30.182
with the SQLite database.

150
00:09:30.182 --> 00:09:32.597
You think of migration as
like syncing the database,

151
00:09:32.597 --> 00:09:34.429
that's literally what a migration is.

152
00:09:34.429 --> 00:09:37.066
We've made some changes to our schema, and

153
00:09:37.066 --> 00:09:41.494
we need to sync those changes back
to the database, that's a migration.

154
00:09:41.494 --> 00:09:44.563
Some people's job is
just to write migrations.

155
00:09:44.563 --> 00:09:46.992
In fact, if something was
going to go wrong in your app,

156
00:09:46.992 --> 00:09:48.606
it's probably during a migration.

