WEBVTT

1
00:00:00.000 --> 00:00:03.594
Yes
&gt;&gt; How would you do form validation here?

2
00:00:03.594 --> 00:00:06.797
&gt;&gt; How would you do,
you need client-side if you if you're

3
00:00:06.797 --> 00:00:10.816
gonna do form validation which
requires client-side logic then you?

4
00:00:10.816 --> 00:00:15.145
So basically the goal is
try to push client far down

5
00:00:15.145 --> 00:00:17.940
the tree as far as you can right?

6
00:00:17.940 --> 00:00:21.325
So like if you realize like
I need form validation here,

7
00:00:21.325 --> 00:00:25.297
make sure that you take the only
part that needs form validation.

8
00:00:25.297 --> 00:00:29.979
Take it out and put it in its own
component and make that a client.

9
00:00:29.979 --> 00:00:33.203
Don't punish the rest of that component,
the rest of that page, and

10
00:00:33.203 --> 00:00:36.890
force it to be client because you need
just some logic, just for this one part.

11
00:00:36.890 --> 00:00:39.654
For the one part that you need,
make another component,

12
00:00:39.654 --> 00:00:42.196
make that a client So,
that's how I think about it.

13
00:00:42.196 --> 00:00:43.330
Yeah, yes.

14
00:00:43.330 --> 00:00:46.930
&gt;&gt; If you wanted to redirect on,
like, form submit success,

15
00:00:46.930 --> 00:00:51.178
would you still use revalidate path and
just put in a different URL or,

16
00:00:51.178 --> 00:00:53.278
well, a different path perhaps?

17
00:00:53.278 --> 00:00:55.785
&gt;&gt; Yeah, so
revalidate path won't do any redirecting.

18
00:00:55.785 --> 00:00:58.958
It will just clean the cache out for
that path.

19
00:00:58.958 --> 00:01:02.123
But there is a redirect.

20
00:01:02.123 --> 00:01:04.504
Let me see.

21
00:01:04.504 --> 00:01:09.208
Not that one, is like from next
server I believe, let me see.

22
00:01:15.309 --> 00:01:16.261
Name is not there.

23
00:01:16.261 --> 00:01:19.918
They do have a redirect method that
you can use to redirect anywhere

24
00:01:19.918 --> 00:01:21.168
if you wanna go there.

25
00:01:21.168 --> 00:01:25.570
&gt;&gt; I want you to do authentication checks,
do middlewares.

26
00:01:25.570 --> 00:01:26.873
&gt;&gt; So I do have a thing about middleware.

27
00:01:26.873 --> 00:01:30.722
So there is no right answer on
how to do authentication checks,

28
00:01:30.722 --> 00:01:34.224
you can do them wherever you
need things to be protected.

29
00:01:34.224 --> 00:01:36.901
So because server action run on a server,

30
00:01:36.901 --> 00:01:41.117
you can do authentication checks
in here as well if you wanted to.

31
00:01:41.117 --> 00:01:43.823
You get access to the cookie,
you can use cookies in here.

32
00:01:43.823 --> 00:01:49.474
You can say, cookies, or cookie.

33
00:01:49.474 --> 00:01:53.117
I don't know why it's trying
to pull from from here.

34
00:01:53.117 --> 00:01:57.383
But Next.js has a cookie thing.

35
00:01:57.383 --> 00:01:59.019
So you can access the cookies here.

36
00:01:59.019 --> 00:02:00.889
And you know if you have
some authentication there,

37
00:02:00.889 --> 00:02:02.514
maybe the authentication
is on the headers.

38
00:02:02.514 --> 00:02:06.265
You can use that inside of the server
action which should give you more

39
00:02:06.265 --> 00:02:10.608
information you need to lock down the
server action, or whatever you wanna do.

40
00:02:10.608 --> 00:02:13.504
And the same is true for
any server side logic,

41
00:02:13.504 --> 00:02:18.492
which means you could also prevent someone
from going to a page if you want it to.

42
00:02:18.492 --> 00:02:22.100
On the server side, in this page, you
could just check the cookies on this page

43
00:02:22.100 --> 00:02:24.790
like now you can go here, so
you could totally do that too.

44
00:02:24.790 --> 00:02:26.208
It's up to you.

45
00:02:26.208 --> 00:02:30.782
middlewares more App-wide authentication,
like just protect,

46
00:02:30.782 --> 00:02:36.166
don't even show this route at all unless
they pass this, which is another way.

47
00:02:36.166 --> 00:02:39.386
Then you also have API
authentication protection,

48
00:02:39.386 --> 00:02:41.662
all the way down to database layers.

49
00:02:41.662 --> 00:02:42.838
I don't think there's runway.

50
00:02:42.838 --> 00:02:46.301
I think you just need to figure out
where all your points of attacks are or

51
00:02:46.301 --> 00:02:49.894
all the places you need to protect and
then do the right strategy for that.

52
00:02:49.894 --> 00:02:54.814
&gt;&gt; Someone was asking about if the actions
that TLS is running on the server

53
00:02:54.814 --> 00:02:59.406
it means it runs on the server via
node while others which are client

54
00:02:59.406 --> 00:03:01.214
side runs on the browser.

55
00:03:01.214 --> 00:03:06.359
&gt;&gt; Yes 100%, server means it's running
in the node environment on a machine,

56
00:03:06.359 --> 00:03:11.213
whether it's yours in development or
whatever machine you deployed it to.

57
00:03:11.213 --> 00:03:14.322
And use client means it's running
in the browser like any other React

58
00:03:14.322 --> 00:03:15.939
component you've ever made does.

59
00:03:15.939 --> 00:03:22.810
&gt;&gt; Can the actions.ts process
be ahead of time compiled?

60
00:03:22.810 --> 00:03:28.605
&gt;&gt; I don't think It can be ALT because
I think it has to be dynamic in nature,

61
00:03:28.605 --> 00:03:32.975
I mean I guess I'm not sure
exactly what they mean by ALT

62
00:03:32.975 --> 00:03:37.927
compile like are they saying
the TypeScript are they saying.

63
00:03:37.927 --> 00:03:40.682
Yeah, that's a tough question,

64
00:03:40.682 --> 00:03:46.636
I mean ahead of time could be anything
I mean This definitely can't be static.

65
00:03:46.636 --> 00:03:48.630
If that's what they're getting
to like this has to be dynamic.

66
00:03:48.630 --> 00:03:52.099
It's an action that has
to be performed on.

67
00:03:52.099 --> 00:03:54.981
But you don't wanna memorize this or
cache this by default,

68
00:03:54.981 --> 00:03:57.805
although you can,
depending on what you use, like fetch or

69
00:03:57.805 --> 00:04:00.420
you can opt into next year
says new caching mechanism.

70
00:04:00.420 --> 00:04:05.251
They have a cache function that you could
use to pretty much cache anything but

71
00:04:05.251 --> 00:04:08.755
now from my understanding,
well, that's the thing.

72
00:04:08.755 --> 00:04:13.127
The next thing is you don't really
need to or have to, like, put too much

73
00:04:13.127 --> 00:04:17.659
concern into how things are being
compiled is pretty much handled for you.

74
00:04:17.659 --> 00:04:18.907
That's why they have conventions.

75
00:04:18.907 --> 00:04:23.347
If you follow their conventions,
then you opt into their performance, yes.

76
00:04:23.347 --> 00:04:27.430
&gt;&gt; What about conditional error
messages based on the error type?

77
00:04:27.430 --> 00:04:30.551
&gt;&gt; Conditional error messages
based off the error type.

78
00:04:30.551 --> 00:04:31.665
That's a good question.

79
00:04:31.665 --> 00:04:37.439
I know what error boundaries you get
access to the error objects in the props.

80
00:04:37.439 --> 00:04:41.310
I don't know if you get
that in the error file.

81
00:04:41.310 --> 00:04:44.541
That's a good thing to look
at the docs for, let's see.

82
00:04:44.541 --> 00:04:46.869
If you do, yeah, you do.

83
00:04:46.869 --> 00:04:47.489
There you go.

84
00:04:47.489 --> 00:04:48.620
So yeah, you could do that.

85
00:04:48.620 --> 00:04:53.230
You could just grab the error here.

86
00:04:53.230 --> 00:04:54.969
You also get a reset here.

87
00:04:54.969 --> 00:04:56.132
I knew about the reset without the error.

88
00:04:56.132 --> 00:04:57.603
So yeah, you can just grab the error here.

89
00:04:57.603 --> 00:05:00.297
Look at the error.type, error.message and

90
00:05:00.297 --> 00:05:04.093
this would I guess I'll give you
some incentive to create a really

91
00:05:04.093 --> 00:05:08.251
good error system in your application
that had different error codes.

92
00:05:08.251 --> 00:05:11.892
And things that your error messages can
use to display different types of errors

93
00:05:11.892 --> 00:05:13.209
or UIs and things like that.

94
00:05:13.209 --> 00:05:16.449
And because this is a client component,
you can do whatever the hell you want.

95
00:05:16.449 --> 00:05:19.885
So it works.

96
00:05:19.885 --> 00:05:20.840
Yes.

97
00:05:20.840 --> 00:05:25.218
&gt;&gt; He's just kind of blinking every
time you submit a new to do due to

98
00:05:25.218 --> 00:05:29.937
the revalue revalidate path function,
is there a way to avoid this?

99
00:05:29.937 --> 00:05:34.131
I suppose,
is kind of reloading the page or

100
00:05:34.131 --> 00:05:38.450
doing some sort of
interpreting of the CSS.

101
00:05:38.450 --> 00:05:40.580
&gt;&gt; Yeah, so let me see.

102
00:05:40.580 --> 00:05:41.995
Like that.
Yeah, so I mean,

103
00:05:41.995 --> 00:05:46.230
because that's because it's literally
doing a full re-render of that page.

104
00:05:46.230 --> 00:05:48.598
The only way to avoid it is
kind of what I said earlier.

105
00:05:48.598 --> 00:05:51.640
If you need your UI to update
off of a server mutations,

106
00:05:51.640 --> 00:05:54.098
you're probably just use client instead.

107
00:05:54.098 --> 00:05:59.458
So I would just go back to what you were
doing before server actions came and

108
00:05:59.458 --> 00:06:02.147
handle your mutations client side.

109
00:06:02.147 --> 00:06:03.590
And that way, you have more control.

110
00:06:03.590 --> 00:06:06.217
I think certain mutations are really,
really good.

111
00:06:08.170 --> 00:06:09.569
For side effects and

112
00:06:09.569 --> 00:06:14.020
things that don't need where
the UI is depending on a response.

113
00:06:14.020 --> 00:06:17.777
Because then you do have to ask yourself
questions like that, well, how do I create

114
00:06:17.777 --> 00:06:21.278
a really slick UI that doesn't like
Flickr like that or something like that?

115
00:06:21.278 --> 00:06:22.607
Yeah, you could probably get around it.

116
00:06:22.607 --> 00:06:24.920
You could do some smart
caching you could do.

117
00:06:24.920 --> 00:06:27.977
Some layout stuff like I'm
sure you can figure out a way.

118
00:06:27.977 --> 00:06:29.495
But if you just did it on the client,

119
00:06:29.495 --> 00:06:31.677
you're probably just better
off that way for now.

120
00:06:31.677 --> 00:06:35.794
Me personally, I'll probably use server
access for like tracking analytics,

121
00:06:35.794 --> 00:06:36.709
stuff like that.

122
00:06:36.709 --> 00:06:39.667
Web hooks, things like that that
happened in the background.

123
00:06:39.667 --> 00:06:43.444
But when it comes to UI, I'll probably
still do client stuff for now.

124
00:06:46.319 --> 00:06:48.149
Cool, any other questions?

125
00:06:54.850 --> 00:06:58.774
&gt;&gt; Is it better to use Next.js
routing which is file-based, or

126
00:06:58.774 --> 00:07:00.514
use custom React routing?

127
00:07:00.514 --> 00:07:02.920
I think you already covered
React routing earlier, so.

128
00:07:02.920 --> 00:07:08.134
&gt;&gt; Yeah Yeah, I mean,
if you're not gonna use Next.js routing,

129
00:07:08.134 --> 00:07:11.330
you should probably not use Next.js.

130
00:07:11.330 --> 00:07:13.279
[LAUGH] That's like the whole point of it.

131
00:07:13.279 --> 00:07:19.894
So yeah, if you don't want to use it or
whatever, I would just use React or

132
00:07:19.894 --> 00:07:26.542
go look at another framework like
Gatsby or Remix or something like that.

133
00:07:26.542 --> 00:07:28.239
Cool, any other questions?

134
00:07:28.239 --> 00:07:33.039
&gt;&gt; I guess kind of going off of that,
what if you want to have or you have like

135
00:07:33.039 --> 00:07:37.679
large application where maybe one
file you want to be more like a SPA,

136
00:07:37.679 --> 00:07:41.289
a SPAM, is that something
that you can integrate or?

137
00:07:41.289 --> 00:07:46.146
&gt;&gt; Yeah, I mean, so if you just want
one route to be a SPA, no problem.

138
00:07:46.146 --> 00:07:47.892
You would just go in here.

139
00:07:47.892 --> 00:07:51.269
Let's say, let's pick a file.

140
00:07:51.269 --> 00:07:53.042
No, I don't wanna pick a file because
it's just gonna break everything.

141
00:07:53.042 --> 00:07:54.541
Let's just make a file.

142
00:07:54.541 --> 00:07:59.446
Let's make a new folder and
we'll just call this spa.

143
00:08:01.079 --> 00:08:04.470
And we'll just say page, do tsx, right?

144
00:08:04.470 --> 00:08:10.127
Well, first thing you do, boom,
basically a spot right now, right?

145
00:08:10.127 --> 00:08:12.736
And then from there, the only now,
the only thing you have to think about.

146
00:08:12.736 --> 00:08:16.111
So now, you're not doing
react server components, but

147
00:08:16.111 --> 00:08:19.214
you still got to think about
server side rendering.

148
00:08:19.214 --> 00:08:21.636
You got to opt,
you got to figure out like, well,

149
00:08:21.636 --> 00:08:24.254
what if I'm doing like
window stuff in here, right?

150
00:08:24.254 --> 00:08:25.401
And there's a lot of ways to do that.

151
00:08:25.401 --> 00:08:27.272
You basically just make sure.

152
00:08:27.272 --> 00:08:30.892
Now that anything that
involves a window you know,

153
00:08:30.892 --> 00:08:34.777
you just wrap an if statement
that a if window was here.

154
00:08:34.777 --> 00:08:38.376
That means we're on the server so
don't do this right if window is here,

155
00:08:38.376 --> 00:08:40.149
we're on the browser then do this.

156
00:08:40.149 --> 00:08:42.330
That's another way there's packages for
that.

157
00:08:42.330 --> 00:08:47.257
And yeah, that's pretty much all you need
to do like this basically opps you back

158
00:08:47.257 --> 00:08:48.856
into like spa land right.

159
00:08:48.856 --> 00:08:51.426
And you don't have to worry about or
at least for this page.

160
00:08:51.426 --> 00:08:55.562
And I think that's what
the Next.js team is trying to,

161
00:08:55.562 --> 00:08:59.708
they're trying to make sure
that that's your choice.

162
00:08:59.708 --> 00:09:03.751
Is that like you start off with everything
being server everything you perform it in

163
00:09:03.751 --> 00:09:04.860
their preferred way.

164
00:09:04.860 --> 00:09:07.327
And then when you wanna just kick
back out, like for this page,

165
00:09:07.327 --> 00:09:09.160
it's actually a video
game that I'm making.

166
00:09:09.160 --> 00:09:11.332
So it has to be a single page application.

167
00:09:11.332 --> 00:09:14.890
Yeah, cool, just do this and just be
cautious of service site rendering.

168
00:09:14.890 --> 00:09:19.127
So yeah, at this point, it's the same
thing that Next.js used to be.

169
00:09:19.127 --> 00:09:23.046
So if you ever use Next.js 12,
this is Next.js 12 land right here,

170
00:09:23.046 --> 00:09:27.417
where it's like all you're doing is
worrying about server-side rendering and

171
00:09:27.417 --> 00:09:30.844
there might be even a way to opt
out of server-side rendering.

172
00:09:30.844 --> 00:09:33.529
I don't know how to do it
in the app router land, but

173
00:09:33.529 --> 00:09:35.727
I know in the pages router land you could.

174
00:09:35.727 --> 00:09:40.563
So you might even say don't even render
this thing on the server at all,

175
00:09:40.563 --> 00:09:45.010
which I can look up but I don't know
how to do that in this version.

176
00:09:47.464 --> 00:09:50.348
Cool, any other questions?

177
00:09:54.260 --> 00:09:57.381
&gt;&gt; Since we're handling most of
the data on the server side,

178
00:09:57.381 --> 00:10:00.449
do we still need state
management libraries like Redux?

179
00:10:00.449 --> 00:10:01.530
&gt;&gt; That's a great question.

180
00:10:01.530 --> 00:10:05.676
You would only need state management
libraries like that on client components

181
00:10:05.676 --> 00:10:07.380
that needed state management.

182
00:10:07.380 --> 00:10:12.199
So, I'll give you an example to do form.

183
00:10:12.199 --> 00:10:13.303
I don't have to do this on a server.

184
00:10:13.303 --> 00:10:15.075
In fact, I personally probably wouldn't.

185
00:10:15.075 --> 00:10:18.909
I would probably do this on a client,
so I would do a used state here.

186
00:10:18.909 --> 00:10:21.465
And do an on change on
the input the traditional form.

187
00:10:21.465 --> 00:10:25.435
I would traditionally just do that
because I wanna control over the UI.

188
00:10:25.435 --> 00:10:27.748
So I would do the same thing there and

189
00:10:27.748 --> 00:10:31.988
if there were some other app that
needed to know about that state,

190
00:10:31.988 --> 00:10:36.321
I would have that state management
here and it would know about it.

191
00:10:36.321 --> 00:10:37.629
So you still get that.

192
00:10:37.629 --> 00:10:41.831
He's still not gonna have,
cuz like once you get into the browser,

193
00:10:41.831 --> 00:10:43.684
you are on a client site land.

194
00:10:43.684 --> 00:10:47.093
There's still hydration happening for
the things that need to be hydrated.

195
00:10:47.093 --> 00:10:48.710
React is still being loaded.

196
00:10:48.710 --> 00:10:52.400
So you like you're still gonna have that
client side interaction even though all

197
00:10:52.400 --> 00:10:55.980
your pages that you might have rendered
are just HTML That just means that those

198
00:10:55.980 --> 00:10:58.006
pages don't have any javascripts on them.

199
00:10:58.006 --> 00:11:01.053
So basically if you just
make sure that all the code,

200
00:11:01.053 --> 00:11:05.624
I mean in React Next.js will tell you if
you try to do anything with like a hook or

201
00:11:05.624 --> 00:11:09.389
a state It'll say you need to do
use client so you can't miss it.

202
00:11:09.389 --> 00:11:11.948
Like you can't mess it up because
it'll just be like you can't

203
00:11:11.948 --> 00:11:15.208
you can't run this function you got to put
you state at the use client at the top.

204
00:11:15.208 --> 00:11:19.791
So once you do that,
then it's like anything you've ever done.

205
00:11:19.791 --> 00:11:24.611
Nothing's changed, so you won't even
have to think about that scenario.

206
00:11:24.611 --> 00:11:27.049
Only thing you have to
think about is that,

207
00:11:27.049 --> 00:11:30.594
I can't do this on a component
that doesn't have use client.

208
00:11:30.594 --> 00:11:33.666
And even then, it would tell you that
you can't do that either, that like,

209
00:11:33.666 --> 00:11:34.730
this doesn't work here.

210
00:11:34.730 --> 00:11:38.570
So it's it's kind of hard to mess up,
and I think that's the the right way for

211
00:11:38.570 --> 00:11:39.290
them to do it.

212
00:11:39.290 --> 00:11:44.797
Is that you can just do whatever you
normally have done by opting into it.

213
00:11:44.797 --> 00:11:49.114
So yes, you will probably still need state
management the other reason is that like

214
00:11:49.114 --> 00:11:50.729
state on the server is global.

215
00:11:50.729 --> 00:11:53.089
So every person shares the same state,

216
00:11:53.089 --> 00:11:58.182
assuming it's not in some serverless
environment, at least in development mode.

217
00:11:58.182 --> 00:11:59.921
So yeah, you don't wanna be sharing.

218
00:11:59.921 --> 00:12:02.530
Imagine you just saw someone
typing in your form.

219
00:12:02.530 --> 00:12:03.910
Like, that'd be weird.

220
00:12:03.910 --> 00:12:09.612
So yeah, you don't want to share state
across multiple instances of a client,

221
00:12:09.612 --> 00:12:14.136
across a stateful server,
because a server will be stateful.

222
00:12:14.136 --> 00:12:20.049
In the execution time, so yeah,
&gt;&gt; If we have a server component

223
00:12:20.049 --> 00:12:25.920
inside it client and
inside its server how is this loaded?

224
00:12:25.920 --> 00:12:26.771
&gt;&gt; That's a great question.

225
00:12:26.771 --> 00:12:33.515
So you are able to load server components
and clients and clients and servers.

226
00:12:33.515 --> 00:12:37.755
It's basically, it's going to be loaded in
the order in which you rendered it, right?

227
00:12:37.755 --> 00:12:41.086
Actually, Next.js has
a good example of this, so

228
00:12:41.086 --> 00:12:43.571
I don't have to write a very long one.

229
00:12:43.571 --> 00:12:44.753
Let me find it.

230
00:12:44.753 --> 00:12:47.309
Let's see if they have that code example.

231
00:12:47.309 --> 00:12:48.540
Yeah, basically, here it is.

232
00:12:48.540 --> 00:12:53.076
So, basically there are some caveats
with how you can like I said,

233
00:12:53.076 --> 00:12:58.921
it comes down to what's being loaded first
and like what props you're passing to it.

234
00:12:58.921 --> 00:13:01.819
But here's an example of
like what's not supported.

235
00:13:01.819 --> 00:13:06.483
So like you cannot just by default
import a server component into a client

236
00:13:06.483 --> 00:13:07.328
component.

237
00:13:07.328 --> 00:13:09.373
So like, for instance,
here's a client component,

238
00:13:09.373 --> 00:13:11.823
you have this server component and
you're trying to bring it in.

239
00:13:11.823 --> 00:13:13.739
So by default, that won't work.

240
00:13:13.739 --> 00:13:17.550
So instead, you have to, in this example,

241
00:13:17.550 --> 00:13:23.119
they're wanting you to,
like use a prop as a server component.

242
00:13:23.119 --> 00:13:24.839
And what you can render it that way,
right?

243
00:13:24.839 --> 00:13:29.502
So in this case,
they you can pass the server component as

244
00:13:29.502 --> 00:13:33.301
a child prop of the client component,
right?

245
00:13:33.301 --> 00:13:38.025
So you're not actually
rendering the server

246
00:13:38.025 --> 00:13:42.880
component in the JSX of
the client component.

247
00:13:42.880 --> 00:13:46.975
Instead, your client component
is acting more of a layout or

248
00:13:46.975 --> 00:13:51.408
a template in which it renders any
children that are passed to it.

249
00:13:51.408 --> 00:13:56.481
And then through some intermediary
server component you can import

250
00:13:56.481 --> 00:14:01.650
that client component and have
the server component be a child of it.

251
00:14:01.650 --> 00:14:05.095
Basically, you just literally
cannot import a server component

252
00:14:05.095 --> 00:14:06.480
into a client component.

253
00:14:06.480 --> 00:14:08.020
Can they be rendered next to each other?

254
00:14:08.020 --> 00:14:08.629
Yeah, like this.

255
00:14:08.629 --> 00:14:10.321
You just can't import it in.

256
00:14:10.321 --> 00:14:12.154
You have to find a way to do it this way.

257
00:14:12.154 --> 00:14:15.799
You can only import a server component
into another server component.

258
00:14:15.799 --> 00:14:18.541
But you can import a client
component into a server component.

259
00:14:26.353 --> 00:14:27.493
Any questions on that?

260
00:14:27.493 --> 00:14:31.852
That's kind of confusing,
I had to think about it from I was like.

261
00:14:31.852 --> 00:14:36.273
Now, they have a good ride opponent here
though that talks about all the things.

262
00:14:37.986 --> 00:14:43.099
&gt;&gt; So
do the two server components run first?

263
00:14:43.099 --> 00:14:46.589
&gt;&gt; Do the two server components run first?

264
00:14:46.589 --> 00:14:50.272
Well, because they happen on the server,
they would get executed.

265
00:14:50.272 --> 00:14:54.800
And then the client would
probably be server-side rendered.

266
00:14:54.800 --> 00:14:58.959
So they will all probably
be ran near the same time.

267
00:14:58.959 --> 00:15:01.930
The only difference is the client
component will then be bootstrapped on

268
00:15:01.930 --> 00:15:04.229
the front end,
whereas the server components won't.

269
00:15:11.635 --> 00:15:16.029
&gt;&gt; So with the form example,
we use client.

270
00:15:16.029 --> 00:15:20.695
Does the validation wrap this server

271
00:15:20.695 --> 00:15:25.361
component to the server component or

272
00:15:25.361 --> 00:15:29.437
do the data fetching and stuff?

273
00:15:29.437 --> 00:15:33.285
&gt;&gt; I think the question was,
because we have this this to-do form here

274
00:15:33.285 --> 00:15:36.406
that's being rendered inside
of a server component.

275
00:15:36.406 --> 00:15:40.568
How does the server component pass
down props to the forum if the forum

276
00:15:40.568 --> 00:15:43.530
was a used client,
if it was a client component?

277
00:15:43.530 --> 00:15:45.716
And what does that look like?

278
00:15:45.716 --> 00:15:48.780
As long as it's a serializable prop,
it's got to be fine.

279
00:15:48.780 --> 00:15:50.209
So you shouldn't have a big deal there.

280
00:15:50.209 --> 00:15:54.864
But I think what they're asking is like,
well, how does the server component that's

281
00:15:54.864 --> 00:15:58.259
rendering this to-do form know
when this form was submitted?

282
00:15:58.259 --> 00:15:59.692
Because it can't.

283
00:15:59.692 --> 00:16:01.978
Like call a function or
something like that.

284
00:16:01.978 --> 00:16:05.557
Yeah, it wouldn't because you
can't pass a function as a prop so

285
00:16:05.557 --> 00:16:08.500
either this will have to
remain server like it is now.

286
00:16:08.500 --> 00:16:09.844
Or you make this a client and

287
00:16:09.844 --> 00:16:13.760
then you also make the thing that needs to
know when this thing is done a client and

288
00:16:13.760 --> 00:16:17.867
then those would be two client components
because there's no other way around it.

289
00:16:17.867 --> 00:16:20.243
So you just that's when
you opt back into like,

290
00:16:20.243 --> 00:16:23.105
you guys need to figure out a way
to push this down even further or

291
00:16:23.105 --> 00:16:25.764
like everything that needs this
is just gonna be a client.

292
00:16:25.764 --> 00:16:28.667
Like it's not wrong to have
a client component like,

293
00:16:28.667 --> 00:16:33.006
I don't want people to like avoid them
like the plague like that is not the case.

294
00:16:33.006 --> 00:16:35.589
Use clients as much as you need, but

295
00:16:35.589 --> 00:16:40.339
the way you should be thinking about
is like only when you need it.

296
00:16:40.339 --> 00:16:42.763
So it should be less of them,
not because they're bad but

297
00:16:42.763 --> 00:16:45.301
because you don't need them as
much as you thought you did.

