WEBVTT

1
00:00:00.120 --> 00:00:03.060
So that's just CSS,
you can do that any file that you want.

2
00:00:03.060 --> 00:00:05.960
You can make the CSS wherever you want.

3
00:00:05.960 --> 00:00:10.859
And speaking of making files wherever you
want, one thing I didn't mention about

4
00:00:10.859 --> 00:00:15.620
the app folder that's there really is no
right way on how to organize the files.

5
00:00:15.620 --> 00:00:16.994
And I'll show you what I mean.

6
00:00:16.994 --> 00:00:20.960
I could, right now you see that they have
the globals CSS here in the App folder.

7
00:00:20.960 --> 00:00:23.549
And you could do that,
that's totally fine because again,

8
00:00:23.549 --> 00:00:26.300
as long as it's not a paste,
there's specific names, right?

9
00:00:26.300 --> 00:00:29.440
There's page, there's layout,
there's template.

10
00:00:29.440 --> 00:00:32.750
Those are specific names that it's
looking for to render a specific thing.

11
00:00:32.750 --> 00:00:36.130
So long as it's not one of those names,
you're not gonna affect anything.

12
00:00:36.130 --> 00:00:40.252
But when it comes to folders, let's say
I wanna group my CSS into a folder,

13
00:00:40.252 --> 00:00:42.890
I can make a new folder called CSS.

14
00:00:42.890 --> 00:00:47.330
But does that mean I wanna
route segment name CSS as well?

15
00:00:47.330 --> 00:00:51.305
So, what you can do is you can make it
private by putting an underscore in front

16
00:00:51.305 --> 00:00:53.340
of it, and this will tell it next year.

17
00:00:53.340 --> 00:00:56.360
So all right,
do not include this on the router.

18
00:00:56.360 --> 00:01:00.400
Don't even consider this as a segment,
it's got an underscore in front of it.

19
00:01:00.400 --> 00:01:01.250
Don't even think about it.

20
00:01:01.250 --> 00:01:02.180
So that's one way.

21
00:01:02.180 --> 00:01:07.439
That's a little sloppy, so maybe what
you wanna do instead is not do that,

22
00:01:07.439 --> 00:01:11.695
and instead what you do is just
take it out of the app folder and

23
00:01:11.695 --> 00:01:13.380
just put it on the root.

24
00:01:13.380 --> 00:01:15.320
And now you see it says
it's just on a root.

25
00:01:15.320 --> 00:01:16.210
That also works.

26
00:01:16.210 --> 00:01:17.490
You can do that too.

27
00:01:17.490 --> 00:01:20.130
So there really is no right or
wrong way on how you wanna do it.

28
00:01:20.130 --> 00:01:22.620
It depends on what you wanna take on.

29
00:01:22.620 --> 00:01:25.925
And this is true with any file, or
if you have some utility functions,

30
00:01:25.925 --> 00:01:29.454
you can put them in the app folder,
not put an underscore in front of them and

31
00:01:29.454 --> 00:01:31.350
just don't include a page TSX in them.

32
00:01:31.350 --> 00:01:31.890
That would work.

33
00:01:31.890 --> 00:01:33.835
You could put an underscore
in front of it, or

34
00:01:33.835 --> 00:01:36.130
you can just put it on
the root of your app.

35
00:01:36.130 --> 00:01:37.200
There's so many ways.

36
00:01:37.200 --> 00:01:38.280
There's not really a right way.

37
00:01:38.280 --> 00:01:39.900
There's really no convention.

38
00:01:42.160 --> 00:01:43.923
Okay, so that's standard CSS.

39
00:01:43.923 --> 00:01:47.450
The other way that we can
add some CSS is CSS modules.

40
00:01:47.450 --> 00:01:49.581
Anyone here knows what CSS modules are?

41
00:01:51.888 --> 00:01:53.040
Or wanna take a stab at it?

42
00:01:54.960 --> 00:01:55.990
No, nobody's used modules?

43
00:01:55.990 --> 00:01:59.270
You've probably used them before,
you just don't even realize it.

44
00:01:59.270 --> 00:02:01.546
Basically, CSS modules are just like CSS.

45
00:02:01.546 --> 00:02:05.766
The only problem with traditional CSS,
I mean, and it's in the name of this file,

46
00:02:05.766 --> 00:02:07.400
is that it's global.

47
00:02:07.400 --> 00:02:11.562
So any CSS I make here is gonna affect
everything on the site if it matches.

48
00:02:11.562 --> 00:02:17.000
Whereas modules, CSS modules, are like
JavaScript modules, they're encapsulated.

49
00:02:17.000 --> 00:02:19.910
They won't affect anything else
other than the file in which

50
00:02:19.910 --> 00:02:23.050
they're being imported into and
where you use them.

51
00:02:23.050 --> 00:02:27.759
So you don't have to worry about coming up
with unique global names in your CSS file

52
00:02:27.759 --> 00:02:30.694
to make sure you're not shadowing or
overriding or

53
00:02:30.694 --> 00:02:33.080
colliding with other CSS rules.

54
00:02:33.080 --> 00:02:34.440
It's contained.

55
00:02:34.440 --> 00:02:39.870
And how it looks is mostly
similar to what regular CSS is.

56
00:02:39.870 --> 00:02:42.300
I mean, it's literally just regular CSS.

57
00:02:42.300 --> 00:02:45.420
But you have to think
about how you use them.

58
00:02:45.420 --> 00:02:46.610
So I'll give you an example.

59
00:02:46.610 --> 00:02:49.820
So let's go to docs here.

60
00:02:49.820 --> 00:02:56.546
And I'll make a file and
I'll call this style.module.css like this.

61
00:02:56.546 --> 00:02:59.950
I'm just gonna bring it into this ID here.

62
00:02:59.950 --> 00:03:03.079
So I've styled up module.css,
and then I'll make a style here.

63
00:03:04.340 --> 00:03:07.850
And I'll call it title like that.

64
00:03:07.850 --> 00:03:15.200
And I'll say font-size is 30 pixels,
and then color is red, right?

65
00:03:15.200 --> 00:03:19.650
So I have title, and then what I can do
in the page is I can just import that.

66
00:03:20.980 --> 00:03:23.850
I can say import, I'll call it styles.

67
00:03:23.850 --> 00:03:27.250
So now, because it is a module
I will get a variable here.

68
00:03:27.250 --> 00:03:31.841
So I do have to say import, give it
a name, whatever name I want, from,

69
00:03:31.841 --> 00:03:35.853
and then I have to import it like that,
style.module.css.

70
00:03:35.853 --> 00:03:41.640
And now styles is going to be an object
in which I can add class names to.

71
00:03:41.640 --> 00:03:46.250
And in this case, I can say styles.title.

72
00:03:46.250 --> 00:03:52.460
And I have title because that's
the class name that I added here.

73
00:03:52.460 --> 00:03:57.280
So every rule that you add in
a module file, a CSS module file,

74
00:03:57.280 --> 00:04:01.300
is a property for
the object that you import.

75
00:04:01.300 --> 00:04:02.860
If I can find the font, there we go.

76
00:04:02.860 --> 00:04:06.570
It's a property for
the object in which you import.

77
00:04:06.570 --> 00:04:08.056
So now I have styles.title, right?

78
00:04:08.056 --> 00:04:09.410
So I can save that.

79
00:04:09.410 --> 00:04:13.597
Oops, Save that,

80
00:04:13.597 --> 00:04:17.788
Save this, okay.

81
00:04:17.788 --> 00:04:20.366
And, what was that?

82
00:04:20.366 --> 00:04:21.215
Was that the docs page?

83
00:04:21.215 --> 00:04:21.970
Yeah, that was the docs page.

84
00:04:21.970 --> 00:04:26.906
So now I can go to docs and
you can see it changed here.

85
00:04:26.906 --> 00:04:30.589
And just to show you how it masks and

86
00:04:30.589 --> 00:04:34.913
makes sure your CSS is conflict-free.

87
00:04:34.913 --> 00:04:38.409
If you look at the actual name
of the class I added to it,

88
00:04:38.409 --> 00:04:40.690
it generates a unique class for it.

89
00:04:40.690 --> 00:04:41.800
That's how it does it.

90
00:04:41.800 --> 00:04:45.091
And that's why you have to use
the variable names that it passes you on

91
00:04:45.091 --> 00:04:47.777
the object because it generates
the class name for you.

92
00:04:47.777 --> 00:04:51.228
So it's basically creating
a unique class name for

93
00:04:51.228 --> 00:04:55.400
everything that you use, and
that's how it keeps it safe.

94
00:04:55.400 --> 00:04:59.717
Whereas it's not you just have a shadow
DOM, which is true encapsulation,

95
00:04:59.717 --> 00:05:02.610
something like Vue or Angular Reviews.

96
00:05:02.610 --> 00:05:06.799
It's just creating unique class names for
you based off the CSS that you write.

97
00:05:06.799 --> 00:05:08.036
So that's CSS modules.

98
00:05:08.036 --> 00:05:10.610
I would probably use CSS modules.

99
00:05:10.610 --> 00:05:14.861
If I was gonna write CSS files and
they were not meant to be global,

100
00:05:14.861 --> 00:05:17.116
I would probably use CSS modules.

101
00:05:17.116 --> 00:05:18.999
If I'm like, I'm making a component lib.

102
00:05:18.999 --> 00:05:20.393
Well, in regular component lib,

103
00:05:20.393 --> 00:05:23.090
hopefully you don't have a CSS
file that someone has to import.

104
00:05:23.090 --> 00:05:24.430
I can't stand that.

105
00:05:24.430 --> 00:05:28.116
That is the worst thing to do is to
make a component lib and then it's like,

106
00:05:28.116 --> 00:05:30.211
and now here's how you add the CSS for it.

107
00:05:30.211 --> 00:05:32.300
Just put the CSS in the components.

108
00:05:32.300 --> 00:05:34.290
Please stop doing that.

109
00:05:34.290 --> 00:05:36.492
That's so hard to configure, yes?

110
00:05:36.492 --> 00:05:41.530
&gt;&gt; With CSS modules, can we have
more than one class for an element?

111
00:05:41.530 --> 00:05:44.895
&gt;&gt; Yeah, you can add as many classes you
want because the module doesn't know where

112
00:05:44.895 --> 00:05:45.946
you're gonna add them.

113
00:05:45.946 --> 00:05:51.130
So I can just have another and I can say,

114
00:05:51.130 --> 00:05:54.901
color, or let's just say,

115
00:05:54.901 --> 00:05:59.144
what's a good thing for fonts,

116
00:05:59.144 --> 00:06:04.347
text-transform uppercase, right?

117
00:06:04.347 --> 00:06:05.078
I can do that.

118
00:06:05.078 --> 00:06:09.132
So I can say another, and
then I can go here and also say,

119
00:06:09.132 --> 00:06:12.944
in this case I had to
interpolate to add some spaces.

120
00:06:12.944 --> 00:06:18.941
So I could say, styles.title,
and then styles.another.

121
00:06:18.941 --> 00:06:26.371
And there you go, it's uppercase.

122
00:06:26.371 --> 00:06:28.880
So you can add as many as you want.

123
00:06:28.880 --> 00:06:33.370
And it'll all just be unique
styles out of here, yeah?

124
00:06:33.370 --> 00:06:37.739
&gt;&gt; What is the CSS module syntax to refer
to a CSS declaration that isn't just

125
00:06:37.739 --> 00:06:43.180
a class, for instance, an id plus
a class or something more complicated?

126
00:06:43.180 --> 00:06:45.137
&gt;&gt; Yeah, you probably wouldn't do that.

127
00:06:45.137 --> 00:06:49.834
[LAUGH] Basically, yeah, cuz the whole
purpose of the CSS module is that

128
00:06:49.834 --> 00:06:53.840
I have a style that I wanna add
to a specific element, right?

129
00:06:53.840 --> 00:06:59.860
And so you don't really
need to do those selectors.

130
00:06:59.860 --> 00:07:03.188
I mean,
if you think about the logic behind it,

131
00:07:03.188 --> 00:07:08.017
it's like those selectors are for,
I'm digging into a page that has

132
00:07:08.017 --> 00:07:12.860
some nested amount of HTML and
I'm trying to select it and do a thing.

133
00:07:12.860 --> 00:07:16.793
But if you think about how it would work
in modules, or at least in components

134
00:07:16.793 --> 00:07:20.372
where you have JavaScript,
you probably wouldn't need to do that.

135
00:07:20.372 --> 00:07:23.261
Because then you would just make another
class and add it to that element itself.

136
00:07:23.261 --> 00:07:25.564
Cuz you know what element
you wanna add it to, so

137
00:07:25.564 --> 00:07:28.910
you don't need to have CSS do
the work to find element for you.

138
00:07:28.910 --> 00:07:30.210
You're just be like, here's the element.

139
00:07:31.240 --> 00:07:33.176
Make a style for it,
add it as a class name.

140
00:07:33.176 --> 00:07:34.543
Versus, hey CSS,

141
00:07:34.543 --> 00:07:39.940
go find something that is a child
selector of this paragraph that also had.

142
00:07:39.940 --> 00:07:41.110
That's a lot of work.

143
00:07:41.110 --> 00:07:43.710
So yeah, probably wouldn't do that.

144
00:07:43.710 --> 00:07:46.420
But you can add pseudo selectors to it and
it still works, right?

145
00:07:46.420 --> 00:07:50.927
So you could still do title and
do after, whatever,

146
00:07:50.927 --> 00:07:54.010
it still will attach to this title.

147
00:07:54.010 --> 00:07:56.914
And if you attach this to a class,
it'll affect it.

148
00:07:56.914 --> 00:07:58.681
So you could still do that.

149
00:07:58.681 --> 00:08:04.604
CSS modules also has
an alternative syntax.

150
00:08:04.604 --> 00:08:07.309
Cuz I think it works with post CSS, so

151
00:08:07.309 --> 00:08:11.690
you can do things like nesting classes and
stuff like that.

152
00:08:11.690 --> 00:08:13.020
Let me see if you have a good example.

153
00:08:13.020 --> 00:08:18.130
You can compose class names together
like this, which is pretty cool.

154
00:08:18.130 --> 00:08:21.980
I also think it has a plugin system where
you can do all different types of stuff.

155
00:08:21.980 --> 00:08:23.728
If you wanna reach back out to global,

156
00:08:23.728 --> 00:08:26.800
you can add this global directive
here to reach back out to global.

157
00:08:28.260 --> 00:08:29.707
At the end of the day,

158
00:08:29.707 --> 00:08:33.657
CSS modules was created a long
time ago to solve a problem.

159
00:08:33.657 --> 00:08:36.640
But as you can see,
this was updated six years ago.

160
00:08:36.640 --> 00:08:40.460
I think the community has probably
moved on from CSS modules.

161
00:08:40.460 --> 00:08:44.060
I would even say probably moved on
from just using CSS files in general,

162
00:08:44.060 --> 00:08:46.220
unless it's third-party like Teleway.

163
00:08:47.620 --> 00:08:49.443
So yeah, it's a little outdated.

164
00:08:49.443 --> 00:08:52.933
I would say for the most part
people probably still use SASS or

165
00:08:52.933 --> 00:08:56.289
something like that, or
probably PostCSS with raw CSS and

166
00:08:56.289 --> 00:08:59.730
add in their own plugins that
way if they're gonna use CSS.

167
00:08:59.730 --> 00:09:04.255
But I think the majority of people
probably choose CSS in JavaScript,

168
00:09:04.255 --> 00:09:08.504
which is I think what most
people will probably do.

169
00:09:08.504 --> 00:09:11.614
Which brings me to my next point,
which is CSS in JavaScript.

