WEBVTT

1
00:00:00.120 --> 00:00:02.170
So let's get to layouts and
templates and let's write some code.

2
00:00:02.170 --> 00:00:03.540
So we've seen layouts.

3
00:00:03.540 --> 00:00:04.780
You heard me talk about layouts.

4
00:00:06.700 --> 00:00:07.440
Let's just get into it.

5
00:00:07.440 --> 00:00:11.908
So right now, let's go take a look at
the layout TSX that we have here and

6
00:00:11.908 --> 00:00:15.040
the app that was generated for us.

7
00:00:15.040 --> 00:00:18.602
And if you've ever used
the earlier version of Next.js,

8
00:00:18.602 --> 00:00:21.806
you've probably are asking so
where does the like.

9
00:00:21.806 --> 00:00:23.480
Where does the app file go?

10
00:00:23.480 --> 00:00:27.427
Where like I write the app template,
if I wanna do something globally for

11
00:00:27.427 --> 00:00:30.930
the entire app,
where's the root app basically?

12
00:00:30.930 --> 00:00:33.450
Well, layouts kinda served that purpose.

13
00:00:33.450 --> 00:00:35.870
So a layout, like I said earlier,

14
00:00:35.870 --> 00:00:40.800
is just a component that wraps other
layouts and other pages, right?

15
00:00:40.800 --> 00:00:45.850
It's like, I have some common
functionality, typically UI,

16
00:00:45.850 --> 00:00:51.350
sometimes data that I want for
every single route underneath this layout.

17
00:00:51.350 --> 00:00:54.520
So I'm just going to create
a component that does this.

18
00:00:54.520 --> 00:00:58.180
In fact,
this was such a highly requested feature.

19
00:00:58.180 --> 00:01:00.807
If you go back and
look at the older version of Next.js and

20
00:01:00.807 --> 00:01:04.090
you find that the part where
they talk about layouts.

21
00:01:04.090 --> 00:01:05.242
They basically say, well,

22
00:01:05.242 --> 00:01:07.697
here's how you do it yourself
because we don't support it.

23
00:01:07.697 --> 00:01:09.950
And it's never a really good solution.

24
00:01:09.950 --> 00:01:12.810
It's just like,
they're all just trade-offs.

25
00:01:12.810 --> 00:01:16.611
Now they figured it out, how to do that.

26
00:01:16.611 --> 00:01:19.924
The other biggest complaint was
in the older versions of Next.js,

27
00:01:19.924 --> 00:01:22.390
you could only do data fetching in pages.

28
00:01:22.390 --> 00:01:26.430
But if you need to do data fetching in
a layout, let's say your layout was,

29
00:01:26.430 --> 00:01:29.059
navigation on the left,
navigation on top, and

30
00:01:29.059 --> 00:01:31.647
on the top,
you had to show the user's avatar.

31
00:01:31.647 --> 00:01:35.250
So you had to do some type of fetching
to get the user's information here.

32
00:01:35.250 --> 00:01:36.254
But if that was in a layout,

33
00:01:36.254 --> 00:01:39.380
you couldn't do it on the service side
because layouts couldn't do data fetching.

34
00:01:39.380 --> 00:01:42.009
So it was like you had to do all
this weird work around in order

35
00:01:42.009 --> 00:01:42.914
to get this to work.

36
00:01:42.914 --> 00:01:47.570
But now that's not the case,
data layouts are treated just like pages.

37
00:01:47.570 --> 00:01:50.328
They are first class citizens,
they can do data fetching, and

38
00:01:50.328 --> 00:01:51.533
they allow you to share UI.

39
00:01:51.533 --> 00:01:56.507
So, one rule you have to
have in Next.js app router

40
00:01:56.507 --> 00:02:00.219
is that you have to have a root layout.

41
00:02:00.219 --> 00:02:01.710
But there's many ways you can do it.

42
00:02:01.710 --> 00:02:03.670
One way you can do it is
the way that we see here.

43
00:02:03.670 --> 00:02:08.633
As in there is a layout file immediately
in the root of the app file, and

44
00:02:08.633 --> 00:02:10.530
this is the root layout.

45
00:02:10.530 --> 00:02:13.113
This is like the app.js or JSX or

46
00:02:13.113 --> 00:02:17.880
TSX that you had in the previous
version of Next.js.

47
00:02:17.880 --> 00:02:20.562
It's where your whole app gets
rendered into, so you kinda need this.

48
00:02:20.562 --> 00:02:24.294
You can see I'm actually using the HTML
tag here and the body and then everywhere

49
00:02:24.294 --> 00:02:27.700
where you see children, that's where
the pages get rendered, right?

50
00:02:27.700 --> 00:02:28.950
So the pages get rendered here.

51
00:02:29.980 --> 00:02:34.222
This is also a great place to do anything
global, like I have some global CSS,

52
00:02:34.222 --> 00:02:35.936
some font stuff going on here.

53
00:02:35.936 --> 00:02:37.450
Don't worry about this metadata thing.

54
00:02:37.450 --> 00:02:40.900
We will talk about that, but
essentially it's just a function.

55
00:02:40.900 --> 00:02:43.925
It's just a component that
can do whatever it wants and

56
00:02:43.925 --> 00:02:46.700
it renders its children
which are gonna be pages.

57
00:02:48.150 --> 00:02:48.810
That's it.

58
00:02:48.810 --> 00:02:53.260
&gt;&gt; This is a case where root layout is
a specially namespaced magic keyword or

59
00:02:53.260 --> 00:02:56.695
it could be export
default function foobar.

60
00:02:56.695 --> 00:02:57.980
&gt;&gt; Yeah, so this name is irrelevant.

61
00:02:57.980 --> 00:02:59.060
You can call this whatever you want.

62
00:02:59.060 --> 00:03:02.860
Yeah, this is just what they
generated with when we did that.

63
00:03:02.860 --> 00:03:07.466
Create next app, but yeah, there is no
convention around the name of a component

64
00:03:07.466 --> 00:03:10.360
in Next.js,
you can call it whatever you want.

65
00:03:10.360 --> 00:03:12.380
I just prefer to keep it capital.

66
00:03:12.380 --> 00:03:15.430
But yeah, this name doesn't mean anything.

67
00:03:15.430 --> 00:03:17.660
You can call this literally anything.

68
00:03:17.660 --> 00:03:18.590
But it is a layout.

69
00:03:18.590 --> 00:03:21.250
You can see that we got some CSS here.

70
00:03:21.250 --> 00:03:22.336
We got our classes.

71
00:03:22.336 --> 00:03:24.140
We're wrapping our children.

72
00:03:24.140 --> 00:03:26.340
And as far as like the children,
where does this come from?

73
00:03:26.340 --> 00:03:31.178
Well, if you look at layout,
are there any routes that are children of

74
00:03:31.178 --> 00:03:35.200
this layout as in are there any
folders that are next to it?

75
00:03:35.200 --> 00:03:37.650
Yeah, so that means everything in docs,

76
00:03:37.650 --> 00:03:42.060
everything in dashboard is gonna be
rendered here and any pages next to it.

77
00:03:42.060 --> 00:03:44.150
So this includes this page here, right?

78
00:03:44.150 --> 00:03:49.745
And just to illustrate that,
I can just move this down a little bit and

79
00:03:49.745 --> 00:03:53.329
I can just say, layouts like this, right?

80
00:03:53.329 --> 00:03:57.390
And then I can put the children here.

81
00:03:57.390 --> 00:04:01.595
So once I put layout there and
I go back to our app,

82
00:04:01.595 --> 00:04:05.300
there's always gonna be layout, right?

83
00:04:05.300 --> 00:04:06.924
That's huge.

84
00:04:06.924 --> 00:04:08.660
There's layout right there.

85
00:04:08.660 --> 00:04:12.530
It's always gonna be here cuz
it's part of the entire app.

86
00:04:12.530 --> 00:04:14.089
It's always here.

87
00:04:14.089 --> 00:04:18.722
The other sweet thing about layout is
that even though the route changes,

88
00:04:18.722 --> 00:04:20.749
the layout never re-renders.

89
00:04:20.749 --> 00:04:22.290
It is cached.

90
00:04:22.290 --> 00:04:25.320
It doesn't re-render or re-evaluate.

91
00:04:25.320 --> 00:04:29.408
When you change the route,
it stays the same, which is so great for

92
00:04:29.408 --> 00:04:31.400
something like a UI.

93
00:04:31.400 --> 00:04:35.412
And if you had to do some of this on
your own or previous version of Next,

94
00:04:35.412 --> 00:04:39.084
trying to make sure that doesn't
re-render was always a pain,

95
00:04:39.084 --> 00:04:41.206
like you had to do memos and using it.

96
00:04:41.206 --> 00:04:44.275
It was always a pain to try
to do that stuff yourself.

97
00:04:44.275 --> 00:04:45.410
So now it doesn't.

98
00:04:45.410 --> 00:04:47.197
Layouts just don't re-render.

99
00:04:47.197 --> 00:04:51.410
They will always stay on the page
no matter what route you go to,

100
00:04:51.410 --> 00:04:53.092
which is pretty useful.

101
00:04:53.092 --> 00:04:54.940
And then you can have nested layouts,
right?

102
00:04:54.940 --> 00:05:01.120
So back to our route grouping, example, if
I wanted my dashboard to have a specific

103
00:05:01.120 --> 00:05:07.150
layout to it that my landing page wouldn't
have, I would add that here, right?

104
00:05:07.150 --> 00:05:08.893
So in this case, I do.

105
00:05:08.893 --> 00:05:13.800
My dashboard is probably gonna look
different than my landing page would.

106
00:05:13.800 --> 00:05:18.030
So I'm gonna add a new layout here
in the dashboard group folder.

107
00:05:18.030 --> 00:05:24.680
So I'm gonna make a new file and
I'm gonna call it layout.tsx, yes?

108
00:05:25.730 --> 00:05:29.527
&gt;&gt; Could you fetch user
info in the route layout?

109
00:05:29.527 --> 00:05:31.830
&gt;&gt; Yeah, you could fetch user
info on the route layout.

110
00:05:31.830 --> 00:05:33.820
You could totally do that.

111
00:05:33.820 --> 00:05:38.586
We'll get to data fetching in a minute,
but yeah, you can fetch data and

112
00:05:38.586 --> 00:05:43.420
any, Any component,
any server component at this point.

113
00:05:43.420 --> 00:05:46.288
I mean, you can also fetch
any client component, but

114
00:05:46.288 --> 00:05:49.371
that's not anything you need
to Next.js such as React.

115
00:05:49.371 --> 00:05:51.619
But yeah,
you can fetch data pretty much anywhere.

116
00:05:51.619 --> 00:05:55.468
The only caveat though
is that you can't pass

117
00:05:55.468 --> 00:06:00.170
data down from a layout to
its children through props.

118
00:06:00.170 --> 00:06:00.810
You can't do that.

119
00:06:02.030 --> 00:06:05.714
So, although you can't fetch data,
you cannot pass it down.

120
00:06:07.896 --> 00:06:12.028
And that has a lot to do with the fact
that, one, the layouts don't get

121
00:06:12.028 --> 00:06:17.370
re-rendered, so if the data changed, it's
not re-rendering it back to the children.

122
00:06:17.370 --> 00:06:21.220
So it would only work the first rendered
and anytime after that, it'd be stale, so

123
00:06:21.220 --> 00:06:24.420
you wouldn't wanna use it, so
that's how they keep that.

124
00:06:24.420 --> 00:06:30.314
That way, it also has something to do
with how crossing the network threshold

125
00:06:30.314 --> 00:06:36.129
of client and server and what can and
cannot be serialized over the network.

126
00:06:36.129 --> 00:06:38.940
For instance, you can't serialize
a function over the network.

127
00:06:38.940 --> 00:06:43.322
So passing a callback as a prop is,
you can't do it because you can't send

128
00:06:43.322 --> 00:06:46.379
a function over the Internet but
you can send data.

129
00:06:46.379 --> 00:06:49.172
So we'll talk about that when
we get to client components, but

130
00:06:49.172 --> 00:06:50.710
it's a lot of limitations there.

131
00:06:53.480 --> 00:06:56.330
Cool, so back here in the dashboard group,
I have layout,

132
00:06:56.330 --> 00:06:57.870
I can make a new dashboard layout

133
00:07:04.180 --> 00:07:09.220
Right and it's just a function that we do,
that we export.

134
00:07:09.220 --> 00:07:11.752
And the only thing about layouts,
you can do whatever you want.

135
00:07:11.752 --> 00:07:13.350
You just need to make sure
you render the children.

136
00:07:13.350 --> 00:07:15.750
Because if you don't render the children,
they'll never show through.

137
00:07:15.750 --> 00:07:17.300
It'll just only show your layout.

138
00:07:17.300 --> 00:07:18.330
So just be sure to do that.

139
00:07:18.330 --> 00:07:22.960
So you always wanna make sure you have
your children prop, return your div.

140
00:07:22.960 --> 00:07:25.529
I'm gonna put an h1 here
that says dashboard

141
00:07:31.082 --> 00:07:34.945
And if it has my children, like that.

142
00:07:34.945 --> 00:07:36.630
So I have my dashboard layout.

143
00:07:38.070 --> 00:07:42.270
Now, any children here should be
anything that's sibling to this layout,

144
00:07:42.270 --> 00:07:43.900
which I don't have.

145
00:07:43.900 --> 00:07:46.720
Anything that's a child of it,
which in case it is this todos.

146
00:07:46.720 --> 00:07:53.740
So if I go to slash todos, I should
see this dashboard load up as well.

147
00:07:53.740 --> 00:07:55.970
So let's try that.

148
00:07:57.450 --> 00:07:58.090
There we go.

149
00:07:58.090 --> 00:08:03.665
So you can see here's the route layout,
which nests the dashboard layout,

150
00:08:03.665 --> 00:08:11.036
which renders this page, So
that's how we're able to nest layouts,

151
00:08:11.036 --> 00:08:14.982
because they just reside in
folders underneath each other.

152
00:08:19.279 --> 00:08:22.733
Now, let's say our dashboard and
our homepage were so

153
00:08:22.733 --> 00:08:28.130
significantly different that I don't
want them sharing layouts, period.

154
00:08:28.130 --> 00:08:29.080
Right now, they do.

155
00:08:29.080 --> 00:08:32.604
Right now, they both share the root
layout, but let's say they're so

156
00:08:32.604 --> 00:08:35.850
different that I don't even want that,
but I need a root layout.

157
00:08:37.160 --> 00:08:40.370
Anyone wanna guess how you might
do that in this file system?

158
00:08:47.350 --> 00:08:49.209
&gt;&gt; Tell me it's not putting app in paren.

159
00:08:50.210 --> 00:08:55.460
&gt;&gt; Close [LAUGH] we do need more parens,
but it's not putting app in parens.

160
00:08:55.460 --> 00:09:00.137
It's basically getting rid of the root
layout and making another group,

161
00:09:00.137 --> 00:09:04.061
maybe call it like marketing site or
something like that, and

162
00:09:04.061 --> 00:09:08.150
then putting that in parens and
putting its own layout in there.

163
00:09:08.150 --> 00:09:12.060
That way there is never a layout
on the root of the app.

164
00:09:12.060 --> 00:09:16.840
The only caveat with that is that, let's
say you had ten route groups on your app.

165
00:09:16.840 --> 00:09:21.410
One of those route groups has
to have a page on its root.

166
00:09:21.410 --> 00:09:24.940
So when someone goes to slash,
it renders, right?

167
00:09:24.940 --> 00:09:25.877
So that is the only caveat.

168
00:09:25.877 --> 00:09:29.110
So this isn't part of the app,
but I'll show you.

169
00:09:29.110 --> 00:09:34.939
So I'll make it, so if I say folder and I
say, yeah, cool, this is marketing, right?

170
00:09:34.939 --> 00:09:36.800
Now marketing has its own layout.

171
00:09:39.697 --> 00:09:43.524
Then also when someone
goes to /mywebsite.com,

172
00:09:43.524 --> 00:09:46.465
I want to load up this route right here.

173
00:09:46.465 --> 00:09:48.605
So I put that here on the route and

174
00:09:48.605 --> 00:09:52.899
then any other folders that I put
here what it's the about page.

175
00:09:54.090 --> 00:09:55.450
It's the blog, right?

176
00:09:55.450 --> 00:09:56.870
I can put all that in marketing.

177
00:09:57.900 --> 00:09:59.609
And then I could just get
rid of this layout, right?

178
00:09:59.609 --> 00:10:01.123
I can just delete this file.

179
00:10:05.156 --> 00:10:07.127
If that makes sense.

180
00:10:07.127 --> 00:10:09.837
And that's actually typically
how I build sites now Next.js.

181
00:10:09.837 --> 00:10:12.120
Actually just do grouping like this.

182
00:10:12.120 --> 00:10:14.627
I'll just have like my app and
like dashboard or

183
00:10:14.627 --> 00:10:17.573
whatever, I have the landing page and
like marketing,

184
00:10:17.573 --> 00:10:21.835
I might have something else over here,
admin or something like that and they're

185
00:10:21.835 --> 00:10:25.800
all just their own groups with their
own layouts but it's in the same repo.

186
00:10:28.010 --> 00:10:29.536
That's if you put it all on one domain.

187
00:10:29.536 --> 00:10:32.794
You might just separate all this on
different websites and different domains,

188
00:10:32.794 --> 00:10:34.639
but this is just like if
you need a one domain,

189
00:10:34.639 --> 00:10:38.981
you just do it all here
&gt;&gt; Did I understand correctly

190
00:10:38.981 --> 00:10:43.261
that having a layout file
in every route group,

191
00:10:43.261 --> 00:10:48.729
you will not work if there
are dears that are not route group?

192
00:10:48.729 --> 00:10:50.409
&gt;&gt; Say that again.

193
00:10:50.409 --> 00:10:55.708
&gt;&gt; So like in this case,
we lay out TSX because the docs

194
00:10:55.708 --> 00:11:00.280
directory does not have
a layout file in it.

195
00:11:01.620 --> 00:11:02.700
&gt;&gt; Got you.
Okay, I see.

196
00:11:02.700 --> 00:11:07.517
Yes, so the docs directory would need
a layout cuz it's like, where's my layout?

197
00:11:07.517 --> 00:11:09.596
It wouldn't work.

198
00:11:09.596 --> 00:11:10.500
It would need a layout.

199
00:11:10.500 --> 00:11:15.203
So yeah, if you don't have a layout on
the root, then every folder whether

200
00:11:15.203 --> 00:11:19.681
it's actual segment or group segment
has to have a layout on its route,

201
00:11:19.681 --> 00:11:22.540
because every page has
to render in a layout.

202
00:11:26.720 --> 00:11:27.940
Cool, yes.

203
00:11:27.940 --> 00:11:30.572
&gt;&gt; What's the best way
to separate routing for

204
00:11:30.572 --> 00:11:34.070
the marketing part of the site
versus the app part of site?

205
00:11:34.070 --> 00:11:37.441
&gt;&gt; It comes down to whether or
not you care about the URL being changed.

206
00:11:37.441 --> 00:11:40.452
So if you want the URL to
reflect those differences,

207
00:11:40.452 --> 00:11:44.490
then just get rid of these parentheses,
and then you would just have,

208
00:11:44.490 --> 00:11:49.226
I would say by default, have the marketing
just be folders on the route of the app.

209
00:11:49.226 --> 00:11:53.390
And then have the app be grouped into
something like dashboard or slash app, and

210
00:11:53.390 --> 00:11:56.994
then you can put your whole app in there,
and that's just separating

211
00:11:56.994 --> 00:12:01.140
them functionally, but they were
still share the same route layout.

212
00:12:01.140 --> 00:12:03.916
Now, if you want them to be completely
separated, as in like they're almost

213
00:12:03.916 --> 00:12:07.180
basically two different completely apps,
they don't know about each other's routes.

214
00:12:07.180 --> 00:12:08.670
They don't have the same route layout.

215
00:12:08.670 --> 00:12:10.230
Then you would do what I'm doing now.

216
00:12:10.230 --> 00:12:14.525
You would put two route groups, one that
represents the app that someone logs into,

217
00:12:14.525 --> 00:12:16.842
one that represents the marketing website.

218
00:12:16.842 --> 00:12:22.542
If you put a layout on both of them
like I have now and yeah that's it.

219
00:12:22.542 --> 00:12:26.653
Now they're separated and you just need
to make sure that on your route of your

220
00:12:26.653 --> 00:12:28.499
marketing, you have a page here.

221
00:12:28.499 --> 00:12:32.318
So when someone goes to your website,
the route of it loads this page,

222
00:12:32.318 --> 00:12:34.608
otherwise it wouldn't know where to go.

223
00:12:34.608 --> 00:12:39.288
And then from dashboard, you don't have a
page here because as I showed you earlier,

224
00:12:39.288 --> 00:12:41.570
those will resolve to the same conflict.

225
00:12:41.570 --> 00:12:42.960
They both would just be slash.

226
00:12:42.960 --> 00:12:44.350
So it's like, well,
which one are you showing?

227
00:12:44.350 --> 00:12:45.630
Are you showing dashboard?

228
00:12:45.630 --> 00:12:47.230
Are you showing marketing?

229
00:12:47.230 --> 00:12:52.655
So in dashboard, you would just have
settings, whatever routes you have for

230
00:12:52.655 --> 00:12:57.480
your dashboard you put them in here,
and that's exactly what I do.

231
00:12:57.480 --> 00:12:59.430
This is literally how I make apps now.

232
00:12:59.430 --> 00:13:03.980
So again, route grouping is
the best reason for route grouping,

233
00:13:03.980 --> 00:13:08.380
is that I just want to opt all
these routes into this layout.

234
00:13:08.380 --> 00:13:09.710
That's it.

235
00:13:09.710 --> 00:13:11.620
And I don't want to change the URL.

236
00:13:13.800 --> 00:13:17.238
If you do wanna change the URL,
just get rid of the parentheses.

237
00:13:17.238 --> 00:13:18.550
Like we did with docs.

238
00:13:18.550 --> 00:13:22.139
Docs has parenthesis on it cuz
I do want it to say slash docs.

239
00:13:24.890 --> 00:13:26.940
But I don't wanna see
slash dashboard in my URL.

240
00:13:26.940 --> 00:13:27.767
That's gross to me.

241
00:13:27.767 --> 00:13:31.020
I don't like it, yeah.

242
00:13:31.020 --> 00:13:34.900
&gt;&gt; So if you put it on a subdomain,
would you host a different app then?

243
00:13:35.990 --> 00:13:37.419
&gt;&gt; Yeah, I mean, if it's on a subdomain,

244
00:13:37.419 --> 00:13:38.980
you might as well just
host a different app.

245
00:13:38.980 --> 00:13:45.990
I guess you could write some DevOps
logic yourself to deploy us.

246
00:13:45.990 --> 00:13:48.648
I mean, I guess you can get away
with this by just doing some smart

247
00:13:48.648 --> 00:13:50.220
rerouting on the Edge too.

248
00:13:50.220 --> 00:13:52.660
There's a lot of ways to do it.

249
00:13:52.660 --> 00:13:57.313
With today's world, with edge computing,
I guess you could just

250
00:13:57.313 --> 00:14:02.214
write a function on the edge that takes
a specific path from this app and

251
00:14:02.214 --> 00:14:04.955
routes it or take some specific path and

252
00:14:04.955 --> 00:14:09.720
route it to the URL on this app that
will be treated like a subdomain.

253
00:14:09.720 --> 00:14:13.570
But historically speaking, most people
do is like it's a different app.

254
00:14:13.570 --> 00:14:16.895
[INAUDIBLE] different app that gets
deployed to a different subdomain and

255
00:14:16.895 --> 00:14:20.435
you just go change the CNAME and whatever
hosting provider that you have, and

256
00:14:20.435 --> 00:14:22.740
pointing to that subdomain in the DNS.

257
00:14:22.740 --> 00:14:23.412
So yeah,

258
00:14:23.412 --> 00:14:28.799
probably I wouldn`t do it the other way
because it sounds like a lot of work.

259
00:14:28.799 --> 00:14:31.389
But I guess if you're
trying to save money,

260
00:14:31.389 --> 00:14:35.170
I guess if you want to save $0.20 a year,
you could do that.

261
00:14:39.390 --> 00:14:40.929
Cool, any other questions?

262
00:14:47.671 --> 00:14:52.100
&gt;&gt; So does the same folder
in different groups collide?

263
00:14:52.100 --> 00:14:55.480
&gt;&gt; Does the same folder in
different groups collide?

264
00:14:55.480 --> 00:14:56.570
Let me see if I understand that question.

265
00:14:56.570 --> 00:15:02.090
So I think what they're saying is
if I have todos in dashboard and

266
00:15:02.090 --> 00:15:04.860
then I have todos in marketing.

267
00:15:04.860 --> 00:15:05.530
Do they collide?

268
00:15:05.530 --> 00:15:06.691
Absolutely, they do collide.

269
00:15:06.691 --> 00:15:08.660
Those are the same route segments.

270
00:15:08.660 --> 00:15:11.380
So and
we saw what happened when we make the two,

271
00:15:11.380 --> 00:15:15.100
Next.js seems to pick
the one that comes after.

272
00:15:15.100 --> 00:15:17.060
Or maybe they'll be smarter
to throw an error, but yeah,

273
00:15:17.060 --> 00:15:18.910
you definitely won't get
the behavior that you want.

274
00:15:18.910 --> 00:15:23.758
So you need to know what are in the other
folders when you're making other

275
00:15:23.758 --> 00:15:25.675
folders with route groups.

276
00:15:25.675 --> 00:15:29.491
With this one I don't have to care because
I know we're protected because it's always

277
00:15:29.491 --> 00:15:30.490
going to be slash doc.

278
00:15:30.490 --> 00:15:34.780
So I can put todos in here and it will
still work because there's nothing else in

279
00:15:34.780 --> 00:15:38.470
here that is slash doc,
slash todos, so I'm totally fine.

280
00:15:38.470 --> 00:15:39.683
But with these,

281
00:15:39.683 --> 00:15:45.710
I do need to be aware of what is an other
one because these segments don't exist.

282
00:15:45.710 --> 00:15:49.772
It's just our website slash todos,
our website slash about,

283
00:15:49.772 --> 00:15:51.390
our website slash blog.

284
00:15:51.390 --> 00:15:52.849
So I have to be aware when
we do route group and

285
00:15:52.849 --> 00:15:54.580
you haven't known what other groups have.

286
00:15:54.580 --> 00:15:58.636
So now what we want to do is just briefly
talk about templates and then we'll set

287
00:15:58.636 --> 00:16:02.384
up some navigation to get our app
navigation working with the layouts and

288
00:16:02.384 --> 00:16:03.730
things like that.

289
00:16:03.730 --> 00:16:07.522
So templates, very short,
it's literally the same thing as layouts,

290
00:16:07.522 --> 00:16:10.620
except they do re-render across routes.

291
00:16:10.620 --> 00:16:11.250
That's it.

292
00:16:11.250 --> 00:16:12.360
That's literally it.

293
00:16:12.360 --> 00:16:17.300
And you can make a template
just by making a template.tsx.

294
00:16:17.300 --> 00:16:18.976
You will almost never use it,

295
00:16:18.976 --> 00:16:23.010
and I think they just added it back
to the documentation like a week ago.

296
00:16:23.010 --> 00:16:24.407
They kept removing it and adding it,

297
00:16:24.407 --> 00:16:26.690
because people were just
getting confused by it.

298
00:16:26.690 --> 00:16:31.412
Also I think the naming is weird, because
I feel like layouts could be templates,

299
00:16:31.412 --> 00:16:36.410
but really the only use case I've found
for templates, there's only two use cases.

300
00:16:36.410 --> 00:16:38.190
One, animations.

301
00:16:38.190 --> 00:16:43.170
I want something to animate in and animate
out as the route changes like a layout.

302
00:16:44.260 --> 00:16:47.200
And if it's not re-rendering then
it will never leave and enter.

303
00:16:47.200 --> 00:16:49.441
So a layout will never
show that animation, but

304
00:16:49.441 --> 00:16:52.700
a template would because it leaves and
enters on every route change.

305
00:16:52.700 --> 00:16:56.093
So if you want a route animation,
use a template.

306
00:16:56.093 --> 00:16:59.414
The other use case would
be something around,

307
00:16:59.414 --> 00:17:04.354
you had your template be a client-side
component as in it is a regular

308
00:17:04.354 --> 00:17:08.208
React component you've ever
made your entire life.

309
00:17:08.208 --> 00:17:11.095
And you have something in the use
effect that gets kicked off when

310
00:17:11.095 --> 00:17:12.770
the component renders.

311
00:17:12.770 --> 00:17:15.570
And you need that to happen every
time that component renders, well,

312
00:17:15.570 --> 00:17:19.640
if it's a layout, it will never re-render,
so it's only gonna do that once ever.

313
00:17:19.640 --> 00:17:21.187
But if you're thinking
that it's gonna happen

314
00:17:21.187 --> 00:17:23.933
every time someone changes the route and
that's what you're expecting to happen,

315
00:17:23.933 --> 00:17:25.375
then you would need to
switch to a template.

316
00:17:25.375 --> 00:17:30.373
So it does re-render and kick off
your use effect every single time.

317
00:17:30.373 --> 00:17:32.020
But then I would argue like
why are you doing that?

318
00:17:32.020 --> 00:17:35.234
Like she probably do something
else somewhere else.

319
00:17:35.234 --> 00:17:39.395
But if you absolutely needed it,
then yeah, other than that you'd

320
00:17:39.395 --> 00:17:43.775
use the layout I think [INAUDIBLE]
was just because they could, why not,

321
00:17:43.775 --> 00:17:46.926
but I don't think you'll
almost never use those.

