WEBVTT

1
00:00:00.070 --> 00:00:02.880
All right, let's write some stuff for
our app then.

2
00:00:02.880 --> 00:00:07.660
So for, let's get some routing here.

3
00:00:07.660 --> 00:00:11.601
So I'm going to go into the root layout,
I'm going to add some navigation here, and

4
00:00:11.601 --> 00:00:14.500
we'll learn about how to navigate
using the link component.

5
00:00:14.500 --> 00:00:19.470
So inside of here,
I'm just going to make a header.

6
00:00:19.470 --> 00:00:24.228
So for the header then I was
gonna add a nav here and

7
00:00:24.228 --> 00:00:27.980
then I was gonna add a ul here.

8
00:00:27.980 --> 00:00:32.163
I'm just gonna add a class name here,

9
00:00:32.163 --> 00:00:36.230
make it flex items, item-center.

10
00:00:36.230 --> 00:00:40.070
This is just making it a flex box and
making a line item-center.

11
00:00:40.070 --> 00:00:43.030
Then I'm just gonna go up here and
make an array.

12
00:00:43.030 --> 00:00:44.685
Call it links, like so.

13
00:00:44.685 --> 00:00:49.110
It's gonna be an array of
objects that have an href.

14
00:00:49.110 --> 00:00:51.290
We wanna go to /todos.

15
00:00:52.630 --> 00:00:58.087
And we'll say label is todos.

16
00:00:58.087 --> 00:00:59.384
And then I say I wanna go home.

17
00:00:59.384 --> 00:01:02.760
So I'll have slash, I'll make that home.

18
00:01:04.970 --> 00:01:09.229
And then I want to go to maybe
after home I want to go to docs and

19
00:01:09.229 --> 00:01:11.370
that would be docs like that.

20
00:01:11.370 --> 00:01:17.827
So we got our links, And

21
00:01:17.827 --> 00:01:20.510
all I'm gonna do is just
iterate over those links.

22
00:01:20.510 --> 00:01:22.081
So I'll say links.map.

23
00:01:22.081 --> 00:01:26.252
Grab our link, like so.

24
00:01:26.252 --> 00:01:29.840
And I'm just going to do
an imperative return here.

25
00:01:29.840 --> 00:01:33.030
And then what I want to do is make an li.

26
00:01:33.030 --> 00:01:39.640
And this is where you'll probably make
an anchor tag and link it to each href.

27
00:01:39.640 --> 00:01:42.540
But if you do that,
you are not taking advantage of

28
00:01:42.540 --> 00:01:47.171
next.js's navigation features where they
have a smart router that can do tons

29
00:01:47.171 --> 00:01:51.550
of different things like pre-fetching,
client-side routing.

30
00:01:51.550 --> 00:01:52.916
You want to opt into that.

31
00:01:52.916 --> 00:01:55.620
So the way you do that is
use the link component.

32
00:01:55.620 --> 00:01:57.560
So I'm just gonna bring that in.

33
00:01:57.560 --> 00:02:02.106
I'm gonna start typing it out and
it should auto import it for

34
00:02:02.106 --> 00:02:05.059
me from next/link, link component.

35
00:02:06.400 --> 00:02:08.657
So we use that link component.

36
00:02:08.657 --> 00:02:14.150
And then here I'm going to put a href and
set it to the link.href, right?

37
00:02:15.550 --> 00:02:19.230
And then inside of it,
it'll just be link.label.

38
00:02:19.230 --> 00:02:24.287
And just to get this thing to shut
up about a key, I'll put link.href.

39
00:02:27.600 --> 00:02:30.809
Cool, so
you should have something like that.

40
00:02:30.809 --> 00:02:35.753
And again, as I'm writing this,
don't forget that I do

41
00:02:35.753 --> 00:02:41.550
have all the code here on the repo
that you can go check out.

42
00:02:41.550 --> 00:02:46.590
In fact, that code is probably in
here somewhere, yeah, right here.

43
00:02:46.590 --> 00:02:50.700
So you can check that out if
you wanna catch up on that.

44
00:02:50.700 --> 00:02:51.440
So there we go.

45
00:02:51.440 --> 00:02:52.740
So we have that.

46
00:02:52.740 --> 00:02:56.696
Now if we go back because
we added that to our route,

47
00:02:56.696 --> 00:02:59.750
we should see something like this.

48
00:02:59.750 --> 00:03:02.499
So home, I click on Home it goes Home.

49
00:03:02.499 --> 00:03:06.303
I click on Docs, it goes to Docs.

50
00:03:06.303 --> 00:03:07.091
I click on Todos, it goes to Todos.

51
00:03:09.284 --> 00:03:12.939
And notice that when I click on Todos,
the dashboard layout loads in too.

52
00:03:12.939 --> 00:03:16.828
The only other thing I'm going to
do is I'm just going to get rid of

53
00:03:16.828 --> 00:03:20.311
everything in the index page
because it's bothering me.

54
00:03:20.311 --> 00:03:22.044
&gt;&gt; I've got one question for you, Scott.

55
00:03:22.044 --> 00:03:24.508
&gt;&gt; Yes.
&gt;&gt; Just a quick one regarding the link

56
00:03:24.508 --> 00:03:25.390
component.

57
00:03:25.390 --> 00:03:29.526
Are there any props you've encountered or
used besides the href prop?

58
00:03:29.526 --> 00:03:33.468
Anything else we should be aware of or
is it really just like yeah,

59
00:03:33.468 --> 00:03:37.380
it's an a tag but
it opts you into the client-side routing.

60
00:03:37.380 --> 00:03:41.964
&gt;&gt; Yeah, so it supports any property
that the anchor tag would support,

61
00:03:41.964 --> 00:03:43.449
so that's one thing.

62
00:03:43.449 --> 00:03:48.950
There's also some other tags associated
with it that are pretty advanced

63
00:03:48.950 --> 00:03:51.560
&gt;&gt; Let me see.

64
00:03:51.560 --> 00:03:53.230
So they have prefetch.

65
00:03:53.230 --> 00:03:58.706
So prefetch basically this means like I
don't know someone hovers over this link

66
00:03:58.706 --> 00:04:04.182
or optimistically if this link is going to
a page that is then going to fetch data,

67
00:04:04.182 --> 00:04:07.660
start doing that before
someone clicks on it.

68
00:04:07.660 --> 00:04:11.476
So when they do click on it,
it's already cached and ready to go.

69
00:04:11.476 --> 00:04:15.574
So you might see something like that.

70
00:04:15.574 --> 00:04:16.852
I almost rarely use that but it's a thing.

71
00:04:16.852 --> 00:04:20.130
I guess it's kind of like turbolinks and
Ruby.

72
00:04:20.130 --> 00:04:20.710
I can't remember.

73
00:04:20.710 --> 00:04:22.000
I haven't wrote Ruby in so long.

74
00:04:22.000 --> 00:04:23.586
I think that's what turbo links did.

75
00:04:23.586 --> 00:04:25.660
But it's like pre-fetching, yeah.

76
00:04:25.660 --> 00:04:30.326
Other than that, no, it's pretty much
the same as an anchor tag, yeah.

77
00:04:34.574 --> 00:04:36.340
Cool, yes.

78
00:04:36.340 --> 00:04:39.727
&gt;&gt; So if a layout never re-renders,
and if you put the nav in a layout,

79
00:04:39.727 --> 00:04:44.310
then you can't change the styling
depending on that route, is that correct?

80
00:04:44.310 --> 00:04:47.207
&gt;&gt; Then you can't change the styling
depending on that route.

81
00:04:47.207 --> 00:04:49.230
&gt;&gt; Or
can't change the contents of the nav.

82
00:04:49.230 --> 00:04:50.600
Maybe that's a better example.

83
00:04:52.240 --> 00:04:55.650
&gt;&gt; You can't change the contents
of nav depending on the route.

84
00:04:56.700 --> 00:05:00.443
You can if you made it a client component.

85
00:05:00.443 --> 00:05:04.271
So if you made it a client
component where it uses

86
00:05:04.271 --> 00:05:08.963
something like a hook that listens for
route changes, and

87
00:05:08.963 --> 00:05:13.577
then it changes its behavior
based off that, then yeah.

88
00:05:13.577 --> 00:05:18.310
Because then now your layouts not
opt into the basic server behavior.

89
00:05:18.310 --> 00:05:22.921
It's now just in a regular React
rendering lifecycle methodology,

90
00:05:22.921 --> 00:05:27.382
where if you change state or
if you change a hook, it re-renders.

91
00:05:27.382 --> 00:05:32.880
So you could, but I personally try not to
make any of my layouts client components.

92
00:05:32.880 --> 00:05:34.860
In fact,
I try to make nothing a client component.

93
00:05:34.860 --> 00:05:35.460
That is my goal.

94
00:05:35.460 --> 00:05:37.190
And we'll be talking about
client components soon.

95
00:05:37.190 --> 00:05:40.170
And in fact, we haven't talked about them,
is because you already know what they are.

96
00:05:40.170 --> 00:05:42.250
They're just regular React components.

97
00:05:42.250 --> 00:05:46.381
You just gotta add a little thing at the
top that we'll talk about a little bit.

98
00:05:46.381 --> 00:05:51.006
But yeah, I try not to make any component
client component unless there has to be

99
00:05:51.006 --> 00:05:54.650
JavaScript in order for
them to interact with it.

100
00:05:54.650 --> 00:05:58.580
And I'm very specific about that, because
not all interactions require JavaScript.

101
00:05:58.580 --> 00:06:01.629
But some do and that was the only time
I want to use a client component,

102
00:06:01.629 --> 00:06:03.410
usually keeping track of state.

103
00:06:03.410 --> 00:06:05.520
That's almost the only time
I use client component, yes.

104
00:06:06.970 --> 00:06:10.749
&gt;&gt; What's the difference between the link

105
00:06:10.749 --> 00:06:15.432
imported from next/link or
next/navigation?

106
00:06:15.432 --> 00:06:17.580
&gt;&gt; That is a good question.

107
00:06:17.580 --> 00:06:23.083
I think the one from, I think the one

108
00:06:23.083 --> 00:06:28.280
from navigation might be the new preferred
one that they want people to use.

109
00:06:28.280 --> 00:06:32.936
But the differences, I think, are internal
differences that relate to how

110
00:06:32.936 --> 00:06:36.870
the app router works versus
the page router works.

111
00:06:36.870 --> 00:06:40.042
So from a user perspective,
I think the API is exactly the same.

112
00:06:40.042 --> 00:06:44.663
But I think it opts into different
background behaviors that those two

113
00:06:44.663 --> 00:06:47.023
different routing scenarios use.

114
00:06:47.023 --> 00:06:49.430
So for
right now it's gonna work the same, but

115
00:06:49.430 --> 00:06:51.730
I guess that's what they recommend using.

116
00:06:51.730 --> 00:06:53.850
This one just hasn't been deprecated yet.

117
00:06:53.850 --> 00:06:56.118
So I think for now,
it's probably fine but in the future,

118
00:06:56.118 --> 00:06:58.033
you probably wanna use
the one from navigation.

