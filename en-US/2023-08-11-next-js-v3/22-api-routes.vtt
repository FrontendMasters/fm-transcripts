WEBVTT

1
00:00:00.264 --> 00:00:02.256
Yap, API Routes, okay.

2
00:00:02.256 --> 00:00:04.456
So, back to routing, check this out.

3
00:00:04.456 --> 00:00:07.595
So, if you want to have an API for
your app,

4
00:00:07.595 --> 00:00:13.618
you don't have to go make a whole another
server or use a background as a language,

5
00:00:13.618 --> 00:00:18.714
or do any of that stuff, you get
basically service routing for free.

6
00:00:18.714 --> 00:00:22.262
All you have to do is just make a route,
and now you have an API,

7
00:00:22.262 --> 00:00:23.577
it's pretty simple.

8
00:00:23.577 --> 00:00:25.104
So inside of our app folder,

9
00:00:25.104 --> 00:00:28.615
we need to make another special
folder inside of here called API.

10
00:00:33.551 --> 00:00:37.340
And then within this folder, it's
equivalent to the rest of the folders,

11
00:00:37.340 --> 00:00:40.228
you just make another folder
that represents a segment,

12
00:00:40.228 --> 00:00:42.109
and you need a special file in there.

13
00:00:42.109 --> 00:00:46.441
In the case of pages, the special file
is called page, in the case of an API,

14
00:00:46.441 --> 00:00:48.432
the special file is called route.

15
00:00:48.432 --> 00:00:52.417
So if I go into the API folder and let's
say our todo app is also friendly for

16
00:00:52.417 --> 00:00:55.266
developers who want to
integrate with their todos.

17
00:00:55.266 --> 00:01:00.010
We're gonna make some routes for them
to pull and do crud on their own todos.

18
00:01:00.010 --> 00:01:06.637
So let's make a new folder for
api/todos, or let's say /todo.

19
00:01:06.637 --> 00:01:12.140
And then for that I want a route.ts
not TSX, it's not a JSX file,

20
00:01:12.140 --> 00:01:16.861
it's it's a regular JavaScript file,
so route.ts.

21
00:01:16.861 --> 00:01:21.911
And then inside of here,
all I have to do is export different

22
00:01:21.911 --> 00:01:27.368
HTTP verbs that I want to run when
the matching one is requested.

23
00:01:27.368 --> 00:01:32.675
So in this case, let's say I want to allow
someone to do a get request to /api/todo,

24
00:01:32.675 --> 00:01:35.050
I would export a function called get.

25
00:01:35.050 --> 00:01:38.552
If I want them to do a post request,
I would export a function called post,

26
00:01:38.552 --> 00:01:40.882
this is a little different
than next day as 12.

27
00:01:40.882 --> 00:01:43.189
If you've ever seen it
before next day as 12,

28
00:01:43.189 --> 00:01:46.419
you just exported a function that
had a request and a response, and

29
00:01:46.419 --> 00:01:49.729
you had to handle that logic
internally on whatever verb they sent.

30
00:01:49.729 --> 00:01:54.424
You had to look at the rec, dot method to
determine if it was a post or put a get,

31
00:01:54.424 --> 00:01:56.536
and then do the routing yourself.

32
00:01:56.536 --> 00:02:00.355
Whereas with here, you just export the
function with the appropriate verb name

33
00:02:00.355 --> 00:02:03.550
and that's handled for you, so
you don't have to think about it.

34
00:02:03.550 --> 00:02:08.224
The other difference is like,
you didn't have to just like pages,

35
00:02:08.224 --> 00:02:10.850
you didn't have a route that js or ts?

36
00:02:10.850 --> 00:02:13.946
You just named the file,
whatever the route you wanted, but

37
00:02:13.946 --> 00:02:16.019
now it has to be route inside the folder.

38
00:02:18.250 --> 00:02:21.744
And the function kind of looks like this,
as long as you export it, you're good, so

39
00:02:21.744 --> 00:02:22.642
let's check it out.

40
00:02:22.642 --> 00:02:27.026
So let's just say I want someone to be
able to do a get request to /api/ todo,

41
00:02:27.026 --> 00:02:27.773
no problem.

42
00:02:27.773 --> 00:02:33.492
I can say export const, get like this.

43
00:02:36.205 --> 00:02:40.227
And yeah,
now we can do whatever we want here.

44
00:02:40.227 --> 00:02:45.042
So you're gonna get access
to a request object,

45
00:02:45.042 --> 00:02:50.567
which is a requests standard
object from the Fetch API.

46
00:02:50.567 --> 00:02:52.383
This is web standard request object,

47
00:02:52.383 --> 00:02:56.299
this isn't something next Jas had which
in the previous version actually has this

48
00:02:56.299 --> 00:02:58.756
request object was like
something that they made.

49
00:02:58.756 --> 00:03:01.451
And you had to look it up and
it was kind of like to express but

50
00:03:01.451 --> 00:03:04.476
it wasn't and it was very it
confused me a lot because it didn't,

51
00:03:04.476 --> 00:03:07.889
It was trying to be like everything else,
but it also was very different.

52
00:03:07.889 --> 00:03:11.544
This is just a standard request
object straight from MDN, I mean,

53
00:03:11.544 --> 00:03:14.672
if we go look at this,
this has nothing to do with next js,

54
00:03:14.672 --> 00:03:17.571
it's just a request object,
which I think is cool.

55
00:03:17.571 --> 00:03:21.486
So if you ever start like writing code
on the edge, like a edge run time,

56
00:03:21.486 --> 00:03:25.864
you'll be using this a lot, but it's
basically the same request that you might

57
00:03:25.864 --> 00:03:28.765
have if you were using fetch,
if you did it that way.

58
00:03:28.765 --> 00:03:32.834
So I like that you might not have done it
this way, you might have explicitly made

59
00:03:32.834 --> 00:03:36.866
a request, but the fact that this is
a standard, I think that's really cool.

60
00:03:36.866 --> 00:03:40.382
Because I'd rather work with standards
than framework specific things.

61
00:03:40.382 --> 00:03:44.662
So I do like next.js direction of like,
let's move towards standard specific APIs

62
00:03:44.662 --> 00:03:48.520
which is really cool, and I think they
kind of really had to since node.js or

63
00:03:48.520 --> 00:03:50.771
next.js has many different run times now.

64
00:03:50.771 --> 00:03:55.481
We didn't talk about it, but you can run
on a server, you can also run on the edge.

65
00:03:55.481 --> 00:04:01.217
If you don't know what an edge is,
a CDN is a group of computers dispersed

66
00:04:01.217 --> 00:04:06.776
all across the world, and
when I make a request to yourwebsite.com.

67
00:04:06.776 --> 00:04:10.788
If you have a CDN, my request gets
routed to the computer closest to me, so

68
00:04:10.788 --> 00:04:14.564
that means your website is copied
across many different computers.

69
00:04:14.564 --> 00:04:18.365
Traditionally, you could have only put
read-only data on those computers,

70
00:04:18.365 --> 00:04:21.313
like files that were already compiled and
you could read it.

71
00:04:21.313 --> 00:04:25.141
Now you can compute on those computers, so
you can run functions on those computers

72
00:04:25.141 --> 00:04:27.503
and do dynamic things,
which is really powerful.

73
00:04:27.503 --> 00:04:30.253
So if your origin server is over here,
and you have all these nodes

74
00:04:30.253 --> 00:04:33.203
around the world and someone from
Oregon is trying to hit your server,

75
00:04:33.203 --> 00:04:35.222
they get redirected to
the computer in Oregon.

76
00:04:35.222 --> 00:04:39.174
In which you can do some preliminary
logic there, maybe you check for

77
00:04:39.174 --> 00:04:41.093
off, maybe you do some routing.

78
00:04:41.093 --> 00:04:44.220
Maybe you look at their IP address and
look it up to see and see that there

79
00:04:44.220 --> 00:04:47.612
are Coca Cola so then you rewrite to
the landing page to say hi from Coca Cola,

80
00:04:47.612 --> 00:04:49.326
you can do whatever you want, right?

81
00:04:49.326 --> 00:04:51.810
You can do that now and
it's really interesting, so

82
00:04:51.810 --> 00:04:53.625
next year is allows you to do that too.

83
00:04:53.625 --> 00:04:57.169
So you can just change the runtime
of things for basically free,

84
00:04:57.169 --> 00:04:59.213
depending on where you deploy it to.

85
00:04:59.213 --> 00:05:02.311
And in that runtime,
you have to use something like request.

86
00:05:02.311 --> 00:05:07.508
You have to use something like
the the built-in standards because

87
00:05:07.508 --> 00:05:12.147
those runtimes are so
light that they don't support full of

88
00:05:12.147 --> 00:05:17.364
node.js environments, so
they very specific things like this.

89
00:05:17.364 --> 00:05:20.665
Cool okay, so
we wanna do that we have a request, and

90
00:05:20.665 --> 00:05:25.635
then from here I mean you could pretty
much do whatever you want in the request.

91
00:05:25.635 --> 00:05:28.823
In this case, actually,
let's send something back, so

92
00:05:28.823 --> 00:05:32.742
lemme show you an example, so
let's say I want to send back a response.

93
00:05:32.742 --> 00:05:35.172
So what you can do is
you can just say return,

94
00:05:35.172 --> 00:05:38.341
then you have this thing called
next response like this.

95
00:05:38.341 --> 00:05:44.029
So this is actually just a wrapper
around the response objects from

96
00:05:44.029 --> 00:05:50.240
the MDM standard, so if I look for
this, there's also a response here.

97
00:05:52.701 --> 00:05:56.598
The next response is just a wrapper around
that, and I think they did that because

98
00:05:56.598 --> 00:06:00.518
there was some TypeScript issues, I think
it was specifically for TypeScript.

99
00:06:00.518 --> 00:06:05.088
So you can do the next response like this,
and then you can respond back

100
00:06:05.088 --> 00:06:09.273
whatever you want,
I'm gonna respond back with some json, and

101
00:06:09.273 --> 00:06:12.471
be like message hello,
so I can do that, right?

102
00:06:12.471 --> 00:06:15.262
Do a get request,
I'm not even gonna use this.

103
00:06:15.262 --> 00:06:18.459
So now I'm able to go to
/api/todo do a get request,

104
00:06:18.459 --> 00:06:23.089
you go to the browser and do that,
that's a git request, so let's try that.

105
00:06:23.089 --> 00:06:29.606
I'm 3001, you might be something else,
so todo or todo todo, so we'll do that.

106
00:06:29.606 --> 00:06:33.707
And I get back a response message hello,
and that was it,

107
00:06:33.707 --> 00:06:36.453
I just made a server as made API route.

108
00:06:36.453 --> 00:06:40.842
So if you've ever had to set up API
route before you just like, wow,

109
00:06:40.842 --> 00:06:44.230
this is a lot, well, okay,
you get it for free now,

110
00:06:44.230 --> 00:06:49.102
you just make a file, and a verb and
you have API now, which is pretty cool.

111
00:06:49.102 --> 00:06:52.498
So when you deploy this, this is
gonna be in a serverless environment.

112
00:06:52.498 --> 00:06:57.436
It's such a misleading name,
it's definitely a server there,

113
00:06:57.436 --> 00:07:02.015
all it does is you don't have
anything running constantly,

114
00:07:02.015 --> 00:07:07.525
you just have a function that when
a certain route/ in this case, verb.

115
00:07:07.525 --> 00:07:12.082
As well and this can actually just really
route when a certain route gets triggered,

116
00:07:12.082 --> 00:07:15.998
that function gets read into memory and
then execute it responds back and

117
00:07:15.998 --> 00:07:16.971
then shuts down.

118
00:07:16.971 --> 00:07:17.862
For the most part,

119
00:07:17.862 --> 00:07:21.487
there are like some performance
techniques around keeping functions warm,

120
00:07:21.487 --> 00:07:25.125
because reading the file is a cold start
and that causes performance issues.

121
00:07:25.125 --> 00:07:28.570
So is basically just
an infrastructure around,

122
00:07:28.570 --> 00:07:33.701
trying to make it to where you don't
need to worry about scaling issues.

123
00:07:33.701 --> 00:07:36.931
So if you ever had to deploy a server,
and then scale it cuz you got all these

124
00:07:36.931 --> 00:07:39.036
requests, what if you
didn't have to do that?

125
00:07:39.036 --> 00:07:41.756
What if everybody had their own instance
of a function that was running,

126
00:07:41.756 --> 00:07:44.486
you'd have to worry about scaling and
it was just infinitely scalable?

127
00:07:44.486 --> 00:07:50.870
And that's the promise of serverless but
the funny thing is,yeah, go ahead.

128
00:07:50.870 --> 00:07:52.885
&gt;&gt; So that kind of like a lambda,
a function that runs when you call it?

129
00:07:52.885 --> 00:07:56.864
&gt;&gt; Yeah, 100, a lambda is literally
the first serverless function,

130
00:07:56.864 --> 00:08:00.395
that's what AWS calls their
serverless function, lambdas.

131
00:08:00.395 --> 00:08:04.487
So they invented serverless functions, and
then everyone has their own version of

132
00:08:04.487 --> 00:08:08.646
that these days, but at the end of the
day, they're called serverless functions.

133
00:08:08.646 --> 00:08:13.292
But the funny story is like, forgot what
division of Amazon just came out and

134
00:08:13.292 --> 00:08:16.716
said some some division of
Amazon was a customer of AWS.

135
00:08:16.716 --> 00:08:19.424
Which I think is already funny how
their customers are their own company.

136
00:08:19.424 --> 00:08:23.253
But like, yeah, we used Amazon, we use
serverless, we use lambdas for a while,

137
00:08:23.253 --> 00:08:26.138
but then we switched to just
a traditional monolith server and

138
00:08:26.138 --> 00:08:27.489
we saved 90% of our cost.

139
00:08:27.489 --> 00:08:31.361
And I was like, damn, [LAUGH] I thought
service was supposed to be cheap.

140
00:08:31.361 --> 00:08:35.255
But then I looked at their architecture,
and I'm like, well, okay, yeah,

141
00:08:35.255 --> 00:08:38.736
their architecture was insane,
they were doing service for one job,

142
00:08:38.736 --> 00:08:41.043
it was like a million
function calls running.

143
00:08:41.043 --> 00:08:44.297
Not that much, but a lot to where it's
like, yeah, you guys should probably just

144
00:08:44.297 --> 00:08:46.816
use a monolith server,
this isn't really meant for you guys.

145
00:08:46.816 --> 00:08:51.545
So, it was pretty funny that that
happened, and then that they would publish

146
00:08:51.545 --> 00:08:56.518
that, they're like, yeah,
serverless sucks, we didn't use it, sorry.

147
00:08:56.518 --> 00:08:59.435
But we did use this other thing from
Amazon, so I guess it worked out.

148
00:08:59.435 --> 00:09:03.507
So yeah, you get that for free,
let's say we wanna do a post request,

149
00:09:03.507 --> 00:09:04.898
we can do that, right?

150
00:09:04.898 --> 00:09:07.084
So I can say, yeah,
let me post something there,

151
00:09:07.084 --> 00:09:09.790
if you want to get the data from
the post request, typically,

152
00:09:09.790 --> 00:09:12.313
you do like rec.body or
something like that in express.

153
00:09:12.313 --> 00:09:17.231
Now, this is a request object, so you
don't do that, so you'll get the data, and

154
00:09:17.231 --> 00:09:22.220
that will be on requests.json, you have to
await it, then you can get the data, and

155
00:09:22.220 --> 00:09:25.630
that's the equivalent of
getting the data off the body.

156
00:09:25.630 --> 00:09:29.810
So you don't have to set up middleware
here, no body parser, none of that stuff,

157
00:09:29.810 --> 00:09:33.098
you just write a function and
it's free, which is really cool.

158
00:09:33.098 --> 00:09:36.944
So you can get that data, and I guess
I'll just echo that data back like this,

159
00:09:36.944 --> 00:09:39.723
you do whatever you want, so
now if you wanna post this,

160
00:09:39.723 --> 00:09:42.110
I'm just gonna open up
my thunder client here.

161
00:09:42.110 --> 00:09:45.245
Make a new request to,

162
00:09:45.245 --> 00:09:51.519
http//localhost 3001/api/todo,

163
00:09:51.519 --> 00:09:58.284
make sure that's a post,
add in some json here,

164
00:09:58.284 --> 00:10:05.117
and I'll just call this, Hello there,

165
00:10:05.117 --> 00:10:10.335
then I can post that, and you can see
back, I get back exactly what I posted.

166
00:10:10.335 --> 00:10:13.341
Hello there, hello where?

167
00:10:13.341 --> 00:10:14.507
I'll get back that.

168
00:10:14.507 --> 00:10:15.757
Hello where, right?

169
00:10:15.757 --> 00:10:18.243
So post request works,
pretty simple, I mean,

170
00:10:18.243 --> 00:10:20.913
there are some limits in
service environments, but

171
00:10:20.913 --> 00:10:24.811
you probably don't need to know about
them right now, and if you needed to.

172
00:10:24.811 --> 00:10:26.226
If you ran into that problem,

173
00:10:26.226 --> 00:10:29.008
you can look it up,
it also depends on where you deploy it.

174
00:10:29.008 --> 00:10:34.283
But for the most part, that is how you
would make service functions in next yes,

175
00:10:34.283 --> 00:10:36.351
it's actually quite simple.

