WEBVTT

1
00:00:00.370 --> 00:00:03.450
Can you have multiple pages in a folder?

2
00:00:03.450 --> 00:00:08.550
&gt;&gt; You cannot have multiple pages in
a folder because URLs are unique.

3
00:00:08.550 --> 00:00:10.120
So you have to think about the segment.

4
00:00:10.120 --> 00:00:12.527
So if you think about it like this,

5
00:00:12.527 --> 00:00:16.345
let's say I wanted to put
another page inside of docs.

6
00:00:16.345 --> 00:00:19.061
I'll put another page in here.

7
00:00:19.061 --> 00:00:22.310
One, how would Next.js
know which one to render?

8
00:00:22.310 --> 00:00:27.886
And then two, what would you expect from a
user's perspective, when you go to a URL?

9
00:00:27.886 --> 00:00:30.240
I guess you would expect
to see the same thing.

10
00:00:30.240 --> 00:00:35.720
Going to a URL and seeing a completely
different page is probably confusing.

11
00:00:35.720 --> 00:00:39.646
Imagine going to a blog post on a URL,
and then it shows one blog post.

12
00:00:39.646 --> 00:00:43.520
And you go to the exact same URL again,
then it shows a different blog post.

13
00:00:43.520 --> 00:00:45.050
That would be very confusing.

14
00:00:45.050 --> 00:00:48.472
So no, if you want a different page,
you need a new segment.

15
00:00:48.472 --> 00:00:52.880
And to make a new segment, you need a new
folder, so can't do multiple pages.

16
00:00:54.830 --> 00:00:56.690
&gt;&gt; Do you need to use the default export?

17
00:00:57.810 --> 00:01:02.421
&gt;&gt; Yes, every page has to have
a default export of the component in

18
00:01:02.421 --> 00:01:04.250
which it's rendering.

19
00:01:04.250 --> 00:01:10.310
So if I got rid of,
let's just say I said export, like that.

20
00:01:10.310 --> 00:01:16.780
And then I tried to go to /todos.

21
00:01:18.130 --> 00:01:19.551
Yeah, it breaks, right?

22
00:01:19.551 --> 00:01:22.404
Next.js does it because if you
don't do a default export,

23
00:01:22.404 --> 00:01:24.520
that means you're doing a named export.

24
00:01:24.520 --> 00:01:26.390
And if you're doing a named export,

25
00:01:26.390 --> 00:01:29.620
how would Next.js know what
the name of your component is?

26
00:01:29.620 --> 00:01:30.480
It could be anything.

27
00:01:30.480 --> 00:01:33.460
I mean, I guess it could figure it out,
but that's a lot of work.

28
00:01:33.460 --> 00:01:35.109
So, it's better for tooling.

29
00:01:35.109 --> 00:01:39.335
It just allows the framework to make
really good assumptions about things,

30
00:01:39.335 --> 00:01:42.050
versus having to figure things out.

31
00:01:42.050 --> 00:01:46.839
&gt;&gt; So you no longer can use file names for
routing, so for instance,

32
00:01:46.839 --> 00:01:51.530
home.dashboard.settings or
something like that?

33
00:01:51.530 --> 00:01:53.430
&gt;&gt; Yeah, you can't use file names for
routing.

34
00:01:53.430 --> 00:01:57.579
So in the pages,
in the older version of Next.js 12 and

35
00:01:57.579 --> 00:02:00.610
below, you wouldn't have a page.tsx.

36
00:02:00.610 --> 00:02:05.460
In fact, the name of the route
would be the name of the file.

37
00:02:05.460 --> 00:02:08.805
So in the case of docs,
I might have docs, and

38
00:02:08.805 --> 00:02:12.958
then this section dot tsx,
this other section dot tsx.

39
00:02:12.958 --> 00:02:16.514
And each one of those files would
be the name of the route at

40
00:02:16.514 --> 00:02:18.790
which it gets rendered there.

41
00:02:18.790 --> 00:02:21.160
So no, you can't do that anymore.

42
00:02:21.160 --> 00:02:25.771
Every folder has to have a page component
in it, and it has to be that name.

43
00:02:25.771 --> 00:02:30.200
And the file names themselves do not
determine the segments in a route.

44
00:02:30.200 --> 00:02:33.060
Only folders determine
the segments in a route, and

45
00:02:33.060 --> 00:02:36.320
that's only if they don't
have parentheses around them.

46
00:02:37.543 --> 00:02:39.907
So it's definitely way different than 12,
right?

47
00:02:39.907 --> 00:02:44.504
12 would literally, Next.js 12 would
literally have multiple pages in one

48
00:02:44.504 --> 00:02:49.670
folder, each page being its own file name
which corresponds to a different route.

49
00:02:49.670 --> 00:02:52.654
And only when you wanna make a new
segment, would you make a new folder.

50
00:02:52.654 --> 00:02:55.628
But in this case,
everything has to have a folder and

51
00:02:55.628 --> 00:02:57.598
you have to have a page.tsx in it.

52
00:02:57.598 --> 00:02:59.004
And you can only have one in each folder.

53
00:03:01.890 --> 00:03:07.760
Cool, all right, so let's keep it moving.

54
00:03:07.760 --> 00:03:09.590
So we talked about that.

55
00:03:09.590 --> 00:03:13.674
There's also some really cool things
in here, like I said, layouts, loading.

56
00:03:13.674 --> 00:03:14.990
Or I mentioned layout.

57
00:03:14.990 --> 00:03:18.160
There's these things called loading and
error files.

58
00:03:18.160 --> 00:03:19.567
I'm not gonna talk about them too much.

59
00:03:19.567 --> 00:03:21.200
I'm just putting them in here for context.

60
00:03:21.200 --> 00:03:24.179
We're gonna to get into them
in more detail a little later,

61
00:03:24.179 --> 00:03:25.498
when we do data fetching.

62
00:03:25.498 --> 00:03:27.344
Cuz right now,
they wouldn't make any sense,

63
00:03:27.344 --> 00:03:29.060
unless I taught you
what data fetching was.

64
00:03:29.060 --> 00:03:33.663
But I just wanted to put them in there
just because someone might ask questions.

65
00:03:33.663 --> 00:03:36.684
But the other thing to think about, or

66
00:03:36.684 --> 00:03:41.500
one thing I want to show you,
is that you didn't know it, but

67
00:03:41.500 --> 00:03:46.141
this whole time you've been
writing server components.

68
00:03:46.141 --> 00:03:48.520
I know, shocker, right?

69
00:03:48.520 --> 00:03:50.580
These aren't regular React components.

70
00:03:50.580 --> 00:03:53.229
These are components that actually
get executed, and ran, and

71
00:03:53.229 --> 00:03:56.800
rendered on the server, and have no
JavaScript equivalent on the front end.

72
00:03:56.800 --> 00:04:01.408
So anything that we just wrote does not
have JavaScript associated with it on

73
00:04:01.408 --> 00:04:02.450
the front end.

74
00:04:02.450 --> 00:04:05.860
There's no JavaScript to download and
it completely ran on the server.

75
00:04:05.860 --> 00:04:08.689
Which means anything
you can do in Node.js,

76
00:04:08.689 --> 00:04:11.523
you can do in any one of
these files right now.

77
00:04:11.523 --> 00:04:14.827
I don't know, is there a specific
Node.js thing, let me think.

78
00:04:14.827 --> 00:04:17.366
I think I could just log maybe
the process or something.

79
00:04:17.366 --> 00:04:22.681
Let's see, console.log process.

80
00:04:23.704 --> 00:04:25.445
Wait, I got some stuff on there.

81
00:04:25.445 --> 00:04:27.750
[LAUGH] I don't want to log my process.

82
00:04:27.750 --> 00:04:30.890
Let me log the process.argv, let's see.

83
00:04:30.890 --> 00:04:38.240
So yeah, and then now I will go to
this page, which is this Todos.

84
00:04:38.240 --> 00:04:40.206
Let me change this to Todos,
so it's not confusing.

85
00:04:43.277 --> 00:04:44.036
There we go.

86
00:04:44.036 --> 00:04:48.338
And let's go there, go to Todos.

87
00:04:48.338 --> 00:04:49.640
It still rendered, so it didn't break.

88
00:04:49.640 --> 00:04:51.940
And then you can see it
logged the process.argv,

89
00:04:51.940 --> 00:04:53.760
which is only accessible in Node.js.

90
00:04:53.760 --> 00:04:56.250
You can't log,
there's no process in the browser.

91
00:04:56.250 --> 00:04:59.380
So this is proof that it's
running on the server.

92
00:04:59.380 --> 00:05:03.280
It's executing on the server,
it's not happening in the browser.

93
00:05:03.280 --> 00:05:06.073
And if it was happening in
a browser like an SSR component,

94
00:05:06.073 --> 00:05:09.892
which renders on the server first and
then goes to the browser, well, as soon as

95
00:05:09.892 --> 00:05:13.833
the browser would have saw this, it would
have freaked out and it would have died.

96
00:05:13.833 --> 00:05:15.380
Cuz this doesn't exist in the browser.

97
00:05:15.380 --> 00:05:18.110
And it didn't, it clearly rendered here.

98
00:05:18.110 --> 00:05:21.687
There's no errors here about
process doesn't exist, or

99
00:05:21.687 --> 00:05:23.740
arg does not exist on undefined.

100
00:05:24.790 --> 00:05:28.200
So yeah, that's completely running
on a server for free by default.

101
00:05:29.710 --> 00:05:30.300
It's a little crazy.

102
00:05:30.300 --> 00:05:32.760
So the reason they did that
is to make it easier for

103
00:05:32.760 --> 00:05:34.564
you to opt into server components.

104
00:05:34.564 --> 00:05:38.061
Versus, the other way around is
where you would manually have to,

105
00:05:38.061 --> 00:05:39.470
this is a server component.

106
00:05:39.470 --> 00:05:40.390
This is a server component.

107
00:05:40.390 --> 00:05:41.631
This is a server component.

108
00:05:41.631 --> 00:05:44.041
Then it's like, well, let's just make
everything a server component by default,

109
00:05:44.041 --> 00:05:44.780
so people get it for free.

110
00:05:44.780 --> 00:05:46.623
And then if they want to opt out of it,

111
00:05:46.623 --> 00:05:49.069
there's something they
can use to opt out of it.

112
00:05:49.069 --> 00:05:52.254
And I'll show what you
that is in a little bit.

113
00:05:53.584 --> 00:05:54.550
Cool, any questions on that?

114
00:05:56.330 --> 00:05:58.820
Yeah, yes, question, Mark?

115
00:05:58.820 --> 00:06:03.712
&gt;&gt; So an SSR is a bunch of
concatenation to create HTML?

116
00:06:03.712 --> 00:06:12.323
&gt;&gt; Okay, server-side rendering
is basically taking React.

117
00:06:12.323 --> 00:06:16.770
So you have to separate
React from React DOM.

118
00:06:16.770 --> 00:06:18.905
React, the framework itself,

119
00:06:18.905 --> 00:06:23.501
is a framework that allows you to be
expressive in how you create UIs.

120
00:06:23.501 --> 00:06:29.210
And then React DOM is like taking that and
translating it to the DOM in the browser.

121
00:06:29.210 --> 00:06:30.749
But if you just took React itself,

122
00:06:30.749 --> 00:06:33.490
it can actually run in many
different environments.

123
00:06:33.490 --> 00:06:37.223
It can run in a React server,
it can run in React Native.

124
00:06:37.223 --> 00:06:38.982
It can run in many different environments.

125
00:06:38.982 --> 00:06:42.570
So all server side rendering
is doing is taking React,

126
00:06:42.570 --> 00:06:47.328
the framework that allows you to create
UIs, and building a React server

127
00:06:47.328 --> 00:06:52.630
environment that translates it to
run inside of a Node.js environment.

128
00:06:52.630 --> 00:06:55.784
And basically, instead of spitting
out something that goes to the DOM,

129
00:06:55.784 --> 00:06:57.498
like DOM nodes, it spits out a string.

130
00:06:57.498 --> 00:06:59.470
It spits out HTML string.

131
00:06:59.470 --> 00:07:02.416
That HTML string gets sent to
the browser as an HTML document, and

132
00:07:02.416 --> 00:07:04.050
then the browser shows it.

133
00:07:04.050 --> 00:07:05.490
So that's what server side rendering is.

134
00:07:05.490 --> 00:07:08.681
It's like I'm gonna take this React,
I'm gonna convert it to an HTML string.

135
00:07:08.681 --> 00:07:10.590
And I'm gonna give it to the browser.

136
00:07:10.590 --> 00:07:13.140
That's basically it,
that's server side rendering.

137
00:07:13.140 --> 00:07:15.380
Server side component
is a little different.

138
00:07:15.380 --> 00:07:19.165
It's also doing server side rendering, but

139
00:07:19.165 --> 00:07:24.010
its logic is also being
executed on the server.

140
00:07:24.010 --> 00:07:27.058
I don't know how to best describe that,
it's like [LAUGH].

141
00:07:27.058 --> 00:07:31.393
And then also with server side rendering,
although I am sending HTML for

142
00:07:31.393 --> 00:07:36.226
that component to the browser, there is
a client component that gets downloaded

143
00:07:36.226 --> 00:07:39.566
that is an exact replica of
that server side component,

144
00:07:39.566 --> 00:07:42.573
that eventually takes over
the server side HTML.

145
00:07:42.573 --> 00:07:45.280
So that way it's interactive, right?

146
00:07:45.280 --> 00:07:49.130
So it's like, all right,
here's the HTML for the initial render.

147
00:07:49.130 --> 00:07:51.131
Okay, now wait for
the JavaScript to download, wait for

148
00:07:51.131 --> 00:07:52.180
the JavaScript to download.

149
00:07:52.180 --> 00:07:55.200
Okay, cool, here's the equivalent
client version of that component.

150
00:07:55.200 --> 00:07:57.535
Get rid of the server one and
put the client one in now, so

151
00:07:57.535 --> 00:07:59.700
people can actually use this thing.

152
00:07:59.700 --> 00:08:01.980
That doesn't happen with
the server component.

153
00:08:01.980 --> 00:08:06.930
A server component is purely HTML,
everything's executed on the server.

154
00:08:06.930 --> 00:08:09.170
There is no client side thing taking over.

155
00:08:09.170 --> 00:08:11.980
As far as the browser is concerned,
it's just HTML.

156
00:08:11.980 --> 00:08:13.699
It doesn't know that this is React, and

157
00:08:13.699 --> 00:08:16.170
there's no JavaScript
waiting to hydrate it.

158
00:08:16.170 --> 00:08:18.002
So that's the difference.

