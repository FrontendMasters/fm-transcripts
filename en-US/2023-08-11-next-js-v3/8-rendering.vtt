WEBVTT

1
00:00:00.000 --> 00:00:04.546
This one's just more of
a lecture on how next Js does

2
00:00:04.546 --> 00:00:08.585
rendering because I think it's important.

3
00:00:08.585 --> 00:00:10.279
I would say it's probably
a little advanced and

4
00:00:10.279 --> 00:00:11.768
I probably didn't need to put this here.

5
00:00:11.768 --> 00:00:14.913
But it confused me until
I understood this so

6
00:00:14.913 --> 00:00:19.760
I made a really good choice is just
put this in here and talk about it.

7
00:00:19.760 --> 00:00:25.103
But basically Next Js has like two
different rendering modes statically or

8
00:00:25.103 --> 00:00:26.810
dynamically, right?

9
00:00:26.810 --> 00:00:33.530
So static routes are like components
that render ahead of time.

10
00:00:33.530 --> 00:00:36.740
Like at build time when I run
the build command I'm deploying it.

11
00:00:36.740 --> 00:00:38.740
And it gets rendered there and
the results are cached.

12
00:00:38.740 --> 00:00:39.410
So they're static.

13
00:00:39.410 --> 00:00:42.324
And that's kind of what I
talked about with a blog post,

14
00:00:42.324 --> 00:00:44.804
the content this page is
never going to change or

15
00:00:44.804 --> 00:00:48.290
maybe the landing page the content
is pages never going to change.

16
00:00:48.290 --> 00:00:51.900
It doesn't rely on some dynamic data
that needs to be updated all the time.

17
00:00:51.900 --> 00:00:54.230
It's only going to change
when we rebuild it.

18
00:00:54.230 --> 00:00:55.910
So that's the static route.

19
00:00:55.910 --> 00:00:59.770
Whereas a dynamic route might be something
with a parameter in it that's a user ID

20
00:00:59.770 --> 00:01:02.630
where it's like, well,
this is the user's feed.

21
00:01:02.630 --> 00:01:05.520
This is literally going to change
every time someone goes to it.

22
00:01:05.520 --> 00:01:06.960
So I don't want to cache this.

23
00:01:06.960 --> 00:01:10.422
I don't want this to be like
rendered when I deploy it, and

24
00:01:10.422 --> 00:01:13.180
then cache it, and
send it back every time.

25
00:01:13.180 --> 00:01:16.834
If that was the case, and this was
Instagram, we'd all see the same feed.

26
00:01:16.834 --> 00:01:20.338
It has to be dynamic, we have to go
to the server and make an API call,

27
00:01:20.338 --> 00:01:23.910
get new data every single time
someone goes to this URL.

28
00:01:23.910 --> 00:01:27.880
So next Js figures this out for
you without you having to do it.

29
00:01:27.880 --> 00:01:29.190
You just have to give it hints.

30
00:01:29.190 --> 00:01:33.009
And some of the ways you can give it
hints is basically by using some of

31
00:01:33.009 --> 00:01:34.890
the functions that it provides.

32
00:01:34.890 --> 00:01:39.284
So if you've never heard of fetch,
by default fetch is built into Next.js and

33
00:01:39.284 --> 00:01:43.946
they've like on the server side and client
side and they've like hijacked it to try

34
00:01:43.946 --> 00:01:48.072
to figure out what it is that you're
doing with with your with that route,

35
00:01:48.072 --> 00:01:49.780
with that component.

36
00:01:49.780 --> 00:01:53.504
So if you're using fetch, it knows that
like you're probably doing something

37
00:01:53.504 --> 00:01:57.190
dynamic here because you're you're
grabbing data when the page is rendering.

38
00:01:57.190 --> 00:01:58.650
So therefore.

39
00:01:58.650 --> 00:02:02.510
Maybe we shouldn't cache
this page by default, right?

40
00:02:02.510 --> 00:02:06.201
Or it gives you the ability to
interfere with that cache and

41
00:02:06.201 --> 00:02:10.342
try to change the rules of that cache,
like when it revalidates,

42
00:02:10.342 --> 00:02:14.060
how often to revalidate it,
different things like that.

43
00:02:14.060 --> 00:02:15.130
It can get pretty crazy.

44
00:02:16.130 --> 00:02:20.120
And then you also have The ability,
like if you use anything dynamic

45
00:02:20.120 --> 00:02:25.140
like a cookies function that they have or
headers function that they have.

46
00:02:25.140 --> 00:02:27.913
This also tells next js that,
you're doing something dynamic,

47
00:02:27.913 --> 00:02:31.203
you're using these functions, and you're
grabbing a cookie from somewhere, or

48
00:02:31.203 --> 00:02:33.220
you're looking at the header somewhere.

49
00:02:33.220 --> 00:02:35.511
That means you're doing
some logic that's dynamic,

50
00:02:35.511 --> 00:02:38.140
so we're not going to
statically render this page.

51
00:02:38.140 --> 00:02:40.325
Because you're using one
of these functions so.

52
00:02:40.325 --> 00:02:42.138
And that just happens for you for free.

53
00:02:42.138 --> 00:02:44.509
And I didn't know that when
I started using xjs 13.

54
00:02:44.509 --> 00:02:47.717
And I kept having these issues where
I kept getting back cache pages.

55
00:02:47.717 --> 00:02:50.599
And it was I just did not understand and
sometimes I wouldn't.

56
00:02:50.599 --> 00:02:51.841
And it's because of this,

57
00:02:51.841 --> 00:02:54.550
if you use any of these functions
that they provide for you.

58
00:02:54.550 --> 00:02:58.277
It's automatically going to opt
you into Dynamic routing, and

59
00:02:58.277 --> 00:03:00.590
if you don't use any of them.

60
00:03:00.590 --> 00:03:04.440
So that means by default every single
page is statically rendered, and

61
00:03:04.440 --> 00:03:05.860
it's going to be cached.

62
00:03:05.860 --> 00:03:08.830
But they do give you tools
to dive into that cache.

63
00:03:08.830 --> 00:03:13.890
I don't want to get into them because I
could spend a week talking about caching.

64
00:03:13.890 --> 00:03:19.288
It's incredibly difficult to go into
it There's tons of documentation on it,

65
00:03:19.288 --> 00:03:22.107
but yeah, by default everything is going

66
00:03:22.107 --> 00:03:26.820
to be statically rendered unless
you use one of these functions.

67
00:03:26.820 --> 00:03:28.402
Yeah, so Next.js is just like,

68
00:03:28.402 --> 00:03:31.457
I think a lot of in the past
it's always been, build an app.

69
00:03:31.457 --> 00:03:32.482
Do whatever you want.

70
00:03:32.482 --> 00:03:35.359
And then you get to the end of it and
you're like, all right,

71
00:03:35.359 --> 00:03:37.190
now let's figure out performance.

72
00:03:37.190 --> 00:03:39.710
And you start like taking away things,
you start optimizing things,

73
00:03:39.710 --> 00:03:41.300
you start minimizing things.

74
00:03:41.300 --> 00:03:45.130
Next Js is like well, what if we just turn
on performance day one out of the box.

75
00:03:45.130 --> 00:03:47.289
Everything default is
gonna be performing and

76
00:03:47.289 --> 00:03:49.290
then you gotta opt out of the performance.

77
00:03:49.290 --> 00:03:52.520
So, that's the approach
that they're going for.

78
00:03:52.520 --> 00:03:53.430
It seems to be working for them.

79
00:03:53.430 --> 00:03:56.300
I don't think it works in all cases,
but I think it works for

80
00:03:56.300 --> 00:04:00.110
them because they have such a strong
convention around how you build your App.

81
00:04:00.110 --> 00:04:03.623
Like as far as like what file names are,
and what folder names are I think you have

82
00:04:03.623 --> 00:04:06.940
to have that convention in order to
create something that's performant.

83
00:04:06.940 --> 00:04:10.019
Otherwise, if people could just make
whatever they want, whatever they want,

84
00:04:10.019 --> 00:04:11.710
how would they get performance by default?

85
00:04:11.710 --> 00:04:12.950
It would be a mess.

86
00:04:12.950 --> 00:04:16.390
So it works for them, but
that's that's their philosophy.

87
00:04:16.390 --> 00:04:17.173
It's just like,

88
00:04:17.173 --> 00:04:20.790
how do we make sure everything that
everyone is shipping is fast by default?

89
00:04:20.790 --> 00:04:21.814
So that's what they're doing.

90
00:04:24.396 --> 00:04:25.110
Cool.

91
00:04:25.110 --> 00:04:25.981
Any questions?

