WEBVTT

1
00:00:00.530 --> 00:00:01.400
What about CORS?

2
00:00:03.260 --> 00:00:07.021
&gt;&gt; For CORS, so if you don't know
what CORS is, CORS, C-O-R-S,

3
00:00:07.021 --> 00:00:09.050
cross-origin resource sharing.

4
00:00:09.050 --> 00:00:13.802
It's a security policy that browsers
have implemented to prevent websites

5
00:00:13.802 --> 00:00:19.370
from accessing information from servers
that aren't part of the same domain.

6
00:00:19.370 --> 00:00:20.876
So a server can implement.

7
00:00:20.876 --> 00:00:23.589
So what the browser will do is
something called a pre-flight check,

8
00:00:23.589 --> 00:00:26.560
which basically means, let's say you
did a fetch request in the browser.

9
00:00:26.560 --> 00:00:31.065
Before that fetch request, the browser
will actually go to that location first

10
00:00:31.065 --> 00:00:33.496
and do an options check, options method.

11
00:00:33.496 --> 00:00:34.701
Let's say you try to do a GET request.

12
00:00:34.701 --> 00:00:35.828
It'll first say,

13
00:00:35.828 --> 00:00:40.278
let me do an options request first just
to see what the server is capable of.

14
00:00:40.278 --> 00:00:44.716
So then a server can respond
back to that options request and

15
00:00:44.716 --> 00:00:48.898
be like, yeah, here,
we support only these domains.

16
00:00:48.898 --> 00:00:50.813
We support only these methods.

17
00:00:50.813 --> 00:00:52.447
So then the browser will get that back.

18
00:00:52.447 --> 00:00:56.507
And if it doesn't see the domain that
you're on or the IP that you're on

19
00:00:56.507 --> 00:01:00.307
as supported, then your request
will get blocked for CORS issue.

20
00:01:00.307 --> 00:01:04.378
So it's just a way to protect
websites through the browser.

21
00:01:04.378 --> 00:01:08.399
So as someone who's implementing a server,
if you want anyone to be able to access

22
00:01:08.399 --> 00:01:11.451
your server, and
this doesn't count like authentication.

23
00:01:11.451 --> 00:01:12.532
You're still gonna add authentication.

24
00:01:12.532 --> 00:01:16.958
This is just like just even being able
to knock on your door, basically.

25
00:01:16.958 --> 00:01:18.020
You have to implement CORS.

26
00:01:18.020 --> 00:01:19.722
So you have to implement a strategy there.

27
00:01:19.722 --> 00:01:23.246
So CORS is a OPTIONS request.

28
00:01:23.246 --> 00:01:28.561
So there's nothing stopping you from
just doing OPTIONS like this, And

29
00:01:28.561 --> 00:01:30.686
sending back headers.

30
00:01:30.686 --> 00:01:34.180
So I think the headers you want, actually,

31
00:01:34.180 --> 00:01:40.137
I know exactly where that is in here,
I was just reading it, so let's see.

32
00:01:42.049 --> 00:01:43.579
CORS, here we go, damn, yeah,

33
00:01:43.579 --> 00:01:46.548
so, looks like you can actually
just do a GET request here.

34
00:01:46.548 --> 00:01:50.083
So basically, the way you
respond to CORS is typically you

35
00:01:50.083 --> 00:01:54.213
tell the browser what is possible
by these access control headers.

36
00:01:54.213 --> 00:01:56.560
So you can say
Access-Control-Allow-Origin.

37
00:01:56.560 --> 00:02:01.970
This means, yeah,
anybody can knock on my door, basically.

38
00:02:01.970 --> 00:02:05.401
These are the messages they can send me,
and

39
00:02:05.401 --> 00:02:09.502
these are the headers that
they are allowed to send.

40
00:02:09.502 --> 00:02:13.160
And then now, if the browser thinks
this is okay, which in this case,

41
00:02:13.160 --> 00:02:17.067
it should be cuz this is pretty much
everything, I guess if you said patch,

42
00:02:17.067 --> 00:02:20.746
we did a patch request, this will fail,
cuz it doesn't allow patch.

43
00:02:20.746 --> 00:02:22.224
Then, yeah, you should be good to go.

44
00:02:22.224 --> 00:02:25.657
This doesn't matter if you're doing
server-to-server communication.

45
00:02:25.657 --> 00:02:26.971
Only browsers implement CORS.

46
00:02:26.971 --> 00:02:29.640
So if you have one server
talking to another server,

47
00:02:29.640 --> 00:02:32.439
CORS doesn't matter cuz only
browsers look for CORS.

48
00:02:32.439 --> 00:02:35.862
&gt;&gt; And I think it also only
matters cross-domain, right?

49
00:02:35.862 --> 00:02:37.590
If you're on the same app,
it doesn't matter.

50
00:02:37.590 --> 00:02:40.515
&gt;&gt; It only matters for cross-domain
if you are on the same domain.

51
00:02:40.515 --> 00:02:45.283
If your API is on yourapp.com and
your website is also on yourapp.com, or

52
00:02:45.283 --> 00:02:49.003
even app.yourapp.com,
it probably doesn't matter.

53
00:02:49.003 --> 00:02:51.712
It's only for
cross-origin resource sharing, so

54
00:02:51.712 --> 00:02:53.640
it has to be a different domain.

55
00:02:53.640 --> 00:02:56.447
So the question was what
are the differences between API routes in

56
00:02:56.447 --> 00:02:59.830
the pages directory versus API
routes in the app directory?

57
00:02:59.830 --> 00:03:03.417
So last time I taught this course
was when 13 first came out and

58
00:03:03.417 --> 00:03:06.531
they switched the pages over
to the app directory, but

59
00:03:06.531 --> 00:03:09.870
they did not switch the API
over to the app directory.

60
00:03:09.870 --> 00:03:13.990
So you still had to use the pages folder
just to use an API, which was weird.

61
00:03:13.990 --> 00:03:16.216
So you had an app folder
with all your pages, and

62
00:03:16.216 --> 00:03:18.370
then a pages folder with your API.

63
00:03:18.370 --> 00:03:19.440
So it's very, very weird.

64
00:03:19.440 --> 00:03:22.028
You guys aren't getting that CORS today.

65
00:03:22.028 --> 00:03:24.450
So the difference other than that,

66
00:03:24.450 --> 00:03:30.410
before Next.js 13 came out was that
it basically looked like this, right?

67
00:03:30.410 --> 00:03:34.494
The difference was you have an api folder,
and then in that api folder,

68
00:03:34.494 --> 00:03:39.380
I wouldn't have to make another folder for
a segment, I could just make a filename.

69
00:03:39.380 --> 00:03:42.574
So let's say I wanted a route called todo.

70
00:03:42.574 --> 00:03:45.634
So in the new api folder, I have to
make a new folder called todo, and

71
00:03:45.634 --> 00:03:46.675
then put a route in it.

72
00:03:46.675 --> 00:03:51.073
But in the old pages api folder, I could
just come to the root of the api and

73
00:03:51.073 --> 00:03:52.311
just say todo.ts.

74
00:03:52.311 --> 00:03:55.352
And that would make
a route called /api/todo.

75
00:03:55.352 --> 00:03:56.534
It'd be the name of the file.

76
00:03:56.534 --> 00:03:57.434
The same thing with pages.

77
00:03:57.434 --> 00:04:02.167
I wouldn't have to do page.tsx,
I would just say spa.tsx, and

78
00:04:02.167 --> 00:04:03.894
that would be the page.

79
00:04:03.894 --> 00:04:06.459
So that would be the difference,
and then you'd come in here and

80
00:04:06.459 --> 00:04:08.418
you get a function that looks like this,
right?

81
00:04:08.418 --> 00:04:12.172
You have a function that says,
usually people call it handler.

82
00:04:12.172 --> 00:04:15.498
You'll get a request and
a response that's passed in.

83
00:04:15.498 --> 00:04:17.608
And then you could do whatever
you want here, right?

84
00:04:17.608 --> 00:04:19.693
And then you just export this.

85
00:04:22.827 --> 00:04:25.212
You can only export a default,
and that was it.

86
00:04:25.212 --> 00:04:29.278
And then anything like handling
different methods, that'd be on you.

87
00:04:29.278 --> 00:04:36.214
That'd be like if req.method === 'GET',
then do this thing, right?

88
00:04:36.214 --> 00:04:38.038
And then if equals POST,
then do this thing.

89
00:04:38.038 --> 00:04:39.683
You'd have to do that
yourself in the code.

90
00:04:39.683 --> 00:04:40.736
So that's the difference.

91
00:04:40.736 --> 00:04:44.700
We don't have to write that logic for
routing on methods, and

92
00:04:44.700 --> 00:04:48.909
we can only make new segments with
folders now and not filenames.

93
00:04:48.909 --> 00:04:52.305
And we can export
different verbs this way.

94
00:04:52.305 --> 00:04:56.578
The other thing is you don't get
a response object passed into you anymore,

95
00:04:56.578 --> 00:04:58.934
you can just import the response object.

96
00:04:58.934 --> 00:05:01.391
And the request object is
a web standard now and

97
00:05:01.391 --> 00:05:05.180
not some request object that Next.js
made that's based off Express.

98
00:05:06.270 --> 00:05:08.798
So a lot of differences there, which is
another reason why I wanted to update

99
00:05:08.798 --> 00:05:11.260
this course and
teach it because it's so different.

100
00:05:11.260 --> 00:05:13.460
So yeah, that's the difference.

101
00:05:13.460 --> 00:05:17.342
Okay, let's just implement
these API routes for our todos,

102
00:05:17.342 --> 00:05:19.367
which should be pretty simple.

103
00:05:19.367 --> 00:05:24.359
So we'll import our database

104
00:05:24.359 --> 00:05:28.157
from @/utils/db.

105
00:05:28.157 --> 00:05:33.188
And then to get all the todos,
pretty simple,

106
00:05:33.188 --> 00:05:39.123
todos will be await db.todo.findMany,
like that,

107
00:05:39.123 --> 00:05:43.777
and then we're gonna send this data back.

108
00:05:48.268 --> 00:05:50.750
Super easy, if you wanna create a todo,

109
00:05:50.750 --> 00:05:54.332
we'll just assume this is
the data that you're sending.

110
00:05:54.332 --> 00:05:59.012
And then we're gonna say todo is await

111
00:05:59.012 --> 00:06:04.862
db.todo.create, like that, data is data,

112
00:06:04.862 --> 00:06:09.849
and then we'll just send back the todo.

113
00:06:17.761 --> 00:06:20.520
All right, so got those.

114
00:06:20.520 --> 00:06:21.613
So we can test it out, right?

115
00:06:21.613 --> 00:06:26.655
I can just go back to my browser,
run this, got all my todos.

116
00:06:26.655 --> 00:06:30.022
That works pretty good, and

117
00:06:30.022 --> 00:06:34.518
then I can make another one from here.

118
00:06:34.518 --> 00:06:41.535
I know we need content,
so we'll pass up content,

119
00:06:41.535 --> 00:06:48.236
and this is a todo from my
vs code http app thingy.

120
00:06:48.236 --> 00:06:53.351
So post that,
you can see we got a new todo here.

121
00:06:53.351 --> 00:06:57.122
And if I go back and refresh this,
should be at the bottom, there it is.

122
00:07:02.946 --> 00:07:05.493
Any other questions on API stuff?

123
00:07:05.493 --> 00:07:08.058
And when it comes to dynamic stuff,
it's the same thing, right?

124
00:07:08.058 --> 00:07:14.101
So I needed /todo, /todo/id,
and it's the same thing, right?

125
00:07:14.101 --> 00:07:19.326
I would just go make a new folder here,
say id, like this,

126
00:07:19.326 --> 00:07:25.270
and then I would make a route in here,
and it's the same thing.

127
00:07:25.270 --> 00:07:26.503
I get access to the params,

128
00:07:26.503 --> 00:07:30.710
I can do pretty much the same thing that
we did in the page, and nothing's changed.

129
00:07:30.710 --> 00:07:33.320
Cool, yeah, I mean, APIs are pretty
simple, and they should be.

130
00:07:33.320 --> 00:07:36.704
So you might be asking yourself,
when would you use these APIs?

131
00:07:36.704 --> 00:07:38.697
I think if you ask the Next.js team,

132
00:07:38.697 --> 00:07:42.952
they really don't want you using these
[LAUGH] for the app that you're making.

133
00:07:42.952 --> 00:07:49.138
They want you to use server actions and
server-side data fetching like we did.

134
00:07:49.138 --> 00:07:50.504
Where did we do that?

135
00:07:50.504 --> 00:07:55.419
In the dashboard todos page, like this.

136
00:07:55.419 --> 00:07:58.119
They want you to do this, and
they're right, you should be doing this.

137
00:07:58.119 --> 00:07:59.009
This is way better.

138
00:07:59.009 --> 00:07:59.799
It's so much simpler.

139
00:07:59.799 --> 00:08:01.339
You don't have to go across the network.

140
00:08:01.339 --> 00:08:02.871
You're already on the server.

141
00:08:02.871 --> 00:08:06.965
The sweet thing about doing this is now
the person's Internet is not a factor in

142
00:08:06.965 --> 00:08:10.437
how fast they get the data back
because this happens on the server,

143
00:08:10.437 --> 00:08:12.378
which probably has fiber Internet.

144
00:08:12.378 --> 00:08:15.637
It's probably in some private
network that's really quick.

145
00:08:15.637 --> 00:08:18.833
And you're not relying on someone's
network connection to determine how quick

146
00:08:18.833 --> 00:08:21.848
they're gonna get the data back because
it's not happening on the client.

147
00:08:21.848 --> 00:08:25.070
It's happening here,
it's not going across the wire.

148
00:08:25.070 --> 00:08:29.244
So they're only waiting to
download the HTML that's rendered.

149
00:08:29.244 --> 00:08:33.522
And their Internet connection is gonna
determine how fast they get the HTML back,

150
00:08:33.522 --> 00:08:36.252
but not how fast that
component gets this data back.

151
00:08:36.252 --> 00:08:37.147
So that's a good thing.

152
00:08:37.147 --> 00:08:39.865
So then you might ask yourself,
okay, this is for

153
00:08:39.865 --> 00:08:43.246
getting data, but
what about posting data, mutating data?

154
00:08:43.246 --> 00:08:44.794
That's where I would use the API.

155
00:08:44.794 --> 00:08:46.645
Yeah, but
then they created server actions.

156
00:08:46.645 --> 00:08:49.057
So it's like you could do
everything with server actions,

157
00:08:49.057 --> 00:08:50.418
although I don't recommend it.

158
00:08:50.418 --> 00:08:53.720
You could, and they probably
will evolve it to where you can.

159
00:08:53.720 --> 00:08:57.924
So then it's like, well, why do I even
need APIs then if I can just do mutations

160
00:08:57.924 --> 00:09:01.570
with server actions,
I can do server-side fetching?

161
00:09:01.570 --> 00:09:03.676
Well, sometimes you're still
gonna have client components that

162
00:09:03.676 --> 00:09:04.277
need to get data and

163
00:09:04.277 --> 00:09:06.849
sometimes you're still gonna have client
components that need to mutate data.

164
00:09:06.849 --> 00:09:10.062
So that's where API comes in is just
when you just need client components to

165
00:09:10.062 --> 00:09:10.574
do things.

166
00:09:10.574 --> 00:09:14.818
And then also if your product is some
third party API that needs to offer API

167
00:09:14.818 --> 00:09:19.009
access to other people on their apps,
then yeah, you need API for them.

168
00:09:19.009 --> 00:09:20.466
Maybe it's not for your app.

169
00:09:20.466 --> 00:09:24.134
Maybe it's for other people's apps to
consume, so you're gonna make an API.

170
00:09:24.134 --> 00:09:28.148
So those would probably be the two use
cases I think the Next.js team would say

171
00:09:28.148 --> 00:09:29.154
if they were here.

172
00:09:29.154 --> 00:09:31.716
I think that's what they're doing
based off their documentation and

173
00:09:31.716 --> 00:09:32.678
their recommendations.

174
00:09:32.678 --> 00:09:34.147
And I have to genuinely agree.

175
00:09:34.147 --> 00:09:37.981
Other than using server actions for
everything, I still think

176
00:09:37.981 --> 00:09:42.534
client-side API calls is probably the way
to go if UI needs to be updated for

177
00:09:42.534 --> 00:09:45.370
now, but that could change soon, I'm sure.

