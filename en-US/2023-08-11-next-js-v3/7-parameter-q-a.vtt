WEBVTT

1
00:00:00.200 --> 00:00:03.270
The other thing I wanna talk about
is when it comes to dynamic routing.

2
00:00:05.030 --> 00:00:09.902
It might not always be the case
that you don't know the URL in

3
00:00:09.902 --> 00:00:12.640
which you want to use sometimes.

4
00:00:13.680 --> 00:00:17.880
Sometimes you do know the URL, like let's
think about what's a good example of this?

5
00:00:17.880 --> 00:00:22.795
Well, I guess in the case of documentation
or the case of documentation,

6
00:00:22.795 --> 00:00:26.996
or maybe a blog post where there's
an opportunity, it is not so

7
00:00:26.996 --> 00:00:30.110
dynamic where it's user generated content.

8
00:00:30.110 --> 00:00:33.746
For instance, if your Facebook, you
wouldn't know all the IDs, you'd have to

9
00:00:33.746 --> 00:00:37.326
query the database, give me every single
ID and then you would know all the IDs,

10
00:00:37.326 --> 00:00:40.920
but that's just a massive operation,
why would you do that?

11
00:00:40.920 --> 00:00:44.252
But I don't know, maybe you're writing
a blog post and you can go to a CMS and

12
00:00:44.252 --> 00:00:47.030
get all the titles or all the slugs for
a blog post ahead of time.

13
00:00:47.030 --> 00:00:51.490
So you could know them all if you
wanted to, and it's not that bad.

14
00:00:51.490 --> 00:00:55.502
And maybe you want to generate those
pages statically ahead of time,

15
00:00:55.502 --> 00:00:57.380
you wanna generate the routes.

16
00:00:57.380 --> 00:01:02.363
Whereas right now what's happening is
the routes are the pages are basically

17
00:01:02.363 --> 00:01:06.970
being generated dynamically because
we don't know what the URLs are.

18
00:01:06.970 --> 00:01:10.669
We don't know what these values are, so
they're being generated dynamically as

19
00:01:10.669 --> 00:01:14.910
in when someone goes to that route,
that's when that page gets rendered.

20
00:01:14.910 --> 00:01:19.560
We can avoid all that and
instead send back a static version for

21
00:01:19.560 --> 00:01:22.340
every instance of the page, right?

22
00:01:22.340 --> 00:01:26.248
So, what I'm describing is,
every time I go to this page,

23
00:01:26.248 --> 00:01:29.531
sure it's the same page for
every single ID here,

24
00:01:29.531 --> 00:01:34.376
but the page gets executed on a server
every single time because it has to,

25
00:01:34.376 --> 00:01:40.470
because the parameter changes, which means
you'll probably have different data.

26
00:01:40.470 --> 00:01:44.406
To avoid that, we can send back a static
page that never gets executed other than

27
00:01:44.406 --> 00:01:48.285
the first time for performance for things
that don't need to change like a blog

28
00:01:48.285 --> 00:01:52.610
post or a documentation page, because
there's nothing dynamic about that.

29
00:01:52.610 --> 00:01:56.280
Once you write it's always gonna be
that way until you publish it again.

30
00:01:56.280 --> 00:01:58.722
So what you can do is you can generate and

31
00:01:58.722 --> 00:02:03.760
tell Next.js, actually I wanna
make some of these pages static.

32
00:02:03.760 --> 00:02:07.950
And Next.js I will say, well, what are
those URLs that you want to make static?

33
00:02:07.950 --> 00:02:12.654
So you can use something
called generate static params,

34
00:02:12.654 --> 00:02:18.830
which will allow you to tell Next.js
these are URLs that I know that I have.

35
00:02:18.830 --> 00:02:23.063
I want you to go ahead and
render those at build time to HTML for

36
00:02:23.063 --> 00:02:24.807
every single instance.

37
00:02:24.807 --> 00:02:26.877
So that way when someone navigates to it,

38
00:02:26.877 --> 00:02:30.131
you can just send them back that
HTML without you having to execute

39
00:02:30.131 --> 00:02:33.340
that function again on the server
when someone navigates to it.

40
00:02:33.340 --> 00:02:36.530
Does that make sense?

41
00:02:36.530 --> 00:02:41.244
Okay, so the way that would work is
basically you can only do it, and

42
00:02:41.244 --> 00:02:46.208
yeah, the rest of the stuff is just
me talking about the dynamic stuff,

43
00:02:46.208 --> 00:02:49.020
but the way that that
works is you can only

44
00:02:49.020 --> 00:02:53.694
do it inside of a page that comes
from something dynamic like this.

45
00:02:53.694 --> 00:02:56.956
And then you just have to
send back a bunch of URLs.

46
00:02:56.956 --> 00:03:00.260
I don't wanna get into it too much 'cause
we're gonna talk about it later in

47
00:03:00.260 --> 00:03:00.828
the course,

48
00:03:00.828 --> 00:03:04.308
but I just wanna just bring that up just
in case someone asks questions about it.

49
00:03:04.308 --> 00:03:08.965
Cool, any other questions
&gt;&gt; People are asking about

50
00:03:08.965 --> 00:03:10.662
query parameters?

51
00:03:10.662 --> 00:03:15.181
Query parameters, Okay,

52
00:03:15.181 --> 00:03:18.727
the thing about query parameters is,
it depends on where you want to

53
00:03:18.727 --> 00:03:22.770
use the query, or where do you want
access to the query parameters.

54
00:03:22.770 --> 00:03:26.010
Getting access to the query
parameters inside of the browser,

55
00:03:26.010 --> 00:03:30.046
you couldn't use a server component,
you'd have to use a client component,

56
00:03:30.046 --> 00:03:34.530
which you haven't talked about yet, but
actually nothing's really changed there.

57
00:03:34.530 --> 00:03:39.713
You can get the query parameters any way
that you previously could have gotten

58
00:03:39.713 --> 00:03:44.975
the query parameters, whether it's
through the window or through something

59
00:03:44.975 --> 00:03:50.650
that Next.js actually provides, which is
called from next or actually, hold on.

60
00:03:50.650 --> 00:03:51.818
Is it next location?

61
00:03:51.818 --> 00:03:54.688
Or no, next router,
you can use the use router,

62
00:03:54.688 --> 00:03:59.098
which will allow you to use a hook and
get the query parameters, but again,

63
00:03:59.098 --> 00:04:01.828
this is only gonna work
on a client component.

64
00:04:01.828 --> 00:04:07.171
I think they also have a,
what is the other one?

65
00:04:07.171 --> 00:04:09.122
Use path.

66
00:04:12.061 --> 00:04:14.009
Maybe not,
use routers the one you wanna use, but

67
00:04:14.009 --> 00:04:15.599
that's only gonna work on client side.

68
00:04:16.630 --> 00:04:22.658
For server side, if you wanna get the
query parameters, that's gonna depend on,

69
00:04:22.658 --> 00:04:28.440
basically the query parameters are not
gonna be attached to these parameters.

70
00:04:28.440 --> 00:04:30.210
Query parameters and
route parameters are gonna be two things.

71
00:04:30.210 --> 00:04:33.062
So if you wanna get the query
parameters on the server side,

72
00:04:33.062 --> 00:04:36.040
I don't think you have access
to them on the service side.

73
00:04:36.040 --> 00:04:36.940
We can test that.

74
00:04:36.940 --> 00:04:39.918
I'm almost positive if you don't.

75
00:04:39.918 --> 00:04:40.921
Let's see.

76
00:04:40.921 --> 00:04:46.223
Hello, There, see what that says?

77
00:04:46.223 --> 00:04:52.854
Yeah, you're not gonna have access to
them here on a server side like that.

78
00:04:52.854 --> 00:04:54.954
So you have to get that
on the client side,

79
00:04:54.954 --> 00:04:57.477
which is usually why people
do query parameters.

80
00:04:57.477 --> 00:05:00.007
It's like for that reason, so.

81
00:05:02.036 --> 00:05:03.023
Cool, any other questions?

82
00:05:07.178 --> 00:05:10.231
&gt;&gt; Someone said,
use search params is really easy for

83
00:05:10.231 --> 00:05:12.148
query parameters client side.

84
00:05:12.148 --> 00:05:13.785
&gt;&gt; Yeah, so there's a hook.

85
00:05:13.785 --> 00:05:15.107
It's mostly all client side.

86
00:05:15.107 --> 00:05:17.527
You're not gonna be able to get
access to them on server side.

