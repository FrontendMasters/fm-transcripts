WEBVTT

1
00:00:00.080 --> 00:00:00.930
So let's make some todos.

2
00:00:00.930 --> 00:00:06.350
So we need to create a new todo form,
which we already did as a test case.

3
00:00:06.350 --> 00:00:08.050
I went through and
show you how to do it as a client.

4
00:00:09.650 --> 00:00:14.560
But I'm gonna try to make a form that
submits data without using JavaScript.

5
00:00:14.560 --> 00:00:19.480
I know when was the last time
we've done that, this is OG stuff.

6
00:00:19.480 --> 00:00:20.780
But we're gonna do that.

7
00:00:20.780 --> 00:00:24.874
So I'm actually gonna get rid of
the client, get rid of the state,

8
00:00:24.874 --> 00:00:27.040
get rid of all this.

9
00:00:27.040 --> 00:00:33.280
And we're gonna make a form that
submits on the server side.

10
00:00:33.280 --> 00:00:35.550
So just hang tight with me.

11
00:00:35.550 --> 00:00:36.130
Where am I using this?

12
00:00:36.130 --> 00:00:37.440
I got to take it out somewhere.

13
00:00:37.440 --> 00:00:40.970
Yeah, I got to take it out of
the home page, otherwise it'll break.

14
00:00:40.970 --> 00:00:42.765
So I'm gonna take that out right quick.

15
00:00:45.197 --> 00:00:47.080
There we go.

16
00:00:47.080 --> 00:00:48.580
Okay, it's just a homepage now.

17
00:00:48.580 --> 00:00:51.816
And then for the actual new todo
form before we build it out and

18
00:00:51.816 --> 00:00:55.770
talk about server actions, I just need
to figure out where I wanna put it.

19
00:00:55.770 --> 00:00:57.990
It's a form it never changes.

20
00:00:57.990 --> 00:01:01.810
So I'm probably just gonna put
it in the dashboard layout.

21
00:01:01.810 --> 00:01:02.680
It's gonna put it here.

22
00:01:03.720 --> 00:01:07.550
So right above here,
I'm just gonna put the new todo form.

23
00:01:10.300 --> 00:01:13.040
You can also put it inside of
the todo page, that's also fine.

24
00:01:15.090 --> 00:01:19.708
But the reason I'm gonna put it in here
instead of the todo page is that I don't

25
00:01:19.708 --> 00:01:24.559
want the form to wait on the todo page, to
load in todos, in order to see the form.

26
00:01:25.810 --> 00:01:28.550
If it was in the same page and
the todos took two seconds to load,

27
00:01:28.550 --> 00:01:30.690
then you wouldn't see the form for
two seconds.

28
00:01:31.710 --> 00:01:35.090
So if I put it in the layout, it'll show
instantly while the todos are loading.

29
00:01:35.090 --> 00:01:37.253
But then you might ask yourself,

30
00:01:37.253 --> 00:01:42.360
why would you let someone interact with
the form if the todos haven't loaded?

31
00:01:42.360 --> 00:01:43.460
We're not gonna talk about that.

32
00:01:43.460 --> 00:01:44.320
That's a UX problem.

33
00:01:44.320 --> 00:01:45.160
That's not my job.

34
00:01:45.160 --> 00:01:46.311
I'm not a UX designer.

35
00:01:49.548 --> 00:01:51.040
So that's why I put that there.

36
00:01:51.040 --> 00:01:52.580
So it's not bound.

37
00:01:52.580 --> 00:01:57.044
There's no reason to punish this form
because it's in a page that's slow,

38
00:01:57.044 --> 00:01:58.570
it's not fair.

39
00:01:58.570 --> 00:01:59.854
So I'll put it in a layout
that renders instantly.

40
00:02:03.983 --> 00:02:05.727
Okay, so there we go and

41
00:02:05.727 --> 00:02:11.540
it's right there you just can't see
it because there's no style on it.

42
00:02:11.540 --> 00:02:13.560
So let me add a style to
the form I guess for now.

43
00:02:15.670 --> 00:02:22.080
Class name, border, border black,
25% opacity, something that.

44
00:02:22.080 --> 00:02:23.439
There you go now you can see it.

45
00:02:25.302 --> 00:02:28.696
So let's get into the next thing then,
which is gonna be,

46
00:02:28.696 --> 00:02:32.924
it says loading an error, but
we'll actually do server actions first,

47
00:02:32.924 --> 00:02:35.300
then we'll come back to loading error.

48
00:02:35.300 --> 00:02:37.468
I think it's better to talk about
server actions first since we're kind

49
00:02:37.468 --> 00:02:38.010
of already here.

50
00:02:39.010 --> 00:02:42.727
So server actions,
the best way I can describe server,

51
00:02:42.727 --> 00:02:45.980
actually, you've been
doing server actions.

52
00:02:45.980 --> 00:02:49.700
If you've ever made an API, you've
already been doing server actions, right?

53
00:02:49.700 --> 00:02:53.720
A server action is like running code
on the server, that's literally it.

54
00:02:53.720 --> 00:02:57.250
So why this thing called server actions
if we've already been doing that?

55
00:02:57.250 --> 00:03:00.819
Well, what if you didn't have
to set the route up yourself.

56
00:03:02.040 --> 00:03:03.300
What if it was just set up for you?

57
00:03:03.300 --> 00:03:07.540
What if you could just call a function
that gets executed on the server?

58
00:03:09.450 --> 00:03:11.270
That's basically what a server action is.

59
00:03:11.270 --> 00:03:16.190
Your ability to call a function
that gets executed on the server.

60
00:03:16.190 --> 00:03:20.080
I mean, which is exactly what
happens if you hit an API.

61
00:03:20.080 --> 00:03:21.840
But you don't have to
set up the API yourself.

62
00:03:21.840 --> 00:03:24.660
You don't have to worry about the route,
you don't do any of that stuff.

63
00:03:24.660 --> 00:03:27.119
And depending on when you use that action,

64
00:03:27.119 --> 00:03:32.180
you can actually trigger it without
using JavaScript in the case of forms.

65
00:03:32.180 --> 00:03:36.019
So that means you can
have a pretty interactive

66
00:03:36.019 --> 00:03:39.370
app without any JavaScript on it.

67
00:03:39.370 --> 00:03:44.452
If all your app was was forms, which I
know brings us back to when JavaScript and

68
00:03:44.452 --> 00:03:47.378
HTML was first invented yeah cool story,
but

69
00:03:47.378 --> 00:03:50.530
it's you won't get full
page reloads either.

70
00:03:50.530 --> 00:03:52.080
So you kind of get
the best of both worlds.

71
00:03:52.080 --> 00:03:56.888
Yeah, so it's not back in a we submit a
form and it's just you're just waiting for

72
00:03:56.888 --> 00:03:58.460
the whole thing to reload.

73
00:03:58.460 --> 00:03:59.900
You still not getting that.

74
00:03:59.900 --> 00:04:02.750
But yeah, you execute code on the server.

75
00:04:02.750 --> 00:04:04.723
And this is same thing as something PHP,

76
00:04:04.723 --> 00:04:07.870
literally the same thing as
something like Elixir and Phoenix.

77
00:04:07.870 --> 00:04:08.970
It's literally the same thing.

78
00:04:08.970 --> 00:04:11.648
The only difference is,
it's all JavaScript.

79
00:04:11.648 --> 00:04:14.170
Whereas with those languages,
you will do PHP on the back end, but

80
00:04:14.170 --> 00:04:16.964
then you're doing JavaScript on front end,
or you're doing Phoenix and

81
00:04:16.964 --> 00:04:19.418
Elixir on the back end,
you're doing JavaScript on front end.

82
00:04:19.418 --> 00:04:24.850
This is just all JavaScript, which could
be a benefit if you know JavaScript.

83
00:04:24.850 --> 00:04:26.522
So it's really cool.

84
00:04:26.522 --> 00:04:29.917
Okay, so how do you make a server action,

85
00:04:29.917 --> 00:04:34.380
there's two ways basically
if you are in a component.

86
00:04:34.380 --> 00:04:37.902
All you have to do is make a function and
just use the use

87
00:04:37.902 --> 00:04:42.850
server directive at the top of that
function, this is one way you can do it.

88
00:04:42.850 --> 00:04:47.088
We're gonna do it the other way, but
this is just one way you can do it and

89
00:04:47.088 --> 00:04:50.000
then you can use that
function almost anywhere.

90
00:04:50.000 --> 00:04:51.760
There are some caveats,
we'll talk about that.

91
00:04:51.760 --> 00:04:52.942
But the preferable one and

92
00:04:52.942 --> 00:04:57.070
the one that we'll be doing right now is
using it on the action prop on a form.

93
00:04:57.070 --> 00:05:00.813
So an action prop is basically a function
to run when the form is submitted.

94
00:05:00.813 --> 00:05:05.479
If you just put a function there,
it'll reload the whole page and do things.

95
00:05:05.479 --> 00:05:09.130
We're going to run this server
action when this form is updated.

96
00:05:09.130 --> 00:05:11.410
So that's one way todo it.

97
00:05:11.410 --> 00:05:16.329
Another way todo it is to basically,
the way that we're gonna

98
00:05:16.329 --> 00:05:21.220
do it is we're going to create
another file in our utils.

99
00:05:21.220 --> 00:05:22.235
I'm gonna call it actions.

100
00:05:24.499 --> 00:05:26.740
At the very top of this file,
I'm gonna say use server.

101
00:05:26.740 --> 00:05:29.190
So I'd rather have use
server in this entire file.

102
00:05:30.560 --> 00:05:33.212
And then that way everything in this
file is gonna be guaranteed to execute

103
00:05:33.212 --> 00:05:34.320
on the server.

104
00:05:34.320 --> 00:05:35.866
So I'm just gonna do that.

105
00:05:37.911 --> 00:05:39.070
And we're gonna make a new action.

106
00:05:39.070 --> 00:05:43.360
We're gonna export it, and
it's just a function that creates a todo.

107
00:05:43.360 --> 00:05:46.237
I'm gonna call it new todo.

108
00:05:46.237 --> 00:05:53.660
It takes in some content, and it's just
gonna import the database and use that.

109
00:05:53.660 --> 00:05:56.710
So we're gonna say import DB from,

110
00:05:56.710 --> 00:06:02.404
actually we don't have todo the at sign,
we're right next to it,

111
00:06:02.404 --> 00:06:07.316
DB And

112
00:06:07.316 --> 00:06:11.283
I'm just gonna say todo equals,
need to async this.

113
00:06:11.283 --> 00:06:19.789
So todo = await dbtodo.create.

114
00:06:22.411 --> 00:06:25.289
And you wanna add a property called data,
and

115
00:06:25.289 --> 00:06:28.870
data is all the things that
you need to create todo with.

116
00:06:28.870 --> 00:06:32.400
In this case, the only thing todo
needs to be created is content.

117
00:06:32.400 --> 00:06:35.960
Everything else is either defaulted or
not necessary.

118
00:06:37.780 --> 00:06:38.684
How do I know that?

119
00:06:38.684 --> 00:06:39.380
We wrote the schema.

120
00:06:39.380 --> 00:06:40.790
So we can just look right here.

121
00:06:40.790 --> 00:06:42.190
ID gets generated.

122
00:06:42.190 --> 00:06:44.450
Created at gets generated.

123
00:06:44.450 --> 00:06:48.560
Content, if it had a question mark on it,
that means it'd be optional.

124
00:06:48.560 --> 00:06:50.150
It doesn't, so we have to add content.

125
00:06:51.180 --> 00:06:53.632
Completed is also required,
but it also has a default, so

126
00:06:53.632 --> 00:06:54.840
we don't have to supply it.

127
00:06:54.840 --> 00:06:57.980
So really, the only you have to pass
to it todo to create this content.

128
00:06:57.980 --> 00:07:01.770
So that's what we did.

129
00:07:01.770 --> 00:07:02.670
Prisma knows that too.

130
00:07:02.670 --> 00:07:05.080
If I get rid of this,
it'll scream at me, hey.

131
00:07:06.160 --> 00:07:09.202
If you forget, if you read this,
you will see that it's asking me for

132
00:07:09.202 --> 00:07:11.330
content somewhere else here.

133
00:07:11.330 --> 00:07:15.750
You just gotta read it very carefully,
cool.

134
00:07:15.750 --> 00:07:16.630
So we have our todo.

135
00:07:18.240 --> 00:07:21.100
Now the only problem
with the server actions.

136
00:07:21.100 --> 00:07:24.767
Unlike API calls where you
can open up http requests,

137
00:07:24.767 --> 00:07:27.570
hit the API, get back a response.

138
00:07:27.570 --> 00:07:30.110
You can't respond back.

139
00:07:30.110 --> 00:07:34.130
So that's probably a big
blocker right there.

140
00:07:34.130 --> 00:07:35.020
That's a big no.

141
00:07:35.020 --> 00:07:36.180
You kind of need that.

142
00:07:36.180 --> 00:07:39.110
If you're performing some action,
you need a response back.

143
00:07:39.110 --> 00:07:43.870
So that's why server actions
are really good for side effects.

144
00:07:43.870 --> 00:07:48.210
If you don't know what a side effect is, a
side effect is basically like a site, for

145
00:07:48.210 --> 00:07:52.798
instance, if you've ever done analytics,
you've ever rigged analytics for an app,

146
00:07:52.798 --> 00:07:56.050
every time you'd call track,
that's a side effect.

147
00:07:56.050 --> 00:07:59.280
The app doesn't depend on
you calling analytics.

148
00:07:59.280 --> 00:08:03.070
It's probably happening in the background
as the person navigates through the app.

149
00:08:03.070 --> 00:08:04.335
You're not sitting there waiting,

150
00:08:04.335 --> 00:08:06.510
showing a loading screen until
you finish this track, right?

151
00:08:06.510 --> 00:08:08.210
It's just happening.

152
00:08:08.210 --> 00:08:09.530
On the side, it's a side effect.

153
00:08:09.530 --> 00:08:13.570
So server actions are great for
side effects, things that have to

154
00:08:13.570 --> 00:08:18.850
happen on the server in which the UI or
the user doesn't need to wait for.

155
00:08:18.850 --> 00:08:22.200
Maybe you have some asynchronous event
driven architecture that's handled by

156
00:08:22.200 --> 00:08:22.700
web hooks.

157
00:08:22.700 --> 00:08:26.830
So you can just fire this that fires a web
hook and sell the response to it later.

158
00:08:26.830 --> 00:08:29.490
Who knows, but
it's great for side effects.

159
00:08:29.490 --> 00:08:34.771
If you need to change or what next js
would say, mutate your back end, you turn

160
00:08:34.771 --> 00:08:39.893
your back end basically this means not
only did you change something on your

161
00:08:39.893 --> 00:08:45.980
database or whatever source of truth you
have, but you need the response from it.

162
00:08:45.980 --> 00:08:47.847
If you need todo that,
you can still use our actions and

163
00:08:47.847 --> 00:08:48.909
that's what we're gonna do.

164
00:08:49.980 --> 00:08:51.148
But I think right now,

165
00:08:51.148 --> 00:08:54.500
I would probably still just do
all that on a client for now.

166
00:08:54.500 --> 00:08:58.264
I think if you need to change the UI based
off something that happened on the back

167
00:08:58.264 --> 00:09:02.100
end, you should probably just make an API
call on the front end, in my opinion.

168
00:09:02.100 --> 00:09:03.490
The same way you've ever used React.

169
00:09:03.490 --> 00:09:05.662
Just do a useEffects or whatever, or

170
00:09:05.662 --> 00:09:08.400
onClick call this function
that does a fetch.

171
00:09:08.400 --> 00:09:12.099
I would probably still do that right now,
although, as you'll see,

172
00:09:12.099 --> 00:09:13.490
we'll be able to do this.

173
00:09:13.490 --> 00:09:14.705
So we have a todo,

174
00:09:14.705 --> 00:09:19.330
we created it, let's see what happens
before we try to get it back.

175
00:09:19.330 --> 00:09:26.120
So let's bring it into our new form todo.

176
00:09:26.120 --> 00:09:31.910
So instead of our new new todo form,
I'm gonna bring in that action.

177
00:09:31.910 --> 00:09:33.870
It's called a new todo.

178
00:09:33.870 --> 00:09:35.650
So I'm just gonna say new todo.

179
00:09:35.650 --> 00:09:36.520
Bring that in here.

180
00:09:36.520 --> 00:09:42.910
And then on the form,
I'm gonna say action this.

181
00:09:42.910 --> 00:09:46.854
And I'm gonna say new todo, like so,

182
00:09:46.854 --> 00:09:52.646
the last thing I need to do is
add a button here that says,

183
00:09:52.646 --> 00:09:56.980
new todo, and give it a type submit that.

184
00:10:02.800 --> 00:10:06.512
So because we added this to the form now,
which means the form is gonna pass in

185
00:10:06.512 --> 00:10:10.890
whatever argument goes to this function,
whereas before when we wrote it.

186
00:10:10.890 --> 00:10:12.520
We assume we're gonna get content.

187
00:10:12.520 --> 00:10:15.420
Well, now that it's on a form,
we're actually not gonna get content.

188
00:10:15.420 --> 00:10:17.740
We're gonna get something
called form data.

189
00:10:17.740 --> 00:10:19.870
We're gonna get form data.

190
00:10:19.870 --> 00:10:24.341
So form data is just an object that
you can use to get data from a form.

191
00:10:24.341 --> 00:10:27.102
So in this case, we'll say form data.get,

192
00:10:27.102 --> 00:10:31.860
and then the name of the input on
which we wanna get the value from.

193
00:10:31.860 --> 00:10:34.760
So I haven't given this input a name,
let's give it one.

194
00:10:34.760 --> 00:10:37.157
So I'll say the name of
this input is content.

195
00:10:39.909 --> 00:10:40.730
Right, you can call it whatever you want.

196
00:10:40.730 --> 00:10:42.370
You can call it todo,
you can say whatever.

197
00:10:42.370 --> 00:10:43.397
I'm just gonna say content.

198
00:10:46.699 --> 00:10:49.910
And then now in my actions,
I can say formData.get('content').

199
00:10:49.910 --> 00:10:54.979
By the name of that input that, this is
just freaking out because it doesn't any.

200
00:10:54.979 --> 00:10:59.536
Cool if you've never seen this before,
this is a standard, form data is

201
00:10:59.536 --> 00:11:04.560
actually standards, not something
created by next js, it's a web standard.

202
00:11:04.560 --> 00:11:07.785
And I think that's what I kind of
like about what they're doing is that

203
00:11:07.785 --> 00:11:10.200
they're just relying on
standards going forward.

204
00:11:10.200 --> 00:11:12.660
Even when we get to API's, you'll see
they're just relying on standards.

205
00:11:12.660 --> 00:11:15.460
They're not creating some new thing,
which I think is really cool.

206
00:11:15.460 --> 00:11:20.660
Looks we're coming full circle,
just getting back to the basics.

207
00:11:20.660 --> 00:11:23.990
But even more complicated somehow,
so it's kinda cool to see it happen.

208
00:11:25.410 --> 00:11:31.718
Okay, so now we have that,
let's go see what we broke.

209
00:11:31.718 --> 00:11:34.512
Yeah, so now you can see
right now it's saying, yeah,

210
00:11:34.512 --> 00:11:37.610
you wanna use server actions you
have to add this to your config.

211
00:11:39.760 --> 00:11:44.540
So what we need todo is go
down to the root of our app.

212
00:11:44.540 --> 00:11:49.503
You should see a file called
next.config.js at the top here

213
00:11:49.503 --> 00:11:51.290
in this object.

214
00:11:51.290 --> 00:11:57.124
You can add experimental,
that's an object and

215
00:11:57.124 --> 00:12:00.539
you can add server actions,

216
00:12:00.539 --> 00:12:06.210
you can add true, so yeah, turn that on.

217
00:12:06.210 --> 00:12:08.510
Once we have that on,
we should get that error to go away.

218
00:12:08.510 --> 00:12:10.840
We might have to do a rebuild on that.

219
00:12:12.324 --> 00:12:13.020
No, I guess not.

220
00:12:13.020 --> 00:12:14.109
I guess it figured itself out.

221
00:12:16.040 --> 00:12:18.750
Okay, so there we go.

222
00:12:20.480 --> 00:12:23.420
Now let's try to create a new todo and
see what happens.

223
00:12:23.420 --> 00:12:27.270
I'm just gonna open up the network
panel so we can observe some things.

224
00:12:27.270 --> 00:12:32.180
I'm just gonna type in something here,
new todo.

225
00:12:32.180 --> 00:12:34.979
I'm just gonna click new todo.

226
00:12:36.840 --> 00:12:39.650
And you can see immediately
a request fired off.

227
00:12:39.650 --> 00:12:44.691
Remember, we did not write any
network code to fire off a request,

228
00:12:44.691 --> 00:12:47.100
so that's one thing.

229
00:12:47.100 --> 00:12:49.470
And we don't have an API
route that handles this.

230
00:12:49.470 --> 00:12:51.530
So, why did it fire and where did it fire?

231
00:12:51.530 --> 00:12:57.140
So, you can see right here, it fired
a post request to the page that we're on.

232
00:12:58.580 --> 00:13:00.380
And if we look at the payload of it.

233
00:13:00.380 --> 00:13:04.700
Yeah, it's got some stuff we didn't write,
what is that?

234
00:13:04.700 --> 00:13:06.080
We didn't write that.

235
00:13:06.080 --> 00:13:08.160
It's got some action thing.

236
00:13:08.160 --> 00:13:12.320
It's got the content that we added,
but we didn't add any of this stuff.

237
00:13:12.320 --> 00:13:16.622
So this is the part that I'm saying
though it does the API routing and

238
00:13:16.622 --> 00:13:18.520
submitting for you for free.

239
00:13:18.520 --> 00:13:21.155
You could do it yourself with
client side JavaScript, but

240
00:13:21.155 --> 00:13:24.290
this is happening on the server or
this has been executed on a server.

241
00:13:24.290 --> 00:13:28.130
So then if we go look at the terminal
here, we don't have any any error so that

242
00:13:28.130 --> 00:13:32.900
means it probably saved to the database so
we can check the database right click.

243
00:13:32.900 --> 00:13:37.344
Easiest way todo that is in another
terminal type MPX, Prisma, Studio.

244
00:13:37.344 --> 00:13:42.230
If you type that in another terminal,
it opened up this other app on localhost

245
00:13:42.230 --> 00:13:45.839
55 55 where you can browse
your database visually and

246
00:13:45.839 --> 00:13:49.090
you can see I have one todo
in there called new todo.

247
00:13:53.240 --> 00:14:01.480
So it worked,
it went to the database, no problems.

248
00:14:01.480 --> 00:14:03.120
Well, except there's one problem.

249
00:14:03.120 --> 00:14:04.630
It didn't show up on the page.

250
00:14:04.630 --> 00:14:08.980
I made a new todo and we know we're
pulling all the to dues on this page.

251
00:14:08.980 --> 00:14:09.510
We saw it.

252
00:14:09.510 --> 00:14:11.070
It was a it was an empty array.

253
00:14:11.070 --> 00:14:11.990
Why is it not there?

254
00:14:11.990 --> 00:14:15.269
Well, if I just refresh,
ergo this shows up now on the page.

255
00:14:16.540 --> 00:14:19.010
But why do I have to refresh
it after I save that?

256
00:14:19.010 --> 00:14:20.090
That's kind of gross, right?

257
00:14:20.090 --> 00:14:22.810
We want that just to pop up immediately.

258
00:14:22.810 --> 00:14:26.028
And this is why I said server actions
are really great for mutations,

259
00:14:26.028 --> 00:14:29.469
because if you need the UI to be updated
after you perform a server action,

260
00:14:29.469 --> 00:14:30.490
it's not as simple.

261
00:14:30.490 --> 00:14:34.202
You don't get that for free as you would
waiting for a response on an http call

262
00:14:34.202 --> 00:14:37.914
where you can, I'm just gonna await
this fetch, and then get the result and

263
00:14:37.914 --> 00:14:42.400
then do whatever I want with the result,
or even do an optimistic update.

264
00:14:42.400 --> 00:14:44.390
You can do all of that
with server actions.

265
00:14:44.390 --> 00:14:46.690
You can do automatic updates,
it's a lot harder.

266
00:14:46.690 --> 00:14:50.121
But at that point, you're writing client
side code, you need client side code,

267
00:14:50.121 --> 00:14:53.670
optimistic updates, so I might have
to choose a client site fetch.

268
00:14:53.670 --> 00:14:59.270
But for now, we're gonna get around all
of that by tapping into the revalidation.

269
00:15:01.160 --> 00:15:02.660
The revalidation functionality.

270
00:15:04.370 --> 00:15:08.444
So, if you look at the page
in which needs to be updated,

271
00:15:08.444 --> 00:15:12.870
whenever this server action is
created is gonna be /todos,

272
00:15:12.870 --> 00:15:18.110
right we want /todos to re-fetch its
data cuz what is it doing on load?

273
00:15:18.110 --> 00:15:19.670
It's getting all the todos.

274
00:15:19.670 --> 00:15:21.070
So we wanna re-validate.

275
00:15:21.070 --> 00:15:22.290
This page is cached right now.

276
00:15:22.290 --> 00:15:26.401
So we wanna tell next.js, hey,
after we perform the server action,

277
00:15:26.401 --> 00:15:30.530
re-validate this page, which will
then tell it to go fetch its data.

278
00:15:30.530 --> 00:15:33.400
So that's what we wanna do
after our server action.

279
00:15:33.400 --> 00:15:34.220
So let's do that.

280
00:15:34.220 --> 00:15:35.590
So we can go into our action.

281
00:15:36.600 --> 00:15:39.868
And right after we do this, we can
just say, yeah, just do a revalidate.

282
00:15:39.868 --> 00:15:44.270
Right-click, revalidate path for
slash todos.

283
00:15:44.270 --> 00:15:48.990
You can think of this as a soft refresh.

284
00:15:48.990 --> 00:15:53.257
It's not gonna refresh the page, but
it's gonna expire the cache of that page,

285
00:15:53.257 --> 00:15:55.597
which then forces it to
go refresh its data.

286
00:15:59.619 --> 00:16:00.780
So let's do that.

287
00:16:00.780 --> 00:16:04.380
So now when I add a new todo,
clean my room,

288
00:16:04.380 --> 00:16:08.294
it shows up on the page
without me refreshing.

289
00:16:12.902 --> 00:16:16.229
That's because we did a server action
on the server,that changed something in

290
00:16:16.229 --> 00:16:17.110
the database.

291
00:16:17.110 --> 00:16:18.480
We waited for that to happen.

292
00:16:18.480 --> 00:16:22.527
And then we told next.js,
delete the cache for this page /todos,

293
00:16:22.527 --> 00:16:25.793
which then made it go fetch
its own data all over again,

294
00:16:25.793 --> 00:16:29.630
which then got an array of two todos and
put them on the page.

295
00:16:29.630 --> 00:16:32.622
The crazy thing about this is that this
would work even with JavaScript off,

296
00:16:32.622 --> 00:16:36.640
because there's no JavaScript on
the front end that's making this happen.

297
00:16:36.640 --> 00:16:39.220
It would work completely
without JavaScript.

298
00:16:39.220 --> 00:16:43.994
And that's the benefit of server actions
that you can have interactive apps

299
00:16:43.994 --> 00:16:45.830
without JavaScript.

300
00:16:45.830 --> 00:16:48.230
But you can also do this
without writing JavaScript.

301
00:16:48.230 --> 00:16:49.520
Just use a pure HTML too.

302
00:16:49.520 --> 00:16:53.338
So it's kind of cool to see
next js come around to this and

303
00:16:53.338 --> 00:16:56.220
building this functionality.

304
00:16:56.220 --> 00:16:59.818
But we've had this functionality
before frameworks existed, but

305
00:16:59.818 --> 00:17:01.150
not in a structured way.

306
00:17:01.150 --> 00:17:04.380
So I guess this is kind of the best of
both worlds, having that structure but

307
00:17:04.380 --> 00:17:07.355
also kind of getting back to
the standards of the web, form actions,

308
00:17:07.355 --> 00:17:10.160
response objects, things that,
which I think is kind of cool.

309
00:17:11.600 --> 00:17:14.140
Okay, so yeah, any questions on that?

310
00:17:14.140 --> 00:17:17.830
When I first saw this,
I thought it was just pretty magical.

311
00:17:17.830 --> 00:17:20.550
But then I realized,
it's just like web standard stuff.

312
00:17:20.550 --> 00:17:25.408
But it is still pretty cool to be able to
use React purely as a templating engine

313
00:17:25.408 --> 00:17:30.340
and not have to rely on it for heavy
client-side stuff unless you opt into it.

314
00:17:30.340 --> 00:17:31.630
So it's kind of cool.

315
00:17:33.800 --> 00:17:36.240
Yeah, but any questions on that?

316
00:17:38.690 --> 00:17:41.200
No, so yeah, we can just keep
adding stuff right here, right?

317
00:17:41.200 --> 00:17:46.200
We can be, hello, yellow, whatever.

318
00:17:46.200 --> 00:17:47.520
And then if we refresh this,

319
00:17:47.520 --> 00:17:50.390
they should still be there
because we're pulling that down.

