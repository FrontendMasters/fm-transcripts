WEBVTT

1
00:00:00.250 --> 00:00:01.922
All righty, let's keep it rolling then.

2
00:00:01.922 --> 00:00:05.600
So next up is going to be middleware.

3
00:00:05.600 --> 00:00:07.320
So middleware is really cool.

4
00:00:07.320 --> 00:00:11.370
If you ever use Express or, I don't know,
any language ever, on the back end,

5
00:00:11.370 --> 00:00:12.949
you've heard of middleware.

6
00:00:12.949 --> 00:00:17.824
Best way I can describe middleware,
it's just like plugins that run

7
00:00:17.824 --> 00:00:21.705
before your last function runs,
basically, right?

8
00:00:21.705 --> 00:00:27.230
If I'm driving a car and I'm trying
to navigate it to the grocery store,

9
00:00:27.230 --> 00:00:32.487
a middleware would be everywhere
I had to stop before I got there.

10
00:00:32.487 --> 00:00:36.993
First I gotta stop here, and then I gotta
stop here, and I gotta get gas, and

11
00:00:36.993 --> 00:00:38.770
then there's traffic here.

12
00:00:38.770 --> 00:00:42.224
And then I got pulled over for speeding,
and then [LAUGH] this other thing,

13
00:00:42.224 --> 00:00:44.090
and then now I made it to the store.

14
00:00:44.090 --> 00:00:46.920
Okay, everything in between you
getting to the store was middleware.

15
00:00:48.080 --> 00:00:52.518
And basically, what we can do with
Next.js, so I told you about edge runtime,

16
00:00:52.518 --> 00:00:55.480
you're running on the edge,
which is a CDN.

17
00:00:55.480 --> 00:00:58.770
Middleware is a function
that runs on the edge.

18
00:00:58.770 --> 00:01:03.259
It basically will protect
your serverless functions, or

19
00:01:03.259 --> 00:01:06.932
actually, your entire app,
even your pages.

20
00:01:06.932 --> 00:01:10.948
They won't even know someone was asking
for them because the middleware will stop

21
00:01:10.948 --> 00:01:14.040
the the traffic first and
run whatever analysis you want.

22
00:01:14.040 --> 00:01:15.709
You can check authentication,

23
00:01:15.709 --> 00:01:19.800
you can redirect, you can do all different
types of things in the middleware.

24
00:01:19.800 --> 00:01:21.680
So let's talk about that.

25
00:01:21.680 --> 00:01:25.050
In order to do that,
it's actually quite simple.

26
00:01:25.050 --> 00:01:32.407
On a route of your repo, you just do
a middleware.ts, it's pretty simple.

27
00:01:35.744 --> 00:01:43.928
And it's pretty much the exact
same thing as a service function.

28
00:01:43.928 --> 00:01:46.191
You can think of it that way, it's like
a service function that runs on an edge.

29
00:01:46.191 --> 00:01:50.341
So the syntax is mostly the same for
the function itself,

30
00:01:50.341 --> 00:01:55.796
although there's some special stuff
about when you want to match things.

31
00:01:55.796 --> 00:01:59.499
Maybe you don't want the middleware
to run on every single route,

32
00:01:59.499 --> 00:02:03.268
because maybe this middleware is
only checking authentication and

33
00:02:03.268 --> 00:02:06.390
there are some public pages
you don't want it to check.

34
00:02:07.400 --> 00:02:09.092
Maybe you do want it to
run on every route and

35
00:02:09.092 --> 00:02:11.700
you wanna write that logic
yourself inside the function.

36
00:02:11.700 --> 00:02:15.000
There's a lot of ways to go about it,
there's really not one way.

37
00:02:15.000 --> 00:02:18.819
The only thing you need to do is by
default is just export a function that

38
00:02:18.819 --> 00:02:21.750
returns a response at some point,
so let's do that.

39
00:02:21.750 --> 00:02:25.487
So we'll say export some
function called middleware,

40
00:02:25.487 --> 00:02:28.357
that's just gonna return some response.

41
00:02:28.357 --> 00:02:31.489
At one point it's gonna get a request.

42
00:02:32.711 --> 00:02:37.021
And I'm just gonna export
default middleware.

43
00:02:38.909 --> 00:02:40.479
Like that, right?

44
00:02:40.479 --> 00:02:42.500
That's the bare minimum you need to do.

45
00:02:42.500 --> 00:02:46.966
In the next example, you can see
this person is, I said this person,

46
00:02:46.966 --> 00:02:51.070
me [LAUGH], you can see that
I'm just redirecting to home.

47
00:02:51.070 --> 00:02:55.854
I'm just going to import NextResponse,
or not NextRequest,

48
00:02:55.854 --> 00:02:58.220
NextResponse, there we go.

49
00:02:58.220 --> 00:03:04.176
In this example, I'm just making every
single request that you send me,

50
00:03:04.176 --> 00:03:06.300
go home, no matter what.

51
00:03:06.300 --> 00:03:10.807
It's going to redirect every single thing,
no matter if you try to go the API,

52
00:03:10.807 --> 00:03:12.396
if you try to go to any page.

53
00:03:12.396 --> 00:03:15.633
And then what we also wanna do
is just export some matchers, so

54
00:03:15.633 --> 00:03:17.145
where do we want this to run?

55
00:03:17.145 --> 00:03:19.343
So there's a million ways to do this, so

56
00:03:19.343 --> 00:03:23.362
I'm just gonna just pull it up in the dock
so we can talk about all the ways.

57
00:03:23.362 --> 00:03:29.026
Cuz if you don't like regexs,
then I don't know what to tell you.

58
00:03:29.026 --> 00:03:33.726
[LAUGH] Because it's
a lot of regexs in here,

59
00:03:33.726 --> 00:03:38.435
but that's what ChatGPT is for,
so [LAUGH].

60
00:03:38.435 --> 00:03:43.082
So basically, if you export a config
object, you can put a matcher in here.

61
00:03:43.082 --> 00:03:46.578
I'm glad that they did make an update this
time around that you don't have to use

62
00:03:46.578 --> 00:03:47.158
regexs now.

63
00:03:47.158 --> 00:03:50.765
You can do a glob pattern to be like,
yeah, I just wanna, in this case,

64
00:03:50.765 --> 00:03:54.783
I want to match anything that's
/about/:path, anything after that path, or

65
00:03:54.783 --> 00:03:57.710
/dashboard/:path, which is really cool.

66
00:03:57.710 --> 00:04:02.748
But as you can see here,
you can also return a regex that matches

67
00:04:02.748 --> 00:04:07.422
all requests except for
the one starting with API or this.

68
00:04:07.422 --> 00:04:09.708
You probably don't wanna do the regexs,

69
00:04:09.708 --> 00:04:12.870
especially now that you can
do the matching this way.

70
00:04:12.870 --> 00:04:15.820
The simple way also is
just do it in your code.

71
00:04:15.820 --> 00:04:18.790
You can honestly just do it in here.

72
00:04:18.790 --> 00:04:22.999
You can look at the request object and
be like, if the request is this path, or

73
00:04:22.999 --> 00:04:26.720
I have an array of URLs that I know I
wanna protect, if it's one of these,

74
00:04:26.720 --> 00:04:29.650
then redirect somewhere else,
or do whatever you want.

75
00:04:29.650 --> 00:04:32.513
You can check the headers,
you can check the cookies here,

76
00:04:32.513 --> 00:04:36.307
you can do whatever you want here, and
you can protect, redirect, rewrite.

77
00:04:36.307 --> 00:04:39.010
Anything a response object can do,
you can do in here.

78
00:04:39.010 --> 00:04:40.720
So it's actually pretty cool.

79
00:04:40.720 --> 00:04:45.580
So yeah, I'm gonna actually get this to
run though, so let's see what happens.

80
00:04:48.231 --> 00:04:49.361
What happens if I do it that way?

81
00:04:52.009 --> 00:04:54.960
No, it just doesn't like that at all.

82
00:04:54.960 --> 00:04:58.440
I think that you have to do a config,
let's see.

83
00:04:58.440 --> 00:05:01.588
Let's say matcher.

84
00:05:01.588 --> 00:05:07.739
And let's say /todos, what do we have?

85
00:05:07.739 --> 00:05:12.265
Slash, yeah, /todos/path.

86
00:05:12.265 --> 00:05:17.358
No, I think it's a /todo, /todos,
let's see what happens on that.

87
00:05:21.059 --> 00:05:26.980
/todos, yeah, you can see it went
home when I tried to go /todos.

88
00:05:26.980 --> 00:05:31.290
I click on todos, it just stays home,
it won't let me go, right?

89
00:05:31.290 --> 00:05:31.987
That's the intention.

90
00:05:33.819 --> 00:05:37.135
And it happens before
the request even comes in.

91
00:05:39.777 --> 00:05:41.122
Yeah, any questions on that?

92
00:05:42.735 --> 00:05:44.201
Yes.

93
00:05:44.201 --> 00:05:48.941
&gt;&gt; Can you distribute your middleware
manually through the app and

94
00:05:48.941 --> 00:05:51.760
then import them into one, the root?

95
00:05:52.870 --> 00:05:58.510
&gt;&gt; Distribute your middleware,
like middleware functions is the question.

96
00:05:58.510 --> 00:06:01.483
I'm guessing they're asking, can I take
the logic that I would have in this

97
00:06:01.483 --> 00:06:03.680
function and have it somewhere else and
then import it?

98
00:06:04.690 --> 00:06:08.330
Yes, you totally can, but
as far as the middleware function itself,

99
00:06:08.330 --> 00:06:10.310
it only lives on the root.

100
00:06:10.310 --> 00:06:14.471
This is the only file other than
the next.config.js that should live on

101
00:06:14.471 --> 00:06:19.070
the root of your project, and that's
where Next.js is expecting it to be.

102
00:06:19.070 --> 00:06:20.817
If you put it anywhere else,
I don't think it'll work.

103
00:06:20.817 --> 00:06:27.002
&gt;&gt; Does file streaming work
the same in the API directory?

104
00:06:27.002 --> 00:06:30.983
&gt;&gt; File streaming, does file streaming
work the same in the API directory?

105
00:06:32.890 --> 00:06:35.720
When I hear file streaming,
I think of so many different things.

106
00:06:35.720 --> 00:06:42.410
I don't know if they mean
a streaming response.

107
00:06:42.410 --> 00:06:48.466
If that's the case, no,
it works entirely differently.

108
00:06:48.466 --> 00:06:51.781
Because the response object is
completely different now and

109
00:06:51.781 --> 00:06:53.276
it follows a web standard,

110
00:06:53.276 --> 00:06:57.377
you'd have to use a iterator to be able
to do something like that to stream.

111
00:06:57.377 --> 00:06:58.570
Let me see if I have an example of that.

112
00:06:59.930 --> 00:07:01.950
No, it's not this example,
this is something else.

113
00:07:01.950 --> 00:07:03.343
I don't even have an example in here,

114
00:07:03.343 --> 00:07:06.350
I would have to show you some code
that I wrote for something else.

115
00:07:06.350 --> 00:07:07.919
If that's what they were talking about,
no,

116
00:07:07.919 --> 00:07:10.352
it is completely different because
the response object is different.

117
00:07:10.352 --> 00:07:13.097
If they were talking
about streaming a file,

118
00:07:13.097 --> 00:07:16.493
as in uploading a file to the server and
streaming that,

119
00:07:16.493 --> 00:07:21.134
that also will be very different because
it's a different request object.

120
00:07:21.134 --> 00:07:24.641
And how you handle that with
the standard request object is way

121
00:07:24.641 --> 00:07:29.100
different than how you would have
handled it with Next.js' request object.

122
00:07:29.100 --> 00:07:34.552
So yes, anything involving something very
tedious and specific as streaming is

123
00:07:34.552 --> 00:07:39.696
gonna be way different in that API folder
than it was in the pages API folder.

