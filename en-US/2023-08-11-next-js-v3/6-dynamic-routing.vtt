WEBVTT

1
00:00:00.200 --> 00:00:04.073
So far, we've only been talking about
static routing, that basically this means

2
00:00:04.073 --> 00:00:06.910
we know the name of the route that
we wanna go to ahead of time.

3
00:00:06.910 --> 00:00:08.860
So therefore,
we can make a folder for it, but

4
00:00:08.860 --> 00:00:12.220
what if you don't know the name of the
route that you wanna go to ahead of time?

5
00:00:12.220 --> 00:00:17.600
What if it's like, slash this user's ID or
slash this blog post title?

6
00:00:17.600 --> 00:00:19.640
And you just, it's dynamic,

7
00:00:19.640 --> 00:00:24.280
you don't know the source of that
segment It can come from a database.

8
00:00:24.280 --> 00:00:29.130
It can come from a CMS, it can come
from an API call, it's a dynamic route.

9
00:00:29.130 --> 00:00:33.760
So we've already solved this, this isn't
new to Next.js, every router system has

10
00:00:33.760 --> 00:00:38.410
the ability to use route params to be able
to say, this part of the URL is dynamic.

11
00:00:38.410 --> 00:00:43.430
It's a parameter, that's nothing new,
so how do you show that in folders?

12
00:00:43.430 --> 00:00:47.894
It's actually really cool, so
in order to like make something dynamic,

13
00:00:47.894 --> 00:00:50.852
what we can do is we can
just make another folder.

14
00:00:50.852 --> 00:00:53.135
Because every time you make a new
segment you have to make another folder.

15
00:00:53.135 --> 00:00:57.509
So let's say in the case of docs
I want a documentation website,

16
00:00:57.509 --> 00:01:01.400
that's like slash docs and
then everything after docs.

17
00:01:01.400 --> 00:01:02.220
It could be anything,

18
00:01:02.220 --> 00:01:05.060
I don't know what it's gonna be
cuz I haven't written a docs yet.

19
00:01:05.060 --> 00:01:06.615
But I know it's gonna be the same layout,

20
00:01:06.615 --> 00:01:08.780
it's just the content's
gonna be different.

21
00:01:08.780 --> 00:01:11.911
So I just wanna make one component
that represents every single possible

22
00:01:11.911 --> 00:01:14.590
documentation page that's
going to be generated.

23
00:01:14.590 --> 00:01:18.940
But the URL I want to be different
depending on what page you're on.

24
00:01:18.940 --> 00:01:20.351
So I can make that a parameter and

25
00:01:20.351 --> 00:01:22.871
the way you can do that is you
can use the square brackets.

26
00:01:22.871 --> 00:01:27.000
So I can say square brackets and then put
whatever name of parameter that I want.

27
00:01:27.000 --> 00:01:31.851
So, in this case, I could put id,
I could put title, whatever you want,

28
00:01:31.851 --> 00:01:34.220
so, let's just say we put id here.

29
00:01:34.220 --> 00:01:37.394
So, I have a folder called id, and

30
00:01:37.394 --> 00:01:43.340
then now I can go into the folder
itself and now make a page.tsx.

31
00:01:43.340 --> 00:01:50.340
And now I'll have a Docs page,
is this one also called Docs page?

32
00:01:50.340 --> 00:01:54.321
Yeah, actually, I'm just gonna copy
this one, just put it there, and

33
00:01:54.321 --> 00:01:59.080
I'll just call this like Docs like ID page
or something, just to make it different.

34
00:01:59.080 --> 00:02:03.563
So now because I have this dynamic route
parameter in here in my folder with

35
00:02:03.563 --> 00:02:08.500
the square brackets, I'm able to route
to it with any arbitrary value, right?

36
00:02:08.500 --> 00:02:12.885
So now I can go here and
I can say docs, not that,

37
00:02:12.885 --> 00:02:17.180
the hux, and then let's see,
I can go there.

38
00:02:17.180 --> 00:02:20.454
The original one loads up because I still
have a page here, so that loads up,

39
00:02:20.454 --> 00:02:21.230
it's good to go.

40
00:02:22.510 --> 00:02:27.605
But now I can go to slash literally
anything and that one loads up

41
00:02:27.605 --> 00:02:34.130
to let me change the name of it so
you can actually see, this is the ID page.

42
00:02:34.130 --> 00:02:36.010
There we go, so
now you can see we're on the ID page.

43
00:02:37.460 --> 00:02:38.314
All right, and

44
00:02:38.314 --> 00:02:42.800
it doesn't matter what value I put in
here after Docs because it's a parameter.

45
00:02:42.800 --> 00:02:44.744
I can literally put anything here and

46
00:02:44.744 --> 00:02:47.641
it'll still stay on this
page because it's dynamic.

47
00:02:49.899 --> 00:02:51.771
So that makes sense?

48
00:02:51.771 --> 00:02:52.305
All right,

49
00:02:52.305 --> 00:02:56.154
every every router has this if you've ever
made anything with any back end language,

50
00:02:56.154 --> 00:03:00.260
if you've ever configured a front end
router, it's pretty much the same thing.

51
00:03:00.260 --> 00:03:06.211
It's just that you have this weird
thing here which you'll get used to,

52
00:03:06.211 --> 00:03:08.120
I think, I hope so.

53
00:03:08.120 --> 00:03:11.442
So remember you could put
whatever you want here and

54
00:03:11.442 --> 00:03:15.160
what you put here is going to
determine what you access.

55
00:03:15.160 --> 00:03:17.073
Cuz if you're gonna put something here,

56
00:03:17.073 --> 00:03:19.869
I'm guessing you're gonna need
to do something with that.

57
00:03:19.869 --> 00:03:24.231
This is why people put like IDs in URL
because it's some unique identifier that

58
00:03:24.231 --> 00:03:28.145
they can use to then go fetch the data
necessary for that page, right?

59
00:03:28.145 --> 00:03:31.821
Cuz if you think about it,
any page that's going to be

60
00:03:31.821 --> 00:03:36.735
rendering on a dynamic route is
almost acting like a template, right?

61
00:03:36.735 --> 00:03:39.424
Cuz it's gonna be the same page for

62
00:03:39.424 --> 00:03:43.430
every single variation of
whatever this value is.

63
00:03:43.430 --> 00:03:47.722
So, if I'm Facebook and I'm going
to slash profile slash user's ID,

64
00:03:47.722 --> 00:03:52.094
we all have the same profile pages
that the data owner that is different.

65
00:03:52.094 --> 00:03:54.950
So how does that page
know what data to fetch?

66
00:03:54.950 --> 00:03:59.352
Well, that's why you put something unique
in the URL here so that you can grab and

67
00:03:59.352 --> 00:04:02.681
then go get the data specifically for
that in this case user.

68
00:04:02.681 --> 00:04:05.957
And then that way you can render
it inside of this template, so

69
00:04:05.957 --> 00:04:07.289
you need access to that.

70
00:04:07.289 --> 00:04:11.870
So the way you can do that is if the page
that you're on is underneath a dynamic

71
00:04:11.870 --> 00:04:14.890
segment like this,
you get a prop called params.

72
00:04:16.710 --> 00:04:19.923
And the params is an object
that's going to have properties

73
00:04:19.923 --> 00:04:24.330
on it that are named the same as
the params you created in a folder.

74
00:04:24.330 --> 00:04:29.583
So in this case,
params.id should show us the id parameter

75
00:04:29.583 --> 00:04:34.638
that we passed into the route,
so let's check that out.

76
00:04:37.036 --> 00:04:39.730
Oops, not here.

77
00:04:39.730 --> 00:04:44.295
So you can see I have anything, cuz I
typed in anything, if I type in here,

78
00:04:44.295 --> 00:04:47.110
you can see it says here, right.

79
00:04:47.110 --> 00:04:52.357
So this is how the page becomes dynamic,
so now I can take that unique value and

80
00:04:52.357 --> 00:04:56.581
go get some data with it, or
talk to a CMS, or make an API call.

81
00:04:56.581 --> 00:05:00.670
Whatever I got to do to make sure
the thing that I'm showing on this page is

82
00:05:00.670 --> 00:05:03.768
supposed to be for
this page that's matching this ID.

83
00:05:05.969 --> 00:05:06.781
That makes sense?

84
00:05:09.862 --> 00:05:11.820
Any questions on that?

85
00:05:11.820 --> 00:05:14.460
&gt;&gt; Are multiple parameters allowed?

86
00:05:14.460 --> 00:05:19.330
&gt;&gt; It's a great question, we're
getting into that right now, so yeah,

87
00:05:19.330 --> 00:05:21.530
there's no questions on this.

88
00:05:21.530 --> 00:05:23.996
So yeah, basically that let's say
you wanna have multiple parameters.

89
00:05:23.996 --> 00:05:28.622
Let's say, actually all my
documentation pages are like

90
00:05:28.622 --> 00:05:32.385
slash ID slash title or
something weird like that.

91
00:05:32.385 --> 00:05:35.252
So then what I would do is I
would make a new folder in ID and

92
00:05:35.252 --> 00:05:38.740
then I make this one dynamic and
I would call this one title.

93
00:05:38.740 --> 00:05:41.270
Right, and then I'm just actually
just going to move this one up here.

94
00:05:42.690 --> 00:05:48.150
So now I have the page inside of slash
ID slash title, both are dynamic.

95
00:05:48.150 --> 00:05:51.843
And guess what,
I can still get access to both of those,

96
00:05:51.843 --> 00:05:57.560
I can still say params.title, and still
have them here, and still be good to go.

97
00:05:57.560 --> 00:06:02.283
But now, as you can see I get a 404
because there's no longer a page for

98
00:06:02.283 --> 00:06:03.490
a slash ID.

99
00:06:03.490 --> 00:06:05.854
So it's like,
I don't know what that is, so

100
00:06:05.854 --> 00:06:08.110
I would have to go to
like slash here there.

101
00:06:09.440 --> 00:06:13.543
And then now, I get that route that has
both of those parameters in it here there.

102
00:06:16.884 --> 00:06:18.729
And you can do that forever,
you can just nest it.

103
00:06:18.729 --> 00:06:21.626
So This is cool, but like maybe,

104
00:06:21.626 --> 00:06:26.901
maybe I don't really care what
the slugs are because that's

105
00:06:26.901 --> 00:06:31.670
not gonna change the design or
the layout of this page.

106
00:06:31.670 --> 00:06:35.860
It's always gonna be the same no matter
what, how many paths come after docs.

107
00:06:35.860 --> 00:06:38.557
I'm always gonna use the same page, so

108
00:06:38.557 --> 00:06:42.992
there's a shortcut I could do cuz
maybe you have a variable URL.

109
00:06:42.992 --> 00:06:47.280
Like maybe one URL might just be slash ID,
maybe another URL might be slash ID

110
00:06:47.280 --> 00:06:51.568
slash title, maybe another URL slash
id slash title slash something else.

111
00:06:51.568 --> 00:06:54.491
But it's regardless because you
still wanna show just this page,

112
00:06:54.491 --> 00:06:56.820
you're still gonna show the same design.

113
00:06:56.820 --> 00:07:01.218
The same layout, but just different
content, so instead of like trying

114
00:07:01.218 --> 00:07:05.270
to account for those variable length URLs,
you can do a shortcut.

115
00:07:05.270 --> 00:07:10.030
So I'll show you the shortcut, so I'm
just gonna just copy this component right

116
00:07:10.030 --> 00:07:12.767
quick cuz I'm just gonna
delete this folder.

117
00:07:12.767 --> 00:07:16.669
And this, what I'm making now is gonna
be part of the app we're working on.

118
00:07:16.669 --> 00:07:20.510
That was most everything, whoa what,
okay, it dropped me in the next folder.

119
00:07:20.510 --> 00:07:22.043
There we go, so this is the output,

120
00:07:22.043 --> 00:07:25.640
I don't know why it always drops me here
when I delete things, it's kind of weird.

121
00:07:26.640 --> 00:07:32.912
So now in the docs page, I'm going
to instead of having ID like this,

122
00:07:32.912 --> 00:07:40.173
instead I'm going to do something like
I'm gonna put three dots in front of it.

123
00:07:40.173 --> 00:07:44.144
So, by putting three dots in front of the
ID, let me zoom in on it so you can see,

124
00:07:44.144 --> 00:07:47.095
so basically what this is saying is,
this is saying like,

125
00:07:47.095 --> 00:07:48.923
this is called a catch-all route.

126
00:07:48.923 --> 00:07:53.625
This means every route,
no matter how many segments,

127
00:07:53.625 --> 00:07:57.520
after ID,
show this page I'm about to make.

128
00:07:57.520 --> 00:08:01.894
Okay, so it's catching every single
segment every single route after ID.

129
00:08:04.500 --> 00:08:07.746
And then I'm also I'm just gonna delete
this page TSX that I have in Docs cuz I

130
00:08:07.746 --> 00:08:11.014
wanna demonstrate something, so
I'm just gonna delete this page as well.

131
00:08:11.014 --> 00:08:12.180
So let's just say get out here.

132
00:08:14.250 --> 00:08:20.622
Okay, and now inside of Doc slash this
catch all Id, I'm gonna make a new page.

133
00:08:25.142 --> 00:08:29.621
Like that,
I'm just gonna paste this in here, And

134
00:08:29.621 --> 00:08:32.215
no matter where I go as far as URL,

135
00:08:32.215 --> 00:08:38.166
it should allow me to navigate with
one caveat, and we'll talk about that.

136
00:08:38.166 --> 00:08:45.440
And then so you can see I went to docs
here there, I can go another, some more.

137
00:08:45.440 --> 00:08:49.415
It doesn't matter, I can keep going and
it will always show this page, right and

138
00:08:49.415 --> 00:08:53.110
this is a great use case for actually
something like a documentation page.

139
00:08:53.110 --> 00:08:55.870
I actually think this is what Nextjs
does for their documentation page.

140
00:08:55.870 --> 00:09:01.428
If you just look at the segments in the
URL, they're like, variable and length.

141
00:09:01.428 --> 00:09:05.104
Some are two segments, some are four
segments, some are five segments,

142
00:09:05.104 --> 00:09:06.776
but the page is exactly the same.

143
00:09:06.776 --> 00:09:11.282
Nothing ever changes except for the
content that's in this middle lane here,

144
00:09:11.282 --> 00:09:14.916
so more than likely I would imagine
they would have just set up.

145
00:09:14.916 --> 00:09:17.146
A catchall route like this for

146
00:09:17.146 --> 00:09:22.147
their documentation versus make
one folder that has one segment.

147
00:09:22.147 --> 00:09:25.316
Make another folder that has two segments,
make another folder and

148
00:09:25.316 --> 00:09:27.439
then they're all the same exact component.

149
00:09:27.439 --> 00:09:28.650
Why would you do that?

150
00:09:28.650 --> 00:09:30.570
So you would probably just do it this way.

151
00:09:30.570 --> 00:09:35.028
The one caveat though is that like
now what if I just wanna go to docs?

152
00:09:37.923 --> 00:09:41.172
I can't just go to docs anymore, right?

153
00:09:41.172 --> 00:09:45.931
But I can go to anything here, so
to also make it inclusive to go to

154
00:09:45.931 --> 00:09:50.969
the segment that you're currently
on before the dynamic segment.

155
00:09:50.969 --> 00:09:56.850
You can change this bracket dot dot
to be double bracket, like that.

156
00:09:56.850 --> 00:10:01.421
So if you put two brackets around it, now
it's inclusive and it will include docs,

157
00:10:01.421 --> 00:10:05.680
so it'll show this page if someone
just goes to docs as well.

158
00:10:05.680 --> 00:10:09.396
So now I can just go to docs or
should be able just to go to docs and

159
00:10:09.396 --> 00:10:10.758
that loads up as well.

160
00:10:15.058 --> 00:10:19.577
So again, a really good use case for this
is I have variable length segments that I

161
00:10:19.577 --> 00:10:22.849
don't wanna have to write a folder for
every single time.

162
00:10:22.849 --> 00:10:26.755
Because one maybe I don't know how many
the variation between those lens or

163
00:10:26.755 --> 00:10:28.057
two is just a lot of work.

164
00:10:28.057 --> 00:10:30.071
And then also even if I did do that,

165
00:10:30.071 --> 00:10:34.324
they're all literally the exact same
page with the exact same styling.

166
00:10:34.324 --> 00:10:37.605
The only thing different between them
is the content that's rendered, so

167
00:10:37.605 --> 00:10:40.988
save yourself some time you can just
make one component that represents every

168
00:10:40.988 --> 00:10:41.888
possible segment.

169
00:10:41.888 --> 00:10:46.877
In this group, without having to account
for all of them, wanting to demonstrate

170
00:10:46.877 --> 00:10:51.290
what the parameters look like when
you are inside of a catch all route.

171
00:10:51.290 --> 00:10:57.509
So if you go to the, in my case
the page inside of the dynamic segment

172
00:10:57.509 --> 00:11:03.520
that I have here with ID and
you were to just look at the params.

173
00:11:03.520 --> 00:11:08.840
If you were to log this,
because they're not named, right?

174
00:11:08.840 --> 00:11:12.585
They're variable length,
you only have one name and that's ID, but

175
00:11:12.585 --> 00:11:14.372
you might have variable length.

176
00:11:14.372 --> 00:11:16.701
So how do you represent that,
how do you see that?

177
00:11:16.701 --> 00:11:21.062
So let's just see what happens when
I just do docs with no parameter,

178
00:11:21.062 --> 00:11:23.854
you can see that it's
just an empty object.

179
00:11:23.854 --> 00:11:30.352
Then if I add just one for like, what
represents the ID so like, here is the ID,

180
00:11:30.352 --> 00:11:35.483
you can see that I have something
called ID and it's an array.

181
00:11:35.483 --> 00:11:41.496
And that's the, here's the ID, that's
the first parameter but then the more that

182
00:11:41.496 --> 00:11:47.787
I add, What ends up happening is that it
just gets put into that ID array, right?

183
00:11:47.787 --> 00:11:52.393
So that's a little different than before
where we had two different segments where

184
00:11:52.393 --> 00:11:54.840
we had like ID and then we had title.

185
00:11:54.840 --> 00:11:56.990
Those were two different keys
in the parameters object.

186
00:11:56.990 --> 00:12:00.147
When we do a catchall,
it's always gonna be in that that key for

187
00:12:00.147 --> 00:12:01.420
whatever you called it.

188
00:12:01.420 --> 00:12:02.910
In this case id, and

189
00:12:02.910 --> 00:12:08.100
it'll just be an array in the order
in which the segment came, right?

190
00:12:08.100 --> 00:12:11.193
So it was this slash this slash
this slash this slash this, so

191
00:12:11.193 --> 00:12:13.740
that's how you would get that information.

192
00:12:13.740 --> 00:12:14.826
Yeah, cool,

193
00:12:14.826 --> 00:12:20.085
other thing I forgot to mention is
when it comes to your Node version.

194
00:12:20.085 --> 00:12:25.107
Make sure you're at least on Node version
18 in order to run some of these features,

195
00:12:25.107 --> 00:12:28.545
seems like 20 also works,
which is the latest version.

196
00:12:28.545 --> 00:12:31.858
18 is a current LTS or
lifetime support version, so

197
00:12:31.858 --> 00:12:35.032
at least on 18 to get some
of these things to work.

198
00:12:35.032 --> 00:12:38.296
If you're on any version before that,
cannot guarantee that any of

199
00:12:38.296 --> 00:12:42.314
this stuff will work, if I got think you
have to use 18 according to the next docs.

200
00:12:43.532 --> 00:12:47.619
If you don't know how to switch versions
with Node, I highly recommend checking

201
00:12:47.619 --> 00:12:51.605
out the intro to Node.js course that we
have here, where I do talk about that.

202
00:12:51.605 --> 00:12:54.654
But TLDR, you can use something
called NVM, which stands for

203
00:12:54.654 --> 00:12:58.579
Node Version Manager, which allows you
to switch versions of your Node back and

204
00:12:58.579 --> 00:12:59.706
forth pretty easily.

205
00:12:59.706 --> 00:13:01.624
You can use that to download and
install and

206
00:13:01.624 --> 00:13:03.600
switch to any version
of Node that you want.

