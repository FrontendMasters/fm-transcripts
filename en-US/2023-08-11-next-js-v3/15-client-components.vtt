WEBVTT

1
00:00:00.460 --> 00:00:01.201
Client components.

2
00:00:01.201 --> 00:00:04.420
So client components are the same
things that you already know.

3
00:00:05.710 --> 00:00:06.913
You just have to opt into them.

4
00:00:06.913 --> 00:00:09.210
So let's make a client component.

5
00:00:09.210 --> 00:00:11.137
In fact,
let's just go into our components folder.

6
00:00:11.137 --> 00:00:13.120
We're gonna make a few components here.

7
00:00:13.120 --> 00:00:16.406
We're gonna make a to do component.

8
00:00:16.406 --> 00:00:20.159
We're going to make
a to do list component.

9
00:00:22.580 --> 00:00:23.900
Like that.

10
00:00:23.900 --> 00:00:25.567
And there's one more.

11
00:00:25.567 --> 00:00:27.137
I'm just gonna go cheat and see which one.

12
00:00:27.137 --> 00:00:30.516
So I'm actually doing the same
thing that's on here.

13
00:00:30.516 --> 00:00:31.315
Yeah, new to do form.

14
00:00:31.315 --> 00:00:32.700
So then I need to do form.

15
00:00:34.823 --> 00:00:39.350
So new to do form is a form where people
can type in and make a new to do.

16
00:00:39.350 --> 00:00:40.368
So there's some interactivity there.

17
00:00:40.368 --> 00:00:45.477
To-do just shows a to-do, it does
have an ability to be clicked on and

18
00:00:45.477 --> 00:00:47.740
have the to-do be completed.

19
00:00:47.740 --> 00:00:50.139
And the to-do list just shows to-dos.

20
00:00:50.139 --> 00:00:53.682
So out of all of those, any one of those
that probably has some interactions is

21
00:00:53.682 --> 00:00:56.130
probably a good candidate for
a client component.

22
00:00:56.130 --> 00:00:57.967
Because if there's interactivity,
there's probably JavaScript.

23
00:00:57.967 --> 00:01:03.067
And if there's JavaScript,
you can't run a server component,

24
00:01:03.067 --> 00:01:09.510
cuz you need JavaScript on the front
end to handle the interactivity.

25
00:01:09.510 --> 00:01:16.055
You just do the same thing
you normally do, right?

26
00:01:16.055 --> 00:01:21.460
Return a div with a form,
and something like that.

27
00:01:21.460 --> 00:01:23.705
You have your input, something like that.

28
00:01:23.705 --> 00:01:26.900
And then you did things you always do for
a form.

29
00:01:26.900 --> 00:01:30.278
You might have some state and
you got some update state thing here,

30
00:01:30.278 --> 00:01:31.430
that's a used state.

31
00:01:35.690 --> 00:01:36.213
And maybe it's just that.

32
00:01:36.213 --> 00:01:38.110
So, you could do that.

33
00:01:38.110 --> 00:01:39.135
There's nothing wrong with that.

34
00:01:39.135 --> 00:01:41.950
It's the same thing you've
always done in React.

35
00:01:41.950 --> 00:01:45.389
The only difference is now,
actually I'm just gonna show you.

36
00:01:45.389 --> 00:01:48.550
I'm not even going to,
I'll let next.js show us.

37
00:01:48.550 --> 00:01:52.688
I'm gonna take this component, I'm gonna
try to import it into the page right here.

38
00:01:52.688 --> 00:01:53.770
Let's see what happens.

39
00:01:53.770 --> 00:01:55.917
I'm not even gonna try to use it,
I'm just gonna import it.

40
00:01:55.917 --> 00:01:58.350
I'm just gonna say new to do form.

41
00:01:58.350 --> 00:02:00.606
I'm just gonna do that.
One thing you notice that it imported with

42
00:02:00.606 --> 00:02:02.170
this at sign.

43
00:02:02.170 --> 00:02:05.515
That's an alias that we have
set up in our tsconfig.

44
00:02:05.515 --> 00:02:07.640
Add just means route.

45
00:02:07.640 --> 00:02:10.519
That way we never have to do @.we
can just say from the route.

46
00:02:10.519 --> 00:02:11.890
Do this.

47
00:02:11.890 --> 00:02:15.398
You can set up as many aliases you want,
but here it is.

48
00:02:15.398 --> 00:02:19.505
So at anything,
start from the root and match.

49
00:02:19.505 --> 00:02:21.290
So that's what that's saying.

50
00:02:21.290 --> 00:02:22.730
So that's just a shortcut.

51
00:02:22.730 --> 00:02:23.379
So I'm gonna import that.

52
00:02:23.379 --> 00:02:30.220
And then I'm going to try to run
this don't get a problem yet.

53
00:02:30.220 --> 00:02:33.194
So now I'm going to try to go down here.

54
00:02:33.194 --> 00:02:38.101
And we're gonna say new to do form,
like so.

55
00:02:38.101 --> 00:02:39.212
Let's see if we get any.

56
00:02:39.212 --> 00:02:39.745
There we go.

57
00:02:39.745 --> 00:02:40.879
We got a problem.

58
00:02:42.040 --> 00:02:44.058
It immediately says you're importing
a component that needs used state.

59
00:02:44.058 --> 00:02:45.759
It only works in a client component but

60
00:02:45.759 --> 00:02:48.420
none of its parents
are marked with used client.

61
00:02:48.420 --> 00:02:50.020
So they're server components by default.

62
00:02:50.020 --> 00:02:53.880
So it's basically saying like, you wanna
do some JavaScript on the front end?

63
00:02:53.880 --> 00:02:55.117
You need to tell us that.

64
00:02:55.117 --> 00:02:58.299
So the only way to do that is to
go to the top and say use client.

65
00:02:59.821 --> 00:03:03.960
I like that, that's it.

66
00:03:03.960 --> 00:03:06.772
So now that we have that,
we're good to go now.

67
00:03:06.772 --> 00:03:12.592
So putting use client at the top of
a component, and then that basically

68
00:03:12.592 --> 00:03:19.150
obviously went to the regular React
components that you've been used to.

69
00:03:19.150 --> 00:03:22.144
You can do user fact you can do use state
you can do anything that you've normally

70
00:03:22.144 --> 00:03:24.882
ever done, and is gonna work exactly
the way you think it's gonna work.

71
00:03:24.882 --> 00:03:28.700
That doesn't mean this component
won't be server side rendered.

72
00:03:28.700 --> 00:03:33.499
It probably still will be server
side rendered like I don't know if I

73
00:03:33.499 --> 00:03:37.045
throw like,
let's see what happens if I do this.

74
00:03:38.500 --> 00:03:45.430
As I say log, log of storage You can
see right now I get an error, right?

75
00:03:45.430 --> 00:03:49.350
Even though it's a client component,
it's still rendered on the server, and

76
00:03:49.350 --> 00:03:52.979
that's because there's a difference
between server side rendering and

77
00:03:52.979 --> 00:03:54.348
a React server component.

78
00:03:54.348 --> 00:03:58.417
By default, next.js is gonna try to render
everything on the server, even this.

79
00:03:58.417 --> 00:04:02.910
So that doesn't mean I can go in here and
just start doing browser stuff.

80
00:04:02.910 --> 00:04:06.922
I would still have to check to make sure
that if I'm in the browser or not, but

81
00:04:06.922 --> 00:04:08.440
this is a client component.

82
00:04:08.440 --> 00:04:12.587
So remember, service side rendering is
this component is gonna be rendered

83
00:04:12.587 --> 00:04:17.081
on the server, but then there's gonna be
some JavaScript that gets downloaded.

84
00:04:17.081 --> 00:04:20.694
That is the exact replica of this
component that then takes over.

85
00:04:20.694 --> 00:04:23.912
But we couldn't get to that point yet
because I logged a window up here,

86
00:04:23.912 --> 00:04:26.770
which broke on the server cuz
there's no window on the server.

87
00:04:27.850 --> 00:04:28.760
That's server-side rendering.

88
00:04:28.760 --> 00:04:31.879
A server component is like the same thing,
except for

89
00:04:31.879 --> 00:04:35.290
there is no JavaScript on
the front end that takes over it.

90
00:04:35.290 --> 00:04:38.570
And the entire component is executed on
the server so I can do database things.

91
00:04:38.570 --> 00:04:45.520
I could come in here and
like log process or use Redis or a sync.

92
00:04:45.520 --> 00:04:49.005
I couldn't do that here.
This would not work cuz it's not executed

93
00:04:49.005 --> 00:04:50.440
on the server.

94
00:04:50.440 --> 00:04:51.712
It's just rendered on the server.

95
00:04:55.760 --> 00:04:57.580
So that's how you would do that.

96
00:04:57.580 --> 00:04:58.103
You would just use client.
And

97
00:04:58.103 --> 00:05:03.061
that also means you can use client
components in server components.

98
00:05:03.061 --> 00:05:04.399
And vice versa,

99
00:05:04.399 --> 00:05:10.110
the only thing that you can't do
is pass props between them, right?

100
00:05:10.110 --> 00:05:14.420
Or, I'm sorry, you can't pass
non-serializable props between them.

101
00:05:14.420 --> 00:05:16.000
So what does that mean?

102
00:05:16.000 --> 00:05:19.062
Let's say I have some props here
that says like, on change, right?

103
00:05:19.062 --> 00:05:23.540
It says on change prop, which means
it's probably a function, okay?

104
00:05:23.540 --> 00:05:24.684
Then I go to page and I like cool.

105
00:05:24.684 --> 00:05:27.060
Yeah on change, like it's passing.

106
00:05:27.060 --> 00:05:29.630
Let's pass in a function here.

107
00:05:29.630 --> 00:05:34.340
Like that, hello.

108
00:05:34.340 --> 00:05:36.943
Okay, and then we try to
refresh this it's got a break.

109
00:05:36.943 --> 00:05:40.460
Event handlers cannot be passed
to client component props.

110
00:05:40.460 --> 00:05:41.384
If you need interactivity,

111
00:05:41.384 --> 00:05:43.240
consider converting part of
this to a client component.

112
00:05:43.240 --> 00:05:45.480
And, it literally tells you.

113
00:05:45.480 --> 00:05:46.823
So, what does that actually mean?

114
00:05:46.823 --> 00:05:53.120
It's saying, the reason it says that is
because you cannot serialize a function.

115
00:05:53.120 --> 00:05:55.901
If you don't know what I mean by serialize
a function, this is what I mean.

116
00:05:55.901 --> 00:06:00.163
So, if I go into the console, and

117
00:06:00.163 --> 00:06:05.492
I do something like this, let's say I say

118
00:06:05.492 --> 00:06:10.518
json stringify this object, right and

119
00:06:10.518 --> 00:06:15.740
this object has a name called Moose.

120
00:06:15.740 --> 00:06:22.024
And then it has an action and this action
is a function that does something, okay?

121
00:06:22.024 --> 00:06:24.296
By stringify this what do you
think the JSON is gonna look like?

122
00:06:24.296 --> 00:06:28.000
&gt;&gt; Going to blow up, right?

123
00:06:29.390 --> 00:06:30.760
&gt;&gt; I mean, I guess it doesn't like that.

124
00:06:30.760 --> 00:06:35.600
Let me let me be specific,
since it doesn't like when I do that.

125
00:06:35.600 --> 00:06:38.186
Okay, yeah, it's totally gonna blow up.

126
00:06:38.186 --> 00:06:41.420
Well, hold on,
I guess I'm missing a bracket here.

127
00:06:42.990 --> 00:06:45.387
There we go, okay.

128
00:06:45.387 --> 00:06:51.510
So what it actually did was it didn't
carry this over, this function, right?

129
00:06:51.510 --> 00:06:56.730
Cuz you can't serialize logic,
at least not this way, not with stringify.

130
00:06:56.730 --> 00:06:59.124
There are ways you can do it,
and some people do it,

131
00:06:59.124 --> 00:07:01.490
but by default it's not
gonna get carried over.

132
00:07:01.490 --> 00:07:04.340
And because you have a client
component and a server component,

133
00:07:04.340 --> 00:07:06.941
that communication has to go
across the network barrier.

134
00:07:06.941 --> 00:07:08.750
So it has to go through the network.

135
00:07:08.750 --> 00:07:10.830
And to go through the network,
you need to be serialized.

136
00:07:10.830 --> 00:07:14.160
Cuz you can't just send
code through the network.

137
00:07:14.160 --> 00:07:15.965
It has to be something that is understood.

138
00:07:15.965 --> 00:07:17.590
Data, in this case JSON.

139
00:07:17.590 --> 00:07:20.990
But when you try to stringify a function,
yeah, it's not gonna be there.

140
00:07:20.990 --> 00:07:24.900
So this is why you can't pass functions
as props cuz they can't be serialized.

141
00:07:24.900 --> 00:07:28.262
There are other values that
can't be serialized as well.

142
00:07:28.262 --> 00:07:32.335
Dates, you can't serialize a date,
you can't serialize recursive things,

143
00:07:32.335 --> 00:07:34.360
things that are like cyclic in nature.

144
00:07:34.360 --> 00:07:38.106
So an object that points to itself
somewhere, can't serialize that.

145
00:07:38.106 --> 00:07:40.660
So things like that you have
restrictions around that.

146
00:07:40.660 --> 00:07:42.077
So, those are the only caveats.

