WEBVTT

1
00:00:00.110 --> 00:00:04.149
Okay, well, then I'll talk about some
things that I think you should look into

2
00:00:04.149 --> 00:00:05.790
next to further your learning.

3
00:00:05.790 --> 00:00:08.810
So the number one thing,
obviously, next js docs.

4
00:00:08.810 --> 00:00:09.620
It's amazing.

5
00:00:09.620 --> 00:00:11.070
It's actually quite good.

6
00:00:11.070 --> 00:00:11.900
It's very thorough.

7
00:00:11.900 --> 00:00:14.108
And if you were to read
through most of this,

8
00:00:14.108 --> 00:00:17.650
you will find out that we probably
only covered 30, 40% of it.

9
00:00:17.650 --> 00:00:20.362
There's so much more in here,
it's ridiculous.

10
00:00:20.362 --> 00:00:22.918
But a lot of it has to
do with performance and

11
00:00:22.918 --> 00:00:26.750
alternative ways of doing
the same thing and configuration.

12
00:00:26.750 --> 00:00:32.620
So, one thing that we did not talk
about too much was, let me see.

13
00:00:32.620 --> 00:00:36.710
We did not talk about some of the other
advanced routing things you can do.

14
00:00:36.710 --> 00:00:43.392
So we didn't talk about, where is it at,
parallel routes, which uses the @ sign.

15
00:00:43.392 --> 00:00:46.772
My goodness, yeah, we didn't talk about
that because it's actually quite advanced

16
00:00:46.772 --> 00:00:50.170
and there's really not a good use case for
it, other than some really advanced thing.

17
00:00:50.170 --> 00:00:52.320
But if you wanna know more about that,
you can look into it.

18
00:00:52.320 --> 00:00:56.230
I'll probably cover it in the full
stack course, actually, I think I will.

19
00:00:56.230 --> 00:00:59.203
We also did not talk about
intercepting routes,

20
00:00:59.203 --> 00:01:01.966
which works very well
with parallel routes.

21
00:01:01.966 --> 00:01:05.991
And this is your ability to add
this stuff into your file names.

22
00:01:05.991 --> 00:01:11.938
If the dots drove you crazy before,
these are 100% gonna drive you crazy.

23
00:01:11.938 --> 00:01:15.246
It's actually quite
difficult to reason about,

24
00:01:15.246 --> 00:01:18.720
took me a week to actually
understand what this was.

25
00:01:18.720 --> 00:01:22.874
I actually had to go look at the pull
requests in which the person suggested

26
00:01:22.874 --> 00:01:27.497
this feature on the team to understand the
philosophy behind why this was a thing,

27
00:01:27.497 --> 00:01:29.800
and only then did I understand it.

28
00:01:29.800 --> 00:01:33.900
So, but at face value,
I did not understand this.

29
00:01:33.900 --> 00:01:35.180
So it was quite difficult.

30
00:01:35.180 --> 00:01:37.112
So I didn't wanna talk about that today.

31
00:01:37.112 --> 00:01:40.186
[LAUGH] Yeah, and there's some
other stuff in here as well, but

32
00:01:40.186 --> 00:01:42.000
those are some of the big ones.

33
00:01:42.000 --> 00:01:46.820
Other things I didn't talk about,
optimization things like images.

34
00:01:46.820 --> 00:01:50.032
I didn't really talk about this because,
I mean, at the end of the day,

35
00:01:50.032 --> 00:01:52.682
the image component works like
a regular image component.

36
00:01:52.682 --> 00:01:56.005
But then you could do all this other
crazy stuff with it for optimizations,

37
00:01:56.005 --> 00:01:59.350
but I didn't feel it was
necessary until you needed it.

38
00:01:59.350 --> 00:02:01.090
There's some fun stuff here.

39
00:02:01.090 --> 00:02:04.793
Lazy loading is pretty big, so you can
dynamically load in other components,

40
00:02:04.793 --> 00:02:06.400
which is actually pretty cool.

41
00:02:06.400 --> 00:02:10.805
This works great for client side things
in which you don't want to show and

42
00:02:10.805 --> 00:02:15.156
therefore download JavaScript for
things that aren't on the page yet.

43
00:02:15.156 --> 00:02:19.677
So if you have some type of component that
doesn't get shown until some interaction

44
00:02:19.677 --> 00:02:21.874
happens, you can lazily import that and

45
00:02:21.874 --> 00:02:24.405
then render it when
the interaction happens.

46
00:02:24.405 --> 00:02:27.551
Which will delay the download of that
JavaScript and that component showing up,

47
00:02:27.551 --> 00:02:29.043
which should make your loads faster.

48
00:02:29.043 --> 00:02:33.153
So it's actually really cool to
be able to something like that.

49
00:02:33.153 --> 00:02:38.200
We didn't talk about, let me see,
is there something in data fetch?

50
00:02:38.200 --> 00:02:40.940
Yeah, we didn't talk about caching and
fetching too much.

51
00:02:40.940 --> 00:02:42.900
I mean, I did, but
I didn't get into the examples of it.

52
00:02:42.900 --> 00:02:44.860
You should check it out.

53
00:02:44.860 --> 00:02:45.760
It's really cool.

54
00:02:45.760 --> 00:02:46.970
It's very fascinating.

55
00:02:46.970 --> 00:02:50.482
I think the entire framework
is built on this concept, so

56
00:02:50.482 --> 00:02:53.129
they're putting a lot of money into that.

57
00:02:54.770 --> 00:02:56.410
Those are probably the big ones.

58
00:02:56.410 --> 00:02:59.469
There's still some some smaller
ones in there, but I think for

59
00:02:59.469 --> 00:03:01.730
the most part those
are probably the big ones.

60
00:03:01.730 --> 00:03:02.720
You can look into the compiler.

61
00:03:02.720 --> 00:03:05.880
You can look at the turbo pack if you
want, but it's probably not necessary.

62
00:03:05.880 --> 00:03:10.625
There's a crazy amount of configuration
you can do in the next config,

63
00:03:10.625 --> 00:03:13.840
I mean, I'm still scrolling, it's a lot.

64
00:03:13.840 --> 00:03:15.888
So, [LAUGH] you can do a lot
in the next.config, and

65
00:03:15.888 --> 00:03:19.520
that's mostly because you're interacting
with the compiler at that point.

66
00:03:19.520 --> 00:03:24.520
And if it's Webpack, which if I look
at the output of, where did it go?

67
00:03:24.520 --> 00:03:27.300
Yeah, it looks like it's
Webpack by default now still.

68
00:03:27.300 --> 00:03:29.140
And I know Webpack has
a million options you can do.

69
00:03:29.140 --> 00:03:32.460
So you can check that out.

70
00:03:32.460 --> 00:03:35.709
And then here are the other built-in
functions that we didn't talk about.

71
00:03:35.709 --> 00:03:40.223
I didn't talk about redirects,
not found, use path name,

72
00:03:40.223 --> 00:03:43.510
use router, use selected layout segment.

73
00:03:43.510 --> 00:03:46.613
There's a lot of functions in here
that next js has packaged that

74
00:03:46.613 --> 00:03:47.710
we did not talk about.

75
00:03:47.710 --> 00:03:50.050
So, you can look at draft mode.

76
00:03:50.050 --> 00:03:53.714
Don't get me started about draft mode,
it's actually quite amazing, but

77
00:03:53.714 --> 00:03:56.420
you need a CMS in order to
actually [LAUGH] understand it.

78
00:03:56.420 --> 00:03:57.720
We're not doing CMSs today.

79
00:03:58.760 --> 00:03:59.770
So it's really cool.

80
00:03:59.770 --> 00:04:02.695
They have a something for
everything most likely, so

81
00:04:02.695 --> 00:04:05.440
I highly recommend checking it out.

82
00:04:05.440 --> 00:04:08.563
Other than that,
I do recommend just taking this logic, and

83
00:04:08.563 --> 00:04:12.562
I'm a true believer the best way of
learning something is just sitting down.

84
00:04:12.562 --> 00:04:16.450
Deciding on building something that's
probably, I wouldn't say too far

85
00:04:16.450 --> 00:04:20.397
out of your skill set, but far enough
to where you couldn't just sit down and

86
00:04:20.397 --> 00:04:23.560
do it without referencing anything,
and then go make that.

87
00:04:23.560 --> 00:04:28.480
And then once you make that, enhance
that thing, go add more features to it.

88
00:04:28.480 --> 00:04:30.600
Maybe add a better design to it.

89
00:04:30.600 --> 00:04:33.360
Go on dribble.com and find a design and
implement that design.

90
00:04:33.360 --> 00:04:35.850
That's actually how I
started learning apps.

91
00:04:35.850 --> 00:04:39.332
I would just go and Dribble, I go find
designs that I really liked, and I'm like,

92
00:04:39.332 --> 00:04:41.160
all right, I'm gonna turn that to an app.

93
00:04:41.160 --> 00:04:43.620
And then that's what I did
cuz I was not a designer.

94
00:04:43.620 --> 00:04:46.942
I didn't have a designer friend, so
I just found designs and did that, and

95
00:04:46.942 --> 00:04:50.315
I made sure it was just right outside my
skill level to where I knew I had to look

96
00:04:50.315 --> 00:04:51.290
things up and learn.

97
00:04:51.290 --> 00:04:52.780
You don't wanna do
something that's too easy.

98
00:04:52.780 --> 00:04:55.498
So I think once you do that two or
three times with next js,

99
00:04:55.498 --> 00:04:59.466
this will just become so familiar to you
that you'll understand it and and, yeah,

100
00:04:59.466 --> 00:05:01.810
you won't really be looking
things up too much.

101
00:05:01.810 --> 00:05:06.461
So that's my opinion with pretty much
anything as an engineer learning

102
00:05:06.461 --> 00:05:09.714
something, and
the sooner you get those reps in,

103
00:05:09.714 --> 00:05:12.440
the sooner you can be proficient with it.

104
00:05:12.440 --> 00:05:14.840
So those are my recommendations.

105
00:05:14.840 --> 00:05:18.322
&gt;&gt; In terms of authentication
authorization,

106
00:05:18.322 --> 00:05:21.810
is there a next prescribed
way of doing that?

107
00:05:21.810 --> 00:05:23.150
Is that something more depends on?

108
00:05:24.670 --> 00:05:27.630
&gt;&gt; I'm very opinionated about that.

109
00:05:27.630 --> 00:05:31.176
I used to be in the boat of I'm
just gonna roll my own auth, and

110
00:05:31.176 --> 00:05:34.320
there's something called
NextAuth.js out there.

111
00:05:34.320 --> 00:05:37.770
If you're in a boat of rolling
your own auth, just use this.

112
00:05:37.770 --> 00:05:39.620
Just don't use anything else but this.

113
00:05:39.620 --> 00:05:40.210
It's really good.

114
00:05:40.210 --> 00:05:43.710
I'm now in the other boat where
I don't wanna roll my own auth.

115
00:05:43.710 --> 00:05:46.020
I don't wanna waste time
doing the same thing.

116
00:05:46.020 --> 00:05:49.180
I realize every time I roll my own auth,
it's the same auth.

117
00:05:49.180 --> 00:05:51.380
I got to the point where I
would make it from scratch,

118
00:05:51.380 --> 00:05:52.930
it would be the same way every time.

119
00:05:52.930 --> 00:05:55.960
And then I find a library and
I'm like, this saves me so much time.

120
00:05:55.960 --> 00:05:59.625
Then I use the library and the config
will be the same thing every time.

121
00:05:59.625 --> 00:06:00.651
And I was like, okay,

122
00:06:00.651 --> 00:06:04.224
I'm just copying and pasting the config
from every repo that I've ever made.

123
00:06:04.224 --> 00:06:06.646
And then I was like,
I don't really wanna do this anymore,

124
00:06:06.646 --> 00:06:08.440
because it's the same thing every time.

125
00:06:08.440 --> 00:06:10.570
It's auth, and I'm not a auth expert.

126
00:06:10.570 --> 00:06:12.210
I'm not a security expert.

127
00:06:12.210 --> 00:06:15.377
So now I prefer to use services, and
actually found a really good service that

128
00:06:15.377 --> 00:06:17.961
we'll be using in a full stack
course that takes two seconds and

129
00:06:17.961 --> 00:06:19.930
it's the best thing I've
ever seen in my life.

130
00:06:22.070 --> 00:06:23.671
So if I heard the question,

131
00:06:23.671 --> 00:06:28.000
right, it sounds like they're asking
if I have a page that fetches data.

132
00:06:29.740 --> 00:06:34.254
But the way that it fetches data is
from a route on an API that I created.

133
00:06:34.254 --> 00:06:38.459
If that's the case, there won't be
any data fetching in the browser,

134
00:06:38.459 --> 00:06:43.380
that would all happen on the server
that this function gets executed.

135
00:06:43.380 --> 00:06:48.072
And then because this is serverless,
that would call your API server function,

136
00:06:48.072 --> 00:06:49.107
which spins up and

137
00:06:49.107 --> 00:06:53.321
makes that call through whatever
private network this got deployed to.

138
00:06:53.321 --> 00:06:56.508
So there shouldn't be any
browser communication there,

139
00:06:56.508 --> 00:06:59.768
that should still just be
server to server communication.

140
00:06:59.768 --> 00:07:03.492
I mean at that point it's just treating
it like a third party API, and the only

141
00:07:03.492 --> 00:07:07.415
benefit you would get is if however this
got deployed, they were in the same VPC.

142
00:07:07.415 --> 00:07:10.133
And other than that,
it's usually the same, so

143
00:07:10.133 --> 00:07:14.644
you shouldn't have a problem there as far
as going through the public internet,

144
00:07:14.644 --> 00:07:16.590
depending on how it got deployed.

145
00:07:16.590 --> 00:07:20.810
Now, if you also did some API
call inside this component, well,

146
00:07:20.810 --> 00:07:26.030
then you couldn't do any of this because
that would make it a client component and

147
00:07:26.030 --> 00:07:28.620
therefore you couldn't do this.

148
00:07:28.620 --> 00:07:30.904
So you could only,
you can only do either, or,

149
00:07:30.904 --> 00:07:34.290
you couldn't make an API call in here and
a use effect.

150
00:07:34.290 --> 00:07:37.716
And do browser site API calls, but
also get data on the server for

151
00:07:37.716 --> 00:07:40.480
this because you can only do one or
the other.

152
00:07:40.480 --> 00:07:41.590
You can't do both.

153
00:07:41.590 --> 00:07:44.206
So I don't think you'll
actually run into that problem.

154
00:07:44.206 --> 00:07:45.485
&gt;&gt; It's kind of a loaded question.

155
00:07:45.485 --> 00:07:47.187
&gt;&gt; Okay.

156
00:07:47.187 --> 00:07:50.895
&gt;&gt; Is Next.js optimal for enterprise apps?

157
00:07:50.895 --> 00:07:54.810
&gt;&gt; So the first company I've
ever started was a consultancy.

158
00:07:54.810 --> 00:07:56.650
It was a dev shop for
enterprise companies.

159
00:07:56.650 --> 00:07:59.585
All I did for two years,
almost three years,

160
00:07:59.585 --> 00:08:04.453
we're helping enterprise companies
get off of, I don't know, Django or

161
00:08:04.453 --> 00:08:09.261
WordPress or something like that,
on to something that was enterprise.

162
00:08:09.261 --> 00:08:14.451
Most of them chose Angular too, some of
them chose Vue, some of them chose React.

163
00:08:14.451 --> 00:08:19.586
I can tell you without a doubt
that enterprise ready.

164
00:08:19.586 --> 00:08:22.427
First of all, I think it really
comes down to the infrastructure,

165
00:08:22.427 --> 00:08:25.950
where you deploy this, can you deploy it
to somewhere that's enterprise ready?

166
00:08:25.950 --> 00:08:29.510
Yes, Vercel is enterprise ready,
Netlify is enterprise ready.

167
00:08:29.510 --> 00:08:30.760
So that answers that problem.

168
00:08:30.760 --> 00:08:35.303
Two, it's a front end app that leverages
technologies that have already been proven

169
00:08:35.303 --> 00:08:38.219
to be enterprise ready,
like serverless functions.

170
00:08:38.219 --> 00:08:40.416
So in that case, absolutely.

171
00:08:40.416 --> 00:08:43.378
Then the third thing that might
be more important is when

172
00:08:43.378 --> 00:08:45.775
it comes to organizing things and
patterns,

173
00:08:45.775 --> 00:08:50.315
I would say it's probably more enterprise
ready than something like vanilla React,

174
00:08:50.315 --> 00:08:54.125
where you kind of just do whatever
the hell you want, however you want.

175
00:08:54.125 --> 00:08:57.835
And whoever is a team leader is gonna
come up with how things are done.

176
00:08:57.835 --> 00:09:00.965
At least in the Next.js it's closer
to what you might get with Angular,

177
00:09:00.965 --> 00:09:02.990
maybe more opinionated than Angular.

178
00:09:02.990 --> 00:09:06.298
Whereas there's a bunch of
adventures you have to follow so

179
00:09:06.298 --> 00:09:08.690
you don't have to teach or enforce those.

180
00:09:08.690 --> 00:09:12.715
You either do them or it doesn't work,
and there's no in-between.

181
00:09:12.715 --> 00:09:17.067
So I would say it is enterprise ready for
sure,

182
00:09:17.067 --> 00:09:24.668
seeing how it's mostly just code that
executes on enterprise infrastructure.

183
00:09:24.668 --> 00:09:28.224
And itself is just a framework
that runs in a browser

184
00:09:28.224 --> 00:09:32.787
that's built on top of the most
popular framework ever created.

185
00:09:32.787 --> 00:09:35.885
So yeah,
I would say it's pretty enterprise ready.

186
00:09:35.885 --> 00:09:37.510
You shouldn't have any problems.

187
00:09:37.510 --> 00:09:39.122
Go do it.

188
00:09:39.122 --> 00:09:39.787
Awesome.

189
00:09:39.787 --> 00:09:44.160
Yeah, so thanks for taking the course,
had super fun teaching it.

190
00:09:44.160 --> 00:09:46.010
It's definitely one of
my favorite frameworks.

191
00:09:46.010 --> 00:09:49.170
Pretty much all I use now for
almost everything.

192
00:09:49.170 --> 00:09:51.709
Sometimes I just go pure vanilla,
but most of the time it's Next.js.

193
00:09:51.709 --> 00:09:54.033
So hopefully everyone learns
something from it and

194
00:09:54.033 --> 00:09:57.260
you can use this as a reference
to go back and check things out.

195
00:09:57.260 --> 00:09:59.680
But like I said,
I highly recommend going for it and

196
00:09:59.680 --> 00:10:03.130
just building more things to kinda
solidify what you just learned here.

197
00:10:03.130 --> 00:10:04.983
Otherwise, it'll just be familiar, but

198
00:10:04.983 --> 00:10:07.250
it won't be something that
you're really good at.

199
00:10:07.250 --> 00:10:11.048
So whatever pace you are at that
bootcamp that you might have went to,

200
00:10:11.048 --> 00:10:13.352
keep that pace, go build some new stuff.

201
00:10:13.352 --> 00:10:15.403
And hopefully this becomes
second nature to you.

202
00:10:15.403 --> 00:10:20.356
So thank you for coming.

203
00:10:20.356 --> 00:10:22.884
&gt;&gt; [APPLAUSE]

