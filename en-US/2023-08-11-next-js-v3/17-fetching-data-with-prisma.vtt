WEBVTT

1
00:00:00.015 --> 00:00:06.754
Now let's create the ability to list and
show all of our todos.

2
00:00:06.754 --> 00:00:14.440
So what we'll do is we'll go to the app
&gt; dashboard &gt; todo's page here.

3
00:00:14.440 --> 00:00:18.638
And this is where we wanna pull in all of
our to do's, and we wanna render them.

4
00:00:18.638 --> 00:00:20.910
So let's do that.

5
00:00:20.910 --> 00:00:27.064
Before we do that, it's probably a good
idea just to make a helper function,

6
00:00:27.064 --> 00:00:32.478
cuz in order to use prisma,
we have to create an instance of the SDK.

7
00:00:32.478 --> 00:00:34.530
We don't wanna have to recreate
that every single time.

8
00:00:34.530 --> 00:00:37.730
So let's just make a file that creates
one so that we can import it everywhere.

9
00:00:37.730 --> 00:00:38.663
So let's do that.

10
00:00:38.663 --> 00:00:42.660
I like to store those types of
things in a folder called utils.

11
00:00:42.660 --> 00:00:44.090
I'm just gonna put it on the root.

12
00:00:45.400 --> 00:00:46.887
You can put them in app with underscore,

13
00:00:46.887 --> 00:00:49.440
you can put them in app without
underscore, however you wanna do it.

14
00:00:49.440 --> 00:00:51.416
I'm just gonna put it under root.

15
00:00:51.416 --> 00:00:55.238
And I'm gonna make a new file
called db.ts, and it's ts,

16
00:00:55.238 --> 00:01:00.056
not tsx because there's no React in here,
it's just a regular JavaScript

17
00:01:00.056 --> 00:01:04.666
file that does regular JavaScript things,
there's no React in here.

18
00:01:04.666 --> 00:01:10.785
And I already have a lot of that,
Kinda done.

19
00:01:10.785 --> 00:01:13.154
So I'm just gonna copy it from my repo and

20
00:01:13.154 --> 00:01:16.159
I'm gonna talk about why
this is the way that it is.

21
00:01:19.480 --> 00:01:24.722
Basically, the reason why we do it this
way where we're checking to see if we're

22
00:01:24.722 --> 00:01:29.580
in a certain environment variable and
creating a client and attaching it to

23
00:01:29.580 --> 00:01:35.155
global, it's mostly because of serverless
environments and connection pooling.

24
00:01:35.155 --> 00:01:39.754
It's an advanced thing, but basically,
databases were not meant to be in

25
00:01:39.754 --> 00:01:44.718
a serverless environment by default,
they don't like to maintain long lived,

26
00:01:44.718 --> 00:01:50.330
in a service environment, your service
spins up, it executes, and it shuts down.

27
00:01:50.330 --> 00:01:53.070
So every time you do that, you have
to start a new database connection.

28
00:01:53.070 --> 00:01:55.680
Eventually your database is like,
I can't handle all these connections.

29
00:01:55.680 --> 00:01:58.400
If you have 100,000 requests in a minute,

30
00:01:58.400 --> 00:02:01.978
that's 100,000 connections somewhere,
give or take.

31
00:02:01.978 --> 00:02:04.400
Most databases can't handle that,
and they're not meant for that.

32
00:02:04.400 --> 00:02:07.616
They're meant to be running on a server
that's long live that has like one or

33
00:02:07.616 --> 00:02:08.870
two connections.

34
00:02:08.870 --> 00:02:09.370
That's it.

35
00:02:10.950 --> 00:02:15.440
But luckily for us, we don't have to worry
about that cuz one reason is SQLite.

36
00:02:15.440 --> 00:02:16.606
And we're not in production.

37
00:02:16.606 --> 00:02:22.280
But two, there's real serverless
databases now that account for that.

38
00:02:22.280 --> 00:02:24.792
But in order for the client here,
every time we make a new client,

39
00:02:24.792 --> 00:02:26.450
it makes a new connection to the database.

40
00:02:26.450 --> 00:02:29.584
So instead what we're doing is we're
caching that connection by attaching it to

41
00:02:29.584 --> 00:02:30.100
the global.

42
00:02:30.100 --> 00:02:32.840
And only if it's not there
that we create a new one.

43
00:02:32.840 --> 00:02:34.670
That's basically what we're doing now.

44
00:02:34.670 --> 00:02:37.160
It's just to make sure we're
reusing the same connection.

45
00:02:37.160 --> 00:02:39.560
None of this matters right now,
cuz we're not in production.

46
00:02:39.560 --> 00:02:41.370
We're all using SQLite,
which is not a server.

47
00:02:41.370 --> 00:02:42.630
It's a file.

48
00:02:42.630 --> 00:02:45.638
And there are true serverless databases
out there now that you don't really

49
00:02:45.638 --> 00:02:46.300
need to do this.

50
00:02:46.300 --> 00:02:50.912
So, but I just do this as a habit
every time, so that's why that's here.

51
00:02:53.000 --> 00:02:57.911
Okay, so now that we have that, what we
can do is we can go into our todos and

52
00:02:57.911 --> 00:02:59.434
let's get some data.

53
00:02:59.434 --> 00:03:01.180
So we can say const.

54
00:03:01.180 --> 00:03:03.103
You don't have to call this getData,
by the way.

55
00:03:03.103 --> 00:03:04.030
You can call this whatever you want.

56
00:03:04.030 --> 00:03:04.590
It's just a function.

57
00:03:04.590 --> 00:03:07.590
You can call it getTodos,
you can do whatever you want.

58
00:03:07.590 --> 00:03:14.105
I'm gonna say this is async,
and then I'm gonna import and

59
00:03:14.105 --> 00:03:18.415
db, import db from '@utils/db'.

60
00:03:19.925 --> 00:03:22.833
And then I'm gonna say,
give me all the todos.

61
00:03:22.833 --> 00:03:28.250
So I'm gonna say const todos = await db.,
and this is where Prisma is cool.

62
00:03:28.250 --> 00:03:29.405
It's type checked, so

63
00:03:29.405 --> 00:03:32.421
it already knows that something
called todo on the database.

64
00:03:32.421 --> 00:03:37.640
It knows that because we
wrote it in the schema, Here.

65
00:03:37.640 --> 00:03:43.150
And every time you sync the schema,
it updates this module here.

66
00:03:43.150 --> 00:03:45.820
So you have a module here
called @prisma/client.

67
00:03:45.820 --> 00:03:48.670
This client is gonna be unique to
the schema that you've written.

68
00:03:48.670 --> 00:03:50.670
It gets generated every single time.

69
00:03:50.670 --> 00:03:54.111
So it's not like a typical Node module
that it's written and it's done.

70
00:03:54.111 --> 00:03:56.630
Now, this module gets
regenerated every single time,

71
00:03:56.630 --> 00:03:58.570
depending on when you change your schema.

72
00:03:58.570 --> 00:04:00.080
So it's always type-checked.

73
00:04:00.080 --> 00:04:02.630
So it knows about todos.

74
00:04:02.630 --> 00:04:04.710
So let me go back to that.

75
00:04:04.710 --> 00:04:08.037
So we have todo, and
then we just wanna findMany,

76
00:04:08.037 --> 00:04:11.310
which is a function to
pass in an empty object.

77
00:04:11.310 --> 00:04:13.740
So this should just say,
give me all the todos.

78
00:04:13.740 --> 00:04:17.300
Pretty simple, and
I just wanna return the todos like that.

79
00:04:18.310 --> 00:04:19.400
Okay, so we got that.

80
00:04:19.400 --> 00:04:21.150
Now we can just grab this
data in our components.

81
00:04:21.150 --> 00:04:26.967
Now I can say async, and
then I can grab my todos here,

82
00:04:26.967 --> 00:04:31.120
and I can await getData, like that.

83
00:04:31.120 --> 00:04:32.151
Now I have my todos.

84
00:04:41.449 --> 00:04:45.040
But I don't wanna just render
the todos in the todo's page.

85
00:04:45.040 --> 00:04:47.910
I'm gonna just separate that logic
out into separate components.

86
00:04:47.910 --> 00:04:51.640
So I have my NewTodoForm,
my todo, and my TodoList.

87
00:04:51.640 --> 00:04:55.700
So what I wanna do is I wanna pass down
these todos to my TodoList component.

88
00:04:55.700 --> 00:04:58.360
So let's do that.

89
00:04:58.360 --> 00:05:01.418
So I'm gonna go to my TodoList component,
I'm gonna make that,

90
00:05:05.091 --> 00:05:10.059
TodoList, Like this.

91
00:05:14.083 --> 00:05:17.460
And it's going to take in
a list of todos as a prop.

92
00:05:18.600 --> 00:05:21.050
And all it's gonna do
is just map over them.

93
00:05:21.050 --> 00:05:29.507
So nothing crazy, it's just gonna
say todos.map, grab me a todo.

94
00:05:29.507 --> 00:05:36.910
And what this is gonna do is render,
you guessed it, a todo component.

95
00:05:36.910 --> 00:05:38.390
So we gotta go make that too.

96
00:05:38.390 --> 00:05:40.847
So I'm gonna pause there and go make that.

97
00:05:40.847 --> 00:05:45.087
So now I'm gonna go Todo.tsx and
make a todo component.

98
00:05:48.410 --> 00:05:52.630
And I'm keeping these components
vary simple, there's no styling,

99
00:05:52.630 --> 00:05:55.880
there's not really much logic
going on in any of them.

100
00:05:56.970 --> 00:06:01.345
And all I'm gonna do is
just render todo.content.

101
00:06:06.862 --> 00:06:07.443
Here we go.

102
00:06:07.443 --> 00:06:10.037
So we have those, have our todo component.

103
00:06:14.471 --> 00:06:17.523
If we take this todo component and

104
00:06:17.523 --> 00:06:23.300
go back to the TodoList component,
we can just render it here,

105
00:06:23.300 --> 00:06:28.216
Todo, and we can pass in our todo as todo,
like that.

106
00:06:28.216 --> 00:06:30.223
This thing's freaking
out cuz it wants a key.

107
00:06:30.223 --> 00:06:33.302
We can give it a key, todo.id.

108
00:06:36.135 --> 00:06:38.483
Need to make sure we import
our todo at the top.

109
00:06:41.592 --> 00:06:42.303
There we go.

110
00:06:47.627 --> 00:06:51.906
So we have that, like I said,
very simple, just mapping over the,

111
00:06:51.906 --> 00:06:55.780
array of todos, and rendering out
a todo component for each one.

112
00:06:55.780 --> 00:07:02.180
And then now if we head back to our todo's
page, we can pass that stuff in, right?

113
00:07:02.180 --> 00:07:05.917
So now I can go here,
I can say TodoList, and

114
00:07:05.917 --> 00:07:11.944
then pass in the todos here, Like that.

115
00:07:14.892 --> 00:07:18.180
And if you did this right, you should
see nothing on the page [LAUGH].

116
00:07:18.180 --> 00:07:21.432
But it shouldn't break, cuz we don't
have any todos in the database, so

117
00:07:21.432 --> 00:07:22.720
nothing should show.

118
00:07:22.720 --> 00:07:26.630
So it's just gonna map over an empty
array, which is what I believe.

119
00:07:26.630 --> 00:07:32.140
findMany returns by default if
nothing was in it, if we did it right.

120
00:07:34.040 --> 00:07:37.514
But do we ever do it
right on the first try?

121
00:07:37.514 --> 00:07:38.097
I don't know.

122
00:07:38.097 --> 00:07:39.220
Let's see.

123
00:07:39.220 --> 00:07:40.400
So I go over to todos.

124
00:07:41.800 --> 00:07:43.710
Yeah, so it looks like it worked.

125
00:07:43.710 --> 00:07:46.440
We don't see anything,
cuz we don't have any todos.

126
00:07:46.440 --> 00:07:49.213
So we should fix that problem.

127
00:07:49.213 --> 00:07:49.945
We can verify that, right?

128
00:07:49.945 --> 00:07:55.270
If I just log todos here, by the way,
where's this log gonna show up?

129
00:07:55.270 --> 00:07:56.399
Is it gonna show up in the terminal?

130
00:07:56.399 --> 00:07:57.730
Is it gonna show up in the browser?

131
00:08:01.982 --> 00:08:03.930
&gt;&gt; Right now should be the terminal,
right?

132
00:08:03.930 --> 00:08:05.280
On the server.

133
00:08:05.280 --> 00:08:06.779
&gt;&gt; I don't know, is it?

134
00:08:09.148 --> 00:08:09.880
Why do you say that?

135
00:08:09.880 --> 00:08:10.700
What makes you think that.

136
00:08:10.700 --> 00:08:11.784
&gt;&gt; Seeing no hooks?

137
00:08:11.784 --> 00:08:13.680
Are these client praqma?

138
00:08:13.680 --> 00:08:15.630
&gt;&gt; Yeah, that's probably
the best way to know, [LAUGH].

139
00:08:15.630 --> 00:08:18.360
Yeah, there is no use client and
there are no hooks.

140
00:08:18.360 --> 00:08:20.790
So this is probably completely
server rendered, yeah.

141
00:08:20.790 --> 00:08:24.480
The other way you can tell is that,
well, where's this function being used?

142
00:08:24.480 --> 00:08:26.510
It's being used in a component
that's using async?

143
00:08:26.510 --> 00:08:27.770
Yeah, that's definitely server.

144
00:08:27.770 --> 00:08:28.920
You can't do that on a client.

145
00:08:28.920 --> 00:08:29.591
So, yeah,

146
00:08:29.591 --> 00:08:33.711
those are all big hands that this is
probably gonna happen on the server.

147
00:08:33.711 --> 00:08:37.842
So if we were to look at this, yeah,
you could see we just get back empty array

148
00:08:37.842 --> 00:08:42.447
from Prisma and SQL, cuz we don't have any
todos yet, so it's just an empty array.

