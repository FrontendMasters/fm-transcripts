WEBVTT

1
00:00:00.142 --> 00:00:05.680
So let's talk about some ways that we can
make state machines without any libraries.

2
00:00:05.680 --> 00:00:09.182
And this is going to be the same for
most mainstream languages.

3
00:00:09.182 --> 00:00:12.727
This is not specific to JavaScript.

4
00:00:12.727 --> 00:00:18.047
The difference between how we usually
manage states and how we should manage

5
00:00:18.047 --> 00:00:22.951
state with state machines is instead
of doing the bottom up approach,

6
00:00:22.951 --> 00:00:27.626
or even an event action approach,
we don't start with the event.

7
00:00:27.626 --> 00:00:29.976
And so that's the big distinction.

8
00:00:29.976 --> 00:00:34.110
We start with what the finite state is and
so on in this case,

9
00:00:34.110 --> 00:00:39.735
when we're modeling this promise state
machine, where we have the idle pending

10
00:00:39.735 --> 00:00:45.212
result in rejected states, we're going
to switch on what the state is first.

11
00:00:45.212 --> 00:00:49.003
So in this case, we have an idle state and

12
00:00:49.003 --> 00:00:53.473
then in this idle state
We switch on the events.

13
00:00:53.473 --> 00:00:57.611
So we determine what event has
happened such as fetch, and

14
00:00:57.611 --> 00:01:01.081
we transition to that
state based on the events.

15
00:01:01.081 --> 00:01:04.090
So they are nested switch statements.

16
00:01:04.090 --> 00:01:08.456
It does look a little bit verbose, but
this is how you could properly structure

17
00:01:08.456 --> 00:01:11.182
a state machine using
these switch statements.

18
00:01:11.182 --> 00:01:16.454
Now one important thing to consider, is
that these states, another way to think of

19
00:01:16.454 --> 00:01:21.523
them is that you could consider them the
behavior of your app or of your machine.

20
00:01:21.523 --> 00:01:24.445
So when you're in the idle state,
for instance,

21
00:01:24.445 --> 00:01:28.910
you have to think about what is the
behavior of my machine in this idle state.

22
00:01:28.910 --> 00:01:33.584
So in this case, we can accept a batch
events which will do something,

23
00:01:33.584 --> 00:01:39.190
it will transition to the pending state,
or we just returned the state.

24
00:01:39.190 --> 00:01:43.136
And this is one of the important points
because consider the other events

25
00:01:43.136 --> 00:01:44.243
that might happen.

26
00:01:44.243 --> 00:01:49.156
We might have a resolve events,
we might have a reject events.

27
00:01:49.156 --> 00:01:51.596
And when one of those events happens,

28
00:01:51.596 --> 00:01:56.333
we want to make sure that we're in
the right states to accept that events.

29
00:01:56.333 --> 00:02:00.300
So when we're in idle and
we didn't really start fetching yet,

30
00:02:00.300 --> 00:02:04.641
accepting a resolved or
rejected events doesn't really make sense.

31
00:02:04.641 --> 00:02:09.637
And in fact, when we're in the pending
states, and when we get a result events,

32
00:02:09.637 --> 00:02:14.784
now we're in the results date, but what if
we received by some weird coincidence or

33
00:02:14.784 --> 00:02:17.390
weird glitch a reject events.

34
00:02:17.390 --> 00:02:19.502
So that sort of doesn't make sense.

35
00:02:19.502 --> 00:02:23.414
And I'm sure you've seen that in some
maps where it says, congratulations or

36
00:02:23.414 --> 00:02:27.148
success or here's your data, and
then immediately it shows an error, and

37
00:02:27.148 --> 00:02:29.722
you're like,
this is sort of an unexpected flow.

38
00:02:29.722 --> 00:02:31.684
I don't really expect that to happen.

39
00:02:31.684 --> 00:02:37.122
And so that's why we separate our
app logic in terms of behavior.

40
00:02:37.122 --> 00:02:40.708
How does it behave when it's in
this state like the pending state.

41
00:02:40.708 --> 00:02:46.027
Or when it's in the idle state, or when
it's in the resolved, or rejected states.

42
00:02:46.027 --> 00:02:50.487
And that way we could prevents what's
called impossible transitions from

43
00:02:50.487 --> 00:02:55.016
happening, which are transitions that
should never ever happen even if you

44
00:02:55.016 --> 00:02:59.353
are 99.9% sure that some event will
never occur in a certain state.

45
00:02:59.353 --> 00:03:04.320
It's always good to model your logic so
that even if that does happen,

46
00:03:04.320 --> 00:03:07.695
it's impossible for
that to affect anything.

47
00:03:09.492 --> 00:03:15.173
So personally, I like using objects
instead to represent a state machine.

48
00:03:15.173 --> 00:03:18.932
And this is something that I thought about
early on when making x date is that I

49
00:03:18.932 --> 00:03:22.010
really don't like writing those
nested switch statements.

50
00:03:22.010 --> 00:03:26.685
And I could see why people do event first
because they only have to write one switch

51
00:03:26.685 --> 00:03:30.535
statement and then use defensive
programming in order to make sure

52
00:03:30.535 --> 00:03:33.445
that those impossible
transitions are covered.

53
00:03:33.445 --> 00:03:35.133
But that's still verbose.

54
00:03:35.133 --> 00:03:41.811
And using a machine, or using an object
actually makes things a lot simpler.

55
00:03:41.811 --> 00:03:43.880
So over here, this is a plain object.

56
00:03:43.880 --> 00:03:46.424
Again, I'm not using any libraries, and

57
00:03:46.424 --> 00:03:49.402
we see that we have a couple
extra properties now.

58
00:03:49.402 --> 00:03:53.882
We have this initial in which I'm just
keeping track of the initial state.

59
00:03:53.882 --> 00:03:56.732
Then we have our nested states.

60
00:03:56.732 --> 00:04:01.233
So we have idle, pending,
resolved and rejected.

61
00:04:01.233 --> 00:04:04.080
In each one of these states,
I have an OnProperty.

62
00:04:04.080 --> 00:04:06.252
And that's where I'm going
to store my transitions.

63
00:04:06.252 --> 00:04:10.612
Each transition is going to be
an object where the key is the events.

64
00:04:10.612 --> 00:04:15.293
And the value is the next
state that's going to happen.

65
00:04:15.293 --> 00:04:19.505
So when we're on the idle state,
and that fetch event happens,

66
00:04:19.505 --> 00:04:21.691
now we're on the pending state.

67
00:04:21.691 --> 00:04:26.315
And so you can see that over here we
have a transition function where we

68
00:04:26.315 --> 00:04:27.923
first grab the states.

69
00:04:27.923 --> 00:04:33.086
And we're using this ESX syntax in
order to say if it doesn't exist,

70
00:04:33.086 --> 00:04:34.965
just return undefined.

71
00:04:34.965 --> 00:04:37.845
And then we dive into the on object,

72
00:04:37.845 --> 00:04:43.514
grab that transition from the events and
then we returned the states.

73
00:04:45.820 --> 00:04:52.007
So let's take a look at I'm
gonna go into our scratchpad,

74
00:04:52.007 --> 00:04:57.331
which if you can remember
is 00/index.html.

75
00:04:57.331 --> 00:05:00.910
And we're just going to make an example
over here just to play around with it.

76
00:05:02.970 --> 00:05:09.059
So I'm gonna go ahead and
I'm going to copy this machine over here.

77
00:05:09.059 --> 00:05:10.901
Just gonna.

78
00:05:14.072 --> 00:05:15.413
There we go.

79
00:05:15.413 --> 00:05:17.674
So we have our machine as an object.

80
00:05:17.674 --> 00:05:20.451
And so what we also want is we
want to transition functions.

81
00:05:20.451 --> 00:05:22.465
So let's say const transition.

82
00:05:22.465 --> 00:05:25.300
And I'll move this up here equals and

83
00:05:25.300 --> 00:05:30.883
I'm using the ESX arrow fat arrow
syntax for defining these functions.

84
00:05:30.883 --> 00:05:35.957
So we have our current state and
we have in events and

85
00:05:35.957 --> 00:05:39.743
we want to look up first, this dates.

86
00:05:39.743 --> 00:05:42.461
So we're gonna look that
up on the state's property.

87
00:05:42.461 --> 00:05:47.335
So we're going to return
the machine.states and

88
00:05:47.335 --> 00:05:51.047
give it that state if that exists, and

89
00:05:51.047 --> 00:05:56.283
then we're going to look
up the transitions, so on.

90
00:05:56.283 --> 00:05:59.023
And then we give it the events.

91
00:05:59.023 --> 00:06:01.782
And that's gonna hopefully
return our next states.

92
00:06:01.782 --> 00:06:06.486
But in case the machine does not
accept this event in the current

93
00:06:06.486 --> 00:06:10.674
state that it's in,
we just want to return the states.

94
00:06:10.674 --> 00:06:14.485
And so, let's see what this looks like,
let's say that we transition and

95
00:06:14.485 --> 00:06:16.011
we're going to output this.

96
00:06:16.011 --> 00:06:20.830
So we're going to output
transition from let's say

97
00:06:20.830 --> 00:06:25.661
we're in the idler state and
a FETCHER can happens.

98
00:06:25.661 --> 00:06:26.849
See what that looks like.

99
00:06:29.911 --> 00:06:33.282
All right, so we have the NPM start first.

100
00:06:33.282 --> 00:06:35.038
Perhaps it should be already running.

101
00:06:42.371 --> 00:06:44.851
Let's see.
JS, yep, we're in here.

102
00:06:55.373 --> 00:06:57.554
Okay, well let's console.login.

103
00:06:57.554 --> 00:07:04.280
So let's start outputting it console.log
transition I will FETCH all right.

104
00:07:04.280 --> 00:07:06.442
So you will see that we're
in the pending states.

105
00:07:06.442 --> 00:07:09.143
And so now let's try if we're
in the pending state, and

106
00:07:09.143 --> 00:07:12.481
the FETCH event happens,
which this obviously shouldn't happen,

107
00:07:12.481 --> 00:07:16.063
we shouldn't be trying to FETCH while
we're still in the pending state.

108
00:07:16.063 --> 00:07:18.920
And so you could see that we're
still in the pending state.

109
00:07:18.920 --> 00:07:22.731
So we assume that nothing
really happened there.

110
00:07:22.731 --> 00:07:27.520
Now let's assume that we're in the pending
state and we get to resolve events.

111
00:07:29.400 --> 00:07:32.558
So what should happen
is we get the result,

112
00:07:32.558 --> 00:07:36.432
the results string,
which is exactly what we want.

113
00:07:36.432 --> 00:07:41.922
And also, if we do reject,
we could get the rejected string as well.

114
00:07:41.922 --> 00:07:42.484
All right.

115
00:07:44.331 --> 00:07:49.171
So, in order to actually use this,
doing this pure functions is fine,

116
00:07:49.171 --> 00:07:53.622
but we need some sort of way of
keeping track of the current state.

117
00:07:53.622 --> 00:07:55.977
And obviously,
that's a little bit side effect,

118
00:07:55.977 --> 00:07:57.851
ie we can't really use pure functions.

119
00:07:57.851 --> 00:08:02.439
And in fact, any application that you
work on is not going to be 100% pure,

120
00:08:02.439 --> 00:08:05.983
because after all,
you need to output things on the screen or

121
00:08:05.983 --> 00:08:09.067
you need to do some sort of side effect or
something.

122
00:08:09.067 --> 00:08:12.702
And so that's where we get into
interpreting state machines.

123
00:08:12.702 --> 00:08:16.501
So let's just make a very
simple interpreter.

124
00:08:16.501 --> 00:08:20.886
And what interpreter is,
is it takes a state machine and it says,

125
00:08:20.886 --> 00:08:23.935
I'm gonna keep track
of your current state.

126
00:08:23.935 --> 00:08:28.035
So whenever you send an events to me,
I'm just going to internally

127
00:08:28.035 --> 00:08:31.490
update the current state just so
that we could track it.

128
00:08:31.490 --> 00:08:34.843
So let's create a simple
interpreter over here.

129
00:08:34.843 --> 00:08:38.643
I'm going to say send,
we're gonna have a send function and

130
00:08:38.643 --> 00:08:41.401
that function is going
to take an event and so

131
00:08:41.401 --> 00:08:45.743
this is gonna be one of those fire and
forget side effects functions.

132
00:08:45.743 --> 00:08:48.302
And let's also keep track
of the current state.

133
00:08:48.302 --> 00:08:53.280
So the current state should be
the machine that initial state first.

134
00:08:53.280 --> 00:08:57.093
And if you remember,
this is going to be the idle states.

135
00:08:57.093 --> 00:08:58.398
So when we send an event,

136
00:08:58.398 --> 00:09:02.261
the first thing we want to do is we want
to determine what the next state is.

137
00:09:02.261 --> 00:09:04.483
So const next state.

138
00:09:04.483 --> 00:09:10.267
And we do that using our transition
function that we created,

139
00:09:10.267 --> 00:09:14.496
so transition (currentState, event) and

140
00:09:14.496 --> 00:09:18.292
lets log that and then we will return it.

141
00:09:18.292 --> 00:09:21.779
So return, sorry we wont return it,

142
00:09:21.779 --> 00:09:25.942
we will set currentState to the nextState.

143
00:09:29.413 --> 00:09:33.731
Okay, so what this is going to do is
whenever we send in an event, it's going

144
00:09:33.731 --> 00:09:38.185
to mutate this currentState so that we
keep track of what the currentState is,

145
00:09:38.185 --> 00:09:42.047
and then it's going to log out
that nextState, so let's try that.

146
00:09:45.392 --> 00:09:49.080
All right, so we actually have to send.

147
00:09:49.080 --> 00:09:52.032
So let's go ahead and put this on window.

148
00:09:55.318 --> 00:09:59.323
All right, so now, when we send,

149
00:09:59.323 --> 00:10:04.444
let's say FETCH, we get pending, great.

150
00:10:04.444 --> 00:10:09.911
So now when we send RESOLVE,
we get resolved.

151
00:10:09.911 --> 00:10:14.123
So you see it's internally keeping
track and we're outputting

152
00:10:14.123 --> 00:10:19.337
the nextState based on the currentState
in the events that was just sent.

153
00:10:19.337 --> 00:10:23.032
And so that's how you can make a really
simple interpreter using just a few

154
00:10:23.032 --> 00:10:23.813
lines of code.

155
00:10:23.813 --> 00:10:25.909
In fact,
even this console log is unnecessary.

