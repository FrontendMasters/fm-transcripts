WEBVTT

1
00:00:00.230 --> 00:00:05.230
Tim asks, say you were refactoring
a large app from Redux to Xstate.

2
00:00:05.230 --> 00:00:06.960
What would the end result look like?

3
00:00:06.960 --> 00:00:09.470
Would it be one large state machine?

4
00:00:09.470 --> 00:00:12.310
Or would it be a composition of
many smaller state machines?

5
00:00:12.310 --> 00:00:13.722
That's a really good question.

6
00:00:13.722 --> 00:00:16.971
So one of the big differences
between Redux and

7
00:00:16.971 --> 00:00:22.590
Xstate is that Redux espouses this idea
that there's one atomic global state.

8
00:00:22.590 --> 00:00:27.484
And so in this global state, this is where
you have all of your state updates and

9
00:00:27.484 --> 00:00:32.156
u selectors to select slices of that
global state that you want to use in your

10
00:00:32.156 --> 00:00:33.139
application.

11
00:00:33.139 --> 00:00:37.779
Now Redux, especially for React and
anything else that uses Redux,

12
00:00:37.779 --> 00:00:42.579
has to do a lot of tricks to make sure
that any state updates to that global

13
00:00:42.579 --> 00:00:47.090
states don't cause wide spread
state updates everywhere else.

14
00:00:47.090 --> 00:00:52.920
So in events-driven modelling,
we call this chatty.

15
00:00:52.920 --> 00:00:58.380
So we could say that the store
that Redux has is chatty,

16
00:00:58.380 --> 00:01:03.400
because every single update that happens
to it is going to tell everything else.

17
00:01:03.400 --> 00:01:04.360
Hey, guess what?

18
00:01:04.360 --> 00:01:05.830
I have some new states.

19
00:01:05.830 --> 00:01:07.218
And so you might not always want that.

20
00:01:07.218 --> 00:01:12.523
You might only want to care about
a particular piece of that state.

21
00:01:12.523 --> 00:01:17.520
The actor model naturally separates
those states into separate actors.

22
00:01:17.520 --> 00:01:20.880
So because the parents state
just spawns those actors,

23
00:01:20.880 --> 00:01:24.910
those actors could update their state all
they want, they could receive events.

24
00:01:24.910 --> 00:01:26.960
They could send events,
they could do whatever.

25
00:01:26.960 --> 00:01:31.860
And the parents will never know unless
the actor explicitly sends an events

26
00:01:31.860 --> 00:01:33.000
to the parents.

27
00:01:33.000 --> 00:01:37.914
And so, in that way using the actor
model is a lot less chatty than using

28
00:01:37.914 --> 00:01:39.830
something like Redux.

29
00:01:39.830 --> 00:01:42.520
But again,
the learning curve is a little bit bigger.

30
00:01:42.520 --> 00:01:46.845
Are there any examples of composition of
many smaller machines or state charts?

31
00:01:46.845 --> 00:01:49.515
So that goes hand in hand
with the previous question.

32
00:01:49.515 --> 00:01:53.953
Unlike Redux, where you're combining
all of your reducers together,

33
00:01:53.953 --> 00:01:58.389
with Xstate, if you could separate
behavior out into a separate actor,

34
00:01:58.389 --> 00:02:00.444
then that's what you should do.

35
00:02:00.444 --> 00:02:02.247
If you've worked in the back end world,

36
00:02:02.247 --> 00:02:05.654
you could think of this as monoliths
versus micro services microservices.

37
00:02:05.654 --> 00:02:09.674
If your monolith gets really,
really huge, then chances are you wanna

38
00:02:09.674 --> 00:02:13.950
take some of that functionality and
separate it into microservices.

39
00:02:13.950 --> 00:02:17.640
Now it is possible to go too far
on one side of the spectrum and

40
00:02:17.640 --> 00:02:18.990
too far on the other side of the spectrum.

41
00:02:18.990 --> 00:02:21.240
So this is a modeling problem.

42
00:02:21.240 --> 00:02:22.870
It's up to you to determine.

43
00:02:22.870 --> 00:02:26.860
Do you want all of your states to be
represented in one state chart or

44
00:02:26.860 --> 00:02:27.820
in many state charts?

