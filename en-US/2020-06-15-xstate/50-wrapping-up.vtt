WEBVTT

1
00:00:00.776 --> 00:00:05.378
All right, Cory asks a really good
question, it's a philosophical question.

2
00:00:05.378 --> 00:00:09.830
Why do you think that statecharts and
state machines are not more commonly used?

3
00:00:09.830 --> 00:00:15.420
So what weaknesses might a statechart
have related to modeling complexity?

4
00:00:15.420 --> 00:00:18.380
In fact, I have a slide for this, and

5
00:00:18.380 --> 00:00:23.610
it's the complexity trade-offs between
state machines and statecharts.

6
00:00:23.610 --> 00:00:26.760
So with the state machine,

7
00:00:26.760 --> 00:00:31.470
which by definition is simpler than
the statechart, the complexity of state

8
00:00:31.470 --> 00:00:36.840
machines is really small because you're
only dealing with a finite set of states.

9
00:00:36.840 --> 00:00:41.335
But as soon as you have multiple states,
you have exponentially more transitions.

10
00:00:41.335 --> 00:00:44.354
And it becomes a lot more
complex than statecharts, or

11
00:00:44.354 --> 00:00:46.791
even your normal bottom-up programming.

12
00:00:46.791 --> 00:00:50.251
With statecharts, the learning curve
is a lot steeper at first, and

13
00:00:50.251 --> 00:00:51.752
it might seem like overkill.

14
00:00:51.752 --> 00:00:55.275
But once your app gets to
a level of complexity,

15
00:00:55.275 --> 00:01:00.386
you're going to see that statecharts
compose really well in order to

16
00:01:00.386 --> 00:01:06.483
mitigate the effects of combinatorial
explosion of states or added complexity.

17
00:01:06.483 --> 00:01:09.908
And with bottom-up, since every
single place you write a feature or

18
00:01:09.908 --> 00:01:11.975
you write something in an event handler,

19
00:01:11.975 --> 00:01:15.820
you have to check everywhere else
in the code that might touch that.

20
00:01:15.820 --> 00:01:20.990
It's just a linear growing complexity
because the more you add, the more

21
00:01:20.990 --> 00:01:25.112
edge cases you have to deal with, and the
more defensive programming you have to do.

22
00:01:25.112 --> 00:01:32.098
So statecharts are not more commonly used,
I'm really hoping that they will be.

23
00:01:32.098 --> 00:01:34.233
And that's one of
the goals of this workshop,

24
00:01:34.233 --> 00:01:37.862
is to educate you about statecharts and
how you could use them to your benefit.

25
00:01:37.862 --> 00:01:42.468
But statecharts are not
commonly used right now

26
00:01:42.468 --> 00:01:46.350
because it is a big learning curve.

27
00:01:46.350 --> 00:01:49.210
I like to say that there's two types
of state management libraries,

28
00:01:49.210 --> 00:01:50.520
especially in the front end.

29
00:01:50.520 --> 00:01:53.800
There's the change state whenever
you want driven libraries.

30
00:01:53.800 --> 00:01:56.000
And there's the event-driven libraries.

31
00:01:56.000 --> 00:02:00.668
So the frustration with event-driven
libraries, such as Redux and

32
00:02:00.668 --> 00:02:05.390
xstate and MobX-state-tree and
other libraries like that,

33
00:02:05.390 --> 00:02:10.970
is that event-driven libraries don't
allow you to mutate the state directly.

34
00:02:10.970 --> 00:02:13.787
So it's not as easy,
there's a level of indirection there.

35
00:02:13.787 --> 00:02:18.157
And you could consider xstate
to be Redux but more rigid,

36
00:02:18.157 --> 00:02:23.634
because now you have these rules of
what you could do in certain states.

37
00:02:23.634 --> 00:02:27.170
And so because of that, a lot of frontend
engineers feel like it's easier to just

38
00:02:27.170 --> 00:02:30.509
mutate state and to put logic in event
handlers, and at start, this works.

39
00:02:30.509 --> 00:02:35.541
But if you've ever inherited an app
where you do have logic which is spread

40
00:02:35.541 --> 00:02:40.248
out in all these event handlers,
it becomes really, really hard for

41
00:02:40.248 --> 00:02:46.510
any other engineer on your team to really
understand all the logic that's going on.

42
00:02:46.510 --> 00:02:49.845
Because there's no central
place where that logic lives.

43
00:02:49.845 --> 00:02:52.830
There's no convenient
reducer like Redux has.

44
00:02:52.830 --> 00:02:57.220
You have to just piece it all together and
form a mental map of it.

45
00:02:57.220 --> 00:03:01.331
It's not really the the ideal scenario.

46
00:03:05.208 --> 00:03:10.650
Also, statecharts have always been
an uphill battle even with David Herro.

47
00:03:10.650 --> 00:03:15.977
He wrote something in a newspaper about 25
or 20 years ago, talking about how selling

48
00:03:15.977 --> 00:03:20.894
statecharts is still a pretty hard sell
because it is a different way of thinking.

49
00:03:20.894 --> 00:03:24.034
We're no longer thinking in,
okay, let's update the state,

50
00:03:24.034 --> 00:03:25.673
let's just mutate it directly.

51
00:03:25.673 --> 00:03:28.351
Now we're thinking in terms of events,

52
00:03:28.351 --> 00:03:33.017
and in terms of how different states
can react differently to events.

53
00:03:33.017 --> 00:03:37.370
But we see that there's so
many benefits to using statecharts.

54
00:03:37.370 --> 00:03:41.574
And a lot of those benefits are based
around the fact that, like we talked about

55
00:03:41.574 --> 00:03:45.690
in the beginning, these statecharts
are essentially directed graphs.

56
00:03:45.690 --> 00:03:48.120
So you could traverse
those directed graphs.

57
00:03:48.120 --> 00:03:49.990
You could do things such
as model-based testing.

58
00:03:49.990 --> 00:03:53.292
You could have analytics
where you could predict and

59
00:03:53.292 --> 00:03:57.958
track just all the different ways your
users could use your application.

60
00:03:57.958 --> 00:04:02.638
You could transport
statecharts between languages.

61
00:04:02.638 --> 00:04:06.316
In fact, statecharts are so
useful that they are part of UML,

62
00:04:06.316 --> 00:04:08.175
like we talked about earlier.

63
00:04:08.175 --> 00:04:13.269
And so having that adopted by UML means
they're used in many different things,

64
00:04:13.269 --> 00:04:18.062
such as embedded electronics,
automotive engineering, aeronautics,

65
00:04:18.062 --> 00:04:20.920
and in fact, many, many other things.

66
00:04:20.920 --> 00:04:25.450
And so the concepts that you learn in this
workshop are going to be applicable to

67
00:04:25.450 --> 00:04:28.770
pretty much anything related
to statecharts at all.

68
00:04:28.770 --> 00:04:34.370
If you search statecharts with any
other language, such as C++ or Java or

69
00:04:34.370 --> 00:04:38.350
Python, you're going to see that there
are a lot of related state machine and

70
00:04:38.350 --> 00:04:40.210
statechart libraries out there.

71
00:04:40.210 --> 00:04:44.700
All the concepts that you've learned here
are directly applicable to pretty much

72
00:04:44.700 --> 00:04:48.120
anything that has to do with
statecharts and state machines.

73
00:04:48.120 --> 00:04:52.107
Additionally, there's a spec called SCXML,

74
00:04:52.107 --> 00:04:57.300
it was finalized in 2015,
it's a W3C recommendation.

75
00:04:57.300 --> 00:05:02.322
And If you have the time to look
through this ginormous spec,

76
00:05:02.322 --> 00:05:09.280
it is a spec for statechart, state
machine notation for control abstraction.

77
00:05:09.280 --> 00:05:15.315
And essentially, just like it says, it's
a way of abstracting state machines and

78
00:05:15.315 --> 00:05:21.590
statecharts in, well, XML, which I was
gonna say is not really favorable anymore.

79
00:05:21.590 --> 00:05:24.570
But with JSX,
it is pretty favorable now, I guess.

80
00:05:24.570 --> 00:05:28.440
And this is a way of defining

81
00:05:28.440 --> 00:05:33.750
your machines in an abstract way that
could be transported between languages.

82
00:05:33.750 --> 00:05:36.234
And so that's one of my goals with xstate,

83
00:05:36.234 --> 00:05:38.787
is to enable you to
define these machines and

84
00:05:38.787 --> 00:05:43.357
statecharts in a way that could be used
in any framework or no framework at all.

85
00:05:43.357 --> 00:05:45.951
And in fact, if you look at SCXML,

86
00:05:45.951 --> 00:05:51.170
you're going to see a lot of these
things mapped directly to xstate.

87
00:05:51.170 --> 00:05:53.461
And that's the secret of xstate,

88
00:05:53.461 --> 00:05:57.915
is that xstate is based pretty much
completely on this SCXML spec.

89
00:05:57.915 --> 00:06:02.870
xstate doesn't invent anything,
it doesn't introduce anything new.

90
00:06:02.870 --> 00:06:08.340
In fact, it even uses the same
algorithms that SCXML uses.

91
00:06:08.340 --> 00:06:14.240
And so if you're really interested, you
could dive in here into the pseudocode,

92
00:06:14.240 --> 00:06:17.830
and see how exactly these algorithms work.

93
00:06:17.830 --> 00:06:22.654
And so you could see that xstate
is complex because there's a lot

94
00:06:22.654 --> 00:06:26.058
to learn here, but
it is also standardized.

95
00:06:26.058 --> 00:06:29.790
It's based on a spec, and it's also
compatible with other languages too.

96
00:06:33.977 --> 00:06:36.836
So Johan says xstate
visualization will help for

97
00:06:36.836 --> 00:06:40.680
the library to become used more and
more, and that's very true.

98
00:06:40.680 --> 00:06:44.590
I am working on newer visualizers for
xstate,

99
00:06:44.590 --> 00:06:48.150
both for dev tools,
ones that you can embed anywhere.

100
00:06:48.150 --> 00:06:53.065
And also an update to xstate-viz,
which is the visualizer used on

101
00:06:53.065 --> 00:06:58.660
xstate.js.org/viz.

102
00:06:58.660 --> 00:07:01.510
So this is using an older version
of xstate, and pretty soon,

103
00:07:01.510 --> 00:07:03.159
this is going to have an upgraded version.

104
00:07:04.680 --> 00:07:09.870
All right, so with all of that said,
there's three great resources for you.

105
00:07:09.870 --> 00:07:13.742
In fact, there's a lot of resources,
but the three that I always point to

106
00:07:13.742 --> 00:07:17.379
are the world of statecharts,
which is statecharts.github.io.

107
00:07:17.379 --> 00:07:22.009
The Spectrum community, where you
could join and talk about statecharts,

108
00:07:22.009 --> 00:07:24.262
at spectrum.chat/statecharts.

109
00:07:24.262 --> 00:07:28.717
And also the xstate documentation,
which that link is broken.

110
00:07:28.717 --> 00:07:36.640
The xstate documentation, which has a lot
of really useful resources for you too.

111
00:07:36.640 --> 00:07:38.870
So if you go to About &gt; Tutorials,

112
00:07:38.870 --> 00:07:44.300
you will see a long list of tutorials, and
more are going to be added pretty soon.

113
00:07:44.300 --> 00:07:46.920
There's lots of videos and tutorials and

114
00:07:46.920 --> 00:07:49.315
different ways that
people are using xstate.

115
00:07:49.315 --> 00:07:52.785
xstate is useful both in the front end and
the back end too.

116
00:07:52.785 --> 00:07:56.948
And in fact, xstate is useful for,
if you just want to model something,

117
00:07:56.948 --> 00:08:01.677
even if you're not intending on using it
in JavaScript, or using it in your apps.

118
00:08:01.677 --> 00:08:06.069
You could just play around and verify that
your model of how some logic is supposed

119
00:08:06.069 --> 00:08:08.410
to work is actually
the way it should work.

120
00:08:08.410 --> 00:08:11.908
Kevin asked about xstate 5.0.

121
00:08:11.908 --> 00:08:15.299
So with xstate 5,
which is coming in a couple months,

122
00:08:15.299 --> 00:08:17.824
we're still working pretty hard on it.

123
00:08:17.824 --> 00:08:24.700
xstate 5 is going to introduce a major,
major simplification.

124
00:08:24.700 --> 00:08:28.440
First of all, it's going to take
the approach that everything is an actor.

125
00:08:28.440 --> 00:08:32.910
So the core API of xstate is
not going to change by much.

126
00:08:32.910 --> 00:08:35.870
Everything is still going to
feel pretty much the same.

127
00:08:35.870 --> 00:08:40.137
But it's going to be treating actors
in a much more simplified way.

128
00:08:40.137 --> 00:08:43.594
Working with actors in xstate is
definitely a big learning curve.

129
00:08:43.594 --> 00:08:48.842
And with xstate version 5 it's going to
be closer to the pure actor model and

130
00:08:48.842 --> 00:08:55.540
strongly influenced by Akka, which is a
very popular actor model in Java or Scala.

131
00:08:55.540 --> 00:08:57.960
So there's also going to be

132
00:08:57.960 --> 00:09:02.310
a size reduction because xstate
version 5 is going to be modular.

133
00:09:02.310 --> 00:09:03.560
If you just need the machine and

134
00:09:03.560 --> 00:09:06.730
you don't need the interpreter,
you could import just the machine.

135
00:09:06.730 --> 00:09:10.594
If you need certain features but
wanna leave certain features out,

136
00:09:10.594 --> 00:09:13.248
you only need to import
exactly what you need.

137
00:09:13.248 --> 00:09:20.048
So xstate version 5 is also gonna come
with a lot of compatibility between

138
00:09:20.048 --> 00:09:25.216
other tools, such as PlantUML and
full SC XML support.

139
00:09:25.216 --> 00:09:29.889
So that you could translate xstate
machines to SC XML, and even use those

140
00:09:29.889 --> 00:09:35.640
SC XML definitions in any other language
or library that supports SC XML..

141
00:09:35.640 --> 00:09:39.810
And you'd be surprised, there's quite
a few libraries that support SC XML.

142
00:09:39.810 --> 00:09:44.708
There's many other really interesting
topics related to statecharts and

143
00:09:44.708 --> 00:09:46.970
xstate that are worth exploring.

144
00:09:46.970 --> 00:09:51.036
Such as automated tests with
model-based testing, as well as

145
00:09:51.036 --> 00:09:55.805
analysis automatically generating
analytics from state transitions.

146
00:09:55.805 --> 00:10:00.856
And also being able to predict
which states can be traveled to,

147
00:10:00.856 --> 00:10:02.868
depending on your user.

148
00:10:02.868 --> 00:10:06.020
Also, visualization is a huge topic.

149
00:10:06.020 --> 00:10:08.964
There's the xstate visualizer, but

150
00:10:08.964 --> 00:10:14.122
xstate is also compatible with
many other visualizers out there.

151
00:10:14.122 --> 00:10:16.302
And yeah, there's also a lot of tools and

152
00:10:16.302 --> 00:10:20.720
a lot of different ways that you can
integrate xstate into your applications.

153
00:10:20.720 --> 00:10:24.050
So I highly encourage
you to check them out.

154
00:10:24.050 --> 00:10:28.220
And if you are interested
in more of these topics,

155
00:10:28.220 --> 00:10:33.690
please let me know or let Frontend Masters
know, and we will talk about it.

156
00:10:33.690 --> 00:10:35.190
That is the end of my workshop.

157
00:10:35.190 --> 00:10:39.110
I hope that you learned a lot
about state machines, statecharts,

158
00:10:39.110 --> 00:10:42.570
a little bit of computer science,
and xstate.

159
00:10:42.570 --> 00:10:45.990
And so I'm really glad that
you all were able to attend.

160
00:10:45.990 --> 00:10:51.238
And I will be available anywhere on
the Internet at DavidKPiano if you want to

161
00:10:51.238 --> 00:10:56.240
ask me any sort of question, or
just talk about any sort of topic with me.

162
00:10:57.830 --> 00:10:59.140
I hope you enjoyed it, thank you.

