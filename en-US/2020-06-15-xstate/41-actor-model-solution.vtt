WEBVTT

1
00:00:00.030 --> 00:00:03.111
So let's take a look at
the JavaScript file, first.

2
00:00:06.473 --> 00:00:10.800
All right, in this file we
have a random fetch function.

3
00:00:10.800 --> 00:00:16.000
All this function does, is it creates
a new promise that randomly fails or

4
00:00:16.000 --> 00:00:19.000
succeeds after 2 seconds.

5
00:00:20.540 --> 00:00:24.870
Now remember before over here, when we
were defining a promise state machine,

6
00:00:24.870 --> 00:00:31.350
we said something like on resolve,
go to result.

7
00:00:32.560 --> 00:00:37.730
And we might have something here,
where we say target pending

8
00:00:41.800 --> 00:00:45.830
actions, start fetching or
something like that.

9
00:00:45.830 --> 00:00:48.480
Or we might even have that
action in the entry of pending.

10
00:00:48.480 --> 00:00:51.520
So we could say entry: startFetching.

11
00:00:53.830 --> 00:00:58.280
However, recall that this is
a fire-and-forget action.

12
00:00:58.280 --> 00:01:01.210
It's not expected that this
could return anything.

13
00:01:01.210 --> 00:01:06.140
In fact, if this takes a really long
time and we go to a different state,

14
00:01:06.140 --> 00:01:09.620
then we might get an event when we're
in a completely different state,

15
00:01:09.620 --> 00:01:13.240
where that event might cause
something unexpected to happen.

16
00:01:13.240 --> 00:01:17.270
So in general,
when you are invoking something that might

17
00:01:17.270 --> 00:01:21.590
call the machine back with an event,
you want to invoke it instead.

18
00:01:21.590 --> 00:01:23.256
So here's what invoking looks like.

19
00:01:26.158 --> 00:01:30.160
So invoke is an object that
takes in a source, and

20
00:01:30.160 --> 00:01:34.880
this is what creates the thing
that can be invoked.

21
00:01:34.880 --> 00:01:38.500
Just like everything else in ex-date,
the arguments, passages,

22
00:01:38.500 --> 00:01:41.830
function are the same,
it's context and event.

23
00:01:41.830 --> 00:01:45.970
We're not using context or
events in this particular scenario, so

24
00:01:45.970 --> 00:01:48.550
we could just ignore both of them.

25
00:01:48.550 --> 00:01:50.880
Over here,
we're going to return that promise and

26
00:01:50.880 --> 00:01:54.210
we're going to say,
we're using that promise as a source.

27
00:01:55.550 --> 00:02:01.850
So we call when we return randomFetch.

28
00:02:01.850 --> 00:02:07.070
So this is going to return with either
a message saying the fetch failed, or

29
00:02:07.070 --> 00:02:09.520
a response saying that
the fetch succeeded.

30
00:02:11.020 --> 00:02:13.316
Now there's two other
properties in invoke.

31
00:02:13.316 --> 00:02:18.860
There's onDone and
onDone is just your normal transition so

32
00:02:18.860 --> 00:02:22.620
we could go to resolve over here.

33
00:02:22.620 --> 00:02:26.230
And there's also onError, so

34
00:02:26.230 --> 00:02:30.410
when an error happens,
we go to target rejected.

35
00:02:32.560 --> 00:02:34.980
Now again, this is sugar for

36
00:02:34.980 --> 00:02:40.510
what XState is doing internally,
there's no new concepts here.

37
00:02:40.510 --> 00:02:46.140
Because each of these onDone and onError
is the same thing as having a special

38
00:02:46.140 --> 00:02:50.480
like, done dots invoke dot and

39
00:02:50.480 --> 00:02:56.310
then whatever the name of this invoke is,
so whatever, then we go to result.

40
00:02:56.310 --> 00:03:01.340
So you could just consider both of
those exactly the same thing onDone

41
00:03:01.340 --> 00:03:05.840
is a transition that accepts
an event from this exact source, and

42
00:03:05.840 --> 00:03:09.680
it goes to the state and it could
additionally perform other actions.

43
00:03:09.680 --> 00:03:12.850
In fact over here, let's add an action,

44
00:03:12.850 --> 00:03:17.820
which takes the events and logs it,
just so we see what we're working with.

45
00:03:20.370 --> 00:03:21.610
Okay, let's try this out.

46
00:03:24.510 --> 00:03:27.730
So here I have a special box
it says click to fetch and so

47
00:03:27.730 --> 00:03:33.740
when we click, goes pending and
after two seconds it goes to result.

48
00:03:33.740 --> 00:03:36.430
So let's take a look at
the events that we got back.

49
00:03:37.740 --> 00:03:42.260
Like I said it's a special XState events
we have done invoke machine pending

50
00:03:42.260 --> 00:03:43.780
invocation zero.

51
00:03:43.780 --> 00:03:49.270
This is just a unique identifier for
specifying that exact invocation.

52
00:03:49.270 --> 00:03:52.610
And so we have this data in
the event that the fetch succeeded.

53
00:03:52.610 --> 00:03:58.020
So we could use that, of course,
we might want to fetch again.

54
00:03:58.020 --> 00:04:03.620
So let's go ahead and add transitions and
both resolved and rejected to fetch again.

55
00:04:03.620 --> 00:04:07.234
We could say, onFetch,

56
00:04:07.234 --> 00:04:11.371
go back not idle, pending.

57
00:04:14.658 --> 00:04:22.340
So now you could see, That it goes
to rejected remember, it's random.

58
00:04:22.340 --> 00:04:26.386
So eventually we'll get a result but
you could see that the behavior for

59
00:04:26.386 --> 00:04:30.851
both resolved and rejected is that we
go back to pending, which really works.

60
00:04:33.621 --> 00:04:38.277
Now another interesting thing is that in
this pending states, because we don't

61
00:04:38.277 --> 00:04:43.310
handle the fetch events, it won't do
anything if we try clicking it again.

62
00:04:43.310 --> 00:04:48.180
So that's going to avoid a really common
problem that I see even in software

63
00:04:48.180 --> 00:04:53.160
today where if you click a button
that says submit, your users

64
00:04:53.160 --> 00:04:56.860
might accidentally click in more than one
time, especially if they're frustrated.

65
00:04:56.860 --> 00:05:01.980
And because of that, you're going to get
a lot of unnecessary API requests and

66
00:05:01.980 --> 00:05:05.290
even worse,
some unintended side effects of that.

67
00:05:05.290 --> 00:05:14.164
So if I say console.logFetching,

68
00:05:14.164 --> 00:05:18.770
we see that this fetching
happens only once.

69
00:05:19.860 --> 00:05:23.990
And so we're not handling that
at the event handler level,

70
00:05:23.990 --> 00:05:28.630
now we're handling that at
the state level, and so

71
00:05:28.630 --> 00:05:31.540
that's one way that you could
prevent bugs like that.

72
00:05:34.030 --> 00:05:39.100
So one other thing about invoke
is that whatever is invoked

73
00:05:39.100 --> 00:05:44.179
inside whether it's a promise,
a machine, an observable or a callback,

74
00:05:45.400 --> 00:05:49.760
those will get cancelled and
cleaned up as soon as you leave the state.

75
00:05:49.760 --> 00:05:55.490
So that is a special property of
invocations is that when you leave

76
00:05:55.490 --> 00:06:01.450
pending, this invoke only lasts for
as long as it's in its parent state.

77
00:06:02.470 --> 00:06:06.500
So let's say that we,
we have a cancel event so

78
00:06:06.500 --> 00:06:10.470
on cancel, let's go to idle.

79
00:06:11.680 --> 00:06:16.505
And of course, we need to map this to
something, so let's make a new button.

80
00:06:16.505 --> 00:06:20.610
Let's call it all cancel and
we could say cancel,

81
00:06:20.610 --> 00:06:25.305
cancel equals
document.querySelector(cancel) and

82
00:06:25.305 --> 00:06:28.050
we could create that real quick.

83
00:06:28.050 --> 00:06:32.020
So cancel and then int our HTML,

84
00:06:32.020 --> 00:06:35.698
we could add a cancel button so

85
00:06:35.698 --> 00:06:41.740
we have to say button id = "cancel",
Cancel.

86
00:06:43.490 --> 00:06:46.185
Okay, looks a little bit weird,
but that's okay.

87
00:06:46.185 --> 00:06:51.460
That's what breaks are for, doesn't
quite work here cuz we're using Flexbox.

88
00:06:51.460 --> 00:06:56.310
Anyway, so when we click the fetch,
we can cancel that and

89
00:06:56.310 --> 00:07:00.770
that's not doing anything because
I don't think that, that's right.

90
00:07:00.770 --> 00:07:04.450
So we have an ID, yeah,
we have to save, don't we?

91
00:07:04.450 --> 00:07:10.300
Okay, cool so, you see,
we have canceled that promise.

92
00:07:12.300 --> 00:07:14.930
And the way that this works inside

93
00:07:14.930 --> 00:07:19.570
is that XState is going to
still let the promise happen.

94
00:07:19.570 --> 00:07:23.480
But whatever the result of the promises,
it's just going to discard it.

95
00:07:23.480 --> 00:07:26.240
So that's how cancellation
works in that scenario.

96
00:07:27.412 --> 00:07:33.060
X-rays asks, does it feel like an actor
is something similar to a thunk?

97
00:07:33.060 --> 00:07:37.610
So thunks aren't exactly the same
thing as actors, thunks can be,

98
00:07:37.610 --> 00:07:44.250
thunks a thunk in Redux is a fire and
forget action.

99
00:07:44.250 --> 00:07:47.342
So it's not really related
to actors because you cannot

100
00:07:47.342 --> 00:07:49.659
communicate directly back with a thunk.

101
00:07:49.659 --> 00:07:54.274
A thunk might also, well,
a thunk can dispatch multiple times, but

102
00:07:54.274 --> 00:07:58.980
there's also no concept of cancellation or
a life-cycle of a thunk.

103
00:07:58.980 --> 00:08:02.531
So Johan asks,
an actor can also queue a message,

104
00:08:02.531 --> 00:08:07.522
in the actor model in other
implementations such as Akka or Erlang, or

105
00:08:07.522 --> 00:08:11.342
elixir, Orleans or
any of these other actor models.

106
00:08:11.342 --> 00:08:15.876
Yes, the actors do in fact,
cue messages and then they,

107
00:08:15.876 --> 00:08:18.540
they play them one at a time.

108
00:08:18.540 --> 00:08:23.332
And so that's how they work internally,
your actors can work however they want

