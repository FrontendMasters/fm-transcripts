WEBVTT

1
00:00:00.160 --> 00:00:04.080
There have been a few
questions in the chat about

2
00:00:04.080 --> 00:00:07.310
invoking other things such as
observables and call backs.

3
00:00:07.310 --> 00:00:11.330
So I want to demonstrate
how that works exactly.

4
00:00:14.980 --> 00:00:20.480
So let's go to our original exercise,
we saw that we could return a promise

5
00:00:21.690 --> 00:00:26.620
from the invoke source in X sate,
intuitively knows

6
00:00:26.620 --> 00:00:31.470
what that promises and how to
basically grabbing events from that.

7
00:00:31.470 --> 00:00:33.900
But we can also invoke a callback.

8
00:00:35.220 --> 00:00:36.680
And so this is useful.

9
00:00:36.680 --> 00:00:42.390
This is very useful for a wide variety of
scenarios when you might not exactly have

10
00:00:42.390 --> 00:00:47.600
a promise which will send back at most
one value in observable which could send

11
00:00:47.600 --> 00:00:52.666
back between zero and an infinite number
of values but cannot receive any values.

12
00:00:52.666 --> 00:00:59.000
And in machines, which could send back and
forth events in a very structured way.

13
00:01:00.370 --> 00:01:06.580
So a callback takes two parameters and
I'm just going to call the first one,

14
00:01:06.580 --> 00:01:11.337
send back because we're sending
it back to the parents and

15
00:01:11.337 --> 00:01:14.269
also we are going to have a receive.

16
00:01:16.769 --> 00:01:21.339
All right, so this might look a little
bit weird because we have a function

17
00:01:21.339 --> 00:01:26.060
that's calling a function, but
this is the callback source.

18
00:01:26.060 --> 00:01:29.610
And so we could say set timeout and

19
00:01:29.610 --> 00:01:35.540
we could send back, let's actually
send back a different type of event.

20
00:01:35.540 --> 00:01:38.529
So we're going to send back

21
00:01:40.671 --> 00:01:46.987
An event with type,

22
00:01:46.987 --> 00:01:50.340
I am done.

23
00:01:50.340 --> 00:01:55.200
And so we could say instead
of this unresolved, resolved,

24
00:01:55.200 --> 00:02:00.600
we could say on I am done,
we could have resolved.

25
00:02:00.600 --> 00:02:03.130
And so
let's have that happen after two seconds.

26
00:02:03.130 --> 00:02:05.250
Again, we're not using
the promise anymore.

27
00:02:07.120 --> 00:02:08.560
So let's see I am done.

28
00:02:10.950 --> 00:02:14.250
All right, so
now when we click after two seconds,

29
00:02:14.250 --> 00:02:16.790
it's going to send back
that I am done events.

30
00:02:16.790 --> 00:02:21.020
And so we could see we received that I
am done events from the callback and

31
00:02:21.020 --> 00:02:24.690
we transition to the results dates.

32
00:02:24.690 --> 00:02:29.890
You could invoke callbacks and you could
also receive events from callbacks.

33
00:02:29.890 --> 00:02:36.470
So, what we could do, is we could wait
to receive an event from the machine,

34
00:02:36.470 --> 00:02:41.760
and then only when we receive that
event do we send back that call back.

35
00:02:41.760 --> 00:02:44.390
And so we do that using receive, and

36
00:02:44.390 --> 00:02:47.310
receive is the second
argument that's passed in.

37
00:02:47.310 --> 00:02:54.880
So what receive is going to do,
it's going to receive an event.

38
00:02:56.120 --> 00:03:03.680
And so we say,
if (event.type is 'SEND_IT_ALREADY").

39
00:03:03.680 --> 00:03:08.010
So if our parent machine sends this
call back a send it already event,

40
00:03:08.010 --> 00:03:10.590
then we will send back I am done.

41
00:03:12.610 --> 00:03:19.762
And so now we could See,

42
00:03:19.762 --> 00:03:25.420
yeah, let's do that, so
we could let's see on I am done.

43
00:03:25.420 --> 00:03:29.600
Cancel, all right,
we're gonna change this cancel events and

44
00:03:29.600 --> 00:03:33.110
we're going to say, send it already.

45
00:03:33.110 --> 00:03:36.340
So you could just imagine that
Cancel button being like all right,

46
00:03:36.340 --> 00:03:37.340
you know what, nevermind.

47
00:03:37.340 --> 00:03:41.496
But then it says send it already and
then the callback says I am done.

48
00:03:41.496 --> 00:03:47.310
So, we click here and
now it's waiting for us.

49
00:03:47.310 --> 00:03:50.940
To send that, SEND-IT-ALREADY events,
which we do here, and

50
00:03:50.940 --> 00:03:56.100
it should go to I am done,
let's see, we have sent it already.

51
00:03:56.100 --> 00:04:01.210
Okay, so, SEND-IT-ALREADY is being
sent to the parents machine, and

52
00:04:01.210 --> 00:04:05.720
not to this callback, so we need some
sorta way, of referencing that callback.

53
00:04:06.820 --> 00:04:07.710
And here's how we do it.

54
00:04:08.940 --> 00:04:14.460
In our invoke objects, we could give it an
ID of something, it doesn't matter what,

55
00:04:14.460 --> 00:04:19.000
let's call this B,
we'll just call it child for now.

56
00:04:21.400 --> 00:04:27.111
So when we get this
send it already Events.

57
00:04:27.111 --> 00:04:32.020
There's a new action creator
that we could use called send.

58
00:04:33.500 --> 00:04:36.040
And so we get sent from X Sates.

59
00:04:36.040 --> 00:04:38.790
And remember,
this is just an action creator.

60
00:04:38.790 --> 00:04:41.840
So we could say actions.

61
00:04:41.840 --> 00:04:47.086
And we could send and we're going to send

62
00:04:47.086 --> 00:04:55.850
the event type sent it already
We're gonna send it to the child.

63
00:04:58.160 --> 00:05:00.280
So this might look interesting to you.

64
00:05:00.280 --> 00:05:05.740
But this send action creator is
a special action creator that

65
00:05:05.740 --> 00:05:10.810
creates an XState.send action, and
it's telling the machine I want you

66
00:05:10.810 --> 00:05:17.940
to send this event to this child
which we specified with that ID.

67
00:05:17.940 --> 00:05:18.860
So let's see if that works.

68
00:05:20.060 --> 00:05:22.870
If we click here, click Cancel.

69
00:05:22.870 --> 00:05:28.370
It's going to go to result because
it's going to send the child

70
00:05:28.370 --> 00:05:32.690
to send it already events and this
child is going to send back I am done.

71
00:05:32.690 --> 00:05:37.790
And then that is going to
transition to resolve.

72
00:05:37.790 --> 00:05:40.490
So this is more of an advanced topic.

73
00:05:40.490 --> 00:05:45.982
You could learn more about it over here,
in, If you go to the documentation and

74
00:05:45.982 --> 00:05:50.560
you go to invoking services,
you could see the different types of

75
00:05:50.560 --> 00:05:55.661
services you can invoke Promises
callbacks, observables and machines

