WEBVTT

1
00:00:00.230 --> 00:00:06.348
Let's see what we get when we
transition with this feedback machine.

2
00:00:06.348 --> 00:00:11.761
So in order to transition,
we could use two types of syntax.

3
00:00:11.761 --> 00:00:15.182
We could first just say
when this event happens and

4
00:00:15.182 --> 00:00:17.470
give it the key of the siblings.

5
00:00:17.470 --> 00:00:20.210
So in this case,
the sibling of question is form.

6
00:00:20.210 --> 00:00:24.029
So we could say when we click DAD,
we go to form.

7
00:00:24.029 --> 00:00:28.830
Thanks is also a sibling, so
when we click good, we go to thanks.

8
00:00:30.390 --> 00:00:32.870
And there's two types of syntax for that.

9
00:00:32.870 --> 00:00:36.040
This is just a shorthand for this.

10
00:00:36.040 --> 00:00:39.130
So instead of saying, just the string, so

11
00:00:39.130 --> 00:00:43.890
we could say on: CLICK_GOOD,
we go to the form.

12
00:00:44.980 --> 00:00:46.650
This is just shorthand for

13
00:00:46.650 --> 00:00:52.750
having target form, where target
is the target sibling state mode.

14
00:00:52.750 --> 00:00:53.730
So just like that.

15
00:00:57.895 --> 00:01:03.450
And so let's actually dive into what
is in the state object that's returned.

16
00:01:03.450 --> 00:01:05.330
We're gonna start with the initial state.

17
00:01:05.330 --> 00:01:10.092
So let's log
the feedbackmachine.initialState and

18
00:01:10.092 --> 00:01:12.582
see what our first state is.

19
00:01:15.275 --> 00:01:18.160
All right, so we have a bunch
of things happening over here.

20
00:01:18.160 --> 00:01:24.910
First, we have the state value,
which is what state we're currently on.

21
00:01:24.910 --> 00:01:27.050
In this case,
we are in the question state.

22
00:01:27.050 --> 00:01:32.541
Which makes sense because that's the first
state that we specified in initial.

23
00:01:34.362 --> 00:01:36.082
We also have a few other things here.

24
00:01:36.082 --> 00:01:37.553
We have events.

25
00:01:37.553 --> 00:01:42.340
This is a special internal event
that says the machine just started.

26
00:01:42.340 --> 00:01:47.330
Any event that you pass in will appear in
the events property of your state object.

27
00:01:48.650 --> 00:01:52.989
For now you don't really
have to worry about any of

28
00:01:52.989 --> 00:01:57.342
the other properties except for
value in events.

29
00:02:03.474 --> 00:02:08.602
All right, so in events, something that
we sent in the machine, can either be

30
00:02:08.602 --> 00:02:14.180
a plain string which represents the events
type or it could be an event object.

31
00:02:14.180 --> 00:02:16.886
If you've come from Redux or NgRx or

32
00:02:16.886 --> 00:02:19.375
ViewX, this might seem
very familiar to you.

33
00:02:19.375 --> 00:02:24.340
An event is an object with a type and
the type represents the type or

34
00:02:24.340 --> 00:02:25.820
name of that event.

35
00:02:26.850 --> 00:02:31.110
So let's go ahead and make an event.

36
00:02:31.110 --> 00:02:35.356
So let's say const clickGoodEvents =, and

37
00:02:35.356 --> 00:02:39.946
we're gonna just give it
a type of CLICK_GOOD.

38
00:02:42.008 --> 00:02:48.790
Okay, so now let's get the next date after
we transition from the initial state.

39
00:02:48.790 --> 00:02:55.310
So that's going to be const nextState
= feedbackmachine.transition.

40
00:02:55.310 --> 00:02:59.122
And the first argument is going to be
the current state which should feel

41
00:02:59.122 --> 00:03:00.084
familiar to you.

42
00:03:00.084 --> 00:03:05.718
So feedbackmachine.initialState because
we're starting from the very beginning,

43
00:03:05.718 --> 00:03:08.239
and we send it that CLICK_GOOD event.

44
00:03:08.239 --> 00:03:11.191
So that's console.log(nextState).

45
00:03:15.770 --> 00:03:19.850
Okay, so we could see that we
have the nextState of form,

46
00:03:19.850 --> 00:03:24.590
which is a bit unexpected, and
this is why it's good to test.

47
00:03:24.590 --> 00:03:28.228
So we see over here it's because on
CLICK_GOOD, we're going to form.

48
00:03:28.228 --> 00:03:31.522
We could change that easily and
say go to thanks.

49
00:03:31.522 --> 00:03:34.580
So now we're in the thanks state.

50
00:03:34.580 --> 00:03:37.810
And we have our events over here.

51
00:03:37.810 --> 00:03:41.470
Now the reason why it's an object
is because we could pass

52
00:03:41.470 --> 00:03:44.190
in different payloads for the events.

53
00:03:44.190 --> 00:03:48.835
And this is going to be important in
future sections when we get to conditional

54
00:03:48.835 --> 00:03:53.194
transitions, or we wants to update
something beyond the finite state,

55
00:03:53.194 --> 00:03:54.921
such as the extended state.

56
00:03:54.921 --> 00:03:57.710
So we could say, type: CLICK_GOOD.

57
00:03:57.710 --> 00:04:01.480
And we could just say time: Date.now.

58
00:04:01.480 --> 00:04:03.090
And so once we do that,

59
00:04:03.090 --> 00:04:07.880
we'll see that the event now has
that extra property over there.

60
00:04:07.880 --> 00:04:09.350
And you could read in that property.

