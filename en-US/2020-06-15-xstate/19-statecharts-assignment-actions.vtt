WEBVTT

1
00:00:00.870 --> 00:00:04.070
Finite state machines are fine.

2
00:00:04.070 --> 00:00:08.060
But you're going to quickly run
into a scaling problem with them.

3
00:00:08.060 --> 00:00:12.683
Because you're going to have many
states that have many connections

4
00:00:12.683 --> 00:00:16.906
between the states and
you have no way of neatly grouping them or

5
00:00:16.906 --> 00:00:21.688
representing that more than one state
can be active at the same time even

6
00:00:21.688 --> 00:00:24.175
though it is still one finite state.

7
00:00:24.175 --> 00:00:27.080
And so that's what statecharts solve.

8
00:00:27.080 --> 00:00:30.250
statecharts were invented
by David Harel around 1985.

9
00:00:30.250 --> 00:00:32.940
He wrote a paper called Statecharts,

10
00:00:32.940 --> 00:00:36.909
a Visual Formalism for
Complex Systems in 1987.

11
00:00:38.860 --> 00:00:42.090
David Harel is a mathematician and
a professor and

12
00:00:42.090 --> 00:00:46.850
he's been working in a lot
on this modeling stuff,

13
00:00:46.850 --> 00:00:51.470
especially with statecharts and behavioral
programming, and things like that.

14
00:00:51.470 --> 00:00:55.425
And so
I highly encourage you to read this paper,

15
00:00:55.425 --> 00:00:58.710
Statecharts, a Visual Formalism for
Complex Systems,

16
00:00:58.710 --> 00:01:05.310
because this is the paper that basically
describes how statecharts came to be.

17
00:01:05.310 --> 00:01:09.060
It describes the problem with
traditional state machine notation.

18
00:01:09.060 --> 00:01:15.820
And it also includes a lot of great
graphics on describing these statecharts.

19
00:01:15.820 --> 00:01:20.040
A lot of what is in this paper
is already in use today.

20
00:01:20.040 --> 00:01:25.300
UML which stands for universal
modeling language, has adopted many

21
00:01:25.300 --> 00:01:30.300
of the many of the syntaxes and
the idiosyncrasies of statecharts

22
00:01:30.300 --> 00:01:35.840
as defined in this paper in the UML model.

23
00:01:35.840 --> 00:01:40.664
And so, a lot of this stuff will
seem very familiar if you do have

24
00:01:40.664 --> 00:01:42.401
experience with UML.

25
00:01:42.401 --> 00:01:48.336
And so statecharts are more
than just state machines.

26
00:01:48.336 --> 00:01:53.314
In the paper, we see that they are state
machines or state diagrams with depth,

27
00:01:53.314 --> 00:01:58.050
which means that you can have
states that are inside of states.

28
00:01:58.050 --> 00:01:59.600
I know this might sound complex, but

29
00:01:59.600 --> 00:02:03.170
just think of it as a nicer
way of organizing your states.

30
00:02:03.170 --> 00:02:08.450
You could also have orthogonality,
which represents a combinatorial explosion

31
00:02:08.450 --> 00:02:13.870
of states in a much more concise format,
and also broadcast communication.

32
00:02:13.870 --> 00:02:17.150
That's something we're going to be
talking at the end of this workshop,

33
00:02:17.150 --> 00:02:22.060
where we could have state machines that
actually talk to other state machines,

34
00:02:22.060 --> 00:02:24.920
back and forth using message passing.

35
00:02:24.920 --> 00:02:27.551
So I highly encourage
you to read this paper,

36
00:02:27.551 --> 00:02:32.471
there's a lot of really cool examples,
like this citizen stopwatch where pressing

37
00:02:32.471 --> 00:02:35.241
each of the buttons does
a different thing, and

38
00:02:35.241 --> 00:02:39.883
if you've had a digital watch before,
you'll immediately recognize this and

39
00:02:39.883 --> 00:02:44.560
be like, okay, so this turns the screen
on, this sets my alarm on or off, etc.

40
00:02:44.560 --> 00:02:48.370
And these could all be represented
visually with these statecharts.

41
00:02:49.380 --> 00:02:55.780
Now, statecharts can be
transformed to state machines.

42
00:02:55.780 --> 00:02:59.270
So, think of statecharts and
state machines as

43
00:02:59.270 --> 00:03:03.590
equivalents in the sense that they
could be transformed to each other.

44
00:03:03.590 --> 00:03:07.280
Statecharts don't
introduce anything outside

45
00:03:07.280 --> 00:03:12.730
of what a state machine is fundamentally,
it's just a better way of representing

46
00:03:12.730 --> 00:03:16.180
complex state machines that could
have many, many, many states.

47
00:03:18.580 --> 00:03:24.252
So one of the most important concepts
of statecharts are extended states.

48
00:03:24.252 --> 00:03:28.150
And so, let's take this light
bulb machine for instance.

49
00:03:28.150 --> 00:03:31.990
Let's say that we're in
the initial turned off states, and

50
00:03:31.990 --> 00:03:36.240
then we turn it on, and
we might have a turn on action as well.

51
00:03:36.240 --> 00:03:38.330
And when we're in the turned on states,

52
00:03:38.330 --> 00:03:41.950
once we toggle that light bulb,
we go to the turned off again.

53
00:03:41.950 --> 00:03:48.060
Now, this is great, but light bulbs
don't really have an infinite lifespan,

54
00:03:48.060 --> 00:03:52.340
especially if you have one of the older
ones instead of the LED ones.

55
00:03:52.340 --> 00:03:54.160
They eventually break, right?

56
00:03:54.160 --> 00:03:57.790
And so, we keep track, somehow,

57
00:03:57.790 --> 00:04:01.190
of how many times we actually
toggle the light bulb.

58
00:04:02.540 --> 00:04:07.020
Now there's a difference between
finite state and extended states.

59
00:04:07.020 --> 00:04:11.740
Finite states,
you could think of as qualitative data.

60
00:04:11.740 --> 00:04:15.170
So that's data where it's either on or
it's off.

61
00:04:15.170 --> 00:04:19.360
It describes the thing, and
when we talked about this before,

62
00:04:19.360 --> 00:04:21.820
we said it describes the behavior.

63
00:04:21.820 --> 00:04:25.350
So a light bulb behaves
differently when it's turned off

64
00:04:25.350 --> 00:04:26.659
versus when it's turned on.

65
00:04:28.690 --> 00:04:32.640
Now, extended state
describes quantitative data.

66
00:04:32.640 --> 00:04:35.570
So this is data that's
potentially infinite.

67
00:04:35.570 --> 00:04:38.299
And the combination of
that qualitative and

68
00:04:38.299 --> 00:04:41.478
that quantitative data
makes the overall states.

69
00:04:41.478 --> 00:04:46.381
And so your application, or any
application, any software, any hardware,

70
00:04:46.381 --> 00:04:52.100
any electronic thing, isn't just a finite
state and it shouldn't just be data.

71
00:04:52.100 --> 00:04:57.310
It is a combination of how it behaves at
a certain period of time, which is its

72
00:04:57.310 --> 00:05:04.270
finite state, and any data related to that
finite state, which is its extended state.

73
00:05:04.270 --> 00:05:07.840
So, in this case,
counts could be potentially infinite.

74
00:05:07.840 --> 00:05:10.545
And so, that's why we have
this in extended states.

75
00:05:10.545 --> 00:05:16.270
The next state, we call this context
because it's considered contextual states.

76
00:05:16.270 --> 00:05:20.190
It's not called data because we
use data for something else.

77
00:05:20.190 --> 00:05:25.179
But you could just think of this as
contextual state that represents

78
00:05:25.179 --> 00:05:30.370
the potentially infinite state and
any other data that occurs in your app.

79
00:05:33.160 --> 00:05:36.950
Now, what good is extended state
if we can't actually change it?

80
00:05:36.950 --> 00:05:39.200
So that's where assignment comes in.

81
00:05:39.200 --> 00:05:44.360
Now, assignments to extended state,
it is a side effect.

82
00:05:44.360 --> 00:05:47.910
So instantly you should be
thinking that's an action.

83
00:05:47.910 --> 00:05:48.550
And in fact,

84
00:05:48.550 --> 00:05:53.680
the next state, we have an assigned
action creator, which does just that.

85
00:05:53.680 --> 00:05:58.932
So we have a context with the counts
of zero, and we're going to create

86
00:05:58.932 --> 00:06:04.170
an assign action over here,
which adds one to that context.

87
00:06:04.170 --> 00:06:09.050
Now, ideally,
assign actions are pure functions, or

88
00:06:09.050 --> 00:06:13.610
they're objects where each of
the properties represents a slice of

89
00:06:13.610 --> 00:06:16.800
that context,
which itself is a pure function.

90
00:06:16.800 --> 00:06:21.270
And the reason is because we want to
keep track of the previous state and

91
00:06:21.270 --> 00:06:25.740
the current state without mutating
the context of the previous states too.

92
00:06:25.740 --> 00:06:31.340
So just like Redux, NgRx, View X,
you want your assignments to be pure.

93
00:06:31.340 --> 00:06:32.260
In this case,

94
00:06:32.260 --> 00:06:37.410
we're telling it that the counts, which is
right over here, should be incremented.

95
00:06:37.410 --> 00:06:42.962
So whenever we go into the turned on
state, this entry action will be executed.

96
00:06:42.962 --> 00:06:49.635
And this entry action is going
to increment the counts by 1.

97
00:06:49.635 --> 00:06:51.400
So we'll see an example
of that in a minute.

98
00:06:53.230 --> 00:06:59.400
So in the assignAction,
there's two ways of writing it.

99
00:06:59.400 --> 00:07:03.450
This way is preferable, when you have
a context which has potentially many

100
00:07:03.450 --> 00:07:06.740
properties, you could specify
changes to just one or

101
00:07:06.740 --> 00:07:11.010
a few of those properties by
passing an object to assign.

102
00:07:11.010 --> 00:07:15.979
Now there's two types of assignments,
there's a static assignment,

103
00:07:15.979 --> 00:07:19.327
which says assign this
static value to message.

104
00:07:19.327 --> 00:07:21.889
Could be a string, number, Boolean,

105
00:07:21.889 --> 00:07:26.690
array, objects, whatever,
anything besides a function.

106
00:07:26.690 --> 00:07:32.090
Now when it's a function, that function
is going to take the current context and

107
00:07:32.090 --> 00:07:35.120
the events that triggered
that assign action.

108
00:07:35.120 --> 00:07:40.250
And in this case,
we are basing the counts assignments

109
00:07:40.250 --> 00:07:44.750
on the current context.counts
in the events.value.

110
00:07:44.750 --> 00:07:47.988
And so
we'll see an example of that in a minute.

111
00:07:47.988 --> 00:07:52.984
And so this is the object syntax for
defining an assign action.

112
00:07:54.714 --> 00:08:00.720
Now, in more advanced use cases,
you could actually pass in a function.

113
00:08:00.720 --> 00:08:04.640
And this function is going to take
the same two things, the context and

114
00:08:04.640 --> 00:08:10.910
the event, and it's going to return the
part of context that you want to update.

115
00:08:10.910 --> 00:08:14.170
So in this case,
we are setting the message to Hello,

116
00:08:14.170 --> 00:08:16.090
we're doing the same thing as before, and

117
00:08:16.090 --> 00:08:21.990
we're setting counts to the current
context.counts and the events value.

118
00:08:23.380 --> 00:08:27.770
So, what's the difference between
this function assignment,

119
00:08:27.770 --> 00:08:31.480
wholesale function assignment,
and the object syntax?

120
00:08:31.480 --> 00:08:35.700
Well, we could take
a look in the visualizer.

121
00:08:37.490 --> 00:08:39.240
So, I'm gonna reload the visualizer.

122
00:08:40.460 --> 00:08:44.970
And, we're going to see that over here,
we're keeping track of retries over here.

123
00:08:47.010 --> 00:08:51.775
So when we get to the failure state,
let's say we reject,

124
00:08:51.775 --> 00:08:59.730
we retry it again, and that's going
to increment the retry number.

125
00:08:59.730 --> 00:09:03.960
Now notice over here that it says,
assign retries.

126
00:09:03.960 --> 00:09:07.550
So it knows exactly which
property is being assigned.

127
00:09:09.220 --> 00:09:13.860
However, if we instead pass in a function,

128
00:09:17.709 --> 00:09:25.789
So we could return retries
to context.retries + 1.

129
00:09:25.789 --> 00:09:32.400
Tab that, expected token return,
aha, forgot my curly braces.

130
00:09:34.360 --> 00:09:37.120
Cool, and this should probably
be curly braces as well.

131
00:09:38.850 --> 00:09:42.990
All right, now it just says assign, and
the reason it says assign is because

132
00:09:42.990 --> 00:09:47.880
it can't predict ahead of time what
it's going to be assigning to.

133
00:09:47.880 --> 00:09:53.190
And so that's why in order to make your
machine definitions a lot more clear,

134
00:09:53.190 --> 00:09:57.880
you want to specify it as an object
syntax because you want to say

135
00:09:57.880 --> 00:10:01.830
these are the only properties of
context that I'm going to update.

136
00:10:01.830 --> 00:10:07.430
So in general, prefer the objects syntax
over the wholesale function syntax.

