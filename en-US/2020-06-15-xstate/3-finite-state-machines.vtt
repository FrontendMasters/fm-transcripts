WEBVTT

1
00:00:00.350 --> 00:00:04.510
So let's go into a little
bit of graph theory.

2
00:00:04.510 --> 00:00:08.840
Our applications are structured as graphs,
believe it or not.

3
00:00:08.840 --> 00:00:15.830
So, a graph is a mathematical concept
which is made of nodes and edges.

4
00:00:15.830 --> 00:00:21.100
Each node is connected by an edge,
or a node might not be connected,

5
00:00:21.100 --> 00:00:27.100
but in this graph example,
we have four nodes a, b, c, and d.

6
00:00:27.100 --> 00:00:30.780
And a and
b are connected to each other by an edge.

7
00:00:30.780 --> 00:00:33.970
So you could consider
the edge the way that a and

8
00:00:33.970 --> 00:00:37.000
b could move between each other.

9
00:00:37.000 --> 00:00:40.270
And so b and
c are also connected by an edge as well.

10
00:00:40.270 --> 00:00:43.290
B and d, and same with a and d.

11
00:00:43.290 --> 00:00:47.440
Now this is called an undirected
graph because we don't have an arrow.

12
00:00:47.440 --> 00:00:50.110
A could go to b, b could go to a.

13
00:00:50.110 --> 00:00:53.280
But graphs are a really
good visual model for

14
00:00:53.280 --> 00:00:57.090
thinking about how your application
flows should be structured.

15
00:00:58.820 --> 00:01:01.830
Now, directed graphs
are a little bit different.

16
00:01:01.830 --> 00:01:07.340
We also have nodes and edges, or you'll
see in some math textbooks, vertices and

17
00:01:07.340 --> 00:01:12.650
edges, but with a direction on the edge.

18
00:01:12.650 --> 00:01:16.780
So we could have a node a, a node b, and

19
00:01:16.780 --> 00:01:21.220
we could say a could go to b,
but b can't go to a.

20
00:01:22.260 --> 00:01:24.670
And so this is where we get paths.

21
00:01:24.670 --> 00:01:29.920
So for example, if we want a to go to c,
we could see that we could go from a to b,

22
00:01:29.920 --> 00:01:32.390
and then b to c.

23
00:01:32.390 --> 00:01:34.130
But there's another
path we could take too.

24
00:01:34.130 --> 00:01:40.190
We go from a to d, and we could also
go from d to b, and then from b to c.

25
00:01:41.630 --> 00:01:45.900
And so this shows you, hopefully,

26
00:01:45.900 --> 00:01:50.860
how you could structure your
application flows as a directed graph.

27
00:01:50.860 --> 00:01:53.970
For example, your application
might have a login screen.

28
00:01:53.970 --> 00:01:56.900
And then once you've logged in,
you might go to

29
00:01:56.900 --> 00:02:01.450
an error screen if the login is incorrect,
or you might go to the dashboard.

30
00:02:01.450 --> 00:02:05.029
So that could be represented as
a directed graph where login is a node,

31
00:02:05.029 --> 00:02:07.970
error is a node, and dashboard is a node.

32
00:02:07.970 --> 00:02:10.360
And then when you log
out from the dashboard,

33
00:02:10.360 --> 00:02:13.230
you have an arrow going back to login.

34
00:02:13.230 --> 00:02:16.400
There's three types of
nodes in a directed graph.

35
00:02:16.400 --> 00:02:20.537
There's a source node,
where we have no incoming edges.

36
00:02:20.537 --> 00:02:24.167
There's a sink node where
we have no outgoing edges.

37
00:02:24.167 --> 00:02:29.110
So you can see, once we reach this c node,
there's no way that we could exit it.

38
00:02:29.110 --> 00:02:33.080
There's nothing going out from c.

39
00:02:33.080 --> 00:02:36.320
And then all of the other nodes
are called transfer nodes.

40
00:02:36.320 --> 00:02:40.330
And transfer nodes allow
you to go in between nodes.

41
00:02:40.330 --> 00:02:45.250
So they have at least
one incoming edge and

42
00:02:45.250 --> 00:02:48.630
at least one outgoing edge.

43
00:02:48.630 --> 00:02:51.853
So if you've ever seen the finite
state machine diagram,

44
00:02:51.853 --> 00:02:57.500
you might immediately recognize now that
finite state machines are directed graphs.

45
00:02:57.500 --> 00:03:01.198
Finite state machines
are considered a quintuple,

46
00:03:01.198 --> 00:03:04.398
which means they have
five important parts.

47
00:03:04.398 --> 00:03:08.375
But before we get into that,
I just want you to take a look at this and

48
00:03:08.375 --> 00:03:11.640
try to think about how
the state machine works.

49
00:03:11.640 --> 00:03:14.130
This is a state machine
representing a promise,

50
00:03:14.130 --> 00:03:17.480
which as a web developer you
might be dealing with every day.

51
00:03:18.630 --> 00:03:20.567
So our first state is idle, and

52
00:03:20.567 --> 00:03:25.568
we could see that we have an arrow going
from idle to pending on the fetch events.

53
00:03:25.568 --> 00:03:30.133
And then pending to resolve or
pending to reject, or

54
00:03:30.133 --> 00:03:34.117
pending to resolved or
pending to rejected.

55
00:03:34.117 --> 00:03:37.753
And we see that in this particular graph,
we can't go back.

56
00:03:37.753 --> 00:03:42.720
So we can't go from resolved to pending
and we can't go from rejected to pending.

57
00:03:42.720 --> 00:03:46.170
So this is sort of our intuition for
how the graph works.

58
00:03:46.170 --> 00:03:48.430
Let's dissect it and
take a look at each of the parts.

59
00:03:50.280 --> 00:03:55.518
So the first part of a finite state
machine is, of course, the finite states.

60
00:03:55.518 --> 00:04:01.672
Now, the word states has sort of been
using many different ways in programming,

61
00:04:01.672 --> 00:04:07.118
but in this case we're going to consider
states like a mode or a status.

62
00:04:07.118 --> 00:04:13.950
A state is something where you could only
exist in one mode or status at a time.

63
00:04:15.060 --> 00:04:19.620
For example, I could be sleeping or
I could be awake.

64
00:04:19.620 --> 00:04:21.780
I can't be both sleeping and awake.

65
00:04:21.780 --> 00:04:26.936
That's impossible unless you have
some sort of medical condition.

66
00:04:26.936 --> 00:04:33.305
But let's just consider for ease of
thinking that I'm either asleep or awake.

67
00:04:33.305 --> 00:04:36.185
I could transition between
the asleep state and

68
00:04:36.185 --> 00:04:40.500
the awake state, or I could go from
the awake state to the asleep state.

69
00:04:40.500 --> 00:04:47.600
Now, these finite states don't describe
what's called extended states such as

70
00:04:47.600 --> 00:04:52.410
my name, my age, other things
that might be possibly infinite.

71
00:04:54.150 --> 00:04:58.060
Not that I could live for an infinite
number of years, but one could hope.

72
00:04:59.870 --> 00:05:02.220
So there's also transitions.

73
00:05:02.220 --> 00:05:04.350
Transitions are how you go between states.

74
00:05:04.350 --> 00:05:08.430
So for instance, we have idle to pending,
pending to resolved, and

75
00:05:08.430 --> 00:05:09.820
pending to rejected.

76
00:05:09.820 --> 00:05:14.050
Again, this is a directed graph, so
you can't go back from pending to idle.

77
00:05:15.740 --> 00:05:22.120
There's also events, and events are labels
on these edges, these transitions,

78
00:05:22.120 --> 00:05:28.060
which tell you how one state could
go from that state to another state.

79
00:05:28.060 --> 00:05:30.730
For example, in the idle state,

80
00:05:30.730 --> 00:05:35.680
we could only go to the pending
state when a fetch event happens.

81
00:05:35.680 --> 00:05:40.870
And so, this is considered
the transition between those states.

82
00:05:40.870 --> 00:05:45.840
And similarly,
from pending we could go to resolved or

83
00:05:45.840 --> 00:05:48.280
we could go to rejected depending
on which event happens.

84
00:05:50.130 --> 00:05:54.740
So, every single state machine
starts with an initial state, and

85
00:05:54.740 --> 00:05:57.550
there's only ever one initial state.

86
00:05:57.550 --> 00:06:01.510
So when you walk up to an ATM or

87
00:06:01.510 --> 00:06:05.780
when you turn on your TV,
that state is the initial state.

88
00:06:05.780 --> 00:06:09.970
And it's basically how it starts
to work and accept events.

89
00:06:09.970 --> 00:06:14.340
So this is why we have what's called
a pseudo transition over here,

90
00:06:14.340 --> 00:06:16.802
which is a dot with a very small arrow.

91
00:06:16.802 --> 00:06:21.260
And that indicates that this is the first
or initial state of your state machine.

92
00:06:23.480 --> 00:06:27.600
We also have final states, which we're not
gonna cover too much in this workshop.

93
00:06:27.600 --> 00:06:31.870
And final states represents the fact
that once you reach these states,

94
00:06:31.870 --> 00:06:34.260
your state machine is considered done.

95
00:06:34.260 --> 00:06:39.117
It can no longer accept any events and
it can no longer transition to any states.

96
00:06:39.117 --> 00:06:44.350
In classic finite state machines,
these are also known as accepting states.

97
00:06:44.350 --> 00:06:50.770
So fun fact, regex or regular expressions
are a form of a finite state machine.

98
00:06:50.770 --> 00:06:53.636
And when you reach the end
of a regular expression,

99
00:06:53.636 --> 00:06:55.912
that can be considered its final state.

100
00:06:55.912 --> 00:07:01.315
And so once you reach the final state,
that means that the string which is parsed

101
00:07:01.315 --> 00:07:06.236
by the regular expression is accepted,
or it's rejected if it doesn't

102
00:07:06.236 --> 00:07:11.093
reach one of those final states, but
the goal is to reach a final state.

103
00:07:11.093 --> 00:07:15.296
Now because we're working with web
applications, which might have many states

104
00:07:15.296 --> 00:07:19.621
and might have continuous user behavior
where we don't really have a defined end,

105
00:07:19.621 --> 00:07:22.370
we're not gonna be covering
final states too much.

