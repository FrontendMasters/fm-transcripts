WEBVTT

1
00:00:00.060 --> 00:00:05.160
I'll be making all of the code sandboxes
that I demonstrated and more available in

2
00:00:05.160 --> 00:00:10.760
the repository, the Frontend
Masters XState Workshop repository,

3
00:00:10.760 --> 00:00:14.440
and they're going to be made available
in the XState documentation.

4
00:00:14.440 --> 00:00:16.020
If you go to examples,

5
00:00:16.020 --> 00:00:21.480
you're going to see a lot of examples such
as to do MVC with both react and view.

6
00:00:21.480 --> 00:00:25.840
As well as a calculator, and if you've
ever tried to program a calculator like

7
00:00:25.840 --> 00:00:29.750
the classic ones where you have buttons
that you push, you're going to realize

8
00:00:29.750 --> 00:00:34.350
that it's a lot harder than it seems
because you have to handle edge cases

9
00:00:34.350 --> 00:00:38.030
such as what if they press the plus
sign before they press any numbers?

10
00:00:38.030 --> 00:00:39.720
What if they press minus twice?

11
00:00:39.720 --> 00:00:41.670
What if they divide by zero?

12
00:00:41.670 --> 00:00:43.300
What if they do things out of order?

13
00:00:43.300 --> 00:00:45.580
What if they do five plus clear?

14
00:00:45.580 --> 00:00:47.540
What is the behavior there?

15
00:00:47.540 --> 00:00:52.260
And so that's why modeling
a calculator as a state chart

16
00:00:52.260 --> 00:00:56.760
is a really useful technique to
really organize your states and

17
00:00:56.760 --> 00:01:01.930
prevents those impossible states and
transitions and edge cases from happening.

18
00:01:01.930 --> 00:01:05.000
So there's also a variety
of tutorials here.

19
00:01:05.000 --> 00:01:09.010
This Reddit API tutorial is
taken from the Redux docs,

20
00:01:09.010 --> 00:01:12.600
except it's implemented
with actors instead of

21
00:01:14.530 --> 00:01:18.030
how Redux does it where it just
keeps it in the same object and

22
00:01:18.030 --> 00:01:22.440
doing that makes it a lot more performant
because now every single state update that

23
00:01:22.440 --> 00:01:27.320
happens in one of those actors
doesn't directly affect the parents

24
00:01:27.320 --> 00:01:32.900
unless that child actor directly
sends an event over to the parents.

25
00:01:32.900 --> 00:01:39.370
So, just to quickly go over that, there's
a section here called Using Actors.

26
00:01:39.370 --> 00:01:43.720
And so the way that this works is
we're going to spawn an actor for

27
00:01:43.720 --> 00:01:48.760
each one of these subreddits such
as react, view, and frontend.

28
00:01:48.760 --> 00:01:53.040
And so what each of these does is
each of these actors has its own

29
00:01:53.040 --> 00:01:56.250
responsibility of loading
that subreddit data.

30
00:01:56.250 --> 00:02:01.090
And then once it gets that data, it
sends a message right back to the reddit

31
00:02:01.090 --> 00:02:05.465
parents machine that says, hey,
I have the data, here you go.

32
00:02:05.465 --> 00:02:11.320
And so, instead of using invoke,
this uses spawn to do that.

33
00:02:11.320 --> 00:02:15.670
So you could consider spawn
to be very similar to invoke.

34
00:02:15.670 --> 00:02:20.610
With spawn,
you give it the source that you want and

35
00:02:20.610 --> 00:02:24.650
you assign that directly in context.

36
00:02:24.650 --> 00:02:28.680
So you're using a sign like normal,
but instead of it being

37
00:02:28.680 --> 00:02:33.040
just a normal object or an array, now this
is a live actor that you could talk to.

38
00:02:34.770 --> 00:02:41.460
And so the only difference between
spawn and invoke is that invoked actors

39
00:02:41.460 --> 00:02:47.140
are immediately stopped whenever you
exit the states and spawned actors,

40
00:02:47.140 --> 00:02:51.630
since they could be spawned at any
time due to some events happening,

41
00:02:51.630 --> 00:02:58.321
they are alive for an indefinite period
of time until the machine is stopped.

42
00:02:58.321 --> 00:03:02.090
So if the parent machine is stopped,
it's going to stop all those actors

43
00:03:02.090 --> 00:03:07.060
inside as well, so it doesn't have as
well a defined life cycle as invoke.

44
00:03:07.060 --> 00:03:11.100
And so that's why I say,
always prefer invoke over spawn.

45
00:03:11.100 --> 00:03:16.059
Spawn is more for
a dynamic number of actors that you might

46
00:03:16.059 --> 00:03:21.016
want to spawn, and invoke is for
you want a single actor or

47
00:03:21.016 --> 00:03:26.929
a set number of actors that are active
only within a specific state.

