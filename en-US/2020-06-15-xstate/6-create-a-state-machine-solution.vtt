WEBVTT

1
00:00:00.230 --> 00:00:01.170
Welcome back.

2
00:00:01.170 --> 00:00:02.700
If you didn't finish the exercise,

3
00:00:02.700 --> 00:00:04.820
that's okay because we're
going to be doing it together.

4
00:00:06.250 --> 00:00:10.430
By the way, in your index.js there's
a lot of helpful comments and

5
00:00:10.430 --> 00:00:14.620
in the index.final.js that's going to
really help you when you get stuck

6
00:00:14.620 --> 00:00:18.350
because that contains the pretty
much the answer to everything.

7
00:00:19.740 --> 00:00:24.240
So first let's take a look
about how we could use

8
00:00:24.240 --> 00:00:28.810
a nested switch statements in
order to transition our machine.

9
00:00:28.810 --> 00:00:32.660
So, I'm just gonna copy paste this over.

10
00:00:35.148 --> 00:00:39.350
And so
you see we're switching on the states.

11
00:00:39.350 --> 00:00:44.260
If it's inactive, and we get a CLICK,
which I named uppercase CLICK,

12
00:00:44.260 --> 00:00:46.650
then we return the active state.

13
00:00:46.650 --> 00:00:50.030
If we're in the active states, and

14
00:00:50.030 --> 00:00:54.180
we get a CLICK,
then we go to the inactive states.

15
00:00:54.180 --> 00:00:57.180
Now we need some way of keeping
track of each of these states.

16
00:00:57.180 --> 00:01:00.010
So we could say like
currentState equals inactive

17
00:01:00.010 --> 00:01:01.780
because that's going to
be our initial state.

18
00:01:03.000 --> 00:01:08.106
And then we determine the next
value of currentState by

19
00:01:08.106 --> 00:01:14.220
saying const nextState equals
transition currentState event.

20
00:01:14.220 --> 00:01:18.460
And this is going to return the nextState
based on the currentState in the event or

21
00:01:18.460 --> 00:01:23.490
it's just going to return the currentState
if there is no nextState.

22
00:01:23.490 --> 00:01:26.830
So once we determine the nextState,
we need to keep track of it.

23
00:01:26.830 --> 00:01:30.700
So we'll set currentState
equal to the nextState.

24
00:01:31.710 --> 00:01:34.890
And then we could change
the data states property.

25
00:01:34.890 --> 00:01:40.570
Or the data state attribute of the box
elements to that current states,

26
00:01:40.570 --> 00:01:44.350
which is really cool,
because it's a very easy way in JavaScript

27
00:01:44.350 --> 00:01:47.300
in order to put those attributes
right on the elements.

28
00:01:47.300 --> 00:01:53.260
And so the last thing we need to do is we
need to actually send that CLICK event.

29
00:01:53.260 --> 00:01:56.860
So whenever this box is clicked,
we're going to send that event and

30
00:01:56.860 --> 00:02:02.720
hopefully it's going to change,
but start it's okay to start.

31
00:02:04.910 --> 00:02:08.560
Again, if you see that error,
you could just save and it goes away.

32
00:02:08.560 --> 00:02:14.200
And so now when you click, we'll see
that it moves from active to inactive,

33
00:02:14.200 --> 00:02:16.540
to active and back to inactive.

34
00:02:19.360 --> 00:02:21.420
So let's talk about this a little more.

35
00:02:21.420 --> 00:02:23.080
What we're doing is we're

36
00:02:24.670 --> 00:02:29.750
literally reducing our logic in our
event handlers to just one thing.

37
00:02:29.750 --> 00:02:30.770
We're sending in events.

38
00:02:30.770 --> 00:02:32.240
That's all we're doing.

39
00:02:32.240 --> 00:02:37.660
And we're sending it to the central
place that contains all of our logic.

40
00:02:37.660 --> 00:02:40.520
Now, of course, these switch
statements are pretty verbose.

41
00:02:40.520 --> 00:02:42.530
So if you did the extra credit,

42
00:02:42.530 --> 00:02:46.130
you hopefully you got
the objects in text down.

43
00:02:46.130 --> 00:02:53.960
So let's sort of redo all of this and
actually use object syntax.

44
00:02:53.960 --> 00:02:57.150
So instead of this,
we wants to create the machine.

45
00:02:57.150 --> 00:03:03.010
So we're going to say const machine
equals and we're going to have an object.

46
00:03:03.010 --> 00:03:07.170
The initial state is going to be inactive
and there's going to be two states.

47
00:03:07.170 --> 00:03:11.390
There's going to be the inactive state and
the active state.

48
00:03:13.610 --> 00:03:17.495
In the inactive state, when we receive
a CLICK, we go to the active state.

49
00:03:17.495 --> 00:03:21.080
Similarly, in the active state,

50
00:03:21.080 --> 00:03:25.770
when we receive a CLICK,
we go to the inactive states.

51
00:03:25.770 --> 00:03:29.178
And so the role of the transition
is to read this object and

52
00:03:29.178 --> 00:03:31.955
determine the next state
based on the events.

53
00:03:31.955 --> 00:03:39.520
So we could do that by saying,
return machine.states,

54
00:03:39.520 --> 00:03:43.640
we get the states .on events.

55
00:03:43.640 --> 00:03:48.333
And if that doesn't return anything,
then we just return the states.

56
00:03:51.997 --> 00:03:54.780
And so hopefully we didn't
have to change anything else.

57
00:03:54.780 --> 00:03:57.680
So that should work exactly the same way.

58
00:03:57.680 --> 00:04:01.913
Let's console.log the nextState,
just to make sure.

59
00:04:04.331 --> 00:04:09.220
All right, so we're transitioning back and
forth between active and inactive.

60
00:04:10.270 --> 00:04:14.702
By the way, if you want to know
how I showed this at the bottom,

61
00:04:14.702 --> 00:04:19.063
by using the data-state attribute
if we go into the styles.

62
00:04:20.950 --> 00:04:25.448
We can see that we're actually
outputting that data state

63
00:04:25.448 --> 00:04:30.600
attribute right on to the elements
of data states right over here.

64
00:04:30.600 --> 00:04:33.300
We have an after pseudo elements, and

65
00:04:33.300 --> 00:04:35.660
we could just put that
data-state right there.

66
00:04:35.660 --> 00:04:39.250
And this makes it really easy
to inspect what the state is.

