WEBVTT

1
00:00:00.300 --> 00:00:04.720
For exercise number 7, we wanna do
something a little bit different.

2
00:00:04.720 --> 00:00:08.197
Right now,
the box is draggable by absolutely anyone.

3
00:00:08.197 --> 00:00:13.180
What we want to do is we wanna use
transient transitions to determine if

4
00:00:13.180 --> 00:00:14.450
there's a user.

5
00:00:14.450 --> 00:00:19.409
And if there is not a user,
then we don't want the box to be draggable

6
00:00:19.409 --> 00:00:23.620
because we want to make sure
that the user is authorized.

7
00:00:23.620 --> 00:00:29.699
So what we're going to do is we're going
to add a transient transition over here.

8
00:00:29.699 --> 00:00:35.080
And this transient transition is going
to be in this checkingAuth state.

9
00:00:36.650 --> 00:00:42.090
And the purpose of this is to determine
whether there's a user or not.

10
00:00:42.090 --> 00:00:43.240
If there is a user,

11
00:00:43.240 --> 00:00:47.630
then we go immediately to the idle state
where the user is allowed to drag.

12
00:00:48.690 --> 00:00:53.180
And if there isn't a user,
then we go to some unauthorized state.

13
00:00:53.180 --> 00:00:56.990
Now, in the unauthorized states, you
shouldn't be able to drag or do anything.

14
00:00:56.990 --> 00:00:58.980
So we're going to be testing that out.

15
00:00:58.980 --> 00:01:01.968
So let's first add our
transient transition.

16
00:01:01.968 --> 00:01:05.761
It's going to be on, and
the event is just an empty string.

17
00:01:05.761 --> 00:01:10.354
And that's to signify that it is
a transient transition that is

18
00:01:10.354 --> 00:01:13.656
immediately taken once
we enter this state.

19
00:01:13.656 --> 00:01:18.856
And so we're going to be adding
some transitions here, but

20
00:01:18.856 --> 00:01:25.098
let's go ahead and add our unauthorized
state first, unauthorized.

21
00:01:25.098 --> 00:01:27.630
And let's test this out real quick.

22
00:01:27.630 --> 00:01:32.635
So if we go and
start in the unauthorized state,

23
00:01:32.635 --> 00:01:38.517
we should see that now we have
this nice sign in button and

24
00:01:38.517 --> 00:01:42.160
you're not able to drag it at all.

25
00:01:45.713 --> 00:01:49.887
So we'll get the same effect
if we do an immediate or

26
00:01:49.887 --> 00:01:54.070
transient transition to
the unauthorized state.

27
00:01:54.070 --> 00:01:58.029
So let's change that and
change the initial

28
00:01:58.029 --> 00:02:02.740
states to checkingAuth just
to see that that works.

29
00:02:03.770 --> 00:02:06.180
And yeah,
we do get to the unauthorized state.

30
00:02:07.660 --> 00:02:12.180
All right, but what we wanna do is
check that the user is in context and

31
00:02:12.180 --> 00:02:13.650
it's not undefined.

32
00:02:13.650 --> 00:02:18.943
So let's go ahead and
add our transient transition.

33
00:02:18.943 --> 00:02:23.445
So we're going to check the condition.

34
00:02:23.445 --> 00:02:27.964
And remember,
each one of the guards takes two arguments

35
00:02:27.964 --> 00:02:31.838
just like everything else,
context and event.

36
00:02:31.838 --> 00:02:36.173
We're not gonna be using the event
because we're in the initial state,

37
00:02:36.173 --> 00:02:37.319
there is no event.

38
00:02:37.319 --> 00:02:41.090
But we are going to be using the context
to see if there is a context.user.

39
00:02:41.090 --> 00:02:48.380
So we could just return !!context.user
just to see if the user exists.

40
00:02:48.380 --> 00:02:54.730
You could also do context.user is not
equal to undefined or something like that.

41
00:02:54.730 --> 00:02:57.987
So this is going to be the first
transition that's checked.

42
00:02:57.987 --> 00:03:04.060
And if this condition returns true,
then we're going to go to the idle state.

43
00:03:04.060 --> 00:03:07.870
So right now, we don't have a user.

44
00:03:09.290 --> 00:03:13.020
And we see that we are in the checkingAuth
state, which means it is stuck here.

45
00:03:13.020 --> 00:03:15.371
So we need to add a default transition.

46
00:03:15.371 --> 00:03:19.619
And so
we could just say target: 'unauthorized'.

47
00:03:19.619 --> 00:03:25.170
So now this will go to the unauthorized
state because this condition is false.

48
00:03:25.170 --> 00:03:26.503
So let's test it out.

49
00:03:26.503 --> 00:03:30.380
Let's say that we have a user here,
name: 'David'.

50
00:03:32.140 --> 00:03:37.030
And we can see that it does go to
the idle state and we are able to drag.

51
00:03:37.030 --> 00:03:42.120
So how can we dynamically pass this
in now that we see that this works?

52
00:03:43.540 --> 00:03:46.970
Well, let's start with having
our user back to undefined.

53
00:03:48.240 --> 00:03:50.630
And there's really two ways
that you could do this.

54
00:03:50.630 --> 00:03:54.537
So if we see where we're using
the dragDropMachine down here.

55
00:03:54.537 --> 00:03:58.979
You could see that right now it's
just going to take those default

56
00:03:58.979 --> 00:04:00.206
context values.

57
00:04:00.206 --> 00:04:01.708
So the user is going to be undefined.

58
00:04:01.708 --> 00:04:05.342
And we're not going to be able to
track because we're gonna be in

59
00:04:05.342 --> 00:04:06.837
the unauthorized state.

60
00:04:06.837 --> 00:04:16.230
Now, we could say
dragDropMachine.withContext.

61
00:04:16.230 --> 00:04:18.298
And currently in XState,

62
00:04:18.298 --> 00:04:23.360
you have to basically provide
the entire initial context.

63
00:04:23.360 --> 00:04:29.999
So what you could do is spread
dragDropMachine.initialState.context.

64
00:04:29.999 --> 00:04:35.026
And then just provide the user,
say, I want this machine

65
00:04:35.026 --> 00:04:40.704
to have the initial context and
a user, which is not undefined.

66
00:04:43.577 --> 00:04:46.739
So that is using withContext,
and you'll see,

67
00:04:46.739 --> 00:04:49.448
since we have a user, we are able to drag.

68
00:04:49.448 --> 00:04:52.991
However, there's another way to do this.

69
00:04:52.991 --> 00:04:55.394
Instead of just providing a machine,

70
00:04:55.394 --> 00:04:58.479
we could have what's
called a machine creator.

71
00:04:58.479 --> 00:05:00.410
And this is just normal JavaScript.

72
00:05:00.410 --> 00:05:03.030
It's not something that's
a feature of XState.

73
00:05:03.030 --> 00:05:05.560
It's just a pattern that you could use.

74
00:05:05.560 --> 00:05:10.260
So instead of dragDropMachine,
I'm gonna call this createDragDropMachine.

75
00:05:10.260 --> 00:05:14.660
And so instead of just providing
the machine, going to say user.

76
00:05:15.680 --> 00:05:20.030
And then we can inject that
user directly into here.

77
00:05:20.030 --> 00:05:24.590
So this is a function that takes
in a user and returns a machine.

78
00:05:26.600 --> 00:05:31.216
So now,
instead of dragDropMachine.withContext,

79
00:05:31.216 --> 00:05:37.749
I could just say, createDragDropMachine
with my user, name: 'David'.

80
00:05:37.749 --> 00:05:42.974
And so we'll see that this now works.

