WEBVTT

1
00:00:00.160 --> 00:00:04.240
A lot of people are talking about
how to use RxJS with XSTATE.

2
00:00:04.240 --> 00:00:08.344
And the answer is that RxJS and
XSTATE work really great together,

3
00:00:08.344 --> 00:00:10.332
because they work in both ways.

4
00:00:12.700 --> 00:00:16.829
If you go to the, not the tutorials, but

5
00:00:16.829 --> 00:00:21.210
the Recipes, and you see usage with RxJS.

6
00:00:22.230 --> 00:00:23.870
The interpreted machine,

7
00:00:23.870 --> 00:00:28.450
which again is called the service,
the service itself is observable.

8
00:00:28.450 --> 00:00:31.325
Which means,
it has the subscribe method, and

9
00:00:31.325 --> 00:00:35.210
it implements the observable interface,
which means you could use this

10
00:00:35.210 --> 00:00:39.550
as something that you subscribe to,
or you can subscribe to it directly.

11
00:00:39.550 --> 00:00:45.040
And each subscription, you're going to
get the latest dates of the service.

12
00:00:45.040 --> 00:00:47.550
And so whenever a new state comes in,

13
00:00:47.550 --> 00:00:53.150
each one of the observers is going to
be notified of when that state changes.

14
00:00:53.150 --> 00:00:55.270
And also whenever you stop the service,

15
00:00:55.270 --> 00:00:59.160
it's going to clean up those
subscriptions themselves.

16
00:00:59.160 --> 00:01:05.470
Also, you can invoke observables
which is very useful as well.

17
00:01:05.470 --> 00:01:10.990
And, there's a great example of
how to do so in the tutorials or,

18
00:01:10.990 --> 00:01:16.650
sorry, in invoking services and
invoking observables.

19
00:01:18.280 --> 00:01:23.350
So in this case, we have an interval
machine where our source instead

20
00:01:23.350 --> 00:01:28.180
of being a promise, it's an interval,
and this is taken directly from RxJS.

21
00:01:28.180 --> 00:01:33.010
This interval pipes out events,
objects, which are of type Count, and

22
00:01:33.010 --> 00:01:36.910
have a value RxJS by default
increments this value.

23
00:01:36.910 --> 00:01:41.394
So this is going to be counts 1,
counts 2, counts 3, etc.

24
00:01:41.394 --> 00:01:44.990
And that most it's going
to just emit five of these,

25
00:01:44.990 --> 00:01:48.090
because of this operator over here.

26
00:01:48.090 --> 00:01:51.380
And observables have this
notion of being completed.

27
00:01:51.380 --> 00:01:58.240
So that's also going to call this
undone transition and go to finished.

28
00:01:58.240 --> 00:02:01.470
So you could see how observables and

29
00:02:01.470 --> 00:02:06.760
state machines can interoperate
between each other pretty seamlessly.

30
00:02:06.760 --> 00:02:09.550
So, someone is asking,
why angular is missing on the list.

31
00:02:09.550 --> 00:02:14.680
And that's simply because I haven't
had the time to make a recipe for

32
00:02:14.680 --> 00:02:17.480
Angular yet, but
I welcome any contributions.

33
00:02:17.480 --> 00:02:21.570
In fact, I think it should be
pretty simple since XSTATE services

34
00:02:21.570 --> 00:02:23.120
are subscribable.

35
00:02:23.120 --> 00:02:24.710
They're observable, so

36
00:02:24.710 --> 00:02:29.300
you could use them as if you would use
any observable thing in Angular JS.

