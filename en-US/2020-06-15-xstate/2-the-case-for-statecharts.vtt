WEBVTT

1
00:00:00.410 --> 00:00:04.560
So this is why we use state machines and
state charts.

2
00:00:04.560 --> 00:00:08.280
Now, first of all, state machines
are definitely not a new concept.

3
00:00:08.280 --> 00:00:14.108
They've been around since, well,
honestly since almost a century ago.

4
00:00:14.108 --> 00:00:19.226
In fact, these computers that we work on
in all of our electronics and pretty much

5
00:00:19.226 --> 00:00:24.063
everything, all of our software,
would not work without state machines.

6
00:00:24.063 --> 00:00:27.003
You could consider programming
languages state machines,

7
00:00:27.003 --> 00:00:30.346
you could consider the embedded
electronics within your computer,

8
00:00:30.346 --> 00:00:32.839
the circuitry,
those are state machines as well.

9
00:00:32.839 --> 00:00:36.672
And so state machines are such
an important model in computer science.

10
00:00:36.672 --> 00:00:40.138
However, they're not
a very easy model to grok.

11
00:00:40.138 --> 00:00:43.662
And that's because it's sort
of a mathematical model.

12
00:00:43.662 --> 00:00:47.069
And if you go to Wikipedia and
you search finite state machine,

13
00:00:47.069 --> 00:00:50.297
you're going to find a lot of
really confusing math terms.

14
00:00:50.297 --> 00:00:53.975
But I promise you,
it's worth the learning curve.

15
00:00:53.975 --> 00:00:56.897
So why would we want to use
state machines and state charts?

16
00:00:56.897 --> 00:01:01.240
One of my favorite examples is
the Curiosity Rover by NASA

17
00:01:01.240 --> 00:01:05.321
was actually programmed
using a lot of state charts.

18
00:01:05.321 --> 00:01:09.616
And they found a lot of benefits to this,
such as visualized modeling,

19
00:01:09.616 --> 00:01:13.268
which we're going to see
a demonstration of in a little bit,

20
00:01:13.268 --> 00:01:17.510
where the state machines and
state charts you make can be visualized.

21
00:01:17.510 --> 00:01:21.745
In that way, even if you give it to
someone who doesn't quite understand code

22
00:01:21.745 --> 00:01:26.175
or might not be too technical, they'll be
able to sort of understand the general

23
00:01:26.175 --> 00:01:28.994
flow of the logic and
be able to spot errors easily.

24
00:01:28.994 --> 00:01:33.183
Such as saying, this date is wrong,
this transition is wrong,

25
00:01:33.183 --> 00:01:36.144
we need to change this
without knowing code.

26
00:01:36.144 --> 00:01:38.995
And so
these precise diagrams are two ways.

27
00:01:38.995 --> 00:01:43.230
The diagrams describe the state
machine in completeness.

28
00:01:43.230 --> 00:01:45.540
So they describe every single state and

29
00:01:45.540 --> 00:01:50.580
every single transition that could happen
between the states, and the logic that's

30
00:01:50.580 --> 00:01:55.000
represented in the diagram is exactly
the logic that the code will enable.

31
00:01:56.198 --> 00:01:59.955
NASA also used automatic code generation,
in which they were

32
00:01:59.955 --> 00:02:04.363
able to programmatically draw these
state charts and state machines and

33
00:02:04.363 --> 00:02:06.615
also have that generate C++ code.

34
00:02:06.615 --> 00:02:09.071
We're not gonna do that in this course,
don't worry.

35
00:02:09.071 --> 00:02:11.248
There's also comprehensive test coverage.

36
00:02:11.248 --> 00:02:16.294
So when you know all of the states and all
the transitions between the states, you're

37
00:02:16.294 --> 00:02:21.005
able to map out every single possible way
that you can interact with the system.

38
00:02:21.005 --> 00:02:24.890
And so for coding something that's
billions of dollars, such as

39
00:02:24.890 --> 00:02:29.621
the Curiosity Rover and having a seal
deployment where if anything goes wrong,

40
00:02:29.621 --> 00:02:34.160
you just wasted a billion dollars,
that's a very, very important thing.

41
00:02:34.160 --> 00:02:38.369
Because you wanna be able to
predict everything that can happen,

42
00:02:38.369 --> 00:02:41.823
especially in an unfamiliar
territory such as Mars.

43
00:02:41.823 --> 00:02:47.197
And also, the accommodation of late
breaking requirements and changes.

44
00:02:47.197 --> 00:02:49.418
That's very important points, too,

45
00:02:49.418 --> 00:02:52.582
because we don't typically
know all of the features and

46
00:02:52.582 --> 00:02:56.300
all of the use cases our app is
going to have at the very beginning.

47
00:02:56.300 --> 00:02:57.993
If you do, you're very lucky.

48
00:02:57.993 --> 00:03:02.025
But if you don't, we need some way
of introducing those changes and

49
00:03:02.025 --> 00:03:06.768
being able to see how those changes
affects everything else that we've already

50
00:03:06.768 --> 00:03:09.974
represented in the state machines and
state charts.

51
00:03:09.974 --> 00:03:16.096
And so this becomes a lot easier
when you have a visual model and

52
00:03:16.096 --> 00:03:22.593
you have a very precise diagram
showing you what can affect what.

53
00:03:22.593 --> 00:03:26.184
Instead of having code where
the logic is spread everywhere and

54
00:03:26.184 --> 00:03:28.360
you have millions of possibilities.

