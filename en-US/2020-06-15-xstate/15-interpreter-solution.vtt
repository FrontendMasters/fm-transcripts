WEBVTT

1
00:00:00.220 --> 00:00:03.371
Let's talk about exercise number three.

2
00:00:03.371 --> 00:00:07.450
We have a little bit different logic
than we did in the first two exercises,

3
00:00:07.450 --> 00:00:11.120
where we're still going between
an inactive and an active state.

4
00:00:11.120 --> 00:00:13.780
But now we're doing it
based on two events.

5
00:00:13.780 --> 00:00:18.570
Whether there's a mousedown event,
we go from inactive to active, or

6
00:00:18.570 --> 00:00:23.000
there's a mouseup event,
in which we go from active to inactive.

7
00:00:23.000 --> 00:00:26.184
So let's go ahead and create that machine.

8
00:00:30.213 --> 00:00:34.243
So our initial state is
going to be inactive,

9
00:00:34.243 --> 00:00:40.512
just like the previous machine, and
we're going to have two states.

10
00:00:40.512 --> 00:00:45.238
We're going to have inactive and active.

11
00:00:45.238 --> 00:00:48.393
And so in each of these two states,

12
00:00:51.063 --> 00:00:57.803
We could have an event that transitions
between inactive and active.

13
00:00:57.803 --> 00:01:04.620
In the inactive states, when we have
a mousedown event, we go to active.

14
00:01:05.780 --> 00:01:08.350
Again, this is using the shorthand syntax.

15
00:01:08.350 --> 00:01:12.274
If we type target: 'active',
it's the same thing.

16
00:01:12.274 --> 00:01:17.579
So on mouseup,
we go to target: 'inactive'.

17
00:01:19.711 --> 00:01:23.066
Okay, the next step is we
want to create our service.

18
00:01:23.066 --> 00:01:26.266
So we're going to be using interpret,
which is already imported for

19
00:01:26.266 --> 00:01:27.381
you in order to do that.

20
00:01:27.381 --> 00:01:32.506
So let's do interpret, and
we're going to pull in our machine here.

21
00:01:35.147 --> 00:01:42.784
Okay, so let's talk about the difference
between createMachine and interpret.

22
00:01:42.784 --> 00:01:46.468
createMachine essentially
creates a blueprint for

23
00:01:46.468 --> 00:01:49.650
how your machine is supposed to behave.

24
00:01:49.650 --> 00:01:51.860
You could think about it
as creating a really,

25
00:01:51.860 --> 00:01:54.730
really fancy transition
function that's pure.

26
00:01:54.730 --> 00:01:56.877
It doesn't keep any internal state and

27
00:01:56.877 --> 00:02:01.367
you could share it in multiple locations
without fear of having its internal state

28
00:02:01.367 --> 00:02:04.441
changed because it doesn't
have any internal states.

29
00:02:04.441 --> 00:02:07.813
Now, a service is
an instance of that machine.

30
00:02:07.813 --> 00:02:14.021
So a service will keep track of its own
internal state as you send events to it.

31
00:02:14.021 --> 00:02:17.620
So another way you could
think of a service,

32
00:02:17.620 --> 00:02:21.912
like a singleton,
with that machine's behavior.

33
00:02:21.912 --> 00:02:26.681
Okay, the next thing we're going to do is
we're going to listen to state transitions

34
00:02:26.681 --> 00:02:31.230
and set that data state attribute, just
like we did before, on the box element.

35
00:02:31.230 --> 00:02:37.660
So we could say, service.onTransition,
and we get the state.

36
00:02:37.660 --> 00:02:38.820
So let's go ahead and

37
00:02:38.820 --> 00:02:42.951
console.log that state.value just to
make sure that things are working.

38
00:02:42.951 --> 00:02:46.090
So we're gonna start the service
over here, service.start().

39
00:02:47.210 --> 00:02:50.790
And then we're going to be sending
events over to the service.

40
00:02:51.950 --> 00:02:54.152
Now, we could send the mousedown
event like normal.

41
00:02:54.152 --> 00:02:57.524
So we could say, service.send(), and

42
00:02:57.524 --> 00:03:02.593
we could either pass a string, or
we could pass an event object.

43
00:03:02.593 --> 00:03:05.866
I prefer to be explicit,
passing things as strings or using

44
00:03:05.866 --> 00:03:10.420
the shorthand syntax is really good if
you're quickly prototyping or in a hurry.

45
00:03:10.420 --> 00:03:14.004
But in general use cases,
you want to use full objects,

46
00:03:14.004 --> 00:03:19.116
just in case you want to add payload later
or you have any other application logic

47
00:03:19.116 --> 00:03:24.325
requirements that will force you to use
an object instead of just a plain string.

48
00:03:24.325 --> 00:03:28.094
So with service.send(),

49
00:03:28.094 --> 00:03:34.132
we are going to send
an event of type mousedown.

50
00:03:34.132 --> 00:03:36.063
And we're gonna do
the same thing over here.

51
00:03:36.063 --> 00:03:40.967
So we're gonna send a mouseup event when

52
00:03:40.967 --> 00:03:44.871
we get a mouseup event on elBox.

53
00:03:44.871 --> 00:03:47.833
So let's try this out.

54
00:03:47.833 --> 00:03:52.215
We're gonna go to Exercise 03,
and we're gonna see,

55
00:03:52.215 --> 00:03:57.550
[COUGH] we're gonna see that
the state is changing in the console.

56
00:03:57.550 --> 00:04:02.483
So when I hold down my mouse, it's active,
but once I release it, it's inactive.

57
00:04:02.483 --> 00:04:07.082
So let's go ahead and put that state

58
00:04:07.082 --> 00:04:12.297
right on elBox.dataset.states, and

59
00:04:12.297 --> 00:04:17.829
we're gonna set it to that state.value.

60
00:04:17.829 --> 00:04:20.741
So now let's see what happens.

61
00:04:20.741 --> 00:04:25.621
Okay, cool, when our mouse is down,
we're in the active state, and

62
00:04:25.621 --> 00:04:29.012
keep in mind I am holding
my mouse down right now,

63
00:04:29.012 --> 00:04:32.345
and when I let go,
it's in the inactive state.

64
00:04:34.030 --> 00:04:39.481
Now, one final note, DOM events,
such as what we received

65
00:04:39.481 --> 00:04:46.480
from addEventListener, mousedown,
are also an event object.

66
00:04:46.480 --> 00:04:52.320
Curiously enough, so if we console.log
this event, we're going to see

67
00:04:52.320 --> 00:04:55.830
that we get a mouseevent, and
it has a whole bunch of things.

68
00:04:55.830 --> 00:04:58.130
So you could consider
this the event payload.

69
00:04:58.130 --> 00:05:03.490
But it also has a type, so if we go
to type, we see that it's mousedown.

70
00:05:03.490 --> 00:05:07.135
Now this is great because we could
use those DOM events directly inside

71
00:05:07.135 --> 00:05:10.350
service.send().

72
00:05:10.350 --> 00:05:12.935
So instead of having to create
a whole new event object,

73
00:05:12.935 --> 00:05:14.971
why don't we just give
it the entire event?

74
00:05:14.971 --> 00:05:17.740
So we'll give it event.

75
00:05:17.740 --> 00:05:20.120
And we'll just send the events here, too.

76
00:05:23.127 --> 00:05:26.690
So now, you see,
it works exactly the same way.

77
00:05:26.690 --> 00:05:30.717
And our code is pretty concise over here.

78
00:05:30.717 --> 00:05:33.950
All the logic is contained right up here.

79
00:05:35.510 --> 00:05:37.328
So that's exercise number three.

