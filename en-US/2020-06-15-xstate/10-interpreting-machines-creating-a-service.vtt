WEBVTT

1
00:00:00.140 --> 00:00:06.338
Transitioning we saw, we give it the
current state, and we give it the event.

2
00:00:06.338 --> 00:00:11.020
Now the event, again, can be either a
string, or it could be that event object.

3
00:00:11.020 --> 00:00:17.480
So if the event doesn't have any payload,
we could just pass in CLICK_GOOD.

4
00:00:17.480 --> 00:00:20.270
And then that should work.

5
00:00:21.860 --> 00:00:25.580
So it does take us to thanks,
which is the value over here.

6
00:00:25.580 --> 00:00:26.823
Perfect, everything is working.

7
00:00:30.987 --> 00:00:35.090
All right, but keeping track of
the state like we saw, it's hard.

8
00:00:35.090 --> 00:00:39.900
It's a little bit fragile because now you

9
00:00:39.900 --> 00:00:44.540
have this floating mutable value,
and you're not really even

10
00:00:44.540 --> 00:00:49.390
cleaning up that service that's keeping
track of the state all the time.

11
00:00:49.390 --> 00:00:54.220
So, that's why Xstate provides
an interpret function.

12
00:00:54.220 --> 00:00:57.828
And this interpret function
creates what's called a service.

13
00:00:57.828 --> 00:01:02.800
So, in Xstate lingo, a service is
a running instance of a machine.

14
00:01:02.800 --> 00:01:05.600
You could consider the machine
like a blueprint for

15
00:01:05.600 --> 00:01:07.640
how your logic is supposed to look.

16
00:01:07.640 --> 00:01:11.800
And the service is just a single
instance of that machine.

17
00:01:11.800 --> 00:01:17.110
So when you create a machine,
this is essentially a stateless

18
00:01:17.110 --> 00:01:20.080
pure object, it doesn't do anything.

19
00:01:20.080 --> 00:01:22.840
It doesn't hold any current state.

20
00:01:22.840 --> 00:01:24.950
That's what the service does.

21
00:01:24.950 --> 00:01:27.670
And so that's why you could
pass this machine back and

22
00:01:27.670 --> 00:01:29.490
forth between many things.

23
00:01:29.490 --> 00:01:31.720
It is not a mutable object.

24
00:01:31.720 --> 00:01:33.210
It's just a blueprint.

25
00:01:33.210 --> 00:01:36.229
It's a very, very fancy JSON object.

26
00:01:36.229 --> 00:01:38.870
So, this service is gonna be what we want.

27
00:01:38.870 --> 00:01:44.640
In order to create a service,
you pass in the machine to interpret.

28
00:01:44.640 --> 00:01:50.330
And then you you could listen
to state changes on that service

29
00:01:50.330 --> 00:01:56.070
by registering a state listener
in the onTransition method.

30
00:01:56.070 --> 00:01:57.890
And so whenever you get a new state,

31
00:01:57.890 --> 00:02:01.740
including the first state,
you could do whatever you want with it.

32
00:02:01.740 --> 00:02:04.410
So in this case we're just
logging it to the console.

33
00:02:04.410 --> 00:02:06.650
And then you have to start a service.

34
00:02:06.650 --> 00:02:10.470
Services don't start immediately,
and that's good because you don't

35
00:02:10.470 --> 00:02:13.860
want anything unexpected to
happen like weird timing issues.

36
00:02:13.860 --> 00:02:18.300
You want to be able to control
exactly the moments that the service

37
00:02:18.300 --> 00:02:20.290
Is actually up and running.

38
00:02:20.290 --> 00:02:24.350
So instead of doing all of this,
let's actually put this in the service.

39
00:02:24.350 --> 00:02:31.440
So I'm just going to say const
feedbackService = interpret.

40
00:02:31.440 --> 00:02:34.570
And we're going to import this
from Xstate, up above over here.

41
00:02:36.110 --> 00:02:40.640
Now, interpret takes one to two arguments.

42
00:02:40.640 --> 00:02:43.349
The only argument that we're gonna
worry about right now is the first one,

43
00:02:43.349 --> 00:02:44.209
which is that machine.

44
00:02:44.209 --> 00:02:48.557
So we pass it the feedback machine,
which again is a blueprint for

45
00:02:48.557 --> 00:02:51.017
how that service is going to behave.

46
00:02:51.017 --> 00:02:54.696
Let's add an event listener as well, so

47
00:02:54.696 --> 00:02:59.143
we could say feedbackService.onTransition.

48
00:02:59.143 --> 00:03:01.455
And we get the state.

49
00:03:01.455 --> 00:03:05.990
So let's just console.log(state.value).

50
00:03:05.990 --> 00:03:10.280
Remember that the state.value is
the current finite state value

51
00:03:10.280 --> 00:03:11.400
of that state object.

52
00:03:12.440 --> 00:03:15.964
And then we start the service.

53
00:03:19.966 --> 00:03:24.118
So you can see immediately we
get the question state and

54
00:03:24.118 --> 00:03:29.640
that's because it's going to give
us the the first state immediately.

55
00:03:29.640 --> 00:03:34.280
And if you start listening later,
it will give you the latest state.

56
00:03:34.280 --> 00:03:36.679
So remember, a service is a live instance.

57
00:03:36.679 --> 00:03:39.971
It's keeping its internal state and
it's internally mutating it.

58
00:03:39.971 --> 00:03:44.740
So it's going to give you whatever
it's instance of a status.

59
00:03:44.740 --> 00:03:46.620
You could also think of this
sort of like a singleton.

60
00:03:47.770 --> 00:03:51.224
All right, so now let's actually get
some things to happen over here.

61
00:03:51.224 --> 00:03:57.270
I'm gonna say,
window.send = feedbackService.send.

62
00:03:57.270 --> 00:04:04.250
And we're doing this because we want
to send events to the feedback service.

63
00:04:04.250 --> 00:04:09.120
So let's say we send: 'CLICK_GOOD'.

64
00:04:10.940 --> 00:04:12.010
All right, cool.

65
00:04:12.010 --> 00:04:15.100
You'll see that it transitions to thanks.

66
00:04:15.100 --> 00:04:23.320
And actually, we do have the, All right,
so yeah, so we have feedbackService.send.

67
00:04:23.320 --> 00:04:26.430
So you could just do feedbackService.send,

68
00:04:26.430 --> 00:04:30.700
which is just like your send function
that you made in the previous exercise.

69
00:04:30.700 --> 00:04:34.200
And you could send any sort
of event object to it.

70
00:04:34.200 --> 00:04:38.420
So in this case,
we're gonna send type:'CLICK_GOOD'.

71
00:04:38.420 --> 00:04:42.370
And so that, again,
is going to log things.

72
00:04:42.370 --> 00:04:45.930
Now when you're not using
a service anymore, for example,

73
00:04:45.930 --> 00:04:50.030
if this service represents something
that you only wants to exist for

74
00:04:50.030 --> 00:04:53.630
a moment in time, and
then you're done using the service.

75
00:04:53.630 --> 00:04:55.850
It's smart to call service.stop.

76
00:04:55.850 --> 00:05:01.040
What this is going to do, is it's going to
dispose of all the listeners registered

77
00:05:01.040 --> 00:05:06.325
to the service, as well as any ongoing
activities or actions or invoked services.

78
00:05:06.325 --> 00:05:08.596
Or anything else that we're gonna
cover later in this workshop.

79
00:05:08.596 --> 00:05:13.103
So, it's smart to call service.stop to
clean up everything when you're no longer

80
00:05:13.103 --> 00:05:13.680
using it.

