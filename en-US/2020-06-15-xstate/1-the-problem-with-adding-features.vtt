WEBVTT

1
00:00:00.430 --> 00:00:02.650
The way that we typically code,

2
00:00:02.650 --> 00:00:06.540
is by doing what's called
the bottom-up technique.

3
00:00:06.540 --> 00:00:10.960
And what that means is, we put all
of our application logic inside of

4
00:00:10.960 --> 00:00:15.700
the event handlers, or
wherever the pertinent user action occurs.

5
00:00:15.700 --> 00:00:19.130
For example, if we have a button,
and in fact,

6
00:00:19.130 --> 00:00:22.100
we're going to just go ahead and
make a button over here.

7
00:00:22.100 --> 00:00:27.535
So in this welcome screen,
let's add a button.

8
00:00:27.535 --> 00:00:31.844
And it's just going to say click me,

9
00:00:31.844 --> 00:00:36.740
and you'll see that the button is there.

10
00:00:36.740 --> 00:00:42.960
We'll give it an ID button
just to track it, all right.

11
00:00:42.960 --> 00:00:45.340
So you'll see a click me button over here.

12
00:00:45.340 --> 00:00:47.380
Now, generally what we do,

13
00:00:47.380 --> 00:00:52.100
is we add event handlers to things
where we want things to happen.

14
00:00:52.100 --> 00:00:54.890
So I'm gonna go ahead and
do that over here.

15
00:00:54.890 --> 00:00:59.503
I'm going to first get the button,
so const elButton equals

16
00:00:59.503 --> 00:01:04.311
documents.querySelector, and
I'm gonna just get that by.

17
00:01:04.311 --> 00:01:06.680
And then we're going to add
an event listener to that button.

18
00:01:06.680 --> 00:01:15.322
So elButton.addEventListener,

19
00:01:15.322 --> 00:01:17.342
click.

20
00:01:17.342 --> 00:01:20.644
One minute, we are going to, for example,

21
00:01:20.644 --> 00:01:25.775
console.log I am clicked.

22
00:01:25.775 --> 00:01:31.160
So when we do that,
let's open up our console and see.

23
00:01:31.160 --> 00:01:33.830
We see that the button says I am clicked.

24
00:01:33.830 --> 00:01:36.230
And so, this is generally
how we manage our states.

25
00:01:36.230 --> 00:01:40.960
We put all of our application logic,
inside of the event handlers themselves.

26
00:01:40.960 --> 00:01:43.720
Now, this isn't very maintainable for
a few reasons, but

27
00:01:43.720 --> 00:01:48.110
I'm going to demonstrate one
of the reasons why over here.

28
00:01:48.110 --> 00:01:51.990
So let's say that this button,
we want it to track, or

29
00:01:51.990 --> 00:01:57.390
we want it to actually load something from
an API, or just do something in general.

30
00:01:57.390 --> 00:02:04.160
So we could console.log, loading data,
and let's also log Date.now.

31
00:02:05.320 --> 00:02:09.210
So what this is going to do is when
we click the button, you could just

32
00:02:09.210 --> 00:02:13.790
pretend that we're loading some data,
and that's going to show up right here.

33
00:02:14.820 --> 00:02:19.090
But immediately you see the problem,
when we click that button,

34
00:02:19.090 --> 00:02:24.670
we see that we might be loading
data more times than we need to.

35
00:02:24.670 --> 00:02:26.790
And in fact, when data is loading,

36
00:02:26.790 --> 00:02:30.280
we really don't want that
button to be clickable again.

37
00:02:30.280 --> 00:02:35.520
So one of the normal things that we do,
is we will disable the button.

38
00:02:35.520 --> 00:02:45.190
So I believe it's elButton.setAttribute
disabled, we could just set that to true.

39
00:02:45.190 --> 00:02:49.825
And so, now once the button is clicked,
and I think there needs to be a string.

40
00:02:51.938 --> 00:02:54.723
It will be disabled, and so
we can no longer click it.

41
00:02:57.797 --> 00:03:02.824
In fact, You could go ahead and

42
00:03:02.824 --> 00:03:09.670
style the button so that when it
is disabled, the opacity is lower.

43
00:03:09.670 --> 00:03:13.250
So now you'll see when we click it,
nothing happens.

44
00:03:14.730 --> 00:03:16.530
But the problem with this is that,

45
00:03:16.530 --> 00:03:20.600
now your application logic
lives inside the event handler.

46
00:03:20.600 --> 00:03:24.379
And when you have more event handlers,
and more things you could do in the app,

47
00:03:24.379 --> 00:03:27.412
all of that logic is going to be
spread out throughout your app,

48
00:03:27.412 --> 00:03:29.436
instead of located in one central place.

49
00:03:31.752 --> 00:03:34.310
And so
that's what bottom-up code is about.

50
00:03:34.310 --> 00:03:36.840
It's about jumping straight into the code,

51
00:03:36.840 --> 00:03:39.990
instead of properly modeling
our application logic, so

52
00:03:39.990 --> 00:03:44.580
that we could have flexible,
maintainable, and reusable logic.

53
00:03:45.690 --> 00:03:49.859
And so this means that code that's
bottom-up, is really difficult to

54
00:03:49.859 --> 00:03:53.820
test because we have to know
exactly where all the logic lives.

55
00:03:53.820 --> 00:03:59.780
And we have to make sure that we activate
that logic in the event handler,

56
00:03:59.780 --> 00:04:02.290
instead of doing something as
simple as sending any events.

57
00:04:03.370 --> 00:04:07.200
So this also means that bottom-up
code is difficult to understand.

58
00:04:07.200 --> 00:04:12.000
And that is because when
a developer on your team asks you,

59
00:04:12.000 --> 00:04:14.770
what is the logic of this,
what's the flow of this?

60
00:04:14.770 --> 00:04:17.060
They have to look at all
of those event handlers and

61
00:04:17.060 --> 00:04:21.340
all of that spread out logic, and
sort of piece it together in their mind,

62
00:04:21.340 --> 00:04:24.470
instead of having a central
place where that logic can live.

63
00:04:24.470 --> 00:04:28.940
And so this means that your code,
almost guaranteed, will contain bugs.

64
00:04:28.940 --> 00:04:33.160
And that's because it's very hard
to find the central source of

65
00:04:33.160 --> 00:04:37.320
making sure the logic is correct, and
making sure that impossible states and

66
00:04:37.320 --> 00:04:40.310
impossible transitions can't happen.

67
00:04:40.310 --> 00:04:43.860
In fact, this means that the code
is also difficult to enhance.

68
00:04:43.860 --> 00:04:47.280
So if you have bottom-up code where
your logic is spread out through

69
00:04:47.280 --> 00:04:50.150
all of these event handlers and
all of these ad hoc places,

70
00:04:50.150 --> 00:04:55.100
like at the .then callback of the promise,
or anywhere else.

71
00:04:55.100 --> 00:04:59.840
Then, in order to add a feature, you have
to find all of those event handlers and

72
00:04:59.840 --> 00:05:02.130
all those places where the logic lives,
and

73
00:05:02.130 --> 00:05:07.920
make sure that they don't interfere
with the logic you currently have.

74
00:05:07.920 --> 00:05:11.390
You've probably run into this
before where you add a feature, and

75
00:05:11.390 --> 00:05:17.020
all of a sudden five other features don't
work anymore because of unseen bugs.

76
00:05:18.430 --> 00:05:20.900
So this is why features make it worse.

77
00:05:20.900 --> 00:05:26.280
The more features you have,
the more ways that a user or services

78
00:05:26.280 --> 00:05:30.270
with your app can interact with your app,
and the more things that can happen.

79
00:05:30.270 --> 00:05:32.700
In fact, it's combinatorially more.

80
00:05:32.700 --> 00:05:36.609
So there's this concept called
combinatorial explosion,

81
00:05:36.609 --> 00:05:41.588
where basically if you have two choices,
then that means that you really have

82
00:05:41.588 --> 00:05:45.517
four possibilities,
because it's two to the power of two.

83
00:05:45.517 --> 00:05:48.782
If you have three choices,
that's eight possibilities or

84
00:05:48.782 --> 00:05:53.170
two to the power of three, and that just
gets exponentially bigger and bigger.

85
00:05:53.170 --> 00:05:58.084
So you could consider each one of those
features, exponentially in more ways

86
00:05:58.084 --> 00:06:02.730
that the app could be represented,
and that the app could work.

87
00:06:02.730 --> 00:06:05.920
And so it's very hard to test
every single one of those flows.

88
00:06:05.920 --> 00:06:07.760
And you have to really
program defensively,

89
00:06:07.760 --> 00:06:11.460
in order to make sure that you're
not accidentally introducing bugs.

