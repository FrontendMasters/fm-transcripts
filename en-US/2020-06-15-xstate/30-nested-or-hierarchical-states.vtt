WEBVTT

1
00:00:00.550 --> 00:00:05.050
Okay, so
let's talk about hierarchical estates now.

2
00:00:05.050 --> 00:00:08.920
One of the primary features of state
charts is the fact that you could nest

3
00:00:08.920 --> 00:00:12.090
dates in each other sort
of like Russian dolls.

4
00:00:12.090 --> 00:00:17.841
Or just having a hierarchy
like you would in the DOM.

5
00:00:17.841 --> 00:00:22.660
And let's take a look at an example of
this, pretend that we have this state

6
00:00:22.660 --> 00:00:27.670
machine where we start in the hidden state
and then we go to the visible state.

7
00:00:27.670 --> 00:00:31.630
So, when the turn on event happens,
you go from hidden to visible, and

8
00:00:31.630 --> 00:00:34.800
when the turn off event happens,
you go from visible to hidden.

9
00:00:36.010 --> 00:00:41.170
Now consider that we want to have two
different modes of our visible states.

10
00:00:41.170 --> 00:00:45.570
We wanna have a light mode and
we wanna have a dark mode, and

11
00:00:45.570 --> 00:00:48.250
we could switch back and
forth between those two modes.

12
00:00:48.250 --> 00:00:51.370
So when we're in light mode and
we switch, we go to dark mode and

13
00:00:51.370 --> 00:00:55.160
when we switch from dark mode,
we go to light mode.

14
00:00:55.160 --> 00:00:59.700
Now in any of these modes,
of course, when you turn off

15
00:00:59.700 --> 00:01:03.850
this display machine, then it should
go back to the hidden states.

16
00:01:03.850 --> 00:01:07.700
But because of the way it's set up
over here, we need to define two

17
00:01:07.700 --> 00:01:12.590
transitions for each of these two states.

18
00:01:12.590 --> 00:01:19.720
So we have to say turn off for visible
lights and turn off for visible dark.

19
00:01:19.720 --> 00:01:24.040
And so these quickly get out of hand,
especially as you have more and

20
00:01:24.040 --> 00:01:27.100
more states,
as we're going to see in the next lesson.

21
00:01:27.100 --> 00:01:31.200
And so, one thing we could think about
is that these visible lights and

22
00:01:31.200 --> 00:01:34.140
visible dark states are related states.

23
00:01:34.140 --> 00:01:37.890
They both have common behavior,
and because of that,

24
00:01:37.890 --> 00:01:41.930
we could nest them in appearance state.

25
00:01:41.930 --> 00:01:44.740
So we could have a visible state, and

26
00:01:44.740 --> 00:01:49.050
this visible state can itself
have an initial state.

27
00:01:49.050 --> 00:01:51.410
So in this case, our visible state,

28
00:01:51.410 --> 00:01:55.620
you could think of it as a mini state
machine, has an initial state of light.

29
00:01:55.620 --> 00:01:59.330
And when you switch, it goes to dark, and
when you switch back, it goes to light.

30
00:02:00.460 --> 00:02:07.433
Now in any of these states when we turn
off visible, it goes back to hidden.

31
00:02:07.433 --> 00:02:12.351
And the way that that happens with state
charts is, that if we are in one of this

32
00:02:12.351 --> 00:02:16.700
states which by default we
are in the visible light state.

33
00:02:16.700 --> 00:02:22.510
Then when an event happens we check,
does this state handle that event?

34
00:02:22.510 --> 00:02:24.520
So does it handle the turn off event?

35
00:02:24.520 --> 00:02:27.000
It does not,
it only handles the switch event.

36
00:02:27.000 --> 00:02:30.430
So then we go to the parent state,
which is the visible state.

37
00:02:30.430 --> 00:02:34.410
And then we ask it do you handle
the turn off event, and it does.

38
00:02:34.410 --> 00:02:39.540
So it bubbles up from the deepest
child to the parent states,

39
00:02:39.540 --> 00:02:42.470
just like just like events
bubbling in the DOM.

40
00:02:42.470 --> 00:02:44.980
If a button doesn't
capture the click events,

41
00:02:44.980 --> 00:02:47.320
then the container of
the button will capture it.

42
00:02:47.320 --> 00:02:50.790
And if that doesn't, then it makes its
way all the way up to the body and

43
00:02:50.790 --> 00:02:54.520
the root elements, so
it happens in exactly the same way.

44
00:02:56.000 --> 00:03:01.190
Now, the way that we define
these hierarchical or

45
00:03:01.190 --> 00:03:08.500
nested states, however you want to call
them is by, I'll show you over here.

46
00:03:08.500 --> 00:03:14.340
We have our dragDropMachine, is,
let's actually define that over here.

47
00:03:14.340 --> 00:03:18.631
So let's have a displayMachine =

48
00:03:18.631 --> 00:03:22.750
createMachine, and
we have an initial state of hidden.

49
00:03:24.230 --> 00:03:29.650
Now remember we could have two states,
hidden or visible,

50
00:03:31.340 --> 00:03:36.140
and because these are objects,
they could be recursive, in a way.

51
00:03:36.140 --> 00:03:40.020
So you could define this recursively,
this visible state

52
00:03:40.020 --> 00:03:45.260
as itself having an initial state,
so initial, we could say light.

53
00:03:45.260 --> 00:03:51.086
And then we could have
two possible states,

54
00:03:51.086 --> 00:03:58.050
which is light or dark,
so let's, console.log.

55
00:03:58.050 --> 00:04:02.020
Let's actually in the visible state and
see what that looks like.

56
00:04:02.020 --> 00:04:04.644
So we're gonna
displayMachine.initialState,

57
00:04:04.644 --> 00:04:06.660
we're gonna see what that looks like.

58
00:04:07.770 --> 00:04:09.505
And so if we go to lesson number 9.

59
00:04:14.321 --> 00:04:18.250
You're going to see that the state
value looks a little bit different.

60
00:04:19.860 --> 00:04:23.770
Over here,
we have an object instead of a string, and

61
00:04:23.770 --> 00:04:26.890
that's saying that we're
in the visible states.

62
00:04:26.890 --> 00:04:31.985
And that visible state is
itself in the light state,

63
00:04:31.985 --> 00:04:36.780
and so this is a way of representing
these hierarchical states.

64
00:04:36.780 --> 00:04:43.255
Because if we go deeper,
let's say we have initial one,

65
00:04:43.255 --> 00:04:48.190
states, we'll just have one over here.

66
00:04:50.220 --> 00:04:53.620
Then we can see that that
state value is visible,

67
00:04:53.620 --> 00:04:58.040
light, one, and
it's represented as an object.

68
00:04:58.040 --> 00:05:00.630
Because we could also have
orthogonal states and

69
00:05:00.630 --> 00:05:03.880
objects naturally
represents orthogonality.

70
00:05:03.880 --> 00:05:10.884
But just for now, This is how you
would represent nested states.

