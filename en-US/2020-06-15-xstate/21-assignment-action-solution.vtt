WEBVTT

1
00:00:00.025 --> 00:00:02.530
Needly, this was one of
the harder exercises,

2
00:00:02.530 --> 00:00:07.550
not because of assignment hopefully,
but because of all the math involved.

3
00:00:07.550 --> 00:00:11.120
It's basic arithmetic, but
it's easy to get things screwed up and

4
00:00:11.120 --> 00:00:13.140
going the wrong direction.

5
00:00:14.560 --> 00:00:17.350
So the first thing we are going
to do to make this drag and

6
00:00:17.350 --> 00:00:22.990
drop machine is we are going
to set our initial context.

7
00:00:22.990 --> 00:00:25.060
And so that's going to be here.

8
00:00:26.180 --> 00:00:29.640
So this is specified
directly on the machine.

9
00:00:29.640 --> 00:00:34.080
And we're gonna see how to
customize this in a later lesson.

10
00:00:34.080 --> 00:00:37.313
So at first, everything starts at 0.

11
00:00:37.313 --> 00:00:42.228
Now on mousedown,
we want to assign the point that we

12
00:00:42.228 --> 00:00:45.701
clicked on the box just like before.

13
00:00:45.701 --> 00:00:50.111
But instead of doing this
as an in-peer side effect,

14
00:00:50.111 --> 00:00:54.231
we're going to be doing
this as an assign action.

15
00:00:54.231 --> 00:01:00.026
So we're gonna say actions: assign,
and since we're only assigning px and

16
00:01:00.026 --> 00:01:06.119
py, We are going to get event.clientX.

17
00:01:06.119 --> 00:01:12.123
And py is going to be same thing,
event.clientY.

18
00:01:14.193 --> 00:01:17.011
Now doing this,
let's make sure that works.

19
00:01:21.615 --> 00:01:26.180
We're gonna be logging the state.context
only if the state has changed.

20
00:01:26.180 --> 00:01:26.693
Cool.

21
00:01:26.693 --> 00:01:29.365
So when we do that,

22
00:01:29.365 --> 00:01:35.220
we see that we do get our updated context.

23
00:01:35.220 --> 00:01:41.540
And you could see that, Just kidding.

24
00:01:41.540 --> 00:01:43.950
This is Exercise 05.

25
00:01:43.950 --> 00:01:47.792
Okay, so once we click,
nothing is happening and

26
00:01:47.792 --> 00:01:51.824
that's because we need to
add our event listeners.

27
00:01:51.824 --> 00:01:53.772
I was sort of mean and
I took those off for

28
00:01:53.772 --> 00:01:55.971
you because you have
to add those yourself.

29
00:01:55.971 --> 00:01:58.480
But thankfully, it's not too hard.

30
00:01:58.480 --> 00:02:01.170
eLBox.addEventListener.

31
00:02:01.170 --> 00:02:04.230
And we're going to add
a mouseDown eventListener.

32
00:02:04.230 --> 00:02:06.440
And we're just going to send
that directly to the service.

33
00:02:06.440 --> 00:02:09.930
So we're going to say service.send.

34
00:02:09.930 --> 00:02:13.580
We're gonna be doing the same thing for
mousemove and mouseup.

35
00:02:13.580 --> 00:02:16.823
And so we'll just do that over here,
elBody.

36
00:02:16.823 --> 00:02:21.400
Also keep in mind that we're
using elBody and not elBox.

37
00:02:21.400 --> 00:02:26.070
And that's because in the browser, the
mouse could move faster than the elements.

38
00:02:26.070 --> 00:02:28.950
So it's very easy for
you to escape the elements and

39
00:02:28.950 --> 00:02:31.160
all of a sudden you're no longer dragging.

40
00:02:31.160 --> 00:02:36.058
And that's why we're adding
an eventListener on the body itself for

41
00:02:36.058 --> 00:02:38.090
mousemove and for mouseup.

42
00:02:39.360 --> 00:02:41.560
Okay, so let's take a look at that again.

43
00:02:41.560 --> 00:02:48.669
When we click, now we get our updated
context, we see that we have px and

44
00:02:48.669 --> 00:02:53.897
py set to be clientX and
clientY of where we clicked.

45
00:02:53.897 --> 00:02:56.242
So that works out pretty well.

46
00:02:58.615 --> 00:03:01.945
Now we also want to keep
track of mousemove, and

47
00:03:01.945 --> 00:03:04.370
we want to do something with that.

48
00:03:04.370 --> 00:03:07.149
So we're going to be assigning the delta.

49
00:03:07.149 --> 00:03:08.953
So let's go ahead and do that.

50
00:03:08.953 --> 00:03:11.130
Actions: assign.

51
00:03:11.130 --> 00:03:14.490
We're gonna be assigning to things,
dx and dy.

52
00:03:14.490 --> 00:03:19.120
So dx is going to be, we don't need the x,
I'm sorry, we do need the context.

53
00:03:19.120 --> 00:03:22.839
So context, event.

54
00:03:22.839 --> 00:03:27.063
And so the delta,
I'm going to cheat here a little bit and

55
00:03:27.063 --> 00:03:29.440
cuz I always get these mixed up.

56
00:03:29.440 --> 00:03:31.460
And if you did too, don't feel bad.

57
00:03:31.460 --> 00:03:36.070
It's a very common thing to get
mixed up what subtracts from what.

58
00:03:36.070 --> 00:03:40.470
So we're going to return the clientX
minus the original point.

59
00:03:40.470 --> 00:03:41.181
Okay, great.

60
00:03:41.181 --> 00:03:45.504
So we return event.clientX-

61
00:03:45.504 --> 00:03:50.665
the context original point x value.

62
00:03:50.665 --> 00:03:54.317
And so we're going to be doing this for
dy as well.

63
00:03:54.317 --> 00:03:58.120
So clientY- context.py.

64
00:03:58.120 --> 00:04:02.940
So for example, if we started at x10 and

65
00:04:02.940 --> 00:04:06.350
we move to 30, that would be 30 minus 10,

66
00:04:06.350 --> 00:04:11.300
which is positive 20, so we know that
we've moved 20 pixels to the right.

67
00:04:11.300 --> 00:04:13.300
And the same thing with dy.

68
00:04:14.690 --> 00:04:17.460
So now let's make sure that that works.

69
00:04:19.270 --> 00:04:21.230
Okay, great.

70
00:04:21.230 --> 00:04:23.329
Now here's an interesting note too.

71
00:04:23.329 --> 00:04:27.883
Notice how we're not console logging when
I move my mouse even though we're still

72
00:04:27.883 --> 00:04:29.214
listening on the body.

73
00:04:29.214 --> 00:04:33.300
And that's because of this state.changed.

74
00:04:33.300 --> 00:04:37.230
Now if I move it outside of
the state.changed, all of a sudden,

75
00:04:37.230 --> 00:04:43.020
our console becomes a lot noisier and
we don't really want that.

76
00:04:43.020 --> 00:04:47.250
We only want it to update when
a state change actually occurred.

77
00:04:47.250 --> 00:04:51.570
So the way that state.changed
works is that we're checking,

78
00:04:51.570 --> 00:04:53.500
did the finite state change?

79
00:04:53.500 --> 00:04:56.720
So did we move, for example,
from idle to dragging?

80
00:04:56.720 --> 00:05:00.090
If so, then yes, the state did change.

81
00:05:00.090 --> 00:05:02.520
If the state didn't change, we ask,

82
00:05:02.520 --> 00:05:08.000
did any side effects occur such as
assignments, or any other action?

83
00:05:08.000 --> 00:05:12.210
And if we have any actions that occurred,
then the state did change.

84
00:05:13.210 --> 00:05:15.730
And those are the only two criteria.

85
00:05:15.730 --> 00:05:18.650
Notice that we're not doing a deep or

86
00:05:18.650 --> 00:05:22.120
a shallow check of the context
objects to make sure it changed.

87
00:05:22.120 --> 00:05:25.265
We're not doing any of that
because we know we could

88
00:05:25.265 --> 00:05:28.055
only change the context
in an assign action.

89
00:05:28.055 --> 00:05:31.643
So even if the finite
state stays the same, and

90
00:05:31.643 --> 00:05:35.514
the context is changed due
to an assigned action.

91
00:05:35.514 --> 00:05:40.043
We know that the state has changed without
having to do shallow or deep property

92
00:05:40.043 --> 00:05:45.000
checks, which makes it really, really,
really fast to check if the state changed.

93
00:05:45.000 --> 00:05:48.010
In fact, that's probably one
of the fastest ways because

94
00:05:48.010 --> 00:05:51.810
we're directly saying, I'll tell
you when the state changes or not,

95
00:05:51.810 --> 00:05:56.590
instead of us having to figure it out by
doing a shallow object equality check.

96
00:05:58.170 --> 00:05:58.710
All right, cool.

97
00:05:58.710 --> 00:06:03.490
So we have our dx, and
we have our px and py.

98
00:06:03.490 --> 00:06:06.620
Notice over here that
we are assigning dx and

99
00:06:06.620 --> 00:06:10.840
dy as CSS variables directly on the box.

100
00:06:10.840 --> 00:06:19.203
What this is going to do is it's going to
move the box, To exactly where we want.

101
00:06:19.203 --> 00:06:22.160
How about you see we have a little
bit of an issue over here.

102
00:06:22.160 --> 00:06:25.431
When we click,
the box sort of does a jarring motion, and

103
00:06:25.431 --> 00:06:30.154
that's because we forgot to do our last
thing, which is assigning the position.

104
00:06:30.154 --> 00:06:35.529
[COUGH] So we're gonna do actions: assign.

105
00:06:37.844 --> 00:06:41.799
And when we go back to idle,
we want to zero out a few things first.

106
00:06:41.799 --> 00:06:44.747
So our dx should be 0,
our dy should be 0, and

107
00:06:44.747 --> 00:06:48.990
we're taking advantage of
static assignments over here.

108
00:06:48.990 --> 00:06:51.240
Our px should be 0.

109
00:06:51.240 --> 00:06:53.749
Our py should be 0.

110
00:06:54.775 --> 00:06:57.671
But we want to assign the x and

111
00:06:57.671 --> 00:07:02.745
y values which represents
the resting position of

112
00:07:02.745 --> 00:07:08.680
the elements as the last resting
position plus the delta.

113
00:07:08.680 --> 00:07:17.231
So we could say x: (context)
return context.x + context.dx.

114
00:07:20.714 --> 00:07:22.424
And we could do the same for y.

115
00:07:22.424 --> 00:07:27.902
So, oops, y: (context)

116
00:07:27.902 --> 00:07:34.984
return context.y + context.dy.

117
00:07:34.984 --> 00:07:38.940
Now, don't worry, it's not like these
are going to influence the other ones.

118
00:07:38.940 --> 00:07:43.361
So even though we're zeroing these out,

119
00:07:43.361 --> 00:07:49.311
that's not going to affect
the context values in here.

120
00:07:49.311 --> 00:07:51.477
So now let's make sure that that works.

121
00:07:54.776 --> 00:07:56.091
And there we go.

122
00:07:56.091 --> 00:07:59.430
We have drag and drop.

123
00:07:59.430 --> 00:08:00.514
Just pretty nice.

124
00:08:03.601 --> 00:08:08.887
If you did the extra credit,
you'll see that we have something else,

125
00:08:08.887 --> 00:08:13.780
which is, let's say that we
want to add the behavior.

126
00:08:13.780 --> 00:08:16.930
And this is one of the benefits of state
charts is that you could do this and

127
00:08:16.930 --> 00:08:19.100
you could add behavior and features and

128
00:08:19.100 --> 00:08:22.520
know exactly how it interacts
with the current logic.

129
00:08:22.520 --> 00:08:25.390
So let's say that we want to keep track of

130
00:08:25.390 --> 00:08:28.180
whether the user has pressed Escape or
not.

131
00:08:28.180 --> 00:08:32.320
And if we press Escape, we want things
to go back to the way they were before.

132
00:08:32.320 --> 00:08:36.540
So in this case, I'm going to send
an event which I'm calling keyup.escape.

133
00:08:36.540 --> 00:08:42.580
And with this,
let's actually make a new transition.

134
00:08:42.580 --> 00:08:46.950
So I'm gonna put keyup.escape.

135
00:08:46.950 --> 00:08:50.155
And here,
I also wanna go to the idle state.

136
00:08:51.360 --> 00:08:54.615
But I want slightly different behavior.

137
00:08:54.615 --> 00:08:59.072
I wants to assign, well,
we're not gonna be changing x and

138
00:08:59.072 --> 00:09:03.099
y because we want it to move
to its original position.

139
00:09:03.099 --> 00:09:06.800
But we're still going to be
zeroing out everything else.

140
00:09:08.470 --> 00:09:10.077
So let's see how that looks.

141
00:09:10.077 --> 00:09:15.721
When we drag, And we press Escape,

142
00:09:15.721 --> 00:09:20.385
notice how it's skewed back
to its original position.

143
00:09:20.385 --> 00:09:23.830
And you saw how effortless
it was to add that behavior.

144
00:09:23.830 --> 00:09:25.710
It's just another transition.

145
00:09:25.710 --> 00:09:28.950
And so if someone says, hey,
we don't actually want that behavior,

146
00:09:28.950 --> 00:09:33.550
it's just as easy as commenting it out or
better yet deleting it completely.

147
00:09:33.550 --> 00:09:37.410
Some people are asking you about
the relationship between data set and

148
00:09:37.410 --> 00:09:41.530
CSS variables and
how they interact with the elements.

149
00:09:41.530 --> 00:09:44.990
How exactly that works, it's not magic.

150
00:09:44.990 --> 00:09:49.650
So first thing we're doing is we
are setting state to the state.value

151
00:09:49.650 --> 00:09:51.550
which is going to be a string.

152
00:09:51.550 --> 00:09:52.700
At least for now.

153
00:09:52.700 --> 00:09:57.830
And so in our elements,
that means we're going to have

154
00:09:57.830 --> 00:10:03.640
data-state = "dragging" or
idle or something like that.

155
00:10:03.640 --> 00:10:09.977
These data attributes are something
that you could look up on NDN and

156
00:10:09.977 --> 00:10:16.886
they're extremely useful,
especially for doing state-based style.

157
00:10:16.886 --> 00:10:19.992
So I'm gonna post that in the chat.

158
00:10:22.387 --> 00:10:26.691
Okay, so when we do that,
we are styling the box, and

159
00:10:26.691 --> 00:10:31.000
those styles are coming from index.scss.

160
00:10:31.000 --> 00:10:36.498
And so the way that we could select
those states is, just like here,

161
00:10:36.498 --> 00:10:41.529
I could say, if the state is idle,
then we have a transition.

162
00:10:41.529 --> 00:10:44.879
So wherever it was before,
that's how you saw it smoothly transition.

163
00:10:44.879 --> 00:10:49.011
When we press the Escape,
it transitions to that original value.

164
00:10:49.011 --> 00:10:53.940
And see we have a couple of other things.

165
00:10:53.940 --> 00:10:58.267
So if I go into style over here,
we see for example,

166
00:10:58.267 --> 00:11:02.204
when data state is active,
the opacity is 1.

167
00:11:02.204 --> 00:11:07.453
So, if you're not using sass,
this is exactly the same

168
00:11:07.453 --> 00:11:12.491
as box(data-state = 'active') opacity : 1.

169
00:11:12.491 --> 00:11:15.903
And that's because whenever
we set those states,

170
00:11:15.903 --> 00:11:19.086
those are going to be
directly on the elements.

171
00:11:19.086 --> 00:11:23.991
So when we drag,
you see that data-state is changing.

172
00:11:23.991 --> 00:11:31.480
And in line, we are adding those dx dy,
a and y values too.

173
00:11:31.480 --> 00:11:33.660
How did I send keyup.escape?

174
00:11:33.660 --> 00:11:38.670
Okay, so you have to do
a little bit of work for this.

175
00:11:38.670 --> 00:11:42.780
When you listen for keyup, you can't
listen listen for specific keyups

176
00:11:42.780 --> 00:11:47.500
on the body, you're going to be given
the keyup for absolutely every event.

177
00:11:47.500 --> 00:11:52.790
So instead, you want to say,
I only want to listen for the Escape key.

178
00:11:52.790 --> 00:11:58.720
And that's done by having the event.key
and checking if it's escape.

179
00:11:58.720 --> 00:12:03.521
So if it is escape,
we could send our custom events,

180
00:12:03.521 --> 00:12:09.104
which remember,
this is the same as type: keyup.escape.

181
00:12:09.104 --> 00:12:10.292
This is an important note too.

182
00:12:10.292 --> 00:12:15.747
You will see in a lot of state machine and
state chart literature and

183
00:12:15.747 --> 00:12:22.580
other examples that using dots s a way of
specifying what a particular event means.

184
00:12:22.580 --> 00:12:25.390
So for example if we have a keyup event,

185
00:12:25.390 --> 00:12:29.550
we know that anything starting with
keyup dot is related to keyup event.

186
00:12:29.550 --> 00:12:33.828
And then we could go down further,
we could have keyup.shift,

187
00:12:33.828 --> 00:12:36.370
keyup.escape, and so on.

188
00:12:37.480 --> 00:12:43.290
In future versions of Xstate, you are
going to be able to define transitions as

189
00:12:43.290 --> 00:12:48.390
partial wildcard transitions,
which means that you could do keyup.*.

190
00:12:48.390 --> 00:12:53.100
And what that means is any
event that starts with keyup,

191
00:12:53.100 --> 00:12:57.410
is going to select that transition.

192
00:12:57.410 --> 00:12:59.230
So that's gonna be
a really useful feature.

