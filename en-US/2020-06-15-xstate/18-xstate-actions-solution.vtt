WEBVTT

1
00:00:00.000 --> 00:00:02.700
All right, welcome back.

2
00:00:02.700 --> 00:00:04.962
So let's take a look at Exercise 04.

3
00:00:04.962 --> 00:00:11.008
Again, what we want to do is we want every
single time we have a mouse down event,

4
00:00:11.008 --> 00:00:17.088
we want to know exactly the position of
that mouse when we clicked the, the box.

5
00:00:17.088 --> 00:00:19.310
So let's go ahead and do that.

6
00:00:21.025 --> 00:00:24.165
We're going to be adding an action
to the mouse down transition.

7
00:00:24.165 --> 00:00:27.911
So when we're in the idle state,
and mouse down happens,

8
00:00:27.911 --> 00:00:30.870
we want an action to happen as well.

9
00:00:30.870 --> 00:00:36.308
So we could say target dragging and
I will add an action.

10
00:00:36.308 --> 00:00:42.310
So actions is plural because we
could take one or more actions.

11
00:00:42.310 --> 00:00:43.890
In this case, we're only taking one.

12
00:00:43.890 --> 00:00:47.319
So context events.

13
00:00:47.319 --> 00:00:52.286
First, let's console the log,
what exactly is in these?

14
00:00:52.286 --> 00:00:59.149
Just to make sure that we have some sort
of action and I'm going to log Action.

15
00:00:59.149 --> 00:01:02.699
Cool, so when we click down,
we see that we have an action.

16
00:01:02.699 --> 00:01:06.267
The context is undefined because
we're not exactly using it yet.

17
00:01:06.267 --> 00:01:08.480
But we do have that mouse event.

18
00:01:08.480 --> 00:01:09.833
And again,
we're using native mouse events.

19
00:01:09.833 --> 00:01:15.305
So this is really great that we could
see the exact events that was passed in.

20
00:01:15.305 --> 00:01:18.130
Now it looks like this mouse
event does have what we want.

21
00:01:18.130 --> 00:01:22.500
We have client x and client y,
we wanna display that here somehow.

22
00:01:24.470 --> 00:01:29.907
So what we could do is we could

23
00:01:29.907 --> 00:01:36.027
say albox.dataset.points.

24
00:01:36.027 --> 00:01:38.910
And we're going to be using
a template literal over here and

25
00:01:38.910 --> 00:01:40.649
just putting that in parentheses.

26
00:01:40.649 --> 00:01:46.006
So we're gonna have events.clientsX,
and events.clientsY?

27
00:01:49.322 --> 00:01:55.540
So now when we click, we see that we do
get that mouse position right over there.

28
00:01:56.570 --> 00:02:01.866
Now again, this is good for prototyping or
quickly spinning up your machines,

29
00:02:01.866 --> 00:02:05.275
but we wants to make this
in a more flexible format.

30
00:02:05.275 --> 00:02:12.927
So let's move all of this logic
to this set points action.

31
00:02:12.927 --> 00:02:18.556
And so we're doing the exact same
thing and instead of this action,

32
00:02:18.556 --> 00:02:22.526
we're going to be
referencing the set points.

33
00:02:22.526 --> 00:02:24.877
Again, this could contain one or
more actions.

34
00:02:24.877 --> 00:02:29.802
So it doesn't make a difference
if this is an array or not.

35
00:02:29.802 --> 00:02:33.454
So let's make sure that
it does the same thing.

36
00:02:33.454 --> 00:02:37.245
Indeed it does, so that's really cool.

37
00:02:41.243 --> 00:02:45.982
Now one other thing too,
since we could customize this action,

38
00:02:45.982 --> 00:02:48.803
this is especially good for testing.

39
00:02:48.803 --> 00:02:53.767
If we want to say that this action
side effect is not really going to

40
00:02:53.767 --> 00:02:57.017
help us out much when
we're unit testing or

41
00:02:57.017 --> 00:03:01.742
integration testing this machine,
we could say, actions.

42
00:03:01.742 --> 00:03:05.417
And then, we could specify
that same setPoint action,

43
00:03:05.417 --> 00:03:07.927
remember it has to have the same name.

44
00:03:07.927 --> 00:03:11.741
And then,
we could override this any way we want.

45
00:03:11.741 --> 00:03:17.144
So we could say console.log,
overrided setPoint and

46
00:03:17.144 --> 00:03:21.966
then you'll see that it
no longer shows up here.

47
00:03:21.966 --> 00:03:26.648
But we have this
overridden however you say

48
00:03:26.648 --> 00:03:30.947
it setpoints over here in the console.

49
00:03:30.947 --> 00:03:35.911
And so when you're testing, it's a good
idea to have these named to actions so

50
00:03:35.911 --> 00:03:41.048
that you could replace them with test
implementations of your actions instead.

51
00:03:41.048 --> 00:03:46.026
So again, by removing that,
now we have the exact

52
00:03:46.026 --> 00:03:51.132
same behavior that we want,
which is pretty nice.

53
00:03:51.132 --> 00:03:56.627
And so if we were to copy this machine,
so we need to copy the set

54
00:03:56.627 --> 00:04:01.828
points of function as well and
we put it in our visualizer.

55
00:04:01.828 --> 00:04:04.835
Remember, it's not create machine,
it's machine.

56
00:04:04.835 --> 00:04:07.439
And we're going to make this a string for

57
00:04:07.439 --> 00:04:11.662
now because we don't have an outbox
on this page and we update it.

58
00:04:11.662 --> 00:04:16.177
We could see that we have this set
point action defined over here.

59
00:04:16.177 --> 00:04:21.012
So we could visually verify that our
logic is working exactly the same way

60
00:04:21.012 --> 00:04:22.449
that we expect it to.

61
00:04:22.449 --> 00:04:26.757
So the logic is no longer in your head,
it's right there on the screen.

62
00:04:26.757 --> 00:04:29.710
And now we have managed side effects.

63
00:04:29.710 --> 00:04:31.993
So someone mentioned going points free,
and

64
00:04:31.993 --> 00:04:35.066
what that means is you're not
really taking any arguments.

65
00:04:35.066 --> 00:04:38.268
It's a pretty interesting way of
programming popular in the functional

66
00:04:38.268 --> 00:04:39.490
programming world.

67
00:04:39.490 --> 00:04:45.098
But instead of this since we're sending
the exact same events over here,

68
00:04:45.098 --> 00:04:47.731
we could even say service.send.

69
00:04:47.731 --> 00:04:51.770
It's a bit less clear what it's doing,
but it is more concise arguably.

70
00:04:53.280 --> 00:04:55.750
And so that should give us

71
00:04:57.240 --> 00:05:02.810
the exact same behavior which it does,
great.

72
00:05:02.810 --> 00:05:07.850
In the chat it was asked are there any
real world use cases for entry and

73
00:05:07.850 --> 00:05:08.610
exit actions?

74
00:05:08.610 --> 00:05:14.467
And this is actually an important points,
because entry and exit actions are actions

75
00:05:14.467 --> 00:05:20.097
where they're taken every single time you
enter or exit the state respectively.

76
00:05:20.097 --> 00:05:25.070
But transition actions, are more explicit,
because you could say that

77
00:05:25.070 --> 00:05:29.649
whenever you take a transition,
you're going to do that action.

78
00:05:29.649 --> 00:05:32.989
And it doesn't depend on the state,

79
00:05:32.989 --> 00:05:37.527
it just depends on
the transition that's taken.

80
00:05:37.527 --> 00:05:42.107
So one thing you could do is start
off with transition actions.

81
00:05:42.107 --> 00:05:46.985
Once you start noticing that a lot of
actions are being repeated in many

82
00:05:46.985 --> 00:05:52.028
transitions that either go to the same
state or exit the same state, that

83
00:05:52.028 --> 00:05:58.460
is a sign that you could probably refactor
that to be entry and exit actions instead.

84
00:05:58.460 --> 00:06:03.310
And so, if you want to dive more into this
topic, look up the difference between more

85
00:06:03.310 --> 00:06:07.980
machines and mealy machines because
those describe the difference between

86
00:06:10.620 --> 00:06:13.050
transition actions and
entry and exit actions.

