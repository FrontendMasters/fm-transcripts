WEBVTT

1
00:00:00.300 --> 00:00:05.080
Now the actor model is not directly
related to state machines and

2
00:00:05.080 --> 00:00:05.940
state charts.

3
00:00:05.940 --> 00:00:10.100
But the actor model works really well
with state machines and state charts.

4
00:00:10.100 --> 00:00:13.450
If you're unfamiliar with the actor
model and you look online,

5
00:00:13.450 --> 00:00:14.600
just like state machines and

6
00:00:14.600 --> 00:00:18.800
state charts, it could seem like
a really alienating complicated thing.

7
00:00:18.800 --> 00:00:21.460
But the actor model in
essence is really simple,

8
00:00:21.460 --> 00:00:26.290
because you could think of pretty much
everything around you as an actor.

9
00:00:26.290 --> 00:00:30.350
In fact, I'm an actor, not because
I'm in front of a camera or anything.

10
00:00:30.350 --> 00:00:35.970
You're an actor, devices that communicate
with each other are each actors.

11
00:00:35.970 --> 00:00:37.840
So what is an actor?

12
00:00:37.840 --> 00:00:43.070
An actor is a thing or an entity
that could do one of three things,

13
00:00:43.070 --> 00:00:47.120
an actor can send
a message to another actor,

14
00:00:47.120 --> 00:00:52.410
it could create new actors, and
so basically have child actors or

15
00:00:52.410 --> 00:00:55.630
it could change its behavior
in response to a message.

16
00:00:57.100 --> 00:01:04.780
So for instance, let's say that we have
this machine, which is a fetcher machine.

17
00:01:04.780 --> 00:01:08.190
And its job is to call
some sort of promise or

18
00:01:08.190 --> 00:01:10.850
something that we could consider an actor.

19
00:01:10.850 --> 00:01:15.620
So this is doing the second thing over
here, which is spawning a new actor.

20
00:01:15.620 --> 00:01:19.330
So in this spectrum machine,
we are invoking a new actor.

21
00:01:20.510 --> 00:01:24.110
And so this actor is going to
do whatever it wants to do.

22
00:01:24.110 --> 00:01:27.020
We don't really know
what's inside an actor.

23
00:01:27.020 --> 00:01:30.000
We can't read it states and
this is on purpose.

24
00:01:30.000 --> 00:01:32.920
Actor state is private and local.

25
00:01:32.920 --> 00:01:34.940
And this makes it really,
really useful for

26
00:01:34.940 --> 00:01:37.710
distributed systems and things like that.

27
00:01:37.710 --> 00:01:39.880
So an actor state is local, but

28
00:01:39.880 --> 00:01:45.290
the actor can eventually send
a message back to the parents.

29
00:01:45.290 --> 00:01:50.580
And so if you think about a promise as
an actor, it's exactly the same way.

30
00:01:50.580 --> 00:01:54.520
You invoke a promise, so
you're calling it, it's doing something in

31
00:01:54.520 --> 00:01:58.440
the background, maybe calling an API,
maybe doing some sort of process,

32
00:01:58.440 --> 00:02:01.990
we don't know and
we don't care until the promise resolves.

33
00:02:01.990 --> 00:02:07.700
And when it resolves, with promises we
have dot then and we have a callback.

34
00:02:07.700 --> 00:02:10.140
And so that's our way of saying,
when you're done,

35
00:02:10.140 --> 00:02:13.470
send us back a message
using this callback.

36
00:02:13.470 --> 00:02:16.510
And so
actors could of course call other actors,

37
00:02:16.510 --> 00:02:18.610
which could call other actors as well.

38
00:02:19.850 --> 00:02:27.130
And so the actor model in x state, one of
the ways it's embodied, is using invoke.

39
00:02:27.130 --> 00:02:32.359
And so invoke allows you to
invoke a promise, a callback,

40
00:02:32.359 --> 00:02:37.130
an observable or even another machine
with the understanding that those

41
00:02:37.130 --> 00:02:42.330
things can send messages back
to the original machine.

42
00:02:42.330 --> 00:02:45.350
So we're gonna be doing
this exercise together, so

43
00:02:45.350 --> 00:02:49.200
that I could demonstrate to
you exactly how actors work.

44
00:02:49.200 --> 00:02:53.020
And just getting around the mental
model of what an actor is.

