WEBVTT

1
00:00:00.041 --> 00:00:01.654
When designing state machines,

2
00:00:01.654 --> 00:00:04.833
obviously they're not going to be
as simple as that all the time.

3
00:00:04.833 --> 00:00:07.982
If you are, number one,
you're lucky, number two,

4
00:00:07.982 --> 00:00:11.816
you might not need a state machine for
something as simple as that,

5
00:00:11.816 --> 00:00:14.433
where maybe even one
boolean might suffice.

6
00:00:14.433 --> 00:00:17.174
So let's take this for example.

7
00:00:17.174 --> 00:00:19.646
Just in terms of how you would
structure your states and

8
00:00:19.646 --> 00:00:23.693
how you would structure your events, let's
say that we're designing a feedback form.

9
00:00:23.693 --> 00:00:27.296
The first screen is going to say,
How is your experience, and

10
00:00:27.296 --> 00:00:30.223
the user could click Good or
they could click Bad.

11
00:00:30.223 --> 00:00:34.522
When they click Bad,
it brings you to a form that asks you why.

12
00:00:34.522 --> 00:00:38.983
And in this form, you could submit, and
it takes you to, Thanks for your feedback.

13
00:00:38.983 --> 00:00:43.210
When you click Good, since we just assumed
that you had a great experience and

14
00:00:43.210 --> 00:00:47.648
we don't need you to tell us why, we just
take you to, Thanks for your feedback.

15
00:00:47.648 --> 00:00:51.149
And on any of these screens,
when you click the x, or

16
00:00:51.149 --> 00:00:55.856
you click the Close button,
you should transition to a closed state.

17
00:00:55.856 --> 00:00:59.657
So there was a question in the chat
about how you would name these things,

18
00:00:59.657 --> 00:01:04.100
how you would name states and events,
and so that's a really good question.

19
00:01:04.100 --> 00:01:07.430
But first,
let's talk about how we would design or

20
00:01:07.430 --> 00:01:10.180
model the state machine
in the first place.

21
00:01:10.180 --> 00:01:11.510
So we have our initial state,

22
00:01:11.510 --> 00:01:15.840
which is question, and
we first want to add the states.

23
00:01:15.840 --> 00:01:17.126
That's the first thing you should do.

24
00:01:17.126 --> 00:01:20.676
You should think about,
what modes or states or

25
00:01:20.676 --> 00:01:24.956
behaviors should my application
be in at one given time?

26
00:01:24.956 --> 00:01:27.894
So only one state at a time.

27
00:01:27.894 --> 00:01:32.617
And in this case, we could only be in
the question, the form, the thanks, or

28
00:01:32.617 --> 00:01:34.957
the closed state, at any given time.

29
00:01:36.425 --> 00:01:38.781
After that we could
start filling in events.

30
00:01:38.781 --> 00:01:42.933
And so we have to think about,
what could possibly happen in this app?

31
00:01:42.933 --> 00:01:46.269
What could the user do or click or submit?

32
00:01:46.269 --> 00:01:51.297
Or what external events might come
in that might change the states?

33
00:01:51.297 --> 00:01:54.352
So in the question state,
we had two options.

34
00:01:54.352 --> 00:01:58.268
We could either click Good, which
will take us to the, thanks state, or

35
00:01:58.268 --> 00:02:02.655
we could click Bad, which will take us to
the form states, and so we have it here.

36
00:02:02.655 --> 00:02:05.640
And then same thing as described before.

37
00:02:05.640 --> 00:02:08.800
When we have these submit events,
we go from form to thanks.

38
00:02:08.800 --> 00:02:13.421
And on the close events,
we go from thanks to closed.

39
00:02:13.421 --> 00:02:17.394
And of course, in the closed state,
this is known as a sync node,

40
00:02:17.394 --> 00:02:20.879
which means that nothing can
happen after it's closed.

41
00:02:20.879 --> 00:02:23.921
Obviously, you can't
reopen the feedback form.

42
00:02:23.921 --> 00:02:27.648
And if you can, you would model
that explicitly in your logic.

43
00:02:30.257 --> 00:02:34.330
So then after that, of course,
we add the transition function and

44
00:02:34.330 --> 00:02:36.160
we track the current states.

45
00:02:36.160 --> 00:02:39.254
We receive events,
just like we did in the exercise.

46
00:02:39.254 --> 00:02:43.766
And we use that to interpret the machine.

47
00:02:43.766 --> 00:02:48.175
So let's talk about
interpretation a little bit more.

48
00:02:48.175 --> 00:02:52.512
What we were doing before,
when we were interpreting this machine,

49
00:02:52.512 --> 00:02:57.244
is we have this floating mutable
variable over here called currentState.

50
00:02:57.244 --> 00:03:01.670
Now, this isn't exactly
what we might want.

51
00:03:01.670 --> 00:03:06.290
Instead, we might want to
keep this in an interpreter.

52
00:03:06.290 --> 00:03:09.140
And so when we have a function interpret,

53
00:03:09.140 --> 00:03:13.310
we could keep that current
state inside of a closure.

54
00:03:13.310 --> 00:03:17.780
And so that way we could define
our send function right inside.

55
00:03:17.780 --> 00:03:21.520
And internally,
it's going to update the current states.

56
00:03:21.520 --> 00:03:26.313
And then we could expose this
send function right over here.

57
00:03:29.208 --> 00:03:34.018
So this gets a little more advanced,
but once you start thinking about

58
00:03:34.018 --> 00:03:38.665
how different things can interact
with this interpreted machine,

59
00:03:38.665 --> 00:03:41.779
you have to consider
things like listeners.

60
00:03:41.779 --> 00:03:46.852
So we might have an onTransition
method which says, if we get

61
00:03:46.852 --> 00:03:53.016
a listener add it to the set of listeners,
and whenever we get a new state,

62
00:03:53.016 --> 00:03:57.807
we wants to send that current
state over to the listener.

63
00:03:57.807 --> 00:04:02.842
And so that's done inside of send.

64
00:04:02.842 --> 00:04:07.768
But then we also have to think about
what's currently happening inside of our

65
00:04:07.768 --> 00:04:10.724
inside of our interpreter and
its lifecycle,

66
00:04:10.724 --> 00:04:13.708
like when it could start,
when it could stop.

67
00:04:13.708 --> 00:04:18.142
So because we have listeners, eventually
when we're no longer using machine,

68
00:04:18.142 --> 00:04:19.391
we have to clean it up.

69
00:04:19.391 --> 00:04:23.386
And so that's what this stop method is for
over here.

