WEBVTT

1
00:00:00.250 --> 00:00:04.890
All right, so in this lesson we're going
to be talking about delayed transitions.

2
00:00:04.890 --> 00:00:07.440
And one thing to know
about transitions and

3
00:00:07.440 --> 00:00:11.960
state machines is that transitions
happen in zero time, always.

4
00:00:11.960 --> 00:00:17.660
So when you have an event in one state,
that transitions to another state,

5
00:00:17.660 --> 00:00:21.080
you can always assume that that's
going to happen in zero time.

6
00:00:21.080 --> 00:00:23.530
Transitions are never asynchronous.

7
00:00:23.530 --> 00:00:27.850
And that's why if you're trying to model
something such as async await with

8
00:00:27.850 --> 00:00:31.480
with a state machine,
because state machines are never async

9
00:00:31.480 --> 00:00:36.040
you would be modeling idle,
then loading then success and so

10
00:00:36.040 --> 00:00:40.260
that in between async state
would be that loading state.

11
00:00:40.260 --> 00:00:44.900
However, we could have delayed transitions
that as it was originally described by

12
00:00:44.900 --> 00:00:50.020
David Harrell, in his paper,
and we have to do a little

13
00:00:50.020 --> 00:00:55.020
bit of trickery in order to do this, but
it is natively supported in x state.

14
00:00:55.020 --> 00:01:00.450
So in this case,
when we're in the bright states,

15
00:01:00.450 --> 00:01:04.600
after 5000 milliseconds,
we transition to the dim states.

16
00:01:04.600 --> 00:01:06.410
This is how this transition works.

17
00:01:06.410 --> 00:01:10.040
You could think of it as a transition
that's immediately taken

18
00:01:10.040 --> 00:01:11.350
after 5000 milliseconds.

19
00:01:12.650 --> 00:01:14.590
So here's how that works.

20
00:01:14.590 --> 00:01:19.370
What x state is doing is it's using
concepts that you already know now.

21
00:01:19.370 --> 00:01:25.640
When we enter this bright states,
we have this special delay action.

22
00:01:25.640 --> 00:01:30.450
That tells the interpreter
to send this machine,

23
00:01:30.450 --> 00:01:35.640
a special x date .after
with some extra metadata

24
00:01:35.640 --> 00:01:40.200
after it and
to send that after the specified delayed.

25
00:01:40.200 --> 00:01:45.480
So it's going to say, we're going to send
this event after say, 5,000 milliseconds.

26
00:01:46.710 --> 00:01:51.790
Now if we change dates, then we also
need a way to cancel that event.

27
00:01:51.790 --> 00:01:54.020
And x date takes care of that as well.

28
00:01:54.020 --> 00:01:56.160
So when you exit this date,

29
00:01:56.160 --> 00:02:01.420
we tell it that's the way we just sent
another event to cancel that delay.

30
00:02:01.420 --> 00:02:05.783
And that tells the interpreter that we no
longer wants to send that event after 5000

31
00:02:05.783 --> 00:02:06.630
milliseconds.

32
00:02:07.970 --> 00:02:11.950
So let's take a look at what
that looks like in x dates.

33
00:02:13.610 --> 00:02:17.510
So if we go to exercise number eight,

34
00:02:23.040 --> 00:02:30.090
let's go into the read me for me.

35
00:02:30.090 --> 00:02:34.330
All right, so, in this exercise,
it's pretty simple.

36
00:02:34.330 --> 00:02:37.510
All you have to do is ensure
that you cannot drag a box for

37
00:02:37.510 --> 00:02:39.430
more than two seconds.

38
00:02:39.430 --> 00:02:45.860
So the after syntax for x date is or
the delay syntax is literally just after.

39
00:02:45.860 --> 00:02:52.822
So let's say that we are on so
let's close that, weight index.js.

40
00:02:57.654 --> 00:02:58.583
All right, great.

41
00:02:58.583 --> 00:03:06.808
So let's say that we want something
to happen after 5 seconds.

42
00:03:06.808 --> 00:03:11.375
In order to express that in exit,
we could say after, and

43
00:03:11.375 --> 00:03:18.340
then we could give it, Let's see.

44
00:03:18.340 --> 00:03:22.036
5000 and
then we could tell it to go to a state.

45
00:03:22.036 --> 00:03:25.526
Or remember this is shorthand for
a transition, so

46
00:03:25.526 --> 00:03:30.406
you could have target some states,
or you could do some sort of action.

47
00:03:30.406 --> 00:03:33.883
For now let's just have an action
just to see what happens.

48
00:03:33.883 --> 00:03:39.666
So actions, console.log,

49
00:03:39.666 --> 00:03:44.756
something happened after

50
00:03:44.756 --> 00:03:50.115
five seconds, all right.

51
00:03:50.115 --> 00:03:55.630
Then when we go to our exercise,
we're gonna see that after five seconds,

52
00:03:55.630 --> 00:03:57.389
something is going to
happen in the console.

53
00:03:58.430 --> 00:03:59.500
And indeed it did.

54
00:03:59.500 --> 00:04:01.840
So something happened after five seconds.

55
00:04:01.840 --> 00:04:05.660
Now notice that when we're
in this idle state and

56
00:04:05.660 --> 00:04:11.030
we go to the dragging state, this five
second timeout is going to be canceled.

57
00:04:11.030 --> 00:04:11.783
So let's try that.

58
00:04:11.783 --> 00:04:16.644
Because dragging in 1,

59
00:04:16.644 --> 00:04:20.560
2, 3, 4, 5,
you'll notice that it was canceled and

60
00:04:20.560 --> 00:04:23.970
that happened because we
went to the next idle state.

61
00:04:23.970 --> 00:04:26.480
So, that was actually pretty poor timing,
but

62
00:04:31.720 --> 00:04:35.660
delay actions are canceled
after the timeouts.

63
00:04:35.660 --> 00:04:40.060
So another way to see this
is if we log the state.

64
00:04:40.060 --> 00:04:44.410
So console.log, state.actions.

65
00:04:44.410 --> 00:04:48.300
We can see all the actions that
are supposed to happen in the state.

66
00:04:48.300 --> 00:04:51.720
So when we,
have a minute to just move this up here.

67
00:04:53.870 --> 00:04:57.130
All right, so a lot of actions are
happening, and that's because I'm moving

68
00:04:57.130 --> 00:05:04.190
my mouse, but you can see over here we
have that special x date after action.

69
00:05:04.190 --> 00:05:07.940
And so it's telling us that
something is gonna happen

70
00:05:07.940 --> 00:05:10.130
after those 5000 milliseconds.

71
00:05:12.060 --> 00:05:16.000
And in this case, it's going to send
this event writes back to the machine.

72
00:05:17.560 --> 00:05:24.684
And so if we do something where we
cancel it, so let me just, words.

73
00:05:24.684 --> 00:05:31.870
You could see that when I dragged,
we have this xstate cancel action.

74
00:05:31.870 --> 00:05:36.160
And so it's going to say, hey,
we just exited the state so

75
00:05:36.160 --> 00:05:41.650
that event that we just sent which was
a delayed event, we don't need it anymore.

76
00:05:43.860 --> 00:05:48.510
So your goal in this exercise, which
is a pretty straightforward exercise,

77
00:05:48.510 --> 00:05:52.910
is that while we're dragging,
after two seconds,

78
00:05:52.910 --> 00:05:56.560
we want to transition
back to the idle states.

79
00:05:56.560 --> 00:05:59.840
And you're gonna use this
exact same syntax over here,

80
00:05:59.840 --> 00:06:04.630
after in the timeouts and
the actions right here.

81
00:06:04.630 --> 00:06:07.500
Another way that you could
specify the timeout,

82
00:06:07.500 --> 00:06:09.760
is by having it as some sort of string.

83
00:06:09.760 --> 00:06:13.320
So instead of a number,
just a string such as timeout, and

84
00:06:13.320 --> 00:06:19.010
then you could specify that timeout
as the options .delays property.

85
00:06:19.010 --> 00:06:23.501
So we could say timeout, 5 seconds and

86
00:06:23.501 --> 00:06:29.638
something is going to happen
after 5 seconds still.

87
00:06:33.548 --> 00:06:34.180
All right.

