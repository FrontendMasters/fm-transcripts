WEBVTT

1
00:00:00.260 --> 00:00:03.180
Other examples that I want
to talk about as well.

2
00:00:04.380 --> 00:00:06.290
There's different packages for XState.

3
00:00:06.290 --> 00:00:09.400
We talked about xstate/react and
xstate/vue.

4
00:00:10.840 --> 00:00:15.685
If you want a very small version
of XState, less than 2 kilobytes,

5
00:00:15.685 --> 00:00:17.820
then there's xstate/fsm.

6
00:00:17.820 --> 00:00:22.993
So in the first half of this workshop, we
talked about flat finite state machines.

7
00:00:22.993 --> 00:00:27.629
So that's state machines without nesting,
without hierarchy or any of that.

8
00:00:27.629 --> 00:00:31.340
And for a lot of use cases,
that works pretty well.

9
00:00:31.340 --> 00:00:35.940
But we saw that with combinatorial
explosion, you do need those nested and

10
00:00:35.940 --> 00:00:39.190
those orthogonal states
in order to organize and

11
00:00:39.190 --> 00:00:42.890
maintain your states in a much better way.

12
00:00:42.890 --> 00:00:47.400
And so
the xstate/fsm package provides a very,

13
00:00:47.400 --> 00:00:53.600
very similar setup to what XState provides
you, with one difference, no hierarchy.

14
00:00:53.600 --> 00:00:57.121
And that's what allows this
package to be really small.

15
00:00:59.919 --> 00:01:03.770
Additionally, there is
the xstate/test package.

16
00:01:03.770 --> 00:01:06.980
And so this package is really useful for
testing, and

17
00:01:06.980 --> 00:01:11.915
not just testing your state machines,
but testing any app at all.

18
00:01:11.915 --> 00:01:14.865
It utilizes something that's
called model-based testing in

19
00:01:14.865 --> 00:01:19.177
which there's an article here and a talk
here that I really recommend you watch.

20
00:01:19.177 --> 00:01:22.935
Because model-based testing is
another one of those techniques which

21
00:01:22.935 --> 00:01:27.685
is not talked about too much nowadays,
but it is a really powerful technique.

22
00:01:28.830 --> 00:01:33.516
In essence, a model-based test is a test
that's, well, based on the model.

23
00:01:33.516 --> 00:01:37.201
You create the model of your
application which is saying that this

24
00:01:37.201 --> 00:01:39.600
application behaves in this way.

25
00:01:39.600 --> 00:01:44.560
We have one state where the user could do
this, or the user could do something else.

26
00:01:44.560 --> 00:01:47.710
And depending on what the user does,
you go to different states.

27
00:01:47.710 --> 00:01:52.040
And when you define
your model in that way,

28
00:01:52.040 --> 00:01:56.974
you could use that model
to test your application

29
00:01:56.974 --> 00:02:01.565
by adding test inside
the state definition.

30
00:02:01.565 --> 00:02:06.196
So you could have a meta, test, and, for
example, over here, we're waiting for

31
00:02:06.196 --> 00:02:08.374
the input to be checked.

32
00:02:08.374 --> 00:02:12.480
So what xstate/test is going to do
is it's going to essentially write

33
00:02:12.480 --> 00:02:14.730
all of your end-to-end tests for you.

34
00:02:14.730 --> 00:02:20.640
You specify what the states are, what the
transitions are, what those events mean.

35
00:02:20.640 --> 00:02:23.788
So for example,
if I have a button click event,

36
00:02:23.788 --> 00:02:27.029
I want to map that to
directly clicking a button.

37
00:02:27.029 --> 00:02:31.260
And if I'm in a state, I want to assert
that I am actually in that state.

38
00:02:31.260 --> 00:02:35.199
What XState is going to do then is
it's going to trace all the paths

39
00:02:35.199 --> 00:02:37.993
from the initial state
to every other state and

40
00:02:37.993 --> 00:02:41.300
make sure that all those
paths are traversable.

41
00:02:41.300 --> 00:02:45.970
And if it's not, xstate/test is going
to tell you exactly where it failed.

42
00:02:45.970 --> 00:02:49.307
So model-based testing is
a very powerful technique for

43
00:02:49.307 --> 00:02:53.160
auto-generating tests
instead of handwriting tests.

44
00:02:53.160 --> 00:02:56.010
So there's a really good post
on model-based testing if

45
00:02:56.010 --> 00:02:58.320
you're interested by Sauce Labs.

46
00:02:58.320 --> 00:03:01.560
So model-based testing.

47
00:03:03.810 --> 00:03:06.890
And it talks about,
it's this one, the challenges and

48
00:03:06.890 --> 00:03:09.000
benefits of model-based testing.

49
00:03:09.000 --> 00:03:15.694
So if you're interested,
I really recommend you check that out.

50
00:03:15.694 --> 00:03:20.199
So another interesting addition to

51
00:03:20.199 --> 00:03:25.350
XState recently is xstate/immer.

52
00:03:25.350 --> 00:03:31.160
So the more you work with XState, the more
you find that things start making sense.

53
00:03:31.160 --> 00:03:36.840
You start thinking in terms of models, and
in terms of events, and state transitions.

54
00:03:36.840 --> 00:03:40.275
And it's really useful, but
you also find yourself maybe

55
00:03:40.275 --> 00:03:44.354
being a little bit frustrated with
how you assign and update states.

56
00:03:44.354 --> 00:03:46.840
And that's where xstate/immer
comes into play.

57
00:03:46.840 --> 00:03:51.412
If you haven't heard of immer, immer
is a really, really useful library by

58
00:03:51.412 --> 00:03:58.790
Michel Weststrate, where immer allows you
to basically take your state, mutate it.

59
00:03:58.790 --> 00:04:03.130
And it's not really mutating,
it's mutating a proxy of the state.

60
00:04:03.130 --> 00:04:05.080
And whatever mutations you make,

61
00:04:05.080 --> 00:04:09.220
it's going to apply those
immutably to the original state.

62
00:04:09.220 --> 00:04:11.710
And so
we could do the same thing in XState.

63
00:04:11.710 --> 00:04:19.560
So by using immer in XState,
now your assignments look very mutable.

64
00:04:19.560 --> 00:04:24.130
But behind the scenes,
for example, ctx.count++,

65
00:04:24.130 --> 00:04:27.480
behind the scenes,
these are immutable updates.

66
00:04:27.480 --> 00:04:32.154
And so this is really useful if you
want to describe logic safely and

67
00:04:32.154 --> 00:04:34.245
state updates in a safer way.

68
00:04:34.245 --> 00:04:39.010
But just making sure that you
are immutable all the way through.

69
00:04:39.010 --> 00:04:43.090
So I highly recommend you
check out xstate/immer.

70
00:04:43.090 --> 00:04:50.350
It's a really useful library and I've been
using it to help with XState work as well.

71
00:04:50.350 --> 00:04:55.240
So Matt asks in the chat,
if you use xstate/fsm and

72
00:04:55.240 --> 00:04:58.280
after integrating,
you feel like you need full exit.

73
00:04:58.280 --> 00:05:00.790
Is it a matter of switching packages?

74
00:05:00.790 --> 00:05:05.917
Yes, so if you have xstate/fsm,
you could use the exact same

75
00:05:05.917 --> 00:05:10.955
machine that you create in
xstate/fsm with normal XState.

76
00:05:10.955 --> 00:05:13.835
So upgrading is seamless.

77
00:05:13.835 --> 00:05:17.265
All you do is you get rid of this @ sign,
you get rid of FSM,

78
00:05:17.265 --> 00:05:20.375
and everything is going
to work exactly the same.

