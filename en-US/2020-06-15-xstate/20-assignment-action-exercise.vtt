WEBVTT

1
00:00:00.218 --> 00:00:06.650
In Exercise 05, we are going to be working
on fleshing out this drag and drop.

2
00:00:06.650 --> 00:00:10.900
This is probably gonna be one
of the harder exercises to do,

3
00:00:10.900 --> 00:00:13.780
because there's a lot of things
we need to keep track of.

4
00:00:13.780 --> 00:00:18.000
But first, let's think about how drag and
drop sort of works.

5
00:00:18.000 --> 00:00:22.710
At first, something, or whatever
we're dragging, is in an idle state.

6
00:00:22.710 --> 00:00:26.360
And in that state, nothing happens.

7
00:00:26.360 --> 00:00:27.960
But once we have mousedown,

8
00:00:27.960 --> 00:00:32.090
we're recording where on
that object it was clicked.

9
00:00:32.090 --> 00:00:34.810
So in this case,
it was clicked a little bit off center.

10
00:00:34.810 --> 00:00:38.190
And so
we're going to assign that to px and py.

11
00:00:38.190 --> 00:00:44.850
And then when we drag, we're going to
be listening for the mousemove event.

12
00:00:44.850 --> 00:00:47.950
And so whenever we get a mousemove event,
we don't change state,

13
00:00:47.950 --> 00:00:49.740
because we're still in dragging.

14
00:00:49.740 --> 00:00:53.950
But instead,
we're going to be updating dx and dy.

15
00:00:54.970 --> 00:01:00.390
And then once our mouse is up, we are
going to set x and y to those new values,

16
00:01:00.390 --> 00:01:04.540
so that we could place that
element where it needs to be.

17
00:01:06.910 --> 00:01:10.310
And so to do this,
we're going to be doing three actions.

18
00:01:10.310 --> 00:01:14.180
The first is assignPoint,
in which we assign those px and

19
00:01:14.180 --> 00:01:18.628
py values from the initial
event.client x and event.client y.

20
00:01:18.628 --> 00:01:23.535
While we're dragging that mousemove event,
we're gonna be assigning the Delta.

21
00:01:23.535 --> 00:01:31.039
And the Delta is just that px value
minus the events.client x value.

22
00:01:31.039 --> 00:01:34.715
So we want to know how far it traveled
from the initial place we clicked.

23
00:01:34.715 --> 00:01:40.120
And same thing with py and
events.client y.

24
00:01:40.120 --> 00:01:44.320
Now when we go to mouseup,
we want to do something different.

25
00:01:44.320 --> 00:01:51.810
We want to assign the x value to
the Points.x, plus how far it's traveled.

26
00:01:51.810 --> 00:01:54.350
So we want to know, okay,
now it's over here.

27
00:01:54.350 --> 00:02:00.470
Or sorry, not the px, but the original
x value, to how far it's traveled.

28
00:02:00.470 --> 00:02:03.960
And then we want to
assign the y to the same.

29
00:02:03.960 --> 00:02:08.520
So that's why we're keeping track of
the Delta, because once our mouse is up,

30
00:02:08.520 --> 00:02:12.740
we need to move those x and
y values by those dx and dy values.

31
00:02:13.940 --> 00:02:16.850
And so that's going to be Exercise 05.

32
00:02:16.850 --> 00:02:18.260
Okay, so Romaine asks,

33
00:02:19.420 --> 00:02:24.690
why should we use assign actions
instead of mutating context directly?

34
00:02:24.690 --> 00:02:26.140
And that's a great question.

35
00:02:26.140 --> 00:02:30.550
Sometimes you might be tempted
to mutate context directly, but

36
00:02:30.550 --> 00:02:34.480
this is going to be important later on,
too.

37
00:02:34.480 --> 00:02:38.330
You want to make sure

38
00:02:38.330 --> 00:02:43.100
that when you're updating context,
you do so based on an event.

39
00:02:43.100 --> 00:02:44.910
If you could just mutate context,

40
00:02:44.910 --> 00:02:48.790
then that could happen at any time,
whether an event happens or not.

41
00:02:48.790 --> 00:02:53.340
So we're not using the model where
we do a mutation undetected.

42
00:02:53.340 --> 00:02:56.110
That's not the model of state machines or
state charts.

43
00:02:56.110 --> 00:03:01.300
Instead, state machines and state charts
say everything happens for a reason.

44
00:03:01.300 --> 00:03:04.300
And that reason is because
an event occurred.

45
00:03:04.300 --> 00:03:09.382
And by keeping pure, we could also
have sort of a similar Redux,

46
00:03:09.382 --> 00:03:14.340
NgRx, ViewX set up,
where we could record the previous

47
00:03:14.340 --> 00:03:19.930
states and keep track of what
those previous contexts were.

48
00:03:19.930 --> 00:03:22.230
Of course, don't worry,
it's garbage collected.

49
00:03:22.230 --> 00:03:26.110
So only if you really want to record
what the previous states were,

50
00:03:26.110 --> 00:03:31.360
you will have that, including the context
in which that previous date occurred.

51
00:03:31.360 --> 00:03:34.290
But in general, do not mutate context,

52
00:03:34.290 --> 00:03:38.000
especially because that might
have unintended side effects.

53
00:03:38.000 --> 00:03:40.590
The machines context is
just a normal object.

54
00:03:40.590 --> 00:03:45.220
So if you accidentally mutate that,
you're going to be mutating every single

55
00:03:45.220 --> 00:03:49.090
service instance that uses that machine,
which is not a good idea.

56
00:03:50.440 --> 00:03:54.630
All right, so this is Exercise 05,
which is context.

57
00:03:56.870 --> 00:03:59.650
So what we're going to be doing is
we're gonna be using context to update

58
00:03:59.650 --> 00:04:02.770
the extended state of our drag and
drop machine.

59
00:04:02.770 --> 00:04:05.520
We're gonna be having three assignments,

60
00:04:05.520 --> 00:04:07.720
which is,
we're assigning the point values.

61
00:04:07.720 --> 00:04:09.700
Which is when you initially click.

62
00:04:09.700 --> 00:04:13.907
We're assigning the Delta values,
which is how far away from those original

63
00:04:13.907 --> 00:04:17.420
point values the mouse has traveled
in a mousemove transition.

64
00:04:17.420 --> 00:04:20.240
And we're going to be assigning
the resting position,

65
00:04:20.240 --> 00:04:21.820
once our mouse is finally up.

66
00:04:23.580 --> 00:04:28.138
And so
start with inline assign action objects.

67
00:04:28.138 --> 00:04:34.580
So this assign, refactor these out of
the machine, once you have them working.

68
00:04:34.580 --> 00:04:38.530
And then you could set those as
configurable actions, if you have time.

69
00:04:40.600 --> 00:04:44.860
So let's just, I'm just gonna show you.

70
00:04:44.860 --> 00:04:48.740
Over here, we have a clue to what
the initial context should be.

71
00:04:48.740 --> 00:04:52.760
We have our x and y values, which
represent the current position of the box.

72
00:04:52.760 --> 00:04:54.720
We have the dx and dy values,

73
00:04:54.720 --> 00:04:57.770
which represent how far it's
traveled while we're dragging.

74
00:04:57.770 --> 00:05:03.110
And we have the px and py values, which
represent where it was originally clicked.

75
00:05:03.110 --> 00:05:06.100
So it doesn't do any jarring
motion while you drag it.

76
00:05:07.220 --> 00:05:08.520
And so, again,

77
00:05:08.520 --> 00:05:12.350
what you're going to wanna do is you're
going to wanna set that context.

78
00:05:12.350 --> 00:05:19.420
So you set that in here, and then you
want these assign actions to occur.

79
00:05:19.420 --> 00:05:24.245
One important note about assign,
assign is a pure function,

80
00:05:24.245 --> 00:05:26.570
assign doesn't do anything.

81
00:05:26.570 --> 00:05:28.010
It returns an object.

82
00:05:28.010 --> 00:05:31.430
So no side effects are happening
in the assign action.

83
00:05:31.430 --> 00:05:34.630
In fact, if we say,
let's actually log this.

84
00:05:34.630 --> 00:05:40.210
So console.log, and let's say,

85
00:05:40.210 --> 00:05:45.981
(assign({name: 'David',.

86
00:05:45.981 --> 00:05:50.910
So when we log this out,
we are going to see,

87
00:05:50.910 --> 00:05:54.124
let's go to Exercise 05.

88
00:05:56.695 --> 00:05:59.170
We're going to see that
it's a plain object.

89
00:05:59.170 --> 00:06:02.690
It has type of xstate.assign,
and it has an assignment.

90
00:06:02.690 --> 00:06:05.060
So its name, David.

91
00:06:05.060 --> 00:06:11.879
And so if we have count:
(context) =&gt; context.count + 1.

92
00:06:11.879 --> 00:06:13.550
Remember, this is being
defined outside the machine.

93
00:06:15.140 --> 00:06:18.380
Then we have two assignments.

94
00:06:18.380 --> 00:06:23.570
One of them is for name, and another one
is for count, which is that function.

95
00:06:23.570 --> 00:06:25.335
So assignment does nothing,

96
00:06:25.335 --> 00:06:31.390
actually just knows how to take this
assign action and apply it to the machine.

97
00:06:31.390 --> 00:06:34.935
And it does that when you
transition the machine.

98
00:06:34.935 --> 00:06:38.290
So again, it's a pure function.

99
00:06:38.290 --> 00:06:41.840
It returns an object, and
xstate knows what to do with that object.

