WEBVTT

1
00:00:00.140 --> 00:00:04.860
Now we're going to be talking about
actions, If you've used Redux or

2
00:00:04.860 --> 00:00:08.620
NgRx or ViewX or
any of those similar libraries before,

3
00:00:08.620 --> 00:00:11.506
actions might mean something different.

4
00:00:11.506 --> 00:00:14.981
But in state machine lingo
an action is a side effect,

5
00:00:14.981 --> 00:00:19.618
it's something that's fire and
forgets something that happens, and

6
00:00:19.618 --> 00:00:24.276
you could consider these effects to
be the output of the state machine.

7
00:00:24.276 --> 00:00:28.979
So as you're moving through the state
machine, things might happen, and

8
00:00:28.979 --> 00:00:32.708
we want to keep track of what
things could possibly happen,

9
00:00:32.708 --> 00:00:35.112
when you transition between states.

10
00:00:35.112 --> 00:00:41.669
If you go to the Wikipedia article for
finite state machine over here,

11
00:00:45.415 --> 00:00:48.807
You'll see that in concepts and
terminology,

12
00:00:48.807 --> 00:00:53.811
there's actions which represents
what side effects are done when you

13
00:00:53.811 --> 00:00:58.581
either enter a state or you exit a state,
or you take a transition.

14
00:00:58.581 --> 00:01:04.505
So in short, with state machines,
consider actions to be your side effects,

15
00:01:04.505 --> 00:01:07.467
so there's three types of actions, or

16
00:01:07.467 --> 00:01:12.698
three locations of actions that
could happen in your state machine.

17
00:01:12.698 --> 00:01:15.066
The first one is transition actions, so

18
00:01:15.066 --> 00:01:19.117
these are actions that are executed
whenever you take a transition.

19
00:01:19.117 --> 00:01:22.863
For example, if you go from idle to FETCH,

20
00:01:22.863 --> 00:01:26.933
then this fetchdata
action is going to occur.

21
00:01:26.933 --> 00:01:31.775
Now, when you go from idle to FETCH,
you land on the pending state, and

22
00:01:31.775 --> 00:01:34.940
there we have what's
called an entry action.

23
00:01:34.940 --> 00:01:38.885
These are actions that are taken
whenever a state is entered, so

24
00:01:38.885 --> 00:01:43.778
when you enter the pending states, in this
case we are going to show a spinner and

25
00:01:43.778 --> 00:01:48.838
that's going to be the side effect that's
executed once you get into that state.

26
00:01:48.838 --> 00:01:53.950
Now once you exit that state, and
exiting a state means transitioning out

27
00:01:53.950 --> 00:01:59.162
of the state and into a new state,
then the exit actions are going to occur.

28
00:01:59.162 --> 00:02:03.891
So in this case, when we go from pending
to resolved on the RESOLVE events,

29
00:02:03.891 --> 00:02:06.607
the hide spinner action is going to occur.

30
00:02:08.314 --> 00:02:12.366
So let's talk about action order for
a minute,

31
00:02:12.366 --> 00:02:15.919
let's say that we're on the idle state.

32
00:02:15.919 --> 00:02:21.256
When we go from idle to pending,
the first thing that's going to happen and

33
00:02:21.256 --> 00:02:26.425
you could follow the arrow, which
makes it a little bit more intuitive,

34
00:02:26.425 --> 00:02:29.665
is this fetchdata action
is going to happen.

35
00:02:29.665 --> 00:02:34.864
Once you reach pending, this
showSpinner action is going to happen,

36
00:02:34.864 --> 00:02:38.578
so this action is taken first,
and then this one.

37
00:02:38.578 --> 00:02:43.987
And once the RESOLVE event happens,
then we exit this pending state so

38
00:02:43.987 --> 00:02:47.386
this hideSpinner action is going to occur.

39
00:02:47.386 --> 00:02:51.131
Now as far as action order,
again following the arrows,

40
00:02:51.131 --> 00:02:56.123
the first thing that's going to happen,
is the exit action of the state that

41
00:02:56.123 --> 00:02:59.498
you're currently on,
is going to be taken first.

42
00:02:59.498 --> 00:03:02.947
And then the transition
action is going to occur,

43
00:03:02.947 --> 00:03:07.720
and entry action of the state that
you arrive on, is going to happen.

44
00:03:07.720 --> 00:03:13.147
So the order goes, exit actions,
transition actions then entry actions.

45
00:03:13.147 --> 00:03:18.143
However in general since actions
are side effects that are just fire and

46
00:03:18.143 --> 00:03:21.901
forget, we don't want to
depend on action too much.

47
00:03:21.901 --> 00:03:28.132
If you find yourself depending on certain
actions to occur before another action,

48
00:03:28.132 --> 00:03:33.116
then that's a sign that you might
want some model it as extra states

49
00:03:33.116 --> 00:03:38.120
instead of just implicitly relying
on this action order to occur.

50
00:03:38.120 --> 00:03:43.160
So in Xstates,
we have those three places where you could

51
00:03:43.160 --> 00:03:49.988
add extra actions in a transition,
you could add it to the actions property.

52
00:03:49.988 --> 00:03:54.363
And in action function is going to be
a function that takes in the context which

53
00:03:54.363 --> 00:03:59.007
we'll get into in a minute, and the event
and you could do whatever you want inside

54
00:03:59.007 --> 00:04:02.671
that action because, again,
it's considered a side effect.

55
00:04:02.671 --> 00:04:08.521
Inside each state node, you have an entry
property, which could contain one or

56
00:04:08.521 --> 00:04:12.818
more actions that are executed
once you enter that state.

57
00:04:12.818 --> 00:04:19.948
And so we have entry, and
we also have exit over here.

58
00:04:21.184 --> 00:04:24.429
Now a better way to represent
these actions is to use or

59
00:04:24.429 --> 00:04:28.843
to separate them out from inline
functions, into their own functions.

60
00:04:28.843 --> 00:04:32.893
And in this case,
we're using the ESX that arrow syntax for

61
00:04:32.893 --> 00:04:37.429
the functions, since we're just
console.logging something,

62
00:04:37.429 --> 00:04:41.162
we don't necessarily need the context or
the events.

63
00:04:41.162 --> 00:04:45.773
So this enter active action is
going to log into the active, and

64
00:04:45.773 --> 00:04:50.486
we could just put that right over here,
and it's a bit cleaner.

65
00:04:50.486 --> 00:04:56.293
And it also shows up really well in the
visualizer which we'll see in a minute.

66
00:04:56.293 --> 00:05:01.298
Now, you could also have multiple
actions as well, so one syntax

67
00:05:01.298 --> 00:05:07.031
that is sort of a syntax trigger for
Xstate, is that you could specify one or

68
00:05:07.031 --> 00:05:11.960
more actions either as a single action,
or an array of actions.

69
00:05:11.960 --> 00:05:16.724
If you give it an array, it's going to
execute both of these actions, again,

70
00:05:16.724 --> 00:05:18.473
don't depend on the order.

71
00:05:18.473 --> 00:05:22.029
Just assume that interactive and
send telemetry,

72
00:05:22.029 --> 00:05:27.079
are going to be executed at exactly
the same time, because they will be.

73
00:05:27.079 --> 00:05:32.214
So, when you enter active both
these events will happen, and

74
00:05:32.214 --> 00:05:38.747
then once you click this clickActive,
click active action is going to occur.

75
00:05:38.747 --> 00:05:44.163
And we also have this exitActive
which is going to occur before,

76
00:05:44.163 --> 00:05:48.387
clickActive, and
it's gonna go into inactive.

77
00:05:48.387 --> 00:05:53.527
It might make more sense if we
actually show this in the visualizer,

78
00:05:53.527 --> 00:05:56.693
so, we're going to go ahead and do that,

79
00:05:59.540 --> 00:06:04.127
I'm going to copy this,
right into the visualizer.

80
00:06:07.758 --> 00:06:14.624
Okay, over here,
that's console.log sending telemetry,

81
00:06:14.624 --> 00:06:19.038
and hopefully, this is correct great.

82
00:06:21.321 --> 00:06:26.069
All right, so now you could see
when you click the states tab,

83
00:06:26.069 --> 00:06:31.183
once we entered the initial state
which is active, we're going to

84
00:06:31.183 --> 00:06:37.414
execute two actions, the enterActive,
and the sendTelemetry action as well.

85
00:06:37.414 --> 00:06:42.134
Once we click think about whats going
to happen, the first thing that will

86
00:06:42.134 --> 00:06:47.310
happen is we're going to exit active,
so we're gonna call the exitAction, and

87
00:06:47.310 --> 00:06:52.660
we're going to execute it, then we're
going to execute the clickActive action.

88
00:06:52.660 --> 00:06:55.241
And then we're going to enter inactive, so

89
00:06:55.241 --> 00:06:58.398
we're going to execute
this enterinactive action.

90
00:06:58.398 --> 00:07:01.035
So once we click,
that's exactly what happens.

91
00:07:01.035 --> 00:07:06.762
We have exitInactive,
clickInactive and enteriInactive.

92
00:07:08.422 --> 00:07:13.644
Now, the way to get to show up
on the visualizer is to convert

93
00:07:13.644 --> 00:07:21.281
those action functions to strings such
as enterActive, clickActive, exitActive.

94
00:07:21.281 --> 00:07:25.679
And you can think about this as if you
were trying to make a JSON version of your

95
00:07:25.679 --> 00:07:26.308
machine.

96
00:07:26.308 --> 00:07:29.392
So, we could specify
the names of the actions

97
00:07:29.392 --> 00:07:34.262
that are going to be executed right
here in the machine definition, and

98
00:07:34.262 --> 00:07:37.688
as a second argument,
we pass an options object.

99
00:07:37.688 --> 00:07:42.515
And this object allows you to specify
different things such as, the actions.

100
00:07:42.515 --> 00:07:48.130
So, we could say, this sentTelemetry
action which we reference up here,

101
00:07:48.130 --> 00:07:53.669
as the string, refers to this side effect,
which is sending telemetry.

102
00:07:53.669 --> 00:07:57.728
Same thing with enterActive, clickActive,
and all of the other actions.

