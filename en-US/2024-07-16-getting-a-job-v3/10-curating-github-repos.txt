[00:00:00]
>> Jerome Hardaway: We're going to move straight into Strategic Repository Pinning. So the importance of repository pinning for the job search is pretty simple. You want to put the projects that showcase your strengths first, and you wanna make it easy. The whole point of the job search is for you to make it easy for you to be the top candidate.

[00:00:24]
I think that's how people don't really think about the job search. You're not trying to get a job, you're trying to be the obvious choice for the job. You wanna be the top candidate. You wanna be the person with the top potential. That's what you want. I call it front-loading, where I put so much information out there in front of the user, which is the hiring manager and the technical people, that everything else kinda feels like a formality for them.

[00:01:00]
That's what I want. I want that feeling from them that I'm already on the team. That's my job. So I treat it like I'm in, I've already going through the interview process before them, right? So for jobs that I want, I'm putting the repositories and things of that nature up there that it's already gonna help me win, right?

[00:01:27]
So versus, remember that key projects, right-handed profile. But my pin projects, I have similar projects that are just there. There's also my key projects and I'm showcasing, it gives a little high level overview with these pins, right? They see what's the primary language in there, right? So they know this one's TypeScript, this one was in my last course, things of that nature, and how many stars they have, right?

[00:01:56]
So they're able to go into and start looking into these projects. Now, this one, when you type into it, you see that I've been working on it, everybody's been working on it. How many contributors? This is the one that I have my troops contribute to, and I have that ReadMe filled out.

[00:02:14]
I have the badges of what it is, which NPM, which version of. Noted is license, contributions, welcome, what is powered by Vercel. I have what it is, the ReadMe is nice and clear. Every ReadMe on my pinning repositories is gonna be nice and clear. And have showcased how to run it and what's the purpose for it.

[00:02:41]
I'm never gonna have ugly ReadMe on any project that I'm gonna showcase. That is a no-no for me cuz it's all down here from there. There's a great book on design called Don't Make Me Think, that you should take that type of approach with everything that you do.

[00:03:01]
My job is not to make the person that I wanna make money with think about if I'm a good designer. Yeah, of course, it's a easy decision. Yes, pay the guy. That's what you want, right? So that's what I'm doing. I show them what's under the hood, talking about the architecture, say about what my mission is, how to get started.

[00:03:24]
The prerequisites of how to run this application, how to get up and running, how to start within, how to use dev container or Docker. Now, that was one thing that I have learned over the course of the past year is, a superpower people, they love that opportunity to be able to go and use Docker and dev container and not have to download all the other things that you have in your repo, put it on their machine locally.

[00:03:53]
So when they download the repo and then they clone your repo and it's like, and their VS Code, the whole, if you wanna run it with Docker shows up, they're like, wow that's awesome. So containerizing your apps, that is something I definitely recommend. It makes it friendly and they, like I said, they absolutely, especially for juniors, they love seeing that you thought about that.

[00:04:15]
That showcases you're behind thinking about the user experience on DevOps and a more infrastructure thought process. So they eat that up.
>> Jerome Hardaway: But I have that. Showcase, once again, showcase some steps where to open, have my contribution, guidelines, roadmap, license, they see all these things of how I'm thinking, right?

[00:04:39]
Have this license, I have this roadmap. I've how to contribute, I have all these things in place so that the user that show showcases, okay, this is a project. This is something that he doesn't do for his day job, but this is pretty robust for a project that someone doesn't do on a day job.

[00:04:58]
Then when I talk about it and you're like, I bring up the metrics and the numbers and I bring up how many people hit the website and how many views, things hit in all my analytics. I've took a playbook of page out the Frontend Masters book of using the transformations from my images to see how many times people are hitting the website and things like that, based upon the transformation, stuff like that.

[00:05:24]
Because markets, and is very big against Google Analytics. So I was like, okay, that's a cool idea, go from there. So that's another thing you can always learn from people you talk to, right? And of course, I wanna make sure you look at these technologies right now as a software engineer that's focusing on frontend.

[00:05:45]
These right now are the most community popular technologies that are stable, right? Those top three, Next.js, Tailwind, Playwright, those are things that are getting more popular in the industry. That are, if you know, people are gonna assume that you know other things as well, that you're adept in other things.

[00:06:10]
It's like, that's why they say yes. It's like how when Angular first hit, people assume that you knew React, the library, because you understood Angular, the framework, or that you could understand it, right? Being able to work with something as robust as Next.js, I understand that you're focusing on these tools that are for productivity and E to E, right?

[00:06:39]
Playwright is the ED testing suite. When they see that, they're like, that showcases that's a code, that's an indicator, a signal to people. They're like, hey, I am preparing, or I am ready for more mature products and projects, right? That is how the user sees that, right? That's how developers see that when they see technology.

[00:07:03]
You have to think that developers are very communal, right? So if you're in a community and, for instance, in the Java community and someone sees these things, they see Tailwind, they see Next.js, they see Playwright, they're gonna assume that you're accustomed to more modern stack. You are focusing on things that the community is working on or is on fire about as well, right?

[00:07:29]
And of course, TypeScript, I'm not gonna lie, I was a big outlier about learning TypeScript. But the harsh reality is that if you're gonna do React on any app that's making money out there, a lot of times out of ten, I'm gonna use some TypeScript on the frontend, or Angular in this TypeScript.

[00:07:50]
I think people who use view now also use some TypeScript, but I know Angular and React is on enterprise side. You're definitely using TypeScript. So if you learn JavaScript, the minute you move into a framework, you have to learn TypeScript. That's just, if you wanna make money, gotta learn TypeScript.

[00:08:08]
If you wanna get a job as a frontend developer, and not know TypeScript, you're gonna have a very hard journey. You need to go ahead. That's a mandatory skill now. It went from a nice to have in 2017 to a fundamental skill now in 2024. Going back to here, I keep my contributions bar open so people see how much I can contribute, as well as what I've contributed to and all the repos that I'm going over and under, right?

[00:08:38]
So this builds a story of sorts, right? With a pinning rep repositories, they can go into, they can go and look into more things. When they see, this one has a, cuz that's exactly what they're gonna do. They're gonna go and look at a thing that has 111 stars and see what that's about.

[00:08:54]
Or they're gonna go and see this thing and they're be like, okay, this has TypeScript, it has code on it. What is this about? And then that is how, the story, that's how I can control the flow of my story. My story is controlling the flow of the legitimacy of the work I do.

[00:09:11]
So I wanna showcase, hey, these are the things I've built for veterans. This is what we're doing on a virtual code. Come over here, see this code, see this coursework, see the things we're building. Go here for you and be like, hey, here's the tools and toys and language I'm building, here's the products that I have pushed out into the web.

[00:09:29]
Here are the people that are using it, here's how I'm using it, and you should definitely go check out this code.

