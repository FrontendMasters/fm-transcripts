WEBVTT

1
00:00:00.000 --> 00:00:03.368
&gt;&gt; Maximiliano Firtman: The part that I
think that you will use on a daily basis,

2
00:00:03.368 --> 00:00:08.142
if you like this, because I think that
there are a lot of people against this.

3
00:00:08.142 --> 00:00:11.483
But anyway, it is what it is,
so we have to get used to that.

4
00:00:11.483 --> 00:00:17.423
From ES2019,
we have a new way to define private

5
00:00:17.423 --> 00:00:22.692
class variables, private class variables.

6
00:00:22.692 --> 00:00:27.210
So you know that, for example,
if I have a class here, and

7
00:00:27.210 --> 00:00:32.945
I create the constructor, and
in the constructor, I create a variable.

8
00:00:32.945 --> 00:00:36.726
You know that you don't define
variables yet in ECMAScript,

9
00:00:36.726 --> 00:00:39.497
more than just using
the variable with this.

10
00:00:39.497 --> 00:00:44.352
If I wanna create a private variable
with a value, it's not really private.

11
00:00:44.352 --> 00:00:47.970
For years,
we were using techniques like using

12
00:00:47.970 --> 00:00:52.411
an underscore to express to
someone that this is private.

13
00:00:52.411 --> 00:00:57.253
But it's not really private, I can
actually always get to that value, okay?

14
00:00:57.253 --> 00:00:58.922
So it's not really private.

15
00:00:58.922 --> 00:01:04.337
Well, now, from ES2019,
we can create a private

16
00:01:04.337 --> 00:01:09.178
variable by using a # as
part of the identifier.

17
00:01:09.178 --> 00:01:12.832
And now,
I'm seeing those faces like, what?

18
00:01:12.832 --> 00:01:14.695
Yeah, that's the syntax.

19
00:01:14.695 --> 00:01:15.976
It's a #.

20
00:01:15.976 --> 00:01:23.023
And if I try to use the # now, it will
say, no, no, no, this is a private field.

21
00:01:23.023 --> 00:01:28.039
And then I can create a public

22
00:01:28.039 --> 00:01:36.190
property that returns this.#privateVar.

23
00:01:36.190 --> 00:01:38.206
So now you can access it but

24
00:01:38.206 --> 00:01:43.812
through a method that you check if you
wanna keep that data or not, okay?

25
00:01:43.812 --> 00:01:44.629
So it's up to you.

26
00:01:44.629 --> 00:01:47.517
If not,
you can just keep it as private forever.

27
00:01:47.517 --> 00:01:53.340
So within the class, you can access
the value, but not outside of the class.

28
00:01:53.340 --> 00:01:54.400
Make sense?
So it's just that.

29
00:01:54.400 --> 00:01:55.914
It's pretty simple.

30
00:01:55.914 --> 00:01:58.303
The weird part is the symbol, right?

31
00:01:58.303 --> 00:01:59.818
The syntax seems weird.

32
00:01:59.818 --> 00:02:04.486
Because in JavaScript,
seems like not part of the usual

33
00:02:04.486 --> 00:02:08.369
syntax that we are used in ECMAScript,
okay?

34
00:02:08.369 --> 00:02:12.058
So again,
this works only within classes, so

35
00:02:12.058 --> 00:02:15.475
it's not gonna work as a normal variable.

36
00:02:15.475 --> 00:02:19.261
So don't use the hash in a variable or
with let or const, okay?

37
00:02:19.261 --> 00:02:24.093
So it's just with fields or
properties, okay?

38
00:02:24.093 --> 00:02:24.890
Make sense?

39
00:02:24.890 --> 00:02:28.558
It's just that, and it's really private.

40
00:02:28.558 --> 00:02:32.496
By the way, being private doesn't
mean that in the dev tools,

41
00:02:32.496 --> 00:02:35.559
you can actually get to the value anyway,
okay?

42
00:02:35.559 --> 00:02:41.430
So if it's browser-based,
this is client-side JavaScript.

43
00:02:41.430 --> 00:02:43.446
You can always get into, but

44
00:02:43.446 --> 00:02:48.076
at least from a code point of view,
it's like private in TypeScript.

45
00:02:48.076 --> 00:02:51.684
It's like adding a private in TypeScript,
okay?

46
00:02:51.684 --> 00:02:57.038
Now, this is ECMAScript 2019.

47
00:02:57.038 --> 00:03:02.106
Now, 2022, so this is a recent part.

48
00:03:02.106 --> 00:03:05.748
Now, you don't need to use this.

49
00:03:05.748 --> 00:03:10.545
You can, within the class, declare fields,

50
00:03:10.545 --> 00:03:14.116
public fields or private fields.

51
00:03:14.116 --> 00:03:18.753
So, again, going back to the previous
example, remember I did this,

52
00:03:18.753 --> 00:03:20.314
this.#privateVar.

53
00:03:20.314 --> 00:03:22.936
No, I was using the constructor.

54
00:03:22.936 --> 00:03:27.702
Constructor, okay,
this private equals to any value.

55
00:03:27.702 --> 00:03:32.885
So maybe you are thinking, why Max,
you are not just adding the property here?

56
00:03:32.885 --> 00:03:35.565
Well, because this is a different spec.

57
00:03:35.565 --> 00:03:40.999
On 2019,
we didn't create properties like this.

58
00:03:40.999 --> 00:03:43.393
You can say, but I've seen this.

59
00:03:43.393 --> 00:03:49.202
Maybe you've seen this in maybe React
using Babel, because you were using

60
00:03:49.202 --> 00:03:54.549
modern version of ECMAScript, or
you've seen this in TypeScript,

61
00:03:54.549 --> 00:04:00.236
because it was available in TypeScript,
but not in ECMAScript.

62
00:04:00.236 --> 00:04:05.097
So in ECMAScript,
the ability to define public fields or

63
00:04:05.097 --> 00:04:12.913
public properties directly in the class
body without this., it's new from ES2022.

64
00:04:12.913 --> 00:04:15.898
And it can be public or private.

65
00:04:15.898 --> 00:04:16.989
How do you know that?

66
00:04:16.989 --> 00:04:19.655
If it has the hash, prefix.

67
00:04:19.655 --> 00:04:20.788
Yeah?

68
00:04:20.788 --> 00:04:25.698
&gt;&gt; Speaker 2: I haven't worked with
React class components in a minute.

69
00:04:25.698 --> 00:04:27.808
So I don't remember this very well,

70
00:04:27.808 --> 00:04:31.768
but it used to be really common to
use a static keyword for constants.

71
00:04:31.768 --> 00:04:36.208
Does static interact with the hash for
privacy, etc.,

72
00:04:36.208 --> 00:04:41.682
in specific ways, or is it just,
they're just seamless Interrupt?

73
00:04:41.682 --> 00:04:45.990
&gt;&gt; Maximiliano Firtman: Well,
these are clearly instance fields, okay?

74
00:04:45.990 --> 00:04:50.900
So they are fields or
properties of instances from this class.

75
00:04:50.900 --> 00:04:54.220
The static is something
that we will see next.

76
00:04:54.220 --> 00:04:57.820
So we do have a static
that is also kind of new.

77
00:04:57.820 --> 00:05:00.304
And if you have seen that in React,

78
00:05:00.304 --> 00:05:05.872
it's because you was probably using
ESNext because React, five years ago,

79
00:05:05.872 --> 00:05:10.754
seven years ago, was using a lot of
features to make the code cleaner

80
00:05:10.754 --> 00:05:16.101
that were not actually shipped
in ECMAScript yet, at the time.

81
00:05:16.101 --> 00:05:17.783
They were ESNext.

82
00:05:17.783 --> 00:05:20.492
ES Next was, it's a stage three, but

83
00:05:20.492 --> 00:05:24.347
Babel was actually then
transpiling that into JavaScript.

84
00:05:24.347 --> 00:05:25.838
Now, it's in the spec,

85
00:05:25.838 --> 00:05:29.602
so you can use it directly in
the browser without Babel, okay?

86
00:05:29.602 --> 00:05:34.537
By the way, here, the tool that I'm using
here to render these websites is not using

87
00:05:34.537 --> 00:05:35.801
a Babel or anything.

88
00:05:35.801 --> 00:05:39.114
It's just running JavaScript
in the browser, okay?

89
00:05:39.114 --> 00:05:43.896
So, well, we have instance fields,
they can be public or private.

90
00:05:43.896 --> 00:05:48.149
The difference is the hash prefix.

91
00:05:48.149 --> 00:05:50.274
&gt;&gt; Speaker 2: But for, say,
class fields or class methods,

92
00:05:50.274 --> 00:05:52.945
with the static keyword- With
the static keyword, yeah.

93
00:05:52.945 --> 00:05:58.050
Those do interact with the privacy hash or
they're separate?

94
00:05:58.050 --> 00:06:02.668
&gt;&gt; Maximiliano Firtman: No,
because if it's static, it's public.

95
00:06:02.668 --> 00:06:05.350
&gt;&gt; Speaker 2: Gotcha, thank you.

96
00:06:05.350 --> 00:06:07.925
&gt;&gt; Maximiliano Firtman: And
something that is new is the syntax

97
00:06:07.925 --> 00:06:11.759
should create #privateMethods as well.

98
00:06:11.759 --> 00:06:16.717
Which, again, it feels weird, or you
when you look at those, it feels weird,

99
00:06:16.717 --> 00:06:20.272
you're executing a method
starting with a hash, okay?

100
00:06:20.272 --> 00:06:23.703
By the way,
hash is not a valid identifier for

101
00:06:23.703 --> 00:06:27.417
variables in JavaScript or
for any other thing.

102
00:06:27.417 --> 00:06:31.823
So that's why they use that and
not underscore or things like that,

103
00:06:31.823 --> 00:06:36.015
because the underscore was
already a valid identifier, okay?

104
00:06:36.015 --> 00:06:39.410
And remember,
we have backward compatibility.

105
00:06:39.410 --> 00:06:42.099
And now,
we can have #privateMethods as well.

106
00:06:42.099 --> 00:06:45.068
Remember, these methods, in this case,

107
00:06:45.068 --> 00:06:49.942
can only be executed from within
the class, not from outside, okay?

108
00:06:49.942 --> 00:06:50.842
It's just that.

109
00:06:50.842 --> 00:06:57.219
Not really a big deal, but it's a big deal
for our brain to get used to this syntax.

110
00:06:57.219 --> 00:07:01.478
And if you're used to TypeScript,
you also have a problem,

111
00:07:01.478 --> 00:07:06.586
because from now on, you need to pick
which syntax you're going to use.

112
00:07:06.586 --> 00:07:08.679
Because remember that
TypeScript is a superset.

113
00:07:08.679 --> 00:07:11.880
And then you can use
ECMAScript private fields, or

114
00:07:11.880 --> 00:07:14.942
you can use the TypeScript
private properties.

115
00:07:14.942 --> 00:07:17.497
And it's a different syntax,
okay, but anyway.

116
00:07:17.497 --> 00:07:21.616
We have any question, private fields?

117
00:07:21.616 --> 00:07:22.799
Yeah?

118
00:07:22.799 --> 00:07:23.891
&gt;&gt; Speaker 3: Does
the private keyword exist or

119
00:07:23.891 --> 00:07:25.155
do private properties-
&gt;&gt; Maximiliano Firtman: No,

120
00:07:25.155 --> 00:07:29.909
the private keyword does
not exist in JavaScript.

121
00:07:29.909 --> 00:07:33.892
So we don't use private as a prefix for
something.

122
00:07:33.892 --> 00:07:38.781
I mean, here in the tool,
you will see a different key,

123
00:07:38.781 --> 00:07:43.158
but that's highlighting,
but it's not there.

