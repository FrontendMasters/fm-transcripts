WEBVTT

1
00:00:00.240 --> 00:00:02.602
&gt;&gt; Maximiliano Firtman: Okay, so
let's start talking about JavaScript, so

2
00:00:02.602 --> 00:00:04.420
I wanna start with a question for you.

3
00:00:04.420 --> 00:00:07.507
So if you go to an interview and
someone is asking,

4
00:00:07.507 --> 00:00:12.290
which version of JavaScript are you using,
what's your answer?

5
00:00:12.290 --> 00:00:15.940
ES6, so is that the JavaScript version?

6
00:00:15.940 --> 00:00:20.824
So the first thing is that we
are not sure what to answer, right?

7
00:00:20.824 --> 00:00:24.784
If you think about the question,
it's not really a straight answer.

8
00:00:24.784 --> 00:00:30.247
So it's complicated, it's like why but
something is like, yes, something to.

9
00:00:30.247 --> 00:00:31.461
So it's not clear, right?

10
00:00:31.461 --> 00:00:36.218
Compare with other languages, where
it's actually really clear when you're

11
00:00:36.218 --> 00:00:41.046
doing C sharp when you're doing Java or
GO or any other language, it's actually

12
00:00:41.046 --> 00:00:46.215
really clear the version that you're
using, okay, but not in JavaScript.

13
00:00:46.215 --> 00:00:47.176
So, in fact,

14
00:00:47.176 --> 00:00:52.865
let's try to analyze the situation do
we have versions in JavaScript itself?

15
00:00:52.865 --> 00:00:56.720
So let's try to get in there,
these days JavaScript and

16
00:00:56.720 --> 00:01:01.007
I will nail down into the,
even the legal concepts here.

17
00:01:01.007 --> 00:01:04.427
JavaScript is not actually versioned,
okay?

18
00:01:04.427 --> 00:01:09.207
But, of course, some of your answers
were actually yes, yes, something.

19
00:01:09.207 --> 00:01:12.767
So, there is something that is versioned
that is currently not JavaScript.

20
00:01:12.767 --> 00:01:15.449
I mean, when you're using
JavaScript in the browser,

21
00:01:15.449 --> 00:01:17.947
you don't specify a version anywhere.

22
00:01:17.947 --> 00:01:21.750
Of course, we know that we
are not compiling JavaScript,

23
00:01:21.750 --> 00:01:25.952
compiling in the, let's say,
the deep sense of compilation.

24
00:01:25.952 --> 00:01:30.672
Like taking a source code and getting
binary code, okay, we're not doing that.

25
00:01:30.672 --> 00:01:35.462
So then we're not using a compiler and the
compiler is the one that has a version.

26
00:01:35.462 --> 00:01:40.738
So when I'm using C sharp, I'm using a
compiler, and that compiler is C sharp 12,

27
00:01:40.738 --> 00:01:44.868
C sharp 11, okay, the compiler
is the one that has the version.

28
00:01:45.998 --> 00:01:50.856
But in this case, we are shipping source
code, we're deploying source code to

29
00:01:50.856 --> 00:01:56.008
the web, and we don't specify a version
in the script tag, for example.

30
00:01:56.008 --> 00:02:02.309
Also, when you're using Node.js, you don't
specify a version in the source code, or

31
00:02:02.309 --> 00:02:08.022
when you are running your node script,
there is no command argument to specify,

32
00:02:08.022 --> 00:02:11.714
I want to use that version of JavaScript.

33
00:02:11.714 --> 00:02:14.774
We don't have that, and
that's different from other languages.

34
00:02:14.774 --> 00:02:19.978
Actually, when people are coming to
JavaScript from other languages,

35
00:02:19.978 --> 00:02:23.721
this is the first thing
that they see as a problem.

36
00:02:23.721 --> 00:02:27.791
It's, you don't have versions here,
so how do you work with that?

37
00:02:27.791 --> 00:02:31.778
Well, actually to be
fair here with history,

38
00:02:31.778 --> 00:02:37.471
we used to have JavaScript versions,
I remember this, okay?

39
00:02:37.471 --> 00:02:44.165
This is from 1996,
actually on the Mozilla umbrella world,

40
00:02:44.165 --> 00:02:47.949
that's Netscape and then Firefox.

41
00:02:47.949 --> 00:02:55.157
So we had a way to specify the version
of JavaScript that we want, okay?

42
00:02:55.157 --> 00:03:00.671
And we did have versions here,
from 1.0 to 1.8.5,

43
00:03:00.671 --> 00:03:06.537
that was the last version of
JavaScript from the Mozilla team.

44
00:03:06.537 --> 00:03:13.928
But that was deprecated even in
Firefox in 2010, okay, so it's gone.

45
00:03:13.928 --> 00:03:18.978
And of course, this was not
actually part of the community.

46
00:03:18.978 --> 00:03:23.257
At that time,
we didn't have books on JavaScript 1.3 or

47
00:03:23.257 --> 00:03:27.887
JavaScript 1.4, okay,
it wasn't the case anyway.

48
00:03:27.887 --> 00:03:33.956
And of course, Microsoft and other
browsers didn't take these versions, okay?

49
00:03:33.956 --> 00:03:35.788
So this is deprecated, and

50
00:03:35.788 --> 00:03:40.097
we don't use the language attribute
on the script tag anymore.

51
00:03:41.158 --> 00:03:46.220
So, brief history of JavaScript,
not because this is a history lesson,

52
00:03:46.220 --> 00:03:50.386
but because there are some
important things to understand,

53
00:03:50.386 --> 00:03:54.238
to then know why things
are the way they are, okay?

54
00:03:54.238 --> 00:03:58.008
So in 1995,
Brendan Eich created JavaScript.

55
00:03:58.008 --> 00:04:03.871
And JavaScript there is not alone, it has
that little TM Unicode character there.

56
00:04:03.871 --> 00:04:08.481
That's a trademark, okay, and
that's important here for the discussion.

57
00:04:08.481 --> 00:04:15.940
So I talked with Brendan, so we met in
twice, I think, in different conferences.

58
00:04:15.940 --> 00:04:19.609
And he told me that he was looking for
a name for

59
00:04:19.609 --> 00:04:23.580
the language that he was creating for
Netscape.

60
00:04:23.580 --> 00:04:28.744
Initially, there was different
names including Live Script,

61
00:04:28.744 --> 00:04:30.761
but it was already used.

62
00:04:30.761 --> 00:04:34.195
He had a friend working
at some microsystems,

63
00:04:34.195 --> 00:04:37.989
and they were working on
a language as well, Java.

64
00:04:37.989 --> 00:04:43.362
And for the language,
they registered a couple of trademarks,

65
00:04:43.362 --> 00:04:47.153
Java, JavaScript, and Java other things.

66
00:04:47.153 --> 00:04:52.379
And actually, his friend told him,
told Brendan, hey, so we have JavaScript,

67
00:04:52.379 --> 00:04:58.142
the name, and we're not going to use it,
you wanna use it for your language?

68
00:04:58.142 --> 00:05:02.570
But we know that there is no
relationship between JavaScript and

69
00:05:02.570 --> 00:05:06.016
Java more than the first four characters,
okay?

70
00:05:06.016 --> 00:05:10.931
So JavaScript is not really
like a minor version of

71
00:05:10.931 --> 00:05:15.386
Java as VBScript was to Visual Basic,
okay?

72
00:05:15.386 --> 00:05:21.733
Anyway, but that trademark thing is
important in the timeline of JavaScript.

73
00:05:21.733 --> 00:05:27.133
So then Netscape 2, 2.0, actually that
was the first browser I used on Windows,

74
00:05:27.133 --> 00:05:32.123
added JavaScript 1.0,
the first version of JavaScript, okay?

75
00:05:32.123 --> 00:05:37.322
IE Microsoft at the time was
actually the main competitor of some

76
00:05:37.322 --> 00:05:42.712
microsystem at least on this spar,
and I'm also on the browsers,

77
00:05:42.712 --> 00:05:47.107
at the time it was
called the browsers war.

78
00:05:47.107 --> 00:05:52.247
We had Netscape on one side, and IE,
Internet Explorer on the other side.

79
00:05:52.247 --> 00:05:57.016
So Microsoft didn't want to take
a legal battle over the JavaScript

80
00:05:57.016 --> 00:05:59.375
term because it was a trademark.

81
00:05:59.375 --> 00:06:05.251
So they created JScript, I'm not
sure if you're aware about JScript.

82
00:06:05.251 --> 00:06:09.642
JScript was actually Microsoft's
implementation of JavaScript,

83
00:06:09.642 --> 00:06:11.351
with minor differences.

84
00:06:11.351 --> 00:06:14.764
It was compatible on 99% of the code, but

85
00:06:14.764 --> 00:06:19.939
it wasn't actually JavaScript legally,
it was JScript, okay?

86
00:06:19.939 --> 00:06:24.767
Anyway, because that was a mess, so that
we have two main browsers on the field,

87
00:06:24.767 --> 00:06:29.397
supporting two different languages,
it was a mess for us, for developers.

88
00:06:29.397 --> 00:06:34.248
Actually, is that Brendan went
to the ECMA organization,

89
00:06:34.248 --> 00:06:39.592
it's a nonprofit organization,
where you can set an standard.

90
00:06:39.592 --> 00:06:44.988
So, we can go there and sit down and
say, okay, we here at Frontend Masters,

91
00:06:44.988 --> 00:06:48.737
we wanna create a new standard for
something, okay?

92
00:06:48.737 --> 00:06:50.944
We can sit there and
create a document, and

93
00:06:50.944 --> 00:06:53.777
we can publish the document on the ECMA,
okay?

94
00:06:53.777 --> 00:06:59.943
And they created the ECMA-Script,
that was actually JavaScript, but

95
00:06:59.943 --> 00:07:07.033
formalized as a document with a standard
process, okay, that's ECMA-Script.

96
00:07:07.033 --> 00:07:11.774
So it was the JavaScript thing,
but now formalize as a standard

97
00:07:11.774 --> 00:07:16.708
in a non-profit organization,
okay, that's kinda the idea.

98
00:07:16.708 --> 00:07:20.282
And actually, IE4 was the first one,

99
00:07:20.282 --> 00:07:26.674
Internet Explorer 4 was the first
one supporting ECMAScript 1, and

100
00:07:26.674 --> 00:07:32.757
that was the first step into having
one JavaScript for all, okay?

101
00:07:32.757 --> 00:07:37.219
And we are talking about
the era of the Internet where

102
00:07:37.219 --> 00:07:42.113
browsers were actually shipped in CD-ROMs,
okay?

103
00:07:42.113 --> 00:07:48.838
So this is the original Internet Explorer
4 CD-ROM from Microsoft.

104
00:07:48.838 --> 00:07:54.383
And this was the first one supporting
ECMAScript 1 from Microsoft, okay?

105
00:07:54.383 --> 00:07:55.270
Of course,

106
00:07:55.270 --> 00:08:01.143
you need to get it physically somehow to
actually install it in your computer.

107
00:08:02.190 --> 00:08:06.553
And then different versions appear,
okay, we have ES2,

108
00:08:06.553 --> 00:08:11.830
there was a 2.1, I don't wanna
spend too much time with that.

109
00:08:11.830 --> 00:08:15.720
On 1999, ES3 was released, okay?

110
00:08:15.720 --> 00:08:20.969
And actually we have a lot of ES,
like almost 10 ES,

111
00:08:20.969 --> 00:08:28.216
known as The Dark ages of the web where
JavaScript was kind of dead, okay?

112
00:08:28.216 --> 00:08:30.556
We didn't have any new versions and

113
00:08:30.556 --> 00:08:36.106
also at that time we didn't have a lot
of browsers, so everyone was using IE.

114
00:08:36.106 --> 00:08:40.734
We are talking about the era of IE6,
IE5.5, then IE6 and

115
00:08:40.734 --> 00:08:43.048
JavaScript was kind of there.

116
00:08:43.048 --> 00:08:47.474
I remember at the time we didn't
have JavaScript books anymore.

117
00:08:47.474 --> 00:08:54.584
So every book on JavaScript was actually
from the early 2000s or late 90s.

118
00:08:54.584 --> 00:08:57.824
Because JavaScript was for babies,
something like that, right?

119
00:08:57.824 --> 00:09:01.964
So you were doing all the stuff,
if it was client side,

120
00:09:01.964 --> 00:09:04.934
it was flash, the flash player.

121
00:09:04.934 --> 00:09:13.344
And if it was server side it was or PHP or
.net or Java, but no JavaScript, okay?

122
00:09:13.344 --> 00:09:17.170
Well, of course, things have changed
after that fortunately for us,

123
00:09:17.170 --> 00:09:19.930
that's why we are here
talking about JavaScript.

124
00:09:19.930 --> 00:09:22.320
And then in 2009 ES5 was released, and

125
00:09:22.320 --> 00:09:25.630
maybe you're thinking
what happened with ES4.

126
00:09:25.630 --> 00:09:30.190
It was never released, so
there was a five there, it doesn't matter,

127
00:09:30.190 --> 00:09:33.660
politics came,
actually it came to politics.

128
00:09:33.660 --> 00:09:39.147
And anyway, ES5 was released, and
let's say that five years ago,

129
00:09:39.147 --> 00:09:43.970
if someone didn't know the version
of JavaScript that she or

130
00:09:43.970 --> 00:09:46.916
he was using, it was probably ES5.

131
00:09:46.916 --> 00:09:52.802
Today, I can say that if you know
the version of JavaScript you're using,

132
00:09:52.802 --> 00:09:58.410
you're probably using ES6,
the version that appeared in 2015,

133
00:09:58.410 --> 00:10:02.345
that actually started a new life for
JavaScript.

134
00:10:02.345 --> 00:10:09.221
Because now we have a new process that
creates a new version per year, okay?

135
00:10:09.221 --> 00:10:14.243
From 2015 from ES6, ECMAScript 6,

136
00:10:14.243 --> 00:10:18.710
we have a new version per year, okay?

137
00:10:18.710 --> 00:10:22.021
Initially that sounds scary,
okay, because hey, but

138
00:10:22.021 --> 00:10:26.681
I mean if you're coming from Angola,
probably you're raised there, okay?

139
00:10:26.681 --> 00:10:31.209
You have maybe two main major versions
per year, something like that.

140
00:10:31.209 --> 00:10:36.649
But that doesn't mean that every new
version changes completely the language or

141
00:10:36.649 --> 00:10:41.835
reciting loads of stuff,
sometimes it's just minor changes, okay?

142
00:10:41.835 --> 00:10:46.340
So that's why today we don't know when
someone is asking which version of

143
00:10:46.340 --> 00:10:50.500
ECMAScript are we using,
sometimes we are not really sure, okay?

144
00:10:50.500 --> 00:10:55.204
I mean, it's fine, so
JavaScript is a trademark today of

145
00:10:55.204 --> 00:11:00.445
Oracle Corporation,
Oracle acquire Sun Microsystems.

146
00:11:00.445 --> 00:11:05.127
And now he has the JavaScript
trademark in the US.

147
00:11:05.127 --> 00:11:10.331
And actually, we had some
situation such as Oracle sending

148
00:11:10.331 --> 00:11:15.443
emails from lawyers to people
using the JavaScript term.

149
00:11:15.443 --> 00:11:20.301
In this case, it was in the App Store,
so someone was having a JavaScript

150
00:11:20.301 --> 00:11:25.412
course on the App Store, like an app
with that JavaScript term in the title.

151
00:11:25.412 --> 00:11:31.092
And yeah Oracle sends them a notification
say, hey this is our trademark,

152
00:11:31.092 --> 00:11:34.701
then after that Oracle
apologized about that,

153
00:11:34.701 --> 00:11:38.239
they said that they
didn't intend to do that.

154
00:11:38.239 --> 00:11:43.224
So at this point I think that Oracle
even if they own the trademark,

155
00:11:43.224 --> 00:11:48.847
they can't use it legally,
they can't say it's our trademark anymore.

156
00:11:48.847 --> 00:11:53.404
So, I mean,
the negative reaction of doing that has

157
00:11:53.404 --> 00:11:58.386
really a high cost, so
they don't wanna do that anyway.

158
00:11:58.386 --> 00:12:02.416
So that's why for legal issues,
most companies will use ECMAScript

159
00:12:02.416 --> 00:12:06.667
when they say that they're implementing or
talking about JavaScript.

160
00:12:06.667 --> 00:12:10.194
And some other companies, and
even Microsoft and Google these days,

161
00:12:10.194 --> 00:12:13.854
they don't care anymore, and
they just say JavaScript and it's fine.

162
00:12:13.854 --> 00:12:16.235
No one is really complaining, okay?

163
00:12:16.235 --> 00:12:19.903
So, and by the way,
the Mozilla Foundation,

164
00:12:19.903 --> 00:12:23.203
that is the one that is creating Firefox.

165
00:12:23.203 --> 00:12:26.903
Has an agreement with Oracle
to use the JavaScript or

166
00:12:26.903 --> 00:12:29.435
to keep the JavaScript trademark.

167
00:12:30.565 --> 00:12:31.241
But anyway,

168
00:12:31.241 --> 00:12:35.735
it's not like Firefox is the only browser
using JavaScript these days, okay?

169
00:12:35.735 --> 00:12:38.754
But ECMAScript, the name,
is free to use and

170
00:12:38.754 --> 00:12:42.866
also is the name that we use
to version the language.

171
00:12:42.866 --> 00:12:46.599
So we can say that JavaScript and
ECMAScript is kind of the same thing.

