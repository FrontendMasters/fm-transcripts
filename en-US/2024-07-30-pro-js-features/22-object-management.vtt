WEBVTT

1
00:00:00.180 --> 00:00:02.050
&gt;&gt; Maximiliano Firtman: Okay,
so now talking about object.

2
00:00:03.210 --> 00:00:05.636
So object is the object class.

3
00:00:05.636 --> 00:00:10.123
We are talking about instances here,
not class declaration, but instances.

4
00:00:10.123 --> 00:00:14.580
Here I have a list of some tools
that we have available that they

5
00:00:14.580 --> 00:00:18.451
are available in different
versions of ECMAScript.

6
00:00:18.451 --> 00:00:22.953
Here you can see that
assign 15 entries 17.

7
00:00:22.953 --> 00:00:25.103
So, I have a hasOwn 2022.

8
00:00:25.103 --> 00:00:27.475
I have a lot of examples here.

9
00:00:27.475 --> 00:00:33.513
These are just very small changes
to the object class tools to use.

10
00:00:33.513 --> 00:00:38.509
For example, in this case,
object assign will actually copy

11
00:00:38.509 --> 00:00:42.256
the values of all the own
properties from one or

12
00:00:42.256 --> 00:00:47.643
more objects to a target object,
so it will copy the properties.

13
00:00:47.643 --> 00:00:52.489
Do you know what's an own property, or
what's the difference between property and

14
00:00:52.489 --> 00:00:54.313
own property?

15
00:00:54.313 --> 00:00:57.513
&gt;&gt; Student: Ones that don't
come from the prototype chain?

16
00:00:57.513 --> 00:00:58.321
&gt;&gt; Maximiliano Firtman: Yeah,
that's correct.

17
00:00:58.321 --> 00:01:03.128
So an own property, it's a property that
is defined in that particular object and

18
00:01:03.128 --> 00:01:05.718
it's not coming from the prototype chain.

19
00:01:05.718 --> 00:01:07.487
That from an OOP perspective,

20
00:01:07.487 --> 00:01:12.672
it's like saying that it's not coming from
the hierarchy, from the super class, okay?

21
00:01:12.672 --> 00:01:17.630
But it's not always a super class
in JavaScript, but that's the idea.

22
00:01:17.630 --> 00:01:20.923
So in this case, we have a target,
we have a source.

23
00:01:20.923 --> 00:01:24.806
With b and c and a target,
and then you assign that, and

24
00:01:24.806 --> 00:01:27.343
now the assign is this one.

25
00:01:27.343 --> 00:01:30.937
Now it has a, so now the target,
actually the return

26
00:01:30.937 --> 00:01:35.693
target because it's a third object,
it's assigning a, b, and c.

27
00:01:36.853 --> 00:01:37.385
It's just that.

28
00:01:37.385 --> 00:01:43.131
Then get entries, actually entries,
not get entries, entries,

29
00:01:43.131 --> 00:01:49.107
will convert all the own properties
into a key value array pair.

30
00:01:49.107 --> 00:01:55.391
So, for example, this object that you
see here, it's converted into an array,

31
00:01:55.391 --> 00:02:01.762
it's an array with sub arrays with
key value, key value, key value.

32
00:02:01.762 --> 00:02:02.932
It's just that.

33
00:02:02.932 --> 00:02:05.562
It converts an object
into that other format.

34
00:02:07.382 --> 00:02:10.352
Values will give an array only
with the values, with no keys.

35
00:02:12.952 --> 00:02:14.222
Is it useful?

36
00:02:14.222 --> 00:02:18.232
There are very specific
reasons to do that.

37
00:02:18.232 --> 00:02:23.333
And also, you can kind of do something
similar with the "for...in" so you can emulate

38
00:02:23.333 --> 00:02:29.007
the, sometimes there's more differences
between one or the other, but just that.

39
00:02:30.407 --> 00:02:32.238
So then, from entries,

40
00:02:32.238 --> 00:02:38.387
object from entries is actually
the counterpart of this one of entries.

41
00:02:38.387 --> 00:02:43.017
With from entries, you can take this
structure, array of sub arrays,

42
00:02:43.017 --> 00:02:48.756
an array with an array of key value,
and convert that back into an object.

43
00:02:48.756 --> 00:02:55.086
It's like serializing an object to arrays
and vice versa, something like that.

44
00:02:56.086 --> 00:03:01.219
And hasOwn is just a way to know
if one object has its property,

45
00:03:01.219 --> 00:03:06.058
but it's an own property, and
it's not a property coming

46
00:03:06.058 --> 00:03:10.340
from the hierarchy or
the prototype chain, okay?

47
00:03:10.340 --> 00:03:14.649
For example,
just string is available on every object.

48
00:03:14.649 --> 00:03:19.502
So when you're asking for this object,
the object has a toString,

49
00:03:19.502 --> 00:03:21.984
but it's not an own property.

50
00:03:21.984 --> 00:03:22.994
So it gives you false.

51
00:03:24.674 --> 00:03:27.804
And a, it's an own property.

52
00:03:29.424 --> 00:03:31.184
Okay, it's just that.

53
00:03:31.184 --> 00:03:36.191
And also from ES6,
you have the is that it's actually pretty

54
00:03:36.191 --> 00:03:41.695
similar to the triple equals operator,
but not 100% the same.

55
00:03:42.982 --> 00:03:49.200
So, it has to do with the not so
happy NaN value,

56
00:03:49.200 --> 00:03:54.882
not a number, so it has to do with that.

57
00:03:54.882 --> 00:03:59.670
Actually, we need to spend like 20
minutes to understand the difference

58
00:03:59.670 --> 00:04:01.949
between "is" and triple equals.

59
00:04:01.949 --> 00:04:06.374
I don't think it's worth the time,
but have in mind it's there, okay?

