WEBVTT

1
00:00:00.280 --> 00:00:03.030
&gt;&gt; Maximiliano Firtman: It's time
to talk about another big topic,

2
00:00:03.030 --> 00:00:08.400
mostly in JavaScript development,
that is asynchronous programming.

3
00:00:08.400 --> 00:00:13.540
So, and ESX was actually a big deal here.

4
00:00:14.680 --> 00:00:16.920
So we are going to start
talking about promises.

5
00:00:16.920 --> 00:00:21.567
So, actually, promises was
a design pattern before ES6, but

6
00:00:21.567 --> 00:00:24.688
from ES6, it was a part of the language.

7
00:00:24.688 --> 00:00:26.774
So it's now part of the language.

8
00:00:26.774 --> 00:00:28.058
So we will do a recap.

9
00:00:28.058 --> 00:00:33.818
So that's ES6, but then we will
get into new syntax after ES6.

10
00:00:33.818 --> 00:00:38.657
Async/Await is probably the most famous
one and maybe you have used that, but

11
00:00:38.657 --> 00:00:40.651
that's from a year after ES6.

12
00:00:40.651 --> 00:00:44.809
But we'll talk about promises
improvements that appeared after that.

13
00:00:44.809 --> 00:00:46.985
Asynchronous iterations, so

14
00:00:46.985 --> 00:00:51.174
these are iterators that can
also be used with async await.

15
00:00:51.174 --> 00:00:54.144
Top-level await, actually,

16
00:00:54.144 --> 00:00:59.219
that was the last thing that
was added in the platform.

17
00:00:59.219 --> 00:01:03.487
And then some advanced situations
around async programming.

18
00:01:03.487 --> 00:01:08.559
So, including atomics and
SharedArrayBuffer.

19
00:01:08.559 --> 00:01:16.399
So these advanced topics are there now,
so we won't get into those details.

20
00:01:16.399 --> 00:01:20.852
This is actually, I'm not sure if you
have ever played with SharedArrayBuffer,

21
00:01:20.852 --> 00:01:25.177
that's what actually something that's for
many years, almost eight years,

22
00:01:25.177 --> 00:01:28.747
they disappeared from browsers
because it was a security issue.

23
00:01:28.747 --> 00:01:33.882
Actually, a SharedArrayBuffer
is a way that the web app has

24
00:01:33.882 --> 00:01:38.812
to share data, like a piece of memory,
with other tabs or

25
00:01:38.812 --> 00:01:44.790
Windows from the same origin, but
that they have their own context.

26
00:01:44.790 --> 00:01:49.580
For example, you have two Gmail tabs open.

27
00:01:49.580 --> 00:01:53.209
Instead of creating variables or

28
00:01:53.209 --> 00:01:58.520
data on each tab,
you can share data, okay?

29
00:01:58.520 --> 00:02:01.480
But there was a security
problem with that.

30
00:02:01.480 --> 00:02:07.431
So then the browsers removed that,
it came back again a few years ago.

31
00:02:07.431 --> 00:02:14.317
But anyway, if you get into that part,
yes, we'll give you some newer stuff.

32
00:02:14.317 --> 00:02:17.817
Okay, but
we won't get into those advanced parts.

33
00:02:17.817 --> 00:02:25.470
So before promises, it was pretty common
in the web space to use callbacks.

34
00:02:25.470 --> 00:02:28.983
I'm not sure if you have heard
about the callback hell mentioned,

35
00:02:28.983 --> 00:02:33.372
where callbacks are really difficult to
follow, mostly when you have a callback,

36
00:02:33.372 --> 00:02:36.980
but when that's finished,
you have another callback.

37
00:02:36.980 --> 00:02:42.144
Callback is when you ask for something to
be done, for example, in some seconds.

38
00:02:42.144 --> 00:02:45.782
So I have doInSeconds,
where I pass the amount of seconds, and

39
00:02:45.782 --> 00:02:49.503
then I pass a function, and
it will do something in two seconds.

40
00:02:49.503 --> 00:02:51.984
So after two seconds,
I'm getting an alert, okay?

41
00:02:51.984 --> 00:02:54.144
Which is okay, it works.

42
00:02:54.144 --> 00:02:56.694
And it works with a callback, okay?

43
00:02:56.694 --> 00:03:03.308
Well, the idea is that with promises,
we have a new design pattern.

44
00:03:03.308 --> 00:03:06.691
So in ESX, we have this idea of a promise.

45
00:03:06.691 --> 00:03:07.668
What is the promise?

46
00:03:07.668 --> 00:03:11.801
Well, the idea is similar
when you go to Starbucks.

47
00:03:11.801 --> 00:03:15.435
So when you go to Starbucks,
well, if you use the app,

48
00:03:15.435 --> 00:03:20.258
you're making not part of the process
that I was mentioned to preorder.

49
00:03:20.258 --> 00:03:25.106
But let's say that you go like ten years
ago with your credit card, and you ask for

50
00:03:25.106 --> 00:03:27.727
your Americano, this is Americano.

51
00:03:27.727 --> 00:03:30.717
So you go and you ask for
Americano, you put the credit card.

52
00:03:30.717 --> 00:03:35.467
So the credit card is the input, but
you don't receive the Americano.

53
00:03:35.467 --> 00:03:42.538
So, I mean, I'm paying by cash and
I'm not receiving the Americano.

54
00:03:42.538 --> 00:03:47.300
I'm receiving a promise of an Americano,
that's the idea of a promise.

55
00:03:47.300 --> 00:03:51.185
You are promising that you will
make an Americano for me and

56
00:03:51.185 --> 00:03:56.428
you will give me that Americano later,
that's the concept of a promise.

57
00:03:56.428 --> 00:03:58.088
It's something that you
will give me later.

58
00:03:59.128 --> 00:04:03.953
And with every promise, we know that
not every promise can be fulfilled.

59
00:04:05.103 --> 00:04:10.061
Maybe the machine is broken, or the
machine brokes when they're trying to make

60
00:04:10.061 --> 00:04:13.843
the Americano, and
they cannot fulfill my promise.

61
00:04:13.843 --> 00:04:18.173
So something like that
works with JavaScript.

62
00:04:18.173 --> 00:04:21.697
So, in this case, function doInSeconds,

63
00:04:21.697 --> 00:04:27.236
instead of executing setTimeout,
it's going to return a promise.

64
00:04:27.236 --> 00:04:30.608
And the promise always
works in the same way,

65
00:04:30.608 --> 00:04:35.488
it has a function as an argument,
this is a promise constructor,

66
00:04:35.488 --> 00:04:39.882
as an action where you can resolve or
reject the promise.

67
00:04:39.882 --> 00:04:44.172
So I can fulfill,
I can resolve the promise or not.

68
00:04:44.172 --> 00:04:50.782
So then, I can do something inside
such as setTimeout, or whatever.

69
00:04:50.782 --> 00:04:54.910
And at some point,
I should resolve the promise, okay,

70
00:04:54.910 --> 00:04:57.552
that's the idea of a promise.

71
00:04:57.552 --> 00:05:02.163
Forget about the alert for a second,
let's make a simple example.

72
00:05:02.163 --> 00:05:09.743
So for example, I will say,
giveMeHello, okay?

73
00:05:09.743 --> 00:05:12.527
So doesn't mean anything like this.

74
00:05:12.527 --> 00:05:16.264
So the Promise will just say
something like, okay, hello.

75
00:05:16.264 --> 00:05:23.295
So I will resolve, saying you, hello,
I'm resolving with the Americano.

76
00:05:23.295 --> 00:05:27.231
Okay, so that hello is the Americano,
is what you ask for.

77
00:05:27.231 --> 00:05:32.053
If for some reason I cannot give you that,
I will reject,

78
00:05:32.053 --> 00:05:36.391
and the reject can send an error or
nothing, okay?

79
00:05:36.391 --> 00:05:38.453
Like I can't, wherever.

80
00:05:38.453 --> 00:05:40.587
So you reject or resolve,

81
00:05:40.587 --> 00:05:45.632
when you're calling that promise,
you say, give me hello.

82
00:05:46.912 --> 00:05:51.401
But giveMeHello is not actually, so
if you do console.log(giveMeHello),

83
00:05:51.401 --> 00:05:54.092
it's not what you're expecting.

84
00:05:54.092 --> 00:05:58.943
So, because, by the way, it says,
cannot be invoked without the new,

85
00:05:58.943 --> 00:06:04.454
because this is a constructor, so I need
to create a new promise, which was okay.

86
00:06:04.454 --> 00:06:06.450
But it's returning me the promise.

87
00:06:06.450 --> 00:06:10.371
So it's like when you go to Starbucks and
you pay for your coffee,

88
00:06:10.371 --> 00:06:13.524
you're getting a receipt,
not the coffee, okay?

89
00:06:13.524 --> 00:06:17.617
So the promise, you're getting
the promise, can be a visual promise,

90
00:06:17.617 --> 00:06:21.171
a verbal promise, like with your name,
I will call you later,

91
00:06:21.171 --> 00:06:24.687
or it can be a physical receipt,
well, that's the promise.

92
00:06:24.687 --> 00:06:27.351
It's not yet the data, it's a promise.

93
00:06:27.351 --> 00:06:33.194
So, I can store that in a variable if I
want, but that's a promise, not the data.

94
00:06:33.194 --> 00:06:38.280
I need to wait for the data, and
for that, we use the then function,

95
00:06:38.280 --> 00:06:44.808
and then the then receive sector callback,
and then we get the message actually here.

96
00:06:44.808 --> 00:06:50.549
So we can do a console log of the message,
I can pass console log as an argument

97
00:06:50.549 --> 00:06:55.865
without the arrow function, but
anyway something like that, okay?

98
00:06:55.865 --> 00:06:59.825
Or I can make an alert or whatever,
wherever you wanna do with that message.

99
00:06:59.825 --> 00:07:03.274
So, yeah, in this case,
it's giving me a hello.

100
00:07:03.274 --> 00:07:09.606
But I'm using the promise technique, the
promise design pattern, okay, make sense?

101
00:07:09.606 --> 00:07:14.046
Now, going back to the,
I'm clicking on solution here.

102
00:07:14.046 --> 00:07:18.827
This is the example of doInSeconds,
but we promise,

103
00:07:18.827 --> 00:07:23.212
so I'm calling doInSeconds, 2 seconds.

104
00:07:23.212 --> 00:07:27.352
And when I get in the value and
make it an alert of the value.

105
00:07:27.352 --> 00:07:31.580
And then I also have a catch, the promise
has a catch, where you can catch

106
00:07:31.580 --> 00:07:36.862
the promise, and then this is a recap,
right, really quickly on promises.

107
00:07:36.862 --> 00:07:39.403
You can see we have the same pattern here,

108
00:07:39.403 --> 00:07:43.080
I'm creating a new promise
with resolve and reject.

109
00:07:43.080 --> 00:07:50.170
And then I'm resolving the promise
at some point in the future, okay?

110
00:07:50.170 --> 00:07:53.640
So then, I'm setting the alert and
I'm getting the alert after two seconds.

111
00:07:55.010 --> 00:07:58.710
It gets more complicated because
you can change promises,

112
00:07:58.710 --> 00:08:01.744
one promise after another promise and
so on, but

113
00:08:01.744 --> 00:08:06.560
that's kind of the basic idea of promises
that appear in ES6, just a recap.

