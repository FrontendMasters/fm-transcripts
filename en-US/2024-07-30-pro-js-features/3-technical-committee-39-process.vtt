WEBVTT

1
00:00:00.170 --> 00:00:02.950
&gt;&gt; Maximiliano Firtman: Talking about the
process before actually seeing some code.

2
00:00:04.370 --> 00:00:09.266
The TC, the Technical Committee process
to create a new version of JavaScript or

3
00:00:09.266 --> 00:00:11.380
ECMAScript, works like this.

4
00:00:11.380 --> 00:00:18.340
Anyone, even us, we can go and
propose something new for the language.

5
00:00:18.340 --> 00:00:21.670
Let's say we want something new, okay?

6
00:00:21.670 --> 00:00:23.495
We want the new conditional.

7
00:00:23.495 --> 00:00:26.277
I don't like the if,
I wanna change it, okay?

8
00:00:26.277 --> 00:00:29.284
So you say conditional.

9
00:00:29.284 --> 00:00:35.710
Instead of if, it should say conditional
and then the expression and then whatever.

10
00:00:35.710 --> 00:00:37.947
I don't like curly braces, okay?

11
00:00:37.947 --> 00:00:41.998
I wanna change curly braces with
something else, angle brackets, okay?

12
00:00:41.998 --> 00:00:44.836
You can propose the change.

13
00:00:44.836 --> 00:00:48.368
Okay, but
every proposal goes through a process.

14
00:00:48.368 --> 00:00:54.611
Your proposal, our proposal,
will go to Stage-0, known as Strawperson.

15
00:00:54.611 --> 00:00:59.252
That is, yeah, it's a proposal
that someone has just published.

16
00:00:59.252 --> 00:01:03.690
That doesn't mean that someone
will take it seriously, okay?

17
00:01:03.690 --> 00:01:07.509
But it's there, it's a proposal,
we can go, we fill a form.

18
00:01:07.509 --> 00:01:10.753
Typically we publish
a document on GitHub or

19
00:01:10.753 --> 00:01:13.831
somewhere explaining what we want to do.

20
00:01:13.831 --> 00:01:17.365
What is our proposal,
what's the reason for the proposal, so

21
00:01:17.365 --> 00:01:19.643
why this is important for the language.

22
00:01:19.643 --> 00:01:23.070
And then someone will analyze that.

23
00:01:23.070 --> 00:01:28.071
If it goes to a Stage-1,
it means that someone said,

24
00:01:28.071 --> 00:01:31.987
okay, let's put it into consideration in

25
00:01:31.987 --> 00:01:37.123
the technical committee to
see if it makes sense or not.

26
00:01:37.123 --> 00:01:40.802
Then there is a Stage-2 where it says,

27
00:01:40.802 --> 00:01:44.819
okay, it may work, let's create a draft.

28
00:01:44.819 --> 00:01:50.086
In this case, they create a draft of
the spec, how this is gonna work.

29
00:01:50.086 --> 00:01:56.920
So then for example, browsers can give
feedback such as, no, we cannot do that.

30
00:01:56.920 --> 00:02:03.758
We cannot implement that because of x and
y.

31
00:02:03.758 --> 00:02:07.118
This year, actually 2024,

32
00:02:07.118 --> 00:02:11.798
they created a new stage,
but it seems weird,

33
00:02:11.798 --> 00:02:17.800
at least the number they have used is 2.7,
that's new.

34
00:02:17.800 --> 00:02:23.454
There is a long discussion in
a thread explaining why 7, okay?

35
00:02:23.454 --> 00:02:28.338
But it's because it's
closer to 3 than 0.5, okay?

36
00:02:28.338 --> 00:02:33.016
It says approved,
which means that here is no browser or

37
00:02:33.016 --> 00:02:36.208
no one that says, no, you know what?

38
00:02:36.208 --> 00:02:38.284
We are not going to do that.

39
00:02:38.284 --> 00:02:41.968
Everyone said, okay, we can do this, okay?

40
00:02:41.968 --> 00:02:43.951
In this case it's approved.

41
00:02:43.951 --> 00:02:47.618
And then we have a Stage-3
where it becomes a candidate.

42
00:02:48.748 --> 00:02:52.158
That means that everyone agreed that we
are going to do that at some point in

43
00:02:52.158 --> 00:02:53.628
the future, we can do that.

44
00:02:53.628 --> 00:02:57.418
Every browser said, okay,
we have green light.

45
00:02:57.418 --> 00:03:01.966
So, they create a candidate,
they start making some tests.

46
00:03:01.966 --> 00:03:05.242
So they create a test suite,
so we can run tests and

47
00:03:05.242 --> 00:03:09.541
see if the feature is working
properly on every browser and so on.

48
00:03:09.541 --> 00:03:14.196
And finally,
we have a Stage-4 that is complete and

49
00:03:14.196 --> 00:03:18.548
ready for
the next version of ECMAScript, okay?

50
00:03:18.548 --> 00:03:24.917
And actually,
typically it's around June of every year.

51
00:03:24.917 --> 00:03:30.665
They collect all the Stage-4 proposals and
they say,

52
00:03:30.665 --> 00:03:35.807
okay, this is ES2024, this is ES2025.

53
00:03:35.807 --> 00:03:42.753
So ES2025 is gonna be all the proposals
that are still on Stage-4 at that moment.

54
00:03:42.753 --> 00:03:47.753
If we have one proposal in Stage-3,
it will have to wait for

55
00:03:47.753 --> 00:03:50.604
the next year or maybe more years.

56
00:03:50.604 --> 00:03:51.624
Does that make sense?

57
00:03:51.624 --> 00:03:54.605
So that's how it works.

58
00:03:54.605 --> 00:04:01.199
Something really important here is that
back wire compatibility is always forced.

59
00:04:01.199 --> 00:04:05.649
That's something that is not
happening in other languages, okay?

60
00:04:05.649 --> 00:04:13.989
So in other languages, maybe PHP 8 is
actually making some PHP 7 incompatible.

61
00:04:13.989 --> 00:04:16.926
So you actually need to go and
change your code.

62
00:04:16.926 --> 00:04:21.631
In ECMAScript,
every code that you're running that was

63
00:04:21.631 --> 00:04:25.757
written 20 years ago should still work,
okay?

64
00:04:25.757 --> 00:04:29.909
So that's why sometimes we
are not changing old stuff,

65
00:04:29.909 --> 00:04:32.125
the old stuff is still there.

66
00:04:32.125 --> 00:04:35.542
We have new ways with new keywords, maybe.

67
00:04:35.542 --> 00:04:41.361
For example, the most famous one is
var versus let to create variables.

68
00:04:41.361 --> 00:04:46.346
Let is not replacing var,
it's just another way to create variables.

69
00:04:46.346 --> 00:04:49.427
We'll get into that in
a second with a recap, but

70
00:04:49.427 --> 00:04:52.743
that's a good example of
backward compatibility.

71
00:04:52.743 --> 00:04:57.998
There were a lot of people saying, hey,
why didn't they change how var works?

72
00:04:57.998 --> 00:05:01.523
Why did they create a new
keyword to create variables?

73
00:05:01.523 --> 00:05:04.046
Because var was actually pretty good,
right?

74
00:05:04.046 --> 00:05:06.220
Var, variable, okay, simple.

75
00:05:06.220 --> 00:05:10.683
So, well, they did that because
if there is a new behavior,

76
00:05:10.683 --> 00:05:15.596
they need to use a new keyword for
backward compatibility, okay?

77
00:05:15.596 --> 00:05:17.390
Makes sense?

78
00:05:17.390 --> 00:05:21.751
And that means that most changes
are just sugar syntax from

79
00:05:21.751 --> 00:05:24.610
the previous version, what is that?

80
00:05:24.610 --> 00:05:31.238
A different syntax that can be emulated
somehow into previous versions as well.

