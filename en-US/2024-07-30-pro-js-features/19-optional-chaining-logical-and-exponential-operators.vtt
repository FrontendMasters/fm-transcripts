WEBVTT

1
00:00:00.250 --> 00:00:04.697
&gt;&gt; Maximiliano Firtman: Around the same
idea of working with nulls and

2
00:00:04.697 --> 00:00:08.919
undefines, let's look at this example.

3
00:00:08.919 --> 00:00:11.660
Let's analyze this example.

4
00:00:11.660 --> 00:00:16.095
And maybe in this example, it's actually

5
00:00:16.095 --> 00:00:20.896
pretty simple, but
I can give you one minute so

6
00:00:20.896 --> 00:00:25.578
you can try it on your own and
see if it works.

7
00:00:25.578 --> 00:00:30.148
So there is a new operator known as
the Optional Chaining Operator that

8
00:00:30.148 --> 00:00:32.708
is also available in other languages.

9
00:00:34.508 --> 00:00:37.548
Look at this, we have an array of users.

10
00:00:37.548 --> 00:00:42.402
Each user has a name and
sometimes an address.

11
00:00:42.402 --> 00:00:46.550
And the address sometimes has a city,
but for Singapore, for example,

12
00:00:46.550 --> 00:00:49.207
we don't have a city,
we have just a country.

13
00:00:49.207 --> 00:00:52.312
It's kind of a city country, Singapore,
I'm not sure if you've been there.

14
00:00:52.312 --> 00:00:57.063
But I think there is only another
city that is the island, but

15
00:00:57.063 --> 00:00:59.216
it's kind of a city state.

16
00:00:59.216 --> 00:01:01.546
So then we don't have a city.

17
00:01:01.546 --> 00:01:06.116
So, well, but I wanna render something,
well, like this.

18
00:01:07.206 --> 00:01:08.802
I mean, you say, well,

19
00:01:08.802 --> 00:01:13.506
we can use this nullish coalescing
operator if there is no city, okay?

20
00:01:13.506 --> 00:01:18.212
No city defined,
which is okay, that works.

21
00:01:18.212 --> 00:01:19.462
What is the problem here?

22
00:01:19.462 --> 00:01:23.872
If I run this code,
this is going using a for-of,

23
00:01:23.872 --> 00:01:27.234
it's looping through all the users.

24
00:01:27.234 --> 00:01:31.024
The first one works,
it says New York, okay?

25
00:01:31.024 --> 00:01:35.124
Because it works, but
on the second one, we have an error,

26
00:01:35.124 --> 00:01:37.179
we have a runtime exception.

27
00:01:37.179 --> 00:01:41.129
Cannot read properties of undefined,
reading city.

28
00:01:41.129 --> 00:01:44.904
So the second one has no address.

29
00:01:44.904 --> 00:01:47.184
So it's not working.

30
00:01:47.184 --> 00:01:50.821
So then you need to start saying,
well, if, okay?

31
00:01:50.821 --> 00:01:58.314
Or before that,
if it doesn't contain the address.

32
00:01:58.314 --> 00:02:01.891
Let me remove that for a second.

33
00:02:01.891 --> 00:02:06.782
If I run this, the other one doesn't work
because it contains the address, but

34
00:02:06.782 --> 00:02:08.689
it doesn't contain the city.

35
00:02:08.689 --> 00:02:15.013
So when it tries to convert the city
to uppercase, the city is undefined,

36
00:02:15.013 --> 00:02:20.226
so you cannot execute a method
toUpperCase of an undefined.

37
00:02:20.226 --> 00:02:24.731
So here we have the problem,
address can be null or

38
00:02:24.731 --> 00:02:28.932
undefined, or
city can be null or undefined.

39
00:02:28.932 --> 00:02:35.272
So let me show you the new operator
separately, with nothing here.

40
00:02:35.272 --> 00:02:39.236
So let's go back to this idea
that I may have a name, okay?

41
00:02:39.236 --> 00:02:40.399
Or not.

42
00:02:40.399 --> 00:02:46.070
So I create a variable name and I can
do a console log with the name, okay?

43
00:02:46.070 --> 00:02:47.439
Nothing happens.

44
00:02:47.439 --> 00:02:52.656
But if I try to convert this to uppercase,
for example,

45
00:02:52.656 --> 00:02:59.215
I cannot execute the method of
an undefined, it'll give me an error.

46
00:02:59.215 --> 00:03:03.933
Well, the new Optional Chaining Operator
lets you add a question

47
00:03:03.933 --> 00:03:07.304
mark before the dot, like that.

48
00:03:07.304 --> 00:03:11.810
So I have a question mark before the dot.

49
00:03:11.810 --> 00:03:17.216
It's like saying, if there is a name,
execute the method.

50
00:03:17.216 --> 00:03:21.454
If there's no name,
the whole expression returns undefined.

51
00:03:23.081 --> 00:03:26.256
&gt;&gt; Maximiliano Firtman: So
now I'm saying nothing, but not an error.

52
00:03:28.493 --> 00:03:29.519
&gt;&gt; Maximiliano Firtman: Okay,
not an error.

53
00:03:29.519 --> 00:03:35.078
Maybe I could now mix this
with a nullish operator and

54
00:03:35.078 --> 00:03:42.420
say, well, no name, because they hope,
but I don't get an error.

55
00:03:42.420 --> 00:03:44.709
That's the important part, okay?

56
00:03:44.709 --> 00:03:46.251
That I don't get an error.

57
00:03:46.251 --> 00:03:48.402
So now let's take one minute.

58
00:03:48.402 --> 00:03:51.585
I think one minute should
be enough to see if you

59
00:03:51.585 --> 00:03:54.445
can load Operators Optional Chaining and

60
00:03:54.445 --> 00:03:58.785
make this code work applying
the Optional Chaining Operator.

61
00:04:04.792 --> 00:04:06.023
&gt;&gt; Maximiliano Firtman: So
what's the goal?

62
00:04:06.023 --> 00:04:08.148
I don't wanna see an error, okay?

63
00:04:08.148 --> 00:04:10.900
So then I need to start
playing with this and

64
00:04:10.900 --> 00:04:14.499
adding the optional chaining
operator on some places.

65
00:04:14.499 --> 00:04:15.304
For example,

66
00:04:15.304 --> 00:04:19.603
the first problem that I have is with
Mary that doesn't contain an address.

67
00:04:19.603 --> 00:04:24.067
So then I will say if the address exists,
so

68
00:04:24.067 --> 00:04:27.540
I will add a question mark there.

69
00:04:27.540 --> 00:04:32.968
So if I run this,
now it go through the second example,

70
00:04:32.968 --> 00:04:35.803
but not the third one, why?

71
00:04:35.803 --> 00:04:39.509
Because the third one, Sophie,
has an address with no city.

72
00:04:41.199 --> 00:04:46.743
So I can use the same operator twice
in the same expression, it's okay.

73
00:04:46.743 --> 00:04:53.949
And then if I run this, now, I also don't
have a city for Sophie, which now works.

74
00:04:53.949 --> 00:04:57.702
Maybe you're thinking, well,
should I add this to user as well?

75
00:05:00.581 --> 00:05:02.174
&gt;&gt; Maximiliano Firtman: I mean, you can.

76
00:05:02.174 --> 00:05:05.675
I mean, for this particular
example doesn't make any sense,

77
00:05:05.675 --> 00:05:08.460
unless you have one
particular user that is null.

78
00:05:08.460 --> 00:05:10.738
If that's the case, it's fine.

79
00:05:10.738 --> 00:05:14.318
So you can add that
operator on every call,

80
00:05:14.318 --> 00:05:19.097
every property access,
every method you're calling.

81
00:05:19.097 --> 00:05:22.295
Don't get too comfortable with that.

82
00:05:22.295 --> 00:05:25.477
So don't go, and every time you use a dot,
you add the question mark.

83
00:05:25.477 --> 00:05:28.289
That's not the idea, okay?

84
00:05:28.289 --> 00:05:31.721
Because then you will
have debugging problem,

85
00:05:31.721 --> 00:05:35.683
because sometimes you
shouldn't be receiving that.

86
00:05:35.683 --> 00:05:40.525
And it's okay to maybe trigger
an exception in the system.

87
00:05:40.525 --> 00:05:46.577
You don't wanna continue with undefineds
when it's not really the case.

88
00:05:46.577 --> 00:05:48.988
&gt;&gt; Audience: On line 13,
it'll blow up now, right?

89
00:05:48.988 --> 00:05:52.972
Because it'll try to look up
the .name property on null.

90
00:05:52.972 --> 00:05:55.352
&gt;&gt; Maximiliano Firtman: On line 13,
here, you say the name?

91
00:05:55.352 --> 00:05:55.896
&gt;&gt; Audience: Yeah.

92
00:05:55.896 --> 00:05:59.913
&gt;&gt; Maximiliano Firtman: Yeah, you're
right, if I run this it's not working for

93
00:05:59.913 --> 00:06:03.105
the names, but
then I can use it here as well.

94
00:06:03.105 --> 00:06:08.333
And you can mix this together, and
instead of creating a variable city you

95
00:06:08.333 --> 00:06:13.747
can pull everything like this here,
and mix this with this other argument.

96
00:06:13.747 --> 00:06:18.025
So now, if you have an user,
if the user has an address,

97
00:06:18.025 --> 00:06:22.853
if the address has a city,
you convert that to uppercase.

98
00:06:22.853 --> 00:06:27.647
And if any of those is null or undefined,

99
00:06:27.647 --> 00:06:32.444
then no city defined for that user name.

100
00:06:32.444 --> 00:06:38.218
By the way, here we can continue this and
say, if there is no name,

101
00:06:38.218 --> 00:06:43.704
no user or something like that,
whatever, no user, no name.

102
00:06:43.704 --> 00:06:46.571
So you can mix all these question mark.

103
00:06:46.571 --> 00:06:50.950
But again, try to be smart,
clever about when to use them,

104
00:06:50.950 --> 00:06:56.305
because if you use them everywhere,
it's actually an anti-pattern.

105
00:06:56.305 --> 00:06:59.392
Now it's time to continue with operators.

106
00:06:59.392 --> 00:07:02.087
Now talking about logical assignment.

107
00:07:02.087 --> 00:07:06.380
So this has to do with something that you
probably know when you are working with

108
00:07:06.380 --> 00:07:07.429
other operators.

109
00:07:07.429 --> 00:07:12.793
For example,
when you have something like this,

110
00:07:12.793 --> 00:07:20.211
and then you say a+=1,
you're using this assignment operator.

111
00:07:20.211 --> 00:07:23.250
Well, this is for an arithmetic operation.

112
00:07:23.250 --> 00:07:28.437
We have the same thing since ES2021,
but for logical operators.

113
00:07:28.437 --> 00:07:34.098
So, for example, in this case,
for the and operator,

114
00:07:34.098 --> 00:07:41.085
when you have this situation where
you take the same variable here and

115
00:07:41.085 --> 00:07:47.487
here, we can use this, &amp;=,
something like that, or |=.

116
00:07:50.352 --> 00:07:54.735
&gt;&gt; Maximiliano Firtman: And
also we have this one,

117
00:07:54.735 --> 00:07:58.730
which is interesting.

118
00:07:58.730 --> 00:08:04.079
Semantically, when you look at that,
it's weird to see this.

119
00:08:04.079 --> 00:08:05.053
Why do you want to do that?

120
00:08:05.053 --> 00:08:05.994
But it's okay.

121
00:08:05.994 --> 00:08:09.829
It's like redefining c,

122
00:08:09.829 --> 00:08:14.018
if it's undefined or null.

123
00:08:14.018 --> 00:08:16.986
&gt;&gt; Audience: Yeah, that is the difference
between line 11 and line 8, right?

124
00:08:16.986 --> 00:08:21.319
Is that 8 will pull up empty string, 0-
&gt;&gt; Maximiliano Firtman: Yeah,

125
00:08:21.319 --> 00:08:22.950
exactly, because this one is similar.

126
00:08:22.950 --> 00:08:27.140
In fact,
it was a common pattern to use the or

127
00:08:27.140 --> 00:08:32.367
operator to mimic this
nullish coalescent operator.

128
00:08:32.367 --> 00:08:36.014
But yeah, the difference has to do
with which parts give you false.

129
00:08:37.065 --> 00:08:42.029
That in this case, empty string and other
things will also give you a difference

130
00:08:42.029 --> 00:08:44.635
compared with when you use the other one.

131
00:08:44.635 --> 00:08:47.366
I don't think you would use this a lot.

132
00:08:47.366 --> 00:08:51.705
I mean, it's okay to have them, but
it's not gonna make any big difference.

133
00:08:51.705 --> 00:08:53.135
Something similar comes here.

134
00:08:53.135 --> 00:08:56.254
Instead of using Math.pow for power of,

135
00:08:56.254 --> 00:09:01.700
now you can use this new operator,
**, that will make the same trick.

136
00:09:03.130 --> 00:09:04.224
Straightforward, okay?

137
00:09:04.224 --> 00:09:08.978
But this is one example of something that
is not gonna work on other browsers.

138
00:09:08.978 --> 00:09:14.658
So this is from 2016, so
anyway at this point it's kind of safe.

139
00:09:14.658 --> 00:09:19.043
But IE11 will give you
a syntax error on that line.

140
00:09:19.043 --> 00:09:24.368
So when you are using a transpiler, they
are just going back to the solution where

141
00:09:24.368 --> 00:09:29.790
you're using that operator, the transpiler
will convert that into Math.pow.

142
00:09:29.790 --> 00:09:31.630
That works anyway, okay?

143
00:09:31.630 --> 00:09:32.816
So it's syntax sure.

