WEBVTT

1
00:00:00.200 --> 00:00:03.740
&gt;&gt; Maximiliano Firtman: Object literals
that sometimes we say JSON, okay?

2
00:00:04.880 --> 00:00:09.266
But actually, JSON isn't a spec,
it's hardly defined, and

3
00:00:09.266 --> 00:00:13.860
actually, these changes
are not part of the JSON spec.

4
00:00:13.860 --> 00:00:17.986
So that's why it's object
literals that at one point, and

5
00:00:17.986 --> 00:00:24.552
JavaScript object literal was the same as
JSON, but now we are making a difference.

6
00:00:24.552 --> 00:00:29.704
So for example, I have two variables,
two immutable variables or

7
00:00:29.704 --> 00:00:34.402
two constants, name and age,
and then a function, greet.

8
00:00:36.082 --> 00:00:38.532
And then I'm greeting a person,
and this is an object literal.

9
00:00:39.872 --> 00:00:45.267
So now we have a shorthand property,
so instead of saying name, name, age,

10
00:00:45.267 --> 00:00:50.260
it's equals to age, and greet is
equals to greet, that is the normal.

11
00:00:50.260 --> 00:00:53.516
Because I have the key,
this is key: value,

12
00:00:53.516 --> 00:00:56.784
JSON is key: value, a key, colon, value.

13
00:00:56.784 --> 00:01:02.364
When the key and the value are just
the same, the same name and

14
00:01:02.364 --> 00:01:09.026
age, we have a shorthand now, and
we can just say name, age, okay?

15
00:01:09.026 --> 00:01:13.439
Again, if you do that,
you're getting out of the JSON syntax,

16
00:01:13.439 --> 00:01:16.231
that's not JSON-compatible, okay?

17
00:01:16.231 --> 00:01:18.206
It's an object literal.

18
00:01:18.206 --> 00:01:23.197
So that's the shorthand, okay, both for
properties and methods, that actually,

19
00:01:23.197 --> 00:01:25.777
method is just a property
of type function.

20
00:01:27.567 --> 00:01:32.156
And another new thing that
we have is a way to define

21
00:01:32.156 --> 00:01:35.992
the property name as a compute variable.

22
00:01:35.992 --> 00:01:37.777
What is this?

23
00:01:37.777 --> 00:01:41.215
For example, I can create a constant here.

24
00:01:41.215 --> 00:01:45.567
The name of the property is in a variable.

25
00:01:45.567 --> 00:01:53.792
So I will say the property,
the newProp is gonna be the email.

26
00:01:53.792 --> 00:01:58.758
So then, if I wanna say the name
of the person, the age,

27
00:01:58.758 --> 00:02:04.275
the email, instead of saying emails,
email: to wherever.

28
00:02:05.707 --> 00:02:07.469
&gt;&gt; Maximiliano Firtman: I
will say instead of email,

29
00:02:07.469 --> 00:02:11.234
I wanna take the value of
the newProp variable, okay?

30
00:02:11.234 --> 00:02:17.994
So if I say newProp here, it's not gonna
work because it will be person.newProp.

31
00:02:17.994 --> 00:02:19.684
Make sense?

32
00:02:19.684 --> 00:02:23.811
So if I want actually to take
the value of the newProp,

33
00:02:23.811 --> 00:02:27.647
I need to use brackets, square brackets.

34
00:02:27.647 --> 00:02:31.237
In this case, I'm saying the email,
so the person will have an email now.

35
00:02:32.297 --> 00:02:39.377
So if I do console.log(person.email),
I have a greet, what is greet?

36
00:02:39.377 --> 00:02:41.973
I don't know, remove that.

37
00:02:41.973 --> 00:02:48.119
I have a greet, remove the greet, I don't
need the greet now, when I see the email.

38
00:02:48.119 --> 00:02:52.913
Let's see, I have an error
because I don't have a comma.

39
00:02:52.913 --> 00:02:55.087
Remember that the literal needs a comma,
okay?

40
00:02:55.087 --> 00:02:56.133
So there we are.

41
00:02:56.133 --> 00:02:58.283
So now I'm getting the email, okay?

42
00:02:58.283 --> 00:03:01.665
So again, person.email,
you don't see the email.

43
00:03:01.665 --> 00:03:05.056
When you see the object declaration,
you don't see the email.

44
00:03:05.056 --> 00:03:09.505
The email and the name of
the property was defined in brackets.

45
00:03:11.015 --> 00:03:15.975
So you can kind of dynamically create
an object literal based on this.

46
00:03:17.325 --> 00:03:20.617
&gt;&gt; Audience: Super in the weeds,
but so it's like maps.

47
00:03:20.617 --> 00:03:23.213
You can have the key be an object, right?

48
00:03:24.623 --> 00:03:28.214
Does that function similarly with
dynamically computed property names or

49
00:03:28.214 --> 00:03:28.958
strings only?

50
00:03:28.958 --> 00:03:31.033
&gt;&gt; Maximiliano Firtman: No,
in a JavaScript object,

51
00:03:31.033 --> 00:03:34.359
the key is always a string,
it must be a string.

52
00:03:34.359 --> 00:03:37.168
So that key must be a string.

53
00:03:37.168 --> 00:03:38.823
If not, it's not gonna work.

54
00:03:38.823 --> 00:03:41.720
If you want something different as a key,
you need a map.

55
00:03:41.720 --> 00:03:47.682
We'll get into a map in a couple of
minutes when we get into collections,

56
00:03:47.682 --> 00:03:48.410
okay?

57
00:03:48.410 --> 00:03:54.260
But it's always, in a JavaScript object
literal, the key is always a string.

58
00:03:56.230 --> 00:04:01.513
But it can be a string with
weird characters, okay?

59
00:04:01.513 --> 00:04:02.870
It can be a string.

60
00:04:02.870 --> 00:04:10.020
Also, you can use this syntax, okay,
that the new syntax that we have.

61
00:04:10.020 --> 00:04:12.240
I'm not saying you wanna do this, okay?

62
00:04:12.240 --> 00:04:17.453
But I can open here and
say postal address, with spaces.

63
00:04:20.554 --> 00:04:21.974
&gt;&gt; Maximiliano Firtman: Can I do that?

64
00:04:21.974 --> 00:04:27.234
Yes, with this new syntax,
and then I pass a string.

65
00:04:27.234 --> 00:04:31.121
The key is a string, but
using spaces that, of course,

66
00:04:31.121 --> 00:04:35.186
then you cannot use the .syntax
to access that property.

67
00:04:35.186 --> 00:04:36.115
Make sense?

68
00:04:36.115 --> 00:04:40.881
And you can also even
use something like this.

69
00:04:43.749 --> 00:04:47.284
&gt;&gt; Maximiliano Firtman: You can
have a little cow as the name of

70
00:04:47.284 --> 00:04:51.348
a property in an object literal.

71
00:04:51.348 --> 00:04:55.518
Any Unicode character will work,
any emoji will work.

72
00:04:55.518 --> 00:04:59.308
Again, I'm not saying you are going
to use that, but you can.

73
00:04:59.308 --> 00:05:04.198
But for that, you need to use this special
syntax, this new syntax available in ESX.

