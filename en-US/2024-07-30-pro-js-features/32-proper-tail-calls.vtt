WEBVTT

1
00:00:00.240 --> 00:00:03.807
&gt;&gt; Maximiliano Firtman: So, the last
module is some advanced technique some

2
00:00:03.807 --> 00:00:06.815
things that you may not
use on a daily basis.

3
00:00:06.815 --> 00:00:09.249
But actually with all these topics,

4
00:00:09.249 --> 00:00:14.277
we will cover everything that has
been added to JavaScript since 2015,

5
00:00:14.277 --> 00:00:19.140
which is a lot but also,
there are a lot of people asking for more.

6
00:00:19.140 --> 00:00:24.302
And yeah, those people are probably
getting into TypeScript or other things.

7
00:00:24.302 --> 00:00:28.529
But in this section, we will talk about
some other small changes that might not be

8
00:00:28.529 --> 00:00:31.262
so useful, but they're there anyway.

9
00:00:31.262 --> 00:00:33.692
Dynamic import,
that is actually a big deal.

10
00:00:35.452 --> 00:00:39.762
Proper tail calls, but also take some time
to understand what's going on with that.

11
00:00:39.762 --> 00:00:43.956
Proxies and reflect API,
we'll cover that briefly.

12
00:00:43.956 --> 00:00:47.685
Tagged templates,
I think that's pretty cool.

13
00:00:47.685 --> 00:00:53.423
It's a very underused feature that
we have in ECMAScript these days.

14
00:00:53.423 --> 00:00:57.893
Then, WeekRefs and
FinalizationRegistry that with the name,

15
00:00:57.893 --> 00:01:00.385
we don't really get what's that.

16
00:01:00.385 --> 00:01:03.001
So we'll get into that in a minute.

17
00:01:03.001 --> 00:01:07.250
And finally, some enhancement
to regular expressions, okay?

18
00:01:07.250 --> 00:01:13.641
So that's the deal for this part of
the version, the last part of the version.

19
00:01:13.641 --> 00:01:18.286
So going back here, we are going to
start talking about proper tail calls.

20
00:01:18.286 --> 00:01:21.599
So this is not actually a syntax change.

21
00:01:21.599 --> 00:01:26.021
This is something that appear
in Negmax script six to

22
00:01:26.021 --> 00:01:31.469
improve performance when
you're using the stack frame.

23
00:01:31.469 --> 00:01:33.749
That is when you have recursion.

24
00:01:33.749 --> 00:01:38.855
For example, in this case,
this function is a typical

25
00:01:38.855 --> 00:01:45.190
recursive function to calculate
the factorial of a number, okay?

26
00:01:45.190 --> 00:01:47.346
This is how it looks like,

27
00:01:47.346 --> 00:01:52.251
you're just multiplying a number
by its previous number.

28
00:01:52.251 --> 00:01:57.231
So if you say factorial of 5,
it's gonna be 5

29
00:01:57.231 --> 00:02:02.996
multiply by 4 multiply by
3 multiply by blablabla.

30
00:02:02.996 --> 00:02:04.991
So it's recursion, okay?

31
00:02:04.991 --> 00:02:11.331
So this one doesn't have PTC,
proper tail calls.

32
00:02:12.991 --> 00:02:13.931
What is that?

33
00:02:13.931 --> 00:02:18.633
Well, from ES6,
if your function looks like this,

34
00:02:18.633 --> 00:02:23.646
it's going to use a different the engine,
it's going to

35
00:02:23.646 --> 00:02:30.125
use a different way to execute that code,
and it will be much faster.

36
00:02:30.125 --> 00:02:32.676
I mean, if I execute this,
I'm getting the same result, and

37
00:02:32.676 --> 00:02:35.025
we are not going to even
see the difference.

38
00:02:35.025 --> 00:02:38.313
We need to measure time
to actually do that.

39
00:02:38.313 --> 00:02:42.945
But I'm more interested in showing you
how do you know what's the difference?

40
00:02:42.945 --> 00:02:47.525
Well, in this case the difference
is that we are accumulating

41
00:02:47.525 --> 00:02:50.285
the value in an argument.

42
00:02:50.285 --> 00:02:54.816
So in their recursion,
we are accumulating in the value and

43
00:02:54.816 --> 00:02:57.357
here we are returning the value.

44
00:02:57.357 --> 00:03:00.802
So, in this case,
this is actually doing this.

45
00:03:00.802 --> 00:03:06.184
So if you think about this
when you look at this return,

46
00:03:06.184 --> 00:03:10.699
the recursion is not the first operation.

47
00:03:10.699 --> 00:03:12.739
What's the first operation here?

48
00:03:12.739 --> 00:03:16.319
Multiply by,
multiplication is the first one.

49
00:03:16.319 --> 00:03:18.830
So it needs to take n and then this one.

50
00:03:18.830 --> 00:03:21.712
So let's try to understand this,
how this works.

51
00:03:21.712 --> 00:03:23.624
Let's look at the return.

52
00:03:23.624 --> 00:03:25.004
We call this with 5.

53
00:03:25.004 --> 00:03:34.274
So n is 5, so it's 5 multiply
by 3 out of n minus 1, so 4.

54
00:03:34.274 --> 00:03:37.583
Then we just goes 5 and

55
00:03:37.583 --> 00:03:42.990
now it says 4 multiply by 3, okay?

56
00:03:44.010 --> 00:03:47.752
And you understand how this continues,

57
00:03:47.752 --> 00:03:52.900
3 multiply by 2 and so
on until you get to 1, okay?

58
00:03:52.900 --> 00:03:57.550
So it's fine, it works, but
it's not so performant.

59
00:03:58.800 --> 00:04:03.111
So the idea of a tail call
means that the tail of

60
00:04:03.111 --> 00:04:07.318
the return should be the recursion.

61
00:04:07.318 --> 00:04:13.098
Right now the return tail is
the multiplication operation.

62
00:04:13.098 --> 00:04:16.618
Now, if you look here back,
when we are returning,

63
00:04:16.618 --> 00:04:19.663
we are returning a call
to the same function.

64
00:04:19.663 --> 00:04:22.811
There is no other operation around.

65
00:04:22.811 --> 00:04:28.873
That's a proper tail call
that return that's the tail.

66
00:04:28.873 --> 00:04:33.906
The return has no other operation than
calling the same recursion function.

67
00:04:35.526 --> 00:04:37.863
So this is not an API.

68
00:04:37.863 --> 00:04:41.687
This is not a new syntax in the language.

69
00:04:41.687 --> 00:04:47.079
This is like, if you have a situation
like this, Deangei enters a different

70
00:04:47.079 --> 00:04:52.567
mode known as proper tail calls, and
it's going to be executed much faster.

71
00:04:53.697 --> 00:04:55.567
Just that., okay?

72
00:04:55.567 --> 00:04:56.107
Makes sense?

73
00:04:57.227 --> 00:05:00.425
So it's just another way
to create your recursion.

74
00:05:00.425 --> 00:05:04.855
Anyway, unless you're doing functional
programming in JavaScript that is actually

75
00:05:04.855 --> 00:05:05.591
pretty cool.

76
00:05:05.591 --> 00:05:09.971
And encourage you to check some other
workshops in front of masters that will

77
00:05:09.971 --> 00:05:13.190
get you into functional
programming with JavaScript,

78
00:05:13.190 --> 00:05:16.147
you probably are not going
to use things like this.

