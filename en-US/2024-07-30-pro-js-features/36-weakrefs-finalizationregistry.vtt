WEBVTT

1
00:00:00.360 --> 00:00:02.720
&gt;&gt; Maximiliano Firtman: Remember
that we talked about weak set.

2
00:00:02.720 --> 00:00:06.290
And we talk also about weak maps?

3
00:00:06.290 --> 00:00:11.203
Well, from ES 2021,
we can create weak references of

4
00:00:11.203 --> 00:00:15.817
every object, so
we can create a weak reference and for

5
00:00:15.817 --> 00:00:20.733
that, we use the weakRef
constructor we pass an object and

6
00:00:20.733 --> 00:00:24.845
going back to the idea
that we mentioned before,

7
00:00:24.845 --> 00:00:29.399
if you look at this code,
how many objects do we have?

8
00:00:32.619 --> 00:00:33.909
What do you think?

9
00:00:33.909 --> 00:00:36.919
Only those two lines, one object.

10
00:00:36.919 --> 00:00:39.109
The object is actually this one.

11
00:00:39.109 --> 00:00:42.074
That's the object, how many references?

12
00:00:46.167 --> 00:00:47.487
&gt;&gt; Maximiliano Firtman: Two.

13
00:00:47.487 --> 00:00:53.427
But now we need to split in types
of references, strong references.

14
00:00:53.427 --> 00:00:54.401
I have only one.

15
00:00:56.278 --> 00:00:59.379
&gt;&gt; Maximiliano Firtman: That one,
and weak references.

16
00:00:59.379 --> 00:01:03.091
We have one, weakRef.

17
00:01:03.091 --> 00:01:05.703
So what's the deal here?

18
00:01:05.703 --> 00:01:10.543
If I do something like this.

19
00:01:10.543 --> 00:01:12.483
Now what would happen?

20
00:01:12.483 --> 00:01:17.806
I will not have a strong reference
anymore, which will lead in the future,

21
00:01:17.806 --> 00:01:21.355
in the near future,
we don't know exactly when,

22
00:01:21.355 --> 00:01:25.432
into the removal of the object
by the garbage collector.

23
00:01:26.702 --> 00:01:33.104
So then I will keep a weak
reference that will point to null,

24
00:01:33.104 --> 00:01:38.442
so the weak reference
will not keep that tied.

25
00:01:38.442 --> 00:01:44.059
It says okay, if someone else,
if no one else needs that object, okay.

26
00:01:45.109 --> 00:01:46.763
I'm okay with that, okay?

27
00:01:46.763 --> 00:01:50.019
I'm okay if that object disappears.

28
00:01:50.019 --> 00:01:52.109
That's what you're doing
when you create a WeakRef.

29
00:01:54.279 --> 00:01:56.999
But you're thinking why is this important?

30
00:01:56.999 --> 00:01:59.970
Because as JavaScript developers,

31
00:01:59.970 --> 00:02:04.577
most of the time we have never
thought about memory a lot.

32
00:02:04.577 --> 00:02:09.909
When you're doing other things,
when you're doing machine learning,

33
00:02:09.909 --> 00:02:14.899
AI, now you can run AI in the browser,
you're using a lot of memory.

34
00:02:14.899 --> 00:02:19.071
Or when you're doing WebGL,
you're doing VR,

35
00:02:19.071 --> 00:02:23.853
augmented reality,
you're using a lot of memory and

36
00:02:23.853 --> 00:02:30.687
at that moment if you don't release objects
that no one else is using is a problem.

37
00:02:30.687 --> 00:02:35.269
You're probably thinking well have
in mind they're strong references and

38
00:02:35.269 --> 00:02:40.149
put the all of them in null, but sometimes
you don't control all the references

39
00:02:40.149 --> 00:02:45.181
because you're passing objects by argument
to the library should be your car,

40
00:02:45.181 --> 00:02:48.785
you're passing the object will
from a lot of places, and

41
00:02:48.785 --> 00:02:51.894
you don't know what those
libraries are doing.

42
00:02:53.024 --> 00:02:57.358
Well now the idea is that if
the library doesn't own the object,

43
00:02:57.358 --> 00:02:59.774
they will create a weak reference.

44
00:02:59.774 --> 00:03:04.455
So we can have better control, also,
there are some situations that,

45
00:03:04.455 --> 00:03:07.819
again, I don't wanna spend
too much time on this.

46
00:03:07.819 --> 00:03:12.483
This is memory management,
but when you have object

47
00:03:12.483 --> 00:03:17.469
a pointing to object b and
object b pointing to object a.

48
00:03:19.689 --> 00:03:21.219
So, something like this.

49
00:03:21.219 --> 00:03:25.410
You have a, that has property.

50
00:03:26.760 --> 00:03:32.036
Let's call that property other
than by default it's null and

51
00:03:32.036 --> 00:03:37.740
then we create b that has
another property pointing to a.

52
00:03:37.740 --> 00:03:45.617
And after we create other b,
I will say that a.other = b.

53
00:03:45.617 --> 00:03:46.607
Make sense?

54
00:03:46.607 --> 00:03:51.167
So now we have a pointing to b,
b pointing to a.

55
00:03:51.167 --> 00:03:52.947
Both strong references.

56
00:03:54.597 --> 00:03:58.826
So here comes the part where you can,
if you have a lot of these situations,

57
00:03:58.826 --> 00:04:01.660
you can end up with memory issues,
a memory leak.

58
00:04:02.771 --> 00:04:04.681
Including memory leaks, okay?

59
00:04:04.681 --> 00:04:08.933
Again, I'm not going to get too much
into this, but to solve this problem,

60
00:04:08.933 --> 00:04:12.461
one of those references can
actually be a weak reference.

61
00:04:12.461 --> 00:04:19.601
So you create a weak reference of the
other one, okay, to solve this problem.

62
00:04:19.601 --> 00:04:25.063
Well, after saying this, when you have
weak references let me go back here.

63
00:04:25.063 --> 00:04:30.813
To actually use the object,
you have to deref it, okay?

64
00:04:30.813 --> 00:04:32.903
So to use, for example, the message.

65
00:04:33.983 --> 00:04:37.115
So you see the message on the screen,
Hello,

66
00:04:37.115 --> 00:04:41.080
world, you actually need to
call deref from reference.

67
00:04:44.131 --> 00:04:45.601
It's just how it works, okay?

68
00:04:45.601 --> 00:04:48.593
So because the weak reference is like

69
00:04:48.593 --> 00:04:52.811
an object that has a pointer
to the real object.

70
00:04:52.811 --> 00:04:57.227
Well, deref will try to get into the real
object because we know that the real

71
00:04:57.227 --> 00:05:01.417
object might not exist anymore
because it's a weak reference.

72
00:05:01.417 --> 00:05:02.257
Okay?
Make sense?

73
00:05:02.257 --> 00:05:03.067
Any question?

74
00:05:03.067 --> 00:05:03.597
On weakRef?

75
00:05:05.327 --> 00:05:10.908
Again, if you're just doing a web app with
a form, with the screens going in and

76
00:05:10.908 --> 00:05:15.007
out, you're probably not
going to use weakRefs, okay?

77
00:05:15.007 --> 00:05:17.695
For when you are doing
a lot of memory management,

78
00:05:17.695 --> 00:05:19.807
that's when this becomes important.

79
00:05:20.832 --> 00:05:25.015
Also when you are working with web
assembly and you are calling or

80
00:05:25.015 --> 00:05:29.292
communicating with native code,
this might make a difference.

81
00:05:30.932 --> 00:05:38.882
And this typically comes at the same time
with finalization registry, which is what?

82
00:05:39.882 --> 00:05:43.929
So when you create a new, to be honest,
I don't think I like the name.

83
00:05:43.929 --> 00:05:46.439
They could create another name for
that, but anyway.

84
00:05:47.479 --> 00:05:54.939
It's like an event listener for
the garbage collector.

85
00:05:54.939 --> 00:05:59.461
Remember, the garbage collector is
a process running with the JavaScript

86
00:05:59.461 --> 00:06:01.065
runtime.

87
00:06:01.065 --> 00:06:05.685
That look through the memory for objects
that need to be removed because they don't

88
00:06:05.685 --> 00:06:08.405
have any strong references anymore.

89
00:06:08.405 --> 00:06:09.375
Strong reference zero.

90
00:06:10.775 --> 00:06:15.126
So, in this case,
we can actually say, hey,

91
00:06:15.126 --> 00:06:19.590
I want to create a new
finalization registry and

92
00:06:19.590 --> 00:06:22.503
your register an object to it.

93
00:06:23.933 --> 00:06:26.253
And this is kind a description.

94
00:06:26.253 --> 00:06:31.389
So meaning that you can know or
you can do something when that

95
00:06:31.389 --> 00:06:38.393
object is being cleared by the garbage
collector or is being garbage collected.

96
00:06:40.983 --> 00:06:42.290
Why do you wanna do this?

97
00:06:42.290 --> 00:06:45.080
This also has to do with,
memory management.

98
00:06:45.080 --> 00:06:46.300
There are some languages.

99
00:06:46.300 --> 00:06:52.910
The one that I remember immediately
are C plus plus Swift and Objective C.

100
00:06:52.910 --> 00:06:55.670
I remember working with all of those.

101
00:06:55.670 --> 00:07:00.000
They typically have a via
lock method in classes.

102
00:07:00.000 --> 00:07:03.035
It's kind of similar to that,
but in JavaScript.

103
00:07:03.035 --> 00:07:07.431
The ability to do something when
an object is going to be released from

104
00:07:07.431 --> 00:07:08.015
memory.

105
00:07:09.015 --> 00:07:11.235
For that, you use finalization registry.

106
00:07:11.235 --> 00:07:12.725
What?

107
00:07:12.725 --> 00:07:17.615
It can be via locking other
objects that you are connected to.

108
00:07:17.615 --> 00:07:23.578
Sending message to a server, hey,
we are getting released from memory,

109
00:07:23.578 --> 00:07:27.533
logging, what's going on,
things like that.

110
00:07:29.213 --> 00:07:35.538
And after that object was released,
at some point in the future,

111
00:07:35.538 --> 00:07:41.366
you should see null when you
deref that weak reference.

112
00:07:41.366 --> 00:07:46.446
It's difficult to see it in action because
we don't manage the garbage collector.

113
00:07:46.446 --> 00:07:51.601
So I don't know when the garbage
collector is going through and

114
00:07:51.601 --> 00:07:53.749
deleting those objects.

115
00:07:53.749 --> 00:07:56.176
In Java, you can call.

116
00:07:56.176 --> 00:07:59.456
I think as far
as I remember is system.gc.

117
00:07:59.456 --> 00:08:06.981
It calls the garbage collector to say,
hey, go now clean the garbage now, okay?

118
00:08:06.981 --> 00:08:10.571
But in JavaScript, we don't have
at least not in a standard way.

119
00:08:10.571 --> 00:08:18.341
So it may happen in the future because
now the object has no strong references.

120
00:08:18.341 --> 00:08:20.381
The only reference is weak.

121
00:08:21.731 --> 00:08:26.515
And because it's weak,
it's not actually holding that object.

122
00:08:26.515 --> 00:08:27.235
Okay, make sense?

123
00:08:28.765 --> 00:08:32.985
Again, it's for
an advanced usage of memory.

