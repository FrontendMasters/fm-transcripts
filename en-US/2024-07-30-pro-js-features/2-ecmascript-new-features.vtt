WEBVTT

1
00:00:00.130 --> 00:00:02.999
&gt;&gt; Maximiliano Firtman: Actually
ECMAScript is officially,

2
00:00:02.999 --> 00:00:07.660
or legally the ECMA-262 that's
kind of the loan number,

3
00:00:07.660 --> 00:00:11.080
okay, within the Ecma organization.

4
00:00:11.080 --> 00:00:15.400
So and it's creating new
versions now once per year.

5
00:00:15.400 --> 00:00:19.825
So ECMA-262 is actually ECMAScript,
not matter the version.

6
00:00:19.825 --> 00:00:22.395
And then we have it in different versions.

7
00:00:22.395 --> 00:00:26.115
For example, right now, as of today,
these are the versions.

8
00:00:26.115 --> 00:00:29.875
We have from version,
we have even older versions.

9
00:00:29.875 --> 00:00:34.066
But let's say that the latest
one that appears in the website,

10
00:00:34.066 --> 00:00:35.895
it's the 13th edition.

11
00:00:35.895 --> 00:00:38.085
Actually, we have also 14th.

12
00:00:38.085 --> 00:00:41.105
But for some reason,
it's not on that list.

13
00:00:42.545 --> 00:00:47.475
So every time you see ECMA-262
is actually JavaScript, okay?

14
00:00:47.475 --> 00:00:52.057
ES, ECMAScript, JavaScript,
we're just talking about the same thing.

15
00:00:52.057 --> 00:00:56.824
And the technical committee,
this is actually also a consecutive

16
00:00:56.824 --> 00:01:00.410
number within the Ecma foundation,
it's 39.

17
00:01:00.410 --> 00:01:06.490
So that means that when you see TC39,
it's the technical committee.

18
00:01:06.490 --> 00:01:13.303
It's just a bunch of people from
companies that have an online group,

19
00:01:13.303 --> 00:01:18.280
they have meetings, and
they propose new things.

20
00:01:18.280 --> 00:01:23.248
They vote and those are the ones that
are defining the new things that will

21
00:01:23.248 --> 00:01:26.142
appear in the language, okay?

22
00:01:26.142 --> 00:01:29.752
So, then ECMAScript, it's a standard for
a scripting language.

23
00:01:29.752 --> 00:01:35.006
The technical committee is TC-39,
and it's basically

24
00:01:35.006 --> 00:01:40.781
the JavaScript used by browsers or
Node or ECMAScript engine.

25
00:01:40.781 --> 00:01:42.971
So it's just the same, okay?

26
00:01:42.971 --> 00:01:46.901
But there are other engines as well
that are using ECMAScript that are not

27
00:01:46.901 --> 00:01:48.301
JavaScript.

28
00:01:48.301 --> 00:01:49.861
For example, ActionScript.

29
00:01:49.861 --> 00:01:54.121
It's kind of dead these days,
but ActionScript was the language

30
00:01:54.121 --> 00:01:58.511
behind Flash, and
also it's still there for Apache Flex.

31
00:01:58.511 --> 00:02:02.274
That was originally Adobe Flex and
then Apache,

32
00:02:02.274 --> 00:02:08.625
now it's open source to create rich apps
client side but with with a flash player.

33
00:02:08.625 --> 00:02:10.219
And it was using ActionScript.

34
00:02:10.219 --> 00:02:15.141
And ,NET has today JScript.NET that it's

35
00:02:15.141 --> 00:02:20.203
a .NET language, but based on ECMAScript.

36
00:02:20.203 --> 00:02:25.552
And as we mentioned before,
since ES6 or ES2015, we will get into

37
00:02:25.552 --> 00:02:31.361
that difference in a second, we have
one version published per year, okay?

38
00:02:31.361 --> 00:02:36.231
As developers, we cannot specify
which version we want to use.

39
00:02:36.231 --> 00:02:39.913
It's up to the engine where
the script is going to be executed.

40
00:02:41.134 --> 00:02:45.724
The engine can be the user's browser,
or it can be the node engine.

41
00:02:45.724 --> 00:02:47.715
Maybe if you're using Node,

42
00:02:47.715 --> 00:02:53.213
you have more control because the version
of Node that you have, or you are using,

43
00:02:53.213 --> 00:02:59.124
will actually define the version of
ECMAScript that will actually be executed.

44
00:02:59.124 --> 00:03:02.290
But on the browser, of course, you don't
have control because it's up to the user.

45
00:03:04.550 --> 00:03:09.203
So what happens if you use syntax of
an ECMAScript version that is not

46
00:03:09.203 --> 00:03:12.600
supported on the engine running the code?

47
00:03:12.600 --> 00:03:16.021
I mean you are using something new and
fancy but

48
00:03:16.021 --> 00:03:21.468
then your user is on an old Firefox and
it's not supporting that feature.

49
00:03:21.468 --> 00:03:23.721
So there are two possibilities.

50
00:03:23.721 --> 00:03:29.246
It depends on the nature of the new
feature that you're using because

51
00:03:29.246 --> 00:03:34.391
sometimes the new feature is a new
method available on objects or

52
00:03:34.391 --> 00:03:36.941
available on arrays.

53
00:03:36.941 --> 00:03:40.141
In those cases,
you will get a runtime exception because,

54
00:03:40.141 --> 00:03:44.075
of course, that method is not
available in that browser.

55
00:03:44.075 --> 00:03:47.745
But sometimes it's a new operator.

56
00:03:47.745 --> 00:03:49.945
It's something new in the syntax itself.

57
00:03:51.235 --> 00:03:57.225
Like, for example, we have a new operator
that will let you make the power of.

58
00:03:57.225 --> 00:03:59.854
So two to the power of three.

59
00:03:59.854 --> 00:04:01.188
We will see that later.

60
00:04:01.188 --> 00:04:03.598
Well, it's a new operator,
it's double asterisk.

61
00:04:04.598 --> 00:04:09.698
So if you run that on an older engine,
you will get a syntax error.

62
00:04:10.818 --> 00:04:16.008
And let's say that syntax errors
are worse than runtime exceptions.

63
00:04:16.008 --> 00:04:21.359
Because when the browser, when the engine
actually, finds a syntax error,

64
00:04:21.359 --> 00:04:26.300
it stops rendering the rest
of the JavaScript code, okay?

65
00:04:26.300 --> 00:04:32.129
So to know the ECMAScript version
that your engine is using,

66
00:04:32.129 --> 00:04:34.830
you can use these tools.

67
00:04:34.830 --> 00:04:39.100
For node, there is a website, node.green.

68
00:04:39.100 --> 00:04:43.625
And for browsers, caniuse that's
a website that we typically use for

69
00:04:43.625 --> 00:04:47.126
browser APIs,
has also a section of ECMAScript.

70
00:04:47.126 --> 00:04:49.074
Okay, so let's see this in action.

71
00:04:49.074 --> 00:04:52.136
This is node green.

72
00:04:52.136 --> 00:04:56.136
Actually, the website is
confusing at first, okay?

73
00:04:56.136 --> 00:04:59.692
So because we have a lot
of information here, but

74
00:04:59.692 --> 00:05:03.788
you will see here different columns for
node versions.

75
00:05:03.788 --> 00:05:05.040
So these are the node versions.

76
00:05:05.040 --> 00:05:11.740
So if you are in node 2014, you can
see here all the compatibility table.

77
00:05:11.740 --> 00:05:17.546
And then you have all the features
available in ECMAScript.

78
00:05:17.546 --> 00:05:21.893
So you can see that modern Node.js is
currently running most of the stuff,

79
00:05:21.893 --> 00:05:24.613
everything seems green, right?

80
00:05:24.613 --> 00:05:25.891
So if we scroll down,

81
00:05:25.891 --> 00:05:30.633
we will start seeing some red at some
points because these are new things.

82
00:05:30.633 --> 00:05:36.919
For example, ES2024, okay,
so things that are not yet

83
00:05:36.919 --> 00:05:42.726
at the time of doing this
workshop is not yet published.

84
00:05:42.726 --> 00:05:45.540
So ES2024 is not yet published.

85
00:05:45.540 --> 00:05:49.383
So yeah,
here you can see that from Node 20,

86
00:05:49.383 --> 00:05:53.919
most of the ES2024 features
are implemented, but

87
00:05:53.919 --> 00:05:58.178
not Unicode 15.1, for example, okay?

88
00:05:58.178 --> 00:06:01.260
So in case you have a question
about your Node version,

89
00:06:01.260 --> 00:06:03.607
you can go to this website and check that.

90
00:06:04.827 --> 00:06:11.366
Now for the browser, you go to,
can I use /ecmascript and

91
00:06:11.366 --> 00:06:17.787
you will find a lot of subgroups
here from ECMAScript 5.

92
00:06:19.257 --> 00:06:26.561
And then we have version by version, for
example, ECMAScript 2017, 2018, 2020.

93
00:06:26.561 --> 00:06:31.775
And here you can go to
the feature support list where

94
00:06:31.775 --> 00:06:37.354
you will see feature by
feature on ECMAScript 2020

95
00:06:37.354 --> 00:06:42.340
which versions
are implementing that feature.

96
00:06:42.340 --> 00:06:46.966
Because sometimes a browser
might partially implement

97
00:06:46.966 --> 00:06:50.118
a version of ECMAScript.

98
00:06:50.118 --> 00:06:55.128
Okay, it's not so common, but
it happens a lot of times.

99
00:06:55.128 --> 00:06:55.878
Okay, makes sense?

100
00:06:55.878 --> 00:06:59.956
So you go here and say, okay, from 2020,

101
00:06:59.956 --> 00:07:05.083
we can see that right now 96%
of the current market share

102
00:07:05.083 --> 00:07:10.078
of people browsing the web
can support that version.

103
00:07:10.078 --> 00:07:13.898
There are still IE users that,
of course, is red.

104
00:07:13.898 --> 00:07:15.858
So there are still people on IE.

105
00:07:15.858 --> 00:07:18.838
Opera Mini, this is a mobile browser.

106
00:07:20.098 --> 00:07:25.586
But most of the things are already
compatible with 96, 97%, okay?

107
00:07:25.586 --> 00:07:31.182
And also you can customize here and say,
I want only mobile, only desktop or

108
00:07:31.182 --> 00:07:36.091
you can see the information only for
one region or country as well.

