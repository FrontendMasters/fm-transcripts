WEBVTT

1
00:00:00.400 --> 00:00:02.039
&gt;&gt; Maximiliano Firtman: Error calls.

2
00:00:02.039 --> 00:00:08.312
I'm pretty sure that this came from
someone that was a Java developer.

3
00:00:08.312 --> 00:00:10.310
So what is that?

4
00:00:10.310 --> 00:00:15.236
So when you are using exceptions,
you can throw exceptions in JavaScript

5
00:00:15.236 --> 00:00:19.939
that has been for a while before ES6 and
you can try catch them, okay?

6
00:00:19.939 --> 00:00:22.826
You probably all know
how to use try catch.

7
00:00:22.826 --> 00:00:28.641
But now, every error,
when you construct a new error,

8
00:00:28.641 --> 00:00:33.982
that's the default constructor for
exceptions.

9
00:00:33.982 --> 00:00:37.935
An error can include a cause,

10
00:00:37.935 --> 00:00:41.737
the cause is another error.

11
00:00:41.737 --> 00:00:47.404
So you can cascade errors or
exceptions as in Java.

12
00:00:47.404 --> 00:00:51.060
There's a pretty common exception
design pattern in Java,

13
00:00:51.060 --> 00:00:55.434
where you get an exception caused by
another exception caused by another

14
00:00:55.434 --> 00:00:58.250
exception caused by another exception so
on.

15
00:00:58.250 --> 00:01:04.482
So, by the way, the APIs in the browser
today and the rest of the JavaScript API

16
00:01:04.482 --> 00:01:09.497
are not actually making use of that,
this is from ES2022.

17
00:01:09.497 --> 00:01:13.427
So this is for us, for our exceptions.

18
00:01:13.427 --> 00:01:18.832
If we want to include more metadata
when you are throwing an exception,

19
00:01:18.832 --> 00:01:22.361
including another exception behind scenes.

20
00:01:22.361 --> 00:01:29.283
I don't know, for example, you can
have a class with a product, whatever.

21
00:01:29.283 --> 00:01:33.206
And then you have, for example,

22
00:01:33.206 --> 00:01:39.382
a constructor that receives the name and
the price.

23
00:01:39.382 --> 00:01:44.105
And then you say, okay, this name equals
name and we can set the name here as well.

24
00:01:44.105 --> 00:01:49.189
Now we can do that, remember this is for
ES6, we can do that.

25
00:01:51.409 --> 00:01:57.769
And let's say that for the price,
I'm going to do something like this.

26
00:01:58.819 --> 00:02:07.116
I'm going to say that for some reason
I'm going to add 30% of the price, okay?

27
00:02:07.116 --> 00:02:12.046
Well, the problem is that what happens
if someone is creating a product,

28
00:02:12.046 --> 00:02:14.278
I'm creating a P, new product.

29
00:02:14.278 --> 00:02:17.918
I'm adding a MacBook Air, and

30
00:02:17.918 --> 00:02:22.682
I will say, as a price, too expensive.

31
00:02:25.387 --> 00:02:30.224
&gt;&gt; Maximiliano Firtman: Well,
I'm not sure what would happen if

32
00:02:30.224 --> 00:02:34.647
I multiply by 130 too expensive.

33
00:02:34.647 --> 00:02:39.774
Yeah, it doesn't make any sense, or if I
divide, or if I do something like that.

34
00:02:39.774 --> 00:02:43.682
So I'm not saying that this
case will trigger this.

35
00:02:43.682 --> 00:02:49.872
But then, you can say, well, let's try
to do this and then catch the exception.

36
00:02:49.872 --> 00:02:53.818
And then here,
I will throw a new exception from

37
00:02:53.818 --> 00:02:58.455
the constructor saying something like,
we can't, or

38
00:02:58.455 --> 00:03:03.848
our product,
&gt;&gt; Maximiliano Firtman: Can't be created.

39
00:03:03.848 --> 00:03:07.644
And then you pass as
an argument the cause.

40
00:03:07.644 --> 00:03:12.718
And the cause is the other
exception that you receive here.

41
00:03:12.718 --> 00:03:13.472
Makes sense?

42
00:03:13.472 --> 00:03:22.304
So then you're chaining the exceptions,
that's the idea.

43
00:03:22.304 --> 00:03:27.726
Because before that,
maybe let's say if you don't, you can say,

44
00:03:27.726 --> 00:03:33.716
use the name, let's say,
&gt;&gt; Maximiliano Firtman: In

45
00:03:33.716 --> 00:03:40.405
case it's new or something like that,
is a 2, something like that.

46
00:03:40.405 --> 00:03:42.500
I'm also going to throw an exception.

47
00:03:44.350 --> 00:03:46.510
But in this case the cost is different.

48
00:03:48.670 --> 00:03:55.719
So I can create a new error here,
&gt;&gt; Maximiliano Firtman: And

49
00:03:55.719 --> 00:03:59.008
pass, and by the way,
I'm creating a new exception as a Java.

50
00:03:59.008 --> 00:04:02.142
That's wrong, should be a new error.

51
00:04:02.142 --> 00:04:05.966
You shouldn't mention JavaScript
course because that things happen.

52
00:04:05.966 --> 00:04:10.570
You create an error and
here you pass another

53
00:04:10.570 --> 00:04:14.557
error such as text or Name is invalid.

54
00:04:14.557 --> 00:04:19.588
So then, whoever is calling you
can listen for your exception.

55
00:04:19.588 --> 00:04:25.095
And if the consumer wants,
can check the cost.

56
00:04:25.095 --> 00:04:27.169
And we have the same exception,
the same error,

57
00:04:27.169 --> 00:04:28.896
happening with two different courses.

58
00:04:30.496 --> 00:04:33.084
Okay, so that's new.

59
00:04:33.084 --> 00:04:37.579
It could be emulated before, actually,
because you can extend from error,

60
00:04:37.579 --> 00:04:39.386
create your own error object.

61
00:04:39.386 --> 00:04:43.747
Okay, but now it's part of
the error object in the system.

62
00:04:45.057 --> 00:04:49.879
Another one that is
actually pretty simple and

63
00:04:49.879 --> 00:04:54.708
very small if this one,
is Hashbang Grammar.

64
00:04:54.708 --> 00:04:56.497
Have you ever heard about that?

65
00:04:56.497 --> 00:04:57.627
Hashbang Grammar?

66
00:04:57.627 --> 00:04:59.887
What is that?

67
00:04:59.887 --> 00:05:04.344
&gt;&gt; Student: It's the praqma for
the specific engine to interpret it.

68
00:05:04.344 --> 00:05:09.059
&gt;&gt; Maximiliano Firtman: So it's something
it's called the shebang, is this syntax.

69
00:05:09.059 --> 00:05:14.676
That allows script to be executed or
interpreted without

70
00:05:14.676 --> 00:05:20.066
you specifying that typically
on Unix based systems.

71
00:05:20.066 --> 00:05:24.358
Not a Windows, for example,
it depends on the terminal you're using.

72
00:05:24.358 --> 00:05:30.405
So this is useful on ECMAScript only for
now JS scripts, okay?

73
00:05:30.405 --> 00:05:31.135
Not for the browser.

74
00:05:31.135 --> 00:05:33.841
So if I run this, it's unexpected token.

75
00:05:33.841 --> 00:05:37.201
So in the browser,
no browser is implementing this part,

76
00:05:37.201 --> 00:05:38.785
because it makes no sense.

77
00:05:38.785 --> 00:05:41.267
But what's the idea?

78
00:05:41.267 --> 00:05:43.582
If you add this at the first line,

79
00:05:43.582 --> 00:05:47.655
you're saying I wanna run
this script using node, okay?

80
00:05:47.655 --> 00:05:51.444
So then you can go to the terminal and
just run your script.

81
00:05:51.444 --> 00:05:56.258
So if this is a script.js,
you go to a terminal and

82
00:05:56.258 --> 00:06:00.854
you just type script.js,
and you execute it.

83
00:06:00.854 --> 00:06:06.033
And in this case,
the terminal would check for that line and

84
00:06:06.033 --> 00:06:11.015
say, I need to use node, so
it will run node over it.

85
00:06:11.015 --> 00:06:15.061
Again, It's really simple,
now it's part of the language.

