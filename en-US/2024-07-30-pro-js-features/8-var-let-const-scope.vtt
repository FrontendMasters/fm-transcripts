WEBVTT

1
00:00:00.170 --> 00:00:05.164
&gt;&gt; Maximiliano Firtman: To finish
the ESX recap, we will go to that

2
00:00:05.164 --> 00:00:11.325
URL Firtman my last name,
.github.io/projs.

3
00:00:11.325 --> 00:00:16.059
And there we will be
playing with different

4
00:00:16.059 --> 00:00:22.321
ECMAScript features directly
in an online editor.

5
00:00:22.321 --> 00:00:25.298
For modules, we have separate files, and

6
00:00:25.298 --> 00:00:29.444
it was better to use BS code and
a folder, opening that URL.

7
00:00:30.871 --> 00:00:35.413
This is how it looks like,
can go full screen as well.

8
00:00:35.413 --> 00:00:39.079
So we have a selector here at the top,
let me clear this so

9
00:00:39.079 --> 00:00:41.582
it's empty as your example.

10
00:00:41.582 --> 00:00:46.272
So it's just a vanilla
JavaScript code editor, okay?

11
00:00:46.272 --> 00:00:54.052
So I can write some code here,
like console.log("hello"), run.

12
00:00:54.052 --> 00:01:00.684
You can run also with Cmd+Return on the
Mac, Ctrl+Enter on Windows or click Run.

13
00:01:00.684 --> 00:01:06.067
And the console log will show there,
just we can quickly analyze

14
00:01:06.067 --> 00:01:12.107
some chart scrape and the differences and
so on, so that's the goal.

15
00:01:12.107 --> 00:01:16.107
And then we have here
selected to load a codelab.

16
00:01:16.107 --> 00:01:21.684
So we have several chapters here,
and we will go through most of these

17
00:01:21.684 --> 00:01:27.737
options we have here, some of them
are small things and really simple.

18
00:01:27.737 --> 00:01:31.921
Some others may need some work,
and they have a challenge and

19
00:01:31.921 --> 00:01:37.177
then that's why there is a solution
that will give you a solution and so on.

20
00:01:37.177 --> 00:01:40.397
So for example,
if we go to a scope variables,

21
00:01:40.397 --> 00:01:45.187
if you run this nothing important
really happens yet, I will just use

22
00:01:45.187 --> 00:01:50.989
this to just do a very quick recap
on variable declaration and scoping.

23
00:01:50.989 --> 00:01:56.109
And by the way here also you have
a link to download the slides, okay?

24
00:01:56.109 --> 00:01:58.989
For this workshop, so there.

25
00:01:58.989 --> 00:02:01.493
So in case you wanna download
a copy of the slides, it's there.

26
00:02:02.583 --> 00:02:09.003
So by the way, the whole editor
is using open source editor.

27
00:02:09.003 --> 00:02:13.581
So something simple, vanilla JavaScript,
nothing really fancy here is going on.

28
00:02:13.581 --> 00:02:18.534
So every variable that you define
in a context outside of modules,

29
00:02:18.534 --> 00:02:22.170
at least it's global,
probably you know that.

30
00:02:22.170 --> 00:02:25.365
So if you use the bar keyword,
it's global.

31
00:02:25.365 --> 00:02:30.295
And if you use the bar keyword inside
the function, it's function scope.

32
00:02:30.295 --> 00:02:35.397
So for example, this was something
that was making crazy a lot of

33
00:02:35.397 --> 00:02:40.420
developers coming from Java,
C, C-sharp into JavaScript.

34
00:02:40.420 --> 00:02:43.810
Script that you declare
a variable within an if.

35
00:02:43.810 --> 00:02:47.250
So it's inside this code
block that declaration, but

36
00:02:47.250 --> 00:02:52.004
that variable is actually function scoped,
not block scoped.

37
00:02:52.004 --> 00:02:54.324
So actually, it's available here.

38
00:02:54.324 --> 00:02:59.702
That's why when you run this, it says,
Check me and people coming from Java,

39
00:02:59.702 --> 00:03:04.389
C-sharp, C,
they were used to block scoped variables.

40
00:03:04.389 --> 00:03:08.073
So every time you have a block
like a code block calibrates, and

41
00:03:08.073 --> 00:03:12.979
you create the variable there,
it should work only within that block.

42
00:03:12.979 --> 00:03:16.689
Well, that's not what happens by default
with JavaScript and the bar keyword.

43
00:03:17.749 --> 00:03:22.809
But when you change that to the led
keyword, the led keyword is

44
00:03:22.809 --> 00:03:28.206
block-based, and
this is more similar to other languages.

45
00:03:28.206 --> 00:03:32.390
And again, why did you just
change the behavior of bar,

46
00:03:32.390 --> 00:03:34.891
back bar compatibility, okay?

47
00:03:34.891 --> 00:03:40.003
So now when you run this,
it says function scoped is not defined.

48
00:03:40.003 --> 00:03:44.899
Because, yeah, it's defined within
this code block only, okay?

49
00:03:44.899 --> 00:03:47.533
It's something simple and const,

50
00:03:47.533 --> 00:03:53.607
it's actually similar with the difference
that makes that variable immutable.

51
00:03:54.907 --> 00:03:58.561
We can discuss the whole day
if const creates constants or

52
00:03:58.561 --> 00:04:02.687
immutable variables,
we are not going to discuss that anyway.

53
00:04:02.687 --> 00:04:08.555
But yeah, it says const, but it's actually
a variable because it's using space in

54
00:04:08.555 --> 00:04:14.442
memory compared with how constants work
in other languages, but it's immutable.

55
00:04:14.442 --> 00:04:17.506
But we know for
sure that it's immutable, okay?

56
00:04:17.506 --> 00:04:21.978
So it's not gonna change once I set it.

