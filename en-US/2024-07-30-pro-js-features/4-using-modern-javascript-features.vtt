WEBVTT

1
00:00:00.130 --> 00:00:01.506
&gt;&gt; Maximiliano Firtman: From ES1 to ES5,

2
00:00:01.506 --> 00:00:05.880
we were using numbers to
version the language.

3
00:00:05.880 --> 00:00:09.710
The next one was ES6.

4
00:00:09.710 --> 00:00:12.011
We also used six as a number, but

5
00:00:12.011 --> 00:00:17.319
it was the first year of this new pattern
of creating one version per year.

6
00:00:17.319 --> 00:00:24.120
So that's why it's also known as ES2015,
the year that it was released, okay?

7
00:00:24.120 --> 00:00:29.466
From there,
now we have an annual version, and

8
00:00:29.466 --> 00:00:35.362
now we can use the number or
the version, both.

9
00:00:35.362 --> 00:00:38.922
But most of the time,
we use the year number.

10
00:00:38.922 --> 00:00:42.115
So we don't talk about ES14,

11
00:00:42.115 --> 00:00:46.979
we talk about ES2024 or ES2023, okay?

12
00:00:46.979 --> 00:00:51.599
But ES14 actually exists
as well as a version

13
00:00:51.599 --> 00:00:56.464
number to make things more complicated,
okay?

14
00:00:56.464 --> 00:00:58.539
So this is important.

15
00:00:58.539 --> 00:01:00.863
When we are talking about
ECMAScript versions,

16
00:01:00.863 --> 00:01:03.844
we're not talking about platform APIs.

17
00:01:03.844 --> 00:01:07.869
So platform APIs are, for
example, IndexedDB for

18
00:01:07.869 --> 00:01:13.018
database access, or the Fetch API,
or how to access Bluetooth,

19
00:01:13.018 --> 00:01:17.844
or local storage, or
Node.js file system API.

20
00:01:17.844 --> 00:01:19.568
We're not talking about that.

21
00:01:19.568 --> 00:01:23.632
This is just the language,
the core language, and

22
00:01:23.632 --> 00:01:27.708
not actually APIs that you
can use on one platform.

23
00:01:27.708 --> 00:01:33.108
Those APIs are defined by other
committees and other organizations.

24
00:01:33.108 --> 00:01:35.425
The most common one is the W3C.

25
00:01:35.425 --> 00:01:40.015
In the OpenJS Foundation,
you can find a lot of Node APIs.

26
00:01:40.015 --> 00:01:44.637
And also, there are other organizations,
for example,

27
00:01:44.637 --> 00:01:47.476
for WebAssembly, WebGL, WebXR.

28
00:01:47.476 --> 00:01:52.386
They have their own committees, their own
foundations, creating the standards for

29
00:01:52.386 --> 00:01:53.556
those APIs, okay?

30
00:01:53.556 --> 00:01:57.611
So today we will talk just about
ECMAScript, the core language,

31
00:01:57.611 --> 00:01:58.502
not the APIs.

32
00:01:58.502 --> 00:02:04.341
There are other courses at
Frontend Masters where you can find a lot

33
00:02:04.341 --> 00:02:10.402
of information about the platform
libraries on Node or the browser.

34
00:02:10.402 --> 00:02:13.770
There is only one exception to that,

35
00:02:13.770 --> 00:02:18.342
is that we do have
the internationalization API.

36
00:02:19.458 --> 00:02:23.566
That's the one that will let you
not translate your code, but

37
00:02:23.566 --> 00:02:26.894
actually understand
the language differences.

38
00:02:26.894 --> 00:02:29.134
For example, for numbers,

39
00:02:29.134 --> 00:02:34.088
what's the thousandth separator and
the decimal separator?

40
00:02:34.088 --> 00:02:34.761
Is it a comma?

41
00:02:34.761 --> 00:02:35.994
Is it a dot?

42
00:02:35.994 --> 00:02:41.469
Or how the date format that we should
use for different countries, like,

43
00:02:41.469 --> 00:02:47.078
it is month, year, or month, day,
or day, month, things like that.

44
00:02:47.078 --> 00:02:52.308
But that's also an ECMA standard
that goes on Node.js and

45
00:02:52.308 --> 00:02:55.948
the browser, and it's ECMA-402.

46
00:02:55.948 --> 00:03:00.043
But it's a different,
it's a separate committee,

47
00:03:00.043 --> 00:03:05.417
it's a separate process that is
right now creating versions as well.

48
00:03:05.417 --> 00:03:10.065
But all the rest of the APIs that we
have in the browser in Node.js are not

49
00:03:10.065 --> 00:03:13.543
ECMA-based, they're based
on other standards.

50
00:03:13.543 --> 00:03:19.671
And sometimes there is a name in
the community known as ES.Next.

51
00:03:19.671 --> 00:03:22.291
I'm not sure if you're aware of that,
ES.Next.

52
00:03:22.291 --> 00:03:23.965
So it's a non-official name,

53
00:03:23.965 --> 00:03:28.861
actually, to talk about features that
will be in next version of ECMAScript.

54
00:03:28.861 --> 00:03:32.514
Typically, they are in stage 3 or
4, or from this year,

55
00:03:32.514 --> 00:03:36.551
maybe in 2.7,
the new stage that they have created.

56
00:03:36.551 --> 00:03:39.358
So meaning that when they are there,
they are approved.

57
00:03:39.358 --> 00:03:45.218
So it's 99.9% that we kind of be sure that
it's gonna be there in the future, okay?

58
00:03:45.218 --> 00:03:50.302
And because they already have
the recommendation standard spec,

59
00:03:50.302 --> 00:03:53.123
so it's probably not gonna change.

60
00:03:53.123 --> 00:03:58.142
In that case, because it's almost
guaranteed that they will be implemented

61
00:03:58.142 --> 00:04:02.540
in the spec, and that means it will
be implemented in browsers, for

62
00:04:02.540 --> 00:04:07.423
example, or in Node.js later,
if we like that, we can start using it.

63
00:04:07.423 --> 00:04:11.802
And sometimes even some browsers may
already support some of those abilities,

64
00:04:11.802 --> 00:04:13.793
which is kind of interesting.

65
00:04:13.793 --> 00:04:19.206
The problem is that how to
use modern ECMAScript syntax.

66
00:04:19.206 --> 00:04:23.997
It can be ES2024, ES.Next,
I mean, the next version today,

67
00:04:23.997 --> 00:04:27.536
because we have older engines there.

68
00:04:27.536 --> 00:04:30.536
There are typically two
solutions to this problem.

69
00:04:30.536 --> 00:04:34.806
We can use polyfills or transpilers.

70
00:04:34.806 --> 00:04:36.360
What's a polyfill?

71
00:04:36.360 --> 00:04:41.156
A polyfill, it's a JavaScript library
that is trying to fill a hole,

72
00:04:41.156 --> 00:04:44.422
fill a gap, and
it's emulating the new stuff.

73
00:04:44.422 --> 00:04:49.289
In this case, polyfills are only
available for API changes,

74
00:04:49.289 --> 00:04:53.970
new methods, as we mentioned before,
not new operators,

75
00:04:53.970 --> 00:04:58.168
because you cannot change the language.

76
00:04:58.168 --> 00:05:01.754
You can add a method to arrays and
emulate a new behavior, but

77
00:05:01.754 --> 00:05:05.693
you cannot create a new
operator in the language.

78
00:05:05.693 --> 00:05:10.873
And transpilers are typically the way
to go that will solve the problem.

79
00:05:10.873 --> 00:05:12.073
What's a transpiler?

80
00:05:12.073 --> 00:05:14.863
Probably, you have heard about
transpilers or you have used them.

81
00:05:16.083 --> 00:05:17.910
It takes one source code and

82
00:05:17.910 --> 00:05:21.648
it creates another source
code in a different version.

83
00:05:22.728 --> 00:05:27.588
So for example, let's rephrase that.

84
00:05:27.588 --> 00:05:31.064
So they will convert modern
code into older code, and

85
00:05:31.064 --> 00:05:35.368
these transpilers talking
about ECMAScript, okay?

86
00:05:35.368 --> 00:05:39.725
It can be ES6, ES5, ES2020,

87
00:05:39.725 --> 00:05:43.106
you pick the target, okay?

88
00:05:44.296 --> 00:05:46.596
The most common solutions
out there are Babel.

89
00:05:46.596 --> 00:05:48.420
That's probably the one
that you have used,

90
00:05:48.420 --> 00:05:50.756
even if you don't know
that you have used that.

91
00:05:50.756 --> 00:05:56.586
For example, if you have used React,
Babel is inside, okay?

92
00:05:56.586 --> 00:06:01.857
So TypeScript is also a transpiler.

93
00:06:01.857 --> 00:06:06.686
I mean, you can use TypeScript
to just write JavaScript.

94
00:06:06.686 --> 00:06:10.758
Not really, TypeScript is
a strict superset of JavaScript,

95
00:06:10.758 --> 00:06:14.164
and you can use TypeScript
to transpile code.

96
00:06:14.164 --> 00:06:14.714
We have a question.

97
00:06:16.094 --> 00:06:21.743
&gt;&gt; Speaker 1: Is the TypeScript language
regulated by ECMA and all as well?

98
00:06:21.743 --> 00:06:22.623
&gt;&gt; Maximiliano Firtman: That's
a good question.

99
00:06:22.623 --> 00:06:29.164
So TypeScript is not regulated by
the ECMA-262 of the TC39 committee.

100
00:06:29.164 --> 00:06:32.438
But TypeScript is a strict superset,

101
00:06:32.438 --> 00:06:37.871
which means that it's ECMAScript
plus something else on top.

102
00:06:37.871 --> 00:06:43.615
But it's a different language, has its
own separate process and committee,

103
00:06:43.615 --> 00:06:49.654
and each version of TypeScript typically
is based on one version of ECMAScript.

104
00:06:49.654 --> 00:06:52.822
So they say, okay, TypeScript 2.0,

105
00:06:52.822 --> 00:06:58.174
just giving you any random number,
is based on ECMAScript 2015.

106
00:06:58.174 --> 00:07:04.299
So they have that, plus all the things
that TypeScript is adding on top.

107
00:07:04.299 --> 00:07:08.905
But you can use the TypeScript
compiler to compile ECMAScript,

108
00:07:08.905 --> 00:07:12.299
not TypeScript, because it just works.

109
00:07:12.299 --> 00:07:13.489
Also, you have ESBuilder.

110
00:07:13.489 --> 00:07:14.339
That's another one.

111
00:07:14.339 --> 00:07:18.261
It's actually a builder, it's actually for

112
00:07:18.261 --> 00:07:22.289
bundling files, but
it also transpiles code.

113
00:07:24.769 --> 00:07:28.629
Also, you can use plugins here
when you use transpilers.

114
00:07:28.629 --> 00:07:33.877
Those plugins will even enhance
the language with non-standard features,

115
00:07:33.877 --> 00:07:35.662
for example, ES.Next.

116
00:07:35.662 --> 00:07:41.113
So you can start using
features that are not yet

117
00:07:41.113 --> 00:07:45.208
in the standard today, or JSX.

118
00:07:45.208 --> 00:07:48.129
If you have used React, for example,

119
00:07:48.129 --> 00:07:52.983
JSX is the ability to use kind of XML,
HTML within JavaScript.

120
00:07:52.983 --> 00:07:56.662
So you open angle brackets in JavaScript,
okay?

121
00:07:56.662 --> 00:08:02.353
And that's not ECMAScript-compatible,
but with these plugins, you can use it.

122
00:08:02.353 --> 00:08:08.567
And of course, you need to compile that,
transpile that, into something else.

123
00:08:08.567 --> 00:08:12.842
So with a transpiler, for
example, you can write ES2024.

124
00:08:12.842 --> 00:08:17.288
And then you go through the transpiler and
you get a different file,

125
00:08:17.288 --> 00:08:21.190
and you deploy ES2015, or
you pick the target, okay?

126
00:08:21.190 --> 00:08:24.001
Any number will work.

127
00:08:24.001 --> 00:08:28.060
Or you can write ES.Next and JSX.

128
00:08:28.060 --> 00:08:31.450
You go through the transpiler, and

129
00:08:31.450 --> 00:08:37.213
then you deploy ES5 that will
be compatible even with IE6,

130
00:08:37.213 --> 00:08:41.846
if you wanna target
100% of the population,

131
00:08:41.846 --> 00:08:47.052
including some old corporate
users on IE 11, okay?

132
00:08:47.052 --> 00:08:51.122
So transpilers are our, say, helpers,

133
00:08:51.122 --> 00:08:56.121
our saviors here, so
then we can write code in latest

134
00:08:56.121 --> 00:09:01.374
version of JavaScript using
the latest techniques.

135
00:09:01.374 --> 00:09:06.021
And then we go through the process
of transpiling before publishing

136
00:09:06.021 --> 00:09:07.865
it into the server.

137
00:09:07.865 --> 00:09:12.290
Also, there are some cloud-based
providers these days where you can

138
00:09:12.290 --> 00:09:14.195
transpile on the fly.

139
00:09:14.195 --> 00:09:19.505
So you just deploy your ES2024 file.

140
00:09:19.505 --> 00:09:23.253
The cloud itself, I mean,
the hosting provider,

141
00:09:23.253 --> 00:09:27.175
will do the transpilation for
you to whatever setup,

142
00:09:27.175 --> 00:09:32.512
whatever configuration you set,
like ES5, ES16, or ES2020.

