WEBVTT

1
00:00:00.220 --> 00:00:06.370
&gt;&gt; Maximiliano Firtman: Some improvements
that appear to this promise pattern later.

2
00:00:06.370 --> 00:00:10.142
For example, one of the great advantages
of promises that I didn't mention yet,

3
00:00:10.142 --> 00:00:12.180
there are a couple of advantages.

4
00:00:12.180 --> 00:00:17.265
One is that we can have,
compared with call backs for

5
00:00:17.265 --> 00:00:21.552
example, we can have a common vocabulary.

6
00:00:21.552 --> 00:00:23.820
I don't need documentation.

7
00:00:23.820 --> 00:00:25.800
Let me explain what I'm saying.

8
00:00:25.800 --> 00:00:32.180
So for example, I'm not sure if you
even remember jQuery those times.

9
00:00:32.180 --> 00:00:37.917
But for example, to make a fetch,
there were many ways to do that,

10
00:00:37.917 --> 00:00:43.243
but one was to do a .get or .ajax or
just think about that there

11
00:00:43.243 --> 00:00:48.894
is something like this,
where you pass a URL and then a callback.

12
00:00:49.974 --> 00:00:53.527
Okay, so I create a function that will
receive the data something that I think

13
00:00:53.527 --> 00:00:55.204
about this okay?

14
00:00:55.204 --> 00:00:57.447
But then you have no JS, for example,

15
00:00:57.447 --> 00:01:01.588
no JS without promises like reading
a file It's something like this,

16
00:01:01.588 --> 00:01:06.261
you read the file, okay, and
then you pass the name of the file.

17
00:01:06.261 --> 00:01:09.870
By the way, if let's say that in jQuery,
if there is an error,

18
00:01:09.870 --> 00:01:12.951
you receive a second callback
with the error, okay?

19
00:01:14.111 --> 00:01:17.717
So you have two callbacks
as two different arguments.

20
00:01:17.717 --> 00:01:19.952
Make sense?

21
00:01:19.952 --> 00:01:25.369
Callbacks from 4K, callback forever on no
.JS you wanna read the file, and then,

22
00:01:25.369 --> 00:01:30.580
I'm not sure if you remember how that
works, you don't receive two callbacks.

23
00:01:31.760 --> 00:01:37.810
It's just one callback, where you receive
the error or the reference to the file.

24
00:01:37.810 --> 00:01:41.025
I mean, maybe it's not the 100%
the right callback code was just to give

25
00:01:41.025 --> 00:01:41.587
you an idea.

26
00:01:42.587 --> 00:01:47.427
So the problem with callbacks is that
there is no unique design pattern.

27
00:01:47.427 --> 00:01:51.147
Every API designer can
pick its own solution.

28
00:01:52.167 --> 00:01:53.857
And in this case, you see it's different.

29
00:01:53.857 --> 00:02:01.739
How can I know when I'm calling an a sync
API how to, for example, catch errors.

30
00:02:01.739 --> 00:02:03.899
Well, you need to read the documentation.

31
00:02:03.899 --> 00:02:06.039
With promises, you have only one way.

32
00:02:06.039 --> 00:02:11.009
If it's a promise, you know how,
it's a dot catch or the try catch,

33
00:02:11.009 --> 00:02:13.979
if you're using a sync await, okay?

34
00:02:13.979 --> 00:02:15.627
That's okay, so that's the only way.

35
00:02:15.627 --> 00:02:20.932
So that's one great advantages
of promises over call backs.

36
00:02:20.932 --> 00:02:25.120
And the other great advantage is how
to work with several promises at

37
00:02:25.120 --> 00:02:26.922
the same time.

38
00:02:26.922 --> 00:02:31.722
Let's say, I need to go and grab from
the network three different JSON files,

39
00:02:31.722 --> 00:02:35.562
and I wanna do something
when I have all the three.

40
00:02:35.562 --> 00:02:41.619
With callbacks, it's a mess because,
of course you can request three,

41
00:02:41.619 --> 00:02:46.505
fetches or whatever, three files,
but you're receiving

42
00:02:46.505 --> 00:02:52.513
the responses in any order because
you wanna do this in parallel, okay?

43
00:02:52.513 --> 00:02:57.513
So I just make three HTTP requests and
let's wait for them.

44
00:02:57.513 --> 00:03:00.814
How can I know when all
the three are done?

45
00:03:00.814 --> 00:03:03.231
Every time I'm receiving one response,

46
00:03:03.231 --> 00:03:06.904
I need to check what happens
with the other two manually.

47
00:03:06.904 --> 00:03:09.324
And if the other two are okay,
okay, I'm the last one.

48
00:03:09.324 --> 00:03:11.394
So let's do the job.

49
00:03:11.394 --> 00:03:15.382
With promises, the great
advantage is that we have ways and

50
00:03:15.382 --> 00:03:20.103
the API has ways to actually wait for
all the promises at the same time.

51
00:03:21.794 --> 00:03:25.494
So, and there are many ways that you
have in the promise pattern to do that.

52
00:03:26.624 --> 00:03:30.604
And now we have from ES6 more ways.

53
00:03:30.604 --> 00:03:34.039
For example,
we have the promise all settle,

54
00:03:34.039 --> 00:03:39.631
where I can pass an array of promises
&gt;&gt; Maximiliano Firtman: That in this case,

55
00:03:39.631 --> 00:03:44.497
these are two promises that are just
rejecting and resolving immediately, but

56
00:03:44.497 --> 00:03:48.925
it can be different fetch APIs where
you're fetching from the network,

57
00:03:48.925 --> 00:03:50.319
something like that.

58
00:03:52.961 --> 00:03:57.161
&gt;&gt; Maximiliano Firtman: So you can wait
for all the promises to fulfill or

59
00:03:57.161 --> 00:04:04.100
now there isn't all settle, all settle
will say when all the promises ended.

60
00:04:05.340 --> 00:04:08.500
Rejected or settled?

61
00:04:08.500 --> 00:04:09.580
I don't know.

62
00:04:09.580 --> 00:04:11.600
So all of them have finished.

63
00:04:11.600 --> 00:04:14.630
When all of them have finished,
that's give me another promise.

64
00:04:15.740 --> 00:04:18.638
And of course, I can use a sync await.

65
00:04:18.638 --> 00:04:20.110
Does it make sense?

66
00:04:20.110 --> 00:04:23.558
Any will give you the first one.

67
00:04:24.688 --> 00:04:27.398
You use that with a design
pattern known as a race.

68
00:04:29.238 --> 00:04:34.189
So I have a race between
two different patterns or

69
00:04:34.189 --> 00:04:38.438
two different ways to access the data.

70
00:04:38.438 --> 00:04:41.903
A very simple to understand use
case It's data that you have

71
00:04:41.903 --> 00:04:45.176
cached locally in the database and
also in the network.

72
00:04:46.436 --> 00:04:47.786
So I start to raise.

73
00:04:49.026 --> 00:04:53.786
Let's grab the data from the cache or
from a local file and from the network.

74
00:04:54.816 --> 00:04:57.056
Wherever it comes first is
the one I'm going to use.

75
00:04:58.566 --> 00:05:03.742
So for that, you create two promises,
and then, so here I can create

76
00:05:03.742 --> 00:05:08.754
an array of true promises,
like get from database and also fetch.

77
00:05:10.544 --> 00:05:14.464
And the first one is the one that
will win and will give me the value.

78
00:05:15.794 --> 00:05:20.616
That's promise.any,
you pass an array of promises, of course,

79
00:05:20.616 --> 00:05:22.655
the rest will be discarded.

80
00:05:24.942 --> 00:05:26.148
&gt;&gt; Maximiliano Firtman: Does
it make sense?

81
00:05:26.148 --> 00:05:31.698
So working with multiple promises
it's a nice way also, that give us

82
00:05:31.698 --> 00:05:38.408
an idea that it's a good idea to move all
your synchronous code to promises as well.

83
00:05:38.408 --> 00:05:43.642
So, if you have for example,
an array of countries, okay?

84
00:05:43.642 --> 00:05:45.833
So you have an array of countries, and

85
00:05:45.833 --> 00:05:48.922
you create the array of
countries like this, right?

86
00:05:50.032 --> 00:05:52.852
And you hard code your countries,
and it's fine.

87
00:05:54.272 --> 00:05:56.485
Of course, we'll start with Argentina,
not because it's my country,

88
00:05:56.485 --> 00:05:57.722
it's with A, right?

89
00:05:57.722 --> 00:06:02.035
Then a Brazil, one per,
I don't know, Canada and so on.

90
00:06:02.035 --> 00:06:05.845
So you hardcode the array of countries.

91
00:06:05.845 --> 00:06:11.668
Well, it's a better pattern,
there is a design pattern

92
00:06:11.668 --> 00:06:17.355
known as promisify that's
the promisify data.

93
00:06:17.355 --> 00:06:21.025
So and that design pattern promisify data.

94
00:06:21.025 --> 00:06:25.304
Well tell you this,
instead of doing this, create a function,

95
00:06:25.304 --> 00:06:30.088
get countries,
&gt;&gt; Maximiliano Firtman: And you say okay,

96
00:06:30.088 --> 00:06:35.113
so I create a function, and
then I return the array, no,

97
00:06:35.113 --> 00:06:40.160
don't do that,
because that's kind of the same thing.

98
00:06:41.390 --> 00:06:44.737
Always return a promise.

99
00:06:44.737 --> 00:06:52.352
So I can return a promise that
right now fulfill with this.

100
00:06:55.462 --> 00:07:02.442
Or if you wanna see the previous code
that we did, I returned a new promise.

101
00:07:02.442 --> 00:07:06.983
That resolve rechecked and

102
00:07:06.983 --> 00:07:13.712
we're just going to resolve with this.

103
00:07:13.712 --> 00:07:17.182
So in this case,
the array is a synchronous array.

104
00:07:17.182 --> 00:07:22.015
I'm not going to a database or
a network, but I can still promisify It.

105
00:07:23.822 --> 00:07:26.041
&gt;&gt; Maximiliano Firtman: What's
the advantage of doing that?

106
00:07:26.041 --> 00:07:31.236
I'm ready for the future, so
if you promisify all your data later,

107
00:07:31.236 --> 00:07:34.061
if you want to change to a database and

108
00:07:34.061 --> 00:07:40.061
then your countries will be in a database,
it's easy to change that.

109
00:07:40.061 --> 00:07:42.184
You don't need to change
the consumers of the data.

110
00:07:43.264 --> 00:07:44.894
Everything will be a sync await.

111
00:07:46.224 --> 00:07:51.754
Even if it's a synchronous operation,
there is no real performance penalty,

112
00:07:51.754 --> 00:07:56.715
or the performance penalty is really,
really small to think about it.

