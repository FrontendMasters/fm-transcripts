WEBVTT

1
00:00:00.000 --> 00:00:06.186
&gt;&gt; Maximiliano Firtman: Now on ES2017,
actually two years after ES6,

2
00:00:06.186 --> 00:00:12.090
we find what most developer
thing is one of the best

3
00:00:12.090 --> 00:00:17.726
updates in ECMAScript
since ES6 async await.

4
00:00:17.726 --> 00:00:22.608
So now I have here almost the same
example as before, with one difference to

5
00:00:22.608 --> 00:00:26.884
make things more simple or simpler,
is that the function start.

6
00:00:26.884 --> 00:00:32.346
So I have a start, start calls doing
seconds with the same code as before.

7
00:00:32.346 --> 00:00:34.590
So what's the deal with async await?

8
00:00:34.590 --> 00:00:41.602
Async await is just sugar syntax on
top of the Promises API, sugar syntax.

9
00:00:41.602 --> 00:00:45.295
So it's not changing the nature
of how promises work.

10
00:00:45.295 --> 00:00:51.897
In fact, it's not going to change
how I create the promise, okay?

11
00:00:51.897 --> 00:00:56.612
No, it's just going to change
how I consume the promise.

12
00:00:56.612 --> 00:00:59.884
So, because we realize that,
yeah, it works.

13
00:00:59.884 --> 00:01:07.112
But this then, catch, some people
thought that doesn't look nice.

14
00:01:07.112 --> 00:01:15.134
So they say, we can just say we're gonna
store the value in a variable like this.

15
00:01:15.134 --> 00:01:18.695
Okay, remember we did this
comment this for a second.

16
00:01:18.695 --> 00:01:25.291
I mean, if I do this, it's not gonna work,
and then if I alert the value.

17
00:01:25.291 --> 00:01:31.937
So the value, it's the promise,
we mentioned that.

18
00:01:31.937 --> 00:01:39.552
So doing seconds returns a promise,
so the value is a promise, okay?

19
00:01:39.552 --> 00:01:43.133
So that's not what I want,

20
00:01:43.133 --> 00:01:48.443
I need to wait for the promise to finish.

21
00:01:48.443 --> 00:01:53.169
I need to wait for the americano
to be ready and hot in my hand.

22
00:01:53.169 --> 00:01:57.731
So for that,
we use a new syntax called await.

23
00:01:57.731 --> 00:02:00.179
Await will await for the then,

24
00:02:00.179 --> 00:02:04.522
it's replacing the dot then
with a different syntax.

25
00:02:04.522 --> 00:02:06.854
And await only works if I run this,

26
00:02:06.854 --> 00:02:12.171
it's giving me an error saying that
a weight is only valid in async functions.

27
00:02:12.171 --> 00:02:18.699
Which means I need to declare that my
function will have a weight inside.

28
00:02:18.699 --> 00:02:23.336
So it's not a normal synchronous function,
and

29
00:02:23.336 --> 00:02:26.736
I do that by adding an async prefix.

30
00:02:26.736 --> 00:02:31.665
So now, if I run this,
it's waiting 2 seconds and

31
00:02:31.665 --> 00:02:36.261
then it's giving me success as before,
okay?

32
00:02:36.261 --> 00:02:43.994
But it looks nice clean the code
with the thenn and the catch.

33
00:02:43.994 --> 00:02:49.011
And it's better when you have a lot
of promises and chain promises.

34
00:02:49.011 --> 00:02:53.746
So the code looks synchronous,
but it's actually asynchronous.

35
00:02:53.746 --> 00:02:57.463
Internally there are some
generators going on here.

36
00:02:57.463 --> 00:03:02.589
Okay, we won't get there, but
this is like a function that now

37
00:03:02.589 --> 00:03:07.450
can end execution, wait, and
continue executing later.

38
00:03:07.450 --> 00:03:10.762
So that's why it's an async function.

39
00:03:10.762 --> 00:03:15.163
Typically in JavaScript, every function
is synchronous, so if it's a start,

40
00:03:15.163 --> 00:03:19.192
it needs to finish, if it's not finishing,
it's blocking the thread.

41
00:03:19.192 --> 00:03:21.111
Well, not an async function.

42
00:03:21.111 --> 00:03:23.204
Okay, makes sense?

43
00:03:23.204 --> 00:03:27.321
But there is still one part that I didn't
cover in this code because I covered

44
00:03:27.321 --> 00:03:28.944
the then, but not the catch.

45
00:03:30.454 --> 00:03:35.314
If you want to also catch
the errors with async await,

46
00:03:35.314 --> 00:03:38.127
we can go back to use try catch.

47
00:03:38.127 --> 00:03:42.991
When you have a try catch
with an await inside,

48
00:03:42.991 --> 00:03:49.105
it that try catch will actually
catch the promise error and

49
00:03:49.105 --> 00:03:52.371
not a synchronous exception.

50
00:03:52.371 --> 00:03:54.179
Okay, makes sense?

51
00:03:54.179 --> 00:03:57.178
And that's the async awaits index.

52
00:03:57.178 --> 00:04:02.279
&gt;&gt; Speaker 2: So I've seen this pattern
in the past with a call it let value

53
00:04:02.279 --> 00:04:07.192
declared at line 11.5 and
then close it into the try.

54
00:04:07.192 --> 00:04:10.403
Do you in practice use further?

55
00:04:10.403 --> 00:04:13.228
Just cuz it's gonna get hoisted
out to the top or is that just-

56
00:04:13.228 --> 00:04:14.374
&gt;&gt; Maximiliano Firtman: I'm talking about

57
00:04:14.374 --> 00:04:15.667
the var let or const.

58
00:04:15.667 --> 00:04:17.754
&gt;&gt; Speaker 2: Exactly-
&gt;&gt; Maximiliano Firtman: That's a kind of

59
00:04:17.754 --> 00:04:19.209
a different discussion.

60
00:04:19.209 --> 00:04:24.090
For this particular example,
what's the difference of using var?

61
00:04:24.090 --> 00:04:26.625
I don't think hoisting is the difference,

62
00:04:26.625 --> 00:04:31.088
I think the block is different because
that means I can use the value outside.

63
00:04:31.088 --> 00:04:34.617
I'm not sure if you want to do that,
but if I use a var,

64
00:04:34.617 --> 00:04:39.411
I can use the value there outside of
the try, and if I use a let, I cannot.

65
00:04:39.411 --> 00:04:40.646
&gt;&gt; Speaker 2: Yeah, I was just.

66
00:04:40.646 --> 00:04:44.721
&gt;&gt; Maximiliano Firtman: So then, you need
to define it outside and then do this,

67
00:04:44.721 --> 00:04:47.254
which is okay, or you can use var.

68
00:04:47.254 --> 00:04:52.021
So sometimes people think that
var is deprecated, but it's not,

69
00:04:52.021 --> 00:04:57.567
var it's not deprecated, it's just
a different way to declare variables.

70
00:04:57.567 --> 00:05:02.004
And if it feels that it's better for
the case you're gonna still use it,

71
00:05:02.004 --> 00:05:02.889
makes sense?

72
00:05:02.889 --> 00:05:03.659
&gt;&gt; Speaker 2: Absolutely,

73
00:05:03.659 --> 00:05:07.316
yeah, I was just curious if you
were deliberately selecting var for

74
00:05:07.316 --> 00:05:11.501
the ability to use it outside of that
block, or if it was just like the muscle.

75
00:05:11.501 --> 00:05:14.404
&gt;&gt; Maximiliano Firtman: Yeah, I think
that probably I didn't think consciously

76
00:05:14.404 --> 00:05:15.076
about that.

77
00:05:15.076 --> 00:05:19.196
But probably when it's a try
catch you will see that a lot

78
00:05:19.196 --> 00:05:21.397
of developers are using var.

79
00:05:21.397 --> 00:05:26.490
Because of this idea that typically you
try to narrow the try catch a small part.

80
00:05:26.490 --> 00:05:30.923
And then you don't wanna have
a large block in the try, and

81
00:05:30.923 --> 00:05:36.916
that typically means that bibles that
user carrying size won't be so useful.

82
00:05:36.916 --> 00:05:41.724
So yeah, if not, you need to do the lead,
and you cannot use constant blah, blah,

83
00:05:41.724 --> 00:05:42.569
blah, blah.

84
00:05:42.569 --> 00:05:46.567
Well, it's up to you, it's a pattern.

85
00:05:46.567 --> 00:05:52.769
But it's important to remember that
from ES6, that var is not deprecated.

86
00:05:52.769 --> 00:06:00.403
I can't even bet that most JavaScript
developers think that if you're using var,

87
00:06:00.403 --> 00:06:04.450
you are old school and
you are writing ES5.

88
00:06:04.450 --> 00:06:07.621
And when you look at the var you say,
that's old code.

89
00:06:07.621 --> 00:06:11.620
But there's no technical reason for
that, it's not deprecated,

90
00:06:11.620 --> 00:06:13.595
it's not marked as deprecated.

91
00:06:13.595 --> 00:06:17.967
Actually, ECMAScript never
marked things as deprecated,

92
00:06:17.967 --> 00:06:21.318
it's just another way
to declare variables.

93
00:06:21.318 --> 00:06:23.272
&gt;&gt; Speaker 2: I've seen
this pattern with let.

94
00:06:23.272 --> 00:06:27.342
&gt;&gt; Maximiliano Firtman: Cuz it's probably
more Java, C# than the pattern of

95
00:06:27.342 --> 00:06:32.865
creating, so in Java you create
the string outside and then you define.

96
00:06:32.865 --> 00:06:37.161
I think it's more a pattern that
is coming from mimicking other

97
00:06:37.161 --> 00:06:39.034
languages in JavaScript.

98
00:06:39.034 --> 00:06:43.438
&gt;&gt; Speaker 2: Are there cases where using
the old promise pattern would be preferred

99
00:06:43.438 --> 00:06:45.387
over the async await pattern?

100
00:06:45.387 --> 00:06:49.535
&gt;&gt; Maximiliano Firtman: Okay, to that
question, let me say first that we are not

101
00:06:49.535 --> 00:06:55.734
changing the pattern, it's the same
promise pattern, it's just syntax sugar.

102
00:06:55.734 --> 00:06:58.230
Now, talking about the sugar,
so it's the same promise.

103
00:06:58.230 --> 00:07:00.589
Actually we can go back and

104
00:07:00.589 --> 00:07:06.173
forth between one syntax at the other and
it's just the same.

105
00:07:06.173 --> 00:07:08.640
But let me rephrase the question,

106
00:07:08.640 --> 00:07:13.415
are there use cases where the then
is still better or looks better?

107
00:07:13.415 --> 00:07:14.706
And yeah, there are.

108
00:07:14.706 --> 00:07:19.613
I think one example is,
I don't have it here right now and

109
00:07:19.613 --> 00:07:22.590
it will take some time to see that.

110
00:07:22.590 --> 00:07:27.400
But if you're working with service
workers on progressive web apps, for

111
00:07:27.400 --> 00:07:31.368
example, and you are serving
file from the service worker.

112
00:07:31.368 --> 00:07:36.692
That particular case with
async await looks weird,

113
00:07:36.692 --> 00:07:42.986
because it feels like using then and
catch fits better there.

114
00:07:42.986 --> 00:07:49.118
So there are use cases where using async
await involves creating an inner class or

115
00:07:49.118 --> 00:07:53.366
an inner function so
you need to do something like this.

116
00:07:53.366 --> 00:07:58.382
You create an async arrow function
that then you immediately execute.

117
00:07:58.382 --> 00:08:01.660
So, if you are finding yourself
doing something like this,

118
00:08:01.660 --> 00:08:04.888
because if not, there is no
other way to solve the problem.

119
00:08:04.888 --> 00:08:09.061
Maybe using then is still a better idea,
okay?

120
00:08:09.061 --> 00:08:12.651
And one thing is top level, so

121
00:08:12.651 --> 00:08:18.545
let's say that I want to do this,
where is this?

122
00:08:18.545 --> 00:08:25.775
Start and
we go back to the sample doInSeconds.

123
00:08:25.775 --> 00:08:30.352
Let's say I'm going to
execute doInSeconds, here,

124
00:08:30.352 --> 00:08:34.638
I think that will answer
the question pretty well.

125
00:08:34.638 --> 00:08:36.880
In five seconds, okay?

126
00:08:36.880 --> 00:08:40.802
I wanna do something in five seconds,
so I need to await for this, okay?

127
00:08:40.802 --> 00:08:45.686
And wait for the message,
but what is the problem?

128
00:08:45.686 --> 00:08:50.263
Await is only valid in async functions and
I'm not in a function.

129
00:08:50.263 --> 00:08:56.064
This is root code, top level code,
so I cannot do this.

130
00:08:56.064 --> 00:08:59.948
There's one solution with async await
if you are force to async await,

131
00:08:59.948 --> 00:09:03.323
you feel like if you're not
using async await you're dirty.

132
00:09:03.323 --> 00:09:08.209
You create this weird
immediate async function.

133
00:09:08.209 --> 00:09:12.340
I bet also you'll need to use arrow
function, you can also do this.

134
00:09:12.340 --> 00:09:19.323
So you put this inner function in
an async function and then like that.

135
00:09:19.323 --> 00:09:25.895
So this will close, let me put it this
way so it looks better, like this.

136
00:09:25.895 --> 00:09:27.540
So I'm creating a function, by the way,

137
00:09:27.540 --> 00:09:29.473
you will see why I'm
adding those parentheses.

138
00:09:29.473 --> 00:09:32.449
I'm creating a function, but
I need to execute the function.

139
00:09:32.449 --> 00:09:36.482
I can put a name to the function, so
I can put a name and execute, but

140
00:09:36.482 --> 00:09:39.085
I don't wanna keep that function, okay?

141
00:09:39.085 --> 00:09:41.524
So because I know when I keep
that function for later,

142
00:09:41.524 --> 00:09:43.484
it's just when I use it, and that's all.

143
00:09:43.484 --> 00:09:47.657
So then you execute the function,
but how can I execute the function?

144
00:09:47.657 --> 00:09:50.736
They have just created,
this syntax is not working.

145
00:09:50.736 --> 00:09:54.028
I need to put the function in parentheses,

146
00:09:54.028 --> 00:09:57.965
this is called an immediate
executable function.

147
00:09:57.965 --> 00:10:02.699
And if you're finding yourself
doing this just to use async await,

148
00:10:02.699 --> 00:10:04.868
yes, I'm using async await.

149
00:10:04.868 --> 00:10:09.665
By the way, you don't see anything
because I'm not doing an alert or

150
00:10:09.665 --> 00:10:11.082
something on that.

151
00:10:11.082 --> 00:10:15.733
But if you're doing this,
I think it's better to

152
00:10:15.733 --> 00:10:20.155
stay with the other thing, so doInSeconds.

153
00:10:20.155 --> 00:10:22.483
It's 4 seconds,
that's why it's taking more time.

154
00:10:22.483 --> 00:10:24.064
So, let's go back to 2.

155
00:10:24.064 --> 00:10:26.672
2 seconds, so in 2 seconds, and you say,

156
00:10:26.672 --> 00:10:30.630
well then we will just get the message and
I will alert the message.

157
00:10:30.630 --> 00:10:33.528
I think this one is better than this one.

158
00:10:33.528 --> 00:10:38.991
So that's one example, and you can match
a mix because it's the same thing,

159
00:10:38.991 --> 00:10:41.185
just with a different syntax.

160
00:10:41.185 --> 00:10:43.751
So using it in a top-level global,

161
00:10:43.751 --> 00:10:49.489
there is a top-level await that we will
see in a second, but it's not this one.

162
00:10:49.489 --> 00:10:55.034
So I think this is one example where it
feels better to use then than async await.

