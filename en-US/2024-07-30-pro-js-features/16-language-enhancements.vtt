WEBVTT

1
00:00:00.150 --> 00:00:03.075
&gt;&gt; Maximiliano Firtman: So,
it's time to see what's new after ES6, but

2
00:00:03.075 --> 00:00:07.186
in this case, we won't be covering
features by ECMAScript version,

3
00:00:07.186 --> 00:00:10.430
because sometimes it
doesn't make any sense.

4
00:00:10.430 --> 00:00:15.410
You won't remember if it's ES2019 or 2023.

5
00:00:15.410 --> 00:00:18.101
It doesn't really matter a lot,

6
00:00:18.101 --> 00:00:24.166
mostly if you are going to be using
modern browsers or a transpiler, okay?

7
00:00:24.166 --> 00:00:29.226
So we will just cover everything
after ES6 grouped by topic, okay?

8
00:00:29.226 --> 00:00:34.173
And I will mention here and there, okay,
this is from 19, this is from 20, but

9
00:00:34.173 --> 00:00:36.446
it's not really what's important.

10
00:00:38.026 --> 00:00:41.107
So let's start talking about
language enhancements.

11
00:00:41.107 --> 00:00:44.383
Here, we will talk about
some small changes,

12
00:00:44.383 --> 00:00:48.174
okay, it will be really,
really straightforward.

13
00:00:48.174 --> 00:00:52.604
The GlobalThis, optional catch binding,
function to a string,

14
00:00:52.604 --> 00:00:56.650
new operators, actually we have
a couple of new operators.

15
00:00:56.650 --> 00:01:01.026
Some of them will be
very niche purposes but

16
00:01:01.026 --> 00:01:05.890
some others will become
your new best friends,

17
00:01:05.890 --> 00:01:11.486
class declaration some
changes in class declarations

18
00:01:11.486 --> 00:01:16.251
that are actually pretty good and
also weird.

19
00:01:16.251 --> 00:01:19.400
So at the same time, so you will see.

20
00:01:19.400 --> 00:01:22.585
Changes on the object class, changes or

21
00:01:22.585 --> 00:01:27.468
additions to working with the strings,
and numbers, okay?

22
00:01:27.468 --> 00:01:28.965
So, let's jump in.

23
00:01:30.045 --> 00:01:33.935
Now, we'll go back to our interface here,
and

24
00:01:33.935 --> 00:01:39.497
I'm going to load first from
Language Enhancement, GlobalThis.

25
00:01:40.788 --> 00:01:46.845
So, remember I mentioned before that
based on where we are running JavaScript,

26
00:01:46.845 --> 00:01:49.498
the global object is different.

27
00:01:49.498 --> 00:01:53.578
It can be self on workers or
service workers.

28
00:01:53.578 --> 00:02:00.577
It can be window on browsers or
global on Node.js.

29
00:02:00.577 --> 00:02:04.516
If you are creating global variables or
functions,

30
00:02:04.516 --> 00:02:09.277
those elements are actually
tied to a global object.

31
00:02:09.277 --> 00:02:12.925
The problem when you're writing
cross-platform JavaScript is

32
00:02:12.925 --> 00:02:17.695
that it depends if you're running on the
server or if you're running client-side,

33
00:02:17.695 --> 00:02:20.713
that global object is just different.

34
00:02:20.713 --> 00:02:25.743
Well, it can be window,
it can be global or it can be self, okay?

35
00:02:25.743 --> 00:02:32.043
So now, from ES2020,
we have something known as GlobalThis.

36
00:02:32.043 --> 00:02:36.115
So we can replace everything
with GlobalThis and

37
00:02:36.115 --> 00:02:41.848
on every platform is always
the global context, is just that.

38
00:02:41.848 --> 00:02:46.568
Okay, so it's a pointer created
in ECMA Script directly that

39
00:02:46.568 --> 00:02:51.742
points always to the this global object,
not matter the platform,

40
00:02:51.742 --> 00:02:56.678
is just that,
nothing really more complicated than that.

41
00:02:56.678 --> 00:03:01.920
And that makes our cross platform
JavaScript code better and

42
00:03:01.920 --> 00:03:08.599
cleaner because then we don't need to
start asking if this is in the browser,

43
00:03:08.599 --> 00:03:13.357
then use window,
if this is in Node.js, use global.

44
00:03:13.357 --> 00:03:17.597
Okay, it's just that,
GlobalThis everywhere and it will work.

45
00:03:19.617 --> 00:03:23.230
Trailing commas,
also something really straightforward.

46
00:03:23.230 --> 00:03:28.163
From ES2017,
actually 2017 was a version that did

47
00:03:28.163 --> 00:03:32.760
add a lot of things, and
this is one of those things.

48
00:03:32.760 --> 00:03:36.975
We can add trialing commas at arrays,
add objects,

49
00:03:36.975 --> 00:03:41.782
be careful because this is
not done JSON compatible.

50
00:03:41.782 --> 00:03:47.952
So it works in JavaScript but
it's not validated against a JSON schema.

51
00:03:47.952 --> 00:03:50.254
So if you're trying to do JSON parse, or

52
00:03:50.254 --> 00:03:55.112
if you're trying to read that with
other language isn't gonna work, okay?

53
00:03:55.112 --> 00:03:59.099
But it works in JavaScript, and
it also works for a function arguments.

54
00:04:00.630 --> 00:04:04.829
So, why this is useful it
makes things simpler at least,

55
00:04:04.829 --> 00:04:08.152
when for
example you are using multilines and

56
00:04:08.152 --> 00:04:12.630
then you start changing the order,
doing things like that.

57
00:04:12.630 --> 00:04:14.431
So if you have a trailing comma,

58
00:04:14.431 --> 00:04:19.373
you don't need to always remember that
the last element doesn't need the comma.

59
00:04:19.373 --> 00:04:23.531
And then, I mean, when you're doing
this without the trailing comma,

60
00:04:23.531 --> 00:04:28.030
you start creating problems in your syntax
that you need to add the comma here,

61
00:04:28.030 --> 00:04:30.103
remove the comma here, and so on.

62
00:04:30.103 --> 00:04:32.063
It's just that, nothing really important.

63
00:04:33.063 --> 00:04:40.194
But it's safe to add
trailing commas now here.

64
00:04:40.194 --> 00:04:45.484
Optional Catch Binding. This is interesting because this was
making a lot of problems with linters.

65
00:04:45.484 --> 00:04:50.442
A linter is a tool that you use that
will give you hints or warning messages,

66
00:04:50.442 --> 00:04:54.664
for example,
when you are not using a variable.

67
00:04:54.664 --> 00:04:58.319
I mean,
we know that every time we do try-catch,

68
00:04:58.319 --> 00:05:04.442
we should do something with the error,
we should be doing something.

69
00:05:04.442 --> 00:05:09.773
Logging the error, retrying,
okay, but if you're a developer,

70
00:05:09.773 --> 00:05:15.023
you know that there are some
situations and sometimes we are lazy.

71
00:05:15.023 --> 00:05:18.761
And yeah, in the catch,
we just do nothing, okay?

72
00:05:18.761 --> 00:05:23.507
But it was mandatory to
create a variable for

73
00:05:23.507 --> 00:05:27.618
the error, it was mandatory, okay?

74
00:05:27.618 --> 00:05:32.427
Well from 2019 from ECMAScript 2019,
this is optional.

75
00:05:32.427 --> 00:05:39.259
So we can just remove the error
object declaration and it work.

76
00:05:41.049 --> 00:05:47.539
Of course, we won't get the details of
the error, okay, but it's optional now.

77
00:05:47.539 --> 00:05:50.901
We don't need to create a variable
that then a linter will complain

78
00:05:50.901 --> 00:05:52.629
that we are not using.

79
00:05:52.629 --> 00:05:55.701
It's like, hey, you have a variable
that you're not using the variable,

80
00:05:55.701 --> 00:05:57.409
something may be wrong here.

81
00:05:57.409 --> 00:06:03.556
Well, now optional catch binding will
let you override that problem, okay?

82
00:06:03.556 --> 00:06:07.544
Small changes that makes the code cleaner,
okay?

83
00:06:09.294 --> 00:06:13.716
Function to a string, actually,
I don't think it's really useful, okay?

84
00:06:13.716 --> 00:06:18.546
But now when you have a function, you
can convert the function to a string and

85
00:06:18.546 --> 00:06:20.675
you say, why do I want to do that?

86
00:06:20.675 --> 00:06:24.738
Well, when you convert
the function to a string,

87
00:06:24.738 --> 00:06:28.607
what you get is the actual
text of the function,

88
00:06:28.607 --> 00:06:33.075
that you may want to eval or
run in a different context.

89
00:06:33.075 --> 00:06:36.555
So it has to do with reflection APIs.

90
00:06:36.555 --> 00:06:41.309
So you can get the text,
the actual source code of the function and

91
00:06:41.309 --> 00:06:47.105
try to execute that in a different runtime
or if you're doing multi threading,

92
00:06:47.105 --> 00:06:51.342
things like that,
actually it's not really useful, but

93
00:06:51.342 --> 00:06:56.294
that wasn't available before and
it's available from 2019.

94
00:06:56.294 --> 00:07:00.759
&gt;&gt; Speaker 2: So obviously differs
in the way it's structured, but

95
00:07:00.759 --> 00:07:06.582
with this offer other benefits compared
to just like JSON stringify for

96
00:07:06.582 --> 00:07:08.632
serialization to JSON.

97
00:07:08.632 --> 00:07:11.246
&gt;&gt; Maximiliano Firtman: But
this is only for functions.

98
00:07:11.246 --> 00:07:11.870
&gt;&gt; Speaker 2: Okay, sorry.

99
00:07:11.870 --> 00:07:14.170
&gt;&gt; Maximiliano Firtman: So
it's not converting data,

100
00:07:14.170 --> 00:07:18.151
this is just giving you
the source code of a function,

101
00:07:18.151 --> 00:07:24.508
having the function as a variable,
having the function as a reference.

102
00:07:24.508 --> 00:07:27.098
&gt;&gt; Speaker 2: I didn't check
the prototype chain, sorry.

103
00:07:27.098 --> 00:07:30.278
&gt;&gt; Maximiliano Firtman: That's fine,
that's fine, but it's function only, okay?

104
00:07:31.698 --> 00:07:35.194
So that's why I say it's not something
that you would probably use on

105
00:07:35.194 --> 00:07:36.408
a daily basis for sure.

