WEBVTT

1
00:00:00.240 --> 00:00:03.757
&gt;&gt; Maximiliano Firtman: Rest and spread
operator, it's the same operator but

2
00:00:03.757 --> 00:00:05.840
used in different places.

3
00:00:05.840 --> 00:00:08.710
It's when you use three dots.

4
00:00:08.710 --> 00:00:11.570
Three dots, that's new in ES6.

5
00:00:11.570 --> 00:00:18.760
So the rest operator is when you
use it in arguments, for example.

6
00:00:18.760 --> 00:00:21.545
So for example, if I'm saying collect,

7
00:00:21.545 --> 00:00:25.274
I can call collect and
I'm passing values, okay?

8
00:00:25.274 --> 00:00:30.348
Here any kind of arguments,
any amount of arguments,

9
00:00:30.348 --> 00:00:34.649
so collect will actually
rest will take them,

10
00:00:34.649 --> 00:00:39.744
all of them and
we'll put them into an array, okay?

11
00:00:39.744 --> 00:00:43.564
So Args is an array, but

12
00:00:43.564 --> 00:00:48.118
also I can say a, b and args.

13
00:00:48.118 --> 00:00:50.518
Here you will understand
why it's called the rest.

14
00:00:50.518 --> 00:00:53.972
So here I'm saying I wanna
collect two arguments,

15
00:00:53.972 --> 00:00:59.678
A and B, and the rest of the arguments,
I wanna collect them in an array.

16
00:00:59.678 --> 00:01:05.668
So now args[0] will be
4 because 2 will go to A,

17
00:01:05.668 --> 00:01:13.577
3 will go to B, and the rest will
be collected under Args array.

18
00:01:15.753 --> 00:01:16.755
&gt;&gt; Maximiliano Firtman: Okay, make sense?

19
00:01:16.755 --> 00:01:18.323
It's just that.

20
00:01:18.323 --> 00:01:23.194
So you can collect all the arguments or
only the after 1,

21
00:01:23.194 --> 00:01:27.152
2, or 3 or
4 name arguments that you want and

22
00:01:27.152 --> 00:01:31.231
have in mind this works
also in arrow functions.

23
00:01:31.231 --> 00:01:35.251
I mentioned before that there is
an arguments array always available in

24
00:01:35.251 --> 00:01:37.921
functions, but not in arrow functions.

25
00:01:37.921 --> 00:01:41.742
But if you use the rest operator it
works on every function, arrow or

26
00:01:41.742 --> 00:01:43.816
not arrow, okay?

27
00:01:43.816 --> 00:01:46.749
And the same operator
with a different name,

28
00:01:46.749 --> 00:01:51.596
it's called the spread operator
when you use it in arrays.

29
00:01:51.596 --> 00:01:55.986
So now let me remove this for a while,
for a second, so we can see this.

30
00:01:55.986 --> 00:01:58.975
So I'm creating an array here,
1, 2, 3, and

31
00:01:58.975 --> 00:02:03.035
then I'm creating a new array that
says it will contain 4, 5, and

32
00:02:03.035 --> 00:02:06.193
here is spread me everything
from this other array.

33
00:02:07.243 --> 00:02:11.925
So that's why we have 4 and
5 and the rest is 1, 2, 3.

34
00:02:11.925 --> 00:02:15.661
This is the final array.

35
00:02:15.661 --> 00:02:20.340
So you are spreading the contents
of one array into another array.

36
00:02:20.340 --> 00:02:22.530
Also, this is a quick
way to create a copy.

37
00:02:23.670 --> 00:02:24.807
Not the best way but

38
00:02:24.807 --> 00:02:29.447
a quick way to create a copy, you open
a new array and you spread the other one.

39
00:02:32.159 --> 00:02:36.040
&gt;&gt; Maximiliano Firtman: This is creating
a new array spreading the contents of

40
00:02:36.040 --> 00:02:37.254
the previous one

