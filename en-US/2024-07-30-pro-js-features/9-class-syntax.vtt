WEBVTT

1
00:00:00.160 --> 00:00:03.786
&gt;&gt; Maximiliano Firtman: Let's jump
into the next one, class syntax, also,

2
00:00:03.786 --> 00:00:07.180
you can also click here
Next to go to the next one.

3
00:00:07.180 --> 00:00:11.646
Again, I'm not going to explain all
the OOP basic details here, but

4
00:00:11.646 --> 00:00:16.574
just to give a quick recap of where we
are because then we will start adding new

5
00:00:16.574 --> 00:00:20.672
features that appear in
the language in the last years.

6
00:00:20.672 --> 00:00:23.049
So, if you run this,
it's going to show you this, but

7
00:00:23.049 --> 00:00:25.402
let's try to understand what's going on.

8
00:00:25.402 --> 00:00:27.032
It's a class person.

9
00:00:27.032 --> 00:00:28.652
Okay, that has a constructor.

10
00:00:28.652 --> 00:00:32.890
You use the constructor
keyword in JavaScript.

11
00:00:32.890 --> 00:00:38.190
And then by the way, can you create
another constructor question for you?

12
00:00:38.190 --> 00:00:41.404
Can I create another constructor
with less arguments?

13
00:00:41.404 --> 00:00:44.005
Something like this in JavaScript.

14
00:00:44.005 --> 00:00:47.946
&gt;&gt; Speaker 2: I have to [INAUDIBLE] but
I've never tried.

15
00:00:47.946 --> 00:00:48.621
&gt;&gt; Maximiliano Firtman: You never try.

16
00:00:48.621 --> 00:00:51.516
Well, actually, the answer is no,
I cannot do that in JavaScript, why?

17
00:00:51.516 --> 00:00:56.127
Because we don't have function
overload in JavaScript,

18
00:00:56.127 --> 00:01:00.181
because actually arguments
are kind of not there.

19
00:01:00.181 --> 00:01:05.297
So, I mean they are there, but
actually arguments are always,

20
00:01:05.297 --> 00:01:09.563
unless you're using arrow functions,
are always,

21
00:01:09.563 --> 00:01:13.568
like a sugar syntax,
to the arguments array.

22
00:01:13.568 --> 00:01:16.462
So you can always say instead of this,

23
00:01:16.462 --> 00:01:20.178
here are arguments of zero and
arguments of one.

24
00:01:20.178 --> 00:01:22.408
I'm not sure if you know
that in JavaScript.

25
00:01:22.408 --> 00:01:26.713
So when you create arguments,
they are just aliases to

26
00:01:26.713 --> 00:01:32.688
the arguments array in a normal function,
not arrow function.

27
00:01:32.688 --> 00:01:37.228
But anyway,
that's why there is no function overload.

28
00:01:37.228 --> 00:01:40.790
That is something that is available in
other languages because it's the same

29
00:01:40.790 --> 00:01:41.348
function.

30
00:01:42.449 --> 00:01:47.252
It doesn't matter how many arguments
do you have, it's the constructor.

31
00:01:47.252 --> 00:01:51.292
And it's not just for constructor,
it works also with other,

32
00:01:51.292 --> 00:01:55.270
the same idea works with normal methods or
functions anyway.

33
00:01:55.270 --> 00:01:59.289
So that means that you will
always have only one constructor.

34
00:01:59.289 --> 00:02:02.583
And if you wanna receive
different kind of arguments,

35
00:02:02.583 --> 00:02:06.664
you need to deal with the arguments and
the type of the arguments, or

36
00:02:06.664 --> 00:02:10.469
do something that using the rest operator,
things like that.

37
00:02:10.469 --> 00:02:13.449
And we will see that in a second anyway.

38
00:02:13.449 --> 00:02:18.009
So a class can contain getters and
setters,

39
00:02:18.009 --> 00:02:21.219
not sure if you have used that.

40
00:02:21.219 --> 00:02:23.613
For example,
here we are creating an info property.

41
00:02:25.133 --> 00:02:27.453
Do I need to declare
the info property somewhere?

42
00:02:27.453 --> 00:02:31.148
No, not in ecmascript6 at least.

43
00:02:31.148 --> 00:02:36.078
You should define that it's
a property because we have

44
00:02:36.078 --> 00:02:39.087
the get prefix or the set prefix.

45
00:02:39.087 --> 00:02:43.268
The name of the function is
the name of the property.

46
00:02:43.268 --> 00:02:44.910
Okay, makes sense.

47
00:02:44.910 --> 00:02:48.414
Then we have methods, instance methods.

48
00:02:48.414 --> 00:02:52.594
They don't have the function, keyword.

49
00:02:52.594 --> 00:02:55.867
It's just the same without
the function keyword.

50
00:02:55.867 --> 00:03:01.613
And then I can create a subclass, in this
case an employee extending from person and

51
00:03:01.613 --> 00:03:05.159
this constructor can call
the super constructor.

52
00:03:05.159 --> 00:03:08.220
Okay, and you can override a method.

53
00:03:08.220 --> 00:03:15.945
There is no need for defining that this
greet method is overriding the superclass.

54
00:03:15.945 --> 00:03:17.163
It has the same name.

55
00:03:17.163 --> 00:03:19.559
It's overriding it.

56
00:03:19.559 --> 00:03:22.962
Actually, it has to do
with it prototype chain,

57
00:03:22.962 --> 00:03:28.191
something more advanced that we're not
going to get into there today, but

58
00:03:28.191 --> 00:03:33.504
JavaScript is a very flexible language
compared with other OOP languages.

59
00:03:33.504 --> 00:03:36.381
So that's why we can do that.

60
00:03:36.381 --> 00:03:38.695
And now we can create a person and

61
00:03:38.695 --> 00:03:42.997
you can see here that we can
do console log of person.info.

62
00:03:42.997 --> 00:03:47.368
And info is not really a variable,
it's a property, so

63
00:03:47.368 --> 00:03:51.747
it's actually going to execute the getter,
get info.

