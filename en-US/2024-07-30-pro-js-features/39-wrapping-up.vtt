WEBVTT

1
00:00:00.000 --> 00:00:02.816
&gt;&gt; Maximiliano Firtman: It's time for
a recap of this whole workshop.

2
00:00:02.816 --> 00:00:05.951
We've seen the difference between
JavaScript and ECMAScript, so

3
00:00:05.951 --> 00:00:07.658
now we understand the differences.

4
00:00:07.658 --> 00:00:09.720
Okay, JavaScript is a trademark.

5
00:00:09.720 --> 00:00:13.459
They're kind of the same thing, but
JavaScript is the trademark and

6
00:00:13.459 --> 00:00:18.320
ECMAScript is the legal and also the spec
term and the one that we version.

7
00:00:18.320 --> 00:00:21.870
So we know that now we are versioning
ECMAScript every year.

8
00:00:21.870 --> 00:00:25.844
We're not really following along, okay?

9
00:00:25.844 --> 00:00:30.745
So watching this year, okay, but every
once in a while we check, this is new,

10
00:00:30.745 --> 00:00:32.091
we can start using it.

11
00:00:32.091 --> 00:00:36.432
Sometimes we don't wait for browsers to
implement that because we use transpilers,

12
00:00:36.432 --> 00:00:37.468
we mentioned that.

13
00:00:37.468 --> 00:00:40.755
Remember that most of the time we
are talking about syntax sugar,

14
00:00:40.755 --> 00:00:44.239
that means it's something that can
be emulated for older browsers.

15
00:00:44.239 --> 00:00:49.726
So it's not a complete different
architecture of the language.

16
00:00:49.726 --> 00:00:53.013
It's just JavaScript in the browser,
JavaScript in node.

17
00:00:53.013 --> 00:00:56.469
And then it may depend on
the APIs that you're using, but

18
00:00:56.469 --> 00:00:59.794
not in the core language if
something really changes.

19
00:01:01.234 --> 00:01:02.414
We've seen transpilers.

20
00:01:02.414 --> 00:01:09.015
If you use a transpiler, you can just
use ES2034, ES2038 when it appeared.

21
00:01:09.015 --> 00:01:13.399
And it will transpile
to something that you

22
00:01:13.399 --> 00:01:18.161
can ship to browsers
that every users can use.

23
00:01:18.161 --> 00:01:21.950
We covered the ES6 Review,
everything that is ES6.

24
00:01:21.950 --> 00:01:26.795
And for the rest some language
enhancements, for strings,

25
00:01:26.795 --> 00:01:29.173
for objects, class syntax.

26
00:01:29.173 --> 00:01:34.320
The private class static methods and
properties that you can define

27
00:01:34.320 --> 00:01:40.467
on the class, collections and arrays,
recover weeks, sets, week set, map.

28
00:01:40.467 --> 00:01:44.791
All these new ways that we
have to deal with arrays,

29
00:01:44.791 --> 00:01:47.817
such as two sort of instead of sort.

30
00:01:47.817 --> 00:01:53.888
Async programming, we mentioned promises,
we mentioned async await.

31
00:01:53.888 --> 00:01:59.694
The top level async await, and
now recently some advanced topics.

32
00:01:59.694 --> 00:02:06.612
So that's actually the current state of
ECMAScript and the JavaScript language.

33
00:02:06.612 --> 00:02:10.453
So I hope you can start using
some of these features.

34
00:02:10.453 --> 00:02:16.175
The new operators working with NULS
will make our life easier probably.

35
00:02:16.175 --> 00:02:17.748
Okay, well, thank you.

36
00:02:17.748 --> 00:02:24.434
&gt;&gt; Speaker 2: [APPLAUSE]

