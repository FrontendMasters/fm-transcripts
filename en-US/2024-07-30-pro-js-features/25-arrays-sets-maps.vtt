WEBVTT

1
00:00:00.150 --> 00:00:02.839
&gt;&gt; Maximiliano Firtman: Now it's time
to talk a little bit about array and

2
00:00:02.839 --> 00:00:03.990
collections.

3
00:00:03.990 --> 00:00:07.883
So here we will start doing
a recap of ES6, okay,

4
00:00:07.883 --> 00:00:11.129
where we are in terms of collections, and

5
00:00:11.129 --> 00:00:16.170
working with collections,
iterators, for of, generators.

6
00:00:17.210 --> 00:00:20.966
Some methods, new methods for
array, change array by copy.

7
00:00:20.966 --> 00:00:23.026
We will see what is that.

8
00:00:23.026 --> 00:00:27.796
Set and maps that has been since ES6.

9
00:00:27.796 --> 00:00:34.112
Also, we will talk about weak set and
weak maps, and what are the differences,

10
00:00:34.112 --> 00:00:41.065
typed arrays, and some small things
that we will see directly in the code.

11
00:00:41.065 --> 00:00:47.125
Let's move to the recap of new
collections available in ES6.

12
00:00:47.125 --> 00:00:51.585
You know that typically in JavaScript,
we only have the array, okay?

13
00:00:51.585 --> 00:00:57.715
We have the array constructor and
then we have objects.

14
00:00:57.715 --> 00:00:58.925
That's all we have, okay?

15
00:00:58.925 --> 00:01:02.731
Of course,
we can also use the JSON syntax, so

16
00:01:02.731 --> 00:01:08.593
these brackets, square brackets,
but it's just the array.

17
00:01:08.593 --> 00:01:12.153
From ES6, we have sets and we have maps.

18
00:01:12.153 --> 00:01:18.013
Set, at beginning,
it seems similar to arrays.

19
00:01:18.013 --> 00:01:20.173
But let's try to analyze the difference.

20
00:01:20.173 --> 00:01:24.354
First, this is going to show me
the size of the set, not the length.

21
00:01:24.354 --> 00:01:25.181
It's called the size.

22
00:01:25.181 --> 00:01:27.360
So, what the size of this set should be?

23
00:01:30.030 --> 00:01:30.764
&gt;&gt; Maximiliano Firtman: What do you think?

24
00:01:34.284 --> 00:01:36.896
&gt;&gt; Maximiliano Firtman: If we count here.

25
00:01:39.498 --> 00:01:41.181
&gt;&gt; Maximiliano Firtman: Anyone?

26
00:01:41.181 --> 00:01:49.084
If I execute, if I run this,
should it give me how, six elements?

27
00:01:49.084 --> 00:01:50.118
I'm seeing some.

28
00:01:50.118 --> 00:01:53.154
&gt;&gt; Speaker 2: Won't it silently
delete the second number two?

29
00:01:54.224 --> 00:01:55.524
&gt;&gt; Maximiliano Firtman: So
let's go with that.

30
00:01:55.524 --> 00:01:56.994
Yeah, something like that is happening.

31
00:01:56.994 --> 00:01:58.534
It's five, it's not six.

32
00:01:58.534 --> 00:01:59.726
Why?
Because it's a set.

33
00:01:59.726 --> 00:02:02.934
Okay, a set.

34
00:02:02.934 --> 00:02:07.893
I'm not sure if you remember the idea
of sets in math in college, but

35
00:02:07.893 --> 00:02:13.524
one of the characteristics of a set
is that there is no duplicates.

36
00:02:13.524 --> 00:02:16.144
And that's what you were
mentioning about the two.

37
00:02:16.144 --> 00:02:19.734
It's not silently deleting it,
it's not taking it.

38
00:02:19.734 --> 00:02:25.818
You want me to save a 2 here,
now it's already there, so I have the 2.

39
00:02:25.818 --> 00:02:28.338
So he's not even putting the 2 in the set.

40
00:02:29.358 --> 00:02:35.073
So the set is a bag of objects
that they can contain anything,

41
00:02:35.073 --> 00:02:37.658
but no duplicates, okay?

42
00:02:37.658 --> 00:02:38.878
Make sense?

43
00:02:38.878 --> 00:02:42.970
So that's why it's 5 because
It doesn't contain these two.

44
00:02:42.970 --> 00:02:47.153
By the way, you can add to
the set any value, objects and

45
00:02:47.153 --> 00:02:53.100
also standard values, Booleans,
numbers, they go to the bag.

46
00:02:53.100 --> 00:02:58.059
A map, it's actually a key value
collection where the key can be any

47
00:02:58.059 --> 00:03:02.676
object, and that's the difference
with the object literal.

48
00:03:03.816 --> 00:03:08.743
So I can create a map, and
within the map, set values by key,

49
00:03:08.743 --> 00:03:11.066
and the key can be whatever.

50
00:03:11.066 --> 00:03:13.372
It can be another object
with a key inside.

51
00:03:13.372 --> 00:03:19.968
It can be an array,
anything can be a key, okay?

52
00:03:19.968 --> 00:03:20.672
Make sense?

53
00:03:23.143 --> 00:03:25.992
&gt;&gt; Maximiliano Firtman: Now,
weak versions.

54
00:03:25.992 --> 00:03:32.268
We have versions, we have for set and
map, we have weak version of both.

55
00:03:32.268 --> 00:03:36.282
Weak set, weak map.

56
00:03:36.282 --> 00:03:41.476
Here we are getting into a memory
management moment that if

57
00:03:41.476 --> 00:03:46.458
your developer experience
is only around JavaScript,

58
00:03:46.458 --> 00:03:51.034
you have probably never
encountered before.

59
00:03:51.034 --> 00:03:56.203
If you're coming from Z, C,
Swift, or many other languages,

60
00:03:56.203 --> 00:03:59.574
maybe you have already seen this, okay?

61
00:03:59.574 --> 00:04:04.272
So we don't have enough time today to
go over all the whole details about

62
00:04:04.272 --> 00:04:06.321
pointer management and so on.

63
00:04:06.321 --> 00:04:09.258
But typically when you have objects and

64
00:04:09.258 --> 00:04:14.957
variables pointing to those objects,
so let's say, let's look at this.

65
00:04:14.957 --> 00:04:18.669
If I have here an object,
okay, I create an object.

66
00:04:18.669 --> 00:04:20.859
The object has some
property doesn't matter.

67
00:04:20.859 --> 00:04:22.613
How many pointers do I have to the object?

68
00:04:22.613 --> 00:04:24.385
First, the object is this one.

69
00:04:24.385 --> 00:04:28.345
Actually, this is a literal
representation of the object, okay?

70
00:04:28.345 --> 00:04:33.585
This thing is going to create an object
in memory, okay, it's just that.

71
00:04:33.585 --> 00:04:38.385
And then I'm saving a reference
to that object in a variable.

72
00:04:38.385 --> 00:04:43.995
If I create another variable,
&gt;&gt; Maximiliano Firtman: And

73
00:04:43.995 --> 00:04:47.027
assign it with the same value.

74
00:04:47.027 --> 00:04:49.427
Now, how many objects do I have?

75
00:04:51.587 --> 00:04:52.477
One.

76
00:04:52.477 --> 00:04:54.037
How many references?

77
00:04:54.037 --> 00:04:54.537
Two.

78
00:04:55.767 --> 00:05:00.943
I have two variables pointing to the same
object because I didn't clone the object.

79
00:05:00.943 --> 00:05:03.313
I'm just having another reference.

80
00:05:03.313 --> 00:05:04.854
Then I can have an array of objects.

81
00:05:08.877 --> 00:05:11.979
&gt;&gt; Maximiliano Firtman: And
now how many objects do I have?

82
00:05:11.979 --> 00:05:14.423
Well, the array is another object,
but don't count the array.

83
00:05:15.793 --> 00:05:16.893
It's still one.

84
00:05:16.893 --> 00:05:17.629
How many reference?

85
00:05:20.138 --> 00:05:21.031
&gt;&gt; Maximiliano Firtman: How
many references?

86
00:05:21.031 --> 00:05:21.592
Four.

87
00:05:23.382 --> 00:05:26.942
There are four references
pointing to the same object.

88
00:05:26.942 --> 00:05:34.922
We have object variable of two and then
we have array sub zero and array sub one.

89
00:05:34.922 --> 00:05:38.072
All of them pointing to the same object,
okay?

90
00:05:38.072 --> 00:05:41.403
Well, all these references
are known as strong references.

91
00:05:43.123 --> 00:05:45.473
So why they are strong?

92
00:05:45.473 --> 00:05:47.588
What happens if I say
objects equals to null?

93
00:05:53.196 --> 00:05:57.524
&gt;&gt; Maximiliano Firtman: What happens now
&gt;&gt; Maximiliano Firtman: About our

94
00:05:57.524 --> 00:05:59.568
countings here?

95
00:05:59.568 --> 00:06:02.485
How many objects do I have here,
one or zero?

96
00:06:02.485 --> 00:06:05.411
Am I deleting the object or not?

97
00:06:05.411 --> 00:06:06.467
&gt;&gt; Speaker 3: I believe it's zero.

98
00:06:06.467 --> 00:06:09.636
&gt;&gt; Maximiliano Firtman: Zero,
do you all agree?

99
00:06:12.410 --> 00:06:14.152
&gt;&gt; Maximiliano Firtman: Interesting.

100
00:06:14.152 --> 00:06:17.661
Actually, I'm saying equals to null,
which seems like,

101
00:06:17.661 --> 00:06:21.251
yeah, I'm deleting the object,
but that's not the case.

102
00:06:21.251 --> 00:06:26.386
I'm saying that now the object
variable is pointing to no object.

103
00:06:28.516 --> 00:06:31.086
Okay, so the object is still there.

104
00:06:31.086 --> 00:06:38.066
And now I have one reference less
than before, I have three references.

105
00:06:38.066 --> 00:06:43.275
If I now say object two equals to null,
then I have two references.

106
00:06:44.325 --> 00:06:49.318
Now, if I say array sub
zero equals null and

107
00:06:49.318 --> 00:06:52.509
array sub one equals null,

108
00:06:52.509 --> 00:06:58.185
now I have zero references to that object.

109
00:06:58.185 --> 00:07:03.087
So that object, maybe it's still in
memory, but its marked us, you know what,

110
00:07:03.087 --> 00:07:06.119
no one is pointing at you anymore.

111
00:07:06.119 --> 00:07:11.179
So you're a candidate for
releasing the memory.

112
00:07:11.179 --> 00:07:15.419
And there is a process known as a garbage
collector in JavaScript as well.

113
00:07:15.419 --> 00:07:18.976
We don't typically work with it,
it's there.

114
00:07:18.976 --> 00:07:24.032
That it's going through the memory,
looking for those objects that don't

115
00:07:24.032 --> 00:07:29.656
have any strong reference and they going
to delete the object at that moment, okay?

116
00:07:29.656 --> 00:07:34.384
So you said zero objects because
you are thinking on this,

117
00:07:34.384 --> 00:07:37.096
which is not totally incorrect.

118
00:07:37.096 --> 00:07:43.766
So when you have this thing, Initially,
you have one object and one reference.

119
00:07:43.766 --> 00:07:47.796
When you assign null,
then you're removing the reference, and

120
00:07:47.796 --> 00:07:51.616
because of that,
you are probably removing the object soon.

121
00:07:53.516 --> 00:07:58.566
But if you have other references to that,
you have more strong references.

122
00:07:58.566 --> 00:07:59.418
Okay, make sense?

123
00:07:59.418 --> 00:08:02.182
That's the idea of a strong reference.

124
00:08:02.182 --> 00:08:06.742
Now we will get into a weak reference,
a weak set.

125
00:08:07.892 --> 00:08:09.952
So now let's create a new weak set.

126
00:08:09.952 --> 00:08:13.662
Let me go back here to that object.

127
00:08:15.172 --> 00:08:20.113
So now I'm going to create a new weak set,
let's say WeakSet equals to,

128
00:08:20.113 --> 00:08:22.955
and I'm going to add that object, okay?

129
00:08:25.439 --> 00:08:26.463
&gt;&gt; Maximiliano Firtman: In fact,
let's do this.

130
00:08:26.463 --> 00:08:30.074
Let's create a set and
a weak set both here.

131
00:08:33.653 --> 00:08:38.104
&gt;&gt; Maximiliano Firtman: So
I have S and WS.

132
00:08:38.104 --> 00:08:43.705
So right now,
we have one object that was created here.

133
00:08:43.705 --> 00:08:46.745
Remember, this is where we
create the object, not here.

134
00:08:46.745 --> 00:08:48.675
This is a reference, not the object.

135
00:08:48.675 --> 00:08:52.921
The object is here, and
then we have two references, but

136
00:08:52.921 --> 00:08:56.205
right now, we have two strong references.

137
00:08:57.205 --> 00:09:01.895
Again, if I delete the object with, well,
i thought I was deleting the object.

138
00:09:03.105 --> 00:09:06.579
If I assign null to the object,
okay, actually,

139
00:09:06.579 --> 00:09:12.225
I have three strong references and
now I have two strong references.

140
00:09:12.225 --> 00:09:13.785
Why three before?

141
00:09:13.785 --> 00:09:16.795
Without this we have three object.

142
00:09:16.795 --> 00:09:21.658
Then the set has a reference inside and
the WeakSet or WS has another inside.

143
00:09:22.938 --> 00:09:26.689
But now WeakSet,
if I use the WeakSet constructor and

144
00:09:26.689 --> 00:09:30.868
not the Set constructor,
will not add a strong reference.

145
00:09:32.598 --> 00:09:33.458
It's only two.

146
00:09:35.958 --> 00:09:39.969
If I remove the set and
I just stay with the WeakSet,

147
00:09:39.969 --> 00:09:43.762
the WeakSet is not adding
a strong reference.

148
00:09:43.762 --> 00:09:47.393
It has a reference, but
it's known as a weak reference.

149
00:09:50.279 --> 00:09:52.324
&gt;&gt; Maximiliano Firtman: So it's weak.

150
00:09:52.324 --> 00:09:55.801
That means that if I delete the object,
so it's like saying this,

151
00:09:55.801 --> 00:09:58.966
okay, give me a reference to the object,
but you know what,

152
00:09:58.966 --> 00:10:02.368
I'm not going to get
responsible of that object.

153
00:10:02.368 --> 00:10:06.068
So if whoever is creating that object,
deletes that object, I don't care.

154
00:10:06.068 --> 00:10:07.828
I'm not going to stay with it, okay?

155
00:10:07.828 --> 00:10:09.948
I'm not responsible of that object.

156
00:10:09.948 --> 00:10:15.798
So now if I say object equals null,
I have zero strong references.

157
00:10:15.798 --> 00:10:19.682
And because I don't have more references,
I don't have the object.

158
00:10:19.682 --> 00:10:21.852
I still have a weak reference.

159
00:10:21.852 --> 00:10:25.612
What happens if you try to access
that object at that point?

160
00:10:25.612 --> 00:10:29.932
It's not gonna be there because
it was already garbage collected.

161
00:10:29.932 --> 00:10:33.192
You don't get a runtime exception,
it's just null.

162
00:10:35.132 --> 00:10:41.340
So the weak set will not keep the object
alive if the rest of the program,

163
00:10:41.340 --> 00:10:47.620
the rest of your software,
is not using the object anymore, okay?

164
00:10:47.620 --> 00:10:48.450
That makes sense?

165
00:10:49.950 --> 00:10:52.650
And also,
there is a weak map with the same idea.

166
00:10:52.650 --> 00:10:56.200
So we have a set and
a map that can be strong or weak.

167
00:10:56.200 --> 00:11:01.951
And one important thing here is
that weak set only accepts objects.

168
00:11:03.351 --> 00:11:07.771
So they cannot accept numbers or
Booleans, because they're not objects.

169
00:11:07.771 --> 00:11:09.904
They don't have strong references.

