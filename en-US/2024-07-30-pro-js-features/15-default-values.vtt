WEBVTT

1
00:00:00.110 --> 00:00:02.786
&gt;&gt; Maximiliano Firtman: And the last
part that I have here that is actually

2
00:00:02.786 --> 00:00:07.050
pretty straightforward and quickly
on this ES6 recap is default values.

3
00:00:07.050 --> 00:00:09.420
It's actually pretty simple.

4
00:00:09.420 --> 00:00:14.261
And probably, you thought that it was
part of JavaScript since the beginning,

5
00:00:14.261 --> 00:00:15.280
but it wasn't.

6
00:00:15.280 --> 00:00:20.639
Is that, for example, in this case, I
have this function that calculates a tax,

7
00:00:20.639 --> 00:00:25.392
it receives a price and a tax, and
then it calculates price with the tax.

8
00:00:25.392 --> 00:00:27.996
And what happens if I
don't define the tax?

9
00:00:27.996 --> 00:00:32.958
As I mentioned before, arguments in
JavaScript are actually not mandatory.

10
00:00:32.958 --> 00:00:37.342
I mean, some people don't know that when
you, I mean, I have this calculateTax

11
00:00:37.342 --> 00:00:42.283
function, that do you know that I can
execute the function without any value?

12
00:00:42.283 --> 00:00:44.093
That's not the syntax or runtime error.

13
00:00:45.603 --> 00:00:50.179
So if I have a function declared with two
arguments, I can call that function with

14
00:00:50.179 --> 00:00:55.183
no arguments, or with 1 argument,
with 2, or with 1,000 arguments.

15
00:00:55.183 --> 00:00:58.940
It doesn't matter for JavaScript because

16
00:00:58.940 --> 00:01:03.331
the arguments are actually
kind of syntax sugar.

17
00:01:03.331 --> 00:01:07.110
It's always an array of
data that I receive.

18
00:01:07.110 --> 00:01:11.940
So if you wanna reinforce that, that's
why a lot of developers like TypeScript,

19
00:01:11.940 --> 00:01:16.910
because the TypeScript compiler will
actually give you an error, say, hey, hey,

20
00:01:16.910 --> 00:01:19.990
no, no, no,
calculateTax needs two arguments, and

21
00:01:19.990 --> 00:01:22.098
you didn't pass those arguments.

22
00:01:22.098 --> 00:01:26.701
And of course, you can get some warning
from linters in JavaScript as well.

23
00:01:26.701 --> 00:01:30.768
But it's perfectly fine from
a JavaScript engine point of view.

24
00:01:30.768 --> 00:01:35.731
So what happens if I do have, for
example, in this second example,

25
00:01:35.731 --> 00:01:39.230
second console.log,
I do have a price but not a tax?

26
00:01:39.230 --> 00:01:42.477
Well, you check the undefined value for

27
00:01:42.477 --> 00:01:48.029
those variables that you define and
you set the value, for example.

28
00:01:48.029 --> 00:01:52.840
Well, now we can simplify this
just by setting a default value.

29
00:01:52.840 --> 00:01:56.369
So then you don't need this,
and it's cleaner.

30
00:01:56.369 --> 00:01:59.426
Okay, from ES6, we have default values.

31
00:01:59.426 --> 00:02:01.625
But anyway, it's still the same.

32
00:02:01.625 --> 00:02:04.195
If I don't pass the price, it works.

33
00:02:04.195 --> 00:02:05.995
I mean, if I run this, it works.

34
00:02:05.995 --> 00:02:06.575
I don't see any.

35
00:02:06.575 --> 00:02:08.995
Of course,
what happens if I do console.log?

36
00:02:08.995 --> 00:02:13.746
Well, it will do undefined plus
undefined multiplied by 0.2.

37
00:02:13.746 --> 00:02:17.025
Because this one has a default value,
this one will become undefined.

38
00:02:18.855 --> 00:02:20.972
If I set also default.

39
00:02:20.972 --> 00:02:24.229
But you, well,
at least it's not undefined.

40
00:02:24.229 --> 00:02:26.882
The answer will be zero, maybe.

41
00:02:26.882 --> 00:02:33.286
But you don't need to define default
values for all the arguments.

42
00:02:33.286 --> 00:02:35.389
Okay, make sense?

43
00:02:35.389 --> 00:02:43.619
Cool, well, that's for
now, for the ES6 part.

44
00:02:43.619 --> 00:02:49.044
We will see more on ES6 with collections,
with async operations, the part

45
00:02:49.044 --> 00:02:54.914
that we haven't seen, but it's time to
start talking about what's after ES6.

