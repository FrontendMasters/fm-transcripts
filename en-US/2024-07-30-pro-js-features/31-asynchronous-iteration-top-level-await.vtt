WEBVTT

1
00:00:00.000 --> 00:00:04.694
&gt;&gt; Maximiliano Firtman: Async iteration,
this is actually, again, not a big deal,

2
00:00:04.694 --> 00:00:08.588
but there are not so
many direct use cases for this.

3
00:00:08.588 --> 00:00:11.831
Something I will say,
you will use this for that.

4
00:00:11.831 --> 00:00:18.620
But now, you can have a generator
that is async as well.

5
00:00:18.620 --> 00:00:22.310
So in this case, you yield,
yield, yield, and

6
00:00:22.310 --> 00:00:27.634
then when you do this, you can use a for
await, and that's a new part.

7
00:00:27.634 --> 00:00:31.993
So it's a for where on every iteration,

8
00:00:31.993 --> 00:00:36.878
it will have an await,
does that make sense?

9
00:00:36.878 --> 00:00:41.847
So it's an async for,
that kind of the idea.

10
00:00:41.847 --> 00:00:47.505
So, in this case, it's giving you a,
b and c, nothing really fancy, okay?

11
00:00:47.505 --> 00:00:51.501
So it's actually executing
the generator until it's done.

12
00:00:51.501 --> 00:00:57.375
Of course, when there is no more code,
the generator returns that it's I'm done.

13
00:00:57.375 --> 00:01:00.693
Okay, I'm done, and
because I'm done the for...of finishes.

14
00:01:00.693 --> 00:01:05.716
Again, it's not something that
you will use on a daily basis for

15
00:01:05.716 --> 00:01:11.774
very specific purposes, but again,
it's something that's there anyway.

16
00:01:11.774 --> 00:01:17.526
And now, as I mentioned before,
we do have a top-level await.

17
00:01:17.526 --> 00:01:21.188
And this is new, okay,
the top-level level await is new.

18
00:01:21.188 --> 00:01:27.095
It's from 2022, and the idea is that
you can do something like that,

19
00:01:27.095 --> 00:01:32.052
like going and fetch some data and
use await directly in the top

20
00:01:32.052 --> 00:01:36.267
level without a function,
but there is a big catch.

21
00:01:36.267 --> 00:01:38.337
If I run this, it's not gonna work.

22
00:01:38.337 --> 00:01:40.856
It say, come on, why?

23
00:01:40.856 --> 00:01:46.699
Because it works only in
the bodies of modules.

24
00:01:46.699 --> 00:01:52.562
So I can do this, it works,
but only in a module.

25
00:01:52.562 --> 00:01:55.676
So for example here, the script3,

26
00:01:55.676 --> 00:01:59.902
I can just put that here
because that's a module.

27
00:01:59.902 --> 00:02:04.749
Remember, when it's a module, it depends
if it's Node.js or if it's a browser,

28
00:02:04.749 --> 00:02:06.811
but that script should be a module.

29
00:02:06.811 --> 00:02:10.944
If you do that,
then you can call an API or

30
00:02:10.944 --> 00:02:14.602
a function that returns a promise.

31
00:02:14.602 --> 00:02:19.240
You can use await for that without async,
without an async function.

32
00:02:19.240 --> 00:02:23.945
If you're interested in why that
await is not anywhere else,

33
00:02:23.945 --> 00:02:27.030
because it's kind of weird, there is.

34
00:02:27.030 --> 00:02:35.146
If I remember correctly, it's a full
stack conference in London, 2016, okay?

35
00:02:35.146 --> 00:02:38.780
Remember that, so
I was speaking there at that conference.

36
00:02:38.780 --> 00:02:44.016
And there was one talk of the guy
that submitted the proposal,

37
00:02:44.016 --> 00:02:49.452
top-level await to the ECMAScript process,
because he wanted

38
00:02:49.452 --> 00:02:54.906
to do async await without async
directly like this everywhere.

39
00:02:54.906 --> 00:02:58.415
And he was actually talking
about the experience of what and

40
00:02:58.415 --> 00:03:01.516
how the browser's were
actually reacting to that.

41
00:03:01.516 --> 00:03:05.190
And they were actually saying, we cannot
do that, and they will explain why bla,

42
00:03:05.190 --> 00:03:05.732
bla, bla.

43
00:03:05.732 --> 00:03:10.091
And the final solution
to that was to change

44
00:03:10.091 --> 00:03:13.974
the proposal to work only on modules.

45
00:03:13.974 --> 00:03:20.616
So they could do that on modules,
but not for the global context.

46
00:03:20.616 --> 00:03:25.981
It has to do with the synchronous
blocking the thread and so on.

47
00:03:25.981 --> 00:03:31.350
There is another exception to that,
but it's just for developers, for us.

48
00:03:31.350 --> 00:03:32.139
It's a console.

49
00:03:32.139 --> 00:03:38.218
So I can do await
fetch./labs/labs.json and it works.

50
00:03:38.218 --> 00:03:39.758
I'm awaiting for it.

51
00:03:39.758 --> 00:03:43.887
And I can even await now for

52
00:03:43.887 --> 00:03:47.465
that and call .json.

53
00:03:47.465 --> 00:03:51.116
So this is nested await,
and there is no async, okay?

54
00:03:51.116 --> 00:03:56.785
And, oops, I have a problem somewhere.

55
00:03:56.785 --> 00:03:58.489
I think, yeah, you're right.

56
00:03:58.489 --> 00:03:59.721
[INAUDIBLE].

57
00:03:59.721 --> 00:04:02.302
&gt;&gt; Maximiliano Firtman: Is this one, okay?

58
00:04:02.302 --> 00:04:07.519
There, so I'm getting all the chapters
with all the lessons there and

59
00:04:07.519 --> 00:04:11.599
the file that needs to be
loaded with all the code labs.

60
00:04:11.599 --> 00:04:18.256
And so you can use top-level await in
the global context in dev tools.

61
00:04:18.256 --> 00:04:22.368
That works in Firefox, Safari,
and Chrome, and Chromium.

62
00:04:22.368 --> 00:04:27.363
But it's just for
us to work better while debugging,

63
00:04:27.363 --> 00:04:32.028
but it actually is not
working really in the code.

64
00:04:32.028 --> 00:04:35.071
So if I copy this and
paste this in the JavaScript,

65
00:04:35.071 --> 00:04:37.761
it's not gonna work unless it's a module.

