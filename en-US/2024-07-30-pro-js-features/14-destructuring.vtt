WEBVTT

1
00:00:00.229 --> 00:00:04.125
&gt;&gt; Maximiliano Firtman: Destructuring,
this actually is something that you have

2
00:00:04.125 --> 00:00:08.340
probably been using if you're
using a framework or a library,

3
00:00:08.340 --> 00:00:13.364
mostly if you're using React, for
sure you have be using destructuring.

4
00:00:13.364 --> 00:00:19.222
But this is an example that
gets really complicated.

5
00:00:19.222 --> 00:00:20.877
So, what's the idea here?

6
00:00:20.877 --> 00:00:24.811
So I have this object,
data, that I have, okay,

7
00:00:24.811 --> 00:00:29.422
and I wanna extract data from there,
creating variable.

8
00:00:29.422 --> 00:00:33.552
The standard way to do
that is to start using

9
00:00:33.552 --> 00:00:38.275
the dot syntax until we
get into the data we want.

10
00:00:38.275 --> 00:00:42.741
So, for example, for the primarySkill,

11
00:00:42.741 --> 00:00:49.822
that is the first skill that we
have is data.skills sub 0, right?

12
00:00:49.822 --> 00:00:56.811
Well, is there any way to
create these five variables but

13
00:00:56.811 --> 00:01:02.353
just without in just
one expression at once?

14
00:01:02.353 --> 00:01:07.476
For that,
we can use the destructuring operator,

15
00:01:07.476 --> 00:01:12.136
but let's see first
a simple example of that.

16
00:01:12.136 --> 00:01:18.530
So, probably you have seen this before,
it's being used a lot in functions.

17
00:01:18.530 --> 00:01:23.750
For example,
if I have a function that will operate and

18
00:01:23.750 --> 00:01:27.051
receives operands, let's say.

19
00:01:27.051 --> 00:01:30.335
And let's say that it returns,

20
00:01:30.335 --> 00:01:35.078
let's say some operands.a, operands.b,

21
00:01:35.078 --> 00:01:40.183
and then I can call some
with something like this,

22
00:01:40.183 --> 00:01:44.701
a, oops, 5, b10, okay, that's it.

23
00:01:44.701 --> 00:01:47.244
I think we have this example, so,

24
00:01:47.244 --> 00:01:51.466
I'm passing an object,
the object will contain a and b.

25
00:01:51.466 --> 00:01:56.449
So here I received the object, and
then I say operands.a, operands.b,

26
00:01:56.449 --> 00:01:59.148
I think it's pretty straightforward.

27
00:01:59.148 --> 00:02:04.479
Well, instead instead of doing that,

28
00:02:04.479 --> 00:02:08.519
I can destructure this object

29
00:02:08.519 --> 00:02:13.377
directly in the argument section.

30
00:02:13.377 --> 00:02:19.018
For that I will use their calibraces and
say a and

31
00:02:19.018 --> 00:02:27.199
b, and this is going to destructure
that object into two variables,

32
00:02:27.199 --> 00:02:31.730
a and b, taking the a and the b values.

33
00:02:31.730 --> 00:02:36.447
This should work,
I'm not using console.log, you see, but

34
00:02:36.447 --> 00:02:40.098
that works,
that the destructuring operator.

35
00:02:40.098 --> 00:02:46.244
That also works in case I have an array,
so if I have an array,

36
00:02:46.244 --> 00:02:52.515
and I need to destructure the first
two elements of the array,

37
00:02:52.515 --> 00:02:57.360
I use square brackets to
destructure an array.

38
00:02:57.360 --> 00:03:00.970
Then position 0 goes
to the first variable,

39
00:03:00.970 --> 00:03:05.531
position 1 goes to the second variable and
so on, okay?

40
00:03:05.531 --> 00:03:07.631
Probably you have to use this.

41
00:03:07.631 --> 00:03:12.349
So, but also we can make things really,
really complicated,

42
00:03:12.349 --> 00:03:18.061
because we can actually create
the variable and say, well, you know what?

43
00:03:18.061 --> 00:03:20.286
I wanna extract this is an option, okay?

44
00:03:20.286 --> 00:03:25.122
So, first I'm going to use this syntax,
it can be a variable or

45
00:03:25.122 --> 00:03:27.966
a constant or a let, it's up to you.

46
00:03:27.966 --> 00:03:33.766
I'm using now the object syntax,
but before the equals on the left,

47
00:03:33.766 --> 00:03:38.070
if you have it at the right,
you are creating data.

48
00:03:38.070 --> 00:03:43.436
If you're having to the left, you are
creating variables based on a structure.

49
00:03:43.436 --> 00:03:49.684
So I say I want the title,
then I want primarySkill,

50
00:03:49.684 --> 00:03:56.502
but I want primarySkill to
take from a skill.0, okay?

51
00:03:56.502 --> 00:04:02.739
So I will say,
from skills I wanna take the primarySkill,

52
00:04:02.739 --> 00:04:06.316
okay, and I'm going to take 0.

53
00:04:06.316 --> 00:04:08.082
How can you do that?

54
00:04:08.082 --> 00:04:13.474
How can I take skills
sub 0 using this syntax,

55
00:04:13.474 --> 00:04:16.522
using this structuring?

56
00:04:16.522 --> 00:04:19.450
What do you think, does anyone know?

57
00:04:19.450 --> 00:04:23.283
So I mean, if I'm using a skills here,

58
00:04:23.283 --> 00:04:29.220
I'm getting the whole array
not just the first one, right?

59
00:04:32.230 --> 00:04:37.089
I can continue working with this,
and I can say from a skills,

60
00:04:37.089 --> 00:04:42.151
I want the first argument and
I want to call this primary scalar.

61
00:04:42.151 --> 00:04:46.281
So, he's kind of creating a JSON, but

62
00:04:46.281 --> 00:04:51.911
at the left side of the the assignment,
to be honest,

63
00:04:51.911 --> 00:04:58.230
I haven't seen this in a while
in real project a lot, okay?

64
00:04:58.230 --> 00:05:03.787
Typically is just a variable,
not the whole structure, okay?

65
00:05:03.787 --> 00:05:08.558
If you click here, solution, okay,
you will get how it looks like, okay?

66
00:05:08.558 --> 00:05:13.812
This is the final solution,
it's just the same output,

67
00:05:13.812 --> 00:05:17.314
but now I'm not creating variables,

68
00:05:17.314 --> 00:05:21.922
I have a full structure at
the right of the equals.

69
00:05:21.922 --> 00:05:24.979
What I'm creating,
this is creating variables, okay?

70
00:05:24.979 --> 00:05:27.843
I'm creating the title variable,

71
00:05:27.843 --> 00:05:33.475
then I'm creating the primarySkill
variable with the first skill and

72
00:05:33.475 --> 00:05:38.544
I'm creating other skills with
the rest of the skills, okay?

73
00:05:38.544 --> 00:05:41.255
I'm creating then experience and

74
00:05:41.255 --> 00:05:46.124
location variables with
the contents of the details object.

75
00:05:46.124 --> 00:05:51.227
And then I have these separate
variables based on the structure,

76
00:05:51.227 --> 00:05:56.811
I'm destructuring that object with
the raising side into variables.

77
00:05:59.625 --> 00:06:02.088
&gt;&gt; Maximiliano Firtman: Okay, so
it can get really complex, okay,

78
00:06:02.088 --> 00:06:03.960
here you have an example of that.

79
00:06:03.960 --> 00:06:09.981
But most of the time,
I think you don't get

80
00:06:09.981 --> 00:06:15.510
too deep in the levels of data you have.

81
00:06:15.510 --> 00:06:19.326
You have an object with arrays and
objects,

82
00:06:19.326 --> 00:06:24.596
you can get deeper and
extract variables in one expression.

83
00:06:24.596 --> 00:06:30.275
This is only one expression, this is one
line, actually, that's the advantage okay?

84
00:06:30.275 --> 00:06:33.824
So, you semantically
extract all the data and

85
00:06:33.824 --> 00:06:39.832
assign the data only the data you want
to your variable in just one expression.

86
00:06:42.053 --> 00:06:44.013
&gt;&gt; Maximiliano Firtman: It's like a map,
okay, and

87
00:06:44.013 --> 00:06:47.862
you are mapping what you want
from the data into Bibles.

88
00:06:47.862 --> 00:06:52.512
&gt;&gt; Student: Someone said that they've
seen a couple of code bases where

89
00:06:52.512 --> 00:06:57.170
the overuse of this makes it
pretty difficult to work with.

90
00:06:57.170 --> 00:06:58.435
&gt;&gt; Maximiliano Firtman: Yeah,
the permanent that it

91
00:06:58.435 --> 00:07:00.076
has is that it's difficult to read.

92
00:07:00.076 --> 00:07:03.686
Even if you read this example,
you read that and

93
00:07:03.686 --> 00:07:07.849
it takes some seconds to
understand what's going on.

94
00:07:07.849 --> 00:07:11.204
&gt;&gt; Student: Especially if you have
type annotations in there as well.

95
00:07:11.204 --> 00:07:16.143
&gt;&gt; Maximiliano Firtman: Well, if you have
typescript here or type annotations with

96
00:07:16.143 --> 00:07:21.994
other frameworks that you can type
on comments, yeah, it gets wild.

97
00:07:21.994 --> 00:07:25.819
So I think that, I mean,
even if the syntax is there,

98
00:07:25.819 --> 00:07:30.921
I think it's becoming an anti pattern,
something that you shouldn't

99
00:07:30.921 --> 00:07:36.463
be doing because it's actually making
your code worse, not better, okay?

100
00:07:36.463 --> 00:07:39.207
But for something simple is fine for

101
00:07:39.207 --> 00:07:43.245
arguments is being used a lot for
something simple.

102
00:07:43.245 --> 00:07:47.177
I mean, if you take the skills you say,
well, I want the the first few skills.

103
00:07:47.177 --> 00:07:52.307
So I say, well, let's take the firstSkill,
the secondSkill,

104
00:07:52.307 --> 00:07:58.106
or taking from data those skills,
I mean I think it's straightforward.

105
00:07:58.106 --> 00:08:02.874
I mean, if you read that it's
straightforward in creating two constant,

106
00:08:02.874 --> 00:08:08.096
two variables, in this case, the
firstSkill and secondSkills, they're going

107
00:08:08.096 --> 00:08:13.484
to be the skills on position 0, skills
on position 1, that's straightforward.

108
00:08:13.484 --> 00:08:17.728
But when you start doing this,
I mean, it's fine, it works,

109
00:08:17.728 --> 00:08:21.504
but I think it's against clarity,
if you want, okay?

