WEBVTT

1
00:00:00.370 --> 00:00:02.859
&gt;&gt; Maximiliano Firtman: Import Metadata,
this is also something really simple,

2
00:00:02.859 --> 00:00:04.210
really, really simple.

3
00:00:04.210 --> 00:00:07.660
This is also something that
it will work only in modules.

4
00:00:08.790 --> 00:00:13.760
It will actually give you the URL of
the current module within a module.

5
00:00:14.770 --> 00:00:18.886
Just that, it's import.meta.url.

6
00:00:18.886 --> 00:00:22.649
Yeah, there is other properties
that's not really so useful, but

7
00:00:22.649 --> 00:00:26.821
it's just the URL is the only useful
property that you will probably need.

8
00:00:29.259 --> 00:00:32.469
&gt;&gt; Maximiliano Firtman: Pretty simple,
this is 2020.

9
00:00:32.469 --> 00:00:38.000
Now, tagged templates, it's something better.

10
00:00:38.000 --> 00:00:40.910
So it's from ES6, by the way, but

11
00:00:40.910 --> 00:00:46.933
I think it's one of the most underused
features of ECMAScript these days.

12
00:00:46.933 --> 00:00:48.827
Remember templates?

13
00:00:48.827 --> 00:00:53.424
Templates were the one that we used
the backtick, template strings, okay?

14
00:00:53.424 --> 00:00:54.937
We were using the backtick.

15
00:00:54.937 --> 00:00:58.870
Well, if you create a function,

16
00:00:58.870 --> 00:01:03.227
the function will receive an array.

17
00:01:03.227 --> 00:01:08.091
The thing that is weird,
we receive an array of strings

18
00:01:08.091 --> 00:01:13.072
as the first argument, and
then N arguments as values.

19
00:01:14.452 --> 00:01:19.040
For example, if I have, this is my string,

20
00:01:19.040 --> 00:01:23.266
let me try to get out of this for
a second.

21
00:01:23.266 --> 00:01:24.777
So this is my string, okay?

22
00:01:24.777 --> 00:01:29.997
Hello, values,
the strings array will actually be and

23
00:01:29.997 --> 00:01:32.782
now you'll understand why.

24
00:01:32.782 --> 00:01:37.019
And a string with Hello, "," and

25
00:01:37.019 --> 00:01:40.962
another string with "!".

26
00:01:40.962 --> 00:01:42.082
That's the first argument.

27
00:01:43.392 --> 00:01:45.282
The second argument is the value.

28
00:01:46.752 --> 00:01:50.321
So let's say we have Hello,

29
00:01:50.321 --> 00:01:54.938
${first name} ${last name}.

30
00:01:54.938 --> 00:01:57.522
This is the string in the template.

31
00:01:58.710 --> 00:02:04.876
The string array will be Hello,
"," then space,

32
00:02:04.876 --> 00:02:10.217
this is a space, and
then exclamation mark.

33
00:02:10.217 --> 00:02:16.485
Then we'll receive the firstname and
the lastname,

34
00:02:16.485 --> 00:02:21.511
not in an array, just as other arguments.

35
00:02:21.511 --> 00:02:23.246
Make sense?

36
00:02:23.246 --> 00:02:24.964
Yeah, kind of.

37
00:02:24.964 --> 00:02:29.416
What if I don't have
the exclamation mark at the end?

38
00:02:29.416 --> 00:02:30.844
You receive an empty string.

39
00:02:32.943 --> 00:02:35.184
&gt;&gt; Maximiliano Firtman: And
give me a second for that.

40
00:02:35.184 --> 00:02:40.960
It's guaranteed that the length
of the first argument,

41
00:02:40.960 --> 00:02:44.930
so the length of the strings argument,

42
00:02:44.930 --> 00:02:49.896
it's one more than
the rest of the arguments.

43
00:02:49.896 --> 00:02:54.136
If I have two arguments here,
I have three elements in the array.

44
00:02:55.206 --> 00:03:02.384
At this point, some of you will be really
confused about what's going on here, okay?

45
00:03:02.384 --> 00:03:07.347
But the idea is that we are going
to receive the string and

46
00:03:07.347 --> 00:03:10.946
we can interpolate what we want inside.

47
00:03:10.946 --> 00:03:14.922
For example, by the way,
we can see this in action.

48
00:03:14.922 --> 00:03:16.921
We can run this.

49
00:03:16.921 --> 00:03:18.632
By the way, yeah, you're right.

50
00:03:18.632 --> 00:03:21.172
This is not real code.

51
00:03:21.172 --> 00:03:25.462
So the length of the string is 2,
the value's length is 1.

52
00:03:25.462 --> 00:03:28.472
By the way, because this is not an array,

53
00:03:28.472 --> 00:03:33.002
I can convert it into array
using the rest operator.

54
00:03:33.002 --> 00:03:35.811
That's really simpler to manage, okay?

55
00:03:35.811 --> 00:03:38.109
So that's why we have three dots.

56
00:03:38.109 --> 00:03:42.686
I'm converting the rest of
the arguments as an array.

57
00:03:42.686 --> 00:03:46.546
Now, going back to
the example I did before,

58
00:03:46.546 --> 00:03:51.634
here I will add another thing,
like Hello, ${value}.

59
00:03:51.634 --> 00:03:54.184
I will add another space, and

60
00:03:54.184 --> 00:03:57.822
I will say 5,
&gt;&gt; Maximiliano Firtman: Like that.

61
00:03:57.822 --> 00:04:01.496
Si if I run this, I have two values.

62
00:04:01.496 --> 00:04:02.176
Why two values?

63
00:04:02.176 --> 00:04:04.276
Because I have two interpolations.

64
00:04:04.276 --> 00:04:08.586
The values are the interpretations,
I will receive value and 5.

65
00:04:10.326 --> 00:04:16.376
And you always have before and
after and strings in the middle.

66
00:04:17.456 --> 00:04:18.976
That's why it's always plus 1.

67
00:04:20.336 --> 00:04:23.155
Makes sense?
So if you have one value,

68
00:04:23.155 --> 00:04:27.634
you have a string before and
a string after.

69
00:04:27.634 --> 00:04:32.424
If you have, let's say, two values, you
have one string before, one in the middle,

70
00:04:32.424 --> 00:04:33.596
one after.

71
00:04:33.596 --> 00:04:36.647
That's why we have three,
that's why it's always one more.

72
00:04:36.647 --> 00:04:41.731
You say, okay, but
why is this important, okay?

73
00:04:41.731 --> 00:04:45.595
Because you can do a lot
of stuff with this.

74
00:04:45.595 --> 00:04:48.426
And by the way,
how you can call the function, and

75
00:04:48.426 --> 00:04:51.731
this part is weird, I'm sorry about this.

76
00:04:51.731 --> 00:04:58.946
But you just put the name of the function
before the backtick with no parentheses.

77
00:04:58.946 --> 00:05:03.394
By the way, a function name can be
anything, it can be frontendmasters,

78
00:05:03.394 --> 00:05:05.006
whatever.

79
00:05:05.006 --> 00:05:11.236
Then you use that name before
the backtick, no parentheses.

80
00:05:11.236 --> 00:05:12.766
It's a weird syntax, okay?

81
00:05:13.996 --> 00:05:18.729
It competes as the weirdest
syntax with the hash for

82
00:05:18.729 --> 00:05:21.933
private properties, probably.

83
00:05:21.933 --> 00:05:28.128
So this is called the tagged template.

84
00:05:28.128 --> 00:05:31.218
It's a way that we have to process or

85
00:05:31.218 --> 00:05:36.475
post-process the string and
return something different.

86
00:05:36.475 --> 00:05:39.786
And by the way,
here I'm returning, for example,

87
00:05:39.786 --> 00:05:42.504
in this case, the string plus the values.

88
00:05:42.504 --> 00:05:49.073
But I can return anything, and I don't
need to return a string, by the way.

89
00:05:49.073 --> 00:05:55.538
I can return an array or an object with,
for example, the strings.

90
00:05:55.538 --> 00:06:00.443
Let's call this strings: strings.length,

91
00:06:00.443 --> 00:06:03.757
and values: values.length.

92
00:06:03.757 --> 00:06:05.224
So it's an object now.

93
00:06:05.224 --> 00:06:11.273
So I can console.log and
stringify the version of that result,

94
00:06:11.273 --> 00:06:14.191
and this is what I'm getting.

95
00:06:15.860 --> 00:06:20.687
&gt;&gt; Maximiliano Firtman: So I'm passing it
on a string and not getting a string back.

96
00:06:20.687 --> 00:06:21.347
I'm getting an object.

97
00:06:22.707 --> 00:06:27.947
So it's up to you,
what do you wanna do with this.

98
00:06:27.947 --> 00:06:29.857
You can return DOM elements.

99
00:06:31.237 --> 00:06:35.777
So you can parse a string and
return DOM elements instead of strings.

100
00:06:35.777 --> 00:06:37.512
You can do some kinds of JSX.

101
00:06:39.103 --> 00:06:42.015
In fact,
there are a couple of frameworks or

102
00:06:42.015 --> 00:06:46.199
micro-libraries out there that
will do something like this.

103
00:06:46.199 --> 00:06:48.263
Have you heard about HTMX?

104
00:06:49.943 --> 00:06:54.639
Well, they are taking advantage
of tagged templates to do stuff.

105
00:06:54.639 --> 00:06:59.221
I want you to create
a tagged template function,

106
00:06:59.221 --> 00:07:05.253
it can be called bold,
that will return every value we pass as b,

107
00:07:05.253 --> 00:07:09.274
and if it's a number, and as, actually,

108
00:07:09.274 --> 00:07:15.157
if it says italic,
it should be if it's something else.

109
00:07:15.157 --> 00:07:18.757
For example,
&gt;&gt; Maximiliano Firtman: If I pass,

110
00:07:18.757 --> 00:07:22.266
let me show you some examples
of what I'm expecting.

111
00:07:22.266 --> 00:07:25.426
So you pass bold' ' and

112
00:07:25.426 --> 00:07:30.798
you said my name is, and you pass a name,

113
00:07:30.798 --> 00:07:35.875
my age is, and you pass an age, okay?

114
00:07:35.875 --> 00:07:40.635
And let's say that name

115
00:07:40.635 --> 00:07:45.634
is Maria and age is 40.

116
00:07:45.634 --> 00:07:49.701
So if you console.log this,

117
00:07:49.701 --> 00:07:53.929
what I want to see is my name is,

118
00:07:53.929 --> 00:08:00.287
the name in italic, okay, like HTML, okay?

119
00:08:00.287 --> 00:08:06.500
And it will say, Maria,
&gt;&gt; Maximiliano Firtman: My age is 40.

120
00:08:08.548 --> 00:08:11.577
&gt;&gt; Maximiliano Firtman: So that's
one example of how you can use this,

121
00:08:11.577 --> 00:08:12.677
one use case.

122
00:08:12.677 --> 00:08:17.326
You can use it to create
formatted innerHTML strings.

123
00:08:22.397 --> 00:08:24.498
&gt;&gt; Maximiliano Firtman: Okay,
so let's cover one solution.

124
00:08:24.498 --> 00:08:25.864
Of course, there are many solutions.

125
00:08:25.864 --> 00:08:30.201
And this is, I mean, it was just playing
a little bit with the collections, okay?

126
00:08:30.201 --> 00:08:33.312
This is one solution,
not probably the most efficient one, but

127
00:08:33.312 --> 00:08:37.660
this is probably the one that you can
quickly understand when you look at it.

128
00:08:37.660 --> 00:08:40.128
So remember,
we receive an array of strings.

129
00:08:40.128 --> 00:08:45.539
And thanks to this operator, okay,
the rest operator, we are receiving

130
00:08:45.539 --> 00:08:51.210
also an array of values that has 1
element less than the strings values.

131
00:08:51.210 --> 00:08:55.381
So I'm iterating over the strings array.

132
00:08:55.381 --> 00:08:58.452
I'm not using let of
just to keep the index,

133
00:08:58.452 --> 00:09:02.523
so I can use the index on both
collections at the same time.

134
00:09:02.523 --> 00:09:08.187
And I started collecting
the final output in a string.

135
00:09:08.187 --> 00:09:12.645
Yeah, we can use an array,
we can use other ways to do this.

136
00:09:12.645 --> 00:09:15.745
And then I'm checking, of course,
if I'm not at the end,

137
00:09:15.745 --> 00:09:18.732
that means that I don't have a value for
the last string.

138
00:09:18.732 --> 00:09:23.104
So I'm adding the first
string plus the first value,

139
00:09:23.104 --> 00:09:26.516
the second string plus the second value.

140
00:09:26.516 --> 00:09:29.413
And remember,
it ends with a string without a value.

141
00:09:29.413 --> 00:09:32.490
And I'm checking the type of the value.

142
00:09:32.490 --> 00:09:36.279
If it's a number, I will use this one,
if not, I will use b.

143
00:09:36.279 --> 00:09:37.526
I mean, of course, it can be anything.

144
00:09:37.526 --> 00:09:38.344
I'm returning that.

145
00:09:38.344 --> 00:09:41.279
So then I'm calling that format,
but you can call it bold or

146
00:09:41.279 --> 00:09:44.816
wherever you wanna call that,
it doesn't matter, it's just a name.

147
00:09:44.816 --> 00:09:49.056
And then you can just call that.

148
00:09:49.056 --> 00:09:50.558
Remember, no parentheses.

149
00:09:50.558 --> 00:09:55.136
If you have parentheses, something
completely different will happen.

150
00:09:55.136 --> 00:09:57.818
Because some people say, but
it's just a parentheses.

151
00:09:57.818 --> 00:10:00.458
We can just add it and
it will make no noise.

152
00:10:00.458 --> 00:10:04.410
No, because if you add
parentheses to that,

153
00:10:04.410 --> 00:10:10.234
it will call the format function
as any other function execution,

154
00:10:10.234 --> 00:10:15.122
which means the whole string
will receive as strings and

155
00:10:15.122 --> 00:10:17.944
there will be no values, okay?

156
00:10:17.944 --> 00:10:25.385
So you shouldn't use those parentheses,
just to see that in action there.

157
00:10:25.385 --> 00:10:29.225
And remember, it's not just for
formatting strings.

158
00:10:29.225 --> 00:10:33.705
I mean, the input is always a string, but
you can do wherever you want as an output.

159
00:10:34.705 --> 00:10:38.791
You can go and
grab data from different sources and

160
00:10:38.791 --> 00:10:43.291
return objects based on that,
based on the string.

161
00:10:43.291 --> 00:10:47.761
So you can really do a lot
of weird stuff with that,

162
00:10:47.761 --> 00:10:53.626
just with a string and
interpolations within the string, okay?

163
00:10:53.626 --> 00:10:54.871
Makes sense?

164
00:10:54.871 --> 00:10:57.191
Do have any question on tagged templates?

165
00:10:57.191 --> 00:11:02.320
&gt;&gt; Student: This is a little general, but
in your opinion, what's the advantage of

166
00:11:02.320 --> 00:11:07.633
the tagged template feature versus
just a custom function that you write?

167
00:11:07.633 --> 00:11:10.585
&gt;&gt; Maximiliano Firtman: Well,
if you use a custom function in this case,

168
00:11:10.585 --> 00:11:15.409
you will have to parse the string manually
over regular expressions to actually

169
00:11:15.409 --> 00:11:20.161
extract these patterns within this string,
and it's done automatically for

170
00:11:20.161 --> 00:11:21.900
you with a tagged template.

171
00:11:21.900 --> 00:11:24.502
So I think that's the difference,

172
00:11:24.502 --> 00:11:28.851
that parsing the string to
match finding the decent spots.

173
00:11:29.891 --> 00:11:34.127
These interpolation spots will
probably take more time, so

174
00:11:34.127 --> 00:11:38.374
the developer experience is
better with tagged templates.

