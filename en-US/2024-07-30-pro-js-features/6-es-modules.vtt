WEBVTT

1
00:00:00.000 --> 00:00:04.216
&gt;&gt; Maximiliano Firtman: So let's make
a recap of ES6 again the version that most

2
00:00:04.216 --> 00:00:09.700
of you may be already comfortable with,
but these were the basic ideas.

3
00:00:09.700 --> 00:00:11.889
So it was one of the major upgrades for

4
00:00:11.889 --> 00:00:14.930
the language since
the beginning of the language.

5
00:00:14.930 --> 00:00:22.192
I would argue it's safe to use it on every
browser today, IE11, out of the equation.

6
00:00:22.192 --> 00:00:28.520
It included the class syntax for OOP, so
to create classes using the class keyword,

7
00:00:28.520 --> 00:00:34.513
blocks code variable definitions,
let and const mainly, ES modules, okay?

8
00:00:34.513 --> 00:00:39.707
I will do a quick recap in a sec of ES
modules, arrow functions, promises,

9
00:00:39.707 --> 00:00:44.420
something that we will cover later today,
and many more features.

10
00:00:44.420 --> 00:00:49.364
Some small features, some other
advanced features such as generators or

11
00:00:49.364 --> 00:00:54.949
regular expression additions that were
actually the first time that people coming

12
00:00:54.949 --> 00:00:59.913
from Java or C#, were not complaining so
much about JavaScript, okay?

13
00:00:59.913 --> 00:01:05.458
On ES5, when they realized there was
no way to create a class with the class

14
00:01:05.458 --> 00:01:11.109
syntax, they were really like annoyed
like, what the hell is this, okay?

15
00:01:11.109 --> 00:01:15.918
Well with ES6, okay, we have class,
okay, class extends, okay?

16
00:01:15.918 --> 00:01:22.099
So, we will leave some advance ES6
topics for later, organized by topics,

17
00:01:22.099 --> 00:01:26.568
okay, but I will cover now
the quick recap of modules and

18
00:01:26.568 --> 00:01:32.104
the basic stuff so we can set that
as a base for what's new after ES6.

19
00:01:32.104 --> 00:01:35.128
That's probably the most important for
today's workshop.

20
00:01:35.128 --> 00:01:37.154
So let's talk about modules.

21
00:01:37.154 --> 00:01:39.942
It's a standardized way to organize and

22
00:01:39.942 --> 00:01:43.306
reuse JavaScript code
across different files.

23
00:01:43.306 --> 00:01:48.721
Because before modules, we were using
different files in the browser at least,

24
00:01:48.721 --> 00:01:51.109
we were using different files, but

25
00:01:51.109 --> 00:01:54.470
everything was kind of
a mess in a global context.

26
00:01:54.470 --> 00:01:59.234
And now we can import, you can use
import and export statements for

27
00:01:59.234 --> 00:02:05.287
better modularity and maintainability in
fact, it's a design pattern to create.

28
00:02:05.287 --> 00:02:09.319
There is a design pattern
of creating modules for

29
00:02:09.319 --> 00:02:13.645
different things,
it can be per topic, modules for

30
00:02:13.645 --> 00:02:18.582
section, modules per architecture
patterns, and so on.

31
00:02:18.582 --> 00:02:22.352
So instead of creating one
large JavaScript file, or

32
00:02:22.352 --> 00:02:27.460
a lot of JavaScript files that are all
going to the same bag of variables,

33
00:02:27.460 --> 00:02:31.346
objects, and functions,
now we can create modules.

34
00:02:31.346 --> 00:02:37.347
So for example, typically on classic HTML,
if you have two JavaScripts,

35
00:02:37.347 --> 00:02:42.018
JavaScripts in your HTML you
can access every variable and

36
00:02:42.018 --> 00:02:48.424
every function of every script from any
other script, even from the main HTML.

37
00:02:48.424 --> 00:02:52.505
So if you have some JavaScript here,
you can actually read and

38
00:02:52.505 --> 00:02:56.116
access all the functions
defined on every script, and

39
00:02:56.116 --> 00:02:59.745
also from script 1 to script 2 and
vice versa, okay?

40
00:02:59.745 --> 00:03:02.224
Everything was going to the same bag.

41
00:03:02.224 --> 00:03:07.160
So, they use the same global context,
and one script can't include or

42
00:03:07.160 --> 00:03:11.064
load other scripts that
was another problem, okay?

43
00:03:11.064 --> 00:03:16.839
From one script, you cannot specify
dependencies I'm talking about before ES6,

44
00:03:16.839 --> 00:03:21.818
I'm talking about standard classic
browser JavaScript development.

45
00:03:21.818 --> 00:03:23.143
The worker is an exception, and

46
00:03:23.143 --> 00:03:25.998
I'm not sure if you have played with
web workers or service workers.

47
00:03:25.998 --> 00:03:28.898
We do have an import scripts,

48
00:03:28.898 --> 00:03:33.778
function that was added for
the worker spec only.

49
00:03:33.778 --> 00:03:38.474
So we cannot modularize behavior or
data and Node.js,

50
00:03:38.474 --> 00:03:45.964
had to implement its own pattern known as
the common JS pattern to emulate modules.

51
00:03:45.964 --> 00:03:51.228
The require function and
then module.exports on the other side was

52
00:03:51.228 --> 00:03:56.502
a way to emulate modules before
they were available in ECMAScript.

53
00:03:56.502 --> 00:04:04.035
So that's why If you have two scripts,
you can call from a script 1 print user,

54
00:04:04.035 --> 00:04:08.878
even if it was defined on
script 2 on another file.

55
00:04:08.878 --> 00:04:13.377
And you can also use variables
defined in the other scripts which

56
00:04:13.377 --> 00:04:17.790
may be good sometimes, but
when you have a large code base, and

57
00:04:17.790 --> 00:04:23.475
you have a team of developers working on
the same project, it's a mess, right?

58
00:04:23.475 --> 00:04:25.044
So we don't want that.

59
00:04:25.044 --> 00:04:30.171
So that's why we have now ES modules,
that, I mean, they are from ES6,

60
00:04:30.171 --> 00:04:35.053
but they have been improved over
the versions as small improvements,

61
00:04:35.053 --> 00:04:37.806
we will see those improvements later.

62
00:04:37.806 --> 00:04:44.099
So, in this case, every module work as a
container isolated from the global object.

63
00:04:44.099 --> 00:04:48.007
The global object is different
per platform so for example,

64
00:04:48.007 --> 00:04:52.995
if you're doing client side application
for the browser is a Window option.

65
00:04:52.995 --> 00:04:58.957
If you're doing workers, Web Workers,
Service Workers is the self option,

66
00:04:58.957 --> 00:05:02.673
if you're using Node.js,
is the global option.

67
00:05:02.673 --> 00:05:07.485
Well, in this case, a module has its

68
00:05:07.485 --> 00:05:12.153
own separate, isolated context.

69
00:05:12.153 --> 00:05:18.715
So for Node, ES modules are today
living together with CommonJS,

70
00:05:18.715 --> 00:05:25.296
so you can match a mix if you want
between CommonJS and ES modules.

71
00:05:25.296 --> 00:05:30.494
Each module works in
a separate file in the browser

72
00:05:30.494 --> 00:05:35.196
it's normal ".js" file, for Node.js,

73
00:05:35.196 --> 00:05:40.906
it's the ".mjs" by default,
you can change that.

74
00:05:40.906 --> 00:05:45.416
And there is the global scope,
it doesn't matter if it's Node.js or

75
00:05:45.416 --> 00:05:50.500
the browser or the service worker,
creates a module import tree as soon,

76
00:05:50.500 --> 00:05:56.161
as it's parsing JavaScript, and the
modules, I will show you that in a second.

77
00:05:56.161 --> 00:06:02.326
So, that means that it will import,
by default on ECMAScript 6,

78
00:06:02.326 --> 00:06:06.190
all the files statically at that moment.

79
00:06:06.190 --> 00:06:10.958
When it's parsing the project,
it says okay, I'm loading all the modules,

80
00:06:10.958 --> 00:06:12.704
all the JS files that I need.

81
00:06:14.340 --> 00:06:18.693
A module can export items,
variables, functions,

82
00:06:18.693 --> 00:06:24.500
class declarations, objects,
values, anything you wanna export,

83
00:06:24.500 --> 00:06:30.519
and also it can have one default export
import, that you define in a file.

84
00:06:30.519 --> 00:06:37.349
So you can export as many as you want,
or one that's gonna be the default one.

85
00:06:37.349 --> 00:06:41.576
And any module can import other
modules items, totally or

86
00:06:41.576 --> 00:06:44.950
partially, so
I will show you some examples.

87
00:06:44.950 --> 00:06:50.027
And you should check on every platform,
how to enable modules

88
00:06:50.027 --> 00:06:55.399
because remember ECMAScript is
always backwards compatible and

89
00:06:55.399 --> 00:06:58.730
before ES6, we didn't have modules.

90
00:06:58.730 --> 00:07:03.510
So that means that by default,
even on modern ECMAScript,

91
00:07:03.510 --> 00:07:07.718
these days modules should
be disabled by default for

92
00:07:07.718 --> 00:07:14.049
backward compatibility, unless you say
somehow, I wanna use modules okay?

93
00:07:14.049 --> 00:07:17.190
So for example, in the window context for

94
00:07:17.190 --> 00:07:22.857
standard client side applications,
we use type module in the scripting.

95
00:07:22.857 --> 00:07:27.529
That will load app.js using modules, and

96
00:07:27.529 --> 00:07:33.254
then it can create an import
module tree from there.

97
00:07:33.254 --> 00:07:40.600
But if you don't add the type module,
you cannot import or export within app.js.

98
00:07:40.600 --> 00:07:45.433
In a worker, when you create a worker,
you need to specify

99
00:07:45.433 --> 00:07:50.368
explicitly that,
that worker will use modules because for

100
00:07:50.368 --> 00:07:55.615
backward compatibility by default,
we don't have modules.

101
00:07:55.615 --> 00:07:59.815
When you create a service worker,
when you register a service worker,

102
00:07:59.815 --> 00:08:01.640
you also specify type module.

103
00:08:01.640 --> 00:08:06.902
For node.js, there are three
ways to use modules in node.js.

104
00:08:06.902 --> 00:08:12.087
One is to just use the .mjs extension,
that I know that

105
00:08:12.087 --> 00:08:17.515
some of you may dislike,
because sounds weird, right?

106
00:08:17.515 --> 00:08:22.899
That mjs extension sounds weird, it was
a big discussion in a Node community.

107
00:08:22.899 --> 00:08:26.669
So but they say hey, for
compatibility reasons,

108
00:08:26.669 --> 00:08:31.333
we cannot just leave it with .js,
but if you want to use .js,

109
00:08:31.333 --> 00:08:36.179
you can say so by adding a flag
when you're running your script,

110
00:08:36.179 --> 00:08:39.805
or by adding a metadata
in your package.json.

111
00:08:39.805 --> 00:08:44.406
You will say, hey,
you know what in the whole project

112
00:08:44.406 --> 00:08:48.608
I wanna use modules,
this is not a ES5 project.

113
00:08:48.608 --> 00:08:52.339
So this is ES6 with modules project, so

114
00:08:52.339 --> 00:08:58.173
then it's going to take your .JS
files as modules by default.

115
00:08:58.173 --> 00:09:03.217
So with modules then,
now the HTML can include the Script 1,

116
00:09:03.217 --> 00:09:09.037
and Script 1 by itself, can also say,
hey, I wanna import Script 2.

117
00:09:09.037 --> 00:09:13.177
And now, if you have a variable or
a function in Script 2,

118
00:09:13.177 --> 00:09:16.572
it's not available by
default anywhere else.

119
00:09:16.572 --> 00:09:22.764
It's only available in
the isolated Script 2 context,

120
00:09:22.764 --> 00:09:26.766
unless Script 2 is exporting that.

121
00:09:26.766 --> 00:09:31.693
In this case, so
Script 1 can import that variable or

122
00:09:31.693 --> 00:09:36.737
that function,
which makes our code cleaner, okay?

123
00:09:36.737 --> 00:09:42.512
And when you have a large code base,
this is pretty good.

124
00:09:42.512 --> 00:09:49.628
So that means that now the same example,
as we saw before, is not actually working.

125
00:09:49.628 --> 00:09:55.440
You cannot access printUser or
the user variable from Script 1,

126
00:09:55.440 --> 00:09:58.830
because it's in a different module.

127
00:09:58.830 --> 00:10:05.210
Unless we export those
references from a Script 2,

128
00:10:05.210 --> 00:10:12.176
and then we import those
references in Script 1, okay?

129
00:10:12.176 --> 00:10:12.954
Make sense?

130
00:10:12.954 --> 00:10:15.932
Pretty straightforward, okay?

131
00:10:15.932 --> 00:10:19.685
And also, you can use default export.

132
00:10:19.685 --> 00:10:22.418
So instead of exporting
each file individually or

133
00:10:22.418 --> 00:10:25.931
each component individually,
you can do a default export and

134
00:10:25.931 --> 00:10:30.502
in this case I'm exporting actually,
I'm not sure if you recognize this syntax.

135
00:10:30.502 --> 00:10:31.031
If not,

136
00:10:31.031 --> 00:10:36.194
it's something that we will see in a
second because it's also an ES6 addition.

137
00:10:36.194 --> 00:10:40.052
It has to do with object addition,
this is actually JSON,

138
00:10:40.052 --> 00:10:44.325
doesn't look like actually it's
not really JSON compatible.

139
00:10:44.325 --> 00:10:46.388
It's an object syntax,

140
00:10:46.388 --> 00:10:52.481
that is creating a new object with
a property user that has the value user,

141
00:10:52.481 --> 00:10:57.215
with a property printUser
that has the value printUser.

142
00:10:57.215 --> 00:11:03.119
So it's an object that then I'm receiving
that object from the other side,

143
00:11:03.119 --> 00:11:07.824
and I can set a name for that object,
and then I can use an API,

144
00:11:07.824 --> 00:11:10.697
same Services.printUser, yeah.

145
00:11:10.697 --> 00:11:14.463
&gt;&gt; Student: I see in Script 1,
it's import capital "S" services and

146
00:11:14.463 --> 00:11:16.747
I normally think of that as class.

147
00:11:16.747 --> 00:11:21.075
&gt;&gt; Maximiliano Firtman: Yeah, that's
a design pattern let's say, a guideline.

148
00:11:21.075 --> 00:11:21.808
&gt;&gt; Student: Okay.

149
00:11:21.808 --> 00:11:23.227
&gt;&gt; Maximiliano Firtman: That sometimes,

150
00:11:23.227 --> 00:11:27.206
but actually there
are different ways to do this.

151
00:11:27.206 --> 00:11:30.840
And in the community there,
I don't think for this particular case,

152
00:11:30.840 --> 00:11:32.264
there is no single answer.

153
00:11:32.264 --> 00:11:37.133
If you should use title case or
lower case for the object, but

154
00:11:37.133 --> 00:11:40.104
it's been used a lot via title case.

155
00:11:40.104 --> 00:11:44.748
When you are importing an object,
you treat it like a select an API,

156
00:11:44.748 --> 00:11:46.389
like if it's a module.

157
00:11:46.389 --> 00:11:49.629
So it's like a module name,
think about that it's an object, okay?

158
00:11:49.629 --> 00:11:53.911
It's an object, so it should be
lowercase from that point of view, so

159
00:11:53.911 --> 00:11:55.012
it's an object.

160
00:11:55.012 --> 00:11:59.819
But it's the object that has
everything from other module.

161
00:11:59.819 --> 00:12:05.279
So it's kind of our module entry
point that's why a lot of developers,

162
00:12:05.279 --> 00:12:11.012
and I kind of like that idea, are
capitalizing the name of that option, but

163
00:12:11.012 --> 00:12:16.018
it's up to you, or up to your team,
up to your guideline, okay?

164
00:12:16.018 --> 00:12:17.661
Make sense?
&gt;&gt; Student: The default import,

165
00:12:17.661 --> 00:12:20.740
default exports syntax
doesn't enforce pascal case.

166
00:12:20.740 --> 00:12:21.887
&gt;&gt; Maximiliano Firtman: No, in JavaScript,

167
00:12:21.887 --> 00:12:25.027
there is no
enforcement in case of naming.

168
00:12:25.027 --> 00:12:29.065
So you can name that
dollar sign if you want.

169
00:12:29.065 --> 00:12:32.673
So you can say import dollar
sign from Script 2 or

170
00:12:32.673 --> 00:12:37.528
underscore because those are value
identifiers, makes sense?

171
00:12:37.528 --> 00:12:42.327
When importing from module, this is
important if you're coming from React,

172
00:12:42.327 --> 00:12:44.810
from Angular, if you're using Babel.

173
00:12:44.810 --> 00:12:48.068
When importing from modules,

174
00:12:48.068 --> 00:12:53.453
the path must start with http or
https, /, ./,

175
00:12:53.453 --> 00:12:58.231
or ../, so if not, it's not gonna work.

176
00:12:58.231 --> 00:13:04.425
And you need to remember to think in URLs,
not in files.

177
00:13:04.425 --> 00:13:10.980
Which means, for example, you always
need to say, when you're importing here,

178
00:13:10.980 --> 00:13:16.023
for example, okay, I'm saying ./,
and I'm saying .JS.

179
00:13:16.023 --> 00:13:21.098
If you're using Babel,
because it's a transpiler maybe

180
00:13:21.098 --> 00:13:26.691
you're not used to add the .JS is
not gonna work in the browser,

181
00:13:26.691 --> 00:13:30.019
because the browser works with URLs.

182
00:13:30.019 --> 00:13:35.634
The browser, if you don't add .js,
the browser will make an HTTP request

183
00:13:35.634 --> 00:13:41.443
to the server to a Script 2
without .js and probably that's a 404.

184
00:13:41.443 --> 00:13:42.389
Does it make sense?

185
00:13:42.389 --> 00:13:47.625
So when you're using ES modules,
and you are not using a transpiler,

186
00:13:47.625 --> 00:13:50.842
that can add some
advantages to your code.

187
00:13:50.842 --> 00:13:54.782
You always need to work with public URLs,

188
00:13:54.782 --> 00:13:59.062
which means you shouldn't
use short hands or

189
00:13:59.062 --> 00:14:05.160
ways to shorten the URL,
such as not adding the file extension.

190
00:14:05.160 --> 00:14:05.869
Because it's no gonna work.

