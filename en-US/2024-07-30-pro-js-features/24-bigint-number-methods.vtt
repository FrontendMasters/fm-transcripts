WEBVTT

1
00:00:00.260 --> 00:00:02.517
&gt;&gt; Maximiliano Firtman: Numbers,
let's get into numbers.

2
00:00:02.517 --> 00:00:06.619
You know that numbers in
JavaScript is always a problem,

3
00:00:06.619 --> 00:00:10.301
even if it's part of most
of the JavaScript jokes.

4
00:00:10.301 --> 00:00:15.265
There are a lot of jokes around and
memes around JavaScript,

5
00:00:15.265 --> 00:00:19.268
and most of them are because
of how numbers work.

6
00:00:19.268 --> 00:00:24.023
You know that we don't have integers and
floats, we have just number, and

7
00:00:24.023 --> 00:00:29.233
the precision of that is not really good
because by default it's always a floating

8
00:00:29.233 --> 00:00:34.240
point number even if it's an integer and
it has a limit and blah, blah, blah.

9
00:00:34.240 --> 00:00:38.263
Well, now we have from 2020 BigInt.

10
00:00:38.263 --> 00:00:43.834
A built-in object that provides
a way to represent whole numbers

11
00:00:43.834 --> 00:00:48.908
larger than BigInt long
numbers is to power 2^53-1.

12
00:00:48.908 --> 00:00:54.541
That's actually the largest number that
JavaScript can represent with a number.

13
00:00:54.541 --> 00:01:02.171
And you just write the number with
an n suffix, lowercase n at the end.

14
00:01:02.171 --> 00:01:05.833
And you can apply all the math
operations with only 1, for

15
00:01:05.833 --> 00:01:08.317
example in this case I'm adding 10.

16
00:01:08.317 --> 00:01:13.540
Lets add 1 so we can probably see
this better the ns in 1, okay?

17
00:01:13.540 --> 00:01:18.734
Instead of ending in 0,
it's ending in 1, so it's adding 1.

18
00:01:18.734 --> 00:01:21.005
The thing is that we have a problem.

19
00:01:21.005 --> 00:01:24.239
What if I just wanna add 1?

20
00:01:24.239 --> 00:01:30.839
If I run this, look at this,
I cannot mix BigInts with numbers.

21
00:01:30.839 --> 00:01:34.465
So I have to use converters.

22
00:01:34.465 --> 00:01:38.620
I mean, if it's literal,
I can use an n, okay.

23
00:01:38.620 --> 00:01:43.265
But let's say I have another
variable that is coming from a JSON,

24
00:01:43.265 --> 00:01:46.398
from a server, and it's already a number.

25
00:01:46.398 --> 00:01:50.767
Well, you can convert it into BigInt
just by using this constructor.

26
00:01:54.055 --> 00:01:57.455
&gt;&gt; Maximiliano Firtman: And also you
can do the reverse operation in case

27
00:01:57.455 --> 00:02:02.045
the number is not so big, but
you can convert this into a number.

28
00:02:02.045 --> 00:02:07.077
If you take a BigInt,
you can convert it back into a number if

29
00:02:07.077 --> 00:02:11.919
it's within the limits of
the number primitive, okay?

30
00:02:11.919 --> 00:02:14.018
Makes sense?

31
00:02:14.018 --> 00:02:19.412
It's just that, again, you won't
probably use this in a daily base also,

32
00:02:19.412 --> 00:02:24.655
but having minus there, and
some other minor additions around numbers.

33
00:02:24.655 --> 00:02:29.761
So, new methods for example,
is finit, is integer,

34
00:02:29.761 --> 00:02:34.431
is save integer that is
actually been safe or not?

35
00:02:34.431 --> 00:02:39.912
It's kind of weird, but
let's say quickly, that a safe number

36
00:02:39.912 --> 00:02:46.117
is a number that can be represented
by a number without losing position.

37
00:02:46.117 --> 00:02:47.818
It's kind of that, okay?

38
00:02:47.818 --> 00:02:52.290
So you can check if something is or
not safe, if it's a none,

39
00:02:52.290 --> 00:02:57.927
if it's not a number, you have some new
constants for the max safe integer.

40
00:02:57.927 --> 00:03:02.601
So here, have the max safe integer,
integer at the minimum, safe integer, and

41
00:03:02.601 --> 00:03:05.024
after that, you're losing precision.

42
00:03:05.024 --> 00:03:09.224
And now we also have a way to use

43
00:03:09.224 --> 00:03:14.947
separators just for seeing them nicer.

44
00:03:14.947 --> 00:03:19.333
So having those separators, it's
an underscore or not, it's just the same.

45
00:03:19.333 --> 00:03:21.820
So you can have there wherever you want.

46
00:03:21.820 --> 00:03:28.741
So, typically we use it every 3D sheets,
but you don't need to, okay?

47
00:03:28.741 --> 00:03:34.684
It's just a character that will be ignored
by the parser when it's within the number.

48
00:03:34.684 --> 00:03:36.750
Typically four thousand separators.

49
00:03:36.750 --> 00:03:37.650
It's just that.

