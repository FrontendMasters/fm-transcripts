WEBVTT

1
00:00:00.000 --> 00:00:04.106
&gt;&gt; Maximiliano Firtman: The last section,
it's about regular expressions, and

2
00:00:04.106 --> 00:00:07.455
again I'm not sure how
many of you are experts or

3
00:00:07.455 --> 00:00:12.009
even comfortable with regular expression,
not even experts.

4
00:00:12.009 --> 00:00:17.605
But let's cover briefly the additions that
have been in this field, that it needs

5
00:00:17.605 --> 00:00:22.732
a whole workshop on regular expressions
full day of regular expressions.

6
00:00:22.732 --> 00:00:27.205
It's interesting when you learn regular
expressions when you understand

7
00:00:27.205 --> 00:00:29.196
what's going on behind the scenes.

8
00:00:29.196 --> 00:00:34.645
So I remember seeing that at university,
so like spending several

9
00:00:34.645 --> 00:00:40.206
weeks learning machine states and
what's going on behind scenes.

10
00:00:40.206 --> 00:00:45.156
To understand why are so
cryptic okay, but anyway,

11
00:00:45.156 --> 00:00:49.575
we have that,
let's start let's go one by one.

12
00:00:49.575 --> 00:00:56.342
So we have first one known as the dotAll flag
that will match any character including

13
00:00:56.342 --> 00:01:02.131
line breaks, typically line breaks
we're not line breaks or tabs.

14
00:01:02.131 --> 00:01:06.238
Special characters were not being
taken by the regular expression,

15
00:01:06.238 --> 00:01:09.493
when you use the flag,
actually it's being used after

16
00:01:09.493 --> 00:01:13.812
the forward slash when you create
the regular expression, typically,

17
00:01:13.812 --> 00:01:16.955
maybe you have been playing with g,
the global one.

18
00:01:16.955 --> 00:01:21.152
That's the most common one,
but now we have the s, that,

19
00:01:21.152 --> 00:01:24.592
it just check whatever you have inside,
okay?

20
00:01:24.592 --> 00:01:28.717
So if I run this, it says true because,

21
00:01:28.717 --> 00:01:34.227
it works with this character,
new line character.

22
00:01:34.227 --> 00:01:39.485
We have the sticky flag, that actually
ensures that the match must start

23
00:01:39.485 --> 00:01:45.707
the current position in the target string,
it's actually what's going on, okay?

24
00:01:45.707 --> 00:01:47.353
So because if you run this,

25
00:01:47.353 --> 00:01:50.939
you don't really understand
what's going on initially.

26
00:01:50.939 --> 00:01:55.886
The idea with this is that
when you execute a regular

27
00:01:55.886 --> 00:02:00.720
expression on the same string many times,
okay,

28
00:02:00.720 --> 00:02:05.110
in this case, it's looking for foo, okay?

29
00:02:05.110 --> 00:02:09.616
Exactly for foo, and it has the sticky
flag, so the idea is that, for

30
00:02:09.616 --> 00:02:14.146
example, if I remove a character here,
the second one disappears.

31
00:02:14.146 --> 00:02:18.122
So I have two executions, it's exactly
the same, you can see it's exactly

32
00:02:18.122 --> 00:02:21.430
the same execution, and
why did the other one here disappear?

33
00:02:21.430 --> 00:02:24.001
Let's go back to the other one like that,

34
00:02:24.001 --> 00:02:27.241
they disappear when I'm
changing this, it disappears.

35
00:02:27.241 --> 00:02:28.164
Why?

36
00:02:28.164 --> 00:02:32.207
Because it has some benefit pointer, so
when I execute this for the first time

37
00:02:32.207 --> 00:02:36.448
because of the sticky flag, here, you're
gonna see a sticky flag, the y.

38
00:02:36.448 --> 00:02:41.324
It has like a pointer, so
it's It actually found the first foo,

39
00:02:41.324 --> 00:02:45.135
and it stopped there,
now it has a pointer there.

40
00:02:45.135 --> 00:02:48.040
When you execute again, it will check for

41
00:02:48.040 --> 00:02:52.616
foo after that pointer, and
now there is no foo after that point.

42
00:02:52.616 --> 00:02:53.879
Okay, make sense?

43
00:02:53.879 --> 00:02:56.159
It's just that.

44
00:02:56.159 --> 00:03:00.953
Look behind assertions are
even more complicated to actually

45
00:03:00.953 --> 00:03:06.407
understand if you don't have
experience with regular expression.

46
00:03:06.407 --> 00:03:11.862
I will try to do my best to give you
a quick idea of what's going on,

47
00:03:11.862 --> 00:03:18.036
so in this case, you can do positive
look behind or negative look behind.

48
00:03:18.036 --> 00:03:21.362
By the way,
ECMAScript always supported, or

49
00:03:21.362 --> 00:03:24.785
it has supported look ahead for
a while, okay?

50
00:03:24.785 --> 00:03:28.532
This is look behind, so what's the idea?

51
00:03:28.532 --> 00:03:32.545
So, in this case, you can look behind foo,

52
00:03:32.545 --> 00:03:36.568
so I'm trying to get foo as a prefix,
okay?

53
00:03:36.568 --> 00:03:42.105
So I'm saying, hey, look behind foo,
so this is a syntax,

54
00:03:42.105 --> 00:03:47.533
actually in the regular expression,
so this is not a flag,

55
00:03:47.533 --> 00:03:51.893
it's part of the regular
expression pattern.

56
00:03:51.893 --> 00:03:59.227
So I'm saying, I wanna look behind foo,
so actually the result is 123.

57
00:03:59.227 --> 00:04:04.301
A negative look behind is when
you wanna look with this, okay,

58
00:04:04.301 --> 00:04:09.202
it's looking for bar, and
of course, there is no bar here.

59
00:04:09.202 --> 00:04:15.381
So it's also giving me 123, again, by
the way, it's also matching digits here.

60
00:04:15.381 --> 00:04:19.642
So the digits,
that should have a foo before, and

61
00:04:19.642 --> 00:04:24.423
the other one is a digit that
shouldn't have bar before.

62
00:04:24.423 --> 00:04:27.592
Something like that,
that's what you are matching.

63
00:04:27.592 --> 00:04:32.259
Named capture groups is something
that you will get probably better

64
00:04:32.259 --> 00:04:36.608
because it's something that we
have already tested before.

65
00:04:36.608 --> 00:04:41.102
Remember the regular expression
that we use with match all that

66
00:04:41.102 --> 00:04:45.696
was extracting the year,
was extracting the month and the day.

67
00:04:45.696 --> 00:04:52.168
I'm not sure if you remember that at
that point, the year was actually sub1,

68
00:04:52.168 --> 00:04:57.190
it wasn't array of data, but
was receiving the whole date.

69
00:04:57.190 --> 00:05:02.076
Then we're assuming the year,
then the month, then the day, but

70
00:05:02.076 --> 00:05:04.265
we received that in an array.

71
00:05:04.265 --> 00:05:09.281
And we need to go and
grab the one we need by the index,

72
00:05:09.281 --> 00:05:17.049
well now with named groups that is
actually something that appeared in 2018.

73
00:05:17.049 --> 00:05:21.333
You can name the groups and
this is the name, so in this case,

74
00:05:21.333 --> 00:05:26.290
you use angle brackets within
the already cryptic regular expression

75
00:05:26.290 --> 00:05:30.760
in angle brackets within the parenthesis,
this is the group.

76
00:05:30.760 --> 00:05:36.183
We define a name, year, month,
and day, so in this case,

77
00:05:36.183 --> 00:05:41.063
we are saying this is a group
that the name is the year,

78
00:05:41.063 --> 00:05:45.094
and it's looking for four numeric digits.

79
00:05:45.094 --> 00:05:52.198
The month, then we have a hyphen,
then it should have the month two digits,

80
00:05:52.198 --> 00:05:56.416
another hyphen, and
the day with two digits.

81
00:05:56.416 --> 00:06:01.533
When we execute this with any value here,

82
00:06:01.533 --> 00:06:04.756
you receive named groups.

83
00:06:04.756 --> 00:06:09.674
With "." syntax, you can go and
grab the year, the month, and

84
00:06:09.674 --> 00:06:14.690
the day, which is much better
than just grabbing the groups by

85
00:06:14.690 --> 00:06:20.171
their index, Their indices,
actually, make sense?

86
00:06:20.171 --> 00:06:25.473
So then you receive, and of course,
you pick the order, right?

87
00:06:25.473 --> 00:06:30.380
So you can change the order because
it's name-based, not position-based.

88
00:06:30.380 --> 00:06:31.134
Does it make sense?

89
00:06:33.415 --> 00:06:36.118
And then we have also
the Unicode property,

90
00:06:36.118 --> 00:06:38.391
that's actually the another flag.

91
00:06:38.391 --> 00:06:45.322
/u, which lets you match
based on the properties

92
00:06:45.322 --> 00:06:50.120
of the Unicode set of characters.

93
00:06:50.120 --> 00:06:57.106
Some for example, I can check if
the string has Greek characters,

94
00:06:57.106 --> 00:07:02.117
so if I test this,
Alpha is Greek, it's true.

95
00:07:02.117 --> 00:07:09.314
If I use, I don't know, a, Latin a,
is false, that's not Greek, okay?

96
00:07:09.314 --> 00:07:10.325
Makes sense?

97
00:07:10.325 --> 00:07:15.206
And also another thing you can check,
you can check if it's emoji,

98
00:07:15.206 --> 00:07:20.961
if it includes emojis, emoji flags, or
whatever or punctuation characters.

99
00:07:20.961 --> 00:07:23.857
So, for example, if I check on this,

100
00:07:23.857 --> 00:07:29.841
it gives me true that it has punctuation
characters, I can also extract them.

101
00:07:29.841 --> 00:07:35.041
But if I remove all these marks,
so if I run this, it's still true.

102
00:07:35.041 --> 00:07:41.773
But if I remove exclamation mark,
I still have to,

103
00:07:41.773 --> 00:07:47.076
comma sorry, now it's false just by saying

104
00:07:47.076 --> 00:07:51.680
this capital P with the U flag, okay?

105
00:07:51.680 --> 00:07:56.897
So that's new from ES6 there are not so
many use cases but

106
00:07:56.897 --> 00:08:03.782
typically for validation purposes,
it will probably be useful, okay?

107
00:08:03.782 --> 00:08:09.595
So those are the new enhancements
around regular expressions.

108
00:08:09.595 --> 00:08:13.893
&gt;&gt; Student: Just in the chat, just
mentioned that regex101.com is a great

109
00:08:13.893 --> 00:08:17.360
site for understanding them or
just playing around.

110
00:08:17.360 --> 00:08:20.100
&gt;&gt; Maximiliano Firtman: Yeah,
there are a lot of resources around

111
00:08:20.100 --> 00:08:23.938
regular expression,
regular expression is actually its

112
00:08:23.938 --> 00:08:27.163
own language that is not
related to JavaScript.

113
00:08:27.163 --> 00:08:31.504
Implementations might be different
on different languages, but

114
00:08:31.504 --> 00:08:36.618
the main idea of a regular expression,
the mainstream is typically something

115
00:08:36.618 --> 00:08:41.358
that is a standard that works
across many, many, many languages.

