WEBVTT

1
00:00:00.190 --> 00:00:04.050
&gt;&gt; Maximiliano Firtman: Okay, so
let's get into a nice operators.

2
00:00:04.050 --> 00:00:08.895
So here comes the part where I think
that you will find things that you

3
00:00:08.895 --> 00:00:13.280
will use on a daily base
knowledge coalescing operator.

4
00:00:13.280 --> 00:00:14.394
So we are named, right?

5
00:00:14.394 --> 00:00:15.675
So we are named.

6
00:00:15.675 --> 00:00:20.062
This is actually pretty cool, and

7
00:00:20.062 --> 00:00:24.602
he was actually every language that

8
00:00:24.602 --> 00:00:31.065
appeared after 2005 already had this.

9
00:00:31.065 --> 00:00:36.789
So JavaScript was kind of behind
other languages such as Swift,

10
00:00:36.789 --> 00:00:40.711
Kotlin, Dart, and Go many others, okay?

11
00:00:40.711 --> 00:00:45.186
Talking when something is optional,
when you have nulls, or

12
00:00:45.186 --> 00:00:49.155
in JavaScript,
when you have also undefined, okay?

13
00:00:49.155 --> 00:00:50.822
So it's common.

14
00:00:50.822 --> 00:00:56.901
It's a really common pattern in JavaScript
to check all the time if something is null

15
00:00:56.901 --> 00:01:03.166
or undefined before using it, and if it's
null or undefined, set the default value.

16
00:01:04.256 --> 00:01:09.101
And typically for that we use an if
that we know it's not an expression, so

17
00:01:09.101 --> 00:01:11.886
I cannot send it as an argument.

18
00:01:11.886 --> 00:01:17.166
And we have the expression version
that is the ternary operator.

19
00:01:17.166 --> 00:01:24.065
That probably you have used where you say,
okay, if the value exist, use the value.

20
00:01:24.065 --> 00:01:30.094
For example, if it doesn't exist,
use something like this, no value.

21
00:01:30.094 --> 00:01:34.704
So if I do have a value,
of course, I will say hello.

22
00:01:34.704 --> 00:01:39.874
And if I don't have a value,
or if it's null, okay?

23
00:01:39.874 --> 00:01:41.544
It will say no value, okay?

24
00:01:42.544 --> 00:01:49.004
The thing is that, yeah, value, value,
I mean, it's not a big deal, okay?

25
00:01:49.004 --> 00:01:52.124
But sometimes it's a long expression.

26
00:01:52.124 --> 00:01:57.454
Sometimes you're executing a function
that actually returns the value.

27
00:01:57.454 --> 00:02:04.508
So you say, get the object,
then load the object and get the value.

28
00:02:04.508 --> 00:02:06.585
And if it's not all, I want the value.

29
00:02:06.585 --> 00:02:11.412
So then you copy this, and you paste
it here, and now it's not so cool.

30
00:02:11.412 --> 00:02:14.108
You need to go multiple lines.

31
00:02:14.108 --> 00:02:18.894
So, I mean, it's fine, it's there,
bro, you have used this before,

32
00:02:18.894 --> 00:02:22.439
but it sounds we can get it better and
we can.

33
00:02:22.439 --> 00:02:26.709
From ES 2020, we have this new operator,

34
00:02:26.709 --> 00:02:32.840
the knowledge coalescing operator,
that lets you remove this and

35
00:02:32.840 --> 00:02:37.218
instead of, so
we remove the initial part, and

36
00:02:37.218 --> 00:02:41.941
we change this with a double
question mark, okay?

37
00:02:41.941 --> 00:02:49.341
So, I want the result to be this value.

38
00:02:49.341 --> 00:02:53.491
And if there is no value there,
take this other one as an alternative.

39
00:02:54.671 --> 00:02:57.651
So for my case,
it's going to look like this.

40
00:02:59.311 --> 00:03:01.730
So it's the same thing if I have a value.

41
00:03:03.849 --> 00:03:11.513
I see the value, and
if I don't have a value, It will take 34.

42
00:03:11.513 --> 00:03:13.234
It looks clear.

43
00:03:14.284 --> 00:03:19.711
Remember, most of the things that we
are having to ECMAScript are this idea of,

44
00:03:19.711 --> 00:03:21.241
Syntax sugar.

45
00:03:21.241 --> 00:03:26.214
Maybe you're thinking, well, I mean,
it's not a big deal because we could

46
00:03:26.214 --> 00:03:30.451
do that before as well,
but yeah, it looks better.

47
00:03:30.451 --> 00:03:31.131
It looks nicer.

48
00:03:32.131 --> 00:03:36.751
And the same operator is available
on some other languages as well.

49
00:03:36.751 --> 00:03:39.736
Not always with the same syntax, but

50
00:03:39.736 --> 00:03:43.790
it's kind of similar to
other languages as well.

51
00:03:43.790 --> 00:03:48.183
So double question mark will do
the trick and this is an expression.

52
00:03:48.183 --> 00:03:52.871
So that means I can send that directly
here in the console log without

53
00:03:52.871 --> 00:03:55.203
creating a variable.

54
00:03:55.203 --> 00:04:00.915
If it's an if, if I'm using a classic if,
I need to create the variable.

55
00:04:00.915 --> 00:04:03.730
So I think that looks cleaner now.

