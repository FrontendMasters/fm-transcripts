WEBVTT

1
00:00:00.140 --> 00:00:05.500
Proxies under reflected API is another big
topic that we will cover briefly here.

2
00:00:05.500 --> 00:00:11.585
But the whole idea of a proxy,
it's something that appear also in ES6.

3
00:00:11.585 --> 00:00:17.660
Actually it's a design pattern
that with the mix of proxies and

4
00:00:17.660 --> 00:00:22.361
the reflect API,
you can get into the objects and

5
00:00:22.361 --> 00:00:26.154
do something when the object changes.

6
00:00:26.154 --> 00:00:29.467
Or when you are reading value from
the object, or something like that.

7
00:00:29.467 --> 00:00:32.178
For example, let me run this.

8
00:00:32.178 --> 00:00:36.095
So, if you look here,
I have an object target.

9
00:00:36.095 --> 00:00:39.299
It's an object with the name Joseph,
just that.

10
00:00:39.299 --> 00:00:42.837
And then I'm creating a proxy for
that object, okay?

11
00:00:42.837 --> 00:00:45.822
The proxy will receive a target, so

12
00:00:45.822 --> 00:00:51.904
that's the object that you will observe,
kind of, and then a handler.

13
00:00:51.904 --> 00:00:56.370
The handler is another object
that will have different hooks,

14
00:00:56.370 --> 00:00:58.742
actually they are called traps.

15
00:00:58.742 --> 00:01:04.594
And we have a trap for set,
for get, and many others.

16
00:01:04.594 --> 00:01:07.744
So in this case,
I'm setting a trap for get.

17
00:01:07.744 --> 00:01:12.008
So when you are getting
a value from that object,

18
00:01:12.008 --> 00:01:17.234
that hook,
that function is going to be executed.

19
00:01:17.234 --> 00:01:22.436
So when you are trying to get in the name,
you can see that

20
00:01:22.436 --> 00:01:27.773
before getting the name, so
I can say here, the name is.

21
00:01:27.773 --> 00:01:30.808
I'm using a template string here.

22
00:01:30.808 --> 00:01:35.477
The name is Joseph, before that,
we see this, and what is that?

23
00:01:36.617 --> 00:01:39.372
This console, that says, hey, hey,

24
00:01:39.372 --> 00:01:43.224
you're trying to get that
property from that object.

25
00:01:43.224 --> 00:01:46.834
I'm gonna string you find the object so
we can see better there.

26
00:01:46.834 --> 00:01:52.597
So every time you're getting a property,
you are going through a proxy.

27
00:01:52.597 --> 00:01:54.941
Now, you're not getting
directly into the object,

28
00:01:54.941 --> 00:01:57.147
you're going through a proxy, okay?

29
00:01:57.147 --> 00:02:01.624
That proxy will let you change.

30
00:02:01.624 --> 00:02:06.303
And here I'm saying, hey,
I'm using the reflect API to go and

31
00:02:06.303 --> 00:02:09.320
grab from that object, that property.

32
00:02:11.821 --> 00:02:14.211
&gt;&gt; Maximiliano Firtman: And of course,
I can just return something different.

33
00:02:15.470 --> 00:02:20.492
&gt;&gt; Maximiliano Firtman: Return whatever,
[SOUND], so now that's the name.

34
00:02:20.492 --> 00:02:23.304
Maybe you're thinking, well, but that's
a proxy, it's not a real object, but

35
00:02:23.304 --> 00:02:23.958
think about this.

36
00:02:23.958 --> 00:02:30.448
And if you are working with modules,
you are exporting things.

37
00:02:30.448 --> 00:02:33.742
So when you use a proxy, typically,

38
00:02:33.742 --> 00:02:38.110
you will export the proxy
version of the object.

39
00:02:38.110 --> 00:02:42.442
So from a consumer point of view,
you don't know that you're going

40
00:02:42.442 --> 00:02:47.159
through a proxy, you're just using
an object that someone returns you.

41
00:02:47.159 --> 00:02:50.177
I have an object, so I'm getting and
setting value from that object.

42
00:02:50.177 --> 00:02:54.407
I don't know that I'm
going through a proxy, but

43
00:02:54.407 --> 00:03:00.766
maybe I'm going through a proxy, and
that proxy can do something, yeah?

44
00:03:00.766 --> 00:03:03.763
&gt;&gt; Speaker 2: I might have missed this,
but on line 6 and

45
00:03:03.763 --> 00:03:07.892
line 8 is get a specific keyword that's-
&gt;&gt; Maximiliano Firtman: It's a specific

46
00:03:07.892 --> 00:03:11.419
keyword, actually a specific key for
the handler.

47
00:03:11.419 --> 00:03:14.091
I mean, I can do any key,
I'm not going to get an error, but

48
00:03:14.091 --> 00:03:15.657
also it's not gonna work, okay?

49
00:03:15.657 --> 00:03:22.457
It's not actually working, so the trap
should use one of these specific key,

50
00:03:22.457 --> 00:03:26.692
we have get, set,
there are long list of traps.

51
00:03:26.692 --> 00:03:29.048
If you wanna get more on proxies,

52
00:03:29.048 --> 00:03:33.943
I have another course on front-end
masters, Vanilla JavaScript.

53
00:03:33.943 --> 00:03:36.702
You don't need that framework,
that's the name, Vanilla JavaScript,

54
00:03:36.702 --> 00:03:37.944
you don't need that framework.

55
00:03:37.944 --> 00:03:43.198
Where we get into proxies,
we use proxies to

56
00:03:43.198 --> 00:03:48.457
simulate or emulate reactive programing.

57
00:03:48.457 --> 00:03:53.552
So when you change the data,
you update the UI.

58
00:03:53.552 --> 00:03:56.752
Something that react, for example,
is doing with interpolation.

59
00:03:56.752 --> 00:03:59.482
So we use proxy for that, okay?

60
00:03:59.482 --> 00:04:03.817
But, yeah, the proxies can be used for
other purposes as well.

61
00:04:03.817 --> 00:04:07.450
And the reflection API will let you
receive an object, analyze the object,

62
00:04:07.450 --> 00:04:10.366
see what's inside, see the methods,
execute the method.

63
00:04:10.366 --> 00:04:13.869
Change property values,
read properties values,

64
00:04:13.869 --> 00:04:17.299
without actually knowing
the object beforehand.

65
00:04:17.299 --> 00:04:21.411
That's typically a reflection
API on most of model languages.

