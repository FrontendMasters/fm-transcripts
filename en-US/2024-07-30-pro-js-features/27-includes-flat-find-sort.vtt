WEBVTT

1
00:00:00.000 --> 00:00:03.751
&gt;&gt; Maximiliano Firtman: Now, getting
into the new stuff that we have here,

2
00:00:03.751 --> 00:00:07.598
we have includes,
that is actually pretty simple.

3
00:00:07.598 --> 00:00:12.613
That's the same as with the strings
to avoid the usage of indexOf.

4
00:00:12.613 --> 00:00:19.071
This will check if banana is inside
fruits, simple to get, okay?

5
00:00:19.071 --> 00:00:20.351
Nothing so fancy.

6
00:00:20.351 --> 00:00:26.621
Flat and flat map,
flat will flatten the nested array.

7
00:00:26.621 --> 00:00:30.881
So, for example, if I console.log this,
this is the flat version.

8
00:00:30.881 --> 00:00:33.860
So I say array.flat, and

9
00:00:33.860 --> 00:00:39.991
the 2 has to do with how
deep I want the flat, okay?

10
00:00:39.991 --> 00:00:41.719
So, how deep I want the flat.

11
00:00:41.719 --> 00:00:44.839
So if I run this,
this is a flat 1, 2, 3, 4.

12
00:00:46.149 --> 00:00:50.768
It's getting two levels within the array,
but you can say only one and

13
00:00:50.768 --> 00:00:52.839
you will see the difference.

14
00:00:52.839 --> 00:00:57.609
And flat map, it's flatting and
mapping at the same time.

15
00:00:59.569 --> 00:01:05.945
Okay, so it's flatting the array and
also making a map.

16
00:01:05.945 --> 00:01:09.609
At the same time I'm while,
it's because you can also flat a map.

17
00:01:09.609 --> 00:01:14.751
But in this case you are executing
the map while it's doing the flat,

18
00:01:14.751 --> 00:01:20.704
which it's not exactly the same in terms
of the order of the operations, okay?

19
00:01:20.704 --> 00:01:25.177
It's just that,
this is from ECMAScript 2019.

20
00:01:25.177 --> 00:01:27.722
So, again, you can see there
are a lot of features, right?

21
00:01:27.722 --> 00:01:32.196
So, I'm going one by one and
some of them are really quickly.

22
00:01:32.196 --> 00:01:36.605
For finding, we have a lot of
properties that will let us find

23
00:01:36.605 --> 00:01:40.825
elements in different ways
within an array, okay?

24
00:01:40.825 --> 00:01:47.050
We have find that probably you have
used before because it's part of ES6.

25
00:01:47.050 --> 00:01:52.549
Will find an element matching one
particular lambda expression or

26
00:01:52.549 --> 00:01:55.798
function that you pass as an argument.

27
00:01:55.798 --> 00:02:01.113
That now we have also findIndex,
that we returned the Index

28
00:02:01.113 --> 00:02:06.765
of the first element that matches
one particular expression.

29
00:02:06.765 --> 00:02:12.245
FindLast, that will find the last one,
not the first one.

30
00:02:12.245 --> 00:02:17.040
And the findLastIndex,
that will not return you the value,

31
00:02:17.040 --> 00:02:21.748
but the index of the last one,
so we will start from behind.

32
00:02:21.748 --> 00:02:23.915
Again, nothing really complicated,

33
00:02:23.915 --> 00:02:27.731
we just add new methods that we have
to find elements within an array.

34
00:02:27.731 --> 00:02:31.358
At, it's weird because you say,
okay, what do I need the at?

35
00:02:31.358 --> 00:02:35.543
The at will let you get
an element at one position, but

36
00:02:35.543 --> 00:02:38.433
you can use negative values as well.

37
00:02:38.433 --> 00:02:43.862
So, for example, if I say -1 here is
getting me 4, because it's the last one.

38
00:02:43.862 --> 00:02:47.877
So, it's a quick way to access

39
00:02:47.877 --> 00:02:52.672
the last element of an array, okay?

40
00:02:52.672 --> 00:02:54.991
Nothing really, really important.

41
00:02:54.991 --> 00:02:59.161
A stable sort is not even something
that has changed in the API.

42
00:02:59.161 --> 00:03:04.949
This is from 2018, I mean, it's sorting,
which is okay, so what's the difference?

43
00:03:06.429 --> 00:03:09.799
The difference has to do with what happens
when you have, for example, two 1s here.

44
00:03:11.189 --> 00:03:12.249
Which one goes first?

45
00:03:14.389 --> 00:03:16.709
And probably you're thinking,
well, what's the deal with that?

46
00:03:16.709 --> 00:03:19.029
Why is this important?

47
00:03:19.029 --> 00:03:21.306
Well, with numbers it's not important.

48
00:03:21.306 --> 00:03:25.447
But when you have objects,
maybe they are semantically equal,

49
00:03:25.447 --> 00:03:30.546
they have different IDs,
they're pointing to different objects.

50
00:03:30.546 --> 00:03:32.615
So, each browser so far,

51
00:03:32.615 --> 00:03:38.646
was using their own method to pick what
happens when you have the same value.

52
00:03:38.646 --> 00:03:44.214
So, sometimes you were not getting
the same order in different browsers.

53
00:03:44.214 --> 00:03:48.873
So, now the the implementation of
the ECMAScript has a guideline

54
00:03:48.873 --> 00:03:53.703
which explicitly said that they
should be returned in the same order

55
00:03:53.703 --> 00:03:56.937
that they are defined
in the original array.

56
00:03:56.937 --> 00:04:03.591
So in this case this one should be first,
and this one should be second.

57
00:04:03.591 --> 00:04:09.156
Again, the API is just the same,
they're just changing the wording or

58
00:04:09.156 --> 00:04:13.634
the explanation,
the implementation for the browser.

59
00:04:13.634 --> 00:04:16.177
Change by Copy,
this is the last one on collections.

60
00:04:16.177 --> 00:04:20.629
Change by Copy is actually interesting,

61
00:04:20.629 --> 00:04:24.826
because so far we have methods to sort,

62
00:04:24.826 --> 00:04:29.927
as we saw before,
to reverse or splice arrays.

63
00:04:29.927 --> 00:04:33.280
But they were mutating the same array.

64
00:04:33.280 --> 00:04:38.632
So if I execute numbers.sort(),

65
00:04:38.632 --> 00:04:43.587
this is changing numbers.

66
00:04:43.587 --> 00:04:46.957
So, it's changing the array,
it's sorting the array.

67
00:04:46.957 --> 00:04:51.273
Well, now we have a way,
instead of changing to mutate that array,

68
00:04:51.273 --> 00:04:53.027
to receive another array.

69
00:04:54.137 --> 00:04:56.253
In this case, for example,
with reverse numbers.

70
00:04:56.253 --> 00:05:01.198
So, if I run this,
I have the reverse numbers, but

71
00:05:01.198 --> 00:05:05.917
also I have the original number,
so I keep both.

72
00:05:05.917 --> 00:05:08.527
With sort we have the same thing.

73
00:05:08.527 --> 00:05:15.553
Instead of doing sort, so if I sort,
you can see both are 1, 2, 3.

74
00:05:15.553 --> 00:05:21.179
If I say toSort,
now I keep the original one,

75
00:05:21.179 --> 00:05:25.332
that's the difference, okay?

76
00:05:25.332 --> 00:05:28.999
So, this is behavior that we already have,
but

77
00:05:28.999 --> 00:05:34.223
now we have another method that
actually returns a new array.

78
00:05:34.223 --> 00:05:37.338
This is from ES2023, okay?

79
00:05:37.338 --> 00:05:40.987
So, it's actually pretty, pretty new.

80
00:05:40.987 --> 00:05:42.131
Makes sense?

81
00:05:42.131 --> 00:05:46.364
The same happens with a splice.

82
00:05:46.364 --> 00:05:51.305
When I make changes here using splice,
it will create a new array with

83
00:05:51.305 --> 00:05:55.663
some elements removed or
replaced, that's the difference.

84
00:05:55.663 --> 00:06:00.406
And then with will actually

85
00:06:00.406 --> 00:06:05.977
replace one particular index.

86
00:06:05.977 --> 00:06:09.981
In this case is changing
the third element with the 10.

87
00:06:09.981 --> 00:06:12.513
So I'm getting a new array,

88
00:06:12.513 --> 00:06:18.429
a copy of the array with that
element changed, is that all, okay?

89
00:06:18.429 --> 00:06:25.863
So, that's everything we have in ES6+
to work with arrays and collections.

90
00:06:25.863 --> 00:06:30.306
&gt;&gt; Student: Do you think that the goal of
the ECMAScript team is to move JavaScript

91
00:06:30.306 --> 00:06:33.533
closer to TypeScript and
eventually replace it?

92
00:06:35.303 --> 00:06:39.811
&gt;&gt; Maximiliano Firtman: So, for
the question, if the ECMAScript team is,

93
00:06:39.811 --> 00:06:47.302
let's say, removing the gap or reducing
the gap between JavaScript and TypeScript.

94
00:06:47.302 --> 00:06:50.438
I don't think they're
moving towards that goal.

95
00:06:50.438 --> 00:06:54.402
Sometimes it feels that way because
sometimes, for example, for

96
00:06:54.402 --> 00:06:57.233
private properties as the static keyword,
but

97
00:06:57.233 --> 00:07:00.292
they're not copying how
TypeScript defines it.

98
00:07:00.292 --> 00:07:04.429
TypeScript is more a mix between C# and
JavaScript.

99
00:07:04.429 --> 00:07:08.345
So it's JavaScript, but
with some C# ideas in terms of the syntax.

100
00:07:08.345 --> 00:07:14.393
And I don't think the ECMAScript
team is going that way, but

101
00:07:14.393 --> 00:07:21.517
we will see some similar implementations
at many points in the future.

