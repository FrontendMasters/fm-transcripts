WEBVTT

1
00:00:00.000 --> 00:00:00.896
&gt;&gt; Maximiliano Firtman: This is the lab,

2
00:00:00.896 --> 00:00:03.717
the only one that I will
do completely from scratch.

3
00:00:03.717 --> 00:00:06.557
So you don't need to download anything,
in case you wanna follow along.

4
00:00:06.557 --> 00:00:11.660
It's not a big deal, it's gonna be
a very simple example of modules, okay?

5
00:00:11.660 --> 00:00:16.630
The rest of the examples we will
jump directly into the URL that we

6
00:00:16.630 --> 00:00:21.708
mentioned before but this one I
will get out, I will open BS code.

7
00:00:21.708 --> 00:00:24.620
I'm in an empty folder, nothing is here.

8
00:00:24.620 --> 00:00:28.952
I'm going to create a new index HML file,
and

9
00:00:28.952 --> 00:00:32.831
I'm going to create a basic HML, okay?

10
00:00:32.831 --> 00:00:37.660
Nothing fancy, something very simple, and

11
00:00:37.660 --> 00:00:42.623
I will add a script
source script1.js okay?

12
00:00:42.623 --> 00:00:44.016
I will save this.

13
00:00:44.016 --> 00:00:49.083
And of course, I don't have that file,
script1.js so I will Ctrl click

14
00:00:49.083 --> 00:00:54.903
on Windows command, click on the Mac, on
my BS code, I will create the file, okay?

15
00:00:54.903 --> 00:01:00.632
And I can say, console,
low, I'm script1, okay?

16
00:01:00.632 --> 00:01:03.905
Nothing fancy, something very simple.

17
00:01:03.905 --> 00:01:06.917
So is this a module?

18
00:01:06.917 --> 00:01:11.193
Actually, when you're reading a module
you don't know if it's a module or not.

19
00:01:11.193 --> 00:01:15.561
Because actually a module
is not the file itself,

20
00:01:15.561 --> 00:01:21.699
it's how you imported the file, or
how the engine imported the file.

21
00:01:21.699 --> 00:01:26.465
When you're looking at the file, you
don't know if it's a module or not, okay?

22
00:01:26.465 --> 00:01:31.393
In fact, I am not actually
loading that file as a module.

23
00:01:31.393 --> 00:01:38.380
So, in this case, if I execute this,
it's not going to be executed as a module.

24
00:01:38.380 --> 00:01:42.722
So I need to add type = module.

25
00:01:42.722 --> 00:01:47.019
So if you don't add this, that's fine.

26
00:01:47.019 --> 00:01:49.105
It's not a module, okay?

27
00:01:49.105 --> 00:01:53.289
So now it's a module and because it's

28
00:01:53.289 --> 00:01:58.139
a module I can import
other modules as well.

29
00:01:58.139 --> 00:02:02.263
So I'm going to create three modules here,

30
00:02:02.263 --> 00:02:06.505
script1, script2.js, script3.js.

31
00:02:06.505 --> 00:02:09.861
So very simple,
very simple to understand the concepts.

32
00:02:09.861 --> 00:02:15.972
And everyone will just
say in the console m1,

33
00:02:15.972 --> 00:02:22.561
m2, m3, okay, nothing really complicated.

34
00:02:22.561 --> 00:02:25.125
Shot three messages in the console.

35
00:02:25.125 --> 00:02:31.540
So of course I can go to my index HTML and
add three scripts, I can do that.

36
00:02:31.540 --> 00:02:36.850
If I do that,
I'm creating the three different trees.

37
00:02:36.850 --> 00:02:41.708
Okay, actually it's one three in
the context, the whole context but

38
00:02:41.708 --> 00:02:45.495
in this case we are opening
three different trees, but

39
00:02:45.495 --> 00:02:48.558
I don't need to do that,
I can just import.

40
00:02:48.558 --> 00:02:53.921
For example, from a script one
I can import ./script2 and

41
00:02:53.921 --> 00:02:58.865
look at this BS code by default,
give you a suggestion,

42
00:02:58.865 --> 00:03:02.040
that suggestion is not gonna work.

43
00:03:02.040 --> 00:03:08.482
If I press return,
it's not adding the.js, okay?

44
00:03:08.482 --> 00:03:13.636
So for .js, it may work, it depends if
you're going through a bubble or not.

45
00:03:13.636 --> 00:03:16.652
If you're going through a bubble for
the browser, it will work, but

46
00:03:16.652 --> 00:03:18.631
it's not gonna work in
my browser directly.

47
00:03:18.631 --> 00:03:21.016
I need to add the node.js.

48
00:03:21.016 --> 00:03:26.213
By the way, I'm not specifying
what I'm importing, actually.

49
00:03:26.213 --> 00:03:26.859
Can I do that?

50
00:03:26.859 --> 00:03:28.057
Yes, you can.

51
00:03:28.057 --> 00:03:32.408
It's not mandatory to
say that I wanna import

52
00:03:32.408 --> 00:03:37.687
something in my context,
in my local module context.

53
00:03:37.687 --> 00:03:39.994
And that import sounds weird, I know.

54
00:03:39.994 --> 00:03:42.062
Even if you have experience
working with modules,

55
00:03:42.062 --> 00:03:43.851
you feel like something's missing there.

56
00:03:43.851 --> 00:03:46.587
But let's run this.

57
00:03:46.587 --> 00:03:51.421
So, I will open a trusted terminal here,
and

58
00:03:51.421 --> 00:03:54.482
I'm going to say npx serve.

59
00:03:54.482 --> 00:03:57.880
I also have live server here, plug in.

60
00:03:57.880 --> 00:04:01.800
It's just opening this in a web server,
actually,

61
00:04:01.800 --> 00:04:05.464
I can open this directly
with the file protocol.

62
00:04:05.464 --> 00:04:08.735
So of course, it's an empty page, but

63
00:04:08.735 --> 00:04:13.309
if I open the console,
I have a 404 on the file icon.

64
00:04:13.309 --> 00:04:16.776
I don't care, but I can see this.

65
00:04:16.776 --> 00:04:19.595
You can see the three
scripts are being loaded and

66
00:04:19.595 --> 00:04:22.963
I'm pretty sure that some of
you were not expecting this,

67
00:04:22.963 --> 00:04:27.314
because I didn't import anything in
particular from each module, okay?

68
00:04:27.314 --> 00:04:31.250
So I'm not saying I wanna
import the variable, actually,

69
00:04:31.250 --> 00:04:34.807
I don't have anything
exported from these modules.

70
00:04:34.807 --> 00:04:39.358
I have three modules, but
just console log messages.

71
00:04:39.358 --> 00:04:46.029
And now that's a tree, and you can see
the order in which they were executed.

72
00:04:46.029 --> 00:04:52.115
It's also not the order that you were
expecting, probably, I guess, so why?

73
00:04:52.115 --> 00:04:52.682
Look at this.

74
00:04:52.682 --> 00:04:56.865
I have an HTML that is loading a script1,
so

75
00:04:56.865 --> 00:05:01.960
we're expecting that to be executed first,
right?

76
00:05:01.960 --> 00:05:06.536
Because it's the first entry point.

77
00:05:06.536 --> 00:05:11.020
And 1 is importing 2 and 3.

78
00:05:11.020 --> 00:05:15.545
But actually, the execution
because JavaScript has two phases,

79
00:05:15.545 --> 00:05:17.654
I'm not sure if you know that.

80
00:05:17.654 --> 00:05:23.445
When JavaScript is actually executing
your code, it has a two-phase process.

81
00:05:23.445 --> 00:05:29.484
In the first phase, for example,
it's recognizing the import statements.

82
00:05:29.484 --> 00:05:31.312
And it says, you have an import?

83
00:05:31.312 --> 00:05:34.105
Okay, let's go and import that, okay?

84
00:05:34.105 --> 00:05:36.585
And then it's executing the file.

85
00:05:36.585 --> 00:05:41.818
So that's why the order is 2, 3, and 1.

86
00:05:41.818 --> 00:05:42.352
&gt;&gt; Maximiliano Firtman: Yes.
&gt;&gt; Male Speaker 1: Now,

87
00:05:42.352 --> 00:05:47.297
would that order change if you put
the line four console log in script1 up to

88
00:05:47.297 --> 00:05:48.484
line one before?

89
00:05:48.484 --> 00:05:50.413
&gt;&gt; Maximiliano Firtman: So
you're saying what happens if I change

90
00:05:50.413 --> 00:05:51.410
the order like this?

91
00:05:51.410 --> 00:05:52.110
Will it work?

92
00:05:52.110 --> 00:05:56.659
First, for some of you, I think
that it will hurt your eyes, right?

93
00:05:56.659 --> 00:06:00.491
Like some of you are expecting
all the imports to be at the top.

94
00:06:00.491 --> 00:06:06.350
Let's see, if I execute this, it's not
changing the execution order, why?

95
00:06:06.350 --> 00:06:08.113
Because of the two phases.

96
00:06:08.113 --> 00:06:15.276
So on the first phase, JavaScript is
not executing the JavaScript code.

97
00:06:15.276 --> 00:06:18.020
It's just picking some things.

98
00:06:18.020 --> 00:06:20.742
For example, imports.

99
00:06:20.742 --> 00:06:22.720
It's also variables.

100
00:06:22.720 --> 00:06:25.474
Defining variables and
functions is picking them.

101
00:06:25.474 --> 00:06:31.650
And then after it's in this case,
downloading all the other scripts and

102
00:06:31.650 --> 00:06:37.230
executing the scripts,
it will execute the console log, okay?

103
00:06:37.230 --> 00:06:39.022
Another question for you to think about.

104
00:06:39.022 --> 00:06:41.908
Again, if you have
experience with modules,

105
00:06:41.908 --> 00:06:45.467
maybe you haven't thought
about this in these details.

106
00:06:45.467 --> 00:06:49.923
What happens if a script2 is
also importing a script3?

107
00:06:52.788 --> 00:06:57.762
&gt;&gt; Maximiliano Firtman: Will I
get two console logs?

108
00:06:57.762 --> 00:07:02.940
So saying I'm a script3 or only 1,
&gt;&gt; Maximiliano Firtman: No

109
00:07:02.940 --> 00:07:06.112
idea I am seeing phases of no idea.

110
00:07:06.112 --> 00:07:10.962
So again,
I have a script1 is importing 2 and 3, and

111
00:07:10.962 --> 00:07:14.134
now 2 is also importing 3, okay?

112
00:07:14.134 --> 00:07:16.669
So this is what we have right now.

113
00:07:16.669 --> 00:07:23.266
I'm going to refresh, and I'm having
something similar but in different order.

114
00:07:23.266 --> 00:07:28.856
But the important part here is
that three is not executing twice.

115
00:07:28.856 --> 00:07:31.250
So if a module is already in the tree,

116
00:07:31.250 --> 00:07:36.678
it doesn't matter if someone else is
importing it, it's not executing it again.

117
00:07:39.851 --> 00:07:41.406
&gt;&gt; Maximiliano Firtman: Okay, makes sense?

118
00:07:41.406 --> 00:07:46.106
So you can safely add or
import as many modules as you want

119
00:07:46.106 --> 00:07:50.106
from any module without
caring too much about

120
00:07:50.106 --> 00:07:55.114
what if other module is also
important it doesn't matter.

121
00:07:55.114 --> 00:08:01.063
It will be loaded only once and
executed only once, okay?

122
00:08:01.063 --> 00:08:02.305
So that's the tree,

123
00:08:02.305 --> 00:08:06.310
there is no simple way to see the tree
actually visually see the tree.

124
00:08:06.310 --> 00:08:12.448
So, doing counselor is a way to see the
order in which they are executed, okay?

125
00:08:12.448 --> 00:08:15.198
But okay, it makes sense?

126
00:08:17.825 --> 00:08:21.344
&gt;&gt; Male Speaker 2: Is this
the same as hoisting?

127
00:08:21.344 --> 00:08:25.130
&gt;&gt; Maximiliano Firtman: Hoisting,
so, it's not the same as hoisting.

128
00:08:25.130 --> 00:08:28.719
But hoisting has to do with the two
phases that I mentioned before.

129
00:08:28.719 --> 00:08:34.209
For example, hoisting will let
you create a variable x and

130
00:08:34.209 --> 00:08:38.811
use the variable before the declaration,
why?

131
00:08:38.811 --> 00:08:41.218
Because there are these two phases.

132
00:08:41.218 --> 00:08:47.080
So hoisting had to do with this,
in the first phase it recognizes,

133
00:08:47.080 --> 00:08:49.931
we will have an x variable, okay?

134
00:08:49.931 --> 00:08:52.353
And then on the second phase,
it executes that.

135
00:08:52.353 --> 00:08:53.775
So x is a variable.

136
00:08:53.775 --> 00:08:55.925
So it says, okay, it's that.

137
00:08:55.925 --> 00:08:58.412
So it's not the same as hoisting, but

138
00:08:58.412 --> 00:09:03.255
the relationship is actually that part,
this two-phase declaration.

139
00:09:03.255 --> 00:09:08.988
The imports are going through the first
phase before executing, okay?

140
00:09:08.988 --> 00:09:11.107
But typically you don't do this.

141
00:09:11.107 --> 00:09:12.333
I mean, do we have use case?

142
00:09:12.333 --> 00:09:15.720
In fact,
if you have ever played with modules,

143
00:09:15.720 --> 00:09:20.717
do you remember any use case where
you were importing like this without

144
00:09:20.717 --> 00:09:24.032
specifying something
here with the from key?

145
00:09:29.010 --> 00:09:30.685
&gt;&gt; Male Speaker 1: CSS files for long.

146
00:09:30.685 --> 00:09:32.846
&gt;&gt; Maximiliano Firtman: Can you
import CSS files in JavaScript?

147
00:09:32.846 --> 00:09:33.598
What's that?

148
00:09:33.598 --> 00:09:35.416
&gt;&gt; Male Speaker 1: That might be with.

149
00:09:35.416 --> 00:09:38.441
&gt;&gt; Maximiliano Firtman: That's
probably Babel with React or

150
00:09:38.441 --> 00:09:43.813
with a framework that will let you
import a CSS file or an SVG file.

151
00:09:43.813 --> 00:09:49.060
And then use that, that then will
replace that import into something else.

152
00:09:49.060 --> 00:09:50.877
But that's definitely not ECMAScript.

153
00:09:50.877 --> 00:09:55.128
In ECMAScript, I mean,
if you try to import a CSS file,

154
00:09:55.128 --> 00:10:01.292
you will get a syntax error, because it
will try to parse your CSS as JavaScript.

155
00:10:01.292 --> 00:10:03.932
And yeah, it's not JavaScript.

156
00:10:03.932 --> 00:10:08.947
So one use case to these
imports is web components.

157
00:10:08.947 --> 00:10:15.693
If you're using web components and
you create one file per component,

158
00:10:15.693 --> 00:10:22.335
the only thing you need is to have
them in the tree, in the module tree.

159
00:10:22.335 --> 00:10:26.259
And you don't need to even
import the component, okay?

160
00:10:26.259 --> 00:10:30.409
Because typically component
goes to a new HTML tag.

161
00:10:30.409 --> 00:10:34.862
So it's registered in the systems
with a different system.

162
00:10:34.862 --> 00:10:39.588
So that's a way, but
most of the time what you are used to is

163
00:10:39.588 --> 00:10:43.848
that I know script3,
we create a function, okay?

164
00:10:43.848 --> 00:10:47.934
And the function will
return an item three.

165
00:10:47.934 --> 00:10:50.054
We have an export declaration,

166
00:10:50.054 --> 00:10:53.829
that's the most common way
to work with modules, okay?

167
00:10:53.829 --> 00:10:59.953
So then from a script2, you can import and
specify in curly braces,

168
00:10:59.953 --> 00:11:05.233
all the items that you actually
want to import Import from,

169
00:11:05.233 --> 00:11:08.522
and you need to use the from keyword.

170
00:11:08.522 --> 00:11:12.944
So you're going to import, and here you
will say test three from a script3.

171
00:11:12.944 --> 00:11:19.349
So then you can execute
test three from another.

172
00:11:19.349 --> 00:11:21.481
From a script2, you can execute or

173
00:11:21.481 --> 00:11:26.103
you can create an object from a class
declaration that is in a different file,

174
00:11:26.103 --> 00:11:30.674
or you can use a value variable and
object that was defined in the other file.

175
00:11:30.674 --> 00:11:32.620
That's the most common scenario.

176
00:11:32.620 --> 00:11:35.023
And can I use it from script1?

177
00:11:35.023 --> 00:11:39.047
No, unless I also add
something similar here.

178
00:11:39.047 --> 00:11:41.362
There three from.

179
00:11:43.132 --> 00:11:46.003
&gt;&gt; Maximiliano Firtman: On every module
that you wanna use that function you

180
00:11:46.003 --> 00:11:49.355
need to explicitly say when I
import that function, okay?

181
00:11:49.355 --> 00:11:53.859
And that's probably something that
you have already used before.

182
00:11:53.859 --> 00:11:59.123
And the default one is one instead
of exporting different things,

183
00:11:59.123 --> 00:12:05.609
you use export default and then you pass
only one value can be a class declaration,

184
00:12:05.609 --> 00:12:10.131
a variable, it can be a function,
or it can be an object.

185
00:12:10.131 --> 00:12:16.088
So then I can export an object and
that object I have several properties,

186
00:12:16.088 --> 00:12:21.767
the name, I'm a script2, and
then I have a function that is a test.

187
00:12:21.767 --> 00:12:24.205
Let's say it's a function
that will do something.

188
00:12:26.642 --> 00:12:30.438
&gt;&gt; Maximiliano Firtman: And now I'm
exporting an object, only one object.

189
00:12:30.438 --> 00:12:34.616
And from the other side, when you import.

190
00:12:34.616 --> 00:12:40.631
For example, from here when you import you
just specify one name for that object.

191
00:12:40.631 --> 00:12:45.269
And this is the pattern where
we can discuss if that object

192
00:12:45.269 --> 00:12:50.209
will be capitalized or not,
like script2 capital S or not.

193
00:12:50.209 --> 00:12:51.545
It's up to you.

194
00:12:51.545 --> 00:12:55.101
But then you can say a script2 dot and
you have test and

195
00:12:55.101 --> 00:12:59.010
you have name
&gt;&gt; Maximiliano Firtman: Okay,

196
00:12:59.010 --> 00:13:04.008
that's the difference, so
if you have calibrases it's not a default

197
00:13:04.008 --> 00:13:09.105
export it's just a series of exports
available from the other module.

198
00:13:09.105 --> 00:13:14.945
If it doesn't contain the calibrases,
it's just a default export.

199
00:13:14.945 --> 00:13:16.831
Actually, that's all for modules.

200
00:13:16.831 --> 00:13:18.344
It's not so complicated.

201
00:13:18.344 --> 00:13:23.128
It's just to understand how
you can now modularize all

202
00:13:23.128 --> 00:13:27.912
your scripts have in mind
this works also node.js with

203
00:13:27.912 --> 00:13:33.428
everything we've mentioned on
how to enable modules before.

