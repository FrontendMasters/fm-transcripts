WEBVTT

1
00:00:00.237 --> 00:00:05.175
&gt;&gt; Maximiliano Firtman: Remember the rest
and the spread operators we see before,

2
00:00:05.175 --> 00:00:07.200
well, from 2018.

3
00:00:07.200 --> 00:00:11.866
It's also available on
inside objects before we saw

4
00:00:11.866 --> 00:00:15.380
them in arguments and arrays.

5
00:00:15.380 --> 00:00:19.150
Well, now the same thing
can be used within objects.

6
00:00:19.150 --> 00:00:24.208
So for example here, I can use this
to collect with the rest operator,

7
00:00:24.208 --> 00:00:26.279
the rest of the properties.

8
00:00:26.279 --> 00:00:28.388
So here, we are mixing here.

9
00:00:28.388 --> 00:00:33.559
So remember when you have a code block at

10
00:00:33.559 --> 00:00:40.306
the left of an assignment
this is a destructuring.

11
00:00:40.306 --> 00:00:45.537
So I'm destructuring the object
that I have at the right, okay?

12
00:00:45.537 --> 00:00:51.237
I'm destructuring here in three objects,
A, B, and rest.

13
00:00:52.427 --> 00:00:56.654
A will have the A property,
B will have the B property, and

14
00:00:56.654 --> 00:01:00.123
then it will create another
object with C and D.

15
00:01:00.123 --> 00:01:05.179
So if I run this,
I have an object only with C and D, okay?

16
00:01:05.179 --> 00:01:09.862
In this case,
I'm using the rest operator over an object

17
00:01:09.862 --> 00:01:13.329
with the same idea as we saw before.

18
00:01:13.329 --> 00:01:17.756
And talking about the spread operator
that is the same operator but

19
00:01:17.756 --> 00:01:21.720
used in a different context,
we can also combine objects.

20
00:01:21.720 --> 00:01:22.881
For example,

21
00:01:22.881 --> 00:01:28.492
I can say that I have a combined object
that will combine object one and

22
00:01:28.492 --> 00:01:35.110
object two into one object that will
have all the properties in one object.

23
00:01:35.110 --> 00:01:41.467
Remember, these operators are actually
making new objects or new arrays.

24
00:01:41.467 --> 00:01:44.007
Actually, it's not the operator
that's making a new.

25
00:01:44.007 --> 00:01:48.127
The new object is because we
are using the object literal syntax.

26
00:01:48.127 --> 00:01:49.997
That's making a new object.

27
00:01:49.997 --> 00:01:55.017
But I'm saying that this is not
changing object 1 or object 2.

28
00:01:55.017 --> 00:02:01.128
This is just spreading the properties
of object 1 or object 2 there.

29
00:02:02.278 --> 00:02:07.148
This can be used to
create quick decorators.

30
00:02:07.148 --> 00:02:10.838
For example, let me remove this.

31
00:02:10.838 --> 00:02:15.698
Let's say you have something
that is sometimes common.

32
00:02:15.698 --> 00:02:20.399
You have for example a to-do,
let's say you have a to-do list.

33
00:02:20.399 --> 00:02:24.394
So I have a to-do item and
a to do item,and a to-do item,

34
00:02:24.394 --> 00:02:28.409
you say that it's an object
that will contain the title.

35
00:02:30.659 --> 00:02:35.129
So I have a to-do item that contains the
title that I need to finish the workshop,

36
00:02:35.129 --> 00:02:38.339
finish workshop, and
if it's done, I will say false.

37
00:02:38.339 --> 00:02:39.085
Okay, that's an object.

38
00:02:40.116 --> 00:02:43.344
Well, sometimes there is a pattern,
a design pattern,

39
00:02:43.344 --> 00:02:46.385
known as the decorator
pattern that decorates that.

40
00:02:46.385 --> 00:02:52.362
So then, I can say I have a decorated
to-do item that is gonna be,

41
00:02:52.362 --> 00:02:56.076
first I'm going to spread to-do item.

42
00:02:56.076 --> 00:03:02.521
So I'm spreading it, and I will add
a new property, such as, for example,

43
00:03:02.521 --> 00:03:07.683
a DOM element that will be attached to it,
an li, whatever.

44
00:03:09.253 --> 00:03:11.761
So in this,
I'm spreading the other object, and

45
00:03:11.761 --> 00:03:13.923
I'm actually making a clone in this case.

46
00:03:13.923 --> 00:03:15.753
So this is another object.

47
00:03:15.753 --> 00:03:17.863
It's not pointing to the object, okay?

48
00:03:17.863 --> 00:03:21.515
So I'm not creating a reference to
the object, I'm creating a new one.

49
00:03:21.515 --> 00:03:25.420
This is a new object that is
spreading these two properties and

50
00:03:25.420 --> 00:03:27.231
it's also adding a new one.

51
00:03:29.397 --> 00:03:33.192
&gt;&gt; Maximiliano Firtman: Okay, it's
just the same spread and to be honest,

52
00:03:33.192 --> 00:03:39.112
that most literature to these days about
the spread operators are talking about

53
00:03:39.112 --> 00:03:45.347
the array, the arguments, and the objects,
it doesn't matter the version.

54
00:03:45.347 --> 00:03:47.843
Because again, at one point,

55
00:03:47.843 --> 00:03:53.417
we don't care too much about the year
of which this was added, okay?

56
00:03:53.417 --> 00:03:57.497
We take safely up to ES2022, for example,

57
00:03:57.497 --> 00:04:03.839
typically we safely talk about things
maybe one to two years before.

58
00:04:03.839 --> 00:04:05.799
So if you are in 2030,

59
00:04:05.799 --> 00:04:10.892
we will safely say that everything
in ES 2028 is there somehow.

