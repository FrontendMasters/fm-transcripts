WEBVTT

1
00:00:00.000 --> 00:00:03.919
&gt;&gt; Maximiliano Firtman: Okay, so
next is about static fields and methods,

2
00:00:03.919 --> 00:00:09.663
that it's actually not really so
important because it wasn't actually so

3
00:00:09.663 --> 00:00:12.323
complicated to do it before this.

4
00:00:12.323 --> 00:00:13.840
So what is a static field?

5
00:00:13.840 --> 00:00:18.686
So if I have a class for example,
let's say I have a person or that and

6
00:00:18.686 --> 00:00:23.803
I say well, I want to define a property
that applies to all the persons.

7
00:00:23.803 --> 00:00:29.673
For example, I can say person maxAge.

8
00:00:29.673 --> 00:00:35.036
Let's say 150,
let's be optimistic about this, so 150.

9
00:00:35.036 --> 00:00:39.233
In this case, it's a property that
is applied to all the persons.

10
00:00:39.233 --> 00:00:43.593
And the way to do that was to create
a dynamic property like this before,

11
00:00:43.593 --> 00:00:48.547
but it's actually outside of the body,
it's not within the body declaration.

12
00:00:48.547 --> 00:00:52.092
So now the difference
that we can say static,

13
00:00:52.092 --> 00:00:57.051
maxAge, and we can put a value here,
that's the difference.

14
00:00:57.051 --> 00:01:00.447
So now we define that within the body,

15
00:01:00.447 --> 00:01:04.813
which sounds and
the same happens with methods.

16
00:01:04.813 --> 00:01:08.773
So we can have a method that applies,
I don't know, like list all,

17
00:01:08.773 --> 00:01:10.244
that will do something.

18
00:01:10.244 --> 00:01:15.702
Well, now this applies to not one person,

19
00:01:15.702 --> 00:01:23.294
so if I have here, John,
John.lIstAll is wrong, right?

20
00:01:23.294 --> 00:01:26.734
Because it's not an instance method,

21
00:01:26.734 --> 00:01:31.635
it's person.listAll because
it's an a static method

22
00:01:31.635 --> 00:01:36.653
like in Java or
other languages where you do have static.

23
00:01:36.653 --> 00:01:38.333
Okay, make sense?

24
00:01:38.333 --> 00:01:40.080
The thing from ES2022.

25
00:01:40.080 --> 00:01:44.238
That is kind of really, really new.

26
00:01:44.238 --> 00:01:51.604
Have in mind that ES2022 was
the spec was finalized June 2022.

27
00:01:51.604 --> 00:01:55.621
That doesn't mean that browsers
started to implement that,

28
00:01:55.621 --> 00:01:59.960
that at that precise moment,
they take some months and versions.

29
00:01:59.960 --> 00:02:07.362
So maybe at the end of 2023 this was actually
implemented in most of the browsers.

30
00:02:07.362 --> 00:02:08.379
Okay, makes sense?

31
00:02:08.379 --> 00:02:12.161
And the next one I actually,
I can continue here,

32
00:02:12.161 --> 00:02:18.211
it's actually also new in JavaScript,
it's called initialization block.

33
00:02:18.211 --> 00:02:25.432
So actually you say static,
you open a code block and you write code.

34
00:02:25.432 --> 00:02:28.588
You say what?

35
00:02:28.588 --> 00:02:29.569
What is that?

36
00:02:29.569 --> 00:02:31.193
What is that for?

37
00:02:31.193 --> 00:02:37.310
It's actually called, it's like
a constructor for the static class and

38
00:02:37.310 --> 00:02:42.060
not for instances, but
it's going to be executed once.

39
00:02:42.060 --> 00:02:44.939
Okay, it's a singleton execution.

40
00:02:44.939 --> 00:02:48.846
So everything you put here consol.log

41
00:02:48.846 --> 00:02:53.889
("I am in the static
initialization block") that's

42
00:02:53.889 --> 00:02:58.931
going to be executed only
once in the lifetime of

43
00:02:58.931 --> 00:03:03.990
your app when the class is being parsed,
okay?

44
00:03:03.990 --> 00:03:06.372
Make sense?

45
00:03:06.372 --> 00:03:10.520
Without that, it's something that
you put outside so or after.

46
00:03:10.520 --> 00:03:15.221
So it's just code that you put after
defining the class, but now it's within

47
00:03:15.221 --> 00:03:19.726
the body, so it's semantically attached
to the creation of that class.

48
00:03:23.127 --> 00:03:24.168
&gt;&gt; Maximiliano Firtman: Okay, make sense?

49
00:03:24.168 --> 00:03:25.828
It's just that.

50
00:03:25.828 --> 00:03:31.838
It's not a big deal, but it's actually
something that needs to be processed

51
00:03:31.838 --> 00:03:37.493
by our minds to get used to that,
I need to find use cases for that as well.

52
00:03:37.493 --> 00:03:42.236
Okay, so sometimes now, when you
create classes and you're using OOP,

53
00:03:42.236 --> 00:03:45.754
some code that you have just
in the body of your module,

54
00:03:45.754 --> 00:03:48.220
that code, that is not in a function.

55
00:03:48.220 --> 00:03:52.423
It's just like global
code that you have there,

56
00:03:52.423 --> 00:03:59.305
now you can put that within the static
block that will make more semantic sense.

57
00:03:59.305 --> 00:04:01.814
That's the idea, okay?

58
00:04:01.814 --> 00:04:05.692
Such that they are, so that, well,
this code belongs to this class.

