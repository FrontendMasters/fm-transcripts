WEBVTT

1
00:00:00.390 --> 00:00:04.380
So this is the basics of options API.

2
00:00:04.380 --> 00:00:08.256
And so just to get people practicing with
it a little bit, what we're gonna do for

3
00:00:08.256 --> 00:00:12.210
this exercise is you're gonna use
the photos API from JSON placeholder.

4
00:00:12.210 --> 00:00:14.529
And what I want you to do is I want
you to render out the photo gallery.

5
00:00:14.529 --> 00:00:18.280
So I think there's 5,000 items
that's gonna come back for you.

6
00:00:18.280 --> 00:00:21.845
And you need to make sure that you can
loop through that, and then render out.

7
00:00:21.845 --> 00:00:23.805
I'd recommend rendering the thumbnail.

8
00:00:23.805 --> 00:00:26.651
So you'll basically inspect the data,
play around with it, have fun.

9
00:00:26.651 --> 00:00:31.103
Just to clarify for anyone, I know this
came with actually at the last workshop,

10
00:00:31.103 --> 00:00:33.399
I'm using TIG, which is a commandline.

11
00:00:33.399 --> 00:00:37.089
Basically, it enhances the experience,
so that rather than do git status, and

12
00:00:37.089 --> 00:00:40.090
then I have to manually add stuff,
I can basically do tig status.

13
00:00:40.090 --> 00:00:43.404
It gives me a little terminal UI for
me to work with and select files and

14
00:00:43.404 --> 00:00:47.635
see what's changed, for example, and then
I can manually stage things by pressing u,

15
00:00:47.635 --> 00:00:48.730
for example.

16
00:00:48.730 --> 00:00:51.290
So it's a nice, neat little terminal tool.

17
00:00:51.290 --> 00:00:53.092
But again, I'm not mistyping anything,

18
00:00:53.092 --> 00:00:56.090
just a neat little quality
of life improvement.

19
00:00:56.090 --> 00:01:03.642
Okay, let me comit this, comit
feature add todo list viewer example.

20
00:01:03.642 --> 00:01:08.790
Great, so now I'm gonna push
up 01-begin and 01-exercise.

21
00:01:08.790 --> 00:01:15.098
And so what you wanna do is you're gonna
wanna check out the 01-exercise branch.

22
00:01:15.098 --> 00:01:17.157
And that will give you the starting
point for you to go ahead and

23
00:01:17.157 --> 00:01:18.197
build out your photo gallery.

24
00:01:24.065 --> 00:01:26.226
Okay, so here we have our photo gallery.

25
00:01:26.226 --> 00:01:29.587
So just to sort of double check,
if you look, there's our app,

26
00:01:29.587 --> 00:01:31.720
yep, just h1 photo gallery.

27
00:01:31.720 --> 00:01:34.071
So let's go ahead and
configure some stuff, shall we?

28
00:01:34.071 --> 00:01:38.964
First thing first is we're gonna be
importing the defineNuxtComponent here.

29
00:01:38.964 --> 00:01:41.410
And actually, there was a question
earlier regarding this.

30
00:01:41.410 --> 00:01:46.383
So you might see here that there's this
hashtag app that's being imported from.

31
00:01:46.383 --> 00:01:49.457
And this looks a little bit different,
because you're probably expecting some

32
00:01:49.457 --> 00:01:51.410
sort of node module, or
some sort of library name.

33
00:01:51.410 --> 00:01:53.730
So why is it this?

34
00:01:53.730 --> 00:01:57.230
Basically what this is it's an
optimization from Nuxt that basically say,

35
00:01:57.230 --> 00:02:00.947
hey, I know that you're looking for
this stuff, so I'm gonna automatically do

36
00:02:00.947 --> 00:02:03.860
it for you and just provide a simple
way for you to reference it.

37
00:02:03.860 --> 00:02:06.313
So you don't have to go
call a specific library.

38
00:02:06.313 --> 00:02:10.100
So it's basically part of Nuxt's
performance enhancements.

39
00:02:10.100 --> 00:02:11.882
And we'll get more into
imports later with Nuxt, for

40
00:02:11.882 --> 00:02:14.073
those who might have looked a little
bit further when necessary.

41
00:02:14.073 --> 00:02:16.727
But for now, I want everyone to
just kind of understand where and

42
00:02:16.727 --> 00:02:19.690
how you can define those imports,
so you know where it's coming from.

43
00:02:21.200 --> 00:02:25.378
Okay, next thing next, we just gonna
define a default what, a default Nuxt

44
00:02:25.378 --> 00:02:30.171
component that we use that helper function
with, and then we're gonna have our data.

45
00:02:30.171 --> 00:02:31.481
And so our data is gonna contain what?

46
00:02:31.481 --> 00:02:34.321
Well, it's gonna contain an array,

47
00:02:34.321 --> 00:02:38.952
a photo gallery, so yeah,
I'm calling them photo gallery.

48
00:02:38.952 --> 00:02:41.415
And then for this photo gallery,
we're gonna have a methods, right,

49
00:02:41.415 --> 00:02:42.864
that's gonna actually fetch the thing.

50
00:02:42.864 --> 00:02:46.778
So I'll just call it fetchPhotoGallery.

51
00:02:46.778 --> 00:02:49.763
And inside of here,
we'll use our fetch method again.

52
00:02:49.763 --> 00:02:52.989
And this time we'll go ahead
use our jsonplaceholder.

53
00:02:52.989 --> 00:02:57.180
But, instead of todos,
I'm actually gonna call it photos.

54
00:02:57.180 --> 00:03:01.910
And so if you're wondering how I know this
is the path to fetch, this is not magic.

55
00:03:01.910 --> 00:03:04.480
Inside of here,
we look at the documentation.

56
00:03:04.480 --> 00:03:07.403
These are actually all the resources
that JSON placeholder provides for you.

57
00:03:07.403 --> 00:03:11.640
So I believe how can you use clones
are usually built using this.

58
00:03:11.640 --> 00:03:14.090
We can see there's posts,
there's comments.

59
00:03:14.090 --> 00:03:15.946
And what's nice is there actually
is some relation between them.

60
00:03:15.946 --> 00:03:19.892
So there'll be this comment belongs to
this post, which belongs to this user.

61
00:03:19.892 --> 00:03:23.691
So it's a nice little kinda fake
relational database for people to play

62
00:03:23.691 --> 00:03:27.500
around with, without the burden of
actually having to host anything.

63
00:03:27.500 --> 00:03:34.049
So again, hat tip off to the team who
maintains this, really nice to have.

64
00:03:35.190 --> 00:03:40.124
Okay, so once we have the thing, the thing
that I often forget, and only with my work

65
00:03:40.124 --> 00:03:44.380
with serverless functions that did I
think I finally broke myself of it.

66
00:03:44.380 --> 00:03:47.434
Is that every time you fetch something
from somewhere, most of the time you need

67
00:03:47.434 --> 00:03:49.679
to turn it into json before we
can actually make it useful.

68
00:03:49.679 --> 00:03:52.429
So you always have to remember
to then take that response and

69
00:03:52.429 --> 00:03:55.460
then basically jsonify it,
which is using the .json function.

70
00:03:56.470 --> 00:04:00.357
Once you do that, you can go ahead and
then take what's returned from that,

71
00:04:00.357 --> 00:04:03.351
which I just call the json object,
and this is where we go.

72
00:04:03.351 --> 00:04:08.794
This.photoGallery = json.

73
00:04:08.794 --> 00:04:11.695
Now, for those who don't like
chaining two different thens,

74
00:04:11.695 --> 00:04:14.555
there's nothing stopping you
from also doing this instead.

75
00:04:14.555 --> 00:04:18.958
So if I just comment this out,
you could also just say, all right, well,

76
00:04:18.958 --> 00:04:24.236
inside of this response, I'm just gonna
say this.photoGallery = response.json.

77
00:04:24.236 --> 00:04:25.812
That would technically work too.

78
00:04:25.812 --> 00:04:29.833
It's really just a stylistic preference
on seeing what you would prefer.

79
00:04:29.833 --> 00:04:33.134
So for now, I'll just keep it consistent
with what the way I did it earlier.

80
00:04:33.134 --> 00:04:37.276
But I think normally I probably would
do it the way I just did earlier,

81
00:04:37.276 --> 00:04:41.221
where I went ahead and
just kind of inlined everything together.

82
00:04:41.221 --> 00:04:44.297
But there is something
nice about making this.

83
00:04:44.297 --> 00:04:46.695
Usually you can tell it's very sequential.

84
00:04:46.695 --> 00:04:49.090
What are you doing with
each step fetching?

85
00:04:49.090 --> 00:04:51.035
Converting it to JSON, then assigning it.

86
00:04:51.035 --> 00:04:53.299
There's something valid,
very nice about that too.

87
00:04:53.299 --> 00:04:57.510
So again, not a right or wrong,
definitely a preferencing, okay?

88
00:04:57.510 --> 00:04:58.950
And so now that we have that,

89
00:04:58.950 --> 00:05:02.990
we can go ahead and add our button that
will go ahead and fetch set photo gallery.

90
00:05:04.430 --> 00:05:06.786
And then we'll just say Fetch Data again.

91
00:05:06.786 --> 00:05:09.882
And then this time, again, we're just
gonna assume we get that data for now.

92
00:05:09.882 --> 00:05:11.660
So we'll list it out.

93
00:05:11.660 --> 00:05:14.858
And so v-for="photo in photoGallery", and

94
00:05:14.858 --> 00:05:18.057
then the key here is it has
an ID just like before.

95
00:05:18.057 --> 00:05:23.860
So I'll say photo-id, so
it should be photo.id.

96
00:05:23.860 --> 00:05:27.130
And then there,
we will render out the photo.

97
00:05:27.130 --> 00:05:29.680
But actually, you know what,
let me do this real quick.

98
00:05:29.680 --> 00:05:30.890
Let's just save this.

99
00:05:32.570 --> 00:05:36.590
So we go ahead and click this, you'll see,
boom, a lot of stuff shows up.

100
00:05:36.590 --> 00:05:39.672
But, what you'll notice here is
that currently the way that images

101
00:05:39.672 --> 00:05:42.420
are being imported is via
this placeholder API.

102
00:05:42.420 --> 00:05:44.374
And so if you haven't used this before,

103
00:05:44.374 --> 00:05:48.160
it's basically a dynamic generation
of very simple blocked image.

104
00:05:48.160 --> 00:05:50.662
So if we were to use the URL
as our image source, so

105
00:05:50.662 --> 00:05:54.813
if I did img src, and then use the v-bind
syntax with the prefix of the colon to say

106
00:05:54.813 --> 00:05:58.930
that this is not a just a string anymore,
it's a JavaScript variable.

107
00:05:58.930 --> 00:06:03.260
We'll say photo.url, and
then we save it, and then we come back.

108
00:06:03.260 --> 00:06:06.240
You'll notice this is huge, it's gigantic.

109
00:06:06.240 --> 00:06:11.970
And so it actually does have another
one called I think thumbnail URL.

110
00:06:11.970 --> 00:06:15.960
And so if I say that, this is much
smaller, this is more manageable.

111
00:06:17.510 --> 00:06:21.413
Now, before we did the exercise, one of
the things I actually wanted to show you

112
00:06:21.413 --> 00:06:23.508
all as well though is one of my, actually,

113
00:06:23.508 --> 00:06:27.200
I think if I had to pick one feature
of Vue that's my favorite, it's this.

114
00:06:27.200 --> 00:06:29.106
It's computed properties.

115
00:06:29.106 --> 00:06:34.468
And so just to show you what that's like
here, imagine you wanted to tell people

116
00:06:34.468 --> 00:06:39.525
how many photos were actually being
shown inside of this gallery, right?

117
00:06:39.525 --> 00:06:45.315
Well, the way you would do that is
you could create a watcher method.

118
00:06:45.315 --> 00:06:49.084
In some frameworks, you something has
something like numberofPhotos, right?

119
00:06:49.084 --> 00:06:50.455
It's gonna start out at 0.

120
00:06:50.455 --> 00:06:54.631
And then inside of here,
you would be like, yeah, and

121
00:06:54.631 --> 00:06:59.156
then when I get the photo gallery,
I'll do photoGallery, or

122
00:06:59.156 --> 00:07:05.263
this.numberOfPhotos = this.photo,
or json.length, for example, right?

123
00:07:05.263 --> 00:07:06.359
That might be the go-to for

124
00:07:06.359 --> 00:07:08.892
some people when they're thinking
of tracking the activity.

125
00:07:08.892 --> 00:07:13.278
But, for anyone who's done this at length,
you'll know that this gets really tedious.

126
00:07:13.278 --> 00:07:14.427
Because at some point,

127
00:07:14.427 --> 00:07:17.878
it's easy to mess something up from
a step perspective dependencies.

128
00:07:17.878 --> 00:07:19.678
You're not sure if it's
actually caching correctly.

129
00:07:19.678 --> 00:07:23.465
So sometimes you end up re-rendering giant
lists that shouldn't be re-rendered.

130
00:07:23.465 --> 00:07:26.660
And so frameworks should be there
to help you to do that, right?

131
00:07:26.660 --> 00:07:31.880
And Vue does help you with that, and so
with the concept of computed properties.

132
00:07:31.880 --> 00:07:33.916
And so
what it does is it basically says, hey,

133
00:07:33.916 --> 00:07:36.531
here's a reactive data that
I'm interested in tracking,

134
00:07:36.531 --> 00:07:39.810
and I want you to take care of
all the performance stuff for me.

135
00:07:39.810 --> 00:07:43.083
And this is probably one of the biggest
wins, and I wish more frameworks.

136
00:07:43.083 --> 00:07:45.900
And in fact, some of them
are basically steal it, use it.

137
00:07:45.900 --> 00:07:49.495
Because it saves so many people from
basically shooting themselves in the foot

138
00:07:49.495 --> 00:07:53.480
when it comes to triggering re-renders,
especially the longer the chain is.

139
00:07:53.480 --> 00:07:56.358
So if anyone's worked
with data infographics,

140
00:07:56.358 --> 00:08:00.569
you'll know that one change if the user
decides to switch the scale will

141
00:08:00.569 --> 00:08:05.750
alter a ton of other different variables
that changes how the chart might render.

142
00:08:05.750 --> 00:08:09.785
And so you don't want that to be
contingent on a very brittle dependency

143
00:08:09.785 --> 00:08:11.920
chain and computed properties.

144
00:08:11.920 --> 00:08:14.355
The beautiful part about it is that
it's something that's sequential.

145
00:08:14.355 --> 00:08:17.550
So for example,
we can move numberOfPhotos in here.

146
00:08:18.810 --> 00:08:22.305
And numberOfPhotos is gonna be a function,
and what is a function gonna do?

147
00:08:22.305 --> 00:08:27.460
It's going to return
this.photogallery.length.

148
00:08:27.460 --> 00:08:30.590
That's what it's gonna do, simple enough.

149
00:08:30.590 --> 00:08:33.907
And so when I come in here and
let's say below this,

150
00:08:33.907 --> 00:08:38.554
I'm gonna have a p element, and
this one is gonna say numberOfPhotos.

151
00:08:38.554 --> 00:08:42.160
And then we can say photos like that.

152
00:08:42.160 --> 00:08:44.269
So we save that and come over here.

153
00:08:44.269 --> 00:08:48.890
You see that when I fetch the data,
it automatically updates as it stands.

154
00:08:48.890 --> 00:08:53.996
And then just to show how much further you
can go, you can basically be like, okay,

155
00:08:53.996 --> 00:08:58.692
what if I wanna find out, let's say we
needed to track we know there's gonna be.

156
00:08:58.692 --> 00:09:01.061
So there's album IDs inside of this data,
right?

157
00:09:01.061 --> 00:09:02.669
So let's prove that real quick.

158
00:09:02.669 --> 00:09:07.584
So if I do photo here, we might wanna be
like, well, what percentage of photo,

159
00:09:07.584 --> 00:09:10.234
or the album IDs are even versus odd,
right?

160
00:09:10.234 --> 00:09:12.820
Cuz this is one, and
then I assume there's a couple more.

161
00:09:12.820 --> 00:09:14.590
I think there's 20 total.

162
00:09:14.590 --> 00:09:16.690
So okay, how might we do that?

163
00:09:16.690 --> 00:09:19.109
Well, it's actually
fairly straightforward.

164
00:09:19.109 --> 00:09:23.268
What we would do is we would basically
create a computed property called,

165
00:09:23.268 --> 00:09:26.097
we could say, let's see,
evenAlbums, right?

166
00:09:26.097 --> 00:09:30.241
And we can say return
this.photogallery.filter, and

167
00:09:30.241 --> 00:09:32.404
we'll just filter out what?

168
00:09:32.404 --> 00:09:37.425
We'll filter out every item that where
the item.albumId and then modulo 2,

169
00:09:37.425 --> 00:09:42.900
which basically says if the remainder is
0, which basically means that it's even,

170
00:09:42.900 --> 00:09:47.642
then great, that's what we want, and
this will be the full even albums.

171
00:09:47.642 --> 00:09:49.605
And then from there,
you can be like, well,

172
00:09:49.605 --> 00:09:51.783
oddAlbums is basically
just the inverse of that.

173
00:09:51.783 --> 00:09:57.128
So I'll just copy that over and then just
put the exclamation point to reverse that.

174
00:09:57.128 --> 00:10:01.217
And then what's cool about this now
is that we can even then go here.

175
00:10:01.217 --> 00:10:05.592
And so inside of here,
I can put in parentheses,

176
00:10:05.592 --> 00:10:11.589
I can say oddAlbums.length, and
then just be like, odd albums.

177
00:10:11.589 --> 00:10:18.193
And then I can just do evenAlbums.length,
and then even albums.

178
00:10:18.193 --> 00:10:23.905
Save that, and so we can see when we save
here, all that stuff is already cached.

179
00:10:23.905 --> 00:10:26.425
So actually, wait, I broke something.

180
00:10:26.425 --> 00:10:31.162
It's 5,000 odd albums,
it should definitely be 2500.

181
00:10:31.162 --> 00:10:35.129
So I think I did the math wrong,
filter item.

182
00:10:35.129 --> 00:10:39.966
Wait, order of operations and
parentheses are important.

183
00:10:39.966 --> 00:10:41.228
I think that's what I needed.

184
00:10:41.228 --> 00:10:42.933
Right, let me do that again.

185
00:10:42.933 --> 00:10:44.214
Yep, I was totally right.

186
00:10:44.214 --> 00:10:48.742
So just to explain what happened there,
this is where practice is important.

187
00:10:48.742 --> 00:10:51.960
By only throwing the exclamation
point in front of it that album ID,

188
00:10:51.960 --> 00:10:55.912
it was basically only applying it to this
portion, and then applying the math, and

189
00:10:55.912 --> 00:10:57.613
it was just returning everything.

190
00:10:57.613 --> 00:11:01.009
And so we want it to actually
negate this entire expression,

191
00:11:01.009 --> 00:11:03.413
which is why the parentheses is critical.

192
00:11:03.413 --> 00:11:07.360
And then so on top of that, again, you can
start doing some great awesome things with

193
00:11:07.360 --> 00:11:09.653
computer to be like,
what are the percentages?

194
00:11:09.653 --> 00:11:12.090
Can they can just be evenAlbumPercentage?

195
00:11:13.430 --> 00:11:16.624
And so what you get here is you
get to be able to go, well,

196
00:11:16.624 --> 00:11:18.514
it's gonna be this.EvenAlbums.

197
00:11:18.514 --> 00:11:24.427
So you're now creating a dependency on a
different computed property, and .length.

198
00:11:24.427 --> 00:11:31.212
And I can just basically divide
that by this.numberOfPhotos.

199
00:11:31.212 --> 00:11:37.733
And so this will only give the fraction,
but you kind of get the idea, right?

200
00:11:37.733 --> 00:11:40.857
If people haven't used Vue in depth,
this is the one they tend to overlook.

201
00:11:40.857 --> 00:11:44.945
Because when they think of tracking
dependencies, they'll do watch methods and

202
00:11:44.945 --> 00:11:45.951
that kind of stuff,

203
00:11:45.951 --> 00:11:48.990
and computed properties save you so
much headache and time.

204
00:11:50.330 --> 00:11:52.590
So I've gone ahead and demoed that.

205
00:11:52.590 --> 00:11:55.707
Let me go ahead and just save that,
so everyone has that.

206
00:11:55.707 --> 00:11:59.084
And I'm gonna quickly implement
a computed over here, just so

207
00:11:59.084 --> 00:12:00.495
that we have some parity.

208
00:12:00.495 --> 00:12:05.222
And I'm just gonna do basically
the completed versus not completed items.

209
00:12:05.222 --> 00:12:10.745
So say completedItems, and
this will return this.todoList.filter

210
00:12:10.745 --> 00:12:16.365
where the item, we're gonna take the item,
item.completed is true.

211
00:12:16.365 --> 00:12:20.897
And then otherwise,
we have the incomplete items, or

212
00:12:20.897 --> 00:12:26.521
I'll call it remaining items, so
that's a little bit more clear.

213
00:12:26.521 --> 00:12:33.459
And then I'll add my p tag below here,
wait, no, below the button.

214
00:12:33.459 --> 00:12:39.913
And then we'll say completedItems.length,

215
00:12:39.913 --> 00:12:45.237
items completed, and then we'll have

216
00:12:45.237 --> 00:12:51.057
the remainingItems.length remaining.

217
00:12:51.057 --> 00:12:57.448
So that's basically the two
equivalents of the two.

