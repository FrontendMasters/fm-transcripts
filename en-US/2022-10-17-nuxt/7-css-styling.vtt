WEBVTT

1
00:00:00.130 --> 00:00:02.958
For this session, we're gonna talk about
something that well, we all need to do

2
00:00:02.958 --> 00:00:05.590
when it comes to our apps, and
that's making it look better, right?

3
00:00:05.590 --> 00:00:09.930
Applying design, applying CSS, because,
yes, does this work functionally?

4
00:00:09.930 --> 00:00:11.390
Yes, technically it does.

5
00:00:11.390 --> 00:00:15.130
But to be totally honest,
it could use some help.

6
00:00:15.130 --> 00:00:18.400
And so, we're not gonna do like
a full blown CSS course, but

7
00:00:18.400 --> 00:00:22.443
I do wanna just talk a little bit about
how basically some best practices for

8
00:00:22.443 --> 00:00:27.080
approaching styling within Vue,
next and how you might do those things.

9
00:00:27.080 --> 00:00:30.950
So first thing first, let's talk
about a popular way of managing this.

10
00:00:30.950 --> 00:00:35.930
So let's say, for instance, we wanted our
to do list to be in two different columns.

11
00:00:35.930 --> 00:00:38.430
That's what we wanted to do.

12
00:00:38.430 --> 00:00:43.457
Then what we can do is we can go ahead
in here and we can take a look at our

13
00:00:43.457 --> 00:00:49.120
styles here and we could go, okay,
well let's see the ul here is like this.

14
00:00:49.120 --> 00:00:50.940
So what if we did something like, okay, so

15
00:00:50.940 --> 00:00:52.974
first we'll start by
opening the style block.

16
00:00:52.974 --> 00:00:55.168
So if you haven't used single
file components before,

17
00:00:55.168 --> 00:00:56.902
this is kind of what
makes them a bit unique.

18
00:00:56.902 --> 00:01:00.490
Is that it contains the scripts,
the JavaScript, the HTML, and

19
00:01:00.490 --> 00:01:03.362
the CSS all in one file so
that it's encapsulated and

20
00:01:03.362 --> 00:01:06.510
then your concerns are basically
all related together.

21
00:01:06.510 --> 00:01:09.720
So that when you delete the file,
it's impacting that file specifically.

22
00:01:10.740 --> 00:01:14.310
So in this case, what we can do
is let's call this todo list,

23
00:01:14.310 --> 00:01:15.850
let's call it the class.

24
00:01:15.850 --> 00:01:17.876
So that's really what this is,
it's the todo list.

25
00:01:17.876 --> 00:01:22.704
And so we do todo lists and
then let's say it has display,

26
00:01:22.704 --> 00:01:27.960
let's say grid and
then grid-template-columns.

27
00:01:27.960 --> 00:01:33.730
We'll say we'll repeat it twice, and each
column will be one fraction of the width.

28
00:01:33.730 --> 00:01:36.070
That's what that CSS means.

29
00:01:36.070 --> 00:01:38.368
So we go ahead now and
check it out and refresh.

30
00:01:38.368 --> 00:01:40.209
Okay, perfect.

31
00:01:40.209 --> 00:01:42.460
Fetch, wallah.

32
00:01:42.460 --> 00:01:45.370
Okay, so
we see that we have our two columns.

33
00:01:45.370 --> 00:01:48.334
Now, here's the thing that
some people might not know,

34
00:01:48.334 --> 00:01:50.741
is that when you use
the style block like this,

35
00:01:50.741 --> 00:01:54.560
what you're actually defining is
you're defining global styles.

36
00:01:54.560 --> 00:01:57.844
So if you look inside of our app you'll

37
00:01:57.844 --> 00:02:02.470
see here that we have
here ul class todo list.

38
00:02:02.470 --> 00:02:06.305
And then, you'll notice that todo list
it's just a generic style block basically

39
00:02:06.305 --> 00:02:08.190
found inside of the head.

40
00:02:08.190 --> 00:02:11.525
So in other words, when it comes
to CSS and specificity this could

41
00:02:11.525 --> 00:02:15.845
theoretically impact other components on
the page should they share the same name.

42
00:02:17.055 --> 00:02:18.935
So how might we get around this?

43
00:02:18.935 --> 00:02:22.950
Well, of course, you can certainly try
naming things uniquely yourself and

44
00:02:22.950 --> 00:02:25.495
hopefully no one collides
with your CSS styles.

45
00:02:25.495 --> 00:02:29.518
But anyone who's done that at scale can
tell you it's basically impossible to do

46
00:02:29.518 --> 00:02:33.481
because, eventually developers start
naming things a bit shorter on the short

47
00:02:33.481 --> 00:02:37.682
side, and they wanna do it what makes most
sense in a component, and then collisions

48
00:02:37.682 --> 00:02:42.230
happens because the cascade can be
hard to predict, and things blow up.

49
00:02:42.230 --> 00:02:43.760
So what can we do instead?

50
00:02:43.760 --> 00:02:49.840
Well, instead of using a global CSS, most
of you might have heard about scoped CSS.

51
00:02:50.990 --> 00:02:52.200
So, what is scoped CSS?

52
00:02:52.200 --> 00:02:55.107
Well, by adding the scope to
attribute to your CSS styles,

53
00:02:55.107 --> 00:02:57.360
we get something pretty interesting here.

54
00:02:57.360 --> 00:03:01.204
You'll notice that one, when I open this,
it still looks like the two columns, but

55
00:03:01.204 --> 00:03:04.410
we'll notice something
pretty different though.

56
00:03:04.410 --> 00:03:07.064
And that is, that when you
look at the styles over here,

57
00:03:07.064 --> 00:03:10.730
let me pump this up a little bit so
you read that a little bit easier.

58
00:03:10.730 --> 00:03:15.587
You will notice that our todo list now
is appended with an attribute selector.

59
00:03:15.587 --> 00:03:19.149
More meaningfully it is
appended with this custom hash,

60
00:03:19.149 --> 00:03:23.533
data-v-938b838b0, basically
it is randomly generated.

61
00:03:23.533 --> 00:03:26.866
And that corresponds with
this element over here that

62
00:03:26.866 --> 00:03:31.030
also has that attribute data-v-938b83b0.

63
00:03:31.030 --> 00:03:34.505
And so this is a pretty cool way of
actually starting to scope things a little

64
00:03:34.505 --> 00:03:37.871
bit because what it does is essentially
add a little bit of specificity to

65
00:03:37.871 --> 00:03:39.100
your code.

66
00:03:39.100 --> 00:03:40.438
And for the most part,

67
00:03:40.438 --> 00:03:44.877
this saves people most of the headache
because it feels pretty native, but

68
00:03:44.877 --> 00:03:48.620
there's a third approach that I
do wanna make people aware of.

69
00:03:48.620 --> 00:03:49.754
And that is the fact that,

70
00:03:49.754 --> 00:03:52.547
in the event that you wanna
actually name it something generic.

71
00:03:52.547 --> 00:03:55.698
Let's say we wanted to name
something like lists, right?

72
00:03:55.698 --> 00:03:59.239
Lists is something that especially if
you're importing a third party library,

73
00:03:59.239 --> 00:04:01.770
that could blow up all
sorts of different ways.

74
00:04:01.770 --> 00:04:05.384
But for the sake of like, not having to
rely on generating really really long

75
00:04:05.384 --> 00:04:08.500
names, which was very popular,
well, still popular, right?

76
00:04:08.500 --> 00:04:10.041
It's known as BEM.
If you haven't heard of it,

77
00:04:10.041 --> 00:04:10.894
you can look that up.

78
00:04:10.894 --> 00:04:13.948
BEM CSS, where you name the components or
it would be like,

79
00:04:13.948 --> 00:04:17.552
todo lists underscore like list
underscore item, like it was long and

80
00:04:17.552 --> 00:04:19.770
it's kind of hard to read and cumbersome.

81
00:04:19.770 --> 00:04:22.404
And so we have built tools,
can we make this easier for ourselves?

82
00:04:22.404 --> 00:04:24.900
And the answer is yes you can.

83
00:04:24.900 --> 00:04:28.042
And the way you do that is one,
you start by searching scope for

84
00:04:28.042 --> 00:04:29.260
the module attribute.

85
00:04:30.360 --> 00:04:31.880
But that's not just it.

86
00:04:31.880 --> 00:04:35.040
This is the part where it gets
a little bit controversial.

87
00:04:35.040 --> 00:04:40.399
What we gonna do is we gonna bind the
class that we wanna use and we're gonna

88
00:04:40.399 --> 00:04:46.720
use the dollar signs style and then we're
gonna basically tack on the class name.

89
00:04:46.720 --> 00:04:51.569
So as you can see style.list, this maps to
here and the style object basically maps

90
00:04:51.569 --> 00:04:56.435
to a JavaScript object of whatever CSS
you've written inside of your style block.

91
00:04:56.435 --> 00:04:59.494
Now you're like okay, that's weird syntax,
what do I get for that?

92
00:04:59.494 --> 00:05:01.720
All right, that's a good question.

93
00:05:01.720 --> 00:05:05.190
So let's go ahead and
fetch the data again, looks good.

94
00:05:05.190 --> 00:05:05.890
What's the difference?

95
00:05:07.500 --> 00:05:11.616
The difference is you'll notice
that Vue has gone ahead and

96
00:05:11.616 --> 00:05:14.916
generated a completely new class name for
you.

97
00:05:14.916 --> 00:05:19.030
And it's got a custom hash and
everything, which means yes,

98
00:05:19.030 --> 00:05:24.830
theoretically there is a chance, right,
that you could generate the same hash.

99
00:05:24.830 --> 00:05:26.673
But I think we know
statistically speaking,

100
00:05:26.673 --> 00:05:28.281
that's probably not going to happen.

101
00:05:28.281 --> 00:05:32.601
And so more importantly, we're not gonna
get into the configuration and stuff, but

102
00:05:32.601 --> 00:05:36.561
you can actually even like prepend the
generated class name with the component

103
00:05:36.561 --> 00:05:40.641
that it's coming from because I'm a big
fan of having CSS class names that you can

104
00:05:40.641 --> 00:05:41.541
actually debug.

105
00:05:41.541 --> 00:05:43.530
Because I know that some frameworks and

106
00:05:43.530 --> 00:05:48.064
some approaches will just do a random hash
period, right, never conflicts basically.

107
00:05:48.064 --> 00:05:51.298
But then the problem is when you look at
it you're gonna be like there's a bug,

108
00:05:51.298 --> 00:05:53.540
I don't know where this is coming from.

109
00:05:53.540 --> 00:05:56.490
And I mean debugging is really
where the value comes out of it.

110
00:05:56.490 --> 00:05:59.770
Like it's nice to think of optimizations
and it can be only five letters.

111
00:05:59.770 --> 00:06:00.580
That's a random hash.

112
00:06:00.580 --> 00:06:01.160
That's nice.

113
00:06:01.160 --> 00:06:04.161
But when things break, I need the tools
to help me debug not the other way

114
00:06:04.161 --> 00:06:05.727
around should make it harder for me.

115
00:06:05.727 --> 00:06:08.828
So at the bare minimum,
you can see here it's underscore list.

116
00:06:08.828 --> 00:06:12.300
So at the bare minimum if I were looking
for my code base I can look for .list.

117
00:06:12.300 --> 00:06:13.669
And that does narrow it down a bit.

118
00:06:13.669 --> 00:06:17.018
But again I would recommend like if you're
gonna configure it a little bit more maybe

119
00:06:17.018 --> 00:06:19.000
prepend it with a component
name automatically so

120
00:06:19.000 --> 00:06:20.650
you know which file to look at.

121
00:06:20.650 --> 00:06:24.052
Again, those are just suggestions and
preferences.

122
00:06:24.052 --> 00:06:28.366
But, the main thing to know about styles
is that this syntax is a little bit

123
00:06:28.366 --> 00:06:33.099
awkward for people, because especially
when you start tagging on multiple ones

124
00:06:33.099 --> 00:06:37.017
then you have the array syntax as well so
you'd be like style list.

125
00:06:37.017 --> 00:06:40.230
And then it feels a little awkward to
people like that's like JavaScript.

126
00:06:40.230 --> 00:06:42.290
It's not really like a native anymore.

127
00:06:42.290 --> 00:06:46.273
And so my recommendation for this is that
use it in a way that like when you know

128
00:06:46.273 --> 00:06:49.647
you need to escape you know
the styles need to live in isolation.

129
00:06:49.647 --> 00:06:53.518
It is worth the trade off here's the
headache you save by being able to write

130
00:06:53.518 --> 00:06:57.144
native CSS in here, which I really
think is where it's most important

131
00:06:57.144 --> 00:07:00.155
that's where you get most of
your benefits and then you can

132
00:07:00.155 --> 00:07:04.300
deal with a couple of kind of ugly V
bind classes with dollar symbol styles.

133
00:07:04.300 --> 00:07:07.240
&gt;&gt; What is your opinion about
using Tailwind CSS with Vue?

134
00:07:08.890 --> 00:07:13.125
&gt;&gt; Okay, so the question here is around
Tailwind CSS, but I think more important

135
00:07:13.125 --> 00:07:17.830
let's talk more about utility CSS,
because that's really the paradigm shift.

136
00:07:17.830 --> 00:07:21.280
So I won't comment on Tailwind
specifically just more as a paradigm.

137
00:07:21.280 --> 00:07:24.827
And so I guess let me just show the one
that's another open source one that's

138
00:07:24.827 --> 00:07:27.378
actually really popular in
the Vue community called,

139
00:07:27.378 --> 00:07:28.890
I think it's called no, wait.

140
00:07:30.280 --> 00:07:31.470
Andu utility CSS.

141
00:07:33.690 --> 00:07:36.734
Yeah, I think we know CSS as an example.

142
00:07:36.734 --> 00:07:42.773
But basically what it's known to do is,
you'll see an example.

143
00:07:42.773 --> 00:07:46.052
Yeah, okay, here are some examples here.

144
00:07:46.052 --> 00:07:50.162
For those who've never used libraries
like this before what they essentially

145
00:07:50.162 --> 00:07:53.645
allow you to do is pen a bunch of
mini classes to, like an element and

146
00:07:53.645 --> 00:07:56.590
those styles add up to something bigger.

147
00:07:56.590 --> 00:08:01.070
And so for a lot of people this
provides a lot of standardization.

148
00:08:01.070 --> 00:08:02.127
Again, any tools and

149
00:08:02.127 --> 00:08:05.771
libraries you choose will have trade
offs because on the other hand it does

150
00:08:05.771 --> 00:08:10.300
mean that your HTML gets bloated with a
ton of different styles, like class names.

151
00:08:10.300 --> 00:08:14.086
And so one way you can get around that if
you are using that you wanna still use

152
00:08:14.086 --> 00:08:18.238
something like Tailwind or like UnoCSS,
is that you can basically use I think post

153
00:08:18.238 --> 00:08:21.486
CSS to actually pre process all
those things under a class name so

154
00:08:21.486 --> 00:08:24.013
that you're leveraging
the design system to keep

155
00:08:24.013 --> 00:08:28.270
that consistency while also actually
having cleaner CSS class names.

156
00:08:28.270 --> 00:08:30.847
And so I will say from
a personal opinion perspective,

157
00:08:30.847 --> 00:08:32.960
I actually really like writing CSS.

158
00:08:32.960 --> 00:08:36.834
And so usually libraries like Tailwind and
that kind of stuff they're good for

159
00:08:36.834 --> 00:08:40.002
teams that you can't really ensure
who's writing the CSS and so

160
00:08:40.002 --> 00:08:43.380
you want just consistency to
be applied across the board.

161
00:08:43.380 --> 00:08:47.190
And so design systems like that can be
incredibly powerful in that regard.

162
00:08:47.190 --> 00:08:51.615
But just remember the trade offs of having
to deal with all that configuration

163
00:08:51.615 --> 00:08:55.290
versus just knowing CSS and
just be able to write it yourself.

164
00:08:55.290 --> 00:09:00.096
Again, depending on your team and
your skill that's how I would

165
00:09:00.096 --> 00:09:05.000
choose to basically optimize for
which kind of CSS way you apply.

