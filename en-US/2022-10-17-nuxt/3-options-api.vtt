WEBVTT

1
00:00:00.000 --> 00:00:01.693
I know that some people
coming into nursery,

2
00:00:01.693 --> 00:00:04.560
especially with the Vue 3 release,
don't always have a view background.

3
00:00:04.560 --> 00:00:08.198
So we're gonna do is we're gonna start
a little bit from the top as far

4
00:00:08.198 --> 00:00:12.180
as explaining kind of how things were
things, the state of the ecosystem.

5
00:00:12.180 --> 00:00:15.548
And so to start, where we're gonna do is
we're gonna start with options API because

6
00:00:15.548 --> 00:00:18.253
it's what most people are familiar
with when they think of Vue, and

7
00:00:18.253 --> 00:00:20.360
then we'll kind of basically
progress from there.

8
00:00:20.360 --> 00:00:24.335
So to start, what I'm going to do is
I'm gonna build a very simple to-do

9
00:00:24.335 --> 00:00:26.239
list viewer with the Options API.

10
00:00:26.239 --> 00:00:28.943
And the reason I'm gonna emphasize viewer
is don't worry we're not gonna sit here

11
00:00:28.943 --> 00:00:30.190
and build out to do MVC all over again.

12
00:00:30.190 --> 00:00:33.151
This is a very high level
exercise that we're going to do.

13
00:00:33.151 --> 00:00:37.848
So instead of my app.Vue component,
I'm gonna go ahead and add a script block.

14
00:00:37.848 --> 00:00:39.218
And then all we do for

15
00:00:39.218 --> 00:00:43.660
our options API is we typically
export a default object, right?

16
00:00:43.660 --> 00:00:47.435
But what I'm gonna tell you here
is in the nuts component or

17
00:00:47.435 --> 00:00:52.369
when you're building the necessary app,
I actually highly recommend that

18
00:00:52.369 --> 00:00:57.325
you by default go ahead and import
define Nuxts component from the library.

19
00:00:57.325 --> 00:01:00.950
And the reason for this is because when
you wrap your object around with define

20
00:01:00.950 --> 00:01:04.374
Nuxt component, it basically
provides you better auto-completion.

21
00:01:04.374 --> 00:01:06.940
It provides you better typing.

22
00:01:06.940 --> 00:01:10.556
And then going forward,
it's just not this generic object that's

23
00:01:10.556 --> 00:01:13.413
floating around like your
code like IntelliSense and

24
00:01:13.413 --> 00:01:16.662
that kind of stuff will be much
better at predicting things.

25
00:01:16.662 --> 00:01:19.272
So just that little bit is very helpful,
so

26
00:01:19.272 --> 00:01:23.341
that's one thing I would recommend
if you're using options API.

27
00:01:23.341 --> 00:01:25.469
Next, let's go ahead and
actually build this out, right?

28
00:01:25.469 --> 00:01:29.209
So for the data, I'm gonna use
the arrow syntax function here.

29
00:01:29.209 --> 00:01:33.609
And so for
those who might not have seen this before,

30
00:01:33.609 --> 00:01:37.017
this is the equivalent of writing this.

31
00:01:37.017 --> 00:01:40.264
But as you see, it's one line shorter
because of the arrow function, and so

32
00:01:40.264 --> 00:01:41.344
it kind of condenses it.

33
00:01:41.344 --> 00:01:45.805
So for that reason, I tend to prefer
the arrow function in this regard.

34
00:01:45.805 --> 00:01:48.770
And then, I'll just basically say
TodoList, it'll be an empty array.

35
00:01:50.269 --> 00:01:53.759
And so next what we're gonna do is we're
gonna actually find a way to fetch

36
00:01:53.759 --> 00:01:55.011
the actual data, right?

37
00:01:55.011 --> 00:01:57.000
And so if you haven't used this before,

38
00:01:57.000 --> 00:01:59.410
there's a great tool
called JSON Placeholder.

39
00:01:59.410 --> 00:02:01.907
And it's basically a free
rest API that just,

40
00:02:01.907 --> 00:02:04.596
it's kind of it's fake in
the regards that like,

41
00:02:04.596 --> 00:02:08.968
you can't really update the database,
and so it'll mock a bunch of responses.

42
00:02:08.968 --> 00:02:12.790
But at the bare minimum it gives you the
ability to fetch a bunch of data just as

43
00:02:12.790 --> 00:02:16.763
you would a real network request and
then actually play around with that data.

44
00:02:16.763 --> 00:02:19.574
So what we're gonna do is we're
going to grab this URL right here.

45
00:02:19.574 --> 00:02:22.345
So this is the Todos API.

46
00:02:22.345 --> 00:02:27.411
And then so for this method,
I'm going to call it fetch TodoLlist.

47
00:02:27.411 --> 00:02:30.055
And then it'll be basically,

48
00:02:30.055 --> 00:02:35.249
we will use the browser fetch
keyword to fetch from this URL.

49
00:02:35.249 --> 00:02:40.006
And then once we get that,
we'll get a response from our API.

50
00:02:40.006 --> 00:02:43.999
And then, we'll make sure we
JSONnify that response and

51
00:02:43.999 --> 00:02:46.994
then after that we'll take that JSON, and

52
00:02:46.994 --> 00:02:51.921
we will assign it to a to-do list,
so actually let me use rocket here.

53
00:02:51.921 --> 00:02:56.807
This.todoLists =JSON.

54
00:02:56.807 --> 00:02:59.850
Okay, so to just cover kind
of what we just did here,

55
00:02:59.850 --> 00:03:02.001
we wrote a function such to do lists.

56
00:03:02.001 --> 00:03:05.900
We're using the native browser API for
fetch in order to perform an Ajax request.

57
00:03:05.900 --> 00:03:09.661
And then, the key thing here that might be
a little bit different if you're new to

58
00:03:09.661 --> 00:03:13.442
options API is that this keyword is used
a lot in options API because it can refer.

59
00:03:13.442 --> 00:03:16.690
It basically knows what you're referring
to, and is really good at guessing.

60
00:03:16.690 --> 00:03:21.385
So in this case, it knows that this is
referring to the data property TodoLists,

61
00:03:21.385 --> 00:03:26.164
because in other frameworks, you might
have to be like this.data.TodoLists.

62
00:03:26.164 --> 00:03:28.849
With the options API, one of the reason
I think people took to it so well,

63
00:03:28.849 --> 00:03:31.110
I thought that this was very
intelligent and predicting it.

64
00:03:31.110 --> 00:03:35.160
So to show that this actually works all
we're gonna do is, I'm going to add a pre

65
00:03:35.160 --> 00:03:38.563
block here, and then I'm gonna
basically render out TodoLists.

66
00:03:38.563 --> 00:03:42.138
And so this is a neat little trick with
the pre because, actually I'll show

67
00:03:42.138 --> 00:03:45.914
you the difference, I think when before
and after will make a big difference.

68
00:03:45.914 --> 00:03:47.864
So let me also add a button here, and

69
00:03:47.864 --> 00:03:50.793
this button is going to
actually set to the TodoList.

70
00:03:50.793 --> 00:03:53.856
So we're actually going to call
the method that we wrote up here.

71
00:03:53.856 --> 00:03:56.652
So we'll call it fetch data,
and we'll just save it.

72
00:03:56.652 --> 00:03:58.301
Okay, let's see how this works.

73
00:03:58.301 --> 00:04:00.490
So when I click it,
you'll see my gosh, look at this.

74
00:04:00.490 --> 00:04:02.725
This is just it's a lot to read.

75
00:04:02.725 --> 00:04:04.625
So what most of us do?
Most of us will probably then try to

76
00:04:04.625 --> 00:04:05.404
console log it.

77
00:04:05.404 --> 00:04:08.201
So we got some sort of
indenting formatting.

78
00:04:08.201 --> 00:04:13.658
But if you switch it from the p tag to
the pre tag, which basically stands for

79
00:04:13.658 --> 00:04:18.695
pre-formatted, and that's a native
HTML thing, not a new thing.

80
00:04:18.695 --> 00:04:20.865
You'll see way prettier.

81
00:04:20.865 --> 00:04:21.645
I can parse this.

82
00:04:21.645 --> 00:04:22.562
I don't know.

83
00:04:22.562 --> 00:04:23.716
I don't need to console log, this works.

84
00:04:23.716 --> 00:04:27.102
I can look at this and go, I got a rough
idea of what I got here, and this is good.

85
00:04:27.102 --> 00:04:29.218
We have a user,
you have a user ID, we have an ID,

86
00:04:29.218 --> 00:04:31.656
you have a title we have
whether it's completed or not.

87
00:04:31.656 --> 00:04:33.121
All right, easy enough.

88
00:04:33.121 --> 00:04:35.924
What we can do is let's just go ahead and
loop through that, right?

89
00:04:35.924 --> 00:04:42.606
So we'll just let's do a ul,
li v4 for every to-do in TodoLists.

90
00:04:42.606 --> 00:04:45.238
And you might notice that a lot
of times when I have arrays,

91
00:04:45.238 --> 00:04:47.670
I don't do the thing where
most people would do this.

92
00:04:47.670 --> 00:04:52.507
They do Todo and TodoList and that's
because in programming we have off-by-one

93
00:04:52.507 --> 00:04:56.732
errors a lot and one letter as a plural
is an easy off by one error to have.

94
00:04:56.732 --> 00:05:00.929
And so for me, I think it's just easier
just to be explicit just to say TodoList,

95
00:05:00.929 --> 00:05:02.867
and it makes it very clear visually.

96
00:05:02.867 --> 00:05:06.445
So we know that the key here is gonna
utilize the ID that we saw in the to-do

97
00:05:06.445 --> 00:05:06.973
item, but

98
00:05:06.973 --> 00:05:10.863
we also know that it's a simple ID because
we just saw it's a bunch of numbers.

99
00:05:10.863 --> 00:05:15.761
So in this kind of situation, I like to
just go ahead and use string interpolation

100
00:05:15.761 --> 00:05:20.312
to just basically be like, maybe like
todo Id and then just be like todo Id.

101
00:05:20.312 --> 00:05:23.174
And that way in the future
when we have other things,

102
00:05:23.174 --> 00:05:25.787
you're less likely to
just get that conflict.

103
00:05:25.787 --> 00:05:31.595
And then from there, let's just do
let's do a simple input check box.

104
00:05:31.595 --> 00:05:33.856
And then whether it is
checked will V bind it,

105
00:05:33.856 --> 00:05:38.082
which basically means we're going to make
the property dynamic, and we're done,

106
00:05:38.082 --> 00:05:41.373
bind it to whether the fact that
the todo item is completed or not.

107
00:05:41.373 --> 00:05:45.823
And then finally, we'll just do that
todo that title, just like that.

108
00:05:45.823 --> 00:05:51.523
And so now if we go back here,
and then let me refresh.

109
00:05:51.523 --> 00:05:56.840
To fetch the data, wait,
go back, then I save.

110
00:05:56.840 --> 00:05:57.742
I know why.

111
00:05:57.742 --> 00:05:59.254
Nothing's wrong.

112
00:05:59.254 --> 00:06:00.652
It's just that this list is very,

113
00:06:00.652 --> 00:06:02.638
very long because they
still have the pre block.

114
00:06:02.638 --> 00:06:04.645
So rather than make you
all watch me scroll,

115
00:06:04.645 --> 00:06:06.336
I think we got a sense of what that is.

116
00:06:06.336 --> 00:06:07.962
Now I can delete that.

117
00:06:07.962 --> 00:06:09.450
Much better.

118
00:06:09.450 --> 00:06:10.968
All right, so we can see now, great.

119
00:06:10.968 --> 00:06:14.596
We have a list of items, checkboxes,
again, we're not implementing todo MVC,

120
00:06:14.596 --> 00:06:16.025
this is just a TodoList viewer.

121
00:06:16.025 --> 00:06:18.292
That's all we just want to see it.

122
00:06:18.292 --> 00:06:21.047
And so okay, the other thing
that we might wanna do too,

123
00:06:21.047 --> 00:06:24.638
when you're building a site is that well,
you might wanna add an image.

124
00:06:24.638 --> 00:06:26.322
And so let's go ahead and
grab an image, shall we?

125
00:06:26.322 --> 00:06:29.938
So one of the resources I like to use for
images when sort of building site

126
00:06:29.938 --> 00:06:33.378
projects and stuff is Unsplash
because they're royalty free, but

127
00:06:33.378 --> 00:06:37.322
then they just encourage you to basically
just attribute the photographer.

128
00:06:37.322 --> 00:06:41.989
So if I just do like to do for example
alright let's see I think yeah this one

129
00:06:41.989 --> 00:06:46.608
looks good I like this one, so
I'm gonna go ahead and download this one.

130
00:06:46.608 --> 00:06:50.266
And so you can see here one thing that
lets you do is you can give credit to

131
00:06:50.266 --> 00:06:53.802
the photographer, so we're gonna do that,
I'm gonna copy that.

132
00:06:53.802 --> 00:06:58.094
And then so what we're gonna do here,
let me open this inside of my desktop,

133
00:06:58.094 --> 00:06:58.842
there it is.

134
00:06:58.842 --> 00:07:01.574
And then let me open up
the project here that I have.

135
00:07:01.574 --> 00:07:05.606
So what I'm gonna do here is I'm gonna
use the Reveal in Finder shortcut and

136
00:07:05.606 --> 00:07:08.872
that way it'll be make it easier
to drag and drop this thing.

137
00:07:08.872 --> 00:07:10.619
And so inside of our directory, so

138
00:07:10.619 --> 00:07:14.123
in this case you want to host an image
basically is what you want to do.

139
00:07:14.123 --> 00:07:17.048
And so, I know most people in the past
would be like, this is an asset, so

140
00:07:17.048 --> 00:07:18.492
I'll throw it in an assets' folder.

141
00:07:18.492 --> 00:07:20.550
But at least for now, try to think of it.

142
00:07:20.550 --> 00:07:21.626
It's really just a static asset for now.

143
00:07:21.626 --> 00:07:25.205
We don't need the build tool to run
through anything at the moment.

144
00:07:25.205 --> 00:07:28.786
So given that, we'll take the simpler
route and just have a public directory.

145
00:07:28.786 --> 00:07:30.796
So this is the public, basically,

146
00:07:30.796 --> 00:07:34.893
it'll be served as is directly to
the URL which will show you it shortly.

147
00:07:34.893 --> 00:07:37.879
And so for those coming from Nuxt 2, this
is the equivalent of the static folder,

148
00:07:37.879 --> 00:07:39.155
that's what they used to call it.

149
00:07:39.155 --> 00:07:41.737
But I think public really is
the standard for across the framework,

150
00:07:41.737 --> 00:07:43.286
so I'm glad that they made that switch.

151
00:07:43.286 --> 00:07:46.496
So I'm just gonna call
this on todo.jpg and

152
00:07:46.496 --> 00:07:50.673
just to keep the naming simple,
and drop that in, okay?

153
00:07:50.673 --> 00:07:54.772
So now that we have it, we see that inside
of public, we have our image right here.

154
00:07:54.772 --> 00:07:56.169
So let's go and drop this at the time.

155
00:07:56.169 --> 00:07:58.286
It's sort of like a hero, shall we?

156
00:07:58.286 --> 00:08:01.644
And so because it's in a public directory,

157
00:08:01.644 --> 00:08:05.290
really all we have to do
is just go / todo.jpg.

158
00:08:05.290 --> 00:08:09.650
And in fact, actually, let me just
show you how easy this part is.

159
00:08:09.650 --> 00:08:11.857
So because here, let me shrink this.

160
00:08:11.857 --> 00:08:16.778
Once it's actually served in the public
directory, you can actually go directly to

161
00:08:16.778 --> 00:08:21.926
the path here, todo.jpg, and you see it'll
load your asset just as you would expect.

162
00:08:21.926 --> 00:08:24.093
If you did this with an assets' folder,
though,

163
00:08:24.093 --> 00:08:26.731
then there's like compilation
it gets a little bit tricky.

164
00:08:26.731 --> 00:08:28.694
Sometimes, it hashes things,
you can predict where it is.

165
00:08:28.694 --> 00:08:31.488
And so for things that you
know that just gonna be fixed,

166
00:08:31.488 --> 00:08:34.234
like maybe like collet Fave
icons are a great example.

167
00:08:34.234 --> 00:08:37.518
Like you're not gonna be dynamically
changing that you can upload it once and

168
00:08:37.518 --> 00:08:38.741
then people can refer to it.

169
00:08:38.741 --> 00:08:42.344
Public is a great way to just
get that up and running and

170
00:08:42.344 --> 00:08:46.670
because it's as easy as just
basically referencing it as a URL,

171
00:08:46.670 --> 00:08:51.737
this means that we can very easily then
refer to it inside of our component.

172
00:08:51.737 --> 00:08:56.002
So just source, what is the source?

173
00:08:56.002 --> 00:08:59.203
/todo.jpg, and then we're gonna give
credit to the author right here.

174
00:08:59.203 --> 00:09:03.656
So let me actually wrap this in a p tag,
and

175
00:09:03.656 --> 00:09:11.059
then I'll just give an alt have to
do photo by Glenn Karstens Peters.

176
00:09:11.059 --> 00:09:17.268
All right, so just like that,
we'll see here that look.

177
00:09:17.268 --> 00:09:18.248
It's huge.

178
00:09:18.248 --> 00:09:20.294
I know why It's because I downloaded,

179
00:09:20.294 --> 00:09:23.642
I think I downloaded like
the giant one like 4,000 pixels.

180
00:09:23.642 --> 00:09:25.909
Yeah, I see 4,000 pixels.

181
00:09:25.909 --> 00:09:27.936
Yeah, let's make that an easy 600,
shall we?

182
00:09:27.936 --> 00:09:32.819
We don't need to be that high resolution.

183
00:09:32.819 --> 00:09:35.211
So, now when we refresh, much better.

184
00:09:35.211 --> 00:09:37.979
All right, so we got this little
header image, we got that.

185
00:09:37.979 --> 00:09:41.680
Then we have the ability to fetch data
we see it on pretty simple component,

186
00:09:41.680 --> 00:09:42.456
this is great.

