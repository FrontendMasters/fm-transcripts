WEBVTT

1
00:00:00.211 --> 00:00:04.848
The next thing I want to do is, I want to
talk about fetching data from the API.

2
00:00:04.848 --> 00:00:10.861
So lets take a look, so if we go to
our display, base display component,

3
00:00:10.861 --> 00:00:16.499
this is where we are using the browser
fetch API in order to get data.

4
00:00:16.499 --> 00:00:21.414
Now here is the thing though,
that means this only works in the browser.

5
00:00:21.414 --> 00:00:24.929
And one of the things that nuxt offers is
the ability to do things like server side

6
00:00:24.929 --> 00:00:26.669
rendering, static site generation.

7
00:00:26.669 --> 00:00:31.157
But, this means that if it tries to run
your code inside of a node environment,

8
00:00:31.157 --> 00:00:32.522
this is going to break.

9
00:00:32.522 --> 00:00:35.392
So, how do we get around this?

10
00:00:35.392 --> 00:00:39.791
Well, basically, there are composable
here as you might have guess,

11
00:00:39.791 --> 00:00:41.932
that help us with this very thing.

12
00:00:41.932 --> 00:00:47.126
So, the one that I'm gonna show you first
is actually gonna be called useAsyncData.

13
00:00:49.303 --> 00:00:53.168
And so useAsyncData is something
that it takes two framers.

14
00:00:53.168 --> 00:00:55.847
One, it takes a key of
what is gonna be called.

15
00:00:55.847 --> 00:01:00.278
So in this particular case, we can just
say that, we'll make it a dynamic key.

16
00:01:00.278 --> 00:01:02.508
Because basically,
if you think of it like this,

17
00:01:02.508 --> 00:01:05.868
nuxt is trying to perform really figure
out what kind of queries there are.

18
00:01:05.868 --> 00:01:09.315
And so, if you don't give it a key,
sometimes it identifies the same one,

19
00:01:09.315 --> 00:01:10.707
remembering some problems.

20
00:01:10.707 --> 00:01:12.765
So let's go ahead and say like this.

21
00:01:12.765 --> 00:01:15.977
We'll call that query, just like that.

22
00:01:15.977 --> 00:01:17.961
That looks good.

23
00:01:17.961 --> 00:01:22.976
And then, what you get is a callback
function as a second argument.

24
00:01:22.976 --> 00:01:28.011
And so inside of here,
let me go ahead and close that off.

25
00:01:28.011 --> 00:01:29.038
All right.

26
00:01:29.038 --> 00:01:34.921
Inside of here, this is where you get
access to something called $fetch.

27
00:01:34.921 --> 00:01:38.812
And this is like their polyfill version
of like, if you're on the client side,

28
00:01:38.812 --> 00:01:40.162
it'll use a normal fetch.

29
00:01:40.162 --> 00:01:43.714
But, if you're on the node side,
it also then switches over to basically,

30
00:01:43.714 --> 00:01:46.942
the node fetch, or whatever they
decide underneath the hood to use.

31
00:01:46.942 --> 00:01:52.717
And so we save this something is off.

32
00:01:52.717 --> 00:01:54.699
Nope that looks, no, no, there we go.

33
00:01:54.699 --> 00:01:58.051
There we go.
Now it's indenting correctly, okay.

34
00:01:58.051 --> 00:02:03.139
So as you can see here, this now
makes a pretty big difference because

35
00:02:03.139 --> 00:02:07.615
now we actually have the ability
to actually fetch the data,

36
00:02:07.615 --> 00:02:11.848
whether it's on the server side,
or on the client side.

37
00:02:11.848 --> 00:02:13.185
We go ahead and refresh.

38
00:02:13.185 --> 00:02:14.037
This is good.

39
00:02:14.037 --> 00:02:16.793
Let's go inside of my dues.

40
00:02:16.793 --> 00:02:19.012
And then okay, so something's not working.

41
00:02:19.012 --> 00:02:20.019
What is going on?

42
00:02:20.019 --> 00:02:22.881
Well, it's saying response
to JSON is not a function.

43
00:02:22.881 --> 00:02:24.408
Let's see what's dive.

44
00:02:24.408 --> 00:02:26.519
Let's dive a little bit down in that.

45
00:02:26.519 --> 00:02:30.283
So we're gonna do here is after
it fetches, I need to see then.

46
00:02:30.283 --> 00:02:32.023
Let's log what actually comes back, so

47
00:02:32.023 --> 00:02:34.435
in this case we're gonna
comment out this part as well.

48
00:02:34.435 --> 00:02:37.356
And let's see what happens.

49
00:02:37.356 --> 00:02:40.193
So as you can see, What's going on?

50
00:02:40.193 --> 00:02:43.718
Well, the reason why response to
JSON doesn't need to happen is

51
00:02:43.718 --> 00:02:46.349
because search basically,
nuxts team knows.

52
00:02:46.349 --> 00:02:49.034
Every time you're fetching data back,
you don't want it as a string,

53
00:02:49.034 --> 00:02:49.805
you want it as JSON.

54
00:02:49.805 --> 00:02:54.162
So let's save you that extra and
JSON file it for you when you get it back.

55
00:02:54.162 --> 00:03:00.747
So in other words, what we can do then
is basically let's grab this line,

56
00:03:00.747 --> 00:03:06.502
swap it in, omit the thing, but
then this is just the response.

57
00:03:06.502 --> 00:03:09.396
And then just like that.

58
00:03:09.396 --> 00:03:13.493
Now, if we refresh, there you go.

59
00:03:13.493 --> 00:03:15.206
Everything is working.

60
00:03:15.206 --> 00:03:18.979
And so the difference now is that
if we go inside of our nuxt,

61
00:03:18.979 --> 00:03:21.920
and we run NPM run build,
we'll see that we get

62
00:03:21.920 --> 00:03:26.771
a brand new directory that previously
we didn't see, which is dot output.

63
00:03:26.771 --> 00:03:28.179
And so once again, just as a reminder,

64
00:03:28.179 --> 00:03:30.452
this is usually because something
is generating this folder.

65
00:03:30.452 --> 00:03:32.593
Not something for you to touch and
mess around with.

66
00:03:32.593 --> 00:03:34.879
But this is basically what
you'll usually be serving.

67
00:03:34.879 --> 00:03:38.892
And so as you can see here,
there's a public folder in here.

68
00:03:38.892 --> 00:03:42.581
And there's a bunch of things that
are co chunked, which is nice.

69
00:03:42.581 --> 00:03:47.748
And Server index chunks.

70
00:03:47.748 --> 00:03:49.766
Yep.

71
00:03:49.766 --> 00:03:51.516
Nitro Client.

72
00:03:51.516 --> 00:03:52.028
Okay, so

73
00:03:52.028 --> 00:03:55.934
basically what it done is broken it up
into a bunch of modules that makes it

74
00:03:55.934 --> 00:04:00.562
easier for basically performance loading
purposes, as far as knowing what to load.

75
00:04:00.562 --> 00:04:03.569
But what I wanna do actually real quick,

76
00:04:03.569 --> 00:04:07.997
that I wanna see if we can make happen,
is NPM run generate.

77
00:04:07.997 --> 00:04:11.307
So the difference between the generate and
the build commands is that,

78
00:04:11.307 --> 00:04:13.968
the generate command is more for
basic static building.

79
00:04:13.968 --> 00:04:18.211
And build is the build output that
you're usually deploy onto a server.

80
00:04:18.211 --> 00:04:20.138
And that's it actually gets served up.

81
00:04:20.138 --> 00:04:22.001
And so it's fine,
looks like there is an error,

82
00:04:22.001 --> 00:04:25.375
because we're actually seeing some stuff
being not found, but that's totally fine.

83
00:04:25.375 --> 00:04:26.850
And we can deal with that later.

84
00:04:26.850 --> 00:04:31.316
But, you can see now that on the index,
we have our index page, and you see that,

85
00:04:31.316 --> 00:04:34.436
this is like our Google Fonts
stuff that we had earlier.

86
00:04:34.436 --> 00:04:40.083
But then, if we go into display,
we go into todos and we go into index.

87
00:04:40.083 --> 00:04:43.832
You'll see now that.

88
00:04:43.832 --> 00:04:47.967
They actually have data here as far as
todos queries and things and so on.

89
00:04:47.967 --> 00:04:52.376
It's bundled and split it out, but
you start to see, like this is one of

90
00:04:52.376 --> 00:04:57.230
the advantages of using their native
fetch tools is because now we're getting

91
00:04:57.230 --> 00:05:01.737
the ability to see benefits on the server
side as well as the client side.

92
00:05:01.737 --> 00:05:04.725
And to be honest when it
comes to what is inside,

93
00:05:04.725 --> 00:05:08.474
the bill, that could be an entire
workshop in it of itself.

94
00:05:08.474 --> 00:05:11.300
So this is more of to give
you a cursory glance.

95
00:05:11.300 --> 00:05:14.134
And so that in the future as you're
starting to decide what makes the most

96
00:05:14.134 --> 00:05:15.858
sense for your app, and the requirements.

97
00:05:15.858 --> 00:05:17.858
Then you can decide accordingly like,
okay yeah,

98
00:05:17.858 --> 00:05:20.988
I do want it to be server side rendered,
or I want it to be statically generated.

99
00:05:20.988 --> 00:05:23.715
And just figuring it out from there.

100
00:05:23.715 --> 00:05:26.153
Does that make sense?

101
00:05:26.153 --> 00:05:28.961
Cool.

102
00:05:28.961 --> 00:05:36.454
The other thing that you should know about
todo, is that this whole thing, right?

103
00:05:36.454 --> 00:05:40.594
Might feel a lot, but what you can do
in addition is, and this is the part

104
00:05:40.594 --> 00:05:45.493
that's a little confusing right now as
the ecosystem stabilizes, is that there's

105
00:05:45.493 --> 00:05:49.718
actually a useFetch composable,
that actually simplifies this a lot.

106
00:05:49.718 --> 00:05:54.651
So basically becomes this,

107
00:05:54.651 --> 00:06:00.206
I believe, response.

108
00:06:06.085 --> 00:06:10.738
So useFetch is basically like syntactic
sugar that wraps around all of that.

109
00:06:10.738 --> 00:06:13.579
Cuz the useAsyncData
define a key callback.

110
00:06:13.579 --> 00:06:17.993
$fetch is a lot of primitives
to know about and to do.

111
00:06:17.993 --> 00:06:19.751
So useFetch is an alternative.

112
00:06:19.751 --> 00:06:22.375
Now, which one will become
the best practice and

113
00:06:22.375 --> 00:06:24.110
stuff still remains to be seen?

114
00:06:24.110 --> 00:06:26.901
So that's something to consider
as far as things to use, but

115
00:06:26.901 --> 00:06:29.035
the useasyncData is
the key one to know about,

116
00:06:29.035 --> 00:06:31.958
cuz that's the core thing around
how a lot of things are built.

117
00:06:31.958 --> 00:06:34.754
And so from there,
you'll have the chance it started,

118
00:06:34.754 --> 00:06:37.560
just playing around with things and
figuring that out.

119
00:06:37.560 --> 00:06:40.833
But, I know that server-side
rendering is a topic that still can

120
00:06:40.833 --> 00:06:42.989
be rather complex for people to deal with.

121
00:06:42.989 --> 00:06:44.864
Because a lot of times
as front-end developers,

122
00:06:44.864 --> 00:06:46.795
we don't necessarily touch
those sort of things.

123
00:06:46.795 --> 00:06:50.600
It's mainly focusing on the client side
things, but I wanted to give you a peek

124
00:06:50.600 --> 00:06:53.497
into what nuxt starts to provide for
you as a result of that.

125
00:06:53.497 --> 00:06:56.746
There are obviously a lot of other
things that come with it, but one of

126
00:06:56.746 --> 00:07:00.624
the questions that was asked in the chat
earlier was around the idea of LAZY Fetch.

127
00:07:00.624 --> 00:07:04.747
And so one of the things they did add is
that if you prepend something with LAZY,

128
00:07:04.747 --> 00:07:06.451
like LAZY Fetch, for example.

129
00:07:06.451 --> 00:07:10.412
It'll basically prevent the page
from being blocked from rendering.

130
00:07:10.412 --> 00:07:11.339
Because otherwise, right?

131
00:07:11.339 --> 00:07:14.237
Like most [INAUDIBLE] Calls, it's
waiting for it to get complete the call,

132
00:07:14.237 --> 00:07:15.571
then renders out the entire page.

133
00:07:15.571 --> 00:07:20.048
And so, the LAZY keyword
throughout the nuxt library,

134
00:07:20.048 --> 00:07:24.728
can actually be used to stop
the patron blocked entirely.

135
00:07:24.728 --> 00:07:27.358
So you can even do LAZY components for
example two.

136
00:07:27.358 --> 00:07:30.891
Where, don't wait for this component to
load before you show me the homepage, just

137
00:07:30.891 --> 00:07:34.243
show me the thing and then that's fine,
blinking the component when it comes.

138
00:07:34.243 --> 00:07:37.679
And so it's a little ergonomics like this
that are currently being experimented

139
00:07:37.679 --> 00:07:40.874
with, inside of the nuxt API in order
to make our lives a little bit easier.

140
00:07:40.874 --> 00:07:42.698
But as they're being standardized,

141
00:07:42.698 --> 00:07:46.064
I kinda wanna refrain from saying
anything is best practice just yet.

142
00:07:46.064 --> 00:07:48.635
And we'll kinda see how
the ecosystem grows, yeah,

143
00:07:48.635 --> 00:07:51.793
once that suite continues to
pervade throughout the ecosystem.

