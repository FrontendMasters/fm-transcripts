WEBVTT

1
00:00:00.000 --> 00:00:03.666
So now,
that you have all that information,

2
00:00:03.666 --> 00:00:07.625
I have one more thing to
share with you actually.

3
00:00:07.625 --> 00:00:13.935
If for instance, we decide you know what,
we are not gonna define a custom metrics.

4
00:00:13.935 --> 00:00:17.510
We're not gonna worry about it.

5
00:00:17.510 --> 00:00:22.421
You can actually define default
content in a slot by making the slot,

6
00:00:22.421 --> 00:00:28.104
opening up the element and just dropping
in whatever you want to be the default.

7
00:00:30.140 --> 00:00:32.531
And just like that,
you'll see it refers to that.

8
00:00:32.531 --> 00:00:35.827
But the moment the parent decides
to override it, that's fine.

9
00:00:35.827 --> 00:00:38.061
It can rearrange do whatever it wants, but

10
00:00:38.061 --> 00:00:42.657
now you've configured a default slot value
that will automatically be populated, and

11
00:00:42.657 --> 00:00:45.468
you still also provide some
configuration options.

12
00:00:45.468 --> 00:00:47.506
So just for the sake of completeness,

13
00:00:47.506 --> 00:00:50.442
I will just make a remaining
item just as another prop.

14
00:00:50.442 --> 00:00:53.352
Because theoretically,
if someone's trying to configure this,

15
00:00:53.352 --> 00:00:54.991
they'll need both data properties.

16
00:00:54.991 --> 00:00:57.914
So for the sake of completeness,
we have all of that.

17
00:00:57.914 --> 00:01:01.771
Your job once again, we have
the photo gallery and the TodoViewer,

18
00:01:01.771 --> 00:01:03.810
you will see lots of similarities.

19
00:01:03.810 --> 00:01:08.849
I want you to create a base component that
will then be easily taken configuration or

20
00:01:08.849 --> 00:01:10.871
however you decide to design it.

21
00:01:10.871 --> 00:01:14.353
Taking options that will allow
you to basically share both so

22
00:01:14.353 --> 00:01:18.807
that there's less code like duplication
happening across the components.

23
00:01:22.663 --> 00:01:26.088
Okay, what we're gonna take a look
at first is let's go ahead and

24
00:01:26.088 --> 00:01:28.351
just look at these two
things side by side.

25
00:01:28.351 --> 00:01:33.117
And this is, I'm gonna give you a live
refactoring of what I would kind of think

26
00:01:33.117 --> 00:01:35.227
of when I'm looking at these two.

27
00:01:35.227 --> 00:01:38.863
So let me split that window and
okay, great.

28
00:01:38.863 --> 00:01:41.460
So did you do?

29
00:01:41.460 --> 00:01:42.289
Okay, great.

30
00:01:42.289 --> 00:01:46.179
Okay, so when we're taking a look at this,
we know for a fact that both of them for

31
00:01:46.179 --> 00:01:49.410
example, we see here,
both of them have a ref, that's an array.

32
00:01:49.410 --> 00:01:51.753
We know that we're gonna
have a list of something.

33
00:01:51.753 --> 00:01:53.452
So that's already common.

34
00:01:53.452 --> 00:01:55.457
We know for a fact that, let's see,

35
00:01:55.457 --> 00:01:58.128
there's this function
here that's repeated.

36
00:01:58.128 --> 00:02:02.145
So that's something that should
certainly be abstracted away, and

37
00:02:02.145 --> 00:02:03.678
then what else do we know?

38
00:02:03.678 --> 00:02:07.911
We know that actually, for the most part,
we wanna keep most of the HTML actually

39
00:02:07.911 --> 00:02:11.423
pretty similar, we don't want them
to really vary all that much.

40
00:02:11.423 --> 00:02:15.987
I know it wasn't immediately apparent
based on the way we've been playing around

41
00:02:15.987 --> 00:02:16.790
with styles.

42
00:02:16.790 --> 00:02:20.515
But for the sake of a base component,
we should assume that they more or

43
00:02:20.515 --> 00:02:21.977
less should look the same.

44
00:02:21.977 --> 00:02:26.579
So whenever I start to refactor, the first
thing I think of is basically I prefix,

45
00:02:26.579 --> 00:02:30.000
I have a set of components and
a prefix called base whatever.

46
00:02:30.000 --> 00:02:34.778
So the reason for this is because in a lot
of, I know component namings schematics,

47
00:02:34.778 --> 00:02:39.169
people tend to veer towards one word
names so like button, link that stuff.

48
00:02:39.169 --> 00:02:40.805
And yes it's really short, but

49
00:02:40.805 --> 00:02:43.724
as we know that conflicts with
HTML specs really easily.

50
00:02:43.724 --> 00:02:47.616
So rather than confused people on,
wait is this Vue, is this HTML?

51
00:02:47.616 --> 00:02:48.117
What is this?

52
00:02:48.117 --> 00:02:51.813
And then if someone in the future
has a class with it later, for me,

53
00:02:51.813 --> 00:02:56.498
it's simplest is to go like for example,
we'll call it base display because this is

54
00:02:56.498 --> 00:02:59.605
just a display for
data is basically what we're doing.

55
00:02:59.605 --> 00:03:02.262
So basedisplay.Vue,
this is kind of where I start.

56
00:03:02.262 --> 00:03:04.781
So I'm gonna go ahead and
open up my template and

57
00:03:04.781 --> 00:03:06.995
I see there was a great question earlier.

58
00:03:06.995 --> 00:03:10.200
Do you wanna actually go ahead and
ask about this?

59
00:03:10.200 --> 00:03:14.369
&gt;&gt; Yeah, I seen in a couple other cases
rather than script templates style,

60
00:03:14.369 --> 00:03:17.599
I'd seen the sequence template
script style I believe,

61
00:03:17.599 --> 00:03:21.724
I was wondering whether that's
a compiler thing and ergonomics thing.

62
00:03:21.724 --> 00:03:23.730
&gt;&gt; Got it.
So this is an excellent question and

63
00:03:23.730 --> 00:03:25.208
one that I actually do get a lot.

64
00:03:25.208 --> 00:03:29.459
And so the first thing to know is that the
order blocks is completely irrelevant to

65
00:03:29.459 --> 00:03:30.909
how it's being compiled.

66
00:03:30.909 --> 00:03:34.297
What's important to know is that
over time you'll notice that and

67
00:03:34.297 --> 00:03:37.264
especially in Vue 2.0,
we did template script style,

68
00:03:37.264 --> 00:03:40.127
that was actually the convention for
the longest time.

69
00:03:40.127 --> 00:03:43.471
And over time, I think what we started
to notice is that When it came to

70
00:03:43.471 --> 00:03:46.601
the ergonomics of doing development,
what do we intend to see?

71
00:03:46.601 --> 00:03:50.478
Well, we have some static, some HTML to
top, we have a long body of JavaScript,

72
00:03:50.478 --> 00:03:52.545
and then we have some
styles at the bottom.

73
00:03:52.545 --> 00:03:56.226
But when you think about it, when you're
working on styling your component,

74
00:03:56.226 --> 00:03:57.524
what are you working with?

75
00:03:57.524 --> 00:03:58.228
Template and CSS.

76
00:03:58.228 --> 00:04:00.459
But if you have all this
JavaScript in the middle,

77
00:04:00.459 --> 00:04:02.489
then you have to like
scroll all the way down.

78
00:04:02.489 --> 00:04:05.299
And don't get me wrong, I know you
can collapse the script block and

79
00:04:05.299 --> 00:04:07.779
stuff to minimize that stuff,
but then vice versa though.

80
00:04:07.779 --> 00:04:11.055
If you're only working on your
script block and your HTML block,

81
00:04:11.055 --> 00:04:12.971
well that is right next to each other.

82
00:04:12.971 --> 00:04:16.727
And so basically what we realized is
the template is kind of the intermediary

83
00:04:16.727 --> 00:04:17.853
between both blocks.

84
00:04:17.853 --> 00:04:21.783
It's really rare that you're modifying
JavaScript so that you can modify CSS,

85
00:04:21.783 --> 00:04:23.124
usually it's that tie in.

86
00:04:23.124 --> 00:04:26.816
So just to provide a little bit of
developer experience ergonomics basically

87
00:04:26.816 --> 00:04:30.734
the template has basically a lot more we
have been adopting this where the template

88
00:04:30.734 --> 00:04:31.615
is in the middle.

89
00:04:31.615 --> 00:04:35.403
So that the scrolling is just a little
bit less than, you have less to collapse.

90
00:04:35.403 --> 00:04:39.689
Again, total preferencing, but that's
where the rationale behind the convention

91
00:04:39.689 --> 00:04:42.138
that you're starting to see now nowadays,
so.

92
00:04:42.138 --> 00:04:43.821
Okay, so what are we talking about?

93
00:04:43.821 --> 00:04:47.004
We talked about a generic list item,
we need that.

94
00:04:47.004 --> 00:04:52.414
And we're gonna have some generic layout
stuff, and then we're in template though,

95
00:04:52.414 --> 00:04:55.987
so I need this one,
generic template stuff, all right?

96
00:04:55.987 --> 00:04:56.955
Let's do this.

97
00:04:56.955 --> 00:04:58.260
So first thing first.

98
00:04:58.260 --> 00:05:01.950
I think that TodoViewer at this point
at least on my code base is the most

99
00:05:01.950 --> 00:05:02.651
mature one.

100
00:05:02.651 --> 00:05:05.857
So let me go ahead and actually make sure
I switch over to the four finished branch,

101
00:05:05.857 --> 00:05:07.272
so we don't commit on the wrong one.

102
00:05:07.272 --> 00:05:10.014
And the first thing first is
I'm just gonna go ahead and

103
00:05:10.014 --> 00:05:13.429
actually just copy the HTML, so
we don't just replicate all this.

104
00:05:13.429 --> 00:05:15.492
All right, so the generic template here.

105
00:05:15.492 --> 00:05:17.516
All right, so what can we say with this?

106
00:05:17.516 --> 00:05:21.331
So what I'm gonna do now is I'm gonna stop
doing the side by side because it's really

107
00:05:21.331 --> 00:05:22.858
hard on this particular resume.

108
00:05:22.858 --> 00:05:25.031
We know that the hero has been abstracted.

109
00:05:25.031 --> 00:05:27.536
This is great The title,
this has been genericized.

110
00:05:27.536 --> 00:05:28.403
That's good.

111
00:05:28.403 --> 00:05:31.042
Okay, this fetch data,
this is a little bit.

112
00:05:31.042 --> 00:05:33.130
Okay, this is a question mark here.

113
00:05:33.130 --> 00:05:36.866
So this is like a Todo item, and
then we have slots for the metrics.

114
00:05:36.866 --> 00:05:38.627
And we're not gonna do a default for

115
00:05:38.627 --> 00:05:42.466
now because right now we really don't
know what kind of data we're getting.

116
00:05:42.466 --> 00:05:45.385
So who are we to really say,
what that's going to be.

117
00:05:45.385 --> 00:05:49.150
So let's keep that, let's remove
the props that I showed you earlier.

118
00:05:49.150 --> 00:05:52.956
And then finally, yes,
we are gonna have a list of items, but

119
00:05:52.956 --> 00:05:57.070
we don't necessarily know what's
gonna go inside of every item.

120
00:05:57.070 --> 00:06:01.378
So I think for the purposes of this, the
easiest thing would probably be to say,

121
00:06:01.378 --> 00:06:04.354
in this case,
I might actually make this part of slot.

122
00:06:04.354 --> 00:06:06.671
That's kind of what I'm
actually leaning towards.

123
00:06:06.671 --> 00:06:11.559
So for now, I think I'm just gonna go
ahead and just make this a slot, and

124
00:06:11.559 --> 00:06:15.425
I'll call these items,
that's what this slot will be.

125
00:06:15.425 --> 00:06:18.295
So we'll delete that and
just like that, okay,

126
00:06:18.295 --> 00:06:20.615
this is now this looks pretty generic.

127
00:06:20.615 --> 00:06:24.113
The only thing we need to do
though is now this fetch thing.

128
00:06:24.113 --> 00:06:25.537
What is this thing?

129
00:06:25.537 --> 00:06:28.291
Well, so we know that we're basically
fetching some kind of data.

130
00:06:28.291 --> 00:06:30.747
So for now,
let's just call it fetch item list.

131
00:06:30.747 --> 00:06:32.062
That's like a generic enough name.

132
00:06:32.062 --> 00:06:34.461
And so the first thing we
wanna do is let's go and

133
00:06:34.461 --> 00:06:38.185
just define that since that's the first
thing we kind of abstracted out.

134
00:06:38.185 --> 00:06:42.804
And so what we know is we're going to copy
over this fetch to-do list right here.

135
00:06:42.804 --> 00:06:46.714
And in fact, I realize I'm gonna do
that function thing that I was talking

136
00:06:46.714 --> 00:06:49.063
about before, because I think it's nice.

137
00:06:49.063 --> 00:06:53.674
All right, so we have this, and
we're gonna make this generic, so this is

138
00:06:53.674 --> 00:06:58.580
fetch item list, and what we do know is
that here we have the ability then to say,

139
00:06:58.580 --> 00:07:00.581
okay, we know what the type is.

140
00:07:00.581 --> 00:07:04.707
So what we could really do is we could
have a prop of the type that we're

141
00:07:04.707 --> 00:07:09.567
actually looking for because this JSON
placeholder for now is a consistent URL.

142
00:07:09.567 --> 00:07:14.286
So I'm going to do here is I'm going to go
ahead and switch to ES6 template literal,

143
00:07:14.286 --> 00:07:16.619
and we're going to do props.itemTYpe.

144
00:07:16.619 --> 00:07:18.601
So this will genericized what this is.

145
00:07:18.601 --> 00:07:23.264
Now granted we still have this thing to do
right here this thing is still a problem,

146
00:07:23.264 --> 00:07:26.981
because this right here is calling
a to-do list our value which we

147
00:07:26.981 --> 00:07:28.352
won't actually have.

148
00:07:28.352 --> 00:07:30.353
All right, so what do we do next?

149
00:07:30.353 --> 00:07:32.638
Let's at least figure this part out.

150
00:07:32.638 --> 00:07:34.728
Well, we need to define some props.

151
00:07:34.728 --> 00:07:35.442
So I do const.

152
00:07:35.442 --> 00:07:38.593
So actually let me show this
as it makes more sense.

153
00:07:38.593 --> 00:07:43.584
Now as I mentioned before, we can define
props using the define props method,

154
00:07:43.584 --> 00:07:46.847
which I'm just gonna go ahead and
import from Vue.

155
00:07:46.847 --> 00:07:48.269
And then inside of here,

156
00:07:48.269 --> 00:07:51.536
we can then say the item type
is going to be of type string.

157
00:07:51.536 --> 00:07:53.885
And this time,
let's not make a generic assumption.

158
00:07:53.885 --> 00:07:55.884
So we're just gonna make it required true.

159
00:07:55.884 --> 00:07:59.605
Now the thing is, though,
because we're in vanilla JavaScript land,

160
00:07:59.605 --> 00:08:01.500
this doesn't have a reference point.

161
00:08:01.500 --> 00:08:04.208
It's just a function that runs and
defines some props.

162
00:08:04.208 --> 00:08:06.584
But we wanna refer to it
here as props.itemType.

163
00:08:06.584 --> 00:08:10.558
And so the way we do that is we actually
assign the variable to it, props, and

164
00:08:10.558 --> 00:08:14.000
that's what allows you to access
the values inside of the props.

165
00:08:14.000 --> 00:08:17.485
Because without this, it's just
a generic function that just runs, and

166
00:08:17.485 --> 00:08:19.462
it's part of the component definition.

167
00:08:19.462 --> 00:08:20.763
But since we want to use it,

168
00:08:20.763 --> 00:08:23.827
we actually need to declare it
inside of our script setup block.

169
00:08:26.238 --> 00:08:28.851
Okay, so
that's two pieces of the puzzle solved.

170
00:08:28.851 --> 00:08:32.058
The next thing we need to
actually be able to do though,

171
00:08:32.058 --> 00:08:34.373
is we need a generic list item, right?

172
00:08:34.373 --> 00:08:36.705
Because this thing is definitely
not gonna be todoList.

173
00:08:36.705 --> 00:08:38.718
So let's go ahead and do a const itemList.

174
00:08:38.718 --> 00:08:43.747
And this itemList, we'll use a ref,
and this will be an empty list.

175
00:08:43.747 --> 00:08:46.424
So then we'll say ref here,
just like that.

176
00:08:46.424 --> 00:08:50.211
And then now,
we can switch todoList to itemList.

177
00:08:50.211 --> 00:08:56.801
And now, we can save that, and this is
starting to come together a little bit.

178
00:08:56.801 --> 00:09:00.069
So okay, the next thing I find that's
easiest to do then, so let's see,

179
00:09:00.069 --> 00:09:02.150
that's done, that's done, that's done.

180
00:09:02.150 --> 00:09:05.602
Let's actually see how
it works in practice.

181
00:09:05.602 --> 00:09:09.201
So what we're gonna do here is we're
gonna open up our TodoViewer, and

182
00:09:09.201 --> 00:09:12.691
what I'm gonna do here is,
let's import the base component first.

183
00:09:12.691 --> 00:09:18.152
So import BaseDisplay from, and
then it'll just be BaseDisplay, cuz we're

184
00:09:18.152 --> 00:09:23.961
in the same directory as our components
right now, so that's what's happening.

185
00:09:23.961 --> 00:09:27.751
So now that we've sort that out,
let's go ahead and use it, shall we?

186
00:09:27.751 --> 00:09:29.503
So we have BaseDisplay, and

187
00:09:29.503 --> 00:09:33.309
then we're gonna have a couple
of things we'll need it to do.

188
00:09:33.309 --> 00:09:36.356
So what kind of props does it have.?

189
00:09:36.356 --> 00:09:40.183
Well, if we look at the definition,
we'll see that we have, okay,

190
00:09:40.183 --> 00:09:41.443
we have a titleProps.

191
00:09:41.443 --> 00:09:44.002
So let's go ahead and
give that title right now of TodoViewer.

192
00:09:44.002 --> 00:09:49.424
Okay, and then what else can we do?

193
00:09:49.424 --> 00:09:54.833
Well, we need to actually tell it,
wait, BaseDisplay, yeah, BaseDisplay.

194
00:09:54.833 --> 00:09:57.767
Why did it define it that way?

195
00:09:57.767 --> 00:09:59.607
This is where it's being called,
my mistake.

196
00:09:59.607 --> 00:10:04.823
Okay, so BaseDisplay here actually is
taking a props of itemType, my mistake.

197
00:10:04.823 --> 00:10:10.874
So we go, itemType, and
then we wanna make this the todos.

198
00:10:10.874 --> 00:10:16.825
So that's what we're
expecting in the list.

199
00:10:16.825 --> 00:10:22.461
So once we save that, we can now
basically, okay, so that will update that.

200
00:10:22.461 --> 00:10:25.402
And what we wanna do now is,
let's go ahead and

201
00:10:25.402 --> 00:10:28.962
expose the value that we're
getting of this itemList.

202
00:10:28.962 --> 00:10:32.996
We're gonna expose it back to our
parent to actually take a look.

203
00:10:32.996 --> 00:10:37.873
So I'm gonna say that this
will be an itemList prop that

204
00:10:37.873 --> 00:10:41.176
will get itemList, just like that.

205
00:10:41.176 --> 00:10:45.039
So inside of here, let me go ahead, and
I'm just gonna comment all this out so

206
00:10:45.039 --> 00:10:46.950
that this doesn't get distracting.

207
00:10:49.914 --> 00:10:53.839
Inside of our template block where
we're having the v-slot items,

208
00:10:53.839 --> 00:10:56.216
we're gonna get our slotProps, right?

209
00:10:56.216 --> 00:11:00.618
And so now I'm just gonna spell it
out explicitly so people can follow.

210
00:11:00.618 --> 00:11:03.702
And then let's go ahead and

211
00:11:03.702 --> 00:11:08.673
just render out the slotProps.itemList.

212
00:11:10.242 --> 00:11:15.948
Okay, so if we go inside
of our app now and refresh,

213
00:11:15.948 --> 00:11:21.271
all right, so we see here,
Fetch Data, okay?

214
00:11:21.271 --> 00:11:23.811
We see that actually
something is returning.

215
00:11:23.811 --> 00:11:27.772
Okay, so this is pretty good,
that's fairly promising.

216
00:11:27.772 --> 00:11:30.201
The only thing though is that
there's no heading being shown.

217
00:11:30.201 --> 00:11:31.893
And that's because we're looking for

218
00:11:31.893 --> 00:11:34.001
a title here that we
actually haven't defined.

219
00:11:34.001 --> 00:11:38.671
So let's go and add that real quick here,
to title, type String, and once again,

220
00:11:38.671 --> 00:11:40.559
let's make this also required.

221
00:11:40.559 --> 00:11:45.743
And then once we do that,
now we can actually add the title here and

222
00:11:45.743 --> 00:11:48.401
do Todo Viewer, just like that.

223
00:11:48.401 --> 00:11:50.896
And if we refresh, there you go,
Todo Viewer is there.

224
00:11:50.896 --> 00:11:53.971
We see the list of data,
okay, pretty good so far.

225
00:11:53.971 --> 00:11:56.729
Let's go ahead and just see how far
this gets us with the photo gallery.

226
00:11:56.729 --> 00:11:59.201
So I'm gonna go over to the photo gallery.

227
00:11:59.201 --> 00:12:03.593
And let's go ahead and
comment all this out.

228
00:12:03.593 --> 00:12:07.479
And I'll just copy this component
that we're using in Todo Viewer as

229
00:12:07.479 --> 00:12:08.561
a starting point.

230
00:12:11.703 --> 00:12:12.457
Oop, here we go.

231
00:12:12.457 --> 00:12:16.631
And then instead of Todo Viewer,
it is the Photo Gallery.

232
00:12:16.631 --> 00:12:18.324
And the type is gonna be photos.

233
00:12:18.324 --> 00:12:23.050
And then, yep, everything else,
I think, stays the same for now.

234
00:12:23.050 --> 00:12:24.789
So we save that and refresh.

235
00:12:24.789 --> 00:12:27.841
All right, one,
we're already seeing some standardization.

236
00:12:27.841 --> 00:12:31.684
There you go, now we see the list,
now we see the other list.

237
00:12:31.684 --> 00:12:32.956
Okay, this is looking a lot better.

238
00:12:35.662 --> 00:12:40.942
But we have a small problem
that is not immediately

239
00:12:40.942 --> 00:12:45.341
obvious, which is that if we take a look,

240
00:12:45.341 --> 00:12:49.882
let's say, okay, so actually metrics.

241
00:12:49.882 --> 00:12:54.480
When we talked about metrics, let's not
forget that Todo Viewer and Photo Gallery

242
00:12:54.480 --> 00:12:58.241
have two very different ideas of
what metrics they wanna track are.

243
00:12:58.241 --> 00:13:02.930
So there's this bit of a problem of, well,
I can expose the items via slotProps, and

244
00:13:02.930 --> 00:13:06.515
I guess I could run some calculations
literally in line here, but

245
00:13:06.515 --> 00:13:07.775
it feels really ugly.

246
00:13:07.775 --> 00:13:10.115
It feels weird because
the concern is really,

247
00:13:10.115 --> 00:13:12.815
it should really be sitting
the logic in Todo Viewer.

248
00:13:12.815 --> 00:13:16.513
It doesn't make sense to put
that logic inside a BaseDisplay,

249
00:13:16.513 --> 00:13:19.112
cuz BaseDisplay is supposed to be generic.

250
00:13:19.112 --> 00:13:21.717
So how the heck are we supposed
to solve this problem?

251
00:13:21.717 --> 00:13:25.200
So we have this itemType,
we have this title.

252
00:13:25.200 --> 00:13:30.088
And the thing is that what if
you could actually have your

253
00:13:30.088 --> 00:13:35.393
parent watch a value,
like a v-model, from your child that

254
00:13:35.393 --> 00:13:40.611
then automatically syncs it,
almost like a two way thing.

255
00:13:40.611 --> 00:13:43.783
And so in other words, what I'm saying is,
so if you think about it,

256
00:13:43.783 --> 00:13:45.394
when we talk about input, right?

257
00:13:45.394 --> 00:13:48.661
So we've seen before, so
let's use a template for

258
00:13:48.661 --> 00:13:52.314
Hero for now, just to give
a place to show how this works.

259
00:13:52.314 --> 00:13:57.295
So if we have a template for v-slot:hero,
and we have an input type of text, and

260
00:13:57.295 --> 00:14:00.986
we do a v-model, and
I'll just call it textModel for now.

261
00:14:00.986 --> 00:14:07.741
And then let me create a ref here
real quick, const textModel = ref( ).

262
00:14:10.902 --> 00:14:14.515
And then all we gotta do is
render that here, textModel.

263
00:14:18.040 --> 00:14:20.916
As you can see, as I'm typing it,
it updates, right?

264
00:14:20.916 --> 00:14:23.453
But what we want is we want
that at a component level.

265
00:14:23.453 --> 00:14:27.483
So in other words,
we wanna be able to say, hey look,

266
00:14:27.483 --> 00:14:33.496
I want you to watch this property here,
itemList, that you generically have.

267
00:14:33.496 --> 00:14:36.992
But then you're gonna watch
it at the parent level.

268
00:14:36.992 --> 00:14:37.693
And it's gonna map.

269
00:14:37.693 --> 00:14:40.318
And so I'm just gonna walk
through the solution and

270
00:14:40.318 --> 00:14:42.346
then hopefully it clicks a little bit.

271
00:14:42.346 --> 00:14:46.905
So the thing about v-model that we talked
about before is that it basically watches,

272
00:14:46.905 --> 00:14:50.128
so if we break apart of v-model,
I just need to demo this, so

273
00:14:50.128 --> 00:14:51.420
that people are aware.

274
00:14:51.420 --> 00:14:57.972
v-model actually consists,
here we go, okay.

275
00:14:57.972 --> 00:15:01.496
v-model is just syntactic sugar for
breaking apart two things,

276
00:15:01.496 --> 00:15:02.785
one, what value it is.

277
00:15:02.785 --> 00:15:05.751
So in this case, it was textModel.

278
00:15:05.751 --> 00:15:09.096
And then it was saying, hey,
on this particular thing,

279
00:15:09.096 --> 00:15:12.104
set textModel.value = event.target.value.

280
00:15:12.104 --> 00:15:14.961
That's at a high level what's happening.

281
00:15:14.961 --> 00:15:16.861
It's doing two things for us at once.

282
00:15:16.861 --> 00:15:20.613
And so since this is a common pattern,
we abstracted it into v-model.

283
00:15:20.613 --> 00:15:23.696
But again, at the end of the day,
we're not doing any black magic,

284
00:15:23.696 --> 00:15:25.011
this is just how HTML works.

285
00:15:25.011 --> 00:15:27.511
We've just combined it into one command.

286
00:15:27.511 --> 00:15:31.032
Okay, so what we ideally
would like to do is say, hey,

287
00:15:31.032 --> 00:15:34.706
when we look at a component,
watch a specific value, and

288
00:15:34.706 --> 00:15:39.478
then assign that value to something
that I care about at the parent level.

289
00:15:39.478 --> 00:15:42.691
So the way this works, is like this.

290
00:15:42.691 --> 00:15:46.362
So I'm gonna delete all this,
we don't need this right now.

291
00:15:46.362 --> 00:15:50.634
All right, what do we care about
the inside of our BaseDisplay?

292
00:15:50.634 --> 00:15:53.146
We care about this itemList, right?

293
00:15:53.146 --> 00:15:57.845
And so what we ultimately wanna do is
we wanna actually be able to say, hey,

294
00:15:57.845 --> 00:16:01.850
we wanna tell whenever something
like a change happens.

295
00:16:01.850 --> 00:16:02.590
So in this case, right?

296
00:16:02.590 --> 00:16:05.263
So earlier in the text,
we said that when the input event happens,

297
00:16:05.263 --> 00:16:07.060
that's when the change occurs.

298
00:16:07.060 --> 00:16:09.810
But for us, where's our point
of change in this function?

299
00:16:09.810 --> 00:16:11.210
It is right here.

300
00:16:11.210 --> 00:16:13.650
After all this is done,
something has changed so

301
00:16:13.650 --> 00:16:16.370
tell the parent component it's changed.

302
00:16:16.370 --> 00:16:17.590
So how do we do that?

303
00:16:17.590 --> 00:16:21.279
So for those who are new to Vue 3,
we also have this thing called emits.

304
00:16:21.279 --> 00:16:24.833
And it's similar to props in that we
get to define a series of events,

305
00:16:24.833 --> 00:16:29.328
custom events essentially that we're going
to be emitting from the child component.

306
00:16:29.328 --> 00:16:32.966
And so this might be a bit odd for those
especially coming from a React background,

307
00:16:32.966 --> 00:16:35.974
cuz I think most React developers
are used to passing functions down

308
00:16:35.974 --> 00:16:38.710
from their parents to
the children to do stuff.

309
00:16:38.710 --> 00:16:41.338
But if you think about how
the web naturally works,

310
00:16:41.338 --> 00:16:44.290
event bubbling is actually
how the web is built, right?

311
00:16:44.290 --> 00:16:48.008
Because it happens that somewhere, like
a child component has an event happen,

312
00:16:48.008 --> 00:16:49.630
it bubbles it up to the parent.

313
00:16:49.630 --> 00:16:53.032
The parent decides what to do with that
information rather than it sort of

314
00:16:53.032 --> 00:16:54.900
being unidirectional.

315
00:16:54.900 --> 00:17:02.810
So what we do is similar to our props, we
can have a define emits helper function.

316
00:17:02.810 --> 00:17:06.590
And so
this allows us to define a custom event.

317
00:17:06.590 --> 00:17:10.530
So here, it's just basically I'm gonna
take an array of what it's called.

318
00:17:10.530 --> 00:17:14.532
And so the thing about the the v-model
in Vue 3 is it got an update because

319
00:17:14.532 --> 00:17:17.091
the v-model can now take
a custom argument and

320
00:17:17.091 --> 00:17:20.270
I'll show you what that
means in just a sec.

321
00:17:20.270 --> 00:17:25.211
So when we think of v-model, I think
the way v-model breaks down is that

322
00:17:25.211 --> 00:17:30.240
it emits an event that's called update,
I think model value by default.

323
00:17:30.240 --> 00:17:35.416
And then the thing that it's watching is
called model value underneath the hood,

324
00:17:35.416 --> 00:17:37.752
that's how this thing is paired up.

325
00:17:37.752 --> 00:17:44.390
And so what this means now is that
if we have a prop of itemList,

326
00:17:44.390 --> 00:17:51.040
it's of type array which I'll
default to an array like this.

327
00:17:51.040 --> 00:17:56.200
And so this is just, you need a function
to return an array for reactive reason.

328
00:17:56.200 --> 00:17:58.133
Just know this is
a standard that's done and

329
00:17:58.133 --> 00:18:00.230
there's a reason why
it's not just like this.

330
00:18:01.500 --> 00:18:05.465
It basically it needs to generate a new
array every time this base display

331
00:18:05.465 --> 00:18:07.090
is being used.

332
00:18:07.090 --> 00:18:09.220
So here's what's the cool part.

333
00:18:09.220 --> 00:18:14.349
You can actually update,
emit an event called update itemList,

334
00:18:14.349 --> 00:18:17.060
so these two things are matching.

335
00:18:18.870 --> 00:18:23.109
And so what happens is you can actually,

336
00:18:23.109 --> 00:18:27.721
if I remember, if I'm getting this right,

337
00:18:27.721 --> 00:18:32.718
we can emit basically
when the change happens.

338
00:18:32.718 --> 00:18:36.705
We will actually emit
a update itemList event and

339
00:18:36.705 --> 00:18:40.700
the payload we're passing
is that JSON object.

340
00:18:42.760 --> 00:18:44.320
Now hang on with me for a sec,

341
00:18:44.320 --> 00:18:48.710
I know you're still probably trying
to wrap your brain around it.

342
00:18:48.710 --> 00:18:54.969
So now inside of Todo Viewer,
I'm gonna listen to an event,

343
00:18:54.969 --> 00:18:59.040
a v-model specifically on itemList.

344
00:19:00.080 --> 00:19:05.145
And on itemList, I wanted to map

345
00:19:05.145 --> 00:19:09.840
to my ref todoList like this.

346
00:19:10.980 --> 00:19:17.817
So to prove that this works,
I'm gonna go ahead and

347
00:19:17.817 --> 00:19:22.430
do, yes, do the template again.

348
00:19:22.430 --> 00:19:26.245
V-slot hero, and this time,

349
00:19:26.245 --> 00:19:30.514
we're going to pre the todoList.

350
00:19:30.514 --> 00:19:32.648
And then we're just gonna ignore this for
now.

351
00:19:32.648 --> 00:19:34.560
Oops, sorry, I haven't add symbol.

352
00:19:34.560 --> 00:19:37.200
I think something's funky and
this should be it.

353
00:19:37.200 --> 00:19:39.953
Okay, we refresh that again.

354
00:19:39.953 --> 00:19:41.095
Good, it works.

355
00:19:41.095 --> 00:19:45.823
[LAUGH] Okay,
let's walk this through again

356
00:19:45.823 --> 00:19:49.920
now that we've seen it all together.

357
00:19:49.920 --> 00:19:53.934
The thing is, is that what we learn in
the Vue 2 watching people build enterprise

358
00:19:53.934 --> 00:19:57.065
stuff is that oftentimes when
you're looking at a component,

359
00:19:57.065 --> 00:19:59.690
you need it to basically look at a prop.

360
00:19:59.690 --> 00:20:02.775
And people were doing weird things
that either mutate props or

361
00:20:02.775 --> 00:20:04.560
then throw it up the chain.

362
00:20:04.560 --> 00:20:05.903
And so we said, wait a second,

363
00:20:05.903 --> 00:20:08.954
what if we actually allow people to
emit an event that would say, hey,

364
00:20:08.954 --> 00:20:11.768
there's this item that you care
about in this child component.

365
00:20:11.768 --> 00:20:14.145
And then you can watch
it like a v-model and

366
00:20:14.145 --> 00:20:16.730
bind it to the parent
data that you care about.

367
00:20:16.730 --> 00:20:21.510
And this is why this itemList can
be bound directly to the todoList.

368
00:20:21.510 --> 00:20:25.306
And now, todoList gets all
the data it's supposed to have and

369
00:20:25.306 --> 00:20:29.020
you can now actually run
all your computed properly.

370
00:20:29.020 --> 00:20:33.461
So that when we're inside of the metrics,
for example, let's go to v-slot,

371
00:20:33.461 --> 00:20:34.280
the metrics.

372
00:20:34.280 --> 00:20:41.982
We can actually just output
the completedItems.length here and

373
00:20:41.982 --> 00:20:49.270
then the remainingItems.length
remaining just like that.

374
00:20:50.370 --> 00:20:54.696
And then let me actually delete this for
now, there you go.

375
00:20:54.696 --> 00:20:59.574
And then when you fetch it, now
the logic is where you want it to be but

376
00:20:59.574 --> 00:21:05.320
you have created a generic way to do all
the things that you happen to care about.

377
00:21:06.960 --> 00:21:11.510
And so I know this was a bit of a maze,
twisty turn.

378
00:21:11.510 --> 00:21:15.751
But again, this code will be committed
using a view there for you to analyze.

379
00:21:15.751 --> 00:21:19.456
But passing the model arguments in
combination with these base components and

380
00:21:19.456 --> 00:21:20.980
then you combine them at slots.

381
00:21:20.980 --> 00:21:25.768
You get this really interesting set of
combinations that you can now use and

382
00:21:25.768 --> 00:21:31.164
work with so that you're still basically
running things through what natural DOM,

383
00:21:31.164 --> 00:21:32.992
how things would progress.

384
00:21:32.992 --> 00:21:36.592
But you get the syntactical sugar of
what the framers provide you which is

385
00:21:36.592 --> 00:21:40.710
abstracting that complexity away and
then just making it work.

386
00:21:40.710 --> 00:21:45.206
And so now for example, here in our
photoGallery, we can just say that, hey,

387
00:21:45.206 --> 00:21:46.160
we want to have or

388
00:21:46.160 --> 00:21:50.680
we want to v-model what specifically
the itemList that comes from the child.

389
00:21:50.680 --> 00:21:53.790
And we're gonna attach it to our
photoGallery list that we have.

390
00:21:55.320 --> 00:22:02.680
And so now, we can just simply,
I can copy this ul here.

391
00:22:02.680 --> 00:22:04.463
Although wait, I think the items no,

392
00:22:04.463 --> 00:22:06.840
the items is actually
wrapped in something else.

393
00:22:06.840 --> 00:22:11.500
So actually,
let's just do the li's like this.

394
00:22:11.500 --> 00:22:13.940
We're not gonna use a slotProps like that.

395
00:22:13.940 --> 00:22:17.823
And so now we go inside of
our photoGallery and such,

396
00:22:17.823 --> 00:22:21.278
you'll see everything renders as expected.

