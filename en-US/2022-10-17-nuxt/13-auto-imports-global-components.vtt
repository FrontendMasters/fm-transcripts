WEBVTT

1
00:00:00.042 --> 00:00:04.040
Now, we've done a lot of really
interesting Vue 3 stuff, and honestly,

2
00:00:04.040 --> 00:00:07.593
some of these features we just did
are pretty deep as far as the Vue 3

3
00:00:07.593 --> 00:00:08.494
techniques go.

4
00:00:08.494 --> 00:00:12.454
And so, what I implore you to understand
is that the reason I brought these into

5
00:00:12.454 --> 00:00:16.417
place, because they help to solve some
pretty specific problems that we had.

6
00:00:16.417 --> 00:00:19.351
It's really easy,
especially as developers,

7
00:00:19.351 --> 00:00:23.367
to always wanna play with the shiniest and
the edgiest technique.

8
00:00:23.367 --> 00:00:28.117
But remember that simpler and
something that people can comprehend

9
00:00:28.117 --> 00:00:32.377
always trumps using the the most
latest and greatest thing.

10
00:00:32.377 --> 00:00:35.093
And so, that's why I wanted to give
you this solution where a lot of you

11
00:00:35.093 --> 00:00:37.395
are probably thinking like,
well, if I had shared state,

12
00:00:37.395 --> 00:00:40.085
that might have been a little bit easier,
and that is probably true.

13
00:00:40.085 --> 00:00:42.713
But there are cases where when
you have a base component,

14
00:00:42.713 --> 00:00:44.588
you really just want it to communicate.

15
00:00:44.588 --> 00:00:47.968
Because, imagine, a lot of us have
base input, we have base form fields,

16
00:00:47.968 --> 00:00:49.536
you wanna be able to watch things.

17
00:00:49.536 --> 00:00:52.864
So, on a base form, you might have
a first name field, a last name field,

18
00:00:52.864 --> 00:00:53.634
an email field.

19
00:00:53.634 --> 00:00:55.963
Do you wanna manually tie
that to some global store?

20
00:00:55.963 --> 00:00:59.596
It might make more sense to be like,
here's my username form, and then for

21
00:00:59.596 --> 00:01:03.706
this particular page, I wanna watch the
first name, the last name, the username.

22
00:01:03.706 --> 00:01:06.845
And you should be able to just do that
without having to set up an entire

23
00:01:06.845 --> 00:01:08.698
store to share a state between, right?

24
00:01:08.698 --> 00:01:12.514
And so, again, different types of
modularity for different problems,

25
00:01:12.514 --> 00:01:14.800
different types, sizes of state sharing.

26
00:01:14.800 --> 00:01:17.957
So just something to consider
as an option going forward.

27
00:01:17.957 --> 00:01:20.615
With all that said and
done, though, don't worry,

28
00:01:20.615 --> 00:01:23.466
I did say the components
are special in Nuxt, didn't I?

29
00:01:23.466 --> 00:01:26.624
And so, right now everything
we've done is Vue 3, and so

30
00:01:26.624 --> 00:01:28.308
what exactly do I mean by that?

31
00:01:28.308 --> 00:01:31.273
This entire time I've had
you import components, and

32
00:01:31.273 --> 00:01:35.530
in fact most of you are probably used
to importing components whenever you're

33
00:01:35.530 --> 00:01:38.576
trying to define components
that you're going to use.

34
00:01:38.576 --> 00:01:41.684
So the most common of this, again,
just for sake of definition,

35
00:01:41.684 --> 00:01:43.387
is actually let me not do this here.

36
00:01:43.387 --> 00:01:48.488
And actually fun tip, you can actually
have two script blocks inside of a single

37
00:01:48.488 --> 00:01:53.911
file component, one that's script set up,
and one that's a normal script block.

38
00:01:53.911 --> 00:01:58.062
Because sometimes you need
an actual component to export.

39
00:01:58.062 --> 00:02:01.305
Anyways, just know that it's possible.

40
00:02:01.305 --> 00:02:03.925
So this is actually not invalid syntax,
but.

41
00:02:03.925 --> 00:02:06.011
So, normally we register components.

42
00:02:06.011 --> 00:02:08.213
That's what we're used to,
especially with Options API.

43
00:02:08.213 --> 00:02:10.194
And so what I showed you earlier, though,

44
00:02:10.194 --> 00:02:12.460
is that you don't need
to register components.

45
00:02:12.460 --> 00:02:16.531
You don't need to register them manually
inside of script setup because Vue knows

46
00:02:16.531 --> 00:02:20.204
that if you're importing this component,
we know you're gonna use it.

47
00:02:20.204 --> 00:02:23.900
So you don't have to define it a second
time as something you have to actually

48
00:02:23.900 --> 00:02:24.489
register.

49
00:02:24.489 --> 00:02:28.132
Well, Nuxt takes that one step further and
says, honestly,

50
00:02:28.132 --> 00:02:31.864
you know it's a component,
you know where it probably lives.

51
00:02:31.864 --> 00:02:33.004
So, by default,

52
00:02:33.004 --> 00:02:37.493
you actually don't ever need to
import any components on Nuxt at all.

53
00:02:37.493 --> 00:02:41.651
To be clear, though, this does not mean
that all of your components are bundled in

54
00:02:41.651 --> 00:02:43.837
every single page and every single build.

55
00:02:43.837 --> 00:02:47.704
This is a DX, developer experience,
ergonomic thing, where they found that

56
00:02:47.704 --> 00:02:51.281
most people overall when using
components could basically traceback,

57
00:02:51.281 --> 00:02:53.648
especially with things
like go to definition.

58
00:02:53.648 --> 00:02:57.906
So, for BaseDisplay, for example, if I
go to right click &gt; Go to Ddefinition,

59
00:02:57.906 --> 00:02:59.723
you'll see that theoretically,

60
00:02:59.723 --> 00:03:02.932
it'll actually tell me where
it is if I really didn't know.

61
00:03:02.932 --> 00:03:07.699
And so, if that's the case, it was like,
we know that our import statements at

62
00:03:07.699 --> 00:03:11.419
the top get really big anyway,
so why be redundant with that?

63
00:03:11.419 --> 00:03:14.482
And so that's one thing that's
particularly special about that.

64
00:03:14.482 --> 00:03:19.511
Now again, it's a hotly debated topic cuz
some people like being very explicit.

65
00:03:19.511 --> 00:03:23.110
And the reason I wanted to show you,
cuz it's so important, is that,

66
00:03:23.110 --> 00:03:26.225
you're not forced to use their
auto import functionality.

67
00:03:26.225 --> 00:03:30.382
The other special thing that you probably
should know about when it comes to Nuxt

68
00:03:30.382 --> 00:03:34.431
components is they did apply convention
where if you create a global folder.

69
00:03:34.431 --> 00:03:36.958
And so
let's say we drop BaseDisplay into global,

70
00:03:36.958 --> 00:03:39.736
this is something that will
be built on everything now.

71
00:03:39.736 --> 00:03:44.184
Cuz it assume, you told it,
it's a global component.

72
00:03:44.184 --> 00:03:47.759
And so, again, this is a very
different paradigm from auto import.

73
00:03:47.759 --> 00:03:51.226
Auto import, an ergonomic thing,
if you throw something in global,

74
00:03:51.226 --> 00:03:54.479
expect it appear to in the payload
on everything that's loaded.

75
00:03:54.479 --> 00:03:58.571
And so, this is not necessary a bad thing,
the immediate instinct might be like,

76
00:03:58.571 --> 00:04:00.127
well, I should never do that.

77
00:04:00.127 --> 00:04:03.451
And we were talking a little bit about
this at break, but anytime you hear

78
00:04:03.451 --> 00:04:07.227
in tech like a never or some sort of
absolute, it's probably worth questioning.

79
00:04:07.227 --> 00:04:10.610
Not to say that you shouldn't
avoid it most of the time, but

80
00:04:10.610 --> 00:04:12.708
there are most likely exceptions and

81
00:04:12.708 --> 00:04:16.510
problems where the solution
actually fits really, really well.

82
00:04:16.510 --> 00:04:21.163
And so, an example of this is if you have,
let's say, a base button component.

83
00:04:21.163 --> 00:04:24.742
If you know 99% of your site
uses this base button component,

84
00:04:24.742 --> 00:04:28.473
then it probably makes sense to
just go ahead and have that loaded.

85
00:04:28.473 --> 00:04:31.632
And then that way it doesn't
have to be reloaded again,

86
00:04:31.632 --> 00:04:34.671
then the bundler can do
performance optimizations.

87
00:04:34.671 --> 00:04:37.738
But otherwise, for most things, it's true,

88
00:04:37.738 --> 00:04:42.186
you probably will avoid this global
folder, but just know that those

89
00:04:42.186 --> 00:04:47.647
are the two paradigms that Nuxt provides
you when you're working with components.

90
00:04:47.647 --> 00:04:51.972
Does anyone have any questions about
the components stuff that we've gone over?

91
00:04:51.972 --> 00:04:57.708
&gt;&gt; I'm assuming in Nuxt you should still
import ref, computed, reactive, etc.

92
00:04:57.708 --> 00:05:02.505
Those are not implicitly-
&gt;&gt; So, I guess, since you're asking that,

93
00:05:02.505 --> 00:05:04.829
I will answer that question.

94
00:05:04.829 --> 00:05:07.993
So the stuff up here actually defineProps,
ref, computed.

95
00:05:07.993 --> 00:05:12.034
Let's just say the Nassim is very big
fan of not having to import stuff

96
00:05:12.034 --> 00:05:16.090
that you probably will eventually
just automatically know and use.

97
00:05:16.090 --> 00:05:18.740
And so, yes,
some of these more popular composable,

98
00:05:18.740 --> 00:05:21.218
which I'll be explaining
little bit later on, but

99
00:05:21.218 --> 00:05:24.578
the bottom line is a lot of stuff gets
abstracted away at the end of it.

100
00:05:24.578 --> 00:05:26.219
Should you choose to opt into it?

101
00:05:26.219 --> 00:05:29.203
The reason, especially when I teach
like to define the import is so

102
00:05:29.203 --> 00:05:30.813
people can see where it comes from.

103
00:05:30.813 --> 00:05:33.656
And again, some people like that
documentation in their code and

104
00:05:33.656 --> 00:05:37.236
there's actually nothing wrong with that,
I actually see the benefits of that.

105
00:05:37.236 --> 00:05:41.591
But for those who are really working
quickly, want to see no more concise code,

106
00:05:41.591 --> 00:05:42.439
that's cool.

107
00:05:42.439 --> 00:05:44.005
Auto import is there for you.

108
00:05:44.005 --> 00:05:46.635
One more thing about
components with naming.

109
00:05:46.635 --> 00:05:51.227
So, I know that it's very popular
on project conventions to group

110
00:05:51.227 --> 00:05:52.950
components by folders.

111
00:05:52.950 --> 00:05:54.564
And, in my personal opinion,

112
00:05:54.564 --> 00:05:57.552
you should try to avoid that
whenever humanly possible.

113
00:05:57.552 --> 00:06:00.907
Because what happens a lot of times
when you start letting developers use

114
00:06:00.907 --> 00:06:04.702
folders to organize their components is
they kinda start getting a little bit lazy

115
00:06:04.702 --> 00:06:07.635
about the naming, and
then it starts getting heavily nested.

116
00:06:07.635 --> 00:06:11.358
And when you have that happen across
a team that's spread across the world,

117
00:06:11.358 --> 00:06:14.327
working in different time zones,
solving tickets in silo,

118
00:06:14.327 --> 00:06:16.378
you will find yourself in a world of hurt.

119
00:06:16.378 --> 00:06:19.267
When you have like 50
different button components,

120
00:06:19.267 --> 00:06:22.103
when 40 of them probably
do roughly the same thing.

121
00:06:22.103 --> 00:06:26.783
And so, what I try to recommend
actually is try to keep your component

122
00:06:26.783 --> 00:06:30.027
folder structure as flat
as humanly possible.

123
00:06:30.027 --> 00:06:33.301
Don't get me wrong, there will come
a point where you might be like, okay,

124
00:06:33.301 --> 00:06:35.926
it really does make sense to
group all this stuff in a folder.

125
00:06:35.926 --> 00:06:39.304
But the nice thing about having everything
stay in one file structure is that

126
00:06:39.304 --> 00:06:41.892
whenever someone tries to
create a duplicate component,

127
00:06:41.892 --> 00:06:43.530
they'll immediately get blocked,

128
00:06:43.530 --> 00:06:46.734
because you can't name the same file
the same thing in the same folder.

129
00:06:46.734 --> 00:06:47.428
And more importantly,

130
00:06:47.428 --> 00:06:49.414
some people are like,
well that makes scrolling really hard.

131
00:06:49.414 --> 00:06:54.355
But that's what autocomplete's for, like
Command+ P, find the component you want.

132
00:06:54.355 --> 00:06:56.613
So, there's also some other advantages,
too,

133
00:06:56.613 --> 00:06:58.994
that I talk about in my
production grade Vue course.

134
00:06:58.994 --> 00:07:01.940
But another thing that I also like
to do is if you have unit tests for

135
00:07:01.940 --> 00:07:05.476
your components, I actually think it makes
a lot of sense to put them right next

136
00:07:05.476 --> 00:07:06.679
inside of the component.

137
00:07:06.679 --> 00:07:10.786
So if it is like jest.js, what this does
is it actually makes it visually very

138
00:07:10.786 --> 00:07:13.713
obvious when your tests
are missing from components.

139
00:07:13.713 --> 00:07:16.371
Whereas when they're split apart
from a different directory,

140
00:07:16.371 --> 00:07:18.693
well, then it's always a kind
of game of cat and mouse.

141
00:07:18.693 --> 00:07:24.477
But here, people could easily see, yeah,
BaseDisplay has jest, nothing else has it.

142
00:07:24.477 --> 00:07:28.590
There's something very nice about having
information surface in an organic way.

143
00:07:28.590 --> 00:07:32.859
So that's a little tidbit to
hopefully help you along the way.

144
00:07:32.859 --> 00:07:36.294
The one folder you'll probably see me
have, especially in the Vue Eenterprise

145
00:07:36.294 --> 00:07:39.163
boilerplate, which will definitely
be updated with Vue 3 soon,

146
00:07:39.163 --> 00:07:41.022
is that usually there is a base directory.

147
00:07:41.022 --> 00:07:44.360
Because the base directory
contains all your base components,

148
00:07:44.360 --> 00:07:48.895
and those are sometimes you do like, Chris
Fritz, the President used to maintain it.

149
00:07:48.895 --> 00:07:52.332
He would have a script to auto import all
the base components as a global component,

150
00:07:52.332 --> 00:07:54.161
because they were just used so frequently.

151
00:07:54.161 --> 00:07:57.908
And so, that's a good reason why you
might wanna group something together,

152
00:07:57.908 --> 00:08:01.729
cuz you might be scripting something to
wrap it all together and do something.

153
00:08:01.729 --> 00:08:03.742
That's a great example
of why that might work.

154
00:08:03.742 --> 00:08:05.656
So, that's a tidbit on that, and

155
00:08:05.656 --> 00:08:08.697
with that,
that is the end of the components section.

