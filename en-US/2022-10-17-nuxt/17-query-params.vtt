WEBVTT

1
00:00:00.500 --> 00:00:03.793
So the thing about using the use
route composable is that it provides

2
00:00:03.793 --> 00:00:07.722
more than just the parameters, it provides
you the ability to basically see what

3
00:00:07.722 --> 00:00:09.721
exactly you can get from the route path.

4
00:00:09.721 --> 00:00:13.800
And this can be extremely helpful when
you start passing query parameters.

5
00:00:13.800 --> 00:00:17.535
So an example of this is when
if we go to the navbar, and

6
00:00:17.535 --> 00:00:20.440
let's say we wanted to add another link.

7
00:00:21.890 --> 00:00:25.350
And this time it won't just be two todos,
it'll have a question mark,

8
00:00:25.350 --> 00:00:27.840
which is basically how you
start your parameters.

9
00:00:27.840 --> 00:00:30.270
And we'll say, completed, right?

10
00:00:31.330 --> 00:00:34.430
And so to say, completed equals true.

11
00:00:34.430 --> 00:00:38.782
And you can imagine then from this URL
what this would expect is when you get to

12
00:00:38.782 --> 00:00:43.272
the to do list, that you would actually
then you would only fetch the completed

13
00:00:43.272 --> 00:00:46.880
items, you won't actually
see the incomplete ones.

14
00:00:46.880 --> 00:00:48.100
So how might we accomplish that?

15
00:00:48.100 --> 00:00:51.274
Well, first thing first is
we're gonna go in here, and

16
00:00:51.274 --> 00:00:56.000
as we take a look at this though, I'm
starting to realize that, wait a second.

17
00:00:56.000 --> 00:01:00.965
If we look at our base display,
it's making me realize that why are we

18
00:01:00.965 --> 00:01:04.910
even fetching it all
the way at the to do item?

19
00:01:04.910 --> 00:01:06.050
This doesn't make any sense at all.

20
00:01:07.220 --> 00:01:09.340
We can actually get rid of this here.

21
00:01:09.340 --> 00:01:14.729
We can get rid of this prop item type and
we can actually just do it

22
00:01:14.729 --> 00:01:21.830
directly inside of here because we already
have the information from the route.

23
00:01:21.830 --> 00:01:24.830
That's the only time we're using
this component at this moment.

24
00:01:24.830 --> 00:01:28.100
So again, this is a specific refactoring
that we have data that show that it's

25
00:01:28.100 --> 00:01:30.260
being supported and used this way.

26
00:01:30.260 --> 00:01:34.260
If it were being used in a more generic
way, maybe that wouldn't be necessary.

27
00:01:34.260 --> 00:01:37.985
So now to prove that this works, we can
now, let's go ahead and come in here and

28
00:01:37.985 --> 00:01:41.259
let's do the const route = useRoute and
this time let's go ahead and

29
00:01:41.259 --> 00:01:42.850
log this again to see what we get.

30
00:01:45.270 --> 00:01:48.553
And so inside of here,
if I open that up, there we go.

31
00:01:48.553 --> 00:01:51.000
Yeah, I know it's missing a prop type,
I know you're yelling at me.

32
00:01:52.140 --> 00:01:56.530
So params, object value.

33
00:01:56.530 --> 00:01:58.960
Yeah, looks like it's still empty,
which is totally fine.

34
00:01:58.960 --> 00:02:06.060
Okay, href center of value display
to do the same deal, interesting.

35
00:02:06.060 --> 00:02:07.981
Okay, so we have this and

36
00:02:07.981 --> 00:02:12.842
then we have the other piece that
I'll just go ahead and paste.

37
00:02:12.842 --> 00:02:14.678
Not that one, this one, okay,

38
00:02:14.678 --> 00:02:17.743
we already learned how to
split it up by the item type.

39
00:02:17.743 --> 00:02:20.076
And so we have that, rather than that,

40
00:02:20.076 --> 00:02:23.553
we can actually now just
integrate item type into our URL.

41
00:02:23.553 --> 00:02:27.417
But more importantly it kind of begs
the question, why are we even waiting for

42
00:02:27.417 --> 00:02:28.613
the user to click on it?

43
00:02:28.613 --> 00:02:31.672
Let's just actually call it on
when it's mounted to the page,

44
00:02:31.672 --> 00:02:33.009
that makes the most sense.

45
00:02:33.009 --> 00:02:37.032
So we can call a lifecycle hook using the
on whatever the lifecycle hook is called,

46
00:02:37.032 --> 00:02:41.076
that's how these composable is work within
lifecycle hooks on composition API.

47
00:02:41.076 --> 00:02:43.732
Because if we just didn't
mount it before create,

48
00:02:43.732 --> 00:02:47.930
you've run into name clashing issues,
so the on makes it consistent with like,

49
00:02:47.930 --> 00:02:51.020
this is on a specific event,
a lifecycle event.

50
00:02:51.020 --> 00:02:53.500
So onMounted, what are we going to do?

51
00:02:53.500 --> 00:02:56.270
We're gonna run this fetch thing, we are
not even I'm gonna click on it anymore.

52
00:02:57.530 --> 00:03:02.004
So now that we have this and we have
the item type, we can actually then say,

53
00:03:02.004 --> 00:03:06.730
okay, well, I can delete this button,
don't need that anymore.

54
00:03:06.730 --> 00:03:11.310
Save and I'm gonna delete this item type,
because we don't need that anymore.

55
00:03:12.590 --> 00:03:16.736
So now, if I refresh, okay, that's
looking pretty good, it instantly blinks,

56
00:03:16.736 --> 00:03:17.700
instantly shows.

57
00:03:17.700 --> 00:03:21.980
Now, the only thing that
we got to do though is,

58
00:03:21.980 --> 00:03:25.190
now that we're on the to do viewer,

59
00:03:25.190 --> 00:03:31.313
to do the viewer is actually
gone at this point, that's gone.

60
00:03:31.313 --> 00:03:35.111
Okay, so what we need to do is
that if the query says, completed,

61
00:03:35.111 --> 00:03:40.080
we really should only show, we should
just hide remaining to be totally honest.

62
00:03:40.080 --> 00:03:41.668
And so, for simplicity's sake,

63
00:03:41.668 --> 00:03:45.026
we're just gonna hide the remaining
count versus the completed count.

64
00:03:45.026 --> 00:03:49.218
We're not going to worry about filtering
out everything, although you know what,

65
00:03:49.218 --> 00:03:51.711
maybe for
fun it actually would be nice to do that.

66
00:03:51.711 --> 00:03:55.305
So let me actually just show you how that
would be done, because anytime we get

67
00:03:55.305 --> 00:03:58.590
a chance to demonstrate computer
properties, I always like to do so.

68
00:03:58.590 --> 00:04:04.374
So let's do a quick template, v-slot:list.

69
00:04:07.681 --> 00:04:12.445
Just like that, and then for
now, we can then say, okay,

70
00:04:12.445 --> 00:04:17.550
for every li v-for and
then we say, todo in todoList.

71
00:04:17.550 --> 00:04:22.195
And then key is todo-id just like that and

72
00:04:22.195 --> 00:04:28.167
then we can for now just go ahead and
let's go ahead and

73
00:04:28.167 --> 00:04:32.693
just close that, input type checkbox.

74
00:04:32.693 --> 00:04:37.127
Again, the checked is bound to whether or

75
00:04:37.127 --> 00:04:40.640
not todo.completed is true.

76
00:04:40.640 --> 00:04:42.690
And then after that,
we show the todo.title.

77
00:04:43.850 --> 00:04:50.170
Okay, so to make sure this works, let's go
back and check, not rendering anything.

78
00:04:50.170 --> 00:04:53.490
We have a slot name of,
the slot name is items.

79
00:04:53.490 --> 00:04:55.887
That's why it's not showing up
anywhere cuz I'm sending it

80
00:04:55.887 --> 00:04:57.110
to a non-existent location.

81
00:04:57.110 --> 00:05:04.436
Great, okay, so we're gonna switch that,
this is the items and now much better.

82
00:05:04.436 --> 00:05:06.028
&gt;&gt; To circle back real quick,

83
00:05:06.028 --> 00:05:10.614
is there a reason that you used the
mounted lifecycle hook instead of created?

84
00:05:10.614 --> 00:05:11.646
&gt;&gt; No, non regular,

85
00:05:11.646 --> 00:05:16.250
we totally use created too, I think
mounted is just like a habit of mine.

86
00:05:16.250 --> 00:05:18.968
But let's go and
see if created actually works.

87
00:05:18.968 --> 00:05:21.606
Before, I was using onMounted and
the question was,

88
00:05:21.606 --> 00:05:24.255
why not use something like created or
before create?

89
00:05:24.255 --> 00:05:26.644
You'll see here in
the lifecycle hook diagram,

90
00:05:26.644 --> 00:05:28.987
there actually is a before create and
created.

91
00:05:28.987 --> 00:05:31.153
So you are spot on as far as that goes.

92
00:05:31.153 --> 00:05:35.203
But what I always forget is that the setup
is the first thing that ever runs.

93
00:05:35.203 --> 00:05:37.645
So really actually,
as early as humanly possible,

94
00:05:37.645 --> 00:05:39.260
it actually is nice to run it then.

95
00:05:39.260 --> 00:05:43.396
So I think out of habit, when I just
want to be sure everything's mounted to

96
00:05:43.396 --> 00:05:47.664
the page and then I like load the thing,
but I'm pretty sure if we just fetch it

97
00:05:47.664 --> 00:05:51.498
here right inside of our script setup
block then we go inside of here.

98
00:05:51.498 --> 00:05:56.204
Let's see, yeah,
it's working pretty instantly.

99
00:05:56.204 --> 00:05:59.818
So granted, I think to the naked eye
it might not be discernible, right,

100
00:05:59.818 --> 00:06:02.047
because the onMounted
also had like a blink.

101
00:06:02.047 --> 00:06:04.255
So we won't talk about
performance optimizations but

102
00:06:04.255 --> 00:06:05.455
that was a great suggestion,

103
00:06:05.455 --> 00:06:08.431
your point to take it away from onMounted
cuz that's a couple of steps down

104
00:06:08.431 --> 00:06:11.410
the lifecycle that we would have had
to wait till it kick this process off.

105
00:06:12.760 --> 00:06:16.820
Okay, so now that we have this,
this is great.

106
00:06:16.820 --> 00:06:21.797
All right, so I mentioned now that when
you're going through this and your

107
00:06:21.797 --> 00:06:27.485
todoList, your first instinct might be,
especially when we're wanting to check,

108
00:06:27.485 --> 00:06:33.430
something along the lines of
v-iftodo.completed is true, then show it.

109
00:06:33.430 --> 00:06:37.646
But as a rule of thumb, you do not
combine your looping mechanism with your

110
00:06:37.646 --> 00:06:42.544
conditional rendering mechanism, because
you just have a bunch of performance like

111
00:06:42.544 --> 00:06:44.735
cluster forks that end up happening.

112
00:06:44.735 --> 00:06:48.671
So the better way of doing this whenever
you wanna filter out a list is to actually

113
00:06:48.671 --> 00:06:52.317
create a computed property, because
you basically have a dependency and

114
00:06:52.317 --> 00:06:56.001
you wanna have that do the caching and
prevent all the foot guns possible.

115
00:06:56.001 --> 00:06:57.750
So what we can do is one actually,

116
00:06:57.750 --> 00:07:01.562
you'll see we actually did already
create one computer property here,

117
00:07:01.562 --> 00:07:05.880
which is the completed items and
we also have even remaining items here.

118
00:07:05.880 --> 00:07:09.676
So the question is we can also say,
depending on whether or not the query

119
00:07:09.676 --> 00:07:14.760
comes back true, so what we can do is we
can say, const route equals useRoute.

120
00:07:14.760 --> 00:07:18.460
And so then let's just log route.query,
I think called it completed.

121
00:07:20.350 --> 00:07:24.540
So if we go back now inside of here,
we'll see that right now this makes sense.

122
00:07:24.540 --> 00:07:26.860
There is no query for completed.

123
00:07:26.860 --> 00:07:30.356
But if we just append
this with completed and

124
00:07:30.356 --> 00:07:34.350
enter complete 10 equals true,
much better.

125
00:07:34.350 --> 00:07:37.600
Okay, now it actually has
a value being passed to it.

126
00:07:37.600 --> 00:07:41.104
So all we need to do now is
inside of the navbar that I said,

127
00:07:41.104 --> 00:07:44.550
we just need to make sure yeah,
it says completed true.

128
00:07:44.550 --> 00:07:46.620
So when we click on that,
that'll kick it off.

129
00:07:46.620 --> 00:07:51.449
And so now we know basically this
variable here will be reactive.

130
00:07:51.449 --> 00:07:54.099
So what we could do to
be honest is we can say,

131
00:07:54.099 --> 00:07:57.698
let's see how else are we using
completed items right now?

132
00:07:57.698 --> 00:08:00.770
Okay, so we're using it by length,
that's how we find, okay.

133
00:08:00.770 --> 00:08:02.421
So what I like to do to be honest,

134
00:08:02.421 --> 00:08:06.550
I like to basically create another
reactive property called filtertodoList.

135
00:08:07.770 --> 00:08:11.551
And the reason I like to create basically
a separate property is because this is

136
00:08:11.551 --> 00:08:13.170
a derivative of this list.

137
00:08:13.170 --> 00:08:14.790
And this can be filtered
any number of ways.

138
00:08:14.790 --> 00:08:17.214
By completed, you can imagine if
someone's searching for something,

139
00:08:17.214 --> 00:08:18.690
you might wanna filter by title.

140
00:08:18.690 --> 00:08:21.260
It could be anything, but
we can keep it simple for this.

141
00:08:21.260 --> 00:08:25.212
Because all we need to say, is if
route.query.completed is true then for

142
00:08:25.212 --> 00:08:28.724
now, again, there's definitely
ways to optimize this code, we

143
00:08:28.724 --> 00:08:33.330
are just returned actually you know what,
I can just return completed items.value.

144
00:08:33.330 --> 00:08:40.811
There you go, cleaner,
else return remaining items.value.

145
00:08:40.811 --> 00:08:47.670
No, okay, this is gonna definitely
create a bug, but that's totally fine.

146
00:08:47.670 --> 00:08:48.580
I'm gonna do this intentionally.

147
00:08:50.340 --> 00:08:53.890
So we're gonna take this reactive property
and we're gonna drop it in here instead.

148
00:08:55.720 --> 00:09:01.150
And now you'll see because completed
is true, that's what we get.

149
00:09:01.150 --> 00:09:07.040
But then the moment completed is false,
well, that's weird.

150
00:09:07.040 --> 00:09:11.640
But then if we take it away completely,
then it's not everything.

151
00:09:11.640 --> 00:09:15.159
But again, this is kind of a buggy, we're
not gonna sit here and flush out the UI,

152
00:09:15.159 --> 00:09:16.544
because that's another time.

153
00:09:16.544 --> 00:09:20.303
We have a lot of features we wanna get
through but this is how you can start

154
00:09:20.303 --> 00:09:24.001
detecting those things, you certainly
rewrite the logic to be like,

155
00:09:24.001 --> 00:09:26.500
if completed is false, then do this, etc.

156
00:09:26.500 --> 00:09:30.370
But I think people here can get
the gist of the power of that.

