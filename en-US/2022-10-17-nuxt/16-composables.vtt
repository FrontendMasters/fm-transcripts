WEBVTT

1
00:00:00.170 --> 00:00:04.230
So you've probably noticed at this
point that, well, when we take

2
00:00:04.230 --> 00:00:08.860
a look at this for the Photo Gallery of
the todos, and we're looking at this,

3
00:00:08.860 --> 00:00:12.805
we are actually kind of doing some
duplicate work in this regard.

4
00:00:12.805 --> 00:00:15.123
So one, we probably should
be ingesting TodoViewer and

5
00:00:15.123 --> 00:00:16.663
PhotoGallery directly on the page.

6
00:00:16.663 --> 00:00:19.245
They really don't make sense
as their own component,

7
00:00:19.245 --> 00:00:21.781
cuz this is basically page
level stuff at this point.

8
00:00:21.781 --> 00:00:23.585
So let's actually start by
moving this stuff over.

9
00:00:23.585 --> 00:00:25.506
I think that'll make things
a little bit easier.

10
00:00:25.506 --> 00:00:28.059
So let me just drop all that here.

11
00:00:28.059 --> 00:00:32.948
And then let me grab the PhotoGallery and
drop all that into photos.

12
00:00:32.948 --> 00:00:36.066
And then next, what I wanna do is
let's just clean this up a bit, so

13
00:00:36.066 --> 00:00:38.260
that it's easier to read.

14
00:00:38.260 --> 00:00:39.816
So that's fine for now.

15
00:00:39.816 --> 00:00:41.160
We don't need this.

16
00:00:41.160 --> 00:00:44.679
We don't need any of this for
now, just gonna keep it simple.

17
00:00:46.821 --> 00:00:49.903
Great, and then we have todos.

18
00:00:49.903 --> 00:00:51.791
We have some defineProps.

19
00:00:51.791 --> 00:00:54.620
Okay, we don't even need all this stuff,
to be honest.

20
00:00:54.620 --> 00:00:59.724
We just need that, so
defineProps can be gotten rid of.

21
00:00:59.724 --> 00:01:03.260
We don't need this fetch function anymore,
this is great.

22
00:01:03.260 --> 00:01:08.576
We can get rid of all this
commented HTML for now, okay?

23
00:01:08.576 --> 00:01:14.856
And I think now, if we go back and
refresh, Home, Display, Photos.

24
00:01:14.856 --> 00:01:17.102
And then for whatever reason,
that's glitching out.

25
00:01:17.102 --> 00:01:20.140
But our components are rendering and
they work.

26
00:01:20.140 --> 00:01:25.012
So, okay, so the question here is,
we know that the path actually

27
00:01:25.012 --> 00:01:29.279
correlates with the type of
item that's being received.

28
00:01:29.279 --> 00:01:31.260
We know that for a fact.

29
00:01:31.260 --> 00:01:36.160
So really, when we do this BaseDisplay
type todos that we're manually defining,

30
00:01:36.160 --> 00:01:39.529
we could actually make that
a dynamic property, right?

31
00:01:39.529 --> 00:01:42.710
And so getting parameters from your route
is the next logical thing you're probably

32
00:01:42.710 --> 00:01:43.980
looking to do inside of your app.

33
00:01:45.810 --> 00:01:48.191
So what we're going to do
is learn about composables,

34
00:01:48.191 --> 00:01:49.807
which we briefly touched on before.

35
00:01:49.807 --> 00:01:51.840
But I just wanna formally
cover it this time.

36
00:01:51.840 --> 00:01:56.635
And so what composables are is every
time you use Composition API in Vue,

37
00:01:56.635 --> 00:02:02.510
you'll see that a lot of the new helper
functions are prefixed with the word use.

38
00:02:02.510 --> 00:02:04.867
And this is very similar to React Hooks,
right?

39
00:02:04.867 --> 00:02:07.709
Cuz they're trying to let you know that
you're doing something that's not just any

40
00:02:07.709 --> 00:02:09.610
sort of JavaScript utility library.

41
00:02:09.610 --> 00:02:11.285
And so if you think about utilities,
right?

42
00:02:11.285 --> 00:02:13.874
And then maybe that's
a better way to frame it,

43
00:02:13.874 --> 00:02:17.196
is that on a typical app you
would have a folder called utils.

44
00:02:17.196 --> 00:02:20.233
And let's say you're using moment.js,
right?

45
00:02:20.233 --> 00:02:23.577
And so moment.js would have all these
helper functions inside of it to help you

46
00:02:23.577 --> 00:02:26.210
manage time, time zones, whatever.

47
00:02:26.210 --> 00:02:29.138
But we have something similar
now with Composition API,

48
00:02:29.138 --> 00:02:32.741
which basically says we can let you
build all these helper functions.

49
00:02:32.741 --> 00:02:34.596
But they're gonna use Composition API,

50
00:02:34.596 --> 00:02:38.467
cuz they're probably gonna have reactivity
attached to it, lifecycle hooks, etc.

51
00:02:38.467 --> 00:02:43.093
So rather than get that mixed up with
utilities, cuz they're still kind of like

52
00:02:43.093 --> 00:02:47.580
utilities, the official term
given to it are composables.

53
00:02:47.580 --> 00:02:51.413
So if you hear that, it's easier if you
think of it as a type of utility function

54
00:02:51.413 --> 00:02:52.819
that uses Composition API.

55
00:02:52.819 --> 00:02:54.415
That's all it is,
it's nothing fancier than that.

56
00:02:56.175 --> 00:02:59.257
Now that you know that,
in the Options API in the past,

57
00:02:59.257 --> 00:03:02.406
every time you wanted to
access something on the route,

58
00:03:02.406 --> 00:03:05.957
the most common thing was to
do something like this.$route.

59
00:03:05.957 --> 00:03:09.135
Cuz there was this global thing that
you could access at any given time.

60
00:03:09.135 --> 00:03:11.566
But like I said,
we're in Composition API land now.

61
00:03:11.566 --> 00:03:14.270
So we actually try to mirror
JavaScript as much as humanly possible,

62
00:03:14.270 --> 00:03:16.570
no more global imports and
that kind of stuff.

63
00:03:16.570 --> 00:03:17.268
So what do we need?

64
00:03:17.268 --> 00:03:20.580
We actually need to import something
that is gonna help us find the route.

65
00:03:20.580 --> 00:03:26.705
Well, since it used to be this.$route,
naturally, we called it useRoute.

66
00:03:26.705 --> 00:03:28.750
And this is what is called a composable.

67
00:03:29.900 --> 00:03:31.757
So, not this one.

68
00:03:31.757 --> 00:03:35.032
So let me just go ahead and
import that to show you how this works, so

69
00:03:35.032 --> 00:03:36.620
import useRoute.

70
00:03:36.620 --> 00:03:38.244
And so useRoute, you can see,

71
00:03:38.244 --> 00:03:41.004
is a composable that is
imported from vue-router.

72
00:03:41.004 --> 00:03:43.398
Basically, it's a helper function,
just like we had ref, compute, and

73
00:03:43.398 --> 00:03:44.120
these sort of things.

74
00:03:44.120 --> 00:03:47.725
It's saying, yes, I wanna get
the route from this current state.

75
00:03:47.725 --> 00:03:51.222
So we do is,
we can say const route = useRoute.

76
00:03:51.222 --> 00:03:55.956
And so I'm gonna go ahead and log the
route inside of the todos path right now.

77
00:03:55.956 --> 00:03:59.244
And so we can see what's inside of it,
all right?

78
00:03:59.244 --> 00:04:03.483
So, oops, go back, Todos, all right?

79
00:04:03.483 --> 00:04:06.774
So you'll see that when you actually
log this out, it's a proxy.

80
00:04:06.774 --> 00:04:07.652
But then, look.

81
00:04:07.652 --> 00:04:11.872
All the stuff you'd want inside of your
route is actually now accessible to you,

82
00:04:11.872 --> 00:04:16.110
your path, your hash, whether it's,
matched, meta, name, params, etc.

83
00:04:16.110 --> 00:04:19.923
And so what we end up getting
actually inside of the params,

84
00:04:19.923 --> 00:04:24.050
if you look at what's inside of here,
this is a lot.

85
00:04:24.050 --> 00:04:29.722
Okay, it's probably easier just to log it,

86
00:04:29.722 --> 00:04:34.630
route.params here, and refresh.

87
00:04:34.630 --> 00:04:35.770
This one's empty.

88
00:04:35.770 --> 00:04:41.391
What am I thinking of, route.params?

89
00:04:41.391 --> 00:04:44.953
Path, yeah,
that's what I think I'm looking for.

90
00:04:44.953 --> 00:04:48.670
Here we go, so we have the todos.

91
00:04:48.670 --> 00:04:52.024
And so
what we get here now is we can say, okay.

92
00:04:52.024 --> 00:04:54.830
So what we can do,
we can basically take the end of our path.

93
00:04:54.830 --> 00:04:57.788
And now we can basically
move that going forward.

94
00:04:57.788 --> 00:05:01.100
And so let me just go ahead and
double check, okay, yep.

95
00:05:02.570 --> 00:05:04.404
And so what we can do now actually,

96
00:05:04.404 --> 00:05:07.013
let me see if path gets us
even shorter than that.

97
00:05:08.800 --> 00:05:11.025
Path also does the same.

98
00:05:11.025 --> 00:05:15.318
I wanna say there was actually
a way to just get the tail

99
00:05:15.318 --> 00:05:19.053
end of your param using
a standard HTML thing.

100
00:05:19.053 --> 00:05:25.034
I'm just trying to remember what that was,
name, value.

101
00:05:25.034 --> 00:05:26.660
No, this is not the name.

102
00:05:26.660 --> 00:05:32.440
Meta, matched, hash, fullPath, query,
there are no queries on this one.

103
00:05:32.440 --> 00:05:35.769
It's totally empty, yep.

104
00:05:35.769 --> 00:05:40.644
Okay, that's totally fine for
now, we can just split this off.

105
00:05:40.644 --> 00:05:43.746
I wanna say at one point
there was a way to do this.

106
00:05:43.746 --> 00:05:49.044
But okay, so we can do is we can say,

107
00:05:49.044 --> 00:05:55.602
const itemType is going to be route.path.

108
00:05:55.602 --> 00:06:00.700
And we can do, we just split it,
basically up by the slash.

109
00:06:00.700 --> 00:06:03.310
And then we're just gonna
grab the first item.

110
00:06:03.310 --> 00:06:04.618
0, 1, yep, that should do it.

111
00:06:04.618 --> 00:06:10.538
And then if we log this now for itemType,
We should be able see, there you go.

112
00:06:10.538 --> 00:06:13.180
Display, that's the wrong one,
so a good thing we checked that.

113
00:06:13.180 --> 00:06:17.287
So let's say we're looking for
the second one, and refresh.

114
00:06:17.287 --> 00:06:19.371
There there you go, now it's todos.

115
00:06:19.371 --> 00:06:22.727
So now that we have that,
we could basically just come in here.

116
00:06:22.727 --> 00:06:26.024
And we can now just pass,
instead of itemType like this,

117
00:06:26.024 --> 00:06:27.884
we can now dynamically bind it.

118
00:06:29.899 --> 00:06:30.930
And so there you go.

119
00:06:30.930 --> 00:06:32.355
Now, you have your route params.

