WEBVTT

1
00:00:00.245 --> 00:00:04.731
What I want you to do is then to,
similarly have the photos page that you

2
00:00:04.731 --> 00:00:07.771
have, and then go ahead and
swap out the list for

3
00:00:07.771 --> 00:00:11.899
the child element when you ever
gonna click on a specific album.

4
00:00:17.814 --> 00:00:21.054
And so what we wanna do is similar
to what we do with to dos,

5
00:00:21.054 --> 00:00:24.780
we wanna be able to allow us to click
on a photo and then see that ID.

6
00:00:24.780 --> 00:00:30.776
So what we're gonna do here is similar to
the to dos, we'll have a photos directory,

7
00:00:30.776 --> 00:00:36.549
and we're gonna do is we're gonna also
create another square bracket id.view.

8
00:00:36.549 --> 00:00:40.552
And so
once again just to prove that this works,

9
00:00:40.552 --> 00:00:44.557
we're gonna do const.route = useRoute, and

10
00:00:44.557 --> 00:00:49.160
then all we're gonna do here
is basically say hey, for

11
00:00:49.160 --> 00:00:53.987
this we're going to say
photo Id is route.params.id.

12
00:00:53.987 --> 00:01:00.227
And so actually let's go ahead and
just make this an h2 class subtitle,

13
00:01:00.227 --> 00:01:05.665
that way at least has some sort
of styling at it, hH2, great.

14
00:01:05.665 --> 00:01:10.205
Okay, so what we need to do is inside
of our photos here we need to do one or

15
00:01:10.205 --> 00:01:11.057
two things.

16
00:01:11.057 --> 00:01:15.628
We need to one, actually wrap the image,
so I can go ahead and

17
00:01:15.628 --> 00:01:19.406
just do the nextLink component,
just like that.

18
00:01:19.406 --> 00:01:21.813
And then the NextLink
component will bind to,

19
00:01:21.813 --> 00:01:24.660
we'll have to do a v-bind
cuz this is a dynamic piece.

20
00:01:24.660 --> 00:01:27.800
Where it'll be /display/photos/ what?

21
00:01:27.800 --> 00:01:30.800
/photo.id.

22
00:01:30.800 --> 00:01:34.220
Once we have that, then we can
afford to then wrap that around.

23
00:01:34.220 --> 00:01:36.899
And that should loop
around the entire image.

24
00:01:36.899 --> 00:01:39.352
Now, let's see if this actually works,
shall we?

25
00:01:39.352 --> 00:01:43.560
So we go inside of the photos, and
then we upload that, there we go.

26
00:01:43.560 --> 00:01:45.650
There you go, everything showing up.

27
00:01:45.650 --> 00:01:50.213
We can see now if we hover over, you'll
see that on the bottom left, it's a little

28
00:01:50.213 --> 00:01:54.999
small but it says local host 3000,
display photos 1, 2, 3 as you'd expect.

29
00:01:54.999 --> 00:01:57.868
So if I click on 3,
we'll notice nothing is happening yet, and

30
00:01:57.868 --> 00:01:59.530
that's because we forgot step two.

31
00:01:59.530 --> 00:02:03.860
And step two is we need to actually show
it, we need to tell it where to render.

32
00:02:03.860 --> 00:02:07.034
And so what I'm gonna do here is
we're gonna actually go ahead and

33
00:02:07.034 --> 00:02:09.120
wrap this in a div
because we're in a page.

34
00:02:09.120 --> 00:02:13.419
And so for now, let me just call this,
I'm gonna do class section.

35
00:02:13.419 --> 00:02:16.891
And then once again,
I'll just do Photo.Gallery at the top.

36
00:02:16.891 --> 00:02:21.630
And then we'll have the NextPage
as like the top level.

37
00:02:21.630 --> 00:02:26.539
And we'll basically make it a conditional
if, route.params.id is true,

38
00:02:26.539 --> 00:02:30.780
basically, if an Id actually exist,
then go ahead and show this.

39
00:02:30.780 --> 00:02:34.990
Otherwise, we're gonna show
this base display component.

40
00:02:34.990 --> 00:02:37.850
And so we still need to actually
wait routes already defined up here.

41
00:02:37.850 --> 00:02:40.170
So actually, we're good to go.

42
00:02:40.170 --> 00:02:43.169
So as you can see, actually it
automatically refreshed already.

43
00:02:43.169 --> 00:02:47.060
Cuz it said, hey, you have a parameter
of three, so let me show you photo id 3.

44
00:02:47.060 --> 00:02:50.031
And then once again, we can go back,
it loads up, everything is good.

45
00:02:50.031 --> 00:02:53.410
Let's switch it out to another one,
a6 coming on in.

46
00:02:53.410 --> 00:02:55.629
So that's how the dynamic parameters work.

47
00:02:55.629 --> 00:02:57.318
And there's more to it than that.

48
00:02:57.318 --> 00:03:00.460
But those are the foundations
you need to basically use that.

49
00:03:00.460 --> 00:03:05.404
And with that, you now have covered
basically the fundamental skills

50
00:03:05.404 --> 00:03:08.353
you need as far as routing goes and paths.

51
00:03:08.353 --> 00:03:11.480
So we have the ability to
create file based routes.

52
00:03:11.480 --> 00:03:13.338
We learned how to create nested routes,

53
00:03:13.338 --> 00:03:16.783
and then two types of nested routes,
one where we have a nested view where we

54
00:03:16.783 --> 00:03:19.210
could actually put it on
a specific part of the page.

55
00:03:19.210 --> 00:03:21.380
Or we could have it just
take over the entire page,

56
00:03:21.380 --> 00:03:23.250
which is what most people typically want.

57
00:03:23.250 --> 00:03:27.441
And then finally, we have dynamic routes
where especially when we're fetching from

58
00:03:27.441 --> 00:03:30.420
an API with the parties,
it's a third party source of data.

59
00:03:30.420 --> 00:03:32.720
We can't guarantee how
many things it'll be.

60
00:03:32.720 --> 00:03:36.269
And so this is why a build time things
like nuts, which we'll show in a little

61
00:03:36.269 --> 00:03:40.280
bit, will actually help us to fetch it all
at build time, generated all statically.

62
00:03:40.280 --> 00:03:42.730
And that's really great for
performance optimizations.

63
00:03:42.730 --> 00:03:45.928
But from a programmatic perspective,
we still need a way to handle that,

64
00:03:45.928 --> 00:03:46.970
hence dynamic routes.

