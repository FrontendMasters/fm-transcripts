WEBVTT

1
00:00:00.000 --> 00:00:03.782
At this point, we're gonna kinda move into
the slightly just experimental part of

2
00:00:03.782 --> 00:00:07.347
the show real quick just to kinda show
you I think something kind of cool that's

3
00:00:07.347 --> 00:00:08.228
worth looking at.

4
00:00:08.228 --> 00:00:13.032
I don't need to Face Theremin
running in the background anymore,

5
00:00:13.032 --> 00:00:16.569
is there is this thing
called the web serial API.

6
00:00:16.569 --> 00:00:20.653
And basically,
like we talked about before, in Node.js,

7
00:00:20.653 --> 00:00:25.617
the original Node.js stuff that we
saw before, there was serial port and

8
00:00:25.617 --> 00:00:28.357
then Fermata, and then Johnny-Five.

9
00:00:28.357 --> 00:00:32.879
And so what the web serial API
does is basically serial port, but

10
00:00:32.879 --> 00:00:37.925
totally from the browser with no
server side code whatsoever, right?

11
00:00:37.925 --> 00:00:40.373
And so it is super interesting.

12
00:00:40.373 --> 00:00:43.913
In that Arduino starter kit,
like I said before,

13
00:00:43.913 --> 00:00:49.307
the last project in that book is somebody
was like, hey, take this thing and

14
00:00:49.307 --> 00:00:54.055
put it on a remote and control your
remote from an Arduino, right?

15
00:00:54.055 --> 00:00:58.778
But you could theoretically send serial
messages now from your browser to

16
00:00:58.778 --> 00:01:00.234
that remote, right?

17
00:01:00.234 --> 00:01:05.110
And so, again, the interesting combination
is where all this stuff comes together.

18
00:01:05.110 --> 00:01:07.243
So I have a little kind of
example project in here.

19
00:01:07.243 --> 00:01:11.734
And there's not really any to-dos in here,
but if we go,

20
00:01:11.734 --> 00:01:14.773
actually, I'll do this from VS Code.

21
00:01:14.773 --> 00:01:17.523
If we go into this web serial one, again,

22
00:01:17.523 --> 00:01:21.227
there are a whole bunch of
other small projects in here.

23
00:01:21.227 --> 00:01:24.405
And there's a repo code
completed examples.

24
00:01:24.405 --> 00:01:28.470
Some of them are just setups with some
buttons and stuff along those lines.

25
00:01:28.470 --> 00:01:30.500
Some of them kinda show
you the implementation.

26
00:01:30.500 --> 00:01:33.552
But if you want it, there's a folder for
getting the tilt center working,

27
00:01:33.552 --> 00:01:35.933
temperature, a lot of ones
we didn't do together today.

28
00:01:35.933 --> 00:01:38.239
Cuz, again,
if you've gotten the light sensor working,

29
00:01:38.239 --> 00:01:40.879
do you know the process of getting
the temperature sensor working?

30
00:01:40.879 --> 00:01:42.819
We could have just done that over and
over and over again.

31
00:01:42.819 --> 00:01:45.738
But there are some extra places to play.

32
00:01:45.738 --> 00:01:50.078
But also if you saw, none of these
really involve that much code, right?

33
00:01:50.078 --> 00:01:54.067
We get the hardworking, the library gives
us a lot of really great abstractions.

34
00:01:54.067 --> 00:01:55.430
We go into web-serial.

35
00:01:55.430 --> 00:01:58.290
There is a lot of
boilerplate code in here.

36
00:01:58.290 --> 00:02:01.268
It is one of those things with
a lot of the browser APIs.

37
00:02:01.268 --> 00:02:05.132
There are lots of libraries
that we use on top of it, but

38
00:02:05.132 --> 00:02:07.407
we can kinda take a look and see.

39
00:02:07.407 --> 00:02:10.860
And so if we look in lib,
there's kind of the basic setup of this.

40
00:02:10.860 --> 00:02:12.446
There's a lot of stuff
that you need to involve.

41
00:02:12.446 --> 00:02:15.450
And for the most part,
Johnny-Five is probably your friend.

42
00:02:15.450 --> 00:02:19.164
I'm just kinda showing you that there
are cool technologies doing this from

43
00:02:19.164 --> 00:02:19.869
the browser.

44
00:02:19.869 --> 00:02:24.334
Hoping that if it inspires something
in your neuro-frontal cortex that

45
00:02:24.334 --> 00:02:26.730
you wanna go and explore, awesome.

46
00:02:26.730 --> 00:02:30.790
For the most part, the stuff with
Johnny-Five is the real kinda cool part.

47
00:02:30.790 --> 00:02:34.389
But this is something I discovered
in my travels that I thought, hey,

48
00:02:34.389 --> 00:02:36.101
I'm not gonna keep it to myself.

49
00:02:36.101 --> 00:02:39.215
You do need to make sure that it is
one of the browsers that support it,

50
00:02:39.215 --> 00:02:40.900
also known as not Safari.

51
00:02:40.900 --> 00:02:43.457
I think I showed you
in the very beginning,

52
00:02:43.457 --> 00:02:47.170
it's basically just
the Chromium-based browsers as well.

53
00:02:47.170 --> 00:02:51.806
But there is the ability kind of
basically you get a navigator.serial,

54
00:02:51.806 --> 00:02:55.836
which, again, is like serial port,
we can request the port.

55
00:02:55.836 --> 00:02:58.614
And if you look at the code for
node serial port,

56
00:02:58.614 --> 00:03:01.680
you will notice some similarities in here,
right?

57
00:03:01.680 --> 00:03:03.753
Now, this is incredibly low level.

58
00:03:03.753 --> 00:03:08.105
Again, with serial port, Fermata,
Johnny-Five, the argument here is maybe

59
00:03:08.105 --> 00:03:11.753
one day, in the same way that those
are stacked on top of each other,

60
00:03:11.753 --> 00:03:16.304
we might get a full browser-based version
as well that we can interrupt with, too.

61
00:03:16.304 --> 00:03:20.002
But you get the writer and the reader, and

62
00:03:20.002 --> 00:03:24.975
you are writing bytes,
right, to this thing, right?

63
00:03:24.975 --> 00:03:28.379
And in fact, in this code,
I am only gonna write a one or

64
00:03:28.379 --> 00:03:30.531
a zero to turn that built-in LED.

65
00:03:30.531 --> 00:03:33.468
We're going all the way
back to the basics here.

66
00:03:33.468 --> 00:03:36.563
But basically, what we can say
is on the click of the button,

67
00:03:36.563 --> 00:03:40.829
we take the serial, we're gonna write
a bit of 1, cuz that's very easy to write.

68
00:03:40.829 --> 00:03:44.275
I don't have to worry about
serialization or anything like that.

69
00:03:44.275 --> 00:03:49.053
And then have it read the response back,
and then on off, turn a 0.

70
00:03:49.053 --> 00:03:53.307
And so all that happens in the Arduino
code is that same basic blink that we

71
00:03:53.307 --> 00:03:58.010
kinda saw before, which is we open up
the serial port on 9600 baud, right?

72
00:03:58.010 --> 00:04:01.425
We write a 1 over the serial buffer.

73
00:04:01.425 --> 00:04:04.330
If it reads that, it will turn the LED on,
if it gets a 0, off.

74
00:04:04.330 --> 00:04:07.650
But it happens with zero
node involved whatsoever.

75
00:04:07.650 --> 00:04:13.277
It is simply the Arduino running in
the browser with directly from the web,

76
00:04:13.277 --> 00:04:17.223
which I think is incredibly cool,
if it would work.

77
00:04:17.223 --> 00:04:21.511
So with that, I am gonna now that
I've closed Arduino completely,

78
00:04:21.511 --> 00:04:25.650
cuz I did the classic way that you
solve all your problems in life,

79
00:04:25.650 --> 00:04:28.749
which is I turned it off,
and I turned it back on.

80
00:04:28.749 --> 00:04:29.777
So I got a lot of hope.

81
00:04:29.777 --> 00:04:31.795
But looking at the Arduino code,

82
00:04:31.795 --> 00:04:35.339
it is very similar to what we
saw in the very first moments.

83
00:04:35.339 --> 00:04:37.615
The only difference is because I wrote it,

84
00:04:37.615 --> 00:04:40.907
I forgot that there was that LED
built-in global variable and

85
00:04:40.907 --> 00:04:44.595
I just put the number 13 in there,
because that's the same thing.

86
00:04:44.595 --> 00:04:49.930
And then I open up a serial port and
basically parsed it as an int.

87
00:04:49.930 --> 00:04:53.040
If it is 1, turn the LED on.

88
00:04:53.040 --> 00:04:54.968
And, yeah, we respond with that.

89
00:04:54.968 --> 00:04:57.780
And it is reading the println,
if I can get it to work.

90
00:04:57.780 --> 00:05:00.452
And if it's a 0, turn the LED off.

91
00:05:04.794 --> 00:05:07.540
I literally do not know.

92
00:05:07.540 --> 00:05:08.730
I think it's trying to write both.

93
00:05:08.730 --> 00:05:09.990
I think it's cuz I put it in a folder.

94
00:05:09.990 --> 00:05:12.422
I have an amazing idea,
which I will find out.

95
00:05:12.422 --> 00:05:15.031
This is me trying to be organized,
New Sketch.

96
00:05:16.863 --> 00:05:21.577
I think it's trying to send both those
files cuz they're in the same folder.

97
00:05:21.577 --> 00:05:23.680
That is my hypothesis.

98
00:05:23.680 --> 00:05:27.036
So I am just gonna simply send this
file over, and everything works.

99
00:05:27.036 --> 00:05:32.270
Today I learned that it will try to
send an entire folder to the Arduino.

100
00:05:32.270 --> 00:05:35.190
So that's the thing we all
got to learn together.

101
00:05:37.030 --> 00:05:38.910
And this is with the sensor.

102
00:05:38.910 --> 00:05:39.779
I actually don't want that one.

103
00:05:39.779 --> 00:05:43.200
I want the web serial
one that I did before.

104
00:05:44.890 --> 00:05:47.380
And so
I'll actually paste that one in instead.

105
00:05:47.380 --> 00:05:50.715
We'll send it over to the device.

106
00:05:50.715 --> 00:05:56.971
Now, hypothetically,
batting 1000 right now, but we'll see.

107
00:06:08.484 --> 00:06:10.774
Web server should start up.

108
00:06:12.970 --> 00:06:15.648
Now, Chrome these days
used to be just like,

109
00:06:15.648 --> 00:06:18.770
hijack the web audio API and
do whatever you want.

110
00:06:18.770 --> 00:06:22.319
Now Chrome is like, hey,
they have to hit a button first, and

111
00:06:22.319 --> 00:06:24.450
also we need to not do this in Safari.

112
00:06:28.677 --> 00:06:30.840
So pull that back up.

113
00:06:30.840 --> 00:06:33.856
We'll connect, I can pick, you can see.

114
00:06:37.807 --> 00:06:41.272
That doesn't look like my Arduino,
but we'll find out.

115
00:06:41.272 --> 00:06:45.759
So you can see I have at this
point connected to a device,

116
00:06:45.759 --> 00:06:49.400
which it didn't see the Arduino, but will.

117
00:06:49.400 --> 00:06:53.202
LED on, I got a little bit
of brokenness there, but

118
00:06:53.202 --> 00:06:55.778
the built-in LED has now gone on.

119
00:06:55.778 --> 00:07:00.030
So it sends it, not necessarily as
a string, it's sending a byte stream.

120
00:07:00.030 --> 00:07:03.291
So it looks like I console log
the first part of the stream, and

121
00:07:03.291 --> 00:07:06.761
then we broke off the second one,
but the built-in LED did go on.

122
00:07:06.761 --> 00:07:08.130
And I can send the off,

123
00:07:08.130 --> 00:07:12.761
and the LED off part of the stream came
through over the serial port, right?

124
00:07:12.761 --> 00:07:14.484
No node involved whatsoever,

125
00:07:14.484 --> 00:07:18.670
just the browser talking directly to
the Arduino board from there as well.

