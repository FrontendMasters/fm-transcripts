WEBVTT

1
00:00:00.250 --> 00:00:04.892
Clearly I think the fun with all this
stuff comes into hooking into Node

2
00:00:04.892 --> 00:00:06.880
specific stuff.

3
00:00:06.880 --> 00:00:12.438
In that LCD folder, I got this other
directory, but we can do it in here,

4
00:00:12.438 --> 00:00:18.950
where we can actually, there's a library
in Node called system information.

5
00:00:18.950 --> 00:00:23.932
And really what it does, is it,
like it's cross-platform,

6
00:00:23.932 --> 00:00:28.210
can read diagnostics about your system,
right?

7
00:00:28.210 --> 00:00:33.735
And so
what we could do is we could pull that in,

8
00:00:33.735 --> 00:00:41.590
so we could say,
import system from 'systeminformation'.

9
00:00:41.590 --> 00:00:47.040
Awesome, and then we wait for the board
to get created and then on an interval or

10
00:00:47.040 --> 00:00:51.184
whatever, let's read it once and
then we'll do the rest.

11
00:00:51.184 --> 00:00:52.510
You can look at the docs for this library.

12
00:00:52.510 --> 00:00:57.122
It can tell you stuff, battery life,
what your free amount of memory is.

13
00:00:57.122 --> 00:00:59.707
Depends on what operating
system you're using too,

14
00:00:59.707 --> 00:01:02.234
you can get slightly different
things from Linux and

15
00:01:02.234 --> 00:01:06.060
Windows than you can from Mac OS, but
I picked two that were cross-platform.

16
00:01:06.060 --> 00:01:10.522
So what I'll do here is I'll say

17
00:01:10.522 --> 00:01:15.500
memory = await system.mem().

18
00:01:15.500 --> 00:01:24.600
And we'll say,
Battery will be the system battery.

19
00:01:24.600 --> 00:01:29.770
And then we'll just say,
let's start with lcd.cursor.

20
00:01:29.770 --> 00:01:36.105
That's a lot information, lcd.cursor,

21
00:01:36.105 --> 00:01:40.725
and we'll say (0, 0), and

22
00:01:40.725 --> 00:01:45.690
we'll say print('Battery: '

23
00:01:45.690 --> 00:01:49.471
+ battery.percent).

24
00:01:49.471 --> 00:01:54.053
Sure, memory.used over memory.total,
why not.

25
00:01:54.053 --> 00:01:56.439
Let's try that out and
see how it goes for us.

26
00:02:00.650 --> 00:02:04.075
You can currently see
battery percent is a 100%.

27
00:02:04.075 --> 00:02:06.652
The memory is some large number
that looks like I have a lot

28
00:02:06.652 --> 00:02:08.180
of memory on this computer.

29
00:02:08.180 --> 00:02:12.850
I might choose to divide
that by a certain amount.

30
00:02:12.850 --> 00:02:17.240
Let's actually just do available,

31
00:02:17.240 --> 00:02:21.069
we'll do memory.available.

32
00:02:23.111 --> 00:02:32.451
And I'm gonna divide it by,
1024 divided by 1024,

33
00:02:32.451 --> 00:02:37.010
which is basically I'm taking bytes and
turn it into megabytes.

34
00:02:37.010 --> 00:02:38.620
I'm gonna do a Math.round in there too.

35
00:02:41.380 --> 00:02:44.586
So it's telling me the number
of bytes which on a computer,

36
00:02:44.586 --> 00:02:47.930
I think this one has 32 gigabytes
of memory, which is a lot.

37
00:02:47.930 --> 00:02:50.172
So we'll save that and we'll push it up.

38
00:02:55.778 --> 00:03:00.602
So now I can see that I've got
18,000 megabytes of free memory,

39
00:03:00.602 --> 00:03:04.140
and 100% battery cuz I'm plugged in,
right?

40
00:03:04.140 --> 00:03:07.400
So I can read that system
information on load.

41
00:03:07.400 --> 00:03:11.495
I think this gets a little
bit more interesting, though,

42
00:03:11.495 --> 00:03:14.680
if we update these values
on an interval too.

43
00:03:15.900 --> 00:03:20.321
So I could say, setInterval.

44
00:03:25.454 --> 00:03:28.070
And put all that in there.

45
00:03:28.070 --> 00:03:29.589
I get to make an async function.

46
00:03:31.762 --> 00:03:33.781
And let's do that every,
I don't know, second.

47
00:03:37.909 --> 00:03:38.842
We'll push that up as well.

48
00:03:49.425 --> 00:03:55.302
Yep, and so now it is regularly updating
my battery percentage in memory,

49
00:03:55.302 --> 00:03:57.927
which I can see changing as well.

