WEBVTT

1
00:00:00.000 --> 00:00:03.912
[MUSIC]

2
00:00:03.912 --> 00:00:06.088
&gt;&gt; Justin Meyer: So here is my jQuery.

3
00:00:08.353 --> 00:00:09.350
&gt;&gt; Justin Meyer: And here's my tabs.

4
00:00:10.830 --> 00:00:14.794
Okay, there is one final thing that
I kinda slid in as an exercise.

5
00:00:14.794 --> 00:00:18.630
So how many of you have written
a jQuery plugin where you do the $.fn?

6
00:00:18.630 --> 00:00:21.559
Yeah, Mark's the master of it,

7
00:00:21.559 --> 00:00:26.840
where you've done the $.fn.your
plugin name thing.

8
00:00:26.840 --> 00:00:28.420
Just Mark here.

9
00:00:28.420 --> 00:00:32.860
So, when you guys, if,
I hope you become jQuery plugin authors or

10
00:00:33.860 --> 00:00:36.540
maybe other open source
frameworks are contributing to.

11
00:00:40.540 --> 00:00:45.403
Sorry, try to make a joke in there,
is it all right?

12
00:00:45.403 --> 00:00:46.786
&gt;&gt; Speaker 2: I don't know.

13
00:00:46.786 --> 00:00:48.070
Did it catch?

14
00:00:48.070 --> 00:00:52.284
&gt;&gt; Justin Meyer: No, it didn't catch it,
it went over the, here, sorry about that.

15
00:00:52.284 --> 00:00:58.085
[LAUGH] So
[LAUGH] when you write a jQuery plugin,

16
00:00:58.085 --> 00:01:02.848
there's a standard way of doing it.

17
00:01:02.848 --> 00:01:06.860
You write $.fn.tabs, and

18
00:01:06.860 --> 00:01:11.340
what that does is it
automagically makes it so

19
00:01:11.340 --> 00:01:17.510
if I had my breeds ul,
I could call tabs on it like this.

20
00:01:17.510 --> 00:01:20.580
That's what I wanna be able to do,
all right?

21
00:01:20.580 --> 00:01:25.290
In reality,
what you're doing when you write

22
00:01:25.290 --> 00:01:31.217
$.fn.tabs is you're
writing $.prototype.tabs.

23
00:01:32.875 --> 00:01:37.085
Pretty darn close actually, what you're
really writing is you're writing $.,

24
00:01:37.085 --> 00:01:40.065
I think it's init.prototype.tabs.

25
00:01:40.065 --> 00:01:42.425
I can't remember where it is
anymore if the prototype.

26
00:01:42.425 --> 00:01:47.505
It is somewhere slightly different, but
all this time, jQuery is just trying

27
00:01:47.505 --> 00:01:52.605
to hide the fact that you're doing
prototype that there's a constructor

28
00:01:52.605 --> 00:01:56.250
function in there, and you're just
adding methods to its prototype.

29
00:01:56.250 --> 00:01:59.320
So, as I feel like it did the world a
little disservice cuz everybody would know

30
00:01:59.320 --> 00:02:02.970
prototypes, prototypical inheritance
a little bit better, but at the same time,

31
00:02:02.970 --> 00:02:03.880
it would confuse people.

32
00:02:03.880 --> 00:02:05.010
So, I understand why they did it.

33
00:02:06.980 --> 00:02:12.068
So, what I wanna do is make a tabs
widget that's going to read,

34
00:02:12.068 --> 00:02:15.460
that's gonna take this ul here.

35
00:02:15.460 --> 00:02:21.610
And make it so when I click on Doberman,
it's gonna show this div with id Doberman.

36
00:02:21.610 --> 00:02:24.440
But it's also gonna keep all of
these other elements hidden.

37
00:02:26.220 --> 00:02:29.640
Right, this is your standard
hello world tabs widget.

38
00:02:29.640 --> 00:02:34.009
Let me open up dom tabs or

39
00:02:34.009 --> 00:02:38.587
dom breeds,
&gt;&gt; Justin Meyer: Actually,

40
00:02:38.587 --> 00:02:40.309
I've got it opened in
Chrome I think already.

41
00:02:53.651 --> 00:02:54.683
&gt;&gt; Justin Meyer: Okay.

42
00:02:56.523 --> 00:03:00.127
&gt;&gt; Justin Meyer: So, yeah, I just wanna
be able to click these things and

43
00:03:00.127 --> 00:03:04.665
have it take me to, but I want it to
have it close these other elements.

44
00:03:06.390 --> 00:03:11.830
So this is kind of, we wanted to
progressively enhanced tabs widget for

45
00:03:11.830 --> 00:03:12.850
those who know what that means.

46
00:03:12.850 --> 00:03:17.860
That basically means the dom works without
anything and then we add the JavaScript

47
00:03:17.860 --> 00:03:24.690
to it and it makes it work like the html
works if JavaScript is there are not.

48
00:03:25.800 --> 00:03:29.780
But JavaScript's working in this case, so
we're gonna make it into a tabs widget.

49
00:03:29.780 --> 00:03:33.380
So when you click on Doberman here,
it's gonna know

50
00:03:33.380 --> 00:03:38.660
to show this Doberman because the href
is pointing at the id of this element.

51
00:03:38.660 --> 00:03:40.030
So let's make this work.

52
00:03:41.580 --> 00:03:46.863
So the one thing I had to add, which I
forgot to add when I was talking about it,

53
00:03:46.863 --> 00:03:51.029
was we're just gonna add fn,
an alias, to $.prototype.

54
00:03:52.721 --> 00:03:58.100
&gt;&gt; Justin Meyer: So that allows us to
write $.fn.tabs, just like jQuery.

55
00:04:00.480 --> 00:04:04.230
So the first thing I'm gonna do is,
each ul,

56
00:04:04.230 --> 00:04:07.880
I'm gonna call the tabs on the ul breeds.

57
00:04:07.880 --> 00:04:12.260
And what I need to do is
go through every li and

58
00:04:12.260 --> 00:04:16.110
hide all of the li's panels,
except for the first one.

59
00:04:16.110 --> 00:04:23.698
So I'm gonna go through my collection.

60
00:04:23.698 --> 00:04:30.703
And for every ul, I'm gonna create
an independent tabs widget.

61
00:04:30.703 --> 00:04:35.941
So this is gonna be the i,
and this gonna be the ul.

62
00:04:35.941 --> 00:04:41.216
And then for each li, I'm gonna make a ul

63
00:04:41.216 --> 00:04:47.796
into a jQuery wrapped,
&gt;&gt; Justin Meyer: Item.

64
00:04:51.636 --> 00:04:54.815
&gt;&gt; Justin Meyer: So I'm doing it this way
because we didn't make our $ constructor

65
00:04:54.815 --> 00:04:55.625
function work.

66
00:04:55.625 --> 00:04:59.125
So if you just pass in an element,
it also will make it a collection.

67
00:04:59.125 --> 00:05:00.185
But we did make it work, so

68
00:05:00.185 --> 00:05:04.715
if you pass an array of elements, it
will create a jQuery collection for you.

69
00:05:04.715 --> 00:05:12.270
So I'm gonna get the children,
which are gonna be each li.

70
00:05:12.270 --> 00:05:14.024
And I'm gonna go through each of those.

71
00:05:18.670 --> 00:05:22.502
&gt;&gt; Justin Meyer: This is gonna be li.

72
00:05:22.502 --> 00:05:29.058
I'm gonna do the same kind of thing,
&gt;&gt; Justin Meyer: To create that li,

73
00:05:29.058 --> 00:05:30.470
so it's nice.

74
00:05:30.470 --> 00:05:35.717
And all I'm gonna do is I'm gonna say,
hey, if i is 0,

75
00:05:35.717 --> 00:05:40.324
then I'm really gonna do nothing for
right now.

76
00:05:40.324 --> 00:05:46.839
And then if it's anything after the first
li, I want to get its tab panel,

77
00:05:46.839 --> 00:05:52.321
the div that belongs to that li,
and close it and, or hide it.

78
00:05:52.321 --> 00:05:57.410
So to get that tab panel,
I'm gonna make a little helper method.

79
00:05:59.360 --> 00:06:01.491
But I'm gonna call it like this, tabPanel.

80
00:06:03.994 --> 00:06:07.274
&gt;&gt; Justin Meyer: I'm gonna pass it my li,
and

81
00:06:07.274 --> 00:06:13.300
I'm gonna expect it to give
me back the div to close.

82
00:06:15.650 --> 00:06:19.513
And I'm just gonna call div.hide.

83
00:06:23.785 --> 00:06:26.000
&gt;&gt; Justin Meyer: So, I'm gonna make
this little tabs panel helper.

84
00:06:27.610 --> 00:06:31.850
Now I'm gonna try to do everything like
the way I think it should mostly be done.

85
00:06:31.850 --> 00:06:36.692
I'm gonna have a self
invoking function here,

86
00:06:36.692 --> 00:06:42.636
because I want tabPanel to be
private to this tabs widget.

87
00:06:46.148 --> 00:06:49.161
&gt;&gt; Justin Meyer: And again,
this is going to get an li, and

88
00:06:49.161 --> 00:06:52.186
it's gonna need to return the div for it.

89
00:06:52.186 --> 00:06:56.076
To get the div, I'm gonna have
to get its anchor element, so

90
00:06:56.076 --> 00:06:57.997
I'm gonna get its children.

91
00:07:00.150 --> 00:07:03.661
I could use find, I want it to
be really fancy, I'll use find.

92
00:07:03.661 --> 00:07:09.469
It's gonna find the anchor element, and
we're gonna read it's href attribute.

93
00:07:11.440 --> 00:07:18.140
So I'm going to be given this anchor,
I'm gonna read its href and get #doberman.

94
00:07:18.140 --> 00:07:19.611
Well, fortunately for us,

95
00:07:19.611 --> 00:07:22.688
that looks like a CSS selector
that I can use to get this div.

96
00:07:26.504 --> 00:07:31.212
&gt;&gt; Justin Meyer: So I can write,
&gt;&gt; Justin Meyer: I can

97
00:07:31.212 --> 00:07:35.510
write selector is what
this is gonna return.

98
00:07:35.510 --> 00:07:40.380
And I'm going to return
the div using that selector.

99
00:07:40.380 --> 00:07:41.855
It'll go get that div.

100
00:07:44.265 --> 00:07:46.860
&gt;&gt; Justin Meyer: And with that,
we're gonna hide everything.

101
00:07:46.860 --> 00:07:48.000
So I'm gonna start there and

102
00:07:48.000 --> 00:07:51.480
do a sanity check just to make sure
that at least this much is working.

103
00:07:51.480 --> 00:07:55.886
This should hide all of the panels,
except for the first one.

104
00:08:02.655 --> 00:08:06.932
&gt;&gt; Justin Meyer: It did not,
let me quickly make sure,

105
00:08:06.932 --> 00:08:10.550
what's that property of tabs?

106
00:08:14.924 --> 00:08:16.390
&gt;&gt; Justin Meyer: What's going on?

107
00:08:16.390 --> 00:08:17.846
&gt;&gt; Speaker 3: It's a problem with the CSS.

108
00:08:17.846 --> 00:08:20.190
I think it's before CSS.

109
00:08:20.190 --> 00:08:21.168
&gt;&gt; Justin Meyer: Before CSS?

110
00:08:21.168 --> 00:08:23.879
What do you mean?

111
00:08:23.879 --> 00:08:25.399
It's a problem with my decrypt.

112
00:08:25.399 --> 00:08:31.185
&gt;&gt; Speaker 3: [INAUDIBLE]

113
00:08:37.623 --> 00:08:40.446
&gt;&gt; Justin Meyer: Let me try my little

114
00:08:40.446 --> 00:08:42.392
trick here.

115
00:08:46.967 --> 00:08:49.517
&gt;&gt; Justin Meyer: See, it's easier to
do this if we'd gotten through it,

116
00:08:49.517 --> 00:08:50.910
all my tests would be running.

117
00:08:50.910 --> 00:08:55.240
Super easy to count on
the my version of jQuery,

118
00:08:55.240 --> 00:09:02.880
I might switch to the final version
just to, this $.fn is undefined.

119
00:09:02.880 --> 00:09:05.071
Is this the right version of my query?

120
00:09:21.912 --> 00:09:22.860
&gt;&gt; Justin Meyer: I'm gonna try like that.

121
00:09:27.082 --> 00:09:29.104
&gt;&gt; Justin Meyer: Are you making changes?

122
00:09:29.104 --> 00:09:30.777
&gt;&gt; Speaker 3: Sorry,
I was going through, you're good.

123
00:09:30.777 --> 00:09:34.409
Just don't break my stuff,
I was just trying to find it.

124
00:09:34.409 --> 00:09:37.320
&gt;&gt; Justin Meyer: Okay, there we go,
here is gone, and it worked.

125
00:09:37.320 --> 00:09:40.820
Okay, I don't know why that is,
I'll check it out, why I had to do it

126
00:09:40.820 --> 00:09:45.150
differently than I expected,
the startup prototype should exist.

127
00:09:47.182 --> 00:09:48.950
Maybe it's because we're
overriding $.prototype.

128
00:09:48.950 --> 00:09:50.470
Anyways, those are gone, good.

129
00:09:50.470 --> 00:09:53.650
So now I'm gonna make it so
the clicking and everything works.

130
00:09:55.800 --> 00:09:58.790
So I've hidden all of the other tab
panels that we don't wanna show.

131
00:09:58.790 --> 00:10:05.020
I'm actually gonna save
the first one as our active li.

132
00:10:15.800 --> 00:10:20.856
&gt;&gt; Justin Meyer: [COUGH] And
what I'll do is I'm going

133
00:10:20.856 --> 00:10:26.594
to listen to all the li's click events.

134
00:10:32.468 --> 00:10:36.100
&gt;&gt; Justin Meyer: And when they're clicked,

135
00:10:36.100 --> 00:10:42.153
I'm going to hide the active
li's tab panel and

136
00:10:42.153 --> 00:10:46.460
show the new li that was clicked.

137
00:10:46.460 --> 00:10:52.310
It's tab panel, so
inside an event handler like this,

138
00:10:52.310 --> 00:10:57.760
this is always gonna be the event that was
clicked, that you were not clicked on,

139
00:10:57.760 --> 00:11:00.960
but the current target,
whatever you're listening to.

140
00:11:00.960 --> 00:11:06.360
So if I'm listening to an li, this inside
of here is going to be a raw li element.

141
00:11:08.330 --> 00:11:13.099
So what I'm gonna do is first,
I'm gonna hide the active panel,

142
00:11:13.099 --> 00:11:15.101
the current active panel.

143
00:11:15.101 --> 00:11:21.349
I'm gonna say, get its tabPanel,
put in activeli, and hide it.

144
00:11:24.120 --> 00:11:29.060
Then I'm going to get
the current active li,

145
00:11:29.060 --> 00:11:35.040
I'm gonna update it to be
the new li that we just clicked

146
00:11:35.040 --> 00:11:41.152
on because that's the one
that's gonna be active now.

147
00:11:41.152 --> 00:11:43.140
That's the one we were trying to show.

148
00:11:43.140 --> 00:11:47.788
And then I'm going to simply
show it by getting its

149
00:11:47.788 --> 00:11:53.077
tabPanel,
&gt;&gt; Justin Meyer: And showing it.

150
00:12:02.070 --> 00:12:04.791
&gt;&gt; Justin Meyer: Hooray [LAUGH] and
that's it.

151
00:12:04.791 --> 00:12:12.220
If you wanna clean it up a little bit
more, we'd make sure we prevent default.

152
00:12:13.670 --> 00:12:16.235
So we stop changing the URL cuz this URL,

153
00:12:16.235 --> 00:12:19.190
you see how it's changing
every time I click?

154
00:12:20.200 --> 00:12:22.660
I don't like that,
because there's no need for that.

155
00:12:24.350 --> 00:12:29.690
Now the prevent default prevents
the default event from changing the URL,

156
00:12:29.690 --> 00:12:31.480
and that's it.

157
00:12:31.480 --> 00:12:35.721
That's the tabs widget,
uses a lot of what we learned.

158
00:12:35.721 --> 00:12:40.255
I mean, I'll post the cleaned up
event stuff, but what I like, and

159
00:12:40.255 --> 00:12:41.767
one final spiel here,

160
00:12:41.767 --> 00:12:47.036
is I like knowing what's going on
underneath the hood when I'm programming.

161
00:12:47.036 --> 00:12:51.830
I think it's really important writing big
pieces of software, you have to do it.

162
00:12:51.830 --> 00:12:53.080
You have to know what's going on, or else,

163
00:12:53.080 --> 00:12:56.030
you'll make something slow,
unmaintainable, etc.

164
00:12:56.030 --> 00:13:00.310
So that's why we put together this
training because we wanna show people as

165
00:13:00.310 --> 00:13:05.920
quickly as possible like what's
going on underneath the hood.

166
00:13:05.920 --> 00:13:08.950
Too many people just learn jQuery and
not the dom, so

167
00:13:08.950 --> 00:13:12.420
we try to create a bridge where you
can feel like you're learning jQuery.

168
00:13:12.420 --> 00:13:15.300
You are, but you're also learning
a lot about how the dom works.

169
00:13:15.300 --> 00:13:16.489
Yeah?

170
00:13:16.489 --> 00:13:21.741
&gt;&gt; Speaker 4: So I've heard that return
false also executes prevent default,

171
00:13:21.741 --> 00:13:25.850
and on top of that,
it does a few other things too.

172
00:13:25.850 --> 00:13:27.700
&gt;&gt; Justin Meyer: Does it
prevent stop propagation?

173
00:13:27.700 --> 00:13:31.568
&gt;&gt; Speaker 4: False, but okay.

174
00:13:31.568 --> 00:13:33.279
&gt;&gt; Justin Meyer: I tend not to use it.

175
00:13:33.279 --> 00:13:38.386
I used to five, six years ago, I would
always write return false, but I think

176
00:13:38.386 --> 00:13:44.224
that stop propagation and prevent default
is so much more explicit, what it's doing.

177
00:13:44.224 --> 00:13:45.910
Like I know that I'm preventing default.

178
00:13:45.910 --> 00:13:48.609
I know that I'm stopping
the propagation versus just some

179
00:13:48.609 --> 00:13:51.539
return false that happens to be
in some function, sometimes.

180
00:13:51.539 --> 00:13:56.011
&gt;&gt; Speaker 4: And that's also one problem
with return false is if there's an error

181
00:13:56.011 --> 00:13:59.249
in your code before it
goes through return false,

182
00:13:59.249 --> 00:14:02.733
then it's going to actually
visit the link, right?

183
00:14:02.733 --> 00:14:05.712
Because you didn't stop the propagation,

184
00:14:05.712 --> 00:14:10.069
you didn't prevent default
because you didn't return false.

185
00:14:10.069 --> 00:14:14.159
You threw a JavaScript there, and
so it does something unexpected and

186
00:14:14.159 --> 00:14:17.982
it goes [CROSSTALK] refreshes
the page when you didn't want it to.

187
00:14:17.982 --> 00:14:21.365
&gt;&gt; Justin Meyer: If you noticed,
I just intuitively put the prevent default

188
00:14:21.365 --> 00:14:25.230
the first thing inside this function
because of that exact reason.

189
00:14:25.230 --> 00:14:26.630
If my tab panel for

190
00:14:26.630 --> 00:14:31.280
some reason threw an error, it would
not be preventing the default behavior.

191
00:14:31.280 --> 00:14:34.600
So, that typically, it's a good idea
to call those things right away

192
00:14:34.600 --> 00:14:37.422
inside a function, if you really
wanna make sure they're gonna happen.

193
00:14:37.422 --> 00:14:41.288
&gt;&gt; Speaker 5: Well, and I was gonna say,
too, [INAUDIBLE] cases too where

194
00:14:41.288 --> 00:14:46.084
that's beneficial, or sometimes
return false is beneficial because,

195
00:14:46.084 --> 00:14:49.664
say, for instance,
they have JavaScript disabled.

196
00:14:49.664 --> 00:14:52.287
And you want them, therefore,

197
00:14:52.287 --> 00:14:57.340
to go to the link if they don't
have JavaScript working cuz for

198
00:14:57.340 --> 00:15:02.130
some reason, like I know we
have a support page as a model.

199
00:15:02.130 --> 00:15:04.530
But if they don't have JavaScript enabled,

200
00:15:04.530 --> 00:15:07.760
we want them to go to
the static support page.

201
00:15:07.760 --> 00:15:11.853
And so it actually, the link behaves two
different ways, so we use return false.

202
00:15:11.853 --> 00:15:14.193
&gt;&gt; Speaker 6: Okay, yeah.

203
00:15:14.193 --> 00:15:16.240
I have one quick clarification.

204
00:15:16.240 --> 00:15:18.538
It was in my mind, it was bugging me.

205
00:15:18.538 --> 00:15:23.210
So for what most people see is within
jQuery event handlers, so in by and click,

206
00:15:23.210 --> 00:15:26.926
now in real world,
jQuery return false will stop everything.

207
00:15:26.926 --> 00:15:30.812
It will stop propagation and
prevent defaults, but

208
00:15:30.812 --> 00:15:34.090
in native, it will only prevent defaults.

209
00:15:34.090 --> 00:15:36.934
It will still bubble,
it will still propagate.

210
00:15:36.934 --> 00:15:42.892
&gt;&gt; Justin Meyer: One
thing about return false,

211
00:15:42.892 --> 00:15:51.148
if JavaScript was disabled, [CROSSTALK].

212
00:15:51.148 --> 00:15:54.356
But there are cases, maybe you would
want it at the end, this at the end,

213
00:15:54.356 --> 00:15:58.036
just because hey, if there was an error,
maybe you should be going to that link, or

214
00:15:58.036 --> 00:16:00.050
maybe you should be submitting that form.

215
00:16:00.050 --> 00:16:04.564
And fall back to whatever the server
can do for you at that point.

216
00:16:04.564 --> 00:16:08.480
So just different cases to have
this up on top and the bottom, but

217
00:16:08.480 --> 00:16:13.360
I still like prevent default just
because a person can read it,

218
00:16:13.360 --> 00:16:16.310
and it's a little less arbitrary to me.

