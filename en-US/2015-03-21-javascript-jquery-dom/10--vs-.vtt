WEBVTT

1
00:00:00.000 --> 00:00:04.311
[MUSIC]

2
00:00:04.311 --> 00:00:07.934
&gt;&gt; Alexis Abril: You've probably seen, I
know Brian Lou has that awesome blog post

3
00:00:07.934 --> 00:00:12.266
or video out there with all the crazy
things that's wrong with JavaScript, and

4
00:00:12.266 --> 00:00:13.760
most of this is in there.

5
00:00:13.760 --> 00:00:15.739
I like that blog post,
it's really humorous.

6
00:00:16.780 --> 00:00:22.060
But there's a lot of weird things that
happen when you use double equals.

7
00:00:22.060 --> 00:00:23.236
We've all observed it, at this point,

8
00:00:23.236 --> 00:00:26.180
I assume everybody's observed something,
that's not what I would expect.

9
00:00:26.180 --> 00:00:30.320
But it's there and it's easy,
so sometimes we use it.

10
00:00:31.730 --> 00:00:38.401
Here's what's going on, 21,
the number, == the string, 21.

11
00:00:38.401 --> 00:00:40.690
What do you guys think, true false?

12
00:00:40.690 --> 00:00:42.350
What do you think this is gonna return?

13
00:00:42.350 --> 00:00:43.050
&gt;&gt; Speaker 2: True.
&gt;&gt; Alexis Abril: True?

14
00:00:44.190 --> 00:00:48.581
I would kind of expect this to be true,
like okay, 21, string 21.

15
00:00:48.581 --> 00:00:51.027
They're different types, but I get it.

16
00:00:51.027 --> 00:00:53.110
Stuff behind the scenes
is doing smart things.

17
00:00:53.110 --> 00:00:54.400
It knows what we're talking about.

18
00:00:54.400 --> 00:00:58.180
Okay, undefined == null.

19
00:00:58.180 --> 00:01:01.040
Now remember, these are primitive types.

20
00:01:01.040 --> 00:01:07.830
Undefined is a primitive type, it's
a undefined pointer, unreferenced pointer.

21
00:01:07.830 --> 00:01:12.870
Null is an actual memory address,
0x0, it's the null pointer in memory.

22
00:01:12.870 --> 00:01:14.280
If you say undefined == null,

23
00:01:14.280 --> 00:01:17.180
what do you guys think, true or false?

24
00:01:17.180 --> 00:01:18.102
&gt;&gt; Speaker 2: True.

25
00:01:18.102 --> 00:01:19.124
&gt;&gt; Speaker 3: True.
&gt;&gt; Speaker 4: False.

26
00:01:19.124 --> 00:01:19.838
&gt;&gt; Alexis Abril: You think true?

27
00:01:19.838 --> 00:01:22.947
A couple, one false, any other falses?

28
00:01:22.947 --> 00:01:25.055
I would think false,
I would expect this to be false.

29
00:01:25.055 --> 00:01:29.065
Just looking at it,
newcomer to language, undefined == null.

30
00:01:29.065 --> 00:01:32.107
They're two primitive types,
I would expect it to be false.

31
00:01:32.107 --> 00:01:36.540
It is true, this is strange.

32
00:01:36.540 --> 00:01:39.630
Don't worry, we're gonna come back
to why this is the way it is.

33
00:01:39.630 --> 00:01:44.360
Triple equals with two primitives, now,
again, a newcomer to the language,

34
00:01:44.360 --> 00:01:48.040
I would say, I would expect
this to be the same as before.

35
00:01:48.040 --> 00:01:51.336
What do you guys think, true or false?
&gt;&gt; Speaker 2: False.

36
00:01:51.336 --> 00:01:54.672
&gt;&gt; Alexis Abril: Okay, a couple false.

37
00:01:54.672 --> 00:01:58.512
This is the weird part cuz looking at
this, if the roles were reversed here,

38
00:01:58.512 --> 00:02:01.580
I would look at them like,
it's gotta be true, right?

39
00:02:01.580 --> 00:02:03.760
The previous one is true,

40
00:02:03.760 --> 00:02:09.130
this one is gonna be false,
just to make things completely confusing.

41
00:02:09.130 --> 00:02:12.785
Don't give up on the language yet, we're
gonna make it through this chart, and

42
00:02:12.785 --> 00:02:14.035
we're gonna show you why.

43
00:02:14.035 --> 00:02:17.073
Oops, didn't mean to show you the answer,
number [LAUGH] equals number,

44
00:02:17.073 --> 00:02:19.760
we assume that would be true,
I would hope that's true.

45
00:02:19.760 --> 00:02:23.370
Here's an interesting one,
empty object equals empty object.

46
00:02:23.370 --> 00:02:25.276
Triple equals, what do you guys think,

47
00:02:25.276 --> 00:02:26.011
true or false?

48
00:02:26.011 --> 00:02:26.964
&gt;&gt; Speaker 2: True.
&gt;&gt; Alexis Abril: True?

49
00:02:26.964 --> 00:02:27.625
&gt;&gt; Speaker 3: False.

50
00:02:27.625 --> 00:02:28.211
&gt;&gt; Alexis Abril: False.

51
00:02:28.211 --> 00:02:29.427
&gt;&gt; Speaker 4: False.

52
00:02:29.427 --> 00:02:31.389
&gt;&gt; Alexis Abril: False, true?

53
00:02:31.389 --> 00:02:33.020
The room is divided.

54
00:02:33.020 --> 00:02:36.720
I would expect this, well,
this one is different.

55
00:02:36.720 --> 00:02:42.370
I don't know, this one is unique, if
you've come from another dynamic language,

56
00:02:42.370 --> 00:02:45.480
I would expect this to be false.

57
00:02:46.660 --> 00:02:50.322
And it is, we're gonna talk about why.

58
00:02:50.322 --> 00:02:55.812
Those that I said true, probably assuming
like the properties are identical.

59
00:02:55.812 --> 00:02:58.152
That's basically the logic
that went through our heads.

60
00:02:58.152 --> 00:03:01.109
I'm gonna show you what
this is actually doing.

61
00:03:01.109 --> 00:03:05.804
Not a number is triple
equals to not a number.

62
00:03:05.804 --> 00:03:08.157
What do you guys think, true or false?

63
00:03:08.157 --> 00:03:09.851
False.
&gt;&gt; Speaker 2: I'm

64
00:03:09.851 --> 00:03:10.873
gonna say it's true.

65
00:03:10.873 --> 00:03:12.573
&gt;&gt; Alexis Abril: True.
&gt;&gt; Speaker 3: It's true.

66
00:03:12.573 --> 00:03:14.208
&gt;&gt; Alexis Abril: True.

67
00:03:14.208 --> 00:03:15.410
The room is divided once again.

68
00:03:17.760 --> 00:03:18.710
It is false.

69
00:03:20.380 --> 00:03:22.656
How many people have completely just,
I give up,

70
00:03:22.656 --> 00:03:25.140
I'm never gonna put another if
statement to my code again.

71
00:03:26.850 --> 00:03:28.874
Now this is crazy.

72
00:03:28.874 --> 00:03:33.884
[LAUGH] This last one,
true double equals an object

73
00:03:33.884 --> 00:03:39.146
with a value of function
that returns a string, 1.

74
00:03:39.146 --> 00:03:40.440
What do you guys think?

75
00:03:40.440 --> 00:03:41.800
I can tell you right now,
&gt;&gt; Speaker 2: [LAUGH]

76
00:03:41.800 --> 00:03:42.839
&gt;&gt; Alexis Abril: False, I expect that

77
00:03:42.839 --> 00:03:43.480
to be false.

78
00:03:43.480 --> 00:03:45.587
That's crazy, that's-
&gt;&gt; Speaker 2: True.

79
00:03:45.587 --> 00:03:46.705
&gt;&gt; Alexis Abril: One true?

80
00:03:49.282 --> 00:03:49.796
&gt;&gt; Alexis Abril: True, false,

81
00:03:49.796 --> 00:03:50.590
what do you guys think?

82
00:03:51.870 --> 00:03:53.730
False, true, split?

83
00:03:53.730 --> 00:03:56.860
Split down the middle again,
I like this room.

84
00:03:56.860 --> 00:04:00.240
This one's gonna be true,
[LAUGH] which is insane, right?

85
00:04:00.240 --> 00:04:04.860
I would never expect, if you had if true,
and some crazy object.

86
00:04:04.860 --> 00:04:07.454
Let's say you're passing in your function,

87
00:04:07.454 --> 00:04:11.710
accepting some kind of object as
a parameter, and you know you're like

88
00:04:11.710 --> 00:04:15.250
I need to make sure the data is
what I expect or throw some error.

89
00:04:15.250 --> 00:04:17.793
And then right at
the start of my function,

90
00:04:17.793 --> 00:04:22.388
I say if true equals whatever the user
passed in, and then some malicious user

91
00:04:22.388 --> 00:04:27.071
says, I'm gonna pass in an object with
a value of function that returns this.

92
00:04:27.071 --> 00:04:28.620
And I'm gonna pass your condition.

93
00:04:28.620 --> 00:04:30.480
That's crazy.

94
00:04:30.480 --> 00:04:32.995
Well let's talk about how
this is set up in memory, and

95
00:04:32.995 --> 00:04:36.510
then I'm gonna walk you guys through
what this actual comparison is doing.

