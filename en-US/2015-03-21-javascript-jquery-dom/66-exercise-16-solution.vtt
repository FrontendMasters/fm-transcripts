WEBVTT

1
00:00:00.000 --> 00:00:03.884
[MUSIC]

2
00:00:03.884 --> 00:00:08.507
&gt;&gt; Justin Meyer: If you remember, we're
going to loop through every item first, so

3
00:00:08.507 --> 00:00:12.090
I'm going to set up my loop
return $ each with this.

4
00:00:12.090 --> 00:00:16.140
This is going to get my item and

5
00:00:16.140 --> 00:00:21.810
my elements, and then for each element,

6
00:00:21.810 --> 00:00:26.347
I'm going to set the innerHTML.

7
00:00:29.268 --> 00:00:34.163
&gt;&gt; Justin Meyer: To empty strings to
clear it out, so that when I append my

8
00:00:34.163 --> 00:00:38.760
text node,
it's the only node inside the element.

9
00:00:40.260 --> 00:00:41.497
So I'm gonna create a text node.

10
00:00:48.607 --> 00:00:50.068
&gt;&gt; Justin Meyer: With the new text.

11
00:00:54.371 --> 00:00:57.162
&gt;&gt; Justin Meyer: And
then I'm going to append it to

12
00:00:57.162 --> 00:01:00.720
the element with append child.

13
00:01:00.720 --> 00:01:06.460
So, the DOM has methods where you can,
two methods, really, append child and

14
00:01:06.460 --> 00:01:13.190
insert before that let you add nodes
to the children of other nodes.

15
00:01:13.190 --> 00:01:17.790
The appendChild always adds at the end,
to the child nodes array.

16
00:01:17.790 --> 00:01:20.733
So we're gonna append the text node.

17
00:01:26.200 --> 00:01:31.283
&gt;&gt; Justin Meyer: So that, I'm gonna just
check that out and make sure it works.

18
00:01:39.034 --> 00:01:39.534
&gt;&gt; Justin Meyer: Why is my?

19
00:01:43.510 --> 00:01:44.010
There we go.

20
00:01:46.090 --> 00:01:50.460
So, I should be able to get my UL and

21
00:01:50.460 --> 00:01:55.380
change its text to something that includes
HTML, just to make sure it's not,

22
00:01:57.210 --> 00:02:00.780
it's actually giving a text node back.

23
00:02:00.780 --> 00:02:03.730
And you can see input shows up
instead of an input element.

24
00:02:06.980 --> 00:02:10.050
Any questions about this?

25
00:02:10.050 --> 00:02:11.000
Yeah.

26
00:02:11.000 --> 00:02:16.414
&gt;&gt; Speaker 2: So how come the creation of
the text node needs to be within each,

27
00:02:16.414 --> 00:02:19.750
as opposed to right before or outside?

28
00:02:19.750 --> 00:02:25.200
&gt;&gt; Justin Meyer: So, if you did
it outside, the problem would be,

29
00:02:25.200 --> 00:02:26.200
that's a good, we can.

30
00:02:27.540 --> 00:02:29.370
Can anybody take a guess
what the problem would be?

31
00:02:29.370 --> 00:02:30.885
Be awesome.

32
00:02:30.885 --> 00:02:33.190
Start answering our own.

33
00:02:33.190 --> 00:02:34.000
Anybody else?

34
00:02:37.270 --> 00:02:39.265
The scope isn't a problem, this text.

35
00:02:39.265 --> 00:02:44.450
Again, it will just
walk up the closure and

36
00:02:44.450 --> 00:02:50.786
find this text and use that,
so that text will work,

37
00:02:50.786 --> 00:02:54.690
but there's another problem.

38
00:02:54.690 --> 00:02:55.236
Yeah.

39
00:02:55.236 --> 00:03:01.313
&gt;&gt; Speaker 5: [INAUDIBLE]
&gt;&gt; Justin Meyer: Yes,

40
00:03:01.313 --> 00:03:07.124
you're only creating one text node so
that if you did this on multiple LIs,

41
00:03:07.124 --> 00:03:11.921
let's say you try to set the text
on multiple LIs to some text,

42
00:03:11.921 --> 00:03:15.150
it would only create
only one text node and

43
00:03:15.150 --> 00:03:20.250
append that text node to every
single ally, if that makes sense.

44
00:03:20.250 --> 00:03:25.152
Let me show you what the result is,
the actual result is you only see, well,

45
00:03:25.152 --> 00:03:30.143
I'll show you what the result is,
it's kind of easier to show than explain.

46
00:03:35.829 --> 00:03:37.471
&gt;&gt; Justin Meyer: This one.

47
00:03:37.471 --> 00:03:38.765
Yeah.

48
00:03:38.765 --> 00:03:40.060
Okay.

49
00:03:40.060 --> 00:03:42.017
So, let me do with all the LI's.

50
00:03:46.555 --> 00:03:48.040
&gt;&gt; Justin Meyer: Someone,
how do I get rid of this again?

51
00:03:48.040 --> 00:03:48.650
Someone told me.

52
00:03:48.650 --> 00:03:49.350
Escape.

53
00:03:49.350 --> 00:03:50.450
It's just escape?

54
00:03:50.450 --> 00:03:50.950
Okay.

55
00:03:52.620 --> 00:03:53.790
Cool.

56
00:03:53.790 --> 00:03:58.940
So if I were to change
the text of each LI to,

57
00:03:58.940 --> 00:04:05.960
just say input, what you want is to
see three inputs in the page then.

58
00:04:05.960 --> 00:04:09.580
Three of not input elements, but
three of this text in the page.

59
00:04:09.580 --> 00:04:11.486
But you're only gonna see one.

60
00:04:11.486 --> 00:04:16.806
The reason is, how do I?

61
00:04:16.806 --> 00:04:18.836
Elements.

62
00:04:18.836 --> 00:04:20.206
Get out of here.

63
00:04:20.206 --> 00:04:23.896
The reason is because if we
were to walk through this,

64
00:04:23.896 --> 00:04:27.258
it's adding that text node
to this first LI, but

65
00:04:27.258 --> 00:04:32.916
whenever you append an element that's
already in the DOM, it implicitly removes

66
00:04:32.916 --> 00:04:39.160
it from whatever its current parent is,
and inserts it in its new position.

67
00:04:39.160 --> 00:04:43.780
So what we really need is
three text nodes, one for

68
00:04:43.780 --> 00:04:45.710
each LI, we need to be creating three.

69
00:04:46.930 --> 00:04:50.269
So, if I showed this happening,

70
00:04:50.269 --> 00:04:55.889
it might be kind of cool just
to watch taking place here.

71
00:05:09.604 --> 00:05:11.254
&gt;&gt; Justin Meyer: I gotta
hit my Console here.

72
00:05:14.365 --> 00:05:20.420
&gt;&gt; Justin Meyer: Okay, so, let me put some
watches so we can see what we've got.

73
00:05:20.420 --> 00:05:26.887
Here is the text node, and
I should write text node parent.

74
00:05:32.163 --> 00:05:32.663
&gt;&gt; Justin Meyer: Parent node.

75
00:05:34.340 --> 00:05:39.080
Right now the text doesn't
belong to any parents,

76
00:05:39.080 --> 00:05:43.480
then I'm gonna do element
that child nodes.

77
00:05:43.480 --> 00:05:48.280
Actually, I wish we could get to UL.

78
00:05:48.280 --> 00:05:55.930
I'm just going to write the UL so
we can see it, URL 0.child nodes.

79
00:05:55.930 --> 00:06:00.119
That's gonna get the,
it's just going to show me all the URLs,

80
00:06:00.119 --> 00:06:02.380
child nodes, so I can see each LI.

81
00:06:04.500 --> 00:06:11.240
Actually, better might just be to do,
I'll just get each LI, okay.

82
00:06:12.370 --> 00:06:16.420
So here's each LI,
here's the current text node.

83
00:06:16.420 --> 00:06:21.340
What it's going to do is you can see it's
going to take the first text node, and

84
00:06:21.340 --> 00:06:25.660
it's going to say, right now it's got all
these child nodes, it's got its anchor.

85
00:06:25.660 --> 00:06:30.193
What it's going to do is blow them away,
child nodes is now zero, and

86
00:06:30.193 --> 00:06:33.260
then it's going to append our text node.

87
00:06:33.260 --> 00:06:35.389
So now our text node has
that first LI as a a parent.

88
00:06:36.410 --> 00:06:41.250
But then this loop is gonna
come again on this LI, and

89
00:06:41.250 --> 00:06:44.670
you can see it's got childNodes 1.

90
00:06:44.670 --> 00:06:50.540
It's gonna clear that out, make it
childNodes 0, but here's the crazy part.

91
00:06:50.540 --> 00:06:54.850
This first one still has
this text node as a child.

92
00:06:56.300 --> 00:06:57.430
All right, that's the text node.

93
00:06:57.430 --> 00:07:01.080
And this,
the text node has it as a parent.

94
00:07:01.080 --> 00:07:06.140
But the second we append
that text node to a new LI,

95
00:07:06.140 --> 00:07:08.790
it's going to change its parent,
even though we didn't really see it,

96
00:07:08.790 --> 00:07:13.560
you can see this first LI,
now it has no child nodes.

97
00:07:13.560 --> 00:07:19.130
So, it's just kind of appending it, but
then removing it with the next append.

98
00:07:20.190 --> 00:07:24.980
So, the fix to this is, to fix

99
00:07:28.160 --> 00:07:33.700
this is to create the text node each and
every time, really good question.

100
00:07:34.880 --> 00:07:35.440
Any others?

101
00:07:37.720 --> 00:07:39.600
All right, so
now we're going to work on the setter.

102
00:07:41.730 --> 00:07:43.550
The setter, as I said before,

103
00:07:43.550 --> 00:07:47.830
is going to have to you,
if we're calling on this you will.

104
00:07:47.830 --> 00:07:52.990
It's going to have to recurs through all
the different text nodes, starting with

105
00:07:52.990 --> 00:07:56.880
the UL's text nodes, than the LI's text
nodes, and then the anchors text nodes.

106
00:07:56.880 --> 00:08:01.410
Essentially, accumulate them all and
then add them all together, or add them

107
00:08:01.410 --> 00:08:05.890
while it's going and return that to
the user, but for only the first element.

108
00:08:06.970 --> 00:08:10.750
So, I'm gonna give some skeleton
code that helps with this.

109
00:08:11.750 --> 00:08:15.530
What's helpful when you're doing
recursive functions is to sometimes,

110
00:08:15.530 --> 00:08:18.420
you need another function
that will call itself.

111
00:08:18.420 --> 00:08:20.687
I'm not gonna make text call itself,
instead,

112
00:08:20.687 --> 00:08:23.413
I'm gonna have text call
a function that can call itself.

113
00:08:27.496 --> 00:08:32.935
&gt;&gt; Justin Meyer: In the L's case, what
I'm gonna do is if I'm gonna be really

114
00:08:32.935 --> 00:08:38.482
good with jQuery,
I'm gonna do something like return this,

115
00:08:38.482 --> 00:08:41.682
as long as there's a zero element,

116
00:08:41.682 --> 00:08:46.500
I'm going to call a getText
function with this zero.

117
00:08:48.640 --> 00:08:51.900
So I'm gonna make getText
able to give in an element.

118
00:08:51.900 --> 00:08:57.240
It's going to go through all the elements
child nodes, find the text nodes,

119
00:08:57.240 --> 00:09:02.480
the ones that are text nodes, and add them
up, but then also call any normal nodes.

120
00:09:02.480 --> 00:09:06.970
It's going to call getText
on those to get their text.

121
00:09:06.970 --> 00:09:10.920
Which will create this recursion where
this function getText will be called on

122
00:09:10.920 --> 00:09:15.400
every single node from whatever element.

123
00:09:15.400 --> 00:09:19.039
This is down to all of its
deeply nested child nodes.

124
00:09:21.100 --> 00:09:22.792
Is there a question that someone had?

125
00:09:22.792 --> 00:09:27.850
&gt;&gt; Speaker 3: With referring to online
115, can we call this .innerHTML instead?

126
00:09:27.850 --> 00:09:28.630
&gt;&gt; Justin Meyer: I forgot to mention that,

127
00:09:28.630 --> 00:09:31.020
that's a great one with
a little short cut.

128
00:09:31.020 --> 00:09:32.130
Maybe save.

129
00:09:32.130 --> 00:09:34.460
And it wouldn't really save time, but

130
00:09:34.460 --> 00:09:38.199
just to be cool in meta [LAUGH]
would be to do just this .HTML, and

131
00:09:38.199 --> 00:09:42.890
then this will go through on every
element and set its innerHTML to empty.

132
00:09:42.890 --> 00:09:44.530
So, you don't actually need to do this.

133
00:09:46.835 --> 00:09:48.000
Yeah, forgot to mention that.

134
00:09:48.000 --> 00:09:48.960
You can absolutely do that.

135
00:09:48.960 --> 00:09:54.430
That's kind of cool, start using your own
stuff to implement bigger functionality.

136
00:09:57.100 --> 00:10:00.170
So, back to this this getText function.

137
00:10:01.820 --> 00:10:04.410
Maybe let's implement this together,
cuz this one is kinda hard.

138
00:10:04.410 --> 00:10:06.508
And we've got a lot of other things, but

139
00:10:06.508 --> 00:10:09.800
I'm going to have you
guys talk me through it.

140
00:10:09.800 --> 00:10:15.157
So, this getText,
I'm just gonna put this right here.

141
00:10:15.157 --> 00:10:20.867
And this is gonna take an element,
and it needs to return that element,

142
00:10:20.867 --> 00:10:25.912
the text, the accumulated text
of all of that element's child

143
00:10:25.912 --> 00:10:31.152
nodes,
&gt;&gt; Justin Meyer: So,

144
00:10:31.152 --> 00:10:33.750
I'm going to give a little
hint to start here.

145
00:10:33.750 --> 00:10:39.910
I'm gonna start with some text, just some
starting text that I'm gonna add to,

146
00:10:39.910 --> 00:10:43.205
and at the end of this, I'm gonna
return some text, return the text.

147
00:10:44.530 --> 00:10:47.354
And in between here, this is where
all the magic is gonna happen.

148
00:10:51.277 --> 00:10:56.008
&gt;&gt; Justin Meyer: So, the first thing I
need to do is iterate through all of

149
00:10:56.008 --> 00:10:58.900
this element's text nodes.

150
00:10:58.900 --> 00:11:03.120
First, sorry, not all of its text nodes,
all of its child nodes.

151
00:11:03.120 --> 00:11:08.820
We'll include text nodes and
non text nodes, normal elements.

152
00:11:08.820 --> 00:11:10.905
How can I iterate through
this element's child nodes?

153
00:11:15.460 --> 00:11:15.990
What's a good way?

154
00:11:15.990 --> 00:11:17.290
How would someone write that?

155
00:11:22.580 --> 00:11:23.110
&gt;&gt; Speaker 4: Dollar each.

156
00:11:25.290 --> 00:11:27.028
&gt;&gt; Justin Meyer: And
what would I iterate through?

157
00:11:30.480 --> 00:11:31.878
&gt;&gt; Speaker 2: You said all
the child nodes, right?

158
00:11:31.878 --> 00:11:37.550
&gt;&gt; Justin Meyer: Uh-huh, for the element.

159
00:11:37.550 --> 00:11:38.118
&gt;&gt; Speaker 2: [INAUDIBLE] .childnodes?

160
00:11:38.118 --> 00:11:38.620
&gt;&gt; Justin Meyer: Close.

161
00:11:38.620 --> 00:11:40.940
It's the elements.child nodes.

162
00:11:42.874 --> 00:11:47.860
And this would get called with a function
that would have each, the index and

163
00:11:47.860 --> 00:11:48.850
each child node.

164
00:11:50.680 --> 00:11:51.180
Okay.

165
00:11:52.670 --> 00:11:57.622
So now what I need to do is if
that child node is a text node,

166
00:11:57.622 --> 00:12:01.040
I'm just going to add its text to text.

167
00:12:03.110 --> 00:12:07.030
How can I tell if an element
is a text node or

168
00:12:07.030 --> 00:12:10.210
a normal HTML elements, does anybody know?

169
00:12:11.552 --> 00:12:15.608
I haven't explained it yet, but
I'm about to if no one knows.

170
00:12:18.672 --> 00:12:19.172
&gt;&gt; Justin Meyer: Anybody?

171
00:12:21.470 --> 00:12:24.325
So, how would you guys
maybe figure this out?

172
00:12:24.325 --> 00:12:29.035
If you came across this problem and didn't
have the Internet to quickly look it up.

173
00:12:29.035 --> 00:12:31.670
[LAUGH] How could you tell?

174
00:12:31.670 --> 00:12:35.090
Maybe just with debugging skills.

175
00:12:35.090 --> 00:12:37.990
Here's what I would do,
when I get lost especially when I'm

176
00:12:37.990 --> 00:12:41.190
in situations where there's not
a good answer on Stack Overflow.

177
00:12:43.080 --> 00:12:46.890
Look, open your debugger, and
just look at the elements and

178
00:12:46.890 --> 00:12:49.592
its properties and
see if there's something there.

179
00:12:49.592 --> 00:12:50.390
All right?

180
00:12:50.390 --> 00:12:53.330
So, one thing that I might do is,
there's sometimes a lot of properties,

181
00:12:53.330 --> 00:12:54.580
unfortunately.

182
00:12:54.580 --> 00:12:56.330
But it's still a good place to start.

183
00:12:58.950 --> 00:13:06.110
So, for instance, a normal node,
I could get one of my LI's like this,

184
00:13:08.840 --> 00:13:13.320
and I can,
if you reveal it in the elements panel,

185
00:13:13.320 --> 00:13:18.230
you can see all of
the properties on an LI, right?

186
00:13:18.230 --> 00:13:20.230
And there's a lot of different things, so

187
00:13:20.230 --> 00:13:23.556
I'm kind of gonna go right to
the one that is the important one.

188
00:13:23.556 --> 00:13:27.300
You'd be, there's a node type one,
that's weird.

189
00:13:27.300 --> 00:13:29.910
It's got node type one, type of a node?

190
00:13:29.910 --> 00:13:30.990
That's weird.

191
00:13:30.990 --> 00:13:34.340
And what I might do is then say maybe
there's a difference between that and a,

192
00:13:34.340 --> 00:13:39.770
if I created a,
let me not type down there.

193
00:13:39.770 --> 00:13:40.270
Sorry.

194
00:13:43.080 --> 00:13:48.280
If I created a text node, maybe that has

195
00:13:49.520 --> 00:13:54.666
a different node type,
it does, it has a three.

196
00:13:54.666 --> 00:13:58.240
So, this sometimes,
if you were to situate,

197
00:13:58.240 --> 00:14:01.200
this would totally be something
you should would search for and

198
00:14:01.200 --> 00:14:04.720
kinda find the answer yourself how to tell
the difference between different roads.

199
00:14:04.720 --> 00:14:06.930
But sometimes you will be
in a situation you're just,

200
00:14:06.930 --> 00:14:08.660
I have no idea how to get this value.

201
00:14:09.890 --> 00:14:11.160
What's it called isn't helping.

202
00:14:11.160 --> 00:14:13.120
I've many times just kind of been okay,

203
00:14:13.120 --> 00:14:15.840
is there something that
helps me on these elements?

204
00:14:15.840 --> 00:14:16.900
Know what I'm supposed to do.

205
00:14:18.310 --> 00:14:22.010
So, node type is how you can
distinguish between a text node,

206
00:14:22.010 --> 00:14:28.010
which has node type of three, and a normal
node, an LI that has a node type of one.

