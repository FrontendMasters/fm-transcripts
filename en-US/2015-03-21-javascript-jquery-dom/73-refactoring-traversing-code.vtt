WEBVTT

1
00:00:00.000 --> 00:00:03.722
[MUSIC]

2
00:00:03.722 --> 00:00:07.716
&gt;&gt; Alexis Abril: So you notice we've
gotten quite a bit of repetition going on

3
00:00:07.716 --> 00:00:08.820
as developers.

4
00:00:08.820 --> 00:00:10.807
As soon as we've repeated ourselves twice,

5
00:00:10.807 --> 00:00:13.644
maybe we start thinking about
refactoring a little bit of code.

6
00:00:13.644 --> 00:00:16.386
So what we're gonna do
here is a slight refactor.

7
00:00:16.386 --> 00:00:19.966
We're gonna create
a makeTraverser helper method.

8
00:00:19.966 --> 00:00:23.180
The same way we had isArrayLike
as our private helper method.

9
00:00:23.180 --> 00:00:26.739
We're gonna make one called
makeTraverser and what this is gonna do,

10
00:00:26.739 --> 00:00:29.290
is gonna take out a lot of
that boilerplate stuff.

11
00:00:29.290 --> 00:00:31.920
We had every one of our traversal helpers.

12
00:00:31.920 --> 00:00:33.810
We had an accumulator.

13
00:00:33.810 --> 00:00:37.480
We returned a jQuery collection
version of our accumulator.

14
00:00:37.480 --> 00:00:42.470
We did the sum function on
each item in the array.

15
00:00:42.470 --> 00:00:47.499
Those are the common parts
of our helper method so far.

16
00:00:47.499 --> 00:00:53.438
So what we're gonna do is try to
strip that out so that parent,

17
00:00:53.438 --> 00:00:58.933
child, next and previous,
are a little bit more terse.

18
00:00:58.933 --> 00:01:02.144
We don't have to repeat ourselves.

19
00:01:02.144 --> 00:01:09.140
So, let's do that together.
&gt;&gt; Alexis Abril: Some

20
00:01:09.140 --> 00:01:12.850
of them scoot these,
I shouldn't have minimized that.

21
00:01:12.850 --> 00:01:17.281
I'm gonna copy two of these, previous and

22
00:01:17.281 --> 00:01:22.449
parent just so
that we can have them on the screen up

23
00:01:22.449 --> 00:01:28.228
here.
&gt;&gt; Alexis Abril: And

24
00:01:28.228 --> 00:01:30.010
put it right above getText.

25
00:01:31.420 --> 00:01:36.106
I'm gonna call this makeTraverser.

26
00:01:36.106 --> 00:01:43.101
This will be a function.
&gt;&gt; Alexis Abril: I'm

27
00:01:43.101 --> 00:01:50.674
gonna copy these guys and minimize
their each loops, comment them out.

28
00:01:50.674 --> 00:01:55.366
So you can see, even on previous and
parent that are doing two

29
00:01:55.366 --> 00:02:00.340
very distinct things,
the code is remarkably similar.

30
00:02:00.340 --> 00:02:04.390
And that's the part we
wanna kinda strip out.

31
00:02:04.390 --> 00:02:10.730
So first off, we've got to think
about what is makeTraverser doing.

32
00:02:10.730 --> 00:02:12.930
We wanna makeTraverser to return and

33
00:02:12.930 --> 00:02:15.000
this is the part where we
might get lost a little bit.

34
00:02:15.000 --> 00:02:17.510
We want makeTraverser is gonna
be a function itself, but

35
00:02:17.510 --> 00:02:21.030
we want it to return a function
that we can invoke later.

36
00:02:22.150 --> 00:02:30.400
So here, right off the bat,
we're gonna say, return function.

37
00:02:30.400 --> 00:02:33.560
Now, one of the things when you're
building this kind of API or any kind of

38
00:02:33.560 --> 00:02:39.090
API, you wanna think about what does
your function need to do what it does.

39
00:02:39.090 --> 00:02:44.960
In our case, if all of this stuff here and
here below is identical.

40
00:02:44.960 --> 00:02:46.110
That's all fine.

41
00:02:46.110 --> 00:02:50.680
The part of this needs to be
dynamic is this middle section.

42
00:02:50.680 --> 00:02:54.390
The part that's within the each
is what we wanna invoke but

43
00:02:54.390 --> 00:02:59.280
it's gonna be different if you're
a parent or a previous or a next.

44
00:02:59.280 --> 00:03:03.590
So what I'm gonna do is I'm gonna
give this a callback argument.

45
00:03:03.590 --> 00:03:08.680
So we can pass makeTraverser
a callback that we will invoke for

46
00:03:08.680 --> 00:03:13.430
each one of our items here.

47
00:03:14.770 --> 00:03:19.100
Then I'm gonna put in our boilerplates,
var elements = array.

48
00:03:19.100 --> 00:03:22.842
We're gonna return $(elements).

49
00:03:22.842 --> 00:03:25.739
We're gonna say a $.each.

50
00:03:26.890 --> 00:03:31.432
This, we'll talk about
how that works here in

51
00:03:31.432 --> 00:03:36.211
a second cuz this might be
a little bit out there.

52
00:03:36.211 --> 00:03:40.276
And then I'm gonna say function(i, el).

53
00:03:40.276 --> 00:03:48.000
And in here,
we want to invoke our callback.

54
00:03:48.000 --> 00:03:52.823
So we could do this and
I think for most of this,

55
00:03:52.823 --> 00:03:57.030
what we've done so far in this library,

56
00:03:57.030 --> 00:04:02.994
that will probably work ish,
as far as setting context.

57
00:04:02.994 --> 00:04:09.216
But we want this to be
explicit in two things.

58
00:04:09.216 --> 00:04:12.972
One, when we're passing arguments and
two, when we're setting context.

59
00:04:12.972 --> 00:04:17.608
I know I just dropped a lot of information
really quickly, just verbiage wise.

60
00:04:17.608 --> 00:04:19.490
Let's talk about this.

61
00:04:20.720 --> 00:04:26.690
So one thing we wanna do,

62
00:04:26.690 --> 00:04:31.526
let's talk about context here first,
is we want to invoke our callback.

63
00:04:31.526 --> 00:04:33.974
But we want it to behave
like it was before,

64
00:04:33.974 --> 00:04:37.649
like it was defined on the method itself,
on the object itself.

65
00:04:37.649 --> 00:04:41.594
So here, we have the callback,
this is something we wanna invoke.

66
00:04:41.594 --> 00:04:43.797
But with a context that we specify,

67
00:04:43.797 --> 00:04:48.357
I'm gonna use apply because we're
gonna use arguments here in a second.

68
00:04:48.357 --> 00:04:53.263
And the context is we really
want it to be what it was prior,

69
00:04:53.263 --> 00:04:55.579
the collection was prior.

70
00:04:55.579 --> 00:04:59.883
But within each, we changed context.

71
00:04:59.883 --> 00:05:02.586
If you remember in our each helper itself,

72
00:05:02.586 --> 00:05:07.260
we actually change context if you
remember the value comma i comma value.

73
00:05:07.260 --> 00:05:08.275
So we set it there.

74
00:05:08.275 --> 00:05:12.886
This is actually one of
the really common things we see

75
00:05:12.886 --> 00:05:15.657
slip up is what is this refer to.

76
00:05:15.657 --> 00:05:17.859
So I'm gonna save a reference to it.

77
00:05:17.859 --> 00:05:19.230
This is a really common pattern.

78
00:05:19.230 --> 00:05:22.060
I'm gonna say, self = this.

79
00:05:22.060 --> 00:05:26.760
Cuz I want the context,
before this whole thing gets started.

80
00:05:26.760 --> 00:05:31.584
What's up?
&gt;&gt; Speaker 2: In the final, I thought that

81
00:05:31.584 --> 00:05:37.682
the context is the actual element.
&gt;&gt; Alexis Abril: The context?

82
00:05:37.682 --> 00:05:38.750
In the final version.

83
00:05:40.090 --> 00:05:41.210
We could do that too.

84
00:05:41.210 --> 00:05:44.300
That would reduce code.

85
00:05:44.300 --> 00:05:51.710
That would change our callbacks
to just be the element itself.

86
00:05:51.710 --> 00:05:53.125
Yeah, we could do that.

87
00:05:53.125 --> 00:05:55.782
I like that.

88
00:05:55.782 --> 00:06:01.142
Okay, let's talk about those,
what we just said here.

89
00:06:01.142 --> 00:06:05.599
Okay, I'm gonna say el
as our context here.

90
00:06:09.985 --> 00:06:11.596
&gt;&gt; Alexis Abril: Now, like we did earlier,

91
00:06:11.596 --> 00:06:15.670
this function itself is gonna be
different in different scenarios.

92
00:06:15.670 --> 00:06:18.860
And it can except any number of arguments.

93
00:06:18.860 --> 00:06:22.200
Whatever that happens to be,
we wanna make sure we pass that down.

94
00:06:22.200 --> 00:06:25.320
Now, I can't say, I'd like to do,

95
00:06:26.920 --> 00:06:30.430
in a very abstract way,
I might wanna do something like this, but

96
00:06:30.430 --> 00:06:34.860
this argument is actually gonna
refer to its function call.

97
00:06:34.860 --> 00:06:39.960
We don't want those arguments,
we really want

98
00:06:39.960 --> 00:06:42.770
the arguments that are passed
in to this function here.

99
00:06:45.620 --> 00:06:50.232
So this will be our signature, and
now I wanna go down to parent,

100
00:06:50.232 --> 00:06:52.829
cuz parent's probably
the simplest one of this.

101
00:06:54.730 --> 00:06:56.130
I'm gonna comment this part out.

102
00:06:58.470 --> 00:07:05.670
And I'm gonna say, parent is
makeTraverser, pass in a function.

103
00:07:08.170 --> 00:07:11.488
And our callback, makeTraverser,

104
00:07:11.488 --> 00:07:16.952
in our context because we said
cb.apply with the elements.

105
00:07:16.952 --> 00:07:22.634
We're just going to
return this.parentNode.

106
00:07:22.634 --> 00:07:26.875
This, in the context of this callback,

107
00:07:26.875 --> 00:07:32.239
will be set to the instance
of the element within our

108
00:07:32.239 --> 00:07:38.805
loop in makeTraverser,
&gt;&gt; Alexis Abril: So here we have,

109
00:07:38.805 --> 00:07:43.770
let's see what we're doing here,

110
00:07:48.335 --> 00:07:50.386
&gt;&gt; Alexis Abril: So within makeTraverser,

111
00:07:50.386 --> 00:07:55.916
we're coming through,
&gt;&gt; Alexis Abril: And

112
00:07:55.916 --> 00:07:58.480
we're going through each
in the collection, here.

113
00:07:58.480 --> 00:08:03.530
Let's console.log what we're
actually setting here.

114
00:08:07.000 --> 00:08:08.730
We got our two lis.

115
00:08:09.790 --> 00:08:10.560
This is right.

116
00:08:12.510 --> 00:08:15.720
We got cb.apply.

117
00:08:15.720 --> 00:08:17.270
We're calling or invoking our callback.

118
00:08:17.270 --> 00:08:21.480
We're not pushing anything
onto our elements.

119
00:08:21.480 --> 00:08:25.730
So here we probably wanna say,
we're not modifying our accumulator.

120
00:08:26.780 --> 00:08:33.280
So let us do this, let's say var,

121
00:08:33.280 --> 00:08:37.810
I'm just gonna call this return,
whatever our return value is.

122
00:08:37.810 --> 00:08:46.070
And we can say if(isArrayLike),
this is a collection coming back.

123
00:08:46.070 --> 00:08:49.629
I'm gonna say elements,

124
00:08:49.629 --> 00:08:54.814
I'm gonna say array.push.apply.

125
00:08:54.814 --> 00:09:00.342
Elements, our return value, else if(ret).

126
00:09:00.342 --> 00:09:07.180
If it's not null being returned,
then elements.push(ret).

127
00:09:07.180 --> 00:09:08.634
Now, we're adding stuff to our collection.

128
00:09:08.634 --> 00:09:12.163
&gt;&gt; [INAUDIBLE]
&gt;&gt; Alexis Abril: What's that?

129
00:09:12.163 --> 00:09:14.955
&gt;&gt; [INAUDIBLE]

130
00:09:14.955 --> 00:09:15.722
&gt;&gt; Alexis Abril: I'm sorry.

131
00:09:18.948 --> 00:09:20.412
&gt;&gt; Alexis Abril: Now, with our check,

132
00:09:20.412 --> 00:09:23.350
we're set up to handle
all three scenarios.

133
00:09:23.350 --> 00:09:26.216
ParentNode if it's
returning a single node,

134
00:09:26.216 --> 00:09:33.359
or,
&gt;&gt; Alexis Abril: Children

135
00:09:33.359 --> 00:09:38.863
if it's returning multiple nodes.
&gt;&gt; Alexis Abril: So

136
00:09:38.863 --> 00:09:42.803
children, I'm gonna say

137
00:09:42.803 --> 00:09:48.182
makeTraverser function for this.

138
00:09:48.182 --> 00:09:55.892
We just need to return children.
&gt;&gt; Alexis Abril: For

139
00:09:55.892 --> 00:10:03.075
previous,
&gt;&gt; Alexis Abril: We're

140
00:10:03.075 --> 00:10:11.447
gonna do the same thing, except we're
gonna do all of this with previousSibling.

141
00:10:11.447 --> 00:10:13.955
This can just be this,

142
00:10:16.686 --> 00:10:21.500
&gt;&gt; Alexis Abril: previousSibling, yep,

143
00:10:21.500 --> 00:10:26.759
and, this will be a return.

144
00:10:26.759 --> 00:10:30.907
And that should be all the changes there.

145
00:10:30.907 --> 00:10:33.671
Indent that, and

146
00:10:33.671 --> 00:10:38.835
we can do the exact same for next.

147
00:10:38.835 --> 00:10:43.670
This will be next Sibling.

148
00:10:43.670 --> 00:10:46.837
Then we go back to our test page.

149
00:10:46.837 --> 00:10:53.062
We got parent and
children working but I broke next.

150
00:10:53.062 --> 00:11:01.161
current = this nextSibling or go iterate.
&gt;&gt; Alexis Abril: Otherwise-

151
00:11:01.161 --> 00:11:05.103
&gt;&gt; [INAUDIBLE]

152
00:11:05.103 --> 00:11:07.545
&gt;&gt; Alexis Abril: Length of undefined.

153
00:11:07.545 --> 00:11:13.417
&gt;&gt; [INAUDIBLE]

154
00:11:13.417 --> 00:11:13.970
&gt;&gt; Alexis Abril: Yeah,

155
00:11:13.970 --> 00:11:17.918
I bet it's probably isArrayLike.
&gt;&gt; Speaker 2: [INAUDIBLE]

156
00:11:17.918 --> 00:11:21.455
isArrayLike [INAUDIBLE] false.

157
00:11:21.455 --> 00:11:25.286
So just make sure you're putting,

158
00:11:25.286 --> 00:11:30.578
just handle that in your cursor.
&gt;&gt; Alexis Abril: Yeah.

159
00:11:30.578 --> 00:11:34.758
&gt;&gt; Speaker 2: Make sure

160
00:11:34.758 --> 00:11:40.838
[INAUDIBLE]
&gt;&gt; Alexis Abril: Yep.

161
00:11:40.838 --> 00:11:42.176
&gt;&gt; Speaker 3: Few people commenting that

162
00:11:42.176 --> 00:11:44.608
we're kinda moving pretty fast.
&gt;&gt; Alexis Abril: We have a lot of material

163
00:11:44.608 --> 00:11:45.609
to cover.
&gt;&gt; Speaker 2: I'm gonna explain it.

164
00:11:45.609 --> 00:11:46.122
&gt;&gt; Alexis Abril: Yeah.

165
00:11:46.122 --> 00:11:50.836
&gt;&gt; Speaker 3: Okay.

166
00:11:50.836 --> 00:11:52.105
&gt;&gt; Alexis Abril: We apologize,

167
00:11:52.105 --> 00:11:55.330
we are definitely picking up the pace.

168
00:11:55.330 --> 00:11:58.840
So now with that small change,
we have next, previous, parent and

169
00:11:58.840 --> 00:11:59.895
children working.

170
00:11:59.895 --> 00:12:00.994
[LAUGH]

