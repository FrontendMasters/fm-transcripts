WEBVTT

1
00:00:00.000 --> 00:00:04.029
[MUSIC]

2
00:00:04.029 --> 00:00:05.970
&gt;&gt; Justin Meyer: So
we were implementing dollar each.

3
00:00:05.970 --> 00:00:08.220
I'm gonna go through my implementation.

4
00:00:08.220 --> 00:00:12.830
And please if you haven't finished,
code along with me.

5
00:00:12.830 --> 00:00:15.020
So here is the dollar each function.

6
00:00:15.020 --> 00:00:19.480
Here is the collection of either it's
an object or something array like.

7
00:00:19.480 --> 00:00:28.410
And the callback when we call with the
with the property or index and the value.

8
00:00:28.410 --> 00:00:34.191
So the first thing I'm going to do
is just check if this is array like.

9
00:00:37.727 --> 00:00:41.926
&gt;&gt; Justin Meyer: [COUGH] If it's array
like I'm going to do a for loop,

10
00:00:41.926 --> 00:00:44.610
the normal for var i = 0.

11
00:00:44.610 --> 00:00:46.870
i is less than collection.length.

12
00:00:46.870 --> 00:00:50.900
And then I'm gonna increment i.

13
00:00:50.900 --> 00:00:56.170
So that's that I'm gonna go through
each item in this collection and

14
00:00:56.170 --> 00:00:58.550
call back callback.

15
00:00:58.550 --> 00:01:02.530
So what I'm gonna do is call back.

16
00:01:02.530 --> 00:01:03.510
That's my callback.

17
00:01:03.510 --> 00:01:04.770
I'm gonna call it.

18
00:01:06.110 --> 00:01:09.840
I'm gonna make it so,
I don't think it matters for this example,

19
00:01:09.840 --> 00:01:15.050
but I wanna make it so,
the this inside this callback

20
00:01:15.050 --> 00:01:19.520
is the value at i.

21
00:01:19.520 --> 00:01:23.517
So I'm gonna write,
var value = collection.

22
00:01:26.642 --> 00:01:28.430
&gt;&gt; Justin Meyer: That's the value there.

23
00:01:28.430 --> 00:01:34.950
So I'm gonna call back this value,
the index as the first argument and

24
00:01:34.950 --> 00:01:41.460
the value as the second argument.

25
00:01:41.460 --> 00:01:49.260
And then if this is not a array
I'm gonna do a for in loop.

26
00:01:56.285 --> 00:02:02.182
&gt;&gt; Justin Meyer: And
I'm going to do a collection.

27
00:02:02.182 --> 00:02:08.307
I'm wanna make sure that this
collection has this property so

28
00:02:08.307 --> 00:02:14.332
I'm gonna do if
(collection.hasownproperty(prop).

29
00:02:14.332 --> 00:02:19.280
Not prop like that, prop like that.

30
00:02:23.450 --> 00:02:25.590
So make sure this collection.

31
00:02:25.590 --> 00:02:28.320
I'm only gonna be iterating through
properties that are directly on

32
00:02:28.320 --> 00:02:31.000
the object, not up it's proto chain.

33
00:02:31.000 --> 00:02:33.453
And as long as that is true,

34
00:02:33.453 --> 00:02:38.691
I'm going to be calling my call
back again with the value.

35
00:02:41.655 --> 00:02:43.908
&gt;&gt; Justin Meyer: At of the prop.

36
00:02:47.166 --> 00:02:51.868
&gt;&gt; Justin Meyer: I'm gonna the call the
value, the prop is the first argument and

37
00:02:51.868 --> 00:02:54.406
the value as the second argument.

38
00:02:54.406 --> 00:02:59.443
And then I'm going to return
the original collection.

39
00:03:03.288 --> 00:03:05.870
&gt;&gt; Speaker 2: Yes,
I corrected one of your templates 128.

40
00:03:05.870 --> 00:03:08.760
&gt;&gt; Justin Meyer: But then it's going
to blow away what I just wrote.

41
00:03:10.790 --> 00:03:13.180
&gt;&gt; Speaker 2: I didn't know that.

42
00:03:13.180 --> 00:03:20.850
&gt;&gt; Justin Meyer: No, yes, okay, and.

43
00:03:20.850 --> 00:03:22.220
I meant yes.

44
00:03:22.220 --> 00:03:31.635
Okay, now it's a good time to
go in there and change it.

45
00:03:31.635 --> 00:03:37.889
&gt;&gt; Speaker 2: You were experimenting,
line 28 you were experimenting.

46
00:03:37.889 --> 00:03:40.787
Yeah, okay So

47
00:03:40.787 --> 00:03:50.446
this was object.prototype.toString.call

48
00:03:50.446 --> 00:03:53.353
(object).

49
00:03:53.353 --> 00:03:54.730
&gt;&gt; Justin Meyer: Okay, cool.

50
00:03:54.730 --> 00:03:56.530
Any questions about this?

51
00:03:56.530 --> 00:03:59.800
&gt;&gt; Speaker 3: Yes You're asking
the question about the syntax of value

52
00:03:59.800 --> 00:04:01.020
property value?

53
00:04:01.020 --> 00:04:02.810
Why is it that way?

54
00:04:02.810 --> 00:04:05.020
&gt;&gt; Justin Meyer: Value property value.

55
00:04:05.020 --> 00:04:09.260
Okay, so what I'm doing is this
a function that was passed in and

56
00:04:09.260 --> 00:04:10.160
this is the cool thing.

57
00:04:10.160 --> 00:04:15.161
Again, so cool about JavaScript is you can
pass functions in, it's cool but abstract.

58
00:04:15.161 --> 00:04:18.840
You can pass functions in and
then you can kind of call them.

59
00:04:18.840 --> 00:04:20.860
We're making our own
iterator function here.

60
00:04:23.310 --> 00:04:28.070
What this is doing, this is a function and
remember there's the call

61
00:04:28.070 --> 00:04:33.310
function on functions
which takes his arguments

62
00:04:33.310 --> 00:04:38.140
the first argument is the this that we
want this function to be called with.

63
00:04:38.140 --> 00:04:42.180
And all of the other arguments are going
to be this going to be the first argument.

64
00:04:42.180 --> 00:04:44.469
There's gonna be a second argument
this function is called with.

65
00:04:46.550 --> 00:04:51.394
Hopefully
&gt;&gt; Justin Meyer: The context

66
00:04:51.394 --> 00:04:55.483
of the call doesn't have to be value for
our exercise and

67
00:04:55.483 --> 00:04:59.860
how we're gonna be using
our own version of jQuery.

68
00:04:59.860 --> 00:05:04.149
I could put null in here or make a default
to window or something like that.

69
00:05:05.340 --> 00:05:10.380
However jQuery does make
the this in its dollar each.

70
00:05:10.380 --> 00:05:12.680
The value of every item.

71
00:05:12.680 --> 00:05:15.370
So we're kind of being closer
with jQuery does here but

72
00:05:15.370 --> 00:05:22.170
it doesn't have to be that way for
what we're doing today.

73
00:05:22.170 --> 00:05:23.929
Yeah.

74
00:05:25.060 --> 00:05:26.040
Any other question?

75
00:05:26.040 --> 00:05:30.170
&gt;&gt; Speaker 3: One question is
the context of call having to be value?

76
00:05:30.170 --> 00:05:32.700
Do you see that question?

77
00:05:32.700 --> 00:05:35.150
&gt;&gt; Justin Meyer: That's what
I was just trying to answer,

78
00:05:35.150 --> 00:05:38.550
the context of call having to be value.

79
00:05:38.550 --> 00:05:41.356
Yeah, we're conforming to jQuery's API.

80
00:05:41.356 --> 00:05:45.350
You don't have to make it in your
exercise for what we're doing today.

81
00:05:45.350 --> 00:05:47.010
Just I have to pass something in here so

82
00:05:47.010 --> 00:05:51.320
I can pass these arguments [COUGH]
cool.

83
00:05:51.320 --> 00:05:53.519
Everybody there, about?

84
00:05:53.519 --> 00:05:58.310
Cool, all right go on to the next one.

85
00:05:58.310 --> 00:05:59.940
I think there's two more.

86
00:06:02.650 --> 00:06:07.470
Here, three more, there's proxy too
I thought, or did we not do proxy.

87
00:06:07.470 --> 00:06:08.790
It's there, I can't read.

88
00:06:08.790 --> 00:06:11.170
&gt;&gt; Speaker 2: We're not quite
done with that one, are we?

89
00:06:11.170 --> 00:06:12.520
&gt;&gt; Justin Meyer: Did I miss something?

90
00:06:12.520 --> 00:06:13.710
Let me run my test.

91
00:06:13.710 --> 00:06:14.210
&gt;&gt; Speaker 2: Yeah.

92
00:06:17.457 --> 00:06:24.570
&gt;&gt; Justin Meyer: Passes, when did I,
when my I thought you had to check

93
00:06:24.570 --> 00:06:29.190
because I was getting problems
with just doing the call.

94
00:06:33.230 --> 00:06:35.460
&gt;&gt; Speaker 2: Most of them were
passing but there was one that.

95
00:06:37.760 --> 00:06:42.798
See it runs nine checks and
like three of them were failing.

96
00:06:42.798 --> 00:06:44.480
&gt;&gt; Justin Meyer: When we start the-
&gt;&gt; Speaker 2: I ran into that

97
00:06:45.500 --> 00:06:48.390
before I returned to collection.

98
00:06:48.390 --> 00:06:53.440
&gt;&gt; Justin Meyer: Okay, I'll start
the next exercise, so to get people

99
00:06:53.440 --> 00:06:58.338
started on that and then I'll help you
with whatever that was, does that work?

100
00:06:58.338 --> 00:06:59.798
Yeah.

101
00:06:59.798 --> 00:07:02.710
&gt;&gt; Speaker 2: Okay, cool.

