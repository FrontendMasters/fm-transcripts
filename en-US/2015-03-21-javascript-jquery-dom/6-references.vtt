WEBVTT

1
00:00:00.000 --> 00:00:03.900
[MUSIC]

2
00:00:03.900 --> 00:00:06.788
&gt;&gt; Justin Meyer: Let's observe
a really simple set up here and

3
00:00:06.788 --> 00:00:09.000
kind of think about this out loud.

4
00:00:09.000 --> 00:00:12.595
Here we have me which is this new object.

5
00:00:12.595 --> 00:00:16.699
It's gonna have a name and
it's gonna be another object,

6
00:00:16.699 --> 00:00:20.430
with a first and a value of string justin.

7
00:00:20.430 --> 00:00:26.783
So me.name.first will be justin and we
have a second declaration which is name.

8
00:00:26.783 --> 00:00:31.838
And this looks like it's just gonna
be a shortcut, name = me.name.

9
00:00:31.838 --> 00:00:37.400
So name, we're gonna reassign it down here
to a new object called first: "alexis".

10
00:00:38.520 --> 00:00:41.385
However, at the end of this
all this whole execution,

11
00:00:41.385 --> 00:00:44.950
me.name.first is still gonna be justin.

12
00:00:47.460 --> 00:00:51.852
Does anyone know or
think they know why this is the way it is?

13
00:00:55.055 --> 00:00:57.647
&gt;&gt; Student: Different scope,
&gt;&gt; Justin Meyer: Different scope,

14
00:00:57.647 --> 00:00:58.380
okay, okay.

15
00:01:01.888 --> 00:01:04.408
&gt;&gt; Justin Meyer: How many people
look at this and say this is crazy,

16
00:01:04.408 --> 00:01:07.410
that slide's wrong, hold on,
let me type into a console.

17
00:01:09.620 --> 00:01:10.680
No, nobody?

18
00:01:10.680 --> 00:01:15.440
All right, we're gonna deep dive and
break into this on why things

19
00:01:15.440 --> 00:01:18.549
are assigned the way they are,
why this actually results the way it does.

20
00:01:20.040 --> 00:01:21.500
With nice graphics and memory.

21
00:01:21.500 --> 00:01:26.680
So, to break this down let's talk about
how things are assigned in memory.

22
00:01:26.680 --> 00:01:31.760
We'll talk a little bit
about reference and

23
00:01:31.760 --> 00:01:34.984
value types if you've ever heard something
by reference, something by value.

24
00:01:34.984 --> 00:01:36.330
We're gonna get a little
bit into that now.

25
00:01:38.080 --> 00:01:42.826
My disclaimer,
we're gonna get into a really simple

26
00:01:42.826 --> 00:01:47.050
implementation of a memory
stack in a browser.

27
00:01:48.248 --> 00:01:52.883
Inspired by v8, but
this is not v8's implementatio,n browsers

28
00:01:52.883 --> 00:01:57.530
today can do really, really smart
things with memory allocation.

29
00:01:57.530 --> 00:02:00.690
But we're gonna pretend this is 1995
when we're inventing something.

30
00:02:01.800 --> 00:02:08.210
So, here we have the statement above var
str equals this primitive string hi.

31
00:02:08.210 --> 00:02:11.320
Here we have our blank memory stack.

32
00:02:11.320 --> 00:02:16.040
And we're gonna use this as a graphical
representation of what we have in memory.

33
00:02:16.040 --> 00:02:18.280
This will be our call object.

34
00:02:18.280 --> 00:02:19.730
Or our global scope.

35
00:02:21.300 --> 00:02:22.670
So this is where we're gonna start,

36
00:02:22.670 --> 00:02:26.320
this is the initial representation
of what we have in memory.

37
00:02:26.320 --> 00:02:28.654
We've opened the browser,
it hasn't really done anything yet,

38
00:02:28.654 --> 00:02:30.660
we haven't executed any code.

39
00:02:30.660 --> 00:02:33.439
The way the parser is
gonna comes through this

40
00:02:33.439 --> 00:02:36.229
is it's gonna see this
primitive string hi.

41
00:02:36.229 --> 00:02:41.220
And the first thing it's gonna do, cuz
it's gonna add it out there in the scope.

42
00:02:41.220 --> 00:02:47.450
We just have this string in memory and
it's gonna give this an address.

43
00:02:47.450 --> 00:02:48.990
So here in this case, we have 2001,

44
00:02:48.990 --> 00:02:52.100
it's gonna say what type it is,
it's type string.

45
00:02:52.100 --> 00:02:56.139
The length perhaps and
then the actual value.

46
00:02:57.160 --> 00:02:58.580
This is where it's gonna be in memory.

47
00:02:58.580 --> 00:03:02.070
But nothing is really linking this up,
it's just something in space.

48
00:03:03.870 --> 00:03:07.430
Then the parts is gonna
come across the var str.

49
00:03:07.430 --> 00:03:12.310
So it's going to create
our str pointer in memory.

50
00:03:12.310 --> 00:03:14.830
That's all it's gonna do,
it's just a pointer pointing to nowhere.

51
00:03:14.830 --> 00:03:21.076
Right now it's technically undefined if
you were somehow able to stop it here.

52
00:03:21.076 --> 00:03:25.220
It's gonna declare a pointer, give its own
address, but that's all it's gonna be.

53
00:03:25.220 --> 00:03:26.410
It's a pointer to nowhere.

54
00:03:28.580 --> 00:03:31.480
Then the real magic happens
with the assignment operator.

55
00:03:31.480 --> 00:03:38.859
The assignment is gonna take that pointer
and now we're gonna have an address.

56
00:03:38.859 --> 00:03:45.361
At 1003 it's gonna say hey,
str points to address 1003.

57
00:03:45.361 --> 00:03:46.830
All right, I'm sorry, 2001.

58
00:03:46.830 --> 00:03:52.110
Which is gonna give us its type,
any arbitrary properties and its value.

59
00:03:53.840 --> 00:03:57.429
This is a really simple implementation
of how primitives are used in memory.

60
00:03:59.170 --> 00:04:00.270
Does that make sense to everybody?

61
00:04:02.460 --> 00:04:06.081
It's a little bit different
way to look at things, but

62
00:04:06.081 --> 00:04:10.028
it really helps understanding
reference versus by value.

63
00:04:10.028 --> 00:04:11.860
Let's take a little bit
more complex example.

64
00:04:12.900 --> 00:04:16.130
So here we have, we're gonna start
with a clean slate at the bottom.

65
00:04:16.130 --> 00:04:20.600
But we have var obj,you wanna create
a new object and we have object.txt.

66
00:04:20.600 --> 00:04:24.578
We're gonna assign some
key to this object and

67
00:04:24.578 --> 00:04:29.000
set its value to some primitive string.

68
00:04:29.000 --> 00:04:33.490
So we're gonna start at the same point and
the parser's gonna come to this curly

69
00:04:33.490 --> 00:04:36.117
brace first and
create a new object in memory.

70
00:04:36.117 --> 00:04:40.320
For our purposes, for mostly slides,
we're gonna denote these with circles.

71
00:04:40.320 --> 00:04:42.850
This will be a new object in memory,
will just be a circle.

72
00:04:44.530 --> 00:04:49.450
And then we're gonna create its address
allocation or say hey, we have an object.

73
00:04:49.450 --> 00:04:51.210
Doesn't have any properties.

74
00:04:51.210 --> 00:04:53.200
This is where it's gonna live in memory.

75
00:04:55.080 --> 00:04:58.337
Soon it come across to
the other side of the coin.

76
00:04:58.337 --> 00:05:00.960
It's gonna say hey, I have a pointer, obj.

77
00:05:02.070 --> 00:05:03.210
Let's create that in our scope.

78
00:05:04.750 --> 00:05:06.934
It's gonna be at address 1002.

79
00:05:06.934 --> 00:05:12.117
And we're gonna assign
it's this 2001 address.

80
00:05:12.117 --> 00:05:15.958
Obj as an empty object that
lives at address 2001.

81
00:05:20.217 --> 00:05:23.241
&gt;&gt; Justin Meyer: Then we're gonna come
down to the next line, parser's gonna come

82
00:05:23.241 --> 00:05:26.490
across to see our primitive string
do the same thing you did before.

83
00:05:26.490 --> 00:05:28.750
Create an empty string or
a primitive string in memory.

84
00:05:30.110 --> 00:05:31.380
Give it its own address.

85
00:05:31.380 --> 00:05:36.662
We have string with this length,
its value down

86
00:05:36.662 --> 00:05:41.559
to 2101, it's gonna come down to obj.

87
00:05:41.559 --> 00:05:48.750
On the second line,
come across to our .assignments.

88
00:05:48.750 --> 00:05:52.180
This is gonna create our new txt pointer

89
00:05:52.180 --> 00:05:55.676
which is gonna point to
our primitive string, hi.

90
00:05:55.676 --> 00:06:01.360
It's gonna increase our properties to one,

91
00:06:01.360 --> 00:06:04.000
we're gonna get a new address assignment.

92
00:06:04.000 --> 00:06:08.410
2003 is our txt pointer and
its address is gonna point at 2101.

93
00:06:08.410 --> 00:06:10.640
This is where txt lives in memory.

94
00:06:12.060 --> 00:06:16.137
So you can think of a hash map in memory
as just a bunch of pointers telling you

95
00:06:16.137 --> 00:06:23.932
where its real values are
&gt;&gt; Justin Meyer: At a very high level.

96
00:06:23.932 --> 00:06:28.860
So far so good?

97
00:06:28.860 --> 00:06:29.820
Sure?
&gt;&gt; Student: A clarification.

98
00:06:29.820 --> 00:06:33.180
So the diagram demonstrates a variable
containing a primitive value,

99
00:06:33.180 --> 00:06:35.850
it uses its own storage space.

100
00:06:35.850 --> 00:06:42.328
So values based on such variable are gonna
be at a different storage location.

101
00:06:42.328 --> 00:06:45.480
&gt;&gt; Justin Meyer: Say that one more time.

102
00:06:45.480 --> 00:06:48.144
That's-
&gt;&gt; Teacher 2: I think what people

103
00:06:48.144 --> 00:06:52.254
are asking for
is clarification on call-object variables,

104
00:06:52.254 --> 00:06:54.393
what's going on there, yeah.

105
00:06:54.393 --> 00:06:55.797
&gt;&gt; Justin Meyer: The call-object
are variables.

106
00:07:02.600 --> 00:07:05.021
&gt;&gt; Justin Meyer: When you're
creating a new string,

107
00:07:05.021 --> 00:07:09.910
I guess maybe I still dont know how
to tell, [INAUDIBLE] that make sense.

108
00:07:09.910 --> 00:07:13.998
&gt;&gt; Teacher 2: Go back to the-
&gt;&gt; Justin Meyer: Let's go back to

109
00:07:13.998 --> 00:07:15.035
the first slide.

110
00:07:15.035 --> 00:07:17.370
&gt;&gt; Teacher 2: To the first slide, yes.

111
00:07:19.480 --> 00:07:26.140
Yeah, right after the string is allocated
but before the str variable is allocated.

112
00:07:26.140 --> 00:07:30.800
Okay, so whenever a page,
like whenever you're running JavaScript.

113
00:07:32.720 --> 00:07:34.085
Anytime a variable is created,

114
00:07:34.085 --> 00:07:38.459
variables really like a pointer,
point to some data somewhere.

115
00:07:40.340 --> 00:07:43.980
All those pointers need to
be captured in something, so

116
00:07:43.980 --> 00:07:48.360
when something else is looking up str,
it looks up hey, what's the value of s?

117
00:07:48.360 --> 00:07:49.900
Where does str point to?

118
00:07:49.900 --> 00:07:52.190
Okay, now I got the value of the string.

119
00:07:52.190 --> 00:07:57.570
So every script tag, you just have
a script tag and has got some code in it.

120
00:07:57.570 --> 00:08:02.916
It runs in a context of some sort but
you guys might call context,

121
00:08:02.916 --> 00:08:06.600
another name for is a call object.

122
00:08:06.600 --> 00:08:10.167
A function has a call-object, but
there's a global call-object and

123
00:08:10.167 --> 00:08:13.275
that's like the variables that
the window has in it, right?

124
00:08:13.275 --> 00:08:18.578
So when a variable is created,
it always goes in the structure, right?

125
00:08:18.578 --> 00:08:26.900
It goes in, we draw it over here
in kind of two dimensional space.

126
00:08:26.900 --> 00:08:32.420
But it's also kind of captured in
memory that we show in here, right?

127
00:08:32.420 --> 00:08:35.790
So we'll see that will
be executed function,

128
00:08:35.790 --> 00:08:37.750
another one of these
things get created to.

129
00:08:37.750 --> 00:08:42.170
We'll understand it better later,
but that's what it's there,

130
00:08:42.170 --> 00:08:47.040
just think of it for
now where variables and their pointers go.

131
00:08:48.040 --> 00:08:53.616
That's what a call-object is and
I'm gonna paste the link

132
00:08:53.616 --> 00:08:59.870
to a natural discussion I had
with someone in the v8 team.

133
00:08:59.870 --> 00:09:05.390
To give you what is actually going on,
but I worked through it.

134
00:09:05.390 --> 00:09:06.802
And this isn't good enough for

135
00:09:06.802 --> 00:09:09.250
presentation that you won't
get the answer wrong.

136
00:09:09.250 --> 00:09:11.430
[LAUGH] For what JavaScript is doing.

137
00:09:11.430 --> 00:09:17.490
But the reality of this is a lot more
complex, but this is a good rule of thumb.

138
00:09:17.490 --> 00:09:21.101
So I'll posts that too.

139
00:09:21.101 --> 00:09:24.749
&gt;&gt; Justin Meyer: Cool?

140
00:09:24.749 --> 00:09:26.729
Right on.

