WEBVTT

1
00:00:00.000 --> 00:00:04.028
[MUSIC]

2
00:00:04.028 --> 00:00:06.955
&gt;&gt; Justin Meyer: The basics of JavaScript,
and this is really just a high level

3
00:00:06.955 --> 00:00:11.090
overview of JavaScript, how it operates
in the browser, that kind of thing.

4
00:00:11.090 --> 00:00:15.742
Our goal, and then we're gonna go into
all of these things, our goal really,

5
00:00:15.742 --> 00:00:18.650
today, is to show you how
the sausage gets made.

6
00:00:18.650 --> 00:00:24.903
My first question is,
to the audience, is this JavaScript?

7
00:00:24.903 --> 00:00:28.242
All right, would you would you
consider this JavaScript code?

8
00:00:28.242 --> 00:00:31.240
Yeah, some people not in their heads, yes.

9
00:00:31.240 --> 00:00:36.350
This is kind of a, it is and
it isn't because the one thing

10
00:00:36.350 --> 00:00:39.850
that a lot of people are confused with
when they begin JavaScript development,

11
00:00:39.850 --> 00:00:43.020
is not understanding the difference
between JavaScript and the DOM.

12
00:00:43.020 --> 00:00:44.950
What we'll see is really,

13
00:00:44.950 --> 00:00:50.230
a lot of this is the DOM, but
the DOM is implemented in JavaScript.

14
00:00:50.230 --> 00:00:51.873
It's the only implementation that matters.

15
00:00:51.873 --> 00:00:56.435
But we'll just kind of break down
what the technologies are and

16
00:00:56.435 --> 00:00:59.460
how they're used in this presentation.

17
00:01:00.940 --> 00:01:02.280
So what is JavaScript?

18
00:01:02.280 --> 00:01:03.628
JavaScript is a language, right?

19
00:01:03.628 --> 00:01:08.574
It's a Turing complete
language that you use to,

20
00:01:08.574 --> 00:01:12.003
essentially, move data around.

21
00:01:12.003 --> 00:01:15.517
And there's a HTML, and that's like what,

22
00:01:15.517 --> 00:01:20.800
when you go to a website,
it's just sending back an HTML document.

23
00:01:20.800 --> 00:01:22.810
Almost that you can think of as a string.

24
00:01:22.810 --> 00:01:26.440
And what kinda hooks these two
worlds together is the DOM.

25
00:01:26.440 --> 00:01:28.360
The DOM doesn't actually have a logo.

26
00:01:28.360 --> 00:01:32.550
People when they hate JavaScript,
they really tend to hate the DOM.

27
00:01:32.550 --> 00:01:39.340
That's why we create a really ugly logo
for it, cuz it doesn't really have a logo.

28
00:01:39.340 --> 00:01:44.840
The DOM is a interface that is
supposed to be language neutral.

29
00:01:44.840 --> 00:01:48.270
So it's like if you had a Ruby program or
you had something written in C.

30
00:01:48.270 --> 00:01:52.970
You could potentially have a DOM API for
it,

31
00:01:52.970 --> 00:01:58.390
that allows you to manipulate HTML, listen
to event handlers and things like that.

32
00:01:58.390 --> 00:02:03.498
But fundamentally, that document
getElementByID is supposed to be

33
00:02:03.498 --> 00:02:09.230
an interface and not actually,
it's just one that JavaScript implements.

34
00:02:09.230 --> 00:02:11.280
So we'll see how these things
relate a little bit more.

35
00:02:13.040 --> 00:02:18.320
So to the best of someone in
the classroom, hopefully's ability.

36
00:02:18.320 --> 00:02:24.030
What do you think happens if I go to
a page helloworld.com/index.html?

37
00:02:24.030 --> 00:02:27.250
It's gonna return back this HTML.

38
00:02:27.250 --> 00:02:29.170
What's gonna happen?

39
00:02:29.170 --> 00:02:31.160
As specific as you can be.

40
00:02:32.730 --> 00:02:36.563
Anybody adventurous enough to do this?

41
00:02:36.563 --> 00:02:38.515
&gt;&gt; Speaker 2: You'll get a pop
up that says, hello world.

42
00:02:38.515 --> 00:02:41.822
&gt;&gt; Justin Meyer: Good, but
can you break it down even further?

43
00:02:41.822 --> 00:02:42.387
&gt;&gt; Speaker 2: No.

44
00:02:42.387 --> 00:02:45.366
&gt;&gt; Justin Meyer: No, so like what I
mean is by breaking down further,

45
00:02:45.366 --> 00:02:49.095
not necessarily what's the outward
appearance to the user, but

46
00:02:49.095 --> 00:02:51.430
what's happening inside the browser?

47
00:02:53.490 --> 00:02:58.715
&gt;&gt; Speaker 3: Well,
the page renders first, and I am assuming

48
00:02:58.715 --> 00:03:04.202
that you get the pop up after
the h tag is displayed?

49
00:03:04.202 --> 00:03:06.734
&gt;&gt; Justin Meyer: The pop up
after the h1 is displayed.

50
00:03:06.734 --> 00:03:08.389
&gt;&gt; Speaker 3: Yeah.

51
00:03:08.389 --> 00:03:10.984
&gt;&gt; Justin Meyer: That's good.

52
00:03:10.984 --> 00:03:16.350
You're thinking the right way about
how things get shown in order.

53
00:03:16.350 --> 00:03:19.600
But the whole situation is a little
bit more complex than that.

54
00:03:19.600 --> 00:03:21.730
So, I'm gonna try to break it down.

55
00:03:21.730 --> 00:03:26.990
And while I'm doing this, apologies,
if these fonts are a little bit too small.

56
00:03:26.990 --> 00:03:30.500
I tried to make them as big as I could
yesterday, but I will talk through it.

57
00:03:30.500 --> 00:03:35.069
So, when the user hits Enter
in the URL to go to that page,

58
00:03:35.069 --> 00:03:40.250
the browser's gonna send an HTTP
request to a server, right?

59
00:03:40.250 --> 00:03:43.686
So it's gonna make a GET request for
content to a server.

60
00:03:43.686 --> 00:03:47.770
And the server is gonna
respond with an HTTP response.

61
00:03:47.770 --> 00:03:52.830
In it it's going to include
the body of the response,

62
00:03:52.830 --> 00:03:55.980
and that's gonna be the HTML,
that like the server's returning with.

63
00:03:55.980 --> 00:04:00.370
Right, that's gonna look like,
in some ways a string, with an HTML head.

64
00:04:00.370 --> 00:04:02.480
Essentially what we showed
on the previous page.

65
00:04:04.250 --> 00:04:09.620
The browser is going to pass it off to,
when I say the DOM,

66
00:04:09.620 --> 00:04:11.834
I mean the document object model.

67
00:04:11.834 --> 00:04:17.790
It's gonna pass it off to
something like webkit, right.

68
00:04:17.790 --> 00:04:21.360
That will start processing the HTML.

69
00:04:22.720 --> 00:04:24.380
It'll parse it and

70
00:04:24.380 --> 00:04:28.940
then it will start building DOM
elements up one by one, right.

71
00:04:28.940 --> 00:04:32.730
So we'll see an HTML element,
it'll build a document element.

72
00:04:32.730 --> 00:04:36.360
Then it'll see a head element and
append a head element to it.

73
00:04:36.360 --> 00:04:41.223
And then it'll see a script tag, and
then it's gonna kick off to the java

74
00:04:41.223 --> 00:04:46.050
script interpreter, okay,
this is something like V8.

75
00:04:46.050 --> 00:04:48.627
All right,
this is what processes JavaScript.

76
00:04:48.627 --> 00:04:53.420
And it's gonna pass that
hello world to JavaScript.

77
00:04:53.420 --> 00:04:55.620
JavaScript is gonna tokenize it.

78
00:04:55.620 --> 00:04:58.559
So it's gonna break it down into words,
essentially.

79
00:04:59.640 --> 00:05:05.131
And then it parses that into
something like a structure like this,

80
00:05:05.131 --> 00:05:07.298
an abstract syntax tree.

81
00:05:07.298 --> 00:05:10.850
All right, this is kind of an intermediate
representation of the code.

82
00:05:12.470 --> 00:05:13.662
And then essentially,

83
00:05:13.662 --> 00:05:17.775
it's gonna do various transformations of
that to essentially something close to

84
00:05:17.775 --> 00:05:21.127
like byte code really something
that the machine can understand.

85
00:05:21.127 --> 00:05:26.560
And then it's actually gonna run the code,
it's gonna look up alert.

86
00:05:26.560 --> 00:05:29.560
And then it's gonna call
alert with hello world.

87
00:05:29.560 --> 00:05:34.979
All right, this is kinda high level
what a JavaScript engine is doing.

88
00:05:34.979 --> 00:05:39.178
When the alert is called with hello world,

89
00:05:39.178 --> 00:05:43.153
it's a pop up is gonna be shown, right?

90
00:05:43.153 --> 00:05:47.068
It used to be this was like a system
call that would actually show a alert,

91
00:05:47.068 --> 00:05:48.630
hello world, on the page.

92
00:05:48.630 --> 00:05:51.630
And it's gonna freeze
JavaScript until the user and

93
00:05:51.630 --> 00:05:55.120
all processing the browser is totally
going to freeze until the user hits OK.

94
00:05:57.760 --> 00:06:00.976
And then it's gonna go away,
as you can see in the top left corner,

95
00:06:00.976 --> 00:06:03.050
I have it going away
when they user hits OK.

96
00:06:03.050 --> 00:06:07.228
And then the DOM is gonna
take over again and

97
00:06:07.228 --> 00:06:13.613
it's going to see the closing script tag,
the closing head tag,

98
00:06:13.613 --> 00:06:19.438
see the body tag has been opened
at a body, then add the h1.

99
00:06:19.438 --> 00:06:20.338
You've got a question?

100
00:06:20.338 --> 00:06:22.042
&gt;&gt; Speaker 4: Yeah a couple
questions from chat.

101
00:06:22.042 --> 00:06:23.932
Will DOM content ready or

102
00:06:23.932 --> 00:06:28.977
DOM content loaded run explicitly
before the script is executed?

103
00:06:28.977 --> 00:06:30.330
&gt;&gt; Justin Meyer: It will not.

104
00:06:30.330 --> 00:06:35.246
So the answer to that is well,
DOM content loaded won't

105
00:06:35.246 --> 00:06:39.961
execute until the end of
the end of the body is hidden.

106
00:06:39.961 --> 00:06:44.084
So all HTML in the document
has been processed.

107
00:06:44.084 --> 00:06:45.751
Is there another one?

108
00:06:48.758 --> 00:06:49.430
&gt;&gt; Justin Meyer: That's it, okay.

109
00:06:50.484 --> 00:06:52.183
&gt;&gt; Speaker 4: Well yeah,
there's a few other.

110
00:06:52.183 --> 00:06:55.346
Besides WebKit,
what are the other DOM creation engines?

111
00:06:55.346 --> 00:06:59.900
&gt;&gt; Justin Meyer: I don't know the names
of them any more, the modern ones.

112
00:06:59.900 --> 00:07:01.891
I'm sure you can look up,
I don't know what there is-

113
00:07:01.891 --> 00:07:03.651
&gt;&gt; Speaker 4: Someone else answered Gecko,

114
00:07:03.651 --> 00:07:05.143
Firefox, Trident, IE.

115
00:07:05.143 --> 00:07:07.519
&gt;&gt; Justin Meyer: Yeah,
Trident was the IE one.

116
00:07:07.519 --> 00:07:08.931
But they have a new one I thought now.

117
00:07:08.931 --> 00:07:15.426
It's not Trident anymore, maybe not.

118
00:07:15.426 --> 00:07:18.925
Any other questions, or
should I continue on?

119
00:07:18.925 --> 00:07:19.493
Yeah?

120
00:07:19.493 --> 00:07:23.150
&gt;&gt; Speaker 5: So when it hits that
script tag it stops, leaves the page.

121
00:07:23.150 --> 00:07:24.074
It's the wrong script.

122
00:07:24.074 --> 00:07:27.077
&gt;&gt; Justin Meyer: It doesn't
necessarily leave the page,

123
00:07:27.077 --> 00:07:30.952
it just stops processing
other elements in the page.

124
00:07:30.952 --> 00:07:31.730
&gt;&gt; Speaker 5: Right.

125
00:07:31.730 --> 00:07:34.532
&gt;&gt; Justin Meyer: So one thing is
commonly said about JavaScript is,

126
00:07:34.532 --> 00:07:36.691
it's kinda single threaded, right?

127
00:07:36.691 --> 00:07:39.240
There's only one thing
happening at the time.

128
00:07:39.240 --> 00:07:42.200
So JavaScript will not keep processing

129
00:07:42.200 --> 00:07:46.990
the body while there's JavaScript being
compiled, essentially, and executed.

130
00:07:48.760 --> 00:07:51.490
&gt;&gt; Speaker 5: Is that why a script tags
are typically at the bottom of the page?

131
00:07:51.490 --> 00:07:52.260
&gt;&gt; Justin Meyer: Is that why what?
&gt;&gt; Speaker 5: Why

132
00:07:52.260 --> 00:07:54.070
they're at the bottom of the page,
typically?

133
00:07:54.070 --> 00:07:54.750
The script tags?

134
00:07:54.750 --> 00:07:56.759
&gt;&gt; Justin Meyer: That's exactly why,
I was just about to say that.

135
00:07:56.759 --> 00:08:00.389
That's why you should typically
bottom load your scripts and

136
00:08:00.389 --> 00:08:02.689
a lot of times people top load your CSS,

137
00:08:02.689 --> 00:08:07.365
because you want all of your elements
built something visible to the user before

138
00:08:07.365 --> 00:08:11.236
you have to spend time loading
JavaScript and that kind of thing.

139
00:08:12.743 --> 00:08:17.812
&gt;&gt; Justin Meyer: Cool, so yeah,
the h1 reproduced and then h1 would show

140
00:08:17.812 --> 00:08:22.580
up in the page and
show hello world, which you expect.

141
00:08:24.900 --> 00:08:29.747
So a little bit about, so that's just how
JavaScript on a kinda high level operates

142
00:08:29.747 --> 00:08:33.227
in the browser, the nature between it and
the DOM engines.

143
00:08:33.227 --> 00:08:36.170
&gt;&gt; Speaker 4: Justin, quick, could you
explain blocking a little bit more,

144
00:08:36.170 --> 00:08:38.251
there's a few questions
in chat about that.

145
00:08:38.251 --> 00:08:43.291
&gt;&gt; Justin Meyer: Sure, blocking
isn't blocking, like you mean that

146
00:08:43.291 --> 00:08:50.014
the JavaScript just blocks any other
execution happening on the page?

147
00:08:50.014 --> 00:08:52.796
&gt;&gt; Speaker 4: Yeah,
I think that's what, yeah.

148
00:08:52.796 --> 00:08:55.415
&gt;&gt; Justin Meyer: So
I'll try to rephrase that,

149
00:08:55.415 --> 00:08:59.152
I'm not sure what about
it I could explain.

150
00:08:59.152 --> 00:09:02.850
&gt;&gt; Speaker 4: [INAUDIBLE]
&gt;&gt; Justin Meyer: Okay.

151
00:09:02.850 --> 00:09:09.458
So again, until alert, oops,
stepped on my cord here.

152
00:09:09.458 --> 00:09:14.725
So if we had an alert and
then anything else after it,

153
00:09:14.725 --> 00:09:22.171
the the browser won't run JavaScript
code until the user has clicked OK.

154
00:09:22.171 --> 00:09:28.836
Essentially the code that's running
is hung up until the user hits OK and

155
00:09:28.836 --> 00:09:33.220
then it starts running
JavaScript code again.

156
00:09:35.790 --> 00:09:37.760
Hopefully that answers their question.

157
00:09:37.760 --> 00:09:42.593
So just kind of interestingly,
there's not really another way you can you

158
00:09:42.593 --> 00:09:45.828
can do something like this,
as far as I'm aware.

159
00:09:45.828 --> 00:09:50.904
But if I do alert foo and
then I have just something like,

160
00:09:50.904 --> 00:09:55.340
let's have it even throw an error or
something.

161
00:09:59.160 --> 00:10:02.176
Until, if this code is all running here,

162
00:10:02.176 --> 00:10:06.755
I won't throw the error until
this code has finished running.

163
00:10:06.755 --> 00:10:10.182
Until the user actually,
not only this code is finished running,

164
00:10:10.182 --> 00:10:12.946
code kinda finishes running
when the alert is shown.

165
00:10:12.946 --> 00:10:18.880
But until the user actually hits OK,
the next line will not be ran.

