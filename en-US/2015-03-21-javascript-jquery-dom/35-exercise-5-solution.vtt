WEBVTT

1
00:00:00.221 --> 00:00:03.831
[MUSIC]

2
00:00:03.831 --> 00:00:07.849
&gt;&gt; Justin Meyer: All right so I'm gonna
go through the answer to INSTANCEOF.

3
00:00:07.849 --> 00:00:09.689
This is our last exercise for
this kind of stuff.

4
00:00:09.689 --> 00:00:15.652
It actually gets mostly, almost all,
easier than what we just did for

5
00:00:15.652 --> 00:00:20.020
the end of, for
the rest of today and for tomorrow.

6
00:00:20.020 --> 00:00:23.120
So we were just doing instance of,
we wanted to be able to say,

7
00:00:23.120 --> 00:00:29.050
hey is p an instance of person or is

8
00:00:29.050 --> 00:00:34.760
p an instance of object,
instance of person or instance of object.

9
00:00:34.760 --> 00:00:38.030
And the way to do this is start with p.

10
00:00:38.030 --> 00:00:42.430
And just check when, or
person, check when it's

11
00:00:43.550 --> 00:00:48.890
proto property points to
the constructor function's prototype.

12
00:00:48.890 --> 00:00:49.528
So I'll just check.

13
00:00:49.528 --> 00:00:53.703
Okay, is person.proto
equal to person.prototype,

14
00:00:53.703 --> 00:00:57.360
p.proto equal to person.prototype.

15
00:00:57.360 --> 00:01:00.220
If I were doing for object,
I would first check that.

16
00:01:00.220 --> 00:01:04.610
And then I would walk up again to this,
this is a proto,

17
00:01:04.610 --> 00:01:08.480
the proto again,
to see if it's equal to object.prototype.

18
00:01:08.480 --> 00:01:10.630
So let's see this in action.

19
00:01:13.020 --> 00:01:16.175
So the first thing I'm gonna
do is just check if objects

20
00:01:20.299 --> 00:01:23.712
&gt;&gt; Justin Meyer: .__proto is equal to

21
00:01:23.712 --> 00:01:31.558
constructor.prototype.
&gt;&gt; Justin Meyer: All right,

22
00:01:31.558 --> 00:01:34.200
and if it is, I wanna return true.

23
00:01:34.200 --> 00:01:39.905
So this would work if
I was doing something

24
00:01:39.905 --> 00:01:44.144
like instance of p and person.

25
00:01:44.144 --> 00:01:47.559
All right, cuz I'm just gonna, again,

26
00:01:47.559 --> 00:01:52.940
check p proto is that equal to
person.prototype, return true.

27
00:01:52.940 --> 00:01:55.050
Now I wanna make it work.

28
00:01:55.050 --> 00:01:59.660
So if I do, is p an instance of object.

29
00:02:03.580 --> 00:02:06.440
So to do that,
I'm gonna use a little bit of recursion.

30
00:02:07.980 --> 00:02:12.767
I'm only gonna do it if there is a proto
property, to make sure that I haven't

31
00:02:12.767 --> 00:02:17.499
gotten to the, I didn't draw the proto
of this guy but he is, it would be no.

32
00:02:24.885 --> 00:02:27.095
&gt;&gt; Justin Meyer: If there is a object

33
00:02:27.095 --> 00:02:31.931
proto, I'm just gonna return the result

34
00:02:31.931 --> 00:02:36.628
of instance of pass at the object proto,

35
00:02:36.628 --> 00:02:41.200
and pass at the constructor function.

36
00:02:43.000 --> 00:02:46.580
And finally I'll just do an else, cuz
that means we've gotten to the very top.

37
00:02:47.660 --> 00:02:48.480
And return false.

38
00:02:51.650 --> 00:03:00.870
Any questions about this?
&gt;&gt; Justin Meyer: Cool.

39
00:03:00.870 --> 00:03:05.502
All right so I'm gonna do kind of
a little high level overview, but

40
00:03:05.502 --> 00:03:09.057
try to do it from a different
way of just this kinda,

41
00:03:09.057 --> 00:03:13.056
the dot operator, proto property,
and the prototype.

42
00:03:13.056 --> 00:03:20.250
So,
&gt;&gt; Justin Meyer: Let

43
00:03:20.250 --> 00:03:21.690
me show something kind of interesting.

44
00:03:21.690 --> 00:03:24.830
Again, JavaScript is
a language of conventions.

45
00:03:24.830 --> 00:03:27.800
You've all created an object like this,
object equals, and

46
00:03:27.800 --> 00:03:32.350
you give it some name, property,
and I'm gonna put in foo.

47
00:03:33.710 --> 00:03:42.140
And I'm sure all of you have seen
object.name and gotten Foo back.

48
00:03:42.140 --> 00:03:45.150
Equal's an operator and
the dot is an operator, right?

49
00:03:45.150 --> 00:03:49.160
These things are part of the language
that do something given some data.

50
00:03:50.390 --> 00:03:55.330
The dot operator you've all probably
seen it used in this fashion, over,

51
00:03:55.330 --> 00:03:56.760
over and over again.

52
00:03:56.760 --> 00:04:02.000
But you could also do something like this,
I can create an object with a proto

53
00:04:02.000 --> 00:04:07.330
property that points to another object
with a name property that is bar.

54
00:04:09.640 --> 00:04:15.160
I could just, and then if I were to write
object.name, this would give me bar.

55
00:04:17.580 --> 00:04:20.890
This is all that the dot
operator is doing.

56
00:04:20.890 --> 00:04:24.720
It is just saying,
look at on the current object for

57
00:04:24.720 --> 00:04:29.780
a name property, if it doesnâ€™t exist,
look if it has a prototype,

58
00:04:29.780 --> 00:04:34.680
a proto property, look there for
the name property.

59
00:04:34.680 --> 00:04:37.190
And I could just go as deep as I wanted.

60
00:04:37.190 --> 00:04:39.100
I could just keep going.

61
00:04:39.100 --> 00:04:42.856
Proto,
&gt;&gt; Justin Meyer: And

62
00:04:42.856 --> 00:04:46.010
then put in the name property,
and I would still get bar.

63
00:04:46.010 --> 00:04:50.817
Now one thing you don't wanna do and
[LAUGH] they'll actually

64
00:04:50.817 --> 00:04:55.998
warn you if you're doing it,
if I were to do something like this,

65
00:04:55.998 --> 00:04:59.500
object.proto.proto is equal to object.

66
00:05:04.060 --> 00:05:06.220
I don't know if which level
of proto I'm at there,

67
00:05:06.220 --> 00:05:10.150
but if I were to make a cycle with
protos and try to look up a property,

68
00:05:10.150 --> 00:05:14.780
I think browsers, these used to crash
browsers if you try to read the property.

69
00:05:14.780 --> 00:05:17.470
But now, I think,
most of them detect cycles and

70
00:05:17.470 --> 00:05:20.820
will not let you,
will throw an error if you try to do this.

71
00:05:20.820 --> 00:05:24.830
But just to show, it's just,
there's just this magic property.

72
00:05:24.830 --> 00:05:26.610
And it, the .operator just follows it.

73
00:05:26.610 --> 00:05:28.400
That's as simple as it is.

74
00:05:31.300 --> 00:05:33.760
You might be,
the next question might be, why?

75
00:05:33.760 --> 00:05:34.640
Why does it do this?

76
00:05:34.640 --> 00:05:40.710
Why is there this special proto property
that works with these dot operators,

77
00:05:40.710 --> 00:05:43.680
to make this crazy magic happen?

78
00:05:43.680 --> 00:05:47.520
The reason is,
is because we like, as humans,

79
00:05:47.520 --> 00:05:49.310
typically object oriented programming.

80
00:05:49.310 --> 00:05:55.719
I wanna be able to create a animal and
I wanna be able call eats on it.

81
00:05:55.719 --> 00:05:59.125
And I might want to be able to
create a million animals and

82
00:05:59.125 --> 00:06:01.970
be able call eats on all of them.

83
00:06:01.970 --> 00:06:06.750
But I don't want to manually
assign an eats function

84
00:06:06.750 --> 00:06:11.000
on every single time a new animal
instance is called, right?

85
00:06:11.000 --> 00:06:16.710
So what I mean is, I could theoretically,
create an animal kind of like this.

86
00:06:16.710 --> 00:06:21.180
I could create makeAnimal function.
&gt;&gt; [NOISE]

87
00:06:23.228 --> 00:06:24.369
&gt;&gt; Justin Meyer: And that could take

88
00:06:24.369 --> 00:06:25.880
the name of the animal.

89
00:06:25.880 --> 00:06:32.030
And I could do something like this,
return, I gonna do var animal.

90
00:06:32.030 --> 00:06:35.877
Make an object with a name as the name,

91
00:06:35.877 --> 00:06:40.223
and then I'm just assign it's function.

92
00:06:49.156 --> 00:06:50.363
&gt;&gt; Justin Meyer: Now if I were to call

93
00:06:50.363 --> 00:06:54.560
this makeAnimal.
&gt;&gt; Justin Meyer: Let me put

94
00:06:54.560 --> 00:06:58.640
some semicolon, so it doesn't look
like I'm doing stuff horribly wrong.

95
00:06:58.640 --> 00:07:04.110
If I were to call this makeAnimal and
make an animal, this animal would

96
00:07:04.110 --> 00:07:10.790
behave just like the other animal

97
00:07:10.790 --> 00:07:16.640
objects that we were kinda showing created
with the new, if I was doing new animal.

98
00:07:16.640 --> 00:07:19.310
So I could do animal that eats,
and that would give me

99
00:07:20.610 --> 00:07:24.840
eating food or something like that.

100
00:07:27.770 --> 00:07:29.310
But who can kinda see the problem here?

101
00:07:29.310 --> 00:07:33.860
Kinda already mentioned
it's performance related.

102
00:07:35.670 --> 00:07:39.730
The performance problem is that
every time makeAnimal is called,

103
00:07:41.040 --> 00:07:43.280
it's got a sign, an eats function.

104
00:07:43.280 --> 00:07:47.530
In this case, it's actually recreating
a function every single time.

105
00:07:47.530 --> 00:07:51.680
Of course, we could improve that by
doing something like animalEats and

106
00:07:51.680 --> 00:07:53.410
saving the function.

107
00:07:54.810 --> 00:07:58.430
So we're not recreating
the function every time, but

108
00:07:58.430 --> 00:08:00.880
we're still setting
a property every single time.

109
00:08:00.880 --> 00:08:05.600
And this problem would just get worse and
worse as we added more properties.

110
00:08:05.600 --> 00:08:08.460
Eats, speaks, so

111
00:08:08.460 --> 00:08:14.040
this might be some other function that
we might have defined up here, right?

112
00:08:14.040 --> 00:08:18.230
As we keep adding functions,
we have to assign more and

113
00:08:18.230 --> 00:08:21.700
more properties every time
we want to make an animal.

114
00:08:24.190 --> 00:08:31.320
What the proto allows us to do, is look
on directly on our object first but

115
00:08:31.320 --> 00:08:35.640
then look somewhere else for
potentially shared properties.

116
00:08:37.700 --> 00:08:40.700
And when you create a new animal instance,
as you already saw,

117
00:08:40.700 --> 00:08:44.460
it only assigns one proto property.

118
00:08:44.460 --> 00:08:47.340
There's only one property assignment,
instead of a property assignment for

119
00:08:47.340 --> 00:08:51.330
every single function you
want on your instance,

120
00:08:51.330 --> 00:08:53.030
your little objects that
you want to create.

121
00:08:54.360 --> 00:09:01.540
So what I mean is, if I have an animal.
&gt;&gt; Justin Meyer: As a function.

122
00:09:02.760 --> 00:09:03.923
That does the same kinda thing,

123
00:09:03.923 --> 00:09:06.090
just it's just gonna do
the this.name equals name thing.

124
00:09:08.920 --> 00:09:17.740
And I had the same animal that
prototype.eats as a function.

125
00:09:17.740 --> 00:09:22.306
And then I also had a speaks.

126
00:09:29.107 --> 00:09:29.904
&gt;&gt; Justin Meyer: Okay, so

127
00:09:29.904 --> 00:09:36.089
instead of calling makeAnimal,
if I were to do animal equals new Animal,

128
00:09:36.089 --> 00:09:41.176
what this does is it creates
a new animal instance in memory,

129
00:09:41.176 --> 00:09:48.330
which is pretty much what this is doing
in assigning its name property to name.

130
00:09:48.330 --> 00:09:52.525
But instead of having to go through and
assign an eats property and

131
00:09:52.525 --> 00:09:57.959
a speaks property, it just assigns one
proto property to animal, that prototype.

132
00:09:57.959 --> 00:10:02.379
And because the dot operator
is already wired up to look

133
00:10:02.379 --> 00:10:06.813
on the proto chain for
these methods, it will find it.

134
00:10:06.813 --> 00:10:12.282
And this way I can create lots and
lots of objects

135
00:10:12.282 --> 00:10:17.206
very quickly, doing very minimal work and

136
00:10:17.206 --> 00:10:22.698
delay the and, essentially,
delay the cost.

137
00:10:22.698 --> 00:10:27.158
Because essentially what we're saying is,
look up is going to be a tiny bit more

138
00:10:27.158 --> 00:10:30.421
expensive for animal dot,
this kind of animal that eats,

139
00:10:30.421 --> 00:10:34.967
versus this kind of animal dot eats,
because there's a walk up the protochain.

140
00:10:34.967 --> 00:10:39.125
But we're making that trade, because
creating a million of them is gonna be so

141
00:10:39.125 --> 00:10:40.870
much faster.

142
00:10:40.870 --> 00:10:45.440
So that's why there's this proto thing and
why it walks up and

143
00:10:45.440 --> 00:10:47.840
tries to find these shared properties.

144
00:10:47.840 --> 00:10:51.990
It's cuz you don't want to make
every object have a copy of

145
00:10:51.990 --> 00:10:53.930
every single property.

146
00:10:53.930 --> 00:10:55.470
It's a performance thing.

147
00:10:55.470 --> 00:10:58.680
Hopefully that gives you
some better context and

148
00:10:58.680 --> 00:11:00.660
understanding of why it is this way.

