WEBVTT

1
00:00:00.000 --> 00:00:04.130
[MUSIC]

2
00:00:04.130 --> 00:00:07.436
&gt;&gt; Justin Meyer: Most people
now are relatively familiar but

3
00:00:07.436 --> 00:00:10.210
know these facts about JavaScript.

4
00:00:10.210 --> 00:00:15.110
But just to clear up cuz there's
a lot of misconceptions about it,

5
00:00:15.110 --> 00:00:16.850
at least a couple of years ago.

6
00:00:16.850 --> 00:00:19.100
JavaScript is not Java even
though it looks the same.

7
00:00:19.100 --> 00:00:22.800
JavaScript is a real programming language,
people would say it's like a toy language.

8
00:00:22.800 --> 00:00:25.322
No, there's big, big, big applications and

9
00:00:25.322 --> 00:00:27.790
big software has been
written in JavaScript.

10
00:00:29.250 --> 00:00:32.518
JavaScript is kind of a synonym for
ECMAScript.

11
00:00:32.518 --> 00:00:37.160
ECMAScript is a standard and
JavaScript is like a trademark name.

12
00:00:37.160 --> 00:00:38.930
But if you say ECMAScript,

13
00:00:38.930 --> 00:00:44.410
JavaScript i.e this version of JavaScript
or Microsoft's version is called JScript.

14
00:00:44.410 --> 00:00:45.580
These things are all synonyms.

15
00:00:45.580 --> 00:00:47.030
If you see one.

16
00:00:47.030 --> 00:00:48.630
They all mean about the same thing.

17
00:00:48.630 --> 00:00:51.850
Typically if you hear some talk about
ECMAScript, it means like a standard.

18
00:00:51.850 --> 00:00:55.530
That's coming out for all the different
browser vendors to implement.

19
00:00:55.530 --> 00:00:58.641
And then JavaScript again is not the DOM,
right?

20
00:00:58.641 --> 00:01:02.590
Although they're kinda made for
each other at this point.

21
00:01:05.160 --> 00:01:07.710
Okay, so
some things about JavaScript the language,

22
00:01:07.710 --> 00:01:10.380
that separate it from other languages.

23
00:01:10.380 --> 00:01:13.990
And these are the things that I actually
I really love about the language.

24
00:01:13.990 --> 00:01:15.850
The first is JavaScript is dynamic.

25
00:01:17.110 --> 00:01:21.248
So, when you have most other language
like compiled language, something like C,

26
00:01:21.248 --> 00:01:28.940
what happens is you'll write your C
code and you have to compile it, and

27
00:01:28.940 --> 00:01:33.800
what a compiler will do is read that code
and kind of convert it into byte code.

28
00:01:33.800 --> 00:01:38.970
And then when you execute that, it's just
that byte code is loaded into memory,

29
00:01:38.970 --> 00:01:42.530
and then the computer just goes
instruction, instruction down in memory.

30
00:01:42.530 --> 00:01:45.170
And it's just reading through memory and

31
00:01:45.170 --> 00:01:49.020
operating on some other memory somewhere
else inside the computer, right?

32
00:01:49.020 --> 00:01:54.091
There's a block of memory for code, and
there's a block of memory for everything

33
00:01:54.091 --> 00:01:59.234
else that the application might use.
&gt;&gt; Justin Meyer: JavaScript and

34
00:01:59.234 --> 00:02:01.337
dynamic languages like it,

35
00:02:01.337 --> 00:02:06.340
are amazing because in some ways
you're coding your code, right?

36
00:02:06.340 --> 00:02:08.970
With JavaScript or like what jQuery does,

37
00:02:08.970 --> 00:02:14.960
jQuery might have a property map like
this to create its val in HTML function.

38
00:02:14.960 --> 00:02:18.736
And then might iterate
through those properties,

39
00:02:18.736 --> 00:02:21.558
generating its val in HTML function.

40
00:02:21.558 --> 00:02:26.313
So here I'm I'm going through
every property in propMap, and

41
00:02:26.313 --> 00:02:31.247
I'm setting $.prototype to
essentially be equal to a function

42
00:02:31.247 --> 00:02:35.567
that will call on whatever this is,
value or innerHTML.

43
00:02:35.567 --> 00:02:38.830
This isn't exactly what jQuery does,
but it's similar.

44
00:02:38.830 --> 00:02:42.170
You'll see this code a lot in
a lot of different libraries,

45
00:02:42.170 --> 00:02:47.630
because you're actually building
the structures using the language,

46
00:02:47.630 --> 00:02:50.750
which you don't really see
in compiled languages.

47
00:02:51.790 --> 00:02:53.570
I really love this nature.

48
00:02:53.570 --> 00:02:56.890
So in JavaScript, if you were to
look at when the program is running,

49
00:02:56.890 --> 00:03:01.210
there is no distinction between
the memory that's used for

50
00:03:01.210 --> 00:03:03.960
code and the memory that's used for data.

51
00:03:05.580 --> 00:03:07.810
That's kinda what dynamic
languages give you.

52
00:03:10.140 --> 00:03:12.278
JavaScript is also weakly typed,

53
00:03:12.278 --> 00:03:16.996
hopefully most people are kind of
familiar with this aspect of JavaScript,

54
00:03:16.996 --> 00:03:21.139
which is sometimes a bitter pill but
also and sometimes very nice.

55
00:03:21.139 --> 00:03:24.281
Is that you can create a variable and

56
00:03:24.281 --> 00:03:29.219
assign it to any type of thing
without an error, right?

57
00:03:29.219 --> 00:03:34.892
It's because you can think of data in
JavaScript as instead of just raw data,

58
00:03:34.892 --> 00:03:40.520
instead of just a number in memory,
JavaScript data looks like.

59
00:03:40.520 --> 00:03:43.460
It's like a little packet it
has additional information.

60
00:03:43.460 --> 00:03:45.970
This data is a number in memory and

61
00:03:45.970 --> 00:03:49.980
it has this data,
here's the number associated with it.

62
00:03:49.980 --> 00:03:55.644
So type travels with a value and
not with a variable.

63
00:03:55.644 --> 00:03:58.350
And we'll see what this
means in a little bit.

64
00:03:58.350 --> 00:04:01.340
We wanna break all these things
down actually quite a bit.

65
00:04:01.340 --> 00:04:05.680
And then JavaScript has
first class functions.

66
00:04:05.680 --> 00:04:09.740
This is another one of my favorite
features about the language.

67
00:04:09.740 --> 00:04:14.080
Anything you can do with an object in
JavaScript, you can do with a function.

68
00:04:14.080 --> 00:04:17.230
So I can create a function.

69
00:04:18.250 --> 00:04:21.850
I can return a function
from within a function.

70
00:04:23.340 --> 00:04:25.899
And I can pass functions as arguments.

71
00:04:28.340 --> 00:04:30.050
And then I can of course,

72
00:04:30.050 --> 00:04:34.520
at the very end call a function,
which is what most languages give you.

73
00:04:34.520 --> 00:04:38.130
This is dynamically creating a language,
it's a little bit different than it;s been

74
00:04:38.130 --> 00:04:44.953
statically created.
&gt;&gt; Justin Meyer: And then finally,

75
00:04:44.953 --> 00:04:49.420
JavaScript is prototype based and
we're gonna do a whole like hour on this.

76
00:04:49.420 --> 00:04:52.892
And really get to understand
what this is doing.

77
00:04:52.892 --> 00:04:56.936
I'm not gonna go into
it in detail right now.

78
00:04:56.936 --> 00:05:02.095
So in summary, the DOM is a JavaScript

79
00:05:02.095 --> 00:05:09.040
representation of the HTML and
a browser, right?

80
00:05:09.040 --> 00:05:11.970
It's there for
you to kind of manipulate an HTML page,

81
00:05:11.970 --> 00:05:13.880
change what's going on
inside of a browser.

82
00:05:16.440 --> 00:05:19.010
It's an interface provided to JavaScript.

83
00:05:19.010 --> 00:05:22.520
And then JavaScript itself is
a language with all of these kind of

84
00:05:22.520 --> 00:05:27.150
interesting quirks that we'll spend
today really deep diving into.

