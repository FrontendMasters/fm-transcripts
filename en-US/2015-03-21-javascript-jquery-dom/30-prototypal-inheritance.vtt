WEBVTT

1
00:00:00.000 --> 00:00:03.839
[MUSIC]

2
00:00:03.839 --> 00:00:08.110
&gt;&gt; Alexis Abril: So let's take
a little bit more complex example.

3
00:00:08.110 --> 00:00:10.525
Okay, if we wanna create
new animals that's cool.

4
00:00:10.525 --> 00:00:12.880
I wanna create new animal, give it a name.

5
00:00:12.880 --> 00:00:16.633
But we probably want more
abstracted layers, right?

6
00:00:16.633 --> 00:00:25.630
If you have a shape, maybe you want
a parallelogram to inherit from shape.

7
00:00:25.630 --> 00:00:28.460
And then maybe you want square
to inherit from parallelogram.

8
00:00:28.460 --> 00:00:30.740
That if you want many,
many more constructs,

9
00:00:30.740 --> 00:00:33.970
many more layers,
we can do that a little bit differently.

10
00:00:33.970 --> 00:00:36.910
Well, it's the same concept but
more times.

11
00:00:36.910 --> 00:00:41.330
So here's an example
inheritance ladder if you will.

12
00:00:42.510 --> 00:00:45.430
We have animal as our base construct.

13
00:00:45.430 --> 00:00:48.170
We have chordates,
which will inherit from animal, and

14
00:00:48.170 --> 00:00:50.500
we have mammals which
inherit from the chordates.

15
00:00:50.500 --> 00:00:53.380
This is the structure that we
wanna create conceptually.

16
00:00:53.380 --> 00:00:54.370
We're gonna show you how to do that.

17
00:00:54.370 --> 00:00:59.910
So the differences between
the three things, all animals eat,

18
00:00:59.910 --> 00:01:02.510
chordates are a subclass of animals.

19
00:01:02.510 --> 00:01:06.030
They will all have spines and
mammals are subclass chordates.

20
00:01:06.030 --> 00:01:06.780
They will all have hair.

21
00:01:09.320 --> 00:01:14.010
What this is gonna do,
it's gonna look something like this.

22
00:01:14.010 --> 00:01:18.820
We're gonna have our mammal function,
which will have a prototype,

23
00:01:18.820 --> 00:01:22.020
pointing to this object in space
right now, this new object.

24
00:01:23.210 --> 00:01:26.087
Chordate will have the same thing and
so will animal.

25
00:01:26.087 --> 00:01:27.111
They will all have,

26
00:01:27.111 --> 00:01:30.793
they will be constructor functions
with their respective prototypes.

27
00:01:30.793 --> 00:01:33.614
Now this doesn't set up any
kind of link between them yet,

28
00:01:33.614 --> 00:01:34.831
we have to do that for us.

29
00:01:34.831 --> 00:01:36.889
The part that we care about is,

30
00:01:36.889 --> 00:01:42.050
each object's proto property should
point to where we want to inherit from.

31
00:01:44.370 --> 00:01:45.730
If we don't set this part up,

32
00:01:45.730 --> 00:01:48.440
everybody's proto property
would point to the base object.

33
00:01:48.440 --> 00:01:50.980
And we wouldn't really get
any kind of cool inheritance.

34
00:01:50.980 --> 00:01:56.150
This is the chain we want to that way
when something comes to a new mammal and

35
00:01:56.150 --> 00:02:01.000
we wanna say, hey I want you to eat
something, it's gonna walk up the proto

36
00:02:01.000 --> 00:02:04.400
chain until it hits animals prototype and
then invoke the eat function.

37
00:02:08.220 --> 00:02:10.510
Okay that's a cool graphic, but
what does this really look like.

38
00:02:11.830 --> 00:02:17.600
So let's set up our proto
chain in JavaScript.

39
00:02:17.600 --> 00:02:19.426
We have our animal constructor.

40
00:02:19.426 --> 00:02:20.370
We're just gonna set the name,

41
00:02:20.370 --> 00:02:23.760
and we're to give ourself
our prototype method, eats.

42
00:02:25.560 --> 00:02:29.146
Then we're gonna say,
chordate is a function.

43
00:02:29.146 --> 00:02:33.940
This is gonna create this little spot
in memory down below, not linked yet.

44
00:02:33.940 --> 00:02:35.190
It's not doing anything yet.

45
00:02:35.190 --> 00:02:36.990
It's just a new constructor function.

46
00:02:36.990 --> 00:02:40.310
And we're gonna say,
prototype equals new animal.

47
00:02:40.310 --> 00:02:45.320
This is what's gonna link
our prototype to animal.

48
00:02:45.320 --> 00:02:47.960
We've created a new object in memory

49
00:02:47.960 --> 00:02:52.810
with its proto property
pointed to animals prototype.

50
00:02:52.810 --> 00:02:56.800
And they we're gonna point our
proto pointer to that new object.

51
00:02:58.664 --> 00:03:01.000
It's gonna create this type of link for
us.

52
00:03:01.000 --> 00:03:05.630
And then we're going to give
ourselves a has spine property,

53
00:03:05.630 --> 00:03:06.608
which will just say true.

54
00:03:06.608 --> 00:03:09.660
And we're gonna do the same
thing again for mammal.

55
00:03:09.660 --> 00:03:11.440
We're gonna create our
constructor function.

56
00:03:12.570 --> 00:03:15.430
Have a prototype with a new chordate,
this will link the two.

57
00:03:15.430 --> 00:03:19.940
And then we're gonna give it,
it's own has hair equals true.

58
00:03:19.940 --> 00:03:25.340
So that way when we finally come along and
say something like, m equals new

59
00:03:25.340 --> 00:03:30.340
mammal dog, cuz that's a really
clever name for a mammal, is dog.

60
00:03:31.740 --> 00:03:35.240
We're gonna create a new object
with its proto property.

61
00:03:35.240 --> 00:03:39.270
And m is gonna be able to have
all the properties that we have.

62
00:03:39.270 --> 00:03:45.440
Has hair, has spine, and the eats
function will all be accessible on m,

63
00:03:45.440 --> 00:03:47.790
because we've set up our inheritance tree.

64
00:03:51.240 --> 00:03:55.675
&gt;&gt; Speaker 2: I'm a little confused why
you have to use a prototype for eats,

65
00:03:55.675 --> 00:03:57.861
when you define eats up there.

66
00:03:57.861 --> 00:04:03.224
Wouldn't eats be inherited by
chordate when you set it up?

67
00:04:03.224 --> 00:04:06.037
&gt;&gt; Alexis Abril: Would eats
be inherited by chordate.

68
00:04:06.037 --> 00:04:11.138
So how would you,
how would you write this otherwise?

69
00:04:11.138 --> 00:04:15.381
&gt;&gt; Speaker 2: Well if you just removed
prototype from an Animal.prototype.eats

70
00:04:15.381 --> 00:04:15.895
&gt;&gt; Alexis Abril: So you're saying

71
00:04:15.895 --> 00:04:17.900
animal.eat equals function,
iss that what you are thinking?

72
00:04:17.900 --> 00:04:19.540
&gt;&gt; Speaker 2: Right,
when you set up chordate,

73
00:04:19.540 --> 00:04:22.315
would it automatically inherit eats or-
&gt;&gt; Alexis Abril: Let's think about

74
00:04:22.315 --> 00:04:23.320
that for a second.

75
00:04:23.320 --> 00:04:30.010
So here's our animal function, and if you
wanna say animal.eats where would eats go?

76
00:04:30.010 --> 00:04:32.100
It would go right here, right?

77
00:04:32.100 --> 00:04:34.670
It'd be animal, and
then a pointer to eats.

78
00:04:34.670 --> 00:04:38.780
But this is down on this function, so when
chordates or anything else, tries to walk

79
00:04:38.780 --> 00:04:43.080
up the inheritance tree for eats,
it's gonna go to each proto object but

80
00:04:43.080 --> 00:04:45.680
it's not going to go down to constructor
function and look for things here.

81
00:04:45.680 --> 00:04:47.090
It's going to go here.

82
00:04:47.090 --> 00:04:48.660
This doesn't have eats.

83
00:04:48.660 --> 00:04:50.960
Go to the base object,
it doesn't have eats.

84
00:04:50.960 --> 00:04:54.514
So it's gonna return that type error,
method not found or

85
00:04:54.514 --> 00:04:56.970
undefined, because we've
hidden it down here.

86
00:04:56.970 --> 00:04:58.270
&gt;&gt; Speaker 2: Okay.

87
00:04:58.270 --> 00:04:59.610
&gt;&gt; Alexis Abril: Now sometimes
you do wanna have methods or

88
00:04:59.610 --> 00:05:01.110
properties on the function themselves,

89
00:05:01.110 --> 00:05:04.580
if you're building some kind of helper
library, that you're using internally, but

90
00:05:04.580 --> 00:05:07.510
you have to have a very specific
reason for this kind of stuff.

91
00:05:07.510 --> 00:05:13.624
This is more what we would consider
a static method, not in the strict sense,

92
00:05:13.624 --> 00:05:19.268
but you can think of it conceptually
as this is on instances of objects,

93
00:05:19.268 --> 00:05:24.654
instances of animals, and
this is on animal, capital A, itself.

94
00:05:24.654 --> 00:05:28.125
Does that make sense?

95
00:05:28.125 --> 00:05:29.316
Cool, good question.

96
00:05:31.422 --> 00:05:33.920
&gt;&gt; Alexis Abril: Okay now there
are some problems with this.

97
00:05:35.100 --> 00:05:39.420
One of the problems you may have
seen from this wall of text,

98
00:05:39.420 --> 00:05:42.970
is in the constructor we're doing
the same thing over and over and over.

99
00:05:42.970 --> 00:05:44.829
We have to say this.name.

100
00:05:48.300 --> 00:05:49.830
There's a way around this.

101
00:05:50.970 --> 00:05:56.156
It's just not, the concert doesn't exist
because it's not true inheritance,

102
00:05:56.156 --> 00:06:00.980
you can't have methods inheriting from
other methods in the strict sense.

103
00:06:00.980 --> 00:06:03.980
This is when you see libraries
providing things like super plugins.

104
00:06:05.320 --> 00:06:07.360
But it's not inherit in
the language itself.

105
00:06:09.140 --> 00:06:12.450
But it would makes sense if you
inherit chordate from animal,

106
00:06:12.450 --> 00:06:17.520
you probably want to invoke your own
constructor logic, set up your spine.

107
00:06:17.520 --> 00:06:20.186
But you want to invoke animals
constructor logic as well.

108
00:06:20.186 --> 00:06:23.160
You don't wanna have to rewrite that
code every single time you're setting up

109
00:06:23.160 --> 00:06:24.310
something to inherit from.

110
00:06:26.180 --> 00:06:27.870
So you can do that this way.

111
00:06:27.870 --> 00:06:33.220
So here's our base animal but
inside chordate, we don't wanna call,

112
00:06:33.220 --> 00:06:37.233
we don't wanna set up
this.name equals name again,

113
00:06:37.233 --> 00:06:41.710
instead we just wanna do
whatever our parent does.

114
00:06:41.710 --> 00:06:46.120
So here is a really really
nice use of call and apply.

115
00:06:46.120 --> 00:06:47.770
Animal is just a function.

116
00:06:47.770 --> 00:06:51.360
So we are going to invoke
the animal constructor.

117
00:06:51.360 --> 00:06:56.085
But we're gonna set its context to
whatever we are, whatever this is.

118
00:06:56.085 --> 00:06:59.920
And remember, one of our rules for
this is the new keyword.

119
00:07:01.160 --> 00:07:04.470
So when you say var c equals new chordate,

120
00:07:05.640 --> 00:07:10.950
we're setting the context within this
function here to the new object.

121
00:07:11.980 --> 00:07:15.700
And we're passing that into
our constructor above.

122
00:07:15.700 --> 00:07:21.354
So this.name will still
be our new object.name.

123
00:07:21.354 --> 00:07:27.629
So the same functionality is achieved
in the set context correctly,

124
00:07:27.629 --> 00:07:32.945
except we don't have to
rewrite this.name equals name.

125
00:07:32.945 --> 00:07:34.550
Does that make sense?

126
00:07:34.550 --> 00:07:37.784
This is really useful because typically,
you're gonna have a more elaborate

127
00:07:37.784 --> 00:07:39.995
constructor function than
this.name equals name.

128
00:07:39.995 --> 00:07:42.411
You probably want to
actually set up some things.

129
00:07:42.411 --> 00:07:46.433
But you don't want to re implement
that same constructor logic over and

130
00:07:46.433 --> 00:07:47.313
over and over.

131
00:07:47.313 --> 00:07:47.881
Interjection?

132
00:07:47.881 --> 00:07:51.074
&gt;&gt; Speaker 2: Why can't you
just do chordate equals animal?

133
00:07:51.074 --> 00:07:53.200
&gt;&gt; Alexis Abril: Why can't you
do chordate equals animal?

134
00:07:53.200 --> 00:07:54.095
I want a whiteboard.

135
00:07:54.095 --> 00:07:58.562
[LAUGH] Why do you guys think you
can't do chordate equals animal?

136
00:08:00.856 --> 00:08:03.123
&gt;&gt; Alexis Abril: Or
what repercussions would that have?

137
00:08:14.124 --> 00:08:16.295
&gt;&gt; Speaker 3: [INAUDIBLE] Everything
that Chordate has, right?

138
00:08:16.295 --> 00:08:18.235
Then you just have it pointed at animal?

139
00:08:18.235 --> 00:08:19.927
&gt;&gt; Alexis Abril: Yeah.
You'd be pointing to the same function.

140
00:08:19.927 --> 00:08:23.500
Remember, everything's a pointer.

141
00:08:23.500 --> 00:08:29.140
So in this case, if you had animal equals
function, this.name equals name, chordate

142
00:08:29.140 --> 00:08:33.540
would just point, these should really be,
if you wanna consider these functions and

143
00:08:33.540 --> 00:08:37.180
the animal points to a function here,
chordate would point to the same function.

144
00:08:39.990 --> 00:08:43.080
&gt;&gt; Speaker 3: So basically that
would become a problem when you

145
00:08:43.080 --> 00:08:47.970
went to the next step of
chordate.prototype.spine is

146
00:08:49.510 --> 00:08:53.080
true, then you've set
spine true on all animals.

147
00:08:53.080 --> 00:08:54.270
&gt;&gt; Alexis Abril: Yes.

148
00:08:54.270 --> 00:08:55.464
&gt;&gt; Speaker 3: Got it.
&gt;&gt; Alexis Abril: Exactly.

149
00:08:59.484 --> 00:09:02.140
&gt;&gt; Alexis Abril: Good question.

150
00:09:02.140 --> 00:09:05.990
Okay and then of course, doing the same,
you can do the same thing for a mammal.

151
00:09:05.990 --> 00:09:08.670
You get down to mammal, say chordate.call.

152
00:09:08.670 --> 00:09:12.560
We're setting up the same
inheritance link, but

153
00:09:12.560 --> 00:09:14.710
without having to reimplement
our constructors every time.

154
00:09:17.350 --> 00:09:20.320
Okay, we'll talk about our
shared properties example,

155
00:09:20.320 --> 00:09:23.299
our issue with shared properties really,
really quick.

156
00:09:25.060 --> 00:09:29.360
So, we're gonna construct that
function we saw earlier, but

157
00:09:29.360 --> 00:09:32.970
we're gonna do it in our
little 2D representation here.

158
00:09:32.970 --> 00:09:34.824
So if Animal equals function.

159
00:09:34.824 --> 00:09:38.020
Remember, it's not going
to evaluate the function.

160
00:09:38.020 --> 00:09:39.189
It's not going to execute it.

161
00:09:39.189 --> 00:09:41.270
It just knows that there is a function.

162
00:09:41.270 --> 00:09:44.830
So function, by default,
all functions have prototypes, again.

163
00:09:45.960 --> 00:09:48.360
Not by default, they just do.

164
00:09:48.360 --> 00:09:52.190
So animal, and we have our prototype,
which is gonna point to an object.

165
00:09:52.190 --> 00:09:56.320
We have dog equals functions, so we're
gonna get the same construct in memory.

166
00:09:56.320 --> 00:10:01.430
And then when we say
dog.prototype equals new Animal,

167
00:10:01.430 --> 00:10:07.730
we're gonna first, dog.prototype equals
new animal, so dogs prototype object,

168
00:10:07.730 --> 00:10:12.830
its proto property is gonna point
to animal's prototype, and we're

169
00:10:12.830 --> 00:10:20.020
going to invoke the animal constructor
with the context of dog.prototype.

170
00:10:20.020 --> 00:10:21.250
This is our context here.

171
00:10:22.810 --> 00:10:24.620
Because we're using the new keyword,

172
00:10:24.620 --> 00:10:28.280
this newly created object
is gonna be our context.

173
00:10:28.280 --> 00:10:32.640
So this dot offspring will be,
this is our array object here.

174
00:10:35.500 --> 00:10:36.130
So far so good?

175
00:10:39.320 --> 00:10:45.800
Then, when we create our three new dogs,
here's dog one, dog two,

176
00:10:45.800 --> 00:10:51.480
dog three, new objects with their proto
property pointed to dogs prototype.

177
00:10:54.830 --> 00:10:57.440
Remember this is invoking
the new key word here, for

178
00:10:57.440 --> 00:11:01.650
dog new dog, is invoking dogs constructor.

179
00:11:01.650 --> 00:11:06.620
And dog's constructor is not
setting offspring to this, and

180
00:11:06.620 --> 00:11:12.090
it's not recalling animals
constructor with its context.

181
00:11:12.090 --> 00:11:12.900
It's an empty function.

182
00:11:13.990 --> 00:11:17.730
So this is just creating new objects
with proto properties pointed to

183
00:11:17.730 --> 00:11:18.440
dog's prototype.

184
00:11:21.280 --> 00:11:27.310
So when we invoke
a dog.offspring.push pup,

185
00:11:27.310 --> 00:11:32.150
we're saying, dog1.offspring.

186
00:11:32.150 --> 00:11:33.620
Do you have offspring?

187
00:11:33.620 --> 00:11:35.720
No, walk up to protochain.

188
00:11:35.720 --> 00:11:37.200
Do you have offspring?

189
00:11:37.200 --> 00:11:38.450
Sure do.

190
00:11:38.450 --> 00:11:43.226
Here's the offspring array,
push pup, so push this guy.

191
00:11:50.659 --> 00:11:53.930
&gt;&gt; Alexis Abril: So
when you say dog2.offspring.

192
00:11:53.930 --> 00:11:57.710
When you look this up later, you're
gonna say dog2, do you have offspring?

193
00:11:57.710 --> 00:11:59.490
Nope.
Walk up the proto chain.

194
00:11:59.490 --> 00:12:00.570
Do you have offspring?

195
00:12:00.570 --> 00:12:01.580
Yes.

196
00:12:01.580 --> 00:12:03.060
What is your offspring?

197
00:12:03.060 --> 00:12:05.826
It's gonna be an array containing pup.

198
00:12:10.843 --> 00:12:13.761
&gt;&gt; Alexis Abril: So you're right,
at face value just looking at the code,

199
00:12:13.761 --> 00:12:15.730
I wouldn't have expected this.

200
00:12:15.730 --> 00:12:20.492
But in memory, it makes a lot more
sense when you're just drawing it out.

201
00:12:20.492 --> 00:12:23.942
Yes, okay, I see what's going on.

202
00:12:23.942 --> 00:12:24.959
Does this is make sense?

203
00:12:26.040 --> 00:12:30.665
Yeah, I really do draw
a lot of this out still.

204
00:12:30.665 --> 00:12:33.500
So it's a very helpful tool.

