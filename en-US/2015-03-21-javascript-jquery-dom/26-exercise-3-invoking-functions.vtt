WEBVTT

1
00:00:00.000 --> 00:00:04.094
[MUSIC]

2
00:00:04.094 --> 00:00:06.620
&gt;&gt; Justin Meyer: We've done DOTs,
which is cool.

3
00:00:06.620 --> 00:00:09.100
We had our test passing
with the DOT exercise.

4
00:00:09.100 --> 00:00:13.130
But, what if we wanted to do something
more than just find a property?

5
00:00:13.130 --> 00:00:16.410
What if we wanted to find a function and
then invoke that function?

6
00:00:16.410 --> 00:00:17.610
This is the trick.

7
00:00:17.610 --> 00:00:21.574
Because remember one of
our rules was Call, right?

8
00:00:21.574 --> 00:00:24.080
Dot, and then invoking a function, and

9
00:00:24.080 --> 00:00:29.020
the context is gonna be whatever is
to the left of the DOT.yet Regardless

10
00:00:29.020 --> 00:00:33.977
of where that function is
found on the chain, right?

11
00:00:33.977 --> 00:00:37.970
So we have another exercise.

12
00:00:37.970 --> 00:00:40.580
Let's write a DOTCALL.

13
00:00:40.580 --> 00:00:44.714
Let's recreate that same functionality but
we're gonna use this DOTCALL method.

14
00:00:45.980 --> 00:00:50.850
So if you have the same two files open, if
you have the test page in your browser and

15
00:00:50.850 --> 00:00:54.300
your template file open in your IDE,

16
00:00:54.300 --> 00:00:59.080
we're gonna use this type of setup,
we're gonna create var Person.

17
00:00:59.080 --> 00:01:01.092
This is the same construct
that you already have.

18
00:01:01.092 --> 00:01:05.010
And then we're gonna say, prototype.speak.

19
00:01:05.010 --> 00:01:10.920
We're gonna add a function onto our
newly constructed objects prototypes,

20
00:01:10.920 --> 00:01:13.280
proto, object.

21
00:01:13.280 --> 00:01:16.220
So a little bit up the chain,
we're gonna add a function called speak,

22
00:01:16.220 --> 00:01:18.205
and it's gonna console.log.

23
00:01:18.205 --> 00:01:21.332
Hello + this.name.

24
00:01:21.332 --> 00:01:27.450
And this, this keyword should be
the instance of our newly created object.

25
00:01:29.050 --> 00:01:33.280
So we're gonna say,
var person = new Person('Smith').

26
00:01:33.280 --> 00:01:41.450
And when we get a person, speak, and then
an array of arguments we wanna pass in.

27
00:01:41.450 --> 00:01:44.110
In our case, we don't have any
arguments we wanna pass in.

28
00:01:44.110 --> 00:01:48.570
This should be the same
as saying person.speak.

29
00:01:48.570 --> 00:01:50.860
These two lines will be equivalent.

30
00:01:50.860 --> 00:01:54.452
The part that's grayed out is just
the signature, it's our API we wanna meet.

31
00:01:54.452 --> 00:02:00.979
The big hint here,
DOTCALL will set context.

32
00:02:03.165 --> 00:02:07.144
&gt;&gt; Justin Meyer: .call
will invoke a function and

33
00:02:07.144 --> 00:02:10.985
set this inside that function.

34
00:02:14.788 --> 00:02:15.805
&gt;&gt; Justin Meyer: Does that make sense?

35
00:02:15.805 --> 00:02:20.995
Is there any questions on
what you see on the screen.

36
00:02:20.995 --> 00:02:21.930
Yes.

37
00:02:21.930 --> 00:02:23.950
&gt;&gt; Speaker 2: [INAUDIBLE] can we
use our previous function DOT?.

38
00:02:23.950 --> 00:02:27.020
&gt;&gt; Justin Meyer: You totally can,
you totally can, good question.

