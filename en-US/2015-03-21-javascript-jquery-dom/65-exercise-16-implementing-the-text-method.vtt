WEBVTT

1
00:00:00.000 --> 00:00:04.165
[MUSIC]

2
00:00:04.165 --> 00:00:05.800
&gt;&gt; Justin Meyer: The next thing, and
this is gonna be a trickier one.

3
00:00:05.800 --> 00:00:08.670
I said there's two hard ones.

4
00:00:08.670 --> 00:00:11.953
This is the second harder one,

5
00:00:11.953 --> 00:00:17.108
I think.
&gt;&gt; Justin Meyer: We're

6
00:00:17.108 --> 00:00:21.590
gonna add a text method that you can
get or set the text of an element.

7
00:00:23.520 --> 00:00:27.742
So if I were to get the text of a ul,
which the ul in our page,

8
00:00:27.742 --> 00:00:33.176
which I'll show, it'll return a string
with just the text node content,

9
00:00:33.176 --> 00:00:35.700
so Doberrman, Beagles, Boxer.

10
00:00:35.700 --> 00:00:40.390
And if I were to set an element,
it will set just the text of it.

11
00:00:40.390 --> 00:00:41.990
This is different than setting the HTML.

12
00:00:41.990 --> 00:00:48.830
See, if I'm setting text here as TEETH,
if I put in stuff that looked like markup,

13
00:00:48.830 --> 00:00:52.410
well, you would actually see in the page,
not in the source, markup.

14
00:00:52.410 --> 00:00:56.200
It'll get escaped correctly,
so you see it.

15
00:00:58.610 --> 00:01:03.372
Let me walk through a little bit more
explanation of what text nodes are, so

16
00:01:03.372 --> 00:01:07.360
that you can understand how, cuz
understanding that there's text nodes is

17
00:01:07.360 --> 00:01:13.967
important to solving this exercise.
&gt;&gt; Justin Meyer: So

18
00:01:13.967 --> 00:01:17.369
let me inspect this element.
&gt;&gt; Speaker 2: There's

19
00:01:17.369 --> 00:01:18.349
a question that just came in.

20
00:01:18.349 --> 00:01:23.770
Why can't we do this equals
new dollar sign selector?

21
00:01:23.770 --> 00:01:26.795
&gt;&gt; Justin Meyer: Yeah, so this is, okay,

22
00:01:26.795 --> 00:01:32.568
so someone asked,
why can't we do this equals new

23
00:01:32.568 --> 00:01:40.527
selector in here.
&gt;&gt; Justin Meyer: The reason is because,

24
00:01:40.527 --> 00:01:43.610
think about how your new operator works.

25
00:01:43.610 --> 00:01:48.640
Your new operator just calls, if you
remember the new operator from what we did

26
00:01:48.640 --> 00:01:56.127
yesterday.
&gt;&gt; Justin Meyer: The new

27
00:01:56.127 --> 00:01:58.903
operator creates an object in memory, and

28
00:01:58.903 --> 00:02:02.527
then makes sure that that
constructor function calls,

29
00:02:02.527 --> 00:02:08.810
makes sure that the constructor function's
this points to that newly created object.

30
00:02:08.810 --> 00:02:13.513
So it's gonna create a,
this code in here is really,

31
00:02:13.513 --> 00:02:18.010
when it's gonna call that
constructor function,

32
00:02:18.010 --> 00:02:24.090
it's gonna call it with this pointed
to some object that it created.

33
00:02:25.930 --> 00:02:31.310
Now, if in my jQuery JS,

34
00:02:32.460 --> 00:02:36.880
if you had this code here,
all that's doing is pointing

35
00:02:36.880 --> 00:02:42.120
this to some other object
that it's created.

36
00:02:42.120 --> 00:02:46.207
This in the context of
this function running.

37
00:02:46.207 --> 00:02:50.632
But it cannot reach back into here and

38
00:02:50.632 --> 00:02:56.920
somehow change o to be
returned to some other value.

39
00:02:58.900 --> 00:03:00.450
It can't do that.

40
00:03:00.450 --> 00:03:04.280
Remember, when you set, this is just
like any other variable, really.

41
00:03:05.428 --> 00:03:11.410
We have in,
this function right here has a this,

42
00:03:11.410 --> 00:03:17.161
and it's also gonna have an elements.
&gt;&gt; Justin Meyer: What

43
00:03:17.161 --> 00:03:22.000
this means in this function is local
to that running of this function.

44
00:03:22.000 --> 00:03:24.614
It's local in this call object.

45
00:03:24.614 --> 00:03:26.172
So setting elements,

46
00:03:26.172 --> 00:03:31.390
changing what this is won't change
what is returned by the outside world.

47
00:03:31.390 --> 00:03:36.930
It won't change the behavior
of what o is in here.

48
00:03:38.880 --> 00:03:44.522
Hopefully that makes sense.
&gt;&gt; Justin Meyer: Okay,

49
00:03:44.522 --> 00:03:50.880
so let me get back to
talking about text nodes.

50
00:03:50.880 --> 00:03:57.740
So, you can see here I have a ul,
and it's got these three lis in it.

51
00:03:58.820 --> 00:04:02.360
How many child nodes does this ul have?

52
00:04:06.198 --> 00:04:08.630
&gt;&gt; Justin Meyer: It's a trick question.

53
00:04:08.630 --> 00:04:11.246
It does not have three.
&gt;&gt; Speaker 3: It has six.

54
00:04:11.246 --> 00:04:13.454
&gt;&gt; Justin Meyer: Close.

55
00:04:14.520 --> 00:04:16.258
&gt;&gt; Speaker 3: Seven.

56
00:04:16.258 --> 00:04:18.733
&gt;&gt; Justin Meyer: Seven.

57
00:04:18.733 --> 00:04:19.625
&gt;&gt; Speaker 3: Yeah.

58
00:04:19.625 --> 00:04:21.570
&gt;&gt; Justin Meyer: Can you tell me why?

59
00:04:21.570 --> 00:04:23.560
&gt;&gt; Speaker 3: The three li's, and

60
00:04:23.560 --> 00:04:28.040
then the four text nodes
surrounding each li.

61
00:04:28.040 --> 00:04:30.824
So there's one at the top,
then in between,

62
00:04:30.824 --> 00:04:32.990
and then one at the bottom.
&gt;&gt; Justin Meyer: Exactly.

63
00:04:32.990 --> 00:04:34.290
So let me show with that.

64
00:04:34.290 --> 00:04:35.870
So here's my breeds HTML.

65
00:04:37.270 --> 00:04:43.810
So, you might think like, hey,
the ul is gonna have three child nodes.

66
00:04:43.810 --> 00:04:48.480
But in fact, it's gonna have seven, cuz
it's gonna have a text node that's created

67
00:04:48.480 --> 00:04:53.030
for the text of the line break,
and any space and tabs right here.

68
00:04:53.030 --> 00:04:55.936
And then it's gonna have
an li as a child node.

69
00:04:55.936 --> 00:04:59.173
It's gonna have another text node
right here, an li as a child node.

70
00:04:59.173 --> 00:05:04.429
Another text node here,
and an li as a child node.

71
00:05:04.429 --> 00:05:07.340
And then the seventh text node right here.

72
00:05:07.340 --> 00:05:09.840
That's the actual structure of the DOM.

73
00:05:09.840 --> 00:05:13.120
And you can see this in
your debugging tools.

74
00:05:13.120 --> 00:05:17.436
If I were to go to this ul.
&gt;&gt; Justin Meyer: And

75
00:05:17.436 --> 00:05:21.818
look at Properties, and

76
00:05:21.818 --> 00:05:25.881
look at-
&gt;&gt; Speaker 3: childNodes?

77
00:05:25.881 --> 00:05:27.465
&gt;&gt; Justin Meyer: childNodes, thank you,

78
00:05:27.465 --> 00:05:28.690
went right past it.

79
00:05:28.690 --> 00:05:35.003
You can see, there's seven child nodes,
text, li, text, li, text.

80
00:05:35.003 --> 00:05:37.480
And these lis will each have
text nodes as children.

81
00:05:38.690 --> 00:05:42.994
This text is gonna look just like, you
can see, it's got a line break and space.

82
00:05:42.994 --> 00:05:47.402
So jQuery's text node,
when you try to read,

83
00:05:47.402 --> 00:05:50.905
if we were to read the text of this ul,

84
00:05:50.905 --> 00:05:56.559
what it needs to do is recurse
down through every text node,

85
00:05:56.559 --> 00:06:00.201
so it's gonna get all the text nodes.

86
00:06:00.201 --> 00:06:05.350
It's gonna get all of these text nodes.

87
00:06:05.350 --> 00:06:12.819
But it's gonna also recurse down through
every li and get all of their text nodes.

88
00:06:13.900 --> 00:06:17.640
And then through the li to the anchor, and
the anchor is gonna have a text node, and

89
00:06:17.640 --> 00:06:19.890
get these text nodes.

90
00:06:19.890 --> 00:06:24.438
So this is the last, I would say,
pretty hard exercise.

91
00:06:24.438 --> 00:06:28.820
I would say, let's split it up in two.

92
00:06:28.820 --> 00:06:34.010
Let's do the first part is actually
easier, so we'll do that first.

93
00:06:34.010 --> 00:06:38.530
We're gonna do the setting, and
then we're gonna do the getting.

94
00:06:38.530 --> 00:06:44.530
So to set ul, if we wanted to set
ul's text, that's really easy.

95
00:06:44.530 --> 00:06:49.172
I can just create a text node,
and you can create a text node.

96
00:06:49.172 --> 00:06:52.036
You might have seen
document.createElement,

97
00:06:52.036 --> 00:06:55.460
that creates an element with
whatever tag name you want.

98
00:06:55.460 --> 00:06:59.755
So if I want to create a div,
I can create one like that.

99
00:06:59.755 --> 00:07:03.664
But I can also create a text node.

100
00:07:03.664 --> 00:07:05.850
And I can give it the text
of the text node.

101
00:07:05.850 --> 00:07:06.950
I can say, like, hello, world.

102
00:07:10.270 --> 00:07:16.569
Now I could get my ul.
&gt;&gt; Justin Meyer: Did I

103
00:07:16.569 --> 00:07:17.830
write something wrong?

104
00:07:19.180 --> 00:07:20.540
All right, maybe I didn't save it.

105
00:07:20.540 --> 00:07:27.130
There we go, cool.

106
00:07:27.130 --> 00:07:28.339
So I get my ul.

107
00:07:28.339 --> 00:07:31.398
Have I been doing something

108
00:07:31.398 --> 00:07:38.427
wrong?
&gt;&gt; Justin Meyer: I have,

109
00:07:38.427 --> 00:07:40.170
hold on one second.

110
00:07:40.170 --> 00:07:41.612
I have something breaking here.

111
00:07:42.932 --> 00:07:46.562
This thing.

112
00:07:46.562 --> 00:07:48.372
There we go.

113
00:07:48.372 --> 00:07:56.622
It gives errors on you if you try that.
&gt;&gt; Justin Meyer: Perfect,

114
00:07:56.622 --> 00:07:59.139
okay, so I have my ul, and
I'm gonna create my text

115
00:07:59.139 --> 00:08:05.861
node.
&gt;&gt; Justin Meyer: And

116
00:08:05.861 --> 00:08:11.200
what I can do is, I can just simply
wipe out my ul's text, HTML.

117
00:08:11.200 --> 00:08:15.860
So, I'm gonna choose a little shortcut,
I'm just gonna blow away all of its HTML.

118
00:08:15.860 --> 00:08:17.780
And now my ul is empty.

119
00:08:17.780 --> 00:08:23.837
As you can see on the left, it's gone.
&gt;&gt; Justin Meyer: And

120
00:08:23.837 --> 00:08:26.696
you can see it in the DOM as well.

121
00:08:26.696 --> 00:08:29.867
And then what I'm gonna do is
append to my ul, actually,

122
00:08:29.867 --> 00:08:32.260
I'm supposed to keep
this up high as I can.

123
00:08:33.770 --> 00:08:35.780
I'm going to append to my ul.

124
00:08:35.780 --> 00:08:39.233
Let me grab my ul.
Let me grab the raw element.

125
00:08:39.233 --> 00:08:45.154
And I'm gonna appendChild my
text node that I created.

126
00:08:45.154 --> 00:08:48.110
And you'll see,
hello world was added here.

127
00:08:49.740 --> 00:08:54.326
The cool thing about text nodes is that
they'll automatically escape any text you

128
00:08:54.326 --> 00:08:55.065
put in them.

129
00:08:55.065 --> 00:08:59.130
So I put a bold in here in the text node.

130
00:08:59.130 --> 00:09:05.840
But if I were to append that again to
my ul, now it's got two text nodes.

131
00:09:05.840 --> 00:09:10.860
But if we look on the page,
it doesn't actually put markup,

132
00:09:10.860 --> 00:09:13.860
it escapes the markup,
so you see it like this.

133
00:09:15.260 --> 00:09:21.629
So the first exercise we're gonna
do is to take our dollar text, and

134
00:09:21.629 --> 00:09:26.884
we're going to have something
if arguments.length,

135
00:09:26.884 --> 00:09:30.370
and then we're gonna do the setter.

136
00:09:30.370 --> 00:09:38.035
And the setter is gonna work
just like all of these setters,

137
00:09:38.035 --> 00:09:42.328
except it's gonna create a new,

138
00:09:42.328 --> 00:09:48.768
it's gonna empty the inner
HTML of each element,

139
00:09:48.768 --> 00:09:54.770
loop and,
set the innerHTML of each element.

140
00:09:55.870 --> 00:09:57.855
Or, clear the.

141
00:09:57.855 --> 00:10:03.094
Set the innerHTML to empty string.

142
00:10:03.094 --> 00:10:08.344
And then it's going to create a text

143
00:10:08.344 --> 00:10:13.423
node and append it to the element.

