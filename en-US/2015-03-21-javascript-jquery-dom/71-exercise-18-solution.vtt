WEBVTT

1
00:00:00.000 --> 00:00:03.738
[MUSIC]

2
00:00:03.738 --> 00:00:07.476
&gt;&gt; Alexis: So first off, we're gonna
start very similar to what we did before.

3
00:00:07.476 --> 00:00:09.589
Our accumulator,
we're just gonna call it elements,

4
00:00:13.211 --> 00:00:15.330
&gt;&gt; Alexis: For originality.

5
00:00:15.330 --> 00:00:19.999
And we know at the end of this we
wanna return an instance of jQuery, so

6
00:00:19.999 --> 00:00:26.844
we're gonna say return $ (elements).
&gt;&gt; Alexis: For

7
00:00:26.844 --> 00:00:30.230
our for loop or for iteration,
we can use our each helper.

8
00:00:30.230 --> 00:00:34.640
So I'm gonna iterate through each
one of the items in our collection,

9
00:00:34.640 --> 00:00:40.780
which will give us back
this type of set up.

10
00:00:43.130 --> 00:00:44.810
Now here's the part we care about.

11
00:00:44.810 --> 00:00:47.630
We wanna see if an element
is not a text node.

12
00:00:47.630 --> 00:00:51.070
But we also want to move on and on and on.

13
00:00:51.070 --> 00:00:55.790
So first off we need to actually
find that next sibling element.

14
00:00:55.790 --> 00:01:01.023
So we can say, I'm gonna call
this current for the moment,

15
00:01:01.023 --> 00:01:06.153
because we're gonna move down
this chain of next siblings

16
00:01:06.153 --> 00:01:10.778
potentially some say
current = el.nextSibling.

17
00:01:10.778 --> 00:01:17.432
And then we want to say
if (current.nodeType

18
00:01:17.432 --> 00:01:22.719
!== 3) if it's not a text node,

19
00:01:22.719 --> 00:01:28.872
go ahead just add this to our accumulator.

20
00:01:28.872 --> 00:01:34.226
So I'm gonna say elements.push(el).

21
00:01:34.226 --> 00:01:43.371
Else if(current.nodetype
=== 1) if it's DOM node,

22
00:01:43.371 --> 00:01:50.330
excuse me if it's not equal to 3,
yes okay.

23
00:01:50.330 --> 00:01:55.029
I got these backwards

24
00:01:55.029 --> 00:02:00.620
3.
&gt;&gt; Alexis: Nope, that's right.

25
00:02:02.970 --> 00:02:08.020
If it's not a text node,

26
00:02:08.020 --> 00:02:10.930
to make this more explicit,
let's just make sure it's a DOM node.

27
00:02:11.970 --> 00:02:13.724
There we go, that's what we're going for.

28
00:02:13.724 --> 00:02:18.085
If the current node that we're
on is a DOM node, go head and

29
00:02:18.085 --> 00:02:20.434
push it onto our accumulator.

30
00:02:20.434 --> 00:02:25.360
If it's not a DOM node go ahead and
move to the next.

31
00:02:25.360 --> 00:02:31.041
So we'll say, move to next sibling,
will come back,

32
00:02:31.041 --> 00:02:37.424
otherwise do nothing.
&gt;&gt; Alexis: And

33
00:02:37.424 --> 00:02:39.220
this is gonna be our set up.

34
00:02:40.620 --> 00:02:42.270
Okay, let me stop here for a second.

35
00:02:42.270 --> 00:02:46.774
Did anyone get there's working
before going any further?

36
00:02:46.774 --> 00:02:50.370
Nobody at all, all right.

37
00:02:50.370 --> 00:02:55.000
So for here, now we need basically some
kind of check, some kind of loop, so

38
00:02:55.000 --> 00:02:56.430
you can do this couple different ways.

39
00:02:56.430 --> 00:02:58.680
I mean use a loop,
where you can move through and

40
00:02:58.680 --> 00:03:01.880
keep moving through until
some condition is met.

41
00:03:01.880 --> 00:03:08.170
And then will either reach the end of
the array, or the end of our next sibling,

42
00:03:08.170 --> 00:03:14.070
or we'll just push something
onto our accumulator.

43
00:03:15.160 --> 00:03:17.460
So I'm gonna comment this out momentarily.

44
00:03:19.240 --> 00:03:21.010
Let's write this a little bit differently.

45
00:03:21.010 --> 00:03:26.010
I'mma do a while loop, and say

46
00:03:27.250 --> 00:03:32.030
while current exists and

47
00:03:32.030 --> 00:03:36.170
we can say current.nodeType and

48
00:03:36.170 --> 00:03:42.360
we wanna check for current, let me get
to what this condition's gonna be here.

49
00:03:42.360 --> 00:03:45.265
In this loop we're gonna keep
moving on and on and on.

50
00:03:45.265 --> 00:03:52.784
So next, current = current.nextSibling,

51
00:03:52.784 --> 00:04:00.879
I wanna say,
if while a current element exists and

52
00:04:00.879 --> 00:04:06.085
current.nodeType is not equal

53
00:04:06.085 --> 00:04:11.507
to a DOM node, keep traversing.

54
00:04:11.507 --> 00:04:15.940
Let me move this out.

55
00:04:15.940 --> 00:04:20.606
We want to traverse, let me make
sure I have that condition correct.

56
00:04:27.329 --> 00:04:29.105
&gt;&gt; Alexis: Yeah.

57
00:04:38.950 --> 00:04:39.710
&gt;&gt; Alexis: So from where

58
00:04:39.710 --> 00:04:44.064
we're at we're gonna come at
the nextSibling and we're gonna say, hey,

59
00:04:44.064 --> 00:04:47.430
if we're on one div the next
div is our current.

60
00:04:47.430 --> 00:04:52.690
Our current node type is equal to 1,
so we don't need to traverse,

61
00:04:52.690 --> 00:04:57.680
so we can say if current is set
at the end of this whole chain,

62
00:05:00.510 --> 00:05:04.690
go ahead and elements.push current.

63
00:05:04.690 --> 00:05:10.280
So if at some point, during this loop
we're gonna keep moving until either

64
00:05:10.280 --> 00:05:15.670
we hit a DOM node or we've run out
of stuff and current is set to null.

65
00:05:17.220 --> 00:05:21.270
If current exists,
if current was set in this process,

66
00:05:21.270 --> 00:05:23.580
then we're gonna go ahead and
push it onto our accumulator.

67
00:05:24.670 --> 00:05:28.306
We're gonna do this for each item in
the collection at the end of the day we're

68
00:05:28.306 --> 00:05:34.134
gonna return our collection.

69
00:05:34.134 --> 00:05:41.650
So let's rerun this for our tests and
now we have a next passing tests.

