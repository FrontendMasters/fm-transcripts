WEBVTT

1
00:00:00.000 --> 00:00:03.802
[MUSIC]

2
00:00:03.802 --> 00:00:07.840
&gt;&gt; Alexis: Prototypal Inheritance,
prototype based inheritance.

3
00:00:09.170 --> 00:00:11.110
To me inheritance is a loose term.

4
00:00:11.110 --> 00:00:16.000
But how we treat the concept
of inheritance in JavaScript.

5
00:00:16.000 --> 00:00:18.410
Let's talk about prototypes,
prototype based inheritance.

6
00:00:18.410 --> 00:00:25.075
How we can reuse methods or
functions in JavaScript in a smart way.

7
00:00:25.075 --> 00:00:30.020
So, let's talk a little bit

8
00:00:30.020 --> 00:00:33.930
about what we would maybe consider
unexpected behavior, but we're gonna talk

9
00:00:33.930 --> 00:00:39.250
about how we can kinda manipulate
this to do some really smart things.

10
00:00:39.250 --> 00:00:44.550
So, first thing that most
people will consider unexpected

11
00:00:44.550 --> 00:00:49.380
is the concept of properties in
an inheritance tree somewhere.

12
00:00:50.560 --> 00:00:53.630
So let's observe this code really quickly.

13
00:00:53.630 --> 00:00:58.505
We have an animal function and inside
our constructor function we're gonna say

14
00:00:58.505 --> 00:01:01.310
this.offspring and it will be in array.

15
00:01:01.310 --> 00:01:04.270
So every time you create a new animal,

16
00:01:04.270 --> 00:01:08.110
it will have a property called offspring
which will start out as an empty array.

17
00:01:09.230 --> 00:01:15.100
Then, we're gonna create a dog and
the way we link

18
00:01:17.920 --> 00:01:21.520
objects together, our constructs together,

19
00:01:21.520 --> 00:01:26.050
is by saying something like
dog.prototype equals new animal.

20
00:01:26.050 --> 00:01:31.440
This is what's gonna link our pro to
the prototype of our constructor,

21
00:01:31.440 --> 00:01:34.950
I know that's a mouthful when you think
about all those big words at once, but

22
00:01:34.950 --> 00:01:37.290
this is exactly what we had
on this little diagram.

23
00:01:37.290 --> 00:01:38.810
Is we're creating a new object,

24
00:01:38.810 --> 00:01:43.450
with its proto property, pointed to
animals prototype, in this case.

25
00:01:43.450 --> 00:01:47.650
So that way, if you're looking for
some kind of method or property on dog, or

26
00:01:47.650 --> 00:01:51.230
an instance of a dog, and it's not found,
it's gonna look up its proto-chain and

27
00:01:51.230 --> 00:01:52.990
look for those same methods on animal.

28
00:01:54.340 --> 00:01:54.990
Which makes sense.

29
00:01:54.990 --> 00:01:56.930
That something we would want to behave.

30
00:01:56.930 --> 00:01:59.170
Look for characteristics to all animals.

31
00:01:59.170 --> 00:02:01.450
Bulldogs should have those
characteristics as well.

32
00:02:02.640 --> 00:02:06.930
Then we're gonna do these next three
lines, were gonna create three new dogs.

33
00:02:06.930 --> 00:02:08.320
Dog one, dog two, and pup.

34
00:02:10.180 --> 00:02:11.970
Three new instances of dogs.

35
00:02:11.970 --> 00:02:12.890
I think we're good there.

36
00:02:14.330 --> 00:02:18.880
But this is the part where it gets
a little tricky, dog1.offspring,push,

37
00:02:18.880 --> 00:02:20.065
cuz offspring is an array.

38
00:02:20.065 --> 00:02:24.768
Dog1.offspring.push pup,
and technically we can push

39
00:02:24.768 --> 00:02:29.486
anything on we want to, but
we're gonna push pup on there.

40
00:02:29.486 --> 00:02:32.061
Dog2.offspring, what do you guys

41
00:02:32.061 --> 00:02:33.811
think that's gonna be?

42
00:02:50.137 --> 00:02:51.390
&gt;&gt; Alexis: Anybody?
&gt;&gt; Speaker 2: Just

43
00:02:51.390 --> 00:02:52.890
an MPRA.
&gt;&gt; Alexis: An MPRA.

44
00:02:54.780 --> 00:02:56.130
&gt;&gt; Speaker 2: An array with pup in it.

45
00:02:56.130 --> 00:02:57.270
&gt;&gt; Alexis: An array with pup in it.

46
00:02:57.270 --> 00:02:59.629
Okay.

47
00:02:59.629 --> 00:03:01.750
Yeah, these are good answers.

48
00:03:01.750 --> 00:03:04.720
I would expect this to be
an empty array too, but it's not.

49
00:03:04.720 --> 00:03:05.940
It is gonna be an array with pup in it.

50
00:03:05.940 --> 00:03:11.280
And that's really weird, just looking and
taking this kind of code at face value.

51
00:03:11.280 --> 00:03:13.170
But, we'll show you what
this looks like in memory.

52
00:03:13.170 --> 00:03:15.059
And it's gonna make
a little bit more sense.

53
00:03:16.140 --> 00:03:18.710
So, let's talk about,
this is shared property,

54
00:03:18.710 --> 00:03:22.980
let's talk about adding methods on
a prototype, what this looks like.

55
00:03:22.980 --> 00:03:25.912
So, we had a little bit of exposure
to it in the last exercise.

56
00:03:25.912 --> 00:03:30.039
We had our speaks method, where we wanted
to walk up the proto chain, look for

57
00:03:30.039 --> 00:03:32.469
a method and
then invoke it with our context.

58
00:03:33.910 --> 00:03:36.290
Here we're gonna have an eats method.

59
00:03:36.290 --> 00:03:38.150
All animals eat things.

60
00:03:38.150 --> 00:03:42.860
No matter how far down you are on the
chain, as long as you inherit from animal,

61
00:03:42.860 --> 00:03:47.190
you'll have the function,
the ability to eat things.

62
00:03:47.190 --> 00:03:50.070
So here we're gonna have
Animal.prototype.eats.

63
00:03:50.070 --> 00:03:52.440
And this function will
just say whatever this,

64
00:03:52.440 --> 00:03:55.300
whatever the context we're using,
.name is eating.

65
00:03:55.300 --> 00:03:57.220
That's all we're gonna do.

66
00:03:57.220 --> 00:04:01.297
What this does in memory,
is it creates this kind of structure.

67
00:04:01.297 --> 00:04:06.308
We have animal, which is a pointer to
a function, that function is gonna have

68
00:04:06.308 --> 00:04:11.569
a prototype which is just an object, and
we've added an eats function on there.

69
00:04:11.569 --> 00:04:15.890
Eats is a pointer to a new function
we've created, this is our footprint.

70
00:04:17.280 --> 00:04:21.850
So when we come along and say,
sponge equals new Animal Bob.

71
00:04:23.340 --> 00:04:25.390
This is our new animal we've created.

72
00:04:25.390 --> 00:04:29.039
It's gonna create a new
object in memory and

73
00:04:29.039 --> 00:04:33.882
it's gonna set the proto
property to Animals Prototype.

74
00:04:37.887 --> 00:04:39.133
&gt;&gt; Alexis: It's a really tricky, or

75
00:04:39.133 --> 00:04:42.830
maybe it's a hard to memorize distinction,
but a really really important.

76
00:04:43.900 --> 00:04:48.380
A new object with its
proto property pointed to

77
00:04:48.380 --> 00:04:50.280
the prototype of its constructor.

78
00:04:50.280 --> 00:04:53.767
So animal, in this case,
is its constructor.

79
00:04:53.767 --> 00:04:59.009
And then, we're going to invoke this
animals a method, we're gonna invoke

80
00:04:59.009 --> 00:05:04.187
animal with the context of our new object,
which is this sponge down below.

81
00:05:04.187 --> 00:05:08.670
And all we're doing inside the constructor
is setting the name property.

82
00:05:08.670 --> 00:05:10.120
So list that name.

83
00:05:10.120 --> 00:05:11.729
This is gonna be our sponge.

84
00:05:13.100 --> 00:05:16.670
And its name pointer is going to point
to this new primitive string called Bob.

