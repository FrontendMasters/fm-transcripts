WEBVTT

1
00:00:00.000 --> 00:00:04.189
[MUSIC]

2
00:00:04.189 --> 00:00:05.128
&gt;&gt; Alexis Abril: So
let's walk through this.

3
00:00:05.128 --> 00:00:06.632
How many people solved it, by the way?

4
00:00:06.632 --> 00:00:09.520
Did anyone get through it?

5
00:00:09.520 --> 00:00:10.450
Kind of one?

6
00:00:10.450 --> 00:00:13.700
I know one did, somebody was talking
about which type error do I throw?

7
00:00:13.700 --> 00:00:16.510
All right, you're getting really,
really deep in there now.

8
00:00:16.510 --> 00:00:19.542
Okay, so the first thing we need to do,
if we're talking about,

9
00:00:19.542 --> 00:00:21.263
let me show the exercise real quick.

10
00:00:21.263 --> 00:00:26.870
If we're talking about finding or invoking
a method with a specified context,

11
00:00:26.870 --> 00:00:32.270
the first thing we need to do is find
a reference to what we're looking for.

12
00:00:32.270 --> 00:00:35.000
I love the question that initially
popped out in the chasse,

13
00:00:35.000 --> 00:00:36.400
can we use our prior method?

14
00:00:36.400 --> 00:00:38.103
Totally, we can totally do that.

15
00:00:38.103 --> 00:00:40.240
So I'm gonna call this fn in my example.

16
00:00:40.240 --> 00:00:44.410
And I'm gonna say DOT(obj, prop);.

17
00:00:44.410 --> 00:00:46.360
It turns out we just wrote a method.

18
00:00:46.360 --> 00:00:50.450
So walk up the proto chain and
find a reference to a property.

19
00:00:50.450 --> 00:00:54.880
So this will go through obj and

20
00:00:54.880 --> 00:00:59.420
its entire proto chain looking for prop
and return a reference if one is found.

21
00:01:00.730 --> 00:01:05.064
So in the next case we can just say,
if something is found,

22
00:01:05.064 --> 00:01:10.642
I mean if you wanna get really deep
into it there's gonna be better checks.

23
00:01:10.642 --> 00:01:13.184
I just want to say if
something is returned,

24
00:01:13.184 --> 00:01:16.850
if we actually have a reference
to something, then invoke it.

25
00:01:16.850 --> 00:01:17.890
So you could.

26
00:01:17.890 --> 00:01:20.145
This is the first place you would maybe,

27
00:01:20.145 --> 00:01:23.269
things would go like okay now
we need to call the method.

28
00:01:23.269 --> 00:01:25.990
But this doesn't,
there's a couple things wrong with this.

29
00:01:25.990 --> 00:01:32.050
One, ours is going to come in as,
in our test case,

30
00:01:33.710 --> 00:01:37.490
this is going to come in as an array.

31
00:01:37.490 --> 00:01:43.500
So maybe speak takes, in our test case,
speak takes a string argument.

32
00:01:43.500 --> 00:01:48.290
But we can't just pass in args itself,
because speak expects,

33
00:01:48.290 --> 00:01:54.460
this expects a string foo,
not an array of strings.

34
00:01:54.460 --> 00:01:57.270
So this is a little, right off the bat,
the signature's gonna be different.

35
00:01:57.270 --> 00:01:59.190
We can't just pass in args.

36
00:02:00.450 --> 00:02:04.110
And the second problem with
this is context, right?

37
00:02:04.110 --> 00:02:07.660
If we just invoke a function
like fn openPrint,

38
00:02:07.660 --> 00:02:09.660
what is this going to be
inside this function?

39
00:02:09.660 --> 00:02:10.410
What you guys think?

40
00:02:13.280 --> 00:02:14.150
&gt;&gt; Speaker 2: Window?

41
00:02:14.150 --> 00:02:14.940
&gt;&gt; Alexis Abril: Window?

42
00:02:14.940 --> 00:02:16.658
It is gonna be the window.

43
00:02:16.658 --> 00:02:23.541
Let's talk about the rules,
DOT call, new keyword, and?

44
00:02:23.541 --> 00:02:24.316
&gt;&gt; Speaker 3: Call and apply.

45
00:02:24.316 --> 00:02:25.470
&gt;&gt; Alexis Abril: Call and apply.

46
00:02:25.470 --> 00:02:29.840
If this doesn't meet any of those rules,
it's gonna be the window by default.

47
00:02:29.840 --> 00:02:31.070
So in this case it would
just be the window.

48
00:02:32.230 --> 00:02:35.750
But one of the requirements we have and

49
00:02:35.750 --> 00:02:38.830
one of our rules really matches up nicely,
right?

50
00:02:38.830 --> 00:02:41.660
We have a rule that says you need to

51
00:02:41.660 --> 00:02:45.940
invoke this function with
a context that we specify.

52
00:02:45.940 --> 00:02:49.960
In terms about one of our rules,
call apply, by definition,

53
00:02:49.960 --> 00:02:52.750
invokes a function of
the context that we specify.

54
00:02:52.750 --> 00:02:54.110
So that's kinda nice.

55
00:02:54.110 --> 00:02:57.870
So we can do call() or apply().

56
00:02:59.670 --> 00:03:02.315
Now these take different signatures,

57
00:03:02.315 --> 00:03:07.212
if you remember call() takes context and
then arguments such as that.

58
00:03:07.212 --> 00:03:11.180
apply() takes context and
then arguments such as that.

59
00:03:11.180 --> 00:03:14.575
For our usage here, what do you guys
feel like we should be using, or

60
00:03:14.575 --> 00:03:15.959
what do you guys wanna use?

61
00:03:15.959 --> 00:03:16.538
&gt;&gt; Speaker 3: apply().

62
00:03:16.538 --> 00:03:17.136
&gt;&gt; Alexis Abril: apply(),

63
00:03:17.136 --> 00:03:20.310
cuz we have an array of arguments
it turns out being passed in.

64
00:03:20.310 --> 00:03:23.561
That matches up really nicely too.

65
00:03:23.561 --> 00:03:26.270
It also might match up because we
planned this exercise in advance.

66
00:03:26.270 --> 00:03:29.520
One of those two things, I'm not sure yet.

67
00:03:29.520 --> 00:03:34.810
So here we're gonna say obj, args.

68
00:03:34.810 --> 00:03:37.990
And we need to do one last thing for

69
00:03:37.990 --> 00:03:42.075
this particular exercise,
what do you guys think that is?

70
00:03:42.075 --> 00:03:47.037
There's something still missing, but
it's not always immediately obvious.

71
00:03:47.037 --> 00:03:47.561
&gt;&gt; Speaker 2: We have to return it.

72
00:03:47.561 --> 00:03:50.064
&gt;&gt; Alexis Abril: We have to return
the value, we're invoke in the functions,

73
00:03:50.064 --> 00:03:52.780
cool, but we probably wants whatever
value is coming out of that.

74
00:03:55.980 --> 00:03:58.412
So let's check this out, and boom.

75
00:03:58.412 --> 00:04:01.990
We have a passing test
which is kind of nice.

76
00:04:01.990 --> 00:04:05.250
There's also a really nice way to
illustrate how this works in memory,

77
00:04:05.250 --> 00:04:09.093
a couple of you guys have
drawings on your notepads.

78
00:04:09.093 --> 00:04:13.554
But we'll have Justin come up here and
show your really nice representation of

79
00:04:13.554 --> 00:04:16.134
what is actually going
on behind the scenes.

80
00:04:16.134 --> 00:04:17.570
&gt;&gt; Speaker 4: Thanks for
suffering through that.

81
00:04:17.570 --> 00:04:20.190
Now I'm trying to explain it
like kind of we do this a lot.

82
00:04:20.190 --> 00:04:24.054
Anyways, as we're training, we beat you
over the heads with something hard,

83
00:04:24.054 --> 00:04:26.949
make you struggle, and
I try to explain really good after.

84
00:04:26.949 --> 00:04:30.474
So I'm gonna try my best to explain at
a high level what's going on cuz we just

85
00:04:30.474 --> 00:04:33.909
assembled a lot of different things
we had just previously talked about.

86
00:04:35.770 --> 00:04:40.696
So again on a high level, what you
were just trying to do, was implement,

87
00:04:40.696 --> 00:04:46.826
make it so that the DOTCALL operator, this
person.speak(), actually works, right?

88
00:04:46.826 --> 00:04:50.353
So we're implementing that
ourselves in JavaScript and

89
00:04:50.353 --> 00:04:54.541
that needs to look up a property in
memory, of a function in memory,

90
00:04:54.541 --> 00:04:58.310
like the DOT operator does,
and then call it.

91
00:04:58.310 --> 00:05:01.487
So let me draw what's going on in memory,
and

92
00:05:01.487 --> 00:05:05.810
why this DOTCALL is doing what it's doing.

93
00:05:05.810 --> 00:05:07.510
So if here's our call object.

94
00:05:09.680 --> 00:05:11.825
We're creating a person object in memory.

95
00:05:15.727 --> 00:05:17.530
&gt;&gt; Speaker 4: Let me know if-
&gt;&gt; Speaker 5: That's good.

96
00:05:17.530 --> 00:05:19.821
&gt;&gt; Speaker 4: See it already?

97
00:05:19.821 --> 00:05:20.917
So here's person.

98
00:05:29.275 --> 00:05:33.610
&gt;&gt; Speaker 4: So
person is gonna point to a function and

99
00:05:33.610 --> 00:05:36.932
this is a prototype property.

100
00:05:49.655 --> 00:05:54.605
&gt;&gt; Speaker 4: That points to an object
in memory and then this has the speak

101
00:05:54.605 --> 00:05:59.040
property that points to
another function memory.

102
00:05:59.040 --> 00:06:03.536
So here's that speak() function,
I'm just gonna draw it like this, and

103
00:06:03.536 --> 00:06:05.727
I'm gonna make the speak property.

104
00:06:09.040 --> 00:06:12.700
&gt;&gt; Speaker 4: That's what we've set
up with the person prototype speak.

105
00:06:13.730 --> 00:06:16.500
Again, prototype is just
like a normal property.

106
00:06:16.500 --> 00:06:20.130
We'll see how it's just like the dot
operator uses the proto property,

107
00:06:20.130 --> 00:06:22.880
the new operator uses the prototype,
we'll see that in a second.

108
00:06:24.300 --> 00:06:29.650
And then what's going to happen is it's
going to do new person with Smith.

109
00:06:29.650 --> 00:06:34.708
What that's going to do is create a person
instance in memory, who has it's proto

110
00:06:34.708 --> 00:06:41.750
property,
&gt;&gt; Speaker 4: Pointing

111
00:06:41.750 --> 00:06:45.120
to the person's prototype object.

112
00:06:45.120 --> 00:06:47.091
And this is gonna be lowercase person.

113
00:06:57.678 --> 00:07:02.637
&gt;&gt; Speaker 4: Okay, so
the DOTCALL operator is trying to do

114
00:07:02.637 --> 00:07:09.040
person.speak() and
then call it with some arguments.

115
00:07:11.799 --> 00:07:12.555
&gt;&gt; Speaker 4: Is your computer here?

116
00:07:12.555 --> 00:07:14.823
Can I escape out [INAUDIBLE]?

117
00:07:14.823 --> 00:07:16.542
&gt;&gt; Alexis Abril: Hit escape,
it'll get you out.

118
00:07:16.542 --> 00:07:17.700
Now hit command tab.

119
00:07:21.700 --> 00:07:23.501
&gt;&gt; Alexis Abril: Hit command
tab until you get to slide one.

120
00:07:28.838 --> 00:07:35.655
&gt;&gt; Speaker 4: Okay, so,
&gt;&gt; Speaker 4: Actually,

121
00:07:35.655 --> 00:07:37.295
where do I get this test right here?

122
00:07:44.630 --> 00:07:46.358
&gt;&gt; Speaker 4: Okay, here's the,

123
00:07:46.358 --> 00:07:51.722
that is smaller,
&gt;&gt; Speaker 4: So,

124
00:07:51.722 --> 00:07:54.500
quick, okay, so we created this Person.

125
00:07:56.740 --> 00:08:00.372
We had that person, and it is a speak()
function and things like that.

126
00:08:00.372 --> 00:08:07.235
What would happen if I called
a Person.prototype.speak()?

127
00:08:07.235 --> 00:08:12.155
And I called it with,
make sure its the same up here.

128
00:08:12.155 --> 00:08:16.773
I'm just gonna copy this function
over again which is okay to do, so

129
00:08:16.773 --> 00:08:20.761
you can see function and
what I'm doing in the same place.

130
00:08:20.761 --> 00:08:25.470
If I called Person.prototype.speak()
like this and

131
00:08:25.470 --> 00:08:30.112
I did,
&gt;&gt; Speaker 4: Alexis,

132
00:08:30.112 --> 00:08:33.055
what would this return?

133
00:08:40.244 --> 00:08:41.437
&gt;&gt; Speaker 4: Anybody?

134
00:08:47.063 --> 00:08:48.430
&gt;&gt; Speaker 4: Anybody confused about this?

135
00:08:48.430 --> 00:08:53.030
Like, what I mean that the fact that
I can call it like this, right?

136
00:08:53.030 --> 00:08:57.446
All I'm doing is this
Person.prototype.speak(),

137
00:08:57.446 --> 00:08:59.470
calling it as a function.

138
00:08:59.470 --> 00:09:01.510
&gt;&gt; Speaker 6: But,
isn't it in effect, a array?

139
00:09:02.780 --> 00:09:06.815
&gt;&gt; Speaker 4: Not, speak is not,
it's just expecting a to whom.

140
00:09:08.037 --> 00:09:11.704
&gt;&gt; Speaker 6: Okay.

141
00:09:11.704 --> 00:09:15.670
It'd be, hello Alexis,
my name is undefined.

142
00:09:15.670 --> 00:09:17.300
&gt;&gt; Speaker 4: My name is undefined,
exactly.

143
00:09:17.300 --> 00:09:21.480
Because this is going to be what?

144
00:09:21.480 --> 00:09:24.590
&gt;&gt; Speaker 6: Referring to the window?

145
00:09:25.660 --> 00:09:27.701
&gt;&gt; Speaker 4: Good guess-
&gt;&gt; Speaker 6: Prototype?

146
00:09:27.701 --> 00:09:32.794
&gt;&gt; Speaker 4: But it's actually
referring the prototype object,

147
00:09:32.794 --> 00:09:37.209
cuz remember the DOTCALL
operator always uses

148
00:09:37.209 --> 00:09:42.090
what's left of the rightmost dot as this,
right?

149
00:09:42.090 --> 00:09:47.437
So in this case it's going to be,
you can still say undefined but

150
00:09:47.437 --> 00:09:50.740
this is gonna be a person.prototype.

151
00:09:50.740 --> 00:09:57.169
Now let's say I changed
it around a little bit,

152
00:09:57.169 --> 00:10:01.039
I did var speak equals that.

153
00:10:01.039 --> 00:10:03.470
Now if I were to all speak like this.

154
00:10:03.470 --> 00:10:07.564
Now what would this return and

155
00:10:07.564 --> 00:10:13.147
what will this be inside this function?

156
00:10:13.147 --> 00:10:17.540
&gt;&gt; [INAUDIBLE]
&gt;&gt; Speaker 4: What?

157
00:10:17.540 --> 00:10:18.730
Well sorry.

158
00:10:18.730 --> 00:10:20.970
Yeah, my bad, sorry.

159
00:10:20.970 --> 00:10:22.704
That is what I meant to do.

160
00:10:22.704 --> 00:10:26.812
So I just set a variables speak
equal to Person.prototype.speak, and

161
00:10:26.812 --> 00:10:28.100
I'm just calling it.

162
00:10:29.480 --> 00:10:30.504
What would this be?

163
00:10:30.504 --> 00:10:31.381
&gt;&gt; Speaker 6: Window?

164
00:10:31.381 --> 00:10:33.450
&gt;&gt; Speaker 4: Window,
you're exactly right.

165
00:10:33.450 --> 00:10:35.760
And what would name be?.

166
00:10:35.760 --> 00:10:38.807
If we were to write this.main.

167
00:10:38.807 --> 00:10:40.440
&gt;&gt; Speaker 6: Undefined.

168
00:10:40.440 --> 00:10:43.802
&gt;&gt; Speaker 4: Probably it's actually made
an empty strings just because windows name

169
00:10:43.802 --> 00:10:45.630
property defaults to an empty string.

170
00:10:47.690 --> 00:10:52.320
Okay so that's a little quick
recap of the dot operator and

171
00:10:52.320 --> 00:10:53.860
how it supposed to work, right?

172
00:10:53.860 --> 00:10:56.390
DOTCALL is supposed to take
what's on the left-hand side.

173
00:10:58.390 --> 00:11:03.552
Now the reason why this
code is the way it is,

174
00:11:08.598 --> 00:11:09.760
&gt;&gt; Speaker 4: It's like this.

175
00:11:09.760 --> 00:11:12.915
So the reason why this
code is the way it is,

176
00:11:12.915 --> 00:11:19.050
is it's going to person and
it's trying to find a speak value.

177
00:11:19.050 --> 00:11:21.940
So we're using using the dot
operator we already created

178
00:11:21.940 --> 00:11:24.160
which is gonna go look for dot.

179
00:11:25.580 --> 00:11:27.940
Sorry, look for
a speak property on person.

180
00:11:27.940 --> 00:11:29.230
It's not gonna have it.

181
00:11:29.230 --> 00:11:33.281
You're going to walk up the proto chain,
find the speak() function and

182
00:11:33.281 --> 00:11:35.320
just return that function as a fact.

183
00:11:36.930 --> 00:11:38.800
So we'll just have floating this function.

184
00:11:38.800 --> 00:11:44.450
It doesn't know at all about this person,
because functions really don't have any,

185
00:11:44.450 --> 00:11:49.010
it's all about how functions are called
not about how they're defined, so

186
00:11:49.010 --> 00:11:50.370
we force the issue.

187
00:11:50.370 --> 00:11:51.230
We kinda force it, so

188
00:11:51.230 --> 00:11:56.930
that we're going to call this function,
so person is what this is.

189
00:11:56.930 --> 00:11:58.940
That's basically another recap.

190
00:11:58.940 --> 00:12:01.930
Does that make sense,
hopefully a little bit better now?

191
00:12:01.930 --> 00:12:03.120
Kinda see the bigger picture?

192
00:12:03.120 --> 00:12:09.274
And one thing I can say is this person
object here has a name, which was I don't

193
00:12:09.274 --> 00:12:16.000
remember in our example, something thought
was in, we already did an example.

194
00:12:16.000 --> 00:12:16.750
&gt;&gt; Speaker 6: Alexis?

195
00:12:16.750 --> 00:12:17.719
&gt;&gt; Speaker 4: Alexis.

196
00:12:20.247 --> 00:12:23.094
&gt;&gt; Speaker 4: Cool, so, hopefully
that makes sense, the bigger picture,

197
00:12:23.094 --> 00:12:24.310
hopefully you can start.

198
00:12:24.310 --> 00:12:27.832
Our whole goal for this is that
you guys can start seeing a code.

199
00:12:27.832 --> 00:12:29.952
First you construct your functions,
things like that.

200
00:12:29.952 --> 00:12:37.274
The DOTCALLl operator and kinda see
what it's doing in this memory diagram.

201
00:12:37.274 --> 00:12:39.152
Thanks, sorry for interrupting.

202
00:12:39.152 --> 00:12:41.204
&gt;&gt; Alexis Abril: Your good.
[LAUGH]

203
00:12:45.606 --> 00:12:46.846
&gt;&gt; Alexis Abril: Feel free if you have any

204
00:12:46.846 --> 00:12:51.000
questions at all, even if it comes to you
a little bit later today, let us know.

205
00:12:51.000 --> 00:12:55.630
This is hard, this is really hard if
you're coming from a statically typed

206
00:12:55.630 --> 00:12:57.180
language or like a Java.

207
00:12:58.340 --> 00:13:00.400
Cuz all the constructs, all the rules.

208
00:13:00.400 --> 00:13:05.154
JavaScript has a very simple set of rules,

209
00:13:05.154 --> 00:13:09.653
but they're very different from Java.

210
00:13:09.653 --> 00:13:11.738
So cool, all right.

211
00:13:11.738 --> 00:13:17.127
Okay,
&gt;&gt; Alexis Abril: So

212
00:13:17.127 --> 00:13:22.360
in summary we're gonna go through
something very similar to this diagram.

213
00:13:22.360 --> 00:13:25.988
If we have var d = new Date()
we have a new instance of Date.

214
00:13:25.988 --> 00:13:30.860
d.foo = bar, d.hasOwnProperty,
where all these methods and

215
00:13:30.860 --> 00:13:33.940
properties are are gonna
live is something like this.

216
00:13:33.940 --> 00:13:37.840
We have a d pointer pointing to
our new objects which is the date.

217
00:13:37.840 --> 00:13:40.660
It going to assign, we have a foo pointer.

218
00:13:40.660 --> 00:13:46.677
This is actually a pointer or a foo
pointing to a primitive string called bar.

219
00:13:46.677 --> 00:13:50.399
It's not gonna to have
hasOwnProperty() here,

220
00:13:50.399 --> 00:13:54.720
it's gonna have to keep going up for
our date prototype.

221
00:13:54.720 --> 00:13:59.600
This is because we've created a new Date,
var objects protos gonna point

222
00:13:59.600 --> 00:14:02.680
to the prototype of our constructor,
which is Date.

223
00:14:02.680 --> 00:14:06.150
It has things like it getDay and
other methods.

224
00:14:06.150 --> 00:14:07.472
It's not gonna to find it there.

225
00:14:07.472 --> 00:14:12.983
So it's gonna keep going
up to the base object.

226
00:14:12.983 --> 00:14:16.220
Keep going up to the base object
to look for things up here, and

227
00:14:16.220 --> 00:14:20.148
this is where it's going to find
something like hasOwnProperty(), and

228
00:14:20.148 --> 00:14:22.170
then it's going to do the same thing.

229
00:14:22.170 --> 00:14:24.986
We just went over here
invoke it with that context.

230
00:14:24.986 --> 00:14:27.140
It's got it, and we are good.

