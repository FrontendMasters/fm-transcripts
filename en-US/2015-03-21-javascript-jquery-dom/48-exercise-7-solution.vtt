WEBVTT

1
00:00:00.000 --> 00:00:03.936
[MUSIC]

2
00:00:03.936 --> 00:00:07.231
&gt;&gt; Justin: Again this is to introduce you,
a little bit,

3
00:00:07.231 --> 00:00:13.560
to reaching into host object functions and
calling them for your own purposes.

4
00:00:13.560 --> 00:00:15.140
The solution to this is,

5
00:00:15.140 --> 00:00:19.860
this is the potential array like thing,
or array or not.

6
00:00:19.860 --> 00:00:25.770
We're just going to return the result
of calling object.prototype.toString.

7
00:00:25.770 --> 00:00:28.980
So we're getting object
prototypes toString method, but

8
00:00:28.980 --> 00:00:34.600
instead of calling it an object,
we're going to call it, well, instead of

9
00:00:34.600 --> 00:00:39.256
calling it on an, like this object is just
toString normally, whatever it might be.

10
00:00:39.256 --> 00:00:43.190
We're going to make sure we're calling
object prototypes toString with our

11
00:00:44.330 --> 00:00:48.602
object, and then we're going to
make sure that that is equal to

12
00:00:48.602 --> 00:00:54.805
object Array.

13
00:00:54.805 --> 00:00:57.193
Is that what everybody's got?

14
00:00:57.193 --> 00:01:01.261
Let me make sure that that is right,
I spelled it right, yes, good.

15
00:01:01.261 --> 00:01:03.040
Object Array.

16
00:01:03.040 --> 00:01:08.305
Any questions there?
&gt;&gt; Speaker 2: Yes, why does it return

17
00:01:08.305 --> 00:01:15.140
arguments if you just say object toString?
&gt;&gt; Justin: If I say object-

18
00:01:15.140 --> 00:01:16.620
&gt;&gt; Speaker 2: I just tried it out

19
00:01:16.620 --> 00:01:20.350
just to see if that would work too, and
why do you have to use call instead of

20
00:01:20.350 --> 00:01:24.421
just directly calling toString?
&gt;&gt; Justin: Instead of just writing

21
00:01:24.421 --> 00:01:26.830
object.toString, is that what you mean?
&gt;&gt; Speaker 2: Right.

22
00:01:26.830 --> 00:01:27.941
&gt;&gt; Justin: Because,

23
00:01:27.941 --> 00:01:33.126
well let's say I passed in,
let's say I made an,

24
00:01:33.126 --> 00:01:39.554
I mean one reason is that I could
do something like evil and go-

25
00:01:51.901 --> 00:01:53.705
&gt;&gt; Justin: Now this would return true

26
00:01:53.705 --> 00:01:57.477
then, if I passed this object,
if this was the object I

27
00:01:57.477 --> 00:02:02.092
passed.
&gt;&gt; Justin: It would call,

28
00:02:02.092 --> 00:02:09.490
if I just did the obj toString, it would
return the same thing, it'd return true.

29
00:02:09.490 --> 00:02:11.600
There's a way of making
sure no matter what.

30
00:02:11.600 --> 00:02:15.630
Also I think, but I'm not a 100% sure
right off the top of my head, but

31
00:02:15.630 --> 00:02:22.393
I think arrays have-
&gt;&gt; Justin: I

32
00:02:22.393 --> 00:02:29.370
think arrays have a different toString.

33
00:02:29.370 --> 00:02:32.410
They have their own, on array.prototype,

34
00:02:32.410 --> 00:02:38.080
it has its own toString that's different
than objects toString method would return.

35
00:02:39.250 --> 00:02:40.810
So that's partly why as well.

36
00:02:43.530 --> 00:02:44.318
Makes sense?

37
00:02:44.318 --> 00:02:48.270
[LAUGH] I could go,
there's a much longer explanation, but-

38
00:02:48.270 --> 00:02:50.816
&gt;&gt; Speaker 3: Are you just asking instead

39
00:02:50.816 --> 00:02:53.811
of calling it on the prototype?

40
00:02:53.811 --> 00:02:56.720
Calling it object.toString?
&gt;&gt; Justin: I'm sorry,

41
00:02:56.720 --> 00:02:58.590
I misunderstood your question.

42
00:02:58.590 --> 00:03:03.542
I thought you were asking, I thought you

43
00:03:03.542 --> 00:03:08.728
meant this, but you meant, why not?
&gt;&gt; Speaker 3: Well no,

44
00:03:08.728 --> 00:03:11.563
yes, that is what I meant.
&gt;&gt; Justin: Okay.

45
00:03:11.563 --> 00:03:16.300
So that's why,
it could be faked, this for one.

46
00:03:16.300 --> 00:03:22.520
Then also arrays toString,
as you can see, array, if I had array.

47
00:03:24.570 --> 00:03:29.290
Its toString returns
a representation that's joined.

48
00:03:30.530 --> 00:03:33.064
So, you can think of it this way.

49
00:03:33.064 --> 00:03:38.530
Arrays toString method just does a join
and then returns whatever that is,

50
00:03:38.530 --> 00:03:43.677
but objects toString method,

51
00:03:43.677 --> 00:03:50.180
what that will do is it looks up
whatever that special type is.

52
00:03:50.180 --> 00:03:53.582
It can look up a special type and
know the- I forgot there's a term for

53
00:03:53.582 --> 00:03:59.120
it in the ECMA Script spec, which is like
the, if it's a regular expression or

54
00:03:59.120 --> 00:04:04.000
if it's whatever those
base constructors are.

55
00:04:04.000 --> 00:04:05.680
It'll actually give you the name for it.

56
00:04:05.680 --> 00:04:06.860
So it'll give you array back.

57
00:04:08.070 --> 00:04:15.380
That's why it does it that way.
&gt;&gt; Justin: Good question.

58
00:04:15.380 --> 00:04:21.010
All right, so let's go to the next- Let's,
I'm going to first make sure,

59
00:04:21.010 --> 00:04:24.070
just like hopefully you guys did,
make sure my test is working.

60
00:04:24.070 --> 00:04:25.220
It is, good.

61
00:04:25.220 --> 00:04:27.360
We'll go to the next exercise.

