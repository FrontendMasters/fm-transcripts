WEBVTT

1
00:00:00.000 --> 00:00:03.805
[MUSIC]

2
00:00:03.805 --> 00:00:06.410
&gt;&gt; Justin Meyer: Real quick,
just to recap what Alexis just did.

3
00:00:06.410 --> 00:00:09.970
It was all about metaprogramming, right?

4
00:00:09.970 --> 00:00:13.925
I didn't wanna, we didn't wanna write
that same code that would do for

5
00:00:13.925 --> 00:00:18.810
the parent method to,
given the original collection,

6
00:00:18.810 --> 00:00:22.080
go get the parent of every item in the
collection and create a new collection.

7
00:00:22.080 --> 00:00:24.628
I didn't wanna have to write
all of that code every time.

8
00:00:24.628 --> 00:00:27.780
So we were trying to
teachmeta programming so

9
00:00:27.780 --> 00:00:32.480
that instead, well, I just make
a function that gives the relationship

10
00:00:32.480 --> 00:00:36.830
between the source elements and the
elements we want in the final collection.

11
00:00:36.830 --> 00:00:39.800
I can just describe that relationship and

12
00:00:39.800 --> 00:00:44.860
I have a function that does all
of the repetitive work for us.

13
00:00:44.860 --> 00:00:45.900
And that's what we were showing.

14
00:00:45.900 --> 00:00:48.340
So if you look back at our example,

15
00:00:48.340 --> 00:00:50.220
if you wanna learn about
how to do metaprogramming,

16
00:00:50.220 --> 00:00:54.408
which is very common in open source
frameworks, this is an example of it.

17
00:00:54.408 --> 00:00:59.322
Our makeTraverser simply,
&gt;&gt; Justin Meyer: Given a function,

18
00:00:59.322 --> 00:01:03.805
returns another function that goes
through the source collection,

19
00:01:03.805 --> 00:01:08.134
calls the translation function to
get the new elements out of it and

20
00:01:08.134 --> 00:01:12.790
eventually compiles them all into
another jQuery collection, cool.

21
00:01:13.820 --> 00:01:19.120
So now we're going to finish up and
try to talk about how to get and

22
00:01:19.120 --> 00:01:24.169
set properties on an element, and
how to read styles from an element.

23
00:01:25.790 --> 00:01:29.139
Yep?
&gt;&gt; Student: What about when you said

24
00:01:29.139 --> 00:01:36.590
[INAUDIBLE] Don't you need need
to read it when you're done?

25
00:01:36.590 --> 00:01:39.080
Or the [INAUDIBLE]
&gt;&gt; Justin Meyer: Depending on what

26
00:01:39.080 --> 00:01:43.890
the context is, but
we can talk about memory

27
00:01:43.890 --> 00:01:48.319
management if there's time at the end.

28
00:01:48.319 --> 00:01:51.710
[COUGH] So, getting and
setting attributes.

29
00:01:53.320 --> 00:01:58.090
So the DOM provides a bunch of methods for
getting and setting attributes.

30
00:01:58.090 --> 00:02:02.700
You've all seen like a type
on a type attribute.

31
00:02:02.700 --> 00:02:05.510
Sometimes those are properties,
like you can see below.

32
00:02:05.510 --> 00:02:09.780
But you can also get and
set them as attributes, all right?

33
00:02:09.780 --> 00:02:15.911
So, real quick,
if I were to take a look at this page.

34
00:02:19.208 --> 00:02:23.400
&gt;&gt; Justin Meyer: And at this point,
also, I'm going to do all the exercises.

35
00:02:23.400 --> 00:02:26.570
You guys don't have to
follow along coding them.

36
00:02:26.570 --> 00:02:29.979
And we'll just use the final example
to build the tabs at the end.

37
00:02:31.080 --> 00:02:33.435
If you want to do the tabs,
we do it at the end.

38
00:02:33.435 --> 00:02:38.409
So I'll write all of my query for
us, but the tabs,

39
00:02:38.409 --> 00:02:42.829
you can use my query to
write the tabs widget.

40
00:02:42.829 --> 00:02:48.163
So every,
&gt;&gt; Justin Meyer: Element here,

41
00:02:48.163 --> 00:02:49.970
there's attributes.

42
00:02:49.970 --> 00:02:52.971
These are the attributes,
and I can get and set them.

43
00:02:52.971 --> 00:03:00.260
So if I get my,
&gt;&gt; Justin Meyer: Wrong button.

44
00:03:00.260 --> 00:03:05.160
If I open my console,
I get the input element.

45
00:03:08.925 --> 00:03:13.050
&gt;&gt; Justin Meyer: I can change its,
I can't change its attribute.

46
00:03:13.050 --> 00:03:15.710
What I wanna be able to do
is change its attribute.

47
00:03:15.710 --> 00:03:18.660
I can call manually the DOM
method setAttribute.

48
00:03:20.642 --> 00:03:26.827
&gt;&gt; Justin Meyer: To change
its id to INPUT-ID.

49
00:03:26.827 --> 00:03:33.135
And if I look in the DOM,
&gt;&gt; Justin Meyer: You

50
00:03:33.135 --> 00:03:34.806
can see the ID has changed.

51
00:03:34.806 --> 00:03:41.150
So jQuery's attribute method

52
00:03:41.150 --> 00:03:46.375
allows you to call attr,
give the name of the property,

53
00:03:46.375 --> 00:03:51.420
and the value you want that
attribute to be set to.

54
00:03:51.420 --> 00:03:54.760
So the name of the attribute and
the value I want the attribute set to.

55
00:03:54.760 --> 00:03:59.420
So if I did like foo-bar,
I'd expect this input to get

56
00:04:02.507 --> 00:04:05.983
&gt;&gt; Justin Meyer: I'd expect this input's

57
00:04:05.983 --> 00:04:10.620
id property to be set to foo-bar.

58
00:04:10.620 --> 00:04:14.270
And if we don't do it, I should
expect to be able to read it back.

59
00:04:15.280 --> 00:04:19.750
But that doesn't work because
I didn't implement attr.

60
00:04:19.750 --> 00:04:22.740
So you can probably guess
how to implement attr.

61
00:04:22.740 --> 00:04:24.090
Can someone guess real quick?

62
00:04:24.090 --> 00:04:26.434
It's gonna be just like the HTML.

63
00:04:26.434 --> 00:04:32.449
It's gonna be very similar to the HTML and
val functions.

64
00:04:33.990 --> 00:04:34.594
Where is it?

65
00:04:37.768 --> 00:04:41.230
&gt;&gt; Justin Meyer: What am I gonna
be doing when I set an attribute?

66
00:04:41.230 --> 00:04:43.152
What was that method called?

67
00:04:45.665 --> 00:04:46.540
&gt;&gt; Student 2: Set attribute?

68
00:04:46.540 --> 00:04:47.854
&gt;&gt; Justin Meyer: Set attribute.

69
00:04:47.854 --> 00:04:50.510
But it's good to repeat, cuz I want
you guys to remember this stuff.

70
00:04:50.510 --> 00:04:52.960
So if it seems like I'm giving
you an obvious question,

71
00:04:52.960 --> 00:04:54.781
it's just to hammer it home.

72
00:04:55.900 --> 00:04:58.200
So I wanna know if I'm in the setter.

73
00:04:58.200 --> 00:05:01.790
So if I'm gonna be doing a set, that
means I'm gonna be getting two arguments.

74
00:05:01.790 --> 00:05:08.884
So I'll do arguments.length
is greater than 1, meaning 2.

75
00:05:08.884 --> 00:05:15.243
If it is,
I'm going to go through each item and

76
00:05:15.243 --> 00:05:19.167
set its attribute to value.

77
00:05:36.838 --> 00:05:38.140
&gt;&gt; Justin Meyer: Make sense right there?

78
00:05:38.140 --> 00:05:39.870
Just simply setting the attribute.

79
00:05:41.320 --> 00:05:44.889
And then if I'm not doing that,
I'm reading.

80
00:05:44.889 --> 00:05:47.378
It's again,
the same thing as we did before.

81
00:05:47.378 --> 00:05:48.570
I'm gonna return.

82
00:05:48.570 --> 00:05:53.100
Make sure there's a 0 with a first
property in our collection, and

83
00:05:53.100 --> 00:05:55.090
I'm going to call what?

84
00:05:56.990 --> 00:05:58.990
&gt;&gt; Student 2: This 0 getAttribute.

85
00:05:58.990 --> 00:05:59.571
&gt;&gt; Justin Meyer: Awesome.

86
00:06:02.590 --> 00:06:03.802
&gt;&gt; Justin Meyer: With the attrName.

