WEBVTT

1
00:00:00.000 --> 00:00:03.687
[MUSIC]

2
00:00:03.687 --> 00:00:08.859
&gt;&gt; Justin Meyer: The first thing
I need to do is check if $ was

3
00:00:08.859 --> 00:00:13.747
called without this being set correctly

4
00:00:13.747 --> 00:00:18.040
to a new instance of $, right.

5
00:00:18.040 --> 00:00:19.790
So there's a few ways that people do this.

6
00:00:19.790 --> 00:00:23.426
One way I've seen people do it, is they'll
do if well what if this is just a window.

7
00:00:26.072 --> 00:00:30.398
&gt;&gt; Justin Meyer: All right,
cuz that's what, if I just were to call,

8
00:00:30.398 --> 00:00:37.373
try just to call $
&gt;&gt; Justin Meyer: lI like this,

9
00:00:37.373 --> 00:00:41.671
inside $, this would be the window.

10
00:00:41.671 --> 00:00:45.223
That's an okay way of doing it,
but I'll show you a better way.

11
00:00:45.223 --> 00:00:50.394
And then bonus points for
anybody who can explain the difference and

12
00:00:50.394 --> 00:00:56.660
why the way that I'm about to do it is
better than checking if it's a window.

13
00:00:56.660 --> 00:01:01.198
So the better way of doing it is
should check if this is an instance of

14
00:01:03.330 --> 00:01:03.910
&gt;&gt; Justin Meyer: $.

15
00:01:05.880 --> 00:01:11.564
And if it's not, so
I'm gonna wrap this in parentheses,

16
00:01:11.564 --> 00:01:16.907
if it's not I'm going to
return new $(selector).

17
00:01:21.897 --> 00:01:26.630
&gt;&gt; Justin Meyer: So that's all they
needed to do for this exercise.

18
00:01:26.630 --> 00:01:31.250
What this is going to do again is just
check that hey, this is the window

19
00:01:31.250 --> 00:01:36.040
if called like this, it's not an instance
of $, so we're going to force the issue.

20
00:01:36.040 --> 00:01:41.080
This is kind of how jQuery does it,
does anybody know

21
00:01:41.080 --> 00:01:48.199
why doing it this way is better than
just doing if( this === window).

22
00:01:53.470 --> 00:01:58.014
&gt;&gt; Justin Meyer: Subtle,
the reason is because it's very possible

23
00:01:58.014 --> 00:02:01.818
people do this a lot when they're adding,

24
00:02:01.818 --> 00:02:07.313
if you're trying to make a widget
that can work from jQuery but

25
00:02:07.313 --> 00:02:12.690
kept in it's own version
of jQuery on some property.

26
00:02:12.690 --> 00:02:16.080
For instance let's just say somewhere
else in our tabs widget, for

27
00:02:16.080 --> 00:02:17.850
some reason we decided to make,

28
00:02:17.850 --> 00:02:22.720
we wanted our tabs to have a $ property
that it was always gonna use everywhere.

29
00:02:22.720 --> 00:02:27.310
So we're just gonna alias jQuery to $ and

30
00:02:27.310 --> 00:02:33.720
then it was always gonna write all
of its code like tabs.$( "Iis").

31
00:02:33.720 --> 00:02:36.800
Right for some reason somebody
decided to do it that way.

32
00:02:36.800 --> 00:02:40.170
Well in this case this is not
gonna to be the window anymore,

33
00:02:40.170 --> 00:02:43.330
it's gonna be some tabs or
some other object.

34
00:02:43.330 --> 00:02:50.330
So doing it,
if( this === window) will fail.

35
00:02:50.330 --> 00:02:53.900
So to be a little bit better
about making sure that

36
00:02:56.180 --> 00:02:59.930
this is what you want it to be, instead
of just checking that at the window.

37
00:02:59.930 --> 00:03:05.036
We explicitly make sure
it's an instance of $,

38
00:03:05.036 --> 00:03:11.020
if it's not then we enforce
the issue to make it that way.

39
00:03:13.190 --> 00:03:17.500
Cool, any questions in the?

40
00:03:17.500 --> 00:03:20.600
There was a good question that
someone wanted me to answer.

41
00:03:24.740 --> 00:03:32.047
Okay, so Kevin L asked,
can you explain why inside HTML,

42
00:03:32.047 --> 00:03:40.130
this[0] can be safely relied on, if you
have an empty collection it will break.

43
00:03:43.000 --> 00:03:46.310
So, that's a really good point.

44
00:03:46.310 --> 00:03:50.278
So for our example it's okay to kind of
write this because we're not going to

45
00:03:50.278 --> 00:03:52.574
really be dealing with empty collections.

46
00:03:52.574 --> 00:03:56.648
However, jQuery,
if you give it an empty collection,

47
00:03:56.648 --> 00:04:00.300
will make sure that it
doesn't throw any errors.

48
00:04:00.300 --> 00:04:04.192
This would error on an empty collection
because there would be no this.0.

49
00:04:04.192 --> 00:04:08.060
So when it would try to read innerHTML
from something that's undefined,

50
00:04:08.060 --> 00:04:09.840
this will throw an error.

51
00:04:09.840 --> 00:04:12.500
To fix this, and if you guys want to,
you don't need to fix this in your code,

52
00:04:12.500 --> 00:04:15.950
but if you want to fix it
you would just do a check.

53
00:04:15.950 --> 00:04:23.360
You're going to make sure that this[0]
exists, and then call this[0].innerHTML.

54
00:04:23.360 --> 00:04:28.520
If you haven't seen this kind of
code before, all this does is,

55
00:04:28.520 --> 00:04:31.520
all it really is doing is, if (this[0]).

56
00:04:33.390 --> 00:04:36.390
Because if that's true then it
will execute this code here.

57
00:04:38.000 --> 00:04:41.857
So really that looks like return,

58
00:04:41.857 --> 00:04:48.375
this innerHTML we're pretty
much doing the same thing but

59
00:04:48.375 --> 00:04:51.992
this is a nice shorthand for it.

60
00:04:51.992 --> 00:04:57.997
So this would make your code more
jQuery like, that it doesn't error

61
00:04:57.997 --> 00:05:04.462
if
&gt;&gt; Justin Meyer: this[0]

62
00:05:04.462 --> 00:05:08.840
value doesn't exist,
if it's an empty collection and

63
00:05:08.840 --> 00:05:13.784
you try to read from it and
go back to the, any other questions?

64
00:05:16.330 --> 00:05:18.990
&gt;&gt; Justin Meyer: Awesome,
okay going to scroll down here.

