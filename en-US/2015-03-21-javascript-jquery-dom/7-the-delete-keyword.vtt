WEBVTT

1
00:00:00.000 --> 00:00:04.055
[MUSIC]

2
00:00:04.055 --> 00:00:07.066
&gt;&gt; Alexis Abril: So earlier we were
talking about what is delete doing,

3
00:00:07.066 --> 00:00:11.387
deletes removing a key from our object
is it really deleting data from memory,

4
00:00:11.387 --> 00:00:13.720
what's going on with delete?

5
00:00:13.720 --> 00:00:17.590
So let's take a look at one
of our examples from earlier.

6
00:00:17.590 --> 00:00:21.268
We have me name first
is gonna be Justin and

7
00:00:21.268 --> 00:00:27.058
then we have a reference,
name = me.name our little shortcut.

8
00:00:27.058 --> 00:00:30.997
And then we're gonna
call delete me.name and

9
00:00:30.997 --> 00:00:34.740
then name.first is still gonna be Justin.

10
00:00:37.120 --> 00:00:41.480
Really quickly, does anyone,
does that look weird to anyone first?

11
00:00:41.480 --> 00:00:45.549
Got a few nods, yeah, that looks weird,
this isn't right, this guys lying again,

12
00:00:45.549 --> 00:00:47.560
let's type this into a console.

13
00:00:47.560 --> 00:00:51.660
Let's work out in memory
why this is the way it is.

14
00:00:51.660 --> 00:00:55.190
So we're gonna take a little
graphical example here on the side

15
00:00:55.190 --> 00:00:56.920
of what's going on in memory.

16
00:00:56.920 --> 00:00:58.722
Here is our window.

17
00:00:58.722 --> 00:01:04.487
And we're gonna have this structure is
gonna be created from the first object for

18
00:01:04.487 --> 00:01:05.773
me.name first.

19
00:01:05.773 --> 00:01:07.850
We're not gonna talk about
the second one just yet.

20
00:01:07.850 --> 00:01:11.150
So me as a pointer to
a new object in memory.

21
00:01:11.150 --> 00:01:15.660
That object has a pointer called
name which is gonna point to

22
00:01:15.660 --> 00:01:16.930
another object in memory.

23
00:01:18.010 --> 00:01:20.961
Which has a pointer called
first which will lead

24
00:01:20.961 --> 00:01:23.780
us to our primitive
Justin string in memory.

25
00:01:23.780 --> 00:01:25.640
So this is the path we're taking.

26
00:01:25.640 --> 00:01:26.980
We have our scope.

27
00:01:26.980 --> 00:01:30.730
We have a me pointer and two objects
ending at a string at the end of the line.

28
00:01:31.760 --> 00:01:32.400
So far so good?

29
00:01:33.480 --> 00:01:35.850
This is the road we're gonna travel down.

30
00:01:35.850 --> 00:01:39.170
Now name is another pointer,
right off the bat.

31
00:01:39.170 --> 00:01:41.740
Var name is another pointer in memory.

32
00:01:41.740 --> 00:01:48.912
So it's going to start here and
it happens to points to our first object.

33
00:01:48.912 --> 00:01:52.290
This is a little bit easier way to
kind of consume this information.

34
00:01:53.460 --> 00:01:57.849
So when we call delete me.name.

35
00:01:59.940 --> 00:02:02.033
That's the pointer that we're
removing I don't know if you guys can

36
00:02:02.033 --> 00:02:02.691
see that animation.

37
00:02:02.691 --> 00:02:06.135
It's really subtle, [INAUDIBLE] walk.

38
00:02:06.135 --> 00:02:09.550
I'm going to dare walk away from the
podium here without tripping on any wires.

39
00:02:09.550 --> 00:02:13.190
This reference,
this link is all we're removing.

40
00:02:13.190 --> 00:02:16.210
When we called the delete key word
in this line of code right here,

41
00:02:16.210 --> 00:02:20.280
deleting me.name,
this is the pointer we're going to remove.

42
00:02:20.280 --> 00:02:25.047
So when you have name.first,
this path is still intact.

43
00:02:25.047 --> 00:02:31.366
So realize if delete was actually
deleting data from memory.

44
00:02:31.366 --> 00:02:38.277
I would probably expect this entire
object to be removed and be cleaned up.

45
00:02:38.277 --> 00:02:39.714
But that's not actually what's going on.

46
00:02:39.714 --> 00:02:44.698
You're actually just working with
pointers either reallocating

47
00:02:44.698 --> 00:02:48.352
reassigning them or
removing them from memory.

48
00:02:48.352 --> 00:02:51.010
Does that make sense?

49
00:02:51.010 --> 00:02:52.919
That clear things up a little bit?

50
00:02:52.919 --> 00:02:55.740
There's probably gonna be some weirdness
when you're working with the delete key

51
00:02:55.740 --> 00:02:58.380
word, you're not seeing maybe
what's going on behind the scenes.

52
00:02:58.380 --> 00:03:01.644
This is actually one of
the things that's going

53
00:03:01.644 --> 00:03:04.467
on.
&gt;&gt; Student: So basically just expect that

54
00:03:04.467 --> 00:03:09.060
delete is gonna delete
a reference not delete a value.

55
00:03:09.060 --> 00:03:12.089
&gt;&gt; Alexis Abril: Yes, most of what you're

56
00:03:12.089 --> 00:03:17.468
working with in JavaScript
is with pointers.

57
00:03:17.468 --> 00:03:22.423
So that part alone trips a lot
of people up right off the bat.

58
00:03:22.423 --> 00:03:26.277
Cuz the same thing is gonna happen
with when we're talking about me and

59
00:03:26.277 --> 00:03:29.232
name, the same thing is
happening with assignment.

60
00:03:29.232 --> 00:03:33.855
But we're gonna show that here in two
slides, why that first slide was really,

61
00:03:33.855 --> 00:03:35.520
really weird, too.

62
00:03:35.520 --> 00:03:36.595
It's just being able to understand,

63
00:03:36.595 --> 00:03:42.415
remember that things are just
pointing to places in memory.

64
00:03:42.415 --> 00:03:44.665
A lot of times when I'm
dealing with modules and

65
00:03:44.665 --> 00:03:47.595
a large application replication
I haven't worked with or

66
00:03:47.595 --> 00:03:52.225
even something I'm just building for the
first time, I'll draw stuff like this out.

67
00:03:52.225 --> 00:03:55.154
Just for my own sake,
that's what going on.

68
00:03:55.154 --> 00:03:58.820
So it make it really really
easy to understand seemingly

69
00:03:58.820 --> 00:04:03.445
more complex concepts.
&gt;&gt; Student: What would happen if you

70
00:04:03.445 --> 00:04:06.034
deleted me?
&gt;&gt; Alexis Abril: What would happen if we

71
00:04:06.034 --> 00:04:08.330
deleted me in this context?

72
00:04:08.330 --> 00:04:12.340
So me is our pointer to this object.

73
00:04:12.340 --> 00:04:18.822
So if we called delete me,
what do you guys think would happen?

74
00:04:18.822 --> 00:04:21.219
Yeah.
&gt;&gt; Student: The me pointer would go away

75
00:04:21.219 --> 00:04:24.609
and then that object would get
garbage collected because,

76
00:04:24.609 --> 00:04:27.592
there's no references to it.
&gt;&gt; Alexis Abril: The me pointer would go

77
00:04:27.592 --> 00:04:30.678
away, and that object would
get garbage collected okay.

78
00:04:30.678 --> 00:04:39.545
Okay, any other thoughts, concerns.
&gt;&gt; Alexis Abril: No, this part, good.

79
00:04:39.545 --> 00:04:41.797
Was somebody gonna?
&gt;&gt; Student 2: There's still be a reference

80
00:04:41.797 --> 00:04:43.700
to it through name.
&gt;&gt; Alexis Abril: There

81
00:04:43.700 --> 00:04:45.204
would still be a reference.

82
00:04:45.204 --> 00:04:51.392
Okay cuz you're saying even if this is
deleted in memory this would still exist.

83
00:04:51.392 --> 00:04:57.020
That parts true that is a true statement
with the if condition on before that.

84
00:04:59.530 --> 00:05:03.896
There's a little,
&gt;&gt; Student: No, that's not true.

85
00:05:03.896 --> 00:05:08.420
Me would,
me is referencing the name object but

86
00:05:08.420 --> 00:05:12.820
name does not reference the me object.

87
00:05:12.820 --> 00:05:16.775
So the me object if
&gt;&gt; Alexis Abril: It depends.

88
00:05:16.775 --> 00:05:22.164
That second variable, name, does.
&gt;&gt; Student: That

89
00:05:22.164 --> 00:05:26.641
references the name object,
but it doesn't actually

90
00:05:26.641 --> 00:05:30.100
reference the me object.
&gt;&gt; Alexis Abril: Okay, yeah right.

91
00:05:30.100 --> 00:05:33.562
&gt;&gt; Student: [CROSSTALK] And you know but

92
00:05:33.562 --> 00:05:34.963
&gt;&gt; Alexis Abril: I misunderstood.

93
00:05:34.963 --> 00:05:37.029
This will not be removed.

94
00:05:37.029 --> 00:05:40.148
The trick is neither will be removed.

95
00:05:40.148 --> 00:05:45.818
[CROSSTALK] Delete is only
going to actually remove

96
00:05:45.818 --> 00:05:52.165
attribute on an existing
object not the object itself.

97
00:05:52.165 --> 00:05:53.730
And me is pointing to an object itself.

98
00:05:54.970 --> 00:05:59.460
So this is something where
If you really wanted to have

99
00:05:59.460 --> 00:06:00.720
the garbage collector remove it.

100
00:06:00.720 --> 00:06:04.137
You could say me equals,
you know, undefined.

101
00:06:04.137 --> 00:06:07.793
And then the garbage collector be like
this isn't being used anymore if there's

102
00:06:07.793 --> 00:06:08.470
no hooks to it.

103
00:06:08.470 --> 00:06:12.460
If nothing is needing that has as
a reference to that me variable,

104
00:06:12.460 --> 00:06:15.190
then the garbage collector
will just come along but

105
00:06:15.190 --> 00:06:18.700
deleting yourself isn't
something you can do.

106
00:06:18.700 --> 00:06:23.623
I feel like there's one browser way back
in the day that let you do stuff like

107
00:06:23.623 --> 00:06:25.604
that.
&gt;&gt; Student: Right, but

108
00:06:25.604 --> 00:06:31.628
here's the one other thing,
just to be clear.

109
00:06:31.628 --> 00:06:34.830
When you delete me,
it doesn't do anything.

110
00:06:34.830 --> 00:06:36.130
The lead actually turns false.

111
00:06:36.130 --> 00:06:40.523
So, you can't actually delete a variable,

112
00:06:40.523 --> 00:06:45.850
it won't,
remove the variable from the call object.

113
00:06:45.850 --> 00:06:51.210
And, it will not set it to point to no or
undefined or anything like that.

114
00:06:51.210 --> 00:06:54.950
And not only, the interesting thing about
the lead it does return true or false.

115
00:06:54.950 --> 00:06:59.140
But it only returns true
if your syntax is right.

116
00:06:59.140 --> 00:07:01.120
If there's a dot operator, really.

117
00:07:01.120 --> 00:07:05.570
So the interesting thing, if you did
delete me.name here, it would return true.

118
00:07:05.570 --> 00:07:08.060
And if you immediately follow
that with delete me.name,

119
00:07:08.060 --> 00:07:10.000
it would still return true.

120
00:07:10.000 --> 00:07:14.010
So the return doesn't tell you
if it did delete anything.

121
00:07:14.010 --> 00:07:16.650
It's could there have been
something deleted there?

122
00:07:17.810 --> 00:07:19.180
It returns true.

123
00:07:19.180 --> 00:07:22.150
Then if you just delete
me it returns false.

124
00:07:22.150 --> 00:07:23.930
Like I couldn't, this is wrong.

125
00:07:23.930 --> 00:07:25.470
You gave me something wrong.

126
00:07:25.470 --> 00:07:27.895
That's how delete works it's confusing,

127
00:07:27.895 --> 00:07:31.920
I don't know what else to say about that.
&gt;&gt; Alexis Abril: [LAUGH] It's a very

128
00:07:31.920 --> 00:07:37.557
special animal a good rule to
live by with this is if you're

129
00:07:37.557 --> 00:07:43.428
focused on dereferencing
attributes of objects of existing

130
00:07:43.428 --> 00:07:48.850
objects that's really only
what you need to use it for.

131
00:07:50.080 --> 00:07:52.950
So if you wanted to say delete me.name if

132
00:07:52.950 --> 00:07:57.170
you wanted to remove some key from
an existing hash and not the hash itself.

133
00:07:57.170 --> 00:08:01.421
That's really what you use this stuff for.

134
00:08:01.421 --> 00:08:05.417
Does that makes sense?
&gt;&gt; Student 2: So, kind of just to recap if

135
00:08:05.417 --> 00:08:10.203
we do delete me, name.first no longer.
&gt;&gt; Alexis Abril: Name.first

136
00:08:10.203 --> 00:08:13.123
will still exist.
&gt;&gt; Student 2: Okay, okay.

137
00:08:13.123 --> 00:08:13.861
&gt;&gt; Student 3: So, if you do

138
00:08:13.861 --> 00:08:14.940
&gt;&gt; Alexis Abril: That's the really

139
00:08:14.940 --> 00:08:15.684
weird part.

140
00:08:15.684 --> 00:08:19.198
[LAUGH]
&gt;&gt; Student 3: So, after you delete me if

141
00:08:19.198 --> 00:08:23.040
you do me.name you'll get object?
&gt;&gt; Alexis Abril: If for

142
00:08:23.040 --> 00:08:25.672
deleting me, yes, yes.

143
00:08:25.672 --> 00:08:26.540
You'll still get the object.

144
00:08:26.540 --> 00:08:30.588
You'll still get the first object up here,
yeah.

145
00:08:30.588 --> 00:08:31.200
&gt;&gt; [SOUND]

146
00:08:31.200 --> 00:08:33.822
&gt;&gt; Alexis Abril: Bless you, Is that weird?

147
00:08:33.822 --> 00:08:34.668
Who thinks that's weird?

148
00:08:34.668 --> 00:08:35.881
I think that's crazy.

149
00:08:35.881 --> 00:08:40.421
[LAUGH] So this is one of the weird parts
but it's always good to understand because

150
00:08:40.421 --> 00:08:44.117
especially if you're building
a rich JavaScript application.

151
00:08:44.117 --> 00:08:47.840
You're probably going have a need for this
keyword to fill, a need for this keyword.

152
00:08:47.840 --> 00:08:50.500
Be aware of what kind of behaviors that
you're gonna get into especially if you're

153
00:08:50.500 --> 00:08:52.690
wrapping some kind of condition around.

154
00:08:52.690 --> 00:08:54.840
While if it was deleted
do this other thing.

155
00:08:54.840 --> 00:08:57.040
That's not going to respond the way
you think it's going to respond.

