WEBVTT

1
00:00:00.000 --> 00:00:03.771
[MUSIC]

2
00:00:03.771 --> 00:00:06.080
&gt;&gt; Alexis Abril: These
are meant to be difficult.

3
00:00:06.080 --> 00:00:09.880
Like we said earlier, they're really
base or fundamental concepts, but

4
00:00:09.880 --> 00:00:13.589
they're intentionally hard, but
hopefully when you leave today,

5
00:00:13.589 --> 00:00:15.877
it will be with a more
fundamental understand,

6
00:00:15.877 --> 00:00:18.140
a stronger fundamental understanding
of what we're going through.

7
00:00:18.140 --> 00:00:20.210
So let's go through this exercise here.

8
00:00:20.210 --> 00:00:21.760
Let's build up the new keyword together.

9
00:00:23.370 --> 00:00:26.840
So, we go over to our new keyword,

10
00:00:26.840 --> 00:00:32.568
I wanna blow this down a bit.

11
00:00:32.568 --> 00:00:37.130
Okay, so what we did first is a really,
really good first step.

12
00:00:37.130 --> 00:00:42.490
I do this a lot is verbalized,
what are the things we need to do?

13
00:00:42.490 --> 00:00:44.830
These, remember the four
things we need to do?

14
00:00:44.830 --> 00:00:50.392
What do we need to do for this to work?
&gt;&gt; Speaker 2: Create a new-

15
00:00:50.392 --> 00:00:52.580
&gt;&gt; Alexis Abril: Create a new object.

16
00:00:52.580 --> 00:00:57.630
Got it, what's the next thing?
&gt;&gt; Speaker 3: Set

17
00:00:57.630 --> 00:01:01.676
the proto to constructor prototype.
&gt;&gt; Alexis Abril: Yeah,

18
00:01:01.676 --> 00:01:08.180
set proto to constructor prototype.

19
00:01:08.180 --> 00:01:11.180
Set whose proto?
&gt;&gt; Speaker 3: The objects.

20
00:01:11.180 --> 00:01:12.510
&gt;&gt; Alexis Abril: New objects,

21
00:01:12.510 --> 00:01:14.090
proto searches prototype.

22
00:01:14.090 --> 00:01:17.903
Then what do we need to do?
&gt;&gt; Speaker 4: Call online.

23
00:01:17.903 --> 00:01:20.020
&gt;&gt; Alexis Abril: Mm-hm.

24
00:01:20.020 --> 00:01:23.434
Invoke our constructor

25
00:01:23.434 --> 00:01:27.430
with anything special?
&gt;&gt; Speaker 5: Our new

26
00:01:27.430 --> 00:01:30.000
object.
&gt;&gt; Alexis Abril: Our new object

27
00:01:30.000 --> 00:01:32.230
as context.

28
00:01:32.230 --> 00:01:33.565
And then what's the final thing we need to

29
00:01:33.565 --> 00:01:35.230
do?

30
00:01:35.230 --> 00:01:36.200
&gt;&gt; Speaker 3: Return.
&gt;&gt; Alexis Abril: Return.

31
00:01:36.200 --> 00:01:37.965
Return our new object.

32
00:01:37.965 --> 00:01:43.580
These are the essential points that
our new keywords are gonna do.

33
00:01:43.580 --> 00:01:46.590
So, let's create a new object.

34
00:01:46.590 --> 00:01:49.340
Var o equals curly brace, boom.

35
00:01:49.340 --> 00:01:50.620
Step one complete.

36
00:01:51.990 --> 00:01:55.110
Next, we wanna set the proto so
we know where to look for things.

37
00:01:55.110 --> 00:02:01.456
We're gonna say o.proto to
constructors prototype,

38
00:02:01.456 --> 00:02:06.470
so, constructor.prototype, awesome.

39
00:02:06.470 --> 00:02:08.540
Then we need to invoke our constructor,
but

40
00:02:08.540 --> 00:02:11.320
we need to set the context
to our new object.

41
00:02:11.320 --> 00:02:17.000
So we're going to say constructor.,
we can use call and apply because

42
00:02:17.000 --> 00:02:22.620
these are the methods we can use to invoke
a function, but set context we specify.

43
00:02:22.620 --> 00:02:25.960
I'm going to use apply because it matches
up nicely with our signature here.

44
00:02:25.960 --> 00:02:30.070
We have an array of arguments, and
apply takes an array of arguments.

45
00:02:30.070 --> 00:02:37.160
Some would say o, args, and
then return our new objects.

46
00:02:39.540 --> 00:02:40.620
Save this.

47
00:02:41.710 --> 00:02:48.080
Let's go back for a test page, and
our new keyword test is now passing.

48
00:02:48.080 --> 00:02:50.670
Now, two of you have stumbled upon this,
and

49
00:02:50.670 --> 00:02:55.650
I want to talk about this a little bit,
too, is what happens?

50
00:02:55.650 --> 00:02:56.840
I'm gonna go to another test page here.

51
00:02:58.480 --> 00:03:00.460
We have a person.

52
00:03:00.460 --> 00:03:05.040
Let me copy this up here and
let's discuss.

53
00:03:05.040 --> 00:03:06.140
So, here's our constructor.

54
00:03:14.280 --> 00:03:22.660
So, in our constructor,
what happens if you ever return value?

55
00:03:27.650 --> 00:03:30.120
In this scenario,
what does the new keyword actually do?

56
00:03:30.120 --> 00:03:33.405
&gt;&gt; Speaker 6: It returns

57
00:03:33.405 --> 00:03:35.700
foo.
&gt;&gt; Alexis Abril: Returns foo?

58
00:03:38.660 --> 00:03:43.362
Any other thoughts?
&gt;&gt; Alexis Abril: This is

59
00:03:43.362 --> 00:03:46.820
a little bit of a weird edge case,
it will return foo.

60
00:03:46.820 --> 00:03:49.339
If you're actually for primitive strings,

61
00:03:49.339 --> 00:03:53.130
do you know at the top of your heads
if this will actually return foo?

62
00:03:54.590 --> 00:03:59.910
There's a really weird condition,
or a set of conditions, not weird.

63
00:03:59.910 --> 00:04:03.753
But there is a specific set of conditions.
&gt;&gt; Speaker 7: I think for me there are,

64
00:04:03.753 --> 00:04:06.290
it still returns the object.
&gt;&gt; Alexis Abril: It'll still return

65
00:04:06.290 --> 00:04:08.190
the object for persons?

66
00:04:08.190 --> 00:04:09.940
There's a few conditions here.

67
00:04:09.940 --> 00:04:15.840
If, so here, I'm gonna actually say,
if we were actually doing the true

68
00:04:15.840 --> 00:04:21.100
implementation, we would say something
like return value to be very verbose.

69
00:04:21.100 --> 00:04:24.560
And then we would pass return value
through a little set of conditions,

70
00:04:24.560 --> 00:04:28.220
if the return value is this condition,
then return it.

71
00:04:28.220 --> 00:04:31.265
If it's not that condition,
then return our new object.

72
00:04:31.265 --> 00:04:34.290
But this is the case where
if there's a return value,

73
00:04:34.290 --> 00:04:37.790
we need to check what it
is if it's a new object.

74
00:04:37.790 --> 00:04:41.480
If it itself is an object,
we will definitely return that object.

75
00:04:41.480 --> 00:04:42.890
Not our new object.

76
00:04:42.890 --> 00:04:45.310
Whatever object is returned
from our constructor.

77
00:04:45.310 --> 00:04:50.243
So if we did something like this.
&gt;&gt; Alexis Abril: Foo bar,

78
00:04:50.243 --> 00:04:55.104
this will definitely return foo colon bar.

79
00:04:55.104 --> 00:04:59.380
It'll forget all the things we set up with
proto chaining, all that's out the window.

80
00:04:59.380 --> 00:05:00.680
It's just gonna return this object.

81
00:05:02.170 --> 00:05:05.140
So, be wary if you're setting
up constructor functions.

82
00:05:05.140 --> 00:05:06.320
Even if using the new keyword,

83
00:05:06.320 --> 00:05:11.550
if there's a return value,
this will likely overwrite it.

84
00:05:12.940 --> 00:05:13.440
Okay.

85
00:05:15.260 --> 00:05:23.120
So that is our new keyword,
there's couple things in addition here.

86
00:05:24.632 --> 00:05:26.230
Really quickly.

87
00:05:26.230 --> 00:05:30.230
So, in summary,
new keyword is new create a new object,

88
00:05:30.230 --> 00:05:33.186
set the proto of that object to
the prototype of our constructor.

89
00:05:33.186 --> 00:05:38.400
It's going to invoke the constructor
with our new object as context,

90
00:05:38.400 --> 00:05:40.850
and this can return the new
object we've created.

91
00:05:42.520 --> 00:05:45.571
It seems like a lot to remember,
this is really,

92
00:05:45.571 --> 00:05:49.160
really important when you're
constructing your own applications.

93
00:05:49.160 --> 00:05:54.430
You're creating new objects in new
instances of things all the time

94
00:05:54.430 --> 00:05:57.708
a lot of times when you probably
don't even realize it, and then talk,

95
00:05:57.708 --> 00:06:03.240
we're going to go back to earlier today we
said, what would be a case where you want

96
00:06:03.240 --> 00:06:08.810
to check if this is the window or
not, and the new key word sets this.

97
00:06:08.810 --> 00:06:13.180
There's a very popular case where you
create a new instance of things and

98
00:06:13.180 --> 00:06:14.580
you don't even realize it, necessarily.

99
00:06:15.710 --> 00:06:23.860
Okay, in memory, very simple example,
we have our dog constructor function.

100
00:06:23.860 --> 00:06:31.710
This is going to, why would you assign,

101
00:06:31.710 --> 00:06:35.420
so with a question online,
are you handling these Justin?

102
00:06:35.420 --> 00:06:35.920
Gotcha.

103
00:06:35.920 --> 00:06:37.430
Sorry.
No, no, no, I missed it.

104
00:06:38.620 --> 00:06:39.780
I just saw the last one.

105
00:06:42.720 --> 00:06:44.670
Why do you assign the proto property?

106
00:06:44.670 --> 00:06:46.600
The question is why do you
sign the proto property and

107
00:06:46.600 --> 00:06:49.510
not to the prototype property?

108
00:06:49.510 --> 00:06:54.068
Okay, so again,
this is a good way to remember this.

109
00:06:54.068 --> 00:06:55.740
One, well,
there's two things to remember here,

110
00:06:55.740 --> 00:06:59.730
one, the proto property itself is special.

111
00:06:59.730 --> 00:07:03.750
When you're looking for
a method or property on an object,

112
00:07:03.750 --> 00:07:08.330
if it's not there,
it knows to walk up the proto chain.

113
00:07:09.610 --> 00:07:11.590
Not the prototype chain.
&gt;&gt; Speaker 7: By it,

114
00:07:11.590 --> 00:07:14.172
you mean the .operator.
&gt;&gt; Alexis Abril: I'm sorry, the .operator.

115
00:07:14.172 --> 00:07:14.840
Thank you.

116
00:07:14.840 --> 00:07:16.560
The .operator will walk up approaching,

117
00:07:16.560 --> 00:07:21.330
it's not gonna walk up any prototype
chain or any other property chains.

118
00:07:21.330 --> 00:07:23.660
It's just proto, that's treated special.

119
00:07:23.660 --> 00:07:27.980
So when we assign that,
it's a very explicit

120
00:07:31.220 --> 00:07:34.090
path that we wanna go down.

121
00:07:35.820 --> 00:07:38.670
Yes, you could set the prototype property,
but it'll do nothing.

122
00:07:42.200 --> 00:07:43.450
Okay, so

123
00:07:43.450 --> 00:07:47.360
I have a very simple example here, var
dog equals functions as our constructor.

124
00:07:47.360 --> 00:07:49.310
This is what it's gonna
set up in memory for us.

125
00:07:49.310 --> 00:07:53.390
We're gonna have dog, which is a pointer
to a function in memory, and remember,

126
00:07:53.390 --> 00:07:59.880
functions have prototypes,
this prototype will be just a new object.

127
00:07:59.880 --> 00:08:04.150
And then we're going to say pup equals
new dog, we're using the new keyword and

128
00:08:04.150 --> 00:08:06.380
invoking our constructor.

129
00:08:06.380 --> 00:08:11.060
We're going to have a pointer called pup,
it's going to point to a new object,

130
00:08:11.060 --> 00:08:15.620
whose proto property is
going to point to our

131
00:08:17.160 --> 00:08:19.750
prototype of dog prototype
of our constructor.

132
00:08:20.780 --> 00:08:25.052
At a very simple level,
this is what the new keyword does for us.

