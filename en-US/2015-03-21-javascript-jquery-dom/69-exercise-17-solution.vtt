WEBVTT

1
00:00:00.000 --> 00:00:03.973
[MUSIC]

2
00:00:03.973 --> 00:00:06.260
&gt;&gt; Alexis Abril: Let's talk
about the solution to this.

3
00:00:06.260 --> 00:00:12.275
So we have our pseudo code, our comments
set up, which, again, definitely do this.

4
00:00:12.275 --> 00:00:16.466
Any time you're approaching any kind of
new problem you've never seen before,

5
00:00:16.466 --> 00:00:18.324
write it out, try to verbalize it.

6
00:00:18.324 --> 00:00:22.790
Writing these comments out are much more
difficult than looking up the syntax.

7
00:00:22.790 --> 00:00:24.580
But let's check this out.

8
00:00:24.580 --> 00:00:28.080
We have our accumulator,
we have our array elements.

9
00:00:28.080 --> 00:00:31.880
And we need to do something for
each element in our collection.

10
00:00:31.880 --> 00:00:35.833
So what do you guys think we should do if
we want to iterate through each element in

11
00:00:35.833 --> 00:00:36.721
our collection?

12
00:00:39.833 --> 00:00:41.118
&gt;&gt; Alexis Abril: Anybody
have any thoughts?

13
00:00:41.118 --> 00:00:43.449
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Alexis Abril: Well, I mean,

14
00:00:43.449 --> 00:00:47.297
how can we iterate through
each in our collection?

15
00:00:47.297 --> 00:00:48.155
&gt;&gt; Speaker 2: With each?

16
00:00:48.155 --> 00:00:50.410
&gt;&gt; Alexis Abril: With each,
yeah, we have a helper.

17
00:00:51.570 --> 00:00:58.330
So we're gonna go through
each of something, right?

18
00:00:58.330 --> 00:00:59.170
What is that something?

19
00:01:01.370 --> 00:01:02.673
Do you guys remember from earlier?

20
00:01:02.673 --> 00:01:03.261
&gt;&gt; Speaker 3: This.

21
00:01:03.261 --> 00:01:09.146
&gt;&gt; Alexis Abril: This, yep,
we're gonna get our function.

22
00:01:09.146 --> 00:01:11.644
This is what we're gonna get back, and

23
00:01:11.644 --> 00:01:15.590
then we're gonna do these three
things within our callback.

24
00:01:16.790 --> 00:01:21.100
So the first thing that we do, now we're
inside our collection, we're at the first

25
00:01:21.100 --> 00:01:25.450
index, and we have access to one of
the elements found in our collection.

26
00:01:25.450 --> 00:01:28.650
So the first thing we need
to do is get elements

27
00:01:28.650 --> 00:01:32.020
within that element that
match some selector.

28
00:01:32.020 --> 00:01:35.400
And we do have an API for this.

29
00:01:35.400 --> 00:01:39.870
This is our querySelectorAll.

30
00:01:39.870 --> 00:01:43.913
And we know this is available
on an individual element.

31
00:01:43.913 --> 00:01:50.462
So, we know we can do at least this much,
el.querySelectorAll.

32
00:01:50.462 --> 00:01:53.350
And this function is
gonna take a selector.

33
00:01:53.350 --> 00:01:57.729
So, oops,
we're gonna pass in our selector there.

34
00:01:58.820 --> 00:02:03.172
And this is gonna return an array
like object with all the dom

35
00:02:03.172 --> 00:02:05.760
elements that we found.

36
00:02:05.760 --> 00:02:09.035
So we can call this els for short.

37
00:02:09.035 --> 00:02:14.443
Whoops, this comment is

38
00:02:14.443 --> 00:02:20.660
from our previous comment.

39
00:02:20.660 --> 00:02:25.270
Okay, now that we found
a bunch of elements

40
00:02:25.270 --> 00:02:30.140
nested within our current element, we need
to add them to our accumulator array.

41
00:02:30.140 --> 00:02:31.940
So we could do this a number of ways.

42
00:02:31.940 --> 00:02:36.220
We're gonna do the shorthand way we
did on one of the prior exercises.

43
00:02:36.220 --> 00:02:41.068
We're just gonna say we're gonna

44
00:02:41.068 --> 00:02:46.594
hijack our push method from our array.

45
00:02:46.594 --> 00:02:51.606
And we're gonna say hey,
push with a context of elements all

46
00:02:51.606 --> 00:02:57.000
of the els that we found,
all the dom elements that we found.

47
00:02:57.000 --> 00:03:01.139
This is gonna take each one
of our found children and

48
00:03:01.139 --> 00:03:03.843
push them on to our accumulator.

49
00:03:11.028 --> 00:03:14.210
&gt;&gt; Alexis Abril: Then we need
to return dollar elements.

50
00:03:14.210 --> 00:03:17.400
Now this is something else we
needed to change for this exercise.

51
00:03:17.400 --> 00:03:20.230
We needed to modify our constructor, so

52
00:03:20.230 --> 00:03:22.220
let's go up here and
make sure we handle that.

53
00:03:25.000 --> 00:03:26.140
Here we go.

54
00:03:26.140 --> 00:03:31.001
So right off the bat, we need to say,
if selector is a string,

55
00:03:31.001 --> 00:03:33.163
do what we've been doing.

56
00:03:33.163 --> 00:03:37.619
Otherwise, assume we're getting an array
of elements that already exist, and

57
00:03:37.619 --> 00:03:41.100
just wrap that up without
looking up anything.

58
00:03:41.100 --> 00:03:48.150
So let's do this, let's move this really
quickly here, and let's write this out.

59
00:03:49.410 --> 00:03:51.360
If our selector is a string,

60
00:03:51.360 --> 00:03:53.725
what's a good way we can check
to see if something is a string?

61
00:03:53.725 --> 00:03:54.815
&gt;&gt; Speaker 4: typeof.

62
00:03:54.815 --> 00:04:00.190
&gt;&gt; Alexis Abril: typeof, yeah,
we can say if typeof selector ===,

63
00:04:00.190 --> 00:04:07.470
and this will just return string,
then we're gonna do what we did above.

64
00:04:07.470 --> 00:04:15.280
We're gonna do the same thing right there,
else, assume we already have this.

65
00:04:15.280 --> 00:04:20.291
So what I'm gonna do is I'm gonna
declare elements up here, whoops,

66
00:04:20.291 --> 00:04:25.170
I'm gonna declare elements right there.

67
00:04:25.170 --> 00:04:29.859
But I'm not gonna set it to this,
only in this case.

68
00:04:31.750 --> 00:04:32.910
There we go.

69
00:04:32.910 --> 00:04:37.660
So, if we come through, so
far without any extra code, this is

70
00:04:37.660 --> 00:04:42.380
a more verbose way, or more confusing
way to do what we were already doing.

71
00:04:42.380 --> 00:04:45.893
If you come through,
we pass in a string as a selector.

72
00:04:45.893 --> 00:04:51.139
It's gonna say, if type of selector
string, look up core selector

73
00:04:51.139 --> 00:04:57.318
all on this document, return that into
elements, and then business as usual.

74
00:04:57.318 --> 00:05:04.515
Otherwise,
&gt;&gt; Alexis Abril: Do this,

75
00:05:04.515 --> 00:05:08.220
and the code is actually already there.

76
00:05:08.220 --> 00:05:09.379
I'm just gonna un-comment it.

77
00:05:11.710 --> 00:05:18.757
Otherwise, we already have,
&gt;&gt; Alexis Abril: What we were looking for.

78
00:05:18.757 --> 00:05:20.320
Does that make sense?

79
00:05:20.320 --> 00:05:21.630
This part is a little weird.

80
00:05:22.930 --> 00:05:28.150
Again, because we don't have
method overloading in JavaScript,

81
00:05:28.150 --> 00:05:32.720
ideally, you could have different methods.

82
00:05:32.720 --> 00:05:37.660
If this was Java or C#,
you could have one method

83
00:05:37.660 --> 00:05:42.520
signature that takes a string, another
method signature that takes an array.

84
00:05:42.520 --> 00:05:46.730
And the JVM or whatever machinery behind
the scenes would be able to figure out

85
00:05:46.730 --> 00:05:49.183
which method you're trying to
call based on that API signature.

86
00:05:50.420 --> 00:05:52.430
But because JavaScript is weakly typed,

87
00:05:52.430 --> 00:05:57.490
we don't know or necessarily care at
the time the function is invoked.

88
00:05:57.490 --> 00:06:02.490
But in our particular scenario here, we
want dollar to accept many different types

89
00:06:02.490 --> 00:06:06.860
of inputs and behave differently
based on the type of those inputs.

90
00:06:08.550 --> 00:06:12.898
That was a very long-winded
way to say that.

91
00:06:12.898 --> 00:06:18.475
Let's check it out really
quick in our tests,

92
00:06:18.475 --> 00:06:23.480
and we got find is working,
so if we go into

93
00:06:23.480 --> 00:06:29.073
our Beagles page,
let me blow up our console.

94
00:06:29.073 --> 00:06:30.430
Let's take a look at the DOM really quick.

95
00:06:33.040 --> 00:06:36.870
We should be able to do
something like this.

96
00:06:36.870 --> 00:06:42.418
I wanna find our ul on the page,
then I'm gonna

97
00:06:42.418 --> 00:06:47.272
use our ul to find any nested list items.

98
00:06:47.272 --> 00:06:51.077
And then I just wanna use a helper method,

99
00:06:51.077 --> 00:06:55.989
I'm gonna use our text
helper method to say, Hello.

100
00:06:55.989 --> 00:07:00.840
Whoops, so
our find is not returning something.

101
00:07:00.840 --> 00:07:02.200
Let's take a look.

102
00:07:02.200 --> 00:07:03.210
I probably just broke something.

103
00:07:05.210 --> 00:07:09.819
Yes, our find is returning undefined.

104
00:07:14.101 --> 00:07:16.439
&gt;&gt; Alexis Abril: All right,
let's take a look at what's going on.

105
00:07:23.062 --> 00:07:24.950
&gt;&gt; Alexis Abril: So
right off the bat, let's check here.

106
00:07:26.860 --> 00:07:28.210
See what we're getting back.

107
00:07:28.210 --> 00:07:32.338
See if we're passing what we
need to into our constructor.

108
00:07:38.141 --> 00:07:40.520
&gt;&gt; Alexis Abril: So
we are passing quite a few things.

109
00:07:40.520 --> 00:07:44.299
Let's get into our individual tests,
we don't see so many consoles.

110
00:07:46.540 --> 00:07:52.229
So we're passing four li's, which is nice.

111
00:07:52.229 --> 00:07:54.577
So let's take a look at what
our constructor is doing,

112
00:07:57.851 --> 00:08:00.709
&gt;&gt; Alexis Abril: All the way up here.

113
00:08:00.709 --> 00:08:02.849
And I'm just gonna put a debugger so
we can step through it.

114
00:08:07.337 --> 00:08:10.495
&gt;&gt; Speaker 2: Looks like it's passing.

115
00:08:10.495 --> 00:08:14.350
&gt;&gt; Alexis Abril: The test is passing, but
that might just mean we have a weak test.

116
00:08:17.030 --> 00:08:21.990
So let's take a look,
let me clear out our old stuff.

117
00:08:21.990 --> 00:08:25.532
I'm gonna take a look at elements.

118
00:08:25.532 --> 00:08:28.963
Elements is coming in as undefined,
let's make sure.

119
00:08:28.963 --> 00:08:29.974
What's that?

120
00:08:29.974 --> 00:08:36.283
&gt;&gt; Speaker 2: [INAUDIBLE] You should try
the console for the accuracy breaking,

121
00:08:36.283 --> 00:08:41.224
pretty hard to identify
what's not working here.

122
00:08:41.224 --> 00:08:42.221
&gt;&gt; Alexis Abril: I'm with you.

123
00:08:46.516 --> 00:08:51.347
&gt;&gt; Alexis Abril: Okay, so
elements is coming through undefined,

124
00:08:51.347 --> 00:08:54.490
this is not we're looking for.

125
00:08:54.490 --> 00:08:58.890
So our selector coming through should
be in an array, and we have ul.

126
00:08:58.890 --> 00:09:00.730
This is the first one, so
we want the second one.

127
00:09:01.770 --> 00:09:06.090
Let's go through, here we go.

128
00:09:06.090 --> 00:09:07.520
So we have an array coming through.

129
00:09:08.590 --> 00:09:12.770
So this should fail cuz this
is not gonna be a string.

130
00:09:12.770 --> 00:09:18.535
So then go here, elements is
going to be our selector array.

131
00:09:18.535 --> 00:09:23.790
We're gonna go through, and
we're gonna iterate three times.

132
00:09:25.320 --> 00:09:28.776
That should fail, there we go.

133
00:09:28.776 --> 00:09:33.014
And now let's take a look at this,

134
00:09:33.014 --> 00:09:36.530
what our object looks like.

135
00:09:37.560 --> 00:09:40.220
We have three li's,
we're about to have a length property.

136
00:09:41.390 --> 00:09:46.199
Each of these li's is one of
our dom nodes, that looks good.

137
00:09:51.502 --> 00:10:00.968
&gt;&gt; Alexis Abril: So here,
&gt;&gt; Alexis Abril: That looks good,

138
00:10:00.968 --> 00:10:01.902
all right.

139
00:10:10.236 --> 00:10:12.520
&gt;&gt; Alexis Abril: It probably is working,
I probably just didn't save the page.

140
00:10:17.455 --> 00:10:21.760
&gt;&gt; Alexis Abril: Whoops,
play through that.

141
00:10:21.760 --> 00:10:22.560
It is working.

