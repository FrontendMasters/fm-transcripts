WEBVTT

1
00:00:00.000 --> 00:00:03.851
[MUSIC]

2
00:00:03.851 --> 00:00:06.228
&gt;&gt; Justin Meyer: So back to this example,

3
00:00:06.228 --> 00:00:10.310
I wanna see if the childNode
is a text node.

4
00:00:10.310 --> 00:00:14.879
So what should I do?
&gt;&gt; Speaker 2: Check if it has a node type

5
00:00:14.879 --> 00:00:17.379
material.
&gt;&gt; Justin Meyer: Exactly, so

6
00:00:17.379 --> 00:00:22.800
I'll do if(childNode.nodeType === 3).

7
00:00:26.440 --> 00:00:31.877
And then if it does, what do I wanna do?
&gt;&gt; Speaker 2: Get its text,

8
00:00:31.877 --> 00:00:33.880
and add it.
&gt;&gt; Justin Meyer: Exactly,

9
00:00:33.880 --> 00:00:35.400
how do you get its text?

10
00:00:35.400 --> 00:00:36.510
That's a great question.

11
00:00:36.510 --> 00:00:42.358
So I'm gonna look again
[LAUGH] on my text node here,

12
00:00:42.358 --> 00:00:47.112
I can just create one in my watch.
&gt;&gt; Speaker 3: You can

13
00:00:47.112 --> 00:00:49.922
do a console.dir.
&gt;&gt; Justin Meyer: If

14
00:00:49.922 --> 00:00:51.434
it's the last thing.
&gt;&gt; Speaker 3: Or

15
00:00:51.434 --> 00:00:56.302
you could just do console.dir
wrapped around that [CROSSTALK]

16
00:00:56.302 --> 00:00:57.749
&gt;&gt; Justin Meyer: Okay.

17
00:00:57.749 --> 00:01:03.857
This'll give me the object,
okay, that's cool.

18
00:01:03.857 --> 00:01:08.702
So this is gonna cancel to that dir
wrapped around the whatever value

19
00:01:08.702 --> 00:01:10.980
you wanna look at.

20
00:01:10.980 --> 00:01:12.120
In this case, we can just look, so

21
00:01:12.120 --> 00:01:15.990
there's some properties that clearly
have the text that I passed in.

22
00:01:15.990 --> 00:01:17.410
There's one data.

23
00:01:17.410 --> 00:01:21.560
There's one nodeValue,
I think there's probably textContent.

24
00:01:21.560 --> 00:01:25.080
So there's a whole bunch, in this case,

25
00:01:25.080 --> 00:01:28.490
the best one to use is nodeValue,
that'll work kinda everywhere.

26
00:01:30.300 --> 00:01:34.590
So that's where I can read the text
of a node, is its nodeValue.

27
00:01:36.380 --> 00:01:40.304
So how do I add the text

28
00:01:40.304 --> 00:01:45.540
node's nodeValue to text?

29
00:01:48.070 --> 00:01:50.457
Some people actually might not know
how to do this, it seems obvious, but

30
00:01:50.457 --> 00:01:54.660
if someone wants help me out.
&gt;&gt; Speaker 2: Plus?

31
00:01:54.660 --> 00:01:57.448
&gt;&gt; Justin Meyer: Plus equals, yeah.

32
00:01:57.448 --> 00:01:58.567
Well, there's two ways of doing it.

33
00:01:58.567 --> 00:02:03.593
Probably the easiest way is for
people to understand is

34
00:02:03.593 --> 00:02:09.858
txt + childNode.nodeValue.
&gt;&gt; Justin Meyer: So

35
00:02:09.858 --> 00:02:17.500
that's gonna get the text nodes.
&gt;&gt; Speaker 4: Old English.

36
00:02:17.500 --> 00:02:18.011
&gt;&gt; Justin Meyer: Yeah,

37
00:02:18.011 --> 00:02:21.603
[LAUGH] only all the old
English text nodes, yeah.

38
00:02:21.603 --> 00:02:25.904
This is gonna get the text
node's nodeText and

39
00:02:25.904 --> 00:02:30.214
then add it to our kind
of accumulator of text.

40
00:02:30.214 --> 00:02:32.128
When you guys do recursive functions,

41
00:02:32.128 --> 00:02:36.247
sometimes you'll hear there's like an
accumulator, that's kind of how I refer to

42
00:02:36.247 --> 00:02:40.090
the thing that you're starting
to like add to a lot of times.

43
00:02:40.090 --> 00:02:43.786
Okay, so
we've handled if there's a text node,

44
00:02:43.786 --> 00:02:47.306
but if we get something
that's not a text node,

45
00:02:47.306 --> 00:02:51.620
it's gonna have a nodeType of 1,
that's a normal node.

46
00:02:53.340 --> 00:02:54.420
What should we do?

47
00:02:54.420 --> 00:02:57.644
And this is for the big fake bonus

48
00:02:57.644 --> 00:03:02.711
points,
&gt;&gt; Justin Meyer: Big bucks

49
00:03:02.711 --> 00:03:11.606
that I will not pay out.
&gt;&gt; Justin Meyer: How can I make this work,

50
00:03:11.606 --> 00:03:16.699
so I don't have to iterate myself?
&gt;&gt; Speaker 2: You can

51
00:03:16.699 --> 00:03:21.580
call a getText again.
&gt;&gt; Justin Meyer: Yes, exactly right.

52
00:03:21.580 --> 00:03:24.100
I'm gonna call getText again.

53
00:03:24.100 --> 00:03:28.523
What am I gonna pass in?
&gt;&gt; Speaker 5: The children nodes of that

54
00:03:28.523 --> 00:03:33.557
node.
&gt;&gt; Justin Meyer: childNode, exactly.

55
00:03:33.557 --> 00:03:37.684
It's gonna return something.
&gt;&gt; Speaker 2: You're gonna add it to

56
00:03:37.684 --> 00:03:39.902
your accumulator.
&gt;&gt; Justin Meyer: Exactly.

57
00:03:46.733 --> 00:03:47.537
&gt;&gt; Justin Meyer: Okay.

58
00:03:49.831 --> 00:03:51.326
&gt;&gt; Justin Meyer: So not only did we learn

59
00:03:51.326 --> 00:03:55.894
a lot of JavaScript and
we're learning jQuery now, we've also done

60
00:03:55.894 --> 00:04:00.988
a decent amount of recursive programming.
&gt;&gt; Speaker 6: There's a quick question

61
00:04:00.988 --> 00:04:05.312
I think about,
what does that nodeType equal to 1,

62
00:04:05.312 --> 00:04:08.915
what does that mean?
&gt;&gt; Justin Meyer: The nodeType, again,

63
00:04:08.915 --> 00:04:15.250
is just a listing of, different types
of nodes have different nodeTypes.

64
00:04:15.250 --> 00:04:17.511
For instance, if you have a comment,

65
00:04:17.511 --> 00:04:20.916
I don't know if you guys have
ever seen a comment in html.

66
00:04:20.916 --> 00:04:23.970
You can actually have HTML
comments that look like this.

67
00:04:25.510 --> 00:04:31.098
I'm a comment, that is actually going to
be a child node of the body in this case,

68
00:04:31.098 --> 00:04:33.494
even though there is no real body.

69
00:04:33.494 --> 00:04:36.868
If I were to put that inside this ul,

70
00:04:36.868 --> 00:04:42.041
the ul now would actually have,
we have four, eight,

71
00:04:42.041 --> 00:04:48.362
you would have nine total nodes cuz
there would be a text node here.

72
00:04:48.362 --> 00:04:53.088
A comment node, which is, I think,
is node type something, I don't know,

73
00:04:53.088 --> 00:04:55.731
[LAUGH] you can actually
look up node types.

74
00:04:55.731 --> 00:05:00.901
By the way, if you're wanting to
find information about the dom,

75
00:05:00.901 --> 00:05:03.270
use MDN really exclusively.

76
00:05:03.270 --> 00:05:05.831
Don't use, what's the other site that's?
&gt;&gt; Speaker 3: W3Schools?

77
00:05:05.831 --> 00:05:07.428
&gt;&gt; Justin Meyer: Don't use W3Schools,

78
00:05:07.428 --> 00:05:08.038
use MDN.

79
00:05:08.038 --> 00:05:14.124
So anything you wanna ever know, type
MDN and then type in nodeType to Google.

80
00:05:14.124 --> 00:05:20.400
And this is where you get actually very
well done, good technical information.

81
00:05:20.400 --> 00:05:22.370
So here's all the different nodeTypes.

82
00:05:23.840 --> 00:05:26.468
And they'll let you know
which ones are not, I think,

83
00:05:26.468 --> 00:05:29.963
well supported, or we should-
&gt;&gt; Speaker 5: Comment node is

84
00:05:29.963 --> 00:05:31.405
eight.
&gt;&gt; Justin Meyer: Yeah,

85
00:05:31.405 --> 00:05:35.495
comment node is eight, a normal element
node is one, text node is three.

86
00:05:35.495 --> 00:05:38.677
The only ones that you'll
typically see day to day,

87
00:05:38.677 --> 00:05:42.160
element nodes, text nodes,
sometimes a comment node.

88
00:05:43.290 --> 00:05:46.920
And I see document fragments a lot,
which we're not gonna hit today.

89
00:05:46.920 --> 00:05:51.391
But document fragments are, if you ever
find yourself building a lot of dom, and

90
00:05:51.391 --> 00:05:54.703
it's not going very fast,
look into document fragments.

91
00:05:54.703 --> 00:05:57.654
Remember that word and
then learn about it later.

92
00:05:57.654 --> 00:06:04.504
[LAUGH] Talk for another day.
&gt;&gt; Justin Meyer: Okay.

93
00:06:04.504 --> 00:06:05.092
&gt;&gt; Speaker 7: So sure,

94
00:06:05.092 --> 00:06:08.920
can we handle other nodeTypes?
&gt;&gt; Justin Meyer: No, we only need to go.

95
00:06:08.920 --> 00:06:11.000
No, your code does not
need to handle that.

96
00:06:11.000 --> 00:06:15.620
And plus, other nodeTypes won't have
children that would have text nodes.

97
00:06:15.620 --> 00:06:18.740
So a comment node isn't gonna
have a child that's a text node.

98
00:06:18.740 --> 00:06:21.550
So we don't need to recurse through that,
we can just ignore that.

99
00:06:21.550 --> 00:06:26.406
We can ignore every other
type of text node, or

100
00:06:26.406 --> 00:06:29.950
every other type of node,
which we're doing here.

101
00:06:29.950 --> 00:06:33.012
So, that's what that three-in-one means,
based upon.

102
00:06:33.012 --> 00:06:38.100
Now there is a flag,
sometimes people don't like

103
00:06:38.100 --> 00:06:43.990
writing that because they feel,
hey, that's hard to understand.

104
00:06:43.990 --> 00:06:47.696
So there is instead of writing a one or
three,

105
00:06:47.696 --> 00:06:53.545
what you'll see in a lot of open
source code, people will write, was it

106
00:06:53.545 --> 00:07:00.908
Node.TEXT_NODE?
&gt;&gt; Justin Meyer: Because Node.TEXT_NODE

107
00:07:00.908 --> 00:07:03.254
returns 1, and this way,

108
00:07:03.254 --> 00:07:08.803
you can kind of write your code
a little bit more clear, I think.

109
00:07:08.803 --> 00:07:14.142
But I mean,
depends on what circles you're running in,

110
00:07:14.142 --> 00:07:20.387
most people who do open source would just,
you'll see text node.

111
00:07:20.387 --> 00:07:22.900
You'll just see a three, and
people will know that it's text node.

112
00:07:22.900 --> 00:07:27.566
But if you're working with people
who might not have seen that before,

113
00:07:27.566 --> 00:07:32.388
writing it out like Node.TEXT_NODE,
so it's explicit, and Node.,

114
00:07:32.388 --> 00:07:36.820
what was it?
&gt;&gt; [INAUDIBLE]

115
00:07:36.820 --> 00:07:37.762
&gt;&gt; Justin Meyer: ELEMENT_NODE,

116
00:07:41.935 --> 00:07:43.309
&gt;&gt; Justin Meyer: Might help people out

117
00:07:43.309 --> 00:07:46.514
quite a bit cuz if you've
never seen this before,

118
00:07:46.514 --> 00:07:51.390
it'd be super weird just to see
a three without any context.

119
00:07:51.390 --> 00:07:53.580
Cool, so that's it.

120
00:07:53.580 --> 00:07:57.380
That recourses,
let me step through it once.

121
00:07:57.380 --> 00:07:59.970
So you can see it working.

122
00:07:59.970 --> 00:08:02.607
I wanna put a debugger in here.

123
00:08:02.607 --> 00:08:07.311
I'm gonna reload my breeds,

124
00:08:07.311 --> 00:08:14.094
I'm going to open up the jobs for council.

125
00:08:14.094 --> 00:08:18.943
And I'm going to do $, my ul,

126
00:08:18.943 --> 00:08:23.051
and I'm gonna call text.

127
00:08:23.051 --> 00:08:24.240
And I get an error.

128
00:08:24.240 --> 00:08:29.016
[LAUGH]
&gt;&gt; Justin Meyer: What did I do?

129
00:08:33.031 --> 00:08:34.570
&gt;&gt; Justin Meyer: Did I break something?

130
00:08:35.610 --> 00:08:36.220
Yes, I did.

131
00:08:37.600 --> 00:08:42.970
What did I break?
&gt;&gt; Speaker 2: Should it be else if?

132
00:08:42.970 --> 00:08:44.371
&gt;&gt; Justin Meyer: Yes, thank you,

133
00:08:44.371 --> 00:08:50.269
syntax error.
&gt;&gt; Justin Meyer: That's

134
00:08:50.269 --> 00:08:54.913
why peer programming is awesome,
especially when you're peer

135
00:08:54.913 --> 00:08:59.127
programming with like 20 people
[LAUGH] and 60 online or

136
00:08:59.127 --> 00:09:04.510
whatever.
&gt;&gt; Justin Meyer: Okay.

137
00:09:07.694 --> 00:09:11.706
&gt;&gt; Justin Meyer: Console, clear u,

138
00:09:11.706 --> 00:09:15.246
escape u, okay.

139
00:09:15.246 --> 00:09:21.448
Which I think I'll just pull this whole
thing up, but once I get the, all right.

140
00:09:21.448 --> 00:09:29.150
So here, we got into this first
getText call, which I can just show.

141
00:09:29.150 --> 00:09:31.042
So we're passing it.

142
00:09:31.042 --> 00:09:35.613
So we get this return,
making sure it's got a first element and

143
00:09:35.613 --> 00:09:39.420
that we're calling getText
with element as the ul.

144
00:09:41.730 --> 00:09:43.130
Set a break point in here.

145
00:09:43.130 --> 00:09:44.530
Hopefully it hits that, it did not.

146
00:09:46.250 --> 00:09:48.563
Why did it not?

147
00:09:48.563 --> 00:09:50.180
I'm gonna have to put
a debugger in here too.

148
00:09:51.270 --> 00:09:55.977
Chrome is being weird, [LAUGH] deubber,

149
00:09:55.977 --> 00:09:59.305
debugger, all right.

150
00:10:09.719 --> 00:10:12.087
&gt;&gt; Justin Meyer: In my code, okay.

151
00:10:12.087 --> 00:10:17.466
So it's gonna be called with the ul.
&gt;&gt; Justin Meyer: I

152
00:10:17.466 --> 00:10:18.986
want to get a step over.

153
00:10:18.986 --> 00:10:20.574
So el is going to be the ul.

154
00:10:20.574 --> 00:10:23.225
Let me hide this console,
how do I make you go away?

155
00:10:28.230 --> 00:10:30.140
&gt;&gt; Justin Meyer: And it's gonna start.

156
00:10:30.140 --> 00:10:33.730
It's gonna create an accumulator,
and then it's gonna step into this.

157
00:10:33.730 --> 00:10:38.360
And it's gonna get the first child
node of the ul, which is a text node,

158
00:10:38.360 --> 00:10:42.870
you can see here cuz it has like
a return character in its data.

159
00:10:42.870 --> 00:10:47.340
And we're simply gonna say that a,
its nodeType is 3.

160
00:10:48.510 --> 00:10:50.810
And we're just gonna add two texts.

161
00:10:50.810 --> 00:10:53.540
So we're gonna do txt =
txt + the node value,

162
00:10:53.540 --> 00:10:56.780
which is a line break
followed by some space.

163
00:10:56.780 --> 00:11:01.300
If we walk up to our parent call object,
we can see text is going to change

164
00:11:05.110 --> 00:11:07.560
to have that text in it.

165
00:11:07.560 --> 00:11:12.705
So now we're gonna hit the next element,

166
00:11:12.705 --> 00:11:15.945
which is going to be an li.

167
00:11:15.945 --> 00:11:20.116
Come on, it's gonna be 1,
and it's gonna step in,

168
00:11:20.116 --> 00:11:24.289
so it's gonna step into this
call is function again,

169
00:11:24.289 --> 00:11:30.430
which is gonna have its own accumulator
that's gonna go through all of the li.

170
00:11:30.430 --> 00:11:37.409
So let me write the childNode.nodeName.

171
00:11:37.409 --> 00:11:41.188
So we can just see what
we're going through here.

172
00:11:41.188 --> 00:11:45.664
So now we're going to do the li's
first child, which is an anchor, and

173
00:11:45.664 --> 00:11:50.237
I'm gonna set a breakpoint here, so
we can see what's being returned.

174
00:11:50.237 --> 00:11:55.020
Now we're gonna hit the second li, and
we're just basically recursing down.

175
00:11:56.380 --> 00:12:00.300
This is the first anchor's text,
which is going to be Doberman.

176
00:12:01.390 --> 00:12:05.518
And then we're gonna kind of keep
walking up, that's gonna be returned.

177
00:12:05.518 --> 00:12:07.205
How do I get to that?

178
00:12:07.205 --> 00:12:10.520
Nope, one more level.

179
00:12:12.280 --> 00:12:17.118
Okay, so now that value was returned,
and our text should be the first

180
00:12:17.118 --> 00:12:21.222
return before the Doberman and
then the text of the anchor.

181
00:12:21.222 --> 00:12:26.166
We're kind of recursing down.
&gt;&gt; Justin Meyer: I

182
00:12:26.166 --> 00:12:28.880
don't know if I need to keep showing this.

183
00:12:28.880 --> 00:12:30.621
Cuz this is kind of hard for
me to even follow.

184
00:12:30.621 --> 00:12:35.457
[LAUGH] I think it's just easier to look
at the code actually, but essentially,

185
00:12:35.457 --> 00:12:39.445
we're just keep calling,
going into getText and getText down.

186
00:12:39.445 --> 00:12:41.255
So hopefully, that makes sense.

187
00:12:41.255 --> 00:12:44.275
Let's move on,
any other questions about this?

188
00:12:44.275 --> 00:12:49.148
Yeah, I'm gonna remove my debuggers.
&gt;&gt; Speaker 6: There was one

189
00:12:49.148 --> 00:12:50.510
[INAUDIBLE] back.

190
00:12:50.510 --> 00:12:55.471
What do you mean by past looping benefit
from detaching the elements from

191
00:12:55.471 --> 00:12:58.967
doing the dom manipulation
on used in the same way,

192
00:12:58.967 --> 00:13:02.544
like in other words,
what is the best to temporarily

193
00:13:02.544 --> 00:13:06.280
remove elements from the dom?
&gt;&gt; Justin Meyer: So

194
00:13:06.280 --> 00:13:09.898
it's best when you're manipulating them.

195
00:13:09.898 --> 00:13:13.095
It can be sometimes a good idea
when you're manipulating them, but

196
00:13:13.095 --> 00:13:15.970
in this case,
we're not actually manipulating anything.

197
00:13:17.570 --> 00:13:19.230
We're just reading.

198
00:13:19.230 --> 00:13:25.555
I'm answering this to you,
here's the question.

199
00:13:25.555 --> 00:13:28.170
We're just reading property, so
we're not actually changing anything.

200
00:13:28.170 --> 00:13:31.270
So we're not gonna create any reflows or
anything like that.

201
00:13:31.270 --> 00:13:38.109
So it's best not to be removing it or
anything like that, especially forget.

202
00:13:38.109 --> 00:13:41.253
Yeah.
&gt;&gt; Speaker 5: In my text function,

203
00:13:41.253 --> 00:13:45.717
I'm doing everything that
we're currently doing, but

204
00:13:45.717 --> 00:13:48.510
I'm getting an error.
&gt;&gt; Justin Meyer: Okay.

205
00:13:48.510 --> 00:13:49.972
&gt;&gt; Speaker 5: On the test page,

206
00:13:49.972 --> 00:13:54.913
it says the appendChild is not a function.
&gt;&gt; Justin Meyer: Let me make sure my

207
00:13:54.913 --> 00:14:00.153
test is passing, that I didn't
just give you guys some bad code,

208
00:14:00.153 --> 00:14:03.190
and then we'll take a look.

209
00:14:03.190 --> 00:14:04.470
So my test is working.

210
00:14:04.470 --> 00:14:08.176
It says appendChild is not a function,
down in this?

211
00:14:08.176 --> 00:14:08.782
&gt;&gt; Speaker 5: Yep,

212
00:14:08.782 --> 00:14:15.080
right there where we have appendChild.
&gt;&gt; Justin Meyer: What is el look like?

213
00:14:15.080 --> 00:14:18.626
So if you step in,
if you were to put a debugger,

214
00:14:18.626 --> 00:14:23.170
right, or like a console.log(el),
is that undefined?

215
00:14:23.170 --> 00:14:27.947
And then if that is,
what I would do is console.log(this)

216
00:14:27.947 --> 00:14:31.600
to make sure that there's like an li,
right,

217
00:14:31.600 --> 00:14:35.920
I'll show you what mine looks
like when the tests run.

218
00:14:37.850 --> 00:14:42.726
So you can, by the way, for these tests,
you can just click on the individual

219
00:14:42.726 --> 00:14:46.278
tests and run just that.
&gt;&gt; Speaker 5: Span.

220
00:14:46.278 --> 00:14:48.188
&gt;&gt; Justin Meyer: So mine will look like,

221
00:14:53.440 --> 00:14:55.631
&gt;&gt; Justin Meyer: This.

222
00:14:55.631 --> 00:14:59.647
Yes, span is gonna have,
looks like the first time it's called,

223
00:14:59.647 --> 00:15:03.304
it's gonna have a collection
of one item that's a span, and

224
00:15:03.304 --> 00:15:06.045
then it's gonna look apparently like that.

225
00:15:06.045 --> 00:15:08.557
Is that what yours looks like,
you're still getting an error?

226
00:15:08.557 --> 00:15:10.167
&gt;&gt; Speaker 5: Mine is just an empty span,

227
00:15:10.167 --> 00:15:14.105
I think.
&gt;&gt; Justin Meyer: An empty span.

228
00:15:14.105 --> 00:15:17.641
Okay, let's do the same type of thing,
like I'll help you and

229
00:15:17.641 --> 00:15:22.247
if it's like something else, I think other
people would have had a problem with,

230
00:15:22.247 --> 00:15:25.420
I'll come back after the next exercise and
explain it.

