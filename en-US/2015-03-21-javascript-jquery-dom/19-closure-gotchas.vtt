WEBVTT

1
00:00:00.000 --> 00:00:04.049
[MUSIC]

2
00:00:04.049 --> 00:00:06.006
&gt;&gt; Justin Meyer: Okay, so back to this.

3
00:00:06.006 --> 00:00:12.910
Hopefully, this can be a little bit more
understandable now why this was happening.

4
00:00:12.910 --> 00:00:16.560
We'll walk through this code the same we
just walked through that counter example.

5
00:00:18.270 --> 00:00:23.747
So, job's just gonna come to this,
it's gonna see a var a equals an object,

6
00:00:23.747 --> 00:00:26.683
it's gonna create an object in memory.

7
00:00:26.683 --> 00:00:31.230
Then it's gonna start this for

8
00:00:31.230 --> 00:00:35.990
loop, and the for loop is gonna create
a variable i and point it to 0.

9
00:00:37.080 --> 00:00:40.440
So, we're gonna kinda start with
something like this, in memory.

10
00:00:42.230 --> 00:00:46.204
And now we're gonna iterate
through the body of the for loop.

11
00:00:46.204 --> 00:00:50.698
So, within the body of the for loop,
it's gonna create a function in memory,

12
00:00:50.698 --> 00:00:51.458
right here.

13
00:00:51.458 --> 00:00:55.239
And again functions don't know about
anything that's going on here.

14
00:00:55.239 --> 00:00:58.639
It's not like because this
function has an i here,

15
00:00:58.639 --> 00:01:02.924
it somehow is going to say,
give me the value of i right now.

16
00:01:02.924 --> 00:01:06.980
That happens later when this
function is actually run.

17
00:01:06.980 --> 00:01:12.323
So, it's gonna create a function in
memory and it's gonna set i a's,

18
00:01:12.323 --> 00:01:17.150
object a's ith property to
point to that function.

19
00:01:17.150 --> 00:01:18.860
So, it's gonna say a and

20
00:01:18.860 --> 00:01:22.670
it's 0 with property,
points to that function in memory.

21
00:01:24.460 --> 00:01:28.480
And now i is going to be incremented to 1,
and it's gonna do the same kind of thing.

22
00:01:28.480 --> 00:01:32.481
And then i is going to
be incremented to 2, and

23
00:01:32.481 --> 00:01:37.098
again just a function is gonna
be created in memory and

24
00:01:37.098 --> 00:01:39.987
a's of 2 is gonna point to that.

25
00:01:44.480 --> 00:01:47.950
&gt;&gt; Justin Meyer: Remember, these are all
different functions in memory too.

26
00:01:47.950 --> 00:01:49.660
Even though you've just defined,

27
00:01:49.660 --> 00:01:54.250
you've written function once,
it's creating three different functions.

28
00:01:56.190 --> 00:02:00.717
And finally, i is gonna be incremented
to 3, it's gonna fail the for

29
00:02:00.717 --> 00:02:03.046
loop's test and exit the for loop.

30
00:02:03.046 --> 00:02:07.430
And then a's of 0 is gonna be called.

31
00:02:07.430 --> 00:02:10.930
Now whenever a function is called in
memory, a call object is created.

32
00:02:10.930 --> 00:02:12.210
Again sorry about it being small.

33
00:02:12.210 --> 00:02:16.219
This just says a[0]
followed by parentheses.

34
00:02:17.300 --> 00:02:20.840
And it's going to

35
00:02:22.750 --> 00:02:26.830
run the function body, the function
body is going to try to alert i.

36
00:02:26.830 --> 00:02:28.490
So, it's gonna look up i.

37
00:02:28.490 --> 00:02:32.480
And it's gonna start looking
up i in this call object here.

38
00:02:32.480 --> 00:02:37.070
But that doesn't have an i, so

39
00:02:37.070 --> 00:02:45.160
it's gonna walk up again through the
parent call object looking for variable i.

40
00:02:45.160 --> 00:02:47.211
Find it and then it's gonna alert 3.

41
00:02:49.321 --> 00:02:51.089
&gt;&gt; Justin Meyer: Any questions?

42
00:02:51.089 --> 00:02:52.358
Does that make sense now?

43
00:02:56.100 --> 00:02:59.280
&gt;&gt; Justin Meyer: Yeah,
kinda, blank stares, okay.

44
00:03:00.330 --> 00:03:01.916
If there are questions,

45
00:03:01.916 --> 00:03:06.902
I'm happy to talk about this ad nauseam
because to me, understanding this and

46
00:03:06.902 --> 00:03:11.586
especially understanding this and
prototypes and stuff like that, is so

47
00:03:11.586 --> 00:03:16.210
fundamental to writing good software for
jobs, for projects, right.

48
00:03:16.210 --> 00:03:18.909
Make sure you're doing
things the right way.

49
00:03:18.909 --> 00:03:23.784
So, if there is confusion or
other things you want to ask in reference,

50
00:03:23.784 --> 00:03:25.913
related to this, please ask.

51
00:03:29.189 --> 00:03:31.986
&gt;&gt; Justin Meyer: Okay,
so the fix for this.

52
00:03:31.986 --> 00:03:37.640
So, kind of, understanding closures is
the problem we're dealing with right now.

53
00:03:37.640 --> 00:03:40.560
Well, the fix for
this is adding more closures.

54
00:03:40.560 --> 00:03:42.260
Adding more call objects.

55
00:03:43.450 --> 00:03:48.880
So, what you can do is wrap this with
an immediately invoked function.

56
00:03:50.760 --> 00:03:57.130
So, I've wrapped my code,
I had before, with another function.

57
00:03:57.130 --> 00:04:00.990
Because what this is gonna do for us,
as we'll see, is it's going to create

58
00:04:00.990 --> 00:04:06.790
a individual call object

59
00:04:06.790 --> 00:04:11.880
that these inner functions will be
referencing and an individual value of j,

60
00:04:11.880 --> 00:04:17.870
essentially here, a unique value of
j stored in that unique call object.

61
00:04:17.870 --> 00:04:21.820
So that this will alert 0, 1,
2 correctly, like we want.

62
00:04:23.800 --> 00:04:26.060
So, let me do this.

63
00:04:28.010 --> 00:04:33.520
So, the other window,
we have our a, we have our i, and

64
00:04:33.520 --> 00:04:37.490
now we're gonna run in the body of the for
loop.

65
00:04:38.900 --> 00:04:42.210
Now in the body the for loop, you can
see here, we're creating a function.

66
00:04:42.210 --> 00:04:44.480
The first thing we're gonna do
is create a function in memory.

67
00:04:46.160 --> 00:04:47.990
So, we create a function in memory.

68
00:04:47.990 --> 00:04:52.170
Then the next thing we're gonna do
is call that function in memory.

69
00:04:52.170 --> 00:04:58.241
And again, whenever you call a function
in memory, a call object is created.

70
00:04:59.840 --> 00:05:05.771
And that call object is gonna contain
any arguments passed to that function.

71
00:05:05.771 --> 00:05:10.497
So, here we're passing i, but
that's gonna be translated to j.

72
00:05:10.497 --> 00:05:15.820
And because i is a primitive,
j is gonna get its own copy of i.

73
00:05:17.780 --> 00:05:20.028
So, that we're gonna create
a structure that looks like this.

74
00:05:23.590 --> 00:05:30.871
&gt;&gt; Justin Meyer: And
then we are going to run the inside of

75
00:05:30.871 --> 00:05:35.952
this outer function here.

76
00:05:35.952 --> 00:05:37.341
We're gonna run this function or

77
00:05:37.341 --> 00:05:40.423
I guess we are running the function
already because we have a call object.

78
00:05:40.423 --> 00:05:45.127
And we're gonna do what its code says,
which is to create

79
00:05:45.127 --> 00:05:49.939
another function in memory and
then set that as a's of 0.

80
00:05:49.939 --> 00:05:55.190
All right, j is gonna be 0,
and so is a's of 0, cool.

81
00:05:56.860 --> 00:06:01.080
So then,
we're gonna just repeat that process.

82
00:06:01.080 --> 00:06:06.540
I'm not gonna draw it out for when i is 1.

83
00:06:06.540 --> 00:06:11.600
And for when i is 2,
we're gonna create these things.

84
00:06:13.920 --> 00:06:18.870
Okay, now let's see what
happens when we call a's of 0.

85
00:06:18.870 --> 00:06:24.525
[COUGH] When we call a's of 0,
&gt;&gt; Justin Meyer: Our

86
00:06:24.525 --> 00:06:28.193
call object is gonna created,
again this is small, so

87
00:06:28.193 --> 00:06:33.157
this just says a's of 0 and then call
in parenthesis, just like before.

88
00:06:33.157 --> 00:06:37.114
When we call this function in memory and
you call is gonna be created and

89
00:06:37.114 --> 00:06:38.940
then it's gonna run that code.

90
00:06:38.940 --> 00:06:41.872
Well, where is the thing?

91
00:06:41.872 --> 00:06:47.265
Why is the thing,
I think something happened.

92
00:06:47.265 --> 00:06:51.583
Normally, my presentation shows,
it's trying to look up the value of j.

93
00:06:51.583 --> 00:06:54.083
Once we run this function,
it's gonna run this code in here.

94
00:06:54.083 --> 00:06:56.337
It's gonna try to look
up the value of j and

95
00:06:56.337 --> 00:06:59.430
it's not gonna find it
because we didn't pass it j.

96
00:06:59.430 --> 00:07:05.512
So, it's gonna walk up to find
the value of j here that was passed and

97
00:07:05.512 --> 00:07:06.915
then alert 0.

98
00:07:09.313 --> 00:07:13.684
&gt;&gt; Justin Meyer: Any other
questions about closures?

99
00:07:13.684 --> 00:07:17.522
Because we'll be using,
we'll be doing something very similar

100
00:07:17.522 --> 00:07:21.371
to this is our first exercise
immediately following this slide.

101
00:07:21.371 --> 00:07:22.960
Yeah.

102
00:07:22.960 --> 00:07:24.528
&gt;&gt; Student: Is the j just
picking up the boot then or

103
00:07:24.528 --> 00:07:26.050
where are you getting the j in there?

104
00:07:27.780 --> 00:07:31.870
&gt;&gt; Justin Meyer: See this, so
we're passing i to this function,

105
00:07:31.870 --> 00:07:32.855
&gt;&gt; Student: Okay.

106
00:07:32.855 --> 00:07:35.229
&gt;&gt; Justin Meyer: That function
takes as an argument j.

107
00:07:38.043 --> 00:07:42.514
&gt;&gt; Justin Meyer: So,
it's like whenever you call,

108
00:07:42.514 --> 00:07:46.696
it's just like the sum example,

109
00:07:49.998 --> 00:07:52.315
&gt;&gt; Justin Meyer: In this sum example,

110
00:07:52.315 --> 00:07:56.434
we're calling sum here with a and b but

111
00:07:56.434 --> 00:08:00.178
they become x and y inside the sum.

112
00:08:00.178 --> 00:08:04.033
All right, so this is a,

113
00:08:04.033 --> 00:08:08.080
Slide Show open, sorry.

114
00:08:08.080 --> 00:08:11.450
We're doing the same thing but we're
doing it in this kind of weird syntax.

115
00:08:11.450 --> 00:08:13.671
It's like we're creating a function but

116
00:08:13.671 --> 00:08:16.658
we're not saving it as like
a sum variable or anything.

117
00:08:16.658 --> 00:08:20.165
We're creating it just
to call it right away.

118
00:08:20.165 --> 00:08:23.410
All right, so we just created a function
and then we're calling it with i.

119
00:08:23.410 --> 00:08:27.540
But i is gonna be translated
to j inside here.

120
00:08:27.540 --> 00:08:32.009
Right, so that's, again, what's gonna
happen is we create that outer function,

121
00:08:32.009 --> 00:08:36.043
we're gonna run that outer function by
passing it i, the current value of i,

122
00:08:36.043 --> 00:08:37.053
which would be 0.

123
00:08:37.053 --> 00:08:43.877
But that's gonna create a call object
with j or the i translated to j.

124
00:08:43.877 --> 00:08:47.820
So, j is gonna point to 0 and
that same thing is gonna happen.

125
00:08:49.320 --> 00:08:50.778
Cool, any other questions?

126
00:08:52.529 --> 00:08:54.300
&gt;&gt; Justin Meyer: Awesome, so yeah.

127
00:08:54.300 --> 00:08:56.285
&gt;&gt; Student: What, I guess, I'm not sure,

128
00:08:56.285 --> 00:09:00.419
can you use void instead of wrapping
a function with parentheses?

129
00:09:00.419 --> 00:09:05.031
&gt;&gt; Justin Meyer: There is
another syntax where you can do

130
00:09:05.031 --> 00:09:08.674
like a bang or something to it.

131
00:09:08.674 --> 00:09:11.861
I don't, you might be able to I actually,
I know, there's different syntaxes that

132
00:09:11.861 --> 00:09:15.120
I've seen people use, I always use
this to like invoke the function.

133
00:09:15.120 --> 00:09:17.089
I don't know if you can use a void or not.

134
00:09:17.089 --> 00:09:22.083
&gt;&gt; Student 2: Yeah, you can use,
any standard unicode operator, I think.

135
00:09:22.083 --> 00:09:25.814
It's like plus, it's been usually
to denote something URL related but

136
00:09:25.814 --> 00:09:29.483
like a lot of people put like a plus in
front of a function cuz that would do

137
00:09:29.483 --> 00:09:33.725
the same exact thing and you don't have to
wrapping parens but I forget the rules.

138
00:09:33.725 --> 00:09:36.348
I wanna say something like, yeah,
any unicode operator will do it.

139
00:09:36.348 --> 00:09:41.485
&gt;&gt; Student 3: And an alternate way you
can do this is just var i equals j,

140
00:09:41.485 --> 00:09:44.171
right, without passing it.

141
00:09:44.171 --> 00:09:46.953
&gt;&gt; Justin Meyer: Var,
&gt;&gt; Student 3: Inside the

142
00:09:46.953 --> 00:09:49.014
&gt;&gt; Justin Meyer: Inside the what?

143
00:09:49.014 --> 00:09:51.956
&gt;&gt; Student 3: Inside
the anonymous function.

144
00:09:51.956 --> 00:09:52.860
&gt;&gt; Justin Meyer: In here?

145
00:09:52.860 --> 00:09:58.540
You can put, instead of passing it,
just do var, yeah, you could do that.

146
00:09:58.540 --> 00:10:01.480
j equals i, yeah, you could do that too.

147
00:10:02.590 --> 00:10:07.190
So, to to just illustrate what Mark
was just saying, what he meant is,

148
00:10:07.190 --> 00:10:13.390
you could just do var j equals i,
and then you don't need this.

149
00:10:15.160 --> 00:10:16.820
And you're just calling a function, but

150
00:10:16.820 --> 00:10:20.170
again your call object is
gonna look the exact same.

151
00:10:20.170 --> 00:10:25.250
It's gonna contain a variable
of j that was set to i.

152
00:10:25.250 --> 00:10:28.768
This can be, doing it this way,
yeah, is fine.

153
00:10:28.768 --> 00:10:31.100
They both give the same result.

154
00:10:31.100 --> 00:10:37.860
I was about to say something but
I realize both suffer from objects

155
00:10:37.860 --> 00:10:42.483
instead of primitives that you're kind
of passing but that's fine, this works.

156
00:10:42.483 --> 00:10:50.722
Okay, so
just to talk about our recap here.

157
00:10:50.722 --> 00:10:55.110
So, this handout, just wanted to touch,

158
00:10:55.110 --> 00:10:58.790
kind of go to where we are, and
then before we do the exercise.

159
00:11:00.830 --> 00:11:03.410
Here's, I guess we do that.

160
00:11:03.410 --> 00:11:07.480
We'll recap in a second too but just
to show where this is in the exercise.

161
00:11:07.480 --> 00:11:10.383
This is what happens,
everything when you create a function,

162
00:11:10.383 --> 00:11:13.629
all the different properties that
get set when a function is defined.

163
00:11:13.629 --> 00:11:19.155
And then whenever you call a function,
this is kind of what a call object gets,

164
00:11:19.155 --> 00:11:22.106
what's created inside of a call object.

165
00:11:22.106 --> 00:11:25.475
You can see here is the kind of magic
references, and everything like that.

