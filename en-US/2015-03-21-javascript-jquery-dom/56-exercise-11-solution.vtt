WEBVTT

1
00:00:00.000 --> 00:00:04.061
[MUSIC]

2
00:00:04.061 --> 00:00:08.292
&gt;&gt; Justin Meyer: I'm gonna show you
how to write jQuery's proxy method for

3
00:00:08.292 --> 00:00:11.410
the most part it's surprisingly simple.

4
00:00:13.380 --> 00:00:17.780
So I already showed you that
I'm gonna return a function so

5
00:00:17.780 --> 00:00:20.690
proxy is a function that
returns a function.

6
00:00:20.690 --> 00:00:24.710
That calls another function.

7
00:00:24.710 --> 00:00:27.670
[COUGH] What this function is gonna
do is it's gonna to make sure

8
00:00:27.670 --> 00:00:30.480
it's going to call
the original passed function.

9
00:00:31.540 --> 00:00:37.300
It's going to make sure it's
called with the right context and

10
00:00:37.300 --> 00:00:39.770
also forward any arguments

11
00:00:39.770 --> 00:00:43.980
that the original kind of the function
that it's returning is called with.

12
00:00:43.980 --> 00:00:45.130
So I'm gonna use apply.

13
00:00:45.130 --> 00:00:48.160
But I wanna make sure
the context to set right.

14
00:00:48.160 --> 00:00:50.870
I'm gonna pass in any arguments.

15
00:00:52.400 --> 00:00:57.990
So I mentioned a little bit earlier
that arguments is something.

16
00:00:57.990 --> 00:01:01.390
It's essentially when we talked about

17
00:01:01.390 --> 00:01:04.720
a call object being created I said
that there's this inside there.

18
00:01:04.720 --> 00:01:06.680
There's also an arguments object

19
00:01:07.800 --> 00:01:11.520
that has a reference to every
argument that was passed.

20
00:01:11.520 --> 00:01:14.020
So this is going to basically take
the arguments that were passed here and

21
00:01:14.020 --> 00:01:16.390
forward them to this function but

22
00:01:16.390 --> 00:01:19.001
we're gonna give it a different
context that was passed.

23
00:01:19.001 --> 00:01:21.600
And then we're going to make sure
we're gonna return the result

24
00:01:22.680 --> 00:01:27.570
of calling that function for
the result of this outer function.

25
00:01:27.570 --> 00:01:32.770
And that is it but I'm gonna to try to
explain what's going on in memory because

26
00:01:32.770 --> 00:01:33.960
this can be a little bit confusing.

27
00:01:33.960 --> 00:01:38.840
But I wanna first make sure it works.
&gt;&gt; Justin Meyer: Cool.

28
00:01:40.130 --> 00:01:43.540
Any questions before I
do this explanation.

29
00:01:45.550 --> 00:01:46.910
All right I'll do this explanation.

30
00:01:46.910 --> 00:01:52.940
So let me first show what's going on here.

31
00:01:55.710 --> 00:01:57.020
So, in memory.

32
00:01:57.020 --> 00:02:00.730
I've got a dog with the name
property in a speak function.

33
00:02:00.730 --> 00:02:05.890
So, I've made a dog object with a name
property and the speak function.

34
00:02:06.900 --> 00:02:10.320
We've also created our
dollar is a function but

35
00:02:10.320 --> 00:02:13.760
it also has a proxy property
that is another function.

36
00:02:13.760 --> 00:02:17.550
So, this is that proxy,
it's our proxy function we just created.

37
00:02:19.410 --> 00:02:24.360
Now, what is gonna happen
when we do dollar proxy.

38
00:02:26.240 --> 00:02:29.750
Dollar proxy dog, speak, dog.

39
00:02:31.670 --> 00:02:35.370
Well what's gonna happen always
when we call any function

40
00:02:35.370 --> 00:02:37.350
is a new call object is gonna be created.

41
00:02:39.140 --> 00:02:39.850
This the right one here?

42
00:02:39.850 --> 00:02:43.712
No, these things keep getting

43
00:02:43.712 --> 00:02:50.741
drained.
&gt;&gt; Justin Meyer: I'm

44
00:02:50.741 --> 00:02:54.940
gonna have to block you guys view while
I write this out and then I'll show it.

45
00:02:54.940 --> 00:02:58.689
So I'm a create call object,
try to create a call object.

46
00:03:00.030 --> 00:03:01.770
Our call object.

47
00:03:01.770 --> 00:03:07.140
And call objects always know about
the function that created them and

48
00:03:08.430 --> 00:03:09.950
it's going to get its argument.

49
00:03:09.950 --> 00:03:14.685
The arguments we're going
to be passing is FN and

50
00:03:14.685 --> 00:03:18.377
context.

51
00:03:18.377 --> 00:03:25.380
So, FN.
&gt;&gt; Justin Meyer: Is going to

52
00:03:25.380 --> 00:03:32.560
be a pointer to this function in memory.
&gt;&gt; Justin Meyer: The speak function.

53
00:03:32.560 --> 00:03:33.429
And context.

54
00:03:42.795 --> 00:03:45.190
&gt;&gt; Justin Meyer: Sorry if this is small
for everybody in the back of the room.

55
00:03:45.190 --> 00:03:49.215
Context is going to be
a reference to this dog object in

56
00:03:49.215 --> 00:03:53.639
memory.
&gt;&gt; Justin Meyer: Should we go right in

57
00:03:53.639 --> 00:03:55.490
through the point right there.

58
00:03:56.610 --> 00:04:00.000
So we've got a function in context or
reference seen.

59
00:04:01.300 --> 00:04:04.270
This function in memory, the speak
function memory and the dog object.

60
00:04:05.660 --> 00:04:09.340
Now what this function is going to do
is create another function in memory.

61
00:04:10.740 --> 00:04:17.640
So all functions know about their parent
object, all the parent call object.

62
00:04:18.840 --> 00:04:23.912
So that kind of pseudo
pointer knows about that and

63
00:04:23.912 --> 00:04:28.984
then this is what's gonna
be returned as the speak

64
00:04:28.984 --> 00:04:35.221
proxy function.
&gt;&gt; Justin Meyer: The speakProxy

65
00:04:35.221 --> 00:04:42.577
function,
&gt;&gt; Justin Meyer: I'm just

66
00:04:42.577 --> 00:04:49.415
gonna write speak P.
&gt;&gt; Justin Meyer: So

67
00:04:49.415 --> 00:04:56.368
then, when the speakProxy
function is called with woof.

68
00:04:56.368 --> 00:05:02.860
Well that will do the same kind of
create a call object with arguments.

69
00:05:02.860 --> 00:05:11.660
But then it's gonna call.
&gt;&gt; Justin Meyer: Where is my code?

70
00:05:14.100 --> 00:05:18.200
It's going to gonna call
this inner function.

71
00:05:18.200 --> 00:05:21.830
It's gonna call this inner function,

72
00:05:21.830 --> 00:05:26.870
create a call object and another call
object and now this is getting messy.

73
00:05:29.610 --> 00:05:32.720
Create other call object,
that's going to look up fn.

74
00:05:32.720 --> 00:05:35.349
It's gonna try to look up fn inside.

75
00:05:39.360 --> 00:05:45.595
Yup.
[SOUND] It's going to.

76
00:05:45.595 --> 00:05:51.166
So this is the call object for
this inner invocation of a function.

77
00:05:51.166 --> 00:05:54.820
This is gonna try to look up fn in here,
not find it,

78
00:05:54.820 --> 00:05:59.450
walk to the parent call object and

79
00:05:59.450 --> 00:06:03.780
get fn from kind of the parent
function there which is this function.

80
00:06:03.780 --> 00:06:07.930
And then it's gonna do the same thing for
context and get the context and

81
00:06:07.930 --> 00:06:12.600
it's gonna call this function
with this is it's context and for

82
00:06:12.600 --> 00:06:17.149
the arguments that this essentially
call object was created with.

83
00:06:18.390 --> 00:06:19.330
That's what's going on in memory.

84
00:06:19.330 --> 00:06:23.375
I don't know if that helps explain it but
that's how I see the world.

85
00:06:23.375 --> 00:06:28.435
[LAUGH] Maybe I'm going crazy,
I don't know.

86
00:06:28.435 --> 00:06:32.540
Any other questions about this?

87
00:06:32.540 --> 00:06:38.090
Hopefully it makes sense.
&gt;&gt; Justin Meyer: No, yeah?

88
00:06:38.090 --> 00:06:39.470
All right.

89
00:06:41.030 --> 00:06:49.316
Now we're going to move on to the DOM.

90
00:06:49.316 --> 00:06:53.147
Move this out of the way,

91
00:06:53.147 --> 00:06:58.679
I guess.
&gt;&gt; Justin Meyer: New Slide.

92
00:07:04.300 --> 00:07:05.790
&gt;&gt; Justin Meyer: Okay, so.

93
00:07:05.790 --> 00:07:09.024
Yeah.
&gt;&gt; Student: There's a question why can we

94
00:07:09.024 --> 00:07:12.150
explicitly returned fn.apply,

95
00:07:12.150 --> 00:07:16.110
instead of within a function?
&gt;&gt; Justin Meyer: I'm not sure

96
00:07:16.110 --> 00:07:19.180
what you mean of instead of within?
&gt;&gt; Student: I think.

97
00:07:19.180 --> 00:07:23.538
At least my interpretation,
he might be asking,

98
00:07:23.538 --> 00:07:28.416
why are we returning a function
that calls fn.apply why

99
00:07:28.416 --> 00:07:33.690
don't we just return fn.apply in one line.
&gt;&gt; Justin Meyer: That's a good question,

100
00:07:33.690 --> 00:07:36.280
yeah.
&gt;&gt; Student 2: I think the method

101
00:07:36.280 --> 00:07:40.811
signature would be different, because
it would be expecting you to pass in

102
00:07:40.811 --> 00:07:45.260
context.
&gt;&gt; Justin Meyer: Well maybe.

103
00:07:45.260 --> 00:07:48.450
I guess we're interpreting
what Alexis just said is

104
00:07:48.450 --> 00:07:51.520
I thought I think he's thinking
that you could just do.

105
00:07:51.520 --> 00:07:54.730
He's wanting to just do something
like this or something, right.

106
00:07:54.730 --> 00:07:55.740
&gt;&gt; Student 2: I'm saying is

107
00:07:55.740 --> 00:07:59.210
that if you return that function.

108
00:07:59.210 --> 00:08:02.290
It's expecting contacts to
come in as the first parameter

109
00:08:03.340 --> 00:08:07.470
when you then run your proxy function.
&gt;&gt; Justin Meyer: Well this one,

110
00:08:07.470 --> 00:08:11.240
the problem with this, is this won't even
return the function in the first place,

111
00:08:11.240 --> 00:08:16.570
this would just invoke that function
that was passed in right away.

112
00:08:16.570 --> 00:08:21.860
The reason you might be asking this
question is why is there a dollar proxy?

113
00:08:21.860 --> 00:08:22.960
That's a fair question.

114
00:08:22.960 --> 00:08:27.740
If you guys have never needed
to do something similar to this.

115
00:08:29.550 --> 00:08:30.960
The example that I gave,

116
00:08:30.960 --> 00:08:33.840
the shortest example that I gave,
was the one from the slide.

117
00:08:38.250 --> 00:08:47.180
Perhaps you want to call dog
speak function in one second.

118
00:08:47.180 --> 00:08:51.720
So you wanna be able to pass hey,
in one second call this function.

119
00:08:54.850 --> 00:08:58.680
JavaScript, when it would call, if you
just passed dog speak here, it will mess

120
00:08:58.680 --> 00:09:03.140
that up and call this function back
with this set to something different.

121
00:09:03.140 --> 00:09:08.850
So jQuery has long
provided dollar proxy to

122
00:09:08.850 --> 00:09:13.810
make it so you can get your functions
called with the right this.

123
00:09:15.060 --> 00:09:18.960
So you do this kind of behavior a lot if
you're doing object oriented programming

124
00:09:18.960 --> 00:09:21.155
in JavaScript Where you'll say okay,

125
00:09:21.155 --> 00:09:27.260
as result of this AJAX
call complete this to do.

126
00:09:28.520 --> 00:09:34.500
You need that sometimes you often need to
make sure that this is set correctly but

127
00:09:34.500 --> 00:09:37.940
you need to pass a single callback
function to something else.

128
00:09:42.580 --> 00:09:43.700
Pretty common.

129
00:09:43.700 --> 00:09:44.200
Cool.

