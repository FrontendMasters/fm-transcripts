WEBVTT

1
00:00:00.000 --> 00:00:04.000
[MUSIC]

2
00:00:04.000 --> 00:00:05.500
&gt;&gt; Justin: Let's do an exercise here.

3
00:00:05.500 --> 00:00:09.010
I apologize for the crowding of the slide.

4
00:00:09.010 --> 00:00:09.900
There's a lot of text up here.

5
00:00:11.140 --> 00:00:15.060
But let's create some people.

6
00:00:15.060 --> 00:00:17.730
We have a person constructor.

7
00:00:17.730 --> 00:00:22.807
This is all available and there's

8
00:00:22.807 --> 00:00:29.290
a test stud html in
the JS folder exercises.

9
00:00:29.290 --> 00:00:31.224
I'll put that up here as well.

10
00:00:31.224 --> 00:00:35.470
We're gonna make this possible,
this exercise possible,

11
00:00:35.470 --> 00:00:38.930
we're gonna save our
person equals a function.

12
00:00:38.930 --> 00:00:41.850
This is going to be our constructor
function it takes a name and

13
00:00:41.850 --> 00:00:48.970
it's gonna set the name to the context
of whatever person we're creating.

14
00:00:48.970 --> 00:00:53.780
So here we have, person.prototype.

15
00:00:53.780 --> 00:00:55.440
This person is gonna be true.

16
00:00:55.440 --> 00:00:59.470
This is just gonna make sure
we can walk up later on,

17
00:00:59.470 --> 00:01:01.860
cuz if we're setting
something on the prototype.

18
00:01:03.450 --> 00:01:08.360
When we use our dot operator we should be
able to walk up the chain and find it.

19
00:01:08.360 --> 00:01:12.810
The same way we looked for
if we had foo equals new objects and

20
00:01:12.810 --> 00:01:17.355
we said foo.two string by
invoking two string by using dot.

21
00:01:17.355 --> 00:01:22.240
We were able to walk up to the proto chain
to find where two string actually lives.

22
00:01:22.240 --> 00:01:24.760
We're gonna do the same thing here for
person.

23
00:01:24.760 --> 00:01:29.076
So the first four lines is just
are boilerplate that we're giving you for

24
00:01:29.076 --> 00:01:33.980
this exercise, excuse me, the first five
lines cuz the var person = new person.

25
00:01:33.980 --> 00:01:37.810
This is what we're gonna do,
this is actually a really good exercise to

26
00:01:37.810 --> 00:01:41.890
do whenever you're trying to get familiar
with the internals of a language.

27
00:01:43.100 --> 00:01:48.870
We're gonna say, DOT is gonna be
a function it's going to accept person and

28
00:01:48.870 --> 00:01:52.320
then name as an argument.

29
00:01:52.320 --> 00:01:54.880
This is gonna be the same thing I want

30
00:01:54.880 --> 00:01:59.049
to have the same functionality
as saying person.name.

31
00:01:59.049 --> 00:02:04.141
So you're basically gonna
be implementing JavaScript

32
00:02:04.141 --> 00:02:08.590
with JavaScript to get to
incept your own stuff.

33
00:02:08.590 --> 00:02:12.046
We're gonna do the same thing for
a person.isPerson.

34
00:02:12.046 --> 00:02:15.972
We'll say .person with
isPerson as our argument.

35
00:02:15.972 --> 00:02:17.740
This is the property we want to look up.

36
00:02:19.000 --> 00:02:24.070
So if I say a person.Name,
this would return Smith I would expect.

37
00:02:24.070 --> 00:02:28.879
If I say a person.isPerson I
would expect this to return true.

38
00:02:28.879 --> 00:02:31.200
And this is what our two
function calls should do.

39
00:02:34.130 --> 00:02:38.534
DOT is gonna take the object that we wanna
look for, that we want to traverse and

40
00:02:38.534 --> 00:02:40.354
the property we want to look up.

41
00:02:40.354 --> 00:02:43.280
In this case there's only two name and
isperson.

42
00:02:43.280 --> 00:02:47.723
Dot is going to have to walk
up the proto_chain right,

43
00:02:47.723 --> 00:02:53.049
cuz 2string isn't at the start,
isperson isn't at the start.

44
00:02:53.049 --> 00:02:57.718
You have to walk up to each
additional prototype to

45
00:02:57.718 --> 00:03:01.838
say hey do you have this method or
property?

46
00:03:01.838 --> 00:03:07.213
One more, hint, there is a way to
check if the object that you're on has

47
00:03:07.213 --> 00:03:13.170
that property, is this property defined
on you and not on your proto_chain.

48
00:03:13.170 --> 00:03:15.549
I just wanna know,
do you specifically have this?

49
00:03:15.549 --> 00:03:20.411
And there's a method to check for
that, that has own property that will

50
00:03:20.411 --> 00:03:24.637
check to say, hey I do or
don't have this method or property.

51
00:03:28.420 --> 00:03:29.390
&gt;&gt; Justin: Does that all make sense?

52
00:03:29.390 --> 00:03:30.694
I see a lot of blank stares.

53
00:03:35.660 --> 00:03:40.007
&gt;&gt; Justin: Cool do you have any questions
before we get started and this isn't like

54
00:03:40.007 --> 00:03:44.799
a closed book we'll be here to help you
too through the course of the exercise.

55
00:03:47.420 --> 00:03:50.520
&gt;&gt; Speaker 2: So, trying not to,
how would you say, for the example.

56
00:03:50.520 --> 00:03:54.779
If you're trying to write something
that's going to walk up the proto_chain,

57
00:03:54.779 --> 00:03:58.360
you could effectively do this with
like one [INAUDIBLE] line of code.

58
00:03:58.360 --> 00:04:01.673
Just a simple line of codes you'd use in
the index operator that doesn't actually

59
00:04:01.673 --> 00:04:03.559
keep walking up the proto property.

60
00:04:04.600 --> 00:04:09.150
Don't write it that way, cuz it's cool
actually to walk up the proto_chain.

61
00:04:10.970 --> 00:04:12.390
It's going to be a recursive function,

62
00:04:12.390 --> 00:04:15.990
is another hint if you need
me to help you with that.

63
00:04:15.990 --> 00:04:17.130
Any other questions?

64
00:04:20.880 --> 00:04:23.860
&gt;&gt; Justin: Cool.
Let's take, what, 15 minutes.

65
00:04:23.860 --> 00:04:29.730
Do the exercises, and then circle back.

66
00:04:29.730 --> 00:04:32.790
To understand recursion one must
first understand recursion.

67
00:04:33.820 --> 00:04:36.090
And let's do it.

68
00:04:36.090 --> 00:04:37.637
It's a bit of advice.

69
00:04:37.637 --> 00:04:43.644
[LAUGH] And, let me put the,
Justin just, put the paths in the chat.

70
00:04:43.644 --> 00:04:46.758
But I'll put it up here as well.

71
00:04:46.758 --> 00:04:52.760
Exer, make this smaller.

72
00:04:52.760 --> 00:04:55.145
&gt;&gt; Speaker 2: The other thing cool about
this is we're gonna write the dot .call,

73
00:04:55.145 --> 00:04:55.810
the new operator.

74
00:04:56.990 --> 00:05:01.930
And I keep the instance of
operator in JavaScript which if

75
00:05:01.930 --> 00:05:06.510
you write this and understand it, you will
really get how the dot operator works.

76
00:05:06.510 --> 00:05:08.238
It's not that much different,

77
00:05:08.238 --> 00:05:12.530
you'll understand what's happening when
the new operator calls a function.

78
00:05:12.530 --> 00:05:15.312
The code is only going to be about
five lines for the new operator,

79
00:05:15.312 --> 00:05:17.300
it's pretty simple, but
it is hard to write.

80
00:05:17.300 --> 00:05:20.740
And it's gonna be kinda hard to come
up with, but it's good to kinda

81
00:05:20.740 --> 00:05:25.150
flex those muscles trying to think of
how you could write a dot operator.

