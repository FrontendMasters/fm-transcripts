WEBVTT

1
00:00:00.000 --> 00:00:03.560
[MUSIC]

2
00:00:03.560 --> 00:00:07.162
&gt;&gt; Justin Meyer: So I'm gonna kind of go
through again why we're doing it like why

3
00:00:07.162 --> 00:00:09.450
we're doing what we're doing.

4
00:00:09.450 --> 00:00:13.480
Hopefully most of you have
used jQuery at some point.

5
00:00:13.480 --> 00:00:16.900
And if you're used to jQuery,
you do something like this,

6
00:00:16.900 --> 00:00:19.120
if I wanna get every li in the page.

7
00:00:20.190 --> 00:00:27.020
I can do var lis = $li and
then I can do something like this and

8
00:00:27.020 --> 00:00:32.544
go lis[0] and
that will actually give me the li element.

9
00:00:32.544 --> 00:00:37.080
All right, and I can do lis.length and

10
00:00:37.080 --> 00:00:40.530
that will give me the number
of lis in the page.

11
00:00:42.630 --> 00:00:47.530
What you're doing fundamentally when you
do $li like this, is you're really making

12
00:00:47.530 --> 00:00:54.220
an instance of jQuery, underneath
the hood that's what's happening.

13
00:00:55.230 --> 00:01:01.370
And we're going to make ours work pretty
much the exact same way as jQuery.

14
00:01:01.370 --> 00:01:06.040
But we're starting with instead of
just being able call dollar like that

15
00:01:06.040 --> 00:01:10.280
we're starting with it, so
you have to call new dollar.

16
00:01:10.280 --> 00:01:13.929
But we want the same behavior,
we want it so you get a list of lis.

17
00:01:15.040 --> 00:01:17.670
You get a list of lis back and
there's also by the way,

18
00:01:17.670 --> 00:01:20.020
I forgot to mention the one
other important thing.

19
00:01:20.020 --> 00:01:24.040
This lis has all the jQuery
methods you've come to love and

20
00:01:24.040 --> 00:01:26.720
adore which is like the HTML method.

21
00:01:26.720 --> 00:01:31.030
That will give you the HTML of
the first li in this collection.

22
00:01:31.030 --> 00:01:37.020
Maybe it was like Hello, World or
something like that, right?

23
00:01:37.020 --> 00:01:42.090
So what we want is a constructor
function dollar that

24
00:01:42.090 --> 00:01:48.543
returns to us an instance of something
that has all of these HTML and

25
00:01:48.543 --> 00:01:55.475
text methods and stuff like that,
that we're adding to $prototype.

26
00:01:55.475 --> 00:02:00.179
So we have all of these methods here,
but at the same time,

27
00:02:00.179 --> 00:02:02.774
it looks like an array, right?

28
00:02:02.774 --> 00:02:08.260
It's got a length and it has items,
kind of numeric properties so

29
00:02:08.260 --> 00:02:13.347
it looks just like an array but
it's got all these methods and

30
00:02:13.347 --> 00:02:16.470
this is really the secret of jQuery.

31
00:02:16.470 --> 00:02:20.644
In a lot of ways it hit a lot of things
right, it was like an array, but

32
00:02:20.644 --> 00:02:22.568
had all these useful methods.

33
00:02:22.568 --> 00:02:27.270
It had chaining and all this other
nice stuff that made it super useful.

34
00:02:27.270 --> 00:02:28.750
That's why it's so popular today.

35
00:02:30.110 --> 00:02:32.771
Any questions with that before
I go onto the solution?

36
00:02:36.614 --> 00:02:37.734
&gt;&gt; Justin Meyer: Okay, so,

37
00:02:37.734 --> 00:02:45.350
we wanna get something like this working,
and we're passing in a CSS selector.

38
00:02:46.440 --> 00:02:51.140
So, first thing I'm gonna do is,
I will make an elements array,

39
00:02:51.140 --> 00:02:54.265
get elements from the page
that match the CSS selector.

40
00:02:54.265 --> 00:02:58.956
So we document.querySelectorAll, and

41
00:02:58.956 --> 00:03:04.750
I'm gonna pass it the selector
that was passed in.

42
00:03:04.750 --> 00:03:09.922
So if li was passed in,
document.querySelectorAll is gonna give me

43
00:03:09.922 --> 00:03:15.120
an array of elements, array of lis,
something array like that lis.

44
00:03:15.120 --> 00:03:18.690
Now here is the really tricky hard part,
is you need to make it so

45
00:03:18.690 --> 00:03:22.990
that whenever new$ is called,

46
00:03:22.990 --> 00:03:28.870
this is going to be an instance of $.

47
00:03:28.870 --> 00:03:31.988
The only way I can really
express that is by doing

48
00:03:31.988 --> 00:03:38.535
this.__proto__ ===

49
00:03:38.535 --> 00:03:43.190
$.prototype or
I guess I could write it also,

50
00:03:43.190 --> 00:03:48.920
this is an instanceof $.

51
00:03:48.920 --> 00:03:52.040
So this will already have,
I can already write in here.

52
00:03:52.040 --> 00:03:54.970
I could write this.html and
that would work.

53
00:03:54.970 --> 00:03:59.230
Well, it would exist and
it would call an empty function right now.

54
00:03:59.230 --> 00:04:03.702
What I want to be able to do is make
sure it has a this[0] property.

55
00:04:03.702 --> 00:04:07.254
And I also wanna make sure it
has a this.length property,

56
00:04:07.254 --> 00:04:10.310
this[0] is gonna be just
like that li up there.

57
00:04:11.635 --> 00:04:15.365
And this.length would be the number
of lis in the page, maybe five.

58
00:04:15.365 --> 00:04:18.365
So I want all of this
behavior that jQuery adds.

59
00:04:20.315 --> 00:04:25.271
The way to do this, the easiest kind
of way I think to understand is just

60
00:04:25.271 --> 00:04:30.485
brute force, copy every element in
here onto a numeric property of this.

61
00:04:30.485 --> 00:04:33.522
So I'm gonna do just that,
I'm gonna go through every

62
00:04:33.522 --> 00:04:42.495
element,
&gt;&gt; Justin Meyer: And

63
00:04:42.495 --> 00:04:50.900
I'm going to set this[i] so
I'm going to set a numeric property.

64
00:04:50.900 --> 00:04:56.012
So I'm gonna set this
.zero essentially equal

65
00:04:56.012 --> 00:05:03.902
to elements i.
&gt;&gt; Justin Meyer: Guys with me there?

66
00:05:03.902 --> 00:05:06.605
All right, awesome.

67
00:05:06.605 --> 00:05:12.697
And then I wanna make sure
has this length property,

68
00:05:12.697 --> 00:05:18.940
so I'm gonna do this.length
= elements.length,

69
00:05:24.442 --> 00:05:25.379
&gt;&gt; Justin Meyer: Cool, so

70
00:05:25.379 --> 00:05:31.595
some of you might remember there
is this hint that I said that can

71
00:05:31.595 --> 00:05:38.295
make,
&gt;&gt; Justin Meyer: Make this

72
00:05:38.295 --> 00:05:44.330
kind of code go away because
there's a nicer way of doing it.

73
00:05:46.960 --> 00:05:52.120
The hint is to use push and

74
00:05:52.120 --> 00:05:54.870
steal it for our own purposes.

75
00:05:56.140 --> 00:06:03.810
So instead of doing all of this, I could,
I'll do it above it and delete it.

76
00:06:03.810 --> 00:06:06.690
I could get array, well,
if I want to shorthand for

77
00:06:06.690 --> 00:06:08.870
getting array.push I
can write it like that.

78
00:06:08.870 --> 00:06:13.495
Or I could write Array.prototype.push, but

79
00:06:13.495 --> 00:06:17.317
instead of making this a normal array.

80
00:06:17.317 --> 00:06:22.687
Instead of push operating
on a normal array,

81
00:06:22.687 --> 00:06:29.059
I can make it operate on this and
pass it the elements.

82
00:06:30.154 --> 00:06:32.320
And Array.push pushes code,

83
00:06:32.320 --> 00:06:36.060
pretty much looks the exact same as,
looks pretty similar to this.

84
00:06:36.060 --> 00:06:42.596
So it really just does the same thing and
this is a way of saving some code,

85
00:06:42.596 --> 00:06:46.785
and maybe performing
a little bit better too.

86
00:06:46.785 --> 00:06:52.017
Any questions about that and this trick?

87
00:06:52.017 --> 00:06:56.797
You'll see this kind of thing reaching out
to array's prototype methods on things

88
00:06:56.797 --> 00:06:58.720
that are not arrays all the time.

89
00:06:58.720 --> 00:07:03.974
If you ever open the hoods
to any open source library.

90
00:07:03.974 --> 00:07:06.668
&gt;&gt; Speaker 2: Should be applied since

91
00:07:06.668 --> 00:07:09.795
its element is-
&gt;&gt; Justin Meyer: It should be applied,

92
00:07:09.795 --> 00:07:10.451
thank you.

93
00:07:10.451 --> 00:07:15.853
I wrote that wrong.
&gt;&gt; Justin Meyer: And

94
00:07:15.853 --> 00:07:22.265
we might even have to make, in some
browsers I think you have to even do then,

95
00:07:22.265 --> 00:07:27.787
$.makeArray, but you don't give them.
&gt;&gt; Speaker 3: In older [INAUDIBLE]

96
00:07:27.787 --> 00:07:32.587
then you would have to do what you said.
&gt;&gt; Justin Meyer: Yeah, and you'd

97
00:07:32.587 --> 00:07:37.369
have to set the length property to zero
to make it totally work in all browsers.

98
00:07:37.369 --> 00:07:38.925
&gt;&gt; Speaker 3: Yeah.

99
00:07:38.925 --> 00:07:39.888
&gt;&gt; Justin Meyer: But this,

100
00:07:39.888 --> 00:07:44.490
this works right here,
any questions about this?

101
00:07:45.630 --> 00:07:52.240
So I'm gonna set it back to the other one,
just so we can see what's going on.

102
00:07:52.240 --> 00:07:56.317
I'm going to step in to a debugger
just to show what's happening

103
00:07:56.317 --> 00:08:03.340
here.
&gt;&gt; Justin Meyer: Oops,

104
00:08:03.340 --> 00:08:07.200
let me delete my code at the top
of my page, it doesn't work,

105
00:08:07.200 --> 00:08:11.011
because I like going through
a debugger with these things.

106
00:08:20.902 --> 00:08:23.205
&gt;&gt; Justin Meyer: So is that code big

107
00:08:23.205 --> 00:08:27.817
enough hopefully, yeah, maybe?

108
00:08:27.817 --> 00:08:34.770
Okay, so
we are gonna walk the call stack here.

109
00:08:34.770 --> 00:08:41.958
We just did, those move fast,
new$ with contacts li.contacts.

110
00:08:41.958 --> 00:08:49.134
So this is gonna get every contact, that's
an li inside of our contacts element,

111
00:08:49.134 --> 00:08:54.140
which these guys are all up in here,
in the test fixture.

112
00:08:55.390 --> 00:09:00.360
So we're gonna do
a document.querySelectorAll

113
00:09:00.360 --> 00:09:04.370
with the selector as contacts, li.contact.

114
00:09:04.370 --> 00:09:10.239
By the way one thing I wanna just mention
You see here these scope variables?

115
00:09:10.239 --> 00:09:14.738
These things match, each one of these
little, these are call objects,

116
00:09:14.738 --> 00:09:18.240
each one of these little
arrows right here.

117
00:09:18.240 --> 00:09:21.510
And if you understand call objects, then
you can understand what's going on and

118
00:09:21.510 --> 00:09:26.730
why this shows,
because it has this inside of it.

119
00:09:26.730 --> 00:09:30.240
It has the elements and
it has the selector arguments, and

120
00:09:30.240 --> 00:09:35.820
it also has the i which is
currently on the find as well.

121
00:09:35.820 --> 00:09:39.867
And then if we walk up to the closure, now
we're in the invocation of this function,

122
00:09:39.867 --> 00:09:42.429
this outer function that's
immediately invoked.

123
00:09:42.429 --> 00:09:47.100
var isArrayLike is in there, and
then if you keep walking up,

124
00:09:47.100 --> 00:09:51.580
you eventually get to the global call
object which has everything in it, right?

125
00:09:51.580 --> 00:09:55.610
So we're just kind of walking
up our call objects, so

126
00:09:55.610 --> 00:09:58.920
hopefully now if there's one thing
you can take away from this.

127
00:09:58.920 --> 00:10:04.309
It's that you now
understand completely what

128
00:10:04.309 --> 00:10:10.151
these things are and
how they relate to closures.

129
00:10:10.151 --> 00:10:14.337
So back to this, we saw that it was
selector, it was called with a selector.

130
00:10:14.337 --> 00:10:21.870
I'm gonna step over, I'm gonna kill
all this stuff, hide that, shown here.

131
00:10:21.870 --> 00:10:26.380
We'll see that elements is a node list, so

132
00:10:26.380 --> 00:10:30.150
not a true array, but
sure acts very similar to one.

133
00:10:30.150 --> 00:10:35.350
It's got each liin it, and then we're
gonna simply, we'll see what our this is.

134
00:10:35.350 --> 00:10:39.160
You could see the prototype
methods on a proto.

135
00:10:39.160 --> 00:10:42.920
And we're all going to see,

136
00:10:42.920 --> 00:10:47.260
just added a zero property
which is the first contact.

137
00:10:47.260 --> 00:10:52.351
That's gonna add a 1 property and
then it's gonna add a length as 2.

138
00:10:52.351 --> 00:10:55.813
So this is what our $ looks
like in memory, it's got a 0,

139
00:10:55.813 --> 00:11:00.691
1 in length property and it's got a proto
property that points to the $prototype

140
00:11:00.691 --> 00:11:05.575
function.
&gt;&gt; Justin Meyer: Cool,

141
00:11:05.575 --> 00:11:10.543
so also hopefully,
I hope that connections are starting

142
00:11:10.543 --> 00:11:15.655
to be made even with debugging tools and
things like that.

143
00:11:15.655 --> 00:11:19.355
To me it's awesome that if you
understood yesterday's stuff you can

144
00:11:19.355 --> 00:11:21.705
kind of get what's going on in here.

145
00:11:21.705 --> 00:11:23.761
Why is that proto and
why are these things there?

146
00:11:23.761 --> 00:11:28.096
Now it might make sense, okay.

