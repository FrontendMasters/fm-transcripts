WEBVTT

1
00:00:00.000 --> 00:00:04.160
[MUSIC]

2
00:00:04.160 --> 00:00:07.420
&gt;&gt; Alexis Abril: So to summarize all of
this, variables are put in a call object.

3
00:00:07.420 --> 00:00:10.550
This is our call object visual
representation here in blue and

4
00:00:10.550 --> 00:00:12.090
we say var me.

5
00:00:12.090 --> 00:00:15.918
This is going to be assigned

6
00:00:15.918 --> 00:00:20.300
to our new object with the equals that's
what it's going to set our pointer

7
00:00:20.300 --> 00:00:25.840
to our address in memory here is our new
object then here me equals curly brace.

8
00:00:25.840 --> 00:00:31.030
Then if we have any attributes
on this objects like age or have

9
00:00:31.030 --> 00:00:35.450
this be a new pointer, it's going to point
to some other primitive in this case.

10
00:00:35.450 --> 00:00:40.227
This could be anything right now in
this case it's a primitive number but

11
00:00:40.227 --> 00:00:45.411
this could be anything else and this is
gonna be our flow of what points to what.

12
00:00:45.411 --> 00:00:49.211
We're gonna get into a few
situations here, some really,

13
00:00:49.211 --> 00:00:51.647
really common situations like this.

14
00:00:51.647 --> 00:00:55.986
Where we have what we would describe
as maybe unexpected behavior, but

15
00:00:55.986 --> 00:00:59.599
once you have an understanding
of what is pointing to what,

16
00:00:59.599 --> 00:01:02.370
you would completely this makes sense.

17
00:01:02.370 --> 00:01:08.550
I completely expect this to work the way
it does, so let's talk about this,

18
00:01:08.550 --> 00:01:12.960
why does this still point to
justin at the end of this?

19
00:01:12.960 --> 00:01:19.060
So here we go,
we have our initial construct me.name.

20
00:01:19.060 --> 00:01:23.470
This is our name object,
I'm sorry, me was our object.

21
00:01:23.470 --> 00:01:26.370
This is our name object here,
name pointer and

22
00:01:26.370 --> 00:01:29.200
we have a first point of pointing
to a primitive string just in here.

23
00:01:29.200 --> 00:01:31.270
This is the first construct,

24
00:01:31.270 --> 00:01:36.890
we have our second pointer name is
gonna point to this new object.

25
00:01:36.890 --> 00:01:40.650
And this is the weird parts, name = and

26
00:01:40.650 --> 00:01:45.990
then objects first,
alexis what this really does in memory.

27
00:01:45.990 --> 00:01:50.170
If you think about what this does,

28
00:01:50.170 --> 00:01:54.480
remember if we're looking at name
equals curly brace name alexis.

29
00:01:54.480 --> 00:01:57.887
The parser is gonna come
to that curly brace first.

30
00:01:57.887 --> 00:02:03.024
It's going to create a new
object that happens to

31
00:02:03.024 --> 00:02:08.662
have an identical construct
to our earlier object and

32
00:02:08.662 --> 00:02:12.296
then we're just going to reassign

33
00:02:12.296 --> 00:02:17.064
that pointer,
&gt;&gt; Alexis Abril: This

34
00:02:17.064 --> 00:02:20.750
is a little bit different than what you
would expect in like a C or a Java.

35
00:02:20.750 --> 00:02:23.640
I want to say C I'm really
referring to C# not standard C.

36
00:02:24.810 --> 00:02:30.280
Because we would expect this to
probably modify this object, but

37
00:02:30.280 --> 00:02:32.730
again since if you consider
everything a pointer.

38
00:02:32.730 --> 00:02:37.670
All we're doing with the equals is
resigning it to our new spot in memory or

39
00:02:37.670 --> 00:02:38.880
new objects we've allocated.

40
00:02:40.500 --> 00:02:45.810
So when you say me.name.first at the end
of this, you'll still get justin.

41
00:02:45.810 --> 00:02:48.447
Does that make sense?

42
00:02:51.671 --> 00:02:53.400
&gt;&gt; Alexis Abril: Cool, yes go for it.

43
00:02:54.470 --> 00:02:59.787
&gt;&gt; Student: Firefox I've been running
this, and every time I said me.name

44
00:02:59.787 --> 00:03:04.860
to name, it's sets name as
a string with the object,

45
00:03:06.420 --> 00:03:10.602
like, type of placed in a string.

46
00:03:10.602 --> 00:03:13.708
&gt;&gt; Alexis Abril: You're
setting me.name to name.

47
00:03:13.708 --> 00:03:17.520
So you're setting, so
you're doing this concert here and

48
00:03:17.520 --> 00:03:20.510
you're setting after name equals me.name.

49
00:03:20.510 --> 00:03:23.615
&gt;&gt; Student: Yeah.
&gt;&gt; Alexis Abril: You do the reverse

50
00:03:23.615 --> 00:03:27.481
me.name equals name.

51
00:03:27.481 --> 00:03:31.513
&gt;&gt; Student 2: When I do your name
equals me.name and then I call a name,

52
00:03:31.513 --> 00:03:37.434
I get object to object and secured first
not sure that's what he's written I do.

53
00:03:37.434 --> 00:03:40.008
&gt;&gt; Alexis Abril: You're
using Firefox a lot?

54
00:03:40.008 --> 00:03:41.128
&gt;&gt; Student: I'm Chrome.

55
00:03:41.128 --> 00:03:47.321
&gt;&gt; Student 2: Mine's in Chrome tho.

56
00:03:47.321 --> 00:03:49.385
&gt;&gt; Alexis Abril: Gotcha.

57
00:03:49.385 --> 00:03:54.263
&gt;&gt; Group: [CROSSTALK]
&gt;&gt; Student 2: Okay, so

58
00:03:54.263 --> 00:04:02.790
how do I access to your name.first.

59
00:04:02.790 --> 00:04:07.620
&gt;&gt; Alexis Abril: Yes, you told me you
name.first one of my so that's correct.

60
00:04:07.620 --> 00:04:12.187
If you say type of me,
type of me is gonna return an object,

61
00:04:12.187 --> 00:04:16.103
if you say type of me.name,
name is your return,

62
00:04:16.103 --> 00:04:21.350
if you say type of me.name.first,
we're gonna get our string.

63
00:04:21.350 --> 00:04:24.682
If you say type of name
what is name in return?

64
00:04:24.682 --> 00:04:25.384
&gt;&gt; Student: Object.

65
00:04:25.384 --> 00:04:28.694
&gt;&gt; Alexis Abril: In both
instances before the obvious

66
00:04:34.729 --> 00:04:35.830
&gt;&gt; Alexis Abril: Any queestions?

67
00:04:35.830 --> 00:04:40.135
Any other questions, yes, sorry?

68
00:04:40.135 --> 00:04:43.871
&gt;&gt; Student: So the reason why you keep
this is this is happening where you

69
00:04:43.871 --> 00:04:46.920
are using Firefox to read get drunk.

70
00:04:46.920 --> 00:04:51.250
Okay, so
sorry about using a bad example here.

71
00:04:51.250 --> 00:04:55.450
The reason why this is happened, if you
change this to something other than name,

72
00:04:55.450 --> 00:04:56.880
it should work.

73
00:04:56.880 --> 00:05:02.010
Like this was the, you just do foo and
then foo equal something, it should work

74
00:05:02.010 --> 00:05:05.570
the problem is [CROSSTALK] window.name
&gt;&gt; Alexis Abril: Got you.

75
00:05:05.570 --> 00:05:08.880
&gt;&gt; Student: There is a property
like Windows have a name property

76
00:05:08.880 --> 00:05:12.330
that is almost certainly being
typed coursed to a string.

77
00:05:12.330 --> 00:05:17.780
They want it to be a string So when you
set name equals to this object here, or

78
00:05:17.780 --> 00:05:22.310
name equals to this object here,
you just type Kersey here to string.

79
00:05:22.310 --> 00:05:27.270
And that's where you get the object,
object, should change the sign,

80
00:05:27.270 --> 00:05:30.060
because of the first
people there's no where.

81
00:05:30.060 --> 00:05:34.180
I've shown the slide nearly million times,
no one's ever point that out,

82
00:05:34.180 --> 00:05:35.640
so thanks for.

83
00:05:35.640 --> 00:05:36.350
&gt;&gt; Alexis Abril: Good catch.

84
00:05:36.350 --> 00:05:39.900
&gt;&gt; Student: Good catch but hopefully
that makes sense essentially this is

85
00:05:39.900 --> 00:05:45.170
a special property, this is a special
variable essentially the name variable.

86
00:05:45.170 --> 00:05:52.990
So avoid setting it in
just kinda global context.

87
00:05:52.990 --> 00:05:54.269
&gt;&gt; Alexis Abril: We did this in no desk.

88
00:05:55.730 --> 00:06:01.520
&gt;&gt; Student: Yet
relates less no discussion and probably.

89
00:06:01.520 --> 00:06:04.260
You know he's a good catch.

90
00:06:06.210 --> 00:06:08.910
&gt;&gt; Alexis Abril: In terms of the language
this is how things operate in terms of

91
00:06:08.910 --> 00:06:12.280
running in a browser running in
an environment where at the mercy

92
00:06:12.280 --> 00:06:13.760
of the environment.

93
00:06:13.760 --> 00:06:15.260
Good questions though, good catch.

