WEBVTT

1
00:00:00.000 --> 00:00:03.909
[MUSIC]

2
00:00:03.909 --> 00:00:07.767
&gt;&gt; Justin Meyer: But
what we're gonna do is remove the need to

3
00:00:07.767 --> 00:00:12.370
call new when we're using our $ function,
right.

4
00:00:12.370 --> 00:00:16.840
So right now to create an instance
you have to use the new operator but

5
00:00:16.840 --> 00:00:23.440
what we wanna do is make our $
function detect if new wasn't used.

6
00:00:23.440 --> 00:00:26.430
And then make sure new was called.

7
00:00:28.410 --> 00:00:31.530
So let's take a look at our $ function and

8
00:00:31.530 --> 00:00:35.010
see if you guys have any
ideas on how to do this.

9
00:00:35.010 --> 00:00:40.116
So here's our $ function,
we need to make it so

10
00:00:40.116 --> 00:00:44.968
that if I call something like $("li"),

11
00:00:44.968 --> 00:00:50.074
that's still gonna create
an instance of $ and

12
00:00:50.074 --> 00:00:53.930
still return that instance li's.

13
00:00:53.930 --> 00:00:58.812
So that we can do things like
call our HTML method on it.

14
00:00:58.812 --> 00:01:03.310
All right, so quick question.

15
00:01:03.310 --> 00:01:07.690
What's going to happen if we
call the $ function like this?

16
00:01:07.690 --> 00:01:12.953
What will this be inside here?
&gt;&gt; Speaker 2: Window.

17
00:01:12.953 --> 00:01:15.484
&gt;&gt; Justin Meyer: Window, absolutely right,

18
00:01:15.484 --> 00:01:17.110
so that's wrong.

19
00:01:17.110 --> 00:01:25.730
So you guys need to figure out some
way of detecting if this is incorrect.

20
00:01:27.040 --> 00:01:32.140
And then make sure $ is called
with the correct thing.

21
00:01:33.170 --> 00:01:42.304
So I'll kind of write this out.
&gt;&gt; Justin Meyer: And

22
00:01:42.304 --> 00:01:47.595
I'm not gonna say what correct
means cuz you can try to figure

23
00:01:47.595 --> 00:01:52.264
out what not correct means,
if this isn't correct,

24
00:01:52.264 --> 00:01:57.502
call new $(,
&gt;&gt; Justin Meyer: selector)

25
00:01:57.502 --> 00:02:01.960
otherwise, continue as normal.

26
00:02:03.430 --> 00:02:08.780
So that's what you need to do,
any questions about this?

27
00:02:08.780 --> 00:02:09.770
This is the tricky part,

28
00:02:09.770 --> 00:02:12.906
that I want you guys to kinda think
about how you might make this work.

29
00:02:12.906 --> 00:02:16.385
The test

30
00:02:16.385 --> 00:02:23.532
has
&gt;&gt; Justin Meyer: Test

31
00:02:23.532 --> 00:02:28.891
just make sure that the same kinda,
you were getting the same thing

32
00:02:28.891 --> 00:02:34.791
back that using new used.
&gt;&gt; Justin Meyer: Although

33
00:02:34.791 --> 00:02:38.280
it probably should be testing to make sure
that context has an HTML method on it.

34
00:02:39.640 --> 00:02:42.410
But other than that,
this should be test the same thing.

35
00:02:42.410 --> 00:02:44.870
So I'll put this up and

36
00:02:44.870 --> 00:02:49.770
we'll put the, this should be
like seven minutes about that.

37
00:02:49.770 --> 00:02:51.260
We'll start with about seven minutes.

38
00:02:52.490 --> 00:02:54.220
Was there a question?
&gt;&gt; Speaker 3: Yeah,

39
00:02:54.220 --> 00:02:58.350
from before I think if this makes sense.

40
00:02:58.350 --> 00:03:02.787
He was asking about the HTML solution,
arguments.length,

41
00:03:02.787 --> 00:03:06.246
can that be explained again?
&gt;&gt; Justin Meyer: Yeah,

42
00:03:06.246 --> 00:03:12.410
let me go to that.
&gt;&gt; Justin Meyer: To the HTML solution.

43
00:03:15.440 --> 00:03:22.762
So when we call, we get our li's
&gt;&gt; Justin Meyer: We'll

44
00:03:22.762 --> 00:03:24.300
make lis equal that.

45
00:03:24.300 --> 00:03:25.960
And we wanna call this HTML function.

46
00:03:33.220 --> 00:03:40.645
In jQuery if you call [COUGH] The the HTML
function without any arguments,

47
00:03:40.645 --> 00:03:44.539
it returns the innerHTML of first li,

48
00:03:44.539 --> 00:03:48.330
might be something like a Doberman.

49
00:03:51.820 --> 00:03:57.121
If you call li's with multiple
arguments or sorry, if you call li,

50
00:03:57.121 --> 00:04:02.450
or sorry if you call HTML with
an argument, a string argument.

51
00:04:02.450 --> 00:04:05.400
Such as like, hey there,

52
00:04:05.400 --> 00:04:10.840
that's gonna go to every li and
updated its innerHTML, to this.

53
00:04:10.840 --> 00:04:16.000
So this is what the behavior we want, we
want this behavior for our HTML function,

54
00:04:16.000 --> 00:04:21.840
where it does different things depending
on if a value was passed here.

55
00:04:21.840 --> 00:04:24.290
Now there's a way that a lot
of times people will do it,

56
00:04:24.290 --> 00:04:28.890
they'll just say hey if we
have a new val or new HTML.

57
00:04:28.890 --> 00:04:32.330
Then run through this because
hey they passed something so

58
00:04:32.330 --> 00:04:35.520
we'll do the setter instead of the getter.

59
00:04:35.520 --> 00:04:39.954
But this isn't a great
technique because what

60
00:04:39.954 --> 00:04:44.956
happens if someone wanted
to just remove the HTML and

61
00:04:44.956 --> 00:04:48.151
set it to pass in an empty string?

62
00:04:48.151 --> 00:04:51.704
An empty string is false,
so it would return the,

63
00:04:51.704 --> 00:04:56.376
it would do the getter code and
return the first items in our HTML.

64
00:04:56.376 --> 00:05:00.250
Where we really want to be setting every
element in our HTML to the empty string.

65
00:05:01.380 --> 00:05:05.500
So instead of doing it this way,
also instead of doing like undefined,

66
00:05:07.020 --> 00:05:10.130
that would actually work for this case.

67
00:05:10.130 --> 00:05:15.010
But in case someone did pass
an undefined and we actually

68
00:05:15.010 --> 00:05:19.680
wanted to set innerHTML to undefined,
which really doesn't make sense for HTML.

69
00:05:19.680 --> 00:05:21.070
But it does make sense for

70
00:05:21.070 --> 00:05:24.510
other places where you might want to
actually pass in an undefined value.

71
00:05:24.510 --> 00:05:29.464
The strongest best way of just
checking if someone actually called

72
00:05:29.464 --> 00:05:33.717
it with an argument or not,
is to do arguments.length.

73
00:05:33.717 --> 00:05:39.033
Now, the reason why arguments.length
works is anytime a function

74
00:05:39.033 --> 00:05:44.722
is called along with the other,
with all the values like the arguments,

75
00:05:44.722 --> 00:05:50.704
new HTML being put in the call object,
and this being put in the call object.

76
00:05:50.704 --> 00:05:55.379
There's also an arguments
array-like structure that you can

77
00:05:55.379 --> 00:05:59.876
access inside of a function and
that gives you an array-like

78
00:05:59.876 --> 00:06:04.390
structure of each argument that
was passed to the function.

79
00:06:04.390 --> 00:06:08.361
And arguments also has a length to tell
you how many arguments that function was

80
00:06:08.361 --> 00:06:09.090
called with.

81
00:06:09.090 --> 00:06:14.340
So that is about as thorough of
an explanation as I think I can get.

82
00:06:14.340 --> 00:06:15.350
Hopefully that helps.

