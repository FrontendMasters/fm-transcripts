WEBVTT

1
00:00:00.000 --> 00:00:03.837
[MUSIC]

2
00:00:03.837 --> 00:00:05.555
&gt;&gt; Justin Meyer: Let's add
a DOM structure like this.

3
00:00:05.555 --> 00:00:09.529
At my window, it had document inside of
it, it had a body element and a div and

4
00:00:09.529 --> 00:00:10.784
had an anchor element.

5
00:00:10.784 --> 00:00:13.000
I'm gonna click on that acre element.

6
00:00:13.000 --> 00:00:15.860
What's gonna happen is
the browser is going to

7
00:00:17.110 --> 00:00:20.470
dispatch every event handler for click.

8
00:00:20.470 --> 00:00:26.257
That's on the window's capture phase.
&gt;&gt; Justin Meyer: And

9
00:00:26.257 --> 00:00:28.460
then, the document and
the body and the div.

10
00:00:28.460 --> 00:00:31.960
And then, it's gonna dispatch all of
the event handlers on the anchor element.

11
00:00:33.220 --> 00:00:38.440
And then, it's going to dispatch on
the Bubble Phase all of the event

12
00:00:38.440 --> 00:00:41.960
handler is registered on the div,
the body, the document and the window.

13
00:00:43.144 --> 00:00:45.790
So when I talk about,
remember that last argument.

14
00:00:45.790 --> 00:00:47.920
You passed to add event listener.

15
00:00:47.920 --> 00:00:48.750
It was true or false.

16
00:00:48.750 --> 00:00:51.755
It said, use capture.

17
00:00:51.755 --> 00:00:55.943
That controls whether you're
listening on this side or

18
00:00:55.943 --> 00:01:00.500
this side of how the event
propagates when an event happens.

19
00:01:01.880 --> 00:01:03.380
So to kind of repeat that real quick.

20
00:01:03.380 --> 00:01:06.896
When you click on that anchor,
actually I think we have a good demo of

21
00:01:06.896 --> 00:01:11.630
this.
&gt;&gt; Justin Meyer: What is the demo page?

22
00:01:11.630 --> 00:01:19.130
It is events propagation.
&gt;&gt; Justin Meyer: Okay,

23
00:01:19.130 --> 00:01:22.113
here's that same page.

24
00:01:22.113 --> 00:01:23.850
And let me show you the HTML for it.

25
00:01:30.347 --> 00:01:34.461
&gt;&gt; Justin Meyer: [SOUND] Where is it?

26
00:01:34.461 --> 00:01:39.735
Slides.
&gt;&gt; Justin Meyer: So combined.

27
00:01:39.735 --> 00:01:43.184
That's propagation.

28
00:01:43.184 --> 00:01:50.247
Okay, so here,
I'm listening on the body on it's.

29
00:01:50.247 --> 00:01:51.694
If you don't put anything here,

30
00:01:51.694 --> 00:01:57.066
it's the capture phase.
&gt;&gt; Justin Meyer: And

31
00:01:57.066 --> 00:01:58.400
that must not be true.

32
00:01:58.400 --> 00:02:01.308
Sorry, if you don't want anything
here it's the bubble phase.

33
00:02:01.308 --> 00:02:03.950
So I'm listening on
the body's bubble phase.

34
00:02:03.950 --> 00:02:09.075
So I'll go false here and I'm listening
on the bubble, the body's capture phase.

35
00:02:09.075 --> 00:02:14.291
And I'm doing the same thing for
the div, for bubble and body or

36
00:02:14.291 --> 00:02:21.200
sorry bubble and capture phase and the
anchor for its bubble and capture phase.

37
00:02:21.200 --> 00:02:28.950
So when I click on the demo,
I click on a link here.

38
00:02:28.950 --> 00:02:30.749
You can see it says, body captured,

39
00:02:30.749 --> 00:02:34.513
div captured
&gt;&gt; Justin Meyer: Then it's going to do

40
00:02:34.513 --> 00:02:38.376
the a, all of the event handlers in
the order that they were registered.

41
00:02:38.376 --> 00:02:44.718
And then, it's gonna do div bubbled,
body bubbled.

42
00:02:44.718 --> 00:02:46.830
So let's go back and explain this again.

43
00:02:48.490 --> 00:02:52.711
So [SOUND] by putting capture true.

44
00:02:52.711 --> 00:02:55.610
I can listen, so when someone clicks here.

45
00:02:55.610 --> 00:02:59.840
I can listen before that event actually
gets dispatched on the event listeners on

46
00:02:59.840 --> 00:03:00.350
the anchor.

47
00:03:02.430 --> 00:03:03.280
Does that make sense?

48
00:03:03.280 --> 00:03:04.760
Like I can listen, I can pre empt.

49
00:03:04.760 --> 00:03:08.160
I can, if I wanted a logger that
logged everything the user is doing,

50
00:03:08.160 --> 00:03:11.570
if I listen on the windows, for
window clicks on the capture phase,

51
00:03:11.570 --> 00:03:15.680
that will get called before any event
listeners on the incur are dispatched.

52
00:03:17.080 --> 00:03:19.790
This is called Event Propagation
of the DOM, rights.

53
00:03:19.790 --> 00:03:21.630
Because when you click on a link,

54
00:03:21.630 --> 00:03:26.120
events are dispatched on the windows
capture phase and bubble phase listeners.

55
00:03:28.440 --> 00:03:29.520
So make sense?

56
00:03:29.520 --> 00:03:31.026
Any questions about this?

57
00:03:31.026 --> 00:03:34.916
There's one thing I would
like it if you guys retained

58
00:03:34.916 --> 00:03:37.417
and made sense.
&gt;&gt; Speaker 2: Can you give a real life

59
00:03:37.417 --> 00:03:40.194
example of when that might be useful?
&gt;&gt; Justin Meyer: A logger,

60
00:03:40.194 --> 00:03:43.278
on the capture phase,
a logger is where it's really useful.

61
00:03:43.278 --> 00:03:47.010
If you wanna know every
event that someone's doing.

62
00:03:47.010 --> 00:03:52.080
You would listen here because you can
stop events from reaching the window

63
00:03:52.080 --> 00:03:56.770
by calling stop propagation
that prevents the bubbling.

64
00:03:56.770 --> 00:04:01.568
If you listen here,
no one can get to the event and

65
00:04:01.568 --> 00:04:06.263
stop it before you get it,
if that makes sense.

66
00:04:06.263 --> 00:04:09.039
Good question, yeah.
&gt;&gt; Speaker 2: May I ask you?

67
00:04:09.039 --> 00:04:14.634
What about [INAUDIBLE] custom events
to DOM know it's a triggered.

68
00:04:14.634 --> 00:04:18.062
Is there a way that you can do
that without event listener?

69
00:04:18.062 --> 00:04:19.353
&gt;&gt; Justin Meyer: Yes they're,

70
00:04:19.353 --> 00:04:23.232
the DOM does provide
a way to dispatch events.

71
00:04:23.232 --> 00:04:26.660
I can't remember if
dispatch events is the IE.

72
00:04:26.660 --> 00:04:30.921
You do in this, it's this weird kind of,
you do some kind of at in the event and

73
00:04:30.921 --> 00:04:33.493
you provide all the properties for
the event.

74
00:04:33.493 --> 00:04:38.672
And then, you can pass that
event object to some method

75
00:04:38.672 --> 00:04:43.412
on an on an element,
I forgot what it is and that a.

76
00:04:43.412 --> 00:04:50.438
You can do that with custom events,
you can't dispatch your own custom events.

77
00:04:50.438 --> 00:04:54.730
So yeah, so let's move on for
about a propagation.

78
00:04:54.730 --> 00:04:59.230
Basically, the short thing take
from this is that when you listen,

79
00:04:59.230 --> 00:05:01.730
let's say you're listening
on the window for clicks.

80
00:05:01.730 --> 00:05:05.661
You're still gonna be responding
to clicks on an anchor

81
00:05:05.661 --> 00:05:10.442
element cuz that these events work
their way through the whole DOM.

82
00:05:10.442 --> 00:05:12.112
Just wanna skip thru-
&gt;&gt; Speaker 2: Can

83
00:05:12.112 --> 00:05:16.917
you stop propagation on the capture phase?
&gt;&gt; Justin Meyer: Yes-

84
00:05:16.917 --> 00:05:17.497
&gt;&gt; Speaker 2: As well as

85
00:05:17.497 --> 00:05:19.879
stopping propagation on the-
&gt;&gt; Justin Meyer: Yeah,

86
00:05:19.879 --> 00:05:22.550
you can stop on both phases.

87
00:05:22.550 --> 00:05:25.080
That's a good question.

88
00:05:26.380 --> 00:05:31.061
Yeah, so stopPropagation is
this method that prevents

89
00:05:31.061 --> 00:05:35.051
events from going from
one element to the next.

90
00:05:35.051 --> 00:05:39.400
Actually, I'm gonna open
this up in open up here.

91
00:05:41.100 --> 00:05:43.067
Okay, so again, when I click on this,

92
00:05:43.067 --> 00:05:46.121
the body capture phase listener
is gonna be dispatch first.

93
00:05:46.121 --> 00:05:49.211
The div captured phase is gonna be second.

94
00:05:49.211 --> 00:05:52.566
Now, it's gonna dispatch all of
the anchor elements event handlers but

95
00:05:52.566 --> 00:05:56.252
in the order that they were dispatched
because there's this weird target phase

96
00:05:56.252 --> 00:05:57.550
thing that happens.

97
00:05:57.550 --> 00:06:00.560
But then, the event is going
to start propagating back up.

98
00:06:00.560 --> 00:06:04.020
Dispatch the div's bubble phase and
the body bubble phase.

99
00:06:04.020 --> 00:06:09.204
Now, the crazy thing here,
is in the capture phase of the body,

100
00:06:09.204 --> 00:06:12.372
the thing that's gonna be done first,

101
00:06:12.372 --> 00:06:21.777
if I do ev.stopPropagation.
&gt;&gt; Justin Meyer: And

102
00:06:21.777 --> 00:06:24.689
I do this example again.

103
00:06:24.689 --> 00:06:26.541
I am loading the wrong page.

104
00:06:26.541 --> 00:06:30.040
I'm sure that I'm in the wrong.

105
00:06:30.040 --> 00:06:34.331
It should be slides,
demos, front in masters.

106
00:06:44.438 --> 00:06:45.002
&gt;&gt; Justin Meyer: Here,

107
00:06:45.002 --> 00:06:47.640
we go, okay, so now if I do that.

108
00:06:47.640 --> 00:06:48.952
It only hits body captured and

109
00:06:48.952 --> 00:06:53.942
nothing else is dispatched.
&gt;&gt; Justin Meyer: So

110
00:06:53.942 --> 00:06:58.960
a few more things I wanna
talk about with events.

111
00:06:58.960 --> 00:07:01.050
Just to kind of give you an overview.

112
00:07:01.050 --> 00:07:05.665
Even if it's not gonna sink in to my
apologies that we're kinda running out of

113
00:07:05.665 --> 00:07:06.379
time here.

114
00:07:06.379 --> 00:07:07.978
I at least want you to be aware of it.

115
00:07:07.978 --> 00:07:11.140
There's a stopImmediatePropagation.

116
00:07:11.140 --> 00:07:16.730
So stop propagation
only prevents a single,

117
00:07:16.730 --> 00:07:21.100
it prevents propagation from going
the from the current element

118
00:07:21.100 --> 00:07:25.150
to dispatching the next
element's events handlers.

119
00:07:25.150 --> 00:07:29.500
So if you call stop propagation and let's
say the anchor has five event handlers.

120
00:07:29.500 --> 00:07:33.960
It won't prevent any of the other
anchor's event handlers from firing.

121
00:07:33.960 --> 00:07:35.140
Which is kind of weird.

122
00:07:35.140 --> 00:07:39.230
To show what that does,
let me just show the example again here.

123
00:07:39.230 --> 00:07:40.680
So let me remove the stopPropagation.

124
00:07:42.090 --> 00:07:45.640
And if you remember again,
when I clicked this,

125
00:07:46.860 --> 00:07:50.850
a bubble actually happened
before the capture phase.

126
00:07:50.850 --> 00:07:53.060
So let me, in the bubble phase.

127
00:07:53.060 --> 00:07:55.040
Which was registered first.

128
00:07:55.040 --> 00:07:59.677
I'm gonna call ev.stopPropagation.

129
00:08:06.892 --> 00:08:07.979
&gt;&gt; Justin Meyer: So you see here,

130
00:08:07.979 --> 00:08:13.710
even though the stopPropagation happened
here, this event was still fired.

131
00:08:13.710 --> 00:08:18.534
It's because stopPropagation only prevents
it from the next element's events from

132
00:08:18.534 --> 00:08:19.340
being fired.

133
00:08:19.340 --> 00:08:21.750
All of the events on the anchor
will still be fired.

134
00:08:22.750 --> 00:08:29.500
To prevent those from being fired,
I could call stopImmediatePropagation.

135
00:08:31.310 --> 00:08:35.507
And this would stop all the events
on the anchor from being fired.

136
00:08:35.507 --> 00:08:40.520
Any other on the anchor or
any on the parent from being fired,

137
00:08:40.520 --> 00:08:44.534
yeah?
&gt;&gt; Speaker 2: If you attach click handlers

138
00:08:44.534 --> 00:08:50.162
to different elements,
like [INAUDIBLE] as well as the body.

139
00:08:50.162 --> 00:08:51.842
How you tell the difference?

140
00:08:51.842 --> 00:08:55.710
It can mean what was clicked on and
then someone mentioned

141
00:08:55.710 --> 00:08:59.162
current target which is the answer but-
&gt;&gt; Justin Meyer: Yeah,

142
00:08:59.162 --> 00:09:00.414
current target is the answer.

143
00:09:00.414 --> 00:09:04.280
So these, like I said the event object has

144
00:09:04.280 --> 00:09:07.010
there's two interesting
things on the event object.

145
00:09:07.010 --> 00:09:11.460
So here, I'll listen on the,
I'm listing the body bubble.

146
00:09:11.460 --> 00:09:18.326
I'm gonna put out the ev.currentTarg and
the ev.target.

147
00:09:18.326 --> 00:09:23.245
I'm gonna write those out.
&gt;&gt; Justin Meyer: [SOUND] I'm gonna remove

148
00:09:23.245 --> 00:09:32.031
myself ImmediatePropogation two.
&gt;&gt; Justin Meyer: Okay,

149
00:09:32.031 --> 00:09:39.140
so when I click on this, the body bubbled
is going to tell me the current target.

150
00:09:39.140 --> 00:09:41.320
That's whose event handlers
are being dispatched.

151
00:09:41.320 --> 00:09:44.030
Well, the body's event handlers are being
dispatched that's why it gives me

152
00:09:44.030 --> 00:09:44.950
the body.

153
00:09:44.950 --> 00:09:49.650
But I still get as the target
the element who I actually clicked on.

154
00:09:51.460 --> 00:09:58.908
So that's the difference between
currentTarget and target.

155
00:09:58.908 --> 00:10:00.758
So the cool thing we could do is

156
00:10:00.758 --> 00:10:05.581
essentially.
&gt;&gt; Justin Meyer: Even if we have

157
00:10:05.581 --> 00:10:10.375
the same handler.
&gt;&gt; Justin Meyer: And

158
00:10:10.375 --> 00:10:12.610
I think I could write phase or something.

159
00:10:12.610 --> 00:10:13.670
What is it, Alexis.

160
00:10:13.670 --> 00:10:16.940
I don't remember.
&gt;&gt; [INAUDIBLE].

161
00:10:16.940 --> 00:10:18.082
Well, never mind don't worry about it.

162
00:10:18.082 --> 00:10:22.860
So here, I could put the same handler
over and over and over again.

163
00:10:22.860 --> 00:10:25.840
And this way,
even if we're using the same handler.

164
00:10:25.840 --> 00:10:28.770
We can still can tell,

165
00:10:28.770 --> 00:10:33.190
the function can still kind of
tell where it is and a little bit.

166
00:10:33.190 --> 00:10:36.480
What's going on by just
looking in the event object.

167
00:10:39.110 --> 00:10:42.120
So same functions can be
called back every time.

168
00:10:42.120 --> 00:10:45.280
But it's gonna have,
first it's gonna be in the body,

169
00:10:45.280 --> 00:10:48.440
the targets always gonna be the anchor
that it's moved to the div then it's on

170
00:10:48.440 --> 00:10:55.790
all of the anchor's event,
registered event handlers.

171
00:10:55.790 --> 00:10:57.710
And then, it's moving to the div and
then to the body.

172
00:10:59.150 --> 00:11:00.330
Back to, back up to the body.

