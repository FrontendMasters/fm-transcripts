WEBVTT

1
00:00:00.000 --> 00:00:03.814
[MUSIC]

2
00:00:03.814 --> 00:00:06.269
&gt;&gt; Justin Meyer: I mentioned
at the start of the exercise,

3
00:00:06.269 --> 00:00:09.440
don't use object.create for
this, cuz you could.

4
00:00:09.440 --> 00:00:12.530
And, then online there's a few
questions about object.create, as well.

5
00:00:12.530 --> 00:00:14.950
Let's talk about what
object.create really does.

6
00:00:14.950 --> 00:00:17.410
So this has actually been around for
a little while.

7
00:00:19.710 --> 00:00:22.390
But, it lets us do stuff like this.

8
00:00:22.390 --> 00:00:23.620
So here is animal.

9
00:00:23.620 --> 00:00:27.000
I put an init function on here.

10
00:00:27.000 --> 00:00:32.370
Init is nothing special, it's just our
concept of a constructor function,

11
00:00:32.370 --> 00:00:35.740
it means nothing, it's just
an additional property in this case.

12
00:00:35.740 --> 00:00:39.399
But here we have an object with
two functions, init and eats.

13
00:00:41.100 --> 00:00:46.170
And in memory, that's going to create
this, it's an animal object with init and

14
00:00:46.170 --> 00:00:47.850
eats as properties.

15
00:00:49.440 --> 00:00:54.592
Then we can say chordate equals
object.creates, and we're gonna pass in

16
00:00:54.592 --> 00:00:59.662
the object we want to inherit from and
any additional properties we want to

17
00:00:59.662 --> 00:01:05.170
set on ourselves.
&gt;&gt; Justin Meyer: Which will create this.

18
00:01:05.170 --> 00:01:08.825
It'll create a new object
with its own properties, and

19
00:01:08.825 --> 00:01:11.150
its proto will point to animal.

20
00:01:11.150 --> 00:01:13.620
Now, this is the actual memory footprint,

21
00:01:13.620 --> 00:01:17.060
you'll notice there are no functions,
there's no prototypes,

22
00:01:17.060 --> 00:01:21.150
this is just two objects with
a proto property set correctly.

23
00:01:22.610 --> 00:01:24.280
We can do the same thing again for mammal.

24
00:01:27.190 --> 00:01:31.410
If we say object.create with chordate,
it'll set our proto property of mammal.

25
00:01:31.410 --> 00:01:35.419
It'll also set has hair as an additional
property on our new object.

26
00:01:36.640 --> 00:01:40.860
So when we finally say m
equals object.createMammal,

27
00:01:40.860 --> 00:01:45.630
this is basically our newest mammal,
and then we can say m.init dog,

28
00:01:45.630 --> 00:01:48.510
because we don't have a concept of
passing arguments into a constructor

29
00:01:48.510 --> 00:01:51.210
function because these
are all just objects.

30
00:01:51.210 --> 00:01:55.250
So within init, we can say pass in dog,

31
00:01:55.250 --> 00:02:01.090
because we're using .call, this will be m,
the new instance of mammal.

32
00:02:02.510 --> 00:02:06.550
You'll notice,
let me get the last circle on the graph,

33
00:02:06.550 --> 00:02:11.920
this is a lot smaller footprint,
it would seem, right?

34
00:02:11.920 --> 00:02:16.930
So why would we ever
not use Object.create?

35
00:02:16.930 --> 00:02:21.141
And this is a tricky kind of thing,
because one,

36
00:02:21.141 --> 00:02:26.680
there's kind of two philosophies
on whether this is good or bad,

37
00:02:26.680 --> 00:02:32.570
but the truth, as far as performance goes,
is this is really slow.

38
00:02:32.570 --> 00:02:37.080
This is much much slower, magnitudes
slower, than just using the new keyword.

39
00:02:37.080 --> 00:02:39.990
The reason is, at least at the moment,
now this could change in the future as

40
00:02:39.990 --> 00:02:43.230
implementation change, but
the moment, internally,

41
00:02:43.230 --> 00:02:48.740
object.create is gonna call the same
methods internally that new calls.

42
00:02:48.740 --> 00:02:50.078
When new set up a new object,

43
00:02:50.078 --> 00:02:54.749
object.create is gonna do that same
thing first behind the scenes.

44
00:02:55.820 --> 00:03:01.060
Then, it's gonna set the internal
prototype, which is the proto, not to make

45
00:03:01.060 --> 00:03:06.100
things weird, cuz behind the scenes it's
named prototype with two square brackets.

46
00:03:06.100 --> 00:03:14.080
Anyways, it's gonna set the proto again,
after invoking the new functionality.

47
00:03:15.150 --> 00:03:19.650
And then, third, it's gonna call
defined properties behind the scenes.

48
00:03:19.650 --> 00:03:23.006
So it's gonna do what we had originally,

49
00:03:23.006 --> 00:03:26.000
you don't need to create all
the functions, but from our perspective,

50
00:03:26.000 --> 00:03:31.370
from outside, this seems a lot easier to
comprehend than protos and prototypes.

51
00:03:31.370 --> 00:03:35.778
But behind the scenes tt's doing
everything we did originally, and

52
00:03:35.778 --> 00:03:36.930
two other steps.

53
00:03:36.930 --> 00:03:41.410
This ends up being really slow,
at least until implementations change.

54
00:03:41.410 --> 00:03:44.050
And this is, when I mean slow
I don't mean slow in IE six,

55
00:03:44.050 --> 00:03:46.370
I mean slow like now in Chrome latest.

56
00:03:47.840 --> 00:03:50.975
So be wary of this.

57
00:03:50.975 --> 00:03:55.389
There's nothing wrong with using this,
it's completely acceptable, this works,

58
00:03:55.389 --> 00:03:57.880
but just be aware of
performance implications.

