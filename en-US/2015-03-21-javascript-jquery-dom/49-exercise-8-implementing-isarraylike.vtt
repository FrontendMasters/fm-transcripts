WEBVTT

1
00:00:00.000 --> 00:00:03.973
[MUSIC]

2
00:00:03.973 --> 00:00:07.518
&gt;&gt; Justin Meyer: So, the next exercise is
going to be making is a isArraylike, and

3
00:00:07.518 --> 00:00:11.517
this is an internal method that jQuery
uses, it doesn't really expose,

4
00:00:11.517 --> 00:00:14.167
which is unfortunate
because it would be handy.

5
00:00:14.167 --> 00:00:19.550
But it's needed, we'll need it for dollar
each, which will do right after this.

6
00:00:19.550 --> 00:00:24.500
IsArraylike just let's you
know if something is an array.

7
00:00:24.500 --> 00:00:26.670
It's something that you
could enumerate through.

8
00:00:26.670 --> 00:00:30.570
It's got numbered properties,
and it's got a length property.

9
00:00:31.600 --> 00:00:36.810
So, things that are array-like is,
well obviously, an array is array-like,

10
00:00:36.810 --> 00:00:40.760
but also, there's an arguments
object that you can access,

11
00:00:40.760 --> 00:00:42.730
a functions arguments it was called with.

12
00:00:42.730 --> 00:00:47.900
That's not a true array, but we want
that to be array-like, it does have

13
00:00:47.900 --> 00:00:54.928
a length property, and
it has numbered properties.

14
00:00:54.928 --> 00:00:59.340
Things like these no lists that

15
00:00:59.340 --> 00:01:04.090
a document.getElementsByTagName would
return this is not a true array, but

16
00:01:04.090 --> 00:01:09.090
we want it to be array-like.

17
00:01:09.090 --> 00:01:10.750
Yeah, so things like this.

18
00:01:12.710 --> 00:01:17.159
So, there's this concept
called duck typing which is,

19
00:01:18.270 --> 00:01:24.710
that a lot of dynamic languages use words
you can't check the shape of an object.

20
00:01:24.710 --> 00:01:28.670
And you see hey, does the shape of this
object, does it look like what we want?

21
00:01:28.670 --> 00:01:31.380
And if it does,
we'll do something with it.

22
00:01:31.380 --> 00:01:35.179
This will learn about Jqueries each,
which iterates through a bunch of items.

23
00:01:37.150 --> 00:01:40.640
If I pass jQuery each arguments,
I'd like it to loop through arguments.

24
00:01:40.640 --> 00:01:45.230
If I pass it node list,
I'd like it to loop through a node list.

25
00:01:45.230 --> 00:01:48.840
I don't wanna have to always
convert everything to an array for

26
00:01:48.840 --> 00:01:49.940
jQuery each to work.

27
00:01:49.940 --> 00:01:51.600
That's why there's this is array like.

28
00:01:52.860 --> 00:01:56.880
So, we use duck typing to see which
way we're going to loop through things

29
00:01:56.880 --> 00:01:57.480
in each.

30
00:01:59.200 --> 00:02:02.790
So, the next exercise, again,
a real quick exercise,

31
00:02:02.790 --> 00:02:05.380
is you're going to
implement an isArrayLike.

32
00:02:08.080 --> 00:02:11.290
The way to tell if something
is array-like that works well

33
00:02:11.290 --> 00:02:14.630
is you're going to check that it has
a length property that is a number.

34
00:02:15.860 --> 00:02:20.290
And you're going to see, you're gonna see.

35
00:02:20.290 --> 00:02:23.030
Okay.
You're going to use the in operator to see

36
00:02:23.030 --> 00:02:27.700
if the, once you know there's a length,
if there's a property

37
00:02:28.700 --> 00:02:34.860
that's at length minus 1, and
there's a special in operator

38
00:02:34.860 --> 00:02:39.540
that JavaScript has, that tells
you if something is in something.

39
00:02:39.540 --> 00:02:42.340
It's saying does this
have a property there?

40
00:02:42.340 --> 00:02:46.670
That's all it does, and I'll write out
what the in operator looks like because

41
00:02:46.670 --> 00:02:50.260
we kind of haven't introduced it yet.

42
00:02:51.260 --> 00:02:56.569
So if I have an object
that looks like this,

43
00:02:56.569 --> 00:03:01.287
or I've given an eight property, and

44
00:03:01.287 --> 00:03:06.448
I'm going to give it, I make it a string,

45
00:03:06.448 --> 00:03:13.082
I can see if 8,
I'll make another variable has 8 and

46
00:03:13.082 --> 00:03:20.320
I can do, has8 will be true
because I'll do 8 in object.

47
00:03:22.830 --> 00:03:23.330
Right?

48
00:03:23.330 --> 00:03:29.940
So this is, this statement here will
return true if this property is an object.

49
00:03:29.940 --> 00:03:32.000
To make it maybe make a little more sense,
I can do foo.

50
00:03:35.180 --> 00:03:38.800
As foo, is there a foo property in object?

51
00:03:38.800 --> 00:03:41.298
I can also do a variable name.

52
00:03:48.322 --> 00:03:50.475
&gt;&gt; Justin Meyer: And I could write prop.

53
00:03:50.475 --> 00:03:55.048
So, this will return the statement will

54
00:03:55.048 --> 00:03:59.621
return true if the string value of prop,

55
00:03:59.621 --> 00:04:04.983
which is foo is in object.
&gt;&gt; Justin Meyer: So,

56
00:04:04.983 --> 00:04:09.772
all you wanna do is check to see that
this object has a length property

57
00:04:09.772 --> 00:04:13.820
that is a number, and
length minus one is in this object.

58
00:04:15.180 --> 00:04:16.580
So, this is the next exercise.

59
00:04:16.580 --> 00:04:22.270
I will put up the.
&gt;&gt; Justin Meyer: Probably

60
00:04:22.270 --> 00:04:23.680
show that this stays up.

61
00:04:23.680 --> 00:04:25.370
And are there any other questions before

62
00:04:25.370 --> 00:04:30.320
we start?
&gt;&gt; Speaker 2: There is a question

63
00:04:30.320 --> 00:04:35.421
kinda back on, what is the difference
between our isarray and

64
00:04:35.421 --> 00:04:40.385
array.isarray?
&gt;&gt; Justin Meyer: Array, probably nothing.

65
00:04:40.385 --> 00:04:45.010
Array.isarray is provided by

66
00:04:45.010 --> 00:04:49.810
most modern browsers now,
and that's great to use.

67
00:04:52.350 --> 00:04:58.960
Just jQuery is array is
gonna be useful everywhere.

68
00:04:58.960 --> 00:05:00.290
In IEA, you can use it.

69
00:05:02.390 --> 00:05:03.410
But they both do the same thing.

70
00:05:05.400 --> 00:05:07.630
Although I don't know if they work
the same way, there might be,

71
00:05:07.630 --> 00:05:10.790
I don't know how array,
is array works, if it's different,

72
00:05:10.790 --> 00:05:15.689
uses a different technique than this does.
&gt;&gt; Speaker 2: There's a question in chat,

73
00:05:15.689 --> 00:05:20.155
if you could just read it,
is faster than notnot?

74
00:05:20.155 --> 00:05:22.957
&gt;&gt; Justin Meyer: That's a great question

75
00:05:22.957 --> 00:05:27.589
Steven, it is gonna be faster, but also,
it's gonna work better, cuz what if

76
00:05:29.530 --> 00:05:34.670
I had an array or an array thing
that had a falsy value in it?

77
00:05:36.090 --> 00:05:39.950
So, if I had my object that looked like

78
00:05:41.800 --> 00:05:46.002
foo and I had a null object,

79
00:05:46.002 --> 00:05:49.654
foo here,

80
00:05:49.654 --> 00:05:55.930
that would return false,
cuz it would not the null once.

81
00:05:55.930 --> 00:05:57.160
Make it true.
&gt;&gt; Speaker 2: Maybe you wanna explain

82
00:05:57.160 --> 00:06:01.040
what's going on there?
&gt;&gt; Justin Meyer: The code here, okay.

83
00:06:01.040 --> 00:06:03.576
&gt;&gt; Speaker 2: It's [INAUDIBLE].

84
00:06:03.576 --> 00:06:05.400
&gt;&gt; Justin Meyer: Yeah, so Here I've got

85
00:06:05.400 --> 00:06:12.010
an object with the foo property of null,
and I'm reading the property.

86
00:06:12.010 --> 00:06:17.240
So, this is going to be the propValue,
which is just going to be null all,

87
00:06:17.240 --> 00:06:21.200
so propValue is just going
to be at this point.

88
00:06:21.200 --> 00:06:27.994
And if I'm not in it once.
&gt;&gt; Justin Meyer: This

89
00:06:27.994 --> 00:06:32.454
is gonna be the value of
not is gonna be true, and

90
00:06:32.454 --> 00:06:38.299
then if I'm not in it again.
&gt;&gt; Justin Meyer: Sorry

91
00:06:38.299 --> 00:06:40.220
[LAUGH] this is confusing.

92
00:06:40.220 --> 00:06:44.453
I'm not sure how to explain it a little
bit better, if I'm not in this again,

93
00:06:44.453 --> 00:06:46.420
well, now it's going to be false.

94
00:06:47.450 --> 00:06:53.720
So, what Stephen asked is instead
of doing this in operator,

95
00:06:53.720 --> 00:06:58.680
why can't I just tell if
object has the foo property by

96
00:06:59.940 --> 00:07:07.820
doing something like has foo
equals not not object foo?

97
00:07:09.050 --> 00:07:14.700
You can't do that because if this value is
falsy, well, it still has a foo property,

98
00:07:14.700 --> 00:07:18.049
it just is falsy, so
this will return false.

99
00:07:19.520 --> 00:07:23.740
It would normally work if it was anything
truthy now this would be returning true,

100
00:07:23.740 --> 00:07:29.970
cuz this would be return false,
but it's not a good method.

101
00:07:29.970 --> 00:07:35.226
So instead we use foo,

102
00:07:35.226 --> 00:07:44.448
oops, foo in obj.
&gt;&gt; Justin Meyer: So,

103
00:07:44.448 --> 00:07:47.638
let me put back up the thing and

104
00:07:47.638 --> 00:07:51.579
the hints,
&gt;&gt; Speaker 2: And

105
00:07:51.579 --> 00:07:56.870
let's do another ten minute,
ten minute exercise.

