WEBVTT

1
00:00:00.000 --> 00:00:04.077
[MUSIC]

2
00:00:04.077 --> 00:00:08.007
&gt;&gt; Justin Meyer: I'm going to implement
a width function that gives us

3
00:00:08.007 --> 00:00:09.850
the width of an element.

4
00:00:11.140 --> 00:00:12.473
Given what you know,

5
00:00:12.473 --> 00:00:17.145
what the DOM gives you,
&gt;&gt; Justin Meyer: How could I

6
00:00:17.145 --> 00:00:19.500
implement this width function?

7
00:00:20.990 --> 00:00:22.040
So I'll go back a slide.

8
00:00:22.040 --> 00:00:25.390
So I need this dimension here
of the available content area.

9
00:00:26.420 --> 00:00:28.220
I want that to give me that back.

10
00:00:31.620 --> 00:00:32.380
How can I implement it?

11
00:00:33.750 --> 00:00:35.630
&gt;&gt; Chris: Client width minus padding.

12
00:00:35.630 --> 00:00:37.730
&gt;&gt; Justin Meyer: Minus padding,
exactly right.

13
00:00:37.730 --> 00:00:39.720
So what I'm going to do is
I'm going to make it, so

14
00:00:39.720 --> 00:00:41.520
I'll read the content width value.

15
00:00:41.520 --> 00:00:45.170
And I'm subtract out the left padding and

16
00:00:45.170 --> 00:00:48.670
the right padding, giving me
the actual width of the content area.

17
00:00:48.670 --> 00:00:52.260
And I'm going to use my
CSS as method to do it.

18
00:00:54.520 --> 00:00:57.243
So let me kill that.

19
00:01:01.550 --> 00:01:06.849
&gt;&gt; Justin Meyer: So
I'm going to read my elements client

20
00:01:06.849 --> 00:01:12.800
width by doing this(0).clientWidth.

21
00:01:14.777 --> 00:01:19.448
&gt;&gt; Justin Meyer: And then I want the left
padding and the right padding, so

22
00:01:19.448 --> 00:01:21.988
I'm gonna go leftPadding =.

23
00:01:21.988 --> 00:01:23.649
How can I read the leftPadding?

24
00:01:29.755 --> 00:01:31.780
&gt;&gt; Justin Meyer: Anybody,
how could I read the leftPadding?

25
00:01:31.780 --> 00:01:35.527
It's a CSS value.

26
00:01:35.527 --> 00:01:37.472
&gt;&gt; Chris: [INAUDIBLE] the computed.

27
00:01:37.472 --> 00:01:39.855
&gt;&gt; Justin Meyer: But I use my CSS value
&gt;&gt; Chris: You're right.

28
00:01:39.855 --> 00:01:46.766
&gt;&gt; Justin Meyer: Yes, so I use my CSS
method to read the padding-left and

29
00:01:46.766 --> 00:01:51.186
I'll also read the rightPadding.

30
00:01:59.956 --> 00:02:01.442
&gt;&gt; Justin Meyer: And
then what do I need to do?

31
00:02:04.488 --> 00:02:05.587
&gt;&gt; Justin Meyer: By the way,
what's your name?

32
00:02:05.587 --> 00:02:08.707
&gt;&gt; Chris: Chris.
&gt;&gt; Justin Meyer: Someone other than Chris

33
00:02:08.707 --> 00:02:12.122
[LAUGH], What do I need to do now?

34
00:02:12.122 --> 00:02:14.288
&gt;&gt; Speaker 3: I take the client
width minus the leftPadding minus

35
00:02:14.288 --> 00:02:15.420
the rightPadding.

36
00:02:15.420 --> 00:02:16.113
&gt;&gt; Justin Meyer: Exactly,

37
00:02:16.113 --> 00:02:20.583
now one thing you should be aware of
is these things are gonna return.

38
00:02:20.583 --> 00:02:24.575
leftPadding is gonna be set
to something like 10 pixels.

39
00:02:24.575 --> 00:02:30.117
What's a good way of converting a number
to or, sorry, a string to a number?

40
00:02:30.117 --> 00:02:31.386
&gt;&gt; Speaker 3: parseInt.

41
00:02:31.386 --> 00:02:33.086
&gt;&gt; Justin Meyer: parseInt.

42
00:02:33.086 --> 00:02:37.347
So I'm going to return

43
00:02:37.347 --> 00:02:45.872
clientWidth- parseInt(leftPadding)-

44
00:02:45.872 --> 00:02:51.720
parseInt(rightPadding).

45
00:02:51.720 --> 00:02:58.291
Boom, now if I refresh my page,
I should be able to get a,

46
00:03:05.996 --> 00:03:07.041
&gt;&gt; Justin Meyer: Width of my ul.

47
00:03:10.838 --> 00:03:12.260
&gt;&gt; Justin Meyer: Says 301 pixels.

48
00:03:12.260 --> 00:03:16.911
Let's check out what
the Inspector gives us, so

49
00:03:16.911 --> 00:03:23.956
we can actually look at an element and
it will tell us the computer styles.

50
00:03:23.956 --> 00:03:26.273
301, was that what it gave me?

51
00:03:26.273 --> 00:03:27.213
&gt;&gt; Speaker 3: Yeah.

52
00:03:27.213 --> 00:03:32.126
&gt;&gt; Justin Meyer: Awesome,
we are collectively geniuses, good job,

53
00:03:32.126 --> 00:03:33.557
good doing it.

54
00:03:33.557 --> 00:03:40.230
So let's do offset that's the next one.

55
00:03:40.230 --> 00:03:43.180
So that's the dimensions jQuery
gives you all these ways to figure

56
00:03:43.180 --> 00:03:45.880
out the dimensions of your page,
over your elements.

57
00:03:48.540 --> 00:03:53.340
The next thing is where is your
element located in the page or

58
00:03:53.340 --> 00:03:55.130
relative to other elements.

59
00:03:55.130 --> 00:04:00.810
So this shot here means I've
scrolled the page down.

60
00:04:00.810 --> 00:04:02.470
Here's my browser window.

61
00:04:02.470 --> 00:04:04.720
It can't show the entire body.

62
00:04:04.720 --> 00:04:09.200
Here's the top left corner of the body and
I've scrolled down a little bit.

63
00:04:09.200 --> 00:04:10.340
Does that make sense?

64
00:04:10.340 --> 00:04:10.890
I've scrolled down.

65
00:04:10.890 --> 00:04:15.370
So here's the kind of hypothetical of
where the top left corner of the body is,

66
00:04:15.370 --> 00:04:17.379
but this is the only part
I can see in my viewport.

67
00:04:18.780 --> 00:04:21.820
Now let's say I have a div
that's positioned relative

68
00:04:23.180 --> 00:04:24.670
right in this location.

69
00:04:27.220 --> 00:04:31.870
And I have another div that I'm
wanna position relative with in this

70
00:04:31.870 --> 00:04:33.840
other element.

71
00:04:33.840 --> 00:04:37.518
And it's gonna have a padding,
a border, and a margin.

72
00:04:42.418 --> 00:04:45.478
&gt;&gt; Justin Meyer: Now we wanna know
where this element is in the page,

73
00:04:45.478 --> 00:04:48.550
maybe where it is relative to its parent.

74
00:04:48.550 --> 00:04:52.160
Let's see what the DOM
gives us to know the stuff.

75
00:04:52.160 --> 00:04:56.550
So the DOM in every element gives
you an offsetTop property and

76
00:04:56.550 --> 00:05:02.170
an offsetLeft that tells your
distance from your offsetParent.

77
00:05:03.396 --> 00:05:07.430
So your offsetParent is not necessarily
always your parent element, but

78
00:05:07.430 --> 00:05:09.130
it is for this element.

79
00:05:10.130 --> 00:05:12.740
Your offsetParent is
the first parent element.

80
00:05:12.740 --> 00:05:15.490
So if you look at an element,
start walking up its parent elements.

81
00:05:15.490 --> 00:05:20.190
Until you find one that has
a position property set to something,

82
00:05:20.190 --> 00:05:22.730
like relative, absolute, static, sticky.

83
00:05:22.730 --> 00:05:26.260
Basically anything other
than position static.

84
00:05:26.260 --> 00:05:29.310
That is an element offsetParent.

85
00:05:29.310 --> 00:05:36.070
So every elements you know its coordinate
from its offsetParent, like this.

86
00:05:37.570 --> 00:05:40.329
Now if I were to remove position
relative on this element.

87
00:05:42.280 --> 00:05:45.300
All of a sudden because this
is not positioned anymore,

88
00:05:45.300 --> 00:05:51.350
its most direct parent, the offsetParent
would actually be the HTML element.

89
00:05:51.350 --> 00:05:53.840
And these elements offsetTop and

90
00:05:53.840 --> 00:05:58.351
offsetLeft would be given
relative to the page a whole.

91
00:06:00.880 --> 00:06:04.760
So the old way of having to figure out
where your element was positioned in

92
00:06:04.760 --> 00:06:05.620
the page.

93
00:06:05.620 --> 00:06:09.900
Was to sum up all your offsetTops and
offsetLefts by

94
00:06:09.900 --> 00:06:15.830
recursing up each offsetParent
until you got to the HTML page.

95
00:06:15.830 --> 00:06:19.050
Right, so previously,
if offsetParent was still this.

96
00:06:19.050 --> 00:06:21.140
We get this offsetTop and offsetLeft.

97
00:06:21.140 --> 00:06:26.140
And we'd add that to this elements
offsetTop and offsetLeft, which

98
00:06:26.140 --> 00:06:30.370
would probably be the its offsetParent,
would be the each HTML element.

99
00:06:30.370 --> 00:06:34.200
So you just keep recursing up
adding these numbers together.

100
00:06:34.200 --> 00:06:36.200
Fortunately, you don't
have to do that anymore.

101
00:06:37.610 --> 00:06:42.910
Because elements also now have
a getBoundingClientRect method.

102
00:06:42.910 --> 00:06:46.490
So you can call on this element
getBoundingClientRect and

103
00:06:46.490 --> 00:06:49.630
that returns you an object
that has a top and left.

104
00:06:51.160 --> 00:06:56.360
A top and left dimension that
tells you this elements position

105
00:06:56.360 --> 00:07:00.400
relative to the viewport, not to the page.

106
00:07:01.910 --> 00:07:09.300
So here's how far down this element is
from the page to figure out where it is.

107
00:07:09.300 --> 00:07:09.940
Sorry, to the page.

108
00:07:11.410 --> 00:07:14.682
To figure out where this element
is relative to the page,

109
00:07:14.682 --> 00:07:15.919
how would we do that?

110
00:07:20.517 --> 00:07:22.686
&gt;&gt; Justin Meyer: So
I wanna know where this element,

111
00:07:22.686 --> 00:07:26.534
I wanna know this dimension from
this point to this point here.

112
00:07:26.534 --> 00:07:28.354
&gt;&gt; Speaker 4: To keep your
eye how far to scroll down?

113
00:07:28.354 --> 00:07:32.250
&gt;&gt; Justin Meyer: Exactly right and
I'll show how to do that in a second.

114
00:07:34.050 --> 00:07:37.089
Okay, so let's also talk
about what jQuery gives us.

115
00:07:38.240 --> 00:07:40.640
Jquery gives us a position method.

116
00:07:40.640 --> 00:07:44.620
You can call on an element and
it will give you the offset.

117
00:07:44.620 --> 00:07:48.615
Basically, it's just returning
an object that has the offsetTop and

118
00:07:48.615 --> 00:07:49.920
offsetLeft values.

119
00:07:49.920 --> 00:07:51.290
That's jquery's position method.

120
00:07:52.350 --> 00:07:56.690
jQuery also has an offset
method that gives you

121
00:07:57.720 --> 00:08:01.040
the position relative to the page.

122
00:08:01.040 --> 00:08:05.790
It gives you an object that has a top and
a left that's relative to the page.

123
00:08:05.790 --> 00:08:09.360
In my opinion,
jQuery named these properties backwards.

124
00:08:10.680 --> 00:08:13.810
jQueries offsets method
should be giving you

125
00:08:13.810 --> 00:08:16.900
the position relative
to the offsetParent and

126
00:08:16.900 --> 00:08:21.360
its position method should be giving
you the elements position in the page.

127
00:08:22.800 --> 00:08:24.650
It's got it backwards.

128
00:08:24.650 --> 00:08:26.338
So let's see how these all look together.

129
00:08:26.338 --> 00:08:30.350
So jQuery's offset gives you
the position in the page.

130
00:08:30.350 --> 00:08:35.700
getBoundingClientRect on an element gives
you to position relative to the window.

131
00:08:36.910 --> 00:08:45.000
And then all of these things give you the
position relative to your offsetParent.

132
00:08:45.000 --> 00:08:49.910
In terms of performance, you can
pretty much go whatever is closest.

133
00:08:49.910 --> 00:08:51.610
It's gonna give you
the the faster performance.

134
00:08:51.610 --> 00:08:57.340
So position offsetLeft an offsetTop are
super fast to get kind of this dimension.

135
00:08:57.340 --> 00:09:01.620
So sometimes it's okay just to get your
dimension relative to your offsetParent.

136
00:09:01.620 --> 00:09:03.820
In those situations,
it's nice to use these methods.

137
00:09:03.820 --> 00:09:08.150
If you have really fast,
just like a slider or something like that.

138
00:09:08.150 --> 00:09:10.660
It's better just to be calculating
off of this information.

139
00:09:10.660 --> 00:09:19.100
getBoundClientRect is next very fast
because that's like now everywhere.

140
00:09:19.100 --> 00:09:23.930
And then finally get offset is
fast in most browsers because it's

141
00:09:23.930 --> 00:09:27.240
just using getBoundingClientRect and
just doing a little addition to it.

142
00:09:27.240 --> 00:09:29.790
But it used to be pretty slow.

143
00:09:29.790 --> 00:09:36.160
To get the scroll amount you've scrolled,
the approved way apparently

144
00:09:36.160 --> 00:09:40.810
is doing the getting the pageYOffset
of how far you've scrolled down.

145
00:09:42.400 --> 00:09:47.570
So if you do window.pageYOffset, that
gives you how far you've scrolled down.

146
00:09:48.670 --> 00:09:53.370
I prefer to use scroll top,
because that's what other elements your

147
00:09:53.370 --> 00:09:57.290
scroll top in your scroll left is how
far you've scrolled other elements.

148
00:09:57.290 --> 00:09:59.826
But this is more widely supported.

149
00:10:02.423 --> 00:10:04.950
&gt;&gt; Justin Meyer: So
that's dimension stuff.

150
00:10:04.950 --> 00:10:09.720
So let's say we want to
implement jQuery's offset.

151
00:10:09.720 --> 00:10:11.030
Here's how you might do that.

152
00:10:12.510 --> 00:10:14.578
Simply given the first element.

153
00:10:14.578 --> 00:10:19.480
You're going to read
the position of that element

154
00:10:19.480 --> 00:10:23.691
relative to the window or to the viewport.

155
00:10:23.691 --> 00:10:28.201
And then you're gonna include
how far you've scrolled in each

156
00:10:28.201 --> 00:10:32.640
dimension to give the final value
of the location in the page.

