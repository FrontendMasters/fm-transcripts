WEBVTT

1
00:00:00.000 --> 00:00:03.888
[MUSIC]

2
00:00:03.888 --> 00:00:09.520
&gt;&gt; Alexis: We have the ability to look for
elements by themselves in the DOM.

3
00:00:09.520 --> 00:00:13.620
We have the ability to look for
elements within those elements in the DOM.

4
00:00:13.620 --> 00:00:18.240
And then modify either collection
to our choosing, which is really,

5
00:00:18.240 --> 00:00:23.970
really nice, but
there's a lot of situations.

6
00:00:23.970 --> 00:00:27.450
Let's say we're gonna build a tab's
widget like we are later today.

7
00:00:27.450 --> 00:00:33.840
We probably wanna modify some other
element based on your location in the DOM.

8
00:00:33.840 --> 00:00:37.112
Maybe you wanna find an element
that's next to you or

9
00:00:37.112 --> 00:00:41.250
you're wrapped within an element,
you want to find that parent element.

10
00:00:41.250 --> 00:00:42.729
There's a bunch of different ways.

11
00:00:44.580 --> 00:00:48.190
A bunch of different properties we have
at our disposal to make this possible.

12
00:00:48.190 --> 00:00:51.201
We're all gonna cover
this in our traversals.

13
00:00:51.201 --> 00:00:58.500
So let's take a look at our
little dummy set of DOM here.

14
00:00:58.500 --> 00:01:01.860
We have a basic unordered
list with some items.

15
00:01:01.860 --> 00:01:04.760
But let's assume right now we're our

16
00:01:04.760 --> 00:01:07.540
elements that we care
about is this li in red.

17
00:01:07.540 --> 00:01:09.860
This is the one we
currently have access to.

18
00:01:09.860 --> 00:01:12.770
Maybe we've done some
kind of query selector or

19
00:01:12.770 --> 00:01:14.750
wrapped this in a jQuery object already.

20
00:01:14.750 --> 00:01:18.760
And based on this location,
we want to find other elements in the DOM.

21
00:01:20.460 --> 00:01:21.980
This is what we have access to.

22
00:01:21.980 --> 00:01:24.580
So we have a childNodes property.

23
00:01:24.580 --> 00:01:27.990
We've seen a little bit of this when
we're building our text helper.

24
00:01:27.990 --> 00:01:31.950
This is gonna give us access to
all the nodes within this li.

25
00:01:33.040 --> 00:01:38.100
We have firstChild, which will
give us just the, that's strange.

26
00:01:38.100 --> 00:01:40.036
Why has it become black on the projector?

27
00:01:44.914 --> 00:01:46.800
&gt;&gt; Alexis: Let's reload that animation.

28
00:01:46.800 --> 00:01:48.740
There you go.

29
00:01:48.740 --> 00:01:49.620
We have the firstChild,

30
00:01:49.620 --> 00:01:54.340
which will just give us the absolute
firstChild node we have.

31
00:01:54.340 --> 00:02:01.880
We have lastChild, which will give
us the last node in our children.

32
00:02:01.880 --> 00:02:03.950
We have nextSibling.

33
00:02:03.950 --> 00:02:09.560
So for this next li, the next DOM node
following it would be this bottom li.

34
00:02:09.560 --> 00:02:12.580
This will be available via nextSibling.

35
00:02:12.580 --> 00:02:15.120
previousSibling, which will
give us the prior DOM node.

36
00:02:15.120 --> 00:02:21.140
We have parentsNode, which will give
us our wrapping or containing elements.

37
00:02:21.140 --> 00:02:24.960
And then we also have children.

38
00:02:24.960 --> 00:02:28.600
And we see if I can, here we go.

39
00:02:28.600 --> 00:02:31.590
Children is really, really nice.

40
00:02:31.590 --> 00:02:35.750
It's gonna give you all
the childNodes without text nodes.

41
00:02:35.750 --> 00:02:40.980
This is a fairly recent
addition to JavaScript.

42
00:02:40.980 --> 00:02:45.270
A lot of times when you're manipulating,
let's say you have an unordered list.

43
00:02:45.270 --> 00:02:49.110
Maybe it's a fancy hover menu
drop down kind of thing.

44
00:02:49.110 --> 00:02:51.340
You wanna manipulate your
child in some state and

45
00:02:52.730 --> 00:02:55.470
you don't really care about
manipulating the text nodes.

46
00:02:55.470 --> 00:02:58.720
So up until now we've had
to filter out text nodes.

47
00:02:58.720 --> 00:03:03.910
But with the new children property,
the browser will just give this to you.

48
00:03:03.910 --> 00:03:11.250
This will give us all childNodes all
the child DOM nodes, make sense?

49
00:03:12.330 --> 00:03:15.180
Okay, so
we're about to build a few helpers.

50
00:03:15.180 --> 00:03:19.564
Specifically, we're gonna build the next
helper based on our current position.

51
00:03:19.564 --> 00:03:23.200
We're gonna try to grab
the next element in the DOM,

52
00:03:23.200 --> 00:03:25.190
our nextSibling element in the DOM.

53
00:03:26.260 --> 00:03:30.170
But we still want that same chain ability.

54
00:03:30.170 --> 00:03:33.542
There's a couple things we want
to return a jQuerycollection.

55
00:03:33.542 --> 00:03:37.774
Because you don't just want the next
elements for academic reasons,

56
00:03:37.774 --> 00:03:40.420
you probably want to change its HTML.

57
00:03:40.420 --> 00:03:44.030
Maybe you want to add some
text to that element.

58
00:03:44.030 --> 00:03:47.190
If right now, it's an empty li,
you wanna modify it somehow.

59
00:03:47.190 --> 00:03:49.940
So we want this to be possible.

60
00:03:51.630 --> 00:03:55.340
So we're gonna take our
current collection.

61
00:03:55.340 --> 00:03:59.230
I'm gonna walk you through this, so I'll
give you a little bit of pseudocode for

62
00:03:59.230 --> 00:03:59.730
this.

63
00:04:00.930 --> 00:04:07.600
Be able to traverse to using
a nextSibling to get the next node.

64
00:04:07.600 --> 00:04:10.330
Now here's the little gotcha and
this hints down below.

65
00:04:11.680 --> 00:04:15.662
Children is kind of our nice
thing that ignores text nodes.

66
00:04:15.662 --> 00:04:21.080
But nextSibling and, subsequently,
previousSibling as well, do not.

67
00:04:21.080 --> 00:04:23.480
If you hit nextSibling and the next.

68
00:04:23.480 --> 00:04:27.078
Let's say you have a div and
then some text and then another div and

69
00:04:27.078 --> 00:04:29.050
you hit nextSibling.

70
00:04:29.050 --> 00:04:32.100
What jQuery wants to give you is,
you're looking for that div.

71
00:04:32.100 --> 00:04:33.615
They'll skip the text nodes.

72
00:04:33.615 --> 00:04:36.300
nextSibling will not.

73
00:04:36.300 --> 00:04:37.210
It's explicit.

74
00:04:37.210 --> 00:04:40.150
It will give you the next
node of whatever type.

75
00:04:42.640 --> 00:04:46.060
So when we're doing this helper,
we wanna be able to check for that.

76
00:04:46.060 --> 00:04:47.020
So let's write this out.

77
00:04:47.020 --> 00:04:50.863
Let's write part of this out.

78
00:04:50.863 --> 00:04:56.355
We'll scroll down to our next, okay?

79
00:04:58.667 --> 00:05:03.630
&gt;&gt; Alexis: So the first thing,
&gt;&gt; Alexis: We're gonna need to do.

80
00:05:03.630 --> 00:05:06.050
We have to do something similar here.

81
00:05:06.050 --> 00:05:12.860
Because if you have a bunch of divs on
the page and you want to say dollar.

82
00:05:12.860 --> 00:05:18.160
You wanna do something like this,
$('div').next().

83
00:05:18.160 --> 00:05:22.017
This is gonna return an array,
a collection of elements.

84
00:05:22.017 --> 00:05:25.661
Because there could be many divs and
you're gonna get the nextSibling of each

85
00:05:25.661 --> 00:05:28.030
one of those divs and
return that as a collection.

86
00:05:29.080 --> 00:05:34.300
So to make this possible,
we're gonna need our

87
00:05:34.300 --> 00:05:40.950
accumulator once again,
our accumulator array.

88
00:05:40.950 --> 00:05:43.840
This is where we're gonna store
all the elements we found

89
00:05:43.840 --> 00:05:45.510
through the course of this function.

90
00:05:46.960 --> 00:05:50.471
And then at the end of this,

91
00:05:50.471 --> 00:05:54.748
we're going to need to return and

92
00:05:54.748 --> 00:05:59.484
an instance of our jQuery library and

93
00:05:59.484 --> 00:06:02.710
pass in our accummlate.

94
00:06:02.710 --> 00:06:05.901
Very similar to what we just did.

95
00:06:05.901 --> 00:06:09.830
We're going to need to
go through each element.

96
00:06:09.830 --> 00:06:13.786
Again, if we found many divs,

97
00:06:13.786 --> 00:06:18.659
we would wanna get the nextSibling for

98
00:06:18.659 --> 00:06:22.935
each element in our collection.

99
00:06:22.935 --> 00:06:26.298
We're gonna need to go through and we're
gonna add things to our accumulator but

100
00:06:26.298 --> 00:06:27.444
only in the specific case.

101
00:06:27.444 --> 00:06:31.735
We want to check or

102
00:06:31.735 --> 00:06:36.884
we can say if elements

103
00:06:36.884 --> 00:06:41.469
is not a text node,

104
00:06:45.122 --> 00:06:48.335
&gt;&gt; Alexis: Add to our accumulator.

105
00:06:51.634 --> 00:06:55.146
&gt;&gt; Alexis: This is the basic set up for
what we wanna do.

106
00:06:55.146 --> 00:06:59.999
Also, excuse me, if this is not
a text node, just add it right then.

107
00:06:59.999 --> 00:07:01.640
We've hit the next div.

108
00:07:01.640 --> 00:07:03.600
We've hit the next li.

109
00:07:03.600 --> 00:07:05.267
This is what we care about.

110
00:07:05.267 --> 00:07:08.581
Throw in the accumulator and
we can move on, however.

111
00:07:11.917 --> 00:07:17.138
&gt;&gt; Alexis: If it is a text node,
If element is

112
00:07:17.138 --> 00:07:23.575
a text node,
&gt;&gt; Alexis: Is

113
00:07:23.575 --> 00:07:25.400
there anyone who what we
wanna do in the scenario?

114
00:07:26.500 --> 00:07:30.040
What if we have a div and
some text and then another div?

115
00:07:31.130 --> 00:07:36.333
When we say the first div.next, we wanna
get that last a div, how do we get there?

116
00:07:37.912 --> 00:07:38.560
&gt;&gt; Alexis: Does anyone know?

117
00:07:39.780 --> 00:07:41.660
Anyone think of what we might wanna do?

118
00:07:41.660 --> 00:07:43.430
nextSibling will give us the text.

119
00:07:44.780 --> 00:07:50.183
So we really probably wanna do is
call our element .nextSibling,

120
00:07:50.183 --> 00:07:53.084
.nextSibling, .nextSibling.

121
00:07:53.084 --> 00:07:56.120
Let's say forever until we
get to that actual next node.

122
00:07:56.120 --> 00:07:59.100
But we can't do that directly.

123
00:07:59.100 --> 00:08:05.719
So we probably want to recurse

124
00:08:05.719 --> 00:08:11.423
to next,
&gt;&gt; Alexis: Node.

125
00:08:14.680 --> 00:08:19.451
We wanna keep moving down our
nextSibling chain until we hit a node

126
00:08:19.451 --> 00:08:20.850
that is a DOM node.

127
00:08:25.951 --> 00:08:29.641
&gt;&gt; Alexis: And there is one last
case that we should handle,

128
00:08:29.641 --> 00:08:31.630
what if nothing is found?

129
00:08:32.780 --> 00:08:35.850
What if we're at the last
element on the page or

130
00:08:35.850 --> 00:08:41.210
the last element in our parent and
we say nextSibling.

131
00:08:41.210 --> 00:08:42.570
What should we return?

132
00:08:44.707 --> 00:08:47.440
&gt;&gt; Alexis: In jQuery's case,
it'll return an empty collection.

133
00:08:47.440 --> 00:08:49.840
So we should handle something like this,
too.

134
00:08:49.840 --> 00:08:53.060
If no element Is found.

135
00:08:53.060 --> 00:08:56.950
If we recursed and
we're at the end of our chain and

136
00:08:56.950 --> 00:09:04.480
nextSibling is null then,
&gt;&gt; Alexis: Return empty the clipboard.

137
00:09:04.480 --> 00:09:08.490
Just don't add any, rather,
don't add anything, do nothing.

138
00:09:09.560 --> 00:09:12.947
Because we won't add anything
to our accumulator in this case.

139
00:09:12.947 --> 00:09:15.897
And then our constructor will
take care of our empty array

140
00:09:15.897 --> 00:09:17.810
because accumulator will be empty.

141
00:09:20.030 --> 00:09:25.870
Does this all makes sense,
&gt;&gt; Alexis: Without giving too much away?

142
00:09:31.698 --> 00:09:34.677
&gt;&gt; Alexis: Okay, let's take, let's see.

143
00:09:37.009 --> 00:09:38.537
&gt;&gt; Alexis: Let's take ten minutes.

144
00:09:38.537 --> 00:09:39.200
Yes, question?

145
00:09:39.200 --> 00:09:44.175
&gt;&gt; Speaker 2: There's a couple
things that were little bit reboard.

146
00:09:44.175 --> 00:09:47.157
Are we gonna go over DOM eventstoday?

147
00:09:47.157 --> 00:09:50.100
&gt;&gt; Alexis: Yes, we are going over
DOM events after right after this.

148
00:09:50.100 --> 00:09:54.126
There's gonna be a couple sections and
elements we have to get through,

149
00:09:54.126 --> 00:09:55.711
traversal and then layout.

150
00:09:55.711 --> 00:10:00.676
And then we'll be touching DOM
events towards the end of this.

151
00:10:00.676 --> 00:10:03.330
It will be a nice section for events.

152
00:10:03.330 --> 00:10:05.440
Events are very important, so
we're not leaving that out.

153
00:10:06.590 --> 00:10:09.910
&gt;&gt; Speaker 2: And the next question was
just about signatures in JavaScript.

154
00:10:09.910 --> 00:10:13.520
Just saying that functions
don't actually have signatures.

155
00:10:13.520 --> 00:10:15.320
It's just helpful to
think of them that way.

156
00:10:15.320 --> 00:10:17.820
Because you can't actually
overload functions in JavaScript.

157
00:10:17.820 --> 00:10:18.520
Is that correct?

158
00:10:19.920 --> 00:10:22.300
&gt;&gt; Alexis: You can't overload
functions in JavaScript.

159
00:10:22.300 --> 00:10:24.890
That's why we have call and
apply being called different things, but

160
00:10:24.890 --> 00:10:27.820
you do have the concept.

161
00:10:27.820 --> 00:10:29.750
You're still creating an API.

162
00:10:29.750 --> 00:10:33.910
So the DOM is gonna give us its API
that we're using internally here.

163
00:10:33.910 --> 00:10:36.630
And even though arguments
could be anything.

164
00:10:36.630 --> 00:10:38.760
You can pass nothing to a function.

165
00:10:38.760 --> 00:10:42.350
You can pass a ton of arguments to
a function that has nothing defined.

166
00:10:42.350 --> 00:10:46.740
So it's not signatures in the strict
sense where it's like a strongly typed

167
00:10:46.740 --> 00:10:48.010
language where.

168
00:10:48.010 --> 00:10:51.370
If it requires two arguments,
you have to give it two arguments.

169
00:10:51.370 --> 00:10:56.080
Not in that sense, but it is in the sense
where you could do a function.length.

170
00:10:56.080 --> 00:10:58.280
I don't know if you guys
have ever done this,

171
00:10:58.280 --> 00:11:02.581
like var foo equals function and
you say foo.length.

172
00:11:02.581 --> 00:11:05.970
That's actually gonna give you the number
of arguments that you have defined

173
00:11:05.970 --> 00:11:07.050
in that function.

174
00:11:07.050 --> 00:11:10.050
Which is kind of a nice
little shortcut if you're

175
00:11:10.050 --> 00:11:15.150
trying to guarantee some length of
arguments or optional arguments.

176
00:11:15.150 --> 00:11:18.410
Or currying, if you're doing any
kind of occurring functions.

177
00:11:20.240 --> 00:11:24.380
So I would say we do
care about signatures,

178
00:11:24.380 --> 00:11:27.530
just not in the strictest
sense of the term.

179
00:11:27.530 --> 00:11:30.880
But there is no method overloading
the JavaScript, that is very true.

180
00:11:30.880 --> 00:11:31.610
Good questions.

