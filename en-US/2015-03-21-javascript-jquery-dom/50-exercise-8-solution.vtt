WEBVTT

1
00:00:00.000 --> 00:00:04.133
[MUSIC]

2
00:00:04.133 --> 00:00:06.102
&gt;&gt; Justin Meyer: So Steven just to
answer your question while we're

3
00:00:06.102 --> 00:00:06.840
all working here.

4
00:00:08.510 --> 00:00:13.380
He asked, a better question would have
been, is ,in, faster than object,

5
00:00:13.380 --> 00:00:16.938
than reading the eight property,
double equals undefined?

6
00:00:16.938 --> 00:00:21.399
[COUGH] Well,
first object double equals undefined,

7
00:00:21.399 --> 00:00:26.850
you'd wanna maybe make that triple equals,
but you can actually

8
00:00:26.850 --> 00:00:32.612
have an undefined property which
is confusing, but you really can.

9
00:00:32.612 --> 00:00:35.877
So that wouldn't be a good test either,
but

10
00:00:35.877 --> 00:00:40.995
I think what you're really asking is,
is reading the property value

11
00:00:40.995 --> 00:00:45.952
going to be faster than just telling
if the property value exists?

12
00:00:45.952 --> 00:00:47.668
So, in,
just tells you the property exists,

13
00:00:47.668 --> 00:00:50.190
doesn't have to go through
actually reading the value.

14
00:00:50.190 --> 00:00:53.251
I doubt there's too much of
a performance difference,

15
00:00:53.251 --> 00:00:57.417
but I would bet that, in, is gonna be
faster than actually going through and

16
00:00:57.417 --> 00:01:02.233
reading the property.
&gt;&gt; Justin Meyer: Probably,

17
00:01:02.233 --> 00:01:04.400
that would be my guess.

18
00:01:06.320 --> 00:01:09.682
And the AON, there is no test for
this exercise,

19
00:01:09.682 --> 00:01:14.283
it will be tested by the next exercise,
when we implement $each.

20
00:01:14.283 --> 00:01:18.790
Just cuz this is a private function
inside JQuery that it doesn't expose.

21
00:01:21.030 --> 00:01:25.880
All right, so I'm gonna go through
the answer, a lot of you guys were kind of

22
00:01:25.880 --> 00:01:30.505
struggling with this,
that's okay, we have to go

23
00:01:30.505 --> 00:01:34.540
kinda fast today through the exercises,
so just do your best to get through it.

24
00:01:34.540 --> 00:01:39.380
Ask as questions and
then follow along with the answer.

25
00:01:39.380 --> 00:01:43.980
So, let me write out how
I would implement this.

26
00:01:43.980 --> 00:01:49.973
So what I would do is I'd first
just make sure that the object's

27
00:01:49.973 --> 00:01:58.023
length property is typeof,
&gt;&gt; Justin Meyer: Number.

28
00:01:58.023 --> 00:02:00.786
[COUGH] Okay, that's good.

29
00:02:00.786 --> 00:02:07.504
Otherwise, it's not array-like,
so I'd just return false.

30
00:02:07.504 --> 00:02:11.990
[COUGH] The next thing I'd probably

31
00:02:11.990 --> 00:02:16.320
wanna do is check if the object's

32
00:02:16.320 --> 00:02:21.280
length is greater than or equal to 0.

33
00:02:23.370 --> 00:02:27.878
Well, I just actually,
I'll do it, if it's equal to 0,

34
00:02:27.878 --> 00:02:33.854
then we're just gonna return true cuz
we're not going to really do anything.

35
00:02:33.854 --> 00:02:41.452
And then what I would do, is I'm gonna
check if the obj.length is greater than 0.

36
00:02:42.900 --> 00:02:48.297
And if it's greater than 0,
let me show you, if it's greater than 0,

37
00:02:48.297 --> 00:02:53.518
I'm going to just make sure that
that property that I'm looking for,

38
00:02:53.518 --> 00:02:57.840
obj.length minus 1,
is actually in my object.

39
00:02:57.840 --> 00:03:03.644
So I would just return,
if (obj.length- 1) is in obj,

40
00:03:03.644 --> 00:03:07.823
and then actually I'm gonna delete this,

41
00:03:07.823 --> 00:03:12.234
because I wanted it so
that if nothing is hit,

42
00:03:12.234 --> 00:03:16.666
I'm just gonna return
false at the end here.

43
00:03:26.519 --> 00:03:29.697
&gt;&gt; Justin Meyer: Any questions about this

44
00:03:29.697 --> 00:03:34.090
or you guys are all writing it out?

45
00:03:34.090 --> 00:03:38.748
If you look in the my_jQuery final, if
anybody is like just wanting to copy and

46
00:03:38.748 --> 00:03:43.547
paste, basically it's the same thing,
just laid out on one line instead of with

47
00:03:43.547 --> 00:03:47.294
all of these ifs.
&gt;&gt; Justin Meyer: So,

48
00:03:47.294 --> 00:03:51.416
walk through it again, I'm just
checking that it has a length property,

49
00:03:51.416 --> 00:03:54.290
that's a number, it has to have that.

50
00:03:54.290 --> 00:03:57.350
If the length is 0, it means it's
an empty array-like things, so

51
00:03:57.350 --> 00:03:59.320
I'm just gonna return true.

52
00:03:59.320 --> 00:04:01.590
And then if the length is greater than 0,

53
00:04:01.590 --> 00:04:05.970
it could be, maybe someone has a length
property of negative a million.

54
00:04:05.970 --> 00:04:07.410
Well, that's not an array.

55
00:04:07.410 --> 00:04:09.092
But as long as the length
is greater than 0,

56
00:04:09.092 --> 00:04:12.550
I'm gonna make sure that at least
it has a property right at the end.

57
00:04:12.550 --> 00:04:17.920
I could, if I were doing it trying to be
extremely precise, I could go through

58
00:04:17.920 --> 00:04:22.690
every single innumerable property and make
sure it exists but that would take long.

59
00:04:22.690 --> 00:04:25.420
So jQuery, and
I think uses this heuristic,

60
00:04:25.420 --> 00:04:28.975
that it's gonna have length
minus 1 at least, as a property.

61
00:04:28.975 --> 00:04:32.088
Then otherwise it's gonna return false.

62
00:04:40.653 --> 00:04:41.958
&gt;&gt; Justin Meyer: Someone asks,

63
00:04:44.505 --> 00:04:47.460
&gt;&gt; Justin Meyer: So some questions?

64
00:04:47.460 --> 00:04:51.520
Could also be written as return
type of like number in object one.

65
00:04:53.770 --> 00:04:57.541
Maybe you could, but
it wouldn't get this lengthy [CROSSTALK].

66
00:04:57.541 --> 00:04:58.570
&gt;&gt; Speaker 2: Can you repeat the question?

67
00:04:58.570 --> 00:04:59.506
&gt;&gt; Justin Meyer: Yeah,I kinda

68
00:04:59.506 --> 00:05:01.600
mumbled through it, sorry.

69
00:05:01.600 --> 00:05:07.661
Yes, the question is could this
also be written as return typeof,

70
00:05:07.661 --> 00:05:10.918
let me write how he kind of wrote it.

71
00:05:10.918 --> 00:05:15.472
He asked, could this be done as

72
00:05:15.472 --> 00:05:20.553
return typeof obj.length ===

73
00:05:20.553 --> 00:05:25.107
"number" and essentially,

74
00:05:25.107 --> 00:05:31.922
this part right here.
&gt;&gt; Justin Meyer: So

75
00:05:31.922 --> 00:05:36.724
the only problem with that,
is that it wouldn't work

76
00:05:36.724 --> 00:05:41.320
if the length was 0 because
it would return false.

77
00:05:43.280 --> 00:05:45.705
Because 0 minus 1 is negative 1 and

78
00:05:45.705 --> 00:05:50.418
there wouldn't be a negative
property in an empty array.

79
00:05:50.418 --> 00:05:55.406
So isArrayLike would actually return
false for something that was in fact

80
00:05:55.406 --> 00:06:02.460
an array.
&gt;&gt; Justin Meyer: One other probably

81
00:06:02.460 --> 00:06:06.981
smart check that this could do, but
would just be to actually check is array,

82
00:06:06.981 --> 00:06:11.584
and then if that returns true, return
true, otherwise check for all of this.

83
00:06:11.584 --> 00:06:16.247
But that's not necessary for this example.

84
00:06:16.247 --> 00:06:18.497
There's another question too,

85
00:06:18.497 --> 00:06:23.970
I'm confused about the obj.length- 1
in object part, this part right here.

86
00:06:25.350 --> 00:06:31.360
Okay, so what this is doing is an array,
let's say you had an array-like thing,

87
00:06:31.360 --> 00:06:34.200
the thing that we want to be
array-like might have a 0 property and

88
00:06:34.200 --> 00:06:35.730
then some value.

89
00:06:35.730 --> 00:06:37.736
Let's say that this is name of cats or

90
00:06:37.736 --> 00:06:44.955
something.
&gt;&gt; Justin Meyer: And

91
00:06:44.955 --> 00:06:49.310
then it would have a length property of 2.

92
00:06:49.310 --> 00:06:52.580
What this part is doing right here,

93
00:06:52.580 --> 00:06:57.010
is it's checking the length,
it's subtracting 1 and getting 1.

94
00:06:57.010 --> 00:07:03.756
And it's gonna check that this object
has a 1 property, and return true

95
00:07:03.756 --> 00:07:11.011
if it does.
&gt;&gt; Justin Meyer: Okay

96
00:07:11.011 --> 00:07:18.750
that makes some sense, can't we return
directly without any else or else if?

97
00:07:18.750 --> 00:07:23.960
You could write it kind of
like Steven suggested and

98
00:07:23.960 --> 00:07:29.690
I showed two examples ago, where you
could return without any ifs or else ifs.

99
00:07:29.690 --> 00:07:32.101
I just think that this
is much easier to read.

100
00:07:36.195 --> 00:07:36.960
&gt;&gt; Justin Meyer: Cool, and

101
00:07:36.960 --> 00:07:41.295
by the way just you guys know,
like minifiers like Uglify and

102
00:07:41.295 --> 00:07:43.760
all of that, will see this code and

103
00:07:43.760 --> 00:07:48.693
convert it into one line with ternary
operators and stuff like that.

104
00:07:48.693 --> 00:07:50.593
So writing ifs and elses and

105
00:07:50.593 --> 00:07:55.580
someone is like hey that makes the code
too long, don't listen to him.

106
00:07:55.580 --> 00:07:59.420
Clear code is much better
than short terse code,

107
00:07:59.420 --> 00:08:00.700
if it means someone can understand it.

108
00:08:01.790 --> 00:08:06.200
Okay, ready to go onto the next exercise.

