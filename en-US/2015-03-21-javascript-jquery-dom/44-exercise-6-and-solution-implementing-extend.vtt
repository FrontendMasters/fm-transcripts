WEBVTT

1
00:00:00.000 --> 00:00:03.740
[MUSIC]

2
00:00:03.740 --> 00:00:08.290
&gt;&gt; Justin Meyer: I'm going to
show you the answer to extend.

3
00:00:08.290 --> 00:00:13.370
Again, what we're gonna do is go
through every property in object and

4
00:00:13.370 --> 00:00:18.640
copy it to a properties on target.

5
00:00:19.720 --> 00:00:21.667
To do this, I'm gonna use a for-in loop.

6
00:00:21.667 --> 00:00:25.204
So I'll show you how
to write one of those.

7
00:00:25.204 --> 00:00:30.270
And write for the name of a variable

8
00:00:30.270 --> 00:00:36.140
that I want to take on each property name
an object, I'm just gonna call it prop.

9
00:00:36.140 --> 00:00:41.450
So this is gonna be set to,
I'll just write out var prop in object.

10
00:00:41.450 --> 00:00:44.170
So prop is gonna be set to a string.

11
00:00:47.720 --> 00:00:50.867
That is a string for
each property name in object.

12
00:00:50.867 --> 00:00:53.722
And that's probably different for

13
00:00:53.722 --> 00:00:59.154
every loop inside these curly braces,
for the body of the for loop.

14
00:00:59.154 --> 00:01:04.110
So I can read the prop
property of object like this.

15
00:01:04.110 --> 00:01:05.078
I mean I'll do var value.

16
00:01:10.640 --> 00:01:15.400
&gt;&gt; Justin Meyer: And then I want to set,
this is the value of whatever

17
00:01:15.400 --> 00:01:20.400
property name proper presents,
I wrote this wrong.

18
00:01:22.610 --> 00:01:28.710
And then I'm going to set value on target.

19
00:01:28.710 --> 00:01:34.060
So I'll do target, for targets prop,
I wanna set that to value.

20
00:01:34.060 --> 00:01:37.550
Does that makes sense?

21
00:01:37.550 --> 00:01:42.370
So I'm reading the value for
some given property name, and

22
00:01:42.370 --> 00:01:47.465
then I'm setting that value on target for
some given property name.

23
00:01:47.465 --> 00:01:49.980
&gt;&gt; Speaker 2: [COUGH]
&gt;&gt; Justin Meyer: I

24
00:01:49.980 --> 00:01:53.900
broke it up in two lines like this, but
most of you have just written it this way,

25
00:01:53.900 --> 00:01:57.650
and I think it's a little bit more
simple to look at, like that.

26
00:01:58.800 --> 00:02:02.627
And then I'm just gonna return target.

27
00:02:06.720 --> 00:02:08.960
&gt;&gt; Justin Meyer: Now some of you,
any questions there?

28
00:02:11.240 --> 00:02:11.990
Makes sense now?

29
00:02:11.990 --> 00:02:15.830
Hopefully those of you who are just
beginning with JavaScript, or

30
00:02:15.830 --> 00:02:19.490
haven't seen this kinda this index
operator are starting to get it.

31
00:02:19.490 --> 00:02:25.980
It can be kind of confusing at first, but
hopefully it's starting to make sense now.

32
00:02:25.980 --> 00:02:30.820
A few of you also made sure

33
00:02:30.820 --> 00:02:35.850
that the we were only copying
the properties directly on object,

34
00:02:35.850 --> 00:02:39.110
and not any properties that
might be up the proto chain.

35
00:02:39.110 --> 00:02:41.800
To do that, people who did this, and

36
00:02:41.800 --> 00:02:45.256
this is you don't have to have this in
your solution for the example to work.

37
00:02:45.256 --> 00:02:51.445
It's checking object.hasOwnProperty(prop).

38
00:02:51.445 --> 00:02:56.982
So it's making sure that it's only
copying properties directly on object,

39
00:02:56.982 --> 00:03:02.190
not enumerable properties up the proto
chain, and copying it that way.

40
00:03:04.697 --> 00:03:06.197
&gt;&gt; Justin Meyer: Cool.

41
00:03:06.197 --> 00:03:07.042
So that's it for today.

42
00:03:07.042 --> 00:03:09.560
Unless there's any other questions.

43
00:03:09.560 --> 00:03:12.640
Tomorrow we'll probably start
with another quick review of

44
00:03:12.640 --> 00:03:14.430
all of the JavaScript stuff.

45
00:03:14.430 --> 00:03:18.820
And then we're gonna burn through jQuery.

46
00:03:18.820 --> 00:03:21.475
We're gonna build own version of jQuery

47
00:03:21.475 --> 00:03:24.371
just big enough to
implement a tabs widget.

48
00:03:24.371 --> 00:03:26.474
Which is gonna be awesome.

49
00:03:26.474 --> 00:03:30.992
And then you can just publish it as
your own open source project, and

50
00:03:30.992 --> 00:03:36.965
call it Zepto4, or something like that and
become the next big JavaScript programmer.

51
00:03:36.965 --> 00:03:38.879
&gt;&gt; Speaker 3: First letter of your name.

52
00:03:38.879 --> 00:03:42.359
[CROSSTALK]
&gt;&gt; Justin Meyer: Yeah, so cool.

53
00:03:42.359 --> 00:03:42.859
Thank you.

