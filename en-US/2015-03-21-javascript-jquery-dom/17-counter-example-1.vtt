WEBVTT

1
00:00:00.000 --> 00:00:03.903
[MUSIC]

2
00:00:03.903 --> 00:00:05.710
&gt;&gt; Justin Meyer: Let's
do this counter example.

3
00:00:05.710 --> 00:00:08.020
And this is one of my
favorite examples here.

4
00:00:09.280 --> 00:00:16.230
Here's a counter function that returns
a function itself, that when called,

5
00:00:16.230 --> 00:00:22.150
increments a variable and
just returns that newly incremented value.

6
00:00:23.190 --> 00:00:26.274
We'll see what's going on in
memory when JavaScript is

7
00:00:26.274 --> 00:00:31.195
doing this.
&gt;&gt; Justin Meyer: So the first thing again,

8
00:00:31.195 --> 00:00:36.013
JavaScript sees a function created in
memory, sorry, a function defined and

9
00:00:36.013 --> 00:00:38.310
creates a function in memory.

10
00:00:38.310 --> 00:00:43.480
Now last time, we drew out that
a function also has a prototype property,

11
00:00:43.480 --> 00:00:45.380
I'm not drawing that
here just to save space,

12
00:00:45.380 --> 00:00:49.350
but there's one more thing that happens
to a function whenever it's created.

13
00:00:49.350 --> 00:00:51.690
A function always has like this

14
00:00:51.690 --> 00:00:56.600
hidden magical reference to the call
object in which it was created.

15
00:00:56.600 --> 00:01:03.020
So function always knows like, hey,
I was created in the global call object.

16
00:01:03.020 --> 00:01:05.410
I should know about that call object,
right?

17
00:01:05.410 --> 00:01:09.044
So there's a little magic pointer here
that you can never reference, but

18
00:01:09.044 --> 00:01:14.458
the function internally knows.
&gt;&gt; Justin Meyer: So then we're gonna point

19
00:01:14.458 --> 00:01:18.150
the counter variable to that function,
and then we're gonna go to the next line.

20
00:01:19.860 --> 00:01:24.120
Okay, so this line is gonna
call the counter function.

21
00:01:24.120 --> 00:01:27.426
And again, whenever a function is invoked,

22
00:01:27.426 --> 00:01:31.776
a new call object is created
that contains any arguments and

23
00:01:31.776 --> 00:01:36.044
any variables created,
while that function is running.

24
00:01:36.044 --> 00:01:41.220
Now one other thing call objects have is
they know about their parent function.

25
00:01:41.220 --> 00:01:44.450
They know about the function that
called to create a call object,

26
00:01:44.450 --> 00:01:45.880
to create that call object.

27
00:01:45.880 --> 00:01:47.970
So it's kinda interesting.

28
00:01:47.970 --> 00:01:51.410
Functions, whenever a function is
created inside of a call object

29
00:01:51.410 --> 00:01:53.760
that function knows about
its parent call object.

30
00:01:53.760 --> 00:01:57.514
Whenever a function is called and
creates a call object, well,

31
00:01:57.514 --> 00:02:00.098
that call object knows about its function.

32
00:02:00.098 --> 00:02:01.074
And this is important for

33
00:02:01.074 --> 00:02:05.890
how closures fundamentally work.
&gt;&gt; Justin Meyer: So,

34
00:02:09.060 --> 00:02:09.975
&gt;&gt; Justin Meyer: Now this function's gonna

35
00:02:09.975 --> 00:02:12.490
be ran, so we created the call object,
now we're gonna run the function.

36
00:02:14.010 --> 00:02:16.650
And we're gonna create the count variable.

37
00:02:16.650 --> 00:02:20.370
Well, variables always get
put in their call object,

38
00:02:20.370 --> 00:02:21.850
the current call object that's running.

39
00:02:21.850 --> 00:02:26.698
So a count variable, is gonna be created
inside this call object that's gonna

40
00:02:26.698 --> 00:02:31.567
point to the value 0.
&gt;&gt; Justin Meyer: Now we're

41
00:02:31.567 --> 00:02:35.109
gonna get to this line and again,
we're creating a new function in memory.

42
00:02:36.200 --> 00:02:37.520
So I'm gonna create a function memory.

43
00:02:37.520 --> 00:02:42.336
And again, functions always know
about their parent call object.

44
00:02:42.336 --> 00:02:45.074
And we're just creating a function
in memory, we're not looking inside,

45
00:02:45.074 --> 00:02:46.720
we don't know what it's doing.

46
00:02:46.720 --> 00:02:52.673
But we are returning this function and
sending its value as c1.

47
00:02:52.673 --> 00:02:57.955
So c1 is pointing to a function in memory,
whom has a parent call object with a count

48
00:02:57.955 --> 00:03:03.385
variable.
&gt;&gt; Justin Meyer: When we run c1,

49
00:03:03.385 --> 00:03:11.182
and again, whenever a function is
run a new call object is created and

50
00:03:11.182 --> 00:03:15.363
the body of that code is gonna be run.

51
00:03:15.363 --> 00:03:18.118
So this is where the c1
function's code is,

52
00:03:18.118 --> 00:03:20.954
it's gonna be running this count ++count.

53
00:03:20.954 --> 00:03:24.690
But it needs to find a count variable.

54
00:03:24.690 --> 00:03:25.850
So it's gonna first look for

55
00:03:25.850 --> 00:03:30.540
the count variable inside c1,
this call object, not find it.

56
00:03:31.560 --> 00:03:34.910
And then walk up these
kinda magic references,

57
00:03:34.910 --> 00:03:39.095
that I said these things that
you can't actually access but

58
00:03:39.095 --> 00:03:43.950
JavaScript internally can access,
to find the parent call object,

59
00:03:43.950 --> 00:03:47.989
look for a count there,
find it, and increment it to 1.

60
00:03:47.989 --> 00:03:51.013
Now if it didn't find
a count in this call object,

61
00:03:51.013 --> 00:03:55.340
it would just keep walking up
to try to find a count variable.

62
00:03:55.340 --> 00:03:57.210
And eventually just say,
hey, count is not defined.

63
00:03:58.460 --> 00:04:01.200
If it couldn't find it in the window,
all right?

64
00:04:01.200 --> 00:04:03.500
So this is closures, really.

65
00:04:03.500 --> 00:04:05.270
This is how closures work.

66
00:04:05.270 --> 00:04:09.304
Essentially, functions know about
their parent call object and

67
00:04:09.304 --> 00:04:12.531
call objects know about
the function that was ran and

68
00:04:12.531 --> 00:04:16.490
it creates this kind of linking
that JavaScript can go through to

69
00:04:16.490 --> 00:04:20.607
find variables.
&gt;&gt; Justin Meyer: So

70
00:04:20.607 --> 00:04:25.835
let me walk through doing this again,
just to make sure you're getting it.

71
00:04:25.835 --> 00:04:31.793
So it'll return 1, because nothing
now is referencing that call object,

72
00:04:31.793 --> 00:04:38.215
it will be garbage collected.
&gt;&gt; Justin Meyer: Then

73
00:04:38.215 --> 00:04:42.530
c1 is gonna be called again,
a brand new call object is created.

74
00:04:42.530 --> 00:04:43.440
So this is important,

75
00:04:43.440 --> 00:04:47.670
every time a function is run a new
call object is created, every time.

76
00:04:48.750 --> 00:04:52.146
So again, same process is gonna happen,
this code is gonna be ran,

77
00:04:52.146 --> 00:04:53.589
c1's code is gonna be ran.

78
00:04:53.589 --> 00:04:55.160
It's gonna look for counts.

79
00:04:55.160 --> 00:05:01.209
It's gonna increment count to 2.
&gt;&gt; Justin Meyer: Is there a question?

80
00:05:01.209 --> 00:05:03.828
&gt;&gt; Speaker 2: Yeah, within the closure is

81
00:05:03.828 --> 00:05:08.932
this.count the same as count?
&gt;&gt; Justin Meyer: No, we will talk

82
00:05:08.932 --> 00:05:15.858
about what this means in
maybe the next set of slides.

83
00:05:15.858 --> 00:05:20.856
And, yeah, we'll get to this,
I don't wanna get into it now.

84
00:05:20.856 --> 00:05:21.548
&gt;&gt; Speaker 2: The answer is no, but

85
00:05:21.548 --> 00:05:23.280
we're gonna get to why.
&gt;&gt; Justin Meyer: Yeah, we'll get to why.

86
00:05:28.690 --> 00:05:34.130
But I will say that call objects
themselves store the reference to this.

87
00:05:34.130 --> 00:05:37.404
In reality, if I was drawing
this full call object out,

88
00:05:37.404 --> 00:05:40.619
it would have a this pointer
that points to the window.

89
00:05:40.619 --> 00:05:44.350
It would have a this inside here and
a pointer right back to the window.

90
00:05:44.350 --> 00:05:45.920
But we'll explain that later.

91
00:05:47.900 --> 00:05:52.719
Anyways, so we just called c1 again,
and we just incremented our count

92
00:05:52.719 --> 00:05:57.202
variable to 2.
&gt;&gt; Justin Meyer: And

93
00:05:57.202 --> 00:05:59.900
now we're gonna call
the counter function again.

94
00:05:59.900 --> 00:06:03.580
And this is really important,
cuz a lot of times I think people don't,

95
00:06:03.580 --> 00:06:07.210
they kind of see code like this, and they
might understand, there's two different

96
00:06:07.210 --> 00:06:12.200
count variables, but not really the
mechanism that supports and allows that.

97
00:06:12.200 --> 00:06:14.820
So we're gonna understand what
happens when you call counter again.

98
00:06:15.840 --> 00:06:21.230
When you ever call a function again, a new
call object is created for that second

99
00:06:21.230 --> 00:06:28.130
invocation of counter and
it's gonna know about its parent function.

100
00:06:29.450 --> 00:06:31.850
And we're gonna run the counter code now.

101
00:06:31.850 --> 00:06:36.730
So we're gonna create a count variable in
this other call object, that's gonna be 0,

102
00:06:36.730 --> 00:06:38.970
and we're gonna return
another function in memory.

103
00:06:40.530 --> 00:06:44.656
So a brand new function
is gonna be created and

104
00:06:44.656 --> 00:06:50.774
we're gonna return that as c2.
&gt;&gt; Speaker 2: There's

105
00:06:50.774 --> 00:06:54.160
a question on how is that
return function invoked.

106
00:06:54.160 --> 00:06:58.933
Is it internally invoked when called?
&gt;&gt; Justin Meyer: The return function,

107
00:06:58.933 --> 00:07:00.739
how does.
&gt;&gt; Speaker 2: The inner function,

108
00:07:00.739 --> 00:07:04.095
how is it invoked?
&gt;&gt; Justin Meyer: It's invoked as c1 right

109
00:07:04.095 --> 00:07:06.959
here and, or by calling c1.

110
00:07:06.959 --> 00:07:11.180
So we save,
that inner function is returned.

111
00:07:11.180 --> 00:07:14.150
And we save it as c1 and
then we're calling it here.

112
00:07:14.150 --> 00:07:17.870
And now,
we're gonna create a new inner function.

113
00:07:17.870 --> 00:07:20.140
We're gonna actually create
two functions in memory.

114
00:07:20.140 --> 00:07:24.250
This is really important where I think
sometimes beginners might not understand,

115
00:07:24.250 --> 00:07:27.120
they think there's just one
function created in memory.

116
00:07:27.120 --> 00:07:30.457
Actually, this function is created
every time counter is created,

117
00:07:30.457 --> 00:07:33.055
as you can see here,
we have two functions in memory.

118
00:07:33.055 --> 00:07:38.484
Or again, we're gonna save the function
that was returned by the second

119
00:07:38.484 --> 00:07:43.317
calling of counter as c2.
&gt;&gt; Justin Meyer: And

120
00:07:43.317 --> 00:07:47.351
then we're going to call c2.

121
00:07:47.351 --> 00:07:51.078
Which will again call c2's code,

122
00:07:51.078 --> 00:07:55.380
which will look for a count variable.

123
00:07:55.380 --> 00:07:58.190
And this case,
it's gonna try to find count here.

124
00:07:58.190 --> 00:08:04.109
Not find it, walk up these references and
increment this count to 1 and

125
00:08:04.109 --> 00:08:12.800
then return 1 here.
&gt;&gt; Justin Meyer: Yeah.

126
00:08:12.800 --> 00:08:13.905
&gt;&gt; Speaker 3: How does it work to have two

127
00:08:13.905 --> 00:08:14.818
return keywords in?

128
00:08:14.818 --> 00:08:17.782
Cuz once you hit that first return
keyword, doesn't it break out of

129
00:08:17.782 --> 00:08:21.266
the function and then go to the code that
called it, or is that because the second

130
00:08:21.266 --> 00:08:24.126
return is within that second function?
&gt;&gt; Justin Meyer: Exactly, so

131
00:08:24.126 --> 00:08:29.200
the big thing is to think of,
functions are first class.

132
00:08:29.200 --> 00:08:32.970
You can do everything with a function
that you can do with an object.

133
00:08:32.970 --> 00:08:37.273
In some ways, this return is almost like
I returned an object from this outer

134
00:08:37.273 --> 00:08:40.500
function but in reality,
I'm returning a function, so

135
00:08:40.500 --> 00:08:44.642
c1 is a function that you can then call.
&gt;&gt; Justin Meyer: So

136
00:08:44.642 --> 00:08:49.674
that's why this return, in here, nothing
is happening with, until c1 is called.

