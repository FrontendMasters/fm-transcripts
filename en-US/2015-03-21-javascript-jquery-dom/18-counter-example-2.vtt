WEBVTT

1
00:00:00.000 --> 00:00:04.122
[MUSIC]

2
00:00:04.122 --> 00:00:07.159
&gt;&gt; Justin Meyer: If you can get this this
is like closures you actually I think

3
00:00:07.159 --> 00:00:10.630
understand more about JavaScript
development or JavaScript.

4
00:00:10.630 --> 00:00:15.540
How it works as a language and
90% of the developers

5
00:00:15.540 --> 00:00:20.159
I'd say most people don't really get
the mechanism for how this works.

6
00:00:21.510 --> 00:00:24.920
So again, this code.

7
00:00:24.920 --> 00:00:28.590
Jobs are just comes to
it you know parses it,

8
00:00:28.590 --> 00:00:31.530
then builds it all into expressions,
and is gonna run

9
00:00:31.530 --> 00:00:35.780
essentially the first expression although
I'm in a run kind of two at ones.

10
00:00:35.780 --> 00:00:40.230
It's gonna say I'm gonna first
build a function in memory, and

11
00:00:40.230 --> 00:00:42.890
like we said functions also
know about parent call object.

12
00:00:42.890 --> 00:00:44.670
And then,
I'm gonna do the counter equals part.

13
00:00:46.084 --> 00:00:50.610
So again, it doesn't know what's
going on inside that function it just

14
00:00:50.610 --> 00:00:51.450
knows there's a function.

15
00:00:53.420 --> 00:00:56.365
Then it's going to run
that function counter.

16
00:00:56.365 --> 00:01:00.071
And every time a function is run there's

17
00:01:00.071 --> 00:01:04.220
this magical box that
variables can go into.

18
00:01:08.850 --> 00:01:11.810
And while this code is running,

19
00:01:11.810 --> 00:01:15.390
any variables that this code
creates are put into that box.

20
00:01:15.390 --> 00:01:19.230
So here count is gonna go in and
it's going to be 0.

21
00:01:19.230 --> 00:01:22.400
Now, this function
returns another function.

22
00:01:23.460 --> 00:01:27.690
So just like before when we created and
saw the counter function.

23
00:01:27.690 --> 00:01:30.822
We're gonna create another
function in memory.

24
00:01:30.822 --> 00:01:35.124
And we're gonna return that
function's memory address

25
00:01:35.124 --> 00:01:38.356
essentially to be set as the C1 variable.

26
00:01:38.356 --> 00:01:41.494
So C1 will point to that
function in memory.

27
00:01:45.878 --> 00:01:47.622
&gt;&gt; Justin Meyer: Then we're gonna call c1.

28
00:01:49.992 --> 00:01:52.549
&gt;&gt; Justin Meyer: And whenever you call

29
00:01:52.549 --> 00:01:57.096
a function a call object is created and

30
00:01:57.096 --> 00:02:01.087
it's going to run then the code.

31
00:02:01.087 --> 00:02:04.127
So whenever a function is called
call object is created then it runs

32
00:02:04.127 --> 00:02:05.480
the code for the function.

33
00:02:05.480 --> 00:02:10.802
So in this case, c1 is that inner
function and we're gonna run ++count.

34
00:02:10.802 --> 00:02:14.533
It's gonna try to look for a count
variable in that variable but we didn't

35
00:02:14.533 --> 00:02:18.399
create a count or sorry you can look for
a count variable in that call object.

36
00:02:19.410 --> 00:02:26.090
But we didn't really create,
we didn't do a var count inside here.

37
00:02:26.090 --> 00:02:28.050
So there's not one in here.

38
00:02:28.050 --> 00:02:31.150
So it's gonna keep looking up
to try to find a count variable,

39
00:02:32.370 --> 00:02:38.610
find that count variable and
increment it and then return.

40
00:02:38.610 --> 00:02:40.450
Because c1 is a function itself,

41
00:02:40.450 --> 00:02:44.460
it's gonna return the incremented
value of count as one.

42
00:02:46.720 --> 00:02:48.470
And we're gonna call c1 again.

43
00:02:48.470 --> 00:02:50.530
Same function in memory,
we're gonna call again.

44
00:02:50.530 --> 00:02:54.683
But every time you call a function
a new call object is created, and

45
00:02:54.683 --> 00:02:58.911
that same process of trying to find
count in memory is gonna be looked

46
00:02:58.911 --> 00:03:03.169
up.
&gt;&gt; Justin Meyer: Let's give a look at this

47
00:03:03.169 --> 00:03:05.830
two.
&gt;&gt; Student: Do you wanna use return

48
00:03:05.830 --> 00:03:08.700
then every time you put another
function inside that function?

49
00:03:09.770 --> 00:03:11.070
&gt;&gt; Justin Meyer: No, you couldn't.

50
00:03:11.070 --> 00:03:15.680
It's possible that you
could do like window.foo

51
00:03:15.680 --> 00:03:20.850
equals a function and
then you could I could call foo down here.

52
00:03:20.850 --> 00:03:26.760
But it would were it overwrite that foo
property every time with a new function.

53
00:03:27.930 --> 00:03:32.597
So the cool thing about this is down here
if I were to call I could still keep

54
00:03:32.597 --> 00:03:37.957
calling c1 and it would still be
&gt;&gt; Justin Meyer: It would still

55
00:03:37.957 --> 00:03:43.645
be counting c1s variable and
not c2s kind of closed variable.

56
00:03:49.803 --> 00:03:50.459
&gt;&gt; Justin Meyer: In some ways,

57
00:03:50.459 --> 00:03:52.330
you might like have used jay creek code.

58
00:03:52.330 --> 00:03:59.750
We have a lot of nested functions,
you're adding event handlers and doing.

59
00:03:59.750 --> 00:04:01.190
Ajax calls and things like that.

60
00:04:01.190 --> 00:04:03.040
We have a lot of nested functions.

61
00:04:03.040 --> 00:04:05.720
That's the exact same thing
that's going on here.

62
00:04:05.720 --> 00:04:08.610
We have function defined
inside of another function.

63
00:04:08.610 --> 00:04:13.180
It can reference the variables
in the parent function.

64
00:04:14.430 --> 00:04:19.340
That's how close this count can access
the count in its outer function.

65
00:04:21.410 --> 00:04:27.622
And it can also reference the other
variable c1 and c2 if it really wanted to,

66
00:04:27.622 --> 00:04:31.686
even though itself is being
created as c1 and c2.

67
00:04:31.686 --> 00:04:36.696
That's just because closures walk, it
just keeps walking up these chains until

68
00:04:36.696 --> 00:04:41.979
it finds a variable.
&gt;&gt; Student 2: Maybe,

69
00:04:41.979 --> 00:04:45.066
just, there's a question
about what is the parentheses

70
00:04:45.066 --> 00:04:47.610
after it mean?
&gt;&gt; Justin Meyer: When we're just putting

71
00:04:47.610 --> 00:04:49.400
a call object, like,
drawing out like that?

72
00:04:49.400 --> 00:04:55.270
It's our way of representing that this
is a call object, that was created

73
00:04:55.270 --> 00:05:00.420
when you called the counter function.
&gt;&gt; Student 2: No way, I think like if you

74
00:05:00.420 --> 00:05:07.130
have var c1, on the screen it's just c1
and then put your c1 parenthesis after.

75
00:05:07.130 --> 00:05:08.780
Open, close.
&gt;&gt; Justin Meyer: So

76
00:05:08.780 --> 00:05:11.500
if I did-
&gt;&gt; Alexis Abril: [CROSSTALK] I did c1,

77
00:05:11.500 --> 00:05:17.896
semicolon and then c1 so c1 is just
a reference to the function in memory.

78
00:05:17.896 --> 00:05:22.319
Just to point that function c1 with
the open-close parentheses is doing two

79
00:05:22.319 --> 00:05:23.650
things.

80
00:05:23.650 --> 00:05:27.236
It's finding that function in memory,
following the pointer to its function

81
00:05:27.236 --> 00:05:30.291
memory, and then invoking, or
calling that function in memory.

82
00:05:30.291 --> 00:05:32.000
If that makes sense.

83
00:05:32.000 --> 00:05:34.800
And in the process,
creating our call object here.

84
00:05:34.800 --> 00:05:39.290
What this is, a nice way to do this is,
a really nice example too,

85
00:05:39.290 --> 00:05:43.799
of how we In the city links,
private variables with JavaScript.

86
00:05:43.799 --> 00:05:48.300
With this kind of concept, this knowledge,
count is not always accessible.

87
00:05:48.300 --> 00:05:52.090
I saw in the chat there was some,
why isn't count accessible on the window,

88
00:05:52.090 --> 00:05:53.550
on the global scope.

89
00:05:53.550 --> 00:05:58.850
This is how we can prevent or keep a nice
closed, that's where we'll use the word.

90
00:05:58.850 --> 00:06:02.339
Set of variables that we wanna use in our

91
00:06:02.339 --> 00:06:06.514
methods.
&gt;&gt; Alexis Abril: If that answers your

92
00:06:06.514 --> 00:06:11.566
question.
&gt;&gt; Justin Meyer: So one fun kind of

93
00:06:11.566 --> 00:06:16.372
technical aside for the computer sciencey

94
00:06:16.372 --> 00:06:21.590
nerdy Folks in here like me,
I mean step back.

95
00:06:21.590 --> 00:06:25.186
So when a call object is really,
so most are,

96
00:06:25.186 --> 00:06:30.883
every language has the idea of a stack,
you might heard of a call stack.

97
00:06:30.883 --> 00:06:32.684
So when a function is called,

98
00:06:32.684 --> 00:06:37.223
any variables created inside that
function are kinda added to the stack and

99
00:06:37.223 --> 00:06:42.400
when the function exits that part of
the stack is popped off and discarded.

100
00:06:42.400 --> 00:06:46.860
So you enter a function variables,
get stored on this thing called a stack.

101
00:06:46.860 --> 00:06:49.240
And then, when the function
exits they're popped off.

102
00:06:49.240 --> 00:06:54.210
That's why if you've ever had a stack
overflow and not the question site.

103
00:06:54.210 --> 00:06:56.220
The actual stack overflow error.

104
00:06:56.220 --> 00:07:01.870
That's because you keep calling so
many functions that the stack it's so

105
00:07:01.870 --> 00:07:07.540
big, that there's just
you run out of memory.

106
00:07:07.540 --> 00:07:13.290
A call object is really
a part of the call stack so

107
00:07:13.290 --> 00:07:18.100
each individual part of a call stack
that represents a single function.

108
00:07:18.100 --> 00:07:19.550
That's called an activation frame.

109
00:07:21.160 --> 00:07:24.720
And a call object is really
an activation frame.

110
00:07:24.720 --> 00:07:28.850
So one function one invocation of
functions all of it's arguments and

111
00:07:28.850 --> 00:07:32.430
variables stored in something but
it can be made permanent.

112
00:07:32.430 --> 00:07:36.563
A call object is some is a call object or

113
00:07:36.563 --> 00:07:41.472
sorry a call object is
a activation frame that

114
00:07:41.472 --> 00:07:46.390
can exist past when
the function has exited.

115
00:07:46.390 --> 00:07:49.220
So that's why I'll start over here.

116
00:07:49.220 --> 00:07:52.910
So when I call this counter function,
in some way, what what JavaScript's really

117
00:07:52.910 --> 00:07:56.900
doing internally is it's creating
a new activation frame for

118
00:07:56.900 --> 00:07:59.999
the invocation of this function
that stores all variables on it.

119
00:08:01.140 --> 00:08:06.750
And because it's returning a function
that has c1 pointing to it

120
00:08:08.190 --> 00:08:12.090
and this function then points
to the activation frame.

121
00:08:12.090 --> 00:08:13.440
Really, there the call object.

122
00:08:14.490 --> 00:08:17.360
It knows I'm not gonna
garbage collect that then,

123
00:08:17.360 --> 00:08:20.360
because I'm not the one
when the function exits.

124
00:08:20.360 --> 00:08:22.270
I'm not gonna pop that activation frame.

125
00:08:22.270 --> 00:08:23.220
I'm not gonna discard it.

126
00:08:23.220 --> 00:08:28.150
I'm gonna save it, because something
might still want to talk to a variable

127
00:08:28.150 --> 00:08:32.200
inside this activation frame and
that's this count here.

128
00:08:32.200 --> 00:08:38.430
That's the very technical deep reason
like can a computer science the reason.

129
00:08:38.430 --> 00:08:43.235
Closures are really just someone was like,
hey, we've got this stack,

130
00:08:43.235 --> 00:08:46.568
let's make a,
with activation frames what happen

131
00:08:46.568 --> 00:08:51.472
if someone still wanted to access
the items in the activation frame later?

132
00:08:51.472 --> 00:08:53.895
And how would we make that permanent and

133
00:08:53.895 --> 00:08:58.744
the mechanism at which JavaScript uses
to make activation frames permanent is

134
00:08:58.744 --> 00:09:02.292
a function that's created
inside of another function.

135
00:09:02.292 --> 00:09:08.310
Your function, then if functions
know about their parent call object,

136
00:09:08.310 --> 00:09:12.620
it will make that call object permanent,
as long as and keep it there, as long as,

137
00:09:12.620 --> 00:09:15.990
somehow, something is
essentially referencing that

138
00:09:15.990 --> 00:09:18.660
function.
&gt;&gt; Student 2: Question, is the activation

139
00:09:18.660 --> 00:09:23.146
frame still on the stack?
&gt;&gt; Justin Meyer: It will be on the stack

140
00:09:23.146 --> 00:09:29.864
while this function is running and
at the end when the function exits.

141
00:09:29.864 --> 00:09:32.520
It will be popped off and
kept somewhere else.

142
00:09:32.520 --> 00:09:34.950
I think that actually
thread that I posted.

143
00:09:36.320 --> 00:09:41.220
That were as working through
this with the VA core member

144
00:09:41.220 --> 00:09:46.132
he I forgot what he said,
at what point it's moved off.

145
00:09:46.132 --> 00:09:47.227
It's definitely moved off the stack.

146
00:09:47.227 --> 00:09:53.667
I don't remember exactly
what's done with it.

147
00:09:53.667 --> 00:09:55.275
Cool.

148
00:09:55.275 --> 00:09:58.145
Sorry to get all super hyper technical.

149
00:09:58.145 --> 00:09:59.164
But I enjoy it.

150
00:09:59.164 --> 00:10:00.803
[LAUGH] Hopefully you guys do to.

151
00:10:00.803 --> 00:10:04.059
It's not just just write a comment
tell me not to talk about that stuff.

152
00:10:04.059 --> 00:10:07.820
I won't be offended.

153
00:10:07.820 --> 00:10:12.870
So to finish this, c1 is created.

154
00:10:12.870 --> 00:10:19.570
Is return from here it call c1 it's going
to run itself, but try to find this count

155
00:10:19.570 --> 00:10:25.560
variable incremented to one,
then we're going to call c1 again.

156
00:10:25.560 --> 00:10:26.960
Every time a function is called,

157
00:10:26.960 --> 00:10:31.370
a new call object is created just like
an activation frame is put on the stack.

158
00:10:31.370 --> 00:10:35.850
And it's gonna try to look for count,
but because it can't find count,

159
00:10:35.850 --> 00:10:41.280
it's gonna walk up these
little magic references,

160
00:10:41.280 --> 00:10:45.170
to find that version account
in incremented to two.

161
00:10:45.170 --> 00:10:46.570
Now, here comes the crazy part.

162
00:10:46.570 --> 00:10:49.790
We're gonna call counter again.

163
00:10:49.790 --> 00:10:54.680
So whenever a function is created, or
called in new call object is created.

164
00:10:57.450 --> 00:11:02.303
And that functions code
is gonna be run and

165
00:11:02.303 --> 00:11:05.750
any variables created.

166
00:11:05.750 --> 00:11:11.202
While that function is or is running
are gonna go in that call object so

167
00:11:11.202 --> 00:11:16.278
this is gonna get a different
separate count variable and then,

168
00:11:16.278 --> 00:11:21.166
within this function another
function is gonna be returned or

169
00:11:21.166 --> 00:11:23.516
created and returned as c2.

170
00:11:23.516 --> 00:11:28.649
So then we call c2,
&gt;&gt; Justin Meyer: New

171
00:11:28.649 --> 00:11:34.232
call object is gonna be created and it's
gonna look up a value of count again but

172
00:11:34.232 --> 00:11:39.920
this time it's cool cup a different value
of count and increment it to one cool.

173
00:11:41.810 --> 00:11:46.240
Any questions before I move on?
&gt;&gt; Student 3: Could you pass

174
00:11:46.240 --> 00:11:51.300
parameters into the second function?
&gt;&gt; Justin Meyer: It is, yeah.

175
00:11:51.300 --> 00:11:53.925
These parameters would show up here and

176
00:11:53.925 --> 00:11:56.795
then they would also
be put in this clause.

177
00:11:56.795 --> 00:12:00.612
So if I pass like increment by or
something like that.

178
00:12:00.612 --> 00:12:04.600
So if I didn't want to increment by one
I could pass an optional increment by.

179
00:12:04.600 --> 00:12:09.650
So I might have increment by as
an argument here and then I might do count

180
00:12:09.650 --> 00:12:15.190
plus equals, well I have to figure out
how to write that so I'd like return the.

181
00:12:15.190 --> 00:12:20.710
Count equals count plus increment
by I could write it that way.

182
00:12:20.710 --> 00:12:25.210
Now, when this call object is created, so
when c2 is created it would actually get

183
00:12:25.210 --> 00:12:30.340
the increment by saved in here.

184
00:12:32.410 --> 00:12:35.510
So when increment by was looked up,
it would find increment here but

185
00:12:35.510 --> 00:12:37.050
I would find count still up here.

