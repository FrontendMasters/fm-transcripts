WEBVTT

1
00:00:00.000 --> 00:00:03.837
[MUSIC]

2
00:00:03.837 --> 00:00:08.662
&gt;&gt; Justin Meyer: So for today's set up
please make sure you have open in your

3
00:00:08.662 --> 00:00:16.610
browser exercise/DOM/test.html and
breeds.html, we'll use breeds later.

4
00:00:16.610 --> 00:00:20.590
Test is gonna test your version of jQuery.

5
00:00:20.590 --> 00:00:25.970
And then open in your editor
exercises/DOM/my_jquery

6
00:00:25.970 --> 00:00:27.290
which we'll be using right now.

7
00:00:27.290 --> 00:00:32.090
Hopefully you have the extend implemented,

8
00:00:32.090 --> 00:00:34.700
if not I will show you how
to get that implemented.

9
00:00:34.700 --> 00:00:37.160
We implemented that right
at the end of yesterday.

10
00:00:38.410 --> 00:00:42.080
And also open my_tabs, that's where we'll
build the tabs at the end of the day.

11
00:00:44.540 --> 00:00:51.220
So today it's really about understanding
the DOM but by building jQuery.

12
00:00:51.220 --> 00:00:54.201
We're going to finish up
jQuery function utilities,

13
00:00:54.201 --> 00:00:57.650
these are just a bunch of functional
helpers that jQuery adds.

14
00:00:57.650 --> 00:01:00.380
This is still more like
JavaScript knowledge but

15
00:01:00.380 --> 00:01:04.180
then once we're done with that we
gonna go into the day two agenda.

16
00:01:04.180 --> 00:01:06.683
We're gonna talk about how you
find elements in the page.

17
00:01:06.683 --> 00:01:09.394
How you go from one element
to another element.

18
00:01:09.394 --> 00:01:14.110
How you read element attributes and
properties get and set them.

19
00:01:14.110 --> 00:01:17.850
How styles are computed on an element and

20
00:01:17.850 --> 00:01:21.650
a little bit about how layout and
positioning works.

21
00:01:21.650 --> 00:01:26.550
And then we'll teach you pretty much
everything there is to know about events.

22
00:01:26.550 --> 00:01:31.480
And then take all that knowledge and
build a version of jQuery and

23
00:01:31.480 --> 00:01:34.800
finish the class building your own tabs
widget with their own version of jQuery.

24
00:01:37.590 --> 00:01:44.470
But first I want to review
this handout that we give,

25
00:01:44.470 --> 00:01:47.720
which kinda serves as a summary of
everything we learned yesterday.

26
00:01:47.720 --> 00:01:50.670
[COUGH]
So,

27
00:01:50.670 --> 00:01:53.610
I'm just gonna walk through what
it means and what it looks like.

28
00:01:53.610 --> 00:01:59.147
So if you ever find yourself, how did
that work again, you can remember it.

29
00:01:59.147 --> 00:02:05.430
So remember everything ,when
you create a variable,

30
00:02:05.430 --> 00:02:12.080
it's essentially creating a kind of
registry and an entry in a call object

31
00:02:12.080 --> 00:02:16.810
that points to whatever the value is on
the right hand side of the equal side.

32
00:02:16.810 --> 00:02:20.210
That's for the most part what equal does.

33
00:02:20.210 --> 00:02:25.560
So that's why we created this
val here that points to 5 and

34
00:02:25.560 --> 00:02:30.690
a me that points to an object and that has
a name property that points to Justin.

35
00:02:30.690 --> 00:02:34.530
[COUGH]
Then next,

36
00:02:34.530 --> 00:02:37.750
when you create a function,
there's a few things that happen.

37
00:02:37.750 --> 00:02:39.730
Or sorry, not when you create a function,
when you define a function.

38
00:02:39.730 --> 00:02:42.800
Which kind of is a synonym, actually.

39
00:02:42.800 --> 00:02:48.140
When you define a function,
a function object is created in memory.

40
00:02:49.470 --> 00:02:53.310
The function always knows about
its parent call object, and

41
00:02:53.310 --> 00:02:57.300
the function has a prototype object
that's created automatically.

42
00:02:57.300 --> 00:02:59.575
We didn't really talk
about it yesterday but

43
00:02:59.575 --> 00:03:02.660
[COUGH] These default prototype objects

44
00:03:02.660 --> 00:03:07.150
have a constructor property that points
back to the function that created them.

45
00:03:07.150 --> 00:03:12.370
So this is what happens whenever you
see a function defined like this.

46
00:03:12.370 --> 00:03:16.339
Again, it doesn't really know anything
about what's going on in here.

47
00:03:19.480 --> 00:03:26.050
Next when a function is called or
invoked, a new call object is created.

48
00:03:27.050 --> 00:03:32.350
And the first thing is its
arguments are translated.

49
00:03:32.350 --> 00:03:38.400
So you can see here it's got arg1
points to what me points to.

50
00:03:38.400 --> 00:03:44.250
And val is our arg2 is
going to have its own copy,

51
00:03:44.250 --> 00:03:47.010
this is the pass by reference and
pass by value thing.

52
00:03:48.490 --> 00:03:50.950
And then it's also going
to have its value for

53
00:03:50.950 --> 00:03:55.960
this called remember we learned that
whenever a function is called without dot,

54
00:03:56.960 --> 00:04:01.920
it's always this inside that function,
even though we don't show it in here.

55
00:04:01.920 --> 00:04:04.650
If we were to put in here this
is going to be the window.

56
00:04:04.650 --> 00:04:06.070
That's why this points to the window.

57
00:04:07.460 --> 00:04:11.530
So, you can see when a function is called,
it's called object has this inside of it.

58
00:04:11.530 --> 00:04:12.860
That's how, where that comes from.

59
00:04:15.260 --> 00:04:20.310
And, then the function is actually ran and
any variables

60
00:04:20.310 --> 00:04:24.630
declared in this function are also
stored in this call object.

61
00:04:24.630 --> 00:04:26.107
That's what happens when
you run a function.

62
00:04:29.851 --> 00:04:34.510
&gt;&gt; Justin Meyer: Finally, let's talk
about when you use the new keyword.

63
00:04:34.510 --> 00:04:38.340
But to use the new keyword we're gonna
set up a Dog constructor function, so

64
00:04:38.340 --> 00:04:40.110
the exact same thing is gonna happen.

65
00:04:40.110 --> 00:04:44.130
A function that knows about its call
object that has a default prototype

66
00:04:44.130 --> 00:04:44.668
object.

67
00:04:44.668 --> 00:04:49.282
[COUGH] Then we're gonna
add a speak function, so

68
00:04:49.282 --> 00:04:53.116
we're doing dog.prototype.speak.

69
00:04:53.116 --> 00:04:58.242
Now if we were being extremely
hyper vigilant, we would also,

70
00:04:58.242 --> 00:05:04.928
this function itself has a prototype of
object and it knows about its call object.

71
00:05:04.928 --> 00:05:08.600
But we didn't draw it in because
it would get too messy and

72
00:05:08.600 --> 00:05:12.438
then we're going to finally do
what the new operator does.

73
00:05:12.438 --> 00:05:16.943
If you remember from
yesterday the new operator

74
00:05:16.943 --> 00:05:21.002
creates a new object in memory, step one.

75
00:05:21.002 --> 00:05:25.071
And that's gonna sign that objects proto
property to the constructor function's

76
00:05:25.071 --> 00:05:26.067
prototype object.

77
00:05:28.776 --> 00:05:31.841
&gt;&gt; Justin Meyer: And then it's
going to actually run the function.

78
00:05:31.841 --> 00:05:37.284
And again whenever you call a function,

79
00:05:37.284 --> 00:05:41.294
a new call object is created.

80
00:05:41.294 --> 00:05:46.963
This is going to be set to point to
the new instance created in memory and

81
00:05:46.963 --> 00:05:53.127
name really should be pointing and
I just realized to it's own copy of Fido.

82
00:05:53.127 --> 00:05:57.623
The way that we're kind of phrasing it
in the reality JavaScript could actually

83
00:05:57.623 --> 00:06:00.030
potentially point here.

84
00:06:00.030 --> 00:06:04.950
But for this, it should be
pointing to it's own copy of Fido.

85
00:06:04.950 --> 00:06:09.560
And then the body of
the function is gonna be run and

86
00:06:09.560 --> 00:06:12.270
then it's gonna set this
name property to point,

87
00:06:12.270 --> 00:06:16.320
actually to set this name property
point to a zone copy of Fido.

88
00:06:16.320 --> 00:06:19.600
So, that's how that gets set up.

89
00:06:19.600 --> 00:06:23.714
And this is why we could call
with a dot operator pup.speak,

90
00:06:23.714 --> 00:06:28.888
because the dot operator would, first
we look up pup and we get this object.

91
00:06:28.888 --> 00:06:33.647
And the dot operator would say,
give me the speak property of

92
00:06:33.647 --> 00:06:38.405
this not find it follow the proto
chain to this object which is

93
00:06:38.405 --> 00:06:43.552
the constructor function prototype,
find speak and call that.

94
00:06:43.552 --> 00:06:45.450
Cool, everything we learned yesterday.

95
00:06:46.850 --> 00:06:49.030
Awesome, good job guys.

96
00:06:49.030 --> 00:06:54.302
Okay, so with that,
I want to make sure that

97
00:06:54.302 --> 00:07:00.300
everybody is kind of where
we ended up yesterday.

98
00:07:00.300 --> 00:07:05.800
So some people I know left early or
left online.

99
00:07:05.800 --> 00:07:11.599
We implemented this extend function.

100
00:07:11.599 --> 00:07:14.153
Basically just to recap it,
it just extend,

101
00:07:14.153 --> 00:07:18.605
it copies all the properties from object
into target and then returns target.

102
00:07:18.605 --> 00:07:23.746
If you're behind or if any point,
you guys today, get you fall behind,

103
00:07:23.746 --> 00:07:28.552
there's in this folder,
there's a final folder that has the final

104
00:07:28.552 --> 00:07:33.560
implementation of everything that
we're gonna be working on today.

105
00:07:35.820 --> 00:07:39.000
Try, if you're here working with me,
don't cheat.

106
00:07:39.000 --> 00:07:42.020
It's better for you to try and
struggle and then wait for

107
00:07:42.020 --> 00:07:46.180
me to give the answer because you'll
absolutely learn better that way.

108
00:07:46.180 --> 00:07:49.890
Trying even if you're struggling cuz
we're giving short amount of time today.

109
00:07:49.890 --> 00:07:53.440
If you're struggling you don't do
anything, the struggle is good,

110
00:07:53.440 --> 00:07:53.980
it's worth it.

111
00:07:53.980 --> 00:07:56.390
It will help you learn better that way.

112
00:07:56.390 --> 00:08:00.850
So try not to cheat unless you for
some good reason have fallen behind.

113
00:08:03.640 --> 00:08:08.160
So for those who are already behind
cuz they didn't get to do this,

114
00:08:08.160 --> 00:08:13.980
please go to my_jquery here and
copy that that extend

115
00:08:15.830 --> 00:08:23.104
code into the extend code
in exercise/DOM/my_jquery.

116
00:08:24.930 --> 00:08:28.446
And then once you've done that and
everybody should have it.

117
00:08:28.446 --> 00:08:34.162
So if they open
the exercises/DOM/test.html page,

118
00:08:34.162 --> 00:08:37.332
they see this first test pass.

119
00:08:37.332 --> 00:08:41.201
So quick show of hands, is everybody
about there in the room right now?

120
00:08:41.201 --> 00:08:42.934
Show of nodding heads looks good.

121
00:08:42.934 --> 00:08:50.082
Okay, so
now we’ll move on to the next exercise.

122
00:08:56.159 --> 00:09:01.343
&gt;&gt; Justin Meyer: I think he’s going to be-
&gt;&gt; Student 1: What is the dollar sign?

123
00:09:01.343 --> 00:09:03.140
&gt;&gt; Justin Meyer: What is the dollar sign?

124
00:09:03.140 --> 00:09:03.890
&gt;&gt; Student 1: Yeah.

125
00:09:03.890 --> 00:09:06.020
&gt;&gt; Justin Meyer: The dollar sign is,
that's a good question,

126
00:09:06.020 --> 00:09:10.580
the dollar sign is just like
if I wrote A = something.

127
00:09:10.580 --> 00:09:16.990
The dollar sign is just another character
that you can use in variable names.

128
00:09:16.990 --> 00:09:24.740
And variable names like you can use
the letter A for a variable name.

129
00:09:24.740 --> 00:09:27.773
So it's kind of like I just did var it is,

130
00:09:27.773 --> 00:09:33.774
it's more like I did window.$ = that
which is really what I'm doing up here.

131
00:09:33.774 --> 00:09:35.768
So it's just that
&gt;&gt; Student 2: [CROSSTALK] To use for

132
00:09:35.768 --> 00:09:40.524
jQuery, jQuery is gonna [INAUDIBLE]
As their character that

133
00:09:40.524 --> 00:09:42.530
you can use to invoke it.

134
00:09:42.530 --> 00:09:43.588
&gt;&gt; Justin Meyer: Yeah, but it's not,

135
00:09:43.588 --> 00:09:47.000
the thing that I want to communicate
is that it's not special in any way.

136
00:09:47.000 --> 00:09:49.811
It's not like it has
some special powers or

137
00:09:49.811 --> 00:09:55.058
special ability besides what jQuery either
gives it or we're going to give it.

138
00:09:59.462 --> 00:10:04.906
&gt;&gt; Justin Meyer: Good question, okay,

139
00:10:04.906 --> 00:10:09.810
so back to the slide.

140
00:10:09.810 --> 00:10:13.367
&gt;&gt; Student 2: There's a question
in the chat, what is a selector?

141
00:10:13.367 --> 00:10:15.710
&gt;&gt; Justin Meyer: Selector
is just the argument.

142
00:10:17.050 --> 00:10:19.850
To be clear we haven't implemented
the dollar function yet

143
00:10:19.850 --> 00:10:25.360
and we haven't implemented anything
except for a dollar extend.

144
00:10:25.360 --> 00:10:28.710
We'll come back to the dollar function and

145
00:10:28.710 --> 00:10:32.190
implement it after we implement
all of these things here.

146
00:10:32.190 --> 00:10:35.850
But we needed like a dollar object so

147
00:10:35.850 --> 00:10:41.469
we could add things to it for
this part of the training,

