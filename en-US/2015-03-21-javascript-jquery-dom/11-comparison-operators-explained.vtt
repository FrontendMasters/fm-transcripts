WEBVTT

1
00:00:00.000 --> 00:00:03.816
[MUSIC]

2
00:00:03.816 --> 00:00:07.936
&gt;&gt; Alexis Abril: We briefly touched on by
reference and by value, what that means,

3
00:00:07.936 --> 00:00:10.300
have you guys heard that term before?

4
00:00:10.300 --> 00:00:12.570
Has anyone not heard
that term by reference or

5
00:00:12.570 --> 00:00:15.030
by value before, passed by reference,
passed by value?

6
00:00:16.380 --> 00:00:18.030
Okay, we're good on that front?

7
00:00:18.030 --> 00:00:22.390
So we're gonna talk about === versus ==,
let's observe,

8
00:00:22.390 --> 00:00:24.350
we have this code on the left side.

9
00:00:24.350 --> 00:00:28.540
We have two strings or
two pointers to two primitive strings but

10
00:00:28.540 --> 00:00:32.350
they're the same string the same
you know actual string.

11
00:00:32.350 --> 00:00:36.140
Then we're gonna do
a comparison str1===str2.

12
00:00:36.140 --> 00:00:38.652
What this is going to do in memory,

13
00:00:38.652 --> 00:00:43.603
you can see here on our right side
we have our n str 1 and 2 pointers.

14
00:00:43.603 --> 00:00:47.435
They're pointing to our two primitive
strings of memory, the first one in 2001,

15
00:00:47.435 --> 00:00:48.865
and the second one in 2101.

16
00:00:48.865 --> 00:00:53.996
What this is gonna do is it's gonna
find those two primitives in memory and

17
00:00:53.996 --> 00:00:57.860
compare the actual values that those have.

18
00:00:57.860 --> 00:01:03.010
This is what we call comparison by value
I guess, when we're passing by value,

19
00:01:03.010 --> 00:01:07.580
it's gonna look at the actual value
that's held at those locations.

20
00:01:10.130 --> 00:01:13.620
So, this will compare those two,
does hi equal hi?

21
00:01:13.620 --> 00:01:17.230
That's true, so ===,
this will return TRUE.

22
00:01:17.230 --> 00:01:18.290
Question?

23
00:01:18.290 --> 00:01:19.173
Interjection.
Come on in.

24
00:01:19.173 --> 00:01:21.512
&gt;&gt; Speaker 2: Interjection,
a little qualification here.

25
00:01:21.512 --> 00:01:27.940
The two strings very likely would
only be one string in memory.

26
00:01:27.940 --> 00:01:32.940
This is this is a rule of, we like to
say that every time a string is created,

27
00:01:32.940 --> 00:01:35.940
a string object is created in memory,
right?

28
00:01:35.940 --> 00:01:40.630
But in reality,
JavaScript interpreters probably,

29
00:01:40.630 --> 00:01:43.280
it'll only probably create one string.

30
00:01:43.280 --> 00:01:48.610
Is again, just our rule of thumb
versus what happens in reality.

31
00:01:48.610 --> 00:01:51.190
Primitive types like strings are,

32
00:01:51.190 --> 00:01:56.530
you could almost think that there's
only one hi ever created in reality.

33
00:01:56.530 --> 00:01:59.810
But, I think it's better to actually
think like they're both created and

34
00:01:59.810 --> 00:02:01.906
that there's gonna be
a comparison like this.

35
00:02:01.906 --> 00:02:05.589
Cuz there could be two hi
that's created in some,

36
00:02:05.589 --> 00:02:10.766
there's there's nothing preventing
the language from doing that,

37
00:02:10.766 --> 00:02:16.650
just what happens in most browsers
would only create one hi in this case.

38
00:02:16.650 --> 00:02:17.210
&gt;&gt; Alexis Abril: Be sure.

39
00:02:17.210 --> 00:02:20.475
&gt;&gt; Speaker 2: We don't think about
per load just the weird thing is like

40
00:02:20.475 --> 00:02:23.607
primitives, is they're both
passed by reference and

41
00:02:23.607 --> 00:02:25.391
passed by value in some place.

42
00:02:25.391 --> 00:02:29.771
Because you can't
actually modify a string,

43
00:02:29.771 --> 00:02:36.282
you can't restate a string like hey,
change this second bit of a hi,

44
00:02:36.282 --> 00:02:41.310
or six inches second byte
of a hi to a capital I.

45
00:02:41.310 --> 00:02:44.770
You can actually do that and
keep the same string in memory.

46
00:02:44.770 --> 00:02:48.064
You'll just get back a brand new string.

47
00:02:48.064 --> 00:02:54.433
So the reality of primitive types
like this is much more complex.

48
00:02:54.433 --> 00:02:58.227
There's a lot to learn there but
again I just wanna say the rule of thumbs

49
00:02:58.227 --> 00:03:00.885
that we're giving will
get you the right answer,

50
00:03:00.885 --> 00:03:04.187
just there's a lot of optimizations
underneath the coding.

51
00:03:04.187 --> 00:03:05.336
&gt;&gt; Alexis Abril: Yes, yes.

52
00:03:05.336 --> 00:03:06.831
&gt;&gt; Speaker 2: You could learn about,

53
00:03:06.831 --> 00:03:11.320
but there's really only if you're
a geek do you need to learn about it.

54
00:03:11.320 --> 00:03:13.853
&gt;&gt; Alexis Abril: Be sure I know we
mentioned that just with the discussion of

55
00:03:13.853 --> 00:03:16.655
the VA developer, that's where
this all really was born from.

56
00:03:16.655 --> 00:03:20.120
Is we had a core VA developer who was
like no this is, we would never do this,

57
00:03:20.120 --> 00:03:22.488
this is so inefficient,
we just create what is hi.

58
00:03:22.488 --> 00:03:25.777
We'll be sure to post that
just because it's there.

59
00:03:25.777 --> 00:03:30.626
It's a really good discussion where you
have someone with intimate knowledge

60
00:03:30.626 --> 00:03:35.253
when the core team members over VA talking
about how they set this stuff up in

61
00:03:35.253 --> 00:03:36.297
the real world.

62
00:03:36.297 --> 00:03:41.360
Not in our we're learning how to
create a browser world, so cool.

63
00:03:42.520 --> 00:03:44.240
Okay now this is with primitives.

64
00:03:45.620 --> 00:03:49.081
With objects, it's gonna do things
just a little bit different.

65
00:03:49.081 --> 00:03:54.155
So we have obj1 is this empty object,
obj2 is empty object,

66
00:03:54.155 --> 00:03:59.043
we have pointers to their
respective addresses in memory.

67
00:03:59.043 --> 00:04:03.542
And from, at face value,
I would do the same thing.

68
00:04:03.542 --> 00:04:07.796
I would say hey these objects have the
same actual structure, they have the same

69
00:04:07.796 --> 00:04:11.751
values, they're both empty in this case,
they should result to equal.

70
00:04:11.751 --> 00:04:15.407
But because they are composite types,
what this is gonna do,

71
00:04:15.407 --> 00:04:17.657
is it's going to check by reference,

72
00:04:17.657 --> 00:04:22.110
it's gonna check the actual address
of where these objects are in memory.

73
00:04:22.110 --> 00:04:24.200
And since these are two different objects,

74
00:04:24.200 --> 00:04:27.910
two new objects created in memory,
they have two different addresses.

75
00:04:27.910 --> 00:04:31.710
We're not going to go through and
check all of its attributes.

76
00:04:31.710 --> 00:04:33.960
We're just gonna say,
are you at the same spot?

77
00:04:33.960 --> 00:04:37.250
You're not, you must be two different
things, this is gonna return false.

78
00:04:40.210 --> 00:04:44.259
&gt;&gt; Speaker 3: Can you give
that same example using a ==,

79
00:04:44.259 --> 00:04:46.784
like how the memory works?

80
00:04:46.784 --> 00:04:52.140
&gt;&gt; Alexis Abril: Yes I can but,
I can also, come on,

81
00:04:52.140 --> 00:04:56.257
second time's the charm.

82
00:04:58.277 --> 00:05:01.388
&gt;&gt; Alexis Abril: I can show you
what would happen in a == scenario.

83
00:05:03.140 --> 00:05:05.777
So that was ===,
triple equals in a primitive case,

84
00:05:05.777 --> 00:05:08.870
we're gonna compare the values
at the two addresses.

85
00:05:08.870 --> 00:05:12.690
In a composite case when compared the
addresses of what's a left or right side.

86
00:05:13.760 --> 00:05:17.468
What happens in a == case?

87
00:05:17.468 --> 00:05:24.370
This is the the logical path that
a == comparison is going to take.

88
00:05:24.370 --> 00:05:26.880
You're gonna take
the left == the right and

89
00:05:26.880 --> 00:05:32.470
it's going to run through each
of these in order to produce,

90
00:05:32.470 --> 00:05:35.430
recursively to produce,
some type of end result.

91
00:05:35.430 --> 00:05:37.470
So let's talk about this.

92
00:05:37.470 --> 00:05:41.240
Rather than take the two objects,
let's do something really weird.

93
00:05:42.710 --> 00:05:45.810
Let's take that crazy case
where we had a boolean

94
00:05:45.810 --> 00:05:49.130
compared to an object with a toString.

95
00:05:49.130 --> 00:05:52.187
We used a valueOf in the example we're
gonna use a toString in this example,

96
00:05:52.187 --> 00:05:54.760
returning our 1.

97
00:05:54.760 --> 00:05:56.960
Why this returns true?

98
00:05:56.960 --> 00:05:57.790
So let's walk through this.

99
00:05:57.790 --> 00:06:00.429
The first thing we're gonna
come to is we're gonna say hey,

100
00:06:00.429 --> 00:06:01.730
are these two types the same?

101
00:06:01.730 --> 00:06:05.980
In this case they're not,
one is a boolean, one's an object.

102
00:06:05.980 --> 00:06:07.820
So it's gonna say no.

103
00:06:07.820 --> 00:06:11.304
So the next step is gonna
say hey are both null or

104
00:06:11.304 --> 00:06:16.470
undefined and see and say no that's
not that's not the case we're at yet.

105
00:06:16.470 --> 00:06:19.520
Do we have a string being
compared to a number?

106
00:06:19.520 --> 00:06:21.050
Again false.

107
00:06:21.050 --> 00:06:23.630
Do we have a boolean being
compared to anything?

108
00:06:23.630 --> 00:06:28.000
This is a condition we can pass like
okay now we're on the right track.

109
00:06:28.000 --> 00:06:31.820
Let's pass this into our
little state machine, and

110
00:06:31.820 --> 00:06:36.850
we're convert our Boolean true,
it's gonna spit out a 1.

111
00:06:36.850 --> 00:06:40.250
That's the only thing that we can
really do in the state machine.

112
00:06:40.250 --> 00:06:42.290
We're gonna take true,
we're gonna convert it to a 1.

113
00:06:42.290 --> 00:06:48.730
And then we're going to recursively
call the same == comparison,

114
00:06:48.730 --> 00:06:54.150
except now we're gonna say 1 compared
to the object toString, function 1.

115
00:06:54.150 --> 00:06:57.650
Then we start this whole machine
over again, are the types the same?

116
00:06:57.650 --> 00:06:59.930
Nope, are they both null or

117
00:06:59.930 --> 00:07:04.930
undefined, still not there yet,
do have a string equal to a number?

118
00:07:04.930 --> 00:07:07.630
Not quite,
do we have boolean equal to anything?

119
00:07:07.630 --> 00:07:09.990
No, we're gonna get to go
one level deeper this time.

120
00:07:09.990 --> 00:07:12.960
Do we have an object equal to a string or
a number?

121
00:07:12.960 --> 00:07:15.200
Yes this is the case we're at.

122
00:07:15.200 --> 00:07:17.250
So what we're going to do
is in a call toString or

123
00:07:17.250 --> 00:07:20.592
a valueOf, we happen to have
a toString method on our object.

124
00:07:20.592 --> 00:07:24.040
And we're gonna compare the number or

125
00:07:24.040 --> 00:07:28.930
string, our case is a number to whatever
is returned from these methods.

126
00:07:28.930 --> 00:07:34.510
So now we are gonna get 1
== "1" because we happened

127
00:07:34.510 --> 00:07:41.890
to pass an object with a toString function
when invoked will return a string 1.

128
00:07:41.890 --> 00:07:45.560
This is our clever little trick.

129
00:07:45.560 --> 00:07:50.610
We're gonna start the whole
process over with 1 == "1".

130
00:07:50.610 --> 00:07:53.460
Are the types the same?

131
00:07:53.460 --> 00:07:55.490
Still no, both null or undefined?

132
00:07:56.510 --> 00:07:58.070
Do have a string equal to a number?

133
00:07:59.300 --> 00:08:02.740
Yes, so now we're gonna go
back to our state machine and

134
00:08:02.740 --> 00:08:05.390
what we're gonna do you can see down
here at the bottom we have a string.

135
00:08:05.390 --> 00:08:08.469
We're gonna convert the string to
either a number or not a number.

136
00:08:09.660 --> 00:08:14.869
In this case the string 1
can be converted to a 1,

137
00:08:14.869 --> 00:08:18.110
so we're gonna get 1 == 1.

138
00:08:18.110 --> 00:08:21.055
We're not done yet, we have to
start the whole mission over again.

139
00:08:21.055 --> 00:08:23.250
1 == 1, are the types the same?

140
00:08:23.250 --> 00:08:26.000
Yes, call === internally.

141
00:08:26.000 --> 00:08:31.540
That's what this machine is gonna do and
eventually, now 1 === 1.

142
00:08:31.540 --> 00:08:34.470
It's gonna do the comparisons and
say yeah you're the same thing.

143
00:08:34.470 --> 00:08:37.510
Finally, after I measure
how my slides that was

144
00:08:37.510 --> 00:08:39.790
to get through this
machine that many times.

145
00:08:39.790 --> 00:08:41.470
This is why it's a performance hit.

146
00:08:42.920 --> 00:08:46.130
And why you're gonna get
unexpected behavior.

147
00:08:46.130 --> 00:08:51.280
Expected if you have this kind of
memorized and internalized, which I don't.

148
00:08:51.280 --> 00:08:58.190
But still gonna be, you don't wanna
base any kind of validation or

149
00:08:58.190 --> 00:09:02.080
any kind of condition
logic at all on this.

150
00:09:02.080 --> 00:09:04.620
This is exactly why you don't use ==.

151
00:09:04.620 --> 00:09:07.400
The performance footprint of a ===,
this is the graph.

152
00:09:07.400 --> 00:09:10.760
Are the types the same?

153
00:09:11.830 --> 00:09:15.850
Yes or no, if they're not saying
that is false, stops right there.

154
00:09:15.850 --> 00:09:18.390
These types are the same
is it a primitive?

155
00:09:18.390 --> 00:09:21.130
Compare the values, not compare
the addresses and then you're done.

156
00:09:22.240 --> 00:09:24.790
This is complex as it's going to get for
===.

157
00:09:26.115 --> 00:09:34.076
== is that crazy state machine
to answer your question.

158
00:09:34.076 --> 00:09:36.062
&gt;&gt; Speaker 4: So
would you never use the ==?

159
00:09:36.062 --> 00:09:40.284
&gt;&gt; Alexis Abril: I never use the ==,
ever, do you use ==?

160
00:09:40.284 --> 00:09:44.326
&gt;&gt; Speaker 4: When I want to
compare null to undefined.

161
00:09:44.326 --> 00:09:50.137
That's a good place [CROSSTALK] So
they don't have the write.

162
00:09:50.137 --> 00:09:54.217
&gt;&gt; Alexis Abril: Even try to write it out
in the type of you know the one you've

163
00:09:54.217 --> 00:09:54.959
already.

164
00:09:54.959 --> 00:09:57.465
&gt;&gt; Speaker 4: So
what you're going to [CROSSTALK].

165
00:09:57.465 --> 00:10:02.290
No I want to write Foo === null or
Foo === undefined.

166
00:10:02.290 --> 00:10:07.530
It's just nicer to write Foo == null or
undefined, right?

167
00:10:07.530 --> 00:10:08.030
Then you get both.

168
00:10:11.530 --> 00:10:16.040
&gt;&gt; Speaker 4: And you'll see that in a lot
of libraries, it's kinda an accepted.

169
00:10:16.040 --> 00:10:22.875
There's an exception in JSLint or
something for doing that.

170
00:10:22.875 --> 00:10:24.096
&gt;&gt; Alexis Abril: A flag,
you mean for allowing it.

171
00:10:24.096 --> 00:10:25.280
&gt;&gt; Speaker 4: Yeah, yeah.

