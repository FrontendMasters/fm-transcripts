WEBVTT

1
00:00:00.000 --> 00:00:03.932
[MUSIC]

2
00:00:03.932 --> 00:00:06.281
&gt;&gt; Alexis Abril: For those that are just
joining us, we had a little transition,

3
00:00:06.281 --> 00:00:08.150
my name's Alexis Abril.

4
00:00:08.150 --> 00:00:09.640
We're gonna talk a little bit about

5
00:00:10.760 --> 00:00:14.460
fundamental constructs in
the language in JavaScript.

6
00:00:14.460 --> 00:00:16.803
Everybody's favorite part, data types,

7
00:00:16.803 --> 00:00:19.980
what kind of keywords we're going to use,
what they mean.

8
00:00:19.980 --> 00:00:24.590
We're gonna go through a little bit of
the groundwork as we start to build up

9
00:00:24.590 --> 00:00:26.600
our knowledge of the language.

10
00:00:27.600 --> 00:00:31.540
So first off we have our basic data types.

11
00:00:31.540 --> 00:00:37.013
You can think of these as
the chemistry of JavaScript.

12
00:00:37.013 --> 00:00:41.214
These are divided into two categories,
we have our primitive and object,

13
00:00:41.214 --> 00:00:43.550
or composite data types.

14
00:00:43.550 --> 00:00:45.900
Every language is gonna
have this kind of set up.

15
00:00:45.900 --> 00:00:49.400
JavaScript is a little
unique in a few areas.

16
00:00:49.400 --> 00:00:53.410
One, everybody is pretty much familiar
with a string, what that refers to.

17
00:00:53.410 --> 00:00:55.993
In JavaScript we have undefined, and null.

18
00:00:55.993 --> 00:01:01.034
This is kinda nice, but they are somewhat
confused, and mixed up from time to time,

19
00:01:01.034 --> 00:01:05.436
especially if you'er using something
double equals null or undefined,

20
00:01:05.436 --> 00:01:08.240
a lot of that will trip people up.

21
00:01:08.240 --> 00:01:12.710
Undefined is actually gonna refer to a
pointer that points, that hasn't been set.

22
00:01:12.710 --> 00:01:15.890
It's, by the literal definition
has not been defined yet,

23
00:01:15.890 --> 00:01:21.560
we have not set this variable,
var foo;, this will be undefined.

24
00:01:21.560 --> 00:01:23.340
Or if you're trying to use any kind

25
00:01:24.390 --> 00:01:27.530
of variable in memory that
just hasn't been set yet.

26
00:01:28.550 --> 00:01:30.983
Null is actually referring
to the null pointer.

27
00:01:30.983 --> 00:01:33.153
I like to think of it as,

28
00:01:33.153 --> 00:01:38.590
if you come across null in
a piece of code, it's by intent.

29
00:01:39.600 --> 00:01:42.840
Something has manually
set this to be null,

30
00:01:42.840 --> 00:01:47.420
versus undefined which hasn't been
declared, maybe it's a mistake.

31
00:01:47.420 --> 00:01:50.680
Null is typically that
0x0 in any kind of stack.

32
00:01:51.730 --> 00:01:55.100
Booleans and strings,
we're pretty much familiar with those.

33
00:01:55.100 --> 00:01:59.370
Numbers in JavaScript,
we have numbers as opposed to

34
00:01:59.370 --> 00:02:03.850
like a statically typed integer or
floating point, or big ints.

35
00:02:03.850 --> 00:02:08.050
Numbers are,
in this case it's gonna be an integer,

36
00:02:08.050 --> 00:02:09.770
but typically referred to as floats.

37
00:02:10.880 --> 00:02:16.260
And then we have our composite types,
objects which is our hash.

38
00:02:16.260 --> 00:02:18.124
It's our key value pairs.

39
00:02:18.124 --> 00:02:20.130
We're gonna get deeper into
what objects can really be.

40
00:02:21.160 --> 00:02:25.871
We have arrays, which is just a slightly
more advanced object construct,

41
00:02:25.871 --> 00:02:29.773
we're gonna show a little bit
what that looks like in memory.

42
00:02:29.773 --> 00:02:35.380
Dates, datetimes, everybody has
a date construct of some point.

43
00:02:35.380 --> 00:02:40.230
Regular expressions, which I'm sure
everybody's favorite for using or

44
00:02:40.230 --> 00:02:43.120
solving problems, or adding problems
depending on how you look at it.

45
00:02:44.130 --> 00:02:49.905
And functions, functions are kinda unique
as we're talking about earlier functions,

46
00:02:49.905 --> 00:02:54.820
our first class in JavaScript, we had
the literal definition of what that means.

47
00:02:54.820 --> 00:02:59.204
We're really gonna get to
experiment with how powerful and

48
00:02:59.204 --> 00:03:03.333
how expansive functions can be,
do we have questions?

49
00:03:03.333 --> 00:03:05.803
Yes, go for it.
&gt;&gt; Speaker 2: What about NaN and

50
00:03:05.803 --> 00:03:08.846
also the ES6 symbols?
&gt;&gt; Alexis Abril: Not a number,

51
00:03:08.846 --> 00:03:11.753
we're not gonna talk
about any ES6 symbols.

52
00:03:11.753 --> 00:03:16.484
I'm assuming you're talking about
things like bracket syntax and

53
00:03:16.484 --> 00:03:20.313
those types of operands.
&gt;&gt; Speaker 2: Symbol's actually a-

54
00:03:20.313 --> 00:03:22.478
&gt;&gt; Speaker 3: No, we're sticking

55
00:03:22.478 --> 00:03:26.891
to the well supported image.
&gt;&gt; Alexis Abril: Yeah.

56
00:03:26.891 --> 00:03:28.297
&gt;&gt; Speaker 3: Symbols isnâ€™t in most

57
00:03:28.297 --> 00:03:34.222
browsers yet, a year from now.
&gt;&gt; Alexis Abril: That's true, that's true,

58
00:03:34.222 --> 00:03:41.432
most of what we're gonna cover is
kind of just the cross browser,

59
00:03:41.432 --> 00:03:46.520
the most modern acceptance of a standard.

60
00:03:46.520 --> 00:03:50.401
If that's a way to phrase that,
something that's applicable across all

61
00:03:50.401 --> 00:03:51.542
environments.
&gt;&gt; Speaker 3: And

62
00:03:51.542 --> 00:03:56.547
then not a number is a number,
just returns false, returns true when

63
00:03:56.547 --> 00:04:01.225
you put it through is not a number,
the function is not a number.

64
00:04:01.225 --> 00:04:03.552
[CROSSTALK]
&gt;&gt; Alexis Abril: For the mic,

65
00:04:03.552 --> 00:04:07.824
the question was,
what about the not a number type?

66
00:04:07.824 --> 00:04:11.280
It is a number was the response for

67
00:04:11.280 --> 00:04:14.422
the people at home.
&gt;&gt; Speaker 4: And if you do interject,

68
00:04:14.422 --> 00:04:17.204
can you speak loudly?
&gt;&gt; Speaker 3: Yeah, I'll try to, thanks.

69
00:04:17.204 --> 00:04:18.219
&gt;&gt; Alexis Abril: Cool,

70
00:04:18.219 --> 00:04:23.304
any other questions, good so far?

71
00:04:23.304 --> 00:04:28.600
Right on, so these are our basic types,
these are basic constructs.

72
00:04:28.600 --> 00:04:31.510
So if you're thinking of
this as the chemistry,

73
00:04:31.510 --> 00:04:37.330
maybe we have a little bit more of like
the physics of what makes things possible,

74
00:04:37.330 --> 00:04:39.750
what brings these constructs together.

75
00:04:39.750 --> 00:04:43.870
Those are our operators, we are not
gonna go through every reserved word

76
00:04:43.870 --> 00:04:46.700
in the language, but we're gonna
touch a few of the big ones here.

77
00:04:46.700 --> 00:04:48.789
var, this is how we declare variables,

78
00:04:48.789 --> 00:04:51.374
remember JavaScript is
a weakly typed language.

79
00:04:51.374 --> 00:04:55.551
So we don't care necessarily about the
type on the left side instead of saying

80
00:04:55.551 --> 00:04:56.075
int foo.

81
00:04:56.075 --> 00:04:58.116
We care about the value
it's being assigned to.

82
00:04:58.116 --> 00:05:00.790
So here we're just declaring a pointer,
just undefined.

83
00:05:01.880 --> 00:05:05.480
new, this is how we're
gonna create new objects,

84
00:05:05.480 --> 00:05:07.880
based on some kind of
constructing function.

85
00:05:07.880 --> 00:05:11.090
In this case maybe Foo is a constructor.

86
00:05:11.090 --> 00:05:14.264
If we really wanna invoke this
it'd be new Foo open close.

87
00:05:14.264 --> 00:05:17.940
So Foo and
then the calling of the Foo function.

88
00:05:19.100 --> 00:05:23.040
Assignment, this is, we're talking
about the equals operator, we're taking

89
00:05:23.040 --> 00:05:27.912
a pointer and actually assigning
an address to that variable in memory.

90
00:05:27.912 --> 00:05:33.892
So we're gonna tell, in this case, we have
some objects, some hash representation

91
00:05:33.892 --> 00:05:39.000
in our memory stack, and we're gonna
point to the foo its own address.

92
00:05:39.000 --> 00:05:40.620
This is weird, when I'm saying addresses,

93
00:05:40.620 --> 00:05:43.070
we actually have a visual
here in a couple slides.

94
00:05:43.070 --> 00:05:46.451
We're gonna take foo's pointer and
point it to this object somewhere else in

95
00:05:46.451 --> 00:05:50.036
memory.
&gt;&gt; Alexis Abril: Same thing if you

96
00:05:50.036 --> 00:05:51.450
have foo.bar.

97
00:05:51.450 --> 00:05:53.600
foo.bar is its own place in memory, and

98
00:05:53.600 --> 00:05:57.970
we're gonna point it to some new,
to some other reference which is valid.

99
00:05:59.150 --> 00:06:02.885
delete, delete is a special key word.

100
00:06:02.885 --> 00:06:07.445
An easy way to describe this from a high

101
00:06:07.445 --> 00:06:13.130
level is it does exactly what it sounds.

102
00:06:13.130 --> 00:06:17.360
What it really does, the delete,

103
00:06:18.450 --> 00:06:22.170
the deleting of a pointer or

104
00:06:22.170 --> 00:06:26.140
a reference in this case,
is really just an observance of behavior.

105
00:06:26.140 --> 00:06:27.408
It's not actually what's,

106
00:06:27.408 --> 00:06:30.307
there's no real deleting necessarily
going on behind the scenes.

107
00:06:30.307 --> 00:06:34.610
And we'll show what that
means here in a second too.

108
00:06:34.610 --> 00:06:36.060
We have our member assignments.

109
00:06:36.060 --> 00:06:39.040
If you're using the dots or
if you've seen the bracket syntax.

110
00:06:39.040 --> 00:06:41.830
How many people have never seen
this bracket syntax before?

111
00:06:41.830 --> 00:06:45.013
We have a bracket and
then a string within that.

112
00:06:45.013 --> 00:06:47.114
Is everyone familiar with that?

113
00:06:47.114 --> 00:06:51.291
These are actually doing the same
exact thing, but this is a really,

114
00:06:51.291 --> 00:06:52.830
really nice feature.

115
00:06:52.830 --> 00:06:55.190
We're all probably familiar with
seeing this in array notation.

116
00:06:56.220 --> 00:07:00.120
You can do this in object
notation as well, to look for

117
00:07:00.120 --> 00:07:02.987
any property that is on a given object.

118
00:07:02.987 --> 00:07:06.241
And then we have our call,
call is this first line here,

119
00:07:06.241 --> 00:07:09.955
this open closed paren whenever
you're invoking a function.

120
00:07:09.955 --> 00:07:14.473
.call is just invoking a function
that's a member of another object.

121
00:07:14.473 --> 00:07:19.215
We're gonna get into why that
distinction is important as well.

122
00:07:19.215 --> 00:07:24.174
And then we have our comparison operators,
==, ===, greater than,

123
00:07:24.174 --> 00:07:28.690
not equals to, all kinds of
different comparison operators.

124
00:07:28.690 --> 00:07:34.220
Double and triple are a very,
very important distinction.

125
00:07:34.220 --> 00:07:38.190
Many of us have probably at
least heard along the grapevine,

126
00:07:38.190 --> 00:07:41.880
we shouldn't use ==,
we should always use ===.

127
00:07:41.880 --> 00:07:46.290
One's faster than the other, but
we're not really sure why that is.

128
00:07:46.290 --> 00:07:50.346
We're gonna show you why exactly that is,
and what kind of performance impact

129
00:07:50.346 --> 00:07:53.726
something as simple as using one
comparison operator or the other

130
00:07:53.726 --> 00:07:56.238
will have on your applications, so.
&gt;&gt; Speaker 3: I'd like to

131
00:07:56.238 --> 00:07:57.305
interject two things.

132
00:07:57.305 --> 00:07:59.244
You should be interjecting on me too.

133
00:07:59.244 --> 00:08:03.166
You don't have to use the parentheses
with the new operator.

134
00:08:03.166 --> 00:08:10.048
They're optional and then delete,
just to kind of rephrase a little bit,

135
00:08:10.048 --> 00:08:15.195
it deletes a property and
we'll will see it in a second.

136
00:08:15.195 --> 00:08:16.815
It doesn't actually delete the data.

137
00:08:16.815 --> 00:08:19.186
So if there's a foo bar
equals some big object,

138
00:08:19.186 --> 00:08:21.275
it doesn't actually delete the object.

139
00:08:21.275 --> 00:08:25.203
It deletes a reference to the object, and
we'll see what that means in a minute.

140
00:08:25.203 --> 00:08:26.020
&gt;&gt; Alexis Abril: Yes.

