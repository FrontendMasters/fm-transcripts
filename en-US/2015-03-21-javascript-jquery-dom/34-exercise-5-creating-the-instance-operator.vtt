WEBVTT

1
00:00:00.000 --> 00:00:04.108
[MUSIC]

2
00:00:04.108 --> 00:00:12.420
&gt;&gt; Alexis Abril: One final exercise for
this suite of prototype base concepts.

3
00:00:12.420 --> 00:00:18.720
One of really important thing
we need to do especially

4
00:00:18.720 --> 00:00:23.430
when you're setting up your own
custom chains is check whether or

5
00:00:23.430 --> 00:00:28.380
not the object you're dealing with is
an instance of something you would expect.

6
00:00:28.380 --> 00:00:32.390
Or maybe you have a condition to
say if it's a shape throw it into

7
00:00:33.810 --> 00:00:35.240
our 2D algorithms.

8
00:00:35.240 --> 00:00:37.940
If it's a sphere throw
it in our 3D algorithms.

9
00:00:37.940 --> 00:00:40.530
Whatever you have to do but
there's a lot of good reasons to check for

10
00:00:40.530 --> 00:00:45.350
instance of if you want to see if
something is an array you wanna probably

11
00:00:45.350 --> 00:00:50.150
use something like type of a key word
like type of isn't going to give us what

12
00:00:50.150 --> 00:00:52.520
the actual information that we need.

13
00:00:52.520 --> 00:00:57.880
But if we have an actual array we
can say is a instance of array and

14
00:00:57.880 --> 00:00:58.810
this will give us true or false.

15
00:00:58.810 --> 00:01:04.320
So we don't want that same
functionality here in our case.

16
00:01:04.320 --> 00:01:08.940
We're checking to see if
our newly created person

17
00:01:08.940 --> 00:01:12.890
was constructed from
our person constructor.

18
00:01:12.890 --> 00:01:18.370
Is a little p or little person
an instance of capital P person?

19
00:01:20.640 --> 00:01:22.270
So this is gonna be our exercise.

20
00:01:23.318 --> 00:01:28.055
We wanna createa function called
instance of it's going to

21
00:01:28.055 --> 00:01:32.601
take two arguments one is
the object we want to compare and

22
00:01:32.601 --> 00:01:37.620
two is the constructor we want to
compare it to is this object has

23
00:01:37.620 --> 00:01:44.184
this object being constructed from this
constructor not necessarily directly.

24
00:01:44.184 --> 00:01:47.918
We're going to have to
check the proto chain,

25
00:01:47.918 --> 00:01:51.660
because is Person
an instance of base object?

26
00:01:54.710 --> 00:01:55.718
Yes, right?

27
00:01:55.718 --> 00:01:58.560
Is Person an instance of array?

28
00:02:00.250 --> 00:02:02.504
No, that's one branch, it isn't.

29
00:02:02.504 --> 00:02:06.510
This person an instance of big person?

30
00:02:08.310 --> 00:02:13.820
Yes, so your gonna have to walk up
the proto chain to check a few properties.

31
00:02:13.820 --> 00:02:18.679
Let you're verbalizing this what
does instance of need to do for us.

32
00:02:26.905 --> 00:02:31.093
&gt;&gt; Alexis Abril: You don't have to give
me the actual syntax or the actual,

33
00:02:31.093 --> 00:02:33.924
just using our little graph over here.

34
00:02:33.924 --> 00:02:39.169
&gt;&gt; Speaker 2: True or
false base on whether it's not class.

35
00:02:40.650 --> 00:02:43.820
Instance of it was created
with a certain constructor.

36
00:02:45.480 --> 00:02:50.103
&gt;&gt; Alexis Abril: Yeah, we wanna check if,

37
00:02:50.103 --> 00:02:53.684
I kinda wanna draw.

38
00:02:53.684 --> 00:02:57.380
If you're gonna walk up the proto chain.

39
00:02:57.380 --> 00:03:02.860
So imagine we have little person, little
p, which is just an object in space.

40
00:03:02.860 --> 00:03:06.710
It's proto property points
to person's prototype,

41
00:03:06.710 --> 00:03:09.600
that's the first thing it points to.

42
00:03:09.600 --> 00:03:12.790
The second, then it's approaching
goes on to point to base object.

43
00:03:13.790 --> 00:03:18.460
What we want to check as we move up the
proto chain, is this constructor function?

44
00:03:18.460 --> 00:03:20.210
What we expect.

45
00:03:20.210 --> 00:03:23.170
So we're passing in a function here big P,
Person.

46
00:03:24.220 --> 00:03:29.220
When we walk up the proto chain is this
prototypes constructor what we expect,

47
00:03:30.460 --> 00:03:35.020
if it is then we are an instance,
if it isn't keep walking up

48
00:03:35.020 --> 00:03:40.040
the proto chain until you find
something that matches or

49
00:03:40.040 --> 00:03:41.538
until you reach the end
of the ptoto chain.

50
00:03:46.195 --> 00:03:47.840
&gt;&gt; Alexis Abril: Does that make sense?

51
00:03:47.840 --> 00:03:50.240
This method will return a Boolean.

52
00:03:50.240 --> 00:03:54.360
It'll be true or false,
true if it's found, false if it isn't.

53
00:03:54.360 --> 00:03:55.890
&gt;&gt; Speaker 2: I think
you said it backwards.

54
00:03:55.890 --> 00:03:59.050
You were saying this
prototype's constructor

55
00:03:59.050 --> 00:04:00.850
instead of this constructor's prototype.

56
00:04:04.360 --> 00:04:06.990
&gt;&gt; Alexis Abril: Yes, yes, sorry.

57
00:04:06.990 --> 00:04:13.588
&gt;&gt; Speaker 2: So, basically what you're
doing is you're walking up the proto chain

58
00:04:13.588 --> 00:04:19.820
until the next item in the proto chain
is equal to the constructor function.

59
00:04:19.820 --> 00:04:22.644
Constructor function that's passed in?

60
00:04:22.644 --> 00:04:23.456
&gt;&gt; Alexis Abril: Actually,

61
00:04:23.456 --> 00:04:27.441
the var is false because you
have to do probably both ways.

62
00:04:27.441 --> 00:04:28.888
&gt;&gt; Speaker 2: But not-
&gt;&gt; Alexis Abril: You do it

63
00:04:28.888 --> 00:04:29.951
probably both ways.

64
00:04:29.951 --> 00:04:30.911
&gt;&gt; Speaker 2: No is.

65
00:04:30.911 --> 00:04:34.959
&gt;&gt; Alexis Abril: Okay, fair enough.

66
00:04:34.959 --> 00:04:37.615
&gt;&gt; Speaker 2: Yeah,
it can be not there the constructor part.

67
00:04:37.615 --> 00:04:39.941
&gt;&gt; Alexis Abril: Yeah, fair enough.

68
00:04:42.030 --> 00:04:44.770
Does that condition make sense.

69
00:04:46.736 --> 00:04:48.354
&gt;&gt; Alexis Abril: To everyone?

70
00:04:48.354 --> 00:04:53.010
Does that not make sense at all to you?

71
00:04:53.010 --> 00:04:55.123
&gt;&gt; Speaker 3: I don't understand
the last part that you said.

72
00:04:55.123 --> 00:05:00.510
&gt;&gt; Alexis Abril: Okay, that's a specific
case but we're talking about, when you're

73
00:05:00.510 --> 00:05:06.526
checking your conditions you have access
to the person you have the function and

74
00:05:06.526 --> 00:05:12.390
you have your objects and you have it's
wherever it's proto is pointing to.

75
00:05:13.600 --> 00:05:18.910
So here you can check your
constructor.prototype.

76
00:05:18.910 --> 00:05:21.520
And compare are those
two objects the same,

77
00:05:21.520 --> 00:05:23.750
are they pointing to
the same place in memory.

78
00:05:23.750 --> 00:05:27.640
If they are then where an instance
of that it return true,

79
00:05:27.640 --> 00:05:32.503
if they're not like let's say it's
down here keep walking up the proto

80
00:05:32.503 --> 00:05:36.981
chain until those match or
if they never match just return false.

81
00:05:36.981 --> 00:05:38.227
Does that make sense?

82
00:05:38.227 --> 00:05:39.726
Yeah, okay.

83
00:05:39.726 --> 00:05:43.311
&gt;&gt; Speaker 2: One way of thinking
about it is, if you have a date and

84
00:05:43.311 --> 00:05:48.120
I want to see if it is an INSTANCEOF
object, I would just keep working up

85
00:05:48.120 --> 00:05:52.627
a date instances proto,
until it equalled object.prototype.

