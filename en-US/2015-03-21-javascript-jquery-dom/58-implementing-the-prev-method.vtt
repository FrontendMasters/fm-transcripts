WEBVTT

1
00:00:00.000 --> 00:00:03.903
[MUSIC]

2
00:00:03.903 --> 00:00:05.673
&gt;&gt; Alexis Abril: For
previous since previous is really,

3
00:00:05.673 --> 00:00:08.230
really straightforward,
let's do previous together.

4
00:00:11.470 --> 00:00:15.369
Now we had a bunch of different
traversal DOM properties.

5
00:00:15.369 --> 00:00:18.910
nextSibling is one,
previousSibling is another one.

6
00:00:20.320 --> 00:00:23.430
So just like we did for HTML and

7
00:00:23.430 --> 00:00:27.920
val, the easiest way to kinda do
this is just copy what we have here.

8
00:00:29.230 --> 00:00:34.835
And I'm gonna copy it into our previous,
so I'm gonna say previous,

9
00:00:34.835 --> 00:00:38.930
previous and
this is gonna do the same exact logic.

10
00:00:38.930 --> 00:00:43.560
It's just gonna go in the other
direction from wherever we start.

11
00:00:43.560 --> 00:00:45.347
I'll leave that up for a split second,

12
00:00:45.347 --> 00:00:51.062
hope people are typing it out.
&gt;&gt; Alexis Abril: And

13
00:00:51.062 --> 00:00:55.660
just to make sure this is working,
I'm gonna run over to our test page.

14
00:00:55.660 --> 00:00:59.710
And now you can see we have next and
previous, both chainable.

15
00:00:59.710 --> 00:01:03.504
They're both returning jQuery objects, and

16
00:01:03.504 --> 00:01:07.881
they're both traversing
down the DOM accordingly,

17
00:01:07.881 --> 00:01:16.176
so,
&gt;&gt; Alexis Abril: Okay,

18
00:01:16.176 --> 00:01:19.720
we also have parent and children.

19
00:01:19.720 --> 00:01:21.130
Now parent and children are nice,

20
00:01:21.130 --> 00:01:23.350
because we don't have to keep
moving one way or the other.

21
00:01:24.700 --> 00:01:29.210
Children is really nice,
because now we have that additional

22
00:01:29.210 --> 00:01:34.390
DOM property called children,
so let's do parent first.

23
00:01:34.390 --> 00:01:40.207
So for parent, we're going to need to,
let's think about this verbally first.

24
00:01:40.207 --> 00:01:43.970
We need to,
let's say you have $div.parents.

25
00:01:43.970 --> 00:01:46.580
That's gonna find all
the divs on the page, and

26
00:01:46.580 --> 00:01:52.690
return their parent elements in another
jQuery collection respectively.

27
00:01:52.690 --> 00:01:56.894
So first thing off the bat,
we're going to need our accumulator.

28
00:01:56.894 --> 00:01:58.620
Let me scoot this up the screen for
you guys.

29
00:02:00.750 --> 00:02:02.200
And at the end of this function,

30
00:02:02.200 --> 00:02:08.078
we're going to want to return,
&gt;&gt; Alexis Abril: A jQuery

31
00:02:08.078 --> 00:02:10.090
representation of our array.

32
00:02:12.540 --> 00:02:18.653
We know we are gonna need to iterate
through each element in our collection.

33
00:02:18.653 --> 00:02:21.406
So this, function(i,

34
00:02:21.406 --> 00:02:26.785
el).
&gt;&gt; Alexis Abril: And within this, we need

35
00:02:26.785 --> 00:02:32.570
to find the current element's parent,
and then push it onto our accumulator.

36
00:02:32.570 --> 00:02:36.390
Now this one is pretty straightforward,
I'm gonna type out a comment here.

37
00:02:38.000 --> 00:02:42.990
el is our DOM element, and parentNode

38
00:02:42.990 --> 00:02:46.801
is our DOM property that points
to the parent DOM element.

39
00:02:47.820 --> 00:02:51.734
Can anyone in the room or online think
of what we should put within this

40
00:02:51.734 --> 00:02:56.585
each?
&gt;&gt; Alexis Abril: Anybody at all?

41
00:02:59.613 --> 00:03:01.709
&gt;&gt; Speaker 2: [INAUDIBLE]

42
00:03:01.709 --> 00:03:03.697
&gt;&gt; Alexis Abril: No, if we have,

43
00:03:03.697 --> 00:03:08.244
elements the accumulator will just be

44
00:03:08.244 --> 00:03:12.800
an array of DOM elements that we find.

45
00:03:13.890 --> 00:03:17.561
So el is the current DOM element
that we're at in our collection,

46
00:03:17.561 --> 00:03:18.643
maybe it's an li.

47
00:03:18.643 --> 00:03:24.690
The parent node would be a reference
to that li's parent, a ul most likely.

48
00:03:25.710 --> 00:03:31.890
So what we want to do is push
that ul onto our accumulator.

49
00:03:31.890 --> 00:03:35.680
We want to save it, say hey, this
element that we're on, its parent is ul,

50
00:03:35.680 --> 00:03:37.656
then it's going to move on to the next.

51
00:03:37.656 --> 00:03:40.528
Maybe the next element in
our collection is a div.

52
00:03:40.528 --> 00:03:44.190
Your parent is a body, it's the body tag.

53
00:03:44.190 --> 00:03:49.040
We're gonna go through collecting all
of these parents onto our accumulator.

54
00:03:49.040 --> 00:03:56.958
So for this, all we need to do actually
is elements.push(el.parentNode).

55
00:04:05.440 --> 00:04:08.405
&gt;&gt; Alexis Abril: So let me refresh there,

56
00:04:08.405 --> 00:04:15.113
and now we have passing set
of assertions for parents.

57
00:04:15.113 --> 00:04:16.329
Is there a lot of questions?

58
00:04:16.329 --> 00:04:18.743
Hey Justin can you help me
with questions in the chat?

59
00:04:18.743 --> 00:04:21.313
&gt;&gt; Speaker 3: [INAUDIBLE]

60
00:04:21.313 --> 00:04:22.453
&gt;&gt; Alexis Abril: No, no, no, I mean,

61
00:04:22.453 --> 00:04:27.231
can you hop in the chat?
&gt;&gt; Speaker 3: Yeah.

62
00:04:27.231 --> 00:04:28.079
&gt;&gt; Alexis Abril: We apologize,

63
00:04:28.079 --> 00:04:32.257
we wanna get to events, so we're gonna
start tag teaming this a little bit,

64
00:04:32.257 --> 00:04:33.445
blaze through this.

65
00:04:33.445 --> 00:04:36.017
Okay, was there any questions on,
go ahead.

66
00:04:36.017 --> 00:04:37.181
&gt;&gt; Speaker 4: They want you to you go

67
00:04:37.181 --> 00:04:39.410
through next again.
&gt;&gt; Alexis Abril: Go through next again?

68
00:04:39.410 --> 00:04:40.747
&gt;&gt; Speaker 4: Yeah just walk through how

69
00:04:40.747 --> 00:04:43.444
that works.
&gt;&gt; Alexis Abril: Sure, of course.

70
00:04:43.444 --> 00:04:48.549
This is good to understand, because pretty
much most of these, you can see now,

71
00:04:48.549 --> 00:04:53.750
we're getting to this pattern of finding
an accumulator, or creating an array.

72
00:04:53.750 --> 00:04:57.300
We're gonna accumulate objects,
iterate through them,

73
00:04:57.300 --> 00:05:00.950
and based on some conditions
push onto that array,

74
00:05:00.950 --> 00:05:04.760
and then eventually return a jQuery
representation of that array.

75
00:05:04.760 --> 00:05:08.620
So for this, that's the first
thing we're starting out with.

76
00:05:08.620 --> 00:05:11.418
Let's start maybe from the outside in.

77
00:05:11.418 --> 00:05:15.820
So if you talk about the first part, var
elements = array, this is just where we're

78
00:05:15.820 --> 00:05:18.840
gonna store all the elements that we find,
all the elements that we care about.

79
00:05:20.350 --> 00:05:24.410
Then we're gonna go through
each item in our collection and

80
00:05:24.410 --> 00:05:28.480
we're gonna invoke our conditions on it.

81
00:05:28.480 --> 00:05:32.414
In this case for next, for
each item in our collection,

82
00:05:32.414 --> 00:05:37.700
we want to find its next sibling,
whatever the element right next to it is.

83
00:05:37.700 --> 00:05:43.706
So what we're going to do first is say,
current = el.nextSibling.

84
00:05:43.706 --> 00:05:47.209
Now if the next sibling in our
collection is a DOM element,

85
00:05:47.209 --> 00:05:49.510
this while loop won't even execute.

86
00:05:49.510 --> 00:05:52.861
It's going to come here and
say current, well that exists so

87
00:05:52.861 --> 00:05:54.315
that's going to be true.

88
00:05:54.315 --> 00:06:01.505
current.nodeType !== 1, well,
if it is a DOM node, then it will be 1.

89
00:06:01.505 --> 00:06:07.555
So this will fail, it'll skip the while
loop entirely, say if current,

90
00:06:07.555 --> 00:06:13.120
which does exist, elements.push,
our current element.

91
00:06:13.120 --> 00:06:18.250
So, immediately if the next sibling
is a DOM node, it basically skips

92
00:06:18.250 --> 00:06:23.220
from line 159 all the way down to 166, and
just pushes that DOM node onto the array.

93
00:06:25.240 --> 00:06:31.550
If it isn't a DOM node, maybe it's a text
node, it's gonna start this while loop

94
00:06:31.550 --> 00:06:36.239
until it finds a DOM node, or until it
runs out of nodes that are nextSiblings.

95
00:06:37.530 --> 00:06:40.500
So one of those two conditions
are gonna happen in this loop.

96
00:06:40.500 --> 00:06:45.200
It's either gonna eventually come
to the end of its container, or

97
00:06:45.200 --> 00:06:46.840
it's gonna find something
that we care about.

98
00:06:48.170 --> 00:06:51.980
In either event, once it finishes,

99
00:06:51.980 --> 00:06:55.660
if something was found we
push it onto our array.

100
00:06:55.660 --> 00:06:59.591
And at the end of this,
we return an accumulated array of all of

101
00:06:59.591 --> 00:07:05.965
the nextSiblings in our collection.
&gt;&gt; Alexis Abril: This is

102
00:07:05.965 --> 00:07:10.826
the same thing we do for parent child and
previous, this is just the most complex,

103
00:07:10.826 --> 00:07:14.221
this and previous are the most
complex versions of this.

104
00:07:14.221 --> 00:07:18.647
Because we have to keep going to the
nextSibling, and then the nextSibling, and

105
00:07:18.647 --> 00:07:24.176
so on and so forth.
&gt;&gt; Alexis Abril: I hope that answered some

106
00:07:24.176 --> 00:07:28.475
of the questions there, yes go for it.
&gt;&gt; Speaker 5: Super quick,

107
00:07:28.475 --> 00:07:30.263
could I see the previous function?
&gt;&gt; Alexis Abril: Of

108
00:07:30.263 --> 00:07:35.012
course.
&gt;&gt; Speaker 5: And you're just switching

109
00:07:35.012 --> 00:07:37.084
out the next for the previous, right?
&gt;&gt; Alexis Abril: Exactly,

110
00:07:37.084 --> 00:07:38.880
you're gonna still have
the same starting point,

111
00:07:38.880 --> 00:07:41.820
and you're gonna have the same
conditions and same logic.

112
00:07:41.820 --> 00:07:43.570
You just wanna go into
a different direction.

113
00:07:44.790 --> 00:07:45.290
Good question.

