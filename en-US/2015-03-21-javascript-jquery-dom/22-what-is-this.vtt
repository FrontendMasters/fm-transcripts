WEBVTT

1
00:00:00.000 --> 00:00:04.061
[MUSIC]

2
00:00:04.061 --> 00:00:07.768
&gt;&gt; Alexis: Let's talk about one of
my favorite things to talk about,

3
00:00:07.768 --> 00:00:11.110
which is context specifically,
the this keyword.

4
00:00:12.800 --> 00:00:18.850
I like talking about this, cuz I speak
from a personal experience of pain and

5
00:00:18.850 --> 00:00:22.760
learning what context is, and
how it works in JavaScript.

6
00:00:22.760 --> 00:00:27.558
Originally, I came from a C Sharp
background through Ruby, so this,

7
00:00:27.558 --> 00:00:32.750
this, not this, or both,
was one of the most confusing concepts.

8
00:00:32.750 --> 00:00:35.660
So, we're gonna talk about what
that actually means, but first,

9
00:00:35.660 --> 00:00:39.890
while we gauge the room, feel free if
you're watching online to respond to this.

10
00:00:39.890 --> 00:00:46.150
We're going through some
little audible exercises.

11
00:00:46.150 --> 00:00:50.190
Here's a very simple scenario,
we have a dog object.

12
00:00:51.380 --> 00:00:54.910
Dog has a couple properties as bark count,
which is just gonna be zero, and

13
00:00:54.910 --> 00:00:55.980
bark, which is a function.

14
00:00:57.240 --> 00:01:00.714
Inside this function,
we're gonna say this .barkCount and

15
00:01:00.714 --> 00:01:02.460
we're going to increment it.

16
00:01:03.890 --> 00:01:08.270
So, when we invoke this function,
what is this?

17
00:01:08.270 --> 00:01:09.540
The this key word.

18
00:01:09.540 --> 00:01:11.590
What is it going to point to?

19
00:01:13.130 --> 00:01:14.020
&gt;&gt; Speaker 2: Dog.
&gt;&gt; Alexis: Dog?

20
00:01:14.020 --> 00:01:15.500
How many people say dog?

21
00:01:17.500 --> 00:01:20.300
If you're online,
feel free to type in a dog, or not dog.

22
00:01:20.300 --> 00:01:24.470
They would say they think
anything other than dog.

23
00:01:24.470 --> 00:01:25.939
&gt;&gt; Speaker 2: [COUGH]
&gt;&gt; Speaker 3: No.

24
00:01:25.939 --> 00:01:26.823
&gt;&gt; Alexis: No.

25
00:01:26.823 --> 00:01:28.324
All right.

26
00:01:28.324 --> 00:01:29.830
It is dog.

27
00:01:29.830 --> 00:01:34.560
In this case,
this will point to our dog object.

28
00:01:34.560 --> 00:01:36.840
We're going to get into how
this works here in a second.

29
00:01:38.920 --> 00:01:40.770
Let's change this up slightly.

30
00:01:41.890 --> 00:01:45.480
We have the same dog object, but

31
00:01:45.480 --> 00:01:48.780
instead of calling dog.bark directly,
we're going to create like an alias to it.

32
00:01:48.780 --> 00:01:50.930
We're gonna say var bark equals dog.bark,

33
00:01:50.930 --> 00:01:53.500
and then we're going to
invoke that same function.

34
00:01:54.580 --> 00:01:57.802
In this scenario,
what do you think this points to?

35
00:02:01.311 --> 00:02:02.670
&gt;&gt; Speaker 2: Bark.

36
00:02:02.670 --> 00:02:03.950
&gt;&gt; Alexis: Points to bark.

37
00:02:03.950 --> 00:02:05.260
All right.

38
00:02:05.260 --> 00:02:06.320
Anybody else?

39
00:02:06.320 --> 00:02:07.550
Any other thoughts?

40
00:02:10.510 --> 00:02:11.151
Good points to Kevin.

41
00:02:13.926 --> 00:02:15.223
&gt;&gt; Alexis: Right on.

42
00:02:15.223 --> 00:02:18.780
[LAUGH] Anybody?

43
00:02:18.780 --> 00:02:20.240
Brave enough to take a stab?

44
00:02:22.240 --> 00:02:24.220
It's okay, this is a safe place.

45
00:02:24.220 --> 00:02:25.490
Feel free.

46
00:02:25.490 --> 00:02:27.690
The video will be sent
to your supervisors, so

47
00:02:27.690 --> 00:02:29.740
be careful with your answers.

48
00:02:29.740 --> 00:02:32.640
In this scenario,
this is going to point to the window

49
00:02:34.470 --> 00:02:38.510
that may not be what we expect.

50
00:02:38.510 --> 00:02:41.710
It's very similar code
than what we had prior.

51
00:02:46.090 --> 00:02:49.690
Let's observe a constructor
type of function.

52
00:02:49.690 --> 00:02:54.720
We have a person function,
it can take a name as an argument.

53
00:02:54.720 --> 00:03:01.346
And we're gonna set that argument
to the name property of this,

54
00:03:01.346 --> 00:03:08.599
and this slide to overuse this word,
what do you think this points to?

55
00:03:13.907 --> 00:03:14.740
&gt;&gt; Alexis: Points to that?

56
00:03:14.740 --> 00:03:15.480
Did somebody say that?

57
00:03:15.480 --> 00:03:16.450
That's clever.

58
00:03:16.450 --> 00:03:19.010
I don't think I've heard that before.

59
00:03:19.010 --> 00:03:20.630
What does it point to?

60
00:03:20.630 --> 00:03:22.050
&gt;&gt; Speaker 4: The function object.

61
00:03:22.050 --> 00:03:24.250
&gt;&gt; Alexis: The function object.

62
00:03:24.250 --> 00:03:29.360
What do you mean,
the actual capital F function, or?

63
00:03:29.360 --> 00:03:36.090
&gt;&gt; Speaker 4: Well, I was just thinking
on the [COUGH] the memory space.

64
00:03:36.090 --> 00:03:37.620
Tag and grab the name.

65
00:03:37.620 --> 00:03:39.745
Point it over to that FN.

66
00:03:39.745 --> 00:03:43.086
&gt;&gt; Speaker 2: [CROSSTALK]
&gt;&gt; Alexis: Okay, this points to?

67
00:03:43.086 --> 00:03:46.251
All right.

68
00:03:46.251 --> 00:03:51.894
Few people say P, any other person,
like capital P person.

69
00:03:51.894 --> 00:03:55.720
Okay, right on.

70
00:03:55.720 --> 00:04:00.070
It is, in this case,
it will point to p, little p.

71
00:04:00.070 --> 00:04:02.050
The instance of our person.

72
00:04:04.810 --> 00:04:09.550
This is weird, I know, don't worry,
we're gonna circle back to this.

73
00:04:09.550 --> 00:04:13.730
Okay, let's change that,
we're gonna use that same code.

74
00:04:13.730 --> 00:04:17.380
We're just gonna take out the new keyword.

75
00:04:17.380 --> 00:04:20.650
In this case,
we're gonna invoke the same function.

76
00:04:20.650 --> 00:04:23.212
We're gonna say var p equals person,

77
00:04:23.212 --> 00:04:27.490
Justin Meyer, as opposed to
a new person in this scenario.

78
00:04:27.490 --> 00:04:32.720
What do you think that this key
word refers to or points to rather?

79
00:04:35.240 --> 00:04:36.560
&gt;&gt; Speaker 2: Window?
&gt;&gt; Alexis: Window, window?

80
00:04:39.050 --> 00:04:40.125
Any other brave souls?

81
00:04:40.125 --> 00:04:42.298
&gt;&gt; Speaker 2: Person.

82
00:04:42.298 --> 00:04:44.471
&gt;&gt; Alexis: Person?

83
00:04:44.471 --> 00:04:47.035
Right on.

84
00:04:47.035 --> 00:04:49.700
In this case, it will be the window.

85
00:04:52.230 --> 00:04:55.060
Okay.
We're going to do one more,

86
00:04:55.060 --> 00:04:56.650
I think one more example.

87
00:04:56.650 --> 00:04:58.590
This one's a little bit out there.

88
00:04:58.590 --> 00:05:01.680
How many people have seen
the methods call and apply?

89
00:05:01.680 --> 00:05:02.680
Well, let me rephrase.

90
00:05:02.680 --> 00:05:04.610
How many of you have not seen
the methods call and apply?

91
00:05:04.610 --> 00:05:06.025
No, never heard of this.

92
00:05:06.025 --> 00:05:09.600
Okay, this is going to be fun.

93
00:05:09.600 --> 00:05:11.700
Call and apply is a really, really cool,

94
00:05:11.700 --> 00:05:14.560
bring it to the really gritty
details of what these do.

95
00:05:14.560 --> 00:05:17.470
Really cool methods to
just invoke other methods.

96
00:05:17.470 --> 00:05:18.910
It's a way to invoke other methods.

97
00:05:18.910 --> 00:05:19.739
We'll talk about the behaviors.

98
00:05:20.870 --> 00:05:23.300
Here we have our dog objects.

99
00:05:24.670 --> 00:05:28.200
First, but we're also gonna
have a cat object defined.

100
00:05:28.200 --> 00:05:31.870
And cat will have a bark count of zero,
because cats don't bark.

101
00:05:31.870 --> 00:05:33.620
So, cat will have a bark count of zero.

102
00:05:34.930 --> 00:05:41.060
Then for those that have seen the call
apply methods, we have a dog.bark.call.

103
00:05:41.060 --> 00:05:43.830
Cat with a one.

104
00:05:43.830 --> 00:05:49.360
In this scenario, what do you
think that this keyword will be?

105
00:05:49.360 --> 00:05:52.590
If you haven't seen call and apply, don't
necessarily get hung up on this too much,

106
00:05:52.590 --> 00:05:55.370
because this probably looks really weird.

107
00:05:55.370 --> 00:05:56.530
&gt;&gt; Speaker 2: Cat.

108
00:05:56.530 --> 00:05:57.030
&gt;&gt; Alexis: Cat?

109
00:06:01.440 --> 00:06:02.820
In this case, it is cat.

110
00:06:04.800 --> 00:06:10.030
So, how many people are really comfortable
with all the slides we just did,

111
00:06:10.030 --> 00:06:11.310
yeah, that makes sense to me?

112
00:06:11.310 --> 00:06:13.700
Is anybody just, this is easy?

113
00:06:13.700 --> 00:06:14.590
Nobody?

114
00:06:14.590 --> 00:06:15.650
Okay.
There's actually,

115
00:06:15.650 --> 00:06:17.440
we're gonna make it really easy.

116
00:06:17.440 --> 00:06:23.040
There's a really simple set of rules that
all of those slides actually followed.

117
00:06:23.040 --> 00:06:24.410
But it's not what we would expect,

118
00:06:24.410 --> 00:06:28.070
especially if you're from a classically
trained, in a statically typed language.

119
00:06:28.070 --> 00:06:31.110
I say classically, I mean class-based
statically typed language.

120
00:06:32.140 --> 00:06:33.670
If you're coming from
that kind of background,

121
00:06:33.670 --> 00:06:36.670
this is gonna be really
really weird to you.

122
00:06:36.670 --> 00:06:38.470
But this has about four simple rules.

123
00:06:39.710 --> 00:06:42.400
One is the call operator.

124
00:06:44.140 --> 00:06:46.400
Actually, I'm going to come
back to that one last.

125
00:06:46.400 --> 00:06:48.170
The dot call.

126
00:06:48.170 --> 00:06:52.820
If you have an object on the left
side of the dot, specifically,

127
00:06:52.820 --> 00:06:58.950
the .call is the dot operator with
an invoked method and invoke function.

128
00:06:58.950 --> 00:07:00.530
So, puppy.bark.

129
00:07:00.530 --> 00:07:02.720
If you're using .call,

130
00:07:02.720 --> 00:07:06.720
this will be set to the object
that's on the left side of the dots.

131
00:07:06.720 --> 00:07:07.414
In this case, puppy.

132
00:07:07.414 --> 00:07:10.760
&gt;&gt; Speaker 2: [COUGH]
&gt;&gt; Alexis: So if you have object.method or

133
00:07:10.760 --> 00:07:13.270
object, you know your
function that you're calling,

134
00:07:13.270 --> 00:07:16.459
that object will be your context,
inside that function.

135
00:07:18.100 --> 00:07:20.160
You have the new keyword.

136
00:07:20.160 --> 00:07:22.330
New keyword,
you say var puppy equals new dog.

137
00:07:23.560 --> 00:07:26.630
If you're invoking a function
like a constructor,

138
00:07:26.630 --> 00:07:30.840
if your using new keyword in front of it,
the context will be

139
00:07:30.840 --> 00:07:34.370
the new object that you're creating and
returning in this function.

140
00:07:34.370 --> 00:07:39.720
So in this case, new dog will create a new
instance of a dog, a puppy, for example.

141
00:07:39.720 --> 00:07:42.323
So the context within
your constructor will be

142
00:07:42.323 --> 00:07:45.849
puppy
&gt;&gt; Alexis: And

143
00:07:45.849 --> 00:07:47.990
finally, you have call and apply.

144
00:07:49.640 --> 00:07:52.730
Call and
apply both do exactly the same thing, but

145
00:07:52.730 --> 00:07:55.850
in JavaScript, if you're familiar with
term method overloading, in JavaScript,

146
00:07:55.850 --> 00:07:59.970
we don't have a method overloading,
it's just whatever's last wins.

147
00:07:59.970 --> 00:08:03.480
So, you had to call, if you have
something with two different signatures

148
00:08:03.480 --> 00:08:06.840
that do the same thing, you have to
call them two different names, call and

149
00:08:06.840 --> 00:08:08.130
apply do the same exact same thing.

150
00:08:08.130 --> 00:08:11.030
I'll talk about the signatures
here in a second.

151
00:08:11.030 --> 00:08:17.590
But what they do is invoke a function
with a context that you specify.

152
00:08:17.590 --> 00:08:20.160
Saying, I want to use this function, and

153
00:08:20.160 --> 00:08:23.570
this inside of it will be
whatever the first argument is.

154
00:08:25.600 --> 00:08:32.250
Now, the signatures for
call will be context, argument one, so.

155
00:08:32.250 --> 00:08:38.220
That number one will be the first argument
that gets passed into the bark function.

156
00:08:38.220 --> 00:08:43.188
So call will be context, argument one,
argument two, argument three.

157
00:08:43.188 --> 00:08:47.918
Apply will be exactly the same thing,
except it'll be context,

158
00:08:47.918 --> 00:08:49.470
array of arguments.

159
00:08:50.640 --> 00:08:53.190
Two different signatures that
do exactly the same thing.

160
00:08:54.230 --> 00:08:58.600
A really succinct way to think
about this is in JavaScript,

161
00:08:59.870 --> 00:09:02.050
functions don't know where they live.

162
00:09:02.050 --> 00:09:03.360
And this is the hardest part

163
00:09:04.750 --> 00:09:08.810
to really grasp if you're coming
from a statically type language.

164
00:09:08.810 --> 00:09:11.590
In JavaScript,
functions don't know where they live.

165
00:09:11.590 --> 00:09:13.920
They only know how they are called.

166
00:09:13.920 --> 00:09:16.390
If you're in C sharp or Java, and

167
00:09:16.390 --> 00:09:21.870
you have a method on the class,
the function does know where it lives.

168
00:09:21.870 --> 00:09:27.620
This will always point to the instance
of that class, but in JavaScript,

169
00:09:27.620 --> 00:09:32.300
up until now, I'm not going to talk
about the class and up and coming.

170
00:09:32.300 --> 00:09:36.980
Up until now,
there is no concept of classes.

171
00:09:36.980 --> 00:09:39.550
This will only point to
one of these three rules.

172
00:09:39.550 --> 00:09:43.480
If none of these three rules apply,
it will point to the window or

173
00:09:43.480 --> 00:09:46.470
the global,
whatever the global object is, a node.

174
00:09:46.470 --> 00:09:48.050
It's not window, it's something else.

175
00:09:48.050 --> 00:09:48.760
But in a browser,

176
00:09:48.760 --> 00:09:51.750
it will point to window if it does
not meet one of those three rules.

177
00:09:55.380 --> 00:09:56.040
Does that make sense?

178
00:09:59.960 --> 00:10:00.760
Okay.

179
00:10:00.760 --> 00:10:01.680
I know that was a lot of.

180
00:10:02.760 --> 00:10:03.480
Yes?

181
00:10:03.480 --> 00:10:08.045
&gt;&gt; Speaker 5: The succinct way I always
say it is it doesn't matter how function

182
00:10:08.045 --> 00:10:11.970
is defined,
it only matters how a function is called.

183
00:10:13.110 --> 00:10:15.360
What matters is what this is gonna be.

184
00:10:15.360 --> 00:10:15.860
&gt;&gt; Alexis: Yeah.

185
00:10:18.640 --> 00:10:21.772
&gt;&gt; Speaker 5: How a function is called is
the most important part, to be honest.

186
00:10:21.772 --> 00:10:22.411
&gt;&gt; Alexis: Only.
&gt;&gt; Speaker 5: Yes.

187
00:10:22.411 --> 00:10:25.319
&gt;&gt; [INAUDIBLE]
&gt;&gt; Alexis: We're talking about

188
00:10:28.205 --> 00:10:29.140
&gt;&gt; Alexis: Yes?

189
00:10:29.140 --> 00:10:31.740
&gt;&gt; Speaker 6: Somebody is asking
why do we need both call and apply?

190
00:10:31.740 --> 00:10:35.180
And then they also just want
you to run through these again.

191
00:10:35.180 --> 00:10:35.980
&gt;&gt; Alexis: Sure, okay.

192
00:10:35.980 --> 00:10:38.980
So, call and
apply goes back to the method overloading.

193
00:10:38.980 --> 00:10:40.440
They do exactly the same thing.

194
00:10:40.440 --> 00:10:41.050
Let me show you.

195
00:10:41.050 --> 00:10:41.890
Let me just write it out.

196
00:10:43.700 --> 00:10:49.010
So, if we wanted to do
dog.bark as the method,

197
00:10:50.660 --> 00:10:53.390
is the function that we want to call,
that we want to invoke,

198
00:10:53.390 --> 00:10:55.100
I'm gonna stop using
the same word over and over.

199
00:10:56.390 --> 00:11:03.750
Let's say our dog equals an object,
bark is some function,

200
00:11:05.970 --> 00:11:11.050
and maybe bark takes account of how
many times we want our dog to bark.

201
00:11:12.260 --> 00:11:19.220
&gt;&gt; Speaker 4: You used a semi colon there.

202
00:11:21.060 --> 00:11:22.160
&gt;&gt; Alexis: Sorry.
Thank you.

203
00:11:22.160 --> 00:11:26.330
We can invoke this with a context
that we specify two ways.

204
00:11:26.330 --> 00:11:31.290
We can say cat, I wanna bark once, or

205
00:11:31.290 --> 00:11:35.030
dog.bark.applycat1.

206
00:11:35.030 --> 00:11:36.800
These two will do exactly the same thing.

207
00:11:38.600 --> 00:11:40.290
It's the signatures that matter.

208
00:11:40.290 --> 00:11:44.668
Because if you're writing something
in C sharp, you could say call,

209
00:11:44.668 --> 00:11:49.010
I'm gonna write C sharp if
it was in JavaScript syntax.

210
00:11:49.010 --> 00:11:50.180
Forgive me.

211
00:11:50.180 --> 00:11:55.800
You could say function int count, and

212
00:11:55.800 --> 00:12:02.004
then right after that, you could
say call function array counters,

213
00:12:02.004 --> 00:12:05.640
something like this.

214
00:12:05.640 --> 00:12:09.090
You can't do any of this in JavaScript,
one will just overwrite the other,

215
00:12:09.090 --> 00:12:12.850
you can't have the same
property twice in JavaScript.

216
00:12:12.850 --> 00:12:14.530
So, no method overloading,

217
00:12:14.530 --> 00:12:18.760
because of that,
you just have to give it a different name.

218
00:12:21.550 --> 00:12:24.230
That's really the only reason why
they have two different names, but

219
00:12:24.230 --> 00:12:26.530
they do exactly the same thing,
just different signatures.

220
00:12:28.340 --> 00:12:31.264
&gt;&gt; Speaker 7: What is the different
between, so there's call and apply, and

221
00:12:31.264 --> 00:12:32.230
there's bind.

222
00:12:32.230 --> 00:12:35.303
How is bind different than call and apply?

223
00:12:35.303 --> 00:12:40.487
&gt;&gt; [SOUND]
&gt;&gt; Alexis: Are you talking about?

224
00:12:40.487 --> 00:12:45.268
&gt;&gt; Speaker 7: No, [INAUDIBLE] it was
prototype.bind function prototype-

225
00:12:45.268 --> 00:12:46.358
&gt;&gt; Alexis: Do you wanna?

226
00:12:46.358 --> 00:12:52.011
&gt;&gt; Speaker 4: When we implement jQueries
proxy, which does the same thing,

227
00:12:52.011 --> 00:12:56.714
you'll probably fully
understand what that does.

228
00:12:56.714 --> 00:13:00.980
&gt;&gt; Alexis: All right.
Was there another question online?

229
00:13:00.980 --> 00:13:03.210
&gt;&gt; Speaker 6: I think we're cut up.

230
00:13:03.210 --> 00:13:04.420
&gt;&gt; Alexis: We're cut up?

231
00:13:04.420 --> 00:13:05.640
Cool.

232
00:13:05.640 --> 00:13:07.126
&gt;&gt; Speaker 5: Just
running through all the-

233
00:13:07.126 --> 00:13:07.872
&gt;&gt; Alexis: Let's do the rules,

234
00:13:07.872 --> 00:13:09.039
that's what the other one Okay.

235
00:13:11.279 --> 00:13:15.920
&gt;&gt; Alexis: So, we have the base rule,
which is if none of the other three

236
00:13:15.920 --> 00:13:20.820
rules apply, if no rule is followed,
it's gonna the window.

237
00:13:20.820 --> 00:13:25.740
So, if you're just invoking a function
by default, it will be the window.

238
00:13:25.740 --> 00:13:29.650
If you're using .callobject
dot some function.

239
00:13:29.650 --> 00:13:30.860
It will be the object.

240
00:13:32.720 --> 00:13:34.060
So, puppy.bark.

241
00:13:34.060 --> 00:13:39.730
This will be puppy, the new keyword,
the new keyword will set the context for

242
00:13:39.730 --> 00:13:44.120
us to whatever newly
created object we have.

243
00:13:44.120 --> 00:13:47.410
So if we say new dog,
this will create a new object in memory.

244
00:13:48.620 --> 00:13:49.390
And we're gonna reference it.

245
00:13:49.390 --> 00:13:51.370
We're gonna point puppy to that, but

246
00:13:51.370 --> 00:13:55.790
inside that function, this will point
to our newly created object as well.

247
00:13:56.790 --> 00:13:58.940
So, puppy in essence at the end of day.

248
00:14:00.690 --> 00:14:01.900
Then we have call and apply.

249
00:14:01.900 --> 00:14:04.630
This is where we can invoke a method, but

250
00:14:04.630 --> 00:14:06.540
hijack it if you wanna
think of it that way.

251
00:14:06.540 --> 00:14:11.380
We can take the method and say I will
invoke this function, but with a context

252
00:14:11.380 --> 00:14:16.280
that I specify, I like the fact that dogs
can bark, and I wanna make my cat bark.

253
00:14:17.280 --> 00:14:18.950
You can do that kind of
stuff in JavaScript.

254
00:14:18.950 --> 00:14:23.530
And this is gonna become really, really
handy, not because you can make cats bark,

255
00:14:23.530 --> 00:14:26.930
but because we can take some really,
really useful methods that we don't want

256
00:14:26.930 --> 00:14:31.960
to implement ourselves, but use their
functionality for our own purposes.

