WEBVTT

1
00:00:00.000 --> 00:00:02.506
&gt;&gt; Alexis Abril: [SOUND] This
is one of those exercises,

2
00:00:02.506 --> 00:00:07.362
where if you're just shown the answer
to it's really, really simple and

3
00:00:07.362 --> 00:00:10.880
it's just like, this just makes sense.

4
00:00:10.880 --> 00:00:14.440
But when you're exposed to this for
the first time or if you're working in

5
00:00:14.440 --> 00:00:17.350
a language, maybe you're not familiar with
all the constructs, this is a really,

6
00:00:17.350 --> 00:00:21.480
really good type of exercise to
understand everything that's going on.

7
00:00:21.480 --> 00:00:25.202
So let's walk through
how this actually works.

8
00:00:28.120 --> 00:00:29.922
&gt;&gt; Alexis Abril: So, let me close this.

9
00:00:32.951 --> 00:00:37.594
&gt;&gt; Alexis Abril: Okay,
so we're gonna have,

10
00:00:37.594 --> 00:00:42.607
let me open my test page as well,

11
00:00:42.607 --> 00:00:47.370
this is over here, JS tests.

12
00:00:47.370 --> 00:00:50.559
All right, got my console and
we got our failing tests, so

13
00:00:50.559 --> 00:00:53.725
I'm just gonna rerun this one
single test over and over.

14
00:00:53.725 --> 00:00:58.933
Okay, so this is the test
we wannna make sure passes.

15
00:00:58.933 --> 00:01:03.830
So the first thing we wanna check is
if our current object actually has

16
00:01:03.830 --> 00:01:06.372
that property we're looking for.

17
00:01:06.372 --> 00:01:08.874
If we have it right then,
then we don't need to go anywhere,

18
00:01:08.874 --> 00:01:10.458
we can just return it to immediately.

19
00:01:10.458 --> 00:01:14.928
So right off the bat, we can say if

20
00:01:14.928 --> 00:01:21.800
obj.hasOwnProperty (prop), then return it,

21
00:01:21.800 --> 00:01:28.530
and then otherwise keep
walking up proto change.

22
00:01:30.350 --> 00:01:35.187
It's always good to verbalize what you're
actually trying to construct cuz once you

23
00:01:35.187 --> 00:01:38.611
verbalize it, once you can get
in this kind of pseudo setup,

24
00:01:38.611 --> 00:01:42.706
finding out the syntax to make sure
you can access or in things actually,

25
00:01:42.706 --> 00:01:45.151
it just comes a little bit more naturally.

26
00:01:45.151 --> 00:01:50.461
So right off the bat,
if our object that we're currently on,

27
00:01:50.461 --> 00:01:57.121
so if person has a name, in which our
case it does, just return it off the bat.

28
00:01:57.121 --> 00:02:01.574
Now this trips people up a lot because
maybe we're not familiar right off

29
00:02:01.574 --> 00:02:06.466
the bat with JavaScript being a dynamic
language, this is still sinking in, so

30
00:02:06.466 --> 00:02:09.987
you might be inclined to do this first,
and this is okay.

31
00:02:09.987 --> 00:02:12.049
This is actually really common.

32
00:02:12.049 --> 00:02:15.808
What this is gonna do, though,
is it's gonna look for

33
00:02:15.808 --> 00:02:20.061
specifically the prop,
like P-R-O-P, property of OBJ,

34
00:02:20.061 --> 00:02:23.910
which in our case isn't gonna exist for
any of this.

35
00:02:23.910 --> 00:02:26.550
What we want is the value of prop.

36
00:02:26.550 --> 00:02:30.450
So we're gonna use our bracket notation.

37
00:02:30.450 --> 00:02:35.797
This will look for any parameter that we
pass in, so this will return person and

38
00:02:35.797 --> 00:02:39.292
name if that's what we're
passing it in our case.

39
00:02:39.292 --> 00:02:41.690
Otherwise, keep walking
up the proto chain.

40
00:02:41.690 --> 00:02:44.400
There's a couple ways to do this,
you could do this with a loop.

41
00:02:44.400 --> 00:02:48.220
Although, I've seen less and
less people even go that route these days,

42
00:02:48.220 --> 00:02:48.960
which is nice.

43
00:02:48.960 --> 00:02:52.419
We're just gonna recurse up,
so I'm gonna say else.

44
00:02:53.790 --> 00:02:58.040
And then we want to invoke our
function that's the first step, right?

45
00:02:58.040 --> 00:03:00.890
We know we wanna do at least that much.

46
00:03:00.890 --> 00:03:07.790
We wanna call ourselves again, except
with obj to walk up the proto chain,

47
00:03:07.790 --> 00:03:11.390
all we wanna do is call it's proto and
then pass the same prop.

48
00:03:13.030 --> 00:03:20.410
This is going to keep looking up and
up and

49
00:03:20.410 --> 00:03:27.240
up every proto's pointer until it finds an
object that satisfies the first condition.

50
00:03:27.240 --> 00:03:28.280
And then it's gonna return it.

51
00:03:29.880 --> 00:03:34.281
Now this at face value like,
we're accomplishing all the test's goals.

52
00:03:34.281 --> 00:03:35.964
So let me save this file.

53
00:03:35.964 --> 00:03:40.000
We're gonna go over to our test,
and refresh and it still fails, and

54
00:03:40.000 --> 00:03:41.400
this is the weird part.

55
00:03:41.400 --> 00:03:45.600
Well, this isn't the weird part, this is
the part where, anytime you're dealing

56
00:03:45.600 --> 00:03:49.830
with a recursive function, you might
get lost in where you actually are.

57
00:03:49.830 --> 00:03:54.739
So let's step through this and
figure out what this problem is.

58
00:03:57.000 --> 00:03:57.870
There you are.

59
00:03:57.870 --> 00:04:00.450
I'm gonna make this smaller so
I can see it first.

60
00:04:03.820 --> 00:04:10.340
Sources, okay, blow this up a little bit.

61
00:04:12.780 --> 00:04:19.160
Okay, I can do that and
we'll do this, okay.

62
00:04:20.500 --> 00:04:24.007
So the first time we come through here,
I think for our tests,

63
00:04:24.007 --> 00:04:26.380
let me see what we're doing in our tests.

64
00:04:27.600 --> 00:04:30.600
Yeah, we're doing person with species and
speak.

65
00:04:30.600 --> 00:04:37.260
So it's not name in our case, we have a
name on the constructor, on the instance.

66
00:04:37.260 --> 00:04:42.675
So the first thing that's gonna

67
00:04:42.675 --> 00:04:47.700
come through is obj and prop.

68
00:04:47.700 --> 00:04:52.494
So the first things that are gonna come
through when we step into this is we're

69
00:04:52.494 --> 00:04:56.772
gonna have our instance of a person
which'll have a name of Alexis and

70
00:04:56.772 --> 00:05:00.210
the prop that we wanna look for
which is species.

71
00:05:00.210 --> 00:05:05.000
Now you can see immediately right
off the bat that this property

72
00:05:05.000 --> 00:05:07.829
doesn't exist on the current object,
we'll have to look for it somewhere.

73
00:05:08.860 --> 00:05:10.590
So we're gonna step through.

74
00:05:10.590 --> 00:05:14.890
So the first condition fails cuz
the object we were on did not have it.

75
00:05:14.890 --> 00:05:18.314
So we're recurse up with
our object's proto and

76
00:05:18.314 --> 00:05:21.251
the same property we're gonna look for.

77
00:05:21.251 --> 00:05:24.714
So let's step into this.

78
00:05:24.714 --> 00:05:30.779
Now we are at the second
level of this .call.

79
00:05:30.779 --> 00:05:34.700
We're gonna say does this object,
you can see it over here on the right.

80
00:05:34.700 --> 00:05:38.270
Does this object have a species property?

81
00:05:38.270 --> 00:05:38.790
And it does.

82
00:05:38.790 --> 00:05:39.740
This is gonna pass.

83
00:05:41.200 --> 00:05:45.160
So we've passed our if statement,
so we're gonna return OBJ prop.

84
00:05:46.230 --> 00:05:47.090
But here's the trick.

85
00:05:48.420 --> 00:05:54.280
It's gonna return to the DOT
function that called it.

86
00:05:54.280 --> 00:05:54.930
Oops.

87
00:05:54.930 --> 00:06:04.800
It's not gonna return all the way
to the front which is right here.

88
00:06:04.800 --> 00:06:09.220
It's not gonna return to
the initial invocation of it.

89
00:06:09.220 --> 00:06:11.270
It's gonna return just one level up.

90
00:06:13.410 --> 00:06:19.010
So, here we need to make sure we return
what the recursive call is doing

91
00:06:21.910 --> 00:06:29.200
and then if I turn this breakpoint off,
play, and now our test passes.

92
00:06:29.200 --> 00:06:33.651
We're able to go all
the way up the proto chain,

93
00:06:33.651 --> 00:06:37.880
find our species property
in this scenario,

94
00:06:37.880 --> 00:06:45.002
return it to the .call object that
initially invoked that recursive step,

95
00:06:45.002 --> 00:06:52.260
and then returned that function's gonna
return all the way to our test case.

96
00:06:58.711 --> 00:07:01.960
&gt;&gt; Alexis Abril: Right there.

97
00:07:01.960 --> 00:07:03.390
Does that make sense?

98
00:07:03.390 --> 00:07:05.300
Let me put up the answer
while I talk about that.

99
00:07:08.640 --> 00:07:13.450
Now there is a case of,
a couple people stumbled on it.

100
00:07:13.450 --> 00:07:15.310
What if nothing has this?

101
00:07:15.310 --> 00:07:20.040
So there is the case of walking all
the way up to where it's gonna be null.

102
00:07:20.040 --> 00:07:23.777
So here if we were really doing this,

103
00:07:23.777 --> 00:07:29.326
we should probably do something
like if obj.proto and

104
00:07:29.326 --> 00:07:35.356
then the actual else case would
just be return undefined for

105
00:07:35.356 --> 00:07:38.450
catching all scenarios.

106
00:07:38.450 --> 00:07:41.371
&gt;&gt; Speaker 2: But
you don't have to put undefined.

107
00:07:41.371 --> 00:07:41.963
&gt;&gt; Alexis Abril: Yeah, that's true.

108
00:07:41.963 --> 00:07:46.128
You could just do this,
an empty function will return undefined.

109
00:07:51.143 --> 00:07:52.744
&gt;&gt; Alexis Abril: Does that make sense?

110
00:07:52.744 --> 00:07:54.900
Does this part make sense,
I really kinda glossed over that.

111
00:07:54.900 --> 00:07:58.580
But if you have a function that doesn't
return anything versus a function that's

112
00:07:58.580 --> 00:08:02.910
explicitly returning undefined,
you don't have to explicitly do this part.

113
00:08:02.910 --> 00:08:08.249
That was just for
maybe an explicit on a set of slides.

114
00:08:11.291 --> 00:08:13.360
&gt;&gt; Alexis Abril: Any questions over this?

115
00:08:13.360 --> 00:08:15.610
It's relatively simple
when you write it out.

116
00:08:15.610 --> 00:08:17.900
It's only a few lines of code.

117
00:08:17.900 --> 00:08:24.840
But it's actually covering
a very different concept.

118
00:08:24.840 --> 00:08:27.340
I don't wanna say complex cuz it's
actually a pretty simple concept.

119
00:08:27.340 --> 00:08:28.940
But if you're coming
from a statically type or

120
00:08:28.940 --> 00:08:33.920
a classical base language, this is weird,
this is very, very different.

121
00:08:34.930 --> 00:08:38.655
Talking about protos and pointers and
prototypes, it gets a little weird.

122
00:08:45.574 --> 00:08:47.419
&gt;&gt; Alexis Abril: Cool?

123
00:08:47.419 --> 00:08:50.350
Okay, oops.

124
00:08:50.350 --> 00:08:51.400
&gt;&gt; Speaker 2: There's a few questions.

125
00:08:55.190 --> 00:09:00.081
&gt;&gt; Alexis Abril: Yes,
where are we in the questions here?

126
00:09:00.081 --> 00:09:03.110
&gt;&gt; Speaker 2: Can you call the function
recursively with this call?

127
00:09:05.398 --> 00:09:07.580
&gt;&gt; Alexis Abril: With this call?

128
00:09:07.580 --> 00:09:10.929
&gt;&gt; Speaker 2: I'm assuming they
just mean the call operator but

129
00:09:10.929 --> 00:09:15.313
I would say that you could use
a call operator called dot dot call,

130
00:09:15.313 --> 00:09:19.560
but the dot function actually
doesn't use the keyword this.

131
00:09:19.560 --> 00:09:22.530
So there's no reason for doing that.

132
00:09:22.530 --> 00:09:26.382
&gt;&gt; Alexis Abril: If you wanted
to set context within dot, yeah.

133
00:09:26.382 --> 00:09:30.820
But we're about to touch
DOT call here in a second.

134
00:09:30.820 --> 00:09:34.250
So that's gonna maybe
clear some of that up, so.

135
00:09:36.260 --> 00:09:37.460
Any questions on this so far?

136
00:09:37.460 --> 00:09:40.080
This is just walking
up the proto chain and

137
00:09:40.080 --> 00:09:44.620
finding a property we're looking for
somewhere on that chain.

138
00:09:44.620 --> 00:09:45.670
That's all this method is doing.

139
00:09:45.670 --> 00:09:48.850
That's all DOT does on its own.

140
00:09:48.850 --> 00:09:53.280
&gt;&gt; Speaker 2: One thing to mention is just
JavaScript is a language of convention.

141
00:09:53.280 --> 00:09:58.030
The proto properly on an object is
really just like every other property.

142
00:09:58.030 --> 00:10:00.130
I put up a foo property on an object.

143
00:10:00.130 --> 00:10:02.580
That's just like putting
a proto property on the object.

144
00:10:02.580 --> 00:10:06.460
The only difference is
that the DOT operator

145
00:10:07.920 --> 00:10:11.290
magically just is programmed
to look at the proto property.

146
00:10:11.290 --> 00:10:13.500
And just keep the walking proto property.

147
00:10:13.500 --> 00:10:18.063
That's it, it's just a normal
property called something weird and

148
00:10:18.063 --> 00:10:22.402
the dot operator works with it
to find stuff, it's that simple.

149
00:10:22.402 --> 00:10:23.487
It's just conventions.

150
00:10:26.733 --> 00:10:28.300
&gt;&gt; Alexis Abril: I like that,
it's a good way to explain that.

151
00:10:30.981 --> 00:10:37.393
&gt;&gt; Alexis Abril: Cool, okay, so
if it hasn't gotten weird enough,

152
00:10:37.393 --> 00:10:43.340
let's take this a little step further.

153
00:10:43.340 --> 00:10:46.200
We were just talking about context and

154
00:10:46.200 --> 00:10:49.969
we were talking about what this could
be in a certain set of situations.

155
00:10:51.370 --> 00:10:54.720
And we said, remember, one of our rules,
do you guys remember our three rules for

156
00:10:54.720 --> 00:10:55.840
setting context?

157
00:10:55.840 --> 00:10:57.210
Can anyone give me the three rules?

158
00:10:58.730 --> 00:10:59.520
Any one of the three rules?

159
00:10:59.520 --> 00:11:02.097
Or four rules, there's a base rule, too.

160
00:11:02.097 --> 00:11:03.819
How do you set this?

161
00:11:03.819 --> 00:11:07.806
What are those rules, anybody?

162
00:11:07.806 --> 00:11:08.930
&gt;&gt; Speaker 3: New.

163
00:11:08.930 --> 00:11:09.490
&gt;&gt; Alexis Abril: The new keyword.

164
00:11:09.490 --> 00:11:10.058
That's one rule.

165
00:11:10.058 --> 00:11:11.823
Good.

166
00:11:11.823 --> 00:11:13.850
Any others?

167
00:11:13.850 --> 00:11:15.739
&gt;&gt; Speaker 4: Call function.

168
00:11:15.739 --> 00:11:16.872
&gt;&gt; Speaker 3: Call apply.

169
00:11:16.872 --> 00:11:21.421
&gt;&gt; Alexis Abril: Call and apply,
if you just call the function,

170
00:11:21.421 --> 00:11:23.368
what is it gonna be?

171
00:11:23.368 --> 00:11:24.146
&gt;&gt; Speaker 4: The window.

172
00:11:24.146 --> 00:11:27.211
&gt;&gt; Alexis Abril: It's gonna be the window,
that's the base case and

173
00:11:27.211 --> 00:11:28.610
what's the last rule?

174
00:11:28.610 --> 00:11:31.440
&gt;&gt; Speaker 3: Dot-
&gt;&gt; Alexis Abril: DOT call, yeah, DOT and

175
00:11:31.440 --> 00:11:33.540
then invoking a function.

176
00:11:33.540 --> 00:11:34.206
Exactly.

177
00:11:34.206 --> 00:11:36.020
DOT call is one of our rules and

178
00:11:36.020 --> 00:11:39.550
it will set context to
whatever's left of the dots.

179
00:11:40.670 --> 00:11:42.719
Okay, that's a really.

180
00:11:42.719 --> 00:11:43.360
Yes, question?

181
00:11:43.360 --> 00:11:46.664
&gt;&gt; Speaker 2: Real quick, somebody's
asking, can you just show where you're

182
00:11:46.664 --> 00:11:49.850
debugging in Chrome,
can you just show how you were doing that?

183
00:11:51.120 --> 00:11:53.600
&gt;&gt; Alexis Abril: Yeah, so
these are Chrome's dev tools.

184
00:11:55.510 --> 00:12:00.580
I'm always on the side of use whatever
browser you're most comfortable with.

185
00:12:00.580 --> 00:12:01.910
Just please make it a modern browser.

186
00:12:03.250 --> 00:12:05.940
I use Chrome,
I'm very comfortable the dev tools.

187
00:12:05.940 --> 00:12:08.850
A lot of the guys on the team or mostly
guys in the team are either Chrome or

188
00:12:08.850 --> 00:12:09.490
Firefox.

189
00:12:09.490 --> 00:12:11.710
Both have really,
really good sets of devs tools.

190
00:12:11.710 --> 00:12:14.080
And the other browsers have really,
really come a long way too.

191
00:12:14.080 --> 00:12:16.990
But for this, this is really really nice.

192
00:12:16.990 --> 00:12:21.030
I pop open a console,
I'm doing this from sources.

193
00:12:21.030 --> 00:12:24.310
If you go to the sources tab,
you can see all the scripts.

194
00:12:24.310 --> 00:12:29.360
All of the resources, you can see on
the left side a folder structure,

195
00:12:29.360 --> 00:12:32.360
this is everything that
this page is requesting.

196
00:12:33.510 --> 00:12:36.540
So in our case, we're requesting
an H.T.M.L. file, that's the page you see.

197
00:12:36.540 --> 00:12:41.029
And we're requesting a J.S. file, that's
what's actually running our tests against.

198
00:12:41.029 --> 00:12:43.445
You might just explain
how you got that up.

199
00:12:43.445 --> 00:12:49.465
Yeah, on a Mac, or you can go to over
here the little hamburger icon, and

200
00:12:49.465 --> 00:12:54.796
you can go down to More tools,
thank you, and Developer tools,

201
00:12:54.796 --> 00:12:59.172
any one of these will open
a particular subsection.

202
00:12:59.172 --> 00:13:03.200
If you're on a Mac, I just press
Cmd+Option+I cuz I have it memorized.

203
00:13:03.200 --> 00:13:04.660
I forgot where it was in the menu for
a second.

204
00:13:07.170 --> 00:13:10.070
And I think Cmd+Option+I will
actually open Firefox as well.

205
00:13:10.070 --> 00:13:11.886
I'm pretty sure the same shortcuts,

206
00:13:11.886 --> 00:13:14.440
everybody's doing the same
shortcuts these days.

207
00:13:14.440 --> 00:13:17.530
This'll open this up,
then you can actually click on the file.

208
00:13:18.530 --> 00:13:21.624
This is nice cuz if you're
familiar with C# and Java,

209
00:13:21.624 --> 00:13:23.960
being able to step through is really nice.

210
00:13:25.080 --> 00:13:29.100
So these browsers make this part really
easy when you wanna see what's going on.

211
00:13:29.100 --> 00:13:30.110
So you can add a breakpoint,

212
00:13:30.110 --> 00:13:33.830
all I did was add a breakpoint over here,
you can add a bunch.

213
00:13:33.830 --> 00:13:35.890
They'll show up over here,
you can see breakpoints,

214
00:13:35.890 --> 00:13:38.360
you can disable them which is nice.

215
00:13:38.360 --> 00:13:40.380
And then I added a few watch expressions.

216
00:13:40.380 --> 00:13:44.570
I'm watching for the O.B.J.
and the prop variables.

217
00:13:44.570 --> 00:13:47.280
You'll notice they're not
available at the moment,

218
00:13:47.280 --> 00:13:50.920
because we're not in the context
of running our page.

219
00:13:50.920 --> 00:13:54.580
So, those only exist because we
have them wrapped in a closure, and

220
00:13:54.580 --> 00:13:58.640
at the time of running,
you'll see what that evaluates to.

221
00:13:58.640 --> 00:14:00.550
So, if we were to just run this again, and

222
00:14:00.550 --> 00:14:05.190
I enabled breakpoints, we can see at
the time of this function's evocation,

223
00:14:05.190 --> 00:14:09.850
I can see, hey, the person is this,
like this, on the screen.

224
00:14:09.850 --> 00:14:11.300
And prop is species.

225
00:14:12.380 --> 00:14:15.160
Which is really, really nice,
especially if you're dealing with loops or

226
00:14:15.160 --> 00:14:18.640
recursive or just a lot of modules,
or a lot of JavaScript on the page,

227
00:14:18.640 --> 00:14:20.690
you wanna see what exactly it is.

228
00:14:20.690 --> 00:14:24.890
Because as a human, it's really hard
to interpret a wall of just text and

229
00:14:24.890 --> 00:14:26.230
know what the output is.

230
00:14:26.230 --> 00:14:30.585
You want to be able to step through and
see, i is not being reassigned,

231
00:14:30.585 --> 00:14:32.813
that's the problem, immediately.

232
00:14:32.813 --> 00:14:34.475
So, this is how we do all that.

233
00:14:34.475 --> 00:14:39.122
And then you can step through,
step over, just like most debuggers and

234
00:14:39.122 --> 00:14:40.524
then play to get out.

235
00:14:47.390 --> 00:14:48.610
&gt;&gt; Alexis Abril: Which is nice.

236
00:14:48.610 --> 00:14:52.140
So familiarize yourself, Chrome or
Firefox, I think have the two most

237
00:14:52.140 --> 00:14:57.370
comfortable sets of dev tools, but they're
all getting pretty good these days.

238
00:14:57.370 --> 00:14:58.100
They're all getting better.

