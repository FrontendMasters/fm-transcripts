WEBVTT

1
00:00:00.000 --> 00:00:04.191
[MUSIC]

2
00:00:04.191 --> 00:00:08.504
&gt;&gt; Alexis Abril: Typeof, so
because JavaScript is weakly typed,

3
00:00:08.504 --> 00:00:15.810
we do sometimes need to figure out what
we're working with for checking arguments.

4
00:00:15.810 --> 00:00:18.023
We wanna validate inputs,
things like that.

5
00:00:18.023 --> 00:00:21.795
We do have a couple of key words or
reserve words to help us out.

6
00:00:21.795 --> 00:00:24.140
Typeof is one of these.

7
00:00:24.140 --> 00:00:27.560
But it can get a little weird as well.

8
00:00:27.560 --> 00:00:32.570
So, here is a basic table of a few
things that we would expect and

9
00:00:32.570 --> 00:00:34.580
a couple things we wouldn't expect.

10
00:00:34.580 --> 00:00:36.110
Typeof undefined.

11
00:00:36.110 --> 00:00:40.020
This is our unreferenced
pointer that we have set up.

12
00:00:41.030 --> 00:00:42.840
Undefined will be undefined.

13
00:00:42.840 --> 00:00:45.450
That's fairly straightforward and
expected.

14
00:00:45.450 --> 00:00:53.000
Typeof null will return object that
is really weird and unexpected.

15
00:00:53.000 --> 00:00:55.543
Typeof Boolean, number,
those are expected.

16
00:00:55.543 --> 00:00:58.500
Not a number, this answers
that question earlier as well.

17
00:00:58.500 --> 00:01:04.360
If you say typeof not a number,
that's gonna return a number which

18
00:01:04.360 --> 00:01:11.740
not a number returning number by
the English definition is a contradiction.

19
00:01:11.740 --> 00:01:15.370
Strings will be strings,
functions will be functions,

20
00:01:15.370 --> 00:01:18.270
even though functions
inherit from objects.

21
00:01:18.270 --> 00:01:22.810
Functions are the special
case in JavaScript.

22
00:01:22.810 --> 00:01:25.170
Arrays will be objects.

23
00:01:25.170 --> 00:01:33.010
What's funny is typeof array being
object is out of this whole table.

24
00:01:34.290 --> 00:01:38.055
Out of any applications I've worked on,
typeof array equals object as a condition

25
00:01:38.055 --> 00:01:40.560
like I wanna make sure
an array is an array.

26
00:01:40.560 --> 00:01:43.550
That's probably the biggest
offender in applications I've seen,

27
00:01:43.550 --> 00:01:46.160
like this if statement is wrong,
it's not gonna be what you expect.

28
00:01:46.160 --> 00:01:50.220
But out of any of the weird

29
00:01:51.370 --> 00:01:56.570
items in this graph, that one makes
the most sense to me for some reason.

30
00:01:56.570 --> 00:02:01.400
Let me show you,
let's talk about what an array looks like.

31
00:02:01.400 --> 00:02:04.660
We'll adhoc here in memory,
I need to pop up an IDE for you.

32
00:02:05.740 --> 00:02:11.570
So, we think of arrays really as this,
very simple kind of set up.

33
00:02:11.570 --> 00:02:12.980
We can make this giant.

34
00:02:12.980 --> 00:02:16.768
This is our basic array.

35
00:02:16.768 --> 00:02:24.384
I'm gonna use letters instead of numbers,
cuz this is gonna get weird, a, b, c.

36
00:02:24.384 --> 00:02:26.143
This is our basic array set up.

37
00:02:26.143 --> 00:02:29.892
But when we say typeof array and
this returns object,

38
00:02:29.892 --> 00:02:33.224
that's a little weird
when we say it aloud, but

39
00:02:33.224 --> 00:02:38.480
let's think about what an array
actually looks like in memory.

40
00:02:38.480 --> 00:02:43.730
So the array construct is just a nice

41
00:02:45.510 --> 00:02:49.280
obstruction for
us to handle this kind of concept.

42
00:02:49.280 --> 00:02:53.117
What it really looks like in memory,
is something more like this.

43
00:02:57.834 --> 00:03:01.794
&gt;&gt; Alexis Abril: And
then we have some stuff like the length.

44
00:03:04.747 --> 00:03:08.381
&gt;&gt; Alexis Abril: And
then we have the really.

45
00:03:11.853 --> 00:03:16.218
&gt;&gt; Alexis Abril: Way up the proto
chain we have stuff like,

46
00:03:16.218 --> 00:03:19.467
really way up the proto chain.

47
00:03:22.829 --> 00:03:24.480
&gt;&gt; Alexis Abril: Slice.

48
00:03:24.480 --> 00:03:27.252
Actually this will be,
if you wanna get technical.

49
00:03:33.288 --> 00:03:33.788
&gt;&gt; Alexis Abril: There we go.

50
00:03:35.530 --> 00:03:39.284
You can think of an array as
looking something like this.

51
00:03:39.284 --> 00:03:43.640
And array is just a hash,
it just happens to have

52
00:03:43.640 --> 00:03:47.344
the keys are just gonna be integers or
numbers, zero, one, two, three.

53
00:03:47.344 --> 00:03:49.120
Those are the indexes of the array,

54
00:03:49.120 --> 00:03:52.550
and those indexes are gonna point to what
values we actually have in the array.

55
00:03:52.550 --> 00:03:56.670
And then we get a bunch of helper
methods and properties like the length.

56
00:03:56.670 --> 00:03:57.920
We walk up our proto chain, and

57
00:03:57.920 --> 00:04:00.690
we're gonna talk about what
that means here in a minute.

58
00:04:00.690 --> 00:04:03.706
And to get a bunch of helper
methods like slice and splice and

59
00:04:03.706 --> 00:04:04.930
all those push and pop.

60
00:04:04.930 --> 00:04:08.274
And you keep walking up proto chain
til it gets to the base object, and

61
00:04:08.274 --> 00:04:12.120
you're gonna have stuff like toString
like the base toString method.

62
00:04:12.120 --> 00:04:15.710
This is what an array
really starts to look like.

63
00:04:15.710 --> 00:04:19.067
So when I say typeof array equals
an object, and like, that makes sense,

64
00:04:19.067 --> 00:04:20.230
it inherits from object.

65
00:04:21.680 --> 00:04:24.127
So typeof is always gonna return.

66
00:04:27.551 --> 00:04:32.435
&gt;&gt; Alexis Abril: A way I think of
it is typeof is always gonna return

67
00:04:32.435 --> 00:04:36.620
the most base type except for functions.

68
00:04:36.620 --> 00:04:41.100
Typeof function will return function,
that's the special case.

69
00:04:41.100 --> 00:04:44.070
So, if you have typeof and
you have a custom

70
00:04:44.070 --> 00:04:48.010
constructed object that you've made,
typeof that object will be object.

71
00:04:49.540 --> 00:04:57.338
Regardless of how many wherever
you inherited that from, etc.

72
00:04:57.338 --> 00:04:58.439
This-
&gt;&gt; Speaker 2: For the most part,

73
00:04:58.439 --> 00:05:00.423
it's returning that hidden type.

74
00:05:00.423 --> 00:05:02.129
&gt;&gt; Alexis Abril: Yes, yes.

75
00:05:02.129 --> 00:05:03.647
[LAUGH] Sorry.

76
00:05:03.647 --> 00:05:08.680
So we're gonna talk about that when we
have a debugger here open in a second too.

77
00:05:08.680 --> 00:05:11.930
So, does that make sense?

78
00:05:11.930 --> 00:05:14.520
So if you really wanna check
if an array is an array.

79
00:05:14.520 --> 00:05:15.997
There's a couple other key words, and

80
00:05:15.997 --> 00:05:17.986
we're gonna get to those here
in a second too [LAUGH].

81
00:05:17.986 --> 00:05:20.090
I don't wanna jump too far ahead.

82
00:05:20.090 --> 00:05:21.380
Any other object?

83
00:05:21.380 --> 00:05:22.245
Yes, go ahead.

84
00:05:22.245 --> 00:05:24.480
&gt;&gt; Speaker 3: Isn't everything in
JavaScript considered an object?

85
00:05:26.110 --> 00:05:30.500
&gt;&gt; Alexis Abril: So, that is a really
commonly way to think of things now,

86
00:05:30.500 --> 00:05:32.530
it's really a popular way to think.

87
00:05:32.530 --> 00:05:35.630
Everything is an object, if you have
a string, you have methods on the string.

88
00:05:36.650 --> 00:05:40.760
I prefer to think of everything in
JavaScript as from my perspective,

89
00:05:40.760 --> 00:05:42.849
I would say everything in
JavaScript is a pointer.

90
00:05:42.849 --> 00:05:47.380
Cuz everything you're working with is
actually just a pointer referencing

91
00:05:47.380 --> 00:05:48.550
something else in memory.

92
00:05:49.620 --> 00:05:54.530
You do have things like
a method on a string.

93
00:05:54.530 --> 00:05:57.630
That's not the same as
creating a new string.

94
00:05:57.630 --> 00:06:01.380
Like if you use the capital
S string construct.

95
00:06:01.380 --> 00:06:03.420
That's gonna return a little
something different.

96
00:06:03.420 --> 00:06:07.675
So I prefer to think at a very,
very base level everything as a pointer,

97
00:06:07.675 --> 00:06:09.040
cuz that's really what
you're working with.

98
00:06:09.040 --> 00:06:12.190
You're working with a bunch of var some
things that are pointing to something

99
00:06:12.190 --> 00:06:13.550
else in memory.

100
00:06:13.550 --> 00:06:15.050
The pointer itself is not an object.

101
00:06:15.050 --> 00:06:16.995
Does that makes sense?

102
00:06:16.995 --> 00:06:17.500
&gt;&gt; Speaker 3: Yeah.

103
00:06:17.500 --> 00:06:19.510
&gt;&gt; Alexis Abril: That's the way
I like to think about things.

104
00:06:19.510 --> 00:06:20.760
Good question though, good question.

