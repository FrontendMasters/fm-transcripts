WEBVTT

1
00:00:00.000 --> 00:00:04.111
[MUSIC]

2
00:00:04.111 --> 00:00:06.681
&gt;&gt; Justin Meyer: So
jQuery has a bind() and

3
00:00:06.681 --> 00:00:11.730
unbind() method that lets you,
this is not right.

4
00:00:11.730 --> 00:00:15.960
You have to pass it a function,
but the same function in memory.

5
00:00:17.490 --> 00:00:23.580
jQuery has a bind and unbind method
that lets you listen to a click event or

6
00:00:23.580 --> 00:00:28.560
any type of event on an element and
also unbind stops listening.

7
00:00:28.560 --> 00:00:29.880
So I'm implement that.

8
00:00:29.880 --> 00:00:31.171
It's pretty easy.

9
00:00:35.811 --> 00:00:38.422
&gt;&gt; Justin Meyer: So
If you guys can walk me through it,

10
00:00:38.422 --> 00:00:43.161
I'm gonna do the each which we all know,
jQuery's always doing.

11
00:00:45.230 --> 00:00:48.074
&gt;&gt; Justin Meyer: And
I'm gonna get the index and the elements.

12
00:00:52.940 --> 00:00:54.714
&gt;&gt; Justin Meyer: So,
what do I need to do for bind?

13
00:01:01.025 --> 00:01:02.200
&gt;&gt; Justin Meyer: Who's
going to be the new Chris?

14
00:01:04.440 --> 00:01:06.112
Who wants it, the title?

15
00:01:06.112 --> 00:01:07.808
&gt;&gt; Student 3: You need to add an addendum.

16
00:01:07.808 --> 00:01:08.530
&gt;&gt; Justin Meyer: Yes.

17
00:01:11.555 --> 00:01:13.490
&gt;&gt; Student: Question was,
what's the third parameter?

18
00:01:14.620 --> 00:01:15.900
And even-
&gt;&gt; Justin Meyer: Yeah, we will talk about

19
00:01:15.900 --> 00:01:18.650
the difference in capture in bubble

20
00:01:18.650 --> 00:01:21.760
does what that third
parameter does in a second.

21
00:01:21.760 --> 00:01:24.200
For now I'm not going talk about.

22
00:01:25.400 --> 00:01:28.370
I will be there a second, so
I'm gonna register handler.

23
00:01:28.370 --> 00:01:32.050
And I'm going to type put false in
because that's what jQuery always

24
00:01:32.050 --> 00:01:36.430
has its false there.

25
00:01:36.430 --> 00:01:39.150
And for
unbind it's going to look the exact same.

26
00:01:40.240 --> 00:01:48.740
I'm just going to write remove
event listener and that's it.

27
00:01:51.800 --> 00:01:55.797
Go through each element bind on it go
through every element again unbind that.

28
00:01:55.797 --> 00:01:57.780
Now, I should say one
important thing here.

29
00:01:57.780 --> 00:02:01.300
If you guys do feel confident,
I implemented jQuery after this.

30
00:02:01.300 --> 00:02:03.629
You don't need jQuery
you can just do the DOM,

31
00:02:03.629 --> 00:02:07.272
understand that jQuery does a lot of
there's a lot more going on in jQuery

32
00:02:07.272 --> 00:02:09.861
than what I'm showing here for
this kind of stuff.

33
00:02:13.362 --> 00:02:15.847
&gt;&gt; Justin Meyer: All right, so.

34
00:02:21.199 --> 00:02:25.480
&gt;&gt; Justin Meyer: So event handlers are
always called back with an event object,

35
00:02:25.480 --> 00:02:26.300
all right?

36
00:02:26.300 --> 00:02:28.030
That's this ev right here.

37
00:02:28.030 --> 00:02:32.200
So whenever I click on something
the function handler is going to call back

38
00:02:32.200 --> 00:02:33.540
with a single argument.

39
00:02:33.540 --> 00:02:36.571
And that's gonna be have
some a lot of data on it.

40
00:02:36.571 --> 00:02:40.570
It's gonna have stuff like what is
the current element who's events are being

41
00:02:40.570 --> 00:02:41.304
dispatched.

42
00:02:41.304 --> 00:02:45.503
What is the target like what
element was actually clicked on,

43
00:02:45.503 --> 00:02:50.990
what type of event was triggered that
kind of stuff a lot of fun stuff.

44
00:02:50.990 --> 00:02:55.804
And even some methods that allow you
to control how that element moves

45
00:02:55.804 --> 00:03:00.701
around cuz when an element is clicked,
it actually like if you click on

46
00:03:00.701 --> 00:03:05.349
an anchor that element will actually
fire off of vents on the body,

47
00:03:05.349 --> 00:03:10.578
anything in between the bot like the
anchor element and the HTML element and

48
00:03:10.578 --> 00:03:15.659
also even fire off a click on the window
so you can control how that flows.

49
00:03:15.659 --> 00:03:18.740
And we'll get into that in a second.

50
00:03:18.740 --> 00:03:22.300
&gt;&gt; Student: There's a couple of
questions that are coming up here.

51
00:03:22.300 --> 00:03:25.490
Is jQuery also taking anonymous functions?

52
00:03:25.490 --> 00:03:30.448
Cuz if you register something anonymously,
you can unbind it?

53
00:03:30.448 --> 00:03:35.125
&gt;&gt; Justin Meyer: So jQuery has some nice
ways of even if you register an element,

54
00:03:35.125 --> 00:03:40.730
that you can, without keeping
a reference to it, you can unbind it.

55
00:03:40.730 --> 00:03:46.900
One way is to, if I did a bind on a ul,
I could just call unbind and

56
00:03:46.900 --> 00:03:54.132
that will unbind all event handlers
jQuery has ever done on that element.

57
00:03:54.132 --> 00:03:57.849
So, yes, you should always
I mean in general it's good

58
00:03:57.849 --> 00:04:03.040
to keep your hammers around so
you can unbind the individual yourself.

59
00:04:03.040 --> 00:04:06.302
But jQuery does have things that
make it easier to deal with.

60
00:04:06.302 --> 00:04:10.877
&gt;&gt; Student: The next question
was does JavaScript support

61
00:04:10.877 --> 00:04:14.519
name spacing on events like jQuery?

62
00:04:14.519 --> 00:04:20.544
&gt;&gt; Justin Meyer: No, it's does not, okay.

63
00:04:24.817 --> 00:04:29.980
&gt;&gt; Justin Meyer: Okay, so let me quickly
go through the different types of events.

64
00:04:37.805 --> 00:04:39.470
&gt;&gt; Justin Meyer: You can have in Chrome.

65
00:04:39.470 --> 00:04:41.809
So there's a bunch of different
events that you can listen to.

66
00:04:45.071 --> 00:04:46.400
&gt;&gt; Justin Meyer: This
page has a lot of them.

67
00:04:47.780 --> 00:04:48.540
I'll try to put this up.

68
00:04:48.540 --> 00:04:49.510
We just kind of cleaned it up.

69
00:04:49.510 --> 00:04:53.720
We'll try to put this up
online at some point.

70
00:04:53.720 --> 00:04:57.590
So these are different types of events.

71
00:04:57.590 --> 00:05:01.670
You can listen to a click event and that
happens when someone clicks on an element

72
00:05:01.670 --> 00:05:05.660
and this is the data that
that click event comes with.

73
00:05:05.660 --> 00:05:08.110
And will go through some of these

74
00:05:08.110 --> 00:05:12.510
Properties were just if you do want to
explore this is a good page to do that.

75
00:05:12.510 --> 00:05:15.740
A double click you can listen to when
someone double clicks context menu when

76
00:05:15.740 --> 00:05:21.500
the right menu comes out,
mouse down as someone hits the down,

77
00:05:21.500 --> 00:05:24.860
mouse up when someone releases the mouse.

78
00:05:25.990 --> 00:05:31.310
Mouseout happens when someone comes
into over an element and then leaves it.

79
00:05:31.310 --> 00:05:32.250
So you can see here I'm leaving,

80
00:05:32.250 --> 00:05:36.800
and mouseover comes when I come
from outside into the element.

81
00:05:38.370 --> 00:05:42.460
Mousemove is someone's moving,
you can see that offset x and

82
00:05:42.460 --> 00:05:46.080
offset y changing like crazy
with every mouse move.

83
00:05:46.080 --> 00:05:48.090
This is good for drag and drop.

84
00:05:48.090 --> 00:05:51.350
Mouseenter, I'll explain
the difference mouseenter and

85
00:05:51.350 --> 00:05:55.990
mouseover and mouseleave and mouseout in
a second but these are kind of similar.

86
00:05:55.990 --> 00:05:57.880
Mouseenter, mouseleave and mouseover,

87
00:05:57.880 --> 00:06:00.460
mouseout but
they do have an important difference.

88
00:06:00.460 --> 00:06:02.469
In general you should always
use mouseenter, mouseleave.

89
00:06:03.910 --> 00:06:06.373
So these are the events that
deal with the mouse moving.

90
00:06:06.373 --> 00:06:10.898
But there's also a bunch of
other events that deal with HTML

91
00:06:10.898 --> 00:06:14.800
events like when someone
selects text input on it.

92
00:06:17.200 --> 00:06:20.850
So I'm not gonna go through
all of these events.

93
00:06:20.850 --> 00:06:21.830
I will put this up so

94
00:06:21.830 --> 00:06:25.990
you can explore the big ones I will
talk about are the change event.

95
00:06:25.990 --> 00:06:30.600
This happens when someone
changes a form value.

96
00:06:32.457 --> 00:06:36.510
&gt;&gt; Justin Meyer: And it loses
focus if it's a normal text field.

97
00:06:36.510 --> 00:06:39.210
Submit happens when someone submits,
clicks a button, or

98
00:06:39.210 --> 00:06:43.170
hits enter key and
input that will submit a form.

99
00:06:43.170 --> 00:06:49.884
Focus and blur, as an element receives
focus or an element loses focus?

100
00:06:49.884 --> 00:06:55.505
&gt;&gt; Student 2: What about normalizing
between mouse events and and touch events?

101
00:06:55.505 --> 00:06:59.220
Is there a good way to do that?

102
00:06:59.220 --> 00:07:01.220
&gt;&gt; Justin Meyer: There are a bunch
of libraries that do it.

103
00:07:02.260 --> 00:07:07.560
I've like,
a lot of people use jQuery mobile.

104
00:07:07.560 --> 00:07:10.650
I've not actually had
the pleasure of using that.

105
00:07:10.650 --> 00:07:15.288
I've done it myself and most of
the projects I've worked on for mobile.

106
00:07:15.288 --> 00:07:20.555
But if other people have
suggestions on good ones.

107
00:07:20.555 --> 00:07:22.020
&gt;&gt; Student 4: jQuery is actually doing
an event normalization tried on.

108
00:07:22.020 --> 00:07:24.160
It's also UI layout but
if you're talking about-

109
00:07:24.160 --> 00:07:25.000
&gt;&gt; Justin Meyer: Who said tap-

110
00:07:25.000 --> 00:07:25.920
&gt;&gt; Student: That way you can have like

111
00:07:25.920 --> 00:07:29.970
a tap that handles clicks,
and touches, and taps, also.

112
00:07:29.970 --> 00:07:30.970
There is a lot of good stuff,

113
00:07:30.970 --> 00:07:34.569
I know caress.js is out there, but
there's just a ton of different libraries.

114
00:07:36.440 --> 00:07:38.090
&gt;&gt; Student 4: Use FastClick, I think.

115
00:07:39.800 --> 00:07:43.780
&gt;&gt; Justin Meyer: That does it on tab,
yeah, there's a bunch, but, yeah.

116
00:07:45.580 --> 00:07:49.250
So, key events, you

117
00:07:51.420 --> 00:07:54.950
can also listen to the keyboard.

118
00:07:54.950 --> 00:07:58.802
So there's a key down event whenever
like the mouse on a down or

119
00:07:58.802 --> 00:08:00.962
that the mouse the key is on a down.

120
00:08:00.962 --> 00:08:05.617
And a press if you're like at
a Windows machine and you hold a key.

121
00:08:05.617 --> 00:08:09.850
It'll keep reading keypresses,
but in Mac by default.

122
00:08:09.850 --> 00:08:14.961
It's only like as the key is
pretty much being written out.

123
00:08:14.961 --> 00:08:18.560
The input event is actually
very similar to that.

124
00:08:18.560 --> 00:08:23.710
The key press on Mac but these behave
differently in Windows I think,

125
00:08:23.710 --> 00:08:25.870
I should have to remember that.

126
00:08:25.870 --> 00:08:30.150
Don't take that literal I have to
remember what the total difference.

127
00:08:30.150 --> 00:08:31.350
I think you can cancel input.

128
00:08:32.840 --> 00:08:40.730
Keyup happens when you when the key
like when the person releases the key.

129
00:08:40.730 --> 00:08:46.358
Ready events happens when the whole body
hit all the HTML has been loaded and

130
00:08:46.358 --> 00:08:50.035
is ready for
you to start manipulating the HTML.

131
00:08:50.035 --> 00:08:52.850
And then finally the difference
between mouseenter and mouseout.

132
00:08:53.910 --> 00:08:58.530
Unless on the left I'm doing mouseenter,
mouseleave which is what you should be

133
00:08:58.530 --> 00:09:02.600
using and on the right I'm
doing mouseover, mouseout.

134
00:09:02.600 --> 00:09:05.540
Look what happens when I do mouseover and
mouseout.

135
00:09:05.540 --> 00:09:12.050
See there's a mouseover event but
there's also a mouseout event on the blue

136
00:09:12.050 --> 00:09:17.380
when I go from here to an inner element
which is almost what you never want.

137
00:09:17.380 --> 00:09:20.770
If you're trying to do like a mouse
over effect or something like that,

138
00:09:20.770 --> 00:09:28.270
you typically don't want the mouse out
when someone goes to an inner element.

139
00:09:28.270 --> 00:09:33.204
Mouseenter and mouseleave, they do what
you expect as I go to an inner element it

140
00:09:33.204 --> 00:09:37.420
doesn't trigger a mouseleave until
I actually leave the element.

141
00:09:38.630 --> 00:09:43.819
So use mouseenter,
mouseleave not the mouseout,

142
00:09:43.819 --> 00:09:47.327
mouse over, so those the events.

143
00:09:47.327 --> 00:09:49.939
&gt;&gt; Student: This page is
actually available in your demos.

144
00:09:49.939 --> 00:09:54.537
jQuery is page for that mouseover
actually has a I think a bugged

145
00:09:54.537 --> 00:09:58.961
version of the same kinda demos,
so be careful on the counter

146
00:09:58.961 --> 00:10:03.408
cuz they have something a little
different on the demo page.

147
00:10:03.408 --> 00:10:08.852
&gt;&gt; Justin Meyer: Now how many of you have
ever wanted to do a form that uses Ajax to

148
00:10:08.852 --> 00:10:16.308
to post to a server, but doesn't actually
refresh the page, probably a lot of you.

149
00:10:16.308 --> 00:10:18.797
Have you ever had it where
like some hit Submit but

150
00:10:18.797 --> 00:10:22.970
it's still the whole page goes is
submitted and goes to another page.

151
00:10:22.970 --> 00:10:28.320
Well that's because the submit event
of a form has a default behavior.

152
00:10:28.320 --> 00:10:31.751
As a default behavior of
getting the forms data and

153
00:10:31.751 --> 00:10:36.490
posting that to a server and going to
a new page just like when you click

154
00:10:36.490 --> 00:10:40.680
the link that it has a default
behavior of going to a new page.

155
00:10:42.500 --> 00:10:47.540
You can prevent these default behaviors
within an element with prevent default.

156
00:10:47.540 --> 00:10:51.225
So this is why if you ever wanna prevent
like allow someone to click on a link but

157
00:10:51.225 --> 00:10:54.571
actually not take them to that page or
allow someone to submit a form but

158
00:10:54.571 --> 00:10:57.974
not actually go to another page,
you'll listen to the submit event and

159
00:10:57.974 --> 00:11:00.380
you'll call event prevent default.

160
00:11:00.380 --> 00:11:03.730
There's a bunch of default
actions this page lists them.

161
00:11:05.170 --> 00:11:09.180
And prevent default is what prevents
all of them for particular event.

162
00:11:09.180 --> 00:11:10.750
So I think I have an example of this.

163
00:11:12.270 --> 00:11:18.100
So you would in your event handler
call event prevent default.

164
00:11:18.100 --> 00:11:21.741
And that's basically and you would
register this event handler, simple.

165
00:11:24.215 --> 00:11:29.825
&gt;&gt; Justin Meyer: So, let's talk
about the event data that comes,

166
00:11:29.825 --> 00:11:33.966
I'm not gonna go into it in detail but

167
00:11:33.966 --> 00:11:39.442
like we showed in this every
event has a lot of data

168
00:11:39.442 --> 00:11:46.654
that you can use like if I held
the shift key while I did a mouseup,

169
00:11:46.654 --> 00:11:53.097
shift key how I just hit 1
million things should be true.

170
00:11:56.314 --> 00:11:59.730
&gt;&gt; Justin Meyer: The most important
ones are the type of the event.

171
00:11:59.730 --> 00:12:02.230
This will be basically
the name you put here.

172
00:12:02.230 --> 00:12:06.740
The target, this is the actual
deepest event that the, or

173
00:12:06.740 --> 00:12:08.740
deepest element that
the event happened on.

174
00:12:08.740 --> 00:12:12.759
So if you have a DOM and
you have a link way deeply,

175
00:12:12.759 --> 00:12:17.680
all right I guess from your guys,
it's way deeply nested.

176
00:12:17.680 --> 00:12:21.327
That's you actually clicked on
that's gonna be the target,

177
00:12:21.327 --> 00:12:26.029
but that event is gonna bubble up and
whatever elements event handlers are being

178
00:12:26.029 --> 00:12:30.190
dispatched that's the current target,
we'll see that in a second.

179
00:12:31.560 --> 00:12:33.843
So there's also for mouse events.

180
00:12:33.843 --> 00:12:38.720
This is kinda I'm gonna skip
the events cuz this is boring.

181
00:12:38.720 --> 00:12:39.820
Let's talk to the good thing.

182
00:12:39.820 --> 00:12:43.410
Let's really understand how event
propagation works in the browser

