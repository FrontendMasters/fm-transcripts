WEBVTT

1
00:00:00.000 --> 00:00:04.032
[MUSIC]

2
00:00:04.032 --> 00:00:08.482
&gt;&gt; Justin Meyer: To read styles, first
we actually do to have a little bit talk

3
00:00:08.482 --> 00:00:12.160
about how styles are applied to a element.

4
00:00:12.160 --> 00:00:15.075
So here in my page let's
say I had a link or

5
00:00:15.075 --> 00:00:18.380
an li list item with
an anchor inside of it.

6
00:00:18.380 --> 00:00:23.424
And I'm gonna have the CSS of
li display: inline-block;.

7
00:00:25.681 --> 00:00:29.380
&gt;&gt; Justin Meyer: I'm gonna
get my li as Doberman.

8
00:00:29.380 --> 00:00:32.959
And if I do Doberman.style.display,

9
00:00:32.959 --> 00:00:37.598
what is that value gonna give me back,
do you think?

10
00:00:37.598 --> 00:00:39.290
&gt;&gt; Speaker 2: To display inline block.

11
00:00:39.290 --> 00:00:42.290
&gt;&gt; Justin Meyer: You would think, display
would give you back inline block, but

12
00:00:42.290 --> 00:00:43.960
it's going to give you
back an empty string.

13
00:00:45.420 --> 00:00:47.588
This style object here on an element,

14
00:00:47.588 --> 00:00:52.669
that's where a lot of times where people
think that it's going to have, it's going

15
00:00:52.669 --> 00:00:57.990
to have all of my element styles that are
applied to it, but that's not the case.

16
00:00:57.990 --> 00:01:02.457
So if I were to get an li the same way,

17
00:01:06.291 --> 00:01:07.579
&gt;&gt; Justin Meyer: And do console.dir on it.

18
00:01:13.084 --> 00:01:18.101
&gt;&gt; Justin Meyer: You can see all of
the style properties are emptied out,

19
00:01:18.101 --> 00:01:21.110
and I'll explain why this is.

20
00:01:21.110 --> 00:01:25.070
Even though, if I had li, if I had
any stylesheet that was styling lis,

21
00:01:25.070 --> 00:01:27.578
these things would still
be all emptied out.

22
00:01:32.518 --> 00:01:33.702
&gt;&gt; Justin Meyer: The reason is,

23
00:01:33.702 --> 00:01:39.274
because there's a different way to
get the computed style of a element.

24
00:01:39.274 --> 00:01:44.138
And there's this kind of complex
way of going about it which is

25
00:01:44.138 --> 00:01:48.537
called
document.defaultView.getComputedStyle,

26
00:01:48.537 --> 00:01:55.540
we'll pass it the element, and get
the style property that you want to read.

27
00:01:55.540 --> 00:02:02.350
This is how you get the actual current
CSS value as kind of coordinated from

28
00:02:02.350 --> 00:02:07.700
the element style property which might be
set, there might be property set here.

29
00:02:07.700 --> 00:02:11.958
And any styles defined in
the style sheets, right?

30
00:02:11.958 --> 00:02:14.441
If you read it this way,
you get what the actual value is.

31
00:02:18.269 --> 00:02:19.086
&gt;&gt; Justin Meyer: The style,

32
00:02:19.086 --> 00:02:24.400
you might be wondering what the heck
is this style object for on elements?

33
00:02:24.400 --> 00:02:27.573
Then if you can't read it,
it's only there so you can write it.

34
00:02:27.573 --> 00:02:31.380
If x is an override to any
styles in your stylesheet, but

35
00:02:31.380 --> 00:02:35.340
it's only there for
JavaScript really to write to.

36
00:02:35.340 --> 00:02:38.590
If you really want to read the full
value you should do it this way.

37
00:02:40.960 --> 00:02:43.260
It's kind of weird but that's how it is.

38
00:02:43.260 --> 00:02:46.913
&gt;&gt; Speaker 3: Or if you created inline
styles, if you can read inline styles.

39
00:02:46.913 --> 00:02:50.834
&gt;&gt; Justin Meyer: You can read them, but
only if that property was set as that

40
00:02:50.834 --> 00:02:56.293
value, actually going to be the actual
value that that element takes on, cool.

41
00:03:01.025 --> 00:03:06.433
&gt;&gt; Justin Meyer: So I'm gonna write jQuery
CSS method, which allows you to write

42
00:03:06.433 --> 00:03:12.320
a style on an element and
also read the style on an element.

43
00:03:12.320 --> 00:03:16.170
And this is gonna work just like
all of these other things have.

44
00:03:16.170 --> 00:03:19.190
To read a style, we're gonna use this, but

45
00:03:19.190 --> 00:03:24.250
to write a style we're gonna use
that style object, make sense?

46
00:03:24.250 --> 00:03:25.070
So I'll do this real quick too.

47
00:03:29.283 --> 00:03:33.848
&gt;&gt; Justin Meyer: So again it's gonna
look just like the code before,

48
00:03:33.848 --> 00:03:37.601
if arguments.length is greater than 1.

49
00:03:37.601 --> 00:03:41.115
&gt;&gt; Speaker 3: One thing I should
point out in the attribute line,

50
00:03:41.115 --> 00:03:42.841
it's missing a return.

51
00:03:42.841 --> 00:03:43.753
&gt;&gt; Justin Meyer: Thank you very much.

52
00:03:47.457 --> 00:03:49.440
&gt;&gt; Justin Meyer: I'm gonna copy this.

53
00:03:49.440 --> 00:03:56.127
So if we're setting, what are we gonna
do to each element that we're setting?

54
00:04:00.712 --> 00:04:02.721
&gt;&gt; Justin Meyer: How do you set a style?

55
00:04:02.721 --> 00:04:06.833
How do you change an individual
element's style properties?

56
00:04:06.833 --> 00:04:09.109
&gt;&gt; Speaker 4: Element.style.

57
00:04:09.109 --> 00:04:14.649
&gt;&gt; Justin Meyer: Element.style, and
then how am I gonna change it, so this is,

58
00:04:14.649 --> 00:04:19.486
if I'm calling this like,
let's copy this code here.

59
00:04:23.070 --> 00:04:26.518
&gt;&gt; Justin Meyer: If I'm calling
the css function with padding,

60
00:04:26.518 --> 00:04:32.033
cssPropName is padding in values,
20 pixels, this is the style object,

61
00:04:32.033 --> 00:04:36.188
how do I set something on it,
how do I set a property on it?

62
00:04:36.188 --> 00:04:43.049
&gt;&gt; Speaker 4: With [cssPropName],
and set that to value.

63
00:04:43.049 --> 00:04:47.030
&gt;&gt; Justin Meyer: Exactly right, so this is
how you can change an element's styles.

64
00:04:49.370 --> 00:04:53.567
Now to read it,
I don't even have this memorized, and

65
00:04:53.567 --> 00:04:56.213
I've written this exercise out so

66
00:04:56.213 --> 00:05:01.167
many times
&gt;&gt; Justin Meyer: What I'm going to do is,

67
00:05:01.167 --> 00:05:05.696
it's document.defaultView.getComputedStyle
with the element, so

68
00:05:05.696 --> 00:05:09.722
I'm gonna do the same kind of
thing where I do return this[0].

69
00:05:09.722 --> 00:05:15.660
And I'm going to pass in the element
whose computed styles I want,

70
00:05:15.660 --> 00:05:22.143
and I'm going to get the property value
that I want to return to the user.

71
00:05:26.017 --> 00:05:28.340
&gt;&gt; Justin Meyer: Makes sense, hopefully.

72
00:05:28.340 --> 00:05:32.370
So again, all that you need to take from
these last ten minutes where I've been

73
00:05:32.370 --> 00:05:36.800
talking, is to read and write attribute
properties directly on an element.

74
00:05:36.800 --> 00:05:41.104
You use these methods or if you're
using jQuery, use its attr method.

75
00:05:41.104 --> 00:05:46.153
And if you're reading the computed
value of CSS, you're gonna use this

76
00:05:46.153 --> 00:05:51.963
computedStyle.getPropertyValue, or
you're going to set the style property.

77
00:05:51.963 --> 00:05:56.384
If you're going direct to the DOM and
if you're going to use

78
00:05:56.384 --> 00:06:00.994
jQuery you can just read this CSS,
you can use the CSS method.

79
00:06:00.994 --> 00:06:04.497
So I'm going to demo all of this real
quick to show you how fun it is.

80
00:06:08.692 --> 00:06:13.590
&gt;&gt; Justin Meyer: Let me refresh,
&gt;&gt; Justin Meyer: I'm

81
00:06:13.590 --> 00:06:17.630
going to get the input.

82
00:06:17.630 --> 00:06:21.390
And I'm gonna change its color to green,

83
00:06:21.390 --> 00:06:26.620
and now it's green even though it's not
very big, but it is green if you can tell.

84
00:06:28.200 --> 00:06:32.895
And then I can set its attribute,

85
00:06:32.895 --> 00:06:39.110
let's just set some data attribute to bar.

86
00:06:40.430 --> 00:06:45.258
Now if I look at this element in the page,

87
00:06:45.258 --> 00:06:50.094
it's got a data-foo attribute of bar.

88
00:06:50.094 --> 00:06:51.550
I can use that to read and write.

