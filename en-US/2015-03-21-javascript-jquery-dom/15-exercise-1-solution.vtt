WEBVTT

1
00:00:00.000 --> 00:00:04.146
[MUSIC]

2
00:00:04.146 --> 00:00:07.710
&gt;&gt; Justin Meyer: All right, thanks
everybody for going through this exercise.

3
00:00:07.710 --> 00:00:11.530
I will say a lot of our
exercises are difficult, right?

4
00:00:11.530 --> 00:00:17.745
They ask you to do things that are what
a lot of times library authors are doing.

5
00:00:17.745 --> 00:00:20.630
So they will be challenging,
but it's good to be challenged.

6
00:00:20.630 --> 00:00:23.240
So if you have questions, please ask.

7
00:00:23.240 --> 00:00:27.113
And if you're feeling like,
this is really hard, it's supposed to be.

8
00:00:27.113 --> 00:00:28.370
We wanna challenge you guys.

9
00:00:28.370 --> 00:00:31.950
We want you to learn to be
better programmers after this.

10
00:00:31.950 --> 00:00:34.980
So I'm gonna through this and
I think we're breaking for lunch.

11
00:00:34.980 --> 00:00:35.480
I believe.

12
00:00:37.240 --> 00:00:41.520
So again, what we want to do is as kinda,

13
00:00:42.860 --> 00:00:46.610
what I want to do is make
a library called make.

14
00:00:46.610 --> 00:00:55.230
That allows me to not have to all that
allows me to create different tags right?

15
00:00:55.230 --> 00:00:57.160
Different elements.

16
00:00:57.160 --> 00:01:02.672
I wanna do it how jQuery
would probably write it.

17
00:01:02.672 --> 00:01:05.040
So there's as little code as possible.

18
00:01:06.650 --> 00:01:11.130
The naive way of doing this
would be right a make.a, and

19
00:01:11.130 --> 00:01:15.228
then just keep writing out
the same code out over and

20
00:01:15.228 --> 00:01:20.309
over again.
&gt;&gt; Justin Meyer: So

21
00:01:20.309 --> 00:01:21.740
this is how I createElement a.

22
00:01:21.740 --> 00:01:26.300
And then I would just essentially copy and
paste this code a bunch of times

23
00:01:28.240 --> 00:01:31.265
every time I want to add a new element.

24
00:01:31.265 --> 00:01:35.342
I'd have to copy and
paste this and create new element.

25
00:01:35.342 --> 00:01:38.940
But the beauty of JavaScript is that
again you can program your program.

26
00:01:42.000 --> 00:01:44.630
That's because it's a dynamic language.

27
00:01:44.630 --> 00:01:46.198
So instead of doing this,

28
00:01:46.198 --> 00:01:52.267
what I'm gonna do is I'm gonna copy those,
&gt;&gt; Justin Meyer: And

29
00:01:52.267 --> 00:01:57.560
copy these tags.
&gt;&gt; Justin Meyer: And

30
00:01:57.560 --> 00:02:02.930
I'm gonna save them in a variable
called tags and make each one string.

31
00:02:07.990 --> 00:02:10.404
It's taking a little bit
because I don't have my mouse.

32
00:02:24.726 --> 00:02:25.355
&gt;&gt; Justin Meyer: Okay, so

33
00:02:25.355 --> 00:02:28.122
I'm gonna create each one of those tags.

34
00:02:28.122 --> 00:02:33.230
And instead of doing this, I'm going
to create a for loop that goes through

35
00:02:33.230 --> 00:02:41.139
every tag.
&gt;&gt; Justin Meyer: I'm

36
00:02:41.139 --> 00:02:43.029
gonna save the tag name.

37
00:02:49.414 --> 00:02:52.653
&gt;&gt; Justin Meyer: And then I'm going to do,

38
00:02:52.653 --> 00:02:59.020
what I might think to do
next is just write make tag.

39
00:02:59.020 --> 00:03:02.020
I'm gonna add a the tag property.

40
00:03:02.020 --> 00:03:02.682
It might be a.

41
00:03:02.682 --> 00:03:03.830
It might be div.

42
00:03:03.830 --> 00:03:09.371
I'm gonna set that equal to a function,
&gt;&gt; Justin Meyer: And now I'm

43
00:03:09.371 --> 00:03:15.671
gonna make that function whatever it's
called return document.createElement and

44
00:03:15.671 --> 00:03:22.276
make it return,
&gt;&gt; Justin Meyer: An element for

45
00:03:22.276 --> 00:03:24.482
that given tag.

46
00:03:24.482 --> 00:03:27.895
Now there's a problem here.

47
00:03:27.895 --> 00:03:33.592
Because tag when it's all said and
done after this for

48
00:03:33.592 --> 00:03:38.287
loop at this point here or
in this test here.

49
00:03:38.287 --> 00:03:42.393
When it's all said and done,
tag is going to be left at

50
00:03:42.393 --> 00:03:46.998
undefined.
&gt;&gt; Justin Meyer: No,

51
00:03:46.998 --> 00:03:50.377
it won't because tags, it'd be left at h4.

52
00:03:50.377 --> 00:03:51.746
Yeah, because it's exiting here.

53
00:03:51.746 --> 00:03:52.808
It's never getting tags.

54
00:03:52.808 --> 00:03:54.040
It'd be left at h4.

55
00:03:54.040 --> 00:03:58.877
So here, I'll only be creating h4
elements and that's not right.

56
00:03:58.877 --> 00:04:01.065
There's a bunch of different
ways solve this problem.

57
00:04:01.065 --> 00:04:06.053
The way that we learn from doing it
with for loops would be to wrap this

58
00:04:06.053 --> 00:04:10.963
in a function,
&gt;&gt; Justin Meyer: That calls

59
00:04:10.963 --> 00:04:15.689
itself,
&gt;&gt; Justin Meyer: And

60
00:04:15.689 --> 00:04:20.923
I'm gonna pass the tag name
to that outer function and

61
00:04:20.923 --> 00:04:30.100
I'm gonna put as tag here
&gt;&gt; Justin Meyer: And

62
00:04:30.100 --> 00:04:33.540
now this code is essentially
creating a bunch of tags.

63
00:04:33.540 --> 00:04:36.360
And if I wanna add another tag someday,
I could

64
00:04:38.030 --> 00:04:42.320
just add to this list very easily and the
function will automatically be generated.

65
00:04:43.460 --> 00:04:44.890
So yeah, I've got my list of tags.

66
00:04:44.890 --> 00:04:49.290
I'm going through each one and I'm
creating a closure just so that the name

67
00:04:49.290 --> 00:04:55.470
of tags stays permanent when this inner
function tries to look up the value.

68
00:04:55.470 --> 00:05:02.290
It's not gonna get some kind of global
tag name, so this is how it works.

69
00:05:02.290 --> 00:05:06.546
How many of you guys
get this a little bit?

70
00:05:06.546 --> 00:05:07.166
&gt;&gt; Speaker 2: Some people get it.

71
00:05:07.166 --> 00:05:08.370
&gt;&gt; Justin Meyer: So some people, okay,

72
00:05:08.370 --> 00:05:09.880
awesome, very good.

73
00:05:09.880 --> 00:05:11.960
Any questions for those who don't?

74
00:05:11.960 --> 00:05:15.730
Things that are confusing about
this that I could explain.

75
00:05:15.730 --> 00:05:20.654
I know I'm holding you up from lunch right
now, but it's sill late to answer any

76
00:05:20.654 --> 00:05:22.794
questions you guys have.
&gt;&gt; Speaker 3: Yeah,

77
00:05:22.794 --> 00:05:27.076
I'm confused about the syntax
with the make brackets tag.

78
00:05:27.076 --> 00:05:29.434
I'm not sure what that's-
&gt;&gt; Justin Meyer: Make this thing?

79
00:05:29.434 --> 00:05:30.144
&gt;&gt; Speaker 3: Yes, exactly.

80
00:05:30.144 --> 00:05:30.929
&gt;&gt; Justin Meyer: Okay, so,

81
00:05:30.929 --> 00:05:32.819
all right, good question.

82
00:05:32.819 --> 00:05:37.213
So Alex has touched on this just very
briefly when he was talking about

83
00:05:37.213 --> 00:05:38.290
the operators.

84
00:05:40.070 --> 00:05:44.181
Objects, like make,
I can assign a make property like foo.

85
00:05:44.181 --> 00:05:48.670
You might have seen that and
I could set that to 2.

86
00:05:48.670 --> 00:05:50.410
That's the dot operator.

87
00:05:50.410 --> 00:05:54.769
There's also an index operator,
which does the same thing if it looks like

88
00:05:54.769 --> 00:05:59.427
this.
&gt;&gt; Justin Meyer: All right?

89
00:05:59.427 --> 00:06:01.975
It'll evaluate whatever's inside of here.

90
00:06:01.975 --> 00:06:04.560
Whatever's inside the brackets.

91
00:06:04.560 --> 00:06:09.490
And whatever that is it'll turn into
a string and set that property to

92
00:06:09.490 --> 00:06:13.287
whatever is on the right hand side.
&gt;&gt; Speaker 3: So it's not interchangeable

93
00:06:13.287 --> 00:06:16.670
with the dot notation though?
&gt;&gt; Justin Meyer: You can't write

94
00:06:16.670 --> 00:06:21.730
make foo like this, but
they do the exact same thing.

95
00:06:21.730 --> 00:06:27.680
It's just this is in some ways like you
can almost think this is a hard coded way.

96
00:06:27.680 --> 00:06:30.330
It's like you're setting
make.foo this way.

97
00:06:30.330 --> 00:06:34.752
I could have a variable
like called propToSet.

98
00:06:37.070 --> 00:06:38.575
&gt;&gt; Justin Meyer: And I could set that foo,

99
00:06:38.575 --> 00:06:45.220
and then I could have propToSet in here,
&gt;&gt; Justin Meyer: Right,

100
00:06:45.220 --> 00:06:47.010
so this is gonna set the foo property.

101
00:06:47.010 --> 00:06:52.264
And if something else later
changed propToSet to,

102
00:06:52.264 --> 00:06:54.959
or before setting to bar.

103
00:06:56.030 --> 00:06:59.660
It would set the bar property to 2.

104
00:06:59.660 --> 00:07:04.560
And I could do even weird,
crazy things, like propToSet,

105
00:07:04.560 --> 00:07:12.292
toString a function that returns,
&gt;&gt; Justin Meyer: baz and

106
00:07:12.292 --> 00:07:13.990
now it would set baz.

107
00:07:16.120 --> 00:07:20.027
So essentially, this is a way to kind
of a variable set a property name.

108
00:07:20.027 --> 00:07:23.320
You don't know which property
you're going to set.

109
00:07:23.320 --> 00:07:25.030
It's gonna be dynamically set.

110
00:07:25.030 --> 00:07:26.970
This is you're always
gonna be selling foo.

111
00:07:28.000 --> 00:07:29.440
Think of it that way.

112
00:07:29.440 --> 00:07:35.764
So that's what we're using here because
we're going through every tag name and

113
00:07:35.764 --> 00:07:39.949
we're assigning those properties that way,
cool.

114
00:07:39.949 --> 00:07:44.753
All right,
Stephen in here showed another way,

115
00:07:44.753 --> 00:07:50.650
which is nicer to look at,
which would be to use the untags.

116
00:07:50.650 --> 00:07:56.620
You can use for each and that will
get called back with each tag name.

117
00:07:58.710 --> 00:08:04.010
And because this tag name
is already gonna be this is

118
00:08:04.010 --> 00:08:06.350
kind of what we're making this
function that we did here.

119
00:08:06.350 --> 00:08:07.550
It's pretty much doing the same thing.

120
00:08:10.020 --> 00:08:15.350
We can just do this and
this is a nicer way of over rating it,.

121
00:08:19.420 --> 00:08:21.550
Well, I think this is how
I would actually write it.

122
00:08:21.550 --> 00:08:23.240
But we have want people to
write it the other way.

123
00:08:23.240 --> 00:08:26.010
Just because we wannamake sure
people understand closures and

124
00:08:26.010 --> 00:08:28.360
the problems with them and
things like that.

125
00:08:28.360 --> 00:08:31.659
So here's another good way of writing it,
but the way you probably should write it.

126
00:08:33.250 --> 00:08:37.680
And this works again because this
function is called for every single tag.

127
00:08:37.680 --> 00:08:40.700
So there is a call object
created with tag in it and

128
00:08:40.700 --> 00:08:44.350
that's what this tag is gonna
look up is this this tag here.

129
00:08:44.350 --> 00:08:46.110
So we're already doing a lot of our work.

130
00:08:47.820 --> 00:08:48.990
Recap of functions.

131
00:08:48.990 --> 00:08:51.689
So what happens whenever
a function is defined?

132
00:08:52.840 --> 00:08:57.340
So whenever a function is defined,
a function object is created in memory.

133
00:08:57.340 --> 00:09:00.540
It has a prototype property
that points to an object and

134
00:09:00.540 --> 00:09:05.460
the function knows about
its parent call object.

135
00:09:05.460 --> 00:09:07.370
So function is define.

136
00:09:07.370 --> 00:09:08.500
It's created memory.

137
00:09:08.500 --> 00:09:09.290
It's got a prototype.

138
00:09:09.290 --> 00:09:11.060
No, it's about its parent.

139
00:09:11.060 --> 00:09:14.977
Those are the only three things you really
need to know whenever you see a function

140
00:09:14.977 --> 00:09:15.963
defined like that.

141
00:09:15.963 --> 00:09:23.160
And when a function is called or
invoked, here are the things happen.

142
00:09:23.160 --> 00:09:25.440
Let me get those things in memory first.

143
00:09:25.440 --> 00:09:29.050
So a function is called,
a new call object is created,

144
00:09:31.290 --> 00:09:33.590
and its arguments are translated.

145
00:09:33.590 --> 00:09:36.948
So in this case, sorry, well, missed it.

146
00:09:36.948 --> 00:09:38.690
Let me do it in the order these are in.

147
00:09:38.690 --> 00:09:40.400
A call is just created.

148
00:09:40.400 --> 00:09:46.050
It's this is set up to point to whatever
this is in that indication function.

149
00:09:46.050 --> 00:09:51.700
So if this is looked up inside FN,
the body of a fn.

150
00:09:51.700 --> 00:09:58.380
It'll make sure it gets a window back,
and then the arguments are translated.

151
00:09:58.380 --> 00:10:03.084
So in this case,
arg1 is gonna point to the same thing

152
00:10:03.084 --> 00:10:07.587
that the me pointer,
me variable's pointing to.

153
00:10:07.587 --> 00:10:12.215
And arg2 is gonna get

154
00:10:12.215 --> 00:10:16.590
its own copy of val.

155
00:10:16.590 --> 00:10:19.950
And then finally,
the function is gonna run and

156
00:10:19.950 --> 00:10:25.590
any variables that are created while the
function is being run are put in there.

