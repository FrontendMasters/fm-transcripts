WEBVTT

1
00:00:00.000 --> 00:00:03.860
[MUSIC]

2
00:00:03.860 --> 00:00:06.620
&gt;&gt; Alexis Abril: Let's talk about dot,
the dot operator.

3
00:00:06.620 --> 00:00:10.870
Here we have, we're gonna visualize
what this code is doing in memory

4
00:00:12.860 --> 00:00:14.120
as we set it up.

5
00:00:14.120 --> 00:00:16.680
So we talk about foo equals object.

6
00:00:16.680 --> 00:00:19.090
We're just creating
a new object in memory.

7
00:00:19.090 --> 00:00:21.124
If you remember from our comparisons,

8
00:00:21.124 --> 00:00:25.060
curly brace double equals curly brace,
we're creating two new objects in memory.

9
00:00:25.060 --> 00:00:28.950
So just using the curly brace syntax,
we have a new object in memory and

10
00:00:28.950 --> 00:00:32.570
we're pointing the foo
pointer to that new object.

11
00:00:34.080 --> 00:00:37.393
Then we gonna call foo.toString.

12
00:00:37.393 --> 00:00:42.880
Now instinctively we kind of know this is
going to work, but our object is empty.

13
00:00:42.880 --> 00:00:49.260
There is no toString method, so how does
it find, how does it invoke toString?

14
00:00:49.260 --> 00:00:54.470
We know this kind of stuff just exist in
space, but it has to be wired up somehow.

15
00:00:54.470 --> 00:00:59.128
So what this is doing behind the scenes,
as we have our foo pointer,

16
00:00:59.128 --> 00:01:02.090
which is pointing to our object in memory.

17
00:01:02.090 --> 00:01:06.197
We're creating,
&gt;&gt; Alexis Abril: We have our,

18
00:01:06.197 --> 00:01:09.330
thought that should have
all come up at once.

19
00:01:09.330 --> 00:01:13.760
We have objects, when I say
capital object, this object here,

20
00:01:13.760 --> 00:01:19.960
this is the base object that everything
inherits from, which is a function.

21
00:01:19.960 --> 00:01:22.500
Object itself is just a pointer
to this function in memory.

22
00:01:23.840 --> 00:01:26.630
This function,
this is gonna lead a little bit.

23
00:01:26.630 --> 00:01:30.270
So hold on, we'll get through this.

24
00:01:30.270 --> 00:01:35.390
As a prototype property which
points to an object in memory.

25
00:01:36.750 --> 00:01:40.370
Its proto will point to null,
this is the base object.

26
00:01:40.370 --> 00:01:43.410
So if you've ever heard
the term proto chaining,

27
00:01:45.190 --> 00:01:50.120
it's walking up its proto property
to look for other properties.

28
00:01:51.480 --> 00:01:53.727
Don't worry, if this is a lot to digest,

29
00:01:53.727 --> 00:01:57.656
we're going to keep diving into this
with prototype base inheritance.

30
00:01:57.656 --> 00:01:59.668
But, this is where toString lives.

31
00:01:59.668 --> 00:02:03.500
toString lives on the base
objects prototype.

32
00:02:04.900 --> 00:02:07.120
Without getting too deep into
prototype-based inheritance,

33
00:02:07.120 --> 00:02:11.320
you can think of, if you're familiar
with the concept of classes.

34
00:02:11.320 --> 00:02:16.170
You can think of a class as the blueprint
for all newly created objects.

35
00:02:16.170 --> 00:02:20.810
You can kind of think at a very abstract
level, you can think of a prototype,

36
00:02:20.810 --> 00:02:24.920
as that same blueprint for
all newly created objects.

37
00:02:24.920 --> 00:02:30.830
So this is the base objects blueprint,
and it has a toString method.

38
00:02:30.830 --> 00:02:35.982
Then what we're doing,
when we created our new object in

39
00:02:35.982 --> 00:02:41.340
memory, all we're doing is
wiring up the proto chain.

40
00:02:41.340 --> 00:02:45.691
We're setting our objects proto
property to the base object.

41
00:02:45.691 --> 00:02:50.293
All newly created objects have a proto
property that point to the base

42
00:02:50.293 --> 00:02:55.150
object by default, because everything
inherits from the base object.

43
00:02:57.170 --> 00:03:01.720
And this is how we find
our toString method.

44
00:03:01.720 --> 00:03:07.000
We start at foo, we say foo.toString,
we start at foo, it points to this object,

45
00:03:07.000 --> 00:03:12.440
and we say,
hey do you have a toString function?

46
00:03:12.440 --> 00:03:14.310
This object doesn't have anything, so

47
00:03:14.310 --> 00:03:17.070
it walks up the proto
chain to the next object.

48
00:03:17.070 --> 00:03:21.080
At the next object it says,
hey do you have a toString function?

49
00:03:21.080 --> 00:03:25.430
It does, and it chooses to return and
then invoke it, cuz we're calling it.

50
00:03:25.430 --> 00:03:29.850
If it didn't, it would walk up
the proto again, hit null and

51
00:03:29.850 --> 00:03:31.800
just return undefined,
we don't have anything.

52
00:03:31.800 --> 00:03:33.973
We've walked all the way
up the proto chain, and

53
00:03:33.973 --> 00:03:36.577
we haven't found any property
that you're looking for.

54
00:03:39.240 --> 00:03:43.475
&gt;&gt; Alexis Abril: Once it finds it,
it returns it, we're invoking it, so

55
00:03:43.475 --> 00:03:49.213
we're creating a new call object, and
this this inside of this call object,

56
00:03:49.213 --> 00:03:54.158
is gonna point to the original
object that we're calling it from,

57
00:03:54.158 --> 00:03:56.927
because we use the .call operator.

58
00:03:58.420 --> 00:04:03.200
So the left side of the dot
is our foo object, so this,

59
00:04:03.200 --> 00:04:07.557
even though toString lives
higher up the chain,

60
00:04:07.557 --> 00:04:12.887
context-wise, this is gonna
to point to our foo objects.

61
00:04:16.672 --> 00:04:18.820
&gt;&gt; Alexis Abril: Yes, question.

62
00:04:18.820 --> 00:04:24.566
&gt;&gt; Speaker 2: There's a question on this,
those in capital letters are concepts?

63
00:04:24.566 --> 00:04:29.603
&gt;&gt; Alexis Abril: Are concepts,
what purpose are you talking about,

64
00:04:29.603 --> 00:04:32.472
like prototype and objects?

65
00:04:32.472 --> 00:04:33.085
&gt;&gt; Speaker 2: Yes.

66
00:04:33.085 --> 00:04:36.000
&gt;&gt; Alexis Abril: Okay so
prototype is actually a pointer.

67
00:04:36.000 --> 00:04:39.923
I think it was just in all caps for
the style.

68
00:04:39.923 --> 00:04:41.688
&gt;&gt; Speaker 2: It should be in lowercase.

69
00:04:41.688 --> 00:04:43.368
&gt;&gt; Alexis Abril: Yeah,
It should be all in lowercase.

70
00:04:47.706 --> 00:04:51.168
&gt;&gt; Alexis Abril: All right, we'll just
change that prototype, there we go.

71
00:04:55.572 --> 00:04:59.790
&gt;&gt; Alexis Abril: Okay, our object
is just wrapped to these circles.

72
00:04:59.790 --> 00:05:02.573
We could just use circles,
I put a label on there, object,

73
00:05:02.573 --> 00:05:06.490
just to say what they are, but
these are the actual objects in memory.

74
00:05:07.550 --> 00:05:10.194
Everything on top of
a little arrow is a pointer.

75
00:05:17.720 --> 00:05:20.137
&gt;&gt; Speaker 2: And
there was a question [INAUDIBLE] this,

76
00:05:20.137 --> 00:05:24.833
when you're using this do, you have to
always think about how you'll be calling

77
00:05:24.833 --> 00:05:27.196
the function in which you're using it?

78
00:05:30.365 --> 00:05:34.538
&gt;&gt; Alexis Abril: Yes and that part is
hard to say, because if you're providing

79
00:05:34.538 --> 00:05:39.226
an API,
&gt;&gt; Alexis Abril: You're still gonna have

80
00:05:39.226 --> 00:05:43.252
just like any arguments, you're gonna
have expectations of how it's used,

81
00:05:43.252 --> 00:05:45.819
but you really wanna think of it just as,
whoops.

82
00:05:52.349 --> 00:05:54.935
&gt;&gt; Alexis Abril: You wanna think of
any kind of function just in their own

83
00:05:54.935 --> 00:05:56.930
sandbox, I would think.

84
00:05:56.930 --> 00:05:59.660
Just like you're passing in arguments,
you can do crazy things like

85
00:05:59.660 --> 00:06:03.710
pass in an object with a toString method,
if you're familiar with that function.

86
00:06:03.710 --> 00:06:05.870
So you could do the same thing with this.

87
00:06:05.870 --> 00:06:12.551
If someone is familiar with
a popular method like array.slice,

88
00:06:12.551 --> 00:06:17.170
we could override the context for
our needs.

89
00:06:17.170 --> 00:06:20.157
That doesn't mean
the author of the slice or

90
00:06:20.157 --> 00:06:25.012
splice methods on array should have
been aware we're gonna do things.

91
00:06:25.012 --> 00:06:30.905
They would just expect this to
be something that they expect.

92
00:06:30.905 --> 00:06:37.310
If that, I feel like I used too many
nondescript words in the description.

93
00:06:37.310 --> 00:06:39.840
&gt;&gt; Speaker 2: I would
just say that you should,

94
00:06:39.840 --> 00:06:43.600
it's good to be aware of what you want,
that what this should be here.

95
00:06:43.600 --> 00:06:47.904
Especially if you're using it, if people
are using your API appropriately.

96
00:06:47.904 --> 00:06:48.854
&gt;&gt; Alexis Abril: Yes.
&gt;&gt; Speaker 2: All right, and

97
00:06:48.854 --> 00:06:50.021
how that works, you should know.

98
00:06:50.021 --> 00:06:53.250
That's why we're training it, however,

99
00:06:53.250 --> 00:06:57.710
you don't have to guard against
unexpected values of this.

100
00:06:57.710 --> 00:07:03.011
Like I could create a prototype function,
something on a prototype

101
00:07:03.011 --> 00:07:08.798
of an object that uses this, calls,
this.name or something like that.

102
00:07:08.798 --> 00:07:12.990
And I shouldn't have to
check if this is actually

103
00:07:12.990 --> 00:07:16.580
an instance of my constructor function.

104
00:07:16.580 --> 00:07:19.919
Or maybe this is the Window, or
this is something that I don't expect and

105
00:07:19.919 --> 00:07:22.500
throw an error or something like that.

106
00:07:22.500 --> 00:07:25.250
I don't think you need
to write code like that.

107
00:07:25.250 --> 00:07:29.590
And you really, really shouldn't, but
it's good to be aware of how this works.

108
00:07:29.590 --> 00:07:30.888
&gt;&gt; Alexis Abril: Yes.

109
00:07:30.888 --> 00:07:32.655
&gt;&gt; Speaker 2: So
then you can steal it, and

110
00:07:32.655 --> 00:07:35.676
like steal functionality for
other things, and

111
00:07:35.676 --> 00:07:40.552
kind of mix in behavior, we'll see how
you can kind of exploit changing this.

112
00:07:40.552 --> 00:07:43.058
But you when you're writing
code that talks to this,

113
00:07:43.058 --> 00:07:44.792
you shouldn't have to worry about.

114
00:07:44.792 --> 00:07:47.610
&gt;&gt; Alexis Abril: I can name,
really quickly,

115
00:07:47.610 --> 00:07:51.683
here we go without going
too far into this.

116
00:07:55.518 --> 00:07:57.348
&gt;&gt; Alexis Abril: When you're
doing checks like that,

117
00:07:57.348 --> 00:08:00.844
when you're checking what this is and
then executing some logic after.

118
00:08:00.844 --> 00:08:06.737
It actually, initially it might feel
like it might make things simpler for

119
00:08:06.737 --> 00:08:08.243
users of your API.

120
00:08:08.243 --> 00:08:14.690
But at the end of the day, it creates
a little bit of a confusion factor.

121
00:08:16.540 --> 00:08:20.196
So we're gonna see
a couple examples of this,

122
00:08:20.196 --> 00:08:24.333
without giving too much away
in the exercises we do.

123
00:08:24.333 --> 00:08:26.710
I'm not sure we're gonna get to it
at the end of today, or tomorrow.

124
00:08:26.710 --> 00:08:29.050
Where we're gonna see
that type of a check,

125
00:08:29.050 --> 00:08:34.260
where you're checking what this is,
what it can be, and then going one way or

126
00:08:34.260 --> 00:08:37.970
branching one way or the other in logic
to execute something in a function.

127
00:08:39.720 --> 00:08:43.958
That's a really abstract way to say,
I agree with Justin, but there is

128
00:08:43.958 --> 00:08:48.707
a situation, a very popular situation
where it's gonna be weird, so, okay.

129
00:08:48.707 --> 00:08:50.645
&gt;&gt; Speaker 2: There's one
more question on proto.

130
00:08:50.645 --> 00:08:53.466
Is proto the particular
instance prototype,

131
00:08:53.466 --> 00:08:56.222
as opposed to the static
objects prototype?

132
00:08:59.634 --> 00:09:02.780
&gt;&gt; Alexis Abril: Is proto
the particular instance?

133
00:09:02.780 --> 00:09:06.260
So, one way to remember protos and
prototypes,

134
00:09:06.260 --> 00:09:09.480
because all this can get really,
really confusing really quickly.

135
00:09:09.480 --> 00:09:14.630
From our perspective, from
the consumers of the API's perspective,

136
00:09:14.630 --> 00:09:16.650
functions have prototypes.

137
00:09:16.650 --> 00:09:20.100
Objects have protos,
it's an easy way to remember this.

138
00:09:20.100 --> 00:09:24.020
Functions have prototypes,
objects have protos.

139
00:09:24.020 --> 00:09:30.380
Object's proto points to whatever
it is inheriting from, this is

140
00:09:30.380 --> 00:09:35.679
the path it's gonna take as it walks
up to look for properties or methods.

141
00:09:37.600 --> 00:09:42.130
A function's prototype is if
you're gonna construct a new,

142
00:09:42.130 --> 00:09:47.020
like if you have a foo object,
and we wanted to create a new,

143
00:09:47.020 --> 00:09:50.530
or a foo as a function or
object, object's on there.

144
00:09:50.530 --> 00:09:56.827
If we wanted to say new object,
we would look at the prototype object,

145
00:09:56.827 --> 00:10:02.186
and this is where we would point
our new object's proto to.

146
00:10:02.186 --> 00:10:06.287
This is how we would set
up our pseudo-inheritance.

147
00:10:06.287 --> 00:10:11.230
It's not true inheritance, it's just
a way to look up properties and methods.

