WEBVTT

1
00:00:00.005 --> 00:00:05.155
So next, we can get into how to
run these tests in a web browser.

2
00:00:05.155 --> 00:00:09.804
The neat thing about what we've been
doing so far with Tape is that,

3
00:00:09.804 --> 00:00:14.861
if we have tests that don't use things
like HTTP servers or any of that kind

4
00:00:14.861 --> 00:00:19.617
of stuff, then it's pretty simple
to get it running in the browser.

5
00:00:19.617 --> 00:00:23.069
Tape internally uses console.log
to print its messages,

6
00:00:23.069 --> 00:00:26.400
which works just as well in
the browser as it does in Node.

7
00:00:26.400 --> 00:00:30.590
So you don't really have to do
very much to get it all working.

8
00:00:30.590 --> 00:00:35.700
So I'm gonna make a second test now,
just something real simple to get started.

9
00:00:35.700 --> 00:00:41.668
So gonna require tape, and
have a bit of code here.

10
00:00:41.668 --> 00:00:51.357
And I'll do just some simple statements,
I don't know, then t.end.

11
00:00:51.357 --> 00:00:57.025
All right, so give it a name if we like,
so here's an extremely simple

12
00:00:57.025 --> 00:01:02.999
test that's just testing arithmetic,
doesn't really test anything.

13
00:01:02.999 --> 00:01:06.134
If I run that in Node, it works.

14
00:01:06.134 --> 00:01:09.428
If I wanna run this in the browser,
there's a few different ways we can do

15
00:01:09.428 --> 00:01:15.073
that, so, Call this browser-test so

16
00:01:15.073 --> 00:01:19.804
that we can,
Differentiate some things a little bit.

17
00:01:19.804 --> 00:01:24.574
All right, so
one way that I can do this is, I can run,

18
00:01:24.574 --> 00:01:28.605
if you npm install this
command browserify,

19
00:01:28.605 --> 00:01:33.271
then you can use browserify
to compile your test into

20
00:01:33.271 --> 00:01:37.319
some code that the browsers
can understand.

21
00:01:37.319 --> 00:01:41.655
So it's gonna walk all of
the require statements in the code

22
00:01:41.655 --> 00:01:44.526
recursively every time it sees a file.

23
00:01:44.526 --> 00:01:50.006
And it's just gonna kind of intelligently
concatenate all of the files that you need

24
00:01:50.006 --> 00:01:55.409
to run the program, if you've written it
in sort of this Node.js CommonJS style,

25
00:01:55.409 --> 00:01:57.047
like we've been doing.

26
00:01:57.047 --> 00:02:00.679
So if we wanted to put this in a browser,

27
00:02:00.679 --> 00:02:05.425
you can redirect that output to a file,
like this.

28
00:02:07.719 --> 00:02:15.161
And then you can make just some scaffold
HTML that has a script tag in it, like so.

29
00:02:19.573 --> 00:02:23.658
And if I go to this location
in a web browser, and

30
00:02:23.658 --> 00:02:28.370
I open up the index.js,
it's gonna be an empty page.

31
00:02:28.370 --> 00:02:33.980
But if I open up the debugger,
I can see that hey, look, TAP version 13.

32
00:02:33.980 --> 00:02:37.012
And we see all of the messages that we
were seeing on the command line, and

33
00:02:37.012 --> 00:02:37.770
the test worked.

34
00:02:39.140 --> 00:02:41.588
It's a bit of an awkward way to
run your tests, so of course,

35
00:02:41.588 --> 00:02:42.891
there's some better options.

36
00:02:42.891 --> 00:02:46.750
But this is sort of a really barebones
way to do this kind of stuff.

37
00:02:46.750 --> 00:02:49.710
Just to show you how you could build
your own test runner, for example.

38
00:02:51.480 --> 00:02:54.710
Some other ways that
we could run this are,

39
00:02:54.710 --> 00:02:58.250
could use a tool called budo,
which I'll be using a bit after lunch.

40
00:02:59.400 --> 00:03:04.570
So you could either do it for
a single file, or

41
00:03:04.570 --> 00:03:07.150
you can run it for
a whole directory of tests.

42
00:03:07.150 --> 00:03:10.200
If you have a test directory,
you can run budo like this.

43
00:03:12.020 --> 00:03:14.750
Now I go to that URL that
it tells me to go to.

44
00:03:14.750 --> 00:03:17.022
It's blank, but that's what I expect.

45
00:03:17.022 --> 00:03:21.787
I go into the debugger, and
we have all of these messages.

46
00:03:21.787 --> 00:03:26.432
So there's some useful tools that you
can use if you want to, for example,

47
00:03:26.432 --> 00:03:30.934
copy all of these messages that
are being written with console.log into

48
00:03:30.934 --> 00:03:33.100
the debugger into your terminal.

49
00:03:33.100 --> 00:03:39.564
Or into whatever you like, some sort of
continuous integration system or whatever.

50
00:03:39.564 --> 00:03:43.728
There's a package on npm you
can install called browser-run,

51
00:03:43.728 --> 00:03:46.825
that's really good,
if you run that command.

52
00:03:46.825 --> 00:03:52.125
And so how it works is that
browser-run expects JavaScript

53
00:03:52.125 --> 00:03:57.107
payload on standard in, and
it just puts body script src

54
00:03:57.107 --> 00:04:02.940
around that JavaScript payload and
it runs it in a browser.

55
00:04:02.940 --> 00:04:06.280
And every time you do
console.log in the browser,

56
00:04:06.280 --> 00:04:08.410
it's just gonna copy that
to your standard out.

57
00:04:08.410 --> 00:04:11.780
So it uses a WebSocket connection or
an XHR connection, depending.

58
00:04:12.990 --> 00:04:16.450
So if I wanna, for example,
run this test suite,

59
00:04:16.450 --> 00:04:20.530
I can just do browserify *.js,
can pipe it to browser-run,

60
00:04:20.530 --> 00:04:25.320
and you can specify the browser
that you wanna run it in with -b.

61
00:04:25.320 --> 00:04:29.770
So if I run this command, here,
browser-run is gonna open a real browser.

62
00:04:29.770 --> 00:04:31.758
But if you look on the command line,

63
00:04:31.758 --> 00:04:34.755
I see all of the data that's
written to standard out.

64
00:04:36.623 --> 00:04:38.794
So if I open up the debugger,

65
00:04:38.794 --> 00:04:43.051
I see all of the same stuff
that I see on the command line.

66
00:04:43.051 --> 00:04:47.639
And just to prove to you that yes, in
fact, we're really running in the browser,

67
00:04:47.639 --> 00:04:51.044
I can do something like,
what can you only do in the browser?

68
00:04:51.044 --> 00:04:56.396
I'll console.log the window.navigator.,

69
00:04:56.396 --> 00:04:59.663
I don't actually remember.

70
00:04:59.663 --> 00:05:06.105
What are some things, navigator.appName,
I think, yeah, appVersion?

71
00:05:07.928 --> 00:05:13.140
Yeah, the appVersion,
that's a fun thing to do.

72
00:05:13.140 --> 00:05:15.305
Or maybe we wanna write
a test out of this now, so

73
00:05:15.305 --> 00:05:17.840
that should have Linux
in it cuz i'm on Linux.

74
00:05:17.840 --> 00:05:22.920
Or maybe I'll search for
Chrome, so t.equal, or

75
00:05:22.920 --> 00:05:28.920
t.ok, I'll just use a regex,
chrome.test that.

76
00:05:28.920 --> 00:05:31.830
So if I run this test in Firefox,
it's gonna fail, probably.

77
00:05:31.830 --> 00:05:37.695
But if I run that in Chrome, Then yep,

78
00:05:37.695 --> 00:05:43.526
first assertion now is what we expect,
so it's really running in a browser.

79
00:05:46.866 --> 00:05:50.534
This is pretty much all that you
need to run your tests in a browser.

80
00:05:50.534 --> 00:05:57.521
So you do have to write your code in a way
that can be digestible with CommonJS.

81
00:05:57.521 --> 00:06:02.957
And it's usually better,
if you wanna test your browser code,

82
00:06:02.957 --> 00:06:05.984
to build modules whenever you can.

83
00:06:05.984 --> 00:06:10.710
Instead of like just building a big, hairy
application that has a lot of pieces that

84
00:06:10.710 --> 00:06:13.411
are kinda tightly coupled,
whenever you can,

85
00:06:13.411 --> 00:06:17.892
it's best to sorta break those out into
separate pieces that are easy to test.

86
00:06:17.892 --> 00:06:20.664
So some ways of doing that are to,

87
00:06:20.664 --> 00:06:25.223
if you can help it,
to not use any kind of global state.

88
00:06:25.223 --> 00:06:29.404
Because you're gonna have to set up
that global state when you write a test.

89
00:06:29.404 --> 00:06:35.167
Also, if your code is really
difficult to set up generally,

90
00:06:35.167 --> 00:06:38.338
that makes testing a lot harder.

91
00:06:38.338 --> 00:06:42.619
So one thing that I like to do,
I can show you an example of this, is,

92
00:06:44.339 --> 00:06:48.261
So here I have a bunch of projects.

93
00:06:48.261 --> 00:06:52.860
So a lot of the time, when I write a piece
of code, I'll have an example directory,

94
00:06:52.860 --> 00:06:55.514
and this is one of the first
things that I write.

95
00:06:55.514 --> 00:06:58.660
So here's an example file.

96
00:06:58.660 --> 00:07:02.501
What you can do is,
if you write an example file,

97
00:07:02.501 --> 00:07:08.619
then you can just take that example file
and copy it into your test directory.

98
00:07:08.619 --> 00:07:13.276
So I'm gonna copy that
example to my test directory,

99
00:07:13.276 --> 00:07:18.665
call it cool-test.js so
I know which one I'm dealing with.

100
00:07:18.665 --> 00:07:22.294
I already have a lot of tests in here,
but the basic idea is, all right,

101
00:07:22.294 --> 00:07:23.574
we have an example file.

102
00:07:23.574 --> 00:07:27.765
I can run this on the command line,
I can see what it should print.

103
00:07:27.765 --> 00:07:32.731
And then I can just kinda
copy-paste that output,

104
00:07:32.731 --> 00:07:37.582
and then require a testing
library like tape, and

105
00:07:37.582 --> 00:07:41.178
just sorta make a test out of it, so,

106
00:07:43.949 --> 00:07:48.685
Really simple way to get started
with testing is to do it this way.

107
00:07:48.685 --> 00:07:53.651
So I can do now t.equal(tree.outerHTML,
and

108
00:07:53.651 --> 00:07:59.595
then I'm gonna use backticks
to paste in that bit of code.

109
00:07:59.595 --> 00:08:07.570
Actually, gonna use,
Gonna paste it correctly first.

110
00:08:09.282 --> 00:08:14.413
So just cuz I want my test to be formatted
a little more nicely, and I don't really

111
00:08:14.413 --> 00:08:19.324
care about the whitespace, I'm just
gonna get rid of all of the whitespace.

112
00:08:19.324 --> 00:08:22.906
So I'll just have a little trim
function for doing this comparison,

113
00:08:22.906 --> 00:08:24.956
incidental to what we're doing here.

114
00:08:27.694 --> 00:08:30.527
And then I can call t.end,
cuz in this case,

115
00:08:30.527 --> 00:08:35.612
we're not doing anything asynchronous,
so it's usually fine to do to t.end.

116
00:08:35.612 --> 00:08:38.396
I have a trim function, and
all that that's gonna do is,

117
00:08:38.396 --> 00:08:41.417
it's gonna replace all of
the whitespace with just nothing.

118
00:08:45.232 --> 00:08:49.643
Okay, so now if I run that test,
passes on the command line.

119
00:08:49.643 --> 00:08:53.426
I ought to be able to browserify
this test as well, and

120
00:08:53.426 --> 00:08:56.972
run it with browser-run,
so I'll just do that.

121
00:09:02.943 --> 00:09:06.310
Now when I run it in the browser,
there's actually some subtle differences.

122
00:09:06.310 --> 00:09:09.692
Like an attribute isn't getting set for
some reason, so

123
00:09:09.692 --> 00:09:14.199
I think that there might even be a bug in
this module that I use all the time, so

124
00:09:14.199 --> 00:09:16.327
I should really go and look at that.

125
00:09:16.327 --> 00:09:21.163
But I think this at least gives you a
basic idea of kinda how you can just take

126
00:09:21.163 --> 00:09:25.609
something that you already have,
ideally, like an example file,

127
00:09:25.609 --> 00:09:27.640
which is good to have anyways.

128
00:09:27.640 --> 00:09:30.530
And turn it into something
that's more like a test.

129
00:09:30.530 --> 00:09:35.655
If you wanna do things that
look more like end-to-end or

130
00:09:35.655 --> 00:09:41.110
integration style tests,
that can get so much harder.

131
00:09:41.110 --> 00:09:45.040
So what I recommend is,
if you can not have that problem,

132
00:09:45.040 --> 00:09:47.360
don't have that problem
in the first place.

133
00:09:47.360 --> 00:09:52.127
Not always practical, but
if you can kind of move everything that

134
00:09:52.127 --> 00:09:57.154
you're doing out into small,
reusable pieces as much as possible,

135
00:09:57.154 --> 00:10:00.547
it's so
much easier to test that kinda stuff.

136
00:10:00.547 --> 00:10:06.034
So I'll copy the cool-test into
the workshop directory real quick,

137
00:10:06.034 --> 00:10:07.433
and I'll add it.

138
00:10:12.554 --> 00:10:17.587
Okay, so git add this file,

139
00:10:22.708 --> 00:10:25.004
And all the files.

