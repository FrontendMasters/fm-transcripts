WEBVTT

1
00:00:00.540 --> 00:00:03.790
One thing you can do to make this
a little more visually interesting is,

2
00:00:03.790 --> 00:00:07.930
in the fragment shader, instead of
running the whole gamut of hue from

3
00:00:07.930 --> 00:00:11.590
across the rainbow,
you can maybe limit that a little bit.

4
00:00:11.590 --> 00:00:15.695
So we can take the snoise,
which is gonna vary between a -1 to 1, and

5
00:00:15.695 --> 00:00:17.030
maybe compress that.

6
00:00:17.030 --> 00:00:19.134
So multiplied by 0.1, and

7
00:00:19.134 --> 00:00:24.130
then that's gonna give us some
more subtle color scheme.

8
00:00:24.130 --> 00:00:27.010
And we're all also already passing in

9
00:00:29.860 --> 00:00:33.750
a uniform called stage that's
set separately for each sphere.

10
00:00:33.750 --> 00:00:37.180
So we can use that to provide
an offset into the color space.

11
00:00:37.180 --> 00:00:42.130
So maybe stage*0.3, which is gonna be 0,
1 and 2, or maybe 1, 2 and

12
00:00:42.130 --> 00:00:44.280
3, I forget exactly.

13
00:00:44.280 --> 00:00:46.440
And we can add that in.

14
00:00:46.440 --> 00:00:48.366
So there's gonna be a color
shift applied to each sphere.

15
00:00:51.266 --> 00:00:53.388
There we go.
One of them's kind of the same color as

16
00:00:53.388 --> 00:00:55.100
the background, but you get the idea.

17
00:00:57.490 --> 00:01:01.310
Another thing that we might wanna
do is swap out icosphere for

18
00:01:01.310 --> 00:01:05.800
another package like bunny, or there's one
that's a teapot, all kinds of fun things.

19
00:01:05.800 --> 00:01:12.424
So you can get those by doing
npm i bunny teapot, etc.

20
00:01:14.350 --> 00:01:20.730
And instead of icosphere what
we can do is, require bunny.

21
00:01:24.880 --> 00:01:28.405
Now our mesh, instead of a sphere,
will be a bunny.

22
00:01:28.405 --> 00:01:33.152
npm install has to finish,
actually I have this cached locally so

23
00:01:33.152 --> 00:01:35.060
I'm gonna speed that up.

24
00:01:36.410 --> 00:01:40.110
One moment, it has to download a bunny and
a teapot from the Internet.

25
00:01:40.110 --> 00:01:41.409
Let's see how long this is gonna take.

26
00:01:42.450 --> 00:01:44.560
Okay, I see a question on the chat.

27
00:01:45.780 --> 00:01:48.760
How, where do we run glslify
to run budo main.js?

28
00:01:48.760 --> 00:01:55.990
So you do budo main.js, and
then you do --, and then -t glslify.

29
00:01:55.990 --> 00:01:57.496
&gt;&gt; What's the --?

30
00:01:57.496 --> 00:02:01.642
&gt;&gt; So these are options that
are forwarded off to browserify, so

31
00:02:01.642 --> 00:02:05.970
everything past the -- is what
browserify is gonna deal with.

32
00:02:05.970 --> 00:02:08.970
And then everything before
that is budo-specific options.

33
00:02:08.970 --> 00:02:11.010
So if you do --help,

34
00:02:11.010 --> 00:02:13.570
it tells you about more of
the options if you need to know that.

35
00:02:15.980 --> 00:02:19.170
Right, so here's the basic form,
browserify opts right after that.

36
00:02:19.170 --> 00:02:21.715
&gt;&gt; And what's the -t in the browserify?

37
00:02:21.715 --> 00:02:25.929
&gt;&gt; -t loads a transform,
called glslify in this case.

38
00:02:27.270 --> 00:02:28.560
Okay, still waiting on that bunny and

39
00:02:28.560 --> 00:02:31.878
teapot, but
it'll be pretty cool once it downloads.

40
00:02:31.878 --> 00:02:38.600
Okay, [LAUGH] all right, now we can
swap out that icosphere for a bunny.

41
00:02:38.600 --> 00:02:43.330
So there we go, we have our new budo.

42
00:02:43.330 --> 00:02:49.230
And if I reload it, the bunny is there,
it just happens to be really big.

43
00:02:49.230 --> 00:02:50.220
So there's a bunny.

44
00:02:50.220 --> 00:02:54.742
There's three of them, it's kind of a cool
effect actually, three stacked bunnies.

45
00:02:54.742 --> 00:02:58.310
&gt;&gt; Can you space them out?

46
00:02:58.310 --> 00:02:59.440
&gt;&gt; I can, yeah.

47
00:02:59.440 --> 00:03:02.770
So there's two ways of doing that,
I can either space them out more and

48
00:03:02.770 --> 00:03:05.150
move the camera back, or

49
00:03:05.150 --> 00:03:09.030
in the vertex shader what I can do
is provide a little bit of scaling.

50
00:03:09.030 --> 00:03:13.910
So if I take that position, multiply it by
0.2, and that should do the same thing.

51
00:03:13.910 --> 00:03:16.560
If i reload, there we go.

52
00:03:16.560 --> 00:03:22.610
That's cool, the bunnies are pretty cool.

53
00:03:22.610 --> 00:03:23.180
I can also change the background.

54
00:03:23.180 --> 00:03:26.843
&gt;&gt; [INAUDIBLE] they stand a little
further back from the reactor.

55
00:03:26.843 --> 00:03:30.825
&gt;&gt; Yeah, or another fun thing I can do is,

56
00:03:30.825 --> 00:03:34.700
why don't I put in a feedback effect?

57
00:03:34.700 --> 00:03:35.770
These are really fun.

58
00:03:35.770 --> 00:03:40.070
So with yet another glsl module.

59
00:03:41.385 --> 00:03:44.650
No sorry, it's just a regl module, but
it's a module from npm just the same.

60
00:03:45.930 --> 00:03:52.262
We can set up feedback, so this one's
called regl-feedback, and I can load it.

61
00:03:56.105 --> 00:04:01.932
I always have to copy the little
snippet from the readme, though.

62
00:04:01.932 --> 00:04:04.819
That's gonna be really slow.

63
00:04:04.819 --> 00:04:08.742
Anyways, I think it's something like, so

64
00:04:08.742 --> 00:04:14.690
in our createBlob function,
we can create a new feedback object.

65
00:04:14.690 --> 00:04:21.880
I think it takes regl and it takes a bit
of glsl source, and it's a function.

66
00:04:21.880 --> 00:04:26.800
It needs to be called sample,
I think something like that.

67
00:04:26.800 --> 00:04:31.844
And then sample takes,
I don't exactly remember the order but

68
00:04:31.844 --> 00:04:38.372
it's like a sampler2D which is a texture
and U-V coordinates which is a vec2.

69
00:04:38.372 --> 00:04:45.740
And then you've got to return the texture
lookup, which you do with texture2D.

70
00:04:45.740 --> 00:04:50.500
Anyways, what this does is,
it it's gonna load

71
00:04:50.500 --> 00:04:55.940
the screen output into a texture and
then we can decide how we want to

72
00:04:57.390 --> 00:05:01.380
render the screen based
on the previous outputs.

73
00:05:01.380 --> 00:05:07.080
We can do things like blur or
smear things off into the distance.

74
00:05:07.080 --> 00:05:11.670
It's a cheap effect that will make
your demo look really cyberpunk and

75
00:05:11.670 --> 00:05:13.640
amazing, so I highly recommend it.

76
00:05:15.550 --> 00:05:16.810
It's still loading though.

77
00:05:16.810 --> 00:05:18.101
Maybe I have it in my project directory.

78
00:05:21.300 --> 00:05:23.960
Nope, maybe I have it in my npm directory.

79
00:05:26.318 --> 00:05:27.370
Yes, I do.

80
00:05:28.840 --> 00:05:32.630
See, why is it so
slow if I already have it?

81
00:05:32.630 --> 00:05:39.890
Maybe I'm just gonna, Extract it.

82
00:05:45.870 --> 00:05:47.140
Okay, cool.

83
00:05:47.140 --> 00:05:51.034
I can read the docs now without
having the whole package.

84
00:05:51.034 --> 00:05:57.844
[LAUGH] Pro tip for offline npm use.

85
00:05:57.844 --> 00:06:01.273
Okay, the uv is the first argument,
I get that wrong all the time.

86
00:06:01.273 --> 00:06:04.733
And I'm just gonna take
this default sampler code.

87
00:06:04.733 --> 00:06:05.504
It finished finally.

88
00:06:10.182 --> 00:06:12.941
Okay so, Okay, so we just lifted some

89
00:06:12.941 --> 00:06:17.790
code that's gonna smear things out
in a cool way from the readme.

90
00:06:17.790 --> 00:06:22.550
And then there's some other pieces I can
almost remember what they are off the top

91
00:06:22.550 --> 00:06:27.160
of my head, I think, although we actually
have to do this as a separate call.

92
00:06:29.040 --> 00:06:32.440
So here's a good reason why you
would want to put things in a draft

93
00:06:32.440 --> 00:06:35.343
object instead of just having
a bunch of variables kicking around,

94
00:06:35.343 --> 00:06:38.004
it's cuz we're gonna
need a feedback there.

95
00:06:39.060 --> 00:06:40.990
And so
we're also gonna need a feedback texture.

96
00:06:47.138 --> 00:06:48.238
So then, let's see.

97
00:06:48.238 --> 00:06:54.002
After we've done everything, after we've
drawn everything that we want to draw,

98
00:06:54.002 --> 00:07:00.346
we need to do fbtext({ copy: true,
mag: 'linear', min: 'linear' )}, I think.

99
00:07:00.346 --> 00:07:05.207
And that's gonna copy everything on

100
00:07:05.207 --> 00:07:10.020
the screen into that texture.

101
00:07:10.020 --> 00:07:15.050
And then the first thing that we do
after we clear the screen is we need to

102
00:07:17.230 --> 00:07:19.210
draw the texture.

103
00:07:20.670 --> 00:07:21.870
Let me see how that works.

104
00:07:29.000 --> 00:07:31.876
All right, and then you need to
provide the texture as an object,

105
00:07:31.876 --> 00:07:33.661
that's what I forgot.

106
00:07:33.661 --> 00:07:38.931
So if I do all of those things,
cuz we're gonna make a cyberpunk demo now,

107
00:07:38.931 --> 00:07:44.120
I'm gonna make the background black,
of course, and I'll reload it.

108
00:07:47.748 --> 00:07:51.787
Background is black, but

109
00:07:51.787 --> 00:07:57.774
I don't see any of the updates yet.

110
00:07:57.774 --> 00:08:00.409
Copy: true, min, mag, yes.

111
00:08:07.546 --> 00:08:10.390
Right, I need to draw that fb.

112
00:08:10.390 --> 00:08:13.750
Okay, now when I reload, there we go.

113
00:08:15.340 --> 00:08:17.490
That's pretty cool, they're on fire now.

114
00:08:19.210 --> 00:08:20.380
You can sorta navigate around.

115
00:08:23.785 --> 00:08:26.150
Whoa.
&gt;&gt; [LAUGH]

116
00:08:26.150 --> 00:08:27.605
&gt;&gt; The scroll wheel is really

117
00:08:27.605 --> 00:08:28.604
sensitive, so-

118
00:08:28.604 --> 00:08:30.112
&gt;&gt; [LAUGH]
&gt;&gt; Hi bunnies.

119
00:08:30.112 --> 00:08:33.320
&gt;&gt; Yeah, so now there's, it's pretty cool.

