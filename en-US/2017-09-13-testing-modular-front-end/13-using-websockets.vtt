WEBVTT

1
00:00:00.380 --> 00:00:05.750
Okay, so another way that we can extend
this example is maybe we'll have a server

2
00:00:05.750 --> 00:00:08.430
and the server is gonna have
a WebSocket connection.

3
00:00:08.430 --> 00:00:10.980
And then we're gonna have like,
remember in the 90s,

4
00:00:10.980 --> 00:00:16.430
when all of the webpages had the really
cool like, visitor counter at the bottom.

5
00:00:16.430 --> 00:00:17.380
So we'll make one of those.

6
00:00:17.380 --> 00:00:18.780
That'll be fun.

7
00:00:18.780 --> 00:00:23.642
Okay, so to do that, we can just
put together a quick little server.

8
00:00:23.642 --> 00:00:30.811
So I'm gonna require a package
called WebSocket stream to do that,

9
00:00:30.811 --> 00:00:37.494
we'll also require the HTTP module and
set up a little server.

10
00:00:37.494 --> 00:00:42.775
So we'll create server req,
res, our server isn't really

11
00:00:42.775 --> 00:00:47.980
gonna need to do anything special aside
from web sockets, aside from serving

12
00:00:47.980 --> 00:00:52.270
up some static assets, so I'm gonna use
a package called ecstatic to do that.

13
00:00:53.420 --> 00:00:55.990
You can pass it a directory and

14
00:00:55.990 --> 00:01:00.040
it will just serve up the briefing in
that directory, pretty straightforward.

15
00:01:00.040 --> 00:01:04.400
You also might do (_dirname + ' /public')

16
00:01:04.400 --> 00:01:06.320
that way you can run
the script from any location.

17
00:01:07.860 --> 00:01:09.220
So we need to listen on the port.

18
00:01:10.640 --> 00:01:15.710
And then we're just gonna let
ecstatic handle the rest.

19
00:01:15.710 --> 00:01:19.490
We could have custom routes in here
either with a router or just checking

20
00:01:19.490 --> 00:01:24.530
some properties with some kind of if else
statement, but this should do the trick.

21
00:01:24.530 --> 00:01:30.430
Okay, so now to set up that web socket
connection, what we're gonna do is,

22
00:01:30.430 --> 00:01:36.080
so you do wsock.createServer.

23
00:01:36.080 --> 00:01:38.670
You pass in your http server.

24
00:01:38.670 --> 00:01:40.800
And then you pass in a function.

25
00:01:42.310 --> 00:01:45.260
Inside of this function,
you have a thing called a duplex stream.

26
00:01:45.260 --> 00:01:46.910
I'm not gonna get a whole lot into that,

27
00:01:46.910 --> 00:01:50.620
cuz that's its own quite
lengthy workshop in itself.

28
00:01:50.620 --> 00:01:53.280
But you can do, for

29
00:01:53.280 --> 00:01:56.440
example, this is how we're gonna
communicate with the other end.

30
00:01:56.440 --> 00:01:59.260
So it's a bidirectional
communication system, but

31
00:01:59.260 --> 00:02:01.380
we're only gonna push data at the clients.

32
00:02:01.380 --> 00:02:06.600
Because guess books are only a single way.

33
00:02:06.600 --> 00:02:09.430
So we need a variable that's gonna be

34
00:02:09.430 --> 00:02:12.800
the count since is the number of times
people have visited our webpage.

35
00:02:13.850 --> 00:02:18.840
And the first time somebody
logs onto the page,

36
00:02:18.840 --> 00:02:21.900
we should send the current
count down the wire.

37
00:02:21.900 --> 00:02:26.470
So we can do streamed.right, count,
and then maybe plus a new one.

38
00:02:28.350 --> 00:02:35.410
And every time somebody visits,
this WebSocket connection will be loaded.

39
00:02:35.410 --> 00:02:37.290
So we can also use that
to increment the count.

40
00:02:38.990 --> 00:02:41.810
Right, because every time
someone loads the page,

41
00:02:41.810 --> 00:02:44.010
their browser will establish
a WebSocket connection.

42
00:02:44.010 --> 00:02:45.640
So that means that we can
increment the counter.

43
00:02:47.650 --> 00:02:52.350
But the problem is, every time someone
visits the page we need to send that

44
00:02:52.350 --> 00:02:55.850
information out to everyone so
we can see the counter update live.

45
00:02:55.850 --> 00:02:57.460
Which will be fun.

46
00:02:57.460 --> 00:03:01.240
So to do that we need to keep track
of all of the clients streams.

47
00:03:01.240 --> 00:03:05.500
So I'll make an array to track
that called streams, and

48
00:03:05.500 --> 00:03:11.340
we can push the new stream
into the streams array.

49
00:03:12.780 --> 00:03:17.770
But then every time we get a new user,
instead of just writing that to

50
00:03:17.770 --> 00:03:21.240
the current stream, we actually need
to write that to all of the streams.

51
00:03:22.320 --> 00:03:24.864
So I'm gonna do streams.forEach.

52
00:03:27.277 --> 00:03:28.670
I'll just do s.

53
00:03:28.670 --> 00:03:32.720
And then we can write that message
out to everybody who's connected.

54
00:03:32.720 --> 00:03:36.820
Then finally, we need to have a way of

55
00:03:36.820 --> 00:03:40.220
removing stream from our array
when someone disconnects.

56
00:03:40.220 --> 00:03:44.550
So there's a package I'm gonna use for
that called end of stream,

57
00:03:44.550 --> 00:03:47.952
that's really handy for that sort of stuff
cuz there's a bunch of end of streams,

58
00:03:47.952 --> 00:03:53.350
node js streams API, there's kind
of a lot of complexity for that.

59
00:03:53.350 --> 00:03:58.360
So end of stream and
then on end of the stream,

60
00:04:00.330 --> 00:04:05.830
we can just calculate the index
into that streams array.

61
00:04:05.830 --> 00:04:10.240
We could also use an object with IDs but
this is fine for, I think what we need

62
00:04:11.560 --> 00:04:17.260
index of the current stream and
then we can call splice to get rid of it.

63
00:04:18.540 --> 00:04:21.520
All right, so how this works
is we're gonna have a counter

64
00:04:21.520 --> 00:04:23.010
that's gonna be initialized at zero.

65
00:04:23.010 --> 00:04:24.860
We're not gonna save it out to disk or
anything.

66
00:04:24.860 --> 00:04:27.950
So every time we restart the server,
our counter will restart.

67
00:04:27.950 --> 00:04:28.630
That's fine for now.

68
00:04:29.990 --> 00:04:32.860
We have a websocket connection.

69
00:04:32.860 --> 00:04:36.970
So anytime a client connects
this callback fires.

70
00:04:36.970 --> 00:04:43.020
And inside of that function,
we have access to the stream and

71
00:04:43.020 --> 00:04:45.270
we're gonna be pushing
data down that connection.

72
00:04:47.090 --> 00:04:48.450
So the first thing that we do,

73
00:04:48.450 --> 00:04:52.629
is we add that duplex stream
to an array called streams.

74
00:04:53.650 --> 00:04:55.180
We increment our counter, and

75
00:04:55.180 --> 00:04:59.420
then we push out the new counts to
everyone who's still connected.

76
00:04:59.420 --> 00:05:05.600
And then to clean up

77
00:05:05.600 --> 00:05:10.250
WebSockets that are no longer connected,
we can do this piece of code right here.

78
00:05:10.250 --> 00:05:14.510
So now if I run our server,
it's listening on port 5000.

79
00:05:14.510 --> 00:05:19.480
Because we are now providing
the server we're gonna need to

80
00:05:21.680 --> 00:05:23.620
run some commands separately.

81
00:05:23.620 --> 00:05:30.070
So we can go into here, so
instead of running budo, we can run

82
00:05:31.400 --> 00:05:37.360
another one called watchify on our front
end code, I think it's called yo.js, yep.

83
00:05:37.360 --> 00:05:41.260
And we can tell it to write
out to public/bundle.js.

84
00:05:41.260 --> 00:05:47.760
And some helpful debugging flags,
might also have a script called builds and

85
00:05:47.760 --> 00:05:50.356
that'll build something that's
more suitable for production.

86
00:05:50.356 --> 00:05:55.760
So, maybe we wanna pipe it through
a minifier and pipe that through gzip and

87
00:05:55.760 --> 00:06:02.020
then save the result out to bundle.js.gz,
for example,

88
00:06:02.020 --> 00:06:06.880
so it's just something we could do to
run that one we would do npm run build,

89
00:06:06.880 --> 00:06:10.430
to run the development version now,
we would just do npm run dev.

90
00:06:11.930 --> 00:06:14.400
We still have to run the server
separately from this.

91
00:06:14.400 --> 00:06:17.820
So I'll do npm run dev now.

92
00:06:20.300 --> 00:06:25.430
So now every time we edit our file yo.js
or any of the files that it depends on

93
00:06:25.430 --> 00:06:28.310
then our bundle code will
be updated automatically.

94
00:06:28.310 --> 00:06:30.357
So we get all the code that we're
gonna need in the front end.

95
00:06:31.600 --> 00:06:34.820
Okay, so
the final piece is we need a bit of html.

96
00:06:34.820 --> 00:06:36.140
This is what I usually do for that.

97
00:06:37.680 --> 00:06:39.242
You may have already
seen this a few times.

98
00:06:42.219 --> 00:06:47.782
You can have more if you like but
the system is gonna take care of it.

99
00:06:47.782 --> 00:06:52.130
I'll cover in a little bit
how we can actually generate

100
00:06:52.130 --> 00:06:55.320
HTML on the server side to kind of

101
00:06:55.320 --> 00:07:00.240
upgrade an existing page of content
to something that's gonna be dynamic.

102
00:07:00.240 --> 00:07:03.610
This is sometimes called
universal rendering or isomorphic.

103
00:07:03.610 --> 00:07:06.170
People use that word to describe
this kinda thing sometimes.

104
00:07:07.590 --> 00:07:11.370
Okay, so the final thing we need to
do is update the front end code.

105
00:07:11.370 --> 00:07:16.580
So that we're gonna be listening for
events that come down that WebSocket pipe.

106
00:07:16.580 --> 00:07:17.980
There's a lot of ways to do this.

107
00:07:17.980 --> 00:07:19.340
Here's one of those ways.

108
00:07:19.340 --> 00:07:22.610
It's maybe not the best way for
a real site because we're gonna be using

109
00:07:22.610 --> 00:07:27.420
the stream API in the browser,
which is kind of big, but whatever.

110
00:07:27.420 --> 00:07:29.284
It's pretty easy.

111
00:07:29.284 --> 00:07:35.310
Whoops, should be WebSocket stream, we can
get a handle to the WebSocket connection.

112
00:07:36.370 --> 00:07:42.070
How that looks something like this,
where you do ws:// in the URL.

113
00:07:42.070 --> 00:07:45.720
It just so happens that this string
right here local host 5000 is

114
00:07:45.720 --> 00:07:50.370
the same as doing location.host because
we're in the browser after all.

115
00:07:51.840 --> 00:07:57.810
And we need to take in every
piece from the stream and

116
00:07:57.810 --> 00:07:59.010
update the state accordingly.

117
00:07:59.010 --> 00:08:04.420
So I'm just gonna pipe into a couple
of different modules to split input

118
00:08:04.420 --> 00:08:09.760
on new lines and then to sort of consume
the stream, we can see much more

119
00:08:09.760 --> 00:08:15.380
about all of how to do that kinda thing
on the stream sock that I gave recently.

120
00:08:15.380 --> 00:08:21.870
Okay, so here we're gonna get
every element in this function.

121
00:08:21.870 --> 00:08:26.700
So we're gonna get rows back and

122
00:08:26.700 --> 00:08:32.430
these rows are actually,
it's not an object stream, they are lines.

123
00:08:32.430 --> 00:08:37.670
So we're gonna convert those
buffers to strings and

124
00:08:37.670 --> 00:08:41.230
then turn them back into numbers.

125
00:08:41.230 --> 00:08:44.350
So because we're writing,
if you remember from our server code,

126
00:08:45.450 --> 00:08:49.360
we're printing out
a number with a new line.

127
00:08:49.360 --> 00:08:51.780
So, we can convert that number

128
00:08:54.520 --> 00:08:59.290
from a string back into a number and
we can maybe emit an event.

129
00:08:59.290 --> 00:09:03.874
So the event is gonna be called

130
00:09:03.874 --> 00:09:08.630
increment-n, so I guess instead of

131
00:09:11.130 --> 00:09:15.110
Instead of using n as with
the set interval thing,

132
00:09:15.110 --> 00:09:19.440
that'll be how we're gonna
count the number of visitors.

133
00:09:19.440 --> 00:09:21.978
So, I could even rename it, so
that it's not called n anymore,

134
00:09:21.978 --> 00:09:22.966
it's called visitors.

135
00:09:27.682 --> 00:09:31.140
Okay, so I think that that's every place,
except for right here.

136
00:09:32.320 --> 00:09:36.200
So now there's gonna be
the visitor count in the h1 tag.

137
00:09:36.200 --> 00:09:42.400
Finally, what we need to
do is update our reducer so

138
00:09:42.400 --> 00:09:47.752
that instead of n it's called visitors.

139
00:09:47.752 --> 00:09:52.359
Okay, so maybe this will work.

140
00:09:54.340 --> 00:09:59.020
So, whoops,
I didn't have a module installed.

141
00:10:00.490 --> 00:10:03.400
The problem with making stuff up on
the fly is you use all these modules that

142
00:10:03.400 --> 00:10:05.280
you didn't expect to be using.

143
00:10:06.620 --> 00:10:07.210
Whoops.

144
00:10:07.210 --> 00:10:09.440
So now I'm gonna run the server.

145
00:10:09.440 --> 00:10:12.190
And I guess I already have
something running on port 5000.

146
00:10:12.190 --> 00:10:14.090
All right, let me kill that.

147
00:10:14.090 --> 00:10:16.030
Okay, here we go.

148
00:10:16.030 --> 00:10:16.790
The server is running.

149
00:10:18.190 --> 00:10:20.330
The browser looks good.

150
00:10:20.330 --> 00:10:22.300
So if I refresh it, whoops,

151
00:10:22.300 --> 00:10:25.310
right, we're no longer running on the budo
port we're running on port 5000, ws

152
00:10:27.670 --> 00:10:33.130
is not defined,
let's just fix that bug really quick.

153
00:10:33.130 --> 00:10:35.860
So it's on yo.js, line five, right?

154
00:10:35.860 --> 00:10:39.000
That should be called wsock, not ws.

155
00:10:39.000 --> 00:10:39.900
So I save it and

156
00:10:39.900 --> 00:10:44.500
then watchify is gonna automatically
recompile which it did right here.

157
00:10:44.500 --> 00:10:45.010
I think so.

158
00:10:46.680 --> 00:10:50.720
Let's just make sure if I save it again,
yeah, so it's recompiling automatically.

159
00:10:53.510 --> 00:10:54.730
So this is another trick.

160
00:10:56.580 --> 00:10:59.630
It's not actually reloading the page,

161
00:10:59.630 --> 00:11:01.860
because Chrome is very
aggressively caching.

162
00:11:01.860 --> 00:11:03.540
So I'm gonna Ctrl+Shift+R.

163
00:11:05.270 --> 00:11:05.880
There we go.

164
00:11:05.880 --> 00:11:10.650
So I was doing everything fine,
but Chrome was being difficult,

165
00:11:12.110 --> 00:11:14.580
so that's really good.

166
00:11:14.580 --> 00:11:20.410
We see one, that visitor count started out
at something else I'm gonna now update.

167
00:11:20.410 --> 00:11:22.370
I'm gonna load the page in another window.

168
00:11:25.400 --> 00:11:30.850
And hey, we see 2 now, we see one
that's kind of a silly bug, but right,

169
00:11:30.850 --> 00:11:35.640
so everybody updates, I guess I'm emitting
an increment event, not a set event.

170
00:11:35.640 --> 00:11:37.500
So I need to go into the reducer now and

171
00:11:37.500 --> 00:11:42.330
actually fix this because I
only see the updated version.

172
00:11:43.440 --> 00:11:46.470
When you think it's only gonna
ever increment it's not gonna

173
00:11:46.470 --> 00:11:47.400
be set to a value.

174
00:11:47.400 --> 00:11:48.730
So why don't we go ahead and fix that.

175
00:11:50.490 --> 00:11:53.410
So that's gonna be something
that happens in the reducer.

176
00:11:54.410 --> 00:11:58.130
All right, increment visitors
doesn't even accept any values.

177
00:11:58.130 --> 00:12:00.890
So shouldn't be called
increment visitors at all.

178
00:12:00.890 --> 00:12:02.870
It should be called set visitors.

179
00:12:02.870 --> 00:12:06.800
And then we should just set it
to the number that we emit.

180
00:12:06.800 --> 00:12:07.740
Okay.

181
00:12:07.740 --> 00:12:10.350
It's going back into the source code.

182
00:12:13.520 --> 00:12:19.020
Increments should be set,
that can remain the same.

183
00:12:19.020 --> 00:12:20.100
Okay.

184
00:12:20.100 --> 00:12:23.907
Now if I reload with Ctrl+Shift+R,

185
00:12:23.907 --> 00:12:26.510
I think you might have to have
the debugger console open to do that.

186
00:12:28.260 --> 00:12:31.820
Okay, and
then open the debugger console there.

187
00:12:31.820 --> 00:12:32.890
Control+Shift+R.

188
00:12:34.220 --> 00:12:34.860
Okay, cool.

189
00:12:34.860 --> 00:12:36.900
Now I think everything is
running the latest version.

190
00:12:38.540 --> 00:12:41.390
Just about close enough.

191
00:12:43.752 --> 00:12:44.380
That's weird.

192
00:12:44.380 --> 00:12:47.260
Anyways, there's some sort of silly little
bug in here but it basically works.

193
00:12:48.410 --> 00:12:53.400
Get our existing code that like cycles
through the numbers still works correctly.

194
00:12:53.400 --> 00:12:57.240
And we've got some separation
between our reducer logic and

195
00:12:57.240 --> 00:13:00.570
our events, our events that come
from a WebSocket connection and

196
00:13:00.570 --> 00:13:03.100
our events that are sort
of internally generated.

197
00:13:03.100 --> 00:13:03.600
So.

198
00:13:04.620 --> 00:13:07.412
&gt;&gt; Do you wanna take like five minutes and
like sort out the bug and

199
00:13:07.412 --> 00:13:08.940
then push the code?

200
00:13:08.940 --> 00:13:09.610
&gt;&gt; Sure.

201
00:13:12.320 --> 00:13:16.280
Yeah, so I'll push the code right now and
all of you can poke around with it and

202
00:13:16.280 --> 00:13:18.169
maybe you can find the bug before I do.

203
00:13:18.169 --> 00:13:25.530
&gt;&gt; Is there some way you would start
writing tests for what you just wrote?

204
00:13:25.530 --> 00:13:28.850
&gt;&gt; Some way that you could
start out writing tests.

205
00:13:28.850 --> 00:13:31.691
&gt;&gt; What is the preferred place
you start writing tests?

206
00:13:31.691 --> 00:13:36.423
&gt;&gt; So what I would usually do is,
if you're going to write tests,

207
00:13:36.423 --> 00:13:41.601
probably the best way to do it in this
sort of application is start with

208
00:13:41.601 --> 00:13:46.960
the parts that are relatively easy to
test, like I would say the reducer

209
00:13:46.960 --> 00:13:52.375
is probably the easiest part to start
testing if you're gonna do that.

210
00:13:52.375 --> 00:13:55.840
&gt;&gt; [INAUDIBLE]
&gt;&gt; Did I not?

211
00:13:55.840 --> 00:13:56.370
Thought I did.

212
00:13:58.130 --> 00:13:59.443
Got a lot of extra false.

213
00:14:11.890 --> 00:14:17.214
&gt;&gt; Nevermind,
[INAUDIBLE] get something changed.

214
00:14:17.214 --> 00:14:18.331
&gt;&gt; Okay.

215
00:14:18.331 --> 00:14:19.450
Yeah.

216
00:14:19.450 --> 00:14:23.960
So yeah, I would probably start here
cuz it just takes an event emitter and

217
00:14:23.960 --> 00:14:25.380
an object is inputs.

218
00:14:25.380 --> 00:14:26.830
So you don't really have
to do anything fancy.

219
00:14:26.830 --> 00:14:29.720
You could even test this completely
in node because there's no

220
00:14:29.720 --> 00:14:31.680
dom specific code in here.

221
00:14:31.680 --> 00:14:33.990
You don't even have to test
it in a browser necessarily.

222
00:14:35.790 --> 00:14:41.271
For other pieces, you probably have
to refactor them a bit more to test.

223
00:14:45.065 --> 00:14:47.513
Cuz there's events and
there's rendering, so

224
00:14:47.513 --> 00:14:50.977
the rendering would have to be split
out into its own piece probably,

225
00:14:50.977 --> 00:14:54.000
before you could really have
a good shot at testing it.

226
00:14:54.000 --> 00:14:57.150
So just the kinds of things
that you need to refactor.

227
00:14:57.150 --> 00:14:59.520
Okay, let's see what's
wrong with this code now.

228
00:15:05.081 --> 00:15:06.040
I see what it is.

229
00:15:06.040 --> 00:15:07.900
Okay, this is very simple.

230
00:15:07.900 --> 00:15:11.350
I forgot to update the state
by emitting an update event.

231
00:15:11.350 --> 00:15:14.630
So it was just using the last value.

232
00:15:14.630 --> 00:15:18.678
So see if I update that code
now shows to be running, and

233
00:15:18.678 --> 00:15:21.060
make sure that it's reloaded.

234
00:15:29.875 --> 00:15:31.309
I don't know why that is.

235
00:15:41.953 --> 00:15:44.685
Okay, nevermind, it still has this bug.

236
00:15:44.685 --> 00:15:46.425
&gt;&gt; Well, the initial state is zero, right?

237
00:15:46.425 --> 00:15:47.698
So don't you have to admit?

238
00:15:52.348 --> 00:15:54.148
The initial state is zero but

239
00:15:54.148 --> 00:15:59.024
then when you connect to the WebSocket
you should get a message from the server

240
00:15:59.024 --> 00:16:02.940
right away that has the most up
to date version of the account.

241
00:16:04.710 --> 00:16:07.329
&gt;&gt; That's not somehow, for
some reason, not firing.

242
00:16:08.350 --> 00:16:13.100
&gt;&gt; Yeah, it's kinda a little
bit odd cuz it's set and

243
00:16:13.100 --> 00:16:15.140
then we get vacation right away.

244
00:16:15.140 --> 00:16:17.680
I could print out what we're
getting back from the socket.

245
00:16:17.680 --> 00:16:18.402
That might help.

246
00:16:32.574 --> 00:16:34.240
&gt;&gt; See it's not firing right away.

247
00:16:35.975 --> 00:16:39.008
&gt;&gt; Well, I'm also not seeing
that message which is odd,

248
00:16:39.008 --> 00:16:43.240
you could say caching problem,
there we go.

249
00:16:43.240 --> 00:16:46.708
It could have just been a caching
problem all along again.

250
00:16:46.708 --> 00:16:49.194
Okay, so.

251
00:16:58.946 --> 00:17:00.660
Okay, so that time it didn't work.

252
00:17:00.660 --> 00:17:03.470
Let's see what's up with it.

253
00:17:03.470 --> 00:17:06.650
Right, so we haven't gotten
any data back from the server.

254
00:17:06.650 --> 00:17:09.704
It looks like sometimes it's not
getting the first little chunk,

255
00:17:09.704 --> 00:17:12.715
maybe the WebSocket connection
is buffering it for some reason.

256
00:17:20.257 --> 00:17:21.019
Or it could be,

257
00:17:21.019 --> 00:17:25.860
there's like some connection limit we're
hitting in the browser is also possible.

258
00:17:25.860 --> 00:17:27.535
It seems to work pretty reliably.

259
00:17:27.535 --> 00:17:28.510
No, there we go.

260
00:17:54.421 --> 00:17:57.542
I'll just print out the number
of connections that we have.

261
00:18:00.664 --> 00:18:03.877
Just to make sure that all three
of those are actually connected.

262
00:18:07.860 --> 00:18:10.147
Okay, zero.

263
00:18:15.259 --> 00:18:16.510
Actually put that right there.

264
00:18:19.350 --> 00:18:23.024
Okay, one connection, two connections.

265
00:18:26.842 --> 00:18:28.454
Three connections.

266
00:18:33.410 --> 00:18:35.660
Four, well now it's working.

267
00:18:38.813 --> 00:18:40.170
Five.

268
00:18:40.170 --> 00:18:43.737
&gt;&gt; It could have been just a-
&gt;&gt; There we go, when I reloaded.

269
00:18:50.748 --> 00:18:53.715
&gt;&gt; Yeah, that one's not connecting for
some reason.

270
00:18:57.585 --> 00:19:00.010
&gt;&gt; Yeah, this looks like more
of like a browser quirk.

271
00:19:02.140 --> 00:19:04.215
Like Chrome isn't
reestablishing the connection.

272
00:19:04.215 --> 00:19:07.740
But, I think we get the basic
idea of how it works.

273
00:19:07.740 --> 00:19:12.800
But anyways, if you wanna poke around,
let me push that one fix.

274
00:19:18.602 --> 00:19:21.052
Get rid of that debugging code though.

275
00:19:25.741 --> 00:19:27.751
Emit update event.

276
00:19:36.288 --> 00:19:38.480
Okay, so that code is in there.

