WEBVTT

1
00:00:00.450 --> 00:00:02.930
One thing that you might
have noticed already is that

2
00:00:02.930 --> 00:00:06.810
this approach isn't necessarily
gonna scale super well itself.

3
00:00:06.810 --> 00:00:09.302
We've just got all of these
variables floating around.

4
00:00:09.302 --> 00:00:14.560
How is this gonna look when we have
20 variables all in the same scope?

5
00:00:14.560 --> 00:00:18.580
Not super well, it's gonna be hard to
split things up into separate files.

6
00:00:18.580 --> 00:00:22.830
So one thing that we can do right away
that's very simple is we can just collect

7
00:00:22.830 --> 00:00:27.270
these properties into a variable,
like an object.

8
00:00:28.460 --> 00:00:32.860
They call it state because
it's a useful technique for

9
00:00:32.860 --> 00:00:37.840
kind of keeping track of every
piece of information that you're

10
00:00:37.840 --> 00:00:41.620
going to need to render
the code on the screen.

11
00:00:44.150 --> 00:00:50.220
So now we just need to update every
time we do n we need to do state.n.

12
00:00:50.220 --> 00:00:53.003
Every time we reference x,
we need to do state.x.

13
00:00:57.120 --> 00:01:01.437
But this is generally a better
way to do things than before, so

14
00:01:01.437 --> 00:01:03.520
it still works, it's good.

15
00:01:04.750 --> 00:01:08.820
One really nice thing about doing
this too is if you need to log

16
00:01:10.640 --> 00:01:13.760
the values for all of these different
kinds of variables in your program,

17
00:01:13.760 --> 00:01:16.720
you can do that with just a console
log and you can poke around.

18
00:01:16.720 --> 00:01:21.110
You could also implement some
of these fancy techniques,

19
00:01:21.110 --> 00:01:22.250
one's called time travel.

20
00:01:22.250 --> 00:01:24.573
That's where you save out the states.

21
00:01:24.573 --> 00:01:28.536
So you could just call JSON.strigify in
your state object, dump them out, and

22
00:01:28.536 --> 00:01:31.650
you could write a little program
that maybe when you hit the left and

23
00:01:31.650 --> 00:01:35.520
right arrow keys will kind
of step through the history.

24
00:01:35.520 --> 00:01:39.713
So one of those would be pretty easy to
wire up now that you've got everything

25
00:01:39.713 --> 00:01:42.213
that the rendering logic
needs in one place.

26
00:01:44.629 --> 00:01:48.587
Another piece to note about how
we've been wiring things up is that,

27
00:01:48.587 --> 00:01:53.365
generally speaking, doing things, like
modifying the state inside of your event

28
00:01:53.365 --> 00:01:56.560
listeners, doesn't tend to
scale very well either.

29
00:01:56.560 --> 00:02:01.290
Because maybe you're gonna have
multiple buttons that each do

30
00:02:01.290 --> 00:02:02.530
basically the same thing.

31
00:02:02.530 --> 00:02:04.510
Maybe it starts out
incrementing a variable, but

32
00:02:04.510 --> 00:02:07.970
then you need to add
more custom domain logic.

33
00:02:07.970 --> 00:02:11.302
So a good way of doing that
is to use an event emitter.

34
00:02:11.302 --> 00:02:16.350
And then so

35
00:02:16.350 --> 00:02:22.710
the first thing you can do is require
the EventEmitter library like this.

36
00:02:22.710 --> 00:02:26.930
And then you can make
a new EventEmitter object.

37
00:02:26.930 --> 00:02:32.660
I like to call it bus when I
do it when I do it this way.

38
00:02:32.660 --> 00:02:38.970
So now instead of modifying
the state in these events,

39
00:02:38.970 --> 00:02:43.195
we can emit an event that's
like a increment dash n.

40
00:02:43.195 --> 00:02:51.210
So I can do bus.emit('increment-n'),
and we can move

41
00:02:51.210 --> 00:02:56.600
these operations that actually are going
to modify the state someplace else.

42
00:02:57.690 --> 00:03:00.907
So what I can do is now
bus.on('increment-n').

43
00:03:03.470 --> 00:03:08.295
I can call the update function and
I can call this state.n++.

44
00:03:09.480 --> 00:03:12.240
Another thing that we can do while
we're sort of doing a little bit of

45
00:03:12.240 --> 00:03:15.060
refactoring work to make
this more scalable for

46
00:03:15.060 --> 00:03:20.130
a bigger project is, instead of
calling update directly from here,

47
00:03:21.180 --> 00:03:25.430
it's gonna scale better across multiple
files if we use an event for that as well.

48
00:03:25.430 --> 00:03:29.006
So I'm gonna bus.emit('update') or

49
00:03:29.006 --> 00:03:34.290
we could call it render or
we could call it something like that.

50
00:03:34.290 --> 00:03:37.615
And then I'm gonna just listen for
the update event and

51
00:03:37.615 --> 00:03:39.438
call update when it happens.

52
00:03:39.438 --> 00:03:44.809
This is gonna be nicer so that we don't
have to pass in the update function

53
00:03:44.809 --> 00:03:49.491
if we want to factor out all of
these events into their own file.

54
00:03:52.102 --> 00:03:57.329
So the final thing that we need to do
is now, instead of updating the state

55
00:03:57.329 --> 00:04:02.470
in here, we'll also commit an increment-x
event, and I can move this

56
00:04:02.470 --> 00:04:08.285
code up here to do pretty much the same
thing as we were doing with increment-n.

57
00:04:08.285 --> 00:04:12.490
Although, maybe x works a different way,
maybe it wraps around.

58
00:04:12.490 --> 00:04:19.830
And so having this logic all in one
place let's us kind of put the sort

59
00:04:19.830 --> 00:04:23.950
of policies about how the business
logic gotta work in a single place.

60
00:04:23.950 --> 00:04:25.690
So let's go ahead and do that.

61
00:04:25.690 --> 00:04:29.330
So (state.x + 1) mod 4.

62
00:04:30.660 --> 00:04:33.960
So I think that ought to
work if I update the file.

63
00:04:33.960 --> 00:04:40.100
Yep, so now when I click, once I go
past three it pops back around to four.

64
00:04:42.010 --> 00:04:44.980
Another common thing that I would
do at this point is we kind of

65
00:04:44.980 --> 00:04:46.990
are starting to see a separation in

66
00:04:49.210 --> 00:04:52.500
what this chunk of code does versus
what the other chunk of code does.

67
00:04:52.500 --> 00:04:55.760
So this is a good time to kind of
start moving some of these pieces out

68
00:04:55.760 --> 00:04:57.990
into their own files.

69
00:04:57.990 --> 00:05:04.580
So I can call this file,
I call it reduce.js.

70
00:05:04.580 --> 00:05:09.440
This is sort of a term of the art
in these kinds of applications.

71
00:05:09.440 --> 00:05:12.970
You have the idea of a reducer,
and the reducer operates,

72
00:05:12.970 --> 00:05:17.050
it sort of listens for
different kinds of state transitions.

73
00:05:17.050 --> 00:05:22.260
And it will modify the state and also emit
additional state events that it needs to.

74
00:05:22.260 --> 00:05:23.530
So just save it there.

75
00:05:24.690 --> 00:05:27.630
Now we can pass some
things in as arguments.

76
00:05:28.730 --> 00:05:32.210
So maybe we get the event
emitter as an argument and

77
00:05:32.210 --> 00:05:33.680
we also get the state as an argument.

78
00:05:35.690 --> 00:05:42.906
So now we can move all of that
code into just doing this or,

79
00:05:48.533 --> 00:05:50.610
We can clean up the code a little bit.

80
00:05:50.610 --> 00:05:56.510
Another important thing is you might also
want to do something like instead of

81
00:05:56.510 --> 00:06:01.370
even having the event
emitter exist at all,

82
00:06:01.370 --> 00:06:05.680
to completely remove that temptation you
might just have an admit function that's

83
00:06:05.680 --> 00:06:08.370
gonna live in the same scope
as your rendering logic.

84
00:06:08.370 --> 00:06:12.700
That way you can't be
tempted to emit events or

85
00:06:12.700 --> 00:06:15.040
do things like listen on events or
that kinda stuff.

86
00:06:15.040 --> 00:06:20.480
Because this kind of architecture,
which is more or

87
00:06:20.480 --> 00:06:26.250
less the redux architecture,
where you have a single state object and

88
00:06:26.250 --> 00:06:31.850
you have a separate sort of reducer
that's gonna listen for events.

89
00:06:31.850 --> 00:06:33.380
And then in your rendering logic,

90
00:06:33.380 --> 00:06:38.000
the only thing that you're gonna do
is kind of emit additional events.

91
00:06:38.000 --> 00:06:43.010
Maybe do a little bit of massaging
the data, like dealing with things

92
00:06:43.010 --> 00:06:47.920
like formatting maybe
different form elements

93
00:06:47.920 --> 00:06:52.370
into an object that you're gonna emit to
make those events be relatively clean.

94
00:06:52.370 --> 00:06:55.910
But this is a good way of
kind of separating out

95
00:06:55.910 --> 00:06:59.920
different pieces of logic that you
might have in your application.

96
00:06:59.920 --> 00:07:01.620
So just to make sure that this still runs.

97
00:07:02.890 --> 00:07:05.429
Yep, it's all running as before.

98
00:07:08.115 --> 00:07:11.461
So I got a request to add
a new kind of feature, and

99
00:07:11.461 --> 00:07:13.830
I think this would be pretty fun.

100
00:07:13.830 --> 00:07:17.750
So we can modify this example now, and

101
00:07:17.750 --> 00:07:23.590
I'm gonna commit that in
case I mess it up, refactor.

102
00:07:23.590 --> 00:07:25.321
We also need to add the reduce function.

103
00:07:27.838 --> 00:07:34.089
So we refactored with a separate reducer.

