WEBVTT

1
00:00:00.000 --> 00:00:04.161
&gt;&gt; If you wanna actually use this in a web
page, you can use this fantastic library.

2
00:00:04.161 --> 00:00:08.252
I think I've used it every day so
far these talks called yo-yo.

3
00:00:08.252 --> 00:00:09.994
There's also bel.

4
00:00:09.994 --> 00:00:10.740
These are related.

5
00:00:11.980 --> 00:00:15.766
So this library yo-yo uses hyperx and

6
00:00:15.766 --> 00:00:20.617
it uses this other library
called morphdom, and

7
00:00:20.617 --> 00:00:28.740
what morphdom does is just like you
can get in react with the virtual DOM.

8
00:00:28.740 --> 00:00:33.100
It can sort of compute the difference
between two DOM trees.

9
00:00:33.100 --> 00:00:38.700
And in the performance benchmarks that
they've run, it's actually just as fast

10
00:00:38.700 --> 00:00:43.590
to compare real DOM nodes as it
is to compare virtual DOM nodes.

11
00:00:43.590 --> 00:00:49.368
And then the benefit is that if you use
that technique, you can interoperate

12
00:00:49.368 --> 00:00:55.325
with maybe older code that expects that
generates kind of classic DOM nodes and

13
00:00:55.325 --> 00:01:01.101
you don't have to spend a lot of time
kind of fighting between the real DOM and

14
00:01:01.101 --> 00:01:07.357
the virtual DOM like you might have to if
you're using a virtual DOM based system.

15
00:01:07.357 --> 00:01:10.989
So let's just see what that looks like,
cuz it's really nice.

16
00:01:10.989 --> 00:01:16.712
So I'm gonna go in this directory and
we're gonna make a thing called yo.js.

17
00:01:16.712 --> 00:01:19.873
You can require yo-yo like this.

18
00:01:19.873 --> 00:01:22.460
And just for starters,
we can do something in node and

19
00:01:22.460 --> 00:01:24.312
then I'll make it run in the browser.

20
00:01:24.312 --> 00:01:28.410
So you can't pass in fragments.

21
00:01:28.410 --> 00:01:30.295
You actually have to
pass in a single element.

22
00:01:30.295 --> 00:01:36.028
So if you just begin everything with div
and /div, that's probably good enough.

23
00:01:36.028 --> 00:01:38.881
So we can have a little thing,

24
00:01:38.881 --> 00:01:43.802
can have a variable in there and
define it outside.

25
00:01:43.802 --> 00:01:46.928
So this works just like you might expect.

26
00:01:46.928 --> 00:01:50.836
Except in node, you're actually
going to get a fake DOM tree,

27
00:01:50.836 --> 00:01:53.291
because node doesn't have a real DOM.

28
00:01:53.291 --> 00:01:55.123
So it has to use a fake one.

29
00:01:55.123 --> 00:02:01.037
But if you call toString,
then you get back a string, pretty cool.

30
00:02:01.037 --> 00:02:05.969
So hopefully you can already see how this
might be really useful if you want to

31
00:02:05.969 --> 00:02:10.901
write code that's gonna run in the server
to render something the first time

32
00:02:10.901 --> 00:02:15.083
you load a page and then it's
gonna sort of upgrade itself into.

33
00:02:15.083 --> 00:02:19.746
And so just running in the browser and
doing reactive diffing operations

34
00:02:19.746 --> 00:02:25.020
without having to do a network round
trip every time can be really good.

35
00:02:25.020 --> 00:02:29.700
Okay, so if we wanna make this
actually run in a real browser,

36
00:02:29.700 --> 00:02:33.121
what we can do is you
can call html.update and

37
00:02:33.121 --> 00:02:39.074
you can give it some sort of root element
that it's gonna do the DOM diffing on.

38
00:02:39.074 --> 00:02:41.170
So I'll just create one of those.

39
00:02:41.170 --> 00:02:43.966
This is my standard way of doing that.

40
00:02:43.966 --> 00:02:49.171
You can do it in one line, because
appendChild will return its argument.

41
00:02:49.171 --> 00:02:49.936
So.

42
00:02:52.396 --> 00:02:56.461
Can make a div and then have a handle
on that div at the same time.

43
00:02:56.461 --> 00:02:59.819
So that's just a shorthand for
doing these two statements.

44
00:02:59.819 --> 00:03:04.660
So this would be if I'd done this

45
00:03:07.955 --> 00:03:14.083
So this and
this is the same thing just so you know.

46
00:03:14.083 --> 00:03:21.012
So if I call html.update, then if I
just have some blank HTML to use,

47
00:03:21.012 --> 00:03:27.591
I get with budo commands which
you can get npm-install-gbudo.

48
00:03:27.591 --> 00:03:32.085
It runs browserify behind the scenes and
then it's gonna run a local server for us.

49
00:03:32.085 --> 00:03:35.670
We see object HTMLDivElement,
because I'm still calling that toString.

50
00:03:35.670 --> 00:03:40.098
So if I remove that,

51
00:03:40.098 --> 00:03:46.096
then oops, there we go 5.

52
00:03:46.096 --> 00:03:52.593
So what's really cool is when we start
to actually modify things, modify state.

53
00:03:52.593 --> 00:03:57.769
A simple way to do that
is to put our update

54
00:03:57.769 --> 00:04:03.110
logic in our markup here into a function.

55
00:04:03.110 --> 00:04:06.989
We wanna call the function the first
time we load the page, but also we might

56
00:04:06.989 --> 00:04:10.884
have other elements, other activities
that are gonna change that state.

57
00:04:10.884 --> 00:04:15.938
So for example,
we might have a timer that's going to

58
00:04:15.938 --> 00:04:21.118
change that state like every
second will increment n.

59
00:04:21.118 --> 00:04:27.089
And then if we want the page to re-render,
we can call the update function again.

60
00:04:27.089 --> 00:04:27.891
We do that.

61
00:04:27.891 --> 00:04:32.249
And now, we have a counter that
counts up seconds starting from five.

62
00:04:36.129 --> 00:04:40.077
So I'm gonna commit that to the repo.

63
00:04:43.229 --> 00:04:46.239
Along with hyperx one and this one.

64
00:04:50.613 --> 00:04:54.209
Whoops, getting my git
command's confused here.

65
00:05:01.099 --> 00:05:06.270
Okay, so hopefully, I'll have a chance to
play with this kind of stuff over lunch.

66
00:05:06.270 --> 00:05:12.140
Another thing that I wanna show
really quick is that you can,

67
00:05:12.140 --> 00:05:17.445
whoops, is that you can also
have things like events.

68
00:05:17.445 --> 00:05:22.500
So to do that, maybe we'll have a button
instead of doing a set interval and

69
00:05:22.500 --> 00:05:25.163
that's gonna modify something else.

70
00:05:25.163 --> 00:05:30.095
So maybe we're also gonna have another

71
00:05:30.095 --> 00:05:35.325
variable x in a div and
we'll have a button

72
00:05:35.325 --> 00:05:40.862
with an onclick event that says, CLICK ME.

73
00:05:40.862 --> 00:05:42.826
We'll start out x at 0.

74
00:05:42.826 --> 00:05:47.201
And then every time we click that button,

75
00:05:47.201 --> 00:05:52.338
we can increment x and
call the update function.

76
00:05:55.062 --> 00:05:57.305
So we have our counter like before.

77
00:05:57.305 --> 00:05:58.661
So that's going on.

78
00:05:58.661 --> 00:05:59.823
And now, we have a button.

79
00:05:59.823 --> 00:06:01.212
When we click it, it goes up.

80
00:06:12.821 --> 00:06:16.061
&gt;&gt; So that's like very bare
bones react kind of stuff.

81
00:06:16.061 --> 00:06:17.932
&gt;&gt; Yep, that's all it takes.

82
00:06:17.932 --> 00:06:20.216
You don't have to have
a billion line config file.

83
00:06:20.216 --> 00:06:21.482
You don't have to have jsx.

84
00:06:21.482 --> 00:06:23.266
You don't have to have
much of anything at all.

85
00:06:23.266 --> 00:06:27.106
You just need a little bundler.

86
00:06:27.106 --> 00:06:30.784
That's pretty much it and
you get almost all of the benefits.

87
00:06:30.784 --> 00:06:33.970
And if you want more of the advanced
features, there's modules for that.

