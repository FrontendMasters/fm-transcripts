WEBVTT

1
00:00:00.000 --> 00:00:03.835
So we've seen some problems with
just using the core cert package.

2
00:00:03.835 --> 00:00:09.027
Although if you have something
that's really simple,

3
00:00:09.027 --> 00:00:11.684
it's not the worst option.

4
00:00:11.684 --> 00:00:16.903
One thing that can help us solve
these problems that we had

5
00:00:16.903 --> 00:00:22.230
with a cert is both this protocol
which is gonna give us some

6
00:00:22.230 --> 00:00:27.469
output to look at so
that we can see what tests we've run.

7
00:00:27.469 --> 00:00:32.200
And it also has ways of determining,
that we've run the correct

8
00:00:32.200 --> 00:00:37.456
number of assertions so that if we
forgot to call a callback somewhere,

9
00:00:37.456 --> 00:00:41.223
or if the programme called
process that exit zero,

10
00:00:41.223 --> 00:00:45.627
that those cases are also gonna
be caught by our test suite.

11
00:00:45.627 --> 00:00:50.481
So this is a very old protocol,
I think I'm not completely sure, but

12
00:00:50.481 --> 00:00:54.164
I think It first appeared
in the test suite for Perl,

13
00:00:54.164 --> 00:00:57.872
which is a old programming
language from the 80s.

14
00:00:57.872 --> 00:01:02.963
And it's just a very simple
way of doing assertions.

15
00:01:02.963 --> 00:01:07.975
So I can show you what
some of these looks like.

16
00:01:07.975 --> 00:01:13.291
So here is some real tap output,
the lines begin,

17
00:01:13.291 --> 00:01:17.861
the first thing you see
is the TAP version.

18
00:01:17.861 --> 00:01:20.793
You can put whatever other kind
of stuff you wanted in any line.

19
00:01:20.793 --> 00:01:24.994
So it's kind of common convention to use
a pound because in Perl that's in bash.

20
00:01:24.994 --> 00:01:27.498
That's what the comments looks like.

21
00:01:27.498 --> 00:01:32.985
And then you see different
assertions on their own line.

22
00:01:32.985 --> 00:01:37.226
So the main thing that tap
specifies is that lines that

23
00:01:37.226 --> 00:01:41.575
have a successful assertions
will begin with okay?.

24
00:01:41.575 --> 00:01:44.679
And then they'll have
a sequence number after it,

25
00:01:44.679 --> 00:01:49.307
that increments in lines that have
failures, we'll begin with a not okay.

26
00:01:49.307 --> 00:01:53.060
And they'll have the sequence there.

27
00:01:53.060 --> 00:01:57.105
And then, the other very important thing
is this, which is called the plan.

28
00:01:57.105 --> 00:02:01.197
So this specifies the number of
tests that were supposed to be run.

29
00:02:01.197 --> 00:02:05.394
So this is a way with libraries
that implement the test protocol,

30
00:02:05.394 --> 00:02:09.361
how they can say, well,
there should be 20 tests running,

31
00:02:09.361 --> 00:02:13.859
if there's not 20, if there's more
than that, or less than that,

32
00:02:13.859 --> 00:02:17.098
probably I'm not calling
a callback somewhere.

33
00:02:17.098 --> 00:02:19.041
Or I'm calling a callback twice or

34
00:02:19.041 --> 00:02:22.123
there's like some way that
some branching happened.

35
00:02:22.123 --> 00:02:23.237
That's not what I meant.

36
00:02:23.237 --> 00:02:29.631
It's not 100% of a way to ensure
the flow through your program,

37
00:02:29.631 --> 00:02:35.930
but it does catch most of the simple
kinds of errors you might make.

38
00:02:38.949 --> 00:02:43.212
Okay, so on the chat,
Tony asks what was in that file,

39
00:02:43.212 --> 00:02:46.288
file.txt, it's just this content.

40
00:02:46.288 --> 00:02:47.512
So just three lines.

41
00:02:47.512 --> 00:02:49.947
It says one, two, three and
there's a trailing newline.

42
00:02:49.947 --> 00:02:53.706
So right cat- v was it?

43
00:02:53.706 --> 00:02:57.672
I think anyways.

44
00:02:57.672 --> 00:03:02.208
Okay, so that's an example of what
a successful test run looks like.

45
00:03:02.208 --> 00:03:07.517
Let's go ahead, I'm just gonna modify the
test suite here to add in a failing test.

46
00:03:07.517 --> 00:03:11.119
So I'm gonna say t.ok(false),

47
00:03:11.119 --> 00:03:17.012
just to give you an idea for
what a failing case looks like.

48
00:03:17.012 --> 00:03:19.434
So here we see the line
that says not okay.

49
00:03:19.434 --> 00:03:22.643
We have the sequence number, so
the sequence number always increases.

50
00:03:22.643 --> 00:03:27.167
This is just a not yet another way that
the tap protocol can kind of just ensure

51
00:03:27.167 --> 00:03:30.915
that things are happening generally
in the correct order, but

52
00:03:30.915 --> 00:03:32.559
it does it automatically.

53
00:03:32.559 --> 00:03:35.401
And then it's up to
the individual libraries, but

54
00:03:35.401 --> 00:03:39.246
a lot of them will provide extra
information in these little blocks.

55
00:03:41.505 --> 00:03:46.259
Okay, so, I'm just gonna put that
back now and we see that it works.

56
00:03:46.259 --> 00:03:48.936
Also when you see these things like here,

57
00:03:48.936 --> 00:03:54.073
you're gonna get more into NPM scripts in
a bit, but we see this line npm error.

58
00:03:54.073 --> 00:03:59.108
It's hard to read on the screen,
npm knows that our test script

59
00:03:59.108 --> 00:04:03.958
failed because the testing
library set a nonzero exit code.

60
00:04:03.958 --> 00:04:08.806
So set an exit code that was
nonzero which you can get out of

61
00:04:08.806 --> 00:04:14.270
the command line with this dollar
sign question mark?, okay?

