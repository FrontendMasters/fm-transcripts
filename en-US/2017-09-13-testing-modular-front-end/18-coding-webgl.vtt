WEBVTT

1
00:00:00.290 --> 00:00:02.050
Okay, so let's write some WebGL.

2
00:00:02.050 --> 00:00:06.102
Like I've been advocating this entire
time, we should start from zero, because

3
00:00:06.102 --> 00:00:09.990
that's a really great way to learn stuff
and to have it in your working memory.

4
00:00:09.990 --> 00:00:13.251
And then you're not gonna be stuck
with a bunch of choices that some

5
00:00:13.251 --> 00:00:15.758
boilerplate made for
you that you'd never made and

6
00:00:15.758 --> 00:00:18.710
don't really know what's even
in your project anymore.

7
00:00:18.710 --> 00:00:22.685
So I'll call this directory webgl.

8
00:00:22.685 --> 00:00:25.345
I'll cd into it, so new directory.

9
00:00:25.345 --> 00:00:31.659
I'm gonna use a library called regl,
R-E-G-L, so you can npm install that.

10
00:00:31.659 --> 00:00:35.150
I'm gonna instantiate it in place.

11
00:00:35.150 --> 00:00:38.607
Maybe a bit later, we can make a WebGL
app that lives inside of a Choo app,

12
00:00:38.607 --> 00:00:41.910
because you could also do that and
we could use the same state system.

13
00:00:41.910 --> 00:00:43.846
I don't know, we'll see how far we get.

14
00:00:43.846 --> 00:00:49.635
So the main idea with regl is that regl
really wants you to be writing shaders,

15
00:00:49.635 --> 00:00:54.536
because these are really critical
to how the graphics pipeline in

16
00:00:54.536 --> 00:00:56.963
your computer actually works.

17
00:00:56.963 --> 00:01:01.553
So the first thing that we need
to do is have some geometry.

18
00:01:01.553 --> 00:01:05.284
And then the shaders' job,
there's gonna be two shaders,

19
00:01:05.284 --> 00:01:08.318
a fragment shader and a vertex shader.

20
00:01:08.318 --> 00:01:13.170
The vertex shader's job is to
take that geometry, which can be

21
00:01:13.170 --> 00:01:18.610
however you like it, but it needs to map
that geometry onto screen coordinates.

22
00:01:18.610 --> 00:01:24.425
So whatever geometry you have needs to be
represented as a location on the screen,

23
00:01:24.425 --> 00:01:28.705
from negative 1 to 1 in both the x and
the y-axis.

24
00:01:29.870 --> 00:01:32.070
So we can get some geometry.

25
00:01:32.070 --> 00:01:33.094
Here's a module called icosphere.

26
00:01:33.094 --> 00:01:36.020
There's also one called
bunny that's really good.

27
00:01:36.020 --> 00:01:37.240
You can npm install bunny.

28
00:01:38.340 --> 00:01:40.500
Here's what icosphere looks like,

29
00:01:40.500 --> 00:01:44.660
when you require it and
you give it a resolution like 3.

30
00:01:44.660 --> 00:01:46.250
It has these elements.

31
00:01:47.400 --> 00:01:50.750
It has positions array.

32
00:01:50.750 --> 00:01:55.957
So these are coordinates,
so xyz coordinates between

33
00:01:55.957 --> 00:02:00.946
negative 1 to 1 for
all of the vertices in a sphere.

34
00:02:00.946 --> 00:02:07.739
And also all of the indexes, which are
called cells that comprise the triangle.

35
00:02:07.739 --> 00:02:13.039
So inside of that positions array,
this says, okay, a triangle is gonna

36
00:02:13.039 --> 00:02:18.890
be the first thing in positions and the
thing at index 2 and the thing at index 3.

37
00:02:18.890 --> 00:02:20.560
So that's the first triangle.

38
00:02:20.560 --> 00:02:26.180
Second one is made of those vertices
that have been specified elsewhere.

39
00:02:27.920 --> 00:02:34.811
Okay, so we're gonna now have
a mesh from icosphere with 3.

40
00:02:34.811 --> 00:02:38.780
I think between one to five
is the different kinds of

41
00:02:38.780 --> 00:02:43.130
the fineness of the mesh,
how many vertices there are.

42
00:02:43.130 --> 00:02:47.250
So if you want a really crude looking
90s sphere, you can set it to one.

43
00:02:47.250 --> 00:02:50.365
If you want something a bit higher res,
you can set it higher.

44
00:02:50.365 --> 00:02:51.824
3 is a pretty good trade-off.

45
00:02:51.824 --> 00:02:56.300
The next thing that we can do is
we're gonna create a draw call.

46
00:02:56.300 --> 00:02:58.580
So you call regl with some options.

47
00:03:00.110 --> 00:03:03.053
One of those is a fragment shader,
which we can use template strings for it.

48
00:03:03.053 --> 00:03:06.171
And in a moment, we'll be using
a tagged template string function.

49
00:03:06.171 --> 00:03:09.439
So we're using some stuff
we've already seen.

50
00:03:09.439 --> 00:03:12.910
We also need to specify a vertex shader.

51
00:03:12.910 --> 00:03:17.660
And the other thing that we need
to do is specify attributes.

52
00:03:17.660 --> 00:03:23.140
So attributes are defined for
every vertex in a piece of geometry.

53
00:03:23.140 --> 00:03:29.120
And how that looks is if we define
an attribute called position,

54
00:03:29.120 --> 00:03:32.080
then in the vertex shader,
we can load that.

55
00:03:32.080 --> 00:03:36.390
So unfortunately, I'm gonna be using
a language you maybe haven't seen before.

56
00:03:36.390 --> 00:03:38.680
It's called GLSL and it's based on C.

57
00:03:38.680 --> 00:03:42.590
But hopefully just by looking at it,
you can kinda poke around at it and

58
00:03:42.590 --> 00:03:47.150
just play with it, cuz I think that's
the best way to learn this stuff anyways.

59
00:03:47.150 --> 00:03:48.920
So we have an attribute called position.

60
00:03:48.920 --> 00:03:51.855
You can have other attributes if you want.

61
00:03:51.855 --> 00:03:55.292
For example, if I want to get normals,

62
00:03:55.292 --> 00:03:59.991
I can load a package called
angle-normals from npm.

63
00:03:59.991 --> 00:04:02.676
And then I can pass that along as well.

64
00:04:02.676 --> 00:04:09.285
I think it takes the cells first and
then the positions.

65
00:04:09.285 --> 00:04:12.340
It's the order of the arguments for
that package.

66
00:04:12.340 --> 00:04:16.640
So in addition to position,
I'm gonna want normal.

67
00:04:18.400 --> 00:04:23.710
So the vertex shader's job, like I
mentioned, is to map that input geometry,

68
00:04:23.710 --> 00:04:26.450
which is provided by attributes,
onto the screen.

69
00:04:26.450 --> 00:04:29.460
So we need to splat it
onto the screen somehow.

70
00:04:29.460 --> 00:04:31.360
So to do that,
you can assign to gl_Position.

71
00:04:31.360 --> 00:04:37.310
I'm gonna use another package for
doing that.

72
00:04:37.310 --> 00:04:38.320
So it's called regl-camera.

73
00:04:38.320 --> 00:04:41.375
It takes regl as the first argument.

74
00:04:41.375 --> 00:04:45.554
You can give it some other arguments
if you want, like a distance.

75
00:04:45.554 --> 00:04:48.243
So I think distance of
4 maybe will be good.

76
00:04:48.243 --> 00:04:53.300
And that camera is going to
define some uniforms for us.

77
00:04:53.300 --> 00:04:58.672
So uniforms are variables that,
unlike attributes which are defined

78
00:04:58.672 --> 00:05:03.953
kind of step-by-step for each vertices,
uniforms are present for

79
00:05:03.953 --> 00:05:08.160
the entire shader,
uniformly for every vertex.

80
00:05:08.160 --> 00:05:14.295
So the uniforms are gonna be
called projection and view.

81
00:05:14.295 --> 00:05:17.448
So we can multiply those together.

82
00:05:17.448 --> 00:05:21.681
This is just a bunch of matrix math.

83
00:05:21.681 --> 00:05:26.689
This is just a fancy way of
turning those coordinates from

84
00:05:26.689 --> 00:05:31.920
the sphere onto the screen
with a perspective projection.

85
00:05:33.220 --> 00:05:38.669
So we can then multiply by
vec4 of the position and 1,

86
00:05:38.669 --> 00:05:45.191
because position is a vec3 and
it needs to be a vec4 for reasons.

87
00:05:48.345 --> 00:05:54.020
Okay, so then in our fragment shader,
we also need to specify a function.

88
00:05:54.020 --> 00:05:57.900
And in that one, we assign to
this thing called gl_FragColor.

89
00:05:57.900 --> 00:05:59.710
So I'm just gonna set everything to green.

90
00:06:01.160 --> 00:06:05.610
So this is red channel, green channel,
blue channel, and alpha channel.

91
00:06:07.080 --> 00:06:10.112
The final thing we need to do with our
fragment shaders is set the precision.

92
00:06:10.112 --> 00:06:16.383
So for some reason, you need to specify
how much precision your float should have.

93
00:06:16.383 --> 00:06:21.376
Because old hardware couldn't really deal
with high precision floating point cuz

94
00:06:21.376 --> 00:06:23.310
it was really cheap or just bad.

95
00:06:23.310 --> 00:06:28.850
I don't know, but if you set it too high
p, if that doesn't work, do medium p.

96
00:06:28.850 --> 00:06:29.610
If that doesn't work,

97
00:06:29.610 --> 00:06:35.010
then you probably shouldn't even run WebGL
on that thing at all cuz it's really old.

98
00:06:35.010 --> 00:06:37.421
Okay, so the final thing, let's see.

99
00:06:37.421 --> 00:06:38.910
So this is our draw call.

100
00:06:38.910 --> 00:06:41.360
I think this should basically work.

101
00:06:41.360 --> 00:06:43.390
Then we can set up a loop.

102
00:06:43.390 --> 00:06:46.215
This loop is gonna run at 60 fps using

103
00:06:46.215 --> 00:06:50.580
window.requestAnimationFrame behind
the scenes.

104
00:06:50.580 --> 00:06:51.470
We can call our draw function.

105
00:06:54.214 --> 00:07:00.627
We also need to, for reasons, wrap our
draw function in the camera function,

106
00:07:00.627 --> 00:07:04.140
which is gonna set up some uniforms for
us.

107
00:07:05.160 --> 00:07:08.215
Okay, so
I think now if I run that in budo,

108
00:07:10.840 --> 00:07:14.139
Let me close that, and
I'm gonna open up localhost there.

109
00:07:18.951 --> 00:07:21.300
Okay, error compiling vertex shader.

110
00:07:22.458 --> 00:07:24.989
Right, it should be uniform, not uniforms.

111
00:07:27.914 --> 00:07:30.627
So this library is really great,
because if you do make a syntax error,

112
00:07:30.627 --> 00:07:31.770
it actually tells you where.

113
00:07:31.770 --> 00:07:36.531
Unlike if you try to bind WebGL yourself
or if you use some of the other libraries

114
00:07:36.531 --> 00:07:40.141
that wrap WebGL,
it's really hard to debug your shaders,

115
00:07:40.141 --> 00:07:43.629
if you can even get your shaders
into the geometry at all.

116
00:07:46.140 --> 00:07:47.480
Okay, another bug.

117
00:07:47.480 --> 00:07:47.980
Let's see what it is.

118
00:07:52.219 --> 00:07:55.430
All right, it's every single frame.

119
00:07:55.430 --> 00:07:58.489
It looks like it's having this error,
missing vertex count.

120
00:07:58.489 --> 00:08:03.282
All right, so I forgot to actually
pass in the cells which are,

121
00:08:03.282 --> 00:08:08.840
remember we were looking at the icosphere
and it had positions in cells.

122
00:08:08.840 --> 00:08:10.169
I just forgot to pass in the triangles.

123
00:08:14.522 --> 00:08:15.760
There we go.

124
00:08:17.090 --> 00:08:18.178
Those errors are just from earlier.

125
00:08:18.178 --> 00:08:22.030
So there is a green sphere, and
we can even move it around.

126
00:08:22.030 --> 00:08:23.190
I can zoom in and out.

127
00:08:23.190 --> 00:08:24.579
Whoa, that's really fast.

128
00:08:26.780 --> 00:08:29.100
Some other things we can do
are set a background color.

129
00:08:29.100 --> 00:08:35.560
So if I want to set a background color,
I can do regl.clear with color.

130
00:08:35.560 --> 00:08:37.760
Maybe I'll set the background to be cyan.

131
00:08:39.780 --> 00:08:41.451
And I'm also gonna clear the depth buffer,

132
00:08:41.451 --> 00:08:43.131
which I'm not gonna go
into how that works.

133
00:08:43.131 --> 00:08:49.330
So if I reload, now we have a cyan
background and a green sphere.

134
00:08:49.330 --> 00:08:51.617
Let's make the sphere dance,
should be really fun.

135
00:08:53.839 --> 00:08:58.980
So we can do that by passing in
another uniform, that's gonna be time.

136
00:08:58.980 --> 00:09:07.430
So to do that, you can pass in whatever
uniforms you want, call it time.

137
00:09:08.600 --> 00:09:13.274
You can pass in whatever you like here,

138
00:09:13.274 --> 00:09:18.230
but regl already keeps track of a time
variable, so we're just gonna do that.

139
00:09:18.230 --> 00:09:23.005
And this is actually the longer form for
this shortcut,

140
00:09:23.005 --> 00:09:26.470
because regl is already tracking that.

141
00:09:27.640 --> 00:09:32.540
So now that we have the time,
what we can do is use the surface normal.

142
00:09:34.570 --> 00:09:38.530
A surface normal is something
that points out from a face.

143
00:09:38.530 --> 00:09:42.190
So if you have a sphere, the surface
normal is always gonna point out.

144
00:09:42.190 --> 00:09:45.622
So it's the same as the coordinate
normalized in this case, but whatever.

145
00:09:45.622 --> 00:09:50.614
If we take the normal and
we use a package called

146
00:09:50.614 --> 00:09:54.966
snoise with this thing called glslify,

147
00:09:54.966 --> 00:09:58.680
then we can make the sphere dance.

148
00:09:58.680 --> 00:10:02.540
So there's this package
called glsl-noise that

149
00:10:04.140 --> 00:10:08.290
we can load as a module into our
shader code that's published to npm.

150
00:10:09.620 --> 00:10:14.573
And so to do that,
we need to require glslify.

151
00:10:14.573 --> 00:10:17.988
And then in our vertex shader,
we can now have modules,

152
00:10:17.988 --> 00:10:22.290
just like we've been doing in our
frontend code, but it looks weird.

153
00:10:22.290 --> 00:10:24.580
It looks like pragma glslify.

154
00:10:24.580 --> 00:10:29.060
And then you can define the name and
you give it a require call.

155
00:10:30.700 --> 00:10:33.008
So I'm gonna have 4d simplex noise.

156
00:10:33.008 --> 00:10:35.160
It's usually a good bet.

157
00:10:35.160 --> 00:10:37.950
This is like the Hello World of graphics.

158
00:10:37.950 --> 00:10:42.700
Just plot something with simplex noise and
it'll look really blobby and cool.

159
00:10:42.700 --> 00:10:44.468
So if I go ahead and do that, and

160
00:10:44.468 --> 00:10:48.007
I'm gonna need another uniform
that's a float called time.

161
00:10:50.377 --> 00:10:57.443
So I take the normal, I multiply it
by snoise of the position with time.

162
00:10:57.443 --> 00:11:02.100
And then a small, usually you don't
want it to be the whole length.

163
00:11:02.100 --> 00:11:04.878
You want the blobs to sort of travel and
look cool.

164
00:11:07.380 --> 00:11:14.780
And then I need to run budo with glslify
transform, which looks like that.

165
00:11:16.130 --> 00:11:20.803
So we ought to see cool blobbiness.

166
00:11:20.803 --> 00:11:24.960
It's blobbing, and
you can spin it around and stuff.

167
00:11:24.960 --> 00:11:31.811
We could also use noise to draw the
surface contours in the fragment shader.

168
00:11:31.811 --> 00:11:33.080
So why don't we go ahead and do that?

169
00:11:33.080 --> 00:11:34.210
That's also fun.

170
00:11:34.210 --> 00:11:35.989
It's easy to do now that
we've got everything set up.

171
00:11:37.350 --> 00:11:43.127
So in our fragment shader,
we can do pragma glslify: snoise,

172
00:11:43.127 --> 00:11:47.167
just like before, noise/simplex/4d.

173
00:11:47.167 --> 00:11:51.792
And now, to pass in variables
that we wanna use in our

174
00:11:51.792 --> 00:11:56.850
fragment shader,
you can do this thing called varying.

175
00:11:56.850 --> 00:11:58.190
So these are the three kinds of variables.

176
00:11:58.190 --> 00:12:00.065
There's uniform variables
defined everywhere.

177
00:12:00.065 --> 00:12:02.547
Attributes, which are defined per vertex.

178
00:12:02.547 --> 00:12:10.290
And varying variables, which are gonna
be interpolated based on texels.

179
00:12:10.290 --> 00:12:14.630
So how this works, so a lot of jargon,
I just threw out all at once.

180
00:12:14.630 --> 00:12:19.200
How it works is when you have a vertex, so

181
00:12:19.200 --> 00:12:23.690
the program, the vertex shader's job is to
take geometry from a bunny or a sphere or

182
00:12:23.690 --> 00:12:25.680
something, and to plot it on the screen.

183
00:12:26.870 --> 00:12:30.250
So it only has to do that for
every vertex.

184
00:12:30.250 --> 00:12:32.930
But if you imagine the number of
pixels that you see on the screen,

185
00:12:32.930 --> 00:12:37.930
there are far fewer vertices
than there are pixels.

186
00:12:37.930 --> 00:12:42.090
So when you have a varying parameter,

187
00:12:42.090 --> 00:12:47.160
what the fragment shader is gonna get
is those variables that you've defined

188
00:12:47.160 --> 00:12:53.000
per vertex are gonna linearly interpolate
from one vertex to the other.

189
00:12:53.000 --> 00:13:01.070
So if you use a color, it'll fade from red
to cyan or to orange or pink or something.

190
00:13:02.300 --> 00:13:03.667
All right, so anyways,
we're gonna use one of those now.

191
00:13:03.667 --> 00:13:11.133
It's called vnorm and vpos,
just to pass in the position.

192
00:13:11.133 --> 00:13:16.173
And, yeah, vpos = position,
and vnorm = normal,

193
00:13:16.173 --> 00:13:23.090
just cuz we want those vertex
attributes in our fragment shader.

194
00:13:23.090 --> 00:13:26.513
So we do the same thing and you have
to specify what type of thing that is.

195
00:13:26.513 --> 00:13:30.000
So it's a vec3 in this case.

196
00:13:30.000 --> 00:13:32.439
And once you've loaded them,
so we can do something cool.

197
00:13:32.439 --> 00:13:37.202
We'll just start out by taking
the vnorm+1.0 because it's actually

198
00:13:37.202 --> 00:13:41.445
gonna be from negative 1 to 1,
and multiplying that by 0.5.

199
00:13:42.760 --> 00:13:48.937
And so that's just gonna give us a cool
color on top of green, I think, we'll see.

200
00:13:48.937 --> 00:13:49.437
Error.

201
00:13:55.344 --> 00:13:59.374
So the problem is we're actually
doing this glslify thing, but

202
00:13:59.374 --> 00:14:02.490
we forgot that it's
a tagged template string.

203
00:14:02.490 --> 00:14:06.640
So we need to put in the glsl
before the backtick,

204
00:14:06.640 --> 00:14:12.230
just like in HTML length, but
way tripper because we're in WebGL.

205
00:14:12.230 --> 00:14:12.789
Okay, so another problem.

206
00:14:16.951 --> 00:14:17.732
Let's see.

207
00:14:21.702 --> 00:14:25.555
So we're trying to multiply vec3 with a
vec4, which WebGL wasn't very happy about.

208
00:14:25.555 --> 00:14:31.020
So you need to be really
careful about that kinda stuff.

209
00:14:31.020 --> 00:14:32.886
Otherwise, WebGL will not accept it.

210
00:14:35.540 --> 00:14:36.560
There we go.

211
00:14:36.560 --> 00:14:37.254
So that looks cool.

212
00:14:37.254 --> 00:14:41.750
You could see it's darker on the bottom
because the surface normals point down

213
00:14:41.750 --> 00:14:42.780
versus point up.

214
00:14:43.870 --> 00:14:45.320
That looks pretty cool.

215
00:14:45.320 --> 00:14:49.239
Now let's make it even cooler by using
some simplex noise in our fragment

216
00:14:49.239 --> 00:14:49.954
shader now.

217
00:14:49.954 --> 00:14:54.160
So we can just add that in to this stuff.

218
00:14:55.460 --> 00:15:01.340
And we'll use the vpos maybe,
we can use the vnorm, and also time.

219
00:15:04.891 --> 00:15:05.789
Times 0.2.

220
00:15:09.282 --> 00:15:13.840
And maybe we also wanna
use HSL color space.

221
00:15:13.840 --> 00:15:17.824
So there's HSL, which is hue,
saturation, and luminosity, versus RGB.

222
00:15:17.824 --> 00:15:20.929
HSL is great because the hue parameter,

223
00:15:20.929 --> 00:15:26.038
as it goes from zero to one,
it goes across the rainbow, from red,

224
00:15:26.038 --> 00:15:31.430
orange, yellow, green, and
blue, which looks really cool.

225
00:15:31.430 --> 00:15:33.340
So let's use hsl2rgb.

226
00:15:34.530 --> 00:15:38.640
So hsl2rgb, like that.

227
00:15:38.640 --> 00:15:45.200
And now, hsl2rgb,
we'll use simplex noise for the hue.

228
00:15:47.020 --> 00:15:50.280
And maybe slow that down a bit.

229
00:15:50.280 --> 00:15:52.430
And then we'll just set the saturation and
luminosity.

230
00:15:53.590 --> 00:16:01.120
Saturation of 1 looks cool because
then it's, And there's a problem.

231
00:16:01.120 --> 00:16:01.830
Let's see what it is.

232
00:16:02.830 --> 00:16:05.734
Cool, people in the chat seem to like
what's happening so far, that's good.

233
00:16:05.734 --> 00:16:13.708
[LAUGH] Right, so I forgot to
actually set the uniform float time.

234
00:16:13.708 --> 00:16:15.680
And we've already set up that uniform,

235
00:16:15.680 --> 00:16:18.242
so we can just do that in
our fragment shader as well.

236
00:16:20.724 --> 00:16:22.140
There we go.

237
00:16:22.140 --> 00:16:22.700
It's pretty cool.

238
00:16:24.240 --> 00:16:27.634
Just kinda blobbing, blobbing gently.

239
00:16:30.835 --> 00:16:33.700
Anyways, that's just
a little sampler of WebGL,

240
00:16:33.700 --> 00:16:35.840
which is now part of the web platform.

241
00:16:35.840 --> 00:16:39.920
So I think if your job is web developer,
this is now part of your job.

242
00:16:39.920 --> 00:16:41.480
It's your job to learn this.

