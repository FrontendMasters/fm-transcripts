WEBVTT

1
00:00:00.330 --> 00:00:04.480
Just a few other things I wanted
to cover about this basic stack.

2
00:00:04.480 --> 00:00:05.760
There's a bunch of transforms.

3
00:00:05.760 --> 00:00:09.032
So template strings have
pretty good browser support.

4
00:00:09.032 --> 00:00:13.355
But if you need to support older
browsers that don't have them,

5
00:00:13.355 --> 00:00:17.677
you can use some of these other
packages like yo-yoify that turn

6
00:00:17.677 --> 00:00:20.500
the template strings into expressions.

7
00:00:20.500 --> 00:00:23.117
So here I can just show
you what that looks like.

8
00:00:25.224 --> 00:00:28.846
Yo-yoify, if I even have
it in my path hopefully.

9
00:00:31.925 --> 00:00:34.360
Okay, so let's pipe that to less.

10
00:00:36.380 --> 00:00:41.780
So previously, we had a bit of
code in this block with app.route.

11
00:00:41.780 --> 00:00:42.720
So I'm gonna search for that.

12
00:00:43.866 --> 00:00:48.280
Okay, so yo-yoify took this
code that we wrote and it

13
00:00:48.280 --> 00:00:51.710
replaced it with a bunch of createElements
and all kinds of stuff like that.

14
00:00:51.710 --> 00:00:56.271
So, that's also gonna be
faster than parsing HTML

15
00:00:56.271 --> 00:00:59.250
chunks on the fly in JavaScript.

16
00:00:59.250 --> 00:01:01.914
So a handy thing to do for production.

17
00:01:01.914 --> 00:01:05.761
It looks ugly, but you don't have to
look at it cuz it's in the bundle,

18
00:01:05.761 --> 00:01:07.230
which is already ugly.

19
00:01:07.230 --> 00:01:08.910
So that's nice.

20
00:01:08.910 --> 00:01:13.360
Also choo and
other packages include a bunch of asserts.

21
00:01:13.360 --> 00:01:16.470
So remember from testing earlier,
require assert.

22
00:01:16.470 --> 00:01:17.950
People do that in libraries and

23
00:01:17.950 --> 00:01:21.640
you can use this transform called
unassertify to remove them again.

24
00:01:22.720 --> 00:01:26.620
So you can hook these up through a
browserify pipeline on the command line by

25
00:01:26.620 --> 00:01:27.748
doing dash t.

26
00:01:27.748 --> 00:01:32.489
So unassertify whatever, or you can set up

27
00:01:32.489 --> 00:01:37.373
your package.json file to work like this.

28
00:01:46.951 --> 00:01:51.879
Or, if you don't like configuring
things at all, instead of browserify or

29
00:01:51.879 --> 00:01:55.550
budo, you can use this other
package called bankai.

30
00:01:55.550 --> 00:01:59.050
So, bankai already has all of that stuff
inside of it, including support for

31
00:01:59.050 --> 00:02:03.210
sheetify, which is another transform
that lets you do inline CSS.

32
00:02:05.330 --> 00:02:09.180
And the nice thing about sheetify
is the CSS can be inline and

33
00:02:09.180 --> 00:02:11.850
it's scoped inside of
your JavaScript files.

34
00:02:11.850 --> 00:02:14.800
But then a pre processing
step can remove that CSS and

35
00:02:14.800 --> 00:02:18.930
put it in a CSS bundle that
you can put in a link tag.

36
00:02:18.930 --> 00:02:21.840
That kind of gives a pretty good mix of

37
00:02:21.840 --> 00:02:26.830
both benefits of including CSS and
JavaScript without

38
00:02:26.830 --> 00:02:31.110
the downside of all of the runtime
parsing overhead that it brings.

