WEBVTT

1
00:00:00.150 --> 00:00:01.958
We've seen this little bit already but

2
00:00:01.958 --> 00:00:05.472
there is this fantastic feature that I
don't hear a whole lot of talk about.

3
00:00:05.472 --> 00:00:09.534
It's part of ES6 called template strings,
so

4
00:00:09.534 --> 00:00:15.330
this is a new part of the language
that has multiline stream syntax.

5
00:00:15.330 --> 00:00:20.473
So if I go ahead and
run this program, what it's gonna

6
00:00:20.473 --> 00:00:25.818
do is, Call it template.js.

7
00:00:25.818 --> 00:00:31.448
So this file will just
print out those strings,

8
00:00:31.448 --> 00:00:37.097
and it can use variables
from the environment.

9
00:00:37.097 --> 00:00:38.962
So here I have a variable called n, so

10
00:00:38.962 --> 00:00:42.932
this is gonna print hi then on the next
line, it's gonna print n equals 5, and

11
00:00:42.932 --> 00:00:45.904
then on the next line,
it's gonna print something else.

12
00:00:45.904 --> 00:00:50.781
So, really simple it seems
like this isn't so important.

13
00:00:50.781 --> 00:00:55.184
I guess it could replace a lot of places
where you have to load a custom template

14
00:00:55.184 --> 00:00:56.694
engine into the browser.

15
00:00:56.694 --> 00:01:01.990
So you kind of get this for free now,
and there are ways to run pre-processing

16
00:01:01.990 --> 00:01:07.288
steps when you ship for production in
case people's browsers who are loading

17
00:01:07.288 --> 00:01:12.854
your page don't have this feature yet,
although it's pretty well supported.

18
00:01:12.854 --> 00:01:17.547
There's also this thing that's
even more obscure called tags,

19
00:01:17.547 --> 00:01:22.683
template, string and these are really
fantastic, it looks a bit odd.

20
00:01:22.683 --> 00:01:28.629
So if I go into this function again,
so you can put another function,

21
00:01:28.629 --> 00:01:33.038
I'll call it tag in front
of the opening backtick,

22
00:01:33.038 --> 00:01:36.437
that is the template string function.

23
00:01:36.437 --> 00:01:40.309
And what this lets you do,
is write your own

24
00:01:40.309 --> 00:01:45.377
implementation of how you
want the templating to work.

25
00:01:45.377 --> 00:01:50.109
So how it works is you get an array
of different string chunks and

26
00:01:50.109 --> 00:01:54.932
then everything that's put in
these dollar sign curly braces,

27
00:01:54.932 --> 00:01:57.181
you also get a handle on that.

28
00:01:57.181 --> 00:01:59.836
I'll just print out the arguments,

29
00:02:02.354 --> 00:02:04.872
Then the return value is the return
value of this whole thing.

30
00:02:04.872 --> 00:02:10.439
So it's like calling the function yourself
with like a second write out long form,

31
00:02:10.439 --> 00:02:11.802
what that would be.

32
00:02:11.802 --> 00:02:18.108
So these two things would be equivalent,
so this would be hi,

33
00:02:18.108 --> 00:02:25.008
'n = 'Wow', I guess there would be
like new lines and stuff in there.

34
00:02:25.008 --> 00:02:31.908
It would be hi in equals actually.

35
00:02:31.908 --> 00:02:36.192
And then it would be wow, so
that would be the same thing.

36
00:02:36.192 --> 00:02:40.585
And then the additional arguments
that are passed in are all of

37
00:02:40.585 --> 00:02:43.133
the values that are interpolated.

38
00:02:43.133 --> 00:02:48.144
Kind of a bit esoteric,
but the important thing is

39
00:02:48.144 --> 00:02:54.230
you can have quite sophisticated
ways of doing templating,

40
00:02:54.230 --> 00:02:59.361
and also other kinds of
things all together like for

41
00:02:59.361 --> 00:03:06.189
example, you can use this technique
to have GLSL shaders in webGL.

42
00:03:06.189 --> 00:03:10.300
So there's a modular system called
GLSLFI that uses this technique as well.

43
00:03:10.300 --> 00:03:15.810
We'll be going in to that a little bit
later, so if I just run this program now,

44
00:03:15.810 --> 00:03:20.236
we see the arguments, so
the first argument is that array, and

45
00:03:20.236 --> 00:03:25.771
then the second argument is all of the
interpolated values that are passed in.

46
00:03:27.383 --> 00:03:30.281
So I've got a little library for doing
this kind of stuff that's now used in

47
00:03:30.281 --> 00:03:32.262
quite a few packages that
we'll be talking about.

48
00:03:32.262 --> 00:03:35.324
It's called hyper x,
and it's an HTML parser

49
00:03:35.324 --> 00:03:40.201
that's built to be used in this way
as a tagged template string function.

50
00:03:40.201 --> 00:03:44.818
What that looks like,
is you load up the module hyperx,

51
00:03:44.818 --> 00:03:48.749
then you can pass in your
own implementation for

52
00:03:48.749 --> 00:03:52.001
what's going to happen for every tag.

53
00:03:52.001 --> 00:03:57.786
So here the arguments that hyperx is
going to supply are the tag name,

54
00:03:57.786 --> 00:04:03.489
so that's like a div, or input,
or text area, whatever you like.

55
00:04:03.489 --> 00:04:09.406
The props are all of the things maybe
you like the class equals whatever,

56
00:04:09.406 --> 00:04:14.461
and so that's an object that
map's all of those properties.

57
00:04:14.461 --> 00:04:19.927
And then the children are if you have
something that is not self closing,

58
00:04:19.927 --> 00:04:24.407
like a div tag, then the children
are everything that lives

59
00:04:24.407 --> 00:04:28.731
in beside between the div,
and the &lt;/div&gt; at the end.

60
00:04:28.731 --> 00:04:34.816
So, you can imagine how you might be able
to use one of these new techniques for

61
00:04:34.816 --> 00:04:37.914
building front end like a virtual DOM.

62
00:04:37.914 --> 00:04:42.941
Or Dom diffing to build your own virtual

63
00:04:42.941 --> 00:04:49.035
Dom infrastructure with
a pretty nice template

64
00:04:49.035 --> 00:04:55.905
syntax with just a small
reusable library like this.

65
00:04:55.905 --> 00:05:00.171
If I run this program,
it's gonna gonna print out the tag name,

66
00:05:00.171 --> 00:05:03.422
the props and the children for
every little bit.

67
00:05:03.422 --> 00:05:08.851
So I'll call this html.js or
I'll call it hyperx.js,

68
00:05:10.883 --> 00:05:15.667
So here's our program, I run it, I get
back so these things are the first that

69
00:05:15.667 --> 00:05:20.524
were printed, so see that the h1 tag is
in there, the div tag is in there we also

70
00:05:20.524 --> 00:05:24.892
got some some attributes like
3,000 is the interpolated value.

