WEBVTT

1
00:00:00.070 --> 00:00:02.890
One of the final things I
wanted to cover before we

2
00:00:02.890 --> 00:00:06.020
do continuous integration is NPM scripts.

3
00:00:06.020 --> 00:00:09.950
So NPM scripts are a way for
you to kind of

4
00:00:09.950 --> 00:00:13.910
have little pieces of automation that
are gonna be set for your package.

5
00:00:13.910 --> 00:00:20.760
So if I have a module, like here I'm
gonna just hop into a real one, you can

6
00:00:20.760 --> 00:00:26.310
have different scripts like if we wanna
run the tape command for a test suite.

7
00:00:26.310 --> 00:00:30.510
You can install it as a dev dependency,
which shows up in the package JSON right

8
00:00:30.510 --> 00:00:37.630
here, and then whenever I run NPM test,
this command is gonna run.

9
00:00:37.630 --> 00:00:42.610
So there's a few special cases for
NPM, things like npm test and

10
00:00:42.610 --> 00:00:48.220
npm start will automatically run the
command in scripts called tester start.

11
00:00:49.350 --> 00:00:52.631
But you can put more things like for
example, if you wanna put a build script

12
00:00:52.631 --> 00:00:56.034
in there, you could call it build, or
watch, or dev, or whatever you like.

13
00:00:56.034 --> 00:00:59.880
Or prod for production build.

14
00:00:59.880 --> 00:01:02.970
If you do npm run in front of that name,
then it will run it, so

15
00:01:02.970 --> 00:01:04.760
you can use npm to running your stuff.

16
00:01:07.070 --> 00:01:07.950
That's how that works.

17
00:01:10.080 --> 00:01:13.510
If you want to set up your system for
continuous integration,

18
00:01:13.510 --> 00:01:19.010
you'll have to probably include
an NPM script to run your test suite.

19
00:01:19.010 --> 00:01:24.185
So here I have a real demo,

20
00:01:24.185 --> 00:01:29.620
so this repository currently doesn't

21
00:01:29.620 --> 00:01:35.230
have any kind of continuous integration,
although, it does have a test script.

22
00:01:35.230 --> 00:01:39.350
So in this case, I'm even setting an
environment variable because this module

23
00:01:39.350 --> 00:01:44.620
uses dates and times,
and that kind of stuff.

24
00:01:44.620 --> 00:01:48.290
And I was in the Pacific Time Zone
when I wrote it [LAUGH] so

25
00:01:48.290 --> 00:01:52.170
you have to be in the Pacific Time Zone
for all of my test cases to work.

26
00:01:52.170 --> 00:01:54.510
It actually doesn't completely work,

27
00:01:54.510 --> 00:01:57.490
I think because of some
daylight savings issue.

28
00:01:57.490 --> 00:02:01.050
Now that it's either daylight savings,

29
00:02:01.050 --> 00:02:04.400
or not, I don't know exactly,
but it's one of those things.

30
00:02:04.400 --> 00:02:08.970
So one of the cases actually
doesn't work right now,

31
00:02:08.970 --> 00:02:15.680
which is fine because we can now set up
some continuous integration on Travis CI.

32
00:02:15.680 --> 00:02:21.179
So what that looks like is every time
I push code to GitHub in this case,

33
00:02:21.179 --> 00:02:24.361
then Travis CI is watching for changes.

34
00:02:24.361 --> 00:02:29.103
And it will automatically download my
entire code suite, run NPM install, and

35
00:02:29.103 --> 00:02:30.749
then it'll run NPM tests.

36
00:02:31.790 --> 00:02:38.063
And so, I can put a badge in
the read me that looks like this,

37
00:02:38.063 --> 00:02:43.978
or so I can show you on real
package what that looks like.

38
00:02:47.445 --> 00:02:53.100
So on a lot of packages, you might see
these little icons like build passing,

39
00:02:53.100 --> 00:02:57.630
if my tests aren't working on CI,
this badge will turn red.

40
00:02:57.630 --> 00:03:01.860
So it's kind of a handy way to
know that your tests are failing,

41
00:03:01.860 --> 00:03:04.980
if you're not reading your email or
you're not doing other stuff.

42
00:03:08.050 --> 00:03:11.200
It's also a way to communicate to
users of that library that yes,

43
00:03:11.200 --> 00:03:14.960
in fact, this piece of code works and
its solid.

44
00:03:14.960 --> 00:03:19.367
So to set this up, what you can do
is you can make a file that's called

45
00:03:19.367 --> 00:03:24.920
.travis.yml for
YAML which it's this weird old JSON.

46
00:03:24.920 --> 00:03:28.442
That's popular still in Ruby land,
maybe I don't know.

47
00:03:28.442 --> 00:03:32.076
Anyways, so you can copy and
paste this chunk of text,

48
00:03:32.076 --> 00:03:35.078
which is pretty good for
most node packages.

49
00:03:35.078 --> 00:03:38.001
If you need to do things like
install system scripts or whatever,

50
00:03:38.001 --> 00:03:40.404
there's a lot more settings
that you can configure.

51
00:03:40.404 --> 00:03:42.170
In this case,
I don't need to do anything like that.

52
00:03:42.170 --> 00:03:47.203
So I'm gonna save that to .travis.yml, so

53
00:03:47.203 --> 00:03:53.440
we can see in this file, oops,
that this is a node project.

54
00:03:53.440 --> 00:03:58.470
So Travis is clever enough to know
that it needs to run NPM install and

55
00:03:58.470 --> 00:04:03.380
NPM test, which is gonna run our
package JSON scripts that uses tape.

56
00:04:03.380 --> 00:04:06.522
And then we can specify the versions
of node that we wanna test on.

57
00:04:08.510 --> 00:04:13.169
Okay, so you have to commit that
file to your get repository,

58
00:04:15.360 --> 00:04:19.960
And probably as well,
you wanna put in a little badge here,

59
00:04:19.960 --> 00:04:22.540
so here's what that looks like.

60
00:04:24.315 --> 00:04:28.530
So remember to change
substack/node-browserify for

61
00:04:28.530 --> 00:04:31.860
whatever your package is called and
whatever your username is called.

62
00:04:31.860 --> 00:04:37.730
So I can replace,
I'm still sub stack on GitHub so

63
00:04:37.730 --> 00:04:41.440
but I can replace browserify
with parse-messy-time.

64
00:04:41.440 --> 00:04:44.165
Make sure to do it twice because
there's two of them in this batch,

65
00:04:44.165 --> 00:04:46.868
parse-messy-time.

66
00:04:46.868 --> 00:04:49.596
Okay, so

67
00:04:54.067 --> 00:04:59.000
So now we're using Travis CI,
the final thing that I need to do is,

68
00:04:59.000 --> 00:05:03.870
you'll have to go to travis-ci.org,
and create an account.

69
00:05:03.870 --> 00:05:06.660
I think you can log in with GitHub,
if you're already have an account there,

70
00:05:06.660 --> 00:05:10.220
then you can go to this URL for
your username and your repository.

71
00:05:11.930 --> 00:05:15.715
So I'm gonna go to
substack/parse-messy-time,

72
00:05:15.715 --> 00:05:20.013
which is the name of this project
that I'm gonna configure.

73
00:05:24.023 --> 00:05:27.218
And then there should be a button
called Activate repository,

74
00:05:27.218 --> 00:05:31.150
it's this blue thing down here, so
when you click that after the page loads.

75
00:05:33.280 --> 00:05:38.828
Now the next time that I push code
to that repository on GitHub,

76
00:05:38.828 --> 00:05:44.480
Travis is gonna check out that code,
and it's gonna run my tests.

77
00:05:44.480 --> 00:05:47.610
And if they all pass, I should have
a green badge, if they're failing for

78
00:05:47.610 --> 00:05:48.300
whatever reason,

79
00:05:48.300 --> 00:05:52.908
maybe I forgot to add a dependency,
all kinds of reasons why it could fail.

80
00:05:52.908 --> 00:05:55.722
Then it's gonna be a red badge.

81
00:05:55.722 --> 00:05:59.497
In this case, it will most definitely
be a red badge because I already

82
00:05:59.497 --> 00:06:02.180
know running locally that
the tests are broken.

83
00:06:03.930 --> 00:06:07.760
So here we have the output,
and if you click one of them,

84
00:06:07.760 --> 00:06:12.330
you can see kind of the test
results as they stream in.

85
00:06:12.330 --> 00:06:14.480
So it does take a little bit sometimes,
but

86
00:06:14.480 --> 00:06:18.866
it's downloading various things from
the internet, it's quitting my repository.

87
00:06:18.866 --> 00:06:23.457
It's standing up node and running
NPM install, which we just did, and

88
00:06:23.457 --> 00:06:25.380
then it's running NPM test.

89
00:06:25.380 --> 00:06:29.610
So here we have the tap output, I'll try
to make that bigger, the tap output,

90
00:06:29.610 --> 00:06:31.460
that should be very familiar.

91
00:06:31.460 --> 00:06:33.230
It's in mobile mode, there we go.

92
00:06:33.230 --> 00:06:37.870
So it set the timezone, and now it's
running through the test cases, and

93
00:06:37.870 --> 00:06:38.868
there's a failing test.

94
00:06:38.868 --> 00:06:44.960
So that's gonna set the exit code to
be non 0, which is how Travis knows,

95
00:06:44.960 --> 00:06:51.660
here it says, the command NPM test
exited with 1, so the test failed.

96
00:06:51.660 --> 00:06:56.750
And there should be now on that
repository, the badge should be red,

97
00:06:56.750 --> 00:07:01.820
so I'll go to
the pearse-messy-time on GitHub.

98
00:07:01.820 --> 00:07:08.480
I look at the readme, both failing, so
I can now go in and fix that test case,

99
00:07:08.480 --> 00:07:13.930
what I'm actually gonna do is not to fix
it, I'm just gonna disable that test case.

100
00:07:13.930 --> 00:07:18.197
So this one is 30 in 1.5 weeks,

101
00:07:20.532 --> 00:07:25.290
It just to show you what
the workflow is like

102
00:07:25.290 --> 00:07:29.914
once you fix something, so in 1.5, so

103
00:07:29.914 --> 00:07:34.286
there it is in pearse.js, in 1.5.

104
00:07:34.286 --> 00:07:37.530
So I'm just gonna turn this test off.

105
00:07:41.541 --> 00:07:45.145
Which is not something that you should
actually do, but everyone does it anyways,

106
00:07:45.145 --> 00:07:47.009
so I might as well show
you what it's like.

107
00:07:48.370 --> 00:07:53.690
Turn a failing test off, and
now once you push to GitHub again,

108
00:07:55.220 --> 00:08:00.750
now Travis is gonna be listening for
these updates to roll along.

109
00:08:00.750 --> 00:08:08.940
And if I go to the Build History,
we should see the next build, there it is.

110
00:08:08.940 --> 00:08:16.130
So if you click that, we can see all
of the different versions of node.

111
00:08:16.130 --> 00:08:19.366
And there might be an issue where
you're using an API that's only present

112
00:08:19.366 --> 00:08:21.921
on the latest version, but
not in older versions of node,

113
00:08:21.921 --> 00:08:24.750
so it's good to check that kind of stuff.

114
00:08:24.750 --> 00:08:26.350
So here, we're running through.

115
00:08:32.217 --> 00:08:37.950
Unpacking replacement, let see all kinds
of fun stuff, string that get cloned.

116
00:08:37.950 --> 00:08:42.552
There's the progress part that
looks pretty terrible because we're

117
00:08:42.552 --> 00:08:45.762
viewing it on a web page,
and running NPM tests.

118
00:08:45.762 --> 00:08:49.289
So now it's going through
all of the cases,

119
00:08:49.289 --> 00:08:53.700
now the exit code was 0,
so the test passed.

120
00:08:53.700 --> 00:08:58.080
And I bet if I refresh this now,
yeah, it's green now, great.

121
00:08:58.080 --> 00:09:01.352
So that's kind of the basic workflow for

122
00:09:01.352 --> 00:09:05.586
setting up CI on a project
once you have some tests and

123
00:09:05.586 --> 00:09:09.740
once those tests are in
your package JSON scripts.

124
00:09:09.740 --> 00:09:15.809
That is all I have for this section,
so I guess in the time before lunch,

125
00:09:15.809 --> 00:09:19.160
you can try out some of these packages.

126
00:09:19.160 --> 00:09:25.277
So I covered file and
also NYC which you can try out,

127
00:09:25.277 --> 00:09:30.979
and then you can maybe
create a repo of your own.

128
00:09:30.979 --> 00:09:34.446
You can add a test script
into package JSON, and

129
00:09:34.446 --> 00:09:38.270
you can try to get it set up
with Travis CI if you want.

130
00:09:40.640 --> 00:09:44.851
Or you can just make a dummy project
that just does almost nothing,

131
00:09:44.851 --> 00:09:47.871
that's a good way to test
out how to use Travis.

132
00:09:47.871 --> 00:09:50.390
You could even copy some of the test
files that we already have in here.

133
00:09:53.190 --> 00:09:58.093
Some other tips,
make sure if you are gonna set up your own

134
00:09:58.093 --> 00:10:02.908
repository, if your NPM
install with --save-dev.

135
00:10:02.908 --> 00:10:07.280
Or there's a shortcut called -capital D,
these mean the same thing.

136
00:10:07.280 --> 00:10:12.918
Tape, then that's gonna install tape into
your package JSON dev dependencies field,

137
00:10:12.918 --> 00:10:15.900
which is needed by
Travis CI when it installs.

138
00:10:15.900 --> 00:10:20.930
So that it has the right library
that's necessary for testing.

