WEBVTT

1
00:00:00.450 --> 00:00:05.058
The next thing I can talk a little
bit about is maybe how you

2
00:00:05.058 --> 00:00:09.870
can do routing both on the server
level and on the front end.

3
00:00:09.870 --> 00:00:12.400
So on the server,
routing is pretty straightforward.

4
00:00:12.400 --> 00:00:16.400
You can use a package like express or

5
00:00:16.400 --> 00:00:19.060
happy that provide their
own routing system.

6
00:00:19.060 --> 00:00:19.940
You can roll your own,

7
00:00:19.940 --> 00:00:24.630
which is what I prefer to do with
something like the routes package.

8
00:00:24.630 --> 00:00:29.357
So if you require routes,
then you get a little router that

9
00:00:29.357 --> 00:00:33.708
you can add routes to, so
like router.addRoute/.

10
00:00:33.708 --> 00:00:38.936
And you can pass in whatever variables
you want which is pretty handy I think.

11
00:00:43.059 --> 00:00:48.064
So maybe if you have a route
called user/:name, then I'll just

12
00:00:48.064 --> 00:00:53.897
print out what the name is,
And your new line.

13
00:00:53.897 --> 00:00:59.105
And then to wire up this router, what you
can do is you can just call router.match

14
00:00:59.105 --> 00:01:03.640
with the req., here's another
trick that you can do as well.

15
00:01:03.640 --> 00:01:07.730
If you want HTTP verbs,
you can put them in the route strings.

16
00:01:07.730 --> 00:01:11.916
So if I wanna match on gets,
then I can use the request method.

17
00:01:11.916 --> 00:01:15.073
But when I provide some
data to the router,

18
00:01:15.073 --> 00:01:18.680
request method plus space
plus the request URL.

19
00:01:20.170 --> 00:01:24.974
And then if there is a match,
m is gonna be defined and

20
00:01:24.974 --> 00:01:31.000
the function that you've declared
right here is gonna be set.

21
00:01:31.000 --> 00:01:34.290
So you can pass in whatever
variables you like, so

22
00:01:34.290 --> 00:01:38.790
I'll pass just in the m object
because it's pretty simple.

23
00:01:38.790 --> 00:01:41.360
Otherwise, we can let
ecstatic handle the rest.

24
00:01:43.240 --> 00:01:45.006
So if I run our server again,

25
00:01:45.006 --> 00:01:49.287
it's the same server that was just
hosting WebSockets a minute ago.

26
00:01:49.287 --> 00:01:53.605
If I go to localhost:5000,
I get the the source code in index HTML.

27
00:01:53.605 --> 00:01:58.030
But if I go to /user/substack,
I get a message name=substack.

28
00:01:58.030 --> 00:02:04.010
So that's a really, really simple way
to do routing in pretty much whatever

29
00:02:04.010 --> 00:02:07.089
HTTP server you happen to be running,
but the core server works just fine.

30
00:02:09.470 --> 00:02:14.430
Another nice thing that
you can do is you can use

31
00:02:14.430 --> 00:02:19.600
that library in the browser just as well,
because it's a really simple library.

32
00:02:19.600 --> 00:02:24.610
It only deals with native JavaScripts,

33
00:02:24.610 --> 00:02:28.340
doesn't do anything like talking to
the file system or anything like that.

34
00:02:28.340 --> 00:02:31.650
So it works in in the browser
just fine as well.

35
00:02:35.770 --> 00:02:38.340
If you do put a router in the browser,

36
00:02:38.340 --> 00:02:41.540
it's a good idea to use this
API called history.pushState.

37
00:02:42.830 --> 00:02:47.940
And that lets you update the URL
of the page without actually

38
00:02:47.940 --> 00:02:49.430
navigating to that URL.

39
00:02:49.430 --> 00:02:54.590
So you can, whatever you like in the URL
bar, and it's gonna look like you're

40
00:02:54.590 --> 00:02:57.630
navigating around, but it's gonna
be much faster behind the scenes.

41
00:02:58.670 --> 00:03:03.230
You've probably all used
websites that use that API,

42
00:03:03.230 --> 00:03:06.920
and it's not even obvious
when it's happening.

43
00:03:06.920 --> 00:03:07.645
&gt;&gt; What's that called again?

44
00:03:07.645 --> 00:03:13.610
&gt;&gt; It's called pushState,
like this, history.pushState, yep.

45
00:03:13.610 --> 00:03:18.190
Another trick for
routing in the browser is to,

46
00:03:18.190 --> 00:03:23.590
you can register in a global event
emitter hook on window for click events.

47
00:03:25.220 --> 00:03:30.520
And this thing is gonna be defined
called ev.target on the event object,

48
00:03:30.520 --> 00:03:34.270
and someone clicks a link,
that's gonna be an A tag.

49
00:03:34.270 --> 00:03:37.540
And if ref is defined,
then they would have gone somewhere else.

50
00:03:37.540 --> 00:03:40.508
So you can kind of intercept these links.

51
00:03:40.508 --> 00:03:46.289
And if you can determine that that URL
is either local to your application,

52
00:03:46.289 --> 00:03:51.703
or maybe you also have your router here,
so you could do router.match

53
00:03:51.703 --> 00:03:57.260
to see if there's a match with
that URL on your web service.

54
00:03:57.260 --> 00:03:57.980
If there is one,

55
00:03:57.980 --> 00:04:03.410
you can call ev.preventDefault to sort of
stop the default behavior from happening.

56
00:04:03.410 --> 00:04:07.842
And then you can render,
you could just call pushState and

57
00:04:07.842 --> 00:04:12.375
you could update your browser
code to make it pretty slick.

58
00:04:12.375 --> 00:04:14.839
It's gonna look like you're
navigating around but

59
00:04:14.839 --> 00:04:18.144
you don't have to necessarily do all
of these round trips to a server.

60
00:04:18.144 --> 00:04:22.700
So on a slow connection, that's gonna
be a lot better of a technique to use.

