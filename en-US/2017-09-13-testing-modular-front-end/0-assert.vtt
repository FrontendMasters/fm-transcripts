WEBVTT

1
00:00:00.470 --> 00:00:06.110
Today we're going to be doing
testing in node and the browser.

2
00:00:06.110 --> 00:00:10.510
Node already has a built in thing
called assert it's part of core, so

3
00:00:10.510 --> 00:00:13.100
you don't even have to
NPM install anything.

4
00:00:13.100 --> 00:00:16.240
This is, if you don't even
want to install any libraries,

5
00:00:16.240 --> 00:00:18.400
this is a perfectly valid way to test.

6
00:00:18.400 --> 00:00:22.010
So why don't we just look and
see how that works?

7
00:00:22.010 --> 00:00:26.470
So when you require the assert package
in NPM, here I'm just in the node REPL.

8
00:00:26.470 --> 00:00:28.930
If you type node, you can get into this.

9
00:00:28.930 --> 00:00:32.170
If you get stuck in this,
you can type Ctrl+D and

10
00:00:32.170 --> 00:00:36.370
you'll get back out again,
just in case that happens.

11
00:00:36.370 --> 00:00:38.270
So if we require assert,

12
00:00:38.270 --> 00:00:40.675
you can see all of the methods
that we have on the assert object.

13
00:00:40.675 --> 00:00:43.600
Actually in the REPL, you don't even
have to require the core modules.

14
00:00:43.600 --> 00:00:44.900
They're just available.

15
00:00:44.900 --> 00:00:48.840
So we've got all of these
ways of doing assertions.

16
00:00:48.840 --> 00:00:57.285
So the main idea with assertions is that
these are things that you wanna test.

17
00:00:57.285 --> 00:01:02.563
So, for example, if you wanna
test that two things are equal,

18
00:01:02.563 --> 00:01:05.800
you can use assert.equal.

19
00:01:05.800 --> 00:01:07.335
So I can show you what
that will look like.

20
00:01:07.335 --> 00:01:12.060
assert.equal(1,1) doesn't do anything,

21
00:01:12.060 --> 00:01:17.190
which is just as well but
what happens when those are not equal?

22
00:01:17.190 --> 00:01:19.910
Well, then we get an exception and

23
00:01:19.910 --> 00:01:25.020
the error message also tells us a little
bit of information about how that works.

24
00:01:25.020 --> 00:01:27.020
So there's also assert.ok.

25
00:01:27.020 --> 00:01:30.678
So, if you pass in anything that's true or
truthy, so

26
00:01:30.678 --> 00:01:34.428
anything that's not a zero or
an empty string or false.

27
00:01:36.537 --> 00:01:40.640
But if you do pass in something
that's falsie, you get an exception.

28
00:01:42.610 --> 00:01:48.320
So there's also different ways to
negate those kinds of assertions.

29
00:01:48.320 --> 00:01:52.311
So we could do things like notOk,
or I guess,

30
00:01:52.311 --> 00:01:56.100
notEqual, for example.

31
00:01:56.100 --> 00:01:58.626
So if we do notEqual,

32
00:01:58.626 --> 00:02:03.510
then if we do pass in two values
that are equal, we get an exception.

33
00:02:03.510 --> 00:02:08.500
&gt;&gt; Question,
what is this unit test library?

34
00:02:08.500 --> 00:02:10.390
&gt;&gt; This library is called assert.

35
00:02:10.390 --> 00:02:12.280
So it's part of node core.

36
00:02:12.280 --> 00:02:14.170
And assert is very simple.

37
00:02:14.170 --> 00:02:19.229
All that it does is it throws exceptions
when the arguments that you give it

38
00:02:19.229 --> 00:02:24.712
don't match or do match, depending on
which assertion method you're using.

39
00:02:29.919 --> 00:02:33.531
Yeah, if you type in node
then you'll get the node

40
00:02:33.531 --> 00:02:34.700
REPL-
&gt;&gt; Yes.

41
00:02:34.700 --> 00:02:36.280
&gt;&gt; And then require assert.

42
00:02:36.280 --> 00:02:37.940
&gt;&gt; Yeah.
You don't even have to require assert,

43
00:02:37.940 --> 00:02:39.140
you can just type assert.

44
00:02:39.140 --> 00:02:42.241
In a normal program though you
would have to require assert, so

45
00:02:42.241 --> 00:02:45.710
it's kind of a good habit to do
var assert = require('assert').

46
00:02:47.080 --> 00:02:48.450
So normally in your node program,

47
00:02:48.450 --> 00:02:50.920
you would type something like this line,
right here.

48
00:02:50.920 --> 00:02:54.980
And then that would give you the assert
library and you can poke around with that.

49
00:02:54.980 --> 00:02:58.090
So let's go ahead and make a library.

50
00:02:58.090 --> 00:03:00.590
Make a make a little test suite,
just with the assert package,

51
00:03:00.590 --> 00:03:05.270
just to give you an idea for
what the strength of the SPR chart and

52
00:03:05.270 --> 00:03:08.430
also what some of its
failure modes can be.

53
00:03:08.430 --> 00:03:13.230
So we're going to write a little
program that's gonna run a node.

54
00:03:13.230 --> 00:03:17.710
So I'm going to use some things like
the fs package, things of that sort.

55
00:03:17.710 --> 00:03:20.744
So we'll call this test js.

56
00:03:21.880 --> 00:03:23.630
We can require the assert package.

57
00:03:25.520 --> 00:03:29.680
And then we can do assert.equal(1+2).

58
00:03:29.680 --> 00:03:34.530
Maybe we also have, like we have
a special function here that's gonna read

59
00:03:34.530 --> 00:03:37.870
from a file and
tell us the number of lines.

60
00:03:37.870 --> 00:03:39.770
So I'm gonna have a test file here.

61
00:03:39.770 --> 00:03:44.130
I'll just call it file.txt cuz I'm
not feeling particularly imaginative.

62
00:03:44.130 --> 00:03:46.240
It's gonna have three lines.

63
00:03:46.240 --> 00:03:49.310
So here, this is just a program on
the command line to count the number of

64
00:03:49.310 --> 00:03:51.530
lines in a file, so it should be three.

65
00:03:51.530 --> 00:03:55.790
I'm gonna have a little function
that's going to do the same thing.

66
00:03:55.790 --> 00:03:59.590
And just want to make sure that
my function works the way that

67
00:03:59.590 --> 00:04:02.350
that command on the command line works.

68
00:04:02.350 --> 00:04:06.357
So I'm gonna call this
function countlines,

69
00:04:06.357 --> 00:04:11.295
gonna load the fs package,
and I'm gonna read in a file.

70
00:04:11.295 --> 00:04:14.752
So fs.readFile('file.txt'.

71
00:04:18.015 --> 00:04:20.795
If there's an error,
I really ought to do something about it.

72
00:04:20.795 --> 00:04:24.795
So I'm gonna have a callback
that I'm gonna pass in.

73
00:04:24.795 --> 00:04:27.835
This will just kind of give you
an idea for how this function works.

74
00:04:28.975 --> 00:04:31.425
If there's an error,
I need to call that callback.

75
00:04:31.425 --> 00:04:33.335
Otherwise, I need to do,

76
00:04:34.490 --> 00:04:38.610
there's another parameter we can pass so
that we get a string.

77
00:04:38.610 --> 00:04:41.120
So I'm going to split on new line.

78
00:04:41.120 --> 00:04:43.360
And then I'm going to call the length.

79
00:04:43.360 --> 00:04:46.830
So that's going to be,
you don't really have to

80
00:04:46.830 --> 00:04:49.440
understand completely how this works,
but the basic idea

81
00:04:49.440 --> 00:04:54.280
is that it's gonna count the number of
lines in that file and give us the result.

82
00:04:56.020 --> 00:04:59.580
So maybe I messed up the implementation,

83
00:04:59.580 --> 00:05:03.750
like maybe I'm gonna sabotage this
right now just to prove something.

84
00:05:03.750 --> 00:05:08.860
So what if, for example, you know what?

85
00:05:08.860 --> 00:05:12.150
So if I split on length,
that's one way of doing it.

86
00:05:12.150 --> 00:05:14.650
I could also just count
the number of newline characters,

87
00:05:14.650 --> 00:05:17.828
which is another way that
would I don't think work, but

88
00:05:17.828 --> 00:05:22.490
I'm just gonna add 100 to, this would
be an example of a mistake [LAUGH].

89
00:05:22.490 --> 00:05:25.099
In this case, it was intentional,
but oftentimes it's not.

90
00:05:26.470 --> 00:05:31.220
So if I call my countlines function,
I know that that File('file.txt'

91
00:05:31.220 --> 00:05:35.500
has 3 lines in it, so
I can pass in a callback and

92
00:05:35.500 --> 00:05:38.890
I should get back either
an error as the first argument.

93
00:05:38.890 --> 00:05:41.551
This is sort of just a Node.js convention.

94
00:05:44.176 --> 00:05:49.660
So if I have an error, I really want to
throw an exception with the assert module.

95
00:05:49.660 --> 00:05:53.690
assert has something baked
in called assert.ifError.

96
00:05:53.690 --> 00:05:57.620
And you can pass it,
the error object, if there is one.

97
00:05:57.620 --> 00:06:01.180
If there's no error
object that you pass in,

98
00:06:01.180 --> 00:06:04.460
then that function will just succeed and
go on to the next thing.

99
00:06:06.490 --> 00:06:10.292
So the other thing that I wanna
do is I wanna test an equality.

100
00:06:10.292 --> 00:06:15.460
I wanna make sure that the number of lines
that I get back from that implementation

101
00:06:15.460 --> 00:06:16.610
is equal to what I expect.

102
00:06:16.610 --> 00:06:20.860
So in this case, it's three because there
ought to be three lines in that file,

103
00:06:20.860 --> 00:06:22.660
except it's been sabotaged.

104
00:06:22.660 --> 00:06:24.919
So this ought not to work.

105
00:06:25.920 --> 00:06:33.180
So now, if I run this program,
I see 3 == undefined.

106
00:06:33.180 --> 00:06:34.840
So that's even a different error.

107
00:06:34.840 --> 00:06:35.980
I guess I already had an error.

108
00:06:35.980 --> 00:06:36.760
That's good.

109
00:06:36.760 --> 00:06:40.640
So, our test suite in this case is telling
us that there's a problem with this

110
00:06:40.640 --> 00:06:43.480
implementation, which is fantastic.

111
00:06:43.480 --> 00:06:44.990
So happens to be on line four.

112
00:06:46.570 --> 00:06:50.000
Right.
So my first assert that I did, 1+2,

113
00:06:50.000 --> 00:06:52.730
I didn't actually specify the second
thing that I wanted to test.

114
00:06:52.730 --> 00:06:56.750
So it's another thing to be
careful of when you write tests

115
00:06:58.640 --> 00:07:02.700
is you wanna make sure that your
test also doesn't have bugs.

116
00:07:02.700 --> 00:07:05.360
It's bad enough if your
implementation has bugs.

117
00:07:05.360 --> 00:07:11.590
But if your test suite is also buggy,
then that's gonna be even more difficult.

118
00:07:11.590 --> 00:07:14.625
You'd have to write another test,
so test your tests.

119
00:07:14.625 --> 00:07:17.072
[LAUGH] I wouldn't go that far overboard,

120
00:07:17.072 --> 00:07:19.718
all though I do know people who
do that kind of thing sometimes.

121
00:07:19.718 --> 00:07:22.560
So here we are.

122
00:07:22.560 --> 00:07:26.540
I fixed that error,
can run the test again.

123
00:07:26.540 --> 00:07:27.210
Here we go.
Now

124
00:07:27.210 --> 00:07:29.870
we're getting a different error 104 == 3.

125
00:07:29.870 --> 00:07:31.810
Notice how I added 100?

126
00:07:31.810 --> 00:07:37.130
So I was expecting something like 103,
so I guess my program already had a bug.

127
00:07:37.130 --> 00:07:38.790
That's useful.

128
00:07:38.790 --> 00:07:39.800
I didn't even have to add one.

129
00:07:41.310 --> 00:07:44.150
This is how it goes with testing,
often times.

130
00:07:44.150 --> 00:07:47.090
So if that's the case,
why is that the case?

131
00:07:47.090 --> 00:07:49.800
&gt;&gt; Need a line break after the last line?

132
00:07:49.800 --> 00:07:54.280
&gt;&gt; Yep.
So if I actually do a quick read file test

133
00:07:54.280 --> 00:07:57.980
on the command line, so I'm just gonna
use the sync version, all though I want

134
00:07:57.980 --> 00:08:01.610
the implementation to be asynchronous
because I'm gonna show something.

135
00:08:01.610 --> 00:08:03.430
Okay, so here's that file.

136
00:08:03.430 --> 00:08:05.660
There's one, two, and three.

137
00:08:05.660 --> 00:08:07.350
If you split on new line, and

138
00:08:07.350 --> 00:08:10.600
there's a bit of extra fluff at
the end that's an empty string.

139
00:08:10.600 --> 00:08:14.680
So, what we wanna do is if there
is an empty string at the end,

140
00:08:14.680 --> 00:08:16.450
we wanna just cut it off.

141
00:08:17.900 --> 00:08:22.510
So there's a function on strings
called trim that should get rid of

142
00:08:22.510 --> 00:08:23.740
that extra bit at the end.

143
00:08:24.820 --> 00:08:32.310
So now if we run our test,
our non-sabotaged test, we still

144
00:08:32.310 --> 00:08:38.680
get an error because that's not a property
on arrays, it's a property on strings.

145
00:08:38.680 --> 00:08:39.580
So here we go.

146
00:08:39.580 --> 00:08:42.010
I've now hopefully fixed this test.

147
00:08:43.250 --> 00:08:44.272
I can close that.

148
00:08:46.334 --> 00:08:47.880
And I fixed it.

149
00:08:47.880 --> 00:08:51.278
You might notice that we get no output,
so that's not really very helpful.

150
00:08:51.278 --> 00:08:58.540
Node is gonna set the exit code to 0,
so that's a little bit of a help but

151
00:08:58.540 --> 00:09:04.680
you might notice how this kind
of test suite could go wrong.

152
00:09:04.680 --> 00:09:07.280
Like, what if I forgot to call a callback?

153
00:09:07.280 --> 00:09:09.878
It would exit and
it wouldn't say anything and

154
00:09:09.878 --> 00:09:13.080
it would just kinda look
identical to a successful case.

155
00:09:13.080 --> 00:09:17.620
So if I do that, if I just forgot
to actually call the callback or

156
00:09:17.620 --> 00:09:20.989
I called it twice or something,
I would get the same kind of output.

157
00:09:22.190 --> 00:09:27.860
Which is just to exit and
to exit successfully without failing,

158
00:09:27.860 --> 00:09:29.060
without raising an exception.

159
00:09:30.480 --> 00:09:36.636
So, that's kind of some of
the problems also, yeah, question.

160
00:09:36.636 --> 00:09:39.398
&gt;&gt; What's the dollar sign you had
in there, where did that come from?

161
00:09:39.398 --> 00:09:41.500
&gt;&gt; This is just something that's
available on the command line.

162
00:09:41.500 --> 00:09:42.810
It's the exit code.

163
00:09:42.810 --> 00:09:43.740
&gt;&gt; Okay.
Yeah.

164
00:09:43.740 --> 00:09:47.002
I'll talk a little bit more about exit
codes when we get into the section about

165
00:09:47.002 --> 00:09:48.800
setting scripts and package JSON.

166
00:09:48.800 --> 00:09:53.810
So, a little bit anyways,
but this is basically how

167
00:09:53.810 --> 00:09:57.980
things like NPM tests or
if you set up continuous integration,

168
00:09:57.980 --> 00:10:02.490
this is like the lowest common denominator
for those systems to know when your

169
00:10:02.490 --> 00:10:07.530
tests succeeded or when other
system scripts succeeded or not.

170
00:10:07.530 --> 00:10:12.180
I can show you an example of, if I put
one of these errors back like I make that

171
00:10:12.180 --> 00:10:17.580
four, and I run the test,
now the execute code is 1, so it's not 0.

172
00:10:17.580 --> 00:10:19.855
Anything that's not 0 is a failure case.

173
00:10:21.818 --> 00:10:25.869
Okay, so hopefully that gives you
kind of an idea of how, yeah,

174
00:10:25.869 --> 00:10:28.350
this is a very simple way to do things.

175
00:10:28.350 --> 00:10:33.924
All though, it's kind of riddled with
problems if you're not very careful and

176
00:10:33.924 --> 00:10:39.082
you can accidentally have cases where
callbacks aren't being called and

177
00:10:39.082 --> 00:10:40.512
this sort of thing.

178
00:10:40.512 --> 00:10:44.090
Also, exceptions are gonna
halt your program.

179
00:10:44.090 --> 00:10:49.070
So, if you just kind of wanna
get a general sense for,

180
00:10:49.070 --> 00:10:53.178
well, you know, I have 20,000 tests and
maybe 5 of them are failing but

181
00:10:53.178 --> 00:10:58.840
maybe they're kinda in the beginning,
so I don't want my tests to stop there.

182
00:10:58.840 --> 00:11:02.180
I want them to like keep going anyways,
even though there's some failures.

183
00:11:02.180 --> 00:11:05.250
That's not something that you're
gonna get with the assert module.

184
00:11:05.250 --> 00:11:07.945
However, I think that the general set of

185
00:11:07.945 --> 00:11:11.195
methods that you get with the assert
package are pretty handy.

186
00:11:11.195 --> 00:11:14.635
So we've got things like ok,
equal, deepEqual,

187
00:11:14.635 --> 00:11:18.565
those are reasonable ways to
do these kind of assertions.

