WEBVTT

1
00:00:00.210 --> 00:00:05.464
Another fun thing to try is if
we refactor this a little bit,

2
00:00:05.464 --> 00:00:09.668
and I'll call this function
createBlob now and

3
00:00:09.668 --> 00:00:15.155
instead of declaring that draw function,
we will return it.

4
00:00:15.155 --> 00:00:18.952
And then in the regl.frame function,

5
00:00:18.952 --> 00:00:24.470
we're actually gonna save
a bunch of draw functions.

6
00:00:24.470 --> 00:00:29.417
This is kind of a nice A nice

7
00:00:29.417 --> 00:00:33.680
way to factor things out if we wanted
that to live in a separate file.

8
00:00:33.680 --> 00:00:37.460
So then you can stack on
more draft functions and

9
00:00:37.460 --> 00:00:39.310
it's gonna keep a lot more separated.

10
00:00:40.760 --> 00:00:45.130
Another thing that you can do as well,
instead of having one blob,

11
00:00:47.260 --> 00:00:49.770
we can have a lot of them with properties.

12
00:00:49.770 --> 00:00:54.210
So if I set a property
in this blob function,

13
00:00:54.210 --> 00:00:58.166
which I can do as a uniform, so
I'll call this one location.

14
00:00:58.166 --> 00:01:02.877
Can do regl.prop('location').

15
00:01:02.877 --> 00:01:06.480
And now, when I go to draw those,
I can set some locations.

16
00:01:06.480 --> 00:01:10.350
And maybe the locations are even based on
time or based on some other parameter, so

17
00:01:10.350 --> 00:01:14.020
they could go up and down, or
could be based on keyboard input.

18
00:01:14.020 --> 00:01:18.150
You could base it on other things that
you have access to in JavaScript land.

19
00:01:18.150 --> 00:01:23.310
For now,
I'll just set those locations up like so.

20
00:01:25.280 --> 00:01:30.300
Be like -1, no, -2.

21
00:01:30.300 --> 00:01:34.241
So I guess like we'll have one that's
negative one x, one that's -yx.

22
00:01:34.241 --> 00:01:37.548
I think it actually might be z
that we have to vary, not x.

23
00:01:37.548 --> 00:01:41.133
So all right, so anyways,
there should be three

24
00:01:41.133 --> 00:01:45.950
blobs on the screen as soon as we
use the prop in our vertex shader.

25
00:01:47.970 --> 00:01:53.613
So we have another vec3 called
location in our vertex shader, and

26
00:01:53.613 --> 00:01:58.672
we need to take the position and
add in the location offset.

27
00:01:58.672 --> 00:01:59.952
I think that ought to work.

28
00:01:59.952 --> 00:02:01.800
That's pretty much it.

29
00:02:01.800 --> 00:02:04.076
So I'm gonna refresh.

30
00:02:04.076 --> 00:02:06.035
Syntax error.

31
00:02:06.035 --> 00:02:13.823
Line 48, looks like I probably forgot
a comma or something somewhere.

32
00:02:13.823 --> 00:02:15.902
&gt;&gt; [INAUDIBLE]
&gt;&gt; What's that?

33
00:02:15.902 --> 00:02:18.688
&gt;&gt; Never mind,
I thought I saw a spot there.

34
00:02:18.688 --> 00:02:19.349
&gt;&gt; Okay.

35
00:02:19.349 --> 00:02:22.038
48 is right here.

36
00:02:22.038 --> 00:02:26.161
That's a function now so
it doesn't need a closing parent.

37
00:02:26.161 --> 00:02:29.357
And there we go, we have blobs.

38
00:02:29.357 --> 00:02:31.775
If we want the blobs to not be identical,

39
00:02:31.775 --> 00:02:34.418
we could offset them
based on the location.

40
00:02:34.418 --> 00:02:38.453
Or we could pass in another property,

41
00:02:38.453 --> 00:02:43.508
that's stage: 0, stage: 1, stage: 2.

42
00:02:43.508 --> 00:02:49.722
And then that would be another prop stage.

43
00:02:53.695 --> 00:02:58.810
And in the vertex shader
then we can offset time.

44
00:03:03.230 --> 00:03:09.120
Right in the vertex shader,
we can perturb the time by the stage.

45
00:03:09.120 --> 00:03:11.949
It would be out of sync
now with each other.

46
00:03:11.949 --> 00:03:16.937
That's the blobbing, but the fragment is
still- so I'll just quickly add that to

47
00:03:16.937 --> 00:03:20.514
the fragment shader as well,
and I think it'll look cool.

48
00:03:27.301 --> 00:03:29.410
There we go,
now they're a little bit different.

49
00:03:29.410 --> 00:03:33.995
So anyways, it's web geo crash course.

50
00:03:33.995 --> 00:03:36.658
Gave everyone a bit of time to
play around with this demo,

51
00:03:36.658 --> 00:03:38.161
which I hope you'll all enjoy.

52
00:03:41.817 --> 00:03:42.984
Gotta get commit first.

53
00:03:50.921 --> 00:03:52.502
Don't forget to run budo.

54
00:03:52.502 --> 00:03:57.410
Actually, that instruction is wrong there
should be a dash dash before -t glslify

55
00:03:57.410 --> 00:04:00.295
why don't I just edit
that because it's wrong.

56
00:04:04.263 --> 00:04:11.890
Yeah, it should look like this.

57
00:04:18.028 --> 00:04:20.910
Okay, now it should be
better instructions.

58
00:04:22.640 --> 00:04:23.389
Question.

59
00:04:23.389 --> 00:04:29.700
&gt;&gt; Do you have any recommendations for
writing tests for this kind of drawing?

60
00:04:29.700 --> 00:04:32.397
&gt;&gt; For web GEO,
I have no idea how you would do that.

61
00:04:32.397 --> 00:04:37.169
I guess you could write tests for
the individual things themselves.

62
00:04:37.169 --> 00:04:41.703
I actually have written tests for
web GEO code in terms of GP/GPU, which

63
00:04:41.703 --> 00:04:47.160
is a way to use the graphics card and
shaders to do general purpose computing.

64
00:04:47.160 --> 00:04:51.952
And in that case, I would take screen
pixels and I would read them and

65
00:04:51.952 --> 00:04:56.510
make sure that they're the correct
colors like I would expect.

66
00:04:56.510 --> 00:04:59.778
So you have to kind of really narrow
things down if you want to test web GEO

67
00:04:59.778 --> 00:05:02.770
code, but yeah,
you can definitely do that.

68
00:05:02.770 --> 00:05:05.570
And you can set that up with all of
the tools that we've already covered

69
00:05:05.570 --> 00:05:06.820
with tape and such.

70
00:05:06.820 --> 00:05:07.530
So, yeah.

