WEBVTT

1
00:00:00.160 --> 00:00:02.730
So another thing that's
really coming with tests,

2
00:00:02.730 --> 00:00:06.690
is, how to do kind of a setup phase and
a teardown phase.

3
00:00:06.690 --> 00:00:09.726
So for example,
if you need to speed up an HTTP Server,

4
00:00:11.907 --> 00:00:16.083
Cuz your HTTP Server is required
to do some other piece, and then,

5
00:00:16.083 --> 00:00:19.811
you need to have a phase where
you kind of set up everything,

6
00:00:19.811 --> 00:00:24.809
you initialize the database and you create
a connection and then in your tests,

7
00:00:24.809 --> 00:00:28.410
you're gonna use that SIR or
that database connection.

8
00:00:28.410 --> 00:00:32.060
And then finally at the end you
need to be able to clean up.

9
00:00:32.060 --> 00:00:39.690
So a really simple way of doing that,
is to use the the Tap and

10
00:00:39.690 --> 00:00:44.730
Tape APIs, both execute commands serially,
so the first thing that you can put,

11
00:00:44.730 --> 00:00:48.504
can be your setup and the last thing that
you do can be your teardown, for example,

12
00:00:48.504 --> 00:00:52.600
and there's some even better ways to
do it, but this is a really simple one.

13
00:00:52.600 --> 00:00:55.330
And then if you wanna
separate things out by files,

14
00:00:55.330 --> 00:01:01.010
you can just name because the tests
are gonna be sorted in a glob.

15
00:01:01.010 --> 00:01:03.833
So you can name your teardown like AAA and
your,

16
00:01:03.833 --> 00:01:07.890
sorry you can name your teardown ZZZ and
you can name your setup AAA.

17
00:01:07.890 --> 00:01:13.452
You can also, there's an unfinished event
that's part of the Tape API, but if you

18
00:01:13.452 --> 00:01:18.920
wanna have something that's less hacky,
but still works pretty fine and is robust.

19
00:01:20.850 --> 00:01:27.060
So let's make this test
suite into kind of something

20
00:01:27.060 --> 00:01:31.390
that's gonna require a little bit of
setup, and a little bit of teardown.

21
00:01:31.390 --> 00:01:35.276
So we're gonna make an HTTP Server, and
then we're gonna ping that server with

22
00:01:35.276 --> 00:01:39.229
the request, and it's gonna asynchronously
perform this calculation for us.

23
00:01:40.610 --> 00:01:44.755
Okay, so the first thing that we wanna do
is that, any kind of state that you're

24
00:01:44.755 --> 00:01:48.903
gonna have throughout your test,
you can declare in the module scope.

25
00:01:48.903 --> 00:01:53.390
We'll have our setup phase.

26
00:01:53.390 --> 00:01:59.900
The cool thing too about, kind of rolling
this kind of functionality yourself,

27
00:01:59.900 --> 00:02:03.730
is, for example, if you have
different kinds of setup in teardown,

28
00:02:03.730 --> 00:02:07.620
it's completely up to you
how that's gonna work.

29
00:02:07.620 --> 00:02:12.860
So for example you might need
to set up one server for

30
00:02:12.860 --> 00:02:15.470
one batch of tests and another server for
another batch of tests.

31
00:02:15.470 --> 00:02:20.050
So this is all just ordinary code, there's
not really any magic going on here,

32
00:02:21.270 --> 00:02:24.480
which I really prefer,
because if there's too much magic,

33
00:02:24.480 --> 00:02:27.580
you can't really reason about how
it works, in order to do kind of

34
00:02:27.580 --> 00:02:32.504
the customizations that are necessary over
time, so I really prefer this approach.

35
00:02:32.504 --> 00:02:36.330
All right, so if we make an HTTP Server,
we're gonna need the HTTP library.

36
00:02:38.270 --> 00:02:45.900
And we'll do http.createServer, and inside
of our server function, we're gonna,

37
00:02:45.900 --> 00:02:50.440
I mean probably this would live in another
file, if we're setting up the server,

38
00:02:50.440 --> 00:02:55.010
but just for brevity,
I'm gonna include it in line in the setup.

39
00:02:55.010 --> 00:03:03.390
So, we're gonna take the req.url,
which begins with the slash, right?

40
00:03:03.390 --> 00:03:08.845
So, it's gonna be /1,
I'm gonna have run elevenizer on 1,

41
00:03:08.845 --> 00:03:11.380
and 3 is gonna run it with 3.

42
00:03:11.380 --> 00:03:15.266
So, we can slice off the first character,
which is always gonna be a slash, and

43
00:03:15.266 --> 00:03:16.432
that'll be our input.

44
00:03:18.172 --> 00:03:23.240
And then we can run eleveniser on that,
and get a response back.

45
00:03:25.840 --> 00:03:30.670
Results, because we're already
using something called res.

46
00:03:30.670 --> 00:03:36.587
If there's an error, what we need to
do is send that error down the pipe,

47
00:03:36.587 --> 00:03:38.923
and maybe set a status code.

48
00:03:41.827 --> 00:03:43.839
400, I don't know.

49
00:03:43.839 --> 00:03:48.391
Else we'll just call
res.end with the result.

50
00:03:50.353 --> 00:03:52.040
And that's gonna be a number.

51
00:03:53.280 --> 00:03:54.940
So we actually have to
convert it to a string.

52
00:03:54.940 --> 00:04:00.580
All right, so
now this is little HTTP Server, instead of

53
00:04:00.580 --> 00:04:04.430
calling elevenizer in our tests now, what
we should do is make some HTTP request.

54
00:04:04.430 --> 00:04:11.390
So I'll do http.request,
I'll give it the host, local host, and

55
00:04:11.390 --> 00:04:16.470
the port is, you can get the port if you
have a handle on the server by doing this.

56
00:04:18.170 --> 00:04:25.265
And the path, which I think you can
provide like that, maybe it's path.

57
00:04:25.265 --> 00:04:28.697
So, /1 should give us a result.

58
00:04:32.302 --> 00:04:34.770
So we're gonna get back a stream of data.

59
00:04:35.840 --> 00:04:41.600
So, gonna require a little module to help
us out with that, called concat-stream.

60
00:04:41.600 --> 00:04:45.453
So you can install it by doing
npm i concat-stream, like that.

61
00:04:49.733 --> 00:04:53.378
And then we're gonna pipe
the response into that package, and

62
00:04:53.378 --> 00:04:54.900
we'll get back the data.

63
00:04:54.900 --> 00:04:58.690
So, you don't really have to know
too much about how this part works.

64
00:04:58.690 --> 00:05:02.750
But basically,
it's gonna take all of the data, and just

65
00:05:02.750 --> 00:05:06.960
glom everything together into a buffer,
and then we can compare the results.

66
00:05:06.960 --> 00:05:12.860
So, let me call body.toString,
then convert that to a number.

67
00:05:14.000 --> 00:05:21.040
And then we can t.equal,
finally, that should be 111.

68
00:05:21.040 --> 00:05:27.860
So maybe in our test now, we wanna do
this again for a few other values, right?

69
00:05:27.860 --> 00:05:31.706
So we can write a little loop, or write a
little function that's gonna help us out.

70
00:05:31.706 --> 00:05:36.588
So testDigit (n), and now instead

71
00:05:36.588 --> 00:05:41.627
of hard coding those values we can sort

72
00:05:41.627 --> 00:05:46.544
of, And
we can also pass in the expected value.

73
00:05:50.181 --> 00:05:55.644
Okay, so now we can testDigit for
a number of things like 1,

74
00:05:55.644 --> 00:06:01.231
should be 111, 3 should be 333,
9 should be 999.

75
00:06:01.231 --> 00:06:05.203
And that's gonna be, so right now,
we have a single assertion,

76
00:06:05.203 --> 00:06:09.120
but we probably also wanna test
that the status code is correct.

77
00:06:09.120 --> 00:06:15.170
So we can do t.equal(res.statusCode,
200), okay?

78
00:06:15.170 --> 00:06:17.750
So that's two tests per assertion.

79
00:06:17.750 --> 00:06:22.930
So, 2 times 3, is 6, it's over,
we have the correct number of assertions.

80
00:06:22.930 --> 00:06:25.830
Okay, so, if I did everything correctly,

81
00:06:27.920 --> 00:06:32.100
that server should be running, and then
finally, we're gonna wanna tear it down.

82
00:06:32.100 --> 00:06:36.579
So, I'll put the teardown at
the very end of our test.

83
00:06:37.590 --> 00:06:39.150
And we can do some things like,

84
00:06:39.150 --> 00:06:41.356
I think just server.close(),
that's all that we need to do.

85
00:06:41.356 --> 00:06:45.570
And think that server.close()
takes a callback.

86
00:06:45.570 --> 00:06:47.220
So we can just end the test.

87
00:06:47.220 --> 00:06:50.060
You don't actually have to have any
assertions at all on your test.

88
00:06:50.060 --> 00:06:52.590
If you call t.end, it'll just accept.

89
00:06:52.590 --> 00:06:54.340
Let's try to run it.

90
00:06:54.340 --> 00:06:56.740
Okay, here we go,
test exited without ending, so

91
00:06:56.740 --> 00:06:59.080
it looks like we didn't
plan something correctly.

92
00:07:01.380 --> 00:07:03.850
Test operator fail, operator fail.

93
00:07:03.850 --> 00:07:04.660
I see what it is.

94
00:07:04.660 --> 00:07:09.250
So in our setup code, we also need
to make sure to call t.end, or

95
00:07:09.250 --> 00:07:13.160
we need to plan out a number of
assertions, so forgot to do that.

96
00:07:13.160 --> 00:07:13.880
All right, so

97
00:07:13.880 --> 00:07:18.560
all that our setup code really needs
to do, is clean up the server.

98
00:07:18.560 --> 00:07:23.720
It so happens that, when the server is,
well, first of all we need to call listen.

99
00:07:25.410 --> 00:07:27.260
So it needs to listen on a port.

100
00:07:27.260 --> 00:07:32.020
If you pass in 0, then the operating
system will allocate you a random port.

101
00:07:32.020 --> 00:07:35.521
And because we're not hard coding that,
cuz we're using server.address.port,

102
00:07:35.521 --> 00:07:36.790
that shouldn't be a problem.

103
00:07:37.910 --> 00:07:40.820
You can provide a callback
to the listen function,

104
00:07:40.820 --> 00:07:45.410
that is called when your server is
ready to go for the rest of our tests.

105
00:07:45.410 --> 00:07:48.694
So I'll call t.end in there,
and then, pull out,

106
00:07:48.694 --> 00:07:53.680
maybe, Test hangs, but
it got past the setup phase.

107
00:07:54.980 --> 00:07:57.276
All right, so what's going on now?

108
00:07:57.276 --> 00:07:58.000
I see what it is.

109
00:07:59.090 --> 00:08:04.930
When you do http.request, you also need
to call end on that request object.

110
00:08:04.930 --> 00:08:11.340
Just know the implementation details,
but common mistake, I just made it.

111
00:08:11.340 --> 00:08:14.010
So there we go, and
our test succeeds now, finally.

112
00:08:14.010 --> 00:08:18.430
So kind of a more involved example of
something that has setup and teardown,

113
00:08:18.430 --> 00:08:24.510
has some asynchronous components, sort of,
hopefully a little bit closer to what

114
00:08:24.510 --> 00:08:29.460
kinds of tests you'd need in
kind of an ordinary workplace,

115
00:08:29.460 --> 00:08:33.699
you've heard about,
I've heard about them, so, [LAUGH]

