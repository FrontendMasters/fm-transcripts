WEBVTT

1
00:00:00.310 --> 00:00:04.020
Okay, so the next thing that I wanna talk
a little bit about is code coverage.

2
00:00:04.020 --> 00:00:09.030
Code coverage is a metric that
you can use to know how much of

3
00:00:09.030 --> 00:00:12.480
your code base is being
exercised by your test suite.

4
00:00:12.480 --> 00:00:17.580
You can imagine if you have tests but
you're only ever hitting like ten lines of

5
00:00:17.580 --> 00:00:23.390
thousand line program, then that's not
gonna really tell you a whole lot.

6
00:00:23.390 --> 00:00:27.790
But if you can hit every line in your
test suite, then that's a lot better.

7
00:00:27.790 --> 00:00:30.845
And so
code coverage will let you tell that,

8
00:00:30.845 --> 00:00:33.178
we'll answer those kinds of questions.

9
00:00:33.178 --> 00:00:37.759
So I'm gonna talk really briefly about how
code coverage works behind the scenes and

10
00:00:37.759 --> 00:00:39.965
we'll get into using it in a little bit.

11
00:00:39.965 --> 00:00:45.340
So, code coverage tools generally
read the AST of your code.

12
00:00:45.340 --> 00:00:50.160
So this means that you can take a piece
of code like a piece of JavaScript and

13
00:00:50.160 --> 00:00:55.890
turn it into a data structure that
you can manipulate other tools.

14
00:00:55.890 --> 00:00:57.860
So I can show you what that looks like.

15
00:00:57.860 --> 00:00:59.947
So here we have a file foo.js.

16
00:00:59.947 --> 00:01:03.760
And I can require a library
that parses the AST like acorn.

17
00:01:04.810 --> 00:01:06.920
It has a parse function.

18
00:01:06.920 --> 00:01:16.080
And so I can do do fs.readFile on that
foo.js file and convert it to a string.

19
00:01:16.080 --> 00:01:19.330
And here we go, we have this data
structure now that represents this

20
00:01:19.330 --> 00:01:20.110
entire program.

21
00:01:21.540 --> 00:01:27.490
So there are other programs that you can
run that manipulate these data structures.

22
00:01:29.560 --> 00:01:34.088
And what you can do is, you can imagine if
you can write a program that could modify

23
00:01:34.088 --> 00:01:38.027
this data structure to put a little
wrapper around every single line.

24
00:01:38.027 --> 00:01:43.269
So it'd be like like countedLine (0) and

25
00:01:43.269 --> 00:01:49.222
then countedLine(1), countedLine(2),

26
00:01:49.222 --> 00:01:56.307
then you can imagine that every
time that this program ran,

27
00:01:56.307 --> 00:02:04.410
it would print out information about
where in the program you were.

28
00:02:04.410 --> 00:02:10.820
So that's really handy if you wanna
implement something like code coverage.

29
00:02:10.820 --> 00:02:14.530
So I have a little transform that
works in node in the browser for

30
00:02:14.530 --> 00:02:17.020
doing this called coverify.

31
00:02:17.020 --> 00:02:19.789
So with browserify you can
specify different kinds of

32
00:02:22.040 --> 00:02:25.210
plugins that will work on the source code.

33
00:02:25.210 --> 00:02:28.890
So in this case it coverify
uses the AST to do exactly

34
00:02:28.890 --> 00:02:32.400
like I was just showing you
putting in all kinds of little

35
00:02:32.400 --> 00:02:37.590
statements everywhere just to see
where in the program has been visited.

36
00:02:37.590 --> 00:02:42.130
So if we run our tests,
if I hop back into that

37
00:02:42.130 --> 00:02:47.220
example here where we
had index.js I think.

38
00:02:50.443 --> 00:02:55.133
Right, so why don't I write a quick little
simpler tests cuz that other one is quite

39
00:02:55.133 --> 00:02:56.010
complicated.

40
00:03:00.825 --> 00:03:04.840
So here we've got something more like
those original programs I was showing you.

41
00:03:06.800 --> 00:03:13.340
And we can elevenify 1 and
then get back the result, so.

42
00:03:15.362 --> 00:03:17.741
The result should be 111 in this case, and

43
00:03:17.741 --> 00:03:21.880
if there's an error we wanna know about
it, so that should be two assertions.

44
00:03:23.390 --> 00:03:29.430
Okay, so if I browserify this code,
there's an option if you wanna run your

45
00:03:29.430 --> 00:03:34.830
browserify code in node
you can pass in --node.

46
00:03:34.830 --> 00:03:38.452
And so
I guess the plan was wrong for that.

47
00:03:38.452 --> 00:03:42.456
Or plan (1) should be plan (2).

48
00:03:42.456 --> 00:03:43.840
Okay, so, start works.

49
00:03:43.840 --> 00:03:48.175
What that code is gonna look like on
standard out is it's formatted all

50
00:03:48.175 --> 00:03:52.364
into just one big blob that like,
if you were writing browser code,

51
00:03:52.364 --> 00:03:55.835
you would stick this in a script
tag like we did earlier.

52
00:03:55.835 --> 00:04:02.660
If I run this with the coverify package
however, we see pretty different code.

53
00:04:02.660 --> 00:04:06.170
So here we have all of these
statements coverage wrap,

54
00:04:07.550 --> 00:04:10.300
which are just all over the place.

55
00:04:10.300 --> 00:04:13.400
And how this works is every time it
gets to one of those statements,

56
00:04:13.400 --> 00:04:16.840
if it's the first time that it's seen it,
then it prints a message called covered.

57
00:04:16.840 --> 00:04:20.180
And it does that just like
tape using console.log.

58
00:04:20.180 --> 00:04:21.970
Which is something that's
gonna work in node and

59
00:04:21.970 --> 00:04:24.450
in the browser, so it's kinda handy.

60
00:04:24.450 --> 00:04:30.060
So if I run that in node now,
in addition to the tap output,

61
00:04:30.060 --> 00:04:31.920
I also see all of this
coverage information.

62
00:04:33.020 --> 00:04:39.880
So you can see that okay, the first thing
that it prints is for every file it

63
00:04:39.880 --> 00:04:44.760
provides a list of all of the places that
ought to be covered by the code coverage.

64
00:04:44.760 --> 00:04:48.650
And this is done with a with just
the first pass over the AST.

65
00:04:48.650 --> 00:04:51.380
Then every time it visits one of
those places for the first time,

66
00:04:51.380 --> 00:04:52.230
it prints a message.

67
00:04:53.420 --> 00:04:58.150
And so you can pipe that through another
program that comes with coverify

68
00:04:58.150 --> 00:05:03.180
if you do npm install dash g
coverify you'll get the program.

69
00:05:03.180 --> 00:05:06.120
And if you do npm install
coverify without dash g,

70
00:05:06.120 --> 00:05:09.430
you'll get the transform, as a library.

71
00:05:09.430 --> 00:05:12.090
So if I pipe that output through coverify

72
00:05:13.800 --> 00:05:18.514
I guess that's in node_modules/.bin

73
00:05:18.514 --> 00:05:22.610
cuz I didn't install it globally,
then I get a little coverage report.

74
00:05:22.610 --> 00:05:24.270
So in this case, the coverage is 100%.

75
00:05:24.270 --> 00:05:27.770
So we don't really need to
know much more about the code.

76
00:05:27.770 --> 00:05:32.550
But if we had places in the code,
like if I had some deadCode

77
00:05:32.550 --> 00:05:36.670
down here or
maybe I had a secret case where like,

78
00:05:36.670 --> 00:05:42.660
if n = 5, then I'm gonna make it mess up.

79
00:05:44.930 --> 00:05:45.801
Can I call it 554?

80
00:05:45.801 --> 00:05:50.870
Yeah, it'll be good.

81
00:05:50.870 --> 00:05:54.330
So if we had some special
cases in our code for example,

82
00:05:54.330 --> 00:05:59.950
then when I ran the coverify commands,
it's able to detect those.

83
00:05:59.950 --> 00:06:05.070
So we see that the first part of this
if statement did actually execute, but

84
00:06:05.070 --> 00:06:09.486
n was not 5, so
we didn't run into this case.

85
00:06:09.486 --> 00:06:13.890
So our code coverage
is now less than 100%.

86
00:06:13.890 --> 00:06:20.757
But if I modify the test suite
to add a second case for

87
00:06:20.757 --> 00:06:25.707
that, so I'll do for 5 now should be

88
00:06:25.707 --> 00:06:31.067
555, no 554, can see that.

89
00:06:31.067 --> 00:06:35.124
It's going to fail because the 554 case,

90
00:06:35.124 --> 00:06:38.980
but the code coverage should be 100%.

91
00:06:38.980 --> 00:06:44.490
So if I modify that,
code back to something that works.

92
00:06:45.840 --> 00:06:48.710
And now we should see 100% again.

93
00:06:50.410 --> 00:06:51.310
There we go.

94
00:06:51.310 --> 00:06:55.970
So that's kind of the basic idea of
how code coverage is implemented.

95
00:06:55.970 --> 00:07:01.602
And there's another tool that's a little
much more robust than this one.

96
00:07:01.602 --> 00:07:04.020
This is it's still useful,

97
00:07:04.020 --> 00:07:09.770
but it can't handle quite all of
the cases that this toolkit called nyc.

98
00:07:09.770 --> 00:07:13.308
So you can install it with npm
globally and it'll give you a command.

99
00:07:13.308 --> 00:07:17.354
And then you can just pass
nyc in front of whatever

100
00:07:17.354 --> 00:07:22.296
commands that you wanna run and
it's somehow able to know.

101
00:07:22.296 --> 00:07:26.516
I don't know exactly the mechanics
that it uses behind the scenes but

102
00:07:26.516 --> 00:07:30.240
probably something that the AST
in some really hacky stuff.

103
00:07:31.720 --> 00:07:33.640
I can only imagine what it's doing.

104
00:07:33.640 --> 00:07:37.890
But I can show you what it
looks like on a real code base.

105
00:07:37.890 --> 00:07:42.635
So here's just a simple little package or
an npm test, and I get this output or

106
00:07:42.635 --> 00:07:44.468
I could run tape test as well.

107
00:07:44.468 --> 00:07:46.750
So tape test.js.

108
00:07:46.750 --> 00:07:49.850
If you put nyc in front
of any of those commands

109
00:07:49.850 --> 00:07:52.410
then it's gonna print
out a coverage report.

110
00:07:52.410 --> 00:07:56.670
And I can show you what that looks
like if all of the code isn't covered

111
00:07:56.670 --> 00:07:59.220
by just like putting some
deadCode in here as well.

112
00:07:59.220 --> 00:08:01.640
So, extremely simple module.

113
00:08:01.640 --> 00:08:02.755
But if we had deadCode.

114
00:08:07.664 --> 00:08:10.790
Then nyc would tell us about that.

115
00:08:12.340 --> 00:08:17.380
So yeah, so uncovered lines 8 and then
there's a bunch of commands that you can

116
00:08:17.380 --> 00:08:24.902
use to sort of drill down more into where
in your code base you haven't covered.

