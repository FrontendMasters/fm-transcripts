WEBVTT

1
00:00:00.330 --> 00:00:04.204
So we're gonna use some modules
now to generate tap for us,

2
00:00:04.204 --> 00:00:09.086
we could do this our self with like
console.log, but why write your own tap

3
00:00:09.086 --> 00:00:14.430
system when there's perfectly capable
modules that can do it for us.

4
00:00:14.430 --> 00:00:18.281
So if you wanna write tests that
are only gonna run in node js,

5
00:00:18.281 --> 00:00:21.310
you can use the module called tap.

6
00:00:21.310 --> 00:00:24.300
If you wanna write tests that are gonna
run in both node in the browser,

7
00:00:24.300 --> 00:00:26.530
then you can use tape which I wrote.

8
00:00:26.530 --> 00:00:29.300
But they implement pretty
much the same API.

9
00:00:29.300 --> 00:00:33.090
So, if you decide to change
your mind later about,

10
00:00:33.090 --> 00:00:36.300
like if you have a tap test suite and
you want to run it in the browser, you can

11
00:00:36.300 --> 00:00:41.940
just swap out required tap that tests for
required tape and it will all work.

12
00:00:41.940 --> 00:00:48.490
So, I'm gonna make a directory.

13
00:00:48.490 --> 00:00:52.550
I'm gonna use tape for a couple of these
and then I'll swap that out for tap and

14
00:00:52.550 --> 00:00:53.720
you can see kind of the difference.

15
00:00:53.720 --> 00:01:01.220
So, the first thing that we're
gonna do is require tape like this.

16
00:01:01.220 --> 00:01:04.990
Some people like to call
their test function tape but

17
00:01:04.990 --> 00:01:07.480
I like to call it test, up to you.

18
00:01:07.480 --> 00:01:08.945
However you like to do it is fine.

19
00:01:08.945 --> 00:01:17.860
So how this works is you call the test
function which is exported by this module.

20
00:01:17.860 --> 00:01:22.450
You can give your test a name if you like,
this test has a name, and

21
00:01:22.450 --> 00:01:25.030
that'll appear in the output
in the tap format.

22
00:01:26.120 --> 00:01:27.640
It's optional, though.

23
00:01:27.640 --> 00:01:30.870
And then you can provide a function.

24
00:01:30.870 --> 00:01:35.930
This function is gonna
receive this argument.

25
00:01:35.930 --> 00:01:39.340
I like to call it t, but
you can call it whatever you like.

26
00:01:39.340 --> 00:01:41.320
Like test, for example.

27
00:01:41.320 --> 00:01:46.600
And that argument has an api that's
quite similar to the assert api.

28
00:01:46.600 --> 00:01:48.575
So you can do things like t.equal.

29
00:01:50.330 --> 00:01:54.120
You might also wanna call it assert
cuz it's like the assert object.

30
00:01:54.120 --> 00:01:58.610
But the things that the tape and
tap give you that are different or

31
00:01:58.610 --> 00:02:00.970
you get this thing called plan.

32
00:02:00.970 --> 00:02:02.799
So you can plan out
a number of assertions.

33
00:02:03.800 --> 00:02:08.560
And see, so I can show you how that
will fail if I don't have the correct

34
00:02:08.560 --> 00:02:10.170
number of assertions.

35
00:02:10.170 --> 00:02:13.140
So here I have two tests, but
I plan to have four tests.

36
00:02:14.400 --> 00:02:18.400
If I run my test suite now I see that
it fails because the plan didn't

37
00:02:18.400 --> 00:02:19.695
match the number of tests.

38
00:02:19.695 --> 00:02:23.643
Another way to do it is to
cal t.end instead of t.plan,

39
00:02:23.643 --> 00:02:28.769
this is kind of handy sometimes if all
that you have is a list of assertions

40
00:02:28.769 --> 00:02:33.137
that you wanna run through and
you don't have any call backs or

41
00:02:33.137 --> 00:02:37.864
anything like that, so
you don't have to worry about branching.

42
00:02:37.864 --> 00:02:40.707
So if I run the test suite now, it passes,

43
00:02:40.707 --> 00:02:46.250
if you try to do something after you've
ended the test suite, it'll also fail.

44
00:02:47.600 --> 00:02:53.160
And then I can show you that even
though the first assertion is gonna

45
00:02:53.160 --> 00:02:56.609
fail now it's gonna also run the second
one which is useful in a lot of cases.

46
00:02:58.160 --> 00:03:01.110
Right, so the first one fails.

47
00:03:01.110 --> 00:03:04.262
But unlike with the assert module
that throws an exception and

48
00:03:04.262 --> 00:03:06.740
kind of like bails out
of program execution.

49
00:03:08.030 --> 00:03:12.430
Our test suite is gonna keep running in
here it ran the second assertion as well.

50
00:03:12.430 --> 00:03:18.670
So the other thing about tests
with libraries like tap and

51
00:03:18.670 --> 00:03:23.680
tape, is that you can very easily
support asynchronous operations,

52
00:03:23.680 --> 00:03:28.710
because we either have to plan out
the number of assertions with t.plan,

53
00:03:28.710 --> 00:03:30.600
or we have to call t.end.

54
00:03:30.600 --> 00:03:36.440
So, if I don't do that this test is going
to fail because I never ended the test and

55
00:03:36.440 --> 00:03:38.739
I never planned out
a number of assertions.

56
00:03:40.860 --> 00:03:41.780
There we go.

57
00:03:41.780 --> 00:03:49.563
So what this implicitly gives us is
if I had a callback that never fired,

58
00:03:49.563 --> 00:03:55.271
like this never fires where
I was gonna end the test or

59
00:03:55.271 --> 00:03:59.315
have more assertions or something.

60
00:04:03.589 --> 00:04:08.150
And then I never call cb,
then this test will fail.

61
00:04:08.150 --> 00:04:12.210
So, it's gonna deal with one of
those cases that was a problem

62
00:04:12.210 --> 00:04:13.040
with the assert module.

63
00:04:14.930 --> 00:04:16.340
So that's what that looks like.

64
00:04:16.340 --> 00:04:20.350
It looks like the same as if we
hadn't planned or ended any test.

65
00:04:24.661 --> 00:04:28.680
So a more practical example,
you might have some asynchronous function,

66
00:04:28.680 --> 00:04:32.560
I'm just gonna use set timeout
to make it real simple.

67
00:04:32.560 --> 00:04:34.698
So we'll plan out
a couple of things to do.

68
00:04:34.698 --> 00:04:39.242
And then 100 milliseconds later,
we'll do the final assertion.

69
00:04:41.975 --> 00:04:45.779
Also with any of this assertions you can

70
00:04:45.779 --> 00:04:50.735
always provide a final
description as a string, so

71
00:04:50.735 --> 00:04:56.000
true is okay, I don't know,
something like that.

72
00:04:56.000 --> 00:04:59.590
This examples are all still a bit
contrived but, there we go.

73
00:04:59.590 --> 00:05:02.930
So, our first test still fails
cuz I haven't updated it but

74
00:05:02.930 --> 00:05:04.900
the other two succeed.

75
00:05:04.900 --> 00:05:08.075
And the number of assertions is
what we would expect it's 3.

76
00:05:10.240 --> 00:05:13.090
Another thing to mention
about the tape and

77
00:05:13.090 --> 00:05:17.600
tap api is that you can specify as
many of these tests as you like.

78
00:05:17.600 --> 00:05:22.600
Including in other files, and
they'll execute serially.

79
00:05:22.600 --> 00:05:27.630
This is because if you have too
much parallelism in your tests,

80
00:05:27.630 --> 00:05:31.180
if you're dealing things
that have to do with IO,

81
00:05:31.180 --> 00:05:34.900
it can be quite difficult to kind
of reason your way through them.

82
00:05:34.900 --> 00:05:39.410
So, the trade off that tape and tap
make in this case is that it's probably

83
00:05:39.410 --> 00:05:42.910
better most of the time to
execute things serially.

84
00:05:42.910 --> 00:05:45.470
That's not true of all test suites.

85
00:05:45.470 --> 00:05:49.410
I think some of them will
run things in parallel.

86
00:05:49.410 --> 00:05:55.180
But that's just the behavior that
you get from these libraries.

87
00:05:55.180 --> 00:05:59.460
I think that's better than having one
monster library that you have to configure

88
00:05:59.460 --> 00:06:00.600
in the way that you like.

89
00:06:00.600 --> 00:06:01.890
And everyone does it differently.

90
00:06:01.890 --> 00:06:08.030
So just pick the opinions that you like
in terms of which libraries you use.

91
00:06:08.030 --> 00:06:09.290
I like this one.

92
00:06:09.290 --> 00:06:13.720
Okay, so if we have a second test,
this is a second test.

93
00:06:14.940 --> 00:06:17.785
Then the assertions that we put in here.

94
00:06:20.738 --> 00:06:25.130
Are going to happen after
this first test is complete.

95
00:06:25.130 --> 00:06:26.780
So even though there's a set timeout here,

96
00:06:28.010 --> 00:06:31.770
the second test won't happen
until after it's finished.

97
00:06:34.950 --> 00:06:35.890
Six, sure.

98
00:06:37.050 --> 00:06:38.595
Give you any idea what that looks like?

99
00:06:38.595 --> 00:06:39.300
There we go.

100
00:06:39.300 --> 00:06:44.680
So I fixed that first assertion, and
we get a little successful tests.

101
00:06:44.680 --> 00:06:45.230
There we go.

102
00:06:45.230 --> 00:06:46.860
So the first three happened,

103
00:06:46.860 --> 00:06:51.650
even though one happens inside of a set
timeout, then the second test happens.

104
00:06:51.650 --> 00:06:56.070
And if the first test never finished,
so suppose that

105
00:06:56.070 --> 00:07:01.440
we'd planned to four assertions but
we only have three, then the test suite

106
00:07:01.440 --> 00:07:06.590
is going to run the three tests and
then it's just going to sit there.

107
00:07:06.590 --> 00:07:10.420
In this particular case something a bit
special is happening because node has

108
00:07:10.420 --> 00:07:17.169
a way of tracking the number of handles
that are registered on the event loop.

109
00:07:19.560 --> 00:07:23.430
And there's also a hook to
the programs like this.

110
00:07:23.430 --> 00:07:28.330
Test suite can hook on to
where the testing library is

111
00:07:28.330 --> 00:07:32.360
gonna know right before
your test suite finishes.

112
00:07:32.360 --> 00:07:36.660
So it can say, well, I was waiting
on that first test to finish but

113
00:07:36.660 --> 00:07:40.370
I guess now if we're exiting
node then that never happened.

114
00:07:40.370 --> 00:07:42.940
So I'm gonna print something
about it right now.

115
00:07:42.940 --> 00:07:43.900
So that's how that works.

116
00:07:45.900 --> 00:07:49.510
Okay, so I'm gonna add, well,
I'm gonna do one last thing.

117
00:07:49.510 --> 00:07:53.956
So if you wanna use tap instead,
you can do var test =

118
00:07:53.956 --> 00:07:59.450
require('tap').test after
you npm install it.

119
00:07:59.450 --> 00:08:02.990
So if I run it,
it works pretty much just the same.

120
00:08:02.990 --> 00:08:05.330
Tap will format things
a little bit differently.

121
00:08:05.330 --> 00:08:08.100
It adds some things that
you don't get with tape.

122
00:08:08.100 --> 00:08:09.550
Although it doesn't run in the browser.

123
00:08:09.550 --> 00:08:11.530
So, just two ways that you can do it.

