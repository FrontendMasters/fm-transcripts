WEBVTT

1
00:00:00.290 --> 00:00:03.520
I can just go over how this
test file works a little bit,

2
00:00:03.520 --> 00:00:08.510
just to cover all the pieces so
that everybody's got the concepts down.

3
00:00:08.510 --> 00:00:12.640
And the first thing we do is,
we require one of these testing libraries.

4
00:00:12.640 --> 00:00:15.440
They have pretty much the same API, so it
doesn't really matter which one we load.

5
00:00:16.470 --> 00:00:21.719
So here I'll use tape, then we call
the test function that we get from tape,

6
00:00:23.020 --> 00:00:29.200
with name if we want but
the name is optional, so that's fine too.

7
00:00:30.960 --> 00:00:35.950
And then inside of the test function,
as the second argument,

8
00:00:35.950 --> 00:00:41.420
we have this function and
we get a handle to this t object.

9
00:00:41.420 --> 00:00:48.186
The t has a bunch of methods that you're
gonna also find on the node cert package,

10
00:00:48.186 --> 00:00:52.182
but it has a few more,
like t.plan and t.end.

11
00:00:52.182 --> 00:00:58.147
And plan an end are how you can
specify when your test is over with,

12
00:00:58.147 --> 00:01:03.029
because otherwise JavaScript
has this thing known as

13
00:01:03.029 --> 00:01:06.307
run-to-completion semantics.

14
00:01:06.307 --> 00:01:09.100
So these three things are gonna fire and
then this

15
00:01:10.120 --> 00:01:14.990
test function is gonna be over with,
so we kind of need a way to tell

16
00:01:16.040 --> 00:01:20.530
the testing library that hang on a sec,
this test actually needs a bit more time.

17
00:01:20.530 --> 00:01:24.110
It's gonna do more stuff asynchronously
before we move to the next test.

18
00:01:25.580 --> 00:01:31.970
So this sort of this implicit flow
control between every time you run tests.

19
00:01:31.970 --> 00:01:36.865
So I also wanna show you what it
looks like to have a test suite.

20
00:01:36.865 --> 00:01:43.849
So maybe instead of putting both
of these tests into the same file,

21
00:01:43.849 --> 00:01:49.370
we can put this into another
one called second.js.

22
00:01:49.370 --> 00:01:51.480
So I'll delete it from the first one and

23
00:01:51.480 --> 00:01:56.291
I'll move that test.js file,
call it one.js.

24
00:01:56.291 --> 00:01:59.340
And the code should be on the GIT repo,

25
00:01:59.340 --> 00:02:03.360
by the way, because of that bash loop
that pushed it, so get it while you can.

26
00:02:04.370 --> 00:02:07.933
So now I've got one and second.js.

27
00:02:07.933 --> 00:02:12.553
I need to modify second so that I
require the testing library as well, so

28
00:02:12.553 --> 00:02:14.740
I'll do require('tape').

29
00:02:14.740 --> 00:02:21.980
Now we can individually run either script,
which is kind of unique to,

30
00:02:21.980 --> 00:02:25.640
not very many testing libraries
let you run your tests like this.

31
00:02:25.640 --> 00:02:28.269
A lot of them have you
run a special program,

32
00:02:28.269 --> 00:02:33.121
because they depend on things like globals
and they have a lot of setup involved.

33
00:02:33.121 --> 00:02:38.630
But I really like tap and tape because you
can run your test with node if you like.

34
00:02:38.630 --> 00:02:43.700
However, if you have a whole lot
of files that you want to run

35
00:02:43.700 --> 00:02:49.030
one after the other, what you can do is,
if you install tap and

36
00:02:49.030 --> 00:02:55.720
tape globally by doing this command,
then you'll get a tap and a tape command.

37
00:02:55.720 --> 00:02:59.780
So if I do something like tape *.js,

38
00:02:59.780 --> 00:03:04.530
it's gonna run all of those
files that match that wildcard.

39
00:03:04.530 --> 00:03:06.360
The same is true for the tap command,

40
00:03:06.360 --> 00:03:08.560
although it formats things
a little bit differently.

41
00:03:08.560 --> 00:03:13.221
The tap command is still parsing the tap
format, but what it shows you, oops,

42
00:03:13.221 --> 00:03:15.634
sorry, I guess I didn't have that one.

43
00:03:22.113 --> 00:03:28.283
But what the tap command is gonna show
you is a more concise output, so.

44
00:03:39.476 --> 00:03:43.691
Actually, I have that in my cache,
so this will make it a lot faster.

45
00:03:43.691 --> 00:03:48.922
This alias does npn install
with a --cash -min Infinity,

46
00:03:48.922 --> 00:03:53.960
capital I, in that only reads
things from my local cache.

47
00:03:53.960 --> 00:03:56.195
But it's still slow because I've got so

48
00:03:56.195 --> 00:04:00.675
many packages in my dependency graph that
it really struggles to cope with that.

49
00:04:03.276 --> 00:04:07.260
I do wanna show what the tap output
looks like, so I'm gonna wait.

50
00:04:07.260 --> 00:04:08.580
Hopefully, not very long.

51
00:04:08.580 --> 00:04:10.280
Well, we still have Internet, question.

52
00:04:10.280 --> 00:04:13.860
&gt;&gt; Did you say that was an alias,
or is that existing-

53
00:04:13.860 --> 00:04:14.750
&gt;&gt; Yeah, it's an alias.

54
00:04:14.750 --> 00:04:16.970
So I'll show you what it,
that's what it is.

55
00:04:18.498 --> 00:04:23.270
If you too want to be able to use
npm offline in version 5, there's

56
00:04:23.270 --> 00:04:28.562
a lot of stuff coming down to make a lot
of these offline use cases a lot smoother.

57
00:04:28.562 --> 00:04:34.340
There's gonna be a flag called --offline,
and some other

58
00:04:34.340 --> 00:04:37.760
tricks that you can sort of customize how
you want your offline behavior to work.

59
00:04:39.140 --> 00:04:43.655
There's one flag, I think, that's coming,
that will have you prefer to use your

60
00:04:43.655 --> 00:04:46.835
local cache if you have
the latest up-to-date package.

61
00:04:46.835 --> 00:04:48.920
Like that.

62
00:04:48.920 --> 00:04:52.100
Okay, so there's also the tap command.

63
00:04:52.100 --> 00:04:53.990
So here's what the tape output looks like.

64
00:04:53.990 --> 00:04:58.304
It pretty much just
concatenates the tap output and

65
00:04:58.304 --> 00:05:02.800
keeps the plan around so
that you see it at the end.

66
00:05:02.800 --> 00:05:04.970
Tape is actually not
doing anything special,

67
00:05:04.970 --> 00:05:07.170
I can show you the entire program.

68
00:05:07.170 --> 00:05:11.361
It's more complicated than it used to be,
but it used to be pretty much just,

69
00:05:11.361 --> 00:05:14.140
it will loop over all of the files and
require them.

70
00:05:15.380 --> 00:05:17.300
So I can show you what.

71
00:05:17.300 --> 00:05:21.409
Pretty much what it's doing is,

72
00:05:21.409 --> 00:05:26.251
if I did fs.readdirSync, just to make

73
00:05:26.251 --> 00:05:31.548
something easy, ('.').forEach.

74
00:05:31.548 --> 00:05:38.498
Actually, if I .filter that for
things that end in JavaScript, .js,

75
00:05:38.498 --> 00:05:43.691
.test(s), regex's really handy.

76
00:05:43.691 --> 00:05:50.025
And then you can, for each of those files,
I want to just require the file.

77
00:05:53.725 --> 00:06:00.700
Oops, and then that's gotta be
a absolute or relative path.

78
00:06:00.700 --> 00:06:04.483
So, oops, received undefined.

79
00:06:08.724 --> 00:06:10.910
Path.resolve, sorry.

80
00:06:10.910 --> 00:06:13.620
Okay, so we do something like that.

81
00:06:13.620 --> 00:06:16.520
And there we go,
there's our test output, pretty cool.

82
00:06:16.520 --> 00:06:21.190
And then when you finally exit
by doing Ctrl+D in the repl,

83
00:06:21.190 --> 00:06:23.900
that's when the testing library
knows that, the program is finished.

84
00:06:23.900 --> 00:06:26.904
So I can print out the rest of the output,
which is the plan, and

85
00:06:26.904 --> 00:06:28.286
this other stuff at the end.

86
00:06:28.286 --> 00:06:32.241
That's just kind of a convention in tap,
it's not really specified, I don't think,

87
00:06:32.241 --> 00:06:33.050
in the protocol.

88
00:06:35.450 --> 00:06:40.220
And then how tap formats that
output is a little bit more terse.

89
00:06:40.220 --> 00:06:44.040
So it just sort of shows you a summary for
every file, and there's different ways to

90
00:06:44.040 --> 00:06:48.400
customize the output with tap but
hat's the default one that you get.

91
00:06:48.400 --> 00:06:52.470
What's cool is that even though
I'm using tape in this test suite,

92
00:06:52.470 --> 00:06:57.300
because I'm printing tap-formatted output
to standard out, then the tap come in,

93
00:06:57.300 --> 00:06:58.370
that's all that it's gonna read.

94
00:06:58.370 --> 00:07:00.410
So it's not like it's tightly coupled or
anything.

95
00:07:01.430 --> 00:07:02.010
Question?

96
00:07:02.010 --> 00:07:08.206
&gt;&gt; Why does tap have a time on
second js but not in one js?

97
00:07:08.206 --> 00:07:08.947
&gt;&gt; I don't know.

98
00:07:08.947 --> 00:07:11.599
[LAUGH] It's just how it is, I guess.

99
00:07:13.544 --> 00:07:16.723
Yeah, tap does a couple
of other fancy things.

100
00:07:16.723 --> 00:07:20.301
If some of your tests are taking kind
of a long time, it'll print out the,

101
00:07:20.301 --> 00:07:23.603
this took 3000 milliseconds-
&gt;&gt; Outliers.

102
00:07:23.603 --> 00:07:25.090
&gt;&gt; Or whatever, yeah.

103
00:07:25.090 --> 00:07:28.210
It also prints the summary time.

104
00:07:28.210 --> 00:07:30.580
So the tape command is much simpler.

105
00:07:30.580 --> 00:07:35.200
Most of that code in that command is
just to work on Windows with globs,

106
00:07:35.200 --> 00:07:39.150
because they don't work very reliably
if you're not on a Unixy system.

107
00:07:40.890 --> 00:07:45.286
Okay, so now one other thing
that I wanted to cover, so

108
00:07:45.286 --> 00:07:50.079
I covered kind of how you can
split up your code into a suite.

109
00:07:50.079 --> 00:07:54.503
So what I would typically do if I'm
gonna organize a real project is

110
00:07:54.503 --> 00:07:59.085
I typically have a test directory and
I put all my test files in there,

111
00:07:59.085 --> 00:08:03.310
then I'd have something like
my implementation file.

112
00:08:03.310 --> 00:08:08.010
So this would be, I'll just have
a really simple placeholder function,

113
00:08:08.010 --> 00:08:09.879
it could be asynchronous though.

114
00:08:09.879 --> 00:08:17.590
It's gonna asynchronously compute with
set timeout, maybe half a second.

115
00:08:17.590 --> 00:08:22.687
It's gonna compute with a callback n

116
00:08:22.687 --> 00:08:27.793
times 11, so, actually 111.

117
00:08:27.793 --> 00:08:32.500
So this is just a really simple module
just to kind of give you an idea for what

118
00:08:32.500 --> 00:08:37.839
a slightly more realistic but still plenty
contrived test suite is gonna look like.

119
00:08:39.610 --> 00:08:45.745
So here I have one.js,
I would probably load in that,-

120
00:08:48.220 --> 00:08:54.124
Call it elevenizer,
cuz 11 plus an extra 1, izes it.

121
00:08:54.124 --> 00:08:57.382
I don't know, it's a silly name.

122
00:08:57.382 --> 00:09:02.964
I'm in the test directory so I can
require the parent directory like that,

123
00:09:02.964 --> 00:09:08.030
and then I will do things like,
this could be called single digits.

124
00:09:08.030 --> 00:09:12.858
So everything from 0 through 9, maybe, so

125
00:09:12.858 --> 00:09:16.670
that's gonna be 10 tests.

126
00:09:16.670 --> 00:09:19.910
I could have a little for loop or
I could kind of explicitly enumerate them.

127
00:09:19.910 --> 00:09:24.892
So I'm gonna something
like t.equal(elevenizer(0)

128
00:09:24.892 --> 00:09:29.782
should be 0, 1 should be 1,
or I can have a little loop.

129
00:09:35.344 --> 00:09:39.372
And then I can just assert that, well, I
guess this would sort of defeat the point

130
00:09:39.372 --> 00:09:43.004
cuz I'm doing the same arithmetic,
so why don't I just list those out?

131
00:09:46.041 --> 00:09:52.290
So 0 should be 0,
1 should be something else.

132
00:09:52.290 --> 00:09:54.630
I don't have to do all of them,
I'll skip a few.

133
00:09:54.630 --> 00:09:55.940
There we go.

134
00:09:55.940 --> 00:10:01.270
So that's not gonna be ten tests,
that's gonna be six.

135
00:10:01.270 --> 00:10:04.712
I'm gonna have these values,
are what I expect.

136
00:10:08.651 --> 00:10:10.368
It can run the test.

137
00:10:10.368 --> 00:10:11.860
So there we go.

138
00:10:11.860 --> 00:10:16.950
It doesn't actually work because my test,
my implementation,

139
00:10:16.950 --> 00:10:19.670
doesn't return the value,
it's actually a callback.

140
00:10:19.670 --> 00:10:21.343
So I have to rewrite all of this.

141
00:10:23.926 --> 00:10:27.643
And then, if you have errors,
you can either do t.ifError,

142
00:10:27.643 --> 00:10:29.154
like we saw with assert.

143
00:10:29.154 --> 00:10:33.905
Or there's an even shorter alias, you can
just do t.error, which also does ifError.

144
00:10:35.150 --> 00:10:39.273
So what this is gonna look like
is something more like this.

145
00:10:42.802 --> 00:10:47.155
Right, so, and then maybe for the
description I could put what the value for

146
00:10:47.155 --> 00:10:47.980
the input is.

147
00:10:49.090 --> 00:10:51.178
So we do this for
a couple of other values.

148
00:10:55.271 --> 00:11:03.260
Maybe, Put 7s, 7s are cool.

149
00:11:03.260 --> 00:11:05.360
That's gonna be 6.

150
00:11:05.360 --> 00:11:07.660
So if I run that test now, cool.

151
00:11:07.660 --> 00:11:11.560
So we're testing kind of like a real but
still contrived API example.

152
00:11:11.560 --> 00:11:15.200
This is a really super common pattern.

