WEBVTT

1
00:00:00.070 --> 00:00:02.266
So everything that we've done already,

2
00:00:02.266 --> 00:00:06.166
including a writing system that works
exactly like I've just shown you.

3
00:00:06.166 --> 00:00:10.920
You can get all in one way, all in one
package with this thing called Choo.

4
00:00:12.150 --> 00:00:19.680
So if you do npm install choo like this,
then you sort of get set up with

5
00:00:19.680 --> 00:00:24.100
basically the architecture that I've just
laid out using most of the same modules.

6
00:00:24.100 --> 00:00:27.445
In fact, it uses yo-yo and hyperx and bel.

7
00:00:27.445 --> 00:00:32.250
And it's built around this
CSS system called sheetify,

8
00:00:32.250 --> 00:00:34.050
which you don't have to use.

9
00:00:34.050 --> 00:00:35.950
But if you wanna use it,
it works pretty well.

10
00:00:35.950 --> 00:00:39.070
And this is just a way of managing CSS,
yep.

11
00:00:39.070 --> 00:00:43.004
&gt;&gt; If you have the modules
within Choo already installed,

12
00:00:43.004 --> 00:00:47.784
and then you install Choo,
would there be any conflicts or issues?

13
00:00:47.784 --> 00:00:48.637
&gt;&gt; Not if you install Choo.

14
00:00:48.637 --> 00:00:52.675
No, there shouldn't be any
problem with doing that.

15
00:00:52.675 --> 00:00:55.502
Okay, so we can rewrite our code now

16
00:00:55.502 --> 00:00:59.656
to use Choo instead of
doing everything ourselves.

17
00:00:59.656 --> 00:01:02.378
So if I just make sure I
have it installed first.

18
00:01:05.035 --> 00:01:07.407
Yeah, good, okay.

19
00:01:07.407 --> 00:01:12.068
So we're gonna use Choo and that's gonna
set up some things like the router for

20
00:01:12.068 --> 00:01:15.290
us that this push state and
a handful of other things.

21
00:01:15.290 --> 00:01:17.864
But Choo itself is only 4 kilobytes, so

22
00:01:17.864 --> 00:01:21.720
it can't really be doing all that much,
I figure.

23
00:01:21.720 --> 00:01:26.588
Now instead of requiring yo-yo,
you can just require a choo/html,

24
00:01:26.588 --> 00:01:28.497
which does the same thing.

25
00:01:28.497 --> 00:01:30.000
It's using the same libraries even.

26
00:01:31.440 --> 00:01:35.850
And now,
instead of calling emit on update,

27
00:01:35.850 --> 00:01:39.000
we can emit,
the event name is called render instead.

28
00:01:39.000 --> 00:01:42.090
That's just a convention
that Choo does for you.

29
00:01:42.090 --> 00:01:46.607
Okay, so we can create an app, like that.

30
00:01:46.607 --> 00:01:51.199
You can mount it onto the DOM,
so like this.

31
00:01:51.199 --> 00:01:54.350
So we don't have to create
that root element anymore.

32
00:01:54.350 --> 00:01:55.758
So we can get rid of that code.

33
00:01:55.758 --> 00:01:59.067
Cuz we don't have to call our update
function right away cuz Choo is gonna

34
00:01:59.067 --> 00:02:00.510
handle that now.

35
00:02:00.510 --> 00:02:04.210
So don't have to have an update listener.

36
00:02:04.210 --> 00:02:08.410
Gonna take our update code and
move it up a little bit so

37
00:02:08.410 --> 00:02:11.300
that we can put it on a route.

38
00:02:11.300 --> 00:02:13.922
So what that looks like
is you call app.route.

39
00:02:13.922 --> 00:02:16.290
You give it a path where you
want this to be defined.

40
00:02:17.640 --> 00:02:19.780
And then you provide a function.

41
00:02:21.390 --> 00:02:25.118
And your function can
return this DOM tree.

42
00:02:25.118 --> 00:02:28.630
So with hyperx, you actually get back

43
00:02:28.630 --> 00:02:33.650
DOM elements because Morph DOM deals with
native DOM elements, not a virtual DOM.

44
00:02:33.650 --> 00:02:36.856
So we can refactor our code a little bit.

45
00:02:36.856 --> 00:02:42.990
Our routes, I think they get the state and
an emit object.

46
00:02:42.990 --> 00:02:44.430
I forgot actually which one comes first.

47
00:02:44.430 --> 00:02:45.727
I'm gonna look that up really quick.

48
00:02:48.401 --> 00:02:52.788
Right, the state, yeah,
I get the order right, state then emit.

49
00:02:52.788 --> 00:02:58.025
Okay, so now what's really nice
is we can't be tempted now

50
00:02:58.025 --> 00:03:03.158
to call up bus.on to set up
some hacky listeners because we

51
00:03:03.158 --> 00:03:09.830
only get access to the emit function for
this state management system.

52
00:03:09.830 --> 00:03:12.858
So that's pretty handy.

53
00:03:12.858 --> 00:03:19.811
I can update the stream handling code now
so that it's gonna do, I think choo.emit.

54
00:03:21.630 --> 00:03:25.569
Well, we don't wanna do
the rendering there, but

55
00:03:25.569 --> 00:03:29.142
we wanna do choo.emit or app.emit, sorry,

56
00:03:29.142 --> 00:03:34.744
set-visitors now because the instance
itself is gonna deal with that.

57
00:03:34.744 --> 00:03:38.060
We can get rid of our own
logic cuz Choo does that.

58
00:03:38.060 --> 00:03:39.720
It's one of the few things that it does.

59
00:03:42.080 --> 00:03:48.933
And now, instead of setting up the reducer
this way, what you do is app.use.

60
00:03:48.933 --> 00:03:56.215
And then the app.use function,
Gets state and

61
00:03:56.215 --> 00:03:59.950
the full event emitter,
not just the emit function.

62
00:04:01.220 --> 00:04:06.536
So if I modify the order of
the arguments in our reducer,

63
00:04:06.536 --> 00:04:09.374
it should work just the same.

64
00:04:09.374 --> 00:04:11.760
I'm gonna go ahead and do that now.

65
00:04:11.760 --> 00:04:15.713
So the state was the first argument and
the emitter is the second argument.

66
00:04:15.713 --> 00:04:22.870
And now that I've done all of that,
it should work, I think, we'll see.

67
00:04:22.870 --> 00:04:30.290
Great, and instead of setting up the
state, Choo is gonna track that itself.

68
00:04:30.290 --> 00:04:35.790
So to initialize that kinda stuff,
we can do that in our reducer now.

69
00:04:35.790 --> 00:04:41.742
So state.visitors = 0 and state.x = 0.

70
00:04:41.742 --> 00:04:45.443
And ideally, this is fine if you
only have a couple of events.

71
00:04:45.443 --> 00:04:48.544
But if you have more events and they're
sort of some are related and some are not,

72
00:04:48.544 --> 00:04:49.959
like these aren't related events,

73
00:04:49.959 --> 00:04:51.892
they deal with different
parts of the interface.

74
00:04:51.892 --> 00:04:55.332
Then you can split those
out into separate files and

75
00:04:55.332 --> 00:04:59.662
call use on them separately to
kind of give you more separation.

76
00:04:59.662 --> 00:05:04.351
Okay, so I guess it could emit the update.

77
00:05:04.351 --> 00:05:07.760
I don't think that I need to update
emit that event to begin with.

78
00:05:07.760 --> 00:05:13.930
So if everything is working,
it's kind of a big unknown.

79
00:05:13.930 --> 00:05:16.755
But I'll run npm run dev, and
I'll run the server again.

80
00:05:19.774 --> 00:05:24.300
So, Here we go.

81
00:05:24.300 --> 00:05:27.614
And our code still works, I think.

82
00:05:27.614 --> 00:05:29.640
Wait, no, it was cached.

83
00:05:29.640 --> 00:05:35.088
[LAUGH] Right, so one thing to be
a little bit careful about is because

84
00:05:35.088 --> 00:05:41.123
we did app.mount body, you actually
have to have a body tag in your codes.

85
00:05:41.123 --> 00:05:44.120
If you see that error, this is why.

86
00:05:44.120 --> 00:05:45.560
I make that error all the time.

87
00:05:45.560 --> 00:05:50.641
So don't feel odd.

88
00:05:56.994 --> 00:05:59.298
Sorry, this I meant to do.

89
00:05:59.298 --> 00:06:02.000
This takes a selector,
not a DOM element as well.

90
00:06:02.000 --> 00:06:05.700
I think I've already logged an issue
about that, how it should do both.

91
00:06:05.700 --> 00:06:08.770
But for the time being,
it does take a query selector.

92
00:06:08.770 --> 00:06:10.430
Okay, there we go.

93
00:06:10.430 --> 00:06:13.869
So I don't see the h1, but
I do see a button, which is good.

94
00:06:16.158 --> 00:06:19.470
I think it's because I might
have to emit an event.

95
00:06:21.804 --> 00:06:24.271
Right, this should be called
render now and not update.

96
00:06:27.201 --> 00:06:30.820
And I'll just double check that we're
not doing update anywhere, okay, good.

97
00:06:32.760 --> 00:06:35.320
And I think I need to update.

98
00:06:35.320 --> 00:06:38.359
I think I need to emit
a render event right away.

99
00:06:43.291 --> 00:06:44.810
Okay, that works like before.

100
00:06:45.840 --> 00:06:51.632
And if I open a new one,
We get some error in our stream.

101
00:06:53.630 --> 00:06:56.301
App.emit is not a function, apparently.

102
00:06:56.301 --> 00:06:59.473
Maybe that was an interface
that it's going to have.

103
00:07:02.003 --> 00:07:06.928
So-
&gt;&gt; Can you just emit?

104
00:07:06.928 --> 00:07:07.863
&gt;&gt; What's that?

105
00:07:07.863 --> 00:07:09.366
&gt;&gt; Don't you just call emit?

106
00:07:09.366 --> 00:07:15.290
Cuz you are calling emit('increment-x')
and just without app.emit, it's just emit.

107
00:07:15.290 --> 00:07:17.528
&gt;&gt; Emit isn't in scope.

108
00:07:17.528 --> 00:07:21.770
So to make an emitter in scope,
I have to do .use.

109
00:07:21.770 --> 00:07:24.531
I think they're gonna change that soon,
too.

110
00:07:24.531 --> 00:07:28.268
Just kinda going off the discussion on
the IRC channel more than what the API is

111
00:07:28.268 --> 00:07:29.320
currently.

112
00:07:29.320 --> 00:07:31.310
There we go.
So it basically works the same as before.

113
00:07:31.310 --> 00:07:36.170
So we ported our existing application
into this slightly more organized,

114
00:07:36.170 --> 00:07:37.360
more structured way of doing it.

115
00:07:37.360 --> 00:07:39.047
But the important thing, I think,

116
00:07:39.047 --> 00:07:42.705
here is that when you use libraries like
this that are really tiny, and you can

117
00:07:42.705 --> 00:07:46.493
kind of find the cluster of them that all
tend to work relatively well together.

118
00:07:46.493 --> 00:07:50.057
Then you can build these kinds
of applications incrementally,

119
00:07:50.057 --> 00:07:52.570
which I think is a really
powerful approach.

120
00:07:53.740 --> 00:08:01.891
Okay, so
I'm gonna add all of that to the project.

121
00:08:10.502 --> 00:08:11.180
And I'll push it.

