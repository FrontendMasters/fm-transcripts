WEBVTT

1
00:00:00.580 --> 00:00:03.161
Maybe we want a complete
multimedia experience.

2
00:00:03.161 --> 00:00:05.895
So what else do we need for

3
00:00:05.895 --> 00:00:11.902
our new neo-web-dev experience and
that's audio.

4
00:00:11.902 --> 00:00:17.728
So, I've done a lot with procedurally
generated audio in JavaScript.

5
00:00:17.728 --> 00:00:20.702
I think it's even better if
you can do it on the GPU, but

6
00:00:20.702 --> 00:00:23.740
I haven't quite got a good stack going for
that yet.

7
00:00:23.740 --> 00:00:25.900
In the meantime,
we'll have to settle for this.

8
00:00:25.900 --> 00:00:34.581
So, if you install this package called
webaudio, It binds the webaudio API and

9
00:00:34.581 --> 00:00:39.351
nodes so that you can sort of
do this DSP style programming.

10
00:00:39.351 --> 00:00:41.293
So here's the whole thing.

11
00:00:41.293 --> 00:00:45.459
It's just a small wrapper around
the window.audio context API.

12
00:00:48.011 --> 00:00:52.466
Okay, so how this looks,
you make a file song.js.

13
00:00:52.466 --> 00:00:56.723
In the browser you can
do require webaudio and

14
00:00:56.723 --> 00:01:00.203
in node, you can do require baudio.

15
00:01:00.203 --> 00:01:02.558
But you have to have socks
installed on the command line.

16
00:01:02.558 --> 00:01:05.229
I'm not gonna get into it,
we'll stick to the browser for now.

17
00:01:05.229 --> 00:01:12.810
So, You give baudio a function.

18
00:01:12.810 --> 00:01:16.040
It's gonna get a t,
which is a variable time.

19
00:01:16.040 --> 00:01:19.200
The time is in seconds,
which is important.

20
00:01:19.200 --> 00:01:24.030
This function is going to get called about
44 to 48,000 times per second depending

21
00:01:24.030 --> 00:01:26.250
on what your soundcard sample rate is.

22
00:01:27.360 --> 00:01:29.486
And so you can return a waveform.

23
00:01:29.486 --> 00:01:34.542
For example, if we want just a sine
wave that's gonna work at 440 hertz,

24
00:01:34.542 --> 00:01:39.124
which is middle A, you can do 2
times math.PI times 440 times t.

25
00:01:39.124 --> 00:01:41.615
And you can call b.play.

26
00:01:42.790 --> 00:01:48.023
You can budo that file and
you can load it up in

27
00:01:48.023 --> 00:01:52.988
the browser [SOUND] and
you get a sine wave.

28
00:01:52.988 --> 00:01:55.020
If we wanna do other stuff, we can.

29
00:01:55.020 --> 00:01:59.670
I've got a web page that pretty much
just wraps this in a text area and

30
00:01:59.670 --> 00:02:00.730
a few other things.

31
00:02:00.730 --> 00:02:05.360
So you can go to this website
studio.substack.net, fantastic.

32
00:02:05.360 --> 00:02:08.280
I hear some other people
getting it working.

33
00:02:08.280 --> 00:02:09.504
Don't stop, it's great.

34
00:02:09.504 --> 00:02:12.333
[SOUND] So this website also,
if you wrote it, it's gonna do that.

35
00:02:12.333 --> 00:02:15.987
[SOUND] You can click on recent to
see what other people have done but

36
00:02:15.987 --> 00:02:17.587
probably wait a little bit.

37
00:02:17.587 --> 00:02:23.170
The one file that I like to load is
this file called slash waves underscore.

38
00:02:23.170 --> 00:02:26.875
Because I've baked in all of these
triangle sawtooth square waves and

39
00:02:26.875 --> 00:02:31.494
a little clamp function Also,

40
00:02:31.494 --> 00:02:36.926
you don't have to pass in two pi times
the frequency times t, you can just do.

41
00:02:36.926 --> 00:02:44.314
[MUSIC]

42
00:02:44.314 --> 00:02:49.550
So, so more things to do,
we can do sine of

43
00:02:49.550 --> 00:02:55.546
the sine of that and
sine of one times point one.

44
00:03:00.381 --> 00:03:07.086
[SOUND] Or maybe we want [SOUND].

45
00:03:07.086 --> 00:03:12.423
So we can make a kind of
a cool bass sound by just

46
00:03:12.423 --> 00:03:18.332
composing a bunch of these
different waveforms.

47
00:03:18.332 --> 00:03:25.307
[SOUND] Like that, that's pretty fun.

48
00:03:25.307 --> 00:03:27.907
If we want to slice up that waveform now,

49
00:03:27.907 --> 00:03:31.738
you can do something like multiply
by [SOUND] sawtooth wave.

50
00:03:31.738 --> 00:03:34.770
[SOUND] To make a little bit of like,

51
00:03:34.770 --> 00:03:39.906
[SOUND] if you wanna adjust
the duty cycle you can use power.

52
00:03:39.906 --> 00:03:42.763
So here we have that
function to the fourth.

53
00:03:42.763 --> 00:03:46.581
[SOUND] So the higher the exponent,

54
00:03:46.581 --> 00:03:50.405
the less time it takes on the beat.

55
00:03:50.405 --> 00:03:55.907
[SOUND] You can also mix up
a couple of different waveforms.

56
00:03:55.907 --> 00:04:00.262
So, if i subtract in a sawtooth of four.

57
00:04:00.262 --> 00:04:04.705
[SOUND] Sort of have

58
00:04:04.705 --> 00:04:10.338
a little bit of a beat.

59
00:04:10.338 --> 00:04:14.726
[SOUND] Yeah, it does that-
&gt;&gt; The sign in the power, so

60
00:04:14.726 --> 00:04:16.725
it changes the power and all.

61
00:04:16.725 --> 00:04:20.079
&gt;&gt; Sine in the power like this.

62
00:04:20.079 --> 00:04:23.480
&gt;&gt; It looks like I think at a 12.

63
00:04:23.480 --> 00:04:24.114
&gt;&gt; I see.

64
00:04:24.114 --> 00:04:26.183
Right, so, yeah,
I guess you could do that.

65
00:04:26.183 --> 00:04:34.824
[SOUND]
That's good.

66
00:04:34.824 --> 00:04:40.159
&gt;&gt; [LAUGH]
[SOUND]

67
00:04:40.159 --> 00:04:40.725
&gt;&gt; All right.

68
00:04:40.725 --> 00:04:44.050
[SOUND] So
we've got sweet little bass beat going,

69
00:04:44.050 --> 00:04:47.700
see if I can make that a little
bit louder by doing that.

70
00:04:47.700 --> 00:04:54.458
[SOUND] Cool, so then, maybe we'll add
in a couple of other pieces here and

71
00:04:54.458 --> 00:05:00.019
then just slap this into our
existing WebGL demo, [SOUND] so.

72
00:05:00.019 --> 00:05:06.687
[SOUND] Take a few other wave forms.

73
00:05:06.687 --> 00:05:08.841
Fiddle around a little bit,

74
00:05:08.841 --> 00:05:13.342
maybe like a sawtooth wave two
times point five plus point.

75
00:05:13.342 --> 00:05:23.342
[MUSIC]

76
00:05:27.561 --> 00:05:30.561
You can also if you wanna make
a melody just have an array for that.

77
00:05:30.561 --> 00:05:37.558
[MUSIC]

78
00:05:37.558 --> 00:05:40.990
And then, Math.floor of
the time which is in seconds,

79
00:05:40.990 --> 00:05:45.966
modulo the array length and you step over
each of those frequencies in the array.

80
00:05:45.966 --> 00:05:50.638
[MUSIC]

81
00:05:50.638 --> 00:05:51.302
Make it faster.

82
00:05:51.302 --> 00:05:58.956
[MUSIC]

83
00:05:58.956 --> 00:06:02.345
Can I add some enveloping now on that, so

84
00:06:02.345 --> 00:06:07.141
like one minus sawtooth of
four times point five of four.

85
00:06:07.141 --> 00:06:16.846
[MUSIC]

86
00:06:16.846 --> 00:06:18.388
&gt;&gt; You should quite your day job and
become a DJ.

87
00:06:18.388 --> 00:06:20.959
[LAUGH]
&gt;&gt; What day job?

88
00:06:20.959 --> 00:06:21.983
[LAUGH]

89
00:06:21.983 --> 00:06:30.521
[MUSIC]

90
00:06:30.521 --> 00:06:31.662
I have played shows before so.

91
00:06:31.662 --> 00:06:35.507
[MUSIC]

92
00:06:35.507 --> 00:06:38.808
You can also use the clamp function down
there to sort of boost the volume of some

93
00:06:38.808 --> 00:06:40.523
of these effects that are a bit quieter.

94
00:06:40.523 --> 00:06:45.754
Which just turns them more into a square
wave so but it's not gonna clip.

95
00:06:45.754 --> 00:06:55.833
[MUSIC]

96
00:06:55.833 --> 00:06:56.987
All right, that's pretty good enough.

97
00:06:56.987 --> 00:07:00.970
So I'll just copy paste that and
you click on it to pause it.

98
00:07:00.970 --> 00:07:05.250
And let's stuff that into our- so

99
00:07:05.250 --> 00:07:09.982
I'm just gonna save that real quick.

100
00:07:11.272 --> 00:07:15.570
So instead of return, just do
module.exports and should be good to go.

101
00:07:17.150 --> 00:07:23.884
So now in our main file,
So we'll require webaudio.

102
00:07:31.865 --> 00:07:36.722
So we'll do webaudio.file I
think will work because it's

103
00:07:36.722 --> 00:07:39.936
a module that export the function of t.

104
00:07:39.936 --> 00:07:41.152
Yeah, I think that ought to work.

105
00:07:43.533 --> 00:07:46.620
And then b.play and then see what it does.

106
00:07:46.620 --> 00:07:47.735
I don't know.

107
00:07:47.735 --> 00:07:54.377
So, get it do budo on this file, [SOUND].

108
00:07:56.571 --> 00:07:59.372
Budo main.js, glslify.

109
00:08:05.197 --> 00:08:07.520
[MUSIC]

110
00:08:07.520 --> 00:08:10.431
There we go.
[MUSIC]

111
00:08:10.431 --> 00:08:13.357
So we've got an interactive
experience on the web.

112
00:08:13.357 --> 00:08:13.857
[MUSIC]

