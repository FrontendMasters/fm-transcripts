WEBVTT

1
00:00:00.660 --> 00:00:03.260
So we can switch gears completely now,

2
00:00:03.260 --> 00:00:05.930
talk about other things
you can do on the web.

3
00:00:05.930 --> 00:00:08.125
Like, for example, WebGL.

4
00:00:08.125 --> 00:00:12.450
WebGL is very interesting because
actually a lot of this architecture

5
00:00:13.610 --> 00:00:15.930
that we were just doing.

6
00:00:15.930 --> 00:00:20.220
This kind of Redux architecture was
discovered a long, long time ago when

7
00:00:20.220 --> 00:00:25.050
people were building computer graphics and
OpenGL and predecessors to it even.

8
00:00:25.050 --> 00:00:31.570
So the really interesting thing though is
now we have, we've come full circle and

9
00:00:31.570 --> 00:00:36.600
we have support for
doing graphics programming in web page.

10
00:00:38.600 --> 00:00:42.891
Just like in building front
end applications now,

11
00:00:42.891 --> 00:00:48.378
you have to do things that are very
similar like managing state and

12
00:00:48.378 --> 00:00:54.295
bring about how your graphics pipeline
is going to be built on screen.

13
00:00:56.601 --> 00:00:59.871
What you do have to worry even more
about than you do in most kinds of

14
00:00:59.871 --> 00:01:01.080
front end dev.

15
00:01:01.080 --> 00:01:06.990
Is that if you want your simulation to
run smoothly, you only have about 16 or

16
00:01:06.990 --> 00:01:13.100
17 milliseconds to do everything that
you want to do in a single frame.

17
00:01:13.100 --> 00:01:17.620
So anything that you want to draw has to
happen in this very short period of time,

18
00:01:17.620 --> 00:01:22.690
because it's going to be happen every
single time you need to draw a new frame.

19
00:01:24.430 --> 00:01:28.440
So you really want to avoid things
in WebGL, that we kind of take for

20
00:01:28.440 --> 00:01:33.370
granted in a lot of other places in
programming, like doing allocations.

21
00:01:33.370 --> 00:01:38.150
So for example, in your

22
00:01:39.250 --> 00:01:44.520
draw function, you don't want to be like
allocating a new array every single time,

23
00:01:44.520 --> 00:01:49.710
because that's gonna end up
in the garbage collector.

24
00:01:49.710 --> 00:01:53.615
What you can do instead,
is you defined things at the top scope.

25
00:01:53.615 --> 00:01:58.090
And which sounds really messy and
wrong, but it's actually fine.

26
00:01:58.090 --> 00:02:00.100
It's a very pragmatic trade
off you have to make,

27
00:02:00.100 --> 00:02:03.280
if you want things to run really fast.

28
00:02:03.280 --> 00:02:06.040
You define things at the top scope that,
and

29
00:02:06.040 --> 00:02:10.580
you sort of just work with those objects,
like manipulate those objects.

30
00:02:10.580 --> 00:02:11.530
It's a lot.

31
00:02:11.530 --> 00:02:15.059
It's even more stateful,
and even less immutable.

32
00:02:16.080 --> 00:02:19.930
But performance is messy
like that sometimes, so.

