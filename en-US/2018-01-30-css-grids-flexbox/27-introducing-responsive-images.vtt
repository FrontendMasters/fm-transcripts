WEBVTT

1
00:00:00.560 --> 00:00:02.720
&gt;&gt; Jen Kramer: The next thing that
I have been asked to talk about for

2
00:00:02.720 --> 00:00:05.160
this workshop is responsive images.

3
00:00:05.160 --> 00:00:07.460
So here with our responsive images,

4
00:00:07.460 --> 00:00:12.630
we have two kinds of images that
might be of interest to us, one is

5
00:00:14.240 --> 00:00:19.680
the big picture on a page that might
look great on a desktop and we wanna go

6
00:00:19.680 --> 00:00:25.590
to a mobile dimension, we probably want to
change that to a different type of image.

7
00:00:25.590 --> 00:00:29.290
So, we have those kinds of images that
display on a page that with an image tag

8
00:00:29.290 --> 00:00:32.700
and we also have images that display
on pages with background images,

9
00:00:32.700 --> 00:00:36.160
right?, fabulous.

10
00:00:36.160 --> 00:00:39.260
So that's what we're gonna talk about
next, both of those approaches.

11
00:00:42.610 --> 00:00:44.540
Okay, so here we are, responsive images.

12
00:00:45.780 --> 00:00:49.400
So remember, images that resize
is one of the key things, or

13
00:00:49.400 --> 00:00:52.988
the key properties that
we need to remember for

14
00:00:52.988 --> 00:00:57.340
responsive design.

15
00:00:57.340 --> 00:00:59.170
And there's a whole bunch of
different ways to do this.

16
00:00:59.170 --> 00:01:03.930
And as you've noticed, I've used a really
lovely hack, to make this happen.

17
00:01:03.930 --> 00:01:05.860
We loaded one image in and

18
00:01:05.860 --> 00:01:10.990
I just stretch it to fit the screen,
right?, super awesome hack.

19
00:01:10.990 --> 00:01:13.700
But, probably not the best approach,
right.

20
00:01:13.700 --> 00:01:16.030
Cuz we can load a big image and

21
00:01:16.030 --> 00:01:20.260
then we can use our HTML
properties to scale it, right?

22
00:01:20.260 --> 00:01:25.010
Not the best approach, why?
&gt;&gt; Jen Kramer: Why is that?

23
00:01:25.010 --> 00:01:26.660
Pardon?
&gt;&gt; Speaker 2: Pixelation?

24
00:01:26.660 --> 00:01:27.360
&gt;&gt; Jen Kramer: Pixelation

25
00:01:27.360 --> 00:01:28.620
definitely could be a problem.

26
00:01:28.620 --> 00:01:30.940
It could get really
pixelated as it gets big.

27
00:01:30.940 --> 00:01:35.090
What else could be a problem with that?,
if we load one image and

28
00:01:35.090 --> 00:01:38.040
use it across all sizes?
&gt;&gt; Speaker 2: Load times?

29
00:01:38.040 --> 00:01:39.200
&gt;&gt; Jen Kramer: Load times can definitely

30
00:01:39.200 --> 00:01:40.810
become a factor, right?

31
00:01:40.810 --> 00:01:43.670
We have a great, big,
honking huge image on desktop,

32
00:01:43.670 --> 00:01:47.320
trying to display that on mobile, not
the best experience in the world, right?

33
00:01:48.620 --> 00:01:51.030
We can have a server-side solution, right?

34
00:01:51.030 --> 00:01:56.560
So browser sends over to the server,
hello, I'm a browser and my screen is so

35
00:01:56.560 --> 00:02:01.410
and so pixels wide and the server goes,
cool, here's an image, right?

36
00:02:01.410 --> 00:02:05.723
It's the appropriate image to that, so
those kinds of solutions are great and

37
00:02:05.723 --> 00:02:09.774
that is all the technology I'm gonna
talk about for those solutions, but

38
00:02:09.774 --> 00:02:12.412
those are awesome,
you can totally use those.

39
00:02:12.412 --> 00:02:13.390
How about this solution?

40
00:02:14.530 --> 00:02:16.820
Where we have a whole bunch of images,
three or

41
00:02:16.820 --> 00:02:22.690
four image tags one after the other and
then we're just gonna use display none or

42
00:02:22.690 --> 00:02:26.690
display inline or display block, to turn
them on and off at various dimensions.

43
00:02:29.050 --> 00:02:34.260
What actually happens with that approach?
&gt;&gt; Speaker 2: It's still being

44
00:02:34.260 --> 00:02:36.440
loaded even though it's not being shown.
&gt;&gt; Jen Kramer: Now you're loading

45
00:02:36.440 --> 00:02:40.450
four images on the page,
even though you're only displaying one.

46
00:02:40.450 --> 00:02:42.810
You're now loading three or
four images on the page.

47
00:02:42.810 --> 00:02:46.327
They load in in the background,
so they still download,

48
00:02:46.327 --> 00:02:48.098
not a good approach either.

49
00:02:48.098 --> 00:02:52.448
But there are some JavaScript
solutions on the client side that will

50
00:02:52.448 --> 00:02:57.240
download just the right picture for
your particular solution.

51
00:02:57.240 --> 00:02:59.890
So it will know exactly
which image to download and

52
00:02:59.890 --> 00:03:01.290
just download that one picture.

53
00:03:02.340 --> 00:03:04.770
Okay, but

54
00:03:04.770 --> 00:03:11.450
even better than all of that is this brand
new HTML tag called the picture tag.

55
00:03:11.450 --> 00:03:15.740
It was released as part of HTML 5.1 that
was released in September of last year so

56
00:03:15.740 --> 00:03:17.430
it's now been out for a year.

57
00:03:17.430 --> 00:03:21.480
And as you can see here, the support for
the picture tag is pretty good except for

58
00:03:21.480 --> 00:03:27.130
the usual suspects like Internet Explorer,
we love Internet Explorer.

59
00:03:27.130 --> 00:03:32.070
But of course it works great in Firefox
and Chrome and so forth, all right?

60
00:03:34.110 --> 00:03:39.330
And then we also have a picture fill,
which is the picture tag polyfill

61
00:03:39.330 --> 00:03:42.740
that can be used to help backwards
compatibility, All right.

62
00:03:42.740 --> 00:03:47.600
So if you wind up with a situation where
you do have to support Internet Explorer,

63
00:03:47.600 --> 00:03:50.500
the Picturefill Polyfill is
a great way of doing that.

