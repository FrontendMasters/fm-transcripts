WEBVTT

1
00:00:00.340 --> 00:00:03.430
&gt;&gt; Jen Kramer: And so now the next
thing that we wanna move on to is,

2
00:00:03.430 --> 00:00:05.720
taking a look at Flexbox as a grid system.

3
00:00:05.720 --> 00:00:09.820
Now that we have a sense of what Flexbox
is, the kinds of things that are possible

4
00:00:09.820 --> 00:00:14.670
with it, let's start to think about
Flexbox in terms of a grid system.

5
00:00:14.670 --> 00:00:17.450
And we don't have to think about
this completely from scratch.

6
00:00:17.450 --> 00:00:20.980
It's always helpful to look at
examples that exist already.

7
00:00:20.980 --> 00:00:23.150
I mentioned to you that Bootstrap 4,

8
00:00:23.150 --> 00:00:26.540
is written in a Flexbox
based grid system now.

9
00:00:26.540 --> 00:00:31.500
So you could take a look at that code,
the other place you can take a look at

10
00:00:31.500 --> 00:00:35.600
is here, this is FlexboxGrid.com.

11
00:00:35.600 --> 00:00:38.870
And this particular framework
has been out for a while.

12
00:00:38.870 --> 00:00:40.910
It's just a grid system, so

13
00:00:40.910 --> 00:00:45.890
unlike bootstrap, which has tons of
other stuff, Javascript and styling and

14
00:00:45.890 --> 00:00:49.770
all kinds of things, Flexbox Grid
is just basically a layout grid.

15
00:00:49.770 --> 00:00:52.810
So here's a place where you
can download this code, and

16
00:00:52.810 --> 00:00:56.730
you can take a look at the html and CSS,
get a sense for how it's put together.

17
00:00:57.940 --> 00:01:00.320
Which I'm not gonna take the time to do.

18
00:01:00.320 --> 00:01:02.930
What I'm gonna show you is
basically show you this website,

19
00:01:02.930 --> 00:01:06.590
and you can take a look at the kinds
of properties here that are possible.

20
00:01:06.590 --> 00:01:09.930
And then we can think about how we might
implement some of those things with

21
00:01:09.930 --> 00:01:10.590
Flexbox.

22
00:01:10.590 --> 00:01:14.860
And we'll go ahead and
write together that same grid system,

23
00:01:14.860 --> 00:01:17.770
that we did with earlier with the floats.

24
00:01:17.770 --> 00:01:22.170
We're gonna redo that grid system
once again, this time using Flexbox.

25
00:01:23.460 --> 00:01:27.840
So if you take a look here
at the Flexbox Grid website,

26
00:01:27.840 --> 00:01:33.350
you'll see here that it has a similar
kinds of classes to it from Bootstrap.

27
00:01:33.350 --> 00:01:36.080
So, call hyphen excess hyphen 12.

28
00:01:36.080 --> 00:01:40.870
You know the extra small grid system,
extra small grid size

29
00:01:40.870 --> 00:01:45.160
that occupies 12 columns,
there's a four, a six, an eight.

30
00:01:45.160 --> 00:01:50.570
Small, medium, large, so you can take
a look at all those types of things.

31
00:01:50.570 --> 00:01:52.020
The second chunk down here,

32
00:01:52.020 --> 00:01:56.830
called Fluid, notice the way that
they are handling their sizing here.

33
00:01:56.830 --> 00:02:05.330
So we have flex-basis Of 50% for the call
hyphen extra small hyphen six class.

34
00:02:05.330 --> 00:02:09.560
So again, they're not using width
as we talked about before lunch,

35
00:02:09.560 --> 00:02:13.310
they're using flex basis
to handle width here.

36
00:02:14.310 --> 00:02:19.880
In their system and obviously this
is a six column wide container.

37
00:02:19.880 --> 00:02:22.940
That flex space's property will vary
depending on whether it's a one or

38
00:02:22.940 --> 00:02:24.010
a 12 column container.

39
00:02:25.150 --> 00:02:29.270
If you take a look at it's syntax here,
you'll see that

40
00:02:29.270 --> 00:02:34.210
it is set up basically the same kind of
html syntax that, we have with our floats.

41
00:02:34.210 --> 00:02:38.660
So we have a row, and inside of that,
we have some kind of cells.

42
00:02:38.660 --> 00:02:41.720
And we are gonna do a similar kind of
thing when we write our grid system

43
00:02:41.720 --> 00:02:42.720
here momentarily.

44
00:02:43.940 --> 00:02:48.080
Because of course the row
would be our flex what?

45
00:02:49.370 --> 00:02:51.970
Would array our flex container or
flex item?

46
00:02:51.970 --> 00:02:55.650
So our row would be our flex Container,

47
00:02:55.650 --> 00:02:59.310
and then the individual
items inside are the flex?

48
00:02:59.310 --> 00:03:01.329
Items, correct, so

49
00:03:01.329 --> 00:03:07.321
offsets are possible here.
&gt;&gt; Jen Kramer: They

50
00:03:07.321 --> 00:03:11.240
don't necessarily show exactly how
that's done, but offsets are possible.

51
00:03:11.240 --> 00:03:13.150
You could dig into that code
on your own if you want,

52
00:03:14.630 --> 00:03:18.220
the concept of auto-width is
a really interesting one.

53
00:03:18.220 --> 00:03:22.880
This is actually something else that's in
foundation, foundation six's grid system.

54
00:03:23.880 --> 00:03:28.010
This is the concept you can specify
the width of some of the cells

55
00:03:28.010 --> 00:03:32.010
in your flex box row and
the rest of it, you can just to auto.

56
00:03:32.010 --> 00:03:34.650
It will just figure out
the space that's left, and

57
00:03:34.650 --> 00:03:38.210
divide it up among the number of boxes and
so forth, so that's something you can do.

58
00:03:39.790 --> 00:03:43.175
There's nested grids here are possible, so

59
00:03:43.175 --> 00:03:49.595
you can have well Flexbox grids anyway,
Flexbox grids inside of Flexbox grids.

60
00:03:49.595 --> 00:03:52.685
Just do remember that you do have
to have a parent and a child.

61
00:03:52.685 --> 00:03:54.145
Okay, the flex box container and

62
00:03:54.145 --> 00:03:58.155
the flex item, so
that's one way of setting that up.

63
00:03:59.425 --> 00:04:04.352
Cool alignment options here, this is
related to which Flexbox property that

64
00:04:04.352 --> 00:04:07.382
goes on a parent,
that would be responsible for

65
00:04:07.382 --> 00:04:12.596
these cool kinds of alignments?
&gt;&gt; Jen Kramer: Do

66
00:04:12.596 --> 00:04:16.495
we remember?
&gt;&gt; Speaker 2: Justified content.

67
00:04:16.495 --> 00:04:18.590
&gt;&gt; Jen Kramer: Justified content, exactly.

68
00:04:18.590 --> 00:04:23.690
So justified content, flex start,
flex end, center, all those things.

69
00:04:23.690 --> 00:04:26.040
So you can implement those here.

70
00:04:26.040 --> 00:04:30.063
So in this case we have a cell
in our Flexbox layout, and

71
00:04:30.063 --> 00:04:36.274
it doesn't occupy the full 12 columns,
we can use different types of alignment to

72
00:04:36.274 --> 00:04:41.320
push that around inside of its row.
&gt;&gt; Jen Kramer: You

73
00:04:41.320 --> 00:04:43.224
can do the same kinda thing vertically,

74
00:04:43.224 --> 00:04:46.330
so you could have different
heights of columns and align them.

75
00:04:46.330 --> 00:04:48.840
Maybe you don't always want
them aligned to the top,

76
00:04:48.840 --> 00:04:51.220
which is often what we actually
want with a grid system.

77
00:04:51.220 --> 00:04:53.510
Or equal height boxes, but

78
00:04:53.510 --> 00:04:59.339
you can lay these out differently using
which Flexbox property for the cross axis?

79
00:05:00.370 --> 00:05:04.295
Justified content is for the main access,
which is the cross access equivalent.

80
00:05:04.295 --> 00:05:05.844
&gt;&gt; Speaker 2: [CROSSTALK]

81
00:05:05.844 --> 00:05:06.994
&gt;&gt; Jen Kramer: Align items.

82
00:05:06.994 --> 00:05:12.363
And then we can also of course
distribute things in different orders,

83
00:05:12.363 --> 00:05:17.110
anybody remember the properties,
values here for these?

84
00:05:17.110 --> 00:05:20.330
This is justify content.
&gt;&gt; Speaker 2: Space around.

85
00:05:20.330 --> 00:05:21.240
&gt;&gt; Jen Kramer: Space around, yeah.

86
00:05:21.240 --> 00:05:21.910
&gt;&gt; Speaker 2: Space between.

87
00:05:21.910 --> 00:05:24.650
&gt;&gt; Jen Kramer: Space between, yeah, so

88
00:05:24.650 --> 00:05:27.060
see how you can already look
at a Flexbox grid system and

89
00:05:27.060 --> 00:05:29.200
have a sense of how it's coded,
without even reading the code?

90
00:05:30.360 --> 00:05:34.030
Okay, they have reordering options, and

91
00:05:34.030 --> 00:05:35.750
we do that with what property?
&gt;&gt; Speaker 2: Order one.

92
00:05:35.750 --> 00:05:37.232
&gt;&gt; Jen Kramer: Order property,

93
00:05:37.232 --> 00:05:42.438
we just give it some numbers, We can
even reverse things in a row, right?

94
00:05:42.438 --> 00:05:46.871
Okay, so there's lots and
lots of options here, for

95
00:05:46.871 --> 00:05:50.330
working with Flexbox based Grid system.

96
00:05:50.330 --> 00:05:54.150
That weren't necessarily possible
with our floats, so notably,

97
00:05:54.150 --> 00:05:58.842
things like reversing orders here The
re-ordering was possible with floats, but

98
00:05:58.842 --> 00:06:01.857
I would argue that we can do
it to a way greater extent,

99
00:06:01.857 --> 00:06:05.690
with a lot less code with Flexbox,
than we did with floats.

100
00:06:05.690 --> 00:06:08.390
And of course, then we have
the interesting spacing options and so

101
00:06:08.390 --> 00:06:10.450
forth, that were not
possible with floats either

