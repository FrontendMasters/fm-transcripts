WEBVTT

1
00:00:00.288 --> 00:00:03.525
&gt;&gt; Jen Kramer: So floats are one
of the original hacks for layout.

2
00:00:03.525 --> 00:00:08.224
When I started back in 2000, started
laying out at web pages, we had tables and

3
00:00:08.224 --> 00:00:10.184
that was how we laid out web pages.

4
00:00:10.184 --> 00:00:14.540
Because we had nothing else,
floats came along shortly thereafter.

5
00:00:14.540 --> 00:00:17.487
This was a much nicer way
of laying things out but

6
00:00:17.487 --> 00:00:22.005
all floats wherever intended to do
was to float an image on a web page.

7
00:00:22.005 --> 00:00:25.635
Make it go over to the left,
wrap the text around it really nicely,

8
00:00:25.635 --> 00:00:28.865
kinda of like we are accustom
to seeing in print.

9
00:00:28.865 --> 00:00:32.305
It was never really intended
to layout whole web pages but

10
00:00:32.305 --> 00:00:35.388
we had nothing else, and
the markup was fairly clean.

11
00:00:35.388 --> 00:00:39.180
Of course, table-based markup convey
something entirely different.

12
00:00:39.180 --> 00:00:43.457
So floats were something that we
went ahead and took advantage of.

13
00:00:43.457 --> 00:00:47.380
And we have taken advantage of now for
load these many years.

14
00:00:47.380 --> 00:00:50.300
So remember that they are a hack for
layout.

15
00:00:50.300 --> 00:00:53.120
Although, they are very cross-browser
compatible because they have been around

16
00:00:53.120 --> 00:00:54.860
for really long time.

17
00:00:54.860 --> 00:00:57.267
They have rows and cells right, so

18
00:00:57.267 --> 00:01:02.180
if you think about your favorite
responsive design framework.

19
00:01:02.180 --> 00:01:05.500
There is typically row, instead of
the row, there is a series of cells.

20
00:01:05.500 --> 00:01:09.112
One row has nothing to do with
the next row in terms of layouts,

21
00:01:09.112 --> 00:01:11.460
this is just typically
the way that it works.

22
00:01:12.750 --> 00:01:18.018
The rows typically again, most of
the responsive design frameworks, the rows

23
00:01:18.018 --> 00:01:23.380
are responsible for clearing the cells,
because if you float, you must clear.

24
00:01:23.380 --> 00:01:26.100
If you float, you must clear.

25
00:01:26.100 --> 00:01:30.061
Let's say one more time,
if you float, you must clear.

26
00:01:30.061 --> 00:01:34.061
And I say that because many of
the problems that we encounter as we

27
00:01:34.061 --> 00:01:37.694
layout web pages, and
we don't understand why something

28
00:01:37.694 --> 00:01:41.641
happened is because you floated but
you didn't clear, okay?

29
00:01:41.641 --> 00:01:44.399
So don't forget to clear when you float.

30
00:01:44.399 --> 00:01:49.127
The source ordering is going to
determine the display on the page.

31
00:01:49.127 --> 00:01:52.210
Now, so
it depends on what order your HTML is,

32
00:01:52.210 --> 00:01:56.814
that's how things are going to
display on your web page with floats.

33
00:01:56.814 --> 00:02:01.773
With a minor exception, it is possible
to reorder some of these things like

34
00:02:01.773 --> 00:02:06.117
make the left column on a desktop
appear underneath the content.

35
00:02:06.117 --> 00:02:08.769
Let's say on a mobile phone, but

36
00:02:08.769 --> 00:02:13.517
this kind of rearrangement is
fairly limited, all right.

37
00:02:13.517 --> 00:02:17.450
Fairly limited is to what we can do in
terms of rearranging things on screen.

38
00:02:17.450 --> 00:02:20.270
Wait till you see what
we can do with grid.

39
00:02:20.270 --> 00:02:25.139
Okay, one of the major disadvantages with
floats are equal column heights, right.

40
00:02:26.330 --> 00:02:30.360
So we can have a wonderful row,
we can have a series of cells in it.

41
00:02:30.360 --> 00:02:34.730
They're all different heights,
especially when we go from, say,

42
00:02:34.730 --> 00:02:40.224
a desktop size to a tablet size and things
wrap around, we commonly run into issues.

43
00:02:40.224 --> 00:02:43.380
So here's some diagrams of
what I'm talking about.

44
00:02:43.380 --> 00:02:47.195
Here I've got a row, here is a series
of cells inside of that row.

45
00:02:47.195 --> 00:02:51.033
Let's say that they are all
marked up in the following way.

46
00:02:51.033 --> 00:02:54.608
Those of you who are standards
compliant people, yes,

47
00:02:54.608 --> 00:02:56.899
I've just done this all with divs.

48
00:02:56.899 --> 00:03:01.159
But if you notice, we don't exactly have
the most interesting content in the world,

49
00:03:01.159 --> 00:03:04.547
so we don't need any semantics at all,
this is just done with divs.

50
00:03:04.547 --> 00:03:09.313
So we have a row on the outside, we
have a series of columns inside of this.

51
00:03:09.313 --> 00:03:13.241
And then typically, the way the code
is gonna look is something like this.

52
00:03:13.241 --> 00:03:17.741
So we have some type of mechanism for
clearing a row.

53
00:03:17.741 --> 00:03:22.446
Whatever formula it is that you like for
clearing a row, there it is.

54
00:03:22.446 --> 00:03:23.677
That's my methodology.

55
00:03:23.677 --> 00:03:25.438
You may have something else.

56
00:03:25.438 --> 00:03:31.880
And then, for our column one here, we're
going to have code that looks like this.

57
00:03:31.880 --> 00:03:37.590
And typically, it consist of, we're gonna
float an element off into your left.

58
00:03:37.590 --> 00:03:41.440
We might give it some margins so
that we have space in between our cells.

59
00:03:41.440 --> 00:03:44.750
And then of course, we have to give it
a width, otherwise we won't wind up with

60
00:03:44.750 --> 00:03:47.710
things next to each other
as you go across the page.

61
00:03:47.710 --> 00:03:51.374
So there's that formula right there.

62
00:03:51.374 --> 00:03:55.663
If we wrap via a media query,
let's say, we have a range here for

63
00:03:55.663 --> 00:04:00.996
this media query, we might change the
width of the column at this point in time.

64
00:04:00.996 --> 00:04:05.164
And hopefully, these cells will stack
on top of each other, so very nicely,

65
00:04:05.164 --> 00:04:05.798
all right?

66
00:04:05.798 --> 00:04:08.103
Hopefully, and then when we go to mobile,

67
00:04:08.103 --> 00:04:12.840
maybe these things stack on top of each
other as they go vertically down the page.

68
00:04:12.840 --> 00:04:14.670
So we have a width, a margin and a float.

69
00:04:14.670 --> 00:04:17.400
Maybe we turn the float off and
say float none.

70
00:04:17.400 --> 00:04:21.720
And this, of course is just
displaying the HTML in source order.

71
00:04:21.720 --> 00:04:26.550
Okay, here's the big problem with floats,
right there.

72
00:04:26.550 --> 00:04:28.830
We wind up with a long one, a short two.

73
00:04:28.830 --> 00:04:33.171
Three tries to reach around and
go underneath of one.

74
00:04:33.171 --> 00:04:36.076
But unfortunately, one had blocks it so

75
00:04:36.076 --> 00:04:40.012
it winds up over on the right side,
four wraps around.

76
00:04:40.012 --> 00:04:43.708
It gets to be a mess
when we look at the page.

77
00:04:43.708 --> 00:04:46.660
So then, we end up applying some
kind of JavaScript to this.

78
00:04:46.660 --> 00:04:50.913
And there is approximately 5,
000 bazillion solutions to equal height

79
00:04:50.913 --> 00:04:55.431
columns, JQuery based, not JQuery based,
all kinds of things that you can do to

80
00:04:55.431 --> 00:04:59.565
make these columns kind of equal height so
that they wrap appropriately.

81
00:04:59.565 --> 00:05:00.781
All right.

82
00:05:00.781 --> 00:05:05.868
If we wanna rearrange the columns,
we write crazy code like this.

83
00:05:05.868 --> 00:05:10.450
So we set our columns to
have a position of relative.

84
00:05:10.450 --> 00:05:12.785
Relative positioning means that,

85
00:05:12.785 --> 00:05:17.526
we are going to take our particular
element on the page, we can pull it out

86
00:05:17.526 --> 00:05:22.454
of the normal flow by using our
properties of left, right, top or bottom.

87
00:05:22.454 --> 00:05:25.588
But the space that that element
used to occupy is preserved,

88
00:05:25.588 --> 00:05:29.645
as opposed to absolute positioning, where
we pull it out of the normal flow and

89
00:05:29.645 --> 00:05:31.380
that space is collapsed.

90
00:05:31.380 --> 00:05:35.208
So here what we're gonna do is we're
gonna push it over to the left or

91
00:05:35.208 --> 00:05:37.370
in a positive or negative direction.

92
00:05:37.370 --> 00:05:40.712
So that's what we have going
on here with this code.

93
00:05:40.712 --> 00:05:45.295
Does anyone know in the very first
declaration on this with the square

94
00:05:45.295 --> 00:05:46.407
brackets here?

95
00:05:46.407 --> 00:05:49.295
Anyone know what kind of selector that is?

96
00:05:49.295 --> 00:05:50.319
No one has any idea.

97
00:05:50.319 --> 00:05:54.479
Okay, so
this is called an attribute selector.

98
00:05:54.479 --> 00:05:58.320
This is one of the coolest selectors
I think is out there, all right,

99
00:05:58.320 --> 00:06:00.449
it's called an attribute selector.

100
00:06:00.449 --> 00:06:04.286
So rather than selecting your HTML tag,
right?

101
00:06:04.286 --> 00:06:05.822
We're creating a class.

102
00:06:05.822 --> 00:06:08.766
What we're doing is we're saying here, for

103
00:06:08.766 --> 00:06:11.792
any HTML element with
the attribute of class.

104
00:06:14.109 --> 00:06:17.670
&gt;&gt; Jen Kramer: Somewhere inside
of that attribute, that's the *=,

105
00:06:17.670 --> 00:06:22.507
it can be at the beginning, at the end,
there's actually a number of these.

106
00:06:22.507 --> 00:06:25.437
The operator here can be portrayed
in a number of different ways,

107
00:06:25.437 --> 00:06:29.183
to beginning the string, to end the
string, to blah, blah, blah, blah, blah.

108
00:06:29.183 --> 00:06:31.750
There's a whole bunch of them,
you can look them up.

109
00:06:31.750 --> 00:06:39.126
But this particular operator says,
anywhere within the string contain col-.

110
00:06:39.126 --> 00:06:42.672
So the cool thing about that is that
selects all of our column one, column two,

111
00:06:42.672 --> 00:06:44.038
column three, column four.

112
00:06:44.038 --> 00:06:47.898
All of our various classes are now
affected by that one declaration.

113
00:06:47.898 --> 00:06:50.961
Sweet, all right.

114
00:06:50.961 --> 00:06:53.474
So attribute selectors.

115
00:06:53.474 --> 00:06:57.694
By the way, my favorite trick
with attribute selectors,

116
00:06:57.694 --> 00:07:03.116
if you say href="http: you can now tag
all of your links that go off site,

117
00:07:03.116 --> 00:07:08.218
maybe with a little background image
that indicates it goes off site.

118
00:07:08.218 --> 00:07:12.163
If you use that, http*=" .PDF,

119
00:07:12.163 --> 00:07:19.055
you could stick a little PDF icon
after every link that has a PDF.

120
00:07:19.055 --> 00:07:22.524
There you go, worth the price of
admission just for that, awesome.

