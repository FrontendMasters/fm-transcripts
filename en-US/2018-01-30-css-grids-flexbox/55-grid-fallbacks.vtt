WEBVTT

1
00:00:00.030 --> 00:00:03.370
&gt;&gt; Jen Kramer: The next thing I
wanna talk about is Grid Fallbacks.

2
00:00:03.370 --> 00:00:07.110
And in that folder for chapter 16,

3
00:00:07.110 --> 00:00:11.710
there's basically just a URL.

4
00:00:13.440 --> 00:00:16.730
Because when I looked at this,
I realized, I mean.

5
00:00:16.730 --> 00:00:20.020
Grid of course is a moving target,
I've already mentioned that to you.

6
00:00:20.020 --> 00:00:23.132
It continues to change
just like constantly.

7
00:00:23.132 --> 00:00:26.620
And Rachael Andrews is doing an amazing
job of staying up with all the changes

8
00:00:26.620 --> 00:00:28.091
that are happening with Grid and

9
00:00:28.091 --> 00:00:30.500
she's documenting them
really nicely on her site.

10
00:00:30.500 --> 00:00:35.780
So rather than create a resource for you,
that is gonna instantly go out of date,

11
00:00:35.780 --> 00:00:38.220
let’s rely on what she
was already doing here.

12
00:00:38.220 --> 00:00:39.810
So, this is her website.

13
00:00:40.940 --> 00:00:42.870
She has two that are relevant to grid.

14
00:00:42.870 --> 00:00:46.289
This is just her blog website.

15
00:00:46.289 --> 00:00:49.470
RachelAndrew.co.uk.

16
00:00:49.470 --> 00:00:53.000
She also has a website
called gridbyexample.com,

17
00:00:53.000 --> 00:00:54.150
which you can take a look at.

18
00:00:54.150 --> 00:00:57.060
It’s all just straight
CSS grid information.

19
00:00:58.470 --> 00:01:01.930
So here, and I'm gonna make the text
a little bit bigger for you.

20
00:01:04.010 --> 00:01:08.280
So this is basically a cheat
sheet that you can use

21
00:01:08.280 --> 00:01:11.140
that's going to show you
how you can lay things out,

22
00:01:11.140 --> 00:01:14.630
let's say with floats, in addition
to laying things out with grid.

23
00:01:14.630 --> 00:01:17.870
And without having to write
two different style sheets and

24
00:01:17.870 --> 00:01:23.800
like then doing some kind of browser test,
if your browser supports grid,

25
00:01:23.800 --> 00:01:27.040
then load this file sheet,
otherwise load these floats.

26
00:01:27.040 --> 00:01:31.320
Nobody wants to write two different
versions of code and try to maintain them.

27
00:01:31.320 --> 00:01:35.140
Grids not giving you that
much of an advantage.

28
00:01:35.140 --> 00:01:37.530
But what she does tell you here

29
00:01:37.530 --> 00:01:42.340
is that you don't have to completely
fork your code to build two versions.

30
00:01:42.340 --> 00:01:46.110
Where you do need to overwrite CSS for
your older browsers, you can do inside of

31
00:01:46.110 --> 00:01:53.090
a CSS feature query which enables safe cap
encapsulation of any CSS you wanna supply.

32
00:01:53.090 --> 00:01:56.000
So here's an example of this.

33
00:01:56.000 --> 00:01:58.950
So here is some example
of floats which we did

34
00:01:58.950 --> 00:02:01.670
right at the very beginning
of the two day process.

35
00:02:01.670 --> 00:02:05.160
If you float an item in your CSS for
non grid browsers,

36
00:02:05.160 --> 00:02:10.790
when that item becomes a grid item,
the float ceases to have any effect, okay?

37
00:02:10.790 --> 00:02:15.240
So if it's originally declared a float,
and then later it's declared a grid item,

38
00:02:15.240 --> 00:02:19.860
that float declaration goes away,
the great item takes effect, right?

39
00:02:19.860 --> 00:02:23.700
So what she's saying here is,
here's a little bit of code,

40
00:02:23.700 --> 00:02:26.510
we have a real simple
little snip of HTML here.

41
00:02:27.700 --> 00:02:31.550
So we could say that any divs inside
of the grid are gonna float left.

42
00:02:31.550 --> 00:02:34.000
That's typical what you would do here.

43
00:02:34.000 --> 00:02:36.100
In that kind of situation.

44
00:02:36.100 --> 00:02:40.470
But then you could also take this
grid element immediately after and

45
00:02:40.470 --> 00:02:42.190
just display that as grid, right.

46
00:02:43.480 --> 00:02:46.710
So if your browser doesn't support grid,

47
00:02:46.710 --> 00:02:50.620
what it's gonna do is it's gonna float
all those elements left, correct?

48
00:02:52.620 --> 00:02:55.140
And it will just skip over this,
no one will know what it is.

49
00:02:55.140 --> 00:02:56.750
It just flies right on by it, right?

50
00:02:58.220 --> 00:03:01.610
Modern browsers are going to,
okay, we'll float it left.

51
00:03:01.610 --> 00:03:03.390
Now you want it grid.

52
00:03:03.390 --> 00:03:04.880
And so, we'll display it as grid.

53
00:03:04.880 --> 00:03:05.580
Make sense?

54
00:03:07.010 --> 00:03:08.160
Okay.

55
00:03:08.160 --> 00:03:09.459
You all look very tired.

56
00:03:10.550 --> 00:03:15.160
So this is one I wanna focus on because I
think this is probably where a lot of you

57
00:03:15.160 --> 00:03:18.150
are coming from, is this floated example.

58
00:03:18.150 --> 00:03:22.610
So this is a great starting point for
having that discussion about how you might

59
00:03:22.610 --> 00:03:26.020
work with grid and
the floats that you may already have.

60
00:03:27.660 --> 00:03:32.020
She also has some solutions here for
inline-block, okay.

61
00:03:32.020 --> 00:03:34.730
So, it's the same type of formula.

62
00:03:34.730 --> 00:03:38.660
If this is an ad bar, that's a very
common place where we use in-line block.

63
00:03:38.660 --> 00:03:40.850
We take our nav bar,
we make it horizontal,

64
00:03:40.850 --> 00:03:44.520
we use in-line block to
lay out our nav elements.

65
00:03:44.520 --> 00:03:46.450
You can display it as in-line block and

66
00:03:46.450 --> 00:03:48.580
then if you wanted to display it as grid,
you can.

67
00:03:49.960 --> 00:03:54.190
Personally I think a nav bar displayed
in in-line block makes a ton of sense.

68
00:03:54.190 --> 00:03:58.140
I probably wouldn't rewrite
it as in-line block.

69
00:03:58.140 --> 00:04:02.340
But if you're using in-line block in other
places on your website for your display,

70
00:04:03.580 --> 00:04:09.870
this is a same idea,
same exact idea for in-line block.

71
00:04:09.870 --> 00:04:14.560
Some people are using table properties for
similar kinds of layout.

72
00:04:14.560 --> 00:04:18.657
Where the display is table cell, okay.

73
00:04:18.657 --> 00:04:20.649
You can do that same trick here with grid.

74
00:04:20.649 --> 00:04:24.979
All right, pretty cool.

75
00:04:26.180 --> 00:04:28.395
So basically this is the same riff,

76
00:04:28.395 --> 00:04:33.190
it's a riff on exactly the same
concepts over and over again here.

77
00:04:33.190 --> 00:04:35.100
Vertical alignment issues.

78
00:04:37.570 --> 00:04:40.090
I'm gonna scroll on down here for
a little while.

79
00:04:40.090 --> 00:04:42.810
Down here on flex box, she says,

80
00:04:42.810 --> 00:04:46.710
if you happen to be working with something
that already has flexbox for layout and

81
00:04:46.710 --> 00:04:53.400
you also wanna work with grid, you can in
fact work with fallbacks for this as well.

82
00:04:53.400 --> 00:04:55.160
My sense is this,

83
00:04:55.160 --> 00:05:00.570
if you've already got something coded up
in flexbox, chances are you're really not.

84
00:05:00.570 --> 00:05:02.010
Unless you have a really
compelling reason,

85
00:05:02.010 --> 00:05:05.180
you're probably not gonna be moving
to grid at this point in time.

86
00:05:05.180 --> 00:05:09.670
But it is possible to do and
here's her example of that.

87
00:05:10.780 --> 00:05:14.850
So once again,
the same little HTML snip at the top and

88
00:05:14.850 --> 00:05:19.610
then we have grid displayed as a flex box.

89
00:05:19.610 --> 00:05:25.530
Parent here and
then re-displayed again later as grid.

90
00:05:25.530 --> 00:05:28.600
And all these are examples
that are up here on CodePen.

91
00:05:36.674 --> 00:05:37.427
&gt;&gt; Jen Kramer: Okay, and

92
00:05:37.427 --> 00:05:42.133
this last sort of example here where
it says watch your item width.

93
00:05:42.133 --> 00:05:44.700
This is something that
I alluded to earlier.

94
00:05:44.700 --> 00:05:46.938
This supports display grid, okay.

95
00:05:46.938 --> 00:05:51.776
So this is that app support construct
that I mentioned earlier that you can

96
00:05:51.776 --> 00:05:52.720
use as a test.

97
00:05:53.720 --> 00:05:57.460
So if the browser is supporting
display grid, then we can go ahead and

98
00:05:57.460 --> 00:06:01.170
put stuff in here that pertains
to browsers that support grid.

99
00:06:01.170 --> 00:06:06.890
If they doesn't support grid, it's gonna
skip on and continue on down the page.

100
00:06:06.890 --> 00:06:14.753
The problem with at supports is that most
browsers that you typically wanna test for

101
00:06:14.753 --> 00:06:19.359
like, does your browser
support something that

102
00:06:19.359 --> 00:06:23.873
perhaps is not compatible with IE 6,
7 or 8.

103
00:06:23.873 --> 00:06:27.080
Those browsers aren't compatible
with at supports either.

104
00:06:27.080 --> 00:06:31.130
So you wind up putting your old code
outside of the at supports statement.

105
00:06:31.130 --> 00:06:35.033
You put your new code, the code
that is the most forward thinking,

106
00:06:35.033 --> 00:06:38.113
the most modern inside of
the at support statement.

107
00:06:38.113 --> 00:06:43.667
Because those are the browsers that
are most likely to support at supports,

108
00:06:43.667 --> 00:06:45.500
make sense, all right.

109
00:06:46.940 --> 00:06:50.950
So she gives you some additional
resources down here as well.

110
00:06:50.950 --> 00:06:54.490
So I am gonna point you guys
to this as a starting point,

111
00:06:54.490 --> 00:06:57.390
where you can go as you're
thinking about grid,

112
00:06:57.390 --> 00:07:01.260
you're thinking about trying to make
things that are cross browser compatible.

113
00:07:01.260 --> 00:07:06.910
She has a number of fabulous formulas here
that you can use as starting points for

114
00:07:06.910 --> 00:07:09.090
thinking about your code
that already exist.

115
00:07:09.090 --> 00:07:11.760
You can make your floats
also work like grid.

116
00:07:11.760 --> 00:07:15.640
Or you can make your inline blocks or
your flex box,

117
00:07:15.640 --> 00:07:18.010
whatever it is, also work with grid.

118
00:07:18.010 --> 00:07:18.670
Makes sense?

119
00:07:20.264 --> 00:07:24.080
Okay, and I think she did a really
clear job of representing that there.

120
00:07:24.080 --> 00:07:26.090
All these have code pins
associated with them.

121
00:07:26.090 --> 00:07:31.513
You're welcome to go in and
noodle around with her code pins, okay?

122
00:07:31.513 --> 00:07:36.361
Now that's pretty much all I wanted to
say about these grid fall backs at this

123
00:07:36.361 --> 00:07:37.360
point in time.

124
00:07:37.360 --> 00:07:39.500
I'm gonna point to you this document.

125
00:07:39.500 --> 00:07:42.360
Everybody supports different
kinds of browsers.

126
00:07:42.360 --> 00:07:46.230
Everybody has different demands
on those particular browsers.

127
00:07:46.230 --> 00:07:50.500
So I think this is a resource to get you
started is probably the best place to go.

