WEBVTT

1
00:00:00.110 --> 00:00:02.550
&gt;&gt; Jen Kramer: Flexbox was
actually the very first

2
00:00:02.550 --> 00:00:07.330
layout element that we were
given to work with in CSS.

3
00:00:07.330 --> 00:00:11.180
Prior to that, as I said, we used
tables which were a hack for layouts,

4
00:00:11.180 --> 00:00:12.650
we used floats which were a hack for

5
00:00:12.650 --> 00:00:16.860
layouts, there was positioning which
always sort of had spotty support.

6
00:00:16.860 --> 00:00:20.830
It was a really ugly period of time where
we tried to do things with positioning.

7
00:00:20.830 --> 00:00:22.677
Especially those of you
who remember Macromedia,

8
00:00:22.677 --> 00:00:27.550
Dreamweaver, chopping things up it
was a very ugly time, about 2005.

9
00:00:27.550 --> 00:00:31.542
But moving on from that,
Flexbox has been around for a while now,

10
00:00:31.542 --> 00:00:36.348
it's actually been around since 2009,
but it's had some issues [LAUGH].

11
00:00:36.348 --> 00:00:40.667
Okay, so first of all, the way Flexbox
works, there's tow elements to this,

12
00:00:40.667 --> 00:00:45.890
there's a parent and a child, we're gonna
talk a lot about the parents and children.

13
00:00:45.890 --> 00:00:51.100
The parent is called a flex container,
and the child is called a flex item,

14
00:00:51.100 --> 00:00:54.420
or you can think of them as rows and
cells, just like we just had with floats

15
00:00:54.420 --> 00:00:59.140
where we had rows and cells, we have
flex containers and flex items, okay?

16
00:00:59.140 --> 00:01:00.600
And both of these are required to work.

17
00:01:00.600 --> 00:01:06.140
You can't just call Flexbox on
one element and magic happens.

18
00:01:06.140 --> 00:01:09.970
You're gonna have a parent and a child,
they work together to make Flexbox work.

19
00:01:11.530 --> 00:01:14.880
Flexbox is absolutely amazing
when it comes to vertical and

20
00:01:14.880 --> 00:01:16.900
horizontal centering and heights.

21
00:01:16.900 --> 00:01:20.090
There's no more equal height
problem that we had with floats,

22
00:01:20.090 --> 00:01:22.860
does not exist in the Flexbox world, yay.

23
00:01:22.860 --> 00:01:25.760
It automatically does all of that for
you, no JavaScript required.

24
00:01:25.760 --> 00:01:29.250
It is super easy to reorder boxes,

25
00:01:29.250 --> 00:01:31.875
which is one of the other
really wonderful things.

26
00:01:31.875 --> 00:01:37.830
None of this relative positioning
nonsense and reordering with percents.

27
00:01:37.830 --> 00:01:43.080
We can simply say, order 1,
order 2, order 3, it's great.

28
00:01:43.080 --> 00:01:44.810
So, it's really super easy to reorder.

29
00:01:45.970 --> 00:01:49.190
There are some big disadvantages
to working with Flexbox.

30
00:01:49.190 --> 00:01:53.140
So, again,
remember that Flexbox as a grid system,

31
00:01:53.140 --> 00:01:57.500
which is where we're headed,
is indeed a hack, okay?

32
00:01:57.500 --> 00:01:59.720
I'm teaching it because it is everywhere.

33
00:01:59.720 --> 00:02:02.230
It's pervasive throughout
the industry right now.

34
00:02:02.230 --> 00:02:05.260
My philosophy is, if it's in Bootstrap,
you've got to know it.

35
00:02:05.260 --> 00:02:08.400
And it's Bootstrap, it's in Bootstrap 4,
so you gotta know it.

36
00:02:09.550 --> 00:02:12.480
Flexbox is not really designed
to be locked down for layouts.

37
00:02:12.480 --> 00:02:15.110
It works in quote,
as we call it, one dimension.

38
00:02:15.110 --> 00:02:17.330
What do we mean by one dimension?

39
00:02:17.330 --> 00:02:20.770
Think about Flexbox as
being one continuous row.

40
00:02:20.770 --> 00:02:22.360
One continuous row.

41
00:02:22.360 --> 00:02:27.140
If you were to get some unknown
number of images coming from

42
00:02:28.230 --> 00:02:30.970
some sort of database driven,
whatever, your Pinterest.

43
00:02:30.970 --> 00:02:34.060
And you're getting all these images coming
in, you don't how many images you're gonna

44
00:02:34.060 --> 00:02:36.380
have, but
you have to display them on a page.

45
00:02:36.380 --> 00:02:38.840
Flexbox is a great way
to do this because it

46
00:02:38.840 --> 00:02:43.594
will just wrap on to the next line as it
runs out of screen space indefinitely.

47
00:02:43.594 --> 00:02:48.230
So, Flexbox is not really intended to be
locked down into rows the way that we

48
00:02:48.230 --> 00:02:49.840
are actually gonna wind up doing it.

49
00:02:51.140 --> 00:02:54.040
The browser support can be challenging.

50
00:02:54.040 --> 00:02:56.610
I also find the syntax challenging.

51
00:02:56.610 --> 00:03:00.420
So I believe in the next
folder that we're going to,

52
00:03:00.420 --> 00:03:04.740
which is folder number two,
you will find a cheat sheet in there.

53
00:03:04.740 --> 00:03:07.290
I'll point that out to you
when we go to those files.

54
00:03:07.290 --> 00:03:09.830
The people here in the class
have it printed out.

55
00:03:09.830 --> 00:03:13.200
So you may also want to print
out my little cheat sheet

56
00:03:13.200 --> 00:03:17.940
that has what the parent and the child
properties are with those values.

57
00:03:17.940 --> 00:03:20.750
I think you'll find that handy to
refer to as you work with Flexbox.

58
00:03:22.200 --> 00:03:27.140
Okay, so here's some basic
terminology when it comes to Flexbox,

59
00:03:27.140 --> 00:03:28.830
as we start to talk about it.

60
00:03:28.830 --> 00:03:32.490
So, remember, flex containers, flex items.

61
00:03:32.490 --> 00:03:37.540
So the flex container, the parent, has
many different values associated with it.

62
00:03:37.540 --> 00:03:42.830
And we can think about it either as a row
or we can think about it as a column.

63
00:03:43.990 --> 00:03:49.530
So flex container is thought of as
a column, we have flex items stacked on

64
00:03:49.530 --> 00:03:54.580
top of each other, and then we might talk
about the main axis and the cross axis.

65
00:03:54.580 --> 00:04:00.880
So the main axis matches the direction
of that flex container, so in this case,

66
00:04:00.880 --> 00:04:05.330
the main axis would be vertical,
the cross axis would be horizontal.

67
00:04:05.330 --> 00:04:10.300
Okay, this tends to be the exception as
we work with Flexbox as a grid system.

68
00:04:10.300 --> 00:04:13.880
We typically don't lay out grids and
columns, we usually lay them out in rows.

69
00:04:13.880 --> 00:04:17.175
So this is the way that we more
commonly think about Flexbox,

70
00:04:17.175 --> 00:04:20.420
at least the way I think
about it in my world.

71
00:04:20.420 --> 00:04:24.579
So the main axis would be the row,
the cross axis would be the column,

72
00:04:24.579 --> 00:04:28.834
and these flex items are going to sit
next to each other just like this.

