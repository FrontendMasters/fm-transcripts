WEBVTT

1
00:00:00.300 --> 00:00:01.190
&gt;&gt; Jen Kramer: So Rita, go ahead and

2
00:00:01.190 --> 00:00:05.140
get started with our very
first exercise for today.

3
00:00:05.140 --> 00:00:10.270
If you take a look inside of your files,
I don't show you where exactly.

4
00:00:10.270 --> 00:00:13.370
Folder number one is called
the intro hype and float.

5
00:00:13.370 --> 00:00:14.930
Look inside of the begin folder.

6
00:00:14.930 --> 00:00:19.270
What we're going to do is we're
gonna create a 4-column floated grid

7
00:00:19.270 --> 00:00:20.740
with the given starting files.

8
00:00:20.740 --> 00:00:23.200
And we're gonna include
two break points for that.

9
00:00:23.200 --> 00:00:26.310
You can pick wherever you
wanna do those break points.

10
00:00:26.310 --> 00:00:28.110
We'll call it three layouts, and

11
00:00:28.110 --> 00:00:30.850
then we've called them broadly desktop,
tablet, and phone.

12
00:00:30.850 --> 00:00:33.370
Although we know that phones
are now the size of tablets, and

13
00:00:33.370 --> 00:00:35.750
desktops are the size of phones.

14
00:00:35.750 --> 00:00:38.070
And I know it's really crazy but

15
00:00:38.070 --> 00:00:41.180
they're still handy to have these
sort of buckets to put things in.

16
00:00:41.180 --> 00:00:44.980
If you have extra time, you can look
into how to equalize those columns, so

17
00:00:44.980 --> 00:00:50.350
they wrap without breaking and you could
also consider reordering in row three.

18
00:00:50.350 --> 00:00:54.064
So, let me show you the files and
we'll get started on that.

19
00:00:59.468 --> 00:01:02.560
&gt;&gt; Jen Kramer: So here, close those.

20
00:01:02.560 --> 00:01:08.070
What we're going to do, is we're going
to go into the day-1 Flexbox folder.

21
00:01:08.070 --> 00:01:11.890
We're going to go into Chapter 1,
into to Flexbox.

22
00:01:11.890 --> 00:01:15.070
We're going to go into the Begin folder.

23
00:01:15.070 --> 00:01:18.620
Going ahead and open up floats.html.

24
00:01:18.620 --> 00:01:20.198
This is your starting HTML.

25
00:01:22.487 --> 00:01:25.255
&gt;&gt; Jen Kramer: And
if you go into floats.css,

26
00:01:25.255 --> 00:01:29.570
you'll see that we have
some starting CSS for it.

27
00:01:31.190 --> 00:01:33.190
I'll go ahead and
display this on a page for you.

28
00:01:35.450 --> 00:01:37.480
So, this is what this
looks like right now.

29
00:01:37.480 --> 00:01:41.770
We have a whole bunch of pie
as I promised, pretty simple.

30
00:01:41.770 --> 00:01:44.220
We have a heading,
an image, a paragraph, and

31
00:01:44.220 --> 00:01:47.900
a read more length it goes
to various websites, okay?

32
00:01:47.900 --> 00:01:51.240
So, a whole bunch of stuff that's
stacked on top of each other.

33
00:01:51.240 --> 00:01:54.230
In the HTML, if you take a look,
I've made a comment for

34
00:01:54.230 --> 00:01:58.650
you At the start of what
should become a row.

35
00:01:58.650 --> 00:02:02.490
So for row one, what I'd like to see
is four boxes going across, one, two,

36
00:02:02.490 --> 00:02:04.030
three, four.

37
00:02:04.030 --> 00:02:08.830
For row two, I'd like to see
two boxes spanning two rows.

38
00:02:08.830 --> 00:02:12.410
So a two and a two, okay?

39
00:02:14.230 --> 00:02:17.820
Row four, which should actually
be row three, sorry, row three.

40
00:02:17.820 --> 00:02:20.990
A narrow left column and
a wider right column so like a one and

41
00:02:20.990 --> 00:02:22.360
a three kind of combination.

42
00:02:23.400 --> 00:02:27.640
And in row four go ahead and
make one big giant, huge, fat column.

43
00:02:28.760 --> 00:02:33.540
In your CSS, you'll see that we have
the following, the following code.

44
00:02:33.540 --> 00:02:36.860
So, let's go through this,
a little bit of this really quickly, so

45
00:02:36.860 --> 00:02:38.970
you understand what's going on here.

46
00:02:38.970 --> 00:02:41.610
The first twelve lines
of this style sheet,

47
00:02:41.610 --> 00:02:44.150
does anyone know what's
going on here with this?

48
00:02:47.150 --> 00:02:52.100
The first twelve lines of floats.css,
your beginning style sheet.

49
00:02:52.100 --> 00:02:54.712
Do you know what's going on in
those first 12 lines of code?

50
00:03:01.904 --> 00:03:03.015
&gt;&gt; Speaker 2: Has to do with padding?

51
00:03:03.015 --> 00:03:04.210
&gt;&gt; Jen Kramer: Has to do with padding?

52
00:03:04.210 --> 00:03:06.020
Hmm, not so much.

53
00:03:07.610 --> 00:03:10.440
&gt;&gt; Speaker 2: The way that it
calculates the width of the box.

54
00:03:10.440 --> 00:03:13.480
&gt;&gt; Jen Kramer: It has to
do with the box model.

55
00:03:13.480 --> 00:03:13.990
Yes?

56
00:03:13.990 --> 00:03:15.490
&gt;&gt; Speaker 3: Initializing it?

57
00:03:15.490 --> 00:03:16.780
&gt;&gt; Jen Kramer: Kind of initializing it.

58
00:03:16.780 --> 00:03:18.760
Sort of, okay.

59
00:03:18.760 --> 00:03:21.790
So, if we think about a box model,
right now, right?

60
00:03:21.790 --> 00:03:23.160
You all remember the box model?

61
00:03:23.160 --> 00:03:25.950
Content, padding, border, margin, right?

62
00:03:25.950 --> 00:03:29.110
And if we were working
on adding things up.

63
00:03:29.110 --> 00:03:31.080
Say, a total width of an area.

64
00:03:31.080 --> 00:03:33.290
We add together what to get a total width?

65
00:03:34.880 --> 00:03:38.720
We add together the margin left and right.

66
00:03:38.720 --> 00:03:40.200
The border left and right.

67
00:03:40.200 --> 00:03:42.181
I'm looking at you, Peter, because you-
&gt;&gt; Peter: Padding.

68
00:03:42.181 --> 00:03:42.836
&gt;&gt; Jen Kramer: Yeah.
&gt;&gt; Group: [LAUGH]

69
00:03:42.836 --> 00:03:44.260
&gt;&gt; Jen Kramer: The padding left and right,

70
00:03:44.260 --> 00:03:45.810
and the content in the middle.

71
00:03:45.810 --> 00:03:49.470
The content is what normally get declared
as with colon whatever it happens to be,

72
00:03:49.470 --> 00:03:51.590
that's just content, right?

73
00:03:51.590 --> 00:03:55.980
Okay, so this, that’s called
the content box model, by the way.

74
00:03:55.980 --> 00:04:00.510
This declaration that’s on the top here
switches us to the border box model.

75
00:04:00.510 --> 00:04:06.830
So, what the border box model says is
now when I say width colon on my screen.

76
00:04:06.830 --> 00:04:11.070
We’re going to have the actual
width of the content

77
00:04:11.070 --> 00:04:14.250
plus the width of the padding
plus the width of the border.

78
00:04:14.250 --> 00:04:19.650
All of those things together becomes width
colon whatever that number happens to be.

79
00:04:19.650 --> 00:04:23.970
So we have now width and
margin as we total things up on the page,

80
00:04:23.970 --> 00:04:24.949
does that make sense?

81
00:04:24.949 --> 00:04:30.460
Okay, so
that is the concept of the border box.

82
00:04:30.460 --> 00:04:34.370
Now, border box is not
an inherited property.

83
00:04:34.370 --> 00:04:37.900
As you know, some things are inherited
in CSS, and some things are not.

84
00:04:37.900 --> 00:04:42.890
So in our first declaration, from lines
three to five, the html tag we put

85
00:04:42.890 --> 00:04:47.240
this border box declaration on it, 'coz
that's the very first tag in our document.

86
00:04:47.240 --> 00:04:50.040
But then we want to have that
same property inherited by

87
00:04:50.040 --> 00:04:51.760
everything else, right?

88
00:04:51.760 --> 00:04:55.124
So in lines 8 to 12 here, we say *.

89
00:04:55.124 --> 00:04:58.470
Everybody familiar with * as the selector?

90
00:04:58.470 --> 00:04:59.830
What does * mean?

91
00:04:59.830 --> 00:05:00.920
&gt;&gt; Speaker 6: All?
&gt;&gt; Speaker 7: Everything.

92
00:05:00.920 --> 00:05:03.830
&gt;&gt; Jen Kramer: Everything, so
we say everything in the universe and

93
00:05:03.830 --> 00:05:05.960
everything that comes before that and
after that.

94
00:05:07.670 --> 00:05:11.630
Inherit the box sizing model from HTML,
okay?

95
00:05:11.630 --> 00:05:15.660
So this is a little incantation that you
can stick at the top of your CSS and

96
00:05:15.660 --> 00:05:19.990
make your math life so
much easier when working with layouts.

97
00:05:19.990 --> 00:05:21.200
I have given you the reference for

98
00:05:21.200 --> 00:05:25.320
that on the top here in line two,
that's Paul Irish who wrote about this.

99
00:05:25.320 --> 00:05:28.700
Box sizing using border box, for the win.

100
00:05:28.700 --> 00:05:30.970
All right, you could go read about that.

101
00:05:30.970 --> 00:05:34.320
Okay, so what I'd like for
you to do then is to go on ahead and

102
00:05:34.320 --> 00:05:39.620
you can read the instructions again that
are inside of the folder number one.

103
00:05:39.620 --> 00:05:42.510
I'd like you to take,
let's see we're at ten o'clock,

104
00:05:42.510 --> 00:05:44.570
why don't you take until 10:30.

105
00:05:44.570 --> 00:05:48.460
And going ahead and
tackle some of those float-based layouts.

106
00:05:48.460 --> 00:05:52.040
And when we come back and reconvene at
10:30, I'll show you what my solution is.

107
00:05:52.040 --> 00:05:56.140
Based on what I'm seeing here in the
classroom, some people have some common

108
00:05:56.140 --> 00:06:00.260
questions and problems for
working with this particular exercise.

109
00:06:00.260 --> 00:06:02.780
So I'm looking at the files
from the end folder.

110
00:06:02.780 --> 00:06:05.990
If you take a look at the files
from the end folder here.

111
00:06:05.990 --> 00:06:10.060
You'll see that we have a layout
that looks kind of like this

112
00:06:10.060 --> 00:06:14.670
in my Martha Stewart colors,
an homage to the 90s.

113
00:06:14.670 --> 00:06:18.830
And what we've got here, if you think
about this as a desktop layout,

114
00:06:18.830 --> 00:06:21.460
we have row one with
a series of four boxes.

115
00:06:21.460 --> 00:06:26.090
We have row two with each piece
of content occupying two columns.

116
00:06:26.090 --> 00:06:29.283
We have row three,
where we have a one out of three.

117
00:06:29.283 --> 00:06:34.179
And then, we have our final row where we
have a piece of content occupying all four

118
00:06:34.179 --> 00:06:35.270
columns.

119
00:06:35.270 --> 00:06:39.510
So, if this is as far as you can
get in the time that you have

120
00:06:39.510 --> 00:06:41.840
working on this particular exercise,
that's great.

121
00:06:41.840 --> 00:06:43.620
Just write it for desktop.

122
00:06:43.620 --> 00:06:46.690
Don't worry so
much about the media queries.

123
00:06:46.690 --> 00:06:52.600
If you were to shrink this down,
let's say to quote tablet size,

124
00:06:52.600 --> 00:06:57.880
our screen is gonna look like,
there we go.

125
00:06:57.880 --> 00:07:00.380
So, maybe we have a two and a two.

126
00:07:00.380 --> 00:07:05.680
So our row of four switches
to two over two, okay?

127
00:07:05.680 --> 00:07:09.710
Maybe our second row, the two in the two,
maybe they stay next to each other,

128
00:07:09.710 --> 00:07:11.060
maybe they stack.

129
00:07:11.060 --> 00:07:12.570
These are design decisions, so

130
00:07:12.570 --> 00:07:16.170
there's no absolute answer on this,
either of those would be acceptable.

131
00:07:17.350 --> 00:07:21.950
For the one in the three,
normally that would be your one column

132
00:07:21.950 --> 00:07:27.080
will have things like navigation or
advertisements or

133
00:07:27.080 --> 00:07:31.620
other kinds of sidebar-ish
sort of information.

134
00:07:31.620 --> 00:07:33.760
And then the three column would
normally have like the article or

135
00:07:33.760 --> 00:07:35.410
the main focus of the page.

136
00:07:35.410 --> 00:07:39.230
So I've just stacked those two on
top of each other, a one and a one.

137
00:07:39.230 --> 00:07:42.490
And then the final row of course,
just continues to shrink down.

138
00:07:42.490 --> 00:07:46.030
And then when we get to
mobile dimensions and

139
00:07:46.030 --> 00:07:48.560
we stack these all on top of each other.

140
00:07:48.560 --> 00:07:52.840
Then obviously everything just stacks on
top of each other one after the other,

141
00:07:52.840 --> 00:07:53.910
straight on down the page.

142
00:07:55.570 --> 00:08:00.130
In terms of your approach, remember that
there's two components to putting together

143
00:08:00.130 --> 00:08:02.690
a float-based grid system.

144
00:08:02.690 --> 00:08:05.650
One is the row,
one is the individual cells.

145
00:08:05.650 --> 00:08:11.102
So the individual cells
are typically gonna contain a width.

146
00:08:11.102 --> 00:08:16.550
They're gonna contain a float, and
often they contain a margin, all right?

147
00:08:16.550 --> 00:08:20.070
And remember that since we're
working with the border box and

148
00:08:20.070 --> 00:08:24.080
we're working with four columns,
the math becomes really easy.

149
00:08:24.080 --> 00:08:28.040
So if we think about our
widths in percents and

150
00:08:28.040 --> 00:08:32.700
our margins in percents,
then we have four boxes.

151
00:08:32.700 --> 00:08:37.530
And let's say each one of
those is 20% wide, and

152
00:08:37.530 --> 00:08:42.640
if we have a marging of 4% say on
the left We have five of those.

153
00:08:42.640 --> 00:08:46.220
So the math will wind up working
out such that you'll wind up with

154
00:08:46.220 --> 00:08:48.870
a total width of the row of about 96%.

155
00:08:48.870 --> 00:08:52.730
And the extra 4% is as wide as
you have for the margin anyway.

156
00:08:52.730 --> 00:08:54.470
It'll wind up on the right hand side.

157
00:08:56.000 --> 00:08:59.160
So you can take a look at the end state

158
00:08:59.160 --> 00:09:02.270
if you're still wondering exactly
how all of that math works.

159
00:09:02.270 --> 00:09:05.950
But remember, so
the cell is going to have width,

160
00:09:05.950 --> 00:09:10.980
it's gonna have a float property
associated with it and a margin property.

161
00:09:10.980 --> 00:09:15.780
The row itself does the clearing, so
you need some kind of formula to do

162
00:09:15.780 --> 00:09:20.980
the clear on that, because if you float,
you must clear, remember that?

163
00:09:20.980 --> 00:09:25.710
So each row will have its own
clear associated with it,

164
00:09:25.710 --> 00:09:26.990
the cells are what is floated.

