WEBVTT

1
00:00:00.460 --> 00:00:03.460
&gt;&gt; Rodriguez: So yeah, hopefully you
all messed around with tables a little

2
00:00:03.460 --> 00:00:07.240
bit using this kind of boilerplate
structure for your emails.

3
00:00:07.240 --> 00:00:10.960
So let's look at how I would actually
code something like that relatively from

4
00:00:10.960 --> 00:00:12.600
scratch here.

5
00:00:12.600 --> 00:00:16.500
So I'm gonna go back into the starter and
just as a refresher,

6
00:00:16.500 --> 00:00:21.210
we have the logo image up here, we have
a heading, hero image, some copy of

7
00:00:21.210 --> 00:00:25.320
a nice big bulletproof button, and
then our footer stuff down here.

8
00:00:25.320 --> 00:00:27.000
So when I start building
this out using tables,

9
00:00:27.000 --> 00:00:31.060
I want to think of each of these as
an individual component in its own module

10
00:00:31.060 --> 00:00:34.710
that I'll be able to swap around for
future emails as needed.

11
00:00:34.710 --> 00:00:39.962
So the first thing I'm gonna do
is I like scaffolding this out,

12
00:00:39.962 --> 00:00:44.805
so I'm gonna go ahead and,
&gt;&gt; Rodriguez: I'm

13
00:00:44.805 --> 00:00:48.687
gonna comment this stuff that's there.

14
00:00:48.687 --> 00:00:51.908
So I'm gonna add that first table in here.

15
00:00:51.908 --> 00:00:54.896
So this is where something
like Emmet is handy.

16
00:00:54.896 --> 00:01:02.060
You can just do table&gt;tr&gt;td, hit Tab and
it'll scaffold that out for you.

17
00:01:02.060 --> 00:01:06.830
But we need to do here is override those
default behaviors from browsers and

18
00:01:06.830 --> 00:01:08.260
email clients.

19
00:01:08.260 --> 00:01:09.660
So we don't want borders on our table.

20
00:01:09.660 --> 00:01:10.792
So we'll set border to 0.

21
00:01:10.792 --> 00:01:14.861
We don't want cellpadding or
cell spacing in our email,

22
00:01:14.861 --> 00:01:19.356
because that will add that
additional white space around those

23
00:01:19.356 --> 00:01:23.790
different table cells, and
we absolutely don't want that.

24
00:01:23.790 --> 00:01:27.640
We want to be able to control that
on a per cell basis as needed.

25
00:01:27.640 --> 00:01:30.290
So cellpadding will be set to 0.

26
00:01:30.290 --> 00:01:33.320
Cellspacing, again, will be set 0.

27
00:01:33.320 --> 00:01:38.761
I mentioned that the structure it's
helpful and we start making things

28
00:01:38.761 --> 00:01:44.124
responsive to have an outer fluid
table that's set to 100% wide.

29
00:01:44.124 --> 00:01:45.269
So we'll do that.

30
00:01:45.269 --> 00:01:48.900
And then we'll have a container table
inside of that, that'll be fixed width.

31
00:01:48.900 --> 00:01:52.447
And that's what we'll be targeting when we
start making that response of using media

32
00:01:52.447 --> 00:01:53.247
queries later on.

33
00:01:53.247 --> 00:01:57.324
So I can take this, copy it, and

34
00:01:57.324 --> 00:02:01.716
then just go into that table cell.

35
00:02:01.716 --> 00:02:08.600
And adjust my spacing here cuz
I'm a neat freak sometimes.

36
00:02:08.600 --> 00:02:12.630
And then this is where that container
cable will set it to 600 pixels wide.

37
00:02:12.630 --> 00:02:15.660
Attributes, you don't
need to put PX in there.

38
00:02:15.660 --> 00:02:17.682
It's assumed that by default it's pixel.

39
00:02:17.682 --> 00:02:21.801
So if you want to override that with
a percentage, then you'd use percent.

40
00:02:21.801 --> 00:02:27.040
But you don't need the PX in there, just
use 600, weird little HTML quirk there.

41
00:02:27.040 --> 00:02:29.560
So you have your outer container table.

42
00:02:29.560 --> 00:02:32.550
You have your inner fixed width table.

43
00:02:32.550 --> 00:02:37.872
And then each of these table rows and
table cells will be its own component.

44
00:02:37.872 --> 00:02:44.800
So I'm gonna to that, and then we'll make,
again, our logo will go up here.

45
00:02:44.800 --> 00:02:49.100
And that will be its own table row and
table cell.

46
00:02:49.100 --> 00:02:55.759
After that, we'll have,
again, our headline.

47
00:03:00.115 --> 00:03:01.565
&gt;&gt; Rodriguez: We'll have the Hero image.

48
00:03:01.565 --> 00:03:06.150
I'm gonna use Emmet here to make
things a little bit quicker.

49
00:03:07.470 --> 00:03:10.780
And we can just go down and
do that for each of those components.

50
00:03:10.780 --> 00:03:14.315
Which is nice because as we start
adding content to it, if we wanna

51
00:03:14.315 --> 00:03:18.496
swap the headline or create an entirely
new kinda like article type section,

52
00:03:18.496 --> 00:03:22.805
we can just copy those components,
paste it underneath the existing ones, and

53
00:03:22.805 --> 00:03:26.732
build out really quickly these more
advanced layouts and structures for

54
00:03:26.732 --> 00:03:27.919
our email campaign.

55
00:03:27.919 --> 00:03:33.014
I actually do you have a more fully
developed version of this that follows

56
00:03:33.014 --> 00:03:37.955
that exact same structure, but
it has the content filled out in here.

57
00:03:37.955 --> 00:03:40.687
I don't wanna do that all manually and
waste everybody's time right now.

58
00:03:40.687 --> 00:03:41.840
So we can look at this.

59
00:03:41.840 --> 00:03:44.970
It's using the same
stuff we've seen before.

60
00:03:44.970 --> 00:03:48.050
We have this fixed width image for
the logo.

61
00:03:48.050 --> 00:03:50.340
It doesn't need to be responsive.

62
00:03:50.340 --> 00:03:54.200
We have the h1 tag,
our semantic markup for our headline.

63
00:03:54.200 --> 00:03:58.760
And then we have our hero image here,
which is using that responsive by default

64
00:03:58.760 --> 00:04:03.380
image technique using max width,
min width, and width on the image tag.

65
00:04:03.380 --> 00:04:05.648
All that same content we've seen before,

66
00:04:05.648 --> 00:04:08.932
but now it's built out in this
modular table based approach.

67
00:04:08.932 --> 00:04:13.858
I did mention that before when we were
first starting in that starter document

68
00:04:13.858 --> 00:04:17.721
we were using a div as a container
cell for our kinda universal

69
00:04:17.721 --> 00:04:22.525
styles that control the overall font
family and size and color of our text.

70
00:04:22.525 --> 00:04:25.592
That's largely gonna be your
place in one of two ways.

71
00:04:25.592 --> 00:04:28.639
If you have this container table,
you can set that for

72
00:04:28.639 --> 00:04:32.760
that entire table using an inline style,
like we did here.

73
00:04:32.760 --> 00:04:37.180
If you have specific content,
like the footer,

74
00:04:37.180 --> 00:04:40.140
then you could do that in
the table cell itself.

75
00:04:40.140 --> 00:04:45.040
So it's kind of like closest neighbor for
that bit of content,

76
00:04:45.040 --> 00:04:48.100
that block that you're trying to style.

77
00:04:48.100 --> 00:04:52.440
So since these two paragraphs live inside
of this table cell, we can do it on that

78
00:04:52.440 --> 00:04:56.340
table cell itself just using,
again, that simple inline style.

79
00:04:56.340 --> 00:05:00.500
And we're using those same reliable
CSS properties, like color, font size.

80
00:05:00.500 --> 00:05:03.560
We can use margin and
padding on that table cell as well.

81
00:05:03.560 --> 00:05:08.450
Padding tends to be a little
bit more reliable for tables.

82
00:05:08.450 --> 00:05:12.610
Most email clients will respect
padding on that table cell.

83
00:05:12.610 --> 00:05:16.650
But some of them, I think older versions
of Outlook, won't respect to the margin

84
00:05:16.650 --> 00:05:20.270
property on table cells or
on certain block level elements.

85
00:05:20.270 --> 00:05:23.990
So padding tends to be a little bit more
reliable if you want to make sure that

86
00:05:23.990 --> 00:05:26.410
white space works across the board.

87
00:05:26.410 --> 00:05:30.535
Since we're targeting all of this content,
except for that footer,

88
00:05:30.535 --> 00:05:35.780
in our email campaign, we can apply
those inline styles on the table itself.

89
00:05:35.780 --> 00:05:40.275
So again, we're just doing background
color, the color, font family, font size,

90
00:05:40.275 --> 00:05:43.530
the line height, and
margin and padding here.

91
00:05:43.530 --> 00:05:48.200
Anything you wanna override, though, you
can just do so on that table cell basis.

92
00:05:48.200 --> 00:05:51.410
So here we're adding some extra
padding to this table cell, so

93
00:05:51.410 --> 00:05:53.590
that when things get a little bit smaller,

94
00:05:53.590 --> 00:05:58.000
we still have a little bit of space
around the edges on smaller screen sizes.

95
00:05:58.000 --> 00:06:02.570
We do that across the board to just have
those equal so everything aligns properly.

96
00:06:02.570 --> 00:06:06.150
If you want to get into
more specific targeting,

97
00:06:06.150 --> 00:06:10.020
then you can move down and
drop down into that per element basis.

98
00:06:10.020 --> 00:06:13.240
So for paragraphs, again,
we're adding this bottom margin and

99
00:06:13.240 --> 00:06:16.320
make sure there's a little bit of
separation between our paragraphs.

100
00:06:16.320 --> 00:06:18.690
If we want to do that to headings, we can.

101
00:06:18.690 --> 00:06:23.012
If we wanna target our buttons,
then we would go down to that level and do

102
00:06:23.012 --> 00:06:28.650
our CSS or our VML, whatever we're using
for that button on that element basis.

103
00:06:28.650 --> 00:06:32.650
So pretty straightforward version of this.

104
00:06:32.650 --> 00:06:34.960
Things get a little bit more complex,

105
00:06:34.960 --> 00:06:38.830
a little bit more heavily nested as
we go into multiple column layouts.

106
00:06:38.830 --> 00:06:42.500
So if we see this now and
pop it open, again,

107
00:06:42.500 --> 00:06:44.820
same kind of email that
we've been building.

108
00:06:44.820 --> 00:06:50.110
But before, we were seeing that
layout completely break in

109
00:06:50.110 --> 00:06:54.400
the Outlook clients, so we were using
that div and max width on that div.

110
00:06:54.400 --> 00:06:55.990
And it was breaking in Outlook.

111
00:06:55.990 --> 00:06:59.175
But when we look at it now,
since we're using those tables and

112
00:06:59.175 --> 00:07:03.730
Outlook understands those HTML tables and
the fact

113
00:07:03.730 --> 00:07:08.000
that we're using that 600 pixel wide
width attribute on that table, it will

114
00:07:08.000 --> 00:07:12.350
understand that we're trying to constrain
that design and it'll render it properly.

115
00:07:12.350 --> 00:07:14.570
So Apple Mail looks great, as always.

116
00:07:14.570 --> 00:07:16.710
But then as we start going
through the Outlooks,

117
00:07:16.710 --> 00:07:19.490
you can see that everything's
looking as intended.

118
00:07:19.490 --> 00:07:22.610
So we're not getting that blown
out version of the email.

119
00:07:22.610 --> 00:07:25.630
Our images are constrained because
we have that width attribute set.

120
00:07:25.630 --> 00:07:29.600
So that's, really, the main driving
factor for why we use tables and

121
00:07:29.600 --> 00:07:32.210
email design is these Outlook clients.

122
00:07:32.210 --> 00:07:35.313
Because they don't understand
float based designs or

123
00:07:35.313 --> 00:07:39.710
more traditional kind of web design
approaches to structuring our content.

124
00:07:39.710 --> 00:07:44.760
And that's why we have to fall back
to this slightly more outdated,

125
00:07:44.760 --> 00:07:50.650
weirder approach to designing any kind
of web page, which is using HTML tables.

126
00:07:50.650 --> 00:07:52.504
You can go through here and
you can see it.

127
00:07:52.504 --> 00:07:56.720
Again, we're using that deprecated
center tag for our image up there.

128
00:07:56.720 --> 00:07:58.920
You still don't get
the border radius stuff.

129
00:07:58.920 --> 00:08:03.780
But you do get this really robust and
well defined layout,

130
00:08:03.780 --> 00:08:05.780
which is what we're looking for
in our campaigns.

131
00:08:06.810 --> 00:08:09.680
We just looked at that single
column tables document.

132
00:08:09.680 --> 00:08:11.970
It's up there on the GitHub repo and
code pen for

133
00:08:11.970 --> 00:08:13.810
reference if you need to look at it.

134
00:08:13.810 --> 00:08:17.370
But yeah, this will work really
well across all email clients,

135
00:08:17.370 --> 00:08:20.880
and it's a nice reliable way
to start coding your emails.

