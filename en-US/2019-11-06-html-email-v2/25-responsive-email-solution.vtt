WEBVTT

1
00:00:00.560 --> 00:00:04.994
&gt;&gt; Rodriguez: Let's look at how we would
make our multiple column layout actually

2
00:00:04.994 --> 00:00:08.124
responsive and
stack those columns on mobile.

3
00:00:08.124 --> 00:00:09.590
So, we're gonna go back
over to our code here.

4
00:00:10.590 --> 00:00:12.407
We have again a refresher.

5
00:00:13.430 --> 00:00:18.739
&gt;&gt; Rodriguez: This email right now we
have three separate columns in here,

6
00:00:18.739 --> 00:00:22.485
if we were to shrink
this down a little bit,

7
00:00:22.485 --> 00:00:27.040
then those columns aren't going anywhere.

8
00:00:27.040 --> 00:00:28.480
That's theie behavior we want.

9
00:00:28.480 --> 00:00:31.990
We know that this can be displayed
on smaller mobile screens and

10
00:00:31.990 --> 00:00:34.560
we wanna make sure that stacks and it

11
00:00:34.560 --> 00:00:38.700
shuffles down to that single column layout
that people can easily scroll through.

12
00:00:38.700 --> 00:00:44.600
So if we go in here again, we have these
three tenets of responsive design.

13
00:00:44.600 --> 00:00:48.830
We have fluid layouts, fluid images,
and then media queries.

14
00:00:48.830 --> 00:00:52.400
So we have the fluid images that because
we're doing that response by default

15
00:00:52.400 --> 00:00:54.050
approach to our images.

16
00:00:54.050 --> 00:00:58.510
So the next step is making
these fixed with tables,

17
00:00:58.510 --> 00:01:02.860
fluid so that they shrink down and
fit to that screen.

18
00:01:02.860 --> 00:01:08.490
The main one here is going to be that 600
pixel wide container table that we set up.

19
00:01:08.490 --> 00:01:10.570
So we have this width equals 600.

20
00:01:10.570 --> 00:01:13.210
This attribute on our container table.

21
00:01:13.210 --> 00:01:17.230
So we want to change that
to be a 100% wide but

22
00:01:17.230 --> 00:01:20.538
only on mobile screens, smaller screens.

23
00:01:20.538 --> 00:01:23.850
So the only way we can do that
is by targeting it with a class.

24
00:01:23.850 --> 00:01:27.280
So make it class equals, say mobile.

25
00:01:27.280 --> 00:01:30.940
And then we'll go up in our email and
clear that out so

26
00:01:30.940 --> 00:01:32.790
we can see it from scratch.

27
00:01:32.790 --> 00:01:36.534
You can see I have this place holder for
responsive styles.

28
00:01:36.534 --> 00:01:37.814
So I'm gonna use a media query,

29
00:01:37.814 --> 00:01:41.160
which hopefully everybody's familiar
with the syntax for a media query.

30
00:01:41.160 --> 00:01:43.310
We're gonna say @media.

31
00:01:43.310 --> 00:01:47.250
Since we're on a screen,
we're gonna target only screens.

32
00:01:47.250 --> 00:01:51.540
And then we're gonna give it
some sort of test for whether or

33
00:01:51.540 --> 00:01:53.920
not these styles are being applied.

34
00:01:53.920 --> 00:01:58.310
So we're gonna say max-width
equals 600 pixels,

35
00:01:58.310 --> 00:02:02.900
and then we can open up our braces there.

36
00:02:02.900 --> 00:02:06.490
And then we can start adding all
of our mobile styles in here.

37
00:02:06.490 --> 00:02:09.290
So right now we just wanna
update that mobile table

38
00:02:09.290 --> 00:02:13.450
to be 100% wide instead of 600
pixels to make it fluid for

39
00:02:13.450 --> 00:02:17.020
those smaller screens,
anything that's below 600 pixels.

40
00:02:17.020 --> 00:02:21.390
So we'll say dot mobile to target that
table, and then we'll update it so

41
00:02:21.390 --> 00:02:24.090
that the width is equal to 100%.

42
00:02:24.090 --> 00:02:27.140
But you have to add
the important rule here,

43
00:02:27.140 --> 00:02:31.370
because we're using those inline styles so
we have that with actual view.

44
00:02:31.370 --> 00:02:32.846
We have those in mind styles.

45
00:02:32.846 --> 00:02:36.100
Anything we wanna override and
the head of our email we have to do so

46
00:02:36.100 --> 00:02:41.980
using important to make that the most
important CSS property to be applied.

47
00:02:41.980 --> 00:02:43.070
So we can save that.

48
00:02:44.340 --> 00:02:47.290
Pop back over into browser.

49
00:02:47.290 --> 00:02:51.462
And you can see now that this main part
of the email is shrinking down to that

50
00:02:51.462 --> 00:02:52.755
smaller screen size.

51
00:02:52.755 --> 00:02:56.043
But we still don't have these
columns stacking as we want them to.

52
00:02:56.043 --> 00:03:00.150
This is gonna be way too small for
people to read on mobile devices.

53
00:03:00.150 --> 00:03:03.020
So we want to make those stack
in a single column layout.

54
00:03:03.020 --> 00:03:08.240
So uses that exact same approach instead
of targeting this main mobile container.

55
00:03:08.240 --> 00:03:13.520
We're going to target the individual
tables that make up those three columns.

56
00:03:13.520 --> 00:03:17.570
So if we go down to our column section
here, we have this first table,

57
00:03:17.570 --> 00:03:19.270
we can add a class there.

58
00:03:22.370 --> 00:03:28.400
Let's make a block then we can copy and
paste that to our other two tables.

59
00:03:30.080 --> 00:03:34.770
Because we want those to just be an entire
100% wide block so that they stack.

60
00:03:35.800 --> 00:03:40.310
So here we're gonna go back
up into our media query and

61
00:03:40.310 --> 00:03:45.630
then we can target that block element,
or that black class on those tables.

62
00:03:45.630 --> 00:03:50.880
We can make it so that the display has
black, which will help out a little bit.

63
00:03:50.880 --> 00:03:56.370
And then the main thing is setting
that width again to a 100%.

64
00:03:56.370 --> 00:04:00.960
And adding that important rule, so
it overrides any of those inline styles.

65
00:04:00.960 --> 00:04:02.250
Let's add that here as well.

66
00:04:03.870 --> 00:04:07.330
If all goes well,
then we can go back over, refresh,

67
00:04:07.330 --> 00:04:10.010
and then we have our single column layout.

68
00:04:10.010 --> 00:04:13.570
So relatively easy to do that,
we're just using that class,

69
00:04:13.570 --> 00:04:16.920
targeting specific elements
that happen to be fixed width.

70
00:04:16.920 --> 00:04:22.480
And then making those, that fold with
that 100% wide, that fluid table.

71
00:04:22.480 --> 00:04:26.966
So when we're below 600 pixels
it'll shrink to that size.

72
00:04:26.966 --> 00:04:31.768
When we get over 600 pixels, it's gonna
revert back to that three column layout

73
00:04:31.768 --> 00:04:34.170
like we like to see on desktop.

74
00:04:34.170 --> 00:04:38.750
I know there's a kind of debate about
whether or not you should do design for

75
00:04:38.750 --> 00:04:41.372
desktop verse or mobile first.

76
00:04:41.372 --> 00:04:45.670
For email, it generally makes sense to
do desktop first just because some email

77
00:04:45.670 --> 00:04:48.840
clients won't like the mobile
version of the email.

78
00:04:48.840 --> 00:04:51.340
So if you're designing
everything fluid by default, and

79
00:04:51.340 --> 00:04:54.800
then trying to override that with fixed
with stuff using something like media

80
00:04:54.800 --> 00:04:59.570
queries some email clients won't respect
those media queries so you'll get that

81
00:04:59.570 --> 00:05:04.600
mobile version, desktop clients instead
an that's not the intended behavior.

82
00:05:04.600 --> 00:05:09.000
So well it's a little bit different
from what you typically do on a website.

83
00:05:09.000 --> 00:05:13.450
We are using that desktop first approach
in designing this fixed width desktop

84
00:05:13.450 --> 00:05:18.370
version and adjusting it for
mobile using those media queries instead.

85
00:05:18.370 --> 00:05:25.330
So if we were to open this up and let miss
and fingers crossed, everything's working.

86
00:05:25.330 --> 00:05:29.110
So the Apple mails brilliant as always,

87
00:05:29.110 --> 00:05:33.300
if we go over to Outlook, now,
we have a little bit of an issue here.

88
00:05:33.300 --> 00:05:36.019
Probably with that width sizing on,

89
00:05:36.019 --> 00:05:40.250
those tables which we can
adjust to using what's there.

90
00:05:40.250 --> 00:05:46.880
But then if we go into one of our mobile
emails you can see that we have that

91
00:05:46.880 --> 00:05:51.380
single column stacking which is awesome,
and that's the intended behavior there.

92
00:05:51.380 --> 00:05:54.550
So this traditional responsive
approach is awesome, like I mentioned.

93
00:05:54.550 --> 00:05:59.366
Te big problem for a long time, was Gmail,
that was stripping out the head

94
00:05:59.366 --> 00:06:03.040
of our email campaigns and
then those embedded styles.

95
00:06:03.040 --> 00:06:05.400
So it would never see those media queries.

96
00:06:05.400 --> 00:06:09.710
All those response and styles were
wholesale just ripped out of the email and

97
00:06:09.710 --> 00:06:12.500
it wouldn't display that for Gmail apps or

98
00:06:12.500 --> 00:06:15.530
the Gmail web client if
it's on a mobile device.

99
00:06:15.530 --> 00:06:18.260
But that's been fixed as
of a couple years ago.

100
00:06:18.260 --> 00:06:22.270
They've been solid and reliable
haven't made any updates really bad.

101
00:06:22.270 --> 00:06:26.190
Break that for a long period of time,
there was one I think last year

102
00:06:26.190 --> 00:06:30.790
that broke that behavior for a couple of
weeks and there and that's always a risk.

103
00:06:30.790 --> 00:06:35.030
So there are other techniques that have
been developed to account for that.

