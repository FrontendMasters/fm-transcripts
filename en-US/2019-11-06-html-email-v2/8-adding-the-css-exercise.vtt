WEBVTT

1
00:00:00.000 --> 00:00:00.840
&gt;&gt; Rodriguez: When you're styling,

2
00:00:00.840 --> 00:00:05.050
let's say a website, there's a couple
of places you can add that CSS.

3
00:00:05.050 --> 00:00:08.873
All right, you can link that style sheet,
which is probably the most common practice

4
00:00:08.873 --> 00:00:11.570
so that those there's that
separation of concerns.

5
00:00:11.570 --> 00:00:14.140
You have your HTML file,
you have your CSS.

6
00:00:14.140 --> 00:00:17.310
You don't want to have to rewrite or

7
00:00:17.310 --> 00:00:20.850
repeat that CSS across
multiple HTML files.

8
00:00:20.850 --> 00:00:24.530
So you have that link style sheet,
you can edit your CSS there and

9
00:00:24.530 --> 00:00:27.920
it applies across a whole
bunch of different pages.

10
00:00:27.920 --> 00:00:30.560
You can embed those styles in
the head of our document and

11
00:00:30.560 --> 00:00:35.950
which we saw with that starter HTML doc,
or you can have inline styles.

12
00:00:35.950 --> 00:00:38.460
So this is something
that up until recently,

13
00:00:38.460 --> 00:00:41.950
a lot of people hadn't really seen for
a long time.

14
00:00:41.950 --> 00:00:46.210
The early days of the web,
we didn't really have link style sheets.

15
00:00:46.210 --> 00:00:48.500
So we had to inline all of those styles.

16
00:00:48.500 --> 00:00:51.360
So this is using that style attribute

17
00:00:51.360 --> 00:00:54.770
on that whatever HTML
element you're using it on.

18
00:00:54.770 --> 00:00:59.160
More recently,
we have things like IJSX and

19
00:00:59.160 --> 00:01:02.890
CSS and JavaScript that kind of
incorporates that a little bit.

20
00:01:02.890 --> 00:01:06.955
We have things like functional CSS
frameworks like I think of Tachyon or

21
00:01:06.955 --> 00:01:10.616
tailwind or something like that
where it's using classes, but

22
00:01:10.616 --> 00:01:14.683
those are very descriptive classes and
you're kind of training them so

23
00:01:14.683 --> 00:01:18.778
it feels kind of like inline styles,
but it's a little bit different.

24
00:01:18.778 --> 00:01:22.286
But there's these three options,
three different ways we can include CSS.

25
00:01:22.286 --> 00:01:27.580
For the purposes of email you'll almost
always use either embedded styles

26
00:01:27.580 --> 00:01:34.000
like our reset styles or you'll use inline
styles on each individual HTML element.

27
00:01:34.000 --> 00:01:38.090
The main reason is that a lot of different
email clients similar to how they would

28
00:01:38.090 --> 00:01:42.340
strip things like JavaScript
in the header of our email.

29
00:01:42.340 --> 00:01:46.690
They will do the same for any linked
files so they won't pull in that CSS.

30
00:01:46.690 --> 00:01:51.470
They'll just wholesale remove or
ignore that link style sheet.

31
00:01:51.470 --> 00:01:54.030
So if we're relying on that for
all of our styles,

32
00:01:54.030 --> 00:01:57.690
then you're gonna see your email breaking
at a lot of different email clients.

33
00:01:57.690 --> 00:01:59.090
Embedded styles are good.

34
00:01:59.090 --> 00:02:02.180
A lot of email clients will
support those embedded styles.

35
00:02:02.180 --> 00:02:04.750
It used to be that Gmail
was the main offender

36
00:02:04.750 --> 00:02:07.590
where they would strip out just
the head of your document.

37
00:02:07.590 --> 00:02:09.097
So any embedded styles
wouldn't be displayed.

38
00:02:09.097 --> 00:02:13.882
They actually made a great update I think
probably about two years ago at this

39
00:02:13.882 --> 00:02:16.200
point, where they added support for

40
00:02:16.200 --> 00:02:21.670
embedded styles which is awesome because
that solved a ton of headaches for us.

41
00:02:21.670 --> 00:02:25.410
We're gonna look at two different
approaches to responsive email later on.

42
00:02:25.410 --> 00:02:27.920
One is kind of a traditional
responsive approach,

43
00:02:27.920 --> 00:02:30.330
similar to how you would
handle it on websites.

44
00:02:30.330 --> 00:02:33.530
And then the other one is called hybrid or
spongy coding.

45
00:02:33.530 --> 00:02:38.580
And that hybrid coding solution was
really developed as a response to Gmail,

46
00:02:38.580 --> 00:02:40.960
stripping out those embedded styles.

47
00:02:40.960 --> 00:02:41.640
So we'll look at that.

48
00:02:41.640 --> 00:02:45.100
It's still useful because there's
still a couple of web mail clients.

49
00:02:45.100 --> 00:02:49.990
I think some European or like Russian web
mail clients will strip out those styles.

50
00:02:51.250 --> 00:02:55.250
I wanna say there might be one or two
mobile clients that will do that similar

51
00:02:55.250 --> 00:02:58.500
thing that will just wholesale
get rid of them for you.

52
00:02:58.500 --> 00:03:02.440
So if you're using embedded styles, that's
now it's pretty reliable across the most

53
00:03:02.440 --> 00:03:04.810
popular email clients,
which is awesome for us.

54
00:03:04.810 --> 00:03:06.350
But if you need to,

55
00:03:06.350 --> 00:03:09.980
then there's ways to get around that
using this hybrid coding solution.

56
00:03:09.980 --> 00:03:13.340
But for the most part,
if we want a style to appear in an email,

57
00:03:13.340 --> 00:03:16.200
we're going to inline
that on that element.

58
00:03:16.200 --> 00:03:19.570
So everything for
the most part is gonna be inline styles.

59
00:03:19.570 --> 00:03:23.970
We will use some kind of over all
universal styles embedded in the head.

60
00:03:23.970 --> 00:03:27.280
But that's really for
things like hover effects on our links or

61
00:03:27.280 --> 00:03:30.580
when we get into adding animations or
interactivity.

62
00:03:30.580 --> 00:03:34.010
Some of that necessarily has to
live in the embedded styles.

63
00:03:34.010 --> 00:03:37.850
But inline is the way to go and
what I suggest doing.

64
00:03:37.850 --> 00:03:42.280
You can there's tools out there that will
allow you to write your CSS either as

65
00:03:42.280 --> 00:03:44.880
a linked style sheet or
embedded in your document.

66
00:03:44.880 --> 00:03:47.180
Then they will inline that
automatically for you.

67
00:03:47.180 --> 00:03:50.739
If you're using something like Litmus
we have a tool called Builder,

68
00:03:50.739 --> 00:03:55.104
which is a dedicated coding development or
coding environment for email designers.

69
00:03:55.104 --> 00:03:56.815
We have a built in CSS in line or

70
00:03:56.815 --> 00:04:01.139
Campaign Monitor has a great in liner
which I link out to on the GitHub repo.

71
00:04:01.139 --> 00:04:02.432
MailChimp has one as well.

72
00:04:02.432 --> 00:04:06.885
If you're using something like Node or
more Build tools, there's a lot

73
00:04:06.885 --> 00:04:11.350
of different inlining packages out
there that you can add in there.

74
00:04:11.350 --> 00:04:14.358
I think Ruby has one called pre
mailer that's really popular.

75
00:04:14.358 --> 00:04:18.710
But for our purposes, we're going to hand
write all these styles inline on those

76
00:04:18.710 --> 00:04:20.634
elements, which sounds tedious.

77
00:04:20.634 --> 00:04:25.210
But it's not too bad and you'll get used
to and that's definitely like It lets

78
00:04:25.210 --> 00:04:29.507
me sleep better at night knowing that
I know what's going on with my CSS and

79
00:04:29.507 --> 00:04:30.780
my HTML in my emails.

80
00:04:31.970 --> 00:04:33.660
So what CSS are we actually gonna use?

81
00:04:33.660 --> 00:04:36.950
What are those reliable properties that we
know work across all these different email

82
00:04:36.950 --> 00:04:37.970
clients?

83
00:04:37.970 --> 00:04:41.266
It really breaks down in two
categories for text elements and

84
00:04:41.266 --> 00:04:43.730
then for some of our block-level elements.

85
00:04:43.730 --> 00:04:48.583
So for texts,
we can reliably use what we need to.

86
00:04:48.583 --> 00:04:50.777
We can adjust the color
of elements using color.

87
00:04:50.777 --> 00:04:55.099
We can adjust all the font settings
using font family, size, style, wait,

88
00:04:55.099 --> 00:04:59.490
line height, super important, especially
when you start linking things and

89
00:04:59.490 --> 00:05:00.968
want to aid readability.

90
00:05:00.968 --> 00:05:04.637
Text line for the same thing and
kind of help out with accessibility and

91
00:05:04.637 --> 00:05:05.891
just overall styling.

92
00:05:05.891 --> 00:05:07.933
And then we'll get into
black level elements.

93
00:05:07.933 --> 00:05:11.089
We'll be relying on margin and
padding and then width and max-width for

94
00:05:11.089 --> 00:05:11.822
most purposes.

95
00:05:11.822 --> 00:05:16.756
But beyond this, there's very little
CSS you need until you start getting

96
00:05:16.756 --> 00:05:20.290
into a little bit fancier
stuff like interactivity.

97
00:05:20.290 --> 00:05:21.430
Things like that.

98
00:05:21.430 --> 00:05:24.270
But this is what we're gonna be using for

99
00:05:24.270 --> 00:05:27.420
all of our styling across all
these different email campaigns.

100
00:05:27.420 --> 00:05:32.600
Take your email, apply some of those
styles to those different elements and

101
00:05:32.600 --> 00:05:34.220
try to make it look nice.

102
00:05:34.220 --> 00:05:36.100
Looks terrible right now.

103
00:05:36.100 --> 00:05:37.890
So let's try to improve that a little bit.

104
00:05:37.890 --> 00:05:42.230
Don't worry too much about the layout,
or the structure of your email.

105
00:05:42.230 --> 00:05:45.505
Right now, just focus on those
different properties and

106
00:05:45.505 --> 00:05:47.900
adjust those elements in your emails.

107
00:05:47.900 --> 00:05:50.990
So I'll put those back up here just so
you have a little bit of reference and

108
00:05:50.990 --> 00:05:51.760
start playing around.

