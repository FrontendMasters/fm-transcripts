WEBVTT

1
00:00:00.440 --> 00:00:04.415
&gt;&gt; Jason Rodriguez: So then anybody have
any trouble adding multiple columns using

2
00:00:04.415 --> 00:00:05.022
tables?

3
00:00:05.022 --> 00:00:07.933
Little bit different than
[LAUGH] using floats or

4
00:00:07.933 --> 00:00:12.520
CSS grid in which you might be used to but
you get used to it after a while.

5
00:00:12.520 --> 00:00:16.775
So let's see how I might code something
like that up in our email campaign.

6
00:00:16.775 --> 00:00:21.062
So we have this starter example again that
we've been working in before we just kind

7
00:00:21.062 --> 00:00:24.760
of scaffold it out what these
different sections might look like.

8
00:00:24.760 --> 00:00:29.606
We're gonna get rid of these for a second
and just show you how we might scaffold

9
00:00:29.606 --> 00:00:34.620
out those additional columns in here,
so we'll call this a two column section.

10
00:00:37.340 --> 00:00:38.203
&gt;&gt; Jason Rodriguez: And again,

11
00:00:38.203 --> 00:00:42.096
we have this fluid width
table as our main container.

12
00:00:42.096 --> 00:00:45.036
We have this fix width
container underneath there and

13
00:00:45.036 --> 00:00:47.255
then we have our two-column module, so

14
00:00:47.255 --> 00:00:50.970
this is that component that
we're gonna be building out.

15
00:00:50.970 --> 00:00:55.492
Inside of here, we're going to
want to add essentially the same

16
00:00:55.492 --> 00:00:59.690
structure that we had before but
inside of this table cell.

17
00:00:59.690 --> 00:01:03.990
So we can have that in there and
it'll format a little bit.

18
00:01:06.214 --> 00:01:08.150
&gt;&gt; Jason Rodriguez: And close these out.

19
00:01:08.150 --> 00:01:15.830
&gt;&gt; Jason Rodriguez: I think
I added one too many there.

20
00:01:17.143 --> 00:01:20.796
&gt;&gt; Jason Rodriguez: So we have our table,
table row, table cell, table.

21
00:01:20.796 --> 00:01:27.821
&gt;&gt; [INAUDIBLE]
&gt;&gt; Jason Rodriguez: But

22
00:01:27.821 --> 00:01:31.908
the main thing is that we have
another fluid table here, and

23
00:01:31.908 --> 00:01:36.501
then we're gonna use this to set
our actual column width on there.

24
00:01:36.501 --> 00:01:38.702
That's where that fixed
with comes into play so

25
00:01:38.702 --> 00:01:41.880
obviously we don't want
this to be 600 pixels wide.

26
00:01:41.880 --> 00:01:45.274
Since we're working in that
600 pixels structure you might

27
00:01:45.274 --> 00:01:47.268
wanna make this 300 pixels wide.

28
00:01:47.268 --> 00:01:51.756
Percentages usually work out pretty well
cuz then you don't have to keep track of

29
00:01:51.756 --> 00:01:55.110
as much math, so
you could set this for 50% wide.

30
00:01:55.110 --> 00:01:58.665
And then underneath that
we would another table that

31
00:01:58.665 --> 00:02:03.580
would,
&gt;&gt; Jason Rodriguez: Add the second

32
00:02:03.580 --> 00:02:04.647
column for there.

33
00:02:04.647 --> 00:02:09.150
So we have those two 50% wide columns
that'll create our structure.

34
00:02:09.150 --> 00:02:11.840
So let's see a real world example of that.

35
00:02:11.840 --> 00:02:16.774
So again, we have this email campaign
similar to what we've been working on,

36
00:02:16.774 --> 00:02:20.362
but we have these two columns
below here with a heading and

37
00:02:20.362 --> 00:02:23.270
a little bit of paragraph copy there.

38
00:02:23.270 --> 00:02:25.224
So when we go into this module,

39
00:02:25.224 --> 00:02:29.970
we have the two-column module that's
its own table, row and table cell.

40
00:02:29.970 --> 00:02:34.903
But within there, we break it down by
adding another fluid table in here to make

41
00:02:34.903 --> 00:02:38.790
sure that those two columns
fill that whole space.

42
00:02:38.790 --> 00:02:42.486
And then we have our table row,
table cell, and then another module for

43
00:02:42.486 --> 00:02:45.210
a left column and a module for
our right column here.

44
00:02:45.210 --> 00:02:49.350
So you can see we have this table and
we're using that to set that column width,

45
00:02:49.350 --> 00:02:51.770
so right now it's set to 50% wide.

46
00:02:51.770 --> 00:02:53.984
Importantly we still
have a role presentation,

47
00:02:53.984 --> 00:02:55.988
we're overriding the default behaviour.

48
00:02:55.988 --> 00:03:00.797
Here we're setting the align attribute to
left for the left column and right for

49
00:03:00.797 --> 00:03:04.052
the right column so
those slide where they need to be.

50
00:03:04.052 --> 00:03:08.035
It kinda works similar to floats that
traditional kind of float method but

51
00:03:08.035 --> 00:03:10.680
you don't have to clear
anything which is nice.

52
00:03:10.680 --> 00:03:15.106
So we have 50% wide columns then
underneath that we just have our same

53
00:03:15.106 --> 00:03:19.386
table cells and then our elements
underneath that for the heading and

54
00:03:19.386 --> 00:03:20.700
the paragraph.

55
00:03:20.700 --> 00:03:25.061
So when we look at that in the browser we
get those two columns but it's important

56
00:03:25.061 --> 00:03:29.440
to note that right now we're not doing
anything special for responsive stuff.

57
00:03:29.440 --> 00:03:33.599
So when we start looking at this in
Litmus we're gonna see a couple of things

58
00:03:33.599 --> 00:03:34.612
happening here.

59
00:03:34.612 --> 00:03:39.590
All right, so I mentioned you might be
tempted to do a specific fixed width like

60
00:03:39.590 --> 00:03:44.871
50% which is what we're doing right now
for those two tables, which in theory,

61
00:03:44.871 --> 00:03:50.471
works perfectly because 50 plus 50 is
a 100 and it fits that 100% wide width.

62
00:03:50.471 --> 00:03:53.160
That works for most email clients.

63
00:03:53.160 --> 00:03:57.862
You can see that Apple Mail that's perfect
those columns display as intended but

64
00:03:57.862 --> 00:04:01.335
when we get into Outlook you
can see the shifting down here.

65
00:04:01.335 --> 00:04:06.424
So Outlook does not handle math that well
when it's precise for who knows what

66
00:04:06.424 --> 00:04:11.920
kind of reasons, probably cuz it's using
Microsoft Word to render these emails.

67
00:04:11.920 --> 00:04:15.165
So that's one of those things that it's
one of those weird bugs that you have to

68
00:04:15.165 --> 00:04:17.441
account for and
you have to code defensively against.

69
00:04:17.441 --> 00:04:21.217
So you don't want to run into this issue
for your subscribers unless that's

70
00:04:21.217 --> 00:04:26.040
the look you're going for, you're going
for this off-grid kind of presentation.

71
00:04:26.040 --> 00:04:31.878
So the way to get around that would be
to make this a little bit less than 50%,

72
00:04:31.878 --> 00:04:35.160
so let's try 48% for these two columns.

73
00:04:35.160 --> 00:04:40.315
This has the added benefit of making it so
that it'll add a little bit

74
00:04:40.315 --> 00:04:45.740
of a gap between there, a little bit
of gutter between the two columns,

75
00:04:45.740 --> 00:04:50.730
so when we run this hopefully
Outlook is doing its math properly.

76
00:04:50.730 --> 00:04:54.430
Well not properly, but
it is fixing that on its end.

77
00:04:55.580 --> 00:04:58.106
&gt;&gt; Jason Rodriguez: So
we're gonna go into Outlook and

78
00:04:58.106 --> 00:05:01.660
then we have our two columns working.

79
00:05:01.660 --> 00:05:06.133
So one of those weird gotchas that you
would just have to recognize that Word

80
00:05:06.133 --> 00:05:08.760
doesn't do math well, it's not Excel, so

81
00:05:08.760 --> 00:05:11.470
it can't do math as well
as it's cousin can.

82
00:05:11.470 --> 00:05:16.353
So you have to adjust that a little bit,
make smaller columns, slightly smaller,

83
00:05:16.353 --> 00:05:20.740
not too big so that you can maintain
that design across Outlook clients.

84
00:05:20.740 --> 00:05:25.433
The other thing is they were doing these
multiple columns but when we start looking

85
00:05:25.433 --> 00:05:30.210
at it in mobile clients you can see that
there's nothing responsive going on here.

86
00:05:30.210 --> 00:05:33.846
And that's gonna be the next section is
figuring out how we make this work across

87
00:05:33.846 --> 00:05:35.180
mobile devices.

88
00:05:35.180 --> 00:05:39.484
Some clients will just by default
understand that you wanna stack that stuff

89
00:05:39.484 --> 00:05:43.854
and do it, which is awesome, but
that's not the kinda baseline behavior for

90
00:05:43.854 --> 00:05:45.150
most mobile clients.

91
00:05:45.150 --> 00:05:49.516
So we'll get this fixed width at 600
pixels wider than that screen so

92
00:05:49.516 --> 00:05:53.540
it's blowing out that design,
we don't see half of that email.

93
00:05:54.600 --> 00:05:58.958
There's an email designer named Annie
who years ago coined this term,

94
00:05:58.958 --> 00:06:03.315
called it the Android grid of grim because
you would have this big grid of an email

95
00:06:03.315 --> 00:06:06.786
that you'd have to scroll around
is a really grim experience.

96
00:06:06.786 --> 00:06:11.775
So this way it result in that horizontal
scrolling which is such a weird thing on

97
00:06:11.775 --> 00:06:15.795
mobile to begin with you don't
want it happening in the inbox.

98
00:06:15.795 --> 00:06:18.740
So if we wanted to we could adapt this for

99
00:06:18.740 --> 00:06:22.500
any number of columns really
we want them in here.

100
00:06:22.500 --> 00:06:28.001
So if we wanted to add a third
column then let's go ahead and

101
00:06:28.001 --> 00:06:32.844
copy that fixed width table,
drop it down in here.

102
00:06:32.844 --> 00:06:38.790
And we'll, do let's say 33% for each of
these which will split that into thirds.

103
00:06:39.850 --> 00:06:44.462
Hopefully give it enough room for
how Outlook to do it's weird wonky math.

104
00:06:46.416 --> 00:06:48.870
&gt;&gt; Jason Rodriguez: Save it,
we now have three columns in here.

105
00:06:48.870 --> 00:06:54.964
We could add four by doing maybe 24% free
each those so it doesn't add up fully.

106
00:06:54.964 --> 00:06:58.708
Then we're going to open up and

107
00:06:58.708 --> 00:07:03.690
Litmus,
&gt;&gt; Jason Rodriguez: Give it a second.

108
00:07:03.690 --> 00:07:08.947
The Apple mails are cool cuz they handle
most things that you throw at them.

109
00:07:08.947 --> 00:07:10.951
Outlook we now have these three columns.

110
00:07:10.951 --> 00:07:15.828
It's slightly less than that full 100%
width so things work as intended and

111
00:07:15.828 --> 00:07:18.540
then everything's pretty much good to go.

112
00:07:18.540 --> 00:07:23.181
Again, if we go on a mobile,
should open in Android and again,

113
00:07:23.181 --> 00:07:25.730
half our emails not even showing.

114
00:07:25.730 --> 00:07:30.503
So that'll bring us to the next section
which is all about making sure these

115
00:07:30.503 --> 00:07:36.060
emails are responsive across the widest
range of devices as possible.

116
00:07:36.060 --> 00:07:38.757
Any questions about multiple columns
using this table based approach?

117
00:07:38.757 --> 00:07:41.341
No, cool?

118
00:07:41.341 --> 00:07:42.279
Yeah?

119
00:07:42.279 --> 00:07:47.267
&gt;&gt; Student: Yeah, would you use table
cells to separate them instead of

120
00:07:47.267 --> 00:07:48.056
like-
&gt;&gt; Jason Rodriguez: So

121
00:07:48.056 --> 00:07:50.640
I prefer using table, you can try it but

122
00:07:50.640 --> 00:07:54.649
some clients will they just
won't work with that approach.

123
00:07:54.649 --> 00:07:55.540
&gt;&gt; Student: Okay.

124
00:07:55.540 --> 00:07:58.276
&gt;&gt; Jason Rodriguez: And the nice thing
about those tables you get like an extra

125
00:07:58.276 --> 00:08:00.442
couple of levels of like hooks or
selectors so

126
00:08:00.442 --> 00:08:03.010
you can do things with like
responsive stuff easier.

127
00:08:03.010 --> 00:08:08.600
So I usually like doing a table level and
having those tables next to each other.

128
00:08:08.600 --> 00:08:13.856
A lot of like back in the day people would
build emails using just table cells and

129
00:08:13.856 --> 00:08:18.414
then you use COLSPAN which is an old
attribute for handling tables.

130
00:08:18.414 --> 00:08:23.202
But that usually results in a lot
of really hard math to keep track

131
00:08:23.202 --> 00:08:27.379
of when you get into more
complex multi column layouts.

132
00:08:27.379 --> 00:08:31.915
So table cells and COLSPAN and stuff
like that is usually more headache than

133
00:08:31.915 --> 00:08:35.450
it's worth so
it's just using the table based approach.

