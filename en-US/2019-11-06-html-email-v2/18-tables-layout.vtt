WEBVTT

1
00:00:00.823 --> 00:00:04.629
&gt;&gt; Jason Rodriguez: All right, so we have
looked at a whole bunch of things so far,

2
00:00:04.629 --> 00:00:06.103
the basic HTML and CSS.

3
00:00:06.103 --> 00:00:08.529
We're gonna be using our email campaigns.

4
00:00:08.529 --> 00:00:12.067
Some of those different elements
using things like images, links,

5
00:00:12.067 --> 00:00:13.292
buttons in our emails.

6
00:00:13.292 --> 00:00:17.425
But the big topic is really gonna be
about how we structure those emails,

7
00:00:17.425 --> 00:00:19.543
the content inside of those emails.

8
00:00:19.543 --> 00:00:23.592
How we use layouts effectively across
these different email clients.

9
00:00:23.592 --> 00:00:27.263
So there's a couple of different ways
we can structure emails from a layout

10
00:00:27.263 --> 00:00:28.027
perspective.

11
00:00:28.027 --> 00:00:31.139
We're largely gonna focus
on table-based design,

12
00:00:31.139 --> 00:00:34.741
just because that's most
reliable method of coding emails.

13
00:00:34.741 --> 00:00:38.920
But when we get into looking at how
to make those layouts responsive,

14
00:00:38.920 --> 00:00:43.112
we'll look at a secondary solution
called hybrid or spongy coding.

15
00:00:43.112 --> 00:00:48.370
But first, before we start looking at code
or anything like that, I want to encourage

16
00:00:48.370 --> 00:00:52.986
you to start thinking about all of your
email code in this modular fashion.

17
00:00:52.986 --> 00:00:56.020
You wanna think about all
these different components,

18
00:00:56.020 --> 00:00:59.764
creating those different components
in your emails to make it easier

19
00:00:59.764 --> 00:01:02.619
to troubleshoot those
emails when problems occur.

20
00:01:02.619 --> 00:01:07.741
And you built your email in this modular
design approach, then you can pinpoint

21
00:01:07.741 --> 00:01:12.645
where those problems are and find those
problems and fix them a lot quicker.

22
00:01:12.645 --> 00:01:16.371
But perhaps and more importantly, when
you start getting the more advanced email

23
00:01:16.371 --> 00:01:20.421
development, you'll need to start building
out these modules, these components, so

24
00:01:20.421 --> 00:01:23.520
that you can quickly generate
new versions of emails.

25
00:01:23.520 --> 00:01:26.810
So if you have all these,
this kind of library of modules built out,

26
00:01:26.810 --> 00:01:31.360
save those as snippets or partials or
something like that in your build system,

27
00:01:31.360 --> 00:01:34.180
you can almost use them as
puzzle pieces or LEGO pieces.

28
00:01:34.180 --> 00:01:38.660
And you can quickly create all these
different versions of an email campaign

29
00:01:38.660 --> 00:01:40.906
based on what that subscriber needs.

30
00:01:40.906 --> 00:01:43.266
So you can personalize things
with the actual design,

31
00:01:43.266 --> 00:01:46.617
with different components that you're
pulling into your email campaigns.

32
00:01:46.617 --> 00:01:50.627
But the only way you can really do that
is by building in this modular kind of

33
00:01:50.627 --> 00:01:51.799
componentized way.

34
00:01:51.799 --> 00:01:55.459
So we'll see how that actually works
when we start looking at tables and

35
00:01:55.459 --> 00:01:59.720
what those modules will actually look
like in the context of an email campaign.

36
00:01:59.720 --> 00:02:04.765
So when we're talking about layouts,
again, we're gonna use tables.

37
00:02:04.765 --> 00:02:08.146
So most of you probably
haven't used tables for

38
00:02:08.146 --> 00:02:11.621
layout since the late 90s, early 2000s.

39
00:02:11.621 --> 00:02:16.816
Ever since Jeffrey Zeldman came around and
encouraged us to start embracing web

40
00:02:16.816 --> 00:02:22.487
standards, that separation of concerns and
relying on CSS to structure our content.

41
00:02:22.487 --> 00:02:25.607
And I'd love to be able to live
in that world of email, but

42
00:02:25.607 --> 00:02:29.838
unfortunately we've seen all those
different email clients have different

43
00:02:29.838 --> 00:02:33.371
rendering engines that support
varying levels of HTML and CSS.

44
00:02:33.371 --> 00:02:39.233
So we can't reliably use CSS for
structural stuff inside of emails.

45
00:02:39.233 --> 00:02:44.115
So the most reliable way to do that is use
HTML tables to provide that structure.

46
00:02:44.115 --> 00:02:46.814
So the number one thing I
want you to take away, again,

47
00:02:46.814 --> 00:02:50.924
when we're thinking about accessibility,
is to include the role attribute on any

48
00:02:50.924 --> 00:02:54.289
table you introduce in your email
with that value of presentation.

49
00:02:54.289 --> 00:02:58.249
So that it's not read out loud for
somebody using a screen reader.

50
00:02:58.249 --> 00:03:03.336
Beyond that, we're going to restrict
our table elements to table,

51
00:03:03.336 --> 00:03:05.300
table row and table cell.

52
00:03:05.300 --> 00:03:09.502
While there are other elements like
headers and footers, and th and tf, and

53
00:03:09.502 --> 00:03:14.047
all those different components, the tbody,
we're not really gonna use those.

54
00:03:14.047 --> 00:03:18.110
They're not gonna make any
difference to us in our emails.

55
00:03:18.110 --> 00:03:20.603
Some engines, rendering engine,

56
00:03:20.603 --> 00:03:25.765
some web browsers will add those in
your email campaign without your say.

57
00:03:25.765 --> 00:03:29.330
Some ESP's will just automatically
dump those in there.

58
00:03:29.330 --> 00:03:31.424
But we're not gonna do anything with them,

59
00:03:31.424 --> 00:03:35.140
we're not gonna worry about styling
them or anything like that.

60
00:03:35.140 --> 00:03:38.594
So we're just gonna use tables,
table rows and table cells.

61
00:03:38.594 --> 00:03:43.104
For the most part, those components are
gonna live either in their own table that

62
00:03:43.104 --> 00:03:47.460
will be that component structure or
they're on the row and table cell.

63
00:03:47.460 --> 00:03:51.468
And so if we're doing just a simple
kind of layout, a single column layout,

64
00:03:51.468 --> 00:03:55.666
which we'll look at in a minute here,
then you'll see that we use table rows and

65
00:03:55.666 --> 00:03:57.444
table cells for each component.

66
00:03:57.444 --> 00:04:01.049
Things like the logo or
the headline or the hero image.

67
00:04:01.049 --> 00:04:04.910
You could get more complex
as you go down this path.

68
00:04:04.910 --> 00:04:10.063
You could create components from anything
from a product shot or product feature

69
00:04:10.063 --> 00:04:15.227
to event invitations and calendar invites,
receipts, all that kind of stuff.

70
00:04:15.227 --> 00:04:19.513
But it's important to have them
in their own discrete unit so

71
00:04:19.513 --> 00:04:22.552
that you can swap them in and
out as needed.

72
00:04:22.552 --> 00:04:26.949
And we're definitely gonna be overwriting
some of the defaults that most browsers

73
00:04:26.949 --> 00:04:28.719
and email clients add to tables.

74
00:04:28.719 --> 00:04:32.468
And we'll use HTML attributes to do that.

75
00:04:32.468 --> 00:04:36.212
And then most of the styles that we
place in our emails from here on out,

76
00:04:36.212 --> 00:04:40.667
at least when we're doing table-based
design, will be included in table cells.

77
00:04:40.667 --> 00:04:47.882
So that td tag as opposed to a div or some
sort of container like we've seen before.

78
00:04:47.882 --> 00:04:50.500
So boilerplate table looks
something like this.

79
00:04:50.500 --> 00:04:52.050
We have that table tag.

80
00:04:52.050 --> 00:04:56.461
We're overriding a couple of different
things in those HTML attributes.

81
00:04:56.461 --> 00:05:01.001
We're applying border 0 so
that no borders are added to that table or

82
00:05:01.001 --> 00:05:02.520
the cells within it.

83
00:05:02.520 --> 00:05:06.454
And then we're adding cellpadding and
cellspacing and setting those to 0.

84
00:05:06.454 --> 00:05:11.380
Because we wanna have full control over
all the white space in our email campaign.

85
00:05:11.380 --> 00:05:16.201
So when we are adding white space or
kinda structural stuff to our emails,

86
00:05:16.201 --> 00:05:19.251
that's gonna happen on
the table cell level.

87
00:05:19.251 --> 00:05:23.216
So we have that table, we have tr for
the table row, and then we have td for

88
00:05:23.216 --> 00:05:24.480
the table cell.

89
00:05:24.480 --> 00:05:27.812
And then most of the styles we're gonna
be adding are gonna be in that table

90
00:05:27.812 --> 00:05:28.414
cell level.

91
00:05:28.414 --> 00:05:31.500
So you can see that inline style,
the styles will go there.

92
00:05:31.500 --> 00:05:35.910
Except for anything you're kinda being
more specific about, something like

93
00:05:35.910 --> 00:05:40.602
the heading element, like that h1,
we'll still wanna apply our margins there.

94
00:05:40.602 --> 00:05:45.320
We could either remove those
wholesale by setting margin 0 on h1,

95
00:05:45.320 --> 00:05:48.891
h2, h3 and
then using padding on the table cell.

96
00:05:48.891 --> 00:05:52.057
Or we can use the margins
on the heading level there.

97
00:05:52.057 --> 00:05:55.052
Yeah, that's kind of the base thing
that you're gonna be working from,

98
00:05:55.052 --> 00:05:56.707
is that table, table row, table cell.

99
00:05:56.707 --> 00:06:00.268
And then all of your content will live
inside of those table cells themselves.

100
00:06:03.496 --> 00:06:05.381
&gt;&gt; Jason Rodriguez: You need
to keep in mind, though,

101
00:06:05.381 --> 00:06:07.790
how you're gonna be nesting this content.

102
00:06:07.790 --> 00:06:11.491
There's a good way and
a bad way to nest tables in email.

103
00:06:11.491 --> 00:06:15.911
The bad way is to have everything
possible in its own table and

104
00:06:15.911 --> 00:06:17.652
then nest them deeply.

105
00:06:17.652 --> 00:06:22.736
There's some email clients, older
versions like Lotus Notes or IBM Notes,

106
00:06:22.736 --> 00:06:28.228
if you get up to, I think it's 12 tables
deep, then everything will just break.

107
00:06:28.228 --> 00:06:31.121
The layout will just
completely fall apart on you.

108
00:06:31.121 --> 00:06:34.543
So hopefully you're not doing that as you
nest more and more tables in your email.

109
00:06:34.543 --> 00:06:38.159
It's gonna be a massive pain in
the ass to actually maintain that and

110
00:06:38.159 --> 00:06:41.090
figure out what's going where,
how to fix problems.

111
00:06:41.090 --> 00:06:45.981
So generally, for just single column
layouts and simple structures,

112
00:06:45.981 --> 00:06:50.073
we'll have a fluid table
that'll be set to 100% wide.

113
00:06:50.073 --> 00:06:55.050
We'll have a fixed table inside of
a table cell within that container table

114
00:06:55.050 --> 00:06:59.642
that will be set to something like
600 pixels, that fixed width.

115
00:06:59.642 --> 00:07:03.177
And then the content will be in
its own discreet table rows and

116
00:07:03.177 --> 00:07:05.963
table cells within
the fixed width container.

117
00:07:05.963 --> 00:07:10.931
We'll see how that comes into play when we
start making things responsive by adapting

118
00:07:10.931 --> 00:07:13.490
that fixed width for smaller screen sizes.

