WEBVTT

1
00:00:01.320 --> 00:00:05.880
&gt;&gt; Rodriguez: So the easiest way to see
this is in a single column simple layout,

2
00:00:05.880 --> 00:00:09.980
like what we've been building out,
to see how this actually works in action.

3
00:00:09.980 --> 00:00:13.010
So you'll see that single
column hybrid HTML example.

4
00:00:13.010 --> 00:00:16.451
And I'm gonna pop it open here and
walk through what that looks like.

5
00:00:20.844 --> 00:00:23.060
&gt;&gt; Rodriguez: So
the same stuff we've been doing before.

6
00:00:23.060 --> 00:00:29.175
We have our base document, we have our
CSS resets doing all that good stuff.

7
00:00:29.175 --> 00:00:30.910
And then, we have our div.

8
00:00:30.910 --> 00:00:34.630
This is what we had originally,
where we have this container div.

9
00:00:34.630 --> 00:00:35.890
And then, each of our modules,

10
00:00:35.890 --> 00:00:39.920
those content pieces,
are just sitting inside of that div.

11
00:00:39.920 --> 00:00:43.709
We can use margin on these different
elements to add that white space and

12
00:00:43.709 --> 00:00:45.239
make everything look good.

13
00:00:45.239 --> 00:00:48.260
But we're not using tables or
anything like that.

14
00:00:48.260 --> 00:00:52.042
So it's nice and super clean to code
something like this when it's a single

15
00:00:52.042 --> 00:00:54.278
column layout using this hybrid approach.

16
00:00:54.278 --> 00:00:56.450
And this is something I do for
my own e-mails.

17
00:00:56.450 --> 00:00:59.750
But it gets a lot more complex when
you start adding multiple columns,

18
00:00:59.750 --> 00:01:02.030
which we'll look at in a few minutes here.

19
00:01:02.030 --> 00:01:05.390
But you can see that we have this div,
that's the container.

20
00:01:05.390 --> 00:01:08.455
And the only thing we're doing to
constrain that width is using this

21
00:01:08.455 --> 00:01:11.870
max-width property in line on that div.

22
00:01:11.870 --> 00:01:16.500
So for most e- mail clients,
it will render that properly.

23
00:01:16.500 --> 00:01:19.676
But we saw earlier that Outlook
just completely blows that out.

24
00:01:19.676 --> 00:01:23.360
It doesn't understand max-width, so
we have to do something different.

25
00:01:23.360 --> 00:01:26.780
And that's where these conditional
tables come into play.

26
00:01:26.780 --> 00:01:31.610
So in this e-mail, the only table
you'll see is this one up here for

27
00:01:31.610 --> 00:01:34.040
that Microsoft only view.

28
00:01:34.040 --> 00:01:35.950
So we use that same conditional comment.

29
00:01:35.950 --> 00:01:41.125
We're saying if this is greater than or
equal to Microsoft Outlook 2000 or

30
00:01:41.125 --> 00:01:46.880
IE, then I want you to wrap all
this content inside of this table,

31
00:01:46.880 --> 00:01:48.710
table row, and table cell.

32
00:01:48.710 --> 00:01:51.870
And this is using the exact same table
approach that we've seen before.

33
00:01:51.870 --> 00:01:56.140
We're overriding things like cell spacing,
cell padding, and the border.

34
00:01:56.140 --> 00:01:59.910
We're setting the specific width,
which is 600 pixels wide.

35
00:01:59.910 --> 00:02:04.630
We're gonna use align-center so that
entire e-mail's not shifted to the left,

36
00:02:04.630 --> 00:02:07.250
it's centered in that viewport.

37
00:02:07.250 --> 00:02:09.820
And then,
we have role equals presentation to

38
00:02:09.820 --> 00:02:12.380
make sure that anybody
using assistive technology

39
00:02:12.380 --> 00:02:16.530
doesn't get that table read out to them
if they're on Windows using Outlook.

40
00:02:16.530 --> 00:02:17.770
So we open that up.

41
00:02:17.770 --> 00:02:20.570
You can see the table,
the table row, table cell.

42
00:02:20.570 --> 00:02:23.670
And then,
the entire e-mail lives inside of that.

43
00:02:23.670 --> 00:02:27.560
Then, when we get later down, again, we
use this exact same conditional comment.

44
00:02:27.560 --> 00:02:31.180
And then, we just close out those three
elements, the table cell, table row,

45
00:02:31.180 --> 00:02:32.440
and table.

46
00:02:32.440 --> 00:02:37.460
So when we do this, we can see that it
will render properly in Microsoft Outlook.

47
00:02:47.334 --> 00:02:49.337
&gt;&gt; Rodriguez: Apple mail,
perfect as always.

48
00:02:49.337 --> 00:02:50.820
I love you.

49
00:02:50.820 --> 00:02:54.320
Outlook, it's looking great, it's awesome.

50
00:02:54.320 --> 00:02:56.790
We don't get our border radius,
that's no big deal.

51
00:02:56.790 --> 00:02:58.990
Our bulletproof button's working nicely.

52
00:02:58.990 --> 00:03:01.290
But our whole design works well there.

53
00:03:01.290 --> 00:03:02.690
But perhaps most importantly,

54
00:03:02.690 --> 00:03:07.160
when we get down onto mobile,
then the e-mail works as intended.

55
00:03:07.160 --> 00:03:10.200
It shrinks down because
it's fluid by default.

56
00:03:10.200 --> 00:03:12.981
So we don't have to do anything
special with media queries, and

57
00:03:12.981 --> 00:03:14.378
this is where it came into play.

58
00:03:14.378 --> 00:03:17.517
Because Gmail was starting
out our media queries,

59
00:03:17.517 --> 00:03:21.770
we had to make that fluid by default
approach to designing e- mails.

60
00:03:21.770 --> 00:03:25.330
So it works well across all
these different mobile devices.

61
00:03:25.330 --> 00:03:30.120
You'll see Samsung's usually a little bit
weird and will do some weird scaling or

62
00:03:30.120 --> 00:03:31.720
shifting of your layout.

63
00:03:31.720 --> 00:03:33.800
There's not too much
you can do about that.

64
00:03:33.800 --> 00:03:38.558
But across all these different devices
that our e-mail's working really

65
00:03:38.558 --> 00:03:40.909
well because it is fluid by default.

66
00:03:40.909 --> 00:03:44.532
Again, for single column layouts,
this works really, really well.

67
00:03:44.532 --> 00:03:48.062
It keeps your code super clean,
super easy to update, so

68
00:03:48.062 --> 00:03:53.770
when you're updating this, you're just
looking at these basic HTML elements.

69
00:03:53.770 --> 00:03:57.780
So you can swap those out, do whatever you
want with them, style them how you want.

70
00:03:57.780 --> 00:04:02.390
But when we get into multiple columns for
hybrid coding,

71
00:04:02.390 --> 00:04:07.540
it gets a lot more complex
because you have to account for

72
00:04:07.540 --> 00:04:12.300
that stacking in really unique ways for
e-mail design.

73
00:04:12.300 --> 00:04:14.523
So let's see what that
actually looks like.

74
00:04:19.200 --> 00:04:21.660
&gt;&gt; Rodriguez: So I'm gonna open this up so
you can see what it looks like.

75
00:04:21.660 --> 00:04:26.180
Similar to what we were doing before,
two columns, nothing special.

76
00:04:26.180 --> 00:04:29.980
But when we start looking at our e-mail,
it gets a little bit more lengthy,

77
00:04:29.980 --> 00:04:33.130
a little bit more verbose, and
we have to account for more.

78
00:04:33.130 --> 00:04:37.030
So again,
we're using our main container div here.

79
00:04:37.030 --> 00:04:40.830
We're using that max-width,
we're using our conditional table for

80
00:04:40.830 --> 00:04:42.290
Microsoft Outlook.

81
00:04:42.290 --> 00:04:45.280
But then, we get down into
our two column layout, and

82
00:04:45.280 --> 00:04:48.270
that's where we have to
introduce back into tables.

83
00:04:48.270 --> 00:04:52.090
We need a better container
than a div to house those two

84
00:04:52.090 --> 00:04:55.770
different columns using this
hybrid coding approach.

85
00:04:55.770 --> 00:04:58.390
So we're keeping that table fluid,
which is awesome, all right?

86
00:04:58.390 --> 00:04:59.808
We're using that 100% wide.

87
00:04:59.808 --> 00:05:02.945
And then, we're gonna open up
a table row and table cell.

88
00:05:02.945 --> 00:05:05.820
Make sure that's 100% wide
to force that full width.

89
00:05:05.820 --> 00:05:10.905
And then, you can see some
additional ghost tables in here.

90
00:05:10.905 --> 00:05:13.088
A couple of things to keep in mind,
though,

91
00:05:13.088 --> 00:05:16.880
is you're gonna see a lot of nesting
in here, and some kind of weird things.

92
00:05:16.880 --> 00:05:19.952
So you'll see this font size equals 0.

93
00:05:19.952 --> 00:05:23.870
And that'll just help ensure that the
spacing and the stacking works properly.

94
00:05:23.870 --> 00:05:26.980
It's really weird that it's in there,
but it does work.

95
00:05:26.980 --> 00:05:30.570
And we'll see multiple
nested tables in here.

96
00:05:30.570 --> 00:05:32.930
We'll see the divs that we are using.

97
00:05:32.930 --> 00:05:38.560
So the column comes from these table
cells inside of this ghost table.

98
00:05:38.560 --> 00:05:41.910
You can see that this ghost
table's 600 pixels wide, but

99
00:05:41.910 --> 00:05:44.880
this table cell's 300 pixels wide.

100
00:05:44.880 --> 00:05:49.910
And then, we're using for other clients
that don't see those ghost tables,

101
00:05:49.910 --> 00:05:52.500
then we fall back to use
this div based approach.

102
00:05:52.500 --> 00:05:55.450
So we can say the max-width for
this is 50%.

103
00:05:55.450 --> 00:05:57.883
So it's gonna be half that design.

104
00:05:57.883 --> 00:06:01.307
We're gonna set it to inline block so

105
00:06:01.307 --> 00:06:05.511
that it lines up next
to its neighbor column.

106
00:06:05.511 --> 00:06:10.306
And then, you can adjust these,
all this stuff, as necessary.

107
00:06:10.306 --> 00:06:13.460
You can adjust your content as necessary.

108
00:06:13.460 --> 00:06:19.399
But by default, what it's doing is gonna
be stacking this on mobile because of how,

109
00:06:19.399 --> 00:06:22.760
just this this min-width is working.

110
00:06:22.760 --> 00:06:27.970
So you set your min-width to equal
whatever that max column size is.

111
00:06:27.970 --> 00:06:31.786
And then, when it gets down to that,
it will naturally stack those.

112
00:06:31.786 --> 00:06:34.254
It's not gonna let you go below it.

113
00:06:34.254 --> 00:06:38.390
And it'll just force that
stacking on mobile clients.

114
00:06:38.390 --> 00:06:42.291
So you can see that in action
when we pop it open in Litmus.

115
00:06:45.421 --> 00:06:48.522
&gt;&gt; Rodriguez: The thing I don't like about
the multiple columns hybrid approach is

116
00:06:48.522 --> 00:06:49.600
that it's so complex.

117
00:06:49.600 --> 00:06:51.390
There's a lot of code in there.

118
00:06:51.390 --> 00:06:53.894
There's a lot of things that
if you make one wrong move,

119
00:06:53.894 --> 00:06:55.556
then it's gonna break your design.

120
00:06:55.556 --> 00:06:59.920
And it gets even more complex as you start
adding three and four column layouts.

121
00:06:59.920 --> 00:07:03.450
But again, we have our two columns.

122
00:07:03.450 --> 00:07:06.090
Since this is set to inline block and

123
00:07:06.090 --> 00:07:11.510
it's only 50%, those columns will shift
up on a large enough screen size.

124
00:07:11.510 --> 00:07:14.600
But when it gets down to,
again, this is working well.

125
00:07:14.600 --> 00:07:18.580
We could adjust that gutter a little bit
so there's space between the two columns.

126
00:07:18.580 --> 00:07:23.210
But when we get down on a mobile,
since it's dropping below

127
00:07:23.210 --> 00:07:27.550
that max-width breakpoint, then it's
going to naturally stack those columns.

128
00:07:27.550 --> 00:07:30.440
So we get that single column layout.

129
00:07:30.440 --> 00:07:35.190
So this is awesome, again, for clients
that don't support embedded styles and

130
00:07:35.190 --> 00:07:36.300
media queries in the head.

131
00:07:36.300 --> 00:07:38.560
It will just naturally do this.

132
00:07:38.560 --> 00:07:43.130
It's that fluid by default,
and it works nicely and

133
00:07:43.130 --> 00:07:47.220
choreographs that content without
having to mess with media queries.

134
00:07:47.220 --> 00:07:51.820
That being said, it is more complex and
there's just more that potentially

135
00:07:51.820 --> 00:07:56.670
go wrong when you're making updates or
trying to adopt this to new designs.

136
00:07:56.670 --> 00:07:59.020
You can see that I put in here

137
00:08:01.410 --> 00:08:05.970
a folder into the GitHub repo
that's called Hybrid Examples.

138
00:08:05.970 --> 00:08:10.500
And this is code from Fabio Cannaro who
was developing a lot of these ideas.

139
00:08:10.500 --> 00:08:14.910
And these are just examples of
different e-mail type structures.

140
00:08:14.910 --> 00:08:17.010
So you can see this two column fluid,

141
00:08:17.010 --> 00:08:19.670
which is the same thing that
we were just looking at.

142
00:08:19.670 --> 00:08:22.540
It's nice that he has a couple of
developer notes in here to tell

143
00:08:22.540 --> 00:08:24.210
you what's going on here.

144
00:08:24.210 --> 00:08:28.680
So setting the font size zero is necessary
to ensure there's no extra space

145
00:08:28.680 --> 00:08:31.470
introduced and that they wrap properly.

146
00:08:31.470 --> 00:08:34.252
To have each column center upon stacking,

147
00:08:34.252 --> 00:08:39.133
wrap them in the individual divs and
set the max-width and width the same.

148
00:08:39.133 --> 00:08:41.141
Set them to display inline block, and

149
00:08:41.141 --> 00:08:46.570
then using vertical-align will help those
line up when they're next to each other.

150
00:08:46.570 --> 00:08:50.480
So some helpful notes in there that'll
help you pick through this stuff.

151
00:08:50.480 --> 00:08:54.430
But when you get into
you even more columns,

152
00:08:54.430 --> 00:08:58.760
then it's just a hell of a lot
of code to try to maintain.

153
00:08:58.760 --> 00:09:04.890
So this is a simple three column layout
with gutters between those columns.

154
00:09:04.890 --> 00:09:06.180
No real styling.

155
00:09:06.180 --> 00:09:08.580
If we pop this open,
you can see what it looks like.

156
00:09:08.580 --> 00:09:10.640
There's nothing really going on, and

157
00:09:10.640 --> 00:09:15.530
it's already at 130 lines of code that
you have to dig through and maintain.

158
00:09:15.530 --> 00:09:20.530
Whereas, if we got our single column
hybrid e-mail that has images and

159
00:09:20.530 --> 00:09:24.860
styles and all that good stuff,
it's only at 117 lines of code.

160
00:09:24.860 --> 00:09:28.387
So I'll leave it to you to decide
which one you wanna maintain and

161
00:09:28.387 --> 00:09:29.310
build on top of.

162
00:09:29.310 --> 00:09:33.037
But if you do need to make
specific multi-column layouts, and

163
00:09:33.037 --> 00:09:37.185
you want to ensure that they work
across the widest range of devices and

164
00:09:37.185 --> 00:09:42.181
e-mail clients, especially if they make
any updates where they're stripping out

165
00:09:42.181 --> 00:09:45.345
that head of your e-mail and
those embedded styles,

166
00:09:45.345 --> 00:09:49.770
then that's where this hybrid
approach really comes into play.

167
00:09:49.770 --> 00:09:51.620
There's some cool things you can do,
too, as well.

168
00:09:51.620 --> 00:09:53.820
You can have reverse stacking.

169
00:09:53.820 --> 00:09:57.561
You can have unequal
columns that reverse stack.

170
00:09:57.561 --> 00:10:00.473
So you would have this example
where you have your right,

171
00:10:00.473 --> 00:10:02.480
which is wider than your left.

172
00:10:02.480 --> 00:10:08.780
If we shrink down here,
then you can see the right comes on top.

173
00:10:08.780 --> 00:10:12.750
It's that reverse stacking order,
but it still maintains those widths.

174
00:10:12.750 --> 00:10:16.805
You can combine this with media queries
to get some really advanced stuff and

175
00:10:16.805 --> 00:10:19.670
adjust all those styles as needed.

176
00:10:19.670 --> 00:10:23.075
But it's really up to the developer
what they need to support,

177
00:10:23.075 --> 00:10:27.138
what they need to do to make sure that
it's working for their subscribers.

178
00:10:27.138 --> 00:10:30.500
But yeah,
that's hybrid coding in a nutshell.

179
00:10:30.500 --> 00:10:35.118
The examples in here get pretty lengthy,
so I'll leave it to you to go through

180
00:10:35.118 --> 00:10:39.963
those hybrid examples which are available
on the GitHub repo for this workshop.

181
00:10:39.963 --> 00:10:42.732
Definitely worth picking through and
testing out and

182
00:10:42.732 --> 00:10:44.780
seeing how they actually work.

183
00:10:44.780 --> 00:10:48.130
Fabio's developer notes
are super handy in there.

184
00:10:48.130 --> 00:10:52.170
But really, I like this hybrid
approach for single column layouts.

185
00:10:52.170 --> 00:10:57.138
But if I'm doing multiple columns, then
I'm usually just falling back to tables

186
00:10:57.138 --> 00:11:01.535
and using media queries and classes
to target those for mobile devices.

