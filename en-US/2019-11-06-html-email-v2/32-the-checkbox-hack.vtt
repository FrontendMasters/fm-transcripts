WEBVTT

1
00:00:00.410 --> 00:00:03.470
&gt;&gt; Rodriguez: So
let's look at more advanced examples.

2
00:00:03.470 --> 00:00:06.400
We're not going to build something
like this but we're gonna look at

3
00:00:06.400 --> 00:00:13.070
the underlying mechanism for adding
this in an email purchasing experience.

4
00:00:13.070 --> 00:00:18.270
So this was built out by a guy named
Mark Robbins who works for Salesforce.

5
00:00:18.270 --> 00:00:22.280
He used to work for a company called Rebel
Mail that was acquired by Salesforce.

6
00:00:22.280 --> 00:00:25.710
But he's kind of like the godfather
of interactive emails,

7
00:00:25.710 --> 00:00:28.110
his nickname for all intents and
purposes in the industry.

8
00:00:28.110 --> 00:00:31.554
He's the one that pioneered
a lot of this functionality.

9
00:00:31.554 --> 00:00:34.274
Where you have these different states.

10
00:00:34.274 --> 00:00:36.640
You're tracking all these
different states in an email.

11
00:00:36.640 --> 00:00:40.320
You're sending information out to
a web page, complete a purchase.

12
00:00:40.320 --> 00:00:44.846
I do all this really fancy stuff that
drives a lot of engagement inside of email

13
00:00:44.846 --> 00:00:45.622
campaigns.

14
00:00:45.622 --> 00:00:49.203
At LMS we leverage that same kind of II.

15
00:00:49.203 --> 00:00:54.077
We worked with Rebel Mail in the past to
add like an email checkout experience for

16
00:00:54.077 --> 00:00:55.836
our own conference emails.

17
00:00:55.836 --> 00:00:57.636
He's worked with like Burberry and

18
00:00:57.636 --> 00:01:00.584
all these cool brands adding
this kind of functionality.

19
00:01:00.584 --> 00:01:06.540
Other brands are doing cool stuff nest,
thermostats and cameras and stuff.

20
00:01:06.540 --> 00:01:09.410
They send a lot of interactive emails
which are kind of like productive

21
00:01:09.410 --> 00:01:11.310
switchers and stuff like that.

22
00:01:11.310 --> 00:01:14.910
A lot of cool companies doing really
interesting things with interactive email.

23
00:01:14.910 --> 00:01:16.600
But when you get into this level,

24
00:01:16.600 --> 00:01:20.490
it's not just hover states,
it's not just keyframe animations.

25
00:01:20.490 --> 00:01:24.980
You have to figure out a way to manage
state across your email campaign.

26
00:01:24.980 --> 00:01:28.000
The problem is you don't have
the resource of like JavaScript or

27
00:01:28.000 --> 00:01:32.220
have server side language running in
the background that's managing that state,

28
00:01:32.220 --> 00:01:35.730
that can track that state in
the variable or something like that.

29
00:01:35.730 --> 00:01:41.610
So we have to figure out a way to fake
that inside of our email campaign.

30
00:01:41.610 --> 00:01:44.960
And the way we do that is
by using the checkbox hack.

31
00:01:44.960 --> 00:01:47.969
So is anybody familiar
with a checkbox hack?

32
00:01:47.969 --> 00:01:49.722
Anybody used it before?

33
00:01:49.722 --> 00:01:51.470
A lot of shaking heads, cool.

34
00:01:51.470 --> 00:01:53.780
So hopefully this will blow
your mind a little bit.

35
00:01:53.780 --> 00:01:58.530
It's a really cool technique, but
this comes from way back in the day,

36
00:01:58.530 --> 00:02:00.140
the early days of programming.

37
00:02:00.140 --> 00:02:04.650
Another name for this that Mark
actually has a great article up on,

38
00:02:04.650 --> 00:02:06.860
I forget the magazine's website, but

39
00:02:06.860 --> 00:02:12.070
I could add it to the GitHub
repo called punch card coding.

40
00:02:12.070 --> 00:02:15.750
So if you think about the early
days of programming before we had

41
00:02:15.750 --> 00:02:19.880
these higher level languages,
we had compilers, all that good stuff.

42
00:02:19.880 --> 00:02:23.180
People would use punch
cards to code programs.

43
00:02:23.180 --> 00:02:27.940
So you'd have a paper card, you'd punch
holes in these different kind of grid

44
00:02:27.940 --> 00:02:34.310
elements to dictate that state of that
program at that specific point in time.

45
00:02:34.310 --> 00:02:37.269
So the checkbox hack
works in the same way.

46
00:02:37.269 --> 00:02:42.010
It's you're creating this punch card
coding experience, you're managing

47
00:02:42.010 --> 00:02:46.189
state across these different time
points using a punch on this card.

48
00:02:46.189 --> 00:02:49.642
In this case it's gonna be
like checked check box or

49
00:02:49.642 --> 00:02:52.547
checked radio button to track that state.

50
00:02:52.547 --> 00:02:56.363
And then based on that state
which items are checked?

51
00:02:56.363 --> 00:03:00.677
Which radio buttons or
check boxes are checked at that point?

52
00:03:00.677 --> 00:03:03.435
We're gonna update
the styling of our content.

53
00:03:03.435 --> 00:03:07.551
So we can selectively hide and
show content, we can adjust styles.

54
00:03:07.551 --> 00:03:09.925
We can do all that stuff
based on that state.

55
00:03:09.925 --> 00:03:11.421
So it's a little bit weird.

56
00:03:11.421 --> 00:03:14.451
It's very hacky to get into it.

57
00:03:14.451 --> 00:03:18.786
It's called a hack for a reason, cuz we're
doing some weird stuff that was never

58
00:03:18.786 --> 00:03:21.040
intended to happen with these elements.

