WEBVTT

1
00:00:00.000 --> 00:00:04.991
[MUSIC]

2
00:00:04.991 --> 00:00:08.517
&gt;&gt; Douglas Crockford: So we want to find
a better way of structuring that kind of

3
00:00:08.517 --> 00:00:11.390
stuff, and that thing is promises.

4
00:00:11.390 --> 00:00:17.400
Promises come out features which
came out of the actual model,

5
00:00:17.400 --> 00:00:19.440
this is another of the benefit
of the actual model.

6
00:00:20.820 --> 00:00:24.940
Promises are an excellent mechanism for
managing asynchronicity.

7
00:00:24.940 --> 00:00:28.400
A promise is an object that
represents a possible future value.

8
00:00:29.480 --> 00:00:32.220
So we can have an operation
which will return something,

9
00:00:32.220 --> 00:00:37.220
which indicates something that might
happen later but hasn't happened yet, but

10
00:00:37.220 --> 00:00:39.480
it contains that potential.

11
00:00:39.480 --> 00:00:43.600
Every promise has a corresponding resolver
that is used to ultimately assign a value

12
00:00:43.600 --> 00:00:49.670
to that promise, and every promise has one
of three states, kept, broken, or pending.

13
00:00:49.670 --> 00:00:53.064
It's created pending and can move
to one of the other two states and

14
00:00:53.064 --> 00:00:57.639
after that it will never change again
&gt;&gt; Douglas Crockford: A promise

15
00:00:57.639 --> 00:00:59.432
is also an event generator,

16
00:00:59.432 --> 00:01:04.710
it fires its event when the value
of the promise is ultimately known.

17
00:01:04.710 --> 00:01:07.126
And at any time after
the making of a promise,

18
00:01:07.126 --> 00:01:10.497
event handling functions can be
registered with the promise,

19
00:01:10.497 --> 00:01:14.579
which will be called in the order with
the promise's value when it is known.

20
00:01:14.579 --> 00:01:17.582
And a promise can accept
functions that will be called with

21
00:01:17.582 --> 00:01:20.230
the value once the promise
has been kept or broken.

22
00:01:21.290 --> 00:01:26.100
So promise.when can take two functions,
success or failure.

23
00:01:26.100 --> 00:01:30.909
And which one will be called will depend
on the ultimate resolution of the promise.

24
00:01:33.540 --> 00:01:38.728
&gt;&gt; Douglas Crockford: So here's some code,
I have a macroid called vow,

25
00:01:38.728 --> 00:01:41.910
which I used to make vows.

26
00:01:41.910 --> 00:01:47.019
A vow contains a keep function,
a break function, and a promise object.

27
00:01:48.810 --> 00:01:53.340
The keep function I call when I know
what the value of the promise is, and

28
00:01:53.340 --> 00:01:54.860
I want to keep the promise.

29
00:01:54.860 --> 00:01:59.750
If I know that the promise will never be
kept, I can break it, and explain why.

30
00:01:59.750 --> 00:02:04.760
Then the promise itself takes a when
method, and that when method can take

31
00:02:04.760 --> 00:02:10.800
two functions, one of which may be called,
depending on the result of the function.

32
00:02:10.800 --> 00:02:15.310
And when itself returns another promise,
so

33
00:02:15.310 --> 00:02:19.700
based on result of that
we can do more stuff, so

34
00:02:19.700 --> 00:02:23.760
we get a level of compossibility
with these things.

35
00:02:23.760 --> 00:02:26.360
So here's an example of
how you might use it.

36
00:02:26.360 --> 00:02:29.099
We have done file IO wrong
ever since four trap,

37
00:02:30.900 --> 00:02:33.910
it's always been a break
in weight kind of thing.

38
00:02:33.910 --> 00:02:38.470
So when you call the file system for
a file, that could mean several

39
00:02:38.470 --> 00:02:43.450
process which is, it can be waiting for
rotation, it can be waiting for

40
00:02:43.450 --> 00:02:46.540
your place in the IO queue,
it can be waiting for a lot of stuff.

41
00:02:46.540 --> 00:02:49.350
We don't wanna wait in
return based system.

42
00:02:49.350 --> 00:02:55.810
So the other way to do it is to have the
file system immediately return a promise.

43
00:02:55.810 --> 00:02:59.040
And that promise will be made good
once the file system gets around

44
00:02:59.040 --> 00:03:00.580
to reading the file.

45
00:03:00.580 --> 00:03:06.210
So this is how I think file system should
work and no JS comes really close to this.

46
00:03:07.720 --> 00:03:10.450
So I read_file, give it a file name.

47
00:03:10.450 --> 00:03:16.240
And I'll say when we have the result
of that file, call success function and

48
00:03:16.240 --> 00:03:19.870
it will get the string,
which represents the contents of the file.

49
00:03:19.870 --> 00:03:23.730
So that's how we do it, we treat it
just like treat events in the browser.

50
00:03:23.730 --> 00:03:26.440
Waiting for the user to click
on something, waiting for

51
00:03:26.440 --> 00:03:29.149
a file to get read,
works exactly the same way.

52
00:03:30.720 --> 00:03:34.380
And we also provide a failure function to
be called if for some reasons they can't

53
00:03:34.380 --> 00:03:38.990
open the file, like the file can't be
found or I don't have access or whatever.

54
00:03:38.990 --> 00:03:42.300
You might wonder why do we
call a failure function,

55
00:03:42.300 --> 00:03:44.480
why don't we just throw an exception?

56
00:03:44.480 --> 00:03:51.480
It's because of the nature of turns that,
so

57
00:03:51.480 --> 00:03:56.710
an exception modifies control flow
by unwinding the stack, right?

58
00:03:56.710 --> 00:03:59.940
Say we got an error here, let's step
back until we find somebody who wants

59
00:03:59.940 --> 00:04:02.470
to catch it, and then we can go forward.

60
00:04:02.470 --> 00:04:05.850
But in a turn-based system, the stack
is emptied at the end of every turn.

61
00:04:06.960 --> 00:04:11.880
Cuz every turn program runs to
completion when it is finished,

62
00:04:11.880 --> 00:04:13.170
there's no more stack.

63
00:04:13.170 --> 00:04:16.090
So it's like time travel,
there's no way you can

64
00:04:16.090 --> 00:04:20.280
throw something into a previous turn,
cuz that time has ended.

65
00:04:20.280 --> 00:04:25.360
We can only go forward, and the mechanism
we have for going forward is promises.

66
00:04:25.360 --> 00:04:29.073
Okay, so the failure branch of the promise
is the way we send exceptions into

67
00:04:29.073 --> 00:04:29.718
the future.

68
00:04:34.921 --> 00:04:38.110
&gt;&gt; Douglas Crockford: And
we can cascade failures as well.

69
00:04:38.110 --> 00:04:41.090
So here I've got a promise, and

70
00:04:41.090 --> 00:04:45.630
I'll call its when method passing a,
and it returns a promise.

71
00:04:45.630 --> 00:04:50.000
I'll call it's thing and say call
it success_b, it returns a promise.

72
00:04:50.000 --> 00:04:52.144
We'll call it's thing and a failure.

73
00:04:52.144 --> 00:04:57.570
So success_a gets the result
of the promise and

74
00:04:58.720 --> 00:05:02.110
b gets the result of a, and
c gets the result of b.

75
00:05:02.110 --> 00:05:08.520
But if any of those fail then the failure
propagates to this failure method.

76
00:05:08.520 --> 00:05:13.550
So this chaining of failure means
that this acts sort of like the try.

77
00:05:13.550 --> 00:05:18.450
I can have all of these things which
are being resolved in different terms.

78
00:05:18.450 --> 00:05:21.239
And if any of them go wrong for
any reason,

79
00:05:21.239 --> 00:05:24.121
that is a function that
I know gets called.

80
00:05:24.121 --> 00:05:27.066
So it gives me a much better
way of controlling this stuff,

81
00:05:27.066 --> 00:05:28.880
keeping track of what's going on.

