WEBVTT

1
00:00:00.000 --> 00:00:04.807
[MUSIC]

2
00:00:04.807 --> 00:00:07.409
&gt;&gt; Douglas Crockford: All right,
so I've got problems,

3
00:00:07.409 --> 00:00:10.330
now they're gonna be your problems.

4
00:00:10.330 --> 00:00:15.025
So what we're gonna do for the next
hour two is I'm gonna show you a problem

5
00:00:15.025 --> 00:00:19.289
statement, and you can ask as many
questions as you want about it.

6
00:00:19.289 --> 00:00:23.260
And then you'll solve it, you'll write
down or type it in, or whatever.

7
00:00:23.260 --> 00:00:26.560
Then I'll show you my solution,
you can compare your solution to mine and

8
00:00:26.560 --> 00:00:28.230
we'll talk about that.

9
00:00:28.230 --> 00:00:33.860
Each of these will build on the previous
ones, so if you didn't get one,

10
00:00:33.860 --> 00:00:38.820
then right down my solution because you're
gonna need that to do the next one, okay?

11
00:00:38.820 --> 00:00:40.990
The plan is after doing this,

12
00:00:40.990 --> 00:00:44.760
you're gonna be about 100 times
smarter about functions, okay?

13
00:00:44.760 --> 00:00:45.767
We'll see how that goes.

14
00:00:47.488 --> 00:00:49.957
&gt;&gt; Douglas Crockford: And
I promise you, we'll start easy, and

15
00:00:49.957 --> 00:00:53.910
then it'll get hard, and hard,
and hard, and hard, right?

16
00:00:53.910 --> 00:00:55.897
So first, easy one.

17
00:00:55.897 --> 00:00:58.100
We'll start with a test, okay.

18
00:00:58.100 --> 00:01:00.180
Someone asked if there is gonna be a quiz.

19
00:01:00.180 --> 00:01:01.255
And there is, and it's right now.

20
00:01:01.255 --> 00:01:03.268
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: OK, so

21
00:01:03.268 --> 00:01:04.911
we have function funky.

22
00:01:04.911 --> 00:01:08.110
Has a parameter (o), it sets o to null.

23
00:01:08.110 --> 00:01:11.280
We've got a global variable x,
which is an empty array.

24
00:01:11.280 --> 00:01:13.940
And we call funky (x),
and then we do alert.

25
00:01:13.940 --> 00:01:15.210
What does alert tell us?

26
00:01:16.410 --> 00:01:20.950
A, that it's null, B,
that it's an empty array, C,

27
00:01:20.950 --> 00:01:24.150
that it's undefined or D, it throws?

28
00:01:24.150 --> 00:01:29.323
Okay, so
who thinks the value of x is null?

29
00:01:29.323 --> 00:01:31.593
Who thinks it's an empty array?

30
00:01:33.194 --> 00:01:35.950
&gt;&gt; Douglas Crockford: Who
thinks it's undefined?

31
00:01:35.950 --> 00:01:37.580
Who thinks it throws?

32
00:01:37.580 --> 00:01:39.808
Who didn't raised their hand?

33
00:01:39.808 --> 00:01:42.760
[LAUGH] It's the most of you.

34
00:01:42.760 --> 00:01:45.585
Okay, it turns out
the correct answer is B.

35
00:01:45.585 --> 00:01:48.809
&gt;&gt; [SOUND]
&gt;&gt; Douglas Crockford: And the reason for

36
00:01:48.809 --> 00:01:51.320
that is that o is a parameter.

37
00:01:51.320 --> 00:01:56.498
O knows nothing about B, o only knows
the value that was passed to it,

38
00:01:56.498 --> 00:01:58.920
and the value of B was the array.

39
00:01:58.920 --> 00:02:03.170
Okay, so it takes it parameter,
changes it to null.

40
00:02:03.170 --> 00:02:05.037
That does not change B.

41
00:02:05.037 --> 00:02:11.352
It does not change the array, it just
changes what o was pointing to, okay?

42
00:02:11.352 --> 00:02:12.560
Okay, here's the next one.

43
00:02:13.570 --> 00:02:17.788
We have function swap that takes a and
b, and using a temp variable,

44
00:02:17.788 --> 00:02:18.900
switches a and b.

45
00:02:19.980 --> 00:02:26.060
We've got x = 1, y = 2, swap (x,
y), what is the value of x?

46
00:02:27.210 --> 00:02:28.396
Who thinks it's 1?

47
00:02:30.307 --> 00:02:32.732
&gt;&gt; Douglas Crockford: Who thinks it's 2?

48
00:02:32.732 --> 00:02:34.200
Who thinks it's undefined?

49
00:02:35.680 --> 00:02:36.450
Who thinks it throws?

50
00:02:37.940 --> 00:02:39.080
And who didn't raise their hand?

51
00:02:40.770 --> 00:02:44.670
Okay, the answer is 1, for
exactly the same reason.

52
00:02:44.670 --> 00:02:48.240
If swap were a macro, then the right
answer would have been 2, but

53
00:02:48.240 --> 00:02:50.340
it's not a macro, it's a function.

54
00:02:50.340 --> 00:02:53.554
And again, it doesn't see
the variables that were passed.

55
00:02:53.554 --> 00:02:58.500
It only sees the value that
those variables were bound to.

56
00:02:58.500 --> 00:03:00.640
So it's just wasting time.

57
00:03:00.640 --> 00:03:04.140
It's not actually accomplishing anything,
does not change any of the global state.

58
00:03:05.950 --> 00:03:06.650
Everybody with me?

59
00:03:07.900 --> 00:03:09.440
All right, so now to the problems.

60
00:03:09.440 --> 00:03:14.050
Now you're gonna start to work,
and I get to watch you work.

61
00:03:14.050 --> 00:03:16.400
Okay, so the first one is real easy.

62
00:03:16.400 --> 00:03:20.607
Write a function that takes
an argument and returns that argument.

63
00:03:23.050 --> 00:03:25.140
&gt;&gt; Douglas Crockford: Okay, so
how am I gonna know when you're all done?

64
00:03:26.300 --> 00:03:29.586
Maybe everybody should look attentive.

65
00:03:31.726 --> 00:03:33.000
&gt;&gt; Douglas Crockford: Anyone
need more time?

66
00:03:37.386 --> 00:03:37.999
&gt;&gt; Douglas Crockford: Okay, so

67
00:03:37.999 --> 00:03:43.120
here's the solution,
the function identity (x) {return x}.

68
00:03:43.120 --> 00:03:46.650
So pretty close to the simplest
possible function you can write.

69
00:03:48.866 --> 00:03:54.170
It's also, too, correct to have said var
identity equals a function expression.

70
00:03:55.180 --> 00:03:56.313
These two both do the same thing.

71
00:03:58.491 --> 00:04:00.870
&gt;&gt; Douglas Crockford: All right,
any arguments about this one?

72
00:04:02.260 --> 00:04:03.370
Okay, everybody know how?

73
00:04:03.370 --> 00:04:05.460
Cuz you gonna need this one later.

74
00:04:05.460 --> 00:04:07.080
Okay, so let's move on.

75
00:04:08.490 --> 00:04:09.610
Another easy one.

76
00:04:09.610 --> 00:04:14.290
Write two binary functions, add and
mul, which take two numbers and

77
00:04:14.290 --> 00:04:16.170
return the sum or the product.

78
00:04:18.490 --> 00:04:19.991
It really is as easy as it looks.

79
00:04:22.187 --> 00:04:23.122
&gt;&gt; Douglas Crockford: There's
no trick here.

80
00:04:26.724 --> 00:04:29.150
&gt;&gt; Douglas Crockford: We talked earlier
about the problems with concatenation.

81
00:04:29.150 --> 00:04:30.183
Don't worry about that here.

82
00:04:30.183 --> 00:04:34.052
Let's just assume that plus adds,
and that's good enough.

83
00:04:37.322 --> 00:04:38.635
&gt;&gt; Douglas Crockford: Does
anyone need more time?

84
00:04:41.057 --> 00:04:42.850
&gt;&gt; Douglas Crockford: All right,
so here it is.

85
00:04:42.850 --> 00:04:49.230
Function add (x, y) {x + y},
function mul (x, y) {x * y}, right.

86
00:04:49.230 --> 00:04:50.960
Everybody should have gotten these.

87
00:04:50.960 --> 00:04:53.797
The reason for these was we're
going to use them later, but

88
00:04:53.797 --> 00:04:57.650
I wanted you to write them,
then not have to assume anything.

89
00:04:57.650 --> 00:05:00.290
Okay, here comes the first
interesting one, you ready?

90
00:05:02.340 --> 00:05:04.270
Write a function that
takes an argument and

91
00:05:04.270 --> 00:05:07.280
returns a function that
returns that argument.

92
00:05:08.470 --> 00:05:13.497
Okay, so we have identityf takes a 3,
returns a function,

93
00:05:13.497 --> 00:05:16.762
we call that function, it returns 3.

94
00:05:18.902 --> 00:05:20.330
&gt;&gt; Douglas Crockford: Does
anyone need more time?

95
00:05:24.003 --> 00:05:26.919
&gt;&gt; Douglas Crockford: I can't tell who's
working and who's surfing for porn, so

96
00:05:26.919 --> 00:05:28.933
it's hard to-
&gt;&gt; Speaker 2: [LAUGH]

97
00:05:28.933 --> 00:05:30.006
&gt;&gt; Douglas Crockford: Hard to tell who's

98
00:05:30.006 --> 00:05:30.680
finished.

99
00:05:31.930 --> 00:05:35.330
If you need more time please,
don't be shy, let me know, but

100
00:05:35.330 --> 00:05:38.120
I'm assuming that we're all ready for
the reveal?

101
00:05:38.120 --> 00:05:45.605
Okay, so we have identityf (x),
it returns the function that returns y.

102
00:05:45.605 --> 00:05:46.580
Who got this one?

103
00:05:49.230 --> 00:05:54.027
Really good, anyone who didn't,
does this make sense to you?

104
00:05:56.807 --> 00:05:59.277
&gt;&gt; Douglas Crockford: Cuz this is the key,
everything we're gonna do for

105
00:05:59.277 --> 00:06:01.469
the rest of the day is
going to look like this.

106
00:06:03.180 --> 00:06:07.756
So I need to know that everybody
understands this one before we go on.

107
00:06:09.885 --> 00:06:10.971
&gt;&gt; Douglas Crockford: Is
there any questions?

108
00:06:12.999 --> 00:06:15.580
&gt;&gt; Douglas Crockford: No,
all right, here's the next one.

109
00:06:17.270 --> 00:06:19.920
Write a function that adds
from two invocations.

110
00:06:19.920 --> 00:06:24.894
So you're gonna write function
addf that will take a 3, and

111
00:06:24.894 --> 00:06:27.440
then take a 4, and return 7.

112
00:06:30.558 --> 00:06:34.705
&gt;&gt; Douglas Crockford: And I'll give you a
hint, you'll combine elements of your add

113
00:06:34.705 --> 00:06:38.460
function with elements of
the identity f function.

114
00:06:38.460 --> 00:06:41.030
&gt;&gt; Speaker 3: I have a question,
what happens when I invoke it for

115
00:06:41.030 --> 00:06:42.560
a third time time?

116
00:06:42.560 --> 00:06:43.505
&gt;&gt; Douglas Crockford: That
should be an error,

117
00:06:43.505 --> 00:06:45.176
because you're trying to invoke a number.

118
00:06:49.474 --> 00:06:53.686
&gt;&gt; Douglas Crockford: Because the result
of the first two indications will be 7, so

119
00:06:53.686 --> 00:06:56.447
trying to call 7 should be a type error.

120
00:06:59.212 --> 00:07:00.768
&gt;&gt; Douglas Crockford: Does
anyone need more time?

121
00:07:04.671 --> 00:07:09.468
&gt;&gt; Douglas Crockford: Okay, so
here we go, function addf (x) {

122
00:07:09.468 --> 00:07:14.024
return function (y) { return x + y}.

123
00:07:14.024 --> 00:07:15.554
So who got this one?

124
00:07:17.673 --> 00:07:19.069
&gt;&gt; Speaker 4: [INAUDIBLE]
&gt;&gt; Douglas Crockford: Okay,

125
00:07:19.069 --> 00:07:21.678
I saw you shook your head, how-
&gt;&gt; Speaker 4: I didn't get that.

126
00:07:21.678 --> 00:07:23.030
&gt;&gt; Douglas Crockford: What did you miss?

127
00:07:25.370 --> 00:07:27.281
&gt;&gt; Speaker 4: I was going
a bit more complex.

128
00:07:27.281 --> 00:07:31.035
[LAUGH]
&gt;&gt; Douglas Crockford: That's later.

129
00:07:31.035 --> 00:07:33.190
&gt;&gt; Speaker 4: I'm all ready for you.

130
00:07:33.190 --> 00:07:36.140
&gt;&gt; Douglas Crockford: [LAUGH] Anyone
else have a question about this one?

131
00:07:37.780 --> 00:07:42.790
Even if you didn't get it, I recommend
you write it down, because these are all

132
00:07:42.790 --> 00:07:46.930
going to build on each other, and it may
be useful to have this to refer back to.

133
00:07:49.200 --> 00:07:50.796
Okay, so ready for the next one?

134
00:07:54.342 --> 00:07:58.375
&gt;&gt; Douglas Crockford: Write a function
that takes a binary function, like add,

135
00:07:58.375 --> 00:08:01.515
and makes it callable
with two invocations.

136
00:08:01.515 --> 00:08:06.178
Okay, so you are gonna write a function
called applyf, you can (add), and

137
00:08:06.178 --> 00:08:08.711
then (3) and then (4), and get 7.

138
00:08:13.190 --> 00:08:18.152
&gt;&gt; Douglas Crockford: Or we could
call applyf with (mul) (5) (6) // 30.

139
00:08:20.405 --> 00:08:23.530
&gt;&gt; Douglas Crockford: So this is all
gonna be about higher order functions.

140
00:08:23.530 --> 00:08:27.380
In the first functions,
we saw functions returning functions.

141
00:08:27.380 --> 00:08:31.362
Now we have functions doing that, but
also taking functions as parameters.

142
00:08:34.273 --> 00:08:36.810
&gt;&gt; Douglas Crockford: You seem
to be smiling very pleasantly.

143
00:08:36.810 --> 00:08:38.339
&gt;&gt; Speaker 4: No, it's just crazy.

144
00:08:38.339 --> 00:08:43.015
&gt;&gt; Douglas Crockford: [LAUGH]
Why would you do that?

145
00:08:43.015 --> 00:08:46.321
[LAUGH]
&gt;&gt; Speaker 4: Make the card readable,

146
00:08:46.321 --> 00:08:47.014
I think.

147
00:08:47.014 --> 00:08:47.910
[LAUGH].

148
00:08:47.910 --> 00:08:50.620
&gt;&gt; Douglas Crockford: No, we're actually
gonna build towards stuff which is useful.

149
00:08:52.510 --> 00:08:55.290
But first you need to
get the fundamentals.

150
00:09:07.213 --> 00:09:08.295
&gt;&gt; Douglas Crockford: Does
anyone need more time?

151
00:09:09.775 --> 00:09:12.875
I keep asking that, and
no one has given me an indication.

152
00:09:12.875 --> 00:09:15.155
I don't know that my intuition is,
it's all right, you do.

153
00:09:15.155 --> 00:09:16.452
Good, thank you, okay.

154
00:09:20.848 --> 00:09:26.240
&gt;&gt; Douglas Crockford: All right, so
here it is, we have function applyf

155
00:09:26.240 --> 00:09:31.646
(binary) {return function (x) {return

156
00:09:31.646 --> 00:09:37.062
function (y) {return binary (x, y) }.

157
00:09:37.062 --> 00:09:38.330
So who got this one?

158
00:09:39.980 --> 00:09:41.480
Really good, really good.

159
00:09:41.480 --> 00:09:43.260
&gt;&gt; Speaker 4: I have one question, though.

160
00:09:43.260 --> 00:09:44.000
&gt;&gt; Douglas Crockford: Yeah.

161
00:09:44.000 --> 00:09:46.520
&gt;&gt; Speaker 4: In the applyf,
I'm first defining a variable,

162
00:09:46.520 --> 00:09:49.390
it says store function equals binary.

163
00:09:49.390 --> 00:09:53.450
And I'm returning store function x, y.

164
00:09:53.450 --> 00:09:55.360
I can't really see how that's different.

165
00:09:55.360 --> 00:09:56.470
&gt;&gt; Douglas Crockford: Yeah,
it's the same thing.

166
00:09:56.470 --> 00:10:03.448
Yours is doing more work than it has to,
but this is a little simpler.

167
00:10:03.448 --> 00:10:07.093
&gt;&gt; Speaker 5: It's sort of using your
closure thing to collect all this stuff

168
00:10:07.093 --> 00:10:08.490
and to keep track of it.

169
00:10:08.490 --> 00:10:10.540
&gt;&gt; Douglas Crockford: Yeah, so
the closure is holding all the stuff.

170
00:10:10.540 --> 00:10:13.895
So everything that the blue function
needs in order to do its job,

171
00:10:13.895 --> 00:10:17.069
it gets all of that from the closure
now going several levels.

172
00:10:21.143 --> 00:10:24.300
&gt;&gt; Douglas Crockford: Anybody have
any questions about this one?

173
00:10:24.300 --> 00:10:28.032
Again, this is key and we're gonna
be building more of this stuff so,

