WEBVTT

1
00:00:00.000 --> 00:00:04.171
[MUSIC]

2
00:00:04.171 --> 00:00:08.170
&gt;&gt; Douglas Crockford: Write a function
that allows another function to be called

3
00:00:08.170 --> 00:00:08.994
only once.

4
00:00:11.395 --> 00:00:14.440
&gt;&gt; Douglas Crockford: So here we've got
once, we'll pass it the add function.

5
00:00:15.790 --> 00:00:18.070
That gives us an add_once function.

6
00:00:18.070 --> 00:00:19.540
We can call it with three and four.

7
00:00:19.540 --> 00:00:20.560
It returns seven.

8
00:00:20.560 --> 00:00:22.125
We call it again, boom.

9
00:00:34.431 --> 00:00:36.735
&gt;&gt; Douglas Crockford: This
can be really useful for

10
00:00:36.735 --> 00:00:40.486
managing functions that
are not item potent.

11
00:00:40.486 --> 00:00:43.230
So you can guarantee that they're
not gonna be called more than once.

12
00:00:43.230 --> 00:00:48.580
It could be useful in financial
applications or in security applications.

13
00:00:55.488 --> 00:00:57.714
&gt;&gt; Douglas Crockford: And
because we're composing functions,

14
00:00:57.714 --> 00:01:01.683
you don't have to rewrite the add
function in order to get this capability.

15
00:01:11.629 --> 00:01:13.108
&gt;&gt; Douglas Crockford: Does
anyone need more time?

16
00:01:16.784 --> 00:01:17.690
&gt;&gt; Douglas Crockford: Okay, here we go.

17
00:01:19.010 --> 00:01:24.870
Function once returns
a function that sets f,

18
00:01:24.870 --> 00:01:26.970
variable f,
to the function that got passed in.

19
00:01:28.710 --> 00:01:34.040
Nulls out the function
that was passed to it and

20
00:01:34.040 --> 00:01:37.320
then uses apply to call the function.

21
00:01:37.320 --> 00:01:39.120
And that's it.

22
00:01:40.320 --> 00:01:41.820
So, this will work once.

23
00:01:41.820 --> 00:01:45.440
If you try to do this again,
it will fail because

24
00:01:46.990 --> 00:01:50.080
the function will be null and
it will throw an exception.

25
00:01:50.080 --> 00:01:52.020
There are other ways of doing this.

26
00:01:52.020 --> 00:01:57.410
You could have the once function have a
variable which maybe is initially true and

27
00:01:57.410 --> 00:01:58.820
then later you decide to false.

28
00:01:58.820 --> 00:02:00.299
That would be another way of doing this.

29
00:02:01.350 --> 00:02:02.290
Or could keep it counting.

30
00:02:02.290 --> 00:02:05.790
You could set it to one and
each time you call it you decrement it.

31
00:02:05.790 --> 00:02:09.920
So if you wanted to do a three wishes
protocol you would do it like that.

32
00:02:09.920 --> 00:02:11.750
You'd set the number
of wishes to three and

33
00:02:11.750 --> 00:02:17.230
then when it goes to zero you
stop doing the apply, yeah.

34
00:02:17.230 --> 00:02:19.790
&gt;&gt; Speaker 2: Can I ask
a question on arguments?

35
00:02:19.790 --> 00:02:24.906
Could you add another argument to that ,5,
so that you're.

36
00:02:24.906 --> 00:02:28.420
So you're calling, I guess not.

37
00:02:28.420 --> 00:02:30.470
Arguments is a single parameter.

38
00:02:30.470 --> 00:02:31.980
&gt;&gt; Douglas Crockford: Yeah, so
the one thing here that you might

39
00:02:31.980 --> 00:02:36.590
not have seen before is,
f.apply of this and arguments.

40
00:02:36.590 --> 00:02:40.970
What that does is it calls this function
with exactly the same parameters and

41
00:02:40.970 --> 00:02:43.330
disk bindings as that function.

42
00:02:44.740 --> 00:02:48.190
&gt;&gt; Speaker 2: So,
could you add another primary argument.

43
00:02:50.430 --> 00:02:52.010
&gt;&gt; Douglas Crockford: Argument
as in array?

44
00:02:52.010 --> 00:02:54.440
&gt;&gt; Speaker 2: Could you add to that array,
something else, and

45
00:02:54.440 --> 00:02:56.480
continue with your passing line?

46
00:02:56.480 --> 00:03:00.220
&gt;&gt; Douglas Crockford: You could, yeah,
you could append stuff to the end of it.

47
00:03:04.510 --> 00:03:05.460
Any questions about this one?

48
00:03:06.780 --> 00:03:08.021
And so who got this one?

49
00:03:10.118 --> 00:03:10.921
&gt;&gt; Douglas Crockford: Pretty good.

50
00:03:10.921 --> 00:03:13.676
&gt;&gt; Speaker 2: I did it the other
way that you were talking about,

51
00:03:13.676 --> 00:03:15.740
giving like a boolean variable.

52
00:03:15.740 --> 00:03:18.038
&gt;&gt; Douglas Crockford: That's fine,
there is nothing wrong with that.

53
00:03:18.038 --> 00:03:20.121
&gt;&gt; Speaker 2: I'm not totally
sure that it works that way.

54
00:03:20.121 --> 00:03:22.600
&gt;&gt; Douglas Crockford: As we're
getting more complicated,

55
00:03:22.600 --> 00:03:28.980
when all the examples were really simple,
there was probably one best way to do it.

56
00:03:28.980 --> 00:03:31.820
We are now giving it to a territory
where there's gonna be more variation

57
00:03:31.820 --> 00:03:33.850
in the possible answers.

58
00:03:35.260 --> 00:03:36.420
Okay, here's the next one.

59
00:03:37.780 --> 00:03:40.870
Write a factory function that, hey.

60
00:03:41.910 --> 00:03:46.424
Write a factory function that returns
two functions that implement an up/down

61
00:03:46.424 --> 00:03:47.731
counter.

62
00:03:47.731 --> 00:03:50.180
So counter f is our factory function.

63
00:03:51.620 --> 00:03:58.775
It returns an object and that object
has an inc method and a dec method.

64
00:03:58.775 --> 00:04:02.217
And inc will return one bigger
than the previous value and

65
00:04:02.217 --> 00:04:04.160
dec will return to one smaller.

66
00:04:09.521 --> 00:04:11.206
&gt;&gt; Speaker 2: Can I ask you a question?

67
00:04:11.206 --> 00:04:11.937
&gt;&gt; Douglas Crockford: Sure.

68
00:04:11.937 --> 00:04:16.490
&gt;&gt; Speaker 2: Let's say if
a function of 100 variables in it.

69
00:04:16.490 --> 00:04:21.390
If you reference one of them,
you hang on to all of them?

70
00:04:21.390 --> 00:04:24.580
&gt;&gt; Douglas Crockford: Yeah, they all live.

71
00:04:24.580 --> 00:04:27.440
So there's sometimes memory
leakage which results.

72
00:04:29.710 --> 00:04:34.241
So the way you avoid that is, if there's a
big data structure in there that you know

73
00:04:34.241 --> 00:04:38.327
you're not gonna need any more,
then at some place you wanna null it out.

74
00:04:42.479 --> 00:04:45.110
&gt;&gt; Douglas Crockford: Otherwise
everything survives.

75
00:04:45.110 --> 00:04:49.490
&gt;&gt; Speaker 2: Like a whole new physics
compared to like the Java in terms of its

76
00:04:49.490 --> 00:04:51.850
problems and settled with it's damages.

77
00:04:51.850 --> 00:04:56.700
&gt;&gt; Douglas Crockford: You can
kind of get this stuff with

78
00:04:56.700 --> 00:05:01.380
inner functions, or
I'm sorry inner classes.

79
00:05:01.380 --> 00:05:05.828
But they are so expressively weak,
compared to this,

80
00:05:05.828 --> 00:05:09.024
that you rarely see them used anymore.

81
00:05:19.153 --> 00:05:23.101
&gt;&gt; Speaker 2: I mean, I see that you
used the ++ operator in your definition.

82
00:05:23.101 --> 00:05:26.422
&gt;&gt; Douglas Crockford: [LAUGH]

83
00:05:43.706 --> 00:05:46.320
&gt;&gt; Douglas Crockford: Does anybody need

84
00:05:46.320 --> 00:05:48.090
more time?

85
00:05:48.090 --> 00:05:49.050
Okay, everybody ready?

86
00:05:50.060 --> 00:05:50.970
Okay, so here we go.

87
00:05:52.130 --> 00:05:56.425
Our counterf function takes a value and
returns an object

88
00:05:56.425 --> 00:06:01.630
containing two methods, an increment
method which adds 1 to value and

89
00:06:01.630 --> 00:06:06.840
returns it, and a decrement method that
subtracts 1 from value and returns it.

90
00:06:06.840 --> 00:06:08.380
So who got something like this?

91
00:06:09.970 --> 00:06:13.769
Great, anybody got anything
different that they think is right?

92
00:06:20.201 --> 00:06:22.230
&gt;&gt; Douglas Crockford: .Any comment or
question about this one?

93
00:06:23.730 --> 00:06:28.340
Okay, I think we'll do maybe one more and
then we'll take a break, okay?

94
00:06:29.710 --> 00:06:33.630
So make a revocable function
that takes a nice function, and

95
00:06:33.630 --> 00:06:38.480
returns a revoke function that denies
access to the nice function, and

96
00:06:38.480 --> 00:06:42.942
an invoke function that can invoke
the nice function until it is revoked.

97
00:06:42.942 --> 00:06:47.440
[LAUGH]
Okay, so

98
00:06:47.440 --> 00:06:49.630
it might be a little easier
to see from the code.

99
00:06:50.870 --> 00:06:53.540
So we're going to make
something called temp

100
00:06:53.540 --> 00:06:58.020
which will be the revocable
version of alert.

101
00:06:58.020 --> 00:07:03.221
Okay so we can call temp dot invoke and
it works until we call

102
00:07:03.221 --> 00:07:08.645
temp dot revoke and
after that Temp.invoke stops working.

103
00:07:11.036 --> 00:07:12.521
&gt;&gt; Douglas Crockford: Any
questions about that?

104
00:07:15.573 --> 00:07:18.901
&gt;&gt; Douglas Crockford: So it's similar to
once, except instead of happening once,

105
00:07:18.901 --> 00:07:21.973
it happens until we call
the function that makes it stop.

106
00:07:30.900 --> 00:07:32.632
&gt;&gt; Douglas Crockford: So
one way you could use this,

107
00:07:32.632 --> 00:07:36.380
you could pass the revoke
function to set time out.

108
00:07:36.380 --> 00:07:40.295
So if you wanted a function to work
until some time and then have it stop,

109
00:07:40.295 --> 00:07:41.612
this is a way to do that.

110
00:07:57.647 --> 00:08:01.430
&gt;&gt; Speaker 2: So how do you re-enable,
is that not part of this?

111
00:08:03.090 --> 00:08:05.090
&gt;&gt; Douglas Crockford: This
doesn't allow for that.

112
00:08:05.090 --> 00:08:08.794
You could have a reenable method
which would turn it back on but-

113
00:08:08.794 --> 00:08:09.996
&gt;&gt; Speaker 2: [COUGH]

114
00:08:09.996 --> 00:08:11.286
&gt;&gt; Douglas Crockford: We're not doing that

115
00:08:11.286 --> 00:08:12.006
this time.

116
00:08:14.788 --> 00:08:16.094
&gt;&gt; Douglas Crockford: Maybe for
extra credit.

117
00:08:24.743 --> 00:08:26.362
&gt;&gt; Douglas Crockford: Okay,
does anyone need more time?

118
00:08:31.587 --> 00:08:32.363
&gt;&gt; Douglas Crockford: Everybody ready?

119
00:08:32.363 --> 00:08:35.380
Okay, here we go.

120
00:08:35.380 --> 00:08:39.050
So we have revocable
takes a nice function and

121
00:08:39.050 --> 00:08:42.020
returns an object
containing two functions.

122
00:08:42.020 --> 00:08:42.909
One of them is invoke.

123
00:08:43.940 --> 00:08:46.920
Which will call the nice
function using apply.

124
00:08:46.920 --> 00:08:50.530
So it sends over all the disk bindings and
arguments.

125
00:08:50.530 --> 00:08:56.314
And there´s the revoke function which just
nulls nice out causing invoke to fail.

126
00:08:56.314 --> 00:09:00.566
Anybody getting anything like this?

127
00:09:00.566 --> 00:09:03.944
&gt;&gt; Douglas Crockford: Yeah?

128
00:09:03.944 --> 00:09:07.280
&gt;&gt; Speaker 2: I tried
doing that with alert.

129
00:09:07.280 --> 00:09:15.480
It was giving me an issue with apply and
I'm saying a legal operation.

130
00:09:15.480 --> 00:09:17.240
&gt;&gt; Speaker 3: Yeah I got the same thing.

131
00:09:17.240 --> 00:09:20.840
&gt;&gt; Speaker 2: So I had to use explicit
perameters in a case of a blur.

132
00:09:20.840 --> 00:09:23.010
It works with other functions.

133
00:09:23.010 --> 00:09:27.365
&gt;&gt; Speaker 3: Some of the browsers get mad
about calling a native plan a function

134
00:09:27.365 --> 00:09:29.594
from what I´ve seen in the past.

135
00:09:29.594 --> 00:09:31.056
&gt;&gt; Douglas Crockford: Was
that a Safari thing?

136
00:09:31.056 --> 00:09:31.966
&gt;&gt; Speaker 2: Chrome.

137
00:09:31.966 --> 00:09:33.727
&gt;&gt; Douglas Crockford: Chrome.

138
00:09:33.727 --> 00:09:35.322
They´re buggy.

139
00:09:35.322 --> 00:09:39.498
That's not true.

140
00:09:39.498 --> 00:09:44.598
One problem with the way the DOM API
is designed is not everything

141
00:09:44.598 --> 00:09:49.511
that looks like an object or
a function is actually an object or

142
00:09:49.511 --> 00:09:53.120
a function So
that's a problem in their API.

143
00:09:53.120 --> 00:09:55.560
I didn't know that but anybody else?

144
00:09:55.560 --> 00:09:58.817
&gt;&gt; Speaker 2: I have a question
&gt;&gt; Douglas Crockford: Yeah

145
00:09:58.817 --> 00:10:00.549
&gt;&gt; Speaker 2: If you want,

146
00:10:00.549 --> 00:10:05.438
go back to the other one for a second.

147
00:10:05.438 --> 00:10:09.505
If you made the function, or return the
invoke, would actually return a function,

148
00:10:09.505 --> 00:10:11.750
that would then get
called at the parameters.

149
00:10:11.750 --> 00:10:18.821
Would you put parentheses around
the () temp.invoke () and then (7)?

150
00:10:23.025 --> 00:10:27.806
&gt;&gt; Speaker 2: Does that,
I don't know if that makes sense.

151
00:10:27.806 --> 00:10:29.430
&gt;&gt; Douglas Crockford: Not yet.

152
00:10:29.430 --> 00:10:30.450
&gt;&gt; Speaker 2: [INAUDIBLE].

153
00:10:30.450 --> 00:10:34.840
&gt;&gt; Douglas Crockford: Okay,
all right so let's take a break.

154
00:10:34.840 --> 00:10:36.130
What do you say?

155
00:10:36.130 --> 00:10:38.845
And then we'll do some more of this, okay.

156
00:10:40.711 --> 00:10:45.360
&gt;&gt; Douglas Crockford: Okay it's now
time for the democratic process.

157
00:10:46.850 --> 00:10:48.530
We have two options here.

158
00:10:48.530 --> 00:10:50.030
We continue doing this stuff.

159
00:10:50.030 --> 00:10:54.890
I've got many hours [LAUGH] Of problems
left [LAUGH] Or we can go back

160
00:10:54.890 --> 00:10:58.628
to the thing where I just yap at you and
you don't have to work so hard.

161
00:10:58.628 --> 00:11:00.810
So,-
&gt;&gt; Speaker 2: [INAUDIBLE].

162
00:11:00.810 --> 00:11:03.012
&gt;&gt; Douglas Crockford: We have
to decide which way we wanna go.

163
00:11:03.012 --> 00:11:04.443
&gt;&gt; Speaker 2: What do we talk about?

164
00:11:04.443 --> 00:11:06.040
&gt;&gt; Douglas Crockford: I'm
gonna talk about monards.

165
00:11:06.040 --> 00:11:08.900
It's gonna be one of application
of fuctional programming.

166
00:11:08.900 --> 00:11:12.169
So it gonna take the stuff
you have been learning and

167
00:11:12.169 --> 00:11:14.460
push it in a whole other direction.

168
00:11:15.720 --> 00:11:17.070
So you like that?

169
00:11:17.070 --> 00:11:18.800
Who wants to keep doing the problems?

170
00:11:20.360 --> 00:11:22.590
Looks like the will of the people.

171
00:11:22.590 --> 00:11:25.080
All right so we'll move on.

