WEBVTT

1
00:00:00.302 --> 00:00:04.548
[MUSIC]

2
00:00:04.548 --> 00:00:08.805
&gt;&gt; Douglas Crockford: Okay, so
let's start to look at object patterns and

3
00:00:08.805 --> 00:00:10.071
inheritance.

4
00:00:10.071 --> 00:00:14.919
So JavaScript was confused in
its own creation about what

5
00:00:14.919 --> 00:00:17.043
kind of language it was.

6
00:00:17.043 --> 00:00:21.974
It's a prototypal language,but
it has syntax which is trying

7
00:00:21.974 --> 00:00:23.936
to look more classical.

8
00:00:23.936 --> 00:00:28.320
And so it's confused about its own
nature and confusion is bad, right, but

9
00:00:28.320 --> 00:00:30.460
that's what happened.

10
00:00:30.460 --> 00:00:34.540
So let's step through an example of how
the language was intended to be used.

11
00:00:35.650 --> 00:00:37.780
So we're gonna create a Gizmo.

12
00:00:37.780 --> 00:00:42.193
A gizmo is a simple object that has
an ID and has a toString method.

13
00:00:42.193 --> 00:00:45.159
A toString method will produce
the produce the word gizmo with the ID.

14
00:00:45.159 --> 00:00:49.390
Everybody see the gizmo.

15
00:00:49.390 --> 00:00:52.520
This is what actually happens.

16
00:00:52.520 --> 00:00:55.859
So there's the gizmo function.

17
00:00:55.859 --> 00:00:58.389
Functions in JavaScript are objects.

18
00:00:58.389 --> 00:01:02.111
Every function object has
a prototype property,

19
00:01:02.111 --> 00:01:07.520
which the prototype is another
object which contains a constructor.

20
00:01:07.520 --> 00:01:12.776
And by that assignment,
we created the two strain property and

21
00:01:12.776 --> 00:01:18.531
also the original primordial object
in JavaScript is also a function

22
00:01:18.531 --> 00:01:23.509
which has also has a prototype
property which points here.

23
00:01:23.509 --> 00:01:27.772
And we can wire up and
that's the new instance that we're making,

24
00:01:27.772 --> 00:01:30.829
we can wire up all
the constructor properties.

25
00:01:30.829 --> 00:01:38.302
So every constructor property points to
the function that is the constructor.

26
00:01:38.302 --> 00:01:43.206
Okay, so we have server loop going on
there and then we add the invisible

27
00:01:43.206 --> 00:01:48.139
prototype properties which are the things
that they all inherit from.

28
00:01:48.139 --> 00:01:52.378
So our new gizmo inherits
here from gizmo.prototype,

29
00:01:52.378 --> 00:01:56.085
which itself inherits
from object a prototype.

30
00:01:56.085 --> 00:02:02.869
Okay, so if I try to that from the new
gizmo, an ID, we find it right there.

31
00:02:02.869 --> 00:02:07.049
If we try to fetch from it a toString
method, it doesn't have one there.

32
00:02:07.049 --> 00:02:08.440
So it tries to go there.

33
00:02:08.440 --> 00:02:09.869
Do we find it?
Yes, we could.

34
00:02:09.869 --> 00:02:14.978
So our program receives it as though,
it contained it,

35
00:02:14.978 --> 00:02:18.469
but it actually inherited it, okay?

36
00:02:18.469 --> 00:02:22.500
So this is how JavaScript works,
but we haven't inherited much yet.

37
00:02:22.500 --> 00:02:29.761
So let's look at making another object and
have it inherit from the gizmo.

38
00:02:29.761 --> 00:02:34.752
And the way Brendan intended for that was
you replace the original prototype object

39
00:02:34.752 --> 00:02:37.610
and then we can inherit
the other object stuff.

40
00:02:37.610 --> 00:02:39.370
Now, this gets really weird.

41
00:02:39.370 --> 00:02:41.510
So I'm gonna make a hoozit.

42
00:02:41.510 --> 00:02:46.046
Okay, and a hoozit is just like a gizmo,
except it will inherit or

43
00:02:46.046 --> 00:02:51.080
it inherits all the gizmo stuff,
but it also has a test method.

44
00:02:51.080 --> 00:02:56.129
Otherwise, it's just the same and
the test compares the id for equality.

45
00:02:56.129 --> 00:02:58.815
So we'll take that.

46
00:02:58.815 --> 00:03:01.282
And now,
look at it in terms of these structures.

47
00:03:01.282 --> 00:03:07.619
So filling in the prototype linkage,
the inheritance chain.

48
00:03:07.619 --> 00:03:14.610
Okay, so if we want to go to a hoozit ID,
we'll get it from the hoozit instance.

49
00:03:14.610 --> 00:03:20.963
If we want its test method, we'll
inherit it here from hoozit.prototype.

50
00:03:20.963 --> 00:03:27.449
And if we want its toString method,
we'll inherit from gizmo.prototype.

51
00:03:27.449 --> 00:03:30.180
And so
that's inheritance works in JavaScript.

52
00:03:33.840 --> 00:03:38.841
So looking at this,
there's not a lot to like here.

53
00:03:38.841 --> 00:03:42.707
One thing that upset the Java
programmers pretty quickly was

54
00:03:42.707 --> 00:03:45.299
you got this crap hanging down outside.

55
00:03:45.299 --> 00:03:45.970
What's that?

56
00:03:45.970 --> 00:03:50.490
You want the class to be all contained and
neat and stuff.

57
00:03:50.490 --> 00:03:51.870
This stuff's laying out there.

58
00:03:51.870 --> 00:03:53.385
And now, this is totally weird.

59
00:03:53.385 --> 00:03:57.850
We replaced hooozit.prototypes with
an instance of another object that

60
00:03:57.850 --> 00:04:00.231
doesn't look anything like extends.

61
00:04:00.231 --> 00:04:02.750
That's just holly weird.

62
00:04:02.750 --> 00:04:04.470
It also creates some other problems.

63
00:04:04.470 --> 00:04:11.120
For example, if I ask my new instance
over hoozit, who is your destructor?

64
00:04:11.120 --> 00:04:13.062
Cuz maybe that's important to you.

65
00:04:13.062 --> 00:04:14.940
Well, that doesn't have a constructor.

66
00:04:14.940 --> 00:04:16.600
That doesn't have a constructor.

67
00:04:16.600 --> 00:04:19.050
We go up here and it says, it's a gizmo.

68
00:04:19.050 --> 00:04:21.379
It doesn't even know it's a hoozit.

69
00:04:21.379 --> 00:04:24.280
Now it's possible to repair that,
but that's more work on your part.

70
00:04:24.280 --> 00:04:27.234
The system is not looking out for
you here.

71
00:04:27.234 --> 00:04:32.960
That's problematic.

72
00:04:32.960 --> 00:04:35.772
So we could put some sugar on this.

73
00:04:35.772 --> 00:04:39.343
One of the nice things about
JavaScript is that it's so dynamic.

74
00:04:39.343 --> 00:04:43.300
You can kind of build
the language up yourself.

75
00:04:43.300 --> 00:04:47.908
So I could add a new constructor
function which would take

76
00:04:47.908 --> 00:04:52.612
an object that is gonna be
the thing that we inherit from and

77
00:04:52.612 --> 00:04:58.084
would take a constructor function and
would take a set of methods and

78
00:04:58.084 --> 00:05:03.280
do all the stuff that we saw before,
except it does more neatly.

79
00:05:03.280 --> 00:05:06.313
And then when I want to inherit
from hoozit, I just say, okay,

80
00:05:06.313 --> 00:05:09.360
you can extend to gizmo and
here is your constructor function.

81
00:05:09.360 --> 00:05:14.960
So now it's at least neater,
everything is contained.

82
00:05:14.960 --> 00:05:16.850
Is it better?

83
00:05:16.850 --> 00:05:20.820
I can testify that it's better,
but it's at least neater.

84
00:05:20.820 --> 00:05:22.360
So this is it.

85
00:05:22.360 --> 00:05:26.494
This is the JavaScript function
that would implement that.

86
00:05:26.494 --> 00:05:30.328
So and in fact,
a lot of people have done stuff like this.

87
00:05:30.328 --> 00:05:33.972
Virtually, every AJAX framework has
its own sense of how you should be

88
00:05:33.972 --> 00:05:35.220
building the objects.

89
00:05:35.220 --> 00:05:39.279
Everybody is dissatisfied with
the way that the raw language does it.

90
00:05:39.279 --> 00:05:42.080
And so everybody tries to put something
on top of it to make it neater.

91
00:05:43.160 --> 00:05:46.070
I'm not sure this is the right way to
think about it, but it's available.

