WEBVTT

1
00:00:00.533 --> 00:00:04.798
[MUSIC]

2
00:00:04.798 --> 00:00:05.590
&gt;&gt; Douglas Crockford: Well, that is it.

3
00:00:05.590 --> 00:00:09.690
So I think we are at the end of the day,
so how is everybody feeling?

4
00:00:09.690 --> 00:00:12.804
We should do bunch of questions
before we all go home.

5
00:00:14.850 --> 00:00:15.526
&gt;&gt; Douglas Crockford: Anybody?

6
00:00:19.090 --> 00:00:21.994
&gt;&gt; Douglas Crockford: Or
we can do more problems?

7
00:00:21.994 --> 00:00:24.910
&gt;&gt; Speaker 2: What text editor do you
use in case someone wants to build your

8
00:00:24.910 --> 00:00:25.662
context code?

9
00:00:25.662 --> 00:00:27.660
&gt;&gt; Douglas Crockford: Yeah,
what text editor do I use?

10
00:00:27.660 --> 00:00:34.030
I use geany, G-E-A-N-Y,
which is a really a basic, simple editor.

11
00:00:35.510 --> 00:00:38.490
Does code folding, but
it doesn't do it right.

12
00:00:38.490 --> 00:00:41.880
And it does coloring, but
it doesn't do that right.

13
00:00:41.880 --> 00:00:44.778
But it's a simple editor,
that's all I need.

14
00:00:44.778 --> 00:00:52.216
I don't necessarily need that one fixed,
I just need one that works right.

15
00:00:52.216 --> 00:00:53.071
So, yeah.

16
00:00:53.071 --> 00:00:57.662
&gt;&gt; Speaker 3: You said the triple
documentation was, I think,

17
00:00:57.662 --> 00:00:59.450
the second most?

18
00:00:59.450 --> 00:01:00.820
&gt;&gt; Douglas Crockford: My
second most favorite, yeah.

19
00:01:00.820 --> 00:01:01.880
&gt;&gt; Speaker 3: Yeah, what's your first?

20
00:01:03.910 --> 00:01:05.180
&gt;&gt; Douglas Crockford: Proper tail calls.

21
00:01:06.690 --> 00:01:08.120
What the hell is that?

22
00:01:08.120 --> 00:01:13.483
So one of the things that they
discovered in scheme was that,

23
00:01:13.483 --> 00:01:17.073
actually this was known for a long time.

24
00:01:17.073 --> 00:01:21.293
But scheme took the idea and said this has
to be standard equipment in the language,

25
00:01:21.293 --> 00:01:23.370
this is not an option.

26
00:01:23.370 --> 00:01:26.610
So if you have a subroutine call,

27
00:01:26.610 --> 00:01:31.290
like a JSR in some machines,
followed immediately by a return,

28
00:01:32.870 --> 00:01:38.400
you can replace that with a jump and
that has a couple of results.

29
00:01:38.400 --> 00:01:42.290
One is that the program goes faster,
because you're not

30
00:01:42.290 --> 00:01:44.920
putting something on the stack and
taking something off the stack and

31
00:01:44.920 --> 00:01:47.610
having a couple of jumps
which CPUs don't like to do.

32
00:01:49.190 --> 00:01:52.580
You just go in there, and so
that's a simple optimization.

33
00:01:52.580 --> 00:01:55.840
They found that the same thing
applies to functional programming.

34
00:01:55.840 --> 00:01:59.820
So if the last thing a function
does is return the result

35
00:01:59.820 --> 00:02:02.910
of calling another function,
they can replace that with a jump.

36
00:02:04.340 --> 00:02:08.370
So that has the obvious
performance benefit, but

37
00:02:08.370 --> 00:02:11.770
it turns out it enables
new styles of programming.

38
00:02:11.770 --> 00:02:15.300
For one thing, we can't do deep
recursion in JavaScript today,

39
00:02:15.300 --> 00:02:19.970
because the browsers all have
fairly shallow stack limits.

40
00:02:19.970 --> 00:02:25.760
But with this tail recursion thing,
because those calls turn into jumps,

41
00:02:25.760 --> 00:02:27.900
there's no stack cost, right?

42
00:02:27.900 --> 00:02:31.510
So we can go as deep as we want
without blowing the stack.

43
00:02:31.510 --> 00:02:38.080
So you can literally change loops into
functions with no performance penalty.

44
00:02:38.080 --> 00:02:39.420
That's pretty neat.

45
00:02:39.420 --> 00:02:43.050
But even neater is there's another style
of programming called continuation

46
00:02:43.050 --> 00:02:44.480
passing style.

47
00:02:44.480 --> 00:02:48.540
Which I would have shown you at
the very end of the problems today, but

48
00:02:48.540 --> 00:02:51.200
I doubt that anyone would have
been awake at that point.

49
00:02:52.670 --> 00:02:57.840
And in continuation passing
style functions never return,

50
00:02:57.840 --> 00:03:01.900
instead you pass to each function
the parameters that it needs plus

51
00:03:01.900 --> 00:03:05.830
one more which is the function
that it should send the result to.

52
00:03:08.220 --> 00:03:11.628
Okay, it's sort of like a call back
except it's calling forward and

53
00:03:11.628 --> 00:03:13.459
it will probably do a similar thing.

54
00:03:13.459 --> 00:03:18.003
And so you have this big stream of
computation that is always going forward,

55
00:03:18.003 --> 00:03:19.440
nothing ever returns.

56
00:03:19.440 --> 00:03:23.410
Okay, it's all going like that,
and it's wonderful and amazing.

57
00:03:23.410 --> 00:03:25.160
And we can't do it in JavaScript today,

58
00:03:25.160 --> 00:03:28.570
because eventually,
you run out of stack, right?

59
00:03:28.570 --> 00:03:34.540
Since nothing ever returns, you consume
all the memory, and everything dies.

60
00:03:34.540 --> 00:03:38.660
But in continuation passing style,
the way you write these things is,

61
00:03:38.660 --> 00:03:43.550
return function thing
going forward forever.

62
00:03:43.550 --> 00:03:47.991
And the compiler knows okay, we're
doing that and the code just gets those

63
00:03:47.991 --> 00:03:52.572
streamlined and the garbage collector
knows how to get rid of all its stuff and

64
00:03:52.572 --> 00:03:54.989
all stays clean and fast and wonderful.

65
00:03:54.989 --> 00:03:58.330
And we can do things which are even more
amazing than what we did this afternoon.

66
00:04:01.070 --> 00:04:03.130
So I'm looking forward to that.

67
00:04:03.130 --> 00:04:04.780
One of the benefits of that is that

68
00:04:06.010 --> 00:04:09.260
JavaScript has now become
a compilation target, right?

69
00:04:09.260 --> 00:04:13.490
We used to think that the JavaVM was gonna
be the virtual machine of the Internet,

70
00:04:13.490 --> 00:04:15.460
turns out it's JavaScript.

71
00:04:15.460 --> 00:04:19.590
So people are now writing compilers

72
00:04:19.590 --> 00:04:24.380
which generate JavaScript code instead
of writing bicode or anything else.

73
00:04:24.380 --> 00:04:29.730
Google is translating Java into
JavaScript, so it can run everywhere.

74
00:04:31.270 --> 00:04:34.470
And there are whole new
languages being invented,

75
00:04:34.470 --> 00:04:38.128
specifically to be executed by JavaScript.

76
00:04:38.128 --> 00:04:39.933
So if you're a language designer,

77
00:04:39.933 --> 00:04:42.648
you don't have to create
a virtual machine anymore.

78
00:04:42.648 --> 00:04:43.827
You don't have to write a compiler,

79
00:04:43.827 --> 00:04:45.700
you just have to write parser
that generates JavaScript.

80
00:04:46.750 --> 00:04:48.590
And a lot of people are doing that, so

81
00:04:48.590 --> 00:04:52.470
there is pressure on JavaScript to
become a better compilation target.

82
00:04:52.470 --> 00:04:56.820
If you're trying to create control
structures that don't map exactly onto

83
00:04:56.820 --> 00:05:01.760
the silly set that JavaScript has,
your code gets really bad, right?

84
00:05:03.660 --> 00:05:08.050
And so you would like as a language
designer to have a goto in the language,

85
00:05:08.050 --> 00:05:11.890
because you want to be able
to synthesize your own stuff,

86
00:05:11.890 --> 00:05:14.090
treating JavaScript like
a low level machine language.

87
00:05:15.310 --> 00:05:21.129
But we know that that would be a disaster
if we had goto directly to the language.

88
00:05:21.129 --> 00:05:24.369
Duxtler wrote back in the 60s, was it?

89
00:05:24.369 --> 00:05:27.680
Yeah, I think it was in the 60s
that goto is considered harmful.

90
00:05:27.680 --> 00:05:31.386
It took us 20 years to get rid of goto,
and in that time we had

91
00:05:31.386 --> 00:05:35.407
endless stupid debates about should
we get rid of the goto or not?

92
00:05:35.407 --> 00:05:39.330
And particularly, most of the talking
come from the old guys saying,

93
00:05:39.330 --> 00:05:44.250
you can't take it away from us without
goto, we can't write efficient programs.

94
00:05:44.250 --> 00:05:45.748
Why are you doing this to us?

95
00:05:45.748 --> 00:05:46.710
We need our tools.

96
00:05:48.910 --> 00:05:52.046
So I think the reason it took
20 years was we had to wait for

97
00:05:52.046 --> 00:05:53.650
all those guys retire or die.

98
00:05:53.650 --> 00:05:55.894
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Douglas Crockford: And

99
00:05:55.894 --> 00:05:59.514
once they were gone it was like,
okay, can we get rid of it now?

100
00:05:59.514 --> 00:06:03.210
And say yeah, okay, good, and we got
rid of it, and we don't miss it, right?

101
00:06:03.210 --> 00:06:06.122
But I know for a fact if we put
goto back into JavaScript, and

102
00:06:06.122 --> 00:06:08.285
we can because it's still a reserved word.

103
00:06:08.285 --> 00:06:13.263
So we could put it in the language,
some idiot web developers gonna blog,

104
00:06:13.263 --> 00:06:18.020
wow, did you know can make your
programs go super fast if you use goto?

105
00:06:18.020 --> 00:06:20.417
And then certainly we're gonna
have to wait for them to die,

106
00:06:20.417 --> 00:06:21.596
before we get rid of it again.

107
00:06:21.596 --> 00:06:22.580
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Douglas Crockford: So

108
00:06:22.580 --> 00:06:25.990
we can't put anything into
the language for one class of people,

109
00:06:25.990 --> 00:06:27.660
without exposing it to everybody.

110
00:06:27.660 --> 00:06:31.390
And we know that would cause harm,
so we're not gonna do that.

111
00:06:31.390 --> 00:06:37.180
But proper tail calls allows
us to have goto with this

112
00:06:37.180 --> 00:06:41.160
syntactic form which is not dangerous,
which is actually extremely beneficial.

113
00:06:41.160 --> 00:06:46.820
So compiler writers would
probably be the first to benefit

114
00:06:46.820 --> 00:06:48.570
from the continuation passing style,

115
00:06:48.570 --> 00:06:52.410
cuz that turns out to be a brilliant
way to implement programming languages.

116
00:06:52.410 --> 00:06:59.115
So that's gonna be my favorite-most
feature, anybody else?

117
00:07:02.444 --> 00:07:03.149
&gt;&gt; Speaker 5: I have one question.

118
00:07:03.149 --> 00:07:04.150
&gt;&gt; Douglas Crockford: Yeah.

119
00:07:04.150 --> 00:07:10.168
&gt;&gt; Speaker 5: You mentioned that if
the class system used by Java, C#, etc.

120
00:07:10.168 --> 00:07:14.998
And then would JavaScript, do you have
the prototyping that you preferred and

121
00:07:14.998 --> 00:07:18.085
thought that the prototyping
was more powerful?

122
00:07:18.085 --> 00:07:19.533
&gt;&gt; Douglas Crockford: Mm-hm.
&gt;&gt; Speaker 5: Could you reflect

123
00:07:19.533 --> 00:07:22.585
a little bit on what
I'm talking about that?

124
00:07:22.585 --> 00:07:25.525
&gt;&gt; Douglas Crockford: Yeah, so I believe
that, so a little bit of history.

125
00:07:25.525 --> 00:07:32.077
So Randy Smith was a researcher,
I guess he was at Xerox park at that time.

126
00:07:32.077 --> 00:07:35.680
I met him Atari lab earlier.

127
00:07:35.680 --> 00:07:39.110
And he was working on
a system called Morphix.

128
00:07:40.370 --> 00:07:45.990
Morphix were objects which had
stated behavior like other objects,

129
00:07:45.990 --> 00:07:47.580
but also a visual presentation.

130
00:07:49.090 --> 00:07:53.992
And he had this wonderful little demo
set up where he could take objects which

131
00:07:53.992 --> 00:07:55.300
were on the screen.

132
00:07:55.300 --> 00:07:59.489
And open them up and reprogram them
dynamically as the thing was running, and

133
00:07:59.489 --> 00:08:01.740
all this amazing behavior would occur.

134
00:08:01.740 --> 00:08:06.140
It was really great, and
he showed this to David Unger,

135
00:08:06.140 --> 00:08:10.788
who earlier have been working on trying
to make Smalltalk go really fast.

136
00:08:10.788 --> 00:08:17.684
He was designed a risk processor
specifically to run Smalltalk.

137
00:08:17.684 --> 00:08:22.294
And he was amazed at the stuff Randy
was doing, so we got to do that, so

138
00:08:22.294 --> 00:08:24.212
how can we make this better?

139
00:08:24.212 --> 00:08:25.731
And so they started collaborating and

140
00:08:25.731 --> 00:08:28.640
the thing that they came up
with was the self language.

141
00:08:28.640 --> 00:08:32.871
So it turned out the morphics were much
easier to compose if there were no

142
00:08:32.871 --> 00:08:36.891
classes, if you could just assign
functions directly to the things

143
00:08:36.891 --> 00:08:39.451
everything was so much easier and faster.

144
00:08:39.451 --> 00:08:41.858
And then Unger spent a lot
of time looking at, okay,

145
00:08:41.858 --> 00:08:45.840
how do we take the implementations of
that, and make them go really fast?

146
00:08:45.840 --> 00:08:49.390
So a lot of what we know now
about how we make things go fast,

147
00:08:49.390 --> 00:08:51.110
came from the self project, for

148
00:08:51.110 --> 00:08:56.730
example how to make virtual machines
like the Java virtual machine go fast.

149
00:08:56.730 --> 00:09:00.850
That came out of self,
generation of scavenging

150
00:09:00.850 --> 00:09:04.170
in order to make garbage collection go
really fast, that came out of self.

151
00:09:06.550 --> 00:09:12.492
And but the prototype idea nobody
paid much attention to it except for

152
00:09:12.492 --> 00:09:15.981
Branden, he thought all that's cool.

153
00:09:15.981 --> 00:09:20.950
I'll throw them in large script and
see what happens, and it's brilliant.

154
00:09:20.950 --> 00:09:26.030
So a lot of people work on it as being a
step backward, that JavaScript isn't even

155
00:09:26.030 --> 00:09:30.760
object oriented, it's object based or some
or worse or some silly thing like that.

156
00:09:30.760 --> 00:09:34.560
It's actually the next evolutionary
step in object oriented programming.

157
00:09:34.560 --> 00:09:39.780
It's sort of taking the thing
that simular proposed and

158
00:09:39.780 --> 00:09:44.130
saying no, they weren't right about
that one and sort of going from that,

159
00:09:44.130 --> 00:09:49.593
taking the core of the good ideas in
a more expressive way and going forward.

160
00:09:49.593 --> 00:09:54.118
And that JavaScript has, it's brilliant.

161
00:09:54.118 --> 00:10:02.000
And it is so powerful that you
might never find out about it.

162
00:10:02.000 --> 00:10:05.560
Because it's so powerful,
you can use the other paradigms.

163
00:10:05.560 --> 00:10:09.370
You can do the classical style and
it works pretty well.

164
00:10:10.540 --> 00:10:12.100
But if you stick with that,

165
00:10:12.100 --> 00:10:15.420
you'll never make the breakthrough
into what it can really do.

166
00:10:16.520 --> 00:10:21.492
So my prediction is that future
languages will actually look

167
00:10:21.492 --> 00:10:25.491
a lot like JavaScript,
and a lot less like Java.

168
00:10:25.491 --> 00:10:28.425
Although it's a daring
prediction to make right now,

169
00:10:28.425 --> 00:10:33.830
because there is tremendous pressure still
on making JavaScript look more like Java.

170
00:10:33.830 --> 00:10:37.340
So in the short term that might
not turn out to be true, but

171
00:10:37.340 --> 00:10:39.178
I think the long term it does.

172
00:10:39.178 --> 00:10:40.362
Yeah.
&gt;&gt; Speaker 6: Along that same thing,

173
00:10:40.362 --> 00:10:42.690
what are your thoughts on TypeScripts?

174
00:10:42.690 --> 00:10:44.100
&gt;&gt; Douglas Crockford: What
do I think about TypeScript?

175
00:10:44.100 --> 00:10:49.210
So TypeScript is a tool that
was developed in Microsoft in

176
00:10:49.210 --> 00:10:53.360
order to make Visual Studio work
more effectively with JavaScript.

177
00:10:53.360 --> 00:10:57.908
One of the difficulties with
JavaScript is, because it's so

178
00:10:57.908 --> 00:11:02.463
dynamic things like code
completion don't work well for it.

179
00:11:02.463 --> 00:11:06.973
Because you say variable dot,
you don't have a short list of methods

180
00:11:06.973 --> 00:11:10.490
that come off of that,
because it could be anything.

181
00:11:11.710 --> 00:11:16.047
So about the best you can do is take
the list of all known methods and say,

182
00:11:16.047 --> 00:11:17.870
do you want one of those?

183
00:11:17.870 --> 00:11:21.045
And so they were looking
at doing something better.

184
00:11:21.045 --> 00:11:26.327
So they have another language which
is now being called TypeScript,

185
00:11:26.327 --> 00:11:29.800
which compiles into JavaScript.

186
00:11:29.800 --> 00:11:33.856
Which adds typing to JavaScript, so
you can annotate your variables and say,

187
00:11:33.856 --> 00:11:36.138
this one is a number and
this one is a string.

188
00:11:36.138 --> 00:11:40.760
And this one is a function that takes a
method that has this signature, and so on.

189
00:11:42.340 --> 00:11:45.530
And it takes all of that and
then runs it through a compiler,

190
00:11:45.530 --> 00:11:48.130
and generates very nice JavaScript code.

191
00:11:49.440 --> 00:11:54.600
There are a lot of language processors
that transpile into JavaScript,

192
00:11:54.600 --> 00:11:56.120
it's probably the nicest.

193
00:11:56.120 --> 00:12:00.010
Most of them generate code,
which is just horrible and awful.

194
00:12:00.010 --> 00:12:05.750
And TypeScript went to a lot of trouble to
make code which is actually pretty good.

195
00:12:05.750 --> 00:12:11.909
So for my money, it is the best of all
of the JavaScript frontends out there.

196
00:12:11.909 --> 00:12:16.260
But I'm not gonna use it for
a couple reasons.

197
00:12:16.260 --> 00:12:19.480
One is,
it doesn't solve the problem I have.

198
00:12:19.480 --> 00:12:23.630
I don't need autocomplete,
I can type my own programs fine, and

199
00:12:23.630 --> 00:12:28.000
so I don't need that capability.

200
00:12:28.000 --> 00:12:30.419
I'm not willing to pay
the cost in order to get it.

201
00:12:30.419 --> 00:12:35.940
And people who are used to Java and other

202
00:12:35.940 --> 00:12:39.790
strongly typed languages are confused
by that, cuz they say there is no cost.

203
00:12:41.440 --> 00:12:45.865
But there is, and so when I started with

204
00:12:45.865 --> 00:12:50.840
JavaScript I was alarmed at how
flimsy the language seem to be.

205
00:12:50.840 --> 00:12:51.850
And where are my types?

206
00:12:51.850 --> 00:12:54.640
How am I gonna know that
everything is working?

207
00:12:54.640 --> 00:12:58.970
And my experience with the language
was that, also the theory with

208
00:12:58.970 --> 00:13:03.990
strong typing is the type system
can find all sorts of errors early.

209
00:13:03.990 --> 00:13:06.610
And the earlier you can find an error,
the less its gonna cost.

210
00:13:06.610 --> 00:13:07.200
And that's good,

211
00:13:07.200 --> 00:13:10.809
we want to have early detection of
errors and that's absolutely true.

212
00:13:11.890 --> 00:13:14.710
But what I found working
with JavaScript was,

213
00:13:16.270 --> 00:13:20.570
having a type system doesn't
relieve you of the need to test.

214
00:13:20.570 --> 00:13:23.707
Cuz the class of potential errors is much,
much,

215
00:13:23.707 --> 00:13:28.277
much bigger than the class of errors
that are detected by type checking.

216
00:13:28.277 --> 00:13:32.150
All right, so you still have to write all
the tests, and you still have to test.

217
00:13:32.150 --> 00:13:37.300
And I found the amount of testing I
was doing in JavaScript was comparable

218
00:13:37.300 --> 00:13:41.872
to what I had done in Java, so
I wasn't seeing much of a benefit.

219
00:13:41.872 --> 00:13:46.138
On the other side, I found that not having
to deal with types was a huge relief,

220
00:13:46.138 --> 00:13:49.305
cuz it meant I was doing a lot
less work in the programming,

221
00:13:49.305 --> 00:13:53.870
I was doing about the same amount of work
in testing, that looked like a wind to me.

222
00:13:53.870 --> 00:13:54.650
And ultimately,

223
00:13:54.650 --> 00:13:58.270
my analysis was that the type checking
just wasn't paying for itself.

224
00:13:59.270 --> 00:14:02.860
That the freedom of being able
to express stuff the way I want.

225
00:14:03.990 --> 00:14:08.060
And also any type system in
which you ever have to cast, and

226
00:14:08.060 --> 00:14:11.269
my opinion that was not a type system,
it's just an annoyance.

227
00:14:12.920 --> 00:14:15.720
Anytime you have to break the system
in order to accomplish something

228
00:14:15.720 --> 00:14:19.790
useful means the type
system is not working.

229
00:14:19.790 --> 00:14:23.450
So I reluctantly eventually

230
00:14:23.450 --> 00:14:26.190
got used to the idea that
JavaScript actually got it right.

231
00:14:26.190 --> 00:14:29.046
This is something that the Lisp
guys have known all along,

232
00:14:29.046 --> 00:14:31.390
at least they had never
had strong typing in it.

233
00:14:31.390 --> 00:14:36.330
And it always worked great, and they do
some of the most complex programs ever

234
00:14:36.330 --> 00:14:40.970
written and have not been burdened by
the absence of a type system at all.

235
00:14:42.000 --> 00:14:44.793
So everybody has a different
opinion on this, and

236
00:14:44.793 --> 00:14:48.594
most of the opinions are not based
on any kind of data or experience.

237
00:14:48.594 --> 00:14:52.131
Most opinions are based on having
programmed on one side but

238
00:14:52.131 --> 00:14:53.200
not on the other.

239
00:14:54.630 --> 00:14:56.570
I've been on both sides,
and I have to tell you,

240
00:14:56.570 --> 00:14:58.930
I was surprised to find that I
think JavaScript got it right.

241
00:15:00.280 --> 00:15:04.171
And so for that reason,
TypeScript doesn't offer much for me,

242
00:15:04.171 --> 00:15:06.200
it provides a few conveniences.

243
00:15:06.200 --> 00:15:09.789
And again, of the things of that class,
it is by far, the best.

244
00:15:11.140 --> 00:15:16.320
But if I use TypeScript I can't use
JSLint anymore, cuz JSLint doesn't

245
00:15:16.320 --> 00:15:21.480
understand that language and JSLint
buys me a lot more than TypeScript does.

246
00:15:21.480 --> 00:15:23.318
So I'm sticking with it.

247
00:15:26.637 --> 00:15:27.790
&gt;&gt; Douglas Crockford: Okay, one more?

248
00:15:27.790 --> 00:15:28.630
Any one more?

249
00:15:28.630 --> 00:15:29.130
Anybody?

250
00:15:31.090 --> 00:15:33.010
Someone doesn't ask a question
you're all gonna have to go home.

251
00:15:34.780 --> 00:15:35.540
&gt;&gt; Speaker 7: Did you have-
&gt;&gt; Douglas Crockford: Yeah.

252
00:15:35.540 --> 00:15:37.420
&gt;&gt; Speaker 7: More information on Ajax and

253
00:15:37.420 --> 00:15:40.010
DOM manipulation that
you're gonna talk about?

254
00:15:40.010 --> 00:15:41.950
&gt;&gt; Douglas Crockford: I
was gonna do one more, but

255
00:15:41.950 --> 00:15:45.310
I think we're all pretty
burnt at this point.

256
00:15:45.310 --> 00:15:49.213
So you guys will get the slide and
that talk is online somewhere, so

257
00:15:49.213 --> 00:15:52.013
we'll probably be able to
give you a link to it.

258
00:15:54.916 --> 00:15:56.295
&gt;&gt; Douglas Crockford: Okay,
go home everybody.

259
00:15:56.295 --> 00:16:03.477
&gt;&gt; Speaker 8: [APPLAUSE]

