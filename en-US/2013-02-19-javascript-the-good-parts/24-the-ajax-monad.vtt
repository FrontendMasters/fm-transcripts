WEBVTT

1
00:00:00.000 --> 00:00:04.643
[MUSIC]

2
00:00:04.643 --> 00:00:08.306
&gt;&gt; Douglas Crockford: The AJAX MONAD.

3
00:00:08.306 --> 00:00:13.350
So here's a snip from an AJAX
library I wrote in 2001.

4
00:00:13.350 --> 00:00:15.429
This was my third AJAX library.

5
00:00:15.429 --> 00:00:17.301
The first one was in 2000.

6
00:00:17.301 --> 00:00:22.225
It was intended to attempt to
bridge The horrible difference

7
00:00:22.225 --> 00:00:25.709
between Netscape 4 and IE 5 was just bad.

8
00:00:25.709 --> 00:00:29.894
After writing that one, I looked at how we
used it and some of the common patterns

9
00:00:29.894 --> 00:00:33.550
and looked for how could I factor
those out to make it nicer.

10
00:00:33.550 --> 00:00:37.039
This was the second attempt at doing that.

11
00:00:37.039 --> 00:00:42.068
And so I've got this Interform constructor
that will make a text node and

12
00:00:42.068 --> 00:00:47.434
I can it where to put it on the screen,
and how big it is, and all of this stuff.

13
00:00:47.434 --> 00:00:51.774
And I just keep cascading these
methods on it and it works,

14
00:00:51.774 --> 00:00:55.495
even adding handling to it and
everything else and

15
00:00:55.495 --> 00:00:59.760
this kind of pattern is
virtually in every AJAX library.

16
00:00:59.760 --> 00:01:02.340
Everybody's doing it.

17
00:01:02.340 --> 00:01:05.470
JavaScript is really good at it and
it makes programming easier.

18
00:01:05.470 --> 00:01:08.929
It's huge and
it turns out it was always MONADs.

19
00:01:08.929 --> 00:01:13.699
This is a library wrote in 2007 for
the ADsafe project.

20
00:01:13.699 --> 00:01:18.267
The idea with ADsafe was we wanted to
allow third party code to run on web page,

21
00:01:18.267 --> 00:01:21.280
but we didn't want it
to get out of control.

22
00:01:21.280 --> 00:01:24.300
So we wanted it to be able
to manipulate the DOM, but

23
00:01:24.300 --> 00:01:27.580
we couldn't let it get direct
access to any DOM node.

24
00:01:27.580 --> 00:01:30.874
Because you can trace any DOM node to
the root and then to the network, and

25
00:01:30.874 --> 00:01:32.119
then everything's lost.

26
00:01:32.119 --> 00:01:36.739
So it had that DOM query thing
which would allow you to

27
00:01:36.739 --> 00:01:41.271
query DOM things, but
it wouldn't return a node.

28
00:01:41.271 --> 00:01:44.405
It would return a MONAD,
which wrapped that mode and

29
00:01:44.405 --> 00:01:49.107
that MONAD came with lots of methods which
allowed you to manipulate it without

30
00:01:49.107 --> 00:01:51.690
actually getting at the dangerous stuff.

31
00:01:51.690 --> 00:01:56.760
So MONADs have a nice security policy,
as well.

32
00:01:56.760 --> 00:02:01.620
So in order to fully AJAXify this,
we want to go from

33
00:02:01.620 --> 00:02:07.399
the original form which was
monad.bind to monad.method.

34
00:02:07.399 --> 00:02:11.260
Because we don't want people
to have to type bind and

35
00:02:11.260 --> 00:02:16.189
supply functions in order to do
what is normally just a name thing.

36
00:02:16.189 --> 00:02:21.103
And while we're doing that, we should
also allow the method to have lots of

37
00:02:21.103 --> 00:02:25.640
arguments, because who knows what
we want to do with it eventually.

38
00:02:25.640 --> 00:02:29.154
And so we'll have bind take
a second optional parameters,

39
00:02:29.154 --> 00:02:31.060
which is an array of arguments.

40
00:02:32.440 --> 00:02:35.050
These things could be
completely equivalent.

41
00:02:35.050 --> 00:02:38.519
This is just the nicer notation.

42
00:02:38.519 --> 00:02:41.779
So I'm going to extend my macroid.

43
00:02:41.779 --> 00:02:43.110
I'm gonna make two changes.

44
00:02:43.110 --> 00:02:48.612
One is I'm going to create a prototype
object which will be associated

45
00:02:48.612 --> 00:02:53.555
with the unit function, so
that all of the objects that the unit

46
00:02:53.555 --> 00:02:58.312
function makes will be inheriting
from that prototype and so

47
00:02:58.312 --> 00:03:03.279
when I make the objects that's
where they get their material.

48
00:03:05.769 --> 00:03:09.768
&gt;&gt; Douglas Crockford: Then I will modify
my bind method to take that option

49
00:03:09.768 --> 00:03:12.170
array of parameters.

50
00:03:12.170 --> 00:03:17.194
And again, because arguments
are not arrays in a silly language,

51
00:03:17.194 --> 00:03:21.963
you get crap like that which is
just horrible and inexcusable.

52
00:03:21.963 --> 00:03:25.503
But fortunately in the next edition,
we'll get the dot, dot, dot,

53
00:03:25.503 --> 00:03:27.549
operator and then it just becomes dice.

54
00:03:27.549 --> 00:03:31.010
So I can just say, okay,
I've got that array of arguments.

55
00:03:31.010 --> 00:03:32.461
Good, spread it out.

56
00:03:32.461 --> 00:03:33.499
That's done.

57
00:03:33.499 --> 00:03:34.458
So that's really easy.

58
00:03:34.458 --> 00:03:39.460
So I've now got any number of parameters
on the methods that bind is making.

59
00:03:43.389 --> 00:03:46.254
&gt;&gt; Douglas Crockford: Then I can add
methods now to that prototype and

60
00:03:46.254 --> 00:03:49.499
I'll do that by putting
a method method on the unit.

61
00:03:49.499 --> 00:03:53.123
So now the unit function itself is MONAD,
right,

62
00:03:53.123 --> 00:03:57.190
because I can call MONAD and
it returns a unit at the end.

63
00:03:57.190 --> 00:03:59.250
That's what a MONAD does.

64
00:03:59.250 --> 00:04:02.943
So I can say, dot method,
dot method, dot method and

65
00:04:02.943 --> 00:04:07.150
add as much material as I want to it,
but I can do even better.

66
00:04:07.150 --> 00:04:11.031
I can create a lift method
which is like the other one,

67
00:04:11.031 --> 00:04:14.750
except that it will wrap
the calling of bind for me.

68
00:04:14.750 --> 00:04:17.448
So I can pass in ordinary functions and

69
00:04:17.448 --> 00:04:22.674
it will return a function which calls
bind, and takes the result of bind,

70
00:04:22.674 --> 00:04:26.910
and calls unit on it which is
what the axiom says it has to do.

71
00:04:26.910 --> 00:04:31.515
So I can completely hide all
the stiff about what MONAD do and

72
00:04:31.515 --> 00:04:36.132
what bind does in the said function,
it's all wonderful.

73
00:04:36.132 --> 00:04:40.526
So this survey as a question, if you
got a system that looks exactly like

74
00:04:40.526 --> 00:04:44.555
something that a MONAD system would
create is in itself a MONAD and

75
00:04:44.555 --> 00:04:47.280
there are people who
will argue about that.

76
00:04:47.280 --> 00:04:50.767
Some will say, well,
if it doesn't have bind in it or

77
00:04:50.767 --> 00:04:55.028
something that is called bind or
something like the Amtrak logo or

78
00:04:55.028 --> 00:04:59.100
something else, then it's not a MONAD,
but I think it is.

79
00:04:59.100 --> 00:05:03.370
If it's indistinguishable, then who cares.

80
00:05:03.370 --> 00:05:06.744
So this is how I would use the AJAX MONAD.

81
00:05:06.744 --> 00:05:10.087
I'm gonna come my macroid again and

82
00:05:10.087 --> 00:05:15.390
call its lift,
the lift method on its result.

83
00:05:15.390 --> 00:05:19.109
Let's say,
add an alert method to the MONAD.

84
00:05:19.109 --> 00:05:24.109
So I can make my AJAX thing as before
with hello world and bind still works.

85
00:05:24.109 --> 00:05:29.439
So I could call bind here, but
I can also call alert directly,,

86
00:05:29.439 --> 00:05:33.700
because I added alert to
MONAD with my lift method.

87
00:05:33.700 --> 00:05:34.729
And so that works.

88
00:05:34.729 --> 00:05:40.031
And so it's now AJAX, okay?

89
00:05:40.031 --> 00:05:41.785
Expected some applause,
but that's all right.

90
00:05:41.785 --> 00:05:44.330
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: So let's move on.

