WEBVTT

1
00:00:00.000 --> 00:00:04.789
[MUSIC]

2
00:00:04.789 --> 00:00:07.875
&gt;&gt; Douglas Crockford: JavaScript
is an object-oriented language and

3
00:00:07.875 --> 00:00:11.111
almost everything in
the language is objects, but

4
00:00:11.111 --> 00:00:15.039
it's a different sense of object
than in another languages.

5
00:00:15.039 --> 00:00:18.215
An object is a dynamic
collection of properties,

6
00:00:18.215 --> 00:00:22.610
which means that new properties can
be added to an object at anytime.

7
00:00:23.640 --> 00:00:28.460
Every property has a key string that
is unique within that object and

8
00:00:28.460 --> 00:00:33.630
that key string is used
retrieve the values.

9
00:00:34.920 --> 00:00:40.290
So the three basic operations on
object are get, set and delete.

10
00:00:40.290 --> 00:00:44.816
Get uses the dot notation or
the bracket notation.

11
00:00:44.816 --> 00:00:48.769
It turns out they're fairly
interchangeable, which is different than

12
00:00:48.769 --> 00:00:52.799
most other languages generally brackets
and dots have different roles.

13
00:00:52.799 --> 00:00:54.649
Here they both do the same thing.

14
00:00:54.649 --> 00:00:58.488
So you can either have a constant name or
you can have an expression,,

15
00:00:58.488 --> 00:01:01.170
which resolves into a string
which is that name.

16
00:01:01.170 --> 00:01:04.752
They both do the same thing,
then set is the same thing,

17
00:01:04.752 --> 00:01:07.509
except used with an assignment operator.

18
00:01:07.509 --> 00:01:11.880
Then delete is a prefix operator,
which is rarely used.

19
00:01:11.880 --> 00:01:15.104
But if you do use it, you just put it
in front of a name of a property and

20
00:01:15.104 --> 00:01:17.666
it causes the property to
be removed from the object.

21
00:01:19.970 --> 00:01:21.786
&gt;&gt; Douglas Crockford: JavaScript
has object literals,

22
00:01:21.786 --> 00:01:24.170
this is one of the good
parts of the language.

23
00:01:24.170 --> 00:01:28.770
It is also the inspiration for
the JSON Data Interchange Format.

24
00:01:28.770 --> 00:01:33.446
Object literals are very expressive way
for creating a new object where you have

25
00:01:33.446 --> 00:01:36.320
a name followed by column,
followed by a value.

26
00:01:36.320 --> 00:01:40.295
You can have as many of those as
you want separated by commas and

27
00:01:40.295 --> 00:01:43.820
that creates a new object
contained in that material.

28
00:01:43.820 --> 00:01:48.910
In ES5, we added a meta API which
allows you to do the same things.

29
00:01:48.910 --> 00:01:54.266
You can say, Object.defineProperties
passing an Object.create and

30
00:01:54.266 --> 00:01:56.470
Object.prototype and foo.

31
00:01:56.470 --> 00:01:58.060
That does exactly the same thing.

32
00:01:58.060 --> 00:02:02.960
You might ask well, thank you so much for
allowing us to write it this way.

33
00:02:02.960 --> 00:02:04.909
What's the value of that?

34
00:02:04.909 --> 00:02:09.265
The value is that you've got more control
now that you can decide what the thing

35
00:02:09.265 --> 00:02:09.930
inherits.

36
00:02:10.940 --> 00:02:13.640
In particular,
you can have it inherit from null now,, so

37
00:02:13.640 --> 00:02:16.178
that there's no inheritance
happening at all which for

38
00:02:16.178 --> 00:02:18.671
some applications turns out
to be really beneficial.

39
00:02:18.671 --> 00:02:22.430
Also we've got these three attributes,
which you now have control over.

40
00:02:22.430 --> 00:02:23.579
They've always been in the language.

41
00:02:23.579 --> 00:02:26.960
But until ES5, you couldn't get at them.

42
00:02:26.960 --> 00:02:30.059
So you can now make
a property be read only.

43
00:02:30.059 --> 00:02:34.518
You can now make it be not enumerable,
so that it will not show up in a for

44
00:02:34.518 --> 00:02:35.510
in iteration.

45
00:02:38.618 --> 00:02:43.870
&gt;&gt; Douglas Crockford: So
most object languages have classes.

46
00:02:43.870 --> 00:02:46.380
JavaScript doesn't have classes,
it has prototypes.

47
00:02:46.380 --> 00:02:51.608
It turns out prototypes are the more
powerful idea and the proof of that

48
00:02:51.608 --> 00:02:56.759
is that you can simulate a class
system easily in a prototype system.

49
00:02:56.759 --> 00:02:58.520
It's really hard to go the other way.

50
00:02:58.520 --> 00:03:03.739
So it's much easier to write in
JavaScript in a Java style than in is

51
00:03:03.739 --> 00:03:09.770
to write Java in a JavaScript style,
cuz Java just isn't as powerful.

52
00:03:09.770 --> 00:03:14.192
JavaScript is more powerful, but I
recommend not writing JavaScript in a Java

53
00:03:14.192 --> 00:03:18.149
style,,because you are losing most
of the benefit of the language.

54
00:03:18.149 --> 00:03:20.862
You're still writing in
the style of the language,

55
00:03:20.862 --> 00:03:22.905
which isn't as good as this language.

56
00:03:25.859 --> 00:03:29.617
&gt;&gt; Douglas Crockford: So in this language,
you work with prototypes and

57
00:03:29.617 --> 00:03:35.619
it turns out working with prototypes is
much easier than working with classes.

58
00:03:35.619 --> 00:03:40.515
So you make a new object that you like and
you can create new instances of that

59
00:03:40.515 --> 00:03:44.792
language that inherit from that
object using Object.create and

60
00:03:44.792 --> 00:03:49.067
then you can customize the new objects,
adding new properties or

61
00:03:49.067 --> 00:03:52.510
modifying properties as you need to and
that's it.

62
00:03:52.510 --> 00:03:54.999
That's all you have to do
to manage your objects.

63
00:03:54.999 --> 00:03:59.220
Whereas in a classical system,
you first have to classify everything.

64
00:03:59.220 --> 00:04:00.320
You have to make a taxonomy.

65
00:04:00.320 --> 00:04:03.017
You have to figure out what the
relationship is gonna be between all of

66
00:04:03.017 --> 00:04:04.100
your classes.

67
00:04:04.100 --> 00:04:06.791
And usually at the time you're doing that,
you don't not yet

68
00:04:06.791 --> 00:04:09.610
have perfect domain knowledge as
to how it's going to work out.

69
00:04:09.610 --> 00:04:10.449
So you make guesses.

70
00:04:10.449 --> 00:04:13.713
And invariably,
you get stuff wrong which then means

71
00:04:13.713 --> 00:04:18.352
you have to work with an inefficient
object system or you have to refactor and

72
00:04:18.352 --> 00:04:21.050
refactoring is difficult and error prone.

73
00:04:21.050 --> 00:04:23.550
All of that is completely avoided
in the prototypal system.

74
00:04:23.550 --> 00:04:25.010
You just make objects.

75
00:04:25.010 --> 00:04:33.700
So having that level of indirection
removed just makes everything easier.

76
00:04:33.700 --> 00:04:38.786
So this is sometimes called
delegation where an object can

77
00:04:38.786 --> 00:04:45.129
say anything that I don't know how to do,
ask that object to do it for me.

78
00:04:45.129 --> 00:04:47.380
So objects inherit directly
from other objects.

79
00:04:47.380 --> 00:04:49.730
So there's no classes
getting in the middle.

80
00:04:49.730 --> 00:04:54.581
It's also sometimes called
differential inheritance where

81
00:04:54.581 --> 00:04:59.524
each new object only has to contain
the material necessarily to

82
00:04:59.524 --> 00:05:03.640
distinguish it from the thing
that inherited from.

83
00:05:03.640 --> 00:05:09.206
JavaScript has a new prefix
operator which in my own practice,

84
00:05:09.206 --> 00:05:11.629
I do not use at all anymore.

85
00:05:11.629 --> 00:05:14.337
But if you wanted to write
it as a function just in

86
00:05:14.337 --> 00:05:17.539
order to understand what it does,
this is what it does.

87
00:05:17.539 --> 00:05:24.066
It creates a new object that inherits
from the function's prototype and

88
00:05:24.066 --> 00:05:29.739
returns the result of calling
the function on that new object.

89
00:05:33.440 --> 00:05:34.981
&gt;&gt; Douglas Crockford: So not surprisingly,

90
00:05:34.981 --> 00:05:38.879
there a lot of things that
JavaScript didn't get right.

91
00:05:38.879 --> 00:05:44.671
One of them was inheritance
sometimes works against you.

92
00:05:44.671 --> 00:05:52.360
So here, I have an application where I'm
gonna count the number of words in a text.

93
00:05:52.360 --> 00:05:56.864
I'm gonna use a regular expression and
break some text into a bunch of words, and

94
00:05:56.864 --> 00:06:00.389
I wanna count the number of
occurrences of each of those words.

95
00:06:00.389 --> 00:06:03.847
So I've got my little
bumper count function and

96
00:06:03.847 --> 00:06:06.189
then a parse at each word, and.

97
00:06:11.448 --> 00:06:14.147
&gt;&gt; Douglas Crockford: Wait a minute.

98
00:06:18.399 --> 00:06:22.587
&gt;&gt; Douglas Crockford: Okay, so the naive
way to have written as would be to simply

99
00:06:22.587 --> 00:06:25.759
bump word_count for every word that I get.

100
00:06:25.759 --> 00:06:28.834
But that would fail if
the word was constructor,

101
00:06:28.834 --> 00:06:33.340
because it turns out every object
inherits the constructor property.

102
00:06:33.340 --> 00:06:34.979
And so that's a function.

103
00:06:34.979 --> 00:06:38.131
And if you try to add one to a function,
then you get weirdness.

104
00:06:38.131 --> 00:06:41.200
You don't get one.

105
00:06:41.200 --> 00:06:42.189
So it would fail.

106
00:06:42.189 --> 00:06:45.700
So you would have to instead look at.

107
00:06:48.153 --> 00:06:52.029
&gt;&gt; Douglas Crockford: What the value
was an d look at its type.

108
00:06:52.029 --> 00:06:53.140
Make sure it's a number.

109
00:06:53.140 --> 00:06:54.580
And if it is a number,
then I can increment it.

110
00:06:54.580 --> 00:06:57.180
If it's not, then I have to assign it.

111
00:06:57.180 --> 00:07:01.171
So there's some defensive programming that
you have to do which should have been

112
00:07:01.171 --> 00:07:05.584
unnecessary, but is necessary, because of
unexpected consequences of inheritance.

113
00:07:08.280 --> 00:07:10.564
&gt;&gt; Douglas Crockford: That
description expired and

114
00:07:10.564 --> 00:07:15.870
that we can now inherit from null
that solves a problem for this case.

115
00:07:17.060 --> 00:07:20.130
Functions inherited from
a prototype are included in the for

116
00:07:20.130 --> 00:07:24.280
in enumeration,
which is usually surprising.

117
00:07:24.280 --> 00:07:27.150
Usually when they doing for in, it's
because you've got a collection of similar

118
00:07:27.150 --> 00:07:32.340
values and you're not expecting any
methods to be included in the numeration.

119
00:07:32.340 --> 00:07:36.390
And because you don't have
control in your code of

120
00:07:36.390 --> 00:07:39.800
everybody who might ever add
anything to any prototype,

121
00:07:39.800 --> 00:07:43.160
it is unfortunately necessary
to filter the results in for

122
00:07:43.160 --> 00:07:45.860
in to make sure that you're not
getting stuff that you don't expect.

123
00:07:46.930 --> 00:07:52.408
You can be testing for the type of things
as we did in the earlier one or looking to

124
00:07:52.408 --> 00:07:58.310
see if it's part of hasOwnProperty, which
means it's not an inherited property.

125
00:07:58.310 --> 00:08:01.459
You really have to do this.

126
00:08:01.459 --> 00:08:04.479
Otherwise, there is a possibility
that your code's going to explode in

127
00:08:04.479 --> 00:08:05.029
the future.

128
00:08:07.440 --> 00:08:11.961
&gt;&gt; Douglas Crockford: One problem with
hasOwnProperty is that it's a method and

129
00:08:11.961 --> 00:08:13.350
not an operator.

130
00:08:13.350 --> 00:08:18.660
So if it turns out that hasOwnProperty
is also the name of a data value,

131
00:08:18.660 --> 00:08:22.170
then it's not gonna be
available as a method.

132
00:08:22.170 --> 00:08:23.820
And so you gonna get failure then.

133
00:08:23.820 --> 00:08:29.053
So the way to get around that is to find
a place to where it's guaranteed to be,

134
00:08:29.053 --> 00:08:32.518
which is
Object.prototype.hasOwnProperty and

135
00:08:32.518 --> 00:08:36.799
then call method passing in
the other stuff which is horrible.

136
00:08:36.799 --> 00:08:40.719
But in the worst case, that's the most
reliable way of doing that filtration.

137
00:08:43.118 --> 00:08:44.766
&gt;&gt; Douglas Crockford: Keys
must be strings,

138
00:08:44.766 --> 00:08:48.420
which I think is one of
the errors in the language.

139
00:08:48.420 --> 00:08:51.512
It would have been much better if
keys could have been any value

140
00:08:51.512 --> 00:08:55.085
in particular objects, so
you could have associations over objects.

141
00:08:55.085 --> 00:08:56.619
Unfortunately, Brendan didn't do that.

142
00:08:56.619 --> 00:09:01.706
So when you pass it a key,
it will convert it to a string

143
00:09:01.706 --> 00:09:06.005
automatically coursing it which works, but

144
00:09:06.005 --> 00:09:11.789
its lacks some of the power that
it could have had otherwise.

145
00:09:11.789 --> 00:09:17.090
So there are lot of other types in the
language, which all inherits from object.

146
00:09:17.090 --> 00:09:17.859
Everything is an object.

147
00:09:17.859 --> 00:09:21.890
So numbers, Booleans, strings, arrays,
dates, regular expressions and

148
00:09:21.890 --> 00:09:24.220
functions are all objects
in this language.

