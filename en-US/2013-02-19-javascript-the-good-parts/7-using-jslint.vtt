WEBVTT

1
00:00:00.000 --> 00:00:04.759
[MUSIC]

2
00:00:04.759 --> 00:00:07.673
&gt;&gt; Douglas Crockford: So the JSLint style
was driven by the need to automatically

3
00:00:07.673 --> 00:00:09.290
detect errors.

4
00:00:09.290 --> 00:00:13.700
I started by going on
comp.lint.javascript and

5
00:00:13.700 --> 00:00:16.680
there was a constant stream of people
saying, hey, my program doesn't work.

6
00:00:16.680 --> 00:00:18.340
Can someone tell me what's wrong.

7
00:00:18.340 --> 00:00:20.760
So I'd take their code and
I throw it out in JSLint.

8
00:00:20.760 --> 00:00:25.130
And sometimes it would say
there is a problem boom.

9
00:00:25.130 --> 00:00:28.092
And sometimes it couldn't,
and then go okay so

10
00:00:28.092 --> 00:00:31.511
what do I need to do to JSLint
in order to help it find it.

11
00:00:31.511 --> 00:00:38.013
And in some cases I discovered that
there were things in the language that

12
00:00:38.013 --> 00:00:43.680
if I allowed their use,
those things could mask other errors.

13
00:00:43.680 --> 00:00:45.405
So, the comma operator for example.

14
00:00:45.405 --> 00:00:48.750
You can write all sort of
clever stuff with that.

15
00:00:48.750 --> 00:00:53.620
But, it's more likely to be,
or sometimes can be a bug and

16
00:00:53.620 --> 00:00:57.470
you can't discover the bug if you assume
that comma is an okay thing to use.

17
00:00:57.470 --> 00:01:00.730
So, okay we're not gonna do that
with the statement similar thing.

18
00:01:00.730 --> 00:01:04.750
So I started removing things
from the language, which turned

19
00:01:04.750 --> 00:01:08.450
out not to be necessary because there
were easier alternatives to all of them.

20
00:01:08.450 --> 00:01:11.630
But simply by removing them from
the language made it easier to find

21
00:01:11.630 --> 00:01:13.160
other defects.

22
00:01:13.160 --> 00:01:16.290
So if a form could be
used to hide defects,

23
00:01:16.290 --> 00:01:18.559
I consider that itself to be a defect.

24
00:01:19.780 --> 00:01:21.280
It took me a long time to figure this out.

25
00:01:21.280 --> 00:01:24.670
So I didn't write JSLint
with an intention of

26
00:01:24.670 --> 00:01:28.660
imposing my ideas of style on the world.

27
00:01:28.660 --> 00:01:36.030
It was a tool for me and
JSLint told me what good style was.

28
00:01:36.030 --> 00:01:38.670
So the approach I took
was Language Subsetting.

29
00:01:38.670 --> 00:01:43.720
That, yeah it's been said only a mad
man would use all of C++ because it's

30
00:01:43.720 --> 00:01:47.210
such a grotesquely huge language.

31
00:01:47.210 --> 00:01:50.703
It's also been said only a mad man would
use C++ but that's for another time.

32
00:01:50.703 --> 00:01:54.642
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: But so

33
00:01:54.642 --> 00:01:57.870
every language designer makes mistakes.

34
00:01:57.870 --> 00:02:02.340
So generally they'll start
with some good ideas and

35
00:02:02.340 --> 00:02:04.340
inspiration from some other languages.

36
00:02:04.340 --> 00:02:07.790
And maybe some insight that if
I combine that with that and

37
00:02:07.790 --> 00:02:10.080
put them together I can do
some interesting things.

38
00:02:10.080 --> 00:02:14.505
And they might come up with some new
ideas of their own and put them on there.

39
00:02:14.505 --> 00:02:16.950
And all of this is done
with good intentions.

40
00:02:16.950 --> 00:02:20.500
And if they do a good job,
they are going to have a new language and

41
00:02:20.500 --> 00:02:23.500
it's going to have remarkable features and
its great.

42
00:02:23.500 --> 00:02:25.970
But invariably they'll make a mistake.

43
00:02:25.970 --> 00:02:29.750
They'll put some things together and go,
that turned out not to be a good idea.

44
00:02:31.640 --> 00:02:36.630
But if the language becomes popular,
they can't take it back.

45
00:02:36.630 --> 00:02:39.680
Cuz the problem with these bad
features isn't that they're useless.

46
00:02:39.680 --> 00:02:40.859
It's that they're dangerous.

47
00:02:42.030 --> 00:02:45.390
And clever people will always
find a use for it, for anything.

48
00:02:47.410 --> 00:02:51.330
And once it gets out there,
once it gets used, you can't take it back.

49
00:02:51.330 --> 00:02:56.220
So the errors in the language
design are locked there forever.

50
00:02:56.220 --> 00:02:59.870
Now if you're lucky as a language
designer, no one will use your language.

51
00:02:59.870 --> 00:03:03.390
In that case you continue to have
freedom to do whatever you want with it.

52
00:03:03.390 --> 00:03:05.380
You can go yeah that was wrong and fix it.

53
00:03:05.380 --> 00:03:09.190
But if it becomes popular, in the case
of JavaScript it's one of the world's

54
00:03:09.190 --> 00:03:11.650
most popular programming languages now,
you're stuck.

55
00:03:11.650 --> 00:03:12.570
You can't fix it.

56
00:03:13.820 --> 00:03:16.449
But you can, as the user of the language.

57
00:03:17.640 --> 00:03:21.820
You can look at each of those features and
decide which are beneficial for you and

58
00:03:21.820 --> 00:03:24.890
which are more likely to
increase your error rate.

59
00:03:24.890 --> 00:03:28.800
And make choices as to what subset
of language you want to use.

60
00:03:28.800 --> 00:03:32.320
So you have a power that
the language designer does not have.

61
00:03:33.600 --> 00:03:37.016
So the argument that if
it's in the language,

62
00:03:37.016 --> 00:03:40.531
it's there for
you to use doesn't make sense.

63
00:03:40.531 --> 00:03:43.960
That you have a higher responsibility,
a higher freedom than that.

64
00:03:43.960 --> 00:03:48.200
You don't have to use that stuff.

65
00:03:48.200 --> 00:03:50.170
I'd like to say a few
things about performance.

66
00:03:50.170 --> 00:03:52.890
Performance sometimes works, or

67
00:03:52.890 --> 00:03:56.020
concerns about performance sometimes
work directly against programming style.

68
00:03:58.060 --> 00:04:02.370
Now performance specific code or
optimized code tends to be crafty.

69
00:04:02.370 --> 00:04:06.080
Lot of the generality gets
removed from the code.

70
00:04:06.080 --> 00:04:09.600
More special casing gets
hardcoded in to the code

71
00:04:09.600 --> 00:04:14.560
which makes the code likely to be
more buggy and makes it less agile.

72
00:04:14.560 --> 00:04:19.270
Makes it harder to modify that code
going forward or harder to reuse for

73
00:04:19.270 --> 00:04:20.020
other purposes.

74
00:04:22.200 --> 00:04:25.660
So you don't want to optimize
until you know you have to.

75
00:04:27.080 --> 00:04:29.280
Clean code is much easier to reason about.

76
00:04:29.280 --> 00:04:33.220
So if you are having performance problems,
it's much easier to resolve them from

77
00:04:33.220 --> 00:04:36.790
clean code than from code that
has already been optimized.

78
00:04:37.920 --> 00:04:41.286
Donald Knuth of Stanford said that
premature optimization is the root

79
00:04:41.286 --> 00:04:42.590
of all evil.

80
00:04:42.590 --> 00:04:45.530
And the sense is that is,
you should not begin optimizing

81
00:04:45.530 --> 00:04:49.030
until you know specifically where
the optimizations need to occur.

82
00:04:50.210 --> 00:04:54.970
Most of the code has a negligible
impact on performance.

83
00:04:54.970 --> 00:04:58.530
So if you're optimizing
the negligible code,

84
00:04:58.530 --> 00:05:03.870
you're corrupting your code,
which is going to increase errors and

85
00:05:03.870 --> 00:05:08.010
increase the cost of maintenance
without actually providing any benefit.

86
00:05:08.010 --> 00:05:11.590
You only want to optimize the code
that is taking up a lot of time, and

87
00:05:11.590 --> 00:05:17.470
that will generally be the innermost
loops, if you're doing a lot of loopage.

88
00:05:17.470 --> 00:05:21.590
Now also it turns out that fiddling
with innermost loops is probably

89
00:05:21.590 --> 00:05:22.600
gonna be ineffective.

90
00:05:22.600 --> 00:05:27.710
Cause if you have deeply layered
loops then you're probably gonna have

91
00:05:27.710 --> 00:05:32.270
n squared or
maybe worst performance profiles.

92
00:05:32.270 --> 00:05:37.100
Which means that code fiddling
is gonna be completely useless.

93
00:05:38.390 --> 00:05:43.003
That the only way out is to
find better algorithms so

94
00:05:43.003 --> 00:05:49.360
you can get out of n-squared well
maybe into analog n world or better.

95
00:05:49.360 --> 00:05:53.080
So if you're dealing with very crufty code

96
00:05:53.080 --> 00:05:56.970
those sorts of algorithm changes
are even more difficult to make.

97
00:05:58.440 --> 00:06:02.350
So there's this prevailing idea that
every nanosecond you can squeeze out of

98
00:06:02.350 --> 00:06:06.700
the program is going to be beneficial,
that is absolutely not true.

99
00:06:06.700 --> 00:06:11.620
That you only want to squeeze stuff out
of the places that you know are slow.

100
00:06:11.620 --> 00:06:14.220
And in the case of web applications,

101
00:06:14.220 --> 00:06:19.570
it turns out that the majority
of the time is spent on the DOM.

102
00:06:20.970 --> 00:06:24.623
The DOM API is this
horribly inefficient thing,

103
00:06:24.623 --> 00:06:29.180
constantly marshaling,
doing layout, doing rendering.

104
00:06:29.180 --> 00:06:31.400
That stuff is really expensive.

105
00:06:31.400 --> 00:06:36.218
The amount of time spent running
JavaScript tends to be small

106
00:06:36.218 --> 00:06:38.211
number of percentages.

107
00:06:38.211 --> 00:06:42.465
So if you could somehow miraculously
reduce the cost of all your

108
00:06:42.465 --> 00:06:47.730
JavaScript to zero, most users
will not observe any difference.

109
00:06:47.730 --> 00:06:51.440
So fiddling with your JavaScript
is just a waste of time.

110
00:06:51.440 --> 00:06:54.950
Now, when it is time to do
optimization of your programming, and

111
00:06:54.950 --> 00:06:56.399
sometimes it is necessary.

112
00:06:57.950 --> 00:07:01.150
You only want to be
doing the optimization,

113
00:07:01.150 --> 00:07:02.420
in places where you gonna get the benefit.

114
00:07:03.430 --> 00:07:06.910
Optimizing everywhere hoping for
a benefit, is a waste of time.

115
00:07:06.910 --> 00:07:10.460
We only have limited resources for
you to do your optimizing.

116
00:07:10.460 --> 00:07:15.023
So you need to optimize your optimizing.

117
00:07:15.023 --> 00:07:18.690
All right, so there will be bugs,

118
00:07:18.690 --> 00:07:22.250
I'm not promising that by having a better
style that there will be no bugs.

119
00:07:22.250 --> 00:07:27.070
There will always be bugs, but what you
can do is shave the odds in your favor.

120
00:07:27.070 --> 00:07:31.190
Anytime you can avoid being in the abyss,
is going to make you more productive.

121
00:07:32.420 --> 00:07:34.860
So that's the end of part one.

122
00:07:34.860 --> 00:07:36.650
That was like an hour and 20 minutes.

123
00:07:36.650 --> 00:07:38.670
That was pretty good.

124
00:07:38.670 --> 00:07:41.004
So let's take a 15-minute break.

125
00:07:41.004 --> 00:07:42.317
&gt;&gt; Speaker 3: Yeah, sounds good.

126
00:07:42.317 --> 00:07:42.936
&gt;&gt; Douglas Crockford: Okay.
&gt;&gt; Speaker 3: And

127
00:07:42.936 --> 00:07:45.628
we have fresh coffee back there.

128
00:07:45.628 --> 00:07:48.444
&gt;&gt; Douglas Crockford: Before we break,
there is one question.

129
00:07:48.444 --> 00:07:52.880
&gt;&gt; Speaker 3: Yeah, so
I read a lot of JavaScript, which I like.

130
00:07:52.880 --> 00:07:57.470
And, but one of the things I like to take
advantage of is truthy and falsey values,

131
00:07:57.470 --> 00:08:00.270
which we're all acquainted with, I'm sure.

132
00:08:00.270 --> 00:08:02.910
But now, watching your talk this morning,
I'm thinking,

133
00:08:02.910 --> 00:08:04.930
well, yeah, that makes sense to me.

134
00:08:04.930 --> 00:08:10.470
But to someone who may come in as a
maintainer later, they're gonna be unsure.

135
00:08:10.470 --> 00:08:11.710
Is that what he intended?

136
00:08:14.900 --> 00:08:17.500
What are your thoughts on-
&gt;&gt; Douglas Crockford: I think we have to

137
00:08:17.500 --> 00:08:21.530
demand that everybody
level up on the language.

138
00:08:21.530 --> 00:08:26.350
So you don't want to assume that
the people you're working with

139
00:08:26.350 --> 00:08:29.400
are going to be under-educated.

140
00:08:29.400 --> 00:08:31.467
So that's partly why we're here, right?

141
00:08:31.467 --> 00:08:37.060
So we're going to spend most of
the day talking about functions.

142
00:08:37.060 --> 00:08:39.810
And a lot of that stuff
is a new way of thinking.

143
00:08:39.810 --> 00:08:43.200
But I highly recommend people get into
that kind of thinking because that's where

144
00:08:43.200 --> 00:08:45.530
the expressive power is.

145
00:08:45.530 --> 00:08:50.710
And we should do that even though other
people may not understand how that works.

146
00:08:50.710 --> 00:08:53.950
Eventually we need to get everybody
to level up on the good parts.

147
00:08:53.950 --> 00:08:55.110
And I think that the truthy,

148
00:08:55.110 --> 00:08:59.430
the Boolish values is actually one
of the good parts of JavaScript.

149
00:08:59.430 --> 00:09:01.100
That was a really good question.

150
00:09:01.100 --> 00:09:03.679
&gt;&gt; Speaker 3: I like it a lot,
I guess I was more curious,

151
00:09:03.679 --> 00:09:08.371
especially when you advocate for the use
of triple equals versus the double.

152
00:09:08.371 --> 00:09:10.809
And I know there's type
coersion involved there, but

153
00:09:10.809 --> 00:09:14.240
that's essentially what you're
getting with the truthy value.

154
00:09:14.240 --> 00:09:21.030
Truthy falsy values as well
[INAUDIBLE] take into boolean sets.

155
00:09:21.030 --> 00:09:22.370
&gt;&gt; Douglas Crockford: Yeah,
but it's different.

156
00:09:22.370 --> 00:09:22.950
So, great.

157
00:09:22.950 --> 00:09:26.160
So let's break and
we'll come back in 15 minutes.

