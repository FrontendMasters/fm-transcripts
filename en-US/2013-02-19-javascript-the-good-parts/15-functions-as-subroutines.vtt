WEBVTT

1
00:00:00.510 --> 00:00:04.981
[MUSIC]

2
00:00:04.981 --> 00:00:08.869
&gt;&gt; Douglas Crockford: So the idea of
functions in programming languages came

3
00:00:08.869 --> 00:00:11.066
from the idea of subroutines,

4
00:00:11.066 --> 00:00:16.234
which was some piece of code which
could be called from multiple places.

5
00:00:16.234 --> 00:00:20.574
And in various languages, at various
times, has been called subs, procedures,

6
00:00:20.574 --> 00:00:24.554
procs, funcs, functions, and lambdas,
but they're all the same idea.

7
00:00:27.016 --> 00:00:30.790
&gt;&gt; Douglas Crockford: So why did
that occur in programming languages?

8
00:00:30.790 --> 00:00:33.207
There are a number of good reasons.

9
00:00:33.207 --> 00:00:34.904
The first one was code reuse.

10
00:00:34.904 --> 00:00:38.699
It was recognized that there were certain
patterns in programs that happened over

11
00:00:38.699 --> 00:00:39.856
and over and over again.

12
00:00:39.856 --> 00:00:47.654
And being able to isolate those was
originally a memory conserving device.

13
00:00:47.654 --> 00:00:52.144
A more useful reason turns
out to be decomposition.

14
00:00:52.144 --> 00:00:56.133
Where we can take a complicated
problem and break it down into smaller

15
00:00:56.133 --> 00:01:00.553
simpler problems, each of those
represented as a function or subroutine.

16
00:01:00.553 --> 00:01:02.340
Then there was modularity.

17
00:01:02.340 --> 00:01:07.839
These things can have interfaces that
they can defend, becoming black boxes.

18
00:01:07.839 --> 00:01:10.463
And that makes them much
easier to reason about.

19
00:01:10.463 --> 00:01:13.157
It turns out that there is
expressive power to subroutines.

20
00:01:13.157 --> 00:01:17.610
That essentially you're designing
your own language based on a library

21
00:01:17.610 --> 00:01:20.611
of things that you can collect and
put together.

22
00:01:20.611 --> 00:01:25.256
Then finally, we'll get to this in
the next talk, higher order functions.

23
00:01:25.256 --> 00:01:29.063
Where functions become parameters and
functions become return values.

24
00:01:29.063 --> 00:01:31.750
And that pushes programming
to a whole another level.

25
00:01:31.750 --> 00:01:33.291
It's quite amazing.

26
00:01:36.441 --> 00:01:41.810
&gt;&gt; Douglas Crockford: One of the things
that was discovered around Lisp in 1958

27
00:01:41.810 --> 00:01:47.821
was recursion, where a function
can be defined in terms of itself.

28
00:01:47.821 --> 00:01:50.339
This is an idea that
came from mathematics but

29
00:01:50.339 --> 00:01:53.929
is brilliantly implemented in
modern programming languages.

30
00:01:55.994 --> 00:02:00.174
&gt;&gt; Douglas Crockford: One of the best
examples of recursion is the Quicksort.

31
00:02:00.174 --> 00:02:01.919
This is the entire algorithm.

32
00:02:01.919 --> 00:02:04.726
You divide an array into two groups,
low and high.

33
00:02:04.726 --> 00:02:08.867
So you start with an array, you pick
a point in the middle, everything that's

34
00:02:08.867 --> 00:02:13.158
bigger than a value goes to one side,
everything smaller goes to the other side.

35
00:02:13.158 --> 00:02:16.450
And then you call Quicksort
again on those two sides.

36
00:02:16.450 --> 00:02:19.830
And that's it,
that's the entire algorithm, it's amazing.

37
00:02:21.030 --> 00:02:24.280
And Quicksort turns out to be
a very fast sorting technique.

38
00:02:24.280 --> 00:02:28.893
In the average case, it's n log n,
which is pretty good for a sort.

39
00:02:28.893 --> 00:02:33.209
And it falls out trivially from
the definition of recursion.

40
00:02:36.329 --> 00:02:38.382
&gt;&gt; Douglas Crockford: But there's
a guy named Tennent who wrote a book

41
00:02:38.382 --> 00:02:40.597
called The Principles of
Programming Languages.

42
00:02:40.597 --> 00:02:43.683
And he came up with
a principle of correspondence,

43
00:02:43.683 --> 00:02:47.795
which showed a correspondence
between variables and parameters.

44
00:02:47.795 --> 00:02:52.845
And in languages like JavaScript,
variables and parameters are the same

45
00:02:52.845 --> 00:02:57.336
thing, basically, in that one
can be represented as the other.

46
00:02:57.336 --> 00:03:00.901
And this shows two implementations
of factorial that both

47
00:03:00.901 --> 00:03:05.203
do exactly the same thing,
that both act on something called result.

48
00:03:05.203 --> 00:03:09.805
But in one of them, result is a variable,
in the other, result is a parameter.

49
00:03:09.805 --> 00:03:15.327
The parameter acts as a variable in that
it's been created within a function, which

50
00:03:15.327 --> 00:03:20.555
is invoked immediately, which provides
the initial value for the parameter.

51
00:03:23.373 --> 00:03:26.530
&gt;&gt; Douglas Crockford: There are some
people who took that idea of being able

52
00:03:26.530 --> 00:03:31.125
to take any expression and encapsulate
it in a function which is immediately

53
00:03:31.125 --> 00:03:34.316
invoked without changing
the meaning of the thing.

54
00:03:34.316 --> 00:03:38.343
And that may be a useful
thing to have in a language,

55
00:03:38.343 --> 00:03:41.060
particularly if you have macros or

56
00:03:41.060 --> 00:03:47.073
some other thing which wants to act on
pieces of program as if they were data.

57
00:03:47.073 --> 00:03:49.725
And this almost works in JavaScript.

58
00:03:49.725 --> 00:03:54.566
You can take almost any expression,
or almost any statement, and

59
00:03:54.566 --> 00:03:57.858
wrap it in an immediately
invoked function.

60
00:03:57.858 --> 00:04:01.826
And it almost works,
except if the expression contains var or

61
00:04:01.826 --> 00:04:04.496
function or break or continue or return,

62
00:04:04.496 --> 00:04:09.550
because the meaning of all those change
when you put them inside of a function.

63
00:04:09.550 --> 00:04:13.614
And also, this in arguments also change
when you put them inside of a function.

64
00:04:13.614 --> 00:04:17.739
But other than that,
those two expressions are equivalent.

65
00:04:21.642 --> 00:04:25.960
&gt;&gt; Douglas Crockford: Let's see, closure,
wow, how to sneak up on this one.

66
00:04:29.235 --> 00:04:33.669
&gt;&gt; Douglas Crockford: So
the original Lisp had static scoping,

67
00:04:33.669 --> 00:04:38.615
I'm sorry, all right,
let me skip that one.

68
00:04:38.615 --> 00:04:40.621
Okay, we'll go to the definitions.

69
00:04:40.621 --> 00:04:45.549
Okay, closure is one of the really
central ideas to JavaScript.

70
00:04:45.549 --> 00:04:48.715
And unfortunately,
it's called closure, which is bad.

71
00:04:48.715 --> 00:04:52.155
It comes from set theory, where one
thing can be closed over another thing,

72
00:04:52.155 --> 00:04:53.244
which is unfortunate.

73
00:04:53.244 --> 00:04:57.878
Cuz most people think of the word closure
as meaning retribution or vengeance.

74
00:04:57.878 --> 00:05:01.368
You're like, I've been wronged and
I'm gonna get me some closure.

75
00:05:01.368 --> 00:05:03.418
And this isn't anything like that.

76
00:05:03.418 --> 00:05:11.391
This has to do with the vitality
of the state of a function.

77
00:05:11.391 --> 00:05:15.659
So the context of an inner function
includes the scope of the outer function.

78
00:05:15.659 --> 00:05:19.058
Just because of the rules scoping and
nesting.

79
00:05:19.058 --> 00:05:24.013
The weird thing is that the inner function
enjoys their context even after the parent

80
00:05:24.013 --> 00:05:26.750
function or
the other function has returned.

81
00:05:26.750 --> 00:05:29.550
Otherwise, function scope
works like block scope.

82
00:05:29.550 --> 00:05:34.885
So let me show you an example of what
that means, cuz those way too abstract.

83
00:05:34.885 --> 00:05:36.664
So here we got a little piece of code.

84
00:05:36.664 --> 00:05:40.324
We're defining a function
called digit_name.

85
00:05:40.324 --> 00:05:44.892
And it's gonna take a number,
and it's gonna return a string,

86
00:05:44.892 --> 00:05:47.268
which is the name of that number.

87
00:05:47.268 --> 00:05:52.866
Now, the problem with the way I wrote
this is that names is a global variable.

88
00:05:52.866 --> 00:05:55.979
Which means if there's anything
else in my program called names,

89
00:05:55.979 --> 00:05:57.933
then it's gonna conflict with this one.

90
00:05:57.933 --> 00:06:00.807
And either my program's gonna fail or
they're gonna fail, or

91
00:06:00.807 --> 00:06:02.772
maybe we'll both fail, and that's bad.

92
00:06:02.772 --> 00:06:06.827
And there's no way to test for that in
general because you can't predict all of

93
00:06:06.827 --> 00:06:09.414
the code your code's ever
gonna have to run with.

94
00:06:09.414 --> 00:06:13.748
So especially true on the web
in ad-supported sites.

95
00:06:13.748 --> 00:06:17.820
Because there's no way you can anticipate
what's going to be in all the ads you're

96
00:06:17.820 --> 00:06:18.647
gonna run with.

97
00:06:18.647 --> 00:06:22.163
And ads contain some of the worst
code you have ever seen.

98
00:06:22.163 --> 00:06:25.520
They contain lots of global
variables with lots of stupid names.

99
00:06:25.520 --> 00:06:27.380
And there's a good chance
you're gonna fail on that, and

100
00:06:27.380 --> 00:06:29.610
there's no way you can anticipate it.

101
00:06:29.610 --> 00:06:33.460
So the only defense is to try to reduce
your use of global variables as much

102
00:06:33.460 --> 00:06:34.000
as possible.

103
00:06:35.060 --> 00:06:37.070
So here's another way we
can write this function.

104
00:06:39.090 --> 00:06:44.190
Now names is a private variable
of the digit_name function.

105
00:06:44.190 --> 00:06:45.200
And this works.

106
00:06:45.200 --> 00:06:49.876
So because it's inside the function scope,
it's not visible outside of the function,

107
00:06:49.876 --> 00:06:52.568
so it will not conflict
with any other global name.

108
00:06:52.568 --> 00:06:54.039
So that's good.

109
00:06:54.039 --> 00:06:58.365
The thing that's wrong with this one is,
every time we call digit_name,

110
00:06:58.365 --> 00:07:00.698
we're going to have to create an array,

111
00:07:00.698 --> 00:07:05.180
put ten things in it only to take one
thing out, which is hugely inefficient.

112
00:07:05.180 --> 00:07:10.128
Now an optimizing compiler might notice
that names is variant over invocations and

113
00:07:10.128 --> 00:07:11.549
try to factor that out.

114
00:07:11.549 --> 00:07:14.971
But JavaScript compilers don't do that and
probably never will.

115
00:07:14.971 --> 00:07:20.528
Because an optimizing compiler can
take many minutes to do its work and

116
00:07:20.528 --> 00:07:23.175
the web wants to start right now.

117
00:07:23.175 --> 00:07:27.315
So there's never gonna be time
to do that kind of optimization.

118
00:07:27.315 --> 00:07:29.515
So we have to do that
optimization ourselves.

119
00:07:29.515 --> 00:07:31.838
And it turns out it's easy to do.

120
00:07:31.838 --> 00:07:35.369
So I now have a function, and

121
00:07:35.369 --> 00:07:40.380
it's got the names variable as before.

122
00:07:40.380 --> 00:07:43.000
But now instead of returning a value for
names,

123
00:07:43.000 --> 00:07:46.945
it's returning a function that's
gonna return the value from names.

124
00:07:46.945 --> 00:07:51.891
And we're going to invoke it immediately,
okay?

125
00:07:51.891 --> 00:07:55.217
So what's being assigned to
digit_name is not this function,

126
00:07:55.217 --> 00:07:58.556
it's the result of the function,
which is the green function.

127
00:08:00.999 --> 00:08:03.088
&gt;&gt; Douglas Crockford: Now,
once we do that assignment,

128
00:08:03.088 --> 00:08:07.713
this outer function has returned,
it has completed its work, it's done.

129
00:08:07.713 --> 00:08:12.661
But then when we call digit_name
down here, we get the three, okay?

130
00:08:12.661 --> 00:08:17.430
So this function continues to
enjoy access to that variable even

131
00:08:17.430 --> 00:08:21.685
after the function that created
that variable has gone.

132
00:08:21.685 --> 00:08:22.832
Everybody with me?

133
00:08:22.832 --> 00:08:26.361
This is the most important thing
I'm gonna tell you all day, so

134
00:08:26.361 --> 00:08:29.901
it's really important that
everybody be with me on this step.

135
00:08:32.137 --> 00:08:34.688
&gt;&gt; Douglas Crockford: If you don't
understand how this function works,

136
00:08:34.688 --> 00:08:35.820
you gotta tell me now.

137
00:08:38.832 --> 00:08:40.175
&gt;&gt; Douglas Crockford: All right,
we all got it?

138
00:08:40.175 --> 00:08:42.984
Okay, so let's try this one more
time from a different point of

139
00:08:42.984 --> 00:08:45.401
view
&gt;&gt; Douglas Crockford: So

140
00:08:45.401 --> 00:08:51.646
this is back to the initial problem,
we got the global variable and that's bad.

141
00:08:51.646 --> 00:08:56.894
But one thing what I can do, is because
of the thing we just talked about,

142
00:08:56.894 --> 00:08:59.475
where we can take any expression and

143
00:08:59.475 --> 00:09:04.403
put it inside of an immediately
invoked function, so I can do that.

144
00:09:04.403 --> 00:09:08.732
I can take the original function and wrap
it in another function, I can do that.

145
00:09:08.732 --> 00:09:11.220
Cuz it means exactly the same thing.

146
00:09:11.220 --> 00:09:13.524
Everybody with me?

147
00:09:13.524 --> 00:09:18.668
Okay, so then all I am gonna do is
move the names thing inside of there,

148
00:09:18.668 --> 00:09:20.164
get the same thing.

149
00:09:22.626 --> 00:09:23.518
&gt;&gt; Douglas Crockford: Everybody
still with me?

150
00:09:28.035 --> 00:09:32.512
&gt;&gt; Douglas Crockford: Now, there are some
people who have proposed a possible

151
00:09:32.512 --> 00:09:38.239
optimization, where it involves
changing the value of digit_name.

152
00:09:38.239 --> 00:09:44.449
So initially, digit_name is the function
which will create the names array.

153
00:09:44.449 --> 00:09:46.665
And after it's called the first time,

154
00:09:46.665 --> 00:09:51.180
it will replace itself with the function
that extracts things from that array.

155
00:09:51.180 --> 00:09:54.272
The theory being that you
don't have to pay for

156
00:09:54.272 --> 00:09:58.162
the cost of the names until
the first time you need to do it.

157
00:09:58.162 --> 00:10:02.429
So if it turns out you never call this
function, then you never pay that cost.

158
00:10:04.260 --> 00:10:06.450
I don't like this for a couple of reasons.

159
00:10:06.450 --> 00:10:14.590
The first one is that we're changing
the value of that function as we're going.

160
00:10:14.590 --> 00:10:17.990
That kind of self-modification is
confusion and I don't like confusion.

161
00:10:19.000 --> 00:10:23.600
But worse than that, we're breaking
the first class list of our function.

162
00:10:23.600 --> 00:10:25.406
Because I can take my digit_name and

163
00:10:25.406 --> 00:10:28.502
I can put it in another object
where it's gonna act as a method.

164
00:10:28.502 --> 00:10:33.605
And when I call the function from over
there, it's gonna go through here,

165
00:10:33.605 --> 00:10:39.609
change the value of digit_name, but this
guy doesn't see that digit_name changed.

166
00:10:39.609 --> 00:10:44.356
So it means that now every time I call
this function, I'm going to have to pay

167
00:10:44.356 --> 00:10:48.972
this overhead because I've broken
the first classness of the function.

168
00:10:48.972 --> 00:10:51.709
I think this is a really bad form.

169
00:10:51.709 --> 00:10:54.232
Now, you could fix this by
putting an if statement in it.

170
00:10:57.329 --> 00:11:00.771
&gt;&gt; Douglas Crockford: But
it's not worth it.

171
00:11:00.771 --> 00:11:04.228
So you could ask, why?

172
00:11:04.228 --> 00:11:08.976
You might notice that the cost of
the statement if you run this function

173
00:11:08.976 --> 00:11:14.130
a million times, but if you're gonna
run it a million times, you're gonna

174
00:11:14.130 --> 00:11:19.623
break other things long before you get to
the point where you notice that payoff.

175
00:11:19.623 --> 00:11:22.543
And if you're that concerned about
optimizing the case where you're

176
00:11:22.543 --> 00:11:23.978
running the case a million times,

177
00:11:23.978 --> 00:11:26.764
you shouldn't be trying to optimize
the case where you do it zero.

178
00:11:26.764 --> 00:11:29.291
That seems to me a really bad trade-off.

179
00:11:31.449 --> 00:11:34.540
&gt;&gt; Douglas Crockford: So
if you look at scopes as sets,

180
00:11:34.540 --> 00:11:39.815
it's exactly inside-out of
how the functions look.

181
00:11:39.815 --> 00:11:43.724
So here I've got an outer yellow function.

182
00:11:43.724 --> 00:11:47.100
What I can see from that function is x.

183
00:11:47.100 --> 00:11:53.476
But from the inner green function,
I can see x and y, okay?

184
00:11:53.476 --> 00:11:58.189
And you can see that scope is
completely enclosed by the other scope.

185
00:11:58.189 --> 00:12:03.258
That's where the word
enclosure comes from.

186
00:12:03.258 --> 00:12:07.324
So here's an example from the browser.

187
00:12:07.324 --> 00:12:08.654
It's a fade function.

188
00:12:08.654 --> 00:12:12.834
It's going to take some
element of the DOM and

189
00:12:12.834 --> 00:12:19.437
cycle it through the colors yellow
to white in however long that takes.

190
00:12:19.437 --> 00:12:24.274
And the idea is that there's gonna be
something changing on the page and we just

191
00:12:24.274 --> 00:12:29.422
want to get the user's attention on it
briefly, and we'll do it by color cycling.

192
00:12:29.422 --> 00:12:31.652
So we'll start with the fade function.

193
00:12:31.652 --> 00:12:36.203
We'll pass in the id of the DOM
element that we want to be colorizing.

194
00:12:36.203 --> 00:12:41.861
We'll go to getElementById
to get that DOM node.

195
00:12:41.861 --> 00:12:43.921
We'll set our variable level to 1.

196
00:12:43.921 --> 00:12:46.155
We'll create a step function.

197
00:12:46.155 --> 00:12:49.845
And we'll call setTimeout,
passing that step function,

198
00:12:49.845 --> 00:12:52.363
telling to call it in a tenth of a second.

199
00:12:52.363 --> 00:12:53.591
And then it's finished.

200
00:12:53.591 --> 00:13:00.052
Okay, at this point, fade has completed,
it's done it's work, it is complete.

201
00:13:00.052 --> 00:13:05.183
Suddenly, a tenth of a second later,
setTimeout causes step to run, okay?

202
00:13:05.183 --> 00:13:11.785
So setTimeout goes to his level and
changes it to a hex string.

203
00:13:11.785 --> 00:13:14.721
It's getting the level
of the fade function.

204
00:13:14.721 --> 00:13:18.343
Okay, so it's remembering the value
that the outer function had.

205
00:13:18.343 --> 00:13:23.573
It doesn't have a copy of that variable,
it is still bound to that very variable.

206
00:13:23.573 --> 00:13:28.441
Okay, it will then go to that DOM node,
it knows what node it is because

207
00:13:28.441 --> 00:13:33.079
its parent looked it up, and
it will change its background color.

208
00:13:33.079 --> 00:13:36.995
We'll then look again at the level and
ask, is it 15 yet?

209
00:13:36.995 --> 00:13:41.601
If not, it will change it and
call set timeout again.

210
00:13:41.601 --> 00:13:46.850
Okay, again, it's not changing its copy,
it is changing the original variable.

211
00:13:46.850 --> 00:13:51.046
So every time it looks at it, it will
see the current value of that variable.

212
00:13:51.046 --> 00:13:55.016
And it will keep doing until it
gets to 15, and then it stops.

213
00:13:55.016 --> 00:13:58.755
Now one of the nice things about doing
all this in a function, and the way that

214
00:13:58.755 --> 00:14:02.565
function's scope work, is I could fade
on two DOM elements at the same time.

215
00:14:02.565 --> 00:14:04.602
Go fade, fade.

216
00:14:04.602 --> 00:14:09.248
And those two will work, but
they will not interfere with each other.

217
00:14:09.248 --> 00:14:14.146
Cuz each call to fade creates it's own
DOM and level in step values, which

218
00:14:14.146 --> 00:14:19.761
are completely distinct and held inside of
their scope from all other invocations.

219
00:14:19.761 --> 00:14:21.966
And so there's no way they can conflict,

220
00:14:21.966 --> 00:14:25.432
unless maybe you told them to fade
on the same guy at the same time.

221
00:14:25.432 --> 00:14:27.381
In that case, you got trouble.

222
00:14:27.381 --> 00:14:32.235
But otherwise, this is a very clean,
very elegant way of managing your program.

223
00:14:36.933 --> 00:14:40.590
&gt;&gt; Douglas Crockford: And so
a later method, I think I'll skip that.

224
00:14:40.590 --> 00:14:43.116
It's kind of redundant for
some stuff we're gonna do later.

225
00:14:43.116 --> 00:14:45.100
I'll skip that one too, and that one.

