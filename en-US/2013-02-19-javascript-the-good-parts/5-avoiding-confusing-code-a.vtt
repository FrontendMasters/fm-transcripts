WEBVTT

1
00:00:00.341 --> 00:00:04.869
[MUSIC]

2
00:00:04.869 --> 00:00:07.140
&gt;&gt; Douglas Crockford: Confusion
is where bugs come from.

3
00:00:07.140 --> 00:00:09.190
When we think a program does one thing,
and

4
00:00:09.190 --> 00:00:12.580
it actually does something else,
that's what confusion is.

5
00:00:12.580 --> 00:00:15.150
That's what creates bugs, right?

6
00:00:15.150 --> 00:00:18.600
So we want to eliminate as
much confusion as possible,

7
00:00:18.600 --> 00:00:21.280
we want to be as clear as possible.

8
00:00:22.570 --> 00:00:26.220
We want our programs to be something
that you can easily reason about.

9
00:00:29.590 --> 00:00:33.220
Another of the design areas in JavaScript
was the double equal operator,

10
00:00:33.220 --> 00:00:36.120
which is supposed to be
the equality operator.

11
00:00:36.120 --> 00:00:39.980
Unfortunately, it does type coercion
before it does its comparison.

12
00:00:39.980 --> 00:00:44.680
And so it can get false positives,
and you can also lose transitivity.

13
00:00:44.680 --> 00:00:48.600
Transitivity is one of the mathematical
properties of a language which is supposed

14
00:00:48.600 --> 00:00:51.630
to make it easier to reason about, but

15
00:00:51.630 --> 00:00:54.780
it actually makes this language harder
to reason about because it's not there.

16
00:00:56.690 --> 00:00:59.470
Fortunately, we have
a triple equal operator,

17
00:00:59.470 --> 00:01:04.750
which always does the right thing except
for nan and we'll talk about that later.

18
00:01:04.750 --> 00:01:08.250
But for all of these it'll produce false,
which is the correct answer.

19
00:01:09.500 --> 00:01:14.630
So my advice is always use triple equal,
never use double equal.

20
00:01:14.630 --> 00:01:19.620
And if you do that, then there's a whole
lot of confusion which disappears and

21
00:01:19.620 --> 00:01:22.240
your programs become more reliable.

22
00:01:23.490 --> 00:01:27.450
Now what about the case
where double equal actually,

23
00:01:27.450 --> 00:01:29.540
accidentally sort of does the right thing?

24
00:01:30.570 --> 00:01:32.130
Should you use it then?

25
00:01:32.130 --> 00:01:36.000
And my advice is no, because you wanna
make it clear to the reader that

26
00:01:36.000 --> 00:01:38.600
you know what you're doing and
you're doing the right thing.

27
00:01:38.600 --> 00:01:41.600
And so if they see a double equal in your
program, they're gonna have to stop and

28
00:01:41.600 --> 00:01:48.380
ask, okay, is this a common error, or does
this guy actually know what heÂ´s doing?

29
00:01:48.380 --> 00:01:52.560
It's harder to make the second argument
if you're using this operator,

30
00:01:52.560 --> 00:01:54.530
so don't do it.

31
00:01:56.250 --> 00:01:59.140
So if there's a feature of the language
that is sometimes problematic aand

32
00:01:59.140 --> 00:02:01.744
if it can be replaced by another
feature that is more reliable,

33
00:02:01.744 --> 00:02:05.250
then always use the more reliable feature.

34
00:02:05.250 --> 00:02:09.080
That will tend to help us
keep the error rate down.

35
00:02:11.240 --> 00:02:13.000
This is a new feature in JavaScript,

36
00:02:13.000 --> 00:02:17.190
it was added in the fifth edition,
you see this in a lot of other languages.

37
00:02:17.190 --> 00:02:20.590
I think this was a mistake,
for two reasons.

38
00:02:20.590 --> 00:02:24.970
One is that indentation is a really
important component of style,

39
00:02:24.970 --> 00:02:29.100
because we have a lot of nested functions,
nested objects.

40
00:02:29.100 --> 00:02:33.180
Nesting is very important to revealing
the structure of the program and

41
00:02:33.180 --> 00:02:35.870
helping us to interpret what is going on.

42
00:02:35.870 --> 00:02:36.995
And this breaks indentation,

43
00:02:36.995 --> 00:02:39.470
cuz everything has to go
back out to the margin.

44
00:02:40.820 --> 00:02:44.460
So it does make programs harder to read,
harder to understand.

45
00:02:44.460 --> 00:02:45.680
And that's a bad thing.

46
00:02:45.680 --> 00:02:51.000
But even worse,
there is a syntactic danger that this

47
00:02:51.000 --> 00:02:53.880
statement is correct, and
this one is a syntax error.

48
00:02:53.880 --> 00:02:55.429
Can anybody spot the syntax error?

49
00:02:59.410 --> 00:03:00.660
&gt;&gt; Speaker 2: Space on the right slash.

50
00:03:00.660 --> 00:03:01.900
&gt;&gt; Douglas Crockford: Yeah, exactly.

51
00:03:01.900 --> 00:03:03.009
There's a space right here.

52
00:03:04.550 --> 00:03:06.210
It's obvious once it's pointed out, right?

53
00:03:07.320 --> 00:03:09.890
But yeah, that causes syntax error.

54
00:03:09.890 --> 00:03:14.980
So I don't want to use this, because I
want my programs to be obviously correct.

55
00:03:14.980 --> 00:03:20.100
And if I'm using forms that you cannot
distinguish from common errors,

56
00:03:20.100 --> 00:03:24.140
then my programs are harder to understand,
and I don't want that.

57
00:03:24.140 --> 00:03:27.610
So avoid forms that are difficult
to distinguish from common errors.

58
00:03:29.430 --> 00:03:33.448
This is something that was wrong in b,
was right in Java but

59
00:03:33.448 --> 00:03:37.310
skipped a generation,
now it's wrong in JavaScript.

60
00:03:37.310 --> 00:03:43.101
We have here if a equals b,
which looks like it means this,

61
00:03:43.101 --> 00:03:45.950
but it actually means that.

62
00:03:47.100 --> 00:03:49.840
So when someone comes and
reads the program and sees that in it,

63
00:03:49.840 --> 00:03:54.140
you have to ask, okay,
what's going on here?

64
00:03:54.140 --> 00:03:58.360
The only thing they know for sure is
that the programmer was incompetent.

65
00:03:58.360 --> 00:04:00.780
That they don't really know
what this was supposed to do.

66
00:04:01.950 --> 00:04:08.010
So my advice is figure out which of these
you intended and write that instead.

67
00:04:08.010 --> 00:04:10.030
And don't write the form
which is ambiguous.

68
00:04:10.030 --> 00:04:12.580
Because anytime you have something that
looks like one thing that does something

69
00:04:12.580 --> 00:04:15.000
else, that's where errors come from.

70
00:04:15.000 --> 00:04:18.980
Not every time, but often enough that
it's a pattern you want to avoid.

71
00:04:20.280 --> 00:04:22.079
So make your programs
look like what they do.

72
00:04:24.271 --> 00:04:28.970
&gt;&gt; Douglas Crockford: Scope is one of the
best inventions in programming languages.

73
00:04:28.970 --> 00:04:33.880
It came into the world in ALGOL 60,
which was, by far,

74
00:04:33.880 --> 00:04:37.700
the best design by committee in
the history of programming languages.

75
00:04:37.700 --> 00:04:40.550
ALGOL 60 was an amazing leap forward.

76
00:04:40.550 --> 00:04:43.550
And one of the leaps was block scope,
where you could

77
00:04:43.550 --> 00:04:48.870
create variables in a block, and they
would not be visible outside of the block.

78
00:04:48.870 --> 00:04:51.720
And you could nest blocks,
and the inner most block

79
00:04:51.720 --> 00:04:54.980
would have access to the variables of
the outer block, and that was brilliant.

80
00:04:56.690 --> 00:05:01.140
And it's a feature of almost all
programming languages except JavaScript.

81
00:05:01.140 --> 00:05:05.560
JavaScript surprisingly does not have
block scope, it has function scope, which

82
00:05:05.560 --> 00:05:09.300
means anything declared in a function
is not visible outside of the function.

83
00:05:10.530 --> 00:05:12.090
Now it turns out, that's enough.

84
00:05:12.090 --> 00:05:16.470
You can write good programms in
a language that has function scope.

85
00:05:16.470 --> 00:05:19.470
And so it's completely adequate.

86
00:05:19.470 --> 00:05:22.150
The problem is that JavaScript has syntax,

87
00:05:22.150 --> 00:05:25.080
which is identical to
block scope languages.

88
00:05:25.080 --> 00:05:30.038
And so, when people come to
JavaScript from Java or C or C++ or

89
00:05:30.038 --> 00:05:34.719
C# or virtually all other languages,
they get confused,

90
00:05:34.719 --> 00:05:39.509
because it looks like the same style,
but it doesn't work.

91
00:05:40.900 --> 00:05:47.410
So the reason for
this the way the VAR statement works.

92
00:05:47.410 --> 00:05:51.510
The VAR statement gets split into
two parts, the definition part and

93
00:05:51.510 --> 00:05:52.660
the initialization part.

94
00:05:54.020 --> 00:05:58.740
If you don't have an initialization part,
it synthesizes one using undefined.

95
00:06:00.170 --> 00:06:04.530
And it moves the declaration
part to the top of the function,

96
00:06:04.530 --> 00:06:05.670
what they call hoisting.

97
00:06:06.770 --> 00:06:10.940
So you might think that you're declaring
a variable inside of a block, but

98
00:06:10.940 --> 00:06:13.890
it actually gets moved to
the top of the function.

99
00:06:13.890 --> 00:06:15.770
And this can cause errors.

100
00:06:15.770 --> 00:06:18.980
It doesn't always cause errors,
but it does cause errors.

101
00:06:20.120 --> 00:06:22.630
So you shouldn't rely on that.

102
00:06:22.630 --> 00:06:25.290
So in a block scoped language,

103
00:06:25.290 --> 00:06:29.680
the best advice is declare
the variable in the innermost

104
00:06:30.840 --> 00:06:36.179
block where it makes sense to,
probably at the site of first use.

105
00:06:37.880 --> 00:06:40.140
That's good advice in
a block scoped language,

106
00:06:40.140 --> 00:06:43.050
it's bad advice in
a function scoped language.

107
00:06:43.050 --> 00:06:46.750
In a function scoped language, you want to
declare all of your variables at the top

108
00:06:46.750 --> 00:06:50.785
of the functions, because that's where
they're actually being declared.

109
00:06:50.785 --> 00:06:55.450
So you wanna make it easier for
someone to understand what the program

110
00:06:55.450 --> 00:06:58.260
is doing by having it match
what's actually being done.

111
00:06:59.430 --> 00:07:03.320
So in JavaScript, declare all of your
variables at the top of the function.

112
00:07:03.320 --> 00:07:08.080
There's an even weirder thing that happens
to function statements, and so for

113
00:07:08.080 --> 00:07:12.260
them, I recommend declare all of
your functions before you call them.

114
00:07:13.280 --> 00:07:18.140
I find this is the most difficult
style thing for programmers to accept.

115
00:07:18.140 --> 00:07:21.499
I've seen some of the best programmers
in the world get hung up on this.

116
00:07:23.940 --> 00:07:29.130
So the induction variable is not
scoped to the loop in JavaScript,

117
00:07:29.130 --> 00:07:31.400
it's scoped to the function.

118
00:07:31.400 --> 00:07:34.530
So you should move that var i
to the top of the function.

119
00:07:34.530 --> 00:07:37.179
And I see people get
really upset about this.

120
00:07:38.740 --> 00:07:41.470
And that's wrong, no, it's actually right.

121
00:07:41.470 --> 00:07:44.850
Because there are a lot of
errors that can occur if

122
00:07:44.850 --> 00:07:46.500
you're not aware of that hoisting.

123
00:07:46.500 --> 00:07:47.716
And so you really should,

124
00:07:47.716 --> 00:07:50.320
you can avoid all of that if
you just move them to the top.

125
00:07:51.520 --> 00:07:54.710
And you'll say, but
this is how you write it in Java!

126
00:07:54.710 --> 00:07:56.769
And I say,
write in the language you're writing in.

127
00:07:58.150 --> 00:07:59.390
JavaScript isn't Java.

128
00:07:59.390 --> 00:08:04.158
And so there are things that are smart to
do in JavaScript that are not smart to do,

129
00:08:04.158 --> 00:08:08.280
or smart to do in Java that
are not smart to do in JavaScript.

130
00:08:08.280 --> 00:08:11.010
So you need to be working in
the language you're working in.

131
00:08:11.010 --> 00:08:13.650
Every language is different.

132
00:08:13.650 --> 00:08:16.650
And some of our style conventions can

133
00:08:16.650 --> 00:08:19.500
easily translate from
one language to another.

134
00:08:19.500 --> 00:08:21.490
But it's guaranteed not all of them will.

135
00:08:21.490 --> 00:08:23.941
And so you really have to
re-address your style for

136
00:08:23.941 --> 00:08:26.000
each language that you're working with.

137
00:08:28.010 --> 00:08:32.510
In the next edition of JavaScript,
there will probably be a let statement.

138
00:08:33.560 --> 00:08:36.390
And the let statement will be
just like the VAR statement,

139
00:08:36.390 --> 00:08:39.702
except it will not hoist,
which means it will respect block scope.

140
00:08:41.229 --> 00:08:45.390
&gt;&gt; Douglas Crockford: Now at that time on
that happy day, my advice will change.

141
00:08:46.490 --> 00:08:49.590
And I will say,
always use the let statement and

142
00:08:49.590 --> 00:08:54.045
never use the VAR statement,
unless you have to run on IE6.

143
00:08:54.045 --> 00:08:58.185
&gt;&gt; [LAUGH]
&gt;&gt; Douglas Crockford: Or IE7, or

144
00:08:58.185 --> 00:09:03.070
IE8, or IE9, or IE10.

145
00:09:03.070 --> 00:09:07.940
And we don't know what's in IE11 yet, but
pretty sure if you only have to run on

146
00:09:07.940 --> 00:09:11.970
IE12 and above,
then you'll want to use let statement.

147
00:09:11.970 --> 00:09:13.880
Otherwise, you're gonna have to
keep using the VAR statement.

