WEBVTT

1
00:00:00.000 --> 00:00:04.570
[MUSIC]

2
00:00:04.570 --> 00:00:08.794
&gt;&gt; Douglas Crockford: Global
variables are evil in all languages.

3
00:00:08.794 --> 00:00:12.369
One of the unfortunate things about
JavaScript is that it sometimes requires

4
00:00:12.369 --> 00:00:13.749
the use of global variables.

5
00:00:13.749 --> 00:00:17.630
Because it doesn't have any other
mechanism for binding code units together.

6
00:00:17.630 --> 00:00:22.264
So everything gets dumped
in common global space,

7
00:00:22.264 --> 00:00:27.988
which is terrible for reliability,
even worse for security.

8
00:00:27.988 --> 00:00:31.010
So, you need to avoid global
variables as much as possible.

9
00:00:31.010 --> 00:00:34.229
So my advice in naming
global variables is,

10
00:00:34.229 --> 00:00:38.932
write them in uppercase,
because I want them to be really rare.

11
00:00:38.932 --> 00:00:44.298
And I want them to stand out
because there are these dangers

12
00:00:44.298 --> 00:00:49.569
that are inherent in globals,
I want them to be visible.

13
00:00:49.569 --> 00:00:53.143
JavaScript has new prefix,
which was intended

14
00:00:53.143 --> 00:00:58.070
to look like Java in the way that
you create instances of objects.

15
00:00:58.070 --> 00:01:00.981
But it doesn't work the way
you would expect, and

16
00:01:00.981 --> 00:01:03.350
there was a bug in the way it was defined.

17
00:01:03.350 --> 00:01:07.803
That if you have a function that's
intended to be used as a constructor, and

18
00:01:07.803 --> 00:01:10.949
someone calls that function
without the new prefix.

19
00:01:10.949 --> 00:01:16.619
Instead of initializing a new object, it's
going to clobber global variables instead.

20
00:01:16.619 --> 00:01:20.740
Again, no run time warning,
no compile time warning,

21
00:01:20.740 --> 00:01:23.910
just doing the worst thing, which is bad.

22
00:01:23.910 --> 00:01:26.932
So because of that,
we have a convention that

23
00:01:26.932 --> 00:01:30.919
constructor functions should
be named with InitialCaps.

24
00:01:30.919 --> 00:01:34.020
And nothing else should be
named with InitialCaps.

25
00:01:34.020 --> 00:01:38.375
Only by having that convention do we have
any hope of identifying the cases where

26
00:01:38.375 --> 00:01:39.291
new is missing.

27
00:01:42.946 --> 00:01:47.557
&gt;&gt; Douglas Crockford: Let's see,
this is another ambiguous statement,

28
00:01:47.557 --> 00:01:55.120
var a = b = 0, looks like it creates two
variables, a and b, and initializes them.

29
00:01:55.120 --> 00:01:59.389
But what it actually does is
initialize a global variable, b, and

30
00:01:59.389 --> 00:02:03.139
initialize a,
which was probably not what you intended.

31
00:02:03.139 --> 00:02:05.766
That someone was going
to some work here to,

32
00:02:05.766 --> 00:02:10.320
one of the really bad parts about
JavaScript is implicit global variables.

33
00:02:10.320 --> 00:02:14.296
So if you have a variable and
you do not explicitly declare it,

34
00:02:14.296 --> 00:02:17.000
it's assumed to be global.

35
00:02:17.000 --> 00:02:20.384
That was done to make the language
easier for beginners,

36
00:02:20.384 --> 00:02:23.640
it makes the language much harder for
professionals.

37
00:02:23.640 --> 00:02:28.180
I assume you're all professionals, so
this turns out to be a bad feature.

38
00:02:28.180 --> 00:02:32.062
So you need to figure out which of these,
again,

39
00:02:32.062 --> 00:02:35.290
you intended, and write the right one.

40
00:02:35.290 --> 00:02:37.690
Write it in a way that clearly
communicates your intent.

41
00:02:40.320 --> 00:02:49.029
Okay, so Thompson created the ++ operator
in B in order to increment pointers.

42
00:02:49.029 --> 00:02:54.173
Since then, we have learned that
pointer arithmetic is harmful and

43
00:02:54.173 --> 00:02:58.156
it is no longer included
in programming languages.

44
00:02:58.156 --> 00:03:03.153
The last popular language to have
point arithmetic in it was C ++,

45
00:03:03.153 --> 00:03:06.934
a language so
bad it was named after this operator.

46
00:03:06.934 --> 00:03:13.505
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: Now even though

47
00:03:13.505 --> 00:03:17.799
we were not incrementing pointers anymore,
we still have this operator anyway.

48
00:03:17.799 --> 00:03:24.220
Which is now used to add one to integers,
it's like, why do we need that?

49
00:03:24.220 --> 00:03:28.819
This operator was implicated
in the buffer over one craze.

50
00:03:28.819 --> 00:03:33.629
Remember when Unix and
Windows were failing all over the place.

51
00:03:33.629 --> 00:03:37.835
And they have to refractor them in order
to avoid the buffer overrun attack.

52
00:03:37.835 --> 00:03:42.977
And it turned out it was this
operator was implicated because this

53
00:03:42.977 --> 00:03:48.039
operator encourages programmers
to write stuff as one liners.

54
00:03:48.039 --> 00:03:52.224
Where you can do a whole lot of
mutation and modification of stuff,

55
00:03:52.224 --> 00:03:54.330
many steps all in one statement.

56
00:03:54.330 --> 00:03:58.733
So you can take a big block of code and
kind of squish it all down into one line.

57
00:03:58.733 --> 00:04:01.343
And that turns out to be
a horrible trade off,

58
00:04:01.343 --> 00:04:05.959
because the benefit of getting everything
down to one mind is hugely negative.

59
00:04:05.959 --> 00:04:10.039
Because it makes the code much harder to
understand and much harder to maintain.

60
00:04:10.039 --> 00:04:13.189
And in fact the attackers
took great advantage of that.

61
00:04:13.189 --> 00:04:17.350
Because nobody knows exactly what that
code was except the attackers that spent

62
00:04:17.350 --> 00:04:19.969
the time to figure out what
it was actually doing.

63
00:04:19.969 --> 00:04:24.318
I found in my own practice,
if I'm using ++, I get this twitch,

64
00:04:24.318 --> 00:04:27.049
I can't help it, I start doing, [SOUND].

65
00:04:27.049 --> 00:04:30.850
And it's stupid, and I know it's
stupid and I cannot stop myself.

66
00:04:30.850 --> 00:04:37.959
So ultimately I had to say, no more,
I am not going to write ++ ever again,

67
00:04:37.959 --> 00:04:43.530
I'm going to write, + = 1,
and suddenly I could relax.

68
00:04:43.530 --> 00:04:44.844
Food tastes better.

69
00:04:44.844 --> 00:04:49.014
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: But

70
00:04:49.014 --> 00:04:51.678
I hear from people all the time saying,
no,

71
00:04:51.678 --> 00:04:55.999
I should be able to write x + + because
it means exactly the same thing.

72
00:04:55.999 --> 00:05:00.370
And it's so
much faster to type because you go,

73
00:05:00.370 --> 00:05:03.659
[SOUND], instead of going, [SOUND].

74
00:05:03.659 --> 00:05:08.539
We're not saving time doing that, and if
you're actually are losing time on that,

75
00:05:08.539 --> 00:05:12.059
there's this wonderful new
thing called keyboard macros.

76
00:05:12.059 --> 00:05:16.904
Where you could do something like Alt+ and
boom, it'll do that for

77
00:05:16.904 --> 00:05:20.989
you, so the typing speed
argument is completely bogus.

78
00:05:20.989 --> 00:05:26.867
But there's a bigger problem here because
they don't mean exactly the same thing,

79
00:05:26.867 --> 00:05:30.450
++x is a thing that means
exactly the same thing.

80
00:05:30.450 --> 00:05:34.591
So if I see somebody writing
x++ in increment position.

81
00:05:34.591 --> 00:05:38.853
I have to ask, does this clown know
the difference between pre-increment and

82
00:05:38.853 --> 00:05:39.960
post-increment?

83
00:05:39.960 --> 00:05:44.771
Because there's a really subtle off by one
bug there because it's only off by one for

84
00:05:44.771 --> 00:05:46.138
a little piece of time.

85
00:05:46.138 --> 00:05:50.949
So debugging that kind of stuff is
really hard and time consuming.

86
00:05:50.949 --> 00:05:53.766
And I have to look at every
++ in this program, and ask,

87
00:05:53.766 --> 00:05:55.070
did he get that one right?

88
00:05:55.070 --> 00:05:56.861
Did he get that one right?

89
00:05:56.861 --> 00:06:00.481
I've got to figure we've got at
least one of these wrong and so

90
00:06:00.481 --> 00:06:03.002
makes these programs a lot harder to read.

91
00:06:03.002 --> 00:06:07.181
Recently I was reading some code and
I saw this, ++x, ++x, okay,

92
00:06:07.181 --> 00:06:09.769
what's the story here, what's going on?

93
00:06:09.769 --> 00:06:15.889
It could be a copy and paste error, but
more likely a second person came by and

94
00:06:15.889 --> 00:06:19.539
saw, there's an off by one error here.

95
00:06:19.539 --> 00:06:23.990
So I'll fix the off by one by putting
another one of these in here.

96
00:06:23.990 --> 00:06:26.554
Whereas if the original
form had said += 1,

97
00:06:26.554 --> 00:06:29.332
the obvious fix would have
been to make it += 2.

98
00:06:29.332 --> 00:06:32.781
Which I don't think anyone would
argue would be the better thing.

99
00:06:32.781 --> 00:06:35.343
This doesn't happen all the time,
but it happens, and so

100
00:06:35.343 --> 00:06:37.240
it's something you need to watch out for.

101
00:06:37.240 --> 00:06:42.544
And it kinda raises the question,
why do we need a completely

102
00:06:42.544 --> 00:06:48.690
different syntactic form for
adding 1 then adding all other values?

103
00:06:48.690 --> 00:06:52.927
I cannot answer that question,
I don't know why 1 is so

104
00:06:52.927 --> 00:06:57.539
peculiar that we need a completely
different syntax for it.

105
00:06:57.539 --> 00:07:04.869
It doesn't make any sense to me at all,
I'd challenge anybody to defend that.

106
00:07:04.869 --> 00:07:07.136
&gt;&gt; Speaker 2: I'll give an answer.

107
00:07:07.136 --> 00:07:11.524
I think it was the one liner where it
was so common with copying an array or

108
00:07:11.524 --> 00:07:12.780
a portion of array.

109
00:07:12.780 --> 00:07:13.690
&gt;&gt; Douglas Crockford: Yeah.

110
00:07:13.690 --> 00:07:17.522
&gt;&gt; Speaker 2: And so
the arrays are the abstraction level, and

111
00:07:17.522 --> 00:07:20.149
understandably we saw the ++.

112
00:07:20.149 --> 00:07:24.784
Typically it was used in
the sort of block tool?

113
00:07:24.784 --> 00:07:29.435
&gt;&gt; Douglas Crockford: Yeah, which we've
since determined is a really bad idea,

114
00:07:29.435 --> 00:07:32.330
there's no reason to do it anymore.

115
00:07:32.330 --> 00:07:34.269
&gt;&gt; Speaker 2: We don't do it as often,
I think.

116
00:07:34.269 --> 00:07:39.709
&gt;&gt; Douglas Crockford: We shouldn't do it
at all, there is no justification for it.

117
00:07:39.709 --> 00:07:43.676
So for no cost,
by adopting a more rigorous style,

118
00:07:43.676 --> 00:07:47.939
many classes of errors can
be automatically avoided.

119
00:07:47.939 --> 00:07:52.096
Here's another one,
this is another of Thompson's,

120
00:07:52.096 --> 00:07:57.059
this is Thompson's fault,
bcpl had an if statement with a block.

121
00:07:57.059 --> 00:08:00.867
And in bcpl, the parents around
the condition were optional, but

122
00:08:00.867 --> 00:08:03.791
the braces around
the consequence were required.

123
00:08:03.791 --> 00:08:08.743
And that turned out to be right,
Thompson had been working

124
00:08:08.743 --> 00:08:13.100
in Fortran and PL1, and
they did it the other way.

125
00:08:13.100 --> 00:08:18.700
So he decided to make the pairings
around the condition required.

126
00:08:18.700 --> 00:08:23.497
And the braces optional,
which turns out be wrong because it

127
00:08:23.497 --> 00:08:27.930
encourages stuff like this,
this looks like this one.

128
00:08:27.930 --> 00:08:34.270
If a is true, we'll call b and c, but it's
not, it's going to call c unconditionally.

129
00:08:34.270 --> 00:08:39.140
This causes errors all the time,
this is a really common source of errors.

130
00:08:39.140 --> 00:08:43.689
So, my advice is, figure out which of
these you mean, and write that instead.

131
00:08:43.689 --> 00:08:46.349
So always put the curly
braces in every time,

132
00:08:46.349 --> 00:08:50.761
even if there's only one little thing
behind it, put the curly braces on.

133
00:08:50.761 --> 00:08:55.685
It makes it much more likely that the next
person who has to fix your code is

134
00:08:55.685 --> 00:08:58.860
going to be able to fix
it without breaking it.

135
00:08:58.860 --> 00:09:04.029
And that turns out to be a really
good thing, the counterargument is,

136
00:09:04.029 --> 00:09:08.600
I don't have time,
because you have to go, [SOUND], so hard.

137
00:09:08.600 --> 00:09:13.356
This is a great trade off for
two characters, you can make your code so

138
00:09:13.356 --> 00:09:17.050
much more robust in the face
of agile development.

139
00:09:17.050 --> 00:09:22.364
I mean, this should be an easy trade off,
always put the curly braces in,

140
00:09:22.364 --> 00:09:25.640
it makes your program so
much more reliable.

141
00:09:25.640 --> 00:09:29.360
So as our processes become more agile,
our coding must be more resilient.

142
00:09:31.730 --> 00:09:37.273
So I would characterize bad
stylists in one of four classes,

143
00:09:37.273 --> 00:09:40.870
first, there are the under educated.

144
00:09:40.870 --> 00:09:47.661
We see a lot of these in the web, people
who had no formal training in programming.

145
00:09:47.661 --> 00:09:53.269
Learned most of what they know from
doing view source on really bad code.

146
00:09:53.269 --> 00:09:57.223
Often going through many
layers of imitation and

147
00:09:57.223 --> 00:10:03.310
crappification leading all the way
back to DreamLeader and other things.

148
00:10:03.310 --> 00:10:07.635
And I feel sad for those people,
they just never had a chance.

149
00:10:07.635 --> 00:10:08.849
&gt;&gt; Speaker 2: [COUGH]
&gt;&gt; Douglas Crockford: And

150
00:10:08.849 --> 00:10:10.331
then there are the old school guys.

151
00:10:10.331 --> 00:10:15.026
Guys who are coming to say
JavaScript from C++, or

152
00:10:15.026 --> 00:10:18.770
Java because that's where the jobs are.

153
00:10:18.770 --> 00:10:22.341
And they're resentful, they'd rather
be working in a man's language.

154
00:10:22.341 --> 00:10:27.252
But okay, I 'll write in your JavaScript,
but there's no way I'm

155
00:10:27.252 --> 00:10:32.269
going to know what I'm doing,
that's principle, which is crazy.

156
00:10:32.269 --> 00:10:35.674
I mean, JavaScript is the only
language that people feel good

157
00:10:35.674 --> 00:10:37.905
about not knowing what they're doing.

158
00:10:37.905 --> 00:10:40.043
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: And

159
00:10:40.043 --> 00:10:45.400
that's inexcusable, we're professionals,
programming language isn't complicated.

160
00:10:45.400 --> 00:10:49.352
And our principle tool,
you have to know what you're doing,

161
00:10:49.352 --> 00:10:51.100
even if it's JavaScript.

162
00:10:51.100 --> 00:10:55.747
So then there are the thrill
seekers who want to show off

163
00:10:55.747 --> 00:11:00.709
their mad skills by writing
code that they know is flimsy.

164
00:11:00.709 --> 00:11:02.719
Just to show that they can do it, and

165
00:11:02.719 --> 00:11:07.015
guys like that I think they should have
to wear helmets when they are coding.

166
00:11:07.015 --> 00:11:08.619
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: And

167
00:11:08.619 --> 00:11:13.198
then most dangerous
are the exhibitionists, who will study

168
00:11:13.198 --> 00:11:18.419
the standards and understand exactly
what the languages are doing.

169
00:11:18.419 --> 00:11:22.660
And exhaustively test them
across all implementations and

170
00:11:22.660 --> 00:11:27.930
find weird crazy stuff that no one would
ever expect you could do and do it.

171
00:11:27.930 --> 00:11:30.610
Just to show off that they
figured this out and can do it.

172
00:11:30.610 --> 00:11:35.008
So they write programs that
make no obvious sense just

173
00:11:35.008 --> 00:11:39.960
to show off what they can do and
I think that's mad.

174
00:11:39.960 --> 00:11:43.786
And they will say, that was intentional,
I know what I'm doing.

175
00:11:43.786 --> 00:11:45.215
&gt;&gt; Speaker 2: [COUGH]
&gt;&gt; Douglas Crockford: And I say, no,

176
00:11:45.215 --> 00:11:48.089
if you knew what you were doing,
you would not be doing that.

177
00:11:49.750 --> 00:11:54.220
&gt;&gt; Douglas Crockford: So, programs are the
most complicated things that humans make.

178
00:11:54.220 --> 00:11:58.713
And they have to be perfect and
we are far from perfect,

179
00:11:58.713 --> 00:12:01.460
I am a deeply flawed human being.

180
00:12:01.460 --> 00:12:06.683
And so I require a lot of discipline
in order to do this work, because it so

181
00:12:06.683 --> 00:12:11.240
hard, so designing a programming
style demands discipline.

182
00:12:11.240 --> 00:12:15.303
It should not be about selecting
features because they're liked or

183
00:12:15.303 --> 00:12:19.020
pretty familiar, or
because they reduce your keyboarding.

184
00:12:19.020 --> 00:12:22.527
It should be because they
help reduce your error rate,

185
00:12:22.527 --> 00:12:25.740
ultimately that's the only
thing that matters.

186
00:12:25.740 --> 00:12:29.010
The consequence is you are going to
be spending more time in the abyss.

187
00:12:29.010 --> 00:12:33.892
The abyss is this cold dark deep place
where you go after your tower of

188
00:12:33.892 --> 00:12:37.760
operators has collapsed
into a puddle of confusion.

189
00:12:37.760 --> 00:12:43.390
You just look into the darkness and
say, my god, what have I done?

190
00:12:43.390 --> 00:12:46.330
I used to think that everybody
should learn programming.

191
00:12:46.330 --> 00:12:47.997
I remember when I first learned it, and

192
00:12:47.997 --> 00:12:50.180
suddenly the world looked
really different to me.

193
00:12:50.180 --> 00:12:53.762
And I had these tools for
analyzing everything, and I thought, wow,

194
00:12:53.762 --> 00:12:56.390
this is great,
everybody should learn to do this.

195
00:12:56.390 --> 00:12:58.565
I don't think that anymore,

196
00:12:58.565 --> 00:13:04.309
I think I am able to do what I do because
there is something deeply wrong with me.

197
00:13:04.309 --> 00:13:07.527
Now so if a normal person
tries to do programming,

198
00:13:07.527 --> 00:13:13.540
they can usually write the statements and
all that, but then they have to debug.

199
00:13:13.540 --> 00:13:17.864
And they have to go down into the abyss,
and if they come back,

200
00:13:17.864 --> 00:13:22.700
they say, I'm changing majors,
I don't know how you guys do this.

201
00:13:22.700 --> 00:13:29.850
I can do this because there's this defect
in me, which, a couple of defects.

202
00:13:29.850 --> 00:13:35.026
One is, I am unreasonably optimistic,
I believe that

203
00:13:35.026 --> 00:13:41.110
I can go down into the abyss and
I will find it and I will come back.

204
00:13:41.110 --> 00:13:45.467
There's no reason to think that I should
be able to do that, but I think so and

205
00:13:45.467 --> 00:13:47.659
I can, normal people can't do that.

206
00:13:47.659 --> 00:13:52.050
Now, it turns out that optimism is why
I can't schedule worth a crap, right?

207
00:13:52.050 --> 00:13:55.612
Because yeah,
I should be able to do that, I can't, but

208
00:13:55.612 --> 00:13:58.450
why do I think I can
because I'm an optimist.

209
00:13:58.450 --> 00:14:02.445
You have to be an optimist
to do this work, but

210
00:14:02.445 --> 00:14:08.470
the other thing is the blackout,
which comes after the euphoria.

211
00:14:08.470 --> 00:14:12.279
That you go down there and
it's terrible and painful, and

212
00:14:12.279 --> 00:14:15.011
then you come back and you feel good.

213
00:14:15.011 --> 00:14:19.308
And you forget about it, and
we do that all the time, and

214
00:14:19.308 --> 00:14:22.980
that's why we don't
learn from our mistakes.

215
00:14:22.980 --> 00:14:25.811
And normal people don't
have that blackout and

216
00:14:25.811 --> 00:14:30.135
they remember their time in the abyss and
go, I'm not doing that again.

217
00:14:30.135 --> 00:14:34.595
So having discovered and
started accounting for my time and

218
00:14:34.595 --> 00:14:38.530
figuring out,
how much lost time do I have in my day?

219
00:14:38.530 --> 00:14:40.968
And how much of that was
spent keyboarding, no,

220
00:14:40.968 --> 00:14:42.580
most of it was spent down there.

221
00:14:42.580 --> 00:14:45.327
And so if I want to be
a more effective developer,

222
00:14:45.327 --> 00:14:47.340
I've got to spend less time there.

223
00:14:47.340 --> 00:14:49.332
That's the thing I should be optimizing,

224
00:14:49.332 --> 00:14:51.610
optimizing anything else
doesn't make sense.

