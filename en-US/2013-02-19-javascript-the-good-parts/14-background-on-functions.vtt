WEBVTT

1
00:00:00.140 --> 00:00:04.681
[MUSIC]

2
00:00:04.681 --> 00:00:07.450
&gt;&gt; Douglas Crockford: Okay,
act three, functions.

3
00:00:09.680 --> 00:00:12.010
So JavaScript has functions.

4
00:00:12.010 --> 00:00:15.390
In other languages you've got methods,
classes, constructors, modules and

5
00:00:15.390 --> 00:00:15.990
other stuff.

6
00:00:17.190 --> 00:00:18.770
JavaScript just has functions.

7
00:00:18.770 --> 00:00:25.270
So it uses one construct,
one concept to do all of these things.

8
00:00:25.270 --> 00:00:30.872
That's because functions are really
powerful, they can do all of these things.

9
00:00:30.872 --> 00:00:32.360
So we'll start with syntax.

10
00:00:32.360 --> 00:00:37.070
We have a function expression which
creates a function value, a function

11
00:00:37.070 --> 00:00:41.700
object, a function executable, the thing
that it returns you can then invoke.

12
00:00:43.170 --> 00:00:45.440
So it starts with the keyword function.

13
00:00:45.440 --> 00:00:47.230
It can take an optional name.

14
00:00:47.230 --> 00:00:51.430
The name is used to allow the function
to call itself recursively,

15
00:00:51.430 --> 00:00:53.960
the name is also used by the debugger.

16
00:00:53.960 --> 00:00:57.279
So, usually the most useful reason
to put the name there is so

17
00:00:57.279 --> 00:01:01.398
that when you're looking at the stack
traces, you can see where you were.

18
00:01:01.398 --> 00:01:06.563
Then it can take a set of parameters
wrapped in parentheses and

19
00:01:06.563 --> 00:01:12.740
then a body that's wrapped in curly
braces containing some statements.

20
00:01:16.455 --> 00:01:19.105
So it will produce an instance
of a function object.

21
00:01:19.105 --> 00:01:22.415
Function objects are first class,
which means they can be

22
00:01:22.415 --> 00:01:25.395
passed as arguments to a function,
they can be returned from a function,

23
00:01:25.395 --> 00:01:29.075
can be assigned from a variable,
may be stored in an object or array.

24
00:01:29.075 --> 00:01:33.950
So you can use functions
just like we use numbers.

25
00:01:33.950 --> 00:01:38.400
They go everywhere, they can be passed
around, which is an unusual thing.

26
00:01:38.400 --> 00:01:40.970
In Java,
you tend not to pass methods around.

27
00:01:40.970 --> 00:01:43.440
But in JavaScript it's very
easy to pass functions.

28
00:01:44.450 --> 00:01:48.474
And functions being objects,
they inherit from Function.prototype.

29
00:01:48.474 --> 00:01:52.480
Since Function.prototype
has functions on it.

30
00:01:52.480 --> 00:01:55.051
Essentially it means every
function has methods.

31
00:01:58.713 --> 00:02:01.533
&gt;&gt; Douglas Crockford: Functions have
a declare statement which declares and

32
00:02:01.533 --> 00:02:05.050
initializes variables
defined within the function.

33
00:02:05.050 --> 00:02:08.720
We don't specify types at that point
because we are a loosely typed language.

34
00:02:08.720 --> 00:02:11.995
We just declare that something's
a function and we don't say, or

35
00:02:11.995 --> 00:02:13.985
we declare that something is variable,

36
00:02:13.985 --> 00:02:16.920
we don't declare what kinds
of variables it will contain.

37
00:02:18.230 --> 00:02:22.340
And a variable declared anywhere
within a function is visible

38
00:02:22.340 --> 00:02:23.460
everywhere within the function.

39
00:02:24.510 --> 00:02:27.710
So you could declare something
in an innermost block.

40
00:02:27.710 --> 00:02:30.543
It's going to be visible
outside of that block.

41
00:02:32.665 --> 00:02:35.330
&gt;&gt; Douglas Crockford: We talked about
that earlier, I think I'll skip it.

42
00:02:35.330 --> 00:02:39.310
Okay, to make things more confusing,
there's also a function statement, and

43
00:02:39.310 --> 00:02:41.840
this is often the thing that people use.

44
00:02:41.840 --> 00:02:45.410
And the thing that's unfortunate
is they look identical.

45
00:02:46.830 --> 00:02:51.070
So the function statement also
has the keyword function.

46
00:02:51.070 --> 00:02:52.660
The name, in this case, is mandatory.

47
00:02:52.660 --> 00:02:54.970
You have to supply the name
of the function, but

48
00:02:54.970 --> 00:02:57.050
it has the same parameters and
the same body.

49
00:02:59.650 --> 00:03:05.511
So the function statement,
function foo() is short-hand for

50
00:03:05.511 --> 00:03:12.767
creating a variable, receiving
the function expression of function foo().

51
00:03:17.597 --> 00:03:20.432
&gt;&gt; Douglas Crockford: So function
expression and function statement,

52
00:03:20.432 --> 00:03:22.520
it's a little confusing.

53
00:03:22.520 --> 00:03:26.470
If the first token of a statement is
function, then it is a function statement.

54
00:03:28.570 --> 00:03:31.470
In the standard they're not even called
function statements, they're called

55
00:03:31.470 --> 00:03:35.080
function declarations, but they're
commonly called function statements.

56
00:03:36.790 --> 00:03:41.270
And one of the limitations of function
statements is they have to be declared at

57
00:03:41.270 --> 00:03:45.960
the top level of a function,
they can't be inside of a block.

58
00:03:45.960 --> 00:03:49.175
And that's because they do
this weird hoisting thing, so

59
00:03:49.175 --> 00:03:54.190
putting a function inside of an if
statement doesn't make sense.

60
00:03:54.190 --> 00:03:59.599
Now it turns out all JavaScript engines
try to make some sense out of that,

61
00:03:59.599 --> 00:04:05.110
but they all do something different so
there's not a reliable form there.

62
00:04:05.110 --> 00:04:07.060
We talked about block scope and

63
00:04:07.060 --> 00:04:12.186
function scope,
&gt;&gt; Douglas Crockford: So

64
00:04:12.186 --> 00:04:14.250
I don't think we need to that again.

65
00:04:14.250 --> 00:04:17.400
So declare all your variables
at the top of the function, and

66
00:04:17.400 --> 00:04:19.930
declare all of your functions
before you call them.

67
00:04:19.930 --> 00:04:25.230
The language provides mechanisms to allow
you to ignore that advice, but it's weird.

68
00:04:25.230 --> 00:04:29.610
In languages in which functions
are static things, then the ordering

69
00:04:29.610 --> 00:04:33.060
doesn't make much difference, but in
JavaScript, functions are dynamic things.

70
00:04:34.770 --> 00:04:38.419
And so something happens when
the function statement gets executed.

71
00:04:39.930 --> 00:04:40.936
So because of that,

72
00:04:40.936 --> 00:04:44.734
confusion can occur if you don't respect
the order in which things happen.

73
00:04:46.947 --> 00:04:49.740
&gt;&gt; Douglas Crockford: We have a return
statement which has two forms.

74
00:04:49.740 --> 00:04:54.390
You can either return the result of
an expression or return nothing.

75
00:04:54.390 --> 00:04:57.520
You don't actually return nothing,
you're returning undefined.

76
00:04:57.520 --> 00:05:00.863
So every function always returns
something when it finishes.

77
00:05:03.493 --> 00:05:06.875
&gt;&gt; Douglas Crockford: And
in addition to variables and parameters,

78
00:05:06.875 --> 00:05:12.000
each function receives two pseudo
parameters, arguments and this.

79
00:05:14.070 --> 00:05:18.627
Arguments is an array-like thing
containing all the arguments that were

80
00:05:18.627 --> 00:05:20.620
actually passed to a function.

81
00:05:21.982 --> 00:05:26.240
It is array-like in that it has a length
operator or length property, but

82
00:05:26.240 --> 00:05:27.960
otherwise it is not an array.

83
00:05:29.830 --> 00:05:33.890
And in some engines there's a weird
interaction between this and

84
00:05:33.890 --> 00:05:38.150
the actual parameters, so
that if you change a value

85
00:05:38.150 --> 00:05:42.950
in the arguments array,
the corresponding parameter also changes.

86
00:05:44.410 --> 00:05:47.990
The makers of JavaScript
engines hate this,

87
00:05:47.990 --> 00:05:51.170
because it makes it really hard
to make their code be fast and

88
00:05:51.170 --> 00:05:56.330
efficient when there's any possibility of
variables suddenly changing unexpectedly.

89
00:05:58.980 --> 00:06:00.380
So we can use arguments for

90
00:06:00.380 --> 00:06:03.520
doing functions with variable
numbers of arguments.

91
00:06:03.520 --> 00:06:06.610
So here, I want to write a sum
function which will go through

92
00:06:06.610 --> 00:06:10.100
some undetermined number of parameters.

93
00:06:10.100 --> 00:06:12.690
We can loop through arguments for

94
00:06:12.690 --> 00:06:15.550
each element of it,
add things up, and return a sum.

95
00:06:16.930 --> 00:06:18.660
So is this a good time to break?

96
00:06:18.660 --> 00:06:19.200
&gt;&gt; Speaker 2: Yeah.

97
00:06:19.200 --> 00:06:21.659
&gt;&gt; Douglas Crockford: Okay, so let's stop
here for an hour or so for lunch, and

98
00:06:21.659 --> 00:06:22.698
then we'll finish up.

99
00:06:25.275 --> 00:06:27.321
&gt;&gt; Douglas Crockford: Okay,
it's time to talk about this.

100
00:06:29.081 --> 00:06:31.304
&gt;&gt; Douglas Crockford: The this
parameter or pseudo parameter,

101
00:06:31.304 --> 00:06:34.760
contains a reference to
an object of invocation.

102
00:06:34.760 --> 00:06:39.650
This is one of the big code reuse ideas
in JavaScript, where we can have a single

103
00:06:39.650 --> 00:06:45.160
inherited function which can work on many,
many objects and the way that function

104
00:06:45.160 --> 00:06:49.660
knows which object it is currently
working on is by the this binding.

105
00:06:49.660 --> 00:06:52.720
This allows a method to know what
object it is concerned with.

106
00:06:53.810 --> 00:06:56.130
And it is the key to
prototypal inheritance.

107
00:06:58.110 --> 00:07:03.220
Then we have the invocation operator,
the brackets or the parens,

108
00:07:03.220 --> 00:07:07.690
which is a suffix operator surrounding
zero or more comma separated arguments,

109
00:07:07.690 --> 00:07:11.470
and each of those arguments
will be bound to parameters.

110
00:07:11.470 --> 00:07:13.664
If the function is called
with too many arguments,

111
00:07:13.664 --> 00:07:16.040
the extra arguments are ignored.

112
00:07:16.040 --> 00:07:18.145
And if a function is called
with too few arguments,

113
00:07:18.145 --> 00:07:20.515
the missing ones will be set to undefined.

114
00:07:20.515 --> 00:07:24.466
There is no implicit type
checking on the arguments, but

115
00:07:24.466 --> 00:07:28.995
all of the arguments will be passed
through the arguments array,

116
00:07:28.995 --> 00:07:33.880
even if there were more or less than
were indicated by the parameters.

117
00:07:33.880 --> 00:07:38.720
There are four ways to call a function,
four forms of invocation.

118
00:07:38.720 --> 00:07:42.760
The function form, the method form,
the constructor form and the apply form.

119
00:07:44.150 --> 00:07:46.150
So we'll start with the method form.

120
00:07:46.150 --> 00:07:48.210
In the method form we have an object.

121
00:07:49.520 --> 00:07:55.930
Then something that designates the method,
and then the arguments.

122
00:07:55.930 --> 00:08:01.820
When a function is called in the method
form, this is set to this object,

123
00:08:01.820 --> 00:08:05.230
which is the object containing
the function or inheriting the function.

124
00:08:05.230 --> 00:08:08.569
This allows methods to have
a reference to the object of interest.

125
00:08:10.530 --> 00:08:12.110
Then there is function form.

126
00:08:12.110 --> 00:08:15.280
Function form looks the same except
it doesn't have the prefix on it that

127
00:08:15.280 --> 00:08:17.710
indicates a specific object.

128
00:08:17.710 --> 00:08:22.920
When a function is called with a function
form this is bound to the global object,

129
00:08:22.920 --> 00:08:25.300
which turned out was a big
mistake in the language.

130
00:08:25.300 --> 00:08:28.666
It was fixed in ES5 strict.

131
00:08:28.666 --> 00:08:35.010
Going into the future, this will be
bound to undefined instead, which still

132
00:08:35.010 --> 00:08:38.380
isn't perfect but it's much less wrong
than being bound to the global object.

133
00:08:40.320 --> 00:08:45.080
An inter function does not get access
to the this of an outer function,

134
00:08:45.080 --> 00:08:46.220
which is sometimes a problem.

135
00:08:46.220 --> 00:08:50.900
If you have a method with an internal
helper method, or helper function,

136
00:08:50.900 --> 00:08:54.710
that helper function doesn't get
access to the method's this,

137
00:08:54.710 --> 00:08:57.500
because every function gets its own this.

138
00:08:57.500 --> 00:09:01.410
So the work around is to have the outer
function create its own variable called

139
00:09:01.410 --> 00:09:07.840
that, bind this to that, and that is
then available to the inner function.

140
00:09:10.310 --> 00:09:13.620
Then there's constructor form that
looks just like the function form

141
00:09:13.620 --> 00:09:16.120
except that it has the new prefix.

142
00:09:16.120 --> 00:09:19.780
When a function is called with the new
operator, a new object is created and

143
00:09:19.780 --> 00:09:21.350
assigned to this.

144
00:09:21.350 --> 00:09:25.470
And if there is not an explicit return
value, then this will be returned.

145
00:09:26.490 --> 00:09:28.590
And this is used in
the pseudo classical style.

146
00:09:28.590 --> 00:09:29.950
We'll get to that in a little bit.

147
00:09:31.030 --> 00:09:35.540
And finally there's the apply form,
in which a function is called through

148
00:09:35.540 --> 00:09:40.540
its apply or call method, and in this
case, this object is explicitly passed in.

149
00:09:40.540 --> 00:09:44.790
And this allows you to save now for

150
00:09:44.790 --> 00:09:48.740
this call, this function,
this is what this will be.

151
00:09:52.160 --> 00:09:54.610
So this the summary in a chart.

152
00:09:56.540 --> 00:09:59.190
What this will be depends
on the invocation form.

153
00:10:00.710 --> 00:10:04.630
If it's called as a function,
it will be either the global object or

154
00:10:04.630 --> 00:10:08.040
undefined, depending on what version
of the language you're running in.

155
00:10:09.180 --> 00:10:13.560
If it's a method,
it will be the object of interest.

156
00:10:13.560 --> 00:10:15.540
If it's a constructor,
it will be a new object.

157
00:10:15.540 --> 00:10:19.610
And if it's the apply form, you explicitly
say what it's going to be as an argument.

158
00:10:22.290 --> 00:10:25.700
Functions in JavaScript have side effects

159
00:10:25.700 --> 00:10:29.210
which makes them different than
mathematical functions which don't.

160
00:10:30.230 --> 00:10:35.720
And it turns out having side effects makes
some things harder to reason about but

161
00:10:35.720 --> 00:10:38.470
makes other things much
easier to reason about.

162
00:10:38.470 --> 00:10:42.451
We'll talk more about this later in
the afternoon in the monad talk.

