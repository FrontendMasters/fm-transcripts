WEBVTT

1
00:00:00.000 --> 00:00:05.700
[MUSIC]

2
00:00:05.700 --> 00:00:08.197
&gt;&gt; Douglas Crockford: So they will tell
you that in order to understand monads,

3
00:00:08.197 --> 00:00:10.250
you must first learn Haskell.

4
00:00:10.250 --> 00:00:12.280
It's that's where you start, and

5
00:00:12.280 --> 00:00:16.560
you have to learn category theory,
without those monads are meaningless.

6
00:00:17.740 --> 00:00:21.980
I think that's like saying in order
to understand burritos you must first

7
00:00:21.980 --> 00:00:22.865
learn Spanish.

8
00:00:22.865 --> 00:00:25.510
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Douglas Crockford: And

9
00:00:25.510 --> 00:00:28.320
it turns out that's just not true.

10
00:00:28.320 --> 00:00:33.030
Without knowing any Spanish
you can order a burrito,

11
00:00:33.030 --> 00:00:35.780
you can eat the burrito,
you can enjoy the burrito.

12
00:00:35.780 --> 00:00:39.520
You can even make your own burritos,
you can invent new kinds of burritos.

13
00:00:39.520 --> 00:00:42.490
You can do all of that
without learning Spanish.

14
00:00:42.490 --> 00:00:44.320
Now I'm not saying you
shouldn't learn Spanish,

15
00:00:44.320 --> 00:00:46.990
there are really good
reasons to learn Spanish.

16
00:00:46.990 --> 00:00:52.000
If you really wanna get deep into Mexican
cuisine, if you wanna make more authentic

17
00:00:52.000 --> 00:00:56.880
burritos or other things which are even
better learning Spanish certainly helps.

18
00:00:56.880 --> 00:01:00.580
Learning Spanish allows you to have
relationships with people you would never

19
00:01:00.580 --> 00:01:02.030
meet otherwise.

20
00:01:02.030 --> 00:01:05.270
If you're one of the job creators,
it makes it possible to talk directly

21
00:01:05.270 --> 00:01:07.900
to the people who are actually
doing your work for you.

22
00:01:07.900 --> 00:01:10.920
There are lots of good
reasons to learn Spanish, and

23
00:01:10.920 --> 00:01:13.120
similarly there are good
reasons to learn Haskell.

24
00:01:13.120 --> 00:01:17.578
Haskell is an amazing language,
there is much it can teach you, but

25
00:01:17.578 --> 00:01:21.819
you don't need to learn Haskell
in order to understand monads.

26
00:01:21.819 --> 00:01:25.500
So they would say, no, that's not true.

27
00:01:25.500 --> 00:01:29.900
Before you can understand monads,
you have to understand that.

28
00:01:29.900 --> 00:01:34.950
That's where it all begins, and unless you
understand that, it's all meaningless.

29
00:01:34.950 --> 00:01:37.570
And I'm saying, no, that's not true.

30
00:01:37.570 --> 00:01:42.270
If you have the juevos, you don't
need this, you can get past this.

31
00:01:42.270 --> 00:01:46.390
They will tell you that you need the type
system that is build into Haskell

32
00:01:46.390 --> 00:01:49.670
in order to manage
the complexity of monads.

33
00:01:49.670 --> 00:01:54.520
Without that type safety it's impossible,
and I'm telling you that's not true.

34
00:01:54.520 --> 00:01:58.615
If you have the chicharrones you will find
that the type system is actually making

35
00:01:58.615 --> 00:02:01.590
things harder, not easier.

36
00:02:01.590 --> 00:02:06.470
So the place we need to begin is
first we have to learn JavaScript,

37
00:02:06.470 --> 00:02:11.360
cuz it turns out JavaScript is the perfect
language for expressing monads.

38
00:02:11.360 --> 00:02:16.320
And here it is, okay, we've got
a unit function that takes a value,

39
00:02:16.320 --> 00:02:22.160
we have a bind function that takes a monad
and a function that takes a value.

40
00:02:22.160 --> 00:02:27.570
So three functions,
they all return monads, that's it.

41
00:02:27.570 --> 00:02:29.880
Now okay, so what's a monad?

42
00:02:29.880 --> 00:02:31.690
A monad is an object.

43
00:02:31.690 --> 00:02:36.800
Okay so, we've got unit, it's a function
that takes a value and returns an object.

44
00:02:36.800 --> 00:02:40.420
If you know anything about JavaScript you
might say that sounds like a constructor.

45
00:02:40.420 --> 00:02:41.460
Is unit a constructor?

46
00:02:42.860 --> 00:02:44.950
Yes, you're absolutely right,
unit is a constructor.

47
00:02:46.380 --> 00:02:48.980
So we already know about constructors,
so if there's any magic here,

48
00:02:48.980 --> 00:02:50.880
it has to be in the bind function, right?

49
00:02:53.550 --> 00:02:56.780
So yeah, that's where the magic is, and
it turns out there's not much magic here.

50
00:02:58.380 --> 00:03:03.120
So, of course, there's more to
it than that, the monad axioms.

51
00:03:03.120 --> 00:03:10.162
The first two axioms describe
the relationships between bid and unit.

52
00:03:10.162 --> 00:03:11.186
And the third one,

53
00:03:11.186 --> 00:03:15.100
which is the really powerful one is
the one that describes composition.

54
00:03:17.110 --> 00:03:20.075
And composition turns out to
be what what this all about.

55
00:03:20.075 --> 00:03:26.001
It's a way of taking functions and
putting them together in colorful ways,

56
00:03:26.001 --> 00:03:29.992
which is what we've been
learning about it today.

57
00:03:29.992 --> 00:03:34.100
So the monads are usually described
in the function form, but

58
00:03:34.100 --> 00:03:37.813
I think it would be more
convenient to methodize them and

59
00:03:37.813 --> 00:03:42.150
turn them into a method form,
because it's easier.

60
00:03:42.150 --> 00:03:44.890
And we know how to do this,
this is a trivial transformation.

61
00:03:44.890 --> 00:03:47.370
This is the object already transformed,
right?

62
00:03:47.370 --> 00:03:50.120
And we do this in
JavaScript all the time and

63
00:03:50.120 --> 00:03:53.810
we can be doing stuff either in
method space or in function space and

64
00:03:53.810 --> 00:03:58.380
we generally choose the one which is most
convenient and that's how we do it, right?

65
00:03:58.380 --> 00:04:00.390
So nothing mysterious there.

66
00:04:02.720 --> 00:04:07.680
So this is our monad thing.

67
00:04:07.680 --> 00:04:09.480
We'll talk about what this is in a moment.

68
00:04:09.480 --> 00:04:11.660
First, something about the colorization.

69
00:04:11.660 --> 00:04:15.700
So you noticed I've got this
coloring scheme here, and

70
00:04:15.700 --> 00:04:17.980
I've been using this all day.

71
00:04:17.980 --> 00:04:21.638
So you are all familiar with
something called syntax coloring?

72
00:04:21.638 --> 00:04:23.537
Anybody heard of that?

73
00:04:23.537 --> 00:04:26.051
It's something that we have in IDEs and

74
00:04:26.051 --> 00:04:31.260
text editors to make it easier for
kindergarteners to write programs.

75
00:04:31.260 --> 00:04:36.075
It uses bright happy colors
to say that's a string and

76
00:04:36.075 --> 00:04:41.534
that's an operator just so
that everybody knows what it is.

77
00:04:41.534 --> 00:04:45.699
I don't see much value in syntax coloring,
cuz I'm more sort of a grown up.

78
00:04:45.699 --> 00:04:49.287
And I don't have any trouble
figuring out what's a string and

79
00:04:49.287 --> 00:04:52.720
what's an operator and
what's a variable name and so on.

80
00:04:52.720 --> 00:04:58.300
What I want is context coloring,
because I have lots of nested functions.

81
00:04:58.300 --> 00:05:03.220
And I want to know immediately
where something was defined,

82
00:05:03.220 --> 00:05:05.310
because that turns out to be important.

83
00:05:05.310 --> 00:05:08.060
So here I'm using context coloring.

84
00:05:10.230 --> 00:05:12.490
So white means the global scope,

85
00:05:12.490 --> 00:05:16.116
green is all functions that
are defined at the top level.

86
00:05:16.116 --> 00:05:19.440
Functions defined inside
of those are yellow,

87
00:05:19.440 --> 00:05:21.740
functions inside of those are blue.

88
00:05:23.090 --> 00:05:27.180
And within those functions,
any variables that are closed

89
00:05:27.180 --> 00:05:31.390
over outer functions have the color
that they were defined with.

90
00:05:31.390 --> 00:05:34.500
In that way I can see where
all the functions are and

91
00:05:34.500 --> 00:05:36.900
where their variables came from and
it makes it much more easier for

92
00:05:36.900 --> 00:05:40.720
me to recognize what's actually
going on in the function.

93
00:05:40.720 --> 00:05:44.700
And I wish someone would write me a text
editor that's got this kind of coloring in

94
00:05:44.700 --> 00:05:47.190
it, cuz the other coloring
doesn't help me at all.

95
00:05:47.190 --> 00:05:48.440
And this would be great.

96
00:05:50.600 --> 00:05:54.790
Now another thing that happens
in monads is, in some languages,

97
00:05:54.790 --> 00:05:58.390
like in Common Lisp where they
have powerful macro systems.

98
00:05:58.390 --> 00:06:01.543
Someone will create a macro library for
creating monads,

99
00:06:01.543 --> 00:06:05.250
because most monads
are structurally very similar.

100
00:06:05.250 --> 00:06:08.130
And then you use those macros and

101
00:06:08.130 --> 00:06:11.910
just specify how your monad is different
than the standard monad and you're done.

102
00:06:12.960 --> 00:06:17.060
JavaScript unfortunately doesn't
have back rows, at least not yet.

103
00:06:18.500 --> 00:06:20.970
But it does have functions and

104
00:06:20.970 --> 00:06:26.560
it does have objects and with those
it's possible to get really close.

105
00:06:26.560 --> 00:06:29.198
So this thing here is a macroid,

106
00:06:29.198 --> 00:06:34.699
it's a macro-like thing which we
will use for making other functions.

107
00:06:36.010 --> 00:06:39.190
And we kind of been playing
with those the all afternoon.

108
00:06:39.190 --> 00:06:42.900
So let me walk through this macroid,

109
00:06:42.900 --> 00:06:47.819
it's going to return the unit function,
okay?

110
00:06:47.819 --> 00:06:54.850
And the unit function will make objects
that contain a bind method, okay?

111
00:06:54.850 --> 00:06:57.900
So that's pretty much all we have here,
right?

112
00:06:57.900 --> 00:07:02.161
And the bind method, takes a function and

113
00:07:02.161 --> 00:07:08.128
receives the value that was
used to initialized the unit,

114
00:07:08.128 --> 00:07:13.752
and passes that value to the function,
and that is it.

115
00:07:13.752 --> 00:07:16.450
EK mono behold the monad.

116
00:07:18.710 --> 00:07:20.870
Yeah, that's it, that's really all it is.

117
00:07:20.870 --> 00:07:28.620
So this is how you would call it,
we would make our unit by calling MONAD.

118
00:07:28.620 --> 00:07:30.660
We'll pass the unit, Hello world.

119
00:07:30.660 --> 00:07:35.060
We'll say, monad.bind(alert) [SOUND],
Hello world.

120
00:07:35.060 --> 00:07:37.020
That is it, that is the MONAD.

121
00:07:38.600 --> 00:07:41.800
Not that complicated, is it?

122
00:07:41.800 --> 00:07:44.690
So this particular monad is
called the identity monad.

123
00:07:44.690 --> 00:07:48.440
All it does is take a value and give
the value back to bind, and that's it.

124
00:07:48.440 --> 00:07:52.456
And all other monads grow from this one,
and add additional complexity,

125
00:07:52.456 --> 00:07:54.028
but this is where it starts.

126
00:07:56.571 --> 00:07:58.931
&gt;&gt; Douglas Crockford: And
these are the axioms,

127
00:07:58.931 --> 00:08:03.560
it's kind of amazing that
this really is all it is.

128
00:08:03.560 --> 00:08:05.680
But you got to read those tutorials, and

129
00:08:05.680 --> 00:08:09.230
you'll get no sense that
this is all this is.

130
00:08:09.230 --> 00:08:13.850
They get really complicated, and so
you wonder why these guys go around saying

131
00:08:13.850 --> 00:08:17.910
monad in mixed company without
actually telling anybody what it is.

132
00:08:17.910 --> 00:08:19.410
That it's really this basic thing.

133
00:08:21.520 --> 00:08:28.830
So these are the axioms rewritten
in our method notation, okay?

134
00:08:28.830 --> 00:08:34.250
So I think the first two actually start
to become a little bit clearer, but

135
00:08:34.250 --> 00:08:36.618
the really interesting
one is the third one.

136
00:08:36.618 --> 00:08:41.141
The composition axiom, particularly

137
00:08:41.141 --> 00:08:45.941
when you compare it to what it was before.

138
00:08:45.941 --> 00:08:50.680
It used to be that we were having to
write in this inside-out pattern, right?

139
00:08:50.680 --> 00:08:53.570
Whereas now we can just
string things along and

140
00:08:53.570 --> 00:08:56.870
the composition becomes much easier.

141
00:08:56.870 --> 00:09:01.170
In fact, if any of you have done
any amount of Ajax programming,

142
00:09:01.170 --> 00:09:03.130
this might start to look kind of familiar.

143
00:09:03.130 --> 00:09:08.440
We've got an object.method.method,
where have you seen that before?

144
00:09:08.440 --> 00:09:11.240
You've seen it everywhere,
every place on the web.

145
00:09:11.240 --> 00:09:14.270
This is how we do it,
this is the Ajax monad, right?

146
00:09:14.270 --> 00:09:16.440
We've been doing this stuff all along and
we didn't know it.

