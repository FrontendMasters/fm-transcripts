WEBVTT

1
00:00:00.000 --> 00:00:04.728
[MUSIC]

2
00:00:04.728 --> 00:00:07.770
&gt;&gt; Douglas Crockford: So
has anyone heard of Monads?

3
00:00:07.770 --> 00:00:09.630
Monads ring a bell?

4
00:00:09.630 --> 00:00:15.900
So Monads is this thing from category
theory that found its way into Haskell,

5
00:00:15.900 --> 00:00:18.595
which solves a particular
problem that Haskell has.

6
00:00:20.320 --> 00:00:24.900
And it turns out to be
a generally useful concept, but

7
00:00:24.900 --> 00:00:26.876
there's this amazing
curse that comes with it.

8
00:00:26.876 --> 00:00:29.996
Once someone understands Monads,

9
00:00:29.996 --> 00:00:34.572
they lose the ability to
explain it to anybody else.

10
00:00:34.572 --> 00:00:36.130
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Douglas Crockford: So

11
00:00:36.130 --> 00:00:40.500
you can go out on the web, and
you can search for monad tutorial, and

12
00:00:40.500 --> 00:00:42.813
read all the stuff that comes back.

13
00:00:42.813 --> 00:00:46.790
And everyone's going, yeah,
this is the thing you need to know.

14
00:00:46.790 --> 00:00:51.860
And you read it and it makes no sense
at all, and there's tons of it.

15
00:00:51.860 --> 00:00:58.110
So Monads are this functional pattern
which are incredibly powerful and very

16
00:00:58.110 --> 00:01:02.189
expressive but at the same time completely
impossible to explain to people.

17
00:01:03.460 --> 00:01:06.065
So I'm gonna attempt to break
the curse today to give you

18
00:01:06.065 --> 00:01:08.783
enough knowledge about this so
that you can actually go and

19
00:01:08.783 --> 00:01:11.962
read that stuff and go, yeah,
I know what they're talking about.

20
00:01:14.168 --> 00:01:16.170
&gt;&gt; Douglas Crockford: Cuz
it's interesting stuff.

21
00:01:16.170 --> 00:01:19.009
So this starts in Functional Programming.

22
00:01:20.180 --> 00:01:25.440
And as we talked about this morning, there
are two senses of Functional Programming.

23
00:01:25.440 --> 00:01:28.800
There is the sense that we
use in programming languages,

24
00:01:28.800 --> 00:01:31.440
which is programming with functions,
right?

25
00:01:31.440 --> 00:01:35.890
And any language which has functions,
which is virtually every language,

26
00:01:35.890 --> 00:01:38.519
if you program with those functions,
then you're doing functional programming.

27
00:01:39.570 --> 00:01:43.060
So this found its way into
programming languages with

28
00:01:43.060 --> 00:01:47.810
FORTRAN II in 1958
There's the declaration.

29
00:01:47.810 --> 00:01:52.650
It was written in all caps because the
FORTRAN character set only had uppercase.

30
00:01:52.650 --> 00:01:55.400
But except for that,
it looks remarkably modern, right,

31
00:01:55.400 --> 00:01:58.980
with JavaScript's
functions look like that.

32
00:01:58.980 --> 00:02:01.540
It didn't have a variable statement,
but it had a dimension statement.

33
00:02:03.260 --> 00:02:07.470
Weirdly, variables were
declared by default.

34
00:02:07.470 --> 00:02:10.690
So if you just used a variable without
declaring it and assumed it was a local

35
00:02:10.690 --> 00:02:13.680
variable, which is actually a lot
smarter than what JavaScript does.

36
00:02:13.680 --> 00:02:16.710
JavaScript assumes it's a global variable,
which is very bad.

37
00:02:19.430 --> 00:02:22.270
And FORTRAN had types, so

38
00:02:22.270 --> 00:02:26.290
it had integer types and real types, but
you didn't have to tell which one it was.

39
00:02:26.290 --> 00:02:31.320
And the way they figured it out was,
if it started with an I, J, K, L, M or N,

40
00:02:31.320 --> 00:02:34.290
it was an integer, and if it started
with any other letter, it was real.

41
00:02:36.444 --> 00:02:39.060
Yeah, [LAUGH] like that didn't
cause any problems, right?

42
00:02:39.060 --> 00:02:43.800
And then if you wanted to make something
global, then you would call it COMMON.

43
00:02:43.800 --> 00:02:47.420
COMMON was FORTRAN's word for
global, so you'd declare it there.

44
00:02:48.540 --> 00:02:51.760
Then the return statement didn't
have an expression on it.

45
00:02:51.760 --> 00:02:57.120
So to tell FORTRAN what value to return,
you would have

46
00:02:57.120 --> 00:03:01.500
an assignment to the name of the function
within the body of the function, and

47
00:03:01.500 --> 00:03:02.640
that would set the return value.

48
00:03:02.640 --> 00:03:05.660
So that when you finally hit
the return statement or fell out,

49
00:03:05.660 --> 00:03:11.420
that would be the value that would go out,
so the last one of those would win.

50
00:03:11.420 --> 00:03:14.740
And instead of curly braces it just
had an END to mark the end of it.

51
00:03:17.040 --> 00:03:20.160
So that's sort of a boring
functional programming.

52
00:03:20.160 --> 00:03:23.030
Functional programming gets more
interesting when you have functions as

53
00:03:23.030 --> 00:03:25.760
first class objects
which we've been seeing.

54
00:03:25.760 --> 00:03:29.980
In a particular high order functions,
which you can pass functions around these

55
00:03:29.980 --> 00:03:35.400
arguments, you're starting to get a sense
that you can do some neat stuff with that.

56
00:03:35.400 --> 00:03:40.430
And it didn't become really good
until scheme showed us how to

57
00:03:40.430 --> 00:03:44.499
do lexical closure and then suddenly stuff
takes off and it get's really amazing.

58
00:03:45.980 --> 00:03:48.110
Now the other sense of
functional programming is

59
00:03:48.110 --> 00:03:52.330
Pure Functional Programming,
mathematical functional programming, where

60
00:03:52.330 --> 00:03:56.590
functions in programming languages behave
nothing like mathematical functions.

61
00:03:56.590 --> 00:04:02.630
Cuz a mathematical function returns the
same value every time you apply it, right?

62
00:04:02.630 --> 00:04:04.955
You never have a function that
will return one thing and

63
00:04:04.955 --> 00:04:07.970
then next time return something else.

64
00:04:07.970 --> 00:04:12.140
They're item potent,
they're immortal, they're different.

65
00:04:12.140 --> 00:04:18.420
So you can think of functions as maps,
so whether we pointed to something as

66
00:04:18.420 --> 00:04:23.640
a database or as computation is
just an efficiency argument,

67
00:04:23.640 --> 00:04:27.020
that both implementations
should be exactly the same.

68
00:04:27.020 --> 00:04:30.282
That would be one of the rules
with mathematical functions.

69
00:04:30.282 --> 00:04:33.570
Now, the argument for
wanting to program that way

70
00:04:34.960 --> 00:04:38.530
is that mathematical functions
are easier to reason about.

71
00:04:38.530 --> 00:04:42.200
And it's true, they are,
because for any function for

72
00:04:42.200 --> 00:04:44.994
any argument,
it will always do the same thing.

73
00:04:44.994 --> 00:04:49.462
Whereas, programming in real languages
gets more complicated because every time

74
00:04:49.462 --> 00:04:52.076
you call something,
it could be different, and

75
00:04:52.076 --> 00:04:55.220
one of those times it could be an error,
and it's harder.

76
00:04:56.690 --> 00:05:00.241
So reasoning about things is easier, so
there've been a lot of mathematicians,

77
00:05:00.241 --> 00:05:02.824
who've been saying programming
should be more like math.

78
00:05:04.894 --> 00:05:07.140
&gt;&gt; Douglas Crockford: That means
programming without side effects.

79
00:05:08.190 --> 00:05:12.420
Now, it's easy to turn Java Script
into a pure function language.

80
00:05:12.420 --> 00:05:14.600
You just have to remove
the assignment operators,

81
00:05:15.860 --> 00:05:19.030
get rid of loops because things
change inside of a loop, right.

82
00:05:19.030 --> 00:05:21.060
We can't have anything changing.

83
00:05:21.060 --> 00:05:24.040
So you use recursion instead.

84
00:05:24.040 --> 00:05:28.050
You can use recursive functions to
replace loops, that works really well.

85
00:05:28.050 --> 00:05:32.480
You would freeze all array literals and
object literals as soon as they're made.

86
00:05:32.480 --> 00:05:36.060
So you're not tempted
to try to mutate them.

87
00:05:36.060 --> 00:05:38.857
And you'd have to remove
things from the environment,

88
00:05:38.857 --> 00:05:42.249
like you'd have to remove date,
because every time you call date,

89
00:05:42.249 --> 00:05:45.008
you get a different time,
that's not mathematical.

90
00:05:45.008 --> 00:05:47.280
You have to get rid of random because
every time you call random you

91
00:05:47.280 --> 00:05:50.070
get a different value,
that's not mathematical.

92
00:05:50.070 --> 00:05:52.810
So you take all that stuff out and then
you're gonna have to take out the dome

93
00:05:54.200 --> 00:05:57.910
because every time you touch that it
changes, you can't change anything.

94
00:05:57.910 --> 00:06:02.070
And then you realize this is getting
really hard, because you're having to do,

95
00:06:02.070 --> 00:06:08.386
I own a system, in which nothing
changes and that doesn't work.

96
00:06:08.386 --> 00:06:12.770
So, you know,
we talked about Memoization before.

97
00:06:12.770 --> 00:06:15.250
It's one of the benefits
of being mathematical.

98
00:06:15.250 --> 00:06:17.250
Cuz you can memoize and everything works.

99
00:06:17.250 --> 00:06:20.830
So that's sort of dynamically making
the trade off between computation and

100
00:06:20.830 --> 00:06:22.260
storage, or mapping.

101
00:06:23.520 --> 00:06:28.250
Whereas, Caching, which is what
we do in mutating programming,

102
00:06:28.250 --> 00:06:30.880
is hard and it's often wrong.

103
00:06:30.880 --> 00:06:34.290
Cuz we're making bets on how long
some value's gonna be valid, so

104
00:06:34.290 --> 00:06:36.462
we don't have to go across
the network to get it again.

105
00:06:36.462 --> 00:06:40.270
And we're often wrong so

106
00:06:40.270 --> 00:06:45.650
if the world never mutated, then it
would be easier to always be right.

107
00:06:45.650 --> 00:06:48.180
But, of course,
the world doesn't work that way.

108
00:06:48.180 --> 00:06:52.440
In the real world,
everything changes all the time.

109
00:06:52.440 --> 00:06:56.440
And so having a programming language
in which everything must be immutable,

110
00:06:56.440 --> 00:06:58.919
makes interacting with
the world really hard.

111
00:07:00.180 --> 00:07:03.665
So there's this language called Haskell,
which is named after Haskell Curry,

112
00:07:03.665 --> 00:07:08.710
Schonfinkelization of

113
00:07:08.710 --> 00:07:13.940
Lambdas, and the Haskell
language doesn't know mutation.

114
00:07:13.940 --> 00:07:18.670
And if you're just doing pure computation,
it's perfect, it's wonderful.

115
00:07:18.670 --> 00:07:21.610
But if you then start to try to
extend the problem domain and

116
00:07:21.610 --> 00:07:26.450
have it become a practical language,
then suddenly things get really hard.

117
00:07:26.450 --> 00:07:29.190
And so they look for
someway that they could

118
00:07:29.190 --> 00:07:32.990
have something that was like mutation
without actually mutating anything.

119
00:07:34.120 --> 00:07:37.950
And they found something,
they found something in Monads.

120
00:07:37.950 --> 00:07:41.050
Monads come out of category theory
which is a branch of type theory.

121
00:07:42.300 --> 00:07:47.980
And Monads allow them to exploit
a whole and a function contract.

122
00:07:47.980 --> 00:07:51.930
A function contract is that every time you
call a function with the same argument,

123
00:07:51.930 --> 00:07:54.639
you have to get the same result and
cause no side effects.

124
00:07:56.330 --> 00:08:00.610
But if you pass a function as
a parameter to a function,

125
00:08:00.610 --> 00:08:02.070
well every function's different, right?

126
00:08:02.070 --> 00:08:05.410
Cuz it's gonna be a new invocation and
it's closed over something else that

127
00:08:05.410 --> 00:08:10.620
was never closed over before, so you're
constantly in this state of newness.

128
00:08:10.620 --> 00:08:11.920
And you can kind of push that,

129
00:08:11.920 --> 00:08:16.980
to kind of create the illusion of having
immutability even when you don't.

130
00:08:16.980 --> 00:08:22.340
So in Haskell,
they came up with the IO Monad,

131
00:08:22.340 --> 00:08:26.080
which makes it possible
to accumulate state.

132
00:08:26.080 --> 00:08:28.710
And one of the motivating examples is

133
00:08:29.960 --> 00:08:34.640
you want to be able to add
tracing to a set of functions.

134
00:08:35.880 --> 00:08:38.170
But do that without having IO.

135
00:08:39.450 --> 00:08:41.960
And the Monad provided
a way of doing that.

136
00:08:41.960 --> 00:08:45.075
And so if one of these Haskell guys
is trying to explain it to you,

137
00:08:45.075 --> 00:08:49.690
will try to be a Socratic, and they say,
okay, suppose you got a function and

138
00:08:49.690 --> 00:08:52.460
you want to trace it, how you do it?

139
00:08:52.460 --> 00:08:56.110
And say, well, I call it alert, but they
go, but you can't call any functions, so

140
00:08:56.110 --> 00:08:56.790
how would you do it?

141
00:08:58.080 --> 00:09:00.050
You go, well,
I guess I would have an array, and

142
00:09:00.050 --> 00:09:01.450
I'd append something to
the end of the array.

143
00:09:01.450 --> 00:09:05.040
They say, no, that's mutation,
you can't do that, so how would you do it?

144
00:09:05.040 --> 00:09:08.558
And they're all like this
is some amazing game but

145
00:09:08.558 --> 00:09:14.353
it's a solution to a problem you will
never have, and it doesn't make any sense.

146
00:09:14.353 --> 00:09:19.123
If you start there, you will never get to
anything which is meaningful to you, so

147
00:09:19.123 --> 00:09:21.383
that exercise is just a waste of time.

