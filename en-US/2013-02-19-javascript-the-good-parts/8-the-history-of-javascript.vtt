WEBVTT

1
00:00:00.000 --> 00:00:03.919
[MUSIC]

2
00:00:03.919 --> 00:00:06.809
&gt;&gt; Douglas Crockford: Okay, so
before we get into chapter two,

3
00:00:06.809 --> 00:00:09.377
were there any questions leftover?

4
00:00:09.377 --> 00:00:12.988
No, really?

5
00:00:12.988 --> 00:00:16.071
All right, so let's recap.

6
00:00:16.071 --> 00:00:23.375
First, there was the Big Bang,
then the Dawn of Man and then JavaScript.

7
00:00:23.375 --> 00:00:26.768
So I discovered that
JavaScript has good parts and

8
00:00:26.768 --> 00:00:31.066
this was the first important
discovery of the 21st century.

9
00:00:31.066 --> 00:00:32.060
Thank you and

10
00:00:32.060 --> 00:00:37.038
it was a surprising discovery when
I first published my results.

11
00:00:37.038 --> 00:00:42.668
There was enormous skepticism that no way
can't be any possibility that JavaScript

12
00:00:42.668 --> 00:00:47.516
actually has any good parts in it that
can't be true, but it is born out.

13
00:00:47.516 --> 00:00:48.718
It is in fact, true.

14
00:00:48.718 --> 00:00:52.810
JavaScript has some of the best parts
ever put into a programming language.

15
00:00:52.810 --> 00:00:56.300
So the old timers might remember Mosaic.

16
00:00:56.300 --> 00:00:59.120
It as the first popular web browser
developed at the University of

17
00:00:59.120 --> 00:01:03.510
Illinois by a bunch of kids there and
many of who are now extremely wealthy.

18
00:01:04.820 --> 00:01:08.370
They went off and some of them
started a company called Netscape,

19
00:01:10.100 --> 00:01:14.080
which made the first mass market browser.

20
00:01:14.080 --> 00:01:20.188
Their plan was to produce a browser,
get everybody to use it and

21
00:01:20.188 --> 00:01:24.235
then start charging $30 a year use it.

22
00:01:24.235 --> 00:01:28.610
Their ultimate plan was that everybody in
the world would give them $30 a year and

23
00:01:28.610 --> 00:01:29.870
that probably be okay.

24
00:01:29.870 --> 00:01:31.729
&gt;&gt; [LAUGH]
&gt;&gt; Douglas Crockford: But

25
00:01:31.729 --> 00:01:33.020
it didn't work out that way.

26
00:01:34.370 --> 00:01:40.553
So before then, Bill Atkinson at Apple
developed something called HyperCard.

27
00:01:40.553 --> 00:01:45.159
At that time, Apple was struggling
with the macintosh platform.

28
00:01:45.159 --> 00:01:49.334
They were having a difficult time
convincing developers to write for it.

29
00:01:49.334 --> 00:01:56.486
The difficulty was that macintosh required
an event driven programming model,

30
00:01:56.486 --> 00:02:01.745
which was the opposite of what
programmers were used at that

31
00:02:01.745 --> 00:02:07.334
time which was a conventional
blocking on read architecture.

32
00:02:07.334 --> 00:02:09.998
And they look at the mackintosh and
said, we can't write for that,

33
00:02:09.998 --> 00:02:10.904
it's all inside out.

34
00:02:10.904 --> 00:02:11.709
It's too hard.

35
00:02:11.709 --> 00:02:14.028
Wow, we can't do that.

36
00:02:14.028 --> 00:02:17.045
Atkinson designed this whole
thing called HyperCard.

37
00:02:17.045 --> 00:02:21.248
Took MacPaint and
allowed you to paint on several layers,

38
00:02:21.248 --> 00:02:23.752
and just lay any layer at one time.

39
00:02:23.752 --> 00:02:28.664
We called that a card and
you could attach to those cards buttons,

40
00:02:28.664 --> 00:02:33.667
and fields, and attached to those
event handlers which could read

41
00:02:33.667 --> 00:02:39.200
things like on-click and
on-mouse up and things like that.

42
00:02:39.200 --> 00:02:44.543
And added a friendly little scripting
language to make that easy to do and

43
00:02:44.543 --> 00:02:46.126
beginners loved it.

44
00:02:46.126 --> 00:02:50.467
They had no idea that this style of
programming was hard, nobody told them.

45
00:02:50.467 --> 00:02:55.244
So they wrote amazingly sophisticated
applications in HyperCard.

46
00:02:55.244 --> 00:02:59.060
And eventually the professional
developers say, well, if they can do it,

47
00:02:59.060 --> 00:03:00.082
I guess we can do it.

48
00:03:00.082 --> 00:03:04.772
And eventually took off in Macintosh in
the Windows and everything after that, but

49
00:03:04.772 --> 00:03:06.180
it sort of started here.

50
00:03:07.430 --> 00:03:12.220
And so the guys at Netscape thought,
they wanted a similar

51
00:03:12.220 --> 00:03:17.380
kind of capability in the Netscape
browser should be called Navigator.

52
00:03:17.380 --> 00:03:21.350
That beginners could very easily take
a web page, put some buttons and

53
00:03:21.350 --> 00:03:29.070
fields on it and make it interactive and
they got this guy to do it.

54
00:03:29.070 --> 00:03:31.240
This is Brendan Eich,
the creator of JavaScript.

55
00:03:32.340 --> 00:03:38.930
He was given about ten days to design and
implement a language that

56
00:03:38.930 --> 00:03:45.610
would do this which is an insanely short
amount of time to design, and implement

57
00:03:45.610 --> 00:03:49.650
a programming language, and the DOM, and
all the other crap that went with it.

58
00:03:50.750 --> 00:03:55.680
An amazing achievement, but
Netscape was a horrendously mismanage

59
00:03:55.680 --> 00:03:59.690
the company that go to
market with such an idea.

60
00:04:00.880 --> 00:04:04.950
So Brendan took from Java its syntax and

61
00:04:04.950 --> 00:04:08.590
if most of the bad parts of
JavaScript came from that lineage.

62
00:04:11.180 --> 00:04:15.538
He took scheme is a language
that was develop at MIT,

63
00:04:15.538 --> 00:04:22.088
which began as an experiment to try to
understand Carl Hewitt's actor model.

64
00:04:22.088 --> 00:04:27.018
Carl Hewitt is this amazingly smart guy
who got all excited about actors as a new

65
00:04:27.018 --> 00:04:29.944
paradigm for
how programming should be done.

66
00:04:29.944 --> 00:04:33.299
I think Carl was right, but there
are other guys at MIT who just couldn't

67
00:04:33.299 --> 00:04:35.230
understand what Carl was talking about.

68
00:04:35.230 --> 00:04:39.336
And so they decided to write
a Lisp dialect that would

69
00:04:39.336 --> 00:04:43.738
demonstrate some of good
things Carl is talking about.

70
00:04:43.738 --> 00:04:47.531
And in the process,
they accidentally invented Scheme.

71
00:04:47.531 --> 00:04:52.747
The best part of Scheme was functions
has first class objects with flexible

72
00:04:52.747 --> 00:04:58.212
scoping which hadn't been done before and
was brilliant, but the mainstream

73
00:04:58.212 --> 00:05:03.212
never bought into it, because Lisp
always had all those parenthesis.

74
00:05:03.212 --> 00:05:07.101
And at least when you're beginning,
you have to count them all and

75
00:05:07.101 --> 00:05:12.150
mainstream developers just had no
tolerance for that so it went nowhere.

76
00:05:12.150 --> 00:05:15.490
The first language to take that
idea to the mainstream and

77
00:05:15.490 --> 00:05:17.819
be successful with it was JavaScript.

78
00:05:19.680 --> 00:05:24.257
So in doing that and one of the audacious
thing to do that Brendan is designing

79
00:05:24.257 --> 00:05:27.331
a language for
beginners to do simple scripting and

80
00:05:27.331 --> 00:05:31.907
he takes one of the most powerful
features from experimental language, and

81
00:05:31.907 --> 00:05:34.861
sticks it in there, and
doesn't tell anybody.

82
00:05:34.861 --> 00:05:40.062
He didn't tell anybody that
he had done that amazing,

83
00:05:40.062 --> 00:05:46.969
then Self was another research language
being developed at Xerox PARC.

84
00:05:46.969 --> 00:05:54.094
Self was a dialect of Smalltalk and they
wanted to make Smalltalk more expressive,

85
00:05:54.094 --> 00:05:59.285
easier to program, more dynamic and
faster to implement and

86
00:05:59.285 --> 00:06:03.690
they did that by removing
classes from Smalltalk.

87
00:06:03.690 --> 00:06:07.072
Smalltalk was the first main stream
object computer programming.

88
00:06:07.072 --> 00:06:10.896
They took the classes out instead
had objects inherit directly from

89
00:06:10.896 --> 00:06:11.842
other objects.

90
00:06:11.842 --> 00:06:15.271
Removed a big level of
interaction in the process,

91
00:06:15.271 --> 00:06:18.712
came up with a language
which could be much faster.

92
00:06:18.712 --> 00:06:21.030
And more importantly,
much more expressive.

93
00:06:21.030 --> 00:06:25.290
So it became much easier to write highly
dynamic programs in this language.

94
00:06:25.290 --> 00:06:30.758
Brendan took that another feature
from an ignored research language and

95
00:06:30.758 --> 00:06:33.994
stuffed it into a language for beginners.

96
00:06:33.994 --> 00:06:38.679
Amazing and it turns out
the interaction of those two features,

97
00:06:38.679 --> 00:06:44.248
having dynamic prototypal objects with
functions as first class objects.

98
00:06:44.248 --> 00:06:47.160
Putting those together
was astonishingly smart.

99
00:06:48.420 --> 00:06:53.353
And so we ended up with something that
at the time we called LiveScript.

100
00:06:53.353 --> 00:06:59.157
Now at that same time in history,
Java was taking off.

101
00:06:59.157 --> 00:07:04.543
In 1995, Java was the biggest thing ever
to happen in the industry of software.

102
00:07:04.543 --> 00:07:06.775
Java applets were going to rule the world.

103
00:07:06.775 --> 00:07:11.603
Some promised that Java applets
would liberate us from Microsoft,

104
00:07:11.603 --> 00:07:16.948
because we would write to the virtual
machine not to the operating system.

105
00:07:16.948 --> 00:07:21.274
And therefore, we could get
off of Windows and be free and

106
00:07:21.274 --> 00:07:23.991
there's a lot of interest in that.

107
00:07:23.991 --> 00:07:28.062
At the same time, Netscape was making
a similar promise that we'll target all

108
00:07:28.062 --> 00:07:29.672
applications to the browser.

109
00:07:29.672 --> 00:07:31.085
The browser is OS independent.

110
00:07:31.085 --> 00:07:33.123
We'll be liberated from Microsoft.

111
00:07:33.123 --> 00:07:36.896
Together, we will destroy Microsoft and

112
00:07:36.896 --> 00:07:42.080
Netscape realized that they
needed to form an alliance.

113
00:07:42.080 --> 00:07:44.933
Because if they both win
against Microsoft on their own,

114
00:07:44.933 --> 00:07:49.540
Microsoft could play them off against
each other and they're both lose.

115
00:07:49.540 --> 00:07:55.310
So step one of their alliance,
add Java to the Netscape browser.

116
00:07:55.310 --> 00:07:57.141
Okay, Netscape agreed to do that.

117
00:07:57.141 --> 00:07:59.570
Step two, Son required.

118
00:07:59.570 --> 00:08:03.305
You kill LiveScript, because we've told
the world that JavaScript is the last

119
00:08:03.305 --> 00:08:05.211
language anyone's ever going to need.

120
00:08:05.211 --> 00:08:09.790
So it's really embarrassing to have this
other language in there, which isn't Java.

121
00:08:09.790 --> 00:08:13.647
We can't explain that,
that doesn't make sense of get rid of it.

122
00:08:13.647 --> 00:08:14.910
Netscape couldn't do that.

123
00:08:14.910 --> 00:08:17.504
Because for a couple of reasons,
one was a technical reason.

124
00:08:17.504 --> 00:08:23.974
And so they had this crappy DOM in there.

125
00:08:23.974 --> 00:08:28.167
It was called DOM zero or
later became called zero and

126
00:08:28.167 --> 00:08:32.276
LiveScript was able to talk to it and
do stuff to it.

127
00:08:32.276 --> 00:08:33.688
Java couldn't.

128
00:08:33.688 --> 00:08:38.791
So the way Netscape figure out
to get Java in there fast was to

129
00:08:38.791 --> 00:08:43.807
create a bridge LiveScript and
Java called LiveConnect.

130
00:08:43.807 --> 00:08:48.212
And that was a little API that allow the
script language to see Java objects, so

131
00:08:48.212 --> 00:08:50.747
they can kind of push the stuff back and
fort,

132
00:08:50.747 --> 00:08:55.191
that was the only mechanism by which
Java could communicate with the browser.

133
00:08:55.191 --> 00:08:59.891
And they didn't have time to
rearchitect that and take it out and

134
00:08:59.891 --> 00:09:03.037
create a new DOM, specifically for Java.

135
00:09:03.037 --> 00:09:07.899
The other reason was they wanted
a language that beginners could use and

136
00:09:07.899 --> 00:09:09.773
Java is not that language.

137
00:09:09.773 --> 00:09:13.660
You have to have a lot of knowledge about
Java in order to write hello world.

138
00:09:14.910 --> 00:09:16.965
So the barrier to entry is really high.

139
00:09:16.965 --> 00:09:18.219
Beginners can't do it.

140
00:09:18.219 --> 00:09:21.210
So they thought there was still
a mission for this language.

141
00:09:21.210 --> 00:09:23.237
So they refused to take it out.

142
00:09:23.237 --> 00:09:26.249
So they bickered about that and
they were at an impasse and

143
00:09:26.249 --> 00:09:28.269
their alliance was about to breakup.

144
00:09:28.269 --> 00:09:31.920
When Marc Andreessen,
one of the founders of Netscape,

145
00:09:31.920 --> 00:09:36.189
maybe as a joke suggested that they
change the name to JavaScript.

146
00:09:36.189 --> 00:09:41.905
And that the position it as a subset
of Java, a scriptable Java.

147
00:09:41.905 --> 00:09:46.808
Java's stupid little brother
interpreted Java which is crazy,

148
00:09:46.808 --> 00:09:49.669
because Java once interpreted Java.

149
00:09:49.669 --> 00:09:52.611
So they went out in public and they lied.

150
00:09:52.611 --> 00:09:55.674
They lied about what this
programming language was and

151
00:09:55.674 --> 00:09:58.546
what it's relationship to
the world was gonna be.

152
00:09:58.546 --> 00:10:02.634
Now through all of this, Microsoft started
to notice there are these two companies in

153
00:10:02.634 --> 00:10:05.032
California that are about
to destroy Microsoft.

154
00:10:05.032 --> 00:10:07.583
So we need to look into this.

155
00:10:07.583 --> 00:10:13.857
At that point in time, Microsoft's opinion
of the future telecommunications was fax.

156
00:10:13.857 --> 00:10:16.703
So they completely missed the web.

157
00:10:16.703 --> 00:10:19.636
And so when they saw Netscape's
during the heat up, they decided,

158
00:10:19.636 --> 00:10:21.494
okay, we need to get into the we business.

159
00:10:21.494 --> 00:10:26.643
So they bought a company called
SpyGlass that was another spin off from

160
00:10:26.643 --> 00:10:32.935
University of Illinois, relabeled it as
Internet Explorer 1 and got into the race.

161
00:10:32.935 --> 00:10:37.465
They also wanted to knock off JavaScript,
so they created their own

162
00:10:37.465 --> 00:10:42.530
language called VBScript which
they hope would eventually win.

163
00:10:42.530 --> 00:10:47.610
But to hedge their bets, they also
reverse engineered JavaScript and

164
00:10:47.610 --> 00:10:51.920
they did the best job of reverse
engineering in the history of Microsoft.

165
00:10:53.220 --> 00:10:58.086
They looked very carefully
at what had done and

166
00:10:58.086 --> 00:11:03.375
found every error,
every design defect, every mistake,

167
00:11:03.375 --> 00:11:07.732
carefully cataloged them and
replicated them.

168
00:11:07.732 --> 00:11:13.453
Usually Microsoft can't resist
doing things the Microsoft way.

169
00:11:13.453 --> 00:11:18.183
But in this case, they went the high
fidelity way which is why we're here.

170
00:11:18.183 --> 00:11:21.245
Cuz if they had done what they usually do,
there would have been no

171
00:11:21.245 --> 00:11:25.213
compatibility between the two and the
language would have died, but they didn't.

172
00:11:25.213 --> 00:11:28.390
And because of that high protection,
it still survives.

173
00:11:28.390 --> 00:11:30.954
Now they didn't want
to call it JavaScript,

174
00:11:30.954 --> 00:11:34.664
because Son took on a ship of
the JavaScript trademark even though

175
00:11:34.664 --> 00:11:37.780
they had nothing to do with
the design of the language.

176
00:11:37.780 --> 00:11:40.623
At that time,
Son was shaking down coffee companies.

177
00:11:40.623 --> 00:11:44.584
Because they were using the word Java,
this was true.

178
00:11:44.584 --> 00:11:47.898
So Microsoft decided to call it JScript.

179
00:11:47.898 --> 00:11:51.468
So then it got taken to Netscape.

180
00:11:51.468 --> 00:11:54.785
I don't know we're gonna get embraced and
extended, so

181
00:11:54.785 --> 00:11:57.698
need to get a standard to
keep Microsoft in check.

182
00:11:57.698 --> 00:11:59.777
So they went to W3C.

183
00:11:59.777 --> 00:12:02.926
So W3C, we developed this language for
the web.

184
00:12:02.926 --> 00:12:06.445
We'd like you to standardize it and
it turned out W3C had been waiting for

185
00:12:06.445 --> 00:12:08.336
a chance to tell Netscape to go to hell.

186
00:12:08.336 --> 00:12:10.484
&gt;&gt; [LAUGH]
&gt;&gt; Douglas Crockford: So

187
00:12:10.484 --> 00:12:12.892
they told Netscape to go to hell.

188
00:12:12.892 --> 00:12:16.797
So Netscape shopped around looking for
another standards body they tried ISO.

189
00:12:16.797 --> 00:12:23.016
Eventually they ended up at the European
Ccomputer Manufacturers Association and

190
00:12:23.016 --> 00:12:27.542
which has a long way to go for
a California software company,

191
00:12:27.542 --> 00:12:30.586
and ECMA agreed to to create a standard.

192
00:12:30.586 --> 00:12:34.206
So they convened a committee and
Microsoft join the committee, and

193
00:12:34.206 --> 00:12:36.251
Microsoft dominated the committee.

194
00:12:36.251 --> 00:12:40.692
So when questions came up like Brendan
wanted to fix the double equal operator,

195
00:12:40.692 --> 00:12:44.619
he thought as long as we're standardizing,
now is the time to fix it.

196
00:12:44.619 --> 00:12:46.020
Microsoft said, no.

197
00:12:47.040 --> 00:12:51.097
All of those defects have been so
carefully cataloged and

198
00:12:51.097 --> 00:12:55.673
identified, and replicated
are now locked into the standard.

199
00:12:55.673 --> 00:12:59.671
The last bit of business they had was
what do we call it, cuz Netscape said,

200
00:12:59.671 --> 00:13:01.393
you can't call it JavaScript.

201
00:13:01.393 --> 00:13:05.349
Because that's a Son's trademark and
we have an exclusive license to use it, so

202
00:13:05.349 --> 00:13:07.105
you have to call it something else.

203
00:13:07.105 --> 00:13:11.138
At that point, ECMA should have told
them to go to hell, but they didn't.

204
00:13:11.138 --> 00:13:15.500
And they kicked around different
titles like Netscript, Webscript.

205
00:13:15.500 --> 00:13:19.810
It couldn't agree on anything, so they
published it with the working title was

206
00:13:19.810 --> 00:13:24.250
ECMAScript which is maybe the stupidest
name ever put on a programming language,

207
00:13:24.250 --> 00:13:25.556
but that's what it is.

208
00:13:25.556 --> 00:13:29.952
And the people who are still confused
about who think that JavaScript,

209
00:13:29.952 --> 00:13:33.178
JScript and
ECMAScript are different languages and

210
00:13:33.178 --> 00:13:36.924
they're not they are synonyms for
the same silly language.

211
00:13:38.821 --> 00:13:44.358
&gt;&gt; Douglas Crockford: So the language
that is an IE6 was the third edition,

212
00:13:44.358 --> 00:13:47.936
which was published in 1999.

213
00:13:47.936 --> 00:13:51.621
The fifth edition didn't come
out til ten years later,

214
00:13:51.621 --> 00:13:55.634
the fourth edition was abandoned and
it was never approved.

215
00:13:55.634 --> 00:14:00.069
That's a long time between editions,
but it turned out that was really good.

216
00:14:00.069 --> 00:14:05.470
Because joining the browser wars, the web
as a platform was a extremely unstable.

217
00:14:07.170 --> 00:14:11.988
Netscape and Microsoft were pumping
bugs into the web at a furious rate, and

218
00:14:11.988 --> 00:14:15.463
it was really hard for
developers to keep up with that.

219
00:14:15.463 --> 00:14:20.268
Also bugs tended not to disappear,
they would just get added on to.

220
00:14:20.268 --> 00:14:26.118
And so it really wasn't feasible to
write JavaScript programs at that time,

221
00:14:26.118 --> 00:14:29.814
but having ten years in
which nothing happened.

222
00:14:29.814 --> 00:14:35.038
Our allowed for the language becomes
stable and often with stability is

223
00:14:35.038 --> 00:14:41.044
much more important than anything else,
because you know where the errors are and

224
00:14:41.044 --> 00:14:44.977
you are not gonna get tricked or
trapped to confused.

225
00:14:44.977 --> 00:14:50.867
And so in 2005, it was possible for
AJAX to take off,

226
00:14:50.867 --> 00:14:55.913
because the language had sat around for
so long.

227
00:14:55.913 --> 00:14:58.625
So the new language defines
actually two languages.

228
00:14:58.625 --> 00:15:01.906
There's a default language and
a strict mode.

229
00:15:01.906 --> 00:15:05.276
And I recommend that in the short-term,

230
00:15:05.276 --> 00:15:09.523
if you have to run an IE6 or
anything before IE10.

231
00:15:09.523 --> 00:15:14.591
They will be working in
the intersection of ES5 and Strict.

232
00:15:14.591 --> 00:15:16.230
That turns out that's multiple language.

233
00:15:16.230 --> 00:15:18.215
So that's a pretty easy place to live.

234
00:15:18.215 --> 00:15:20.867
In the long-term,
you wanna be working in ES5/Strict,

235
00:15:20.867 --> 00:15:23.260
because that's gonna be
the future of the language.

236
00:15:23.260 --> 00:15:26.090
The next edition will be
built on top of that.

237
00:15:26.090 --> 00:15:32.133
Avoid the default language, because
that's going to be a default language.

238
00:15:32.133 --> 00:15:35.504
Why does JavaScript have so
many bad parts?

239
00:15:35.504 --> 00:15:40.997
A lot of it is due to legacy
that it borrows a lot from C and

240
00:15:40.997 --> 00:15:45.424
Java, and those languages got a lot wrong.

241
00:15:45.424 --> 00:15:48.072
And somehow we're more forgiving
of it in those languages.

242
00:15:48.072 --> 00:15:52.930
When we see those mistakes in Java for
some reason, they just seem nastier.

243
00:15:52.930 --> 00:15:57.795
Also there are a lot of good intentions
that Brendan put in very quickly like

244
00:15:57.795 --> 00:16:03.080
semicolon insertion and the width
statement which turned out not to be good,

245
00:16:03.080 --> 00:16:06.190
and there's a lot of that in the language.

246
00:16:06.190 --> 00:16:08.359
We'll be talking a lot about that.

247
00:16:08.359 --> 00:16:09.701
But mostly, it was haste.

248
00:16:09.701 --> 00:16:14.065
I mean,
he had ten days to figure this stuff out.

249
00:16:14.065 --> 00:16:19.256
In contrast, Smalltalk which
was developed at Xerox Parc,

250
00:16:19.256 --> 00:16:25.260
they spent almost as many years as
Brendan spent days in this design and

251
00:16:25.260 --> 00:16:27.936
perfecting of that language.

252
00:16:27.936 --> 00:16:30.270
Smalltalk is a brilliant design.

253
00:16:30.270 --> 00:16:35.138
There is brilliance in JavaScript,
but there is a lot more that is not.

254
00:16:35.138 --> 00:16:38.640
The good news is for the most part,
the bad parts can be avoided and

255
00:16:38.640 --> 00:16:42.092
the problem with the bad parts
isn't that they're useless,.

256
00:16:42.092 --> 00:16:43.432
It's that they're dangerous.

257
00:16:43.432 --> 00:16:45.690
And so
it requires discipline to avoid their use.

