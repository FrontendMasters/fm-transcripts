WEBVTT

1
00:00:00.000 --> 00:00:04.886
[MUSIC]

2
00:00:04.886 --> 00:00:06.226
&gt;&gt; Douglas Crockford: Yeah,
everybody ready?

3
00:00:06.226 --> 00:00:07.690
Okay, here's the next one.

4
00:00:09.000 --> 00:00:11.670
Write a function that takes a function and
an argument, and

5
00:00:11.670 --> 00:00:15.470
returns a function that can
supply a second argument.

6
00:00:15.470 --> 00:00:17.400
So this is sometimes
called the curry function.

7
00:00:17.400 --> 00:00:21.713
So curry(add,
3) produces an add3 function, and

8
00:00:21.713 --> 00:00:25.004
we can call that with 4 and it returns 7.

9
00:00:29.444 --> 00:00:31.059
&gt;&gt; Douglas Crockford: Does
anyone need more time?

10
00:00:34.841 --> 00:00:37.890
&gt;&gt; Douglas Crockford: All right,
so here it is.

11
00:00:37.890 --> 00:00:41.519
Function curry takes a function and
a first parameter and

12
00:00:41.519 --> 00:00:44.997
returns a function that takes
a second parameter, and

13
00:00:44.997 --> 00:00:49.098
returns a result of calling
the function with both parameters.

14
00:00:49.098 --> 00:00:50.318
Who got this one?

15
00:00:50.318 --> 00:00:55.344
Outstanding, who's still
struggling with this,

16
00:00:55.344 --> 00:00:58.093
and,
&gt;&gt; Douglas Crockford: Where

17
00:00:58.093 --> 00:00:59.070
are you getting hung up?

18
00:01:00.460 --> 00:01:04.290
&gt;&gt; Speaker 2: I think a key point I was
missing on the first example was that

19
00:01:04.290 --> 00:01:08.570
the function that's being provided
is expected to take two parameters.

20
00:01:08.570 --> 00:01:13.220
I was trying to play in my head with the
function that could take more than two,

21
00:01:13.220 --> 00:01:15.050
and that was really
tripping me up to try and

22
00:01:15.050 --> 00:01:19.060
figure out when I should actually be
invoking the function in question.

23
00:01:19.060 --> 00:01:21.055
&gt;&gt; Douglas Crockford: That's interesting,
we'll talk about that in a minute.

24
00:01:21.055 --> 00:01:21.960
&gt;&gt; Speaker 2: Yeah.

25
00:01:21.960 --> 00:01:23.137
&gt;&gt; Douglas Crockford: Anybody else?

26
00:01:23.137 --> 00:01:23.821
&gt;&gt; Speaker 3: Same as him.

27
00:01:23.821 --> 00:01:28.897
&gt;&gt; Douglas Crockford: Yeah, okay,
so this is called currying.

28
00:01:28.897 --> 00:01:31.220
It's also called schonfinkelisation.

29
00:01:32.950 --> 00:01:35.590
It's called currying after Haskell Curry,

30
00:01:35.590 --> 00:01:40.910
a mathematician who did work on
lambdas and functional forms.

31
00:01:40.910 --> 00:01:43.870
The idea of being able to take
a function of many arguments and

32
00:01:43.870 --> 00:01:47.740
turn it into something where you express
functions having only single arguments,

33
00:01:47.740 --> 00:01:51.560
make certain kinds of transformations
easier to reason about.

34
00:01:51.560 --> 00:01:56.251
And there's some consensus that
Schonfinkel came up with this stuff before

35
00:01:56.251 --> 00:01:57.138
Haskell did.

36
00:01:57.138 --> 00:02:00.169
So they think it should be
called schonfinkelisation, but

37
00:02:00.169 --> 00:02:03.270
that's not really catching on,
so it's called currying.

38
00:02:04.590 --> 00:02:09.090
Now another way you could have written
this, this is for extra credit,

39
00:02:09.090 --> 00:02:13.215
you could've used the applyf
function that you already wrote and

40
00:02:13.215 --> 00:02:15.390
done it in terms of that.

41
00:02:15.390 --> 00:02:20.477
So I don't suppose anybody did that one,
but you would get an extra credit.

42
00:02:22.808 --> 00:02:26.164
&gt;&gt; Douglas Crockford: Then some people
like to write this for any number of

43
00:02:26.164 --> 00:02:32.190
arguments, not just one, but have many
arguments going into the currying.

44
00:02:32.190 --> 00:02:35.940
And unfortunately, that is horrible
to do in the current language,

45
00:02:35.940 --> 00:02:39.400
because the arguments array
is not really an array.

46
00:02:39.400 --> 00:02:43.400
And so you have to do all of this horrible
stuff to get around the fact that it

47
00:02:43.400 --> 00:02:45.080
is not an array.

48
00:02:45.080 --> 00:02:48.090
Calling things off of Array.prototype, and

49
00:02:48.090 --> 00:02:53.660
slicing in order to convert it from
one form to another, terrible.

50
00:02:53.660 --> 00:02:59.110
In the next edition of ECMAScript, we'll
probably have a dot dot dot operator,

51
00:02:59.110 --> 00:03:04.239
which looks exactly like the other
solution, except you have dot dot dot for

52
00:03:04.239 --> 00:03:09.630
everything which could represent
multiple arguments, which is brilliant.

53
00:03:09.630 --> 00:03:12.338
This is gonna be my second favorite
feature in the next edition of

54
00:03:12.338 --> 00:03:13.801
the language if it ever comes out.

55
00:03:15.306 --> 00:03:18.367
&gt;&gt; Douglas Crockford: So
any questions about curry before we go

56
00:03:18.367 --> 00:03:19.814
on to the next one?

57
00:03:22.263 --> 00:03:25.011
&gt;&gt; Douglas Crockford: So
if you've had dot dot-

58
00:03:25.011 --> 00:03:26.252
&gt;&gt; Speaker 2: Looks like that.

59
00:03:26.252 --> 00:03:26.913
&gt;&gt; Douglas Crockford: Yeah,
you're struggling with that, right?

60
00:03:26.913 --> 00:03:27.492
&gt;&gt; Speaker 2: Right.

61
00:03:27.492 --> 00:03:28.440
&gt;&gt; Douglas Crockford: I feel your pain.

62
00:03:28.440 --> 00:03:29.790
That is really awful,

63
00:03:29.790 --> 00:03:34.360
awful code, whereas this would have
been just dot dot dot, give me more.

64
00:03:35.460 --> 00:03:36.680
Okay, so now the next one.

65
00:03:37.740 --> 00:03:43.009
Without writing any new functions, show
three ways to create the inc function,

66
00:03:43.009 --> 00:03:45.267
where the inc adds one to a number.

67
00:03:50.294 --> 00:03:52.571
&gt;&gt; Speaker 2: We can't write
the inc function ahead.

68
00:03:52.571 --> 00:03:53.771
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Douglas Crockford: No,

69
00:03:53.771 --> 00:03:55.949
you're writing no new functions,

70
00:03:55.949 --> 00:03:59.369
only calling functions that
you've already written.

71
00:04:01.477 --> 00:04:03.617
&gt;&gt; Douglas Crockford: Show three
ways to create an inc function.

72
00:04:12.665 --> 00:04:15.329
&gt;&gt; Douglas Crockford: This is
where it starts to become useful,

73
00:04:15.329 --> 00:04:20.137
where we can use functions as factories
for making sets of related things.

74
00:04:26.535 --> 00:04:27.245
&gt;&gt; Douglas Crockford: In this case,

75
00:04:27.245 --> 00:04:30.577
you've already written three
functions that know how to do this.

76
00:04:35.678 --> 00:04:37.246
&gt;&gt; Douglas Crockford: All right,
so here we go.

77
00:04:37.246 --> 00:04:41.760
Number 1, addf(1).

78
00:04:41.760 --> 00:04:45.073
Number 2, applyf(add)(1).

79
00:04:45.073 --> 00:04:49.882
And curry(add, 1).

80
00:04:50.960 --> 00:04:55.307
So who got all three?

81
00:04:55.307 --> 00:04:56.534
You think you did?

82
00:04:56.534 --> 00:04:58.850
Who got two?

83
00:04:58.850 --> 00:05:01.450
&gt;&gt; Speaker 2: I forgot
that we had written addf.

84
00:05:01.450 --> 00:05:04.374
I didn't realize you wanted
three different inc quotations.

85
00:05:04.374 --> 00:05:06.464
&gt;&gt; Douglas Crockford: Yeah,
and who got one?

86
00:05:06.464 --> 00:05:09.620
Okay, and who struggled with this one?

87
00:05:12.171 --> 00:05:15.974
&gt;&gt; Douglas Crockford: So the point of this
one was part of the value of thinking in

88
00:05:15.974 --> 00:05:21.820
functions is looking for work that you
have already done and factoring that in.

89
00:05:21.820 --> 00:05:25.345
The whole point of this is,
surprising as it may seem right now,

90
00:05:25.345 --> 00:05:26.600
is avoidance of work.

91
00:05:29.537 --> 00:05:31.341
&gt;&gt; Douglas Crockford: Okay,
write methodize,

92
00:05:31.341 --> 00:05:35.200
a function that converts
a binary function to a method.

93
00:05:36.320 --> 00:05:41.179
So here, we're gonna create
Number.prototype.add and

94
00:05:41.179 --> 00:05:44.004
pass in the methodization of add.

95
00:05:46.224 --> 00:05:50.663
&gt;&gt; Douglas Crockford: So methodize has to
create a function that will use this as

96
00:05:50.663 --> 00:05:53.721
one of the parameters to the addition.

97
00:06:04.485 --> 00:06:05.951
&gt;&gt; Douglas Crockford: Any
questions about this?

98
00:06:08.235 --> 00:06:10.720
&gt;&gt; Speaker 2: I can't really
wrap my head on the problem.

99
00:06:10.720 --> 00:06:13.220
&gt;&gt; Douglas Crockford: Okay, so
one of the interesting things, okay, so

100
00:06:13.220 --> 00:06:17.050
numbers are objects in JavaScript,
which means they can have methods.

101
00:06:17.050 --> 00:06:20.878
So when you call a number method,
this gets bound to the number.

102
00:06:20.878 --> 00:06:21.547
&gt;&gt; Speaker 2: Right.

103
00:06:23.328 --> 00:06:27.264
&gt;&gt; Douglas Crockford: So
the add method takes only one parameter

104
00:06:27.264 --> 00:06:31.658
because the other
parameter comes with this.

105
00:06:34.751 --> 00:06:37.940
&gt;&gt; Douglas Crockford: But we're trying to
transform the original add function which

106
00:06:37.940 --> 00:06:40.080
took two parameters.

107
00:06:40.080 --> 00:06:44.152
So we want to return a function which
takes the add that we pass in and

108
00:06:44.152 --> 00:06:47.006
returns a function that
knows how to use this.

109
00:06:50.293 --> 00:06:53.522
&gt;&gt; Douglas Crockford: So the point of this
is if you have an existing function and

110
00:06:53.522 --> 00:06:58.234
you need a function which is exactly the
same, except slightly different in form,

111
00:06:58.234 --> 00:07:00.616
you don't have to rewrite the function.

112
00:07:06.677 --> 00:07:07.884
&gt;&gt; Douglas Crockford: Okay, so here it is.

113
00:07:10.280 --> 00:07:14.840
Methodize returns a function
that takes a y that

114
00:07:14.840 --> 00:07:19.058
returns the calling of func with this and
y.

115
00:07:21.326 --> 00:07:22.706
&gt;&gt; Douglas Crockford: So who got this one?

116
00:07:24.477 --> 00:07:27.124
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Douglas Crockford: [LAUGH] And

117
00:07:27.124 --> 00:07:31.927
then this shows in ES6, it will be easy
to have functions that aren't just

118
00:07:31.927 --> 00:07:36.429
binary functions, but functions of
any arity with the dot dot thing,

119
00:07:36.429 --> 00:07:40.190
which will be nice, but
that's the one I was looking for.

120
00:07:41.870 --> 00:07:45.292
So was this one harder
maybe than the other ones?

121
00:07:45.292 --> 00:07:46.543
And why was that?

122
00:07:51.723 --> 00:07:52.280
&gt;&gt; Douglas Crockford: Anybody?

123
00:07:54.040 --> 00:07:56.840
&gt;&gt; Speaker 2: I originally thought I
could get away with using curry this,

124
00:07:56.840 --> 00:07:59.900
but that did not work out.

125
00:08:01.060 --> 00:08:03.100
Cuz my list was not properly scoped.

126
00:08:05.290 --> 00:08:08.638
&gt;&gt; Douglas Crockford: Yeah, this is
problematic within functions that you only

127
00:08:08.638 --> 00:08:10.152
get to use it at one level.

128
00:08:10.152 --> 00:08:12.020
&gt;&gt; Speaker 2: Can we go back
one screen just for a second?

129
00:08:12.020 --> 00:08:14.355
&gt;&gt; Douglas Crockford: Yeah,
let's see with the other one.

130
00:08:41.269 --> 00:08:42.370
&gt;&gt; Douglas Crockford: Okay,
ready for the next one?

131
00:08:44.610 --> 00:08:46.190
Okay, write demethodize.

132
00:08:47.860 --> 00:08:51.460
Demethodize is a function that converts
a method to a binary function.

133
00:08:52.460 --> 00:08:57.437
So we're gonna reverse what we
did to Number.prototope.add so

134
00:08:57.437 --> 00:09:02.873
that after we demothodize it,
we can now again pass it two parameters.

135
00:09:05.502 --> 00:09:08.452
&gt;&gt; Douglas Crockford: So we'll take a
function that takes this kind of parameter

136
00:09:08.452 --> 00:09:11.231
and turn it into a function
that takes two parameters.

137
00:09:18.870 --> 00:09:23.379
&gt;&gt; Douglas Crockford: [LAUGH]
&gt;&gt; Speaker 3: [LAUGH]

138
00:09:37.626 --> 00:09:38.481
&gt;&gt; Douglas Crockford: So I'm curious,

139
00:09:38.481 --> 00:09:39.906
who's thinking this is fun?

140
00:09:39.906 --> 00:09:41.945
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Douglas Crockford: [LAUGH] And

141
00:09:41.945 --> 00:09:43.776
who's thinking this is work?

142
00:09:43.776 --> 00:09:45.295
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Douglas Crockford: [LAUGH] And

143
00:09:45.295 --> 00:09:46.560
who's thinking it's torture?

144
00:09:49.672 --> 00:09:54.132
Not a-
&gt;&gt; Speaker 2: This feels like the kind of

145
00:09:54.132 --> 00:10:00.068
code you write to exercise
a compiler [INAUDIBLE] business.

146
00:10:00.068 --> 00:10:01.871
It feels like a job [INAUDIBLE].

147
00:10:01.871 --> 00:10:03.931
&gt;&gt; Douglas Crockford: [LAUGH] Well,
I'm happy to tell you,

148
00:10:03.931 --> 00:10:05.731
there's no job at the end of it.

149
00:10:05.731 --> 00:10:11.948
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Speaker 2: This is great material for

150
00:10:11.948 --> 00:10:12.675
interviews.

151
00:10:12.675 --> 00:10:14.770
[LAUGH]
&gt;&gt; Douglas Crockford: Yeah,

152
00:10:15.990 --> 00:10:18.180
I'll tell you my opinion on that.

153
00:10:18.180 --> 00:10:22.925
I don't believe in stunts as
part of the interview process.

154
00:10:22.925 --> 00:10:27.531
The thing I like to do is invite
people to bring in some code that they

155
00:10:27.531 --> 00:10:32.242
wrote that they're proud of and
review it and have an independent.

156
00:10:32.242 --> 00:10:35.105
Cuz I wanna see what
they think is good code.

157
00:10:35.105 --> 00:10:36.478
I want to see how it's constructed.

158
00:10:36.478 --> 00:10:38.468
I wanna see how it's commented,
all that stuff.

159
00:10:38.468 --> 00:10:44.314
I don't get any of that from trivia
questions or stunts or anything like that.

160
00:10:46.805 --> 00:10:49.310
&gt;&gt; Douglas Crockford: Also,
I would get a lot of that stuff wrong.

161
00:10:49.310 --> 00:10:52.538
If someone starts asking me about
corner cases of the language,

162
00:10:52.538 --> 00:10:55.404
what would you do if you saw
some code that look like that,

163
00:10:55.404 --> 00:10:57.937
I would say I would find that guy and
I'd fire him.

164
00:10:57.937 --> 00:11:01.161
[LAUGH] And I can't tell you
what that code actually does.

165
00:11:01.161 --> 00:11:01.875
I don't care.

166
00:11:01.875 --> 00:11:06.856
&gt;&gt; Speaker 2: Probably talking
&gt;&gt; Douglas Crockford: All right,

167
00:11:06.856 --> 00:11:07.590
so here it is.

168
00:11:09.010 --> 00:11:13.018
Demethodize takes a function and

169
00:11:13.018 --> 00:11:17.310
returns a function and that and y and

170
00:11:17.310 --> 00:11:25.338
uses the call method on the function
in order to set this with that.

171
00:11:28.030 --> 00:11:31.770
&gt;&gt; Douglas Crockford: So we talked
about call earlier, but I apologize.

172
00:11:31.770 --> 00:11:34.516
I might not have given you
enough detail to have done this.

173
00:11:38.554 --> 00:11:39.610
&gt;&gt; Douglas Crockford: So who got this one?

174
00:11:40.910 --> 00:11:42.320
Okay, a few of you did, really good.

175
00:11:43.690 --> 00:11:45.630
&gt;&gt; Speaker 2: I have question.

176
00:11:45.630 --> 00:11:49.205
Since we're passing in a function,
why can't we just return the function and

177
00:11:49.205 --> 00:11:50.571
send it to another variable?

178
00:11:50.571 --> 00:11:51.980
&gt;&gt; Douglas Crockford: Yeah.

179
00:11:51.980 --> 00:11:54.723
&gt;&gt; Speaker 2: What I had is basically
demethodize equals function method,

180
00:11:54.723 --> 00:11:59.560
like you have done with the signature, and
I'm just returning function, basically.

181
00:11:59.560 --> 00:12:03.544
So where you have the closure returning
a function, I'm just returning func.

182
00:12:08.308 --> 00:12:13.267
&gt;&gt; Speaker 2: Because presumably,
the function already is the two parameter.

183
00:12:13.267 --> 00:12:18.885
&gt;&gt; Douglas Crockford: Well, we start with
a function which is a one parameter and

184
00:12:18.885 --> 00:12:20.498
this function.

185
00:12:24.255 --> 00:12:26.630
&gt;&gt; Speaker 2: Yeah, but
I just don't know if it's right.

186
00:12:26.630 --> 00:12:29.909
If it is return,
took a function taking func,

187
00:12:29.909 --> 00:12:34.626
then it just returned another
function that took two parameters.

188
00:12:34.626 --> 00:12:39.127
And then it did the param p1,

189
00:12:39.127 --> 00:12:44.898
returns p1 that then func param p2.

190
00:12:46.671 --> 00:12:49.420
&gt;&gt; Douglas Crockford: We need to
get that assigned to this somehow.

191
00:12:56.755 --> 00:12:59.633
&gt;&gt; Speaker 2: Why wouldn't
this [INAUDIBLE] here?

192
00:12:59.633 --> 00:13:01.410
&gt;&gt; Douglas Crockford: Well,
yeah, let's talk about it later.

