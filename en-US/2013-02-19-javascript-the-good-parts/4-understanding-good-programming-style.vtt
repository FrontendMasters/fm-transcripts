WEBVTT

1
00:00:00.000 --> 00:00:04.619
[MUSIC]

2
00:00:04.619 --> 00:00:06.588
&gt;&gt; Douglas Crockford: But
the biggest problem was I said,

3
00:00:06.588 --> 00:00:08.102
that hardly ever happens.

4
00:00:08.102 --> 00:00:10.772
That system one,
system one can't quantify.

5
00:00:10.772 --> 00:00:16.160
System one thinks that not very
often is the same as never.

6
00:00:16.160 --> 00:00:21.270
System one waits most greater than all.

7
00:00:21.270 --> 00:00:24.610
It's just bad at math and
always relying on system one,

8
00:00:24.610 --> 00:00:31.179
not on any kind of statistics or
real model, for what went wrong there.

9
00:00:31.179 --> 00:00:36.350
So yeah, that hardly ever happens means
it happens, doesn't happen a lot but

10
00:00:36.350 --> 00:00:37.310
it does happen.

11
00:00:37.310 --> 00:00:42.740
And if you're trying to be perfect, you
can't allow for it to ever happen, right?

12
00:00:44.220 --> 00:00:49.180
So start realizing that there's some
features that I simply want to avoid

13
00:00:49.180 --> 00:00:54.030
all the time because they're slightly
more likely to produce errors.

14
00:00:54.030 --> 00:00:57.840
And if we're gonna avoid
using those forms then I'm

15
00:00:57.840 --> 00:01:00.189
gonna be spending less time in the abyss.

16
00:01:01.620 --> 00:01:04.560
So a good style can help
produce better programs.

17
00:01:04.560 --> 00:01:06.980
Style shouldn't be about
personal preference or

18
00:01:06.980 --> 00:01:09.740
self expression or
things that you're used to,

19
00:01:09.740 --> 00:01:14.650
it should be about what will
effectively reduce my error rate?

20
00:01:14.650 --> 00:01:18.550
Not to help me reduce my keyboarding,
because it turns out keyboarding is in

21
00:01:18.550 --> 00:01:23.720
the noise, that's not where we spend
our time, we spend our time debugging.

22
00:01:23.720 --> 00:01:27.270
So if I can save time in debugging
by typing in a little bit

23
00:01:27.270 --> 00:01:30.000
more code that turns out to
be a hugely good trade of.

24
00:01:31.860 --> 00:01:35.503
So we can find some clues
about this literary style.

25
00:01:35.503 --> 00:01:40.399
The Romans wrote Latin all in upper case
with no word breaks or punctuation and

26
00:01:40.399 --> 00:01:43.504
that worked pretty well for
them for a long time.

27
00:01:43.504 --> 00:01:46.996
Although there's some ambiguities,
for example,

28
00:01:46.996 --> 00:01:49.951
the third line could be
read now wor DB reaks.

29
00:01:51.350 --> 00:01:52.235
I don't know what that means.

30
00:01:52.235 --> 00:01:55.258
&gt;&gt; Class: [LAUGH]
&gt;&gt; Douglas Crockford: But from my eye,

31
00:01:55.258 --> 00:01:59.040
this is harder to copy.

32
00:02:00.370 --> 00:02:05.470
Just cuz there's less redundancy in it,
it's a little bit harder.

33
00:02:05.470 --> 00:02:09.010
But the Romans were able to deal with
this until Constantine established

34
00:02:09.010 --> 00:02:12.450
Christianity as the state
religion of the Roman Empire.

35
00:02:12.450 --> 00:02:16.826
And at that point it became necessary to
make copies of all these documents, and

36
00:02:16.826 --> 00:02:18.865
distribute them all over the world.

37
00:02:18.865 --> 00:02:23.637
But what they found was, they did not have
the originals for any of these documents.

38
00:02:23.637 --> 00:02:28.810
And every copy they had were different,
none of the copies agreed.

39
00:02:28.810 --> 00:02:32.500
So every time this stuff was copied,
errors were introduced.

40
00:02:33.830 --> 00:02:38.682
And this was a problem for an institution
that was claiming its authority based on

41
00:02:38.682 --> 00:02:41.980
the word and no body was sure
exactly what the word was.

42
00:02:41.980 --> 00:02:47.050
So Medieval copyist introduced lowercase,
word breaks, and punctuation.

43
00:02:48.340 --> 00:02:52.510
And this innovations helped
them to reduce the error rate.

44
00:02:52.510 --> 00:02:56.288
Having this in the manuscript made
it easier for them to copy the text

45
00:02:56.288 --> 00:03:00.751
without introducing new errors, and
that turned out to be hugely beneficial.

46
00:03:00.751 --> 00:03:05.660
And one unexpected benefit of this was it
also made the documents easier to read.

47
00:03:05.660 --> 00:03:07.530
So when Gutenberg started printing,

48
00:03:07.530 --> 00:03:11.960
he copied these conventions because
they work, and we are still using them.

49
00:03:11.960 --> 00:03:17.777
We have centuries and centuries of
experience using these literary patterns,

50
00:03:17.777 --> 00:03:21.260
and they are in everything
that we publish now.

51
00:03:21.260 --> 00:03:24.250
We have all been taught at
least since kindergarten and

52
00:03:24.250 --> 00:03:26.792
probably earlier to
recognize these things.

53
00:03:26.792 --> 00:03:33.250
So we know to put a space after comma and
not before a comma.

54
00:03:33.250 --> 00:03:37.780
That's just good style, it's something
we've all been reading all of our lives.

55
00:03:37.780 --> 00:03:42.210
So if you're a novelist and you're trained
to demonstrate your creative power.

56
00:03:43.430 --> 00:03:47.670
You don't do that by putting your periods
at the beginning of your sentences,

57
00:03:47.670 --> 00:03:48.580
instead of at the end.

58
00:03:50.620 --> 00:03:54.640
No critics gonna say, wow,
what masterful use of punctuation.

59
00:03:54.640 --> 00:03:59.033
No, as a novelist, you're gonna be
demonstrating your creativity by

60
00:03:59.033 --> 00:04:04.250
the things that you're describing and the
technique that you use to describe them.

61
00:04:05.870 --> 00:04:10.090
You'll at the same time slavish
conform to the rules of style,

62
00:04:10.090 --> 00:04:15.187
because that's part of the deep
structure of what you're communicating,

63
00:04:15.187 --> 00:04:17.668
that that's not what you play with.

64
00:04:20.421 --> 00:04:24.130
&gt;&gt; Douglas Crockford: So good use of style
can help reduce the occurrence of errors.

65
00:04:24.130 --> 00:04:30.410
We have centuries of
evidence that support this.

66
00:04:31.450 --> 00:04:36.920
So one excellent manual on style is
The Elements of Style by William Strunk.

67
00:04:36.920 --> 00:04:39.690
He self-published this
about 100 years ago.

68
00:04:39.690 --> 00:04:43.730
Some of his advice is a little dated now
because English has continued to evolved

69
00:04:43.730 --> 00:04:47.640
since then, but
most of its advice is still really good.

70
00:04:47.640 --> 00:04:52.322
And a number of computer scientists
have recognized that and

71
00:04:52.322 --> 00:04:58.564
witness style guides based on Strunk's
guide, applying his rules to English or

72
00:04:58.564 --> 00:05:03.090
to programming languages,
and it's really effective.

73
00:05:03.090 --> 00:05:07.871
So programs must communicate
clearly to people.

74
00:05:07.871 --> 00:05:12.282
There are some who think that you just
have to get it pass to the compiler and

75
00:05:12.282 --> 00:05:16.356
if the compiler gets it then that's
all you need to do, it's done.

76
00:05:16.356 --> 00:05:20.880
But that's not true, if the program
is ever gonna have to run more than

77
00:05:20.880 --> 00:05:25.785
once then it needs to be written so that
someone knows how to modify it in order

78
00:05:25.785 --> 00:05:30.000
to improve it, or
at least understand what it does.

79
00:05:30.000 --> 00:05:34.327
And it's not good enough to say, well,
somebody should be able to figure it out,

80
00:05:34.327 --> 00:05:36.725
you don't wanna get the punctuation wrong.

81
00:05:36.725 --> 00:05:38.578
Assuming that someone's gonna
have to work through it,

82
00:05:38.578 --> 00:05:40.020
the same way that novelist shouldn't.

83
00:05:40.020 --> 00:05:41.880
You know what?

84
00:05:41.880 --> 00:05:46.810
The spellings and bad styles to be
in your work, even though people

85
00:05:46.810 --> 00:05:50.520
could figure it out, that's not where you
want them spending their mental cycles.

86
00:05:50.520 --> 00:05:53.630
You want them investing
all of their mental cycles

87
00:05:53.630 --> 00:05:58.050
on understanding the deep stuff,
the important stuff.

88
00:05:58.050 --> 00:06:01.120
So we should use elements of good
composition where applicable.

89
00:06:01.120 --> 00:06:06.070
So we should put the space after
the comma, not in front of the comma.

90
00:06:06.070 --> 00:06:10.371
We should not depart from the rules of
style that we've had for centuries,

91
00:06:10.371 --> 00:06:15.097
unless we have solid data which shows
there's a clear benefit in this deviation.

92
00:06:15.097 --> 00:06:20.233
If there's not that evidence then we
should stick to this stuff because

93
00:06:20.233 --> 00:06:25.555
it's what most of us know and it does
help us to effectively communicate.

94
00:06:25.555 --> 00:06:32.222
Now, programs have to be more
rigorous than writing has to be.

95
00:06:32.222 --> 00:06:36.780
So we may need other style
rules to help us disambiguate.

96
00:06:36.780 --> 00:06:39.620
For example, we use pairings for
a lot of things.

97
00:06:39.620 --> 00:06:44.840
One of them to create and
invoke functions.

98
00:06:44.840 --> 00:06:50.050
So we have a convention that you don't
have a space between a function name and

99
00:06:50.050 --> 00:06:53.780
a paren, and that it helps us to
distinguish all of the other cases.

100
00:06:54.880 --> 00:07:01.210
For example, there should be
a space here after the return.

101
00:07:01.210 --> 00:07:03.590
Now, in some languages,
return might be a function,

102
00:07:03.590 --> 00:07:06.400
in which case that line
is perfect the way it is.

103
00:07:06.400 --> 00:07:10.820
But in JavaScript, it's not return
as a statement not a function and so

104
00:07:10.820 --> 00:07:14.950
we should write it with a space there
to make it easier for the person who's

105
00:07:14.950 --> 00:07:18.820
reading his program to understand
what is the role of that statement.

106
00:07:21.170 --> 00:07:25.620
One of the good part in JavaScript is the
immediately invocable function expression.

107
00:07:25.620 --> 00:07:28.670
This is the thing which allows
us to have modularity and

108
00:07:28.670 --> 00:07:33.440
JavaScript because we can take advantage
of function scope to keep things

109
00:07:33.440 --> 00:07:37.010
out of the global scope, and
that turns out to be hugely beneficial.

110
00:07:37.010 --> 00:07:38.450
We'll talk a lot more about that later.

111
00:07:40.070 --> 00:07:46.385
Unfortunately, JavaScript has some tactic
ambiguity if function appears in statement

112
00:07:46.385 --> 00:07:52.460
position, then it's a different kind of
thing and we cannot immediately invoke it.

113
00:07:52.460 --> 00:07:56.622
So someone discovered that if you
wrap the function in parentheses,

114
00:07:56.622 --> 00:08:01.070
then it's no longer in a statement
position and then we can invoke it, and

115
00:08:01.070 --> 00:08:03.740
so you see a lot of code like that.

116
00:08:03.740 --> 00:08:08.010
But I think this misses an opportunity,
while this is sufficient to get it past

117
00:08:08.010 --> 00:08:13.060
the compiler, I want to give a little
bit more information to the reader.

118
00:08:13.060 --> 00:08:15.732
And I can do that by slightly
changing the parentheses.

119
00:08:15.732 --> 00:08:19.386
Because I've got the invoking
parens out there,

120
00:08:19.386 --> 00:08:23.476
just hanging out there like
a pair of dog balls, right?

121
00:08:23.476 --> 00:08:26.030
&gt;&gt; Class: [LAUGH]
&gt;&gt; Douglas Crockford: And

122
00:08:26.030 --> 00:08:30.470
what's important here is the entire thing.

123
00:08:30.470 --> 00:08:35.500
So I wanna wrap the entire
invocation expression in parens.

124
00:08:35.500 --> 00:08:39.430
As a cue to the reader that what's
important here is not the function,

125
00:08:39.430 --> 00:08:41.269
it's the invocation of the function.

126
00:08:42.620 --> 00:08:45.530
And so I want the parens to be
inclusive of the whole thing.

127
00:08:46.930 --> 00:08:52.071
Again, the compiler doesn't require this,
but I think good style does.

128
00:08:52.071 --> 00:08:54.510
Now, I told you about semicolon insertion.

129
00:08:54.510 --> 00:08:57.350
Here's another of the things
that it'll get wrong.

130
00:08:57.350 --> 00:09:02.172
You would hope that there'd be
a semicolon inserted there but

131
00:09:02.172 --> 00:09:04.870
there isn't, so this will fail.

132
00:09:04.870 --> 00:09:10.173
Instead of assigning y to x,
you will assign y invoked as a function

133
00:09:10.173 --> 00:09:14.815
passing the result of the other
function as its argument,

134
00:09:14.815 --> 00:09:18.150
which is probably not what you intended.

135
00:09:19.580 --> 00:09:23.970
My advice is never rely
on semicolon insertion,

136
00:09:23.970 --> 00:09:26.500
always put the semicolons
in the right places.

137
00:09:30.830 --> 00:09:34.088
Now, in most cases,
this doesn't happen, but

138
00:09:34.088 --> 00:09:37.830
again it sometimes does happen
which means it happens.

139
00:09:37.830 --> 00:09:42.611
And so you need to adopt a programming
style which helps defend you against these

140
00:09:42.611 --> 00:09:45.620
sorts of mishaps,
it'll make you look smarter.

141
00:09:48.220 --> 00:09:52.455
Another innovation that JavaScript added,
it was a good intention but

142
00:09:52.455 --> 00:09:55.572
it didn't work out right,
was the with statement.

143
00:09:55.572 --> 00:09:58.409
So here we have this with
statement in green and

144
00:09:58.409 --> 00:10:02.350
it will expand into one
of these four statements.

145
00:10:02.350 --> 00:10:05.291
Now, can anybody guess which
of those four it will become?

146
00:10:10.455 --> 00:10:12.970
&gt;&gt; Class: Second one?

147
00:10:12.970 --> 00:10:15.760
&gt;&gt; Douglas Crockford: It's a trick
question, it could be any of them.

148
00:10:15.760 --> 00:10:20.010
There's no way to tell from reading
the program which one it's going to be.

149
00:10:20.010 --> 00:10:22.959
In fact,
every time that statement executes,

150
00:10:22.959 --> 00:10:25.549
it could potentially be a different one.

151
00:10:25.549 --> 00:10:30.729
So if we're trying to write programs which
clearly communicate what they do, we can't

152
00:10:30.729 --> 00:10:35.730
do that if we're using forums which we
cannot predict what they're going to do.

153
00:10:35.730 --> 00:10:40.179
So my advice is don't use the with
statement, you simply don't need it.

154
00:10:41.450 --> 00:10:44.466
And by taking it out of your working set,

155
00:10:44.466 --> 00:10:48.387
there's a whole class of
confusions which go away.

156
00:10:48.387 --> 00:10:51.773
Now, there's some people who
have discovered a lot of very

157
00:10:51.773 --> 00:10:53.884
clever uses foo with the statement.

158
00:10:53.884 --> 00:10:57.924
And they say, well, I should be able to
use it to do those very clever things

159
00:10:57.924 --> 00:11:00.670
because it's sometimes useful.

160
00:11:00.670 --> 00:11:05.170
But my argument is not that it isn't
useful, I'm saying there's never

161
00:11:05.170 --> 00:11:09.860
a case where it is never confusing and
confusion is the thing we want to avoid.

