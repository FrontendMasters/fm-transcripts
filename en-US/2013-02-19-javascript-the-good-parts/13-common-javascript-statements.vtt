WEBVTT

1
00:00:00.356 --> 00:00:04.965
[MUSIC]

2
00:00:04.965 --> 00:00:07.882
&gt;&gt; Douglass Crockford: JavaScript is
obviously a member of the C family,

3
00:00:07.882 --> 00:00:08.928
syntactically.

4
00:00:08.928 --> 00:00:15.289
It's major difference from
C is in its type system.

5
00:00:15.289 --> 00:00:18.250
So let's look at some of the syntax.

6
00:00:18.250 --> 00:00:23.031
Identifiers start with a letter or
an underbar or a dollar sign followed by

7
00:00:23.031 --> 00:00:27.670
zero or more letters, digits,
underbars, or dollar signs.

8
00:00:27.670 --> 00:00:30.307
By convention, all variables,
parameters, members, and

9
00:00:30.307 --> 00:00:31.989
function names start with lower case.

10
00:00:31.989 --> 00:00:36.319
The only exception is constructors,
which should start as upper case, and

11
00:00:36.319 --> 00:00:38.970
global variables,
which should be all caps.

12
00:00:40.360 --> 00:00:43.003
Initial _ should be reserved for
implementations.

13
00:00:43.003 --> 00:00:47.779
Most of the JavaScript engines have
weird secret properties that start and

14
00:00:47.779 --> 00:00:49.080
end with underbar.

15
00:00:50.390 --> 00:00:54.210
I've seen a lot of developers make their
weird stuff look the same way, which is

16
00:00:54.210 --> 00:00:58.270
bad, because it could potentially conflict
with what implementations are doing.

17
00:00:58.270 --> 00:00:59.704
So stay away from that.

18
00:00:59.704 --> 00:01:03.556
$ was originally added to the language for
the benefit of machines.

19
00:01:03.556 --> 00:01:06.650
So for code generators,
for macro processors,

20
00:01:06.650 --> 00:01:09.593
things that want to
generate their own names so

21
00:01:09.593 --> 00:01:14.660
they could be guaranteed that their
names wouldn't conflict with your names.

22
00:01:15.840 --> 00:01:19.484
Unfortunately, it got out and
some clever clowns said,

23
00:01:19.484 --> 00:01:23.631
I could have a function called $,
no one will ever guess what it does.

24
00:01:23.631 --> 00:01:28.469
And now virtually every AJAX
library has a magical dollar

25
00:01:28.469 --> 00:01:33.317
sign function that, still,
nobody knows what they do.

26
00:01:33.317 --> 00:01:37.760
So I still recommend not doing that,
but it's become really popular.

27
00:01:39.840 --> 00:01:44.960
We have two conventions for
writing comments; // and /*.

28
00:01:44.960 --> 00:01:49.661
I strongly recommend the //
form because the language

29
00:01:49.661 --> 00:01:53.220
has regular expression literals in it.

30
00:01:53.220 --> 00:02:00.145
And it's really easy to create // and
*/ inside of a regular expression literal.

31
00:02:00.145 --> 00:02:05.697
So to avoid the problem that
that can cause, use //.

32
00:02:09.160 --> 00:02:11.345
&gt;&gt; Douglass Crockford: Being
a C family language,

33
00:02:11.345 --> 00:02:14.990
we have the standard set of C operators.

34
00:02:14.990 --> 00:02:17.650
Some of them work a little differently
than they do in other languages.

35
00:02:18.710 --> 00:02:22.620
For example, we talked about + and
the problem it has with concatenation.

36
00:02:22.620 --> 00:02:25.545
So we can add a couple
of numbers together, and

37
00:02:25.545 --> 00:02:28.700
get something which is
surprisingly different.

38
00:02:28.700 --> 00:02:33.289
One way around that is
by guaranteeing that

39
00:02:33.289 --> 00:02:38.670
the values are numbers
before you give them to +.

40
00:02:38.670 --> 00:02:40.360
And which you can do by converting.

41
00:02:40.360 --> 00:02:44.797
So here I'm adding the string
3 to the string 4, but

42
00:02:44.797 --> 00:02:49.760
coercing both to be numbers
before the addition so I get 7.

43
00:02:49.760 --> 00:02:54.270
Now I put this one in parentheses
because I had a ++ next to each other.

44
00:02:54.270 --> 00:02:57.755
And I did that because there's
a possibility that the ++'s might be

45
00:02:57.755 --> 00:03:02.020
confused with the ++ operator, which would
be a whole another world of stupidity.

46
00:03:02.020 --> 00:03:06.510
So we can avoid that by
putting the parens in.

47
00:03:09.170 --> 00:03:12.750
&gt;&gt; Douglass Crockford: We have a division
operator which can divide two integers,

48
00:03:12.750 --> 00:03:16.338
except it will not necessarily
produce an integer result.

49
00:03:16.338 --> 00:03:19.055
And because we are using
binary floating point,

50
00:03:19.055 --> 00:03:23.044
even the real result we get is not
necessarily the one that we expected.

51
00:03:26.426 --> 00:03:30.317
&gt;&gt; Douglass Crockford: We have percent
sign, which is the remainder operator,

52
00:03:30.317 --> 00:03:32.890
not the modulo operator.

53
00:03:32.890 --> 00:03:38.430
And the difference is that remainder
takes the sign of the first argument,

54
00:03:38.430 --> 00:03:39.870
not the second argument.

55
00:03:39.870 --> 00:03:42.320
Modulo takes the sign
from the second argument,

56
00:03:42.320 --> 00:03:44.720
which is usually the more useful thing.

57
00:03:44.720 --> 00:03:46.100
So you need to watch out for that.

58
00:03:48.390 --> 00:03:53.340
Then we have == and !=.

59
00:03:53.340 --> 00:03:56.890
And i recommend that you not use them,
that you use === instead.

60
00:03:59.430 --> 00:04:01.628
&gt;&gt; Douglass Crockford: And we saw that.

61
00:04:01.628 --> 00:04:08.754
We have &amp;&amp;, which is the logical and
operator, or the guard operator.

62
00:04:08.754 --> 00:04:13.563
If the first operand is truthy,
then the result is the second operand,

63
00:04:13.563 --> 00:04:16.510
otherwise it's the first operand.

64
00:04:16.510 --> 00:04:19.064
It's not necessarily going
to return true or false.

65
00:04:19.064 --> 00:04:22.330
It's going to return one of
the two values that was given.

66
00:04:24.980 --> 00:04:26.940
&gt;&gt; Douglass Crockford: But
it does do a short circuiting.

67
00:04:26.940 --> 00:04:34.230
So by looking at the first one, if it sees
a falsy value, it will stop at that point.

68
00:04:34.230 --> 00:04:41.363
And it can sometimes be used to
avoid null pointer exceptions.

69
00:04:41.363 --> 00:04:47.640
So here we have an if statement, which is
there just to avoid the null reference.

70
00:04:47.640 --> 00:04:50.550
We could use the and
operator to do the same thing.

71
00:04:50.550 --> 00:04:54.480
Since null and
undefined are guaranteed to be falsy,

72
00:04:54.480 --> 00:04:57.110
trying to call a method
on them would fail.

73
00:04:58.370 --> 00:05:02.057
And so that will succeed only
if the first value is truthy and

74
00:05:02.057 --> 00:05:04.870
all objects are truthy,
so that would work.

75
00:05:07.460 --> 00:05:10.223
&gt;&gt; Douglass Crockford: And
we have the logical or operator,

76
00:05:10.223 --> 00:05:13.440
which is sometimes the default operator.

77
00:05:13.440 --> 00:05:15.650
And it's sort of the opposite
of the other one.

78
00:05:15.650 --> 00:05:18.982
If the first operand is the truthy,
then the result is the first operand,

79
00:05:18.982 --> 00:05:20.714
otherwise it's the second operand.

80
00:05:20.714 --> 00:05:23.980
And we can use it to
fill in default values.

81
00:05:23.980 --> 00:05:29.119
So here we've got input, which we
could be getting from a DOM element.

82
00:05:29.119 --> 00:05:35.660
And if it is an empty string,
then we'll assign last nr_items instead.

83
00:05:37.260 --> 00:05:42.037
One thing to watch out for in doing this
is that 0, the number 0, is also falsy.

84
00:05:42.037 --> 00:05:43.779
So filling in a default for

85
00:05:43.779 --> 00:05:47.930
that will probably do something
that you don't intend.

86
00:05:47.930 --> 00:05:49.630
So this only works for strings.

87
00:05:53.230 --> 00:05:57.130
&gt;&gt; Douglass Crockford: Then bang is the
logical not operator, which if the first

88
00:05:57.130 --> 00:06:02.020
operand is truthy, then it returns false,
otherwise it return true.

89
00:06:02.020 --> 00:06:06.130
And so if you do it twice,
that produces a boolean.

90
00:06:06.130 --> 00:06:07.957
It returns truthy into true and
falsy into false.

91
00:06:10.587 --> 00:06:12.237
&gt;&gt; Douglass Crockford: We
have bitwise operators,

92
00:06:12.237 --> 00:06:16.442
which looks a little strange in
a language that doesn't have integers.

93
00:06:16.442 --> 00:06:23.144
So what it does is it will take the 64-bit
double, coerce it into 32-bit int,

94
00:06:23.144 --> 00:06:28.820
do the shifting or the masking or
whatever, and then convert it back.

95
00:06:28.820 --> 00:06:31.752
Now in some languages,
you'll sometime see someone

96
00:06:31.752 --> 00:06:36.030
doing a shift because they think it's
faster than a divide or multiply.

97
00:06:36.030 --> 00:06:39.982
Don't do that in this language because
it's not guaranteed that it actually

98
00:06:39.982 --> 00:06:40.842
will be faster.

99
00:06:40.842 --> 00:06:43.940
Write instead the thing that's clearer.

100
00:06:43.940 --> 00:06:47.358
That's always gonna be the smartest way.

101
00:06:47.358 --> 00:06:50.560
Then we have a complement of statements,
which are for

102
00:06:50.560 --> 00:06:54.050
the most part the same as we'll
see in C or other languages.

103
00:06:58.493 --> 00:07:01.890
&gt;&gt; Douglass Crockford: Statements can have
labels, in particular, for and switch.

104
00:07:01.890 --> 00:07:06.680
And while can have them in do.

105
00:07:06.680 --> 00:07:09.470
Which allows to break out of
deeply nested structures.

106
00:07:09.470 --> 00:07:11.210
That's a good thing.

107
00:07:11.210 --> 00:07:15.750
We have a for statement,
which we've already seen.

108
00:07:15.750 --> 00:07:19.326
And we have a for in statement,
which is a new thing in JavaScript.

109
00:07:19.326 --> 00:07:23.130
And because it's uniquely JavaScript,
it's broken.

110
00:07:23.130 --> 00:07:26.127
So you have to do the filtering
of the thing that it returns.

111
00:07:28.237 --> 00:07:31.760
&gt;&gt; Douglass Crockford: We have the switch
statement, which is the multiway branch.

112
00:07:31.760 --> 00:07:34.770
And it's better than C or

113
00:07:34.770 --> 00:07:38.240
Javas in that the switch value
doesn't have to be a number.

114
00:07:38.240 --> 00:07:41.430
In particular, it can be a string, and
that turns out to be a really nice thing.

115
00:07:41.430 --> 00:07:45.680
And the case values can be expressions,
which is also a really nice thing.

116
00:07:45.680 --> 00:07:48.680
Particularly if you're writing
internationalized applications where you

117
00:07:48.680 --> 00:07:55.130
want to test for yes or no but yes or
no could be different in every language.

118
00:07:55.130 --> 00:07:58.390
There's a way to express that in switch
statements in JavaScript that you can't

119
00:07:58.390 --> 00:07:59.329
do in other languages.

120
00:08:00.550 --> 00:08:04.116
But then there's a fall through things,
you need to watch out for that.

121
00:08:05.360 --> 00:08:08.120
&gt;&gt; Douglass Crockford: So
there's a switch statement.

122
00:08:08.120 --> 00:08:10.170
We have a throw statement.

123
00:08:10.170 --> 00:08:13.090
In JavaScript you can throw anything.

124
00:08:13.090 --> 00:08:16.550
There is an error constructor.

125
00:08:16.550 --> 00:08:20.100
You can make exception objects with it,
but you don't have to.

126
00:08:20.100 --> 00:08:23.258
You can throw an object literal,
or you could throw a string,

127
00:08:23.258 --> 00:08:25.000
you can throw anything you want.

128
00:08:25.000 --> 00:08:29.979
Just be sure that whoever's gonna
catch it knows how to catch it.

129
00:08:29.979 --> 00:08:35.940
So because we're loosely typed,
a try will only have one catch clause.

130
00:08:35.940 --> 00:08:37.170
So it catches everything.

131
00:08:37.170 --> 00:08:41.338
So that clause has to be responsible for
looking at what it caught and

132
00:08:41.338 --> 00:08:44.065
decide what it wants to do with it.

133
00:08:44.065 --> 00:08:49.104
It could then ignore it, or it could
throw it up, or whatever it has to do.

134
00:08:52.140 --> 00:08:57.052
&gt;&gt; Douglass Crockford: And JavaScript
comes with a largest set of built-in

135
00:08:57.052 --> 00:08:57.950
things.

136
00:08:57.950 --> 00:09:00.130
I've never seen anybody use any of these.

137
00:09:02.580 --> 00:09:06.050
&gt;&gt; Douglass Crockford: Okay,
so let's take a break.

138
00:09:06.050 --> 00:09:08.920
Do we wanna stop for lunch now or
do we wanna keep going?

139
00:09:11.090 --> 00:09:13.946
&gt;&gt; Off Camera: Yeah lunch should
arrive in the next 10 to 20 minutes

140
00:09:13.946 --> 00:09:14.523
&gt;&gt; Douglass Crockford: Okay, so

141
00:09:14.523 --> 00:09:17.269
let's take a running
start on the next one and

142
00:09:17.269 --> 00:09:20.674
maybe we'll get halfway
through before lunch starts.

143
00:09:24.460 --> 00:09:25.766
&gt;&gt; Douglass Crockford: While I'm
setting up, are there any questions?

144
00:09:25.766 --> 00:09:29.684
&gt;&gt; Student: One question.

145
00:09:29.684 --> 00:09:30.236
&gt;&gt; Douglass Crockford: Yeah?

146
00:09:30.236 --> 00:09:34.749
&gt;&gt; Student: When you add
functions to a prototype,

147
00:09:34.749 --> 00:09:39.410
are you adding a significant overhead?

148
00:09:39.410 --> 00:09:43.005
If you added 100 to numbers, is that
gonna bloat everything in some way?

149
00:09:43.005 --> 00:09:43.838
&gt;&gt; Douglass Crockford: That
is a really good question.

150
00:09:43.838 --> 00:09:49.065
We'll get to it a little later, but

151
00:09:49.065 --> 00:09:54.109
I can answer it now, so,
&gt;&gt; Douglass Crockford: Adding something

152
00:09:54.109 --> 00:09:58.746
to a prototype is extremely efficient
because the prototypes link to it,

153
00:09:58.746 --> 00:10:00.410
they don't copy from it.

154
00:10:01.640 --> 00:10:06.513
So you can have one function which gets
incorporated into thousands of objects and

155
00:10:06.513 --> 00:10:08.361
you only pay for one function.

156
00:10:08.361 --> 00:10:12.043
That's huge.

157
00:10:12.043 --> 00:10:15.969
&gt;&gt; Student: Does it have an implication
on the search time to find things then?

158
00:10:15.969 --> 00:10:18.200
&gt;&gt; Douglass Crockford: No,
it tends to be pretty linear.

159
00:10:18.200 --> 00:10:21.100
I mean, in theory,
the deeper your prototype chain,

160
00:10:21.100 --> 00:10:23.290
the longer it's gonna take to resolve.

161
00:10:23.290 --> 00:10:29.060
But prototype chains tend to be much
shorter than class hierarchies,

162
00:10:29.060 --> 00:10:30.500
so it tends not to be a factor.

