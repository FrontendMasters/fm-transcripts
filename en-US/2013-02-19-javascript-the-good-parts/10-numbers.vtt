WEBVTT

1
00:00:00.154 --> 00:00:04.768
[MUSIC]

2
00:00:04.768 --> 00:00:07.236
&gt;&gt; Douglas Crockford: There´s only
one number type in this language,

3
00:00:07.236 --> 00:00:08.991
which turns out to be a good thing.

4
00:00:08.991 --> 00:00:13.025
If you have multiple number types,
as most other languages do,

5
00:00:13.025 --> 00:00:18.030
then there´s a possibility that
you´re gonna pick the wrong type.

6
00:00:18.030 --> 00:00:20.460
And if you pick the wrong
type then bad things happen.

7
00:00:22.200 --> 00:00:26.260
So if there's only one number type
then you can't make that mistake.

8
00:00:26.260 --> 00:00:28.680
That turns out to be a good thing.

9
00:00:28.680 --> 00:00:33.122
Having multiple sizes of ints
was a good idea in Fortran

10
00:00:33.122 --> 00:00:37.694
because at that time bits
were really expensive.

11
00:00:37.694 --> 00:00:42.530
And he wanted to use as few bits as
possible in each of your variables.

12
00:00:42.530 --> 00:00:43.480
But we're here in the future.

13
00:00:43.480 --> 00:00:45.617
We've got gigabytes of RAM now.

14
00:00:45.617 --> 00:00:50.510
Trying to save bits in a variable is
just not a good trade off anymore.

15
00:00:51.520 --> 00:00:55.590
But we're still conditioned in our
most of our programming language to

16
00:00:55.590 --> 00:01:00.110
try to perform that optimization,
which in some cases leads to bugs.

17
00:01:00.110 --> 00:01:02.920
That doesn't happen in Java Script
cuz we only have one number type.

18
00:01:02.920 --> 00:01:04.607
Unfortunately it's the wrong number type.

19
00:01:04.607 --> 00:01:09.987
JavaScript uses IEEE-754 floating point,

20
00:01:09.987 --> 00:01:16.490
the 64-bit type,
which is weirdly called double.

21
00:01:16.490 --> 00:01:21.080
Which is a stupid name for a number type
but that's what it's called in Java.

22
00:01:21.080 --> 00:01:24.640
It's because in Fortran it was
called double precision and

23
00:01:24.640 --> 00:01:26.610
in later languages it
was shortened to double.

24
00:01:26.610 --> 00:01:29.480
It doesn't make any sense,
but we have that.

25
00:01:30.960 --> 00:01:35.040
There's no integer type, but
integers are a subset of floating point,

26
00:01:35.040 --> 00:01:38.490
so you have integers mostly.

27
00:01:38.490 --> 00:01:41.700
So JavaScript does not have an int type.

28
00:01:41.700 --> 00:01:43.412
And I think that's actually a good thing.

29
00:01:43.412 --> 00:01:48.261
Cuz one of the properties of ints in most
languages is you can have two answers that

30
00:01:48.261 --> 00:01:51.043
are greater than zero and
add them together and

31
00:01:51.043 --> 00:01:54.562
get a result that is smaller
than either of the other ones.

32
00:01:54.562 --> 00:01:57.104
Which is insane, but
that's how numbers work,

33
00:01:57.104 --> 00:01:59.160
and again it's going back to Fortran.

34
00:02:01.790 --> 00:02:07.428
It was cheaper back then to
allow the numbers to spin over.

35
00:02:07.428 --> 00:02:13.080
But it doesn't make any sense now and the
reliability problems with that are huge.

36
00:02:13.080 --> 00:02:16.040
How can you have any confidence
in the correctness of a program

37
00:02:16.040 --> 00:02:19.670
where your numbers can suddenly
go wildly negative unexpectedly?

38
00:02:19.670 --> 00:02:25.250
It's nuts, so hurray for JavaScript
it does not have this defect in it.

39
00:02:26.250 --> 00:02:29.750
It has different defects,
but not this one.

40
00:02:29.750 --> 00:02:31.390
JavaScript has number literals.

41
00:02:31.390 --> 00:02:34.350
So you can use decimal points.

42
00:02:34.350 --> 00:02:35.960
You can you use scientific notation.

43
00:02:35.960 --> 00:02:38.110
All of these represent
exactly the same value.

44
00:02:40.650 --> 00:02:45.330
So one of the problems with computer
arithmetic in general is that

45
00:02:46.860 --> 00:02:48.225
the Associative Law doesn't hold.

46
00:02:48.225 --> 00:02:53.830
So (a + b) + c is not
equal to a + (b + c).

47
00:02:53.830 --> 00:02:57.650
It usually is but
it's not guaranteed to be.

48
00:02:57.650 --> 00:03:01.090
So the laws of mathematics
don't necessarily apply.

49
00:03:01.090 --> 00:03:07.600
And the reason for
this is that real numbers are not finite.

50
00:03:07.600 --> 00:03:12.260
But computer necessarily are, because they
can only have a certain number of bits.

51
00:03:12.260 --> 00:03:14.680
They can not have
a infinite number of bits.

52
00:03:14.680 --> 00:03:18.220
So there's always the possibility that
numbers are going to be approximate.

53
00:03:18.220 --> 00:03:23.698
And that approximating means
that associativity doesn't hold.

54
00:03:23.698 --> 00:03:31.310
Now in JavaScript, integers up
to 9 quadrillion or so are okay.

55
00:03:31.310 --> 00:03:35.820
So you can add one to a number up to 9
quadrillion and it will always work.

56
00:03:37.620 --> 00:03:41.670
Above a certain point then
the number start to get blurry.

57
00:03:42.970 --> 00:03:48.720
So zero and one are effectively equal
once you get above 9 quadrillion.

58
00:03:50.240 --> 00:03:52.880
But that's a pretty big number.

59
00:03:52.880 --> 00:03:57.670
It's more than enough to hold,
say, the national debt, and

60
00:03:57.670 --> 00:04:01.600
probably will be for
some time to come, we hope.

61
00:04:02.660 --> 00:04:05.250
Unless hyperinflation takes over or
something like that.

62
00:04:05.250 --> 00:04:07.850
So we're okay for most applications.

63
00:04:07.850 --> 00:04:13.178
As long as you're in integer space,
everything is going

64
00:04:13.178 --> 00:04:18.400
to be pretty good, and
associativity does hold there.

65
00:04:18.400 --> 00:04:23.170
Now in mathematics, yeah,
so there's a weird thing.

66
00:04:23.170 --> 00:04:26.680
So because of that,
identities like this don't hold.

67
00:04:26.680 --> 00:04:31.463
There are values of
a which will fail here.

68
00:04:31.463 --> 00:04:35.535
In fact are quite a lot of them, and so
you need to be careful on how you think

69
00:04:35.535 --> 00:04:39.306
about how you do arithmetic in and
what order you do the operations.

70
00:04:39.306 --> 00:04:45.866
Cuz changing the order which you do
operations can visibly change the result.

71
00:04:48.076 --> 00:04:52.846
&gt;&gt; Douglas Crockford: The most reported
bug in JavaScript is some variation on

72
00:04:52.846 --> 00:04:53.460
this.

73
00:04:56.400 --> 00:05:01.855
That you can add decimal numbers in
different ways and get different results,

74
00:05:01.855 --> 00:05:06.080
0.1 + 0.2 is not = to 0.3 and
lots of other things.

75
00:05:07.260 --> 00:05:08.720
And this is not JavaScript's fault,

76
00:05:08.720 --> 00:05:12.990
this is because the IEEE binary
floating point standard.

77
00:05:12.990 --> 00:05:17.680
In binary floating point you cannot
accurately represent binary fractions.

78
00:05:17.680 --> 00:05:21.490
We cannot exactly represent binary
fractions, you can only approximate.

79
00:05:22.500 --> 00:05:26.746
And approximation is not good enough
when you're dealing with money.

80
00:05:26.746 --> 00:05:28.466
Cuz when you're adding up people's money,

81
00:05:28.466 --> 00:05:32.390
people have a reasonable expectation that
you're going to get the right answer.

82
00:05:32.390 --> 00:05:34.690
And you don't when you're
using binary math.

83
00:05:36.360 --> 00:05:41.840
So, in retrospect, JavaScript should have
used a decimal floating point format.

84
00:05:41.840 --> 00:05:46.564
Because it turns out we do a lot
of applications in decimal.

85
00:05:46.564 --> 00:05:51.130
And being able to work accurately in
decimal is only important if your on

86
00:05:51.130 --> 00:05:52.770
a planet that uses a decimal system.

87
00:05:53.850 --> 00:05:57.210
And you know that's where we are so
this is recognized as a mistake.

88
00:05:59.440 --> 00:06:05.210
JavaScript has a number of methods on
numbers because numbers are objects.

89
00:06:05.210 --> 00:06:07.550
In many languages they're not but
in this one they are.

90
00:06:09.780 --> 00:06:13.852
You can add new methods
to number.prototype and

91
00:06:13.852 --> 00:06:17.730
increase the functionality
of the language.

92
00:06:17.730 --> 00:06:21.420
For example, there is not a trunc
method which will trancate a floating

93
00:06:21.420 --> 00:06:26.130
point number to a integer towards zero,
but you can add one.

94
00:06:26.130 --> 00:06:32.570
You can add to number.prototype.trunc this
function, and then instantly, every number

95
00:06:32.570 --> 00:06:36.900
in your system now knows how to truncate
itself, which is an amazing thing.

96
00:06:36.900 --> 00:06:40.690
This is a level of extensibility that
is rare in programming languages.

97
00:06:42.230 --> 00:06:46.690
Now with great power comes great
responsibility, so generally, you only

98
00:06:46.690 --> 00:06:54.830
want to be messing with prototypes
of primordial objects in a library.

99
00:06:54.830 --> 00:06:58.309
You don't wanna be messing
with them in applications.

100
00:06:58.309 --> 00:07:03.461
But libraries can do things
like anticipate what's going

101
00:07:03.461 --> 00:07:09.871
to be in the next version of the standard
and can polyfill the languages so

102
00:07:09.871 --> 00:07:16.970
that old editions like ES6 can run
programs that newer editions can also run.

103
00:07:16.970 --> 00:07:19.230
Numbers are first class
objects in this language.

104
00:07:19.230 --> 00:07:20.730
They really are objects.

105
00:07:20.730 --> 00:07:23.680
So a number can be stored in a variable,
they can be passed as a parameter,

106
00:07:23.680 --> 00:07:26.300
they can be returned from a function,
and they can be stored in an object.

107
00:07:26.300 --> 00:07:28.720
Object and numbers can have methods.

108
00:07:32.300 --> 00:07:34.558
JavaScript borrowed a bad idea from Java,

109
00:07:34.558 --> 00:07:38.520
well borrowed a lot of bad ideas from
Java, one of them was the math object.

110
00:07:39.650 --> 00:07:44.630
The idea with the math
object was some of the math

111
00:07:44.630 --> 00:07:49.330
functions can be expensive,
particularly the trig functions.

112
00:07:49.330 --> 00:07:53.190
And in some configurations
like the microconfigurations,

113
00:07:53.190 --> 00:07:54.950
they might not need trig functions.

114
00:07:54.950 --> 00:07:57.820
So they wanted to put them in a place
where it'd be easy to throw them out.

115
00:07:59.210 --> 00:08:01.050
They never did that cuz it turns out

116
00:08:02.180 --> 00:08:04.342
that's not a place where
you want to save money.

117
00:08:04.342 --> 00:08:07.300
But JavaScript made the same mistake.

118
00:08:07.300 --> 00:08:10.469
It would have been much smarter if all of
these have been methods on numbers but

119
00:08:10.469 --> 00:08:11.117
they're not.

120
00:08:11.117 --> 00:08:15.972
So there's this weird dot math dot
thing that you have to do in order to

121
00:08:15.972 --> 00:08:16.986
access them.

122
00:08:16.986 --> 00:08:22.341
The other thing I was crazy about
putting this in a disposable

123
00:08:22.341 --> 00:08:26.961
thing is that some of these functions,
like floor,

124
00:08:26.961 --> 00:08:32.316
which is the method for
converting something to an integer,

125
00:08:32.316 --> 00:08:35.376
is a critically important thing.

126
00:08:35.376 --> 00:08:38.792
But they wanted to put it in
a disposable object that wouldn't be

127
00:08:38.792 --> 00:08:43.180
in all implementations, they were
clearly not thinking this through.

128
00:08:43.180 --> 00:08:46.890
So anyway JavaScript got this
wrong in exactly the same way.

129
00:08:46.890 --> 00:08:50.650
It also includes a bunch of
consonants as well, which for

130
00:08:50.650 --> 00:08:52.420
no good reason are written in uppercase.

131
00:08:55.270 --> 00:09:00.150
One of the weirdest things that we
inherited from the IEEE format is NaN.

132
00:09:00.150 --> 00:09:02.500
NaN stands for not a number.

133
00:09:02.500 --> 00:09:06.510
But it is a number,
if what is type of NaN and it says number.

134
00:09:06.510 --> 00:09:09.324
So you start with that confusion,

135
00:09:09.324 --> 00:09:13.600
it is result of undefined or
erroneous operations.

136
00:09:13.600 --> 00:09:15.008
And that's actually a good idea.

137
00:09:15.008 --> 00:09:19.883
In earlier languages if you did
something like try to divide 0 by 0 It

138
00:09:19.883 --> 00:09:24.097
would cuz an interrupt which
would cuz the program to halt.

139
00:09:24.097 --> 00:09:27.474
Which turns out to be a very bad thing.

140
00:09:27.474 --> 00:09:31.801
So instead we have this signal where
instead you get NaN back and so

141
00:09:31.801 --> 00:09:35.261
you can ask at the end of a computation,
are you NaN,

142
00:09:35.261 --> 00:09:38.530
then we that a division by zero happened.

143
00:09:38.530 --> 00:09:40.317
That's much easier than trying to trap it.

144
00:09:41.440 --> 00:09:44.654
&gt;&gt; Douglas Crockford: It is toxic, so if
you have any arithmetic operation with NaN

145
00:09:44.654 --> 00:09:46.930
as an input, you'll get NaN as an output.

146
00:09:48.210 --> 00:09:52.600
The weird thing is that NaN is not equal
to anything itself, including NaN.

147
00:09:52.600 --> 00:09:55.370
So if you say is NaN = NaN?

148
00:09:55.370 --> 00:09:57.110
It says false.

149
00:09:57.110 --> 00:10:00.790
And even weirder is NaN
not equal NaN is true.

150
00:10:00.790 --> 00:10:02.380
Which is insane.

151
00:10:04.860 --> 00:10:05.860
Mathematics, right?

152
00:10:05.860 --> 00:10:11.265
I mean, we have this NaN not equal NaN.

153
00:10:13.485 --> 00:10:14.379
&gt;&gt; Douglas Crockford: Crazy.

154
00:10:14.379 --> 00:10:16.293
&gt;&gt; Speaker 2: [INAUDIBLE].

155
00:10:16.293 --> 00:10:20.792
&gt;&gt; Douglas Crockford: [LAUGH] Yeah,
there's a lot of mathematical

156
00:10:20.792 --> 00:10:23.961
absurdity in the IEEE format.

157
00:10:26.053 --> 00:10:27.345
&gt;&gt; Douglas Crockford: So
going back to Fortran,

158
00:10:27.345 --> 00:10:30.210
when talking about mathematical nonsense.

159
00:10:30.210 --> 00:10:34.648
Fortran was one of the first languages
where we got the idea of using equal as

160
00:10:34.648 --> 00:10:36.281
the assignment operator.

161
00:10:36.281 --> 00:10:41.610
Which was a really bad idea, ALGOL tried
to fix it, but we went the other way.

162
00:10:43.020 --> 00:10:45.600
So this is mathematically nonsense, right?

163
00:10:45.600 --> 00:10:49.480
There's no way that X is equal to X + 1.

164
00:10:49.480 --> 00:10:54.300
Except there are values that you can
put in for X which make this true.

165
00:10:55.670 --> 00:11:00.240
For example infinity,
JavaScript has a value called infinity.

166
00:11:00.240 --> 00:11:04.330
Which represents all numbers which are
bigger than the biggest number that it can

167
00:11:04.330 --> 00:11:05.300
accurately represent.

168
00:11:06.720 --> 00:11:10.120
And so infinity plus one equals infinity.

169
00:11:10.120 --> 00:11:13.450
I's true, it's an equation.

170
00:11:15.836 --> 00:11:19.290
There's also number.max_value
which is the biggest

171
00:11:19.290 --> 00:11:20.740
number that it knows how to represent.

172
00:11:22.610 --> 00:11:25.590
And if you add one to that you would
think you would get infinity but

173
00:11:25.590 --> 00:11:26.630
you don't you get max value.

174
00:11:28.000 --> 00:11:33.260
It's because once you get above nine
quadrillion, one acts like zero and

175
00:11:33.260 --> 00:11:37.206
it just fades away so that's true.

176
00:11:37.206 --> 00:11:40.000
In fact, 9 quadrillion or

177
00:11:40.000 --> 00:11:43.330
anything between 9 quadrillion and
infinity will behave the same way.

178
00:11:45.940 --> 00:11:46.920
But not NaN.

179
00:11:46.920 --> 00:11:52.940
So NaN plus one is NaN but
NaN is not equal NaN so it's false.

180
00:11:53.950 --> 00:11:54.520
That doesn't work.

181
00:11:56.760 --> 00:11:57.870
Yeah, I hate that.

