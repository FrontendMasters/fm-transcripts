WEBVTT

1
00:00:00.310 --> 00:00:05.150
[MUSIC]

2
00:00:05.150 --> 00:00:08.378
&gt;&gt; Douglas Crockford: So
this is a composition pattern, so

3
00:00:08.378 --> 00:00:12.310
this shows how composition works.

4
00:00:12.310 --> 00:00:16.520
So I can have when's attached to
the result of another when and so on.

5
00:00:16.520 --> 00:00:21.030
It's the same thing as when with
this nested call of f and g.

6
00:00:21.030 --> 00:00:23.540
And some of you might be going and
saying, wait a minute,

7
00:00:23.540 --> 00:00:25.270
that looks a lot like the third axiom.

8
00:00:26.670 --> 00:00:30.870
And you're right, this is the third axiom,

9
00:00:30.870 --> 00:00:33.890
because it turns out that
a promise is a monad.

10
00:00:33.890 --> 00:00:37.680
It's a different kind of monad
because the value is not known

11
00:00:37.680 --> 00:00:40.060
at the time the monad is created.

12
00:00:40.060 --> 00:00:44.089
The value will only be known, if it is
ever known, sometime in the future.

13
00:00:45.430 --> 00:00:49.870
And also unlike other monads, a promise
is linked to two resolver functions,

14
00:00:49.870 --> 00:00:51.910
the keep function and the break function.

15
00:00:51.910 --> 00:00:56.170
Whereas other monads
are more singular things.

16
00:00:56.170 --> 00:01:01.215
And also the when function
of the monad is like bind,

17
00:01:01.215 --> 00:01:03.995
except it takes two arguments,
one for success or failure.

18
00:01:05.325 --> 00:01:08.275
Failure is not a consideration
with the ordinary monad, but

19
00:01:08.275 --> 00:01:12.655
otherwise it's a monad, it otherwise
respects all the properties of monads.

20
00:01:14.605 --> 00:01:17.870
So, I'm going to make one, so,

21
00:01:17.870 --> 00:01:21.370
here's the VOW function, so
I've got a lot of code to show you.

22
00:01:21.370 --> 00:01:24.150
It's about a page worth of code,
it's not that much, but

23
00:01:24.150 --> 00:01:27.400
you can't project a page of code,
it's just rude.

24
00:01:27.400 --> 00:01:30.790
So what I'm going to do
is show it in pieces and

25
00:01:30.790 --> 00:01:32.462
hope you can kind of put it together.

26
00:01:32.462 --> 00:01:34.051
&gt;&gt; [COUGH]
&gt;&gt; Douglas Crockford: So

27
00:01:34.051 --> 00:01:36.689
we've got a function closure here,

28
00:01:36.689 --> 00:01:41.806
like we've been doing before because
I want to have some shared state.

29
00:01:41.806 --> 00:01:44.395
In particular, the enqueue function and
the enlighten function.

30
00:01:44.395 --> 00:01:46.441
And I don't want those to be global,

31
00:01:46.441 --> 00:01:51.200
I want to hide them inside of this shared
structure, so I'm calling it immediately.

32
00:01:51.200 --> 00:01:55.691
And then, oops, I got that wrong again,
so I've got to fix that,

33
00:01:55.691 --> 00:02:00.840
wrap that up, that's nice, okay, so
let's zoom in on the make function.

34
00:02:02.910 --> 00:02:05.830
&gt;&gt; Douglas Crockford: So
make has some private state.

35
00:02:05.830 --> 00:02:11.450
It's going to have an array of break
functions that are waiting to be called,

36
00:02:11.450 --> 00:02:14.740
an array of keep functions
that are waiting to be called.

37
00:02:15.894 --> 00:02:18.370
Its ultimate fate,

38
00:02:18.370 --> 00:02:23.640
which will be its value some day and
its initial status, is pending.

39
00:02:23.640 --> 00:02:26.630
And we'll have a herald function
that we'll get to in a minute.

40
00:02:26.630 --> 00:02:30.110
And then it returns an object
containing a break function,

41
00:02:30.110 --> 00:02:33.310
a keep function, and the promise object.

42
00:02:33.310 --> 00:02:37.900
Now normally, when I make one of these,
I will take the promise piece and

43
00:02:37.900 --> 00:02:40.370
snap it off and give it to someone else.

44
00:02:40.370 --> 00:02:44.620
So I give you my promise, and at the point
in time where I'm able to keep or

45
00:02:44.620 --> 00:02:45.420
break that promise.

46
00:02:45.420 --> 00:02:48.470
I will then call one of these
methods that I'm reserving,

47
00:02:48.470 --> 00:02:50.800
I could pass those to you as well,
but there's no point.

48
00:02:50.800 --> 00:02:55.910
You wouldn't want to break your own
promise, that doesn't do you any good, and

49
00:02:55.910 --> 00:02:58.810
one of these methods can
only be called once, right?

50
00:02:58.810 --> 00:03:02.300
So once someone has kept the promise,
no one else can keep it.

51
00:03:04.470 --> 00:03:09.740
Any attempt to change the fate
of the promise will fail, it

52
00:03:09.740 --> 00:03:16.370
will fail immediately, that is something
that can throw, so no point in that.

53
00:03:16.370 --> 00:03:21.760
So let's zoom in on the promise, I'm
sorry, well, let's zoom in on the herald.

54
00:03:21.760 --> 00:03:24.690
So the herald is
the function that break and

55
00:03:24.690 --> 00:03:29.150
keep will call to when they know what
the result of the function is going to be.

56
00:03:29.150 --> 00:03:30.832
And they want to tell everybody about it.

57
00:03:30.832 --> 00:03:37.940
So herald will get the state of the monad,
which will now be either.

58
00:03:40.190 --> 00:03:42.760
Which should be pending at this point
because we're about to change it.

59
00:03:42.760 --> 00:03:45.030
If it isn't pending,
then we have to throw an exception,

60
00:03:47.110 --> 00:03:50.200
then we will set the fate to
the new value that we got.

61
00:03:50.200 --> 00:03:53.280
And we've got this queue of
functions that are waiting for

62
00:03:53.280 --> 00:03:55.510
the resolution of this promise.

63
00:03:55.510 --> 00:03:58.440
And we will enlighten the queue and

64
00:03:58.440 --> 00:04:02.090
let all of those functions
know this is the fate.

65
00:04:02.090 --> 00:04:05.220
We will then take the array of
breakers and the array keepers and

66
00:04:05.220 --> 00:04:06.260
set them both to zero.

67
00:04:07.270 --> 00:04:11.730
Because they've,
whichever one doesn't matter anymore,

68
00:04:11.730 --> 00:04:13.060
we just want to forget about them.

69
00:04:13.060 --> 00:04:14.956
So it allows them to
get garbage collected.

70
00:04:14.956 --> 00:04:18.865
And we want to make sure everybody
only gets called once, so

71
00:04:18.865 --> 00:04:21.310
we'll just get rid of both queues.

72
00:04:21.310 --> 00:04:25.660
So now let's zoom in on the promise,
so the promise is an object.

73
00:04:25.660 --> 00:04:31.150
It contains a property is promise just so
that we can recognize that it's a promise.

74
00:04:32.870 --> 00:04:36.955
It's not strictly necessary, but
it can be a good thing to have,

75
00:04:36.955 --> 00:04:39.500
the important thing is the when method.

76
00:04:39.500 --> 00:04:43.450
The when method is the thing someone
will call on the promise when they want

77
00:04:43.450 --> 00:04:47.220
to be informed about what
the result of the promise is.

78
00:04:47.220 --> 00:04:50.290
And it can take a capped function and
a broken function, so

79
00:04:50.290 --> 00:04:52.760
first thing we'll do is make a new vow.

80
00:04:52.760 --> 00:04:57.070
This will be where we get the promise
that when is going to return.

81
00:04:58.890 --> 00:05:02.490
And then,
depending on what the current status is,

82
00:05:02.490 --> 00:05:07.070
we'll either add the new methods
to their respective queues.

83
00:05:07.070 --> 00:05:09.310
Where if the promise
has already been kept,

84
00:05:09.310 --> 00:05:12.700
then we'll add it to the keeper queue and
enlighten that queue immediately.

85
00:05:12.700 --> 00:05:15.720
That'll cause that promise
to get dispatched, so

86
00:05:15.720 --> 00:05:20.710
that means it doesn't matter when,
there's no race between when and keep.

87
00:05:22.620 --> 00:05:26.200
You can call when after
the promises have been kept, and

88
00:05:26.200 --> 00:05:27.100
you can't tell the difference.

89
00:05:27.100 --> 00:05:31.372
It works just the same, so that turns out
to be a really nice temporal property, and

90
00:05:31.372 --> 00:05:32.910
broken does a similar thing.

91
00:05:32.910 --> 00:05:37.460
And then at the end, we'll return
the promise component of the vow and

92
00:05:37.460 --> 00:05:38.322
it's done.

93
00:05:42.120 --> 00:05:45.400
&gt;&gt; Douglas Crockford: Okay, and then this
is a function that does the enqueueing,

94
00:05:45.400 --> 00:05:48.940
and there are a couple of cases
that it has to be concerned about.

95
00:05:48.940 --> 00:05:55.110
Whether it's getting past a value or
getting past another promise or whatever.

96
00:05:55.110 --> 00:05:56.580
And this deals with that and

97
00:05:56.580 --> 00:06:01.300
make sure that the right thing
gets put onto the queue.

98
00:06:01.300 --> 00:06:06.440
Then enlighten is the thing that informs
everybody about what the outcome is,

99
00:06:06.440 --> 00:06:08.150
so it just goes through the queue.

100
00:06:08.150 --> 00:06:10.978
And for
each function that's stored in the queue,

101
00:06:10.978 --> 00:06:17.020
it will call setImmediate to cause that
function to get called with the fate.

102
00:06:17.020 --> 00:06:19.560
setImmediate is a new thing
that was just added to the DOM,

103
00:06:19.560 --> 00:06:21.330
it's not in most of the browsers yet.

104
00:06:21.330 --> 00:06:25.400
It's like setTimeout of 0, except faster.

105
00:06:25.400 --> 00:06:29.020
It turned out that the early browsers
couldn't keep up with setTimeout of 0.

106
00:06:29.020 --> 00:06:30.999
So they added a fudge factor to it,

107
00:06:30.999 --> 00:06:34.293
which makes that time out of
0 actually take a long time.

108
00:06:34.293 --> 00:06:36.465
And there are now applications which say,
wait a minute,

109
00:06:36.465 --> 00:06:38.150
we actually wanted to run immediately.

110
00:06:38.150 --> 00:06:42.260
So, they had put in another thing to do
what setTimeout at 0 should have done.

111
00:06:43.940 --> 00:06:44.850
So, all of the code for

112
00:06:44.850 --> 00:06:48.880
this is on GitHub, if you want
to take a look at it altogether.

113
00:06:48.880 --> 00:06:56.800
This is the full page, I'll give you
a minute to write that down, that's it.

114
00:06:56.800 --> 00:07:00.640
Okay, so Our Friend the Monad,
so who knew?

115
00:07:00.640 --> 00:07:06.510
So you've seen four monads now,
the Identity Monad,

116
00:07:06.510 --> 00:07:10.470
the Ajax Monad, the Maybe Monad,
and the Promise Monad.

117
00:07:10.470 --> 00:07:16.742
And it turns out they're really easy and
kind of simple and

118
00:07:16.742 --> 00:07:24.020
not all that thing that they fussed about,
which is okay with me.

119
00:07:24.020 --> 00:07:29.240
You might want to go reading through
the literature, search for monad burrito,

120
00:07:29.240 --> 00:07:33.440
you'll be surprised at what you see.

121
00:07:33.440 --> 00:07:37.060
And you'll be able to understand it
because you've been through this.

122
00:07:37.060 --> 00:07:40.310
Whereas I can guarantee you no one else
who reads that stuff will make any sense

123
00:07:40.310 --> 00:07:42.710
out of it.

124
00:07:42.710 --> 00:07:45.530
So for further viewing,
I've got more videos for you to watch.

125
00:07:46.900 --> 00:07:49.110
Neither of these has anything
directly to do with monads, but

126
00:07:49.110 --> 00:07:50.870
they're both really interesting.

127
00:07:50.870 --> 00:07:53.550
So I've been talking all
day about the actor model,

128
00:07:53.550 --> 00:07:56.660
Carl Hewitt is the guy
who discovered it at MIT.

129
00:07:56.660 --> 00:07:59.420
Brilliant guy, he's written
a lot about the actor model, but

130
00:07:59.420 --> 00:08:01.340
it's all written at that level.

131
00:08:01.340 --> 00:08:04.580
And there are very few people on the
planet who've been able to make a lot of

132
00:08:04.580 --> 00:08:05.220
sense out of it.

133
00:08:06.350 --> 00:08:11.260
But he did an interview for Channel
9 at Microsoft a few months ago, and

134
00:08:11.260 --> 00:08:15.470
it's a very nice interview and
he clearly explains what this stuff is.

135
00:08:15.470 --> 00:08:19.200
Unfortunately the folks at Channel 9
seemed to like the really long URLs.

136
00:08:19.200 --> 00:08:22.620
So I doubt that there's anybody who
could actually type this one in, but

137
00:08:22.620 --> 00:08:26.264
if you do a search for these words,
you'll probably find it.

138
00:08:26.264 --> 00:08:29.000
Then Mark Miller,

139
00:08:29.000 --> 00:08:35.430
he's a guy who developed the modern
promise based on futures and other things.

140
00:08:35.430 --> 00:08:40.180
And he's been using promises to
not only develop secure systems,

141
00:08:40.180 --> 00:08:42.720
but to develop economic systems.

142
00:08:42.720 --> 00:08:47.218
So he's using the ability to control
object references in a distributed

143
00:08:47.218 --> 00:08:52.000
graph as tokens of value by which
you can create a financial system.

144
00:08:52.000 --> 00:08:53.490
Really, really interesting stuff, and

145
00:08:53.490 --> 00:08:56.970
this is a collection of two
lectures which talk about that.

