WEBVTT

1
00:00:00.000 --> 00:00:05.170
[MUSIC]

2
00:00:05.170 --> 00:00:05.809
&gt;&gt; Douglas Crockford: Here's an easy one.

3
00:00:05.809 --> 00:00:07.565
&gt;&gt; Speaker 2: [INAUDIBLE].

4
00:00:07.565 --> 00:00:10.671
&gt;&gt; Douglas Crockford: [LAUGH] We're
starting to get a little closer to useful

5
00:00:10.671 --> 00:00:11.850
things.

6
00:00:11.850 --> 00:00:14.580
Write a function twice that
takes a binary function and

7
00:00:14.580 --> 00:00:19.750
returns a urnary function that passes its
argument to the binary function twice.

8
00:00:19.750 --> 00:00:26.899
So, twice add is double and
twice mul is square, okay?

9
00:00:31.512 --> 00:00:34.615
&gt;&gt; Douglas Crockford: And
twice subtract would be zero and

10
00:00:34.615 --> 00:00:36.998
twice divide would be one.

11
00:00:45.373 --> 00:00:46.916
&gt;&gt; Douglas Crockford: Does
anyone need more time?

12
00:00:51.502 --> 00:00:52.550
&gt;&gt; Douglas Crockford: All right,
so here we go.

13
00:00:54.210 --> 00:00:59.810
Function twice takes a binary function and
returns a function that takes an argument,

14
00:00:59.810 --> 00:01:03.070
and returns the result of calling
the binary with that argument twice.

15
00:01:04.710 --> 00:01:06.666
Who got this one?

16
00:01:06.666 --> 00:01:11.110
Outstanding, that's really good.

17
00:01:11.110 --> 00:01:12.318
Anybody struggle with this one?

18
00:01:12.318 --> 00:01:13.579
Yeah?

19
00:01:13.579 --> 00:01:16.347
&gt;&gt; Speaker 3: [INAUDIBLE]
&gt;&gt; Douglas Crockford: [LAUGH] But

20
00:01:16.347 --> 00:01:18.420
you got it that's great.

21
00:01:20.650 --> 00:01:23.760
Any other discussion about
this one before we go on?

22
00:01:27.020 --> 00:01:27.820
All right then here we go.

23
00:01:29.610 --> 00:01:34.160
Write a function composeu that
takes two unary functions and

24
00:01:34.160 --> 00:01:36.720
returns a unary function
that calls them both.

25
00:01:37.730 --> 00:01:41.700
So here we've got composeu,
we pass it double and square.

26
00:01:41.700 --> 00:01:46.790
And past result of that three and
that should be 36.

27
00:01:52.226 --> 00:01:56.756
&gt;&gt; Speaker 4: I have a question.

28
00:01:56.756 --> 00:01:57.287
&gt;&gt; Douglas Crockford: Yep.

29
00:01:57.287 --> 00:02:01.991
&gt;&gt; Speaker 4: In real life, it seems like
the advantage of the solution of this is

30
00:02:01.991 --> 00:02:07.370
the runtime result with the value could
be a string of numbers or something.

31
00:02:07.370 --> 00:02:09.860
Because you have the same function.

32
00:02:09.860 --> 00:02:12.450
Do you use that a lot in practice?

33
00:02:12.450 --> 00:02:13.210
&gt;&gt; Douglas Crockford: Generally not.

34
00:02:13.210 --> 00:02:17.140
I'm pretty strict on what's going to be
a number and what's going to be a string.

35
00:02:17.140 --> 00:02:18.380
&gt;&gt; Speaker 4: So
when you write your functions,

36
00:02:18.380 --> 00:02:19.830
it's usually going to be one or the other?

37
00:02:19.830 --> 00:02:23.860
&gt;&gt; Douglas Crockford: Yeah.
Yeah, JavaScript

38
00:02:23.860 --> 00:02:28.540
was created around a time
when there was a fashion in

39
00:02:28.540 --> 00:02:32.120
scripting languages to try to ignore the
difference between numbers and strings.

40
00:02:33.440 --> 00:02:35.812
And I think we've learned
that that was a bad idea.

41
00:02:35.812 --> 00:02:44.282
So JavaScript sort of stuck in
the transitioning between those two ideas.

42
00:02:44.282 --> 00:02:47.010
&gt;&gt; Speaker 4: [INAUDIBLE] versus a-
&gt;&gt; Douglas Crockford: Yeah exactly.

43
00:02:47.010 --> 00:02:49.100
Basic I think actually got it right, and

44
00:02:49.100 --> 00:02:51.130
there are some people who thought
Basic's being too strict.

45
00:02:51.130 --> 00:02:52.780
We can relax it.

46
00:02:52.780 --> 00:02:56.890
It turned out relaxing it like HyperCard,
for example relaxed it.

47
00:02:56.890 --> 00:03:01.040
And it actually introduced
a lot of problems doing that.

48
00:03:01.040 --> 00:03:05.860
Because it creates an equivalence of
the two types in the programmer's head.

49
00:03:05.860 --> 00:03:08.468
But the two types are not
always equivalent, and so

50
00:03:08.468 --> 00:03:10.838
there's some places
where you get confused.

51
00:03:12.775 --> 00:03:14.570
&gt;&gt; Douglas Crockford: All right,
anybody need more time?

52
00:03:16.060 --> 00:03:21.790
Okay, so here we go,
composeu takes two functions, f and g and

53
00:03:21.790 --> 00:03:26.028
returns a function that takes an a and
returns

54
00:03:26.028 --> 00:03:31.270
result of f on that result and
g on that result.

55
00:03:33.200 --> 00:03:34.150
So who got this one?

56
00:03:35.620 --> 00:03:38.682
Fantastic, who struggled with this one?

57
00:03:42.330 --> 00:03:46.994
&gt;&gt; Douglas Crockford: So is there anybody
who's not getting these who needs some

58
00:03:46.994 --> 00:03:51.860
advice or direction or focus,
job counseling, anything?

59
00:03:54.340 --> 00:03:55.580
All right, should we move on?

60
00:03:58.780 --> 00:04:02.910
Okay, write a function composeb
that takes two binary functions and

61
00:04:02.910 --> 00:04:05.380
returns a function that calls them both.

62
00:04:05.380 --> 00:04:08.371
So here we have composeb taking add and

63
00:04:08.371 --> 00:04:14.171
mul which returns the function that
takes 2, 3 and 5 and returns 25.

64
00:04:21.402 --> 00:04:22.973
&gt;&gt; Douglas Crockford: Does
anyone need more time?

65
00:04:25.736 --> 00:04:26.620
&gt;&gt; Douglas Crockford: All right,
here we go.

66
00:04:28.400 --> 00:04:33.786
Composeb takes two functions, f and g, and
returns a function that takes a, b, and c,

67
00:04:33.786 --> 00:04:39.213
and returns f(a,

68
00:04:39.213 --> 00:04:42.180
b), passing that to g with c.

69
00:04:43.450 --> 00:04:44.826
Who got this one?

70
00:04:47.163 --> 00:04:48.147
&gt;&gt; Douglas Crockford: Very good.

71
00:04:48.147 --> 00:04:50.721
Any comment about it?

72
00:04:52.993 --> 00:04:54.806
&gt;&gt; Douglas Crockford: So,
the thing was starting to do now is

73
00:04:54.806 --> 00:04:58.830
you compose functions, making
functions out of existing functions.

74
00:04:58.830 --> 00:05:00.940
So, you can start to see how you
can take primitive things and

75
00:05:00.940 --> 00:05:03.080
start to build them up to
make complicated things.

