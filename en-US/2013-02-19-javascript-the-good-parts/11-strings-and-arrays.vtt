WEBVTT

1
00:00:00.055 --> 00:00:04.749
[MUSIC]

2
00:00:04.749 --> 00:00:06.205
&gt;&gt; Douglas Crockford: We
have two Boolean values,

3
00:00:06.205 --> 00:00:10.065
you'll be glad to know that they're
true and false, so we got that right.

4
00:00:10.065 --> 00:00:14.006
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: Then we have

5
00:00:14.006 --> 00:00:14.820
strings.

6
00:00:14.820 --> 00:00:18.020
Strings are a sequence of characters.

7
00:00:18.020 --> 00:00:20.021
Do you know why they are called strings?

8
00:00:20.021 --> 00:00:22.950
It turns out nobody knows.

9
00:00:22.950 --> 00:00:27.750
It's mystery, the earliest occurrence I
could find in the literature of someone

10
00:00:27.750 --> 00:00:33.010
referring to string as a type
of which of the data structure

11
00:00:33.010 --> 00:00:35.670
being a sequence of characters
was in over 60 report.

12
00:00:36.780 --> 00:00:39.490
And I asked John McCarthy
who was on that committee,

13
00:00:39.490 --> 00:00:41.260
why did you guys call them strings?

14
00:00:41.260 --> 00:00:42.846
And he got angry with me.

15
00:00:42.846 --> 00:00:44.479
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: And

16
00:00:44.479 --> 00:00:46.750
he since passed away, so
I can't follow up with him.

17
00:00:46.750 --> 00:00:49.660
So we don't know why
they're called strings.

18
00:00:50.710 --> 00:00:55.538
Earlier there was a sense of having
strings of things like strings

19
00:00:55.538 --> 00:00:58.356
of symbols or strings of statements.

20
00:00:58.356 --> 00:01:00.703
So a program was a string of statements,
but

21
00:01:00.703 --> 00:01:05.670
string meaning specifically a text
containing a sequence of characters.

22
00:01:05.670 --> 00:01:07.400
We don't know why we call that, and

23
00:01:07.400 --> 00:01:10.270
doesn't make sense that we call it that,
but we do.

24
00:01:12.280 --> 00:01:17.096
So sequences 0 or
more 16 bit Unicode characters.

25
00:01:17.096 --> 00:01:21.591
This is UCS-2 which quite
same this as UTF-16.

26
00:01:21.591 --> 00:01:26.415
Because JavaScript have no knowledge of
the surrogate pairs which get you out of

27
00:01:26.415 --> 00:01:27.500
the basic plane.

28
00:01:28.780 --> 00:01:32.180
Now it turns out surrogate pairs can
easily transit through the system, and

29
00:01:32.180 --> 00:01:35.990
if your operating system knows about them,
but not display correctly.

30
00:01:35.990 --> 00:01:38.940
But JavaScript will always
count them as two characters,

31
00:01:38.940 --> 00:01:40.530
not as a single paired character.

32
00:01:42.140 --> 00:01:44.530
JavaScript does not have a character type.

33
00:01:44.530 --> 00:01:47.480
So if you want to talk about a single
character that's just a string with

34
00:01:47.480 --> 00:01:49.000
length one.

35
00:01:49.000 --> 00:01:53.140
Strings are immutable, which means once
a string is made it cannot be modified.

36
00:01:53.140 --> 00:01:54.709
That turns out to be a really good thing.

37
00:01:56.920 --> 00:01:58.852
&gt;&gt; Douglas Crockford: So
if you want to change a string,

38
00:01:58.852 --> 00:02:01.450
you actually produce a new string.

39
00:02:01.450 --> 00:02:04.569
Which might contain parts of
the content of the previous one.

40
00:02:05.700 --> 00:02:09.650
Similar strings are equal under
triple equal, which is great.

41
00:02:09.650 --> 00:02:12.270
Java got that wrong,
JavaScript got that right.

42
00:02:12.270 --> 00:02:13.790
Hooray for JavaScript.

43
00:02:13.790 --> 00:02:16.950
So if you have two strings containing
the same sequence of characters,

44
00:02:16.950 --> 00:02:17.460
they're equal.

45
00:02:19.290 --> 00:02:23.800
String literals can be written with either
single quotes or double quotes, and

46
00:02:23.800 --> 00:02:29.430
they both work the same way with \ for
escapement.

47
00:02:29.430 --> 00:02:34.199
So since we have two ways of writing
strings, I use double quote for

48
00:02:34.199 --> 00:02:35.657
external strings.

49
00:02:35.657 --> 00:02:40.587
Things like HTML templates, or
text to the users, or stuff like that.

50
00:02:40.587 --> 00:02:44.163
And I use single quote for
internal strings and characters,

51
00:02:44.163 --> 00:02:47.750
names of properties,
not that's internal to the program.

52
00:02:49.150 --> 00:02:51.600
This is just a convention,
there's nothing to enforce it, but

53
00:02:51.600 --> 00:02:55.980
I think it makes it easier to understand
the use of a string within a program.

54
00:02:58.510 --> 00:03:03.127
We have a plus operator which
unfortunately both ads and concatenating.

55
00:03:03.127 --> 00:03:05.540
This was a bad idea lifted from Java.

56
00:03:05.540 --> 00:03:08.830
In Java it's not so
bad because Java is strongly typed, so

57
00:03:08.830 --> 00:03:11.340
you can predict which
one it's going to do.

58
00:03:11.340 --> 00:03:16.420
JavaScript being loosely typed, it's often
hard to predict what it's going to do,

59
00:03:16.420 --> 00:03:17.716
and often does things wrong.

60
00:03:17.716 --> 00:03:22.938
So a common problem is, someone will

61
00:03:22.938 --> 00:03:28.159
take a number out of a form field, and

62
00:03:28.159 --> 00:03:32.881
want to add it to another number.

63
00:03:32.881 --> 00:03:36.242
The value that you get from a form
field is always a string, but

64
00:03:36.242 --> 00:03:39.813
it's hard to remember sometimes
because it's labeled number.

65
00:03:39.813 --> 00:03:42.593
And you're told the user to type in
a number, and you wanna take the number of

66
00:03:42.593 --> 00:03:45.540
added input when you add it,
you actually concatenate it.

67
00:03:45.540 --> 00:03:51.100
Which can cause the answer to be asked
by many thousands which is a bad thing,

68
00:03:51.100 --> 00:03:57.300
and that's really a common
error happens all the time.

69
00:03:57.300 --> 00:04:00.030
There are number of ways of
converting a number in to a string.

70
00:04:01.240 --> 00:04:04.600
Numbers being objects
have two string methods.

71
00:04:04.600 --> 00:04:08.980
There's also a string function
which is more commonly used,

72
00:04:08.980 --> 00:04:10.480
you pass the thing there.

73
00:04:10.480 --> 00:04:14.332
Be sure not to put new in
front of the string function,

74
00:04:14.332 --> 00:04:17.854
cuz that does something
completely different.

75
00:04:17.854 --> 00:04:20.520
You can then go the other way,
and convert a string to a number.

76
00:04:21.820 --> 00:04:24.870
You can use the number function,
or you can use

77
00:04:24.870 --> 00:04:29.170
the + prefix operator which is the
preferred way because it's the shortest.

78
00:04:30.780 --> 00:04:35.000
There's also the parseInt
function which takes a string and

79
00:04:35.000 --> 00:04:39.090
a radix, which is the base of
the numbers being converted from.

80
00:04:40.970 --> 00:04:46.050
ParseInt will stop parsing once it sees
a character which it is not a digit

81
00:04:46.050 --> 00:04:48.590
in the base that it's working in.

82
00:04:49.950 --> 00:04:52.010
And it doesn't tell you
that it stopped early, and

83
00:04:52.010 --> 00:04:54.260
it doesn't tell you what
the remaining characters are.

84
00:04:54.260 --> 00:05:00.260
So it's a little difficult to use as
a parseInt function, despite its name.

85
00:05:00.260 --> 00:05:03.740
And it is problematic if
there is any possibility that

86
00:05:03.740 --> 00:05:07.290
the number that you're trying
to parse has a leading 0 in it.

87
00:05:07.290 --> 00:05:10.380
Which is very common for dates and times.

88
00:05:11.730 --> 00:05:14.290
Anything that by convention
has a leading 0.

89
00:05:14.290 --> 00:05:22.560
Because it does the stupid see thing
of thinking that leading 0 means octal.

90
00:05:22.560 --> 00:05:25.785
So now it's in base 8,
and if it sees an 8,

91
00:05:25.785 --> 00:05:29.800
8 is not a digit in base 8,
so it stops at that point.

92
00:05:29.800 --> 00:05:34.800
So parseInt 08 is 0, not 8,
really common error.

93
00:05:35.860 --> 00:05:40.894
So the defense against that is
to always put in the 10 radix.

94
00:05:42.278 --> 00:05:45.270
&gt;&gt; Douglas Crockford: And
it'll always do the right thing.

95
00:05:45.270 --> 00:05:48.880
It's very unlikely that you're gonna
parse anything that's not base 10.

96
00:05:48.880 --> 00:05:51.040
But occasionally, base 16, in that case,

97
00:05:51.040 --> 00:05:53.300
you'll definitely want to
make explicit as well.

98
00:05:55.790 --> 00:05:59.530
Strings have a length property,
so methods of properties, and

99
00:05:59.530 --> 00:06:03.430
it tells you how many 16-bit
code points are in the string.

100
00:06:05.760 --> 00:06:09.340
Strings have lots of methods,
again, strings are objects.

101
00:06:09.340 --> 00:06:13.280
So there's charAt which will return
a single character within the string.

102
00:06:14.650 --> 00:06:17.190
There's indexOf that does searching.

103
00:06:17.190 --> 00:06:18.920
Search also does searching.

104
00:06:20.950 --> 00:06:24.693
There's splice, split, and substring,

105
00:06:24.693 --> 00:06:29.967
which can return parts of the string,
lots of useful things.

106
00:06:29.967 --> 00:06:34.150
There's now a trim method
which was added in ES5.

107
00:06:34.150 --> 00:06:38.550
Which is good because prior to that we
didn't have one, that was a big omission.

108
00:06:40.610 --> 00:06:43.894
So if you are in ES6, and
you want to be able to trim,

109
00:06:43.894 --> 00:06:48.833
that turns out you can fix it, you can
add something to string that prototype.

110
00:06:48.833 --> 00:06:51.808
And awesomely, all of your strings
will know how to trim themselves.

111
00:06:54.874 --> 00:06:57.200
&gt;&gt; Douglas Crockford: Have
a supplant method.

112
00:06:57.200 --> 00:06:58.750
So here we have a template,

113
00:06:58.750 --> 00:07:03.180
an HTML template with a couple
of with three variables in it.

114
00:07:03.180 --> 00:07:05.910
And we have a data structure which has

115
00:07:05.910 --> 00:07:08.950
properties whose names
match those variables.

116
00:07:08.950 --> 00:07:13.075
So the obvious thing you'd want to
do is to take the template, and

117
00:07:13.075 --> 00:07:14.425
do the replacement.

118
00:07:14.425 --> 00:07:17.270
You can do that with the supplant
method on the template.

119
00:07:18.600 --> 00:07:20.760
Unfortunately, JavaScript
doesn't have a method like that.

120
00:07:22.000 --> 00:07:27.550
But it will be easier to write one, so
we can go to String.prototype.supplant,

121
00:07:27.550 --> 00:07:32.360
and add a method which would do that
very thing, using a replace method.

122
00:07:32.360 --> 00:07:36.790
Passing at regular expression which
is looking for those patterns, and

123
00:07:36.790 --> 00:07:43.249
which is also given a function which will
make the substitution from the object.

124
00:07:47.600 --> 00:07:52.570
So an array is a linear sequence
of memory which is divided into

125
00:07:52.570 --> 00:07:57.000
equal size pockets which can be
indexed by number which allows for

126
00:07:57.000 --> 00:08:00.480
a very fast way of retrieving
variables from a set.

127
00:08:01.720 --> 00:08:04.020
JavaScript doesn't have
anything like that.

128
00:08:04.020 --> 00:08:06.767
Instead, JavaScript has objects, and

129
00:08:06.767 --> 00:08:12.358
it adds a little bit of magic to an object
to creates something that calls an array.

130
00:08:12.358 --> 00:08:16.466
But which acts very differently than
real arrays, in some ways much better,

131
00:08:16.466 --> 00:08:17.800
in some ways much worse.

132
00:08:19.090 --> 00:08:20.470
So array inherits from object,

133
00:08:21.810 --> 00:08:27.150
the indexes which you would put in
the brackets are converted into strings.

134
00:08:27.150 --> 00:08:32.490
And then hashed into the object that backs
the array in order to retrieve the value,

135
00:08:32.490 --> 00:08:36.190
it was very efficient for sparse arrays.

136
00:08:36.190 --> 00:08:39.730
A sparse array is an array where most
of the cells are gonna be empty,

137
00:08:39.730 --> 00:08:42.150
JavaScript kicks ass at that.

138
00:08:42.150 --> 00:08:44.880
Unfortunately, in most of our
applications we don't use sparse arrays,

139
00:08:44.880 --> 00:08:49.080
we use dense arrays, and
JavaScript is really inefficient at that.

140
00:08:50.200 --> 00:08:53.620
But there is one advantage here,
when you're creating a new array,

141
00:08:53.620 --> 00:08:55.321
you don't have to say what length it is.

142
00:08:55.321 --> 00:08:58.714
And you don't have to say what
type is going to go into it,

143
00:08:58.714 --> 00:09:02.916
because any type can go into it, and
it doesn't actually have a link.

144
00:09:02.916 --> 00:09:06.442
So you can put as much stuff
in there as you want, and

145
00:09:06.442 --> 00:09:09.730
it will always fail until
memory is exhausted.

146
00:09:12.580 --> 00:09:15.750
Arrays have a special link property

147
00:09:15.750 --> 00:09:18.180
which does not contain the number
of elements on the array.

148
00:09:19.850 --> 00:09:20.667
What it does?

149
00:09:20.667 --> 00:09:26.680
It contain is one more than the highest
integers subscript in the array.

150
00:09:26.680 --> 00:09:30.870
Now for dense arrays,
that means the same thing, but

151
00:09:30.870 --> 00:09:34.610
for sparse arrays means
something very different.

152
00:09:34.610 --> 00:09:36.730
And the reason for having that is so

153
00:09:36.730 --> 00:09:41.140
that you can loop through
an array using a for statement.

154
00:09:41.140 --> 00:09:45.200
And have it work pretty much
the way it does in other languages.

155
00:09:46.770 --> 00:09:51.530
You could use for in on arrays,
but I recommend that you don't.

156
00:09:51.530 --> 00:09:52.420
The reason is that,

157
00:09:52.420 --> 00:09:58.280
usually in arrays we expect to visit
the elements in the right order.

158
00:09:59.980 --> 00:10:04.832
For in does not guarantee the order in
which it's going to return the values.

159
00:10:04.832 --> 00:10:10.502
And so you don't know for sure that
you're gonna get the correct sequence,

160
00:10:10.502 --> 00:10:13.790
and that could cause
some programs to fail.

161
00:10:13.790 --> 00:10:18.003
We have a really nice array literal
formats similar to the object literal

162
00:10:18.003 --> 00:10:18.561
format.

163
00:10:18.561 --> 00:10:24.305
So here I've got an array containing
three elements, and it's length is four.

164
00:10:24.305 --> 00:10:28.234
Because I'm sorry, it's like those three
and the elements are numbered zero,

165
00:10:28.234 --> 00:10:29.750
one, and two.

166
00:10:29.750 --> 00:10:33.670
I can add a new method, or
a new property, new element,

167
00:10:33.670 --> 00:10:37.790
to the end of an array by
assigning to the array's length.

168
00:10:38.790 --> 00:10:43.786
Because the array's length is always one
bigger than the highest numbered element.

169
00:10:43.786 --> 00:10:48.317
This guarantees this element will be one
bigger than the previous one, and so

170
00:10:48.317 --> 00:10:50.140
you can always append to that.

171
00:10:53.460 --> 00:10:57.260
Arrays are objects, and so the dot
notation works, but the dot notation

172
00:10:57.260 --> 00:11:02.740
doesn't work with numeric numbers,
because gets confused with decimal point.

173
00:11:03.870 --> 00:11:06.690
So you should always use
the bracket notation with arrays,

174
00:11:06.690 --> 00:11:07.960
except when calling methods.

175
00:11:10.090 --> 00:11:14.260
There are lots of useful methods on
arrays, particularly some of the new

176
00:11:14.260 --> 00:11:17.090
methods like map and
forEach that were added in the ES5.

177
00:11:17.090 --> 00:11:19.663
Which allow you to take a function and

178
00:11:19.663 --> 00:11:22.818
apply it to each of
the elements of the array.

179
00:11:26.238 --> 00:11:30.067
&gt;&gt; Douglas Crockford: Arrays have a sort
function which unfortunately does horrible

180
00:11:30.067 --> 00:11:31.280
things.

181
00:11:31.280 --> 00:11:39.120
So here we have an array of numbers, and
we sort it, and it comes out like that.

182
00:11:39.120 --> 00:11:40.340
Anyone guess what happened?

183
00:11:40.340 --> 00:11:43.810
&gt;&gt; Speaker 3: [INAUDIBLE].

184
00:11:43.810 --> 00:11:45.490
&gt;&gt; Douglas Crockford: Yeah,
it sorts in the strings.

185
00:11:47.020 --> 00:11:51.320
On each comparison,
it forces those two numbers to be strings,

186
00:11:51.320 --> 00:11:53.010
comparison of strings.

187
00:11:53.010 --> 00:11:56.560
So it's wildly inefficient, and
it gives you the incorrect results.

188
00:11:59.270 --> 00:12:02.800
Fortunately, it's possible to pass
a compare function to sort where

189
00:12:02.800 --> 00:12:04.720
we can say do it my way.

190
00:12:06.150 --> 00:12:09.460
Where you can subtract two numbers and
get the right result.

191
00:12:10.460 --> 00:12:13.260
By default for numbers it does
something that is tragically wrong.

192
00:12:15.820 --> 00:12:21.742
You can delete elements from an array,
using the delete operator.

193
00:12:21.742 --> 00:12:26.520
But delete will not do what you want,
because it will leave a hole in the array.

194
00:12:27.570 --> 00:12:31.700
There's a splice method which
will close up the hole,

195
00:12:31.700 --> 00:12:33.900
let me show you an example of this.

196
00:12:33.900 --> 00:12:36.760
So here I have an array of four elements,
and

197
00:12:36.760 --> 00:12:40.520
I want to delete the b,
which is at index 1.

198
00:12:40.520 --> 00:12:45.160
So I could delete myArray of 1,
but what I get back

199
00:12:45.160 --> 00:12:49.770
now is an array with a hole in it,
because element 1 is now undefined.

200
00:12:49.770 --> 00:12:53.160
Undefined is the value
of missing elements.

201
00:12:53.160 --> 00:12:58.486
So if I wanna make that hole go away,
I could call a myArray.splice passing

202
00:12:58.486 --> 00:13:04.338
it a one meaning start at index 1, and
the other one meaning, delete 1 element.

203
00:13:04.338 --> 00:13:10.342
And the way that it does that is
that it then goes to element 2,

204
00:13:10.342 --> 00:13:14.854
and deletes it and
reasserts it as element 1.

205
00:13:14.854 --> 00:13:18.770
And goes to element 3, deletes it and
re inserts it as element 2.

206
00:13:18.770 --> 00:13:23.110
So that's how it closes up the hole,
so it's going to be slow.

207
00:13:24.240 --> 00:13:27.780
So appending things to the end
of arrays tends to be fast,

208
00:13:27.780 --> 00:13:31.390
removing things from anywhere except
the end tends to be very slow.

