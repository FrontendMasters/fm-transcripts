WEBVTT

1
00:00:00.000 --> 00:00:04.639
[MUSIC].

2
00:00:04.639 --> 00:00:06.426
&gt;&gt; Douglas Crockford: We have no
pointers in a lot of languages,

3
00:00:06.426 --> 00:00:08.960
we haven't been Java we
have in the JavaScript.

4
00:00:08.960 --> 00:00:12.860
And they're terrible because they
result in null pointer exceptions.

5
00:00:12.860 --> 00:00:15.820
Almost seems like the design
of Java was optimized for

6
00:00:15.820 --> 00:00:18.350
the generation of null pointer exceptions.

7
00:00:18.350 --> 00:00:22.880
And null pointers are like the worst
bug they have to track down because

8
00:00:22.880 --> 00:00:26.520
at the point of the error there's
nothing there, its absence, it's void.

9
00:00:26.520 --> 00:00:30.056
It's not there's something there that's
wrong it's there is nothing there, and

10
00:00:30.056 --> 00:00:30.669
you go [SOUND].

11
00:00:30.669 --> 00:00:34.850
And usually what it's caused by is
you didn't do a null pointer check.

12
00:00:34.850 --> 00:00:39.030
Because the language barfs when
a null pointer is missing or

13
00:00:39.030 --> 00:00:43.180
when a pointer is null, and
you just want to put an if around it.

14
00:00:43.180 --> 00:00:47.360
If it's null then don't do that,
and you just want to not do that.

15
00:00:47.360 --> 00:00:50.220
And so you're constantly having to go
through your code finding places where you

16
00:00:50.220 --> 00:00:53.090
didn't check for null and
saying don't do that.

17
00:00:53.090 --> 00:00:56.329
Which is sort of a waste of time, but
that's what the language requires.

18
00:00:57.640 --> 00:00:59.520
So the Monad guys found
a solution to this.

19
00:00:59.520 --> 00:01:03.090
They call it the maybe monad.

20
00:01:03.090 --> 00:01:06.070
It works sort of like NaN.

21
00:01:06.070 --> 00:01:12.050
You remember NaN is a thing that
represents a non-number thing.

22
00:01:12.050 --> 00:01:15.740
So if you divide zero by zero you get NaN,
instead of an exception.

23
00:01:17.210 --> 00:01:21.450
And that turns out to be a good thing,
because it doesn't disrupt the pipeline.

24
00:01:21.450 --> 00:01:26.890
And, at the end, you can look, it's NaN,
forget it, we didn't wanna do it anyway.

25
00:01:26.890 --> 00:01:32.050
It's better than having to put an IF
around every division to make sure that

26
00:01:32.050 --> 00:01:33.490
it doesn't end up thrilling.

27
00:01:33.490 --> 00:01:36.320
We can do a similar kind of thing for
null, right?

28
00:01:36.320 --> 00:01:39.810
And that's called the Maybe No Monad.

29
00:01:39.810 --> 00:01:44.000
So we're gonna extend our
macroid again to allow for that.

30
00:01:45.190 --> 00:01:48.420
So monacroid now take a modifier function.

31
00:01:49.520 --> 00:01:54.890
And at the last step of the units
construction, if it sees that

32
00:01:54.890 --> 00:01:58.760
there is a modifier function available,
it will simply call it.

33
00:01:58.760 --> 00:02:03.470
Passing in the MONAD and
the value that the MONAD was created with.

34
00:02:03.470 --> 00:02:05.480
So that's a small change.

35
00:02:05.480 --> 00:02:08.010
So let's look at how we
would use that material.

36
00:02:09.650 --> 00:02:13.800
We gonna create a maybe = MONAD,
by calling the macroid,

37
00:02:13.800 --> 00:02:16.620
and passing in this function.

38
00:02:16.620 --> 00:02:18.860
This function will take the MONAD and
the value.

39
00:02:18.860 --> 00:02:23.670
And if the value is no where undefined,
It will set a property on

40
00:02:23.670 --> 00:02:28.320
the monad saying this is null just so that
people can look at it you know what it is.

41
00:02:28.320 --> 00:02:32.150
And it will replace the bind method
with a different bind method

42
00:02:32.150 --> 00:02:34.750
that does nothing except
return the null monad.

43
00:02:34.750 --> 00:02:39.510
It will not try to call the function that
it was called with or do anything else.

44
00:02:39.510 --> 00:02:42.900
It just does nothing,
essentially it returns NaN.

45
00:02:42.900 --> 00:02:46.920
It's returning a null monad.

46
00:02:46.920 --> 00:02:52.550
So I can do this now,
I can make a maybe monad passing it null,

47
00:02:52.550 --> 00:02:54.740
so this is now a null monad.

48
00:02:54.740 --> 00:03:01.330
And when I try to call bind on it,
nothing happens, no error is generated.

49
00:03:01.330 --> 00:03:08.250
So with this you can have an application
with no null checks anywhere.

50
00:03:08.250 --> 00:03:10.900
The only null check in
the whole system is this one

51
00:03:10.900 --> 00:03:14.380
that only happens at the time when
you're creating a null monad.

52
00:03:14.380 --> 00:03:17.110
All the rest of the time,
your code just works.

53
00:03:17.110 --> 00:03:22.048
If null ever gets into the system
anywhere, you just let it go and

54
00:03:22.048 --> 00:03:24.770
it's nice.

55
00:03:24.770 --> 00:03:29.170
So that's one of the applications
that these Haskell guys figured out.

56
00:03:29.170 --> 00:03:30.200
And we can do it.

57
00:03:30.200 --> 00:03:32.010
There's nothing to
prevent us from doing it.

58
00:03:32.010 --> 00:03:32.590
It's pretty cool.

59
00:03:35.490 --> 00:03:40.210
So now I'm going to completely change
topics and talk about something else.

60
00:03:41.620 --> 00:03:43.750
And that's something else is concurrency.

61
00:03:43.750 --> 00:03:46.340
Concurrency is where we want to
have multiple things happening at

62
00:03:46.340 --> 00:03:47.030
the same time.

63
00:03:48.570 --> 00:03:53.060
And computers are getting better at it,
but programming languages are not.

64
00:03:53.060 --> 00:03:54.850
And programmers generally are not.

65
00:03:55.940 --> 00:03:59.320
Managing having lots of stuff
going on at the same time is hard.

66
00:04:00.410 --> 00:04:04.460
The most popular technique for
dealing with that right now, is threads.

67
00:04:04.460 --> 00:04:06.370
And that's bad, because threads are evil.

68
00:04:07.650 --> 00:04:13.110
Threads are easy to get started with,
but they're really hard to reason about.

69
00:04:13.110 --> 00:04:16.595
And so systems can very
quickly get very complicated,

70
00:04:16.595 --> 00:04:19.780
get,
&gt;&gt; Douglas Crockford: Subject to race

71
00:04:19.780 --> 00:04:22.910
conditions, and deadlocks,
and really bad stuff.

72
00:04:22.910 --> 00:04:23.740
Threads are bad.

73
00:04:24.910 --> 00:04:29.360
In my opinion, the biggest design
error in Java was that it couldn't

74
00:04:29.360 --> 00:04:32.830
decide if it wanted to be an application
language or a systems language.

75
00:04:33.910 --> 00:04:37.290
So as a result of that confusion,

76
00:04:37.290 --> 00:04:41.770
it exposed threads to the application
level, which I think was bad.

77
00:04:41.770 --> 00:04:46.230
So threads at the systems level
are a necessary evil, but

78
00:04:46.230 --> 00:04:48.750
at the application level,
they're just evil.

79
00:04:48.750 --> 00:04:50.240
And should never be employed there.

80
00:04:50.240 --> 00:04:54.770
But reliability is so
important we don't want to compromise it

81
00:04:54.770 --> 00:04:58.420
by being dependent on a concurrency
mechanism which is unsafe.

82
00:04:58.420 --> 00:04:59.490
And that's what threads are.

83
00:05:00.770 --> 00:05:04.410
So the alternative is
turn-based programming.

84
00:05:04.410 --> 00:05:07.850
Which is what we have in the browser,
is what we have in Nodejs.

85
00:05:07.850 --> 00:05:12.270
It's becoming a much more popular
way of doing concurrent systems.

86
00:05:12.270 --> 00:05:16.640
The turn-based system,
the main application is single-threaded,

87
00:05:16.640 --> 00:05:19.780
which means it is race free,
and it is deadlock free.

88
00:05:19.780 --> 00:05:23.650
So there's a whole lot of stuff that
could go bad that cannot go bad,

89
00:05:23.650 --> 00:05:25.520
that turns out to be a good thing.

90
00:05:25.520 --> 00:05:28.090
But like with everything
there are trade-offs.

91
00:05:28.090 --> 00:05:33.540
And the trade off with turn based
processing is you must obey always the law

92
00:05:33.540 --> 00:05:39.320
of turns, which says, never wait,
never block, finish fast.

93
00:05:39.320 --> 00:05:40.500
So at the beginning of every turn,

94
00:05:40.500 --> 00:05:46.090
something starts and no other turn
can begin until that one ends.

95
00:05:46.090 --> 00:05:47.470
So it can't stop and wait for

96
00:05:47.470 --> 00:05:52.930
something else to happen because it's
gonna hold up everything that follows it.

97
00:05:52.930 --> 00:05:57.550
So with turn base system, it could be
event driven, which is how the browser

98
00:05:57.550 --> 00:06:04.190
works, it could be message driven, which
is the way node works to our equivalent.

99
00:06:04.190 --> 00:06:08.510
But you don't have threads
because threads cause races and

100
00:06:08.510 --> 00:06:13.210
you don't have mutual exclusion because
mutual exclusion causes deadlock.

101
00:06:13.210 --> 00:06:15.000
So it's how browsers work.

102
00:06:15.000 --> 00:06:16.730
It's how most UI frameworks work.

103
00:06:18.670 --> 00:06:22.590
There's servers that do that now
including Elko for Java, Twisted for

104
00:06:22.590 --> 00:06:25.310
Python and Nodejs for JavaScript.

105
00:06:26.930 --> 00:06:32.340
Now even with this, some forms of
asynchronosity can be hard to manage,

106
00:06:32.340 --> 00:06:35.110
particularly if you have
a number of events,

107
00:06:35.110 --> 00:06:38.630
which are serially
dependent on each other.

108
00:06:38.630 --> 00:06:41.684
Doing that asynchronously
gets complicated.

109
00:06:41.684 --> 00:06:44.886
But the naive approach is to
have nested event handlers.

110
00:06:44.886 --> 00:06:48.836
And that turns out to be very brittle and
hard to maintain, so

111
00:06:48.836 --> 00:06:50.700
that's not a good pattern.

