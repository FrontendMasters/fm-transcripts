WEBVTT

1
00:00:00.531 --> 00:00:05.016
[MUSIC]

2
00:00:05.016 --> 00:00:07.139
&gt;&gt; Douglas Crockford: So, I think
there's a better way to think about it.

3
00:00:07.139 --> 00:00:10.403
And that is treating
the function as a module,

4
00:00:10.403 --> 00:00:16.180
because we've already seen a thing where
we can have a self executing function and

5
00:00:16.180 --> 00:00:20.890
it works exactly like the old code
except it's hiding that stuff.

6
00:00:20.890 --> 00:00:24.660
So, it's creating a scope where
the stuff does not leak out.

7
00:00:24.660 --> 00:00:27.119
It only reveals what it wants to reveal,
and

8
00:00:27.119 --> 00:00:29.650
that turns out to be
a really useful pattern.

9
00:00:29.650 --> 00:00:34.493
And I wanna build functions or objects out
of this because I think it's better than

10
00:00:34.493 --> 00:00:37.597
what the language want its
pseudo classical style.

11
00:00:39.165 --> 00:00:40.587
&gt;&gt; Douglas Crockford: So
if I wanna make a singleton,

12
00:00:40.587 --> 00:00:43.230
language like Java that's
a surprising amount of work.

13
00:00:43.230 --> 00:00:46.650
Cuz you have to build a class even though
you're only gonna have one instance of it.

14
00:00:46.650 --> 00:00:51.017
So it's a class of one, doesn't make
sense, but that's how you do it.

15
00:00:51.017 --> 00:00:52.598
But in JavaScript it's much easier.

16
00:00:52.598 --> 00:00:59.540
So here, I want to make an object that has
two methods, first method, second method.

17
00:00:59.540 --> 00:01:04.060
I want them both to have shared
access to some private state or

18
00:01:04.060 --> 00:01:07.330
some private functions, and I can do that.

19
00:01:07.330 --> 00:01:11.391
So I will immediately invoke
the outer function, so

20
00:01:11.391 --> 00:01:14.723
what I assign to singleton is this object.

21
00:01:14.723 --> 00:01:18.520
And these objects, because of closure,
will always have access to this stuff.

22
00:01:18.520 --> 00:01:23.024
I don't have to put this in the global
space for them to share it, this is good,

23
00:01:23.024 --> 00:01:24.821
this is a really good pattern.

24
00:01:24.821 --> 00:01:27.690
And there are lots of
variations on this pattern.

25
00:01:27.690 --> 00:01:33.140
For example, instead of returning
a value that gets assigned,

26
00:01:33.140 --> 00:01:37.620
I could be augmenting
an existing global object.

27
00:01:37.620 --> 00:01:41.205
Maybe I've got something called
Global which is the container

28
00:01:41.205 --> 00:01:45.064
of all the global state for
my application, I can append to it here.

29
00:01:47.890 --> 00:01:51.854
&gt;&gt; Douglas Crockford: So this module
is pattern is trivially converted into

30
00:01:51.854 --> 00:01:56.180
a powerful constructor pattern,
so here's the recipe.

31
00:01:57.180 --> 00:02:01.020
Step one, we make an object using
any of the means available to us for

32
00:02:01.020 --> 00:02:03.700
making objects including,
objects literal or

33
00:02:03.700 --> 00:02:07.650
a new or object.create or
calling some other constructor.

34
00:02:09.680 --> 00:02:12.900
Step two we'll define some variables or
functions

35
00:02:12.900 --> 00:02:16.830
these will become the private members
of the object that we're constructing.

36
00:02:18.560 --> 00:02:22.520
Step three, we augment the object
with privileged methods.

37
00:02:22.520 --> 00:02:26.160
A privileged method is
a method which is public, but

38
00:02:26.160 --> 00:02:28.990
which closes over the private state.

39
00:02:28.990 --> 00:02:32.603
So it gives it privileged
access to the secrets.

40
00:02:32.603 --> 00:02:34.820
In step 4, we return the object.

41
00:02:36.250 --> 00:02:39.360
So it's a little abstract, okay, so
let me turn this into a template,

42
00:02:39.360 --> 00:02:40.510
to make it a little easier to follow.

43
00:02:41.540 --> 00:02:44.809
So step one, I'm gonna make a new object.

44
00:02:44.809 --> 00:02:50.740
I've got myPowerConstructor which I
spelled with a lowercase initial letter,

45
00:02:50.740 --> 00:02:54.440
because it doesn't need the new prefix.

46
00:02:54.440 --> 00:02:57.733
If you call this with the new prefix,
all you're gonna do is waste of time,

47
00:02:57.733 --> 00:02:58.793
it's not gonna break.

48
00:03:01.977 --> 00:03:04.402
&gt;&gt; Douglas Crockford: And
I'm gonna create a variable called that,

49
00:03:04.402 --> 00:03:06.773
which is the object that I'm constructing.

50
00:03:06.773 --> 00:03:10.377
I would rather call it this, but this is
a reserved word, I can't assign to it, so

51
00:03:10.377 --> 00:03:11.490
I'm gonna call it that.

52
00:03:13.110 --> 00:03:18.323
And in this case, I'm gonna ask some other
constructor to make the object for me.

53
00:03:18.323 --> 00:03:22.341
That's gonna give me another
dimension of inheritance,

54
00:03:22.341 --> 00:03:25.544
cuz whatever it does,
I get the benefit from.

55
00:03:25.544 --> 00:03:29.725
And Step Two I'm gonna create my secret
variables, my secret functions and

56
00:03:29.725 --> 00:03:31.700
I can initialize them now or later.

57
00:03:33.140 --> 00:03:37.551
Step Three, I'll create my privileged
methods, I will add them to that,

58
00:03:37.551 --> 00:03:41.066
and the privileged methods will
have access to the secret.

59
00:03:41.066 --> 00:03:44.680
Will have access to any parameters that
were passed into the constructor, and

60
00:03:44.680 --> 00:03:46.280
they can also have access to that.

61
00:03:48.490 --> 00:03:53.330
And I return that and that's it, this is
a really powerful way of creating objects.

62
00:03:55.290 --> 00:03:59.364
One of the benefits of this is that
objects can have private state,

63
00:03:59.364 --> 00:04:02.728
which is something that
the other forms do not give us.

64
00:04:05.320 --> 00:04:08.846
&gt;&gt; Douglas Crockford: So,
let's look again at the Gizmo object.

65
00:04:12.727 --> 00:04:14.480
&gt;&gt; Douglas Crockford: There's just so
little to like about this.

66
00:04:14.480 --> 00:04:17.768
One of them is that even though
Gizmo inherits from Hoozit,

67
00:04:17.768 --> 00:04:20.542
the constructors still
have to do the same stuff.

68
00:04:20.542 --> 00:04:22.984
So the fact that Hoozit's
inheriting from Gizmo,

69
00:04:22.984 --> 00:04:26.340
he still has to do all the work
of constructing it anyway.

70
00:04:26.340 --> 00:04:29.060
He has to still do the id
initialization thing.

71
00:04:30.230 --> 00:04:34.146
So, let's do this using the functional
pattern that I just showed you.

72
00:04:36.147 --> 00:04:39.636
&gt;&gt; Douglas Crockford: So now, Gizmo
is just returning a simple object and

73
00:04:39.636 --> 00:04:42.720
Hoozit gets its that from calling Gizmo,
and

74
00:04:42.720 --> 00:04:47.120
add it's privileged method to it and
returns it and it's done.

75
00:04:48.380 --> 00:04:49.970
I think this is so much nicer,

76
00:04:49.970 --> 00:04:54.900
I mean this is a lot less code than even
the wrapper thing that we did earlier.

77
00:04:56.290 --> 00:04:59.072
And so much cleaner and
nice I really like this, but

78
00:04:59.072 --> 00:05:03.110
it also allows us to do some stuff
that we cannot do with the other one.

79
00:05:03.110 --> 00:05:07.726
For example,
there's no privacy on the ID in these.

80
00:05:07.726 --> 00:05:12.815
Suppose I want ID not to be a public
property of the object but to be a private

81
00:05:12.815 --> 00:05:18.840
property of the object that is only
access indirectly through its methods.

82
00:05:18.840 --> 00:05:22.230
Okay, maybe I have security or other
considerations that want me to do that.

83
00:05:23.460 --> 00:05:28.840
Trivial to do in this model, so, in fact,

84
00:05:28.840 --> 00:05:31.410
adding that privacy actually
makes the code smaller.

85
00:05:33.690 --> 00:05:39.157
I simply don't add ID to the object
literal, cuz it's gonna be private now,

86
00:05:39.157 --> 00:05:43.470
and instead of saying this.id here,
just saying ID there.

87
00:05:43.470 --> 00:05:45.700
So, that function,

88
00:05:45.700 --> 00:05:49.630
the two string function will close over
the ID that was passed into Gizmo.

89
00:05:50.650 --> 00:05:54.284
And we have a similar benefit
happening in the Hoozit.

90
00:05:54.284 --> 00:05:58.718
Its test function gets closed over the
variable that got passed into Hoozit, so

91
00:05:58.718 --> 00:06:00.250
code is actually smaller.

92
00:06:01.890 --> 00:06:06.470
We have other things we could do,
if we want to simulate package scope

93
00:06:06.470 --> 00:06:10.845
which I think is one of the big bad
ideas in programming languages, but

94
00:06:10.845 --> 00:06:12.750
we're kinda stuck with it.

95
00:06:12.750 --> 00:06:16.660
And if you want to simulate it,
you can have this secret object,

96
00:06:16.660 --> 00:06:20.870
which is another parameter,
that contains the shared state.

97
00:06:20.870 --> 00:06:22.600
That is essentially the packaged scope,

98
00:06:22.600 --> 00:06:24.380
that these guys can pass
through each other.

99
00:06:24.380 --> 00:06:30.080
So that's an option that we have now,
we can have super methods now.

100
00:06:31.790 --> 00:06:33.870
It turns out, we don't need super methods,

101
00:06:33.870 --> 00:06:38.330
super methods are one of the powerful
ideas in the classical model.

102
00:06:38.330 --> 00:06:41.120
And when I started in JavaScript,
one of the first things I did

103
00:06:41.120 --> 00:06:44.860
was figure out a way to write
super methods and never used it.

104
00:06:45.990 --> 00:06:50.615
You just think about things so differently
that the super model just doesn't come up.

105
00:06:50.615 --> 00:06:53.802
We have so
many other ways of composing functions,

106
00:06:53.802 --> 00:06:58.010
that particular one is like
the least interesting one possible.

107
00:06:58.010 --> 00:07:01.590
And so,
there's no prohibition from using supers,

108
00:07:01.590 --> 00:07:03.650
it just outgrows them really quickly.

109
00:07:04.950 --> 00:07:08.816
But if you feel a need for them,
this pattern gives us a way to do them.

110
00:07:12.804 --> 00:07:15.656
&gt;&gt; Douglas Crockford: So let's look at
a couple of tricks we can do with higher

111
00:07:15.656 --> 00:07:16.650
order functions.

112
00:07:18.170 --> 00:07:22.640
Memoizers are like cashes but
the mathematical so they're better,

113
00:07:22.640 --> 00:07:27.190
which allow you to remember previous
values that a function has computed.

114
00:07:27.190 --> 00:07:30.003
So if you're ever asked to
compute the same value again,

115
00:07:30.003 --> 00:07:31.300
you can simply look it up.

116
00:07:33.560 --> 00:07:35.967
&gt;&gt; Douglas Crockford: So
let's look at what our memoizer does.

117
00:07:35.967 --> 00:07:38.611
It first creates a function
called recur and

118
00:07:38.611 --> 00:07:42.480
then it returns that function result,
so that's pretty easy.

119
00:07:42.480 --> 00:07:45.246
So let's say we want to compute factorial,

120
00:07:45.246 --> 00:07:49.750
we'll pass to memoizer an array of
the first two values of factorials.

121
00:07:49.750 --> 00:07:54.964
So factorial of 0 is 1,
factorial of 1 is 1, and then we'll pass

122
00:07:54.964 --> 00:08:00.275
it in a formula which it can use for
computing all of the other values.

123
00:08:00.275 --> 00:08:05.126
And it will take a recurrence function
as well as the value that it needs to

124
00:08:05.126 --> 00:08:11.430
compute, the recurrence function allows it
to call itself, so it can do recursion.

125
00:08:11.430 --> 00:08:15.778
So, to find any factorial of n,

126
00:08:15.778 --> 00:08:21.580
you return n times the factorial of n- 1.

127
00:08:21.580 --> 00:08:24.559
So looking at what happens
when we call recurring there,

128
00:08:24.559 --> 00:08:28.283
we go up to that function, we look to
see if the result we're looking for

129
00:08:28.283 --> 00:08:30.510
is already in the memo array.

130
00:08:30.510 --> 00:08:33.480
If it is, we simply return it and
we're done.

131
00:08:33.480 --> 00:08:38.420
But if not, then we'll call a formula and
take its value and

132
00:08:38.420 --> 00:08:42.740
store it in the memo array for
next time, and return that as well.

133
00:08:44.030 --> 00:08:48.350
So, that really pays off
on things like Fibonacci,

134
00:08:48.350 --> 00:08:52.800
a recursive definition of Fibonacci
is explosively expensive.

135
00:08:52.800 --> 00:08:58.108
As n starts to get bigger,
it gets so slow, because you're

136
00:08:58.108 --> 00:09:03.418
constantly recursing on two
legs which multiply in four and

137
00:09:03.418 --> 00:09:08.639
gets really expensive, but
with memorizer it is linear.

138
00:09:08.639 --> 00:09:13.269
So even though this appears to be
more code maybe doing more work,

139
00:09:13.269 --> 00:09:16.420
it is avoiding massive amounts of work.

140
00:09:16.420 --> 00:09:22.320
So this is a huge optimisation over a
naive recursive implementation factorial.

141
00:09:22.320 --> 00:09:25.634
And it all happens by using
functions as arguments.

142
00:09:29.189 --> 00:09:31.016
&gt;&gt; Douglas Crockford: One
warning about functions,

143
00:09:31.016 --> 00:09:33.340
do not ever declare function in a loop.

144
00:09:34.350 --> 00:09:39.340
This is bad for two reasons,
the first one, is not that important but.

145
00:09:39.340 --> 00:09:43.296
You pay a cost in creating a function
each time you encounter in a loop, so,

146
00:09:43.296 --> 00:09:46.910
that's time and memory.

147
00:09:46.910 --> 00:09:52.776
Much more important is that the function
closes not over the current state

148
00:09:52.776 --> 00:09:59.413
of the loop, but over the whole function,
because that's how JavaScript works.

149
00:09:59.413 --> 00:10:01.010
Which can cause things to go wrong.

150
00:10:02.230 --> 00:10:08.420
For example, here we have a loop
that's going over an array of DIVs and

151
00:10:08.420 --> 00:10:12.090
it's actually adding an on click
handler to each of those elements.

152
00:10:13.360 --> 00:10:19.255
With the idea that, when we click on it,
it should alert the number of the element.

153
00:10:19.255 --> 00:10:24.331
And so if we pass an array of 4 DIVs,
we want to click 0,

154
00:10:24.331 --> 00:10:29.641
1, 2, 3, but
what you'll actually get is 4444.

155
00:10:29.641 --> 00:10:33.511
And the reason is, that function is
closing over the current value of i,

156
00:10:33.511 --> 00:10:36.970
not the value of i at the time
the function was created.

157
00:10:36.970 --> 00:10:42.150
So we're seeing i at the end of the loop,
at the end of the loop it's four.

158
00:10:42.150 --> 00:10:44.532
So the way you get around that is,

159
00:10:44.532 --> 00:10:48.800
you move the creation of that
function outside of the loop.

160
00:10:48.800 --> 00:10:52.994
And it turns out the solution to all most
all of life's problems is write another

161
00:10:52.994 --> 00:10:53.628
function.

162
00:10:53.628 --> 00:10:54.629
So in this case,

163
00:10:54.629 --> 00:10:59.210
we'll write a make handler function
which will return that event handler.

164
00:11:00.960 --> 00:11:06.004
And that moves that stuff out, provides
a mechanism which will create the closure,

165
00:11:06.004 --> 00:11:09.698
which will preserve the value of
that variable that we want and

166
00:11:09.698 --> 00:11:10.921
everything works.

167
00:11:15.027 --> 00:11:18.364
&gt;&gt; Douglas Crockford: I'm not gonna
discuss this except to mention this is one

168
00:11:18.364 --> 00:11:22.269
of the most strange and
amazing attributes of computer science,

169
00:11:22.269 --> 00:11:23.763
it's the y combinator.

170
00:11:23.763 --> 00:11:28.760
It is a lambda expression which makes it
possible to have a function recursively

171
00:11:28.760 --> 00:11:33.172
call itself without using recursion,
and without using variables.

172
00:11:34.920 --> 00:11:37.380
Absolutely no practical
benefit to this at all.

173
00:11:38.770 --> 00:11:41.370
Except it's something that's weird and
abstract, and

174
00:11:41.370 --> 00:11:43.680
is trivially expressed in JavaScript.

175
00:11:43.680 --> 00:11:47.733
The language is so
expressive that it can talk about lambdas

176
00:11:47.733 --> 00:11:52.041
to such an extent you can actually
do this stuff in JavaScript.

177
00:11:52.041 --> 00:11:56.450
JavaScript is an AI language,
it's amazing.

178
00:11:57.471 --> 00:12:00.513
&gt;&gt; Douglas Crockford: And so JavaScript
has good parts we all know, so if you

179
00:12:00.513 --> 00:12:05.447
wanna know more about this stuff, I highly
recommend a book called the Little Lisper,

180
00:12:05.447 --> 00:12:08.040
this is review of that book.

181
00:12:08.040 --> 00:12:11.270
It's this wonderful programmed learning
text which is all about recursive

182
00:12:11.270 --> 00:12:14.820
functions, and it's great.

183
00:12:14.820 --> 00:12:17.240
If you want to understand
more about recursion

184
00:12:17.240 --> 00:12:20.150
you definitely need to read this book.

185
00:12:20.150 --> 00:12:23.290
It's now in a later edition
called The Little Schemer,

186
00:12:23.290 --> 00:12:24.820
I think it's on its fourth edition now.

187
00:12:25.880 --> 00:12:29.780
It's on Amazon and everywhere,
I highly recommend it.

188
00:12:29.780 --> 00:12:34.730
So let's take a break, and
get out some paper and pencils,

189
00:12:34.730 --> 00:12:39.410
and we're gonna do some work next, yeah?

190
00:12:39.410 --> 00:12:43.989
&gt;&gt; Speaker 2: Is this the [INAUDIBLE]
example, where you're trying to loop

191
00:12:43.989 --> 00:12:49.486
assigning the variable hwre you pointed
out, where all the [INAUDIBLE].

192
00:12:49.486 --> 00:12:54.690
If you put in fact var equals
inside there simingly assigning

193
00:12:54.690 --> 00:12:59.486
to a global temp,
because a global temp is actually move

194
00:12:59.486 --> 00:13:04.402
around of the loop to it's
does that make sense?

195
00:13:04.402 --> 00:13:08.020
There's no scooping it wide, then it's
all gonna be seen local valiable.

196
00:13:08.020 --> 00:13:10.049
&gt;&gt; Douglas Crockford: It depends, yeah
t depends on which function you saying.

197
00:13:11.160 --> 00:13:15.260
So what we did was essentially
move that variable into

198
00:13:16.340 --> 00:13:19.420
where it's not gonna get
changed on each iterations.

199
00:13:19.420 --> 00:13:24.376
&gt;&gt; Speaker 2: Yeah, so where you've
got div_id =, that was var div_id =.

200
00:13:24.376 --> 00:13:31.366
That was up above [INAUDIBLE] higher
up in the for loop, way up, yeah.

201
00:13:31.366 --> 00:13:35.392
If you have var d id = right there.

202
00:13:35.392 --> 00:13:37.970
&gt;&gt; Douglas Crockford: No, that doesn't
help, cuz it's still in the same scope.

203
00:13:37.970 --> 00:13:40.516
&gt;&gt; Speaker 2: Cuz it's going
to move at the same scope, and

204
00:13:40.516 --> 00:13:41.934
not within the for loop.

205
00:13:41.934 --> 00:13:43.312
&gt;&gt; Douglas Crockford: Right,
yeah, function's this-

206
00:13:43.312 --> 00:13:44.670
&gt;&gt; Speaker 2: That's sorta subtle.

207
00:13:44.670 --> 00:13:49.645
&gt;&gt; Douglas Crockford: It is subtle, and so
I tried to find the simplest possible rule

208
00:13:49.645 --> 00:13:53.199
to give people to know,
watch out for that.

209
00:13:53.199 --> 00:13:56.858
So the simplest rule I could think of
was don't make functions in a loop.

210
00:13:59.570 --> 00:14:00.315
&gt;&gt; Douglas Crockford: Move it outside.

