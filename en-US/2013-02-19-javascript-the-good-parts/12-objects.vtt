WEBVTT

1
00:00:00.000 --> 00:00:04.730
[MUSIC]

2
00:00:04.730 --> 00:00:05.749
&gt;&gt; Douglas Crockford: So
because arrays and

3
00:00:05.749 --> 00:00:09.767
objects are actually made of the same
thing in this language, there's confusion,

4
00:00:09.767 --> 00:00:13.690
because, in some ways, they're
interchangeable, in others, they're not.

5
00:00:15.310 --> 00:00:20.370
So most of the time, you can use one for
the other, and get away with it.

6
00:00:20.370 --> 00:00:23.360
But eventually, it'll catch up with you.

7
00:00:23.360 --> 00:00:29.100
So I recommend, use objects when the names
of the properties are arbitrary strings,

8
00:00:29.100 --> 00:00:32.160
and use arrays when the names
are sequential integers.

9
00:00:32.160 --> 00:00:34.770
Don't be confused by
the term associative array.

10
00:00:34.770 --> 00:00:38.167
In JavaScript, the associative
array is object, not array.

11
00:00:40.720 --> 00:00:45.022
&gt;&gt; Douglas Crockford: JavaScript has
a Date function which was modeled after

12
00:00:45.022 --> 00:00:48.770
Java's Date class,
which was not Y2K ready.

13
00:00:50.680 --> 00:00:52.740
Java was published in 1995.

14
00:00:52.740 --> 00:00:55.810
I guess they didn't see
the millennium coming.

15
00:00:55.810 --> 00:00:58.170
Fortunately, we survived it.

16
00:00:58.170 --> 00:00:59.470
Hooray.

17
00:00:59.470 --> 00:01:03.634
We have regular expressions,
which are a pattern-matching mechanism.

18
00:01:05.620 --> 00:01:08.910
That is a regular expression that
matches regular expressions.

19
00:01:10.640 --> 00:01:11.820
At least I claim it is.

20
00:01:11.820 --> 00:01:13.200
I hate regular expressions.

21
00:01:13.200 --> 00:01:16.870
This notation is so
appallingly hard to read.

22
00:01:16.870 --> 00:01:18.629
And we use it for input validation.

23
00:01:19.800 --> 00:01:24.560
And how can you have any confidence that
it matches what we think it matches?

24
00:01:24.560 --> 00:01:26.250
Cuz it's such a horrible notation.

25
00:01:27.810 --> 00:01:30.500
There are other languages that have
pattern matching languages which

26
00:01:30.500 --> 00:01:34.030
are really quite elegant,
and expressive, and nice.

27
00:01:34.030 --> 00:01:35.460
We don't have one of those.

28
00:01:35.460 --> 00:01:37.770
We have the industry standard.

29
00:01:37.770 --> 00:01:40.150
This is another thing
that Ken Thompson did.

30
00:01:40.150 --> 00:01:42.160
Not Thompson's best idea.

31
00:01:42.160 --> 00:01:43.970
He had some other things
that were truly brilliant.

32
00:01:45.260 --> 00:01:48.680
Regular expressions work really well
if they're an inch or two long.

33
00:01:48.680 --> 00:01:51.990
If they get longer than that,
they're horrible.

34
00:01:51.990 --> 00:01:52.830
And I have to confess,

35
00:01:52.830 --> 00:01:56.800
I've written regular expressions
that are a couple of feet long.

36
00:01:56.800 --> 00:01:57.800
And I'm not proud of that.

37
00:02:00.450 --> 00:02:04.690
Yeah, so we have functions.

38
00:02:04.690 --> 00:02:05.680
Most of today,

39
00:02:05.680 --> 00:02:10.950
the rest of the day is gonna be about
functions, but we'll get to them later.

40
00:02:10.950 --> 00:02:15.150
So all the values we talked
about up until now are objects.

41
00:02:15.150 --> 00:02:18.420
There are only two values in
JavaScript that are not objects, and

42
00:02:18.420 --> 00:02:19.919
they are null and undefined.

43
00:02:21.210 --> 00:02:25.920
Null is the value that isn't anything,
so if you want put something in

44
00:02:25.920 --> 00:02:28.820
a variable just indicating that there
is nothing there, you can say null.

45
00:02:29.960 --> 00:02:33.170
And then undefined is the value
that isn't even that.

46
00:02:33.170 --> 00:02:36.880
Undefined is the value for
variables and parameters.

47
00:02:36.880 --> 00:02:40.195
If you declare a variable,
but don't initialize it,

48
00:02:40.195 --> 00:02:43.130
its default value will be undefined.

49
00:02:43.130 --> 00:02:45.818
Which is a little confusing,
because you define it, but

50
00:02:45.818 --> 00:02:48.110
it's undefined at the same time.

51
00:02:48.110 --> 00:02:52.640
Undefined wasn't the best name for this.

52
00:02:52.640 --> 00:02:55.530
If you ask for
a property from an object, and

53
00:02:55.530 --> 00:03:00.049
the object doesn't have one and does not
inherit one, then it returns undefined.

54
00:03:02.410 --> 00:03:06.985
One thing that's confusing is that
you can store undefined in an object.

55
00:03:06.985 --> 00:03:11.320
So if you retrieve the value undefined
from an object, you don't know if it meant

56
00:03:11.320 --> 00:03:16.700
that property was missing, or if it meant
that property had the value of undefined.

57
00:03:16.700 --> 00:03:19.341
So for that reason, I recommend,

58
00:03:19.341 --> 00:03:24.420
don't store undefined into things,
because it's confusing.

59
00:03:24.420 --> 00:03:28.200
I think it should have caused the element
to be deleted, but it doesn't do that.

60
00:03:30.020 --> 00:03:33.740
JavaScript has a typeof operator,
which allows you to take a value and

61
00:03:33.740 --> 00:03:37.400
determine what type it is, and returns
the string with the name of the type.

62
00:03:37.400 --> 00:03:41.730
So if you ask, is this an object, it
returns object, and so on, which is good.

63
00:03:41.730 --> 00:03:46.870
If you pass an array, it returns object,
which is maybe technically right,

64
00:03:46.870 --> 00:03:50.880
because everything is an object,
but it's not helpful.

65
00:03:50.880 --> 00:03:55.360
It doesn't tell you that this is an array,
which has different properties.

66
00:03:55.360 --> 00:03:57.034
But the worst one is null.

67
00:03:57.034 --> 00:04:00.590
The typeof null is object,
which is just wrong.

68
00:04:00.590 --> 00:04:03.323
And the way that happened was,

69
00:04:03.323 --> 00:04:08.330
Brendan used typed pointers
in his first implementation.

70
00:04:08.330 --> 00:04:15.640
So, the first few bits of a pointer would
indicate what the thing was pointing to.

71
00:04:15.640 --> 00:04:20.590
And he used zero in that bit pattern
to represent object, zero for object.

72
00:04:21.950 --> 00:04:26.810
But he also used zero, all zero as null,

73
00:04:26.810 --> 00:04:30.920
because he does that, for good or bad.

74
00:04:30.920 --> 00:04:34.480
And he didn't notice that that
zero conflicted with that one, and

75
00:04:34.480 --> 00:04:39.274
so typeof was producing the wrong result,
but Microsoft did.

76
00:04:39.274 --> 00:04:44.030
So when they reverse engineering to create
JScript, they said, okay, that's it, and

77
00:04:44.030 --> 00:04:48.150
when they had a chance to fix it at ECMA,
they said no damn it, cuz that

78
00:04:48.150 --> 00:04:52.946
would break programs, Microsoft is opposed
to ever breaking programs, yeah, right.

79
00:04:52.946 --> 00:04:56.530
[LAUGH] You sound like
a Microsoft developer.

80
00:04:56.530 --> 00:04:58.200
Yeah, so it's wrong.

81
00:04:59.400 --> 00:05:02.770
So it turns out it's not hard to test for
null.

82
00:05:02.770 --> 00:05:05.310
You can just say,
if null triple equal null.

83
00:05:05.310 --> 00:05:06.400
That does a null check.

84
00:05:06.400 --> 00:05:11.170
But typing for object is surprisingly
hard, because you get this false positive.

85
00:05:14.070 --> 00:05:21.340
ES5 added Array.isArray, so we can now
reliably tell if something's an array.

86
00:05:21.340 --> 00:05:22.390
That's good.

87
00:05:22.390 --> 00:05:27.560
And it turned out we also discovered
a polyfill, so that we can get definition

88
00:05:27.560 --> 00:05:33.430
of that on ES6, and everything before ES9.

89
00:05:33.430 --> 00:05:36.870
JavaScript has values that
are called the falsy values.

90
00:05:36.870 --> 00:05:42.420
These are false null, undefined, the empty
string, the number zero, and NaN.

91
00:05:42.420 --> 00:05:45.490
Any of these values in the condition
part of an if statement

92
00:05:45.490 --> 00:05:48.060
will cause you to take the false branch.

93
00:05:48.060 --> 00:05:52.020
Any other value is considered truthy,
and would take the true branch.

94
00:05:54.560 --> 00:05:59.110
So an empty object,
an empty array is truthy,

95
00:05:59.110 --> 00:06:03.900
the string zero is truthy,
the string false is truthy.

96
00:06:03.900 --> 00:06:08.106
The only falsy values are false,
null, undefined,

97
00:06:08.106 --> 00:06:11.200
empty string, zero, and NaN, okay.

98
00:06:12.540 --> 00:06:15.180
JavaScript is a loosely typed language,

99
00:06:15.180 --> 00:06:19.730
meaning that you can take any value of
any type and stick it in any variable,

100
00:06:19.730 --> 00:06:24.580
or pass it in any position, or
put it anywhere in any object.

101
00:06:24.580 --> 00:06:26.188
The language is not untyped.

102
00:06:26.188 --> 00:06:28.730
As you've seen,
we have a lot of types in this language.

103
00:06:29.900 --> 00:06:32.870
But it's just very loose
in how you can use them.

104
00:06:35.640 --> 00:06:38.060
Objects in this language
are passed by reference.

105
00:06:40.890 --> 00:06:42.016
Objects are never copied.

106
00:06:42.016 --> 00:06:49.398
And the triple equal operator compares two
values to ask, are they the same object.

107
00:06:49.398 --> 00:06:53.160
It doesn't ask, are they the same,
are they similar values.

108
00:06:55.654 --> 00:07:00.429
&gt;&gt; Douglas Crockford: So,
A triple equal B is only true if

109
00:07:00.429 --> 00:07:05.710
both values point to the same object.

