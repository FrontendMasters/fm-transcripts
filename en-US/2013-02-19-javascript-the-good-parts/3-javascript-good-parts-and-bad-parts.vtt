WEBVTT

1
00:00:00.000 --> 00:00:04.739
[MUSIC]

2
00:00:04.739 --> 00:00:08.196
&gt;&gt; Douglas Crockford: I wrote a programme
called JSLint, JSLint is a code quality

3
00:00:08.196 --> 00:00:12.828
tool for JavaScript, it's written in
JavaScript, it reads my programmes and

4
00:00:12.828 --> 00:00:16.767
it tells me when I'm doing things
which are using the bad parts, and

5
00:00:16.767 --> 00:00:19.910
the bad parts are more likely to increase.

6
00:00:19.910 --> 00:00:25.560
Which result in errors and bugs and
I don't want that, so I'm glad to

7
00:00:25.560 --> 00:00:30.610
have JSLint watching after me.

8
00:00:30.610 --> 00:00:31.370
And it's free and

9
00:00:31.370 --> 00:00:36.520
you should all be using it, and
I'll be showing you why as we go on.

10
00:00:36.520 --> 00:00:39.494
But it comes with a warning,
JSLint will hurt your feelings.

11
00:00:39.494 --> 00:00:42.166
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: And

12
00:00:42.166 --> 00:00:46.054
I know this is true because I get
messages from people all the time

13
00:00:46.054 --> 00:00:49.589
constantly saying [SOUND]
JSLint didn't like my program.

14
00:00:49.589 --> 00:00:51.370
Can you change it to not?

15
00:00:52.740 --> 00:00:56.190
And after a few years of
this I started to wonder if,

16
00:00:56.190 --> 00:00:58.980
wait a minute,
there's no crying in programming, right?

17
00:00:58.980 --> 00:01:04.650
[LAUGH] We imagine ourselves as the most
rational people on Earth, right?

18
00:01:04.650 --> 00:01:08.280
Because we are the ambassadors
to the computers.

19
00:01:08.280 --> 00:01:12.050
And the computers will not tolerate
anything less than perfection.

20
00:01:12.050 --> 00:01:17.150
And so we imagine that we must have these
incredible intellectual skills in order

21
00:01:17.150 --> 00:01:18.300
to allow us to do that.

22
00:01:18.300 --> 00:01:20.930
So there's no emotion there, right?

23
00:01:20.930 --> 00:01:24.630
But we get incredibly
emotional about this stuff.

24
00:01:24.630 --> 00:01:30.310
We are ruled by system one, by our guts,
to a much larger extent than we know.

25
00:01:30.310 --> 00:01:32.400
And that's why there's the crying.

26
00:01:33.600 --> 00:01:37.710
And so, I spend a lot of time wondering,
you know, why are they crying?

27
00:01:37.710 --> 00:01:39.490
Because this is a code quality tool.

28
00:01:39.490 --> 00:01:42.140
You have to intentionally
put your code in it.

29
00:01:42.140 --> 00:01:44.920
Expecting it to give you advice
on how to make your code better.

30
00:01:44.920 --> 00:01:49.100
And when it gives you that specific
advice to go, wow I don't wanna hear it.

31
00:01:49.100 --> 00:01:51.296
So what is this?

32
00:01:51.296 --> 00:01:56.180
So, you know this,
emotional aspect of programming,

33
00:01:56.180 --> 00:01:58.690
can waste enormous amounts of time.

34
00:01:58.690 --> 00:02:01.923
You know like you can get a couple of
programmers arguing about should you

35
00:02:01.923 --> 00:02:04.099
put your curly braces on the left or
on the right.

36
00:02:05.340 --> 00:02:08.920
So, and you can go on for hours about it.

37
00:02:08.920 --> 00:02:14.510
Making up stupid arguments that
make no sense because it turns out,

38
00:02:14.510 --> 00:02:16.990
there is not a good reason to
do it one way or the other.

39
00:02:16.990 --> 00:02:18.510
It's a completely arbitrary thing.

40
00:02:18.510 --> 00:02:19.450
It sort of like driving.

41
00:02:20.590 --> 00:02:23.780
There's not a good reason for why we
should drive on the left or on the right.

42
00:02:23.780 --> 00:02:25.950
A couple weeks ago I was in Australia.

43
00:02:25.950 --> 00:02:28.270
They drive on the left there.

44
00:02:28.270 --> 00:02:29.040
Works just fine,

45
00:02:29.040 --> 00:02:31.680
there is no evidence that their
accidents rate are greater than ours.

46
00:02:31.680 --> 00:02:36.190
It doesn't appear to be any easier or
harder to be on one side or the other.

47
00:02:36.190 --> 00:02:40.108
But there is really a good reason or
us all being on the same side.

48
00:02:40.108 --> 00:02:45.040
[LAUGH] So just pick a side, once you
pick a side, we should all do that.

49
00:02:45.040 --> 00:02:48.990
So the origin of this is, Ken Thompson.

50
00:02:48.990 --> 00:02:51.400
Who designed the b language,
he also designed Unix.

51
00:02:51.400 --> 00:02:54.580
And UTFAID and some of the best
stuff anybody have ever thought of.

52
00:02:55.860 --> 00:03:00.770
And b language influenced C and
every language seems that.

53
00:03:02.110 --> 00:03:06.490
So B was based on another language
called BCPL which was was

54
00:03:06.490 --> 00:03:08.110
one of the first curly brace languages.

55
00:03:09.310 --> 00:03:13.060
And when Thomson was designing it,
he decided to put the curly braced

56
00:03:13.060 --> 00:03:18.100
on the right,
because it just made sense to him.

57
00:03:18.100 --> 00:03:21.790
Dennis Ritchie, when he designed B or
C, did the same thing.

58
00:03:21.790 --> 00:03:24.915
But there were guys in their
lab at Bell Labs, that said no,

59
00:03:24.915 --> 00:03:26.830
we want to put them on the left.

60
00:03:26.830 --> 00:03:28.510
I'm sure they had a meeting.

61
00:03:28.510 --> 00:03:34.760
And, after a while Thompson Ritchie said,
We don't care.

62
00:03:34.760 --> 00:03:37.610
This is a stupid argument,
we're not gonna wasting more time on it.

63
00:03:37.610 --> 00:03:39.060
Do what you want, leave us alone,

64
00:03:39.060 --> 00:03:41.693
we're gonna keep putting
them on the right but yeah.

65
00:03:41.693 --> 00:03:47.920
Now Thompson said,
he could have told the compiler.

66
00:03:47.920 --> 00:03:51.250
They're on the right and if they throw
in the left, that's a syntax error.

67
00:03:51.250 --> 00:03:55.964
He could have done that and if he had,
who knows how many man centuries of time

68
00:03:55.964 --> 00:03:56.770
&gt;&gt; Speaker 2: [LAUGH]

69
00:03:56.770 --> 00:03:57.570
&gt;&gt; Douglas Crockford: We could have saved?

70
00:03:59.780 --> 00:04:00.540
But he didn't.

71
00:04:00.540 --> 00:04:02.890
And so, the problem is still there.

72
00:04:02.890 --> 00:04:07.060
And, you have to choose a side because

73
00:04:07.060 --> 00:04:11.350
you can't do it both ways on the same
program cuz that just looks stupid.

74
00:04:11.350 --> 00:04:15.030
We're trying hard not to
intentionally look stupid, right?

75
00:04:15.030 --> 00:04:18.440
Whole thing is about making
stuff that looks smart.

76
00:04:18.440 --> 00:04:22.520
So if you have somebody who's used
to putting them on the left and

77
00:04:22.520 --> 00:04:25.710
he goes to work for a shop where they
put them on the right, they say,

78
00:04:25.710 --> 00:04:29.545
okay, from now on you can
put them on the right.

79
00:04:29.545 --> 00:04:30.725
And he's gonna start to cry.

80
00:04:30.725 --> 00:04:33.405
And he goes, no,
I don't wanna put them on the right.

81
00:04:33.405 --> 00:04:36.435
Then he'll start coming up with all
these reasons for why it's important.

82
00:04:36.435 --> 00:04:39.885
And he's crying and he's emotional,
so that there must be truth here.

83
00:04:39.885 --> 00:04:44.100
You wouldn't get this upset
if there weren't deep truth.

84
00:04:44.100 --> 00:04:47.770
And there is no truth because
there's not a good reason, so

85
00:04:47.770 --> 00:04:53.060
he's got system 2 trying to synthesize
why is system 1 so emotionally connected

86
00:04:53.060 --> 00:04:58.480
to these curly braces and it doesn't
make any sense, except in JavaScript.

87
00:04:58.480 --> 00:05:01.120
It turns out in JavaScript you should
always put them on the right and

88
00:05:01.120 --> 00:05:01.870
never put them on the left.

89
00:05:01.870 --> 00:05:04.170
Left, and this is why.

90
00:05:06.060 --> 00:05:11.640
We have a return statement that's
returning the result of an object literal.

91
00:05:11.640 --> 00:05:13.330
This is one of the good
parts of JavaScript,

92
00:05:13.330 --> 00:05:18.100
being able to create new objects
out of nothing is fantastic.

93
00:05:20.090 --> 00:05:24.297
And if you put the curly brace on the
right, this will do exactly right thing,

94
00:05:24.297 --> 00:05:26.327
you know, just does what it should.

95
00:05:26.327 --> 00:05:31.020
If you put him on the left,
it does the worst possible thing.

96
00:05:32.530 --> 00:05:38.930
That one will return undefined,
it will not return an object.

97
00:05:38.930 --> 00:05:41.860
And that crap thatÂ´s after it,

98
00:05:41.860 --> 00:05:45.720
which should generate some sort of
syntax error or warning, does not.

99
00:05:47.440 --> 00:05:49.310
So, it's a silent error.

100
00:05:49.310 --> 00:05:53.926
No compile time warning, no run time
warning, it just does the wrong thing.

101
00:05:53.926 --> 00:05:58.357
And you may not recognize that it went
bad at this point, right, there might be

102
00:05:58.357 --> 00:06:02.589
sometime in the future down stream from
this when the era actually occurs,

103
00:06:02.589 --> 00:06:07.152
when you try to go to an object and it's
not there, you know that's gonna be bad,

104
00:06:07.152 --> 00:06:09.434
so you happen to be around to debug this,

105
00:06:09.434 --> 00:06:13.330
you gonna be looking in that
goal where did my object go?

106
00:06:13.330 --> 00:06:14.786
That's gonna be perplexing, and

107
00:06:14.786 --> 00:06:17.610
eventually you might track
it back to the statement and

108
00:06:17.610 --> 00:06:20.770
you can stare at that for a couple hours,
I don't see anything wrong with that.

109
00:06:21.900 --> 00:06:22.900
But there is,

110
00:06:22.900 --> 00:06:27.109
because one of the bad parts of Java
script is automatic semicolon insertion.

111
00:06:28.260 --> 00:06:32.373
Which was a well intended but
incompetently specked feature,

112
00:06:32.373 --> 00:06:37.418
which was supposed to make the language
easier for beginners by allowing it to

113
00:06:37.418 --> 00:06:42.463
leave the semicolons out and it would put
them in for you, and one of the ways it

114
00:06:42.463 --> 00:06:47.427
would do that it would be, it would look
for a syntax error and if it sees one,

115
00:06:47.427 --> 00:06:51.960
it would turn a nearby lying feed
into a semicolon and then try again.

116
00:06:53.480 --> 00:06:55.336
That would freak you out right?

117
00:06:55.336 --> 00:06:57.890
But that's [LAUGH] no, so

118
00:06:57.890 --> 00:07:02.790
that's a consequent it sometimes doesn't
put semicolons where it should and

119
00:07:02.790 --> 00:07:05.380
in this case it would put
semicolons where it shouldn't.

120
00:07:05.380 --> 00:07:07.870
So we put a semicolon right there.

121
00:07:07.870 --> 00:07:12.450
Which causes that statement
to be the ordinary return and

122
00:07:12.450 --> 00:07:15.270
ordinary return returns undefined.

123
00:07:15.270 --> 00:07:17.780
That's bad.
Now if you put your curly brace on

124
00:07:17.780 --> 00:07:23.680
the right, you will never experience that,
it will always just work.

125
00:07:23.680 --> 00:07:25.349
And if you put your
curly brace on the left.

126
00:07:27.050 --> 00:07:32.060
This hell is waiting for you.

127
00:07:32.060 --> 00:07:34.600
Once I had someone come up to
me afterward and say, wow,

128
00:07:34.600 --> 00:07:37.190
I didn't know that about the semicolon
insertion, so from now on,

129
00:07:37.190 --> 00:07:40.280
whenever I write a return statement,
I'm gonna put it on the right, but

130
00:07:40.280 --> 00:07:41.659
all the rest of the time,
I'm gonna put it on the left.

131
00:07:43.270 --> 00:07:46.290
No that's not how you should
be thinking about this.

132
00:07:47.360 --> 00:07:51.500
That you want to prefer forms
that are error resistant.

133
00:07:51.500 --> 00:07:54.560
Cuz we are trying to get our
error rate down to zero.

134
00:07:54.560 --> 00:07:57.490
We are striving for perfection.

135
00:07:57.490 --> 00:08:01.530
And, so you look it as a trade off.

136
00:08:01.530 --> 00:08:04.679
What's the relative cost of putting
the curly brace on the left or the right?

137
00:08:06.380 --> 00:08:07.630
No cost.

138
00:08:07.630 --> 00:08:08.230
Right?

139
00:08:08.230 --> 00:08:08.810
No cost.

140
00:08:08.810 --> 00:08:12.290
So, if you put it on the right,
no cost benefit.

141
00:08:12.290 --> 00:08:14.500
This is an error you
will never have to fix.

142
00:08:16.440 --> 00:08:17.770
That's a good trade off.

143
00:08:17.770 --> 00:08:20.670
For free,
I can avoid a whole class of errors.

144
00:08:20.670 --> 00:08:21.600
That's good.

145
00:08:21.600 --> 00:08:25.520
Anytime I can avoid making errors, that's
gonna make it a little bit easier for

146
00:08:25.520 --> 00:08:29.390
me to start becoming a little bit more
perfect and that's what we are going for.

147
00:08:30.940 --> 00:08:35.150
So, another thing that Thompson
invented was the switch statement.

148
00:08:35.150 --> 00:08:40.300
And unfortunately it was modeled after
the Fortran computer go to statement.

149
00:08:40.300 --> 00:08:44.950
We've since learned that go
to is considered harmful.

150
00:08:44.950 --> 00:08:46.470
And it is.

151
00:08:46.470 --> 00:08:49.790
But it still exists in this weird
form in the switch statement.

152
00:08:51.150 --> 00:08:55.830
And that is that you can have one case
which will fall through to the next case

153
00:08:55.830 --> 00:08:59.640
unless you explicitly disrupt it by
breaking or returning or throwing.

154
00:09:01.440 --> 00:09:06.199
So one day, someone wrote to me and said,
you should have warn about this fall

155
00:09:06.199 --> 00:09:10.170
through thing, cuz that's a subtle
error and it could be hard to find.

156
00:09:10.170 --> 00:09:13.140
And I thought deeply about it.

157
00:09:13.140 --> 00:09:19.030
And I wrote back to them and I said,
well, I can see that could happen,

158
00:09:19.030 --> 00:09:23.520
but there's this elegance that
can happen if you can get all of

159
00:09:23.520 --> 00:09:28.760
the cases to cascade into each other,
and it really is beautiful.

160
00:09:30.060 --> 00:09:35.800
And you know the error can happen,
I can see that,

161
00:09:35.800 --> 00:09:41.340
but it hardly ever happens, and you trade
that off against the elegance here.

162
00:09:41.340 --> 00:09:45.847
So I think I'm not gonna warn on that,
I really like that you fall through,

163
00:09:45.847 --> 00:09:47.720
I think Thompson got it right.

164
00:09:49.590 --> 00:09:51.185
&gt;&gt; Douglas Crockford: Next day,
the same guy wrote to me and

165
00:09:51.185 --> 00:09:52.430
said I found a bug in JSLint.

166
00:09:52.430 --> 00:09:54.500
I said, good, okay, so
I throw it in the debugger,

167
00:09:54.500 --> 00:09:57.770
you know where this is going, right?

168
00:09:57.770 --> 00:10:00.740
Turned out, I had to switch
a case that was falling through.

169
00:10:01.910 --> 00:10:05.545
And in that moment,
I achieved enlightenment.

170
00:10:05.545 --> 00:10:08.950
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: Cuz we imagined

171
00:10:08.950 --> 00:10:12.080
that we spend all our days power typing,
right.

172
00:10:12.080 --> 00:10:15.739
I'm typing my program,
and that's not what we do.

173
00:10:15.739 --> 00:10:19.330
That's not what most of the time goes.

174
00:10:19.330 --> 00:10:24.370
We spend most of our time making
mistakes and correcting them.

175
00:10:24.370 --> 00:10:29.890
And going down into the abyss And
into that cold,

176
00:10:29.890 --> 00:10:33.220
dark place and finding what went wrong and
coming back and doing that.

177
00:10:33.220 --> 00:10:37.610
And then we forget about it, so at the end
of day, well, what did you do today?

178
00:10:37.610 --> 00:10:42.180
I was power typing, and
we think that's what we're doing.

179
00:10:42.180 --> 00:10:44.630
And we're not, we're making mistakes.

180
00:10:44.630 --> 00:10:50.590
And because, we have this feeling of
euphoria that once we find something,

181
00:10:50.590 --> 00:10:53.190
poof I found it, it feels so good.

182
00:10:53.190 --> 00:10:56.320
We black out that other stuff.

183
00:10:56.320 --> 00:10:59.710
We completely forget about how much
time we spent in the debugger.

184
00:11:00.970 --> 00:11:05.352
And as a result, we tend to not
learn from our mistakes, you know so

185
00:11:05.352 --> 00:11:08.485
you know how many times
have you gone through and

186
00:11:08.485 --> 00:11:11.719
spend an hour debugging and
go [SOUND] that again.

187
00:11:11.719 --> 00:11:16.380
We do that all the time, but on this
occasion there is no way I could avoid

188
00:11:16.380 --> 00:11:19.180
running from that mistake
because it was so

189
00:11:19.180 --> 00:11:25.010
humiliating after I'd just given the
speech about why this was a good feature.

190
00:11:25.010 --> 00:11:28.330
And then boom, got nailed by it.

191
00:11:28.330 --> 00:11:30.630
I had to learn from it.

192
00:11:30.630 --> 00:11:38.570
Generally, apparently I tried not to but
on this time, I couldn't avoid it.

193
00:11:38.570 --> 00:11:42.860
There it was,
it actually was making my program bug.

194
00:11:44.160 --> 00:11:48.150
So the thing I realized from that was,
If I never

195
00:11:49.260 --> 00:11:56.050
intentionally fall through, I can find the
cases where I accidentally fall through.

196
00:11:56.050 --> 00:11:59.440
And so it becomes easier
to analyze my programs and

197
00:11:59.440 --> 00:12:02.260
discover where the defects are.

198
00:12:02.260 --> 00:12:06.450
And the benefit I saw from the cascading,
that was an illusion, that was wrong.

199
00:12:06.450 --> 00:12:12.920
It turns out that actually has
a negative benefit because you're

200
00:12:12.920 --> 00:12:18.390
artificially constructing a code in such a
way as to cause that cascading to happen.

201
00:12:19.680 --> 00:12:24.650
Which can add cruft to your code which can
make it more difficult to maintain and

202
00:12:24.650 --> 00:12:28.690
could possibly even introduce bugs
in the process of trying to force.

203
00:12:28.690 --> 00:12:30.400
A code into that kinda pattern.

204
00:12:30.400 --> 00:12:31.950
That turned out to have a negative value.

205
00:12:31.950 --> 00:12:33.880
I imagine it had a positive value.

