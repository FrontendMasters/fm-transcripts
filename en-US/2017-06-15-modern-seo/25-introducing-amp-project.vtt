WEBVTT

1
00:00:00.110 --> 00:00:04.450
Let's move on to the very last topic
we're going to cover today, and

2
00:00:04.450 --> 00:00:10.790
that is AMP pages, or
accelerated mobile pages.

3
00:00:10.790 --> 00:00:15.680
So, if you've ever seen search results
that look like this, and the key to

4
00:00:15.680 --> 00:00:20.800
look for is that little lightning bolt and
a circle with AMP next to it.

5
00:00:20.800 --> 00:00:25.814
This is an attempt to
particularly on mobile devices,

6
00:00:25.814 --> 00:00:32.360
present users with a really fast
loading experience into these links.

7
00:00:32.360 --> 00:00:38.070
Right, ridiculously fast,
nearly instant, mind blowing.

8
00:00:38.070 --> 00:00:43.650
So, in order to make this work, we have
to play by some pretty strict rules.

9
00:00:45.310 --> 00:00:49.580
And the first one is the hardest,
to play what, to play by.

10
00:00:49.580 --> 00:00:54.670
We don't get to put our own JavaScript
on the critical path to rendering.

11
00:00:54.670 --> 00:00:59.011
So this means you're not
gonna be using any component

12
00:00:59.011 --> 00:01:01.624
library to build your AMP HTML.

13
00:01:01.624 --> 00:01:08.410
You you can create iframes that have
JavaScript running inside of those.

14
00:01:08.410 --> 00:01:13.420
But an iframe is not on the critical
path to rendering that outer page.

15
00:01:13.420 --> 00:01:15.530
Right, so
that is the only way that we can do that.

16
00:01:15.530 --> 00:01:19.580
We do get the ability to use
some rich components that

17
00:01:19.580 --> 00:01:23.180
are centrally maintained
in the AMP project.

18
00:01:23.180 --> 00:01:28.076
Which is a collective effort that
is led by Google and Facebook and

19
00:01:28.076 --> 00:01:30.220
a bunch of other companies.

20
00:01:32.410 --> 00:01:37.251
But we can't, there is no react and
there is no Ember and

21
00:01:37.251 --> 00:01:40.144
there is no Angular in an AMP app.

22
00:01:40.144 --> 00:01:44.560
So, all AMP JavaScript,
which is sort of the whitelisted stuff.

23
00:01:44.560 --> 00:01:48.787
The stuff we're allowed to use that
is part of the AMP project that is

24
00:01:48.787 --> 00:01:50.940
executed asynchronously.

25
00:01:50.940 --> 00:01:56.690
What that means is we add the a sync
option to our script tags.

26
00:01:56.690 --> 00:02:03.100
So that, whenever it downloads we
will run it potentially later.

27
00:02:03.100 --> 00:02:06.660
And it'll do what it does,
when it does finally load.

28
00:02:07.772 --> 00:02:11.630
We wanna make sure that we can size
all of our resources in advance.

29
00:02:11.630 --> 00:02:13.640
Similar to what we had
to do with Facebook,

30
00:02:14.900 --> 00:02:18.240
before we even start trying
to draw a Facebook tile,

31
00:02:18.240 --> 00:02:21.900
we already knew what the dimensions
of our image are going to be.

32
00:02:21.900 --> 00:02:22.870
Same goes with AMP.

33
00:02:22.870 --> 00:02:27.407
So we can't use a regular image tag, we
have to use the AMP image component which

34
00:02:27.407 --> 00:02:29.880
looks a little bit like an image tag.

35
00:02:29.880 --> 00:02:35.560
But the key is, size is mandatory, width
and height are mandatory on this thing.

36
00:02:35.560 --> 00:02:38.909
And the understanding here that I have is,

37
00:02:38.909 --> 00:02:44.780
we can compute the layout of the screen
for a variety of viewports, right?

38
00:02:44.780 --> 00:02:49.362
Variety of viewport sizes,
we can lay everything out in advance, and

39
00:02:49.362 --> 00:02:52.559
really rely on that
calculation being correct.

40
00:02:52.559 --> 00:02:54.758
So there will be no reflows, and

41
00:02:54.758 --> 00:02:59.979
no shuffling around that might make
the layout engine have to work too hard.

42
00:03:01.860 --> 00:03:03.596
We don't let anything block rendering.

43
00:03:03.596 --> 00:03:07.250
So this a sync JavaScript
makes it not block rendering

44
00:03:07.250 --> 00:03:11.600
the ability to not include an external
stylesheet, which is the next thing here.

45
00:03:11.600 --> 00:03:13.990
That makes it so we can't block rendering.

46
00:03:13.990 --> 00:03:19.540
We can have inline styles up to a limit
of 50 kilobytes, which is a lot of style.

47
00:03:19.540 --> 00:03:22.962
But it probably means that we're not
going to have one stylesheet for

48
00:03:22.962 --> 00:03:24.261
our entire application.

49
00:03:24.261 --> 00:03:28.411
And it means you're probably not going
to be using Twitter Bootstrap and

50
00:03:28.411 --> 00:03:30.628
material design for your AMP pages.

51
00:03:30.628 --> 00:03:35.050
You're gonna be building things that are a
little bit more minimal with the goal of

52
00:03:35.050 --> 00:03:36.856
making them as fast as possible.

53
00:03:36.856 --> 00:03:42.233
A part of making sure that
everything is either expressed

54
00:03:42.233 --> 00:03:47.570
directly in the HTML or
taken off the critical path.

55
00:03:47.570 --> 00:03:52.020
Is that, there's a focus on making sure
the heaviest thing about these AMP pages

56
00:03:52.020 --> 00:03:55.303
gets to start downloading right away and
that is web fonts.

57
00:03:55.303 --> 00:03:57.148
So typically what would happen is,

58
00:03:57.148 --> 00:03:59.860
you'd have a reference to
an external stylesheet.

59
00:03:59.860 --> 00:04:06.008
You download that, parse it, start
evaluating all of the statements in it,

60
00:04:06.008 --> 00:04:10.270
you'd encounter an at
font face declaration.

61
00:04:10.270 --> 00:04:13.590
And now you're gonna go and
start making a second request out and

62
00:04:13.590 --> 00:04:19.690
begin downloading these up to 400 kilobyte
font that you're using for this thing.

63
00:04:19.690 --> 00:04:23.040
So the fact that
the stylesheet is in line,

64
00:04:23.040 --> 00:04:27.790
means we don't have the first
HTTP request to make.

65
00:04:27.790 --> 00:04:32.660
And the fact that the JavaScript is
a sync means nothing else blocks,

66
00:04:32.660 --> 00:04:34.630
the web font download from happening.

67
00:04:34.630 --> 00:04:37.990
It is basically one of the first priority
things to happen to get that started.

68
00:04:39.870 --> 00:04:45.640
So broadly there's a focus on prefetching
resources as early as you can,

69
00:04:45.640 --> 00:04:50.630
and then evaluating them as
late as possible in the game.

70
00:04:50.630 --> 00:04:53.380
So that means that
images are not rendered,

71
00:04:53.380 --> 00:04:58.250
until they're actually about to be
scrolled into the viewport themselves.

72
00:04:58.250 --> 00:05:01.967
But you may find that we
pre-cache the image as

73
00:05:01.967 --> 00:05:05.600
you start to approach
that scroll position.

74
00:05:05.600 --> 00:05:13.019
There's a new standard called preconnect
for trying to download content in advance.

75
00:05:13.019 --> 00:05:15.692
And this basically means that,

76
00:05:15.692 --> 00:05:19.850
your browser can start
the initial groundwork for

77
00:05:19.850 --> 00:05:26.320
making a request before you actually
say that you wanna make the request.

78
00:05:26.320 --> 00:05:30.391
And this might just be limited to getting
DNS resolution out of the way and

79
00:05:30.391 --> 00:05:33.410
finding the IP address that
you actually have to hit.

80
00:05:33.410 --> 00:05:38.351
It might be like starting to actually
download the smallest pieces of

81
00:05:38.351 --> 00:05:45.080
a particular file, or at least getting a
list of resources that you have to fetch.

82
00:05:45.080 --> 00:05:50.541
But it's sort of a broad term for getting
a head start before the click happens.

83
00:05:50.541 --> 00:05:53.764
So in terms of getting started
with our first AMP app, and

84
00:05:53.764 --> 00:05:56.530
this is the last activity
we're gonna do today.

85
00:05:56.530 --> 00:06:02.083
And one that might be a little more
challenging than what we've done today,

86
00:06:02.083 --> 00:06:08.090
although not terribly challenging, is you
begin by bringing in the AMP runtime.

87
00:06:08.090 --> 00:06:12.822
And so, this is something that
is hosted on the AMP project's

88
00:06:12.822 --> 00:06:15.920
CDN as part of this link itself exactly.

89
00:06:17.810 --> 00:06:22.699
Its job is to basically
control the downloading and

90
00:06:22.699 --> 00:06:29.418
controlling the resource, download,
and presentation pipeline.

91
00:06:29.418 --> 00:06:33.992
So that they can make sure that rather
than falling back to typical request

92
00:06:33.992 --> 00:06:38.740
priority, where first you get the HTML and
then the JavaScript and the CSS.

93
00:06:38.740 --> 00:06:41.270
And then finally,
images are coming in after that, and

94
00:06:41.270 --> 00:06:43.600
web fonts are very low priority.

95
00:06:43.600 --> 00:06:47.849
It gets to make some more dynamic
decisions about what's going on.

96
00:06:48.870 --> 00:06:52.300
You also have to add this
amp-boilerplate style block,

97
00:06:52.300 --> 00:06:57.640
which I believe is already in
the the starter project that I gave you.

98
00:06:57.640 --> 00:07:00.240
It has to be exactly this style block.

99
00:07:00.240 --> 00:07:06.480
It involves putting in place a CSS
animation that helps kind of transition,

100
00:07:06.480 --> 00:07:09.150
an AMP page interview
as a user taps on it.

101
00:07:11.150 --> 00:07:15.100
This is also linked to an official
GitHub page where you can get

102
00:07:15.100 --> 00:07:17.600
that style block if you need to copy and
paste it from here.

103
00:07:19.650 --> 00:07:24.990
In terms of dealing with images, we can't
use the image tag for a few reasons.

104
00:07:24.990 --> 00:07:27.540
First, there's this
concept of source sets.

105
00:07:27.540 --> 00:07:32.321
And source sets allow us to, based on
device pixel ratio, right, whether it's

106
00:07:32.321 --> 00:07:36.560
a low resolution or a high resolution or
a very high resolution device.

107
00:07:36.560 --> 00:07:42.310
We can actually specify a different
source file to use for an image tag.

108
00:07:42.310 --> 00:07:48.358
But not all browsers support this yet.

109
00:07:48.358 --> 00:07:53.006
All browsers that AMP will show up on,

110
00:07:53.006 --> 00:07:58.250
right so
I think this is not IE9 and above.

111
00:07:58.250 --> 00:08:05.390
This is mobile browsers, and so it is the
latest versions of both Safari and Chrome.

112
00:08:06.860 --> 00:08:09.310
They're going to support this
source that'll work here,

113
00:08:09.310 --> 00:08:13.050
you'll notice that we have height and
width explicitly to find.

114
00:08:13.050 --> 00:08:17.280
The alt tag is exactly the alt attribute
does what you think it would do.

115
00:08:17.280 --> 00:08:19.620
And here,
because we know height and width,

116
00:08:19.620 --> 00:08:23.320
we can lay the page out,
we know exactly what's going to happen.

117
00:08:23.320 --> 00:08:28.780
So, what an image tag does by default is,
when a browser reaches it in HTML,

118
00:08:28.780 --> 00:08:31.400
it'll just start going to
fetch that image right away.

119
00:08:31.400 --> 00:08:35.780
That's part of what happens when it runs
into an image tag, it goes and gets it.

120
00:08:35.780 --> 00:08:38.320
We don't want that to necessarily happen.

121
00:08:38.320 --> 00:08:42.537
And part of the reason is that,
you wanna save as much data and

122
00:08:42.537 --> 00:08:46.105
as much battery as you can
on these mobile devices.

123
00:08:46.105 --> 00:08:50.564
So this amp-image component
has a little bit more

124
00:08:50.564 --> 00:08:54.924
control over when we go and
download that image.

125
00:08:54.924 --> 00:08:59.034
And it might be that, it's so far below
the fold that users are unlikely to

126
00:08:59.034 --> 00:09:02.830
scroll to it and so
it'll never get downloaded or rendered.

127
00:09:02.830 --> 00:09:07.440
But like in order to do that, in order to
put more sophisticated logic in place,

128
00:09:07.440 --> 00:09:08.950
we have to move away from an image tag.

129
00:09:12.120 --> 00:09:17.746
If you write custom CSS, you just have
to write amp-custom as an attribute

130
00:09:17.746 --> 00:09:23.480
in the open tag of your style block, and
you can put your custom CSS in there.

131
00:09:23.480 --> 00:09:27.755
Keep in mind that important
is absolutely not allowed, so

132
00:09:27.755 --> 00:09:33.000
your pages will not show up as AMP
pages if you attempt to use important.

133
00:09:33.000 --> 00:09:36.929
The sort of get rejected as doing
something against the rules, so

134
00:09:36.929 --> 00:09:39.010
you're not in fast mode anymore.

135
00:09:40.680 --> 00:09:45.662
And if you use transition, only GPU
accelerated properties can be used.

136
00:09:45.662 --> 00:09:46.860
And so, there's no,

137
00:09:46.860 --> 00:09:52.830
you will do no fancy animation of left to
right position or something like that.

138
00:09:52.830 --> 00:09:57.170
Only things we can lean on the GPU for
that have to do with the compositing of

139
00:09:57.170 --> 00:10:00.950
layers, rather than painting
of layers themselves, right?

140
00:10:00.950 --> 00:10:04.980
Because we don't want repainting over and
over mobile browsers really slow at that.

