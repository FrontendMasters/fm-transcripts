WEBVTT

1
00:00:00.140 --> 00:00:04.750
We're going to go through
the a solution to the second exercise,

2
00:00:04.750 --> 00:00:09.740
where we're adding
Facebook Open Graph tags to improve

3
00:00:09.740 --> 00:00:12.820
the recognizability of these links online.

4
00:00:12.820 --> 00:00:16.930
And we're gonna make it so that we get
a nice thumbnail, a nice description and

5
00:00:16.930 --> 00:00:20.190
title in a rich tile whenever these
links are shared on Facebook.

6
00:00:21.580 --> 00:00:24.030
So I'm going to begin.

7
00:00:24.030 --> 00:00:27.540
So the first thing I did was I
just went to this slide here,

8
00:00:27.540 --> 00:00:30.790
where before we looked at all
of the different meta tags.

9
00:00:30.790 --> 00:00:35.440
And I copied these into my editor here so
I don't have to reach back for them later.

10
00:00:36.620 --> 00:00:39.610
Other than that, no tricks up my sleeves.

11
00:00:39.610 --> 00:00:41.170
I don't currently have my server running.

12
00:00:41.170 --> 00:00:43.000
So I'm gonna fire that up.

13
00:00:43.000 --> 00:00:45.730
That's going to be run -e opengraph.

14
00:00:47.340 --> 00:00:51.303
And that'll start the OpenGraph
exercise on localhost 3000.

15
00:00:51.303 --> 00:00:54.030
And what we see is a list of courses.

16
00:00:54.030 --> 00:00:58.263
And if we hover over each of these or
even click on one of them,

17
00:00:58.263 --> 00:01:02.418
we can see that this is a different
URL on a per course basis.

18
00:01:02.418 --> 00:01:05.860
We should see a different image when we
go to different ones, and we in fact do.

19
00:01:07.840 --> 00:01:13.040
So this is being driven
by this router.js file.

20
00:01:13.040 --> 00:01:19.160
But ultimately the HTML is coming from
these two hbs files in the views folder.

21
00:01:19.160 --> 00:01:23.390
And these are sort of HTML
with handlebars that we can

22
00:01:24.510 --> 00:01:27.988
use to like mixed data into our HTML.

23
00:01:27.988 --> 00:01:30.940
So I'm gonna copy these meta tags because

24
00:01:30.940 --> 00:01:35.140
we'll end up using whatever we
can in each of these two files.

25
00:01:36.270 --> 00:01:39.387
So here I'm just gonna leave myself
a comment, so we can stay organized.

26
00:01:41.550 --> 00:01:47.660
So Facebook, Or
I'll just call it OpenGraph tags.

27
00:01:47.660 --> 00:01:52.438
Because it was rightly pointed out
that more than Facebook uses this.

28
00:01:55.438 --> 00:01:59.193
Or I'm gonna say, sorry,

29
00:01:59.193 --> 00:02:04.270
Begin OpenGraph and end OpenGraph.

30
00:02:04.270 --> 00:02:06.980
So I can find these really
easily later on and I am gonna

31
00:02:06.980 --> 00:02:11.080
paste it in with all the wrong values, and
we will just update those as we go along.

32
00:02:11.080 --> 00:02:15.710
So one thing is I'm not gonna
actually use an image for

33
00:02:15.710 --> 00:02:19.125
this first slide, the list of courses.

34
00:02:19.125 --> 00:02:23.380
Cuz I do not have a good one that
would apply it to the whole list.

35
00:02:23.380 --> 00:02:27.350
This might be one where you'd like
build a composite of several courses or

36
00:02:27.350 --> 00:02:30.670
maybe like your brand, you would
use the image of your brand there.

37
00:02:32.220 --> 00:02:35.170
It doesn't really fit as well for
this this thing here.

38
00:02:35.170 --> 00:02:39.060
So we'll keep OpenGraph type as website.

39
00:02:40.980 --> 00:02:45.673
It's good to provide this although
you saw in my website, I did not.

40
00:02:45.673 --> 00:02:49.951
I probably should go and fix that, but
Facebook will nag you about this and

41
00:02:49.951 --> 00:02:54.450
you will get that warning until you
put this here and make it go away.

42
00:02:54.450 --> 00:03:01.880
So for the URL,
I'm just gonna use the Heroku URL.

43
00:03:01.880 --> 00:03:05.830
Now, it would be nice if we could express
this in a way where we could deploy it in

44
00:03:05.830 --> 00:03:07.620
a couple different places.

45
00:03:07.620 --> 00:03:12.760
And it would not be sort of sensitive
to like this literal string being here,

46
00:03:12.760 --> 00:03:13.980
but this will do for now.

47
00:03:13.980 --> 00:03:16.120
So this is the canonical URL.

48
00:03:16.120 --> 00:03:20.400
What this means is if I were to
add like query params to this.

49
00:03:20.400 --> 00:03:25.900
So say we could filter through this list

50
00:03:25.900 --> 00:03:30.180
of courses by a partial name search, we
could just pull up like the Ember courses.

51
00:03:31.510 --> 00:03:33.850
That query param would
not be in this meta tag.

52
00:03:33.850 --> 00:03:37.230
And so even if we shared that
link with the query param and

53
00:03:37.230 --> 00:03:39.170
if someone likes that or shares it on,

54
00:03:40.700 --> 00:03:45.310
all of the SEO credit goes to the bear
URL without any decoration on it.

55
00:03:47.210 --> 00:03:50.810
So in our title,
we can just put a list of courses.

56
00:03:52.250 --> 00:03:54.382
And this is gonna be the description.

57
00:03:56.122 --> 00:03:59.912
Courses I teach.

58
00:04:09.665 --> 00:04:14.040
Just put a little like
tagline there something, and

59
00:04:14.040 --> 00:04:18.530
we're pretty much done with
the index page, right?

60
00:04:18.530 --> 00:04:24.852
Now we could add some of the things that
we had before like meta:description.

61
00:04:24.852 --> 00:04:26.735
Oops, I guess I can't do it that way.

62
00:04:26.735 --> 00:04:30.410
But I'm not gonna worry about that for
this exercise.

63
00:04:30.410 --> 00:04:31.977
So I'm gonna copy this block here.

64
00:04:31.977 --> 00:04:38.020
We're gonna do a slightly edited
version of it for the course.hbs page.

65
00:04:38.020 --> 00:04:39.294
We'll just drop it here.

66
00:04:44.157 --> 00:04:49.100
Now, the URL in this case
is gonna be dynamic, right?

67
00:04:49.100 --> 00:04:51.570
Cuz it's different for
each course that we click on.

68
00:04:51.570 --> 00:04:57.910
I'm gonna balance something from index.hbs
that we used to build the links, right??

69
00:04:57.910 --> 00:04:58.760
This thing here.

70
00:04:59.800 --> 00:05:04.017
And I'm gonna use it
course page like that.

71
00:05:04.017 --> 00:05:07.570
Cuz we're using this course
information elsewhere.

72
00:05:07.570 --> 00:05:10.150
And it seems like that should work, right?

73
00:05:10.150 --> 00:05:13.415
And that matches what the URL
will be when I deploy.

74
00:05:13.415 --> 00:05:17.671
The og type unfortunately, I don't have
a more specific type that I can use for

75
00:05:17.671 --> 00:05:19.130
this kind of thing.

76
00:05:19.130 --> 00:05:22.449
If at some point they were to
say like course is now type,

77
00:05:24.030 --> 00:05:25.250
this would be fantastic.

78
00:05:25.250 --> 00:05:29.870
Because in the future if there's
some Facebook app that lets you say,

79
00:05:29.870 --> 00:05:32.310
these are the things,
the classes I wanna take.

80
00:05:32.310 --> 00:05:33.920
Now I could be part of that, and

81
00:05:33.920 --> 00:05:37.500
I could be recognized as
being of that specific type.

82
00:05:37.500 --> 00:05:42.313
And anything that relates to
courses across Facebook's whole

83
00:05:42.313 --> 00:05:44.861
platform now will show up there.

84
00:05:44.861 --> 00:05:49.990
The title, I'm gonna use the same
title we are putting in our h1 tag.

85
00:05:51.780 --> 00:05:55.220
And we also have a description that
we can take advantage of there.

86
00:05:55.220 --> 00:06:00.180
In this case, and there's no way for
you to know this, I have a description and

87
00:06:00.180 --> 00:06:01.160
a summary.

88
00:06:01.160 --> 00:06:03.870
The summary is of a shorter
length than the description.

89
00:06:03.870 --> 00:06:06.938
The description can be a couple
paragraphs long, right?

90
00:06:06.938 --> 00:06:08.820
So I'm gonna just choose
to use the summary.

91
00:06:08.820 --> 00:06:13.860
Again, there was no way for you to know
this, but I have made something that

92
00:06:13.860 --> 00:06:17.430
that is designed to be short,
and keyword-rich.

93
00:06:17.430 --> 00:06:23.091
And that is a specific column in my
database that is really all about SEO.

94
00:06:23.091 --> 00:06:27.002
And so I have a couple different
variants of description there for

95
00:06:27.002 --> 00:06:28.859
different purposes, right?

96
00:06:31.358 --> 00:06:34.810
All right, and
now time comes for an image.

97
00:06:34.810 --> 00:06:40.170
Now I did hear from someone that og:image
URL, I did when we were reviewing this.

98
00:06:40.170 --> 00:06:44.166
I suggested that that might be
an equivalent that you could use,

99
00:06:44.166 --> 00:06:46.170
turns out that's not correct.

100
00:06:46.170 --> 00:06:49.270
You just want og:image.

101
00:06:50.880 --> 00:06:53.862
And instead of using the square.url,

102
00:06:53.862 --> 00:06:58.933
if you look at the structure of
this data here, let's take a look.

103
00:07:04.225 --> 00:07:10.200
So inside this image info object,
let's just grab this one as an example.

104
00:07:10.200 --> 00:07:13.520
You can see we've got several
different sizes, and we have width,

105
00:07:13.520 --> 00:07:17.068
height and URL for
each of these different sizes of image.

106
00:07:17.068 --> 00:07:23.037
So I'm gonna use FB share,
which is the one I've built for Facebook.

107
00:07:23.037 --> 00:07:27.447
And you can see I've built my
API here with SEO in mind, and

108
00:07:27.447 --> 00:07:33.080
with the idea of being able to have
statically sized images in mind.

109
00:07:33.080 --> 00:07:36.066
So that we know exactly what width and
height this thing is gonna be.

110
00:07:36.066 --> 00:07:39.670
And we're gonna get into
error pages later on.

111
00:07:39.670 --> 00:07:43.960
This is another place where we wanna
make sure that things are rendered fast,

112
00:07:43.960 --> 00:07:46.370
just like Facebook wants
to render things fast.

113
00:07:46.370 --> 00:07:49.986
And they wanna basically size
everything before that image actually

114
00:07:49.986 --> 00:07:51.640
finishes downloading.

115
00:07:51.640 --> 00:07:52.691
And then once it lands,

116
00:07:52.691 --> 00:07:55.277
it's not gonna cause your layout
to be altered in any way.

117
00:07:55.277 --> 00:07:57.473
You're not gonna have
content shifting around.

118
00:07:57.473 --> 00:08:00.000
Because this thing that came
in was larger than expected.

119
00:08:01.600 --> 00:08:05.550
So that should be a good
place to start there.

120
00:08:05.550 --> 00:08:07.828
And then we're going to add
in our width and height.

121
00:08:11.481 --> 00:08:15.644
Image:width, and
then basically the same thing with height.

122
00:08:21.175 --> 00:08:24.570
All right, so this should be good.

123
00:08:24.570 --> 00:08:26.957
Now let's make a commit.

124
00:08:36.961 --> 00:08:44.513
All right, so now we've made it
like a new version of our app here.

125
00:08:44.513 --> 00:08:47.977
Before I push,
you'll notice that like my app is

126
00:08:47.977 --> 00:08:53.000
currently it's showing the first
exercise we were working on.

127
00:08:53.000 --> 00:08:57.422
All day what we're going to be able to do
is switch to different exercises by just

128
00:08:57.422 --> 00:09:01.326
changing that environment variable
exercise that we initially set.

129
00:09:06.085 --> 00:09:10.642
So this is the same thing you use as
the argument to -e when you run your app

130
00:09:10.642 --> 00:09:12.290
locally.

131
00:09:12.290 --> 00:09:14.720
What it'll end up doing
is restart the app.

132
00:09:14.720 --> 00:09:18.685
And if I do a refresh here, you'll see
that it'll give me my starting point for

133
00:09:18.685 --> 00:09:19.777
the list of courses.

134
00:09:24.269 --> 00:09:25.880
There we go.

135
00:09:25.880 --> 00:09:31.420
So now we're gonna push this new version
up to GitHub with git push heroku master.

136
00:09:33.840 --> 00:09:38.432
And we can see that it's gonna go and
do its thing.

137
00:09:43.791 --> 00:09:46.207
Pretty quick, so the build is done.

138
00:09:46.207 --> 00:09:50.290
It's compressing it, and
should be available now.

139
00:09:50.290 --> 00:09:54.350
So I'm gonna just refresh because it
takes a little bit longer the first time

140
00:09:54.350 --> 00:09:56.720
you do a new deploy,
it has to sort of start things up.

141
00:09:58.330 --> 00:10:03.440
And we'll go back to the open graph
debugger, and I'm gonna grab one

142
00:10:03.440 --> 00:10:10.060
of my URLs here, let's do an image
we haven't seen yet, let's do this.

143
00:10:10.060 --> 00:10:16.290
All right, so there's elixir fundamentals,
so we're gonna paste that here, hit enter.

144
00:10:16.290 --> 00:10:18.530
And the first thing you'll
notice is it's saying,

145
00:10:18.530 --> 00:10:21.100
I've never fetched this
information before.

146
00:10:21.100 --> 00:10:23.920
So this is what you'll get for
brand new apps.

147
00:10:23.920 --> 00:10:26.890
I'm sure all of you ran into this,
fetch new information.

148
00:10:28.560 --> 00:10:32.270
All right, and now we can see
there's our image that just came in.

149
00:10:32.270 --> 00:10:36.894
You noticed if you were looking closely,
the frame was exactly the right size for

150
00:10:36.894 --> 00:10:39.961
the image, and
then it kinda came in and filled it up.

151
00:10:39.961 --> 00:10:43.885
And here are all the OpenGraph
tags that it found.

152
00:10:43.885 --> 00:10:47.970
So they're all what we put in there.

153
00:10:47.970 --> 00:10:51.030
We have nothing more than what
Facebook is looking for here.

154
00:10:51.030 --> 00:10:56.100
And if we go up to the top,
we have one warning here that says,

155
00:10:56.100 --> 00:10:58.130
it wants a Facebook app ID.

156
00:10:58.130 --> 00:11:01.533
This is not Critical, this is one
warning that it's safe to ignore,

157
00:11:01.533 --> 00:11:05.185
particularly if you're not registered
with the Facebook app platform.

158
00:11:05.185 --> 00:11:10.124
If you have like a login with Facebook
button, then you will have an app

159
00:11:10.124 --> 00:11:14.160
ID that corresponds to
the setup required for that.

160
00:11:14.160 --> 00:11:15.690
And you'd put your app ID there and

161
00:11:15.690 --> 00:11:20.630
it might give you a little like decoration
with a little tiny logo or something.

162
00:11:20.630 --> 00:11:25.086
Connecting your brand and
your app on the Facebook platform,

163
00:11:25.086 --> 00:11:29.892
even if it's just login with
Facebook to whatever is shared here.

164
00:11:29.892 --> 00:11:33.378
I do wanna demonstrate that I can
add a query param to this URL.

165
00:11:39.626 --> 00:11:43.240
This is a brand new URL,
never been fetched before.

166
00:11:43.240 --> 00:11:45.680
And because of the way we set this up,

167
00:11:45.680 --> 00:11:51.410
the canonical URL here it's gonna be
exactly what it should be, right?

168
00:11:51.410 --> 00:11:55.400
So regardless of whether we're
dealing with the mobile view, or

169
00:11:55.400 --> 00:11:58.840
whether it's the admins
view of this thing.

170
00:11:58.840 --> 00:12:02.250
Anything that would like be
the extra decoration on this URL,

171
00:12:02.250 --> 00:12:05.930
all of our SEO credibility
built on that same link.

172
00:12:07.120 --> 00:12:09.218
And that is the OpenGraph solution.

173
00:12:09.218 --> 00:12:14.153
So I'm gonna start committing these
solutions that I come up with to

174
00:12:14.153 --> 00:12:16.071
a brand called solution.

175
00:12:27.854 --> 00:12:33.874
And you can check them out if you wanna
compare it with what you ended up doing.

176
00:12:33.874 --> 00:12:34.814
Yes,
&gt;&gt; So

177
00:12:34.814 --> 00:12:38.529
I noticed you're using query
params in your image URLs.

178
00:12:38.529 --> 00:12:39.170
&gt;&gt; Yes.

179
00:12:39.170 --> 00:12:42.220
&gt;&gt; So that you get around
the fact that URL never changes,

180
00:12:42.220 --> 00:12:44.020
they will never refetch it.

181
00:12:44.020 --> 00:12:46.110
&gt;&gt; It absolutely is to
get around with that.

182
00:12:46.110 --> 00:12:52.360
So you'll notice, and this by the way
it's something that AWS supports.

183
00:12:52.360 --> 00:12:57.690
So I'm hosting my images
on Amazon Web Services S3,

184
00:12:57.690 --> 00:13:02.040
and I am putting CloudFront in
front of that, which is their CDN.

185
00:13:02.040 --> 00:13:10.568
So these images end up having
a version next to them.

186
00:13:10.568 --> 00:13:17.790
So that version query params is based on
the modification time of that file in S3.

187
00:13:17.790 --> 00:13:22.920
So this is a way of sort of getting around
Facebook's, like once you give me a URL,

188
00:13:22.920 --> 00:13:24.560
I will never update it.

189
00:13:24.560 --> 00:13:30.070
And in particular because the names,
if you look at this image URL,

190
00:13:30.070 --> 00:13:33.830
it's very common when you have
an image associated with a record

191
00:13:33.830 --> 00:13:37.630
to have like the ID of that
record baked into that image URL.

192
00:13:37.630 --> 00:13:42.750
So if you give me a course ID,
I can give you the URL for this image.

193
00:13:42.750 --> 00:13:48.300
So I don't really have the freedom
to have a different URL here.

194
00:13:49.340 --> 00:13:52.520
As long as I have a record 6,
this is the one URL for

195
00:13:52.520 --> 00:13:54.940
this particular size of this image.

196
00:13:54.940 --> 00:14:00.150
And so the version query param
necessary in order to bust the cache.

197
00:14:00.150 --> 00:14:03.900
If I upload a new version,
like say Elixir changes their logo and

198
00:14:03.900 --> 00:14:08.230
I wannaupdate my thing, then that would
be what I would use, but good eye.

199
00:14:09.660 --> 00:14:13.600
Good eye and a common strategy to
deal with this kind of problem.

200
00:14:13.600 --> 00:14:16.210
And by the way Facebook would
not have a problem with this

201
00:14:16.210 --> 00:14:19.730
because their whole idea is
like they wanna detect changes.

202
00:14:19.730 --> 00:14:22.550
They just don't want to
refetch images each and

203
00:14:22.550 --> 00:14:26.710
every time with the assumption that
they could be modified at any time.

204
00:14:26.710 --> 00:14:30.360
So this is me giving them a totally
appropriate signal that I'm sure they

205
00:14:30.360 --> 00:14:33.020
would appreciate if all developers
did something like this.

