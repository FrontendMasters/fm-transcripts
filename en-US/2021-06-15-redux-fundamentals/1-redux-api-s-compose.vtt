WEBVTT

1
00:00:00.217 --> 00:00:04.732
With that, let's get into playing

2
00:00:04.732 --> 00:00:09.407
around with some of the API of Redux.

3
00:00:09.407 --> 00:00:12.336
We're gonna through pretty
much each of these.

4
00:00:12.336 --> 00:00:16.059
Now, there's a little
bit of a lie in here,

5
00:00:16.059 --> 00:00:21.809
which is Redux itself has five methods or
functions attached to it.

6
00:00:21.809 --> 00:00:26.770
But createStore creates a store
object that has four more, right?

7
00:00:26.770 --> 00:00:29.096
So technically it's got five.

8
00:00:29.096 --> 00:00:32.000
I wasn't lying, but
if we're being intellectually honest,

9
00:00:32.000 --> 00:00:33.712
there might be a grand total of nine.

10
00:00:33.712 --> 00:00:37.534
But that is the entire API
surface area of Redux.

11
00:00:37.534 --> 00:00:41.160
And we're gonna pretty much
master the library itself.

12
00:00:41.160 --> 00:00:45.839
And then we will kind of tie it in
to building some React applications.

13
00:00:46.889 --> 00:00:49.931
Cool, all right, so
we've got a few in here.

14
00:00:49.931 --> 00:00:53.042
We've got createStore, we've got compose,

15
00:00:53.042 --> 00:00:57.331
we've got bindActionCreators,
we've got applyMiddleware.

16
00:00:57.331 --> 00:01:03.583
Let's start out with a good little helper
library over here called compose, right?

17
00:01:03.583 --> 00:01:08.940
And compose is a function that
is not dissimilar to if you've

18
00:01:08.940 --> 00:01:14.202
ever seen pipe, or flow, or
something along those lines.

19
00:01:14.202 --> 00:01:17.790
Compose actually has nothing
to do with Redux, per say,

20
00:01:17.790 --> 00:01:22.367
it's just attached to the Redux object
cuz you might need it for things.

21
00:01:22.367 --> 00:01:26.393
What things, well, I gotta keep you,
that's a cliffhanger so

22
00:01:26.393 --> 00:01:28.417
you tune into the next episode.

23
00:01:28.417 --> 00:01:33.094
But basically what compose does is allows
you to take a set of functions and

24
00:01:33.094 --> 00:01:37.178
create one function that will pass
a value through each of them.

25
00:01:37.178 --> 00:01:40.877
Let's actually see what that means,
let's make some functions together.

26
00:01:40.877 --> 00:01:45.701
We can make one here called makeLouder.

27
00:01:45.701 --> 00:01:47.740
These will all just take a string,
all right?

28
00:01:47.740 --> 00:01:54.191
And so say String.to, lowercase string,
we'll say makeLouder = string,

29
00:01:54.191 --> 00:01:58.702
and then we will string.UpperCase(),
all right.

30
00:01:58.702 --> 00:02:02.766
Let's give ourselves
a little more room here, so

31
00:02:02.766 --> 00:02:05.877
we don't need that much, all right.

32
00:02:05.877 --> 00:02:11.358
So got makeLouder, we've got a const,
let's say repeatThreeTimes.

33
00:02:13.051 --> 00:02:16.684
That'll take a string,
and it'll do a string.

34
00:02:18.947 --> 00:02:22.754
Repeat, I bet you didn't know that
was a method on string objects.

35
00:02:22.754 --> 00:02:28.222
And then here's another fun
one that is not even HTML

36
00:02:28.222 --> 00:02:35.065
semantically valid anymore, but
we're into it, is embolden.

37
00:02:35.065 --> 00:02:37.299
Which will take string, and then we will
string.bold, which will wrap it in b tags.

38
00:02:37.299 --> 00:02:41.465
All right,
just before we look at compose, at all,

39
00:02:41.465 --> 00:02:45.348
I wanted to make a function
that took the value and

40
00:02:45.348 --> 00:02:50.464
effectively made it uppercase,
then repeated it three times,

41
00:02:50.464 --> 00:02:54.941
and then wrapped it in those bold tags,
what would I do?

42
00:02:54.941 --> 00:02:56.388
Any guesses?

43
00:02:56.388 --> 00:02:59.673
&gt;&gt; I said map over the functions and
apply them one-by-one.

44
00:02:59.673 --> 00:03:02.209
&gt;&gt; Yeah, I can map over the functions and
apply them one-by-one, right?

45
00:03:02.209 --> 00:03:04.946
And so
I could create an array of all three.

46
00:03:04.946 --> 00:03:09.378
And I could take whatever the value,
and I could use reduce, or

47
00:03:09.378 --> 00:03:12.484
I can use map, and
run it through all three.

48
00:03:12.484 --> 00:03:17.770
I could make a function called, let's say,

49
00:03:17.770 --> 00:03:22.368
const repeatThreeTimesMakeLouder.

50
00:03:22.368 --> 00:03:25.300
Actually, let's say, yeah,

51
00:03:25.300 --> 00:03:32.504
makeLouderRepeatThreeTimes, AndEmbolden.

52
00:03:34.873 --> 00:03:36.806
Right, and that could take a string.

53
00:03:36.806 --> 00:03:40.419
And it could take the array and
reduce it on through, right?

54
00:03:40.419 --> 00:03:40.997
We could write that.

55
00:03:40.997 --> 00:03:43.357
And that's effectively, spoiler alert,

56
00:03:43.357 --> 00:03:47.769
what compose is basically doing under the
hood for us, just making us not do that.

57
00:03:47.769 --> 00:03:53.171
We could say makeLouder, On the string.

58
00:03:53.171 --> 00:03:58.703
And then we could immediately pass
the value of that into repeatThreeTimes.

59
00:04:01.004 --> 00:04:03.671
And then with that, we could embolden it.

60
00:04:07.788 --> 00:04:11.274
All right, and
now we can say, console.log,

61
00:04:16.045 --> 00:04:18.552
And we'll say, hello.

62
00:04:18.552 --> 00:04:23.400
All right, you can kind of see it down
here in the lower right corner, it works.

63
00:04:23.400 --> 00:04:27.294
Now,we can see a world where doing
this all the time isn't great, and

64
00:04:27.294 --> 00:04:29.212
this is what compose gives for us.

65
00:04:29.212 --> 00:04:34.337
So all we can do in this case is say,
compose, And

66
00:04:34.337 --> 00:04:37.301
we'll say embolden,

67
00:04:37.301 --> 00:04:42.453
RepeatThreeTimes, and makeLouder.

68
00:04:44.472 --> 00:04:48.187
And maybe I'll even spell makeLouder
right, I don't know, we'll see, right?

69
00:04:48.187 --> 00:04:49.916
And I get the same result down there.

70
00:04:49.916 --> 00:04:52.964
It's a way to take multiple functions and

71
00:04:52.964 --> 00:04:57.067
compose a new function out
of all those pieces, right?

72
00:04:57.067 --> 00:05:01.518
And that is one of the helper methods
that comes with Redux, which means for

73
00:05:01.518 --> 00:05:04.768
those of you sports fans who
are keeping track at home,

74
00:05:04.768 --> 00:05:08.889
we are now 20% of the way through
the entire surface area of Redux.

75
00:05:08.889 --> 00:05:12.530
And one of them was just
a functional helper in this case.

