WEBVTT

1
00:00:00.150 --> 00:00:03.723
One of the things that we
saw kind of previously,

2
00:00:03.723 --> 00:00:09.580
we're starting to even see it a little
bit now if we go into our reducer, right?

3
00:00:09.580 --> 00:00:12.203
This isn't even all that bad.

4
00:00:12.203 --> 00:00:15.659
But the fact that to change an item,
we have to map through all the items,

5
00:00:15.659 --> 00:00:18.285
we have to go find the item
that we're looking for.

6
00:00:18.285 --> 00:00:21.572
And then we wanna replace all
the keys on that item except for

7
00:00:21.572 --> 00:00:23.625
the one that we wanted to change.

8
00:00:23.625 --> 00:00:27.230
And then we return the new
item in the array,

9
00:00:27.230 --> 00:00:31.134
in a brand new array,
and doesn't feel great.

10
00:00:31.134 --> 00:00:36.191
And we saw,
I can go back to the slide real quick.

11
00:00:36.191 --> 00:00:41.131
If we go back over to this slide, you can
see that as our objects get a little bit

12
00:00:41.131 --> 00:00:45.019
more complicated,
this can get a little bit out of control.

13
00:00:45.019 --> 00:00:49.956
And not only is it tedious, but anything
that is tedious is also prone to mistakes,

14
00:00:49.956 --> 00:00:50.459
right?

15
00:00:50.459 --> 00:00:55.836
Okay, yeah, I'm doing this by hand,
it's really annoying.

16
00:00:55.836 --> 00:01:00.297
And all of a sudden you've made a boo-boo,
and those the hardest ones to track down.

17
00:01:00.297 --> 00:01:05.380
The most common way to debug that is
particularly to just throw console logs

18
00:01:05.380 --> 00:01:10.230
everywhere and see when it's not
the thing that you expected, right?

19
00:01:10.230 --> 00:01:11.980
Yeah, we all know about debugger and
all those fun things.

20
00:01:11.980 --> 00:01:16.070
We throw console logs everywhere
to go looking for it.

21
00:01:16.070 --> 00:01:20.147
Luckily, again, that principle of,
if something feels tedious,

22
00:01:20.147 --> 00:01:22.691
then there might be
a better way to do this.

23
00:01:22.691 --> 00:01:27.376
There's been a bunch of attempts
to add some kind of working with

24
00:01:27.376 --> 00:01:32.149
regular mutable JavaScript data
types in an immutable fashion,

25
00:01:32.149 --> 00:01:37.380
since React kinda needs it,
Redux insists on it, so on and so forth.

26
00:01:37.380 --> 00:01:40.110
So one of them is this
library called Immer.

27
00:01:40.110 --> 00:01:42.907
And the reason that we're
gonna talk about Immer is,

28
00:01:42.907 --> 00:01:47.150
when we talk about Redux Toolkit, Immer
is also kinda built in to Redux Toolkit.

29
00:01:47.150 --> 00:01:50.525
So when you see me mutating
objects like I don't care anymore,

30
00:01:50.525 --> 00:01:53.210
it's not because it's
late in the workshop.

31
00:01:53.210 --> 00:01:57.738
It's because I have a library that is kind
of helping me treat immutable objects like

32
00:01:57.738 --> 00:02:01.620
they're mutable and
figuring out the difference for me.

33
00:02:01.620 --> 00:02:03.920
And so part of this what we'll do is,

34
00:02:03.920 --> 00:02:07.931
it takes a function that will take
the object you want to mutate,

35
00:02:07.931 --> 00:02:13.060
give you a draft version of it,
you can mutate it to your heart's content.

36
00:02:13.060 --> 00:02:16.793
And then it will go figure out how
to immutably do all the changes.

37
00:02:16.793 --> 00:02:21.900
So you're not typing code like
this all the time or worse.

38
00:02:21.900 --> 00:02:27.528
So let's look at what that
might look like for item added.

39
00:02:27.528 --> 00:02:31.392
An item added is pretty simple,
but we'll go ahead and

40
00:02:31.392 --> 00:02:38.240
we'll say something along the lines of,
I'll write a new one that will replace it.

41
00:02:38.240 --> 00:02:41.990
Say action.type === ITEM_ADDED.

42
00:02:44.340 --> 00:02:50.378
And Immer comes with a function
called produce, right?

43
00:02:50.378 --> 00:02:52.803
And produce, in this case,
it's gonna take, okay,

44
00:02:52.803 --> 00:02:56.034
what is the object that you wanna
change immutably in this case or state?

45
00:02:56.034 --> 00:03:01.100
And then we'll have a function
where you pass in as draft state.

46
00:03:02.810 --> 00:03:07.226
And now the version of state in here, you
can mutate like you can push things to it,

47
00:03:07.226 --> 00:03:09.737
you can just change
the property on an object.

48
00:03:09.737 --> 00:03:13.840
All right, for in the case of price and
quantity, you can do whatever you want.

49
00:03:13.840 --> 00:03:17.067
Then after you're done with this function,
Immer is gonna go through and

50
00:03:17.067 --> 00:03:20.560
actually figure out how to do all the
stuff that we were doing by hand before.

51
00:03:20.560 --> 00:03:25.280
That wasn't too bad in this case,
but could get a lot worse.

52
00:03:25.280 --> 00:03:32.630
So here I could actually just say,
draftState.push().

53
00:03:32.630 --> 00:03:36.956
You can push that item right onto
the array, let me grab this one here.

54
00:03:42.812 --> 00:03:46.445
And I can basically treat
everything in my reducer now.

55
00:03:46.445 --> 00:03:49.995
As long as I'm using produce,
I can treat it as if I could mutate it.

56
00:03:49.995 --> 00:03:52.950
I can do all the much simpler and
easier ways to do this.

57
00:03:54.200 --> 00:03:57.200
And I can just get the benefits of it.

58
00:03:57.200 --> 00:04:01.370
So I'm gonna do one more,
and then I'm gonna do

59
00:04:01.370 --> 00:04:06.184
the price this time and
you're gonna do the quantity.

60
00:04:06.184 --> 00:04:11.177
And we'll see how we can make
this code a lot, lot simpler.

61
00:04:11.177 --> 00:04:14.680
And then I'll push it up and
you'll get a chance to try it out as well.

62
00:04:14.680 --> 00:04:19.895
So, in this case, we will return produce.

63
00:04:19.895 --> 00:04:24.659
We'll start with that state,
with our draft state.

64
00:04:27.097 --> 00:04:31.560
We'll go ahead and we'll find the item.

65
00:04:31.560 --> 00:04:33.250
And that's just simply,
that's not too bad.

66
00:04:33.250 --> 00:04:39.325
That's just gonna be state,
go through the array, And

67
00:04:39.325 --> 00:04:44.455
find that the item.uuid

68
00:04:44.455 --> 00:04:51.543
=== action.payload.uuid.

69
00:04:53.997 --> 00:04:59.019
And then once we have that item and
we found it, we can go through and

70
00:04:59.019 --> 00:05:03.252
just say, cool, item.price,
just be the new price.

71
00:05:07.509 --> 00:05:14.865
And I can even just point like I'll say,
Just in case.

72
00:05:14.865 --> 00:05:18.584
But I can now just mutate this object,
like it was a regular object.

73
00:05:18.584 --> 00:05:22.070
And what will happen is Immer will go
ahead and apply all my changes for me.

74
00:05:22.070 --> 00:05:25.862
And I can just pretend like
mutating objects is totally,

75
00:05:25.862 --> 00:05:27.766
totally okay in that sense.

76
00:05:27.766 --> 00:05:32.183
So what I want you to do, let's actually
just verify that everything I did works,

77
00:05:32.183 --> 00:05:36.599
then what you're gonna do is do the same
for quantity, just to kind of get a sense,

78
00:05:36.599 --> 00:05:38.987
and then we'll refactor this even better.

79
00:05:38.987 --> 00:05:42.466
One of these I wanna do is probably use
this draft state to find it instead.

80
00:05:42.466 --> 00:05:47.060
To get the one out of the draft state,
otherwise, I will get the immutable one.

81
00:05:47.060 --> 00:05:52.300
So just make sure that instead of
the state, you're using the draft version.

82
00:05:52.300 --> 00:05:58.160
So if you have the Immer version of your
array, it will like recursively go down.

83
00:05:58.160 --> 00:06:01.589
So you'll have an array of draft items,
all the draft properties, so

84
00:06:01.589 --> 00:06:03.400
you can just mutate the entire tree.

85
00:06:05.270 --> 00:06:07.648
Let's just verify that that
works the way we expect.

86
00:06:09.204 --> 00:06:11.090
Right, everything still works, great.

