WEBVTT

1
00:00:00.280 --> 00:00:05.202
The next thing that we're gonna kind of
do is I'm going to have it set to update

2
00:00:05.202 --> 00:00:09.490
the price just to show you how
that might work in the reducer.

3
00:00:09.490 --> 00:00:13.161
And if this stresses you out,
don't worry it stresses me out too.

4
00:00:13.161 --> 00:00:14.631
We're gonna make it better first,

5
00:00:14.631 --> 00:00:17.725
we'll show how to do without any
libraries to deal with the mutable state.

6
00:00:17.725 --> 00:00:21.490
Which is playing on JavaScript and then I
think somebody brought up a library called

7
00:00:21.490 --> 00:00:24.060
MR before and
why don't we use that we totally will.

8
00:00:24.060 --> 00:00:26.989
We'll kind of see what that gives
us by doing it by hand first and

9
00:00:26.989 --> 00:00:29.580
then making it a little bit better for
ourselves.

10
00:00:29.580 --> 00:00:32.025
So what I'm gonna do is
I am gonna go ahead and

11
00:00:32.025 --> 00:00:34.482
implement the ability to update the price.

12
00:00:34.482 --> 00:00:38.349
And then you are going to implement
the ability to update the quantity.

13
00:00:38.349 --> 00:00:42.585
And then we will pull those all together
start figuring out how to actually get

14
00:00:42.585 --> 00:00:46.770
the derived and computed data
from this project into place.

15
00:00:46.770 --> 00:00:49.697
So some of this will be
somewhat similar for us,

16
00:00:49.697 --> 00:00:52.196
let's go and create the actions first.

17
00:00:54.621 --> 00:01:03.178
In actions, so we've got Export const,
let's call it item price updated.

18
00:01:10.635 --> 00:01:16.312
We got 'ITEM_PRICE_UPDATED', and What do
we need to know about what are the two?

19
00:01:16.312 --> 00:01:19.103
What are the pieces of information that
we need to know in order to update

20
00:01:19.103 --> 00:01:20.390
the price of an item?

21
00:01:20.390 --> 00:01:21.140
&gt;&gt; The ID and the price?

22
00:01:21.140 --> 00:01:23.030
&gt;&gt; Yeah, what item and what price?

23
00:01:23.030 --> 00:01:25.214
Right, removing all we need to
know is once you want to remove,

24
00:01:25.214 --> 00:01:28.010
we're gonna update we need at least
one other piece of information.

25
00:01:28.010 --> 00:01:32.743
We don't care about the rest of it,
so we can say export for

26
00:01:32.743 --> 00:01:35.943
const and we'll call it update price.

27
00:01:35.943 --> 00:01:40.469
Consti update price and really so

28
00:01:40.469 --> 00:01:48.074
that what needs uuid and
it needs the new price, right?

29
00:01:50.120 --> 00:01:56.817
I'll say of the type, Let's

30
00:01:56.817 --> 00:02:01.902
do past tense here as well,
item price updated,

31
00:02:01.902 --> 00:02:08.610
great and like I said before,
the payload is pretty simple.

32
00:02:08.610 --> 00:02:13.621
It's simply, Uuid and
price, again like I really

33
00:02:13.621 --> 00:02:18.790
feel strongly about what is the bare
minimum you get away with in your actions.

34
00:02:18.790 --> 00:02:21.323
And then bringing this into our,

35
00:02:21.323 --> 00:02:25.580
we need to put in the reducer as well,
so let's do that.

36
00:02:27.780 --> 00:02:29.936
All right, so this is tricky,
think about this as I type,

37
00:02:29.936 --> 00:02:32.025
I'm gonna ask somebody in a second.

38
00:02:32.025 --> 00:02:35.683
How do I return an array with
mostly the same objects,

39
00:02:35.683 --> 00:02:38.786
just updating the one
that I'm looking for?

40
00:02:38.786 --> 00:02:42.873
Cuz I can't mutate the array again,
I can't just like find the index and

41
00:02:42.873 --> 00:02:44.325
mutate it myself.

42
00:02:44.325 --> 00:02:48.855
I need to return a brand new array
with everything else the same.

43
00:02:48.855 --> 00:02:51.243
So as I type for a little bit,
you think about that and

44
00:02:51.243 --> 00:02:52.777
then we'll discuss it as a team.

45
00:02:52.777 --> 00:02:54.005
&gt;&gt; Map,
&gt;&gt; Map and

46
00:02:54.005 --> 00:02:56.759
then what happens when I'm in the map?

47
00:02:56.759 --> 00:03:00.140
So all right, let me get there and
then you're gonna talk me through this.

48
00:03:00.140 --> 00:03:04.944
All right, so we're gonna return
state dot map with the item,

49
00:03:04.944 --> 00:03:07.131
all right what's my logic?

50
00:03:10.162 --> 00:03:14.892
&gt;&gt; We need to check uuid.

51
00:03:14.892 --> 00:03:17.479
&gt;&gt; All right, so
&gt;&gt; And if there is a match,

52
00:03:17.479 --> 00:03:20.720
then update the price
otherwise return item.

53
00:03:20.720 --> 00:03:25.270
&gt;&gt; Cool, so item uuid equals look equals

54
00:03:25.270 --> 00:03:30.537
equals equals action dot payload dot uuid.

55
00:03:30.537 --> 00:03:34.974
So it's the one that we're looking for,
then we're going to return but

56
00:03:34.974 --> 00:03:37.604
we can't just mutate the object, right.

57
00:03:37.604 --> 00:03:42.950
We have to create a brand new object for
a new version of the object

58
00:03:42.950 --> 00:03:48.506
of that given item where the price
is action dot payload dot price.

59
00:03:48.506 --> 00:03:52.314
Otherwise just return
the original item on modified,

60
00:03:52.314 --> 00:03:55.800
I don't love it,
it works well, it should work.

61
00:03:55.800 --> 00:04:00.050
We'll find out when we get it completely
wired up, but this should work.

62
00:04:00.050 --> 00:04:04.503
But you can see where JavaScripts lack
of immutable data types starts to get

63
00:04:04.503 --> 00:04:08.120
a little bit tedious for
us cuz we have to spread everything.

64
00:04:08.120 --> 00:04:12.328
And again, I'm highlighting this problem
cuz we're looking at solutions to it in

65
00:04:12.328 --> 00:04:13.750
a little bit.

66
00:04:13.750 --> 00:04:18.446
Let's actually get over to
our menu item container.

67
00:04:20.874 --> 00:04:24.349
And we'll say update price,

68
00:04:24.349 --> 00:04:29.214
really this point just needs the price and

69
00:04:29.214 --> 00:04:35.372
it should be, We want to dispatch,

70
00:04:37.613 --> 00:04:43.260
Update price with whatever price has
passed them and the own props that uuid.

71
00:04:46.397 --> 00:04:50.475
Right, so again we're taking these action
creators and we're just trying to like

72
00:04:50.475 --> 00:04:54.370
both, like reformat them to whatever
props this company is expecting.

73
00:04:54.370 --> 00:04:58.244
And do whatever ceremony that we need
to do with them to get them ready for

74
00:04:58.244 --> 00:05:00.470
this component to take them as is.

75
00:05:00.470 --> 00:05:04.105
The nice part about this is it does
provide a separation of concerns,

76
00:05:04.105 --> 00:05:08.693
we're separating all of our presentational
component does not have to change at all.

77
00:05:08.693 --> 00:05:12.256
Other than the example of dispatch going
and we haven't touched a presentation

78
00:05:12.256 --> 00:05:14.500
component other swap in
the menu item container.

79
00:05:14.500 --> 00:05:19.996
All right, that should do the trick but
I don't believe anything.

80
00:05:24.585 --> 00:05:28.302
Tofu salad, it's gonna cost $13 and

81
00:05:28.302 --> 00:05:34.000
then it's gonna cost, whoop,
it's not updating just yet.

82
00:05:34.000 --> 00:05:37.690
Actually let me refresh, because again
we changed the stuff with the actions.

83
00:05:37.690 --> 00:05:41.846
Let's go ahead, yeah, it does work so now
I can update its value, so to show you,

84
00:05:41.846 --> 00:05:44.400
I couldn't do this before which is nice.

85
00:05:44.400 --> 00:05:45.770
Why did I have to refresh?

86
00:05:45.770 --> 00:05:49.287
Because again, I changed somethings that
weren't connected to react which meant

87
00:05:49.287 --> 00:05:51.311
the hot mojo reloading
didn't pick up on them.

88
00:05:51.311 --> 00:05:55.790
So a quick refresh will get
it working in those cases.

