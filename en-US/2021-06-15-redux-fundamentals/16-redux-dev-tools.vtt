WEBVTT

1
00:00:00.000 --> 00:00:05.487
One of the really powerful things
that I would recommend installing,

2
00:00:05.487 --> 00:00:10.323
either Chrome or Firefox,
whichever one makes you happier,

3
00:00:10.323 --> 00:00:12.465
are these Redux Dev Tools.

4
00:00:12.465 --> 00:00:17.544
The Redux Dev Tools adds an extra
pain to your developer tools

5
00:00:17.544 --> 00:00:23.031
that allow you to kind of see what's
going on in your Redux store.

6
00:00:23.031 --> 00:00:26.400
So, this is one of those things where,
before we're talking a little bit about

7
00:00:26.400 --> 00:00:29.822
like doesn't react come with a use reducer
and I think there probably are plugins

8
00:00:29.822 --> 00:00:32.204
that will hook the use reducer
up to these tools as well.

9
00:00:32.204 --> 00:00:36.589
But this is where we start to see like
some of the tooling around Redux is super

10
00:00:36.589 --> 00:00:40.097
helpful for some of the more
advanced cases that we'll see.

11
00:00:40.097 --> 00:00:43.462
I mean, in this workshop, we won't even
get to some of the like, fancier ways of

12
00:00:43.462 --> 00:00:46.544
managing async state like Redux
observable and stuff along those lines.

13
00:00:46.544 --> 00:00:51.080
But there is a rich set of tools around
this but very lightweight cases,

14
00:00:51.080 --> 00:00:54.936
use reducer is fine for
more kind of production grade cases,

15
00:00:54.936 --> 00:00:59.345
you might want to consider using
Redux you might end up there anyway.

16
00:00:59.345 --> 00:01:05.573
I find myself almost always, as soon as
the application grows to a certain size,

17
00:01:05.573 --> 00:01:10.338
going ahead and I'm finding
myself needing to use the tools,

18
00:01:10.338 --> 00:01:13.561
to use Redux instead of the user reducer.

19
00:01:13.561 --> 00:01:17.171
So, these Developer Tools basically
when you install it in Chrome, so

20
00:01:17.171 --> 00:01:19.999
if you don't have this
installed in Chrome or Firefox,

21
00:01:19.999 --> 00:01:23.510
a lot of this will be kind of a,
something we won't necessarily see.

22
00:01:23.510 --> 00:01:29.885
But it basically puts this
property on the window object.

23
00:01:29.885 --> 00:01:33.616
So we're gonna say, hey,
if on the global window object,

24
00:01:33.616 --> 00:01:36.674
you have this read of
Redux Dev Tools extension,

25
00:01:36.674 --> 00:01:40.866
then go ahead and call it and
it's going to provide us an enhancer.

26
00:01:40.866 --> 00:01:46.484
So, we can actually say we can
pull this in to our application.

27
00:01:48.650 --> 00:01:50.097
Actually pull it into our store.

28
00:01:53.078 --> 00:01:56.362
We'll say const enhancer in this case.

29
00:02:07.835 --> 00:02:11.998
Great, and then if I did everything right,

30
00:02:11.998 --> 00:02:16.959
should be able to open up my Dev Tools and
go to Redux.

31
00:02:19.156 --> 00:02:23.129
And see that I now have this set of
tooling around everything is happening in

32
00:02:23.129 --> 00:02:26.848
my store, right now, we haven't like
wired up any of our actions so,

33
00:02:26.848 --> 00:02:29.201
you can see that an event
that we saw before.

34
00:02:29.201 --> 00:02:33.808
I can see the current state in any given
point, anytime an action is dispatched,

35
00:02:33.808 --> 00:02:38.008
I can look at the action, very much
like we're doing that log enhancer and

36
00:02:38.008 --> 00:02:40.550
that log reducer or log middleware before.

37
00:02:40.550 --> 00:02:44.695
I can actually, every time the state
changes, I can see the diff for

38
00:02:44.695 --> 00:02:45.727
how it changed.

39
00:02:45.727 --> 00:02:49.875
There are some other cool tools around
here, I can load in a JSON object,

40
00:02:49.875 --> 00:02:53.975
full of state for my application to
create a place I'm trying to debug.

41
00:02:53.975 --> 00:02:57.553
I can also export based on
the current state of the application,

42
00:02:57.553 --> 00:02:59.617
I can export it to a JSON file as well.

43
00:02:59.617 --> 00:03:03.813
I can dispatch actions down here, and
we don't have any actions yet, but

44
00:03:03.813 --> 00:03:06.600
I actually time travel
through my application.

45
00:03:06.600 --> 00:03:09.703
If I want to dispatch a bunch
of actions I want to rewind,

46
00:03:09.703 --> 00:03:14.193
then I can drag this bar back and I can go
to previous states of my application, and

47
00:03:14.193 --> 00:03:15.793
I can play it forward again.

48
00:03:15.793 --> 00:03:20.658
So, it's a really powerful set of tools
that you can use in the application and

49
00:03:20.658 --> 00:03:23.398
it's frankly, just an enhancer, right?

50
00:03:23.398 --> 00:03:25.392
That we're kind of
passing in there as well.

51
00:03:26.584 --> 00:03:29.604
And if you need to compose
with other enhancers,

52
00:03:29.604 --> 00:03:34.404
you can absolutely do that as well, but
it's there for you to kind of pull in.

53
00:03:34.404 --> 00:03:38.237
If you use Redux toolkit which
we'll see later, it is there for

54
00:03:38.237 --> 00:03:40.493
you kind of baked in automatically.

55
00:03:40.493 --> 00:03:45.158
For any of these things, if you don't
wanna to ship them to production like

56
00:03:45.158 --> 00:03:50.120
even with our log enhancer from before,
to answer a question we got in the chat,

57
00:03:50.120 --> 00:03:54.934
you can do like alright, if node n
equals development, add these things in,

58
00:03:54.934 --> 00:03:58.443
otherwise, if it's production,
don't add them in.

59
00:03:58.443 --> 00:04:02.752
One of the fun things that you will see,
though, if you have the Redux Dev Tools

60
00:04:02.752 --> 00:04:06.868
installed is a lot of times you'll just
see it shipped to production you can

61
00:04:06.868 --> 00:04:11.276
actually like inspect applications
you're using, they use Redux as as well.

62
00:04:11.276 --> 00:04:16.207
So, that's a fun, fun thing that you can
do is like rewind, other production apps

63
00:04:16.207 --> 00:04:20.450
as well if they have these tools
installed, but now we have it in place.

