WEBVTT

1
00:00:00.110 --> 00:00:06.984
So we've made a bunch of allusions
to a tool called Redux Toolkit,

2
00:00:06.984 --> 00:00:10.930
which, again, sits on top of Redux.

3
00:00:10.930 --> 00:00:15.522
It's clearly not in every code
bases predated and it all depends.

4
00:00:15.522 --> 00:00:18.967
If you're kind of walking
along a very common path,

5
00:00:18.967 --> 00:00:22.349
it provides a whole bunch
of useful abstractions.

6
00:00:22.349 --> 00:00:28.050
If you've got a very large and complicated
code base, it might not be the right fit.

7
00:00:28.050 --> 00:00:29.517
But I think there's two things.

8
00:00:29.517 --> 00:00:33.264
One, I think for a lot of especially
newer applications, smaller applications,

9
00:00:33.264 --> 00:00:35.120
it's absolutely the right fit.

10
00:00:35.120 --> 00:00:39.984
And two, there are ideas that you
can take from Redux Toolkit and

11
00:00:39.984 --> 00:00:45.120
begin to think about and apply in
your code base even if Redux Toolkit

12
00:00:45.120 --> 00:00:50.840
is maybe not the best fit or it's just
too hard to totally transition to.

13
00:00:50.840 --> 00:00:54.336
I think there are ideas that you can
borrow and inspiration you can learn for

14
00:00:54.336 --> 00:00:56.628
how you can create
abstractions on top of Redux.

15
00:00:56.628 --> 00:00:57.742
So let's take a look.

16
00:00:57.742 --> 00:01:01.846
This is kinda shows you what it's
trying to bring to the table,

17
00:01:01.846 --> 00:01:04.570
which is taking a lot of the boilerplate.

18
00:01:04.570 --> 00:01:08.387
I think Erick asked me at one point,
does this ever become second nature?

19
00:01:08.387 --> 00:01:12.579
And it does, but that feeling of one
of the complaints on Redux all the time

20
00:01:12.579 --> 00:01:15.000
is there's a lot of boilerplate.

21
00:01:15.000 --> 00:01:17.654
And we were talking about this
a little bit during the break, but

22
00:01:17.654 --> 00:01:18.943
it all kinda depends, right?

23
00:01:18.943 --> 00:01:23.826
If this is a small app or something
very kind of that's limited in scope,

24
00:01:23.826 --> 00:01:27.040
I don't even know if Redux
is the right choice.

25
00:01:27.040 --> 00:01:30.647
But if you also think that, hey, this is
gonna be a very large app we're gonna

26
00:01:30.647 --> 00:01:32.715
maintain over a really
long period of time.

27
00:01:32.715 --> 00:01:35.719
Then kind of spending a little
bit of time configuring and

28
00:01:35.719 --> 00:01:38.670
setting up the foundation
with Redux might make sense.

29
00:01:38.670 --> 00:01:41.033
It's always definitely like most things.

30
00:01:41.033 --> 00:01:43.751
It was like you should
always use it all the time.

31
00:01:43.751 --> 00:01:46.417
It would have just been built-in, right?

32
00:01:46.417 --> 00:01:48.892
A lot of these become choices
that we need to make, or

33
00:01:48.892 --> 00:01:52.220
this is also usually in case
you're moving into a code base.

34
00:01:52.220 --> 00:01:58.665
So what it seeks to do is kind of tie
up our actions, our action creators,

35
00:01:58.665 --> 00:02:04.072
our reducers all into one kind
of extraction called a slice.

36
00:02:04.072 --> 00:02:06.560
Even wires up the DevTools and

37
00:02:06.560 --> 00:02:12.045
Middleware just out of the box kinda
gets all of that set up for us.

38
00:02:12.045 --> 00:02:15.247
So what we're gonna do
is we're gonna just take

39
00:02:15.247 --> 00:02:17.979
a tour of the Create React App template.

40
00:02:17.979 --> 00:02:22.015
You just see it at a high level, and
then we'll actually implement it in

41
00:02:22.015 --> 00:02:26.130
an application as well that can now
actually see all the moving pieces.

42
00:02:26.130 --> 00:02:30.402
So at first, what I kinda want you to
do is just kind of take it all in and

43
00:02:30.402 --> 00:02:31.679
get the highlight.

44
00:02:31.679 --> 00:02:35.060
You don't have to memorize
everything as we go through it.

45
00:02:35.060 --> 00:02:37.478
We're just trying to get
a lay of the land, and

46
00:02:37.478 --> 00:02:40.396
then we'll get a little bit
more into it as time goes on.

47
00:02:40.396 --> 00:02:45.529
So if we look here, you can see
that the demo app is, again, yeah,

48
00:02:45.529 --> 00:02:50.610
who doesn't love a good counter for
demoing managing state?

49
00:02:50.610 --> 00:02:54.384
So you can see we can increment it and
decrement it.

50
00:02:54.384 --> 00:02:57.489
We can change the amount as well and
add the amount in,

51
00:02:57.489 --> 00:03:00.580
very similar to what we
all built as a team.

52
00:03:00.580 --> 00:03:02.959
Earlier, you can add only if odd,

53
00:03:02.959 --> 00:03:08.880
which because I'm adding 400 will
always be the same, so on and so forth.

54
00:03:08.880 --> 00:03:13.356
Cool, so let's actually just
look at how this application is

55
00:03:13.356 --> 00:03:17.244
laid out to see what we can
learn about Redux Toolkit.

56
00:03:17.244 --> 00:03:22.068
Redux Toolkit, like in the template,
has this idea of a store.js,

57
00:03:22.068 --> 00:03:26.740
and then it's dividing stuff
into folders called features.

58
00:03:26.740 --> 00:03:31.229
You think about before we had our
items and our tip percentage before.

59
00:03:31.229 --> 00:03:34.500
This is all you get to
choose the folder structure.

60
00:03:34.500 --> 00:03:37.654
If you don't like this folder structure,
you don't have to use it.

61
00:03:37.654 --> 00:03:40.562
I think it all depends, again,
for simple applications,

62
00:03:40.562 --> 00:03:43.601
you might just have everything
in very clean place like that.

63
00:03:43.601 --> 00:03:46.975
But you can see that there's even
the counter component with the state.

64
00:03:46.975 --> 00:03:50.377
In a large application, you can see
how many different things might revive

65
00:03:50.377 --> 00:03:52.595
multiple pieces and
it gets a little bit tricky.

66
00:03:52.595 --> 00:03:55.363
It really depends on the nature
of what you're building.

67
00:03:55.363 --> 00:04:00.253
But the major thing for
us to look at is this counter slice.

68
00:04:00.253 --> 00:04:05.115
You can think about a slice as just
bundling a lot of the ceremony

69
00:04:05.115 --> 00:04:07.470
that we were doing around.

70
00:04:07.470 --> 00:04:10.621
Okay, we're gonna make
the action type constants.

71
00:04:10.621 --> 00:04:15.882
And we are gonna go ahead and we're
going to create maybe action creators.

72
00:04:15.882 --> 00:04:17.874
And we're gonna make the reducers.

73
00:04:17.874 --> 00:04:20.489
And we're going to all
these different pieces.

74
00:04:20.489 --> 00:04:24.427
So you can see here's basically
what a slice looks like.

75
00:04:24.427 --> 00:04:27.135
You give it a name, in this case,
it's the counter, right?

76
00:04:27.135 --> 00:04:31.497
We might have had menu items,
or counter, or whatever.

77
00:04:31.497 --> 00:04:34.932
The initial state, which is something
we've seen before, in this case,

78
00:04:34.932 --> 00:04:36.689
it is value 0 and status equals idle.

79
00:04:36.689 --> 00:04:38.857
We'll talk a little
about that in a second.

80
00:04:38.857 --> 00:04:42.988
And then the reducers,
you can see that here we've got keys,

81
00:04:42.988 --> 00:04:46.805
which is increment, decrement,
increment by amount,

82
00:04:46.805 --> 00:04:51.271
very similar to what we had before,
and it's mutating the state.

83
00:04:51.271 --> 00:04:56.222
All right, pop quiz, sports fans,
what library is using

84
00:04:56.222 --> 00:05:00.882
just willy nilly modify
the state without telling us?

85
00:05:00.882 --> 00:05:01.935
&gt;&gt; Immer?
&gt;&gt; Immer, yeah,

86
00:05:01.935 --> 00:05:03.803
which it's abstracting that and
hiding that.

87
00:05:03.803 --> 00:05:06.858
So if you started with Redux Toolkit and
then had to jump into a code base that

88
00:05:06.858 --> 00:05:10.364
didn't have Redux Toolkit, you might
be like, yeah, I can just mutate state.

89
00:05:10.364 --> 00:05:11.690
I did that before, right?

90
00:05:11.690 --> 00:05:16.342
It's actually all of these methods are
going through Immer under the hood, which

91
00:05:16.342 --> 00:05:20.870
allows us to kind of mutate the state as
we need to and it's handling that for us.

92
00:05:20.870 --> 00:05:25.244
But again, abstraction is great until you
don't really know what it's doing, and

93
00:05:25.244 --> 00:05:27.160
then it becomes a little bit tricky.

94
00:05:28.360 --> 00:05:32.940
And what's interesting,
we're not doing a lot of the pieces where

95
00:05:32.940 --> 00:05:36.811
we're matching action type
equals a certain constant.

96
00:05:36.811 --> 00:05:41.439
Because what's happening is it's making
action types based on the keys in

97
00:05:41.439 --> 00:05:45.370
the reducer that we can then
use throughout the application.

98
00:05:45.370 --> 00:05:49.813
If we look at counter.js you can
see that it's increment, decrement.

99
00:05:49.813 --> 00:05:53.950
It's actually getting all of those
from the counter slice itself.

100
00:05:53.950 --> 00:05:55.733
So it's making the actions on our behalf.

101
00:05:55.733 --> 00:05:57.250
It's storing the action types.

102
00:05:57.250 --> 00:06:00.109
It's kinda hiding most of
the inner workings away from us,

103
00:06:00.109 --> 00:06:03.970
which is really great because it saves
us from having to do all that tedium.

104
00:06:03.970 --> 00:06:07.655
On the other hand, it is also hiding
a lot of the inner workings away from us.

105
00:06:07.655 --> 00:06:11.210
So whether or not it's right for
you is absolutely a trade-off.

106
00:06:11.210 --> 00:06:13.260
But everything is
contained in these slices.

107
00:06:13.260 --> 00:06:16.390
It is trying to kinda wire up
as much of it as possible.

108
00:06:16.390 --> 00:06:19.547
So we'll look at setting up a reducer,
using the actions, and

109
00:06:19.547 --> 00:06:22.658
this extra reducer thing,
we'll also take a look at as well.

110
00:06:22.658 --> 00:06:27.078
And you can see this counterSlice.actions
is where all the actions are stored from

111
00:06:27.078 --> 00:06:27.592
as well.

112
00:06:27.592 --> 00:06:28.790
You can see that it's using selectors.

113
00:06:28.790 --> 00:06:33.030
All the concepts that we've learned so
far were leading up to this moment,

114
00:06:33.030 --> 00:06:35.670
where we could see it
all kinda tied together.

