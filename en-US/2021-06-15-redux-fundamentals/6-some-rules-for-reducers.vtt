WEBVTT

1
00:00:00.590 --> 00:00:03.440
We didn't initially bring this up.

2
00:00:03.440 --> 00:00:07.700
But we saw that if you mutate an object,
it's very hard for JavaScript to know that

3
00:00:07.700 --> 00:00:11.390
it changed and it's a new value
which makes react very sad.

4
00:00:11.390 --> 00:00:16.430
So, a lot of times you noticed we did
just a plus sign plus sign, the value,

5
00:00:16.430 --> 00:00:20.750
we swapped it out with a brand new
object with a brand new number.

6
00:00:20.750 --> 00:00:22.840
The other one is we have that
return state at the bottom.

7
00:00:22.840 --> 00:00:26.030
If none of those conditionals are hit,
we still need to return something.

8
00:00:26.030 --> 00:00:28.340
That's just a JavaScript function.

9
00:00:28.340 --> 00:00:30.371
But to kind of look at that question is,

10
00:00:30.371 --> 00:00:32.906
let's say I had a deeply nested object,
right?

11
00:00:32.906 --> 00:00:36.340
So here we've got an angry
blog post that I wrote.

12
00:00:36.340 --> 00:00:38.500
And it's got a title,
a content, and author.

13
00:00:38.500 --> 00:00:41.770
Those are all pretty easy
to change in one reducer.

14
00:00:41.770 --> 00:00:46.241
You could have update title as an action
type, update content as an action type,

15
00:00:46.241 --> 00:00:46.776
update.

16
00:00:46.776 --> 00:00:48.870
Author gets a little tricky, right?

17
00:00:48.870 --> 00:00:52.462
Cuz what if I want to just
update the location that I'm in?

18
00:00:54.587 --> 00:00:58.160
Well, I have to kind of, and
this was worse before year six, right?

19
00:00:58.160 --> 00:01:02.668
Year six I had to use the use object dot
assign or build new objects with a for

20
00:01:02.668 --> 00:01:04.792
loop or so on and so forth, right?

21
00:01:04.792 --> 00:01:08.350
But I have to make sure that I'm
constantly spreading each part as I

22
00:01:08.350 --> 00:01:10.268
navigate down the object, right?

23
00:01:10.268 --> 00:01:12.654
And so
this is kind of towards the question.

24
00:01:12.654 --> 00:01:15.850
I'm gonna ask me, which is,
what do you do in this case?

25
00:01:15.850 --> 00:01:20.047
Well, there's nothing stopping
you from being able to either,

26
00:01:20.047 --> 00:01:24.320
when you create the, say to aim for
the flattest possible option or

27
00:01:24.320 --> 00:01:27.014
to kind of break it
down to reduce as well.

28
00:01:27.014 --> 00:01:31.704
You might have a location that just
points to a number that's in a different

29
00:01:31.704 --> 00:01:35.210
piece of the state that just
manages all the locations.

30
00:01:35.210 --> 00:01:37.780
And we'll actually see that
in a later example as well.

31
00:01:37.780 --> 00:01:38.710
Mark.

32
00:01:38.710 --> 00:01:41.780
&gt;&gt; Does it ever make sense
to have multiple stores?

33
00:01:41.780 --> 00:01:44.910
&gt;&gt; No, it's actually an anti pattern
to have multiple stores, right?

34
00:01:44.910 --> 00:01:48.994
There's usually one provider and there are
some deep level kind of hooks if you're

35
00:01:48.994 --> 00:01:51.200
trying to create a third party library.

36
00:01:51.200 --> 00:01:53.870
That might use Redux, that doesn't
wanna clash with the other one.

37
00:01:53.870 --> 00:01:56.830
But generally speaking,
you will have one store and

38
00:01:56.830 --> 00:01:59.730
you'll just kinda have one
giant set of your data.

39
00:01:59.730 --> 00:02:02.904
And there's some reasons why this
is actually helpful on top of it,

40
00:02:02.904 --> 00:02:05.480
just because they said it
was an anti pattern, right?

41
00:02:05.480 --> 00:02:10.204
Having your state split between multiple
stores means they kind of the what it

42
00:02:10.204 --> 00:02:14.780
takes to put your app in that, not to
overuse the word state is now split up,

43
00:02:14.780 --> 00:02:15.305
right?

44
00:02:15.305 --> 00:02:18.640
Having one JavaScript object
that represents the state.

45
00:02:18.640 --> 00:02:21.093
We'll actually see this
in the Redux DevTools.

46
00:02:21.093 --> 00:02:25.479
You can then, let's say, if a customer has
a problem, they got themselves in some

47
00:02:25.479 --> 00:02:29.865
weird state, you can actually serialize
the entire state of the application, get

48
00:02:29.865 --> 00:02:34.020
it as a JSON object and then load it in
and development and work with it, right?

49
00:02:34.020 --> 00:02:37.616
So having everything in one store
is both practical for debugging but

50
00:02:37.616 --> 00:02:41.940
also becomes problematic with like
different stores clashing with each other.

51
00:02:41.940 --> 00:02:46.143
The React Redux tools is expecting one
context that is the register route, so

52
00:02:46.143 --> 00:02:47.511
on and so forth, right?

53
00:02:47.511 --> 00:02:51.126
Otherwise our useReducer will get
very confused or our useSelect and

54
00:02:51.126 --> 00:02:54.130
useDispatch will get very confused,
so on and so forth.

55
00:02:54.130 --> 00:02:58.370
So generally speaking, one store, but
we might split up into many reducers.

56
00:02:58.370 --> 00:02:58.870
Question.

57
00:03:00.500 --> 00:03:02.290
&gt;&gt; Yeah, let's see, I had a question.

58
00:03:02.290 --> 00:03:07.794
So, if you have a deeply nested object
that you're getting from your back end or

59
00:03:07.794 --> 00:03:09.026
whatever, and so

60
00:03:09.026 --> 00:03:14.025
you have to mutate it right in your
Redux store at some point over time.

61
00:03:14.025 --> 00:03:17.200
Would you recommend
breaking that hierarchy

62
00:03:17.200 --> 00:03:21.495
into like a flatter structure
when storing it in your store?

63
00:03:21.495 --> 00:03:23.768
&gt;&gt; Absolutely.
So the question was like, let's say,

64
00:03:23.768 --> 00:03:27.471
I don't control the API and I'm getting
a deeply nested object from the API, but

65
00:03:27.471 --> 00:03:30.150
I have to manage it on the client side,
right?

66
00:03:30.150 --> 00:03:34.604
For that, actually, we do this in some of
the applications I've worked on Twilio,

67
00:03:34.604 --> 00:03:38.073
where we'll have at the API layer,
we're making the requests.

68
00:03:38.073 --> 00:03:40.820
We will say, neat,
this is what the API gave me.

69
00:03:40.820 --> 00:03:44.787
We will translate it into a flatter
structure that works really well for

70
00:03:44.787 --> 00:03:48.157
the way that we see both because
the UI might be very different

71
00:03:48.157 --> 00:03:49.430
than the API, right?

72
00:03:49.430 --> 00:03:53.918
A lot of times we use public APIs, which
some of them were initially developed for

73
00:03:53.918 --> 00:03:57.951
the on the send grid side for
sending emails, I mean, your server side.

74
00:03:57.951 --> 00:04:01.090
They're not necessarily
built to build our UIs.

75
00:04:01.090 --> 00:04:03.410
But sometimes you don't
totally control the API.

76
00:04:03.410 --> 00:04:06.809
So what we'll do is, as the JSON
payload comes in from the server,

77
00:04:06.809 --> 00:04:10.085
we will reformat as we need it,
and as we make the POST requests,

78
00:04:10.085 --> 00:04:13.547
we'll have a layer that just translates
it back and forth each way so

79
00:04:13.547 --> 00:04:16.550
that we have the state that works
the way that we want it to.

80
00:04:16.550 --> 00:04:19.853
The other really great advantage
of that is, if the API changes,

81
00:04:19.853 --> 00:04:23.936
you don't have to go everywhere there was
line on the structure shape like that,

82
00:04:23.936 --> 00:04:27.200
you change it where you were doing
the translation from the API.

83
00:04:27.200 --> 00:04:30.807
And to the API, you trick it so
you go back to where the UI expects and

84
00:04:30.807 --> 00:04:32.880
it is a lot easier to work with as well.

