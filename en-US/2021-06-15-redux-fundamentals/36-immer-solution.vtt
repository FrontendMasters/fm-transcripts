WEBVTT

1
00:00:00.000 --> 00:00:04.393
All right, so our mission was to kinda
take a little bit of the approach that

2
00:00:04.393 --> 00:00:08.158
we did here and modify it so
that it also works with the quantity,

3
00:00:08.158 --> 00:00:12.020
kinda just to again reaffirm
that muscle memory here.

4
00:00:12.020 --> 00:00:14.135
We're gonna return produce,

5
00:00:14.135 --> 00:00:18.131
we'll say state, and
we'll get that draft state again.

6
00:00:22.162 --> 00:00:23.063
And that draft state,

7
00:00:23.063 --> 00:00:26.297
we're gonna basically need to find the
item one more time, so we'll grab that.

8
00:00:26.297 --> 00:00:29.479
We might abstract that out to a function,
but it needs to know,

9
00:00:29.479 --> 00:00:31.950
it needs the draft state
that's in the closure.

10
00:00:31.950 --> 00:00:35.836
So I'd have to use a little bit of
functional programming to make that

11
00:00:35.836 --> 00:00:38.960
happen, which seems a bit much for
this use case.

12
00:00:38.960 --> 00:00:45.635
We'll just change the item quantity,
action.payload.uid.

13
00:00:45.635 --> 00:00:50.504
Now, there might be a little
voice in your head that's saying,

14
00:00:50.504 --> 00:00:53.221
do I have to do this for everything?

15
00:00:53.221 --> 00:00:57.470
This is also a little bit tedious, right?.

16
00:00:57.470 --> 00:01:00.610
Again, that's the voice
that we want to listen to.

17
00:01:00.610 --> 00:01:05.285
One of the biggest pieces of advice I give
these engineers is listen to that voice,

18
00:01:05.285 --> 00:01:08.360
cuz it will usually guide
you in the right direction.

19
00:01:08.360 --> 00:01:13.640
I think it's a Larry Wall quote,
he's a creative pro, which is the three

20
00:01:13.640 --> 00:01:19.450
fundamental traits of a engineer is
laziness and patience and hubris, right?

21
00:01:19.450 --> 00:01:23.020
Those things that are tedious, listen to
them cuz they're usually the sign that

22
00:01:23.020 --> 00:01:25.440
there's probably a better way forward.

23
00:01:25.440 --> 00:01:29.716
So if you think about it, really in
each one of these conditionals we

24
00:01:29.716 --> 00:01:33.450
are modifying the state immutably and
returning it.

25
00:01:33.450 --> 00:01:37.675
What if we just had the entire
reducer go through Emmer, right?

26
00:01:37.675 --> 00:01:38.620
That would work, right?

27
00:01:38.620 --> 00:01:41.817
We can just like, cool,
pass the state and the action in,

28
00:01:41.817 --> 00:01:45.730
let me do my thing immutably and
then figure it all out at the end.

29
00:01:45.730 --> 00:01:48.004
We can totally do that,
the syntax is a little bit different,

30
00:01:48.004 --> 00:01:49.440
so let's talk about it.

31
00:01:49.440 --> 00:01:54.496
Here, in this case,
we are immediately giving it the state,

32
00:01:54.496 --> 00:01:59.560
and then we are mutating it and
it's applying the mutation.

33
00:01:59.560 --> 00:02:03.981
We can also use produce to create
a function that will automatically pass it

34
00:02:03.981 --> 00:02:05.080
into Emmer.

35
00:02:05.080 --> 00:02:08.210
It's just the syntax is a little bit
different with the curried function.

36
00:02:08.210 --> 00:02:12.070
So let's just take a look at what
that might look like for us.

37
00:02:12.070 --> 00:02:18.092
So we'll actually,
we will say produce, In this case,

38
00:02:18.092 --> 00:02:22.488
and we'll wrap the entire function,
but then as the second argument,

39
00:02:22.488 --> 00:02:27.564
it will take some kind of
initial state As well and

40
00:02:27.564 --> 00:02:32.390
this will return a function
that we can use as our reducer.

41
00:02:32.390 --> 00:02:33.964
I called it initial items, hold on.

42
00:02:38.387 --> 00:02:39.850
All right, so we've got that in place.

43
00:02:39.850 --> 00:02:42.645
And now we just need to do really at
this point, we're just simplifying,

44
00:02:42.645 --> 00:02:45.290
we don't need to wrap everything and
produce anymore.

45
00:02:45.290 --> 00:02:49.400
So state is going be effectively
that draft state at this point.

46
00:02:49.400 --> 00:02:52.740
So we can go ahead and
reduce a lot of this.

47
00:02:52.740 --> 00:02:54.970
We could take all that out.

48
00:02:54.970 --> 00:02:56.290
This is now state.

49
00:02:59.270 --> 00:03:02.850
This one can stay, if you return,
it'll actually work as well.

50
00:03:05.830 --> 00:03:07.046
We can get rid of this.

51
00:03:08.935 --> 00:03:12.417
Now this has become state as
well over here over here.

52
00:03:17.471 --> 00:03:21.908
We're gonna basically just treat
it as if this entire time,

53
00:03:21.908 --> 00:03:26.050
everything we said about
mutability wasn't the case.

54
00:03:26.050 --> 00:03:28.636
And we don't even have to return
state cuz this will automatically,

55
00:03:28.636 --> 00:03:30.360
it's gonna apply this stuff anyway.

56
00:03:30.360 --> 00:03:34.840
So it'll actually take care of
that fallback for us as well.

57
00:03:34.840 --> 00:03:39.020
Let's go try it out to make sure
I didn't make any obvious error.

58
00:03:39.020 --> 00:03:40.085
All right, everything loads.

59
00:03:42.764 --> 00:03:48.150
Item price updated, let's see, but
it seems, got a little bit of an issue.

60
00:03:49.610 --> 00:03:54.635
EUID price is 14,
we got to do that percent or not.

61
00:03:56.848 --> 00:04:00.852
Coming in there as well, let's see.

62
00:04:00.852 --> 00:04:06.612
143, 13 but
we're loading in slightly wrong.

63
00:04:06.612 --> 00:04:09.070
&gt;&gt; You're reversing the EUID
instead of [CROSSTALK]-

64
00:04:09.070 --> 00:04:09.826
&gt;&gt; Good catch,

65
00:04:09.826 --> 00:04:12.790
that'll do it because
the EUID of that one was one.

66
00:04:14.580 --> 00:04:17.380
So in this case we'll do price.

67
00:04:17.380 --> 00:04:20.420
In this case we will do quantity.

68
00:04:21.620 --> 00:04:23.572
Yeah, so we'll find the right item.

69
00:04:27.955 --> 00:04:29.750
And we'll refresh and there we go.

70
00:04:29.750 --> 00:04:32.738
Now everything works as expected, right?

71
00:04:32.738 --> 00:04:36.440
So this becomes a much cleaner syntax,
and it becomes easy to correct.

72
00:04:36.440 --> 00:04:40.260
If we had this one nested object, we can
just treat it like we could work down.

73
00:04:40.260 --> 00:04:44.646
Now be clear, this solves for
the tedium with immutability and

74
00:04:44.646 --> 00:04:48.070
creating new objects as you go through.

75
00:04:48.070 --> 00:04:52.833
However, it doesn't necessarily save
you from the fact that even if you have

76
00:04:52.833 --> 00:04:56.980
a deeply nested object and
any one of those becomes undefined.

77
00:04:56.980 --> 00:05:01.364
You either need to check all the way down
or use some of the new operators that will

78
00:05:01.364 --> 00:05:04.470
return undefined if anything
in the entire chain.

79
00:05:04.470 --> 00:05:06.945
And sometimes yes, that will save
you from your app blowing up.

80
00:05:06.945 --> 00:05:08.845
But it might also not be what you wanted.

81
00:05:08.845 --> 00:05:11.874
The flatter you keep your data structures,
not just for

82
00:05:11.874 --> 00:05:15.125
the tedium of writing immutable
updates to your code.

83
00:05:15.125 --> 00:05:19.195
The advantages to keeping your flat
data object is it's just also easier to

84
00:05:19.195 --> 00:05:20.460
maintain.

85
00:05:20.460 --> 00:05:24.266
So I would say use this in conjunction
with normalizing your data and

86
00:05:24.266 --> 00:05:28.556
figuring out a data structure that works
for the UI you're trying to build.

87
00:05:28.556 --> 00:05:32.488
But this is a another way on top of that
to also reduce the amount of boilerplate

88
00:05:32.488 --> 00:05:34.560
and tedious code that you need to write.

