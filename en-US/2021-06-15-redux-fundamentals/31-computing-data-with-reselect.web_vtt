WEBVTT

1
00:00:00.160 --> 00:00:03.060
All right,
to the selector part of the show.

2
00:00:03.060 --> 00:00:07.188
Let's go into our store in this case,

3
00:00:07.188 --> 00:00:11.454
and let's just make a selectors file.

4
00:00:11.454 --> 00:00:13.196
We'll call it selectors.js.

5
00:00:17.515 --> 00:00:19.325
Cool, and reselect,

6
00:00:19.325 --> 00:00:25.780
basically the main one we're gonna
use is one called createSelector.

7
00:00:25.780 --> 00:00:29.431
Again, you saw useSelector
before when we used the hooks,

8
00:00:29.431 --> 00:00:31.280
this is a very similar idea.

9
00:00:31.280 --> 00:00:35.740
A selector is basically something
that takes your large state tree and

10
00:00:35.740 --> 00:00:38.270
gets the parts that you need out of it.

11
00:00:38.270 --> 00:00:44.124
So if you think about from the counter
example we saw with the hooks,

12
00:00:44.124 --> 00:00:49.365
we might have had something
like export const selectItems,

13
00:00:49.365 --> 00:00:51.947
which is just gonna be state.

14
00:00:54.353 --> 00:00:59.158
Equal sign here, state, items.

15
00:00:59.158 --> 00:01:01.725
We saw that before with
the counter before.

16
00:01:01.725 --> 00:01:06.450
Same thing for tip percentage,
we could say selectTipPercentage.

17
00:01:06.450 --> 00:01:10.350
And I'm prefixing them all with select,
that is more of a convention.

18
00:01:10.350 --> 00:01:13.380
Again, you could call them whatever
you want, cuz it's just JavaScript.

19
00:01:14.500 --> 00:01:22.207
selectTipPercentage is
state.TipPercentage, right?

20
00:01:22.207 --> 00:01:23.868
So these are just functions,

21
00:01:23.868 --> 00:01:28.670
they're gonna pull each of those parts of
the state tree off of our Redux state.

22
00:01:28.670 --> 00:01:30.500
There's nothing special about them.

23
00:01:30.500 --> 00:01:37.961
createSelector takes two major arguments,
an array of functions, right?

24
00:01:37.961 --> 00:01:41.244
Very similar to the array that we
would use in use memory, use callback.

25
00:01:41.244 --> 00:01:44.883
And then a function to pass all
the results of those through

26
00:01:44.883 --> 00:01:47.440
to compute your new value.

27
00:01:47.440 --> 00:01:52.035
The trick is, it will look at, for
instance, we pass in selectItems,

28
00:01:52.035 --> 00:01:53.656
selectTipPercentage.

29
00:01:53.656 --> 00:01:58.440
If the return values of these functions
are unchanged, it'll just give you

30
00:01:58.440 --> 00:02:03.400
back the same value it gave last time and
skip the expensive computation.

31
00:02:03.400 --> 00:02:05.848
This is a cheap computation in our case,
but

32
00:02:05.848 --> 00:02:09.687
if this was a more expensive computation,
it becomes a lot cheaper,

33
00:02:09.687 --> 00:02:13.270
cuz we're not running it over and
over and over again.

34
00:02:13.270 --> 00:02:18.711
The other thing is, I would really,
really, really push you to use selectors,

35
00:02:18.711 --> 00:02:22.328
even there as simple as this one,
all over the place.

36
00:02:22.328 --> 00:02:24.303
Let's say, hypothetically,

37
00:02:24.303 --> 00:02:27.969
you used state.Items throughout
your code base, right?

38
00:02:27.969 --> 00:02:31.644
Code base grows, you move that
somewhere else in the state tree, or

39
00:02:31.644 --> 00:02:34.585
you refactor the state tree in some way.

40
00:02:34.585 --> 00:02:38.891
You gotta find all those state.Items and
change them.

41
00:02:38.891 --> 00:02:43.399
Versus if you made a function called
selectItems, and it did that,

42
00:02:43.399 --> 00:02:45.544
use that function everywhere.

43
00:02:45.544 --> 00:02:49.091
And then all of a sudden you change
the shape of your state tree.

44
00:02:49.091 --> 00:02:51.206
You just gotta update that function,

45
00:02:51.206 --> 00:02:55.579
and the rest of your code base will be
resilient and move along and get the hint.

46
00:02:55.579 --> 00:02:58.520
And then you don't have to change things
over and over in your code base, right?

47
00:02:58.520 --> 00:03:02.425
I think a lot of the ways that front end
code bases break down on an architectural

48
00:03:02.425 --> 00:03:06.507
level, is they become so much complication
and so many tedium things to change and

49
00:03:06.507 --> 00:03:09.664
things keep breaking,
that you can't ship any new features.

50
00:03:09.664 --> 00:03:13.444
But giving yourself good abstractions,
sometimes even before you think you need

51
00:03:13.444 --> 00:03:17.182
them, you give yourself the ability to
make changes and change your mind later.

52
00:03:17.182 --> 00:03:20.062
I always try to optimize for,
can I change my mind later?

53
00:03:20.062 --> 00:03:25.129
So let's start by creating

54
00:03:25.129 --> 00:03:30.201
ability to get a subtotal.

55
00:03:30.201 --> 00:03:33.590
And we'll kind of get a sense for
how this syntax works.

56
00:03:33.590 --> 00:03:36.610
So, subtotal is totally
just based on the items.

57
00:03:36.610 --> 00:03:37.646
So let's go ahead and we'll do that.

58
00:03:37.646 --> 00:03:43.131
We'll say export const subtotal,
so I selectSubtotal.

59
00:03:46.552 --> 00:03:48.716
And that's gonna be very
similar to what we saw before,

60
00:03:48.716 --> 00:03:50.705
we're gonna start out
with this createSelector.

61
00:03:50.705 --> 00:03:55.911
And really the only things that
the selectSubtotal needs is go ahead and

62
00:03:55.911 --> 00:03:57.880
select all the items.

63
00:03:57.880 --> 00:04:02.800
So this will run the selectItems function,
which will get us the items.

64
00:04:02.800 --> 00:04:08.039
If that array is the exact same array
as the last time it was called, right?

65
00:04:08.039 --> 00:04:09.695
Even in multiple map dispatch to props,

66
00:04:09.695 --> 00:04:12.760
like right now we have one map
dispatch to props, it's using that.

67
00:04:12.760 --> 00:04:15.611
But let's say you're using a very
similar thing throughout the code base.

68
00:04:15.611 --> 00:04:20.510
It will run it once, until that changes,
it will just return the same value.

69
00:04:20.510 --> 00:04:22.787
So as long as everything
in this array is the same.

70
00:04:22.787 --> 00:04:26.186
But we'll take the return result, which
is going to be that array of items and

71
00:04:26.186 --> 00:04:27.605
we'll pass it through.

72
00:04:27.605 --> 00:04:33.332
This is gonna be very similar to what
we had before, which is items.reduce.

73
00:04:33.332 --> 00:04:37.702
I was gonna take the sum and
the item, I could have just copy and

74
00:04:37.702 --> 00:04:39.818
paste this probably as well.

75
00:04:39.818 --> 00:04:44.739
Sum of the item, and we'll say sum

76
00:04:44.739 --> 00:04:49.662
+ item.price * item quantity,

77
00:04:49.662 --> 00:04:53.320
start from 0, right?

78
00:04:53.320 --> 00:04:55.607
And so now this is very similar
to what we had before well.

79
00:04:55.607 --> 00:04:57.430
Anytime we need to compute a subtotal,
this will work.

80
00:04:57.430 --> 00:05:01.850
And we'll only do this math once
until the array changes again.

81
00:05:01.850 --> 00:05:06.636
Cool, let's go ahead and
let's try the other two as well,

82
00:05:06.636 --> 00:05:09.713
just to kinda get some muscle memory.

83
00:05:09.713 --> 00:05:11.870
So selectTipAmount involves two things.

84
00:05:11.870 --> 00:05:17.290
It needs the subtotal, right,
which we already have a selector for.

85
00:05:17.290 --> 00:05:21.417
And then it needs the selectTipPercentage,
which we already have a selector for.

86
00:05:21.417 --> 00:05:24.460
So you can start to build these
on top of each other, right?

87
00:05:24.460 --> 00:05:27.900
As each one can stand on
the shoulders of the previous one.

88
00:05:27.900 --> 00:05:33.242
And again, if this hasn't changed,
and this hasn't changed,

89
00:05:33.242 --> 00:05:38.113
then we'll cache the result of
this next selector as well.

90
00:05:38.113 --> 00:05:43.015
So we'll say export const and
we'll say selectTipAmount.

91
00:05:44.700 --> 00:05:46.471
Now will again be create selector and
again,

92
00:05:46.471 --> 00:05:48.112
what are the two things this cares about?

93
00:05:48.112 --> 00:05:51.405
Well, it cares about the results
of selectSubtotal and

94
00:05:51.405 --> 00:05:54.285
it cares about the results
of selectTipAmount.

95
00:05:56.445 --> 00:06:02.967
And with that, oops, not selectTipAmount,
selectSubtotal and selectTipPercentage.

96
00:06:04.066 --> 00:06:08.783
Right, and with that the two
results will be the subtotal from

97
00:06:08.783 --> 00:06:11.332
the first argument in the array.

98
00:06:11.332 --> 00:06:13.580
And the second argument in the array
will be the tip percentage.

99
00:06:15.500 --> 00:06:19.349
And then we can simply add
those two things together.

100
00:06:23.354 --> 00:06:29.271
Right, and then finally the last one
that we had was export const total,

101
00:06:29.271 --> 00:06:34.327
or now it's gonna be selectTotal,
will be create selector.

102
00:06:37.212 --> 00:06:42.330
So this one now needs to know about
the subtotal and the tip amount.

103
00:06:42.330 --> 00:06:45.183
So this is again standing on
previous selectors that we wrote.

104
00:06:45.183 --> 00:06:48.510
Looking at this one and this one,
these have the same results.

105
00:06:48.510 --> 00:06:50.800
This will always return
the same result as well.

106
00:06:50.800 --> 00:06:55.907
So we'll selectSubtotal and
we'll selectTipAmount.

107
00:06:57.467 --> 00:06:59.073
And that's just adding them.

108
00:07:00.565 --> 00:07:02.462
So this will give us our subtotal,

109
00:07:09.703 --> 00:07:14.387
subtotal + tipAmount.

110
00:07:14.387 --> 00:07:16.489
Great, so now we have these in place,

111
00:07:16.489 --> 00:07:19.940
we can swap these out in our map
state to props really easily.

112
00:07:19.940 --> 00:07:21.500
So let's go ahead and try that out.

113
00:07:21.500 --> 00:07:26.704
And now instead of doing all this logic
here, we can get rid of all of this.

114
00:07:29.570 --> 00:07:37.180
And we're gonna say const subtotal =
selectSubtotal based on the state.

115
00:07:38.938 --> 00:07:43.144
Const tipAmount, =

116
00:07:43.144 --> 00:07:47.877
selectTipAmount based on the state.

117
00:07:49.456 --> 00:07:57.553
Const total = selectTotal
based on the state.

118
00:07:57.553 --> 00:08:01.512
&gt;&gt; You've made a typo in
calculations in selectors.

119
00:08:01.512 --> 00:08:02.703
&gt;&gt; All right, where is it?

120
00:08:02.703 --> 00:08:08.245
&gt;&gt; It seems like we need to multiply
subtotal and tip percentage.

121
00:08:08.245 --> 00:08:10.870
&gt;&gt; Yep, perfect, thank you.

122
00:08:12.220 --> 00:08:13.480
Not good at math.

123
00:08:13.480 --> 00:08:14.535
I used to be a seventh grade teacher.

124
00:08:14.535 --> 00:08:17.345
So, you think.

125
00:08:17.345 --> 00:08:19.100
All right, cool.

126
00:08:19.100 --> 00:08:21.890
We can see that everything
still works as expected.

127
00:08:21.890 --> 00:08:23.670
We'll go modify this a little bit.

128
00:08:23.670 --> 00:08:25.660
We see we're recalculating these values.

