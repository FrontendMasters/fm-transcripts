WEBVTT

1
00:00:00.070 --> 00:00:03.870
The other thing that we will see a lot
of times is this is a pretty simple

2
00:00:03.870 --> 00:00:04.880
action type.

3
00:00:04.880 --> 00:00:08.670
But as we made more complicated
ones ,okay, maybe we need to

4
00:00:08.670 --> 00:00:12.210
take multiple arguments and put them
in multiple places in the payload.

5
00:00:12.210 --> 00:00:15.260
We might find ourselves just
using a function to create

6
00:00:15.260 --> 00:00:16.530
an action on our behalf.

7
00:00:16.530 --> 00:00:20.180
This is also helpful because yeah,
if this action were to grow.Later

8
00:00:20.180 --> 00:00:25.000
in workshop we'll see some that you
have like a few different properties.

9
00:00:25.000 --> 00:00:26.830
Just the more typing, I'm very lazy.

10
00:00:26.830 --> 00:00:29.930
The more typing I have to do,
the more likely I am to make a typo.

11
00:00:29.930 --> 00:00:32.700
That typo could be one where I
just don't see it at first and

12
00:00:32.700 --> 00:00:34.160
lose half of my morning.

13
00:00:34.160 --> 00:00:36.850
So one of the things
that we're able to do is,

14
00:00:36.850 --> 00:00:40.400
we get a lot of times make a,
what's called an action creator.

15
00:00:40.400 --> 00:00:43.300
And an action creator is a very
fancy word for a function.

16
00:00:45.450 --> 00:00:49.470
So I could say, anchorman and
that could be a mountain.

17
00:00:49.470 --> 00:00:50.690
But maybe it doesn't have to be.

18
00:00:50.690 --> 00:00:52.590
We can even say it could be as simple as.

19
00:00:58.907 --> 00:01:03.210
And this might be what I choose
to use throughout my application.

20
00:01:03.210 --> 00:01:07.330
If we want to set a payload,
I can say something like amount.

21
00:01:07.330 --> 00:01:07.960
And it could do.

22
00:01:13.080 --> 00:01:15.870
And we could use the amount if later
that needed to become an object,

23
00:01:15.870 --> 00:01:17.190
I could change it as well.

24
00:01:17.190 --> 00:01:20.000
One of the reasons why this pattern is so
powerful, despite being so

25
00:01:20.000 --> 00:01:23.270
simple is let's say you wrote
those objects everywhere.

26
00:01:23.270 --> 00:01:24.370
You're like, no, I don't mind.

27
00:01:24.370 --> 00:01:27.160
I'll write curly braces type increment,
it's fine.

28
00:01:28.500 --> 00:01:30.420
Later on, you want to change a feature.

29
00:01:31.520 --> 00:01:34.880
Good luck, you now have to do
a like search to your codebase for

30
00:01:34.880 --> 00:01:39.210
every time you wrote that object.And go
looking at them, change them all by hand.

31
00:01:39.210 --> 00:01:40.720
If you wanna change
the format of your action,

32
00:01:40.720 --> 00:01:43.765
you use an action creator, you are able
to just change that functions.

33
00:01:43.765 --> 00:01:47.945
Somewhere and everywhere that's using it,
we'll get the new action type, right?

34
00:01:47.945 --> 00:01:52.525
It's again giving yourself that helper an
abstraction, to make your life easier.And

35
00:01:52.525 --> 00:01:54.925
not necessarily because
someone told you have to.

36
00:01:54.925 --> 00:02:00.405
But doing it because you want to and
because you see value in it, cool.

37
00:02:01.585 --> 00:02:04.395
So, we saw with a command,
we can also make one called like add,

38
00:02:04.395 --> 00:02:08.390
which will kind of show you
the same basic idea.This

39
00:02:08.390 --> 00:02:11.490
one will actually take
what we had in increment.

40
00:02:11.490 --> 00:02:14.280
Put it in here, we'll make

41
00:02:14.280 --> 00:02:21.550
a new.And I can mix and
match my action types.

42
00:02:21.550 --> 00:02:22.580
I shouldn't but I can.

43
00:02:25.710 --> 00:02:30.070
So we might create action creators for
all the different things.

44
00:02:30.070 --> 00:02:32.410
So, in the reducer itself,

45
00:02:32.410 --> 00:02:36.020
right now we just need to deal
with any cases that we care about.

46
00:02:36.020 --> 00:02:41.500
And again, a shocking about of
redux in just Java Script, right?

47
00:02:41.500 --> 00:02:45.030
This is just a function where
two objects are going in.

48
00:02:45.030 --> 00:02:48.880
So we can go ahead, like here we're
looking for the type increment.Here

49
00:02:48.880 --> 00:02:53.547
we might say if we wanted to base it on a
payload, we might say action type is add.

50
00:02:57.700 --> 00:03:05.730
And we'll say in this case state is
state.value + action.payload, right.

51
00:03:05.730 --> 00:03:09.750
So now based on whether the increment or
the add and obviously we could add things

52
00:03:09.750 --> 00:03:13.160
like decrement, or set and
stuff along those lines.

53
00:03:13.160 --> 00:03:16.230
We can add stuff in as well.Question.

54
00:03:16.230 --> 00:03:19.310
&gt;&gt; Yeah, the initial state is value and
zero and

55
00:03:19.310 --> 00:03:23.670
you always returning like,
different objects.

56
00:03:23.670 --> 00:03:28.370
&gt;&gt; I am yeah,
I should actually be value as the key.

57
00:03:28.370 --> 00:03:32.700
This is why you pair
program with a half a dozen

58
00:03:32.700 --> 00:03:37.550
of your closest friends, to catch
just silly mistakes that you might

59
00:03:37.550 --> 00:03:40.710
come across as you are both talking and
typing, at the same time.

60
00:03:40.710 --> 00:03:44.150
So this is an object that has
the same shape here as well.Value and

61
00:03:44.150 --> 00:03:47.450
so we're just taking state.value and
implementing it right.

62
00:03:47.450 --> 00:03:51.120
You could break this out as well,
onto a different line and put it in there.

63
00:03:51.120 --> 00:03:54.410
So we could say again,
it is all just JavaScript.

64
00:03:54.410 --> 00:03:58.840
So there's nothing stopping
you from doing that as well,

65
00:03:58.840 --> 00:04:03.240
is we are simply modifying
the object based on what happened.

