WEBVTT

1
00:00:00.030 --> 00:00:04.202
The only thing we haven't
really kind of talked about in

2
00:00:04.202 --> 00:00:08.651
our kind of fundamentals here
is how to make AJAX requests.

3
00:00:08.651 --> 00:00:12.670
And there's a bunch of
libraries to do that.

4
00:00:12.670 --> 00:00:18.051
And like most things, it all depends
on how extreme your needs are.

5
00:00:18.051 --> 00:00:19.941
If you have very simple needs,

6
00:00:19.941 --> 00:00:24.021
Redux Thunk is probably the way
to go cuz it's incredibly simple.

7
00:00:24.021 --> 00:00:28.773
If you're doing really sophisticated
things, you might want Redux-Saga or

8
00:00:28.773 --> 00:00:30.143
Redux-Observable.

9
00:00:30.143 --> 00:00:33.969
The application I used to work on for
a few years, was a drag and

10
00:00:33.969 --> 00:00:36.631
drop editor for putting together emails.

11
00:00:36.631 --> 00:00:38.482
It was fully an application.

12
00:00:38.482 --> 00:00:43.517
And we found that we outgrew thunk and
needed all of the different debouncing and

13
00:00:43.517 --> 00:00:48.571
throttling and different flows that
came with our RJS and Redux-Observable.

14
00:00:48.571 --> 00:00:52.171
But if you're just like,
I need to hit an API and

15
00:00:52.171 --> 00:00:56.880
put the thing on the page,
Redux Thunk is pretty easy.

16
00:00:56.880 --> 00:01:01.035
And I'll kinda show you this because
Redux is gonna abstract a little bit of,

17
00:01:01.035 --> 00:01:04.381
I'm gonna kind of show you just a high
level of, if one wanted to write

18
00:01:04.381 --> 00:01:07.920
the middleware and you should not use
this, you should use the library.

19
00:01:07.920 --> 00:01:12.076
Right, cuz the library has a bunch of
other edge cases that it's dealing with,

20
00:01:12.076 --> 00:01:15.241
but if one wanted to write
the middleware from earlier in this

21
00:01:15.241 --> 00:01:16.748
workshop to deal with this.

22
00:01:16.748 --> 00:01:18.757
For every action that flows through,

23
00:01:18.757 --> 00:01:22.333
if the type of that action is really
a function, call that action and

24
00:01:22.333 --> 00:01:25.175
pass in dispatch and
let it dispatch another action.

25
00:01:25.175 --> 00:01:29.231
So, we can say all right,
I'm gonna dispatch a AJAX call.

26
00:01:29.231 --> 00:01:32.972
And it's gonna be like, cool, that's
not a object with a type or anything.

27
00:01:32.972 --> 00:01:35.863
And it's like, so why don't I call it and
then when it resolves,

28
00:01:35.863 --> 00:01:39.069
when we get back when the promise
resolves, or we hear back from the API,

29
00:01:39.069 --> 00:01:40.821
then we'll dispatch another action.

30
00:01:40.821 --> 00:01:42.802
This is an oversimplified version.

31
00:01:42.802 --> 00:01:47.548
So, basically, Redux Thunk
allows you to dispatch functions

32
00:01:47.548 --> 00:01:50.690
that will eventually dispatch actions.

33
00:01:50.690 --> 00:01:53.601
So you're like,
I don't have the data from the API yet.

34
00:01:53.601 --> 00:01:56.590
Let me dispatch this function that
will get the data from the API.

35
00:01:56.590 --> 00:02:00.698
And then it will go dispatch
the action once we got everything back.

36
00:02:00.698 --> 00:02:03.001
Redux Toolkit kinda papers over this.

37
00:02:03.001 --> 00:02:05.007
It gives you a lot of
other nice things of like,

38
00:02:05.007 --> 00:02:07.231
it will dispatch an action
when it starts loading.

39
00:02:07.231 --> 00:02:09.220
It'll dispatch an action
when it's fulfilled.

40
00:02:09.220 --> 00:02:11.861
It'll dispatch an action when it
errors and stuff along those lines.

41
00:02:11.861 --> 00:02:14.761
So it takes care of a lot
of the boilerplate for you.

42
00:02:14.761 --> 00:02:19.890
So let's go ahead and look at that.

43
00:02:19.890 --> 00:02:26.241
And so I've got this search over here.

44
00:02:26.241 --> 00:02:30.790
And we'll actually do it here.

45
00:02:30.790 --> 00:02:33.191
So we can do in our code editor and
push it up.

46
00:02:33.191 --> 00:02:37.001
Which is I wanna be able to type in
some name and then hit Submit and

47
00:02:37.001 --> 00:02:40.400
go search for
characters within the Star Wars universe.

48
00:02:40.400 --> 00:02:44.571
Right now this isn't wired
up to do anything, so

49
00:02:44.571 --> 00:02:48.250
we're going to put it in place ourselves.

50
00:02:48.250 --> 00:02:49.961
So I've got most of the initial,

51
00:02:49.961 --> 00:02:52.601
this is the chores that we
were just talking about.

52
00:02:52.601 --> 00:02:56.141
I've got most of
the initial slice in place,

53
00:02:56.141 --> 00:02:59.308
where we've got an empty array of data,

54
00:02:59.308 --> 00:03:04.451
the ability to add stuff, but
add what, we haven't hit the API.

55
00:03:04.451 --> 00:03:12.116
And then, yeah, I need to figure
out how to do this asynchronously.

56
00:03:12.116 --> 00:03:16.499
You remember createAction from before,
we were able to make our own actions?

57
00:03:16.499 --> 00:03:21.951
And we used it for
that toggle task in the last example.

58
00:03:21.951 --> 00:03:28.821
There's another helper called
createAsyncThunk, which is a mouthful.

59
00:03:28.821 --> 00:03:32.903
But it's very similar, but it's for
creating asynchronous actions that

60
00:03:32.903 --> 00:03:35.310
eventually will have
the data that we need.

61
00:03:35.310 --> 00:03:41.554
So we'll say, const, I don't know,
fetchCharactersFromAPI.

62
00:03:41.554 --> 00:03:45.002
We want createAsyncThunk, which first,

63
00:03:45.002 --> 00:03:51.050
we're give it the name of the action,
just like we did with createAction.

64
00:03:51.050 --> 00:03:54.056
And the first argument is,
what's the type?

65
00:03:54.056 --> 00:03:59.666
And so we'll say it's characters/,
I don't know, fetchCharacters.

66
00:04:04.344 --> 00:04:07.220
FetchCharacters, sweet.

67
00:04:07.220 --> 00:04:08.950
And then it's gonna
take an async function.

68
00:04:10.310 --> 00:04:11.809
We'll use the async keyword,

69
00:04:11.809 --> 00:04:14.470
cuz it doesn't need to return
a promise at some point.

70
00:04:14.470 --> 00:04:20.190
So it's gonna take some search term
that we get from that input field.

71
00:04:20.190 --> 00:04:23.530
And it's gonna go and
make the AJAX request for us.

72
00:04:23.530 --> 00:04:29.030
So we'll say this is all, we've entered
regular JavaScript at this point.

73
00:04:29.030 --> 00:04:34.465
We'll say, response = await.

74
00:04:34.465 --> 00:04:35.505
We use the fetch API.

75
00:04:35.505 --> 00:04:37.245
You could use Axios.

76
00:04:37.245 --> 00:04:38.485
You could use whatever.

77
00:04:38.485 --> 00:04:41.996
This is just a regular
asynchronous function.

78
00:04:41.996 --> 00:04:44.581
You can use whatever API or
AJAX library you want to use.

79
00:04:44.581 --> 00:04:47.559
You can use jQuery's getJSON,
if you want to.

80
00:04:47.559 --> 00:04:49.317
It doesn't matter to me.

81
00:04:49.317 --> 00:04:53.309
So we're gonna just fetch, I need to
pull in this ENDPOINT real quick.

82
00:04:54.670 --> 00:04:57.638
I gotta type that by hand.

83
00:04:57.638 --> 00:05:02.713
We'll fetch the ENDPOINT plus
whatever the search term was, right?

84
00:05:02.713 --> 00:05:08.764
So if they type in D-A, it'll be this API
plus D-A, which will search the database

85
00:05:08.764 --> 00:05:14.151
for characters that start with letter D-A,
which in Star Wars is a thing.

86
00:05:14.151 --> 00:05:19.210
So we'll await ENDPOINT + searchTerm.

87
00:05:21.695 --> 00:05:24.194
I could lowercase if I wanted to.

88
00:05:24.194 --> 00:05:26.325
I don't think it really matters.

89
00:05:26.325 --> 00:05:30.010
And then with the fetch API,
we do need to take the response object.

90
00:05:32.261 --> 00:05:36.117
And we know that it's gonna
be JSON in this case.

91
00:05:36.117 --> 00:05:39.435
Again, if you're using library like Axios,
you might not have to do all of this, but

92
00:05:39.435 --> 00:05:41.200
we're just use vanilla JavaScript for now.

93
00:05:41.200 --> 00:05:46.963
And then finally, this function will
pause until we hear back from the API.

94
00:05:46.963 --> 00:05:51.538
It will get the response of the,
we can call it result.

95
00:05:51.538 --> 00:05:54.101
We'll call it response.

96
00:05:54.101 --> 00:05:59.637
And if we look, let's hypothetically,
if I go over here,

97
00:05:59.637 --> 00:06:03.641
we can see what the shape
of the API data is.

98
00:06:06.713 --> 00:06:08.351
Give it a second.

99
00:06:11.157 --> 00:06:14.192
I'll start typing as that comes back.

100
00:06:14.192 --> 00:06:17.140
We'll return response.

101
00:06:17.140 --> 00:06:18.431
And I believe it's the results key.

102
00:06:21.340 --> 00:06:24.260
All right, so you can see results,
and it's gonna have a whole

103
00:06:24.260 --> 00:06:28.250
bunch of different characters that
we want to load into the state.

104
00:06:28.250 --> 00:06:32.930
So this is now an action that will
dispatch an API call, wait for it, and

105
00:06:32.930 --> 00:06:36.284
then it is going to then
dispatch action for

106
00:06:36.284 --> 00:06:41.290
us under the hood that we can actually
use synchronously in our redux state.

107
00:06:41.290 --> 00:06:47.710
So it's effectively an action creator
that supports promises, right?

108
00:06:47.710 --> 00:06:51.569
Cuz all of this, once we say,
createAsyncThunk, this asynchronous,

109
00:06:51.569 --> 00:06:54.810
which is mostly doing a regular
fetch request at this point.

110
00:06:54.810 --> 00:06:59.519
It's just whatever we return out of this
promise will be the payload of the action

111
00:06:59.519 --> 00:07:01.122
that is eventually fired.

112
00:07:01.122 --> 00:07:05.058
I think it'll make a little more
sense once we wire this up,

113
00:07:05.058 --> 00:07:08.444
we can actually see it in
the dev tools as well.

114
00:07:08.444 --> 00:07:12.919
So because this is not one of
the ones we're making it outside

115
00:07:12.919 --> 00:07:17.410
of this reducers object,
we do need to add an extra reducer.

116
00:07:20.531 --> 00:07:26.381
And I can use builder, but just to show
you the other syntax, I'll do it here.

117
00:07:26.381 --> 00:07:30.478
Which is we'll just say,
this fetchCharactersFromAPI.fulfilled,

118
00:07:30.478 --> 00:07:35.257
because this is gonna fire off, one, when
it starts the request, the pending one.

119
00:07:35.257 --> 00:07:38.735
So we can show or hide loading.

120
00:07:38.735 --> 00:07:41.170
One when it's fulfilled
when we have the data.

121
00:07:41.170 --> 00:07:43.151
One if there's an error as well.

122
00:07:43.151 --> 00:07:47.190
And here we'll just say, state and action.

123
00:07:49.881 --> 00:07:55.079
And we'll do state.data,
which is where we're

124
00:07:55.079 --> 00:08:00.284
storing stuff,
if you look at the initial state.

125
00:08:00.284 --> 00:08:03.661
And we'll that's the action.payload.

126
00:08:07.442 --> 00:08:12.142
All right, let's see if any of this works.

127
00:08:12.142 --> 00:08:13.672
We'll go back over here.

128
00:08:13.672 --> 00:08:17.348
Open up those tools for the redux ones.

129
00:08:27.111 --> 00:08:32.801
[INAUDIBLE], refresh that real quick.

130
00:08:36.655 --> 00:08:38.658
I know what I'm missing.

131
00:08:38.658 --> 00:08:43.601
You can make all the actions you want, you
can make all the reducers you want, but

132
00:08:43.601 --> 00:08:48.566
if you don't actually put them on to
the buttons, then they don't do anything.

133
00:08:48.566 --> 00:08:50.501
So we gotta handle change.

134
00:08:50.501 --> 00:08:54.224
And here,
did we export that one from earlier?

135
00:08:54.224 --> 00:08:55.372
Let's see, let's export it.

136
00:08:59.284 --> 00:09:01.931
And we'll go into fetchCharacters.

137
00:09:01.931 --> 00:09:04.915
And now, when they submit the form,

138
00:09:04.915 --> 00:09:10.121
we'll do fetchCharactersAPI,
with whatever that value was.

139
00:09:10.121 --> 00:09:11.870
That's a search term in this case.

140
00:09:16.006 --> 00:09:20.743
It's really into capitalizing these
slice names, I don't like it.

141
00:09:20.743 --> 00:09:22.172
All right, so now with the da.

142
00:09:30.540 --> 00:09:32.211
Let's see what's going on here.

143
00:09:35.870 --> 00:09:38.710
We got dispatch, right?

144
00:09:38.710 --> 00:09:43.918
So we'll do, const dispatch.

145
00:09:43.918 --> 00:09:45.409
This is a little bit of a PSA for

146
00:09:45.409 --> 00:09:48.828
why sometimes binding the action
creators does make a lot of sense.

147
00:09:48.828 --> 00:09:52.896
Cuz if you just call the function,
it'll fire that network request, but

148
00:09:52.896 --> 00:09:55.861
you'll never get the promise
actually dispatched.

149
00:09:55.861 --> 00:09:58.401
So we need to dispatch the result of that.

150
00:09:58.401 --> 00:10:00.320
So we'll use dispatch.

151
00:10:00.320 --> 00:10:06.731
And then we will, As well.

152
00:10:06.731 --> 00:10:07.980
All right, third time's a charm.

153
00:10:10.100 --> 00:10:11.476
All right, you can see.

154
00:10:11.476 --> 00:10:15.593
Let's see if I can configure this so
we can actually see the full name.

155
00:10:15.593 --> 00:10:21.442
So it starts off by firing an event called
characters/fetchCharacters/pending.

156
00:10:21.442 --> 00:10:27.212
This means we have fired off the network
request but we haven't heard back yet.

157
00:10:27.212 --> 00:10:32.203
Then, right, we have fulfilled,
which has the data in the payload of

158
00:10:32.203 --> 00:10:36.870
the whatever characters match,
which we then load here as well.

159
00:10:36.870 --> 00:10:40.611
And so with the extra reducers,
we can also listen to the pending event.

160
00:10:40.611 --> 00:10:43.756
And we can decide we're gonna show or
hide loading as well.

161
00:10:48.431 --> 00:10:51.453
Cool, and so what we'll do here is,

162
00:10:51.453 --> 00:10:56.033
without really changing much
in the way of our actions or

163
00:10:56.033 --> 00:11:02.180
anything in the rest of our component,
we can throw in, if it's pending,

164
00:11:05.941 --> 00:11:11.912
We're gonna set loading to true.

165
00:11:11.912 --> 00:11:17.531
When it's fulfilled,
we'll set loading to false.

166
00:11:17.531 --> 00:11:19.631
We'll start out loading as false as well.

167
00:11:24.190 --> 00:11:29.309
So now it'll show loading automatically.

168
00:11:31.092 --> 00:11:37.311
When it comes back, we will then
hide the loading and show the data.

169
00:11:37.311 --> 00:11:42.051
Yoda is apparently the only character
in the Star Wars universe that has

170
00:11:42.051 --> 00:11:43.322
Y-O in this name.

171
00:11:43.322 --> 00:11:45.971
I just learned that literally
right now in front of all of you.

172
00:11:45.971 --> 00:11:50.351
So we can basically have the whole life
cycle of network requests built in and

173
00:11:50.351 --> 00:11:52.570
managed for us by Redux Thunk.

174
00:11:52.570 --> 00:11:54.441
Let's just kinda take a look and

175
00:11:54.441 --> 00:11:57.639
then we'll do one last
exercise together as friends.

176
00:11:57.639 --> 00:12:01.972
Just to kinda tie this all
up a little bit, which is,

177
00:12:01.972 --> 00:12:07.110
we create this in the same way
that we created actions before.

178
00:12:07.110 --> 00:12:09.280
It's again, the first is a string,

179
00:12:09.280 --> 00:12:12.652
what is the name of the action
that we're creating here?

180
00:12:12.652 --> 00:12:15.667
The two distinctions
between create Action,

181
00:12:15.667 --> 00:12:20.764
where we did that toggle task before,
and this one, is, it is an asynchronous

182
00:12:20.764 --> 00:12:26.194
function that's gonna eventually give us
our payload when the promise resolves.

183
00:12:26.194 --> 00:12:29.540
And it's also gonna fire off a pending and
fulfilled version of the action.

184
00:12:29.540 --> 00:12:33.805
So we can manage the lifecycle of when
it leaves and when it comes back and

185
00:12:33.805 --> 00:12:35.239
if it errored, right?

186
00:12:35.239 --> 00:12:38.050
So it's kind of just making
an abstraction on things that you could do

187
00:12:38.050 --> 00:12:39.170
yourself by hand.

188
00:12:39.170 --> 00:12:42.694
Normally, if you were gonna do this
in a regular React application,

189
00:12:42.694 --> 00:12:46.850
you would either in a useEffect, or in
a thunk, or something along those lines.

190
00:12:46.850 --> 00:12:50.042
You would fire off the action saying,
okay, I'm sending it now,

191
00:12:50.042 --> 00:12:51.874
I'm have a network request pending.

192
00:12:51.874 --> 00:12:54.684
I have started to fetch the characters,
right?

193
00:12:54.684 --> 00:12:56.645
You would wait for
the promise to resolve and

194
00:12:56.645 --> 00:12:59.931
then you would dispatch another
action saying, I've gotten them back,

195
00:12:59.931 --> 00:13:03.170
here they are, take down the loading
stuff, so on and so forth, right?

196
00:13:03.170 --> 00:13:06.636
This is basically encapsulating
that lifecycle for you and

197
00:13:06.636 --> 00:13:09.070
making it super easy to work with as well.

