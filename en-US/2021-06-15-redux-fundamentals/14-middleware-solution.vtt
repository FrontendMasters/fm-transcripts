WEBVTT

1
00:00:00.170 --> 00:00:03.810
So our mission was simply just create
a second piece of Middleware predominantly

2
00:00:03.810 --> 00:00:07.195
to see how you can actually chain
multiple pieces of Middleware together.

3
00:00:07.195 --> 00:00:12.570
So they log Middleware, and now we wanted
to make the monitor Middleware as well.

4
00:00:12.570 --> 00:00:15.604
We have some of
the implementation up here so

5
00:00:15.604 --> 00:00:18.970
we can kinda steal a little
piece of that as well.

6
00:00:18.970 --> 00:00:21.025
And so down here we'll do const.

7
00:00:22.820 --> 00:00:27.759
Monitor Middleware,
that'll be against store.

8
00:00:29.772 --> 00:00:36.380
Next and action and listen,
I'm not proud of this.

9
00:00:36.380 --> 00:00:40.986
The way that I remember this is the first
three letters of the word snack.

10
00:00:40.986 --> 00:00:43.410
I don't know if that's helpful to you.

11
00:00:43.410 --> 00:00:48.244
That is how I remember the three which I
think about how much I like snacks and

12
00:00:48.244 --> 00:00:51.101
that is how I know is a store next and
action.

13
00:00:51.101 --> 00:00:54.931
The rest of the letters aren't helpful,
yeah, that's how I remember.

14
00:00:54.931 --> 00:00:57.943
So, in here we would
have our performance and

15
00:00:57.943 --> 00:01:02.555
now instead of this new state,
what we're gonna do is say just next.

16
00:01:04.066 --> 00:01:11.342
Action and
then we will console log at diff.

17
00:01:11.342 --> 00:01:16.544
And then to use multiple Middleware
apply Middleware accepts any number

18
00:01:16.544 --> 00:01:22.011
of arguments, that it will compose
together into one chain of Middleware.

19
00:01:24.570 --> 00:01:27.111
So here, we'll say monitor Middleware.

20
00:01:28.740 --> 00:01:31.021
And now you can see we
are getting both again.

21
00:01:31.021 --> 00:01:34.760
Where we get the performance monitoring
as well as the state changes.

22
00:01:34.760 --> 00:01:39.347
So really all apply Middleware, is this
abstraction over enhancers that involves

23
00:01:39.347 --> 00:01:41.322
less boilerplate for you to write.

24
00:01:41.322 --> 00:01:43.518
And is chainable out of the box and

25
00:01:43.518 --> 00:01:46.902
it creates one enhancer
out of all the Middleware.

26
00:01:46.902 --> 00:01:49.744
And is useful for
kind of either having side effects

27
00:01:49.744 --> 00:01:54.187
around the flow of actions because even
as we said in the very beginning of this.

28
00:01:54.187 --> 00:01:58.590
A reducer is a pure function that
takes two inputs and makes one output.

29
00:01:58.590 --> 00:02:00.792
It should theoretically
not have side effects.

30
00:02:00.792 --> 00:02:03.555
We have all put console logs
inside of our reducers.

31
00:02:03.555 --> 00:02:06.758
But in terms of things you can't
necessarily make a promise,

32
00:02:06.758 --> 00:02:10.280
your hand away to promise and
reduce or anything along those lines.

33
00:02:10.280 --> 00:02:14.750
So Middleware gives you a place where
you can inspect the flow of actions.

34
00:02:14.750 --> 00:02:19.466
You can modify those actions, you change,
replace them and dispatch new actions.

35
00:02:19.466 --> 00:02:23.907
If you did not call next to action
based on some kind of conditional.

36
00:02:23.907 --> 00:02:27.442
It would never make it through the rest
of the Middleware and to the reducer.

37
00:02:27.442 --> 00:02:30.998
Sometimes that's what you want, sometimes
you rely on someone dispatch a function,

38
00:02:30.998 --> 00:02:32.911
you don't wanna make it
all the way to reduce.

39
00:02:32.911 --> 00:02:37.352
So you wanna go make that ajax request, do
whatever wait for the promise to resolve.

40
00:02:37.352 --> 00:02:38.290
Get that result, and

41
00:02:38.290 --> 00:02:41.119
then turn that into the action that
goes to the rest of the chain.

42
00:02:41.119 --> 00:02:42.977
Middleware is the place to do that.

43
00:02:44.077 --> 00:02:48.987
And so that's this kind of common cases
gives you the ability to inspect that

44
00:02:48.987 --> 00:02:49.918
flow as well.

45
00:02:49.918 --> 00:02:54.623
And so that point congratulations,
you can print out a certificate and

46
00:02:54.623 --> 00:02:55.964
put it on your wall.

47
00:02:55.964 --> 00:03:00.210
You now know the entirety
of the Redux API.

48
00:03:00.210 --> 00:03:02.991
That is all we covered
all five of the methods.

49
00:03:02.991 --> 00:03:05.296
We covered all four of
the ones on the store.

50
00:03:05.296 --> 00:03:09.130
We have gone through all that
there is to know about Redux.

51
00:03:09.130 --> 00:03:15.780
The next step for us is to figure out how
to put it into a react application, right?

52
00:03:15.780 --> 00:03:19.803
And so what we'll do is we'll take
really three different approaches.

53
00:03:19.803 --> 00:03:26.592
We'll use hooks to just hook our
Redux store up to react at all right.

54
00:03:26.592 --> 00:03:29.328
And then we'll figure
out how to get state and

55
00:03:29.328 --> 00:03:32.500
dispatch actions from our
components using hooks.

56
00:03:32.500 --> 00:03:35.900
And then we will look at how to do
it using higher order components.

57
00:03:35.900 --> 00:03:39.920
We'll talk a little bit about what
strategy you might want to use and why.

58
00:03:39.920 --> 00:03:43.139
And then finally, we'll take
a look at it using Redux toolkit.

59
00:03:43.139 --> 00:03:45.054
Which will wrap a lot of this up for
us and

60
00:03:45.054 --> 00:03:48.320
theoretically allow you to use
either one of those API's as well.

