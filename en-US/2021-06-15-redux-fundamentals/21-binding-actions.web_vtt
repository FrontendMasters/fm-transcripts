WEBVTT

1
00:00:00.600 --> 00:00:03.809
All right, some little things that
we can do here, which is before.

2
00:00:03.809 --> 00:00:06.052
Here, we have to dispatch every time.

3
00:00:06.052 --> 00:00:08.879
Now, you're cool with this.

4
00:00:08.879 --> 00:00:15.220
The issue where this comes down,
to what seems more maintainable for you.

5
00:00:15.220 --> 00:00:18.990
You can,
dispatch each one of those actions.

6
00:00:18.990 --> 00:00:21.840
You could also theoretically use
something like bind action creators.

7
00:00:21.840 --> 00:00:23.370
If you wanted to.

8
00:00:23.370 --> 00:00:27.002
So you could say for instance.

9
00:00:27.002 --> 00:00:34.574
Because they const actions
just as we did before.

10
00:00:34.574 --> 00:00:39.625
Where we could say bind action creators,

11
00:00:39.625 --> 00:00:45.262
we can pass it increment,
decrement and set.

12
00:00:45.262 --> 00:00:47.243
And give it a copy of that dispatch.

13
00:00:50.241 --> 00:00:55.220
As well, so now we could theoretically
say, if you had better ways to name these.

14
00:00:55.220 --> 00:00:56.133
You could even.

15
00:00:58.500 --> 00:01:01.400
Since it is one dispatch to actually
see another thing, we can do here.

16
00:01:01.400 --> 00:01:04.324
But you could actually just
call them as their functions.

17
00:01:04.324 --> 00:01:06.403
They will automatically dispatch this.

18
00:01:06.403 --> 00:01:09.793
Because they are bound,
as we saw before, applies that actions.

19
00:01:14.840 --> 00:01:16.060
All right, let's see.

20
00:01:16.060 --> 00:01:19.240
Let's make sure, I did the right
balancing of my parentheses.

21
00:01:20.860 --> 00:01:22.830
Missed one, extra one there.

22
00:01:22.830 --> 00:01:25.430
All right, so
now these look like normal functions.

23
00:01:25.430 --> 00:01:28.280
This one is, we still got a fix.

24
00:01:28.280 --> 00:01:33.550
They look like normal functions,
but they behave by dispatching.

25
00:01:33.550 --> 00:01:35.575
So you could theoretically
use these instead.

26
00:01:35.575 --> 00:01:39.510
They hide the fact that, you have to pass
these functions dispatch every time.

27
00:01:39.510 --> 00:01:41.970
It's up to you whether or
not you like this.

28
00:01:41.970 --> 00:01:43.475
The other option is,

29
00:01:43.475 --> 00:01:48.540
you could theoretically pull this
out into your own custom hook.

30
00:01:48.540 --> 00:01:51.756
So you could imagine, something where
you just had use all the actions.

31
00:01:51.756 --> 00:01:54.700
That are automatically bound and
you never think about this again.

32
00:01:54.700 --> 00:01:58.798
And every component, could even use like a
used counter that nestled together all of

33
00:01:58.798 --> 00:02:00.300
this different logic.

34
00:02:00.300 --> 00:02:03.689
Let's just take a look at what
that might look like for a second.

35
00:02:03.689 --> 00:02:07.369
And then, it's definitely like
one of those extensions and

36
00:02:07.369 --> 00:02:10.340
not necessarily I think
that you need to do.

37
00:02:10.340 --> 00:02:14.680
Let's go ahead and let's make one
called used actions for instance.

38
00:02:16.950 --> 00:02:20.260
So use actions is going to be,
a hook that we are going to use.

39
00:02:20.260 --> 00:02:25.060
In this case,
we'll export const use actions.

40
00:02:27.720 --> 00:02:31.300
And we'll talk a little bit
about this in a second.

41
00:02:31.300 --> 00:02:34.000
These actions will say actions.

42
00:02:35.900 --> 00:02:37.320
And what's gonna happen here?

43
00:02:37.320 --> 00:02:39.310
Well, we're gonna have our dispatch,
right?

44
00:02:40.750 --> 00:02:43.031
Because we're gonna bind
everything to this dispatch.

45
00:02:46.390 --> 00:02:49.322
Then we are going to say.

46
00:02:54.540 --> 00:02:57.070
With all the actions and then dispatch.

47
00:02:59.870 --> 00:03:03.591
So now you can theoretically pull
this out any way you want it to.

48
00:03:03.591 --> 00:03:06.550
We can pull this into the counter.

49
00:03:06.550 --> 00:03:12.270
And we could say, instead of dispatch now,

50
00:03:12.270 --> 00:03:17.841
we could say increment decrement and set,

51
00:03:29.761 --> 00:03:31.360
Shall we just call this actions right now?

52
00:03:36.650 --> 00:03:38.730
Called actions,
we get rid of this and this.

53
00:03:42.840 --> 00:03:44.610
And so these will be ones that are.

54
00:03:44.610 --> 00:03:47.740
These will automatically
bind action creators for us.

55
00:03:47.740 --> 00:03:51.898
The other option is,
we could theoretically take this logic and

56
00:03:51.898 --> 00:03:53.670
make a use counter as well.

57
00:03:53.670 --> 00:03:54.280
So let's try that out.

58
00:03:58.225 --> 00:04:00.356
And basically make reusable logic, for

59
00:04:00.356 --> 00:04:03.560
dealing with our counter
anywhere we want our application.

60
00:04:03.560 --> 00:04:07.464
So he'll make a custom hook and we'll say.

61
00:04:09.087 --> 00:04:14.265
Export const used counter.

62
00:04:18.071 --> 00:04:21.351
And this is going to pull in our.

63
00:04:26.262 --> 00:04:27.762
Use selector.

64
00:04:27.762 --> 00:04:30.019
We're gonna grab state.

65
00:04:30.019 --> 00:04:32.648
We'll say state account.

66
00:04:32.648 --> 00:04:39.624
And we'll say our actions.

67
00:04:39.624 --> 00:04:42.991
Equals use actions.

68
00:04:42.991 --> 00:04:49.590
And we'll pass it, increment,
decrement and set.

69
00:04:52.743 --> 00:04:54.639
Pull these.

70
00:04:57.920 --> 00:05:00.330
Their keys without auto encoding.

71
00:05:00.330 --> 00:05:03.895
Increment, decrement and set.

72
00:05:03.895 --> 00:05:06.001
Where we'll pull those in,
from our actions as well.

73
00:05:12.905 --> 00:05:15.132
./actions.

74
00:05:15.132 --> 00:05:21.019
And then we can just
return all of this out.

75
00:05:22.480 --> 00:05:24.607
So as they count.

76
00:05:24.607 --> 00:05:30.542
And all of our actions and
then in the counter.

77
00:05:30.542 --> 00:05:35.369
You can get rid of all of this now,

78
00:05:35.369 --> 00:05:42.622
we'll say count increment,
decrement and set.

79
00:05:48.753 --> 00:05:52.723
And now we don't even need to
put it on an actions object,

80
00:05:52.723 --> 00:05:55.220
cause we'll get that off the hook.

81
00:05:55.220 --> 00:05:58.273
So now, yeah, this is using Redux,
under the hood.

82
00:05:58.273 --> 00:06:01.044
And it's using use-selector and
use dispatch.

83
00:06:01.044 --> 00:06:04.232
We've just wrapped that
all in a custom hook,

84
00:06:04.232 --> 00:06:06.860
that encapsulates all of that for us.

85
00:06:06.860 --> 00:06:09.650
So if you needed to change from
Redux to something else later.

86
00:06:09.650 --> 00:06:12.300
You can simply pull in
everything like this as well.

87
00:06:12.300 --> 00:06:15.200
Let's just verify that works, cause a lot
of coding without a lot of checking.

88
00:06:16.541 --> 00:06:18.603
And everything still works.

89
00:06:18.603 --> 00:06:21.810
Incrementing, decrementing and resetting.

90
00:06:21.810 --> 00:06:25.512
The one further thing that we can do,
is in our use-actions.

91
00:06:25.512 --> 00:06:28.165
Is action should always
be the same object.

92
00:06:28.165 --> 00:06:31.200
Dispatch we know as
the same object as well.

93
00:06:31.200 --> 00:06:32.621
So we could say.

94
00:06:32.621 --> 00:06:35.734
We could pull in.

95
00:06:45.000 --> 00:06:48.249
We could use memo on that, so
that we get a memorize version as well.

96
00:06:48.249 --> 00:06:50.460
Saying as long as you get
back in the same actions.

97
00:06:50.460 --> 00:06:54.243
And the same dispatch, you don't
need to generate that object again.

98
00:06:54.243 --> 00:06:56.524
Every time.

99
00:07:00.580 --> 00:07:01.901
Yep.

100
00:07:01.901 --> 00:07:05.190
All right, cool.

101
00:07:05.190 --> 00:07:11.420
And that actually creates our, at this
point we have predominantly hooked up our.

102
00:07:11.420 --> 00:07:16.330
React or redux store,
to react application using hooks.

103
00:07:16.330 --> 00:07:17.230
We're going to take a break.

104
00:07:17.230 --> 00:07:18.126
And when we come back,

105
00:07:18.126 --> 00:07:20.590
we're gonna look how to do it
using higher order components.

106
00:07:20.590 --> 00:07:23.657
We'll talk a little bit about
some of the differences.

107
00:07:23.657 --> 00:07:26.621
And why that you might
use either one as well.

108
00:07:26.621 --> 00:07:29.318
We have one quick issue
that we need to solve for.

109
00:07:29.318 --> 00:07:31.357
Which is we have this used memo,

110
00:07:31.357 --> 00:07:35.510
but we actually have to give
it a function to call as well.

111
00:07:35.510 --> 00:07:38.729
And that will actually go ahead,
and get us to the point,

112
00:07:38.729 --> 00:07:42.840
where we actually have the used memo
working the way that we expect it to.

