WEBVTT

1
00:00:00.000 --> 00:00:03.806
So our mission was to create a log
enhancer that behaves a lot like

2
00:00:03.806 --> 00:00:07.206
the monitor enhancer, but
instead of monitoring logs.

3
00:00:07.206 --> 00:00:11.605
Did anyone wanna figure this out,
do you wanna walk through it together?

4
00:00:11.605 --> 00:00:15.055
It's kind of like a little bit of a
swapping exercise here as well, but it's,

5
00:00:15.055 --> 00:00:16.989
again, to kind of just
get our hands dirty,

6
00:00:16.989 --> 00:00:19.530
get some muscle memory around
some of this stuff as well.

7
00:00:22.562 --> 00:00:23.475
Did we have a name that we liked?

8
00:00:23.475 --> 00:00:24.753
What did we call our log enhancer?

9
00:00:24.753 --> 00:00:27.685
I'm not good at naming things.

10
00:00:27.685 --> 00:00:28.661
That and cache invalidation.

11
00:00:32.655 --> 00:00:36.623
Call it logEnhancer, you like logEnhancer?

12
00:00:36.623 --> 00:00:40.502
Give me collective nod, all right.

13
00:00:40.502 --> 00:00:42.422
That's good,
cuz that's what I had in my notes.

14
00:00:42.422 --> 00:00:47.502
So, again, it starts as a function
that will take createStore and

15
00:00:47.502 --> 00:00:51.143
returns a function that
will take all the rest.

16
00:00:51.143 --> 00:00:56.064
reducer, initialState and enhancer

17
00:00:58.475 --> 00:01:02.531
Neat, and then just whatever
the kind of new reducer,

18
00:01:02.531 --> 00:01:07.560
we're using effectively closures
in JavaScript to make a function

19
00:01:07.560 --> 00:01:12.163
that's wrapping whatever reducer
function they passed in.

20
00:01:12.163 --> 00:01:19.667
So, in this case,
we'll say const logReducer.

21
00:01:19.667 --> 00:01:21.311
That seems consistent, at least.

22
00:01:21.311 --> 00:01:26.036
And that will have the same
API as any other reducer.

23
00:01:26.036 --> 00:01:32.243
And it will go ahead and
we can say, console.log.

24
00:01:36.000 --> 00:01:40.398
We will console log the state.

25
00:01:40.398 --> 00:01:47.527
Let's call it, old state.

26
00:01:50.583 --> 00:01:56.084
We'll actually call the real reducer now,
With the state and action.

27
00:01:56.084 --> 00:02:04.193
And then we'll console.log
new state with the state.

28
00:02:04.193 --> 00:02:06.890
And just for fun, I'm gonna add
the action to each of those as well.

29
00:02:06.890 --> 00:02:11.250
So if we had multiple actions
within our application,

30
00:02:11.250 --> 00:02:15.242
we could see which action
triggered that change.

31
00:02:15.242 --> 00:02:18.762
And now all we'd have to do
is return that new state.

32
00:02:24.069 --> 00:02:25.351
Let's actually fix that.

33
00:02:25.351 --> 00:02:26.325
So we're gonna call the reducer.

34
00:02:26.325 --> 00:02:31.916
I'm gonna store the result of
that function into newState.

35
00:02:31.916 --> 00:02:32.771
And then we'll return it
out of our wrapped reducer.

36
00:02:32.771 --> 00:02:36.921
And now we just return
the real createStore.

37
00:02:36.921 --> 00:02:42.909
We'll finally call it after we intercepted
it with our logReducer instead,

38
00:02:42.909 --> 00:02:46.330
which wraps whatever reducer they gave us.

39
00:02:46.330 --> 00:02:48.853
The initialState, if any.

40
00:02:48.853 --> 00:02:51.410
And the enhancer, if any.

41
00:02:51.410 --> 00:02:53.102
&gt;&gt; I think you also want to
log the newState on line 29.

42
00:02:53.102 --> 00:02:58.210
&gt;&gt; Yep, Otherwise we'll
just say it's the newState.

43
00:02:58.210 --> 00:03:03.126
We want to store it, and then we'll
log it, and then we'll return it.

44
00:03:03.126 --> 00:03:04.102
So we could swap it out.

45
00:03:05.815 --> 00:03:12.782
And you can see that now we get
an initial action that flows through.

46
00:03:12.782 --> 00:03:16.477
Remember how we had state equals and
the default argument?

47
00:03:16.477 --> 00:03:18.789
This kind of initialAction will go and

48
00:03:18.789 --> 00:03:22.121
trigger all of the default
arguments in our reducers.

49
00:03:22.121 --> 00:03:26.337
And then you can see that as we
pass through the old state and

50
00:03:26.337 --> 00:03:31.329
the new state, in this case,
it is actually undefined because if you

51
00:03:31.329 --> 00:03:35.914
look at our reducer again,
it's super, simple in this case.

52
00:03:40.381 --> 00:03:46.332
We'll say like,
You can see it in there as well.

53
00:03:46.332 --> 00:03:51.719
And so now we have a logEnhancer and
a monitorEnhancer.

54
00:03:51.719 --> 00:03:54.013
The problem is that there's
one enhancer argument.

55
00:03:54.013 --> 00:03:58.821
So let's say hypothetically I have
a situation where I wanna use

56
00:03:58.821 --> 00:04:03.103
two enhancers but
createStore only takes one enhancer.

57
00:04:03.103 --> 00:04:06.116
And I wanna pass createStore
to both of those enhancers.

58
00:04:06.116 --> 00:04:09.222
Does anyone have a way
that I could do that?

59
00:04:09.222 --> 00:04:12.719
&gt;&gt; Compose function.

60
00:04:12.719 --> 00:04:14.877
&gt;&gt; Yes, compose, perfect, right?

61
00:04:14.877 --> 00:04:22.331
And so what I could in this case do is I
could compose, and I'll do my logEnhancer.

62
00:04:24.613 --> 00:04:28.101
LogEnhancer, and

63
00:04:28.101 --> 00:04:33.552
my monitorEnhancer as well.

64
00:04:33.552 --> 00:04:34.928
And now you can see that
both are happening.

65
00:04:34.928 --> 00:04:38.268
So compose, again,
you could write compose yourself,

66
00:04:38.268 --> 00:04:41.896
you could use compose form lodash or
pipe or flow, whatever.

67
00:04:41.896 --> 00:04:44.160
It's just there to be helpful to you.

