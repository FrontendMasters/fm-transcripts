WEBVTT

1
00:00:00.870 --> 00:00:05.727
All right, we covered most of
the major surface area of the store,

2
00:00:05.727 --> 00:00:11.301
which we saw that gets the state,
replace reducer, swaps out the reducer.

3
00:00:11.301 --> 00:00:14.191
Dispatch sends actions into
the reducer to do battle

4
00:00:14.191 --> 00:00:16.628
with the current state of the application.

5
00:00:16.628 --> 00:00:19.210
We have one more and that is subscribe.

6
00:00:19.210 --> 00:00:24.999
If you've ever used an event listener
on the DOM, or event emitter in node,

7
00:00:24.999 --> 00:00:30.320
it's basically a way to say,
I care every time the state changes.

8
00:00:30.320 --> 00:00:33.614
Here is a function that I
will give you to go ahead.

9
00:00:33.614 --> 00:00:37.090
Please call this function
every time the state changes.

10
00:00:37.090 --> 00:00:40.740
So we can go ahead and we'll make a,
I don't know, a subscriber.

11
00:00:42.970 --> 00:00:48.982
And that subscriber is
going to be a function and

12
00:00:48.982 --> 00:00:52.296
it'll just console log,

13
00:00:54.630 --> 00:00:58.730
Subscriber, and we'll do stored getState.

14
00:01:01.940 --> 00:01:06.034
And we'll call the value as well,
or we can do the whole object, so

15
00:01:06.034 --> 00:01:07.220
put that there.

16
00:01:07.220 --> 00:01:11.248
And now instead of using
this console log here,

17
00:01:11.248 --> 00:01:15.589
what we'll do is,
we'll say store.subscribe.

18
00:01:21.154 --> 00:01:25.468
Subscribe, and
we'll give it the subscriber.

19
00:01:29.116 --> 00:01:34.112
And you can kinda see, code sandbox
is loading a few times here, but

20
00:01:34.112 --> 00:01:35.260
we add a space.

21
00:01:35.260 --> 00:01:40.228
It gets loaded, we call increment twice,

22
00:01:40.228 --> 00:01:46.032
it's loading each time,
I can say add 1000.

23
00:01:46.032 --> 00:01:48.540
And you can see that every
time the state changes,

24
00:01:48.540 --> 00:01:51.400
then all of a sudden
we call that function.

25
00:01:51.400 --> 00:01:52.990
Why could this be useful?

26
00:01:52.990 --> 00:01:54.220
I don't know.
Let's say you're building

27
00:01:54.220 --> 00:01:54.920
a react application.

28
00:01:54.920 --> 00:01:58.540
You wanna pass new props
every time the state changes.

29
00:01:58.540 --> 00:02:01.400
Cool, react redux can
subscribe to the store.

30
00:02:01.400 --> 00:02:04.803
And we might have different
mechanisms whether the hooks or

31
00:02:04.803 --> 00:02:09.170
the connect API to figure out what
prompts the given react component needs.

32
00:02:09.170 --> 00:02:13.300
And we'd be like cool,
the state changed, neat.

33
00:02:13.300 --> 00:02:16.021
Here's what that means for
the props for these components,

34
00:02:16.021 --> 00:02:19.190
let's pass in new props and
keep everything up to date.

35
00:02:19.190 --> 00:02:23.450
So at this point, we've got the entire
redux store pretty much covered.

36
00:02:23.450 --> 00:02:26.720
Right, we do have a few more of
those helper methods to look at.

37
00:02:28.410 --> 00:02:33.090
One is this bind action creators
that we can kind of pull in.

38
00:02:33.090 --> 00:02:38.732
And we saw that an action creator
is either one of these functions,

39
00:02:38.732 --> 00:02:44.610
they are simply functions that
create actions, seems legitimate.

40
00:02:44.610 --> 00:02:49.226
And so bind action creators just
gives us a way to do some shorthand.

41
00:02:49.226 --> 00:02:53.126
Here we kept having to say, store dispatch
increment, store dispath increment,

42
00:02:53.126 --> 00:02:53.860
add 1000.

43
00:02:53.860 --> 00:02:57.864
What if we just wanted to make functions
that were bound to the dispatcher that we

44
00:02:57.864 --> 00:02:58.775
could just call.

45
00:02:58.775 --> 00:03:01.682
And that's where bind
action creators comes in.

46
00:03:01.682 --> 00:03:06.054
So we could say something
like const actions, and

47
00:03:06.054 --> 00:03:09.290
that could be bindAction creators.

48
00:03:10.310 --> 00:03:12.925
I'm gonna turn off this.

49
00:03:12.925 --> 00:03:17.890
Let's get rid of that as well, so
we don't keep seeing that in the console.

50
00:03:17.890 --> 00:03:20.801
All right, so
we can say bindActionCreators and

51
00:03:20.801 --> 00:03:22.507
we can give it some actions.

52
00:03:22.507 --> 00:03:27.395
We can say increment,
we're just putting them in an object.

53
00:03:27.395 --> 00:03:33.789
And if we look,
if we console log actions now, We can

54
00:03:33.789 --> 00:03:37.833
see that we have an object that has the
keys that we've passed in plus functions,

55
00:03:37.833 --> 00:03:40.160
but these will automatically
call dispatch.

56
00:03:40.160 --> 00:03:44.532
Now we can say add 1000 increment.

57
00:03:47.045 --> 00:03:56.215
And now we can say console.log,
store.getState.

58
00:03:56.215 --> 00:04:01.464
Let's figure out what our issue is.

59
00:04:01.464 --> 00:04:05.680
I figured out my issue, which I bound
them, but what did I bind them to?

60
00:04:05.680 --> 00:04:06.740
Nothing.

61
00:04:06.740 --> 00:04:11.324
So the first argument is the object full
of all of the different action creators

62
00:04:11.324 --> 00:04:12.990
that you wanna bind.

63
00:04:12.990 --> 00:04:15.915
And the second one is what
you wanna bind it to,

64
00:04:15.915 --> 00:04:18.475
which in this case is store.dispatch.

65
00:04:18.475 --> 00:04:23.527
They're on this object, but if I just call
the functions, they're not there as well,

66
00:04:23.527 --> 00:04:30.820
so I could, There we go.

67
00:04:30.820 --> 00:04:32.679
So just JavaScript at that point.

68
00:04:32.679 --> 00:04:37.300
Made some small boo-boos there, which is
fine, let's just review this for a second.

69
00:04:38.940 --> 00:04:42.930
BindActionCreators takes an object full
of functions with keys and values, and

70
00:04:42.930 --> 00:04:45.050
gives you whatever you wanna bind them to.

71
00:04:45.050 --> 00:04:48.281
And now instead of saying dispatch and
having to call the function,

72
00:04:48.281 --> 00:04:50.385
they're put onto this JavaScript object.

73
00:04:50.385 --> 00:04:54.041
If they didn't have the same name,
I could also separate them out as well.

74
00:04:54.041 --> 00:04:58.053
And now just calling the function
automatically takes the action creator and

75
00:04:58.053 --> 00:04:59.665
passes it to dispatch.

76
00:04:59.665 --> 00:05:04.607
If you really wanted to, if bind action
creators wasn't in there for some reason,

77
00:05:04.607 --> 00:05:07.220
and you really wanted
to write it yourself,

78
00:05:07.220 --> 00:05:11.775
this kinda goes back to that answer
from before that we saw, I could.

79
00:05:11.775 --> 00:05:14.862
It's very similar and
probably under the hood just using,

80
00:05:14.862 --> 00:05:17.090
let's give it just new names for a second.

81
00:05:18.490 --> 00:05:23.943
Where we could say
something along the lines

82
00:05:23.943 --> 00:05:28.512
of compose(store.dispatch) and

83
00:05:28.512 --> 00:05:34.120
we can make either one
of them using compose.

84
00:05:34.120 --> 00:05:39.846
Let's do that real quick, Right,

85
00:05:39.846 --> 00:05:42.882
cuz we saw before that we take
the value of the first object,

86
00:05:42.882 --> 00:05:47.340
which is the action that we get and we're
immediately passing it to dispatch, right?

87
00:05:47.340 --> 00:05:51.647
And so if I wanted to do a bunch of them,
as we saw before,

88
00:05:51.647 --> 00:05:54.509
I could just simply take increment,

89
00:05:58.495 --> 00:06:02.249
And add, and map through them,

90
00:06:05.636 --> 00:06:10.787
And just say store.dispatch,

91
00:06:10.787 --> 00:06:16.710
whatever the function was, right?

92
00:06:16.710 --> 00:06:23.160
This is a very simple version of what
bindActionCreators is doing for us.

93
00:06:23.160 --> 00:06:26.305
But we don't have to do
this because it is again,

94
00:06:26.305 --> 00:06:31.560
one more of those little helper methods
that are available to us on react.

95
00:06:31.560 --> 00:06:35.160
And we'll even see that we can use this,
it's on redox rather.

96
00:06:35.160 --> 00:06:38.832
We'll see that we can
use this by ourselves.

97
00:06:38.832 --> 00:06:42.928
But also things in react redux a few
places, we'll be able to kind of use this

98
00:06:42.928 --> 00:06:46.706
for us under the hood, and give us
different functions that we can call

99
00:06:46.706 --> 00:06:51.144
that can immediately talk to the store in
some very simplified use cases, right?

100
00:06:51.144 --> 00:06:55.840
So it's also used under the hood
with a few libraries as well.

101
00:06:55.840 --> 00:06:58.480
The question was,
when we have the subscriber, actually,

102
00:06:58.480 --> 00:07:01.348
we can see it right here,
how do we know what values have changed?

103
00:07:01.348 --> 00:07:05.900
You don't necessarily know which
exact values have changed.

104
00:07:05.900 --> 00:07:10.570
You can get the entire state
that's within the store, right?

105
00:07:10.570 --> 00:07:14.963
Now, the closer you're using the
primitives like strings and numbers and

106
00:07:14.963 --> 00:07:19.929
Booleans, the easier it is to see, are
they different, so on and so forth, right?

107
00:07:19.929 --> 00:07:23.401
One of the things that we wanna do when
we're manipulating the state which is,

108
00:07:23.401 --> 00:07:28.000
I kind of said this in that slide earlier,
which is if you change it, you replace it.

109
00:07:28.000 --> 00:07:31.171
However, that doesn't mean you need to
change every object that you're not

110
00:07:31.171 --> 00:07:32.017
touching, right?

111
00:07:32.017 --> 00:07:36.094
A lot of times we wanna make sure that, or
if we don't necessarily add something to

112
00:07:36.094 --> 00:07:39.758
an array or change a property on
an object, we can return the same object,

113
00:07:39.758 --> 00:07:43.150
which means they're gonna be
referentially equal in JavaScript.

114
00:07:43.150 --> 00:07:46.862
But in the actual subscriber,
we'll get the entire new object.

115
00:07:46.862 --> 00:07:50.004
The parts that have changed will
be referentially different cuz

116
00:07:50.004 --> 00:07:51.210
we replaced them.

117
00:07:51.210 --> 00:07:55.580
And the parts that haven't changed will
equal their previous versions as well.

118
00:07:55.580 --> 00:08:01.430
So when we take pieces of that state tree,
and we pass it into our react components,

119
00:08:01.430 --> 00:08:04.790
either react itself can be like,
okay, cool.

120
00:08:05.880 --> 00:08:08.921
The number for our counter was two.

121
00:08:08.921 --> 00:08:13.790
If it was also two last time, it hasn't
changed, don't rerender the component.

122
00:08:13.790 --> 00:08:17.090
Okay, it's now three,
I should rerender the component itself.

123
00:08:17.090 --> 00:08:20.746
So as we begin to break stuff up, react
will actually handle a lot of that for us,

124
00:08:20.746 --> 00:08:23.380
so we don't necessarily need
to worry about it too much.

