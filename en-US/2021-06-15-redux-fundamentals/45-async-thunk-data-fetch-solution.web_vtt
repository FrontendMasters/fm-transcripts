WEBVTT

1
00:00:00.158 --> 00:00:06.740
So actually let's review what
our mission is here as well.

2
00:00:06.740 --> 00:00:09.725
So we just looked at in
the star wars example,

3
00:00:09.725 --> 00:00:14.451
we have most of Rio toolkit wired up,
we just needed to add the API pace.

4
00:00:14.451 --> 00:00:17.354
This is a little bit
more of a boilerplate.

5
00:00:17.354 --> 00:00:20.403
We do have a fake API in this case.

6
00:00:20.403 --> 00:00:24.654
In the utilities folder, there is this
Fetch Dog Fact, which is gonna read from

7
00:00:24.654 --> 00:00:29.043
this data and shuffle through and just
grab however many that we're looking for.

8
00:00:29.043 --> 00:00:33.998
So this is pretending to
be an API on our behalf.

9
00:00:33.998 --> 00:00:38.019
But we'll kind of get us most of the way.

10
00:00:38.019 --> 00:00:41.384
There it will return astoundingly fast.

11
00:00:41.384 --> 00:00:45.246
Since it's not real,
versus our real network from earlier.

12
00:00:45.246 --> 00:00:49.852
So really we just wanna step
through the pieces of wiring up

13
00:00:49.852 --> 00:00:52.391
a slice around these dog facts.

14
00:00:52.391 --> 00:00:55.480
And just kinda see it
from start to finish and

15
00:00:55.480 --> 00:00:58.916
what we did with the humans
in the tasks earlier.

16
00:00:58.916 --> 00:01:03.017
And wire it up with the asynchronous

17
00:01:03.017 --> 00:01:07.944
stuff we just saw with
the star wars piece.

18
00:01:07.944 --> 00:01:10.324
So, we'll go ahead, and
we'll implement that, and

19
00:01:10.324 --> 00:01:12.045
then we'll work through it together.

20
00:01:12.045 --> 00:01:16.168
So now we want to create a new slice,
that makes a lot of sense.

21
00:01:16.168 --> 00:01:21.911
So, we'll call it,
dog facts slice, it's up to you.

22
00:01:21.911 --> 00:01:26.560
Dog facts, no, I like facts slice.

23
00:01:26.560 --> 00:01:31.930
So factSlice.js, and
well I will move that into my store.

24
00:01:31.930 --> 00:01:33.366
And here we're gonna say,

25
00:01:39.414 --> 00:01:44.758
Let's go ahead and we'll say const

26
00:01:44.758 --> 00:01:49.574
dogSlice equals createSlice.

27
00:01:49.574 --> 00:01:50.446
And what do we know?

28
00:01:50.446 --> 00:01:59.076
We know that this might be our,
Let's call it our facts.

29
00:01:59.076 --> 00:02:03.557
We'll say that the name
here is facts in this case.

30
00:02:03.557 --> 00:02:09.288
We'll go get that kinda in place as well.

31
00:02:09.288 --> 00:02:16.769
So we'll say name is facts, initialState.

32
00:02:16.769 --> 00:02:21.987
We'll just make it an empty array.

33
00:02:21.987 --> 00:02:26.143
Now this one is really only
has the asynchronous action.

34
00:02:26.143 --> 00:02:30.505
So we'll get to wiring up
the rest of that momentarily, but

35
00:02:30.505 --> 00:02:35.051
we might say that let's go and
we'll create our async thunk.

36
00:02:39.170 --> 00:02:49.152
So let's say fetchDogFactsFromAPI.

37
00:02:55.168 --> 00:02:59.842
And we'll say that this
is going to be facts/

38
00:02:59.842 --> 00:03:04.403
fetchFacts you can call whatever you want.

39
00:03:06.475 --> 00:03:11.478
And we know that that's gonna take
the count, how many we're looking for?

40
00:03:14.274 --> 00:03:18.398
If I look in utilities,
I can see that it is called fetchDogFacts.

41
00:03:18.398 --> 00:03:23.759
Which is the only reason I named this
one a little bit longer of a name.

42
00:03:23.759 --> 00:03:29.002
And we'll say facts equals await and

43
00:03:29.002 --> 00:03:32.892
whatever the count is, and

44
00:03:32.892 --> 00:03:38.653
then we will return return those facts.

45
00:03:38.653 --> 00:03:41.212
So, that will be in the action payload.

46
00:03:41.212 --> 00:03:46.534
Let's go ahead, and
before we even do anything with the state.

47
00:03:46.534 --> 00:03:49.163
Let's go ahead and
just try to use this and

48
00:03:49.163 --> 00:03:52.405
see what we're going to
get in the actual console.

49
00:03:52.405 --> 00:03:57.025
So, I'm gonna create a new window over
here that we'll look at in a second.

50
00:04:00.001 --> 00:04:03.124
Go over to Redux.

51
00:04:03.124 --> 00:04:04.763
You can see that all of this is in place.

52
00:04:04.763 --> 00:04:07.392
I'll give myself a little
bit more room here as well.

53
00:04:07.392 --> 00:04:11.347
Let's wire it on to the button.

54
00:04:11.347 --> 00:04:15.730
So we'll go into our components
on the DogFactsForm.

55
00:04:15.730 --> 00:04:17.580
We've got dispatched,
it's never used here.

56
00:04:17.580 --> 00:04:19.400
Let's go ahead and use it.

57
00:04:19.400 --> 00:04:22.370
So we'll say handle submit.

58
00:04:22.370 --> 00:04:29.268
When it's been submitted,
we'll say, Dispatch,

59
00:04:29.268 --> 00:04:35.210
fetchDogFactsFromApi and
then whatever the value is here.

60
00:04:38.115 --> 00:04:43.354
Great, and so I'm gonna go and
see if that works for us.

61
00:04:43.354 --> 00:04:46.058
You can see it fires appending
it fires the fulfilled.

62
00:04:46.058 --> 00:04:48.725
Now we don't do anything with that yet.

63
00:04:48.725 --> 00:04:50.427
We have not hooked it up to our store.

64
00:04:50.427 --> 00:04:52.980
We have not updated any of the reducers,
but

65
00:04:52.980 --> 00:04:56.919
you can see the actual thunk itself
is just gonna fire these events.

66
00:04:56.919 --> 00:04:58.448
And what an event is fired and

67
00:04:58.448 --> 00:05:03.433
no one's listening kind of Eric's question
earlier then what happens, nothing, right?

68
00:05:03.433 --> 00:05:05.212
We are firing events.

69
00:05:05.212 --> 00:05:06.726
Nothing really matters.

70
00:05:06.726 --> 00:05:08.287
It's just kinda how
we're dispatching them.

71
00:05:08.287 --> 00:05:10.888
There is not a single reduce in
the world that cares about them.

72
00:05:10.888 --> 00:05:15.069
So they are just landing literally,
literally nowhere.

73
00:05:15.069 --> 00:05:19.778
So we'll go ahead and
let's get the rest of that working here.

74
00:05:19.778 --> 00:05:24.388
So, okay, what would it look like
to update that in our state?

75
00:05:24.388 --> 00:05:31.576
Well, we can do that in our Slice,
where we'll say extraReducers.

76
00:05:31.576 --> 00:05:33.274
And what we want is this.

77
00:05:35.431 --> 00:05:36.796
We want that to be an object.

78
00:05:38.972 --> 00:05:45.623
We'll say fetchDogFactsFromApi.fulfilled.

79
00:05:45.623 --> 00:05:51.075
And if that happens of the state and
the action.

80
00:05:55.250 --> 00:06:02.402
And will say state equals I think
it's an array of facts we'll see.

81
00:06:02.402 --> 00:06:09.558
Yeah concise, Action.payload,

82
00:06:09.558 --> 00:06:14.877
and then we just need to wire
up this slice into our store.

83
00:06:14.877 --> 00:06:16.151
So we'll export this as well.

84
00:06:26.474 --> 00:06:31.163
And we're gonna use that combined
reducers in this case will say that,

85
00:06:37.013 --> 00:06:39.832
That should mostly get
wired up in this case.

86
00:06:44.907 --> 00:06:46.046
Let's see what we got.

87
00:06:53.069 --> 00:06:57.456
Filled, let's see what
happened to our state.

88
00:06:57.456 --> 00:06:59.452
We're not in there yet.

89
00:06:59.452 --> 00:07:03.029
The payload was the array.

90
00:07:03.029 --> 00:07:05.392
So we'll take a look one second.

91
00:07:05.392 --> 00:07:07.462
But yeah, we didn't say didn't change.

92
00:07:07.462 --> 00:07:08.038
We got the Action back.

93
00:07:08.038 --> 00:07:10.219
We can take a look at it,
but nothing changed.

94
00:07:10.219 --> 00:07:13.640
And so still what we got there it is.

95
00:07:13.640 --> 00:07:17.320
All right, so the issue it was
just a little bit of an emergent,

96
00:07:17.320 --> 00:07:20.110
which I think is super
interesting to call out.

97
00:07:20.110 --> 00:07:21.847
So state is the draft state.

98
00:07:21.847 --> 00:07:23.233
I can modify it, right?

99
00:07:23.233 --> 00:07:26.972
If I modify it, I will then begin
to apply the changes to it.

100
00:07:26.972 --> 00:07:32.765
But if I outright replace it, that's
not what comes out of the MapReduce.

101
00:07:32.765 --> 00:07:35.233
So when I said state
equals is action.payload.

102
00:07:35.233 --> 00:07:39.256
We threw away the draft state which
was a compared to the old state.

103
00:07:39.256 --> 00:07:42.117
And we replaced with
the action payload versus by

104
00:07:42.117 --> 00:07:45.410
just return that wholesale
that is still a fair object.

105
00:07:45.410 --> 00:07:52.138
If this became than 7 array we made

106
00:07:52.138 --> 00:07:57.242
this facts is the array and

107
00:07:57.242 --> 00:08:01.191
loading was false.

108
00:08:01.191 --> 00:08:07.265
And then we said,
state.facts equals action.payload.

109
00:08:07.265 --> 00:08:10.045
We wouldn't be wholesale
throwing away the state object.

110
00:08:10.045 --> 00:08:13.949
We would just simply be mutating it, which
would then go through the draft process

111
00:08:13.949 --> 00:08:15.712
with Emmer instead of replacing it.

112
00:08:15.712 --> 00:08:19.289
Now, that's just not how the rest
of the components are wired up.

113
00:08:19.289 --> 00:08:21.692
So if I just return the array,

114
00:08:21.692 --> 00:08:26.318
just like we did with the items
in the very first example.

115
00:08:26.318 --> 00:08:29.119
That will actually work, and

116
00:08:29.119 --> 00:08:34.285
it will be new state that will
work in this case as well.

117
00:08:34.285 --> 00:08:38.172
So a lot of what redux toolkit gives us
is abstractions are like is bringing in

118
00:08:38.172 --> 00:08:39.460
everything that we saw.

119
00:08:39.460 --> 00:08:42.815
It's making our action
creators that we made by hand.

120
00:08:42.815 --> 00:08:47.086
It is bringing the action
creators that we made by hand.

121
00:08:47.086 --> 00:08:52.359
It's automatically associating reducer
conditionals with those action types.

122
00:08:52.359 --> 00:08:57.165
It's normalizing the type of the actions
as well It is given is wiring in

123
00:08:57.165 --> 00:09:02.389
the Redux Dev Tools is basically doing
a lot of the boilerplate on our behalf.

124
00:09:02.389 --> 00:09:03.957
But however, I do think that, for

125
00:09:03.957 --> 00:09:07.648
a lot of things, if you're not kind of
aware of all the pieces we're gonna have.

126
00:09:07.648 --> 00:09:12.234
It can be real tricky and sometimes like,
are you going to spend more time adding so

127
00:09:12.234 --> 00:09:13.508
many extra reducers?

128
00:09:13.508 --> 00:09:17.680
That makes way more sense to have the
complete freedom of the pure JavaScript?

129
00:09:17.680 --> 00:09:21.537
You have a reducer function to
objects go in one comes out,

130
00:09:21.537 --> 00:09:26.591
the answer that question really depends
on what you're building, right?

131
00:09:26.591 --> 00:09:31.870
And having both options on the table and
deciding listen, this is pretty standard.

132
00:09:31.870 --> 00:09:33.786
I'm just adding stuff removing stuff.

133
00:09:33.786 --> 00:09:37.254
I don't wanna do all this boilerplate is a
relatively small utility that we're using

134
00:09:37.254 --> 00:09:38.225
inside of our company.

135
00:09:38.225 --> 00:09:39.190
Yeah, I use redux toolkit.

136
00:09:39.190 --> 00:09:43.907
I know that I'm gonna do a lot of
really particularly extra things.

137
00:09:43.907 --> 00:09:45.325
And I might be doing so many,

138
00:09:45.325 --> 00:09:48.290
extra juices educations around
it that it's not worth it.

139
00:09:48.290 --> 00:09:49.847
That's totally worth it too.

140
00:09:49.847 --> 00:09:53.166
I think it makes sense to kind
of balance between the two and

141
00:09:53.166 --> 00:09:55.480
figure out which one works best for you.

