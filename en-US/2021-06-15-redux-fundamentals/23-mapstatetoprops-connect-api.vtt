WEBVTT

1
00:00:00.000 --> 00:00:04.706
The first order of business is right
now we have just this JavaScript array,

2
00:00:04.706 --> 00:00:07.066
that we're passing into menu items.

3
00:00:07.066 --> 00:00:09.062
So it's not actually coming from Redux.

4
00:00:09.062 --> 00:00:12.960
The rest of the application is wired
up in the same way we saw previously.

5
00:00:12.960 --> 00:00:16.673
I'm not gonna go,
wrap the application in a provider again.

6
00:00:16.673 --> 00:00:21.446
And all that kinda stuff, the dev tools
are wired up, the providers wrapping

7
00:00:21.446 --> 00:00:26.533
around the application we're just gonna
focus on creating the API at this point.

8
00:00:26.533 --> 00:00:31.117
So what we'd like to do is remove
the need to pass in items as

9
00:00:31.117 --> 00:00:35.892
an array that's kinda hard coded in and
instead get the array

10
00:00:35.892 --> 00:00:40.594
that is kind of set as the initial
state within our reducer.

11
00:00:40.594 --> 00:00:44.696
Right, which is relatively the same,

12
00:00:44.696 --> 00:00:51.546
we'll change this slightly just so
we can see it when it's time.

13
00:00:51.546 --> 00:00:53.952
Right, so we'll put that in there as well.

14
00:00:53.952 --> 00:00:56.906
.So, first thing we can
do is go to containers.

15
00:00:56.906 --> 00:00:59.626
And we have an example one in here and

16
00:00:59.626 --> 00:01:03.350
you kind of see a little
bit about how this works.

17
00:01:03.350 --> 00:01:09.551
We have Connect, which takes, I think four
arguments really, we're all gonna use too,

18
00:01:09.551 --> 00:01:13.806
which is mapStateToProps and
mapDispatchToProps, right?

19
00:01:13.806 --> 00:01:16.964
Each one of these presentational
components takes a set of props.

20
00:01:16.964 --> 00:01:21.508
What we wanna do is, what do we need
to pull from state to pass in as props?

21
00:01:21.508 --> 00:01:25.606
What do we need to pull yeah in terms of
action craters and map those two different

22
00:01:25.606 --> 00:01:29.784
props, and then we'll pass those all
into the component that we're wrapping.

23
00:01:29.784 --> 00:01:37.311
So let's go ahead and we're gonna
create a menu items plural container.

24
00:01:38.982 --> 00:01:46.323
Make MenuItemsContainer.js.

25
00:01:46.323 --> 00:01:50.532
All right in here, we're gonna start by
creating that first function which is

26
00:01:50.532 --> 00:01:53.617
gonna it's very similar to
what we had with us selector.

27
00:01:53.617 --> 00:01:57.907
So we'll say Const mapStateToprops and

28
00:01:57.907 --> 00:02:03.332
that is going to take the state
as the first argument

29
00:02:03.332 --> 00:02:08.018
in there just like
the selector did as well.

30
00:02:08.018 --> 00:02:11.861
And then what we need to do is return some
kind of object where the keys will be

31
00:02:11.861 --> 00:02:13.691
the things on the props object, and

32
00:02:13.691 --> 00:02:16.321
the values will be what
that actually represents.

33
00:02:16.321 --> 00:02:20.912
So if we look back over at calculator.js,
you can see that this is

34
00:02:20.912 --> 00:02:25.340
expecting an items Prop,
which should be this array of items.

35
00:02:25.340 --> 00:02:28.277
So we just need to make
sure that that happens.

36
00:02:28.277 --> 00:02:31.426
So we'll go ahead back
into menu items container.

37
00:02:31.426 --> 00:02:34.790
And we'll return an object that actually

38
00:02:34.790 --> 00:02:39.314
has a shape of the props of
this component is expecting.

39
00:02:39.314 --> 00:02:44.830
And so we'll say okay,
cool items is state.items.

40
00:02:44.830 --> 00:02:45.683
Awesome.

41
00:02:45.683 --> 00:02:50.688
The one thing to note is this is
simply a regular old JavaScript

42
00:02:50.688 --> 00:02:55.317
function that returns a regular
old JavaScript object.

43
00:02:55.317 --> 00:02:59.687
You could call this constant or
this variable sandwich if you wanted to.

44
00:02:59.687 --> 00:03:03.092
The fact that we call it map stage
props is just a convention because we

45
00:03:03.092 --> 00:03:05.147
are taking things from our Redux store and

46
00:03:05.147 --> 00:03:07.978
we're mapping them to the props
that the object x Specs.

47
00:03:07.978 --> 00:03:15.453
And then finally we will
export a menu items container.

48
00:03:15.453 --> 00:03:20.657
And that is going to use this Connect
method that comes on react Redux.

49
00:03:20.657 --> 00:03:25.037
Connect takes the state that you wanna
map the props and the dispatch and

50
00:03:25.037 --> 00:03:28.981
then eventually it will take
a component that you want to wrap and

51
00:03:28.981 --> 00:03:30.747
pass those properties too.

52
00:03:30.747 --> 00:03:32.686
So we'll say mapStateToProps.

53
00:03:32.686 --> 00:03:34.372
We don't have a dispatch yet.

54
00:03:34.372 --> 00:03:37.526
This will return a function that
eventually takes a react component.

55
00:03:37.526 --> 00:03:40.980
This is if you wanted to have
some assembly like a with items,

56
00:03:40.980 --> 00:03:45.816
connector that you wanna use for multiple
components, you could just export this.

57
00:03:45.816 --> 00:03:49.394
We're gonna kind of immediately
wrap the menuItems Prop.

58
00:03:49.394 --> 00:03:50.256
Your menuItems component.

59
00:03:55.831 --> 00:03:56.398
Too.

60
00:03:56.398 --> 00:03:58.139
All right, let's pull that in.

61
00:04:02.471 --> 00:04:04.517
Take a look and we'll say

62
00:04:07.381 --> 00:04:12.747
Import Nope.

63
00:04:15.233 --> 00:04:16.077
/components.

64
00:04:16.077 --> 00:04:19.315
I put all the presentational components
in a components folder containers or

65
00:04:19.315 --> 00:04:22.322
a container folder again,
that's not nothing forcing you to do that.

66
00:04:23.915 --> 00:04:25.747
So put that in place.

67
00:04:27.373 --> 00:04:30.892
All right, you can see that we've got
the menuItems component there as well.

68
00:04:30.892 --> 00:04:34.053
And then really all we have to do
is go back to this calculator, and

69
00:04:34.053 --> 00:04:36.523
we're going to swap out
the presentational one for

70
00:04:36.523 --> 00:04:39.924
the one that is passing the state
into the presentational component.

71
00:04:45.626 --> 00:04:49.503
And then we'll switch this out as well.

72
00:04:49.503 --> 00:04:52.974
ManuItems from ../containers.

73
00:04:58.100 --> 00:05:00.103
All right, let's go ahead and

74
00:05:00.103 --> 00:05:03.956
we can actually remove The hard
coded in an array because now

75
00:05:03.956 --> 00:05:08.441
this component is going to know to
pull stuff in from the Redux store.

76
00:05:08.441 --> 00:05:13.690
All right [COUGH] as you can see, now we
added the it's now gone from Vegan Ham

77
00:05:13.690 --> 00:05:18.704
to Vegan Ham Sandwich and an Awesome
Tofu Roast instead of a Tofu Roast.

78
00:05:18.704 --> 00:05:23.010
So this is now a component that is hooked
into the state of our application.

79
00:05:23.010 --> 00:05:27.599
The other thing that we might wanna
do is figure out how to dispatch

80
00:05:27.599 --> 00:05:28.861
actions as well.

81
00:05:28.861 --> 00:05:31.556
So it seems like a good
thing to get up and

82
00:05:31.556 --> 00:05:35.903
running is this new item form up here,
this new menu item form.

83
00:05:35.903 --> 00:05:40.114
Now, just like we saw in the previous
example, this can manage its own state.

84
00:05:40.114 --> 00:05:43.611
This doesn't need to be stored into Redux,
per se.

85
00:05:43.611 --> 00:05:47.274
We really just wanna know, okay,
when they hit the Add Item button,

86
00:05:47.274 --> 00:05:49.622
that's when we wanna go ahead and
add it in.

87
00:05:49.622 --> 00:05:54.088
We don't have the concept of an added item
or the idea that a user might have added

88
00:05:54.088 --> 00:05:56.700
an item yet, so
we need to create that action.

89
00:05:56.700 --> 00:06:01.099
So here we'll say const ITEM ADDED.

90
00:06:05.123 --> 00:06:07.547
All right, so here's the pop quiz time.

91
00:06:07.547 --> 00:06:12.067
We look at the form.

92
00:06:12.067 --> 00:06:16.467
How many things do we need to know about
based on the act of the user hitting that

93
00:06:16.467 --> 00:06:17.492
Add Item button?

94
00:06:17.492 --> 00:06:19.934
Like what information are we gonna
have when they hit that button?

95
00:06:19.934 --> 00:06:22.127
&gt;&gt; Looks like the item name and the price.

96
00:06:22.127 --> 00:06:22.879
&gt;&gt; Name and the price.

97
00:06:22.879 --> 00:06:26.867
That's not all the properties of an item,
right?

98
00:06:26.867 --> 00:06:30.177
If we look back into our reducer.

99
00:06:30.177 --> 00:06:35.184
All right, we've got stuff here you ID,
the name, the price, the quantity.

100
00:06:35.184 --> 00:06:37.447
And so one of the questions
comes up is like, okay,

101
00:06:37.447 --> 00:06:39.035
where do you like determine the ID?

102
00:06:39.035 --> 00:06:40.944
Where do you set the default values?

103
00:06:40.944 --> 00:06:44.890
Now, Redux will let you do either.

104
00:06:44.890 --> 00:06:49.588
Right if you want to in the action
create a set all the default values,

105
00:06:49.588 --> 00:06:51.694
that's totally fine as well.

106
00:06:51.694 --> 00:06:54.803
Or you can do it all on
the reducer my recommendation

107
00:06:54.803 --> 00:06:59.595
again since the reducers job is to figure
out what a thing that happened means.

108
00:06:59.595 --> 00:07:01.086
I choose to move it also reduce and

109
00:07:01.086 --> 00:07:03.123
I recommend that you do
it all in the reducer.

110
00:07:03.123 --> 00:07:06.434
You could set the default values
of each in the action, but then

111
00:07:06.434 --> 00:07:10.433
you are now chasing around all the default
by different parts of the code base

112
00:07:10.433 --> 00:07:14.646
versus like taking all of the changing of
the world of what a given action means.

113
00:07:14.646 --> 00:07:17.730
Putting the reducer where that
stuff is happening anyway, for

114
00:07:17.730 --> 00:07:19.837
me creates a more maintainable code base.

115
00:07:23.112 --> 00:07:27.849
So we'll say addNewItem I really like to
use past tense my action names because

116
00:07:27.849 --> 00:07:31.937
again, it forces me to think about
this in the right way which is this

117
00:07:31.937 --> 00:07:35.494
thing happened they hit the button
an item has been added.

118
00:07:35.494 --> 00:07:39.533
The tricky part around for the action
creators is if you want to map it to

119
00:07:39.533 --> 00:07:42.619
the like, you'd have to like
rename it as you map it.

120
00:07:42.619 --> 00:07:47.226
The react components are expecting stuff
like on change on submit On add new item,

121
00:07:47.226 --> 00:07:49.247
they kind of use a different tents.

122
00:07:49.247 --> 00:07:53.154
So, a lot of times it's tricky, but I will
tend to just name my action creators as I

123
00:07:53.154 --> 00:07:55.097
would see them in my react application.

124
00:07:55.097 --> 00:08:00.482
So, as I pointed out, I think we're
getting is the name and the price.

125
00:08:00.482 --> 00:08:05.395
And this is again,
his sole job is to return some kind

126
00:08:05.395 --> 00:08:10.431
of object where we've got
the type being item added.

127
00:08:10.431 --> 00:08:13.307
And then the payload it's just gonna
be the things that we know about.

128
00:08:13.307 --> 00:08:16.495
This is yes, you could again set
all the default values here.

129
00:08:16.495 --> 00:08:21.263
I'm going to implore you not to, because
I think that all of the implications of

130
00:08:21.263 --> 00:08:23.842
a change should all happen in the reducer.

131
00:08:23.842 --> 00:08:25.735
So we've got that in place.

132
00:08:25.735 --> 00:08:31.995
Now there's a bunch of ways to
get dispatch into a component.

133
00:08:31.995 --> 00:08:34.954
But first we do also need to add this
logic to the reducer cause right now,

134
00:08:34.954 --> 00:08:36.275
Reducer doesn't do anything.

135
00:08:36.275 --> 00:08:41.411
So we'll go ahead and we'll say if

136
00:08:41.411 --> 00:08:46.376
the action.type is ITEM ADDED.

137
00:08:46.376 --> 00:08:48.704
I don't know why my auto
importing isn't working right now.

138
00:08:48.704 --> 00:08:50.875
That's annoying, but
we'll deal with that later.

139
00:08:50.875 --> 00:08:56.181
We'll say, From

140
00:08:56.181 --> 00:09:02.643
./actions Are important instead.

141
00:09:02.643 --> 00:09:05.474
Great, so we've got that in place.

142
00:09:05.474 --> 00:09:11.841
So if ITEM ADDED Then
what we wanna do is we

143
00:09:11.841 --> 00:09:18.643
need to immutably mutate the array which
means we cannot push it on to the array.

144
00:09:18.643 --> 00:09:22.220
Because push mutates an array,
which will not let react know that he

145
00:09:22.220 --> 00:09:26.451
has changed when we've discussed before,
everything needs to be immutable.

146
00:09:26.451 --> 00:09:28.340
So we'll say we'll make our new item.

147
00:09:28.340 --> 00:09:34.492
We'll say like uuid is id++
which is incrementing a number.

148
00:09:34.492 --> 00:09:40.046
In this case, we will say that
the quantity is one as a default, and then

149
00:09:40.046 --> 00:09:46.638
we'll spread over the rest of the actual
payload that's got the name and the price.

150
00:09:46.638 --> 00:09:50.622
And the reason that I have to do this
which is, if later we did wanna add

151
00:09:50.622 --> 00:09:54.337
another filter for added quantity,
whatever get spread last or

152
00:09:54.337 --> 00:09:57.571
override whatever was already
existing on the object so

153
00:09:57.571 --> 00:10:00.360
it will support that in
case anything changes.

154
00:10:00.360 --> 00:10:03.974
So you can even have a default name and
default price in there as well.

155
00:10:03.974 --> 00:10:07.403
Anything that comes into the action will
override whatever you set as the default.

156
00:10:07.403 --> 00:10:11.041
So it's a nice way to kind of have
a fallback for everything as well.

157
00:10:11.041 --> 00:10:15.137
And then we will spread out everything
that is currently in the state which is

158
00:10:15.137 --> 00:10:16.548
this wide array of items.

159
00:10:16.548 --> 00:10:20.373
With this new item that we created,
so we've got this in place and again,

160
00:10:20.373 --> 00:10:23.717
this is super easy to unit test
because it's simply a function.

161
00:10:23.717 --> 00:10:27.148
You can literally just write
a just test real quickly and

162
00:10:27.148 --> 00:10:31.966
pass in the initial items and action that
conforms to what we just said before,

163
00:10:31.966 --> 00:10:34.084
and make sure that it's on there.

164
00:10:34.084 --> 00:10:38.723
All right, so now we've got an action that
we can dispatch Reduce with the knows how

165
00:10:38.723 --> 00:10:40.191
to deal with that action.

166
00:10:40.191 --> 00:10:45.015
Really we just need to somehow get it
into that new item form component, and

167
00:10:45.015 --> 00:10:47.323
then we've got that part in place.

168
00:10:47.323 --> 00:10:48.367
So let's go ahead.

169
00:10:48.367 --> 00:10:52.478
And let's just verify that this works
first, which what I'm gonna do is.

170
00:10:52.478 --> 00:11:00.648
I am going to go in item added
not exported from actions.

171
00:11:00.648 --> 00:11:06.149
We just need to export and
then we're back.

172
00:11:06.149 --> 00:11:13.281
So now I can go ahead and I'll go to
Redux and pull up that little keyboard.

173
00:11:13.281 --> 00:11:17.463
I don't know why it's a keyboard,
dispatch, ITEM ADDED,

174
00:11:17.463 --> 00:11:22.384
we see the state two equals so
I gotta check something out here, right?

175
00:11:22.384 --> 00:11:23.891
And this is where these
tools become super helpful.

176
00:11:23.891 --> 00:11:29.700
There's nothing different after we
dispatch the item ITEM ADDED event,

177
00:11:29.700 --> 00:11:32.988
which is we've got the name, the price.

178
00:11:32.988 --> 00:11:35.023
Let's go ahead and check out our reducer.

179
00:11:37.865 --> 00:11:42.248
I don't type just to make sure I saved it.

180
00:11:42.248 --> 00:11:44.643
I should have been cause
we didn't load before.

181
00:11:44.643 --> 00:11:48.617
All right, so of action types item added,
we can go ahead and take a look.

182
00:11:48.617 --> 00:11:50.206
Let's try it one more time,
just real quick.

183
00:11:50.206 --> 00:11:53.066
I'm gonna refresh this
because I have a hypothesis.

184
00:11:55.768 --> 00:11:56.643
All right, it works.

185
00:11:56.643 --> 00:12:00.082
This actually points out a really great
thing that trips me up all the time,

186
00:12:00.082 --> 00:12:03.814
which is so this is based on create react
app, which has hot module, reloading.

187
00:12:03.814 --> 00:12:07.039
Hot module reloading checks
your module tree to see which,

188
00:12:07.039 --> 00:12:09.501
which components changes and
swaps them in.

189
00:12:09.501 --> 00:12:12.472
You'll notice a lot of times
that even as we change stuff,

190
00:12:12.472 --> 00:12:14.422
we still have the same state in place.

191
00:12:14.422 --> 00:12:18.530
Just changing plain old JavaScript stuff
doesn't always retrigger hot module

192
00:12:18.530 --> 00:12:19.210
reloading.

193
00:12:19.210 --> 00:12:22.256
So, if you find that like you
haven't touched a component.

194
00:12:22.256 --> 00:12:25.089
You've only touched like regular
JavaScript in this case redox and

195
00:12:25.089 --> 00:12:26.638
you don't see your change on there.

196
00:12:26.638 --> 00:12:30.033
Sometimes you have to refresh the page
that bites me more often than I'm

197
00:12:30.033 --> 00:12:31.290
comfortable admitting.

