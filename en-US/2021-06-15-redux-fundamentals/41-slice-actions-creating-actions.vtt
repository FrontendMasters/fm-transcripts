WEBVTT

1
00:00:00.000 --> 00:00:01.598
Now let's get some actions working and

2
00:00:01.598 --> 00:00:04.515
we'll go back to using hooks cuz we
just use Connect for a little while.

3
00:00:04.515 --> 00:00:09.377
And our actions are hooked onto that

4
00:00:09.377 --> 00:00:13.924
slice ready for us to use as well.

5
00:00:13.924 --> 00:00:17.662
So we'll go in here and
we'll take our create human task.

6
00:00:19.775 --> 00:00:24.700
And now we've got dispatch, so I have
this one that says like, implement me.

7
00:00:24.700 --> 00:00:28.904
Let's go ahead we'll
just say humanSlice or

8
00:00:28.904 --> 00:00:34.321
I guess a call it a singular human,
let's stick with it for

9
00:00:34.321 --> 00:00:38.873
now, .s.actions where it's got ad, right?

10
00:00:38.873 --> 00:00:42.820
And as expecting a name as we saw before,
cuz it's gonna add it on there, but

11
00:00:42.820 --> 00:00:47.730
it automatically created the action crater
on our behalf based on the reducer action.

12
00:00:47.730 --> 00:00:51.903
So it's like cool, if you've got something
in your reducer that knows about

13
00:00:51.903 --> 00:00:55.578
adding humans, you probably need
an action for adding the humans.

14
00:00:55.578 --> 00:00:59.095
And the slice basically automatically
creates that on our behalf, and

15
00:00:59.095 --> 00:01:00.700
we go ahead and we use it.

16
00:01:00.700 --> 00:01:02.062
Let's make sure that this works.

17
00:01:06.098 --> 00:01:07.700
You can see we can add more people.

18
00:01:08.850 --> 00:01:10.200
And they're on there as well.

19
00:01:10.200 --> 00:01:10.997
If you look,

20
00:01:10.997 --> 00:01:15.574
this is something we talked about
the very beginning of our time together.

21
00:01:15.574 --> 00:01:20.059
Which is it uses a different syntax
than the all capital letters

22
00:01:20.059 --> 00:01:23.529
because it's abstracting
it with a object key,

23
00:01:23.529 --> 00:01:29.300
it's actually gonna use human/ad when we
wire up the task is gonna be task/ad.

24
00:01:29.300 --> 00:01:33.694
It's gonna automatically generate
the action types on our behalf based

25
00:01:33.694 --> 00:01:37.885
on the name field that we gave that
slice and then the reducer action.

26
00:01:37.885 --> 00:01:42.870
So is those two things put
together creates the action type

27
00:01:42.870 --> 00:01:46.640
automatically for us in this case.

28
00:01:46.640 --> 00:01:51.710
And so doing the same thing for
tasks is somewhat similar.

29
00:01:51.710 --> 00:01:55.200
So we'll go to create task, and
we've got that other implement me here.

30
00:01:55.200 --> 00:02:00.643
And this time we're just gonna
say taskSlice.actions.add,

31
00:02:00.643 --> 00:02:05.390
we're dispatching that with
this case with the title.

32
00:02:07.120 --> 00:02:11.129
And so now we can go ahead and
we can say what are the plans?

33
00:02:11.129 --> 00:02:12.744
File the TPS reports.

34
00:02:16.778 --> 00:02:18.890
Let's see actions blowing up.

35
00:02:18.890 --> 00:02:20.567
It's not a function.

36
00:02:25.995 --> 00:02:28.760
I didn't put it in the reducers
key when I was typing before.

37
00:02:28.760 --> 00:02:34.424
So we have reducers,
now we can go ahead and we can use it.

38
00:02:40.120 --> 00:02:42.790
Yeah, and we have both kinda in place.

39
00:02:42.790 --> 00:02:49.180
You can see task that ad,
we have everything we need right there.

40
00:02:49.180 --> 00:02:52.796
So it's making a lot of the boiler
plate a lot easier for us.

41
00:02:52.796 --> 00:02:54.160
Now here's the problem.

42
00:02:55.500 --> 00:03:00.344
What happens if we wanna
have an action that

43
00:03:00.344 --> 00:03:05.594
isn't immediately generated by this for
us,

44
00:03:05.594 --> 00:03:11.380
so we have a way to go
about doing that as well.

45
00:03:11.380 --> 00:03:15.042
Let's start with the one that's
automatically generated and

46
00:03:15.042 --> 00:03:19.940
then we'll see if we want to be able
to change it on our behalf as well.

47
00:03:19.940 --> 00:03:21.948
So, we can say we've got this,

48
00:03:23.723 --> 00:03:26.790
Let's add the ability to
toggle one of them on and off.

49
00:03:26.790 --> 00:03:30.818
And so, we'll go to the tasks,
and we'll say toggle,

50
00:03:30.818 --> 00:03:35.410
which is gonna be that done or
undone check box that we had.

51
00:03:35.410 --> 00:03:39.485
Toggle is gonna take the state
in the action as well.

52
00:03:39.485 --> 00:03:43.181
And by default,
it simply gives you whatever was

53
00:03:43.181 --> 00:03:47.250
passed in as the one argument
as the payload, right?

54
00:03:47.250 --> 00:03:50.116
And so if you wanna create a little
bit of a different syntax for

55
00:03:50.116 --> 00:03:52.260
that you get to generate your own actions.

56
00:03:52.260 --> 00:03:59.008
But let's go ahead and let's just say,
a given task is gonna be state.find,

57
00:03:59.008 --> 00:04:04.017
task is gonna based on this as
we saw before taskid equals,

58
00:04:04.017 --> 00:04:08.032
equals, equals action.payload.taskid.

59
00:04:08.032 --> 00:04:13.450
But then we also maybe wanna get whether
the box is checked or unchecked.

60
00:04:13.450 --> 00:04:16.360
So we're gonna need that as well in here.

61
00:04:16.360 --> 00:04:23.079
So once we find that task
we'll say task.completed

62
00:04:23.079 --> 00:04:28.930
equals action.payload completed.

63
00:04:28.930 --> 00:04:33.676
So now we can go in to our individual
tasks and find other implement me.

64
00:04:33.676 --> 00:04:38.704
And we could dispatch
taskid which we're getting

65
00:04:38.704 --> 00:04:43.732
passed into the prop and
then completed is gonna be

66
00:04:43.732 --> 00:04:49.970
event.target.checked which
will either be true or false.

67
00:04:51.870 --> 00:04:52.820
So, make sure that works.

68
00:04:54.900 --> 00:04:57.696
Now we can check them,
we gotta refresh it.

69
00:04:59.354 --> 00:05:01.890
Let's see misspell constant.

70
00:05:03.308 --> 00:05:05.950
I gotta actually use the action creator.

71
00:05:05.950 --> 00:05:14.857
So we'll say tasksSlice.actions.toggle.

72
00:05:17.861 --> 00:05:20.530
We'll pass it in like that and
that's feels verbose, right?

73
00:05:20.530 --> 00:05:23.402
It feels like I would love to just give
the taskid as the first argument and

74
00:05:23.402 --> 00:05:25.630
whether or
not it's completed as the second argument.

75
00:05:25.630 --> 00:05:28.751
Do you feel that is that something that
you're spiritually thinking coz if you

76
00:05:28.751 --> 00:05:30.140
are, we can make that happen.

77
00:05:30.140 --> 00:05:33.320
We're just gonna have to create an action
that's not auto generated for us.

78
00:05:33.320 --> 00:05:34.770
And we can absolutely do that.

79
00:05:34.770 --> 00:05:39.120
But let's just make sure
our initial version works.

80
00:05:39.120 --> 00:05:40.367
All right now it works and

81
00:05:40.367 --> 00:05:43.290
you can see that the correct
actions are getting toggled.

82
00:05:44.960 --> 00:05:48.450
Let's say that we wanted to just
create our own action creator.

83
00:05:48.450 --> 00:05:51.375
Listen, I like that you're doing this for
us Redux Toolkit, but

84
00:05:51.375 --> 00:05:55.360
I still have opinions on how some of these
should be used and I know what I'm doing.

85
00:05:55.360 --> 00:05:59.649
I would like to go ahead and create
an action that works with Redux Toolkit

86
00:05:59.649 --> 00:06:04.730
follows all the right moves, but I can
use to kinda format things differently.

87
00:06:04.730 --> 00:06:07.630
We can totally do that as well.

88
00:06:07.630 --> 00:06:12.378
And so in this case, we'll go back to
our tasksSlice, and we'll go ahead and

89
00:06:12.378 --> 00:06:15.020
use this create action, functionality.

90
00:06:16.130 --> 00:06:21.344
And so I'm just gonna name this
one something slightly different

91
00:06:21.344 --> 00:06:26.370
just to highlight the fact that
this is the one that I made.

92
00:06:26.370 --> 00:06:29.040
I'll call it export const toggleTask.

93
00:06:30.480 --> 00:06:33.803
And instead of creating
Slice I'm gonna create action.

94
00:06:33.803 --> 00:06:38.086
And create action takes, what do you
want the type of the action that

95
00:06:38.086 --> 00:06:42.235
you're creating to be called cuz
we do you want to task/toggle.

96
00:06:42.235 --> 00:06:48.500
If you really wanted to you could
do tasks.action.toggle.string.

97
00:06:48.500 --> 00:06:51.657
But we can figure it out
based on the name and

98
00:06:51.657 --> 00:06:55.530
the key what we want it to
be to trigger that reducer.

99
00:06:56.810 --> 00:07:01.450
And we can go here and this is basically,
how do you want the action created work?

100
00:07:01.450 --> 00:07:05.690
We said before,
we just wanna pass in a taskid,

101
00:07:05.690 --> 00:07:10.790
we just wanna pass in completed,
and I want the payload,

102
00:07:14.926 --> 00:07:18.544
To be formatted with the taskid and
the completed.

103
00:07:18.544 --> 00:07:20.974
So we're taking that complexity
we're using our component and

104
00:07:20.974 --> 00:07:23.635
putting it all in one place so
we don't have to worry about it anymore.

105
00:07:23.635 --> 00:07:27.475
It's simply gonna take two arguments and
it's gonna create that object for us.

106
00:07:27.475 --> 00:07:32.376
I gotta put in curly braces there as well,
and that should do the tricks and

107
00:07:32.376 --> 00:07:34.205
now I can swap this one out.

108
00:07:36.140 --> 00:07:39.071
Instead of having all this for
both logic, I can actually say,

109
00:07:45.183 --> 00:07:48.648
ToggleTask, taskid,

110
00:07:48.648 --> 00:07:52.815
event.target.checked.

111
00:07:52.815 --> 00:07:56.097
Great, and
let's make sure that that works.

112
00:07:58.666 --> 00:08:00.603
Everything works as we expected it to,

113
00:08:00.603 --> 00:08:04.370
I'm just gonna refresh to confirm one
more time, yep, everything works.

114
00:08:04.370 --> 00:08:06.612
So you can create your
own actions as well,

115
00:08:06.612 --> 00:08:11.113
if there's something about the syntax that
the one that Redux Toolskit gives to you.

116
00:08:11.113 --> 00:08:15.507
You can go ahead and pass in what the type
of the action is, how you wanna format

117
00:08:15.507 --> 00:08:20.190
that payload yourself, and change a little
bit of the API for that action as well.

118
00:08:21.440 --> 00:08:21.940
Great.

119
00:08:24.514 --> 00:08:29.782
There is one other problem
that we need to solve for

120
00:08:29.782 --> 00:08:33.546
which is in our previous examples,

121
00:08:33.546 --> 00:08:39.700
all of the actions flew
through all of the reducers.

122
00:08:39.700 --> 00:08:41.160
And that wasn't a big deal.

123
00:08:41.160 --> 00:08:43.120
I mean, it was good in a lot of ways.

124
00:08:43.120 --> 00:08:45.450
Because we were just writing JavaScript.

125
00:08:45.450 --> 00:08:50.234
We're saying action.type, which means
since every action we're doing it was we

126
00:08:50.234 --> 00:08:52.978
had the full power of
JavaScript in front of us.

127
00:08:52.978 --> 00:08:57.153
We could just do whatever we wanted
programmatically here, because we have so

128
00:08:57.153 --> 00:09:00.330
much obstruction if it becomes
a little trickier, right?

129
00:09:00.330 --> 00:09:05.175
If I wanted to change who a task
is assigned to in the tasksSlice,

130
00:09:05.175 --> 00:09:06.880
that's not hard, but

131
00:09:06.880 --> 00:09:12.109
what if I wanna listen to a task
action in the humans reducer, right?

132
00:09:12.109 --> 00:09:15.206
That was easy before,
it's not that hard now, but

133
00:09:15.206 --> 00:09:18.190
it does involve learning an extra thing or
two.

134
00:09:18.190 --> 00:09:21.640
So let's actually do it
in the tasksSlice first.

135
00:09:23.350 --> 00:09:24.930
And so we'll go into tasksSlice.

136
00:09:26.000 --> 00:09:32.187
And we're just gonna have one
more which is, AssignedToUser.

137
00:09:32.187 --> 00:09:34.520
Okay, so what does assigned to user need?

138
00:09:34.520 --> 00:09:36.030
It needs a state in the action obviously.

139
00:09:36.030 --> 00:09:38.580
What needs to be on the action?

140
00:09:38.580 --> 00:09:39.893
If I want to assign a task for the user,

141
00:09:39.893 --> 00:09:42.220
what are the two things
that I need to know?

142
00:09:42.220 --> 00:09:43.570
&gt;&gt; Which stalls can what users use.

143
00:09:43.570 --> 00:09:45.720
&gt;&gt; Yeah, I need to are those two things.

144
00:09:45.720 --> 00:09:50.500
And eventually that seems useful
on that same action, right?

145
00:09:50.500 --> 00:09:52.300
To go through the user reducer.

146
00:09:52.300 --> 00:09:55.300
And also those are the same two
pieces of things that I wanna use.

147
00:09:55.300 --> 00:09:59.610
I don't wanna fire two actions just cuz
Redux Tools here try to do me a favor.

148
00:09:59.610 --> 00:10:03.177
What I wanna figure out how to do is
wiring this up in the taskSlice is not

149
00:10:03.177 --> 00:10:04.500
a big deal.

150
00:10:04.500 --> 00:10:08.633
But then I also want to tell
the userSlice or the humanSlice,

151
00:10:08.633 --> 00:10:11.150
you also care about this too.

152
00:10:11.150 --> 00:10:14.648
And I wanna provide you with additional
functionality to work with this and

153
00:10:14.648 --> 00:10:15.490
care about this.

154
00:10:15.490 --> 00:10:17.540
So that's what we're gonna
need to figure out now.

155
00:10:19.800 --> 00:10:24.190
All right, so we got assignToUser,

156
00:10:24.190 --> 00:10:29.434
we'll do state.find with the task again.

157
00:10:29.434 --> 00:10:35.513
I mean I can just copy that,
let's grab that.

158
00:10:35.513 --> 00:10:44.274
And then we'll just do task.assignedTo
action.payload.humanid.

159
00:10:46.669 --> 00:10:47.366
All right.

160
00:10:47.366 --> 00:10:54.613
And then,
how do we deal with that in the other one?

161
00:10:54.613 --> 00:10:58.158
Well, we'll go into our humanSlice.

162
00:10:58.158 --> 00:11:03.748
And we've got the reducers that
are dedicated, that are actions created,

163
00:11:03.748 --> 00:11:07.676
that are for
working with the humans in this case, but

164
00:11:07.676 --> 00:11:12.020
then I have this other
one called extraReducers.

165
00:11:12.020 --> 00:11:15.864
And I guess that really good abstractions
usually give you the ability to do

166
00:11:15.864 --> 00:11:17.145
the easy stuff easily and

167
00:11:17.145 --> 00:11:21.130
then drop down into a lower level when
you need to do more complicated things.

