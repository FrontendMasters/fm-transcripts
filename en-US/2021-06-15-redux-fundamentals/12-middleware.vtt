WEBVTT

1
00:00:00.140 --> 00:00:01.330
So, that's enhancers.

2
00:00:01.330 --> 00:00:05.350
And as I kind of alluded to before when
we were asking and answering questions,

3
00:00:05.350 --> 00:00:12.360
was apply middleware creates one enhancer
out of a series of a chain of middleware.

4
00:00:12.360 --> 00:00:16.840
One of the useful ways to think
about this is, enhancers are kind of

5
00:00:16.840 --> 00:00:21.720
useful if you wanna change the overall
implementation of your store.

6
00:00:21.720 --> 00:00:23.390
We have not looked at the Redux Dev Tools,
yet.

7
00:00:23.390 --> 00:00:26.490
But, I'll give you a little bit of a sneak
peek, which is it has a whole bunch of

8
00:00:26.490 --> 00:00:30.560
things like the ability to load in state
through the dev tools, export the state

9
00:00:30.560 --> 00:00:34.620
from the dev tools, dispatch actions,
undo, and redo and all these features.

10
00:00:34.620 --> 00:00:38.000
So, it's adding a lot of
functionality to Redux.

11
00:00:38.000 --> 00:00:40.170
And so,
it's definitely gonna use an enhancer.

12
00:00:40.170 --> 00:00:44.200
However, if its something like,
I just wanna modify actions as they

13
00:00:44.200 --> 00:00:48.760
come through cuz I wanna do async things,
I wanna log them, we use middleware.

14
00:00:48.760 --> 00:00:52.650
For instance, we use middleware to
log customer behavior to segment or

15
00:00:52.650 --> 00:00:54.135
something along those lines.

16
00:00:54.135 --> 00:00:57.665
So, like, they're firing these actions,
they're visiting this page,

17
00:00:57.665 --> 00:01:00.835
will log that to segments, or
data dog, or what have you?

18
00:01:00.835 --> 00:01:04.545
So you might say, as actions flow through,
I wanna do something.

19
00:01:04.545 --> 00:01:05.565
Middleware is a really,

20
00:01:05.565 --> 00:01:10.000
really great way to modify how dispatching
actions works in your application.

21
00:01:10.000 --> 00:01:13.190
And, effectively, it is an abstraction
over an enhancer, which is a way for

22
00:01:13.190 --> 00:01:16.270
just managing actions
as they flow through.

23
00:01:16.270 --> 00:01:19.600
And apply middleware allows you,
out of the box, to compose

24
00:01:20.650 --> 00:01:25.360
an entire chain of middleware.

25
00:01:25.360 --> 00:01:31.740
Let's go ahead and
well look at how that might work for us.

26
00:01:31.740 --> 00:01:34.310
So, let's go ahead.

27
00:01:34.310 --> 00:01:35.500
We'll get rid of these for now.

28
00:01:35.500 --> 00:01:41.190
Actually, we'll keep them cuz
we're gonna use them for parts.

29
00:01:41.190 --> 00:01:45.690
&gt;&gt; Why is the enhancer passed
through the enhancer, again?

30
00:01:45.690 --> 00:01:48.970
&gt;&gt; So you're matching the same API.

31
00:01:48.970 --> 00:01:51.910
My gut says, I was thinking
about this earlier, my gut says

32
00:01:51.910 --> 00:01:55.220
is probably memorizing it, which is if
you've got the same enhancer as last time,

33
00:01:55.220 --> 00:01:57.660
we're not passing it through again, right?

34
00:01:57.660 --> 00:02:01.345
So we're trying to, if we get the same
enhancer, don't pass it through each time.

35
00:02:01.345 --> 00:02:03.485
But you wanna make sure you're
following the same API.

36
00:02:03.485 --> 00:02:07.685
Cuz you could, theoretically, modify
the enhancer and replace it, as well.

37
00:02:07.685 --> 00:02:10.845
If you want me to come up with
a hypothetical use case for

38
00:02:10.845 --> 00:02:12.455
why you would ever wanna do that,
I cannot.

39
00:02:13.480 --> 00:02:17.020
But it is there to do,
if you needed to do it.

40
00:02:17.020 --> 00:02:20.260
But yeah, I think your god of,
I shouldn't do that,

41
00:02:20.260 --> 00:02:24.740
is probably a good spiritual
thing to listen to.

42
00:02:24.740 --> 00:02:29.460
All right, so middleware is just
got a slightly different syntax.

43
00:02:29.460 --> 00:02:34.150
So, we'll go ahead and
we'll say something like, this one,

44
00:02:34.150 --> 00:02:38.830
I will make the logMiddleware and
you can make the enhancer this time.

45
00:02:38.830 --> 00:02:40.960
So, I'll say we'll make
some logMiddleware.

46
00:02:42.100 --> 00:02:43.460
And middleware is much more common.

47
00:02:43.460 --> 00:02:49.130
Like I said, we use it for logging actions
to our different data reporting tools.

48
00:02:49.130 --> 00:02:52.340
You can use it for
all sorts of different things, as well.

49
00:02:53.400 --> 00:02:57.830
But let's see, this is more likely that
you will almost never write enhancer and

50
00:02:57.830 --> 00:03:01.850
you will absolutely, maybe,
possibly, with a chance,

51
00:03:01.850 --> 00:03:05.080
write some middleware
like we definitely have.

52
00:03:05.080 --> 00:03:08.350
So it takes a bunch of curried functions
because things get passed in at

53
00:03:08.350 --> 00:03:09.050
different times.

54
00:03:09.050 --> 00:03:13.790
So, we could say store, next, and action.

55
00:03:13.790 --> 00:03:14.610
What's the store?

56
00:03:14.610 --> 00:03:18.360
Is the actual store that we created,
right?

57
00:03:18.360 --> 00:03:19.170
Next is, actually,

58
00:03:19.170 --> 00:03:23.210
dispatch, cuz each piece of middleware
will call the next piece of middleware.

59
00:03:23.210 --> 00:03:25.640
Kind of, so,
the question I just received, right?

60
00:03:25.640 --> 00:03:28.720
Where you can call the next
one in an array of middleware.

61
00:03:28.720 --> 00:03:31.520
Finally, when you get to
the end of the array,

62
00:03:31.520 --> 00:03:34.420
then you're dispatching to the reducer.

63
00:03:34.420 --> 00:03:37.550
And the cool thing about middleware is,
like the enhancers that we just wrote,

64
00:03:37.550 --> 00:03:40.380
it gives you the opportunity to do a bunch
of things before you hit the reducer.

65
00:03:40.380 --> 00:03:43.290
And then also, again,
after it leaves the reducer.

66
00:03:43.290 --> 00:03:47.450
So, you get to insert yourself
at both places there, as well.

67
00:03:47.450 --> 00:03:51.480
So, with the logMiddleware, we'll simply
say something along the lines of,

68
00:03:51.480 --> 00:03:53.400
and you'll see that the syntax
is a little bit cleaner.

69
00:03:54.680 --> 00:04:00.460
So, we'll say something like console.log.

70
00:04:00.460 --> 00:04:05.937
And we'll say old state and we'll say

71
00:04:05.937 --> 00:04:10.800
store.getState.

72
00:04:10.800 --> 00:04:13.040
And I mean we could log the action too.

73
00:04:16.000 --> 00:04:17.730
And we'll pull that down here,

74
00:04:17.730 --> 00:04:21.970
one of the const we got before is,
we wanna call with the new state.

75
00:04:21.970 --> 00:04:26.070
This time, since we're just using the
store, is very much before we can call it

76
00:04:26.070 --> 00:04:28.650
getstate and it will be
the current state of that moment.

77
00:04:28.650 --> 00:04:37.360
So, we'll say new sate, and here we'll
say Next, and give it the actual action.

78
00:04:37.360 --> 00:04:40.370
So, it flows through, right?

79
00:04:40.370 --> 00:04:44.000
So, now, we can pass it in there as
an enhancer, but it's middleware.

80
00:04:44.000 --> 00:04:45.440
So we just have to use
the applyMiddleware.

81
00:04:51.960 --> 00:04:54.980
Cool and you can see old state and the way
we're not really modifying the state here,

82
00:04:54.980 --> 00:04:56.960
but you can see it each time.

83
00:04:56.960 --> 00:04:59.460
We've got an old state and
new state beforehand.

84
00:04:59.460 --> 00:05:03.710
So, this is everything happens before you
passes through the rest of the middleware

85
00:05:03.710 --> 00:05:04.860
and eventually the reducer.

86
00:05:04.860 --> 00:05:06.620
And then you get access to it,

87
00:05:06.620 --> 00:05:10.410
again, after it's left all of
the middleware and the reducer.

88
00:05:10.410 --> 00:05:14.340
So, it's a cleaner and simpler syntax for
writing those enhancers.

89
00:05:14.340 --> 00:05:16.690
So you don't have to make a whole
bunch of enhancers compose them.

90
00:05:16.690 --> 00:05:18.660
You're just trying to intercept actions.

91
00:05:18.660 --> 00:05:19.940
This is super useful.

92
00:05:19.940 --> 00:05:23.090
The most famous, yeah,
sure, let's go with it.

93
00:05:23.090 --> 00:05:29.000
The most famous use case for middleware
is a library that is using Redux Toolkit.

94
00:05:29.000 --> 00:05:33.540
And very commonly in Redux
applications called Redux Thunk.

95
00:05:33.540 --> 00:05:38.520
So let's say, hypothetically,
you needed to make a Ajax request or

96
00:05:38.520 --> 00:05:41.640
a fetch HTTP request.

97
00:05:41.640 --> 00:05:45.030
You could dispatch an action,
but actions aren't valid.

98
00:05:45.030 --> 00:05:49.260
So what could happen was, you get the
action here, then you fire the promise or

99
00:05:49.260 --> 00:05:52.840
the Ajax request, and then you fire
a real action afterwards, right?

100
00:05:52.840 --> 00:05:56.940
And that is kind of, normally we use
a library called Redux Thunk, but

101
00:05:56.940 --> 00:05:58.360
that is effectively how it works.

102
00:05:58.360 --> 00:05:59.610
It's just type checking.

103
00:05:59.610 --> 00:06:02.450
Like if type of action is actually
a function, call the function and

104
00:06:02.450 --> 00:06:05.920
pass a dispatch and
allow it to then figure out what to,

105
00:06:05.920 --> 00:06:07.902
and passes through the rest of it.

106
00:06:07.902 --> 00:06:10.382
So that is the most common case for
middleware is,

107
00:06:10.382 --> 00:06:13.882
anytime you need to change how
actions flow through the pipeline, and

108
00:06:13.882 --> 00:06:16.742
you don't wanna write an entire
enhancer and compose them all together.

109
00:06:16.742 --> 00:06:18.932
Middleware is a really,
really great way to do that.

