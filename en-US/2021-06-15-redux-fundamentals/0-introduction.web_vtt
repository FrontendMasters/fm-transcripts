WEBVTT

1
00:00:00.350 --> 00:00:03.614
All right, so we'll learn
a little bit about Redux today.

2
00:00:03.614 --> 00:00:08.370
Redux is a state management tool.

3
00:00:08.370 --> 00:00:11.450
It is commonly used with react.

4
00:00:11.450 --> 00:00:15.460
But it doesn't have to be Redux can
be used with any front end framework.

5
00:00:15.460 --> 00:00:18.349
Redux can even be used anywhere
JavaScript can be written.

6
00:00:18.349 --> 00:00:22.805
Redux can be used on the back end on
the front end with react with whatever you

7
00:00:22.805 --> 00:00:26.420
want to do with just vanilla
JavaScript with Angular.

8
00:00:26.420 --> 00:00:28.420
In this case,
we're gonna talking about Redux.

9
00:00:28.420 --> 00:00:31.628
And then we'll build some react
applications with it to kind of see it in

10
00:00:31.628 --> 00:00:32.170
practice.

11
00:00:32.170 --> 00:00:35.650
All right, so what are we gonna do today?

12
00:00:35.650 --> 00:00:38.714
I think one of the things that I
have learned kind of teaching this

13
00:00:38.714 --> 00:00:42.890
stuff is a lot of times you're learning
redox while you're also learning react.

14
00:00:42.890 --> 00:00:47.612
And as we'll see, there's a fun library
called React Redux which is a third thing

15
00:00:47.612 --> 00:00:49.200
to learn simultaneously.

16
00:00:49.200 --> 00:00:51.750
And that's usually when people like
I'm a little confused, all right.

17
00:00:51.750 --> 00:00:54.790
So what are we gonna
cover in this workshop?

18
00:00:54.790 --> 00:00:58.267
One of the things that I have noticed is
a lot of times you're learning Redux,

19
00:00:58.267 --> 00:01:00.305
but you're Learning Redux and React.

20
00:01:00.305 --> 00:01:04.095
And then there is a third library that
we'll see in our time together called

21
00:01:04.095 --> 00:01:04.825
React Redux.

22
00:01:04.825 --> 00:01:07.886
So all of a sudden,
you're sitting down you're learning Redux,

23
00:01:07.886 --> 00:01:10.947
React Redux, and then how to
integrate into React application and

24
00:01:10.947 --> 00:01:12.970
all the best practices around that.

25
00:01:12.970 --> 00:01:16.220
At the same time, and
all of a sudden you're really sad, right?

26
00:01:16.220 --> 00:01:19.943
And then you enter the next phase of
learning reaction Redux, which is,

27
00:01:19.943 --> 00:01:22.019
I've gotten really good at like copy and

28
00:01:22.019 --> 00:01:25.290
pasting these pieces from
the other part of the codebase.

29
00:01:25.290 --> 00:01:29.244
And I think I mostly know what they do, or
I've grabbed stuff from the documentation,

30
00:01:29.244 --> 00:01:31.850
and it kind of makes
sense it works at least.

31
00:01:31.850 --> 00:01:32.604
All right,

32
00:01:32.604 --> 00:01:37.670
we're gonna try to move us to the third
stage past that which is like, I get it.

33
00:01:37.670 --> 00:01:40.609
I understand Redux, I can like
plug it into a React application,

34
00:01:40.609 --> 00:01:42.080
I understand each piece.

35
00:01:42.080 --> 00:01:43.416
So kind of work through it and

36
00:01:43.416 --> 00:01:46.080
see how each piece kind of
builds on top of each other.

37
00:01:46.080 --> 00:01:49.679
And then finally, we'll look at
this thing called React toolkit.

38
00:01:49.679 --> 00:01:53.498
Which is a another set of abstractions to
take all the kind of low level stuff that

39
00:01:53.498 --> 00:01:55.608
we're doing and bundles it up real nicely.

40
00:01:55.608 --> 00:01:59.644
In a way that it hides some of the inner
workings that I think are important

41
00:01:59.644 --> 00:02:03.890
to know but also allows you to kind of
like reduce the amount of boilerplate.

42
00:02:03.890 --> 00:02:07.684
And tedium that you might have to
go through while setting up a React

43
00:02:07.684 --> 00:02:08.920
application.

44
00:02:08.920 --> 00:02:11.720
Finally, what good front end
application doesn't have to make at

45
00:02:11.720 --> 00:02:14.600
least some kind of network request
at some point to get some data.

46
00:02:14.600 --> 00:02:16.736
So we'll look at like,
how do we make API requests and

47
00:02:16.736 --> 00:02:18.180
like update our state as well.

48
00:02:18.180 --> 00:02:20.240
So kind of slowly build will use hooks.

49
00:02:20.240 --> 00:02:21.490
We'll use high order components.

50
00:02:21.490 --> 00:02:25.130
We'll kind of see each phase as
we learn Redux all the way from.

51
00:02:25.130 --> 00:02:29.248
Okay, here it is just the library
itself to building some small

52
00:02:29.248 --> 00:02:31.200
applications as we go along.

53
00:02:32.210 --> 00:02:32.970
Great.

54
00:02:32.970 --> 00:02:40.860
So the good news is that the API surface
area for Redux is pretty reasonable.

55
00:02:40.860 --> 00:02:47.050
If you have Redux has effectively five
methods or functions attached to it.

56
00:02:47.050 --> 00:02:51.979
And four of them are just
helper utility methods right?

57
00:02:51.979 --> 00:02:56.503
They are just effectively not
dissimilar from methods you

58
00:02:56.503 --> 00:03:00.930
might find in a library like lodash or
underscore.

59
00:03:00.930 --> 00:03:04.722
They just allow you to kind of
take very common things and

60
00:03:04.722 --> 00:03:07.480
do them a little bit easier, right?

61
00:03:07.480 --> 00:03:11.112
And so we'll kind of go through the entire
API surface area of Redux just by

62
00:03:11.112 --> 00:03:12.000
itself, right?

63
00:03:12.000 --> 00:03:13.692
We're not gonna worry about like okay,

64
00:03:13.692 --> 00:03:16.140
then I got to plug it into react
application so on so forth.

65
00:03:16.140 --> 00:03:17.070
We will do all that.

66
00:03:17.070 --> 00:03:21.000
But at first like what if
we just mastered Redux.

67
00:03:21.000 --> 00:03:22.077
Seems good, right?

68
00:03:22.077 --> 00:03:26.321
So the question was, where are things
like use reducer, or in this case,

69
00:03:26.321 --> 00:03:29.066
it's actually use selector and
use dispatch?

70
00:03:29.066 --> 00:03:31.000
They're not in Redux.

71
00:03:31.000 --> 00:03:32.815
That's not in the Redux library right?

72
00:03:32.815 --> 00:03:35.290
That isn't a I kind of
alluded to this earlier.

73
00:03:35.290 --> 00:03:41.410
A fun other library called React Redux,
which is neither React nor Redux.

74
00:03:41.410 --> 00:03:43.500
And it's the bindings between Redux and
React.

75
00:03:43.500 --> 00:03:45.692
So we will jump into that, but

76
00:03:45.692 --> 00:03:49.559
that is actually not on
the surface area of, Redux.

77
00:03:49.559 --> 00:03:52.475
And that kind of makes sense if you think
about it, because like we said before.

78
00:03:52.475 --> 00:03:56.740
Redux is very commonly found
used in React applications, but

79
00:03:56.740 --> 00:03:58.796
it doesn't have to be right?

80
00:03:58.796 --> 00:04:02.154
You could build a game
with html5 canvas and

81
00:04:02.154 --> 00:04:06.530
choose to use Redux to manage
the state and application.

82
00:04:06.530 --> 00:04:09.310
You can decide like I wanna use
this in an Ember application.

83
00:04:09.310 --> 00:04:11.880
And you could use Redux to manage
the state in that application or Angular.

84
00:04:11.880 --> 00:04:14.842
You can use it on the server side and
node, you could also

85
00:04:14.842 --> 00:04:19.000
use it just as easily to kind of manage
state using the same principles.

86
00:04:19.000 --> 00:04:23.265
So, [COUGH] the actual core library
itself doesn't it's kind of just

87
00:04:23.265 --> 00:04:26.170
like unaware of React, right?

88
00:04:26.170 --> 00:04:31.099
And then we have those bindings
in the either amazingly named or

89
00:04:31.099 --> 00:04:33.897
poorly named React Redux library.

90
00:04:33.897 --> 00:04:37.099
Because on one hand does exactly what
it says on the tin, on the other hand

91
00:04:37.099 --> 00:04:40.480
is kind of like when you explain the what
something means by using the words.

92
00:04:42.000 --> 00:04:44.970
And we'll figure out how to bind
it into React application there.

93
00:04:44.970 --> 00:04:46.800
So it's actually not on
the surface serve Redux.

94
00:04:46.800 --> 00:04:49.717
So the question was, well why use Redux?

95
00:04:49.717 --> 00:04:52.980
Doesn't React come these days come

96
00:04:52.980 --> 00:04:57.772
with a use reducer that is
basically the same thing?

97
00:04:57.772 --> 00:05:04.050
It is similar, but it also lacks a lot
of the bells and whistles as well right?

98
00:05:04.050 --> 00:05:08.481
One way to think about it is like you
might have a single speed bike that's

99
00:05:08.481 --> 00:05:11.300
probably useful for getting around town.

100
00:05:11.300 --> 00:05:14.204
But it's maybe not a mountain bike or
a racing bike or

101
00:05:14.204 --> 00:05:15.920
something along those lines.

102
00:05:15.920 --> 00:05:19.213
So one of the things that Redux
has that they kind of built

103
00:05:19.213 --> 00:05:23.715
in version to React doesn't have is
things like middleware built in right?

104
00:05:23.715 --> 00:05:27.483
Things like the binding for higher
order components that will take care

105
00:05:27.483 --> 00:05:31.838
of memorization and try to avoid re
rendering components when possible, right?

106
00:05:31.838 --> 00:05:36.082
There's a lot of kind of just slightly
more advanced things that come in Redux

107
00:05:36.082 --> 00:05:38.380
that are not in the use reducer hook.

108
00:05:38.380 --> 00:05:41.080
That come in React that in
a large enough application,

109
00:05:41.080 --> 00:05:44.060
you're either going to find
yourself needing Redux.

110
00:05:44.060 --> 00:05:48.625
Or if you're going down this kind of
reducer kind of path, or you might find

111
00:05:48.625 --> 00:05:52.833
yourself putting so many plugins
into the built in use reducer hook.

112
00:05:52.833 --> 00:05:56.042
Into react that you've effectively
recreated Redux without the same level

113
00:05:56.042 --> 00:05:56.608
of support.

114
00:05:56.608 --> 00:06:00.750
Cool, Mark.

115
00:06:00.750 --> 00:06:04.513
&gt;&gt; Yeah, could you breifly describe
the difference between Redux and

116
00:06:04.513 --> 00:06:06.070
the context API?

117
00:06:06.070 --> 00:06:09.793
&gt;&gt; Yeah, so the difference between
Redux in the context of API which so

118
00:06:09.793 --> 00:06:13.380
Redux is very similar to this
whole users reducer part.

119
00:06:13.380 --> 00:06:17.616
The context API is actually used by both
of them to kind of thread access to your

120
00:06:17.616 --> 00:06:19.990
store throughout the application.

121
00:06:19.990 --> 00:06:23.801
So Redux isn't necessarily different
than the context a API in so

122
00:06:23.801 --> 00:06:25.751
far that it uses the context API.

123
00:06:25.751 --> 00:06:30.039
The React Redux library that we'll see in
a little bit uses the context API to give

124
00:06:30.039 --> 00:06:33.949
all of your different components access
to your Redux store from anywhere

125
00:06:33.949 --> 00:06:35.355
within the application.

126
00:06:35.355 --> 00:06:41.320
So both use reducer and Redux will use the
context API to make your store available.

127
00:06:41.320 --> 00:06:45.049
Without having to thread your props
from the highest component down to

128
00:06:45.049 --> 00:06:48.050
the lowest level component and
your events back up.

129
00:06:48.050 --> 00:06:49.680
&gt;&gt; They both use the context API.

130
00:06:49.680 --> 00:06:52.770
So they it's not necessary that Redux
is different than the context API.

131
00:06:52.770 --> 00:06:55.090
It is using it as well
as the use reducer hook.

