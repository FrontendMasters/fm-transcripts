WEBVTT

1
00:00:00.470 --> 00:00:06.020
Welcome back, everyone so, [COUGH] In
the previous section, I mean, so far we've

2
00:00:06.020 --> 00:00:12.110
mastered Redux, we're done, we know
everything there is to know about Redux.

3
00:00:12.110 --> 00:00:17.548
We hooked it up to a react application,
a very simple react application

4
00:00:17.548 --> 00:00:22.910
using the hooks API, and now we
are going to look at how to use Connect.

5
00:00:22.910 --> 00:00:26.492
Connect definitely predates hooks and so

6
00:00:26.492 --> 00:00:30.993
far that hooks have not always
been around in react so

7
00:00:30.993 --> 00:00:37.350
they couldn't have always been around
in react Redux by just that logic.

8
00:00:37.350 --> 00:00:40.518
There are trade offs between the two,

9
00:00:40.518 --> 00:00:45.876
hooks are definitely a very simple
API that's very easy to use.

10
00:00:45.876 --> 00:00:50.835
As you can see, it didn't take a lot of
particularly new knowledge to hook up

11
00:00:50.835 --> 00:00:53.910
a Redux store to our react application.

12
00:00:53.910 --> 00:00:57.744
There are some drawbacks to hooks
as well though, which is You know,

13
00:00:57.744 --> 00:01:02.041
I think one of the concerns and some of
the criticism of hooks sometimes is like

14
00:01:02.041 --> 00:01:06.890
a separation of concerns, right, like that
component is hooking into a Redux store.

15
00:01:06.890 --> 00:01:11.832
So like if you wanted to unit test it or
drop it into storybook, a little bit

16
00:01:11.832 --> 00:01:16.910
difficult without bringing all of your
Redux store along with it, right?

17
00:01:16.910 --> 00:01:21.564
If it had any other side effects or use
effect, they're going to fire no matter

18
00:01:21.564 --> 00:01:26.080
what, with the Connect API,
it's just a different set of trade offs.

19
00:01:26.080 --> 00:01:29.537
And I would also posit that you
don't have to exclusively use one or

20
00:01:29.537 --> 00:01:32.684
the other, you can kind of make
the decision and trade off but

21
00:01:32.684 --> 00:01:35.830
there's not necessarily a right or
wrong answer.

22
00:01:35.830 --> 00:01:40.482
Connect API wraps, regular presentational
components presentational components

23
00:01:40.482 --> 00:01:44.820
are basically react components with no
sense of state management whatsoever.

24
00:01:44.820 --> 00:01:48.457
They take props, they do things right,
they're effectively in a lot of ways,

25
00:01:48.457 --> 00:01:50.249
they can be class based or functional,

26
00:01:50.249 --> 00:01:53.210
but they're effectively not
dissimilar from pure functions.

27
00:01:53.210 --> 00:01:57.063
They don't do anything and
don't have any side effects on their own,

28
00:01:57.063 --> 00:02:00.331
the Connect API lets you take
presentational components,

29
00:02:00.331 --> 00:02:03.923
wrap it in a high order component
that passes in whatever state and

30
00:02:03.923 --> 00:02:08.498
whatever actions action creators or that
the component needs into the component,

31
00:02:08.498 --> 00:02:11.940
which means you can kind of
separate the two very easily.

32
00:02:11.940 --> 00:02:14.880
You want to drop the presentational
component into storybook and

33
00:02:14.880 --> 00:02:17.430
just pass in some mock data and
some mock actions.

34
00:02:17.430 --> 00:02:20.207
Very easy to do, you want to pull
it up in your test suite and

35
00:02:20.207 --> 00:02:22.560
unit test it super easy as well.

36
00:02:22.560 --> 00:02:27.040
Some of the drawbacks are, the act of
wrapping components into a hierarchy

37
00:02:27.040 --> 00:02:31.948
component will add extra noise to your dev
tools because there'll be these kind of

38
00:02:31.948 --> 00:02:36.430
invisible components, wrapping each and
every one of these static typing

39
00:02:36.430 --> 00:02:39.303
hierarchic components
can is not impossible.

40
00:02:39.303 --> 00:02:43.335
But it can be a little bit trickier versus
a hook, which takes an argument and

41
00:02:43.335 --> 00:02:46.340
returns an argument much
easier to static type.

42
00:02:46.340 --> 00:02:50.606
So really what it comes down to is one,
how old is your code base,

43
00:02:50.606 --> 00:02:56.410
because you might have a whole bunch of
Connect API components in there as well.

44
00:02:56.410 --> 00:03:00.020
Do you know if you're working very closely
with a design team that needs a bunch of

45
00:03:00.020 --> 00:03:03.582
storybook or something along those lines
or your unit testing everything maybe

46
00:03:03.582 --> 00:03:06.680
having a higher order components
is more important for you.

47
00:03:06.680 --> 00:03:08.618
But if about ease of development and

48
00:03:08.618 --> 00:03:12.944
like what is the kind of like Less least
amount of code you can possibly write well

49
00:03:12.944 --> 00:03:17.160
hooks are beneficial static typing is
easier with hooks, so on and so forth.

50
00:03:17.160 --> 00:03:22.038
We use both at various points and it is
kind of on a case by case trade off, so

51
00:03:22.038 --> 00:03:26.919
we're going to look at both and then you
can feel informed to kind of use use

52
00:03:26.919 --> 00:03:33.010
whichever one fits the problem you're
trying to solve at that given moment.

53
00:03:33.010 --> 00:03:38.270
So, if we look on my screen right now,
I've got the beginnings of a,

54
00:03:38.270 --> 00:03:43.443
just a quick little app that takes
a bunch of menu items subtotals and

55
00:03:43.443 --> 00:03:47.110
figures out what the tip is,
so on and so forth.

56
00:03:47.110 --> 00:03:51.429
Right now, it doesn't do much we are going
to get it wired up using the connect API,

57
00:03:51.429 --> 00:03:55.752
and there's a bunch of moving pieces here
because there's different ways that you

58
00:03:55.752 --> 00:03:56.930
can use it.

59
00:03:56.930 --> 00:04:00.565
And so we've got a chance to kind of kick
the tires on all the different ways to use

60
00:04:00.565 --> 00:04:01.390
the connect API.

61
00:04:01.390 --> 00:04:05.106
So it's less about, I copied code from
one part of the code base tweak some

62
00:04:05.106 --> 00:04:08.358
things and it works to actually like,
just like we did with redox,

63
00:04:08.358 --> 00:04:10.350
I understand how this works.

64
00:04:10.350 --> 00:04:13.976
And now I can see what is going on
cuz there's different syntaxes, and

65
00:04:13.976 --> 00:04:15.340
stuff along those lines.

66
00:04:15.340 --> 00:04:19.675
This is our application,
we can flip over to the code,

67
00:04:19.675 --> 00:04:24.106
I've got a store in here, and
we've got to reduce it but

68
00:04:24.106 --> 00:04:28.840
right now it doesn't really
do much of anything.

69
00:04:28.840 --> 00:04:33.310
And some actions which is just an empty
file, we've also got a series of

70
00:04:33.310 --> 00:04:38.540
components all of them don't have any real
estate management to them whatsoever.

71
00:04:38.540 --> 00:04:43.032
Right now there are some hard coded
items that will remove momentarily but

72
00:04:43.032 --> 00:04:47.030
the rest of them just take props and
they render some no JSX right.

73
00:04:47.030 --> 00:04:50.949
Which will eventually get rendered as
they shim out, what we're gonna do is

74
00:04:50.949 --> 00:04:54.994
take the different pieces that have
some state management requirements, and

75
00:04:54.994 --> 00:04:59.098
we're gonna wrap them in these higher
order components that will either pass in

76
00:04:59.098 --> 00:05:00.689
state from our Redux store, or

77
00:05:00.689 --> 00:05:04.580
pass in functions are going to dispatch
actions to update the Redux store.

78
00:05:04.580 --> 00:05:08.840
And we'll just kind of wrap the existing
components and sometimes swap them out.

79
00:05:08.840 --> 00:05:13.512
There's a lot of ways to name the
different components you can see sometimes

80
00:05:13.512 --> 00:05:16.943
you might make the wrapped
component called menu item,

81
00:05:16.943 --> 00:05:19.360
container connected menu item.

82
00:05:19.360 --> 00:05:23.330
So on and so forth, it's really just
matters about consistency In a larger

83
00:05:23.330 --> 00:05:26.440
application, how you lay it
out might change as well.

84
00:05:26.440 --> 00:05:30.789
A lot of times what we'll do is for
every component will have a folder, and

85
00:05:30.789 --> 00:05:34.298
in that folder we'll have
the presentational component,

86
00:05:34.298 --> 00:05:36.490
as well as the container component.

87
00:05:36.490 --> 00:05:40.492
This application isn't necessarily big
enough that will just add more confusion

88
00:05:40.492 --> 00:05:44.320
than anything else, but how you choose to
lay it out, it's kind of up to you and

89
00:05:44.320 --> 00:05:46.070
there's a lot of thoughts on this.

90
00:05:46.070 --> 00:05:50.471
It's just say that there's no one right
answer probably isn't isn't true, but

91
00:05:50.471 --> 00:05:54.440
there's no like hard and fast rule for
how you have to lay out a component.

