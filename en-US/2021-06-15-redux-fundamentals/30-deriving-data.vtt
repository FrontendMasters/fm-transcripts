WEBVTT

1
00:00:00.000 --> 00:00:03.647
So now we have the next question which is,

2
00:00:03.647 --> 00:00:08.558
we were able to manage all
the state in our application.

3
00:00:08.558 --> 00:00:12.071
But what about like the end results,
the total price for

4
00:00:12.071 --> 00:00:17.243
a given item based on the price and the
quantity, the sub-total of all the items.

5
00:00:17.243 --> 00:00:22.128
To the Tip Amount, which is multiplied
by a decimal based on the tip,

6
00:00:22.128 --> 00:00:26.353
and then the total which has
the Subtotal on the Tip Amount.

7
00:00:26.353 --> 00:00:30.119
One of the things that I have seen
that I would like to have a word with

8
00:00:30.119 --> 00:00:31.141
everyone about.

9
00:00:31.141 --> 00:00:35.291
Is I have seen times where
the approach is to then all right,

10
00:00:35.291 --> 00:00:39.693
what I'm gonna do is,
I'm gonna store the subtotal in state.

11
00:00:39.693 --> 00:00:43.660
And I'm gonna store the tip amount, I see
some eyebrows already going like that's

12
00:00:43.660 --> 00:00:46.223
the right [LAUGH] yes,
his head's shaking all right.

13
00:00:46.223 --> 00:00:48.203
I'm gonna store that stuff in state and

14
00:00:48.203 --> 00:00:51.153
then I'm gonna try to update
it when everything changes.

15
00:00:51.153 --> 00:00:56.230
That you will lose days of your
life when you eventually make

16
00:00:56.230 --> 00:01:02.136
some kind of mistake and can't keep
all those pieces of data in sync.

17
00:01:02.136 --> 00:01:06.096
So the rule that I would like
to implant in your brain is,

18
00:01:06.096 --> 00:01:08.473
only store the stuff you need to.

19
00:01:08.473 --> 00:01:14.296
In the same way for our actions, as little
as we can get away with in the action.

20
00:01:14.296 --> 00:01:18.836
I would like to store as little data as

21
00:01:18.836 --> 00:01:23.526
possible in the actual store itself.

22
00:01:23.526 --> 00:01:28.511
Anything that I can figure out by
taking two or more pieces of data and

23
00:01:28.511 --> 00:01:32.101
combining them,
I will figure it out on the fly.

24
00:01:32.101 --> 00:01:37.006
Now, a common complaint that I get is,
well, what if it's like we're gonna

25
00:01:37.006 --> 00:01:41.322
multiply some numbers in this application,
let's be real clear.

26
00:01:41.322 --> 00:01:43.478
But you can see as well
it's very expensive.

27
00:01:43.478 --> 00:01:46.994
So we should just hold on to it and
we just store it in state.

28
00:01:46.994 --> 00:01:48.272
We have a solution for that.

29
00:01:48.272 --> 00:01:50.451
We will get to that in a second, right?

30
00:01:50.451 --> 00:01:55.005
Again, a lot of times we should actually
solve the real problem, not just grab for

31
00:01:55.005 --> 00:01:56.467
the most obvious answer.

32
00:01:56.467 --> 00:02:00.863
So we'll look at like how to actually
mentalize and cash values and

33
00:02:00.863 --> 00:02:01.814
a little bit.

34
00:02:01.814 --> 00:02:07.190
But first of all, the other thing
that we can do in map state to props,

35
00:02:07.190 --> 00:02:12.865
is use the ability to take two maybe,
for instance, the Total, right?

36
00:02:12.865 --> 00:02:14.508
That's not stored in state, but

37
00:02:14.508 --> 00:02:17.385
map state to props can also do
some of that figuring out what

38
00:02:17.385 --> 00:02:20.981
the props should be that gets passed
in based on the actual state as well.

39
00:02:20.981 --> 00:02:25.272
It doesn't just have to take
the item from our store and

40
00:02:25.272 --> 00:02:27.707
then pass it in, or whatever.

41
00:02:27.707 --> 00:02:29.842
It can also figure stuff out and

42
00:02:29.842 --> 00:02:33.880
map it to the value that this
particular component needs.

43
00:02:33.880 --> 00:02:38.498
So if we look at the Sub-total Tip Amount,
those are props that the summary

44
00:02:38.498 --> 00:02:42.547
component takes, we don't need
to store a sub-total instead.

45
00:02:42.547 --> 00:02:44.019
We can go figure it out.

46
00:02:44.019 --> 00:02:46.560
Based on the data that's in the state and

47
00:02:46.560 --> 00:02:50.384
pass it into the component as
a prop using map state to props.

48
00:02:50.384 --> 00:02:58.243
So I'm gonna create a summary
container in here and

49
00:02:58.243 --> 00:03:04.835
we'll go call it SummaryContainer.js.

50
00:03:04.835 --> 00:03:06.851
And we'll start with this mapStateToProps.

51
00:03:10.480 --> 00:03:16.356
MapStateToProps is going to take
instance of all the state that we have.

52
00:03:16.356 --> 00:03:19.013
And then really we need to
figure out the subtotal.

53
00:03:19.013 --> 00:03:23.974
Anyone have a quick and easy way, there's
multiple ways that we could do this.

54
00:03:23.974 --> 00:03:26.555
I will live code the first one,

55
00:03:26.555 --> 00:03:31.137
that is easily live codable
that one of you volunteer.

56
00:03:31.137 --> 00:03:34.829
&gt;&gt; Are you saying that we should go over,
and see the quantity and

57
00:03:34.829 --> 00:03:36.748
of the items times their price?

58
00:03:36.748 --> 00:03:38.850
&gt;&gt; Yeah just add them together.

59
00:03:38.850 --> 00:03:41.347
&gt;&gt; Yep, but
I need all of them together, so

60
00:03:41.347 --> 00:03:43.930
I need not only ,this is the entire bill.

61
00:03:43.930 --> 00:03:50.772
So I need any given items total price and
then I need all of them together.

62
00:03:50.772 --> 00:03:55.141
&gt;&gt; So I guess what you're saying is,
should we iterate over the items?

63
00:03:55.141 --> 00:03:55.666
&gt;&gt; Yep.

64
00:03:55.666 --> 00:03:58.030
&gt;&gt; And then just sum them up.

65
00:03:58.030 --> 00:04:02.562
&gt;&gt; We can iterate over some, we can use
reduce, which one makes me happier?

66
00:04:02.562 --> 00:04:04.127
&gt;&gt; Reduce doesn't make me happy.

67
00:04:04.127 --> 00:04:08.013
[LAUGH] [CROSSTALK] But
that's just because I'm kinda a novice.

68
00:04:08.013 --> 00:04:11.583
But either way, [CROSSTALK]
&gt;&gt; Let's go.

69
00:04:11.583 --> 00:04:15.455
&gt;&gt; Let's say that
subtotal will start at 0.

70
00:04:15.455 --> 00:04:17.021
Let's iterate over it.

71
00:04:17.021 --> 00:04:21.656
And then we'll store items here
just make it easier for us.

72
00:04:21.656 --> 00:04:26.852
Items is state.items, right?

73
00:04:26.852 --> 00:04:31.338
And then we will go through and

74
00:04:31.338 --> 00:04:37.085
we'll say, for const item of items.

75
00:04:37.085 --> 00:04:41.660
We'll go through and
we'll say subtotal plus equals and

76
00:04:41.660 --> 00:04:44.907
when see something wrong with my logic.

77
00:04:44.907 --> 00:04:46.399
Just call it out.

78
00:04:46.399 --> 00:04:55.922
Subtotal it will equal
the item.quantity times item.price.

79
00:04:55.922 --> 00:05:01.546
Right on, yeah,
we're not using it yet, I will.

80
00:05:01.546 --> 00:05:04.008
And so we'll go through and,

81
00:05:04.008 --> 00:05:09.039
if we look at the summary component
needs a few other things.

82
00:05:09.039 --> 00:05:14.431
It's expecting the subtotal,
the tipAmount and the total.

83
00:05:14.431 --> 00:05:16.160
So we've got that.

84
00:05:16.160 --> 00:05:18.848
If we go ahead and we look in our state,

85
00:05:18.848 --> 00:05:24.575
we can see a tipPercentage is stored as
a whole number as state.tipPercentage.

86
00:05:24.575 --> 00:05:25.610
So we can grab, right?

87
00:05:25.610 --> 00:05:27.830
We've only grabbed one thing at a time,

88
00:05:27.830 --> 00:05:30.390
we have the entire state
tree available to us.

89
00:05:30.390 --> 00:05:35.114
We can use the entire state tree and
this is useful for computing data.

90
00:05:35.114 --> 00:05:35.902
So all right.

91
00:05:35.902 --> 00:05:40.850
So, will say, the const

92
00:05:40.850 --> 00:05:47.220
tipAmount will be that subtotal

93
00:05:50.595 --> 00:05:54.093
Times the state.tipPercentage

94
00:05:57.415 --> 00:06:01.348
Divided by a 100.

95
00:06:01.348 --> 00:06:02.885
And finally the total is simpler.

96
00:06:02.885 --> 00:06:04.897
That one's easy.

97
00:06:04.897 --> 00:06:10.872
It's just gonna be
subtotal plus tipamount.

98
00:06:10.872 --> 00:06:15.261
So here we don't have a tipAmount or
a total or subtotal stored in state, but

99
00:06:15.261 --> 00:06:17.678
this is what the component is expecting.

100
00:06:17.678 --> 00:06:19.818
So we can just given the props at once.

101
00:06:19.818 --> 00:06:22.485
Using map state to props,
we are taking different pieces of state.

102
00:06:22.485 --> 00:06:26.565
We'll say cool,
you're gonna get a subtotal,

103
00:06:26.565 --> 00:06:32.351
you're gonna get a tipAmount and
you're gonna get a total, great.

104
00:06:32.351 --> 00:06:34.484
So we have all that in place, and

105
00:06:34.484 --> 00:06:38.050
now we just need to pass it
into the component itself.

106
00:06:38.050 --> 00:06:41.489
So we'll say export
const Summary Container,

107
00:06:47.220 --> 00:06:51.104
Is equal to connect.

108
00:06:51.104 --> 00:06:53.631
And we'll do this mapStateProps.

109
00:06:53.631 --> 00:06:59.621
If you really wanted to pass this function
in as the first argument you could.

110
00:06:59.621 --> 00:07:03.390
If it's really simple you might
be able to, but I wouldn't.

111
00:07:03.390 --> 00:07:08.740
And then we can say the Summary
component that we have, As well.

112
00:07:08.740 --> 00:07:13.539
And now we've just gotta swap out
in our kinda main calculator here,

113
00:07:13.539 --> 00:07:15.868
Summary for SummaryContainer.

114
00:07:20.068 --> 00:07:23.449
We'll see if I made any mistakes.

115
00:07:23.449 --> 00:07:25.608
This will be a ../containers.

116
00:07:29.977 --> 00:07:30.993
All right, let's see what we got.

117
00:07:30.993 --> 00:07:33.500
We'll give it a good refresh.

118
00:07:33.500 --> 00:07:38.507
One small issue as I had, after joking
about eventually misspelling quantity,

119
00:07:38.507 --> 00:07:40.062
I misspelled quantity.

120
00:07:40.062 --> 00:07:41.105
So we go back.

121
00:07:41.105 --> 00:07:46.059
We can see that we've got
everything kinda in place here.

122
00:07:46.059 --> 00:07:48.322
I made allusions to, like this is simple.

123
00:07:48.322 --> 00:07:49.512
We're adding numbers.

124
00:07:49.512 --> 00:07:52.649
We're multiplying numbers, right?

125
00:07:52.649 --> 00:07:54.539
We're kinda taking pieces of our state,

126
00:07:54.539 --> 00:07:57.089
manipulating it in the way
that the component expects.

127
00:07:57.089 --> 00:08:02.797
And returning the props of that component
wants based on the state from redux.

128
00:08:02.797 --> 00:08:06.692
The reference of maybe four is like this
is fine for multiplying adding numbers.

129
00:08:06.692 --> 00:08:11.205
What do we do if things get
a little bit more expensive?

130
00:08:11.205 --> 00:08:14.558
And we think about what
we know about react.

131
00:08:14.558 --> 00:08:19.003
We know that there are patterns around
this, like earlier we saw use memo and

132
00:08:19.003 --> 00:08:20.050
even use effect.

133
00:08:20.050 --> 00:08:23.755
We can see like most of those API's and
react,

134
00:08:23.755 --> 00:08:26.700
take an array of things that say hey,

135
00:08:26.700 --> 00:08:31.843
don't call this again unless
something in this array changes.

136
00:08:31.843 --> 00:08:35.087
In react for use callback and use memo.

137
00:08:35.087 --> 00:08:38.617
We're saying like no matter how
many times this hook gets called.

138
00:08:38.617 --> 00:08:42.399
Unless something in this array is
different than the last time you called

139
00:08:42.399 --> 00:08:44.700
it, don't even try to compute any values.

140
00:08:44.700 --> 00:08:47.951
Just give me back the same
thing you got last time.

141
00:08:47.951 --> 00:08:52.231
And that solves a lot of our problem
around like whatever this is

142
00:08:52.231 --> 00:08:54.996
an expensive thing, so on and so forth.

143
00:08:54.996 --> 00:08:59.324
And there's some other powerful parts
of the pattern we're gonna talk about,

144
00:08:59.324 --> 00:09:02.178
which is going back to this
idea of using selectors.

145
00:09:02.178 --> 00:09:06.818
But there is a library that is frequently
used with reactor called reflect.

146
00:09:06.818 --> 00:09:11.059
And reselect allows you to do is very
similar with that array like syntax.

147
00:09:11.059 --> 00:09:16.267
For caching values that we've seen
in use callback and use memo.

148
00:09:16.267 --> 00:09:20.735
And I guess to an extent use a fact and
react and allows us to use it.

149
00:09:20.735 --> 00:09:24.135
And again, since it is just
regular JavaScript and redux,

150
00:09:24.135 --> 00:09:26.447
it allows us to use it with redux as well.

151
00:09:26.447 --> 00:09:30.152
A lot of things we're talking about is
just simply a pattern implemented using

152
00:09:30.152 --> 00:09:31.564
just functions and objects.

153
00:09:31.564 --> 00:09:35.731
So things that work with just functional
objects will work with redux.

154
00:09:35.731 --> 00:09:37.593
And so we'll kinda talk
through this a little bit.

155
00:09:37.593 --> 00:09:43.675
We're gonna reimplement some
of this logic here as well.

156
00:09:43.675 --> 00:09:47.430
One of the things that we saw
in the chat was like okay,

157
00:09:47.430 --> 00:09:51.361
what does the reduced version
of this look like as well?

158
00:09:51.361 --> 00:09:56.853
And we can do that too, which is simply

159
00:09:56.853 --> 00:10:01.315
if we wanna do const subtotal,

160
00:10:01.315 --> 00:10:05.102
would be items.reduce.

161
00:10:05.102 --> 00:10:10.939
We'll take the sum, the item that we're
working through and we will return,

162
00:10:18.118 --> 00:10:20.003
Sum plus.

163
00:10:23.264 --> 00:10:25.539
Item.price.

164
00:10:25.539 --> 00:10:26.356
I don't need the prices.

165
00:10:26.356 --> 00:10:30.957
Item.price times item.quantity.

166
00:10:34.474 --> 00:10:38.738
And with a starting value of 0, right?

167
00:10:38.738 --> 00:10:41.642
So we could theoretically
unless I made a mistake,

168
00:10:41.642 --> 00:10:46.316
swap it in whichever syntax you like more,
they both basically do the same thing.

169
00:10:46.316 --> 00:10:47.340
I'll just refresh that real quick.

170
00:10:47.340 --> 00:10:50.434
Everything still works,
whichever syntax makes you happier.

171
00:10:50.434 --> 00:10:52.118
This works through the array,

172
00:10:52.118 --> 00:10:56.401
accumulating all the return values of
each function to the sum starting at 0.

173
00:10:56.401 --> 00:11:00.001
So each time we add in
the sum plus the next item,

174
00:11:00.001 --> 00:11:02.710
whichever one it's totally fine me

