WEBVTT

1
00:00:00.940 --> 00:00:07.975
Okay, so at this point, we've got
about 60% of the Redux API covered.

2
00:00:07.975 --> 00:00:11.280
We've got bindActionCreators,
which kinda just uses compose.

3
00:00:11.280 --> 00:00:15.612
Compose takes multiple functions and
creates new functions out of them.

4
00:00:15.612 --> 00:00:19.391
We got createStore, which is arguably
the most important part of the API, and

5
00:00:19.391 --> 00:00:20.660
itself had four methods.

6
00:00:20.660 --> 00:00:25.987
So we're 60% of the way through, and
if you think about actual complexity,

7
00:00:25.987 --> 00:00:30.773
we're really a lot closer to
understanding all that there is to Redux.

8
00:00:30.773 --> 00:00:35.400
Applying it will bring up some new
challenges that we'll have to work

9
00:00:35.400 --> 00:00:39.409
through, but Redux itself is
just objects and functions.

10
00:00:39.409 --> 00:00:44.095
So let's look at combine reducers, and
I kind of alluded to this earlier, and

11
00:00:44.095 --> 00:00:48.568
there was a question around this as well,
as the state gets a little bit more

12
00:00:48.568 --> 00:00:53.280
complicated, changing this stuff
can be a little bit harder as well.

13
00:00:53.280 --> 00:00:56.705
So go ahead, let's clear out some of this.

14
00:00:58.930 --> 00:01:01.879
Let's say we had an initialState
where we had, I don't know,

15
00:01:01.879 --> 00:01:04.897
like a to do list where we might
assign stuff to different users.

16
00:01:04.897 --> 00:01:12.217
So our initialState Could have users.

17
00:01:12.217 --> 00:01:14.330
And we'll give an id of 1.

18
00:01:19.412 --> 00:01:21.012
And the id of 2.

19
00:01:21.012 --> 00:01:22.913
We'll give them name.

20
00:01:22.913 --> 00:01:25.402
Can't see the names on the zoom from here.

21
00:01:25.402 --> 00:01:27.270
I can see Eric.

22
00:01:27.270 --> 00:01:30.562
Yep, that's an object as well,
you gotta wrap these into an object.

23
00:01:34.589 --> 00:01:37.259
Great, and then we'll have tasks.

24
00:01:40.479 --> 00:01:41.968
Which will have, I don't know, a title.

25
00:01:48.847 --> 00:01:56.604
And we'll say Order more
monster energy drinks.

26
00:01:58.474 --> 00:02:00.315
They're not sponsoring, so
they don't get mentioned.

27
00:02:00.315 --> 00:02:02.166
Order more energy drinks.

28
00:02:02.166 --> 00:02:04.300
All right, and as we saw before,

29
00:02:04.300 --> 00:02:07.578
if we just wanted to change
user number 2's name,

30
00:02:07.578 --> 00:02:12.707
we would have to start dropping through
this object spreading as we went along.

31
00:02:12.707 --> 00:02:14.820
This could get a little
bit more complicated.

32
00:02:14.820 --> 00:02:19.324
One of the things that I recommended in
that slide earlier was to go ahead and

33
00:02:19.324 --> 00:02:21.624
figure out can we make stuff flatter?

34
00:02:21.624 --> 00:02:26.132
I'll kind of just pull in what the kind of
more complicated reducer would look like,

35
00:02:26.132 --> 00:02:28.745
and then we will simplify
it a little bit as well.

36
00:02:29.985 --> 00:02:34.265
So let's pull it in,
we'll kind of talk through it.

37
00:02:36.159 --> 00:02:37.022
We'll add these.

38
00:02:40.890 --> 00:02:47.426
So, if we look, we've got two action
types, which is add a user and add a task.

39
00:02:47.426 --> 00:02:53.200
The point to payload is going to be
title of the task, the name of the user.

40
00:02:53.200 --> 00:02:56.803
We didn't have to nest them objects
per se, in fact, let's not.

41
00:03:02.723 --> 00:03:07.185
But you can see, as this object grows,
we'd have to spread out the state and

42
00:03:07.185 --> 00:03:08.948
just the user array.

43
00:03:08.948 --> 00:03:11.761
But then, take everything else
that's in the user array and

44
00:03:11.761 --> 00:03:13.757
just add the additional payload on there.

45
00:03:13.757 --> 00:03:16.844
You can imagine, we saw this in that
slide before, this grows over time.

46
00:03:16.844 --> 00:03:22.356
This is a relatively simple application,
and it's already getting tedious.

47
00:03:22.356 --> 00:03:26.760
When I showed that slide when we had
the city being nested under location being

48
00:03:26.760 --> 00:03:30.012
nested under author, and
we show the number of spreads,

49
00:03:30.012 --> 00:03:32.468
a bunch of your eyes got very wide, right?

50
00:03:32.468 --> 00:03:36.118
You're like do not want,
absolutely not, right?

51
00:03:36.118 --> 00:03:41.871
And so, if you find yourself doing this,
right, it is time to think about whether

52
00:03:41.871 --> 00:03:46.714
either A, as a question I saw before,
which is do I need to change the shape of

53
00:03:46.714 --> 00:03:52.180
the state on the way in, or do I need to
split this up between multiple reducers?

54
00:03:52.180 --> 00:03:56.632
And one way to think about that is
what are the nouns in this case?

55
00:03:56.632 --> 00:04:00.799
Well, changing the shape of the API if it
is one kind of thing, there are times for

56
00:04:00.799 --> 00:04:04.234
performance reasons, you might even
want to split out one model as

57
00:04:04.234 --> 00:04:07.422
multiple reducers,
if you're only changing, let's say,

58
00:04:07.422 --> 00:04:10.707
the title all the time, but
the rest doesn't change, right?

59
00:04:10.707 --> 00:04:12.954
And you could do it for
performance reasons.

60
00:04:12.954 --> 00:04:18.423
But this case, we have two distinct things
that we're working with in this case,

61
00:04:18.423 --> 00:04:23.690
and it would be nice if we just kinda
split these out into two smaller reducers.

62
00:04:23.690 --> 00:04:27.431
Now, if you saw before,
createStore only takes one reducer, so

63
00:04:27.431 --> 00:04:29.887
this is all kind of like smoke and
mirrors.

64
00:04:29.887 --> 00:04:34.310
Combine reducers just basically makes one
reducer out of a bunch of small ones that

65
00:04:34.310 --> 00:04:36.930
we can eventually hand to to createStore.

66
00:04:36.930 --> 00:04:39.898
So how would we refactor this?

67
00:04:41.379 --> 00:04:46.623
Well, we could say that this seems like,
the thing that we're doing with users,

68
00:04:46.623 --> 00:04:50.274
this is one distinct thing
that we're doing with tasks.

69
00:04:50.274 --> 00:04:57.269
So what if we actually said,
up here we'll say const userReducer,

70
00:04:57.269 --> 00:05:02.424
and that is gonna take state,
which is gonna start

71
00:05:02.424 --> 00:05:07.229
out as initialState.users and some action.

72
00:05:09.289 --> 00:05:13.310
And this is why I like to use the
initialState as the default prop to each

73
00:05:13.310 --> 00:05:17.265
reducer, because I can just pull in
what I need rather than having one

74
00:05:17.265 --> 00:05:19.533
master initialState somewhere else.

75
00:05:19.533 --> 00:05:23.525
So you can imagine, as this grew,
that object would get very big for

76
00:05:23.525 --> 00:05:24.797
that initialState.

77
00:05:24.797 --> 00:05:27.890
I'd like to just kind of break it up
with the reducer that's using it.

78
00:05:27.890 --> 00:05:30.741
So we have the userReducer,
which is gonna take the state,

79
00:05:30.741 --> 00:05:33.608
which is the users on that larger object,
and some action.

80
00:05:33.608 --> 00:05:37.870
We can just pull this in, and
we're gonna have to refactor it slightly.

81
00:05:37.870 --> 00:05:40.123
If I make a boo boo, someone notice.

82
00:05:40.123 --> 00:05:47.575
So we've got the ADD_USER, and now,
really, this is just the actual users.

83
00:05:53.298 --> 00:05:59.838
Great, and we can do something similar
here, so we don't wanna say dot users.

84
00:05:59.838 --> 00:06:03.951
One thing we could do here, since we
know it's just users since this is just

85
00:06:03.951 --> 00:06:07.558
a variable, let's just make our
lives easier and call it users.

86
00:06:07.558 --> 00:06:12.032
And for the taskRreducer,

87
00:06:13.054 --> 00:06:21.057
We'll say tasks initialState.tasks,
and the action.

88
00:06:24.475 --> 00:06:26.859
And we'll pull in this code right her.

89
00:06:30.753 --> 00:06:36.471
And now,
this is simply this array like that.

90
00:06:38.443 --> 00:06:42.878
And so, we've made each one of
these reduces way simpler, and

91
00:06:42.878 --> 00:06:48.318
now we're gonna get effectively the same
result by making what our reducer,

92
00:06:48.318 --> 00:06:54.244
we'll just say combineReducers,

93
00:06:54.244 --> 00:07:01.004
and we're gonna say that the users part
of the tree is gonna use userReducer.

94
00:07:02.929 --> 00:07:08.564
And the tasks part of the tree
is gonna use the taskReducer.

95
00:07:08.564 --> 00:07:09.196
These are all singular.
So,

96
00:07:09.196 --> 00:07:13.584
if you think about the shape of
the object in the initialState, right,

97
00:07:13.584 --> 00:07:15.577
we had users and tasks, right?

98
00:07:15.577 --> 00:07:21.039
And so, we're basically providing that
same shape to what combineReducers gets.

99
00:07:21.039 --> 00:07:25.333
So instead of having one that took the
entire object, it's gonna be like, cool,

100
00:07:25.333 --> 00:07:29.316
I'm gonna create a reducer that, for
this section of the tree, for users,

101
00:07:29.316 --> 00:07:33.580
is gonna use a userReducer, and for
tasks is gonna use the taskReducer, right?

102
00:07:33.580 --> 00:07:37.952
So you're basically defining
what reducer should be used

103
00:07:37.952 --> 00:07:43.418
on this larger state tree and
breaking it up into smaller pieces.

104
00:07:43.418 --> 00:07:45.459
&gt;&gt; Nested like user dot.

105
00:07:45.459 --> 00:07:50.562
Yeah, it's basically you're just kinda
mapping it to the shape of your state.

106
00:07:50.562 --> 00:07:51.627
It can be as nested as you need.

107
00:07:51.627 --> 00:07:56.417
Now, clearly, the further you nest,
the more complicated it's going to get, so

108
00:07:56.417 --> 00:08:00.250
the advice that I would give in that
sense is as much as you need to and

109
00:08:00.250 --> 00:08:02.726
as little as you can get away with, right?

110
00:08:02.726 --> 00:08:05.136
The flatter your object is,
the easier it's going to be.

111
00:08:05.136 --> 00:08:08.917
Because imagine, could you
continue to nest combineReducers?

112
00:08:08.917 --> 00:08:12.664
Yes, however, when you get
that entire state object back,

113
00:08:12.664 --> 00:08:14.721
guess who's responsible now for

114
00:08:14.721 --> 00:08:19.883
navigating down that entire tree to get to
the piece of data that they need, right?

115
00:08:19.883 --> 00:08:23.296
The flatter you can keep the object,
the easier it is for

116
00:08:23.296 --> 00:08:27.150
both storing data as well as
getting the data back out, right?

117
00:08:27.150 --> 00:08:30.503
It might make sense in your UI that
maybe all this stuff is nested.

118
00:08:30.503 --> 00:08:35.340
Well, a lot of times, keeping that
stuff as flat as you can get away with,

119
00:08:35.340 --> 00:08:39.649
nest as much as you need to, and
as little as you can get away with.

120
00:08:41.825 --> 00:08:46.422
Great, so we've got a reducer here.

121
00:08:48.573 --> 00:08:50.296
We can just pass that in
since they'll have their own.

122
00:08:54.714 --> 00:08:57.025
What's the issue here?

123
00:08:57.025 --> 00:09:00.791
Unexpected token.

124
00:09:04.941 --> 00:09:06.865
&gt;&gt; I guess.

125
00:09:06.865 --> 00:09:07.911
&gt;&gt; What is that?

126
00:09:07.911 --> 00:09:09.987
Yeah, perfect.

127
00:09:13.677 --> 00:09:18.303
So, now the store, if we wanna say console

128
00:09:18.303 --> 00:09:23.066
log define string during initialization.

129
00:09:30.188 --> 00:09:32.769
Reducer users returned undefined
during initialization.

130
00:09:32.769 --> 00:09:38.395
If the state passes to
the reducer is undefined,

131
00:09:38.395 --> 00:09:43.155
I broke one of my cardinal
rules from before.

132
00:09:43.155 --> 00:09:47.276
Does anyone see what rule I broke?

133
00:09:47.276 --> 00:09:47.850
Yeah?

134
00:09:47.850 --> 00:09:49.145
&gt;&gt; You're not returning default.

135
00:09:49.145 --> 00:09:50.379
So when we started off,

136
00:09:50.379 --> 00:09:54.537
you said that by default I'm just gonna
return the state that gets passed to it.

137
00:09:54.537 --> 00:09:56.600
You're not returning the default state-
&gt;&gt; Yep, exactly.

138
00:09:56.600 --> 00:10:01.830
&gt;&gt; So the if statement was not being run,
you're not returning.

139
00:10:01.830 --> 00:10:04.130
&gt;&gt; Exactly, exactly, right?

140
00:10:04.130 --> 00:10:08.171
In the case that we don't hit
the conditional, this function returns

141
00:10:08.171 --> 00:10:12.430
undefined, so we need to make sure
that we return, in this case, users.

142
00:10:12.430 --> 00:10:15.197
And in the other case, tasks.

143
00:10:17.959 --> 00:10:19.983
Cool, and then I gotta finish
typing the word console.log.

144
00:10:21.720 --> 00:10:25.814
And this one will do store.getState.

145
00:10:28.930 --> 00:10:34.176
And you can see that I have the same
basic shape to my state as I had before,

146
00:10:34.176 --> 00:10:36.680
even though I split it up, right?

147
00:10:36.680 --> 00:10:40.607
And so now, the really
interesting thing about this, and

148
00:10:40.607 --> 00:10:46.138
one of the things I really love about the
way that the Redux implementation works,

149
00:10:46.138 --> 00:10:49.505
is all of the actions
whether they are ADD_TASK or

150
00:10:49.505 --> 00:10:53.610
ADD_USER will flow through
every combined reducer.

151
00:10:53.610 --> 00:10:58.599
So for instance, if it's like add task
to user, both of those smaller reducers

152
00:10:58.599 --> 00:11:02.890
will get the action so
they can both kinda handle it separately.

153
00:11:02.890 --> 00:11:05.754
You might have take an assigned
to property on the task, and

154
00:11:05.754 --> 00:11:07.542
update it to point towards the user.

155
00:11:07.542 --> 00:11:09.198
You might take the task ID and

156
00:11:09.198 --> 00:11:12.383
put it on an array of tasks for
the user as well, right?

157
00:11:12.383 --> 00:11:16.998
Every action flows through every single
reducer, which means to do a thing,

158
00:11:16.998 --> 00:11:19.696
you don't have to figure
multiple actions to

159
00:11:19.696 --> 00:11:22.394
handle every single step
that you need to do.

160
00:11:22.394 --> 00:11:27.104
You can fire one action and have that
action flow through all of the combined

161
00:11:27.104 --> 00:11:30.560
reducers and
be able to update the state accordingly.

162
00:11:30.560 --> 00:11:34.637
So it's very similar to
having one giant reducer but

163
00:11:34.637 --> 00:11:41.042
you won't end up being very displeased
with yourself as your application grows.

164
00:11:41.042 --> 00:11:43.224
Great.
&gt;&gt; What if same

165
00:11:44.559 --> 00:11:50.243
attaining the same property?

166
00:11:50.243 --> 00:11:50.967
Right?

167
00:11:50.967 --> 00:11:57.330
&gt;&gt; So the question was what if different
reducers change the same property?

168
00:11:57.330 --> 00:11:59.606
The great news is that they can't.

169
00:11:59.606 --> 00:12:02.914
Because if you look at the user reducer,

170
00:12:02.914 --> 00:12:08.084
it only has access to the users
part of this state tree, right?

171
00:12:08.084 --> 00:12:11.461
And the tasks reducer only has access
the task part of the state tree.

172
00:12:11.461 --> 00:12:15.815
They've basically taken our large
state tree for our application and

173
00:12:15.815 --> 00:12:18.617
divided it up into a bunch
of smaller pieces so

174
00:12:18.617 --> 00:12:23.062
that each one of these reducers handles
its own little part of the tree.

175
00:12:23.062 --> 00:12:26.714
So two different users can't modify the
same piece of state cuz they don't have

176
00:12:26.714 --> 00:12:27.380
access to it.

