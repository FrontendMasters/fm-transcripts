WEBVTT

1
00:00:00.240 --> 00:00:01.380
What questions can I answer?

2
00:00:03.170 --> 00:00:03.910
So yeah.

3
00:00:03.910 --> 00:00:08.380
&gt;&gt; Regarding the holding
cycle you recommend anyway?

4
00:00:08.380 --> 00:00:10.000
Is there a standard way of doing it?

5
00:00:12.060 --> 00:00:16.932
Like, for example, if you want to
be able to know the internet has

6
00:00:16.932 --> 00:00:20.230
been fulfilled or there is an error.

7
00:00:20.230 --> 00:00:20.730
&gt;&gt; Yep.

8
00:00:20.730 --> 00:00:22.800
&gt;&gt; How do you go around doing this?

9
00:00:22.800 --> 00:00:26.240
&gt;&gt; Is there like a standard
way of doing this?

10
00:00:26.240 --> 00:00:30.586
&gt;&gt; Yeah,
&gt;&gt; Is like everyone is different so.

11
00:00:30.586 --> 00:00:34.162
&gt;&gt; Yeah, that's the tricky part with
especially the lower level redox,

12
00:00:34.162 --> 00:00:37.315
which is like it's whatever
code you write, right?

13
00:00:37.315 --> 00:00:42.715
Redux toolkit is going to automatically
fire that pending version of the event.

14
00:00:42.715 --> 00:00:47.117
Then it's gonna fire you this filter
the error one I think in the absence of

15
00:00:47.117 --> 00:00:48.258
a better pattern.

16
00:00:48.258 --> 00:00:51.957
Taking an officially sanctioned
library like Redux toolkit and

17
00:00:51.957 --> 00:00:54.980
doing what they do is
probably a great idea, right?

18
00:00:54.980 --> 00:00:57.650
But if you were to do it by hand,
you would have to fire each one of those.

19
00:00:57.650 --> 00:01:02.072
So it's basically cool fire
the pending event effectively,

20
00:01:02.072 --> 00:01:04.810
like before we launch the promise.

21
00:01:04.810 --> 00:01:08.150
So you'd do it here,
you'd fire your dispatch upending event.

22
00:01:08.150 --> 00:01:15.574
This is a pseudo-code now you
dispatch a pending event here.

23
00:01:15.574 --> 00:01:20.920
Dispatct the action,
you would then catch the air.

24
00:01:20.920 --> 00:01:23.240
If there was an error,
you dispatch an error event,

25
00:01:23.240 --> 00:01:27.057
otherwise this special filled when you
basically do the same life-cycle yourself.

26
00:01:27.057 --> 00:01:29.990
All the Redux toolkit is doing for
you is taking care of that.

27
00:01:29.990 --> 00:01:32.040
Now, in terms of what do you do?

28
00:01:32.040 --> 00:01:32.903
It all depends if you're

29
00:01:32.903 --> 00:01:34.970
just doing something lightweight
dunk works really well.

30
00:01:34.970 --> 00:01:38.153
If not, it's things like Redux observable,

31
00:01:38.153 --> 00:01:43.550
you can kind of like change the flow of
different actions into dispatch stuff.

32
00:01:43.550 --> 00:01:45.700
But really, if you think about it,

33
00:01:45.700 --> 00:01:51.300
you have following the promise life-cycle
isn't the worst idea in the world, right?

34
00:01:51.300 --> 00:01:53.660
Like you've got a pending promise.

35
00:01:53.660 --> 00:01:57.070
You've got to fulfill a promise and you've
got either an error or rejected promise.

36
00:01:57.070 --> 00:01:59.529
Those are really the three states
that you need to worry about.

37
00:02:00.910 --> 00:02:02.115
And for the most part,

38
00:02:02.115 --> 00:02:06.447
I would just since if you're especially
if you're using promises or whatever.

39
00:02:06.447 --> 00:02:10.185
Having the actions based like that
very core thing we talked about in

40
00:02:10.185 --> 00:02:11.957
the beginning of the workshop,

41
00:02:11.957 --> 00:02:15.650
which is like your action should
be just the facts, right?

42
00:02:15.650 --> 00:02:22.530
And naming the action types based on what
happened inherently makes sense, right?

43
00:02:22.530 --> 00:02:26.420
Hey, if fulfilled, it's pending,
it errored and kind of just going with

44
00:02:26.420 --> 00:02:30.730
the same promise life-cycle,
is probably your best path forward.

45
00:02:30.730 --> 00:02:37.510
&gt;&gt; What about Redux, observable aware,
they will be, injected.

46
00:02:37.510 --> 00:02:39.250
&gt;&gt; Yeah.
&gt;&gt; Slides.

47
00:02:39.250 --> 00:02:45.470
&gt;&gt; Yeah, so with Redux observable, which
is honestly one of my favorite libraries.

48
00:02:45.470 --> 00:02:49.460
So Redux observable installs
itself as middleware, right?

49
00:02:49.460 --> 00:02:54.561
And just as we saw the very beginning
of this workshop, middleware can listen

50
00:02:54.561 --> 00:03:00.010
to any action and they can either consume
that action it can let it pass through.

51
00:03:00.010 --> 00:03:01.750
It can dispatch more actions.

52
00:03:01.750 --> 00:03:06.623
So Redux observable sits like
alongside the rest of this listening

53
00:03:06.623 --> 00:03:11.408
to every action that comes through
then through your RX j s Epics or

54
00:03:11.408 --> 00:03:16.036
icon pipelines,
they're called Epics in Redux observable.

55
00:03:16.036 --> 00:03:20.390
Will listen be like based on this, I wanna
do these, this observable workflow and

56
00:03:20.390 --> 00:03:24.130
then I wanna spit out these other
actions that will then go into Redux.

57
00:03:24.130 --> 00:03:30.760
So it almost sits alongside dispatch
listening to everything and

58
00:03:30.760 --> 00:03:35.110
deciding what it wants
to do based on that.

59
00:03:35.110 --> 00:03:41.680
&gt;&gt; And the other said bigs,
organized like accordion state slices for.

60
00:03:41.680 --> 00:03:43.110
&gt;&gt; So it's completely separate from that.

61
00:03:43.110 --> 00:03:45.885
It's just again, it's only listening
to the actions you can get

62
00:03:45.885 --> 00:03:48.914
the entire store but is completely
removed from either Redux toolkit or

63
00:03:48.914 --> 00:03:51.160
even your read out the shape
of your Redux state.

64
00:03:51.160 --> 00:03:54.295
It is solely listening to all
the actions that flow through.

65
00:03:54.295 --> 00:03:55.932
You do have access to the store,

66
00:03:55.932 --> 00:03:59.520
which is again, like all this did
was use combined reducers, right?

67
00:03:59.520 --> 00:04:03.220
So, it's using this like Redux tokens
using the same Redux stuff on the hood but

68
00:04:03.220 --> 00:04:06.090
it like Redux observable
is completely agnostic.

69
00:04:06.090 --> 00:04:10.800
To any of your slices or anything along
those lines is just listening to actions.

70
00:04:10.800 --> 00:04:12.458
Every action that flows through,

71
00:04:12.458 --> 00:04:15.350
flows through all of your
epics just like reducers.

72
00:04:15.350 --> 00:04:19.940
It flows through all of your epics and the
epics that care will do something with it.

73
00:04:19.940 --> 00:04:23.390
They'll maybe dispatch more actions or
whatever.

74
00:04:23.390 --> 00:04:25.840
They'll throttle the actions,
so on and so forth.

75
00:04:25.840 --> 00:04:30.396
But they're just listening to the flow
of actions through your application and

76
00:04:30.396 --> 00:04:35.230
then using reactive programming through RX
JS to figure out what to do based on that.

77
00:04:35.230 --> 00:04:39.727
&gt;&gt; Do you have any thoughts like what the
community decided to go away from that?

78
00:04:39.727 --> 00:04:43.880
They keep saying build your own
kind of state management solution.

79
00:04:43.880 --> 00:04:44.550
&gt;&gt; Yeah.

80
00:04:44.550 --> 00:04:49.306
&gt;&gt; We kind of follow that, but we came
to the point that we find ourselves

81
00:04:49.306 --> 00:04:53.600
like replicating all the APIs and
new Josie we already have.

82
00:04:53.600 --> 00:04:59.410
And that wasn't like super beneficial, I
wonder if you have more insights out that.

83
00:04:59.410 --> 00:05:02.690
&gt;&gt; I mean, some of this is we're gonna
enter the realm of pure conjecture.

84
00:05:02.690 --> 00:05:07.532
Sometimes the user does always
build your own is a thing

85
00:05:07.532 --> 00:05:12.730
that you very frequently
hear in a new library.

86
00:05:12.730 --> 00:05:14.820
Right, cuz there isn't everything yet,
right?

87
00:05:14.820 --> 00:05:15.640
It's you should build your own.

88
00:05:15.640 --> 00:05:17.515
And then enough people say that and
then, okay,

89
00:05:17.515 --> 00:05:20.160
maybe we need an abstraction around this,
right?

90
00:05:20.160 --> 00:05:24.265
I've been, been around long enough
that very early libraries and

91
00:05:24.265 --> 00:05:27.945
frameworks, yeah, you can just,
we have a plugin API.

92
00:05:27.945 --> 00:05:31.440
Build your own and do it yourself is
very I think you hear very early on.

93
00:05:31.440 --> 00:05:34.884
And then what happens is, and
there's a reason for this, that works.

94
00:05:34.884 --> 00:05:36.096
Which is the answer is like,

95
00:05:36.096 --> 00:05:39.660
we haven't built enough large scale
applications to know what the answer is.

96
00:05:39.660 --> 00:05:42.507
So what happens is people go and
build their own,

97
00:05:42.507 --> 00:05:45.850
we start to realize what
the best practices are, right?

98
00:05:45.850 --> 00:05:49.390
Rather than somebody sitting in
their ivory tower going like, okay,

99
00:05:49.390 --> 00:05:53.100
I have created a new library, and
this is what we should all do.

100
00:05:53.100 --> 00:05:55.909
Nobody really knows yet, what happens
is we all go and we build things.

101
00:05:57.040 --> 00:06:00.880
Some of them are, some of them ended up
working better than the others, right?

102
00:06:00.880 --> 00:06:04.672
And we start to align on
the practices that have worked and

103
00:06:04.672 --> 00:06:09.070
start to avoid the things that
got us into a lot of trouble.

104
00:06:09.070 --> 00:06:13.920
Right and so a lot of times in
a very early stage we don't know.

105
00:06:13.920 --> 00:06:17.203
Right, and so it's try stuff out and
then we start to learn enough things.

106
00:06:17.203 --> 00:06:20.850
Okay, everyone should probably
do the same seven things.

107
00:06:20.850 --> 00:06:25.320
What if we begin to pull them all together
into an abstraction that help people not

108
00:06:25.320 --> 00:06:27.870
have to make these decisions all the time?

109
00:06:27.870 --> 00:06:32.440
I think a lot of libraries walk that
convention over configuration, right?

110
00:06:32.440 --> 00:06:36.440
Convention is there are the rails
way of doing things.

111
00:06:36.440 --> 00:06:40.160
There is the Ember way of doing things,
you very much go with the flow.

112
00:06:40.160 --> 00:06:44.070
Redux toolkit is a little bit closer
to that convention side, which is cool.

113
00:06:44.070 --> 00:06:46.520
This is the Redux toolkit
way of doing things.

114
00:06:46.520 --> 00:06:49.990
There's that extra reducers escape hatch,
which is totally neat.

115
00:06:49.990 --> 00:06:53.650
But early on is more like hey,
here's a very lightweight thing.

116
00:06:53.650 --> 00:06:55.040
You can use it any way you want.

117
00:06:55.040 --> 00:06:58.595
It's a lot of times a lot
easier to get started with and

118
00:06:58.595 --> 00:07:01.440
wrap your head around if that makes sense.

119
00:07:02.660 --> 00:07:07.880
&gt;&gt; And Steve,
could you please give a piece of advice?

120
00:07:07.880 --> 00:07:12.921
For the medium large project,
what is the best

121
00:07:12.921 --> 00:07:18.091
like solution of state
management using raj's

122
00:07:18.091 --> 00:07:23.274
Redux observable is Redux
still a good choice.

123
00:07:23.274 --> 00:07:27.510
Or are there any new libraries?

124
00:07:27.510 --> 00:07:28.070
&gt;&gt; Yeah.

125
00:07:28.070 --> 00:07:29.620
&gt;&gt; If any insights regarding that.

126
00:07:31.590 --> 00:07:34.740
&gt;&gt; So there's always a new libraries,
in JavaScript, right?

127
00:07:34.740 --> 00:07:39.877
The big question is is really interesting
to watch as I've been doing this for

128
00:07:39.877 --> 00:07:45.210
longer I used to be like, what is the new
hot thing right, let me go use that.

129
00:07:45.210 --> 00:07:49.738
And as I get a little bit older,
I get a little bit more boring,

130
00:07:49.738 --> 00:07:53.309
we in the kind of refactoring
re architecture and

131
00:07:53.309 --> 00:07:59.774
of that drag-and-drop email editor that
my team and I started working on in 2018.

132
00:07:59.774 --> 00:08:04.346
Now, we were trying to rescue
just like this, application had

133
00:08:04.346 --> 00:08:09.367
started out as a rails app that then
some people threw some jQuery on.

134
00:08:09.367 --> 00:08:11.486
But then they threw a react
app on top of that, and

135
00:08:11.486 --> 00:08:13.630
it was like their first react application.

136
00:08:13.630 --> 00:08:15.835
And it was all of these things
stacked on top of each other,

137
00:08:15.835 --> 00:08:18.220
to the point where we couldn't
move anything anymore.

138
00:08:18.220 --> 00:08:22.125
And then when the backend was moving
completely to AWS, we had to refactor so

139
00:08:22.125 --> 00:08:26.400
much that it made more sense to
kind of like lay a new foundation.

140
00:08:26.400 --> 00:08:28.730
We did the research we looked
at are we gonna use thunks?

141
00:08:28.730 --> 00:08:30.180
Are we going to use Redux saga?

142
00:08:30.180 --> 00:08:34.790
We're gonna use Redux observable,
we did a bunch of proof of concepts.

143
00:08:36.090 --> 00:08:40.720
We ended up picking Redux observable for
us and it turned into like.

144
00:08:40.720 --> 00:08:44.320
We haven't regretted that decision, right?

145
00:08:44.320 --> 00:08:46.717
When I've had teams move to
one of the other code bases,

146
00:08:46.717 --> 00:08:48.620
they want to bring that with them.

147
00:08:48.620 --> 00:08:52.782
So, new libraries and come out in I'm hard
pressed to the idea that I could make

148
00:08:52.782 --> 00:08:56.379
the idea that we can make a technology
choice and three years later,

149
00:08:56.379 --> 00:08:57.220
not regret it.

150
00:08:58.590 --> 00:09:03.407
Is not common, right, and the idea
that has worked in this fairly large

151
00:09:03.407 --> 00:09:06.960
application is pretty,
pretty powerful, right?

152
00:09:06.960 --> 00:09:10.200
Like is argumentation perfect, no, right?

153
00:09:10.200 --> 00:09:13.595
Do newer engineers copy and
paste some of those epics and

154
00:09:13.595 --> 00:09:15.773
just tweak things in a lot of cases.

155
00:09:15.773 --> 00:09:20.729
Absolutely, but generally speaking,
it has stood the test of time for us and

156
00:09:20.729 --> 00:09:24.480
has not been a major source
of bugs in our application.

157
00:09:24.480 --> 00:09:28.150
So that is my personal opinion that
doesn't, a lot of this stuff becomes

158
00:09:28.150 --> 00:09:31.460
the point of subjectiveness
after a certain point as well.

159
00:09:31.460 --> 00:09:35.552
But, I've been pretty pleased with using
Redux for really complicated state

160
00:09:35.552 --> 00:09:39.520
management as long as Redux observable
to deal with all of the other things.

161
00:09:39.520 --> 00:09:43.742
Now, to be clear, Redux thunk might be
fine if you're just like doing some

162
00:09:43.742 --> 00:09:47.980
basic CRUD operations for us,
we've got like autosave and drag and drop.

163
00:09:47.980 --> 00:09:50.248
We need to do all sorts of
throttling to bouncing for

164
00:09:50.248 --> 00:09:52.055
all sorts of different kinds of things.

165
00:09:52.055 --> 00:09:57.921
And some of our API's involve kind of very
complicated state machine logic that,

166
00:09:57.921 --> 00:10:01.850
that having Redux
observable helps us with.

167
00:10:01.850 --> 00:10:06.770
It could be overkill if you're like
I needed to fetch some news articles

168
00:10:06.770 --> 00:10:09.733
from an API and
put them on this page right?

169
00:10:09.733 --> 00:10:11.860
Maybe you don't need all
that we definitely did.

170
00:10:11.860 --> 00:10:16.459
And even in the sophistication of that
application have not learned to regret it

171
00:10:16.459 --> 00:10:17.702
yet, knock on wood.

172
00:10:19.425 --> 00:10:24.024
&gt;&gt; And the monolith
architecture microphone dance.

173
00:10:24.024 --> 00:10:25.567
&gt;&gt; We do a mono repo.

174
00:10:25.567 --> 00:10:31.398
&gt;&gt; One mono repo with micro flow tensor so
just a monolith right but yeah, I guess.

175
00:10:31.398 --> 00:10:36.685
&gt;&gt; If you say monolith at a tech company,
they don't let you do it.

176
00:10:36.685 --> 00:10:38.335
So you call it a monolith and
then everyone's happier.

177
00:10:39.885 --> 00:10:44.720
&gt;&gt; Because currently at our project we
are writing into micro front ends and

178
00:10:44.720 --> 00:10:50.030
we are searching for the best solution
like to encapsulate state in our macro for

179
00:10:50.030 --> 00:10:52.026
dance, and at the same time.

180
00:10:52.026 --> 00:10:56.199
To share the state between these
microphones at some shareable state, and

181
00:10:56.199 --> 00:10:59.115
we're just wondering,
which is the best choice for

182
00:10:59.115 --> 00:11:01.990
a micro front ends architecture?

183
00:11:01.990 --> 00:11:03.070
&gt;&gt; I don't know.

184
00:11:03.070 --> 00:11:07.526
I tried to like we originally wanted to
use a micro front end architecture, and

185
00:11:07.526 --> 00:11:10.039
for the life of us
couldn't figure out one.

186
00:11:10.039 --> 00:11:12.490
Didn't, when you start
drawing the diagram and

187
00:11:12.490 --> 00:11:16.090
it starts getting you can tell
like this is getting complicated.

188
00:11:16.090 --> 00:11:20.609
So then the decision was stick with
a single repo and a single monolith and

189
00:11:20.609 --> 00:11:23.650
then, we'll deal with this later.

190
00:11:23.650 --> 00:11:27.670
And it's been three years, and
it's not the problem, right?

191
00:11:27.670 --> 00:11:30.258
We solved all the complaints individually,

192
00:11:30.258 --> 00:11:33.940
with the monorail there's
only one staging environment.

193
00:11:33.940 --> 00:11:37.731
So what we did was we built an
infrastructure that every PR gets deployed

194
00:11:37.731 --> 00:11:39.330
to his own S3 bucket.

195
00:11:39.330 --> 00:11:44.080
And so you have per PR staging
of the front end assets right?

196
00:11:44.080 --> 00:11:48.400
So now nobody was blocked by one
staging environment anymore, right.

197
00:11:48.400 --> 00:11:51.056
We can't deploy a once well
actually master would go so

198
00:11:51.056 --> 00:11:53.029
if some something passed all the tests.

199
00:11:53.029 --> 00:11:56.668
We just solved all the problems that
people had with a mono repo rather than

200
00:11:56.668 --> 00:12:00.080
saying that the mono repo,
the monolith was the problem per se.

201
00:12:00.080 --> 00:12:04.549
Because yeah, a lot of our microservices
on the back end makes total sense because

202
00:12:04.549 --> 00:12:06.573
you can have these isolated pieces.

203
00:12:06.573 --> 00:12:10.504
But we have to eventually at the end of
the day expose a consistent UI to our

204
00:12:10.504 --> 00:12:11.670
customers, right?

205
00:12:11.670 --> 00:12:14.990
And it gets really hard to do that when
everything's kind of fragmented, right?

206
00:12:14.990 --> 00:12:19.864
We have other large code bases that are
currently micro front ends that used to be

207
00:12:19.864 --> 00:12:20.670
a monolith.

208
00:12:20.670 --> 00:12:24.890
And guess where they're going now they're
going back into a monolith again, right?

209
00:12:24.890 --> 00:12:27.670
Because it comes incredibly hard,
now you're updating.

210
00:12:27.670 --> 00:12:31.240
Okay, you have all these micro front ends
that are all running a slightly different

211
00:12:31.240 --> 00:12:32.314
version of react right?

212
00:12:32.314 --> 00:12:35.250
Or all and sharing state
between them gets really hard.

213
00:12:35.250 --> 00:12:37.882
So we've opted just not
to do that because I and

214
00:12:37.882 --> 00:12:41.325
I interviewed a lot of front end
architects a lot of companies

215
00:12:41.325 --> 00:12:45.465
as we're doing this, and ever the only,
we struggled with it, right?

216
00:12:45.465 --> 00:12:48.769
Nobody had a really great answer and
sometimes were we tried it and failed and

217
00:12:48.769 --> 00:12:49.860
went back right.

218
00:12:49.860 --> 00:12:52.609
That doesn't mean that it's
an unsolvable problem, but

219
00:12:52.609 --> 00:12:56.270
I haven't seen a particularly compelling
solution to the problem just yet.

220
00:12:59.980 --> 00:13:04.746
&gt;&gt; Yeah, that one remark regarding sharing

221
00:13:04.746 --> 00:13:10.329
dependencies react version,
so currently is,

222
00:13:10.329 --> 00:13:15.231
it in part five others
model federation and

223
00:13:15.231 --> 00:13:18.238
delighted ours to cache.

224
00:13:18.238 --> 00:13:22.486
Share some dependencies
common dependencies and

225
00:13:22.486 --> 00:13:24.913
various assembler logic for

226
00:13:24.913 --> 00:13:30.450
choosing the proper versions of
the packages so try this one.

227
00:13:30.450 --> 00:13:32.320
&gt;&gt; Yeah, it gets it's tricky, right?

228
00:13:32.320 --> 00:13:36.040
It's definitely I see the benefits,
I see why we all want to do it.

229
00:13:36.040 --> 00:13:39.220
I just don't know if we've totally
figured it out yet, right?

230
00:13:39.220 --> 00:13:41.670
Both of them have most things,
both of them have trade-offs.

231
00:13:41.670 --> 00:13:43.917
There's not necessarily a right answer,
and

232
00:13:43.917 --> 00:13:47.040
it becomes about which set of
trade offs you're happier with.

233
00:13:47.040 --> 00:13:48.078
All right for us,

234
00:13:48.078 --> 00:13:52.520
we decided just keep it in one repo mostly
cuz we just got a bad sense about it.

235
00:13:52.520 --> 00:13:58.710
But I know clearly the architecture works
for some people because it exists, right?

236
00:13:59.970 --> 00:14:02.190
And the tooling, we're we're
constantly working on the drone.

237
00:14:02.190 --> 00:14:05.731
I wouldn't be surprised
if in short order or

238
00:14:05.731 --> 00:14:11.870
even today becomes more of a possibility
than it was for us back in 2018.

239
00:14:11.870 --> 00:14:14.760
&gt;&gt; Steve, thank you.

240
00:14:14.760 --> 00:14:15.680
&gt;&gt; My pleasure.

241
00:14:15.680 --> 00:14:18.439
Thank you all so much.

242
00:14:18.439 --> 00:14:20.214
&gt;&gt; Yeah, it was nice to meet you.

243
00:14:20.214 --> 00:14:20.935
&gt;&gt; You too.

244
00:14:20.935 --> 00:14:24.350
Late after watching your courses offline.

245
00:14:24.350 --> 00:14:28.520
So it's my first experience
watching the line.

246
00:14:28.520 --> 00:14:31.010
&gt;&gt; Awesome, it's good to meet y'all.

247
00:14:31.010 --> 00:14:37.180
&gt;&gt; I am enjoying yours sense
of humor to experience, yeah.

248
00:14:37.180 --> 00:14:38.790
&gt;&gt; Awesome, thank you so much.

249
00:14:38.790 --> 00:14:40.725
Thank you all for joining me and

250
00:14:40.725 --> 00:14:44.010
spending eight hours of your
life together as a group

