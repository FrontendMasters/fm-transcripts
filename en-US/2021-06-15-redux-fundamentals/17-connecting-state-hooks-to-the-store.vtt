WEBVTT

1
00:00:00.140 --> 00:00:03.820
So redux is now bound to react.

2
00:00:03.820 --> 00:00:05.380
We're not doing anything with this.

3
00:00:05.380 --> 00:00:08.042
If we were to go through
the code base right now,

4
00:00:08.042 --> 00:00:12.380
we can say is effectively a bunch
of particularly static components.

5
00:00:12.380 --> 00:00:17.066
But what we'd like to do at this point is
to begin to pull in that data that we have

6
00:00:17.066 --> 00:00:20.460
from our state and
actually see it in place.

7
00:00:20.460 --> 00:00:25.207
One of things I will point out
is we have count equals zero, so

8
00:00:25.207 --> 00:00:30.698
first thing you have to do is to actually
take this hard coded of zero and

9
00:00:30.698 --> 00:00:36.842
replace it with actual state from our
store, so we go ahead and we'll do that,

10
00:00:36.842 --> 00:00:43.020
so in my counter the first example am
gonna hox, so I have this hard coded zero.

11
00:00:43.020 --> 00:00:50.220
What I'd love to do is I'd love to pull
in the count from my state instead.

12
00:00:50.220 --> 00:00:51.680
This is pretty straightforward.

13
00:00:52.830 --> 00:00:55.630
You can actually use this use Selector.

14
00:00:55.630 --> 00:00:57.361
And what is the selector,

15
00:00:57.361 --> 00:01:02.920
a selector like most things in Redux
is a fancy word for a function, right?

16
00:01:02.920 --> 00:01:06.184
You're saying like,
okay with the entire state object,

17
00:01:06.184 --> 00:01:09.326
what do you actually want
from the entire state object?

18
00:01:09.326 --> 00:01:13.170
So we'll say only take the entire
state object go get state count.

19
00:01:13.170 --> 00:01:17.380
Right and that will now return zero.

20
00:01:17.380 --> 00:01:19.580
And this hook has a bunch of nice things,

21
00:01:19.580 --> 00:01:23.336
which is some amount of like memorization
to keep track of like if this

22
00:01:23.336 --> 00:01:26.540
hasn't changed try not to rerun
this more than we have to.

23
00:01:26.540 --> 00:01:28.630
And so now this count is in place.

24
00:01:28.630 --> 00:01:32.350
I can go ahead into my reducer and
just to verify that it works.

25
00:01:32.350 --> 00:01:35.589
We'll change this to like 400 and

26
00:01:35.589 --> 00:01:41.555
we'll look at our application and
you can see that it is now 400.

27
00:01:41.555 --> 00:01:46.435
We are now, we have state from Redux
already into our react application

28
00:01:46.435 --> 00:01:51.555
the kind of cool thing that I can do is
since I have the full reducer wired up,

29
00:01:51.555 --> 00:01:54.630
I can go into these Redux dev tools.

30
00:01:54.630 --> 00:01:57.175
It's pretty small,
you can see this little keyboard,

31
00:01:57.175 --> 00:01:59.350
you can dispatch actions from the tools.

32
00:01:59.350 --> 00:02:01.370
So I'm going to dispatch
an action of the type increment.

33
00:02:02.690 --> 00:02:05.069
And you can see that effectively,

34
00:02:05.069 --> 00:02:08.710
everything is pretty much
wired up at this point.

35
00:02:08.710 --> 00:02:10.600
You can see all the actions logged.

36
00:02:10.600 --> 00:02:15.059
I can go ahead, rewind,
play it forward and backwards.

37
00:02:16.600 --> 00:02:21.118
With all the state changes, and this is
one of the really powerful paradigms,

38
00:02:21.118 --> 00:02:24.539
that the holy Redux model gives
you a very simple actions and

39
00:02:24.539 --> 00:02:27.619
just very like pure JavaScript
along the way is you can

40
00:02:27.619 --> 00:02:31.820
basically serialize each previous
state roll back and forward as well.

41
00:02:34.330 --> 00:02:37.390
Awesome, so it'd be great if we could
get the buttons working now, right?

42
00:02:37.390 --> 00:02:41.281
So I'm gonna do one button and
then you are going to do the rest and

43
00:02:41.281 --> 00:02:44.280
then we will reconvene and think about it.

44
00:02:44.280 --> 00:02:47.480
I'm gonna do set, and then you
are gonna do increment and decrement.

45
00:02:49.230 --> 00:02:50.490
So let's go take a look.

46
00:02:50.490 --> 00:02:52.832
Now in my counter, I've got these buttons,

47
00:02:52.832 --> 00:02:56.000
I'd love to add some on
click handlers to them.

48
00:02:56.000 --> 00:02:58.670
We can make this we'll play
with this a little bit.

49
00:02:58.670 --> 00:03:01.480
But we can also get a copy of dispatch.

50
00:03:01.480 --> 00:03:04.730
And this is a little bit different
than how use reducer works.

51
00:03:04.730 --> 00:03:08.520
Use reducer takes the reducer
in that component, right?

52
00:03:08.520 --> 00:03:11.000
And you could do in the context API.

53
00:03:12.230 --> 00:03:14.970
And then it gives you both the state and
the dispatch.

54
00:03:14.970 --> 00:03:18.293
However, like the way Redux works
is it gives you you select to get

55
00:03:18.293 --> 00:03:20.106
the state anywhere you need it, and

56
00:03:20.106 --> 00:03:23.410
then use dispatch to get you
the dispatch whenever you need it.

57
00:03:23.410 --> 00:03:27.030
And this will always be the same
store that dispatch object.

58
00:03:27.030 --> 00:03:28.070
So if you're worried about like.

59
00:03:28.070 --> 00:03:31.410
Memoization or caching,
this will work for you.

60
00:03:31.410 --> 00:03:35.125
So the question was, previously,
when I've used react Redux,

61
00:03:35.125 --> 00:03:39.515
I've used this Connect Method to wrap
a presentational component with all of

62
00:03:39.515 --> 00:03:44.176
the Redux goodness to pass everything as
props use selector is the replacement for

63
00:03:44.176 --> 00:03:48.230
map state to props, which we'll
talk about in a future section.

64
00:03:48.230 --> 00:03:52.400
Use dispatch is the replacement for
map dispatch to props.

65
00:03:52.400 --> 00:03:55.919
So if you've used react Redux before, and

66
00:03:55.919 --> 00:04:01.199
you've used the Connect API,
these two hooks are the parallels

67
00:04:01.199 --> 00:04:05.920
to those two objects with
the Connect API in react Redux.

68
00:04:07.050 --> 00:04:11.846
So I'm gonna take the button and
I'm just gonna say on click,

69
00:04:11.846 --> 00:04:17.190
on clock even will say, go ahead,
and we have to call dispatch.

70
00:04:17.190 --> 00:04:21.397
And you're thinking, isn't this a use
case for bind action creators, then yeah,

71
00:04:21.397 --> 00:04:23.540
it is and
we'll deal with that in a second.

72
00:04:24.550 --> 00:04:26.720
We say set and we'll set it to zero.

73
00:04:27.800 --> 00:04:30.010
We just pull in set from our actions.

74
00:04:31.800 --> 00:04:38.370
And I'll go back here and now hopefully,
I can reset it back to zero.

75
00:04:38.370 --> 00:04:41.997
So I've got set working,
you're gonna pull in increment and

76
00:04:41.997 --> 00:04:46.391
decrement then we'll take a look together
and we will add the ability to set

77
00:04:46.391 --> 00:04:50.040
the counter to a given value when
we come back in five minutes.

