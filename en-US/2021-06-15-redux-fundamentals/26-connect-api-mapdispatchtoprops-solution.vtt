WEBVTT

1
00:00:00.090 --> 00:00:03.908
Alright, so our job was to basically
do the the Redux pieces here about

2
00:00:03.908 --> 00:00:08.309
removing an item from the array of items,
as well as create the action creator and

3
00:00:08.309 --> 00:00:10.620
then hook it up to our component.

4
00:00:10.620 --> 00:00:14.495
So let's start with the action first,
which is again,

5
00:00:14.495 --> 00:00:19.525
I operate on the principle is my action
should have, like I said before,

6
00:00:19.525 --> 00:00:23.745
just the facts and
how little can I know about what happened?

7
00:00:23.745 --> 00:00:26.490
Because then I can handle the rest
of that in my reducer, right?

8
00:00:26.490 --> 00:00:30.073
The more than my actions are aware of the
trickier like the more people will rely on

9
00:00:30.073 --> 00:00:30.980
something.

10
00:00:30.980 --> 00:00:33.720
I think a lot of times about
what works very quickly when

11
00:00:33.720 --> 00:00:35.470
you're just doing a demo app.

12
00:00:35.470 --> 00:00:39.906
It's also important to think about, okay,
like if people are coming to expect that

13
00:00:39.906 --> 00:00:43.170
in the action, we have the entire
shape of the entire object.

14
00:00:43.170 --> 00:00:45.320
Do you ever change
the shape of the object?

15
00:00:45.320 --> 00:00:49.040
Well, now you have to find out both in
that l the actions are using that shape

16
00:00:49.040 --> 00:00:53.296
and everything that might have been coded
against it, versus by keeping your surface

17
00:00:53.296 --> 00:00:58.160
area incredibly small, which is like what
is the bare minimum that we need to know.

18
00:00:58.160 --> 00:00:59.110
Then we can go ahead and

19
00:00:59.110 --> 00:01:02.440
like our code base will hopefully
be more maintainable over time.

20
00:01:02.440 --> 00:01:06.736
So in terms of removing a menu item, the
bare minimum they need to know is what?

21
00:01:10.304 --> 00:01:11.157
&gt;&gt; The ID.

22
00:01:11.157 --> 00:01:15.394
&gt;&gt; Just the ID yeah exactly I just as long
as I have the ID I can figure out the rest

23
00:01:15.394 --> 00:01:16.350
in the reducer.

24
00:01:17.560 --> 00:01:25.019
So make remove item and we'll grab I used
you you I understand the not you ideas but

25
00:01:25.019 --> 00:01:29.956
like ID if you spread all
the props over ideas the thing

26
00:01:29.956 --> 00:01:34.675
that means something HTML Just
add this set counter

27
00:01:34.675 --> 00:01:39.172
here as well,and we should
be able to go ahead and

28
00:01:39.172 --> 00:01:43.240
now see that we have in the application.

29
00:01:43.240 --> 00:01:47.041
We'd love to get this working so
that when it hits submit,

30
00:01:47.041 --> 00:01:52.629
we can change the count.Originally, we can
just keep this as some amount of state but

31
00:01:52.629 --> 00:01:56.690
if you can actually And
the payload is I could just do the UU ID.

32
00:01:56.690 --> 00:01:58.340
I'm going to nest it as an object.

33
00:01:59.640 --> 00:02:03.052
So whatever UU ID is in,
whatever UU ID is passed in,

34
00:02:03.052 --> 00:02:06.520
prepare the payload with that value.

35
00:02:06.520 --> 00:02:11.706
And then in my reducer Pull

36
00:02:11.706 --> 00:02:16.892
in this item removed, and

37
00:02:16.892 --> 00:02:23.510
we'll say action type removed.

38
00:02:23.510 --> 00:02:27.380
Then, what's the best way to
get something out of an array?

39
00:02:27.380 --> 00:02:32.710
There is no like there's no reject
per se for an array in JavaScript.

40
00:02:32.710 --> 00:02:35.760
What is the strategy for getting to
immutably get something out of an array?

41
00:02:35.760 --> 00:02:39.560
Should clarify, there's ways to
mutate the array and splice it out.

42
00:02:39.560 --> 00:02:43.220
But what is a way to immutably
get something out of an array?

43
00:02:43.220 --> 00:02:46.799
&gt;&gt; I would say use from third
&gt;&gt; Yeah filters probably my best bet which

44
00:02:46.799 --> 00:02:50.530
feels a little counterintuitive, which is
I wanna remove one thing for the array.

45
00:02:50.530 --> 00:02:53.803
So, I'm gonna write a filter
that keeps everything that is

46
00:02:53.803 --> 00:02:55.720
not the thing I'm looking for.

47
00:02:55.720 --> 00:02:59.700
That's all we have with
the standard library in JavaScript.

48
00:02:59.700 --> 00:03:03.034
You could also choose to use
something like Lodash But

49
00:03:03.034 --> 00:03:07.790
it's not too bad just involves like
flipping the logic around a little bit.

50
00:03:07.790 --> 00:03:12.566
So here will return the state
which has all those items and

51
00:03:12.566 --> 00:03:15.960
it will filter it for each item.

52
00:03:15.960 --> 00:03:19.320
You get to stay in the array,

53
00:03:19.320 --> 00:03:25.095
if your item.uuid is
not the action.payload.

54
00:03:25.095 --> 00:03:26.870
.EU ID.

55
00:03:28.820 --> 00:03:32.210
&gt;&gt; So you got to stay and if you're
not the thing that we're looking for.

56
00:03:32.210 --> 00:03:35.757
All right, so we have all that in place
and now we just need to go ahead and

57
00:03:35.757 --> 00:03:37.840
make that singular menu item container.

58
00:03:38.965 --> 00:03:45.595
So we'll go in here, we'll say menu,
item container, dot js.

59
00:03:47.125 --> 00:03:50.945
And that's going to so
we'll have a map dispatch to props.

60
00:03:53.445 --> 00:03:58.445
Where the, if we look at the menu
item singular, it's expecting a menu.

61
00:03:58.445 --> 00:04:02.310
I am singular Expecting
this remove property.

62
00:04:02.310 --> 00:04:04.420
And I know it's all wired up
to deal with that already.

63
00:04:04.420 --> 00:04:07.741
So we need to figure out how
to get that action creator and

64
00:04:07.741 --> 00:04:12.290
wired in there as the remove prop
that this component is expecting.

65
00:04:12.290 --> 00:04:13.990
So map dispatch to props.

66
00:04:13.990 --> 00:04:18.848
We'll start by we use the function
syntax at first because we'll see why

67
00:04:18.848 --> 00:04:20.410
in a second.

68
00:04:20.410 --> 00:04:25.626
So dispatch, and
we know that we want to turn an object and

69
00:04:25.626 --> 00:04:29.940
we know the one that we need is remove.

70
00:04:29.940 --> 00:04:32.390
And remove.

71
00:04:32.390 --> 00:04:36.742
Now it's tricky like I could
make it ask for the UID and

72
00:04:36.742 --> 00:04:40.820
pass it in, but
I got to modify the component.

73
00:04:40.820 --> 00:04:41.890
Well, let's we'll start with that.

74
00:04:43.220 --> 00:04:50.922
And then we'll say dispatch, remove item.

75
00:04:50.922 --> 00:04:52.570
You ID.

76
00:04:52.570 --> 00:04:55.460
So now I would have to go back and
modify the component.

77
00:04:55.460 --> 00:04:59.750
But like I said before,
before we jumped into this exercise.

78
00:04:59.750 --> 00:05:01.420
We get that own props.

79
00:05:01.420 --> 00:05:04.871
Or just the prompts have been passed to
that object, which we saw before we're

80
00:05:04.871 --> 00:05:08.373
spreading out the item, which means UU ID
will be a prop that we're passing in to

81
00:05:08.373 --> 00:05:11.480
the container, which means we
can read from that ourselves.

82
00:05:11.480 --> 00:05:15.787
So, instead of asking for that later,
we can basically give this component,

83
00:05:15.787 --> 00:05:20.292
I'm going to give you a version of this
action creator that actually already knows

84
00:05:20.292 --> 00:05:22.640
about your own UU ID or your own ID.

85
00:05:22.640 --> 00:05:25.410
So, when you dispatch you don't
have to worry about that later.

86
00:05:25.410 --> 00:05:30.140
So let's say on props you you I do.

87
00:05:30.140 --> 00:05:36.141
And then finally, export const menu
item container equals Connect no for

88
00:05:36.141 --> 00:05:40.786
the first argument, and
eventually we could You could do

89
00:05:40.786 --> 00:05:45.720
a thing where it's like what if
we pass menu item container,

90
00:05:45.720 --> 00:05:50.652
only the ID and let it fetch
the rest of the items about the rest

91
00:05:50.652 --> 00:05:53.790
of details about the item from state.

92
00:05:53.790 --> 00:05:55.670
That's totally a thing you could do.

93
00:05:55.670 --> 00:05:58.410
I'll likely leave that as
an exercise to the reader.

94
00:05:59.465 --> 00:06:01.875
But yeah, we could totally
just pass solely in the ID and

95
00:06:01.875 --> 00:06:03.015
fetch it out the same way.

96
00:06:03.015 --> 00:06:06.957
We're doing it later, but
we already have it wired up and

97
00:06:06.957 --> 00:06:10.665
it's fine doesn't actually
save us too much.

98
00:06:10.665 --> 00:06:11.941
So do map dispatch to props.

99
00:06:13.802 --> 00:06:15.134
And then we'll pass in.

100
00:06:18.051 --> 00:06:25.949
Menu item, and
connect needs to get imported As well,

101
00:06:25.949 --> 00:06:33.113
and now in menu items floral,
We can just swap it in.

102
00:06:35.997 --> 00:06:38.331
All right,
let's make sure not to make any mistakes.

103
00:06:38.331 --> 00:06:40.620
Seems like everything's good.

104
00:06:43.912 --> 00:06:47.600
And I can remove items from there
as well as just add one more.

105
00:06:54.234 --> 00:06:55.398
Put it in, remove it.

106
00:06:55.398 --> 00:06:57.908
All right, so
we've got that working as well.

107
00:06:57.908 --> 00:07:02.168
And what we saw, was there's ways to get
Props that you pass into the component and

108
00:07:02.168 --> 00:07:03.010
use them.

109
00:07:03.010 --> 00:07:05.820
As you map that dispatch,
you're getting everything you need.

110
00:07:05.820 --> 00:07:09.462
And again, the name of the game here is we
want to take these existing presentational

111
00:07:09.462 --> 00:07:10.250
components.

112
00:07:10.250 --> 00:07:12.080
We don't want to have to modify them.

113
00:07:12.080 --> 00:07:13.340
We want to use them as they are.

114
00:07:13.340 --> 00:07:17.350
There's a use case for both especially if
you're kind of wrapping a design system or

115
00:07:17.350 --> 00:07:20.059
something along those lines
where you might choose to use

116
00:07:20.059 --> 00:07:22.450
this approach versus the hooks approach.

117
00:07:22.450 --> 00:07:25.394
There's also if you
really wanted to do both,

118
00:07:25.394 --> 00:07:28.792
you could create higher
components that use hooks and

119
00:07:28.792 --> 00:07:33.200
then pass the props into a component
that you pass in, as well.

120
00:07:33.200 --> 00:07:36.872
I, you know, that seems just to be like
you're basically re implementing this API

121
00:07:36.872 --> 00:07:37.980
yourself at that point.

122
00:07:37.980 --> 00:07:40.490
So I don't know necessarily
if you need to do that.

123
00:07:40.490 --> 00:07:45.540
The other nice part about the Connect API
is stuff like memoization.

124
00:07:45.540 --> 00:07:48.697
And you know,
React memo is just taken care of for

125
00:07:48.697 --> 00:07:52.640
you as part of the process of
connecting the components.

126
00:07:52.640 --> 00:07:56.503
So, a lot of times I have found
that if performance is a concern,

127
00:07:56.503 --> 00:07:59.796
a lot of times the amount of
memorization I could do have

128
00:07:59.796 --> 00:08:03.250
done by hand with the hooks and
higher order components.

129
00:08:03.250 --> 00:08:04.430
I get for free.

130
00:08:04.430 --> 00:08:05.910
And it tends to be more performant.

131
00:08:05.910 --> 00:08:09.105
That does not mean that you could
not handcraft all the react memo

132
00:08:09.105 --> 00:08:13.304
within your own application you the hooks
API, but the idea that you don't have to,

133
00:08:13.304 --> 00:08:17.150
especially on a large enough team,
those things tend to add up because like,

134
00:08:17.150 --> 00:08:19.350
maybe somebody didn't think about it.

135
00:08:19.350 --> 00:08:21.822
Well, maybe they cache the wrong thing or

136
00:08:21.822 --> 00:08:25.930
use use callback Whereas actually
more expensive so on and so forth.

