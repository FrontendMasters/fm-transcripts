WEBVTT

1
00:00:00.330 --> 00:00:02.540
So at that point we've
got combineReducers,

2
00:00:02.540 --> 00:00:06.463
we've got bindActionCreators,
we've got compose, we've got createStore.

3
00:00:06.463 --> 00:00:12.318
We are down to the last and
final method that is on Redux,

4
00:00:12.318 --> 00:00:16.080
which is applyMiddleware.

5
00:00:16.080 --> 00:00:17.889
Now, good news and bad news.

6
00:00:17.889 --> 00:00:19.797
Good news, it's the last one.

7
00:00:19.797 --> 00:00:23.906
Bad news is that there's one more thing
that we have to learn about as we kinda

8
00:00:23.906 --> 00:00:25.460
get comfortable with this.

9
00:00:26.500 --> 00:00:29.463
So clear out some of this again for
ourselves.

10
00:00:32.590 --> 00:00:35.088
So we'll create just a really
quick reducer again.

11
00:00:40.010 --> 00:00:43.610
This is the simplest valid reducer,
is it takes the state of the world,

12
00:00:43.610 --> 00:00:46.796
it ignores the action and
gives you back the state of the world.

13
00:00:46.796 --> 00:00:48.161
It's a very stubborn reducer.

14
00:00:49.718 --> 00:00:59.450
So we can go ahead and
create a store, With this reducer.

15
00:00:59.450 --> 00:01:05.397
We saw that we could have some kind of
initial state as the second argument.

16
00:01:05.397 --> 00:01:09.304
It also takes one more argument,
which we'll see in a second,

17
00:01:09.304 --> 00:01:13.210
which is a store enhancer,
which is a function.

18
00:01:13.210 --> 00:01:16.720
And we'll actually we'll build
an enhancer in a second.

19
00:01:16.720 --> 00:01:19.780
And you can actually pass it as
the second argument as well.

20
00:01:19.780 --> 00:01:23.410
The only required argument
is the reducer function.

21
00:01:23.410 --> 00:01:26.240
Everything else here is optional.

22
00:01:26.240 --> 00:01:30.820
And an enhancer is basically
if we wanted to add additional

23
00:01:30.820 --> 00:01:33.720
functionality to a Redux store.

24
00:01:33.720 --> 00:01:37.742
This is a place where we can pass in
a function which will get an instance

25
00:01:37.742 --> 00:01:38.765
of createStore,

26
00:01:38.765 --> 00:01:42.804
allow us to do whatever we want and
then pass all the arguments into it.

27
00:01:42.804 --> 00:01:45.138
Let's look at a quick diagram here.

28
00:01:47.200 --> 00:01:51.248
So we've got createStore, it's got
the reducer, it takes the initialState and

29
00:01:51.248 --> 00:01:52.019
the enhancer.

30
00:01:52.019 --> 00:01:55.382
What the enhancer will take is,
first, it's a curried function,

31
00:01:55.382 --> 00:01:56.569
it returns a function.

32
00:01:56.569 --> 00:01:59.719
It's gonna take the copy of
createStore that we're calling and

33
00:01:59.719 --> 00:02:02.615
a copy of all of the arguments
we handed to it.

34
00:02:02.615 --> 00:02:09.275
You can do whatever stuff that you need
to do and then actually call createStore.

35
00:02:09.275 --> 00:02:11.872
To be clear, generally speaking,

36
00:02:11.872 --> 00:02:15.860
you probably won't write
a lot of enhancers, right?

37
00:02:15.860 --> 00:02:17.980
Because you need a pretty good reason.

38
00:02:17.980 --> 00:02:21.086
The Redux DevTools are an enhancer, right?

39
00:02:21.086 --> 00:02:25.164
Cuz they are basically wrapping your
createStore with all the stuff that hooks

40
00:02:25.164 --> 00:02:27.710
it into the Chrome or
Firefox DevTools, right?

41
00:02:27.710 --> 00:02:30.080
And so that's the use case for
an enhancer.

42
00:02:31.280 --> 00:02:34.013
The other thing we mentioned
was applyMiddlware.

43
00:02:34.013 --> 00:02:38.719
The function applyMiddlware creates
an enhancer that we'll see in a second.

44
00:02:38.719 --> 00:02:42.104
But let's actually look at
the at the syntax here,

45
00:02:42.104 --> 00:02:44.790
because it's not as scary as it sounds.

46
00:02:46.190 --> 00:02:49.069
So I'm gonna write one and
then you're gonna write one.

47
00:02:49.069 --> 00:02:51.963
And then we will talk about
it together as a team.

48
00:02:54.050 --> 00:02:59.384
So we can go ahead and
let's say we wanna have an enhancer that

49
00:02:59.384 --> 00:03:06.298
theoretically takes performance metrics
of everything happening in Redux.

50
00:03:06.298 --> 00:03:08.660
That seems legitimate, right?

51
00:03:08.660 --> 00:03:13.266
So, we could say,
we'll call it monitorEnhancer.

52
00:03:16.220 --> 00:03:20.342
And that's gonna get a copy of
createStore function that we'll

53
00:03:20.342 --> 00:03:21.877
be a little call later.

54
00:03:21.877 --> 00:03:29.244
And it is also going to get reducer,
initialState, and enhancer.

55
00:03:33.400 --> 00:03:37.203
Cool and what we'll be able to do,

56
00:03:37.203 --> 00:03:42.593
you could go ahead and
just immediately return.

57
00:03:46.775 --> 00:03:49.713
This is like an enhancer
that doesn't do anything.

58
00:03:49.713 --> 00:03:53.810
initialState, And
we'll call it immediately.

59
00:03:53.810 --> 00:03:57.496
But if you wanna do stuff like
wrap the reducer in another

60
00:03:57.496 --> 00:03:59.385
function that prepares it.

61
00:03:59.385 --> 00:04:03.133
So hypothetically, if we want to take
a performance benchmark before we call

62
00:04:03.133 --> 00:04:06.824
the reducer and then a performance
benchmark after we call the reducer, and

63
00:04:06.824 --> 00:04:08.626
console log it, we can do that here.

64
00:04:08.626 --> 00:04:13.180
And then pass that wrapped reducer
to the actual createStore.

65
00:04:13.180 --> 00:04:17.791
So we can go ahead and
we'll say something like const start,

66
00:04:20.599 --> 00:04:25.442
= performance.now(),

67
00:04:25.442 --> 00:04:31.903
const end = performance.now().

68
00:04:31.903 --> 00:04:39.387
And the diff, We'll Math.round() it.

69
00:04:46.078 --> 00:04:49.100
So it'll be the difference between
the end time and the start time.

70
00:04:49.100 --> 00:04:51.958
I'll even spell const right.

71
00:04:51.958 --> 00:05:00.390
And here we'll actually just say, Well,
we'll just call the reducer function,

72
00:05:00.390 --> 00:05:02.159
because it's just a JavaScript function,
right?

73
00:05:02.159 --> 00:05:03.260
We'll say state and action.

74
00:05:04.310 --> 00:05:06.243
Instead of state,
we're gonna say start, down here.

75
00:05:11.210 --> 00:05:13.608
Right, we gotta wrap, this hold on.

76
00:05:19.944 --> 00:05:21.706
We'll make a reducer, hold on.

77
00:05:21.706 --> 00:05:24.535
const, we'll say replacementReducer.

78
00:05:24.535 --> 00:05:26.010
Well, we'll say monitoredReducer.

79
00:05:29.152 --> 00:05:31.866
And that is gonna take state and action.

80
00:05:35.890 --> 00:05:37.921
It will pull all this in.

81
00:05:42.560 --> 00:05:46.271
Call the real reducer once we've taken our
performance metrics with state and action.

82
00:05:48.836 --> 00:05:50.380
And then return the new state.

83
00:05:52.500 --> 00:05:54.017
Let's also console log that diff.

84
00:06:02.111 --> 00:06:02.611
Great.

85
00:06:04.651 --> 00:06:07.559
All right, so
we've got that kinda in place.

86
00:06:07.559 --> 00:06:10.979
This enhancer doesn't work here
cuz it doesn't really exist, so

87
00:06:10.979 --> 00:06:13.676
we'll replace it real quick,
now that we have one.

88
00:06:15.661 --> 00:06:16.689
Let me clear that out.

89
00:06:19.493 --> 00:06:22.630
Oop, enhancer is not a function.

90
00:06:22.630 --> 00:06:24.788
We gotta pass in our
monitoredReducer as well.

91
00:06:27.628 --> 00:06:29.226
Where is that other enhancer?

92
00:06:37.340 --> 00:06:40.425
This one doesn't exist, so that's fine.

93
00:06:43.370 --> 00:06:46.446
All right, I need to quickly change
something, I'm calling it inside here,

94
00:06:46.446 --> 00:06:47.341
but this is enhancer.

95
00:06:49.024 --> 00:06:52.451
And now we'll pass our new monitored
enhancer into the real createStore.

96
00:07:04.252 --> 00:07:04.993
Perfect.

97
00:07:07.350 --> 00:07:10.152
So now we have one in place where
we can dispatch some actions.

98
00:07:12.973 --> 00:07:16.380
Doesn't really matter, since this
reducer doesn't really do anything.

99
00:07:19.460 --> 00:07:24.290
And we can see, we'll actually
just get rid of the rounding.

100
00:07:27.842 --> 00:07:31.367
You can see that now I'm logging
the actual time it takes to run through

101
00:07:31.367 --> 00:07:32.640
the reducer every time.

102
00:07:32.640 --> 00:07:35.952
So this allows you to create
reusable plugins effectively for

103
00:07:35.952 --> 00:07:37.740
Redux that you can pass in there.

104
00:07:37.740 --> 00:07:46.380
And now it'll wrap every single call to
the reducer in the performance metrics.

105
00:07:46.380 --> 00:07:47.831
So now they just pass this in.

106
00:07:47.831 --> 00:07:49.287
Same thing with the Redux DevTools.

107
00:07:49.287 --> 00:07:53.186
As we'll see before, you can pass in these
enhancers, it will wrap an extended,

108
00:07:53.186 --> 00:07:56.390
almost like a plug-in,
architecture, for Redux, as well.

109
00:07:56.390 --> 00:08:01.372
The question was, is the role of
enhancer kind of a middleware?

110
00:08:01.372 --> 00:08:02.790
Yes is the answer.

111
00:08:02.790 --> 00:08:06.325
A applyMiddleware is the function
we're gonna take a look at a second.

112
00:08:06.325 --> 00:08:10.089
applyMiddleware takes a whole
bunch of different middlewares and

113
00:08:10.089 --> 00:08:13.457
creates one composed enhancer
out of all that middleware.

114
00:08:13.457 --> 00:08:15.646
Enhancers themselves can be used for
a lot of things.

115
00:08:15.646 --> 00:08:18.154
Adding middleware, using for
the Redux DevTools,

116
00:08:18.154 --> 00:08:20.890
any kind of plugin that you wanna do or
functionality that

117
00:08:20.890 --> 00:08:23.970
you need to add to Redux,
enhancers are the way that you do that.

