[00:00:00]
>> All right, so we'll learn a little bit about Redux today. Redux is a state management tool. It is commonly used with react. But it doesn't have to be Redux can be used with any front end framework. Redux can even be used anywhere JavaScript can be written. Redux can be used on the back end on the front end with react with whatever you want to do with just vanilla JavaScript with Angular.

[00:00:26]
In this case, we're gonna talking about Redux. And then we'll build some react applications with it to kind of see it in practice. All right, so what are we gonna do today? I think one of the things that I have learned kind of teaching this stuff is a lot of times you're learning redox while you're also learning react.

[00:00:42]
And as we'll see, there's a fun library called React Redux which is a third thing to learn simultaneously. And that's usually when people like I'm a little confused, all right. So what are we gonna cover in this workshop? One of the things that I have noticed is a lot of times you're learning Redux, but you're Learning Redux and React.

[00:01:00]
And then there is a third library that we'll see in our time together called React Redux. So all of a sudden, you're sitting down you're learning Redux, React Redux, and then how to integrate into React application and all the best practices around that. At the same time, and all of a sudden you're really sad, right?

[00:01:16]
And then you enter the next phase of learning reaction Redux, which is, I've gotten really good at like copy and pasting these pieces from the other part of the codebase. And I think I mostly know what they do, or I've grabbed stuff from the documentation, and it kind of makes sense it works at least.

[00:01:31]
All right, we're gonna try to move us to the third stage past that which is like, I get it. I understand Redux, I can like plug it into a React application, I understand each piece. So kind of work through it and see how each piece kind of builds on top of each other.

[00:01:46]
And then finally, we'll look at this thing called React toolkit. Which is a another set of abstractions to take all the kind of low level stuff that we're doing and bundles it up real nicely. In a way that it hides some of the inner workings that I think are important to know but also allows you to kind of like reduce the amount of boilerplate.

[00:02:03]
And tedium that you might have to go through while setting up a React application. Finally, what good front end application doesn't have to make at least some kind of network request at some point to get some data. So we'll look at like, how do we make API requests and like update our state as well.

[00:02:18]
So kind of slowly build will use hooks. We'll use high order components. We'll kind of see each phase as we learn Redux all the way from. Okay, here it is just the library itself to building some small applications as we go along. Great. So the good news is that the API surface area for Redux is pretty reasonable.

[00:02:40]
If you have Redux has effectively five methods or functions attached to it. And four of them are just helper utility methods right? They are just effectively not dissimilar from methods you might find in a library like lodash or underscore. They just allow you to kind of take very common things and do them a little bit easier, right?

[00:03:07]
And so we'll kind of go through the entire API surface area of Redux just by itself, right? We're not gonna worry about like okay, then I got to plug it into react application so on so forth. We will do all that. But at first like what if we just mastered Redux.

[00:03:21]
Seems good, right? So the question was, where are things like use reducer, or in this case, it's actually use selector and use dispatch? They're not in Redux. That's not in the Redux library right? That isn't a I kind of alluded to this earlier. A fun other library called React Redux, which is neither React nor Redux.

[00:03:41]
And it's the bindings between Redux and React. So we will jump into that, but that is actually not on the surface area of, Redux. And that kind of makes sense if you think about it, because like we said before. Redux is very commonly found used in React applications, but it doesn't have to be right?

[00:03:58]
You could build a game with html5 canvas and choose to use Redux to manage the state and application. You can decide like I wanna use this in an Ember application. And you could use Redux to manage the state in that application or Angular. You can use it on the server side and node, you could also use it just as easily to kind of manage state using the same principles.

[00:04:19]
So, [COUGH] the actual core library itself doesn't it's kind of just like unaware of React, right? And then we have those bindings in the either amazingly named or poorly named React Redux library. Because on one hand does exactly what it says on the tin, on the other hand is kind of like when you explain the what something means by using the words.

[00:04:42]
And we'll figure out how to bind it into React application there. So it's actually not on the surface serve Redux. So the question was, well why use Redux? Doesn't React come these days come with a use reducer that is basically the same thing? It is similar, but it also lacks a lot of the bells and whistles as well right?

[00:05:04]
One way to think about it is like you might have a single speed bike that's probably useful for getting around town. But it's maybe not a mountain bike or a racing bike or something along those lines. So one of the things that Redux has that they kind of built in version to React doesn't have is things like middleware built in right?

[00:05:23]
Things like the binding for higher order components that will take care of memorization and try to avoid re rendering components when possible, right? There's a lot of kind of just slightly more advanced things that come in Redux that are not in the use reducer hook. That come in React that in a large enough application, you're either going to find yourself needing Redux.

[00:05:44]
Or if you're going down this kind of reducer kind of path, or you might find yourself putting so many plugins into the built in use reducer hook. Into react that you've effectively recreated Redux without the same level of support. Cool, Mark.
>> Yeah, could you breifly describe the difference between Redux and the context API?

[00:06:06]

>> Yeah, so the difference between Redux in the context of API which so Redux is very similar to this whole users reducer part. The context API is actually used by both of them to kind of thread access to your store throughout the application. So Redux isn't necessarily different than the context a API in so far that it uses the context API.

[00:06:25]
The React Redux library that we'll see in a little bit uses the context API to give all of your different components access to your Redux store from anywhere within the application. So both use reducer and Redux will use the context API to make your store available. Without having to thread your props from the highest component down to the lowest level component and your events back up.

[00:06:48]

>> They both use the context API. So they it's not necessary that Redux is different than the context API. It is using it as well as the use reducer hook.

