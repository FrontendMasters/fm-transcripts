WEBVTT

1
00:00:00.150 --> 00:00:04.476
One of the things that we noticed is
that in the original implementation,

2
00:00:04.476 --> 00:00:07.823
I made sure to divide that
whole number of 20 by 100,

3
00:00:07.823 --> 00:00:13.030
just multiplying your price by 20 makes
you an incredibly generous tipper.

4
00:00:13.030 --> 00:00:14.870
So we're gonna fix that slight bug.

5
00:00:14.870 --> 00:00:19.567
Luckily, the biggest bugs so
far have been my spelling and my math.

6
00:00:19.567 --> 00:00:22.484
So that's really encouraging.

7
00:00:22.484 --> 00:00:24.424
So we've got that in place.

8
00:00:24.424 --> 00:00:27.174
If you think about
the menu item component,

9
00:00:27.174 --> 00:00:30.430
we have a way to get the subtitle
of all of the items.

10
00:00:30.430 --> 00:00:33.982
But we don't have a way
to get one item out or

11
00:00:33.982 --> 00:00:37.142
also the ability to get the subtotal or

12
00:00:37.142 --> 00:00:42.000
the total price of just one item,
so we can do that as well.

13
00:00:42.000 --> 00:00:47.246
And again, it's just a little bit more of
the same just to kinda get some muscle

14
00:00:47.246 --> 00:00:52.096
memory in place so we can select an item
which is gonna take our state, and

15
00:00:52.096 --> 00:00:57.610
it's gonna return just state really,
I guess which one that we're looking for.

16
00:00:57.610 --> 00:01:00.020
So in our case, it's gonna be state.

17
00:01:00.020 --> 00:01:04.581
We'll pass in the props coz we'll get
that from own props from match dispatch

18
00:01:04.581 --> 00:01:05.540
to props.

19
00:01:05.540 --> 00:01:08.572
So we'll go ahead and

20
00:01:08.572 --> 00:01:14.500
we'll say return state.items.find.

21
00:01:14.500 --> 00:01:18.283
And go through all of them and

22
00:01:18.283 --> 00:01:23.012
find me the one where the item.uuid

23
00:01:23.012 --> 00:01:27.593
equals the props.uuid, right.

24
00:01:27.593 --> 00:01:31.989
And so we can pass that in,
this will get us a particular item.

25
00:01:31.989 --> 00:01:36.422
And then, based on that,
based on the ability to find an item,

26
00:01:36.422 --> 00:01:40.115
we wanna go ahead and look for
the select item total.

27
00:01:49.838 --> 00:01:52.036
Actually, this is going to be a selector.

28
00:01:55.154 --> 00:01:59.222
Create selector, we'll do select item,
right, which we just made and

29
00:01:59.222 --> 00:02:02.600
that is going to get
the item that we found.

30
00:02:02.600 --> 00:02:09.463
And then from there we wanna do
the item.price times item.quantity.

31
00:02:11.712 --> 00:02:19.480
All right, so we've got all of that in
place, now we have our singular menu item.

32
00:02:19.480 --> 00:02:24.457
So really what we'd like to do there is
go and figure out how to get a total and

33
00:02:24.457 --> 00:02:27.230
pass it in as a prop
that I was looking for.

34
00:02:28.910 --> 00:02:31.699
So right now just has a map
dispatch to props, but like yeah,

35
00:02:31.699 --> 00:02:33.980
we're trying to make a new state, right.

36
00:02:33.980 --> 00:02:39.009
We want to take the fact that we know
this item has a subtotal and we know

37
00:02:39.009 --> 00:02:44.817
that this item has a, it has a price and
a quantity, and we want to derive that and

38
00:02:44.817 --> 00:02:50.590
pass it in as the total, instead of
doing it in the component itself.

39
00:02:50.590 --> 00:02:55.209
So here we're gonna say,
come match dispatched props.

40
00:02:56.490 --> 00:02:57.980
And that's gonna get a copy of the state.

41
00:03:01.470 --> 00:03:07.400
And all we really need to do here is we
need to return an object that has a total.

42
00:03:07.400 --> 00:03:12.195
And this is going to be select item total,

43
00:03:12.195 --> 00:03:18.223
it will take the state,
I guess, the props as well,

44
00:03:18.223 --> 00:03:23.567
so you can pull off the quantity and
the price.

45
00:03:23.567 --> 00:03:26.455
We'll have that in place.

46
00:03:28.708 --> 00:03:29.682
Total.

47
00:03:29.682 --> 00:03:30.720
Why are you angry?

48
00:03:31.860 --> 00:03:33.250
Called a map state to props.

49
00:03:34.500 --> 00:03:36.288
Well, we want to call it
map state to props and

50
00:03:36.288 --> 00:03:37.994
then we'll pass it in as a first argument.

51
00:03:42.428 --> 00:03:44.644
And let's see what we got.

52
00:03:44.644 --> 00:03:48.430
All right, we have it all wired up.

53
00:03:48.430 --> 00:03:53.195
Right, you'll notice that we didn't
have to find the given item coz select

54
00:03:53.195 --> 00:03:55.730
item total relies on select item.

55
00:03:55.730 --> 00:03:59.722
So it will go ahead and use that selection
find right item it will get the total for

56
00:03:59.722 --> 00:04:01.807
us just based on passing it the state, and

57
00:04:01.807 --> 00:04:04.550
it will only run if it
absolutely needs to.

58
00:04:04.550 --> 00:04:07.300
So now you don't have to like
performance tweak everything insight.

59
00:04:07.300 --> 00:04:10.300
You basically these are the rules in
which I need to compute new data.

60
00:04:11.430 --> 00:04:15.560
Should be underlying pieces change,
you'll get new data.

61
00:04:15.560 --> 00:04:20.489
If they have not changed, you can call
this like a whole bunch of times,

62
00:04:20.489 --> 00:04:25.102
it's only going to run when the state or
the props change, right?

63
00:04:25.102 --> 00:04:26.958
So you'll get it, you'll get,

64
00:04:26.958 --> 00:04:31.536
you're basically automatically getting
like the bare minimum that you need to do

65
00:04:31.536 --> 00:04:35.071
in order to drive this data to
hopefully save particularly on.

66
00:04:35.071 --> 00:04:38.810
There's a difference between
a particularly expensive computation or

67
00:04:38.810 --> 00:04:40.600
a cheap one just so many times.

68
00:04:40.600 --> 00:04:43.399
This will allow you to save for that.

