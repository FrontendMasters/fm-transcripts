WEBVTT

1
00:00:00.000 --> 00:00:05.792
All right, we're going to transition
to binding this onto react.

2
00:00:05.792 --> 00:00:09.320
We're gonna work on one
of the simpler examples,

3
00:00:09.320 --> 00:00:12.941
which is having a counter
since our last incident.

4
00:00:12.941 --> 00:00:14.342
I put a string in there so

5
00:00:14.342 --> 00:00:18.966
you can change it to whatever you want
the last coffee spill, the last outage,

6
00:00:18.966 --> 00:00:23.680
whatever makes you the happiest you can
swap it into, if you want to play along.

7
00:00:23.680 --> 00:00:25.273
There's two ways to do that.

8
00:00:25.273 --> 00:00:29.132
There is a sandbox here that
you can use in your browser.

9
00:00:29.132 --> 00:00:32.839
There, if you go to
the repositories using this course,

10
00:00:32.839 --> 00:00:35.346
you can grab incident counter as well.

11
00:00:35.346 --> 00:00:40.144
Both of those are available,
whichever one makes you happier.

12
00:00:40.144 --> 00:00:42.614
I think the sandbox will
work pretty great for

13
00:00:42.614 --> 00:00:46.328
those who'd be able to see the code and
the counter at the same time.

14
00:00:46.328 --> 00:00:51.036
I'm gonna do it in my editor so
I can push up branches on the live coding,

15
00:00:51.036 --> 00:00:54.724
push up commits on the live
coding branch as we go along so

16
00:00:54.724 --> 00:00:57.798
you can see different
steps as things happen.

17
00:00:57.798 --> 00:01:02.659
So what we're gonna do now is we're
going to apply some of the things

18
00:01:02.659 --> 00:01:04.551
that we have seen before.

19
00:01:04.551 --> 00:01:08.065
Now, what are the things I'm not gonna do
in this example is fuss around too much

20
00:01:08.065 --> 00:01:09.224
about folder structure.

21
00:01:09.224 --> 00:01:14.022
There are many different philosophies
about how to structure your folder and

22
00:01:14.022 --> 00:01:18.595
in my experience, it really depends on
the app like we have done different

23
00:01:18.595 --> 00:01:21.281
structures for different applications.

24
00:01:21.281 --> 00:01:23.333
We can talk a little bit about that.

25
00:01:23.333 --> 00:01:26.418
We get around to questions and
discuss some of the details, but for

26
00:01:26.418 --> 00:01:30.293
the point of like jumping around between
files, I'm gonna keep everything flat.

27
00:01:30.293 --> 00:01:32.490
There are different philosophies
around how to do this.

28
00:01:32.490 --> 00:01:34.644
And we'll play with some
of those as we go on.

29
00:01:34.644 --> 00:01:40.029
In the workshop, but the very simplest
level will keep it super simple, which

30
00:01:40.029 --> 00:01:45.840
means we're gonna start out by putting our
actions into just a file called actions.

31
00:01:45.840 --> 00:01:48.770
And it's useful to think
about what this counter

32
00:01:48.770 --> 00:01:53.285
what are all the things that could happen
and what is the state that we need.

33
00:01:53.285 --> 00:01:55.087
We looked at this.

34
00:01:55.087 --> 00:01:57.917
Luckily, it's pretty
straightforward at this point.

35
00:01:57.917 --> 00:02:01.640
The major piece of state is
where we are in this counter.

36
00:02:01.640 --> 00:02:05.048
The things that can happen
are incrementing, decrementing and

37
00:02:05.048 --> 00:02:08.597
resetting it eventually will add
a few more features to it as well.

38
00:02:08.597 --> 00:02:12.919
The major things that we're
gonna need to figure out is one,

39
00:02:12.919 --> 00:02:16.926
how to even tell react that
are that Redux exists right?

40
00:02:16.926 --> 00:02:21.172
And then two,
how to then get it to receive that state.

41
00:02:21.172 --> 00:02:24.110
And three,
how to get it to dispatch actions.

42
00:02:24.110 --> 00:02:28.657
Really, we can get that virtuous
cycle going, we have effectively

43
00:02:28.657 --> 00:02:33.620
figured out how to bind to react to
Redux and Redux to react and vice versa.

44
00:02:33.620 --> 00:02:35.842
So those are kinda the major
things that we need to do.

45
00:02:35.842 --> 00:02:39.468
We can kinda see what our actions
are in this case, as well.

46
00:02:39.468 --> 00:02:42.392
And let's go ahead and
we will implement them and so

47
00:02:42.392 --> 00:02:44.636
we're gonna start with that initial,

48
00:02:44.636 --> 00:02:49.475
Philosophy we talked about before of the
kind of like all capital letter constants.

49
00:02:49.475 --> 00:02:52.686
We'll see later when we do Redux toolkit
that we can have other ways to do

50
00:02:52.686 --> 00:02:53.231
it as well.

51
00:02:53.231 --> 00:02:57.931
We'll start with the kind of
the one that you will likely see

52
00:02:57.931 --> 00:03:03.015
the most common in the long legacy
of Redux and React code bases.

53
00:03:03.015 --> 00:03:07.189
And then we'll kind of talk about some of
the newer stuff that you might also see

54
00:03:07.189 --> 00:03:08.085
going forward.

55
00:03:08.085 --> 00:03:10.389
So we'll have the ability to increment,
that seems good.

56
00:03:13.329 --> 00:03:18.006
We'll have the ability to decrement.

57
00:03:18.006 --> 00:03:19.898
And then I could have reset, but I,

58
00:03:19.898 --> 00:03:23.254
unlike the rest of you all know
the future of this application.

59
00:03:23.254 --> 00:03:25.404
So I'm gonna have an action called set,

60
00:03:25.404 --> 00:03:29.707
mostly because I want something that takes
a payload and eventually we're gonna

61
00:03:29.707 --> 00:03:33.649
be able to not only set it to zero but
set it to any arbitrary number as well.

62
00:03:33.649 --> 00:03:37.565
You can kinda see that there's a set
counter component that exists over here,

63
00:03:37.565 --> 00:03:39.656
that I'm just not mentioning right now.

64
00:03:39.656 --> 00:03:42.371
And then we'll create our
action creators as well.

65
00:03:42.371 --> 00:03:46.759
So, export const increment,

66
00:03:46.759 --> 00:03:55.045
is really just gonna make
an action of the type increment.

67
00:03:55.045 --> 00:03:57.904
You can take a wiled guess of
what increment is going to do.

68
00:04:08.559 --> 00:04:12.441
And then set is gonna be interesting
one cuz set to kind of show you how

69
00:04:12.441 --> 00:04:13.200
this works.

70
00:04:13.200 --> 00:04:17.054
They'll take some would say amount value,
let's go with value.

71
00:04:17.054 --> 00:04:19.976
To reset the value on the counter.

72
00:04:19.976 --> 00:04:21.737
So this will be the type set.

73
00:04:24.299 --> 00:04:28.866
And the payload will be the values.

74
00:04:28.866 --> 00:04:30.188
This is a way to like format our objects.

75
00:04:30.188 --> 00:04:33.466
Again, you can see if there were many
more things that we need to know,

76
00:04:33.466 --> 00:04:37.094
to make this happen, then we might have
additional properties here as well.

77
00:04:37.094 --> 00:04:39.627
And the payload property
is totally optional.

78
00:04:39.627 --> 00:04:42.516
It's just a convention that
you will commonly see.

79
00:04:42.516 --> 00:04:45.272
And with that, if your code base that
you work in right now does something

80
00:04:45.272 --> 00:04:46.679
different, that's totally fine.

81
00:04:46.679 --> 00:04:47.674
Nobody's wrong.

82
00:04:47.674 --> 00:04:51.085
The only way, the only thing is
important that you're consistent.

83
00:04:51.085 --> 00:04:54.251
Whatever you consistently use as
a standard in your codebase is all that

84
00:04:54.251 --> 00:04:55.052
really matters.

85
00:04:55.052 --> 00:04:58.912
It doesn't necessarily matter
what exactly that standard is.

86
00:04:58.912 --> 00:05:02.108
Like there's a lot of flexibility because
as we saw when we did our deep dive on

87
00:05:02.108 --> 00:05:03.989
Redux, It's all just JavaScript, right?

88
00:05:03.989 --> 00:05:08.404
There's nothing particularly
special about it's just a pattern

89
00:05:08.404 --> 00:05:11.014
that we're using in our application.

90
00:05:11.014 --> 00:05:14.847
So our reducer,
fairly straightforward as well.

91
00:05:14.847 --> 00:05:18.171
Like there was a reason why we were
playing around with a counter example for

92
00:05:18.171 --> 00:05:18.866
a while there.

93
00:05:18.866 --> 00:05:22.466
Our reducer is going to
import those action types, so

94
00:05:22.466 --> 00:05:24.872
we will pull them in as we need them.

95
00:05:24.872 --> 00:05:28.614
I think the auto import and
Visual Studio code will serve me here.

96
00:05:28.614 --> 00:05:36.608
So we'll say export the constant
of initial state is going to be a,

97
00:05:39.544 --> 00:05:46.871
Count of zero and now, our reducer
is gonna be pretty straightforward.

98
00:05:46.871 --> 00:05:51.846
We'll just export const reducer and
that will take

99
00:05:51.846 --> 00:05:57.407
the state that equals the initial state,
and an action.

100
00:05:57.407 --> 00:06:01.677
I will remember to return the state
now cuz we've already made that Booba

101
00:06:01.677 --> 00:06:02.449
wants to do.

102
00:06:02.449 --> 00:06:04.374
And now we've got the different cases and

103
00:06:04.374 --> 00:06:07.565
these are pretty straightforward
to figure out what should happen.

104
00:06:07.565 --> 00:06:12.563
If the action type is increment.

105
00:06:12.563 --> 00:06:18.022
Then we got to pull that in.

106
00:06:18.022 --> 00:06:25.018
Then we wanna take the count and

107
00:06:25.018 --> 00:06:29.330
State camp was 1.

108
00:06:29.330 --> 00:06:33.817
If we want a decrement pretty
straightforward, you can imagine.

109
00:06:33.817 --> 00:06:39.458
Subtract 1, and then set is going
to use that action payload.

110
00:06:39.458 --> 00:06:43.126
One of the things you might see in
other code bases as you'll see a switch

111
00:06:43.126 --> 00:06:44.350
statement being used,

112
00:06:44.350 --> 00:06:47.736
where I'll switch between all
the action with different cases.

113
00:06:47.736 --> 00:06:51.630
The other thing you could do is you could
have the action types in an object where

114
00:06:51.630 --> 00:06:54.757
the keys are the different types
of actions that you respect and

115
00:06:54.757 --> 00:06:58.481
the value is the function that you wanna
call with the state and the action.

116
00:06:58.481 --> 00:07:00.354
That's how Redux toolkit works.

117
00:07:00.354 --> 00:07:04.493
That also is super helpful for
kind of very large reducers.

118
00:07:04.493 --> 00:07:07.685
The fact of the matter is,
it's all just JavaScript.

119
00:07:07.685 --> 00:07:10.944
So whichever one makes you happier is
totally something that you can use.

120
00:07:10.944 --> 00:07:15.296
I like to use the conditionals over the
switch statements because it's very easy

121
00:07:15.296 --> 00:07:19.776
to move them around and cut and paste them
versus, okay, you have to have the brakes

122
00:07:19.776 --> 00:07:24.193
and the default and you can't just totally
lift one piece of code and drop it into.

123
00:07:24.193 --> 00:07:27.083
Another place in the application,
so I like to use conditionals.

124
00:07:27.083 --> 00:07:30.725
But if you prefer switch statements,
that is totally okay as well.

125
00:07:30.725 --> 00:07:36.805
And here are the count is just
gonna be the action not payload.

126
00:07:36.805 --> 00:07:42.535
I'm just gonna make sure
that it's a number As well.

127
00:07:42.535 --> 00:07:47.510
One of the things that is kind of a best
practice is all of the peculiarities

128
00:07:47.510 --> 00:07:52.164
about what needs to happen to get
your state in the right format should

129
00:07:52.164 --> 00:07:53.786
happen in the reducer.

130
00:07:53.786 --> 00:07:59.483
Could you make sure that the input field
was parsed into an integer in the action?

131
00:07:59.483 --> 00:08:03.801
Yeah, you could, but now when you need to
change that code you'd have to run around

132
00:08:03.801 --> 00:08:06.468
to all of your different actions and
go look for it.

133
00:08:06.468 --> 00:08:09.483
Versus if that logic
happens in the reducers,

134
00:08:09.483 --> 00:08:12.202
you know that there's one common place.

135
00:08:12.202 --> 00:08:17.309
I like to keep my actions to,
one way thing about is just the facts.

136
00:08:17.309 --> 00:08:21.903
Right, which is just literally tell me
what happened exactly as it happened.

137
00:08:21.903 --> 00:08:25.981
And I keep all of the, kind of, what
that actually means to my application in

138
00:08:25.981 --> 00:08:30.084
the reducer, because that's effectively
what I'm doing in the reducer.

139
00:08:30.084 --> 00:08:34.221
Anyway, as I took the action in the state,
I'm trying to figure out what that means.

140
00:08:34.221 --> 00:08:38.181
So, to be clear between the actions and
the reducer,

141
00:08:38.181 --> 00:08:40.739
all we have to do is create a store.

142
00:08:40.739 --> 00:08:45.162
And then we have a full like working
implementation of Redux that just

143
00:08:45.162 --> 00:08:47.613
doesn't know anything about react.

144
00:08:47.613 --> 00:08:51.963
So we'll create the store and
we will go ahead and

145
00:08:51.963 --> 00:08:55.794
we will put it into our react application.

146
00:08:55.794 --> 00:08:57.859
So we'll make one more file.

147
00:08:57.859 --> 00:09:00.260
We'll call store.js.

148
00:09:00.260 --> 00:09:05.389
And here we need the create
store from Redux.

149
00:09:05.389 --> 00:09:08.416
And we also need our reducer.

150
00:09:08.416 --> 00:09:13.968
So we'll say our, Store equals,

151
00:09:16.929 --> 00:09:19.051
Create store.

152
00:09:19.051 --> 00:09:21.770
Not that reduce.

153
00:09:29.580 --> 00:09:31.478
Cool reducer.

154
00:09:31.478 --> 00:09:34.690
Let's go ahead, and
we'll just export this.

155
00:09:34.690 --> 00:09:37.694
So now we got a full working
implementation of Redux,

156
00:09:37.694 --> 00:09:40.447
we just need to bind it
to our react application.

157
00:09:40.447 --> 00:09:45.067
So here I have the initial setup of my
react application here in index.js.

158
00:09:45.067 --> 00:09:49.971
And what we'll do in this case
is we're gonna pull in this

159
00:09:49.971 --> 00:09:52.533
library called react Redux.

160
00:09:52.533 --> 00:09:57.792
React Redux,
has a very small API surface area as well.

161
00:09:57.792 --> 00:10:01.752
There's a few like advanced, like API's
that we will the four major ones that

162
00:10:01.752 --> 00:10:05.712
we'll use are two hooks, one for
getting state one for dispatching actions.

163
00:10:05.712 --> 00:10:09.531
Connect for
wrapping components with the state and

164
00:10:09.531 --> 00:10:14.504
the dispatch and then a provider
which answer other questions that

165
00:10:14.504 --> 00:10:19.564
we got earlier just basically hooks
up Redux into your context API so

166
00:10:19.564 --> 00:10:23.588
your react application can
access it from anywhere.

167
00:10:23.588 --> 00:10:28.232
So what we'll do in this case is
we will pull in this provider.

168
00:10:35.557 --> 00:10:38.030
And we'll pull in the store.

169
00:10:43.384 --> 00:10:46.529
And all we have to do is wrap
the application in very,

170
00:10:46.529 --> 00:10:51.326
very similar to the context API, where
the store equals the store that we made.

171
00:10:56.195 --> 00:10:59.790
I don't want that slasher.

172
00:10:59.790 --> 00:11:03.376
And here we'll say provider.

173
00:11:03.376 --> 00:11:08.666
Now, our store is being passed and
threaded through the entire component

174
00:11:08.666 --> 00:11:14.480
hierarchy of our react application and
we are, they are now aware of each other.

