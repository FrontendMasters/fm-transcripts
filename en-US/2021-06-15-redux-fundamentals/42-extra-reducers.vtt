WEBVTT

1
00:00:00.000 --> 00:00:02.960
To extra reducers has two syntaxes.

2
00:00:02.960 --> 00:00:07.775
One is where you can just type in like,
some action and

3
00:00:07.775 --> 00:00:14.550
put in- State and action.

4
00:00:14.550 --> 00:00:18.840
And this will work, this will basically
match it against any other things,

5
00:00:18.840 --> 00:00:22.328
you could actually take that
like task.action.assign to in

6
00:00:22.328 --> 00:00:24.670
the same way you're dispatching it.

7
00:00:24.670 --> 00:00:27.178
You can also plug it in
as a key in here and

8
00:00:27.178 --> 00:00:32.060
it'll totally work, the recommendation
is to use the functional syntax.

9
00:00:32.060 --> 00:00:37.058
And this is mostly, should you switch
over to TypeScript, is easier to do

10
00:00:37.058 --> 00:00:42.680
type inference functions returning then
what exactly a key in an object was.

11
00:00:42.680 --> 00:00:43.970
So let's do that syntax.

12
00:00:43.970 --> 00:00:46.520
We'll see the other one later as well.

13
00:00:46.520 --> 00:00:51.150
And so in extra reducers, we get
a function and it gets this builder.

14
00:00:51.150 --> 00:00:53.440
And this builder is
actually super powerful.

15
00:00:53.440 --> 00:00:55.475
We're not gonna get into
everything with it, but

16
00:00:55.475 --> 00:00:57.410
with this builder you can add cases to it.

17
00:00:57.410 --> 00:01:02.421
So I can do a builder and
I can say I wanna

18
00:01:02.421 --> 00:01:09.800
add the case of
tasksSlice.actions.assignToUser.

19
00:01:11.730 --> 00:01:16.511
And okay cool, if this reducer hears
of any action from the other slice

20
00:01:16.511 --> 00:01:19.441
over there, here's what I want you to do.

21
00:01:19.441 --> 00:01:22.254
Again will hit the state and the action.

22
00:01:25.874 --> 00:01:28.167
And this one, we could just literally,

23
00:01:28.167 --> 00:01:31.950
this is no different than any
other reducers that we've written.

24
00:01:31.950 --> 00:01:36.469
This one's gonna be a little more
complicated because the JavaScript logic

25
00:01:36.469 --> 00:01:37.819
is more complicated.

26
00:01:37.819 --> 00:01:41.182
Because if you look at the task IDs,
it's an array,

27
00:01:41.182 --> 00:01:44.960
on the individual task,
a task can belong to one user.

28
00:01:44.960 --> 00:01:48.240
So it's just setting a string
to be a different number.

29
00:01:48.240 --> 00:01:54.462
Here not only do we want to push the task
ID onto the humans task IDs array,

30
00:01:54.462 --> 00:01:58.540
we also wanna remove it
out from anyone else.

31
00:01:58.540 --> 00:02:01.072
So we need to iterate all the humans and
say,

32
00:02:01.072 --> 00:02:04.730
if you're the human we're looking for,
you get a task ID.

33
00:02:04.730 --> 00:02:07.793
Otherwise if you had it in there,
we're taking it out of here, right?

34
00:02:07.793 --> 00:02:12.950
So the only complicated part here is
a few additional lines of JavaScript.

35
00:02:12.950 --> 00:02:18.692
But the ability to create slices that
can listen to actions from other

36
00:02:18.692 --> 00:02:24.930
slices exists pretty simply in this
extra reducers property here as well.

37
00:02:26.330 --> 00:02:34.050
And so we'll just say for, const humans or
human of this case state really.

38
00:02:36.250 --> 00:02:38.200
So go through all the humans.

39
00:02:38.200 --> 00:02:42.106
And if you're the human we're looking for,
so

40
00:02:42.106 --> 00:02:46.500
if your human Id is the one
that task was assigned to.

41
00:02:46.500 --> 00:02:54.200
So action payload.humanId.

42
00:02:54.200 --> 00:02:55.839
Cool we're gonna push it onto your array.

43
00:03:00.459 --> 00:03:04.461
[COUGH] .taskId, and if you're not,

44
00:03:04.461 --> 00:03:09.720
we use a good friend filter
to get you out of there.

45
00:03:16.168 --> 00:03:19.164
Human.taskIds.filter.

46
00:03:25.184 --> 00:03:26.387
This will be the task Id and

47
00:03:26.387 --> 00:03:29.360
we basically want to sell just
do I do just keep it clear.

48
00:03:29.360 --> 00:03:30.790
So let's go through all the Ids.

49
00:03:30.790 --> 00:03:32.120
We'll say.

50
00:03:32.120 --> 00:03:35.060
Cool if the Id is not the one,
we're looking for.

51
00:03:35.060 --> 00:03:37.550
Very similar to what we did before.

52
00:03:37.550 --> 00:03:40.819
It's also totally possible to
write like a helper function for

53
00:03:40.819 --> 00:03:44.780
some of this as well, but I wanna keep
it as regular JavaScript as possible.

54
00:03:45.800 --> 00:03:50.340
So now they should be able to kind of
switch in between the different humans.

55
00:03:50.340 --> 00:03:55.460
Let's go ahead and
we do need to wire up the action as well.

56
00:03:55.460 --> 00:03:59.230
I believe, so
let's go to the select human.

57
00:03:59.230 --> 00:04:04.853
This implement me,
we're gonna do the dispatch to and

58
00:04:04.853 --> 00:04:09.060
we'll get the humans based on this.

59
00:04:09.060 --> 00:04:12.244
And then the task Id as well.

60
00:04:14.637 --> 00:04:19.816
So let's say we'll do dispatch and

61
00:04:19.816 --> 00:04:28.105
we're gonna do
tasksSlice.actions.assignToUser.

62
00:04:28.105 --> 00:04:36.060
And the human Id it's gonna
be event.target.value.

63
00:04:37.460 --> 00:04:41.689
And the task Id is gonna be the one
we are the task Id [INAUDIBLE]

64
00:04:44.034 --> 00:04:46.940
That should do the trick.

65
00:04:46.940 --> 00:04:48.620
Let's take a look at it.

66
00:04:48.620 --> 00:04:50.372
So now I should be able to assign one.

67
00:04:52.388 --> 00:04:53.460
So I got to refresh.

68
00:04:56.470 --> 00:04:57.090
Didn't work.

69
00:04:57.090 --> 00:04:58.390
Let's see what we got.

70
00:04:58.390 --> 00:05:02.080
Cannot set property assigned to undefined.

71
00:05:02.080 --> 00:05:05.960
It looks like we didn't
parse the right one in.

72
00:05:05.960 --> 00:05:07.322
Because it's supposed to be task Id.

73
00:05:12.475 --> 00:05:16.090
So Marc is now in charge ordering
energy drinks and he's done.

74
00:05:16.090 --> 00:05:19.110
Right, I felt like he could
be trusted with that task.

75
00:05:19.110 --> 00:05:23.064
And so now we can actually manage
the state between two different slices by

76
00:05:23.064 --> 00:05:25.610
using this extra reducers and the builder.

77
00:05:25.610 --> 00:05:29.147
The builder has add case it also has add
matcher which allow you to look for like

78
00:05:29.147 --> 00:05:33.510
just sub strings within an action type
as well, which is incredibly powerful.

79
00:05:33.510 --> 00:05:37.841
We're gonna take a five minute break and
then we're gonna talk about,

80
00:05:37.841 --> 00:05:41.900
actually hitting API's and
asynchronous actions and then yeah.

81
00:05:41.900 --> 00:05:43.857
Okay, got a question for me?

82
00:05:47.662 --> 00:05:49.360
&gt;&gt; Yeah, can you go back to that?

83
00:05:49.360 --> 00:05:55.460
One page where you were \,there you go or
actually.

84
00:05:55.460 --> 00:05:59.996
In your slices, it sounds like,
I don't know maybe I'm just

85
00:05:59.996 --> 00:06:05.233
misunderstanding this but it kind
of sounds like you're listening and

86
00:06:05.233 --> 00:06:08.400
then doing something based on that event.

87
00:06:08.400 --> 00:06:10.930
&gt;&gt; I really might misunderstand
this though, am sorry.

88
00:06:10.930 --> 00:06:13.940
&gt;&gt; That's actually completely right,
right?

89
00:06:13.940 --> 00:06:14.846
Like kind of,

90
00:06:14.846 --> 00:06:19.940
when we're just writing our reducers
just regular all JavaScript functions.

91
00:06:19.940 --> 00:06:22.259
We could just write conditionals and

92
00:06:22.259 --> 00:06:26.521
we could just check to see every
action flew through every reducer,

93
00:06:26.521 --> 00:06:31.459
the thing about Redux toolkit is it's
automatically creating the actions and

94
00:06:31.459 --> 00:06:36.470
setting up the reducer for
the things that it knows about, right.

95
00:06:36.470 --> 00:06:41.758
Extra reducer kind of gives us back that
functionality to add additional cases up

96
00:06:41.758 --> 00:06:47.200
to this reducer object, to say like cool
not only do we care about userslice.add,

97
00:06:47.200 --> 00:06:48.987
I also want you to listen for

98
00:06:48.987 --> 00:06:53.890
test slice actions assigned to user
because you care about that too.

99
00:06:53.890 --> 00:06:55.671
And here's what you do, right?

100
00:06:55.671 --> 00:06:58.298
Because in regular Redux, under the hood,

101
00:06:58.298 --> 00:07:03.268
every action flows through every reducer,
but Redux toolkit by trying to hide a lot

102
00:07:03.268 --> 00:07:07.430
from us doesn't immediately have
the ability to know about that.

103
00:07:07.430 --> 00:07:10.903
So the extra reducers and
this function basically is trying to

104
00:07:10.903 --> 00:07:14.642
build back some of the functionality
we had before Redux toolkit,

105
00:07:14.642 --> 00:07:18.338
where we could basically listen
to any action that flew through.

106
00:07:18.338 --> 00:07:22.966
So every action officially flows through
this extra reducers, we'd say like, okay,

107
00:07:22.966 --> 00:07:24.590
I care about this one.

108
00:07:24.590 --> 00:07:26.435
And I wanna add it to things
I care about as well and

109
00:07:26.435 --> 00:07:29.290
the rest of the actions will just
flow through and not do anything.

110
00:07:29.290 --> 00:07:32.276
So yeah, effectively we're
subscribing in a way and so for

111
00:07:32.276 --> 00:07:34.427
every reducers subscribe to everything,

112
00:07:34.427 --> 00:07:37.910
we're just kind of declaring where
we care and where we don't care.

113
00:07:39.710 --> 00:07:45.237
&gt;&gt; Is the only purpose for
using extra reducers like for

114
00:07:45.237 --> 00:07:49.884
some events,
side effects the ones like for

115
00:07:49.884 --> 00:07:54.400
example, this one is related to tasks.

116
00:07:54.400 --> 00:07:56.530
So it is a separate reducer.

117
00:07:56.530 --> 00:08:00.236
So it is a side effect for
humans here and for some,

118
00:08:00.236 --> 00:08:03.380
like civic actions as well, yeah.

119
00:08:03.380 --> 00:08:07.356
&gt;&gt; Yes and, yeah it's a connections which
we're going to get to in a second is yes

120
00:08:07.356 --> 00:08:08.210
and, right.

121
00:08:08.210 --> 00:08:12.501
Basically reducers can handle
anything that reducers makes.

122
00:08:12.501 --> 00:08:15.920
So extra reduces for,
like we made add in here.

123
00:08:15.920 --> 00:08:18.857
So the only thing that this section
knows about is how to deal with ad.

124
00:08:18.857 --> 00:08:23.048
If I go back to the task slice, the only
thing that's a task slice is built

125
00:08:23.048 --> 00:08:25.790
in to deal with is the stuff that it made.

126
00:08:25.790 --> 00:08:28.973
Anytime you want to deal with
an action that like wasn't made in

127
00:08:28.973 --> 00:08:31.870
this reducers object,
it has to go into extra reducers.

128
00:08:33.260 --> 00:08:38.104
Right, so for instance, if this task
slash toggle didn't happen to overlap

129
00:08:38.104 --> 00:08:43.540
with this toggle over here, I would have
to put it into extra reducers, right.

130
00:08:43.540 --> 00:08:45.821
So if we like rename this in any way,

131
00:08:45.821 --> 00:08:50.781
I'd have to get that case to manage
the task state in extra reducers instead.

132
00:08:50.781 --> 00:08:54.510
This one just happens to match
up with toggle, so it works.

133
00:08:54.510 --> 00:08:58.695
But if this was called like, I don't know,
toggle twice or something like that,

134
00:08:58.695 --> 00:09:00.333
which doesn't make any sense,

135
00:09:00.333 --> 00:09:04.450
I would have to add it to extra reducers
because it wasn't made by the slice.

136
00:09:04.450 --> 00:09:07.800
It's not handled by the slice, so
it has to get handled extra reducers.

137
00:09:07.800 --> 00:09:10.040
So that does affect things
made by other slices.

138
00:09:10.040 --> 00:09:14.600
It does affect asynchronous
actions that get fired.

139
00:09:14.600 --> 00:09:19.236
Those all fall under the umbrella of
things that weren't explicitly defined in

140
00:09:19.236 --> 00:09:22.430
this reducers object,
has to happen in extra reducers

