WEBVTT

1
00:00:00.060 --> 00:00:03.453
There is a few things
that come up around this,

2
00:00:03.453 --> 00:00:07.898
which is why did I have to scream
the word increment, right?

3
00:00:07.898 --> 00:00:14.200
Does not be I feel very passionately
about incrementing a value.

4
00:00:14.200 --> 00:00:15.761
I mean, I personally do, but

5
00:00:15.761 --> 00:00:18.954
that's not the reason why I
typed it all in capital letters.

6
00:00:18.954 --> 00:00:23.891
Does anyone have any hypotheses
on why by convention use

7
00:00:23.891 --> 00:00:28.100
all capital letters for our action types?

8
00:00:28.100 --> 00:00:31.648
&gt;&gt; I have a question,
because if you use Redux toolkit and

9
00:00:31.648 --> 00:00:35.131
createSlice actions are not all uppercase,
right?

10
00:00:35.131 --> 00:00:37.780
&gt;&gt; Yep, that's a great point that and
we will talk about that in a second.

11
00:00:37.780 --> 00:00:39.410
They don't have to be all uppercase.

12
00:00:39.410 --> 00:00:40.720
It's just a convention.

13
00:00:40.720 --> 00:00:45.575
And we'll talk about why we tend to use,
we're gonna use the all uppercase in

14
00:00:45.575 --> 00:00:50.655
the beginning and then we're gonna swap
to a different syntax towards the end for

15
00:00:50.655 --> 00:00:54.711
a reason that we will get to
probably the next 30 or so seconds.

16
00:00:54.711 --> 00:00:56.080
Any other guesses?

17
00:00:56.080 --> 00:01:00.439
&gt;&gt; So
maybe this type is some kind of constant.

18
00:01:00.439 --> 00:01:02.030
&gt;&gt; Yep.
&gt;&gt; So that's why.

19
00:01:02.030 --> 00:01:06.448
&gt;&gt; Yep, so basically, so one of the things
that was just brought up is that,

20
00:01:06.448 --> 00:01:11.180
when we use Redux toolkit later, Redux
toolkit might do something like this.

21
00:01:11.180 --> 00:01:15.420
The action type might be
something along the lines of,

22
00:01:18.690 --> 00:01:22.240
Counter/increment, right?

23
00:01:22.240 --> 00:01:22.923
That totally works.

24
00:01:22.923 --> 00:01:24.522
It really can be any string.

25
00:01:24.522 --> 00:01:29.057
The convention a lot of
times is to use a string and

26
00:01:29.057 --> 00:01:34.158
to use a constant, right,
to reference that string.

27
00:01:34.158 --> 00:01:39.203
The reason for
that is let's say hypothetically,

28
00:01:39.203 --> 00:01:44.140
we want to say if
(action.type is INCREMENT).

29
00:01:44.140 --> 00:01:50.601
I almost made my point,
is increment then we'll say like state,

30
00:01:50.601 --> 00:01:55.422
I will return, State and

31
00:01:55.422 --> 00:01:59.527
that will be state.value+1.

32
00:01:59.527 --> 00:02:03.264
Right, and this all works, right,
we dispatch an action with the type

33
00:02:03.264 --> 00:02:07.120
of increment, it would modify
the state and increment it by 1.

34
00:02:07.120 --> 00:02:12.446
The problem with using strings everywhere
is, you almost saw me do it, which is,

35
00:02:14.842 --> 00:02:19.598
If I misspell one of those strings,
the action of increment will fall

36
00:02:19.598 --> 00:02:23.944
through the entire reducer and
not hit any of my conditionals.

37
00:02:23.944 --> 00:02:26.936
Or if I mistype it in the action
it will fall through and

38
00:02:26.936 --> 00:02:29.600
not hit any of the conditionals, right?

39
00:02:29.600 --> 00:02:33.271
So a lot of times what we'll find
ourselves doing is, we'll say,

40
00:02:38.163 --> 00:02:40.724
INCREMENT, and
then we'll swap these two out.

41
00:02:44.180 --> 00:02:47.961
And now when you're using
the constant everywhere,

42
00:02:47.961 --> 00:02:52.087
if you misspell it you'll get
a reference error, right?

43
00:02:52.087 --> 00:02:55.140
It'll be like there is no
constant called whatever.

44
00:02:55.140 --> 00:02:58.423
And the reason we're using all capitals
is to separate it from the rest of our

45
00:02:58.423 --> 00:02:59.000
variables.

46
00:03:00.210 --> 00:03:04.139
We saw before we could use that slash,
it's just really

47
00:03:04.139 --> 00:03:09.002
hard to write a constant that has
a slash and is not valid JavaScript.

48
00:03:09.002 --> 00:03:15.830
There is nothing stopping you if
you prefer, To write it like that.

49
00:03:15.830 --> 00:03:17.130
It doesn't matter, right?

50
00:03:17.130 --> 00:03:19.120
The only reason a lot of
times we'll match them is so

51
00:03:19.120 --> 00:03:20.600
that they look exactly the same.

52
00:03:20.600 --> 00:03:22.700
But it's totally like a team preference.

53
00:03:22.700 --> 00:03:27.035
If you prefer to use the Redux toolkit
side style, you're more than welcome to,

54
00:03:27.035 --> 00:03:30.480
if you prefer to have them just
match what you see in the code.

55
00:03:30.480 --> 00:03:33.654
We'll see the developer tools later,
I personally,

56
00:03:33.654 --> 00:03:35.520
I like the Redux toolkit style.

57
00:03:35.520 --> 00:03:38.480
It's just hard to do in a just
regular Redux application.

58
00:03:38.480 --> 00:03:41.935
And then also when I'm using the developer
tools later, I like whatever I see in

59
00:03:41.935 --> 00:03:45.050
the development tools to match
whatever I'm using in my code, right?

60
00:03:45.050 --> 00:03:48.186
It gets a little crazy when you're using
increment all capital letters because

61
00:03:48.186 --> 00:03:49.050
you have to.

62
00:03:49.050 --> 00:03:51.626
And then you have it looking different
when you look at the tools and

63
00:03:51.626 --> 00:03:52.860
things flow through.

64
00:03:52.860 --> 00:03:54.010
Totally matter of preference.

65
00:03:54.010 --> 00:03:55.620
You can use whatever you want.

66
00:03:55.620 --> 00:03:58.000
&gt;&gt; What's a good reason
not to use Redux Toolkit?

67
00:03:58.000 --> 00:04:00.172
&gt;&gt; So there's a few reasons, right?

68
00:04:00.172 --> 00:04:05.275
One is, if you have an existing code base
that is more than a year or two old,

69
00:04:05.275 --> 00:04:10.459
right, there's a definite whether or
not it's time to refactor, right?

70
00:04:10.459 --> 00:04:16.560
Which is for a library's that's been
around for five or six years, to be clear,

71
00:04:16.560 --> 00:04:21.962
most of future code bases that we write
may or may not use Redux Toolkit.

72
00:04:21.962 --> 00:04:25.259
But all the previous ones that
predate it definitely don't.

73
00:04:25.259 --> 00:04:27.916
The other factor is like Redux Toolkit,

74
00:04:27.916 --> 00:04:31.520
the advantage to it is also
the disadvantage, right?

75
00:04:31.520 --> 00:04:34.557
Advantage, is it takes a bunch of
common patterns and abstractions and

76
00:04:34.557 --> 00:04:37.080
papers over them so
you don't have to think about them.

77
00:04:37.080 --> 00:04:40.524
But that's like most
abstractions which is,

78
00:04:40.524 --> 00:04:45.038
if you are doing particularly
complicated things, right?

79
00:04:45.038 --> 00:04:48.612
You might spend more time fighting
the conventions that enhance and

80
00:04:48.612 --> 00:04:52.920
make your life easier than you would
kind of just dropping down one level.

81
00:04:52.920 --> 00:04:56.115
Good abstractions should help you for
most cases, but

82
00:04:56.115 --> 00:04:59.440
usually they have to give
you an exit hatch, right?

83
00:04:59.440 --> 00:05:01.791
In the cases where they're
no longer working for

84
00:05:01.791 --> 00:05:03.750
whatever you're trying to do, right?

85
00:05:03.750 --> 00:05:08.386
So things where an action might have
been throughout many reducers about

86
00:05:08.386 --> 00:05:10.140
the application, right?

87
00:05:10.140 --> 00:05:13.721
Redux Toolkit allows for that, but
you could find yourself spending more time

88
00:05:13.721 --> 00:05:16.759
trying to wire that all together
than just dropping down a level and

89
00:05:16.759 --> 00:05:19.706
getting the kind of pieces that
you can snap together yourself.

90
00:05:19.706 --> 00:05:23.540
It really for
a lot of things is a judgment call.

91
00:05:23.540 --> 00:05:25.989
We'll actually see that
when we get to React Redux,

92
00:05:25.989 --> 00:05:28.160
there will be some
decisions between hooks and

93
00:05:28.160 --> 00:05:32.895
the hierarchy component pattern where
there isn't necessarily a right answer.

94
00:05:32.895 --> 00:05:35.271
It really depends on what
your priorities are, and

95
00:05:35.271 --> 00:05:37.156
what the nature of the application are.

96
00:05:37.156 --> 00:05:40.165
And I think it's about knowing
that you have the choice and

97
00:05:40.165 --> 00:05:42.387
knowing what each one brings to the table.

98
00:05:42.387 --> 00:05:44.107
And then with you and your team,

99
00:05:44.107 --> 00:05:47.115
making the decision on how to
move forward in that case.

