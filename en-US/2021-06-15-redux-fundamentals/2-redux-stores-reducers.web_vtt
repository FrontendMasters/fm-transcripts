WEBVTT

1
00:00:00.254 --> 00:00:04.050
Let's take a look at the main event here.

2
00:00:04.050 --> 00:00:05.940
The other ones we'll see as well.

3
00:00:05.940 --> 00:00:09.171
You can guess what apply, middleware does.

4
00:00:09.171 --> 00:00:13.720
We need some action creators before we can
bind some action creators, so on so forth.

5
00:00:13.720 --> 00:00:17.431
What we'll do at this point
is what if we went ahead and

6
00:00:17.431 --> 00:00:19.746
let's go ahead and make a store.

7
00:00:19.746 --> 00:00:22.716
So I'll go ahead and

8
00:00:22.716 --> 00:00:28.486
I will say const store = createStore.

9
00:00:28.486 --> 00:00:32.120
And I will just warn you right
now this isn't gonna go well.

10
00:00:32.120 --> 00:00:34.409
Luckily for us,
if you look over on the right,

11
00:00:34.409 --> 00:00:36.480
the answer there is pretty good, right?

12
00:00:36.480 --> 00:00:39.086
Or at least the error
message is pretty good,

13
00:00:39.086 --> 00:00:42.320
which is expected the reducer
to be a function, right?

14
00:00:42.320 --> 00:00:46.620
And so we can kinda see in here,
we hit createStore.

15
00:00:46.620 --> 00:00:52.350
We can go ahead and we can see that it's
expecting a reducer as the first argument.

16
00:00:52.350 --> 00:00:54.880
It'll also take some
other arguments as well.

17
00:00:54.880 --> 00:00:56.190
It's pretty flexible with what it takes.

18
00:00:56.190 --> 00:00:59.899
There's only one real requirement
that it takes a reducer.

19
00:00:59.899 --> 00:01:02.571
Now, I had some questions
about use of reducer before.

20
00:01:02.571 --> 00:01:09.017
So can anyone give me the kind of
high level of what a reducer is?

21
00:01:09.017 --> 00:01:11.599
&gt;&gt; Stuff gets in something comes out.

22
00:01:11.599 --> 00:01:15.590
&gt;&gt; All right, I think that's
actually wildly good to work with.

23
00:01:15.590 --> 00:01:18.018
So pure function,
stuff comes in, stuff comes out.

24
00:01:18.018 --> 00:01:21.370
Actually, that works really great.

25
00:01:21.370 --> 00:01:25.160
Really two things go in and
one thing comes out.

26
00:01:25.160 --> 00:01:28.727
And so while reducers seem like,
okay, we gave something a fancy name,

27
00:01:28.727 --> 00:01:31.547
that doesn't necessarily
mean that it is complicated.

28
00:01:31.547 --> 00:01:36.083
The kinda high level of what a reducer
does is a function where two things go in,

29
00:01:36.083 --> 00:01:37.660
the state of the world.

30
00:01:37.660 --> 00:01:42.652
So a JavaScript object that represent
everything that's happening in

31
00:01:42.652 --> 00:01:44.657
your application, right?

32
00:01:44.657 --> 00:01:48.657
All the kind of important stuff,
whether or not a modal is open or close,

33
00:01:48.657 --> 00:01:49.320
maybe not.

34
00:01:49.320 --> 00:01:52.689
But any kind of the actual model state
of your application is in one giant

35
00:01:52.689 --> 00:01:54.250
JavaScript object.

36
00:01:54.250 --> 00:01:57.520
And then occasionally, things happen.

37
00:01:57.520 --> 00:02:03.403
Users click buttons, network requests
come back, different things go on.

38
00:02:03.403 --> 00:02:06.620
They change routes within the application,
so on and so forth.

39
00:02:06.620 --> 00:02:10.808
Things happen, so you take the state of
the world, which is a JavaScript object.

40
00:02:10.808 --> 00:02:14.394
You take a thing that happened,
which is a JavaScript object.

41
00:02:14.394 --> 00:02:16.712
And they both go in there together.

42
00:02:16.712 --> 00:02:21.230
And only one thing comes out,
a new state of the world, right?

43
00:02:21.230 --> 00:02:24.666
So if you take everything that's
happening, and then you add whatever

44
00:02:24.666 --> 00:02:28.950
new event just went down, how does that
affect the state of our application?

45
00:02:28.950 --> 00:02:32.169
Sometimes the answer is not at all, right?

46
00:02:32.169 --> 00:02:36.861
We'll see a new to-do
coming on the to-do list

47
00:02:36.861 --> 00:02:41.090
doesn't change the current user, okay?

48
00:02:41.090 --> 00:02:43.920
So then we return the same user,
so on and so forth.

49
00:02:43.920 --> 00:02:44.948
But generally speaking,

50
00:02:44.948 --> 00:02:47.944
there are different things that happen
as events happen in an application.

51
00:02:47.944 --> 00:02:49.910
We wanna figure out what
that actually means.

52
00:02:49.910 --> 00:02:52.660
So all these is a function
that takes two arguments.

53
00:02:52.660 --> 00:02:58.724
It will take state and action, and
it will spit out a new state, all right?

54
00:02:58.724 --> 00:03:01.595
And it's just a plain
old JavaScript function.

55
00:03:01.595 --> 00:03:05.100
So let's go back to kind
of our code example before,

56
00:03:05.100 --> 00:03:07.410
and we could make one in line.

57
00:03:07.410 --> 00:03:11.620
But we could also theoretically just
make the world's simplest reducer.

58
00:03:11.620 --> 00:03:15.130
And by the world's simplest, I mean
a reducer that kinda barely does anything.

59
00:03:15.130 --> 00:03:17.836
So we'll say a reducer,
and like I said before,

60
00:03:17.836 --> 00:03:21.400
it takes the state of the world
as the first argument.

61
00:03:21.400 --> 00:03:25.510
And we'll come up with some initial
state that we'll use in a second.

62
00:03:25.510 --> 00:03:32.039
So we'll say initialState = { value: 0 },

63
00:03:32.039 --> 00:03:36.660
and it'll take some action.

64
00:03:36.660 --> 00:03:40.390
And all it's gonna do immediately is
going to return that state back out.

65
00:03:41.670 --> 00:03:46.031
Which what we're basically saying here is,
okay, no matter what happens,

66
00:03:46.031 --> 00:03:50.580
nothing changes, which is a little
pessimistic, but it's fine.

67
00:03:50.580 --> 00:03:51.793
We'll improve upon that.

68
00:03:51.793 --> 00:03:54.880
We'll make some change in
the world in a little bit.

69
00:03:54.880 --> 00:03:58.892
So this is a reducer, and
if we clear out the sidebar over here,

70
00:03:58.892 --> 00:04:02.014
which has been reloading for
me a bunch of times.

71
00:04:02.014 --> 00:04:04.020
I can even console log the store.

72
00:04:08.667 --> 00:04:11.800
And you see we're not getting that
error anymore cuz we gave it a reducer.

73
00:04:13.010 --> 00:04:18.737
Now, it itself has four
different methods as well.

74
00:04:18.737 --> 00:04:21.550
And we'll kind of talk about
some of those in a second.

75
00:04:21.550 --> 00:04:26.310
Does anyone wanna take a wild guess
of what replace reducer does?

76
00:04:26.310 --> 00:04:30.575
&gt;&gt; I'm gonna take a wild guess and
say that it replaces the current reducer.

77
00:04:30.575 --> 00:04:32.571
[LAUGH]
&gt;&gt; Tell him what he's won.

78
00:04:32.571 --> 00:04:35.884
[LAUGH] Yeah, all it does is
that function you passed in,

79
00:04:35.884 --> 00:04:41.380
replace reducer takes one argument, which
is a new reducer and it swaps it out.

80
00:04:41.380 --> 00:04:44.810
Why would you ever wanna do this?

81
00:04:44.810 --> 00:04:46.220
We're gonna see, yeah.

82
00:04:46.220 --> 00:04:47.814
&gt;&gt; Is it used for code splitting?

83
00:04:47.814 --> 00:04:50.960
&gt;&gt; Exactly, exactly,
it's used for code splitting.

84
00:04:50.960 --> 00:04:55.335
Later on, we saw that one of the helpers
that we didn't pull in here just yet

85
00:04:55.335 --> 00:04:57.540
was combined reducers, right?

86
00:04:57.540 --> 00:05:01.863
Cuz you can imagine a world where
having one function that controls all

87
00:05:01.863 --> 00:05:06.195
the updates to, say, your applications
is not gonna scale, right?

88
00:05:06.195 --> 00:05:11.108
So combined reducers allows you to kinda
split it out into smaller reducers that

89
00:05:11.108 --> 00:05:12.400
it then combines.

90
00:05:12.400 --> 00:05:13.843
We'll see it in a little bit.

91
00:05:13.843 --> 00:05:17.500
But you can see a world where you might
have only the initial reducers that you

92
00:05:17.500 --> 00:05:20.087
need, that you combined into
what you give to redux.

93
00:05:20.087 --> 00:05:24.089
And then later on, as they load in
more code through code splitting,

94
00:05:24.089 --> 00:05:28.367
you would just simply swap out the reducer
with one that has the additional

95
00:05:28.367 --> 00:05:30.513
reducers combined into it, right?

96
00:05:30.513 --> 00:05:34.290
So all it does is it takes one reducer and
swaps it out for another one.

97
00:05:34.290 --> 00:05:36.776
So now we're even 25% of
the way through the store, and

98
00:05:36.776 --> 00:05:38.420
we'll see some of these in practice.

99
00:05:38.420 --> 00:05:44.930
But let's go for a bonus round real quick,
which is what do we think getState does?

100
00:05:44.930 --> 00:05:45.900
&gt;&gt; You get the state?

101
00:05:45.900 --> 00:05:47.348
&gt;&gt; Yeah, you get the state, right?

102
00:05:47.348 --> 00:05:51.510
You have a store, it holds the entire
state in your application.

103
00:05:51.510 --> 00:05:55.055
Occasionally, you're going to need it
to determine what should be passed to

104
00:05:55.055 --> 00:05:56.100
components, right?

105
00:05:57.500 --> 00:06:00.010
So we'll take a look at
some of that as well.

106
00:06:00.010 --> 00:06:04.230
We need to talk a little bit
about what an action is, right?

107
00:06:04.230 --> 00:06:08.019
Because one of the things that makes
this whole reducer pattern a little bit

108
00:06:08.019 --> 00:06:11.568
different is it's not just like we
call methods on the store object and

109
00:06:11.568 --> 00:06:13.160
it changes stuff, right?

110
00:06:13.160 --> 00:06:16.800
We saw in the reducer, the state of
the world goes in, the action goes in.

111
00:06:16.800 --> 00:06:21.332
Well, how do we tell the store, hey,
here's an action, go into the reducer and

112
00:06:21.332 --> 00:06:24.010
figure out what you should do about it,
right?

113
00:06:24.010 --> 00:06:26.800
That's gonna be that dispatch function.

114
00:06:26.800 --> 00:06:30.999
So let's go ahead and
we'll just make a action real quick.

115
00:06:34.406 --> 00:06:37.991
I will actually call this one,
just for our own clarity,

116
00:06:37.991 --> 00:06:40.540
we'll call it incrementAction, and,

117
00:06:44.985 --> 00:06:48.540
Great, this is all that you need for
an action.

118
00:06:48.540 --> 00:06:51.410
There's only one requirement for actions.

119
00:06:51.410 --> 00:06:53.766
That one requirement
is that it has a type.

120
00:06:53.766 --> 00:06:56.603
Because if you're gonna say
that something happened and

121
00:06:56.603 --> 00:06:59.509
you're gonna ask the reducer
to see if the world changed.

122
00:06:59.509 --> 00:07:03.653
It's only polite to tell a redux
what type of thing just happened,

123
00:07:03.653 --> 00:07:06.844
rather than be like,
yeah, something happened.

124
00:07:06.844 --> 00:07:08.550
That's not particularly fun.

125
00:07:08.550 --> 00:07:12.250
So the only requirement
is that there is a type.

126
00:07:12.250 --> 00:07:17.200
Now, after that, it is up to you what you
wanna put on the rest of that object.

127
00:07:17.200 --> 00:07:21.119
However, you can imagine a world
where if everyone on your team does

128
00:07:21.119 --> 00:07:24.007
whatever you want and
puts whatever on an object,

129
00:07:24.007 --> 00:07:27.450
you will all slowly learn
to hate each other, right?

130
00:07:27.450 --> 00:07:30.657
So there are a bunch of
ways to handle this.

131
00:07:30.657 --> 00:07:35.162
The pattern that we use at Twilio is
what's called flux standard actions.

132
00:07:35.162 --> 00:07:36.470
Its redux is based on flux.

133
00:07:36.470 --> 00:07:38.130
The history lesson is not important.

134
00:07:38.130 --> 00:07:43.384
But it's basically just an agreed upon
set of properties to put on an action.

135
00:07:43.384 --> 00:07:45.268
Again, but only if you need them.

136
00:07:45.268 --> 00:07:48.306
The only thing that redux
requires is that you have a type.

137
00:07:48.306 --> 00:07:51.134
The other things that you
might see is a payload.

138
00:07:51.134 --> 00:07:54.612
And a payload can be an object or
could be, like in this case,

139
00:07:54.612 --> 00:07:58.446
we're gonna increment by 5 every time,
the payload could be 5.

140
00:07:58.446 --> 00:08:00.295
But if there's more than
one thing that you need,

141
00:08:00.295 --> 00:08:02.050
you can use a JavaScript object as well.

142
00:08:02.050 --> 00:08:04.200
So it can be a JavaScript
object with many properties.

143
00:08:04.200 --> 00:08:07.828
So if you're just saying, okay,
I wanna add this to-do to that user,

144
00:08:07.828 --> 00:08:11.648
you're probably gonna need to tell
the reducer what to-do and what user.

145
00:08:11.648 --> 00:08:13.820
But if it's just increment, you can say 5.

146
00:08:13.820 --> 00:08:17.520
The other one is meta, which is just kind
of any other information about the action.

147
00:08:17.520 --> 00:08:21.725
And then there could be possibly an error
property if there was some kind of error

148
00:08:21.725 --> 00:08:23.830
that you need to know about, right?

149
00:08:23.830 --> 00:08:29.430
For the majority of this workshop, we're
gonna worry about type and payload, right?

150
00:08:29.430 --> 00:08:32.420
Those are the two things that
we predominantly care about and

151
00:08:32.420 --> 00:08:33.952
we'll use as this goes along.

152
00:08:33.952 --> 00:08:36.690
Right now we're only gonna
stick with the type.

