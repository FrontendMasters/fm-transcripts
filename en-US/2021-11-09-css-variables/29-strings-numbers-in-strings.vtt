WEBVTT

1
00:00:00.020 --> 00:00:05.620
So far we've discussed colors,
we've seen numbers and lengths and angles.

2
00:00:05.620 --> 00:00:10.390
But we haven't discussed anything about
strings in relation to custom properties.

3
00:00:10.390 --> 00:00:12.690
And there are some caveats there.

4
00:00:12.690 --> 00:00:15.881
So let's take a look at this example,

5
00:00:15.881 --> 00:00:19.773
where we're using
an emoji custom property,

6
00:00:19.773 --> 00:00:26.080
to specify an emoji that we want to add,
before and after our heading text.

7
00:00:27.150 --> 00:00:32.386
So we use it like this, and in our CSS,

8
00:00:32.386 --> 00:00:37.150
we've placed content var emoji.

9
00:00:38.900 --> 00:00:44.121
And we also want to transform
the emoji on the after pseudo element,

10
00:00:44.121 --> 00:00:45.592
so that we flip it.

11
00:00:45.592 --> 00:00:48.970
However it's not working,
no emoji is showing up.

12
00:00:51.871 --> 00:00:53.255
Can you see what the problem is?

13
00:00:57.530 --> 00:00:58.540
It's missing quotes.

14
00:01:06.051 --> 00:01:09.671
Once we add the code
that works just fine and

15
00:01:09.671 --> 00:01:14.699
we need to specify a different
display mode here to actually

16
00:01:14.699 --> 00:01:18.940
be able to apply transforms and
that's about it.

17
00:01:20.100 --> 00:01:24.550
It wraps right now but,

18
00:01:24.550 --> 00:01:28.560
that's what it was.

19
00:01:30.670 --> 00:01:33.310
So if your custom property contains
a string don't forget the quotes.

20
00:01:33.310 --> 00:01:36.894
This seems like the most elementary
thing ever, but you would be,

21
00:01:36.894 --> 00:01:39.650
amazed at how many times
people forget the quotes.

22
00:01:41.440 --> 00:01:46.252
So this is the viewport demo
that we've seen previously,

23
00:01:46.252 --> 00:01:49.920
and let's fix it so that it works again.

24
00:01:49.920 --> 00:01:52.080
Remember, we were trying some experiments.

25
00:01:52.080 --> 00:01:54.190
All right, this works now.

26
00:01:54.190 --> 00:02:00.419
And what we wanted to do here is we wanted
to actually output the value of p so

27
00:02:00.419 --> 00:02:06.360
that instead of saying your viewport
it says 50% of your viewport.

28
00:02:07.810 --> 00:02:14.209
So let's try to do that,
we're gonna use the before Pseudo element,

29
00:02:14.209 --> 00:02:18.880
and we're gonna use this and
then concatenate it.

30
00:02:20.150 --> 00:02:22.246
Actually, let's try a static value first.

31
00:02:25.286 --> 00:02:29.140
So if we hard code the 50%, it works fine.

32
00:02:30.180 --> 00:02:36.153
And even if the 50 is in a different,
Is in a different string,

33
00:02:36.153 --> 00:02:40.790
cuz the content property
accepts a series of strings.

34
00:02:40.790 --> 00:02:44.865
But when we try to replace this
with our custom property, it fails,

35
00:02:44.865 --> 00:02:49.740
the entire thing disappears, the entire
content property, nothing shows up.

36
00:02:52.060 --> 00:02:53.750
And what is the problem here?

37
00:02:54.880 --> 00:02:55.970
&gt;&gt; In quotes?

38
00:02:55.970 --> 00:03:00.696
&gt;&gt; Yep what we've done here is basically
equivalent to doing this which

39
00:03:00.696 --> 00:03:01.845
doesn't work.

40
00:03:01.845 --> 00:03:06.017
And again the number of times
I've seen people try to output

41
00:03:06.017 --> 00:03:08.867
numbers through the content property.

42
00:03:08.867 --> 00:03:12.499
In JavaScript that works, you can
concatenate strings with numbers and

43
00:03:12.499 --> 00:03:14.175
it works in CSS it doesn't work.

44
00:03:14.175 --> 00:03:18.838
So how can we actually output this
number is it possible at all?

45
00:03:18.838 --> 00:03:26.500
It is but we have to use something that
is a bit of a hack so remember counter?

46
00:03:26.500 --> 00:03:32.997
There is a property called counter
reset that allows us to set a counter,

47
00:03:32.997 --> 00:03:37.375
let's call it p to a number
let's say 40 here.

48
00:03:37.375 --> 00:03:41.015
We're gonna hard code it first
to make sure everything works.

49
00:03:41.015 --> 00:03:43.463
And now, whatever we put here,

50
00:03:43.463 --> 00:03:48.060
we can actually output
through the content property.

51
00:03:48.060 --> 00:03:51.642
So we can just put our variable here and
now it works and

52
00:03:51.642 --> 00:03:56.090
we can change this, And
it works just fine.

53
00:03:58.963 --> 00:04:01.956
It's a bit of a hack to use counters for
this, but

54
00:04:01.956 --> 00:04:04.720
right now, it's the only way we have.

55
00:04:04.720 --> 00:04:09.687
There are a lot of discussions in the CSS
working group about adding ways to

56
00:04:09.687 --> 00:04:12.651
convert between different data types, but

57
00:04:12.651 --> 00:04:16.430
right now none of these have
been Spector implemented.

58
00:04:18.070 --> 00:04:22.497
So content only accepts strings,
it doesn't actually do any typecasting,

59
00:04:22.497 --> 00:04:26.321
but you can't convert numbers to
strings through counter reset.

60
00:04:28.812 --> 00:04:33.171
So the previous example was
a little bit of contrived but

61
00:04:33.171 --> 00:04:37.079
there are actually useful
applications of this.

62
00:04:37.079 --> 00:04:40.695
So here we have our familiar bar chart,
and

63
00:04:40.695 --> 00:04:45.930
we are using the content property
to output 5% on every bar.

64
00:04:47.520 --> 00:04:51.557
We're also putting the letters just for
debugging, but I can remove those.

65
00:04:55.101 --> 00:05:02.644
And, what we want to do here is we want to
output the actual percentage of each bar.

66
00:05:05.790 --> 00:05:11.969
So let's look at the values of this
p property, their percentages and

67
00:05:11.969 --> 00:05:17.172
as you might guess,
Doing this doesn't work.

68
00:05:21.606 --> 00:05:26.823
However, If we try to
do the counter trick,

69
00:05:33.381 --> 00:05:35.701
That also doesn't work.

70
00:05:35.701 --> 00:05:40.434
Unfortunately, it's the same problem as
what we faced earlier with length that we

71
00:05:40.434 --> 00:05:42.203
wanted to convert to numbers.

72
00:05:44.125 --> 00:05:50.669
And, Even though it's ideal to
be able to expose a nice API and

73
00:05:50.669 --> 00:05:54.887
hide all the ugliness in
places where it can't be seen,

74
00:05:54.887 --> 00:05:59.310
in this case, we need to
actually change our styling API.

75
00:06:00.440 --> 00:06:04.286
And we need to make these p variables
accept numbers not percentages,

76
00:06:04.286 --> 00:06:09.180
because with numbers, we can do anything,
we can convert them to anything.

77
00:06:09.180 --> 00:06:12.790
But with percentages,
we can only have percentages.

78
00:06:12.790 --> 00:06:17.646
So let's do that, well,
I'm gonna go through here,

79
00:06:17.646 --> 00:06:22.928
replace all these with numbers,
and obviously we'll need

80
00:06:22.928 --> 00:06:29.920
to modify our code that sets the height
to convert the numbers to percentages.

81
00:06:31.350 --> 00:06:36.855
And notice that now, this already works,
it's already outputting the percentage

82
00:06:36.855 --> 00:06:41.751
that I have, I only need to concatenate
it with an actual percentage sign.

83
00:06:41.751 --> 00:06:43.710
Do you see any problems here?

84
00:06:44.890 --> 00:06:46.888
&gt;&gt; Except for that second the last bar.

85
00:06:46.888 --> 00:06:48.346
&gt;&gt; Yeah, and why do you think that is?

86
00:06:52.863 --> 00:06:53.600
&gt;&gt; Floats?

87
00:06:54.760 --> 00:07:00.170
&gt;&gt; Exactly, so let's look at
the documentation for counter reset.

88
00:07:00.170 --> 00:07:05.774
If we look at the syntax, the syntax
is actually integer, not number.

89
00:07:05.774 --> 00:07:10.809
Counter reset becomes invalid
if we try to use a number there.

90
00:07:12.890 --> 00:07:15.756
So then we just get a counter that is,

91
00:07:15.756 --> 00:07:21.586
whatever it would have been if we
hadn't used counter reset at all, so 0.

92
00:07:23.296 --> 00:07:28.089
So unfortunately, this counter
trick only works with integers.

93
00:07:28.089 --> 00:07:31.707
And I suppose at this point we could
throw our hands up in the air and say,

94
00:07:31.707 --> 00:07:33.529
only use this if you have integers.

95
00:07:34.590 --> 00:07:37.510
What if we could convert
the number we have to an integer?

96
00:07:38.740 --> 00:07:39.488
Could we do that?

97
00:07:41.394 --> 00:07:44.557
So there is a way to do it,

98
00:07:48.545 --> 00:07:53.655
It's a little bit roundabout,
but we can register a property.

99
00:07:53.655 --> 00:07:56.606
We could call it integer and

100
00:07:56.606 --> 00:08:01.749
to make it reusable,
whose syntax is integer.

101
00:08:05.393 --> 00:08:11.131
And let's make its
initial value be 0 oops,

102
00:08:11.131 --> 00:08:17.484
and inherits would be,
I guess through and then,

103
00:08:22.475 --> 00:08:27.007
If we set this integer to p,

104
00:08:30.130 --> 00:08:33.290
And not just p but
also p in a calculation.

105
00:08:36.304 --> 00:08:42.910
Let's say plus 0, and then we use this
integer here, that actually works.

106
00:08:45.280 --> 00:08:47.879
And I think we can even skip the plus0,
yeah,

107
00:08:47.879 --> 00:08:50.220
as long as it's inside the calc it works.

108
00:08:50.220 --> 00:08:53.081
It just converts whatever we have
here to an integer because we're

109
00:08:53.081 --> 00:08:56.290
setting a custom property that's
registered as an integer.

110
00:08:56.290 --> 00:09:01.670
Obviously, this will only work if
a property is supported, if that property

111
00:09:01.670 --> 00:09:06.996
is not supported, the rest would work,
we would just get zero for that bar.

112
00:09:09.958 --> 00:09:15.156
This trick was invented by Anna Tudor,

113
00:09:15.156 --> 00:09:24.380
and she even had formulas to
control how this rounding happens.

114
00:09:24.380 --> 00:09:29.305
By default, the browser just rounds in
this case, you could also add point five

115
00:09:29.305 --> 00:09:34.110
or subtract point five to make it floor or
seal depending on what you want.

116
00:09:34.110 --> 00:09:36.870
So you can convert the number
to an integer by assigning it

117
00:09:36.870 --> 00:09:39.761
to a property that is registered
as an integer inside calc.

118
00:09:39.761 --> 00:09:44.656
And this is how you could control
how the rounding happens and yes,

119
00:09:44.656 --> 00:09:48.951
this is a hack but
as we know sometimes we have to use hacks.

120
00:09:48.951 --> 00:09:54.496
And as long as hacks are encapsulated
inside code that does not need

121
00:09:54.496 --> 00:10:00.148
to be changed by others using our
component styling our component.

122
00:10:00.148 --> 00:10:02.961
It can sometimes be acceptable,
make sure to document it well so

123
00:10:02.961 --> 00:10:06.417
that other developers know what you're
doing if they're reading your code.

124
00:10:06.417 --> 00:10:09.970
It's good to know what the hacks are,
even if we end up not using them, so

125
00:10:09.970 --> 00:10:11.440
this is how you could do that.

