WEBVTT

1
00:00:00.270 --> 00:00:05.410
So this is a very simplified
button which has two variations.

2
00:00:05.410 --> 00:00:11.183
With this demo I want show you
how custom properties allow us

3
00:00:11.183 --> 00:00:17.304
to create multiple variations
of components really easily and

4
00:00:17.304 --> 00:00:22.395
probably the most basic
component ever is a button.

5
00:00:22.395 --> 00:00:28.875
So here we have this flat
button with a color variation.

6
00:00:28.875 --> 00:00:30.220
The HTML looks like this.

7
00:00:30.220 --> 00:00:33.930
And here we have the CSS
that sets the actual colors.

8
00:00:33.930 --> 00:00:36.312
I've omitted the CSS that sets padding and
margins and

9
00:00:36.312 --> 00:00:38.190
stuff because that's not that relevant.

10
00:00:39.360 --> 00:00:44.085
So look at how this works,
for the variation we have,

11
00:00:44.085 --> 00:00:48.605
we need to repeat the actual
color multiple times.

12
00:00:48.605 --> 00:00:52.771
So, how could we simplify
this with custom properties?

13
00:00:55.142 --> 00:00:59.850
You could probably guess at this point we
would be setting a color variable with

14
00:00:59.850 --> 00:01:06.224
the actual color and using it, And

15
00:01:06.224 --> 00:01:08.987
we will use it here as well and here.

16
00:01:08.987 --> 00:01:13.686
And this means that our variation
can just set a color variable and

17
00:01:13.686 --> 00:01:17.546
we can omit everything else,
it just works the same.

18
00:01:17.546 --> 00:01:21.650
Notice however that I did what
I said you should not do.

19
00:01:21.650 --> 00:01:25.937
I included the value for
my custom property in my base rule,

20
00:01:25.937 --> 00:01:30.913
which means that everybody that wants
to style my component now needs

21
00:01:30.913 --> 00:01:34.032
to override the specificity of this rule.

22
00:01:34.032 --> 00:01:39.980
This is not too bad in this specific case
because the selector is just a button.

23
00:01:39.980 --> 00:01:44.233
But in a real website,
this would not just be a button element,

24
00:01:44.233 --> 00:01:48.240
it would probably have classes and
all sorts of things.

25
00:01:48.240 --> 00:01:52.980
So overriding it's specificity
might end up being quite involved.

26
00:01:52.980 --> 00:01:55.796
So in general,
we should avoid this practice and

27
00:01:55.796 --> 00:01:58.003
we should not be setting values here.

28
00:02:01.094 --> 00:02:02.057
So what can we do?

29
00:02:02.057 --> 00:02:06.292
We can use the fullback parameter and
specify a fullback here.

30
00:02:10.116 --> 00:02:10.987
And here.

31
00:02:10.987 --> 00:02:15.388
And I missed the closing parenthesis.

32
00:02:15.388 --> 00:02:19.257
Well, that broke really badly was
just the closing parenthesis.

33
00:02:19.257 --> 00:02:25.060
And now this works the same, but
there is a bit of a problem.

34
00:02:25.060 --> 00:02:27.600
We've repeated this fall
back multiple times.

35
00:02:28.610 --> 00:02:29.720
So that's not ideal.

36
00:02:29.720 --> 00:02:31.700
We don't like repetition.

37
00:02:31.700 --> 00:02:35.123
Repetition means that every time you
need to make a change to your CSS,

38
00:02:35.123 --> 00:02:37.660
you have to change it multiple times.

39
00:02:37.660 --> 00:02:40.150
It's much more likely to get out of sync.

40
00:02:40.150 --> 00:02:44.130
It means you could end up with
broken code later down the line.

41
00:02:44.130 --> 00:02:47.146
There is this rule in software
engineering called DRY which stands for

42
00:02:47.146 --> 00:02:49.270
don't repeat yourself.

43
00:02:49.270 --> 00:02:53.270
Basically, you should avoid
repetition as much as possible.

44
00:02:53.270 --> 00:02:58.290
There's a new revision of this rule that
says it's okay to write some things twice.

45
00:02:58.290 --> 00:03:01.321
But in general, try to avoid repetition.

46
00:03:01.321 --> 00:03:05.380
And I mean this is what variables
are great for, avoiding repetition.

47
00:03:05.380 --> 00:03:06.870
So what can we do?

48
00:03:06.870 --> 00:03:09.864
We can set the initial value.

49
00:03:09.864 --> 00:03:11.093
On a variable.

50
00:03:11.093 --> 00:03:15.592
And this is fine to define in the actual
rule because we don't actually

51
00:03:15.592 --> 00:03:19.950
expect people styling our components
to change the initial value.

52
00:03:22.200 --> 00:03:23.270
So we can do this.

53
00:03:25.390 --> 00:03:27.803
And everywhere where we have black.

54
00:03:28.993 --> 00:03:31.617
We can do that.

55
00:03:31.617 --> 00:03:34.524
And this works, but

56
00:03:34.524 --> 00:03:39.658
it's kind of verbose, isn't it?

57
00:03:43.747 --> 00:03:44.247
So what else can we do?

58
00:03:47.532 --> 00:03:52.799
So instead of specifying a variable for
the initial value,

59
00:03:52.799 --> 00:03:58.275
we can actually have a separate,
hidden variable of sorts for

60
00:03:58.275 --> 00:04:02.400
our actual color that we
use in our component.

61
00:04:02.400 --> 00:04:08.563
And that variable will be set to
whatever the color variable is.

62
00:04:08.563 --> 00:04:09.063
Whoops.

63
00:04:11.858 --> 00:04:13.465
Plus a fall back.

64
00:04:13.465 --> 00:04:17.352
So that variable will always have a value.

65
00:04:18.521 --> 00:04:23.266
And therefore we can use
it without a fallback

66
00:04:30.055 --> 00:04:34.565
So our code can just use this
underscore color variable instead

67
00:04:34.565 --> 00:04:36.448
of this huge long string.

68
00:04:36.448 --> 00:04:39.566
And as you can see, this works just fine.

69
00:04:42.302 --> 00:04:47.071
And of course,
as we've seen you could always do this.

70
00:04:52.003 --> 00:04:55.175
You could register your color property.

71
00:04:56.235 --> 00:05:02.047
You could register it as a color,
we do want it to inherit and

72
00:05:02.047 --> 00:05:05.432
the initial value would be black.

73
00:05:05.432 --> 00:05:07.300
And then we can just
use the color variable.

74
00:05:07.300 --> 00:05:12.480
No need for any fake private variable,
it works just fine.

75
00:05:12.480 --> 00:05:16.250
But as we've seen the problem
with that is browser support.

76
00:05:16.250 --> 00:05:21.690
There is also another problem that you
might want to specify different fallbacks

77
00:05:21.690 --> 00:05:26.490
for the same property per rule, and
once you register it, that's it.

78
00:05:26.490 --> 00:05:29.740
It's registered for your entire CSS.

79
00:05:29.740 --> 00:05:31.420
It's registered globally.

80
00:05:31.420 --> 00:05:35.090
It's registered with the same
initial value everywhere.

81
00:05:35.090 --> 00:05:37.510
In some cases, you might not want that.

82
00:05:37.510 --> 00:05:40.280
But in most cases,
this is the superior solution.

83
00:05:40.280 --> 00:05:45.400
And it's just that browser support
doesn't allow us to use it yet.

84
00:05:45.400 --> 00:05:48.909
So let's go back to the previous one.

85
00:05:50.275 --> 00:05:53.381
Oops here we want this and here.

86
00:05:53.381 --> 00:05:57.026
All right and this works fine.

87
00:05:57.026 --> 00:06:04.920
So to recap there are three fallback
strategies for dry fallbacks.

88
00:06:04.920 --> 00:06:08.217
The first one is to have
the fallback in a variable.

89
00:06:08.217 --> 00:06:12.297
This is very verbose, but
in some cases it might make sense.

90
00:06:12.297 --> 00:06:15.509
It does have the benefit
that if someone really wants

91
00:06:15.509 --> 00:06:18.510
to override the default itself,
they can do it.

92
00:06:20.723 --> 00:06:24.533
The second one is to use
pseudo private properties.

93
00:06:24.533 --> 00:06:29.304
While this might look horrible
remember that until now we only for

94
00:06:29.304 --> 00:06:34.776
example in JavaScript, we got private
properties very, very recently.

95
00:06:34.776 --> 00:06:39.456
Until like a year ago,
using underscore prefixed properties in

96
00:06:39.456 --> 00:06:43.540
JavaScript was the only way
to have private variables.

97
00:06:44.540 --> 00:06:51.100
So there is a lot of precedent on the web
platform for this kind of pattern.

98
00:06:51.100 --> 00:06:55.629
So the second solution is to use pseudo
private properties that already have

99
00:06:55.629 --> 00:07:00.170
a fallback so they always have a value and
we can use them without a fallback.

100
00:07:01.240 --> 00:07:04.481
And the third one is to use that property,

101
00:07:04.481 --> 00:07:09.397
which is in most cases ideal but
not supported everywhere yet.

102
00:07:13.273 --> 00:07:17.910
So, another huge benefit of using
custom properties is encapsulation.

103
00:07:17.910 --> 00:07:22.712
People styling our component can
style it with the custom property

104
00:07:22.712 --> 00:07:26.924
without actually knowing how
we've structured our CSS.

105
00:07:26.924 --> 00:07:32.174
Without knowing how we've achieved
the values effects we've achieved.

106
00:07:32.174 --> 00:07:34.260
They only know what we have exposed
through this styling API of sorts.

107
00:07:34.260 --> 00:07:38.798
Let's look at an example.

108
00:07:38.798 --> 00:07:43.166
So here you see that when we hover
over these this flat button,

109
00:07:43.166 --> 00:07:49.290
the color changes abruptly, there is
no transition, there is no effect.

110
00:07:49.290 --> 00:07:54.063
So what if we wanted to instead have
a transition where the border just

111
00:07:54.063 --> 00:07:57.454
grows inwards until it
fills out entire button.

112
00:07:57.454 --> 00:08:02.129
How can we do that with
a background you ask?

113
00:08:02.129 --> 00:08:06.636
We can't, we would need to use a different
technique to draw the background which is

114
00:08:06.636 --> 00:08:08.106
not an actual background.

115
00:08:08.106 --> 00:08:14.064
What we would have to do is use
a box-shadow instead with no offsets,

116
00:08:14.064 --> 00:08:15.617
no blur and just.

117
00:08:19.577 --> 00:08:23.453
A large spread and
it would be the same as this color and

118
00:08:23.453 --> 00:08:28.030
it would begin set cuz we want it
to be drawn inside the element.

119
00:08:28.030 --> 00:08:30.320
And we would not have a background.

120
00:08:31.690 --> 00:08:35.460
Notice that now it works the same, even
though it's actually now a book shadow.

121
00:08:36.800 --> 00:08:40.230
It looks identical, but
we can actually animate the book shadow.

122
00:08:44.560 --> 00:08:45.432
See that.

123
00:08:45.432 --> 00:08:48.480
So what's the takeaway here?

124
00:08:48.480 --> 00:08:53.876
Even though we've used this
horrible hack to style

125
00:08:53.876 --> 00:09:00.398
a component the way we wanted,
nobody using our component and

126
00:09:00.398 --> 00:09:05.300
styling our component
needs to know about it.

127
00:09:05.300 --> 00:09:10.043
If in the future, we get some crazy CSS
way to be able to animate backgrounds

128
00:09:10.043 --> 00:09:12.820
that way,
we can just get rid of this hack.

129
00:09:12.820 --> 00:09:17.161
We can use a regular background and nobody
needs to change their code giving styling

130
00:09:17.161 --> 00:09:19.220
our component with different colors.

131
00:09:20.770 --> 00:09:24.468
So I think this is probably one
of the most important takeaways.

132
00:09:24.468 --> 00:09:28.570
That CSS variables enable theming
that is independent of CSS structure.

133
00:09:30.030 --> 00:09:33.310
And this doesn't necessarily
just apply to components.

134
00:09:33.310 --> 00:09:36.451
A good practice is to structure
your CSS in a modular way so

135
00:09:36.451 --> 00:09:39.745
that different parts of your
CSS can be independent.

136
00:09:39.745 --> 00:09:43.350
And this means that these different
parts don't need to know about all

137
00:09:43.350 --> 00:09:44.745
the other parts.

138
00:09:44.745 --> 00:09:49.073
&gt;&gt; What happens if you define the property
syntax as color but you set a number or

139
00:09:49.073 --> 00:09:50.410
something else?

140
00:09:50.410 --> 00:09:55.134
&gt;&gt; Then I believe the entire app property
rule is invalid and it gets ignored.

141
00:09:55.134 --> 00:09:59.956
And this is exactly the type of thing
where it's really difficult to debug

142
00:09:59.956 --> 00:10:04.310
the CSS code and it's better if
your property rule is not working,

143
00:10:04.310 --> 00:10:09.675
It's better to go to the console and do
the same thing through the JavaScript API,

144
00:10:09.675 --> 00:10:12.900
the CSS register property API that we saw.

145
00:10:12.900 --> 00:10:17.720
Because then you get actual feedback,
you get actual errors that

146
00:10:17.720 --> 00:10:22.626
help you debug whereas with the property
rule you just sit there and

147
00:10:22.626 --> 00:10:26.236
look at your code and
wonder what did you mess up.

148
00:10:26.236 --> 00:10:28.270
And another thing also for
these initial values,

149
00:10:28.270 --> 00:10:29.777
is they cannot depend on variables.

150
00:10:29.777 --> 00:10:30.850
They need to be independent.

151
00:10:30.850 --> 00:10:32.165
They cannot be relative values.

152
00:10:32.165 --> 00:10:34.215
They cannot depend on other variables.

153
00:10:34.215 --> 00:10:38.513
The initial values you specify need to be,
the browser needs to

154
00:10:38.513 --> 00:10:43.314
be able to resolve them without
looking at other elements basically.

155
00:10:43.314 --> 00:10:45.261
Just like the built in initial values,

156
00:10:45.261 --> 00:10:48.153
just like the initial values
that other properties have.

157
00:10:48.153 --> 00:10:51.999
&gt;&gt; Is it practical to store gradient
background color stops with variables

158
00:10:51.999 --> 00:10:54.130
along with the gradient direction?

159
00:10:54.130 --> 00:10:59.572
&gt;&gt; Yeah, in fact that actually makes it
much easier to animate the gradients.

160
00:10:59.572 --> 00:11:01.961
As we'll see in the transitions
in animation section.

161
00:11:01.961 --> 00:11:05.999
This is like a primary use case for
registering custom properties, being able

162
00:11:05.999 --> 00:11:09.927
to store like parts of gradients so
that you can animate them individually.

