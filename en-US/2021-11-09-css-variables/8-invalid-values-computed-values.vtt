WEBVTT

1
00:00:00.000 --> 00:00:02.891
Sweet, so let's talk a little
bit about invalid values,

2
00:00:02.891 --> 00:00:06.977
because there's a few gotchas here, so
this is the same code we've seen before.

3
00:00:06.977 --> 00:00:11.084
We have a declaration that sets
the background to red and a button

4
00:00:11.084 --> 00:00:15.966
a declaration that sets it to whatever
accent color is orange as a fallback.

5
00:00:15.966 --> 00:00:20.056
What happens if accent color is
42 degrees is set to 42 degrees,

6
00:00:20.056 --> 00:00:23.657
which is a perfectly valid CSS value for
another property.

7
00:00:23.657 --> 00:00:27.411
But when it's substituted in background,
then it produces

8
00:00:27.411 --> 00:00:32.125
an invalid background because background
42 degrees is nonsensical, so

9
00:00:32.125 --> 00:00:34.420
what do you think will happen there?

10
00:00:34.420 --> 00:00:38.483
What color will we get,
will we get red, will we get orange,

11
00:00:38.483 --> 00:00:43.598
will we get something else, black,
transparent like what's your guess?

12
00:00:43.598 --> 00:00:44.356
&gt;&gt; Red.

13
00:00:44.356 --> 00:00:48.619
&gt;&gt; So it most definitely will not be
red because by the time the browser

14
00:00:48.619 --> 00:00:53.203
reads the second declaration it has
already thrown away the first one.

15
00:00:53.203 --> 00:00:53.976
&gt;&gt; Why?

16
00:00:53.976 --> 00:00:58.673
&gt;&gt; Now, it's, so it's actually gonna be
transparent but many people expect that

17
00:00:58.673 --> 00:01:02.418
it should be orange, I mean,
the fallback is orange so why not?

18
00:01:02.418 --> 00:01:06.862
The thing is the fallback is applied
when we don't have a value or

19
00:01:06.862 --> 00:01:12.234
when the variable is set to initial which
is equivalent to not having a value.

20
00:01:12.234 --> 00:01:16.695
When we do have a value,
like 42 is a legit value for the variable,

21
00:01:16.695 --> 00:01:21.157
at that point, since we have a value,
the fallback is not applied,

22
00:01:21.157 --> 00:01:25.260
the browser substitutes accent
color with the value we have.

23
00:01:25.260 --> 00:01:30.209
Like, we might be having other
verticals in the same property as well,

24
00:01:30.209 --> 00:01:34.168
the browser won't know if
the resulting value is valid,

25
00:01:34.168 --> 00:01:38.474
until it's done substituting
all of these vital functions.

26
00:01:38.474 --> 00:01:43.739
And if the resulting value is not
valid at the end of this process,

27
00:01:43.739 --> 00:01:47.874
then the browser's like,
okay, what do I do now?

28
00:01:47.874 --> 00:01:52.092
And what it ends up doing is basically
setting the property to whatever

29
00:01:52.092 --> 00:01:55.461
it would have been if you
assigned it the unset keyword.

30
00:01:55.461 --> 00:01:58.651
And for those of you that haven't
seen the unset keyword before,

31
00:01:58.651 --> 00:02:02.827
it's basically equivalent to initial for
known inherited properties and inherit,

32
00:02:02.827 --> 00:02:04.225
for inherited properties.

33
00:02:04.225 --> 00:02:08.982
So it basically resets the property as
much as it can without knowing anything

34
00:02:08.982 --> 00:02:12.202
specific about the property,
so for backgrounds,

35
00:02:12.202 --> 00:02:16.760
the initial values having a transparent
background which is what we get.

36
00:02:16.760 --> 00:02:21.052
This is very different from having
invalid values without variables,

37
00:02:21.052 --> 00:02:24.985
before variables, before variables
if we had background red and

38
00:02:24.985 --> 00:02:28.002
then background 42 degrees,
we would get red.

39
00:02:28.002 --> 00:02:34.022
That is the reasonable behavior, but for
technical reasons, it was not feasible for

40
00:02:34.022 --> 00:02:39.131
CSS, the variables are substituted
after the CSS code has been parsed.

41
00:02:39.131 --> 00:02:43.084
So we don't actually have access
to the first declaration,

42
00:02:43.084 --> 00:02:45.875
the background read that declaration, so

43
00:02:45.875 --> 00:02:51.162
the browser needed to figure out something
else something else that it could do.

44
00:02:51.162 --> 00:02:55.681
This concept is called invalid that
computed value time we're gonna be seeing

45
00:02:55.681 --> 00:02:59.103
it throughout it's a very
important concept, it's not,

46
00:02:59.103 --> 00:03:01.988
it's often abbreviated
in CSS circles as IACVT.

47
00:03:01.988 --> 00:03:06.639
I'm just gonna say invalidate
computed value time when we say this,

48
00:03:06.639 --> 00:03:09.371
cuz this is just a really weird acronym.

49
00:03:11.923 --> 00:03:14.063
So what is a computed value,

50
00:03:14.063 --> 00:03:20.042
there are three main stages in resolving
a CSS value, they're actually more,

51
00:03:20.042 --> 00:03:24.877
but these are the three main ones,
first, there is parse time.

52
00:03:24.877 --> 00:03:30.369
There is when the browser reads, the
specified values as they've been provided,

53
00:03:30.369 --> 00:03:33.752
this is when the browser
goes through the CSS code.

54
00:03:33.752 --> 00:03:39.077
Reads it, pauses it, creates an abstract
syntax tree, creates a tree of objects,

55
00:03:39.077 --> 00:03:44.718
the CSS object model, this is basically
a one-and-done operation, it's done once.

56
00:03:44.718 --> 00:03:48.941
It does not re-done when dimensions
change, when the windows or

57
00:03:48.941 --> 00:03:52.719
is resized it's just done once
when the CSS code changes.

58
00:03:52.719 --> 00:03:57.803
CSS code is repurposed only when
the actual CSS code changes like when we

59
00:03:57.803 --> 00:04:03.748
override the style element for example,
and in most cases, it's only done once.

60
00:04:03.748 --> 00:04:08.309
For example, this is when duplicate
properties in the same rule are removed

61
00:04:08.309 --> 00:04:12.599
and this is when shortcut properties
are expanded to their long hands.

62
00:04:12.599 --> 00:04:17.408
Then there is computed values which is
when most relative values are resolved but

63
00:04:17.408 --> 00:04:18.476
not completely.

64
00:04:18.476 --> 00:04:22.961
There are certain relative values
that are only resolved later

65
00:04:22.961 --> 00:04:26.272
because they require expensive operations.

66
00:04:26.272 --> 00:04:31.188
So for example, this is when relative
units will be resolved to pixels for

67
00:04:31.188 --> 00:04:32.947
example viewport units.

68
00:04:32.947 --> 00:04:37.754
But percentage widths will not be
resolved at computed value time they

69
00:04:37.754 --> 00:04:41.016
will be resolved at what
we say used value time.

70
00:04:41.016 --> 00:04:46.038
Because that's an expensive operation, the
browser leaves it as late as possible and

71
00:04:46.038 --> 00:04:49.845
there's certain things that are done
as late as used value time.

72
00:04:49.845 --> 00:04:54.268
For example, currentcolor is also
resolved then, many people think that

73
00:04:54.268 --> 00:04:58.988
currentcolor is resolved at computed
value time, the currentcolor keyword.

74
00:04:58.988 --> 00:05:04.035
But it's actually only resolved at used
value time, the main distinction that

75
00:05:04.035 --> 00:05:08.952
we're gonna make in this workshop is
parse time versus computed value time.

76
00:05:08.952 --> 00:05:13.519
Remember when earlier, we said that the
syntax of registered properties is checked

77
00:05:13.519 --> 00:05:16.169
at computed value time and
not parse value time.

78
00:05:16.169 --> 00:05:21.119
And that is why we cannot test for at
properties support via feature queries and

79
00:05:21.119 --> 00:05:24.950
it was a bit hand wavy at the time
now you know what that means.

80
00:05:24.950 --> 00:05:29.833
And another thing to remember is that
invalid computed value time is essentially

81
00:05:29.833 --> 00:05:33.654
equivalent to the onset keyword
that is the end result of this.

82
00:05:33.654 --> 00:05:37.712
Anytime a property becomes
invalid computed value time,

83
00:05:37.712 --> 00:05:42.361
it's essentially set to unset,
let's look at another example.

84
00:05:42.361 --> 00:05:45.938
So here,
we have a slightly different example but

85
00:05:45.938 --> 00:05:49.173
it's still setting
the background to red and

86
00:05:49.173 --> 00:05:53.958
then setting it to accent-color
with a fullback of 42 degrees.

87
00:05:53.958 --> 00:06:00.252
So when accent color is not set or
when it's set to initial, what do we get?

88
00:06:00.252 --> 00:06:05.131
&gt;&gt; Three people said transparent like
right after people said red and white,

89
00:06:05.131 --> 00:06:09.167
any guesses,
looks like someone's guessing transparent.

90
00:06:09.167 --> 00:06:12.533
&gt;&gt; The people who guessed
transparent are correct,

91
00:06:12.533 --> 00:06:16.633
the reason we get transparent
is let's take it step by step.

92
00:06:16.633 --> 00:06:21.602
So obviously, we won't get background
red that's thrown away at parts

93
00:06:21.602 --> 00:06:25.104
time that's gone we'll never see it again,
now,

94
00:06:25.104 --> 00:06:29.595
accent color has the value initial so
the full back is triggered.

95
00:06:29.595 --> 00:06:33.036
So we get background 42 degrees and
since at that point,

96
00:06:33.036 --> 00:06:37.547
all we have is a declaration with
background 42 degrees which is invalid.

97
00:06:37.547 --> 00:06:42.086
It has to become invalid computed value
time which gives us the same as unset

98
00:06:42.086 --> 00:06:44.911
which for
background gives us transparency.

99
00:06:44.911 --> 00:06:49.841
So one thing to remember is that fallbacks
can also trigger invalid computed value

100
00:06:49.841 --> 00:06:53.842
time, basically anytime as a result
of variables the browser ends

101
00:06:53.842 --> 00:06:56.781
up with a declaration
that doesn't make sense.

102
00:06:56.781 --> 00:06:59.525
That triggers invalid
computed value time and

103
00:06:59.525 --> 00:07:03.759
this concept was actually introduced
when we designed CSS variables.

104
00:07:03.759 --> 00:07:09.068
But in the future we plan to use it for
other things as well like for example,

105
00:07:09.068 --> 00:07:14.904
in the future, we want to make it possible
to divide values and calc with lengths.

106
00:07:14.904 --> 00:07:19.838
And this might be an avenue to
make it happen, in the previously,

107
00:07:19.838 --> 00:07:24.432
it wasn't possible because of
potential division by zero.

108
00:07:24.432 --> 00:07:27.524
So let's look at some more examples, you,

109
00:07:27.524 --> 00:07:30.868
I'm not sure if you've
heard of LCH colors, so

110
00:07:30.868 --> 00:07:36.490
HSL colors have a bunch of drawbacks
even though they're more human friendly.

111
00:07:36.490 --> 00:07:42.368
The same difference in HSL coordinates can
produce callers with vastly different,

112
00:07:42.368 --> 00:07:48.095
actual color differences, whereas LCH
is designed to be perceptually uniform.

113
00:07:48.095 --> 00:07:50.869
So it doesn't have this problem, and

114
00:07:50.869 --> 00:07:55.651
also LCH can access the entire
gamut of colors in a modern screen.

115
00:07:55.651 --> 00:08:00.214
Whereas HSL colors are restricted to sRGB,
which in today's

116
00:08:00.214 --> 00:08:05.228
screen is like two thirds of
the colors that the screen can produce.

117
00:08:05.228 --> 00:08:10.925
So right now, only Safari supports LCH
colors, so what happens if we try to do

118
00:08:10.925 --> 00:08:16.290
both, if we try to use LCH colors with
some standard CSS color fullback?

119
00:08:16.290 --> 00:08:21.227
So as you probably know,
all of these code snippets would produce

120
00:08:21.227 --> 00:08:25.463
the intended LCH color when
LCH is actually supported.

121
00:08:25.463 --> 00:08:30.123
But when LCH is not supported,
they can produce different results, so

122
00:08:30.123 --> 00:08:34.327
the first bit of code you probably
know what that would produce.

123
00:08:34.327 --> 00:08:38.808
It would produce gold when LCH
is not supported that is what

124
00:08:38.808 --> 00:08:43.298
we've been doing for fullbacks for
decades of using CSS.

125
00:08:43.298 --> 00:08:45.944
So now with custom properties,

126
00:08:45.944 --> 00:08:51.334
it's very common to define global
colors on custom properties,

127
00:08:51.334 --> 00:08:57.130
so what happens if we wanna use LCH
colors, what happens in that case?

128
00:08:57.130 --> 00:09:01.841
So you might be able to guess that
if a browser doesn't understand LCH,

129
00:09:01.841 --> 00:09:06.012
then once it substitutes it into
the background declaration.

130
00:09:06.012 --> 00:09:10.923
It sees an invalid value and
this results in an invalid computed value

131
00:09:10.923 --> 00:09:14.319
time declaration which
makes it transparent.

132
00:09:14.319 --> 00:09:18.357
In the third code example, this actually
produces the exact same result,

133
00:09:18.357 --> 00:09:22.346
it doesn't help, for that,
the cascade happens in the color property.

134
00:09:22.346 --> 00:09:26.174
Because the color property at this point,
the browser doesn't know that this

135
00:09:26.174 --> 00:09:30.423
can only contain colors, it just sees two
declarations for the same custom property.

136
00:09:30.423 --> 00:09:33.199
So it throws away the first one,
it gets the second one,

137
00:09:33.199 --> 00:09:36.820
then tries to substitute it in
background and sees that it's not valid.

138
00:09:41.478 --> 00:09:45.550
Here's another example,
what do you think this might produce, so

139
00:09:45.550 --> 00:09:49.552
we've actually registered our code,
our color property here and

140
00:09:49.552 --> 00:09:52.785
we've said it has to be,
it can only contain colors.

141
00:09:52.785 --> 00:09:57.675
We've given it an initial value of sky
blue, which is probably not a very good

142
00:09:57.675 --> 00:10:02.810
initial value for properties in general,
but here let's see what's going on.

143
00:10:02.810 --> 00:10:06.180
And then we've assigned
a gold color on it,

144
00:10:06.180 --> 00:10:11.110
which every browser understands and
the, and in the same rule.

145
00:10:11.110 --> 00:10:16.358
We've assigned an LCH color on it,
which only safari understands,

146
00:10:16.358 --> 00:10:21.343
so that, what will happen in other
browsers that are not Safari?

147
00:10:21.343 --> 00:10:22.589
&gt;&gt; Sky blue.

148
00:10:22.589 --> 00:10:29.256
&gt;&gt; That's clever, indeed, it's going to
be sky blue but why does this happen?

149
00:10:29.256 --> 00:10:35.547
The reason this happens is that the
property that actually goes into invalid

150
00:10:35.547 --> 00:10:41.850
computed value time mode is not
background now, it's the color property.

151
00:10:41.850 --> 00:10:45.937
So, when we try to assign the LCH
value on the color property,

152
00:10:45.937 --> 00:10:48.616
the browser sees that this is not valid.

153
00:10:48.616 --> 00:10:53.722
And it sees this not at parse time because
as we've said, the syntax of registered

154
00:10:53.722 --> 00:10:58.834
properties is only check that computed
value time, at parse time anything goes.

155
00:10:58.834 --> 00:11:03.519
So then this property becomes
invalid at computed value time and

156
00:11:03.519 --> 00:11:08.463
when a property becomes invalid at
computed value time it goes to its

157
00:11:08.463 --> 00:11:11.257
initial value, which is, sky blue.

158
00:11:11.257 --> 00:11:16.271
So some people might wonder, why did we
end up with this behavior, it's a little

159
00:11:16.271 --> 00:11:21.756
bit unintuitive, why do custom properties
check their syntax at computed value time?

160
00:11:21.756 --> 00:11:26.637
And not at parse time like real CSS
properties that the browser supports, so

161
00:11:26.637 --> 00:11:30.081
the reason for
this is actually with a bit technical.

162
00:11:30.081 --> 00:11:34.972
It's that register new properties which
could happen at any time would trigger

163
00:11:34.972 --> 00:11:37.238
a reparse of the entire stylesheet.

164
00:11:37.238 --> 00:11:41.396
Like you could add an add property
rule through JavaScript or

165
00:11:41.396 --> 00:11:44.168
you could call CSS register property and

166
00:11:44.168 --> 00:11:48.261
then you would trigger a reparse
of the entire style sheet.

167
00:11:48.261 --> 00:11:51.051
If these would check the parse value time,
which is,

168
00:11:51.051 --> 00:11:54.399
in parsing an entire style sheet
is a very expensive operation.

169
00:11:54.399 --> 00:11:57.823
So we did not wanna introduce
a to performance foot gun, and

170
00:11:57.823 --> 00:12:01.249
this is why their syntax is
checked at computed value time,

171
00:12:01.249 --> 00:12:03.800
this is definitely something to remember.

172
00:12:03.800 --> 00:12:07.775
It can be quite confusing,
what's going on if you don't know

173
00:12:07.775 --> 00:12:12.521
that their syntax is checked that
computed value time and not parse time.

174
00:12:12.521 --> 00:12:16.725
Many people assume that it should be
checked at parse time cuz that's what's

175
00:12:16.725 --> 00:12:17.510
reasonable.

