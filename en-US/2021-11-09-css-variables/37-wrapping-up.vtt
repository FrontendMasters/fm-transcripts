WEBVTT

1
00:00:00.000 --> 00:00:01.261
Do we have any more questions?

2
00:00:01.261 --> 00:00:05.005
&gt;&gt; It's a bit weird that CSS
doesn't know its scroll position,

3
00:00:05.005 --> 00:00:07.679
come to think of it as
it knows its viewport.

4
00:00:07.679 --> 00:00:09.378
&gt;&gt; See, that's the thing,

5
00:00:09.378 --> 00:00:13.329
If CSS knew it scroll position
that would introduce cycles.

6
00:00:13.329 --> 00:00:17.040
So it's one of those examples of these
features, that we would love to add.

7
00:00:17.040 --> 00:00:21.878
But it's not feasible right now because we
can't think of a way to get around this.

8
00:00:21.878 --> 00:00:26.000
Let's say there was a scroll x keyword
that you that allowed you to get

9
00:00:26.000 --> 00:00:27.075
the horizontal.

10
00:00:27.075 --> 00:00:32.252
And the scroll y that allowed you to get
the vertical scroll position through CSS.

11
00:00:32.252 --> 00:00:36.443
What if you wrote some CSS that
actually modifies these positions

12
00:00:36.443 --> 00:00:39.192
by making the element longer for example.

13
00:00:39.192 --> 00:00:43.240
Or introducing some padding,
introducing all sorta things, so

14
00:00:43.240 --> 00:00:46.561
we want in general,
it's a design principle of CSS.

15
00:00:46.561 --> 00:00:48.828
That we wanna avoid these cycles,

16
00:00:48.828 --> 00:00:52.980
we don't want you to be able to
write CSS that counsels itself.

17
00:00:52.980 --> 00:00:57.860
If that makes sense, so your CSS can
get access to the viewport dimensions,

18
00:00:57.860 --> 00:01:01.534
because the CSS cannot modify
the viewport dimensions.

19
00:01:01.534 --> 00:01:06.763
But CSS could easily do things that
would modify the scroll position and

20
00:01:06.763 --> 00:01:08.341
we don't want that.

21
00:01:08.341 --> 00:01:11.929
Because that basically would give
you the same effect that you do,

22
00:01:11.929 --> 00:01:14.506
have you ever tried doing
display non on hover.

23
00:01:14.506 --> 00:01:19.199
And then you hover over an element and
it just flickers, this is the kind of

24
00:01:19.199 --> 00:01:23.759
thing that we want to avoid today,
we do not want these kinds of cycles.

25
00:01:23.759 --> 00:01:26.503
So that's the problem right now, and

26
00:01:26.503 --> 00:01:30.722
even container queries were
not feasible for a long time.

27
00:01:30.722 --> 00:01:35.276
Because of this problem, but they found
a way around it Miriam, Suzanne, and

28
00:01:35.276 --> 00:01:37.623
some other people found a way around it.

29
00:01:37.623 --> 00:01:40.541
And that's why we're getting
container queries now but

30
00:01:40.541 --> 00:01:43.101
it took many years of
developers asking for them.

31
00:01:43.101 --> 00:01:48.301
And basically, we could not find a way
to do it cycles are a big problem,

32
00:01:48.301 --> 00:01:50.570
when adding new features to CSS

