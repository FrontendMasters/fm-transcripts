WEBVTT

1
00:00:00.034 --> 00:00:04.828
We were at this pie chart component,
which is currently hard coded at using

2
00:00:04.828 --> 00:00:08.036
these four slices with
these fixed percentages.

3
00:00:08.036 --> 00:00:13.786
And we wanted to make it flexible so
that whoever uses this pie chart component

4
00:00:13.786 --> 00:00:19.011
can set the percentages and
colors through these custom properties.

5
00:00:19.011 --> 00:00:20.647
So how can we do that?

6
00:00:20.647 --> 00:00:22.270
Let's take it step by step.

7
00:00:22.270 --> 00:00:28.392
So the first value is easy,
we can just replace the 20% with value1.

8
00:00:31.217 --> 00:00:36.252
And then for the second value, we do need
to add it with the previous one, because

9
00:00:36.252 --> 00:00:41.529
color stop positions are absolute, not
relative to where the previous stop ended.

10
00:00:41.529 --> 00:00:44.986
So we could do something like this.

11
00:00:47.268 --> 00:00:49.440
But it starting to get a little unwieldy,

12
00:00:49.440 --> 00:00:52.675
especially once we start adding
fallback all over the place.

13
00:00:52.675 --> 00:00:57.377
Which we need to have,
because we need to be able to only

14
00:00:57.377 --> 00:01:00.874
set a few of these properties, not all.

15
00:01:00.874 --> 00:01:06.246
And it gets even worse when we get to
the next one where we would need to repeat

16
00:01:06.246 --> 00:01:13.091
this entire thing,
To get to the actual 30% that we have.

17
00:01:13.091 --> 00:01:16.421
This is not scaling well, is it?

18
00:01:16.421 --> 00:01:22.511
So one way we could make this code
a little bit more manageable is,

19
00:01:22.511 --> 00:01:30.062
just like we've seen before, we can set
these fake private custom properties.

20
00:01:30.062 --> 00:01:36.725
Value1 would just be our actual
value1 with the fallback, but value2,

21
00:01:38.143 --> 00:01:42.478
Would be, Value1,

22
00:01:45.919 --> 00:01:50.919
The one that actually has a fallback,
plus the value2

23
00:01:50.919 --> 00:01:56.668
property that the user of
our component specified.

24
00:01:56.668 --> 00:02:02.783
And then the good thing is that this only
maintains two terms for each addition.

25
00:02:02.783 --> 00:02:07.676
Whereas, previously, the third term had
three terms, the second term had two

26
00:02:07.676 --> 00:02:11.414
terms, and we would get to five
terms when we got to value5.

27
00:02:11.414 --> 00:02:17.487
So here we can just add value2 with
value3 because it's a cumulative sum.

28
00:02:20.832 --> 00:02:22.028
So that's all we need.

29
00:02:22.028 --> 00:02:26.288
And we can actually specify all
five at this point, why not?

30
00:02:31.946 --> 00:02:33.741
And let's increase these as well.

31
00:02:33.741 --> 00:02:39.795
So now we can go here, and
instead of all of this,

32
00:02:39.795 --> 00:02:43.059
we just have our value1.

33
00:02:43.059 --> 00:02:46.266
And here we don't need this
entire calc expression,

34
00:02:46.266 --> 00:02:50.411
we can just specify the value2
that we've already set internally.

35
00:02:50.411 --> 00:02:56.227
Here we said we specify value3 and so on.

36
00:02:56.227 --> 00:03:01.138
And let's add the other color
stops as well to allow up

37
00:03:01.138 --> 00:03:06.065
to five slices,
since we've already defined them.

38
00:03:08.791 --> 00:03:12.989
And right now they all have the same
color, so let's space them out a bit.

39
00:03:16.782 --> 00:03:18.891
And notice, by the way,

40
00:03:18.891 --> 00:03:24.528
at some point I said hsl is not
a very good way of specifying colors.

41
00:03:24.528 --> 00:03:27.683
I mean, it's definitely better than
RGB because it's more human friendly.

42
00:03:27.683 --> 00:03:34.211
But notice the perceptual uniformity
problem that I mentioned earlier,

43
00:03:34.211 --> 00:03:39.165
these last two colors still
differ by 25 hue degrees.

44
00:03:39.165 --> 00:03:45.466
But notice how similar they look,
compare that to this color and this color.

45
00:03:45.466 --> 00:03:50.357
These look quite different but
they also differ by 25 degrees.

46
00:03:50.357 --> 00:03:55.747
All of these colors, this red, this
orange, this yellow, and these two greens,

47
00:03:55.747 --> 00:04:00.830
all of these differ by 25 degrees but
they are not equally spaced, are they?

48
00:04:00.830 --> 00:04:04.725
That is one of the problems that
LCH will solve as an aside.

49
00:04:04.725 --> 00:04:10.651
This is already useful, we can already
use it to display various kinds of data,

50
00:04:10.651 --> 00:04:14.550
but we want to make the colors
customizable as well.

51
00:04:14.550 --> 00:04:17.973
So we have a color3 variable here, but

52
00:04:17.973 --> 00:04:23.161
we want the entire range to be
possible to specify color1,

53
00:04:23.161 --> 00:04:29.104
color2, color3 up to 5,
either all of them or just a few of them.

54
00:04:29.104 --> 00:04:30.460
So we still need to have fallbacks.

55
00:04:30.460 --> 00:04:35.461
So what we could do is
we could go here and

56
00:04:35.461 --> 00:04:41.988
do color1 and
then have this as a fallback, oops.

57
00:04:46.243 --> 00:04:48.273
But it's getting a little
bit unwieldy as well.

58
00:04:48.273 --> 00:04:52.071
So we're gonna specify them as
separate variables too, I mean,

59
00:04:52.071 --> 00:04:56.709
this doesn't have the cumulative problem
that we had earlier with the values.

60
00:04:56.709 --> 00:05:02.150
But it's still making
this gradient quite long,

61
00:05:02.150 --> 00:05:08.117
especially if we start
converting all colors to this.

62
00:05:11.583 --> 00:05:12.960
So let's do the same thing.

63
00:05:12.960 --> 00:05:17.911
So color1 would be,

64
00:05:20.669 --> 00:05:27.214
This, And
then we'll just add five of these.

65
00:05:29.903 --> 00:05:35.264
And here as well.

66
00:05:39.273 --> 00:05:43.690
And then all we need to do
here is use these underscored

67
00:05:43.690 --> 00:05:48.219
properties that already have
the fallbacks built in.

68
00:05:50.870 --> 00:05:53.919
Which makes our gradient
much easier to read.

69
00:06:03.002 --> 00:06:06.873
And we need to actually increase
the index here, there we go.

70
00:06:06.873 --> 00:06:11.460
Alright, yeah, cuz we're setting
all of these to the same color.

71
00:06:11.460 --> 00:06:15.284
So let's change the hues as well and

72
00:06:15.284 --> 00:06:19.115
now we should go back to what we had.

73
00:06:19.115 --> 00:06:22.358
So now this works but
this is quite unwieldy, isn't it?

74
00:06:22.358 --> 00:06:26.367
And we would also need to

75
00:06:26.367 --> 00:06:31.183
customize the background.

76
00:06:31.183 --> 00:06:37.279
Notice that here we have
a final background layer,

77
00:06:37.279 --> 00:06:42.240
which allows us to
specify what we want for

78
00:06:42.240 --> 00:06:45.665
any leftover percentages.

79
00:06:45.665 --> 00:06:51.749
So right now if the percentages we
specified don't add up to a full 100%,

80
00:06:51.749 --> 00:06:54.192
we show this final gray slice.

81
00:06:54.192 --> 00:07:00.198
So we allow a variable
to specify that as well,

82
00:07:00.198 --> 00:07:04.053
and we use gray as a fallback.

