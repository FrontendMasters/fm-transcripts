WEBVTT

1
00:00:00.170 --> 00:00:03.832
Since custom properties
are inherited properties,

2
00:00:03.832 --> 00:00:07.329
they also inherit down
shadow DOM boundaries, and

3
00:00:07.329 --> 00:00:12.535
they're not affected by any potential
old-based resets, like the old CSS

4
00:00:12.535 --> 00:00:18.260
property that lets you reset any
property in CSS just in one declaration.

5
00:00:18.260 --> 00:00:20.030
Custom properties are not
affected by that.

6
00:00:22.040 --> 00:00:25.110
Users of web components
cannot directly style them.

7
00:00:25.110 --> 00:00:28.850
That's the whole point of
encapsulation of web components.

8
00:00:28.850 --> 00:00:31.415
But custom properties can
provide style hooks for

9
00:00:31.415 --> 00:00:34.400
customizing aspects of the component.

10
00:00:34.400 --> 00:00:35.464
So let's look at an example.

11
00:00:35.464 --> 00:00:40.229
Here, I'm using the Shoelace
library of web components.

12
00:00:42.811 --> 00:00:46.159
In fact,
the website is called Shoelace Style,

13
00:00:46.159 --> 00:00:49.927
if you wanna look at them,
they're quite beautiful.

14
00:00:52.499 --> 00:00:56.480
So here I'm using this
image-comparer web component.

15
00:00:56.480 --> 00:01:00.483
It allows you to specify two images and
slide this thing to compare them.

16
00:01:04.439 --> 00:01:08.060
And shoelace already supports
certain CSS variables for

17
00:01:08.060 --> 00:01:10.860
customizing each of their web components.

18
00:01:11.990 --> 00:01:15.068
Let's look at the Shoelace website.

19
00:01:15.068 --> 00:01:20.856
So, the image comparer is here and
you can see there's a CSS custom property

20
00:01:20.856 --> 00:01:26.565
section that tells you which custom
properties are accepted for styling.

21
00:01:30.686 --> 00:01:33.426
This is only the beginning of
people using custom properties

22
00:01:33.426 --> 00:01:37.090
to customize their components, and
I'm really glad that Shoelace is doing it.

23
00:01:37.090 --> 00:01:40.926
Not all web components libraries
have started doing this.

24
00:01:40.926 --> 00:01:44.964
So they expose two properties,
divider-width and handle-size.

25
00:01:44.964 --> 00:01:48.742
So remember in the past when
you were using someone's code,

26
00:01:48.742 --> 00:01:53.260
if you wanted to customize a part of
its styling, you had to drill down and

27
00:01:53.260 --> 00:01:57.507
inspect, see how they've
implemented things, override rules.

28
00:01:57.507 --> 00:02:00.801
With custom properties,
component authors can just tell you,

29
00:02:00.801 --> 00:02:02.814
these are the properties you can set and

30
00:02:02.814 --> 00:02:06.090
take care of applying them
inside the component.

31
00:02:06.090 --> 00:02:11.462
So for example, I can set these and
you can see the result.

32
00:02:11.462 --> 00:02:14.154
I can set the handle size, and

33
00:02:14.154 --> 00:02:19.520
the component just takes
care of adapting its style.

34
00:02:19.520 --> 00:02:22.595
And of course, you can do the same
thing in your own components.

35
00:02:28.166 --> 00:02:33.266
Even as consumers of components though,
even when we're using components that

36
00:02:33.266 --> 00:02:38.591
someone else made, we can create our own
obstructions through custom properties.

37
00:02:38.591 --> 00:02:42.243
So here is the same
image-comparer component.

38
00:02:42.243 --> 00:02:46.145
And this component also exposes two parts,

39
00:02:46.145 --> 00:02:50.787
if we wanna do more
heavyweight CSS customization,

40
00:02:50.787 --> 00:02:56.917
it exposes the divider in the handler
CSS elements that we can style.

41
00:02:56.917 --> 00:03:00.593
And if we go back to
the documentation of Shoelace,

42
00:03:00.593 --> 00:03:06.760
we can see right under the Custom Property
section, it lists which parts it exposes.

43
00:03:08.740 --> 00:03:13.984
In case you haven't seen CSS parts before,
they are this API that lets you

44
00:03:13.984 --> 00:03:19.062
expose specific elements from inside
your web components shadow DOM so

45
00:03:19.062 --> 00:03:24.079
that consumers of your component
can style them as regular elements.

46
00:03:24.079 --> 00:03:27.916
So that you don't have to expose
your entire structure in light DOM,

47
00:03:27.916 --> 00:03:31.270
only those specific elements
you want to expose.

48
00:03:31.270 --> 00:03:34.814
So here we wanted to make
a higher level abstraction so

49
00:03:34.814 --> 00:03:39.670
that people can color the entire
divider and handle together.

50
00:03:39.670 --> 00:03:43.976
Of course we could do that by styling both
parts, but it means we need to use these

51
00:03:43.976 --> 00:03:47.730
pseudo element selectors and
we wanted to make it easier.

52
00:03:47.730 --> 00:03:51.022
So we could actually have a separate rule,

53
00:03:53.547 --> 00:03:57.988
That sets a higher level
divider color property.

54
00:03:57.988 --> 00:04:04.825
Let's set it to skyblue for now and
then just use the property.

55
00:04:08.292 --> 00:04:12.086
And now we only need to include
this in one part of our CSS and

56
00:04:12.086 --> 00:04:15.495
everywhere else where
we're using the component,

57
00:04:15.495 --> 00:04:20.159
we just use divider color in the main
rule that styles the main element.

58
00:04:20.159 --> 00:04:23.500
And we don't need to worry
about which parts are which and

59
00:04:23.500 --> 00:04:27.480
which parts we need to style and
how, we just set this one property.

60
00:04:29.420 --> 00:04:32.726
And obviously you might be thinking,
why would we need to have multiple

61
00:04:32.726 --> 00:04:36.210
image-comparer components,
but this is just an example.

62
00:04:36.210 --> 00:04:38.869
The point that this makes applies
to any kind of component.

63
00:04:42.646 --> 00:04:47.960
And of course a similar point applies
to native components as well.

64
00:04:47.960 --> 00:04:49.801
So here we have a progress bar.

65
00:04:51.723 --> 00:04:56.182
And we're using these vendor
prefixed pseudo elements to style it

66
00:04:56.182 --> 00:04:58.660
because we wanted to make it purple.

67
00:05:00.370 --> 00:05:03.731
But if we have many progress
elements in our websites,

68
00:05:03.731 --> 00:05:08.490
we don't wanna be using vendor prefixed
pseudo elements all over the place.

69
00:05:09.580 --> 00:05:11.400
It's kind of an anti-pattern.

70
00:05:11.400 --> 00:05:14.764
We wanna keep them in one place so
that when we get a more standardized

71
00:05:14.764 --> 00:05:17.891
version of this code,
we can just replace it in one fell swoop,

72
00:05:17.891 --> 00:05:20.820
not have to hunt it down
in multiple places.

73
00:05:20.820 --> 00:05:26.310
So for these cases, it also makes sense
to define a higher level property.

74
00:05:26.310 --> 00:05:28.554
Like for example, bar color.

75
00:05:30.477 --> 00:05:32.561
Let's make it gold.

76
00:05:32.561 --> 00:05:37.106
And then we use it in
those pseudo elements and

77
00:05:37.106 --> 00:05:42.738
we never have to use the pseudo
elements anywhere else.

78
00:05:42.738 --> 00:05:48.316
Actually let's make it a bit darker,
let's make it orange,

79
00:05:48.316 --> 00:05:52.520
slightly darker,
yeah it's more of a brown.

80
00:05:54.890 --> 00:05:57.890
Anyway let's say we wanted
to make it this weird brown.

81
00:05:57.890 --> 00:06:03.322
And now this means that anywhere
where we have a progress element,

82
00:06:03.322 --> 00:06:07.590
we can customize it by just
using this one property,

83
00:06:07.590 --> 00:06:10.901
even in the inline style if we wanted to.

84
00:06:16.082 --> 00:06:20.029
So another thing to remember is that
custom properties can also help

85
00:06:20.029 --> 00:06:23.837
us abstract away ugly parts of our
CSS that we don't want to repeat

86
00:06:23.837 --> 00:06:25.100
in multiple places.

87
00:06:30.066 --> 00:06:33.983
So it's good to remember that custom
properties inherit down shadow DOM

88
00:06:33.983 --> 00:06:34.980
boundaries.

89
00:06:34.980 --> 00:06:40.127
This was actually one of the very explicit
goals when we designed custom properties.

90
00:06:40.127 --> 00:06:45.010
They were designed to afford components
to expose styling hooks so that consumers

91
00:06:45.010 --> 00:06:49.197
of components can style them without
having to break encapsulation.

