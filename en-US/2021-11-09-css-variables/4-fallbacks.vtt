WEBVTT

1
00:00:00.310 --> 00:00:01.570
So what do I mean by fallbacks.

2
00:00:01.570 --> 00:00:03.311
Fallbacks have multiple interpretations.

3
00:00:06.029 --> 00:00:10.288
Here we have a gallery of
values cut pictures and

4
00:00:10.288 --> 00:00:15.613
we have a little bit of code
here that uses custom properties

5
00:00:15.613 --> 00:00:22.340
to apply transforms individually,
namely scale and rotate transforms.

6
00:00:24.430 --> 00:00:29.030
So we want to apply subtle rotations
to some of these pictures.

7
00:00:32.490 --> 00:00:37.331
So let's do save and child odd to apply

8
00:00:37.331 --> 00:00:41.878
a rotation to every other picture.

9
00:00:48.494 --> 00:00:53.988
And now you see this

10
00:00:53.988 --> 00:00:58.800
is not working.

11
00:01:00.440 --> 00:01:04.981
I'm not surprised that it's not working,
this is the whole point.

12
00:01:04.981 --> 00:01:08.107
I'm going to explain why it's not working.

13
00:01:08.107 --> 00:01:12.801
But at this point we might have
been quite puzzled by this, but

14
00:01:12.801 --> 00:01:16.606
let's continue writing
the code as we intended.

15
00:01:16.606 --> 00:01:24.431
So we also wanted to apply a different
rotation on every third image.

16
00:01:28.561 --> 00:01:32.740
So let's do something like this,
still not working.

17
00:01:32.740 --> 00:01:38.130
And we wanted to also scale
images when they are hoovered.

18
00:01:39.320 --> 00:01:47.575
So we're gonna add a hover style
as well that scales them by 20%.

19
00:01:47.575 --> 00:01:52.860
And notice what's happening here.

20
00:01:54.950 --> 00:01:57.880
The transforms are either
applied together or not at all.

21
00:01:58.880 --> 00:02:03.230
Either we get no rotation or
we get both rotation and scale.

22
00:02:03.230 --> 00:02:03.890
And why is that?

23
00:02:05.850 --> 00:02:10.610
This is because here where we're using
our scale and rotate custom properties,

24
00:02:10.610 --> 00:02:14.890
the browser doesn't know what value
to apply when they are not both set.

25
00:02:16.910 --> 00:02:22.950
So, this style only works when we set
both of them, which is not very useful.

26
00:02:22.950 --> 00:02:27.938
The whole point is that we can use
custom properties to independently

27
00:02:27.938 --> 00:02:29.401
set parts of style.

28
00:02:29.401 --> 00:02:34.024
However, the bar function provides a
second argument that we can use to provide

29
00:02:34.024 --> 00:02:35.740
such fallbacks.

30
00:02:35.740 --> 00:02:39.317
So we would provide the fallback
of one for the scale transform so

31
00:02:39.317 --> 00:02:43.080
that no scale happens if we
haven't set this property.

32
00:02:43.080 --> 00:02:46.526
And zero degrees for
the rotate transport and

33
00:02:46.526 --> 00:02:52.328
now it's suddenly all works, now we get
the the rotations that we wanted and

34
00:02:52.328 --> 00:02:56.877
we also get the entirely
independent scale that we wanted.

35
00:02:57.923 --> 00:03:02.845
You might be thinking,
why don't I just do this?

36
00:03:02.845 --> 00:03:07.280
Why don't I just go here and
set scale and rotate here?

37
00:03:07.280 --> 00:03:09.979
And then they always have a value.

38
00:03:12.408 --> 00:03:15.390
As you'll see, this also works.

39
00:03:15.390 --> 00:03:16.536
You could do that.

40
00:03:16.536 --> 00:03:20.978
It's not as good because the problem
in that case is that anyone else,

41
00:03:20.978 --> 00:03:25.724
who wants to style this gallery, and
wants to override these properties,

42
00:03:25.724 --> 00:03:30.792
needs to use a selector of at least the
same specificity as the one you've used.

43
00:03:30.792 --> 00:03:35.441
Whereas with fallbacks, any code that
sets these properties no matter how,

44
00:03:35.441 --> 00:03:37.229
even if they're inherited,

45
00:03:37.229 --> 00:03:41.820
or if they're set through a very low
specificity selector, it just works.

46
00:03:44.658 --> 00:03:49.818
And lastly, another alternative to making

47
00:03:49.818 --> 00:03:54.281
our code work is to just register these

48
00:03:54.281 --> 00:03:59.030
properties, we could use @property.

49
00:04:01.380 --> 00:04:03.200
Let's register a scale for example.

50
00:04:04.570 --> 00:04:08.300
And we can say the syntax is a number.

51
00:04:11.209 --> 00:04:12.481
It does not inherit.

52
00:04:12.481 --> 00:04:16.176
It wouldn't make sense to make it inherit.

53
00:04:16.176 --> 00:04:18.536
And its initial value is 1.

54
00:04:18.536 --> 00:04:23.610
And now we don't actually
need to provide the fallback.

55
00:04:23.610 --> 00:04:27.742
And that is actually a far superior method
because it means that if you're using

56
00:04:27.742 --> 00:04:31.690
the custom property multiple times,
you don't need to repeat the fallback

57
00:04:31.690 --> 00:04:35.280
every time or assign it to a variable or
anything like that.

58
00:04:35.280 --> 00:04:39.491
So this is strictly superior but
since it's not yet supported everywhere,

59
00:04:39.491 --> 00:04:41.681
we need the other workarounds as well.

60
00:04:41.681 --> 00:04:43.950
And note that you can't do both.

61
00:04:43.950 --> 00:04:47.030
Once you register the property
the fallback never applies.

62
00:04:47.030 --> 00:04:49.108
In any case that the fallback would apply,

63
00:04:49.108 --> 00:04:52.180
you just get the initial value
that you have already declared.

64
00:04:57.477 --> 00:05:00.094
So how do these fallbacks actually work?

65
00:05:00.094 --> 00:05:05.620
People sort of intuitively understand that
when the variable doesn't have a value,

66
00:05:05.620 --> 00:05:07.163
they get the fallback.

67
00:05:07.163 --> 00:05:09.582
But that is a little bit hand-wavy,

68
00:05:09.582 --> 00:05:13.413
what does it mean that
the variable doesn't have a value?

69
00:05:13.413 --> 00:05:15.334
Let's look at a few examples.

70
00:05:15.334 --> 00:05:20.943
So what happens given that we have this
code, it sets the background to red, and

71
00:05:20.943 --> 00:05:26.490
then it sets the background to whatever
X and code is with a fallback of orange.

72
00:05:26.490 --> 00:05:31.888
What happens if accent color is set
to an actual color that is supported,

73
00:05:31.888 --> 00:05:33.400
like yellowgreen?

74
00:05:33.400 --> 00:05:36.950
What would you expect to happen?

75
00:05:36.950 --> 00:05:38.640
It's not a trick question.

76
00:05:38.640 --> 00:05:39.500
You will get yellowgreen.

77
00:05:39.500 --> 00:05:41.520
I mean that's the whole point.

78
00:05:43.330 --> 00:05:48.411
What happens when no accent
color variable is set anywhere?

79
00:05:48.411 --> 00:05:50.410
You would get orange.

80
00:05:50.410 --> 00:05:51.220
That's the whole point.

81
00:05:52.460 --> 00:05:56.470
What happens if accent color is set but
it's set to the initial keyword?

82
00:05:57.570 --> 00:06:01.122
So the initial keyword returns
the variable to its initial value,

83
00:06:01.122 --> 00:06:03.990
which is exactly the same
value as when it's not set.

84
00:06:05.050 --> 00:06:08.530
So you would still get the fallback,
you would still get orange.

85
00:06:08.530 --> 00:06:11.405
And that is actually,
as we'll see later on,

86
00:06:11.405 --> 00:06:15.109
this is actually a way to
explicitly request the fallback.

87
00:06:15.109 --> 00:06:19.367
In some cases we want to do that,
we want to trigger the fallback, so

88
00:06:19.367 --> 00:06:22.008
we set the variable to initial to do that.

89
00:06:22.008 --> 00:06:27.470
And what happens if the browser
doesn't support CSS variables at all.

90
00:06:27.470 --> 00:06:32.340
Which these days is
basically just IE 11 So

91
00:06:32.340 --> 00:06:36.416
many people think, that you would
get the fallback in that case.

92
00:06:36.416 --> 00:06:40.506
Many people think that,
that's the point of using a fallback, but

93
00:06:40.506 --> 00:06:43.230
that actually doesn't make sense.

94
00:06:43.230 --> 00:06:47.670
How can a browser that doesn't understand
CSS variables understand the var function?

95
00:06:49.530 --> 00:06:52.828
A browser that does not
support CSS variables,

96
00:06:52.828 --> 00:06:55.970
doesn't understand the second line at all.

97
00:06:57.690 --> 00:06:58.600
So you would get red.

98
00:07:03.643 --> 00:07:07.865
So to sum up, the var fallback is
applied when there is no value or

99
00:07:07.865 --> 00:07:10.930
when the variable results to initial.

100
00:07:10.930 --> 00:07:13.010
And these are not even the only cases.

101
00:07:13.010 --> 00:07:17.557
Later on we'll see some other cases
that trigger the fallback, but

102
00:07:17.557 --> 00:07:19.328
these are the main cases.

103
00:07:19.328 --> 00:07:24.155
And that the var fallback has no help
in browsers that don't support CSS

104
00:07:24.155 --> 00:07:28.668
variables at all, which like we've
said is on the IE 11 really.

105
00:07:28.668 --> 00:07:32.720
So this is the browser support
right now for CSS variables.

106
00:07:33.850 --> 00:07:37.760
I can open it and kind of use if you
wanna get more detailed information.

107
00:07:37.760 --> 00:07:40.810
It's basically 95% of visitors.

108
00:07:40.810 --> 00:07:46.338
So I imagine for most of you CSS variables
are fine to use unless you're working

109
00:07:46.338 --> 00:07:51.820
on enterprise, and you still have to
support IE 11 at least in a basic way.

110
00:07:51.820 --> 00:07:54.382
So what can you do in that case?

111
00:07:54.382 --> 00:07:58.070
Well, there's always @supports,

112
00:07:58.070 --> 00:08:03.610
do note that IE 11 doesn't
support @support either.

113
00:08:03.610 --> 00:08:07.891
So you would only need to use
@support to progressively enhance and

114
00:08:07.891 --> 00:08:11.057
to use CSS variables
inside the @supports rule.

115
00:08:11.057 --> 00:08:16.220
There is also the knot version of
@supports where you can apply what's

116
00:08:16.220 --> 00:08:21.826
inside only when the browser doesn't
support something we do not want that.

117
00:08:21.826 --> 00:08:26.929
Cuz that only applies your code at
the intersection of browsers that don't

118
00:08:26.929 --> 00:08:32.036
support the feature and also support
@supports, so that's no use here.

119
00:08:32.036 --> 00:08:38.138
But for CSS variables this works fine,
you can use any custom property and

120
00:08:38.138 --> 00:08:42.569
any value inside here,
it could really be anything,

121
00:08:42.569 --> 00:08:46.423
like whatever, yolo, anything works fine.

122
00:08:46.423 --> 00:08:52.099
Do note that in most cases,
you don't actually need to do this.

123
00:08:52.099 --> 00:08:57.046
This is for rather elaborate
fallbacks where you don't only

124
00:08:57.046 --> 00:09:01.896
need to provide an alternative
value of the same property,

125
00:09:01.896 --> 00:09:06.660
but you also need to style
other properties differently.

126
00:09:10.929 --> 00:09:14.574
In this case for example where we just
wanna set a different background,

127
00:09:18.074 --> 00:09:19.877
We can just use an actual variable.

128
00:09:25.851 --> 00:09:30.831
So, to sum up you can use @supports
to provide more elaborate fallback

129
00:09:30.831 --> 00:09:35.323
styling and do not use negative queries,
not for this at least.

130
00:09:39.034 --> 00:09:42.200
And this is currently the browser
support for @supports.

131
00:09:46.012 --> 00:09:50.350
As you can see it's basically
supported everywhere except I11.

132
00:09:53.226 --> 00:09:57.305
So a question that some
of you might have is,

133
00:09:57.305 --> 00:10:02.170
can we use @support to
detect @property support?

134
00:10:02.170 --> 00:10:03.762
Let's try to do that.

135
00:10:03.762 --> 00:10:05.524
Let's take a pause and

136
00:10:05.524 --> 00:10:11.190
think how would you try to use
@supports to detect @property support.

137
00:10:16.667 --> 00:10:20.779
So my first thought was
that I could use and

138
00:10:20.779 --> 00:10:26.419
@property rule to the define something,
let's say p or

139
00:10:26.419 --> 00:10:32.197
foo whatever number and
I would give it a syntax of number.

140
00:10:35.517 --> 00:10:38.250
And in here its value of,
it doesn't really matter.

141
00:10:40.000 --> 00:10:43.830
And an initial value just
because it's required.

142
00:10:43.830 --> 00:10:48.587
And then I would go here and
say, supports,

143
00:10:48.587 --> 00:10:53.000
like something, css, variables.

144
00:10:53.000 --> 00:10:55.340
I tend to use this query for
variables in general.

145
00:10:55.340 --> 00:11:00.121
So we wanna apply this to
a browser that supports CSS

146
00:11:00.121 --> 00:11:05.550
variables in general and
doesn't @property.

147
00:11:05.550 --> 00:11:10.363
So you would say something like and
not, And

148
00:11:10.363 --> 00:11:15.505
I would use my registered number,
custom property and

149
00:11:15.505 --> 00:11:20.105
set it to something that
is not a number like foo.

150
00:11:24.663 --> 00:11:27.274
And if this turned out to be unsupported,

151
00:11:27.274 --> 00:11:30.267
then this means that
the registration worked.

152
00:11:35.872 --> 00:11:40.415
But notice that this is not applying,
my background is now red,

153
00:11:40.415 --> 00:11:43.710
because the browser
supports this just fine.

154
00:11:45.070 --> 00:11:48.351
The browser will accept any value for
any custom property,

155
00:11:48.351 --> 00:11:50.260
whether it's registered or not.

156
00:11:52.270 --> 00:11:57.752
This is because @supports actually checks
syntax that is valid on parse time and

157
00:11:57.752 --> 00:12:00.610
any syntax goes at parse time.

158
00:12:00.610 --> 00:12:05.290
The syntax of a registered property is
check that computed value time not when

159
00:12:05.290 --> 00:12:07.885
the browser is actually reading CSS code.

160
00:12:07.885 --> 00:12:12.792
We'll get into the nitty gritty of
what parse time versus computer time

161
00:12:12.792 --> 00:12:14.600
means a little bit later.

162
00:12:14.600 --> 00:12:18.879
But what I want you to remember
now is that we can't actually use

163
00:12:18.879 --> 00:12:21.888
@supports to detect @property support.

164
00:12:21.888 --> 00:12:26.744
In fact, I have not found any CSS
based way to detect @property, but

165
00:12:26.744 --> 00:12:30.035
detecting it with
JavaScript is fairly easy.

166
00:12:30.035 --> 00:12:35.304
You would just check if there is this
global variable called CSS property rule

167
00:12:35.304 --> 00:12:40.345
that's the interface that @property
rules correspond to in the CSS om.

168
00:12:40.345 --> 00:12:43.236
And you could check if that object exists,

169
00:12:43.236 --> 00:12:46.375
you would just add a class
to the root element.

170
00:12:46.375 --> 00:12:51.182
And then you can use the sentence
selectors with @class to vary your

171
00:12:51.182 --> 00:12:55.315
CSS depending on whether
@property is supported or not,

172
00:12:55.315 --> 00:13:00.930
which given its browser support right now,
it's still very important.

173
00:13:00.930 --> 00:13:04.950
If we use @property,
we do want to specify fallbacks as well.

174
00:13:05.980 --> 00:13:06.778
Unless it's for

175
00:13:06.778 --> 00:13:10.721
something that is very superficial
decoration we're fine if it doesn't exist.

176
00:13:10.721 --> 00:13:13.270
But in most cases we do
want to provide fallbacks.

177
00:13:16.288 --> 00:13:22.950
Another point that confuses people when
it comes to these fallbacks is this.

178
00:13:22.950 --> 00:13:26.428
So, take a look at this code for a bit.

179
00:13:26.428 --> 00:13:31.398
Is this specifying multiple fallbacks and
what does that mean?

180
00:13:35.939 --> 00:13:42.160
So actually, anything after
the comma is part of the fallback.

181
00:13:42.160 --> 00:13:43.806
So this will just give us a yellowgreen.

182
00:13:43.806 --> 00:13:48.390
When the fallback is applied,
it's equivalent to just having

183
00:13:48.390 --> 00:13:53.233
a background of none, yellowgreen,
which is just two background

184
00:13:53.233 --> 00:13:58.006
layers one without a background image and
one with yellowgreen.

