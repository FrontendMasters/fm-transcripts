WEBVTT

1
00:00:00.000 --> 00:00:04.923
When I started discussing the scores,
many people were surprised.

2
00:00:04.923 --> 00:00:09.350
How could you possibly spend a whole
day discussing CSS variables?

3
00:00:09.350 --> 00:00:11.582
Like really, a whole day?

4
00:00:11.582 --> 00:00:14.780
How much is there to CSS variables?

5
00:00:14.780 --> 00:00:19.600
So this actually stems from
a misconception about what

6
00:00:19.600 --> 00:00:22.017
CSS variables really are.

7
00:00:22.017 --> 00:00:25.171
A lot of people are used to
something like this in Sass,

8
00:00:25.171 --> 00:00:29.029
they define like their global variables,
and then they use them.

9
00:00:29.029 --> 00:00:34.129
And it's pretty processed and CSS is
spat out less looks kind of similar,

10
00:00:34.129 --> 00:00:36.524
just slightly different syntax.

11
00:00:36.524 --> 00:00:42.826
So then they refactor their
CSS to look like this.

12
00:00:42.826 --> 00:00:47.533
And they're like, okay, I don't
understand what all the fuss is about,

13
00:00:47.533 --> 00:00:51.660
this just does the same things
with weirder, lengthier syntax.

14
00:00:51.660 --> 00:00:57.292
But that buries the lead because
CSS variables can do so much more.

15
00:00:57.292 --> 00:01:00.143
So let's look at an example here and

16
00:01:00.143 --> 00:01:04.239
this is the first slide
that has live coding areas.

17
00:01:04.239 --> 00:01:09.043
So I'm gonna walk you around a little bit
because you're gonna be doing exercises on

18
00:01:09.043 --> 00:01:09.933
these as well.

19
00:01:09.933 --> 00:01:14.828
You can edit the code areas by typing
here, you can press the up and

20
00:01:14.828 --> 00:01:18.664
down auto keys to increment and
decrement things.

21
00:01:18.664 --> 00:01:25.214
And it works just like dev tools so
shift and alt and control work as well.

22
00:01:25.214 --> 00:01:30.159
Every slide has notes on
the top right corner.

23
00:01:30.159 --> 00:01:34.548
Unless I tell you to open these notes,
you probably won't need them during

24
00:01:34.548 --> 00:01:39.148
the workshop, but they often have
supplemental resources that you could look

25
00:01:39.148 --> 00:01:43.414
at by yourself after the workshop,
or if you're watching this at home.

26
00:01:43.414 --> 00:01:47.873
You can press the Next button to go to the
next slide because sometimes the arrow key

27
00:01:47.873 --> 00:01:48.656
won't work.

28
00:01:48.656 --> 00:01:52.995
And those slides if you focus on
the iframe here, and if you're more

29
00:01:52.995 --> 00:01:57.639
comfortable editing code in code pen
you can press the code pen button and

30
00:01:57.639 --> 00:02:00.934
it opens the current state
of your code in code pen.

31
00:02:00.934 --> 00:02:04.637
So you could even start writing
code in the code area here and

32
00:02:04.637 --> 00:02:09.245
finish in code pen if you feel that
you'd be more comfortable doing that.

33
00:02:09.245 --> 00:02:12.839
And you can click on the HTML
panel to pop up the HTML or

34
00:02:12.839 --> 00:02:14.973
the CSS panel to pop up the CSS.

35
00:02:14.973 --> 00:02:21.320
One thing to note, is that on these
slides it doesn't include the entire,

36
00:02:21.320 --> 00:02:26.776
CSS code but only what's relevant
to this particular example.

37
00:02:26.776 --> 00:02:30.083
Whereas if you open on code pen
obviously will need to have the entire

38
00:02:30.083 --> 00:02:32.007
CSS code otherwise it wouldn't work.

39
00:02:32.007 --> 00:02:36.260
So that is part of the reason why I prefer
these because I can show you only what's

40
00:02:36.260 --> 00:02:39.498
relevant and not the entire like
background setting code and

41
00:02:39.498 --> 00:02:45.552
like padding and margins and all of
those that are not actually relevant, So

42
00:02:45.552 --> 00:02:50.610
back to the point I wanted to make here,
so take a look at this

43
00:02:50.610 --> 00:02:56.681
code I'm setting the corner size
custom property on these two rules and

44
00:02:56.681 --> 00:03:00.546
I'm actually using it
on on a separate rule.

45
00:03:00.546 --> 00:03:03.220
This is something that you
already cannot do in Sass.

46
00:03:03.220 --> 00:03:07.319
In fact, in the notes I have a link
to a code pen, that we could look at,

47
00:03:07.319 --> 00:03:10.794
that shows you what kind of syntax
error happens if you try to

48
00:03:10.794 --> 00:03:12.694
do something like this in Sass.

49
00:03:12.694 --> 00:03:17.100
So I've actually re-factor this example
to use exactly the same code but

50
00:03:17.100 --> 00:03:18.521
with Sass variables and

51
00:03:18.521 --> 00:03:23.297
if I try to edit here you'll see that
code pen complains that there's an error.

52
00:03:23.297 --> 00:03:27.985
What is the error undefined variable
because in Sass every variable

53
00:03:27.985 --> 00:03:32.672
needs to be used within the same
curly brackets that it's defined or

54
00:03:32.672 --> 00:03:35.238
nested curly brackets inside them.

55
00:03:35.238 --> 00:03:39.233
It has what we call in programming
languages lexical scope it's the same

56
00:03:39.233 --> 00:03:43.959
thing that that JavaScript has it's the
same way that JavaScript scopes variables.

57
00:03:43.959 --> 00:03:48.693
In CSS we have dynamic scope
variables are defined on elements and

58
00:03:48.693 --> 00:03:53.351
they're scoped to the element and
we can define them anywhere.

59
00:03:53.351 --> 00:04:01.083
So notice here we can use whatever kind
of measurement we want first off and

60
00:04:01.083 --> 00:04:06.570
we could even set this property
on an inline style and

61
00:04:06.570 --> 00:04:09.203
it would work just fine.

62
00:04:11.933 --> 00:04:16.081
Take a look at that,
that is something you can't do with Sass.

63
00:04:16.081 --> 00:04:20.839
And as we'll see in the end of the
workshop, we can even use JavaScript to

64
00:04:20.839 --> 00:04:24.897
set these variables and
that opens up so many possibilities.

65
00:04:24.897 --> 00:04:29.108
So the first takeaway is that Sass
variables are scoped on curly bracket

66
00:04:29.108 --> 00:04:32.700
blocks where a CSS variables
are scoped on actual elements.

67
00:04:32.700 --> 00:04:36.715
So before I move on,
let's get something out of the way.

68
00:04:36.715 --> 00:04:39.398
I know that some of you
are thinking wait a second.

69
00:04:39.398 --> 00:04:42.841
I thought we weren't supposed
to call these CSS variables,

70
00:04:42.841 --> 00:04:45.078
there are custom properties, right?

71
00:04:45.078 --> 00:04:50.184
The short answer is it doesn't matter use
whatever term you want in fact the actual

72
00:04:50.184 --> 00:04:54.921
specification you can find the link to
that in the notes uses both and here's

73
00:04:54.921 --> 00:04:59.976
their custom properties but they can also
be used as reactive variables as well.

74
00:04:59.976 --> 00:05:04.802
Certain use cases naturally make more
sense with one or the other term,

75
00:05:04.802 --> 00:05:06.417
others work with both.

76
00:05:06.417 --> 00:05:10.000
I'll be using both terms today
throughout the workshop and

77
00:05:10.000 --> 00:05:14.805
some people have suggested using the term
custom property when setting them and

78
00:05:14.805 --> 00:05:19.752
CSS variable when getting them, feel free
to adopt that if it resonates with you,

79
00:05:19.752 --> 00:05:22.352
or don't, it doesn't actually matter.

80
00:05:22.352 --> 00:05:26.758
And another thing to get out of the way,
because I get this question a lot,

81
00:05:26.758 --> 00:05:28.120
what's up with root?

82
00:05:28.120 --> 00:05:31.747
Why do people keep defining
variables in root.

83
00:05:31.747 --> 00:05:35.624
So this is just a convention.

84
00:05:35.624 --> 00:05:39.056
Root is a pseudo class that
resolves to the root element,

85
00:05:39.056 --> 00:05:42.916
which is the HTML element in HTML,
the SVG element in SVG, and so

86
00:05:42.916 --> 00:05:46.438
on because, yes,
custom properties work in SVG as well.

87
00:05:46.438 --> 00:05:49.744
Any markup language on the web,
custom properties work there too,

88
00:05:49.744 --> 00:05:51.490
anything that accepts CSS really.

89
00:05:51.490 --> 00:05:56.495
But in HTML,
it's just equivalent to the HTML selector.

90
00:05:56.495 --> 00:06:00.371
It just has higher specificity,
it has the specificity of a class,

91
00:06:00.371 --> 00:06:02.819
instead of the specificity of an element.

92
00:06:02.819 --> 00:06:06.963
But it's just a convention nothing changes

93
00:06:06.963 --> 00:06:11.895
if you don't follow it so
you could follow it or not.

94
00:06:11.895 --> 00:06:13.352
Some people like to do this,

95
00:06:13.352 --> 00:06:16.695
they like to separate their global
variables into a root selector

96
00:06:16.695 --> 00:06:20.601
just to signify to other developers
that hey these are my global variables.

97
00:06:20.601 --> 00:06:26.493
And then they use the actual HTML selector
for any actual styles but you could

98
00:06:26.493 --> 00:06:32.583
also just use the HTML selector you could
just use the route selector for both.

99
00:06:32.583 --> 00:06:37.528
In the past, there was an actual
practical reason to use route there

100
00:06:37.528 --> 00:06:42.129
were some preprocessor plugins
some posts CSS plugins that pre

101
00:06:42.129 --> 00:06:46.643
processed custom properties to
rewrite them to actual CSS for

102
00:06:46.643 --> 00:06:50.414
browsers that don't
support custom properties.

103
00:06:50.414 --> 00:06:53.194
These days this is not really
relevant first of every

104
00:06:53.194 --> 00:06:55.601
browser supports custom properties today.

105
00:06:55.601 --> 00:06:59.164
And also there are better
pre processors today.

106
00:06:59.164 --> 00:07:04.086
So even if you do need to rewrite them,
there are smarter pre

107
00:07:04.086 --> 00:07:09.410
processors that take all rules
into account and not just route.

108
00:07:09.410 --> 00:07:13.762
And another thing to get out of the way
is what CSS variables can't do because

109
00:07:13.762 --> 00:07:16.754
the rest of the workshop
focuses on what they can do so

110
00:07:16.754 --> 00:07:20.630
I feel it's only fair to tell you
what they can't do straight up, so

111
00:07:20.630 --> 00:07:25.460
you don't struggle trying to get them to
do things that they weren't designed for.

112
00:07:25.460 --> 00:07:30.905
So one thing that Sass can
do that CSS variables cant,

113
00:07:30.905 --> 00:07:34.906
is using variables in property names.

114
00:07:34.906 --> 00:07:38.544
CSS variables can only be
used in property values or

115
00:07:38.544 --> 00:07:42.533
descriptor values,
in some cases not property names.

116
00:07:45.150 --> 00:07:50.542
They can also not be used in selectors and
they cannot be used in not rules.

117
00:07:50.542 --> 00:07:54.917
Basically, this entire table
is telling you one thing.

118
00:07:54.917 --> 00:08:00.036
CSS variables can only be referenced
in property values and nothing else.

119
00:08:00.036 --> 00:08:03.212
But nothing prevents you from using
SASS variables for those cases,

120
00:08:03.212 --> 00:08:06.620
as we'll see in some parts of the workshop
you can actually mix and match.

121
00:08:06.620 --> 00:08:11.360
You can use CSS variables together
with Sass variables to get the most of

122
00:08:11.360 --> 00:08:12.310
both worlds.

