WEBVTT

1
00:00:00.694 --> 00:00:04.963
Now let's look at a few applications
in responsive design custom properties

2
00:00:04.963 --> 00:00:07.468
are immensely useful in responsive design.

3
00:00:07.468 --> 00:00:10.060
And it was one of the very
first use cases for

4
00:00:10.060 --> 00:00:14.524
them it's a little bit difficult to
demonstrate this appropriately with

5
00:00:14.524 --> 00:00:17.341
a small demo that is self
contained in a slide.

6
00:00:17.341 --> 00:00:21.066
Because responsive design gets
exponentially more complex,

7
00:00:21.066 --> 00:00:23.252
the more your website gets complex.

8
00:00:23.252 --> 00:00:25.963
And we can't really see
a very complex website.

9
00:00:25.963 --> 00:00:30.518
Because you won't be it will be
impossible to process all of

10
00:00:30.518 --> 00:00:33.627
its code in the time space of a workshop.

11
00:00:33.627 --> 00:00:36.534
So here is a very cut down
very simple example but

12
00:00:36.534 --> 00:00:41.125
hopefully we can still see some of
the concepts and some of the strategies.

13
00:00:41.125 --> 00:00:46.320
And you can apply these same
strategies to the problems that you

14
00:00:46.320 --> 00:00:51.721
have already faced when you're
designing responsive layouts.

15
00:00:51.721 --> 00:00:55.289
So, the most common way to
use custom properties for

16
00:00:55.289 --> 00:00:57.649
responsive layouts is, is when.

17
00:00:57.649 --> 00:01:01.578
We're using multiple
different measurements that

18
00:01:01.578 --> 00:01:05.243
are actually governed by
the same measurement.

19
00:01:05.243 --> 00:01:10.926
Like here, we have a gap that is
0.3 m's in the regular rate layout,

20
00:01:10.926 --> 00:01:14.920
and 0.5 m's in the layout for
larger screens.

21
00:01:14.920 --> 00:01:19.334
We can resize this from
the handle here to see it adapt.

22
00:01:19.334 --> 00:01:20.918
There's a bunch of things that adapt.

23
00:01:20.918 --> 00:01:24.669
So the gap adapts,
the grid becomes a single column grid and

24
00:01:24.669 --> 00:01:30.242
the font size changes
slightly as well Right,

25
00:01:30.242 --> 00:01:35.665
so, we have the spacing
change in both places,

26
00:01:35.665 --> 00:01:39.063
the padding changes as well.

27
00:01:39.063 --> 00:01:47.173
So essentially the padding that we have
even though this is pre-computed here.

28
00:01:47.173 --> 00:01:50.409
What we actually wanted for

29
00:01:50.409 --> 00:01:55.332
the padding was to have
a fixed amount plus

30
00:01:55.332 --> 00:02:00.122
an amount that changes based on the gap.

31
00:02:00.122 --> 00:02:03.116
So we could have actually
written it like this.

32
00:02:03.116 --> 00:02:08.022
And then if we use a custom property for
the gap,

33
00:02:08.022 --> 00:02:13.799
let's call it gutter,
then we can use that right here.

34
00:02:16.021 --> 00:02:21.047
And notice that I said, you shouldn't be
setting custom properties right there and

35
00:02:21.047 --> 00:02:23.968
then using them you should
instead use full box.

36
00:02:23.968 --> 00:02:27.363
That's components that you
expect other people to style.

37
00:02:27.363 --> 00:02:34.199
If it's your own layout, then it's fine
to set custom properties, obviously.

38
00:02:34.199 --> 00:02:36.313
So we override the gutter here, and

39
00:02:36.313 --> 00:02:39.563
that means we don't actually
need this rule anymore.

40
00:02:42.489 --> 00:02:45.506
It just adopts.

41
00:02:45.506 --> 00:02:48.663
So this is probably the most common
strategy that you've already used.

42
00:02:48.663 --> 00:02:51.398
I imagine if you've
used custom properties,

43
00:02:51.398 --> 00:02:55.757
you've already use them to override
custom properties in a media query.

44
00:02:55.757 --> 00:03:00.747
And have the layout adapt this is probably
the one thing that people teach when

45
00:03:00.747 --> 00:03:02.834
it comes to custom properties.

46
00:03:02.834 --> 00:03:06.161
And responsive design but
it's not the only one.

47
00:03:11.164 --> 00:03:15.733
So if we use that,
it means that we still have to hunt down

48
00:03:15.733 --> 00:03:20.029
multiple places for
the value of a single property.

49
00:03:20.029 --> 00:03:24.463
So, to make sense of what
our layout looks like,

50
00:03:24.463 --> 00:03:30.103
we still need to look both in
the media query In the base style.

51
00:03:30.103 --> 00:03:35.408
let's try a slightly different
approach with font size so

52
00:03:35.408 --> 00:03:42.130
what we could do is we could have a font
size larger that is specified here.

53
00:03:42.130 --> 00:03:47.941
And then in the media query
instead of setting it to 110%,

54
00:03:47.941 --> 00:03:51.089
we can set it to font size larger.

55
00:03:51.089 --> 00:03:55.626
That does keep the actual style
declaration in the media query, but

56
00:03:55.626 --> 00:04:00.174
it means we can get an idea of both
values by just looking at one rule.

57
00:04:00.174 --> 00:04:03.372
It keeps everything together in one room.

58
00:04:03.372 --> 00:04:09.188
However, this also, this does mean that
if we need to adjust the base font size,

59
00:04:09.188 --> 00:04:11.597
we would need to adjust it twice.

60
00:04:11.597 --> 00:04:13.328
In some cases, that is not what we want.

61
00:04:13.328 --> 00:04:16.360
In some cases,
what we want is a relative adjustment.

62
00:04:16.360 --> 00:04:21.496
So in the larger layout, we don't
necessarily want it to be precisely 110%.

63
00:04:21.496 --> 00:04:27.116
We may want it to be,
say 1.2 times the base font size.

64
00:04:27.116 --> 00:04:28.138
So what can we do then?

65
00:04:32.048 --> 00:04:34.981
We could define scaling
factors in our media queries.

66
00:04:34.981 --> 00:04:40.987
And then we could write our CSS to account
for these optional scaling factors.

67
00:04:40.987 --> 00:04:45.371
So we would write font size actually
we would use a color here and

68
00:04:45.371 --> 00:04:47.944
then we would use our base font size.

69
00:04:47.944 --> 00:04:53.701
Which we could use a variable for
as well but I'm not going to right now.

70
00:04:53.701 --> 00:04:57.937
And then font size scale that
would this would default to one.

71
00:04:57.937 --> 00:05:03.348
It's important to make a default one so
that these are truly optional.

72
00:05:03.348 --> 00:05:08.804
And then all we said in the media query

73
00:05:08.804 --> 00:05:15.140
is font size scale, which we make 1.2.

74
00:05:15.140 --> 00:05:18.476
And then it just works as you can see.

75
00:05:23.153 --> 00:05:27.885
Now, let's take a moment and try to
add a custom property for the columns.

76
00:05:27.885 --> 00:05:32.525
So that we don't have all this
grid stuff in our media query.

77
00:05:32.525 --> 00:05:34.906
Let's take a look.

78
00:05:34.906 --> 00:05:37.592
So we can move this to the base rule.

79
00:05:37.592 --> 00:05:43.021
The body rule And just use

80
00:05:43.021 --> 00:05:48.288
the columns property.

81
00:05:48.288 --> 00:05:53.834
And then this one as well just uses
the number of columns verbatim.

82
00:05:53.834 --> 00:05:57.609
So we can just take this declaration and
move it here.

83
00:06:01.570 --> 00:06:05.082
And use the actual columns value.

84
00:06:08.816 --> 00:06:17.089
And now this one, we want this to be
two when the number of columns is 3.

85
00:06:17.089 --> 00:06:22.099
And what do we want it to be when
the number of columns is one,

86
00:06:22.099 --> 00:06:25.122
nothing really we wanted to be one.

87
00:06:25.122 --> 00:06:29.996
However, the good thing is we can

88
00:06:29.996 --> 00:06:34.523
just still specify columns and

89
00:06:34.523 --> 00:06:40.453
put it here and it actually still works.

90
00:06:40.453 --> 00:06:41.592
Sorry, not columns.

91
00:06:41.592 --> 00:06:42.726
Columns- 1.

92
00:06:46.552 --> 00:06:47.617
Yeah.

93
00:06:47.617 --> 00:06:50.141
We wanna to be spanked too.

94
00:06:50.141 --> 00:06:52.841
So it still works just fine,
when the colons are 3, but

95
00:06:52.841 --> 00:06:54.517
even in the single column layout.

96
00:06:54.517 --> 00:06:58.304
It works just fine because 0
is actually nonsensical there.

97
00:06:58.304 --> 00:07:03.382
So, now we have it we eliminated
all these rules that we had

98
00:07:03.382 --> 00:07:08.890
in the media query into just
overriding 3 custom properties.

99
00:07:08.890 --> 00:07:14.795
So to recap, the second strategy
is to set all the values for

100
00:07:14.795 --> 00:07:22.024
all your different media queries as
custom properties in the base rule.

101
00:07:22.024 --> 00:07:25.556
And then you just use these
values in the media queries.

102
00:07:25.556 --> 00:07:30.056
So you don't actually have to hunt
down in multiple media queries to see

103
00:07:30.056 --> 00:07:31.336
what your style is.

104
00:07:31.336 --> 00:07:34.411
In the third strategy,
this is specifically for

105
00:07:34.411 --> 00:07:39.817
relative adjustments where your base CSS
multiplies by an optional scaling factor.

106
00:07:39.817 --> 00:07:44.070
And media queries only set the scaling
factor and no actual values.

107
00:07:48.958 --> 00:07:52.170
Note that these techniques are actually
useful every time you need to create

108
00:07:52.170 --> 00:07:53.232
variations of a design.

109
00:07:53.232 --> 00:07:55.568
Not just for responsive design.

110
00:07:55.568 --> 00:07:59.455
Well, essentially responsive design
is just yet another variation.

111
00:07:59.455 --> 00:08:02.556
For example, multipliers can be useful
when you have multiple instances of

112
00:08:02.556 --> 00:08:04.111
a component with different content.

113
00:08:04.111 --> 00:08:06.435
And you need to vary some of them.

114
00:08:06.435 --> 00:08:06.987
In fact,

115
00:08:06.987 --> 00:08:11.692
these very slides use a similar technique
to vary the font size of the live demos.

116
00:08:11.692 --> 00:08:13.547
Like some demos that have a lot more code,

117
00:08:13.547 --> 00:08:16.210
use a multiplier to make the font
size a little bit smaller.

