WEBVTT

1
00:00:00.000 --> 00:00:04.080
Another common case where CSS can
interact badly with JavaScript at least

2
00:00:04.080 --> 00:00:07.371
before custom properties,
is the scrolling indicators,

3
00:00:07.371 --> 00:00:11.671
often we want to apply certain effects
to indicate how far you've scrolled.

4
00:00:11.671 --> 00:00:12.830
How much do you have left?

5
00:00:12.830 --> 00:00:18.270
That sort of thing and previously, we had
to set a bunch of CSS through JavaScript

6
00:00:18.270 --> 00:00:23.633
to update because there's no way for
pure CSS to know how far you've scrolled.

7
00:00:23.633 --> 00:00:28.063
There's nothing in CSS that
gives us your scroll position.

8
00:00:28.063 --> 00:00:32.441
However, we can just write a little
bit of CSS to set a scroll variable

9
00:00:32.441 --> 00:00:35.475
with a percentage of how
far you've scrolled.

10
00:00:35.475 --> 00:00:41.044
So what this code does here right now,
is it sets a scroll variable

11
00:00:41.044 --> 00:00:45.907
to scrollTop but
that's not very useful as we've seen,

12
00:00:45.907 --> 00:00:49.882
because that just gives
us a number of pixels.

13
00:00:49.882 --> 00:00:54.908
What we want is a zero to one
percentage of how far you've scrolled,

14
00:00:54.908 --> 00:00:57.125
that's much more reusable.

15
00:00:57.125 --> 00:01:04.433
So we can do that by calculating
the maximum scroll by using scrollHeight,

16
00:01:04.433 --> 00:01:10.474
scrollHeight is the entire
scrollable height of an element.

17
00:01:10.474 --> 00:01:13.796
And then we subtract the actual
height of the element and

18
00:01:13.796 --> 00:01:16.330
we find the height of the scrolling area.

19
00:01:16.330 --> 00:01:21.326
And then we divide scrollTop
with the maximum scroll and

20
00:01:21.326 --> 00:01:24.737
we get a zero to one percentage again.

21
00:01:24.737 --> 00:01:28.401
Let's see how we can use that,
so right now,

22
00:01:28.401 --> 00:01:34.040
we have a gradient background,
that is just fixed to 20%.

23
00:01:34.040 --> 00:01:38.106
We have applied this JavaScript already,
so

24
00:01:38.106 --> 00:01:43.563
we should have the scroll variable
ready and we can go here and

25
00:01:43.563 --> 00:01:48.283
multiply our scroll variable,
with a percentage.

26
00:01:50.815 --> 00:01:57.139
And let's see, and now the background
actually reflects how far I've scrolled.

27
00:02:00.380 --> 00:02:05.896
But if I don't want this
kind of scroll indicator,

28
00:02:05.896 --> 00:02:09.999
if I want to change what it looks like,

29
00:02:09.999 --> 00:02:16.055
I can easily do that,
I can change the background size.

30
00:02:18.797 --> 00:02:20.023
And the colors.

31
00:02:20.023 --> 00:02:24.857
Let's say, I wanna make it red and
white here.

32
00:02:24.857 --> 00:02:28.747
All right, I'm setting background image.

33
00:02:34.329 --> 00:02:38.024
Okay, and we want to only do repeat,

34
00:02:38.024 --> 00:02:42.089
actually we want no repeat, all right.

35
00:02:42.089 --> 00:02:45.061
And now we have a progress bar at the top,

36
00:02:45.061 --> 00:02:49.616
let's make it a little bit more
narrow because that's huge.

37
00:02:49.616 --> 00:02:53.546
And then we could have a subtle
progress bar at the top.

38
00:02:56.711 --> 00:03:01.323
We could even change the hue, why not?

39
00:03:01.323 --> 00:03:06.876
We could have, Let's say, whoa,

40
00:03:08.562 --> 00:03:14.975
We could use scroll here as well and
multiply it with.

41
00:03:16.089 --> 00:03:19.320
What should we multiply it with?

42
00:03:21.444 --> 00:03:24.919
Let's say, 360, so

43
00:03:24.919 --> 00:03:30.618
we go through the entire range of colors.

44
00:03:33.280 --> 00:03:38.755
Crazy progress bar, psychedelic
progress bar, there it is, see?

45
00:03:38.755 --> 00:03:43.751
The point is,
we can do all these different things and

46
00:03:43.751 --> 00:03:48.091
we did not have to touch
the JavaScript at all.

47
00:03:48.091 --> 00:03:53.004
This has been fun, but some people
will be pulling their hair out,

48
00:03:53.004 --> 00:03:55.915
when they see this kind of JavaScript.

49
00:03:55.915 --> 00:04:00.649
I'm basically attaching a scroll
listener on the document.

50
00:04:00.649 --> 00:04:05.633
And I'm just using capture true, so
that I can still use event delegation even

51
00:04:05.633 --> 00:04:10.634
though the scroll event doesn't bubble,
that gives us a lot of flexibility.

52
00:04:10.634 --> 00:04:15.557
But it's kind of a performance nightmare,
I am obligated to tell you,

53
00:04:15.557 --> 00:04:19.013
that you should not actually
do this in practice.

54
00:04:19.013 --> 00:04:23.926
You should only attach
the event listeners on elements

55
00:04:23.926 --> 00:04:28.212
whose scrolling you
actually want to monitor.

56
00:04:28.212 --> 00:04:31.660
In this case,
you do need to trade in some flexibility.

57
00:04:35.350 --> 00:04:40.590
So, I hope that this
section demonstrated that,

58
00:04:41.962 --> 00:04:47.551
By using custom properties even when you
do need to use a little bit of JavaScript,

59
00:04:47.551 --> 00:04:52.008
they allow you to use the absolute
minimal amount of JavaScript.

60
00:04:52.008 --> 00:04:56.976
So that you can still
write most of your CSS,

61
00:04:56.976 --> 00:05:01.552
in the actual CSS code where it belongs.

62
00:05:01.552 --> 00:05:05.783
I think especially because of this,
CSS variables are a revolution for

63
00:05:05.783 --> 00:05:07.910
separation of style and behavior.

