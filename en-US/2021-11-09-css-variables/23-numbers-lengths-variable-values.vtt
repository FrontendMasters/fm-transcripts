WEBVTT

1
00:00:00.211 --> 00:00:03.217
So now let's talk a little bit
about numbers and lengths.

2
00:00:03.217 --> 00:00:07.998
This is essential to almost any
code that uses custom properties.

3
00:00:07.998 --> 00:00:13.346
So to demonstrate the point I want to
make here, we have a rather contrived

4
00:00:13.346 --> 00:00:18.351
example where we use a width and
height that is set in viewport units so

5
00:00:18.351 --> 00:00:23.036
that we could display what shape
your viewport is currently in.

6
00:00:23.036 --> 00:00:28.820
Yeah, I know, not something you do very
frequently but bear with me for a bit.

7
00:00:28.820 --> 00:00:31.866
And notice that since I'm
using viewport units,

8
00:00:31.866 --> 00:00:34.194
every time I resize this, it adapts.

9
00:00:34.194 --> 00:00:38.730
So, Someone who's very,

10
00:00:38.730 --> 00:00:44.013
very much into avoiding repetition could
say I don't like repeating this number,

11
00:00:44.013 --> 00:00:45.529
I wanna set a variable.

12
00:00:45.529 --> 00:00:53.350
So the first attempt might
be to use a variable,

13
00:00:53.350 --> 00:00:58.627
let's call it P with a 50, and

14
00:00:58.627 --> 00:01:05.288
then go here and do something like this.

15
00:01:05.288 --> 00:01:10.220
This is very common in people
that have used SAS a lot.

16
00:01:15.170 --> 00:01:15.990
And now it doesn't work.

17
00:01:20.054 --> 00:01:21.453
Why doesn't this work?

18
00:01:24.474 --> 00:01:29.108
So the reason this doesn't
work is because variable

19
00:01:29.108 --> 00:01:32.699
values cannot contain parts of tokens.

20
00:01:32.699 --> 00:01:35.476
If you write something like that,

21
00:01:35.476 --> 00:01:40.373
the browser actually understands 50 and
vw, not 50vw.

22
00:01:43.929 --> 00:01:45.196
So what are tokens?

23
00:01:45.196 --> 00:01:50.730
Tokens are the most essential
parts of CSS values.

24
00:01:50.730 --> 00:01:57.620
The most basic syntax components
that cannot be broken further,

25
00:01:57.620 --> 00:02:01.886
essentially, the atoms of CSS syntax.

26
00:02:01.886 --> 00:02:04.953
And variable values are token lists,
they can contain one token,

27
00:02:04.953 --> 00:02:08.151
they can contain more tokens, but
they cannot contain half a token.

28
00:02:08.151 --> 00:02:10.619
So what is a token in practice?

29
00:02:10.619 --> 00:02:15.767
Cuz saying that they are essentially the
atoms of CSS syntax is a little hand wavy.

30
00:02:15.767 --> 00:02:20.746
So these examples are taken pretty
much directly from the spec, so tokens

31
00:02:20.746 --> 00:02:26.300
are keywords such as none, for example,
or any other keyword that CSS includes.

32
00:02:30.058 --> 00:02:36.160
Numbers, lengths, but notice that
numbers and lengths are distinct tokens.

33
00:02:36.160 --> 00:02:39.168
If you have a number token, you cannot
combine it with something else and

34
00:02:39.168 --> 00:02:40.070
make a length token.

35
00:02:42.668 --> 00:02:49.599
Degree angles, percentages, all the
punctuation that property values include,

36
00:02:49.599 --> 00:02:54.087
like commas,
slashes the opening part of a function,

37
00:02:54.087 --> 00:02:58.490
like the function name and
the opening parenthesis.

38
00:03:00.984 --> 00:03:06.152
The closing parenthesis is
an individual token, a hash is a token.

39
00:03:08.969 --> 00:03:10.721
A string is a token.

40
00:03:10.721 --> 00:03:17.114
And there's a very special case that
the URL function is an entire token.

41
00:03:17.114 --> 00:03:21.790
It's not URL and
the opening parenthesis that is a token,

42
00:03:21.790 --> 00:03:26.191
unlike any other function,
the entire URL is a token.

43
00:03:26.191 --> 00:03:29.957
This is because when CSS first started,

44
00:03:29.957 --> 00:03:34.067
URLs could be either be quoted or
unquoted.

45
00:03:34.067 --> 00:03:38.609
So to enable this feature,
the entire functional

46
00:03:38.609 --> 00:03:42.836
had to be a token and
cannot be broken further.

47
00:03:42.836 --> 00:03:46.083
And lastly, white space is a token.

48
00:03:46.083 --> 00:03:51.223
So here's a quiz, and
obviously, I don't expect you

49
00:03:51.223 --> 00:03:56.385
to know the answer, but
what do you think makes sense?

50
00:03:56.385 --> 00:04:01.373
If you have linear gradient and
an opening parenthesis, can you store it

51
00:04:01.373 --> 00:04:06.300
in a variable and then just use
a variable to control the gradient type?

52
00:04:06.300 --> 00:04:08.950
Do you think this is valid or invalid CSS?

53
00:04:08.950 --> 00:04:12.874
&gt;&gt; One person said valid,
one person said invalid.

54
00:04:12.874 --> 00:04:15.201
&gt;&gt; Yeah, so opinions are split.

55
00:04:15.201 --> 00:04:18.813
Based on what I've told you so
far, it should be valid.

56
00:04:18.813 --> 00:04:23.554
However, it is not because there
is an additional rule that custom

57
00:04:23.554 --> 00:04:28.466
properties cannot contain opening
parenthesis, opening braces,

58
00:04:28.466 --> 00:04:32.296
opening square brackets,
any of these structures.

59
00:04:32.296 --> 00:04:35.419
And actually not only is this invalid, but

60
00:04:35.419 --> 00:04:40.724
what actually happens is really weird,
so let's open this in a new tab.

61
00:04:43.566 --> 00:04:46.978
So notice that actually no
background gets applied.

62
00:04:49.323 --> 00:04:52.464
Let's inspect and
see what's going on here.

63
00:04:52.464 --> 00:04:57.249
So notice this here,
the next declaration was

64
00:04:57.249 --> 00:05:01.426
actually consumed as part of the value.

65
00:05:05.996 --> 00:05:10.782
So not only can variable values not
contain unmatch parenthesis, square

66
00:05:10.782 --> 00:05:16.121
brackets, and curly braces, but they
actually break kind of badly when they do.

67
00:05:17.278 --> 00:05:21.321
Now here's a slightly different example,

68
00:05:21.321 --> 00:05:27.231
also with gradients,
where the stops are stored in a variable.

69
00:05:27.231 --> 00:05:30.660
And then we use that variable and
the gradient, and

70
00:05:30.660 --> 00:05:34.984
notice that the stops variable
also contains a trailing comma.

71
00:05:37.066 --> 00:05:39.797
What do you think?

72
00:05:39.797 --> 00:05:42.165
Would that be invalid?

73
00:05:42.165 --> 00:05:45.645
&gt;&gt; You used it earlier, so
I would say yes, valid.

74
00:05:45.645 --> 00:05:49.350
&gt;&gt; I used it earlier but
not with a trailing comma.

75
00:05:49.350 --> 00:05:55.563
Anyway, it is actually valid because
comma is just another token,

76
00:05:55.563 --> 00:05:59.596
so all we have here is
still a list of tokens.

77
00:05:59.596 --> 00:06:03.101
There's white, there's comma, there's
black, there's another comma, that's fine.

78
00:06:03.101 --> 00:06:06.078
What about this?

79
00:06:06.078 --> 00:06:10.846
We have the two keyword in a custom
property, and then we're using that.

80
00:06:10.846 --> 00:06:15.410
It's kind of contrived, but
still kind of interesting.

81
00:06:15.410 --> 00:06:19.370
So I'm just gonna go ahead with
this one and it is still valid,

82
00:06:19.370 --> 00:06:24.032
it looks really weird, it looks like
it ought to not be valid, but it is.

83
00:06:24.032 --> 00:06:27.558
And this means that we
could actually have custom

84
00:06:27.558 --> 00:06:31.780
properties that fill in as much
as we want from a property.

85
00:06:31.780 --> 00:06:37.209
Like here we have a 3D with shadow
custom property that if we set it,

86
00:06:37.209 --> 00:06:43.811
it invokes this entire thing and whatever
we want to fill in here as the last layer.

87
00:06:43.811 --> 00:06:48.148
So we could invoke it by just
setting it to whitespace and

88
00:06:48.148 --> 00:06:52.041
then we essentially have
a pointless last layer.

89
00:06:52.041 --> 00:06:55.238
We could set just the color,
Rebecca purple, and

90
00:06:55.238 --> 00:06:59.210
then we still have a last layer,
it's just not very visible.

91
00:06:59.210 --> 00:07:06.159
Let me zoom in and you'll see
that a tiny bit of purple there,

92
00:07:06.159 --> 00:07:11.300
or we could also fill in, A blur.

93
00:07:15.002 --> 00:07:16.323
Like as many tokens as we want.

94
00:07:19.157 --> 00:07:25.404
So essentially that way we can create
single property mixins in a sense.

95
00:07:25.404 --> 00:07:29.747
Kind of like function currying for whoever
knows that, well, that is in JavaScript.

96
00:07:29.747 --> 00:07:35.285
It's like when you backfill
function arguments.

97
00:07:38.065 --> 00:07:41.777
So let's go back to our
original broken example.

98
00:07:41.777 --> 00:07:44.901
What can we do here to fix it?

99
00:07:44.901 --> 00:07:48.801
How can we actually use 50 and
then get viewport units?

100
00:07:48.801 --> 00:07:53.030
It's a little more verbose but
we can actually do it.

101
00:07:53.030 --> 00:07:57.932
All we need is to use calc and multiply

102
00:07:57.932 --> 00:08:03.320
the 50 by one of whatever unit we want.

103
00:08:08.075 --> 00:08:15.493
And there we are, and now we can change
the P in one place and it just adapts.

104
00:08:18.065 --> 00:08:23.965
Now some people might be wondering what
if we tried to simplify it a little

105
00:08:23.965 --> 00:08:30.270
bit by setting p to 45vw, for example,
that we can just use directly here.

106
00:08:30.270 --> 00:08:37.144
And then here we will divide it first
by 1vw and then multiply it by 1vh,

107
00:08:37.144 --> 00:08:41.777
so that ought to work,
but it doesn't work yet.

108
00:08:41.777 --> 00:08:46.783
Like I said, we do plan to
eventually allow division by length,

109
00:08:46.783 --> 00:08:50.600
but right now that doesn't
work in any browser.

110
00:08:50.600 --> 00:08:56.989
So we're stuck with multiplying numbers to
make units everywhere, we cannot divide.

111
00:08:59.849 --> 00:09:05.104
The fact that we can not divide
means that if we have a number,

112
00:09:05.104 --> 00:09:10.994
we can convert it to a unit by just
multiplying with one of that unit.

113
00:09:10.994 --> 00:09:16.878
But if we have a number with a unit,
say a length or an angle or something,

114
00:09:16.878 --> 00:09:22.873
we cannot get a number or any other unit,
we cannot go anywhere from that.

115
00:09:22.873 --> 00:09:26.624
If we have a length, if we have,
say, ten pixels in a variable,

116
00:09:26.624 --> 00:09:30.451
that's all we can use,
we can't convert it into anything else.

117
00:09:30.451 --> 00:09:34.704
So I would strongly urge you to use
variables for pure data not CSS values,

118
00:09:34.704 --> 00:09:39.794
unless they are like intermediate helper
variables that you're using for something.

119
00:09:39.794 --> 00:09:44.701
But especially for the API that you're
exposing to people customizing,

120
00:09:44.701 --> 00:09:49.226
your components, your CSS,
try to use pure data as much as you can.

121
00:09:49.226 --> 00:09:51.928
Cuz you can always convert
them to whatever you need, but

122
00:09:51.928 --> 00:09:53.850
you can't go back once you have length.

