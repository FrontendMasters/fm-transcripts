WEBVTT

1
00:00:00.000 --> 00:00:04.431
The first part is about inheritance,
and what do I mean about inheritance?

2
00:00:04.431 --> 00:00:09.876
Let's take a look at this demo,
this is using three color variables and

3
00:00:09.876 --> 00:00:12.508
all three are setting colors, and

4
00:00:12.508 --> 00:00:18.067
then we're using them in this like
extremely cut down version of a blog.

5
00:00:18.067 --> 00:00:22.206
So notice that even though I'm setting my
variables on the root element which as

6
00:00:22.206 --> 00:00:24.328
we've said, is just the HTML element.

7
00:00:24.328 --> 00:00:29.326
They're actually available on
the heading here, they're available on

8
00:00:29.326 --> 00:00:34.253
the the article here, let's take a look
at the actual HTML that we have.

9
00:00:35.850 --> 00:00:36.786
It looks like this.

10
00:00:38.623 --> 00:00:40.343
So let's go back to the CSS,

11
00:00:40.343 --> 00:00:43.935
these variables are available
basically everywhere, and

12
00:00:43.935 --> 00:00:48.407
the reason they're available everywhere
is because they inherit down.

13
00:00:48.407 --> 00:00:51.786
But what does that mean in practice?

14
00:00:51.786 --> 00:00:56.596
So notice that in every
blog post of sorts here,

15
00:00:56.596 --> 00:00:59.974
we are using this primary color.

16
00:00:59.974 --> 00:01:04.758
And in our HTML, we have applied
a class of alt to the second one

17
00:01:04.758 --> 00:01:08.539
because we wanted it to
use the secondary color.

18
00:01:08.539 --> 00:01:12.618
So we could actually go to our CSS,
and do something like this.

19
00:01:21.378 --> 00:01:25.009
We can set primary color
to secondary color.

20
00:01:27.922 --> 00:01:30.961
And it just all adapts.

21
00:01:30.961 --> 00:01:35.598
After that point, everything inside
article is just inheriting this primary

22
00:01:35.598 --> 00:01:37.785
colour instead of the one from root.

23
00:01:37.785 --> 00:01:42.978
Because that's just how CSS
inherited properties work.

24
00:01:42.978 --> 00:01:47.795
So the first thing to keep in mind
is that CSS variables are not just

25
00:01:47.795 --> 00:01:52.628
actually CSS properties,
they're inherited CSS properties.

26
00:01:52.628 --> 00:01:55.841
And anything that applies
to any other inherited

27
00:01:55.841 --> 00:01:58.984
CSS property applies to
CSS variables as well.

28
00:01:58.984 --> 00:02:03.050
One of the major ways we can take
advantage of this inheritances is media

29
00:02:03.050 --> 00:02:03.675
queries.

30
00:02:03.675 --> 00:02:07.254
We can only override a few
variables in the media query,

31
00:02:07.254 --> 00:02:11.689
and have all our styles adjust
instead of rewriting a bunch of rules.

32
00:02:11.689 --> 00:02:16.568
So let's see how this works in practice
with a dark mode version of this website.

33
00:02:16.568 --> 00:02:21.976
So something you might not have
seen before is the media query for

34
00:02:21.976 --> 00:02:26.299
dark mode,
which has prefers Kohler scheme dark.

35
00:02:31.053 --> 00:02:33.943
And anything you put in
here only applies when

36
00:02:33.943 --> 00:02:36.844
your user has selected
dark mode in the row S.

37
00:02:39.889 --> 00:02:43.288
And we can override any
variables we want here.

38
00:02:43.288 --> 00:02:46.059
I'm gonna copy them and edit them.

39
00:02:49.649 --> 00:02:52.993
Another thing you could do for
dark mode, and

40
00:02:52.993 --> 00:02:57.930
I'm just gonna add styles here,
because like we said it's fine.

41
00:02:57.930 --> 00:03:03.710
So another thing you could do is, if you
set the color scheme property to light and

42
00:03:03.710 --> 00:03:08.640
dark, it means that your CSS adapts
to light and dark mode just fine.

43
00:03:08.640 --> 00:03:12.999
So then, let me set my OS to dark mode.

44
00:03:15.499 --> 00:03:19.569
Notice that the background already adopts,
that's because I use the color

45
00:03:19.569 --> 00:03:24.159
scheme property to say, hey, this is okay,
you can modify my website for dark mode.

46
00:03:24.159 --> 00:03:28.850
So notice both the background and
the text color have adapted.

47
00:03:28.850 --> 00:03:31.502
So all we need to do is fill in
the gaps to make this look better.

48
00:03:35.549 --> 00:03:42.316
We can change the heading to instead
of white, we can use Canvas,

49
00:03:42.316 --> 00:03:47.249
and that makes it change to black and
dark mode.

50
00:03:47.249 --> 00:03:50.796
And now, let's change the tinted

51
00:03:50.796 --> 00:03:55.569
background because it
looks awful like that.

52
00:03:55.569 --> 00:03:57.910
And we're gonna change our
colors to make them lighter.

53
00:04:02.330 --> 00:04:05.945
And instead of having a tinted
background that is white,

54
00:04:05.945 --> 00:04:10.480
semi transparent white,
we're gonna have a semi transparent black.

55
00:04:10.480 --> 00:04:15.648
And there it is,
we just overrode three variables,

56
00:04:15.648 --> 00:04:19.061
and we have a very basic dark mode.

57
00:04:19.061 --> 00:04:22.750
Obviously, if you were creating
an actual dark mode for

58
00:04:22.750 --> 00:04:26.200
a website,
you would need to tweak it a lot more, but

59
00:04:26.200 --> 00:04:30.139
for like one minute of coding,
we already have something.

60
00:04:30.139 --> 00:04:32.057
And if we weren't using custom properties,

61
00:04:32.057 --> 00:04:33.876
we would have to override
a lot more rules.

62
00:04:38.738 --> 00:04:42.571
So in case you haven't seen the Canvas and
Canvas text keywords,

63
00:04:42.571 --> 00:04:47.324
these are actually relatively new,
although they're supported very widely.

64
00:04:47.324 --> 00:04:51.833
They are CSS system colors, they actually
existed in the specification for

65
00:04:51.833 --> 00:04:54.939
a long time, but
we recently changed how they work.

66
00:04:54.939 --> 00:04:56.412
So the way they work is,

67
00:04:56.412 --> 00:05:00.033
if they were custom properties
they would look like this.

68
00:05:00.033 --> 00:05:04.233
Canvas basically means whites in light
mode and black in dark mode, and

69
00:05:04.233 --> 00:05:05.986
Canvas text is the opposite.

70
00:05:05.986 --> 00:05:10.712
So, they're quite convenient in the sense
that you don't have to define your

71
00:05:10.712 --> 00:05:14.879
own custom properties for
these you just use the existing keywords.

72
00:05:14.879 --> 00:05:20.156
But you have to use color scheme
like dark to enable this.

73
00:05:20.156 --> 00:05:23.822
And Canvas and Canvas text are actually
the default background and

74
00:05:23.822 --> 00:05:25.207
text colors these days.

75
00:05:26.967 --> 00:05:32.969
So in some cases,
inheritance is actually a problem,

76
00:05:32.969 --> 00:05:39.371
usually it helps,
as weve seen it can be very convinient.

77
00:05:39.371 --> 00:05:41.808
Why wouldn't we want the inheritance?

78
00:05:41.808 --> 00:05:43.499
Well, here's an example.

79
00:05:43.499 --> 00:05:48.547
So here, we've used corner size on
the universal selector, so we can just set

80
00:05:48.547 --> 00:05:53.380
the corner size custom property on any
element and it introduces a corner.

81
00:05:53.380 --> 00:05:57.968
This is a very useful pattern because
it means that we can have our own

82
00:05:57.968 --> 00:06:02.170
properties that just apply
certain effects when we set them.

83
00:06:02.170 --> 00:06:08.649
And we don't have to apply the usage,
the code that uses them on multiple rules.

84
00:06:08.649 --> 00:06:13.950
We just set them in one place and
then we use them wherever we want.

85
00:06:13.950 --> 00:06:17.735
And it's basically the same clip
pass code that we've seen before it,

86
00:06:17.735 --> 00:06:20.527
except that this time it's
applied on everything.

87
00:06:20.527 --> 00:06:23.941
But as we see here,
the fact that it's applied on

88
00:06:23.941 --> 00:06:28.771
everything means that it also means
that when we set it on an element,

89
00:06:28.771 --> 00:06:34.299
it inherits down on elements that we
don't actually want to have a cut corner.

90
00:06:34.299 --> 00:06:39.282
Here, our code is a paragraph with an
inline element inside it, a mark element,

91
00:06:39.282 --> 00:06:40.910
but it could be anything.

92
00:06:40.910 --> 00:06:44.971
Could be a call and it could be
a code element or whatever, and

93
00:06:44.971 --> 00:06:49.591
we obviously don't want to cut out
the corner of the inline element,

94
00:06:49.591 --> 00:06:53.592
we only want it to apply the cut
out corner on the paragraph.

95
00:06:53.592 --> 00:06:57.460
And imagine in a real website you would
have an entire structure in there, and

96
00:06:57.460 --> 00:07:01.521
you most definitely don't want cut out
corners on every single element inside.

97
00:07:01.521 --> 00:07:02.681
So what can you do?

98
00:07:05.145 --> 00:07:10.742
One way to disable inheritance
is to just set the property

99
00:07:10.742 --> 00:07:16.695
itself on the universal selector and
just set it to initial.

100
00:07:16.695 --> 00:07:21.912
So initial is a CSS wide keyword that
returns a property to its initial value,

101
00:07:21.912 --> 00:07:25.446
not its initial value from
the browser style sheet,

102
00:07:25.446 --> 00:07:29.399
its initial value from the CSS
specification basically.

103
00:07:29.399 --> 00:07:34.454
And for custom properties, this means
that they don't really have a value.

104
00:07:34.454 --> 00:07:37.103
So the clip path property is not applied,

105
00:07:37.103 --> 00:07:40.822
this is a little hand wavy not
even not really have a value.

106
00:07:40.822 --> 00:07:46.005
But we're gonna see it in a lot more
detail in later in this workshop.

107
00:07:46.005 --> 00:07:48.301
So this works, and it's fine and

108
00:07:48.301 --> 00:07:53.303
we can always opt in inheritance on
a case by case basis if we wanted, if we

109
00:07:53.303 --> 00:07:59.129
actually wanted our mark element to have a
cut out corner, we can just apply in here.

110
00:07:59.129 --> 00:08:02.586
It's because like we said,
there regular CSS properties.

111
00:08:02.586 --> 00:08:05.681
Everything that applies to other
CSS properties applies to custom

112
00:08:05.681 --> 00:08:06.684
properties as well.

113
00:08:06.684 --> 00:08:10.422
So one thing to remember is that
you can disable inheritance

114
00:08:10.422 --> 00:08:14.386
by setting the property to initial
on the universal selector or

115
00:08:14.386 --> 00:08:18.070
always in the selector that
you're actually using this.

116
00:08:18.070 --> 00:08:22.743
In some cases the custom property only
makes sense for example on form elements,

117
00:08:22.743 --> 00:08:26.452
so we would we would put the declaration
that sets it up to initial

118
00:08:26.452 --> 00:08:27.909
on the same rule as well.

119
00:08:27.909 --> 00:08:33.282
There is actually a newer more explicit
way to disable inheritance and

120
00:08:33.282 --> 00:08:37.663
it's called the Add property rule,
it looks like this.

121
00:08:41.148 --> 00:08:45.687
And the property rule allows us to do
a ton of useful things with custom

122
00:08:45.687 --> 00:08:50.158
properties, we're gonna be seeing
it throughout this workshop.

123
00:08:50.158 --> 00:08:52.343
So this is just scratching the surface.

124
00:08:52.343 --> 00:08:55.775
But it comes with a syntax descriptor,

125
00:08:55.775 --> 00:09:01.391
which here we're gonna set two
star which means anything goes,

126
00:09:01.391 --> 00:09:05.979
and inherits descriptor
which we'll set to false.

127
00:09:05.979 --> 00:09:10.930
And an initial value descriptor
which is not actually useful here.

128
00:09:10.930 --> 00:09:15.297
So, let's remove this rule where
we made it explicitly inherit, and

129
00:09:15.297 --> 00:09:18.489
we don't actually need
this rule anymore either.

130
00:09:18.489 --> 00:09:22.229
And see we've added this rule and
it stopped inheriting.

131
00:09:22.229 --> 00:09:23.846
If we remove this rule it
will start inheriting again.

132
00:09:29.570 --> 00:09:33.335
So, what property allows us to
register our properties and

133
00:09:33.335 --> 00:09:35.001
control how they behave?

134
00:09:35.001 --> 00:09:39.713
You may have seen it as something
that looks like this in JavaScript,

135
00:09:39.713 --> 00:09:41.590
CSS.registerProperty.

136
00:09:41.590 --> 00:09:45.075
This was an earlier syntax,
it's still supported,

137
00:09:45.075 --> 00:09:47.329
it's still useful in some cases.

138
00:09:47.329 --> 00:09:50.133
CSS doesn't actually provide feedback for
errors.

139
00:09:50.133 --> 00:09:54.135
If you have an add property rule and it's
not working, it might make sense to try

140
00:09:54.135 --> 00:09:57.930
the JavaScript API, because that
actually gives you meaningful errors.

141
00:09:57.930 --> 00:10:01.534
Like for example,
you forgot the initial value property,

142
00:10:01.534 --> 00:10:04.210
which is required if
the syntax is not star.

143
00:10:04.210 --> 00:10:08.165
But if you use the Add property rule,
you don't get any feedback,

144
00:10:08.165 --> 00:10:12.755
you just sit there, looking at your code,
wondering why it's not working,

145
00:10:12.755 --> 00:10:14.610
I've done that a lot of times.

146
00:10:14.610 --> 00:10:19.406
So, the downside of that property
is that it's not actually very well

147
00:10:19.406 --> 00:10:20.719
supported today.

148
00:10:20.719 --> 00:10:24.736
That's the one thing that we're
going to mention today that is not

149
00:10:24.736 --> 00:10:29.039
widely supported, but I still felt
that it's important to discuss A,

150
00:10:29.039 --> 00:10:31.279
because it solves so many use cases.

151
00:10:31.279 --> 00:10:35.095
And B, because even though it's
only supported in chromium and

152
00:10:35.095 --> 00:10:38.840
chromium powered browsers,
today, for better or for worse,

153
00:10:38.840 --> 00:10:42.249
this actually gives it a very
significant market share.

154
00:10:42.249 --> 00:10:47.420
Take a look at this, even though
it's only supported in Chromium,

155
00:10:47.420 --> 00:10:53.150
or chromium powered browsers,
that still gives it a 70% market share.

156
00:10:53.150 --> 00:10:57.055
And there is no opposition from other
browser vendors about implementing it,

157
00:10:57.055 --> 00:10:58.959
it's just a matter of doing the work.

158
00:10:58.959 --> 00:11:02.297
And Safari has already said that they
have plans to implement it very soon.

159
00:11:06.580 --> 00:11:10.390
But wherever possible, we are going
to discuss workarounds as well, so

160
00:11:10.390 --> 00:11:14.580
that we can do certain things without
our property whenever that's feasible.

