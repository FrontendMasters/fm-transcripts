WEBVTT

1
00:00:00.157 --> 00:00:05.615
Let's look at our HTML again,
we're setting this P property here and

2
00:00:05.615 --> 00:00:08.124
these are the individual bars.

3
00:00:08.124 --> 00:00:13.773
So we wanna set the height of each
of these based on this property.

4
00:00:13.773 --> 00:00:14.767
Let's go to our CSS.

5
00:00:14.767 --> 00:00:19.803
This is This is the CSS code that
applies to each of those bars.

6
00:00:19.803 --> 00:00:25.637
And it's actually just setting
the height depending on the P value.

7
00:00:25.637 --> 00:00:30.161
It's just that we don't actually
need to do any math with it

8
00:00:30.161 --> 00:00:33.511
because it's already set in percentages.

9
00:00:33.511 --> 00:00:36.591
So now let's see.

10
00:00:36.591 --> 00:00:39.917
What customization options
do we want to expose?

11
00:00:39.917 --> 00:00:45.210
We want to expose a bar color property so
let's go here and

12
00:00:45.210 --> 00:00:50.077
see where is the color
specified is specified here.

13
00:00:50.077 --> 00:00:57.392
So let's instead do bar color and
use deep pink as a fullback.

14
00:00:57.392 --> 00:01:05.019
And now if we want,
we could give that a different color here.

15
00:01:05.019 --> 00:01:08.783
And I'm using inline styles for
demonstration purposes but

16
00:01:08.783 --> 00:01:13.368
you could obviously set the bar color
property anywhere else in your CSS.

17
00:01:13.368 --> 00:01:18.618
You might have a bar chart part of your
CSS that actually sets up the code for

18
00:01:18.618 --> 00:01:19.812
the bar charts.

19
00:01:19.812 --> 00:01:24.064
And then anywhere else on your website
that specifies a bar chart could use these

20
00:01:24.064 --> 00:01:27.189
properties that we've exposed
this kind of styling API.

21
00:01:29.589 --> 00:01:33.059
Let's see what other customization
we wanted to open up.

22
00:01:33.059 --> 00:01:34.369
A bar width.

23
00:01:35.970 --> 00:01:39.149
Again, this is rather simple.

24
00:01:39.149 --> 00:01:44.003
We can just go here and
replace the fixed value

25
00:01:44.003 --> 00:01:48.858
we had with Var function
reading bar width and

26
00:01:48.858 --> 00:01:53.989
specifying a fallback
that is the value we had.

27
00:01:53.989 --> 00:01:56.849
And let's make sure this works.

28
00:02:02.089 --> 00:02:04.417
Yeah, gold is invalid there.

29
00:02:04.417 --> 00:02:11.260
But we could,
if we use an actual length, it works.

30
00:02:11.260 --> 00:02:14.379
Now let's see, bar spacing.

31
00:02:14.379 --> 00:02:18.109
So where is the spacing set in two places?

32
00:02:18.109 --> 00:02:23.142
There is the gap that sets the spacing
between two flexbox items or

33
00:02:23.142 --> 00:02:25.899
two grid items, it works for both.

34
00:02:25.899 --> 00:02:32.798
And there's also the padding that sets the
spacing, From between the first bar and

35
00:02:32.798 --> 00:02:36.629
the left side and the last bar and
the right side of the graph,

36
00:02:36.629 --> 00:02:41.009
which could be different but
here we've decided to make it the same.

37
00:02:41.009 --> 00:02:45.459
So, we go here again, bar spacing.

38
00:02:45.459 --> 00:02:50.130
And we'll use the same fullback and
we're going to go here again.

39
00:02:50.130 --> 00:02:55.010
Notice that we've repeated the fallback
value because the point we're

40
00:02:55.010 --> 00:02:59.823
making here is different but
we've seen how you could duplicate this.

41
00:02:59.823 --> 00:03:07.896
Although remember trying to go to towards
too much dry code can also be a problem.

42
00:03:07.896 --> 00:03:12.848
Most people today believe that repeating
a value twice is okay more than that, and

43
00:03:12.848 --> 00:03:16.169
you need to figure out ways
to remove the duplication.

44
00:03:16.169 --> 00:03:19.619
And we also have band count.

45
00:03:19.619 --> 00:03:24.496
So how are the bands
created we have this linear

46
00:03:24.496 --> 00:03:28.747
gradient here and with two color stops so

47
00:03:28.747 --> 00:03:34.890
each of these gradients creates
both colors of the bands.

48
00:03:34.890 --> 00:03:38.890
So each of these gradients
creates two bands.

49
00:03:38.890 --> 00:03:42.266
Let's wrap this a little bit.

50
00:03:42.266 --> 00:03:46.637
And it's actually the background size
that controls how many bands we have,

51
00:03:46.637 --> 00:03:51.829
right now it's 20% which means we get five
repetitions, which means we get 10 bands.

52
00:03:51.829 --> 00:03:55.159
If it was 10%, we would get 20 bands.

53
00:03:55.159 --> 00:03:57.119
So we could rewrite this.

54
00:04:00.527 --> 00:04:04.775
Like that, and actually,

55
00:04:08.458 --> 00:04:13.965
Which makes it more clear
how many bonds we have

56
00:04:13.965 --> 00:04:19.058
like we could experiment a little bit yep.

57
00:04:19.058 --> 00:04:26.624
And we could go here and
say bond count and defaulted to 10.

58
00:04:31.276 --> 00:04:32.647
So that should work.

59
00:04:32.647 --> 00:04:37.991
Let's try it out like
we did the other ones,

60
00:04:37.991 --> 00:04:43.635
bond count 10 and
let's change it a bit yep.

61
00:04:43.635 --> 00:04:45.328
See that works fine.

62
00:04:45.328 --> 00:04:49.773
So, I have a question for you.

63
00:04:49.773 --> 00:04:55.759
You might have noticed that a lot of
these were actually fairly simple.

64
00:04:55.759 --> 00:05:00.654
Like the, the bar color one, for
example, that we used the bar width or

65
00:05:00.654 --> 00:05:01.723
the bar color.

66
00:05:01.723 --> 00:05:04.830
This we're just setting one property.

67
00:05:04.830 --> 00:05:10.850
So why don't we want someone to style
a component, set them directly and

68
00:05:10.850 --> 00:05:17.084
style these divs directly why would we
use custom properties there at all.

69
00:05:17.084 --> 00:05:20.864
Like okay in the bar spacing declarations
economic sense it's setting two

70
00:05:20.864 --> 00:05:21.945
properties at once.

71
00:05:21.945 --> 00:05:27.510
There is some sort of benefit or
in the band count case, okay?

72
00:05:27.510 --> 00:05:31.045
It's a it's a sort of bigger
expression it's a bit harder to

73
00:05:31.045 --> 00:05:33.827
figure out by yourself
without some thinking.

74
00:05:33.827 --> 00:05:37.029
It does provide a higher
level of abstraction but for

75
00:05:37.029 --> 00:05:41.339
things like bar color and bar width why,
what benefit does it give us?

76
00:05:41.339 --> 00:05:44.548
So the benefit again is encapsulation.

77
00:05:44.548 --> 00:05:49.788
It means it exposes the styling hooks and
I can change my CSS entirely and

78
00:05:49.788 --> 00:05:54.869
whoever is styling our component
doesn't have to change anything.

79
00:05:54.869 --> 00:05:58.814
Also, notice that both of these properties
are actually set on the divs inside

80
00:05:58.814 --> 00:06:01.519
the component by exposing
these custom properties.

81
00:06:01.519 --> 00:06:06.242
It means that the entire component
can be styled by just applying

82
00:06:06.242 --> 00:06:10.971
properties on the component itself,
not on the divs inside it.

83
00:06:10.971 --> 00:06:15.909
We don't need to know anything
about its internal structure we can

84
00:06:15.909 --> 00:06:20.420
use whatever elements we want inside and
it will still work.

85
00:06:20.420 --> 00:06:26.159
So even though there is not a benefit
In terms of actual amount of code.

86
00:06:26.159 --> 00:06:30.869
There is a big win in
terms of maintainability.

87
00:06:30.869 --> 00:06:33.947
Especially when other people
are styling our components but

88
00:06:33.947 --> 00:06:36.719
even when it's just us in
a different place of the CSS or

89
00:06:36.719 --> 00:06:39.630
a different CSS file or
different places on the website.

