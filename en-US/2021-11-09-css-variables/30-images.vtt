WEBVTT

1
00:00:00.000 --> 00:00:02.873
And let's talk a little
bit about images as well.

2
00:00:02.873 --> 00:00:07.654
So far we've spoken about numbers,
lengths, colors,

3
00:00:07.654 --> 00:00:11.345
strings, let's discuss images briefly.

4
00:00:11.345 --> 00:00:15.032
Just a few gotchas that
there are when using images.

5
00:00:15.032 --> 00:00:20.693
So here we have a single line of code that
sets a background to a photo of a cat,

6
00:00:20.693 --> 00:00:22.555
pretty ordinary stuff.

7
00:00:22.555 --> 00:00:27.282
And at some point, we wanted to use
a custom property to control which

8
00:00:27.282 --> 00:00:29.573
image is shown from that folder.

9
00:00:29.573 --> 00:00:33.098
So when I tried this, my first guess,

10
00:00:33.098 --> 00:00:37.733
about how to do it,
was to do something like this.

11
00:00:37.733 --> 00:00:42.393
And then go here and
concatenate it like that,

12
00:00:42.393 --> 00:00:46.227
but as you can see that doesn't work.

13
00:00:46.227 --> 00:00:51.512
My second guess at this point, I had given
up on having the folder name be shared,

14
00:00:51.512 --> 00:00:56.053
I said okay, if I specify at least
the folder name, would that work?

15
00:00:56.053 --> 00:00:59.698
And obviously at this point I was just
investigating cuz this is not that useful.

16
00:01:01.612 --> 00:01:03.456
But even that doesn't work.

17
00:01:05.387 --> 00:01:11.961
What works,
is if I put the entire URL token

18
00:01:14.651 --> 00:01:18.597
In the custom property and
use that, and this does work.

19
00:01:18.597 --> 00:01:23.137
The reason my two attempts
didn't work is different.

20
00:01:23.137 --> 00:01:27.467
So the reason my first attempt
didn't work is a CSS limitation.

21
00:01:27.467 --> 00:01:32.787
There's actually no way in CSS
to concatenate two strings.

22
00:01:32.787 --> 00:01:36.947
We're familiar with concatenating
strings from the content property,

23
00:01:36.947 --> 00:01:41.239
because in the content property we can
just put strings next to each other and

24
00:01:41.239 --> 00:01:43.667
the content property concatenates them.

25
00:01:43.667 --> 00:01:47.597
However, that's specific to the content
property, there is not CSS wide.

26
00:01:47.597 --> 00:01:51.226
We can't just put strings next to
each other anywhere in CSS and

27
00:01:51.226 --> 00:01:52.467
expect that to work.

28
00:01:52.467 --> 00:01:56.535
We are actually discussing a function for
this, a text or

29
00:01:56.535 --> 00:01:59.347
concat function, but it's a way out.

30
00:01:59.347 --> 00:02:03.980
So unfortunately right now there is no way
to concatenate strings to compose a URL,

31
00:02:03.980 --> 00:02:07.422
which is really unfortunate
because this would be so useful,

32
00:02:07.422 --> 00:02:10.026
especially with data
URIs that contain SVGs.

33
00:02:10.026 --> 00:02:14.080
We could create parameterized SPGs,
but unfortunately we can't.

34
00:02:15.927 --> 00:02:21.270
The second one is a CSS bug, and, I'm
sure you've heard of browser bugs before,

35
00:02:21.270 --> 00:02:24.143
but you probably haven't heard of CSS bug.

36
00:02:24.143 --> 00:02:26.777
So this is a bug with the CSS language,
this should work.

37
00:02:26.777 --> 00:02:28.983
It should be possible for this to work.

38
00:02:28.983 --> 00:02:34.063
But because URL started off as
not just a simple function, but

39
00:02:34.063 --> 00:02:39.257
the URL function is weird,
it accepts a string as a parameter.

40
00:02:39.257 --> 00:02:42.853
But also you could provide unquoted URLs.

41
00:02:42.853 --> 00:02:46.048
And unquoted URLs are its downfall.

42
00:02:46.048 --> 00:02:50.417
It means that we need to have
all these weird parsing rules.

43
00:02:50.417 --> 00:02:54.200
So if you try to use a var reference,
in a URL function,

44
00:02:54.200 --> 00:02:57.588
the browser basically has
to parse this as a URL.

45
00:02:57.588 --> 00:03:02.138
The browser thinks that you have
a URL which is var open parenthesis,

46
00:03:02.138 --> 00:03:06.228
--img, close parenthesis,
like that's your URL there.

47
00:03:06.228 --> 00:03:13.591
And the whole thing fails,
because that's an invalid URL If this was

48
00:03:13.591 --> 00:03:18.597
a regular function, if we were specifying
it today, then it should actually work.

49
00:03:18.597 --> 00:03:26.177
Every other function in CSS accepts
var references inside it, except URL.

50
00:03:26.177 --> 00:03:30.920
We are actually planning to add a function
that is just like URL except it

51
00:03:30.920 --> 00:03:32.507
only accepts strings.

52
00:03:32.507 --> 00:03:34.859
I think we decided to call it SRC,

53
00:03:34.859 --> 00:03:39.064
it's a fairly recent resolution
like less than a year ago.

54
00:03:39.064 --> 00:03:42.297
But right now that's obviously
not supported anywhere.

55
00:03:42.297 --> 00:03:47.362
And lastly, the only thing that works is
if the entire URL token is in a variable,

56
00:03:47.362 --> 00:03:49.237
but that can still be useful.

57
00:03:49.237 --> 00:03:51.979
You can provide icons for things, and so

58
00:03:51.979 --> 00:03:57.086
on, By assigning them
to custom properties.

59
00:04:00.831 --> 00:04:05.649
So, one thing to remember is
that custom properties can only

60
00:04:05.649 --> 00:04:10.097
contain entire URL tokens,
not parts thereof for now.

61
00:04:10.097 --> 00:04:14.215
There are still some gotchas
even with that, let's say,

62
00:04:14.215 --> 00:04:17.997
we have two separate style sheets,
one of them sets,

63
00:04:17.997 --> 00:04:21.884
these sets images and
the other one uses these images.

64
00:04:21.884 --> 00:04:26.971
So, a.css sets an image custom
property to a certain URL,

65
00:04:26.971 --> 00:04:30.451
and b.css reads this custom property.

66
00:04:32.802 --> 00:04:34.861
What happens, how do they resolve?

67
00:04:34.861 --> 00:04:39.921
Do these URLs resolve relative to a.css or
b.css?

68
00:04:39.921 --> 00:04:44.112
Do they resolve at the point
where we specified them, or

69
00:04:44.112 --> 00:04:46.977
do they resolve at the point of usage?

70
00:04:46.977 --> 00:04:48.013
Let's find out.

71
00:04:50.997 --> 00:04:54.188
So I've prepared a demo here,

72
00:04:54.188 --> 00:04:59.467
where we have a.css that
specifies exactly that,

73
00:04:59.467 --> 00:05:04.514
and has a cat.jpg that is
relative to that file.

74
00:05:04.514 --> 00:05:09.189
And then a b.css that imports
the first stylesheet and

75
00:05:09.189 --> 00:05:13.467
uses that variable and
has a different cat image.

76
00:05:13.467 --> 00:05:19.477
So depending on the cat image we get,
we could tell which one it's relative to.

77
00:05:19.477 --> 00:05:22.616
So let's preview it and see.

78
00:05:22.616 --> 00:05:26.883
So we actually get this one,
it's relative to b.css.

79
00:05:30.347 --> 00:05:35.321
The reason, it's relative to b.css
is because given that this is not

80
00:05:35.321 --> 00:05:41.416
a registered property, the browser just
treats it as an unknown token essentially.

81
00:05:41.416 --> 00:05:45.024
So it's just substitutes it
at the point of usage and

82
00:05:45.024 --> 00:05:47.567
that's only when it interprets it.

83
00:05:47.567 --> 00:05:52.962
Theoretically we should be able to
register it, and then it would resolve

84
00:05:52.962 --> 00:05:58.194
at the point where we specified it,
which is what we want in most cases.

85
00:05:58.194 --> 00:06:01.232
However that doesn't work right now.

86
00:06:01.232 --> 00:06:07.136
I do have an index hyphen registered
dot HTML here, but it doesn't work,

87
00:06:07.136 --> 00:06:13.150
that part doesn't appear to be,
I think that part is not implemented yet.

88
00:06:13.150 --> 00:06:14.670
There is a Chrome bug about it.

89
00:06:16.713 --> 00:06:21.630
So relative URLs and custom properties
resolve at the point of usage, and

90
00:06:21.630 --> 00:06:26.798
registering them as URLs or images will
allow us to change this, but not yet.

91
00:06:26.798 --> 00:06:29.937
&gt;&gt; Can preprocessors help for
this CSS bug?

92
00:06:29.937 --> 00:06:36.101
&gt;&gt; Yes, so, the thing is, preprocessors
can help as long as it's a preprocessor

93
00:06:36.101 --> 00:06:41.257
variable and preprocessor variables
are not reactive like that.

94
00:06:41.257 --> 00:06:45.924
So, they could help if all we're doing
is concatenating like if we just want to

95
00:06:45.924 --> 00:06:48.766
eliminate repetition
within the style sheet.

96
00:06:48.766 --> 00:06:52.926
But if we actually want the dynamic
aspects of custom properties then there is

97
00:06:52.926 --> 00:06:53.957
nothing we can do.

98
00:06:53.957 --> 00:06:58.789
Like if we want to have,
some sort of dynamic calculation and

99
00:06:58.789 --> 00:07:03.335
then we wanna plug in an SVG
data URI to make custom icons,

100
00:07:03.335 --> 00:07:06.303
that sort of thing that won't work.

101
00:07:06.303 --> 00:07:10.679
But if we just wanna have like sass
variables within our sass stylesheet and

102
00:07:10.679 --> 00:07:14.846
set them there, then of course we can
concatenate them in URL functions

103
00:07:14.846 --> 00:07:17.429
like people have been doing this for
years.

104
00:07:17.429 --> 00:07:19.509
In fact when I wrote my book,

105
00:07:19.509 --> 00:07:24.890
I had an entire library of sass
functions to concatenate variables with,

106
00:07:24.890 --> 00:07:30.013
to create like the SPG data URIs
&gt;&gt; Is there a way to set the URL as part

107
00:07:30.013 --> 00:07:34.917
of the HTML like in an attribute or
other type of element?

108
00:07:34.917 --> 00:07:39.819
&gt;&gt; So, there is an add function
that you might be familiar from

109
00:07:39.819 --> 00:07:41.790
the content property.

110
00:07:41.790 --> 00:07:46.470
So you can use this attribute
function in the content property and

111
00:07:46.470 --> 00:07:49.120
we've had that for many many years.

112
00:07:49.120 --> 00:07:54.096
And it just returns a string
that gives you the value of

113
00:07:54.096 --> 00:07:58.197
the attribute in that individual element.

114
00:07:58.197 --> 00:08:02.962
However, if you assign the attribute
function on a custom property will

115
00:08:02.962 --> 00:08:05.317
just resolve at the point of usage.

116
00:08:05.317 --> 00:08:10.711
So what you actually read that property,
so if you specify it on a parent,

117
00:08:10.711 --> 00:08:16.462
and then you try to read that custom
property on a descendant that won't work.

118
00:08:16.462 --> 00:08:20.163
Because the attribute function only
gives you the attribute on that element,

119
00:08:20.163 --> 00:08:21.235
it doesn't inherit.

120
00:08:21.235 --> 00:08:26.223
And also there were some plans in
CSS values to extend this attribute

121
00:08:26.223 --> 00:08:29.738
function so
that it can be used anywhere in CSS.

122
00:08:29.738 --> 00:08:34.344
And it can return any type of
value not just strings, so

123
00:08:34.344 --> 00:08:37.663
that it would return numbers and so on.

124
00:08:37.663 --> 00:08:39.350
Unfortunately, that was never implemented.

125
00:08:39.350 --> 00:08:42.142
There's a lot of people pushing for
implementation of this, but

126
00:08:42.142 --> 00:08:43.880
browsers don't seem to be interested.

