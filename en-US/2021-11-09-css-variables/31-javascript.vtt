WEBVTT

1
00:00:00.133 --> 00:00:05.698
And now let's get to the last section for
today which has to do with JavaScript.

2
00:00:05.698 --> 00:00:10.632
And I feel that this is possibly
the most exciting section because

3
00:00:10.632 --> 00:00:15.393
that is the biggest revolution
that custom properties bring.

4
00:00:15.393 --> 00:00:19.849
The fact that we can use just a tiny
bit of JavaScript to set them and

5
00:00:19.849 --> 00:00:22.294
have the rest of the CSS just adapt.

6
00:00:22.294 --> 00:00:27.101
Whereas previously,
we had to include like copious amounts of

7
00:00:27.101 --> 00:00:31.378
CSS code mixed with our JavaScript,
it was such a mess.

8
00:00:31.378 --> 00:00:36.016
So how can we set and
read some properties with JavaScript?

9
00:00:36.016 --> 00:00:40.730
The exact same methods that we use for
regular properties.

10
00:00:40.730 --> 00:00:45.255
This API has existed for possibly decades.

11
00:00:45.255 --> 00:00:48.602
We just do element.style.getPropertyValue,
and

12
00:00:48.602 --> 00:00:52.629
that gives us the value of foo on
the inline style of the element.

13
00:00:52.629 --> 00:00:57.068
Or if we want to get the value
of foo from wherever,

14
00:00:57.068 --> 00:01:01.931
even if it comes from a style sheet,
we get the computed

15
00:01:01.931 --> 00:01:07.030
style of the element and
then we use the same method name.

16
00:01:07.030 --> 00:01:12.076
And most importantly,
this is what we're gonna be doing a lot

17
00:01:12.076 --> 00:01:16.748
when we want to set a custom
property on the inline style.

18
00:01:16.748 --> 00:01:20.358
We just do element.style.setProperty and

19
00:01:20.358 --> 00:01:24.159
we set the custom property
to whatever we want.

20
00:01:24.159 --> 00:01:28.013
And that sets it on the inline style,
but that's usually what we want,

21
00:01:28.013 --> 00:01:31.429
we don't usually want to be
actually modifying style sheets.

22
00:01:31.429 --> 00:01:33.339
So what can we do with this?

23
00:01:33.339 --> 00:01:34.949
Let's look at a few examples.

24
00:01:34.949 --> 00:01:39.459
So here we have a radial gradient whose
center is hard coded to the center of

25
00:01:39.459 --> 00:01:40.130
the page.

26
00:01:40.130 --> 00:01:44.630
We wanted to, instead, do a spotlight
effect that follows the mouse,

27
00:01:44.630 --> 00:01:48.239
we want its center to change
to follow our mouse pointer.

28
00:01:48.239 --> 00:01:50.242
So how can we do that?

29
00:01:50.242 --> 00:01:54.999
In the past,
we would need to use an event listener for

30
00:01:54.999 --> 00:01:59.460
mouse move and
recreate the gradient every time.

31
00:01:59.460 --> 00:02:03.667
However, today we can just
set two custom properties

32
00:02:06.894 --> 00:02:11.135
So we're going to set --mouse-x and

33
00:02:11.135 --> 00:02:16.671
--mouse-y to evt.clientX and evt.clientY.

34
00:02:22.109 --> 00:02:25.843
And then, We can go here and use,

35
00:02:25.843 --> 00:02:30.157
well, we can't get just
to use mouse x directly,

36
00:02:30.157 --> 00:02:35.936
we need to transform it first,
cuz right now we just have a number.

37
00:02:35.936 --> 00:02:37.629
So we multiply it by 1 pixel.

38
00:02:40.509 --> 00:02:43.039
Right, and
we also need to provide a fallback.

39
00:02:45.679 --> 00:02:46.489
Let's say zero.

40
00:02:49.112 --> 00:02:55.564
And now, as I move my mouse pointer,
the gradient does adapt horizontally.

41
00:02:58.434 --> 00:03:01.569
We can do the same vertically.

42
00:03:04.416 --> 00:03:06.019
Oops, calc.

43
00:03:13.898 --> 00:03:16.162
And now it adapts in both directions.

44
00:03:20.699 --> 00:03:22.110
However, this is not ideal.

45
00:03:24.986 --> 00:03:29.606
Even though this already gives us a big
advantage over what we would have

46
00:03:29.606 --> 00:03:33.919
to do before custom properties,
it's not sufficiently usable.

47
00:03:33.919 --> 00:03:35.429
And let's see why.

48
00:03:37.937 --> 00:03:41.829
So let's go back to this SVG example.

49
00:03:41.829 --> 00:03:47.141
Let's say we wanted to set this look
variable, remember it goes from 0 to 1,

50
00:03:47.141 --> 00:03:51.888
in terms of the mouse pointer so
that we could move our mouse pointer and

51
00:03:51.888 --> 00:03:55.930
have the eyes appear to follow it,
wouldn't that be cool?

52
00:03:55.930 --> 00:04:02.939
But how do you convert this number
of pixels to a 0 to 1 range?

53
00:04:02.939 --> 00:04:08.158
Even though what we said is a pure number,
it's actually a fake pure number because

54
00:04:08.158 --> 00:04:12.870
it essentially corresponds to pixels and
we can't really do much with it.

55
00:04:16.339 --> 00:04:19.489
So what can we do instead?

56
00:04:19.489 --> 00:04:23.873
Instead of having a number of pixels,
we could actually divide the number of

57
00:04:23.873 --> 00:04:27.105
pixels with the maximum number
of pixels we could have.

58
00:04:27.105 --> 00:04:29.201
Which is given by innerwidth or

59
00:04:29.201 --> 00:04:33.890
window.innerwidth as we might have
seen it, it's the same thing.

60
00:04:33.890 --> 00:04:36.098
So what does this give us?

61
00:04:36.098 --> 00:04:41.367
This gives us the percentage
of the screen of the viewport

62
00:04:41.367 --> 00:04:48.519
that the mouse pointer has moved
horizontally and dividing by inner height.

63
00:04:48.519 --> 00:04:52.730
Gives us the percentage that the mouse
pointer has moved across the viewport

64
00:04:52.730 --> 00:04:53.529
vertically.

65
00:04:53.529 --> 00:04:58.955
And that means we can use it
just the same in everything that

66
00:04:58.955 --> 00:05:05.839
needs to use the mouse pointer, so
here we can just set look based on that.

67
00:05:08.939 --> 00:05:11.720
Let's default it as well, in fact,

68
00:05:11.720 --> 00:05:15.860
let's give it a fullback of 0.5,
and look at that.

69
00:05:19.109 --> 00:05:21.680
It already worked.

70
00:05:21.680 --> 00:05:26.160
And the biggest advantage
of this is that it works

71
00:05:26.160 --> 00:05:31.089
regardless of the CSS code
that we intend to use it in.

72
00:05:31.089 --> 00:05:35.030
We can take exactly
the same JavaScript code,

73
00:05:35.030 --> 00:05:43.419
copied into our previous example,
Let's press Cmd+Enter to run.

74
00:05:53.729 --> 00:05:58.032
And if we multiply it by 100%, and

75
00:05:58.032 --> 00:06:02.609
here as well, it works for this as well.

76
00:06:02.609 --> 00:06:06.379
In fact it works better because instead of
having pixels here we have percentages.

77
00:06:06.379 --> 00:06:11.899
So the exact same JavaScript code can
serve two entirely different use cases.

78
00:06:14.213 --> 00:06:18.774
This is very important when designing
how you're gonna use custom

79
00:06:18.774 --> 00:06:22.689
properties to communicate
between JavaScript and CSS.

80
00:06:22.689 --> 00:06:25.991
And it becomes even more important if
there are different people writing the CSS

81
00:06:25.991 --> 00:06:28.170
code and
different people writing the JavaScript.

82
00:06:28.170 --> 00:06:32.906
You don't want to have to go back to
the JavaScript developer every time you

83
00:06:32.906 --> 00:06:35.687
wanna tweak the design of your gradient,
or

84
00:06:35.687 --> 00:06:39.695
every time you want to make a minor
tweak on some kind of effect.

85
00:06:39.695 --> 00:06:43.902
You want to offload as much of
the styling as possible to CSS.

86
00:06:43.902 --> 00:06:48.694
You want to JavaScript to just send
the very purest form of data so

87
00:06:48.694 --> 00:06:53.663
you can just iterate as much as you
want in your CSS without having to

88
00:06:53.663 --> 00:06:57.778
go back to the JavaScript and
change JavaScript code.

89
00:06:57.778 --> 00:07:00.559
That is the ideal separation of concerns.

90
00:07:05.609 --> 00:07:09.570
Now there are some things that
we can do by having mouse-x and

91
00:07:09.570 --> 00:07:14.939
mouse-y that apply to the whole page,
but sometimes we want local coordinates.

92
00:07:14.939 --> 00:07:16.195
So how could we do that?

93
00:07:19.919 --> 00:07:24.779
And this is a summary of how we can
do reusable pointer coordinates.

94
00:07:24.779 --> 00:07:28.360
So you should prefer abstract 0 to 1
percentages rather than absolute pixel

95
00:07:28.360 --> 00:07:28.862
lengths.

96
00:07:32.280 --> 00:07:35.564
0 to 1 can be converted to a length,
if you want,

97
00:07:35.564 --> 00:07:39.571
you can always multiply it by
viewport units, for example.

98
00:07:39.571 --> 00:07:44.336
But the reverse isn't possible if you have
pixels even if you have pixels as a pure

99
00:07:44.336 --> 00:07:46.939
number, you can't do anything with them.

100
00:07:49.159 --> 00:07:51.508
So what about local coordinates?

101
00:07:51.508 --> 00:07:56.307
While having coordinates that apply
to the percentage of the viewport

102
00:07:56.307 --> 00:07:59.404
that the mouse coordinate
design is useful.

103
00:07:59.404 --> 00:08:04.276
Often we wanna do things that depend
on the percentage of an element

104
00:08:04.276 --> 00:08:06.714
itself that the pointer is over.

105
00:08:10.035 --> 00:08:14.543
It's relatively easy to get
local pointer coordinates,

106
00:08:14.543 --> 00:08:19.329
all we need to do is get the bounding
rectangle of the element.

107
00:08:19.329 --> 00:08:22.039
And then subtracted from client y and
client x, and

108
00:08:22.039 --> 00:08:24.949
then we get local coordinates for
the element itself.

109
00:08:24.949 --> 00:08:27.181
And in the same spirit has previously,

110
00:08:27.181 --> 00:08:31.101
instead of having pixels cuz that's
what top and left would give us,

111
00:08:31.101 --> 00:08:34.699
we wanna divide by the width and
height of the actual elements.

112
00:08:34.699 --> 00:08:38.116
So we could get a 0 to 1 percentage
that we could actually use for

113
00:08:38.116 --> 00:08:39.520
calculations in our CSS.

