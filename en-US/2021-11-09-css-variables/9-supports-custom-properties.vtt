WEBVTT

1
00:00:00.382 --> 00:00:02.953
You might be wondering now,
how do we provide fallbacks for

2
00:00:02.953 --> 00:00:04.042
unsupported features?

3
00:00:04.042 --> 00:00:05.633
Then we can't use the cascade anymore.

4
00:00:05.633 --> 00:00:08.854
We can't just specify
a duplicate declarations and

5
00:00:08.854 --> 00:00:11.571
let the browser use
what it can understand.

6
00:00:11.571 --> 00:00:15.422
Just like we were able to do for
20 years or so.

7
00:00:15.422 --> 00:00:21.832
So, again add supports to the rescue,
we can use that supports.

8
00:00:21.832 --> 00:00:26.858
Here's how we would use add
support to specify LCH colors

9
00:00:26.858 --> 00:00:32.616
only if the browser supports LCH and
fall back to a more typical and

10
00:00:32.616 --> 00:00:38.186
more classic sRGB color for
browsers that don't support LCH.

11
00:00:38.186 --> 00:00:42.584
And that is the huge advantage of
custom properties here as well.

12
00:00:42.584 --> 00:00:47.120
We can just do this once, if we just
use that supports without custom

13
00:00:47.120 --> 00:00:52.232
properties we would have to fork our CSS
in every place that defines a color.

14
00:00:52.232 --> 00:00:56.244
And this is not something we could do with
preprocessor variables either because

15
00:00:56.244 --> 00:01:00.200
preprocessor variables cannot be written
based on what the browser supports.

16
00:01:00.200 --> 00:01:04.459
Because the preprocessor runs before
the break before the CSS even gets to

17
00:01:04.459 --> 00:01:05.291
the browser.

18
00:01:05.291 --> 00:01:11.566
Here is a bit of code that actually
tripped me up a while ago.

19
00:01:11.566 --> 00:01:16.011
We have a font size in 20 pixels
that every browser understands.

20
00:01:16.011 --> 00:01:21.396
And we also have a font size that
uses a clump function to make

21
00:01:21.396 --> 00:01:27.442
sure that our font size is within
this range of 16 to 24 pixels.

22
00:01:27.442 --> 00:01:36.047
And here we have a calculation of let's
say 100% multiplied by a custom property.

23
00:01:36.047 --> 00:01:40.114
So what happens in browsers that don't
support the clump function, you would

24
00:01:40.114 --> 00:01:44.255
expect that since the browser can see
that I'm using the clamp function there.

25
00:01:44.255 --> 00:01:49.347
If it doesn't understand it, it should use
the full back on part at parse value time

26
00:01:49.347 --> 00:01:54.295
like it's at parse value times that it
seems that when using the clamp function,

27
00:01:54.295 --> 00:01:57.821
the clump function is not
actually behind the variable.

28
00:01:57.821 --> 00:02:00.090
However, that's not what happens.

29
00:02:00.090 --> 00:02:04.717
What happens is again that
we get the behavior of

30
00:02:04.717 --> 00:02:08.194
invalid that computed value time.

31
00:02:08.194 --> 00:02:14.782
Because once the browser sees that
I'm using a VAR function in my value,

32
00:02:14.782 --> 00:02:19.642
it just assumes optimistically
that this might end up

33
00:02:19.642 --> 00:02:24.504
being a valid value once
substitution is performed.

34
00:02:24.504 --> 00:02:28.828
Because it can't know what I have,
what I plan to store in this value and

35
00:02:28.828 --> 00:02:30.642
that can change at any point.

36
00:02:30.642 --> 00:02:33.380
So the 20 pixel fallback
will never be used and

37
00:02:33.380 --> 00:02:37.630
I would still have to go the supports
route if I want to provide a fallback.

