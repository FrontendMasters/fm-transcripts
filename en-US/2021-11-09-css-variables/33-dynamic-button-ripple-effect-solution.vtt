WEBVTT

1
00:00:00.638 --> 00:00:05.223
So let's first look at the effect we want
to create before we set out to create it.

2
00:00:07.304 --> 00:00:12.688
So we want something like this, where we
click and we have the same circle, but

3
00:00:12.688 --> 00:00:18.580
when we lift the mouse pointer, the circle
grows in radius and decreases in opacity.

4
00:00:18.580 --> 00:00:23.396
I've described it earlier, but
this is what it looks like.

5
00:00:23.396 --> 00:00:28.061
So now let's go back and try to do that.

6
00:00:28.061 --> 00:00:32.605
So the radius of the circle is controlled
through the position of the color stop.

7
00:00:32.605 --> 00:00:36.923
If we say 2em's,
it's a much bigger circle.

8
00:00:36.923 --> 00:00:42.297
And we want it to basically start
from 1em and go to ideally 100% so

9
00:00:42.297 --> 00:00:46.411
that we are certain that it
covers our entire button.

10
00:00:46.411 --> 00:00:49.825
If we just use a large number of em's,

11
00:00:49.825 --> 00:00:54.005
it could always end up
needing more than that.

12
00:00:54.005 --> 00:00:59.642
So what we will do is we
are going to use again a p custom

13
00:00:59.642 --> 00:01:04.908
property for
the progression of the animation.

14
00:01:04.908 --> 00:01:09.651
And when the property is 0,
we want to get 1em,

15
00:01:09.651 --> 00:01:13.606
when it's 1, we want to get 100%.

16
00:01:13.606 --> 00:01:16.881
It's just another case
of range mapping really.

17
00:01:16.881 --> 00:01:25.086
So let's define a property for,
The radius, let's say ripple-radius.

18
00:01:27.321 --> 00:01:31.122
And let's use the same technique.

19
00:01:31.122 --> 00:01:36.301
So when p is 1, we want it to be 100%.

20
00:01:36.301 --> 00:01:38.833
And when p is 0,

21
00:01:45.224 --> 00:01:48.026
We want it to be 1em.

22
00:01:48.026 --> 00:01:50.150
And let's add these.

23
00:01:59.341 --> 00:02:04.600
Okay, and let's see.

24
00:02:04.600 --> 00:02:08.536
So with 0,
we get the circle that we already had.

25
00:02:08.536 --> 00:02:11.671
Let's do 0.2 and see what happens.

26
00:02:11.671 --> 00:02:13.566
See the circle is bigger.

27
00:02:13.566 --> 00:02:16.435
And let's do 0.5, even bigger.

28
00:02:16.435 --> 00:02:17.682
So it looks like it's working.

29
00:02:17.682 --> 00:02:20.387
Let's do 1,
it should cover the entire thing.

30
00:02:20.387 --> 00:02:24.627
Fantastic, so
this is already working for the circle.

31
00:02:24.627 --> 00:02:28.530
Now, what else do we want to vary?

32
00:02:28.530 --> 00:02:31.714
We want to vary the opacity of the circle.

33
00:02:31.714 --> 00:02:36.063
So we start with 0.4 and
we want to reach 0.

34
00:02:36.063 --> 00:02:39.961
So let's do ripple-opacity.

35
00:02:42.093 --> 00:02:45.181
Again, we're gonna use calc.

36
00:02:45.181 --> 00:02:51.503
So, When

37
00:02:51.503 --> 00:02:56.847
var p is 1, we want to get 0.

38
00:02:58.618 --> 00:03:03.648
And when p is 0, we want

39
00:03:03.648 --> 00:03:08.686
to get 0.4, right?

40
00:03:08.686 --> 00:03:13.126
And we can actually remove this term
because it's just multiplying by 0.

41
00:03:13.126 --> 00:03:18.579
Now let's try it again,
0 gives us the original circle,

42
00:03:18.579 --> 00:03:21.707
0.2 gives us a larger circle.

43
00:03:23.867 --> 00:03:28.779
0.6 gives us an even larger circle,
but the opacity is

44
00:03:28.779 --> 00:03:33.887
not changing because I haven't
actually applied the var here.

45
00:03:33.887 --> 00:03:36.406
So, let's say ripple-opacity.

46
00:03:39.514 --> 00:03:44.023
Lovely, now that p is 0.6,
we're getting a very faded out circle.

47
00:03:44.023 --> 00:03:48.892
Let's try 0.2 again, let's fad it out.

48
00:03:48.892 --> 00:03:50.340
Let's try 0.

49
00:03:52.443 --> 00:03:54.350
Okay, our original circle.

50
00:03:54.350 --> 00:03:58.488
So this works, but of course,
we don't actually have an animation yet,

51
00:03:58.488 --> 00:04:01.514
because p is just hard-coded,
it's not changing.

52
00:04:05.003 --> 00:04:08.449
So what we really want
to do is set p here,

53
00:04:11.826 --> 00:04:18.278
And when it's active,
we want to get the 1em circle and

54
00:04:18.278 --> 00:04:23.094
the 0.4, and we get those when p is 0.

55
00:04:23.094 --> 00:04:30.160
So we wanna set it to 1 on the main
rule and 0 on the active rule.

56
00:04:30.160 --> 00:04:34.310
And then we wanna animate it,
so we need to register it.

57
00:04:34.310 --> 00:04:41.893
So @property --p syntax:
"&lt;number&gt;"; inherits,

58
00:04:41.893 --> 00:04:46.807
we don't care, we can just say false.

59
00:04:46.807 --> 00:04:53.036
And initial value is 0.

60
00:04:53.036 --> 00:04:55.232
Now we're gonna set a transition.

61
00:04:55.232 --> 00:04:59.568
Let's set it to one second and
let's see what happens.

62
00:04:59.568 --> 00:05:02.935
These actually needs to
be in the main rule,

63
00:05:02.935 --> 00:05:07.576
they shouldn't be applying only
when the button is active,

64
00:05:07.576 --> 00:05:12.686
that's why we don't get anything
when we lift the mouse pointer.

65
00:05:12.686 --> 00:05:17.896
All we want here is
the declaration that sets p to 0.

66
00:05:17.896 --> 00:05:22.970
So now, when we press our mouse pointer,
we get this effect,

67
00:05:22.970 --> 00:05:27.374
and then when we lift it,
we get the effect we wanted.

68
00:05:27.374 --> 00:05:31.553
So we're almost there,
we're halfway there pretty much.

69
00:05:31.553 --> 00:05:36.864
We want the circle to start immediately
when we get our mouse pointer down,

70
00:05:36.864 --> 00:05:41.432
but we do want the animation to
happen when we lift our button up.

71
00:05:41.432 --> 00:05:43.214
So how can we do that?

72
00:05:43.214 --> 00:05:47.529
This has to do with how transitions work.

73
00:05:47.529 --> 00:05:53.784
So the transition right now
is applied on our main rule.

74
00:05:53.784 --> 00:05:57.834
So we get the same transition,
the one second transition,

75
00:05:57.834 --> 00:06:02.052
both when we press the mouse button
down and when we lift it up.

76
00:06:02.052 --> 00:06:06.844
If we only wanted one way,
then we could go there and

77
00:06:06.844 --> 00:06:15.781
override transition duration,
To be 0 seconds.

78
00:06:15.781 --> 00:06:17.334
And let's try that.

79
00:06:17.334 --> 00:06:20.872
So you see now,
the moment I press my mouse pointer down,

80
00:06:20.872 --> 00:06:22.809
I get the circle immediately.

81
00:06:22.809 --> 00:06:27.683
Because the moment I press my mouse
pointer down, the active pseudo

82
00:06:27.683 --> 00:06:32.657
class activates, and the transition is 0,
so I get no transition.

83
00:06:32.657 --> 00:06:37.727
However, once I'm in the active mode,
once I lift my pointer up,

84
00:06:37.727 --> 00:06:42.812
then I'm not in active anymore,
so this doesn't apply anymore.

85
00:06:42.812 --> 00:06:48.460
So now I get the usual one second
that I've specified in the base rule,

86
00:06:48.460 --> 00:06:51.547
so I actually get the transition now.

87
00:06:51.547 --> 00:06:56.595
And you can see how it works,
it's basically variable we wanted.

88
00:06:56.595 --> 00:07:01.991
In Google's version, it's much faster,
but we could do that.

89
00:07:01.991 --> 00:07:04.542
It's just kind of a shame
because now we can't see it and

90
00:07:04.542 --> 00:07:06.073
we've spent all this work on it.

91
00:07:10.342 --> 00:07:15.752
I know that some people might have
questions about performance with these

92
00:07:15.752 --> 00:07:22.221
things, especially since we've used event
delegation on document for many of these.

93
00:07:22.221 --> 00:07:25.468
Event delegation is when you
monitor events on an ancestor,

94
00:07:25.468 --> 00:07:27.258
often even the entire document.

95
00:07:27.258 --> 00:07:30.405
So we monitor events on
pretty much any element,

96
00:07:30.405 --> 00:07:35.023
even new elements that existed after
we registered our event handler.

97
00:07:35.023 --> 00:07:38.531
So that gives you maximum flexibility and
maintainability, but

98
00:07:38.531 --> 00:07:41.603
it can be slower because
we're monitoring everything.

99
00:07:41.603 --> 00:07:45.961
Sometimes, it makes sense to scope
to specific elements that can be

100
00:07:45.961 --> 00:07:50.556
more performant, but it's a tighter
coupling of CSS and JavaScript.

101
00:07:50.556 --> 00:07:53.823
Because you need to know which
elements you're applying,

102
00:07:53.823 --> 00:07:57.363
which elements you will need to
involve in your CSS beforehand.

103
00:07:57.363 --> 00:08:02.576
I would say my personal recommendation
would be for anything other than mouse

104
00:08:02.576 --> 00:08:08.203
move or pointer move, err on flexibility,
it's not triggered that frequently.

105
00:08:08.203 --> 00:08:11.664
For mouse move or
pointer move, it depends.

106
00:08:11.664 --> 00:08:17.107
I would say try to err on flexibility,
measure the performance, adjust if needed.

107
00:08:17.107 --> 00:08:22.562
But in those,
it's more reasonable to err on the side

108
00:08:22.562 --> 00:08:28.031
of having a tighter coupling
to gain in performance.

109
00:08:28.031 --> 00:08:32.392
Again, it depends on the website, it
depends on how many DOM elements you have

110
00:08:32.392 --> 00:08:34.721
in general, how complex the website is.

111
00:08:34.721 --> 00:08:38.690
But mouse move can get quite slow if
you're doing a lot of work there.

112
00:08:38.690 --> 00:08:42.801
So for
events that are triggered very frequently,

113
00:08:42.801 --> 00:08:47.875
it makes sense to limit how many
elements you're monitoring.

114
00:08:47.875 --> 00:08:48.701
So in this case,

115
00:08:48.701 --> 00:08:52.485
we have used range mapping just to avoid
registering a bunch of properties.

116
00:08:52.485 --> 00:08:55.166
We might have mentioned this before,

117
00:08:55.166 --> 00:08:59.281
it can be useful to avoid
registering a ton of properties.

