WEBVTT

1
00:00:00.370 --> 00:00:06.316
So, here do you remember this gallery
where we were using scale and

2
00:00:06.316 --> 00:00:11.732
rotate to specify scale and
rotate transform separately and

3
00:00:11.732 --> 00:00:15.220
we have this transition on hover.

4
00:00:15.220 --> 00:00:18.767
So, specifying a transition
seems to work just fine here.

5
00:00:18.767 --> 00:00:23.591
But what if we want to specify different
parameters for the scale transition and

6
00:00:23.591 --> 00:00:27.370
different parameters for
the background transition?

7
00:00:27.370 --> 00:00:32.328
Right now we've just specified the time,
which basically tells the browser,

8
00:00:32.328 --> 00:00:36.992
transition whatever you can transition,
just make it last half a second.

9
00:00:36.992 --> 00:00:40.035
But if we want to provide
separate parameters,

10
00:00:40.035 --> 00:00:44.306
we can actually specify different
parameters for each property.

11
00:00:44.306 --> 00:00:49.022
So, for example, you see how the pictures
become bigger when you hover,

12
00:00:49.022 --> 00:00:51.620
what if we wanted them to bounce as well?

13
00:00:51.620 --> 00:00:55.050
What if we wanted them to become
a little bit bigger than snap back?

14
00:00:55.050 --> 00:00:57.730
We can actually do that with
a custom cubic-bezier function.

15
00:00:59.020 --> 00:01:03.290
So, let's open cubic-bezier.com.

16
00:01:03.290 --> 00:01:09.455
And, if we have a cubic-bezier
function that goes out of range,

17
00:01:09.455 --> 00:01:16.070
like it goes over 100% for
the y-axis, that gives us a bounce.

18
00:01:16.070 --> 00:01:19.939
We can see it like this,
see how it bounces.

19
00:01:19.939 --> 00:01:24.062
Let's copy it and we can actually
modify the numbers themselves,

20
00:01:24.062 --> 00:01:26.130
to create a more intense bounce.

21
00:01:27.430 --> 00:01:32.722
Right now the bounce is a bit subtle,
so I'm gonna specify 2 here.

22
00:01:36.758 --> 00:01:43.840
It's still a bit subtle, let's specify 3,
okay, that gets us somewhere.

23
00:01:43.840 --> 00:01:49.616
So, notice that now because we're applying
this cubic-bezier timing function to both

24
00:01:49.616 --> 00:01:54.560
of the things that are being transitioned,
we get a bounce for both of them.

25
00:01:55.810 --> 00:01:57.910
Whereas we only wanted a bounce for
the scale.

26
00:01:59.160 --> 00:02:01.770
A bounce looks kind of weird for
the colors.

27
00:02:02.830 --> 00:02:05.850
We would never want colors
to be bouncing like this.

28
00:02:06.950 --> 00:02:14.360
Let me show you again, when I hover
the color goes to light yellow.

29
00:02:14.360 --> 00:02:19.354
But first, it goes to intense
yellow because it's bouncing, and

30
00:02:19.354 --> 00:02:22.576
that looks really strange, do you see it?

31
00:02:22.576 --> 00:02:28.209
So, we don't want to use this bouncing
cubic-bezier function for colors.

32
00:02:29.310 --> 00:02:33.412
So, let's instead specify
individual parameters for

33
00:02:33.412 --> 00:02:37.300
each property that is being transitioned.

34
00:02:37.300 --> 00:02:41.180
So, we have the cubic-bezier for
the scale and

35
00:02:41.180 --> 00:02:46.224
we have just five seconds and
background and we're just gonna

36
00:02:46.224 --> 00:02:51.710
use the default,
ease timing function for the background.

37
00:02:51.710 --> 00:02:53.460
I don't even need to
specify it is the default.

38
00:02:54.900 --> 00:02:58.556
And notice that, now we're getting
a transition for the color, but

39
00:02:58.556 --> 00:03:01.530
we stopped getting a transition for
the scale anymore.

40
00:03:02.850 --> 00:03:05.877
What happened there,
suddenly our code broke.

41
00:03:05.877 --> 00:03:11.061
So, what actually happened is explained
if we look at the specification it,

42
00:03:11.061 --> 00:03:15.704
says and I quote CSS variables can
even be transitioned or animated.

43
00:03:15.704 --> 00:03:19.487
But since the UA has no way
to interpret their contents,

44
00:03:19.487 --> 00:03:23.511
they always use the flips at
50% behavior that is used for

45
00:03:23.511 --> 00:03:28.280
any other pair of values that can't
be intelligently interpolated.

46
00:03:29.550 --> 00:03:31.540
So, how did we get a transition
in the first place?

47
00:03:33.020 --> 00:03:35.530
Until we did this,
we were actually getting a transition.

48
00:03:37.130 --> 00:03:41.632
This is because it wasn't the scale
property that was being transitioned,

49
00:03:41.632 --> 00:03:44.390
it was the actual transform.

50
00:03:44.390 --> 00:03:48.186
Like if we scope this to
the actual transform property,

51
00:03:48.186 --> 00:03:52.306
we'll get our transition again and
it actually works fine,

52
00:03:52.306 --> 00:03:56.209
the colors are what we want and
the bounce is what we want.

53
00:03:58.050 --> 00:04:03.510
But what if we actually wanted to
only transition the scale property?

54
00:04:04.610 --> 00:04:06.040
What can we do in that case?

55
00:04:08.150 --> 00:04:09.370
So, the short answer is,

56
00:04:09.370 --> 00:04:13.020
if we wanted to work in every
browser there's not much we can do.

57
00:04:13.020 --> 00:04:17.953
But if we're okay with using at property,
we can just register it.

58
00:04:21.034 --> 00:04:26.380
If we register it, and we can't register
it as an anything goes variable.

59
00:04:26.380 --> 00:04:29.561
We need to register it with an actual
syntax, in this case a number.

60
00:04:33.570 --> 00:04:38.111
And give it an initial value and
inherits, let's say false.

61
00:04:49.240 --> 00:04:51.940
Alright, yes, we don't want to
give it an initial value of zero.

62
00:04:54.990 --> 00:04:57.410
An initial value of zero would
make it entirely disappear.

63
00:04:58.640 --> 00:05:01.700
It's scale we want the initial
value to be one, like no change.

64
00:05:03.170 --> 00:05:05.948
So now,
even though we're animating the scale,

65
00:05:05.948 --> 00:05:09.530
we're transitioning the scale property,
it works just fine.

66
00:05:13.446 --> 00:05:17.562
So, custom properties can
trigger transitions but

67
00:05:17.562 --> 00:05:20.095
do not interpolate by default.

68
00:05:25.472 --> 00:05:28.225
However, registering the custom
property can fix this,

69
00:05:28.225 --> 00:05:30.595
registered custom
properties can interpolate.

70
00:05:36.558 --> 00:05:39.234
Here, we have an animation that
goes from one color to another.

71
00:05:43.203 --> 00:05:47.497
And let's say we wanted to use
our actual colors instead of

72
00:05:47.497 --> 00:05:51.183
repeating them in the keyframes,
can we do that?

73
00:05:54.755 --> 00:05:59.967
So, That actually works just fine.

74
00:06:02.254 --> 00:06:04.370
Using a var function in keyframes or

75
00:06:04.370 --> 00:06:07.620
in values of properties,
that works just fine.

76
00:06:07.620 --> 00:06:12.350
We don't need to register a property to be
able to use the var function in keyframes.

77
00:06:12.350 --> 00:06:17.585
However, if what we
were transitioning was,

78
00:06:17.585 --> 00:06:21.620
if we wanted to animate a property.

79
00:06:21.620 --> 00:06:25.646
Let's say we had a color property, and

80
00:06:25.646 --> 00:06:29.798
we would set it to accent color one here,

81
00:06:31.146 --> 00:06:35.958
And then we wanted to
animate that property,

82
00:06:38.495 --> 00:06:43.227
And actually we don't even need it here
let's just set background to var color.

83
00:06:46.710 --> 00:06:48.156
So, notice what happened here?

84
00:06:50.792 --> 00:06:54.082
Even though our code is
functionally equivalent,

85
00:06:54.082 --> 00:06:57.180
suddenly we lost the animation.

86
00:06:57.180 --> 00:07:01.430
And instead we get this
flips at 50% behavior.

87
00:07:01.430 --> 00:07:06.060
It just goes from yellow to
turquoise with nothing in between.

88
00:07:06.060 --> 00:07:10.190
And this is because we are trying to
animate a non registered property.

89
00:07:10.190 --> 00:07:13.700
Again, we can fix this by registering it,

90
00:07:13.700 --> 00:07:17.510
if we say property color,
we give it a syntax.

91
00:07:19.339 --> 00:07:26.059
And we need the other descriptors as well.

92
00:07:29.391 --> 00:07:33.260
Let's say black for initial value and
now everything's good again.

93
00:07:37.046 --> 00:07:40.558
So, to sum up,
var in key frames works just fine but

94
00:07:40.558 --> 00:07:44.660
animating the actual properties
requires registration.

95
00:07:44.660 --> 00:07:49.750
So, what can we do if we're okay
with registering custom properties?

96
00:07:49.750 --> 00:07:55.662
A primary use case is animating gradients,
often people want to animate a part

97
00:07:55.662 --> 00:08:01.950
of a gradient like the position of a color
stop, a specific color on the color stop.

98
00:08:03.090 --> 00:08:07.361
In the past, there used to be a section
in the images specification that tried to

99
00:08:07.361 --> 00:08:10.060
describe how gradients can interpolate.

100
00:08:10.060 --> 00:08:12.903
Like if you were trying to
animate between two gradients,

101
00:08:12.903 --> 00:08:17.050
the browser would try to figure out
how to do the animation intelligently.

102
00:08:17.050 --> 00:08:20.279
Now, most browsers never implemented this,

103
00:08:20.279 --> 00:08:24.930
the only implementation was Edge
before it switched to Chromium.

104
00:08:24.930 --> 00:08:28.770
So, right now there is no implementation
of gradient interpolation.

105
00:08:28.770 --> 00:08:32.450
However, this is where
custom properties come in.

106
00:08:32.450 --> 00:08:36.107
Instead of this insane
complexity of the browser trying

107
00:08:36.107 --> 00:08:39.217
to figure out how to
animate two gradients, and

108
00:08:39.217 --> 00:08:44.144
us having to add dummy color stops to
teach it how to animate two gradients.

109
00:08:44.144 --> 00:08:48.081
Instead we can actually code
the animation however we want and

110
00:08:48.081 --> 00:08:51.119
avoid repetition by
using custom properties.

111
00:08:51.119 --> 00:08:55.983
So, here we are trying to animate between
these two gradients and obviously

112
00:08:55.983 --> 00:09:00.782
as you can see nothing's happening not
much of an animation is happening.

113
00:09:00.782 --> 00:09:04.550
Because we can't animate
between two gradients.

114
00:09:04.550 --> 00:09:06.734
But what if we use a custom property for

115
00:09:06.734 --> 00:09:12.080
the position which is the only thing
that varies between these two gradients.

116
00:09:12.080 --> 00:09:17.153
Let's say, let's specify a p value,

117
00:09:17.153 --> 00:09:20.549
let's give it 0% here.

118
00:09:22.612 --> 00:09:27.487
And in the keyframe, we override p to 100%

119
00:09:27.487 --> 00:09:31.737
instead of repeating the gradient, and

120
00:09:31.737 --> 00:09:40.126
obviously we still don't get an animation
because we haven't registered it.

121
00:09:40.126 --> 00:09:44.796
But once we register it, see what happens.

122
00:09:44.796 --> 00:09:50.805
So, we're gonna register
it as a percentage, And

123
00:09:50.805 --> 00:09:57.085
set inherits to, let's set it to false and
initial-value 0%.

124
00:09:57.085 --> 00:10:00.648
And notice how this
beautifully animates now.

125
00:10:00.648 --> 00:10:06.610
I don't even need to set it here because
we've set the initial value to 0%.

126
00:10:06.610 --> 00:10:11.735
If you look at the notes, there are also
some links to resources where you

127
00:10:11.735 --> 00:10:16.626
can read more about cool things you
can do with animating gradients.

128
00:10:16.626 --> 00:10:22.004
For example, one of these even includes
an entire image reveal with slides,

129
00:10:22.004 --> 00:10:23.420
it's really cool.

130
00:10:24.950 --> 00:10:30.393
There's so many effects we can do
basically by expanding this technique.

131
00:10:35.479 --> 00:10:40.610
And one thing to keep in mind,
is that sometimes we may want

132
00:10:40.610 --> 00:10:47.124
to mirror CSS properties with custom
properties to set multiple at once.

133
00:10:47.124 --> 00:10:50.761
For example, a common workaround for

134
00:10:50.761 --> 00:10:55.534
vendor prefixes is for
example backdrop filter,

135
00:10:55.534 --> 00:11:00.430
which is what does the blurring
behind this panel?

136
00:11:01.650 --> 00:11:05.480
So, backdrop filter
still requires a prefix.

137
00:11:05.480 --> 00:11:11.210
In some browsers a webkit prefix, other
browsers support the unprefix property.

138
00:11:11.210 --> 00:11:16.425
So ,instead of using autoprefix to
add the prefixes automatically, or

139
00:11:16.425 --> 00:11:22.080
writing everything twice, we could use
a custom property to set both at once.

140
00:11:22.080 --> 00:11:26.632
It's the same pattern we've seen before of
using a custom property on the universal

141
00:11:26.632 --> 00:11:29.849
selector and setting it to initial so
it doesn't inherit.

142
00:11:32.745 --> 00:11:36.310
However, this does have a problem.

143
00:11:36.310 --> 00:11:40.945
This does introduce a problem that was not
there when we were just using the built in

144
00:11:40.945 --> 00:11:46.347
properties, let's say, We want to

145
00:11:46.347 --> 00:11:52.105
change this backdrop filter on hover.

146
00:11:54.400 --> 00:12:01.964
And make it blur more, let's say 20
pixels instead of say two pixels and

147
00:12:01.964 --> 00:12:08.880
let's add a transition for
this, let's make it one second.

148
00:12:08.880 --> 00:12:13.490
And we're animating backdrop,
oops backdrop filter.

149
00:12:13.490 --> 00:12:17.660
And note that this doesn't animate.

150
00:12:17.660 --> 00:12:20.017
And not only does this not animate, but

151
00:12:20.017 --> 00:12:24.450
even if we were okay with using that
property to enable it to animate.

152
00:12:24.450 --> 00:12:26.688
We can't actually use that property here,

153
00:12:26.688 --> 00:12:30.696
because there is no syntax that describes
the value space of backdrop filter.

154
00:12:30.696 --> 00:12:36.050
It's not a number, it's not a percentage,
it's not an image, it's not a length.

155
00:12:36.050 --> 00:12:41.856
It's like it's none of these primitive
values that we can specify there.

156
00:12:41.856 --> 00:12:46.986
In this individual, in this specific case,
we can actually just

157
00:12:46.986 --> 00:12:52.120
apply the transition to everything and
take advantage of the fact

158
00:12:52.120 --> 00:12:57.743
that custom properties can trigger
transitions of other properties.

159
00:12:57.743 --> 00:13:02.470
Or if we wanted to explicitly
filter out which properties

160
00:13:02.470 --> 00:13:04.840
the transition applies to.

161
00:13:06.020 --> 00:13:11.815
We would need to list all of
them like backdrop-filter,

162
00:13:11.815 --> 00:13:14.967
webkit-backdrop-filter.

163
00:13:14.967 --> 00:13:16.943
And then this works again but

164
00:13:16.943 --> 00:13:20.824
we cannot actually animate
dash dash backdrop filter.

165
00:13:20.824 --> 00:13:26.052
So, yes CSS variables enable you to
set multiple properties at once and

166
00:13:26.052 --> 00:13:29.640
this is really cool but
they do not interpolate.

