WEBVTT

1
00:00:00.000 --> 00:00:03.752
We looked at this example
a little bit earlier, and

2
00:00:03.752 --> 00:00:09.511
we did this to style the second blog post
with the secondary color throughout,

3
00:00:09.511 --> 00:00:11.796
instead of the primary color.

4
00:00:11.796 --> 00:00:16.656
However, this example
is slightly different.

5
00:00:16.656 --> 00:00:22.226
Notice that previously, the link color was
also getting the same color as the rest of

6
00:00:22.226 --> 00:00:27.570
the blog post, but here we actually wanted
to use the secondary color for links.

7
00:00:27.570 --> 00:00:33.455
So we have this rule that colors
links with the secondary color.

8
00:00:33.455 --> 00:00:38.017
And in the alternative styling,
in the blog posts have the outclass,

9
00:00:38.017 --> 00:00:41.884
we actually didn't want to
still get the secondary color,

10
00:00:41.884 --> 00:00:44.920
we wanted to get the other color,
the purple.

11
00:00:44.920 --> 00:00:49.969
So our first naive attempt
might be to go here and say,

12
00:00:49.969 --> 00:00:55.020
okay, we've set primary
color to secondary color,

13
00:00:55.020 --> 00:01:01.096
I'm also gonna set secondary
color to primary color, why not?

14
00:01:01.096 --> 00:01:07.485
And boom, everything broke,
we now get zero colors, we got nothing.

15
00:01:07.485 --> 00:01:09.349
What happened here?

16
00:01:12.183 --> 00:01:13.960
This is what happened here.

17
00:01:13.960 --> 00:01:18.191
This code introduced a cycle and
cycles make any

18
00:01:18.191 --> 00:01:23.074
variable in the cycle invalid
at computed value time.

19
00:01:23.074 --> 00:01:24.435
So let's go back to our CSS.

20
00:01:28.861 --> 00:01:32.849
What we're seeing here is that primary
color should be the same a secondary

21
00:01:32.849 --> 00:01:37.298
color, and secondary colors should be the
same as primary color, this is a cycle.

22
00:01:41.490 --> 00:01:46.451
The reason that a lot of things do not
work in CSS, a lot of proposals that

23
00:01:46.451 --> 00:01:51.266
people recommend for CSS cannot
actually work, because of cycles.

24
00:01:51.266 --> 00:01:55.511
Cycles are a big problem with
a reactive language like CSS.

25
00:01:55.511 --> 00:02:01.303
Because, like in JavaScript, you can say
this variable is set to this value and

26
00:02:01.303 --> 00:02:05.980
in the next step it's set to this
variable plus something else.

27
00:02:05.980 --> 00:02:11.533
In CSS, everything exists simultaneously,
there are no steps of computation.

28
00:02:11.533 --> 00:02:16.861
So both of these statements could
not really be through at once.

29
00:02:16.861 --> 00:02:20.048
So to make custom properties possible,

30
00:02:20.048 --> 00:02:23.891
we needed to find some way
to work around cycles,

31
00:02:23.891 --> 00:02:29.060
even if it means breaking your
entire code like we've done here.

32
00:02:31.337 --> 00:02:34.605
So what the browser does
when it sees a cycle, and

33
00:02:34.605 --> 00:02:38.209
this is a cycle of length two,
you said A to B and B to A.

34
00:02:38.209 --> 00:02:42.728
A cycle could also be of length one,
like you set a variable to itself.

35
00:02:42.728 --> 00:02:44.929
What the browser does is it notices,

36
00:02:44.929 --> 00:02:47.773
it keeps a dependency
graph behind the scenes.

37
00:02:47.773 --> 00:02:51.380
And when it sees that this
dependency graph has cycles,

38
00:02:51.380 --> 00:02:56.150
it just makes every variable in the cycle
invalid at computed value time.

39
00:02:56.150 --> 00:03:01.444
And notice that this only happened on
the elements that includes the cycle,

40
00:03:01.444 --> 00:03:03.356
not in anything around it.

41
00:03:03.356 --> 00:03:09.371
Like the first blog post is fine, the
heading uses primary color are just fine.

42
00:03:09.371 --> 00:03:13.684
It's only on the elements
that includes the cycle, and

43
00:03:13.684 --> 00:03:18.193
obviously, in whatever values
would be inherited down.

44
00:03:18.193 --> 00:03:20.812
So, what can we do here?

45
00:03:20.812 --> 00:03:25.199
How could we actually do
the swapping that we wanted?

46
00:03:25.199 --> 00:03:30.825
So in this case, actually,
Even if we go back to our initial code,

47
00:03:31.871 --> 00:03:35.729
This was a bit of a hack
if you think about it.

48
00:03:35.729 --> 00:03:41.576
What we really wanted was not to
change the primary color of our theme.

49
00:03:41.576 --> 00:03:49.568
What we wanted was to change the color of
that blog post to the secondary color.

50
00:03:49.568 --> 00:03:56.034
So what we really, really wanted was
to actually have a color property for

51
00:03:56.034 --> 00:04:01.268
the article and actually not set here but
on each blog post.

52
00:04:01.268 --> 00:04:05.833
So what we really wanted was
to have a color property for

53
00:04:05.833 --> 00:04:12.195
the article that is set to primary color
and then the entire style uses that.

54
00:04:13.296 --> 00:04:20.247
And then we wanted to have a link color
that is set to the secondary color.

55
00:04:24.954 --> 00:04:29.959
And then our entire theme,
let's change this to use

56
00:04:29.959 --> 00:04:35.655
the cooler property and
then this would use the link color.

57
00:04:40.354 --> 00:04:44.384
Then in alt,
we're not overriding the primary color,

58
00:04:44.384 --> 00:04:48.169
our primary color is the same
throughout our theme.

59
00:04:48.169 --> 00:04:54.248
Instead, we are setting the blog posts
color to be the secondary color and

60
00:04:54.248 --> 00:04:59.263
its link color to be the primary color,
and that works fine.

61
00:05:06.239 --> 00:05:10.133
So this is another thing
that CSS variables can't do.

62
00:05:10.133 --> 00:05:13.519
In SAS, you could have a depth variable,
for example, and

63
00:05:13.519 --> 00:05:15.075
then set it to itself + 1,

64
00:05:15.075 --> 00:05:19.910
you could increment it in the same way you
could increment variables in JavaScript.

65
00:05:19.910 --> 00:05:22.068
Because in SAS, just like JavaScript,

66
00:05:22.068 --> 00:05:26.128
there are steps of calculation with
variables, you could increment them,

67
00:05:26.128 --> 00:05:29.121
decrement them,
you can set them based on themselves.

68
00:05:29.121 --> 00:05:33.067
In CSS if you try to set a variable
based on itself, that's a cycle and

69
00:05:33.067 --> 00:05:34.164
it doesn't work.

70
00:05:34.164 --> 00:05:36.568
And it doesn't just fail,
it fails pretty badly.

71
00:05:39.720 --> 00:05:40.763
So what can we do?

72
00:05:43.335 --> 00:05:50.935
We can actually combine these two, we can
combine SAS variables and CSS variables so

73
00:05:50.935 --> 00:05:57.798
that we could have a SAS variable that
gives us the depth of the current rule.

74
00:05:57.798 --> 00:06:00.911
And since we are using
selectors to do this,

75
00:06:00.911 --> 00:06:04.962
this will work just fine when
the CSS is pre-processed.

76
00:06:04.962 --> 00:06:08.576
And we've used SAS code to
actually set a CSS variable.

77
00:06:08.576 --> 00:06:11.053
Notice the interpolation syntax here.

78
00:06:11.053 --> 00:06:16.193
If you want to set the CSS variable based
on a SAS variable in SAS, you need to

79
00:06:16.193 --> 00:06:21.841
use this interpolation syntax, if you
just use dollar depth, SAS wont touch it.

80
00:06:21.841 --> 00:06:24.362
And obviously, this is a small example.

81
00:06:24.362 --> 00:06:29.010
If you wanted to actually have
a depth variable that means something,

82
00:06:29.010 --> 00:06:32.239
you would have to do root
greater than asterisk,

83
00:06:32.239 --> 00:06:35.652
greater than,
asterisk can have a two, and so on.

84
00:06:35.652 --> 00:06:38.821
You probably need to use a loop.

85
00:06:38.821 --> 00:06:41.640
But that's the main idea and
you can combine them just fine.

