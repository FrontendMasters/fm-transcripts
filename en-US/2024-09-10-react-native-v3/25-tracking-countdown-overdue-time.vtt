WEBVTT

1
00:00:00.630 --> 00:00:05.748
&gt;&gt; Kadi Kraman: All right, so the next
thing is this little segment which renders

2
00:00:05.748 --> 00:00:12.370
this number and the seconds underneath and
actually created this component for us.

3
00:00:12.370 --> 00:00:16.940
So we could just copy it because it's
things that we've built already, so

4
00:00:16.940 --> 00:00:18.180
there's no point.

5
00:00:18.180 --> 00:00:20.025
I'm not going to type it live.

6
00:00:21.266 --> 00:00:25.546
But in your components if you
create a file called time segment.

7
00:00:27.056 --> 00:00:30.406
I called it time segment here,
but it should be time segment.

8
00:00:33.546 --> 00:00:40.586
So let's go to the components and
time segment.tx.

9
00:00:43.231 --> 00:00:46.769
&gt;&gt; Kadi Kraman: And
I will just copy this file,

10
00:00:51.428 --> 00:00:53.946
&gt;&gt; Kadi Kraman: So we've kind of a similar

11
00:00:53.946 --> 00:00:59.097
style as, so
we've used all of these things before,

12
00:00:59.097 --> 00:01:02.312
I think, so we have properties.

13
00:01:02.312 --> 00:01:06.722
This is the react thing where you can do
structure properties, it takes the number,

14
00:01:06.722 --> 00:01:09.152
the unit, so day, month, whatever.

15
00:01:09.152 --> 00:01:14.123
And I've also optionally
passed in a text style.

16
00:01:19.435 --> 00:01:23.325
&gt;&gt; Kadi Kraman: I passed in the text
style, so it would be flexible, so

17
00:01:23.325 --> 00:01:28.244
we could make the text white or
black depending on the UI that we need.

18
00:01:29.614 --> 00:01:35.041
So this is actually a handy thing that you
can use if you are using touch script,

19
00:01:35.041 --> 00:01:38.002
and I hope you can use
this text style prop,

20
00:01:38.002 --> 00:01:42.624
which is exported for type,
which is exported from React Native.

21
00:01:42.624 --> 00:01:45.888
So this guarantees that you
are not going to pass nonsense

22
00:01:45.888 --> 00:01:48.924
in there that isn't actually a style.

23
00:01:48.924 --> 00:01:56.374
So we need to distinguish between our
overdue state and our not overdue state.

24
00:01:57.404 --> 00:02:01.308
So let's start by creating a type,
for what we want to store.

25
00:02:01.308 --> 00:02:06.104
So we want to store a countdown status,
and

26
00:02:06.104 --> 00:02:10.928
we want to know whether it's overdue.

27
00:02:10.928 --> 00:02:16.744
So whether we're entering a big old red
screen or not, this will be a boolean.

28
00:02:20.494 --> 00:02:25.567
&gt;&gt; Kadi Kraman: We also want to
have a distance, and we're going

29
00:02:25.567 --> 00:02:32.393
to use a utility function from
date functions to calculate this.

30
00:02:32.393 --> 00:02:36.247
This is going to be the return
type of interval to duration.

31
00:02:36.247 --> 00:02:40.495
This is probably the most complicated

32
00:02:40.495 --> 00:02:45.407
TypeScript thing we're going to show, but

33
00:02:45.407 --> 00:02:52.043
you can use ReturnType and
typeof, interval to duration,

34
00:02:52.043 --> 00:02:57.103
which is imported from date function.

35
00:02:57.103 --> 00:03:02.135
And this is handy because I don't need so
interval to duration, so it has a return

36
00:03:02.135 --> 00:03:06.797
type here it says a ReturnType of duration
so if we go in here so this is what it

37
00:03:06.797 --> 00:03:11.607
looks like so it will have years, so
it will be an object that will have years,

38
00:03:11.607 --> 00:03:16.290
months, weeks, days, hours, minutes,
seconds as optional numbers.

39
00:03:16.290 --> 00:03:20.548
To derive the numbers or zero, so

40
00:03:20.548 --> 00:03:25.262
I could actually do duration here and

41
00:03:25.262 --> 00:03:29.226
import it from date function.

42
00:03:29.226 --> 00:03:30.746
Maybe that would be nicer.

43
00:03:32.606 --> 00:03:33.696
Well, now you know.

44
00:03:33.696 --> 00:03:37.662
So if you need, so this will give you
the return type of this function that

45
00:03:37.662 --> 00:03:41.564
I've called, but actually now that
I've gone all the way through it,

46
00:03:41.564 --> 00:03:45.555
I think it looks a little bit clearer
if I actually just do duration here.

47
00:03:50.521 --> 00:03:51.539
&gt;&gt; Kadi Kraman: All right, and

48
00:03:51.539 --> 00:03:56.397
then let's do a useState to store
our current countdown status.

49
00:03:56.397 --> 00:04:03.860
So let's do a const, so
this will be status, and set status.

50
00:04:05.900 --> 00:04:10.056
I'll do a useState and
if you wanna tell the useState, so

51
00:04:10.056 --> 00:04:12.230
this is a touch script thing.

52
00:04:12.230 --> 00:04:17.484
If you wanna tell the useState
what type it's going to be,

53
00:04:17.484 --> 00:04:23.281
use these angle brackets and
you can put the type in here.

54
00:04:23.281 --> 00:04:27.443
Saying that everything posted
has to be of that type and

55
00:04:27.443 --> 00:04:32.611
we're going to give it a value
which should be not overdue.

56
00:04:34.929 --> 00:04:37.877
&gt;&gt; Kadi Kraman: And
let's do a distance of an empty object, so

57
00:04:37.877 --> 00:04:39.717
everything will be null.

58
00:04:39.717 --> 00:04:42.391
So let's also do a timestamp.

59
00:04:42.391 --> 00:04:48.381
So this is going to be dynamic eventually.

60
00:04:48.381 --> 00:04:53.654
But let's start with a timestamp,

61
00:04:53.654 --> 00:04:57.169
so const, timestamp,

62
00:04:57.169 --> 00:05:02.441
timestamp, which is date dot now,

63
00:05:02.441 --> 00:05:07.713
plus ten times 1000, okay, so

64
00:05:07.713 --> 00:05:14.075
this is basically our due date timestamp.

65
00:05:14.075 --> 00:05:18.447
So this will be for our testing purposes,
so I made it quite small so

66
00:05:18.447 --> 00:05:21.881
I made it ten seconds,
this is ten seconds from now,

67
00:05:21.881 --> 00:05:26.592
and I've hard coded it so it will be
ten seconds from when I load the app.

68
00:05:27.902 --> 00:05:32.342
And we're gonna use this as our
deadline date for testing purposes.

69
00:05:32.342 --> 00:05:36.091
So in our useEffect,
when we set our interval we want to

70
00:05:36.091 --> 00:05:41.674
set the initial value of this
countdown status, so this thing here.

71
00:05:41.674 --> 00:05:46.749
So for this we want to check whether
the thing that we are checking for

72
00:05:46.749 --> 00:05:48.734
is overdue or not.

73
00:05:48.734 --> 00:05:54.064
So whether this timestamp is
in the future or in the past.

74
00:05:54.064 --> 00:05:56.284
So const is overdue.

75
00:05:59.144 --> 00:06:01.800
And this is where the date
functions comes in.

76
00:06:01.800 --> 00:06:07.299
So we can use a utility function from
here called isBefore, and basically

77
00:06:07.299 --> 00:06:12.816
this tells us whether the first date
we passed in is before the second one.

78
00:06:12.816 --> 00:06:19.284
So timestamp and date dot now.

79
00:06:26.777 --> 00:06:31.461
&gt;&gt; Kadi Kraman: I've forgot to actually
call the function, there we go.

80
00:06:31.461 --> 00:06:36.336
So this will return a Boolean, and
now we can also, we can use another

81
00:06:36.336 --> 00:06:41.484
utility function from data functions,
which is interval to duration.

82
00:06:41.484 --> 00:06:44.999
So this is what we're using
this duration from, so

83
00:06:44.999 --> 00:06:49.084
that was why I was using
the return type of the function.

84
00:06:49.084 --> 00:06:54.275
But if we do interva lto duration,

85
00:06:54.275 --> 00:06:58.216
so const distance [COUGH].

86
00:06:58.216 --> 00:07:02.836
Interval to duration and
the duration that we're calculating it

87
00:07:02.836 --> 00:07:07.637
actually depends on whether
the thing was overdue or not.

88
00:07:07.637 --> 00:07:13.705
So let's do if it is overdue,
&gt;&gt; Kadi Kraman: Then

89
00:07:13.705 --> 00:07:16.727
we need to pass in a start and the end.

90
00:07:16.727 --> 00:07:21.670
So start from the timestamp and end,

91
00:07:21.670 --> 00:07:26.461
so the distance needs to be linear.

92
00:07:26.461 --> 00:07:30.949
So if current time is after the timestamp,

93
00:07:30.949 --> 00:07:37.076
then we start from this timestamp and
we end at date.now.

94
00:07:37.076 --> 00:07:43.188
And otherwise we do the converse,

95
00:07:43.188 --> 00:07:48.035
so we start at date.now and

96
00:07:48.035 --> 00:07:52.474
we end at the timestamp.

97
00:07:56.597 --> 00:07:59.245
&gt;&gt; Kadi Kraman: And we'll call setStatus.

98
00:08:02.807 --> 00:08:06.537
So is overdue, and the distance.

99
00:08:07.947 --> 00:08:11.851
Lovely, now we can get rid of our
seconds elapsed code as well,

100
00:08:11.851 --> 00:08:14.733
cuz we're not going to
be using that anymore.

101
00:08:20.654 --> 00:08:24.007
&gt;&gt; Kadi Kraman: Okay, so
if I just console log the status,

102
00:08:24.007 --> 00:08:28.391
just to make sure that
everything is working.

103
00:08:28.391 --> 00:08:32.641
Console log programming is where it's at,
there we go.

104
00:08:32.641 --> 00:08:37.111
So it's ticking away and there we go.

105
00:08:37.111 --> 00:08:41.181
So I got to one second and
it's saying that it is overdue and

106
00:08:41.181 --> 00:08:45.251
now it overdue switch to true and
now it is ticking away, so

107
00:08:45.251 --> 00:08:48.092
our UI will update every second as well.

108
00:08:48.092 --> 00:08:49.882
We have the data for it.

109
00:08:49.882 --> 00:08:52.992
We need to build the actual UI to update.

