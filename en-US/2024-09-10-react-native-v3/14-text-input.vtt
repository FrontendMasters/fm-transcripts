WEBVTT

1
00:00:00.320 --> 00:00:04.565
&gt;&gt; Kadi Kraman: So where we left off,
we have our mobile app with

2
00:00:04.565 --> 00:00:08.504
a three-tab layout and our shopping list.

3
00:00:08.504 --> 00:00:13.040
We have our counter screen,
with a nested stack navigator.

4
00:00:14.920 --> 00:00:19.858
And now, we're going to work on
finishing up our shopping list app.

5
00:00:19.858 --> 00:00:25.347
So, so far, we have three shopping list
items that are displayed in a list and

6
00:00:25.347 --> 00:00:26.618
they are static.

7
00:00:26.618 --> 00:00:31.379
So obviously,
we would like to have the user type in

8
00:00:31.379 --> 00:00:35.046
ShoppingListItems with a TextInput.

9
00:00:35.046 --> 00:00:39.479
So unlike the web, there is no
form component in React Native,

10
00:00:39.479 --> 00:00:42.504
all the inputs are handled individually.

11
00:00:44.434 --> 00:00:48.928
So the input that we use to
receive text from the user's

12
00:00:48.928 --> 00:00:51.675
keyboard is called a TextInput.

13
00:00:51.675 --> 00:00:58.324
So we'll go to our index screen,
we can create a TextInput.

14
00:00:58.324 --> 00:01:03.942
And you'll notice that
nothing whatsoever happened.

15
00:01:03.942 --> 00:01:07.151
Well, it looks like, and
it's because TextInput, by default,

16
00:01:07.151 --> 00:01:08.828
doesn't have any styling at all.

17
00:01:09.878 --> 00:01:12.581
So in order for it to be visible,
we want to add some styling.

18
00:01:12.581 --> 00:01:19.268
So let's add a borderColor,
let's say style.

19
00:01:19.268 --> 00:01:24.382
Let's pull this into a style component,
so let's do styles.textInput.

20
00:01:27.394 --> 00:01:31.404
&gt;&gt; Kadi Kraman: And here,
let's give it a borderColor.

21
00:01:33.244 --> 00:01:36.137
Let's do theme.colors,

22
00:01:36.137 --> 00:01:41.928
it says import theme.color,
let's do a LightGray.

23
00:01:43.900 --> 00:01:46.051
&gt;&gt; Kadi Kraman: And again,
nothing's happened because we also need

24
00:01:46.051 --> 00:01:47.112
the borderWidth.

25
00:01:47.112 --> 00:01:52.143
So let's do a borderWidth of 2.

26
00:01:52.143 --> 00:01:53.023
There you go.

27
00:01:53.023 --> 00:01:56.075
And now, we get our little TextInput.

28
00:01:56.075 --> 00:01:58.890
So let's also give it some space.

29
00:01:58.890 --> 00:02:01.439
So let's do padding: 12.

30
00:02:01.439 --> 00:02:06.110
So padding will give space
inside the component.

31
00:02:07.560 --> 00:02:13.006
And let's do marginHorizontal:

32
00:02:13.006 --> 00:02:16.787
12,
&gt;&gt; Kadi Kraman: So

33
00:02:16.787 --> 00:02:20.272
it's not pressed against the corners.

34
00:02:21.403 --> 00:02:26.489
And let's do a marginBottom: 12,
&gt;&gt; Kadi Kraman: So

35
00:02:26.489 --> 00:02:29.603
it's not next to this list.

36
00:02:31.993 --> 00:02:35.950
And let's do a fontSize of 18.

37
00:02:40.677 --> 00:02:44.108
&gt;&gt; Kadi Kraman: And like a borderRadius,
so let's do a borderRadius,

38
00:02:47.505 --> 00:02:54.293
&gt;&gt; Kadi Kraman: borderRadius of 50.

39
00:02:54.293 --> 00:02:57.548
Make them really rounded borders.

40
00:02:57.548 --> 00:03:02.831
All right, I'm gonna also get
rid of this justifyContent and

41
00:03:02.831 --> 00:03:05.989
move things to the top of the screen.

42
00:03:05.989 --> 00:03:08.969
Now, in a TextInput,
we can add a placeholder.

43
00:03:08.969 --> 00:03:13.437
So let's do a placeholder, so e.g Coffee.

44
00:03:16.372 --> 00:03:17.374
&gt;&gt; Kadi Kraman: There you go.

45
00:03:17.374 --> 00:03:25.059
So the way that the keyboard gets opened
is actually if you focus on a TextInput,

46
00:03:25.059 --> 00:03:29.055
the keyboard will automatically open.

47
00:03:29.055 --> 00:03:32.560
I'm on a simulator here,
so I need to do this.

48
00:03:32.560 --> 00:03:39.484
But basically, if I now reload,
hopefully, there we go.

49
00:03:39.484 --> 00:03:43.900
So by focusing on the TextInput,
the keyboard opens.

50
00:03:43.900 --> 00:03:45.000
So that's an interesting thing.

51
00:03:45.000 --> 00:03:52.556
So the keyboard is actually controlled
in a lot of ways by the TextInput.

52
00:03:52.556 --> 00:03:56.560
And I think we need some padding here so
it's not against the screen.

53
00:03:56.560 --> 00:04:02.879
So just in my container,
I'm gonna add a paddingTop of 12.

54
00:04:02.879 --> 00:04:09.820
Lovely, let's do a controlled input,
so we're gonna use a useState hook.

55
00:04:09.820 --> 00:04:11.896
So this is from React.

56
00:04:13.683 --> 00:04:20.654
&gt;&gt; Kadi Kraman: So it will be a useState,
and it's an import from react.

57
00:04:20.654 --> 00:04:25.187
And then a useState hook allows
you to store little values very

58
00:04:25.187 --> 00:04:28.598
conveniently inside your react components.

59
00:04:28.598 --> 00:04:31.359
And it returns an array of two items, and

60
00:04:31.359 --> 00:04:35.200
you can name these array
items whatever you want.

61
00:04:35.200 --> 00:04:39.100
The first item will be the value
that you are tracking.

62
00:04:39.100 --> 00:04:43.889
So in our case, it will be the value
that is typed into the TextInput.

63
00:04:43.889 --> 00:04:47.677
And then the second array
item will be a function

64
00:04:47.677 --> 00:04:50.716
that allows you to update this value.

65
00:04:50.716 --> 00:04:55.649
So usually, you would call it the thing
and then set thing or update thing.

66
00:04:55.649 --> 00:04:58.218
So I'm gonna call it value and
then setValue.

67
00:05:01.327 --> 00:05:03.258
&gt;&gt; Kadi Kraman: And
then let's make it into,

68
00:05:03.258 --> 00:05:06.974
I'm gonna say that the default
value of an empty string.

69
00:05:08.614 --> 00:05:10.298
And then in our TextInput,

70
00:05:14.444 --> 00:05:19.120
&gt;&gt; Kadi Kraman: We'll do value= value.

71
00:05:19.120 --> 00:05:23.757
And on the web, you would use
onChange where you get an event.

72
00:05:23.757 --> 00:05:27.157
So there is an onChange here as well.

73
00:05:27.157 --> 00:05:32.445
But actually, more conveniently,
you would usually use onChangeText.

74
00:05:32.445 --> 00:05:37.011
Which as you can see from here, rather
than giving you a native synthetic event,

75
00:05:37.011 --> 00:05:41.040
where you have to extract a value,
it actually just gives you the text,

76
00:05:41.040 --> 00:05:44.376
which is, most of the time, what you need.

77
00:05:44.376 --> 00:05:49.182
So let's do onChangeText, and
you can call it call setValue.

78
00:05:49.182 --> 00:05:54.555
So this will be a value and
then recall setValue with the value.

79
00:05:54.555 --> 00:06:00.492
But as mentioned earlier, because
the argument here and here are the same,

80
00:06:00.492 --> 00:06:05.702
we can just use this convenience and
pass setValue directly here.

81
00:06:08.240 --> 00:06:13.169
&gt;&gt; Kadi Kraman: So
now I can do some typing.

82
00:06:13.169 --> 00:06:18.372
So I mentioned that the keyboard
is controlled by the TextInput,

83
00:06:18.372 --> 00:06:24.995
so there's some props here that guide
you what the keyboard should look like.

84
00:06:24.995 --> 00:06:28.279
So for example, the keyboardType, so
we're going to just use some text.

85
00:06:28.279 --> 00:06:32.496
But for example,
if you wanted users to enter some numbers,

86
00:06:32.496 --> 00:06:34.986
you could have a numeric keyboard.

87
00:06:34.986 --> 00:06:39.943
Or if it's an email address,
you could have an email as keyboard, so

88
00:06:39.943 --> 00:06:43.886
we'll have the at symbol
in a convenient place, etc.

89
00:06:45.806 --> 00:06:51.271
You can also have autoCapitalize,
autoComplete, autoCorrect.

90
00:06:51.271 --> 00:06:56.080
So there's all kinds of properties
here that you can use to make it more

91
00:06:56.080 --> 00:07:00.892
suitable for the thing that
you're collecting inputs for.

92
00:07:00.892 --> 00:07:06.493
So both text and numbers can be
collected using this TextInput.

93
00:07:13.862 --> 00:07:17.175
&gt;&gt; Kadi Kraman: And
the other thing we want

94
00:07:17.175 --> 00:07:22.002
to do is if you use the returnKeyType.

95
00:07:23.853 --> 00:07:29.481
&gt;&gt; Kadi Kraman: So this defines what this
button on the bottom right will look like.

96
00:07:29.481 --> 00:07:33.884
So if we do returnKeyType done,
it actually changes.

97
00:07:33.884 --> 00:07:36.333
So this will be a highlighted button.

98
00:07:36.333 --> 00:07:41.861
And you'll notice that I didn't create a
submit button next to this TextInput here.

99
00:07:41.861 --> 00:07:49.609
And it's because we can submit when
the user presses this done button.

100
00:07:49.609 --> 00:07:54.768
And the way we do that is we use
a callback, it's called onSubmitEditing.

101
00:07:56.838 --> 00:08:02.338
So let's do a console.log,
&gt;&gt; Kadi Kraman: Submitted.

102
00:08:11.482 --> 00:08:16.477
&gt;&gt; Kadi Kraman: Oops,
&gt;&gt; Kadi Kraman: So now if I call done,

103
00:08:16.477 --> 00:08:19.773
you can see that it actually logs.

104
00:08:19.773 --> 00:08:22.476
It calls this callback when
the done button is pressed.

105
00:08:22.476 --> 00:08:28.984
Okay, and finally, let's hook up
this list to use another useState so

106
00:08:28.984 --> 00:08:35.473
the shopping list is actually
an array in our device memory.

107
00:08:35.473 --> 00:08:38.937
So this, let's start by creating a type.

108
00:08:38.937 --> 00:08:44.875
So this is a ShoppingListItemType.

109
00:08:44.875 --> 00:08:48.630
This is a TypeScript type, it will define
what our shopping list will look like.

110
00:08:48.630 --> 00:08:53.199
So we want an id, which is a string, and

111
00:08:53.199 --> 00:08:56.942
a name, which is also a string.

112
00:08:59.052 --> 00:09:05.246
&gt;&gt; Kadi Kraman: And for now,
let's also do an initialList,

113
00:09:05.246 --> 00:09:11.114
which you can do a ShoppingListItemType.

114
00:09:11.114 --> 00:09:13.668
So this is an array of those.

115
00:09:16.731 --> 00:09:18.634
&gt;&gt; Kadi Kraman: Oops, it's a colon.

116
00:09:18.634 --> 00:09:23.398
And this will be an array of items, so

117
00:09:23.398 --> 00:09:29.401
I can do id, there's 1,
and name is Coffee.

118
00:09:35.321 --> 00:09:39.368
&gt;&gt; Kadi Kraman: And
we also had some Tea and Milk.

119
00:09:42.429 --> 00:09:44.576
&gt;&gt; Kadi Kraman: So
the same way that we store this value,

120
00:09:44.576 --> 00:09:46.986
we can store the whole shopping list.

121
00:09:46.986 --> 00:09:51.436
So use another useState hook, and

122
00:09:51.436 --> 00:09:55.426
we'll do a shoppingList, and

123
00:09:55.426 --> 00:10:00.037
setShoppingList, and useState.

124
00:10:00.037 --> 00:10:05.836
And this will be an array of
these ShoppingListItemTypes.

125
00:10:05.836 --> 00:10:09.930
And we're going to give it an initial
value of this initialList.

126
00:10:13.304 --> 00:10:18.221
&gt;&gt; Kadi Kraman: And now, instead of having
these items here defined individually,

127
00:10:18.221 --> 00:10:20.208
we can map over them.

128
00:10:20.208 --> 00:10:23.153
So we'll do a shoppingList.map.

129
00:10:26.012 --> 00:10:30.212
&gt;&gt; Kadi Kraman: And this will be an item,
and for each of these,

130
00:10:30.212 --> 00:10:34.317
we will render one of
the ShoppingListItems.

131
00:10:34.317 --> 00:10:39.693
And the ShoppingListItem
name is gonna be item.name.

132
00:10:39.693 --> 00:10:45.012
I will also want to do a key,
which will just be the item.id.

133
00:10:48.576 --> 00:10:55.334
&gt;&gt; Kadi Kraman: And finally,
let's hook up this onSubmitEditing.

134
00:10:55.334 --> 00:11:01.333
So,
&gt;&gt; Kadi Kraman: Let's

135
00:11:01.333 --> 00:11:06.098
do another function here
called handleSubmit.

136
00:11:09.571 --> 00:11:11.263
&gt;&gt; Kadi Kraman: And
this will be an arrow function, and

137
00:11:11.263 --> 00:11:14.251
we'll just check that there is
something that the user has entered.

138
00:11:14.251 --> 00:11:19.127
So we'll check that the value is
not an empty string, so if (value).

139
00:11:19.127 --> 00:11:24.112
Then we want to add this new
ShoppingListItem at the top of our

140
00:11:24.112 --> 00:11:26.278
existing shoppingList.

141
00:11:26.278 --> 00:11:29.546
So we can use this
setShoppingList function,

142
00:11:29.546 --> 00:11:32.904
which was in a useState to update it.

143
00:11:32.904 --> 00:11:37.320
So first, we'll create a newShoppingList.

144
00:11:37.320 --> 00:11:43.887
So let's do const newShoppingLiist,
and this is gonna be an array,

145
00:11:43.887 --> 00:11:49.905
and we're going to spread
the existing shoppingList.

146
00:11:49.905 --> 00:11:52.694
So we'll need to keep whatever we had, and

147
00:11:52.694 --> 00:11:57.579
we'll add the new item that the user has
just created to the top of the list.

148
00:11:57.579 --> 00:12:00.907
So we need two things here,
we need the id and the name.

149
00:12:00.907 --> 00:12:04.767
So for the id, so
if you needed unique ids,

150
00:12:04.767 --> 00:12:09.710
there's UUID library or
there's NanoID libraries.

151
00:12:09.710 --> 00:12:11.314
So there's ways to create unique ids.

152
00:12:11.314 --> 00:12:17.517
In our cases, the ids just need
to be unique within our phone.

153
00:12:17.517 --> 00:12:20.141
So I'm just going to use the timestamp.

154
00:12:20.141 --> 00:12:26.022
So let's do new Date and do toISOString.

155
00:12:26.022 --> 00:12:29.078
So this will be unique
within a millisecond.

156
00:12:29.078 --> 00:12:32.653
So unless you're adding shopping
items close to the millisecond apart,

157
00:12:32.653 --> 00:12:34.741
then this will be unique.

158
00:12:34.741 --> 00:12:40.884
And let's do name, will be the value.

159
00:12:40.884 --> 00:12:45.205
So now, we have our newShoppingList, and

160
00:12:45.205 --> 00:12:50.974
let's set the shoppingList
to be our newShoppingList.

161
00:12:50.974 --> 00:12:54.453
And finally,
we want to also clear the TextInput.

162
00:12:54.453 --> 00:12:57.899
So let setValue back to an empty string.

163
00:12:59.909 --> 00:13:02.697
&gt;&gt; Kadi Kraman: And now that we
have our handleSubmit function,

164
00:13:02.697 --> 00:13:04.805
we want to call it onSubmitEditing.

165
00:13:07.343 --> 00:13:11.995
&gt;&gt; Kadi Kraman: So hopefully,
what else do I need?

166
00:13:11.995 --> 00:13:13.177
Sugar.

167
00:13:18.240 --> 00:13:23.027
&gt;&gt; Kadi Kraman: Lovely, and well,
I'm going to type on my keyboard.

168
00:13:23.027 --> 00:13:25.843
So as soon as I type,
this is just a simulator thing.

169
00:13:25.843 --> 00:13:30.271
But as soon as I type,
the on-screen keyboard disappears, but

170
00:13:30.271 --> 00:13:31.897
it will work as well.

171
00:13:31.897 --> 00:13:35.879
So the only thing is that onSubmitEditing,
if you're using this on a simulator,

172
00:13:35.879 --> 00:13:38.487
onSubmitEditing will trigger
when you press Enter.

173
00:13:38.487 --> 00:13:44.580
So I can add things as well.

