WEBVTT

1
00:00:00.000 --> 00:00:01.810
&gt;&gt; Kadi Kraman: Next up,
let's talk about components.

2
00:00:01.810 --> 00:00:07.703
So, components are a React concept, and
that's also a React Native concept.

3
00:00:07.703 --> 00:00:11.980
But basically,
if we were to keep building our app and

4
00:00:11.980 --> 00:00:15.307
we put everything inside this app.tsx,

5
00:00:15.307 --> 00:00:20.070
this file is going to get massive and
very difficult to use.

6
00:00:20.070 --> 00:00:25.095
So with React, we can have components

7
00:00:25.095 --> 00:00:30.126
to create our app as a modular entity.

8
00:00:30.126 --> 00:00:33.599
So the common thing to do
is we create a components

9
00:00:33.599 --> 00:00:37.237
folder,
&gt;&gt; Kadi Kraman: And

10
00:00:37.237 --> 00:00:39.113
you can have components in here.

11
00:00:39.113 --> 00:00:47.841
So, let's call this ShoppingListItem,
&gt;&gt; Kadi Kraman: .tsx.

12
00:00:47.841 --> 00:00:52.305
[COUGH]
&gt;&gt; Kadi Kraman: So right now, so

13
00:00:52.305 --> 00:00:54.870
you need to export a component from here.

14
00:00:54.870 --> 00:00:56.472
You could do export default.

15
00:00:56.472 --> 00:01:02.432
I think the modern thing to do these days
is to do an export, I do export const.

16
00:01:02.432 --> 00:01:05.941
But I said I'm using functions for
components, so

17
00:01:05.941 --> 00:01:09.377
let's do an export
function ShoppingListItem.

18
00:01:11.477 --> 00:01:14.820
&gt;&gt; Kadi Kraman: So
you name it the same as the file.

19
00:01:14.820 --> 00:01:19.060
And let's return,
will return null for now.

20
00:01:19.060 --> 00:01:23.973
And what we want to do is we
want to pull this item that we

21
00:01:23.973 --> 00:01:28.474
created into our
ShoppingListItem component.

22
00:01:28.474 --> 00:01:33.331
So let's copy all of this,
&gt;&gt; Kadi Kraman: And

23
00:01:33.331 --> 00:01:36.407
return it from our ShoppingListItem.

24
00:01:36.407 --> 00:01:39.047
Obviously, I'm getting
lots of ESLint errors.

25
00:01:39.047 --> 00:01:42.194
Reason why you want ESLint, it will
tell you that things are not right,

26
00:01:42.194 --> 00:01:43.932
saying that things aren't imported.

27
00:01:43.932 --> 00:01:47.416
So I'm gonna import
View from react-native,

28
00:01:47.416 --> 00:01:52.479
Text from react-native,
TouchableOpacity from react-native.

29
00:01:58.075 --> 00:01:59.017
&gt;&gt; Kadi Kraman: There we go.

30
00:01:59.017 --> 00:02:05.092
And we also need our styles, so let me
just copy this whole styles object here.

31
00:02:07.882 --> 00:02:11.207
&gt;&gt; Kadi Kraman: There we go,
we need StyleSheet.

32
00:02:16.564 --> 00:02:19.969
&gt;&gt; Kadi Kraman: We need to move
our handleDelete function.

33
00:02:23.943 --> 00:02:27.964
&gt;&gt; Kadi Kraman: And this means we also
need the Alert from react-native.

34
00:02:27.964 --> 00:02:31.307
There we go.

35
00:02:31.307 --> 00:02:38.606
And now, instead of having this item here,

36
00:02:38.606 --> 00:02:46.116
we can actually import, ShoppinListItem.

37
00:02:46.116 --> 00:02:47.223
There we go.

38
00:02:50.415 --> 00:02:52.332
&gt;&gt; Kadi Kraman: I've
forgotten to import theme.

39
00:02:52.332 --> 00:02:52.983
There we go.

40
00:02:52.983 --> 00:02:55.696
Let's import theme as well.

41
00:02:55.696 --> 00:02:59.856
So wait from here, okay?

42
00:02:59.856 --> 00:03:04.385
So, now I can have multiple of my
ShoppingListItem and this is obviously

43
00:03:04.385 --> 00:03:08.780
a little bit useless, because I have
all the items say the same thing.

44
00:03:08.780 --> 00:03:15.580
So we want from this app.tsx to say what
the ShoppingListItems should be called.

45
00:03:15.580 --> 00:03:19.442
So to do that,
we can pass it props or properties.

46
00:03:19.442 --> 00:03:23.121
And props are passed in, well,
let's start it from here.

47
00:03:23.121 --> 00:03:24.720
So, we'll pass in from here.

48
00:03:24.720 --> 00:03:29.647
So let's say this is,
&gt;&gt; Kadi Kraman: Gonna

49
00:03:29.647 --> 00:03:32.696
make sure our name is the same thing.

50
00:03:32.696 --> 00:03:37.167
The name, let's call it coffee.

51
00:03:37.167 --> 00:03:38.798
What else do we need?

52
00:03:38.798 --> 00:03:45.379
Some tea and some sugar.

53
00:03:45.379 --> 00:03:50.356
Okay, so this gives me a squiggly, because
it's saying that there is no proper code

54
00:03:50.356 --> 00:03:54.089
name, and that's because we
haven't defined them here yet.

55
00:03:54.089 --> 00:03:58.873
So these get passed in as an object so
we can destructure

56
00:03:58.873 --> 00:04:03.871
them as the function arguments,
which is really handy.

57
00:04:03.871 --> 00:04:06.810
And because we are using Typescript,
we can type them.

58
00:04:06.810 --> 00:04:13.603
This is again a convention just
to do a type called props.

59
00:04:13.603 --> 00:04:17.029
And this defines what the properties are,
so let's do name.

60
00:04:17.029 --> 00:04:21.339
And this name is a string.

61
00:04:21.339 --> 00:04:25.086
Those that were maybe an hour in, this is
the first sort of Typescript we've done,

62
00:04:25.086 --> 00:04:27.293
so this is not TypeScript heavy,
don't worry.

63
00:04:27.293 --> 00:04:32.291
But I will mention one thing that
if you want this to be optional, so

64
00:04:32.291 --> 00:04:36.860
right now, if I don't pass this in,
I'm getting an error.

65
00:04:36.860 --> 00:04:40.347
If I wanted this to be optional,
I would do a question mark, so

66
00:04:40.347 --> 00:04:42.167
this allows me to not pass it in.

67
00:04:42.167 --> 00:04:47.009
In our case, we want to make sure
that people always pass in a name, so

68
00:04:47.009 --> 00:04:50.109
we're gonna make it a mandatory argument.

69
00:04:50.109 --> 00:04:55.544
And in our text, instead of Coffee,
let's use this property.

70
00:04:55.544 --> 00:05:02.206
So if you want to render any text in line,
you put it into these curlies,

71
00:05:02.206 --> 00:05:07.106
and then they renders
the string that you passed in.

72
00:05:07.106 --> 00:05:09.270
And actually now that we have our name,

73
00:05:09.270 --> 00:05:13.468
we can update our Alert to say instead
of are you sure you want to delete this,

74
00:05:13.468 --> 00:05:16.365
you could say the name of
the item you want to delete.

75
00:05:16.365 --> 00:05:18.111
So, I wanna use backticks.

76
00:05:18.111 --> 00:05:23.678
So with backticks, you can embed arbitrary
strings or numbers into your text.

77
00:05:23.678 --> 00:05:25.850
So we can see,
are you sure you want to delete?

78
00:05:25.850 --> 00:05:30.091
So do your dollar sign,
some squigglies, and name.

79
00:05:30.091 --> 00:05:32.491
So I guess they will say,
are you sure you want to delete T?

80
00:05:36.312 --> 00:05:38.160
&gt;&gt; Kadi Kraman: And
the last thing, this is optional.

81
00:05:38.160 --> 00:05:39.182
We're going to talk about ESLint again.

82
00:05:39.182 --> 00:05:45.506
But we've done some refactoring and
we've done some copying of styles.

83
00:05:45.506 --> 00:05:49.891
But we have styles here that we're not
using, and we have styles here that we're

84
00:05:49.891 --> 00:05:54.039
not using and it's really difficult to
see which ones we want to keep or not.

85
00:05:54.039 --> 00:05:55.512
And I can't be asked to
go through all of these.

86
00:05:55.512 --> 00:06:00.756
So this is a really handy ESLint plugin.

87
00:06:00.756 --> 00:06:05.063
It's a React Native ESLint plugin, and

88
00:06:05.063 --> 00:06:10.384
it has a couple of different
properties here, but

89
00:06:10.384 --> 00:06:16.990
the one that I'm interested
about is the no-unused styles.

90
00:06:16.990 --> 00:06:19.977
So let's install
eslint-plugin-react-native.

91
00:06:26.842 --> 00:06:31.979
&gt;&gt; Kadi Kraman: And this gives us this
react-native plugin in our ESLint RC.

92
00:06:31.979 --> 00:06:34.890
So let's go to ESLint RC.

93
00:06:34.890 --> 00:06:37.556
So whenever you install a plugin,
it will show up here.

94
00:06:37.556 --> 00:06:42.724
So we installed the react-native plugin,
so we'll go into the plugins array,

95
00:06:42.724 --> 00:06:46.375
and then this allows us to use
the rules from that plugin.

96
00:06:46.375 --> 00:06:50.281
ESLint is wild.

97
00:06:50.281 --> 00:06:53.456
So, there's a bunch of rules, but
I'm just gonna opt into this one.

98
00:06:53.456 --> 00:06:58.197
And what this gives me, is now when I go
back, it actually redlines all the styles

99
00:06:58.197 --> 00:07:02.126
that I'm not using in this file,
because I've copied them over.

100
00:07:02.126 --> 00:07:07.608
So I can safely delete them,
&gt;&gt; Kadi Kraman: And

101
00:07:07.608 --> 00:07:12.899
also delete these unused imports.

102
00:07:16.468 --> 00:07:19.137
&gt;&gt; Kadi Kraman: And the same here, I think
I copied the whole styles object, but

103
00:07:19.137 --> 00:07:20.434
we don't need the container.

104
00:07:20.434 --> 00:07:26.783
The StyleSheet.create,
could you cover again what that does?

105
00:07:26.783 --> 00:07:31.495
So what StyleSheet.create does,
it doesn't do a lot, [LAUGH] actually.

106
00:07:31.495 --> 00:07:37.938
So in production,
all this does is it creates an object.

107
00:07:37.938 --> 00:07:41.153
If you look at the React Native as open
source, also if you look at the code for

108
00:07:41.153 --> 00:07:44.469
React Native in production, it actually
just creates an object of styles, so

109
00:07:44.469 --> 00:07:45.595
it doesn't do anything.

110
00:07:45.595 --> 00:07:49.439
In Dev, it does some checking to make
sure that the things that you pass in

111
00:07:49.439 --> 00:07:50.078
are valid.

112
00:07:50.078 --> 00:07:51.423
There's more validation for that.

113
00:07:51.423 --> 00:07:55.087
I think it came from the earlier days
of React Native, where there was more

114
00:07:55.087 --> 00:07:59.463
validation needed, because the Styles got
passed directly into Native Components and

115
00:07:59.463 --> 00:08:02.323
if you passed stars didn't exist,
things would crash.

116
00:08:02.323 --> 00:08:06.670
Nowadays, there's more
production around it, but yeah,

117
00:08:06.670 --> 00:08:11.611
it's kind of a leftover, so
you could actually just do this kind of,

118
00:08:11.611 --> 00:08:15.894
and it would work,
although TypeScript would yell at you.

119
00:08:15.894 --> 00:08:21.039
So, I think the idea was that
eventually StyleSheet.create could

120
00:08:21.039 --> 00:08:26.096
have some performance improvements
like deduplicating styles or

121
00:08:26.096 --> 00:08:27.732
anything like that.

122
00:08:27.732 --> 00:08:32.052
But yeah, right now, it doesn't really
have anything [LAUGH] mysterious going on

123
00:08:32.052 --> 00:08:33.752
under the hood unfortunately.

124
00:08:33.752 --> 00:08:39.179
I think it does have some utility methods,

125
00:08:39.179 --> 00:08:45.167
so you can flatten styles or
compose styles.

126
00:08:45.167 --> 00:08:49.051
This is actually handy, like an absolute
fill and absolute fill object.

127
00:08:49.051 --> 00:08:52.169
There you go.

128
00:08:52.169 --> 00:08:56.491
So if you ever want a component
to take off the position

129
00:08:56.491 --> 00:09:00.332
absolute take off the full
width of the screen,

130
00:09:00.332 --> 00:09:04.944
there's actually a convenience
function where if you do

131
00:09:04.944 --> 00:09:10.756
a View Style,
&gt;&gt; Kadi Kraman: Well,

132
00:09:10.756 --> 00:09:13.976
actually this would be useless,
because it doesn't have a background.

133
00:09:13.976 --> 00:09:15.425
Let's give it a background as well.

134
00:09:17.166 --> 00:09:21.500
&gt;&gt; Kadi Kraman: So, backgroundColor pink.

135
00:09:21.500 --> 00:09:22.067
There you go.

136
00:09:22.067 --> 00:09:25.140
So this is a object that is
full width of the screen,

137
00:09:25.140 --> 00:09:27.431
so it's rendering underneath here.

138
00:09:27.431 --> 00:09:30.800
But if I move it, this actually shows
you the order of rendering as well,

139
00:09:30.800 --> 00:09:32.249
which is kind of interesting.

140
00:09:32.249 --> 00:09:36.573
So when I put it on top of my
ShoppingListItem, it renders underneath,

141
00:09:36.573 --> 00:09:39.825
and if I put it at the bottom,
it renders over the top.

142
00:09:39.825 --> 00:09:45.518
So it's kind of a convenience function,
or there's also an absolute fill object.

143
00:09:48.332 --> 00:09:55.522
&gt;&gt; Kadi Kraman: StyleSheet, oops,
&gt;&gt; Kadi Kraman: Absolute fill object,

144
00:09:55.522 --> 00:10:01.137
which does the same, but it's the styles
as an object so you can spread them and

145
00:10:01.137 --> 00:10:05.237
add additional styles like I did here,
so just utility.

