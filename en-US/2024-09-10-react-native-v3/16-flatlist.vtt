WEBVTT

1
00:00:00.312 --> 00:00:05.362
&gt;&gt; Kadi Kraman: So, we've used
a ScrollView here and we've mapped

2
00:00:05.362 --> 00:00:10.659
over an array of items to
render things in ScrollView.

3
00:00:10.659 --> 00:00:14.565
And this is actually something that
you shouldn't do in React Native.

4
00:00:14.565 --> 00:00:16.719
The ScrollViews are really handy for

5
00:00:16.719 --> 00:00:20.343
pages that you think might be
longer than a device's screen.

6
00:00:20.343 --> 00:00:25.199
But if you have an array of items
that you map over to render,

7
00:00:25.199 --> 00:00:28.417
then you shouldn't use a ScrollView.

8
00:00:28.417 --> 00:00:32.813
In fact, you should use another
component called FlatList.

9
00:00:32.813 --> 00:00:36.594
So FlatList is a completely new component
if you're coming from the web, so

10
00:00:36.594 --> 00:00:38.614
there is no equivalent in the web at all.

11
00:00:38.614 --> 00:00:43.378
And basically, a FlatList is a more
optimized way of rendering large

12
00:00:43.378 --> 00:00:46.014
sets of items on the Native platform.

13
00:00:46.014 --> 00:00:49.043
The reason it's optimized is that,

14
00:00:49.043 --> 00:00:54.221
it actually tracks how much visible
area you have on your page,

15
00:00:54.221 --> 00:01:00.098
and it doesn't render items that
are way outside of this visible area.

16
00:01:00.098 --> 00:01:05.766
It will also unmount items
that you've scrolled past.

17
00:01:05.766 --> 00:01:09.970
So let's import FlatList
from React Native.

18
00:01:13.221 --> 00:01:17.157
&gt;&gt; Kadi Kraman: So to convert this into
a FlatList, we'll do a FlatList at the top

19
00:01:17.157 --> 00:01:20.677
level, so this will completely
replace our ScrollView.

20
00:01:20.677 --> 00:01:24.588
And we'll pass in our array of items.

21
00:01:24.588 --> 00:01:27.347
So we'll use the data prop.

22
00:01:27.347 --> 00:01:30.397
So data is going to be our ShoppingList.

23
00:01:32.586 --> 00:01:37.034
&gt;&gt; Kadi Kraman: And then the other
property this has is a renderItem

24
00:01:37.034 --> 00:01:38.072
function.

25
00:01:38.072 --> 00:01:41.803
So basically, for
each of these shopping list items,

26
00:01:41.803 --> 00:01:46.195
you are giving the FlatList
instructions on how to render them.

27
00:01:46.195 --> 00:01:48.684
So this will be a function.

28
00:01:48.684 --> 00:01:52.653
And each of this shopping list items will

29
00:01:52.653 --> 00:01:56.981
be passed into the render
item as an object.

30
00:01:56.981 --> 00:02:00.927
So there will be an object and
it's called Item.

31
00:02:00.927 --> 00:02:04.456
So you need to render item,
so this will be props.Item or

32
00:02:04.456 --> 00:02:06.966
if you're destruction compared item.

33
00:02:10.308 --> 00:02:14.791
&gt;&gt; Kadi Kraman: And then we're going
to return our shopping list item,

34
00:02:16.662 --> 00:02:19.454
&gt;&gt; Kadi Kraman: And the name is

35
00:02:19.454 --> 00:02:24.349
going to be Item.name.

36
00:02:24.349 --> 00:02:27.987
We don't need the key because, so

37
00:02:27.987 --> 00:02:32.127
FlatList actually handles the keys for

38
00:02:32.127 --> 00:02:37.408
you as well,
if your data has either an ID or a key.

39
00:02:37.408 --> 00:02:41.048
So if the data that you're
passing in has an ID or a key,

40
00:02:41.048 --> 00:02:43.754
then those will be used automatically.

41
00:02:43.754 --> 00:02:48.811
If the data you're passing in doesn't
have those, you would have to

42
00:02:48.811 --> 00:02:53.796
use this keyExtractor function,
to generate a unique ID for data.

43
00:02:53.796 --> 00:02:57.472
By our case, we don't need to
do that because we have an ID.

44
00:02:57.472 --> 00:03:04.249
So sticky header indices work with
flatness, so we can copy that over.

45
00:03:04.249 --> 00:03:10.569
And we can also copy over the style and
the content container style.

46
00:03:10.569 --> 00:03:15.448
And I think that [COUGH] is so
we can get rid of the ScrollView.

47
00:03:15.448 --> 00:03:19.410
No we can't,
we forgot about the text input.

48
00:03:19.410 --> 00:03:24.525
So the text input, so now we have
a list of items with the shopping list,

49
00:03:24.525 --> 00:03:27.014
but where do we put our text input?

50
00:03:27.014 --> 00:03:31.741
So text input goes to
the header of our list.

51
00:03:31.741 --> 00:03:35.312
And thankfully, with FlatList
we have a component for that.

52
00:03:35.312 --> 00:03:39.240
So there is a ListHeaderComponent, and

53
00:03:39.240 --> 00:03:45.635
I think it's a function,
&gt;&gt; Kadi Kraman: Where

54
00:03:45.635 --> 00:03:48.712
we can pass in our text input.

55
00:03:48.712 --> 00:03:50.725
And now we can get rid of our ScrollView.

56
00:03:56.908 --> 00:04:02.298
&gt;&gt; Kadi Kraman: Lovely, so
functionally, this should look pretty

57
00:04:02.298 --> 00:04:07.196
much the same as did before,
but practically,

58
00:04:07.196 --> 00:04:11.486
it will be a much more optimized version.

59
00:04:11.486 --> 00:04:14.630
Actually, I had a good demo of this, but

60
00:04:14.630 --> 00:04:19.732
we don't have a very long list,
how can I create a very long list?

61
00:04:19.732 --> 00:04:21.504
So this is just an example,

62
00:04:21.504 --> 00:04:26.219
cuz I wanted to show you what it looks
like if you pass in a bunch of things.

63
00:04:26.219 --> 00:04:31.694
So testData, so let me do a new

64
00:04:31.694 --> 00:04:37.959
array
&gt;&gt; Kadi Kraman: Of like a thousand items.

65
00:04:39.279 --> 00:04:45.263
&gt;&gt; Kadi Kraman: Fill, null,
and then let's map over it.

66
00:04:48.792 --> 00:04:54.188
&gt;&gt; Kadi Kraman: And let's just do id,

67
00:04:54.188 --> 00:04:57.597
Item.name.

68
00:05:01.561 --> 00:05:02.069
&gt;&gt; Kadi Kraman: Okay,

69
00:05:02.069 --> 00:05:06.223
so I think this should just be
a very long array of numbers.

70
00:05:06.223 --> 00:05:10.521
So if I pass this in, instead,

71
00:05:15.337 --> 00:05:17.583
&gt;&gt; Kadi Kraman: What am I doing wrong?

72
00:05:17.583 --> 00:05:24.983
Id, name,
&gt;&gt; Kadi Kraman: Test data.

73
00:05:29.114 --> 00:05:31.832
&gt;&gt; Kadi Kraman: I'm confused
at why this is null.

74
00:05:37.383 --> 00:05:38.415
&gt;&gt; Kadi Kraman: Item.name.

75
00:05:44.613 --> 00:05:50.389
&gt;&gt; Kadi Kraman: So actually, I want to do,
I don't want this, I want the index.

76
00:06:02.031 --> 00:06:05.772
&gt;&gt; Kadi Kraman: So what happens when you
do things that you weren't planning on

77
00:06:05.772 --> 00:06:08.959
doing, let me just make sure,
what is going on here?

78
00:06:20.228 --> 00:06:21.838
&gt;&gt; Kadi Kraman: Item, index.

79
00:06:30.419 --> 00:06:32.244
&gt;&gt; Kadi Kraman: Okay,
this is what I was testing.

80
00:06:32.244 --> 00:06:36.639
Sorry, it was an array of numbers.

81
00:06:36.639 --> 00:06:39.393
It was array of nulls,
of course, they were all null.

82
00:06:39.393 --> 00:06:43.968
[LAUGH] So okay, so this is a massive
list of a bunch of numbers.

83
00:06:43.968 --> 00:06:48.012
So what I wanted to show you is,
if I just console log,

84
00:07:02.925 --> 00:07:04.195
&gt;&gt; Kadi Kraman: This is running on both my

85
00:07:04.195 --> 00:07:06.552
iOS simulator and
Android emulator, [LAUGH] so

86
00:07:06.552 --> 00:07:08.917
that's why there's a lot
of rendering here.

87
00:07:08.917 --> 00:07:10.779
Let me just close the Android one.

88
00:07:19.448 --> 00:07:24.492
&gt;&gt; Kadi Kraman: Okay, so notice that
there was 1,000 things in my list,

89
00:07:24.492 --> 00:07:28.963
but then, by default,
129 of those get rendered.

90
00:07:28.963 --> 00:07:33.458
If each of these items were longer,
few of these would get rendered.

91
00:07:33.458 --> 00:07:38.956
And then, as I move in the list,
more of these will get funded.

92
00:07:38.956 --> 00:07:43.210
So that's what I mean bout FlatList,
automatically optimizing it.

93
00:07:43.210 --> 00:07:47.714
And the reason it can do that is
because of this renderItem function.

94
00:07:47.714 --> 00:07:53.322
So it's calling a renderItem on this
item when it's ready to be rendered.

95
00:07:53.322 --> 00:07:55.618
So that was the example.

96
00:07:55.618 --> 00:08:00.278
Just changing this back
to our shoppingList.

97
00:08:02.688 --> 00:08:05.840
&gt;&gt; Kadi Kraman: And I'm gonna make
this into an implicit return,

98
00:08:05.840 --> 00:08:08.779
I think that's what I
did in the code example.

99
00:08:08.779 --> 00:08:10.697
Lovely.

100
00:08:10.697 --> 00:08:17.432
So, the FlatList has a bunch
of useful properties, and

101
00:08:17.432 --> 00:08:23.032
one thing it actually
has is a ListEmptyProp.

102
00:08:23.032 --> 00:08:26.164
So you can define something,
so rather than doing,

103
00:08:26.164 --> 00:08:31.078
if shoppingList.length is 0 then render
something, otherwise render the FlatList.

104
00:08:31.078 --> 00:08:35.427
You can have something that's built
into the FlatList that renders

105
00:08:35.427 --> 00:08:39.099
this ListEmptyComponent if
the shoppingList is empty.

106
00:08:39.099 --> 00:08:43.610
So let's do ListEmptyComponent, and

107
00:08:43.610 --> 00:08:47.854
make this into a View with some text.

108
00:08:52.140 --> 00:08:58.340
&gt;&gt; Kadi Kraman: And let's say,
your shopping list is empty.

109
00:08:58.340 --> 00:09:01.818
Import these from React Native.

110
00:09:08.402 --> 00:09:11.499
&gt;&gt; Kadi Kraman: And
let's just give the view a style.

111
00:09:11.499 --> 00:09:16.482
So style,
&gt;&gt; Kadi Kraman: Styles,

112
00:09:16.482 --> 00:09:21.256
ListEmptyContainer, and

113
00:09:21.256 --> 00:09:28.942
in our style sheet we'll create an object.

114
00:09:28.942 --> 00:09:33.858
And let's give it a justifyContent:

115
00:09:33.858 --> 00:09:38.320
center and alignItems: center.

116
00:09:42.252 --> 00:09:46.436
&gt;&gt; Kadi Kraman: And
a bit of a vertical margin, so

117
00:09:46.436 --> 00:09:50.930
marginVertical: let's do 18.

118
00:09:53.517 --> 00:09:54.677
&gt;&gt; Kadi Kraman: Lovely, okay, so

119
00:09:54.677 --> 00:09:58.167
now we can actually get rid
of our initial shopping list.

120
00:09:58.167 --> 00:10:01.824
So let's start with
an empty array instead.

121
00:10:01.824 --> 00:10:04.406
And because my array is empty,

122
00:10:04.406 --> 00:10:10.269
I'm getting your shopping list
is empty list empty placeholder.

123
00:10:10.269 --> 00:10:12.085
I know what I've done wrong.

124
00:10:12.085 --> 00:10:16.214
So, mistakenly in this
ListHeaderComponent,

125
00:10:16.214 --> 00:10:19.745
I've put the text input into a function.

126
00:10:19.745 --> 00:10:24.092
So every time I change it,
it actually re-renders it,

127
00:10:24.092 --> 00:10:27.519
which means that the keyboard disappears.

128
00:10:27.519 --> 00:10:28.874
Pretty sure that is it.

129
00:10:28.874 --> 00:10:30.935
So let me just remove this function.

130
00:10:32.937 --> 00:10:35.539
&gt;&gt; Kadi Kraman: There we go,
that was the problem.

131
00:10:35.539 --> 00:10:40.795
So now if I do my keyboard,
and now yeah, there we go.

132
00:10:44.505 --> 00:10:48.775
&gt;&gt; Kadi Kraman: There we have
our coffee in our shopping list.

133
00:10:54.464 --> 00:10:56.019
&gt;&gt; Kadi Kraman: So yeah,
just to reiterate,

134
00:10:56.019 --> 00:11:00.017
the reason it was re-rendering is because
I put a function here in the list.

135
00:11:00.017 --> 00:11:04.083
List had a component, which means that
this text got remounted every time

136
00:11:04.083 --> 00:11:07.439
the value changed, and
then that would close the keyboard.

137
00:11:07.439 --> 00:11:08.893
So, hope that makes sense.

