WEBVTT

1
00:00:00.235 --> 00:00:04.906
&gt;&gt; Kadi Kraman: Now, let's schedule a
notification, all right, so I've switched

2
00:00:04.906 --> 00:00:10.290
this from my iOS simulator to the screen
mirroring of my android phone.

3
00:00:10.290 --> 00:00:18.270
So we can see how we're testing
the push notifications, right.

4
00:00:18.270 --> 00:00:23.169
So here instead of handle
request permission,

5
00:00:23.169 --> 00:00:27.583
let's call this schedule notification.

6
00:00:29.963 --> 00:00:35.211
And what we're doing is
we're checking if we can

7
00:00:35.211 --> 00:00:40.975
schedule a notification,
so if results is granted.

8
00:00:44.769 --> 00:00:49.918
&gt;&gt; Kadi Kraman: And I'll do an else,
so this is to do but

9
00:00:49.918 --> 00:00:53.830
I'll do an else here as well.

10
00:00:53.830 --> 00:00:58.167
So I'll just do a quick

11
00:00:58.167 --> 00:01:02.961
alert that says unable to

12
00:01:02.961 --> 00:01:08.214
schedule notification and

13
00:01:08.214 --> 00:01:15.979
enable the notification permission for

14
00:01:15.979 --> 00:01:20.100
Expo go in settings.

15
00:01:20.100 --> 00:01:25.009
Actually, it might be worth I didn't
do just an example of that, but

16
00:01:25.009 --> 00:01:29.987
it might be worth adding a if device,
how do we do this here?

17
00:01:29.987 --> 00:01:35.585
Yeah, if device is device,
this is device from Expo device,

18
00:01:35.585 --> 00:01:40.338
so I just don't wanna get
this alert on a simulator.

19
00:01:51.485 --> 00:01:57.131
&gt;&gt; Kadi Kraman: Yeah, so if it is
a device then we'll give the alert,

20
00:01:57.131 --> 00:02:02.526
otherwise we can just fail
silently because it will

21
00:02:02.526 --> 00:02:07.806
be on a simulator, so
we'll be the ones doing it.

22
00:02:08.976 --> 00:02:12.971
All right, so if it is granted,
we want to schedule a notification, so

23
00:02:12.971 --> 00:02:16.449
this will be asynchronous, so
we'll await notifications.

24
00:02:22.659 --> 00:02:29.093
&gt;&gt; Kadi Kraman: We should
import notifications, so

25
00:02:29.093 --> 00:02:35.527
let's import star as notifications

26
00:02:35.527 --> 00:02:40.419
from Expo notifications.

27
00:02:40.419 --> 00:02:46.198
And we want to await notifications
schedule notification async,

28
00:02:46.198 --> 00:02:52.504
so this will schedule a local
notification for ourselves on our device.

29
00:02:52.504 --> 00:02:57.487
And for the content,
we can pass in a title so

30
00:02:57.487 --> 00:03:03.281
this will be our I'm
a notification from your app,

31
00:03:03.281 --> 00:03:07.752
let's add a little emoji here as well.

32
00:03:10.600 --> 00:03:15.951
&gt;&gt; Kadi Kraman: And then the other
config option that we're gonna pass

33
00:03:15.951 --> 00:03:20.968
in is the trigger, so
when do we want to trigger it?

34
00:03:20.968 --> 00:03:25.730
You can look at the docs, actually one,
we can look at the docs now, [LAUGH].

35
00:03:25.730 --> 00:03:29.757
So extra notifications there we go, so

36
00:03:29.757 --> 00:03:33.905
the trigger, so you can do like two sec,

37
00:03:33.905 --> 00:03:40.284
you can pass in the amount of
seconds you can pass in a day.

38
00:03:40.284 --> 00:03:45.758
So we go to date time, so
this will be the input, there you go.

39
00:03:45.758 --> 00:03:49.264
So you can do a date,
you can do a time interval,

40
00:03:49.264 --> 00:03:52.861
you can do a daily push notification,
a weekly,

41
00:03:52.861 --> 00:03:57.594
a yearly or a particular second or
a particular timestamp.

42
00:03:57.594 --> 00:04:02.276
So look at the docs, this is actually
quite flexible when you can schedule it.

43
00:04:02.276 --> 00:04:07.149
But in our case,
let's just trigger it after 5 seconds,

44
00:04:07.149 --> 00:04:09.641
so we can see it immediately.

45
00:04:11.281 --> 00:04:16.558
All right, so we should probably
rename our button as well,

46
00:04:16.558 --> 00:04:20.496
so let's call this schedule notification.

47
00:04:26.131 --> 00:04:31.355
&gt;&gt; Kadi Kraman: Lovely, so
now let's see, I don't have

48
00:04:31.355 --> 00:04:36.296
any settings, can you get rid of this?

49
00:04:36.296 --> 00:04:41.206
Okay, lovely, so notifications, so I'm
gonna schedule notifications, so one thing

50
00:04:41.206 --> 00:04:46.133
to note is that foreground and background
notifications are treated differently.

51
00:04:46.133 --> 00:04:47.551
So when your app is open,

52
00:04:47.551 --> 00:04:52.158
your background notification isn't going
to end up in your notifications bar.

53
00:04:52.158 --> 00:04:55.592
So I'm going to press the button and
immediately background the app.

54
00:04:55.592 --> 00:04:59.946
So press the button, background the app
and then open the notifications bar, so

55
00:04:59.946 --> 00:05:02.199
I'm hoping again, notification here.

56
00:05:02.199 --> 00:05:06.803
[SOUND] There you go I'm a notification
from your app, so when I open this,

57
00:05:06.803 --> 00:05:08.152
it will open the app.

58
00:05:13.517 --> 00:05:18.443
&gt;&gt; Kadi Kraman: And
it'll work the same on iOS,

59
00:05:18.443 --> 00:05:22.650
I promise [LAUGH], so yeah.

60
00:05:22.650 --> 00:05:26.401
So the important thing,
I guess to note here is I said,

61
00:05:26.401 --> 00:05:31.066
if you have your app open,
this will be a foreground notification.

62
00:05:31.066 --> 00:05:33.968
And you can add handling for
foreground notifications, so

63
00:05:33.968 --> 00:05:37.750
you can look at the documentation for
that but by default they won't show up.

64
00:05:37.750 --> 00:05:40.251
So if I do schedule
a notification here and

65
00:05:40.251 --> 00:05:45.263
then just look at my notification bar and
wait for five seconds, nothing happens.

66
00:05:45.263 --> 00:05:49.451
So nothing happens because my
app is literally open here.

67
00:06:01.824 --> 00:06:02.451
&gt;&gt; Kadi Kraman: There you go.

68
00:06:02.451 --> 00:06:08.892
So this is what it looks like on Android,
and this is what it looks like on iOS.

69
00:06:08.892 --> 00:06:10.015
Yes.

70
00:06:10.015 --> 00:06:13.501
&gt;&gt; Speaker 2: This is not
a question specific notifications,

71
00:06:13.501 --> 00:06:17.703
but the Google services.json
file in general.

72
00:06:17.703 --> 00:06:22.324
Alexander's asking,
do you have any tips for

73
00:06:22.324 --> 00:06:29.686
passing GoogleServices.json to EAS
while keeping it in the gitignore?

74
00:06:29.686 --> 00:06:32.439
&gt;&gt; Kadi Kraman: While
keeping it in the gitignore,

75
00:06:32.439 --> 00:06:36.021
why would you keep it in the gitignore?

76
00:06:36.021 --> 00:06:40.606
I think, okay, so
there's this tricky thing

77
00:06:40.606 --> 00:06:45.317
about secrets from people
coming from the web.

78
00:06:45.317 --> 00:06:49.760
Actually, we have an iOS
developer in the audience,

79
00:06:49.760 --> 00:06:56.194
would you put the Google services P list,
is it a secure file in your opinion?

80
00:06:56.194 --> 00:06:57.839
&gt;&gt; Speaker 2: Bundling it in the app?

81
00:06:57.839 --> 00:07:02.718
&gt;&gt; Kadi Kraman: Yeah,
would you add it to get ignore or not?

82
00:07:02.718 --> 00:07:06.012
&gt;&gt; Speaker 2: Yes, you would not want
the secrets in your Git repository to

83
00:07:06.012 --> 00:07:10.211
keep them out of Github, but if they're
required bundled in the app to run for

84
00:07:10.211 --> 00:07:11.448
push notifications.

85
00:07:11.448 --> 00:07:12.503
&gt;&gt; Kadi Kraman: Yeah.
&gt;&gt; Speaker 2: So yeah,

86
00:07:12.503 --> 00:07:16.914
I guess that's probably what they're
asking is are you generating them?

87
00:07:16.914 --> 00:07:22.183
&gt;&gt; Kadi Kraman: Yeah, so basically to set
up your firebase is a service from Google

88
00:07:22.183 --> 00:07:28.315
and you use it for analytics, so
Google analytics got merged with Firebase.

89
00:07:28.315 --> 00:07:30.633
So if you want to do
analytics on a mobile app,

90
00:07:30.633 --> 00:07:32.893
you need to install React Native Firebase.

91
00:07:32.893 --> 00:07:37.448
And also it's in different
personifications on Android but

92
00:07:37.448 --> 00:07:40.750
the way you set it up is
you go to a firebase and

93
00:07:40.750 --> 00:07:45.053
then you sign up and
you get this Google services p list.

94
00:07:45.053 --> 00:07:51.829
And then for Android, I think it's a json
file but you get the file for android.

95
00:07:51.829 --> 00:07:56.379
And then this file has
some kind of Ids that

96
00:07:56.379 --> 00:08:01.710
distinguish your app to
the firebase services.

97
00:08:01.710 --> 00:08:05.324
So the only work in conjunction to your
app so it needs to be the same app ID.

98
00:08:05.324 --> 00:08:09.341
So it's not like someone could
take this app bundle and

99
00:08:09.341 --> 00:08:13.488
use it in a different app,
it needs to be your app.

100
00:08:13.488 --> 00:08:17.653
And then these files get bundled
within your app bundle and

101
00:08:17.653 --> 00:08:20.042
delivered to the user's phone.

102
00:08:20.042 --> 00:08:25.488
So anything delivered to the user's phone
inherently can't be completely secret.

103
00:08:25.488 --> 00:08:30.537
So on the web, you could just do this and
then you can look

104
00:08:30.537 --> 00:08:35.373
at the network traffic and
you can look at the code, so

105
00:08:35.373 --> 00:08:40.657
it's more difficult to do
the same thing for a mobile app.

106
00:08:40.657 --> 00:08:44.819
But you could take it off the phone,
you could like extract it you could see

107
00:08:44.819 --> 00:08:48.533
everything that's shipped in your
mobile bundle in plain text.

108
00:08:48.533 --> 00:08:54.904
So that's why anything you ship with your
React Native app including the p list and

109
00:08:54.904 --> 00:08:58.795
Google services stuff is
inherently not secret.

110
00:08:58.795 --> 00:09:05.860
And therefore those spirals, unless
your repository is public to the world,

111
00:09:05.860 --> 00:09:10.678
I genuinely wouldn't put
them in gitignore myself,

112
00:09:10.678 --> 00:09:15.725
because it's almost
communicating misinformation.

113
00:09:15.725 --> 00:09:17.347
Because when you put it in gitignore and

114
00:09:17.347 --> 00:09:19.275
treat it as a secret,
then it makes you think.

115
00:09:19.275 --> 00:09:24.080
Anything that I put in these [INAUDIBLE]
inject into my JavaScript bundle at build

116
00:09:24.080 --> 00:09:28.753
time, they're gonna be secret,
like server-side, but that is not true.

117
00:09:28.753 --> 00:09:33.453
So anything you put in your
React Native app that gets delivered to

118
00:09:33.453 --> 00:09:35.176
the user is not secret.

119
00:09:35.176 --> 00:09:39.223
&gt;&gt; Speaker 2: One note on that Tiff, they
might be asking because secret scanning

120
00:09:39.223 --> 00:09:41.362
GitHub will mark those as secrets.

121
00:09:41.362 --> 00:09:44.345
So we did have to go through
the hoops to get it out of there and

122
00:09:44.345 --> 00:09:45.910
we basically just generated.

123
00:09:45.910 --> 00:09:46.476
&gt;&gt; Kadi Kraman: Yeah.
&gt;&gt; Speaker 2: And

124
00:09:46.476 --> 00:09:49.890
pull it from a secret storage or
do dnv or something like that.

125
00:09:49.890 --> 00:09:51.387
&gt;&gt; Kadi Kraman: Yeah.
&gt;&gt; Speaker 2: Yeah, I agree,

126
00:09:51.387 --> 00:09:56.340
you can lock down the key to only
work on your app bundles and stuff.

127
00:09:56.340 --> 00:09:58.133
&gt;&gt; Kadi Kraman: Yeah, exactly,

128
00:09:58.133 --> 00:10:03.760
I've had this [LAUGH]
conversation about secrets a lot.

129
00:10:03.760 --> 00:10:05.892
Which is why I think I've gone for

130
00:10:05.892 --> 00:10:10.156
a bit of a tangent to the original
question was actually, I think it

131
00:10:10.156 --> 00:10:14.742
was how do you use EAS with your Google
services files and keep a secret?

132
00:10:14.742 --> 00:10:20.958
So there is EAS secrets, which you can use
and I think we have handling for this.

133
00:10:20.958 --> 00:10:26.755
We have documentation for
this, eas secrets.

134
00:10:36.814 --> 00:10:42.403
&gt;&gt; Kadi Kraman: Yeah, there's actually an
example for the Google services_Info.plist

135
00:10:42.403 --> 00:10:48.219
here, so if you haven't seen this doc,
this might actually be helpful.

136
00:10:48.219 --> 00:10:52.603
And also saying what I said about
these things not being secrets,

137
00:10:52.603 --> 00:10:55.643
I think this is just like
a good thing to know.

138
00:10:55.643 --> 00:11:00.239
Because a lot of people
end up reusing the secrets

139
00:11:00.239 --> 00:11:04.001
by putting actual secrets in there.

140
00:11:04.001 --> 00:11:08.664
So if there's anything you get from
the API, just like an API secret,

141
00:11:08.664 --> 00:11:11.917
then it shouldn't be
included in your app code.

142
00:11:11.917 --> 00:11:16.528
So for example,
you're using OpenAPI on your

143
00:11:16.528 --> 00:11:21.151
React Native app and
you have the OpenAPI key.

144
00:11:21.151 --> 00:11:24.382
So this is tied to yourself and

145
00:11:24.382 --> 00:11:30.078
how much it's used will be
how much you get charged.

146
00:11:30.078 --> 00:11:34.166
So this is a proper secret you don't want
someone else to accidentally get it you

147
00:11:34.166 --> 00:11:36.312
want to be able to revoke it and
change it.

148
00:11:36.312 --> 00:11:41.934
But if you bundle it with your app bundle
then it will be technically available for

149
00:11:41.934 --> 00:11:43.555
anyone to see.

150
00:11:43.555 --> 00:11:47.317
And also you can't revoke it because
you'd have to submit another app in order

151
00:11:47.317 --> 00:11:47.893
to do that.

152
00:11:47.893 --> 00:11:51.149
So the way to get around it is
the same way that you would on,

153
00:11:51.149 --> 00:11:52.956
if you were building a website.

154
00:11:52.956 --> 00:11:56.124
So you build a server, so it can literally
be a cloud function or a Lambda or

155
00:11:56.124 --> 00:11:57.245
something.

156
00:11:57.245 --> 00:12:02.634
And that server will have the API key and
do the sensitive your operation and your

157
00:12:02.634 --> 00:12:07.876
mobile app will call your API and that
way you can always rotate your secrets.

158
00:12:11.301 --> 00:12:13.037
&gt;&gt; Kadi Kraman: So
that's my attention on secrets.

159
00:12:13.037 --> 00:12:14.081
[LAUGH]

