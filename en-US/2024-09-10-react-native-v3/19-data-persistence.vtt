WEBVTT

1
00:00:00.190 --> 00:00:03.281
&gt;&gt; Kadi Kraman: So far,
we've created our shopping list, but

2
00:00:03.281 --> 00:00:06.680
the problem is that every
time we refresh our app, so

3
00:00:06.680 --> 00:00:11.317
if you shake your phone and refresh,
or you close [INAUDIBLE], you go and

4
00:00:11.317 --> 00:00:16.500
reopens, or in my case, if I just reload
this, the shopping list is empty.

5
00:00:16.500 --> 00:00:23.418
And that's because we are rendering our
shopping list in memory In our new state.

6
00:00:23.418 --> 00:00:28.862
So what we really want to do is you
want to persist this shopping list when

7
00:00:28.862 --> 00:00:34.969
we save it, so that when we close our app
and reopen it, it would still be there.

8
00:00:34.969 --> 00:00:38.623
On the web you might use local storage for
this and

9
00:00:38.623 --> 00:00:42.713
the native equivalent of
this Is asyncstorage.

10
00:00:42.713 --> 00:00:46.345
It's a key-value store, so
it's an unsecured key-value store for

11
00:00:46.345 --> 00:00:48.563
native mobile applications.

12
00:00:48.563 --> 00:00:52.173
And you can use it pretty much
the same as local storage.

13
00:00:52.173 --> 00:00:55.103
The only difference is, well,
the clue's in the name.

14
00:00:55.103 --> 00:00:59.613
It's asynchronous, so all the calls
to async storage are asynchronous.

15
00:01:01.510 --> 00:01:03.786
So let's install Async Storage.

16
00:01:06.233 --> 00:01:09.842
&gt;&gt; Kadi Kraman: So we'll do NPX expo
install, React Native Async Storage,

17
00:01:09.842 --> 00:01:10.844
Async Storage.

18
00:01:10.844 --> 00:01:14.540
And actually,
here's a fun thing about Async Storage.

19
00:01:14.540 --> 00:01:19.327
So this actually used to be part
of the core React Native package,

20
00:01:19.327 --> 00:01:23.852
but it's an example of how the React
team at Meta really wanted

21
00:01:23.852 --> 00:01:28.291
to draw the line between what
the community should handle and

22
00:01:28.291 --> 00:01:32.617
what the core React Native
package should handle.

23
00:01:32.617 --> 00:01:36.341
So this is actually a great example
of something that used to be part of

24
00:01:36.341 --> 00:01:39.297
React Native Core, and
it was explicitly moved out and

25
00:01:39.297 --> 00:01:42.959
turned into a community library so
it could be Built, developed and

26
00:01:42.959 --> 00:01:46.132
managed independently of
the core React native package.

27
00:01:49.242 --> 00:01:52.554
So let's write a,

28
00:01:52.554 --> 00:01:57.729
let's create a UILs folder so

29
00:01:57.729 --> 00:02:01.461
new folder UILs and.

30
00:02:08.055 --> 00:02:13.454
&gt;&gt; Kadi Kraman: And
let's call a function called storage.ts.

31
00:02:13.454 --> 00:02:18.608
So we'll put our async storage
kind of utility functions now.

32
00:02:18.608 --> 00:02:23.488
And the two things you wanna do with
async storage Because you wanna get,

33
00:02:23.488 --> 00:02:24.770
and you wanna set.

34
00:02:24.770 --> 00:02:29.427
So let's do export async

35
00:02:29.427 --> 00:02:34.756
function getFromStorage.

36
00:02:39.439 --> 00:02:43.722
&gt;&gt; Kadi Kraman: And for this,
we need a key which is a string.

37
00:02:43.722 --> 00:02:48.636
So this will be the key for
your asing storage on your device, and

38
00:02:48.636 --> 00:02:52.647
it'll be scoped to
the application you're using.

39
00:02:52.647 --> 00:02:57.109
So one application can't access things
from another application's asing storage,

40
00:02:57.109 --> 00:03:01.248
unless you, well jade break your device
and then all things kind of things can.

41
00:03:01.248 --> 00:03:04.369
Can happen, but generally they're scoped
to the application that you're using.

42
00:03:06.444 --> 00:03:10.745
&gt;&gt; Kadi Kraman: So
what I want to do is we'll do const data.

43
00:03:15.085 --> 00:03:18.430
&gt;&gt; Kadi Kraman: And
this will be an asynchronous function, so

44
00:03:18.430 --> 00:03:20.070
await asyncstorage.

45
00:03:20.070 --> 00:03:28.050
So this is the first The default
export from the acing storage package,

46
00:03:28.050 --> 00:03:32.042
and we'll do the item with the key.

47
00:03:35.023 --> 00:03:40.626
&gt;&gt; Kadi Kraman: And
everything in Async storage is a string So

48
00:03:40.626 --> 00:03:45.935
we're going to save a JavaScript object,

49
00:03:45.935 --> 00:03:51.691
and so adjacent object,
so we will pass it so.

50
00:03:59.231 --> 00:04:00.494
&gt;&gt; Kadi Kraman: [COUGH] Actually,

51
00:04:00.494 --> 00:04:05.119
the best way to do this is to use
the The way to do this is, usually,

52
00:04:05.119 --> 00:04:10.171
if you're parsing anything or
you want to wrap it into a try-catch, so

53
00:04:10.171 --> 00:04:15.420
let's do a try and a catch over this,
and then default to returning null.

54
00:04:15.420 --> 00:04:20.262
Whenever you JSON parse everything, make
sure you do a try-catch in React Native,

55
00:04:20.262 --> 00:04:21.490
because otherwise,

56
00:04:21.490 --> 00:04:26.079
things might crash if the thing that
you're passing is not a valid JSON object.

57
00:04:27.279 --> 00:04:31.429
So we want to return if there is data.

58
00:04:31.429 --> 00:04:38.491
So it's not the initial time
we'll do JSON pass data and

59
00:04:38.491 --> 00:04:42.707
otherwise let's return a null.

60
00:04:42.707 --> 00:04:48.735
And I probably should have done
a save from storage first but

61
00:04:48.735 --> 00:04:54.403
let's do an export async
function save to storage and

62
00:04:54.403 --> 00:05:01.275
here we need to do a key again so
this is the key the string address so,

63
00:05:01.275 --> 00:05:05.518
Where we're saving to and then our data.

64
00:05:05.518 --> 00:05:08.988
Let's just accept any
old object in this case.

65
00:05:11.580 --> 00:05:17.514
&gt;&gt; Kadi Kraman: And let's also do a try
catch around this just in case and

66
00:05:17.514 --> 00:05:20.173
we'll just do an await.

67
00:05:21.614 --> 00:05:27.266
&gt;&gt; Kadi Kraman: AsyncStorage.set Item and
we'll have two properties so

68
00:05:27.266 --> 00:05:34.413
the first one will be the key so the
address of where you're saving it to and

69
00:05:34.413 --> 00:05:40.982
the second one will be what you're
saving so this has to be a string so

70
00:05:40.982 --> 00:05:45.507
we call it jsonStringify
On this data object.

71
00:05:45.507 --> 00:05:49.995
So the reason I say that probably should
have done this, save the storage first,

72
00:05:49.995 --> 00:05:54.574
is actually the way that you get your
item depends on what you're saving.

73
00:05:54.574 --> 00:06:01.406
So in this case, I'm saying that I'm
always going to be saving an object.

74
00:06:01.406 --> 00:06:03.956
And that's why I'm calling
json.stringify on it.

75
00:06:03.956 --> 00:06:09.036
And then therefore, when we get the item,
we can call jsonparse on it.

76
00:06:09.036 --> 00:06:14.736
But you could set just
like any value value here.

77
00:06:14.736 --> 00:06:16.676
So it could just be a string.

78
00:06:16.676 --> 00:06:19.396
So as long as it's a string,
it can be anything.

79
00:06:23.282 --> 00:06:27.098
And one thing to note is because
you can only store strings here,

80
00:06:27.098 --> 00:06:31.422
then everything that you store in
these storage has to be serializable.

81
00:06:31.422 --> 00:06:33.659
So you can't have date objects,
for example.

82
00:06:39.762 --> 00:06:41.357
&gt;&gt; Kadi Kraman: All right,
so now it's time to use it.

83
00:06:41.357 --> 00:06:46.568
So, let's create our storage
key in our in our index screen.

84
00:06:46.568 --> 00:06:48.215
So let's do const storageKey.

85
00:06:51.934 --> 00:06:56.566
&gt;&gt; Kadi Kraman: And this can be anything
I'm just gonna call it shopping list, but

86
00:06:56.566 --> 00:06:58.066
this will be unique.

87
00:06:58.066 --> 00:07:00.854
So whenever you go to
asyncstorage on this app,

88
00:07:00.854 --> 00:07:03.234
using this key- You will get that data.

89
00:07:05.374 --> 00:07:08.234
And we're going to use a useEffect.

90
00:07:08.234 --> 00:07:13.150
So useEffect is a React hook and
using it like this, so

91
00:07:13.150 --> 00:07:19.174
we're going to pass in just an arrow
function and an empty array.

92
00:07:19.174 --> 00:07:22.805
So two arguments,
an arrow function and empty array.

93
00:07:22.805 --> 00:07:27.046
And then what this does is that
it lets you execute a thing

94
00:07:27.046 --> 00:07:29.765
once when the component is loaded.

95
00:07:30.905 --> 00:07:36.935
So in this case, it's very common to
use this to fetch some initial data.

96
00:07:36.935 --> 00:07:40.418
One thing about use effects is
that they are synchronous, so

97
00:07:40.418 --> 00:07:43.953
you can't do anything
Asynchronous in them.

98
00:07:43.953 --> 00:07:49.653
So, as you might have recalled,
our async storage is asynchronous.

99
00:07:49.653 --> 00:07:56.093
So how do you execute an asynchronous
function from a synchronous useeffect.

100
00:07:56.093 --> 00:07:58.411
And the really common workaround for

101
00:07:58.411 --> 00:08:03.825
this is that you define your asynchronous
function inside your useEffect.

102
00:08:03.825 --> 00:08:08.375
So I'm going to do const fetch initial and

103
00:08:08.375 --> 00:08:13.575
this will be an asynchronous
arrow function and

104
00:08:13.575 --> 00:08:18.775
it's going to do const data so
this will be await

105
00:08:18.775 --> 00:08:23.715
get From storage to
the sketch from storage is

106
00:08:23.715 --> 00:08:28.525
the utility function which is created, and

107
00:08:28.525 --> 00:08:38.180
we'll pass in the storage key
&gt;&gt; Kadi Kraman: So

108
00:08:38.180 --> 00:08:43.513
if data we will setShoppingList data,
so yeah so

109
00:08:43.513 --> 00:08:50.667
this will be an array of items so
I know I'll call this an object but

110
00:08:50.667 --> 00:08:55.871
an array is an object in JavaScript,
but okay so

111
00:08:55.871 --> 00:09:01.074
the way we call it Is we
literally just call fetch

112
00:09:01.074 --> 00:09:05.790
initial here immediately underneath it.

113
00:09:05.790 --> 00:09:10.820
So this is, we could have defined this
like, like somewhere else, but this is

114
00:09:10.820 --> 00:09:16.633
like the the way that you would execute an
asynchronous function inside a useEffect.

115
00:09:16.633 --> 00:09:20.203
So we're not waiting, so
we can't do a wait, so this will.

116
00:09:22.419 --> 00:09:25.541
This will tell us that this is
asynchronous and if we try to make

117
00:09:25.541 --> 00:09:29.599
this asynchronous, it would fail, so
we're just fire and forgetting it.

118
00:09:29.599 --> 00:09:32.959
And the last thing we need to do is
we need to sync all of our updates.

119
00:09:32.959 --> 00:09:37.909
So whenever we are creating a new item or
we are toggling the completion of an item,

120
00:09:37.909 --> 00:09:40.739
we also update our a sync storage.

121
00:09:40.739 --> 00:09:45.828
So here, in HandleSubmit,
where we're setting

122
00:09:45.828 --> 00:09:51.280
our shopping list,
let's also do Save to Storage and

123
00:09:51.280 --> 00:09:55.170
we have our key and our shopping list.

124
00:09:58.589 --> 00:10:03.395
&gt;&gt; Kadi Kraman: I'm going to
call this our storage key.

125
00:10:03.395 --> 00:10:09.139
And when we are deleting it
we are doing the same, so

126
00:10:09.139 --> 00:10:14.217
we are doing save to storage,
storage key and

127
00:10:14.217 --> 00:10:20.220
shopping list and save for
an alter we complete.

128
00:10:20.220 --> 00:10:27.020
So save to storage key storage key,

129
00:10:27.020 --> 00:10:32.240
and the new shopping list.

130
00:10:33.860 --> 00:10:39.541
Lovely, so now when I do coffee,
tea, milk,

131
00:10:39.541 --> 00:10:46.390
sugar, I'm just going to mark
one of them as complete,

132
00:10:46.390 --> 00:10:51.343
so now, hopefully, if I reload my app,

133
00:10:51.343 --> 00:10:57.938
all of them are still here,
and my status persisted.

134
00:10:57.938 --> 00:11:02.391
So that's how you use
asyncstorage in React Native.

135
00:11:02.391 --> 00:11:04.798
To persist data across app launches,

