WEBVTT

1
00:00:00.000 --> 00:00:02.362
&gt;&gt; Kadi Kraman: So
it will be a slight detour,

2
00:00:02.362 --> 00:00:07.283
we're going back to icon buttons,
let's call it revision.

3
00:00:07.283 --> 00:00:12.695
We wanted to have a circle if
the item is not completed,

4
00:00:12.695 --> 00:00:16.235
and then a check if it is completed.

5
00:00:16.235 --> 00:00:20.469
So let's go to the shopping list item.

6
00:00:20.469 --> 00:00:25.534
And we want to use Entypo,

7
00:00:25.534 --> 00:00:28.757
so actually, so

8
00:00:28.757 --> 00:00:34.756
let's do expo lectral Icons.

9
00:00:34.756 --> 00:00:36.852
And let's do a check.

10
00:00:39.570 --> 00:00:42.979
&gt;&gt; Kadi Kraman: Yeah, that was the one.

11
00:00:42.979 --> 00:00:49.203
So import this,
&gt;&gt; Kadi Kraman: And

12
00:00:49.203 --> 00:00:52.627
render it, in the component.

13
00:00:52.627 --> 00:00:53.553
So what do we want to?

14
00:00:53.553 --> 00:00:59.559
So we want to be next to the name,
there we go.

15
00:00:59.559 --> 00:01:03.936
Okay, so if I render them like this,
so this is a layout thing again,

16
00:01:03.936 --> 00:01:08.159
because this pressable has a flex
direction row, and I think it has

17
00:01:08.159 --> 00:01:13.456
a justify content space between, then it
renders them in a row with space between.

18
00:01:13.456 --> 00:01:18.560
But we would like the name and
the icon to be next to each other.

19
00:01:18.560 --> 00:01:22.350
So, we'll wrap these in

20
00:01:22.350 --> 00:01:27.301
a view,
&gt;&gt; Kadi Kraman: Make

21
00:01:27.301 --> 00:01:30.050
sure we import it from react native.

22
00:01:30.050 --> 00:01:34.340
There you go, so now they are one is on
the one side, one is on the other side,

23
00:01:34.340 --> 00:01:37.830
but by default they're rendering
underneath each other, so

24
00:01:37.830 --> 00:01:40.132
we want this view to be rendered as a row.

25
00:01:40.132 --> 00:01:42.190
So let's give it a style as well.

26
00:01:42.190 --> 00:01:48.560
So styles, row,
&gt;&gt; Kadi Kraman: Row,

27
00:01:48.560 --> 00:01:51.107
we'll just do flex direction row.

28
00:01:55.107 --> 00:01:58.670
&gt;&gt; Kadi Kraman: And
I think, can you do a gap?

29
00:01:58.670 --> 00:01:59.552
I think you can.

30
00:01:59.552 --> 00:02:04.516
If you do a flex direction row,
you can use this gap property to add

31
00:02:04.516 --> 00:02:08.315
the gap between the items
that you are rendering.

32
00:02:08.315 --> 00:02:11.085
I think an example I used the margin, and

33
00:02:11.085 --> 00:02:15.659
the other hand the UI thing here is
how you handle really long text.

34
00:02:15.659 --> 00:02:23.182
So what if this shopping
list Python was really,

35
00:02:23.182 --> 00:02:27.778
really, really super long.

36
00:02:27.778 --> 00:02:32.437
Okay, so this is way too long, and
it completely messes up our UI.

37
00:02:32.437 --> 00:02:36.668
So what we can do here is,

38
00:02:36.668 --> 00:02:43.728
I think we give the item
text a flex way 1.

39
00:02:43.728 --> 00:02:52.175
And we also need to give the row a flex 1,
there we go.

40
00:02:52.175 --> 00:02:56.927
So now they fill the available container,
and also if you want to

41
00:02:56.927 --> 00:03:02.031
truncate the text that a overflow
certain amount, then in the text,

42
00:03:02.031 --> 00:03:07.223
you can actually have number of lines,
like if the number of lines 1,

43
00:03:07.223 --> 00:03:12.704
and then, [COUGH] it automatically
truncates the text it doesn't fit in.

44
00:03:12.704 --> 00:03:18.365
So this guarantee stats really
long text still works fine.

45
00:03:18.365 --> 00:03:20.840
And the last thing I've noticed that,

46
00:03:20.840 --> 00:03:25.420
I've made a mistake somewhere where
I have some padding on either side.

47
00:03:25.420 --> 00:03:27.113
So I need to remove that.

48
00:03:27.113 --> 00:03:34.115
So I think in a container,
probably just one padding horizontal.

49
00:03:34.115 --> 00:03:37.651
Opposite padding vertical, there you go.

50
00:03:37.651 --> 00:03:42.202
I think this is what I intended.

51
00:03:42.202 --> 00:03:48.285
All right, so we have our check and
let's do that, if the item is completed,

52
00:03:48.285 --> 00:03:53.725
it's a check, and if it's not completed,
it's a different icon.

53
00:03:53.725 --> 00:03:58.939
So let's do a circle,
if it's not completed.

54
00:03:58.939 --> 00:04:04.553
So is completed, we'll do a check,

55
00:04:04.553 --> 00:04:09.812
and otherwise we'll do a circle.

56
00:04:13.741 --> 00:04:15.483
&gt;&gt; Kadi Kraman: Okay, I think that's good.

57
00:04:15.483 --> 00:04:20.748
And we can customize the color as well,
so let's do,

58
00:04:20.748 --> 00:04:26.364
if it's completed let's do
a gray cuz it's grayed out,

59
00:04:26.364 --> 00:04:31.876
cuz everything in our completed
section is grayed out.

60
00:04:31.876 --> 00:04:39.468
And if it's not completed,
let's use our cerulean color.

61
00:04:39.468 --> 00:04:44.244
Okay lovely.

62
00:04:44.244 --> 00:04:48.542
I think this was the UI
in the example app.

63
00:04:48.542 --> 00:04:55.332
But hey, we've got some extra UI elements,
UI patterns that we looked at.

64
00:04:55.332 --> 00:04:58.000
So handling overly long text.

65
00:04:58.000 --> 00:05:01.353
Generally flex 1 is really helpful,

66
00:05:01.353 --> 00:05:06.189
because flex 1 means,
fill all the available space.

67
00:05:06.189 --> 00:05:12.614
So if things are overflowing,
flex 1 is usually what fixes it.

68
00:05:16.310 --> 00:05:17.163
&gt;&gt; Kadi Kraman: All right.

69
00:05:21.312 --> 00:05:24.765
&gt;&gt; Kadi Kraman: And then the last
thing that we wanted to do here,

70
00:05:24.765 --> 00:05:27.810
is we wanted to order
this by last updated.

71
00:05:27.810 --> 00:05:33.607
So what I would like to do is that, okay,

72
00:05:33.607 --> 00:05:38.907
so everything is uncompleted here.

73
00:05:38.907 --> 00:05:45.104
So if I complete this, I would like
this to move to the bottom of my list.

74
00:05:45.104 --> 00:05:50.598
And then if I uncomplete something,
I want it to move to the top of the list.

75
00:05:50.598 --> 00:05:54.074
So newest items would be first.

76
00:05:54.074 --> 00:05:57.632
And the way we do that is we're
going to write a little sorting or

77
00:05:57.632 --> 00:05:59.121
like ordering function.

78
00:05:59.121 --> 00:06:03.756
And feel free to copy this,
but this is the reason that

79
00:06:03.756 --> 00:06:08.711
we used our completed at
timestamp rather than a number.

80
00:06:08.711 --> 00:06:13.769
So this is nothing particularly fancy,
it's just a JavaScript sort function.

81
00:06:13.769 --> 00:06:19.870
But let's copy that, and
paste it into our index file.

82
00:06:25.305 --> 00:06:30.411
&gt;&gt; Kadi Kraman: [COUGH] And then this
relies on something that I haven't

83
00:06:30.411 --> 00:06:35.078
added yet,
which is the last updated timestamp.

84
00:06:35.078 --> 00:06:39.555
So in order to order between
items that you completed or

85
00:06:39.555 --> 00:06:46.091
uncompleted that doesn't [INAUDIBLE] time
each of know when they last updated.

86
00:06:46.091 --> 00:06:51.590
So let's also act this last
updated timestamp here,

87
00:06:51.590 --> 00:06:55.630
so this would be a mandotory property.

88
00:06:55.630 --> 00:07:00.857
And then whenever we update we create
a new item of shopping list or

89
00:07:00.857 --> 00:07:03.518
we toggle its completion state,

90
00:07:03.518 --> 00:07:07.902
we also update the timestamp
when it was last updated.

91
00:07:07.902 --> 00:07:14.875
So here in handle submit, let's do
last updated, I'll just copy this.

92
00:07:14.875 --> 00:07:19.374
Last updated timestamp will be date.now.

93
00:07:23.014 --> 00:07:26.874
&gt;&gt; Kadi Kraman: Love it, and then
the same in handle to who will complete.

94
00:07:26.874 --> 00:07:31.164
So regardless of whether we're
toggling it complete or uncomplete,

95
00:07:31.164 --> 00:07:34.301
we're just updating
the last updated timestamp.

96
00:07:34.301 --> 00:07:39.221
So whenever we're now interacting
with our shopping list,

97
00:07:39.221 --> 00:07:44.920
we're going to be like updating this
last updated timestamp as well.

98
00:07:44.920 --> 00:07:52.663
So lemme just talk you through
what this ordering function does.

99
00:07:52.663 --> 00:07:56.761
Using the JavaScript array .sort method,
and

100
00:07:56.761 --> 00:08:01.985
the way that works is that you
pass in a sorting function, and

101
00:08:01.985 --> 00:08:07.632
this gives you item A and item B,
so in our case item 1 and item 2.

102
00:08:07.632 --> 00:08:12.886
And you return a number which
defines whether item A or

103
00:08:12.886 --> 00:08:17.438
the first item should be a for
the second item or

104
00:08:17.438 --> 00:08:21.873
no, so
if the number you return is positive,

105
00:08:21.873 --> 00:08:25.759
then item 1 needs to be before item 2.

106
00:08:25.759 --> 00:08:31.126
And if it's negative,
then item 2 should be before item 1,

107
00:08:31.126 --> 00:08:37.127
if it's 0 then they are off like equal,
they are pretty much equal.

108
00:08:37.127 --> 00:08:41.115
And the reason this is
actually really cool, and

109
00:08:41.115 --> 00:08:46.366
the reason we use timestamps is that,
this number can be as big or

110
00:08:46.366 --> 00:08:51.441
as small as you want, so
it can be minus 1000 or plus 34.

111
00:08:51.441 --> 00:08:55.220
Which means that we can
subtract timestamps

112
00:08:55.220 --> 00:09:00.128
to automatically make one
item render before the other.

113
00:09:00.128 --> 00:09:03.321
So what we're doing here is,

114
00:09:03.321 --> 00:09:08.303
we're doing if both of them are completed,
so

115
00:09:08.303 --> 00:09:16.883
they'll be at the bottom of the list then
we render the last updated item first.

116
00:09:16.883 --> 00:09:20.116
If one of them isn't completed,
that's pretty obvious, so

117
00:09:20.116 --> 00:09:24.545
the first one is completed, the second
one isn't, first one gets rendered first.

118
00:09:24.545 --> 00:09:29.394
If the second one is completed, first one
isn't, second one gets rendered first.

119
00:09:29.394 --> 00:09:33.202
And otherwise, if NIDRhythm are completed,

120
00:09:33.202 --> 00:09:38.577
then we can again do our fancy
subtraction to all them correctly.

121
00:09:38.577 --> 00:09:43.931
So if you haven't reload now,
just to make sure that

122
00:09:43.931 --> 00:09:50.876
all the new items that you create
have this last updated timestamp.

123
00:09:50.876 --> 00:09:56.164
And lemme just add some my favorites,

124
00:09:56.164 --> 00:10:02.773
coffee, tea, milk, sugar sparkling water,

125
00:10:02.773 --> 00:10:07.740
or I should write Lacroix, right.

126
00:10:07.740 --> 00:10:12.902
La croix there we go.

127
00:10:12.902 --> 00:10:15.710
So I've got my shopping list again, and

128
00:10:15.710 --> 00:10:20.261
we're going to order it just before
we pass it into our flat list.

129
00:10:20.261 --> 00:10:23.036
So enough of that list in the data,

130
00:10:23.036 --> 00:10:28.602
let's just wrap this shopping list
array into order shopping list.

131
00:10:28.602 --> 00:10:32.970
So now,
if I mark the sparkling water as complete,

132
00:10:32.970 --> 00:10:36.029
it will go at the bottom of the list.

133
00:10:36.029 --> 00:10:41.608
So marking the sugar as complete, it will
go just above the sparkling water etc.

134
00:10:41.608 --> 00:10:43.786
And now if I uncomplete it,

135
00:10:43.786 --> 00:10:48.444
this will go at the top of
the list as if I've just added it.

