WEBVTT

1
00:00:00.190 --> 00:00:03.410
&gt;&gt; Kadi Kraman: Next up,
let's look at Modal Navigations.

2
00:00:03.410 --> 00:00:08.938
So rendering a screen as a modal means
rendering it on top of other content.

3
00:00:08.938 --> 00:00:14.630
So important thing to note that in order
for this to work, the modal needs to be

4
00:00:14.630 --> 00:00:20.514
defined above or adjacent to the screens
it's being rendered on top of.

5
00:00:20.514 --> 00:00:24.728
So, in particular,
if you have a bottom tabs navigator and

6
00:00:24.728 --> 00:00:30.394
you have a stack inside your bottom tabs
and you make one of those screens modal.

7
00:00:30.394 --> 00:00:35.154
It won't get rendered on top of your app,
you need to define it at the top level.

8
00:00:36.924 --> 00:00:40.684
So, in our case,
our structure is quite flat.

9
00:00:40.684 --> 00:00:47.519
So,
&gt;&gt; Kadi Kraman: We

10
00:00:47.519 --> 00:00:53.954
can change any of these screens to be
rendered modally by using the options.

11
00:00:53.954 --> 00:00:58.394
So I've actually not even
defined the screens here.

12
00:00:58.394 --> 00:01:00.198
And actually, this is,
again, a good example.

13
00:01:00.198 --> 00:01:03.972
So this is something that throws off
people initially because especially when

14
00:01:03.972 --> 00:01:05.916
you're coming from React navigation,

15
00:01:05.916 --> 00:01:09.318
you think that you need to define
the screens for them to exist.

16
00:01:09.318 --> 00:01:13.174
But because we are using power system
based routing, you'll see that all this

17
00:01:13.174 --> 00:01:16.998
navigation works even though these
screens aren't even defined.

18
00:01:16.998 --> 00:01:24.366
So the only reason we really define them
is to add additional properties here.

19
00:01:24.366 --> 00:01:30.038
So let me copy these so
I could do our counter and our idea.

20
00:01:30.038 --> 00:01:37.416
So counter idea and this will change this

21
00:01:37.416 --> 00:01:42.624
heading that is rendered and

22
00:01:42.624 --> 00:01:49.354
let's pass in presentation modal.

23
00:01:51.164 --> 00:01:56.800
So, whoever asked earlier about how
to do your own customer alerts,

24
00:01:56.800 --> 00:01:59.144
then this is how you do them.

25
00:01:59.144 --> 00:02:03.340
So you can render a screen
as a transparent modal, and

26
00:02:03.340 --> 00:02:07.639
then the content of
the model will be the alert.

27
00:02:07.639 --> 00:02:09.367
So let's do modal and

28
00:02:09.367 --> 00:02:15.459
now if I go to counter you'll actually
see that it gets rendered on top.

29
00:02:15.459 --> 00:02:19.649
And if I do another presentation
modal here as well,

30
00:02:21.782 --> 00:02:23.162
&gt;&gt; Kadi Kraman: Then, there you go,

31
00:02:23.162 --> 00:02:26.054
you get the modals all the way down.

32
00:02:26.054 --> 00:02:28.726
And the interesting thing about
this is that on Android, again,

33
00:02:28.726 --> 00:02:30.404
this actually looks different.

34
00:02:30.404 --> 00:02:35.724
So, this is rendering a modal, but
it looks similar to the screen.

35
00:02:35.724 --> 00:02:42.850
So this, again, is not a bug, it's just
the Android appropriate navigation.

36
00:02:42.850 --> 00:02:51.140
You can change how these screens
are presented by using the animation.

37
00:02:52.490 --> 00:02:56.025
So there's a couple,
you can configure your own animations,

38
00:02:56.025 --> 00:03:00.247
you can build your own, this is supported,
but there's a couple here.

39
00:03:00.247 --> 00:03:04.417
That's our built in, so for example,
I could use a fade animation.

40
00:03:04.417 --> 00:03:07.912
So if I go to counter,
this will render as a modal, but

41
00:03:07.912 --> 00:03:11.397
then it will fade in the other screen.

42
00:03:11.397 --> 00:03:16.727
So let's try a different one slide from
bottom, let's do that one, I guess.

43
00:03:16.727 --> 00:03:20.465
So now we get slide from bottom here and
then on Android.

44
00:03:20.465 --> 00:03:23.445
You actually get this to
slide from bottom as well.

45
00:03:23.445 --> 00:03:28.015
So if you do want it to slide from bottom
on the Android, this is how you do it.

46
00:03:28.015 --> 00:03:32.685
And then finally,
we have our bottom tabs navigation.

47
00:03:32.685 --> 00:03:36.535
So this is something you see
in almost every mobile app.

48
00:03:36.535 --> 00:03:41.105
So bottom tabs,
which may have many many screens inside.

49
00:03:42.965 --> 00:03:48.360
So in the days of not having extra router
and doing this sort React navigation,

50
00:03:48.360 --> 00:03:51.745
this would've actually
been really tedious.

51
00:03:51.745 --> 00:03:56.660
And it's the reason that I didn't
include bottom nabs in my last intro to

52
00:03:56.660 --> 00:04:01.174
the React Native workshop because
it would've taken ages to do and

53
00:04:01.174 --> 00:04:03.259
be quite complicated.

54
00:04:03.259 --> 00:04:05.945
But we are using expo-router, so

55
00:04:05.945 --> 00:04:09.839
I'm getting rid of my
presentation modals here.

56
00:04:11.459 --> 00:04:18.259
So all we need to do to convert this stack
navigator into a bottom tabs navigator,

57
00:04:18.259 --> 00:04:23.460
is you're gonna select all these
stacks change them to tabs.

58
00:04:26.167 --> 00:04:28.132
&gt;&gt; Kadi Kraman: There you go.

59
00:04:28.132 --> 00:04:32.952
And it's amazing, you can now navigate
between them, you have some bottom tabs.

60
00:04:32.952 --> 00:04:37.440
And things to note is that, the previous
navigation methods that we added, so

61
00:04:37.440 --> 00:04:40.083
the navigation using a link, this.

62
00:04:40.083 --> 00:04:43.632
This still works, and the user-routine,
like programmatic navigation,

63
00:04:43.632 --> 00:04:44.823
this still works.

64
00:04:44.823 --> 00:04:48.803
So you can navigate between
the screens the same way.

65
00:04:48.803 --> 00:04:52.743
Obviously, there is no animation here
because we're using button tabs.

66
00:04:55.043 --> 00:04:59.760
All right, but we can actually
remove these navigation buttons

67
00:04:59.760 --> 00:05:02.478
because we have our bottom tabs now.

68
00:05:08.325 --> 00:05:12.557
&gt;&gt; Kadi Kraman: .And remove it
from the index screen as well.

69
00:05:15.501 --> 00:05:16.338
&gt;&gt; Kadi Kraman: Lovely and

70
00:05:16.338 --> 00:05:22.401
what would the bottom tabs be without
some beautiful bottom tabs icons.

71
00:05:22.401 --> 00:05:27.366
So by default you're getting this triangle
that tells you I don't have an icon,

72
00:05:27.366 --> 00:05:29.301
so we can choose one.

73
00:05:29.301 --> 00:05:32.889
And thankfully we can use our
expo SVG icon library, or

74
00:05:32.889 --> 00:05:34.921
we can render anything there.

75
00:05:34.921 --> 00:05:36.548
It's just a react component,

76
00:05:36.548 --> 00:05:39.501
but we're going to use some
icons from the SVG library.

77
00:05:41.706 --> 00:05:44.166
So, did I list which icons I chose?

78
00:05:44.166 --> 00:05:48.291
I did not but
if we go to @expo/vector-icons,

79
00:05:48.291 --> 00:05:50.711
I think I searched for list.

80
00:05:54.121 --> 00:05:59.316
&gt;&gt; Kadi Kraman: I think this was it,
all right, so we have our list icon.

81
00:05:59.316 --> 00:06:05.614
You can choose a different icon and
let's go to our layout file and import it.

82
00:06:08.244 --> 00:06:13.284
And we can pass in the bottom tabs
icons from our options object.

83
00:06:15.974 --> 00:06:17.024
So let's copy this.

84
00:06:18.894 --> 00:06:24.427
And the prop with the key
that we're looking for,

85
00:06:24.427 --> 00:06:28.248
sorry, is a bottom tabBarIcon and

86
00:06:28.248 --> 00:06:34.303
this is a function that
returns a React component.

87
00:06:34.303 --> 00:06:39.433
So you can pass in anything here,
you can pass in an image or

88
00:06:39.433 --> 00:06:44.066
a text or your own component but
let's just pass in,

89
00:06:46.966 --> 00:06:52.812
&gt;&gt; Kadi Kraman: This icon, lovely.

90
00:06:52.812 --> 00:06:58.692
Okay, so one thing you notice that
when I navigate to these other tabs,

91
00:06:58.692 --> 00:07:02.500
then the icon just changes color to blue.

92
00:07:02.500 --> 00:07:07.431
But when I navigate to the icon that I've
just added, then the text changes color,

93
00:07:07.431 --> 00:07:09.830
but the icon doesn't.

94
00:07:09.830 --> 00:07:15.650
And we can actually use the color
from this tab or icon function.

95
00:07:15.650 --> 00:07:18.360
So if I hover over it,
it tells you the props that it passes in.

96
00:07:18.360 --> 00:07:20.862
So it tells me whether it's focused,

97
00:07:20.862 --> 00:07:25.594
the color that it should currently be and
then also the size.

98
00:07:25.594 --> 00:07:31.474
So let's use the color and
the size, and let's pass these in.

99
00:07:37.762 --> 00:07:38.967
&gt;&gt; Kadi Kraman: It's lovely.

100
00:07:43.219 --> 00:07:48.166
&gt;&gt; Kadi Kraman: And let me just
change this to an explicit tone,

101
00:07:48.166 --> 00:07:51.515
so we don't need turn keyword.

102
00:07:54.145 --> 00:07:58.727
&gt;&gt; Kadi Kraman: There we go, all right,
and then we'll want to do the same for

103
00:07:58.727 --> 00:08:00.765
the counter and the ID app.

104
00:08:04.649 --> 00:08:07.850
&gt;&gt; Kadi Kraman: So for the counter,

105
00:08:07.850 --> 00:08:13.442
I think we can look at our clock.

106
00:08:13.442 --> 00:08:14.639
I think this one looks good.

107
00:08:18.540 --> 00:08:21.113
&gt;&gt; Kadi Kraman: And let's copy it.

108
00:08:24.552 --> 00:08:29.695
&gt;&gt; Kadi Kraman: TabBarIcon and
same as before,

109
00:08:29.695 --> 00:08:35.221
we'll get the color and the size.

110
00:08:35.221 --> 00:08:39.838
And passes-in.

111
00:08:45.360 --> 00:08:47.503
&gt;&gt; Kadi Kraman: Use the correct braces.

112
00:08:49.243 --> 00:08:53.273
There we go and then lastly the idea,
I think I used a lightbulb, yeah.

113
00:08:54.343 --> 00:08:55.573
Let's go for a lightbulb.

114
00:08:57.893 --> 00:09:00.407
So, lightbulb.

115
00:09:04.935 --> 00:09:11.143
&gt;&gt; Kadi Kraman: And this one is good and
we'll copy it, import it.

116
00:09:21.811 --> 00:09:24.380
&gt;&gt; Kadi Kraman: And tabBarIcon,

117
00:09:29.976 --> 00:09:32.084
&gt;&gt; Kadi Kraman: De-structure the color and

118
00:09:32.084 --> 00:09:33.933
size, and pass them in.

119
00:09:41.649 --> 00:09:46.656
&gt;&gt; Kadi Kraman: Now, the reason that
you use these passed-in colours,

120
00:09:46.656 --> 00:09:51.994
is actually that you can
define them at a global level.

121
00:09:51.994 --> 00:09:55.505
So if you wanna change
what color you're using,

122
00:09:55.505 --> 00:09:59.884
in this top-level tabs component,
it has options as well.

123
00:09:59.884 --> 00:10:04.009
So you can use screen options and here,

124
00:10:04.009 --> 00:10:07.891
you can do tabBarActiveTintColor.

125
00:10:07.891 --> 00:10:10.526
So there's also an inactive tint color,

126
00:10:10.526 --> 00:10:13.611
unless you use our
beautiful cerulean color.

127
00:10:13.611 --> 00:10:19.909
So theme, import theme, and colorCerulean.

128
00:10:22.256 --> 00:10:25.708
&gt;&gt; Kadi Kraman: There you go and
you can see that both the text and

129
00:10:25.708 --> 00:10:28.222
the icon actually changed color.

