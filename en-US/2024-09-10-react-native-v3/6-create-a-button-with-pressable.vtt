WEBVTT

1
00:00:00.190 --> 00:00:02.419
&gt;&gt; Kadi Kraman: Next up,
we're going to create a delete button.

2
00:00:02.419 --> 00:00:04.310
So we're gonna look at some touchables.

3
00:00:04.310 --> 00:00:07.611
So if you scroll to the bottom,
you see what we're going to build.

4
00:00:07.611 --> 00:00:12.167
So we're going to have a DELETE
button to the right of our item.

5
00:00:12.167 --> 00:00:17.530
And we're going to have this
confirmation alert if you press on it.

6
00:00:17.530 --> 00:00:22.799
So, react-native comes
with a Button element and

7
00:00:22.799 --> 00:00:25.501
it's almost never used.

8
00:00:25.501 --> 00:00:30.828
I'll show you why,
cuz if I render this Button

9
00:00:30.828 --> 00:00:35.819
title,
&gt;&gt; Kadi Kraman: It looks like this.

10
00:00:35.819 --> 00:00:38.216
It looks slightly different on Android,

11
00:00:38.216 --> 00:00:42.127
it basically renders a native-looking
button for each platform.

12
00:00:42.127 --> 00:00:46.800
And you can't customize it at all,
you can't give it any kind of styles.

13
00:00:46.800 --> 00:00:49.711
And this is why we only
tend to use this Button

14
00:00:49.711 --> 00:00:53.417
element if we're just testing
out something locally.

15
00:00:53.417 --> 00:00:57.096
But generally, for
production apps, you don't use it.

16
00:00:57.096 --> 00:01:01.448
But the way that you actually
make something into a button in

17
00:01:01.448 --> 00:01:07.180
react-native is you wrap it in
a Touchable or a Pressable components.

18
00:01:07.180 --> 00:01:11.695
So, the most commonly used ones

19
00:01:11.695 --> 00:01:17.557
are a TouchableOpacity and a Pressable.

20
00:01:22.246 --> 00:01:25.857
&gt;&gt; Kadi Kraman: So
let me create some text here,

21
00:01:27.992 --> 00:01:28.903
&gt;&gt; Kadi Kraman: Delete,

22
00:01:31.595 --> 00:01:34.084
&gt;&gt; Kadi Kraman: And let's wrap this in

23
00:01:34.084 --> 00:01:35.659
a Pressable.

24
00:01:35.659 --> 00:01:41.239
So Pressable is kind of the new
generation of Touchable components.

25
00:01:41.239 --> 00:01:48.133
Let me do an onPress,
&gt;&gt; Kadi Kraman: And this takes a function,

26
00:01:48.133 --> 00:01:53.311
and we can console.log,
just console.log something.

27
00:01:57.749 --> 00:02:00.172
&gt;&gt; Kadi Kraman: So
now when I press it, actually,

28
00:02:00.172 --> 00:02:02.941
I wonder if I can open my terminal here.

29
00:02:02.941 --> 00:02:05.908
I don't really use the VS Code terminal.

30
00:02:05.908 --> 00:02:08.305
Terminal &gt; New Terminal, there we go.

31
00:02:10.508 --> 00:02:12.541
&gt;&gt; Kadi Kraman: So let's do yarn start.

32
00:02:12.541 --> 00:02:15.401
All right, so
I have my terminal running here.

33
00:02:15.401 --> 00:02:16.326
Yeah, there we go.

34
00:02:16.326 --> 00:02:18.318
So this console.log gets executed.

35
00:02:18.318 --> 00:02:23.340
And this is kinda the new
generation of Pressable components.

36
00:02:23.340 --> 00:02:27.780
It has some additional
props that you can use.

37
00:02:31.551 --> 00:02:34.050
&gt;&gt; Kadi Kraman: There you go.
You can have onHoverIn, HoverOut, onPress,

38
00:02:34.050 --> 00:02:35.066
PressIn, PressOut.

39
00:02:35.066 --> 00:02:39.044
You can also have passing
custom styles based on

40
00:02:39.044 --> 00:02:42.232
whether the button is pressed or not.

41
00:02:42.232 --> 00:02:48.055
But let's keep it simple and
use a TouchableOpacity.

42
00:02:48.055 --> 00:02:53.022
And this is very handy and very popular,
because when you press something,

43
00:02:53.022 --> 00:02:55.907
then it automatically applies an opacity.

44
00:02:55.907 --> 00:02:59.087
I always find the default
opacity to be a bit intense.

45
00:02:59.087 --> 00:03:03.615
So you can actually change this
with the activeOpacity prop.

46
00:03:03.615 --> 00:03:08.828
So if we do, let's do 0.8, so 80%.

47
00:03:08.828 --> 00:03:10.648
Yeah, there we go.

48
00:03:10.648 --> 00:03:14.019
So there's still opacity,
but it's less intense.

49
00:03:17.228 --> 00:03:20.960
&gt;&gt; Kadi Kraman: So we're gonna create
a button with a black background,

50
00:03:20.960 --> 00:03:22.836
so let's add a colorBlack.

51
00:03:24.731 --> 00:03:27.567
&gt;&gt; Kadi Kraman: So this is 000.

52
00:03:36.962 --> 00:03:43.057
&gt;&gt; Kadi Kraman: And
let's put this button inside our item.

53
00:03:43.057 --> 00:03:45.023
So it will be here.

54
00:03:45.023 --> 00:03:46.467
There we go.

55
00:03:46.467 --> 00:03:49.908
But they're rendered underneath
each other, which is inconvenient.

56
00:03:49.908 --> 00:03:52.068
So, how do we render them in a row?

57
00:03:52.068 --> 00:03:55.436
Well, we are in the world of flex, so

58
00:03:55.436 --> 00:04:00.776
in our itemContainer,
let's do a flexDirection of row.

59
00:04:00.776 --> 00:04:02.129
There you go.

60
00:04:02.129 --> 00:04:06.847
Then they get rendered next to each other,
but we want the Delete button to be

61
00:04:06.847 --> 00:04:10.473
at the end of the screen and
the copy to be on the other side.

62
00:04:10.473 --> 00:04:17.098
So let's do a justifyContent,
and you want space between.

63
00:04:17.098 --> 00:04:19.681
So this renders them with a space between.

64
00:04:22.620 --> 00:04:24.687
&gt;&gt; Kadi Kraman: And also, to make sure
that these are centered, actually,

65
00:04:24.687 --> 00:04:27.238
you can't see it that much because
they're not next to each other now, but

66
00:04:27.238 --> 00:04:28.430
they're not actually centered.

67
00:04:28.430 --> 00:04:31.589
So if we do alignItems center,

68
00:04:31.589 --> 00:04:36.820
then they're actually
centered on the same line.

69
00:04:38.760 --> 00:04:40.498
And now, let's do our space between.

70
00:04:43.356 --> 00:04:46.137
&gt;&gt; Kadi Kraman: All right,
so this TouchableOpacity,

71
00:04:46.137 --> 00:04:48.931
we want to give this a black background.

72
00:04:48.931 --> 00:04:54.490
So let's do a style={styles.button} and

73
00:04:54.490 --> 00:04:57.489
add a button style here.

74
00:05:01.880 --> 00:05:07.655
&gt;&gt; Kadi Kraman: And let's give this
a backgroundColor of theme.colorBlack.

75
00:05:13.493 --> 00:05:15.703
&gt;&gt; Kadi Kraman: Obviously,
our text isn't showing up now, so

76
00:05:15.703 --> 00:05:17.478
we'll need to make the text, right?

77
00:05:17.478 --> 00:05:23.711
So for the text,
let's do a style={styles.buttonText}.

78
00:05:23.711 --> 00:05:28.963
Let's create this buttonText

79
00:05:28.963 --> 00:05:37.044
style to have the color
be theme.colorWhite.

80
00:05:37.044 --> 00:05:42.142
Beautiful, and back to our button,
let's add some spacing.

81
00:05:42.142 --> 00:05:44.666
So let's do a padding of 8.

82
00:05:46.256 --> 00:05:47.752
And there you go.

83
00:05:47.752 --> 00:05:54.854
And borderRadiuses tend
to look nice on buttons,

84
00:05:54.854 --> 00:06:00.036
so let's do a borderRadius of 6.

85
00:06:00.036 --> 00:06:04.629
So these numbers might look random,
but I tend to have a convention,

86
00:06:04.629 --> 00:06:08.206
I guess, for myself,
where I only use even numbers.

87
00:06:08.206 --> 00:06:12.598
So I tend to use 2, 4, 8,

88
00:06:12.598 --> 00:06:16.996
12, 16, 24, 42.

89
00:06:16.996 --> 00:06:21.983
And I think it's just
conventions from styling guides.

90
00:06:21.983 --> 00:06:26.916
And then for the borderRadius, I found
that borderRadius 6 just tends to look

91
00:06:26.916 --> 00:06:30.447
nice [LAUGH] in most cases, so
I tend to default for that.

92
00:06:30.447 --> 00:06:35.737
So lastly, for our buttonText,
let's make it bold,

93
00:06:35.737 --> 00:06:39.078
so let's do a fontWeight of bold.

94
00:06:42.646 --> 00:06:47.379
&gt;&gt; Kadi Kraman: And let's make it
uppercase, so we can use textTransform.

95
00:06:50.439 --> 00:06:55.438
&gt;&gt; Kadi Kraman: Uppercase to
make it an uppercase button.

96
00:06:55.438 --> 00:06:59.128
And finally,
I find that the letters are a bit cramped.

97
00:06:59.128 --> 00:07:03.344
So we can use letterSpacing to actually
add some spacing between the letters.

98
00:07:03.344 --> 00:07:07.993
So if we do letterSpacing: 1, you can see
that it kind of breaks them apart a bit.

99
00:07:07.993 --> 00:07:09.144
It looks a bit pretty.

100
00:07:15.418 --> 00:07:18.384
&gt;&gt; Kadi Kraman: All right, so
we've created this button now,

101
00:07:18.384 --> 00:07:21.064
let's also add this alert confirmation.

102
00:07:22.314 --> 00:07:26.576
So alert is a built-in
component in React Native, so

103
00:07:26.576 --> 00:07:29.806
you can import alert from React Native.

104
00:07:35.324 --> 00:07:38.708
&gt;&gt; Kadi Kraman: And
let's create a function that is inside our

105
00:07:38.708 --> 00:07:42.626
React component, so
let's do const handleDelete.

106
00:07:42.626 --> 00:07:44.452
So let's do an arrow function.

107
00:07:44.452 --> 00:07:49.552
And again, whether you use arrow functions
or function functions, that is up to you.

108
00:07:49.552 --> 00:07:53.222
But I'll just tell you the convention
that I am currently favoring,

109
00:07:53.222 --> 00:07:57.495
which is that if you have components,
they will be function functions.

110
00:07:57.495 --> 00:08:01.434
And then things inside the components,
like low utility functions,

111
00:08:01.434 --> 00:08:03.179
I tend to use arrow functions.

112
00:08:03.179 --> 00:08:08.254
So just my preference, but there's no
particular reason you have to follow it.

113
00:08:08.254 --> 00:08:12.643
All right, so let's do an Alert.alert.

114
00:08:15.910 --> 00:08:22.389
&gt;&gt; Kadi Kraman: Are you sure
you want to delete this?

115
00:08:22.389 --> 00:08:29.585
And in our TouchableOpacity,
when we onPress, we can call this alert.

116
00:08:29.585 --> 00:08:33.925
And this is a React thing, but if you
have a function that doesn't take any

117
00:08:33.925 --> 00:08:38.765
arguments, all the arguments are the same
as what I passed in from the component.

118
00:08:38.765 --> 00:08:43.168
You can actually omit this arrow function,
nonsense, and

119
00:08:43.168 --> 00:08:48.019
just put handleDelete here and
it will call itself.

120
00:08:48.019 --> 00:08:51.363
And now, if I do DELETE,
I'll get a little alert.

121
00:08:54.789 --> 00:08:57.210
&gt;&gt; Kadi Kraman: So
this alert just has one text, but

122
00:08:57.210 --> 00:09:00.169
we wanna give some subtext as well.

123
00:09:00.169 --> 00:09:05.056
So we can pass in a second argument for
some subtext,

124
00:09:05.056 --> 00:09:08.731
so let's do, it will be gone for good.

125
00:09:16.166 --> 00:09:16.683
&gt;&gt; Kadi Kraman: There you go.

126
00:09:16.683 --> 00:09:19.066
Now, we have some additional text here,
but

127
00:09:19.066 --> 00:09:21.667
we don't have the confirmation buttons.

128
00:09:21.667 --> 00:09:27.253
So we can pass in a third argument, and
this will be an array of options for

129
00:09:27.253 --> 00:09:30.198
the buttons that you want to display.

130
00:09:30.198 --> 00:09:33.317
So this will be an array of objects.

131
00:09:33.317 --> 00:09:36.616
So the first one, let's say, text: Yes.

132
00:09:36.616 --> 00:09:38.835
So yes, I do want to delete it.

133
00:09:38.835 --> 00:09:44.700
Then we can give it an onPress, so if the
user chooses to delete it, what do we do?

134
00:09:44.700 --> 00:09:46.172
Let's pass in an arrow function.

135
00:09:46.172 --> 00:09:50.528
And then for now,
let's just do a console.log of Ok,

136
00:09:50.528 --> 00:09:54.424
deleting, and
we're gonna fill this in later.

137
00:09:54.424 --> 00:09:58.966
And we can also give it
a style to make it red, so

138
00:09:58.966 --> 00:10:02.353
we can say that it is destructive.

139
00:10:03.813 --> 00:10:09.030
And the second button we want is a Cancel
button, so let's do a text: Cancel,

140
00:10:11.995 --> 00:10:15.112
&gt;&gt; Kadi Kraman: style: cancel.

141
00:10:16.798 --> 00:10:17.528
&gt;&gt; Kadi Kraman: There we go.

142
00:10:17.528 --> 00:10:22.001
So now if I choose DELETE,
we actually get this Cancel and Yes.

143
00:10:22.001 --> 00:10:24.308
So if I do Cancel, I don't get any logs.

144
00:10:24.308 --> 00:10:29.904
And if I do Yes, it executes the function
that was passed in with the onPress.

145
00:10:29.904 --> 00:10:33.087
So now, if I run this on a Android and
I do DELETE,

146
00:10:33.087 --> 00:10:37.612
you actually notice that this alert
looks different than my iOS one.

147
00:10:37.612 --> 00:10:41.872
And that's because it's recognitive,
it's using a platform-specific alert,

148
00:10:41.872 --> 00:10:42.654
which is cool.

149
00:10:42.654 --> 00:10:44.673
&gt;&gt; Speaker 2: I want to
customize the alert,

150
00:10:44.673 --> 00:10:47.661
would I have to build a custom dialogue?

151
00:10:47.661 --> 00:10:50.145
&gt;&gt; Kadi Kraman: Yes, yeah,
if you want to customize the alert,

152
00:10:50.145 --> 00:10:51.971
you would build a custom dialogue.

153
00:10:51.971 --> 00:10:58.094
It's not that tricky to do that, mostly,
you would do a full screen modal.

154
00:10:58.094 --> 00:10:58.984
Do we do modals here?

155
00:10:58.984 --> 00:11:01.159
We do actually go through
what a modal looks like.

156
00:11:01.159 --> 00:11:05.250
You would do a full screen modal
with a transparent background, and

157
00:11:05.250 --> 00:11:09.466
then you can do a small alert with
whatever styling that you want.

158
00:11:09.466 --> 00:11:12.434
It's actually a good idea to commit
when you get to a point that

159
00:11:12.434 --> 00:11:13.470
things are working.

160
00:11:13.470 --> 00:11:18.130
Because then when you inevitably try
things that make things not to work,

161
00:11:18.130 --> 00:11:20.996
you can always go back
in time to start again.

