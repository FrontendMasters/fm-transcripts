WEBVTT

1
00:00:00.320 --> 00:00:04.390
&gt;&gt; Kadi Kraman: Now we're going
to build our counter feature.

2
00:00:04.390 --> 00:00:06.130
So I'll call this counter.

3
00:00:06.130 --> 00:00:10.923
I'm not very good at naming things, but
basically what it's going to be, is

4
00:00:10.923 --> 00:00:16.340
it's going to be a reminder for you to do
something that you need to do regularly.

5
00:00:16.340 --> 00:00:20.310
So, for example, wash the car or
take out the bins or

6
00:00:20.310 --> 00:00:23.931
change your bed sheets,
something like that.

7
00:00:25.341 --> 00:00:27.881
So we're going to build a UI.

8
00:00:30.171 --> 00:00:32.491
So it will look a little bit like this.

9
00:00:32.491 --> 00:00:34.791
So this is what we're going to start with.

10
00:00:34.791 --> 00:00:39.215
So we're going to say that the thing that
you need to do is do in how many seconds

11
00:00:39.215 --> 00:00:43.077
how many minutes,
how many hours, how many days.

12
00:00:43.077 --> 00:00:46.873
And when the thing that you're
meant to do is overdue,

13
00:00:46.873 --> 00:00:50.137
we're going to have this garish red color.

14
00:00:50.137 --> 00:00:55.447
So you would really see the thing you're
meant to do, you're late doing it.

15
00:00:55.447 --> 00:00:59.898
And the idea is that you could press
this button saying that you've done

16
00:00:59.898 --> 00:01:02.493
the thing and the countdown will reset and

17
00:01:02.493 --> 00:01:06.892
you'll schedule a notification in
the future for you to do the thing.

18
00:01:09.692 --> 00:01:16.962
So to start off, how do we render
a UI that updates every second?

19
00:01:16.962 --> 00:01:21.604
So this is where it actually get
more complicated now with React

20
00:01:21.604 --> 00:01:26.772
compiler because React compiler,
being the clever thing that it is,

21
00:01:26.772 --> 00:01:31.341
doesn't update UI elements
that haven't changed in state.

22
00:01:31.341 --> 00:01:36.315
So that's something to bear in mind if
you're building a UI that needs to update

23
00:01:36.315 --> 00:01:37.291
every second.

24
00:01:39.671 --> 00:01:43.704
Let's open Our counter screen.

25
00:01:43.704 --> 00:01:45.924
So this is this index screen.

26
00:01:50.414 --> 00:01:56.404
So let's just see how do we create
a component that just renders seconds,

27
00:01:56.404 --> 00:01:59.814
elapsed, so update every second.

28
00:01:59.814 --> 00:02:02.572
I'll do a useState here.

29
00:02:03.862 --> 00:02:06.192
So useState.

30
00:02:07.532 --> 00:02:09.662
And let's start with 0.

31
00:02:09.662 --> 00:02:16.982
And this will be our seconds elapsed.

32
00:02:16.982 --> 00:02:20.760
And set seconds elapsed.

33
00:02:25.497 --> 00:02:28.896
&gt;&gt; Kadi Kraman: So, we're not
gonna keep this code indefinitely.

34
00:02:28.896 --> 00:02:31.882
Just gonna render this in the text so
we can see it on the screen.

35
00:02:34.799 --> 00:02:39.646
&gt;&gt; Kadi Kraman: All right, I want update
this set seconds elapsed every second.

36
00:02:39.646 --> 00:02:44.006
And to do that we're going to use
a use effect and an integral.

37
00:02:45.196 --> 00:02:48.266
Two very dangerous things
to be used sparingly.

38
00:02:48.266 --> 00:02:50.316
So let's do a use effect.

39
00:02:50.316 --> 00:02:53.285
Remember this takes in a function and

40
00:02:53.285 --> 00:02:59.346
we only want to run this once when
the component is initially rendered.

41
00:02:59.346 --> 00:03:01.569
So we'll pass in this empty array.

42
00:03:01.569 --> 00:03:07.858
Now we want to create
a Node.js interval So

43
00:03:07.858 --> 00:03:11.528
we'll do setInterval,

44
00:03:11.528 --> 00:03:16.081
so this also takes a function.

45
00:03:21.929 --> 00:03:24.129
&gt;&gt; Kadi Kraman: And
the second argument is, so

46
00:03:24.129 --> 00:03:28.613
the first argument is something
to do after this interval, and

47
00:03:28.613 --> 00:03:34.438
the second argument is how long you
want the interval to be in milliseconds.

48
00:03:34.438 --> 00:03:38.638
So we want it to be one second,
which is 1000 milliseconds.

49
00:03:40.008 --> 00:03:43.853
So in this Interval,
we want to set seconds elapsed.

50
00:03:45.743 --> 00:03:50.668
And in this case, so we can't use
the seconds elapsed from the used state

51
00:03:50.668 --> 00:03:55.998
because this function only has access to
the things that are in the use effect,

52
00:03:55.998 --> 00:03:58.663
so this is not going to update.

53
00:03:58.663 --> 00:04:02.772
But use state functions with the setState,

54
00:04:02.772 --> 00:04:08.390
you can also pass in a function
rather than the new value.

55
00:04:08.390 --> 00:04:11.550
So the function tells you
what the current value is.

56
00:04:11.550 --> 00:04:16.060
So we'll take the current value and
we'll increment it by 1.

57
00:04:16.060 --> 00:04:18.185
So val + 1.

58
00:04:20.915 --> 00:04:24.399
&gt;&gt; Kadi Kraman: And the last thing, and
this is very important if you're ever

59
00:04:24.399 --> 00:04:28.821
dealing with intervals or anything that
you're setting up to do asynchronous

60
00:04:28.821 --> 00:04:33.688
things in the background, you want to make
sure that you tidy up after yourself.

61
00:04:33.688 --> 00:04:38.378
So you need to clear the interval
when the component gets unwanted.

62
00:04:38.378 --> 00:04:43.281
So this set interval actually returns
a number, which is through interval ID.

63
00:04:44.351 --> 00:04:47.146
So cons, interval ID.

64
00:04:47.146 --> 00:04:52.959
I guess you can see this
is a node.Js timeout,

65
00:04:52.959 --> 00:05:00.125
and in a use effect,
you can actually return a function.

66
00:05:00.125 --> 00:05:02.643
And this gets run.

67
00:05:02.643 --> 00:05:06.363
So this is like,
if anyone remembers class components,

68
00:05:06.363 --> 00:05:10.713
this is like, before unmount,
like a component lifecycle.

69
00:05:10.713 --> 00:05:14.693
So this gets run just before
the component gets unmounted.

70
00:05:14.693 --> 00:05:20.545
So here we'll do a clear interval

71
00:05:20.545 --> 00:05:26.052
to tidy up our intervalid.

72
00:05:26.052 --> 00:05:30.007
So this ensures that we're not gonna have
multiples of these intervals running at

73
00:05:30.007 --> 00:05:30.762
the same time.

74
00:05:32.992 --> 00:05:38.492
So now when I save, you can see that my
little counter has started incrementing.

75
00:05:38.492 --> 00:05:43.471
And when I reload,
&gt;&gt; Kadi Kraman: It

76
00:05:43.471 --> 00:05:46.059
will start from zero again.

77
00:05:46.059 --> 00:05:49.699
So if you don't do this clearInterval and
you reload,

78
00:05:49.699 --> 00:05:55.339
you'll see that the counter is starting
to count multiples at the same time.

79
00:05:55.339 --> 00:05:57.360
So if you're seeing that effect ever,

80
00:05:57.360 --> 00:06:00.437
then you've probably forgotten
to clear your past time.

81
00:06:00.437 --> 00:06:03.927
So if you see that, you've probably
forgotten to clear your previous timeout.

82
00:06:03.927 --> 00:06:08.664
Okay, so a library that I pretty much
always install on all my projects

83
00:06:08.664 --> 00:06:11.677
when I have to deal
with dates is date-fns.

84
00:06:11.677 --> 00:06:15.632
It's one of two libraries that
are really popular for dates,

85
00:06:15.632 --> 00:06:17.627
I think date-fns is a moment.

86
00:06:17.627 --> 00:06:24.072
And this is a great example of a library
that you might have used on the web and

87
00:06:24.072 --> 00:06:28.267
it also works in react
native which is amazing and

88
00:06:28.267 --> 00:06:34.199
the main things that I like using in
date-fns is that you can format so

89
00:06:34.199 --> 00:06:37.369
i'm going to use this here as well but

90
00:06:37.369 --> 00:06:42.212
you can format a date given
like this format structure.

91
00:06:42.212 --> 00:06:44.409
You can get a distance.

92
00:06:44.409 --> 00:06:48.639
Yeah, format distance and
format distance trick.

93
00:06:48.639 --> 00:06:50.509
So this is really handy.

94
00:06:50.509 --> 00:06:57.099
Because, in words, you can say
how long ago something happened.

95
00:06:57.099 --> 00:07:01.311
So rather than saying that,
this happened in May the 4th,

96
00:07:01.311 --> 00:07:06.124
it will actually tell you in words
that this happened 12 days ago.

97
00:07:13.072 --> 00:07:15.717
&gt;&gt; Kadi Kraman: And
it has a bunch of other utility functions.

98
00:07:21.937 --> 00:07:25.071
&gt;&gt; Kadi Kraman: So,
let's install a date-fns.

99
00:07:30.521 --> 00:07:36.215
So, we're using npx.xor.install, and
the previous time that I pointed this out,

100
00:07:36.215 --> 00:07:40.199
we had an example of a thing
that we installed that said.

101
00:07:40.199 --> 00:07:43.449
Over installing an SDK,
whatever compatible package.

102
00:07:43.449 --> 00:07:47.155
And this is actually an example
of a library that doesn't have

103
00:07:47.155 --> 00:07:50.860
an SDK compatible package because
either we don't track it or

104
00:07:50.860 --> 00:07:54.819
we just assume that it's
always going to be compatible.

105
00:07:54.819 --> 00:08:03.189
And this log here prints out that whether
it was an SDK compatible package or not.

106
00:08:03.189 --> 00:08:06.819
So here it says installing
one other package and

107
00:08:06.819 --> 00:08:13.109
other in this scenario means that it
is not tracked to be SDK compatible.

108
00:08:13.109 --> 00:08:17.207
But this is just to show that you can
install pretty much all libraries using

109
00:08:17.207 --> 00:08:18.869
mpx export install.

110
00:08:18.869 --> 00:08:21.059
So it's just a nice default to get into.

