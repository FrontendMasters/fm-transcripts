WEBVTT

1
00:00:00.170 --> 00:00:01.950
&gt;&gt; Kadi Kraman: So
we're going to build a shopping list.

2
00:00:01.950 --> 00:00:03.916
So, if you scroll to
the end of the screen,

3
00:00:03.916 --> 00:00:06.540
have an example of what
we're going to start with.

4
00:00:06.540 --> 00:00:09.190
So, we're going to start
with a shopping list item.

5
00:00:09.190 --> 00:00:14.781
So, it's gonna have some text and it's
gonna have this cerulean line underneath.

6
00:00:14.781 --> 00:00:18.822
I looked at this color from a color
website because I liked it, and I tried to

7
00:00:18.822 --> 00:00:23.179
find out what its name is cuz I know it
was blue, but it's not it's cerulean.

8
00:00:23.179 --> 00:00:24.519
So, now we all get to learn this color.

9
00:00:24.519 --> 00:00:27.429
All right, this is what
a React Native app looks like.

10
00:00:27.429 --> 00:00:31.949
So, if you're used to web development,
you would expect this to be maybe a div.

11
00:00:33.909 --> 00:00:36.713
And, well,
this wouldn't even have anything.

12
00:00:39.352 --> 00:00:41.814
&gt;&gt; Kadi Kraman: So,
this is what would look like on the Web.

13
00:00:41.814 --> 00:00:48.164
So, unlike the web in React Native,
everything is wrapped in a component.

14
00:00:48.164 --> 00:00:51.408
So, you see that you replace
this view with a div,

15
00:00:51.408 --> 00:00:56.104
is because a view is basically
a React Native equivalent of a div.

16
00:00:56.104 --> 00:00:59.835
We use it the same way, I know it
sounds like when I first started.

17
00:00:59.835 --> 00:01:03.813
The name View sounded really confusing
to me cuz it sounds like this big thing,

18
00:01:03.813 --> 00:01:07.085
like model view controller,
you only have one that is not true.

19
00:01:07.085 --> 00:01:10.125
You have many, many, many, same as divs.

20
00:01:10.125 --> 00:01:11.185
It's Views all the way down.

21
00:01:12.445 --> 00:01:14.175
And the second thing is a text.

22
00:01:14.175 --> 00:01:18.855
So, this is something that you don't
have on the web and on the web,

23
00:01:18.855 --> 00:01:22.792
you can just put text anywhere and
it will render.

24
00:01:22.792 --> 00:01:27.185
If I actually do this in React Native,
I'm gonna get an error, because

25
00:01:27.185 --> 00:01:31.892
in React Native, all text must always
be rendered inside a text component.

26
00:01:31.892 --> 00:01:34.028
And the reason for this is that,

27
00:01:34.028 --> 00:01:39.740
React Native renders this as underlying
native UI elements for each platforms.

28
00:01:39.740 --> 00:01:43.591
So, it will be the iOS text and
the Android text and

29
00:01:43.591 --> 00:01:46.540
web text and macOS text and tvOS text.

30
00:01:47.640 --> 00:01:51.060
So, it needs to be wrapped in
a text component, there we go.

31
00:01:51.060 --> 00:01:55.715
And another thing to watch out for is
something that you might be used to doing

32
00:01:55.715 --> 00:02:01.153
on the web, which is using this double
ampersand to conditionally render things.

33
00:02:01.153 --> 00:02:08.563
So, you might do things like true and like
render this thing, which is really common.

34
00:02:08.563 --> 00:02:11.087
And this actually works in React Native,
that's fine.

35
00:02:11.087 --> 00:02:14.013
And false would also work and
it will not render it.

36
00:02:14.013 --> 00:02:17.173
The problem is,
if you render something falsy,

37
00:02:17.173 --> 00:02:19.888
that actually renders on the screen.

38
00:02:19.888 --> 00:02:24.343
So, if you accidentally do if, like
array.length, and the array is zero, and

39
00:02:24.343 --> 00:02:27.306
you render a zero here,
you actually get this error.

40
00:02:27.306 --> 00:02:30.741
Because it's trying to render this zero,
and then you get this error saying

41
00:02:30.741 --> 00:02:34.278
the text strings must not be rendered
outside of a text component.

42
00:02:34.278 --> 00:02:38.698
It used to be that empty strings had the
same effect, thankfully that was resolved.

43
00:02:39.944 --> 00:02:44.789
But if you do not a number,
this will actually also error.

44
00:02:44.789 --> 00:02:49.941
So, to play it safe, generally,
in the React Native Codebase,

45
00:02:49.941 --> 00:02:56.424
you would do something like if not a
number, and you do like, a full statement.

46
00:02:56.424 --> 00:03:00.392
All right, and then the last thing we
need before we can actually build our,

47
00:03:00.392 --> 00:03:04.455
which I'll bring this component,
is to understand how styling works.

48
00:03:04.455 --> 00:03:08.641
So, styling in React Native,
the built-in styles,

49
00:03:08.641 --> 00:03:13.195
are actually very similar to
how styles work in the web.

50
00:03:13.195 --> 00:03:18.735
So, if you can do CSS for the web, you'll
pretty much understand the styling here.

51
00:03:18.735 --> 00:03:22.628
So, let's do a View.

52
00:03:24.558 --> 00:03:31.248
I'm gonna wrap my text here in a View,
and then we can pass in a style prop.

53
00:03:31.248 --> 00:03:33.958
And then this takes an object.

54
00:03:33.958 --> 00:03:36.108
I'm going to just write
these styles in line.

55
00:03:36.108 --> 00:03:37.788
So, I'm gonna start with
just a background color.

56
00:03:37.788 --> 00:03:41.536
So I'm gonna make a background color,
pink, same as we would on the web,

57
00:03:41.536 --> 00:03:43.178
just to see what's happening.

58
00:03:43.178 --> 00:03:46.941
So, this is the view
that's being rendered, and

59
00:03:46.941 --> 00:03:50.088
it's rendered then outside of our text.

60
00:03:51.498 --> 00:03:56.047
And we can use margins,
paddings, and such.

61
00:03:56.047 --> 00:03:59.896
Actually the things you notice here,
so on the Web,

62
00:03:59.896 --> 00:04:03.646
the CSS would look like this, I think.

63
00:04:03.646 --> 00:04:08.411
And obviously, this won't work because
it's not a valid JavaScript object, but

64
00:04:08.411 --> 00:04:12.904
you can naturally figure out how to
convert this into a JavaScript object, and

65
00:04:12.904 --> 00:04:15.306
that will probably work in React Native.

66
00:04:17.486 --> 00:04:20.255
And let's add some padding.

67
00:04:25.783 --> 00:04:28.964
&gt;&gt; Kadi Kraman: So the handy thing,
I think CSS still doesn't have that.

68
00:04:31.580 --> 00:04:34.474
&gt;&gt; Kadi Kraman: Let's do
padding horizontal, and

69
00:04:34.474 --> 00:04:37.277
let's do padding vertical 16.

70
00:04:45.476 --> 00:04:46.085
&gt;&gt; Kadi Kraman: There we go.

71
00:04:46.085 --> 00:04:50.279
So, instead of writing padding left and
padding right, and padding down and

72
00:04:50.279 --> 00:04:53.257
padding bottom,
we have these handy utility styles.

73
00:04:53.257 --> 00:04:56.059
Where you can do horizontal and
vertical padding,

74
00:04:56.059 --> 00:04:59.765
because it's just something that
you end up using quite a lot.

75
00:04:59.765 --> 00:05:04.962
Wanted to remove this
align item center here, so

76
00:05:04.962 --> 00:05:10.174
that this would float to
the start of the screen.

77
00:05:10.174 --> 00:05:13.114
And you notice that this is using flex, so

78
00:05:13.114 --> 00:05:16.961
all styling in React Native
is using FlexWorks.

79
00:05:16.961 --> 00:05:19.661
So, do React Native for a couple of
months, you're gonna get really,

80
00:05:19.661 --> 00:05:20.471
really good at flex.

81
00:05:20.471 --> 00:05:24.525
And if it would be the flex in
React Native is really similar to flex on

82
00:05:24.525 --> 00:05:27.939
the Web as well, but
some of the defaults are different,

83
00:05:27.939 --> 00:05:32.637
like just enough different that when
you're moving from Web to React Native,

84
00:05:32.637 --> 00:05:35.866
you're like, hold on,
that's a bit twisted.

85
00:05:35.866 --> 00:05:38.146
I think I listed them here as well.

86
00:05:38.146 --> 00:05:39.236
Yeah, there we go.

87
00:05:39.236 --> 00:05:42.330
So, all elements have
display flex by default,

88
00:05:42.330 --> 00:05:44.750
you never have to write display flex.

89
00:05:44.750 --> 00:05:48.830
And the main thing that catches
you out is that the default

90
00:05:48.830 --> 00:05:52.495
flex direction is column
instead of row on the web.

91
00:05:52.495 --> 00:05:55.603
And there's a couple of other differences
as well but these are the main two.

92
00:06:01.713 --> 00:06:05.763
&gt;&gt; Kadi Kraman: All right,
let's add this bottom border,

93
00:06:05.763 --> 00:06:09.159
which is our pretty cerulean color.

94
00:06:11.974 --> 00:06:13.708
&gt;&gt; Kadi Kraman: That is
the background color.

95
00:06:13.708 --> 00:06:18.604
Border, bottom,
&gt;&gt; Kadi Kraman: Color, there you go, and

96
00:06:18.604 --> 00:06:21.864
the color doesn't show up because
they haven't set a width.

97
00:06:21.864 --> 00:06:28.054
So, let's do your border, bottom,
width, and let's do just a one.

98
00:06:29.214 --> 00:06:32.084
You might think this is one pixel,
but it's not.

99
00:06:32.084 --> 00:06:34.274
Notice that there's no units at all here.

100
00:06:34.274 --> 00:06:38.605
So, we have an 80 and 60 and a one, and
in your head you might be thinking pixels,

101
00:06:38.605 --> 00:06:40.164
but they are not pixels.

102
00:06:40.164 --> 00:06:42.544
They're actually Display points.

103
00:06:42.544 --> 00:06:49.734
So, a display point is how
actually differs by device.

104
00:06:49.734 --> 00:06:55.063
So, d is pixel density,
that's what it was or

105
00:06:55.063 --> 00:06:58.324
pixel ratio there we go.

106
00:06:58.324 --> 00:07:03.010
So, let me just show you
if I print this out,

107
00:07:03.010 --> 00:07:06.832
so picture ratio get, there we go.

108
00:07:06.832 --> 00:07:09.974
So, it's a little bit
small here we can see

109
00:07:09.974 --> 00:07:13.650
that on my iOS simulator
the pixel ratio is three.

110
00:07:13.650 --> 00:07:19.838
And this means that it's three
by three square to render this,

111
00:07:19.838 --> 00:07:27.345
so one display point on this iOS
device is actually three times three.

112
00:07:27.345 --> 00:07:31.485
And you might have pixel density of 2 or
3.5, etc.

113
00:07:31.485 --> 00:07:34.075
So this is what this unit is.

114
00:07:36.593 --> 00:07:41.562
&gt;&gt; Kadi Kraman: And this also means that,
if you're displaying an image on this

115
00:07:41.562 --> 00:07:45.886
on your React Native app,
then on a high end iOS device,

116
00:07:45.886 --> 00:07:51.977
you'll need a larger image for it to look
crisp than on a older Android device.

117
00:07:51.977 --> 00:07:57.064
And actually, some Android devices
have like, I'm very sure this

118
00:07:57.064 --> 00:08:02.522
phone has a pixel density of 3.5, so
which can go the other way round.

119
00:08:02.522 --> 00:08:08.960
All right, and last,
let's add styles to our text as well.

120
00:08:08.960 --> 00:08:15.747
So, let's do a font size of 18,
make it a little bit bigger,

121
00:08:15.747 --> 00:08:21.778
let's call it something else,
it's a shopping list.

122
00:08:21.778 --> 00:08:27.141
Let's start with coffee,
of course there we go.

123
00:08:27.141 --> 00:08:32.850
And I thought I'd change the font weight,
so make the text a little bit thinner and

124
00:08:32.850 --> 00:08:36.512
Interesting, so
let's do a font weight of 200.

125
00:08:36.512 --> 00:08:41.636
Now, the thing that I like to
do if I'm using the built-in

126
00:08:41.636 --> 00:08:46.341
styles instead of a styling
library is to have a global

127
00:08:46.341 --> 00:08:51.933
theme file that I use to pull
all the commonly used styles.

128
00:08:51.933 --> 00:08:58.032
So, in your root directory
create a new file and

129
00:08:58.032 --> 00:09:05.363
let's call it theme.ts and
let's export const theme.

130
00:09:05.363 --> 00:09:12.357
Export const theme, and
let's move our color that we have here,

131
00:09:12.357 --> 00:09:17.279
the cerulian color into our theme file.

132
00:09:17.279 --> 00:09:20.330
So let's do color, cerulian.

133
00:09:23.244 --> 00:09:29.646
&gt;&gt; Kadi Kraman: I can't even spell that,
cerulean, there we go.

134
00:09:29.646 --> 00:09:31.273
I think we used a white as well.

135
00:09:31.273 --> 00:09:38.913
So, let's move this background color
here as well, and color white here.

136
00:09:40.536 --> 00:09:44.275
And this is kind of handy to do because
you can't have global styles in

137
00:09:44.275 --> 00:09:45.436
React Native.

138
00:09:45.436 --> 00:09:49.020
So, unlike the Web where you have CSS and
you have you just apply a style to all

139
00:09:49.020 --> 00:09:52.016
the H1 elements, for example,
that's not possible.

140
00:09:52.016 --> 00:09:56.505
So, an easy way to just share
styles between multiple components

141
00:09:56.505 --> 00:09:58.796
is to have a shared theme file.

142
00:09:58.796 --> 00:10:02.363
So, that's just a pattern
that I've used for ages.

143
00:10:02.363 --> 00:10:07.135
In production projects, I would put
spacing here as well, so font sizes,

144
00:10:07.135 --> 00:10:10.033
spacing, any kind of
units I would put here.

145
00:10:10.033 --> 00:10:12.243
So, I would have like spacing 12,
spacing 16.

146
00:10:12.243 --> 00:10:13.641
But we're not gonna do it for

147
00:10:13.641 --> 00:10:17.523
this workshop because I think that's
forcing my preferences onto you.

148
00:10:17.523 --> 00:10:18.693
Yes.

149
00:10:18.693 --> 00:10:24.554
&gt;&gt; Speaker 1: So in React Native,
it's all styling with JavaScript objects.

150
00:10:24.554 --> 00:10:29.764
There isn't a thing like CSS modules,
CSS variables, or Sass?

151
00:10:29.764 --> 00:10:32.134
&gt;&gt; Kadi Kraman: Yeah,
nothing like that is built in.

152
00:10:32.134 --> 00:10:34.244
There are styling libraries.

153
00:10:34.244 --> 00:10:36.364
So, NativeWind is a popular one,

154
00:10:36.364 --> 00:10:41.129
where you basically can use Tailwind
styles in React Native in a similar way.

155
00:10:42.180 --> 00:10:45.865
And it's actually very popular, especially
when you're coming from the Web,

156
00:10:45.865 --> 00:10:48.760
then you can use your existing
Tailwind knowledge for that.

157
00:10:48.760 --> 00:10:51.530
I think I've listed some,
I think I haven't.

158
00:10:51.530 --> 00:10:54.280
I think I listed them in
the intermediate course.

159
00:10:55.630 --> 00:11:00.230
Yeah, there's quite a few sign libraries,
NativeWind is the big one.

160
00:11:00.230 --> 00:11:03.498
That you can use that opt
out of the style sheet.

161
00:11:03.498 --> 00:11:08.968
But for the built-in, this is basically

162
00:11:08.968 --> 00:11:13.663
what you get, just a style object.

163
00:11:15.793 --> 00:11:19.713
And finally,
let's do a bit of tidying as well.

164
00:11:19.713 --> 00:11:22.868
So, you noticed that we have
this style sheet create here?

165
00:11:22.868 --> 00:11:26.398
And here we pass the styles in line,
and you can do both,

166
00:11:26.398 --> 00:11:31.146
it's obviously tidier to have this
one style object at the bottom.

167
00:11:31.146 --> 00:11:33.646
And this is the common pattern actually.

168
00:11:33.646 --> 00:11:38.567
So, every file that's a UI file where
you render something, you will have your

169
00:11:38.567 --> 00:11:42.385
styles object at the end of the file
where you do style sheet and

170
00:11:42.385 --> 00:11:44.236
then you have the styles.

171
00:11:44.236 --> 00:11:47.970
So if you do get these files,

172
00:11:47.970 --> 00:11:54.356
I go styles.itemContainer, item container.

173
00:11:57.451 --> 00:12:01.439
&gt;&gt; Kadi Kraman: Here we go,
and I'll move my font as well.

174
00:12:01.439 --> 00:12:05.032
So this will be,

175
00:12:05.032 --> 00:12:09.658
styles.itemText.

176
00:12:09.658 --> 00:12:16.424
Item text,
&gt;&gt; Kadi Kraman: There we go.

177
00:12:16.424 --> 00:12:18.240
And the stylesheet create,

178
00:12:18.240 --> 00:12:23.009
it doesn't actually do anything special
under the hood It mostly just does

179
00:12:23.009 --> 00:12:27.182
checking to make sure styles
are valid that your types are valid.

180
00:12:27.182 --> 00:12:28.932
This is a standard reactive component.

