WEBVTT

1
00:00:00.000 --> 00:00:03.008
&gt;&gt; Kadi Kraman: Next up,
let's talk about navigation.

2
00:00:03.008 --> 00:00:08.426
So navigation on mobile looks quite
a bit different than navigation for web.

3
00:00:08.426 --> 00:00:12.128
So if you think about mobile
apps that you used, so

4
00:00:12.128 --> 00:00:16.990
we have bottom tabs, we have modals,
we have a stack navigator.

5
00:00:16.990 --> 00:00:19.672
So these are concepts that
don't exist on the web.

6
00:00:19.672 --> 00:00:24.268
And as mentioned earlier, React Native
doesn't come with a navigation library

7
00:00:24.268 --> 00:00:26.373
built in, so we need to install one.

8
00:00:26.373 --> 00:00:29.520
And in this course,
we're going to be using Expo Router.

9
00:00:29.520 --> 00:00:33.888
So Expo Router is a file system-based
navigation for React Native.

10
00:00:33.888 --> 00:00:40.437
And it's built on top of React Navigation,
which isn't a file system-based routing.

11
00:00:40.437 --> 00:00:44.545
But the reason I mentioned that it's built
on top of React Navigation is that all

12
00:00:44.545 --> 00:00:48.776
the properties for screens and screen
options that are used in React Navigation,

13
00:00:48.776 --> 00:00:50.202
you can use in Expo Router.

14
00:00:50.202 --> 00:00:54.819
So a lot of the time, I find it handy
to look at React Navigation docs for

15
00:00:54.819 --> 00:00:58.748
these details if they don't
exist in the Expo Router docs.

16
00:00:58.748 --> 00:01:00.823
So if you used web
frameworks like Next.js,

17
00:01:00.823 --> 00:01:04.110
you're probably already familiar
with file system-based routing.

18
00:01:04.110 --> 00:01:09.192
But in case you aren't,
the idea is that the file names and

19
00:01:09.192 --> 00:01:15.107
folder names in your file system
dictate what the screen is called or

20
00:01:15.107 --> 00:01:17.200
the URLs for the pages.

21
00:01:17.200 --> 00:01:20.736
So, for example,
we start with an app folder, so

22
00:01:20.736 --> 00:01:23.361
the root of your app is an app folder.

23
00:01:23.361 --> 00:01:28.601
So the index.tsx, this is your index root.

24
00:01:28.601 --> 00:01:33.935
Then if you have a screen called home,
this will be your /home root.

25
00:01:33.935 --> 00:01:39.102
If you have a folder and then an index,
then the index doesn't count.

26
00:01:39.102 --> 00:01:42.387
So you will just have the folder name,
in this case, /products.

27
00:01:42.387 --> 00:01:48.848
And this is an example of a dynamic route,
where you can pass in anything here and

28
00:01:48.848 --> 00:01:53.197
it will be retrieved by
the screen as a screen option.

29
00:01:53.197 --> 00:01:58.684
So you can, for example,
have a products/123 with the product ID.

30
00:01:58.684 --> 00:02:03.351
So the filename-to-URL mapping is
a little bit more obvious if you're

31
00:02:03.351 --> 00:02:04.963
doing web development.

32
00:02:04.963 --> 00:02:06.169
And making it work for

33
00:02:06.169 --> 00:02:10.868
mobile is a little bit more tricky because
we have additional kinds of navigation.

34
00:02:10.868 --> 00:02:14.081
So we have stacks, modals, and tabs.

35
00:02:14.081 --> 00:02:16.996
And the key to making this
work is a layout file.

36
00:02:16.996 --> 00:02:22.859
So anything inside your app folder
is a screen or a layout file.

37
00:02:22.859 --> 00:02:27.635
A layout file is underscore layout,
it's called underscore layout,

38
00:02:27.635 --> 00:02:30.349
and you can have exactly one per folder.

39
00:02:30.349 --> 00:02:35.873
And the layout file tells you how the
screens in that folder should be laid out.

40
00:02:35.873 --> 00:02:40.220
So as a stack, tab, modal, whether you
need to add additional headers, etc.

41
00:02:42.798 --> 00:02:46.297
&gt;&gt; Kadi Kraman: So we'll be following
instructions from this Expo Router get

42
00:02:46.297 --> 00:02:50.075
started docs, but I've copied this
into the course site as well.

43
00:02:50.075 --> 00:02:55.591
So let's start by installing
a bunch of libraries.

44
00:02:55.591 --> 00:02:59.322
So we have expo-router
react-native-safe-area-context.

45
00:02:59.322 --> 00:03:04.425
So this is basically a library for,
if you're on an iOS device or

46
00:03:04.425 --> 00:03:07.922
actually some Android devices as well now,

47
00:03:07.922 --> 00:03:12.000
you have this header which
overlays your content.

48
00:03:12.000 --> 00:03:16.730
And the safe-area-context basically
tells you what area of your

49
00:03:16.730 --> 00:03:18.341
screen is safe to use.

50
00:03:18.341 --> 00:03:20.554
So Expo Router uses that under the hood.

51
00:03:20.554 --> 00:03:22.812
So when you do screens in Expo Router,

52
00:03:22.812 --> 00:03:25.855
they are already by default
wrapped in a safe area.

53
00:03:25.855 --> 00:03:31.135
Then you have expo-linking
because Expo Router comes

54
00:03:31.135 --> 00:03:36.069
with deep linking built in,
expo-status-bar,

55
00:03:36.069 --> 00:03:40.771
which is, there we go,
whether this top stuff is

56
00:03:40.771 --> 00:03:45.610
light content or
dark content or whatever, etc.

57
00:03:45.610 --> 00:03:49.074
All right, next up, so
this is the case for

58
00:03:49.074 --> 00:03:53.904
every JavaScript project where
you have a package.json.

59
00:03:53.904 --> 00:03:57.604
So in your package.json,
you have a main field, and

60
00:03:57.604 --> 00:04:02.468
then this main field tells you what
the main entry point of your app is.

61
00:04:02.468 --> 00:04:07.203
So in our case, it is expo/AppEntry.js.

62
00:04:07.203 --> 00:04:14.105
And actually, if you're curious,
if I now open in my node modules,

63
00:04:14.105 --> 00:04:18.158
we go to expo &gt; AppEntry, there you go.

64
00:04:18.158 --> 00:04:21.787
So all this does is it imports
registerRootComponent,

65
00:04:21.787 --> 00:04:26.661
which is basically how you tell what
the root of your app is to React Native.

66
00:04:26.661 --> 00:04:33.539
And it's importing this app file from
our folder, so from our own project.

67
00:04:33.539 --> 00:04:39.543
So it's importing this file here,
the App.tsx.

68
00:04:39.543 --> 00:04:44.663
And actually, in some cases, this might
be handy if you need to use some native

69
00:04:44.663 --> 00:04:49.728
libraries that require you to do things
before the registerRootComponent.

70
00:04:49.728 --> 00:04:55.465
What you can actually do is you can copy
this code into your own, like index.js.

71
00:04:55.465 --> 00:04:59.798
And then point your package.json
domain file into index.js, and

72
00:04:59.798 --> 00:05:03.986
then do additional things before
you register a root component.

73
00:05:03.986 --> 00:05:08.038
And this is just an FYI
because it does come up, but

74
00:05:08.038 --> 00:05:12.292
the AppEntry is basically
a convenience function.

75
00:05:12.292 --> 00:05:14.952
All right, so in our case,

76
00:05:14.952 --> 00:05:20.519
we are now changing this to
be the expo-router/entry.

77
00:05:20.519 --> 00:05:25.360
And this changes the entry
point to be this app folder,

78
00:05:25.360 --> 00:05:30.110
which is the root of our
file system-based routing.

79
00:05:30.110 --> 00:05:36.064
Next up,
we want to create a new folder called app,

80
00:05:36.064 --> 00:05:41.055
and move our App.tsx into the app folder.

81
00:05:41.055 --> 00:05:45.606
And hopefully, you have VS Code that
automatically updates the inputs.

82
00:05:45.606 --> 00:05:49.465
If not,
make sure that you've updated this.

83
00:05:49.465 --> 00:05:53.633
Now let's rename this to index.

84
00:05:53.633 --> 00:05:54.917
This is also important.

85
00:05:54.917 --> 00:06:00.306
So with Expo Router, you need to
have one index file, at least one.

86
00:06:00.306 --> 00:06:04.198
So if you don't like using
index as your file names,

87
00:06:04.198 --> 00:06:07.912
you can get away with using them for
most screens,

88
00:06:07.912 --> 00:06:11.900
but the main entry point
has to be called index.tsx.

89
00:06:14.031 --> 00:06:16.598
&gt;&gt; Kadi Kraman: So
now I am getting an error, and

90
00:06:16.598 --> 00:06:20.222
it's because I need to
restart the bundler.

91
00:06:20.222 --> 00:06:22.599
I think I used it in the terminal.

92
00:06:24.868 --> 00:06:27.968
&gt;&gt; Kadi Kraman: How do I even open this?

93
00:06:27.968 --> 00:06:29.013
There we go.

94
00:06:29.013 --> 00:06:32.655
You can see I don't use
the VS Code terminal very often.

95
00:06:32.655 --> 00:06:36.419
All right, so if I now do yarn start.

96
00:06:36.419 --> 00:06:41.199
If that doesn't work, you can do
yarn start-- reset cache as well,

97
00:06:41.199 --> 00:06:43.077
but I think it should work.

98
00:06:43.077 --> 00:06:48.354
So now if I reload, there we go.

99
00:06:48.354 --> 00:06:55.903
Thankfully, I've gotten a warning here
cuz I missed a part of my instructions.

100
00:06:55.903 --> 00:07:00.202
So I got really excited about moving
everything to the app folder,

101
00:07:00.202 --> 00:07:03.602
which was this,
adding a scheme to your app.json.

102
00:07:03.602 --> 00:07:08.294
Let's copy this and
open our app.json and add the scheme.

103
00:07:08.294 --> 00:07:12.869
So, the reason this is required is
that Expo Router comes with deep

104
00:07:12.869 --> 00:07:14.184
linking built in.

105
00:07:14.184 --> 00:07:18.536
So deep linking is basically like
creating a URL that opens your app

106
00:07:18.536 --> 00:07:20.021
to a specific screen.

107
00:07:20.021 --> 00:07:24.965
And the way deep linking works on
mobile is that your mobile app

108
00:07:24.965 --> 00:07:28.402
registers to listen to a specific scheme.

109
00:07:28.402 --> 00:07:32.590
So there will be an intent fired
into your phone that goes,

110
00:07:32.590 --> 00:07:37.643
hey everyone, there's an intent
going into a scheme called Taskly.

111
00:07:37.643 --> 00:07:44.823
And then all the apps on your phone
will basically say, no, not for me.

112
00:07:44.823 --> 00:07:47.948
Or some of them might say,
I'm registered to that, give me the URL.

113
00:07:47.948 --> 00:07:50.182
That's basically how it works and
that's why it's required.

114
00:07:52.447 --> 00:07:57.503
&gt;&gt; Kadi Kraman: All right, so now you
see that it looks exactly the same.

115
00:07:57.503 --> 00:08:03.337
So what's now missing is
we need a layout file.

116
00:08:03.337 --> 00:08:07.776
And actually, the reason that I did this
without adding in a layout file is that to

117
00:08:07.776 --> 00:08:11.760
draw attention to the fact that all
the screens that you create in your app

118
00:08:11.760 --> 00:08:16.168
folder get created as a screen in your app
even if they don't have a layout file.

119
00:08:16.168 --> 00:08:20.441
So by default,
they will be in a stack navigator.

120
00:08:20.441 --> 00:08:24.782
Well, let's add a layout file, so

121
00:08:24.782 --> 00:08:28.415
this will be _layout.tsx.

122
00:08:28.415 --> 00:08:34.781
So with Expo Router, all the screens and
layouts have a default export.

123
00:08:34.781 --> 00:08:38.839
So usually with components,
we do named exports.

124
00:08:38.839 --> 00:08:43.157
But in this case,
we do export default, and

125
00:08:43.157 --> 00:08:48.309
function comes, whatever,
function and Layout.

126
00:08:48.309 --> 00:08:52.042
So you can name this whatever
because it's a default export.

127
00:08:52.042 --> 00:08:56.186
And let's return.

128
00:08:56.186 --> 00:09:00.969
So we want to render this as a stack,
so we'll import

129
00:09:00.969 --> 00:09:05.877
stack from Expo Router, and
I render this as a stack.

130
00:09:05.877 --> 00:09:10.851
And here, you can choose to define
each of the screens you could pass

131
00:09:10.851 --> 00:09:12.689
in additional options.

132
00:09:18.394 --> 00:09:23.309
&gt;&gt; Kadi Kraman: So here,
let's do a Stack.Screen.

133
00:09:23.309 --> 00:09:30.742
And the screen name will be like
the file name here, so it'll be index.

134
00:09:30.742 --> 00:09:33.853
And we can pass in options to the screen.

135
00:09:33.853 --> 00:09:37.340
So actually, so if I save this now, I go,

136
00:09:37.340 --> 00:09:41.247
I get this header, and
the header says index.

137
00:09:41.247 --> 00:09:44.719
But we don't want our screen to be
called index, cuz that's a bit silly,

138
00:09:44.719 --> 00:09:47.640
cuz that's just the file name,
we can pass in a custom title.

139
00:09:47.640 --> 00:09:51.374
So we'll use the options prop here and

140
00:09:51.374 --> 00:09:56.047
do title,
let's call this our shopping list.

141
00:09:59.347 --> 00:10:01.443
&gt;&gt; Kadi Kraman: That's it, there we go.

142
00:10:06.423 --> 00:10:11.479
&gt;&gt; Speaker 2: Does schema mean that
you'll be using taskly://URIs,

143
00:10:11.479 --> 00:10:18.470
or is the syntax platform-independent, so
that you can deep link from a web app?

144
00:10:18.470 --> 00:10:24.040
&gt;&gt; Kadi Kraman: You do scheme code on //,
yes.

145
00:10:24.040 --> 00:10:30.345
There is also universal linking,
it's a bit more involved.

146
00:10:30.345 --> 00:10:33.512
So we're going to go through deep
linking in the intermediate course.

147
00:10:33.512 --> 00:10:36.881
We actually deep link into
our app using the scheme.

148
00:10:36.881 --> 00:10:41.090
But we're not going to cover, and
something that you should be aware about,

149
00:10:41.090 --> 00:10:41.885
is app links.

150
00:10:41.885 --> 00:10:46.457
And actually, if I go to the docs here, so

151
00:10:46.457 --> 00:10:49.862
if I do linking, there you go.

152
00:10:49.862 --> 00:10:54.418
So we got linking and

153
00:10:54.418 --> 00:10:57.903
deep linking.

154
00:10:57.903 --> 00:11:02.616
Okay, so if we go to deep linking docs,
this describes the more involved

155
00:11:02.616 --> 00:11:06.116
deep llinking,
which basically verifies your URL.

156
00:11:06.116 --> 00:11:09.471
So it requires you to upload,
there's instructions here,

157
00:11:09.471 --> 00:11:13.021
but it requires you to upload
a special file on your website, and

158
00:11:13.021 --> 00:11:16.209
then you register that
associated domain on your phone.

159
00:11:16.209 --> 00:11:20.577
And then you can use iOS app links or
the, sorry,

160
00:11:20.577 --> 00:11:24.382
Android app links or
the iOS universal links.

161
00:11:24.382 --> 00:11:26.388
So those are the options, but

162
00:11:26.388 --> 00:11:31.457
the deep linking is basically the more
low level and basic version of this.

