WEBVTT

1
00:00:00.550 --> 00:00:07.020
So far, whenever we used async storage,
we've used it from a single screen.

2
00:00:07.020 --> 00:00:12.720
But as mentioned, the async storage
is based on the key that you use.

3
00:00:12.720 --> 00:00:16.947
So, you can access the same key
of the same async storage in

4
00:00:16.947 --> 00:00:20.325
a different component or
a different screen.

5
00:00:20.325 --> 00:00:24.272
So, recall that a while ago we've
added this little history screen here.

6
00:00:24.272 --> 00:00:29.765
And we can use this history screen
to show a log of all the times

7
00:00:29.765 --> 00:00:36.248
that you've done the thing and
hit this, I've done the thing button.

8
00:00:44.080 --> 00:00:48.856
&gt;&gt; Kadi Kraman: So,
let's export this countdownStorageKey,

9
00:00:48.856 --> 00:00:53.281
constant, and
the type from our index file so

10
00:00:53.281 --> 00:00:57.014
we could use it in our history screen.

11
00:01:24.088 --> 00:01:28.975
&gt;&gt; Kadi Kraman: [COUGH] So
in our history screen,

12
00:01:28.975 --> 00:01:31.873
let's go in here.

13
00:01:34.947 --> 00:01:36.440
&gt;&gt; Kadi Kraman: Do I have a log?

14
00:01:36.440 --> 00:01:38.530
Okay, so
this is what we want it to look like.

15
00:01:38.530 --> 00:01:46.971
So, we just want to have a list
of items in a scrollable list.

16
00:01:46.971 --> 00:01:49.135
So, we're gonna end up
with an array map again.

17
00:01:49.135 --> 00:01:52.273
So, we're going to do a FlatList, but

18
00:01:52.273 --> 00:01:56.277
initially we want to fetch
the data from storage.

19
00:01:56.277 --> 00:01:58.835
So let's do a countdownState.

20
00:01:58.835 --> 00:02:04.053
So actually this will be the same as
we did in our countdown index file.

21
00:02:04.053 --> 00:02:08.410
So, this will be a countdownState,

22
00:02:08.410 --> 00:02:14.324
setCountdownState, and
we'll use a useState.

23
00:02:18.200 --> 00:02:22.056
&gt;&gt; Kadi Kraman: And the type of this
will be a persisted countdownState.

24
00:02:26.055 --> 00:02:27.247
&gt;&gt; Kadi Kraman: [COUGH]

25
00:02:34.699 --> 00:02:38.043
&gt;&gt; Kadi Kraman: And we'll do a useEffect.

26
00:02:38.043 --> 00:02:44.064
So, same as what we did here where
we get the value from storage,

27
00:02:44.064 --> 00:02:47.534
and we set it as our countdownState.

28
00:02:47.534 --> 00:02:49.631
So, it goes from storage,

29
00:02:49.631 --> 00:02:54.652
this was our utility function to
get from async storage storage,

30
00:02:54.652 --> 00:03:00.057
and the countdownStorageKey,
we'll import it from our index file.

31
00:03:00.057 --> 00:03:06.533
And we don't have the setState here and
import useEffect from React.

32
00:03:11.535 --> 00:03:15.208
&gt;&gt; Kadi Kraman: And
setCountdownState(value).

33
00:03:22.531 --> 00:03:27.391
&gt;&gt; Kadi Kraman: So here we want to render
a large list of items, so our go-to for

34
00:03:27.391 --> 00:03:29.704
that is of course a FlatList.

35
00:03:30.704 --> 00:03:34.084
So we'll import FlatList
from React Native.

36
00:03:41.358 --> 00:03:44.932
&gt;&gt; Kadi Kraman: And
the data in the FlatList is going to be

37
00:03:44.932 --> 00:03:48.833
countdownState completed at timestamps.

38
00:03:50.123 --> 00:03:52.873
And we can default to an empty array.

39
00:03:52.873 --> 00:04:00.091
I think it actually is fine if this is
undefined, we'll just get the list empty.

40
00:04:00.091 --> 00:04:04.032
And let's do a renderItem.

41
00:04:06.799 --> 00:04:11.111
&gt;&gt; Kadi Kraman: So this will be for
each of the timestamps.

42
00:04:11.111 --> 00:04:18.154
So again, this takes a function, and
this will be a destructured item.

43
00:04:21.301 --> 00:04:26.692
&gt;&gt; Kadi Kraman: And we'll keep it
simple and do a View and some Text.

44
00:04:33.333 --> 00:04:36.619
&gt;&gt; Kadi Kraman: And
to test it, would do, yeah, so

45
00:04:36.619 --> 00:04:40.579
this item is actually just the timestamp.

46
00:04:40.579 --> 00:04:44.742
All right, and actually,
if you ever end up with this,

47
00:04:44.742 --> 00:04:49.005
where you've done a function and
nothing is rendering.

48
00:04:49.005 --> 00:04:53.037
It's because you probably
used the wrong braces, or

49
00:04:53.037 --> 00:04:56.271
you forgot to return, which is what I did.

50
00:04:57.911 --> 00:05:01.203
Okay, so
I'm actually using implicit return here.

51
00:05:02.924 --> 00:05:03.964
&gt;&gt; Kadi Kraman: There we go.

52
00:05:03.964 --> 00:05:10.104
Okay, so I've got two timestamps here, and
I do another one, and we got a third one.

53
00:05:11.704 --> 00:05:14.976
So, we probably want to format
this as an actual date.

54
00:05:14.976 --> 00:05:18.108
So recall,
that's why we installed date functions,

55
00:05:18.108 --> 00:05:22.206
because I don't want to figure out
how to format this as an actual date.

56
00:05:22.206 --> 00:05:28.025
But date functions know how,
and we can actually copy

57
00:05:28.025 --> 00:05:34.803
this full date format from the diff,
which looks like this.

58
00:05:34.803 --> 00:05:38.783
It doesn't need to be back ticks and

59
00:05:38.783 --> 00:05:42.902
we'll say that this will be format.

60
00:05:42.902 --> 00:05:46.633
So, the format will be
from date functions.

61
00:05:47.773 --> 00:05:52.033
And we can pass in a date or a timestamp.

62
00:05:52.033 --> 00:05:56.223
So, we can pass in our item as is,
and then the format string,

63
00:05:56.223 --> 00:05:58.661
which will be our fullDateFormat.

64
00:05:58.661 --> 00:06:03.625
There you go, and now it looks
much more sensible and readable.

65
00:06:07.520 --> 00:06:10.602
&gt;&gt; Kadi Kraman: And finally,
we want to add some styling to this.

66
00:06:13.505 --> 00:06:18.122
&gt;&gt; Kadi Kraman: So,
let's give the FlatList

67
00:06:18.122 --> 00:06:22.739
a style of styles.list, and

68
00:06:22.739 --> 00:06:28.463
let's say the List has a flex: 1 and

69
00:06:28.463 --> 00:06:32.909
background color of white.

70
00:06:43.210 --> 00:06:50.347
&gt;&gt; Kadi Kraman: So remember, you shouldn't
add paddings to our style in the FlatList,

71
00:06:50.347 --> 00:06:57.729
so we want to use a contentContainer
style, styles.contentContainer.

72
00:06:57.729 --> 00:07:03.745
So, this is just so that the top element
wouldn't be against the wall here.

73
00:07:03.745 --> 00:07:08.187
So let's do contentContainer.

74
00:07:08.187 --> 00:07:13.381
Let's do a marginTop: 8.

75
00:07:20.756 --> 00:07:23.408
&gt;&gt; Kadi Kraman: And
let's style each of these items.

76
00:07:23.408 --> 00:07:29.831
So, let's do a style, so
this is on the view on the randerItem.

77
00:07:29.831 --> 00:07:35.759
So let's do style is styles.listItem.

78
00:07:41.215 --> 00:07:46.082
&gt;&gt; Kadi Kraman: And the usual things,
let's add some background color,

79
00:07:46.082 --> 00:07:50.890
so this can be the LightGrey,
I think, a nice one.

80
00:07:50.890 --> 00:07:53.880
And let's add some margin, so

81
00:07:53.880 --> 00:07:59.290
it's not against the walls,
so, marginHorizontal.

82
00:07:59.290 --> 00:08:03.034
So step 8, okay,

83
00:08:03.034 --> 00:08:07.717
and padding: 12,.

84
00:08:12.638 --> 00:08:19.154
&gt;&gt; Kadi Kraman: And [COUGH] borderRadius:

85
00:08:19.154 --> 00:08:23.895
6, my favorite.

86
00:08:23.895 --> 00:08:26.836
And we also want to add some
margin at the bottom of them so

87
00:08:26.836 --> 00:08:28.659
they're not squished together.

88
00:08:28.659 --> 00:08:35.048
So, marginBottom: 8, looks all right.

89
00:08:35.048 --> 00:08:39.620
And maybe let's make the text
a little bit bigger, so

90
00:08:39.620 --> 00:08:49.113
style={styles.listItemText},
&gt;&gt; Kadi Kraman: And

91
00:08:49.113 --> 00:08:55.043
I'll just increase the font size to 18.

92
00:08:55.043 --> 00:08:59.252
Okay, I think that looks good.

93
00:08:59.252 --> 00:09:05.729
And we can also add
a ListEmpty component here.

94
00:09:05.729 --> 00:09:09.981
In fact, we can copy this
component from our shopping list.

95
00:09:09.981 --> 00:09:11.503
It is nice to add as a default.

96
00:09:11.503 --> 00:09:13.583
We have items in our story, but

97
00:09:13.583 --> 00:09:18.957
it's always good to think of the default
items before anything has been added.

98
00:09:18.957 --> 00:09:22.845
So, whenever you do something like that,
you build it, then uninstall your app, and

99
00:09:22.845 --> 00:09:25.207
then try it from scratch to
make sure it still works.

100
00:09:28.327 --> 00:09:31.421
Right, so what's in here.

101
00:09:31.421 --> 00:09:39.074
For our shopping list, I guess,
so we have a ListEmpty component.

102
00:09:39.074 --> 00:09:42.212
I'm just gonna copy this
&gt;&gt; Kadi Kraman: And

103
00:09:42.212 --> 00:09:45.828
the ListEmpty container style as well.

104
00:09:52.544 --> 00:09:59.581
&gt;&gt; Kadi Kraman: And some text,
so let's say, No history.

105
00:09:59.581 --> 00:10:03.858
And you can always check
that it works by just

106
00:10:03.858 --> 00:10:08.018
changing this data to be an empty array,
or

107
00:10:08.018 --> 00:10:12.424
undefined, undefined should work as well.

108
00:10:13.854 --> 00:10:20.114
Lovely, now, we have our countdown.

109
00:10:20.114 --> 00:10:25.740
We have our notification and then when
we do the thing we also have a history

110
00:10:25.740 --> 00:10:30.844
where each of the previous times we
did the thing will be listed here

