WEBVTT

1
00:00:00.190 --> 00:00:02.377
&gt;&gt; Kadi Kraman: So
we built the UI to add things,

2
00:00:02.377 --> 00:00:08.370
to delete other shopping list items, to
delete them, and to mark them as complete.

3
00:00:08.370 --> 00:00:12.100
But we haven't actually hooked this up,
so let's do that.

4
00:00:12.100 --> 00:00:16.207
So firstly,
let's hook up our own delete function.

5
00:00:16.207 --> 00:00:17.580
So, what are we doing on delete?

6
00:00:17.580 --> 00:00:22.928
So, remember,
we added this alert here for OnDelete.

7
00:00:22.928 --> 00:00:27.518
So if we go to our shopping list item,
there we go.

8
00:00:27.518 --> 00:00:32.768
So right now, we are doing it just
a console log when you delete something.

9
00:00:32.768 --> 00:00:39.381
So, let's change this to use
an OnDelete prop instead.

10
00:00:39.381 --> 00:00:42.442
So, let's do an OnDelete.

11
00:00:44.132 --> 00:00:46.122
This will be a mandatory function.

12
00:00:48.132 --> 00:00:51.295
And in TypeScript land,
this means give me any function, so

13
00:00:51.295 --> 00:00:55.522
we don't care what it does, we're just
going to call it without any arguments.

14
00:00:56.802 --> 00:01:04.291
And the structure it from the properties,
and onPress we're going to call and

15
00:01:04.291 --> 00:01:09.039
delete, and
now we'll need to implement it.

16
00:01:09.039 --> 00:01:16.949
So back in our index.tsx, let's create
a new constant function called onDelete.

17
00:01:18.409 --> 00:01:20.255
So this will be an error function.

18
00:01:22.582 --> 00:01:26.604
&gt;&gt; Kadi Kraman: So,
we will delete the item by the item ID.

19
00:01:29.650 --> 00:01:32.172
&gt;&gt; Kadi Kraman: So
the ID will be a string.

20
00:01:34.442 --> 00:01:36.322
So, how do we get this ID?

21
00:01:36.322 --> 00:01:41.320
So, when we pass this onDelete
into our shopping list item,

22
00:01:41.320 --> 00:01:45.446
let's do onDelete, and
this will be a function.

23
00:01:49.462 --> 00:01:55.864
&gt;&gt; Kadi Kraman: And it will call handle,
did I call this onDelete?

24
00:01:55.864 --> 00:01:57.643
Sorry, I meant to call this handleDelete.

25
00:02:00.094 --> 00:02:04.038
&gt;&gt; Kadi Kraman: It doesn't really matter,
but I try to call props on something, and

26
00:02:04.038 --> 00:02:09.277
then the actual implementation handle
something by just the convention.

27
00:02:09.277 --> 00:02:14.477
So handleDelete, and
we'll have the item ID here.

28
00:02:14.477 --> 00:02:20.783
So item.id, so you can actually
choose when you pass the item ID in,

29
00:02:20.783 --> 00:02:28.520
so I've chosen to parse the item ID into
the function before I'm passing it in.

30
00:02:28.520 --> 00:02:32.323
So this shopping list item, it doesn't
need to care what you're deleting,

31
00:02:32.323 --> 00:02:37.590
it's just like, yeah, this was pressed I'm
just gonna call the onDelete function.

32
00:02:37.590 --> 00:02:40.399
So, I'm choosing to parse
the item ID up here,

33
00:02:40.399 --> 00:02:43.841
but it might make sense in some
cases to do it lower down, so

34
00:02:43.841 --> 00:02:47.742
the shopping list item knows what
it needs to pass and delete it.

35
00:02:47.742 --> 00:02:50.172
Now, it's up to your preference.

36
00:02:52.022 --> 00:02:55.227
All right, so here,
let's create a new shopping list.

37
00:02:58.122 --> 00:03:01.533
&gt;&gt; Kadi Kraman: And this will have to
be the existing shopping list, but

38
00:03:01.533 --> 00:03:04.111
without the item with this ID.

39
00:03:04.111 --> 00:03:08.596
So we will filter, so filter,

40
00:03:08.596 --> 00:03:13.944
item, and we will keep everything.

41
00:03:13.944 --> 00:03:18.781
So if item.id is not id.

42
00:03:18.781 --> 00:03:19.896
So we're saying that,

43
00:03:19.896 --> 00:03:23.365
we want everything where the item id
is not this one that we want to delete.

44
00:03:25.385 --> 00:03:30.837
And now, we set the ShoppingList,
&gt;&gt; Kadi Kraman: With

45
00:03:30.837 --> 00:03:34.115
the new ShoppingList, and
I think that should be it.

46
00:03:34.115 --> 00:03:38.775
So if I delete this, it disappears.

47
00:03:38.775 --> 00:03:42.476
So tea,
&gt;&gt; Kadi Kraman: Coffee,

48
00:03:44.440 --> 00:03:45.817
&gt;&gt; Kadi Kraman: Milk, and

49
00:03:45.817 --> 00:03:51.174
I can delete any of these items, lovely.

50
00:03:51.174 --> 00:03:57.509
And the next thing you wanna hook up
is to complete or uncomplete an item.

51
00:03:57.509 --> 00:04:01.314
So we want to be able to mark
something as complete, and

52
00:04:01.314 --> 00:04:04.142
we want to also toggle it as uncomplete.

53
00:04:06.330 --> 00:04:07.514
&gt;&gt; Kadi Kraman: In this case,

54
00:04:07.514 --> 00:04:13.438
I think you'll be handy to make
the entire ShoppingList item tapable,

55
00:04:13.438 --> 00:04:18.887
so you don't need to specifically
tap on a particular point.

56
00:04:18.887 --> 00:04:23.376
I just realized that, I think on the app
that I created, I had a little check mark

57
00:04:23.376 --> 00:04:27.140
here for the completion as well,
and I've forgotten to add that.

58
00:04:29.210 --> 00:04:31.548
Okay, let's do this UI first and

59
00:04:31.548 --> 00:04:35.150
then we can quickly add
the checkbox that I forgot.

60
00:04:37.240 --> 00:04:42.936
Okay, so in the ShoppingList item,
we have a containing view,

61
00:04:42.936 --> 00:04:49.168
we can change this view into
a list pressable, so pressable.

62
00:04:49.168 --> 00:04:55.851
So this will be an import

63
00:04:55.851 --> 00:05:03.543
from React Native, okay?

64
00:05:03.543 --> 00:05:08.591
And then,
we'll also have an additional prop here.

65
00:05:08.591 --> 00:05:13.359
So let's do onToggleComplete,
so onToggleComplete,

66
00:05:13.359 --> 00:05:18.341
cuz we want to toggle between
completed and not completed.

67
00:05:22.204 --> 00:05:25.651
&gt;&gt; Kadi Kraman: And this will also be
a function, and we don't care what it is.

68
00:05:26.991 --> 00:05:28.951
And that's the structure
of it from the prompts.

69
00:05:31.681 --> 00:05:38.300
And on the pressable, we'll do onPress and
we'll call this onToggleComplete.

70
00:05:41.744 --> 00:05:42.519
&gt;&gt; Kadi Kraman: Lovely.

71
00:05:46.453 --> 00:05:54.715
&gt;&gt; Kadi Kraman: So here in our index file,
&gt;&gt; Kadi Kraman: We

72
00:05:54.715 --> 00:05:59.130
will add another property to
our shopping list item type.

73
00:05:59.130 --> 00:06:02.905
And this will be an optional property for
when the item was completed.

74
00:06:02.905 --> 00:06:06.230
So let's do completedatTimestamp.

75
00:06:09.103 --> 00:06:12.580
&gt;&gt; Kadi Kraman: And
this will be an optional number,

76
00:06:12.580 --> 00:06:16.525
I'm making it a number on purpose.

77
00:06:16.525 --> 00:06:19.005
And the reason for
that will become clear later.

78
00:06:19.005 --> 00:06:22.854
But we're gonna make it a timestamp,
not a time string.

79
00:06:26.246 --> 00:06:30.996
&gt;&gt; Kadi Kraman: And
we'll do a const handleToggleComplete.

80
00:06:32.526 --> 00:06:39.726
And this will be an ID of string.

81
00:06:42.878 --> 00:06:47.680
So this handleToggleComplete will be
called on the shopping list items, so

82
00:06:47.680 --> 00:06:49.637
we'll do onToggleComplete.

83
00:06:49.637 --> 00:06:53.271
It will be a function
handleToggleComplete with the item ID.

84
00:06:59.389 --> 00:07:00.401
&gt;&gt; Kadi Kraman: Lovely.

85
00:07:03.342 --> 00:07:05.667
&gt;&gt; Kadi Kraman: And
the implementation there of this,

86
00:07:05.667 --> 00:07:09.976
it will depend on whether or
not the item is currently completed.

87
00:07:09.976 --> 00:07:14.768
So the newShoppingList,
&gt;&gt; Kadi Kraman: We're gonna do

88
00:07:14.768 --> 00:07:18.928
map over the existing array, so
let's do a shoppingLIST.map.

89
00:07:22.050 --> 00:07:23.208
&gt;&gt; Kadi Kraman: With the item.

90
00:07:25.596 --> 00:07:33.094
&gt;&gt; Kadi Kraman: Okay, so if the item.id
equals the one that we're toggling,

91
00:07:33.094 --> 00:07:37.909
triple equals for a strict comparison.

92
00:07:37.909 --> 00:07:43.705
I'm going to do some handling, but
the default case, if it doesn't equal,

93
00:07:43.705 --> 00:07:48.024
then we're just going to
return the item as-is, okay?

94
00:07:48.024 --> 00:07:50.064
So how do we handle the new one?

95
00:07:50.064 --> 00:07:55.570
So, we'll still return
an object with the item,

96
00:07:55.570 --> 00:08:00.954
but we'll change this
completedAtTimestamp.

97
00:08:00.954 --> 00:08:06.772
So the completedAtTimestamp will be
if the current completedAtTimestamp,

98
00:08:06.772 --> 00:08:12.954
if it had one already, then we're going
to set it to undefined, so uncompleted.

99
00:08:14.184 --> 00:08:19.221
And then, otherwise,
we're going to do date.now,

100
00:08:19.221 --> 00:08:23.171
which will give us the current time stamp.

101
00:08:25.437 --> 00:08:29.594
&gt;&gt; Kadi Kraman: And we'll set the
shoppingList to be the new shoppingList.

102
00:08:32.494 --> 00:08:37.765
Lovely, so now, when I selected,
it's not working

103
00:08:37.765 --> 00:08:44.283
because we also need to pass in
the isCompleted drop dynamically.

104
00:08:44.283 --> 00:08:50.383
So in our shopping this item,
we have this isCompleted property.

105
00:08:51.523 --> 00:08:56.233
And now, we know that it is completed
if it has a completed at timestamp.

106
00:08:56.233 --> 00:09:02.348
So we'll do Boolean if
item completedAtTimestamp.

107
00:09:04.401 --> 00:09:08.911
&gt;&gt; Kadi Kraman: So now, if I toggle it,
it actually toggles from completed,

108
00:09:08.911 --> 00:09:13.093
it's to not completed, so
I can have multiple of these.

109
00:09:17.041 --> 00:09:18.648
&gt;&gt; Kadi Kraman: And they will toggle.

