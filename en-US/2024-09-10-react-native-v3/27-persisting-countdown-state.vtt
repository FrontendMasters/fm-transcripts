WEBVTT

1
00:00:00.380 --> 00:00:04.640
&gt;&gt; Speaker 1: So the next thing we're
going to do is persist the state.

2
00:00:04.640 --> 00:00:08.660
So we've seen this done
already with async storage.

3
00:00:08.660 --> 00:00:10.859
We're going to do this
again with async storage.

4
00:00:10.859 --> 00:00:15.061
Originally this, I intended to set
the timestamp with date now instead of

5
00:00:15.061 --> 00:00:17.830
seconds, so I used milliseconds here.

6
00:00:17.830 --> 00:00:22.857
But if you ever need to have a second,
minute, hour, day, or

7
00:00:22.857 --> 00:00:28.194
whatever in milliseconds,
then this is a nice reference for it.

8
00:00:28.194 --> 00:00:35.201
So one second is 1000 milliseconds,
one minute is 60 times 1000 milliseconds,

9
00:00:35.201 --> 00:00:40.028
and then one hour is 60 minutes,
one day is 24 hours, etc.

10
00:00:41.889 --> 00:00:48.346
So let's see what we actually want to
store in our Countdown Storage State.

11
00:00:48.346 --> 00:00:54.856
So I'm gonna create a type
called PersistedCountdownState.

12
00:00:58.474 --> 00:01:03.064
And this is the stuff that we want
to store in our acing storage.

13
00:01:03.064 --> 00:01:07.951
So one thing about notifications is
that once you trigger a notification, so

14
00:01:07.951 --> 00:01:11.046
I'm setting a notification
to be in the future.

15
00:01:11.046 --> 00:01:15.058
And unless it happens or
I cancel it, unless I cancel it, so

16
00:01:15.058 --> 00:01:18.286
I'm sending notification
to be in the future.

17
00:01:18.286 --> 00:01:24.720
And unless I cancel it will get triggered
even though I've set a new notification.

18
00:01:24.720 --> 00:01:29.400
So I want to make sure that I'm storing
the idea of the notification that I

19
00:01:29.400 --> 00:01:32.510
created so
I could cancel it in the future.

20
00:01:32.510 --> 00:01:38.957
So the idea is that let's say that there's
a thing that I need to do every hour and

21
00:01:38.957 --> 00:01:44.167
I do it after 30 minutes, so
that was before my notification.

22
00:01:44.167 --> 00:01:46.225
So I want to cancel notification and

23
00:01:46.225 --> 00:01:50.284
then not get this notification
because I've already done the thing.

24
00:01:50.284 --> 00:01:54.954
So with this we need to store
the currentNotificationId.

25
00:01:59.152 --> 00:02:03.598
Which will be a string or undefined.

26
00:02:03.598 --> 00:02:07.293
Undefined will be the initial state and
for

27
00:02:07.293 --> 00:02:11.399
our history tab let's keep it simple for
now and

28
00:02:11.399 --> 00:02:18.085
we'll just store the array of time stamps
of the past times you completed it.

29
00:02:18.085 --> 00:02:21.257
So completedAtTimestamps.

30
00:02:23.811 --> 00:02:26.694
&gt;&gt; Speaker 1: So
this will be an array of numbers.

31
00:02:32.386 --> 00:02:37.243
&gt;&gt; Speaker 1: Let's also do a storage key.

32
00:02:37.243 --> 00:02:42.857
So const CountdownStorageKey.

33
00:02:42.857 --> 00:02:47.357
So this will be the key that
we're gonna use in acing storage

34
00:02:47.357 --> 00:02:50.331
to store our countdown state against.

35
00:02:50.331 --> 00:02:52.709
So let's call it taskly-countdown.

36
00:03:00.102 --> 00:03:03.935
&gt;&gt; Speaker 1: And this timestamp,
let's call it frequency.

37
00:03:05.105 --> 00:03:08.222
So we're gonna hard-code this.

38
00:03:08.222 --> 00:03:12.104
So in the future,
you could make this UI dynamic, so

39
00:03:12.104 --> 00:03:16.445
the user could create a task for
themselves in the future.

40
00:03:16.445 --> 00:03:19.773
So they could say that,
I wanna do this every two weeks and

41
00:03:19.773 --> 00:03:22.246
here's the thing I wanna do, etc.

42
00:03:22.246 --> 00:03:25.796
But we're gonna just hard code this for
now for simplicity.

43
00:03:25.796 --> 00:03:30.806
So this frequency will denote how
often you need to do the thing.

44
00:03:30.806 --> 00:03:36.406
So I'm gonna set this to 10 seconds for
the time being.

45
00:03:36.406 --> 00:03:40.983
So that will be 10 times 1000, so

46
00:03:40.983 --> 00:03:44.875
this will be 10 milliseconds.

47
00:03:44.875 --> 00:03:48.693
So this is 10 seconds in milliseconds.

48
00:03:48.693 --> 00:03:51.172
And we're gonna hard code this for
now, but

49
00:03:51.172 --> 00:03:55.193
in the future you could build a UI to
let users have defined themselves.

50
00:03:56.963 --> 00:03:58.556
And I'm gonna leave it for 10 seconds for

51
00:03:58.556 --> 00:04:00.381
now because it will be easier to use for
testing.

52
00:04:08.377 --> 00:04:13.421
Now let's add another use state for
the countdownState.

53
00:04:13.421 --> 00:04:18.478
So we'll do a CountdownState and

54
00:04:18.478 --> 00:04:21.913
set CountdownState.

55
00:04:21.913 --> 00:04:26.310
So this will be the persistent state
that we're getting from async storage.

56
00:04:26.310 --> 00:04:27.874
So this will be useState.

57
00:04:29.844 --> 00:04:33.034
And we're gonna start with undefined,
so we'll start with nothing.

58
00:04:34.664 --> 00:04:38.434
And it will be the persisted
CountdownState.

59
00:04:42.148 --> 00:04:45.385
And now, I'm glad another useEffect.

60
00:04:45.385 --> 00:04:50.002
So, you can have as many useEffects as you
want, so you don't need to just have one.

61
00:04:50.002 --> 00:04:53.712
So in this case, because these
are kind of separate interactions,

62
00:04:53.712 --> 00:04:55.544
let's do a separate useEffect.

63
00:05:05.041 --> 00:05:07.526
&gt;&gt; Speaker 1: And let's do the same
as we did with the shopping list.

64
00:05:07.526 --> 00:05:13.646
So we want to initialize by fetching
the countdown state from storage.

65
00:05:13.646 --> 00:05:17.420
So remember, you can't have
async functions in useEffect.

66
00:05:17.420 --> 00:05:25.822
So we'll do const init, which will be an
async function, an async error function.

67
00:05:25.822 --> 00:05:31.052
And this will do const value.

68
00:05:31.052 --> 00:05:36.322
And we're going to get
the countdown state from storage.

69
00:05:36.322 --> 00:05:40.561
So we'll use the utility
functional created area,

70
00:05:40.561 --> 00:05:43.170
which will be getFromStorage.

71
00:05:43.170 --> 00:05:47.869
And we'll pass in the countdown
storage key, which is this.

72
00:05:51.365 --> 00:05:55.157
And setCountdownState to be this value.

73
00:05:58.840 --> 00:06:00.175
And we'll call init.

74
00:06:05.296 --> 00:06:08.627
Now in our interval useEffect

75
00:06:10.715 --> 00:06:16.598
The timestamp will now depend
on the frequency, right.

76
00:06:16.598 --> 00:06:18.419
So here in CompletedAtTimestamps,

77
00:06:18.419 --> 00:06:21.245
we're storing every time
we've completed the things.

78
00:06:21.245 --> 00:06:26.053
So let's say that we're going to
store the last completed first.

79
00:06:26.053 --> 00:06:31.389
So we can do the lastCompletedTimestamp,

80
00:06:36.786 --> 00:06:43.900
And this will be the countdownState,
completedAtTimestamps.

81
00:06:43.900 --> 00:06:49.356
So this might be undefined, so
that's why in Touchscript Land we're gonna

82
00:06:49.356 --> 00:06:55.257
have a question mark here because it's
safely getting the computed timestamps.

83
00:06:55.257 --> 00:07:00.970
And we're gonna get the last compute, so
this will be the first one on the list.

84
00:07:06.785 --> 00:07:10.047
So here in a useEffect,
our timestamp will change.

85
00:07:10.047 --> 00:07:18.780
So the timestamp will depend on
whether you've completed it before.

86
00:07:18.780 --> 00:07:21.871
So if it's completed before,

87
00:07:26.905 --> 00:07:30.970
Okay, so this timestamp will
be when the thing is due by.

88
00:07:30.970 --> 00:07:36.792
So if it's completed before, then we'll
use this last completed timestamp, and

89
00:07:36.792 --> 00:07:41.967
we're going to add the interval or
frequency of how often we want to do it.

90
00:07:41.967 --> 00:07:44.437
So that's why we had to
define it in milliseconds.

91
00:07:45.567 --> 00:07:47.347
So let's do plus frequency.

92
00:07:49.687 --> 00:07:53.300
And otherwise, just to have a default,
if you've never done this before,

93
00:07:53.300 --> 00:07:57.202
if you've never completed the thing
before, we'll just default to date.now.

94
00:08:02.959 --> 00:08:07.324
And lastly, so
passing in anything in this array,

95
00:08:07.324 --> 00:08:12.612
in the use effect, do sparingly and
really think it through.

96
00:08:12.612 --> 00:08:17.603
Because the way use effect
works is it runs every time

97
00:08:17.603 --> 00:08:23.168
The value passed here in this
arguments array is updated.

98
00:08:24.538 --> 00:08:33.038
So in our case, we want to run this every
time this LastCompletedTimestamp changes.

99
00:08:34.168 --> 00:08:37.355
So what will happen is when this changes,

100
00:08:37.355 --> 00:08:42.040
it will clear the interval and
then run this again.

101
00:08:42.040 --> 00:08:47.184
And it's really important to do
this sparingly because for example,

102
00:08:47.184 --> 00:08:52.673
if you had a set state inside the use
effect and then also in the dependencies

103
00:08:52.673 --> 00:08:57.580
array then you would get into
an infinite loop and that will be sad.

104
00:08:59.720 --> 00:09:03.041
Let us hook up this schedule notification.

105
00:09:03.041 --> 00:09:06.226
So we call this schedule notification, but

106
00:09:06.226 --> 00:09:10.797
we want to also then update
the countdown state when we do this.

107
00:09:10.797 --> 00:09:11.993
So.

108
00:09:17.404 --> 00:09:18.467
Okay?

109
00:09:18.467 --> 00:09:23.885
Let's do a let here for
the pushNotificationId.

110
00:09:27.717 --> 00:09:32.098
And this schedule notification
a sync returns a string,

111
00:09:32.098 --> 00:09:34.844
which is the pushNotificationId.

112
00:09:41.992 --> 00:09:47.274
Now, let's update our title
to say that the thing is due.

113
00:09:49.751 --> 00:09:56.354
And then for the trigger, so
when we schedule the notification,

114
00:09:56.354 --> 00:10:00.876
we want it to happen
when our frequency was.

115
00:10:00.876 --> 00:10:02.038
So we'll use this frequency.

116
00:10:02.038 --> 00:10:05.936
This frequency is now millisecond,
in milliseconds, not seconds.

117
00:10:05.936 --> 00:10:10.838
So we'll say the trigger will be
frequency divided by 1000 because

118
00:10:10.838 --> 00:10:12.318
this takes seconds.

119
00:10:16.576 --> 00:10:21.859
And then, so this will be after this else,
so we'll set our push notification.

120
00:10:21.859 --> 00:10:25.659
We want to update our state with
the data that we just added.

121
00:10:30.129 --> 00:10:34.919
So first, and this is the important
tidy up thing, we'll check our

122
00:10:34.919 --> 00:10:40.316
countdown state to see that if there
was already a notification Scheduled.

123
00:10:40.316 --> 00:10:44.077
So let's do countdownState
currentNotificationId.

124
00:10:44.077 --> 00:10:51.676
So if this is not undefined,
we will call await notifications and

125
00:10:51.676 --> 00:10:56.384
it's cancel scheduled notification.

126
00:10:56.384 --> 00:10:58.751
And actually notice that
there is a function for

127
00:10:58.751 --> 00:11:01.328
cancel all skation notifications as well.

128
00:11:01.328 --> 00:11:03.838
So this might be handy in some scenarios.

129
00:11:03.838 --> 00:11:07.526
But in this case,
we know our notification ID.

130
00:11:07.526 --> 00:11:11.572
So we can cancel this
particular notification.

131
00:11:11.572 --> 00:11:16.934
So we'll call cancel notification,
async with notification ID.

132
00:11:24.698 --> 00:11:28.568
And now we'll need the newCountdownState.

133
00:11:30.448 --> 00:11:36.968
So const newCountdownState.

134
00:11:36.968 --> 00:11:43.079
So this will be the persisted
countdownState that we created earlier.

135
00:11:43.079 --> 00:11:46.010
So we'll need to have
the currentNotificationId.

136
00:11:46.010 --> 00:11:53.552
So this will be the push notification
ID that we created here.

137
00:11:53.552 --> 00:11:56.392
So this might be undefined,
but that is fine.

138
00:12:00.170 --> 00:12:02.028
And completedAtTimestamp so

139
00:12:02.028 --> 00:12:05.599
this is our history of past
times we've completed this.

140
00:12:08.991 --> 00:12:10.935
We need to also handle the case,

141
00:12:10.935 --> 00:12:14.538
the initial case where
the countdown state didn't exist.

142
00:12:14.538 --> 00:12:22.073
So let's say that, if countdown
state exists or when it didn't.

143
00:12:22.073 --> 00:12:27.482
So when it didn't, we just do date.now
to add the current timestamp.

144
00:12:28.692 --> 00:12:31.013
And if we already had a countdown state,

145
00:12:31.013 --> 00:12:35.722
then we want to spread the countdown
state to complete our timestamps.

146
00:12:35.722 --> 00:12:40.177
And we want to add the new completion
to the beginning of the array.

147
00:12:40.177 --> 00:12:42.398
So we'll add our date.now here.

148
00:12:46.603 --> 00:12:49.172
Now let's set countdownstate.

149
00:12:54.527 --> 00:12:59.711
And await save to storage, which will need

150
00:12:59.711 --> 00:13:06.479
the countdown storage key and
the new countdown state.

151
00:13:09.522 --> 00:13:15.332
Okay, that was a lot of code and
let's hope it works.

152
00:13:17.760 --> 00:13:22.855
So we'll open this, so
I've never done this before, so it's 0.

153
00:13:22.855 --> 00:13:26.386
So I'm hoping if I do this,

154
00:13:26.386 --> 00:13:31.301
it's going to start counting down and

155
00:13:31.301 --> 00:13:36.368
when it goes to one, we go, right, and

156
00:13:36.368 --> 00:13:43.308
then if I do the thing,
it'll go back to count again.

157
00:13:43.308 --> 00:13:47.098
And let's also check that,
so let's go into the red.

158
00:13:48.748 --> 00:13:52.708
And I'm gonna close this completely and
reopen it.

159
00:13:55.198 --> 00:14:00.003
And I'm hoping that it's in the red,
which means that it's actually persisted.

160
00:14:00.003 --> 00:14:03.149
And let me show you on my Android phone.

161
00:14:14.579 --> 00:14:18.331
Okay, so initially I need to do it once,
so it will start counting.

162
00:14:19.802 --> 00:14:21.042
And now it's gonna count down.

163
00:14:22.832 --> 00:14:26.952
When we go into the red,
which is excellent.

164
00:14:26.952 --> 00:14:29.792
So I didn't get a notification
because I'm in the app.

165
00:14:29.792 --> 00:14:34.742
So let me say that I've done the thing and
I background the app.

166
00:14:34.742 --> 00:14:39.625
So I'm expecting to get
a notification in a couple

167
00:14:39.625 --> 00:14:43.706
of seconds saying that this saying is do.

168
00:14:43.706 --> 00:14:47.544
Beautiful and
the other thing that we want to check that

169
00:14:47.544 --> 00:14:52.826
the notification gets canceled if
I do the thing before it's due.

170
00:14:52.826 --> 00:14:57.101
So let's say that I've done the thing and

171
00:14:57.101 --> 00:15:03.466
then I'm going to do it three
more times before it gets to red.

172
00:15:03.466 --> 00:15:05.036
So I'm waiting a couple of seconds.

173
00:15:07.606 --> 00:15:08.996
And then I background it.

174
00:15:08.996 --> 00:15:12.912
So even though I've now done it three
times, I'm expecting to only get one

175
00:15:12.912 --> 00:15:16.286
notification because the other
two should have been canceled.

176
00:15:18.356 --> 00:15:22.888
And I do so, that is the value
of canceling the notification.

