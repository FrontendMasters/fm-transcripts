WEBVTT

1
00:00:00.000 --> 00:00:04.434
&gt;&gt; Kadi Kraman: And actually, one thing
that I wanted to show you that I didn't

2
00:00:04.434 --> 00:00:07.363
add initially in the example app is that,

3
00:00:07.363 --> 00:00:12.820
when we reload we actually get this
little, so this is like an overdue state.

4
00:00:12.820 --> 00:00:18.214
But when we open it it's initially white
and then it flicks to the red state.

5
00:00:18.214 --> 00:00:22.990
And the reason that's happening is
because we are using use effect to

6
00:00:22.990 --> 00:00:27.602
asynchronously fetch from storage,
but the initial state that we

7
00:00:27.602 --> 00:00:32.154
have is that it is not overdue,
so it's like this default state.

8
00:00:32.154 --> 00:00:37.454
And this normally isn't a problem because
this method of using asyncStorage,

9
00:00:37.454 --> 00:00:40.469
so this is how it works
kind of under the hood.

10
00:00:40.469 --> 00:00:44.316
And it's useful to know that
this is how it works, but

11
00:00:44.316 --> 00:00:49.877
in usual production applications you
would use a state management library,

12
00:00:49.877 --> 00:00:53.143
which will then handle the fetching for
you.

13
00:00:53.143 --> 00:00:57.560
And then you can keep your splash
screen up while you're fetching, and

14
00:00:57.560 --> 00:00:58.746
things like that.

15
00:00:58.746 --> 00:01:02.620
But in our case, we can actually do
something simple and just show a loading

16
00:01:02.620 --> 00:01:06.454
spinner while things are being fetched so
we wouldn't get this flicker.

17
00:01:06.454 --> 00:01:09.867
So I'm gonna just quickly show
you how you might do that.

18
00:01:09.867 --> 00:01:15.930
So in your app native,
you have this built-in component,

19
00:01:15.930 --> 00:01:19.824
it's called an activity indicator.

20
00:01:19.824 --> 00:01:23.440
[COUGH] Just before I return,

21
00:01:23.440 --> 00:01:28.864
I'm going to just to show you,
do a view and

22
00:01:28.864 --> 00:01:34.151
render the activity indicator in there.

23
00:01:34.151 --> 00:01:38.785
So this is what it looks like,
let me just style it a little bit better.

24
00:01:38.785 --> 00:01:45.696
So styles, activityIndicatorContainer,

25
00:01:45.696 --> 00:01:49.886
that was a long style name.

26
00:01:51.895 --> 00:01:55.525
&gt;&gt; Kadi Kraman: So
let's give it a background color of white.

27
00:01:58.937 --> 00:02:04.018
&gt;&gt; Kadi Kraman: And
let's to justify a content center and

28
00:02:04.018 --> 00:02:10.549
an item center and a flex 1,
we do recognize styles so

29
00:02:10.549 --> 00:02:14.759
much, so just to go through them,

30
00:02:14.759 --> 00:02:19.132
because it's such a common thing.

31
00:02:19.132 --> 00:02:26.097
So flex 1 says, make this container
fill the entire size of the parent.

32
00:02:32.770 --> 00:02:38.529
&gt;&gt; Kadi Kraman: And
then justifyContent center says,

33
00:02:38.529 --> 00:02:43.247
center this item in the parent.

34
00:02:43.247 --> 00:02:47.318
So if you've ever used justifontent
center and it's not centering,

35
00:02:47.318 --> 00:02:49.944
it's because you haven't done the flex1.

36
00:02:49.944 --> 00:02:54.088
So the container isn't even
as big as you were expecting.

37
00:02:54.088 --> 00:02:59.730
So I have written these
three styles about a billion

38
00:02:59.730 --> 00:03:04.987
times in my life I think,
and I think that is it.

39
00:03:04.987 --> 00:03:10.339
So okay, so what we can do now is we
can add another useState to whether or

40
00:03:10.339 --> 00:03:13.654
not we are done fetching
our initial state.

41
00:03:13.654 --> 00:03:20.244
So let's just say is loading and
set is loading.

42
00:03:20.244 --> 00:03:25.857
There'll be a useState, and
it will start with true.

43
00:03:28.872 --> 00:03:33.974
&gt;&gt; Kadi Kraman: And in our useState
where we set the initial count as state,

44
00:03:33.974 --> 00:03:37.150
let's also do setIsLoading false.

45
00:03:40.765 --> 00:03:47.100
&gt;&gt; Kadi Kraman: Here in our return,
we can do if isloading,

46
00:03:47.100 --> 00:03:52.936
we can return early out of our function.

47
00:03:52.936 --> 00:03:55.888
And do this little full
screen loading thing.

48
00:03:57.917 --> 00:04:04.325
&gt;&gt; Kadi Kraman: [COUGH] I've
forgotten there is one more thing.

49
00:04:04.325 --> 00:04:12.225
So it's actually, it's not ready until
we have set this use effect, mm-hm.

50
00:04:12.225 --> 00:04:18.882
Okay, so actually, it's finished loading
when the first interval has been set.

51
00:04:18.882 --> 00:04:22.317
This is interesting.

52
00:04:24.569 --> 00:04:28.282
&gt;&gt; Kadi Kraman: It's always tricky when
you have initial state, as well okay,

53
00:04:28.282 --> 00:04:30.845
let's put the letter that is loading here.

54
00:04:30.845 --> 00:04:35.408
So if there is a last,

55
00:04:35.408 --> 00:04:38.963
be a timestamp.

56
00:04:47.946 --> 00:04:51.414
&gt;&gt; Kadi Kraman: Okay, so would that work?

57
00:04:51.414 --> 00:04:56.704
&gt;&gt; Kadi Kraman: Okay, so this does
work it actually wouldn't work now

58
00:04:56.704 --> 00:05:01.879
with the initial load because
if we didn't have a last

59
00:05:01.879 --> 00:05:06.939
completed timestamp,
then it would load forever.

60
00:05:06.939 --> 00:05:10.836
We can add some additional
handling to this, but

61
00:05:10.836 --> 00:05:13.504
I'm not going to do it right now.

62
00:05:13.504 --> 00:05:17.819
I think the idea was to show that you
could do like a full screen loading state

63
00:05:17.819 --> 00:05:19.613
and this is what and that does.

64
00:05:23.781 --> 00:05:29.606
&gt;&gt; Kadi Kraman: Okay, CountDownStatus so
let's actually put it in here.

65
00:05:29.606 --> 00:05:32.624
So let's put the isloading
in the CountDownStatus.

66
00:05:32.624 --> 00:05:35.414
Would that make sense yes?

67
00:05:38.978 --> 00:05:44.398
&gt;&gt; Kadi Kraman: Okay, we actually

68
00:05:44.398 --> 00:05:52.874
needed two parameters here.

69
00:05:52.874 --> 00:05:57.109
This is what happens when you add
things to your course that you weren't

70
00:05:57.109 --> 00:05:57.965
planning on.

71
00:05:57.965 --> 00:06:01.226
But it's interesting, okay, so
we actually have two statuses here.

72
00:06:01.226 --> 00:06:05.058
So we have whether we've
fetched it from storage and

73
00:06:05.058 --> 00:06:08.725
then whether we've actually
set this interval.

74
00:06:10.826 --> 00:06:12.999
&gt;&gt; Kadi Kraman: So in our CountDownStatus,

75
00:06:12.999 --> 00:06:17.625
we have isloading to whether
it's been fetched from start.

76
00:06:17.625 --> 00:06:21.064
So let's do that I do
wanna get this right?

77
00:06:24.062 --> 00:06:29.832
&gt;&gt; Kadi Kraman: I guess so
I'm gonna call this, okay and

78
00:06:29.832 --> 00:06:37.320
then,
&gt;&gt; Kadi Kraman: We

79
00:06:37.320 --> 00:06:39.976
call an axis, these from here.

80
00:06:42.965 --> 00:06:46.341
&gt;&gt; Kadi Kraman: I'm gonna leave
it as is for the time being, so

81
00:06:46.341 --> 00:06:51.896
this will work if you've had at least
one time you've pressed this button.

82
00:06:54.130 --> 00:07:01.005
&gt;&gt; Kadi Kraman: All right, and
make sure that it works on my phone.

