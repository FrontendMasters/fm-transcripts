WEBVTT

1
00:00:00.000 --> 00:00:01.642
Let's make a Docker container.

2
00:00:01.642 --> 00:00:04.927
Let's containerize our application
that we just wrote, and

3
00:00:04.927 --> 00:00:07.715
then we're gonna spend
a multiple instances of it.

4
00:00:07.715 --> 00:00:10.244
That way, we'll have three or
four servers running on our server.

5
00:00:12.832 --> 00:00:16.272
So we're gonna create a Docker
container for our app.

6
00:00:16.272 --> 00:00:18.570
There's a link here with
a complete Dockerfile, but

7
00:00:18.570 --> 00:00:19.906
we'll just do this right now.

8
00:00:19.906 --> 00:00:22.563
I won't expect you to know how to
write a Dockerfile by yourself.

9
00:00:22.563 --> 00:00:25.780
And it's only a couple lines, and
I'll talk about what every line is doing.

10
00:00:28.081 --> 00:00:30.905
So I'm gonna jump back to my computer.

11
00:00:30.905 --> 00:00:33.419
Actually, for this one,
I'm gonna write this on the server.

12
00:00:33.419 --> 00:00:35.136
It's saving me a little bit of trouble.

13
00:00:35.136 --> 00:00:37.145
Because I'm gonna install
Docker on my server,

14
00:00:37.145 --> 00:00:40.491
I don't really like Docker on my computer
cuz it's a pretty heavy application.

15
00:00:40.491 --> 00:00:42.077
It takes up a lot of resources.

16
00:00:42.077 --> 00:00:44.587
But I'll run it on my server
because that's where I need it.

17
00:00:44.587 --> 00:00:46.289
That's what's actually going
to power my container.

18
00:00:48.666 --> 00:00:52.878
So, let's see, where am I right now?

19
00:00:52.878 --> 00:00:54.429
home/jem, that's not where I wanna be.

20
00:00:54.429 --> 00:01:01.030
I want to be in cd /var/www/app/.

21
00:01:03.269 --> 00:01:05.218
Okay, we're all here.

22
00:01:05.218 --> 00:01:08.907
So next, let's create a Dockerfile.

23
00:01:08.907 --> 00:01:17.143
So we just call vi Dockerfile, Okay?

24
00:01:23.492 --> 00:01:28.892
So, the first thing we need to do is say,
what type of OS it's running on.

25
00:01:28.892 --> 00:01:31.838
So I said earlier,
the OS doesn't really matter.

26
00:01:31.838 --> 00:01:35.138
Well, it does, cuz there's always an
operating system somewhere in the layer.

27
00:01:35.138 --> 00:01:38.384
You can't just have an application
that talks to nothing.

28
00:01:38.384 --> 00:01:40.663
But in this case, we're gonna use Node.

29
00:01:40.663 --> 00:01:44.750
Node has an official Docker image And
it uses something called Alpine Linux, or

30
00:01:44.750 --> 00:01:49.264
Alpine, depending on where you are in the
world, which is a really, really, really,

31
00:01:49.264 --> 00:01:51.283
really lightweight version of Linux.

32
00:01:51.283 --> 00:01:52.229
So it's superfast.

33
00:01:52.229 --> 00:01:53.391
No fluff.

34
00:01:53.391 --> 00:01:56.483
It only exists to run
this one application.

35
00:01:56.483 --> 00:02:00.411
So we're gonna use
the FROM directive there.

36
00:02:00.411 --> 00:02:02.780
Say FROM, and I wanna use node 19.

37
00:02:02.780 --> 00:02:09.428
So I'll say node:19-alpine.3.16.

38
00:02:09.428 --> 00:02:14.401
If you're saying, where did I get this
exact node version and package name?

39
00:02:14.401 --> 00:02:17.949
Just look up Node Docker, and
it will link to the official repository.

40
00:02:17.949 --> 00:02:19.723
They maintain this image for us.

41
00:02:19.723 --> 00:02:21.190
So, we don't have to do
any of that work for us.

42
00:02:21.190 --> 00:02:22.784
It's already been built.

43
00:02:22.784 --> 00:02:28.207
Next, we have to set up Docker properly.

44
00:02:28.207 --> 00:02:33.579
So, Docker in this image by default
is gonna run with a user called Node.

45
00:02:33.579 --> 00:02:37.034
It doesn't run as sudo or
cells, it runs as its own user.

46
00:02:37.034 --> 00:02:40.329
So that means we have to set that up for
us in the operating system.

47
00:02:40.329 --> 00:02:46.039
So we can say, RUN, oops,
on the next line, RUN, mkdir.

48
00:02:46.039 --> 00:02:50.600
Remember what that does,
it makes a directory, -p.

49
00:02:50.600 --> 00:02:55.300
That's the command to make a string of
directories if the first one doesn't

50
00:02:55.300 --> 00:02:57.732
exist, so we make that at home/node.

51
00:03:00.283 --> 00:03:02.365
And Docker likes to run
from the home directory.

52
00:03:02.365 --> 00:03:04.289
I like running from var dub dub dub.

53
00:03:04.289 --> 00:03:06.852
Personal preference,
doesn't really matter too much.

54
00:03:06.852 --> 00:03:11.345
But in this case, we're gonna
run our application within this

55
00:03:11.345 --> 00:03:15.008
operating system from
the home directory of node.

56
00:03:15.008 --> 00:03:19.800
And we wanna make a directory for
our node modules,

57
00:03:19.800 --> 00:03:23.821
so /home/node/app/node_modules.

58
00:03:23.821 --> 00:03:28.257
And we want to chown,
change the ownership of

59
00:03:28.257 --> 00:03:33.413
the node modules to the node,
user, node and node.

60
00:03:36.364 --> 00:03:44.105
And that wouldn't change the ownership
entirely in the app directory node.

61
00:03:44.105 --> 00:03:45.784
There we go.

62
00:03:45.784 --> 00:03:48.392
So, now, we created a node directory, or

63
00:03:48.392 --> 00:03:53.174
we created an app directory within
the node home repo, or home directory, and

64
00:03:53.174 --> 00:03:55.941
then we changed ownership
to the node owner.

65
00:03:55.941 --> 00:03:59.684
Next, we need to set a working directory
of where we're actually gonna do all

66
00:03:59.684 --> 00:04:03.380
the work with a Docker container is
actually gonna load up the application.

67
00:04:03.380 --> 00:04:05.475
That's pretty easy cuz we just created it.

68
00:04:05.475 --> 00:04:07.488
So home/node/app.

69
00:04:07.488 --> 00:04:12.167
&gt;&gt; You need a K in your
make directory line.

70
00:04:12.167 --> 00:04:13.031
&gt;&gt; Thank you.

71
00:04:13.031 --> 00:04:16.482
Again, these things that I'll get all the
way to the end, and I'll see if it works,

72
00:04:16.482 --> 00:04:17.514
and then it won't work.

73
00:04:17.514 --> 00:04:19.615
And I'll be like, why?

74
00:04:19.615 --> 00:04:20.436
Good catch.

75
00:04:20.436 --> 00:04:23.037
Need a K in mkdir, not mdir.

76
00:04:23.037 --> 00:04:24.855
So we set our working directory.

77
00:04:24.855 --> 00:04:29.928
Next, and this is where it kind of
messes with your head a little bit.

78
00:04:29.928 --> 00:04:33.918
Because we're making a Docker image
from our existing application

79
00:04:33.918 --> 00:04:38.678
that we already wrote, we need to copy
the files from our directory, right now,

80
00:04:38.678 --> 00:04:41.549
our actual computer,
to the Docker container.

81
00:04:41.549 --> 00:04:45.006
So these are just sets of instructions for
Docker when we build the Docker container,

82
00:04:45.006 --> 00:04:45.829
a little note to do.

83
00:04:45.829 --> 00:04:53.584
So we need to copy our package *.json.

84
00:04:53.584 --> 00:04:55.704
So, it's gonna copy
package json package lock.

85
00:04:57.891 --> 00:05:00.573
And we're gonna copy everything
else in that directory as well.

86
00:05:00.573 --> 00:05:02.840
Just being really explicit here.

87
00:05:02.840 --> 00:05:05.304
We are just gonna copy it to the Home app,
should I say.

88
00:05:10.831 --> 00:05:15.118
So, no, we didn't copy node modules or
anything else.

89
00:05:15.118 --> 00:05:16.476
We can run that with the npm script.

90
00:05:16.476 --> 00:05:19.717
It's gonna install the node modules
specific for this operating system.

91
00:05:22.805 --> 00:05:27.159
Next, we're gonna set the user to node.

92
00:05:27.159 --> 00:05:34.465
And now, we can run npm install from
the package that we copied over.

93
00:05:34.465 --> 00:05:40.842
&gt;&gt; We said on line three that our working
directory was the node application.

94
00:05:40.842 --> 00:05:49.055
But on line four we have the relative
address from our www/app directory.

95
00:05:49.055 --> 00:05:53.318
[INAUDIBLE] Relative directory
things is referenced off of

96
00:05:53.318 --> 00:05:56.016
where the Dockerfile gets run from.

97
00:05:56.016 --> 00:05:59.588
&gt;&gt; Yeah, the Dockerfile is always gonna
live in the application that you're trying

98
00:05:59.588 --> 00:06:01.620
to make, containerize,
so it makes it easy.

99
00:06:01.620 --> 00:06:05.565
You don't have to do any weird
till days and things like that.

100
00:06:05.565 --> 00:06:06.985
Just a little bit easier to reason about.

101
00:06:06.985 --> 00:06:08.453
Good question.

102
00:06:08.453 --> 00:06:11.657
So, next,
we just we switch the user to node.

103
00:06:11.657 --> 00:06:15.810
We're gonna run npm install
as part of the Docker build.

104
00:06:15.810 --> 00:06:19.543
Next, we're gonna copy everything over.

105
00:06:19.543 --> 00:06:26.977
I'm going to say chown node,
change ownership to everything.

106
00:06:28.736 --> 00:06:33.111
So we're copying, the dot dot is
everything in our current directory now.

107
00:06:33.111 --> 00:06:36.995
The reason why we did the package json
first where we copy that over, and

108
00:06:36.995 --> 00:06:40.685
then we ran npm install is so
all the packages can install first, and

109
00:06:40.685 --> 00:06:43.302
then we copy the rest of
our applications over.

110
00:06:43.302 --> 00:06:45.845
You could probably do this in
a little bit of different order, but

111
00:06:45.845 --> 00:06:47.289
this is usually the best way to do it.

112
00:06:47.289 --> 00:06:50.197
So, everything we copied
over we also did a chown, so

113
00:06:50.197 --> 00:06:54.399
we change the ownership from our current
operating system which is owned by me

114
00:06:54.399 --> 00:06:57.390
over to the node user as far
as when we copy things over.

115
00:06:57.390 --> 00:07:01.795
And that's for feel you start to get
a little tricky cuz sometimes you're

116
00:07:01.795 --> 00:07:05.785
within the Docker application,
and sometimes you're without.

117
00:07:05.785 --> 00:07:09.639
And that's why I think it's the hardest
part to wrap around our own Dockerfiles.

118
00:07:09.639 --> 00:07:13.474
But in this case,
we are copying from our home directory.

119
00:07:13.474 --> 00:07:18.447
The last thing we need to do is, what's
the point of writing a web application

120
00:07:18.447 --> 00:07:20.831
if we don't expose a port to talk to?

121
00:07:20.831 --> 00:07:26.982
So we're gonna expose port 3000, so our
container can communicate through that.

122
00:07:26.982 --> 00:07:32.810
And the last thing we're gonna to do
is we're going to execute the command,

123
00:07:32.810 --> 00:07:38.290
we're going to run node, and
in this case, we're gonna run app.js.

124
00:07:38.290 --> 00:07:44.322
If you recall from the earlier exercises,
app.js is our simple server.

125
00:07:44.322 --> 00:07:47.770
Yeah, we can bring up the WebSocket
server, we can try copying that, but as we

126
00:07:47.770 --> 00:07:51.294
saw, there's a little bit of bumps there
and that might take time to dive into.

127
00:07:51.294 --> 00:07:55.681
But you're welcome to
run the index/ws.jsfile.

128
00:07:55.681 --> 00:07:57.659
You can cut Docker container out of that.

129
00:07:57.659 --> 00:08:00.845
But for now I'm gonna run my really
simple server cuz I know for a fact,

130
00:08:00.845 --> 00:08:02.577
it'll run every time with no issues.

131
00:08:06.630 --> 00:08:14.092
Then we write quit, and that's our
Dockerfile Everybody there so far?

132
00:08:17.827 --> 00:08:19.995
Yeah, okay, now it gets exciting.

133
00:08:19.995 --> 00:08:21.992
So do we have Docker installed?

134
00:08:21.992 --> 00:08:22.651
I don't know.

135
00:08:22.651 --> 00:08:23.179
Let's check.

136
00:08:23.179 --> 00:08:25.084
Let's run Docker.

137
00:08:25.084 --> 00:08:25.910
Not installed.

138
00:08:25.910 --> 00:08:28.457
Earlier I said you can use Snap or APT.

139
00:08:28.457 --> 00:08:32.171
I did this when I ran through
this previous times, I used Snap.

140
00:08:32.171 --> 00:08:33.220
It got a little funky.

141
00:08:33.220 --> 00:08:38.813
So we're gonna use APT
because we know how it works.

142
00:08:38.813 --> 00:08:43.430
So apt docker.io, oops, instil

143
00:09:14.515 --> 00:09:16.824
And let's see if docker is available.

144
00:09:19.378 --> 00:09:24.032
All right, so for those who missed it,

145
00:09:24.032 --> 00:09:27.708
we just apt installed Docker.

146
00:09:27.708 --> 00:09:29.962
So now let's try to build our Dockerfile.

147
00:09:29.962 --> 00:09:31.669
Again, let's hope nothing went wrong.

148
00:09:31.669 --> 00:09:35.009
I didn't make a typo somewhere in there,
which has been a common theme.

149
00:09:35.009 --> 00:09:36.699
But let's find out.

150
00:09:36.699 --> 00:09:40.038
So we're gonna say Docker build.

151
00:09:40.038 --> 00:09:42.114
It's gonna look for
our Dockerfile where it is.

152
00:09:42.114 --> 00:09:44.785
We're just gonna say -t to give it a name.

153
00:09:44.785 --> 00:09:49.968
We'll call it node full stack front end,
just for now.

154
00:09:49.968 --> 00:09:50.990
We don't have to give it a name.

155
00:09:50.990 --> 00:09:52.542
It just makes it a little bit easier.

156
00:09:52.542 --> 00:09:57.599
So docker build dash t
node full stack front end.

157
00:09:57.599 --> 00:09:59.091
Let's see if this works.

158
00:09:59.091 --> 00:10:01.675
I didn't tell it where to look.

159
00:10:01.675 --> 00:10:03.193
So let's try this again.

160
00:10:03.193 --> 00:10:06.738
Docker build -t, and the dots.

161
00:10:06.738 --> 00:10:10.867
The dot is saying look right where
we are in our current place.

162
00:10:10.867 --> 00:10:12.395
So we don't necessarily have to do that,

163
00:10:12.395 --> 00:10:15.570
we could read through it from another
directory, but this makes it easier.

164
00:10:15.570 --> 00:10:16.970
The dot's really easy to miss.

165
00:10:19.170 --> 00:10:20.685
Permission denied.

166
00:10:20.685 --> 00:10:22.246
Classic, classic.

167
00:10:22.246 --> 00:10:24.438
So, you shouldn't have to do this, but

168
00:10:24.438 --> 00:10:27.859
I'm gonna sudo it because that's
going to make sure it works.

169
00:10:27.859 --> 00:10:30.438
Sudo bang bang.

170
00:10:30.438 --> 00:10:35.570
It's probably cuz when Docker was
installed, it with sudo apt install.

171
00:10:35.570 --> 00:10:38.249
There's a way around that.

172
00:10:38.249 --> 00:10:39.329
There's a typo in there.

173
00:10:39.329 --> 00:10:43.389
Manifest for node alpine 3.6 not found.

174
00:10:43.389 --> 00:10:47.835
So let me go and open my Dockerfile again
to make sure I didn't type it wrong.

175
00:10:49.961 --> 00:10:51.054
From node Alpine 6,

176
00:10:51.054 --> 00:10:54.709
I'm just gonna look it up just to
double-check that I have the rights.

177
00:10:57.593 --> 00:11:01.589
So I'm gonna say node docker.

178
00:11:01.589 --> 00:11:10.553
Let's try to find the right
image 19 alpine, 3.6.

179
00:11:10.553 --> 00:11:12.783
Yeah, that should be the right one.

180
00:11:12.783 --> 00:11:15.134
And let's double-check, see what I wrote.

181
00:11:19.307 --> 00:11:21.689
From node alpine 3.6.

182
00:11:21.689 --> 00:11:23.496
Yeah, that should be correct.

183
00:11:23.496 --> 00:11:29.390
&gt;&gt; So this is one of the default
docker environments?

184
00:11:29.390 --> 00:11:32.023
&gt;&gt; Yeah, this is the official image for
node.js.

185
00:11:36.126 --> 00:11:40.092
Let's check this out from alpine 3.6.

186
00:11:40.092 --> 00:11:41.479
Yeah, we don't need that.

187
00:11:51.665 --> 00:11:54.237
So if you wanna look and
see what's happening,

188
00:11:54.237 --> 00:11:58.737
you know how we imported the image from
Docker, or at least we're still trying to,

189
00:11:58.737 --> 00:12:02.040
this is the Dockerfile for
that image where it runs through.

190
00:12:02.040 --> 00:12:03.994
It sets an environment.

191
00:12:03.994 --> 00:12:07.756
It sets the operating system, alpine 3.6.

192
00:12:07.756 --> 00:12:08.783
It creates that node user.

193
00:12:08.783 --> 00:12:12.664
Remember we said this Docker
container creates a node user.

194
00:12:12.664 --> 00:12:16.191
It runs through all these
commands we see here,

195
00:12:16.191 --> 00:12:20.169
it downloads the node.js
binary from nodejs.org.

196
00:12:20.169 --> 00:12:21.011
It goes through all these things.

197
00:12:21.011 --> 00:12:24.600
So it's Dockerfiles on top of
Dockerfiles on top of Dockerfiles.

198
00:12:24.600 --> 00:12:27.953
And that's awesome cuz we can
compose things really well.

199
00:12:27.953 --> 00:12:30.101
And then that way in
some future reference,

200
00:12:30.101 --> 00:12:34.178
if we wanna create a new application, we
just import our Dockerfile into that one.

201
00:12:34.178 --> 00:12:37.215
node: is it a dash here?

202
00:12:37.215 --> 00:12:43.653
&gt;&gt; Go back,
get rid of the dash after alpine.

203
00:12:43.653 --> 00:12:44.772
&gt;&gt; Just straight.

204
00:12:49.360 --> 00:12:51.376
Yep, it's a little things.

205
00:12:51.376 --> 00:12:52.385
It's a little things.

206
00:12:52.385 --> 00:12:54.393
I'm glad you all are here.

207
00:12:54.393 --> 00:12:58.557
&gt;&gt; Do you need to chown those
when you're copying them over?

208
00:12:58.557 --> 00:12:59.553
&gt;&gt; I don't think so.

209
00:12:59.553 --> 00:13:03.149
But you might be right.

210
00:13:03.149 --> 00:13:04.852
Good call.

211
00:13:04.852 --> 00:13:05.706
Doesn't hurt

212
00:13:16.538 --> 00:13:18.954
node:node.

213
00:13:21.810 --> 00:13:23.651
Okay, let's try that one.

214
00:13:39.140 --> 00:13:41.910
Yeah, good call.

215
00:13:41.910 --> 00:13:43.200
Good call.

216
00:13:43.200 --> 00:13:44.332
So we forgot to change owner.

217
00:13:44.332 --> 00:13:45.413
And we're getting a permission error.

218
00:13:45.413 --> 00:13:47.759
We've got to change
the owner to node again,

219
00:13:47.759 --> 00:13:51.930
because it copied over the packages,
but it still had me as the owner.

220
00:13:51.930 --> 00:13:55.229
And I don't exist in this operating
system, so that's why it failed.

221
00:13:59.654 --> 00:14:02.407
All right, so let's say docker image.

222
00:14:02.407 --> 00:14:08.957
Is that the one that'll Tell
me all my docker is, I think?

223
00:14:13.821 --> 00:14:14.937
Docker image ls.

224
00:14:14.937 --> 00:14:18.689
Docker image ls.

225
00:14:26.390 --> 00:14:30.227
So I just ran sudo docker image ls.

226
00:14:30.227 --> 00:14:32.856
In a better world,
we would not have to sudo.

227
00:14:32.856 --> 00:14:38.875
But cuz I installed it with sudo, after
now we're on sudo, I think it's okay.

228
00:14:38.875 --> 00:14:42.499
So now,
we can see that image we created here.

229
00:14:42.499 --> 00:14:45.781
And because we gave it a name,
again, you don't have to, but

230
00:14:45.781 --> 00:14:47.625
it just makes it easier to look at.

231
00:14:47.625 --> 00:14:52.277
And it also created that node
Alpine image that we pulled in.

232
00:14:52.277 --> 00:14:55.170
And the none, I'm not sure what this
is because there's no name on it.

233
00:14:55.170 --> 00:14:58.529
So it could have just been like a bad
run from earlier, I don't know.

234
00:15:01.881 --> 00:15:05.006
So, next, let's try to run this thing, and

235
00:15:05.006 --> 00:15:08.395
see if we made a mistake
somewhere along the way.

236
00:15:08.395 --> 00:15:10.892
By we, I mean probably me at some point.

237
00:15:10.892 --> 00:15:19.632
So, we can run it with
Docker What is the exact command?

238
00:15:19.632 --> 00:15:21.971
I might need to look this up again.

239
00:15:21.971 --> 00:15:24.363
Yes, docker run.

240
00:15:24.363 --> 00:15:30.613
And sudo, it's just same,
say docker run, we're gonna say -d.

241
00:15:30.613 --> 00:15:33.815
-d will run in the background,
that way it'll run, and

242
00:15:33.815 --> 00:15:35.563
then it'll close itself out.

243
00:15:35.563 --> 00:15:36.835
Otherwise, it'll stay open,

244
00:15:36.835 --> 00:15:39.530
then we have to open another terminal
to do anything on that server.

245
00:15:41.130 --> 00:15:45.080
And then we have to do the -p,
which is probably the most important one.

246
00:15:45.080 --> 00:15:47.300
So -p specifies the open ports.

247
00:15:47.300 --> 00:15:50.131
So we expose 3000, which is fine, but

248
00:15:50.131 --> 00:15:55.495
we need to tell it which port to expose
on our server itself, our current server.

249
00:15:55.495 --> 00:16:01.270
So the format is outside port,
our current server

250
00:16:01.270 --> 00:16:06.642
then the inside port,
our containers ports.

251
00:16:06.642 --> 00:16:09.734
And we're just gonna say 3000:3000,
pretty straightforward.

252
00:16:09.734 --> 00:16:12.438
And our image name,
we can also use image ID.

253
00:16:12.438 --> 00:16:18.419
We'll just use image name,
full stack front end.

254
00:16:18.419 --> 00:16:22.904
And there's already something
running on port 3000, so

255
00:16:22.904 --> 00:16:26.450
we need to pm2 stop our old server,
index-ws.

256
00:16:28.640 --> 00:16:29.140
There we go.

257
00:16:30.540 --> 00:16:33.071
And let's go ahead and
try to run this Docker container again.

258
00:16:37.259 --> 00:16:40.814
All right, but let's see if it works.

259
00:16:45.636 --> 00:16:48.518
Yeah, and
we're back to our simple server again.

260
00:16:48.518 --> 00:16:50.730
But pretty cool.

261
00:16:50.730 --> 00:16:53.130
So now we just containerized
our application.

262
00:16:53.130 --> 00:16:57.240
Great, that seemed like a lot more work,
Jem, to do the thing we already did.

263
00:16:57.240 --> 00:16:59.020
Okay, you're right.

264
00:16:59.020 --> 00:17:01.236
Let's try this.

265
00:17:01.236 --> 00:17:05.588
What if we create another Docker
container or another docker instance, but

266
00:17:05.588 --> 00:17:07.222
we give it different ports?

267
00:17:10.904 --> 00:17:17.868
So now we can say docker ps,
oops, always sudo.

268
00:17:17.868 --> 00:17:20.334
So now, we have two docker containers.

269
00:17:20.334 --> 00:17:24.214
One is running on port 3000,
one is running on port 3001.

270
00:17:24.214 --> 00:17:28.185
I can create ten more as long as
they're running on different ports,

271
00:17:28.185 --> 00:17:32.442
we now have ten different instances
of our application on our one server.

272
00:17:34.796 --> 00:17:36.698
Okay, so what now?

273
00:17:36.698 --> 00:17:39.200
How do we tell nginx to route it to that?

274
00:17:39.200 --> 00:17:42.316
Well, first, let me talk
a little bit about orchestration.

275
00:17:42.316 --> 00:17:45.713
How you generally do these things then
we'll round off with how do we get nginx

276
00:17:45.713 --> 00:17:48.131
to actually connect to each
of our Docker containers?

277
00:17:48.131 --> 00:17:50.647
So, it's connecting to
our default one on 3000,

278
00:17:50.647 --> 00:17:53.999
how do we get it to balance out the
connection to all of our other servers?

