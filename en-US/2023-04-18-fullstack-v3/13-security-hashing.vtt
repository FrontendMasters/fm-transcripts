WEBVTT

1
00:00:00.076 --> 00:00:03.595
So when it comes to creating a server,
or an application, or

2
00:00:03.595 --> 00:00:06.500
anything really,
you have to have a way of login.

3
00:00:06.500 --> 00:00:09.770
Generally, most people use username and
password, that's pretty well established.

4
00:00:09.770 --> 00:00:13.834
Pretty low friction,
we're all pretty used to it.

5
00:00:13.834 --> 00:00:16.654
But what's the problem with
using a username and password?

6
00:00:19.842 --> 00:00:21.301
Anybody, throw out.

7
00:00:21.301 --> 00:00:23.869
&gt;&gt; Someone else has the credentials,
they can get in.

8
00:00:23.869 --> 00:00:28.417
&gt;&gt; Yeah, someone can steal your
credentials very easily, what else?

9
00:00:28.417 --> 00:00:32.574
&gt;&gt; Someone could guess them or
steal them, change them on you.

10
00:00:32.574 --> 00:00:33.074
&gt;&gt; Yeah.

11
00:00:35.255 --> 00:00:36.013
What else?

12
00:00:38.218 --> 00:00:40.618
&gt;&gt; It can be sniffed over the wire?

13
00:00:40.618 --> 00:00:43.124
&gt;&gt; They can be sniffed, yeah.

14
00:00:43.124 --> 00:00:49.082
Yeah, also, you can lose them pretty
easily, you can forget your password.

15
00:00:49.082 --> 00:00:54.459
And humans tend to do this, so we all tend
to fall back to the same set of patterns.

16
00:00:54.459 --> 00:00:57.479
So we're talking about computer science
here in software engineering, but

17
00:00:57.479 --> 00:00:59.295
really we're talking about human behavior.

18
00:00:59.295 --> 00:01:02.314
In human behavior,
we're very predictable creatures.

19
00:01:02.314 --> 00:01:08.694
In fact, These passwords here to

20
00:01:08.694 --> 00:01:14.366
the left are the most commonly
used passwords on the Internet.

21
00:01:14.366 --> 00:01:18.074
Password is still the most commonly
used password, it's incredible.

22
00:01:18.074 --> 00:01:20.804
We all know, we all hear about hacks,
we all hear about losing credentials,

23
00:01:20.804 --> 00:01:21.476
things like that.

24
00:01:21.476 --> 00:01:26.127
Yet, humans are such that we are so
against changing our own

25
00:01:26.127 --> 00:01:30.789
behavior that we do things that
are counter to our benefit.

26
00:01:30.789 --> 00:01:32.845
It's really incredible honestly.

27
00:01:32.845 --> 00:01:37.086
So, yes, there's a question.

28
00:01:37.086 --> 00:01:41.151
&gt;&gt; A couple of people online said
they can easily be forgotten, and

29
00:01:41.151 --> 00:01:45.154
then one person said you can't
use them with the command line.

30
00:01:47.478 --> 00:01:51.155
&gt;&gt; Yeah,
you can use them with the command line.

31
00:01:51.155 --> 00:01:53.261
You wouldn't want to, there's better
ways if you're already on command line.

32
00:01:53.261 --> 00:01:57.229
There's better ways to do it,
but that's good thinking.

33
00:01:57.229 --> 00:02:00.040
So username and password,
probably not the best idea

34
00:02:00.040 --> 00:02:03.613
to secure our future billion dollar
application on DigitalOcean.

35
00:02:03.613 --> 00:02:05.780
So we can use biometric login.

36
00:02:05.780 --> 00:02:08.684
The problem with biometric login,
it's not super portable,

37
00:02:08.684 --> 00:02:10.010
not all devices support it.

38
00:02:10.010 --> 00:02:12.167
Actually, I'd say most
devices don't support it.

39
00:02:12.167 --> 00:02:14.548
You have to enact its own standards.

40
00:02:14.548 --> 00:02:18.314
It's pretty much not standard right now,
that is changing slowly.

41
00:02:18.314 --> 00:02:22.163
I would say in ten years, we will see
a lot more biometric authentication,

42
00:02:22.163 --> 00:02:23.946
cuz it actually just makes sense.

43
00:02:23.946 --> 00:02:27.268
A lot simpler using your thumb, or
your face, or something like that, but

44
00:02:27.268 --> 00:02:28.286
we're not there yet.

45
00:02:28.286 --> 00:02:32.559
So what we're gonna use is,
we're gonna use an ssh key.

46
00:02:32.559 --> 00:02:37.836
SSH is one of the more powerful concepts
when it comes to server authentication,

47
00:02:37.836 --> 00:02:39.784
probably the most powerful.

48
00:02:39.784 --> 00:02:44.519
And the fact that I won't say
you can't go wrong with SSH key,

49
00:02:44.519 --> 00:02:47.538
but it's really hard to do things bad.

50
00:02:47.538 --> 00:02:51.434
And no one's ever gonna
guess your SSH key ever.

51
00:02:51.434 --> 00:02:53.302
I won't say ever,
quantum computing, who knows?

52
00:02:53.302 --> 00:02:55.644
But we'll say, in our lifetimes,

53
00:02:55.644 --> 00:03:00.953
it is unlikely your SSH key will ever
get guessed, unlike your password123,

54
00:03:00.953 --> 00:03:05.329
which I've probably already
guessed your password.

55
00:03:05.329 --> 00:03:09.073
And we talked about why
we don't use passwords,

56
00:03:09.073 --> 00:03:12.096
even a long one is pretty easy to crack.

57
00:03:12.096 --> 00:03:15.229
So even one made of symbols and
characters,

58
00:03:15.229 --> 00:03:20.913
it's about two years on a basic desktop
computer, so something I have at home.

59
00:03:20.913 --> 00:03:25.389
Now if I had dedicated hardware running an
entire server dedicated getting into your

60
00:03:25.389 --> 00:03:27.921
password, I could do it
in a couple of seconds.

61
00:03:27.921 --> 00:03:33.137
What this table doesn't show you is that
people, again, are really predictable.

62
00:03:33.137 --> 00:03:37.545
We don't use the underscore,
ampersand, P capital thing,

63
00:03:37.545 --> 00:03:40.360
capital Y, and it's like gibberish.

64
00:03:40.360 --> 00:03:42.737
We use things that
are recognizable to ourselves.

65
00:03:42.737 --> 00:03:45.967
So we might use password, but
we'll use an @ instead of the A.

66
00:03:45.967 --> 00:03:49.140
Again, I probably just guessed some
of your passwords right there, and

67
00:03:49.140 --> 00:03:50.449
we think we're being smart.

68
00:03:50.449 --> 00:03:56.094
But the problem is, the people of
the world, I won't say bad people.

69
00:03:56.094 --> 00:03:57.187
I hate saying bad and good.

70
00:03:57.187 --> 00:04:01.039
But the people in the world that
are dedicated to getting your password

71
00:04:01.039 --> 00:04:01.699
know this.

72
00:04:01.699 --> 00:04:04.087
And they know all the possible
combinations of password.

73
00:04:04.087 --> 00:04:07.186
They know it's password123,
capital P, all that.

74
00:04:07.186 --> 00:04:12.044
So there's not a lot of entropy
in the passwords we actually use.

75
00:04:12.044 --> 00:04:15.707
The real way to make a password
is completely computer-generated.

76
00:04:15.707 --> 00:04:21.176
And what a random one looks like is,
let's generate

77
00:04:21.176 --> 00:04:26.781
a new password here, and
I'm gonna say symbols too.

78
00:04:26.781 --> 00:04:29.570
So I'm using something called 1Password,
a password manager,

79
00:04:29.570 --> 00:04:30.730
which I highly recommend.

80
00:04:30.730 --> 00:04:33.954
If you don't use a password manager,
use a password manager today.

81
00:04:33.954 --> 00:04:36.491
Don't use LastPass,
their security is very questionable.

82
00:04:36.491 --> 00:04:40.208
Use 1Password or KeePass,
whatever you want.

83
00:04:40.208 --> 00:04:43.114
Don't use LastPass, professional tip.

84
00:04:43.114 --> 00:04:46.550
If I'm using 1Password,
I use it generate all my passwords.

85
00:04:46.550 --> 00:04:48.162
I don't know the password
to any of my logins.

86
00:04:48.162 --> 00:04:52.600
I know one password that goes
to 1Password, hence, the name.

87
00:04:52.600 --> 00:04:55.072
But this is the way you should do it,
because I am not reliable.

88
00:04:55.072 --> 00:04:55.873
I don't trust myself.

89
00:04:55.873 --> 00:04:57.980
I know that if you ask
me to make a password,

90
00:04:57.980 --> 00:05:01.860
I will make same version of passwords
even if I don't think I'm being random.

91
00:05:01.860 --> 00:05:04.620
If I think I'm being random,
I'm being very predictable.

92
00:05:04.620 --> 00:05:08.766
So this is what a real
random password looks like.

93
00:05:08.766 --> 00:05:13.415
But that'd be a pain to type in, and
you're like, is that a T, is that an I,

94
00:05:13.415 --> 00:05:14.236
is that an L?

95
00:05:14.236 --> 00:05:18.487
So we use SSH keys for
logging into our server,

96
00:05:18.487 --> 00:05:22.738
because we want it to be
as secure as possible.

97
00:05:22.738 --> 00:05:25.482
More secure than your bank,
more secure than your phone,

98
00:05:25.482 --> 00:05:26.836
more secure than anything.

99
00:05:26.836 --> 00:05:29.701
Because if someone gets
a hold of your server,

100
00:05:29.701 --> 00:05:31.981
they can do anything they want to it.

101
00:05:31.981 --> 00:05:36.888
They can mine Bitcoin, they can use it to
launch DDoS attacks against other people.

102
00:05:36.888 --> 00:05:38.872
They can use it to serve illegal content.

103
00:05:38.872 --> 00:05:41.383
They can do all sorts of
bad things on your server.

104
00:05:41.383 --> 00:05:45.057
And when the FBI comes,
it's on you, cuz it's your server.

105
00:05:45.057 --> 00:05:48.165
Hence, we don't use username and
passwords for servers.

106
00:05:50.150 --> 00:05:53.994
And we talked about kind of
the predictable passwords.

107
00:05:53.994 --> 00:05:57.043
There's something in security
called a dictionary attack.

108
00:05:57.043 --> 00:06:02.550
In dictionary attack,
it takes all of your randomness.

109
00:06:02.550 --> 00:06:05.608
Like this one with the password,
instead of a, you add a 12,

110
00:06:05.608 --> 00:06:09.040
that's in the dictionary somewhere,
that's really easy to guess.

111
00:06:09.040 --> 00:06:13.078
And computers can generate every single
possible combination of the word password.

112
00:06:13.078 --> 00:06:15.949
So you think you're being secure and
random, but you're not.

113
00:06:15.949 --> 00:06:21.110
A real randomness looks like that,
which doesn't look anything like password.

114
00:06:21.110 --> 00:06:23.697
But again, humans are gonna do this,
you're not gonna remember this.

115
00:06:23.697 --> 00:06:28.188
So whenever you think you're being
clever and you have like, my password is

116
00:06:28.188 --> 00:06:32.959
onomatopoeia564, that's super easy to
guess, that's all in the dictionary.

117
00:06:32.959 --> 00:06:36.179
The dictionary takes a couple of kilobytes
to load the entire English language.

118
00:06:36.179 --> 00:06:38.371
And it takes milliseconds for

119
00:06:38.371 --> 00:06:42.849
a computer to run through all
those possible combinations.

120
00:06:42.849 --> 00:06:45.828
Again, I'd say I'm not trying to scare
you, but I am trying to scare you.

121
00:06:45.828 --> 00:06:48.106
You should not rely on passwords for
most things you want.

122
00:06:48.106 --> 00:06:51.721
If you do, they should be very long and
very random generated by a computer.

123
00:06:58.055 --> 00:07:02.681
But at the core, really,
when we talk about SSH keys,

124
00:07:02.681 --> 00:07:06.718
we're talking about this
concept of hashing.

125
00:07:06.718 --> 00:07:08.364
Does anybody know what hashing is?

126
00:07:08.364 --> 00:07:11.617
And not hash browns like
you have at Waffle House.

127
00:07:11.617 --> 00:07:13.150
What's a hash?

128
00:07:15.621 --> 00:07:17.094
&gt;&gt; Like a one-way algorithm.

129
00:07:19.484 --> 00:07:22.395
&gt;&gt; It can be one-way,
it can be two-way too.

130
00:07:22.395 --> 00:07:26.111
Yeah, anybody else, Mark?

131
00:07:26.111 --> 00:07:29.133
&gt;&gt; Encryption method.

132
00:07:29.133 --> 00:07:33.449
&gt;&gt; It can be an encryption method,
it can also not be an encryption method.

133
00:07:33.449 --> 00:07:37.639
We do use it for encryption, but that's
not all it's used for, that's a good-

134
00:07:37.639 --> 00:07:38.249
&gt;&gt; Verify or

135
00:07:38.249 --> 00:07:43.977
validate, The information in the file for
instance.

136
00:07:43.977 --> 00:07:45.217
&gt;&gt; That's a great use case.

137
00:07:45.217 --> 00:07:49.010
Yeah, verifying and
validating the file is actually intact.

138
00:07:49.010 --> 00:07:53.080
Yeah, so hashing is an amazing
way of storing a larger

139
00:07:53.080 --> 00:07:57.250
amount of information in
a small bunch of characters.

140
00:07:57.250 --> 00:07:59.444
So what we're doing is
we're taking some data,

141
00:07:59.444 --> 00:08:01.272
which is just a string of bits and bytes.

142
00:08:01.272 --> 00:08:05.611
We're running it through a mathematical
function called a hash function.

143
00:08:05.611 --> 00:08:08.067
And what's outputed is,
it's called a hash.

144
00:08:08.067 --> 00:08:10.172
And there's different
kinds of hashing function.

145
00:08:10.172 --> 00:08:14.187
So if you want a simple definition of
hashing, you take some sort of input,

146
00:08:14.187 --> 00:08:18.393
you run it through some math, and you
get output of numbers, and letters, and

147
00:08:18.393 --> 00:08:19.186
characters.

148
00:08:19.186 --> 00:08:21.343
That's probably the easiest
way of putting it.

149
00:08:21.343 --> 00:08:26.834
And there's different types of hash for
different ends.

150
00:08:26.834 --> 00:08:31.023
So the first hash that probably most
people may have heard of, or maybe not,

151
00:08:31.023 --> 00:08:33.909
I don't know, I'm kind of a nerd,
is called MD5.

152
00:08:33.909 --> 00:08:37.213
MD5 used to be what we used
as a cryptographic hash.

153
00:08:37.213 --> 00:08:41.373
So we take your password, and
we say, here's your password,

154
00:08:41.373 --> 00:08:46.566
we're gonna run it through MD5, and
then now it's a hash of random numbers.

155
00:08:46.566 --> 00:08:51.008
The problem with that, and we learned
this very odd in the early days of

156
00:08:51.008 --> 00:08:55.397
the Internet, is MD5 is very predictable,
it's not long enough.

157
00:08:55.397 --> 00:08:59.080
So you can take your hash and
its password, and

158
00:08:59.080 --> 00:09:03.906
we run it through MD5, and
we're going to get this number.

159
00:09:03.906 --> 00:09:05.166
Actually, let me just show you.

160
00:09:05.166 --> 00:09:06.051
Why am I talking?

161
00:09:06.051 --> 00:09:08.229
I'll show you this is all built
into your operating system.

162
00:09:08.229 --> 00:09:12.358
This is what's great about Unix or
Linux-based systems.

163
00:09:12.358 --> 00:09:13.810
So I'm gonna say clear.

164
00:09:15.746 --> 00:09:17.105
Oops, may kill my server.

165
00:09:17.105 --> 00:09:20.063
First, Ctrl+C, if I got it still running.

166
00:09:20.063 --> 00:09:23.286
Say, clear, we can say temp, it's fine.

167
00:09:23.286 --> 00:09:29.047
So I want to hash my password,
but how do I do that?

168
00:09:29.047 --> 00:09:31.519
I need to write it to a file first.

169
00:09:31.519 --> 00:09:35.338
So I can write a file, or
I can be really lazy and shortcut.

170
00:09:35.338 --> 00:09:40.559
So I'm gonna say echo password,
and I'm gonna use double arrow.

171
00:09:40.559 --> 00:09:46.878
And we'll talk a bit more about
redirection later in the course.

172
00:09:46.878 --> 00:09:49.651
But double arrow essentially
means append to a file, and

173
00:09:49.651 --> 00:09:51.341
I'm just gonna call the file foo.

174
00:09:55.642 --> 00:10:00.539
[LAUGH] I forgot when I was playing
around, I made a directory called foo.

175
00:10:00.539 --> 00:10:05.881
Okay, you probably won't run into that,
all right, so there we go.

176
00:10:06.895 --> 00:10:11.799
There's foo, we can cat foo,
we see password's in there.

177
00:10:11.799 --> 00:10:14.864
So we're gonna use
a program called OpenSSL.

178
00:10:14.864 --> 00:10:18.841
And remember, if you don't trust me,
which you shouldn't, cuz I've got a very,

179
00:10:18.841 --> 00:10:22.383
very sketchy face, you can always man
the commands that I'm telling you.

180
00:10:22.383 --> 00:10:26.725
So again, I want you to know
these things and why they exist,

181
00:10:26.725 --> 00:10:28.866
not just following me along.

182
00:10:28.866 --> 00:10:33.376
So OpenSSL is a cryptography
toolkit implementing the TLS

183
00:10:33.376 --> 00:10:37.706
security layer that follows
cryptography standards.

184
00:10:37.706 --> 00:10:41.536
So what we're gonna use that for
today is, it has all these hashes.

185
00:10:41.536 --> 00:10:46.036
It has MD5, it has SHA-1,
it has SHA-256 in there.

186
00:10:46.036 --> 00:10:49.725
So let's play around with this
a little bit, we'll have a little fun.

187
00:10:49.725 --> 00:10:53.143
Again, I'm a nerd, so my idea of fun
is maybe a little different from yours.

188
00:10:53.143 --> 00:10:57.177
So we want to hash our foo file
with the word password in it.

189
00:10:57.177 --> 00:11:03.711
So we're gonna say openssl, and
the hash we're gonna use is md5.

190
00:11:03.711 --> 00:11:07.590
And then,
the file we're gonna use is called foo.

191
00:11:07.590 --> 00:11:12.471
And we're gonna pipe this to
something called awk, A-W-K.

192
00:11:12.471 --> 00:11:15.880
And again, don't take my word for
it, let's man awk.

193
00:11:19.521 --> 00:11:23.408
Awk is a program built in, I'll just
read it, pattern-directed scanning and

194
00:11:23.408 --> 00:11:24.574
processing language.

195
00:11:24.574 --> 00:11:26.389
Essentially, you can take an output,

196
00:11:26.389 --> 00:11:28.924
you can parse it to make it
look like some other output.

197
00:11:28.924 --> 00:11:32.940
So output in Linux using standard
out is usually column-based.

198
00:11:32.940 --> 00:11:37.596
So we can use awk to pick those
columns of data, and then output that.

199
00:11:37.596 --> 00:11:39.460
So we can do a lot of things on the fly.

200
00:11:39.460 --> 00:11:42.970
When you see people who are really
good at Unix in the command line,

201
00:11:42.970 --> 00:11:46.367
they'll be awk, sed, grep,
they'll do all these commands.

202
00:11:46.367 --> 00:11:47.534
And you're like, what did they do?

203
00:11:47.534 --> 00:11:49.671
It's magic.
They somehow took this giant log file and

204
00:11:49.671 --> 00:11:51.722
outputed just the things they care about.

205
00:11:51.722 --> 00:11:54.610
And again, that's the power of
really good at these tools.

206
00:11:54.610 --> 00:11:59.575
But anyways,
we won't go too deep into that, oops.

207
00:12:03.592 --> 00:12:06.706
Jump back to where I was, clear.

208
00:12:06.706 --> 00:12:14.100
So we were on openssl, and
we chose MD5, we chose foo as the file.

209
00:12:14.100 --> 00:12:16.766
And we're gonna pipe,
that bar is called the pipe.

210
00:12:16.766 --> 00:12:19.861
So we're just taking all the output
from OpenSSL in this command, and

211
00:12:19.861 --> 00:12:21.806
we're gonna pipe it into the next command.

212
00:12:21.806 --> 00:12:25.180
So it's awk, we're gonna take the file.

213
00:12:25.180 --> 00:12:29.115
And we're gonna say,
this one I'm using my notes,

214
00:12:29.115 --> 00:12:32.258
this is not a natural
thing I do every day.

215
00:12:32.258 --> 00:12:35.385
So we're gonna use awk,
and we're gonna say, and

216
00:12:35.385 --> 00:12:38.020
I know the syntax is
a little strange here.

217
00:12:38.020 --> 00:12:40.067
So we're gonna say we're gonna print, and

218
00:12:40.067 --> 00:12:42.348
we want the second column
from the output there.

219
00:12:42.348 --> 00:12:48.301
So we're gonna say number $2, and
then we're gonna close that off.

220
00:12:48.301 --> 00:12:50.031
Oops, I put in too many here.

221
00:12:55.660 --> 00:12:59.880
And let's see what this says,
awk: no program given.

222
00:12:59.880 --> 00:13:03.093
Doing something wrong here,
no program given.

223
00:13:03.093 --> 00:13:06.840
So let's just try looking at the output
first just to make sure we're

224
00:13:06.840 --> 00:13:07.883
getting that far.

225
00:13:07.883 --> 00:13:12.687
Okay, md5 foo, so
what we want is the second output here.

226
00:13:12.687 --> 00:13:17.059
Actually, we actually won't need it,
I will figure this out later.

227
00:13:17.059 --> 00:13:21.329
So we're running that foo with the word
password in it through MD5, and

228
00:13:21.329 --> 00:13:23.156
this is the output that we get.

229
00:13:25.157 --> 00:13:28.133
But you know what the problem here is.

230
00:13:28.133 --> 00:13:31.537
This output, this hash,
it looks kind of random, but

231
00:13:31.537 --> 00:13:33.619
are we all getting the same hash?

232
00:13:33.619 --> 00:13:36.496
Are we all getting this number?

233
00:13:36.496 --> 00:13:39.674
Yeah, so maybe MD5 isn't the best hash.

234
00:13:39.674 --> 00:13:43.028
Because I can run through all
the common passwords, and

235
00:13:43.028 --> 00:13:47.462
I can MD5 hash them, and then I have
now what's known as a rainbow table.

236
00:13:47.462 --> 00:13:51.432
A rainbow table is the output of hash
files that map to a specific word or

237
00:13:51.432 --> 00:13:53.671
phrase that's really commonly used.

238
00:13:53.671 --> 00:13:56.496
Again, computers can do this really,
really easily.

239
00:13:56.496 --> 00:14:01.116
So there are rainbow tables for probably
every word in the English language, MD5,

240
00:14:01.116 --> 00:14:04.056
every password combination,
it's already there.

241
00:14:04.056 --> 00:14:07.450
So we don't use MD5 anymore,
it's very easily breakable.

242
00:14:07.450 --> 00:14:11.391
Again, we always arrive at the same
results, so not very good.

