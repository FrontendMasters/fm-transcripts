WEBVTT

1
00:00:00.261 --> 00:00:05.562
Containers, the foundation
of modern web applications.

2
00:00:05.562 --> 00:00:09.828
So, we talked about containers, they fit
in the same bucket as microservices.

3
00:00:09.828 --> 00:00:12.433
If we talk about microservices and
container.

4
00:00:12.433 --> 00:00:15.761
If you talk about how we orchestrate,
all these containers together,

5
00:00:15.761 --> 00:00:19.534
then how do we balance out the connections
going to all these different servers we

6
00:00:19.534 --> 00:00:21.660
just created, and
how do we deploy all that?

7
00:00:21.660 --> 00:00:24.349
Again, this is its own complex field.

8
00:00:24.349 --> 00:00:26.078
We're gonna cover it in a few minutes.

9
00:00:26.078 --> 00:00:29.408
So, we're gonna be just
enough to be dangerous.

10
00:00:29.408 --> 00:00:32.856
Most of you have probably heard
of the microservice architecture.

11
00:00:32.856 --> 00:00:37.415
It's a software architecture
of loosely connected services.

12
00:00:37.415 --> 00:00:41.931
The opposite of the microservice
architecture is the monolith,

13
00:00:41.931 --> 00:00:46.527
that's just one giant PHP file or
one giant PHP repo, or Python and

14
00:00:46.527 --> 00:00:48.841
Django is usually a popular one.

15
00:00:48.841 --> 00:00:52.822
You can do everything in Django or
you can have a mix of both.

16
00:00:52.822 --> 00:00:58.151
You can have a monolithic connects to a
bunch of microservices, things like that.

17
00:00:58.151 --> 00:01:02.111
The picture on the left is an old
demo of someone made a Netflix or

18
00:01:02.111 --> 00:01:05.800
in a hack day showing all of
our microservices connected.

19
00:01:05.800 --> 00:01:07.436
This is many years out of date.

20
00:01:07.436 --> 00:01:11.406
So you see the complexity of
way over here is the internet,

21
00:01:11.406 --> 00:01:15.384
about here is where my team owns,
which is netflix.com.

22
00:01:15.384 --> 00:01:16.668
And it's really small.

23
00:01:16.668 --> 00:01:19.794
The names don't mean anything.

24
00:01:19.794 --> 00:01:21.391
They're just gibberish.

25
00:01:21.391 --> 00:01:23.598
But that's just the surface level.

26
00:01:23.598 --> 00:01:26.823
As you are engineers,
we usually stay about here,

27
00:01:26.823 --> 00:01:31.698
when in reality we're learning through
this course that there's a whole lot

28
00:01:31.698 --> 00:01:34.248
behind the things we do that we count on.

29
00:01:34.248 --> 00:01:37.180
The pros and
cons of microservices versus monolith.

30
00:01:37.180 --> 00:01:38.755
Monolith, it's easy to work in.

31
00:01:38.755 --> 00:01:40.428
It's one language generally.

32
00:01:40.428 --> 00:01:43.389
Everybody if you're
working on the same repo,

33
00:01:43.389 --> 00:01:45.839
you know what everybody else is doing.

34
00:01:45.839 --> 00:01:48.155
There's not gonna be any
large conflict generally,

35
00:01:48.155 --> 00:01:50.996
because you're all working in
the same file system, same repo.

36
00:01:50.996 --> 00:01:55.907
The pros of microservices are I can
write a React application, you can write

37
00:01:55.907 --> 00:02:00.602
Angular applications, one can write
an application in Java or Groovy.

38
00:02:00.602 --> 00:02:03.283
If we don't have to talk
to each other at all,

39
00:02:03.283 --> 00:02:06.187
we can write applications
in our own specialty.

40
00:02:06.187 --> 00:02:08.969
The downside of microservices
is coordination.

41
00:02:08.969 --> 00:02:13.052
If everybody's writing their own services
in their own languages, with their own

42
00:02:13.052 --> 00:02:16.780
idea about what the API should look like,
how do we get each other to talk to or

43
00:02:16.780 --> 00:02:19.368
how do we talk to each other
in a way that makes sense?

44
00:02:19.368 --> 00:02:23.572
So, there's a trade off, it's that,
like we said, Netflix freedom and

45
00:02:23.572 --> 00:02:26.796
responsibility, the same applies for
microservices.

46
00:02:26.796 --> 00:02:29.005
You have the freedom, but
you're responsible for

47
00:02:29.005 --> 00:02:30.657
connecting to your partners as well.

48
00:02:30.657 --> 00:02:33.054
So, I won't say which one is better or
the other.

49
00:02:33.054 --> 00:02:34.706
We see microservices becoming more and

50
00:02:34.706 --> 00:02:37.064
more popular because they're
easier to reason about.

51
00:02:37.064 --> 00:02:39.692
We can have people at
different levels of expertise.

52
00:02:39.692 --> 00:02:44.229
However, you do have to
manage microservices, so

53
00:02:44.229 --> 00:02:46.977
there's no one size fits all.

54
00:02:46.977 --> 00:02:51.271
The way we are able to create
microservices is we use something called

55
00:02:51.271 --> 00:02:52.610
containerization.

56
00:02:52.610 --> 00:02:57.588
Similar to the concept of virtualization,
but virtualization is slicing up a server

57
00:02:57.588 --> 00:03:00.992
specifically into these chunks,
these distinct parts.

58
00:03:00.992 --> 00:03:06.267
Just like we bought our own VPS,
Virtual Private Server.

59
00:03:06.267 --> 00:03:10.500
Hence, virtualization container goes
a little bit farther and it says, hey,

60
00:03:10.500 --> 00:03:11.964
what if you have a service?

61
00:03:11.964 --> 00:03:16.131
And we're just like,
this is just like our service here,

62
00:03:16.131 --> 00:03:18.949
except we're only using a slice of it.

63
00:03:18.949 --> 00:03:24.730
And we're using NodeJS, MySQL,
Nginx or without using MySQL, SQLite.

64
00:03:24.730 --> 00:03:26.528
But this is all one server.

65
00:03:26.528 --> 00:03:31.203
But what if instead of that,
what if we just broke it up into each of

66
00:03:31.203 --> 00:03:35.041
these has its own microservice,
its own container.

67
00:03:35.041 --> 00:03:39.549
So now, instead of our server just
running, NodeJS and Nginx in one block,

68
00:03:39.549 --> 00:03:43.282
it would just run a container
that has NodeJS application, and

69
00:03:43.282 --> 00:03:46.044
Nginx is an entirely
different application.

70
00:03:46.044 --> 00:03:49.390
That allows us to say update
different things at different times,

71
00:03:49.390 --> 00:03:53.156
allows different people to work on
different things without interrupting

72
00:03:53.156 --> 00:03:54.122
the whole system.

73
00:03:54.122 --> 00:03:57.327
Just like every time we update
our Nginx configuration,

74
00:03:57.327 --> 00:04:01.544
we had to restart this system which takes
us down for a few seconds at a time.

75
00:04:01.544 --> 00:04:05.599
What if we can get around that by
having a container with Nginx running?

76
00:04:05.599 --> 00:04:07.766
We update half the containers,
the other half stay up and running.

77
00:04:07.766 --> 00:04:12.629
Then when they're all updated, we just
switch traffic over really quickly.

78
00:04:12.629 --> 00:04:14.870
And that way there's zero downtime.

79
00:04:14.870 --> 00:04:18.096
And these are kind of newer,
newish concepts in the world of

80
00:04:18.096 --> 00:04:22.949
software engineering, like zero downtime
and containerizations, things like that.

81
00:04:22.949 --> 00:04:27.626
And really, containers are the core
besides virtualization of cloud computing,

82
00:04:27.626 --> 00:04:31.562
because now I can buy these VPSs,
I can buy these chunks of a server that

83
00:04:31.562 --> 00:04:34.267
are running chunks of
an application at a time.

84
00:04:34.267 --> 00:04:36.714
And allows to scale out really,
really well.

85
00:04:36.714 --> 00:04:41.574
And for a lot of people, it's hard to kind
of wrap your head around this like why we

86
00:04:41.574 --> 00:04:46.368
need containers and virtualization but
remember, somewhere like where I work

87
00:04:46.368 --> 00:04:50.972
at Netflix, we're running thousands
of containers just for our website.

88
00:04:50.972 --> 00:04:53.605
We're running thousands of
instances of our databases.

89
00:04:53.605 --> 00:04:56.423
You scale all that out,
it gets really, really complex.

90
00:04:56.423 --> 00:05:00.586
But it's so much more efficient than
me creating 100 Ubuntu servers and

91
00:05:00.586 --> 00:05:04.813
setting them all up manually and doing
the whole thing we just went through in

92
00:05:04.813 --> 00:05:07.739
the past couple lessons,
that will be a lot of work.

93
00:05:07.739 --> 00:05:11.282
Why don't we just wrap it all up in
instructions and that way, we have some

94
00:05:11.282 --> 00:05:14.886
layer that says it doesn't matter what
operating system running on, your

95
00:05:14.886 --> 00:05:18.743
program is always going to work because
it's just this tiny little container.

96
00:05:18.743 --> 00:05:23.266
And that's what we're going to do today,
we're going to create a container.

97
00:05:23.266 --> 00:05:26.223
And the great thing about containers
are they don't care about what operating

98
00:05:26.223 --> 00:05:27.315
system you're running on.

99
00:05:27.315 --> 00:05:33.440
So, yeah, we're running on Ubuntu right
now, but what if I want to run on OSX?

100
00:05:33.440 --> 00:05:35.560
What if I want to run on Red Hat or
Fedora or something like that?

101
00:05:35.560 --> 00:05:40.522
Containers can run on anywhere because
they're operating system agnostic.

102
00:05:40.522 --> 00:05:43.700
It's up to that parsing layer.

103
00:05:43.700 --> 00:05:46.838
And for our instances, we use Docker.

104
00:05:46.838 --> 00:05:50.221
Docker's the big one you've probably
all heard of when it comes to container

105
00:05:50.221 --> 00:05:50.852
management.

106
00:05:50.852 --> 00:05:55.291
There's also Amazon ECS,
Apache Mesos, CoreOS rkt, etc.

107
00:05:55.291 --> 00:05:59.042
There's a lot of different
solutions these days.

108
00:05:59.042 --> 00:06:01.853
And I touched on this earlier, but
containers are super lightweight.

109
00:06:01.853 --> 00:06:04.663
They only run the application
that you need, nothing else.

110
00:06:04.663 --> 00:06:05.668
No other fluff.

111
00:06:05.668 --> 00:06:08.684
If they're portable,
we can move them around from OS to OS.

112
00:06:08.684 --> 00:06:12.451
They're much easier for development,
because you can just download my container

113
00:06:12.451 --> 00:06:14.885
image and you get up and
running very, very quickly.

114
00:06:14.885 --> 00:06:16.627
They're easy to manage.

115
00:06:16.627 --> 00:06:20.165
Because I think as we saw when we
implemented web sockets and databases,

116
00:06:20.165 --> 00:06:24.346
the more things you have put together, the
more chances something is gonna go wrong.

117
00:06:24.346 --> 00:06:27.092
So if you're only running one application,

118
00:06:27.092 --> 00:06:30.647
it's a lot easier to reason
about when something breaks.

119
00:06:30.647 --> 00:06:33.555
They're faster to start up, because again,
it's only that application.

120
00:06:33.555 --> 00:06:37.977
And most importantly, we decouple
the application from the infrastructure,

121
00:06:37.977 --> 00:06:39.566
which is really important.

122
00:06:39.566 --> 00:06:44.149
I've talked a lot about the paved road and
saying we're using Ubuntu and Nginx and

123
00:06:44.149 --> 00:06:47.805
we're following this really tight path,
which makes it easy for

124
00:06:47.805 --> 00:06:49.084
us to use other tools.

125
00:06:49.084 --> 00:06:51.931
But what if we can just
decouple all that entirely, so

126
00:06:51.931 --> 00:06:55.161
it doesn't matter what
the underlying infrastructure is,

127
00:06:55.161 --> 00:06:59.556
what our operating system is, we can just
write applications that run anywhere.

128
00:06:59.556 --> 00:07:01.844
That's why containers are really,
really awesome.

