WEBVTT

1
00:00:00.000 --> 00:00:03.028
Okay, here we are, we're now up to date.

2
00:00:03.028 --> 00:00:03.937
We're feeling good.

3
00:00:03.937 --> 00:00:07.971
There's no label up here that says
you need to reboot your computer.

4
00:00:07.971 --> 00:00:12.920
The next thing we're gonna do
is we need to create a new user,

5
00:00:12.920 --> 00:00:16.619
because right now, we're running as root.

6
00:00:16.619 --> 00:00:20.147
And the way you can tell
you're running as root is,

7
00:00:20.147 --> 00:00:22.863
well, it says root here, clear this.

8
00:00:28.722 --> 00:00:33.466
So it says root, but the other way you
can always tell you're running root is

9
00:00:33.466 --> 00:00:38.377
there's an octothorpe right here or
a hash sign, whatever you wanna call it.

10
00:00:38.377 --> 00:00:41.761
That's a surefire way of
you're running as root.

11
00:00:41.761 --> 00:00:43.407
We don't wanna run as root.

12
00:00:43.407 --> 00:00:45.768
Root does not double-check anything we do.

13
00:00:45.768 --> 00:00:49.035
Root it's like, okay,
you know what you're doing.

14
00:00:49.035 --> 00:00:52.961
Root is the highest permission
level on an operating system.

15
00:00:52.961 --> 00:00:56.013
It allows you to do anything and
everything.

16
00:00:56.013 --> 00:00:59.737
You wanna rm-rf/,
as in delete your directory,

17
00:00:59.737 --> 00:01:02.947
it'll let you do that and
will not stop you.

18
00:01:02.947 --> 00:01:05.558
So we never wanna run things as root.

19
00:01:05.558 --> 00:01:08.806
If something does require root,
that usually means, hey,

20
00:01:08.806 --> 00:01:10.598
let's put some thought into it.

21
00:01:10.598 --> 00:01:13.723
So the first thing we do
after we update our software,

22
00:01:13.723 --> 00:01:15.605
we're gonna create a new user.

23
00:01:15.605 --> 00:01:19.102
A user that's not root,
but has root access.

24
00:01:19.102 --> 00:01:21.582
We call root access super user.

25
00:01:21.582 --> 00:01:25.040
Usually, and
we run the sudo command to say,

26
00:01:25.040 --> 00:01:29.325
I'm gonna do this as root for
this particular command.

27
00:01:29.325 --> 00:01:31.434
Sudo stands for super user do.

28
00:01:31.434 --> 00:01:34.509
It allows you to run the commands and
programs as root.

29
00:01:34.509 --> 00:01:38.712
So it allows you to run as root as
necessary, but our default is never ever,

30
00:01:38.712 --> 00:01:41.070
ever to run as root, ever, ever, ever.

31
00:01:41.070 --> 00:01:43.761
It's tempting, cuz you're like
I hate sudoing all the time.

32
00:01:43.761 --> 00:01:46.641
It's such a pain, but
it's there for a reason.

33
00:01:46.641 --> 00:01:48.995
These are well-trodden paths, so

34
00:01:48.995 --> 00:01:54.184
keep it the permissions as minimal as
possible do you need to run the programs.

35
00:01:54.184 --> 00:01:58.818
So next, we're gonna create a new user,
because we don't wanna run as root.

36
00:01:58.818 --> 00:02:02.600
So we're gonna create a new user, we're
gonna add that user to the pseudo group.

37
00:02:02.600 --> 00:02:06.311
We're gonna switch that user, and then
we're gonna check pseudo-access just to

38
00:02:06.311 --> 00:02:08.600
double-check that our
user is actually working.

39
00:02:08.600 --> 00:02:10.041
Yea, so if you did sync or

40
00:02:10.041 --> 00:02:13.824
if you did transfer your names
servers over to DigitalOcean, and

41
00:02:13.824 --> 00:02:18.874
they still haven't propagated out, it just
gonna take a while, that's how it goes.

42
00:02:18.874 --> 00:02:19.944
&gt;&gt; Yeah, [INAUDIBLE].

43
00:02:19.944 --> 00:02:23.962
&gt;&gt; But it can take a few hours,
it can take a few seconds.

44
00:02:23.962 --> 00:02:28.366
It really varies on the internet, but

45
00:02:28.366 --> 00:02:31.672
that's kinda all I can say.

46
00:02:31.672 --> 00:02:35.645
That's why we do it pretty early in
the class rather than a little bit later.

47
00:02:35.645 --> 00:02:39.544
So you probably ran into some
interesting things creating a new user,

48
00:02:39.544 --> 00:02:42.401
some weird prompts, so
let's walk through them.

49
00:02:47.645 --> 00:02:51.404
So we don't wanna do things as root, very,
very dangerous, never do things as root.

50
00:02:51.404 --> 00:02:54.636
If you have in the past, you got lucky.

51
00:02:54.636 --> 00:02:55.538
[LAUGH] But again,

52
00:02:55.538 --> 00:02:58.736
not doing things as root will save
you a lot of trouble and pain.

53
00:02:58.736 --> 00:03:00.441
So I wanna create a new user.

54
00:03:00.441 --> 00:03:05.485
So I'm gonna say adduser, and
let's call it jem to keep it simple.

55
00:03:05.485 --> 00:03:10.443
Give it a password,
I keep mine pretty simple here too.

56
00:03:10.443 --> 00:03:12.831
For all these values,
feel free to fill them in if you want.

57
00:03:12.831 --> 00:03:16.923
I'm just gonna hit defaults,
information's correct, cool.

58
00:03:19.473 --> 00:03:22.228
No, no worries there,
you can put room number if you want.

59
00:03:22.228 --> 00:03:26.838
I'm not really gonna change anything,
I think it's just an artifact of Linux.

60
00:03:26.838 --> 00:03:31.750
Next thing wanna do is we wanna make
sure I can do stuff as root as jem,

61
00:03:31.750 --> 00:03:33.486
but only when I want to.

62
00:03:33.486 --> 00:03:38.594
So we're gonna add the user
Jem to the user sudo group.

63
00:03:38.594 --> 00:03:41.733
So to do that,
we're gonna use the usermod command.

64
00:03:41.733 --> 00:03:49.057
So user modify, so usermod,
we're gonna say add -a to the group,

65
00:03:49.057 --> 00:03:55.114
capital G to the sudo errs group,
super users do, jem.

66
00:03:55.114 --> 00:03:59.224
Awesome, next thing we're gonna do is
we're gonna switch over to jem user.

67
00:03:59.224 --> 00:04:03.077
So when I say su, switch user jem.

68
00:04:03.077 --> 00:04:10.434
All right, and I'm still in the root, so I
can go home if I want, you don't need to.

69
00:04:10.434 --> 00:04:13.563
And look, I have my own directory and
everything once I create a user.

70
00:04:13.563 --> 00:04:15.291
So every time you create a user,

71
00:04:15.291 --> 00:04:18.750
it creates another directory
under slash home slash whomever.

72
00:04:18.750 --> 00:04:20.753
Now, we wanna check our sudo access.

73
00:04:20.753 --> 00:04:24.804
To do that, there's a lot of ways of doing
it, but I like to access the auth log.

74
00:04:24.804 --> 00:04:28.502
These are things you normally
can't access as a regular user,

75
00:04:28.502 --> 00:04:29.981
you can only do as roots.

76
00:04:29.981 --> 00:04:32.127
So just double-check, we have access.

77
00:04:32.127 --> 00:04:36.039
So I'm gonna say sudo cat,
remember that dumps the whole file.

78
00:04:36.039 --> 00:04:41.366
/var, log and

79
00:04:41.366 --> 00:04:44.400
we wanna look at the auth.log.

80
00:04:44.400 --> 00:04:48.476
It's gonna ask me for
the password, and there we go.

81
00:04:48.476 --> 00:04:51.745
So we've confirmed that
this user has sudo access.

82
00:04:51.745 --> 00:04:56.359
We confirmed that it all works and
we have this new user, great.

83
00:04:56.359 --> 00:05:03.122
So the next thing we wanna do is
we wanna disable the root access.

84
00:05:03.122 --> 00:05:07.809
We definitely, definitely don't
wanna have root open to the public,

85
00:05:07.809 --> 00:05:10.083
cuz that's the number one thing.

86
00:05:10.083 --> 00:05:14.922
Or let's say, not so good actors want
to do is they wanna log in as root.

87
00:05:14.922 --> 00:05:17.247
Because, again, once you have root,
you can do literally anything.

88
00:05:17.247 --> 00:05:19.724
There's unrestricted access to the system.

89
00:05:19.724 --> 00:05:23.194
But to do that,
we're gonna need to create a new way for

90
00:05:23.194 --> 00:05:26.222
our user we just created
to log in to our system.

91
00:05:26.222 --> 00:05:31.752
So in our home directory,
we wanna create an authorized key file.

92
00:05:31.752 --> 00:05:34.394
And authorized keys is where
our public key is gonna sit.

93
00:05:34.394 --> 00:05:38.976
So that means whenever we log in as now
user is gonna check to the public key.

94
00:05:38.976 --> 00:05:41.348
And then it's gonna authenticate
against my private key,

95
00:05:41.348 --> 00:05:43.821
that's gonna allow me to log in
as a different user entirely.

96
00:05:43.821 --> 00:05:45.211
There's a lot of different
ways of doing this.

97
00:05:45.211 --> 00:05:50.514
This is probably the most simple way,
so let's do that together.

98
00:05:50.514 --> 00:05:54.030
So I'm gonna switch to my home directory,
it's clear.

99
00:05:58.200 --> 00:06:04.332
So let's create this directory
if it doesn't exist, ls-la.

100
00:06:04.332 --> 00:06:09.112
I don't see a.ssh directory,
so let's make one, mkdir.ssh.

101
00:06:10.806 --> 00:06:16.525
Now, we can cd into that, and
we're gonna create an authorized key file.

102
00:06:16.525 --> 00:06:19.385
So there's different ways of doing this.

103
00:06:19.385 --> 00:06:26.860
We'll just touch it for now, Rather than
vi, because we don't have the key yet.

104
00:06:26.860 --> 00:06:31.686
That way we can switch over to a new
terminal without having to exit

105
00:06:31.686 --> 00:06:33.368
out authorized keys.

106
00:06:35.858 --> 00:06:37.467
Sure I spell that right?

107
00:06:37.467 --> 00:06:40.284
ls, okay.

108
00:06:45.725 --> 00:06:49.554
So the next thing we need to do is we need
to put our public key into the authorized

109
00:06:49.554 --> 00:06:50.086
key file.

110
00:06:50.086 --> 00:06:51.250
So there's different ways of doing this.

111
00:06:51.250 --> 00:06:53.894
I'm gonna do this the long way,
that's probably the way you're at.

112
00:06:53.894 --> 00:06:58.418
You're also welcome to open up a new
terminal, get your public key and

113
00:06:58.418 --> 00:07:02.034
paste it back in, but
I'm gonna do this the longer way.

114
00:07:02.034 --> 00:07:03.399
So I'm gonna exit.

115
00:07:03.399 --> 00:07:05.223
And notice, I didn't exit the server,

116
00:07:05.223 --> 00:07:08.296
because I actually just created
a new shell whenever I switch user.

117
00:07:08.296 --> 00:07:10.445
I just created a new
shell with that new user.

118
00:07:10.445 --> 00:07:13.468
So when I exit, I'm just jumping back
to the shell I logged in originally, so

119
00:07:13.468 --> 00:07:14.315
I need to exit again.

120
00:07:16.993 --> 00:07:19.269
Next, I wanna cat that public key.

121
00:07:19.269 --> 00:07:25.973
So that's those full stack, front end,
pub, and I'm just gonna copy this.

122
00:07:28.726 --> 00:07:33.699
There is a command to just do this
all at once and I used to teach that,

123
00:07:33.699 --> 00:07:36.160
but it's so long and so verbose.

124
00:07:36.160 --> 00:07:37.387
It's not really saying anything.

125
00:07:37.387 --> 00:07:39.307
This is probably more of the default way.

126
00:07:39.307 --> 00:07:43.241
You usually don't exit the server and
paste things back in, but it's okay for

127
00:07:43.241 --> 00:07:44.380
the course's class.

128
00:07:44.380 --> 00:07:47.667
So now that I have my key,
I'm just gonna log back in as root,

129
00:07:47.667 --> 00:07:51.156
cuz we're still don't have the login for
jem, my new user yet.

130
00:07:51.156 --> 00:07:55.710
Let's switch back over to jem just,
because I don't like being roots.

131
00:07:55.710 --> 00:07:58.836
cd, and then we're gonna edit
that authorized key file.

132
00:08:02.512 --> 00:08:05.588
Ssh authorized keys, I'm gonna insert.

133
00:08:05.588 --> 00:08:11.446
I'm just gonna paste that in,
and then I'm gonna right quit.

134
00:08:11.446 --> 00:08:12.941
All right, so now, let's test it out.

135
00:08:12.941 --> 00:08:13.975
Let's see if it worked.

136
00:08:13.975 --> 00:08:18.802
So we're gonna exit,
we're gonna exit again.

137
00:08:18.802 --> 00:08:23.741
So this time, I'm gonna ssh, but I'm
gonna use my new user instead of roots.

138
00:08:23.741 --> 00:08:25.031
Let's see if this worked.

139
00:08:26.447 --> 00:08:29.767
Hey, there we go, not bad, not bad at all.

140
00:08:37.906 --> 00:08:40.785
And if that didn't work,
one double-check you created,

141
00:08:40.785 --> 00:08:44.423
you spelled authorized keys correctly,
it's kind of a longer file name.

142
00:08:44.423 --> 00:08:48.274
Double-check, you copy and pasted your
public key and not your private one.

143
00:08:48.274 --> 00:08:50.280
You'll notice it's the private one,

144
00:08:50.280 --> 00:08:53.693
cuz the private one is substantially
longer than your public one.

145
00:08:53.693 --> 00:08:55.077
And then make sure you exit in,

146
00:08:55.077 --> 00:08:58.668
and make sure you're trying to log in with
your new username at your IP address.

147
00:09:08.231 --> 00:09:12.289
Yes.
&gt;&gt; I guess it's kinda obvious here, but

148
00:09:12.289 --> 00:09:16.964
the ssh key,
you can even have it associated with

149
00:09:16.964 --> 00:09:20.745
as many users as you want on the server.

150
00:09:20.745 --> 00:09:24.328
It's purely that you're
connecting from this my laptop.

151
00:09:24.328 --> 00:09:29.312
It's giving me access to the server with
whatever user I want as long as I've added

152
00:09:29.312 --> 00:09:31.782
the public key to the user on the server.

153
00:09:31.782 --> 00:09:33.315
&gt;&gt; Yeah, exactly right.

154
00:09:33.315 --> 00:09:37.620
The question was, aren't ssh keys
tied to users or your computer?

155
00:09:37.620 --> 00:09:39.395
They're mostly tied to your computer.

156
00:09:39.395 --> 00:09:42.183
You can use one ssh key to do everything.

157
00:09:42.183 --> 00:09:46.041
Use the same one for GitHub,
use the same one for your computer,

158
00:09:46.041 --> 00:09:49.059
use the same one for
anything, totally up to you.

159
00:09:49.059 --> 00:09:51.154
I'm not against that,
ssh is usually pretty secure.

160
00:09:51.154 --> 00:09:55.592
I don't think you need an ssh key for
every single instance, but it's up to you.

161
00:09:55.592 --> 00:09:57.607
You can make it complex,
you can make it simple.

162
00:09:57.607 --> 00:10:01.630
But in general, it's usually
a pretty safe way of doing things.

