WEBVTT

1
00:00:00.219 --> 00:00:02.344
Next, I want to talk about permissions,

2
00:00:02.344 --> 00:00:05.272
because we've done some
permission changing, right?

3
00:00:05.272 --> 00:00:11.434
Anybody remember the command
we use to change permissions?

4
00:00:11.434 --> 00:00:12.047
&gt;&gt; chmod.

5
00:00:12.047 --> 00:00:14.998
&gt;&gt; chmod, yeah, that's right.

6
00:00:14.998 --> 00:00:17.668
I was asking you to say like,
hey, chmod this file,

7
00:00:17.668 --> 00:00:21.763
chmod this file with these numbers, but
they don't really make a lot of sense.

8
00:00:21.763 --> 00:00:25.540
But they do if you understand
the math a little bit.

9
00:00:25.540 --> 00:00:27.099
And it's a little bit of math,
don't worry.

10
00:00:27.099 --> 00:00:28.663
It's very, very simple math.

11
00:00:28.663 --> 00:00:33.251
But it makes these weird rwx and
dashes, and stars, and

12
00:00:33.251 --> 00:00:37.063
all these things make
a little bit more sense.

13
00:00:37.063 --> 00:00:42.657
So, when we look at our file system,
remember that command,

14
00:00:42.657 --> 00:00:47.621
ls -la shows the hidden files and
their permissions.

15
00:00:47.621 --> 00:00:53.395
You see all these rwx, rwx, rwx,
rwx dash, what does that mean?

16
00:00:55.457 --> 00:00:56.834
Well, the r stands for read.

17
00:00:56.834 --> 00:00:59.332
It's saying you're allowed
to read the file, right?

18
00:00:59.332 --> 00:01:01.839
W is for write, the x for execute,

19
00:01:01.839 --> 00:01:05.827
I don't know why it's not e,
just the way things are.

20
00:01:05.827 --> 00:01:07.808
And then these permissions
are broken up into groups.

21
00:01:07.808 --> 00:01:09.639
You have the owner group.

22
00:01:09.639 --> 00:01:13.389
You have your group group,
and we have everyone else.

23
00:01:13.389 --> 00:01:15.881
So in my case, my user's name is Jem.

24
00:01:15.881 --> 00:01:18.554
So the owner would be Jem, me.

25
00:01:18.554 --> 00:01:21.303
The group is actually the pseudo
of users because that's

26
00:01:21.303 --> 00:01:23.318
the only group I'm a member of right now.

27
00:01:23.318 --> 00:01:26.815
Then the everyone else's,
this one is not me, not in my group.

28
00:01:28.175 --> 00:01:33.322
So now, when we look at these
permissions again, For,

29
00:01:33.322 --> 00:01:37.883
let's say app.js, I have read
write permission, but not execute

30
00:01:37.883 --> 00:01:42.856
because I'm not trying to execute it via,
I can't execute it directly.

31
00:01:42.856 --> 00:01:44.450
I'm gonna use node.

32
00:01:44.450 --> 00:01:46.732
Hence, it's a blank.

33
00:01:46.732 --> 00:01:49.395
And then my group is allowed to read and
write, but not execute.

34
00:01:49.395 --> 00:01:53.135
Everyone else is just allowed to read,
they're not allowed to write.

35
00:01:55.254 --> 00:01:59.793
So hopefully that makes a little bit more
sense in terms of these kind of what looks

36
00:01:59.793 --> 00:02:04.555
like random characters now, you
understand, they actually mean something.

37
00:02:04.555 --> 00:02:08.419
Depending on which context
you're trying to look at,

38
00:02:08.419 --> 00:02:11.280
the owner of the group or everyone else.

39
00:02:11.280 --> 00:02:13.391
But you're like, Jem,
what about those numbers?

40
00:02:13.391 --> 00:02:17.395
Those numbers don't make a lot of sense
cuz we weren't directly chmoding and

41
00:02:17.395 --> 00:02:19.928
saying read, write,
execute, which you can.

42
00:02:19.928 --> 00:02:21.727
We're using numbers as shorthand.

43
00:02:21.727 --> 00:02:22.833
What do those mean?

44
00:02:24.875 --> 00:02:28.673
So read has a value of 4 in octal numbers.

45
00:02:28.673 --> 00:02:31.226
Remember octal is base?

46
00:02:31.226 --> 00:02:31.741
&gt;&gt; Eight.

47
00:02:31.741 --> 00:02:33.320
&gt;&gt; Base eight, that's right.

48
00:02:33.320 --> 00:02:38.126
So read has value of 4, write has
value of 2, execute has value of 1.

49
00:02:38.126 --> 00:02:41.117
And using these combinations of numbers,

50
00:02:41.117 --> 00:02:46.111
you can do things with numbers and
the math that make perfect sense now.

51
00:02:46.111 --> 00:02:49.119
So anybody who's ever like,
my files is not working.

52
00:02:49.119 --> 00:02:52.278
And someone's like,
why don't you just chmod 777?

53
00:02:52.278 --> 00:02:54.117
Anybody use that one?

54
00:02:54.117 --> 00:02:59.798
Yeah, that's the anybody can do
anything anytime, anywhere, command.

55
00:02:59.798 --> 00:03:03.012
I've used it personally cuz I don't
understand the permissions, so

56
00:03:03.012 --> 00:03:04.871
I'm just gonna open them to everybody.

57
00:03:04.871 --> 00:03:09.473
You generally don't wanna do that, but
we see if you read, write, execute,

58
00:03:09.473 --> 00:03:11.589
that's 4 + 2 + 1, that's 7.

59
00:03:11.589 --> 00:03:13.181
4 + 2 + 1, that's 7.

60
00:03:13.181 --> 00:03:16.244
And that's why it's 777.

61
00:03:16.244 --> 00:03:19.700
Now, earlier in the exercise when we
were doing the git permissions for

62
00:03:19.700 --> 00:03:20.572
your GitHub key.

63
00:03:20.572 --> 00:03:25.108
And it had to be locked down because
ssh is very, very particular

64
00:03:25.108 --> 00:03:30.066
about the permissions for
a good reason, we were doing chmod 600.

65
00:03:30.066 --> 00:03:31.878
And what does that mean?

66
00:03:31.878 --> 00:03:35.842
By using the math, we say that means
only I am allowed to read and write,

67
00:03:35.842 --> 00:03:38.436
and no one else is allowed
to do anything else.

68
00:03:40.124 --> 00:03:45.039
So, now we look at these, again, these
kind of the gibberish of numbers, and

69
00:03:45.039 --> 00:03:50.267
you understand, they actually amount
to numbers and the numbers make sense.

70
00:03:50.267 --> 00:03:55.307
You don't have to use numbers,
but they're definitely

71
00:03:55.307 --> 00:04:03.249
much easier shorthand than trying to do it
read write execute, read write execute.

72
00:04:03.249 --> 00:04:07.624
And here's a nice cheat
sheet I like to use.

73
00:04:07.624 --> 00:04:09.287
Again, it calls the 777.

74
00:04:09.287 --> 00:04:10.996
You really don't wanna do that.

75
00:04:10.996 --> 00:04:17.796
You generally want the concept of
the least permissions as possible.

76
00:04:17.796 --> 00:04:19.833
You want it to be as
locked down to yourself or

77
00:04:19.833 --> 00:04:21.773
whoever actually needs to do something.

78
00:04:21.773 --> 00:04:24.688
Cuz again,
if someone gets into your server or

79
00:04:24.688 --> 00:04:29.773
there's another user on server who's like,
I don't know, fumbling around,

80
00:04:29.773 --> 00:04:34.207
they can delete stuff that you're like,
why did you touch that?

81
00:04:34.207 --> 00:04:37.577
But at a certain point,
it's kinda like being a parent,

82
00:04:37.577 --> 00:04:41.945
if I leave a glass vase out for my kid and
he breaks the vase, that's on me.

83
00:04:41.945 --> 00:04:46.302
So if I have a server and I have users
that have permissions to do anything, and

84
00:04:46.302 --> 00:04:49.050
they're like, hey,
I just rm dash rf slashed,

85
00:04:49.050 --> 00:04:52.216
because someone on the Internet
told me it'd be funny.

86
00:04:52.216 --> 00:04:55.556
And they wipe your server, that's on you.

87
00:04:55.556 --> 00:04:57.645
You shouldn't have given that permission.

88
00:04:57.645 --> 00:05:01.505
So hence, we always wanna follow
the principle of least permissions as

89
00:05:01.505 --> 00:05:03.060
possible for all our users.

