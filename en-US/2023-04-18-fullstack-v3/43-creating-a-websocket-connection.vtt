WEBVTT

1
00:00:00.000 --> 00:00:03.058
You're like, great, does it work now?

2
00:00:03.058 --> 00:00:04.213
No, cuz we created it on nginx.

3
00:00:04.213 --> 00:00:08.347
We created the server itself
to handle the WebSocket.

4
00:00:08.347 --> 00:00:11.002
But the client,
the people actually using our web page,

5
00:00:11.002 --> 00:00:14.227
don't know anything about this,
cuz we didn't send them any data.

6
00:00:14.227 --> 00:00:18.487
So we need to create a WebSocket
connection in the index.html page that

7
00:00:18.487 --> 00:00:21.474
allows it to deal with
our WebSocket connection.

8
00:00:21.474 --> 00:00:25.212
And this one is pretty,
I won't say straightforward, but

9
00:00:25.212 --> 00:00:29.044
it's not as complex, and
we'll walk through it right now.

10
00:00:29.044 --> 00:00:33.678
So in index.html, I actually do need
to write it proper HTML right here,

11
00:00:33.678 --> 00:00:36.011
because I need to write a script tag.

12
00:00:36.011 --> 00:00:38.261
It's html, you don't have to get fancy.

13
00:00:38.261 --> 00:00:39.927
You can give it a head.

14
00:00:41.794 --> 00:00:48.076
You don't have to use it, give it a body.

15
00:00:48.076 --> 00:00:49.995
But really all we need is the script tag.

16
00:01:01.118 --> 00:01:04.933
So what I want to do is, all we have
to do is, we've set the protocol for

17
00:01:04.933 --> 00:01:06.505
the WebSocket connection.

18
00:01:06.505 --> 00:01:11.182
There's a difference between a WebSocket
connection over HTTP versus HTTPS.

19
00:01:11.182 --> 00:01:13.106
So we want it to work on both.

20
00:01:13.106 --> 00:01:16.953
And then all we have to do is say,
where's the WebSocket connecting to?

21
00:01:16.953 --> 00:01:18.100
That's actually it.

22
00:01:18.100 --> 00:01:21.532
And then we'll add a bonus we
want to respond to our messages,

23
00:01:21.532 --> 00:01:25.703
as in the console log everything,
otherwise that data just gets dropped.

24
00:01:25.703 --> 00:01:27.765
That sounds complicated?

25
00:01:27.765 --> 00:01:29.189
It's not too bad.

26
00:01:29.189 --> 00:01:35.659
So we'll say let ws, And
let's say const proto,

27
00:01:35.659 --> 00:01:39.828
cuz we want to choose the protocol
we're connecting to at this point.

28
00:01:39.828 --> 00:01:44.705
And we can pull the protocol
from the window.location

29
00:01:44.705 --> 00:01:48.974
objects, Which has the protocol.

30
00:01:48.974 --> 00:01:52.206
It'll tell us if it's HTTPS or HTTP.

31
00:01:54.530 --> 00:01:59.671
And we'll say if it's https, We wanna

32
00:01:59.671 --> 00:02:04.350
say WebSocket Secure, WSS,
that's the actual name for

33
00:02:04.350 --> 00:02:09.036
it Sorry, that's wss, is the protocol.

34
00:02:09.036 --> 00:02:14.090
Otherwise it's just a regular
Websocket connection over HTTP.

35
00:02:14.090 --> 00:02:17.348
And that's how we should choose
a protocol for WebSocket,

36
00:02:17.348 --> 00:02:20.162
and it'll work on either port 80 or
port 443.

37
00:02:20.162 --> 00:02:23.242
All right, next,
we need to create the WebSocket,

38
00:02:23.242 --> 00:02:26.467
which is a built-in object in the window,
in the dom.

39
00:02:26.467 --> 00:02:32.466
So we'll say ws, that thing we created
earlier, we'll say new WebSocket.

40
00:02:33.742 --> 00:02:36.665
Pretty cool, it's already built in.

41
00:02:36.665 --> 00:02:38.979
Next, we wanna give it the protocol and
where to connect to.

42
00:02:38.979 --> 00:02:44.351
So we're just gonna use the proto
object we created earlier.

43
00:02:45.711 --> 00:02:50.492
Proto, it's just a string
telling us how to

44
00:02:50.492 --> 00:02:55.778
connect,:// And
because we're not doing anything fancy,

45
00:02:55.778 --> 00:02:58.035
we're just connecting to
the WebSocket at the route.

46
00:02:58.035 --> 00:03:03.102
We're gonna say window, .location.

47
00:03:07.955 --> 00:03:15.050
And our host, which is just gonna give us
our domain name back And close it all up.

48
00:03:22.835 --> 00:03:26.942
And the very last thing we need to do
is we just need to get our WebSocket to

49
00:03:26.942 --> 00:03:29.685
respond to any messages
we get from the server.

50
00:03:29.685 --> 00:03:32.160
Other than that,
we can send messages all day.

51
00:03:32.160 --> 00:03:34.346
How is the client ever
gonna know about it?

52
00:03:34.346 --> 00:03:38.206
And this isn't necessarily,
it doesn't have to be a step.

53
00:03:38.206 --> 00:03:40.616
So what's something we
can do with WebSocket?

54
00:03:40.616 --> 00:03:44.704
We could, say, trigger an action on the
page, like a page update or page render or

55
00:03:44.704 --> 00:03:45.849
something like that.

56
00:03:45.849 --> 00:03:47.975
In that case,
the client doesn't really need to know,

57
00:03:47.975 --> 00:03:50.020
the WebSocket is just
controlling that connection.

58
00:03:50.020 --> 00:03:54.147
But for this really simple example, we
just wanna log out any messages that come

59
00:03:54.147 --> 00:03:57.731
from the server, just to let us know
that our connection is working.

60
00:03:57.731 --> 00:04:05.220
So we do that by saying onmessage,
And it's gonna take an event.

61
00:04:05.220 --> 00:04:08.553
Don't need a parentheses, but stickler.

62
00:04:11.349 --> 00:04:16.752
And we're just gonna say
console.log the event.data.

63
00:04:22.677 --> 00:04:25.399
&gt;&gt; Should onmessage be camelcase?

64
00:04:25.399 --> 00:04:26.927
&gt;&gt; No, that's just a shorthand.

65
00:04:26.927 --> 00:04:33.196
You can also say ws.onfunction message.

66
00:04:33.196 --> 00:04:35.997
The onmessage is just a shorthand for
doing that.

67
00:04:40.022 --> 00:04:44.816
Okay, now the moment of truth where we see
where Jem made a mistake in his coding

68
00:04:44.816 --> 00:04:45.626
somewhere.

69
00:04:45.626 --> 00:04:48.055
So let's go ahead and fire up our server.

70
00:04:48.055 --> 00:04:51.628
Hopefully, it won't
complain about anything.

71
00:04:51.628 --> 00:04:55.508
All right, no complaints so far, but
we didn't actually use any WebSockets, so

72
00:04:55.508 --> 00:04:57.660
we won't know if it works
until we try it out.

73
00:04:57.660 --> 00:04:59.981
Let's give it a shot.

74
00:04:59.981 --> 00:05:01.305
I'm gonna open my console.

75
00:05:04.030 --> 00:05:07.813
Hey, worked the first time,
that almost never happens.

76
00:05:07.813 --> 00:05:10.657
So congratulations to everybody
if you got it the first time.

77
00:05:10.657 --> 00:05:12.729
If not, you're in good company,

78
00:05:12.729 --> 00:05:16.811
it took me a while to get this down
path to make it work the first time.

79
00:05:16.811 --> 00:05:19.758
We see it's messaging,
hey, our current servers,

80
00:05:19.758 --> 00:05:22.319
because we told the client
to broadcast that.

81
00:05:22.319 --> 00:05:25.317
We message that, welcome to my server.

82
00:05:25.317 --> 00:05:28.481
But now,
what if we try something like this?

83
00:05:33.781 --> 00:05:40.378
We see there are now two visitors,
cool, pretty cool.

84
00:05:40.378 --> 00:05:43.992
And that's the power of a WebSocket,
is, one, it's all real-time.

85
00:05:43.992 --> 00:05:48.572
We don't have to force refresh or force
an HTTP update or push it to the client.

86
00:05:48.572 --> 00:05:50.008
It's all happening real time.

87
00:05:50.008 --> 00:05:55.228
You can control the entire client via the
server, which is a really powerful idea.

88
00:05:55.228 --> 00:05:57.259
We're just touching on it here.

89
00:05:57.259 --> 00:05:57.889
But you see,

90
00:05:57.889 --> 00:06:01.444
the WebSockets aren't too hard once
you understand it needs a protocol,

91
00:06:01.444 --> 00:06:05.070
it needs to know what to happen when
it opens and closes, things like that.

92
00:06:05.070 --> 00:06:09.181
Beyond that, it's on you,
you can build anything you want now.

93
00:06:09.181 --> 00:06:11.972
Yeah, Brian Holt has
a course on real time.

94
00:06:11.972 --> 00:06:14.161
I've used socket.io.

95
00:06:14.161 --> 00:06:17.488
It's really powerful, but it's probably
a little more complex we need for this.

96
00:06:17.488 --> 00:06:21.395
But if you're building real, real
WebSockets, it's a really great library,

97
00:06:21.395 --> 00:06:22.781
that's usually my go-to.

98
00:06:22.781 --> 00:06:26.437
So the last thing we need to do is we need
to push this, so the server can pull it

99
00:06:26.437 --> 00:06:29.430
down, and we need to see if this
actually works on our domain.

100
00:06:29.430 --> 00:06:31.550
So we need to tie it all together.

101
00:06:31.550 --> 00:06:33.111
And this is where it gets interesting.

102
00:06:33.111 --> 00:06:36.187
If we made any mistakes along the way,
it won't work.

103
00:06:36.187 --> 00:06:39.601
Let's see, you never know, you never know
if I left a semicolon out somewhere.

104
00:06:42.175 --> 00:06:45.271
So we'll jump back to VS Code.

105
00:06:45.271 --> 00:06:48.956
I'm gonna start my server, Ctrl+C, clear.

106
00:06:48.956 --> 00:06:51.094
Just do a git status so
I can see what I'm adding.

107
00:06:53.144 --> 00:06:56.832
So I don't wanna add my node modules.

108
00:06:56.832 --> 00:07:00.502
So what I'm going to do is
I'm gonna create a new file.

109
00:07:00.502 --> 00:07:02.538
I'm gonna create a new gitignore file.

110
00:07:05.337 --> 00:07:06.211
And you don't have to do this.

111
00:07:06.211 --> 00:07:08.226
You're welcome to add your node modules.

112
00:07:08.226 --> 00:07:10.677
I'm just a stickler.

113
00:07:10.677 --> 00:07:13.270
And we're gonna say node modules.

114
00:07:15.372 --> 00:07:16.271
We're gonna ignore that.

115
00:07:18.460 --> 00:07:21.670
And I probably don't need to
commit my package lock either.

116
00:07:21.670 --> 00:07:24.148
It's not super necessary.

117
00:07:24.148 --> 00:07:25.904
Actually, I'll leave that in there.

118
00:07:25.904 --> 00:07:28.291
I don't know what the server's gonna do.

119
00:07:28.291 --> 00:07:32.225
So I'm just gonna say git add.,
I know people, if I post this on Twitter,

120
00:07:32.225 --> 00:07:35.608
people will get upset I do git add.,
but I know what I'm doing.

121
00:07:35.608 --> 00:07:40.125
So gitadd., is the lazy way of adding
all the files we just modified.

122
00:07:40.125 --> 00:07:43.205
And then we're just gonna commit it,

123
00:07:43.205 --> 00:07:48.317
git commit-am if we're adding
all those files we just added.

124
00:07:48.317 --> 00:07:52.860
And then the m is the message, so

125
00:07:52.860 --> 00:07:57.076
Created a WebSocket server.

126
00:08:02.412 --> 00:08:03.294
And clients.

127
00:08:07.574 --> 00:08:09.143
And then we're gonna just push it up.

128
00:08:18.582 --> 00:08:21.398
And remember,
we have that cron job running, so

129
00:08:21.398 --> 00:08:25.467
it should automatically pull in these
changes within a minute or two.

130
00:08:25.467 --> 00:08:28.775
So I'm gonna jump back to my server.

131
00:08:28.775 --> 00:08:32.991
I'm gonna ls, and

132
00:08:32.991 --> 00:08:37.738
I'll wait, rm foo.

133
00:08:45.100 --> 00:08:46.093
And there we go.

134
00:08:46.093 --> 00:08:50.315
It pulled in automatically, so
our script is working just fine.

135
00:08:50.315 --> 00:08:52.185
We're not quite there yet,
because remember,

136
00:08:52.185 --> 00:08:53.651
what's the server that's running?

137
00:08:53.651 --> 00:08:56.643
It's our simple server we wrote,
not our node server.

138
00:08:56.643 --> 00:08:58.619
So we're gonna say pm2.

139
00:08:58.619 --> 00:09:00.239
Remember the process manager?

140
00:09:00.239 --> 00:09:04.137
We're just gonna stop app.js,
and it stopped, and

141
00:09:04.137 --> 00:09:09.087
we're just gonna start it back up
with our new server, pm2 start.

142
00:09:11.679 --> 00:09:15.611
And we're gonna use the index.ws file.

143
00:09:15.611 --> 00:09:17.861
This time, I'm gonna say watch on it.

144
00:09:17.861 --> 00:09:22.703
That way if we make any changes to our
code, to our server on our local and

145
00:09:22.703 --> 00:09:28.147
then it pulls into our server, pm2 will
restart on watches, on changes to that

146
00:09:32.260 --> 00:09:35.420
And cuz pm2 is awesome, it's saying,
hey this is something new,

147
00:09:35.420 --> 00:09:38.704
these things aren't gonna restart,
we need to add it to the restart.

148
00:09:38.704 --> 00:09:42.441
So we're gonna say pm2 save.

149
00:09:42.441 --> 00:09:43.679
There we go.

150
00:09:43.679 --> 00:09:48.697
So now our server should stay up and
running and it'll restart on load.

151
00:09:48.697 --> 00:09:51.933
So now, the moment of truth,
does this all work?

152
00:09:51.933 --> 00:09:53.478
Does this all hook together?

153
00:09:53.478 --> 00:09:54.506
Let's find out.

154
00:09:58.818 --> 00:10:05.042
So I'm going on my regular one here,
Bad Gateway.

155
00:10:05.042 --> 00:10:08.405
I did something wrong here,
let's figure out what's going on.

156
00:10:08.405 --> 00:10:11.408
Check my console, nothing obvious.

157
00:10:11.408 --> 00:10:12.970
So what did I do that's incorrect?

158
00:10:14.380 --> 00:10:15.178
Let's check it out.

159
00:10:20.094 --> 00:10:21.839
So pm2 status.

160
00:10:23.818 --> 00:10:27.840
So there's an error in my index.ws,
I wonder what that is?

161
00:10:27.840 --> 00:10:29.442
So let me try running it by hand.

162
00:10:34.020 --> 00:10:38.178
I forgot to npm install
after we did all that work.

163
00:10:38.178 --> 00:10:41.074
It's the little things that will get you,
it's the little things.

164
00:10:48.024 --> 00:10:52.762
So if we wanted to, we can update
our github.script to say pull and

165
00:10:52.762 --> 00:10:54.374
then npm i every time.

166
00:10:54.374 --> 00:10:56.726
Actually, let's go ahead and
do that now, just so

167
00:10:56.726 --> 00:10:58.434
we don't run into this error again.

168
00:10:58.434 --> 00:11:02.952
So I'm just gonna vi our github.script.

169
00:11:02.952 --> 00:11:09.244
So once it's done pulling, I'm

170
00:11:09.244 --> 00:11:15.671
just gonna npm i Then right-click.

171
00:11:15.671 --> 00:11:18.696
That way, from now on, it'll always
stay in sync with package json.

172
00:11:23.187 --> 00:11:28.280
So now, address in use,
something else using it.

173
00:11:28.280 --> 00:11:30.740
That's probably pm2 is still using it.

174
00:11:30.740 --> 00:11:34.010
So I'm gonna say pm2 status, yeah.

175
00:11:34.010 --> 00:11:37.510
So the minute we modified our file or any
of the file system itself, pm2 is like,

176
00:11:37.510 --> 00:11:39.171
hey, you're not erroring anymore.

177
00:11:39.171 --> 00:11:43.192
Let me bring it back online,
because that's what it's supposed to do.

178
00:11:43.192 --> 00:11:44.562
So now let's check it out.

179
00:11:46.712 --> 00:11:48.760
Hey, it's working.

180
00:11:50.998 --> 00:11:54.486
And ignore the favicon, that's just
browsers, they're gonna do that to you.

181
00:11:58.620 --> 00:12:00.224
So did everybody get this far?

182
00:12:03.035 --> 00:12:05.195
What are the errors you run into?

183
00:12:05.195 --> 00:12:06.374
There's always the common errors.

184
00:12:06.374 --> 00:12:11.258
Remember, I've done this a few times,
so I've made most of the mistakes.

185
00:12:11.258 --> 00:12:12.710
Any errors you all are running into?

186
00:12:14.240 --> 00:12:17.110
&gt;&gt; Those extra logs are me
hitting your server.

187
00:12:17.110 --> 00:12:17.960
&gt;&gt; What's that?

188
00:12:17.960 --> 00:12:20.130
&gt;&gt; The extra logs in there
are me hitting your server.

189
00:12:20.130 --> 00:12:23.500
&gt;&gt; Nice, I didn't even notice.

190
00:12:23.500 --> 00:12:29.450
Yes, if you go to jemstock.lol,
we'll see more people on the server.

191
00:12:29.450 --> 00:12:32.225
Now, if we really wanna spend more
time on WebSockets, we can make it so

192
00:12:32.225 --> 00:12:33.306
we can message each other.

193
00:12:33.306 --> 00:12:36.120
So I type the message and it goes out
to everybody, connect to the server.

194
00:12:36.120 --> 00:12:37.254
And then in that way,

195
00:12:37.254 --> 00:12:40.986
you just build a real time chat
application in just a few lines of code.

196
00:12:40.986 --> 00:12:45.335
But we're not gonna go that deep today
cuz I wanna spend a little bit more

197
00:12:45.335 --> 00:12:48.832
time on databases and docker,
and then load balancers.

198
00:12:48.832 --> 00:12:52.968
But hopefully, you all are this far.

199
00:12:52.968 --> 00:12:54.163
Did everything work?

200
00:12:54.163 --> 00:12:57.870
&gt;&gt; So my console says there's
six current visitors, and

201
00:12:57.870 --> 00:13:01.668
yours still says five, so
I wonder why the difference.

202
00:13:01.668 --> 00:13:04.286
&gt;&gt; I wonder why the difference.

203
00:13:04.286 --> 00:13:05.721
Mine says seven now.

204
00:13:05.721 --> 00:13:08.082
&gt;&gt; If you refreshed, would it say eight?

205
00:13:08.082 --> 00:13:10.030
&gt;&gt; It shouldn't.

206
00:13:10.030 --> 00:13:11.246
&gt;&gt; Mine says seven as well.

207
00:13:11.246 --> 00:13:13.488
&gt;&gt; Cuz it immediately drops
that connection and re-adds it.

208
00:13:13.488 --> 00:13:14.241
Yours is at seven?

209
00:13:14.241 --> 00:13:15.022
&gt;&gt; Yep.

210
00:13:15.022 --> 00:13:21.271
&gt;&gt; All right, All right, look at you.

211
00:13:21.271 --> 00:13:22.303
That's incredible.

212
00:13:22.303 --> 00:13:25.909
You never probably would have thought this
earlier that you could create a WebSocket

213
00:13:25.909 --> 00:13:30.764
connection, Update your nginx, and
now you have a real time connection

214
00:13:30.764 --> 00:13:34.073
running through your very own
domain name on a brand new server.

215
00:13:34.073 --> 00:13:36.204
And you wrote it all by hand.

216
00:13:36.204 --> 00:13:39.117
So that's a very difficult accomplishment,
so good job.

