WEBVTT

1
00:00:00.260 --> 00:00:05.067
So in all these tools, I was using kind of
these weird phrases called TCP and UDP.

2
00:00:05.067 --> 00:00:07.440
So what am I talking about exactly?

3
00:00:09.727 --> 00:00:13.113
So TCP stands for
transmission control protocol.

4
00:00:13.113 --> 00:00:17.974
Again, I nternet's built on rules and
cooperation, internet protocols, one,

5
00:00:17.974 --> 00:00:21.525
transmission control protocol
is the other one, TCP/IP.

6
00:00:21.525 --> 00:00:24.266
Most packets are going to be TCP packets.

7
00:00:24.266 --> 00:00:28.451
The other type of packet we're
gonna run into is called a UDP,

8
00:00:28.451 --> 00:00:30.475
the User Datagram Protocol.

9
00:00:30.475 --> 00:00:34.425
And you're saying, Jim,
why do I care about any of this stuff?

10
00:00:34.425 --> 00:00:35.858
I'm a front engineer.

11
00:00:35.858 --> 00:00:37.426
Blah, blah, blah, you're handsome.

12
00:00:37.426 --> 00:00:41.865
Well, TCP is always gonna be
the most reliable connection.

13
00:00:41.865 --> 00:00:45.985
TCP, actually I have
this on the next slide.

14
00:00:45.985 --> 00:00:48.452
TCP has what's called the handshake.

15
00:00:48.452 --> 00:00:53.279
So I send a SYN, which is a the type
of the packet that I'm gonna send, and

16
00:00:53.279 --> 00:00:55.748
said, I'm sending you something.

17
00:00:55.748 --> 00:00:58.952
The server is gonna say SYN ACK,
I acknowledge your request and

18
00:00:58.952 --> 00:01:00.291
I'm gonna send you back.

19
00:01:00.291 --> 00:01:03.011
Then I acknowledge that
they acknowledged me.

20
00:01:03.011 --> 00:01:07.318
And we do this millions and millions and
millions and millions of times.

21
00:01:07.318 --> 00:01:09.751
TCP is extremely reliable.

22
00:01:09.751 --> 00:01:13.237
It was invented because
the internet in the early days and

23
00:01:13.237 --> 00:01:15.206
even now is really unreliable.

24
00:01:15.206 --> 00:01:18.444
Remember how it takes 20
hops to get to Google?

25
00:01:18.444 --> 00:01:19.925
How do we know?

26
00:01:19.925 --> 00:01:22.222
Who's enforcing that these hops
are actually taking place?

27
00:01:22.222 --> 00:01:24.587
What if something goes down and
we have to reroute?

28
00:01:24.587 --> 00:01:26.831
How then does the server
know how to talk back to me?

29
00:01:26.831 --> 00:01:29.369
Or what if one router is only
allowing inbound traffic, but

30
00:01:29.369 --> 00:01:31.212
it's not allowing the outbound traffic?

31
00:01:31.212 --> 00:01:33.224
How do those responses get back to me?

32
00:01:33.224 --> 00:01:35.549
It's all done through the magic of TCP.

33
00:01:35.549 --> 00:01:40.271
TCP is like, hey, bro,
I'm sending you a file.

34
00:01:40.271 --> 00:01:41.606
I'm like, cool.

35
00:01:41.606 --> 00:01:43.740
I'll receive the file in the service like,
cool.

36
00:01:43.740 --> 00:01:46.126
I'm glad you're gonna receive that file.

37
00:01:46.126 --> 00:01:50.546
And then it sends me the file and I can
say, hey, I got 90% of that file, but

38
00:01:50.546 --> 00:01:54.153
these packets are missing,
this chunk of the file is missing.

39
00:01:54.153 --> 00:01:56.508
And the server will say,
okay, let me resend those.

40
00:01:56.508 --> 00:02:00.077
And I will keep resending and
retrying until everything is done and

41
00:02:00.077 --> 00:02:01.678
the connection is complete.

42
00:02:01.678 --> 00:02:03.127
TCP does that for us.

43
00:02:03.127 --> 00:02:04.830
It's very reliable.

44
00:02:04.830 --> 00:02:09.675
It has a lot of redundancies built
in to make sure that the data

45
00:02:09.675 --> 00:02:12.245
is getting where it needs to go.

46
00:02:12.245 --> 00:02:14.619
And we need to because
the Internet's complicated,

47
00:02:14.619 --> 00:02:16.475
there's a lot of ways it can go sideways.

48
00:02:16.475 --> 00:02:19.700
UDP on the other hand, does not care.

49
00:02:19.700 --> 00:02:23.807
UDP is, hey, you need a file, catch.

50
00:02:23.807 --> 00:02:25.588
If you catch it or not, who knows?

51
00:02:25.588 --> 00:02:26.372
But it doesn't really care.

52
00:02:26.372 --> 00:02:27.671
UDP is a one way.

53
00:02:27.671 --> 00:02:31.666
It's just gonna spray data at you.

54
00:02:31.666 --> 00:02:33.314
So why does that matter?

55
00:02:33.314 --> 00:02:35.802
Why do we use TCP and versus UDP?

56
00:02:35.802 --> 00:02:37.531
Why do we have these protocols?

57
00:02:37.531 --> 00:02:40.813
Well, one, anyone wanna take a guess?

58
00:02:40.813 --> 00:02:45.899
&gt;&gt; Depends on the what you're trying
to send and whether it needs to

59
00:02:45.899 --> 00:02:51.566
respond one after another or it can
be kind of assembled after the fact?

60
00:02:51.566 --> 00:02:57.178
&gt;&gt; Yeah, so the answer there was it
depends on what you're trying to send,

61
00:02:57.178 --> 00:03:00.308
if it can be reassembled after the fact.

62
00:03:00.308 --> 00:03:01.485
What else would we use?

63
00:03:01.485 --> 00:03:06.909
Why would we care if
the connection actually made it?

64
00:03:06.909 --> 00:03:11.334
&gt;&gt; I mean for something like streaming
video, if you receive a frame out of

65
00:03:11.334 --> 00:03:16.523
order, you're not gonna go back and replay
that one frame when it's out of order.

66
00:03:16.523 --> 00:03:21.130
So UDP is usually just good for
sending real-time type stuff

67
00:03:21.130 --> 00:03:25.842
where it doesn't matter if it
gets a few drops here and there.

68
00:03:25.842 --> 00:03:27.770
&gt;&gt; Yeah, that's exactly right.

69
00:03:27.770 --> 00:03:30.124
UDP is useful for streaming video.

70
00:03:30.124 --> 00:03:34.860
And where it doesn't matter if you
lose a couple packets along the way.

71
00:03:34.860 --> 00:03:37.982
Yes, question mark.

72
00:03:37.982 --> 00:03:43.032
&gt;&gt; UDP is faster, better for
real time data like wipe and video.

73
00:03:43.032 --> 00:03:44.883
&gt;&gt; Yeah, exactly right.

74
00:03:44.883 --> 00:03:49.031
Something streaming streaming music,
streaming video where if you do lose

75
00:03:49.031 --> 00:03:52.289
a couple of frames in there,
it's not the end of the world.

76
00:03:52.289 --> 00:03:55.260
It's totally fine.

77
00:03:55.260 --> 00:03:58.568
You ever wonder why your video sometimes
gets blurry when you're real time

78
00:03:58.568 --> 00:03:59.102
chatting?

79
00:03:59.102 --> 00:04:00.550
That's because UDP.

80
00:04:00.550 --> 00:04:03.896
UDP is just sending you data, sending
you data with the assumption that yeah,

81
00:04:03.896 --> 00:04:05.221
you're probably getting it.

82
00:04:05.221 --> 00:04:06.878
Dont really care if you're not,

83
00:04:06.878 --> 00:04:11.033
we're just gonna keep sending it until
yours has stopped or connection is closed.

84
00:04:11.033 --> 00:04:15.098
Whereas TCP is much slower,
it's much more reliable.

85
00:04:15.098 --> 00:04:19.447
You can run video chat over TCP, but
because video chat is actually very or

86
00:04:19.447 --> 00:04:23.528
video streaming or music streaming
is very bandwidth-intensive.

87
00:04:23.528 --> 00:04:26.113
Running it over TCP is
gonna be very expensive and

88
00:04:26.113 --> 00:04:29.721
it'll take up a lot more bandwidth
than is necessary, versus UDP.

89
00:04:29.721 --> 00:04:32.179
But if I had, say,
I don't know, a webpage,

90
00:04:32.179 --> 00:04:36.401
I'm not gonna send it over UDP because I
need every single one of those bytes to be

91
00:04:36.401 --> 00:04:40.332
reassembled in the correct order to
make sure my webpage comes together.

92
00:04:40.332 --> 00:04:42.743
So that's why these two
different protocols exist.

93
00:04:42.743 --> 00:04:45.209
Different purposes,
different complexities.

94
00:04:45.209 --> 00:04:47.601
It's a trade off between the two.

95
00:04:47.601 --> 00:04:52.669
And there's something called
ICMP Internet Control Message Protocol

96
00:04:52.669 --> 00:04:55.375
that's built over either TCP or UDP.

97
00:04:55.375 --> 00:04:57.855
Generally we send over TCP but
it doesn't really matter.

98
00:04:57.855 --> 00:05:00.495
It's just a protocol on
top of the other ones.

99
00:05:00.495 --> 00:05:02.046
That's how pain works.

100
00:05:02.046 --> 00:05:04.131
That's how traceroute works.

101
00:05:04.131 --> 00:05:08.357
These are just The Internet Control
Message Protocol just saying like, hey,

102
00:05:08.357 --> 00:05:09.262
what time is it?

103
00:05:09.262 --> 00:05:11.307
Or hey, are you still there?

104
00:05:11.307 --> 00:05:12.484
We're not sending data.

105
00:05:12.484 --> 00:05:13.766
It's just checking into the server itself.

106
00:05:13.766 --> 00:05:18.754
They don't actually provide any
useful information to us itself.

107
00:05:18.754 --> 00:05:22.533
Just yeah, more in the network tool side.

108
00:05:22.533 --> 00:05:25.505
And then all this happens
at a packet level.

109
00:05:25.505 --> 00:05:29.234
A packet is the smallest unit of
unit of data that can be transmitted

110
00:05:29.234 --> 00:05:30.176
over a network.

111
00:05:30.176 --> 00:05:37.297
Everything whether it's UDP or
TCP operates running through a packet.

112
00:05:37.297 --> 00:05:41.540
We won't go into packets,
that is a whole, that was,

113
00:05:41.540 --> 00:05:46.728
I don't know, like a few weeks in
my computer science education.

114
00:05:46.728 --> 00:05:48.315
But we won't go into packets, but

115
00:05:48.315 --> 00:05:50.901
packets are really interesting
how they are composed.

116
00:05:50.901 --> 00:05:55.689
How they say, hey, I'm gonna send you a 10
gigabyte file or something like that.

117
00:05:55.689 --> 00:05:59.246
How are those broken down into packets
that are really, really tiny chunks

118
00:05:59.246 --> 00:06:02.698
of information, sometimes kilobytes,
sometimes smaller, bigger.

119
00:06:02.698 --> 00:06:07.840
There's a whole protocol and
standards for doing that.

120
00:06:07.840 --> 00:06:12.039
The fun thing about ICMP in the early
days there's something called the ping

121
00:06:12.039 --> 00:06:12.634
of death.

122
00:06:12.634 --> 00:06:16.613
Which is, and I'll admit,
I was not a good person before.

123
00:06:16.613 --> 00:06:19.667
Still not a good person today but I was
less a good person when I was younger and

124
00:06:19.667 --> 00:06:21.686
into computers but
maybe is how I got good at them.

125
00:06:21.686 --> 00:06:26.286
But I could spin on my computer, I could
ping somebody because every time I ping

126
00:06:26.286 --> 00:06:29.018
someone they have to
respond back with a pong.

127
00:06:29.018 --> 00:06:31.137
So ping pong, ping pong, ping pong.

128
00:06:31.137 --> 00:06:36.278
I could fire off a thousand pings
in real life much more than that.

129
00:06:36.278 --> 00:06:37.813
And they have to respond every time, but

130
00:06:37.813 --> 00:06:40.352
every time they respond it's using
just a little bit of their CPU.

131
00:06:40.352 --> 00:06:43.187
So it's possible in the old
days to just ping somebody and

132
00:06:43.187 --> 00:06:46.966
get all of your buddies to ping a website
and just take it down very easily just

133
00:06:46.966 --> 00:06:50.835
using ping, cuz you're forcing
the computer to respond every single time.

134
00:06:50.835 --> 00:06:54.923
That's no longer a thing we
can deal with pings of death.

135
00:06:54.923 --> 00:06:59.437
Another trick was with even with pings
was, I'm gonna ping you from my IP

136
00:06:59.437 --> 00:07:02.989
address but I'm gonna spoof
that header in the packet and

137
00:07:02.989 --> 00:07:05.883
say it's actually coming
from this address.

138
00:07:05.883 --> 00:07:09.734
So I can say ping google.com or
something like that.

139
00:07:09.734 --> 00:07:13.627
Google's gonna respond with a pong
to an entirely different IP address.

140
00:07:13.627 --> 00:07:17.554
So I can flood a victim or someone I'm
trying to go after, trying to take down,

141
00:07:17.554 --> 00:07:18.937
and I'm not even doing it.

142
00:07:18.937 --> 00:07:20.347
I'm just telling another server to do it.

143
00:07:20.347 --> 00:07:23.888
And we actually see a lot of,
we don't see this as much anymore,

144
00:07:23.888 --> 00:07:25.929
cuz we have ways of mitigating that.

145
00:07:25.929 --> 00:07:30.264
But we see that a lot with unpatched
routers, things like that used for

146
00:07:30.264 --> 00:07:34.675
DDoS attacks were DDoS is
a Distributed Denial-of-Service attack or

147
00:07:34.675 --> 00:07:36.303
just flooding computer.

148
00:07:36.303 --> 00:07:39.342
These days it's most often
caused by hacked servers or

149
00:07:39.342 --> 00:07:42.128
misconfigured routers
somewhere along the way.

150
00:07:42.128 --> 00:07:44.871
Okay, we talked about TCP UDP,
the handshake and

151
00:07:44.871 --> 00:07:46.906
all this is courtesy of Cloudflare.

152
00:07:46.906 --> 00:07:53.497
Cloudflare has excellent breakdowns of
really complex networking diagrams,

153
00:07:53.497 --> 00:07:58.608
things like that, and
they explain it in really plain terms so

154
00:07:58.608 --> 00:08:02.468
check out that link if
you want have even more.

155
00:08:02.468 --> 00:08:05.016
And the Internet is built
on the TCP/IP standard.

156
00:08:05.016 --> 00:08:09.138
We all collectively agree every single
piece of hardware, every single piece of

157
00:08:09.138 --> 00:08:13.270
networking equipment agrees on these
protocols and putting them all together.

158
00:08:13.270 --> 00:08:19.754
And again, fascinating we've come to this
consensus without anybody making us do it.

