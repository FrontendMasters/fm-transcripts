WEBVTT

1
00:00:00.000 --> 00:00:04.084
&gt;&gt; Jem: We're going create
a database using SQLite.

2
00:00:04.084 --> 00:00:08.657
We're going to write through it and
we want to write a visitor log for

3
00:00:08.657 --> 00:00:10.113
a WebSocket server.

4
00:00:10.113 --> 00:00:12.586
Remember that,
how we're just console logging data, but

5
00:00:12.586 --> 00:00:14.029
it's not really going anywhere.

6
00:00:14.029 --> 00:00:18.847
What we seem to a database
that way later with Aquarius.

7
00:00:18.847 --> 00:00:22.220
So we're gonna be using
something called SQLites.

8
00:00:22.220 --> 00:00:29.802
Sqlite, in my opinion,
is like one of the best databases around.

9
00:00:29.802 --> 00:00:33.566
It's not the most powerful,
it's not the fastest, but

10
00:00:33.566 --> 00:00:38.601
Sqlite is the most commonly used database
because it works on any platform.

11
00:00:38.601 --> 00:00:41.351
You don't have to install
a separate service or anything.

12
00:00:41.351 --> 00:00:43.829
You attach the database
to your application.

13
00:00:43.829 --> 00:00:46.669
Versus any other database you have to
create a separate service you have

14
00:00:46.669 --> 00:00:48.861
to maintain that with passwords and
all these things.

15
00:00:48.861 --> 00:00:54.381
So sqlite is portable, it can just attach
it to your application, use it anywhere.

16
00:00:54.381 --> 00:00:58.299
That's what we're gonna use it today,
if we use something like MySQL,

17
00:00:58.299 --> 00:01:02.423
we had set of MySQL and then we'd set
up password and it'll be a whole thing.

18
00:01:02.423 --> 00:01:04.556
We don't want to go there today.

19
00:01:04.556 --> 00:01:07.328
So we're gonna use SQLite.
So you can do this on your server,

20
00:01:07.328 --> 00:01:10.360
you can do this on VS Code and
let it pull in.

21
00:01:10.360 --> 00:01:15.268
But first thing you want to
do is npm install sqlite3.

22
00:01:15.268 --> 00:01:18.754
So I'm back in VS Code,
I'm in that index.ws or

23
00:01:18.754 --> 00:01:23.358
dash WSJS file that express server
we created With WebSockets.

24
00:01:23.358 --> 00:01:25.366
Now, we're on the database portion.

25
00:01:25.366 --> 00:01:31.944
So I want to just make sure I have
a note of that, so end WebSockets,

26
00:01:31.944 --> 00:01:37.593
just to make it easier to reason
about a little bit later.

27
00:01:37.593 --> 00:01:41.354
And we're going to say begin database.

28
00:01:48.755 --> 00:01:50.702
&gt;&gt; Jem: Then I wanna make
sure I have sqlite installed,

29
00:01:50.702 --> 00:01:52.024
cuz I always make this mistake.

30
00:01:52.024 --> 00:01:54.838
So npm i sqlite3.

31
00:02:08.520 --> 00:02:10.933
&gt;&gt; Jem: Okay, everybody here so far?

32
00:02:13.318 --> 00:02:14.476
&gt;&gt; Jem: So we didn't do much.

33
00:02:14.476 --> 00:02:18.283
We only npm installed sqlite3 so far.

34
00:02:23.662 --> 00:02:26.789
&gt;&gt; Jem: All right, and I will show you how
easy it is to use this database versus,

35
00:02:26.789 --> 00:02:30.483
well, you won't know about the other ones
because we're not going to go into MySQL,

36
00:02:30.483 --> 00:02:31.790
Redis or anything like that.

37
00:02:31.790 --> 00:02:34.154
But sqlite is just a delight to use.

38
00:02:34.154 --> 00:02:37.809
So, first thing we have to do is
we have to import the library.

39
00:02:37.809 --> 00:02:44.140
So we're gonna say imports or
cons, sqlite equals require.

40
00:02:47.386 --> 00:02:53.210
&gt;&gt; Jem: sqlite3, and
we're just gonna set up a new database.

41
00:02:53.210 --> 00:02:58.434
So we're gonna say const db equals

42
00:02:58.434 --> 00:03:05.290
new sqlite database, and it's a database.

43
00:03:05.290 --> 00:03:08.188
And for this one,
we're gonna put it in memory.

44
00:03:08.188 --> 00:03:15.697
So we just say call in memory,
&gt;&gt; Jem: Colon,

45
00:03:19.737 --> 00:03:20.629
&gt;&gt; Jem: So that's pretty useful.

46
00:03:20.629 --> 00:03:21.915
A lot of times you're gonna create a file.

47
00:03:21.915 --> 00:03:28.856
If you want to say, write this
actually to the hard disk as a file,

48
00:03:28.856 --> 00:03:36.319
you would say./.fullstackfrontend.db or
something like that.

49
00:03:39.126 --> 00:03:41.382
&gt;&gt; Jem: It doesn't have to be a.db file.

50
00:03:41.382 --> 00:03:42.113
It can actually be anything.

51
00:03:42.113 --> 00:03:45.258
The.db is just to let us know it's
a database when we see it a little

52
00:03:45.258 --> 00:03:45.829
bit later.

53
00:03:45.829 --> 00:03:49.001
But for now we're going to use
memory just to make things a little

54
00:03:49.001 --> 00:03:52.546
bit easier to reason about, but
it's really easy to use the file as well

55
00:03:59.438 --> 00:04:00.505
&gt;&gt; Jem: Okay, yes.

56
00:04:00.505 --> 00:04:04.021
&gt;&gt; Student 1: Because we're doing it in
memory whenever we restart the server,

57
00:04:04.021 --> 00:04:06.425
the database will be
scrapped from scratch.

58
00:04:06.425 --> 00:04:08.404
&gt;&gt; Jem: It'll be gone.
That's correct, yeah.

59
00:04:08.404 --> 00:04:12.571
And you're saying, hey, for writing
these a memory, why don't we just use

60
00:04:12.571 --> 00:04:16.825
a POJO a plain old JavaScript object to
save save memory that you can do that to?

61
00:04:16.825 --> 00:04:20.859
The challenge with that is the database
will be easy to query because we're saving

62
00:04:20.859 --> 00:04:22.266
things in a structured way.

63
00:04:22.266 --> 00:04:26.166
You can do the same thing with a Say, like
a map or a set in JavaScript and make it

64
00:04:26.166 --> 00:04:30.494
really structured, but the amount of code
it takes to get that structure down right?

65
00:04:30.494 --> 00:04:33.135
It's just easier to write
a database in this case.

66
00:04:33.135 --> 00:04:37.168
But yes, when you write things in memory,
it's gonna be the fastest way of doing

67
00:04:37.168 --> 00:04:40.210
things, but it'll be gone
whenever we restart the server.

68
00:04:40.210 --> 00:04:40.780
Good call out.

69
00:04:40.780 --> 00:04:45.818
So next thing we wanna do is we
actually need to set up a table.

70
00:04:45.818 --> 00:04:49.312
And we're gonna set up a table every time
the server starts again cuz it's all

71
00:04:49.312 --> 00:04:50.236
written in memory.

72
00:04:50.236 --> 00:04:52.413
So we don't have to do any
checks if the table exists.

73
00:04:52.413 --> 00:04:59.376
So we're gonna say db.serialize,
that's just a function.

74
00:04:59.376 --> 00:05:01.926
We're gonna close it off here.

75
00:05:07.525 --> 00:05:11.291
&gt;&gt; Jem: And serialize command just ensures
that the database is set up before we run

76
00:05:11.291 --> 00:05:12.017
any queries.

77
00:05:12.017 --> 00:05:14.356
So it's going to run this first and
make sure the tables are set up.

78
00:05:14.356 --> 00:05:18.210
So that way we're not trying to write
to a table that doesn't exist just yet.

79
00:05:18.210 --> 00:05:22.526
So next thing we need to do,
we're gonna write some SQL.

80
00:05:22.526 --> 00:05:24.655
Hang on, hang on to yourself.

81
00:05:24.655 --> 00:05:25.884
We're gonna write some SQL.

82
00:05:25.884 --> 00:05:29.180
It's gonna look a little weird,
but it'll make sense of the time.

83
00:05:29.180 --> 00:05:30.429
We're all done.

84
00:05:30.429 --> 00:05:32.152
We're just gonna add a little bit of SQL.

85
00:05:32.152 --> 00:05:34.909
Not enough to make your
head hurt hopefully.

86
00:05:34.909 --> 00:05:39.881
So whenever we wanna run a SQL command,
we need to use db.run and

87
00:05:39.881 --> 00:05:42.378
that's gonna let us write SQL.

88
00:05:42.378 --> 00:05:46.771
And I'm gonna put the back tick in here
because it's gonna be a multi-line string

89
00:05:46.771 --> 00:05:48.435
just to make it easier to read.

90
00:05:48.435 --> 00:05:49.738
It can be one line.

91
00:05:49.738 --> 00:05:51.247
I like to be easy to read.

92
00:05:51.247 --> 00:05:54.004
So we're gonna say create table.

93
00:05:57.216 --> 00:06:00.999
&gt;&gt; Jem: And the actual SQL commands,
by convention, you write them in Caps.

94
00:06:00.999 --> 00:06:03.983
So you understand the difference
between what's input and

95
00:06:03.983 --> 00:06:06.975
what is actually part of
the programming language itself.

96
00:06:06.975 --> 00:06:09.557
And we wanna create table called visitors,

97
00:06:09.557 --> 00:06:12.780
cuz we're logging the visitors
that come to our site.

98
00:06:12.780 --> 00:06:17.570
So to create visitors,
we need to create the actual fields.

99
00:06:17.570 --> 00:06:19.883
Remember, fields were the columns.

100
00:06:19.883 --> 00:06:23.023
So we're gonna put a parenthesis there.

101
00:06:23.023 --> 00:06:25.687
I'm just gonna make this a new
line to make it easier to read.

102
00:06:25.687 --> 00:06:30.233
And we really only need two things for
this really simple table.

103
00:06:30.233 --> 00:06:31.806
We need the counts.

104
00:06:31.806 --> 00:06:34.246
So we want to count how
many people are here.

105
00:06:34.246 --> 00:06:37.350
And we have to give it a type,
because SQL is structured,

106
00:06:37.350 --> 00:06:40.082
we're dealing with
relational databases here.

107
00:06:40.082 --> 00:06:42.720
So data's always structured and
always has a type.

108
00:06:46.963 --> 00:06:50.088
&gt;&gt; Jem: And we probably want to know
what time things are happening.

109
00:06:50.088 --> 00:06:52.544
So time in SQLite is just a text.

110
00:06:52.544 --> 00:06:53.773
It's nothing fancy.

111
00:06:53.773 --> 00:06:57.978
If you're using, say, MySQL, the time
has its own type, which is useful for

112
00:06:57.978 --> 00:07:01.614
running built-in commands to make
it easy for querying types, but

113
00:07:01.614 --> 00:07:03.550
having do any sort of conversions.

114
00:07:03.550 --> 00:07:07.878
But SQLite is pretty bare-bone,
which is what we want in this case.

115
00:07:12.975 --> 00:07:13.892
&gt;&gt; Jem: Yeah, question.

116
00:07:13.892 --> 00:07:17.179
&gt;&gt; Student 2: Could we also use
time like a Unix timestamp or

117
00:07:17.179 --> 00:07:22.904
the JavaScript now command, that would
give us like an integer value of time?

118
00:07:22.904 --> 00:07:26.803
&gt;&gt; Jem: Yeah, however,
SQLite has that built in into it.

119
00:07:26.803 --> 00:07:30.373
So we can just say now and
it'll write it in time as a text format,

120
00:07:30.373 --> 00:07:31.708
which is pretty handy.

121
00:07:31.708 --> 00:07:34.060
But yeah, you can use JavaScript now,
et cetera,

122
00:07:34.060 --> 00:07:37.249
but databases almost always have
their own way of dealing with time.

123
00:07:37.249 --> 00:07:42.481
Because anybody's ever had to
deal with like leap years or

124
00:07:42.481 --> 00:07:45.915
what's it called like leap seconds.

125
00:07:45.915 --> 00:07:49.800
All these like nuances or

126
00:07:49.800 --> 00:07:55.170
my mind is blinking on time zones.

127
00:07:55.170 --> 00:07:59.676
Time Zones is like a really hard problem
in computer science because like I wrote

128
00:07:59.676 --> 00:08:02.110
a database at 5 o'clock on Eastern Time.

129
00:08:02.110 --> 00:08:05.649
But I'm reading it as a server
it's written in West, and

130
00:08:05.649 --> 00:08:07.659
I'm in California reading it.

131
00:08:07.659 --> 00:08:09.034
What time did the thing actually happen?

132
00:08:09.034 --> 00:08:11.890
The time when it is written, or
the place where the server is at, or

133
00:08:11.890 --> 00:08:12.971
the place where I'm at.

134
00:08:12.971 --> 00:08:14.803
It's a whole hard problem.

135
00:08:14.803 --> 00:08:18.494
Google has an entire engineering team
dedicated to just dealing with time

136
00:08:18.494 --> 00:08:20.409
because it's that hard of a problem.

137
00:08:20.409 --> 00:08:24.917
And most people just use UTC, and that's
what probably we should all use, but

138
00:08:24.917 --> 00:08:27.804
everybody's got to have
their own timezone now.

139
00:08:27.804 --> 00:08:30.248
That's a whole different topic.

140
00:08:30.248 --> 00:08:33.593
So we have this command to create a table,
and

141
00:08:33.593 --> 00:08:38.798
it's gonna have two columns,
count in integer or accounts and time.

142
00:08:38.798 --> 00:08:43.697
And the serializer is just gonna make sure
our database is set up before any queries

143
00:08:43.697 --> 00:08:44.693
are ready to go.

144
00:08:44.693 --> 00:08:47.952
So now,
I'm gonna create a shorthand function so

145
00:08:47.952 --> 00:08:51.376
I don't have to repeat my
SQL queries over and over.

146
00:08:51.376 --> 00:08:54.018
I'm gonna call it getCounts.

147
00:08:54.018 --> 00:09:00.612
And this will just query my visitor
table to let me get the counts.

148
00:09:00.612 --> 00:09:03.918
That way I'll have to rewrite
select star from visitors, etc.

149
00:09:03.918 --> 00:09:06.616
So we're gonna use that DB command again.

150
00:09:06.616 --> 00:09:07.924
This time we're gonna say each,

151
00:09:07.924 --> 00:09:10.173
because we're tryna get
the output of every single row.

152
00:09:10.173 --> 00:09:11.843
We wanna count that together.

153
00:09:11.843 --> 00:09:16.300
And I wanna know how many visitors
were at every single time interval

154
00:09:16.300 --> 00:09:17.482
that we specify.

155
00:09:17.482 --> 00:09:23.211
So we're gonna say, DB each, which is
gonna say, every row, do something.

156
00:09:23.211 --> 00:09:29.241
So DB each, and we're gonna write
a start function, old habit.

157
00:09:29.241 --> 00:09:30.952
We're gonna write a basic query here.

158
00:09:30.952 --> 00:09:37.079
So we're gonna say select
star from visitors.

159
00:09:37.079 --> 00:09:38.890
Remember, select star
is just that wildcard.

160
00:09:38.890 --> 00:09:41.570
Give me every single field in that row.

161
00:09:41.570 --> 00:09:45.647
I know I can't play visitors, visitors.

162
00:09:51.963 --> 00:09:53.777
&gt;&gt; Jem: I promise I can type.

163
00:09:53.777 --> 00:09:55.646
And the second argument
is gonna be a function.

164
00:09:55.646 --> 00:09:58.563
You can call the function to an arrow
function, doesn't really matter.

165
00:10:03.577 --> 00:10:05.006
&gt;&gt; Jem: And
the first argument is gonna be error.

166
00:10:05.006 --> 00:10:06.572
We don't really have to
deal with that too much.

167
00:10:06.572 --> 00:10:09.386
But really what we really want is the row.

168
00:10:09.386 --> 00:10:13.311
And we're just gonna log the row, oops.

169
00:10:26.641 --> 00:10:27.754
&gt;&gt; Jem: Yeah, not bad.

170
00:10:27.754 --> 00:10:30.155
And this saves us from having to write
the SQL query every single time.

171
00:10:30.155 --> 00:10:31.470
We just wrap it in a function.

172
00:10:31.470 --> 00:10:34.926
There's also something called prepared
statements, we can save these and

173
00:10:34.926 --> 00:10:36.119
just execute them later.

174
00:10:36.119 --> 00:10:37.827
That's almost always what you do.

175
00:10:37.827 --> 00:10:41.976
You never, never,
never wanna write freehand SQL or

176
00:10:41.976 --> 00:10:46.230
allow people to write freehand
SQL like your clients.

177
00:10:46.230 --> 00:10:47.461
Why is that?

178
00:10:47.461 --> 00:10:48.323
&gt;&gt; Student 2: Drop your tables.

179
00:10:48.323 --> 00:10:50.338
&gt;&gt; Jem: Yes,
if someone has access to your database,

180
00:10:50.338 --> 00:10:52.414
that's almost as bad as
access to your server.

181
00:10:52.414 --> 00:10:54.658
They can drop tables,
they can read all your data.

182
00:10:54.658 --> 00:10:58.006
In fact, it's even better cuz they
don't have to get into your SSH key and

183
00:10:58.006 --> 00:11:01.046
read access, all that mess,
you let them into your data storage.

184
00:11:01.046 --> 00:11:06.653
So we never run SQL directly,
this is the learning experience here.

185
00:11:06.653 --> 00:11:08.094
We always have prepared statements.

186
00:11:08.094 --> 00:11:11.962
So that way, it's a finite set of
instructions that people can run.

187
00:11:11.962 --> 00:11:15.726
When it comes to MySQL and Redis or
Mongo or some of the other databases,

188
00:11:15.726 --> 00:11:19.305
there's always user permissions,
what people are allowed to do,

189
00:11:19.305 --> 00:11:21.024
similar to the Linux versions.

190
00:11:21.024 --> 00:11:24.111
But SQLite has none of that,
because we don't need to go that far.

191
00:11:24.111 --> 00:11:25.549
It's a simple example.

192
00:11:25.549 --> 00:11:28.722
And that's why it's the best database,
cuz it's really, really simple.

193
00:11:28.722 --> 00:11:33.651
But in real life, database security
is very, very, very, very important.

194
00:11:37.064 --> 00:11:42.343
&gt;&gt; Jem: The last command we're gonna run
is, we're gonna call this one shutdown DB.

195
00:11:45.536 --> 00:11:46.962
&gt;&gt; Jem: And we're writing a function here.

196
00:11:50.539 --> 00:11:52.307
&gt;&gt; Jem: Because every
time we use a database,

197
00:11:52.307 --> 00:11:54.749
we need to close it by the time
the server is all done.

198
00:11:54.749 --> 00:11:58.145
We never wanna leave a database connection
open because it'll just stay open

199
00:11:58.145 --> 00:11:58.885
persistently.

200
00:11:58.885 --> 00:12:01.005
Then you're gonna run out of
connections to your database.

201
00:12:01.005 --> 00:12:04.758
So whenever we're done, the server's done,
we close our database connection.

202
00:12:04.758 --> 00:12:06.936
The same way we do when we wrote a server,

203
00:12:06.936 --> 00:12:11.247
we ended that request because a server
doesn't know when you're done with it.

204
00:12:11.247 --> 00:12:12.929
So we have to be very explicit here.

205
00:12:12.929 --> 00:12:17.024
So here, before we shut down, I wanna say,

206
00:12:17.024 --> 00:12:23.357
give me the final counts for
the day of all the visitors to my server.

207
00:12:23.357 --> 00:12:28.678
So we'll just call it getCounts,
which will console log out all the rows.

208
00:12:28.678 --> 00:12:32.160
And then we'll add a nice
little helper here,

209
00:12:32.160 --> 00:12:36.454
a nice little log that just says,
shutting down, oops.

210
00:12:41.074 --> 00:12:41.659
&gt;&gt; Jem: Db.

211
00:12:45.214 --> 00:12:46.912
&gt;&gt; Jem: And then we just call db.close.

212
00:12:48.366 --> 00:12:51.115
&gt;&gt; Jem: But when we call shutdownDB,
we see cuz there's

213
00:12:51.115 --> 00:12:55.886
syntax highlighting it saying, hey, you
wrote this function, you never call it.

214
00:12:55.886 --> 00:12:59.677
All we need to do is,
we need to catch the interrupt signal.

215
00:12:59.677 --> 00:13:03.714
So that's the Ctrl+C is known as a signal
interrupts through our process, and

216
00:13:03.714 --> 00:13:05.289
you'll see a call to seconds.

217
00:13:05.289 --> 00:13:08.488
And we just need to catch that and
then call shutdown command on that.

218
00:13:08.488 --> 00:13:09.459
Other than that,

219
00:13:09.459 --> 00:13:13.872
the server doesn't know when it's getting
killed cuz it's just it just stops.

220
00:13:13.872 --> 00:13:17.438
That'd be kind of ridiculous if it's
like hey, hey, hey, you need to stop and

221
00:13:17.438 --> 00:13:19.568
the server's like, well, I'm not done yet,

222
00:13:19.568 --> 00:13:21.822
let me finish my thing cuz
that would be annoying.

223
00:13:21.822 --> 00:13:23.819
Cuz if you're trying to kill a server,
you want it to be done.

224
00:13:23.819 --> 00:13:28.071
So we need to catch that signal
interrupts before anything happens.

225
00:13:28.071 --> 00:13:33.565
And right when we're unloading the server,
we wanna dump the information we need.

226
00:13:33.565 --> 00:13:36.665
So we're gonna do that with
what's called a listener, and

227
00:13:36.665 --> 00:13:38.406
we talked a bit about listeners.

228
00:13:38.406 --> 00:13:41.227
But on this one,
we're gonna use a process listener.

229
00:13:41.227 --> 00:13:43.997
So I'm gonna put it right here.

230
00:13:43.997 --> 00:13:52.363
We can say process.on,
&gt;&gt; Jem: And

231
00:13:52.363 --> 00:13:56.578
SIGINT is signal interrupts,
the control C.

232
00:13:59.853 --> 00:14:04.232
&gt;&gt; Jem: Make an anonymous function
to respond to do something.

233
00:14:04.232 --> 00:14:07.327
So on SIGINT, we wanna make sure we
shut down the server gracefully.

234
00:14:07.327 --> 00:14:13.133
So we call server.close just to
clean up any loose connections.

235
00:14:13.133 --> 00:14:16.853
In that itself,
we can put a function to call.

236
00:14:16.853 --> 00:14:19.062
Now, that one we're gonna
call the shutdownDB.

237
00:14:21.930 --> 00:14:25.530
&gt;&gt; Jem: Okay, we're almost there.

238
00:14:25.530 --> 00:14:26.716
What are we missing though?

239
00:14:26.716 --> 00:14:31.185
So we created a database, we created
a table, we make sure everything's cleaned

240
00:14:31.185 --> 00:14:35.164
up nicely and it's gonna dump the data
to the console before we close it.

241
00:14:35.164 --> 00:14:37.496
What did we forget to do?

242
00:14:37.496 --> 00:14:41.685
&gt;&gt; Student 3: [INAUDIBLE]
&gt;&gt; Jem: Yeah,

243
00:14:41.685 --> 00:14:43.508
we never actually wrote
any data to the database.

244
00:14:43.508 --> 00:14:46.146
We have this beautiful database all
set up, we have the columns, but

245
00:14:46.146 --> 00:14:47.565
we didn't actually write any data.

246
00:14:47.565 --> 00:14:50.506
So let's do that inside our
websocket server itself, or

247
00:14:50.506 --> 00:14:52.357
inside our websocket connection.

248
00:14:52.357 --> 00:14:54.728
So whenever a connection happens,

249
00:14:54.728 --> 00:14:58.845
we wanna log the total number
of visitors in the current time.

250
00:14:58.845 --> 00:15:04.201
So this we could probably wrap as
a function, but we'll just do it in here.

251
00:15:04.201 --> 00:15:08.238
So we'll say dbrun.

252
00:15:08.238 --> 00:15:14.006
So to insert something into the database,
we say insert, oops, caps lock,

253
00:15:16.959 --> 00:15:20.477
&gt;&gt; Jem: INTO the table, visitors.

254
00:15:25.736 --> 00:15:32.654
&gt;&gt; Jem: We're gonna insert these two
columns, fields, counts, and time

255
00:15:40.788 --> 00:15:44.125
&gt;&gt; Jem: And let's close that off.

256
00:15:44.125 --> 00:15:45.599
Next, we need to insert the values.

257
00:15:45.599 --> 00:15:51.173
And this is where SQL's kind of, it's less
than intuitive that you have to do this.

258
00:15:51.173 --> 00:15:55.769
Oops, make this multi line
look a little easier.

259
00:15:58.208 --> 00:16:00.163
&gt;&gt; Jem: So
we're inserting to the count time,

260
00:16:00.163 --> 00:16:03.608
so we have to call values as
the actual things we're inserting into.

261
00:16:07.948 --> 00:16:12.606
&gt;&gt; Jem: And the values are the total
number of clients, so that counts.

262
00:16:12.606 --> 00:16:16.436
And we save that to a variable up here,
so this is called num clients.

263
00:16:21.369 --> 00:16:24.698
&gt;&gt; Jem: And next value is now,
however that's a built-in.

264
00:16:24.698 --> 00:16:25.667
We talked about time and

265
00:16:25.667 --> 00:16:28.049
how databases that have their
own ways of dealing with it.

266
00:16:28.049 --> 00:16:30.742
So that's actually a built-in
function into SQL Lite.

267
00:16:30.742 --> 00:16:36.392
So let's call daytime as a function,

268
00:16:36.392 --> 00:16:40.107
and we'll just say now.

269
00:16:45.642 --> 00:16:49.386
&gt;&gt; Student 2: Since date time is
a built-in function should that be

270
00:16:49.386 --> 00:16:54.459
capitalized, or is it particularly,
like is all caps specifically for

271
00:16:54.459 --> 00:16:57.882
things that are immediately
related to tables?

272
00:16:57.882 --> 00:17:01.750
&gt;&gt; Jem: Yeah, all caps is generally
convention, you don't have to do it, but

273
00:17:01.750 --> 00:17:05.622
it's just for the SQL commands because
it makes it a lot easier to read.

274
00:17:05.622 --> 00:17:08.805
And you're like what's my
data versus what's built in.

275
00:17:08.805 --> 00:17:14.573
datetime is a function so it's
lowercase generally, but good question.

276
00:17:14.573 --> 00:17:17.756
So now, the moment of truth.

277
00:17:17.756 --> 00:17:19.508
Does this all work?

278
00:17:19.508 --> 00:17:21.733
I don't know,
we'll see where we made a mistake, or

279
00:17:21.733 --> 00:17:23.716
where I made a mistake
somewhere along the way.

280
00:17:23.716 --> 00:17:25.590
So let's fire this up.

281
00:17:25.590 --> 00:17:32.115
We say node index WS.

282
00:17:32.115 --> 00:17:33.698
No errors so far.

283
00:17:33.698 --> 00:17:37.972
We can jump back to my website,
but we're on localhost.

284
00:17:40.595 --> 00:17:44.248
&gt;&gt; Jem: Something went wrong,
it just crashed, let's find out.

285
00:17:46.895 --> 00:17:47.791
&gt;&gt; Jem: A syntax error.

286
00:17:51.763 --> 00:17:58.031
&gt;&gt; Jem: Error one SQLITE ERROR near time,
where is time?

287
00:17:58.031 --> 00:18:02.713
&gt;&gt; Student 3: Also on
the line 56 [INAUDIBLE].

288
00:18:02.713 --> 00:18:03.819
&gt;&gt; Jem: Line 56.

289
00:18:08.726 --> 00:18:13.223
&gt;&gt; Student 3: [INAUDIBLE]
&gt;&gt; Jem: Looks right.

290
00:18:13.223 --> 00:18:20.397
&gt;&gt; Student 3: [INAUDIBLE]
&gt;&gt; Student 3: 36?

291
00:18:20.397 --> 00:18:24.128
&gt;&gt; Jem: It's the little
things that'll get you.

292
00:18:24.128 --> 00:18:25.295
It's got a comma.

293
00:18:28.757 --> 00:18:30.253
&gt;&gt; Jem: I knew it, it's always something.

294
00:18:30.253 --> 00:18:32.491
That's why we do this together,
we do it live.

295
00:18:32.491 --> 00:18:36.476
&gt;&gt; Student 3: Before you,
go back and check line 66 also.

296
00:18:36.476 --> 00:18:38.243
&gt;&gt; Jem: 66.

297
00:18:40.343 --> 00:18:46.703
&gt;&gt; Student 3: [INAUDIBLE]
&gt;&gt; Jem: Good catch.

298
00:18:46.703 --> 00:18:47.752
&gt;&gt; Student 3: Yeah, [INAUDIBLE].

299
00:18:47.752 --> 00:18:51.072
&gt;&gt; Jem: Good catch, chat.

300
00:18:51.072 --> 00:18:53.279
All right, let's try this again.

301
00:18:53.279 --> 00:18:55.470
All right, back to our browser,

302
00:19:02.770 --> 00:19:03.324
&gt;&gt; Jem: All right,

303
00:19:03.324 --> 00:19:05.826
well, it didn't crash this time,
so that's good.

304
00:19:05.826 --> 00:19:09.707
Let me open another window.

305
00:19:09.707 --> 00:19:11.378
Why did it crash there?

306
00:19:11.378 --> 00:19:12.115
That's a new one.

307
00:19:12.115 --> 00:19:14.462
So it worked the first time,
it didn't work the second time, so

308
00:19:14.462 --> 00:19:15.555
there must be another error.

309
00:19:17.373 --> 00:19:19.599
&gt;&gt; Jem: Table visitor has no column time.

310
00:19:19.599 --> 00:19:23.719
&gt;&gt; Student 1: If we crash
the server ungracefully,

311
00:19:23.719 --> 00:19:30.684
we need to remake the table,
cuz we didn't delete it properly.

312
00:19:30.684 --> 00:19:33.823
&gt;&gt; Jem: Because it's all sort of memory
the minute the server goes down,

313
00:19:33.823 --> 00:19:35.716
it's gonna just be erased for memory.

314
00:19:35.716 --> 00:19:38.153
That's why we're using the memory and
not the db,

315
00:19:38.153 --> 00:19:41.569
otherwise we'd have to check if
the table existed and then rebuild it.

316
00:19:41.569 --> 00:19:43.366
We could do it, it's just another command.

317
00:19:43.366 --> 00:19:47.726
&gt;&gt; Student 1: I'm getting an error
that table visitors already exists.

318
00:19:47.726 --> 00:19:51.019
&gt;&gt; Jem: Man, the comma again,
it's the little things.

319
00:19:51.019 --> 00:19:55.106
It's the little things that'll get you,
especially when writing SQL.

320
00:19:55.106 --> 00:19:57.752
All right, let's try this again.

321
00:19:57.752 --> 00:20:00.498
Big money, big money,
no whammy, no whammy.

322
00:20:00.498 --> 00:20:02.570
All right, it didn't crash.

323
00:20:02.570 --> 00:20:04.253
Let's try opening another one.

324
00:20:04.253 --> 00:20:05.954
Two visitors, it didn't crash.

325
00:20:05.954 --> 00:20:09.776
Okay, so I'm already doing
better than I did before.

326
00:20:09.776 --> 00:20:11.797
So let's go ahead and stop that server and

327
00:20:11.797 --> 00:20:14.287
see if we actually wrote
anything to the database.

328
00:20:14.287 --> 00:20:16.593
So I'm going to open VS code again.

329
00:20:16.593 --> 00:20:21.367
Ctrl+C is gonna give
it a signal interrupt.

330
00:20:21.367 --> 00:20:24.643
I did something wrong here
cuz the signal isn't working.

331
00:20:27.079 --> 00:20:30.435
&gt;&gt; Jem: Max listeners event leak,
so there's a memory leak somewhere.

332
00:20:30.435 --> 00:20:32.890
That means I didn't close
something properly.

333
00:20:32.890 --> 00:20:34.727
Let me double check.

334
00:20:34.727 --> 00:20:39.649
So let me add,
&gt;&gt; Jem: Maybe a log in here,

335
00:20:46.324 --> 00:20:49.888
&gt;&gt; Jem: See if it even makes it this far,

336
00:20:49.888 --> 00:20:52.001
but we're stuck.

337
00:20:52.001 --> 00:20:54.801
But remember,
this whole slide on in case you get stuck.

338
00:20:54.801 --> 00:20:55.914
And what do we say we can do?

339
00:20:55.914 --> 00:21:00.795
We can get an exit back to my computer.

340
00:21:00.795 --> 00:21:02.842
We can pkill node, cuz remember,

341
00:21:02.842 --> 00:21:07.510
I said it's possible to get stuck in
a running process and now I can't kill it.

342
00:21:07.510 --> 00:21:11.110
Cuz I did something of but

343
00:21:11.110 --> 00:21:16.874
I'm gonna say pkill node,
which terminated my server.

344
00:21:16.874 --> 00:21:20.101
So we ran into a little bit of
trouble with the sigands and

345
00:21:20.101 --> 00:21:23.754
a race condition,
it seemed like something wasn't closing.

346
00:21:23.754 --> 00:21:26.283
But we dove in a little bit and
we found out,

347
00:21:26.283 --> 00:21:30.585
you know what the problem is is we
never close the WebSocket connection.

348
00:21:30.585 --> 00:21:34.140
That's actually keeping it all open,
so hence the sigand never works.

349
00:21:34.140 --> 00:21:36.898
So we never shut down
the database properly.

350
00:21:36.898 --> 00:21:40.693
So the way we can do that is we'll
go through all the clients, and

351
00:21:40.693 --> 00:21:45.351
right before the server shuts down let's
make sure we close the database out.

352
00:21:45.351 --> 00:21:51.605
So we can say WSS, same as we did before,
let's grab all the clients,

353
00:21:51.605 --> 00:21:56.908
and we'll say for each,
&gt;&gt; Jem: And

354
00:21:56.908 --> 00:22:01.254
we'll say function, and
give it a name, so easier debugging.

355
00:22:01.254 --> 00:22:04.742
And that's gonna take a client.

356
00:22:04.742 --> 00:22:13.075
It's gonna give us a client, and then,
&gt;&gt; Jem: So

357
00:22:13.075 --> 00:22:15.570
next, we just call client.close.

358
00:22:19.299 --> 00:22:22.643
&gt;&gt; Jem: So what this does is when we tell
the server with Ctrl+C we're gonna go

359
00:22:22.643 --> 00:22:26.326
through every single WebSocket connection,
and we're going to close it and

360
00:22:26.326 --> 00:22:28.215
then we're going to close the server.

361
00:22:28.215 --> 00:22:33.278
And then we're gonna shut down
the database, so let's see if that works.

362
00:22:35.811 --> 00:22:39.129
&gt;&gt; Jem: And
we'll open up our browser again,

363
00:22:39.129 --> 00:22:42.974
we'll write a few times, maybe a few more.

364
00:22:46.682 --> 00:22:47.990
&gt;&gt; Jem: And there we go.

365
00:22:52.280 --> 00:22:54.959
&gt;&gt; Jem: So it's tricky,
once you start catching signals and

366
00:22:54.959 --> 00:22:59.200
doing things like that, you have to think
really carefully about what's going on.

367
00:22:59.200 --> 00:23:01.555
So in this case we had
three open connections.

368
00:23:01.555 --> 00:23:04.014
So we had three types of open connections.

369
00:23:04.014 --> 00:23:06.857
We had the WebSocket connection
that was open to all the clients.

370
00:23:06.857 --> 00:23:10.494
We had the server connection that was
open, and we have the database connection,

371
00:23:10.494 --> 00:23:12.403
and it's shut down properly and cleanly.

372
00:23:12.403 --> 00:23:15.176
We had to run all of those.

373
00:23:15.176 --> 00:23:19.655
So that was a fun debugging experience.

374
00:23:19.655 --> 00:23:22.997
A little bit tricky, it's the edge
cases you have to look out for.

375
00:23:25.427 --> 00:23:29.986
&gt;&gt; Jem: So now we have our WebSocket
server, we're logging into the database.

376
00:23:29.986 --> 00:23:31.471
We have a database as well.

377
00:23:31.471 --> 00:23:34.613
Let's go ahead and
commit all that to our websites.

378
00:23:34.613 --> 00:23:38.618
So I'm gonna run git status as I do,
to see what's going on.

379
00:23:38.618 --> 00:23:44.264
Git add, git commits-am,

380
00:23:44.264 --> 00:23:48.973
Add database logging,

381
00:23:51.981 --> 00:23:54.284
&gt;&gt; Jem: And we'll just git push.

382
00:23:54.284 --> 00:23:57.704
And because of cron jobs running on
a server, it will pull it down and

383
00:23:57.704 --> 00:24:01.016
we'll have a database now running
our application really easy.

384
00:24:01.016 --> 00:24:03.704
And that's why I love SQL lite is
we don't have to install anything

385
00:24:03.704 --> 00:24:05.053
other than the SQL lite library.

386
00:24:05.053 --> 00:24:07.579
It doesn't require some service
to bring up the start and stop.

387
00:24:07.579 --> 00:24:11.574
We do that all from
the application itself.

388
00:24:11.574 --> 00:24:12.303
It's pretty cool.

389
00:24:12.303 --> 00:24:17.030
If you've ever worked with databases,
you know kind of what a pain they are,

390
00:24:17.030 --> 00:24:18.716
and this is so much easier.

391
00:24:18.716 --> 00:24:19.270
So we did it.

392
00:24:19.270 --> 00:24:22.993
We installed SQL Lite,
we set up a database, we set up the table,

393
00:24:22.993 --> 00:24:26.602
the columns, and then on connection
we say the visitor count.

394
00:24:26.602 --> 00:24:28.150
Three simple instructions, but

395
00:24:28.150 --> 00:24:31.195
it turns out it's a little bit
more complicated than we thought.

396
00:24:33.210 --> 00:24:35.839
&gt;&gt; Jem: And there's a link to slides.

397
00:24:35.839 --> 00:24:39.363
The fully working example if you need.

398
00:24:41.260 --> 00:24:42.988
&gt;&gt; Jem: And if you wanna play with MySQL,

399
00:24:42.988 --> 00:24:46.766
MySQL.js is probably the default if
you wanna get really complicated.

400
00:24:46.766 --> 00:24:51.138
But, depending on how this went for you,
you may not want it to have SQL yet for

401
00:24:51.138 --> 00:24:51.887
a long time.

402
00:24:51.887 --> 00:24:55.672
I don't blame you, it's for
some people, it's not for others.

