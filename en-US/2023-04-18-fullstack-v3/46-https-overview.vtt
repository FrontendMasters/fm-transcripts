WEBVTT

1
00:00:00.000 --> 00:00:03.104
Next, let's talk about HTTP.

2
00:00:03.104 --> 00:00:07.849
And during this we're gonna implement
HTTPS, which you really need.

3
00:00:07.849 --> 00:00:11.592
You can't run your website, you can't
run Web Bluetooth, you can't run service

4
00:00:11.592 --> 00:00:14.822
workers, you can't run a lot of things,
it can only be run over HTTPS.

5
00:00:14.822 --> 00:00:20.586
And then we're gonna set up HTTP2,
which is even better version of HTTP.

6
00:00:20.586 --> 00:00:21.256
The good news is,

7
00:00:21.256 --> 00:00:23.733
this will go a lot smoother because
we don't have to do that much.

8
00:00:23.733 --> 00:00:26.515
There are tools in place
that do all this for us.

9
00:00:26.515 --> 00:00:29.450
And that's the good thing about
using Nginx is it's a default.

10
00:00:29.450 --> 00:00:33.008
So, there's a lot of
tools that support that.

11
00:00:33.008 --> 00:00:34.808
So, we talked about HCP.

12
00:00:34.808 --> 00:00:37.343
The thing we all use,
the thing we all code in,

13
00:00:37.343 --> 00:00:40.738
the thing that is broadcasting
my signal today to everybody.

14
00:00:40.738 --> 00:00:43.718
Let's just the hypertext
transport protocol.

15
00:00:43.718 --> 00:00:48.055
HTTP is made up of two distinct
parts the request and the response,

16
00:00:48.055 --> 00:00:53.720
the request what's going to the server,
the response, what's being responded to.

17
00:00:53.720 --> 00:00:56.643
And here's what a request
actually looks like.

18
00:00:56.643 --> 00:00:58.521
It's got get, it's got the path.

19
00:00:58.521 --> 00:01:00.597
It's got the connection protocol type.

20
00:01:00.597 --> 00:01:02.686
So in this case, it's HTTP1.

21
00:01:02.686 --> 00:01:04.947
The hosts is me.

22
00:01:04.947 --> 00:01:07.229
And the rest are just headers.

23
00:01:07.229 --> 00:01:09.539
We talked a little bit
about headers earlier, but

24
00:01:09.539 --> 00:01:13.004
headers are just these little bits of
information that tell the request and

25
00:01:13.004 --> 00:01:15.046
the response what's actually happening.

26
00:01:15.046 --> 00:01:16.896
And these are really important.

27
00:01:16.896 --> 00:01:20.144
What are cookies?

28
00:01:20.144 --> 00:01:21.413
&gt;&gt; Baked goods.

29
00:01:21.413 --> 00:01:25.109
&gt;&gt; Yes, cookies are baked goods, but
a cookie is just another header.

30
00:01:25.109 --> 00:01:26.909
Nothing fancy about it.

31
00:01:26.909 --> 00:01:29.614
But these are all really powerful.

32
00:01:29.614 --> 00:01:32.969
For example,
the accept encoding gzip in br broadly.

33
00:01:32.969 --> 00:01:36.335
That just says, that's just
the browser saying like, hey, Nginx,

34
00:01:36.335 --> 00:01:39.032
if you want to send me back some gzip,
I can deal with it.

35
00:01:39.032 --> 00:01:42.087
If you want to send me back some Brotli,
I can deal with that too.

36
00:01:42.087 --> 00:01:44.683
And Brotli is just a different
type of compression.

37
00:01:44.683 --> 00:01:47.145
We didn't implement it today because
it's still not baked into Nginx, and

38
00:01:47.145 --> 00:01:48.541
we're not going to rebuild the binaries.

39
00:01:48.541 --> 00:01:49.732
It's a whole thing.

40
00:01:49.732 --> 00:01:51.542
It's a whole thing we
don't want to go into.

41
00:01:57.050 --> 00:02:00.593
And the request has the header,
it's a key value.

42
00:02:00.593 --> 00:02:02.077
So it's the key and the value.

43
00:02:02.077 --> 00:02:03.799
The host is the key.

44
00:02:03.799 --> 00:02:05.366
The value is jemyoung.com.

45
00:02:05.366 --> 00:02:06.840
User agent.

46
00:02:06.840 --> 00:02:10.097
We could have a whole course on user
agents and why they look like this today.

47
00:02:10.097 --> 00:02:14.150
We won't go into it, but we just
read the last part, which is Chrome,

48
00:02:14.150 --> 00:02:19.264
which is supposedly equivalent to Safari,
which is supposedly equivalent to WebKit.

49
00:02:19.264 --> 00:02:20.128
It's a whole thing.

50
00:02:20.128 --> 00:02:22.628
It's a whole thing we
won't go into either.

51
00:02:24.493 --> 00:02:27.754
Some common headers that you've seen and
dealt with is user agent,

52
00:02:27.754 --> 00:02:28.904
who's requesting me.

53
00:02:28.904 --> 00:02:33.247
This is important because certain
browsers don't support certain features.

54
00:02:33.247 --> 00:02:37.126
So we write the header or
we read the header and

55
00:02:37.126 --> 00:02:42.040
we say like, okay,
you can support native ES6 or ES7.

56
00:02:42.040 --> 00:02:42.689
That's fine.

57
00:02:42.689 --> 00:02:47.898
We won't have to run through Babel or
anything like that.

58
00:02:47.898 --> 00:02:52.556
Except what the device will handle,
it accepts certain types of files.

59
00:02:52.556 --> 00:02:55.787
The languages are really important,
we talked about scale.

60
00:02:55.787 --> 00:02:58.029
That's how we translate all our strings.

61
00:02:58.029 --> 00:03:00.679
So, we don't assume
everybody speaks English.

62
00:03:00.679 --> 00:03:04.173
So, we read their browser language
to understand what strings we need

63
00:03:04.173 --> 00:03:05.607
to translate back for them.

64
00:03:05.607 --> 00:03:08.840
The content type, set cookie,
is the header we talked about, but

65
00:03:08.840 --> 00:03:10.874
it sets cookies which are really useful.

66
00:03:10.874 --> 00:03:15.343
And then if we want a custom header
that we don't want to interfere step on

67
00:03:15.343 --> 00:03:18.421
the toes of any other known headers,
we use the x,

68
00:03:18.421 --> 00:03:23.213
x dash whatever is just a custom header,
you can set whatever you want there.

69
00:03:23.213 --> 00:03:26.831
The response looks a lot like the request,
usually a little bit shorter because

70
00:03:26.831 --> 00:03:29.760
we don't need to send back as
much information as many headers.

71
00:03:29.760 --> 00:03:33.388
So, the browser is going to send all
these headers because it wants us to know

72
00:03:33.388 --> 00:03:36.011
exactly who we are, who it is and
what what it accepts.

73
00:03:36.011 --> 00:03:38.534
The response is usually much simpler,

74
00:03:38.534 --> 00:03:43.350
it sends back a 200 which is a status
code and then the server type just for

75
00:03:43.350 --> 00:03:47.180
us to know, so in this case
we're running Nginx on Ubuntu.

76
00:03:49.947 --> 00:03:54.674
Some common status codes that you
all know is 200, which is okay,

77
00:03:54.674 --> 00:03:56.804
301 is moved permanently.

78
00:03:56.804 --> 00:04:00.724
302 is a temporary redirect,
as in it's redirecting now, but

79
00:04:00.724 --> 00:04:03.598
you come back later,
it might be back to normal.

80
00:04:03.598 --> 00:04:04.822
401 is not authorized.

81
00:04:04.822 --> 00:04:07.374
500 you're probably all seen
probably too many times,

82
00:04:07.374 --> 00:04:10.293
which is like something's gone wrong,
and we don't really know.

83
00:04:10.293 --> 00:04:15.800
But all these are actually different
categories of status codes.

84
00:04:15.800 --> 00:04:19.677
So, if I see a five anything I
know it's a server error for sure.

85
00:04:19.677 --> 00:04:21.978
If I see a 40 thing I
know it's a client error.

86
00:04:21.978 --> 00:04:25.025
I don't actually have to know
the specifics of the definition of 401

87
00:04:25.025 --> 00:04:25.643
and a 403.

88
00:04:25.643 --> 00:04:27.326
I just know that four is the client error.

89
00:04:27.326 --> 00:04:32.060
Two is always going to be success,
just different flavors of success.

90
00:04:32.060 --> 00:04:33.636
And then one is information.

91
00:04:33.636 --> 00:04:38.195
I'd say of all the status codes, probably
people are less familiar with the one.

92
00:04:38.195 --> 00:04:40.329
But that's also a useful status code too.

93
00:04:40.329 --> 00:04:44.599
It has things like continue.

94
00:04:44.599 --> 00:04:45.314
That's usually about it.

95
00:04:45.314 --> 00:04:48.720
Like 101 is like a continue,
as in you've got this header.

96
00:04:48.720 --> 00:04:50.500
There's actually more data to come.

97
00:04:50.500 --> 00:04:53.103
And we actually use that to send
back data a little bit faster.

98
00:04:53.103 --> 00:04:53.903
I won't go into that.

99
00:04:53.903 --> 00:04:57.217
That's one performance tuning,
but the one is information.

100
00:04:57.217 --> 00:04:58.875
So, this one's an interesting one.

101
00:04:58.875 --> 00:05:02.395
This one's more philosophical.

102
00:05:02.395 --> 00:05:06.501
So, knowing what you know about status
codes, what's the proper status code for

103
00:05:06.501 --> 00:05:07.942
successful POST requests?

104
00:05:07.942 --> 00:05:09.771
Anybody?

105
00:05:09.771 --> 00:05:12.629
Take a guess to one.
&gt;&gt; A 201?

106
00:05:12.629 --> 00:05:17.016
&gt;&gt; Yeah, good job 201 is probably
the proper status code for

107
00:05:17.016 --> 00:05:19.090
a successful POST request.

108
00:05:19.090 --> 00:05:22.741
Remember, a POST request is
the equivalent to a right or

109
00:05:22.741 --> 00:05:26.483
an insert, so
201 just means created successfully.

110
00:05:26.483 --> 00:05:30.530
However, most people just use 200,
and that just means, okay.

111
00:05:30.530 --> 00:05:33.763
But I like getting specific with
status codes because they mean very

112
00:05:33.763 --> 00:05:34.678
specific things.

113
00:05:34.678 --> 00:05:36.684
There's a difference between a 200 and
a 201.

114
00:05:36.684 --> 00:05:38.991
But generally you see the same kind.

115
00:05:38.991 --> 00:05:43.225
Just like if someone's not authorized,
you can send a 401 or 403,

116
00:05:43.225 --> 00:05:45.155
but they mean different things.

117
00:05:45.155 --> 00:05:47.513
Why we use status codes and
why they're so important?

118
00:05:47.513 --> 00:05:49.655
It tells us a lot of information
about what's going on the server.

119
00:05:49.655 --> 00:05:53.306
For instance, if we see a 500 error,
that doesn't really mean a whole lot.

120
00:05:53.306 --> 00:05:54.827
If we see something like a 501,

121
00:05:54.827 --> 00:05:58.088
that's telling me more specific
information about what's happening.

122
00:05:58.088 --> 00:06:02.698
That way, if the server is down,
it'll always respond with a 500.

123
00:06:02.698 --> 00:06:06.164
Like we saw in that example
where we connected to Nginx,

124
00:06:06.164 --> 00:06:09.354
my application wasn't running,
we got a 502.

125
00:06:09.354 --> 00:06:13.750
Which told me my server is up and
running or it told me my Ubuntu server,

126
00:06:13.750 --> 00:06:17.262
my droplet is up and running and
Nginx is up and running.

127
00:06:17.262 --> 00:06:18.959
But my application wasn't up and

128
00:06:18.959 --> 00:06:21.814
running, and
we got all that from just the status code.

129
00:06:21.814 --> 00:06:25.801
That's why status codes are really
powerful because they tell us all this

130
00:06:25.801 --> 00:06:28.061
information with very little overhead.

131
00:06:31.539 --> 00:06:33.409
So, we understand request and response.

132
00:06:33.409 --> 00:06:37.173
Let's talk about securing
our HTTP connection.

133
00:06:37.173 --> 00:06:41.082
So, right now our servers
are running wide in the open.

134
00:06:41.082 --> 00:06:45.066
Remember the traceroute exercise where we
saw all the different hops along the way

135
00:06:45.066 --> 00:06:46.516
it takes to get to the server.

136
00:06:46.516 --> 00:06:51.190
Well, what if there is a bad actor
somewhere in the middle there just

137
00:06:51.190 --> 00:06:52.913
reading all of our data.

138
00:06:52.913 --> 00:06:54.126
What can we do about that?

139
00:06:56.145 --> 00:06:59.141
Well, we can encrypt the connection
because right now it's not encrypted, and

140
00:06:59.141 --> 00:07:01.256
in the early days of the internet
nothing was encrypted,

141
00:07:01.256 --> 00:07:03.082
which when you think about
it it's kind of wild.

142
00:07:03.082 --> 00:07:06.469
We're sending our credit cards,
and our passwords and all that and

143
00:07:06.469 --> 00:07:09.204
it's really, really easy for
an actor in the middle,

144
00:07:09.204 --> 00:07:13.927
called a man in the middle attack,
just to sniff out all that information.

145
00:07:13.927 --> 00:07:16.952
And all it takes is just
a misconfigured server somewhere, and

146
00:07:16.952 --> 00:07:18.273
they got your credit card.

147
00:07:18.273 --> 00:07:20.342
Really kind of basic stuff,

148
00:07:20.342 --> 00:07:25.007
which is why all modern browsers
will require you to be on HTTPS.

149
00:07:25.007 --> 00:07:28.641
And if you're not, they'll send you
up that nasty warning like, hey,

150
00:07:28.641 --> 00:07:31.038
warning, you're not on
a secure connection.

151
00:07:31.038 --> 00:07:32.251
It didn't used to be that way.

152
00:07:32.251 --> 00:07:35.162
That's actually probably a new invention.

153
00:07:35.162 --> 00:07:38.012
But it's good.
We want all of our connections to be

154
00:07:38.012 --> 00:07:39.750
encrypted all the time.

155
00:07:39.750 --> 00:07:44.230
So, with the HTTPS, we learned about
encryption a little bit earlier,

156
00:07:44.230 --> 00:07:45.851
or hashing, if you will.

157
00:07:45.851 --> 00:07:47.674
This one is just encryption.

158
00:07:47.674 --> 00:07:48.718
Anybody that's in the middle,

159
00:07:48.718 --> 00:07:50.972
it's just going to see gibberish
because they don't have the keys.

160
00:07:50.972 --> 00:07:54.883
So, your server has a key and your browser
has a key, and they negotiate somewhere

161
00:07:54.883 --> 00:07:58.076
along the way and they encrypt all
that data moving back and forth.

162
00:08:04.236 --> 00:08:07.931
So, now let's make a modern website with
HTTPS because you got to have it for

163
00:08:07.931 --> 00:08:08.874
a modern website.

164
00:08:08.874 --> 00:08:11.400
You get that nice lock icon,
that means you're official.

