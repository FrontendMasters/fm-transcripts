WEBVTT

1
00:00:00.000 --> 00:00:02.607
So we're gonna make a CI/CD pipeline, but

2
00:00:02.607 --> 00:00:05.223
the first thing we need
to do is a stopwatch.

3
00:00:05.223 --> 00:00:08.318
How do we do a stopwatch on Unix?

4
00:00:08.318 --> 00:00:11.265
We use something called cron.

5
00:00:11.265 --> 00:00:15.374
Cron is really powerful, but at its
core it's a kind of a simple concept,

6
00:00:15.374 --> 00:00:17.775
it's just do this thing at a set interval.

7
00:00:17.775 --> 00:00:20.460
That's it, nothing magical about that.

8
00:00:20.460 --> 00:00:27.120
But, if we try and cron, do this thing on
an interval with a shell script that says,

9
00:00:27.120 --> 00:00:31.415
hey, here's a shell script
that pulls from GitHub.

10
00:00:31.415 --> 00:00:34.818
Anybody see where I'm going now?

11
00:00:34.818 --> 00:00:38.769
Yeah, we can say cron, pull from GitHub
and check for GitHub every minute,

12
00:00:38.769 --> 00:00:41.443
so it's always gonna be
pulling into production.

13
00:00:41.443 --> 00:00:43.400
So we're making a CI/CD pipeline.

14
00:00:43.400 --> 00:00:47.096
Without the tests, I wanna be clear,
we didn't write any tests for this, you

15
00:00:47.096 --> 00:00:50.909
should not do this, this is a hack, but
it's a good example of how CI/CD works.

16
00:00:55.056 --> 00:00:57.264
I even called fake CI/CD cuz
I want to be really clear,

17
00:00:57.264 --> 00:00:59.144
you should not do this
in a production system.

18
00:00:59.144 --> 00:01:01.873
This is just for
entertainment versus purposes and

19
00:01:01.873 --> 00:01:03.909
to make our lives a little bit easier.

20
00:01:03.909 --> 00:01:07.523
When we're writing code on our computer,
we now don't have to pull every time

21
00:01:07.523 --> 00:01:10.388
from the server, the server will
do it automatically for us.

22
00:01:12.901 --> 00:01:17.518
So what we wanna do is we wanna create
a bash script that get pulls from

23
00:01:17.518 --> 00:01:18.743
the main branch.

24
00:01:18.743 --> 00:01:22.083
We wanna create a cron job to execute that
script every two minutes, or one minute,

25
00:01:22.083 --> 00:01:25.012
it actually doesn't matter too much
if it's two minutes, one minute.

26
00:01:27.994 --> 00:01:32.528
But I'll walk through this because we have
not really touched on bash scripts, but

27
00:01:32.528 --> 00:01:35.700
when you see it you're like,
that is surprisingly,

28
00:01:35.700 --> 00:01:38.641
that's much easier than I
would have thought, Jem.

29
00:01:38.641 --> 00:01:40.597
It sounds complicated,
but it's not too bad.

30
00:01:49.015 --> 00:01:52.317
So the first thing we do is I have
an example of a shell script here,

31
00:01:54.395 --> 00:01:56.390
Here at the bottom, and that's just
what a shell script looks like.

32
00:01:56.390 --> 00:02:01.308
You start with user bin hash,
the location of the shell, and

33
00:02:01.308 --> 00:02:05.564
you can read variables,
you can say now is the date.

34
00:02:05.564 --> 00:02:10.337
You can have input using the read dash p,
we'll provide input, and

35
00:02:10.337 --> 00:02:12.608
then use echo with all that out.

36
00:02:14.179 --> 00:02:17.433
And I see some confused
looks on your faces.

37
00:02:17.433 --> 00:02:18.699
How about I just write this out?

38
00:02:18.699 --> 00:02:21.959
Would that clear things up a little bit?

39
00:02:21.959 --> 00:02:23.325
Yeah, let's give it a shot.

40
00:02:23.325 --> 00:02:24.337
Let's give it a shot.

41
00:02:30.716 --> 00:02:35.318
So I want to make a new shell script,
so I'm gonna say,

42
00:02:37.795 --> 00:02:42.336
vi, and I'm gonna call it test.sh.

43
00:02:42.336 --> 00:02:43.901
The sh just means it's a shell script.

44
00:02:46.713 --> 00:02:48.422
Wait, I don't know where my bash is.

45
00:02:48.422 --> 00:02:53.122
So before I do that, every shell script
has to start with the user, then dash,

46
00:02:53.122 --> 00:02:54.490
the location of that.

47
00:02:54.490 --> 00:02:56.929
But I can just say which bash, and

48
00:02:56.929 --> 00:03:01.820
it tells me the location of the bash,
and it's user/bin/bash.

49
00:03:01.820 --> 00:03:04.851
That's usually where it is,
you never know.

50
00:03:04.851 --> 00:03:12.025
So vi test.sh, insert, and
we always start with the octothorpe hash,

51
00:03:12.025 --> 00:03:18.387
whatever you want to call it,
bang, that means it's a script.

52
00:03:18.387 --> 00:03:23.219
We'll say usr, /bin/bash.

53
00:03:25.728 --> 00:03:29.736
And I won't do the whole now date
time thing, not super critical.

54
00:03:29.736 --> 00:03:34.577
It's just a way of setting dates,
but I will say we'll do a read.

55
00:03:34.577 --> 00:03:37.783
This just means it's waiting for
input from you, the user.

56
00:03:37.783 --> 00:03:40.725
We'll say, what is your name?

57
00:03:50.354 --> 00:03:53.178
And then we're gonna assign that
input to a variable called name.

58
00:03:59.358 --> 00:04:05.463
And then we're gonna use
our good old echo command,

59
00:04:05.463 --> 00:04:12.969
and we'll just say, I don't know,
Have a great day, $name.

60
00:04:17.215 --> 00:04:18.707
Then we're just gonna right-click that,

61
00:04:18.707 --> 00:04:21.426
I'll give you a second if you wanna play
along, you don't have to do this part.

62
00:04:21.426 --> 00:04:26.003
This is just demonstrating shell
scripting and kind of, it's pretty fun,

63
00:04:26.003 --> 00:04:29.732
it's pretty easy but very useful,
really, really useful.

64
00:04:29.732 --> 00:04:34.022
You don't have to spin up an entire
programming interpreter like JavaScript or

65
00:04:34.022 --> 00:04:36.847
Python, or
Java text you commands on your machine.

66
00:04:39.364 --> 00:04:41.517
All right, so let's go and
try to run that.

67
00:04:46.049 --> 00:04:51.200
Sweet, should just be able to execute it,
up 10 knots, so that's sh.

68
00:04:56.871 --> 00:04:58.270
We're gonna try to run it here.

69
00:05:01.769 --> 00:05:03.073
I need to set permissions.

70
00:05:03.073 --> 00:05:07.774
So, I'm gonna hack because I don't
remember the permissions to run it, so

71
00:05:07.774 --> 00:05:09.247
I'm gonna CHMOD this.

72
00:05:09.247 --> 00:05:12.792
Don't do this at home, 777,
guarantee the work, oops.

73
00:05:19.264 --> 00:05:20.278
Still not working.

74
00:05:28.272 --> 00:05:30.304
There we go.

75
00:05:30.304 --> 00:05:32.246
Jem, have a great day, Jem.

76
00:05:34.554 --> 00:05:36.165
And why do we have to
change the permissions?

77
00:05:36.165 --> 00:05:38.263
Because by default it's
not set to execute.

78
00:05:38.263 --> 00:05:40.507
Nothing's set to execute by default.

79
00:05:40.507 --> 00:05:45.742
I probably should have tightened down the
permissions a bit, but it'll work for now.

80
00:05:45.742 --> 00:05:48.770
And that's it, so
you just wrote a program without

81
00:05:48.770 --> 00:05:53.570
actually having to open another file,
have it run in node or anything like that.

82
00:05:53.570 --> 00:05:57.209
So shell scripting is really,
really awesome for writing scripts.

83
00:05:57.209 --> 00:05:59.834
You're probably not gonna write
very robust things in it, but

84
00:05:59.834 --> 00:06:01.863
it's a good tool to have
in your back pocket, and

85
00:06:01.863 --> 00:06:04.607
it's pretty straightforward when
it comes to shell scripting.

86
00:06:06.674 --> 00:06:09.897
So now, let's jump back to
our original task which was,

87
00:06:09.897 --> 00:06:13.199
we wanna create a bash script
that pulls from main branch.

88
00:06:15.437 --> 00:06:17.878
So what's the command
the pull from main branch?

89
00:06:17.878 --> 00:06:21.227
&gt;&gt; Git pull origin main?

90
00:06:21.227 --> 00:06:22.968
&gt;&gt; Git pull origin main.

91
00:06:22.968 --> 00:06:29.692
And how to write a bash scripts,
just by putting the hash exclamation bang,

92
00:06:29.692 --> 00:06:34.120
hash bang,
I think it's called hash bang, yes.

93
00:06:34.120 --> 00:06:38.272
You put the hash bang user bin bash,
and then you say git pull origin main.

94
00:06:38.272 --> 00:06:42.519
That's it, and you wrote a shell
script to pull from GitHub.

95
00:06:42.519 --> 00:06:44.224
Not too scary, right?

96
00:06:44.224 --> 00:06:45.226
When we started out,

97
00:06:45.226 --> 00:06:48.629
you saw these instructions you're like,
that sounds really bad.

98
00:06:48.629 --> 00:06:51.432
I don't know if I'll be able to do that,
but now you see it's not too bad.

99
00:07:00.506 --> 00:07:04.661
So I'm gonna do that now,
before we move on to the cron job part.

100
00:07:04.661 --> 00:07:11.733
So I'm gonna rm test.sh, and
I'm just gonna call this one,

101
00:07:11.733 --> 00:07:17.310
vi github.sh, and
I'm gonna use my hash bang.

102
00:07:21.094 --> 00:07:24.774
So usr/bin/bash,

103
00:07:28.044 --> 00:07:33.299
And I'm just gonna say git pull,
origin main.

104
00:07:38.738 --> 00:07:39.662
That's it.

105
00:07:41.823 --> 00:07:45.681
I'm not sure if I have permissions
on this one either, nope.

106
00:07:45.681 --> 00:07:49.473
So again, I'm gonna do this the bad way,
I'm just gonna chmod 700.

107
00:07:58.661 --> 00:07:59.678
And let's test it out.

108
00:08:02.594 --> 00:08:03.973
There we go.

109
00:08:03.973 --> 00:08:08.186
So we wrote a two-line bash
script to pull from GitHub.

110
00:08:08.186 --> 00:08:10.430
So that's half the battle here.

111
00:08:10.430 --> 00:08:15.051
We have a way of automating it, but
we wanna do this on some sort of cadence.

112
00:08:15.051 --> 00:08:18.271
So to do it on a cadence,
we're gonna use cron.

113
00:08:18.271 --> 00:08:22.492
In cron, the first time you see it,
it can look a little confusing,

114
00:08:22.492 --> 00:08:25.173
it's a bunch of numbers, and then a path.

115
00:08:25.173 --> 00:08:29.480
Doesn't make a lot of sense, but
when you break it down by understanding,

116
00:08:29.480 --> 00:08:33.428
the first one is actually just
the minutes, the second one's the hour.

117
00:08:33.428 --> 00:08:36.412
The third one's the day,
the fourth one's the month, and

118
00:08:36.412 --> 00:08:39.709
then the third one is the day of the week,
it's important to you.

119
00:08:39.709 --> 00:08:42.656
Then you're saying,
what should I use to execute that script,

120
00:08:42.656 --> 00:08:43.865
and then pass the script.

121
00:08:43.865 --> 00:08:47.974
And that's all a cron job is,
it's just a timer and

122
00:08:47.974 --> 00:08:52.094
the thing to execute on
whatever cadence you want.

123
00:08:52.094 --> 00:08:55.732
And the way we edit our cron jobs,
we use something called crontab.

124
00:08:55.732 --> 00:08:58.141
So we say crontab -e.

125
00:08:58.141 --> 00:09:02.702
So I'm gonna show you a much easier way
of doing this, cuz you're gonna be like,

126
00:09:02.702 --> 00:09:04.126
what's the task again?

127
00:09:04.126 --> 00:09:07.109
Is it run at every 10 minutes?

128
00:09:07.109 --> 00:09:08.570
Every minute, how do we do that?

129
00:09:08.570 --> 00:09:11.825
So, thanks for
the beauty of the Internet and

130
00:09:11.825 --> 00:09:17.663
other people have struggled through cron
jobs and trying to get the timing down.

131
00:09:17.663 --> 00:09:23.515
We can look at a nice
website called crontab.guru.

132
00:09:23.515 --> 00:09:26.223
And I love that .guru is a TLD.

133
00:09:26.223 --> 00:09:28.937
I should have got that full stack .guru.

134
00:09:28.937 --> 00:09:30.575
Darn it, see?

135
00:09:30.575 --> 00:09:32.270
This domain names I always have regret.

136
00:09:32.270 --> 00:09:36.837
So crontab.guru is amazing
because you're like,

137
00:09:36.837 --> 00:09:41.088
I wanna run a job that runs every,
I don't know,

138
00:09:41.088 --> 00:09:46.692
every 10 minutes on, A Tuesday.

139
00:09:46.692 --> 00:09:49.560
I think Tuesday is a 2,
yeah, there you go.

140
00:09:49.560 --> 00:09:53.824
And it shows you that's how to write
a cron job that runs at minute 10 on

141
00:09:53.824 --> 00:09:54.474
Tuesday.

142
00:09:57.659 --> 00:10:01.915
Or if I say, I only want this job to run,
I don't know,

143
00:10:01.915 --> 00:10:06.836
at minute 10 on Tuesday in April,
we can say that, if we say,

144
00:10:10.352 --> 00:10:15.576
So, that's actually how to run
every tenth minute, the */,

145
00:10:15.576 --> 00:10:20.826
otherwise it's gonna be every
minute 10 on Tuesday in April.

146
00:10:20.826 --> 00:10:26.085
So, crontab.guru makes it really,
really easy, to figure out,

147
00:10:26.085 --> 00:10:32.007
hey if I wanna run a job on every 10
minutes every so often, how do I do that?

148
00:10:32.007 --> 00:10:35.356
So much easier than trying to play
with it and hoping you get it right.

149
00:10:37.793 --> 00:10:38.937
So what do we say our job was?

150
00:10:38.937 --> 00:10:43.225
We wanna run it every minute or
every 2 minutes.

151
00:10:43.225 --> 00:10:50.479
So we would say, that's a star,
that's a star, we want it every 2 minutes,

152
00:10:54.522 --> 00:10:57.452
And that's what we'd write a cron job,
turn every 2 minutes.

153
00:11:00.835 --> 00:11:05.424
Now if you want every one minute you can
say 1, or you can just leave a star.

154
00:11:05.424 --> 00:11:07.054
And it's by default,
it's gonna run every minute.

155
00:11:14.731 --> 00:11:17.046
So now, I feel like I wrote my scripts,

156
00:11:17.046 --> 00:11:21.551
I feel like I'm prepared to set up
the cron job, let's go ahead and do that.

157
00:11:24.002 --> 00:11:29.574
Clear, let's run crontab.e to edit
the cron jobs, and I'm gonna use Vim,

158
00:11:29.574 --> 00:11:35.162
it's gonna ask you the first time what
you wanna use, let's stick with Vim.

159
00:11:37.964 --> 00:11:43.516
I'm gonna jump to the bottom here,
And I'm going to write a new line.

160
00:11:46.659 --> 00:11:47.763
So, what was that command again?

161
00:11:47.763 --> 00:11:53.019
It was star, I'm just gonna be explicit,

162
00:11:53.019 --> 00:11:57.113
2, hour, month, day, week.

163
00:11:59.266 --> 00:12:04.031
Then we're gonna use bash to execute
this script, so we're gonna say sh.

164
00:12:04.031 --> 00:12:10.290
And then we'll give it
the path to execute on,

165
00:12:10.290 --> 00:12:16.396
so that was /var/www/app/github.sh.

166
00:12:34.558 --> 00:12:38.591
Everybody here with me so far?

167
00:12:38.591 --> 00:12:41.211
Yeah, not too bad.

168
00:12:41.211 --> 00:12:43.799
When we started out,
it sounds much more complicated to this.

169
00:12:43.799 --> 00:12:49.334
But again, a stopwatch and a few lines
of code, we can create a fake pipeline.

170
00:12:49.334 --> 00:12:53.711
So let's go ahead, and
I'm gonna actually set it to a minute,

171
00:12:53.711 --> 00:12:56.200
just to be sure what's happening.

172
00:12:56.200 --> 00:13:00.324
Just to make it a little bit easier
on myself, so I don't wait 2 minutes.

173
00:13:03.031 --> 00:13:05.083
All right, so
how do we know if it's running?

174
00:13:05.083 --> 00:13:09.291
We can look at the syslog where
cron jobs are gonna be output.

175
00:13:09.291 --> 00:13:14.459
So we'll say sudo, cat, var/log.

176
00:13:14.459 --> 00:13:19.293
And our syslog captures everything
going on in our system.

177
00:13:25.904 --> 00:13:30.433
And we see here, it's just saying,
hey, Jem edited the crontab,

178
00:13:30.433 --> 00:13:32.032
just letting you know.

179
00:13:32.032 --> 00:13:35.266
Cuz everything in your systems
gets logged somewhere, and

180
00:13:35.266 --> 00:13:38.313
generally Syslog captures
most of what you're doing.

181
00:13:41.599 --> 00:13:44.289
But we wanna wait,
we wanna make sure it's running.

182
00:13:44.289 --> 00:13:45.509
So I'm gonna check it again.

183
00:13:47.119 --> 00:13:48.982
It still hasn't run because
it's been a minute.

184
00:13:48.982 --> 00:13:53.110
So I'm gonna use this command instead, And

185
00:13:53.110 --> 00:13:55.207
we'll talk about how to
read logs in a second.

186
00:13:55.207 --> 00:13:58.589
But I'm gonna use the tail command and
we'll set it to follow.

187
00:14:00.793 --> 00:14:05.624
And that's /var/log/syslog.

188
00:14:08.752 --> 00:14:10.061
Now we wait.

189
00:14:10.061 --> 00:14:12.405
So we see here it's running, but

190
00:14:12.405 --> 00:14:16.940
it doesn't look like it's
outputting anything, why is that?

191
00:14:16.940 --> 00:14:19.735
We didn't tell it where
to output the logs, so

192
00:14:19.735 --> 00:14:22.541
it's not actually doing
anything right now.

193
00:14:22.541 --> 00:14:26.509
So I'm in my /var/ app folder, and

194
00:14:26.509 --> 00:14:33.428
I want to take a look at that GitHub
script cuz I forgot one thing.

195
00:14:33.428 --> 00:14:37.721
And I did this last time,
I do this every single time and it's so

196
00:14:37.721 --> 00:14:40.640
easy to forget, I forgot to add this line.

197
00:14:40.640 --> 00:14:45.212
So we had the get pull origin main,
but we forgot to tell it where to go.

198
00:14:45.212 --> 00:14:48.479
Cuz we made the assumption that the script
is being run from this directory, but

199
00:14:48.479 --> 00:14:50.257
crontab does not run from this directory.

200
00:14:50.257 --> 00:14:54.452
Crontab runs from, I think root, so
we have to tell exactly where to look.

201
00:14:54.452 --> 00:14:57.852
So, first step is adding the CD/var/dub,

202
00:14:57.852 --> 00:15:01.618
which is just the location
of our current script.

203
00:15:03.942 --> 00:15:06.603
The other line I'd add, and
this is not necessary but

204
00:15:06.603 --> 00:15:10.818
it'll make your life a little bit easier,
we're just gonna say fast forward only.

205
00:15:12.801 --> 00:15:16.095
That way automatically it'll pull in
the changes that are different, but

206
00:15:16.095 --> 00:15:18.550
it's not going to collide
with your existing changes,

207
00:15:18.550 --> 00:15:21.070
you won't have to do a git rebase or
something like that.

208
00:15:27.878 --> 00:15:31.927
I should add, it's --, there we go.

209
00:15:33.705 --> 00:15:37.530
So we've gotta make sure with any script
we're running that's dependent on being in

210
00:15:37.530 --> 00:15:40.571
a certain place and location,
we have to specify that for crontab.

211
00:15:43.857 --> 00:15:46.185
And there's one other change I
wanna show you because again,

212
00:15:46.185 --> 00:15:47.886
I went on about redirection and
logging, and

213
00:15:47.886 --> 00:15:51.170
I said well, we need to log these things,
but it's still not working.

214
00:15:51.170 --> 00:15:53.052
Let's go ahead and
edit our crontab one more time.

215
00:15:55.501 --> 00:15:56.979
So that's crontab-e.

216
00:16:01.110 --> 00:16:05.781
We actually need to pipe our
output properly into the Syslog.

217
00:16:05.781 --> 00:16:09.516
Cuz as it is, the Syslog will just,
or Cron job will drop logs,

218
00:16:09.516 --> 00:16:13.610
it won't necessarily put them in
Syslog until we tell it where to go.

219
00:16:13.610 --> 00:16:16.401
So this is just gonna
pipe the standard out and

220
00:16:16.401 --> 00:16:21.550
standard error into standard in for the
next command, and this is just shorthand.

221
00:16:21.550 --> 00:16:26.577
There's different ways of doing it,
but it's 2&gt;&amp;1.

222
00:16:37.058 --> 00:16:41.522
Then we're using the pipe, and we're gonna
pipe it to something called logger, and

223
00:16:41.522 --> 00:16:45.170
logger is pretty easy,
it just logs things for you.

224
00:16:45.170 --> 00:16:47.990
You don't have to give it a name,
the T is just saying what's the name of

225
00:16:47.990 --> 00:16:51.290
the command we're gonna log, it'll
just make reading our log file easier.

226
00:16:51.290 --> 00:16:53.700
But you can drop this part,
you can just pipe it all into the logger.

227
00:16:53.700 --> 00:16:57.447
So now, let me quit out of here.

228
00:16:57.447 --> 00:17:01.274
Now if I say sudo tail -f, and

229
00:17:01.274 --> 00:17:05.112
we're looking for that log.

230
00:17:05.112 --> 00:17:10.282
And it's still gonna be in Syslog,
we didn't change that, var/log/syslog.

231
00:17:17.291 --> 00:17:21.256
And now we see the logging is working
correctly, cuz we piped it to logger, and

232
00:17:21.256 --> 00:17:23.974
then we gave it a name,
we just called it github.sh.

233
00:17:23.974 --> 00:17:26.763
We could have named it anything,
we could've dropped the name,

234
00:17:26.763 --> 00:17:28.701
it just makes it easier
to parse the log file.

235
00:17:28.701 --> 00:17:31.184
And now we see it's pulling
regularly from GitHub,

236
00:17:31.184 --> 00:17:34.242
because we didn't make any changes,
it's already up to date.

237
00:17:37.563 --> 00:17:41.559
So again, a few extra commands
makes it all work together.

238
00:17:41.559 --> 00:17:43.753
I got a little excited
about the other things,

239
00:17:43.753 --> 00:17:45.980
I forgot to actually wrap it all up.

240
00:17:45.980 --> 00:17:48.645
But now, if you make a change on
your GitHub page or on your repo and

241
00:17:48.645 --> 00:17:52.170
you push it up, it will pull down
automatically to your machine.

242
00:17:52.170 --> 00:17:56.500
That's pretty nice, so we don't have to do
much more coding, or we'll say JavaScript

243
00:17:56.500 --> 00:17:59.793
programming on the computer anymore,
or on your server anymore.

244
00:17:59.793 --> 00:18:01.853
We can do it on VSCode or
whatever you like.

245
00:18:06.843 --> 00:18:08.091
All right.

