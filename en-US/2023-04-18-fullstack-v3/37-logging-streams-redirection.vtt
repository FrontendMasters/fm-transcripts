WEBVTT

1
00:00:00.270 --> 00:00:02.569
So let's learn about logs and
how to read them.

2
00:00:02.569 --> 00:00:05.440
And you saw right there why we need to
log everything because other than that we

3
00:00:05.440 --> 00:00:07.088
don't know what's going on in our system.

4
00:00:07.088 --> 00:00:11.085
If it's not being logged by something we
created, how do we know if it's broken?

5
00:00:11.085 --> 00:00:13.156
How do we know if it's working?

6
00:00:13.156 --> 00:00:14.265
You just guess?

7
00:00:14.265 --> 00:00:16.379
I wouldn't like to guess here,
we really wanna know.

8
00:00:16.379 --> 00:00:19.312
We want the details.

9
00:00:19.312 --> 00:00:23.190
So when it comes to log files, there's
a few different ways of reading it.

10
00:00:23.190 --> 00:00:25.484
Cat, we've already looked at.

11
00:00:25.484 --> 00:00:28.076
Cat's useful, but
it dumps the entire log file.

12
00:00:28.076 --> 00:00:32.982
So if you have a massive log file,
kind of like our syslog or

13
00:00:32.982 --> 00:00:39.206
/etc services or something like that,
a giant file, not super useful.

14
00:00:39.206 --> 00:00:43.480
The command I used just there was tail and
tail -f is probably your most useful

15
00:00:43.480 --> 00:00:47.753
command when it comes to tracking a log,
cuz tail is just gonna output the last

16
00:00:47.753 --> 00:00:50.085
part of the file and
then we can follow it.

17
00:00:50.085 --> 00:00:53.625
So we can go line by line
as everything happens.

18
00:00:53.625 --> 00:00:57.834
And you're like, why there's so
many different ways of reading a log file?

19
00:00:57.834 --> 00:01:00.249
Because sometimes you
need to read the end,

20
00:01:00.249 --> 00:01:02.673
sometimes you just want
the top of the file.

21
00:01:02.673 --> 00:01:06.659
Sometimes you want the whole file, but
you want to read it one page at a time.

22
00:01:06.659 --> 00:01:08.698
Sometimes you just want the whole file.

23
00:01:08.698 --> 00:01:12.334
Hence, when you look at it initially, it
doesn't make a lot of sense why there's so

24
00:01:12.334 --> 00:01:15.871
many, but now we understand all these use
cases where sometimes you want the end,

25
00:01:15.871 --> 00:01:17.431
sometimes you want the beginning.

26
00:01:17.431 --> 00:01:21.433
And then the common logs that we want
to look at generally are syslog,

27
00:01:21.433 --> 00:01:23.159
what's going on our system.

28
00:01:23.159 --> 00:01:26.149
The auth.log, what's going on,
people try to log in,

29
00:01:26.149 --> 00:01:28.031
which we've looked at a few times.

30
00:01:28.031 --> 00:01:32.287
Then our nginx, what's happening
on our nginx connections as well.

31
00:01:32.287 --> 00:01:35.261
So those are some common
logs we wanna look at.

32
00:01:35.261 --> 00:01:38.934
And where are logs always located?

33
00:01:38.934 --> 00:01:41.542
It's on the screen.

34
00:01:41.542 --> 00:01:42.511
&gt;&gt; Var/log/.
&gt;&gt; Var/log/, yeah.

35
00:01:42.511 --> 00:01:45.518
So we always want our logs in var/log/,
and

36
00:01:45.518 --> 00:01:48.535
we want this consistency
across our system.

37
00:01:48.535 --> 00:01:51.229
Yeah, you can put logs
anywhere if you want to.

38
00:01:51.229 --> 00:01:55.683
However, it makes it easier when
all the logs are in the same place.

39
00:01:59.921 --> 00:02:03.645
So we're gonna see how to read logs,
all the different ways of reading logs.

40
00:02:03.645 --> 00:02:06.307
Let's talk a bit about standard streams.

41
00:02:06.307 --> 00:02:08.346
And I've touched on this a lot,
or a few times.

42
00:02:08.346 --> 00:02:11.404
I've said standard in,
standard out, standard error.

43
00:02:11.404 --> 00:02:14.639
You're probably nodding along,
you're like, yes, yes, yes.

44
00:02:14.639 --> 00:02:18.307
But, this is one of the most
amazing things about Unix,

45
00:02:18.307 --> 00:02:20.660
it's called the POSIX standards.

46
00:02:20.660 --> 00:02:24.061
POSIX is the portable
operating system interface.

47
00:02:24.061 --> 00:02:29.270
But it just means every single command
we run has an input, called standard in,

48
00:02:29.270 --> 00:02:33.807
it has an output, called standard out,
and it has a standard error.

49
00:02:33.807 --> 00:02:39.560
And every single function we write
takes these three arguments every time.

50
00:02:39.560 --> 00:02:41.280
That's all they take.

51
00:02:41.280 --> 00:02:45.725
Which is really powerful cuz that means we
can chain together commands to do whatever

52
00:02:45.725 --> 00:02:49.366
we want, because we know they all
have the same function signature.

53
00:02:49.366 --> 00:02:54.159
And I'm really not emphasizing this enough
how powerful tool this is, that every

54
00:02:54.159 --> 00:02:58.751
function we ever wanna run, all take
the same arguments, every single time.

55
00:02:58.751 --> 00:03:01.188
Imagine if you can write
your code like that.

56
00:03:01.188 --> 00:03:03.348
Think of what you can do,
you can do anything.

57
00:03:03.348 --> 00:03:05.046
You can chain everything together.

58
00:03:05.046 --> 00:03:07.755
And that's what we can do
with standard streams.

59
00:03:07.755 --> 00:03:11.683
And we can chain commands so long,
which we have a few times already,

60
00:03:11.683 --> 00:03:13.457
into anything we want in that.

61
00:03:13.457 --> 00:03:16.481
That's why people are really
good at Shell programming and

62
00:03:16.481 --> 00:03:18.121
Shell scripting command line.

63
00:03:18.121 --> 00:03:21.188
We'll run this super long commands and
they have exactly the data they need and

64
00:03:21.188 --> 00:03:22.641
you're like, how did they do that?

65
00:03:22.641 --> 00:03:25.986
It's because standard in,
standard out, standard error,

66
00:03:25.986 --> 00:03:27.860
everything takes the same thing.

67
00:03:27.860 --> 00:03:30.082
And we've already used
the pipe command before.

68
00:03:30.082 --> 00:03:33.033
So pipe is just gonna say,
that's the vertical bar.

69
00:03:33.033 --> 00:03:34.863
It just reads from standard out.

70
00:03:34.863 --> 00:03:38.428
And we've used that already to
pipe things from one place to

71
00:03:38.428 --> 00:03:40.579
another without writing to a file.

72
00:03:40.579 --> 00:03:46.765
Now if we actually wanna write it, we use
the greater than symbol, the right arrow,

73
00:03:46.765 --> 00:03:51.751
whatever you wanna call it, so
that'll writes anything to a file.

74
00:03:51.751 --> 00:03:54.484
And don't just take my word for it.

75
00:03:54.484 --> 00:03:55.741
Let's check it out.

76
00:03:55.741 --> 00:04:00.228
So we'll use our good echo
command say echo hello.

77
00:04:00.228 --> 00:04:03.374
I can write it to a file called foo.

78
00:04:03.374 --> 00:04:07.843
And then if we cat foo, says hello.

79
00:04:07.843 --> 00:04:09.632
Pretty cool.

80
00:04:09.632 --> 00:04:17.155
But, if I want to do this again,
but I wanna say hola.

81
00:04:17.155 --> 00:04:23.615
The problem with that is it
just overwrote, hole, [LAUGH].

82
00:04:26.695 --> 00:04:29.389
So it just overwrote what we had.

83
00:04:29.389 --> 00:04:33.372
So we're gonna use the double arrow,

84
00:04:36.659 --> 00:04:43.154
And that will append to the file So

85
00:04:43.154 --> 00:04:48.394
now we're kind of saying, this is
a good way of writing to log files.

86
00:04:48.394 --> 00:04:51.584
So we can use a double arrow and
point to wherever we wanna write and

87
00:04:51.584 --> 00:04:52.866
will append to a log file.

88
00:04:52.866 --> 00:04:58.999
And we can go the other way too,
we can read input going the other way.

89
00:04:58.999 --> 00:05:02.078
And this is probably the one that kind
of messes with your head a little bit.

90
00:05:02.078 --> 00:05:06.175
We use the arrow pointing the other way,
which means we're piping from the right

91
00:05:06.175 --> 00:05:09.866
side to the left side, where normally
we always read from right to left.

92
00:05:09.866 --> 00:05:11.787
So it gets a little tricky.

93
00:05:11.787 --> 00:05:14.555
But we don't use this one as much,
at least in this class.

94
00:05:19.281 --> 00:05:24.125
And then there's this weird symbol down
here, which is the 2, the right side,

95
00:05:24.125 --> 00:05:25.492
and the ampersand 1.

96
00:05:25.492 --> 00:05:29.024
And that just means we're gonna
redirect both all the outputs.

97
00:05:29.024 --> 00:05:32.381
So standard in and
standard out are both considered output.

98
00:05:32.381 --> 00:05:37.314
We're just gonna redirect both
of those into a new file, and

99
00:05:37.314 --> 00:05:40.516
this is just a shorthand of doing that.

