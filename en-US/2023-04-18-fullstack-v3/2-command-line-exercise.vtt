WEBVTT

1
00:00:00.000 --> 00:00:02.046
So that was the introduction.

2
00:00:02.046 --> 00:00:03.349
Not too bad.

3
00:00:03.349 --> 00:00:04.603
Everybody still with me?

4
00:00:04.603 --> 00:00:05.492
So now let's dive in.

5
00:00:05.492 --> 00:00:09.071
Let's dive into terminals
in the command line.

6
00:00:09.071 --> 00:00:12.874
Let's dive into VIM,
how we're going to edit files.

7
00:00:12.874 --> 00:00:17.161
And let's talk about shells,
the thing that the terminals are running,

8
00:00:17.161 --> 00:00:20.840
the application itself, and
the way it talks to the computer.

9
00:00:23.480 --> 00:00:24.965
So the command line at the core,

10
00:00:24.965 --> 00:00:27.668
it's the most efficient way
of talking to your computer.

11
00:00:27.668 --> 00:00:32.076
I'm gonna go ahead and
say it's the most low

12
00:00:32.076 --> 00:00:36.970
level way of communicating
with your computer.

13
00:00:36.970 --> 00:00:40.150
I'm sure there's people that will disagree
with me and say, I write assembly.

14
00:00:40.150 --> 00:00:46.504
But that's not a super efficient
way of talking to your computer.

15
00:00:46.504 --> 00:00:50.763
I generally consider the command
line the most efficient,

16
00:00:50.763 --> 00:00:55.714
the fastest way of talking to your
computer and getting to do things.

17
00:00:55.714 --> 00:00:57.700
So it's really important
we become familiar with it,

18
00:00:57.700 --> 00:01:00.044
because most of what we're doing
today will be in the terminal.

19
00:01:00.044 --> 00:01:03.787
I know that you'd be like, man,
the terminal, it's so boring.

20
00:01:03.787 --> 00:01:05.961
There's not even colours and images.

21
00:01:05.961 --> 00:01:09.019
But by the end you'll see
how powerful it is and

22
00:01:09.019 --> 00:01:14.355
how someone who's really good at working
with terminal, good at the commands,

23
00:01:14.355 --> 00:01:18.843
can do incredible things much faster
than any other way of doing it.

24
00:01:22.066 --> 00:01:23.422
So the terminal is fast.

25
00:01:23.422 --> 00:01:27.351
It is, I keep saying it, but it is the
fastest way of talking to the computer.

26
00:01:27.351 --> 00:01:29.717
There's no gap.

27
00:01:29.717 --> 00:01:32.988
You're talking to the operating system,
essentially, through the terminal.

28
00:01:32.988 --> 00:01:34.471
It's consistent.

29
00:01:34.471 --> 00:01:37.761
So the terminal that I'm running here,
the commands I'm running here,

30
00:01:37.761 --> 00:01:39.945
will work on the server
we're gonna build here.

31
00:01:39.945 --> 00:01:41.413
And it'll work on any server,

32
00:01:41.413 --> 00:01:45.143
as long as it's running the right terminal
on the right operating system, but

33
00:01:45.143 --> 00:01:48.495
actually the operating system doesn't
matter as much in most cases.

34
00:01:48.495 --> 00:01:49.718
And that's amazing.

35
00:01:49.718 --> 00:01:51.778
It's very portable.

36
00:01:51.778 --> 00:01:53.184
And there's low overhead.

37
00:01:53.184 --> 00:01:56.737
A terminal just sits there waiting and
waiting and waiting and waiting and

38
00:01:56.737 --> 00:01:59.212
then executes some command,
and then it's done.

39
00:01:59.212 --> 00:02:00.383
There's no fluff.

40
00:02:00.383 --> 00:02:03.080
It's very straightforward,
very functional.

41
00:02:03.080 --> 00:02:07.146
So that's why we're gonna get
really good at the terminal.

42
00:02:09.541 --> 00:02:12.979
All right, our first exercise for
the day, Welcome to your terminal.

43
00:02:14.624 --> 00:02:17.981
So I use something called iTerm.

44
00:02:17.981 --> 00:02:19.855
I think a lot of people
are familiar with it.

45
00:02:19.855 --> 00:02:21.852
So, I'm a big fan of iTerm.

46
00:02:21.852 --> 00:02:25.900
Mac has something built in terminal.

47
00:02:25.900 --> 00:02:29.037
I mean, it's fine.
It'll work.

48
00:02:29.037 --> 00:02:30.419
Pick your own flavor.

49
00:02:30.419 --> 00:02:35.514
But my favorite thing about iTerm
is split panes really easily.

50
00:02:35.514 --> 00:02:39.789
And if you're running a lot of complicated
commands, you can drag and drop them.

51
00:02:39.789 --> 00:02:44.420
You can make it look however you like.

52
00:02:44.420 --> 00:02:50.240
So feel free to use iTerm, feel free
to use the actual terminal itself,

53
00:02:50.240 --> 00:02:52.383
doesn't matter as much.

54
00:02:52.383 --> 00:02:55.401
The shell matters but
we'll talk about that in a second.

55
00:02:55.401 --> 00:02:59.422
So in your terminal now ,here
are some common commands,

56
00:02:59.422 --> 00:03:04.640
some of these you've probably seen,
some of these you may not have seen.

57
00:03:04.640 --> 00:03:06.271
ls is probably the most common one,
[LAUGH].

58
00:03:06.271 --> 00:03:10.913
Where am I now and what are the files
in my current directory?

59
00:03:10.913 --> 00:03:13.048
cd, of course, is change directory.

60
00:03:13.048 --> 00:03:15.267
If you need to make a directory, mkdir.

61
00:03:15.267 --> 00:03:17.379
If you need to remove directory, rmdir.

62
00:03:17.379 --> 00:03:22.315
We probably won't use rmdir too
much because rmdir doesn't work if

63
00:03:22.315 --> 00:03:28.389
the directory is not empty, which is kind
of annoying, you have to use rm instead.

64
00:03:28.389 --> 00:03:31.179
cat will show the file contents.

65
00:03:31.179 --> 00:03:35.744
man is really important but you will learn
it's not as useful as you would think,

66
00:03:35.744 --> 00:03:40.379
because it's very difficult to parse, but
it will save your butt, because every

67
00:03:40.379 --> 00:03:44.433
program we're gonna run today has
a manual page, which is fantastic.

68
00:03:44.433 --> 00:03:49.179
That's what I love about all these things
is somebody somewhere has documented all

69
00:03:49.179 --> 00:03:51.427
the functionality of these programs.

70
00:03:51.427 --> 00:03:53.589
less will show the file contents by page.

71
00:03:53.589 --> 00:03:55.913
touch will create an empty file.

72
00:03:55.913 --> 00:04:00.526
So we use it a lot from like, hey,
I need to create a tmp, touch tmp.

73
00:04:00.526 --> 00:04:04.185
Funny enough, touch doesn't
actually create an empty file.

74
00:04:04.185 --> 00:04:09.103
It actually just modifies the most
recently accessed date time.

75
00:04:09.103 --> 00:04:12.404
But in doing that,
it generally creates a new file.

76
00:04:12.404 --> 00:04:13.466
Yeah, fun facts.

77
00:04:13.466 --> 00:04:15.647
I got a lot of them.

78
00:04:15.647 --> 00:04:18.572
All right, rm,
we talked about will remove a file.

79
00:04:18.572 --> 00:04:22.654
Generally the command for
rm we're gonna use is rm -rf, so

80
00:04:22.654 --> 00:04:25.113
recursively remove all the files.

81
00:04:25.113 --> 00:04:29.334
And then echo just repeats the input.

82
00:04:29.334 --> 00:04:34.635
So for this exercise,
navigate to your home directory.

83
00:04:34.635 --> 00:04:37.422
Then I want you to make
a directory called temp.

84
00:04:37.422 --> 00:04:40.474
Then I want you to move into temp,

85
00:04:40.474 --> 00:04:46.034
list all the directory contents,
make a file called hello.

86
00:04:46.034 --> 00:04:49.150
Then list the directory constants again,
move out of temp, and

87
00:04:49.150 --> 00:04:50.600
then delete that directory.

88
00:04:50.600 --> 00:04:55.736
&gt;&gt; So to clarify, when you say touch
doesn't actually make a new file, it just

89
00:04:55.736 --> 00:05:01.372
sort of does something with the current
date time, do you wanna elaborate on that?

90
00:05:01.372 --> 00:05:02.511
&gt;&gt; Yeah, so it's a great question.

91
00:05:02.511 --> 00:05:08.385
Touch just tells the operating system,
hey, let me update the last modified time.

92
00:05:08.385 --> 00:05:12.251
And the operating system says, for a file
that doesn't exist, it will say, okay,

93
00:05:12.251 --> 00:05:14.864
I've updated that time, but
the file didn't exist, so

94
00:05:14.864 --> 00:05:16.072
I just created it for you.

95
00:05:16.072 --> 00:05:20.930
Because this, especially in Linux-based
systems very different from

96
00:05:20.930 --> 00:05:26.517
Windows-based file systems, where these
files don't necessarily have types.

97
00:05:26.517 --> 00:05:30.340
So in Windows every file has a type,

98
00:05:30.340 --> 00:05:34.674
like an exe file called executive file,

99
00:05:34.674 --> 00:05:38.248
a dll, lots of different types.

100
00:05:38.248 --> 00:05:40.760
Linux, you can have any sort of file.

101
00:05:40.760 --> 00:05:45.895
So hence, it's easy for the operating
system to be like, [SOUND], there you go,

102
00:05:45.895 --> 00:05:50.744
cuz it has no other association other
than the name and the last access time.

103
00:05:50.744 --> 00:05:52.696
Yeah, bit of fun trivia.

104
00:05:52.696 --> 00:05:53.196
Good question.

105
00:05:56.181 --> 00:06:01.348
&gt;&gt; If I'm on Windows 11, is there any
way for me to run these bash commands?

106
00:06:01.348 --> 00:06:07.560
&gt;&gt; Yes, there's something
called the Linux subsystem.

107
00:06:07.560 --> 00:06:12.553
It will take a while to install on your
computer and you'll have to do a restart,

108
00:06:12.553 --> 00:06:17.317
but I was at Microsoft a few years ago and
I met the person in charge of the Linux

109
00:06:17.317 --> 00:06:20.769
subsystem for Windows and
they were super proud of it.

110
00:06:20.769 --> 00:06:24.876
They're like, we got Linux working
on Windows, this is fantastic.

111
00:06:24.876 --> 00:06:26.391
Like heresy at Microsoft.

112
00:06:26.391 --> 00:06:30.294
But yes, if you wanna use these commands,
you can use the,

113
00:06:30.294 --> 00:06:35.154
I'm pretty sure it's called the Linux
subsystem or the Windows system.

114
00:06:35.154 --> 00:06:39.714
You can look it up but like I said, I've
done it before I'm on my home computer

115
00:06:39.714 --> 00:06:43.239
where I do use Windows, but
it does take a while to install.

116
00:06:43.239 --> 00:06:46.696
And the paths are gonna look a little
bit different, cuz forward slash and

117
00:06:46.696 --> 00:06:48.276
back slash, but it is possible.

