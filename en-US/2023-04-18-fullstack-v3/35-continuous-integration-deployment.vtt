WEBVTT

1
00:00:00.259 --> 00:00:03.919
So next I want to talk about CI/CD,

2
00:00:03.919 --> 00:00:09.287
some shell scripting, and
cron jobs, good stuff.

3
00:00:09.287 --> 00:00:13.188
You're like, what does CI/CD have to
do with being a full stack engineer?

4
00:00:13.188 --> 00:00:17.192
Well, when you get to any sort of scale,
and

5
00:00:17.192 --> 00:00:22.183
by that I mean more than one server,
even ten servers.

6
00:00:22.183 --> 00:00:26.623
You have to say, who's working on
the servers, is it one developer?

7
00:00:26.623 --> 00:00:29.289
That's fine, maybe not don't need CI/CD.

8
00:00:29.289 --> 00:00:31.624
But let's say you have 100 developers,

9
00:00:31.624 --> 00:00:34.221
who are all working on
features at the same time.

10
00:00:34.221 --> 00:00:37.663
How do we ensure that the code
in production is the latest,

11
00:00:37.663 --> 00:00:39.148
who's dictating that?

12
00:00:39.148 --> 00:00:43.425
Is it just everybody pushes and
then on Friday you do one massive push and

13
00:00:43.425 --> 00:00:45.792
hope nothing in production goes down.

14
00:00:45.792 --> 00:00:48.101
I hope not,
that's how we used to do things.

15
00:00:48.101 --> 00:00:51.618
So there's this concept of continuous
integration, continuous delivery or

16
00:00:51.618 --> 00:00:52.800
continuous deployment.

17
00:00:52.800 --> 00:00:56.347
It depends on your flavor
you're going for, but

18
00:00:56.347 --> 00:00:59.473
the CI is always continuous integration.

19
00:00:59.473 --> 00:01:02.209
All that means is
the changes are validated,

20
00:01:02.209 --> 00:01:04.802
emerged back to main as often as possible.

21
00:01:04.802 --> 00:01:10.128
So no, I've had this VR,
this polar quest open for two weeks.

22
00:01:10.128 --> 00:01:14.963
It's got 50,000 changes in it, as far as
editing, we don't want to do that we want

23
00:01:14.963 --> 00:01:19.481
small atomic changes, that are easy to
reason about in case something goes wrong.

24
00:01:19.481 --> 00:01:24.096
If you've never had anything go wrong,
you've never had to do a git bisect,

25
00:01:24.096 --> 00:01:26.942
on production system,
count yourself lucky.

26
00:01:26.942 --> 00:01:30.316
It is not fun, you're diving to the
smallest changes trying to figure out what

27
00:01:30.316 --> 00:01:32.477
happened, and
you don't never want to be there.

28
00:01:32.477 --> 00:01:37.394
Ask any SRE, site reliability engineer
they will tell you CICD is the only

29
00:01:37.394 --> 00:01:41.536
way to do things when you're
talking about systems at scale.

30
00:01:41.536 --> 00:01:44.551
But this I've always struggled with,
I'm not going to lie.

31
00:01:44.551 --> 00:01:47.845
Continuous delivery versus continuous
deployment, are kind of like,

32
00:01:47.845 --> 00:01:49.305
they sound like the same thing.

33
00:01:49.305 --> 00:01:53.645
If you told me that on the street, I'd be
like you're just saying the same thing.

34
00:01:53.645 --> 00:01:57.720
Continuous delivery just means,
the changes are ready to go.

35
00:01:57.720 --> 00:02:00.446
Not that you're actually
deploying them for production but

36
00:02:00.446 --> 00:02:03.235
we're all writing code here,
we're all going to push it up.

37
00:02:03.235 --> 00:02:05.846
It's been tested and validated.

38
00:02:05.846 --> 00:02:08.715
And then it's ready to go to production,
it doesn't mean that,

39
00:02:08.715 --> 00:02:10.602
we actually are pushing into production.

40
00:02:10.602 --> 00:02:15.112
Whereas continuous deployment,
does mean we're pushing to production.

41
00:02:15.112 --> 00:02:19.616
So that just means I merge in the changes
that go through all the tests and cycles,

42
00:02:19.616 --> 00:02:22.211
and we're just always updating production.

43
00:02:22.211 --> 00:02:26.735
And the difference between continuous
delivery and continuous deployment,

44
00:02:26.735 --> 00:02:30.033
some of its arbitrary some of
it depends on your company.

45
00:02:30.033 --> 00:02:32.864
Some of it depends on kind of
the timeliness of the changes you

46
00:02:32.864 --> 00:02:33.538
need to make.

47
00:02:33.538 --> 00:02:38.625
If I'm working on say, I don't know,
a healthcare application.

48
00:02:38.625 --> 00:02:41.099
I probably don't want
continuous deployment,

49
00:02:41.099 --> 00:02:43.942
cuz the chances of something
going wrong are a bit high.

50
00:02:43.942 --> 00:02:47.239
I want you to use continuous delivery, and

51
00:02:47.239 --> 00:02:51.827
I want that manual validation
on before I go to production.

52
00:02:51.827 --> 00:02:56.266
And Atlassian has a really nice diagram
here, kind of explaining the difference

53
00:02:56.266 --> 00:02:59.543
between continuous delivery and
continuous deployment.

54
00:02:59.543 --> 00:03:04.607
But, what's one commonality

55
00:03:04.607 --> 00:03:08.703
you see between the two.

56
00:03:08.703 --> 00:03:10.190
Like
&gt;&gt; Continuous integration?

57
00:03:10.190 --> 00:03:13.432
&gt;&gt; Yes, continuous integration, so

58
00:03:13.432 --> 00:03:18.298
all of this relies on testing and
validation of code.

59
00:03:18.298 --> 00:03:21.642
None of this means anything, if you're
not testing and validating your code.

60
00:03:21.642 --> 00:03:23.570
And that's the crux of CI/CD.

61
00:03:23.570 --> 00:03:28.221
People hear, CI/CD is just about
pushing your code faster and

62
00:03:28.221 --> 00:03:30.681
saying it and that's not it at all.

63
00:03:30.681 --> 00:03:32.687
CI/CD is about validating your code,

64
00:03:32.687 --> 00:03:34.948
making sure it says
ready to go as possible.

65
00:03:34.948 --> 00:03:37.037
So that when you do need
to push to production,

66
00:03:37.037 --> 00:03:39.409
there's no questions about
what's gonna happen.

67
00:03:39.409 --> 00:03:44.421
And that's the crux of it, I think
what I've seen in just my history is,

68
00:03:44.421 --> 00:03:46.489
people forget the test part.

69
00:03:46.489 --> 00:03:51.073
They get the build,
they get the deployment part,

70
00:03:51.073 --> 00:03:55.988
they forget testing is the core and
the crux of CI/CD.

71
00:03:57.615 --> 00:03:58.482
And at.

72
00:04:00.843 --> 00:04:02.714
There we go.

73
00:04:02.714 --> 00:04:05.253
At Netflix,
we use something called Spinnaker.

74
00:04:05.253 --> 00:04:10.233
Spinnaker is, maybe some of the most
amazing technology I've ever had to use

75
00:04:10.233 --> 00:04:15.537
And the Spinnaker team probably like yeah
Jim you're the best, and I am the best.

76
00:04:15.537 --> 00:04:19.274
But Spinnaker is fantastic, so
you know how we had to go through all

77
00:04:19.274 --> 00:04:23.841
this trouble of creating a droplets,
then configured SSH and all these things.

78
00:04:23.841 --> 00:04:28.034
Spinnaker can do that for us, I could
spin up 500 clusters, with a button and

79
00:04:28.034 --> 00:04:32.682
they're all configured correctly exactly
the same, there's a load balancer setup.

80
00:04:32.682 --> 00:04:37.447
It does so much work for us,
netflix runs on Spinnaker.

81
00:04:37.447 --> 00:04:40.046
It is a fantastic piece of technology,

82
00:04:40.046 --> 00:04:43.129
you click on the link you
can see more about it.

83
00:04:43.129 --> 00:04:45.562
But, and
you're like I should use Spinnaker,

84
00:04:45.562 --> 00:04:47.290
maybe not on your personal project.

85
00:04:47.290 --> 00:04:50.271
This is probably overkill,
this is, I don't know,

86
00:04:50.271 --> 00:04:54.538
using a Ferrari to toe some scissors to
mow your lawn or something like that.

87
00:04:54.538 --> 00:04:58.987
I don't know, you'll know when you
need it, if you need Spinnaker.

88
00:04:58.987 --> 00:05:03.315
But it's a combination of Google and
Netflix keep working on Spinnaker.

89
00:05:03.315 --> 00:05:04.357
I get what, on and on.

90
00:05:04.357 --> 00:05:09.273
But it really is powerful technology
compared to what we used to have to do.

91
00:05:09.273 --> 00:05:12.185
IF Spinnaker allows us to use pipelines or
any CI/CD system,

92
00:05:12.185 --> 00:05:15.433
allows us to use something called
pipelines, and we talked about and

93
00:05:15.433 --> 00:05:17.348
pipelines, look something like this.

94
00:05:17.348 --> 00:05:22.009
You have a build, you push to GitHub or
wherever your code is located,

95
00:05:22.009 --> 00:05:27.077
you run the tests, you run different
set of tests, you run even more tests.

96
00:05:27.077 --> 00:05:32.407
And you go through all these steps,
and that's called the pipeline.

97
00:05:32.407 --> 00:05:36.494
I'll stop there on tests because when
I die, my last words will be like,

98
00:05:36.494 --> 00:05:38.638
they should have written more tests,

99
00:05:38.638 --> 00:05:41.941
I really believe we don't
write enough tests these days.

100
00:05:41.941 --> 00:05:47.576
But, that's why I love CI/CD, because
it forces us to think in that mindset.

101
00:05:47.576 --> 00:05:52.295
Now, I talked all about CI/CD,
the importance of it in modern computing,

102
00:05:52.295 --> 00:05:56.295
why you need it at any sort of scale,
the importance of testing.

103
00:05:56.295 --> 00:05:59.039
We're going to make one today,
we're gonna make a CI/CD pipeline, but

104
00:05:59.039 --> 00:06:00.379
we're not going to use spinnaker.

105
00:06:00.379 --> 00:06:03.711
We're not going to use Spinnaker, we're
not gonna use any of these complicated

106
00:06:03.711 --> 00:06:06.357
things, because we probably don't
need them for our use case.

107
00:06:06.357 --> 00:06:12.115
All you actually need to make a CI/CD
pipeline is a few lines of code,

108
00:06:12.115 --> 00:06:14.210
and stopwatch that's it

