WEBVTT

1
00:00:00.000 --> 00:00:01.044
So that was how to create a subdomain.

2
00:00:01.044 --> 00:00:03.171
That's how to do redirects in nginx.

3
00:00:03.171 --> 00:00:07.408
That was talking about gzip, how to adjust
your compression, and what compression is,

4
00:00:07.408 --> 00:00:08.886
now we're gonna dive into it.

5
00:00:08.886 --> 00:00:10.782
Now, we're gonna start writing some code.

6
00:00:10.782 --> 00:00:14.574
Now we get to do probably what I
consider one of the most fun things,

7
00:00:14.574 --> 00:00:15.881
which is WebSockets.

8
00:00:15.881 --> 00:00:17.640
I think WebSockets are so much fun.

9
00:00:17.640 --> 00:00:21.150
WebSockets are real time communication.

10
00:00:21.150 --> 00:00:26.467
It's a persistent bidirectional connection
between the client and the server.

11
00:00:26.467 --> 00:00:30.119
How is that different from HTTP?

12
00:00:30.119 --> 00:00:34.602
&gt;&gt; HTTP is one way and it doesn't persist.

13
00:00:34.602 --> 00:00:36.260
&gt;&gt; Yeah, it doesn't persist.

14
00:00:36.260 --> 00:00:40.209
So the minute the HTTP connection is done,
it closes.

15
00:00:40.209 --> 00:00:42.243
Whereas, WebSockets stay open,
they persist.

16
00:00:42.243 --> 00:00:46.619
So you can enable real-time connection
between the client and the server.

17
00:00:46.619 --> 00:00:50.787
So, for this exercise, we're going
to update our nginx configuration,

18
00:00:50.787 --> 00:00:55.040
because it's gotta know it's a WebSocket
connection or what to do with it.

19
00:00:55.040 --> 00:00:57.436
We need to create a new node.js server but

20
00:00:57.436 --> 00:01:01.487
this time we're gonna use Express
to make things a little bit faster.

21
00:01:01.487 --> 00:01:03.708
And then we're gonna enable WebSockets and

22
00:01:03.708 --> 00:01:06.537
we might have to write a little
bit HTML for this one too.

23
00:01:06.537 --> 00:01:11.541
I know HTML, maybe a little bit
of JavaScript in our HTML too,

24
00:01:11.541 --> 00:01:13.668
let's see, let's see.

25
00:01:14.818 --> 00:01:18.570
So the first thing we wanna do is,
we wanna go into our default server,

26
00:01:18.570 --> 00:01:20.617
you remember where that was located?

27
00:01:20.617 --> 00:01:25.764
/etc/nginx/sites-enabled full
stack front end,

28
00:01:25.764 --> 00:01:28.398
fsfe, our default server.

29
00:01:28.398 --> 00:01:32.315
You'll know you're in the right place
if you go to the default server.

30
00:01:32.315 --> 00:01:33.465
So I'll do that now.

31
00:01:36.351 --> 00:01:45.889
So sudo vi /etc/nginx/sites-enabled fsfe,

32
00:01:45.889 --> 00:01:52.706
and here I'm in my default server.

33
00:01:52.706 --> 00:01:56.087
Next, I wanna adjust
the location block down here.

34
00:02:05.099 --> 00:02:07.477
So we're just gonna jump
into insert mode here, and

35
00:02:07.477 --> 00:02:09.324
we're gonna add some more directives.

36
00:02:09.324 --> 00:02:15.015
First thing we're gonna say is we're
gonna proxy, we're gonna set a header.

37
00:02:15.015 --> 00:02:18.289
So that means when we proxy connection,
we're just gonna add a header to that.

38
00:02:18.289 --> 00:02:22.918
And we wanna say it's an upgrade,

39
00:02:22.918 --> 00:02:26.118
upgrade, up, grade.

40
00:02:32.408 --> 00:02:35.396
Because WebSockets are considered
an upgrading the connection,

41
00:02:35.396 --> 00:02:36.362
it's not just HTTP.

42
00:02:36.362 --> 00:02:42.562
WebSockets do run over HTTP, but it's
an upgrade to it, so it's a little add-on.

43
00:02:42.562 --> 00:02:46.059
So we have to tell nginx to add that
header so node.js knows what to do.

44
00:02:46.059 --> 00:02:51.273
Next, we're gonna set another header to
the proxy itself or to the connection

45
00:02:51.273 --> 00:02:56.104
itself, not just the HTP request,
so we're gonna set another header.

46
00:02:58.808 --> 00:03:01.861
And the connection is an upgrade.

47
00:03:09.157 --> 00:03:13.967
That's it, not too bad,
I remember earlier someone asked,

48
00:03:13.967 --> 00:03:16.752
why do we use nginx instead of node?

49
00:03:16.752 --> 00:03:20.117
And I'm said you could use node, but
nginx just makes it much easier.

50
00:03:20.117 --> 00:03:21.168
So two lines,

51
00:03:21.168 --> 00:03:27.226
we added the ability to have WebSockets
to our at least connecting to WebSockets.

52
00:03:27.226 --> 00:03:32.691
We still need to enable them with
our server and of course we command

53
00:03:32.691 --> 00:03:38.645
right quits and it's good practice
to double check our configuration,

54
00:03:38.645 --> 00:03:43.345
syntax looks okay, so
now we can restart nginx, great.

55
00:03:43.345 --> 00:03:47.936
But it's still not gonna do anything,
it's just saying nginx has the ability to

56
00:03:47.936 --> 00:03:51.933
handle WebSockets, we still need to
create a server to do this for us.

57
00:03:51.933 --> 00:03:55.916
So now we can jump back to our laptops,
you can jump out of the server or

58
00:03:55.916 --> 00:03:59.230
you can do this on the server
if you want totally up to you.

59
00:03:59.230 --> 00:04:05.772
You might be a little faster coding, not
in vi, I'm not gonna judge you either way.

60
00:04:11.313 --> 00:04:13.885
So we're gonna create a new server, and

61
00:04:13.885 --> 00:04:17.378
this time we're gonna use
something called Express.

62
00:04:17.378 --> 00:04:21.029
Express is probably the most
popular node server out there,

63
00:04:21.029 --> 00:04:25.323
I like it cuz there's tons of
documentation that's relatively fast,

64
00:04:25.323 --> 00:04:27.843
it's been around for along, long time.

65
00:04:27.843 --> 00:04:29.898
So we can't go wrong when using Express,

66
00:04:29.898 --> 00:04:32.845
if you're saying what sort of
node servers should I write?

67
00:04:32.845 --> 00:04:37.716
And the reason we are using Express is,
because the things we're gonna have

68
00:04:37.716 --> 00:04:41.978
to do get a little more complicated
than that simple server we wrote

69
00:04:41.978 --> 00:04:46.112
a little bit earlier which is just
node with no other libraries.

70
00:04:46.112 --> 00:04:50.781
Express is just gonna make the link
WebSockets a little bit easier.

71
00:04:50.781 --> 00:04:52.561
Is there a question there?

72
00:04:52.561 --> 00:04:57.235
&gt;&gt; I was just curious
your opinion on Fastify?

73
00:04:57.235 --> 00:05:01.657
&gt;&gt; Fastify is fun,
is that the one that's more API driven?

74
00:05:01.657 --> 00:05:04.972
I forget,
I'm thinking of a different library.

75
00:05:06.380 --> 00:05:13.100
&gt;&gt; A lot of people have been saying that
since Express isn't maintained too much,

76
00:05:13.100 --> 00:05:17.827
Fastify is kind of the standard,
but anyways go ahead.

77
00:05:17.827 --> 00:05:18.980
&gt;&gt; I've not looked at Fastify.

78
00:05:18.980 --> 00:05:21.870
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yes, we could.

79
00:05:21.870 --> 00:05:22.910
I mean, I think for

80
00:05:22.910 --> 00:05:27.141
learning Express is probably the best
because it's been around for so long.

81
00:05:27.141 --> 00:05:31.194
You're not gonna be doing anything that
hasn't already been done before that you

82
00:05:31.194 --> 00:05:33.260
can't find an answer on Stack Overflow.

83
00:05:33.260 --> 00:05:36.013
And that's part of what goes into
software engineering is like,

84
00:05:36.013 --> 00:05:37.624
can you find answers when you need it?

85
00:05:37.624 --> 00:05:42.254
It's all great to be on the leading edge
of front end masters.js, the hottest new

86
00:05:42.254 --> 00:05:46.231
node framework, but if nobody else
using it, then you can look it up.

87
00:05:46.231 --> 00:05:51.435
Then, you might run into trouble unless
you really know what you're doing.

88
00:05:51.435 --> 00:05:52.731
&gt;&gt; Programming as a team sport.

89
00:05:52.731 --> 00:05:54.454
&gt;&gt; Programming as a team sport.

90
00:05:54.454 --> 00:06:00.050
So I will let you get that far, and
then I'm gonna jump into the code itself,

91
00:06:00.050 --> 00:06:03.651
and we're gonna write
a WebSocket connection.

92
00:06:03.651 --> 00:06:09.704
I'm gonna use VS Code for this one,
But we'll read it all together

93
00:06:09.704 --> 00:06:13.367
versus me just telling you to copy things
and you're like, why am I doing this?

94
00:06:13.367 --> 00:06:16.293
That's not the way to learn, the way to
learn is to actually write it out yourself

95
00:06:16.293 --> 00:06:17.767
rather than just trust me that it works.

96
00:06:17.767 --> 00:06:20.777
So if you're still writing,
that's okay, I'm gonna show you,

97
00:06:20.777 --> 00:06:23.757
I'm gonna write this code myself,
so you can just follow along.

98
00:06:23.757 --> 00:06:27.384
I'd like to give you a chance to write
the code and think about it a little bit.

99
00:06:27.384 --> 00:06:30.198
Because if you're talking,
if you're coding and writing,

100
00:06:30.198 --> 00:06:32.370
it's really hard to pay
attention sometimes.

101
00:06:32.370 --> 00:06:36.266
So I have a link here in the slides
to the WebSocket example.

102
00:06:36.266 --> 00:06:39.731
We're gonna right through it but
just in case you can't keep up or

103
00:06:39.731 --> 00:06:42.566
you have to go to the restroom or
something like that,

104
00:06:42.566 --> 00:06:45.096
we have the fully baked
example here on GitHub.

105
00:06:47.195 --> 00:06:52.512
So, first thing I'm going to do is,
I'm gonna open a new VS Code,

106
00:06:56.779 --> 00:06:58.837
To join you don't want new window,
there we go.

107
00:07:07.211 --> 00:07:08.371
We go open a terminal here.

108
00:07:18.509 --> 00:07:21.156
Because we're actually coding for
the server, but

109
00:07:21.156 --> 00:07:24.284
I don't wanna write this on vi,
I'm not that versed with vi,

110
00:07:24.284 --> 00:07:27.255
I wanna write in the terminal
that I'm comfortable with.

111
00:07:27.255 --> 00:07:31.156
I'm gonna clone the repo
that I made earlier.

112
00:07:31.156 --> 00:07:33.618
So git clone.

113
00:07:33.618 --> 00:07:34.829
I'm just gonna use VS Code.

114
00:07:53.962 --> 00:07:59.417
In the wrong directory, so I'm gonna
make a move into my projects directory.

115
00:07:59.417 --> 00:08:04.126
Now I'm gonna get clone,
that should be the right place.

116
00:08:05.574 --> 00:08:09.313
Cd jemstack, and

117
00:08:09.313 --> 00:08:14.804
let's do this a lazy way.

118
00:08:14.804 --> 00:08:16.709
Open a new code editor there.

119
00:08:16.709 --> 00:08:20.061
I should have just done it on my terminal,
don't judge me.

120
00:08:20.061 --> 00:08:25.369
I get there eventually,
even if it's not the most efficient way.

121
00:08:25.369 --> 00:08:29.149
So we already created our package.json
earlier, not a whole lot in it.

122
00:08:29.149 --> 00:08:33.437
We have our old server called app js,
remember this one, hand built,

123
00:08:33.437 --> 00:08:35.558
no express, very, very simple.

124
00:08:35.558 --> 00:08:40.648
Let's create a new file and

125
00:08:40.648 --> 00:08:46.407
I'll call it index-ws.js.

126
00:08:50.045 --> 00:08:56.903
So now, I'm gonna write the server
blocks that you just wrote before or

127
00:08:56.903 --> 00:09:02.633
the server, so I'm gonna use Express,
require, express

128
00:09:04.585 --> 00:09:10.798
We're writing a server,
we're gonna require that http,

129
00:09:10.798 --> 00:09:15.903
and we just shortcut it
by saying create server.

130
00:09:18.647 --> 00:09:23.422
Let's create a new app,
that's just the Express app

131
00:09:23.422 --> 00:09:27.998
when executed,
then assign the server to the app.

132
00:09:27.998 --> 00:09:32.255
So we need to create a route,
just a basic route, so

133
00:09:32.255 --> 00:09:36.415
we'll say any requests
that come in to slash get.

134
00:09:36.415 --> 00:09:41.053
We wanna respond, we can use a function,

135
00:09:41.053 --> 00:09:44.507
remember requests response?

136
00:09:48.863 --> 00:09:53.552
Enclose that off, and all we wanna do is
just respond with an index.html file.

137
00:09:53.552 --> 00:09:58.569
&gt;&gt; We haven't written that file yet, but
we know now that HTML is pretty forgiving,

138
00:09:58.569 --> 00:10:02.439
so we can just touch index.html and
add a hello world in there.

139
00:10:02.439 --> 00:10:07.205
But for now, I wanna use the send file
command, because that is one of the easier

140
00:10:07.205 --> 00:10:10.638
ways of sending back a static index or
a static HTML file.

141
00:10:13.440 --> 00:10:17.533
But as always, we need to say
where this file is located, and

142
00:10:17.533 --> 00:10:21.083
it's located in the route
which we have to specify.

143
00:10:21.083 --> 00:10:26.183
So the route is here, we're gonna
use dirname, which is a reserve name

144
00:10:26.183 --> 00:10:31.208
in Node.js, but it just says,
what's the directory and right now?

145
00:10:31.208 --> 00:10:32.533
It's just shorthand for doing that.

146
00:10:40.491 --> 00:10:46.816
And then, we actually have to
make the server response request,

147
00:10:46.816 --> 00:10:50.159
so we can say server.on request.

148
00:10:50.159 --> 00:10:51.733
And we're just gonna sign the app.

149
00:10:51.733 --> 00:10:53.865
That Express server that we created,

150
00:10:53.865 --> 00:10:58.138
we're just gonna make that respond to
all our requests via the HTTP server.

151
00:10:58.138 --> 00:11:01.526
And of course, we gotta listen somewhere,
give it a port.

152
00:11:01.526 --> 00:11:08.135
So we're gonna say server, listen,
port 3000, just our default there.

153
00:11:08.135 --> 00:11:12.978
And we give it a function,
just a call back when it does listen, and

154
00:11:12.978 --> 00:11:15.586
we're just gonna say console log.

155
00:11:17.457 --> 00:11:21.633
Server started on port 3000.

156
00:11:25.808 --> 00:11:29.513
And just close it off for giggles.

157
00:11:29.513 --> 00:11:34.857
And last thing we need to do for
error out from it can't find the file,

158
00:11:34.857 --> 00:11:39.297
let's just create an index.html file,
index.html.

159
00:11:39.297 --> 00:11:44.587
Say, WebSocket example, right?

160
00:11:49.614 --> 00:11:53.995
Let me just open my terminal and
let's go ahead and run this application.

161
00:11:58.575 --> 00:12:03.022
So to run it, node index ws.js, and

162
00:12:03.022 --> 00:12:09.504
something's wrong cannot
find module Express.

163
00:12:09.504 --> 00:12:16.149
I forgot the npm install express,
common mistake, so npm I express.

164
00:12:21.932 --> 00:12:23.127
And now let's give it a shot.

165
00:12:25.402 --> 00:12:28.720
And we'll navigate to our browser here,
and

166
00:12:28.720 --> 00:12:32.486
we're going to localhost 3000,
there we go.

167
00:12:32.486 --> 00:12:37.268
So in this course, you've already created
so many different types of servers,

168
00:12:37.268 --> 00:12:40.380
an Ubuntu server,
a Node server an express server.

169
00:12:40.380 --> 00:12:43.522
Servers are all around, but again,
servers aren't that hard to create.

170
00:12:43.522 --> 00:12:46.859
It's getting to the details of what
that server supposed to do and

171
00:12:46.859 --> 00:12:50.025
locking it down properly,
that's where the tricks come in.

