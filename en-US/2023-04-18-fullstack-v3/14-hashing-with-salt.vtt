WEBVTT

1
00:00:00.194 --> 00:00:04.148
So next, the next thing that came
along was something called SHA1.

2
00:00:04.148 --> 00:00:08.142
SHA1 is much more rigorous, and
we'll look at the difference here.

3
00:00:08.142 --> 00:00:13.522
So we'll say OpenSSL, we'll use SHA1,

4
00:00:13.522 --> 00:00:17.564
and that's quite a bit longer.

5
00:00:17.564 --> 00:00:21.120
So the MD5 hash was about 33 characters or
so.

6
00:00:21.120 --> 00:00:22.931
SHA-1will give us 41,

7
00:00:22.931 --> 00:00:27.665
that's a lot more entropy when you
talk about cryptographic hashing.

8
00:00:27.665 --> 00:00:32.238
But again, you probably all
got the same output as me.

9
00:00:32.238 --> 00:00:35.227
So again,
you feel good implementing these things.

10
00:00:35.227 --> 00:00:38.197
You're like,
I hash the passwords using SHA1.

11
00:00:38.197 --> 00:00:42.267
But it's again, I can create a rainbow
table of all these things already very,

12
00:00:42.267 --> 00:00:44.534
very easily, and it stores well in memory.

13
00:00:44.534 --> 00:00:49.615
So we're gonna use what is now currently
the golden standard, which is SHA256.

14
00:00:55.261 --> 00:00:57.273
And your output there is gonna be
the same as mine cuz we're all using

15
00:00:57.273 --> 00:00:57.881
the same password.

16
00:00:57.881 --> 00:00:59.737
We're all using the same
hashing algorithm.

17
00:00:59.737 --> 00:01:04.100
However, it becomes a lot more difficult
to implement a rainbow table when

18
00:01:04.100 --> 00:01:05.357
the sizes are so big.

19
00:01:05.357 --> 00:01:09.037
So MD5 is 33 characters, SHA1 was 44.

20
00:01:09.037 --> 00:01:13.321
SHA256 is 65 characters,
that's pretty hard.

21
00:01:13.321 --> 00:01:18.283
Now, we're getting to the randomness
zone where it's much harder to crack or

22
00:01:18.283 --> 00:01:23.186
save all these passwords cuz it will
just blow up your memory really quickly.

23
00:01:23.186 --> 00:01:27.762
While we're still not there yet,
that's still not very secure.

24
00:01:27.762 --> 00:01:32.316
And this is just a common
SHA1 patterns for password,

25
00:01:32.316 --> 00:01:35.388
p@ssword, password1, 2, 3.

26
00:01:35.388 --> 00:01:36.617
Again, this art exists.

27
00:01:36.617 --> 00:01:39.522
I didn't have any of these things.

28
00:01:39.522 --> 00:01:42.693
There are people in the world that
dedicate themselves to security and

29
00:01:42.693 --> 00:01:43.670
cracking security.

30
00:01:43.670 --> 00:01:47.196
So what we need is
something called a SALT.

31
00:01:47.196 --> 00:01:50.044
So the SALT is randomness.

32
00:01:50.044 --> 00:01:53.502
It's just a random number or
hash or it doesn't really matter.

33
00:01:53.502 --> 00:01:56.572
That is completely unique to that
particular process at the time.

34
00:01:56.572 --> 00:02:01.239
So we take the input, we take the SALT
which is that random number, then we give

35
00:02:01.239 --> 00:02:05.941
it to SHA or any hash function, and
then we get what's called the salted hash.

36
00:02:05.941 --> 00:02:10.814
So now, if we were to take that foo
password, we give it some random number,

37
00:02:10.814 --> 00:02:12.503
doesn't really matter.

38
00:02:12.503 --> 00:02:15.710
And we pass through SHA1,
now that password's unrecogniZable.

39
00:02:15.710 --> 00:02:17.755
you will never know what it is.

40
00:02:17.755 --> 00:02:18.890
And it didn't take that much more work.

41
00:02:18.890 --> 00:02:23.695
We're still using cryptographic hashing,
but the bit of randomness means no

42
00:02:23.695 --> 00:02:27.137
one can ever create a rainbow
table of all these things.

43
00:02:27.137 --> 00:02:31.390
Now I'm spending a lot of time on hashing
and cryptographic functions because this

44
00:02:31.390 --> 00:02:33.893
is where you see a lot of
mistakes breaking down.

45
00:02:33.893 --> 00:02:38.288
You see companies that get hacked and
they store their passwords in plain text.

46
00:02:38.288 --> 00:02:42.526
They don't hash any of them,
why, like why?

47
00:02:42.526 --> 00:02:44.584
I just demonstrated why
you shouldn't do that and

48
00:02:44.584 --> 00:02:47.135
I demonstrated that in five minutes,
yet people still do it.

49
00:02:47.135 --> 00:02:51.993
People still use MD5 as hashing, so
when you're creating a web application,

50
00:02:51.993 --> 00:02:54.759
you never store your
password in plain text.

51
00:02:54.759 --> 00:02:56.664
I think most people know that but
you still see it.

52
00:02:56.664 --> 00:02:59.057
People say, I've hashed it using MD5.

53
00:02:59.057 --> 00:03:03.441
We just explained why that's not security
there because people are bad at passwords.

54
00:03:03.441 --> 00:03:05.354
And you know what I've also seen?

55
00:03:05.354 --> 00:03:08.893
Well, I'll just MD5 it ten times.

56
00:03:08.893 --> 00:03:13.965
That way, I'm hashing them hashing and
hashing and that's totally secure.

57
00:03:13.965 --> 00:03:16.757
Computers can do that, too,
really, really easily.

58
00:03:16.757 --> 00:03:19.959
And it takes very little
processing power to guess that.

59
00:03:19.959 --> 00:03:24.664
The only secure solution is to have a
strong cryptographic function that's long

60
00:03:24.664 --> 00:03:28.339
and hard to crack with a random
SALT sort for every single user.

61
00:03:28.339 --> 00:03:31.986
That way, even if someone
cracked your password database,

62
00:03:31.986 --> 00:03:35.212
it's just gibberish cuz
they don't know the SALTs.

63
00:03:35.212 --> 00:03:37.890
They can't reverse that
cryptographic hash.

64
00:03:37.890 --> 00:03:41.891
I know, that's a lot on hashing,
why it's important.

65
00:03:41.891 --> 00:03:43.921
It's kind of roll today.

66
00:03:43.921 --> 00:03:48.819
But security is one of the most basic
things that we fail on and we fail on and

67
00:03:48.819 --> 00:03:49.613
we fail on.

68
00:03:49.613 --> 00:03:52.678
And as increasingly as more of our
infrastructure is built on top of

69
00:03:52.678 --> 00:03:55.265
these web applications and
servers and processes you.

70
00:03:55.265 --> 00:03:59.817
We have to remember, security is the
number one thing we care the most about.

71
00:03:59.817 --> 00:04:01.424
Yes, question.

72
00:04:01.424 --> 00:04:06.007
&gt;&gt; What's the advantage
of SHA1 over MD5 if they

73
00:04:06.007 --> 00:04:10.370
both give the same output for
the same input?

74
00:04:10.370 --> 00:04:13.156
&gt;&gt; The same output, for the same input.

75
00:04:13.156 --> 00:04:16.336
&gt;&gt; Meaning they both
essentially do the same thing.

76
00:04:16.336 --> 00:04:21.329
&gt;&gt; So all hash functions will always give
you the same output for the same input.

77
00:04:21.329 --> 00:04:23.096
It's a mathematical function.

78
00:04:23.096 --> 00:04:26.911
Why we use a SALT is you can't reverse it.

79
00:04:26.911 --> 00:04:30.059
And that's what makes a cryptographic
hash versus just a regular hash function.

80
00:04:30.059 --> 00:04:33.676
A regular hash function, you can reverse
it if you know what the input was.

81
00:04:33.676 --> 00:04:37.193
Or if you knew hash function they use,
essentially,

82
00:04:37.193 --> 00:04:40.016
you can reverse that and run it backwards.

83
00:04:40.016 --> 00:04:46.287
That's not true for every hash function,
but MD5 is particularly pretty easy.

84
00:04:46.287 --> 00:04:52.322
&gt;&gt; Where do we get the SALT, or
what is typically used for the SALT?

85
00:04:52.322 --> 00:04:57.858
&gt;&gt; It could be anything,
math.random, another.

86
00:04:57.858 --> 00:05:01.517
Math.random applied to a hash function,
which will give you another hash.

87
00:05:01.517 --> 00:05:05.439
Combine those together and you solve or
you run those against the hash function

88
00:05:05.439 --> 00:05:07.946
that will give you something
completely random.

89
00:05:07.946 --> 00:05:10.819
Unguessable, unbreakable
with modern technology, and

90
00:05:10.819 --> 00:05:12.878
it doesn't take that long to implement.

91
00:05:12.878 --> 00:05:14.868
What's important is don't do the thing.

92
00:05:14.868 --> 00:05:16.269
Don't roll your own security.

93
00:05:16.269 --> 00:05:18.024
Don't roll your own hash function.

94
00:05:18.024 --> 00:05:19.369
I should have started with that.

95
00:05:19.369 --> 00:05:21.885
Do not write your own hash function.

96
00:05:21.885 --> 00:05:25.276
It's easy to say like,
I'm gonna bit shift this and do this and

97
00:05:25.276 --> 00:05:26.595
add in this magic number.

98
00:05:26.595 --> 00:05:29.242
It seems like, how hard can it be?

99
00:05:29.242 --> 00:05:32.063
And you have something that looks random,
but

100
00:05:32.063 --> 00:05:34.894
it turns out this stuff
is called really hard.

101
00:05:34.894 --> 00:05:40.596
I think, if I'm remembering right,
it's called elliptical curve cryptography.

102
00:05:40.596 --> 00:05:44.580
So what that means is generally given a
hash function, if you run it enough times,

103
00:05:44.580 --> 00:05:48.307
you'll start seeing a curve of the it
looks random, but it's actually no.

104
00:05:48.307 --> 00:05:52.061
Because all mathematical functions
follow some sort of linear break.

105
00:05:52.061 --> 00:05:56.770
So I took an entire semester of hashing or
not hashing but kind of think about

106
00:05:56.770 --> 00:06:01.509
elliptical curve, think about randomness,
how difficult randomness.

107
00:06:01.509 --> 00:06:05.832
I took an entire course in my degree,
because randomness is actually a very,

108
00:06:05.832 --> 00:06:06.972
very hard problem.

109
00:06:06.972 --> 00:06:08.549
Humans aren't random,
computers aren't random.

110
00:06:08.549 --> 00:06:09.586
It's all predictable.

111
00:06:09.586 --> 00:06:12.530
If you follow that curve long enough,

112
00:06:12.530 --> 00:06:17.409
you can figure out what the pattern is,
and you can reverse it.

113
00:06:17.409 --> 00:06:19.449
Two questions.
&gt;&gt; What about Bcrypt?

114
00:06:19.449 --> 00:06:25.014
&gt;&gt; Bcrypt, I want to say bcrypt uses,
let's look it up.

115
00:06:25.014 --> 00:06:31.132
What hash does Bcrypt use?

116
00:06:31.132 --> 00:06:32.081
Blowfish cipher.

117
00:06:34.108 --> 00:06:36.523
Yeah, Blowfish is pretty common.

118
00:06:36.523 --> 00:06:42.870
I try remember what Bcrypt is use in, but
SHA256 is the main one I know most about.

119
00:06:42.870 --> 00:06:45.239
SHA1, you see, MD5 is useful.

120
00:06:45.239 --> 00:06:48.982
Someone pointed out earlier for
validating the contents of a file.

121
00:06:48.982 --> 00:06:53.531
So instead of saying, hey,
John, I sent you an email.

122
00:06:53.531 --> 00:06:54.484
Did you get it?

123
00:06:54.484 --> 00:06:56.588
I'm like, how do I know it's from you?

124
00:06:56.588 --> 00:06:58.508
Or how do I know what that file was?

125
00:06:58.508 --> 00:06:59.900
You can run MD5 on it and

126
00:06:59.900 --> 00:07:04.364
that's gonna give you a hash function
that's about 33 characters or so.

127
00:07:04.364 --> 00:07:06.154
Doesn't matter how big the file is,

128
00:07:06.154 --> 00:07:09.118
MD% is always gonna collapse it
down to a set of characters.

129
00:07:09.118 --> 00:07:12.030
And then you can say,
here's the MD5 of that.

130
00:07:12.030 --> 00:07:13.860
I can validate on my end, and that way,

131
00:07:13.860 --> 00:07:17.204
I know that the file was not tampered
with at all, which is pretty cool.

132
00:07:17.204 --> 00:07:22.754
Again, that's a really common
use case of validating files and

133
00:07:22.754 --> 00:07:26.267
saying, what I sent you is what you got.

134
00:07:26.267 --> 00:07:28.654
&gt;&gt; Picking up on that
previous SALT question,

135
00:07:28.654 --> 00:07:32.211
you mentioned that you could
generate a salt with math.random.

136
00:07:32.211 --> 00:07:36.334
But you wouldn't wanna do that every time
because it has to be the same SALT that's

137
00:07:36.334 --> 00:07:37.069
always used.

138
00:07:37.069 --> 00:07:41.304
So that when you're comparing
the password with the ones locking in,

139
00:07:41.304 --> 00:07:44.460
the SALT of the same way to
compare against the hash so

140
00:07:44.460 --> 00:07:47.431
you need to store the SALT somewhere,
correct?

141
00:07:47.431 --> 00:07:51.289
&gt;&gt; Exactly, yeah, you need to store
the SALT in the database or something so

142
00:07:51.289 --> 00:07:52.919
it knows what to hash against.

143
00:07:52.919 --> 00:07:59.345
But that database is usually encrypted and
usually itself is hashed in some form.

144
00:07:59.345 --> 00:08:01.568
So it's just layers and layers and layers.

145
00:08:01.568 --> 00:08:05.196
If someone really wants get into your
system and they got root access,

146
00:08:05.196 --> 00:08:07.549
there's easier ways of getting passwords.

147
00:08:07.549 --> 00:08:11.823
They can just sniff them over the wire,
in this case, but yeah, you're right.

148
00:08:11.823 --> 00:08:14.420
You'd have to store the SALT somewhere,
otherwise,

149
00:08:14.420 --> 00:08:16.345
you can't apply it later down the line.

150
00:08:20.111 --> 00:08:22.600
I have really good thing on MD5.

151
00:08:22.600 --> 00:08:23.769
Yes, MD5 is still useful.

152
00:08:23.769 --> 00:08:24.363
You don't use it.

153
00:08:24.363 --> 00:08:26.748
It's not considered
cryptographically secure.

154
00:08:26.748 --> 00:08:29.040
Again, we explain why,
it's pretty easy to crack.

155
00:08:29.040 --> 00:08:31.864
I can create every pulse
combination using MD5, but

156
00:08:31.864 --> 00:08:34.444
it is good for
validation of files with the wire.

157
00:08:34.444 --> 00:08:37.758
Sometimes you see open source projects,
things like that.

158
00:08:37.758 --> 00:08:41.776
They'll say, here's the file,
here's the MD5 hash, and

159
00:08:41.776 --> 00:08:44.027
just compare it on your end, too.

160
00:08:44.027 --> 00:08:47.390
So you run MD5 and you can validate,
the file is what they say it is.

161
00:08:49.449 --> 00:08:53.784
Security or what's the right term for it?

162
00:08:53.784 --> 00:08:57.804
Security chain software, no,
the actual word escapes me.

163
00:08:57.804 --> 00:09:02.604
But the idea of you need to secure every
single step of your software from when

164
00:09:02.604 --> 00:09:07.180
you download it to when it's running
on the server is really important.

165
00:09:07.180 --> 00:09:11.276
We hear people about hijacking
NPM libraries, things like that.

166
00:09:11.276 --> 00:09:13.756
And you're saying like, hey,
I'm installing left pad.

167
00:09:13.756 --> 00:09:14.848
Well, how do you know?

168
00:09:14.848 --> 00:09:16.835
How do you know I can
just take that domain and

169
00:09:16.835 --> 00:09:19.866
I created my own version of left
pad which does the functionality?

170
00:09:19.866 --> 00:09:22.625
But also has this little other
functionality that would sniff your

171
00:09:22.625 --> 00:09:23.963
traffic and sends it back to me.

172
00:09:23.963 --> 00:09:27.726
You don't know if I've tampered with the
file, but if you use something like MD5,

173
00:09:27.726 --> 00:09:28.899
you know the file is what?

174
00:09:28.899 --> 00:09:30.139
Here's what the author wrote.

175
00:09:30.139 --> 00:09:31.635
Here's what I have on the other end.

176
00:09:31.635 --> 00:09:35.910
So there is something called now
we're getting into it a little bit.

177
00:09:35.910 --> 00:09:40.006
And if you space out for
a minute, that's totally okay.

178
00:09:40.006 --> 00:09:42.010
There's something called collisions and

179
00:09:42.010 --> 00:09:44.908
something with MD5 is pretty
short at only 33 characters.

180
00:09:44.908 --> 00:09:49.065
It's possible to create a collision,
so I can create an identical file or

181
00:09:49.065 --> 00:09:51.948
I create a file that's
different than your file but

182
00:09:51.948 --> 00:09:54.443
it hash in such a way
that matches your MD5.

183
00:09:54.443 --> 00:09:57.349
Again, because MD5 is not very complex.

184
00:09:57.349 --> 00:10:00.762
With SHA1 collisions are extremely rare,
I don't know if it's ever happened.

185
00:10:00.762 --> 00:10:03.565
SHA256, they're pretty much impossible.

186
00:10:03.565 --> 00:10:06.094
So again, there's pros and
cons of everything.

187
00:10:06.094 --> 00:10:11.731
MD5 is pretty quick, SHA256 takes longer
but one's more secure than the other.

188
00:10:14.564 --> 00:10:16.084
Jem, you spent a long time on hashing.

189
00:10:16.084 --> 00:10:17.849
We talked about some of the use cases.

190
00:10:17.849 --> 00:10:18.847
Where else do you see it?

191
00:10:18.847 --> 00:10:21.228
Cryptocurrencies, it's all about hashing.

192
00:10:21.228 --> 00:10:25.806
Bitcoin uses SHA256,
you solve the puzzle, you run the hash,

193
00:10:25.806 --> 00:10:28.107
you get a prize called a bitcoin.

194
00:10:28.107 --> 00:10:30.923
We, as humans,
decided that bitcoins are worth something,

195
00:10:30.923 --> 00:10:32.992
hence the foundation of modern capitalism.

196
00:10:32.992 --> 00:10:36.391
Or in where are we at, post capitalism?

197
00:10:36.391 --> 00:10:39.027
Is that the right term for
where we are today?

198
00:10:39.027 --> 00:10:40.055
Doesn't matter.

199
00:10:40.055 --> 00:10:44.248
Ethereum uses something called Keccak-256.

200
00:10:44.248 --> 00:10:46.755
You may hear that referred to as SHA3.

201
00:10:46.755 --> 00:10:51.841
We don't use SHA3 because it's not
considered cryptographically secure.

202
00:10:51.841 --> 00:10:53.905
But Ethereum uses a version of that.

203
00:10:53.905 --> 00:10:58.167
But don't say it's SHA3 cuz
the Ethereum people get annoyed, but

204
00:10:58.167 --> 00:11:00.197
that's really what Keccak is.

205
00:11:00.197 --> 00:11:01.555
Anybody heard of Ransomware?

206
00:11:01.555 --> 00:11:02.471
I'm sure you've heard.

207
00:11:02.471 --> 00:11:03.424
What is ransomware?

208
00:11:08.038 --> 00:11:12.645
&gt;&gt; Software that gets maliciously
installed on in a computer

209
00:11:12.645 --> 00:11:16.601
system that encrypts all
the data on that system.

210
00:11:16.601 --> 00:11:18.972
&gt;&gt; Yeah, and
how does it encrypt all that data?

211
00:11:18.972 --> 00:11:21.949
&gt;&gt; Hashing.

212
00:11:21.949 --> 00:11:25.229
&gt;&gt; Yeah, exactly, so instead of taking
your 100 Gigabytes of files and

213
00:11:25.229 --> 00:11:28.185
try to put them in another directory and
put a password around it,

214
00:11:28.185 --> 00:11:31.276
I'll just take all those files and
run it through my hash function.

215
00:11:31.276 --> 00:11:35.455
And that way, I just have this giant block
of text that represents all of your data

216
00:11:35.455 --> 00:11:38.834
but you now can't get to it cuz
I've deleted the original copy and

217
00:11:38.834 --> 00:11:42.236
only I know the key to unlock it
using my SALT in the hash function.

218
00:11:42.236 --> 00:11:46.050
And that's what Ransomware is, and
that's why it's particularly malicious and

219
00:11:46.050 --> 00:11:47.202
it's not easy to crack.

220
00:11:47.202 --> 00:11:50.432
Because as again,
this is cryptographically secure hashing,

221
00:11:50.432 --> 00:11:52.181
you're not supposed to crack it.

222
00:11:52.181 --> 00:11:57.019
Ransomware is a blight,
it will never go away.

223
00:11:57.019 --> 00:12:01.203
And if I can go on a rant here, there is
a very strong correlation between the rise

224
00:12:01.203 --> 00:12:03.651
of Ransomware the rise
of cryptocurrencies.

225
00:12:03.651 --> 00:12:09.328
Cuz I can pay so anonymously,
hence, where these things exist.

226
00:12:09.328 --> 00:12:12.010
But crypto is a very interesting,

227
00:12:12.010 --> 00:12:16.728
I don't know it's pushing
the bounds of what we know about,

228
00:12:16.728 --> 00:12:20.996
one, cryptography, two,
distributed computing.

229
00:12:20.996 --> 00:12:22.981
Interesting topic, another day.

