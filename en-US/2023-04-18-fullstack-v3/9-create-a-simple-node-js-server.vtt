WEBVTT

1
00:00:00.000 --> 00:00:05.741
All right, that wasn't too bad,
writing a server in five minutes.

2
00:00:05.741 --> 00:00:10.226
However, we just wrote a server, but
it doesn't really do anything cuz we don't

3
00:00:10.226 --> 00:00:12.962
have all the files we need
to actually make it run.

4
00:00:12.962 --> 00:00:15.785
We don't have node,
we don't have our index.html.

5
00:00:15.785 --> 00:00:21.620
So let's walk through how to even get
to the steps to get this server to run.

6
00:00:21.620 --> 00:00:26.113
So let's write this node server and
then we're gonna walk through,

7
00:00:26.113 --> 00:00:29.920
talk about Homebrew which is
how we install things on OSX.

8
00:00:29.920 --> 00:00:34.023
Then we're gonna solve node then we're
gonna write the world's most basic HTML

9
00:00:34.023 --> 00:00:37.598
file, cuz you need all these things
to actually get the server to run.

10
00:00:37.598 --> 00:00:39.635
But let's start at the basic node server.

11
00:00:39.635 --> 00:00:42.142
And I'm gonna do this all in Vim.

12
00:00:44.618 --> 00:00:47.219
So we can do wherever,
it doesn't matter in the root or not.

13
00:00:47.219 --> 00:00:51.481
I'm gonna use my temp directory because
I like to keep my file system clean and

14
00:00:51.481 --> 00:00:53.852
I know I will probably
clean this up later.

15
00:00:53.852 --> 00:00:56.910
So I'm gonna say vi simple server.

16
00:00:56.910 --> 00:01:01.429
And this one is not a kind of
random file like we touched, so

17
00:01:01.429 --> 00:01:05.870
this one's js, so
we're gonna say simpleServer.js.

18
00:01:05.870 --> 00:01:07.685
I'm gonna go to insert mode.

19
00:01:07.685 --> 00:01:12.864
So the first thing we need
to import from node is http.

20
00:01:12.864 --> 00:01:19.598
So we say http require(' http').

21
00:01:19.598 --> 00:01:23.152
So that's just the library that allows
us to make requests and response.

22
00:01:23.152 --> 00:01:25.575
And this is all built in the node,
it's fantastic,

23
00:01:25.575 --> 00:01:27.458
we don't have to NPM install anything.

24
00:01:27.458 --> 00:01:31.573
Next thing we're gonna do is
we're gonna import FS, which is,

25
00:01:31.573 --> 00:01:35.402
again, built in a node,
allows us access the file system.

26
00:01:35.402 --> 00:01:42.386
FS file system, pretty straightforward
just like HTTP, nothing groundbreaking.

27
00:01:42.386 --> 00:01:47.190
So FS, and we need to we need to
access the file system because,

28
00:01:47.190 --> 00:01:49.558
well, we're serving files.

29
00:01:49.558 --> 00:01:53.761
This isn't actually a necessary step,
it is for this exercise but

30
00:01:53.761 --> 00:01:56.763
I can actually just write
a response back into,

31
00:01:56.763 --> 00:02:01.655
I can write data back the response and
I never even need to create an HTML file.

32
00:02:01.655 --> 00:02:02.929
We're just doing it for

33
00:02:02.929 --> 00:02:07.144
this exercise because it's a little bit
easier to grok the first time around.

34
00:02:07.144 --> 00:02:10.437
Maybe later we'll just write
directly to responses and

35
00:02:10.437 --> 00:02:12.337
we don't need any files at all.

36
00:02:12.337 --> 00:02:15.558
So next up,
I'm gonna be a good engineer and

37
00:02:15.558 --> 00:02:20.523
I'm gonna define my constants up top,
and constants we like to give

38
00:02:20.523 --> 00:02:25.334
all caps to let people know it's
a constant and it won't change.

39
00:02:25.334 --> 00:02:29.969
You don't necessarily need to do this,
you can just 3,000 later down the line.

40
00:02:29.969 --> 00:02:35.190
We will dive more into ports and
why they're necessary, why we pick 3,000.

41
00:02:35.190 --> 00:02:40.168
But for now we're picking 3,000, 3,000 is
generally accepted as the unused port for

42
00:02:40.168 --> 00:02:40.974
development.

43
00:02:40.974 --> 00:02:43.853
There's nothing that binds to 3,000.

44
00:02:43.853 --> 00:02:48.911
There are some ports that we'll
find out that you can't use,

45
00:02:48.911 --> 00:02:52.996
they're already in use like port 22 is for
SSH,

46
00:02:52.996 --> 00:02:56.999
port 80 is for HTTP,
post 443 is for HTTPS.

47
00:02:56.999 --> 00:03:02.411
Yeah, I used to know of so many more
ports, my memory, it's just the gray hair.

48
00:03:02.411 --> 00:03:05.889
I forget how many ports, there's a lot.

49
00:03:05.889 --> 00:03:07.635
&gt;&gt; 65,000 something.

50
00:03:07.635 --> 00:03:09.607
&gt;&gt; 65,000, that sounds right.

51
00:03:09.607 --> 00:03:11.835
Yeah, so
you're not really gonna run out of ports,

52
00:03:11.835 --> 00:03:14.378
the only chance you have is you
might have a port collision.

53
00:03:14.378 --> 00:03:19.173
But lets just stick with 3,000,
you may see 8,000 in some tutorials,

54
00:03:19.173 --> 00:03:23.204
you may see 8080, those are all
fine too but we define our port.

55
00:03:23.204 --> 00:03:28.863
Next let's define our server, so
we'll say const server = http,

56
00:03:28.863 --> 00:03:34.540
built in library and not complex,
we're gonna say createServer.

57
00:03:34.540 --> 00:03:41.120
Pretty easy and createServer is gonna
take a function as an argument.

58
00:03:43.347 --> 00:03:44.351
Don't mind the way I code,

59
00:03:44.351 --> 00:03:47.148
I just like to close off my parentheses
early because later, I'll be like,

60
00:03:47.148 --> 00:03:49.874
why isn't this working and
it's always a missing bracket parentheses.

61
00:03:49.874 --> 00:03:51.635
So I do it ahead of time.

62
00:03:51.635 --> 00:03:55.356
So say function, again,

63
00:03:55.356 --> 00:03:59.760
I like to do this ahead of time.

64
00:03:59.760 --> 00:04:05.443
So every server,
it doesn't matter if it's node or

65
00:04:05.443 --> 00:04:10.479
tomcats or
try to think as Python with Django or

66
00:04:10.479 --> 00:04:15.402
Flask or Ruby or Rails, it doesn't matter.

67
00:04:15.402 --> 00:04:18.350
Every single server has two basic things.

68
00:04:18.350 --> 00:04:23.130
A request, we'll call it req,
you can call it request if you want, and

69
00:04:23.130 --> 00:04:25.376
a response, we'll call it res.

70
00:04:25.376 --> 00:04:28.368
These are fundamental
things of every server.

71
00:04:28.368 --> 00:04:31.869
The request coming in, so if someone's
making a request to your server,

72
00:04:31.869 --> 00:04:35.438
as we said, servers just serve,
respond to requests, and the response.

73
00:04:35.438 --> 00:04:40.460
What do we tell the request,
the person asking?

74
00:04:40.460 --> 00:04:45.771
So, naturally when we need to
write a response, what do we do?

75
00:04:45.771 --> 00:04:47.197
We do it in the response.

76
00:04:47.197 --> 00:04:50.444
So we'll say res or response.

77
00:04:50.444 --> 00:04:55.837
We're gonna write to the head, which I'll
talk about what it means in a second.

78
00:04:55.837 --> 00:04:57.953
I'm gonna close that off early.

79
00:04:57.953 --> 00:05:02.327
So, we're writing to the head.

80
00:05:02.327 --> 00:05:05.946
So this means the response is made
up of a lot of different parts.

81
00:05:05.946 --> 00:05:09.156
And maybe a little bit later we can
dive into, we can do a console there and

82
00:05:09.156 --> 00:05:11.538
we can dive into what
a response actually looks like.

83
00:05:11.538 --> 00:05:13.784
It's very, very big,
there's a lot of moving parts.

84
00:05:13.784 --> 00:05:14.506
But for now,

85
00:05:14.506 --> 00:05:18.856
we're gonna write directly into that
response into the head of the response.

86
00:05:18.856 --> 00:05:20.769
So we're going to give it a 200.

87
00:05:20.769 --> 00:05:22.776
200 is a status code.

88
00:05:22.776 --> 00:05:26.420
It just means, okay, everything's good.

89
00:05:26.420 --> 00:05:27.901
The most common status code.

90
00:05:27.901 --> 00:05:32.571
I'm so excited, we're gonna dive
way more into these things.

91
00:05:32.571 --> 00:05:34.179
We're gonna talk about request and
response,

92
00:05:34.179 --> 00:05:36.401
we're gonna talk about status codes,
why they're important.

93
00:05:36.401 --> 00:05:38.250
They seem trivial, but
they're really important.

94
00:05:38.250 --> 00:05:41.603
But for now,
we're just gonna say everything's okay and

95
00:05:41.603 --> 00:05:45.172
we wanna be good citizens, so
we wanna give it a content type.

96
00:05:45.172 --> 00:05:52.084
So right now we are writing
a header content type

97
00:05:55.882 --> 00:05:58.218
And it's the text/html.

98
00:05:58.218 --> 00:06:04.615
And this is just to help the browser out,
to let it know, what are we sending back?

99
00:06:04.615 --> 00:06:08.946
I think sometimes you can infer content,
it depends on the browser, but

100
00:06:08.946 --> 00:06:11.861
we generally want to be
as explicit as possible.

101
00:06:11.861 --> 00:06:17.448
So there, we just wrote a header
as part of the response.

102
00:06:17.448 --> 00:06:21.429
Headers are not part of the response body,
they're just metadata attached

103
00:06:21.429 --> 00:06:24.177
to the response that says,
hey, are you logged in?

104
00:06:24.177 --> 00:06:25.312
What are the cookies you have?

105
00:06:25.312 --> 00:06:27.493
What's the status code, etc, etc.

106
00:06:27.493 --> 00:06:29.637
We can go on and on about responses.

107
00:06:29.637 --> 00:06:34.202
But for now, we wrote 200, and we told
it we're sending back an HTML file.

108
00:06:34.202 --> 00:06:37.990
Next, we're gonna create a read stream.

109
00:06:37.990 --> 00:06:39.702
We're not gonna write to it,
we're just going to read.

110
00:06:39.702 --> 00:06:43.310
So we're gonna say,
file system creates a readable stream.

111
00:06:50.397 --> 00:06:54.639
And we're gonna say this fictional
file we haven't created yet,

112
00:06:54.639 --> 00:06:59.045
called index.html and we're just
gonna pipe it into the response.

113
00:06:59.045 --> 00:07:02.760
The streams and node are,
well, they're not new,

114
00:07:02.760 --> 00:07:07.157
they were new when node was invented but
streams are awesome.

115
00:07:07.157 --> 00:07:11.482
So instead of loading up these files and
it's really small at this level,

116
00:07:11.482 --> 00:07:13.939
it's only gonna be less than a kilobyte.

117
00:07:13.939 --> 00:07:18.565
But imagine you had, I don't know,
a 20 megabyte PHP file.

118
00:07:18.565 --> 00:07:21.405
And if you're like, there's no such
thing as a 20 megabyte PHP file,

119
00:07:21.405 --> 00:07:23.234
that just tells me you've
never written PHP.

120
00:07:23.234 --> 00:07:25.191
It is absolutely possible.

121
00:07:25.191 --> 00:07:28.251
So in the normal days,
you'd have to open that entire file.

122
00:07:28.251 --> 00:07:32.193
So you have to load it all in the memory,
pass it into your application server or

123
00:07:32.193 --> 00:07:34.250
your web server, and then serve it out.

124
00:07:34.250 --> 00:07:37.573
But with streams,
we just start at the head of the file and

125
00:07:37.573 --> 00:07:41.049
we just pipe that into the next,
into the response itself.

126
00:07:41.049 --> 00:07:44.220
So it's much faster and
much more memory efficient.

127
00:07:44.220 --> 00:07:48.654
Cognitively, streams can be a little bit
harder to deal with cuz you're not dealing

128
00:07:48.654 --> 00:07:53.105
with a static file that's in place, you're
dealing with a stream of information.

129
00:07:53.105 --> 00:07:56.260
I'm sure there's
the Frontend Masters Course on OGS and

130
00:07:56.260 --> 00:07:59.624
where they get way in the streams and
I will add it to the slides

131
00:07:59.624 --> 00:08:00.392
&gt;&gt; Scott moss.

132
00:08:00.392 --> 00:08:03.539
&gt;&gt; By Scott moss,
also a former Netflix engineer,

133
00:08:03.539 --> 00:08:06.314
there's a theme here about good courses.

134
00:08:06.314 --> 00:08:08.788
No, no, I'm kidding.

135
00:08:08.788 --> 00:08:11.972
Amazing instructor and
a really nice guy, yes.

136
00:08:11.972 --> 00:08:17.293
&gt;&gt; There's a comment about wanting to
get syntax highlighting in them and

137
00:08:17.293 --> 00:08:21.219
someone said, colon syntax space on-
&gt;&gt; Let's try it.

138
00:08:21.219 --> 00:08:25.666
I am a simple man of simple tastes, so

139
00:08:25.666 --> 00:08:29.837
it's :syntax dash on or just on?

140
00:08:29.837 --> 00:08:31.430
&gt;&gt; Space on.

141
00:08:31.430 --> 00:08:36.535
&gt;&gt; It's hard to see but
that is slightly purple.

142
00:08:36.535 --> 00:08:38.143
Pretty nice.

143
00:08:38.143 --> 00:08:39.275
&gt;&gt; It does look nice.

144
00:08:39.275 --> 00:08:41.721
&gt;&gt; There's a way, so I think I copy and

145
00:08:41.721 --> 00:08:46.861
pasted this code out of VS code which
copied my syntax over but really want to

146
00:08:46.861 --> 00:08:52.104
get familiar with VI cuz this is where
we're gonna be writing all that code.

147
00:08:52.104 --> 00:08:56.304
And you can't use VS code on your server,
I mean, you can but we'll talk about that

148
00:08:56.304 --> 00:09:03.127
too, how to do that All right,
and am I missing a bracket?

149
00:09:03.127 --> 00:09:04.229
No, I think I got them all.

150
00:09:04.229 --> 00:09:09.196
Okay, I'm just gonna add a semicolon
just because I'm a purist like that.

151
00:09:09.196 --> 00:09:13.338
So that's our server, great, now what?

152
00:09:13.338 --> 00:09:15.783
Well, the server is not
actually doing anything yet,

153
00:09:15.783 --> 00:09:17.335
it doesn't know where to listen.

154
00:09:17.335 --> 00:09:20.936
So we have to open that port for it and
tell it which port to listen to.

155
00:09:20.936 --> 00:09:25.280
&gt;&gt; That's pretty straightforward,
we're gonna say server.listen and

156
00:09:25.280 --> 00:09:28.139
we're gonna use r constant
of top called PORT.

157
00:09:28.139 --> 00:09:34.082
And this is just for our own benefits,
you don't have to write a console log.

158
00:09:34.082 --> 00:09:37.647
But it's nice to know when
your server actually ran.

159
00:09:37.647 --> 00:09:41.469
Otherwise, it's just an empty process or
it just looks like an empty process.

160
00:09:41.469 --> 00:09:44.646
Ports and we gonna say dollar sign.

161
00:09:44.646 --> 00:09:45.412
PORT.

162
00:09:52.689 --> 00:09:55.506
Okay there you just
wrote a node server and

163
00:09:55.506 --> 00:09:59.300
we walk through each of these lines and
see what they do.

164
00:09:59.300 --> 00:10:03.505
Most of these we're gonna dive into
a bit more about HTTP headers or

165
00:10:03.505 --> 00:10:05.845
response codes, things like that.

166
00:10:05.845 --> 00:10:10.361
But for now, yeah, that's a server in
a couple of lines, but to make it run

167
00:10:10.361 --> 00:10:14.913
we're gonna need a little bit extra
software which you may or may not have.

168
00:10:14.913 --> 00:10:18.103
Some of these things, you may have
if you code in your day-to-day.

169
00:10:18.103 --> 00:10:23.750
But if you don't, let's walk through
how to actually run this right now.

170
00:10:23.750 --> 00:10:25.283
So I'm gonna write quit.

171
00:10:25.283 --> 00:10:28.330
So the file we're missing
right now is the index.html.

172
00:10:28.330 --> 00:10:33.318
We didn't write it, let's see what
the minimal response we can get to make it

173
00:10:33.318 --> 00:10:35.560
say, actually work in a browser.

174
00:10:35.560 --> 00:10:39.497
So I'm gonna say vi index.html.

175
00:10:41.700 --> 00:10:42.886
And I'm gonna be a rebel here.

176
00:10:42.886 --> 00:10:48.541
I'm gonna say hello world and
we'll see this totally invalid HTML.

177
00:10:48.541 --> 00:10:50.224
We'll see if it works in the browser.

178
00:10:50.224 --> 00:10:53.918
Okay, next we need node.

179
00:10:53.918 --> 00:10:58.456
I have node installed,
I like to check the version just in case.

180
00:10:58.456 --> 00:11:00.271
So I'm running node 16.

181
00:11:00.271 --> 00:11:01.803
I think the latest is 19.

182
00:11:01.803 --> 00:11:06.134
Doesn't really matter for this case,
unless you're running something really old

183
00:11:06.134 --> 00:11:09.981
like eight, which I don't know have
streams, but this version's okay.

184
00:11:09.981 --> 00:11:13.871
And you're, if you don't have node
installed, let's brew install node.

185
00:11:13.871 --> 00:11:17.372
So we can say brew install node.

186
00:11:17.372 --> 00:11:21.786
It's looking.

187
00:11:21.786 --> 00:11:26.017
And Node's already installed
on a different version.

188
00:11:26.017 --> 00:11:28.079
I'm using something called NVM.

189
00:11:28.079 --> 00:11:31.465
I really don't want to go to
the rabbit hole of tools,

190
00:11:31.465 --> 00:11:36.080
cuz people be like, but I'm using this,
I'm using MPX to do this.

191
00:11:36.080 --> 00:11:38.914
But NVM is pretty awesome too,

192
00:11:38.914 --> 00:11:45.028
it lets you switch node versions on
the fly so I can say nvm use 19.

193
00:11:45.028 --> 00:11:48.687
I think I have 19 installed and
I just switched another version very nice.

194
00:11:48.687 --> 00:11:51.954
I highly recommend nvm but
that's not the purpose of this,

195
00:11:51.954 --> 00:11:54.711
we really don't have to
go down that rabbit hole.

196
00:11:54.711 --> 00:11:58.574
I did use something called Homebrew,
which if you haven't used it,

197
00:11:58.574 --> 00:12:00.583
I'm about to blow your mind again.

198
00:12:00.583 --> 00:12:04.275
[LAUGH] There's a whole world of
things to make your life easier.

199
00:12:04.275 --> 00:12:07.343
And let's use our Google Foo here.

200
00:12:07.343 --> 00:12:10.453
And I'm gonna do everything
as I do in incognito,

201
00:12:10.453 --> 00:12:12.978
not cuz I'm doing anything nefarious.

202
00:12:12.978 --> 00:12:16.848
I just do this by default, I'm really
against tracking on the internet.

203
00:12:16.848 --> 00:12:20.862
That's a whole other rant I'll go into,
but this type of Homebrew.

204
00:12:26.390 --> 00:12:30.091
So, consult Homebrew,
you can just copy this to your terminal.

205
00:12:30.091 --> 00:12:32.555
I won't to cuz I already
have Homebrew installed and

206
00:12:32.555 --> 00:12:34.915
who knows what happen if I
try to install it twice.

207
00:12:34.915 --> 00:12:38.918
But Homebrew is a package manager for
Mac Os.

208
00:12:38.918 --> 00:12:44.523
Similar to kind of MPM is the node
package manager, Homebrew does that too.

209
00:12:44.523 --> 00:12:48.478
It's not in anything official,
I wouldn't say, Apple's not like, yeah,

210
00:12:48.478 --> 00:12:49.358
we own Homebrew.

211
00:12:49.358 --> 00:12:53.916
But if you've never used Homebrew,
it is fantastic for installing things.

212
00:12:53.916 --> 00:12:55.920
It makes life so much easier.

213
00:12:55.920 --> 00:13:00.887
So if you want to install Homebrew,
you brew installed node and

214
00:13:00.887 --> 00:13:03.523
then now we have node installed.

215
00:13:03.523 --> 00:13:06.253
You don't have to use nvm
if you don't want to,

216
00:13:06.253 --> 00:13:08.377
I think you can brew install nvm too.

217
00:13:08.377 --> 00:13:10.027
So you can you can kind of do it lots.

218
00:13:10.027 --> 00:13:17.807
Okay, so hopefully you all have Homebrew
installed and let's jump back here.

219
00:13:17.807 --> 00:13:22.620
So now I'm gonna say,
node simpleServer.js.

220
00:13:22.620 --> 00:13:26.869
Hey, work the first time,
that almost never happens.

221
00:13:26.869 --> 00:13:30.460
So usually I'm missing something,
but this is only a few lines.

222
00:13:30.460 --> 00:13:37.050
And so let's navigate back to our browser,
so we're gonna use localhost.

223
00:13:39.315 --> 00:13:40.683
I'm going to say port 3000.

224
00:13:40.683 --> 00:13:44.100
The colon gives it a port, look at that.

225
00:13:44.100 --> 00:13:45.944
Our non-HTML page works.

226
00:13:45.944 --> 00:13:49.729
In case you didn't know, browsers
are really familiar with parsing HTML.

227
00:13:49.729 --> 00:13:54.440
You can kind of do whatever you want,
you can make up tags and it'll work.

228
00:13:54.440 --> 00:13:56.530
It'll just ignore them if
it doesn't understand it.

229
00:13:56.530 --> 00:13:58.260
In this case,
we're just writing simple texts.

230
00:13:59.830 --> 00:14:01.040
Nothing super advanced here.

231
00:14:02.280 --> 00:14:05.710
However, this is might be the simplest
HTML file I've ever made.

232
00:14:05.710 --> 00:14:06.720
It's not proper HTML.

233
00:14:08.440 --> 00:14:12.756
So hopefully you got this far, you wrote
a server, you wrote a really simple HTML

234
00:14:12.756 --> 00:14:16.647
file, you installed all the files and
now you have your server running.

235
00:14:16.647 --> 00:14:18.833
From here the possibilities are endless,

236
00:14:18.833 --> 00:14:22.061
I expect you to have Netflix
written in the next couple of days.

237
00:14:22.061 --> 00:14:25.556
Now that you know how to do this, yeah.

238
00:14:25.556 --> 00:14:28.210
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yeah,

239
00:14:28.210 --> 00:14:30.807
probably a weekend project I would say,
a little more advanced.

240
00:14:30.807 --> 00:14:37.819
Next weekend will be some sort of AI
like ChatGPT 4, we're on the way here.

241
00:14:37.819 --> 00:14:42.088
If you're wondering what local host is,
that's just your local computer.

242
00:14:42.088 --> 00:14:48.529
I can also type 127, 0.0,

243
00:14:48.529 --> 00:14:54.979
hey look at that, the same as localhost.

244
00:14:54.979 --> 00:14:58.635
Localhost is just a shortcut for
127.0.0.1.

245
00:14:58.635 --> 00:15:04.347
That is a reserved IP, all computers
have it, it's just a loopback command.

246
00:15:04.347 --> 00:15:07.343
It just says look at the open
ports on my local machine.

247
00:15:07.343 --> 00:15:12.323
There are a few other reserved IPs,
what's one?

248
00:15:12.323 --> 00:15:17.766
This isn't my network so
I'm gonna say 192.168,

249
00:15:17.766 --> 00:15:22.440
I don't know it's gonna pop up here, .0.1.

250
00:15:22.440 --> 00:15:24.021
Will it work?

251
00:15:24.021 --> 00:15:26.753
I don't know, probably won't work.

252
00:15:26.753 --> 00:15:32.773
That's usually 1, 2 or
192.168.0.1 is usually your router.

253
00:15:32.773 --> 00:15:38.670
It could be 198.168.1.1.2.

254
00:15:38.670 --> 00:15:41.497
So go home and try that out and
see what pops up.

255
00:15:41.497 --> 00:15:43.586
It's probably gonna be your router,
your modem.

256
00:15:43.586 --> 00:15:46.080
So these are just local addresses
that are well known, if you're, Jem,

257
00:15:46.080 --> 00:15:47.460
how do you remember all these things?

258
00:15:47.460 --> 00:15:51.117
I don't know, I've just done it enough
times that these things kind of build into

259
00:15:51.117 --> 00:15:52.073
your muscle memory.

260
00:15:55.291 --> 00:16:01.806
&gt;&gt; I'd like to imagine that the browser
engineers appreciate how bad we are, and

261
00:16:01.806 --> 00:16:06.995
so it's like as permissive
a definition of HTML as possible.

262
00:16:06.995 --> 00:16:12.230
&gt;&gt; [LAUGH] Browsers are probably the most
forgiving software on the planet.

263
00:16:12.230 --> 00:16:15.070
They let you get away with
pretty much anything.

264
00:16:15.070 --> 00:16:17.060
And couple that with
the fact that JavaScript,

265
00:16:17.060 --> 00:16:19.790
one of its core features is
its backwards compatible.

266
00:16:19.790 --> 00:16:24.080
So that web page you wrote in 2002
in JavaScript will still work today.

267
00:16:25.990 --> 00:16:30.095
I mean, it's absolutely incredible,
I will gush on about this later but

268
00:16:30.095 --> 00:16:33.620
the internet in my opinion is
man's greatest achievements.

269
00:16:33.620 --> 00:16:37.326
It's just the amount of work and
collaboration cooperation to make all

270
00:16:37.326 --> 00:16:41.527
these things happen, all these different
pieces of technology work together,

271
00:16:41.527 --> 00:16:44.450
without some overviewing
government governing body.

272
00:16:44.450 --> 00:16:46.490
It's just, it's unparalleled.

273
00:16:46.490 --> 00:16:49.010
We've never achieved anything
else like it in humanity.

274
00:16:50.400 --> 00:16:53.504
Anyways, I'm going on,
you can tell I love what I do and

275
00:16:53.504 --> 00:16:56.900
I love Full Stack and
diving into these things.

276
00:16:56.900 --> 00:17:00.543
So hopefully, if you got stuck on
something, double check your code,

277
00:17:00.543 --> 00:17:05.410
you might be missing a quotation mark or
closing a bracket, something like that.

278
00:17:05.410 --> 00:17:07.620
Again, the node version doesn't
matter as long as it's high enough.

279
00:17:07.620 --> 00:17:10.425
The default that you install with
brew should be high enough to run

280
00:17:10.425 --> 00:17:11.300
a readable stream.

