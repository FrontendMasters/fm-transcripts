WEBVTT

1
00:00:00.000 --> 00:00:06.821
Okay, let's go ahead and do this together,
and I will walk and talk at the same time.

2
00:00:06.821 --> 00:00:10.183
So we're creating a virtual host, virtual
server, whatever you wanna call it.

3
00:00:10.183 --> 00:00:13.069
So essentially, it's a virtual server.

4
00:00:13.069 --> 00:00:15.556
It's a fake server according to NGINX,

5
00:00:15.556 --> 00:00:19.357
we can create infinite number
of servers on top of our server,

6
00:00:19.357 --> 00:00:23.763
which is running on top of the server
which is running on DigitalOcean.

7
00:00:23.763 --> 00:00:25.714
Super meta, no one's laughing so

8
00:00:25.714 --> 00:00:29.427
I can tell you your brain is at its
limit cuz that was pretty funny.

9
00:00:29.427 --> 00:00:32.442
I had that one saved up but
let's create a virtual server here.

10
00:00:32.442 --> 00:00:35.201
So we're gonna call it server.

11
00:00:35.201 --> 00:00:36.555
Pretty original.

12
00:00:36.555 --> 00:00:40.962
That's just what NGINX it's called
to create a virtual server.

13
00:00:40.962 --> 00:00:45.019
We want it to listen on port 80,
not port 90, and

14
00:00:45.019 --> 00:00:50.474
we want it to be the default server for
all requests that are coming in.

15
00:00:50.474 --> 00:00:53.791
And the syntax highlighting here
is actually pretty nice and

16
00:00:53.791 --> 00:01:02.779
then we wanna listen again,
Colon, colon, colon port 80.

17
00:01:02.779 --> 00:01:04.176
And again, default server.

18
00:01:04.176 --> 00:01:07.835
So that :::80 is just the IPv6.

19
00:01:07.835 --> 00:01:14.007
So we're listening on both just in case
we get some requests via over IPv6.

20
00:01:14.007 --> 00:01:18.425
Colon, we're still gonna
put the route as /var/www,

21
00:01:18.425 --> 00:01:23.779
we don't need to, but it'll make
a good fallback page just in case.

22
00:01:23.779 --> 00:01:27.370
And we can say the root there is index or
index.html.

23
00:01:27.370 --> 00:01:29.450
They're the files it's gonna look for
first.

24
00:01:32.342 --> 00:01:36.178
Again, we don't really need to do that,
but it doesn't hurt to be extra safe.

25
00:01:36.178 --> 00:01:41.039
So the server name is actually important.

26
00:01:41.039 --> 00:01:42.903
It's important for routing requests.

27
00:01:42.903 --> 00:01:45.743
For this particular virtual server,
it doesn't matter cuz this is the default.

28
00:01:45.743 --> 00:01:47.855
So all requests are gonna go here anyways.

29
00:01:47.855 --> 00:01:50.703
However, when we get
to a part self domain,

30
00:01:50.703 --> 00:01:54.007
the server does the matter cuz
that's the request coming and

31
00:01:54.007 --> 00:01:57.734
saying I want to go to test.jemstack.lol
or something like that.

32
00:01:57.734 --> 00:02:03.736
But in this case,
you can keep a blank or I'm gonna say my

33
00:02:03.736 --> 00:02:08.641
are rename so
jemstack.lol the best of all stacks.

34
00:02:08.641 --> 00:02:10.401
Last we need to make a location block.

35
00:02:10.401 --> 00:02:15.215
We talked about location blocks tell
NGINX where to route the request to.

36
00:02:15.215 --> 00:02:18.515
So in this case,
we're gonna use that proxy pass directly.

37
00:02:18.515 --> 00:02:22.549
So now instead of being a web server,
NGINX is just a proxy.

38
00:02:22.549 --> 00:02:25.566
It's gonna take the request saying,
you need to go here, and there we go.

39
00:02:25.566 --> 00:02:28.020
So proxy_pass

40
00:02:28.020 --> 00:02:35.574
http://127.0.0.1:3000.

41
00:02:39.113 --> 00:02:44.921
Almost forgot my semicolon, there we go.

42
00:02:44.921 --> 00:02:50.778
Okay, So did we do something wrong?

43
00:02:50.778 --> 00:02:52.786
Hmm, I don't know.

44
00:02:52.786 --> 00:02:58.327
We'll say nginx-t, There's a problem.

45
00:02:58.327 --> 00:03:01.187
Nginx-t will run through
our configuration and

46
00:03:01.187 --> 00:03:04.963
just double check before you
restart NGINX and make things bad.

47
00:03:04.963 --> 00:03:07.740
It will just validate all
your configuration files.

48
00:03:07.740 --> 00:03:10.721
So one thing we didn't do is we
created a new sites enabled,

49
00:03:10.721 --> 00:03:13.002
but we didn't actually
link it to anything.

50
00:03:13.002 --> 00:03:16.809
So let's go ahead and do that now.

51
00:03:16.809 --> 00:03:20.697
So we need to edit our
actual nginx comp file.

52
00:03:20.697 --> 00:03:22.133
We're gonna remove the default.

53
00:03:22.133 --> 00:03:25.137
We're only gonna put in the sites
enabled for full stack.

54
00:03:25.137 --> 00:03:26.644
We don't have to do this.

55
00:03:26.644 --> 00:03:28.120
This will just make our life easier.

56
00:03:28.120 --> 00:03:29.314
We're not dealing with
the default anymore.

57
00:03:29.314 --> 00:03:32.264
We don't have to worry about
us being caught anymore.

58
00:03:34.757 --> 00:03:40.096
So you may have to scroll to find
the virtual hosts in your etc nginx conf.

59
00:03:50.908 --> 00:03:55.340
And then just delete the one that
says etc nginx enabled default or

60
00:03:55.340 --> 00:04:00.431
anything related that we only want our
one virtual host running right now.

61
00:04:03.973 --> 00:04:07.264
So I will do that now.

62
00:04:07.264 --> 00:04:09.182
Of course, I need to sudo this,

63
00:04:09.182 --> 00:04:13.955
don't get caught like me when you make
a bunch of changes and you didn't fix it.

64
00:04:19.653 --> 00:04:20.959
And I'm like, where's everything?

65
00:04:20.959 --> 00:04:24.565
I'm just gonna type slash and
I'll say virtual.

66
00:04:24.565 --> 00:04:26.052
Didn't find it.

67
00:04:26.052 --> 00:04:28.705
There we go.

68
00:04:28.705 --> 00:04:30.397
Case sensitive, question.

69
00:04:30.397 --> 00:04:31.265
Yes.

70
00:04:31.265 --> 00:04:36.612
&gt;&gt; Could you explain more
of why we use nginx instead

71
00:04:36.612 --> 00:04:41.179
of just using node directly,
&gt;&gt; Yeah, great question.

72
00:04:41.179 --> 00:04:44.436
The question is, why don't we
use nginx and not know directly?

73
00:04:44.436 --> 00:04:46.000
NGINX is faster.

74
00:04:46.000 --> 00:04:47.757
It's like I said it's written in C.

75
00:04:47.757 --> 00:04:54.221
It's a lower level language then no GS,
which is written on top of C++, I forget.

76
00:04:54.221 --> 00:04:57.431
But it's fear when no js is built on top.

77
00:04:57.431 --> 00:05:01.545
I mean, it's built on top of JavaScript
which is built on top of something else.

78
00:05:01.545 --> 00:05:06.387
Nginx has a lot more capabilities than our
notes server like if we wanna change where

79
00:05:06.387 --> 00:05:10.812
we log compression turning on HB2 and
turning on SSL doing all that in node,

80
00:05:10.812 --> 00:05:14.293
we can do it but it's a pain in
the butt I've done it before.

81
00:05:14.293 --> 00:05:16.280
It's not fun messing with certs.

82
00:05:16.280 --> 00:05:18.905
Whereas nginx, this is all built
in because it's bread and butter.

83
00:05:18.905 --> 00:05:20.332
It's what it does all the time.

84
00:05:20.332 --> 00:05:23.189
Nginx can handle way more requests and
proxy them.

85
00:05:23.189 --> 00:05:24.879
It can act as a load balancer.

86
00:05:24.879 --> 00:05:28.212
It can do everything node can do,
but much, much faster and

87
00:05:28.212 --> 00:05:29.619
much more efficiently.

88
00:05:29.619 --> 00:05:31.319
So that's why we use nginx.

89
00:05:31.319 --> 00:05:35.491
When we get to, if we had, say,
multiple servers we wanted to run,

90
00:05:35.491 --> 00:05:37.188
how would you handle that?

91
00:05:37.188 --> 00:05:40.049
If I have one node server and
I have a Python server?

92
00:05:40.049 --> 00:05:43.344
How would you handle that,
yeah you can do routing somewhere but

93
00:05:43.344 --> 00:05:46.346
at some layer you have to do
the routing to your IP address.

94
00:05:46.346 --> 00:05:49.892
So it's better to have the centralized
router where everything's maintained and

95
00:05:49.892 --> 00:05:51.622
it's just directing the requests out.

96
00:05:51.622 --> 00:05:54.878
And when we get to things like
subdomains and load balancers,

97
00:05:54.878 --> 00:05:58.081
you'll see the real power of
nginx why this all makes sense.

98
00:06:00.112 --> 00:06:02.574
So I'm gonna delete this line.

99
00:06:02.574 --> 00:06:08.574
Actually, I'm set to modify it Cuz
we don't want to sites enabled and

100
00:06:08.574 --> 00:06:13.520
we wanna be really specific, so we just
want, we don't want all the sites enabled.

101
00:06:13.520 --> 00:06:17.094
We want just the one full stack frontend.

102
00:06:22.662 --> 00:06:24.233
And let's write quit.

103
00:06:27.083 --> 00:06:31.014
Let me just check my own instructions,
make sure I didn't do anything wrong.

104
00:06:31.014 --> 00:06:34.719
So we wanna validate the nginx
configuration, nginx-t.

105
00:06:37.244 --> 00:06:40.597
Can I open logfile, push denied.

106
00:06:40.597 --> 00:06:42.441
These are directed to really make sense.

107
00:06:47.744 --> 00:06:49.762
Maybe I need to sudo that one.

108
00:06:52.224 --> 00:06:57.475
Okay, so you may have to sudo the nginx-t
because it has to access some

109
00:06:57.475 --> 00:07:02.466
of the log files like var log or
air log which usually acts as a sudo.

110
00:07:04.894 --> 00:07:09.132
So if you sudo nginx-t, it's just
validating you wrote everything correctly

111
00:07:09.132 --> 00:07:12.736
so what's next thing we do anytime
we modify a configuration file,

112
00:07:12.736 --> 00:07:14.081
we restart the process.

113
00:07:14.081 --> 00:07:17.235
So sudo service,

114
00:07:23.484 --> 00:07:27.593
What's next, restart, restart, reload.

115
00:07:27.593 --> 00:07:34.350
And now Let's check it out.

116
00:07:34.350 --> 00:07:35.164
Bob.

117
00:07:35.164 --> 00:07:36.976
Hey, we're getting somewhere in one.

118
00:07:36.976 --> 00:07:38.514
My domain name is finally hooked up.

119
00:07:38.514 --> 00:07:41.875
All right, yours may not be but
hopefully it's propagated out.

120
00:07:41.875 --> 00:07:43.201
But what are we missing?

121
00:07:44.943 --> 00:07:49.788
Now we got the port, what are we missing?

122
00:07:49.788 --> 00:07:50.867
We're not running a server.

123
00:07:50.867 --> 00:07:52.631
We never actually started our application.

124
00:07:52.631 --> 00:07:55.798
We wrote it but we never,
it's all the steps along the way and

125
00:07:55.798 --> 00:07:57.927
it's really easy to miss these things.

126
00:07:57.927 --> 00:08:03.108
So let's go ahead and fire up Our node

127
00:08:03.108 --> 00:08:08.678
server again, or
let's go back to our server,

128
00:08:08.678 --> 00:08:13.705
clear, and we'll just say node app.js.

129
00:08:13.705 --> 00:08:15.333
So we started our server.

130
00:08:15.333 --> 00:08:18.938
Let's keep it running and
switch the window here.

131
00:08:25.886 --> 00:08:30.276
Hey, hopefully you're here.

132
00:08:30.276 --> 00:08:32.421
There's a lot of in between steps,

133
00:08:32.421 --> 00:08:36.793
which we will simplify in some ways but,
congratulations, you did it.

134
00:08:36.793 --> 00:08:38.219
You bought a domain.

135
00:08:38.219 --> 00:08:42.260
You hooked it up to your server,
you created the server from nothing.

136
00:08:42.260 --> 00:08:43.232
And I mean nothing.

137
00:08:43.232 --> 00:08:44.357
We had install everything ourselves.

138
00:08:44.357 --> 00:08:48.201
We had to handwrite all this stuff, we had
to hand tune our nginx configuration, but

139
00:08:48.201 --> 00:08:49.405
now it's all connected.

140
00:08:49.405 --> 00:08:53.991
Now you're probably in a place that you're
much more familiar with as a front end

141
00:08:53.991 --> 00:08:58.577
engineer which is NPM installing some
modules, maybe Express, maybe React and

142
00:08:58.577 --> 00:09:02.030
you can build a full web page
just from where we're at today.

143
00:09:02.030 --> 00:09:05.512
So we got to the place that hopefully
most of you are comfortable with.

144
00:09:05.512 --> 00:09:10.168
If you wanna find, you can use NPM install
create react app or something like that.

145
00:09:10.168 --> 00:09:14.403
And you can build a full fledged service
just from the steps we did here.

146
00:09:15.985 --> 00:09:21.505
Now, of course, the danger of running

147
00:09:21.505 --> 00:09:26.533
that node is running node app.js.

148
00:09:26.533 --> 00:09:30.881
It works now, but the minute and
I close my laptop, I'm gonna disconnect

149
00:09:30.881 --> 00:09:35.105
that Shell and the shell's gonna exit and
it's not gonna run anymore.

150
00:09:35.105 --> 00:09:38.954
So this is the last step we're gonna
do today because I wanna make sure your

151
00:09:38.954 --> 00:09:40.954
webpage stays up and running for now.

152
00:09:40.954 --> 00:09:44.797
But we're gonna start a process
manager called pm2, and

153
00:09:44.797 --> 00:09:48.563
this is installed globally,
I wanna make make it clear so

154
00:09:48.563 --> 00:09:51.873
we're doing sudo npm i- g,
this globally pm2.

155
00:09:51.873 --> 00:09:56.393
Pm2 is gonna keep our node application up
and running even if we close the shell, or

156
00:09:56.393 --> 00:09:58.536
even if we close the exit the terminal.

157
00:09:58.536 --> 00:10:01.830
So let's go ahead and do that now.

158
00:10:01.830 --> 00:10:03.901
So I'm gonna kill my server now.

159
00:10:03.901 --> 00:10:11.420
So sudo, oops, apps, old habit npm i.

160
00:10:11.420 --> 00:10:16.733
Pm2 and we'll say it's a global
install the order doesn't matter.

161
00:10:28.386 --> 00:10:33.492
All right, so npm install, this we
should be pretty familiar with now.

162
00:10:33.492 --> 00:10:41.047
So let's go ahead and pm2,
run pm2, start our app.js.

163
00:10:41.047 --> 00:10:43.645
And we can set it to watch if we want

164
00:10:49.985 --> 00:10:51.489
Unknown option -t.

165
00:10:53.953 --> 00:10:59.042
I don't know why it's -t,
I didn't do anything, but that's fine.

166
00:10:59.042 --> 00:11:03.925
So let's check it out pm2, is it lists?

167
00:11:03.925 --> 00:11:04.745
Nothing running.

168
00:11:04.745 --> 00:11:08.091
So I did something wrong here.

169
00:11:08.091 --> 00:11:12.671
Pm2 start apps, yes may take up a watch.

170
00:11:12.671 --> 00:11:13.696
There we go.

171
00:11:13.696 --> 00:11:15.661
That's right --watch.

172
00:11:15.661 --> 00:11:17.651
But that's all right.

173
00:11:17.651 --> 00:11:21.935
So now we can say pm2 lists.

174
00:11:21.935 --> 00:11:26.252
And even if I close my shell right now,
it's gonna keep the application up and

175
00:11:26.252 --> 00:11:29.242
running cuz remember,
we're still in the server and

176
00:11:29.242 --> 00:11:31.582
we're just keeping this process alive.

177
00:11:31.582 --> 00:11:34.278
But if we, say, had to reboot our
server or something like that,

178
00:11:34.278 --> 00:11:37.612
we wanna make sure our application comes
back online so we don't have to manually

179
00:11:37.612 --> 00:11:40.377
do it every single time there's
an update or something like that.

180
00:11:40.377 --> 00:11:43.169
Fortunately, pm2 is really powerful so
let's just do that.

181
00:11:43.169 --> 00:11:46.819
Say PM2 save, which is gonna
save our current process list,

182
00:11:46.819 --> 00:11:48.581
our current configuration.

183
00:11:48.581 --> 00:11:50.475
We're gonna say, pm2 startup.

184
00:11:52.147 --> 00:11:55.720
It's gonna give us some funky command
about adding things to the path.

185
00:11:55.720 --> 00:11:59.729
You can just copy this whole command.

186
00:11:59.729 --> 00:12:03.372
And this is just adding it to
the system data on startup.

187
00:12:06.507 --> 00:12:07.513
There we go.

188
00:12:07.513 --> 00:12:12.821
So now, if our server reboots or
anything, pm2 is gonna bring

189
00:12:12.821 --> 00:12:17.744
up our node application and
it's running in perpetuity.

190
00:12:17.744 --> 00:12:18.476
Whoo!

191
00:12:18.476 --> 00:12:20.887
&gt;&gt; What about server errors?

192
00:12:20.887 --> 00:12:24.143
Like, will the server restart?

193
00:12:24.143 --> 00:12:27.441
I'm just thinking of it like,
node mod locally,

194
00:12:27.441 --> 00:12:32.874
like restarting the server anytime there's
a file change or anything like that.

195
00:12:32.874 --> 00:12:37.478
Would that, cause pm2 handle that kind
of situation with like EHRs server?

196
00:12:37.478 --> 00:12:38.149
&gt;&gt; Yeah.

197
00:12:38.149 --> 00:12:41.787
So pm2 is always gonna, that's what's
great about if it's a server crash for

198
00:12:41.787 --> 00:12:43.918
some reason,
it will always bring it back up.

199
00:12:43.918 --> 00:12:46.848
Now the level of configuration
you want on the pm2

200
00:12:46.848 --> 00:12:50.845
whether it sends you an email every
time it restarts or just logs it.

201
00:12:50.845 --> 00:12:54.485
You generally wanna know that if your
server is crashing all the time, you may

202
00:12:54.485 --> 00:12:58.069
not detect that because pm2 is gonna
keep you starting in the background and

203
00:12:58.069 --> 00:12:58.915
you never see it.

204
00:12:58.915 --> 00:13:01.724
So you gonna look at the logs or
make sure you're piping

205
00:13:01.724 --> 00:13:05.895
the log output to somewhere you can see
it, like an email or something like that.

206
00:13:05.895 --> 00:13:08.305
But that's a great question, yeah,

207
00:13:08.305 --> 00:13:13.139
that's the danger of a process manager,
it can hide a lot of the downsides.

208
00:13:13.139 --> 00:13:14.602
And watch.

209
00:13:14.602 --> 00:13:15.904
I think it's a --watch.

210
00:13:15.904 --> 00:13:21.266
I'll fix that will allow you to restart
the server if you make a change.

211
00:13:21.266 --> 00:13:23.171
So pm2 is really, really nice.

212
00:13:23.171 --> 00:13:25.432
It does a lot of hard work for us.

213
00:13:25.432 --> 00:13:28.134
And you saw that long path
command we had to copy.

214
00:13:28.134 --> 00:13:30.320
That would be a pain if we
had to do that ourselves.

215
00:13:30.320 --> 00:13:34.036
So pm2 just generates that for
us, and we just copy and paste.

