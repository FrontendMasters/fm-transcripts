WEBVTT

1
00:00:00.000 --> 00:00:01.868
So I wanna cover redirection.

2
00:00:01.868 --> 00:00:05.979
So how do you make something redirect
to somewhere else from Nginx?

3
00:00:05.979 --> 00:00:09.999
But not too hard, but a useful command.

4
00:00:09.999 --> 00:00:14.578
We're gonna talk about Gzip, what it is,
how and how compression works.

5
00:00:14.578 --> 00:00:18.412
Then we're going to add a subdomain to
your application, just in case you need

6
00:00:18.412 --> 00:00:22.090
one, it's always helpful to do that,
again, it's a little bit tricky.

7
00:00:22.090 --> 00:00:25.518
But it's not too tricky, but
it's not as intuitive as you think.

8
00:00:27.634 --> 00:00:32.216
So the first one, if you want to
modify your virtual configuration,

9
00:00:32.216 --> 00:00:37.833
your virtual server and say, I need a when
I go to jumps act out LOL, slash help.

10
00:00:37.833 --> 00:00:41.610
It actually just redirects me to
the Mozilla Developer documentation.

11
00:00:41.610 --> 00:00:43.491
You can do that.

12
00:00:43.491 --> 00:00:46.792
You don't have to do this right
now this just an example of how

13
00:00:46.792 --> 00:00:48.423
to do a redirection in Nginx.

14
00:00:58.809 --> 00:01:00.955
Let's talk a bit about Gzip.

15
00:01:00.955 --> 00:01:02.946
Anybody know what Gzip is,
have you heard of it?

16
00:01:08.495 --> 00:01:11.748
Well, most things why, not most things,
html pages ec cetera, but

17
00:01:11.748 --> 00:01:13.909
they follow Gzips,
a lot of things are gzipped.

18
00:01:13.909 --> 00:01:21.641
Gzip is just a compression algorithm that
is run on Nginx, that compresses things.

19
00:01:21.641 --> 00:01:24.677
The browser, it's one of the few things
the browser actually knows how to do.

20
00:01:24.677 --> 00:01:27.741
So that way we're not sending
these massive files over the wire,

21
00:01:27.741 --> 00:01:30.482
we're actually sending
compressed files over the wire.

22
00:01:30.482 --> 00:01:34.263
And the browser knows how to unpack them,
Nginx knows how to pack them up.

23
00:01:34.263 --> 00:01:38.048
We can adjust our Gzip
settings in /@cnginx.conf and

24
00:01:38.048 --> 00:01:41.600
you scroll down the Gzip,
and you can set the level.

25
00:01:41.600 --> 00:01:45.647
Now the temptation is always
accept the compression level,

26
00:01:45.647 --> 00:01:47.959
which says about 6 by the faults.

27
00:01:47.959 --> 00:01:51.803
You want to say, I want to turn it to 9,
just as it goes, but remember,

28
00:01:51.803 --> 00:01:55.151
that means every single connection
coming from this computer,

29
00:01:55.151 --> 00:01:57.829
that needs extra CPU power
to do that compression.

30
00:01:57.829 --> 00:02:00.705
So it's got to take those files,
and it's got to compress them,

31
00:02:00.705 --> 00:02:02.866
it's gonna decompress it
the other way as well.

32
00:02:02.866 --> 00:02:06.982
So generally 6 is considered the right
balance, speed and performance.

33
00:02:06.982 --> 00:02:09.051
If you're like, hey,
I'm not running a lot and

34
00:02:09.051 --> 00:02:11.388
I want as much performance as possible,
turn up to 9.

35
00:02:11.388 --> 00:02:14.666
But in general in production systems,
you're not gonna do that.

36
00:02:17.357 --> 00:02:22.163
And feel free to play with it in /etc
says vi etc/nginx/nginx.conf if you

37
00:02:22.163 --> 00:02:27.062
want to mess with Gzip, you don't need
to but it's nice to know it's there.

38
00:02:29.771 --> 00:02:33.026
But how does compression work?

39
00:02:33.026 --> 00:02:36.855
And this is my most simplified
example I can think of.

40
00:02:36.855 --> 00:02:42.318
So compression algorithm is
just a way of rewriting a file,

41
00:02:42.318 --> 00:02:45.063
essentially, in a much way.

42
00:02:45.063 --> 00:02:48.284
So a file is always going to break
down into 1s and 0s at the core,

43
00:02:48.284 --> 00:02:51.760
that's what we're doing right now,
just moving 1s and 0s around.

44
00:02:51.760 --> 00:02:54.925
So what if, instead of having
this long chain of 1s and 0s,

45
00:02:54.925 --> 00:02:57.360
we just describe it
a little bit differently?

46
00:02:57.360 --> 00:03:02.797
So compression algorithm will say,
hey, you got this line of code or

47
00:03:02.797 --> 00:03:07.670
this file, how about we just
described it as it's 4 0s, and

48
00:03:07.670 --> 00:03:12.021
then 3 1s, and then 1 0,
then 1 1s, then 5 0s?

49
00:03:12.021 --> 00:03:14.325
You do that over and over and over again.

50
00:03:14.325 --> 00:03:18.213
And it turns out you have this giant
gigabyte file, and you can compress it

51
00:03:18.213 --> 00:03:21.365
down to a few megabytes just
by describing it differently.

52
00:03:21.365 --> 00:03:23.931
And that's how a compression
algorithm works, and

53
00:03:23.931 --> 00:03:26.448
there's different ways
of describing the files.

54
00:03:26.448 --> 00:03:31.514
Now you're saying that's awesome, Jem,
what's the difference between compression

55
00:03:31.514 --> 00:03:36.055
and hashing because they seem a little
bit different or they seem very similar?

56
00:03:36.055 --> 00:03:40.420
Well, compression always has a fixed
output, and it's going to be as small as

57
00:03:40.420 --> 00:03:44.603
possible versus hashing, we don't
actually care about the size as much.

58
00:03:44.603 --> 00:03:46.953
So that's really kind of the difference.

59
00:03:46.953 --> 00:03:50.138
And one is designed to be unpacked,
like you can't compress something without

60
00:03:50.138 --> 00:03:52.291
uncompressing it, otherwise,
what's the point?

61
00:03:52.291 --> 00:03:55.743
Versus hashing is not necessarily designed
to be reversed the other way around.

62
00:03:58.587 --> 00:04:01.246
And this is just a random fun fact,

63
00:04:01.246 --> 00:04:06.200
because we're front engineers
here you can't Gzip a picture,

64
00:04:06.200 --> 00:04:10.709
why nots, but you can but
it won't do anything, why not?

65
00:04:10.709 --> 00:04:12.057
&gt;&gt; They're compressed.
&gt;&gt; That's right,

66
00:04:12.057 --> 00:04:13.951
the images are already compressed.

67
00:04:13.951 --> 00:04:19.556
That's why the old days, anybody who
clitter on a bitmap knows that a bitmap

68
00:04:19.556 --> 00:04:24.563
is 5 megabytes, but a png of that
same image can be 30 kilobytes.

69
00:04:24.563 --> 00:04:30.485
Because png, I kind of think it's some
other, what are some other image formats?

70
00:04:30.485 --> 00:04:31.020
&gt;&gt; JPEG.

71
00:04:31.020 --> 00:04:31.787
&gt;&gt; JPEG.
&gt;&gt; JPEG.

72
00:04:31.787 --> 00:04:33.508
&gt;&gt; Isn't that lossy?

73
00:04:33.508 --> 00:04:37.397
&gt;&gt; JPEG can be lossy, yeah and
PNG isn't necessarily, but

74
00:04:37.397 --> 00:04:41.624
those are all compression
algorithms we're talking about.

75
00:04:41.624 --> 00:04:43.119
You remember MP3s?

76
00:04:43.119 --> 00:04:46.059
I know I'm dealing with stuff, I can't
believe if you all know what MP3 are, but

77
00:04:46.059 --> 00:04:47.672
&gt;&gt; How do they not know what MP look like?

78
00:04:47.672 --> 00:04:50.157
Did everybody move over to FLAC or
something?

79
00:04:50.157 --> 00:04:52.825
&gt;&gt; Some people don't know what MP3,
like why would you know anymore?

80
00:04:52.825 --> 00:04:54.784
Spotify, and YouTube, and all that.

81
00:04:54.784 --> 00:04:55.691
&gt;&gt; Yeah, YouTube, yes.

82
00:04:55.691 --> 00:04:59.735
&gt;&gt; Yeah, MP3 is what
a compression of a WAV file, and

83
00:04:59.735 --> 00:05:02.474
they're all from the same group.

84
00:05:02.474 --> 00:05:05.141
JPEG is joint picture expert group.

85
00:05:05.141 --> 00:05:08.118
MP3 is motion picture or that's MPEG but

86
00:05:08.118 --> 00:05:13.485
same motion picture expert group,
again that we compressed down to MP3.

87
00:05:13.485 --> 00:05:16.448
Yeah, these are just
compression algorithms, really,

88
00:05:16.448 --> 00:05:17.782
really powerful things.

