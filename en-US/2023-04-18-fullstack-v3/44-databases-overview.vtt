WEBVTT

1
00:00:00.000 --> 00:00:04.657
And you did it, you hooked up a WebSocket
to your very own domain name.

2
00:00:04.657 --> 00:00:07.548
Now, Jem sack.lol is realtime and live.

3
00:00:07.548 --> 00:00:11.918
We can all enjoy it for
the power of the WebSocket and

4
00:00:11.918 --> 00:00:14.671
a little bit of engine X tuning.

5
00:00:14.671 --> 00:00:18.529
And if you got stuck somewhere along
the way, there were a lot of steps and

6
00:00:18.529 --> 00:00:20.374
that it really easy to go a bit of a.

7
00:00:20.374 --> 00:00:25.294
The link to the WebSocket example is
in the slides it's in GitHub repo,

8
00:00:25.294 --> 00:00:29.067
it's all fully fleshed out and
tested, it does work.

9
00:00:29.067 --> 00:00:33.395
So if you're stuck,
just go in there and make a copy or

10
00:00:33.395 --> 00:00:36.582
find out where you missed a line there.

11
00:00:36.582 --> 00:00:40.093
So, let's move on and
let's talk about databases.

12
00:00:40.093 --> 00:00:42.324
Why do databases exist?

13
00:00:42.324 --> 00:00:43.681
Why don't we just save
everything to a file?

14
00:00:43.681 --> 00:00:48.077
Database seem like a lot of work for
what reason?

15
00:00:48.077 --> 00:00:51.948
Why can't we just save
everything to a file?

16
00:00:51.948 --> 00:00:54.566
&gt;&gt; They're unorganized.

17
00:00:54.566 --> 00:00:58.970
&gt;&gt; Unorganized, yeah.

18
00:00:58.970 --> 00:01:07.507
&gt;&gt; Inefficient to analyze that data
access the data across multiple files.

19
00:01:07.507 --> 00:01:10.423
&gt;&gt; Yeah, yeah, it's inefficient,

20
00:01:10.423 --> 00:01:16.165
you can't really access the data
across multiple files, what else?

21
00:01:16.165 --> 00:01:21.070
&gt;&gt; The structuring of it allows you
to go directly to a relevant thing,

22
00:01:21.070 --> 00:01:26.591
while if it were just a normal file,
you might have to read the entire thing.

23
00:01:26.591 --> 00:01:30.757
&gt;&gt; I like that, yeah,
databases give you structure for

24
00:01:30.757 --> 00:01:33.639
the file which can be unstructured.

25
00:01:33.639 --> 00:01:36.069
Yeah, these are all good answers,

26
00:01:36.069 --> 00:01:39.635
we use databases because
one a file doesn't scale.

27
00:01:39.635 --> 00:01:42.710
How are you gonna have multiple
servers writing to one file?

28
00:01:42.710 --> 00:01:46.995
Because the file can only exist
on one hard disk at a time, so

29
00:01:46.995 --> 00:01:49.844
we can save everything to a file today.

30
00:01:49.844 --> 00:01:53.599
But if we have two servers, it's not
gonna work anymore it breaks down.

31
00:01:53.599 --> 00:01:58.371
Build one is about structure,
how do you save things to a file?

32
00:01:58.371 --> 00:02:02.004
What if my opinion about the structure of
saving data to a file is different from

33
00:02:02.004 --> 00:02:02.728
your opinion?

34
00:02:02.728 --> 00:02:06.217
There's no enforcement there, so
the kind of exalting useless.

35
00:02:10.570 --> 00:02:15.883
I recall this out earlier when we talked
about the modern computing stack,

36
00:02:15.883 --> 00:02:18.003
but everything you gonna do.

37
00:02:18.003 --> 00:02:21.486
This is my favorite quote from my
CS professor is he said, Jem, and

38
00:02:21.486 --> 00:02:25.843
he said this right before I graduated,
he's like, Jem 90% of the stuff you're

39
00:02:25.843 --> 00:02:30.035
gonna be doing in your career is reading
and writing if databases, that's it.

40
00:02:30.035 --> 00:02:33.573
Anyway, it's funny but you think
about what you do in your day-to-day,

41
00:02:33.573 --> 00:02:34.761
what do you actually do?

42
00:02:34.761 --> 00:02:37.802
At the core of what you're doing,
you're reading from some API,

43
00:02:37.802 --> 00:02:39.226
probably writing from an API.

44
00:02:39.226 --> 00:02:42.978
Those APIs you're reading and writing
from maybe another system or service for

45
00:02:42.978 --> 00:02:44.219
maybe another database.

46
00:02:44.219 --> 00:02:46.150
And that's why in
the modern computing stack,

47
00:02:46.150 --> 00:02:49.287
the database is always there cuz we're
never just reading writing to the hard

48
00:02:49.287 --> 00:02:51.135
disk because that doesn't scale very well.

49
00:02:51.135 --> 00:02:54.574
In the realm of databases,
there's two different kinds,

50
00:02:54.574 --> 00:02:56.578
there's relational databases.

51
00:02:56.578 --> 00:03:03.324
So relational database is our MySQL,
SQL Lite, Postgres, SQL Server, etcetera.

52
00:03:03.324 --> 00:03:07.595
There's even a browser
database called index.DB.

53
00:03:07.595 --> 00:03:11.012
A lot of people don't know that, there's a
database built into your browser that you

54
00:03:11.012 --> 00:03:13.905
can use, it's kind of a pain but
databases are generally kind of a pain,

55
00:03:13.905 --> 00:03:15.719
that's why we have
libraries on top of them.

56
00:03:15.719 --> 00:03:20.980
So relational databases are very
structured, they're very strict,

57
00:03:20.980 --> 00:03:26.513
they have strong opinions about how and
where you write and retrieve data?

58
00:03:26.513 --> 00:03:30.948
And this is good,
the other kind of database is

59
00:03:34.584 --> 00:03:36.534
Non-relational databases.

60
00:03:36.534 --> 00:03:41.043
So non-relational databases also have
a structure, but it's a lot looser.

61
00:03:41.043 --> 00:03:45.639
And these are commonly known as NoSQL
databases, which is I don't know,

62
00:03:45.639 --> 00:03:50.544
you're still using some sort of query
language no matter what you're doing.

63
00:03:50.544 --> 00:03:55.818
But the benefits of relational
versus non-relational,

64
00:03:55.818 --> 00:03:59.696
relational is kind of it's type systems.

65
00:03:59.696 --> 00:04:03.130
You can write your JavaScript code
in just pure plain JavaScript or

66
00:04:03.130 --> 00:04:04.795
you can write with TypeScript.

67
00:04:04.795 --> 00:04:08.448
There's pros and cons to both if you use
typing's it's gonna be a lot stricter it's

68
00:04:08.448 --> 00:04:11.379
gonna throw up a lot more errors and
it won't let you do all the things

69
00:04:11.379 --> 00:04:13.510
you wanna do and
sometimes that's a good thing.

70
00:04:13.510 --> 00:04:16.150
That's the same thing about relational
databases, they're very strict and

71
00:04:16.150 --> 00:04:17.357
you have to do things a certain way.

72
00:04:17.357 --> 00:04:21.999
Whereas, non-relational databases is
much more free, you can just dump things

73
00:04:21.999 --> 00:04:25.849
into them and query them back out and
there's pros and cons of both.

74
00:04:25.849 --> 00:04:30.308
No, SQL tends to be a little bit faster
because there's not a whole structure

75
00:04:30.308 --> 00:04:33.188
it has to run through every
time you make a query but

76
00:04:33.188 --> 00:04:36.905
again, you don't have the structure,
so that's a protocol.

77
00:04:36.905 --> 00:04:42.130
Today we're gonna be using
a relational database, because that's

78
00:04:42.130 --> 00:04:47.997
probably the one that trips up people
the most when they see the syntax of SQL.

79
00:04:51.879 --> 00:04:58.878
And relational databases is made
of three different parts, really.

80
00:04:58.878 --> 00:05:02.343
They're made up of tables, so there's
always tables of data, in this case,

81
00:05:02.343 --> 00:05:03.921
it would be called the users table.

82
00:05:03.921 --> 00:05:06.378
Those tables have fields.

83
00:05:06.378 --> 00:05:10.947
Fields are also known as columns, so
think tabular data, it's a column.

84
00:05:10.947 --> 00:05:14.163
Those columns have rows or

85
00:05:14.163 --> 00:05:18.700
they're also called records here.

86
00:05:18.700 --> 00:05:21.472
And you're like, that's great,
that's a table, there's some rows,

87
00:05:21.472 --> 00:05:24.731
there's some columns, I've seen a table
before, Jem, how does this all make sense?

88
00:05:24.731 --> 00:05:29.855
Well, when we have multiple tables
of data, we have to get them

89
00:05:29.855 --> 00:05:35.668
to relate to each other somehow,
hence the relational database part.

90
00:05:35.668 --> 00:05:40.207
In this case, user ID is known as
your primary ID or primary key,

91
00:05:40.207 --> 00:05:42.910
every single table has a primary key.

92
00:05:42.910 --> 00:05:46.591
The primary key is usually
an incremented number or

93
00:05:46.591 --> 00:05:50.101
some random hash it doesn't really matter,
but

94
00:05:50.101 --> 00:05:55.765
it's unique to that row in that table and
we can query against it very quickly.

95
00:05:55.765 --> 00:06:00.246
Now, if you wanna have
a primary key in another table,

96
00:06:00.246 --> 00:06:02.981
that's known as the, anybody?

97
00:06:02.981 --> 00:06:04.153
Anybody takes SQL here?

98
00:06:04.153 --> 00:06:05.603
&gt;&gt; Secondary key.

99
00:06:05.603 --> 00:06:09.038
&gt;&gt; Close, secondary key,
you think that, foreign key.

100
00:06:09.038 --> 00:06:11.850
So a primary key in a different
database or in different tables,

101
00:06:11.850 --> 00:06:14.931
is just called the foreign key and
again, we can query off that again.

102
00:06:14.931 --> 00:06:20.129
If we see it in our food,
our food table, how it relates

103
00:06:20.129 --> 00:06:25.327
to the user table is that
the food has some sort of ID that

104
00:06:25.327 --> 00:06:31.208
says my favorite food is ramen,
which it is the type of ramen.

105
00:06:31.208 --> 00:06:33.487
I'm a fan of Tonkatsu.

106
00:06:33.487 --> 00:06:37.833
It's an katsu, spicy not generally, but
that's an entirely different table.

107
00:06:37.833 --> 00:06:40.346
It's a table of everybody's
favorite foods, but

108
00:06:40.346 --> 00:06:43.395
it doesn't tell you anything
about who's in it, is it mine?

109
00:06:43.395 --> 00:06:44.689
Is it Kyle's?

110
00:06:44.689 --> 00:06:45.901
Whose is it?

111
00:06:45.901 --> 00:06:51.755
We can use the user ID as the foreign key
and we jump back to the user table and

112
00:06:51.755 --> 00:06:57.339
that will tell us the name,
where we're at the location, the email.

113
00:06:57.339 --> 00:07:02.015
So hopefully you're seeing
the power of relational databases,

114
00:07:02.015 --> 00:07:07.031
where you have a bunch of table of kind
of disjointed data but you make it

115
00:07:07.031 --> 00:07:12.573
all tie together so that when we write
a query and we can write a complex query.

116
00:07:12.573 --> 00:07:16.512
We can pull a lot of
information together using SQL,

117
00:07:16.512 --> 00:07:19.387
which is structured query language.

118
00:07:19.387 --> 00:07:24.727
So if I wanna select just all the
information about myself from the users

119
00:07:24.727 --> 00:07:29.355
table, I would say select star,
star is just the wildcard for

120
00:07:29.355 --> 00:07:33.806
everything from users tables,
where the name equals Jem.

121
00:07:33.806 --> 00:07:37.863
Probably the easiest
example of SQL will write.

122
00:07:37.863 --> 00:07:42.225
Usually, things get a lot more complicated
because we want information from

123
00:07:42.225 --> 00:07:45.727
multiple tables of data, but
we wanna tie them all together.

124
00:07:45.727 --> 00:07:48.048
So we use something called a JOIN.

125
00:07:48.048 --> 00:07:51.593
There's different types of JOINS, I will
not go into JOINS it's a whole thing,

126
00:07:51.593 --> 00:07:55.085
there's people here laughing because
you've probably dealt with SQL JOINS at

127
00:07:55.085 --> 00:07:58.232
some point and it's a pain in the butt
unless you do it every single day.

128
00:07:58.232 --> 00:08:02.458
But here's an example of JOIN
where I was talking about Robin.

129
00:08:02.458 --> 00:08:06.605
I want to find all
the difference users and

130
00:08:06.605 --> 00:08:13.017
the type of food from the food
table where the food name is ramen.

131
00:08:13.017 --> 00:08:17.628
So we have to LEFT JOIN the two tables
together, the food and the user's data.

132
00:08:17.628 --> 00:08:22.802
And then once we get the output,
we get the data from two different tables,

133
00:08:22.802 --> 00:08:27.343
we put it together, and
it looks like just one big column of data.

134
00:08:27.343 --> 00:08:31.630
So you take this concept of relational
database and blow it up even more.

135
00:08:31.630 --> 00:08:34.621
You see, you can make some really,
really complex queries but at the core,

136
00:08:34.621 --> 00:08:37.709
the data you're saving, and reading and
writing is actually pretty simple,

137
00:08:37.709 --> 00:08:39.040
the tables are very structured.

138
00:08:39.040 --> 00:08:44.193
And there is, of course, a, entire
course on Frontend Masters on databases.

139
00:08:44.193 --> 00:08:48.306
If you wanna go really, rally deep, but
I bring up SQL and relational databases,

140
00:08:48.306 --> 00:08:52.180
because a lot of Frontend engineers get
sucked on SQL because they're like,

141
00:08:52.180 --> 00:08:53.269
what does this mean?

142
00:08:53.269 --> 00:08:57.150
I don't understand what's going on,
and really, if you understand table

143
00:08:57.150 --> 00:09:00.564
structures, you get a better sense
of how to actually query data.

