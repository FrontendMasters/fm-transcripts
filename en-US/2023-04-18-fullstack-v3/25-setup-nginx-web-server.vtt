WEBVTT

1
00:00:00.453 --> 00:00:03.496
That was a lot, and
we barely did anything yet.

2
00:00:03.496 --> 00:00:06.870
We haven't even built our web server,
it still doesn't do anything.

3
00:00:06.870 --> 00:00:08.035
So let's make that happen.

4
00:00:08.035 --> 00:00:10.700
Let's make our server response
to request at this point.

5
00:00:10.700 --> 00:00:13.743
So to do that, we need a web server.

6
00:00:13.743 --> 00:00:20.549
There are two main web servers, and
the two big players are Apache and Nginx.

7
00:00:20.549 --> 00:00:22.434
You've probably heard of one or both.

8
00:00:22.434 --> 00:00:27.092
Nginx, if you've ever seen it,
it looks like Nix.

9
00:00:27.092 --> 00:00:30.969
It's one of those you don't know how to
say it until you hear someone else say it,

10
00:00:30.969 --> 00:00:33.036
and you're like, okay, okay, I get it.

11
00:00:33.036 --> 00:00:37.866
So Nginx, Nginx does a lot of things.

12
00:00:37.866 --> 00:00:42.182
It's a web server, it's reverse proxy.

13
00:00:42.182 --> 00:00:43.884
It's a forward proxy, it can do it.

14
00:00:43.884 --> 00:00:44.950
It can email proxy.

15
00:00:44.950 --> 00:00:46.905
Nginx is really, really powerful.

16
00:00:46.905 --> 00:00:50.733
It's written in C, so it's gonna be
faster than pretty much anything else you

17
00:00:50.733 --> 00:00:52.067
can possibly come up with,

18
00:00:52.067 --> 00:00:55.145
faster than node depending on
the use case, things like that.

19
00:00:55.145 --> 00:00:55.884
There's also Apache.

20
00:00:55.884 --> 00:00:57.411
Apache is great too.

21
00:00:57.411 --> 00:00:59.701
Apache has a lot of built-ins,
it works well with Java.

22
00:00:59.701 --> 00:01:02.305
It works well with PHP
right out of the box.

23
00:01:02.305 --> 00:01:06.814
For this case, we're using Nginx cuz it's
faster, it's pretty configurable, and

24
00:01:06.814 --> 00:01:07.629
I just like it.

25
00:01:07.629 --> 00:01:09.328
But we can also use Apache.

26
00:01:09.328 --> 00:01:12.676
So we talked about what a,
I said reverse proxy and

27
00:01:12.676 --> 00:01:16.202
these kind of weird terms,
but what does that mean?

28
00:01:16.202 --> 00:01:21.878
So when a request comes in from
the Internet, what happens then?

29
00:01:21.878 --> 00:01:24.173
We know sort of now how
the Internet works and

30
00:01:24.173 --> 00:01:26.476
how things happen when
it hits your server.

31
00:01:26.476 --> 00:01:27.153
How does it know where to go?

32
00:01:27.153 --> 00:01:29.041
Who's handling that request?

33
00:01:29.041 --> 00:01:33.110
We need some sort of web server in place
to route that request to the right place,

34
00:01:33.110 --> 00:01:36.450
whether it be the database,
the application you wanna run to, or

35
00:01:36.450 --> 00:01:37.627
even another server.

36
00:01:41.977 --> 00:01:43.334
And that's what Nginx does.

37
00:01:43.334 --> 00:01:45.993
It just says, hey, there's a request
coming in, where should I route it?

38
00:01:45.993 --> 00:01:49.456
Okay, go into the application,
that's what I do.

39
00:01:49.456 --> 00:01:52.759
You can create in later and
create a node application.

40
00:01:52.759 --> 00:01:54.611
We actually don't need Nginx to do that.

41
00:01:54.611 --> 00:01:58.743
We can route directly from the Internet
to our node application, but

42
00:01:58.743 --> 00:02:00.532
that's not a good practice.

43
00:02:00.532 --> 00:02:04.282
Nginx is much faster and it has a lot of
capabilities that if we were to implement,

44
00:02:04.282 --> 00:02:06.268
then a node would just
be a pain in the butt,

45
00:02:06.268 --> 00:02:08.102
because Nginx is specialized at this.

46
00:02:08.102 --> 00:02:12.029
And Nginx is always gonna
be faster than node always.

47
00:02:12.029 --> 00:02:16.844
It's different language, different
low-level things we won't go into.

48
00:02:16.844 --> 00:02:22.764
All right, so
this is where it's gonna get even messier.

49
00:02:22.764 --> 00:02:25.714
But it's okay,
we're gonna walk through it step by step,

50
00:02:25.714 --> 00:02:28.261
and I'll explain everything
that's happening.

51
00:02:28.261 --> 00:02:31.145
So the first thing we have to
do is we need to install Nginx.

52
00:02:31.145 --> 00:02:32.900
So we're gonna use apt again.

53
00:02:32.900 --> 00:02:35.701
But this time, we're using sudo,
because we're not running as root.

54
00:02:35.701 --> 00:02:40.466
So we're gonna sudo apt install nginx,
and then we're gonna start nginx.

55
00:02:40.466 --> 00:02:44.605
And then we're gonna navigate to our
server and see what's happening.

56
00:02:44.605 --> 00:02:46.062
Is our web server actually up and running?

57
00:02:49.664 --> 00:02:52.230
So let's go ahead and do that now.

58
00:02:52.230 --> 00:02:55.794
So sudo apt install nginx.

59
00:03:02.170 --> 00:03:03.286
I'm gonna say yes.

60
00:03:24.761 --> 00:03:26.280
Okay, so now, let's start Nginx.

61
00:03:26.280 --> 00:03:30.154
It may already be started, but
let's just do this just to be sure.

62
00:03:30.154 --> 00:03:33.633
So sudo service nginx start.

63
00:03:38.645 --> 00:03:43.127
All right, one small step for you,
one giant leap for your web page.

64
00:03:43.127 --> 00:03:50.007
So now, let's check out what we did,
is it working?

65
00:03:50.007 --> 00:03:54.558
So I'm gonna grab my IP address,
cuz I'm not sure if my hostname is up yet.

66
00:03:54.558 --> 00:03:57.126
I'm just gonna grab the IP.

67
00:03:57.126 --> 00:03:58.624
Is it up?

68
00:03:58.624 --> 00:03:59.873
No, still not working.

69
00:04:01.669 --> 00:04:06.520
Hey, instead of a blank page,
we got the Nginx welcome page.

70
00:04:06.520 --> 00:04:10.269
So now, you have officially
hooked up your IP domain.

71
00:04:10.269 --> 00:04:13.260
It's coming in, says,
takes time to propagate to your server.

72
00:04:13.260 --> 00:04:14.853
Now, we're doing something.

73
00:04:14.853 --> 00:04:18.661
Now, we're in the realm of something
that's a little bit more familiar as

74
00:04:18.661 --> 00:04:22.300
frontend engineers, which is building
web pages and hooking them up.

75
00:04:22.300 --> 00:04:26.071
Don't celebrate yet, we still have a while
ago to actually make it do more, but

76
00:04:26.071 --> 00:04:27.552
this is a good starting place.

77
00:04:36.223 --> 00:04:41.774
So one thing I want you to do is check
out the default nginx configuration.

78
00:04:41.774 --> 00:04:44.572
So I'm gonna do, just do that here.

79
00:04:51.251 --> 00:04:55.349
So remember I said Nginx, most of your
processes are gonna be looking at etc

80
00:04:55.349 --> 00:04:57.247
file, so that's for your Nginx.

81
00:04:57.247 --> 00:05:02.828
So I'm gonna cd there, cd /etc/nginx/.

82
00:05:02.828 --> 00:05:05.164
We're gonna do ls to check out.

83
00:05:05.164 --> 00:05:07.688
So there's sites-available, sites-enabled.

84
00:05:07.688 --> 00:05:10.487
This gets a little messy,
it's hard to explain.

85
00:05:10.487 --> 00:05:14.269
It's an Nginx thing, we're gonna
dance around that and we'll fix it,

86
00:05:14.269 --> 00:05:15.950
make it easier to reason about.

87
00:05:15.950 --> 00:05:21.772
But for now, go to sites-available,
and we can use less to check it out.

88
00:05:24.329 --> 00:05:27.807
Sites-available, and we're just gonna
look at the default configuration.

89
00:05:33.470 --> 00:05:36.713
So this is the default server
configuration for Nginx.

90
00:05:36.713 --> 00:05:39.295
Remember I said things are gonna
get a little bit dicey, and

91
00:05:39.295 --> 00:05:41.371
you're gonna be like,
what's going on here?

92
00:05:41.371 --> 00:05:45.502
I thought I was an engineer, but I don't
recognize any of that stuff, that's okay.

93
00:05:45.502 --> 00:05:49.030
Nginx configs are their own
kind of language itself, but

94
00:05:49.030 --> 00:05:53.598
they're all really powerful and
every line has a reason for being there.

95
00:05:53.598 --> 00:05:56.714
So let's explore kind of what
the configuration is doing.

96
00:05:59.511 --> 00:06:01.877
So the first thing you see is that root.

97
00:06:01.877 --> 00:06:04.911
That's just the base directory for
your requests.

98
00:06:04.911 --> 00:06:11.571
All of that kind of Welcome to Nginx page,
that's located in /var/www/html,

99
00:06:11.571 --> 00:06:16.695
and it's just pulling one of
those HTML files right down here.

100
00:06:16.695 --> 00:06:19.633
So that's where that page is,
we can edit it.

101
00:06:19.633 --> 00:06:22.516
I think in the next slide,
we're gonna touch it a little bit, but

102
00:06:22.516 --> 00:06:24.414
we might skip that in
the interest of time.

103
00:06:24.414 --> 00:06:26.769
But if you wanna edit that default page,
that's where you do it.

104
00:06:26.769 --> 00:06:30.469
If you only wanna serve an HTML page,
you can just do that from here, and

105
00:06:30.469 --> 00:06:31.280
we can be done.

106
00:06:31.280 --> 00:06:32.594
We don't need application or anything.

107
00:06:32.594 --> 00:06:34.659
Nginx can serve HTML pages just fine.

108
00:06:37.778 --> 00:06:42.209
The location block says,
where am I going from paths?

109
00:06:42.209 --> 00:06:45.524
The root path is always slash,
very similar to your operating system.

110
00:06:45.524 --> 00:06:47.175
Slash is just root.

111
00:06:47.175 --> 00:06:51.375
But if we wanna say /gojemgo, and
we want it to go somewhere else,

112
00:06:51.375 --> 00:06:53.705
we just add another location block.

113
00:06:53.705 --> 00:06:58.438
So we can do routing within Nginx,
we can do it on our application level in

114
00:06:58.438 --> 00:07:03.336
our server itself, doesn't really matter,
but Nginx has a capability.

115
00:07:06.149 --> 00:07:09.663
They kind of look like programs,
so they're called directives.

116
00:07:09.663 --> 00:07:13.605
And they essentially say, hey, do this
within a server block or a location block.

117
00:07:13.605 --> 00:07:16.380
And this guy in this case, it's try_files.

118
00:07:16.380 --> 00:07:18.759
It's gonna try to serve an HTML page,
which is not there.

119
00:07:18.759 --> 00:07:20.739
It's gonna serve a 404 page.

120
00:07:20.739 --> 00:07:25.120
We're not gonna use try_files too much,
but we will use a directive called proxy

121
00:07:25.120 --> 00:07:29.076
pass, which is just gonna proxy all
of our requests into node from Nginx.

122
00:07:29.076 --> 00:07:34.933
And then I talked about these
are where the default pages live.

123
00:07:34.933 --> 00:07:36.024
So let's get and touch that.

124
00:07:36.024 --> 00:07:38.670
I want you to feel you have
ownership of your server.

125
00:07:38.670 --> 00:07:40.988
Let's go and edit this default page.

126
00:07:40.988 --> 00:07:44.364
So default page is located in cd/var,

127
00:07:44.364 --> 00:07:49.085
where most of our application will live,
in the HTML.

128
00:07:49.085 --> 00:07:54.352
And there's no index.html,
just this long index.nginx-debian.html.

129
00:07:54.352 --> 00:07:56.558
Let's just go and make an index.html page.

130
00:08:00.821 --> 00:08:04.372
Or you can add it to the existing one, it
doesn't really matter for this exercise.

131
00:08:04.372 --> 00:08:07.664
That should do it, and
I'm gonna say, Hello world.

132
00:08:07.664 --> 00:08:12.691
And we know from our earlier experiments
that this is perfectly valid,

133
00:08:12.691 --> 00:08:15.521
symmetrically correct, html, up?

134
00:08:15.521 --> 00:08:17.464
Man, how did I get into this spot?

135
00:08:17.464 --> 00:08:20.895
I didn't sudo when I should have sudoed,
and

136
00:08:20.895 --> 00:08:26.150
now I've edited this file and
I don't remember how to save anymore.

137
00:08:26.150 --> 00:08:27.746
How do I save?

138
00:08:27.746 --> 00:08:30.967
I need sudo permission.

139
00:08:30.967 --> 00:08:32.540
I might just quit this one.

140
00:08:32.540 --> 00:08:36.190
There is a command to do this if you
ever get into this situation, and

141
00:08:36.190 --> 00:08:37.418
I will share it later.

142
00:08:37.418 --> 00:08:40.416
But it's kind of long and it doesn't
really make sense for this case.

143
00:08:40.416 --> 00:08:42.070
So I'm gonna cheat here.

144
00:08:42.070 --> 00:08:44.859
And I'm gonna say quit bang,

145
00:08:44.859 --> 00:08:50.558
because I should have sudo this file,
sudo vi index.html.

146
00:08:50.558 --> 00:08:56.285
Good thing I didn't get too far into my
wonderful web page where I got stuck.

147
00:09:00.711 --> 00:09:02.548
Say, Hello world.

148
00:09:02.548 --> 00:09:03.915
Now, I can write quit.

149
00:09:08.717 --> 00:09:12.183
And if we go back to browser,
what should we see?

150
00:09:12.183 --> 00:09:13.341
We see Hello world,

151
00:09:13.341 --> 00:09:17.164
cuz it picks up the index.html
before it picks up the Debian file.

152
00:09:17.164 --> 00:09:20.321
And there you go, you made your web page,
you hooked it up to your domain.

153
00:09:20.321 --> 00:09:24.228
Still not working on the domain yet,
but you hooked up to your server.

154
00:09:24.228 --> 00:09:26.635
Now, we're starting to move.

155
00:09:26.635 --> 00:09:28.034
All right, so Nginx is great.

156
00:09:28.034 --> 00:09:29.100
It can do a lot of things, and

157
00:09:29.100 --> 00:09:31.693
we can actually create entire
applications just run it out on Nginx.

158
00:09:31.693 --> 00:09:36.800
But let's move on to the domain we're
comfortable with as frontend engineers.

159
00:09:36.800 --> 00:09:38.558
Let's move into JavaScript world.

160
00:09:38.558 --> 00:09:41.563
We're gonna use Node.js to
actually host our application.

161
00:09:41.563 --> 00:09:44.008
So the request will come in to the server,
it will go to Nginx, and

162
00:09:44.008 --> 00:09:45.262
Nginx will proxy it to Node.js.

163
00:09:48.747 --> 00:09:49.974
So we're gonna go through
a few steps here.

164
00:09:49.974 --> 00:09:52.797
The first one is making sure we
have the latest Node.js source.

165
00:09:52.797 --> 00:09:57.460
If you just do an apt install nodejs,
it's probably gonna be like version 10 or

166
00:09:57.460 --> 00:10:00.970
12, which would work, but
we want a more recent version.

167
00:10:00.970 --> 00:10:06.383
So this is just saying, hey,
pull from Debian in the nodesource.com,

168
00:10:06.383 --> 00:10:09.325
and we want the setup for version 19.

169
00:10:09.325 --> 00:10:12.182
We going to execute it using
the sudo command into bash, and

170
00:10:12.182 --> 00:10:14.366
it's just gonna execute
into its own shell.

171
00:10:14.366 --> 00:10:16.702
And it's gonna download all of
that things and package it up.

172
00:10:16.702 --> 00:10:18.708
And that way, when we do apt-get nodejs,

173
00:10:18.708 --> 00:10:21.452
it'll be the latest version
linked to the latest source.

174
00:10:24.006 --> 00:10:24.555
Make sense?
I know,

175
00:10:24.555 --> 00:10:28.480
your brain is hurting at this point, cuz
we've touched on so many different things.

176
00:10:28.480 --> 00:10:31.738
We're almost there, we're in the home
stretch for getting this all hooked up.

177
00:10:31.738 --> 00:10:35.940
So now, we're going to install node.js,
but if we just install from apt,

178
00:10:35.940 --> 00:10:37.789
it's gonna be an older version.

179
00:10:37.789 --> 00:10:41.158
We want 19 because we're
on the bleeding edge here.

180
00:10:41.158 --> 00:10:47.647
So we're gonna use the curl command to
pull from nodesource, the Debian version.

181
00:10:47.647 --> 00:10:49.993
We're gonna execute that in
our shell using sudo, and

182
00:10:49.993 --> 00:10:52.860
it's gonna pipe it into a new shell
that's gonna run the install.

183
00:10:52.860 --> 00:10:57.840
That way when we do apt-get install
nodejs, it's gonna be the latest version

184
00:10:57.840 --> 00:11:02.077
rather than the general package
maintain version that they have.

