WEBVTT

1
00:00:00.000 --> 00:00:07.096
Next let's dive in and create their actual
web sockets, did everybody get this far?

2
00:00:07.096 --> 00:00:12.172
Otherwise you're gonna have a bad time
&gt;&gt; There's a couple people reporting that,

3
00:00:12.172 --> 00:00:15.421
they're getting a permission denied for
the public key,

4
00:00:15.421 --> 00:00:19.144
when the SSH public key could not
read from the remote repository.

5
00:00:21.839 --> 00:00:26.496
&gt;&gt; That's strange, that's public yeah it
could be you don't have your SSH key set

6
00:00:26.496 --> 00:00:28.422
up for Git, not everybody does.

7
00:00:28.422 --> 00:00:34.010
So if that's the case, you can use HTTPS
and then use your username password.

8
00:00:34.010 --> 00:00:38.516
But if you have two-factor auth, it won't
work for that, which is why we use SSH for

9
00:00:38.516 --> 00:00:39.289
everything.

10
00:00:39.289 --> 00:00:42.581
So if you're running through an error for
public key that's probably it,

11
00:00:42.581 --> 00:00:44.370
your SSH key isn't working correctly.

12
00:00:44.370 --> 00:00:46.279
Or it may not be set up on
your actual home machine,

13
00:00:46.279 --> 00:00:47.742
if you've never used GitHub before.

14
00:00:55.061 --> 00:00:56.141
Okay.

15
00:01:03.841 --> 00:01:07.083
And if you clone that repo,
you'll see we did exactly that, and

16
00:01:07.083 --> 00:01:09.736
here's where the web socket
server things come in.

17
00:01:09.736 --> 00:01:12.781
I'm gonna drag this off to the side so I
can remember what I did, cuz I don't have

18
00:01:12.781 --> 00:01:15.758
this stuff remembered off the top of
my head, I'm not that smart I'm sorry.

19
00:01:15.758 --> 00:01:17.265
But let's walk through it together,

20
00:01:17.265 --> 00:01:19.628
cuz I want everybody to
understand what we're doing here.

21
00:01:19.628 --> 00:01:24.843
So let's get move that off over here,
we're gonna jump back into our repo here,

22
00:01:24.843 --> 00:01:27.458
assuming your application is working.

23
00:01:27.458 --> 00:01:31.692
So this is the server we're gonna be
using for the rest of the day, and

24
00:01:31.692 --> 00:01:34.621
we're gonna use it to
write a database as well.

25
00:01:34.621 --> 00:01:38.675
So I wanna make sure my code is
segmented in a way that makes sense,

26
00:01:38.675 --> 00:01:39.874
it is reasonable.

27
00:01:39.874 --> 00:01:46.807
So I'm just gonna say
/** Begin websockets.

28
00:01:57.127 --> 00:01:59.978
And remember, you won't remember
most of the stuff later.

29
00:01:59.978 --> 00:02:03.201
So it's always good to either comment or
code, or leave some breadcrumbs for

30
00:02:03.201 --> 00:02:06.321
yourself to be, okay I went through
this step and I went through this step,

31
00:02:06.321 --> 00:02:07.431
I went through this step.

32
00:02:07.431 --> 00:02:10.135
So let's start with a WebSocket,

33
00:02:10.135 --> 00:02:14.331
we will need one library for
this because believe me,

34
00:02:14.331 --> 00:02:19.382
you do not want to write a WebSocket
by hand, it's not that fun.

35
00:02:19.382 --> 00:02:22.247
We're gonna use a library and
it's really basic,

36
00:02:22.247 --> 00:02:24.987
it's called WS a straightforward
as it can get.

37
00:02:24.987 --> 00:02:26.792
So let's say npm i ws,

38
00:02:26.792 --> 00:02:32.875
it's just a WebSocket server it'll
make dealing WebSockets much easier.

39
00:02:32.875 --> 00:02:36.592
So once you have that installed,
let's create the actual WebSocket server.

40
00:02:36.592 --> 00:02:41.785
So we'll say const the real original

41
00:02:41.785 --> 00:02:47.817
name WebSocketServer equals require ws,

42
00:02:47.817 --> 00:02:52.017
and we want to server from ws.

43
00:02:52.017 --> 00:02:57.078
And then we wanna actually
give that connection a name,

44
00:02:57.078 --> 00:03:02.577
so we're gonna say const wss
equals a new WebSocketServer.

45
00:03:11.985 --> 00:03:16.772
And the server is just gonna be
the server that we created above.

46
00:03:21.660 --> 00:03:25.846
And this server is just this server,
we're just saying attach the WebSocket to

47
00:03:25.846 --> 00:03:28.224
the server we created
with express earlier.

48
00:03:32.025 --> 00:03:34.172
Next WebSocket has this idea of, or

49
00:03:34.172 --> 00:03:38.406
has this concept of different states
very similar to an HTTP request.

50
00:03:38.406 --> 00:03:43.740
But we want to do actions when
the WebSocket actually connects,

51
00:03:43.740 --> 00:03:47.215
So to do that we're gonna use listeners.

52
00:03:47.215 --> 00:03:52.455
I'm gonna say WebSocket on initial
connection to the minute somebody

53
00:03:52.455 --> 00:03:57.173
connects to our server from a browser,
we wanna do something.

54
00:03:57.173 --> 00:03:59.117
So we wanna make a respond
with a function.

55
00:04:03.235 --> 00:04:06.588
And I close it off early, there we go.

56
00:04:10.027 --> 00:04:12.882
And the function won't really,
it's gonna take in

57
00:04:15.890 --> 00:04:22.812
Wss Or wait no sorry,
I missed one it's a connection,

58
00:04:22.812 --> 00:04:27.454
and then it's gonna take in ws
the WebSocket library itself.

59
00:04:27.454 --> 00:04:31.368
That'll just make it easier to
parse through a little bit later,

60
00:04:31.368 --> 00:04:33.869
close it off I love syntax highlighting.

61
00:04:33.869 --> 00:04:35.838
Okay so we created a listener,

62
00:04:35.838 --> 00:04:40.460
we created a WebSocket server attached
to our Express server, we gave it

63
00:04:40.460 --> 00:04:45.723
a function called connection that will run
every time it connects to a new server.

64
00:04:45.723 --> 00:04:48.560
We could have written this differently,

65
00:04:48.560 --> 00:04:53.028
we could have made this its own
const function, but just as easy.

66
00:04:53.028 --> 00:04:56.977
Next what do we want to happen,
whenever someone connects our web server?

67
00:04:59.621 --> 00:05:02.722
Why don't we just log in and say,
hey someone connect to our web server.

68
00:05:02.722 --> 00:05:07.411
So we're gonna create a shortcut,
there's something called,

69
00:05:07.411 --> 00:05:11.249
within the WebSocket server
there's some data, and

70
00:05:11.249 --> 00:05:14.844
one of those is clients,
and one of those is size.

71
00:05:14.844 --> 00:05:19.431
That's just the number of clients we have
currently connected to our web server.

72
00:05:19.431 --> 00:05:22.621
So let's assign this to a variable,
and we'll call it numClients.

73
00:05:30.341 --> 00:05:33.438
And when something happens,
it's good to know what's going on.

74
00:05:33.438 --> 00:05:35.263
Otherwise we would never know
what's happening to our server,

75
00:05:35.263 --> 00:05:35.846
if we don't log it.

76
00:05:35.846 --> 00:05:41.598
So let's create a log, and
we'll just say clients connected.

77
00:05:46.014 --> 00:05:50.411
And I'll just pass in the numClients.

78
00:05:50.411 --> 00:05:53.311
So this just means every time someone
connects, it'll just say this person

79
00:05:53.311 --> 00:05:56.228
connected, we have ten clients,
we have one client, we have 1,000.

80
00:05:56.228 --> 00:05:58.070
Just lets us know in our log,
what's going on.

81
00:06:10.335 --> 00:06:14.325
So now we can use a special command
called the broadcast command.

82
00:06:14.325 --> 00:06:16.531
And the broadcast command is pretty cool,

83
00:06:16.531 --> 00:06:19.666
because it's gonna send a message
to everybody connected.

84
00:06:19.666 --> 00:06:22.789
So rather than us having to iterate
through every single client,

85
00:06:22.789 --> 00:06:24.278
broadcast will do that for us.

86
00:06:24.278 --> 00:06:25.750
So just for this exercise,

87
00:06:25.750 --> 00:06:29.467
I want every time someone connects
I want everybody to know about it.

88
00:06:29.467 --> 00:06:34.542
So we're gonna say broadcasts
The current visitors

89
00:06:40.902 --> 00:06:46.259
And we'll just say numClients,
and we'll just add

90
00:06:46.259 --> 00:06:51.258
a little colon there,
just to make it look nice.

91
00:06:51.258 --> 00:06:55.164
So we created a function that's gonna
handle a connection that every time

92
00:06:55.164 --> 00:06:59.574
someone connects, it's going to broadcast
out to everybody that's connected,

93
00:06:59.574 --> 00:07:01.215
the number of clients we have.

94
00:07:01.215 --> 00:07:08.519
So we still need to handle a few states,
so a socket can be open, close or errored.

95
00:07:08.519 --> 00:07:11.647
We need to handle these different states,
so we wanna, we don't need to handle them.

96
00:07:11.647 --> 00:07:15.835
But it's good to do something when
a WebSocket connects just to prove it's

97
00:07:15.835 --> 00:07:16.574
connected.

98
00:07:16.574 --> 00:07:19.572
Now this is where we can
get super creative, but for

99
00:07:19.572 --> 00:07:21.955
this demo we'll keep it really simple.

100
00:07:21.955 --> 00:07:24.125
So we're gonna say WebSocket on, or

101
00:07:24.125 --> 00:07:28.469
we're actually gonna pull from ws
here because these are steady states.

102
00:07:28.469 --> 00:07:33.984
And we see closed open, so
we'll say open or by mistake ready state,

103
00:07:33.984 --> 00:07:39.897
which is just saying what's the state
of the WebSocket, when that equals

104
00:07:44.133 --> 00:07:48.023
Ws.OPEN this is an if.

105
00:07:54.794 --> 00:07:58.178
We're just gonna send a message to that

106
00:07:58.178 --> 00:08:02.702
one client that's connected,
welcome to my server

107
00:08:09.404 --> 00:08:13.010
So in this case, we're reading from
the web, the WS library itself,

108
00:08:13.010 --> 00:08:15.468
which is attached to
every single connection.

109
00:08:15.468 --> 00:08:18.222
WS is gonna have a state for
every connection,

110
00:08:18.222 --> 00:08:22.686
and we're just gonna pull from that
enum of different connection states.

111
00:08:22.686 --> 00:08:26.403
We're gonna use the open one, so
when a WebSocket connects and it's open,

112
00:08:26.403 --> 00:08:29.031
we're gonna send to the client
welcome to my server.

113
00:08:37.571 --> 00:08:41.306
And when that connection closes,
so we'll say on close, so

114
00:08:41.306 --> 00:08:45.422
when a client closes out,
give the function we'll call it close.

115
00:08:45.422 --> 00:08:46.877
We don't need to name it, but

116
00:08:46.877 --> 00:08:50.740
is just good for logging later to name
your functions now keep them anonymous.

117
00:08:53.690 --> 00:08:59.791
We're just gonna say console.log,
a client has disconnected.

118
00:09:05.466 --> 00:09:09.993
And if we wanna add a little bit more
spice, we can broadcast that the client is

119
00:09:09.993 --> 00:09:12.584
disconnected to all
the clients if we want.

120
00:09:20.636 --> 00:09:24.101
That's about it, however I did make
a mistake, I keep getting excited and

121
00:09:24.101 --> 00:09:25.319
I jumped ahead of myself.

122
00:09:25.319 --> 00:09:28.311
We have to write the broadcast function,
that's not something that exists.

123
00:09:28.311 --> 00:09:31.100
So normally if you want
to talk to every client,

124
00:09:31.100 --> 00:09:35.379
you have to say WebSocket.each, and
you have to iterate through them.

125
00:09:35.379 --> 00:09:37.696
Why don't we just make a function
that does that for us and

126
00:09:37.696 --> 00:09:40.615
we'll just call it broadcast,
which is the function we already used.

127
00:09:40.615 --> 00:09:43.736
So we'll define it here,
we'll attach it to wss.

128
00:09:47.584 --> 00:09:48.784
That equals a function.

129
00:09:51.933 --> 00:09:55.691
And we'll call it broadcast,
cuz it's good to name our functions, and

130
00:09:55.691 --> 00:09:58.353
broadcast is gonna take
some sort of input or data.

131
00:10:02.485 --> 00:10:09.207
So now we say clients,
it's an interval so we can say each or

132
00:10:09.207 --> 00:10:14.324
for each, and
that takes a function as well.

133
00:10:14.324 --> 00:10:17.599
And each, again we don't have to name it,
we just do for

134
00:10:17.599 --> 00:10:19.703
each clients whatever we wanna do.

135
00:10:25.591 --> 00:10:27.262
Now what we're gonna do
is use that send command.

136
00:10:27.262 --> 00:10:29.977
We're gonna say clients, send

137
00:10:32.936 --> 00:10:36.724
Whatever data we have and
that's it, and that's a lot.

138
00:10:36.724 --> 00:10:43.102
Writing a quick function is a lot faster,
than trying to do wss clients each time.

