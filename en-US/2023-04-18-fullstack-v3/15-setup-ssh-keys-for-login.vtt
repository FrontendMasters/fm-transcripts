WEBVTT

1
00:00:00.000 --> 00:00:04.632
All that knowledge about hashing,
how it's used every single day and

2
00:00:04.632 --> 00:00:08.889
everything around us,
why it's important, we now get to SSH.

3
00:00:08.889 --> 00:00:12.348
SSH uses something called
a public key encryption,

4
00:00:12.348 --> 00:00:16.680
or you can think public key cryptography,
something like that.

5
00:00:16.680 --> 00:00:21.810
So the concept is, there's two parts
to an SSH key called a SSH key pair.

6
00:00:21.810 --> 00:00:25.415
There's the public part, which is
something I can share out to anybody.

7
00:00:25.415 --> 00:00:28.432
I can share, give you my public key,
post it on the Internet,

8
00:00:28.432 --> 00:00:31.809
post it on Twitter, it doesn't
really matter, it's a public key.

9
00:00:31.809 --> 00:00:35.405
Then you have your private key,
the private key is known only to me.

10
00:00:35.405 --> 00:00:40.317
The public key is used to encrypt any sort
of data, any sort of message you want.

11
00:00:40.317 --> 00:00:47.878
And I think of it as a hashing function,
or as the Psalter hashing function.

12
00:00:47.878 --> 00:00:51.917
But the great thing is, anybody can
encrypt this message and send it to me,

13
00:00:51.917 --> 00:00:54.177
but I'm the only one that can decrypt it.

14
00:00:54.177 --> 00:00:55.481
Now, think how powerful that is.

15
00:00:55.481 --> 00:00:59.650
I can send a message in broad open,
I can shout it from the streets, and

16
00:00:59.650 --> 00:01:02.478
no one will know what I'm
saying other than me,

17
00:01:02.478 --> 00:01:05.326
because I'm the only one
who can decrypt that.

18
00:01:05.326 --> 00:01:09.678
You can consider it one way, encryption,
different ways of thinking about it, but

19
00:01:09.678 --> 00:01:11.591
that's a really powerful concept.

20
00:01:11.591 --> 00:01:13.641
So, what if we took our passwords and

21
00:01:13.641 --> 00:01:17.743
we were able to hash them in such a way
that only I have the password, but you

22
00:01:17.743 --> 00:01:22.334
can't read it because I have the private
key that's the password is based off of.

23
00:01:22.334 --> 00:01:26.807
And that's where we get what SSH is, and
that's why it's such a powerful concept,

24
00:01:26.807 --> 00:01:28.697
much stronger than user password,

25
00:01:28.697 --> 00:01:31.597
much stronger than any other
form of authentication.

26
00:01:31.597 --> 00:01:34.721
Biometric is completely different,
we will talk about that.

27
00:01:34.721 --> 00:01:37.461
All right, SSH stands for
secure socket shell.

28
00:01:37.461 --> 00:01:40.523
It just means that's how we connect
to a server in a secure way.

29
00:01:40.523 --> 00:01:44.735
So when we connect to our server,
and we will here in a minute,

30
00:01:44.735 --> 00:01:47.005
we're going to create a SSH key.

31
00:01:47.005 --> 00:01:51.263
We're gonna keep the private key
on our end, it will never leave,

32
00:01:51.263 --> 00:01:53.023
you don't pass it around.

33
00:01:53.023 --> 00:01:56.563
You can put on a secure USB, but
it's generally frowned upon.

34
00:01:56.563 --> 00:02:00.121
It's usually much better to create
a new SSH key and add that,

35
00:02:00.121 --> 00:02:04.444
versus taking a private key and
logging around, you don't wanna do that.

36
00:02:04.444 --> 00:02:09.216
Then every message we send to the server
is encrypted with a public key, and

37
00:02:09.216 --> 00:02:12.566
the server itself has a public key and
a private key.

38
00:02:12.566 --> 00:02:16.441
In that way, the server can send back
messages encrypted, or I can send

39
00:02:16.441 --> 00:02:20.846
the server messages encrypted with this
public key, and only it can decrypt it.

40
00:02:20.846 --> 00:02:24.739
And thus we have this completely
transparent funnel of information flowing

41
00:02:24.739 --> 00:02:28.591
back and forth, but no one can read it
other than the two parties at the end.

42
00:02:28.591 --> 00:02:32.839
That's such a powerful concept
versus username and password which,

43
00:02:32.839 --> 00:02:35.867
if I wanna shout, hey,
my password is password.

44
00:02:35.867 --> 00:02:38.043
Anybody standing in
the middle between me and

45
00:02:38.043 --> 00:02:40.454
where I'm trying to
communicate can learn that.

46
00:02:40.454 --> 00:02:43.953
But you can stand in the middle of an SSH
tunnel and it'll just be gibberish to you,

47
00:02:43.953 --> 00:02:46.101
cuz you don't have the private
key on either end.

48
00:02:46.101 --> 00:02:51.670
It's a really simple concept
like this public key pair,

49
00:02:51.670 --> 00:02:58.530
but it's such a powerful way of
securing our clients and our servers.

50
00:02:58.530 --> 00:03:02.007
So we've learned about hashing,
we learned about hashing functions,

51
00:03:02.007 --> 00:03:04.865
we learned about SSH, let's go and
create an SSH key then.

52
00:03:04.865 --> 00:03:07.657
Don't just take my word for it,
you will see it, what it looks like.

53
00:03:07.657 --> 00:03:10.396
So SSH keys, they can live whatever, but

54
00:03:10.396 --> 00:03:13.856
by convention you want them
in the .ssh directory.

55
00:03:13.856 --> 00:03:15.525
So that's in your home directory.

56
00:03:15.525 --> 00:03:21.149
The dot is important, and
how do we see hidden files dot files?

57
00:03:21.149 --> 00:03:25.898
Yes with the a flag, ls -la,
you'll see your SSH directory.

58
00:03:25.898 --> 00:03:30.209
You may have a key in there already,
the default is called id_rsa,

59
00:03:30.209 --> 00:03:34.607
that'll be your private key,
the public key always ends at a .pub.

60
00:03:34.607 --> 00:03:36.059
This is really important.

61
00:03:36.059 --> 00:03:38.308
If it doesn't say .pub,
do not share it out.

62
00:03:38.308 --> 00:03:41.448
There's a big difference between
your private key and public key,

63
00:03:41.448 --> 00:03:42.612
as we just talked about.

64
00:03:42.612 --> 00:03:47.370
So use the tool called ssh-keygen.

65
00:03:47.370 --> 00:03:49.570
And if you don't believe me,
you can man ssh-keygen again,

66
00:03:49.570 --> 00:03:50.807
don't take my word for anything.

67
00:03:50.807 --> 00:03:53.646
I could be tricking you,
I'm not, you never know.

68
00:03:53.646 --> 00:03:58.593
And then create a key and
call it fsfe, full stack front end,

69
00:03:58.593 --> 00:04:00.831
just for simplicity sake.

70
00:04:00.831 --> 00:04:04.306
You can really name it whatever you want,
but

71
00:04:04.306 --> 00:04:08.525
it's better if we all use
the same naming convention.

72
00:04:09.640 --> 00:04:13.730
Okay, hopefully there wasn't any
issues there, the two steps, but

73
00:04:13.730 --> 00:04:15.611
you never know what can happen.

74
00:04:15.611 --> 00:04:17.195
So let's go ahead and do that right now.

75
00:04:20.460 --> 00:04:22.842
Open up my terminal,
I'm gonna clear it out.

76
00:04:22.842 --> 00:04:27.072
I'm gonna move into my SSH directory.

77
00:04:27.072 --> 00:04:29.572
Look around,
I've already got some keys in there.

78
00:04:29.572 --> 00:04:34.569
I actually already have a key called
full stack running when I was developing

79
00:04:34.569 --> 00:04:35.515
this course.

80
00:04:35.515 --> 00:04:39.104
So I'm gonna delete those,
one sec go ahead,

81
00:04:39.104 --> 00:04:43.810
put a star on this just to make
sure they're all gone, cool.

82
00:04:43.810 --> 00:04:44.867
And you know what's great about SSH?

83
00:04:44.867 --> 00:04:47.753
I can show you all these files,
there's nothing secret about that,

84
00:04:47.753 --> 00:04:50.164
they're just the name,
there's no information here.

85
00:04:50.164 --> 00:04:54.988
Again SSH keys super powerful, versus I
couldn't have a file called passwords

86
00:04:54.988 --> 00:04:57.296
cuz I couldn't ever show that to you.

87
00:04:57.296 --> 00:05:00.683
There used to be the old way of how we
logged in the server this file called

88
00:05:00.683 --> 00:05:04.361
password and you had mess password,
yeah those were the dark days of the web.

89
00:05:04.361 --> 00:05:06.207
So I'm gonna use ssh-keygen.

90
00:05:10.264 --> 00:05:13.926
And again, the default is id_rsa, you may
already have had one when you set up your

91
00:05:13.926 --> 00:05:16.090
computer or you needed it for
some other reason.

92
00:05:16.090 --> 00:05:19.034
So we're just gonna name
it something different.

93
00:05:19.034 --> 00:05:21.378
I'm not putting in passphrase,
you generally should.

94
00:05:21.378 --> 00:05:25.329
I'm not going to because I'm lazy,
and I'm not gonna use this much, but

95
00:05:25.329 --> 00:05:27.128
you should have a password on it.

96
00:05:29.455 --> 00:05:34.450
And there you go, it creates
a fingerprint of the hash using SHA256.

97
00:05:34.450 --> 00:05:37.041
And you're saying,
what's the randomart for?

98
00:05:37.041 --> 00:05:39.740
It doesn't actually have a purpose,
it's just so

99
00:05:39.740 --> 00:05:43.087
you can quickly visually tell
different keys from each other.

100
00:05:43.087 --> 00:05:49.921
And it doesn't seem like you can, but
see, let's make another one, temp.

101
00:05:53.662 --> 00:05:55.815
See, they are slightly different and

102
00:05:55.815 --> 00:05:58.712
you can quickly identify
your keys using this way.

103
00:05:58.712 --> 00:06:03.314
Not many people do, it's more of,
it's cool to have randomart, but

104
00:06:03.314 --> 00:06:05.423
yeah, I'm just gonna delete.

105
00:06:05.423 --> 00:06:11.441
File because, there we go.

106
00:06:11.441 --> 00:06:13.967
All right, so now I have a key
called full stack front end.

107
00:06:13.967 --> 00:06:20.378
So I can cat My publicly key,
not my private key.

108
00:06:20.378 --> 00:06:23.714
Not that it matters,
you're not gonna break into my server, but

109
00:06:23.714 --> 00:06:25.605
you might if you have my private key.

110
00:06:25.605 --> 00:06:30.208
But the public key, we see that's
what the public key looks like.

111
00:06:30.208 --> 00:06:35.540
Now if you run cat against your private
key, the full stack front end key,

112
00:06:35.540 --> 00:06:39.073
not pub,
you'll see it substantially longer.

113
00:06:39.073 --> 00:06:43.861
That's because the private key is a very
expensive encryption [INAUDIBLE],

114
00:06:43.861 --> 00:06:47.378
it's called a symmetric or
asymmetric cryptography,

115
00:06:47.378 --> 00:06:51.737
which means you can only do it one way,
you can't do it the other way.

116
00:06:51.737 --> 00:06:56.565
That's why not all communication is
encrypted in SHA256 because it's actually

117
00:06:56.565 --> 00:06:57.928
a very expensive hash.

118
00:06:57.928 --> 00:07:01.312
Again, these are just mathematical
functions we're running every single time.

119
00:07:01.312 --> 00:07:05.270
But think about doing that millions of
times a second, it'd burn up all your CPU.

120
00:07:05.270 --> 00:07:09.673
So there's times we use asymmetric
cryptography, there's times we

121
00:07:09.673 --> 00:07:14.237
use symmetric cryptography, and
it depends on the use case here, yes?

122
00:07:14.237 --> 00:07:16.876
&gt;&gt; Why should we have a passphrase?

123
00:07:16.876 --> 00:07:21.425
&gt;&gt; Just in case someone breaks into
your computer and steals your keys.

124
00:07:21.425 --> 00:07:25.907
That is the challenge of SSH keys is
they're as secure as the location

125
00:07:25.907 --> 00:07:27.388
they're secured on.

126
00:07:27.388 --> 00:07:30.693
Unlike biometric encryption, which you
can argue is not a security there,

127
00:07:30.693 --> 00:07:33.187
cuz someone can just kidnap you and
use your thumbprint.

128
00:07:33.187 --> 00:07:36.264
So there's no such thing
as perfect security.

129
00:07:36.264 --> 00:07:40.868
But you generally have a passphrase just
in case someone gets into your computer,

130
00:07:40.868 --> 00:07:42.146
it's one extra step.

131
00:07:42.146 --> 00:07:45.933
However, I would say if someone made
it that far, made it to your computer,

132
00:07:45.933 --> 00:07:49.856
you've got bigger problems at that point
than someone stealing your SSH key.

133
00:07:49.856 --> 00:07:52.915
But it's just a good habit to have,
good question though.

134
00:07:56.152 --> 00:08:01.772
All right, hopefully we're all there, we
have some SSH key, they're all different.

135
00:08:01.772 --> 00:08:05.573
And then we talked about this, we have
the public key and your private key.

136
00:08:05.573 --> 00:08:09.716
I just ran the ls command through grep,
which is just general regular expression.

137
00:08:09.716 --> 00:08:13.541
That's what I use to find files usually,
I'll show you.

138
00:08:13.541 --> 00:08:16.241
I don't like to just tell,
I like to show you.

139
00:08:16.241 --> 00:08:19.611
So we can say, ls, and
I'm looking for my key.

140
00:08:19.611 --> 00:08:22.009
So I've got a bunch of keys here,
that's annoying, let's clean that up.

141
00:08:22.009 --> 00:08:26.871
We'll run grep and
then it'll show you the files that match.

142
00:08:26.871 --> 00:08:30.151
And we'll talk about grep
a little bit later, and

143
00:08:30.151 --> 00:08:35.163
how we can use it to find things really
quickly out of a lot of streaming data.

144
00:08:39.707 --> 00:08:46.316
Okay, so now what's left is we need to
copy our public key into Digital Ocean.

145
00:08:46.316 --> 00:08:49.813
To say, hey, Digital Ocean,
every time I wanna connect to my server,

146
00:08:49.813 --> 00:08:51.969
use my public key to do
all that connection,

147
00:08:51.969 --> 00:08:54.738
and I can decrypt that
connection using my private key.

148
00:08:54.738 --> 00:08:58.743
So let's jump back to the browser.

149
00:08:58.743 --> 00:09:02.934
And we'll choose SSH key as
our authentication method,

150
00:09:02.934 --> 00:09:04.774
remember not password.

151
00:09:04.774 --> 00:09:08.891
And we'll say, New SSH Key,
and I'm gonna copy.

152
00:09:08.891 --> 00:09:15.063
So I'm just gonna cat .pub, and

153
00:09:15.063 --> 00:09:20.137
I'm just gonna copy this.

154
00:09:20.137 --> 00:09:22.616
There's an application called pbcopy,
which will do this for you.

155
00:09:22.616 --> 00:09:25.809
But I'm trying to use minimal
software here, if possible,

156
00:09:25.809 --> 00:09:27.572
I don't have pbcopies built in.

157
00:09:27.572 --> 00:09:30.276
So just use your mouse and copy.

158
00:09:30.276 --> 00:09:37.870
And then you paste that in,
give it a name, front end, 3.

159
00:09:41.709 --> 00:09:45.020
And let's add this SSH key,
and there we go.

160
00:09:48.776 --> 00:09:50.722
Next you can give it a hostname.

161
00:09:53.920 --> 00:09:55.669
I don't know, I'm so bad at names,
it takes me so long.

162
00:09:55.669 --> 00:09:57.771
I'll just leave it at the default, but

163
00:09:57.771 --> 00:10:00.711
you can give your computer
its own personalized name.

164
00:10:02.644 --> 00:10:04.148
Names do matter.

165
00:10:04.148 --> 00:10:09.437
In this case, it doesn't really as much,
but let's say you had 300 servers running.

166
00:10:09.437 --> 00:10:10.799
How do you know what that server is doing?

167
00:10:10.799 --> 00:10:11.381
Is it a node server?

168
00:10:11.381 --> 00:10:13.408
Is it a database server?

169
00:10:13.408 --> 00:10:14.623
Is it a load balancer?

170
00:10:14.623 --> 00:10:16.352
Names are really important, and

171
00:10:16.352 --> 00:10:19.574
once you name a server it's very
very difficult to change it.

172
00:10:19.574 --> 00:10:22.976
So there's an about naming things.

173
00:10:22.976 --> 00:10:25.414
Maybe I'll post in the chat later,
but just give it a name, for

174
00:10:25.414 --> 00:10:27.625
now the default is fine,
you can call whatever you want.

175
00:10:27.625 --> 00:10:29.029
And let's create the droplet.

176
00:10:31.902 --> 00:10:34.173
Sf01 is unavailable, awesome.

177
00:10:34.173 --> 00:10:38.926
Thank you Digital Ocean,
you're really providing good value here.

178
00:10:38.926 --> 00:10:41.842
But let's just create a new
droplet in a different region,

179
00:10:41.842 --> 00:10:43.837
that's gonna happen from time to time.

180
00:10:43.837 --> 00:10:50.500
So I'll just choose SFO2, and
Ubuntu we want the LTS, great.

181
00:10:50.500 --> 00:10:55.099
Basic, regular, cheapest one, and
we have to recreate SSH key cuz

182
00:10:55.099 --> 00:10:58.663
it's already saved on Digital Ocean,
there we go.

183
00:10:58.663 --> 00:11:01.279
Select front end and
let's give this a shot again.

184
00:11:04.755 --> 00:11:06.063
Okay, it's coming online.

185
00:11:06.063 --> 00:11:09.821
I'm gonna delete this old one
cuz I will get confused later.

186
00:11:09.821 --> 00:11:11.743
In the meantime, let's go ahead and

187
00:11:11.743 --> 00:11:14.727
queue up these commands that
we're gonna need to log in.

188
00:11:17.505 --> 00:11:21.220
So once our server comes online,
we're gonna be assigned an IP address.

189
00:11:21.220 --> 00:11:23.848
The user is always root, in the beginning.

190
00:11:23.848 --> 00:11:26.550
We will eventually create a new
user in the coming steps.

191
00:11:26.550 --> 00:11:29.444
We never wanna be root,
but we'll talk about that.

192
00:11:29.444 --> 00:11:32.884
And all we're gonna do is
ssh into your computer.

193
00:11:32.884 --> 00:11:37.639
You have to specify the identity file,
ssh by default uses the id_rsa.

194
00:11:37.639 --> 00:11:40.485
So if that's the key file you used,
you're okay.

195
00:11:40.485 --> 00:11:45.463
If not, we have to specify with the flag
-i, and link it to our private key.

196
00:11:47.410 --> 00:11:50.859
So let's check if my server is online yet.

197
00:11:51.994 --> 00:11:54.350
Yes, and there's the IP address.

198
00:11:54.350 --> 00:11:57.052
So I'm gonna copy it,
just helpfully provided here.

199
00:11:59.334 --> 00:12:03.190
Clear, and I'm going to say, ssh -i, and

200
00:12:03.190 --> 00:12:08.820
we're already in directory but
I'm gonna do things a long way,

201
00:12:08.820 --> 00:12:13.942
full stack front end,
my private key, say, roots@ip.

202
00:12:13.942 --> 00:12:17.613
Everybody there so far, okay?

203
00:12:17.613 --> 00:12:21.078
And the authenticity with no connect to
the server it's gonna say, yes or no,

204
00:12:21.078 --> 00:12:22.453
are you sure you wanna do this?

205
00:12:22.453 --> 00:12:24.479
We're just gonna say, yes.

206
00:12:24.479 --> 00:12:29.804
And if you do everything right,
you're now logged in.

207
00:12:29.804 --> 00:12:33.829
Yeah, pat yourself on the back,
you've just created a server,

208
00:12:33.829 --> 00:12:36.620
your SSH key it is secure
this is the default.

209
00:12:36.620 --> 00:12:40.780
If whenever you're making anything, this
seems like a lot of work in the beginning.

210
00:12:40.780 --> 00:12:43.565
You do it enough times it's very simple,
just becomes rote.

211
00:12:43.565 --> 00:12:48.429
And we'll talk about how to make this
even faster a little bit later too.

212
00:12:48.429 --> 00:12:53.333
All right, you're in your own server, it's
running Ubuntu, we're running on roots,

213
00:12:53.333 --> 00:12:54.828
that doesn't seem right.

214
00:12:54.828 --> 00:12:56.242
Should we be running on root?

215
00:12:56.242 --> 00:12:59.971
What is root?

216
00:12:59.971 --> 00:13:01.508
Let's talk about that in a second.

