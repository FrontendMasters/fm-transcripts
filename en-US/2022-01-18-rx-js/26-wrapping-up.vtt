WEBVTT

1
00:00:00.410 --> 00:00:03.540
Questions, comments,
concerns, cries of outrage?

2
00:00:03.540 --> 00:00:07.711
&gt;&gt; How often do you use subjects
in your day-to-day work?

3
00:00:07.711 --> 00:00:12.185
&gt;&gt; Shockingly, so, the question was,
how often do we use subjects?

4
00:00:12.185 --> 00:00:15.528
So subjects are very similar
to event emitters, right?

5
00:00:15.528 --> 00:00:21.928
You can have a subscription and you can
have multiple things that subscribe to it.

6
00:00:21.928 --> 00:00:25.315
Now, theoretically, I'm technically
using a subject right here, right?

7
00:00:25.315 --> 00:00:29.899
I'm effectively turning a cold
observable into a subject.

8
00:00:29.899 --> 00:00:32.687
So, there's two ways to
answer this question.

9
00:00:32.687 --> 00:00:35.680
One is, as somebody who builds
an app in Svelte all the time,

10
00:00:35.680 --> 00:00:38.470
Svelte sores are effectively subjects,
right?

11
00:00:38.470 --> 00:00:42.085
And because Svelte handles
reactive things out of the box,

12
00:00:42.085 --> 00:00:47.570
commonly they use them instead of a Redux
data store or something along those lines.

13
00:00:47.570 --> 00:00:52.690
In the actual, I'm coordinating
some events, not as often.

14
00:00:52.690 --> 00:00:56.910
And so a subject, just to be clear,
is both a subscription and

15
00:00:56.910 --> 00:01:01.778
an observable, so you can both say,
call.next, all the things we did

16
00:01:01.778 --> 00:01:06.434
originally in the very beginning
you can call.next.subscribe.

17
00:01:06.434 --> 00:01:11.057
Obviously, .next.complete.error,
so on and so forth.

18
00:01:11.057 --> 00:01:13.534
And then things can also subscribe to it.

19
00:01:13.534 --> 00:01:17.945
So, there's one object that is both
an observable and an observer,

20
00:01:17.945 --> 00:01:19.626
at the same time, right?

21
00:01:19.626 --> 00:01:23.595
And so, those are useful if you have
pieces of your application that maybe

22
00:01:23.595 --> 00:01:25.592
wanna listen to one core data store.

23
00:01:25.592 --> 00:01:29.570
So, in my application on a day-to-day
basis, those are Svelte stores.

24
00:01:29.570 --> 00:01:30.718
When I did React,

25
00:01:30.718 --> 00:01:35.399
I didn't use them at all because Redux
was my store in that case, right?

26
00:01:35.399 --> 00:01:39.704
Effectively, the reducer was the shared
thing that everything talked to, and I was

27
00:01:39.704 --> 00:01:44.260
just dealing, and action would come in we
do awesome the dance you see right here.

28
00:01:44.260 --> 00:01:50.140
Of figuring out when things should happen
and I was subscribed to the store itself.

29
00:01:50.140 --> 00:01:54.110
So, it's useful as a data store that
you wanna know when it changes, right?

30
00:01:54.110 --> 00:01:57.555
But in terms of a lot of the flow and
coordination,

31
00:01:57.555 --> 00:02:00.590
this is theoretically one right here.

32
00:02:00.590 --> 00:02:01.865
And so pieces like that,

33
00:02:01.865 --> 00:02:04.852
they come up when I need to share
data in two places at once.

34
00:02:04.852 --> 00:02:07.231
Cuz, again,
I didn't wanna fire two data requests.

35
00:02:07.231 --> 00:02:12.048
As often as you see them
immediately in the beginning

36
00:02:12.048 --> 00:02:15.889
of the RxJS Docs, no, I don't, right?

37
00:02:15.889 --> 00:02:20.687
That's it, I think in Angular, you can
use them a little bit more as a store and

38
00:02:20.687 --> 00:02:23.621
kind of for
that same purpose that I use Svelte.

39
00:02:23.621 --> 00:02:25.555
Svelte stores are not subjects,
they're just subject-like.

40
00:02:25.555 --> 00:02:28.607
I think, in Angular, you might end up
using them a little bit more, as well.

41
00:02:28.607 --> 00:02:31.363
Behavior subjects are the ones
that give you the last value or

42
00:02:31.363 --> 00:02:32.560
think of replace object.

43
00:02:32.560 --> 00:02:35.286
We'll play through all the values and
set forgotten and

44
00:02:35.286 --> 00:02:39.790
async subject only gives you a value
when it completes doing that for memory.

45
00:02:39.790 --> 00:02:43.080
I've never used an async subject, I don't
know why I would use an async subject.

46
00:02:43.080 --> 00:02:46.440
But, yeah, behavior subject is
very much like this effectively.

47
00:02:46.440 --> 00:02:50.220
Not only is this a subject, this is
effectively a behavior subject, right?

48
00:02:50.220 --> 00:02:54.921
If you're a new subscriber,
here's the last thing that I said, right?

49
00:02:54.921 --> 00:02:57.854
If this shared replay had a huge number,

50
00:02:57.854 --> 00:03:01.837
it could be all the things
that have happened, right?

51
00:03:01.837 --> 00:03:04.816
And so it's a way to kinda catch
up with previous things, as well.

52
00:03:04.816 --> 00:03:09.465
&gt;&gt; I've also had to swap an Angular
event emitter for a behavior subject.

53
00:03:09.465 --> 00:03:11.310
I don't remember why, but
that was really interesting.

54
00:03:12.970 --> 00:03:16.636
&gt;&gt; In Angular, if you want to use
a certain type of change detection,

55
00:03:16.636 --> 00:03:18.650
you have to use observables.

56
00:03:18.650 --> 00:03:19.210
&gt;&gt; Yeah.

57
00:03:19.210 --> 00:03:21.690
&gt;&gt; So use behavior subjects or subjects.

58
00:03:21.690 --> 00:03:23.580
&gt;&gt; But there are really good
syntax in there, right?

59
00:03:23.580 --> 00:03:25.033
They have that async syntax, right?

60
00:03:25.033 --> 00:03:25.585
&gt;&gt; Yeah, so.

61
00:03:25.585 --> 00:03:33.500
&gt;&gt; Do you have any advice for using RxJS
outside of Angular for other frameworks?

62
00:03:33.500 --> 00:03:38.070
&gt;&gt; I mean, I've only exclusively
used it outside, so, yes.

63
00:03:38.070 --> 00:03:43.932
So, I think, commonly, the place that I've
used it for is in a React application.

64
00:03:43.932 --> 00:03:48.085
And so, in that case,
you have redux-observable.

65
00:03:48.085 --> 00:03:52.340
And redux-observable is
effectively middleware for Redux,

66
00:03:52.340 --> 00:03:57.795
where you set up these things called
Epics, which sounds really cool.

67
00:03:57.795 --> 00:04:03.815
But an Epic is just a piece of middleware
that every single action flows through.

68
00:04:03.815 --> 00:04:06.682
So you can have multiple Epics
that you can combine, but

69
00:04:06.682 --> 00:04:09.497
every single action flows
through every single Epic.

70
00:04:09.497 --> 00:04:13.227
And what you do is, effectively,
you could filter or there's a type for

71
00:04:13.227 --> 00:04:15.873
the type of action but
it's effectively a filter.

72
00:04:15.873 --> 00:04:20.871
And so when every single action flows
through, then you find yourself where you

73
00:04:20.871 --> 00:04:25.840
can deal with that and you could also
merge map it to other actions, right?

74
00:04:25.840 --> 00:04:30.250
And okay, they said, hey,
I'm looking for the API data.

75
00:04:30.250 --> 00:04:35.795
Cool fire the we're loading the API data
action which then React can deal with or

76
00:04:35.795 --> 00:04:37.130
whatever.

77
00:04:37.130 --> 00:04:41.631
And then when that comes back,
then I want to fire a action for

78
00:04:41.631 --> 00:04:47.340
we're done loading, here's the data,
take everything down, right?

79
00:04:47.340 --> 00:04:50.080
And so, for the application,
I worked on the SendGrid,

80
00:04:50.080 --> 00:04:51.686
the marketing campaign editor.

81
00:04:51.686 --> 00:04:53.213
We basically use that for

82
00:04:53.213 --> 00:04:58.300
every single action flew through that
because SendGrid at the time, still today,

83
00:04:58.300 --> 00:05:02.751
used its public APIs for all of its
client-side applications, right?

84
00:05:02.751 --> 00:05:05.879
But those public APIs weren't necessarily
built for building UIs, right?

85
00:05:05.879 --> 00:05:10.958
So, a lot of times we would have to
kind of do a lot of orchestration and

86
00:05:10.958 --> 00:05:12.896
dancing with those APIs.

87
00:05:12.896 --> 00:05:16.706
Like, cool actually need to hit these
three APIs, wait till they all come back

88
00:05:16.706 --> 00:05:20.302
or some subset of that progressive
data loading, and put it all in place.

89
00:05:20.302 --> 00:05:21.290
So, redux-observable's really great.

90
00:05:21.290 --> 00:05:25.226
But also, if you think about it,
if you're familiar with React,

91
00:05:25.226 --> 00:05:28.250
I think I mentioned a few
times during this course,

92
00:05:28.250 --> 00:05:31.720
you can make a use observable
hook pretty easily, right?

93
00:05:31.720 --> 00:05:36.801
Passing an observable that uses
use effect, subscribe to it every

94
00:05:36.801 --> 00:05:42.440
time it emits, have some use state
that you trigger use reducer, right?

95
00:05:42.440 --> 00:05:45.608
For whatever you want, and
then unsubscribe to it, right?

96
00:05:45.608 --> 00:05:47.582
So you can use them, basically, anywhere.

97
00:05:47.582 --> 00:05:52.294
And that's why we focus this course
on just using Vanilla JavaScript to

98
00:05:52.294 --> 00:05:54.021
kind of take it away from,

99
00:05:54.021 --> 00:05:58.670
most courses on Angular will have
RxJS in context of Angular, right?

100
00:05:58.670 --> 00:06:02.095
So, part of the reason in this
fundamentals course was just to separate

101
00:06:02.095 --> 00:06:05.880
it from any framework, and so you can
lock it into whether it's React or View.

102
00:06:05.880 --> 00:06:09.315
I'm sure you can put a number
if you tried, I have not, or

103
00:06:09.315 --> 00:06:13.765
in my case Svelte, we kind of use it for
both the stores or a similar thing.

104
00:06:13.765 --> 00:06:19.693
And you can also, it's two lines to wrap
a RxJS observable in the Svelte store.

105
00:06:19.693 --> 00:06:22.983
But also that kind of I've triggered
something, here are all the things I wanna

106
00:06:22.983 --> 00:06:25.928
happen, here are the end result,
I think is the most important part and

107
00:06:25.928 --> 00:06:28.259
that can just be JavaScript
like in an agnostic format.

108
00:06:28.259 --> 00:06:32.927
&gt;&gt; Somewhat to follow on to your
question where I've used reactive stream

109
00:06:32.927 --> 00:06:37.596
handlers successfully is when I'm
getting 120 data points a second

110
00:06:37.596 --> 00:06:41.743
coming in from the streamer that
I need to send somewhere else.

111
00:06:41.743 --> 00:06:47.203
So I can create a stream handler around
it, fork it to disk on one side for

112
00:06:47.203 --> 00:06:52.570
the console logging off one and
send to another endpoint.

113
00:06:52.570 --> 00:06:56.764
So, in that scenario, you're probably
gonna end up with a large number or

114
00:06:56.764 --> 00:07:00.090
a lot of turnover if you
have a sliding window.

115
00:07:00.090 --> 00:07:01.785
I've only used these,

116
00:07:01.785 --> 00:07:06.538
you wouldn't notice memory hit
on the data that's turning over.

117
00:07:06.538 --> 00:07:10.850
Do you have a sense of how this would
work on a larger dataset if we use

118
00:07:10.850 --> 00:07:15.779
something like filter to we're placing
10% of our data at every update?

119
00:07:15.779 --> 00:07:21.538
&gt;&gt; Yeah, so, I'm currently
experimenting this right now.

120
00:07:21.538 --> 00:07:26.423
For ten portals dashboard,
you can have anywhere from a few

121
00:07:26.423 --> 00:07:31.519
workflows running to,
theoretically, millions, right?

122
00:07:31.519 --> 00:07:34.316
At this point,
I'm currently stress testing it.

123
00:07:34.316 --> 00:07:38.580
I'm up to 150,000 which is still not
even the scale you're talking about.

124
00:07:38.580 --> 00:07:43.170
It's tricky cuz I'm also keeping
all that data in memory, too.

125
00:07:43.170 --> 00:07:46.134
So my memory footprint is currently large,
but

126
00:07:46.134 --> 00:07:50.570
I'm also effectively building
a giant object of data in memory.

127
00:07:50.570 --> 00:07:57.000
But the actual, I was shocked, I basically
sat down to run these benchmarks,

128
00:07:57.000 --> 00:08:02.391
expecting to come up with a list of work,
and it wasn't that bad.

129
00:08:02.391 --> 00:08:05.488
&gt;&gt; Wow.
&gt;&gt; Right, DOM rendering was worse than

130
00:08:05.488 --> 00:08:10.636
showing out to the page where I
was thrashing the DOM too much,

131
00:08:10.636 --> 00:08:15.595
was a bigger problem than
processing the data in that case.

132
00:08:15.595 --> 00:08:19.031
That said, anything at scale gets weird.

133
00:08:19.031 --> 00:08:23.202
Also, like we said before, request
idle callback for scheduling stuff.

134
00:08:23.202 --> 00:08:24.505
So, for a lot of these,

135
00:08:24.505 --> 00:08:29.120
request idle callback is a kind of like
set timeout or request animation frame.

136
00:08:29.120 --> 00:08:33.725
But it's, browser, can we give you
a function to call when you're not busy?

137
00:08:33.725 --> 00:08:39.330
[LAUGH] And you tend to slot into,
so, if the user's doing something,

138
00:08:39.330 --> 00:08:42.560
I won't be refreshing the API, right?

139
00:08:42.560 --> 00:08:46.744
But if they stop moving that mouse for
a little bit, and hang out for

140
00:08:46.744 --> 00:08:49.152
a little bit, then, I will go ahead.

141
00:08:49.152 --> 00:08:52.988
And you can even, there is, I think,
we talked a little bit about from event,

142
00:08:52.988 --> 00:08:55.503
there is I think,
from animation frame, as well.

143
00:08:55.503 --> 00:08:59.373
But even an abstraction around that, like
we saw in that first test, where you have

144
00:08:59.373 --> 00:09:03.430
an observer that says request animation
frame call next to get the next value.

145
00:09:03.430 --> 00:09:04.390
And do stuff along those lines.

146
00:09:04.390 --> 00:09:08.271
If there's not the API you want, you
can then use that kind of base version.

147
00:09:08.271 --> 00:09:11.582
But, yeah, for that standard stuff
especially with the DOM request

148
00:09:11.582 --> 00:09:13.480
idle callback has been super helpful.

149
00:09:13.480 --> 00:09:17.836
And I think it's browser only, so,
I don't think you have it in Node.

150
00:09:17.836 --> 00:09:21.182
But you also don't have users
touching stuff in Node.

151
00:09:21.182 --> 00:09:23.600
[LAUGH] So that's helpful, as well.

152
00:09:23.600 --> 00:09:28.924
&gt;&gt; Is there any additional resources for
recipes for common scenarios?

153
00:09:28.924 --> 00:09:35.497
&gt;&gt; That's a great question,

154
00:09:35.497 --> 00:09:38.645
let's see.

155
00:09:38.645 --> 00:09:40.099
&gt;&gt; Marble diagrams?
&gt;&gt; [LAUGH] Notes I made it through how

156
00:09:40.099 --> 00:09:41.714
many hours avoiding those, [LAUGH].

157
00:09:41.714 --> 00:09:44.257
Yeah, I mean the Docs are also, I think,

158
00:09:44.257 --> 00:09:48.564
once you get the fundamental concepts
like I do refer to the Docs a lot.

159
00:09:48.564 --> 00:09:50.973
So it's just RxJS.dev.

160
00:09:54.258 --> 00:09:57.011
To be clear to also if
you're using in React or

161
00:09:57.011 --> 00:09:59.333
if you're using with Redux, right?

162
00:09:59.333 --> 00:10:03.491
Redux is also framework agnostic even
though it has a buddy that it hangs out

163
00:10:03.491 --> 00:10:04.551
with all the time.

164
00:10:04.551 --> 00:10:06.687
I think redux-observable's really good.

165
00:10:06.687 --> 00:10:12.558
RxJS, the docs themselves are,
I don't know how to get to it from here,

166
00:10:12.558 --> 00:10:16.617
but I always know that I
can just do it's like API.

167
00:10:16.617 --> 00:10:19.386
No, there it is,

168
00:10:19.386 --> 00:10:24.570
I can get the creators over here.

169
00:10:24.570 --> 00:10:27.700
And then the operators.

170
00:10:27.700 --> 00:10:30.756
And then a lot of times I
will kind of go through and

171
00:10:30.756 --> 00:10:33.303
see which one speaks to me a lot of times.

172
00:10:33.303 --> 00:10:37.243
And just kind of figure out, cuz a lot of
times, these are common problems, you're

173
00:10:37.243 --> 00:10:40.962
gonna have weird one-off issues in your
code base that are just unique to you and

174
00:10:40.962 --> 00:10:43.710
the complexities of the problem
you're trying to solve.

175
00:10:43.710 --> 00:10:47.030
So, in here,
you can kind of figure out here, as well.

176
00:10:47.030 --> 00:10:49.123
So, I spent a lot of time on this page and

177
00:10:49.123 --> 00:10:51.730
then also the previous one
of just the index tab.

178
00:10:51.730 --> 00:10:53.598
These are all the creators.

179
00:10:53.598 --> 00:10:58.190
So, you can see that of is in here,
from, and then the operators,

180
00:10:58.190 --> 00:11:01.306
as well,
to kind of work through all of them.

181
00:11:01.306 --> 00:11:05.297
But, for me, it was just watching a bunch
of random YouTube videos that I have found

182
00:11:05.297 --> 00:11:07.247
piecemeal, one at a time, [LAUGH], so.

183
00:11:07.247 --> 00:11:12.977
&gt;&gt; Would do you recommend RxJS instead
of redux-saga in a React app for

184
00:11:12.977 --> 00:11:16.230
analytics, very specific?

185
00:11:16.230 --> 00:11:21.052
&gt;&gt; Yeah, so, redux-saga is another
way to asynchronously handle

186
00:11:21.052 --> 00:11:23.777
middleware using the saga pattern.

187
00:11:23.777 --> 00:11:29.521
I am embarrassed to tell you the story
of how we chose redux-observable and

188
00:11:29.521 --> 00:11:35.098
RxJS over redux-saga, but I will
tell it to you because you've asked.

189
00:11:35.098 --> 00:11:38.743
This was four years ago, five years ago,

190
00:11:38.743 --> 00:11:43.953
we were rearchitecting our
frontend code base at the time,

191
00:11:43.953 --> 00:11:49.390
and going from rails and some flux,
but we didn't know flux.

192
00:11:49.390 --> 00:11:53.627
So we implemented our own flux,
and then some jQuery and

193
00:11:53.627 --> 00:11:55.802
a more modern version of it.

194
00:11:55.802 --> 00:11:58.637
And the choices were redux-thunk,

195
00:11:58.637 --> 00:12:03.399
which has gotten better with
some of the Redux toolkit stuff.

196
00:12:03.399 --> 00:12:03.933
To be clear,

197
00:12:03.933 --> 00:12:07.590
anything I'm saying ill about redux-thunk
I'm saying about 2017 redux-thunk.

198
00:12:08.610 --> 00:12:13.500
And then there are the choices of
redux-saga and redux-observable.

199
00:12:13.500 --> 00:12:18.167
Redux-saga uses generator functions,
which as we saw in the very

200
00:12:18.167 --> 00:12:23.432
beginning of this course, is not
wildly different in its syntax, right?

201
00:12:23.432 --> 00:12:28.180
It has a set of values generated
over time, so on and so forth.

202
00:12:28.180 --> 00:12:31.446
But it has a little star on the function,
and

203
00:12:31.446 --> 00:12:36.390
one of the engineers on my
team didn't like the syntax.

204
00:12:36.390 --> 00:12:41.407
So, four or five years ago,
we committed to redux-observable cuz they

205
00:12:41.407 --> 00:12:46.769
seemed about equal at the time, but
that was our decision-making process.

206
00:12:46.769 --> 00:12:50.299
So, mostly, I continue to go with
RxJS cuz I am familiar with it.

207
00:12:50.299 --> 00:12:52.926
And it has,
we built a very large code base and

208
00:12:52.926 --> 00:12:55.079
that was never the problem, right?

209
00:12:55.079 --> 00:13:00.502
And we had to do a lot of questionable
orchestration of APIs to ship

210
00:13:00.502 --> 00:13:07.317
the features that we needed to ship when
we didn't have the APIs that we wanted to.

211
00:13:07.317 --> 00:13:09.144
And we're basically very
cleanly able to do all of them.

212
00:13:09.144 --> 00:13:12.642
That does not mean you couldn't get
that done in redux-saga, but we,

213
00:13:12.642 --> 00:13:15.399
at a certain point,
given two options, made a choice.

214
00:13:15.399 --> 00:13:18.655
And unlike a lot of technology choices,
we made a choice and

215
00:13:18.655 --> 00:13:20.489
then didn't regret it, right?

216
00:13:20.489 --> 00:13:24.941
[LAUGH] So, if RxJS wants
a testimonial for the webpage,

217
00:13:24.941 --> 00:13:30.950
I'll happily say, we chose it and
didn't regret it a few years later.

218
00:13:30.950 --> 00:13:34.137
Which is the highest praise, I think,
you can give any technology.

219
00:13:34.137 --> 00:13:35.755
Thank you all, thank you so much.

220
00:13:35.755 --> 00:13:40.173
&gt;&gt; [APPLAUSE]

