WEBVTT

1
00:00:00.000 --> 00:00:02.618
So let's talk a little bit about time.

2
00:00:02.618 --> 00:00:06.808
So the other thing that we might deal with
in our applications is things that happen,

3
00:00:06.808 --> 00:00:09.169
right now everything we've dealt with so
far,

4
00:00:09.169 --> 00:00:11.787
originally with from an of
was synchronous events.

5
00:00:11.787 --> 00:00:15.592
With from event we were just
responding to events as

6
00:00:15.592 --> 00:00:18.608
they kind of bubbled up through the DOM.

7
00:00:18.608 --> 00:00:22.916
In this case we also have some abilities
to kind of like play with time as well.

8
00:00:22.916 --> 00:00:27.862
And so another way that we can create
observables is with this helper utility

9
00:00:27.862 --> 00:00:29.729
function called interval.

10
00:00:29.729 --> 00:00:35.185
Interval creates a observable
stream that will go ahead and

11
00:00:35.185 --> 00:00:41.308
produce values at whatever number
of milliseconds that you want.

12
00:00:41.308 --> 00:00:46.704
Again, where this becomes super useful is
we've separated the ability to produce

13
00:00:46.704 --> 00:00:52.112
values from immediately doing a set
timeout, and just they're happening right.

14
00:00:52.112 --> 00:00:55.500
Here you actually get them and
you can work with them, yeah.

15
00:00:55.500 --> 00:00:59.894
&gt;&gt; You can subscribe to this
from many listeners that we can

16
00:00:59.894 --> 00:01:03.590
use reuse this component,
&gt;&gt; We can reuse it yep.

17
00:01:03.590 --> 00:01:06.900
One of the interesting things a little
caveat there, you can reuse it.

18
00:01:06.900 --> 00:01:11.603
And cuz again, we've separated the idea
of producing values on a time interval,

19
00:01:11.603 --> 00:01:13.459
do anything with those values.

20
00:01:13.459 --> 00:01:18.214
Each subscription will
actually get its own copy.

21
00:01:18.214 --> 00:01:22.749
The interval utility
function starts with value,

22
00:01:22.749 --> 00:01:27.393
starts at I believe 0, 1,
2, so on and so forth.

23
00:01:27.393 --> 00:01:29.476
Here I'm subtracting it from
starting time just to see that,

24
00:01:29.476 --> 00:01:30.692
hey it's happening every second.

25
00:01:30.692 --> 00:01:33.417
Now you look at it's like, why is it 1002?

26
00:01:33.417 --> 00:01:37.044
Because JavaScript set timeout,
that's when it puts it on the event loop,

27
00:01:37.044 --> 00:01:38.754
not necessarily when it executes.

28
00:01:38.754 --> 00:01:43.751
So if you had multiple subscriptions
that each start from the beginning,

29
00:01:43.751 --> 00:01:48.112
there is a way to share one
observable across many subscribers.

30
00:01:48.112 --> 00:01:52.176
And when we get to operators, we'll take
a look at that as well probably little

31
00:01:52.176 --> 00:01:55.209
sooner than I anticipated,
cuz it's come up a few times.

32
00:01:55.209 --> 00:01:58.149
We'll look at it in a playground as well.

33
00:01:58.149 --> 00:01:59.181
But yeah, it's again,

34
00:01:59.181 --> 00:02:02.440
separating the idea of producing values
from doing things with those values.

35
00:02:02.440 --> 00:02:05.491
Again, with a set time,
I'll do these things are roughly coupled,

36
00:02:05.491 --> 00:02:07.503
clear interval, you've got to keep track.

37
00:02:07.503 --> 00:02:11.113
You have basically have the same API for
subscribing unsubscribing for

38
00:02:11.113 --> 00:02:12.746
all of these different things.

39
00:02:12.746 --> 00:02:16.602
Timer is similar to interval.

40
00:02:16.602 --> 00:02:19.731
The only difference is timer
you can give it a value.

41
00:02:19.731 --> 00:02:23.562
It will emit a value after that much time,
right?

42
00:02:23.562 --> 00:02:26.849
So, interval will do it after
that much time and continue,

43
00:02:26.849 --> 00:02:28.643
it will not do one immediately.

44
00:02:28.643 --> 00:02:31.791
Timer it will immediately it will do
it as soon as you have the time and

45
00:02:31.791 --> 00:02:34.774
then you could actually give it
a second value will will continue

46
00:02:34.774 --> 00:02:36.560
to produce value is like an interval.

47
00:02:36.560 --> 00:02:39.822
So, if you needed one where I give me
a value now, and then every other second,

48
00:02:39.822 --> 00:02:41.167
we probably use timer for that.

49
00:02:41.167 --> 00:02:45.267
So, you look at 2 arguments, it will
produce its first value after 2 seconds,

50
00:02:45.267 --> 00:02:47.214
and then every 5 seconds after that.

51
00:02:47.214 --> 00:02:52.095
So you might say something like 0,
and then every second after that,

52
00:02:52.095 --> 00:02:57.322
would start you immediate event, and
then you get one every other second.

53
00:02:57.322 --> 00:03:01.651
It really just depends on what you need
to do for what the right choice is.

54
00:03:01.651 --> 00:03:05.634
And yeah, like they just behave
slightly differently, that's all.

55
00:03:05.634 --> 00:03:11.320
One of the things that we're probably
gonna have to deal with a little bit,

56
00:03:11.320 --> 00:03:16.837
now that we have, infinite values is
how do I make it stop, [LAUGH] right?

57
00:03:16.837 --> 00:03:21.116
You wanna like the event situation that
we had before with the button clicks.

58
00:03:21.116 --> 00:03:24.377
I mean, yeah,
we never unsubscribed from it., but

59
00:03:24.377 --> 00:03:28.591
like one way to handle that is just
stop clicking the button, right?

60
00:03:28.591 --> 00:03:32.955
But as soon as we start, if we were
running through one of those infinite

61
00:03:32.955 --> 00:03:35.577
generators we're talking about before,

62
00:03:35.577 --> 00:03:38.436
making it stop is
sometimes super important.

63
00:03:38.436 --> 00:03:41.892
So it turns out that when we
subscribe to an observable,

64
00:03:41.892 --> 00:03:44.106
we get back a subscription object.

65
00:03:44.106 --> 00:03:46.192
It's got a bunch of methods.

66
00:03:46.192 --> 00:03:48.784
It's got the ability to add
other subscriptions, so

67
00:03:48.784 --> 00:03:50.806
you can unsubscribe from a bunch at once.

68
00:03:50.806 --> 00:03:57.318
But the one that we care about at this
moment is the ability to unsubscribe.

69
00:03:57.318 --> 00:04:01.572
Now notice I'm using a set timeout,
that feels a little wonky.

70
00:04:01.572 --> 00:04:04.797
If that is the way that you
feel that is a good feeling,

71
00:04:04.797 --> 00:04:08.108
we just don't have the tools yet
to do it the right way.

72
00:04:08.108 --> 00:04:10.408
We are again building up that
toolset of understanding.

73
00:04:10.408 --> 00:04:14.775
But we can unsubscribe from observable
by calling the unsubscribe method.

74
00:04:14.775 --> 00:04:19.462
That will work, if we had a generator
producing a synchronous values that will

75
00:04:19.462 --> 00:04:23.864
work on a forum event, that will work
on any of these timer intervals is one

76
00:04:23.864 --> 00:04:26.152
common API for making anything stop.

77
00:04:26.152 --> 00:04:30.880
[LAUGH] If you need to make stuff
[LAUGH] you just reply to that email all

78
00:04:30.880 --> 00:04:32.569
caps unsubscribe, and

79
00:04:32.569 --> 00:04:37.650
then you have unsubscribed from that
observable and you are good to go.

