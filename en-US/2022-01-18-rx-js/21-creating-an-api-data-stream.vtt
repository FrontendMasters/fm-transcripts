WEBVTT

1
00:00:00.660 --> 00:00:01.530
All right so here's the challenge.

2
00:00:02.690 --> 00:00:06.837
We know how to do things on
a regular interval like change

3
00:00:06.837 --> 00:00:09.430
the number on a screen.

4
00:00:09.430 --> 00:00:12.386
We know how to fetch data.

5
00:00:12.386 --> 00:00:17.125
Changing a number on a screen
not that impressive however,

6
00:00:17.125 --> 00:00:19.219
there you can see a world.

7
00:00:19.219 --> 00:00:23.912
And this is where I had to implement
this last week, which is like cool,

8
00:00:23.912 --> 00:00:28.150
fetch the data but then fetch it again,
every so often, right?

9
00:00:28.150 --> 00:00:30.010
Like every 30 seconds every minute.

10
00:00:30.010 --> 00:00:34.892
Like if you're working on like, let's say
a dashboard right you want to shoot maybe

11
00:00:34.892 --> 00:00:38.692
you have long pole and
we have WebSockets maybe you don't right.

12
00:00:38.692 --> 00:00:43.175
So depending on what you have available
you might have to take different

13
00:00:43.175 --> 00:00:48.340
techniques so one is simply to refetch at
some kind of reasonable interval right.

14
00:00:48.340 --> 00:00:53.652
So how would we combine a little bit
of what we saw with starting and

15
00:00:53.652 --> 00:00:58.867
stopping observable with theoretically,
pull up some data and

16
00:00:58.867 --> 00:01:04.485
then every so on and so forth,
refresh and reload that data, right.

17
00:01:04.485 --> 00:01:09.480
That is definitely a probably more
realistic use case then I counter, right.

18
00:01:09.480 --> 00:01:14.020
But effectively under the hood,
it's just a counter, right?

19
00:01:14.020 --> 00:01:15.450
It's the same concept.

20
00:01:15.450 --> 00:01:18.272
It's just, sometimes you got to
snap two things together for

21
00:01:18.272 --> 00:01:20.540
it to be somewhat impressive.

22
00:01:20.540 --> 00:01:22.350
So, okay, how would this work?

23
00:01:22.350 --> 00:01:27.446
I'm gonna move my error back one of
the reasons why I had it in here,

24
00:01:27.446 --> 00:01:30.631
so one kind of contiguous piece of logic.

25
00:01:30.631 --> 00:01:36.600
So we have this ability to theoretically
to fetch from fetch to fetch some data.

26
00:01:36.600 --> 00:01:41.486
This seems like a great candidate
especially because if you find

27
00:01:41.486 --> 00:01:46.733
a world where observable is getting
a little gnarly cuz it's getting

28
00:01:46.733 --> 00:01:52.430
kind of big you do the same thing
you do with any other piece of code.

29
00:01:52.430 --> 00:01:57.036
You take your big ugly piece of code and
you break it into smaller uglier

30
00:01:57.036 --> 00:02:01.670
pieces of code and then you hide them
in different files [LAUGH] right?

31
00:02:01.670 --> 00:02:06.360
And that is how you develop software.

32
00:02:06.360 --> 00:02:09.559
So let's take this logic of fetching
because we're going to do it more

33
00:02:09.559 --> 00:02:10.110
than once.

34
00:02:10.110 --> 00:02:13.470
We'll say fetch data,
that seems like a great name for this.

35
00:02:14.620 --> 00:02:17.040
And we can go ahead and
we can pop this in here.

36
00:02:18.410 --> 00:02:21.739
And we'll grab all of this logic.

37
00:02:21.739 --> 00:02:22.590
That should be it right?

38
00:02:22.590 --> 00:02:25.740
Yep all this logic here,

39
00:02:25.740 --> 00:02:30.549
and we'll pop it into that function.

40
00:02:30.549 --> 00:02:32.378
Great, awesome.

41
00:02:32.378 --> 00:02:37.760
So now our exhaust map
really becomes this.

42
00:02:37.760 --> 00:02:42.543
This is what we're dealing with
whenever they hit the fetch button,

43
00:02:42.543 --> 00:02:45.594
right, we're simply exhaust mapping this

44
00:02:45.594 --> 00:02:49.730
factory function that will
return an observable, right?

45
00:02:49.730 --> 00:02:53.286
Very similar to what we saw when we
returned one from throttling but

46
00:02:53.286 --> 00:02:56.600
it's same thing you do
with a map on an array.

47
00:02:56.600 --> 00:02:57.340
So we've got that.

48
00:02:59.670 --> 00:03:04.803
This fetch button seems good, but
instead of having it immediately trigger,

49
00:03:04.803 --> 00:03:10.091
we're going to start the process have at
a regular cadence fetching that data and

50
00:03:10.091 --> 00:03:11.193
refreshing it.

51
00:03:11.193 --> 00:03:12.262
So we'll go and

52
00:03:12.262 --> 00:03:17.362
set like we've seen this before we saw
it earlier where we can map to true in

53
00:03:17.362 --> 00:03:22.650
this case let's make sure the VS code
likes me today yep map to is available.

54
00:03:25.190 --> 00:03:32.450
Sweet and then the other button is what,
it's a stop button this time.

55
00:03:32.450 --> 00:03:34.009
So we'll call that stop button.

56
00:03:40.681 --> 00:03:42.230
We'll even spell false
rights at this time.

57
00:03:42.230 --> 00:03:46.602
So now we've got very similar to what
y'all implemented with the counter

58
00:03:46.602 --> 00:03:51.150
before right we have the ability to
emit true events and false events.

59
00:03:51.150 --> 00:03:51.970
What's the next step?

60
00:03:53.350 --> 00:03:54.820
I need both of these?

61
00:03:54.820 --> 00:03:55.679
&gt;&gt; Merge them.

62
00:03:55.679 --> 00:03:57.449
&gt;&gt; Merge them, right?

63
00:03:59.657 --> 00:04:01.546
Let's call it I don't know facts stream.

64
00:04:04.194 --> 00:04:06.449
Naming things in computer science is hard.

65
00:04:06.449 --> 00:04:12.878
We'll merge the fetch event and
the staff event,

66
00:04:15.751 --> 00:04:19.020
And we'll pipe them.

67
00:04:19.020 --> 00:04:20.320
So now we'll get both of these.

68
00:04:21.480 --> 00:04:26.623
So exhaust map because we only wanted
to deal with one at a time but

69
00:04:26.623 --> 00:04:32.110
in this case, these will be
synchronous but what is the correct?

70
00:04:32.110 --> 00:04:34.643
If I want to switch between fetching and

71
00:04:34.643 --> 00:04:37.421
not fetching what kind
of map should I use?

72
00:04:37.421 --> 00:04:38.051
&gt;&gt; Switch.

73
00:04:38.051 --> 00:04:38.820
&gt;&gt; Switch, right?

74
00:04:38.820 --> 00:04:41.140
I will care about the most recent one.

75
00:04:41.140 --> 00:04:43.180
I don't care if I use a merge map.

76
00:04:43.180 --> 00:04:45.990
I'll keep making more streams, right?

77
00:04:45.990 --> 00:04:51.110
Every time I start and stop, I'll create
that many more nevers or fetch events.

78
00:04:51.110 --> 00:04:54.153
So what we want is a switch map so

79
00:04:54.153 --> 00:04:59.667
we only care about the last
time they said start or stop.

80
00:04:59.667 --> 00:05:03.491
We don't care what happened in
the past we live in the now we

81
00:05:03.491 --> 00:05:06.630
deal with the current situation so
switch map.

82
00:05:09.049 --> 00:05:11.778
We'll call it like,
should I or should fetch.

83
00:05:13.729 --> 00:05:14.729
Seems more confident.

84
00:05:17.919 --> 00:05:22.490
Cool, and let's see if they should fetch.

85
00:05:22.490 --> 00:05:24.131
Does it go right?

86
00:05:24.131 --> 00:05:24.690
Should I fetch?

87
00:05:24.690 --> 00:05:30.104
But I don't this is the codes that
I'm trying to figure out man and

88
00:05:30.104 --> 00:05:35.233
if they should fetch then what
we wanna do is return the timer.

89
00:05:35.233 --> 00:05:38.913
The fire is immediately cause they hit
the button lets not into the war wait that

90
00:05:38.913 --> 00:05:42.484
amount of time before the first event
is emitted timer fires immediately and

91
00:05:42.484 --> 00:05:44.960
then again at whatever
cadence you tell it to.

92
00:05:44.960 --> 00:05:50.147
So timer fire right now and then again
in five seconds every five seconds.

93
00:05:50.147 --> 00:05:55.199
So we'll say what's a pipe and
I really I could do this all

94
00:05:55.199 --> 00:06:01.302
subscribe is just going to be the final
event in this case what I really

95
00:06:01.302 --> 00:06:07.954
need to do now is clean up the facts
in the error message every time, right?

96
00:06:07.954 --> 00:06:09.813
Because this case we want to hide them and
replace them.

97
00:06:09.813 --> 00:06:12.812
And I want to clear the error message
out like this fetch is only gonna give

98
00:06:12.812 --> 00:06:15.958
us the final value of the subscribers
only give us the final value that's not

99
00:06:15.958 --> 00:06:16.959
useful for us anymore.

100
00:06:16.959 --> 00:06:19.689
So what we'll do is we'll
pipe in will say tap.

101
00:06:21.989 --> 00:06:28.230
Clear there's Also tap and
I could do these both in the same.

102
00:06:28.230 --> 00:06:33.554
I just chose not to And

103
00:06:33.554 --> 00:06:38.471
now this is where we'll put that
exhaust map that we had before.

104
00:06:42.636 --> 00:06:47.447
So when they should be fetching
every immediately then every five

105
00:06:47.447 --> 00:06:52.352
seconds we'll clean up the UI and
we will go get new facts, right.

106
00:06:52.352 --> 00:06:54.407
Now we could theoretically be like,
actually,

107
00:06:54.407 --> 00:06:56.672
I want to keep the facts until
we get the new ones cool.

108
00:06:56.672 --> 00:07:03.201
Like you can do that later and
if we should not be fetching,

109
00:07:07.379 --> 00:07:11.525
Switch them to just a moment of silence,
right?

110
00:07:11.525 --> 00:07:14.340
And so now we have the stream
that goes switch back and forth.

111
00:07:14.340 --> 00:07:18.967
Again it's merging it's two sources
are the start and the stop button, so

112
00:07:18.967 --> 00:07:21.810
the fetch and the stop button.

113
00:07:21.810 --> 00:07:26.001
Based on that it is either going to point
us an observable that is gonna keep making

114
00:07:26.001 --> 00:07:27.050
that API request and

115
00:07:27.050 --> 00:07:30.456
the cool part about this is not
only gonna create the API request.

116
00:07:30.456 --> 00:07:35.680
But it has all that retry and
error catching logic as well right or

117
00:07:35.680 --> 00:07:39.841
if they say I'm no longer
interested in getting new

118
00:07:39.841 --> 00:07:44.123
dog facts that's a personal
choice I respect that.

119
00:07:44.123 --> 00:07:47.000
Then we switch them to
the never stream of silence.

120
00:07:47.000 --> 00:07:49.120
So in they can toggle back and
forth between these.

121
00:07:51.350 --> 00:07:54.479
So we don't need that anymore so
say our facts stream.

122
00:08:01.030 --> 00:08:05.539
Subscribe add facts in this case,
so whenever a value comes

123
00:08:05.539 --> 00:08:10.510
through which again, in the off
case it will never come through.

124
00:08:12.280 --> 00:08:14.060
Thank you VS code.

125
00:08:14.060 --> 00:08:18.325
In the fact stream nothing will ever come
through so there's nothing to add to

126
00:08:18.325 --> 00:08:22.870
the page if I used empty instead it would
technically omit nothing then complete.

127
00:08:22.870 --> 00:08:24.597
That's not what I want,

128
00:08:24.597 --> 00:08:29.211
I just want radio silence until I
switch back to some of the values.

129
00:08:29.211 --> 00:08:32.830
So is this what always blows up,
which is not what I want in this case.

130
00:08:32.830 --> 00:08:36.749
And I might wanna keep some of the, I
guess I'm not showing there in this case.

131
00:08:36.749 --> 00:08:39.699
So the code that I had before
was probably useful but

132
00:08:39.699 --> 00:08:42.040
let's find we'll make it successful.

133
00:08:42.040 --> 00:08:43.620
We can change it later if we want.

134
00:08:43.620 --> 00:08:45.501
The code that I had
before it was like okay,

135
00:08:45.501 --> 00:08:47.644
if it's an error show
the error I just said like,

136
00:08:47.644 --> 00:08:51.280
no matter what are the facts if you get
this error object, things go poorly again.

137
00:08:51.280 --> 00:08:52.230
Well, we can switch that back.

138
00:08:54.980 --> 00:08:56.549
But we can also make the API fail.

139
00:08:59.752 --> 00:09:00.679
All right, let's see.

140
00:09:00.679 --> 00:09:01.820
All right, so I get some dog facts.

141
00:09:01.820 --> 00:09:03.529
I think it still had a delay on it.

142
00:09:03.529 --> 00:09:05.800
They clear out I get new ones.

143
00:09:05.800 --> 00:09:07.330
This API still has a delay.

144
00:09:07.330 --> 00:09:08.392
Like I said before,

145
00:09:08.392 --> 00:09:11.766
we could choose to wait until we
got the new ones and then show them

146
00:09:11.766 --> 00:09:16.289
that's again how that's when you start to
play around the order of operations here.

147
00:09:16.289 --> 00:09:19.560
And you basically have all
the tools necessary to do that.

148
00:09:19.560 --> 00:09:24.413
So you could theoretically immediately you
could even do in the subscribe like I have

149
00:09:24.413 --> 00:09:27.896
new facts go clear out the other
ones as shown on the page, but

150
00:09:27.896 --> 00:09:30.519
if I took out the delay,
we can see it as well.

151
00:09:36.848 --> 00:09:38.410
So let's make a regular API again.

152
00:09:38.410 --> 00:09:42.862
And so what's cool about this is now I
have complete control with just regular

153
00:09:42.862 --> 00:09:44.170
JavaScript objects.

154
00:09:44.170 --> 00:09:47.400
It's not like okay, set this interval
clear this interval on mount on load.

155
00:09:47.400 --> 00:09:52.910
I have this stream I can listen to
it when I'm ready to listen to it.

156
00:09:52.910 --> 00:09:56.891
I can stop listening when I want to stop
listen to I'm not thinking about intervals

157
00:09:56.891 --> 00:09:58.054
or anything like that.

158
00:09:58.054 --> 00:10:01.803
Again, like in a framework where you
might make this kind of interesting for

159
00:10:01.803 --> 00:10:05.449
yourself is component did mount,
component will unmount, use effect.

160
00:10:05.449 --> 00:10:10.281
What have you, like start listening,
stop listening so

161
00:10:10.281 --> 00:10:15.224
here they'll just kind of
refresh at a regular interval.

162
00:10:19.699 --> 00:10:24.674
We have dog facts
streaming at you live and

163
00:10:24.674 --> 00:10:31.590
then we can stop it and
they will stop fetching, right?

164
00:10:31.590 --> 00:10:32.930
So we combined a lot of concepts here.

165
00:10:32.930 --> 00:10:35.421
Let's just kind of,
let's celebrate ourselves for a second and

166
00:10:35.421 --> 00:10:36.330
talk about what we did.

167
00:10:38.130 --> 00:10:43.286
We have a fetch situation
where not only will it catch

168
00:10:43.286 --> 00:10:48.320
an error and display,
some UI, it will retry.

169
00:10:48.320 --> 00:10:51.110
It'll handle all of the kind of
different error states around that.

170
00:10:51.110 --> 00:10:55.510
We can then also take that and
set it to work on timers.

171
00:10:55.510 --> 00:10:58.240
We took everything we learned about
the counter and setting timers and

172
00:10:58.240 --> 00:10:59.720
starting and stopping flows.

173
00:10:59.720 --> 00:11:02.684
We took everything we
learned about async and

174
00:11:02.684 --> 00:11:06.746
we put them together into like
basically one kind of concept.

175
00:11:06.746 --> 00:11:09.499
So you can start to take
these different ideas and

176
00:11:09.499 --> 00:11:13.340
snap them together to solve different
problems that might come up.

