WEBVTT

1
00:00:00.000 --> 00:00:04.926
So, I am going to kind of take
this first spin real quick, so

2
00:00:04.926 --> 00:00:09.171
I have this very kind of
simple example right here.

3
00:00:09.171 --> 00:00:13.904
Where we have of and from, and one of
the reasons we're taking a tour here is

4
00:00:13.904 --> 00:00:18.790
you're gonna try this out yourself in
a second in a slightly different file,

5
00:00:18.790 --> 00:00:22.195
but kinda walk you through
what we're gonna do here.

6
00:00:22.195 --> 00:00:28.933
One easy way to test observables
is to basically go ahead and

7
00:00:28.933 --> 00:00:33.263
collect them all in an array, right?

8
00:00:33.263 --> 00:00:35.084
So here we have result,

9
00:00:35.084 --> 00:00:40.378
we don't have any code signifying
what would actually happen here.

10
00:00:40.378 --> 00:00:43.850
Again, to use observable you can
set it up but nothing happens with

11
00:00:43.850 --> 00:00:48.072
an observable until you subscribe to it,
so observables are effectively lazy.

12
00:00:48.072 --> 00:00:52.815
You can establish when you say
this is you have 1, 2, 3, 4, but

13
00:00:52.815 --> 00:00:57.328
nothing is happening to those
values until you subscribe to it.

14
00:00:57.328 --> 00:01:00.563
And then it activates and
we'll go run through all of these things,

15
00:01:00.563 --> 00:01:04.138
each time you subscribe to it, you get
a fresh version of the observable and

16
00:01:04.138 --> 00:01:06.833
we'll see how to like deal
with that a little bit later.

17
00:01:06.833 --> 00:01:11.244
And it will run through each one of those
values, right, and in case of of or

18
00:01:11.244 --> 00:01:14.046
from you're gonna get it
either immediately or

19
00:01:14.046 --> 00:01:17.076
in the case of a promise
when the promise resolves.

20
00:01:17.076 --> 00:01:20.651
Later on we will see intervals, and
events, and stuff along those lines,

21
00:01:20.651 --> 00:01:22.660
it'll be, whenever the thing happens.

22
00:01:22.660 --> 00:01:24.627
All right, so, what will this look like?

23
00:01:24.627 --> 00:01:31.378
So we could say,
if we wanted to use of in this case,

24
00:01:31.378 --> 00:01:36.559
we could say observable and now clearly

25
00:01:36.559 --> 00:01:42.850
that's not gonna put
anything into my result.

26
00:01:42.850 --> 00:01:47.290
So this test would fail if I
ran it immediately, and so

27
00:01:47.290 --> 00:01:50.843
what we need to do here
is say observable and

28
00:01:50.843 --> 00:01:56.189
then we'll subscribe to it and
we'll get each value one by one.

29
00:01:59.993 --> 00:02:04.975
Right, and this is kinda cool cuz it
means that you can create an observable,

30
00:02:04.975 --> 00:02:09.899
whether it be from a promise from your
API, whether it be from a given event.

31
00:02:09.899 --> 00:02:14.103
And you can separate the creation of the
stream and what you want to do with it,

32
00:02:14.103 --> 00:02:17.209
right, which means you can
kind of create this and yeah,

33
00:02:17.209 --> 00:02:19.556
this is obviously a super simple example.

34
00:02:19.556 --> 00:02:23.090
But you could create this export
it in a given JavaScript module,

35
00:02:23.090 --> 00:02:27.203
import the idea of creating a stream
multiple places, and then how you use it

36
00:02:27.203 --> 00:02:31.522
throughout your application can vary
depending on what you need to do, right?

37
00:02:31.522 --> 00:02:36.073
So, you can have one observable
listening to mouse clicks just on

38
00:02:36.073 --> 00:02:40.889
the document itself, or keystroke or
something along those lines.

39
00:02:40.889 --> 00:02:45.014
And different parts of your application,
whether it's dismissing drop-down menus or

40
00:02:45.014 --> 00:02:48.160
models or something along those
lines can listen to that one event.

41
00:02:48.160 --> 00:02:51.986
It's not okay, cool, this modal loaded,
let me add an event listener and

42
00:02:51.986 --> 00:02:53.888
clean it up when the modal goes away.

43
00:02:53.888 --> 00:02:56.372
I can literally just have this stream and

44
00:02:56.372 --> 00:03:00.770
the subscription is separated from
the creation of the stream itself.

45
00:03:00.770 --> 00:03:04.551
So I can run this first test and

46
00:03:04.551 --> 00:03:09.846
see that's running and this one passes,

47
00:03:09.846 --> 00:03:14.987
right, and again from is very similar in

48
00:03:14.987 --> 00:03:20.298
this case and so we could say observable.

49
00:03:22.870 --> 00:03:25.903
Well, this point we'll just use
the array instead, right, and

50
00:03:25.903 --> 00:03:29.115
you could write a generator in here,
you could do whatever you want.

51
00:03:29.115 --> 00:03:32.039
We'll just grab this code from up here,
and

52
00:03:32.039 --> 00:03:34.965
we'll put the same values
into the array and

53
00:03:34.965 --> 00:03:39.655
this point we will not skip the test,
and we have both of them in place.

54
00:03:39.655 --> 00:03:44.400
So this is the kind of simplest
possible version of this that we can

55
00:03:44.400 --> 00:03:49.341
use to understand how exactly go
about creating some of these mark.

56
00:03:49.341 --> 00:03:51.234
&gt;&gt; [INAUDIBLE] events,

57
00:03:51.234 --> 00:03:57.255
does the expect method execute
before the observable results?

58
00:03:57.255 --> 00:04:03.805
&gt;&gt; Yes [LAUGH] yes,
that is a great segue, right?

59
00:04:03.805 --> 00:04:08.274
So yeah, one thing, so
the question was is for

60
00:04:08.274 --> 00:04:13.662
asynchronous events doesn't
just get angry and ask for

61
00:04:13.662 --> 00:04:19.161
some kind of way to know that
we're done doing whatever we

62
00:04:19.161 --> 00:04:25.600
need to do in order to run the actual
expectation and just, right?

63
00:04:25.600 --> 00:04:30.469
Yeah, just gets angry because
the asynchronous events will happen after

64
00:04:30.469 --> 00:04:31.656
the test closes.

65
00:04:31.656 --> 00:04:35.648
So pop quiz, on observable,
we have next forgiving event,

66
00:04:35.648 --> 00:04:39.110
that's what we're using
put things into an array.

67
00:04:39.110 --> 00:04:44.970
What do we have to know when we're
totally done with the observable?

68
00:04:44.970 --> 00:04:47.016
&gt;&gt; Complete.
&gt;&gt; Complete, right, and

69
00:04:47.016 --> 00:04:52.010
so what we could theoretically do here
is if we only care about the next value

70
00:04:52.010 --> 00:04:54.561
we just put in that function, right?

71
00:04:54.561 --> 00:04:59.316
If we need to wait for
the observable to be done to do something,

72
00:04:59.316 --> 00:05:04.729
then we can use complete and
that's when we would run our expectation.

73
00:05:04.729 --> 00:05:09.133
So in here we have an exercise
with creating observables, and

74
00:05:09.133 --> 00:05:14.298
the reason why I love that question so
much is kind of towards the bottom we

75
00:05:14.298 --> 00:05:19.311
have some situations where we're
we're creating it from a promise.

76
00:05:19.311 --> 00:05:24.961
So ingest if it is an asynchronous test
you can pass it a done as an argument in

77
00:05:24.961 --> 00:05:30.002
the it statement and then you call
it whenever you are in fact done.

