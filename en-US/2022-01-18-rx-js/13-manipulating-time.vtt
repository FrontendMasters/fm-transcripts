WEBVTT

1
00:00:00.140 --> 00:00:04.340
So now we can talk a little bit about,
manipulating time.

2
00:00:04.340 --> 00:00:08.180
So we've got another example in here,
called manipulating time.

3
00:00:09.620 --> 00:00:13.160
And this looks like the notifications
that we had previously out of the box.

4
00:00:13.160 --> 00:00:14.660
It does exactly what we had before.

5
00:00:16.040 --> 00:00:21.630
Let's go and like, let's see some of the
fun tools that we have at our disposal.

6
00:00:22.930 --> 00:00:25.809
We'll start out with a very
simple operator let me go over to

7
00:00:25.809 --> 00:00:26.854
manipulating time.

8
00:00:30.957 --> 00:00:33.860
And you can kind of see some of
the ones that we have to work with.

9
00:00:33.860 --> 00:00:36.250
I've already imported them here for us.

10
00:00:36.250 --> 00:00:39.280
We've got delay to bounce and throttle.

11
00:00:39.280 --> 00:00:42.382
We've got some of our old
friends scan map and tap, but

12
00:00:42.382 --> 00:00:45.030
the ones we want talk about delay.

13
00:00:45.030 --> 00:00:48.270
Debounce time throttle time to bounce and
throttle.

14
00:00:48.270 --> 00:00:52.468
These are ways as we talked about before,
if someone starts rage clicking,

15
00:00:52.468 --> 00:00:54.970
maybe we don't want to slam the API,
right?

16
00:00:54.970 --> 00:00:57.470
Maybe we want to ignore things.

17
00:00:57.470 --> 00:01:02.253
A common use case that
we might use RX js for

18
00:01:02.253 --> 00:01:05.670
is figuring out like, okay,

19
00:01:05.670 --> 00:01:11.570
they're typing into an auto Complete,
right?

20
00:01:11.570 --> 00:01:15.520
Every keystroke who wants send
an API request for the search API.

21
00:01:15.520 --> 00:01:19.040
What about if, when they're done
typing for like 300 milliseconds?

22
00:01:19.040 --> 00:01:20.660
Then we'll go someone over.

23
00:01:20.660 --> 00:01:25.086
And so there's a bunch of
the ability to control the rate

24
00:01:25.086 --> 00:01:29.520
at which things happen,
set a super useful operator.

25
00:01:29.520 --> 00:01:34.510
So let's take a look here and
let's see what we can learn along the way.

26
00:01:34.510 --> 00:01:36.740
So we have this button and
we want to delay it.

27
00:01:36.740 --> 00:01:41.330
Two seconds, five seconds, however
many seconds you want into the future.

28
00:01:41.330 --> 00:01:44.930
So we can pass in the delay operator and
save that.

29
00:01:46.630 --> 00:01:52.280
And now and go ahead on the city
to Mississippi and it shows up.

30
00:01:52.280 --> 00:01:57.410
Right now if I right click two
Mississippi, and here they are, right?

31
00:01:57.410 --> 00:02:00.164
Because there's only delay in them two
seconds from when they started that's

32
00:02:00.164 --> 00:02:01.720
spacing them out by two seconds.

33
00:02:01.720 --> 00:02:03.350
It's simply delaying them.

34
00:02:03.350 --> 00:02:06.076
There's a whole bunch of really
interesting ones there are buffer,

35
00:02:06.076 --> 00:02:08.426
which will collect all of them
in a certain amount of time and

36
00:02:08.426 --> 00:02:10.940
give you an array of all
the things that happened.

37
00:02:10.940 --> 00:02:14.960
There's a whole bunch of ones for that
probably aren't common enough to make it

38
00:02:14.960 --> 00:02:18.860
worth their time in the fundamentals
course, but definitely like a one point

39
00:02:18.860 --> 00:02:23.040
you will have one use case where you
need these and they're there for you.

40
00:02:23.040 --> 00:02:27.091
But the common ones that we might have is
be cool if we could stop the rage clicking

41
00:02:27.091 --> 00:02:30.240
especially cuz once you add
a delay to anything that's slow.

42
00:02:31.380 --> 00:02:36.040
I mean, I wrote this and I want to rage
click it when it takes two seconds right.

43
00:02:36.040 --> 00:02:41.725
And so what we could do is we could say,

44
00:02:41.725 --> 00:02:46.362
throttle time, two seconds.

45
00:02:46.362 --> 00:02:50.660
And, I'll repeat this a few times
because it bears repeating.

46
00:02:51.870 --> 00:02:55.440
Throttle time into balance time
are basically two sides of the same coin.

47
00:02:55.440 --> 00:02:58.861
Throttle time says,
let's think through and

48
00:02:58.861 --> 00:03:03.040
then ignore things for
however long, right?

49
00:03:03.040 --> 00:03:05.990
To bounce time is going to be.

50
00:03:07.040 --> 00:03:11.290
Ignore everything till two
seconds of quiet have happened.

51
00:03:11.290 --> 00:03:13.530
I'm apparent to this, I relate to this.

52
00:03:13.530 --> 00:03:18.247
Until this two seconds of quiet and then
I will do whatever it is the last thing

53
00:03:18.247 --> 00:03:21.060
that was queued up for me to do, right?

54
00:03:21.060 --> 00:03:25.300
So throttle time is I'm busy,
wait a minute.

55
00:03:25.300 --> 00:03:27.620
The bounce time is I
need a moment of peace.

56
00:03:28.670 --> 00:03:33.550
However many seconds of silence and
then I will go do whatever I meant to do.

57
00:03:33.550 --> 00:03:38.312
So here we can can put it away two seconds
let's just get rid of that let's just

58
00:03:38.312 --> 00:03:41.479
say throttle time it's now
I can go to town on this.

59
00:03:43.220 --> 00:03:46.664
And really about every two seconds
you'll see another one up here,

60
00:03:46.664 --> 00:03:48.305
even though I am out of control.

61
00:03:50.200 --> 00:03:52.985
Right and then we've got debounce time.

62
00:03:54.965 --> 00:03:56.423
For two seconds, which is.

63
00:03:58.383 --> 00:04:00.250
Don't do anything.

64
00:04:00.250 --> 00:04:05.010
I can keep going I can keep clicking and
go out of control here I can

65
00:04:05.010 --> 00:04:09.650
trigger whatever it is that thing
I never want it Mac OS to do.

66
00:04:09.650 --> 00:04:14.510
I don't need the dictionary word my
browser but I can keep clicking on it

67
00:04:14.510 --> 00:04:19.860
until I stop for two seconds,
then we'll see it actually happen again.

68
00:04:19.860 --> 00:04:22.020
Autocomplete is a great use case for
this, right?

69
00:04:22.020 --> 00:04:24.750
I don't want to hit the API until
I've chilled out for a moment.

70
00:04:24.750 --> 00:04:26.010
I know they're done right?

71
00:04:26.010 --> 00:04:28.380
Anything that might be
potentially expensive.

72
00:04:28.380 --> 00:04:31.253
Like most in browser,
like if you're rendering mark down, for

73
00:04:31.253 --> 00:04:32.750
instance, it's pretty quick.

74
00:04:32.750 --> 00:04:35.579
But if you have something that was
a little bit more long running,

75
00:04:35.579 --> 00:04:37.320
let's not do it every keystroke.

76
00:04:37.320 --> 00:04:41.389
Let's do it at a natural
pause right usually about 300

77
00:04:41.389 --> 00:04:46.490
milliseconds is being good time at
that point and get a sense for it.

78
00:04:46.490 --> 00:04:51.012
And then we've also got just throttle and
bounce and

79
00:04:51.012 --> 00:04:54.926
those work like,
skip until and take until.

80
00:04:54.926 --> 00:05:00.316
Which is basically in total,
another observable emits a value,

81
00:05:00.316 --> 00:05:05.902
either, ignore things until this
other observable emits a value or

82
00:05:05.902 --> 00:05:12.230
do a thing and then stop listening
until something emits a value right?

83
00:05:12.230 --> 00:05:15.149
So you have two things
that maybe are dependent.

84
00:05:15.149 --> 00:05:18.437
You can then tie them together
with just throttle and

85
00:05:18.437 --> 00:05:22.022
bounce effectively we'll look
at a right Donald time and

86
00:05:22.022 --> 00:05:26.727
bounce time in a second but we also have
that panic button on the screen which

87
00:05:26.727 --> 00:05:31.654
is just I couldn't come up with a better
name for a button to be honest with you so

88
00:05:31.654 --> 00:05:37.968
say panic clicks Is from
event panic button.

89
00:05:37.968 --> 00:05:47.060
Click.

90
00:05:47.060 --> 00:05:50.437
And so we've got that now we could

91
00:05:50.437 --> 00:05:55.391
theoretically debounce
based on panic clicks.

92
00:05:58.218 --> 00:06:01.210
Just so the JavaScript doesn't get
angry with me, let's do it in order.

93
00:06:01.210 --> 00:06:02.993
What happens to observable if
you don't subscribe to it?

94
00:06:02.993 --> 00:06:04.402
&gt;&gt; Nothing.

95
00:06:04.402 --> 00:06:06.730
&gt;&gt; Nothing [LAUGH] happens you observe.

96
00:06:06.730 --> 00:06:10.180
The verbal exists and
no one's around to subscribe to it.

97
00:06:10.180 --> 00:06:13.534
Then it doesn't really matter so
we don't actually care what

98
00:06:13.534 --> 00:06:17.853
this one does in this case and again like
we'll find ways to kind of batch them and

99
00:06:17.853 --> 00:06:21.012
automatically subscribe and
unsubscribe a little bit but

100
00:06:21.012 --> 00:06:25.640
we do know that we need to subscribe to
it otherwise, it will never admit event.

101
00:06:25.640 --> 00:06:29.530
This one actually returns the observable,
that you need in this case.

102
00:06:30.550 --> 00:06:33.730
So here's the observable, it needs
a factory functioning this case, right?

103
00:06:33.730 --> 00:06:37.990
Cuz it's not,
should I think that'll work actually?

104
00:06:37.990 --> 00:06:42.397
Cuz this will, so basically do what
I just threatened to which is,

105
00:06:42.397 --> 00:06:47.368
this function will return an observable
that debounce will subscribe to.

106
00:06:50.156 --> 00:06:51.950
Keep hitting it until they
hit the panic button.

107
00:06:51.950 --> 00:06:55.720
So this gives this function creates
an instance of the factory function.

108
00:06:55.720 --> 00:06:58.220
Create an instance of
a panic click observable.

109
00:06:58.220 --> 00:07:00.283
Once that admits it will then go ahead and

110
00:07:00.283 --> 00:07:02.655
let it through throttle
will do the opposite.

111
00:07:10.317 --> 00:07:14.113
Where we can create a notification, but
nothing happens until we hit the button

112
00:07:14.113 --> 00:07:17.470
again, and then we're allowed to
have another one through, right.

113
00:07:17.470 --> 00:07:19.302
So there's different ways
to basically start and

114
00:07:19.302 --> 00:07:21.380
stop different events
from flowing through.

115
00:07:21.380 --> 00:07:27.417
I would argue that throttle time and
bounce time are probably more common but

116
00:07:27.417 --> 00:07:32.321
if you find yourself like okay
like once they started dragging

117
00:07:32.321 --> 00:07:36.020
ignore stuff until a drop event happens.

118
00:07:36.020 --> 00:07:39.802
So on and so forth you have the ability to
have control over different events that

119
00:07:39.802 --> 00:07:41.609
fire and begin to orchestrate them and

120
00:07:41.609 --> 00:07:45.474
coordinate them
&gt;&gt; At some points a predict a being smooth

121
00:07:45.474 --> 00:07:50.327
or like very responsible the prediction
becomes very resource intensive so

122
00:07:50.327 --> 00:07:54.810
not setting 300 millisecond waiting for
events to add.

123
00:07:54.810 --> 00:07:59.551
Do you have a sense of your comment on how
you know RX js handles that if we want

124
00:07:59.551 --> 00:08:02.980
to wait or want to wait for
the end of the session?

125
00:08:02.980 --> 00:08:06.500
How much resource,
how much load is going to get placed?

126
00:08:06.500 --> 00:08:09.729
&gt;&gt; I mean you're playing
with memory in this case,

127
00:08:09.729 --> 00:08:14.390
the more you keeping track of the more
memory you're managing right?

128
00:08:15.730 --> 00:08:20.351
There are ways to basically coordinate
between switching between two

129
00:08:20.351 --> 00:08:24.660
observables exist, so
later we'll look at exhaust map.

130
00:08:24.660 --> 00:08:28.484
So like exhaust map says like cool
until I'm done with what I'm doing,

131
00:08:28.484 --> 00:08:30.210
ignore everything.

132
00:08:30.210 --> 00:08:33.220
Right, but it will kind of
orchestrated and coordinated for you.

133
00:08:33.220 --> 00:08:38.270
Switch map will say, forget what I was
doing, I wanna go do this new thing.

134
00:08:38.270 --> 00:08:41.320
And some of there
are optimizations under the hood.

135
00:08:41.320 --> 00:08:45.633
So, for instance, you're using from fetch,
and you switch map and it stops caring

136
00:08:45.633 --> 00:08:50.020
about the results of that fetch,
it will actually cancel the fetch request.

137
00:08:50.020 --> 00:08:53.030
And use the bar controller
on the fetch API.

138
00:08:53.030 --> 00:08:57.546
So you can kind of do stuff but yeah, the
more you are keeping track of, the more

139
00:08:57.546 --> 00:09:01.890
memory you are going to use as you and
so everything is a set of trade offs.

140
00:09:01.890 --> 00:09:03.960
It depends on what you're optimizing for.

141
00:09:03.960 --> 00:09:07.000
If it is optimizing for
DDoS in your own back end,

142
00:09:07.000 --> 00:09:11.894
then a little bit of memory usage probably
isn't the end of the world however if

143
00:09:11.894 --> 00:09:17.190
you're already playing on the edge then
you might choose to handle it differently.

