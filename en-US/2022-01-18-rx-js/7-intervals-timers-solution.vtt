WEBVTT

1
00:00:00.360 --> 00:00:04.474
All right, so our mission was to get
comfortable with the timer and interval,

2
00:00:04.474 --> 00:00:06.483
I think we're all pros at this point.

3
00:00:06.483 --> 00:00:11.679
And then the idea of subscribing,
unsubscribing to observables.

4
00:00:11.679 --> 00:00:15.979
Now, we talked about this before
we led into this which is,

5
00:00:15.979 --> 00:00:20.193
we're gonna have to do things
like store the observable,

6
00:00:20.193 --> 00:00:24.407
kind of in the module scope,
kinda like the global scope,

7
00:00:24.407 --> 00:00:28.630
because we don't have the tools
to kind of start and stop.

8
00:00:28.630 --> 00:00:32.524
I talked a big game with generators,
which kind of this is in this case, right?

9
00:00:32.524 --> 00:00:36.761
Generating a number at a regular interval,
and again, we can start, we can stop, and

10
00:00:36.761 --> 00:00:39.911
we can skip, and we can switch
between them, we can do all that.

11
00:00:39.911 --> 00:00:43.600
Again, we have not put that all
together in our tool set yet.

12
00:00:43.600 --> 00:00:48.323
So our goal right now is just to get
comfortable subscribing, unsubscribing,

13
00:00:48.323 --> 00:00:51.777
dealing with the idea that we
could have events coming from

14
00:00:51.777 --> 00:00:56.237
our stream of observable bands coming
from a button, setting all that up.

15
00:00:56.237 --> 00:01:01.190
And then we'll begin to kind of refine
it and refactor it as we go along.

16
00:01:01.190 --> 00:01:05.050
So here we have a basic counter.

17
00:01:05.050 --> 00:01:12.050
And what we wanna do is start by
basically listening to stuff on that.

18
00:01:12.050 --> 00:01:14.768
We wanna subscribe to events
that come from Start button,

19
00:01:14.768 --> 00:01:17.658
we wanna subscribe to events
that come from the Pause button.

20
00:01:17.658 --> 00:01:23.227
So in this case, we will say, Start,

21
00:01:26.419 --> 00:01:31.120
Subscribe, I'll pass that in a function,
and

22
00:01:31.120 --> 00:01:37.123
in this case, we will go ahead and
we'll create one up here.

23
00:01:42.924 --> 00:01:47.346
And we'll say when we, go ahead and
we start, we'll set the interval.

24
00:01:53.293 --> 00:01:54.940
And we'll subscribe to it as well.

25
00:01:55.980 --> 00:02:01.581
And in this case, we're going to call
setCount and we need the dollar sign.

26
00:02:04.746 --> 00:02:08.998
And here, well, we'll actually
make an interval in this case.

27
00:02:12.199 --> 00:02:14.048
I will subscribe to it.

28
00:02:14.048 --> 00:02:21.426
And when they hit the Pause button,
We'll go ahead and we will,

29
00:02:34.425 --> 00:02:39.115
Right, and so
we should have that in place.

30
00:02:39.115 --> 00:02:42.756
And now we have this and
let's go ahead and let's try it out, and

31
00:02:42.756 --> 00:02:44.920
it iterates every second.

32
00:02:44.920 --> 00:02:46.376
Now we can pause it.

33
00:02:46.376 --> 00:02:48.752
And it starts over cuz we
get a brand new observable,

34
00:02:48.752 --> 00:02:53.090
each time we're creating a new interval
observable, it starts in the same place.

35
00:02:53.090 --> 00:02:57.321
Now, this in this case is technically
our subscription because this is

36
00:02:57.321 --> 00:03:01.282
creating the observable, and
we have Subscribe up here, right?

37
00:03:01.282 --> 00:03:05.901
So really, what we could do is say,
I want one observable.

38
00:03:09.713 --> 00:03:11.780
And then we'll store the subscription.

39
00:03:16.992 --> 00:03:25.477
And so, take the same observable, And
we'll subscribe and unsubscribe from it.

40
00:03:32.121 --> 00:03:36.161
And it feels a little weird with the fact
that we're storing this up here,

41
00:03:36.161 --> 00:03:39.955
but it's also not totally dissimilar
from the thing we might store.

42
00:03:39.955 --> 00:03:43.702
We might hold on to a subscription when
React mounts that component we might

43
00:03:43.702 --> 00:03:47.936
subscribe, when the component is about to
unmount, we might unsubscribe from it.

44
00:03:47.936 --> 00:03:52.266
Use of fact,
Angular has built-in syntax for this,

45
00:03:52.266 --> 00:03:57.436
will wrap it slightly to get it to both
subscribe and unsubscribe as well.

46
00:03:57.436 --> 00:04:02.195
And we've got the subscription, now it'd
be great if we could actually kind of just

47
00:04:02.195 --> 00:04:05.211
take the different events
coming from the buttons and

48
00:04:05.211 --> 00:04:08.312
handle this all internally
in our observable stream.

49
00:04:08.312 --> 00:04:14.220
We're not totally there yet, but we should
be able to do it not too long from now.

