[00:00:00]
>> So, I am going to kind of take this first spin real quick, so I have this very kind of simple example right here. Where we have of and from, and one of the reasons we're taking a tour here is you're gonna try this out yourself in a second in a slightly different file, but kinda walk you through what we're gonna do here.

[00:00:22]
One easy way to test observables is to basically go ahead and collect them all in an array, right? So here we have result, we don't have any code signifying what would actually happen here. Again, to use observable you can set it up but nothing happens with an observable until you subscribe to it, so observables are effectively lazy.

[00:00:48]
You can establish when you say this is you have 1, 2, 3, 4, but nothing is happening to those values until you subscribe to it. And then it activates and we'll go run through all of these things, each time you subscribe to it, you get a fresh version of the observable and we'll see how to like deal with that a little bit later.

[00:01:06]
And it will run through each one of those values, right, and in case of of or from you're gonna get it either immediately or in the case of a promise when the promise resolves. Later on we will see intervals, and events, and stuff along those lines, it'll be, whenever the thing happens.

[00:01:22]
All right, so, what will this look like? So we could say, if we wanted to use of in this case, we could say observable and now clearly that's not gonna put anything into my result. So this test would fail if I ran it immediately, and so what we need to do here is say observable and then we'll subscribe to it and we'll get each value one by one.

[00:01:59]
Right, and this is kinda cool cuz it means that you can create an observable, whether it be from a promise from your API, whether it be from a given event. And you can separate the creation of the stream and what you want to do with it, right, which means you can kind of create this and yeah, this is obviously a super simple example.

[00:02:19]
But you could create this export it in a given JavaScript module, import the idea of creating a stream multiple places, and then how you use it throughout your application can vary depending on what you need to do, right? So, you can have one observable listening to mouse clicks just on the document itself, or keystroke or something along those lines.

[00:02:40]
And different parts of your application, whether it's dismissing drop-down menus or models or something along those lines can listen to that one event. It's not okay, cool, this modal loaded, let me add an event listener and clean it up when the modal goes away. I can literally just have this stream and the subscription is separated from the creation of the stream itself.

[00:03:00]
So I can run this first test and see that's running and this one passes, right, and again from is very similar in this case and so we could say observable. Well, this point we'll just use the array instead, right, and you could write a generator in here, you could do whatever you want.

[00:03:29]
We'll just grab this code from up here, and we'll put the same values into the array and this point we will not skip the test, and we have both of them in place. So this is the kind of simplest possible version of this that we can use to understand how exactly go about creating some of these mark.

[00:03:49]

>> [INAUDIBLE] events, does the expect method execute before the observable results?
>> Yes [LAUGH] yes, that is a great segue, right? So yeah, one thing, so the question was is for asynchronous events doesn't just get angry and ask for some kind of way to know that we're done doing whatever we need to do in order to run the actual expectation and just, right?

[00:04:25]
Yeah, just gets angry because the asynchronous events will happen after the test closes. So pop quiz, on observable, we have next forgiving event, that's what we're using put things into an array. What do we have to know when we're totally done with the observable?
>> Complete.
>> Complete, right, and so what we could theoretically do here is if we only care about the next value we just put in that function, right?

[00:04:54]
If we need to wait for the observable to be done to do something, then we can use complete and that's when we would run our expectation. So in here we have an exercise with creating observables, and the reason why I love that question so much is kind of towards the bottom we have some situations where we're we're creating it from a promise.

[00:05:19]
So ingest if it is an asynchronous test you can pass it a done as an argument in the it statement and then you call it whenever you are in fact done.

