[00:00:00]
>> All right,so here we have our venerable counter. It needs some updates, right? And this goes back to the question we had before of, it's important to see how skip until, and take until. We'll start and stop one, but this gave us an observable that was basically one time use.

[00:00:21]
What we really want to do, is again, swap back and forth between a regular cadence of integers and complete silence. Depending on whether or not we want things to reflect in our UI. So, one of the things that we saw previously is, instead of using the events we used MapTo, right?

[00:00:43]
And we'll just add this up here, say MapTo. And for each of this, MapTo(true), MapTo(false), right? And now, counter is going to be, we're still gonna need this interval at some point or another. But let's kind of start up here for a second. And counter is reliant, is merging the clicks on that button, right?

[00:01:21]
And depending on what the last event on, should I be running, should I not be running, it will then redirect its output in a different way. So we'll say counter in this case, and just merge together, start and pause. Right, so I want it listen to both these true values and false values coming through.

[00:01:45]
If I was to just a regular map over this, or even just tap, I would get true false depending on what button happened. Now, what I really wanna do is give back a different observable and has swapped that in as we kind of go through. So instead of mapping it to an observable, in this case, I want to switch to map.

[00:02:09]
Right? And this again, the value that switch map is gonna get is the value that came into this observable. Now, because we've mapped to either true or false, we will get either true or false. So this will be a boolean of, should I be running, should I not be running?

[00:02:26]
In fact, let's call this, should I be running? And we'll kinda do with like the long hand here just to make sure it's abundantly clear. We won't use a ternary like we saw before. We'll say, if should I be running, Return an interval that runs on every one second, right?

[00:02:50]
Otherwise, Return never. Right, so either depending on the last value that came through, we're going to either return an interval, or we're going to return never. Then we'll see there's a slight problem in my code, you can kinda see down here, but yeah, question?
>> You have to pipe those map to string at the top on the [INAUDIBLE]?

[00:03:16]

>> Yep, theoretically if I hate my bundle size, I don't. [LAUGH] Right, if I wanna you pull them in like, but you're right, I should.
>> Or do you use the chaining method instead of pipe?
>> Yeah.
>> Genius, deprecated.
>> Yep, cuz again, if you enjoy a reasonable bundle size, there's no way to have an observable that has all 100, and I think I counted, it was like 134 methods.

[00:03:49]
Do I ship those, whatever? They said we use what? MapTo, SwitchMap, don't need all the rest of those operators, right? We should only pull the ones we need. So should I be running? We have counter and we need to get rid of the other counter. Now, what's missing?

[00:04:07]
I'll just hint. This will work but it's gonna have that problem we had before, right? Which is, you'll get a fresh count every time. You will not pick up where you left off because this is returning a brand new interval observable, right? So this one's gonna start at 0, or 1, or whatever every time.

[00:04:27]
What we really wanna do is, that's fine, but we want to pick up where we left off. So we'll grab this scan as well. We'll pop it in there too. Awesome, so yeah, now depending on which way this happens, we should finally reach the promised land of a two buttons and a number that do roughly what we expect it to do.

[00:05:00]
The one thing that I've noticed is that the IntelliSense, I'm just gonna import stuff for you. It's a little squirrely if you have both of these. So, We can start it. We can pause it. We can start it again. And we can pause it again. Now, if I took out that scan, you kinda see, That I can start it.

[00:05:28]
I can pause it. If I start it again it goes to 0. The reason for that is, I'm getting a fresh observable every time, an interval, pumps at 0, 1, 2, 3, 4, 5, so on and so forth. With that scan, I'm like, listen, as long as it's kind of the effective version of map to, I don't care what number you produced.

[00:05:51]
I'm keeping my own count, and here's my own count, whatever you told me you're producing I'm unconcerned with. So scan is, again, that way to kind of maintain state. Like we saw on that test earlier you can almost implement a reducer like situation just using scan.

