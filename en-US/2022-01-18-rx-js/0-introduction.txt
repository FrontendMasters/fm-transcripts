[00:00:01]
>> Hello, welcome to RxJS fundamentals. This is an intro course on how to use RxJS to solve some common problems. With that there is one, no expectation that you've used RxJS before, sounds good. We're also gonna be completely framework agnostic. I know that lot of times RxJS is associated with angular these days, but you can use it with anything.

[00:00:24]
I've used it with React and Redux before. I use it today the svelte app that I work on. It is at the end of the day just JavaScript so we're gonna play with it agnostic of any framework. And again, we're gonna start from the very basics. And kind of build up an understanding.

[00:00:45]
Cuz in my experience there's a lot of great content on RxJS. But a lot of times it's like, let's go into some conceptual understanding of marble diagrams, and then all of a sudden it escalates quickly until there's seven nested observables. And you're like I wanna cry. So we're taking things very slowly, we're gonna build up from each piece as we get to some more sophisticated examples towards the end.

[00:01:06]
So we will kind of play around with some basic unit tests, you understand how some of the fundamental parts of RxJS work. Will start building some very kind of simple interactions in some applications. And it will solve some of the kind of common UX issues that come up that RxJS is just really well suited to handle.

[00:01:26]
For a lot in a lot of cases, you don't necessarily need to use RxJS for everything. So part of this is understanding where a simple promise will do. And where you might end up in a situation where things are getting a little squirrely. At the end of the day, anything you can do in RxJS, you can do in regular JavaScript because our stress is built in regular JavaScript.

[00:01:46]
The big question is should you, right. Enough of these things where you start reinventing the wheel and throwing global variables or even module scoped global variables everywhere. And then eventually you and your team developed a deep resentment for you, which I'm going to try to save you from during this.

[00:02:05]
So let's just talk, we're not going to do a whole lot of the kind of conceptual theory here. I want to start getting our hands dirty very, very quickly. But let's do just at least a high level understanding of what's going on, what is RxJS? What did you just sign up for, what are we going to be talking about for the next little bit?

[00:02:24]
So the I saw this quote from the RxJS documentation, you can think of RxJS like lodash for events. In lodash we have a lot of helper functions for dealing with arrays and objects and all the stuff that just comes with JavaScript not really having a standard library that have to speak of, right?

[00:02:44]
So lodash gives us a bunch of utility functions. Yes, you could write them yourselves. But a lot of times if you want them kind of tweaked for performance, everything along those lines using a battle tested library makes sense. RxJS is basically dealing with that, but things that happen over time.

[00:03:00]
And you're like, okay, like what? Well, if you think about it, the way that our applications work is, we send the code to the browser, we send some HTML loads of some CSS and some JavaScript. We render an initial page that, the traditional web page, right? And then really everything that happens after that, right, after as soon as we load up that HTML page and run through the initial scripts.

[00:03:23]
The event loop kind of just sits there and waits for stuff to happen, right? And all that stuff that can happen is an area where there is a chance that RxJS might be helpful depending on what kind of problem you are trying to solve. Right, things are gonna happen over time, arrays give you a collection of things all at once, you can work through the array.

[00:03:42]
You can map over it, you can filter it. But if those values come in over time, maybe through a series of click events, maybe through a timer, maze with an API requests, right? Yeah, you can load it into an array, recheck the array, or you can just kind of think about things as streams of events happening in our application and write code around that as we go.

[00:04:02]
So, there is an abstraction for asynchronous values that is now in the Ekman script standard, and it's called promises and promises are great. I love promises, they're wonderful. The problem with promises and this is not really a problem with them it's just what they promised to do. Is that they resolve to one eventual value, right, and so you have a promise of this one API request or one thing that happens it becomes a value.

[00:04:30]
Now imagine programming without arrays or objects, right? It's up a series of like go to statements, you could figure it out, it'd be great. But the idea of having this idea of a collection, right? The way you can think of a promise as one eventual value, I think a really good mental model that could be helpful is thinking about, effectively an observable as an array of eventual values.

[00:04:54]
So promises are one just like a primitive like a number, a string, or even a JavaScript object is one object. And an array can be a set of them. A promise is good for one value that could also be an array. In this case, an observable is things that are going to happen kind of over time.

[00:05:10]
So let's talk a little bit about what some of those things might be. We have API's, right? And yes, you set a promise, you go get the JSON or what have you from an API? Great, but there's a whole bunch of like edge cases like do you want to refresh stuff along those lines?

[00:05:27]
So promises are great for a happy path. You even have a catch in the case that it doesn't work out, but, if you want to retry a certain number of times? Okay, well yeah you could do like keep a value somewhere in scope and this try to iterate it and then write an if statement so on and so forth.

[00:05:46]
You can see how this things start to get a little squirrely. What happens if you want to reload the data at a regular rate, okay, now you can do a set interval, and you can aspire to clean up that interval and help you get it right. But you're also matching that with now the retry thing that we just talked about.

[00:06:02]
What happens is you want to iterate across a paginated API, right? A lot of times as front end engineer, it's like the reason that I'm employable. Is because for a lot of the UI that we want to build, the API's don't support that. So I have to do a bunch of Rube Goldberg machines in order to kind of get the UI in place.

[00:06:19]
So if we need to start iterating recursively, then yes, you could do that. But could you do that with retries? Could you do that with a regular refresh interval? Starting to pull all these pieces together like any one thing, maybe not that complicated. Pulling it all together requires a better abstraction so that we don't get lost in our own complexity.

[00:06:38]
So observables can help with all of this. This is the other part, I used to work at a company that I will not name. But we had this idea of a user, right and, you need to know the current user to figure out what you can show on the page that seems fine, right.

[00:06:53]
And there was an API for getting the current user, however if yeah, if you wanted to know whether it was a regular account or a sub account, well, that was another API. Did you want to know if it was part of a team or an individual account? That was another API?

[00:07:07]
Did you want to know if the freemium, free or premium account? Well, that was another API. So in order to figure out what to show on the page, we had to send out this battalion of API requests and try to orchestrate it all at once. And so we have a lot of situations where to show a given piece of UI maybe you have a list index that only gives you the IDs of the things that match.

[00:07:27]
If you want to figure out more data you have to go hit each one of those individually API's, right? Coordinating all that stuff can be somewhat complicated and so observables seek to help us with that, right. And to help us deal with the common error path and just give us a effectively.

[00:07:41]
RxJS is not a framework but if we think about like a scaffolding or a framework for dealing with the complexity of orchestrating multiple things that could happen asynchronously. So observables can help with this as well, then there's all sorts of just little like UX quality of life things, right?

[00:07:59]
It's usually good to like show a loading indicator, all right, and that's fine but how soon do you show the loading indicator, right? Cuz the first time I implement that this is what happens, is the API ends up being fast. And then I showed the loading indicator, it flashes for a hot minute and then it vanishes, right.

[00:08:18]
And so how do you time it? Okay, I only want to show the loading indicator in one situation, if it takes a certain amount of time show the loading indicator, right? But what if the API request comes back right after I show the loading indicator? Well, even if the API has failed, I might want to still show the loading indicator for long enough time that's not visually distracting to the user, even if we're done loading, right.

[00:08:48]
These are the issues of dealing with events that happen over time and coordinating all of these things that are excess seeks to help us with. There's all sorts of little other things like dragging and dropping, right? You have the like if you think about that problem. You end up, all right, so on mouse down on the element that we want to click, cool.

[00:09:03]
Then I want to set up an event listener that is listening for mouse movements until they release and we have a mouse up event, right. And then we also have the issue of were they're dragging might have other implications in our UI, right? If it is a hover state where they can drop it in that given area, we might wanna show different things.

[00:09:22]
So reacting to all those things and setting up all those different movement events can be super helpful as well. So that's the pitch. That is hopefully I've sold you on spending some time together learning this.

