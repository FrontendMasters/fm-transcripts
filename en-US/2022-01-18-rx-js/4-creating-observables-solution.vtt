WEBVTT

1
00:00:00.230 --> 00:00:02.507
So yeah, super straightforward.

2
00:00:02.507 --> 00:00:08.145
Our job is to find the button,
create an observable

3
00:00:08.145 --> 00:00:13.570
from the button, subscribe to the button.

4
00:00:13.570 --> 00:00:18.915
And then upon subscribing,
whenever we hear an event,

5
00:00:18.915 --> 00:00:23.023
add a very simple notification to the DOM.

6
00:00:23.023 --> 00:00:25.605
So we know that from event.

7
00:00:28.369 --> 00:00:32.905
Can take an HTML element and
then what we wanna listen for.

8
00:00:32.905 --> 00:00:36.505
Now, the interesting part here, is just an
event listener will theoretically register

9
00:00:36.505 --> 00:00:39.050
should the event whether or
not you stored in a variable or not.

10
00:00:39.050 --> 00:00:41.500
And then you have to do
all that stuff like cool.

11
00:00:41.500 --> 00:00:43.879
If you ever want to remove
that event listener,

12
00:00:43.879 --> 00:00:46.770
you better have stored that
function into a variable.

13
00:00:46.770 --> 00:00:50.563
So then you can remove the reference to
that function from the event listener,

14
00:00:50.563 --> 00:00:51.850
so on and so forth.

15
00:00:51.850 --> 00:00:54.862
Right, from event seeks to
protect you from all of

16
00:00:54.862 --> 00:00:59.031
that fun stuff with event listeners,
and kind of encapsulate that.

17
00:00:59.031 --> 00:01:03.949
So now, you can create your stream, you
can subscribe and unsubscribe as its own

18
00:01:03.949 --> 00:01:08.723
separate thing you'll get back an object
that will allow you to unsubscribe so

19
00:01:08.723 --> 00:01:09.540
on so forth.

20
00:01:09.540 --> 00:01:12.700
So here we'll say,
I'll call button clicks,

21
00:01:12.700 --> 00:01:16.420
that seems like a really good name for
this observable.

22
00:01:17.520 --> 00:01:23.100
And so what we'll say is,
we'll subscribe to it in this case.

23
00:01:23.100 --> 00:01:25.470
The button clicks, and we'll subscribe.

24
00:01:27.010 --> 00:01:33.420
And we'll say when that happens,
we want to add the message to DOM, cool.

25
00:01:33.420 --> 00:01:36.020
All right, and so
let's just make sure that that works.

26
00:01:36.020 --> 00:01:40.694
So we'll go here to generating observables
from events, except I will use

27
00:01:40.694 --> 00:01:45.457
the one that is local cuz if I use
the production one, what's gonna happen.

28
00:01:45.457 --> 00:01:49.287
And we can see, we get what we
think we're going to get here,

29
00:01:49.287 --> 00:01:54.193
which is when the click happens it will
go ahead and run the listener, right?

30
00:01:54.193 --> 00:01:59.120
We could theoretically take this and
do other things with it as well.

31
00:01:59.120 --> 00:02:04.732
So, if we wanted to go in here, and
we want to say, okay, not only that,

32
00:02:04.732 --> 00:02:09.347
but I would also log it to the console or
we could even alert.

33
00:02:09.347 --> 00:02:11.857
Yeah, let's alert, why not?

34
00:02:18.513 --> 00:02:22.227
Right, so, we have one stream
have events happening, and

35
00:02:22.227 --> 00:02:25.661
then we can subscribe to
multiple things in this case.

36
00:02:28.589 --> 00:02:34.510
Now we'll go ahead we'll refresh,
you can see that I get the alert,

37
00:02:34.510 --> 00:02:38.913
and also I get the notification
on the page as well.

38
00:02:38.913 --> 00:02:43.917
As a bunch of other things
that we'll do as time goes on.

39
00:02:43.917 --> 00:02:48.550
Clearly the ability to click buttons and
interact with the UI is,

40
00:02:48.550 --> 00:02:53.700
a thing that is kinda core to what
we all do building user interfaces.

41
00:02:53.700 --> 00:02:57.367
So we will kind of play with this more and
a little bit, but right now,

42
00:02:57.367 --> 00:03:01.370
we're kinda just building out that
tool set of fundamentals in this case.

