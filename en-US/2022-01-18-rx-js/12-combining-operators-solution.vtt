WEBVTT

1
00:00:00.080 --> 00:00:01.549
So this is, yeah, we didn't like this.

2
00:00:01.549 --> 00:00:07.600
What we want to do in this case is we
want to basically use some of those

3
00:00:07.600 --> 00:00:13.030
new operators we learned about,
takeUntil and skipUntil.

4
00:00:13.030 --> 00:00:17.597
Again, this still won't be totally
perfect yet, well, spoiler alert,

5
00:00:17.597 --> 00:00:20.725
we'll have a single-use
timer by the end of this.

6
00:00:20.725 --> 00:00:25.597
But again, it'll be our first
foray into kind of starting to

7
00:00:25.597 --> 00:00:29.141
combine different observables together.

8
00:00:29.141 --> 00:00:34.722
So, we have the start and the pause.

9
00:00:34.722 --> 00:00:40.007
What we really wanna do
is create this counter.

10
00:00:41.668 --> 00:00:42.569
Observable.

11
00:00:45.291 --> 00:00:46.643
Or you name it whatever you want.

12
00:00:46.643 --> 00:00:50.027
I'm gonna name it counter,
which is that interval,

13
00:00:50.027 --> 00:00:55.008
in this case of 1,000 milliseconds,
and then now we have access to pipe.

14
00:00:55.008 --> 00:01:00.085
And what we could do in this case is,
we could say that we want

15
00:01:00.085 --> 00:01:05.165
to skipUntil, and
one things you have to remember to do is,

16
00:01:05.165 --> 00:01:09.354
theoretically, you can
import them from rxjs.

17
00:01:09.354 --> 00:01:15.226
But if you care about your bundle size,
what you wanna do is,

18
00:01:15.226 --> 00:01:20.063
if any of the operators
live in rxjs/operators,

19
00:01:20.063 --> 00:01:25.035
skipUntil, we know we're
gonna need takeUntil,

20
00:01:26.362 --> 00:01:30.777
From rxjs/operators.

21
00:01:30.777 --> 00:01:33.047
All right, so we'll skipUntil,

22
00:01:33.047 --> 00:01:37.040
we get any kind of event that
emits from the Start button, and

23
00:01:37.040 --> 00:01:42.226
we'll take them until we pause, until
we get any event from the Pause button.

24
00:01:42.226 --> 00:01:46.464
Again, this will be a single-use counter,

25
00:01:46.464 --> 00:01:50.040
we're gonna work on improving that.

26
00:01:50.040 --> 00:01:54.330
So we'll skipUntil, and
then once that happens,

27
00:01:54.330 --> 00:01:57.834
we will then takeUntil the Pause button.

28
00:01:57.834 --> 00:02:03.665
And we're gonna see one little
bug that we have with this.

29
00:02:03.665 --> 00:02:06.228
One is that we're gonna need to subscribe.

30
00:02:07.327 --> 00:02:09.313
And we'll do that set count.

31
00:02:10.700 --> 00:02:14.001
So we have our interval where we will,
Mark?

32
00:02:14.001 --> 00:02:19.885
&gt;&gt; Is takeUntil operator the best
approach for management of subscriptions?

33
00:02:19.885 --> 00:02:21.143
&gt;&gt; It depends, right?

34
00:02:21.143 --> 00:02:23.128
I'm gonna argue with no, right?

35
00:02:23.128 --> 00:02:25.566
Cuz we have a better way
that we're gonna get to,

36
00:02:25.566 --> 00:02:27.898
we just don't have all the tools yet,
right?

37
00:02:27.898 --> 00:02:30.249
To switch in between
different subscriptions.

38
00:02:30.249 --> 00:02:35.625
It's interesting cuz it'll give you
a time where a given thing should stop.

39
00:02:35.625 --> 00:02:42.229
One of the disadvantages of takeUntil
is that, then it's complete, right?

40
00:02:42.229 --> 00:02:49.836
Once you hit the emission that gets
you to takeUntil, you're done, right?

41
00:02:49.836 --> 00:02:54.655
This observable has completed, and
once an observable is completed as we

42
00:02:54.655 --> 00:02:58.711
saw previously,
it shall never start back up again, right?

43
00:02:58.711 --> 00:03:03.045
You have to replace it with
a brand new one, yeah.

44
00:03:03.045 --> 00:03:07.291
&gt;&gt; Is this, I remember some talking
about conditions of hot versus cold,

45
00:03:07.291 --> 00:03:09.149
[INAUDIBLE], is this related?

46
00:03:09.149 --> 00:03:10.267
&gt;&gt; Exactly, right?

47
00:03:10.267 --> 00:03:16.575
This is one, effectively this interval
observable is single use, right?

48
00:03:16.575 --> 00:03:21.328
And it starts up when it gets
its first subscription, right?

49
00:03:21.328 --> 00:03:24.577
Each subscription gets
a unique version of it.

50
00:03:24.577 --> 00:03:29.051
And when it completes,
that subscription is over, right?

51
00:03:29.051 --> 00:03:32.475
If a new one subscribes it starts
over from the very beginning.

52
00:03:32.475 --> 00:03:37.975
There's this idea of a hot observable,
which is just going, and keeping track of

53
00:03:37.975 --> 00:03:43.570
the many subscribers, and will only stop
once everyone has unsubscribed from it.

54
00:03:43.570 --> 00:03:48.559
But here we have just kind of a simple
one where takeUntil will end this

55
00:03:48.559 --> 00:03:51.241
observable in this case.

56
00:03:51.241 --> 00:03:54.395
So let's flip over, and try it out.

57
00:03:54.395 --> 00:03:58.367
You see it start at 2 which is weird.

58
00:03:58.367 --> 00:04:02.863
Forget fast enough, it'll start at 1.

59
00:04:02.863 --> 00:04:08.612
We'll refresh and I talk for a few
minutes, and I kill a little bit time.

60
00:04:08.612 --> 00:04:11.477
See, it starts at 5, right?

61
00:04:11.477 --> 00:04:13.729
That's interesting.

62
00:04:13.729 --> 00:04:15.198
Anyone have a hypothesis why?

63
00:04:15.198 --> 00:04:17.578
&gt;&gt; We're starting the generator
as soon as the code starts.

64
00:04:17.578 --> 00:04:18.482
&gt;&gt; Yeah, exactly.

65
00:04:18.482 --> 00:04:21.156
It's the intervals are ticking along,
right?

66
00:04:21.156 --> 00:04:23.072
We're not dealing with them,

67
00:04:23.072 --> 00:04:28.169
we're not letting them through the pipe
until that first event happens, right?

68
00:04:28.169 --> 00:04:31.344
But they're going, right?

69
00:04:31.344 --> 00:04:34.737
So we need to figure out
a way that we're in control,

70
00:04:34.737 --> 00:04:38.376
cuz intervals will pop out
values one at a time, right?

71
00:04:38.376 --> 00:04:43.773
But what we could do is stay right
where we could maintain our own state.

72
00:04:43.773 --> 00:04:47.733
So we have a hypothesis and
how will we do that?

73
00:04:47.733 --> 00:04:52.275
&gt;&gt; Bring out the, [INAUDIBLE] of that
interval up here where it's encapsulated.

74
00:04:52.275 --> 00:04:52.818
&gt;&gt; Maybe,

75
00:04:52.818 --> 00:04:57.485
what do we do when we're maintaining
state in those tests from before?

76
00:04:57.485 --> 00:04:58.535
&gt;&gt; We can scan.

77
00:04:58.535 --> 00:05:00.427
&gt;&gt; Using scan, right?

78
00:05:00.427 --> 00:05:04.994
Scan is super useful for
that as well, so we can pull in scan.

79
00:05:04.994 --> 00:05:12.710
And we'll say scan, at which point
it will start with a value of 0.

80
00:05:12.710 --> 00:05:17.103
And we'll take the total, and really,
we'll just do total plus one.

81
00:05:17.103 --> 00:05:19.581
We don't actually care
what interval had to say,

82
00:05:19.581 --> 00:05:23.540
we just know that we're gonna ignore
everything until we hit the Start button.

83
00:05:23.540 --> 00:05:27.665
We're start with a value of 0,
and we'll increment by 1.

84
00:05:27.665 --> 00:05:30.613
So missed that comma there, and
now we should be able to go back.

85
00:05:35.097 --> 00:05:39.136
And even if I can pause, I can refresh.

86
00:05:39.136 --> 00:05:40.700
I can talk to you all for
a little bit, and

87
00:05:40.700 --> 00:05:42.228
kill at least one second worth of time.

88
00:05:43.911 --> 00:05:47.096
And we still start at 1, right?

89
00:05:47.096 --> 00:05:49.734
So scan is useful for
maintaining that state because yeah,

90
00:05:49.734 --> 00:05:51.537
interval is popping out these numbers.

91
00:05:51.537 --> 00:05:53.672
We're always starting with zero, and

92
00:05:53.672 --> 00:05:57.300
only the ones that get to scan
are gonna increment that zero at all.

93
00:05:57.300 --> 00:06:01.016
Now we can't start this one back up again,
cuz again, we haven't subscribed.

94
00:06:01.016 --> 00:06:05.895
What we're eventually gonna wanna do is,
let's start and stop.

95
00:06:05.895 --> 00:06:13.244
Basically, change channels between
the incrementing and silence, right?

96
00:06:13.244 --> 00:06:16.606
And so, cool, you want more values faster,
we'll go to that stream.

97
00:06:16.606 --> 00:06:19.731
You wanna hear nothing cuz we're paused?

98
00:06:19.731 --> 00:06:20.743
We can go there as well.

99
00:06:20.743 --> 00:06:23.641
But we've got the state separated out,
so we're getting there,

100
00:06:23.641 --> 00:06:25.204
we just need just a little bit more.

