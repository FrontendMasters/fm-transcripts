WEBVTT

1
00:00:00.268 --> 00:00:04.677
The kind of last of the many different
kinds of use cases that we've

2
00:00:04.677 --> 00:00:09.022
been just chatting about,
over the course of our time together.

3
00:00:09.022 --> 00:00:13.568
Which is like, just how hard it is
to show a loading indicator when

4
00:00:13.568 --> 00:00:15.809
you think about the edge cases.

5
00:00:15.809 --> 00:00:18.894
Right if it's your first
loading indicator, yeah,

6
00:00:18.894 --> 00:00:22.250
I show the loading indicator and
then I take it down right,

7
00:00:22.250 --> 00:00:26.360
it's one of those things where it's
like a fast API is almost the bane of

8
00:00:26.360 --> 00:00:30.290
your existence when it comes to
implementing a loading indicator.

9
00:00:30.290 --> 00:00:35.001
Right, because what you don't want
is like a flash of sadness ,right,

10
00:00:35.001 --> 00:00:40.112
where especially cuz the thing I work on
the portal now is we have two versions.

11
00:00:40.112 --> 00:00:41.639
And we have a cloud version and

12
00:00:41.639 --> 00:00:44.827
we have a open source version
you run locally on your machine.

13
00:00:44.827 --> 00:00:50.341
We tell you about network latency when
it's running on your machine, real fast.

14
00:00:50.341 --> 00:00:53.587
Lemme tell you it's the same UI for
both, right, and so

15
00:00:53.587 --> 00:00:57.334
kind of dealing with the idea that
you could have, a normal API.

16
00:00:57.334 --> 00:01:02.675
And then a lightning fast API creates
a certain number of problems.

17
00:01:02.675 --> 00:01:08.249
So, what we're gonna try to do here is,
we're going to kind of create

18
00:01:08.249 --> 00:01:14.779
a fake API response that we can kind of
control, via this number of milliseconds.

19
00:01:16.405 --> 00:01:20.433
We will choose when we want to show a
loading indicator cuz again, if it's back

20
00:01:20.433 --> 00:01:24.293
real fast, we don't immediately show
one that immediately take it down.

21
00:01:24.293 --> 00:01:28.606
Right, that's the first edge case so you
want to deal with the loading indicator.

22
00:01:28.606 --> 00:01:30.694
The second one is, by solving for,

23
00:01:30.694 --> 00:01:35.505
I only want to show the loading indicator
if things have been loading for a second.

24
00:01:35.505 --> 00:01:37.330
You introduce a new problem,

25
00:01:37.330 --> 00:01:40.912
which is you've just moved
your problem forward in time.

26
00:01:40.912 --> 00:01:45.099
Which is what happens if you show
the loading indicator after a thousand

27
00:01:45.099 --> 00:01:49.584
milliseconds, and the data comes
back 1,001 milliseconds, right?

28
00:01:49.584 --> 00:01:52.587
You're back to your flash of sadness,

29
00:01:52.587 --> 00:01:57.958
sometimes what we should do in this
case is we lie, we lie to our users.

30
00:01:57.958 --> 00:02:02.185
We say it's still loading just simply so
that we don't flash things and

31
00:02:02.185 --> 00:02:03.815
make them uncomfortable.

32
00:02:03.815 --> 00:02:08.252
With maybe we'll keep it up for
what seems just a little bit,

33
00:02:08.252 --> 00:02:13.124
we can start loading the data if you want,
but don't just flash and

34
00:02:13.124 --> 00:02:15.567
take it down, be gentle with it.

35
00:02:15.567 --> 00:02:18.530
So we have the ability for
how long has your take,

36
00:02:18.530 --> 00:02:22.016
how long we wanna wait until
we show a loading indicator.

37
00:02:22.016 --> 00:02:26.182
And how long that loading
indicator should be up for, right?

38
00:02:26.182 --> 00:02:30.583
And again, a lot of this is based
on the feeling, basically for

39
00:02:30.583 --> 00:02:35.081
these values, you tend to adjust
them until everyone is happy.

40
00:02:35.081 --> 00:02:42.685
But yeah, there's no hard and
fast rule, but I'm also not a designer.

41
00:02:42.685 --> 00:02:47.278
So, we've got the three fields.

42
00:02:47.278 --> 00:02:51.776
We've got whether or
not we should show a loading indicator,

43
00:02:51.776 --> 00:02:54.110
we've got the form itself, and

44
00:02:54.110 --> 00:02:59.313
we've got this little fake fetch
data which I'll show you real quick.

45
00:02:59.313 --> 00:03:04.794
It looks at the response time,
it logs that it's fetching,

46
00:03:04.794 --> 00:03:10.503
it waits however long our fake
API request is supposed to wait.

47
00:03:10.503 --> 00:03:14.873
And then it just looks a console
it's done, and then it completes,

48
00:03:14.873 --> 00:03:19.473
right ,there's no actual data to show
in this case I could also like map

49
00:03:19.473 --> 00:03:20.868
it to some fake data.

50
00:03:20.868 --> 00:03:26.176
If I really wanted to but
this is basically it simulates something

51
00:03:26.176 --> 00:03:31.965
that takes however long we have in
that top input field, show loading,

52
00:03:31.965 --> 00:03:38.930
takes the bull lane, shows you this really
neat loading indicator or nothing at all.

53
00:03:38.930 --> 00:03:44.258
And we're basically in this case,
making sure we don't accidentally

54
00:03:44.258 --> 00:03:48.622
submit the form, and
then we've got some cached pieces.

55
00:03:48.622 --> 00:03:51.784
All right, so let's start with
just the simplest version of this,

56
00:03:51.784 --> 00:03:54.068
just to make sure everything
works as we expect.

57
00:03:54.068 --> 00:03:59.094
So we'll say loading, we'll say that

58
00:03:59.094 --> 00:04:04.892
is from the event, when they form, submit.

59
00:04:04.892 --> 00:04:12.270
And when that happens, pipe it, will tap.

60
00:04:14.946 --> 00:04:19.974
Showloading is true, just verify
that everything works as expected,

61
00:04:19.974 --> 00:04:24.093
put a semicolon in there,
which should have been a comma.

62
00:04:24.093 --> 00:04:27.769
And we'll say loading.subscribe.

63
00:04:27.769 --> 00:04:31.985
I tend to like to do the DOM manipulation
in the tap, because then like,

64
00:04:31.985 --> 00:04:35.801
I'm not all the things that happen
are like contained in there.

65
00:04:35.801 --> 00:04:40.183
It's not like cool, everything happens
you're putting it there taken down but

66
00:04:40.183 --> 00:04:44.057
then the last thing happens subscribe,
I don't wanna deal with that.

67
00:04:44.057 --> 00:04:50.620
So, we'll say subscribe and
now this should when I hit the button.

68
00:04:52.217 --> 00:04:54.016
Let's see.

69
00:04:54.016 --> 00:04:58.043
Here we go, shows loading indicator and

70
00:04:58.043 --> 00:05:04.322
this also logs that we're loading,
so now what we wanna do is,

71
00:05:04.322 --> 00:05:09.071
show it, load our data,
take it down, right?

72
00:05:09.071 --> 00:05:13.907
That's the kind of next obvious
thing to do here, so we'll show it.

73
00:05:17.874 --> 00:05:21.945
And then in this case,
because I was robbed of using an exhaust

74
00:05:21.945 --> 00:05:25.643
map in the last example,
I'm gonna use my exhaust map.

75
00:05:25.643 --> 00:05:30.443
Mostly because like this is also a fake
situation where they slam on that

76
00:05:30.443 --> 00:05:35.643
button let's see what the time, so
let's let's start a new one over again.

77
00:05:35.643 --> 00:05:43.152
Why someone would slam on a button in this
case, I don't know, but we'll do that.

78
00:05:43.152 --> 00:05:47.674
So we'll see an exhaust map,
where we will return, fetching the data,

79
00:05:47.674 --> 00:05:50.196
I could probably do that in line as well,

80
00:05:50.196 --> 00:05:53.325
but we're gonna play around
with it a little bit.

81
00:05:53.325 --> 00:05:58.159
So, we'll show the data, we'll show
the loading, will fetch our data,

82
00:05:58.159 --> 00:06:01.945
and then we will take down
our loading indicator, right?

83
00:06:01.945 --> 00:06:05.077
Again, this is the naÃ¯ve version for
now, and

84
00:06:05.077 --> 00:06:08.143
we'll deal with all
the edge cases shortly.

85
00:06:08.143 --> 00:06:12.911
All right so then, show loading, false,

86
00:06:12.911 --> 00:06:16.623
okay, this should do the thing.

87
00:06:18.580 --> 00:06:24.097
Fetching for five seconds, and
that takes it down, that works for

88
00:06:24.097 --> 00:06:29.318
the happy path, right,
when your requests all take five sec,

89
00:06:29.318 --> 00:06:33.577
I can't believe I just
called that the happy path.

90
00:06:33.577 --> 00:06:36.880
When your API's all take at least five,
listen, we've all worked API so

91
00:06:36.880 --> 00:06:39.188
take 30 seconds,
don't act like you haven't.

92
00:06:39.188 --> 00:06:42.427
But, even sometimes what I would do for

93
00:06:42.427 --> 00:06:47.638
an API that took five seconds,
even though it's suboptimal.

94
00:06:47.638 --> 00:06:52.155
Okay, that's cool, but
what if we wanna delay that we

95
00:06:52.155 --> 00:06:57.082
talked about delay in that
loading indicator a little bit.

96
00:06:57.082 --> 00:07:01.184
And, so
what would that look like in this case?

97
00:07:01.184 --> 00:07:07.192
Well, there's a few ways
that we could do it,

98
00:07:07.192 --> 00:07:11.978
we could create like an observable.

99
00:07:13.559 --> 00:07:19.146
And sometimes if I just wanna delay
something and tap, I could timer it,

100
00:07:19.146 --> 00:07:23.557
I'm just gonna create one real quick,
and then pipe it.

101
00:07:23.557 --> 00:07:27.521
I could even, yeah,
would complete at that point,

102
00:07:27.521 --> 00:07:33.752
let's not deviate right now, will delay
it for whatever show loadings value is.

103
00:07:45.983 --> 00:07:46.825
And then we will tap.

104
00:07:55.530 --> 00:07:59.018
So this one will get it and
it will basically delay for

105
00:07:59.018 --> 00:08:01.963
that amount of time and
then it will show it.

106
00:08:01.963 --> 00:08:04.195
So what would this look like?

107
00:08:04.195 --> 00:08:08.537
Well, now what we could do is in this
exhaust map, what we could say is,

108
00:08:16.158 --> 00:08:19.952
Contact my show loading, and

109
00:08:19.952 --> 00:08:23.903
then we'll go fetch the data.

110
00:08:23.903 --> 00:08:25.856
Now, what do you think
the problem is here?

111
00:08:31.269 --> 00:08:34.532
We're basically show
the loading after a second and

112
00:08:34.532 --> 00:08:37.359
then we're gonna go fetch the data, right?

113
00:08:37.359 --> 00:08:43.856
So this is building towards the answers to
our problems, but it's not there just yet.

114
00:08:46.375 --> 00:08:47.097
So wait a second.

115
00:08:51.047 --> 00:08:54.358
Cuz then we immediately,
take that off for a second.

116
00:08:56.838 --> 00:09:00.142
We could do is, concat it.

117
00:09:05.483 --> 00:09:06.905
Well let's make a high loading.

118
00:09:18.418 --> 00:09:23.466
But this is not gonna work as we expect,
we'll talk about that

119
00:09:23.466 --> 00:09:29.111
in a second I mean it was good work
as we expect, it's not gonna work.

120
00:09:32.239 --> 00:09:36.042
So, we wanna do is get Nate show it,
fetch the data hide it.

121
00:09:36.042 --> 00:09:39.881
These are delayed, so
we're gonna need to do is figure

122
00:09:39.881 --> 00:09:44.142
out the different situations
that we need to deal with okay.

123
00:09:44.142 --> 00:09:49.173
What happens if the data comes back before
we even show the loading indicator, right?

124
00:09:49.173 --> 00:09:54.414
We're gonna need to time some of these,
and let's do a spoiler alert.

125
00:09:54.414 --> 00:09:58.903
Do we have a operator that
sees which one of these

126
00:09:58.903 --> 00:10:03.067
things does the thing first brace, right?

127
00:10:03.067 --> 00:10:07.885
So that will ultimately be
a thing that we look at, but

128
00:10:07.885 --> 00:10:11.753
let's see it in its not great state first.

129
00:10:11.753 --> 00:10:16.532
Shows up every second we fetch,
That is back,

130
00:10:16.532 --> 00:10:19.823
and we have to call that false.

131
00:10:19.823 --> 00:10:23.273
&gt;&gt; And then I think that on
the show loading needs to be true.

132
00:10:23.273 --> 00:10:29.416
&gt;&gt; Yep, I was talking and typing at the
same time, and swap those the wrong way.

133
00:10:29.416 --> 00:10:30.240
&gt;&gt; Cool.

134
00:10:32.477 --> 00:10:37.433
&gt;&gt; Shows it, fetches,
gets the data back, takes it down,

135
00:10:37.433 --> 00:10:42.288
like not terrible, but
the idea that we even delayed for

136
00:10:42.288 --> 00:10:45.411
a second before fetching the data.

137
00:10:45.411 --> 00:10:48.000
That's one way to lie to your users.

138
00:10:48.000 --> 00:10:52.928
We try to lie gently we don't tell
egregious lies that hinder performance,

139
00:10:52.928 --> 00:10:55.320
we're just trying to protect them.

