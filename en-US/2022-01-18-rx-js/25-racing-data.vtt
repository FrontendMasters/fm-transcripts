WEBVTT

1
00:00:00.000 --> 00:00:06.459
So we think about this what we wanna do is
we need to start racing some things right?

2
00:00:06.459 --> 00:00:09.918
We wanna race the different
like whether or

3
00:00:09.918 --> 00:00:15.406
not we should show the loading indicator,
when the data came back?

4
00:00:15.406 --> 00:00:17.781
Did we show a loading indicator for
long enough?

5
00:00:17.781 --> 00:00:23.903
These are various things that we need
to figure out and coordinate between.

6
00:00:23.903 --> 00:00:27.515
Our code has a little bit
of a problem here as well,

7
00:00:27.515 --> 00:00:31.652
which is we are getting these
values at initialization.

8
00:00:31.652 --> 00:00:34.407
So I haven't adjusted to
many of the numbers yet, but

9
00:00:34.407 --> 00:00:36.621
these should probably be moved in as well.

10
00:00:36.621 --> 00:00:40.029
So we'll go ahead or grab this and

11
00:00:47.638 --> 00:00:51.105
We'll pop this in here is the same.

12
00:00:51.105 --> 00:00:56.816
Passable but not good version
that we had before, right again,

13
00:00:56.816 --> 00:01:04.348
sure, it doesn't flash a loading indicator
real fast, but also it delays things.

14
00:01:04.348 --> 00:01:07.622
We can do better.

15
00:01:07.622 --> 00:01:11.641
So, we could theoretically
get our data and

16
00:01:11.641 --> 00:01:16.308
what we need to do is we
wanna race between whether or

17
00:01:16.308 --> 00:01:19.253
not we should show the loading.

18
00:01:19.253 --> 00:01:24.360
And whether or
not they all race between whether I wish

19
00:01:24.360 --> 00:01:30.047
to show the loading and
whether the data came back, right?

20
00:01:30.047 --> 00:01:33.548
And so let's get our data
into a variable over here so

21
00:01:33.548 --> 00:01:36.342
we can play around with a little bit more.

22
00:01:36.342 --> 00:01:41.212
So then we'll call this data

23
00:01:46.469 --> 00:01:50.534
So now we've got the kind of 3 pieces
that we need to deal with here.

24
00:01:50.534 --> 00:01:54.716
So first of all, whether or not we should
show the loading should probably be a race

25
00:01:54.716 --> 00:01:57.883
between the data and the loading,
whichever happens first.

26
00:01:57.883 --> 00:01:59.271
Should be good to go.

27
00:01:59.271 --> 00:02:02.730
So let's call this one I don't know.

28
00:02:08.159 --> 00:02:11.622
Load like the idea of whether or
not you're loading

29
00:02:22.015 --> 00:02:24.893
That's a good point.

30
00:02:24.893 --> 00:02:27.820
Go theoretically work but we can do better

31
00:02:29.846 --> 00:02:35.372
Marks in charge naming things
we'll do with that in a second,

32
00:02:35.372 --> 00:02:40.157
we got show loading and
the data right whichever one of

33
00:02:40.157 --> 00:02:44.329
these emits first should
theoretically win.

34
00:02:53.040 --> 00:02:55.663
All right, so okay, one of these should
happen, and then we'll do the next one and

35
00:02:55.663 --> 00:02:56.274
then the last one.

36
00:02:56.274 --> 00:02:57.275
Now, we'll have a little bit of a problem.

37
00:02:57.275 --> 00:02:59.374
I'm here we'll deal with that.

38
00:02:59.374 --> 00:03:00.019
We fetch.

39
00:03:03.173 --> 00:03:06.454
Let's see res should show loading or data.

40
00:03:06.454 --> 00:03:08.318
Yeah, we want the API to
be faster at this point.

41
00:03:08.318 --> 00:03:10.444
So we'll say show loading after 2 seconds.

42
00:03:10.444 --> 00:03:12.404
But our API should go
back after one second.

43
00:03:16.130 --> 00:03:16.923
Refresh that.

44
00:03:16.923 --> 00:03:20.383
So API construction one second.

45
00:03:20.383 --> 00:03:25.654
In 2 seconds.

46
00:03:25.654 --> 00:03:30.104
So we got our data back and
we still showed it.

47
00:03:30.104 --> 00:03:34.047
So we got to deal with that in a second,
all right.

48
00:03:34.047 --> 00:03:34.825
Let's see what we got here.

49
00:03:34.825 --> 00:03:37.929
So we've got our data, we're going and

50
00:03:37.929 --> 00:03:42.403
like fetching the data a second
time which feels weird, so

51
00:03:42.403 --> 00:03:46.348
we'll have to handle that as well,
hide loading.

52
00:03:46.348 --> 00:03:50.663
You could actually make this a timer.

53
00:03:50.663 --> 00:03:57.265
We're gonna say that hide loading,is only
fire after whatever we're looking for.

54
00:04:02.276 --> 00:04:08.103
Right, so this one will delay and
then do the thing,

55
00:04:08.103 --> 00:04:13.678
this one will fire after
a certain amount of time.

56
00:04:13.678 --> 00:04:15.253
So we've got both of these in place.

57
00:04:15.253 --> 00:04:16.990
Should we show the loading?

58
00:04:16.990 --> 00:04:20.220
Really, we should show it.

59
00:04:20.220 --> 00:04:24.199
We wanna then we want to hide it depending
like whichever one happens first.

60
00:04:28.866 --> 00:04:29.616
So we wanna window here.

61
00:04:29.616 --> 00:04:33.243
Here of should we show should we hide?

62
00:04:33.243 --> 00:04:38.411
And then what should we do in this case?

63
00:04:38.411 --> 00:04:42.562
See what we got here.

64
00:04:42.562 --> 00:04:44.651
This still isn't working right,
we're fetching.

65
00:04:44.651 --> 00:04:48.000
I was also our initial values.

66
00:04:48.000 --> 00:04:52.402
Let's go ahead and say, show the letter.

67
00:04:52.402 --> 00:04:55.080
Yeah, cool.

68
00:04:55.080 --> 00:05:02.186
Well, this turned into true I mean,
let's see 29 show loading.

69
00:05:08.071 --> 00:05:09.746
We're fetching a second time.

70
00:05:09.746 --> 00:05:13.910
&gt;&gt; Do you wanna remove the data from
your concat census in the race?

71
00:05:13.910 --> 00:05:15.958
&gt;&gt; Yes.

72
00:05:15.958 --> 00:05:19.071
Well, this could be slightly
problematic because also

73
00:05:19.071 --> 00:05:21.066
what happens if show loading wins?

74
00:05:21.066 --> 00:05:22.424
&gt;&gt; We never fetch?

75
00:05:22.424 --> 00:05:23.337
&gt;&gt; Yeah.

76
00:05:23.337 --> 00:05:26.487
So like,
we would basically just deal with it.

77
00:05:26.487 --> 00:05:32.422
Even if this happened, we'd fetch,
but we'd never hear about it, right?

78
00:05:32.422 --> 00:05:34.812
So let's see.

79
00:05:34.812 --> 00:05:39.794
So we've got our ability
to fetch the data,

80
00:05:39.794 --> 00:05:43.189
scroll up a little bit.

81
00:05:43.189 --> 00:05:48.741
We've got we had the ability to show the
loading faster data than hide it, right?

82
00:05:48.741 --> 00:05:50.378
Now we could race the two of them, right?

83
00:05:50.378 --> 00:05:54.251
The show loading and
the should show loading, right?

84
00:05:54.251 --> 00:05:55.047
And that's kind of what we should do.

85
00:05:55.047 --> 00:05:57.586
First, we show the data then we hide it.

86
00:05:57.586 --> 00:05:59.638
It still problematic.

87
00:05:59.638 --> 00:06:03.695
Next what we could do is
figure out how to say like.

88
00:06:03.695 --> 00:06:05.647
Hey, do your point.

89
00:06:05.647 --> 00:06:08.710
I want this data one way or
the other, right?

90
00:06:08.710 --> 00:06:13.547
Cuz we know from earlier when we were
learning that every subscription will

91
00:06:13.547 --> 00:06:15.324
fire off another request.

92
00:06:15.324 --> 00:06:21.592
Right, but I both wanna race
the loading indicator with the data.

93
00:06:21.592 --> 00:06:26.134
But then if I grab on to that data later
and you have it, I still want it, right.

94
00:06:26.134 --> 00:06:28.715
So I would like to be able
to subscribe multiple times.

95
00:06:28.715 --> 00:06:33.661
So that fetch of data so I can hopefully
race them together a little bit better.

96
00:06:33.661 --> 00:06:40.229
And there are a few different operators
that help us with this, right.

97
00:06:40.229 --> 00:06:44.869
One of the questions I got earlier
were hot versus cold observables,

98
00:06:44.869 --> 00:06:47.430
a cold one is your normal observable.

99
00:06:47.430 --> 00:06:52.794
Every subscription gets a new version
fetch data will do a from interval or

100
00:06:52.794 --> 00:06:56.611
from fetch rather and
go get it and give it back to us.

101
00:06:56.611 --> 00:07:01.176
In our case, we could either use,
share or share replay.

102
00:07:01.176 --> 00:07:03.532
Share is basically now
a hot observable and so

103
00:07:03.532 --> 00:07:06.882
everyone that gets it gets the same
copy of the user observable.

104
00:07:06.882 --> 00:07:12.034
Share replay does kind of what the name
says on the 10.It's shareable,

105
00:07:12.034 --> 00:07:15.322
but it will also give you
some number of values.

106
00:07:15.322 --> 00:07:18.806
In the past, right this way,
if it is already completed and

107
00:07:18.806 --> 00:07:20.699
we had that data, we missed it.

108
00:07:20.699 --> 00:07:24.794
Give me cuz this thing really
only shows that data, so

109
00:07:24.794 --> 00:07:27.981
give me what it had as
its data at the time.

110
00:07:27.981 --> 00:07:31.153
And so I show up late to the party,
I can have that as well.

111
00:07:31.153 --> 00:07:35.653
So let's try that out.

112
00:07:35.653 --> 00:07:37.266
I don't know why he making a typo.

113
00:07:37.266 --> 00:07:40.546
So we'll do share replay.

114
00:07:40.546 --> 00:07:42.424
One can share.

115
00:07:42.424 --> 00:07:45.824
You might have missed some of the previous
transmissions, but you'll hear for

116
00:07:45.824 --> 00:07:47.102
all new things share replay.

117
00:07:47.102 --> 00:07:51.592
As will also give you a stream
of the last any number of

118
00:07:51.592 --> 00:07:56.608
values that were omitted that
you might have missed cool.

119
00:07:56.608 --> 00:08:01.049
So we've got the data fetch data
we're gonna be able to share that

120
00:08:01.049 --> 00:08:03.400
between different observables.

121
00:08:03.400 --> 00:08:08.181
Whether or not we should show
the loading we will delay, so

122
00:08:08.181 --> 00:08:13.169
for up, that's part of my issue
where we want to show after.

123
00:08:13.169 --> 00:08:20.408
All right, so we'll have a value
that we're gonna delay, and

124
00:08:20.408 --> 00:08:25.881
then we're gonna show
the loading indicator.

125
00:08:25.881 --> 00:08:29.767
So they were set both by taking it
down and showing it at the same time,

126
00:08:29.767 --> 00:08:30.437
all right.

127
00:08:30.437 --> 00:08:34.615
So we've got this show loading,
which is gonna delay and

128
00:08:34.615 --> 00:08:38.718
then now at the correct amount of time,
show our value.

129
00:08:38.718 --> 00:08:43.272
High loading, it's just a timer that's
set to do the thing, but then probably we

130
00:08:43.272 --> 00:08:47.110
need to actually, we really wanna
grab the first event off of there.

131
00:08:47.110 --> 00:08:48.855
So we'll pipe it.

132
00:08:52.744 --> 00:08:57.048
&gt;&gt; We need to show loading
false will never hide.

133
00:08:57.048 --> 00:08:58.418
&gt;&gt; Where's that?

134
00:08:58.418 --> 00:08:59.476
&gt;&gt; Don't need to.

135
00:08:59.476 --> 00:09:00.682
&gt;&gt; Well, this is when we wanna show it.

136
00:09:00.682 --> 00:09:03.593
We're saying we're gonna show it we're
gonna wait until a certain number of

137
00:09:03.593 --> 00:09:04.226
milliseconds.

138
00:09:04.226 --> 00:09:05.679
Then we're gonna show it,

139
00:09:05.679 --> 00:09:09.151
hide loading is gonna be the one
that takes it down cuz two things,

140
00:09:09.151 --> 00:09:13.147
right need to figure out whether or
not we should hide the loading, right?

141
00:09:13.147 --> 00:09:17.811
If it has been long enough and the data
comes back, we don't need to go for

142
00:09:17.811 --> 00:09:21.492
a victory lap for
another 500 milliseconds, right.

143
00:09:21.492 --> 00:09:26.273
We showed it we didn't flash in front of
them it is only if the data came back so

144
00:09:26.273 --> 00:09:30.327
fast, test that it would flash,
then we need to deal with that.

145
00:09:30.327 --> 00:09:31.949
So highlighted we're basically a timer.

146
00:09:31.949 --> 00:09:34.060
It's like, loading indicating went up.

147
00:09:34.060 --> 00:09:36.315
We're timing the loading being there.

148
00:09:36.315 --> 00:09:38.940
We will make sure the loading was
there for a certain amount of time.

149
00:09:38.940 --> 00:09:41.230
If that time has passed and
we're not gonna flash anything.

150
00:09:41.230 --> 00:09:44.870
Soon as the data comes back,
take it down, right.

151
00:09:44.870 --> 00:09:45.732
So basically,

152
00:09:45.732 --> 00:09:50.123
high loading really just cares about
when we started showing the the loading.

153
00:09:50.123 --> 00:09:55.091
And really,
we only want the first as we saw before.

154
00:09:55.091 --> 00:09:58.049
Cool and
I keep it in semi-colons in there.

155
00:09:58.049 --> 00:10:02.984
So show loading, take an event,
delay it, show it when you need to show.

156
00:10:02.984 --> 00:10:07.147
I just could I could pass the value
through to if I wanted to.

157
00:10:07.147 --> 00:10:12.907
So I could say,
now we have a timer that's gonna go off,

158
00:10:12.907 --> 00:10:18.422
right that we want to start
after we show the loading,

159
00:10:18.422 --> 00:10:23.466
right so immediately,
start at fire the event.

160
00:10:23.466 --> 00:10:27.183
For showing the loading,
that's still gonna delay after that

161
00:10:27.183 --> 00:10:31.122
we are going to fire whether enough
time has passed to take it down.

162
00:10:31.122 --> 00:10:34.385
And then also the data can
pass if it's happened, so

163
00:10:34.385 --> 00:10:38.911
basically what to play through through
the events in order to show that,

164
00:10:38.911 --> 00:10:41.750
show the loading that's gonna still delay.

165
00:10:41.750 --> 00:10:44.975
Its of it's gonna fire, but then it's
gonna wait before it does that tap.

166
00:10:44.975 --> 00:10:48.115
So fires immediately second thing,
it happens.

167
00:10:48.115 --> 00:10:49.137
It's gonna delay.

168
00:10:49.137 --> 00:10:49.794
Its gonna tap.

169
00:10:49.794 --> 00:10:52.049
It's gonna show the, that's the first one.

170
00:10:52.049 --> 00:10:56.038
After that, we're showing the loading,
set a timer for

171
00:10:56.038 --> 00:10:59.707
how long things should
happen before it takes down.

172
00:10:59.707 --> 00:11:01.520
Then we'll have data actually clean it up.

173
00:11:01.520 --> 00:11:03.195
So you'll notice the high
loading isn't actually do it.

174
00:11:03.195 --> 00:11:05.058
It's like you could even call this.

175
00:11:08.231 --> 00:11:11.604
Time to hide the loading.

176
00:11:14.495 --> 00:11:20.940
Right, so should show the loading which
will then actually race these two.

177
00:11:20.940 --> 00:11:25.843
So loading actually should show
loading changes a little bit,

178
00:11:25.843 --> 00:11:30.754
because we wanna race this whole
process with the data itself.

179
00:11:30.754 --> 00:11:36.036
So here we're gonna say basically
what I just said in words,

180
00:11:36.036 --> 00:11:40.595
immediately start the process
of delaying yourself

181
00:11:40.595 --> 00:11:44.856
a little bit of time before
you show the loading.

182
00:11:44.856 --> 00:11:49.382
So we'll say that then,
soon if you have shown

183
00:11:49.382 --> 00:11:54.838
the loading indicator at all
if that has ever happened,

184
00:11:54.838 --> 00:11:58.107
right, set a timer to take it down

185
00:12:06.371 --> 00:12:09.830
However, don't take it down
unless you have some data, right?

186
00:12:09.830 --> 00:12:11.269
[LAUGH].

187
00:12:11.269 --> 00:12:14.643
Don't tell me we're done loading
if you're not done loading, so

188
00:12:14.643 --> 00:12:15.917
then the third thing is.

189
00:12:18.055 --> 00:12:23.256
Is to take that data, And that's when
we'll pull down the loading indicator.

190
00:12:32.156 --> 00:12:35.915
Right, this is just handling whether or

191
00:12:35.915 --> 00:12:40.679
not we should show loading
at all data dollar sign.

192
00:12:40.679 --> 00:12:44.901
That whole process of spinning up
tiny when you should take it down,

193
00:12:44.901 --> 00:12:46.618
should race with the data.

194
00:12:46.618 --> 00:12:50.972
Cuz if the data comes back before we show,
I don't care about any of this, right?

195
00:12:50.972 --> 00:12:54.898
It's only if this first event triggers.

196
00:12:54.898 --> 00:12:56.702
Then I want to show the loading indicator.

197
00:12:56.702 --> 00:12:59.279
I'm gonna keep it up for
as long as it's supposed to be kept up.

198
00:12:59.279 --> 00:13:03.665
And then when the data finally comes
back in, I wanna take it down, right.

199
00:13:03.665 --> 00:13:08.438
So this will be roughly the delta
between when we decided to show it and

200
00:13:08.438 --> 00:13:11.007
however long we said it should be up.

201
00:13:11.007 --> 00:13:13.337
If you can get away without showing it,
please do.

202
00:13:13.337 --> 00:13:15.755
But if you're gonna show it,
set another timer for

203
00:13:15.755 --> 00:13:17.341
the bare minimum it should be up.

204
00:13:17.341 --> 00:13:21.248
And then when the data comes back, take it
down, the data comes back in that window.

205
00:13:21.248 --> 00:13:22.494
We're still gonna leave it up there.

206
00:13:22.494 --> 00:13:25.808
We can deal with the data
simultaneously as well.

207
00:13:25.808 --> 00:13:32.237
So now should show loading and
the data itself

208
00:13:45.776 --> 00:13:51.532
All right, so we're gonna say that
the API takes, will show this but

209
00:13:51.532 --> 00:13:55.913
show the loading indicator for
at least 5 seconds.

210
00:13:55.913 --> 00:13:58.600
So the little ridiculous button so

211
00:13:58.600 --> 00:14:03.796
loading goes up the data is received
it comes back it takes it down.

212
00:14:03.796 --> 00:14:09.764
Now 5 seconds is ridiculous we shouldn't
show that what happens if the API request

213
00:14:09.764 --> 00:14:15.324
comes back in 500 milliseconds,
all right, let's just console clear.

214
00:14:19.857 --> 00:14:24.168
So this case we're back
no loading indicator.

215
00:14:24.168 --> 00:14:27.246
Right, we didn't show it at all.

216
00:14:27.246 --> 00:14:31.125
This one we're gonna have the API
response come back like JavaScript timers

217
00:14:31.125 --> 00:14:35.811
are weird, let's give ourselves like 200
milliseconds of wiggle room there, right.

218
00:14:35.811 --> 00:14:40.679
Because it could still be slightly
off with a fake timer we'll show it.

219
00:14:40.679 --> 00:14:43.320
But again, we'll keep it.

220
00:14:43.320 --> 00:14:45.327
All right, if you're gonna show it,
the data is back, but

221
00:14:45.327 --> 00:14:46.746
we're still showing it for a little bit.

222
00:14:46.746 --> 00:14:49.358
Now, 500 milliseconds is again for
dramatic effect.

223
00:14:49.358 --> 00:14:52.870
But again,
you'd probably find that to be maybe like,

224
00:14:52.870 --> 00:14:57.218
I feel like 300 is the threshold for
like not seeming ridiculous.

225
00:14:57.218 --> 00:15:00.905
Now even that was you adjust it
right 300 even seemed a bit much.

226
00:15:04.906 --> 00:15:06.816
Yeah, so you can play with
the numbers a little bit but

227
00:15:06.816 --> 00:15:09.766
yeah it this is the tricky part of kind of
pulling together a lot of these concepts.

228
00:15:09.766 --> 00:15:13.953
Like why would you wanna concatenate
stuff because again we threw a event

229
00:15:13.953 --> 00:15:17.470
into the future showing the loading
soon as we show the load.

230
00:15:17.470 --> 00:15:22.330
And then we set a timer for the bare
minimum take it down and then if we have

231
00:15:22.330 --> 00:15:27.038
the data, if not keep waiting for
the data and take down the loading.

232
00:15:27.038 --> 00:15:30.787
But if the data comes back before any
of this it wins forget this ignore this

233
00:15:30.787 --> 00:15:34.490
forget all this complicated logic
we don't wanna deal with it, right?

234
00:15:34.490 --> 00:15:38.315
And that's where you can start to play
with the time race different pieces of

235
00:15:38.315 --> 00:15:40.069
the timeline against each other.

236
00:15:40.069 --> 00:15:43.588
Be able to orchestrate and coordinate
different things in different scenarios,

237
00:15:43.588 --> 00:15:44.762
so on and so forth, right?

238
00:15:44.762 --> 00:15:49.003
And so what our excess seeks to do for
us is it seeks to give us kind of

239
00:15:49.003 --> 00:15:52.569
the tools for
kind of playing with all of these things.

240
00:15:52.569 --> 00:15:55.562
That might happen over time to
figure out which one happens first,

241
00:15:55.562 --> 00:15:56.689
how to coordinate them.

242
00:15:56.689 --> 00:15:58.611
What order do we wanna merge them all in?

243
00:15:58.611 --> 00:16:00.103
Do we wanna switch between another one?

244
00:16:00.103 --> 00:16:04.085
Do we wanna finish what we started
before we do the next thing, right.

245
00:16:04.085 --> 00:16:06.744
what are all the different things
that we want to kind of compile and

246
00:16:06.744 --> 00:16:07.844
play around with, right?

247
00:16:07.844 --> 00:16:12.509
But a lot of the pieces from the very
simple like turning things into observable

248
00:16:12.509 --> 00:16:14.994
with foreign have to do bouncing things.

249
00:16:14.994 --> 00:16:18.720
To switching between API's to
putting things in a given order or

250
00:16:18.720 --> 00:16:20.931
figuring out which one ends up first.

251
00:16:20.931 --> 00:16:25.662
These small fundamental pieces can
become kind of the bigger like core

252
00:16:25.662 --> 00:16:28.801
of how you build the more
complicated things.

253
00:16:28.801 --> 00:16:32.451
Because the trick part is like you'd
have to squint at this code and

254
00:16:32.451 --> 00:16:36.052
read through it totally right but
it's not a lot of code, right.

255
00:16:36.052 --> 00:16:39.188
The tricky part is the actual
like logic of like okay, so

256
00:16:39.188 --> 00:16:41.000
when do I wanna show this thing.

257
00:16:41.000 --> 00:16:43.013
And when do I wanna take it down right and

258
00:16:43.013 --> 00:16:46.869
that's unfortunately a complicated
problem JavaScript aside, right?

259
00:16:46.869 --> 00:16:50.593
It's just our job as software engineers
is to effectively like work through

260
00:16:50.593 --> 00:16:53.047
all of these weird contingencies and
edge cases.

261
00:16:53.047 --> 00:16:56.116
And sometimes it gets a little squirrely,
but

262
00:16:56.116 --> 00:17:00.929
ideally, when it comes time to sit
down and start figuring out the code.

263
00:17:00.929 --> 00:17:03.243
And like we could probably break this
out into like some smaller methods and

264
00:17:03.243 --> 00:17:04.058
stuff along those lines.

265
00:17:04.058 --> 00:17:07.437
And annotated a little bit better, but
to begin to figure out those things.

266
00:17:07.437 --> 00:17:13.039
And I think that without
a decent abstraction for

267
00:17:13.039 --> 00:17:18.102
dealing with things that happen over time.

268
00:17:18.102 --> 00:17:21.474
You'd be setting a whole bunch of weird
variables that you'd try to keep in

269
00:17:21.474 --> 00:17:22.233
state, right?

270
00:17:22.233 --> 00:17:24.366
Okay, now I'm gonna set this one to true,
and

271
00:17:24.366 --> 00:17:27.005
then I'm gonna set date now
plus the amount of interval.

272
00:17:27.005 --> 00:17:31.964
And then when this thing comes back I'm
gonna say if data now is greater than,

273
00:17:31.964 --> 00:17:35.570
I'm already frustrated,
just, I can't even write.

274
00:17:35.570 --> 00:17:36.516
And so to give ourselves tools.

275
00:17:36.516 --> 00:17:37.804
We kind of, managing all these things.

276
00:17:37.804 --> 00:17:40.163
Again, it's all JavaScript under the hood,
right?

277
00:17:40.163 --> 00:17:44.350
But to can give us abstractions for
handling, all of those things as well.

