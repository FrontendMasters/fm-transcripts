[00:00:00]
>> Can we use the catch error operator?
>> I love that question. The question was can we use the catch error operator? We can, right in this situation right but we have to kind of changed the way cuz we implemented this because even if it's a 400 or 500 fetch does not throw an error, right?

[00:00:27]
It will simply say the response is not okay. But that doesn't mean we can't throw an error [LAUGH] Right? We're well within our rights to throw an error in this case. So we can say, throw new error Something went wrong right now we've thrown an error and we've created a bad thing for ourselves if one throws an error it's kinda like throwing like an apple pie in the air directly above you.

[00:00:58]
You can throw an apple pie, you should be prepared to catch it, right? That's not my best analogy, but we're gonna go with it. So the question was, can we use catch error? We can we just need to make sure that like we throw errors in the cases that we want to do.

[00:01:13]
Do with so we have an operator called catchError and instead of letting the observable error out what it does is it allows you to catch it, right? And so we could say like return to basically that logic we had before. I think that's an error object in this case, we'll find out I'll get yelled at if it's not.

[00:01:45]
Well, so just cancel there too. All right, let's see, that should do the trick. If not, we'll find out together, and I'll look confused for a second. So we throw there. We haven't caught it. Mostly because we'll play a fun game. Why didn't I catch the error. You're outside.

[00:02:20]
Yep. So it was on the outer observable. It's really this inner one that had the error. So that is a common case which is the inner one. Blew up nothing caught it it cascaded outwards. So you have to catch just like in JavaScript you have to catch the error while you're through the erro right?

[00:02:38]
You can catch it I guess up the stack in JavaScript but cause we are constantly erro in it. It's like it failed, cool. So yeah, we're seeing on the screen because we chose to cancel error. So you can see something went wrong. We're also seeing it there not because anything blew up because we said we wanted to know.

[00:03:06]
Right so we can see the network failure but we can see nothing blows up in my code it's simply we got the 500 back from the API which the API did 500 but we recovered we just put a notice. And we gave it a shot. All right, so here's the tricky part now, we can have an API, it can work, we can show an error message if there's an error, awesome, we can clear out the error too.

[00:03:30]
I can say basically actually what I would probably do is if we try again, what I would probably say is let's. Try that out that should clear out there in between fetches that work, then we'll have one that should blow up every so often. And you can see when it works again, we clear out the error..

[00:04:03]
What if we wanted to retry? How would you do this if you didn't have an observable. You want to say I want to try four times before giving up right? Cuz we all we all know those API's but when that works 60% of the time works every time right?

[00:04:20]
What happens we want to try a certain number of times but not perpetually maybe you do want to do perpetual. But let's say we want to retry it four times what would you do with just regular JavaScript?
>> Y-loop, you use a y-loop.
>> Y-loop and yeah you basically have to store in a variable right?

[00:04:37]
And you iterate over it and all that kind of thing you could do that like everything in our JS is the thing that you could do because it's JavaScript. You can also write your own virtualDom2, you can do whatever you want. But when you don't hit your sprinkles, you don't come talk to me about it.

[00:04:51]
One of the options that we have is this ability to retry, right? And we can say, okay, I want to retry four times. All right I have that one in here too. So now it will go ahead and will if it fails for some reason it's going to try it again if you try it again and try it again now this one fails one every two times.

[00:05:16]
So like, ideally, we should see a success rate at this point and kind of see in the network like did it fail this one didn't. So you see it failed, and then try it again. Succesful failed to try it again, right? It probably won't fail four times because this is a fake API that succeeds roughly half the time and science.

[00:05:56]
But for the most part like now we can basically implement retry logic incredibly easily, right? We have a pretty like reusable piece of API fetching code, which will fetch it throw an error. If we get a four or 500, which a promise API doesn't do by default. It'll catch the error and we can choose what we want to do with it gracefully.

[00:06:15]
If it does if it gets through all four times, it will eventually hit this catch error and we can do something with it. But otherwise, we can choose to retry it Mark.
>> For me, catch error worked fine at the same level as exhausted.
>> Yeah, you know what it was I think like because I was literally console area.

[00:06:35]
I was like, that's an error. I wasn't expecting right, it should bubble up, right? I think that's fair. Right. This one let's try it out. Cuz I was constant error I saw like a sea of red and I'm a little hurt after the counter incident. [LAUGH] Yeah, this one is retry now let's make it fail all the time.

[00:07:00]
So that it like this will eventually make it through its four retries. All right, you can see it tries, it fails. I guess there's the initial time plus for retries, right? And logs we did catch the error. I could have it outside the pipe. I was just when I let the console error happen here.

[00:07:25]
If I turn this to a console one it'd be a little clearer to just to make it not look the same. You can change things if you don't if you miss it slash key while you're typing doesn't do anything right so tries and then we hit the catch errors situation from before.

