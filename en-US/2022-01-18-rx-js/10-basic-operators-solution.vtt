WEBVTT

1
00:00:00.197 --> 00:00:04.986
So with that let's go and take a look.

2
00:00:04.986 --> 00:00:10.201
One of the things that I gave
myself was get result which does

3
00:00:10.201 --> 00:00:16.581
that collecting everything in a array and
then we'll resolve it for me.

4
00:00:16.581 --> 00:00:21.040
And then these are now a sync
functions than just wish if you

5
00:00:21.040 --> 00:00:23.049
return the expectation.

6
00:00:23.049 --> 00:00:26.371
It'll wait for
the promise to resolve in this case.

7
00:00:26.371 --> 00:00:30.003
So it's just syntactic sugar
over what we did by hand before.

8
00:00:30.003 --> 00:00:34.696
But I couldn't be bothered to make arrays
subscribe to things over and over and

9
00:00:34.696 --> 00:00:39.385
over again in the interest to save time,
that was cool when we were trying to get

10
00:00:39.385 --> 00:00:43.255
an understanding of the API of
an observable and subscription.

11
00:00:43.255 --> 00:00:49.111
But like, that's old hat now,
so we're good in that sense.

12
00:00:49.111 --> 00:00:54.778
All right, so here we have one where
we want to take a series of numbers,

13
00:00:54.778 --> 00:01:00.454
and we want to end up with we're
dinosaur very loud, about four times.

14
00:01:00.454 --> 00:01:03.599
So what are the two operators?

15
00:01:03.599 --> 00:01:06.729
I only want five out of
the seven items in the stream.

16
00:01:06.729 --> 00:01:10.163
What operator speaks to you?

17
00:01:10.163 --> 00:01:11.887
Take, right?

18
00:01:11.887 --> 00:01:17.239
So we could say take we'll say five,
right?

19
00:01:17.239 --> 00:01:19.039
And we'll make sure yep,
we have it imported.

20
00:01:19.039 --> 00:01:23.472
So we'll take 5 and
this will give me now 012345.

21
00:01:23.472 --> 00:01:25.418
And I really have two options.

22
00:01:25.418 --> 00:01:27.984
If I want to take these numbers and

23
00:01:27.984 --> 00:01:32.301
change them into the same value,
what am I two options?

24
00:01:32.301 --> 00:01:33.347
&gt;&gt; Map or map two.

25
00:01:33.347 --> 00:01:37.474
&gt;&gt; Map or map two, in this case map two is
probably makes a little bit more sense.

26
00:01:37.474 --> 00:01:41.440
So say map two.

27
00:01:41.440 --> 00:01:44.505
And this map two seems like
why would I ever use this?

28
00:01:44.505 --> 00:01:48.483
Will actually use it a little bit like
there are some times where you could say

29
00:01:48.483 --> 00:01:52.726
like, hey, let's say hypothetical
starting and stopping a counter, right?

30
00:01:52.726 --> 00:01:55.239
The start button I might
always wanna map to true.

31
00:01:55.239 --> 00:01:57.923
And the pause button I might
always wanna map to false.

32
00:01:57.923 --> 00:02:00.775
And then I can figure out is
the counter running or not or

33
00:02:00.775 --> 00:02:05.501
what the desire state is rather than going
like, is the event from this event target.

34
00:02:05.501 --> 00:02:09.711
This, right, just map does want to
stream to true mastery to true or false.

35
00:02:09.711 --> 00:02:12.613
When I get them both together,
I will handle my stuff.

36
00:02:12.613 --> 00:02:14.759
So that's the kind of if it feels silly.

37
00:02:14.759 --> 00:02:18.471
In this example, it is silly in this
example, but like we are again,

38
00:02:18.471 --> 00:02:20.784
we're building towards some stuff here.

39
00:02:20.784 --> 00:02:25.877
So we have that in place,
and that passes, okay?

40
00:02:25.877 --> 00:02:31.391
So I wanna skip the first five values and
double the last two.

41
00:02:31.391 --> 00:02:33.220
The answer this is one of
those longer where the answers

42
00:02:33.220 --> 00:02:34.304
kinda in the question, right?

43
00:02:34.304 --> 00:02:40.765
If take takes the first five, skip will
in this case, skip the first five, right?

44
00:02:40.765 --> 00:02:45.508
So in this case, we can go ahead and
we can skip five of them and

45
00:02:45.508 --> 00:02:48.870
then we will map and
map takes the value in.

46
00:02:48.870 --> 00:02:55.302
This is what I do, I deal with at
this point which is multiply it by 2.

47
00:02:55.302 --> 00:02:59.142
Awesome, I let that pass.

48
00:02:59.142 --> 00:03:02.091
All right, so now we're getting a little
bit we're escalating a little bit here.

49
00:03:02.091 --> 00:03:06.572
We want to omit the square of every
even number in the stream, right?

50
00:03:06.572 --> 00:03:09.804
So we want to kind of
ignore the odd numbers.

51
00:03:09.804 --> 00:03:13.913
And then we will multiply
the even numbers by themselves.

52
00:03:13.913 --> 00:03:16.667
What do we use to ignore?

53
00:03:16.667 --> 00:03:21.313
I guess it's really glass half empty
glass half full kinda thing either

54
00:03:21.313 --> 00:03:22.949
ignore certain values.

55
00:03:22.949 --> 00:03:26.391
We're only allowing other values,
what's the operator for this one?

56
00:03:26.391 --> 00:03:26.960
&gt;&gt; Filter.

57
00:03:26.960 --> 00:03:27.697
&gt;&gt; Filter.

58
00:03:31.441 --> 00:03:36.615
In this case,
we will filter and we'll say n.

59
00:03:36.615 --> 00:03:41.705
In this case if it does not it's not even

60
00:03:41.705 --> 00:03:47.414
then it only allowed to
even once through and

61
00:03:47.414 --> 00:03:51.751
then which point we can then map.

62
00:03:55.857 --> 00:04:04.994
Cool, and we will unskip that test
Let's well, all right, it's passing.

63
00:04:04.994 --> 00:04:10.865
All right, so we want all some of all
the total Fibonacci numbers under 200.

64
00:04:10.865 --> 00:04:15.365
So we only wanna take them
while they are beneath 200,

65
00:04:15.365 --> 00:04:19.980
right less than 200 which
operator we use in this case.

66
00:04:19.980 --> 00:04:20.806
&gt;&gt; Take while.

67
00:04:20.806 --> 00:04:25.174
&gt;&gt; Take while like we could try to lucky
guests would take that would work totally

68
00:04:25.174 --> 00:04:29.676
didn't do that a few times writing this
test was making the exercise would never

69
00:04:29.676 --> 00:04:32.586
dream of it, so
this one says it gonna take a while.

70
00:04:38.338 --> 00:04:42.407
Okay, so
we'll do as long as less than 200.

71
00:04:42.407 --> 00:04:45.278
And then we want the final total.

72
00:04:45.278 --> 00:04:49.893
You notice there's only one value in
this array, that we ever admit, so

73
00:04:49.893 --> 00:04:52.476
which is the, we have two choices here.

74
00:04:52.476 --> 00:04:56.242
I'll give you the two choices,
the right answer, is it reducer scan?

75
00:04:56.242 --> 00:04:56.762
&gt;&gt; Reduce.

76
00:04:56.762 --> 00:04:59.622
&gt;&gt; Reduce,
reduce gives us the final value.

77
00:04:59.622 --> 00:05:02.592
Scan will give you
everything along the way.

78
00:05:02.592 --> 00:05:05.930
So we'll say total and

79
00:05:05.930 --> 00:05:11.025
we'll give it a starting value and

80
00:05:11.025 --> 00:05:14.900
we're on skip this test.

81
00:05:20.240 --> 00:05:24.476
One of the things that we could do is have
a starting value always make sense there

82
00:05:24.476 --> 00:05:28.082
is another helper that we'll see
in a little bit called start with,

83
00:05:28.082 --> 00:05:32.594
which will then shoot a value through that
observable stream in the very beginning.

84
00:05:32.594 --> 00:05:34.430
There's also an with, right?

85
00:05:34.430 --> 00:05:38.558
So you can have, first value, and a last
value, that go through no matter what,

86
00:05:38.558 --> 00:05:41.371
regardless of what the observable does,
by default.

87
00:05:41.371 --> 00:05:45.247
This could be useful if you have an input
field, and you wanna be like, cool,

88
00:05:45.247 --> 00:05:48.768
nobody's typed anything,
I don't have anything to work with here,

89
00:05:48.768 --> 00:05:52.009
shoot through the initial values
something along those lines.

90
00:05:52.009 --> 00:05:53.950
So to start with is another
one that we can use.

91
00:05:53.950 --> 00:05:55.574
I don't know if I have it imported,
so that might blow up.

92
00:05:55.574 --> 00:05:59.306
&gt;&gt; Does the reduced function
work like array reduce,

93
00:05:59.306 --> 00:06:02.603
where if you don't pass
a second parameter,

94
00:06:02.603 --> 00:06:07.135
it just uses the first and
second values together to combine?

95
00:06:07.135 --> 00:06:09.520
&gt;&gt; I think the first value goes through,
the first yeah and

96
00:06:09.520 --> 00:06:11.364
then the second value would be the, yeah.

97
00:06:11.364 --> 00:06:13.337
&gt;&gt; Yeah.

98
00:06:13.337 --> 00:06:16.549
&gt;&gt; And where reducing scan can be somewhat

99
00:06:16.549 --> 00:06:21.232
interesting is it's one thing
to total up some numbers.

100
00:06:21.232 --> 00:06:27.285
The other with scan, you think about
you have you can take an object, right?

101
00:06:27.285 --> 00:06:32.415
And then as things go along as
let's say actions, if you want

102
00:06:32.415 --> 00:06:38.564
to call them go through the stream,
you could take that object of state.

103
00:06:38.564 --> 00:06:43.093
You take the object that comes through and
figure out how you want to augment that

104
00:06:43.093 --> 00:06:46.621
object and effectively create
a Redux reducer out of the box.

105
00:06:46.621 --> 00:06:50.470
So this could be interesting verb if
our counter got more sophisticated and

106
00:06:50.470 --> 00:06:53.599
we're like, okay,
by what interval do we want to count up?

107
00:06:53.599 --> 00:06:58.327
How like by fives by twos by
ones what rate every second

108
00:06:58.327 --> 00:07:01.071
every five seconds up or down.

109
00:07:01.071 --> 00:07:05.982
What we could do is if you've ever used
any kind of like Redux flux like data

110
00:07:05.982 --> 00:07:10.910
store, you could theoretically use
scan as every action comes through.

111
00:07:10.910 --> 00:07:13.634
Manipulate the final
state along the way and

112
00:07:13.634 --> 00:07:18.416
you'll get every state transition right,
as you kind of go through as well so

113
00:07:18.416 --> 00:07:21.891
that's where this can become
somewhat useful as well.

114
00:07:21.891 --> 00:07:23.773
And what would that look like?

115
00:07:23.773 --> 00:07:28.061
Well, here we have a pipe and
we'd say scan.

116
00:07:28.061 --> 00:07:33.086
In scan we'd have the current state and
next like this one's not using like

117
00:07:33.086 --> 00:07:38.284
actions with payloads it's just kind
of augmenting the object in this case.

118
00:07:38.284 --> 00:07:42.391
And we could go ahead and do everything
that was in that last object, and

119
00:07:42.391 --> 00:07:45.417
just overwrite anything
that was in the next state.

120
00:07:48.258 --> 00:07:56.076
And we got to put that in parentheses
otherwise JavaScript gets very confused.

121
00:07:56.076 --> 00:08:02.710
And in this case, we again, we've
basically built a mini version of redox.

122
00:08:02.710 --> 00:08:09.393
Just using the scan operator and
passing through a series of values, right?

123
00:08:09.393 --> 00:08:11.665
You can you could call this action.

124
00:08:11.665 --> 00:08:12.382
It would work.

125
00:08:12.382 --> 00:08:15.618
You just have to do the stuff
you're normally doing reduce or

126
00:08:15.618 --> 00:08:18.224
if action type is whatever,
then do this state.

127
00:08:18.224 --> 00:08:20.722
But yeah, effectively,

128
00:08:20.722 --> 00:08:25.953
you can do a version of Redux
in just a few lines of code.

129
00:08:25.953 --> 00:08:28.622
So yeah, those are some of the basic
data transformation ones, right?

130
00:08:28.622 --> 00:08:32.935
Starting with simple and getting, you can
see how you might use this to kinda manage

131
00:08:32.935 --> 00:08:34.790
more complex things along the way.

