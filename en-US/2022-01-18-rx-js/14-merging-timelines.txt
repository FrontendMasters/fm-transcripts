[00:00:00]
>> So we're gonna talk a little bit about, we've dealt with like individual streams, we've even had some observables that will listen to others. But now we're talking about some strategies for kind of combining and merging multiple observables together. A really great example if you think about that counter that we had before.

[00:00:18]
Yeah, we had the interval eventually listen to the start and the stop button, but those are kind of just two sides of the same coin, right? It would be great if we could simply create a stream on whether or not we should be going or not. We have a version of that here.

[00:00:32]
This is kind of a quick tool that I built. We'll see how to build a simplified version in a little bit. But a quick tool that I built to kind of visualize a bunch of different observables together, right? And as we kind of merge them. But we're gonna build a little bit together before we use it, cuz right now these buttons don't do anything.

[00:00:54]
So, I'm gonna kinda get at least a start and the pause working. And this will be a little bit similar to what we eventually kind of, we've seen before and we'll take it forward as we go along here. Okay, so I've got the start and let's actually grab the pause button.

[00:01:16]
And they are each individual ones. Now what if I wanted to merge them together? And then, yeah, maybe start we want to be guess, you should be running, pause, no, you should not be running. That seems reasonable, right? So we could theoretically take each one and we could save dot pipe.

[00:01:38]
Map two or map this one to true. And we'll say dot pipe Map two and we'll map that one to false. And now I just want one stream of either the true values or the false values. So, let's make a new observable. And that's going to simply use a new kind of creator, we just have from event this one's called merge.

[00:02:10]
If you take a lucky guess what it does, it will merge two streams into one. So, we'll start with the start and the pause and we'll merge them together. And we'll even start with saying, and by default even before they click a button, let's just start with false.

[00:02:35]
So, we give it effectively like a default value even before anything gets emitted from either one of those events. Great. And we'll start with the simplest possible thing here, we'll say is running and we'll subscribe to it, console.log. All right, the really cool thing here is, you'll notice that we didn't have to subscribe to start and pause individually, but we were able to kind of merge them together.

[00:03:03]
And when we subscribe to the merged stream, we will effectively be subscribing to the child streams in this case. So, let's just verify that does what we think we we think it does. Starts out with false. It starts as true, false, true, great. Everything kind of works. At this point, instead of logging to the console, I have this set status which is gonna manipulate the DOM a little bit.

[00:03:34]
So, now you can see it starts, it was paused, it's running, it's paused, it's running, right? Cuz, it's based on what is happening in that case. So status is basically, we can look at it in the utilities but it's like if true show running in this div, if false show paused.

[00:03:54]
So, we kind of get that functionality out of the box for free. Now, that's merge, and there's a bunch of different ways that we might wanna to deal with merging to two timelines, right? So, what we're gonna kinda do is play around with visualizing this. You'll see, you can't really see him yet but there are three columns.

[00:04:14]
And so we're gonna take two different streams, we'll look at some of the different strategies for merging them. The first will be, what we call our first observable, the middle stream will be our second observable and the third one will be our combined observable in this case. So what happens when we merge them in two different formats.

[00:04:33]
We saw a merge, but you can imagine all it does is it takes any of the children of the main event, merge, shoots that event on through. Which is just combining two in the simplest most direct fashion. Have this little helper function called Bootstrap. And all that does, is under utilities I've got a little bit more complicated observable, we'll see simpler versions of it later that kind of just powers this whole exercise so we can visualize it.

[00:04:59]
So the only thing that I have to do at some point is pass the three observables to this bootstrap function, it is not an RXJS thing. It is simply to get this thing up and running. So, one of the things I want to do is just create three different streams.

[00:05:14]
I do have this helper called labelwith, labelwith is simply annotating it with the right class name. And the label, it's just basically doing so I can visualize things, it's not part of our xjs. I'm just mapping the value to, it's effectively a version of map two, but I also do the other things I need to make them look the correct colors.

[00:05:36]
So if we flip over and clear this out, you can see I can start it, it runs one, two, three and then it finishes, right? So these are three independent streams. But combined is capable of bigger and better things, combined should be the merge of these two, right?

[00:05:56]
So if we go ahead and we can kind of replace this, here we can say, okay, merge first And the second observable. So now combined is any event that comes through first, any event comes through second is now combined, merged into one observable stream. So, let's take a look here, we have three streams going still.

[00:06:23]
We've got first, which is the first one independent. Second, which is the second one independent and then combined which is both the first and the second one kind of merged into one stream. With merge, it should look basically like, the timer's are similar, so they could come in a little bit interweaved.

[00:06:40]
But basically anytime either one of them emits we should see it on the combined stream as well so let's go take a look at that. So we've got that, we actually only need to call this one merge, I don't need to label it. Awesome. So you can see the color coded correctly.

[00:07:07]
They're all kinda coming into one combined stream in this case. And that might be what you want, right? A lot of times that is what you want, like take these two things for our start or stop button, we don't, whenever one of them happens, pass it through to this combined stream.

[00:07:22]
And a lot of times that will solve for the issue that you want. But there are other strategies and we'll actually see some of these play out later. Where you might want to have a little bit more of an opinion on the order, right? So, you might wanna say, hey, I have these two streams, three streams, 10 streams, what have you, right?

[00:07:45]
I have these streams. What I wanna do is play through all of the first one, then play through the subsequent ones, right? And merge is not gonna do that for you, merges first come first serve, right? Whichever one admits it's into the merge stream. Concat is going to go ahead and say, cool I want to run through the first one to completion, it's one stream we'll do everything in the first stream.

[00:08:11]
We'll do everything in the second string so on and so forth, right? And you can do some interesting coordination with this which is like, okay, I want to do everything I need to show the loading page, right? Then I want to do everything I need, whatever is involved there, I don't care, I want to play through first scene, I want to do everything for the second scene, everything for the third scene.

[00:08:35]
So we can go ahead and we can just swap this one out for concat. And we'll see that this behaves slightly differently. Now, what I want you to notice is it doesn't matter when things get emitted from the second one, the combined stream won't even subscribe to it until it is done with the first one.

[00:08:56]
So you see there going, we don't get anything from the second stream until we finished everything on the first stream. And then we begin listening to the second one, right? So merge these two streams, but work on them in order. Take the first thing, finish it to completion.

[00:09:12]
Move to the second thing, finish it to completion so on and so forth. We've got another one called race, anyone have a lucky guess what race does?
>> [CROSSTALK]
>> Yep right, well emits first in this case, right? So it's kind of like promise dot race, promise dot race is like, listen here's a bunch of promises, whichever one of you resolves let's go for it.

[00:09:34]
Race is also similar, where it'd be like, cool, here's a whole bunch of observables, start with whichever one emits first. I don't care. So we'll swap that one out. And let's say that first we're gonna have it take 1500 milliseconds. So, if you can kind of see that the second one started first, and the first one could go on forever.

[00:10:07]
It doesn't care, the combined one only talks to winners, right? No, it doesn't talk to anyone comes in second place. And so as a way to say, okay, I have these two things going on whichever one emits first. One of the things we will see later is you want to show a loading indicator but maybe only after a certain amount of time, right?

[00:10:29]
So hey, two seconds for loading indicator. If the data comes back before two seconds, the data wins. If the data has not come back after two seconds, well then the loading indicator wins, right? Show the loading indicator, right? You still need to do something with the data and we'll figure out how to manage that all in a little bit.

[00:10:50]
And it could be, cool, show the loading indicator, then get the data, then take everything down, right? So this ability to merge things, but also sequence them and figure out the order of operations between them becomes incredibly powerful. Another one, you'll see sometimes it's just called fork join.

[00:11:08]
It's not the most glamorous name in the world. And, you can kind of see that's also deprecate in this case, but it is real common. So it passed the bar in this case. So what this one does is it waits for them all to finish and gives you an array of the last value of each.

[00:11:31]
So nothing in the Combine stream. They finish, I get the two last values from each other Is for them, right? Cool. So we have different ways to mix and match these. Now, where this becomes interesting is when we kind of put them inside of other observables, we can kind of get a little bit more powerful with that as well

