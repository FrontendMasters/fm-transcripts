[00:00:00]
>> Making streams, is fine and good, and we've done some stuff with those streams, we have manipulated the DOM predominantly. We've occasionally logged to the console. But as these events come through, the ability to do stuff with them, is I think where we start to find the power of arc JS.

[00:00:21]
So, really when we talk about operators, we're gonna talk about this, like as effectively a story in three parts, part one, we're just gonna talk about some of the basic like data manipulation operators, right? These are not dissimilar, from what you might be familiar with like in lodash, or even on the array prototype.

[00:00:41]
Harkens back to the very beginning of this, when I said, when I quoted from the arc JS documentation, that RX js is like lodash for events. Well, yeah, that also means that some of the methods like lodash has, are common for our shares as well. We'll start with these, a lot of them will seem somewhat familiar, at least intuitive, but what I want you to pay attention to, as we go through, is the syntax.

[00:01:06]
The syntax could be slightly different, than when you might be used to like on an array. On array, you can kinda chain the methods, as you go through. The concept is the same, but the syntax is gonna look slightly different. And for a very good reason they'll kind of explain along the way.

[00:01:24]
So we will kind of start with this kind of fibonacci sequence right here. Right, now this one as we kinda like the question we had earlier, was like this one will go on forever. So if you were to just subscribe to this, you would lock up the main thread, and bad things would happen right?

[00:01:43]
So, you would have to do something like this. You'd have to say, okay, cool, I wanna fibonacci sequence, of a certain number of iterations, and then stop, right? But, again, the promise of RxJS is that we can take these streams, and we can choose as the consumer, when we want to start, and when we wanna stop, right?

[00:02:03]
We don't need the interval at the time is defined to know when to stop counting. We'll stop counting when we say we're gonna stop counting. We kinda of like take that control in our own hands at this point. So, every observable on top of, everything else has this thing called a pipe method.

[00:02:23]
And a pipe method, takes one or more operators, right? And, those operators kind of run through one after the other. And, each one will manipulate the values that come through, and pass it along to the next one. So similar to method chaining, also similar to usually the pipe or chain, in lodash.

[00:02:45]
In a lot of like functional programming libraries, there is some version of this, where you can kind of just take a value and keep moving it along the way, manipulating it over time. Where our stress gets interesting with this, it's not only can you double a number, which is what we're gonna start with and stuff along those lines, but you could also say like, cool, I wanna like space these out over time.

[00:03:06]
Or, I want to only take every nth value, or like if the rage clicking on that button, wait until they chill out a little bit, and then we'll go respond with requests in a reasonable fashion, before we slam our own API, right? And all of those kinda things, giving us the ability to kind of control the flow.

[00:03:26]
So we'll start with some of the basic kind of just operators for manipulating the data. Eventually, we are going to move into some of the ones, where we kind of manipulate time a little bit, and have rules based on, kind of the time space continuum or what we wanna do.

[00:03:41]
And finally, we'll look at some of the ones that allow us to kind of take multiple streams and kind of, combine and control them as we go along. So, we'll start to play around with this in a second. But, if we look, we have this one called take, right?

[00:03:58]
And take was solve, that initial problem that we had earlier, right? Where, we had an infinite generator, that was gonna spit out values forever, right? It can still be its infinite self. We're just basically saying, I'm gonna take 10 values from you. I'm gonna unsubscribe, right? [LAUGH] After that, we're done here, I'm going home, right?

[00:04:22]
And so, you can now you don't have to have all that logic in the generator itself. But you can, have it in whatever is consuming it, can choose how many values it wants, and you kind of begin to manipulate so on and so forth. Cool, the other one its friend is skip.

[00:04:40]
Skip will skip the first number of values, this one is dangerous or fibonacci sequence, because is infinite, so you gotta be careful. We have other ones like take while, and skip while, which will very much act like a filter function. Where they'll go through and, they will take all the values, up until you hit 200, or skip, for a while and then take four, so we don't have the infinite problem, and you can see we can chain them.

[00:05:03]
Where it becomes a little bit different, is, we'll look at a pop quiz in a second, the slide is a little bit bigger, so I'm gonna look at the syntax here. Is instead of method chaining right, you kind of pass them all in as individual functions, right? And even if it doesn't take any arguments, you still call it as a function, that's mostly to keep the syntax and the kind of API contract the same.

[00:05:28]
The reason for this is, by breaking all the operators out into their own functions. Then you can import one at a time, you can use tree shaking in your bundling tools right?
>> Is this is pipe then and arcs function it will take in repertory many does that, or is it one of those weird like FP functions.

[00:05:49]
Cuz it has like a definition for one input and two and three and four, where you max out eventually.
>> I haven't looked at the types to see where this ends, like the the JavaScript implementation of itself, the JavaScript implementation of it. Like well allow for an arguments whether, if anyone's who's tried to like type a function that takes an unknown amount of arguments, has seen that the types of usually just more and more types, right?

[00:06:17]
And if you're using this with TypeScript, each one like If you return a different value, the next one has to be able to receive it, right? So, you start out with that initial value in this case from the fibonacci sequence it would be a number, right? If you map it into a string, and then you try to do a number thing with it, TypeScript will get very angry with you.

[00:06:39]
And TypeScript will assume, when you subscribe, you're getting whatever the last thing out of that pipe was. But, the actual type definition, my gut says, I've been I've looked at lodashes. Where it is simply, here's the type with one argument. Here's two, here's three, here's four.
>> It goes from one to nine.

[00:06:56]
So you can put up to nine
>> You can put up to nine before TypeScript gives up on you. But the JavaScript implementation, you should be able to have effectively an infinite number. I think the only color I'll add to that question is nine in a row, like past that, like just probably recently stopped at nine, right?

[00:07:16]
That's to say you won't have things where you then you have child observables, so on and so forth. But like after nine, you can probably you can also break stuff out into functions, you have lots of options. All right, so a pop quiz, this will never admit. Does anyone know why?

[00:07:33]

>> There's no consumer,
>> We've got constant log consuming it, [LAUGH] catalogs going at it right down there. Effectively in this case, we will skip value.
>> We're not mapping to any, we're not materializing any of the values, we're just filtering them.
>> We're filtering into a situation with northingmakes it live.

[00:07:48]

>> Yeah.
>> All right, we're skipping values, that are under 100, and we're only taking values like, but because it's a pipe you like both of those things like there are numbers between 101 and 499 all right? But only, yeah basically nothing will make it out into the next one, right?

[00:08:08]
So you have to be very careful that you pipe every value past the next one. Now instead of rules that all run in parallel, it's each stage, right? Only lets a certain number of values through. Cool, all right, there are over 100 operators, some of them are deprecated, some of them are just variations on the theme, we're not going to talk about all 100 of them.

[00:08:33]
We're gonna talk a little bit of some of the common ones, and some of them I will just sprinkle in, as we are building things, right? But we can see some of them as we go through. So we've got, that filter. Filter does, exactly what it does with arrays, it filters them based on the function.

[00:08:57]
So in this case only even numbers will be allowed through. Map, who doesn't love a good map? Possibly, midway through this workshop, you'll hate map, for reasons that we will talk about later. Some people who have a little experience of smiling and nodding, the rest of you we'll arrive at that station together.

[00:09:17]
Map we'll go through the values, and do some transformation to them. This works great for regular values, I will just kinda give a little bit of a spoiler. It becomes problematic, when I heard you like observables, so I put observables in your observables. And that's where we're gonna have to deal with some of that, but we're not totally there yet.

[00:09:39]
It's got a little cousin called Map two, which just maps it to a value. Map two basically as effectively if you took whatever value wasn't returned the same string no matter what.
>> Map two.
>> Cool reduce, there's two that are kind of similar right, reduce and scan.

[00:10:02]
I wanna point out the difference between the two of them, we'll look at scan next. Reduce will basically be like an array reduce, very much so where you will only get the final value when it's all done, right? So, it works through all the numbers in this case it's totaling them up.

[00:10:18]
It will add them all in place, and then give you the final value. Scan, will actually give you every time it runs that reduce function, it will emit the value and pass it through, right? So if you want every kind of piece as you go through, every value is omitted you'll get it all on the way reduce will only give you the final result.

[00:10:42]
So, the reason that I point this out is, scan is usually what you want, but your brain a lot of times because of arrays we'll think about reduce. So I'm like stopping for a minute and pausing to be like now you probably want scan, even if you're thinking reduce in this case.

[00:11:01]
Scan can theoretically, you can take an infinite range. You can scan through it, but then you take four, so on and so forth. One final one, which is everyone's best friend is tap. We said before, pipe, one value to the next value, so on and so forth, right?

[00:11:23]
Tap allows you to kinda have a side effect for a second, and return the same value you received. Why is this useful? Because if you don't have tap, here's what you're gonna do, you're gonna map where you console log the value, and then return the same value again.

[00:11:39]
You don't need to live like that, you can just use tap, and you can console log the value. It's also useful for side effects that you wanna do because again, you will the or subscribe, will only get that final thing that comes out. It will not get any of the intermediary values, right?

[00:11:55]
Yep.
>> Am I understanding correctly that top is essentially convenience function where it takes in a value, operates on it and returns that same value on
>> Yeah.
>> Yeah.
>> Exactly, it's like i wanna do other stuff but i don't actually wanna change this value in any way, shape, or form, keep it going through.

[00:12:12]
I just want to, again, console logging alone is worth taps, weight and gold even though it's gold and doesn't have a weight in gold. But yeah tap is useful for, I want to do something a side effect of some sort, great because this pipe is in functional programming like it's a set of pure functions.

[00:12:31]
Tap allows you to have a side effect, that could be console logging, it could be manipulating the DOM. It could be anything all you need to do that's not gonna be the final value, can happen in a tap

