[00:00:00]
>> So we think about this what we wanna do is we need to start racing some things right? We wanna race the different like whether or not we should show the loading indicator, when the data came back? Did we show a loading indicator for long enough? These are various things that we need to figure out and coordinate between.

[00:00:23]
Our code has a little bit of a problem here as well, which is we are getting these values at initialization. So I haven't adjusted to many of the numbers yet, but these should probably be moved in as well. So we'll go ahead or grab this and We'll pop this in here is the same.

[00:00:51]
Passable but not good version that we had before, right again, sure, it doesn't flash a loading indicator real fast, but also it delays things. We can do better. So, we could theoretically get our data and what we need to do is we wanna race between whether or not we should show the loading.

[00:01:19]
And whether or not they all race between whether I wish to show the loading and whether the data came back, right? And so let's get our data into a variable over here so we can play around with a little bit more. So then we'll call this data So now we've got the kind of 3 pieces that we need to deal with here.

[00:01:50]
So first of all, whether or not we should show the loading should probably be a race between the data and the loading, whichever happens first. Should be good to go. So let's call this one I don't know. Load like the idea of whether or not you're loading That's a good point.

[00:02:24]
Go theoretically work but we can do better Marks in charge naming things we'll do with that in a second, we got show loading and the data right whichever one of these emits first should theoretically win. All right, so okay, one of these should happen, and then we'll do the next one and then the last one.

[00:02:56]
Now, we'll have a little bit of a problem. I'm here we'll deal with that. We fetch. Let's see res should show loading or data. Yeah, we want the API to be faster at this point. So we'll say show loading after 2 seconds. But our API should go back after one second.

[00:03:16]
Refresh that. So API construction one second. In 2 seconds. So we got our data back and we still showed it. So we got to deal with that in a second, all right. Let's see what we got here. So we've got our data, we're going and like fetching the data a second time which feels weird, so we'll have to handle that as well, hide loading.

[00:03:46]
You could actually make this a timer. We're gonna say that hide loading,is only fire after whatever we're looking for. Right, so this one will delay and then do the thing, this one will fire after a certain amount of time. So we've got both of these in place. Should we show the loading?

[00:04:16]
Really, we should show it. We wanna then we want to hide it depending like whichever one happens first. So we wanna window here. Here of should we show should we hide? And then what should we do in this case? See what we got here. This still isn't working right, we're fetching.

[00:04:44]
I was also our initial values. Let's go ahead and say, show the letter. Yeah, cool. Well, this turned into true I mean, let's see 29 show loading. We're fetching a second time.
>> Do you wanna remove the data from your concat census in the race?
>> Yes. Well, this could be slightly problematic because also what happens if show loading wins?

[00:05:21]

>> We never fetch?
>> Yeah. So like, we would basically just deal with it. Even if this happened, we'd fetch, but we'd never hear about it, right? So let's see. So we've got our ability to fetch the data, scroll up a little bit. We've got we had the ability to show the loading faster data than hide it, right?

[00:05:48]
Now we could race the two of them, right? The show loading and the should show loading, right? And that's kind of what we should do. First, we show the data then we hide it. It still problematic. Next what we could do is figure out how to say like.

[00:06:03]
Hey, do your point. I want this data one way or the other, right? Cuz we know from earlier when we were learning that every subscription will fire off another request. Right, but I both wanna race the loading indicator with the data. But then if I grab on to that data later and you have it, I still want it, right.

[00:06:26]
So I would like to be able to subscribe multiple times. So that fetch of data so I can hopefully race them together a little bit better. And there are a few different operators that help us with this, right. One of the questions I got earlier were hot versus cold observables, a cold one is your normal observable.

[00:06:47]
Every subscription gets a new version fetch data will do a from interval or from fetch rather and go get it and give it back to us. In our case, we could either use, share or share replay. Share is basically now a hot observable and so everyone that gets it gets the same copy of the user observable.

[00:07:06]
Share replay does kind of what the name says on the 10.It's shareable, but it will also give you some number of values. In the past, right this way, if it is already completed and we had that data, we missed it. Give me cuz this thing really only shows that data, so give me what it had as its data at the time.

[00:07:27]
And so I show up late to the party, I can have that as well. So let's try that out. I don't know why he making a typo. So we'll do share replay. One can share. You might have missed some of the previous transmissions, but you'll hear for all new things share replay.

[00:07:47]
As will also give you a stream of the last any number of values that were omitted that you might have missed cool. So we've got the data fetch data we're gonna be able to share that between different observables. Whether or not we should show the loading we will delay, so for up, that's part of my issue where we want to show after.

[00:08:13]
All right, so we'll have a value that we're gonna delay, and then we're gonna show the loading indicator. So they were set both by taking it down and showing it at the same time, all right. So we've got this show loading, which is gonna delay and then now at the correct amount of time, show our value.

[00:08:38]
High loading, it's just a timer that's set to do the thing, but then probably we need to actually, we really wanna grab the first event off of there. So we'll pipe it.
>> We need to show loading false will never hide.
>> Where's that?
>> Don't need to.

[00:08:59]

>> Well, this is when we wanna show it. We're saying we're gonna show it we're gonna wait until a certain number of milliseconds. Then we're gonna show it, hide loading is gonna be the one that takes it down cuz two things, right need to figure out whether or not we should hide the loading, right?

[00:09:13]
If it has been long enough and the data comes back, we don't need to go for a victory lap for another 500 milliseconds, right. We showed it we didn't flash in front of them it is only if the data came back so fast, test that it would flash, then we need to deal with that.

[00:09:30]
So highlighted we're basically a timer. It's like, loading indicating went up. We're timing the loading being there. We will make sure the loading was there for a certain amount of time. If that time has passed and we're not gonna flash anything. Soon as the data comes back, take it down, right.

[00:09:44]
So basically, high loading really just cares about when we started showing the the loading. And really, we only want the first as we saw before. Cool and I keep it in semi-colons in there. So show loading, take an event, delay it, show it when you need to show.

[00:10:02]
I just could I could pass the value through to if I wanted to. So I could say, now we have a timer that's gonna go off, right that we want to start after we show the loading, right so immediately, start at fire the event. For showing the loading, that's still gonna delay after that we are going to fire whether enough time has passed to take it down.

[00:10:31]
And then also the data can pass if it's happened, so basically what to play through through the events in order to show that, show the loading that's gonna still delay. Its of it's gonna fire, but then it's gonna wait before it does that tap. So fires immediately second thing, it happens.

[00:10:48]
It's gonna delay. Its gonna tap. It's gonna show the, that's the first one. After that, we're showing the loading, set a timer for how long things should happen before it takes down. Then we'll have data actually clean it up. So you'll notice the high loading isn't actually do it.

[00:11:03]
It's like you could even call this. Time to hide the loading. Right, so should show the loading which will then actually race these two. So loading actually should show loading changes a little bit, because we wanna race this whole process with the data itself. So here we're gonna say basically what I just said in words, immediately start the process of delaying yourself a little bit of time before you show the loading.

[00:11:44]
So we'll say that then, soon if you have shown the loading indicator at all if that has ever happened, right, set a timer to take it down However, don't take it down unless you have some data, right? [LAUGH]. Don't tell me we're done loading if you're not done loading, so then the third thing is.

[00:12:18]
Is to take that data, And that's when we'll pull down the loading indicator. Right, this is just handling whether or not we should show loading at all data dollar sign. That whole process of spinning up tiny when you should take it down, should race with the data. Cuz if the data comes back before we show, I don't care about any of this, right?

[00:12:50]
It's only if this first event triggers. Then I want to show the loading indicator. I'm gonna keep it up for as long as it's supposed to be kept up. And then when the data finally comes back in, I wanna take it down, right. So this will be roughly the delta between when we decided to show it and however long we said it should be up.

[00:13:11]
If you can get away without showing it, please do. But if you're gonna show it, set another timer for the bare minimum it should be up. And then when the data comes back, take it down, the data comes back in that window. We're still gonna leave it up there.

[00:13:22]
We can deal with the data simultaneously as well. So now should show loading and the data itself All right, so we're gonna say that the API takes, will show this but show the loading indicator for at least 5 seconds. So the little ridiculous button so loading goes up the data is received it comes back it takes it down.

[00:14:03]
Now 5 seconds is ridiculous we shouldn't show that what happens if the API request comes back in 500 milliseconds, all right, let's just console clear. So this case we're back no loading indicator. Right, we didn't show it at all. This one we're gonna have the API response come back like JavaScript timers are weird, let's give ourselves like 200 milliseconds of wiggle room there, right.

[00:14:35]
Because it could still be slightly off with a fake timer we'll show it. But again, we'll keep it. All right, if you're gonna show it, the data is back, but we're still showing it for a little bit. Now, 500 milliseconds is again for dramatic effect. But again, you'd probably find that to be maybe like, I feel like 300 is the threshold for like not seeming ridiculous.

[00:14:57]
Now even that was you adjust it right 300 even seemed a bit much. Yeah, so you can play with the numbers a little bit but yeah it this is the tricky part of kind of pulling together a lot of these concepts. Like why would you wanna concatenate stuff because again we threw a event into the future showing the loading soon as we show the load.

[00:15:17]
And then we set a timer for the bare minimum take it down and then if we have the data, if not keep waiting for the data and take down the loading. But if the data comes back before any of this it wins forget this ignore this forget all this complicated logic we don't wanna deal with it, right?

[00:15:34]
And that's where you can start to play with the time race different pieces of the timeline against each other. Be able to orchestrate and coordinate different things in different scenarios, so on and so forth, right? And so what our excess seeks to do for us is it seeks to give us kind of the tools for kind of playing with all of these things.

[00:15:52]
That might happen over time to figure out which one happens first, how to coordinate them. What order do we wanna merge them all in? Do we wanna switch between another one? Do we wanna finish what we started before we do the next thing, right. what are all the different things that we want to kind of compile and play around with, right?

[00:16:07]
But a lot of the pieces from the very simple like turning things into observable with foreign have to do bouncing things. To switching between API's to putting things in a given order or figuring out which one ends up first. These small fundamental pieces can become kind of the bigger like core of how you build the more complicated things.

[00:16:28]
Because the trick part is like you'd have to squint at this code and read through it totally right but it's not a lot of code, right. The tricky part is the actual like logic of like okay, so when do I wanna show this thing. And when do I wanna take it down right and that's unfortunately a complicated problem JavaScript aside, right?

[00:16:46]
It's just our job as software engineers is to effectively like work through all of these weird contingencies and edge cases. And sometimes it gets a little squirrely, but ideally, when it comes time to sit down and start figuring out the code. And like we could probably break this out into like some smaller methods and stuff along those lines.

[00:17:04]
And annotated a little bit better, but to begin to figure out those things. And I think that without a decent abstraction for dealing with things that happen over time. You'd be setting a whole bunch of weird variables that you'd try to keep in state, right? Okay, now I'm gonna set this one to true, and then I'm gonna set date now plus the amount of interval.

[00:17:27]
And then when this thing comes back I'm gonna say if data now is greater than, I'm already frustrated, just, I can't even write. And so to give ourselves tools. We kind of, managing all these things. Again, it's all JavaScript under the hood, right? But to can give us abstractions for handling, all of those things as well.

