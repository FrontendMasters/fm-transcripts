WEBVTT

1
00:00:00.080 --> 00:00:01.642
It's time for us to do the autocomplete.

2
00:00:01.642 --> 00:00:03.334
We're gonna make it happen.

3
00:00:03.334 --> 00:00:08.757
And I think at this point, we've learned
enough of the little pieces along the way.

4
00:00:08.757 --> 00:00:14.153
That is going to be less
painful than we all imagined.

5
00:00:14.153 --> 00:00:18.089
Because we have walked down this
road together, and here we are.

6
00:00:18.089 --> 00:00:22.636
So, if I just look quickly at this UI,
that's not it.

7
00:00:22.636 --> 00:00:27.394
I look quickly at this UI,
it's got a search field.

8
00:00:27.394 --> 00:00:30.874
There is a fetch button, in case I
wanted to fetch them by hand manually.

9
00:00:30.874 --> 00:00:33.194
We're gonna say, as they type in here,

10
00:00:33.194 --> 00:00:36.279
I want to show at least some
of the names onto the page.

11
00:00:36.279 --> 00:00:37.607
Well, we'll use a button later.

12
00:00:37.607 --> 00:00:43.219
Cool, so
the thing about what we need to do.

13
00:00:43.219 --> 00:00:51.094
Well, we know that we need to get
the value of the input, right?

14
00:00:51.094 --> 00:00:54.138
We've dealt a lot with buttons, but
we are gonna need an input field and

15
00:00:54.138 --> 00:00:55.632
a value that we're working with.

16
00:00:55.632 --> 00:00:59.392
So let's go ahead, and
that's not nothing super surprising here.

17
00:00:59.392 --> 00:01:04.684
We'll say that our search
stream is from the event

18
00:01:04.684 --> 00:01:10.612
of that search field,
which I've got cached already.

19
00:01:10.612 --> 00:01:14.480
And really,
we care about input at this point.

20
00:01:14.480 --> 00:01:19.007
Right, whenever they put new input in
there, that's when we want to jump in and

21
00:01:19.007 --> 00:01:19.827
deal with it.

22
00:01:19.827 --> 00:01:25.051
But as with most things, like vary use
like a framework namely react, you

23
00:01:25.051 --> 00:01:31.304
know that it's not just the event that you
need, it's the event target value, right?

24
00:01:31.304 --> 00:01:34.201
So, what's in this search
field that we really need?

25
00:01:34.201 --> 00:01:37.289
So we can actually grab map at that
point cuz this is not an observable.

26
00:01:37.289 --> 00:01:39.733
It's not anything asynchronous,
simply a value.

27
00:01:39.733 --> 00:01:48.608
We'll go ahead, and
we'll grab the event Target value, right?

28
00:01:48.608 --> 00:01:51.760
So now, whenever there's input,
we haven't subscribed to it yet.

29
00:01:51.760 --> 00:01:55.298
But we'll get it, and
we'll get the value of that.

30
00:01:55.298 --> 00:01:59.742
Well, input is a little, yeah, we'll get
the value of the input field itself.

31
00:01:59.742 --> 00:02:01.898
Input will be whenever they
change a letter in it, or

32
00:02:01.898 --> 00:02:03.173
something along those lines.

33
00:02:03.173 --> 00:02:10.088
Cool, and we have two choices here.

34
00:02:10.088 --> 00:02:13.080
I can put a merge map in here,
or I can use a different map.

35
00:02:13.080 --> 00:02:15.374
What kind of map do we want to merge?

36
00:02:15.374 --> 00:02:17.042
Because we're gonna have
to make a fetch from here.

37
00:02:18.545 --> 00:02:19.284
Let's try marshmallow.

38
00:02:19.284 --> 00:02:20.203
Let's do it.

39
00:02:20.203 --> 00:02:21.462
Let's learn together.

40
00:02:21.462 --> 00:02:23.342
Map, we'll take the search term.

41
00:02:23.342 --> 00:02:25.819
Because we know we want to make a fetch.

42
00:02:25.819 --> 00:02:31.897
And from here, we'll say we'll

43
00:02:31.897 --> 00:02:37.984
return from fetch our endpoint.

44
00:02:37.984 --> 00:02:42.851
And this is, I happen to know that
the endpoint is, if you look.

45
00:02:42.851 --> 00:02:45.411
Surely, we wanna change
this one a little bit.

46
00:02:45.411 --> 00:02:50.099
Cuz we're gonna put that delay on the end.

47
00:02:56.256 --> 00:02:57.765
[SOUND] Maybe, we spell search right.

48
00:02:59.783 --> 00:03:02.872
Sweet, I think the endpoint
in there was more helpful.

49
00:03:02.872 --> 00:03:08.500
But we've got this search, where I should
be able to do API pokemons search pika.

50
00:03:08.500 --> 00:03:11.482
Let's just verify that real quick
before I get too far ahead of myself.

51
00:03:15.063 --> 00:03:16.150
Yep, there's Pikachu.

52
00:03:16.150 --> 00:03:18.326
And we don't get a lot
of data about Pikachu.

53
00:03:18.326 --> 00:03:20.096
We'll learn more about Pikachu later.

54
00:03:20.096 --> 00:03:23.650
Right now, all we know is his
number 25 and the pokey dex.

55
00:03:23.650 --> 00:03:26.050
His name is Pikachu, and
he's a mouse pokemon.

56
00:03:26.050 --> 00:03:29.494
So we can search from fetch.

57
00:03:29.494 --> 00:03:32.993
And then,
we'll say + whatever the search term was.

58
00:03:36.278 --> 00:03:41.080
Right, that's gonna be
a little bit problematic,

59
00:03:41.080 --> 00:03:44.581
so we also need to go ahead and get the.

60
00:03:44.581 --> 00:03:45.963
It's not problematic,

61
00:03:45.963 --> 00:03:49.332
it's just that we know that we
need the response cuz of that.

62
00:03:49.332 --> 00:03:52.124
So, we say pipe, so
another merge map in there.

63
00:03:52.124 --> 00:03:56.588
And we will say that we

64
00:03:56.588 --> 00:04:01.056
want to do response.

65
00:04:03.806 --> 00:04:05.076
Response to JSON, right?

66
00:04:05.076 --> 00:04:06.297
We know that.

67
00:04:06.297 --> 00:04:11.134
And when that's all done,
when we've got everything,

68
00:04:11.134 --> 00:04:14.575
we will clear the results from the page.

69
00:04:17.452 --> 00:04:18.093
We'll add.

70
00:04:21.978 --> 00:04:23.413
I want to actually just.

71
00:04:23.413 --> 00:04:29.180
So if you looked at the API before,
I want to actually just get the array so.

72
00:04:29.180 --> 00:04:30.220
There's an operator.

73
00:04:30.220 --> 00:04:31.520
Another, I could use map.

74
00:04:31.520 --> 00:04:35.938
The other thing I could use is pluck.

75
00:04:35.938 --> 00:04:39.478
And pluck,
you might have seen it from lodash,

76
00:04:39.478 --> 00:04:42.143
pluck will just grab a given field.

77
00:04:42.143 --> 00:04:45.330
So in this case, we want pluck to do
a little bit data manipulation here.

78
00:04:47.812 --> 00:04:49.764
So we just want that array in there.

79
00:04:49.764 --> 00:04:53.461
And then, we'll add results.

80
00:04:53.461 --> 00:04:57.576
And then,
we'll subscribe to that search event.

81
00:04:57.576 --> 00:05:00.605
Now, I could do the add results
in the subscribe as well.

82
00:05:00.605 --> 00:05:02.225
I'm just kind of showing you can do both.

83
00:05:07.104 --> 00:05:07.730
All right, great.

84
00:05:07.730 --> 00:05:11.838
This is not gonna work perfectly.

85
00:05:11.838 --> 00:05:13.008
We know that.

86
00:05:13.008 --> 00:05:15.290
Some of you are like, why isn't he?

87
00:05:15.290 --> 00:05:16.990
I'm not, we're not doing that yet.

88
00:05:16.990 --> 00:05:19.770
We're gonna see how it behaves,
first and foremost.

89
00:05:19.770 --> 00:05:22.149
Let's make sure it doesn't
blow up at all first.

90
00:05:25.210 --> 00:05:28.237
So, it works great in a very
fine situation, right?

91
00:05:33.638 --> 00:05:39.483
But what happens if we add just
a little bit of chaos energy here?

92
00:05:39.483 --> 00:05:46.439
All right, what happens when we
say delay could be like a second.

93
00:05:49.458 --> 00:05:51.530
Little, with a little
bit of fuzziness to it.

94
00:05:54.637 --> 00:05:58.039
All right, and we'll say,
actually Bulbasaur.

95
00:05:58.039 --> 00:05:59.378
No, actually Charmander.

96
00:06:01.864 --> 00:06:03.441
And sometimes it works out.

97
00:06:03.441 --> 00:06:05.909
But you can see that it's kind
of all over the place, right?

98
00:06:05.909 --> 00:06:08.123
Other requests that we're
doing even had pika, and

99
00:06:08.123 --> 00:06:09.695
there was a pidgey on there, right?

100
00:06:09.695 --> 00:06:12.230
Because the requests are coming
back at the wrong time.

101
00:06:12.230 --> 00:06:15.698
We don't care about the previous requests,
what should we do?

102
00:06:15.698 --> 00:06:17.022
&gt;&gt; Switch map.

103
00:06:17.022 --> 00:06:17.771
&gt;&gt; Switch map.

104
00:06:17.771 --> 00:06:21.934
And the one thing that I wanna show you.

105
00:06:23.746 --> 00:06:25.150
That's kinda nice from using from fetch.

106
00:06:25.150 --> 00:06:27.790
If we go in here,
we've got our network requests.

107
00:06:29.670 --> 00:06:32.220
You can actually see that from fetch,

108
00:06:32.220 --> 00:06:36.130
it's actually full on canceling
those requests for you.

109
00:06:36.130 --> 00:06:40.173
So every time we use a switch map, and
we've unsubscribed from that observable,

110
00:06:40.173 --> 00:06:43.280
not only are we not
listening to the response.

111
00:06:43.280 --> 00:06:46.190
We're also just full on
canceling that request.

112
00:06:46.190 --> 00:06:50.940
Now, what would we do to just kinda tie
in some previous things all together?

113
00:06:50.940 --> 00:06:54.826
What would we do if we wanted to wait
a little bit of time before we even sent

114
00:06:54.826 --> 00:06:55.666
that request?

115
00:06:55.666 --> 00:06:57.615
&gt;&gt; Debounce.

116
00:06:57.615 --> 00:07:00.433
&gt;&gt; Debounce,
this is probably debounce time, right?

117
00:07:03.615 --> 00:07:04.632
Do I have that imported already?

118
00:07:04.632 --> 00:07:06.688
Debounce time.

119
00:07:06.688 --> 00:07:11.052
Okay, so here we could say
when an input event happens.

120
00:07:14.906 --> 00:07:15.688
We'll debounce time.

121
00:07:15.688 --> 00:07:17.792
Let's say like 300 milliseconds.

122
00:07:17.792 --> 00:07:21.411
So now, instead of like,
we can cancel those requests.

123
00:07:21.411 --> 00:07:22.180
They're still going out though.

124
00:07:22.180 --> 00:07:23.730
The server doesn't know
that they're canceled.

125
00:07:23.730 --> 00:07:27.370
The browser knows, server doesn't.

126
00:07:27.370 --> 00:07:30.250
So we now, we can say, okay,
only when they pause, right?

127
00:07:30.250 --> 00:07:33.288
Kind of pulling in what we saw before,
when we implemented that notification.

128
00:07:33.288 --> 00:07:38.164
When they chill out for
about 300 milliseconds, then will.

129
00:07:38.164 --> 00:07:39.758
And you can do this, the order really.

130
00:07:39.758 --> 00:07:41.871
And then, we'll go file the request.

131
00:07:41.871 --> 00:07:45.675
So now, if we take a look at the network
panel down here, we can go like.

132
00:07:48.402 --> 00:07:52.350
Nothing, until we stop typing for what
felt like a reasonable amount of time.

133
00:07:52.350 --> 00:07:55.330
So now, we don't thrash through
canceling all those requests.

134
00:07:55.330 --> 00:08:00.530
We can simply say,
only do this while things are happening.

135
00:08:00.530 --> 00:08:03.719
The other thing that we can do, and
this won't actually do anything,

136
00:08:03.719 --> 00:08:05.785
I'm just kind of,
I just wanna point it out.

137
00:08:05.785 --> 00:08:10.873
Is we have this operate called distinct
until changed, which basically won't.

138
00:08:10.873 --> 00:08:15.120
If it's the same value as it was
last time, don't do anything, right?

139
00:08:15.120 --> 00:08:19.440
Now, between our switch map, and the fact
that input fields only admit when they've

140
00:08:19.440 --> 00:08:21.800
changed, doesn't really do a lot for us.

141
00:08:21.800 --> 00:08:23.920
But, I kind of just want to
make you aware that it exists.

142
00:08:23.920 --> 00:08:27.440
So we'll get that value.

143
00:08:27.440 --> 00:08:29.830
We'll say distinct until changed.

144
00:08:29.830 --> 00:08:31.736
And so now, even if.

145
00:08:36.474 --> 00:08:37.959
We really want that on the endpoint,
though.

146
00:08:37.959 --> 00:08:39.964
That worked, but
that's not where I meant to put it.

147
00:08:39.964 --> 00:08:45.622
It'll work either way, but
it was a string concatenated.

148
00:08:45.622 --> 00:08:50.496
So, if it's the same value like debounce,
if for some reason you get to that.

149
00:08:50.496 --> 00:08:52.660
I mean, this could actually,
theoretically, work.

150
00:08:52.660 --> 00:08:54.519
Cuz the input field is gonna change.

151
00:08:54.519 --> 00:08:58.679
But, even after 300 milliseconds,
if it's the same value as last time,

152
00:08:58.679 --> 00:09:00.350
don't send another request.

153
00:09:01.590 --> 00:09:05.990
Right, so now, we are really trying to
treat the backend team nicely here.

154
00:09:05.990 --> 00:09:09.877
Right, so chill out F until they
stopped for 300 milliseconds.

155
00:09:09.877 --> 00:09:11.829
Then, go get the value
of that input field.

156
00:09:11.829 --> 00:09:15.359
If it's the same thing it was last time,
we don't need different results.

157
00:09:15.359 --> 00:09:16.883
This isn't changing, right?

158
00:09:16.883 --> 00:09:22.143
Otherwise, go with the most
recent request that we received.

159
00:09:22.143 --> 00:09:25.649
Forget all the other ones, and
then we'll show it onto the page.

160
00:09:27.160 --> 00:09:32.750
And effectively, that's
an autocomplete in our ext js, right?

161
00:09:32.750 --> 00:09:37.175
Now, I just want to, again,
talk about, if we started with that,

162
00:09:37.175 --> 00:09:38.660
you might have cried.

163
00:09:39.750 --> 00:09:43.036
But as you build up all the small pieces,
right?

164
00:09:43.036 --> 00:09:45.794
All these things,
that we've kind of done over the way,

165
00:09:45.794 --> 00:09:47.524
kind of all begin to snap together.

166
00:09:47.524 --> 00:09:51.549
And become one kind of solid
workflow in this case.

167
00:09:54.645 --> 00:09:58.744
If I just wanted to show the name here,
I could also, theoretically, map over it.

168
00:09:58.744 --> 00:10:01.134
Pull out just a given property,
and so on and so forth.

