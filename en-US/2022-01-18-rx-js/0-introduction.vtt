WEBVTT

1
00:00:01.025 --> 00:00:04.116
Hello, welcome to RxJS fundamentals.

2
00:00:04.116 --> 00:00:11.526
This is an intro course on how to use
RxJS to solve some common problems.

3
00:00:11.526 --> 00:00:17.785
With that there is one, no expectation
that you've used RxJS before, sounds good.

4
00:00:17.785 --> 00:00:19.855
We're also gonna be completely
framework agnostic.

5
00:00:19.855 --> 00:00:23.155
I know that lot of times RxJS is
associated with angular these days, but

6
00:00:23.155 --> 00:00:24.535
you can use it with anything.

7
00:00:24.535 --> 00:00:26.785
I've used it with React and Redux before.

8
00:00:26.785 --> 00:00:31.210
I use it today the svelte
app that I work on.

9
00:00:31.210 --> 00:00:34.007
It is at the end of
the day just JavaScript so

10
00:00:34.007 --> 00:00:37.980
we're gonna play with it
agnostic of any framework.

11
00:00:37.980 --> 00:00:40.930
And again,
we're gonna start from the very basics.

12
00:00:40.930 --> 00:00:45.996
And kind of build up an understanding.

13
00:00:45.996 --> 00:00:47.378
Cuz in my experience there's
a lot of great content on RxJS.

14
00:00:47.378 --> 00:00:48.728
But a lot of times it's like,

15
00:00:48.728 --> 00:00:51.974
let's go into some conceptual
understanding of marble diagrams, and

16
00:00:51.974 --> 00:00:55.980
then all of a sudden it escalates quickly
until there's seven nested observables.

17
00:00:55.980 --> 00:00:58.680
And you're like I wanna cry.

18
00:00:58.680 --> 00:01:03.168
So we're taking things very slowly, we're
gonna build up from each piece as we get

19
00:01:03.168 --> 00:01:06.129
to some more sophisticated
examples towards the end.

20
00:01:06.129 --> 00:01:10.427
So we will kind of play around
with some basic unit tests,

21
00:01:10.427 --> 00:01:15.193
you understand how some of
the fundamental parts of RxJS work.

22
00:01:15.193 --> 00:01:19.195
Will start building some very kind of
simple interactions in some applications.

23
00:01:19.195 --> 00:01:23.615
And it will solve some of the kind of
common UX issues that come up that RxJS is

24
00:01:23.615 --> 00:01:26.185
just really well suited to handle.

25
00:01:26.185 --> 00:01:30.087
For a lot in a lot of cases,
you don't necessarily need to use RxJS for

26
00:01:30.087 --> 00:01:30.905
everything.

27
00:01:30.905 --> 00:01:33.625
So part of this is understanding
where a simple promise will do.

28
00:01:34.630 --> 00:01:39.007
And where you might end up in a situation
where things are getting a little

29
00:01:39.007 --> 00:01:39.810
squirrely.

30
00:01:39.810 --> 00:01:42.138
At the end of the day,
anything you can do in RxJS,

31
00:01:42.138 --> 00:01:46.580
you can do in regular JavaScript because
our stress is built in regular JavaScript.

32
00:01:46.580 --> 00:01:50.438
The big question is should you, right.

33
00:01:50.438 --> 00:01:54.900
Enough of these things where you
start reinventing the wheel and

34
00:01:54.900 --> 00:02:00.530
throwing global variables or even module
scoped global variables everywhere.

35
00:02:00.530 --> 00:02:03.070
And then eventually you and
your team developed a deep resentment for

36
00:02:03.070 --> 00:02:05.730
you, which I'm going to try
to save you from during this.

37
00:02:05.730 --> 00:02:06.693
So let's just talk,

38
00:02:06.693 --> 00:02:09.910
we're not going to do a whole lot of
the kind of conceptual theory here.

39
00:02:09.910 --> 00:02:13.473
I want to start getting our
hands dirty very, very quickly.

40
00:02:13.473 --> 00:02:17.850
But let's do just at least a high level
understanding of what's going on,

41
00:02:17.850 --> 00:02:18.691
what is RxJS?

42
00:02:18.691 --> 00:02:23.338
What did you just sign up for,
what are we going to be talking about for

43
00:02:23.338 --> 00:02:24.790
the next little bit?

44
00:02:24.790 --> 00:02:29.630
So the I saw this quote from
the RxJS documentation,

45
00:02:29.630 --> 00:02:33.813
you can think of RxJS like lodash for
events.

46
00:02:33.813 --> 00:02:37.367
In lodash we have a lot of helper
functions for dealing with arrays and

47
00:02:37.367 --> 00:02:41.228
objects and all the stuff that just
comes with JavaScript not really having

48
00:02:41.228 --> 00:02:44.160
a standard library that have to speak of,
right?

49
00:02:44.160 --> 00:02:47.010
So lodash gives us a bunch
of utility functions.

50
00:02:47.010 --> 00:02:48.670
Yes, you could write them yourselves.

51
00:02:48.670 --> 00:02:52.054
But a lot of times if you want them
kind of tweaked for performance,

52
00:02:52.054 --> 00:02:56.120
everything along those lines using
a battle tested library makes sense.

53
00:02:56.120 --> 00:03:00.810
RxJS is basically dealing with that,
but things that happen over time.

54
00:03:00.810 --> 00:03:02.808
And you're like, okay, like what?

55
00:03:02.808 --> 00:03:07.652
Well, if you think about it, the way
that our applications work is, we send

56
00:03:07.652 --> 00:03:12.815
the code to the browser, we send some HTML
loads of some CSS and some JavaScript.

57
00:03:12.815 --> 00:03:16.330
We render an initial page that,
the traditional web page, right?

58
00:03:16.330 --> 00:03:19.259
And then really everything that
happens after that, right,

59
00:03:19.259 --> 00:03:23.520
after as soon as we load up that HTML
page and run through the initial scripts.

60
00:03:23.520 --> 00:03:27.260
The event loop kind of just sits there and
waits for stuff to happen, right?

61
00:03:27.260 --> 00:03:31.922
And all that stuff that can happen is
an area where there is a chance that RxJS

62
00:03:31.922 --> 00:03:37.060
might be helpful depending on what kind
of problem you are trying to solve.

63
00:03:37.060 --> 00:03:38.995
Right, things are gonna happen over time,

64
00:03:38.995 --> 00:03:42.670
arrays give you a collection of things all
at once, you can work through the array.

65
00:03:42.670 --> 00:03:44.770
You can map over it, you can filter it.

66
00:03:44.770 --> 00:03:48.532
But if those values come in over time,
maybe through a series of click events,

67
00:03:48.532 --> 00:03:51.830
maybe through a timer,
maze with an API requests, right?

68
00:03:51.830 --> 00:03:55.819
Yeah, you can load it into an array,
recheck the array, or you can just kind of

69
00:03:55.819 --> 00:03:59.506
think about things as streams of events
happening in our application and

70
00:03:59.506 --> 00:04:01.150
write code around that as we go.

71
00:04:02.520 --> 00:04:06.902
So, there is an abstraction for
asynchronous values that is now in

72
00:04:06.902 --> 00:04:12.750
the Ekman script standard, and it's
called promises and promises are great.

73
00:04:12.750 --> 00:04:14.425
I love promises, they're wonderful.

74
00:04:14.425 --> 00:04:16.325
The problem with promises and

75
00:04:16.325 --> 00:04:21.040
this is not really a problem with them
it's just what they promised to do.

76
00:04:21.040 --> 00:04:25.795
Is that they resolve to one eventual
value, right, and so you have a promise of

77
00:04:25.795 --> 00:04:30.480
this one API request or
one thing that happens it becomes a value.

78
00:04:30.480 --> 00:04:34.680
Now imagine programming without arrays or
objects, right?

79
00:04:34.680 --> 00:04:38.708
It's up a series of like go to statements,
you could figure it out, it'd be great.

80
00:04:38.708 --> 00:04:41.560
But the idea of having this
idea of a collection, right?

81
00:04:41.560 --> 00:04:45.256
The way you can think of
a promise as one eventual value,

82
00:04:45.256 --> 00:04:50.210
I think a really good mental model that
could be helpful is thinking about,

83
00:04:50.210 --> 00:04:54.320
effectively an observable as
an array of eventual values.

84
00:04:54.320 --> 00:04:57.769
So promises are one just like
a primitive like a number, a string, or

85
00:04:57.769 --> 00:05:00.750
even a JavaScript object is one object.

86
00:05:00.750 --> 00:05:02.580
And an array can be a set of them.

87
00:05:02.580 --> 00:05:05.170
A promise is good for
one value that could also be an array.

88
00:05:05.170 --> 00:05:10.130
In this case, an observable is things that
are going to happen kind of over time.

89
00:05:10.130 --> 00:05:12.890
So let's talk a little bit about
what some of those things might be.

90
00:05:14.300 --> 00:05:16.090
We have API's, right?

91
00:05:16.090 --> 00:05:22.270
And yes, you set a promise, you go get
the JSON or what have you from an API?

92
00:05:22.270 --> 00:05:25.576
Great, but there's a whole bunch of like
edge cases like do you want to refresh

93
00:05:25.576 --> 00:05:27.290
stuff along those lines?

94
00:05:27.290 --> 00:05:30.700
So promises are great for a happy path.

95
00:05:30.700 --> 00:05:34.494
You even have a catch in the case
that it doesn't work out, but,

96
00:05:34.494 --> 00:05:37.250
if you want to retry
a certain number of times?

97
00:05:37.250 --> 00:05:41.770
Okay, well yeah you could do like
keep a value somewhere in scope and

98
00:05:41.770 --> 00:05:46.468
this try to iterate it and then write
an if statement so on and so forth.

99
00:05:46.468 --> 00:05:49.797
You can see how this things
start to get a little squirrely.

100
00:05:49.797 --> 00:05:52.901
What happens if you want to reload
the data at a regular rate, okay,

101
00:05:52.901 --> 00:05:56.384
now you can do a set interval, and you
can aspire to clean up that interval and

102
00:05:56.384 --> 00:05:57.790
help you get it right.

103
00:05:57.790 --> 00:06:01.240
But you're also matching that with now
the retry thing that we just talked about.

104
00:06:02.460 --> 00:06:05.750
What happens is you want to iterate
across a paginated API, right?

105
00:06:05.750 --> 00:06:08.830
A lot of times as front end engineer,
it's like the reason that I'm employable.

106
00:06:08.830 --> 00:06:11.770
Is because for
a lot of the UI that we want to build,

107
00:06:11.770 --> 00:06:13.730
the API's don't support that.

108
00:06:13.730 --> 00:06:18.183
So I have to do a bunch of Rube Goldberg
machines in order to kind of

109
00:06:18.183 --> 00:06:19.590
get the UI in place.

110
00:06:19.590 --> 00:06:22.680
So if we need to start iterating
recursively, then yes, you could do that.

111
00:06:22.680 --> 00:06:24.450
But could you do that with retries?

112
00:06:24.450 --> 00:06:27.080
Could you do that with
a regular refresh interval?

113
00:06:27.080 --> 00:06:29.824
Starting to pull all these pieces
together like any one thing,

114
00:06:29.824 --> 00:06:31.670
maybe not that complicated.

115
00:06:31.670 --> 00:06:34.695
Pulling it all together requires
a better abstraction so

116
00:06:34.695 --> 00:06:37.160
that we don't get lost
in our own complexity.

117
00:06:38.500 --> 00:06:40.710
So observables can help with all of this.

118
00:06:40.710 --> 00:06:47.928
This is the other part, I used to work
at a company that I will not name.

119
00:06:47.928 --> 00:06:51.158
But we had this idea of a user, right and,
you need to know the current user to

120
00:06:51.158 --> 00:06:53.900
figure out what you can show on
the page that seems fine, right.

121
00:06:53.900 --> 00:06:57.947
And there was an API for
getting the current user, however if yeah,

122
00:06:57.947 --> 00:07:02.562
if you wanted to know whether it was
a regular account or a sub account, well,

123
00:07:02.562 --> 00:07:03.921
that was another API.

124
00:07:03.921 --> 00:07:06.458
Did you want to know if it was part
of a team or an individual account?

125
00:07:06.458 --> 00:07:07.024
That was another API?

126
00:07:07.024 --> 00:07:11.170
Did you want to know if the freemium,
free or premium account?

127
00:07:11.170 --> 00:07:13.595
Well, that was another API.

128
00:07:13.595 --> 00:07:16.381
So in order to figure out what to show
on the page, we had to send out this

129
00:07:16.381 --> 00:07:19.900
battalion of API requests and
try to orchestrate it all at once.

130
00:07:19.900 --> 00:07:24.097
And so we have a lot of situations where
to show a given piece of UI maybe you have

131
00:07:24.097 --> 00:07:27.600
a list index that only gives you
the IDs of the things that match.

132
00:07:27.600 --> 00:07:30.148
If you want to figure out more
data you have to go hit each one

133
00:07:30.148 --> 00:07:31.925
of those individually API's, right?

134
00:07:31.925 --> 00:07:35.494
Coordinating all that stuff can
be somewhat complicated and so

135
00:07:35.494 --> 00:07:38.197
observables seek to help us with that,
right.

136
00:07:38.197 --> 00:07:41.522
And to help us deal with the common error
path and just give us a effectively.

137
00:07:41.522 --> 00:07:45.207
RxJS is not a framework but
if we think about like a scaffolding or

138
00:07:45.207 --> 00:07:48.759
a framework for dealing with
the complexity of orchestrating

139
00:07:48.759 --> 00:07:52.710
multiple things that could
happen asynchronously.

140
00:07:52.710 --> 00:07:55.095
So observables can help with this as well,

141
00:07:55.095 --> 00:07:59.480
then there's all sorts of just little
like UX quality of life things, right?

142
00:07:59.480 --> 00:08:03.909
It's usually good to like show a loading
indicator, all right, and that's fine but

143
00:08:03.909 --> 00:08:06.630
how soon do you show
the loading indicator, right?

144
00:08:06.630 --> 00:08:09.320
Cuz the first time I implement
that this is what happens,

145
00:08:09.320 --> 00:08:11.330
is the API ends up being fast.

146
00:08:11.330 --> 00:08:14.447
And then I showed the loading indicator,

147
00:08:14.447 --> 00:08:18.730
it flashes for a hot minute and
then it vanishes, right.

148
00:08:18.730 --> 00:08:19.590
And so how do you time it?

149
00:08:19.590 --> 00:08:22.863
Okay, I only want to show the loading
indicator in one situation,

150
00:08:22.863 --> 00:08:26.440
if it takes a certain amount of time
show the loading indicator, right?

151
00:08:26.440 --> 00:08:33.728
But what if the API request comes back
right after I show the loading indicator?

152
00:08:33.728 --> 00:08:38.263
Well, even if the API has failed,
I might want to still show

153
00:08:38.263 --> 00:08:43.163
the loading indicator for
long enough time that's not visually

154
00:08:43.163 --> 00:08:48.082
distracting to the user,
even if we're done loading, right.

155
00:08:48.082 --> 00:08:50.891
These are the issues of dealing with
events that happen over time and

156
00:08:50.891 --> 00:08:53.857
coordinating all of these things that
are excess seeks to help us with.

157
00:08:53.857 --> 00:08:54.989
There's all sorts of little other things
like dragging and dropping, right?

158
00:08:54.989 --> 00:08:57.452
You have the like if you
think about that problem.

159
00:08:57.452 --> 00:09:03.168
You end up, all right, so on mouse down on
the element that we want to click, cool.

160
00:09:03.168 --> 00:09:06.770
Then I want to set up an event
listener that is listening for

161
00:09:06.770 --> 00:09:11.270
mouse movements until they release and
we have a mouse up event, right.

162
00:09:11.270 --> 00:09:15.479
And then we also have the issue of
were they're dragging might have other

163
00:09:15.479 --> 00:09:17.420
implications in our UI, right?

164
00:09:17.420 --> 00:09:20.241
If it is a hover state where they
can drop it in that given area,

165
00:09:20.241 --> 00:09:22.050
we might wanna show different things.

166
00:09:22.050 --> 00:09:24.113
So reacting to all those things and

167
00:09:24.113 --> 00:09:29.220
setting up all those different movement
events can be super helpful as well.

168
00:09:29.220 --> 00:09:30.600
So that's the pitch.

169
00:09:30.600 --> 00:09:33.640
That is hopefully I've sold you on
spending some time together learning this.

