[00:00:00]
>> The kind of last of the many different kinds of use cases that we've been just chatting about, over the course of our time together. Which is like, just how hard it is to show a loading indicator when you think about the edge cases. Right if it's your first loading indicator, yeah, I show the loading indicator and then I take it down right, it's one of those things where it's like a fast API is almost the bane of your existence when it comes to implementing a loading indicator.

[00:00:30]
Right, because what you don't want is like a flash of sadness ,right, where especially cuz the thing I work on the portal now is we have two versions. And we have a cloud version and we have a open source version you run locally on your machine. We tell you about network latency when it's running on your machine, real fast.

[00:00:50]
Lemme tell you it's the same UI for both, right, and so kind of dealing with the idea that you could have, a normal API. And then a lightning fast API creates a certain number of problems. So, what we're gonna try to do here is, we're going to kind of create a fake API response that we can kind of control, via this number of milliseconds.

[00:01:16]
We will choose when we want to show a loading indicator cuz again, if it's back real fast, we don't immediately show one that immediately take it down. Right, that's the first edge case so you want to deal with the loading indicator. The second one is, by solving for, I only want to show the loading indicator if things have been loading for a second.

[00:01:35]
You introduce a new problem, which is you've just moved your problem forward in time. Which is what happens if you show the loading indicator after a thousand milliseconds, and the data comes back 1,001 milliseconds, right? You're back to your flash of sadness, sometimes what we should do in this case is we lie, we lie to our users.

[00:01:57]
We say it's still loading just simply so that we don't flash things and make them uncomfortable. With maybe we'll keep it up for what seems just a little bit, we can start loading the data if you want, but don't just flash and take it down, be gentle with it.

[00:02:15]
So we have the ability for how long has your take, how long we wanna wait until we show a loading indicator. And how long that loading indicator should be up for, right? And again, a lot of this is based on the feeling, basically for these values, you tend to adjust them until everyone is happy.

[00:02:35]
But yeah, there's no hard and fast rule, but I'm also not a designer. So, we've got the three fields. We've got whether or not we should show a loading indicator, we've got the form itself, and we've got this little fake fetch data which I'll show you real quick.

[00:02:59]
It looks at the response time, it logs that it's fetching, it waits however long our fake API request is supposed to wait. And then it just looks a console it's done, and then it completes, right ,there's no actual data to show in this case I could also like map it to some fake data.

[00:03:20]
If I really wanted to but this is basically it simulates something that takes however long we have in that top input field, show loading, takes the bull lane, shows you this really neat loading indicator or nothing at all. And we're basically in this case, making sure we don't accidentally submit the form, and then we've got some cached pieces.

[00:03:48]
All right, so let's start with just the simplest version of this, just to make sure everything works as we expect. So we'll say loading, we'll say that is from the event, when they form, submit. And when that happens, pipe it, will tap. Showloading is true, just verify that everything works as expected, put a semicolon in there, which should have been a comma.

[00:04:24]
And we'll say loading.subscribe. I tend to like to do the DOM manipulation in the tap, because then like, I'm not all the things that happen are like contained in there. It's not like cool, everything happens you're putting it there taken down but then the last thing happens subscribe, I don't wanna deal with that.

[00:04:44]
So, we'll say subscribe and now this should when I hit the button. Let's see. Here we go, shows loading indicator and this also logs that we're loading, so now what we wanna do is, show it, load our data, take it down, right? That's the kind of next obvious thing to do here, so we'll show it.

[00:05:17]
And then in this case, because I was robbed of using an exhaust map in the last example, I'm gonna use my exhaust map. Mostly because like this is also a fake situation where they slam on that button let's see what the time, so let's let's start a new one over again.

[00:05:35]
Why someone would slam on a button in this case, I don't know, but we'll do that. So we'll see an exhaust map, where we will return, fetching the data, I could probably do that in line as well, but we're gonna play around with it a little bit. So, we'll show the data, we'll show the loading, will fetch our data, and then we will take down our loading indicator, right?

[00:06:01]
Again, this is the naÃ¯ve version for now, and we'll deal with all the edge cases shortly. All right so then, show loading, false, okay, this should do the thing. Fetching for five seconds, and that takes it down, that works for the happy path, right, when your requests all take five sec, I can't believe I just called that the happy path.

[00:06:33]
When your API's all take at least five, listen, we've all worked API so take 30 seconds, don't act like you haven't. But, even sometimes what I would do for an API that took five seconds, even though it's suboptimal. Okay, that's cool, but what if we wanna delay that we talked about delay in that loading indicator a little bit.

[00:06:57]
And, so what would that look like in this case? Well, there's a few ways that we could do it, we could create like an observable. And sometimes if I just wanna delay something and tap, I could timer it, I'm just gonna create one real quick, and then pipe it.

[00:07:23]
I could even, yeah, would complete at that point, let's not deviate right now, will delay it for whatever show loadings value is. And then we will tap. So this one will get it and it will basically delay for that amount of time and then it will show it.

[00:08:01]
So what would this look like? Well, now what we could do is in this exhaust map, what we could say is, Contact my show loading, and then we'll go fetch the data. Now, what do you think the problem is here? We're basically show the loading after a second and then we're gonna go fetch the data, right?

[00:08:37]
So this is building towards the answers to our problems, but it's not there just yet. So wait a second. Cuz then we immediately, take that off for a second. We could do is, concat it. Well let's make a high loading. But this is not gonna work as we expect, we'll talk about that in a second I mean it was good work as we expect, it's not gonna work.

[00:09:32]
So, we wanna do is get Nate show it, fetch the data hide it. These are delayed, so we're gonna need to do is figure out the different situations that we need to deal with okay. What happens if the data comes back before we even show the loading indicator, right?

[00:09:49]
We're gonna need to time some of these, and let's do a spoiler alert. Do we have a operator that sees which one of these things does the thing first brace, right? So that will ultimately be a thing that we look at, but let's see it in its not great state first.

[00:10:11]
Shows up every second we fetch, That is back, and we have to call that false.
>> And then I think that on the show loading needs to be true.
>> Yep, I was talking and typing at the same time, and swap those the wrong way.
>> Cool.
>> Shows it, fetches, gets the data back, takes it down, like not terrible, but the idea that we even delayed for a second before fetching the data.

[00:10:45]
That's one way to lie to your users. We try to lie gently we don't tell egregious lies that hinder performance, we're just trying to protect them.

