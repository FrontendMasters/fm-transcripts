[00:00:00]
>> It's time for us to do the autocomplete. We're gonna make it happen. And I think at this point, we've learned enough of the little pieces along the way. That is going to be less painful than we all imagined. Because we have walked down this road together, and here we are.

[00:00:18]
So, if I just look quickly at this UI, that's not it. I look quickly at this UI, it's got a search field. There is a fetch button, in case I wanted to fetch them by hand manually. We're gonna say, as they type in here, I want to show at least some of the names onto the page.

[00:00:36]
Well, we'll use a button later. Cool, so the thing about what we need to do. Well, we know that we need to get the value of the input, right? We've dealt a lot with buttons, but we are gonna need an input field and a value that we're working with.

[00:00:55]
So let's go ahead, and that's not nothing super surprising here. We'll say that our search stream is from the event of that search field, which I've got cached already. And really, we care about input at this point. Right, whenever they put new input in there, that's when we want to jump in and deal with it.

[00:01:19]
But as with most things, like vary use like a framework namely react, you know that it's not just the event that you need, it's the event target value, right? So, what's in this search field that we really need? So we can actually grab map at that point cuz this is not an observable.

[00:01:37]
It's not anything asynchronous, simply a value. We'll go ahead, and we'll grab the event Target value, right? So now, whenever there's input, we haven't subscribed to it yet. But we'll get it, and we'll get the value of that. Well, input is a little, yeah, we'll get the value of the input field itself.

[00:01:59]
Input will be whenever they change a letter in it, or something along those lines. Cool, and we have two choices here. I can put a merge map in here, or I can use a different map. What kind of map do we want to merge? Because we're gonna have to make a fetch from here.

[00:02:18]
Let's try marshmallow. Let's do it. Let's learn together. Map, we'll take the search term. Because we know we want to make a fetch. And from here, we'll say we'll return from fetch our endpoint. And this is, I happen to know that the endpoint is, if you look. Surely, we wanna change this one a little bit.

[00:02:45]
Cuz we're gonna put that delay on the end. [SOUND] Maybe, we spell search right. Sweet, I think the endpoint in there was more helpful. But we've got this search, where I should be able to do API pokemons search pika. Let's just verify that real quick before I get too far ahead of myself.

[00:03:15]
Yep, there's Pikachu. And we don't get a lot of data about Pikachu. We'll learn more about Pikachu later. Right now, all we know is his number 25 and the pokey dex. His name is Pikachu, and he's a mouse pokemon. So we can search from fetch. And then, we'll say + whatever the search term was.

[00:03:36]
Right, that's gonna be a little bit problematic, so we also need to go ahead and get the. It's not problematic, it's just that we know that we need the response cuz of that. So, we say pipe, so another merge map in there. And we will say that we want to do response.

[00:04:03]
Response to JSON, right? We know that. And when that's all done, when we've got everything, we will clear the results from the page. We'll add. I want to actually just. So if you looked at the API before, I want to actually just get the array so. There's an operator.

[00:04:30]
Another, I could use map. The other thing I could use is pluck. And pluck, you might have seen it from lodash, pluck will just grab a given field. So in this case, we want pluck to do a little bit data manipulation here. So we just want that array in there.

[00:04:49]
And then, we'll add results. And then, we'll subscribe to that search event. Now, I could do the add results in the subscribe as well. I'm just kind of showing you can do both. All right, great. This is not gonna work perfectly. We know that. Some of you are like, why isn't he?

[00:05:15]
I'm not, we're not doing that yet. We're gonna see how it behaves, first and foremost. Let's make sure it doesn't blow up at all first. So, it works great in a very fine situation, right? But what happens if we add just a little bit of chaos energy here?

[00:05:39]
All right, what happens when we say delay could be like a second. Little, with a little bit of fuzziness to it. All right, and we'll say, actually Bulbasaur. No, actually Charmander. And sometimes it works out. But you can see that it's kind of all over the place, right?

[00:06:05]
Other requests that we're doing even had pika, and there was a pidgey on there, right? Because the requests are coming back at the wrong time. We don't care about the previous requests, what should we do?
>> Switch map.
>> Switch map. And the one thing that I wanna show you.

[00:06:23]
That's kinda nice from using from fetch. If we go in here, we've got our network requests. You can actually see that from fetch, it's actually full on canceling those requests for you. So every time we use a switch map, and we've unsubscribed from that observable, not only are we not listening to the response.

[00:06:43]
We're also just full on canceling that request. Now, what would we do to just kinda tie in some previous things all together? What would we do if we wanted to wait a little bit of time before we even sent that request?
>> Debounce.
>> Debounce, this is probably debounce time, right?

[00:07:03]
Do I have that imported already? Debounce time. Okay, so here we could say when an input event happens. We'll debounce time. Let's say like 300 milliseconds. So now, instead of like, we can cancel those requests. They're still going out though. The server doesn't know that they're canceled. The browser knows, server doesn't.

[00:07:27]
So we now, we can say, okay, only when they pause, right? Kind of pulling in what we saw before, when we implemented that notification. When they chill out for about 300 milliseconds, then will. And you can do this, the order really. And then, we'll go file the request.

[00:07:41]
So now, if we take a look at the network panel down here, we can go like. Nothing, until we stop typing for what felt like a reasonable amount of time. So now, we don't thrash through canceling all those requests. We can simply say, only do this while things are happening.

[00:08:00]
The other thing that we can do, and this won't actually do anything, I'm just kind of, I just wanna point it out. Is we have this operate called distinct until changed, which basically won't. If it's the same value as it was last time, don't do anything, right? Now, between our switch map, and the fact that input fields only admit when they've changed, doesn't really do a lot for us.

[00:08:21]
But, I kind of just want to make you aware that it exists. So we'll get that value. We'll say distinct until changed. And so now, even if. We really want that on the endpoint, though. That worked, but that's not where I meant to put it. It'll work either way, but it was a string concatenated.

[00:08:45]
So, if it's the same value like debounce, if for some reason you get to that. I mean, this could actually, theoretically, work. Cuz the input field is gonna change. But, even after 300 milliseconds, if it's the same value as last time, don't send another request. Right, so now, we are really trying to treat the backend team nicely here.

[00:09:05]
Right, so chill out F until they stopped for 300 milliseconds. Then, go get the value of that input field. If it's the same thing it was last time, we don't need different results. This isn't changing, right? Otherwise, go with the most recent request that we received. Forget all the other ones, and then we'll show it onto the page.

[00:09:27]
And effectively, that's an autocomplete in our ext js, right? Now, I just want to, again, talk about, if we started with that, you might have cried. But as you build up all the small pieces, right? All these things, that we've kind of done over the way, kind of all begin to snap together.

[00:09:47]
And become one kind of solid workflow in this case. If I just wanted to show the name here, I could also, theoretically, map over it. Pull out just a given property, and so on and so forth.

