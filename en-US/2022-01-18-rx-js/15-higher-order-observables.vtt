WEBVTT

1
00:00:00.780 --> 00:00:03.079
So we're talking a little
bit about higher,

2
00:00:03.079 --> 00:00:05.970
was called kind of higher
order observables.

3
00:00:05.970 --> 00:00:10.730
Higher order observables are if you think
about higher order components in react or

4
00:00:10.730 --> 00:00:12.566
name your framework of choice,

5
00:00:12.566 --> 00:00:16.390
it is simply a component that
renders another component.

6
00:00:16.390 --> 00:00:24.400
And in most programming everything is easy
until you get to the point where you are,

7
00:00:24.400 --> 00:00:29.620
when you're like mapping over an array,
fine.

8
00:00:29.620 --> 00:00:31.210
I can do that, anyone can do that.

9
00:00:31.210 --> 00:00:33.540
Iterate over an array,
what happens that array contains an array.

10
00:00:35.232 --> 00:00:38.439
Well, now you've got to
recursively go into that array,

11
00:00:38.439 --> 00:00:41.790
do everything in that array,
so on and so forth, right?

12
00:00:41.790 --> 00:00:46.600
And so you can either use recursion and,
for instance JavaScript these days, right?

13
00:00:46.600 --> 00:00:52.930
Has a built in like flat map, the idea of
like take this multi dimensional array and

14
00:00:52.930 --> 00:00:56.691
just make it one regular
array of all the values,

15
00:00:56.691 --> 00:01:01.647
that is also super useful in terms
of working with observables,

16
00:01:01.647 --> 00:01:05.700
right, okay, they have clicked, great.

17
00:01:05.700 --> 00:01:09.510
But that click maybe what you
wanna map it into a promise.

18
00:01:10.890 --> 00:01:14.535
Well, a promise in this case will
also become an observable, so

19
00:01:14.535 --> 00:01:19.140
now you've got an observable floating
down your observable stream, right?

20
00:01:19.140 --> 00:01:23.450
What really, you don't want the observable
in that case, you want the value, Mark.

21
00:01:23.450 --> 00:01:27.165
&gt;&gt; Some of these operators be used to
implement an undo operation in case

22
00:01:27.165 --> 00:01:30.330
an optimistic UI update should roll back.

23
00:01:30.330 --> 00:01:31.170
&gt;&gt; I mean, you could, right?

24
00:01:31.170 --> 00:01:35.550
Like if you think about scan, you can
take care of all of the state, right?

25
00:01:35.550 --> 00:01:39.140
There's also, you have the ability
to kind of replay in some cases.

26
00:01:39.140 --> 00:01:43.014
I think with scan is probably
the best way to do it, right?

27
00:01:43.014 --> 00:01:47.622
Because for a lot of these, we'll see the
ability to like switch between pieces, but

28
00:01:47.622 --> 00:01:52.038
keeping track of that state and taking the
different events that kind of go through

29
00:01:52.038 --> 00:01:56.136
and be able to manage all that will let
you kind of adjust that as you go along.

30
00:01:56.136 --> 00:02:00.283
So, with most things
everything is easy until you

31
00:02:00.283 --> 00:02:03.930
have things that appear in other things.

32
00:02:03.930 --> 00:02:07.530
So for instance,
this would be problematic.

33
00:02:07.530 --> 00:02:10.853
Remember when we had that original
delay in the notification,

34
00:02:10.853 --> 00:02:15.065
we slammed on a bunch of times and we
waited 2 seconds and then we got all them.

35
00:02:15.065 --> 00:02:20.286
Right, if you want it to theoretically
have a observable that then

36
00:02:20.286 --> 00:02:25.600
we'll use have to then delay it
a certain number of milliseconds.

37
00:02:25.600 --> 00:02:28.680
Well, now you have an observable
in your observable.

38
00:02:28.680 --> 00:02:31.760
And so you'll get is when
you subscribe to example,

39
00:02:31.760 --> 00:02:36.320
you're gonna get an observable,
cuz that's what you return from your map.

40
00:02:37.750 --> 00:02:43.591
Right, is that what you wanted, [LAUGH]
yeah, sometimes we don't get what we want,

41
00:02:43.591 --> 00:02:47.127
we get what JavaScript tells
us we get we like it, so

42
00:02:47.127 --> 00:02:52.260
that's what we'll get in this case and
like a more common example is.

43
00:02:52.260 --> 00:02:55.008
The button got clicked or
here was a string, or

44
00:02:55.008 --> 00:02:59.420
here was an array of things I want to
use from fetch to get observables.

45
00:02:59.420 --> 00:03:06.320
Again, now I have a stream of
observables that have a stream.

46
00:03:06.320 --> 00:03:10.599
What I really wanna do if I can take
two observables from the top level and

47
00:03:10.599 --> 00:03:15.377
merge them together, I should be able to
take observables in my observables and

48
00:03:15.377 --> 00:03:19.971
flatten them into the main observable
like the sacred timeline if you will.

49
00:03:19.971 --> 00:03:23.789
And merge my timelines into the main
timeline in this case, and if you're

50
00:03:23.789 --> 00:03:28.300
thinking I should be able to do that, good
news, good, you're thinking correctly.

51
00:03:30.300 --> 00:03:35.256
So one strategy for doing this,
there's an operator called merge all, so

52
00:03:35.256 --> 00:03:39.741
merge all will basically take all
of the kind of child observables in

53
00:03:39.741 --> 00:03:44.462
your stream and merge them together
just like when we merge the first and

54
00:03:44.462 --> 00:03:47.240
the second observables before, right?

55
00:03:48.620 --> 00:03:55.490
Now, this is common enough that there's
also a fun helper called merge map.

56
00:03:55.490 --> 00:03:56.850
You wanna take a lucky
guess what that does.

57
00:03:57.920 --> 00:03:59.113
&gt;&gt; Are these maps together?

58
00:03:59.113 --> 00:04:01.040
&gt;&gt; Yeah, it's like flat map, right?

59
00:04:01.040 --> 00:04:04.050
It maps and
then it merges them all together.

60
00:04:04.050 --> 00:04:08.551
So a lot of times, you will see that
happen way more frequently than you will

61
00:04:08.551 --> 00:04:09.770
map and then merge.

62
00:04:09.770 --> 00:04:14.058
You'll usually just merge map and
save yourself a whole,

63
00:04:14.058 --> 00:04:19.135
I guess 9 characters, 10 characters
of code, I guess the comma so

64
00:04:19.135 --> 00:04:24.663
11 characters of code, you can merge
map and you can do it all in one pass.

65
00:04:24.663 --> 00:04:29.143
And a lot of the rules that we saw
before apply as well for concat, so

66
00:04:29.143 --> 00:04:33.863
concat will do the same thing,
it will do what concat did previously,

67
00:04:33.863 --> 00:04:36.310
you'll map over all these items.

68
00:04:36.310 --> 00:04:39.797
There'll become nested observables,
plays with the first one,

69
00:04:39.797 --> 00:04:43.790
then play through the second one,
then play through the third one, right?

70
00:04:43.790 --> 00:04:45.400
Or so on and so forth, right?

71
00:04:45.400 --> 00:04:48.852
It all depends like the unique
problem that you're trying to solve,

72
00:04:48.852 --> 00:04:51.720
if you don't have opinions,
merge is your best choice.

73
00:04:51.720 --> 00:04:56.335
You're like, whatever, someone admitted,
I wanna deal with that value, but there

74
00:04:56.335 --> 00:05:00.701
are times where you want to coordinate
an orchestrate the different asynchronous

75
00:05:00.701 --> 00:05:04.580
events and that's where concat and
two other fun ones are gonna show up.

76
00:05:05.880 --> 00:05:10.844
So the more useful ones even,
merge map super useful concat map,

77
00:05:10.844 --> 00:05:16.260
sometimes useful, like when you need
it in particular, switch map and

78
00:05:16.260 --> 00:05:21.080
exhaust map are like cousins
of the bounce and throttle.

79
00:05:21.080 --> 00:05:27.570
Right, and they kind of again,
they work the opposite of each other.

80
00:05:27.570 --> 00:05:32.250
Switch maps says, drop whatever you're
doing, something else has admitted.

81
00:05:32.250 --> 00:05:34.750
I don't even care what
I was doing previously.

82
00:05:34.750 --> 00:05:37.770
Forget it,
I don't wanna know anymore, right?

83
00:05:37.770 --> 00:05:38.710
I wanna do the new thing.

84
00:05:40.990 --> 00:05:43.800
Exhaust map is a little more stressed out.

85
00:05:43.800 --> 00:05:49.130
It's like, I'm very busy doing this thing,
not doing other things.

86
00:05:49.130 --> 00:05:50.510
I'm done with this thing.

87
00:05:50.510 --> 00:05:54.750
And then, if anything else is
there to be done, I will go do it.

88
00:05:54.750 --> 00:06:00.007
The interesting part is, like very similar
to debounce and throttle, switch map

89
00:06:00.007 --> 00:06:05.207
will simply cancel, stop no more, it'll
move on to the new hotness everytime.

90
00:06:05.207 --> 00:06:09.860
Exhaust map will just ignore
things until it's done, right?

91
00:06:09.860 --> 00:06:13.867
When it's done, that if something else
wants to emit, it'll switch over to that

92
00:06:13.867 --> 00:06:17.500
one, but it will finish what it did,
what has done previously.

93
00:06:17.500 --> 00:06:20.390
Now we've talked a little bit about
autocomplete along the way here.

94
00:06:20.390 --> 00:06:25.185
So for instance, like, cool, maybe they
stopped typing for 300 milliseconds or

95
00:06:25.185 --> 00:06:27.170
debounce time has fired.

96
00:06:27.170 --> 00:06:28.489
We're ready to make another request.

97
00:06:29.490 --> 00:06:33.860
I don't care that you're halfway through
an API request is taking too long.

98
00:06:34.880 --> 00:06:36.880
Well, we're done,
they're no longer searching for that.

99
00:06:36.880 --> 00:06:38.440
I don't wanna know when it comes back.

100
00:06:38.440 --> 00:06:40.120
I'm uninterested, right?

101
00:06:40.120 --> 00:06:41.960
We have new things we're searching for.

102
00:06:41.960 --> 00:06:45.550
And when that request comes back, whether
it's before or after the other one, right?

103
00:06:45.550 --> 00:06:47.505
If you have a slow internet connection,

104
00:06:47.505 --> 00:06:50.620
you're the first request might
come back after the second one.

105
00:06:51.710 --> 00:06:54.998
You don't wanna update the UI for
the thing they're done searching for,

106
00:06:54.998 --> 00:06:58.240
you wanna update the UI for
the thing they most recently searched for.

107
00:06:58.240 --> 00:07:01.860
Exhaust map will be like,
we're loading things right now.

108
00:07:01.860 --> 00:07:03.250
I know they're rage clicking that button.

109
00:07:04.360 --> 00:07:05.980
We're loading things right now.

110
00:07:05.980 --> 00:07:06.930
We're doing it right.

111
00:07:06.930 --> 00:07:09.240
This is maybe for
data that's not gonna change too much.

112
00:07:09.240 --> 00:07:11.430
You don't need to fire off
a bunch of different requests.

113
00:07:11.430 --> 00:07:14.994
Like this request will get them the data
they want, just don't fire off new

114
00:07:14.994 --> 00:07:19.020
requests until this comes back and
then they wanna search again, fine, right?

115
00:07:19.020 --> 00:07:23.570
This could be a field where it's like we
are loading the previous thing, cool.

116
00:07:24.810 --> 00:07:27.660
There's just a few more that we
won't play with too much but

117
00:07:27.660 --> 00:07:30.480
I just wanna make you
aware of their existence.

118
00:07:30.480 --> 00:07:37.326
Remember we saw a fork join before it gave
you the last value of all the observables

119
00:07:37.326 --> 00:07:43.175
combined latest all will simply as
long as all of them have admitted.

120
00:07:43.175 --> 00:07:47.818
It'll wait until each and every one of
them admits, once they have all admitted,

121
00:07:47.818 --> 00:07:50.750
you will get an array of all the values,
right?

122
00:07:50.750 --> 00:07:53.707
So if there's still, when you're waiting
on, you dont get anything, but once

123
00:07:53.707 --> 00:07:57.250
everyone has done something, you'll get
an array of all the things that happened.

124
00:07:57.250 --> 00:07:59.578
If you are impatient and want this ASAP,

125
00:07:59.578 --> 00:08:03.000
you can use a start with to kind
of kick off each one of them and

126
00:08:03.000 --> 00:08:07.727
then you'll get an array each and every
time any of them admit, right, so this can

127
00:08:07.727 --> 00:08:12.630
be useful if you're building a UI like,
hey, I'm making a pixel painter, right?

128
00:08:13.660 --> 00:08:16.241
I wanna know where their mouse is.

129
00:08:16.241 --> 00:08:20.820
I wanna know what color, right,
these are all things that can change.

130
00:08:20.820 --> 00:08:24.395
Right, give me the latest of all of
these things depending on what we're

131
00:08:24.395 --> 00:08:25.220
doing, right?

132
00:08:26.920 --> 00:08:29.871
And then combine latest
with just a way to kind of,

133
00:08:29.871 --> 00:08:34.719
I wanna rely on this other observable, I,
give me the last one of that every time,

134
00:08:34.719 --> 00:08:39.431
so the question is, if you use exhaust
map and things happen while you're doing

135
00:08:39.431 --> 00:08:43.030
the first thing are those
things backed up into a queue.

136
00:08:43.030 --> 00:08:46.750
They're completely ignored, they are
dropped, right, we don't, like we're busy.

137
00:08:46.750 --> 00:08:49.830
We're not doing those things afterwards,
they could have raged clicked.

138
00:08:49.830 --> 00:08:50.670
So the heart's content.

139
00:08:52.650 --> 00:08:54.040
We're not dealing with it.

140
00:08:54.040 --> 00:08:55.670
We're not doing it.

141
00:08:55.670 --> 00:08:59.792
We're finishing what we did in this case,
and we'll go ahead and when we're done,

142
00:08:59.792 --> 00:09:03.971
we'll do the next thing, right, like if an
autosave is in progress, you might wanna

143
00:09:03.971 --> 00:09:07.481
let that autosave go through or
maybe you wanna switch it to the new one.

144
00:09:07.481 --> 00:09:10.361
A lot of this will depend on the exact
type of interaction you're trying

145
00:09:10.361 --> 00:09:12.665
to develop, but
the idea is that you have these options,

146
00:09:12.665 --> 00:09:14.827
you have the option to kinda
finish what you started.

147
00:09:14.827 --> 00:09:19.198
You have the option to drop what you're
doing and do the new thing or merge, hey,

148
00:09:19.198 --> 00:09:23.248
I don't care like things happen,
like they can start and stop that timer,

149
00:09:23.248 --> 00:09:26.230
I'm unconcerned,
I don't really care in this case.

