WEBVTT

1
00:00:00.004 --> 00:00:04.854
So now we move towards
really everyone's favorite

2
00:00:04.854 --> 00:00:10.940
part of front end engineering,
making API requests.

3
00:00:10.940 --> 00:00:15.259
Now, I want the record to
show that when I found just

4
00:00:15.259 --> 00:00:19.377
a reasonably sized
collection of dog facts, and

5
00:00:19.377 --> 00:00:24.108
I was using the Fetch API,
I was not trying to make a pun.

6
00:00:24.108 --> 00:00:30.084
I also want the record to show I had
weeks to avoid making this pun and

7
00:00:30.084 --> 00:00:35.984
choosing literally any other dataset,
and I chose to go with it.

8
00:00:35.984 --> 00:00:41.240
So I'm aware, it wasn't intentional,
but I committed to it.

9
00:00:41.240 --> 00:00:43.690
So yes, we will fetch dog facts.

10
00:00:45.200 --> 00:00:46.743
Don't @ me.

11
00:00:46.743 --> 00:00:50.718
Okay, you should have an API,
that's no s there,

12
00:00:50.718 --> 00:00:55.443
I just gotta change that,
but HTTP API localhost 3333.

13
00:00:55.443 --> 00:00:59.139
If for
some reason your API server doesn't work,

14
00:00:59.139 --> 00:01:02.690
I also have a version
of it hosted as well.

15
00:01:02.690 --> 00:01:03.393
They're both options.

16
00:01:03.393 --> 00:01:09.180
So we're gonna use no s,
http://slocalhost:3333.

17
00:01:09.180 --> 00:01:12.355
And this API has some fun features.

18
00:01:12.355 --> 00:01:17.979
Basically, it has query params
that may let you make it worse.

19
00:01:19.800 --> 00:01:21.928
Yeah, what API doesn't need that?

20
00:01:21.928 --> 00:01:26.152
So it has the ability to like add a delay
to it, to have it fail intermittently and

21
00:01:26.152 --> 00:01:27.928
all sorts of fun stuff like that.

22
00:01:27.928 --> 00:01:32.170
So we can recreate bad situations.

23
00:01:32.170 --> 00:01:35.367
But we have that in place.

24
00:01:35.367 --> 00:01:40.542
So if I go over here and we have
the ability to do stuff asynchronously,

25
00:01:40.542 --> 00:01:44.862
we know that from, and
from fetch, give us observables.

26
00:01:44.862 --> 00:01:48.574
Iterating a counter is neat, but

27
00:01:48.574 --> 00:01:54.680
not gonna get you that
promotion you're looking for.

28
00:01:54.680 --> 00:01:59.685
So [LAUGH] let's look
at what this would look

29
00:01:59.685 --> 00:02:04.423
like with an API request like a real API.

30
00:02:04.423 --> 00:02:06.098
So we have this in place and

31
00:02:06.098 --> 00:02:10.831
we've got this fetch button on the page/
Let's go take a look at that UI.

32
00:02:16.155 --> 00:02:17.660
We'll start with this fetch button.

33
00:02:17.660 --> 00:02:19.170
It'll fetch you some dog facts.

34
00:02:20.510 --> 00:02:24.202
Who doesn't like dog facts?

35
00:02:24.202 --> 00:02:26.742
So we'll say fetch.

36
00:02:26.742 --> 00:02:29.785
Which again, I apologize for nothing.

37
00:02:31.267 --> 00:02:34.094
And we'll say from event when they
click on that fetch button this case

38
00:02:44.174 --> 00:02:46.688
One of the interesting things too is,
on one hand,

39
00:02:46.688 --> 00:02:48.565
we're writing vanilla JavaScript.

40
00:02:48.565 --> 00:02:51.242
On the other hand,
knowing exactly what to do and

41
00:02:51.242 --> 00:02:54.898
be able to surgically update the DOM
where we need to is effectively

42
00:02:54.898 --> 00:02:58.380
how a lot of the more recent
front end frameworks work, right?

43
00:02:58.380 --> 00:03:02.810
I care about when these given events
change, and here are the places where you

44
00:03:02.810 --> 00:03:07.239
need to change them in the DOM is how
a bunch of if you've ever looked at those,

45
00:03:07.239 --> 00:03:10.540
what is the fastest frameworks in 2020,
2021?

46
00:03:10.540 --> 00:03:15.062
A lot of them is how effectively
these concepts are being used versus

47
00:03:15.062 --> 00:03:16.658
did something change?

48
00:03:16.658 --> 00:03:18.951
Let me the walk an entire virtual DOM,
right?

49
00:03:18.951 --> 00:03:22.020
And so the ability to just
know what value changed and

50
00:03:22.020 --> 00:03:25.312
know where to change it is
an incredibly powerful idea.

51
00:03:25.312 --> 00:03:26.854
I digress.

52
00:03:26.854 --> 00:03:28.920
So we've got merge map in here.

53
00:03:28.920 --> 00:03:31.813
And so we're saying when
that click comes through,

54
00:03:31.813 --> 00:03:33.990
I don't really care what the event is.

55
00:03:35.200 --> 00:03:40.670
I wanna merge map, right, because what
I wanna do is return a from fetch.

56
00:03:40.670 --> 00:03:44.209
I wanna turn that click
into a fetch request.

57
00:03:45.430 --> 00:03:47.278
If I just use map, it's gonna be like,

58
00:03:47.278 --> 00:03:49.584
yeah, here's an observable,
this we wanted.

59
00:03:49.584 --> 00:03:52.911
No, I wanted my fetch request.

60
00:03:52.911 --> 00:03:54.750
I didn't want an observable.

61
00:03:54.750 --> 00:03:57.130
So we've got this kind of in place here.

62
00:03:57.130 --> 00:04:01.832
So we've got merge map, in this case,

63
00:04:01.832 --> 00:04:05.547
and then I don't really care.

64
00:04:05.547 --> 00:04:07.045
I've attached it to the right button.

65
00:04:07.045 --> 00:04:09.731
I don't care about the event,
I don't care about the target value,

66
00:04:09.731 --> 00:04:11.160
it's not an input field.

67
00:04:11.160 --> 00:04:14.630
If I was doing this on an input field,
I might care about the value.

68
00:04:14.630 --> 00:04:17.380
I don't,
I just care that the button was clicked.

69
00:04:17.380 --> 00:04:19.041
That's all I'm interested in.

70
00:04:19.041 --> 00:04:21.050
And then we've got from fetch.

71
00:04:21.050 --> 00:04:22.320
We'll send it to our endpoint.

72
00:04:24.390 --> 00:04:29.156
And then that we're going to want
to do stuff with because you

73
00:04:29.156 --> 00:04:32.612
know one does not simply
use the Fetch API and

74
00:04:32.612 --> 00:04:38.703
get back an object like get JSON on
a certain perfect library known as JQuery.

75
00:04:38.703 --> 00:04:41.558
Now, one gets a response object,

76
00:04:41.558 --> 00:04:47.710
which they have to call either .json or
.blob or what have you, right?

77
00:04:47.710 --> 00:04:52.657
So not only does fetch need to
merge map into the request, but

78
00:04:52.657 --> 00:04:59.356
with that observable, and let's just put
that return there now before I forget.

79
00:04:59.356 --> 00:05:00.986
With that observable,

80
00:05:00.986 --> 00:05:05.470
we're also gonna need to pipe
that through some things, right?

81
00:05:05.470 --> 00:05:09.870
Cuz fetch, cool, fetch me the response,

82
00:05:09.870 --> 00:05:13.793
response to JSON, so on and so forth.

83
00:05:13.793 --> 00:05:20.112
So in this case, We will say .pipe.

84
00:05:24.471 --> 00:05:28.633
So you think I map or I merge map?

85
00:05:28.633 --> 00:05:29.634
&gt;&gt; Merge map.

86
00:05:29.634 --> 00:05:31.240
&gt;&gt; Why, what's that?

87
00:05:31.240 --> 00:05:31.870
&gt;&gt; Just a map.

88
00:05:31.870 --> 00:05:35.556
&gt;&gt; All right, so we have one vote for
just a map, any votes for merge map?

89
00:05:35.556 --> 00:05:38.842
I heard merge map until somebody
said map and everyone got quiet.

90
00:05:38.842 --> 00:05:40.553
&gt;&gt; Are we expecting
more observables to be-

91
00:05:40.553 --> 00:05:42.452
&gt;&gt; Switch map.

92
00:05:42.452 --> 00:05:43.524
&gt;&gt; We got a switch map.

93
00:05:43.524 --> 00:05:45.703
&gt;&gt; Fetch would not be
returning an observable.

94
00:05:45.703 --> 00:05:48.940
I haven't looked at that function though.

95
00:05:48.940 --> 00:05:51.072
&gt;&gt; So a normal fetch,
what does a normal fetch return?

96
00:05:51.072 --> 00:05:52.636
So we say-
&gt;&gt; Promise.

97
00:05:52.636 --> 00:05:54.627
&gt;&gt; That returns a promise.

98
00:05:54.627 --> 00:06:00.510
Then that response,
response.json is also a promise, right?

99
00:06:00.510 --> 00:06:05.556
So I heard you like observables or
promises, each one.

100
00:06:05.556 --> 00:06:07.810
It's interesting,
it's not wrong to think about.

101
00:06:07.810 --> 00:06:12.891
If you were gonna use a .then, merge
map is probably your best bet, right?

102
00:06:12.891 --> 00:06:17.937
Because the chaining of the observables,
it will basically run

103
00:06:17.937 --> 00:06:23.554
the values if it is observable like
they'll run through from, right?

104
00:06:23.554 --> 00:06:25.422
Or it'll treat it like an observable.

105
00:06:25.422 --> 00:06:29.742
So in this case because
response.json returns a promise

106
00:06:29.742 --> 00:06:32.987
that also needs to get merged mapped also.

107
00:06:32.987 --> 00:06:38.433
Again, the handy mnemonic that I
literally just invented right now

108
00:06:38.433 --> 00:06:43.508
is it If you're gonna use dot
then you'd wanna use a merge map.

109
00:06:43.508 --> 00:06:46.048
So I've got a pipe here and
then we'll merge map, yep.

110
00:06:51.876 --> 00:06:54.030
Response.json, perfect.

111
00:06:54.030 --> 00:06:58.031
You know when Prettier is happy with you
then everything mostly works in this case.

112
00:06:58.031 --> 00:07:02.765
So then from fetch we will subscribe.

113
00:07:06.386 --> 00:07:10.830
I will say, Dog facts should do the trick.

114
00:07:10.830 --> 00:07:16.503
There is my dog facts, great.

115
00:07:16.503 --> 00:07:21.760
A lot of things there, cool.

116
00:07:21.760 --> 00:07:26.379
So in this case,
we are now able to take an event,

117
00:07:26.379 --> 00:07:29.665
map it into a promise from a fetch.

118
00:07:29.665 --> 00:07:32.522
Map it back to response and
show it into the UI.

119
00:07:32.522 --> 00:07:39.266
But this is great, there's a wonderful
API, assuming your server never goes down,

120
00:07:39.266 --> 00:07:43.420
right, and
nothing bad happens on the internet.

121
00:07:43.420 --> 00:07:47.477
So what do we do in that case, right?

122
00:07:47.477 --> 00:07:52.344
We could, for instance, go ahead and

123
00:07:52.344 --> 00:07:56.610
let's add a little bit of delay.

124
00:07:58.010 --> 00:08:02.120
And so I in this case can modify
the API a little bit where I say delay.

125
00:08:02.120 --> 00:08:03.840
Let's say it takes two seconds to respond.

126
00:08:05.540 --> 00:08:10.606
And just to make things worse,
we can add this element of chaos

127
00:08:14.359 --> 00:08:18.791
Where kind of two seconds,
roughly two seconds.

128
00:08:18.791 --> 00:08:21.671
Cuz again, it's hard to simulate and

129
00:08:21.671 --> 00:08:27.080
perfect network conditions if it's
always exactly two seconds slow.

130
00:08:27.080 --> 00:08:32.260
But this is gonna kind of be
a little bit different in this case.

131
00:08:32.260 --> 00:08:36.112
So we can go ahead and
open up the console,

132
00:08:36.112 --> 00:08:40.747
just to kind of shrink that
down just a little bit.

133
00:08:40.747 --> 00:08:44.798
So I can see the network requests, cool.

134
00:08:44.798 --> 00:08:46.870
As you can see, I request a bunch of them.

135
00:08:46.870 --> 00:08:48.380
They kind of come in and

136
00:08:48.380 --> 00:08:53.480
they're kind of loading at different
points all over the place.

137
00:08:53.480 --> 00:08:55.417
But these are random dog facts,

138
00:08:55.417 --> 00:08:59.270
they're gonna get a sampling
of them no matter what.

139
00:08:59.270 --> 00:09:01.720
What would I wanna use,
if I want to be like,

140
00:09:01.720 --> 00:09:04.190
we're getting you some dog facts, relax.

141
00:09:04.190 --> 00:09:08.180
We'll put them on the page when
we hear back from the API.

142
00:09:08.180 --> 00:09:10.650
We're gonna ignore future
clicks until we're done.

143
00:09:10.650 --> 00:09:11.530
&gt;&gt; Exhaust map.

144
00:09:11.530 --> 00:09:12.580
&gt;&gt; Exhaust map, perfect.

145
00:09:12.580 --> 00:09:14.910
So let's give that a shot.

146
00:09:14.910 --> 00:09:21.226
So we'll just change this to an exhaust
map and we'll use that instead.

147
00:09:27.793 --> 00:09:31.750
You see, I'm going nuts on that button,
but I only sent one network request.

148
00:09:31.750 --> 00:09:36.244
When that network request comes back
I am welcome to hit the button again.

149
00:09:36.244 --> 00:09:41.900
But RxJS will basically ignore clicks
until it's done doing what it's doing.

150
00:09:41.900 --> 00:09:44.410
Random pop quiz, for
sure we all know the answer.

151
00:09:44.410 --> 00:09:47.490
If I wanted to switch to the newest one,
what would I use instead?

152
00:09:47.490 --> 00:09:48.580
&gt;&gt; Switch map.
&gt;&gt; Switch map,

153
00:09:48.580 --> 00:09:51.860
switch map will be like I don't care
about the facts I just requested.

154
00:09:51.860 --> 00:09:53.704
I want the new facts.

155
00:09:53.704 --> 00:09:57.789
They're not real time or
anything, doesn't really matter.

156
00:09:57.789 --> 00:10:02.730
So this case exhaust map is the right
choice for us at this moment.

157
00:10:04.450 --> 00:10:06.932
Okay, so what happens if this fails?

158
00:10:06.932 --> 00:10:12.508
We already have a slow API,
it's relatively possible

159
00:10:12.508 --> 00:10:17.123
that this API could return an error,
right?

160
00:10:19.565 --> 00:10:22.560
So we can make that happen.

161
00:10:22.560 --> 00:10:24.420
We got another one called flakiness.

162
00:10:26.820 --> 00:10:30.540
And a flakiness of 1 will
make it fail every time.

163
00:10:30.540 --> 00:10:34.383
Flakiness of 2 will make
it fail every other time.

164
00:10:34.383 --> 00:10:39.102
A flakiness of 3, do you get the point?

165
00:10:39.102 --> 00:10:40.873
A flakiness of 3 omega every third time.

166
00:10:40.873 --> 00:10:45.990
Let's have it fail all the time right now.

167
00:10:45.990 --> 00:10:51.145
So if I just fire this off and
we should be able to see the console,

168
00:10:51.145 --> 00:10:53.449
you can see that it blows up.

169
00:10:53.449 --> 00:10:54.919
It doesn't know what to do.

170
00:10:54.919 --> 00:10:56.546
We've got that 500 error.

171
00:10:56.546 --> 00:10:58.265
Things are not great.

172
00:10:58.265 --> 00:11:00.325
But we could do with that, right?

173
00:11:00.325 --> 00:11:03.985
We could, we have an operator that
helps us deal with these things.

174
00:11:03.985 --> 00:11:06.637
We saw that an observable
ends when it throws an error,

175
00:11:06.637 --> 00:11:08.779
it's effectively the completion of that.

176
00:11:08.779 --> 00:11:10.588
We knew we had a test for them.

177
00:11:10.588 --> 00:11:12.675
We just haven't seen really
how to deal with them.

178
00:11:12.675 --> 00:11:16.370
Sometimes it depends on the API, right?

179
00:11:16.370 --> 00:11:17.420
It depends on what you wanna do.

180
00:11:17.420 --> 00:11:20.350
Sometimes you wanna show them
an error message, right?

181
00:11:20.350 --> 00:11:22.996
Sometimes you want to try again.

182
00:11:22.996 --> 00:11:25.966
These are all fine things to do, but

183
00:11:25.966 --> 00:11:30.820
you shouldn't just treat it
like everything worked out.

184
00:11:30.820 --> 00:11:36.270
So what we can do in this case is we can
go ahead and we have a few options here.

185
00:11:36.270 --> 00:11:38.680
Let's see, we could get a little
more nuanced here as well.

186
00:11:39.690 --> 00:11:46.308
Let's go ahead and say because
fromfetch has an interesting behavior.

187
00:11:46.308 --> 00:11:53.595
Fromfetch, if it gets a 400 or 500,
that's not a promise rejection, right?

188
00:11:53.595 --> 00:11:56.039
Fromfetch, or fetch, rather,

189
00:11:56.039 --> 00:12:01.117
the Fetch API as a whole only catches
if there's no network, right?

190
00:12:01.117 --> 00:12:06.085
This is a fun progressive web app
thing which is you can handle

191
00:12:06.085 --> 00:12:09.905
no internet different than flaky internet.

192
00:12:09.905 --> 00:12:13.999
So let's go ahead, And we'll say,

193
00:12:13.999 --> 00:12:18.990
You can do something like,

194
00:12:18.990 --> 00:12:24.201
okay, if response is okay.

195
00:12:24.201 --> 00:12:25.090
Then we return that.

196
00:12:28.010 --> 00:12:29.050
Now we're using merge map.

197
00:12:29.050 --> 00:12:33.014
So we do need to return
an observable no matter what, right?

198
00:12:33.014 --> 00:12:35.612
So we couldn't do something like foo.

199
00:12:35.612 --> 00:12:42.247
I do kinda like the node style.

200
00:12:45.482 --> 00:12:49.034
This would not work because
with that switch map or

201
00:12:49.034 --> 00:12:53.698
exhaust map it's expecting that
it gets an observable, right?

202
00:12:53.698 --> 00:12:56.358
This promise it's gonna
turn into an observable.

203
00:12:56.358 --> 00:12:58.340
This is just an object.

204
00:12:58.340 --> 00:13:00.088
&gt;&gt; Could you just wrap it in an of?

205
00:13:00.088 --> 00:13:02.830
&gt;&gt; Yep, [LAUGH] perfect.

206
00:13:02.830 --> 00:13:04.664
Yeah, you wrap it in an of and
now it's an observable.

207
00:13:08.090 --> 00:13:11.260
Cool, so
we've got that kind of error in place.

208
00:13:11.260 --> 00:13:14.633
So that's one way to go ahead and do it.

209
00:13:14.633 --> 00:13:18.385
And so now when we subscribe,
we could deal with that error separately.

210
00:13:18.385 --> 00:13:22.235
There's another way to handle
this as we'll see in a second.

211
00:13:22.235 --> 00:13:24.514
But let's start with this for

212
00:13:24.514 --> 00:13:29.264
now where we could say the facts
can come through or the error.

213
00:13:29.264 --> 00:13:33.180
We kind of almost handle
this like node JS style.

214
00:13:34.400 --> 00:13:36.583
Where we could say, okay,
if there's an error,

215
00:13:41.760 --> 00:13:45.781
Do I have a set or a helper?

216
00:13:45.781 --> 00:13:53.152
Yeah, set error with
the error message Otherwise,

217
00:13:56.473 --> 00:14:00.009
I'll just return this,
I don't have to do that.

218
00:14:00.009 --> 00:14:05.373
I can say clear out all the facts
that were in there because we're just

219
00:14:05.373 --> 00:14:11.310
kinda pending them before and we'll
say I think I have added facts, right?

220
00:14:11.310 --> 00:14:13.312
So this is one way to handle it.

221
00:14:13.312 --> 00:14:16.271
This is good for errors where
we want to do something with it.

222
00:14:16.271 --> 00:14:20.343
We still haven't dealt with the idea of
what happens if just things go poorly, and

223
00:14:20.343 --> 00:14:22.420
we kind of see that in
a little bit as well.

224
00:14:23.560 --> 00:14:28.813
And it's one of the advantages
that we get from fetch as well,

225
00:14:28.813 --> 00:14:34.170
which it will actually deal
with even bad states for us.

226
00:14:34.170 --> 00:14:36.008
Let's try this out,
make sure I didn't mess anything up.

227
00:14:36.008 --> 00:14:39.721
So you can see something went
wrong cuz occasionally the API.

228
00:14:39.721 --> 00:14:45.243
This one that we still have it, flakiness
is set to 1, so it will always fail.

229
00:14:45.243 --> 00:14:48.570
Versus if I set out to a 2,
it's expecting an object.

230
00:14:55.994 --> 00:15:00.250
Fails on purpose, or
is delayed, and we get them.

231
00:15:00.250 --> 00:15:01.520
All right, so
we can handle both situations.

