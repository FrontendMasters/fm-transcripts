WEBVTT

1
00:00:00.172 --> 00:00:03.724
All right,so here we have
our venerable counter.

2
00:00:03.724 --> 00:00:05.912
It needs some updates, right?

3
00:00:05.912 --> 00:00:09.889
And this goes back to
the question we had before of,

4
00:00:09.889 --> 00:00:14.249
it's important to see how skip until,
and take until.

5
00:00:14.249 --> 00:00:16.329
We'll start and stop one,

6
00:00:16.329 --> 00:00:21.127
but this gave us an observable
that was basically one time use.

7
00:00:21.127 --> 00:00:24.810
What we really want to do,
is again, swap back and

8
00:00:24.810 --> 00:00:29.835
forth between a regular cadence
of integers and complete silence.

9
00:00:29.835 --> 00:00:35.935
Depending on whether or
not we want things to reflect in our UI.

10
00:00:35.935 --> 00:00:39.626
So, one of the things that
we saw previously is,

11
00:00:39.626 --> 00:00:43.504
instead of using the events we used MapTo,
right?

12
00:00:43.504 --> 00:00:49.247
And we'll just add this up here,
say MapTo.

13
00:00:49.247 --> 00:00:57.024
And for each of this, MapTo(true),

14
00:01:03.676 --> 00:01:06.547
MapTo(false), right?

15
00:01:06.547 --> 00:01:08.451
And now, counter is going to be,

16
00:01:08.451 --> 00:01:12.126
we're still gonna need this
interval at some point or another.

17
00:01:12.126 --> 00:01:16.220
But let's kind of start up here for
a second.

18
00:01:16.220 --> 00:01:21.314
And counter is reliant, is merging
the clicks on that button, right?

19
00:01:21.314 --> 00:01:24.850
And depending on what the last event on,
should I be running,

20
00:01:24.850 --> 00:01:29.279
should I not be running, it will then
redirect its output in a different way.

21
00:01:29.279 --> 00:01:34.300
So we'll say counter in this case, and

22
00:01:34.300 --> 00:01:39.483
just merge together, start and pause.

23
00:01:39.483 --> 00:01:43.577
Right, so I want it listen to
both these true values and

24
00:01:43.577 --> 00:01:45.893
false values coming through.

25
00:01:45.893 --> 00:01:49.611
If I was to just a regular map over this,
or even just tap,

26
00:01:49.611 --> 00:01:53.418
I would get true false depending
on what button happened.

27
00:01:53.418 --> 00:01:58.260
Now, what I really wanna do is give
back a different observable and

28
00:01:58.260 --> 00:02:01.471
has swapped that in as
we kind of go through.

29
00:02:01.471 --> 00:02:06.584
So instead of mapping it to an observable,
in this case, I want to switch to map.

30
00:02:09.525 --> 00:02:10.251
Right?

31
00:02:10.251 --> 00:02:11.223
And this again,

32
00:02:11.223 --> 00:02:16.024
the value that switch map is gonna get is
the value that came into this observable.

33
00:02:16.024 --> 00:02:19.960
Now, because we've mapped
to either true or false,

34
00:02:19.960 --> 00:02:22.416
we will get either true or false.

35
00:02:22.416 --> 00:02:26.893
So this will be a boolean of, should I
be running, should I not be running?

36
00:02:26.893 --> 00:02:30.565
In fact, let's call this,
should I be running?

37
00:02:33.604 --> 00:02:36.402
And we'll kinda do with like the long
hand here just to make sure it's

38
00:02:36.402 --> 00:02:37.230
abundantly clear.

39
00:02:37.230 --> 00:02:38.744
We won't use a ternary like we saw before.

40
00:02:38.744 --> 00:02:42.734
We'll say, if should I be running,

41
00:02:43.966 --> 00:02:50.882
Return an interval that runs
on every one second, right?

42
00:02:50.882 --> 00:02:58.375
Otherwise, Return never.

43
00:02:58.375 --> 00:03:03.050
Right, so either depending on
the last value that came through,

44
00:03:03.050 --> 00:03:08.580
we're going to either return an interval,
or we're going to return never.

45
00:03:08.580 --> 00:03:12.113
Then we'll see there's a slight problem in
my code, you can kinda see down here, but

46
00:03:12.113 --> 00:03:12.913
yeah, question?

47
00:03:12.913 --> 00:03:16.822
&gt;&gt; You have to pipe those map to
string at the top on the [INAUDIBLE]?

48
00:03:16.822 --> 00:03:20.104
&gt;&gt; Yep, theoretically if I
hate my bundle size, I don't.

49
00:03:20.104 --> 00:03:25.603
[LAUGH] Right, if I wanna you pull them
in like, but you're right, I should.

50
00:03:25.603 --> 00:03:27.909
&gt;&gt; Or do you use the chaining
method instead of pipe?

51
00:03:27.909 --> 00:03:28.909
&gt;&gt; Yeah.

52
00:03:32.332 --> 00:03:35.749
&gt;&gt; Genius, deprecated.

53
00:03:35.749 --> 00:03:40.371
&gt;&gt; Yep, cuz again,
if you enjoy a reasonable bundle size,

54
00:03:40.371 --> 00:03:45.089
there's no way to have
an observable that has all 100,

55
00:03:45.089 --> 00:03:49.254
and I think I counted,
it was like 134 methods.

56
00:03:49.254 --> 00:03:50.701
Do I ship those, whatever?

57
00:03:50.701 --> 00:03:52.052
They said we use what?

58
00:03:52.052 --> 00:03:55.948
MapTo, SwitchMap, don't need all
the rest of those operators, right?

59
00:03:55.948 --> 00:04:00.086
We should only pull the ones we need.

60
00:04:00.086 --> 00:04:01.711
So should I be running?

61
00:04:01.711 --> 00:04:05.848
We have counter and
we need to get rid of the other counter.

62
00:04:05.848 --> 00:04:07.532
Now, what's missing?

63
00:04:07.532 --> 00:04:08.792
I'll just hint.

64
00:04:08.792 --> 00:04:13.177
This will work but it's gonna have
that problem we had before, right?

65
00:04:13.177 --> 00:04:16.345
Which is,
you'll get a fresh count every time.

66
00:04:16.345 --> 00:04:21.248
You will not pick up where you left off
because this is returning a brand new

67
00:04:21.248 --> 00:04:23.397
interval observable, right?

68
00:04:23.397 --> 00:04:27.971
So this one's gonna start at 0,
or 1, or whatever every time.

69
00:04:27.971 --> 00:04:33.690
What we really wanna do is, that's fine,
but we want to pick up where we left off.

70
00:04:33.690 --> 00:04:36.986
So we'll grab this scan as well.

71
00:04:36.986 --> 00:04:41.365
We'll pop it in there too.

72
00:04:43.393 --> 00:04:47.953
Awesome, so yeah,
now depending on which way this happens,

73
00:04:47.953 --> 00:04:52.426
we should finally reach the promised
land of a two buttons and

74
00:04:52.426 --> 00:04:55.955
a number that do roughly
what we expect it to do.

75
00:05:00.778 --> 00:05:04.045
The one thing that I've noticed
is that the IntelliSense,

76
00:05:04.045 --> 00:05:06.145
I'm just gonna import stuff for you.

77
00:05:06.145 --> 00:05:08.875
It's a little squirrely if
you have both of these.

78
00:05:08.875 --> 00:05:14.408
So, We can start it.

79
00:05:14.408 --> 00:05:15.254
We can pause it.
We can start it again.

80
00:05:15.254 --> 00:05:21.038
And we can pause it again.

81
00:05:21.038 --> 00:05:26.086
Now, if I took out that scan,
you kinda see, That I can start it.

82
00:05:28.731 --> 00:05:30.227
I can pause it.

83
00:05:30.227 --> 00:05:32.860
If I start it again it goes to 0.

84
00:05:32.860 --> 00:05:37.982
The reason for that is,
I'm getting a fresh observable every time,

85
00:05:37.982 --> 00:05:43.209
an interval, pumps at 0, 1, 2,
3, 4, 5, so on and so forth.

86
00:05:43.209 --> 00:05:47.749
With that scan, I'm like, listen,
as long as it's kind of the effective

87
00:05:47.749 --> 00:05:51.371
version of map to,
I don't care what number you produced.

88
00:05:51.371 --> 00:05:54.431
I'm keeping my own count,
and here's my own count,

89
00:05:54.431 --> 00:05:58.103
whatever you told me you're
producing I'm unconcerned with.

90
00:05:58.103 --> 00:06:01.249
So scan is, again,
that way to kind of maintain state.

91
00:06:01.249 --> 00:06:03.949
Like we saw on that test
earlier you can almost

92
00:06:03.949 --> 00:06:07.161
implement a reducer like
situation just using scan.

