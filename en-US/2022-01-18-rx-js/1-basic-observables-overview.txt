[00:00:00]
>> And with that, I think we're gonna start jumping into how do we actually play around with this, right? It's the initial question is great observables, they're wonderful. All right. How do I get my hands on one of these observables? How does one make an observable? Right. And there is like an observable constructor where you can like hand roll your own observables.

[00:00:18]
But in practice, we have a bunch of very simple utility functions that will produce an observable for us. So what we're gonna do is, we're gonna take a look at a few of them, kind of just on a high level. And then we're gonna actually kind of play around with them, get our hands dirty and write some tests, just to kind of see how they work.

[00:00:36]
So let's kind of take a brief tour, and then we will jump in and play around. So the first helpful utility method is one called of, right. And of, takes a series of arguments and what it does it makes an observable of those values does, right what it says on the tin right.

[00:00:57]
The other thing to keep in mind as we look at this first example is you'll notice that I named it example dollar sign, right. And we put it on the end because jQuery already owns putting on the beginning you don't have to do this. If you hate this, the dollar sign doesn't mean anything.

[00:01:15]
The dollar sign is just a regular JavaScript variable. It is helpful especially in a world where you might not have TypeScript, right? It is helpful for you and your friends to know that this is an observable stream that we're dealing with and not a regular value. Again something like TypeScript might all the intelligence in the world might handle this for you don't necessarily have to do it falls under the list of conventions that we do.

[00:01:39]
Like giving classes and constructors and JavaScript capital letters. All right, using dollar signs in the beginning of like jQuery, capitalizing react components so on and so forth, right? That is basically what it means there's nothing special there. It does not have any magic in and of itself. It is just an indicator.

[00:01:58]
Now because it is a stream, right, we can't just use the observable whenever we want, we have to subscribe to it, all right? And when you subscribe to it, it will then, run through the values and the observable. Now of, just basically, shoots them all right at you super fast, all right?

[00:02:16]
Basically synchronously they will all fire, immediately at you. And you can deal with them at that moment. So of, is kind of its utility when we're obviously gonna build to bigger and better things are things like, maybe as click events come in, well, that could be an event.

[00:02:30]
I want my stream we might need a different helper for that. From API requests, so on and so forth, but of is the simplest one. It takes a series of arguments and basically shoots them all at you in an observable incredibly quickly, also known as synchronously. It has a friend, that's friend is called from.

[00:02:51]
So this gonna take the value is raw, whatever arguments, they're going in there each value so on and so forth. From we'll deal with a certain set of values that it can try to turn into an observer. All right, so arrays are good for that right, you just work your way through the array really anything that is quote unquote an iterable in JavaScript.

[00:03:12]
So anything that has symbol dot iterator so that's basically, arrays, generators, things like that. It will basically work through the values of that data structure and send them to you. It'll also work with promises because that is, a really great example of like, it'll basically wait for the promise to resolve.

[00:03:31]
And if the promise resolves, then it will give you that value as well. So anything that is not necessarily just a regular primitive value or just the kind of pure thing that you wanna use but you'd like to turn one data structure into an observable. From is your buddy for doing that as well, and you can do generator functions you just have to instantiate them and it will basically work through all the things that it yields.

[00:03:55]
We'll kind of see that in a little bit. Like I said, promises. Once the promise resolves, you get the value. So, from is a pretty useful tool as well for turning other things into observables. All right let's actually like let's look at the difference for a second. From is useful whenever it's kind of like an observable that we want to turn into one.

[00:04:18]
So that is arrays and promises and generators. Objects that have a subscribe method so like anything that we would call like observable like that adheres to the interface of an observable, it will turn it into a real observable. So like svelte stores, for instance, have a subscribe method.

[00:04:35]
You can basically turn it into an observable read through the values, so on and so forth. For the nodding in the room like spelt stores are basically like what subjects in ArcGIS so they play very nice nicely together. There's nothing like an observable. So any kinda primitive value and object that doesn't necessarily adhere to the API contract and observable, we're gonna use and just kinda shoot it through the observable stream in this case.

[00:05:01]
All right, so if you looked at the previous slide, you saw that we just gave, we had subscribe, and then we gave it a callback function. Right, and that was what to do when every value happened. But that's great. That assumes that everything goes right all the time, right.?

[00:05:15]
And I don't know about you, but I don't write code that does that all the time. So there are two ways that we can deal with the other pieces of this. And if this stresses you out, it should. You can actually pass it three functions and it's tricky, right?

[00:05:32]
This actual syntax is currently deprecated but not removed, but still common enough that we should talk about it. It will take three functions as arguments. The first one is what to do when a value comes through. The second one is what to do when a error comes through if something goes wrong something throws midway through.

[00:05:55]
And the third one is what to do when it's complete when the stream closes and it's all done so if you have 1,2,3,4, fours last value the observable completes. Not all observables complete, but 1, 2, 3, 4 does complete, what you wanna do in that case, right? The reason why the syntax is somewhat squirrely is what happens if you do with new values and also a completion event but you don't care about there's.

[00:06:21]
We got like passing null in there as a second argument, right. If you only care about the completion of the observable then it's no your callback gross. So you can see that as well. So we don't like that. It's deprecated. There's kind of a different syntax, which is kind of what we might see more commonly which is you can give it an object with next error and complete.

[00:06:47]
And so in this case, if you only care about errors, you give it an object with error key. If you only care about complete, you give it an object with the complete key. If you only care about next, whatever, right? Whatever combination that you care about, you can subscribe to it and have those callback functions called.

[00:07:03]
So the rule of thumb that we're going to kind of use here is if you need an error complete event we're gonna use the object. Most of the times we only care about the next event that comes through, right in that case we can just pass it a function and move on.

[00:07:19]
Right, so it only only if you explicitly care do we need that second syntax otherwise just the regular passing at one function of what we wanna do with. We'll go ahead and work for us pretty well. All right, we have a site RxJSfundamentals.netlify dot.app. And in other is a repo.

[00:07:43]
And that repo has a bunch of sample applications. And it has some tests and it has everything I kind of wrote in here. And what we're going to do is kind of take it for a spin and first I am going to kind of show us effectively like just some of the syntax and action so we can see it and then you're gonna kind of take it along.

[00:08:05]

>> Are you gonna cover any integration with frameworks or TypeScript
>> No to TypeScript, just brief mentions of frameworks at the very end this is just getting comfortable with the basics of this point. In ArcGIS 7, TypeScript is pretty well supported. It's just you have to basically say what the value starting out is.

[00:08:28]
And if you're gonna pipe it through a bunch of operators, which we'll talk about a little bit. What the value at the end the actual TypeScript support out of the box is fairly solid. But we'd find that under advanced basics or advanced.
>> How does it know when the event is completed?

[00:08:42]
Is there an underlying generator.
>> Under the hood, yeah, generates and so some of them don't complete, right? If you are in a little bit we'll see the idea of one that kind of takes an event listener. Well, an event listener never completes, right? Or the could be a interval which might not complete unless you step in and tell it when it completes.

[00:09:04]
So a complete event if we can whip up some code in a little second we're gonna see this, but in the observable itself and whatever you have is creating one where it might iterate through all the values. There's a method under the hood called complete. There's a method called next.

[00:09:21]
When you call the next method inside of the observable which looks a lot like generator. It will send the next value out when you call complete that signifies that this is now completed some of them never complete. Some of them will complete after a very brief amount of time you can kind of control all of those things.

[00:09:39]
And we'll look at how to take observables are never complete and make them complete so on and so forth. But effectively if you if familiar with generators you can think of next like yield and complete like return, right. So you can have number of values, if you're writing your own from scratch, then you could theoretically call these methods otherwise.

[00:10:02]
We'll call it at the end of that list of values from we'll call it either when it hits the end of the iterable. In this case, a generator or the array or the promise resolves, there's usually a thing that will trigger the completion under the hood in the library itself.

