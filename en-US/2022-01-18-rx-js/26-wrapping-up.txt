[00:00:00]
>> Questions, comments, concerns, cries of outrage?
>> How often do you use subjects in your day-to-day work?
>> Shockingly, so, the question was, how often do we use subjects? So subjects are very similar to event emitters, right? You can have a subscription and you can have multiple things that subscribe to it.

[00:00:21]
Now, theoretically, I'm technically using a subject right here, right? I'm effectively turning a cold observable into a subject. So, there's two ways to answer this question. One is, as somebody who builds an app in Svelte all the time, Svelte sores are effectively subjects, right? And because Svelte handles reactive things out of the box, commonly they use them instead of a Redux data store or something along those lines.

[00:00:47]
In the actual, I'm coordinating some events, not as often. And so a subject, just to be clear, is both a subscription and an observable, so you can both say, call.next, all the things we did originally in the very beginning you can call.next.subscribe. Obviously, .next.complete.error, so on and so forth.

[00:01:11]
And then things can also subscribe to it. So, there's one object that is both an observable and an observer, at the same time, right? And so, those are useful if you have pieces of your application that maybe wanna listen to one core data store. So, in my application on a day-to-day basis, those are Svelte stores.

[00:01:29]
When I did React, I didn't use them at all because Redux was my store in that case, right? Effectively, the reducer was the shared thing that everything talked to, and I was just dealing, and action would come in we do awesome the dance you see right here. Of figuring out when things should happen and I was subscribed to the store itself.

[00:01:50]
So, it's useful as a data store that you wanna know when it changes, right? But in terms of a lot of the flow and coordination, this is theoretically one right here. And so pieces like that, they come up when I need to share data in two places at once.

[00:02:04]
Cuz, again, I didn't wanna fire two data requests. As often as you see them immediately in the beginning of the RxJS Docs, no, I don't, right? That's it, I think in Angular, you can use them a little bit more as a store and kind of for that same purpose that I use Svelte.

[00:02:23]
Svelte stores are not subjects, they're just subject-like. I think, in Angular, you might end up using them a little bit more, as well. Behavior subjects are the ones that give you the last value or think of replace object. We'll play through all the values and set forgotten and async subject only gives you a value when it completes doing that for memory.

[00:02:39]
I've never used an async subject, I don't know why I would use an async subject. But, yeah, behavior subject is very much like this effectively. Not only is this a subject, this is effectively a behavior subject, right? If you're a new subscriber, here's the last thing that I said, right?

[00:02:54]
If this shared replay had a huge number, it could be all the things that have happened, right? And so it's a way to kinda catch up with previous things, as well.
>> I've also had to swap an Angular event emitter for a behavior subject. I don't remember why, but that was really interesting.

[00:03:12]

>> In Angular, if you want to use a certain type of change detection, you have to use observables.
>> Yeah.
>> So use behavior subjects or subjects.
>> But there are really good syntax in there, right? They have that async syntax, right?
>> Yeah, so.
>> Do you have any advice for using RxJS outside of Angular for other frameworks?

[00:03:33]

>> I mean, I've only exclusively used it outside, so, yes. So, I think, commonly, the place that I've used it for is in a React application. And so, in that case, you have redux-observable. And redux-observable is effectively middleware for Redux, where you set up these things called Epics, which sounds really cool.

[00:03:57]
But an Epic is just a piece of middleware that every single action flows through. So you can have multiple Epics that you can combine, but every single action flows through every single Epic. And what you do is, effectively, you could filter or there's a type for the type of action but it's effectively a filter.

[00:04:15]
And so when every single action flows through, then you find yourself where you can deal with that and you could also merge map it to other actions, right? And okay, they said, hey, I'm looking for the API data. Cool fire the we're loading the API data action which then React can deal with or whatever.

[00:04:37]
And then when that comes back, then I want to fire a action for we're done loading, here's the data, take everything down, right? And so, for the application, I worked on the SendGrid, the marketing campaign editor. We basically use that for every single action flew through that because SendGrid at the time, still today, used its public APIs for all of its client-side applications, right?

[00:05:02]
But those public APIs weren't necessarily built for building UIs, right? So, a lot of times we would have to kind of do a lot of orchestration and dancing with those APIs. Like, cool actually need to hit these three APIs, wait till they all come back or some subset of that progressive data loading, and put it all in place.

[00:05:20]
So, redux-observable's really great. But also, if you think about it, if you're familiar with React, I think I mentioned a few times during this course, you can make a use observable hook pretty easily, right? Passing an observable that uses use effect, subscribe to it every time it emits, have some use state that you trigger use reducer, right?

[00:05:42]
For whatever you want, and then unsubscribe to it, right? So you can use them, basically, anywhere. And that's why we focus this course on just using Vanilla JavaScript to kind of take it away from, most courses on Angular will have RxJS in context of Angular, right? So, part of the reason in this fundamentals course was just to separate it from any framework, and so you can lock it into whether it's React or View.

[00:06:05]
I'm sure you can put a number if you tried, I have not, or in my case Svelte, we kind of use it for both the stores or a similar thing. And you can also, it's two lines to wrap a RxJS observable in the Svelte store. But also that kind of I've triggered something, here are all the things I wanna happen, here are the end result, I think is the most important part and that can just be JavaScript like in an agnostic format.

[00:06:28]

>> Somewhat to follow on to your question where I've used reactive stream handlers successfully is when I'm getting 120 data points a second coming in from the streamer that I need to send somewhere else. So I can create a stream handler around it, fork it to disk on one side for the console logging off one and send to another endpoint.

[00:06:52]
So, in that scenario, you're probably gonna end up with a large number or a lot of turnover if you have a sliding window. I've only used these, you wouldn't notice memory hit on the data that's turning over. Do you have a sense of how this would work on a larger dataset if we use something like filter to we're placing 10% of our data at every update?

[00:07:15]

>> Yeah, so, I'm currently experimenting this right now. For ten portals dashboard, you can have anywhere from a few workflows running to, theoretically, millions, right? At this point, I'm currently stress testing it. I'm up to 150,000 which is still not even the scale you're talking about. It's tricky cuz I'm also keeping all that data in memory, too.

[00:07:43]
So my memory footprint is currently large, but I'm also effectively building a giant object of data in memory. But the actual, I was shocked, I basically sat down to run these benchmarks, expecting to come up with a list of work, and it wasn't that bad.
>> Wow.
>> Right, DOM rendering was worse than showing out to the page where I was thrashing the DOM too much, was a bigger problem than processing the data in that case.

[00:08:15]
That said, anything at scale gets weird. Also, like we said before, request idle callback for scheduling stuff. So, for a lot of these, request idle callback is a kind of like set timeout or request animation frame. But it's, browser, can we give you a function to call when you're not busy?

[00:08:33]
[LAUGH] And you tend to slot into, so, if the user's doing something, I won't be refreshing the API, right? But if they stop moving that mouse for a little bit, and hang out for a little bit, then, I will go ahead. And you can even, there is, I think, we talked a little bit about from event, there is I think, from animation frame, as well.

[00:08:55]
But even an abstraction around that, like we saw in that first test, where you have an observer that says request animation frame call next to get the next value. And do stuff along those lines. If there's not the API you want, you can then use that kind of base version.

[00:09:08]
But, yeah, for that standard stuff especially with the DOM request idle callback has been super helpful. And I think it's browser only, so, I don't think you have it in Node. But you also don't have users touching stuff in Node. [LAUGH] So that's helpful, as well.
>> Is there any additional resources for recipes for common scenarios?

[00:09:28]

>> That's a great question, let's see.
>> Marble diagrams?
>> [LAUGH] Notes I made it through how many hours avoiding those, [LAUGH]. Yeah, I mean the Docs are also, I think, once you get the fundamental concepts like I do refer to the Docs a lot. So it's just RxJS.dev.

[00:09:54]
To be clear to also if you're using in React or if you're using with Redux, right? Redux is also framework agnostic even though it has a buddy that it hangs out with all the time. I think redux-observable's really good. RxJS, the docs themselves are, I don't know how to get to it from here, but I always know that I can just do it's like API.

[00:10:16]
No, there it is, I can get the creators over here. And then the operators. And then a lot of times I will kind of go through and see which one speaks to me a lot of times. And just kind of figure out, cuz a lot of times, these are common problems, you're gonna have weird one-off issues in your code base that are just unique to you and the complexities of the problem you're trying to solve.

[00:10:43]
So, in here, you can kind of figure out here, as well. So, I spent a lot of time on this page and then also the previous one of just the index tab. These are all the creators. So, you can see that of is in here, from, and then the operators, as well, to kind of work through all of them.

[00:11:01]
But, for me, it was just watching a bunch of random YouTube videos that I have found piecemeal, one at a time, [LAUGH], so.
>> Would do you recommend RxJS instead of redux-saga in a React app for analytics, very specific?
>> Yeah, so, redux-saga is another way to asynchronously handle middleware using the saga pattern.

[00:11:23]
I am embarrassed to tell you the story of how we chose redux-observable and RxJS over redux-saga, but I will tell it to you because you've asked. This was four years ago, five years ago, we were rearchitecting our frontend code base at the time, and going from rails and some flux, but we didn't know flux.

[00:11:49]
So we implemented our own flux, and then some jQuery and a more modern version of it. And the choices were redux-thunk, which has gotten better with some of the Redux toolkit stuff. To be clear, anything I'm saying ill about redux-thunk I'm saying about 2017 redux-thunk. And then there are the choices of redux-saga and redux-observable.

[00:12:13]
Redux-saga uses generator functions, which as we saw in the very beginning of this course, is not wildly different in its syntax, right? It has a set of values generated over time, so on and so forth. But it has a little star on the function, and one of the engineers on my team didn't like the syntax.

[00:12:36]
So, four or five years ago, we committed to redux-observable cuz they seemed about equal at the time, but that was our decision-making process. So, mostly, I continue to go with RxJS cuz I am familiar with it. And it has, we built a very large code base and that was never the problem, right?

[00:12:55]
And we had to do a lot of questionable orchestration of APIs to ship the features that we needed to ship when we didn't have the APIs that we wanted to. And we're basically very cleanly able to do all of them. That does not mean you couldn't get that done in redux-saga, but we, at a certain point, given two options, made a choice.

[00:13:15]
And unlike a lot of technology choices, we made a choice and then didn't regret it, right? [LAUGH] So, if RxJS wants a testimonial for the webpage, I'll happily say, we chose it and didn't regret it a few years later. Which is the highest praise, I think, you can give any technology.

[00:13:34]
Thank you all, thank you so much.
>> [APPLAUSE]

