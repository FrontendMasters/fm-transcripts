WEBVTT

1
00:00:00.000 --> 00:00:03.021
And with that, I think we're gonna
start jumping into how do we actually

2
00:00:03.021 --> 00:00:04.368
play around with this, right?

3
00:00:04.368 --> 00:00:07.453
It's the initial question is great
observables, they're wonderful.

4
00:00:07.453 --> 00:00:08.078
All right.

5
00:00:08.078 --> 00:00:09.995
How do I get my hands on
one of these observables?

6
00:00:09.995 --> 00:00:12.990
How does one make an observable?

7
00:00:12.990 --> 00:00:13.531
Right.

8
00:00:13.531 --> 00:00:16.938
And there is like an observable
constructor where you can like hand roll

9
00:00:16.938 --> 00:00:18.090
your own observables.

10
00:00:18.090 --> 00:00:22.846
But in practice, we have a bunch of
very simple utility functions that will

11
00:00:22.846 --> 00:00:24.818
produce an observable for us.

12
00:00:24.818 --> 00:00:27.867
So what we're gonna do is,
we're gonna take a look at a few of them,

13
00:00:27.867 --> 00:00:29.163
kind of just on a high level.

14
00:00:29.163 --> 00:00:33.784
And then we're gonna actually kind of play
around with them, get our hands dirty and

15
00:00:33.784 --> 00:00:36.662
write some tests,
just to kind of see how they work.

16
00:00:36.662 --> 00:00:42.895
So let's kind of take a brief tour, and
then we will jump in and play around.

17
00:00:42.895 --> 00:00:47.810
So the first helpful utility
method is one called of, right.

18
00:00:47.810 --> 00:00:52.239
And of, takes a series of arguments and
what it does it makes

19
00:00:52.239 --> 00:00:57.661
an observable of those values does,
right what it says on the tin right.

20
00:00:57.661 --> 00:01:02.730
The other thing to keep in mind as
we look at this first example is

21
00:01:02.730 --> 00:01:07.622
you'll notice that I named it
example dollar sign, right.

22
00:01:07.622 --> 00:01:11.370
And we put it on the end because jQuery
already owns putting on the beginning

23
00:01:11.370 --> 00:01:12.750
you don't have to do this.

24
00:01:12.750 --> 00:01:15.884
If you hate this,
the dollar sign doesn't mean anything.

25
00:01:15.884 --> 00:01:18.152
The dollar sign is just
a regular JavaScript variable.

26
00:01:18.152 --> 00:01:23.764
It is helpful especially in a world where
you might not have TypeScript, right?

27
00:01:23.764 --> 00:01:27.902
It is helpful for you and your friends
to know that this is an observable

28
00:01:27.902 --> 00:01:31.281
stream that we're dealing with and
not a regular value.

29
00:01:31.281 --> 00:01:34.889
Again something like TypeScript might
all the intelligence in the world might

30
00:01:34.889 --> 00:01:35.600
handle this for

31
00:01:35.600 --> 00:01:39.442
you don't necessarily have to do it falls
under the list of conventions that we do.

32
00:01:39.442 --> 00:01:43.453
Like giving classes and constructors and
JavaScript capital letters.

33
00:01:43.453 --> 00:01:47.884
All right, using dollar signs
in the beginning of like jQuery,

34
00:01:47.884 --> 00:01:52.000
capitalizing react components so
on and so forth, right?

35
00:01:52.000 --> 00:01:54.075
That is basically what it means
there's nothing special there.

36
00:01:54.075 --> 00:01:56.352
It does not have any magic in and
of itself.

37
00:01:56.352 --> 00:01:58.284
It is just an indicator.

38
00:01:58.284 --> 00:02:03.359
Now because it is a stream, right,
we can't just use the observable

39
00:02:03.359 --> 00:02:07.663
whenever we want,
we have to subscribe to it, all right?

40
00:02:07.663 --> 00:02:11.718
And when you subscribe to it,
it will then, run through the values and

41
00:02:11.718 --> 00:02:12.764
the observable.

42
00:02:12.764 --> 00:02:16.711
Now of, just basically, shoots them all
right at you super fast, all right?

43
00:02:16.711 --> 00:02:20.250
Basically synchronously they will
all fire, immediately at you.

44
00:02:20.250 --> 00:02:22.536
And you can deal with them at that moment.

45
00:02:22.536 --> 00:02:26.265
So of, is kind of its utility when we're
obviously gonna build to bigger and

46
00:02:26.265 --> 00:02:29.703
better things are things like,
maybe as click events come in, well,

47
00:02:29.703 --> 00:02:30.888
that could be an event.

48
00:02:30.888 --> 00:02:33.256
I want my stream we might need
a different helper for that.

49
00:02:33.256 --> 00:02:37.500
From API requests, so on and so
forth, but of is the simplest one.

50
00:02:37.500 --> 00:02:42.174
It takes a series of arguments and
basically shoots them all at you in

51
00:02:42.174 --> 00:02:46.860
an observable incredibly quickly,
also known as synchronously.

52
00:02:46.860 --> 00:02:51.925
It has a friend,
that's friend is called from.

53
00:02:51.925 --> 00:02:54.211
So this gonna take the value is raw,

54
00:02:54.211 --> 00:02:58.539
whatever arguments, they're going in
there each value so on and so forth.

55
00:02:58.539 --> 00:03:03.234
From we'll deal with a certain
set of values that it can try to

56
00:03:03.234 --> 00:03:05.085
turn into an observer.

57
00:03:05.085 --> 00:03:08.776
All right, so arrays are good for
that right, you just work your way through

58
00:03:08.776 --> 00:03:12.480
the array really anything that is quote
unquote an iterable in JavaScript.

59
00:03:12.480 --> 00:03:17.272
So anything that has symbol dot
iterator so that's basically, arrays,

60
00:03:17.272 --> 00:03:19.447
generators, things like that.

61
00:03:19.447 --> 00:03:23.282
It will basically work through
the values of that data structure and

62
00:03:23.282 --> 00:03:24.300
send them to you.

63
00:03:24.300 --> 00:03:28.426
It'll also work with promises because
that is, a really great example of like,

64
00:03:28.426 --> 00:03:31.046
it'll basically wait for
the promise to resolve.

65
00:03:31.046 --> 00:03:34.351
And if the promise resolves,
then it will give you that value as well.

66
00:03:34.351 --> 00:03:38.379
So anything that is not necessarily
just a regular primitive value or

67
00:03:38.379 --> 00:03:41.156
just the kind of pure thing
that you wanna use but

68
00:03:41.156 --> 00:03:44.637
you'd like to turn one data
structure into an observable.

69
00:03:44.637 --> 00:03:47.428
From is your buddy for
doing that as well, and

70
00:03:47.428 --> 00:03:51.614
you can do generator functions you
just have to instantiate them and

71
00:03:51.614 --> 00:03:55.446
it will basically work through
all the things that it yields.

72
00:03:55.446 --> 00:03:58.607
We'll kind of see that in a little bit.

73
00:03:58.607 --> 00:04:00.081
Like I said, promises.

74
00:04:00.081 --> 00:04:02.205
Once the promise resolves,
you get the value.

75
00:04:02.205 --> 00:04:07.772
So, from is a pretty useful tool as well
for turning other things into observables.

76
00:04:07.772 --> 00:04:14.092
All right let's actually like let's
look at the difference for a second.

77
00:04:14.092 --> 00:04:17.970
From is useful whenever it's kind
of like an observable that we want

78
00:04:17.970 --> 00:04:18.998
to turn into one.

79
00:04:18.998 --> 00:04:22.237
So that is arrays and
promises and generators.

80
00:04:22.237 --> 00:04:26.063
Objects that have a subscribe method so
like anything that we would call like

81
00:04:26.063 --> 00:04:29.352
observable like that adheres to
the interface of an observable,

82
00:04:29.352 --> 00:04:31.355
it will turn it into a real observable.

83
00:04:31.355 --> 00:04:35.014
So like svelte stores, for
instance, have a subscribe method.

84
00:04:35.014 --> 00:04:39.242
You can basically turn it into
an observable read through the values, so

85
00:04:39.242 --> 00:04:40.224
on and so forth.

86
00:04:40.224 --> 00:04:44.687
For the nodding in the room like
spelt stores are basically like what

87
00:04:44.687 --> 00:04:48.614
subjects in ArcGIS so
they play very nice nicely together.

88
00:04:48.614 --> 00:04:50.239
There's nothing like an observable.

89
00:04:50.239 --> 00:04:54.960
So any kinda primitive value and object
that doesn't necessarily adhere to the API

90
00:04:54.960 --> 00:04:57.658
contract and observable,
we're gonna use and

91
00:04:57.658 --> 00:05:01.313
just kinda shoot it through
the observable stream in this case.

92
00:05:01.313 --> 00:05:05.259
All right, so if you looked at the
previous slide, you saw that we just gave,

93
00:05:05.259 --> 00:05:08.315
we had subscribe, and
then we gave it a callback function.

94
00:05:08.315 --> 00:05:10.770
Right, and that was what to
do when every value happened.

95
00:05:10.770 --> 00:05:12.045
But that's great.

96
00:05:12.045 --> 00:05:15.415
That assumes that everything
goes right all the time, right.?

97
00:05:15.415 --> 00:05:20.061
And I don't know about you, but I don't
write code that does that all the time.

98
00:05:20.061 --> 00:05:24.130
So there are two ways that we can
deal with the other pieces of this.

99
00:05:24.130 --> 00:05:26.515
And if this stresses you out, it should.

100
00:05:26.515 --> 00:05:32.249
You can actually pass it three
functions and it's tricky, right?

101
00:05:32.249 --> 00:05:36.949
This actual syntax is currently
deprecated but not removed, but

102
00:05:36.949 --> 00:05:40.547
still common enough that
we should talk about it.

103
00:05:40.547 --> 00:05:43.719
It will take three functions as arguments.

104
00:05:43.719 --> 00:05:46.087
The first one is what to do
when a value comes through.

105
00:05:46.087 --> 00:05:50.799
The second one is what to do
when a error comes through if

106
00:05:50.799 --> 00:05:55.726
something goes wrong something
throws midway through.

107
00:05:55.726 --> 00:05:59.840
And the third one is what to do when
it's complete when the stream closes and

108
00:05:59.840 --> 00:06:04.882
it's all done so if you have 1,2,3,4,
fours last value the observable completes.

109
00:06:04.882 --> 00:06:09.550
Not all observables complete,
but 1, 2, 3, 4 does complete,

110
00:06:09.550 --> 00:06:12.216
what you wanna do in that case, right?

111
00:06:12.216 --> 00:06:16.962
The reason why the syntax is somewhat
squirrely is what happens if you do with

112
00:06:16.962 --> 00:06:21.653
new values and also a completion event but
you don't care about there's.

113
00:06:21.653 --> 00:06:25.016
We got like passing null in there
as a second argument, right.

114
00:06:25.016 --> 00:06:29.187
If you only care about
the completion of the observable

115
00:06:29.187 --> 00:06:31.916
then it's no your callback gross.

116
00:06:31.916 --> 00:06:34.242
So you can see that as well.

117
00:06:34.242 --> 00:06:35.568
So we don't like that.

118
00:06:35.568 --> 00:06:37.391
It's deprecated.

119
00:06:37.391 --> 00:06:42.460
There's kind of a different syntax,
which is kind of what we might see more

120
00:06:42.460 --> 00:06:47.376
commonly which is you can give it
an object with next error and complete.

121
00:06:47.376 --> 00:06:49.890
And so in this case,
if you only care about errors,

122
00:06:49.890 --> 00:06:51.710
you give it an object with error key.

123
00:06:51.710 --> 00:06:55.376
If you only care about complete, you
give it an object with the complete key.

124
00:06:55.376 --> 00:06:57.789
If you only care about next,
whatever, right?

125
00:06:57.789 --> 00:07:01.664
Whatever combination that you care about,
you can subscribe to it and

126
00:07:01.664 --> 00:07:03.905
have those callback functions called.

127
00:07:03.905 --> 00:07:06.714
So the rule of thumb that
we're going to kind of

128
00:07:06.714 --> 00:07:11.266
use here is if you need an error complete
event we're gonna use the object.

129
00:07:11.266 --> 00:07:15.574
Most of the times we only care about
the next event that comes through,

130
00:07:15.574 --> 00:07:19.244
right in that case we can just
pass it a function and move on.

131
00:07:19.244 --> 00:07:24.354
Right, so it only only if you
explicitly care do we need that second

132
00:07:24.354 --> 00:07:30.768
syntax otherwise just the regular passing
at one function of what we wanna do with.

133
00:07:30.768 --> 00:07:34.942
We'll go ahead and
work for us pretty well.

134
00:07:34.942 --> 00:07:40.720
All right, we have a site
RxJSfundamentals.netlify dot.app.

135
00:07:40.720 --> 00:07:43.621
And in other is a repo.

136
00:07:43.621 --> 00:07:46.847
And that repo has a bunch
of sample applications.

137
00:07:46.847 --> 00:07:52.421
And it has some tests and
it has everything I kind of wrote in here.

138
00:07:52.421 --> 00:07:57.299
And what we're going to do is kind of take
it for a spin and first I am going to

139
00:07:57.299 --> 00:08:01.787
kind of show us effectively like just
some of the syntax and action so

140
00:08:01.787 --> 00:08:05.591
we can see it and
then you're gonna kind of take it along.

141
00:08:05.591 --> 00:08:10.575
&gt;&gt; Are you gonna cover any
integration with frameworks or

142
00:08:10.575 --> 00:08:12.896
TypeScript
&gt;&gt; No to TypeScript,

143
00:08:12.896 --> 00:08:17.362
just brief mentions of frameworks at
the very end this is just getting

144
00:08:17.362 --> 00:08:20.212
comfortable with the basics of this point.

145
00:08:20.212 --> 00:08:25.248
In ArcGIS 7,
TypeScript is pretty well supported.

146
00:08:25.248 --> 00:08:28.632
It's just you have to basically say
what the value starting out is.

147
00:08:28.632 --> 00:08:30.697
And if you're gonna pipe it
through a bunch of operators,

148
00:08:30.697 --> 00:08:32.057
which we'll talk about a little bit.

149
00:08:32.057 --> 00:08:35.287
What the value at the end the actual
TypeScript support out of the box is

150
00:08:35.287 --> 00:08:36.015
fairly solid.

151
00:08:36.015 --> 00:08:40.405
But we'd find that under
advanced basics or advanced.

152
00:08:40.405 --> 00:08:42.800
&gt;&gt; How does it know when
the event is completed?

153
00:08:42.800 --> 00:08:45.545
Is there an underlying generator.

154
00:08:45.545 --> 00:08:48.905
&gt;&gt; Under the hood, yeah, generates and
so some of them don't complete, right?

155
00:08:48.905 --> 00:08:53.704
If you are in a little bit we'll see
the idea of one that kind of takes

156
00:08:53.704 --> 00:08:55.180
an event listener.

157
00:08:55.180 --> 00:08:57.718
Well, an event listener never completes,
right?

158
00:08:57.718 --> 00:09:02.518
Or the could be a interval which might
not complete unless you step in and

159
00:09:02.518 --> 00:09:04.367
tell it when it completes.

160
00:09:04.367 --> 00:09:09.359
So a complete event if we can whip up some
code in a little second we're gonna see

161
00:09:09.359 --> 00:09:11.856
this, but in the observable itself and

162
00:09:11.856 --> 00:09:17.018
whatever you have is creating one where
it might iterate through all the values.

163
00:09:17.018 --> 00:09:19.855
There's a method under
the hood called complete.

164
00:09:19.855 --> 00:09:21.542
There's a method called next.

165
00:09:21.542 --> 00:09:25.999
When you call the next method inside of
the observable which looks a lot like

166
00:09:25.999 --> 00:09:26.784
generator.

167
00:09:26.784 --> 00:09:31.525
It will send the next value out when
you call complete that signifies that

168
00:09:31.525 --> 00:09:34.873
this is now completed some
of them never complete.

169
00:09:34.873 --> 00:09:38.411
Some of them will complete after a very
brief amount of time you can kind of

170
00:09:38.411 --> 00:09:39.862
control all of those things.

171
00:09:39.862 --> 00:09:43.576
And we'll look at how to take
observables are never complete and

172
00:09:43.576 --> 00:09:45.793
make them complete so on and so forth.

173
00:09:45.793 --> 00:09:50.456
But effectively if you if familiar
with generators you can think of

174
00:09:50.456 --> 00:09:54.046
next like yield and
complete like return, right.

175
00:09:54.046 --> 00:09:58.619
So you can have number of values,
if you're writing your own from scratch,

176
00:09:58.619 --> 00:10:02.342
then you could theoretically
call these methods otherwise.

177
00:10:02.342 --> 00:10:06.302
We'll call it at the end of that list of
values from we'll call it either when it

178
00:10:06.302 --> 00:10:07.817
hits the end of the iterable.

179
00:10:07.817 --> 00:10:12.355
In this case, a generator or the array or
the promise resolves, there's usually

180
00:10:12.355 --> 00:10:16.720
a thing that will trigger the completion
under the hood in the library itself.

