WEBVTT

1
00:00:00.000 --> 00:00:02.791
Can we use the catch error operator?

2
00:00:02.791 --> 00:00:06.425
&gt;&gt; I love that question.

3
00:00:06.425 --> 00:00:13.065
The question was can we use
the catch error operator?

4
00:00:13.065 --> 00:00:18.410
We can, right in this situation right but
we have to kind of changed

5
00:00:18.410 --> 00:00:23.468
the way cuz we implemented this
because even if it's a 400 or

6
00:00:23.468 --> 00:00:27.202
500 fetch does not throw an error, right?

7
00:00:27.202 --> 00:00:30.060
It will simply say
the response is not okay.

8
00:00:30.060 --> 00:00:33.472
But that doesn't mean we can't
throw an error [LAUGH] Right?

9
00:00:33.472 --> 00:00:36.338
We're well within our rights to
throw an error in this case.

10
00:00:36.338 --> 00:00:39.309
So we can say, throw new error

11
00:00:42.985 --> 00:00:47.593
Something went wrong right
now we've thrown an error and

12
00:00:47.593 --> 00:00:53.065
we've created a bad thing for
ourselves if one throws an error it's

13
00:00:53.065 --> 00:00:58.554
kinda like throwing like an apple
pie in the air directly above you.

14
00:00:58.554 --> 00:01:03.576
You can throw an apple pie,
you should be prepared to catch it, right?

15
00:01:03.576 --> 00:01:07.343
That's not my best analogy,
but we're gonna go with it.

16
00:01:07.343 --> 00:01:09.575
So the question was,
can we use catch error?

17
00:01:09.575 --> 00:01:13.324
We can we just need to make sure that
like we throw errors in the cases that we

18
00:01:13.324 --> 00:01:13.936
want to do.

19
00:01:13.936 --> 00:01:19.268
Do with so
we have an operator called catchError and

20
00:01:19.268 --> 00:01:24.352
instead of letting
the observable error out what

21
00:01:24.352 --> 00:01:28.943
it does is it allows you to catch it,
right?

22
00:01:31.221 --> 00:01:35.321
And so we could say like return to
basically that logic we had before.

23
00:01:40.926 --> 00:01:43.130
I think that's an error
object in this case,

24
00:01:43.130 --> 00:01:45.511
we'll find out I'll get
yelled at if it's not.

25
00:01:45.511 --> 00:01:51.484
Well, so just cancel there too.

26
00:01:51.484 --> 00:01:55.414
All right, let's see,
that should do the trick.

27
00:01:55.414 --> 00:01:59.760
If not, we'll find out together, and
I'll look confused for a second.

28
00:01:59.760 --> 00:02:01.730
So we throw there.

29
00:02:01.730 --> 00:02:05.095
We haven't caught it.

30
00:02:05.095 --> 00:02:09.365
Mostly because we'll play a fun game.

31
00:02:09.365 --> 00:02:10.559
Why didn't I catch the error.

32
00:02:19.317 --> 00:02:20.968
You're outside.

33
00:02:20.968 --> 00:02:23.407
Yep.
So it was on the outer observable.

34
00:02:23.407 --> 00:02:27.163
It's really this inner
one that had the error.

35
00:02:27.163 --> 00:02:30.390
So that is a common case
which is the inner one.

36
00:02:30.390 --> 00:02:32.662
Blew up nothing caught
it it cascaded outwards.

37
00:02:32.662 --> 00:02:36.300
So you have to catch just like in
JavaScript you have to catch the error

38
00:02:36.300 --> 00:02:38.381
while you're through the erro right?

39
00:02:38.381 --> 00:02:41.031
You can catch it I guess up
the stack in JavaScript but

40
00:02:41.031 --> 00:02:42.768
cause we are constantly erro in it.

41
00:02:48.912 --> 00:02:52.179
It's like it failed, cool.

42
00:02:52.179 --> 00:02:57.216
So yeah, we're seeing on the screen
because we chose to cancel error.

43
00:02:57.216 --> 00:02:58.434
So you can see something went wrong.

44
00:02:58.434 --> 00:03:01.534
We're also seeing it there not because
anything blew up because we said we

45
00:03:01.534 --> 00:03:02.242
wanted to know.

46
00:03:06.530 --> 00:03:10.950
Right so we can see the network failure
but we can see nothing blows up in my code

47
00:03:10.950 --> 00:03:15.166
it's simply we got the 500 back from
the API which the API did 500 but

48
00:03:15.166 --> 00:03:17.149
we recovered we just put a notice.

49
00:03:17.149 --> 00:03:19.310
And we gave it a shot.

50
00:03:19.310 --> 00:03:24.761
All right, so here's the tricky part now,
we can have an API, it can work, we can

51
00:03:24.761 --> 00:03:30.467
show an error message if there's an error,
awesome, we can clear out the error too.

52
00:03:30.467 --> 00:03:35.722
I can say basically actually what I
would probably do is if we try again,

53
00:03:35.722 --> 00:03:38.451
what I would probably say is let's.

54
00:03:45.904 --> 00:03:51.309
Try that out that should clear out
there in between fetches that work,

55
00:03:51.309 --> 00:03:55.629
then we'll have one that
should blow up every so often.

56
00:04:00.061 --> 00:04:03.301
And you can see when it works again,
we clear out the error..

57
00:04:03.301 --> 00:04:04.992
What if we wanted to retry?

58
00:04:04.992 --> 00:04:09.519
How would you do this if you
didn't have an observable.

59
00:04:09.519 --> 00:04:13.235
You want to say I want to try four
times before giving up right?

60
00:04:13.235 --> 00:04:15.915
Cuz we all we all know those API's but

61
00:04:15.915 --> 00:04:20.168
when that works 60% of the time
works every time right?

62
00:04:20.168 --> 00:04:23.096
What happens we want to try
a certain number of times but

63
00:04:23.096 --> 00:04:25.844
not perpetually maybe you
do want to do perpetual.

64
00:04:25.844 --> 00:04:29.679
But let's say we want to retry it four
times what would you do with just regular

65
00:04:29.679 --> 00:04:30.393
JavaScript?

66
00:04:30.393 --> 00:04:31.920
&gt;&gt; Y-loop, you use a y-loop.

67
00:04:31.920 --> 00:04:37.044
&gt;&gt; Y-loop and yeah you basically
have to store in a variable right?

68
00:04:37.044 --> 00:04:40.658
And you iterate over it and all that kind
of thing you could do that like everything

69
00:04:40.658 --> 00:04:43.595
in our JS is the thing that you
could do because it's JavaScript.

70
00:04:43.595 --> 00:04:47.689
You can also write your own virtualDom2,
you can do whatever you want.

71
00:04:47.689 --> 00:04:51.512
But when you don't hit your sprinkles,
you don't come talk to me about it.

72
00:04:51.512 --> 00:04:57.544
One of the options that we have
is this ability to retry, right?

73
00:04:57.544 --> 00:05:03.430
And we can say, okay,
I want to retry four times.

74
00:05:03.430 --> 00:05:06.239
All right I have that one in here too.

75
00:05:06.239 --> 00:05:11.440
So now it will go ahead and will if it
fails for some reason it's going to try it

76
00:05:11.440 --> 00:05:16.829
again if you try it again and try it again
now this one fails one every two times.

77
00:05:16.829 --> 00:05:23.864
So like, ideally, we should see
a success rate at this point and

78
00:05:23.864 --> 00:05:30.400
kind of see in the network like
did it fail this one didn't.

79
00:05:36.102 --> 00:05:38.296
So you see it failed,
and then try it again.

80
00:05:43.087 --> 00:05:47.911
Succesful failed to try it again, right?

81
00:05:47.911 --> 00:05:52.776
It probably won't fail four
times because this is a fake API

82
00:05:52.776 --> 00:05:56.878
that succeeds roughly half the time and
science.

83
00:05:56.878 --> 00:06:01.370
But for the most part like now we can
basically implement retry logic incredibly

84
00:06:01.370 --> 00:06:02.384
easily, right?

85
00:06:02.384 --> 00:06:06.509
We have a pretty like reusable
piece of API fetching code,

86
00:06:06.509 --> 00:06:09.044
which will fetch it throw an error.

87
00:06:09.044 --> 00:06:12.828
If we get a four or 500,
which a promise API doesn't do by default.

88
00:06:12.828 --> 00:06:15.820
It'll catch the error and we can choose
what we want to do with it gracefully.

89
00:06:15.820 --> 00:06:18.454
If it does if it gets
through all four times,

90
00:06:18.454 --> 00:06:22.740
it will eventually hit this catch
error and we can do something with it.

91
00:06:22.740 --> 00:06:25.191
But otherwise,
we can choose to retry it Mark.

92
00:06:25.191 --> 00:06:29.156
&gt;&gt; For me, catch error worked fine
at the same level as exhausted.

93
00:06:32.252 --> 00:06:35.291
&gt;&gt; Yeah, you know what it was I think like
because I was literally console area.

94
00:06:35.291 --> 00:06:36.157
I was like, that's an error.

95
00:06:36.157 --> 00:06:39.362
I wasn't expecting right,
it should bubble up, right?

96
00:06:39.362 --> 00:06:40.362
I think that's fair.

97
00:06:43.217 --> 00:06:44.532
Right.
This one let's try it out.

98
00:06:47.619 --> 00:06:50.045
Cuz I was constant error I
saw like a sea of red and

99
00:06:50.045 --> 00:06:52.487
I'm a little hurt after
the counter incident.

100
00:06:52.487 --> 00:07:00.961
[LAUGH] Yeah, this one is retry now
let's make it fail all the time.

101
00:07:00.961 --> 00:07:09.606
So that it like this will eventually
make it through its four retries.

102
00:07:09.606 --> 00:07:13.330
All right, you can see it tries, it fails.

103
00:07:13.330 --> 00:07:17.731
I guess there's the initial time plus for
retries, right?

104
00:07:17.731 --> 00:07:18.668
And logs we did catch the error.

105
00:07:18.668 --> 00:07:20.285
I could have it outside the pipe.

106
00:07:20.285 --> 00:07:25.235
I was just when I let
the console error happen here.

107
00:07:25.235 --> 00:07:29.669
If I turn this to a console
one it'd be a little

108
00:07:29.669 --> 00:07:34.003
clearer to just to make
it not look the same.

109
00:07:34.003 --> 00:07:37.646
You can change things if you don't
if you miss it slash key while

110
00:07:37.646 --> 00:07:40.811
you're typing doesn't do anything right so
tries and

111
00:07:40.811 --> 00:07:43.860
then we hit the catch errors
situation from before.

