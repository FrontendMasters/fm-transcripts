[00:00:00]
>> So we implemented autocomplete, we could try a little bit of a different pattern. There's a pattern I talked about towards beginning, which is sometimes you hit an API. With that API, you have to hit another API, right you don't get all the data that you need. And sometimes this is intentional, like maybe it's a List View and you have some of the data and then you wanna kind of decorated with more data.

[00:00:24]
Sometimes it's just the API that you got and it is totally on the back end team's backlog to give you a better API, yeah. Way, down on the backlog. It's there though, and you got to do what you gotta do. So these are both situations, both the positive happy version of this and the sad version of it, regardless how we might solve for it is a similar idea.

[00:00:50]
So instead of searching on a keystroke the functionality that we want now we're gonna hit the fetch button and we're gonna get like the Pokemon that matches. And if you saw before we only got the name the ID and the classification. In this case what we wanna do is we wanna get that Pokemon we'll show that data and then we'll find out more, like if I go to an individual one if I say Pika 25, you can see I get a whole bunch of other information, most of which I don't care about, but some of it I do.

[00:01:29]
But so, we wanna change this a little bit, we're gonna steal from a little bit of our previous code as well. But let's go ahead and for now, let's call this old search just so we can don't have to deal with the comment in and out and moving it around.

[00:01:48]
So, instead of the search input like that's an a form, and we went to either I hit Enter, or to hit the button, it'll submit the form that's gonna be when I go fetch one so instead of an autocomplete. We'll maybe got a list of names. In this case, what we wanna do is okay, we have found one that we wanna search for and return it for them, great.

[00:02:12]
So, what we'll do is but first, we don't know the ID, we don't know the ID until the search results come back. We just want the search results the first one that matches, of the first one that matches, we then wanna go get the subsequent data for that Pokemon, right?

[00:02:28]
So we do have one more little helper function they should just bring in right now called render Pokemon, that just shows a different, it's just a different dominant relation thing. It just shows like a div with a name and bigger letters and stuff like that. So let's think this out, we have our search.

[00:02:48]
And that is now gonna be from the form, and what do we care about with the form? What action?
>> Target?
>> Well, first of all what like what event?
>> Inputs.
>> Input work for a search field, but this is what we go submit, alright. So we'll submit, and then that will trigger our pipeline.

[00:03:13]
And so there, now this is interesting because we care, they hit the forum we care about the input field, right? So we could say To the search fields value. So now this will be the contents of the search field just like we had on line 41 currently, great.

[00:03:35]
And then, what we'll do is now we should add that value cuz we don't care about the event target value we care about what's in the search field. We'll go and we will get the Pokemon just like we did before, all right. So this I think most of this will work right?

[00:03:53]
Like we wanna switch map, cuz this way they hit it multiple times we'll get the most recent one. And you can argue maybe this should be an exhaust map, because go get what they got the next time regardless they change it again. Yeah, sure. Whichever one makes you happier.

[00:04:09]
Like again, like sometimes this comes down to nuance on the behavior pattern, knowing that both are an option, how they behave differently is the important part which one you choose to use again depends on your situation. Okay, so what I will probably do at this point is I want to break out the act of getting a search a Pokemon that matches a search term from the getting the additional data.

[00:04:34]
Cuz we know that search slash PIKA, will get me everyone that matches PIKA and the beginning, and then slash 25 will get me the data about that given one. So let's just separate those out so that our observable does not become insane. So we'll say const like search Pokemon.

[00:04:56]
With a search term, this will be very similar to what we have down there. Right, and from there, we're gonna return this piece of it right? It's basically this part of our functionality I shall replace it wholesale right there. So we have the ability to trigger the search, we can take out the chaos in this situation.

[00:05:29]
We can always add this chaos back in, don't worry. And then for the additional data or we can call it like Pokemon data, that's gonna take the. Either the whole PokÃ©mon or the idea it's up to you. And then kind of return. From fetch. And we'll get theoretically we could, I got two endpoints here we could, let's actually shave that off real quick.

[00:06:07]
You probably stored these variables, right, but this will work. So the endpoint for search plus the search term, and this one will be the endpoint, Plus the ID that we're looking for, right and this part remains the same. So, now we have basically factory functions that will produce observables scoped for the fetch requests that we want.

[00:06:32]
You would do something very similar if you're using promises or what have you just kind of go fetch that data, hard coding and all over the place is a way to make yourself sad later. So now, we know that when we when this happens, we wanna go we have the search value.

[00:06:48]
So what's the first thing that we wanna do? Again, we wanna get the first one that matches the search term. We wanna display down the page, and then we wanna go and subsequently get all of the data about that Pokemon, right? So what's the, what operator comes next in this search?

[00:07:05]
Whereas right now I'm just mapping the submission to the value and then moving on with my life.
>> Switch map,
>> Switch map, cuz I wanna go make a request, right? So take whatever happened, I've got now the value as what's coming in here, and we know that this takes a search term.

[00:07:25]
So we could actually theoretically, so let's give ourselves some prettier we'll handle this for us in a second, but let's give ourselves some room in the meantime. Make sure we have that comment at the end we do, so we'll say switch map, and which, what are we switch mapping?

[00:07:43]

>> Search Pokemon.
>> Search Pokemon? Right, and that should give us back exactly what we're looking for. Now, let's actually see, let's do this kind of piece by piece. We've got that in place. We're gonna turn subscribe just to a console log for now, so we can see everything in place.

[00:08:06]
Suite, open up the Console, bigger eyes at slightly and so if I said, You can see we get back that initial data awesome, right? We now have kind of what we need. Let's go ahead and I'm thinking at this point since we have that data, let's do some data transformation here.

[00:08:30]
We'll say, cool, now I wanna plug Pokemon, so if I do that, we should just now get a raw array. Now we only want the first one, two ways I can handle this. One is I could use a map and just grabbed the first one out of the array.

[00:08:55]
The other one is, we know that merge map will take anything observable like, and use from and put it into the stream right. And so what happens if we use RAM on an array. From the very beginning, but it's from on an array
>> What a bunch of observables.

[00:09:16]

>> Get a yeah, I got a stream of all the values in there now right. So I could use a map where I just grab the first thing on the right, that's totally I think I could do. Or I could say, Well figure out a way, so we're just saying like cool map over this return the thing but then turn that array into a stream of values, is effectively the same thing as doing And then merging it together, right?

[00:09:58]
We're saying like take that array and stream them one by one instead of streaming me the array. So we'll go ahead and say merge map, give me the series of them. So if I say, get a stream of every Pokemon that starts with others B and U. Now in this case, I could just render those one by one right I no longer have an array that has I have to iterate over in my DOM manipulation code I could just one by one as they came through, but I only want the first one.

[00:10:28]
What can I do to get that
>> Take one
>> Take one. Take one will get me just the first one be you fetch, I just get Bulbasaur just not an array of one just the raw object. Take one is common enough, that there is another operator does basically the same thing does anyone take a wild guess what it is?

[00:10:53]

>> First? Right good, so first, and yeah, like the other part of the auto importing. Are you auto imported from lodash or ext JS, be you boom, all right? So now, from the search I am switching to the most recent one if I slammed on that button, we could put in all of that same logic that we had before.

[00:11:15]
But I'm getting the first one through and now we could theoretically, Render it again that's just some DOM manipulation code because trust me, watching me write raw DOM manipulation code by hand, it's no one's idea of a good time. So I did it made sure it worked beforehand.

[00:11:40]
Right, you can see a load to the page. This is interesting, loading additional data. Now that's hard coded because basically unless we have the additional data on that object, it shows that, right. So now what we wanna do is upon loading it, we wanna then take that information and fetch additional data.

[00:12:04]
Cool and so what would we do here we have a few options, right? We kind of wanna, this will render it and we'll get the Pokemon back where we can do more stuff, right? Cuz tap, takes whatever you gave it and passes it along. Fair well, what else do we wanna do?

[00:12:22]

>> We could switch map on the get Pokemon.
>> We can switch map on the get Pokemon, right? Now, we could merge map to but y'all have figured out the trick here already and why this becomes problematic. Switch map is probably our right choice, so I will not do the thing where I write the wrong code and trick you, cuz you've already guessed the right answer.

[00:12:47]
So we will switch map to that Pokemon. And in there, what we can do is, we can go ahead and we can get that one as well right. So we've got the Pokemon in this case and we could say, this is this code is gonna have some problems too right so we could say, switch map.

[00:13:15]
And then we'll return, From that Pokemon. And then theoretically we could call render. What we need to do at this point is put it on to that Pokemon object, that we had before. So we've got that. So let's say this point, let's see what we have at this point.

[00:13:42]
Console I'll get at the end, right? So later I get that data. And I could theoretically target that part of the DOM, but the other tricky part is like I could do the first, I could render to the page, then I get this data. I could also subsequently do that as well.

[00:14:05]
There's a few ways that I could do this, I could target that and that would probably enough to get me the data. The other thing I could do is I could kind of try to do them little bit both at the same time, right? So what if we tried this, we'll take our switch map where we have the Pokemon.

[00:14:24]
And we're just gonna store that in a variable for a second. Now we know that if we wanna do anything in ArcGIS, we have to turn even our raw values back into observables. It's kinda like a synchronous code once you start playing with async, everything has to be async, right?

[00:14:41]
The second you have one synchronous function in there like you don't have async code anymore or you just have a headache or bugs. So we'll say. Turn that into an observable. And now we've also got We could go ahead and we could say, Our additional data, we just called data if you wanted to or an additional data.

[00:15:15]
Is get that Pokemon data without Pokemon. And, Put it all together. So here we can just map it. This is kind of what we do a scan earlier, right? We can save our data. So we've got the Pokemon scope, we've got the data in scope. Everything about the Pokemon plus the data.

[00:15:58]
Nope? Right and that out of here we need to return both of those at the same time So it'll pass through that initial one and so here we could actually move this down, so we'll start fetching our data. Try this out You can see that it loads right into passes.

[00:16:32]
Now there is an issue here where, if we slowed this down, we'd be getting all of this we'd be doing all this and then they could theoretically. So we can use a switch map or an exhaust map depending on what we wanna do. If you're like, finish what they did, for some reason, exhaust map, we'll pull this all together.

[00:16:50]
But if we look at this, let's review. We go get the first one, and then we're gonna kind of fire, we'll take showing the initial one if it comes back super fast, cool, do both but then kind of give me both pieces of data. Because when I did them in a stream that problem with the pipe, cool, you had the PokÃ©mon and that data.

[00:17:07]
And then you do the second one then you only have the second piece. Here we're just gonna kind of like, I have a Pokemon maybe we'll get more stuff, and then I'm gonna merge them both here and then keep emitting data. So I can kinda update my data store you could probably do this with a scan as well, but they're just kind of different ways to kinda manipulate the streams and pull them together

