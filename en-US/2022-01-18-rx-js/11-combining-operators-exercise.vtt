WEBVTT

1
00:00:00.560 --> 00:00:02.861
There are two more that
I wanna talk about.

2
00:00:02.861 --> 00:00:07.005
These start to bridge the gap where we
can get a little bit more sophisticated.

3
00:00:07.005 --> 00:00:11.637
And one of the reason why I call them out
is because just simply with their names

4
00:00:11.637 --> 00:00:16.412
and get a little bit confusing take while
and skip while, took some functions,

5
00:00:16.412 --> 00:00:18.707
right, then manipulate the values.

6
00:00:18.707 --> 00:00:23.272
But if you look in that example
right there in this case

7
00:00:23.272 --> 00:00:28.141
it's not necessarily,
there's not a function there,

8
00:00:28.141 --> 00:00:33.428
skipUntil and takeUntil rely
on other observables, right?

9
00:00:33.428 --> 00:00:36.943
Which means when they show up,
right this observable

10
00:00:36.943 --> 00:00:41.565
will then subscribe to those
observables and basically it will skip.

11
00:00:41.565 --> 00:00:44.551
In this case we have a timer
that goes off after two seconds,

12
00:00:44.551 --> 00:00:47.495
we have a timer that goes off
after seven seconds, right?

13
00:00:48.905 --> 00:00:52.312
This case the interval is
gonna be pumping out values.

14
00:00:52.312 --> 00:00:57.556
However, it's gonna skip them all
in total that timer goes off till

15
00:00:57.556 --> 00:01:03.446
values emitted from first timer then
it will start letting values through.

16
00:01:03.446 --> 00:01:07.996
In total there's an omission
from takeUntil, right, and

17
00:01:07.996 --> 00:01:14.013
then it will stop listening to any values
effectively complete at that point.

18
00:01:14.013 --> 00:01:20.376
Now, if only somebody had a not
great counter somewhere that

19
00:01:20.376 --> 00:01:26.379
was manually subscribing and
unsubscribing to values.

20
00:01:26.379 --> 00:01:30.134
This turns out that we do, right?

21
00:01:30.134 --> 00:01:35.165
So, if you think about our counter
right now, we have the ability,

22
00:01:35.165 --> 00:01:39.668
we have the start buttons that
are emitting events, right,

23
00:01:39.668 --> 00:01:42.880
of any shape and form, right?

24
00:01:42.880 --> 00:01:47.167
We have this interval that we want to
start and stop based on those buttons.

25
00:01:47.167 --> 00:01:52.178
What my challenge for
you is, can you rewire our

26
00:01:52.178 --> 00:01:57.070
counter so
that it is skipping values in toll.

27
00:01:57.070 --> 00:01:59.966
Someone hits the Start button and

28
00:01:59.966 --> 00:02:05.767
it will take them until someone
hits the Pause button, all right?

29
00:02:05.767 --> 00:02:08.195
Don't worry about too much about
the values you see on the screen.

30
00:02:08.195 --> 00:02:11.497
The idea is we don't want it
incrementing or at all,right,

31
00:02:11.497 --> 00:02:16.390
whatever value increments to we don't
care at this point we'll fix that later.

32
00:02:16.390 --> 00:02:19.619
But what we wanna do is remove
that global variable and

33
00:02:19.619 --> 00:02:23.583
basically say we have the streams
of clicks on those two buttons.

34
00:02:23.583 --> 00:02:28.411
And we will start counting and updating
the DOM when the Start button hits and

35
00:02:28.411 --> 00:02:31.515
we will stop when the Pause button hits,
right?

36
00:02:31.515 --> 00:02:37.173
So we're gonna use takeUntil and
skipUntil, we could use scan as well.

37
00:02:37.173 --> 00:02:41.067
That's a little bonus just worry about
getting the DOM to like start and stop.

38
00:02:41.067 --> 00:02:44.550
And we'll figure out how we could
also use scan as well along the way.

