WEBVTT

1
00:00:00.200 --> 00:00:05.013
Making streams, is fine and good, and
we've done some stuff with those streams,

2
00:00:05.013 --> 00:00:07.650
we have manipulated the DOM predominantly.

3
00:00:07.650 --> 00:00:09.951
We've occasionally logged to the console.

4
00:00:09.951 --> 00:00:16.220
But as these events come through,
the ability to do stuff with them,

5
00:00:16.220 --> 00:00:21.680
is I think where we start to
find the power of arc JS.

6
00:00:21.680 --> 00:00:26.049
So, really when we talk about operators,
we're gonna talk about this,

7
00:00:26.049 --> 00:00:29.994
like as effectively a story in
three parts, part one, we're just

8
00:00:29.994 --> 00:00:34.659
gonna talk about some of the basic like
data manipulation operators, right?

9
00:00:34.659 --> 00:00:39.038
These are not dissimilar, from what you
might be familiar with like in lodash, or

10
00:00:39.038 --> 00:00:40.630
even on the array prototype.

11
00:00:41.740 --> 00:00:45.991
Harkens back to the very beginning
of this, when I said, when I quoted

12
00:00:45.991 --> 00:00:50.490
from the arc JS documentation,
that RX js is like lodash for events.

13
00:00:50.490 --> 00:00:55.770
Well, yeah, that also means that
some of the methods like lodash has,

14
00:00:55.770 --> 00:00:58.324
are common for our shares as well.

15
00:00:58.324 --> 00:01:01.937
We'll start with these,
a lot of them will seem somewhat familiar,

16
00:01:01.937 --> 00:01:06.045
at least intuitive, but what I want you
to pay attention to, as we go through,

17
00:01:06.045 --> 00:01:06.877
is the syntax.

18
00:01:06.877 --> 00:01:09.211
The syntax could be slightly different,

19
00:01:09.211 --> 00:01:11.819
than when you might be
used to like on an array.

20
00:01:11.819 --> 00:01:15.460
On array, you can kinda chain the methods,
as you go through.

21
00:01:15.460 --> 00:01:19.970
The concept is the same, but the syntax
is gonna look slightly different.

22
00:01:19.970 --> 00:01:24.910
And for a very good reason they'll
kind of explain along the way.

23
00:01:24.910 --> 00:01:29.770
So we will kind of start with this
kind of fibonacci sequence right here.

24
00:01:29.770 --> 00:01:33.055
Right, now this one as we kinda
like the question we had earlier,

25
00:01:33.055 --> 00:01:34.920
was like this one will go on forever.

26
00:01:34.920 --> 00:01:38.220
So if you were to just subscribe to this,

27
00:01:38.220 --> 00:01:43.962
you would lock up the main thread,
and bad things would happen right?

28
00:01:43.962 --> 00:01:47.875
So, you would have to
do something like this.

29
00:01:47.875 --> 00:01:51.479
You'd have to say, okay, cool,
I wanna fibonacci sequence,

30
00:01:51.479 --> 00:01:55.380
of a certain number of iterations,
and then stop, right?

31
00:01:55.380 --> 00:01:59.884
But, again, the promise of RxJS is that we
can take these streams, and we can choose

32
00:01:59.884 --> 00:02:03.762
as the consumer, when we want to start,
and when we wanna stop, right?

33
00:02:03.762 --> 00:02:07.910
We don't need the interval at the time is
defined to know when to stop counting.

34
00:02:07.910 --> 00:02:10.487
We'll stop counting when we
say we're gonna stop counting.

35
00:02:10.487 --> 00:02:15.997
We kinda of like take that control
in our own hands at this point.

36
00:02:15.997 --> 00:02:23.390
So, every observable on top of, everything
else has this thing called a pipe method.

37
00:02:23.390 --> 00:02:29.030
And a pipe method, takes one or
more operators, right?

38
00:02:29.030 --> 00:02:33.710
And, those operators kind of run
through one after the other.

39
00:02:33.710 --> 00:02:37.433
And, each one will manipulate
the values that come through, and

40
00:02:37.433 --> 00:02:39.440
pass it along to the next one.

41
00:02:39.440 --> 00:02:43.920
So similar to method chaining,
also similar to usually the pipe or

42
00:02:43.920 --> 00:02:45.289
chain, in lodash.

43
00:02:45.289 --> 00:02:49.811
In a lot of like functional programming
libraries, there is some version of this,

44
00:02:49.811 --> 00:02:53.621
where you can kind of just take a value
and keep moving it along the way,

45
00:02:53.621 --> 00:02:55.192
manipulating it over time.

46
00:02:55.192 --> 00:02:58.576
Where our stress gets interesting with
this, it's not only can you double

47
00:02:58.576 --> 00:03:02.229
a number, which is what we're gonna start
with and stuff along those lines, but

48
00:03:02.229 --> 00:03:06.070
you could also say like, cool,
I wanna like space these out over time.

49
00:03:06.070 --> 00:03:09.298
Or, I want to only take every nth value,
or

50
00:03:09.298 --> 00:03:15.400
like if the rage clicking on that button,
wait until they chill out a little bit,

51
00:03:15.400 --> 00:03:20.428
and then we'll go respond with
requests in a reasonable fashion,

52
00:03:20.428 --> 00:03:23.160
before we slam our own API, right?

53
00:03:23.160 --> 00:03:26.959
And all of those kinda things, giving us
the ability to kind of control the flow.

54
00:03:26.959 --> 00:03:29.875
So we'll start with some of
the basic kind of just operators for

55
00:03:29.875 --> 00:03:31.330
manipulating the data.

56
00:03:31.330 --> 00:03:34.503
Eventually, we are going to
move into some of the ones,

57
00:03:34.503 --> 00:03:38.554
where we kind of manipulate time
a little bit, and have rules based on,

58
00:03:38.554 --> 00:03:41.740
kind of the time space continuum or
what we wanna do.

59
00:03:41.740 --> 00:03:44.872
And finally, we'll look at some
of the ones that allow us to kind

60
00:03:44.872 --> 00:03:49.600
of take multiple streams and kind of,
combine and control them as we go along.

61
00:03:49.600 --> 00:03:52.670
So, we'll start to play
around with this in a second.

62
00:03:52.670 --> 00:03:58.072
But, if we look,
we have this one called take, right?

63
00:03:58.072 --> 00:04:04.190
And take was solve, that initial
problem that we had earlier, right?

64
00:04:04.190 --> 00:04:09.670
Where, we had an infinite generator, that
was gonna spit out values forever, right?

65
00:04:09.670 --> 00:04:12.050
It can still be its infinite self.

66
00:04:12.050 --> 00:04:16.433
We're just basically saying,
I'm gonna take 10 values from you.

67
00:04:16.433 --> 00:04:18.418
I'm gonna unsubscribe, right?

68
00:04:18.418 --> 00:04:22.318
[LAUGH] After that, we're done here,
I'm going home, right?

69
00:04:22.318 --> 00:04:26.960
And so, you can now you don't have to have
all that logic in the generator itself.

70
00:04:26.960 --> 00:04:32.164
But you can, have it in whatever is
consuming it, can choose how many

71
00:04:32.164 --> 00:04:37.572
values it wants, and you kind of begin
to manipulate so on and so forth.

72
00:04:37.572 --> 00:04:40.541
Cool, the other one its friend is skip.

73
00:04:40.541 --> 00:04:44.041
Skip will skip the first number of values,
this one is dangerous or

74
00:04:44.041 --> 00:04:47.741
fibonacci sequence, because is infinite,
so you gotta be careful.

75
00:04:47.741 --> 00:04:50.042
We have other ones like take while, and

76
00:04:50.042 --> 00:04:53.690
skip while, which will very much
act like a filter function.

77
00:04:53.690 --> 00:04:58.130
Where they'll go through and, they will
take all the values, up until you hit 200,

78
00:04:58.130 --> 00:05:02.390
or skip, for a while and then take four,
so we don't have the infinite problem, and

79
00:05:02.390 --> 00:05:03.902
you can see we can chain them.

80
00:05:03.902 --> 00:05:09.043
Where it becomes a little bit different,
is, we'll look at a pop quiz in a second,

81
00:05:09.043 --> 00:05:13.458
the slide is a little bit bigger, so
I'm gonna look at the syntax here.

82
00:05:13.458 --> 00:05:16.331
Is instead of method chaining right,

83
00:05:16.331 --> 00:05:21.300
you kind of pass them all in as
individual functions, right?

84
00:05:21.300 --> 00:05:25.184
And even if it doesn't take any arguments,
you still call it as a function,

85
00:05:25.184 --> 00:05:28.847
that's mostly to keep the syntax and
the kind of API contract the same.

86
00:05:28.847 --> 00:05:30.659
The reason for this is,

87
00:05:30.659 --> 00:05:35.550
by breaking all the operators
out into their own functions.

88
00:05:35.550 --> 00:05:37.959
Then you can import one at a time,

89
00:05:37.959 --> 00:05:41.932
you can use tree shaking in
your bundling tools right?

90
00:05:41.932 --> 00:05:46.667
&gt;&gt; Is this is pipe then and arcs function
it will take in repertory many does that,

91
00:05:46.667 --> 00:05:49.416
or is it one of those
weird like FP functions.

92
00:05:49.416 --> 00:05:53.042
Cuz it has like a definition for
one input and two and three and four,

93
00:05:53.042 --> 00:05:54.707
where you max out eventually.

94
00:05:54.707 --> 00:05:59.458
&gt;&gt; I haven't looked at the types to see
where this ends, like the the JavaScript

95
00:05:59.458 --> 00:06:03.638
implementation of itself,
the JavaScript implementation of it.

96
00:06:03.638 --> 00:06:08.449
Like well allow for an arguments whether,
if anyone's who's tried to

97
00:06:08.449 --> 00:06:12.780
like type a function that takes
an unknown amount of arguments,

98
00:06:12.780 --> 00:06:17.370
has seen that the types of usually
just more and more types, right?

99
00:06:17.370 --> 00:06:22.607
And if you're using this with TypeScript,
each one like If you return

100
00:06:22.607 --> 00:06:27.781
a different value, the next one has
to be able to receive it, right?

101
00:06:27.781 --> 00:06:31.692
So, you start out with that initial value
in this case from the fibonacci sequence

102
00:06:31.692 --> 00:06:33.118
it would be a number, right?

103
00:06:33.118 --> 00:06:37.140
If you map it into a string, and
then you try to do a number thing with it,

104
00:06:37.140 --> 00:06:39.850
TypeScript will get very angry with you.

105
00:06:39.850 --> 00:06:41.643
And TypeScript will assume,
when you subscribe,

106
00:06:41.643 --> 00:06:44.110
you're getting whatever the last
thing out of that pipe was.

107
00:06:44.110 --> 00:06:48.518
But, the actual type definition, my gut
says, I've been I've looked at lodashes.

108
00:06:48.518 --> 00:06:52.420
Where it is simply,
here's the type with one argument.

109
00:06:52.420 --> 00:06:54.104
Here's two, here's three, here's four.

110
00:06:54.104 --> 00:06:56.173
&gt;&gt; It goes from one to nine.

111
00:06:56.173 --> 00:06:59.395
So you can put up to nine
&gt;&gt; You can put up to nine before

112
00:06:59.395 --> 00:07:00.892
TypeScript gives up on you.

113
00:07:00.892 --> 00:07:03.042
But the JavaScript implementation,

114
00:07:03.042 --> 00:07:06.410
you should be able to have
effectively an infinite number.

115
00:07:06.410 --> 00:07:10.915
I think the only color I'll add to
that question is nine in a row,

116
00:07:10.915 --> 00:07:16.100
like past that, like just probably
recently stopped at nine, right?

117
00:07:16.100 --> 00:07:19.692
That's to say you won't have things where
you then you have child observables, so

118
00:07:19.692 --> 00:07:20.420
on and so forth.

119
00:07:20.420 --> 00:07:24.573
But like after nine, you can probably you
can also break stuff out into functions,

120
00:07:24.573 --> 00:07:25.893
you have lots of options.

121
00:07:25.893 --> 00:07:31.230
All right, so a pop quiz,
this will never admit.

122
00:07:31.230 --> 00:07:33.030
Does anyone know why?

123
00:07:33.030 --> 00:07:36.427
&gt;&gt; There's no consumer,
&gt;&gt; We've got constant log consuming it,

124
00:07:36.427 --> 00:07:39.700
[LAUGH] catalogs going
at it right down there.

125
00:07:39.700 --> 00:07:41.458
Effectively in this case,
we will skip value.

126
00:07:41.458 --> 00:07:44.325
&gt;&gt; We're not mapping to any,
we're not materializing any of the values,

127
00:07:44.325 --> 00:07:45.500
we're just filtering them.

128
00:07:45.500 --> 00:07:48.326
&gt;&gt; We're filtering into a situation
with northingmakes it live.

129
00:07:48.326 --> 00:07:49.002
&gt;&gt; Yeah.

130
00:07:49.002 --> 00:07:52.520
&gt;&gt; All right, we're skipping values,
that are under 100,

131
00:07:52.520 --> 00:07:56.445
and we're only taking values like,
but because it's a pipe you like

132
00:07:56.445 --> 00:08:01.069
both of those things like there
are numbers between 101 and 499 all right?

133
00:08:01.069 --> 00:08:08.112
But only, yeah basically nothing will
make it out into the next one, right?

134
00:08:08.112 --> 00:08:11.409
So you have to be very careful that you
pipe every value past the next one.

135
00:08:11.409 --> 00:08:16.774
Now instead of rules that all run in
parallel, it's each stage, right?

136
00:08:16.774 --> 00:08:20.197
Only lets a certain
number of values through.

137
00:08:20.197 --> 00:08:23.842
Cool, all right,
there are over 100 operators,

138
00:08:23.842 --> 00:08:29.026
some of them are deprecated, some of
them are just variations on the theme,

139
00:08:29.026 --> 00:08:33.270
we're not going to talk
about all 100 of them.

140
00:08:33.270 --> 00:08:36.520
We're gonna talk a little bit
of some of the common ones, and

141
00:08:36.520 --> 00:08:40.434
some of them I will just sprinkle in,
as we are building things, right?

142
00:08:40.434 --> 00:08:44.957
But we can see some of
them as we go through.

143
00:08:44.957 --> 00:08:47.761
So we've got, that filter.

144
00:08:47.761 --> 00:08:53.344
Filter does,
exactly what it does with arrays,

145
00:08:53.344 --> 00:08:57.845
it filters them based on the function.

146
00:08:57.845 --> 00:09:03.059
So in this case only even
numbers will be allowed through.

147
00:09:03.059 --> 00:09:05.400
Map, who doesn't love a good map?

148
00:09:06.600 --> 00:09:09.685
Possibly, midway through this workshop,
you'll hate map, for

149
00:09:09.685 --> 00:09:11.517
reasons that we will talk about later.

150
00:09:11.517 --> 00:09:14.762
Some people who have a little
experience of smiling and nodding,

151
00:09:14.762 --> 00:09:17.544
the rest of you we'll arrive
at that station together.

152
00:09:17.544 --> 00:09:23.270
Map we'll go through the values,
and do some transformation to them.

153
00:09:23.270 --> 00:09:25.054
This works great for regular values,

154
00:09:25.054 --> 00:09:27.510
I will just kinda give
a little bit of a spoiler.

155
00:09:27.510 --> 00:09:30.968
It becomes problematic,
when I heard you like observables, so

156
00:09:30.968 --> 00:09:33.151
I put observables in your observables.

157
00:09:33.151 --> 00:09:37.331
And that's where we're gonna have
to deal with some of that, but

158
00:09:37.331 --> 00:09:39.315
we're not totally there yet.

159
00:09:39.315 --> 00:09:45.038
It's got a little cousin called Map two,
which just maps it to a value.

160
00:09:45.038 --> 00:09:48.423
Map two basically as effectively if you
took whatever value wasn't returned

161
00:09:48.423 --> 00:09:49.836
the same string no matter what.

162
00:09:49.836 --> 00:09:51.113
&gt;&gt; Map two.

163
00:09:51.113 --> 00:09:57.157
&gt;&gt; Cool reduce, there's two that are kind

164
00:09:57.157 --> 00:10:02.680
of similar right, reduce and scan.

165
00:10:02.680 --> 00:10:06.619
I wanna point out the difference between
the two of them, we'll look at scan next.

166
00:10:06.619 --> 00:10:10.919
Reduce will basically be like
an array reduce, very much so

167
00:10:10.919 --> 00:10:15.832
where you will only get the final
value when it's all done, right?

168
00:10:15.832 --> 00:10:18.869
So, it works through all the numbers
in this case it's totaling them up.

169
00:10:18.869 --> 00:10:24.885
It will add them all in place, and
then give you the final value.

170
00:10:24.885 --> 00:10:30.074
Scan, will actually give you every
time it runs that reduce function,

171
00:10:30.074 --> 00:10:33.800
it will emit the value and
pass it through, right?

172
00:10:33.800 --> 00:10:38.706
So if you want every kind of piece as you
go through, every value is omitted you'll

173
00:10:38.706 --> 00:10:42.490
get it all on the way reduce will
only give you the final result.

174
00:10:42.490 --> 00:10:47.919
So, the reason that I point this out is,
scan is usually what you want,

175
00:10:47.919 --> 00:10:53.547
but your brain a lot of times because
of arrays we'll think about reduce.

176
00:10:53.547 --> 00:10:58.155
So I'm like stopping for a minute and
pausing to be like now you probably want

177
00:10:58.155 --> 00:11:01.398
scan, even if you're thinking
reduce in this case.

178
00:11:01.398 --> 00:11:06.137
Scan can theoretically,
you can take an infinite range.

179
00:11:06.137 --> 00:11:10.557
You can scan through it, but
then you take four, so on and so forth.

180
00:11:10.557 --> 00:11:14.980
One final one,
which is everyone's best friend is tap.

181
00:11:16.190 --> 00:11:23.568
We said before, pipe, one value to
the next value, so on and so forth, right?

182
00:11:23.568 --> 00:11:26.980
Tap allows you to kinda have
a side effect for a second, and

183
00:11:26.980 --> 00:11:29.148
return the same value you received.

184
00:11:29.148 --> 00:11:31.212
Why is this useful?

185
00:11:31.212 --> 00:11:35.444
Because if you don't have tap, here's
what you're gonna do, you're gonna map

186
00:11:35.444 --> 00:11:39.142
where you console log the value, and
then return the same value again.

187
00:11:39.142 --> 00:11:42.627
You don't need to live like that,
you can just use tap, and

188
00:11:42.627 --> 00:11:44.461
you can console log the value.

189
00:11:44.461 --> 00:11:48.473
It's also useful for side effects that you
wanna do because again, you will the or

190
00:11:48.473 --> 00:11:51.396
subscribe, will only get that
final thing that comes out.

191
00:11:51.396 --> 00:11:55.375
It will not get any of
the intermediary values, right?

192
00:11:55.375 --> 00:11:57.906
Yep.
&gt;&gt; Am I understanding correctly that top

193
00:11:57.906 --> 00:12:02.619
is essentially convenience function where
it takes in a value, operates on it and

194
00:12:02.619 --> 00:12:04.864
returns that same value on
&gt;&gt; Yeah.

195
00:12:04.864 --> 00:12:05.435
&gt;&gt; Yeah.

196
00:12:05.435 --> 00:12:09.190
&gt;&gt; Exactly, it's like i wanna do other
stuff but i don't actually wanna change

197
00:12:09.190 --> 00:12:12.325
this value in any way, shape,
or form, keep it going through.

198
00:12:12.325 --> 00:12:17.587
I just want to, again, console logging
alone is worth taps, weight and

199
00:12:17.587 --> 00:12:22.176
gold even though it's gold and
doesn't have a weight in gold.

200
00:12:22.176 --> 00:12:26.366
But yeah tap is useful for, I want to do
something a side effect of some sort,

201
00:12:26.366 --> 00:12:30.560
great because this pipe is in functional
programming like it's a set of pure

202
00:12:30.560 --> 00:12:31.299
functions.

203
00:12:31.299 --> 00:12:34.721
Tap allows you to have a side effect,
that could be console logging,

204
00:12:34.721 --> 00:12:36.439
it could be manipulating the DOM.

205
00:12:36.439 --> 00:12:40.768
It could be anything all you need to
do that's not gonna be the final value,

206
00:12:40.768 --> 00:12:41.810
can happen in a tap

