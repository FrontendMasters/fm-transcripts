WEBVTT

1
00:00:00.000 --> 00:00:04.842
So we're gonna talk a little bit about,
we've dealt with like individual streams,

2
00:00:04.842 --> 00:00:08.355
we've even had some observables
that will listen to others.

3
00:00:08.355 --> 00:00:12.817
But now we're talking about some
strategies for kind of combining and

4
00:00:12.817 --> 00:00:15.547
merging multiple observables together.

5
00:00:15.547 --> 00:00:18.471
A really great example if you think
about that counter that we had before.

6
00:00:18.471 --> 00:00:22.629
Yeah, we had the interval eventually
listen to the start and the stop button,

7
00:00:22.629 --> 00:00:25.843
but those are kind of just two
sides of the same coin, right?

8
00:00:25.843 --> 00:00:29.773
It would be great if we could simply
create a stream on whether or

9
00:00:29.773 --> 00:00:31.639
not we should be going or not.

10
00:00:31.639 --> 00:00:32.635
We have a version of that here.

11
00:00:32.635 --> 00:00:34.973
This is kind of a quick tool that I built.

12
00:00:34.973 --> 00:00:37.549
We'll see how to build a simplified
version in a little bit.

13
00:00:37.549 --> 00:00:41.895
But a quick tool that I built
to kind of visualize a bunch of

14
00:00:41.895 --> 00:00:45.262
different observables together, right?

15
00:00:45.262 --> 00:00:46.960
And as we kind of merge them.

16
00:00:46.960 --> 00:00:51.228
But we're gonna build a little
bit together before we use it,

17
00:00:51.228 --> 00:00:54.602
cuz right now these
buttons don't do anything.

18
00:00:54.602 --> 00:00:58.357
So, I'm gonna kinda get at least
a start and the pause working.

19
00:00:58.357 --> 00:01:02.030
And this will be a little bit similar
to what we eventually kind of,

20
00:01:02.030 --> 00:01:05.653
we've seen before and
we'll take it forward as we go along here.

21
00:01:05.653 --> 00:01:12.844
Okay, so I've got the start and
let's actually grab the pause button.

22
00:01:16.517 --> 00:01:18.647
And they are each individual ones.

23
00:01:18.647 --> 00:01:21.451
Now what if I wanted to
merge them together?

24
00:01:21.451 --> 00:01:26.013
And then, yeah, maybe start we want
to be guess, you should be running,

25
00:01:26.013 --> 00:01:28.530
pause, no, you should not be running.

26
00:01:28.530 --> 00:01:31.386
That seems reasonable, right?

27
00:01:31.386 --> 00:01:34.230
So we could theoretically take each
one and we could save dot pipe.

28
00:01:38.311 --> 00:01:42.471
Map two or map this one to true.

29
00:01:42.471 --> 00:01:47.333
And we'll say dot pipe Map two and

30
00:01:47.333 --> 00:01:50.152
we'll map that one to false.

31
00:01:50.152 --> 00:01:55.736
And now I just want one stream of either
the true values or the false values.

32
00:01:55.736 --> 00:01:57.250
So, let's make a new observable.

33
00:02:02.241 --> 00:02:06.726
And that's going to simply
use a new kind of creator,

34
00:02:06.726 --> 00:02:10.925
we just have from event
this one's called merge.

35
00:02:10.925 --> 00:02:17.375
If you take a lucky guess what it does,
it will merge two streams into one.

36
00:02:17.375 --> 00:02:21.828
So, we'll start with the start and

37
00:02:21.828 --> 00:02:27.181
the pause and we'll merge them together.

38
00:02:27.181 --> 00:02:31.451
And we'll even start with saying, and by
default even before they click a button,

39
00:02:31.451 --> 00:02:33.038
let's just start with false.

40
00:02:35.694 --> 00:02:39.978
So, we give it effectively like a default
value even before anything gets emitted

41
00:02:39.978 --> 00:02:41.726
from either one of those events.

42
00:02:41.726 --> 00:02:42.746
Great.

43
00:02:42.746 --> 00:02:46.564
And we'll start with the simplest
possible thing here,

44
00:02:46.564 --> 00:02:51.031
we'll say is running and
we'll subscribe to it, console.log.

45
00:02:51.031 --> 00:02:54.009
All right, the really cool thing here is,

46
00:02:54.009 --> 00:02:58.231
you'll notice that we didn't
have to subscribe to start and

47
00:02:58.231 --> 00:03:03.143
pause individually, but we were able
to kind of merge them together.

48
00:03:03.143 --> 00:03:06.786
And when we subscribe
to the merged stream,

49
00:03:06.786 --> 00:03:12.601
we will effectively be subscribing
to the child streams in this case.

50
00:03:12.601 --> 00:03:17.018
So, let's just verify that does
what we think we we think it does.

51
00:03:17.018 --> 00:03:18.309
Starts out with false.

52
00:03:18.309 --> 00:03:22.610
It starts as true, false, true, great.

53
00:03:22.610 --> 00:03:24.291
Everything kind of works.

54
00:03:24.291 --> 00:03:26.464
At this point,
instead of logging to the console,

55
00:03:26.464 --> 00:03:29.402
I have this set status which is gonna
manipulate the DOM a little bit.

56
00:03:34.466 --> 00:03:39.325
So, now you can see it starts,
it was paused, it's running, it's paused,

57
00:03:39.325 --> 00:03:40.880
it's running, right?

58
00:03:40.880 --> 00:03:44.691
Cuz, it's based on what is
happening in that case.

59
00:03:44.691 --> 00:03:49.216
So status is basically,
we can look at it in the utilities but

60
00:03:49.216 --> 00:03:54.213
it's like if true show running in
this div, if false show paused.

61
00:03:54.213 --> 00:03:58.499
So, we kind of get that functionality
out of the box for free.

62
00:03:58.499 --> 00:04:03.504
Now, that's merge, and
there's a bunch of different ways that

63
00:04:03.504 --> 00:04:08.244
we might wanna to deal with
merging to two timelines, right?

64
00:04:08.244 --> 00:04:12.483
So, what we're gonna kinda do is
play around with visualizing this.

65
00:04:12.483 --> 00:04:14.730
You'll see, you can't really see him yet
but there are three columns.

66
00:04:14.730 --> 00:04:16.965
And so
we're gonna take two different streams,

67
00:04:16.965 --> 00:04:20.027
we'll look at some of the different
strategies for merging them.

68
00:04:20.027 --> 00:04:24.689
The first will be, what we call our first
observable, the middle stream will be our

69
00:04:24.689 --> 00:04:29.301
second observable and the third one will
be our combined observable in this case.

70
00:04:29.301 --> 00:04:33.195
So what happens when we merge
them in two different formats.

71
00:04:33.195 --> 00:04:37.940
We saw a merge, but you can imagine all it
does is it takes any of the children of

72
00:04:37.940 --> 00:04:41.382
the main event, merge,
shoots that event on through.

73
00:04:41.382 --> 00:04:46.084
Which is just combining two in
the simplest most direct fashion.

74
00:04:46.084 --> 00:04:48.477
Have this little helper
function called Bootstrap.

75
00:04:48.477 --> 00:04:52.937
And all that does, is under utilities
I've got a little bit more complicated

76
00:04:52.937 --> 00:04:56.574
observable, we'll see simpler
versions of it later that kind

77
00:04:56.574 --> 00:04:59.958
of just powers this whole exercise so
we can visualize it.

78
00:04:59.958 --> 00:05:04.442
So the only thing that I have to do at
some point is pass the three observables

79
00:05:04.442 --> 00:05:07.660
to this bootstrap function,
it is not an RXJS thing.

80
00:05:07.660 --> 00:05:11.132
It is simply to get this thing up and
running.

81
00:05:11.132 --> 00:05:14.616
So, one of the things I want to do is
just create three different streams.

82
00:05:14.616 --> 00:05:17.686
I do have this helper called labelwith,

83
00:05:17.686 --> 00:05:22.395
labelwith is simply annotating
it with the right class name.

84
00:05:22.395 --> 00:05:24.561
And the label,
it's just basically doing so

85
00:05:24.561 --> 00:05:27.015
I can visualize things,
it's not part of our xjs.

86
00:05:27.015 --> 00:05:31.805
I'm just mapping the value to,
it's effectively a version of map two,

87
00:05:31.805 --> 00:05:36.610
but I also do the other things I need
to make them look the correct colors.

88
00:05:36.610 --> 00:05:41.438
So if we flip over and clear this out,
you can see I can start it,

89
00:05:41.438 --> 00:05:45.739
it runs one, two, three and
then it finishes, right?

90
00:05:45.739 --> 00:05:48.446
So these are three independent streams.

91
00:05:48.446 --> 00:05:52.664
But combined is capable of bigger and
better things,

92
00:05:52.664 --> 00:05:56.704
combined should be the merge of these two,
right?

93
00:05:56.704 --> 00:06:02.369
So if we go ahead and
we can kind of replace this,

94
00:06:02.369 --> 00:06:05.202
here we can say, okay,

95
00:06:05.202 --> 00:06:10.059
merge first And the second observable.

96
00:06:10.059 --> 00:06:14.647
So now combined is any event that
comes through first, any event comes

97
00:06:14.647 --> 00:06:19.261
through second is now combined,
merged into one observable stream.

98
00:06:19.261 --> 00:06:23.181
So, let's take a look here,
we have three streams going still.

99
00:06:23.181 --> 00:06:26.190
We've got first,
which is the first one independent.

100
00:06:26.190 --> 00:06:30.402
Second, which is the second one
independent and then combined which

101
00:06:30.402 --> 00:06:34.475
is both the first and the second
one kind of merged into one stream.

102
00:06:34.475 --> 00:06:38.337
With merge, it should look basically like,
the timer's are similar, so

103
00:06:38.337 --> 00:06:40.684
they could come in
a little bit interweaved.

104
00:06:40.684 --> 00:06:43.887
But basically anytime either
one of them emits we should

105
00:06:43.887 --> 00:06:47.785
see it on the combined stream as well so
let's go take a look at that.

106
00:06:54.977 --> 00:06:57.480
So we've got that, we actually
only need to call this one merge,

107
00:06:57.480 --> 00:06:58.492
I don't need to label it.

108
00:07:04.152 --> 00:07:07.783
Awesome.
So you can see the color coded correctly.

109
00:07:07.783 --> 00:07:12.038
They're all kinda coming into one
combined stream in this case.

110
00:07:12.038 --> 00:07:14.865
And that might be what you want, right?

111
00:07:14.865 --> 00:07:18.314
A lot of times that is what you want, like
take these two things for our start or

112
00:07:18.314 --> 00:07:20.862
stop button, we don't,
whenever one of them happens,

113
00:07:20.862 --> 00:07:22.741
pass it through to this combined stream.

114
00:07:22.741 --> 00:07:25.834
And a lot of times that will solve for
the issue that you want.

115
00:07:25.834 --> 00:07:29.371
But there are other strategies and we'll
actually see some of these play out later.

116
00:07:29.371 --> 00:07:37.504
Where you might want to have a little bit
more of an opinion on the order, right?

117
00:07:37.504 --> 00:07:41.693
So, you might wanna say, hey,
I have these two streams,

118
00:07:41.693 --> 00:07:45.725
three streams, 10 streams,
what have you, right?

119
00:07:45.725 --> 00:07:46.812
I have these streams.

120
00:07:46.812 --> 00:07:49.951
What I wanna do is play
through all of the first one,

121
00:07:49.951 --> 00:07:52.954
then play through the subsequent ones,
right?

122
00:07:52.954 --> 00:07:59.012
And merge is not gonna do that for you,
merges first come first serve, right?

123
00:07:59.012 --> 00:08:02.172
Whichever one admits it's
into the merge stream.

124
00:08:02.172 --> 00:08:06.884
Concat is going to go ahead and say,
cool I want to run through the first one

125
00:08:06.884 --> 00:08:11.751
to completion, it's one stream we'll
do everything in the first stream.

126
00:08:11.751 --> 00:08:15.877
We'll do everything in the second
string so on and so forth, right?

127
00:08:15.877 --> 00:08:20.683
And you can do some interesting
coordination with this which is like,

128
00:08:20.683 --> 00:08:25.496
okay, I want to do everything I need
to show the loading page, right?

129
00:08:25.496 --> 00:08:29.650
Then I want to do everything I need,
whatever is involved there, I don't care,

130
00:08:29.650 --> 00:08:32.827
I want to play through first scene,
I want to do everything for

131
00:08:32.827 --> 00:08:35.537
the second scene,
everything for the third scene.

132
00:08:35.537 --> 00:08:40.308
So we can go ahead and
we can just swap this one out for concat.

133
00:08:43.248 --> 00:08:45.430
And we'll see that this
behaves slightly differently.

134
00:08:45.430 --> 00:08:50.110
Now, what I want you to notice is it
doesn't matter when things get emitted

135
00:08:50.110 --> 00:08:51.447
from the second one,

136
00:08:51.447 --> 00:08:56.669
the combined stream won't even subscribe
to it until it is done with the first one.

137
00:08:56.669 --> 00:09:01.293
So you see there going, we don't get
anything from the second stream until we

138
00:09:01.293 --> 00:09:03.869
finished everything on the first stream.

139
00:09:03.869 --> 00:09:06.672
And then we begin listening
to the second one, right?

140
00:09:06.672 --> 00:09:09.898
So merge these two streams,
but work on them in order.

141
00:09:09.898 --> 00:09:12.497
Take the first thing,
finish it to completion.

142
00:09:12.497 --> 00:09:18.267
Move to the second thing, finish it
to completion so on and so forth.

143
00:09:18.267 --> 00:09:21.836
We've got another one called race,
anyone have a lucky guess what race does?

144
00:09:21.836 --> 00:09:23.987
&gt;&gt; [CROSSTALK]
&gt;&gt; Yep right,

145
00:09:23.987 --> 00:09:26.523
well emits first in this case, right?

146
00:09:26.523 --> 00:09:30.880
So it's kind of like promise dot race,
promise dot race is like, listen here's

147
00:09:30.880 --> 00:09:34.617
a bunch of promises, whichever one
of you resolves let's go for it.

148
00:09:34.617 --> 00:09:38.065
Race is also similar,
where it'd be like, cool,

149
00:09:38.065 --> 00:09:43.372
here's a whole bunch of observables,
start with whichever one emits first.

150
00:09:43.372 --> 00:09:44.036
I don't care.

151
00:09:45.953 --> 00:09:48.508
So we'll swap that one out.

152
00:09:48.508 --> 00:09:54.017
And let's say that first we're gonna
have it take 1500 milliseconds.

153
00:09:59.183 --> 00:10:04.305
So, if you can kind of see that
the second one started first,

154
00:10:04.305 --> 00:10:07.525
and the first one could go on forever.

155
00:10:07.525 --> 00:10:12.947
It doesn't care, the combined one
only talks to winners, right?

156
00:10:12.947 --> 00:10:16.248
No, it doesn't talk to anyone
comes in second place.

157
00:10:16.248 --> 00:10:18.058
And so as a way to say, okay,

158
00:10:18.058 --> 00:10:21.840
I have these two things going
on whichever one emits first.

159
00:10:21.840 --> 00:10:26.331
One of the things we will see later is
you want to show a loading indicator but

160
00:10:26.331 --> 00:10:29.412
maybe only after a certain amount of time,
right?

161
00:10:29.412 --> 00:10:32.498
So hey, two seconds for loading indicator.

162
00:10:32.498 --> 00:10:38.055
If the data comes back before two seconds,
the data wins.

163
00:10:38.055 --> 00:10:40.866
If the data has not come
back after two seconds,

164
00:10:40.866 --> 00:10:43.687
well then the loading indicator wins,
right?

165
00:10:43.687 --> 00:10:46.123
Show the loading indicator, right?

166
00:10:46.123 --> 00:10:47.929
You still need to do
something with the data and

167
00:10:47.929 --> 00:10:50.118
we'll figure out how to manage
that all in a little bit.

168
00:10:50.118 --> 00:10:53.908
And it could be, cool, show the loading
indicator, then get the data,

169
00:10:53.908 --> 00:10:55.848
then take everything down, right?

170
00:10:55.848 --> 00:11:00.136
So this ability to merge things,
but also sequence them and

171
00:11:00.136 --> 00:11:05.902
figure out the order of operations
between them becomes incredibly powerful.

172
00:11:05.902 --> 00:11:08.978
Another one, you'll see sometimes
it's just called fork join.

173
00:11:08.978 --> 00:11:15.210
It's not the most glamorous
name in the world.

174
00:11:15.210 --> 00:11:18.840
And, you can kind of see that's
also deprecate in this case, but

175
00:11:18.840 --> 00:11:19.899
it is real common.

176
00:11:19.899 --> 00:11:22.525
So it passed the bar in this case.

177
00:11:22.525 --> 00:11:25.345
So what this one does is it waits for
them all to finish and

178
00:11:25.345 --> 00:11:27.577
gives you an array of
the last value of each.

179
00:11:31.657 --> 00:11:33.667
So nothing in the Combine stream.

180
00:11:33.667 --> 00:11:39.084
They finish, I get the two last values

181
00:11:39.084 --> 00:11:44.345
from each other Is for them, right?

182
00:11:44.345 --> 00:11:45.142
Cool.

183
00:11:45.142 --> 00:11:47.801
So we have different ways to mix and
match these.

184
00:11:47.801 --> 00:11:52.338
Now, where this becomes interesting is
when we kind of put them inside of other

185
00:11:52.338 --> 00:11:56.690
observables, we can kind of get a little
bit more powerful with that as well

