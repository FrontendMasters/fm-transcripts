WEBVTT

1
00:00:00.000 --> 00:00:04.310
&gt;&gt; Steve Kinney: The other thing we need
is an API, so again, looking at this AWS

2
00:00:04.310 --> 00:00:11.370
mobile, we can see that cloud API
looks like a pretty good choice.

3
00:00:11.370 --> 00:00:15.650
Cloud API again,
is API gateway over lambda.

4
00:00:15.650 --> 00:00:21.080
Basically a http request hits the API
gateway, then that triggers off

5
00:00:21.080 --> 00:00:26.610
the lambda and most likely the lambda
will then put something in Dynamo DB,

6
00:00:26.610 --> 00:00:29.990
take something out of Dynamo DB,
update something, delete something.

7
00:00:29.990 --> 00:00:34.450
So it's kind of all the way from our
client side app, fires the http request.

8
00:00:34.450 --> 00:00:36.950
That hits the API gateway,
triggers a lambda.

9
00:00:36.950 --> 00:00:37.890
The lambda does a thing.

10
00:00:39.190 --> 00:00:41.350
Right, the best part is you
don't need to know any of that.

11
00:00:42.570 --> 00:00:49.804
So, will do awsmobile cloud-api enable.

12
00:00:55.971 --> 00:00:56.471
&gt;&gt; Steve Kinney: Cool.

13
00:00:59.770 --> 00:01:02.690
Actually, I want to,

14
00:01:02.690 --> 00:01:06.100
I went into prompt cuz I want it to
ask me about what I want it to do.

15
00:01:06.100 --> 00:01:12.985
So I'm just going to real quick,
look at my awsmobile features.

16
00:01:16.874 --> 00:01:18.480
&gt;&gt; Steve Kinney: I'm gonna turn
that one off and try again.

17
00:01:19.770 --> 00:01:21.270
Nice part is I never deployed this code.

18
00:01:21.270 --> 00:01:21.980
I never pushed it.

19
00:01:21.980 --> 00:01:24.980
It was simply some configuration scenario
machine that I haven't done anything with.

20
00:01:24.980 --> 00:01:26.270
So I made a booboo.

21
00:01:26.270 --> 00:01:27.981
Guess what?
You can undo it really easily.

22
00:01:29.610 --> 00:01:31.147
&gt;&gt; Steve Kinney: So we'll do --prompt.

23
00:01:33.242 --> 00:01:34.540
&gt;&gt; Steve Kinney: All right,
so we have two options.

24
00:01:34.540 --> 00:01:36.710
Create a new API.

25
00:01:36.710 --> 00:01:37.440
What kind of API?

26
00:01:37.440 --> 00:01:40.150
It doesn't really say, but this does
mean that you can do custom stuff.

27
00:01:40.150 --> 00:01:43.880
If you have some other API that you want
to talk to, you need some service-side

28
00:01:43.880 --> 00:01:47.070
code, because of course, or something
along those lines, you want some backend

29
00:01:47.070 --> 00:01:50.560
code to talk to maybe a third-party API or
something along those lines.

30
00:01:50.560 --> 00:01:53.790
You can just spin up a new API and
write the JavaScript, yourself,

31
00:01:53.790 --> 00:01:55.230
to talk to that backend.

32
00:01:55.230 --> 00:02:00.630
But if you have a database table that you
wan to work with, then you can simply say,

33
00:02:00.630 --> 00:02:06.720
create CRUD API for
existing Amazon DynamoDB table, all right?

34
00:02:06.720 --> 00:02:11.920
And because we're keeping all of our
configuration in code, it can look and

35
00:02:11.920 --> 00:02:16.680
it can see what the actual tables
that we have available are for us.

36
00:02:16.680 --> 00:02:19.710
So in this case,
we have the Grudges Table.

37
00:02:19.710 --> 00:02:24.510
We do want to restrict
access to signed-in users.

38
00:02:24.510 --> 00:02:27.910
Our database was previously restricted,
but our API wasn't, right?

39
00:02:27.910 --> 00:02:31.830
So in this case, in order to not
get a forbidden from the API,

40
00:02:31.830 --> 00:02:34.510
we're going to say,
you need to be signed in.

41
00:02:36.450 --> 00:02:39.295
Cool, and its going ahead and
creating that for us.

42
00:02:41.515 --> 00:02:43.650
&gt;&gt; Steve Kinney: That's
gonna take a few seconds.

43
00:02:44.840 --> 00:02:51.270
So it does give you a way via the command
line to take the API for a spin.

44
00:02:51.270 --> 00:02:55.250
This works better with
the unrestricted API's.

45
00:02:55.250 --> 00:02:58.810
Because it's really I guess,
you can go get a user ID and

46
00:02:58.810 --> 00:03:00.430
do it all on the command line here.

47
00:03:00.430 --> 00:03:03.110
It's actually very tricky to do.

48
00:03:03.110 --> 00:03:07.820
Even to be clear putting JSON in quotes,
and

49
00:03:07.820 --> 00:03:10.990
then having double quotes on
the inside on the command line,

50
00:03:10.990 --> 00:03:15.760
in the terminal as a one-liner,
it's all fairly difficult.

51
00:03:15.760 --> 00:03:19.438
So I tend not to use this too much, but

52
00:03:19.438 --> 00:03:24.913
let's actually look at
the AWS Mobile console again.

53
00:03:24.913 --> 00:03:26.643
Let's see what we have with the cloud API.

54
00:03:31.995 --> 00:03:33.500
&gt;&gt; Steve Kinney: We gotta
do an AWS Mobile push.

55
00:03:35.780 --> 00:03:36.630
No one caught me on that one.

56
00:03:36.630 --> 00:03:37.963
That was a test.

57
00:03:41.410 --> 00:03:42.556
&gt;&gt; Steve Kinney: While that is loading,

58
00:03:42.556 --> 00:03:46.240
let's go take a look at that NoSQL
database that was still spinning before.

59
00:03:46.240 --> 00:03:49.300
We can go ahead and we can hit edit.

60
00:03:49.300 --> 00:03:54.050
We can see it's private, we can also
see all of our different fields so

61
00:03:54.050 --> 00:03:56.990
if you made some kind of mistake or
a typo in this case, you can go ahead and

62
00:03:56.990 --> 00:03:58.790
fix it in the UI as well.

63
00:03:58.790 --> 00:04:01.990
You can remove keys with that yes or
no question.

64
00:04:01.990 --> 00:04:07.000
I'm like at a 25% chance that I either
forgot a field or I hit yes and

65
00:04:07.000 --> 00:04:08.980
it's like what do you want
to call that extra field?

66
00:04:08.980 --> 00:04:11.970
I'm like, nothing, I made a mistake.

67
00:04:11.970 --> 00:04:14.580
And you can either Ctrl+C and
start all over again, or

68
00:04:14.580 --> 00:04:18.570
you can give it some foo name and
delete it later.

69
00:04:18.570 --> 00:04:20.640
Whatever, it's totally fine.

70
00:04:20.640 --> 00:04:25.030
And basically, here you can see we
can find items with a user ID and

71
00:04:25.030 --> 00:04:28.280
a given ID because we set that
as that secondary sort key.

72
00:04:28.280 --> 00:04:30.350
Which is exactly what
we want at this point.

73
00:04:31.430 --> 00:04:33.810
Cool, let's go check on this.

74
00:04:33.810 --> 00:04:35.800
This is gone ahead, and it's created.

75
00:04:35.800 --> 00:04:40.280
One of the things is, we'll take a look
at the code that got generated next, but

76
00:04:40.280 --> 00:04:44.630
you can see the way it takes
an entire backend API, zips it and

77
00:04:44.630 --> 00:04:47.240
sends it up to the Cloud.

78
00:04:48.590 --> 00:04:52.570
Let's take a look.
This is just a server list node,

79
00:04:52.570 --> 00:04:55.300
a server list is obviously someone
else's server just the way Cloud is

80
00:04:55.300 --> 00:04:56.080
somebody else's computer.

81
00:04:56.080 --> 00:04:58.570
So it's the same as server list per se.

82
00:04:58.570 --> 00:05:02.010
But the idea that you don't have
to manage the server is awesome

83
00:05:02.010 --> 00:05:04.569
because managing the server
is the literal worst.

84
00:05:06.130 --> 00:05:09.990
Actually, writing forgot password
logic is the literal worse, but

