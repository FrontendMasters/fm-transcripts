WEBVTT

1
00:00:00.280 --> 00:00:04.160
&gt;&gt; Speaker 1: I could go get all
the Grudges out of the database.

2
00:00:04.160 --> 00:00:08.560
But you saw that I just created the
database, so there's nothing in there yet.

3
00:00:08.560 --> 00:00:11.760
So let's actually start this
little playground here.

4
00:00:11.760 --> 00:00:15.700
Let's start by putting some
data into the database.

5
00:00:17.190 --> 00:00:21.500
So again, changing the data in a graphQL
database is called a mutation.

6
00:00:21.500 --> 00:00:23.227
We're mutating the state.

7
00:00:23.227 --> 00:00:24.097
So we'll say mutation.

8
00:00:24.097 --> 00:00:27.684
And I have to give it some kind of name.

9
00:00:27.684 --> 00:00:31.403
This is, again,
what we want to call this mutation.

10
00:00:31.403 --> 00:00:33.308
This will be useful when we
have more than one on the page.

11
00:00:33.308 --> 00:00:37.206
This play button become a drop-down,
but you can literally name it sandwich,

12
00:00:37.206 --> 00:00:38.266
it doesn't matter.

13
00:00:38.266 --> 00:00:40.629
The second one is the more important one.

14
00:00:40.629 --> 00:00:43.017
This is the mutation from that schema.

15
00:00:43.017 --> 00:00:47.679
And so yes, I've named them roughly
the same thing, but that is mostly for

16
00:00:47.679 --> 00:00:48.650
my own sanity.

17
00:00:48.650 --> 00:00:53.255
And if we were to look at this schema,
we can see that it takes an input,

18
00:00:53.255 --> 00:00:57.018
which is a type of grudge input,
or create grudge input.

19
00:00:57.018 --> 00:01:02.007
Which is basically what are the things
that we need in order to make a grudge?

20
00:01:02.007 --> 00:01:06.900
Well, we need a person.
&gt;&gt; Speaker 1: And

21
00:01:06.900 --> 00:01:14.463
we need a deed.
&gt;&gt; Speaker 1: And

22
00:01:14.463 --> 00:01:16.114
we need to say whether or
not it's been avenged.

23
00:01:16.114 --> 00:01:19.502
And it kinda stinks that I have
to put this in by hand right now.

24
00:01:19.502 --> 00:01:23.128
In a little bit, we'll look at how
to actually have default values

25
00:01:23.128 --> 00:01:25.640
in AppSync by working with the resolvers.

26
00:01:25.640 --> 00:01:26.930
But we'll start with this for now.

27
00:01:28.110 --> 00:01:30.040
And so,
this is how we go about creating one.

28
00:01:30.040 --> 00:01:31.140
And then, what do we want back?

29
00:01:31.140 --> 00:01:33.105
Well, we'll have an ID created for us.

30
00:01:33.105 --> 00:01:37.119
We'll have the person.
&gt;&gt; Speaker 1: We'll have the deed that

31
00:01:37.119 --> 00:01:40.491
they did.
&gt;&gt; Speaker 1: And

32
00:01:40.491 --> 00:01:42.218
we'll have whether or not it was avenged.

33
00:01:42.218 --> 00:01:42.830
We can get all of these back.

34
00:01:42.830 --> 00:01:43.604
We can get some of them back.

35
00:01:43.604 --> 00:01:48.402
This is just simply what you'll get
back from GraphUL after you create

36
00:01:48.402 --> 00:01:49.467
the resource.

37
00:01:49.467 --> 00:01:51.372
So we'll go ahead and we'll hit Play.

38
00:01:51.372 --> 00:01:54.725
And you can see that it
generated an ID for me.

39
00:01:54.725 --> 00:01:57.209
And then, there's all of
the things we want in there.

40
00:01:57.209 --> 00:01:59.253
Now, if you don't need all of
those back for some reason,

41
00:01:59.253 --> 00:02:01.799
if you only wanted the ID and you wanna
keep the way you had client-side,

42
00:02:01.799 --> 00:02:04.719
you can just simply remove properties from
here and you just won't get them back.

43
00:02:04.719 --> 00:02:07.647
They'll still be stored in the database,
cuz you passed them in here, but

44
00:02:07.647 --> 00:02:09.474
you just won't get them
back in the response.

45
00:02:09.474 --> 00:02:13.721
Because we wanna be able to get more
than one, we'll also go ahead and

46
00:02:13.721 --> 00:02:14.905
create a few more.

47
00:02:26.728 --> 00:02:27.993
&gt;&gt; Speaker 1: And so, for instance,

48
00:02:27.993 --> 00:02:31.800
I'll just take the data out in this case,
just to verify that it works.

49
00:02:33.020 --> 00:02:35.940
It's still saved, we're just not
getting it back in the response.

50
00:02:35.940 --> 00:02:37.654
Who else are we angry at?

51
00:02:56.545 --> 00:02:59.570
&gt;&gt; Speaker 1: Someone who could actually

52
00:02:59.570 --> 00:03:03.616
run to second.
&gt;&gt; Speaker 1: That is a true story,

53
00:03:03.616 --> 00:03:06.162
I don't wanna talk about it right now,
but it's a thing.

54
00:03:06.162 --> 00:03:08.674
So I back deed in this case,
you'll see that's now returned.

55
00:03:08.674 --> 00:03:11.197
All right, so
we've got three grudges in there.

56
00:03:11.197 --> 00:03:12.170
That feels like enough.

57
00:03:12.170 --> 00:03:13.944
I mean, I've got a lot more grudges, but

58
00:03:13.944 --> 00:03:15.837
these are enough to
like test the database.

59
00:03:15.837 --> 00:03:18.694
Not to like,
we don't need to air all this here.

60
00:03:18.694 --> 00:03:21.780
I can pay a therapist for that.

61
00:03:21.780 --> 00:03:24.610
All right, so
we've got this idea of creating grudges.

62
00:03:24.610 --> 00:03:28.040
It'd be interesting if we
could get a particular grudge.

63
00:03:28.040 --> 00:03:29.055
So here, we've got this ID.

64
00:03:29.055 --> 00:03:31.810
I'll just copy that real quick.

65
00:03:31.810 --> 00:03:33.517
I'm gonna treat myself to copying it with

66
00:03:33.517 --> 00:03:36.044
the quotes.
&gt;&gt; Speaker 1: And so,

67
00:03:36.044 --> 00:03:38.770
we can make another one,
which is a query, right?

68
00:03:38.770 --> 00:03:40.540
That's how we get stuff from the database.

69
00:03:40.540 --> 00:03:42.000
We'll say, get grudge.

70
00:03:43.270 --> 00:03:44.770
And again, that is an arbitrary name.

71
00:03:44.770 --> 00:03:46.830
I could name it sandwich,
I'm not going to.

72
00:03:46.830 --> 00:03:48.416
But then,
what actual query do we wanna do?

73
00:03:48.416 --> 00:03:50.070
That is defined in our schema.

74
00:03:50.070 --> 00:03:52.980
See also the very helpful auto complete.

75
00:03:52.980 --> 00:03:54.369
And so, we need an ID,

76
00:03:54.369 --> 00:03:58.960
and we'll pass this one in.
&gt;&gt; Speaker 1: And from there,

77
00:03:58.960 --> 00:04:05.144
we'll say I want the ID back,
I want the person, I want the deed,

78
00:04:05.144 --> 00:04:09.775
and I want whether or
not it was avenged, right?

79
00:04:09.775 --> 00:04:10.355
So this is, again,

80
00:04:10.355 --> 00:04:12.932
a useful place to play around with if you
wanna get comfortable and try stuff out.

81
00:04:12.932 --> 00:04:15.633
So now that I have two,
I can choose which one I wanna do.

82
00:04:15.633 --> 00:04:17.677
Which is why I gave them useful names.

83
00:04:17.677 --> 00:04:19.409
Otherwise it'd be really difficult.

84
00:04:19.409 --> 00:04:22.579
If they're both called sandwich and
taco, it's hard.

85
00:04:23.620 --> 00:04:25.730
All right, so
we'll get back all of those properties.

86
00:04:25.730 --> 00:04:27.760
If we didn't need all of them,
for whatever view,

87
00:04:27.760 --> 00:04:31.860
a lot of times when we have APIs, we
basically get whatever the API gives us.

88
00:04:31.860 --> 00:04:34.420
A lot of the control of what an API

89
00:04:34.420 --> 00:04:36.752
gives us in that response is controlled
by the person who made the API.

90
00:04:36.752 --> 00:04:38.846
In GraphQL, the scheme is defined, but

91
00:04:38.846 --> 00:04:43.044
then the consumer is the one that gets to
choose what they need back from the APIs.

92
00:04:43.044 --> 00:04:46.047
If I don't need whether or
not it was avenged for

93
00:04:46.047 --> 00:04:48.988
whatever list view,
I can just take that off.

94
00:04:48.988 --> 00:04:50.739
And now,
it's not included in the response.

95
00:04:50.739 --> 00:04:52.989
All right, so you can do really
interesting stuff like that.

96
00:04:52.989 --> 00:04:56.199
So I can get a particular
one if I know the ID.

97
00:04:56.199 --> 00:04:58.765
But if you think about Grudge Point app,
there's no point where we're doing that.

98
00:04:58.765 --> 00:05:00.452
We're basically fetching
that list of all of them.

99
00:05:00.452 --> 00:05:03.463
So let's talk a little bit about
how to get a list of grudges.

100
00:05:04.493 --> 00:05:06.936
&gt;&gt; Speaker 1: So we'll go ahead and

101
00:05:06.936 --> 00:05:09.112
take it for a spin.

102
00:05:09.112 --> 00:05:11.496
Let's make one called Query.

103
00:05:11.496 --> 00:05:15.683
And just to show that they don't have to
match with the actual name of the query,

104
00:05:15.683 --> 00:05:19.876
we'll do GetAllOfTheGrudges.
&gt;&gt; Speaker 1: It's gonna to call the list

105
00:05:19.876 --> 00:05:25.429
Grudges query, but just to prove to you
that they don't need to be the same.

106
00:05:25.429 --> 00:05:27.030
&gt;&gt; Speaker 1: So listGrudges.

107
00:05:27.030 --> 00:05:33.605
And what that's going to do is it's
going to get me an items array.

108
00:05:33.605 --> 00:05:36.810
And we'll just start with the person.

109
00:05:36.810 --> 00:05:38.548
Now again,
this is the same as it is up here.

110
00:05:38.548 --> 00:05:40.465
If I want the person and
the deed, I can add that, and

111
00:05:40.465 --> 00:05:45.477
we'll try it out.
&gt;&gt; Speaker 1: All right,

112
00:05:45.477 --> 00:05:47.590
so here is all of the people.

113
00:05:47.590 --> 00:05:54.223
If I just wanted all of the deeds.
&gt;&gt; Speaker 1: If I wanted the person and

114
00:05:54.223 --> 00:05:55.933
whether or not they've revenged,

115
00:05:55.933 --> 00:06:00.837
I can do that as well.
&gt;&gt; Speaker 1: Right, I get to choose

116
00:06:00.837 --> 00:06:05.319
what data I need for my UI, right?

117
00:06:05.319 --> 00:06:08.151
So there are a lot of ways to think
about how to encharge GraphQLs.

118
00:06:08.151 --> 00:06:11.784
Look at your UI,
figure out the properties that you need,

119
00:06:11.784 --> 00:06:15.059
and then go ahead and
ask just for those properties.

120
00:06:15.059 --> 00:06:19.927
The other thing that we have in place,
if we look at the schema real quick,

121
00:06:19.927 --> 00:06:24.493
go back.
&gt;&gt; Speaker 1: Is that grudge connection.

122
00:06:24.493 --> 00:06:26.467
So the grudge connection
is how we get that items.

123
00:06:26.467 --> 00:06:29.029
That's where items is coming from,
it's an array of grudges.

124
00:06:29.029 --> 00:06:32.350
And there's also this nextToken, right?

125
00:06:32.350 --> 00:06:33.596
And so, if we try it out,

126
00:06:43.394 --> 00:06:44.262
&gt;&gt; Speaker 1: Great, I'm gonna retype.

127
00:06:44.262 --> 00:06:51.282
So we'll query_GetAllOfTheGrudges.
&gt;&gt; Speaker 1: And

128
00:06:51.282 --> 00:06:53.320
we'll say listGrudges again.

129
00:06:53.320 --> 00:07:03.900
The magic of autocomplete.
&gt;&gt; Speaker 1: And we say, nextToken.

130
00:07:03.900 --> 00:07:06.180
We're gonna be slightly
underwhelmed at this point.

131
00:07:06.180 --> 00:07:08.603
We'll just give it a shot.

132
00:07:08.603 --> 00:07:11.366
It's null.
&gt;&gt; Speaker 1: nextToken is used for

133
00:07:11.366 --> 00:07:12.012
pagination.

134
00:07:12.012 --> 00:07:15.910
The reason it's null right now is
that we have gotten all of them.

135
00:07:15.910 --> 00:07:18.932
So there is no next set of them, right?

136
00:07:18.932 --> 00:07:22.900
But if you were to get all of them, it
gives you the place the dynamo left off in

137
00:07:22.900 --> 00:07:25.078
to go and
pick up from where they went off.

138
00:07:25.078 --> 00:07:29.874
So you don't get page 1 of 20, but you can
get a certain number, and then you can get

139
00:07:29.874 --> 00:07:34.086
a token and say hey, start where I left
off and get me the next however many.

140
00:07:34.086 --> 00:07:37.834
So I can go ahead and I can pass
an argument to this list view as well.

141
00:07:37.834 --> 00:07:42.078
And through the magic of autocomplete,
we'll say limit, and

142
00:07:42.078 --> 00:07:46.315
we'll say start me out with two.
&gt;&gt; Speaker 1: So

143
00:07:46.315 --> 00:07:49.929
now, I get two, right?

144
00:07:49.929 --> 00:07:53.860
And plus this wonderfully
unique nextToken.

145
00:07:53.860 --> 00:07:54.925
And so now, if I pass this in,

146
00:08:08.908 --> 00:08:10.650
&gt;&gt; Speaker 1: I'll pick up
where I left off, right?

147
00:08:10.650 --> 00:08:12.270
So out of the box here,
you're gonna get pagination.

148
00:08:12.270 --> 00:08:14.470
There's ultra filtering,
which we're not gonna go into right now.

149
00:08:14.470 --> 00:08:17.432
But we get a bunch of stuff for
free out of this API.

150
00:08:17.432 --> 00:08:19.912
And again, it's all backed by Dino,

151
00:08:19.912 --> 00:08:24.185
it's all again like production
grade infrastructure, right?

152
00:08:24.185 --> 00:08:27.028
So it's not like we have a toy app, but
I don't know how to transition it off

153
00:08:27.028 --> 00:08:28.740
because my website got
surprisingly popular.

154
00:08:28.740 --> 00:08:33.542
This is all the same AWS stuff that we use
at work, or I use at work at SanGrid, and

155
00:08:33.542 --> 00:08:35.496
you just get it really quickly.

156
00:08:35.496 --> 00:08:40.440
So you can test out your ideas and get a
working application done incredibly fast.

157
00:08:40.440 --> 00:08:44.320
All right, so
we've played with it in the database, and

158
00:08:44.320 --> 00:08:49.440
even the stuff that I did here is for
really reals stored inside of Dynamo.

159
00:08:49.440 --> 00:08:53.240
So we go here, we Refresh, we go to Items.

160
00:08:54.280 --> 00:08:55.910
You can see, I've got these three items.

161
00:08:55.910 --> 00:08:57.502
They have the avenged, the deed.

162
00:08:57.502 --> 00:09:00.470
These are in my actual database, right?

163
00:09:00.470 --> 00:09:02.207
And so,
when I go to pull this into my app,

164
00:09:02.207 --> 00:09:04.990
I'll actually start out with
some sample data in place.

165
00:09:04.990 --> 00:09:08.207
So what we'll do is we'll actually
transition into a React app, and

166
00:09:08.207 --> 00:09:11.090
we'll learn how do we get this
GraphQL out of the playground,

167
00:09:11.090 --> 00:09:13.321
and how do we get it into
our React application?

