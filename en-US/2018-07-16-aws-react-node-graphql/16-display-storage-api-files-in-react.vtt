WEBVTT

1
00:00:00.050 --> 00:00:01.884
&gt;&gt; Steve Kinney: We've got
the file in place there.

2
00:00:01.884 --> 00:00:04.750
Now it'd be nice to put it on the screen.

3
00:00:04.750 --> 00:00:09.460
The problem is that one of the things
that makes JavaScript hard sometimes

4
00:00:09.460 --> 00:00:10.540
is asynchrony.

5
00:00:11.550 --> 00:00:13.910
Asynchronous code makes
everything more difficult.

6
00:00:13.910 --> 00:00:18.400
You'll be like, go get me the thing,
and then go do this next thing with it.

7
00:00:18.400 --> 00:00:22.130
But JavaScript's like, yeah, but I don't
know when I'm gonna have that thing.

8
00:00:22.130 --> 00:00:25.350
So here's a promise, and
I'll get it back to you later.

9
00:00:25.350 --> 00:00:29.260
And then you give that promise to the
queue, and then what do you need to do?

10
00:00:29.260 --> 00:00:33.610
You need to go ask S3 for
the actual URL, which is again,

11
00:00:33.610 --> 00:00:36.157
well, I don't have the URL yet.

12
00:00:36.157 --> 00:00:38.440
So give me the key, and
I'll give you another promise.

13
00:00:38.440 --> 00:00:41.500
So it does create a little bit
of difficulty around this.

14
00:00:41.500 --> 00:00:45.030
And so in the AWS Amplify React Library

15
00:00:45.030 --> 00:00:48.550
there actually is an S3 image component
that will take care of this all for you.

16
00:00:48.550 --> 00:00:51.370
But we're actually gonna write
it from scratch just to better

17
00:00:51.370 --> 00:00:54.880
understand how the mechanics work here.

18
00:00:54.880 --> 00:00:56.790
Cool, so we have the files.

19
00:00:56.790 --> 00:01:01.240
So here we have files, and
I'm gonna change this code a little bit.

20
00:01:01.240 --> 00:01:04.120
I'm gonna use the async-await
syntax to just

21
00:01:04.120 --> 00:01:06.250
to kind of make it a little
clearer what's happening.

22
00:01:06.250 --> 00:01:09.680
So we just call this an async function and
we'll say,

23
00:01:12.814 --> 00:01:17.237
&gt;&gt; Steve Kinney: Say const keys, await,

24
00:01:17.237 --> 00:01:20.410
Storage.list.

25
00:01:20.410 --> 00:01:21.950
So remember I had files before?

26
00:01:21.950 --> 00:01:24.560
I can even call this files
if it makes it clearer.

27
00:01:24.560 --> 00:01:28.718
This is really, under the hood,
the same code as we had before,

28
00:01:28.718 --> 00:01:30.268
but my font is very big.

29
00:01:30.268 --> 00:01:34.036
And if I keep putting promises, chaining
promises, it's gonna be very difficult.

30
00:01:34.036 --> 00:01:39.310
So, I'm gonna use the syntax mostly so
we can all read it.

31
00:01:39.310 --> 00:01:44.148
So this will turn into an array of
all of the keys that are currently in

32
00:01:44.148 --> 00:01:47.730
this S3 bucket, which we saw
before I logged to my console.

33
00:01:47.730 --> 00:01:50.540
So the next thing we need to
do is we want to go ahead and

34
00:01:50.540 --> 00:01:56.560
take all of the keys and
get the URLs for each one of them.

35
00:01:56.560 --> 00:02:00.056
So we can just basically.

36
00:02:00.056 --> 00:02:02.130
You know what was really regretful?

37
00:02:02.130 --> 00:02:04.620
Is I started this sentence with,
so we just basically.

38
00:02:04.620 --> 00:02:07.870
Anything involving asynchronous code,
if someone starts with the words,

39
00:02:07.870 --> 00:02:11.090
basically or obviously in other words,
then easily, you just do this.

40
00:02:11.090 --> 00:02:12.470
They're a liar.

41
00:02:12.470 --> 00:02:15.620
Nothing is easy about asynchronous code.

42
00:02:15.620 --> 00:02:18.880
So we'll go ahead, cuz I know every
line of code that I'm about to write.

43
00:02:18.880 --> 00:02:21.770
We're not gonna keep this code,
so if if makes you hurt Inside,

44
00:02:21.770 --> 00:02:25.120
if it makes your stomach turn
a little bit, that's fine.

45
00:02:25.120 --> 00:02:28.770
I'm going to eventually call it out as bad
code, and then I'm going to delete it.

46
00:02:28.770 --> 00:02:31.500
So let the feeling of
disgust wash over you.

47
00:02:31.500 --> 00:02:32.000
It's fine.

48
00:02:34.630 --> 00:02:37.671
&gt;&gt; Steve Kinney: We're gonna
need to go ahead and wait for

49
00:02:37.671 --> 00:02:43.820
a promise of all of the keys in that
that array to be turned into real URLs.

50
00:02:43.820 --> 00:02:45.990
So we'll go ahead and say Promise.all.

51
00:02:45.990 --> 00:02:47.200
And we'll take those files.

52
00:02:50.760 --> 00:02:53.100
&gt;&gt; Steve Kinney: Again, I apologize for
what I'm about to do here.

53
00:02:56.280 --> 00:02:59.467
&gt;&gt; Steve Kinney: Just don't even ask.

54
00:02:59.467 --> 00:03:01.590
Like I'm embarrassed of
what I'm doing right now.

55
00:03:03.520 --> 00:03:06.440
&gt;&gt; Steve Kinney: I'm proving
that there's a problem here.

56
00:03:06.440 --> 00:03:12.650
Cool, so here, we're gonna ahead and
asynchronously fetch the actual URL.

57
00:03:14.610 --> 00:03:18.132
Say, storage,
go get the file by a given key.

58
00:03:18.132 --> 00:03:19.960
So this will get me
the array of all of them.

59
00:03:27.750 --> 00:03:30.899
&gt;&gt; Steve Kinney: Next time someone
tells you that JavaScript is easy and

60
00:03:30.899 --> 00:03:35.076
front-end development is easy,
you just show them this line of code and

61
00:03:35.076 --> 00:03:37.140
tell them to tell you what it means.

62
00:03:38.660 --> 00:03:39.770
That'll show them.

63
00:03:41.970 --> 00:03:44.120
Cool, so now I have an array of URLs.

64
00:03:44.120 --> 00:03:48.220
And you can see it's my S3
bucket with a unique URL

65
00:03:48.220 --> 00:03:52.460
that is going to be an example
image that we will see eventually.

66
00:03:52.460 --> 00:03:54.136
Now it's just a URL.

67
00:03:54.136 --> 00:03:57.430
It's not necessarily the image just yet.

68
00:03:57.430 --> 00:03:59.040
I need to make an image tag or
something along those lines.

69
00:04:00.270 --> 00:04:02.718
Cool,
&gt;&gt; Steve Kinney: So

70
00:04:02.718 --> 00:04:07.610
what we'll do real quick is we'll
actually just set them in states.

71
00:04:07.610 --> 00:04:10.120
So I have this files array.

72
00:04:10.120 --> 00:04:15.212
So I'll say, this.setState.

73
00:04:19.180 --> 00:04:21.556
&gt;&gt; Steve Kinney: Maybe I could have
named that better, but here we are.

74
00:04:23.290 --> 00:04:26.840
&gt;&gt; Steve Kinney: So, we'll actually
put them all in state in this array.

75
00:04:26.840 --> 00:04:27.970
Once we finally get them,

76
00:04:27.970 --> 00:04:33.200
after we do the initial handshake, with
storage.list, to go get the array of keys.

77
00:04:33.200 --> 00:04:36.820
And then we go and for every key in that
array go ahead and get the URL for it.

78
00:04:36.820 --> 00:04:41.545
When all of that asynchronous stuff is
done, then we'll actually have an array

79
00:04:41.545 --> 00:04:48.046
full of the URLs, and we can go ahead,
&gt;&gt; Steve Kinney: And

80
00:04:48.046 --> 00:04:50.420
just show them on the page.

81
00:04:52.440 --> 00:04:58.770
&gt;&gt; Steve Kinney: Again the word just when
doing asynchronous code, suspicious.

82
00:05:00.380 --> 00:05:01.700
This.state.files.

83
00:05:04.890 --> 00:05:08.340
&gt;&gt; Steve Kinney: So go through all of
the files, and we're gonna show each one.

84
00:05:23.158 --> 00:05:27.673
&gt;&gt; Steve Kinney: Cool, so
this is gonna put it on the page, he says.

85
00:05:32.840 --> 00:05:35.847
&gt;&gt; Steve Kinney: Actually I have to return
out of that or else it's not gonna work.

86
00:05:35.847 --> 00:05:41.810
Luckily that was actually
a very helpful error message.

87
00:05:41.810 --> 00:05:43.379
Say, hey, you forgot a return,
and I'm like, thank you.

88
00:05:46.190 --> 00:05:49.344
&gt;&gt; Steve Kinney: Cool, and
that was all the wait to see,

89
00:05:49.344 --> 00:05:54.770
what was the example image that
Amazon put in the bucket for me?

90
00:05:54.770 --> 00:05:56.410
It's this right here.

91
00:05:56.410 --> 00:06:00.417
Fun little bonus for me is that when
I chose the purple color scheme,

92
00:06:00.417 --> 00:06:03.651
I didn't know that there was
an image in that bucket yet

93
00:06:03.651 --> 00:06:06.277
when I was starting this, so that's nice.

