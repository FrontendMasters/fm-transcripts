WEBVTT

1
00:00:00.100 --> 00:00:02.796
&gt;&gt; Steve Kinney: So,
we used a few things earlier.

2
00:00:02.796 --> 00:00:05.830
I just wanna kinda take a quick moment,
we saw them in action but

3
00:00:05.830 --> 00:00:07.680
kinda want to talk about them now.

4
00:00:07.680 --> 00:00:10.470
We were in the weeds dealing with them,
and

5
00:00:10.470 --> 00:00:13.800
now I kinda want to step back up to the
ivory tower and take a look at them again.

6
00:00:13.800 --> 00:00:16.480
So we used that width
authenticator component,

7
00:00:16.480 --> 00:00:19.720
and that basically did everything,
and it's like kind of interesting.

8
00:00:19.720 --> 00:00:22.350
If you use your app dev tools you
can actually see it's basically

9
00:00:22.350 --> 00:00:23.120
a state machine.

10
00:00:23.120 --> 00:00:25.890
It's like, nothing in terms of signing up.

11
00:00:25.890 --> 00:00:29.240
Then it moves into now
they're gonna sign up flow.

12
00:00:29.240 --> 00:00:30.640
And now it's waiting for
confirmation code.

13
00:00:30.640 --> 00:00:33.100
And it kinda handles all
these different states.

14
00:00:33.100 --> 00:00:36.440
It's great cuz we can just
pull it out of the box.

15
00:00:36.440 --> 00:00:37.580
You can theme it.

16
00:00:37.580 --> 00:00:40.640
But depending on what you're working with,

17
00:00:40.640 --> 00:00:44.272
especially if you wanna have routes for
your sign in.

18
00:00:44.272 --> 00:00:48.248
For all the different states that
that authenticator component was in,

19
00:00:48.248 --> 00:00:50.150
it wasn't clear through the URL.

20
00:00:50.150 --> 00:00:53.440
And so there might be different
things that you want to do with that.

21
00:00:53.440 --> 00:00:54.650
So it's like, hey,

22
00:00:54.650 --> 00:00:59.530
I just need a simple sign up form that's
got everything I need, cool, great.

23
00:00:59.530 --> 00:01:03.140
If you have something kind of a little
bit more specific that you need to do,

24
00:01:03.140 --> 00:01:07.180
you can actually just pull
the Auth module from AWS amplify,

25
00:01:07.180 --> 00:01:09.330
just a generic JavaScript library.

26
00:01:09.330 --> 00:01:12.170
And that module like API
has a bunch of methods, and

27
00:01:12.170 --> 00:01:16.970
those methods are useful for just doing
a whole bunch of stuff kinda by hand.

28
00:01:16.970 --> 00:01:21.080
So like there's a sign in method, and you
send it like a user name and a password.

29
00:01:21.080 --> 00:01:23.510
And it will like resolve or reject.

30
00:01:23.510 --> 00:01:25.300
If you want to implement sign out,

31
00:01:25.300 --> 00:01:28.157
like you can have a button
that like when they click it.

32
00:01:28.157 --> 00:01:33.260
It's just Auth that sign out and then what
you want to have happen in that case.

33
00:01:33.260 --> 00:01:38.400
For every high level,
it's some black magic component there is

34
00:01:38.400 --> 00:01:42.680
a lower level that you can access as well.

35
00:01:42.680 --> 00:01:43.629
So some of Auth.

36
00:01:44.680 --> 00:01:48.700
And then if you need some information
from the user like in this case,

37
00:01:48.700 --> 00:01:51.550
the user name or
something along those lines,

38
00:01:51.550 --> 00:01:56.000
you can get a lot of that information
from off that current authenticated user,

39
00:01:56.000 --> 00:01:58.340
which will go ahead and
get you all that information.

40
00:01:58.340 --> 00:02:02.470
Or you can get like Auth that current web
session which is the adjacent web token.

41
00:02:02.470 --> 00:02:07.040
So it's all the kind of actual
credentials that they need to,

42
00:02:07.040 --> 00:02:11.580
all the stuff that is checking
along those line,s is available for

43
00:02:11.580 --> 00:02:13.800
you as well in this Auth current section,
right?

44
00:02:13.800 --> 00:02:18.120
We took advantage of the fact
that MFI wired a lot of it up for

45
00:02:18.120 --> 00:02:19.750
us, right, but if you needed it for

46
00:02:19.750 --> 00:02:25.130
something in particular you can actually
pull out that information as well.

47
00:02:25.130 --> 00:02:26.070
We saw the API module.

48
00:02:26.070 --> 00:02:28.141
It has a whole bunch of methods.

49
00:02:28.141 --> 00:02:32.031
There's a few more than this but
these are kind of the,

50
00:02:32.031 --> 00:02:34.480
I would say the most common ones.

51
00:02:34.480 --> 00:02:38.690
All of your HTTP verbs, so get, post,

52
00:02:38.690 --> 00:02:42.230
patch, put, and delete,
all take the same arguments.

53
00:02:42.230 --> 00:02:47.730
There's another one that we'll see
later today called GraphQL operation.

54
00:02:47.730 --> 00:02:50.370
GraphQL and it takes a GraphQL operation.

55
00:02:50.370 --> 00:02:53.320
And we'll see that one later like that's
kind of a known other way to talk to

56
00:02:53.320 --> 00:02:55.730
a API but you need a GraphQL API.

57
00:02:55.730 --> 00:03:01.744
If only there was an easy way to make
one and spin one up very quickly.

58
00:03:01.744 --> 00:03:04.380
Well cool, so again we talked
about all those three arguments.

59
00:03:04.380 --> 00:03:08.180
There is apiName which is the name
of the API gateway you wanna hit.

60
00:03:08.180 --> 00:03:13.860
Or the cloud API in our Mobile Hub
parlance that you're looking for,

61
00:03:13.860 --> 00:03:16.160
the actual path at that API.

62
00:03:16.160 --> 00:03:19.770
So you can think about the API
name as effectively almost like

63
00:03:19.770 --> 00:03:22.500
the name of the server, or like the Like
domain name that you're hitting, and

64
00:03:22.500 --> 00:03:24.070
then the path is like everything past it.

65
00:03:24.070 --> 00:03:25.940
Like slash grudges, slash grudges,

66
00:03:25.940 --> 00:03:30.760
slash object, one two three will get you
the one with the ID of one two three.

67
00:03:30.760 --> 00:03:33.770
And init is any other additional
information that you need to send, so

68
00:03:33.770 --> 00:03:37.590
in this case, we saw header,
like I just briefly mentioned but

69
00:03:37.590 --> 00:03:40.460
also body was really important for
put and post.

70
00:03:40.460 --> 00:03:43.220
What is the information you'd
like to save to the database?

71
00:03:43.220 --> 00:03:46.420
That's the kind of third object that
we can send along with everything else.

72
00:03:46.420 --> 00:03:48.560
These are like what they're
officially called under the hood.

73
00:03:48.560 --> 00:03:53.600
You might have seen Visual Studio codes
typescript definitions kind of hinting

74
00:03:53.600 --> 00:03:54.640
at these things.

75
00:03:54.640 --> 00:03:56.280
But like effectively,

76
00:03:56.280 --> 00:04:00.550
name of the gateway, name of the path,
any other stuff you want to send through.

77
00:04:02.020 --> 00:04:06.874
Getting grudges we saw,
we just used the grudgeCRUD API and

78
00:04:06.874 --> 00:04:11.939
then we hit that end point, and
we got back all of the grudges.

79
00:04:11.939 --> 00:04:14.620
Get an individual grudge as well
we just need to give it the ID.

80
00:04:14.620 --> 00:04:16.642
We'll get that one back.

81
00:04:16.642 --> 00:04:19.761
For posting, we hit that endpoint and

82
00:04:19.761 --> 00:04:24.342
we hit the endpoint on
the grudgesCRUD API gateway, and

83
00:04:24.342 --> 00:04:29.230
we need to send in a body of all
the things that we wanna save.

84
00:04:29.230 --> 00:04:32.009
And those all get kind of passed
through and put into the database.

85
00:04:33.890 --> 00:04:36.890
Putting and
deleting we implemented, all right.

86
00:04:36.890 --> 00:04:41.880
Putting works very similar to post, where
we send an entire body along with it.

87
00:04:41.880 --> 00:04:46.750
But again, Dynamo DB doesn't,
this is not like dictated by Dynamo.

88
00:04:46.750 --> 00:04:51.960
This was simply the JavaScript code
in that serverless express app

89
00:04:51.960 --> 00:04:56.150
that took like something, and
turned it into a dynamo DB call.

90
00:04:56.150 --> 00:05:00.190
So you could actually, this is what we got
out of the box, but like I said a bunch of

91
00:05:00.190 --> 00:05:02.270
times you could go in there and
manipulate and do whatever you want.

92
00:05:02.270 --> 00:05:03.934
It's kinda up to you.

93
00:05:03.934 --> 00:05:07.910
And deleting is very similar
to getting a single one.

94
00:05:07.910 --> 00:05:14.350
But like I said, any request to
the API gateway that matches.

95
00:05:14.350 --> 00:05:19.020
The verb and the endpoint is gonna trigger
that route, and you could change like

96
00:05:19.020 --> 00:05:22.380
what exactly those routes are like
how it works, all that kind of stuff.

97
00:05:22.380 --> 00:05:24.040
Whatever works for you.

98
00:05:24.040 --> 00:05:27.010
But generally speaking, if you're just
trying to get something up really quickly,

99
00:05:27.010 --> 00:05:30.290
it behooves you to kinda
go with the conventions.

100
00:05:30.290 --> 00:05:33.250
I mean for me,
part of the argument is it's great to have

101
00:05:33.250 --> 00:05:35.950
a very scalable infrastructure
with very little work.

102
00:05:35.950 --> 00:05:37.840
The second I start to
get very opinionated and

103
00:05:37.840 --> 00:05:40.030
change things they don't
really care about.

104
00:05:40.030 --> 00:05:41.510
Especially in a more complicated app,

105
00:05:41.510 --> 00:05:44.810
you're likely to abstract this in
other API calls, anyway, right?

106
00:05:44.810 --> 00:05:49.710
It might be in a Redux Epic, or Redux
Thunk, or something along those lines.

107
00:05:49.710 --> 00:05:51.330
And you're just firing the actions,
anyway.

108
00:05:51.330 --> 00:05:52.420
You write this code one place.

109
00:05:52.420 --> 00:05:53.700
You don't really care.

110
00:05:53.700 --> 00:05:56.230
But if there's additional stuff,
default things that you need,

111
00:05:56.230 --> 00:05:57.650
you can put that all in that code.

112
00:05:57.650 --> 00:06:00.430
That's definitely stuff that you can do,
as well.

113
00:06:00.430 --> 00:06:03.100
The point is, you get some
really great default options but

114
00:06:03.100 --> 00:06:09.040
if you have custom needs, this is real
industrial strength infrastructure.

