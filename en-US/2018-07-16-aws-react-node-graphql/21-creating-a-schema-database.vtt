WEBVTT

1
00:00:00.000 --> 00:00:01.964
&gt;&gt; Steve Kinney: So
we take a look at AppSync.

2
00:00:01.964 --> 00:00:04.804
We'll start by looking at
it in the Dashboard, and

3
00:00:04.804 --> 00:00:09.174
then we'll go ahead and implement it in
a clean slate version of our React app.

4
00:00:09.174 --> 00:00:12.566
So the master that we started
earlier today on, we'll go back and

5
00:00:12.566 --> 00:00:14.986
implement that again
with AppSync this time.

6
00:00:14.986 --> 00:00:20.726
Cool, so this is AppSync if you've
never made an AppSync API before.

7
00:00:20.726 --> 00:00:22.651
If you have, you'll see some
of your existing ones there.

8
00:00:22.651 --> 00:00:28.010
But this is the kind of tabula rasa for
AppSync for the first time.

9
00:00:28.010 --> 00:00:31.038
So I'll go ahead and
I'll hit this Create API button.

10
00:00:31.038 --> 00:00:32.244
And I have a few options here.

11
00:00:32.244 --> 00:00:37.765
I have some kind of pre-baked ones that
kinda just show you how AppSync works.

12
00:00:37.765 --> 00:00:41.040
So there's an event app, a chat app,
a tasks app, and a blog app.

13
00:00:41.040 --> 00:00:45.059
Cuz what demo of any Java script
technology's not complete without a tasks

14
00:00:45.059 --> 00:00:45.839
app, right?

15
00:00:45.839 --> 00:00:47.630
You need to make a to do list.

16
00:00:47.630 --> 00:00:48.668
Let's just look at one.

17
00:00:48.668 --> 00:00:51.423
Let's look at the event app for a second,

18
00:00:51.423 --> 00:00:55.847
just to see what a fully fleshed-out
AppSync API might look like.

19
00:00:55.847 --> 00:00:57.928
So these are events that have comments.

20
00:00:57.928 --> 00:01:01.350
And you can see that comments
will be tied to an event ID.

21
00:01:01.350 --> 00:01:04.473
They'll have their own comment ID,
so on and so forth.

22
00:01:04.473 --> 00:01:05.524
They'll have comment ID, so on, so forth.

23
00:01:05.524 --> 00:01:07.546
You can see, it's basically saying
what are the properties and

24
00:01:07.546 --> 00:01:08.830
what are the types of those properties?

25
00:01:08.830 --> 00:01:12.197
And those exclamation points
basically mean that it's required.

26
00:01:12.197 --> 00:01:15.121
Cool, so we have this idea of the comment.

27
00:01:15.121 --> 00:01:18.407
We have an event with the different
properties there as well.

28
00:01:18.407 --> 00:01:21.743
We'll get into these comment
connections in a second.

29
00:01:21.743 --> 00:01:26.606
Those are interesting ways to do
pagination if you have a lot of something.

30
00:01:26.606 --> 00:01:30.536
When we make our API, we'll actually
explore it a little bit more.

31
00:01:30.536 --> 00:01:31.736
So we have this idea of type.

32
00:01:31.736 --> 00:01:34.240
So what are the kind of
nouns in our application?

33
00:01:34.240 --> 00:01:36.219
What kind of things do we have?

34
00:01:36.219 --> 00:01:38.064
At the same time, we also have mutations.

35
00:01:38.064 --> 00:01:40.891
How do we change things in our database?

36
00:01:40.891 --> 00:01:41.998
We can create new events.

37
00:01:41.998 --> 00:01:43.870
This is changing the data store.

38
00:01:43.870 --> 00:01:45.637
And then finally, we have queries,

39
00:01:45.637 --> 00:01:48.206
which are how do we get stuff
out of our GraphicUL API?

40
00:01:48.206 --> 00:01:49.732
So in this case, get-event.

41
00:01:49.732 --> 00:01:50.387
We pass an ID.

42
00:01:50.387 --> 00:01:51.205
We'll get that event.

43
00:01:51.205 --> 00:01:55.687
List events is going to give us
a list of events, so on and so forth.

44
00:01:55.687 --> 00:01:59.556
We also have some kind of built-in
filtering in this case as well.

45
00:01:59.556 --> 00:02:00.883
So there's a lot that we kind of get.

46
00:02:00.883 --> 00:02:03.265
This is, again, a fully fleshed-out one.

47
00:02:03.265 --> 00:02:07.657
But I'm actually gonna show you how easy
it is to get to this state even when you

48
00:02:07.657 --> 00:02:09.087
author it from scratch.

49
00:02:09.087 --> 00:02:12.332
So we'll go ahead, and
we're gonna author it from scratch, and

50
00:02:12.332 --> 00:02:15.638
you'll see how quickly we can
arrive at the station, if you will.

51
00:02:15.638 --> 00:02:20.590
So go ahead, and we'll name it Grudges.

52
00:02:20.590 --> 00:02:22.809
And we'll hit Create.

53
00:02:22.809 --> 00:02:28.742
Cool, so here, we get the API URL, API ID,
Auth mode, and so on and so forth.

54
00:02:28.742 --> 00:02:32.403
If we need to download this configuration,
you can see you can get it for

55
00:02:32.403 --> 00:02:34.179
a number of different platforms.

56
00:02:34.179 --> 00:02:38.747
In our case, we will go ahead and
download the React version.

57
00:02:38.747 --> 00:02:43.105
We're gonna modify this a little bit,
but we'll download it for now.

58
00:02:43.105 --> 00:02:46.725
Let's actually go ahead and
look at Schema, right?

59
00:02:46.725 --> 00:02:48.834
And so before,
with the event that was built in,

60
00:02:48.834 --> 00:02:50.642
you saw that we had
a lot of stuff in there.

61
00:02:50.642 --> 00:02:54.769
There was a lot of various different,
the ability to get stuff, change stuff,

62
00:02:54.769 --> 00:02:55.946
the different types.

63
00:02:55.946 --> 00:03:00.070
Let's look at something kind of
that works for our application.

64
00:03:00.070 --> 00:03:03.127
We know what a grudge is,
we've been working with grudges all day.

65
00:03:03.127 --> 00:03:06.819
We've been harboring them,
we've been dwelling on them.

66
00:03:06.819 --> 00:03:11.041
We know that a grudge has an ID.

67
00:03:11.041 --> 00:03:15.675
And this ID type is basically just
a unique string in this case.

68
00:03:15.675 --> 00:03:18.820
We know that there is
a person that wronged us.

69
00:03:18.820 --> 00:03:19.662
That will be a string.

70
00:03:22.108 --> 00:03:24.960
&gt;&gt; Steve Kinney: And we know that
there is something that they did.

71
00:03:24.960 --> 00:03:26.536
That is also a string.

72
00:03:26.536 --> 00:03:31.562
And then, whether or not we have avenged
that grudge, which is a Boolean.

73
00:03:35.397 --> 00:03:38.906
&gt;&gt; Steve Kinney: And the exclamation
point at the end is not to just be strong

74
00:03:38.906 --> 00:03:42.922
about our emotions, but
also say that these are required fields.

75
00:03:42.922 --> 00:03:47.987
That it would need to have these
properties in place in order for

76
00:03:47.987 --> 00:03:49.906
it to be a valid grudge.

77
00:03:51.394 --> 00:03:56.214
&gt;&gt; Steve Kinney: Cool, and
then we saw a little bit about queries.

78
00:03:56.214 --> 00:03:59.937
So we can do something like
fetchGrudges or listGrudges, or

79
00:03:59.937 --> 00:04:01.836
something along those lines.

80
00:04:01.836 --> 00:04:03.623
This is actually not
gonna matter too much.

81
00:04:03.623 --> 00:04:04.917
And you'll see in a second.

82
00:04:04.917 --> 00:04:10.090
Which will be an array of
grudges that we'll get back.

83
00:04:10.090 --> 00:04:12.484
Cool, so
with this kind of basics in place,

84
00:04:12.484 --> 00:04:14.888
we can actually hit
the Save Schema button.

85
00:04:16.618 --> 00:04:19.798
&gt;&gt; Steve Kinney: And it will go ahead and
kind of figure out what our schema is.

86
00:04:19.798 --> 00:04:23.333
Now, we have a problem
that's not dissimilar from

87
00:04:23.333 --> 00:04:28.029
a problem we had earlier today,
which is a schema is cool and great.

88
00:04:28.029 --> 00:04:30.733
In the same way having an API is fine and
wonderful.

89
00:04:30.733 --> 00:04:34.735
But unless you have a database to
back it up, right, its not very good.

90
00:04:34.735 --> 00:04:36.568
Arguably, the opposite is true.

91
00:04:36.568 --> 00:04:39.835
Before we could create databases but
unless we had an API in front of it,

92
00:04:39.835 --> 00:04:42.350
there was no way to get stuff in and
out of the database.

93
00:04:42.350 --> 00:04:47.329
So the nice thing about AppSync is
that it's pretty easy to create

94
00:04:47.329 --> 00:04:50.419
the DynamoDB databases behind the API.

95
00:04:50.419 --> 00:04:53.442
We have this fancy
Create Resources button up here.

96
00:04:53.442 --> 00:04:58.688
And we can define a new type,
which is very similar to what I just did.

97
00:04:58.688 --> 00:05:00.395
Or we can use an existing type,

98
00:05:00.395 --> 00:05:03.760
which is what I wrote in that
previous one as we were talking.

99
00:05:03.760 --> 00:05:05.516
Actually, we want Grudge.

100
00:05:05.516 --> 00:05:08.153
Cool, and then it will figure out okay,

101
00:05:08.153 --> 00:05:12.202
I should probably make DynamoDB
table that is a Grudge table.

102
00:05:12.202 --> 00:05:14.517
We'll say that the primary key is ID.

103
00:05:14.517 --> 00:05:15.427
That seems good.

104
00:05:15.427 --> 00:05:17.593
We're not gonna use a sort key for now.

105
00:05:17.593 --> 00:05:21.188
And we have the switch to
automatically generate GraphQL.

106
00:05:21.188 --> 00:05:23.592
Remember all that fancy stuff I
showed you with event before, and

107
00:05:23.592 --> 00:05:25.832
you're like I don't wanna write all that,
I'm very lazy?

108
00:05:25.832 --> 00:05:28.655
I'm very tired right now,
I don't wanna write all of that.

109
00:05:28.655 --> 00:05:29.858
Luckily, you don't have to.

110
00:05:29.858 --> 00:05:33.209
This is going to be,
based on that type that we just created,

111
00:05:33.209 --> 00:05:35.854
all of the GraphQL that
AppSync creates for us.

112
00:05:35.854 --> 00:05:40.418
Which is, again, very similar to all the
things that we saw when it came time to

113
00:05:40.418 --> 00:05:42.090
look at the events earlier.

114
00:05:42.090 --> 00:05:46.395
And you can see, we've got the ability
to Update, Delete, Create.

115
00:05:46.395 --> 00:05:48.272
We have the ability to Search and filter.

116
00:05:48.272 --> 00:05:51.724
We have that Grudge connection,
which we'll talk about shortly.

117
00:05:51.724 --> 00:05:53.880
So this is very similar to
the events that we had before.

118
00:05:53.880 --> 00:05:59.009
So Author from Scratch is
a little bit disingenuous

119
00:05:59.009 --> 00:06:03.898
because while we selected
Author from Scratch,

120
00:06:03.898 --> 00:06:08.441
AWS is doing a lot of
the heavy lifting for us.

121
00:06:08.441 --> 00:06:09.437
So we'll go ahead and we'll scroll down.

122
00:06:09.437 --> 00:06:10.793
We'll hit Create.

123
00:06:10.793 --> 00:06:14.463
And you'll get this please do not refresh
as it creates the Dynamo DB table.

124
00:06:14.463 --> 00:06:16.366
I have never tempted fate and

125
00:06:16.366 --> 00:06:20.419
tried to refresh despite
oppositional defiance disorder.

126
00:06:20.419 --> 00:06:23.497
Cool, so now,
we have this resource creation complete.

127
00:06:23.497 --> 00:06:26.646
And you can see,
we have this brand new schema in place,

128
00:06:26.646 --> 00:06:29.609
which is much more robust
than the previous schema.

129
00:06:29.609 --> 00:06:33.299
And just to kind of prove to
you I can open up a new tab.

130
00:06:35.579 --> 00:06:42.251
&gt;&gt; Steve Kinney: We can go ahead and
check out, go to the Console.

131
00:06:46.228 --> 00:06:51.066
&gt;&gt; Steve Kinney: So I'm just gonna
go into the DynamoDB section of AWS,

132
00:06:51.066 --> 00:06:54.536
and just basically prove to both you and

133
00:06:54.536 --> 00:06:58.655
myself that a DynamoDB
database was created.

134
00:06:58.655 --> 00:06:59.540
So I go to Tables,

135
00:06:59.540 --> 00:07:02.555
there is that GrudgeTable that
we created earlier, right?

136
00:07:02.555 --> 00:07:05.482
So we defined a very
simple GraphQL schema.

137
00:07:05.482 --> 00:07:07.234
We hit Save Schema.

138
00:07:07.234 --> 00:07:08.777
And then, we hit Create Resources.

139
00:07:08.777 --> 00:07:12.822
And a database was built for
us under the hood.

140
00:07:12.822 --> 00:07:13.390
As we go and

141
00:07:13.390 --> 00:07:17.707
add stuff through GraphQL, this is
the database that's going to be populated.

142
00:07:17.707 --> 00:07:19.528
So you can start with AppSynch,

143
00:07:19.528 --> 00:07:23.103
and if you decide later on that
you don't want to use AppSynch or

144
00:07:23.103 --> 00:07:27.292
whatever, you have a just regular old
DynamoDB database under the hood.

145
00:07:27.292 --> 00:07:29.310
So let's go back, and
let's play around with this a little bit.

146
00:07:30.538 --> 00:07:32.727
&gt;&gt; Steve Kinney: So we've got our
resources, we've got our schema.

147
00:07:32.727 --> 00:07:34.891
Let's go into this Queries section.

148
00:07:34.891 --> 00:07:37.411
And we can begin to work with
the schema a little bit.

