WEBVTT

1
00:00:00.030 --> 00:00:03.490
&gt;&gt; Steve Kinney: So as we switch
back over to our terminal, I have

2
00:00:03.490 --> 00:00:10.150
the AWS Mobile CLI tool
installed globally in node.

3
00:00:11.710 --> 00:00:15.270
And we can use this tool to, basically,

4
00:00:15.270 --> 00:00:18.420
configure, push,
pull down publisher applications.

5
00:00:18.420 --> 00:00:22.830
Basically, work with all of our
applications in AWSmobile hub.

6
00:00:22.830 --> 00:00:25.190
So the first thing that you need to
do if you haven't done it already.

7
00:00:26.350 --> 00:00:31.948
So we're just got to have AWSmobile and
configure.

8
00:00:31.948 --> 00:00:37.330
Now, when you hit the enter key, you're
getting I'll ask the bunch of questions.

9
00:00:37.330 --> 00:00:40.800
Remember when I told you
download that CSV of credentials?

10
00:00:40.800 --> 00:00:42.870
It's gonna basically ask you for those.

11
00:00:42.870 --> 00:00:45.680
It's like okay,
I'm ready to work with AWS.

12
00:00:46.960 --> 00:00:49.570
Now, who are you?

13
00:00:49.570 --> 00:00:50.090
What's going on?

14
00:00:50.090 --> 00:00:52.170
I'm just a tool that you
installed off the internet.

15
00:00:52.170 --> 00:00:55.920
Please log in and
tell me what you want me to do.

16
00:00:55.920 --> 00:01:00.020
So in this case, once you have
all that information ready to go,

17
00:01:00.020 --> 00:01:03.590
I have that offscreen because
it's going to be impossible for

18
00:01:03.590 --> 00:01:06.520
me not to let that secret
slip at one point.

19
00:01:06.520 --> 00:01:11.415
But generally speaking,
you want to keep your secret keys secret.

20
00:01:11.415 --> 00:01:15.975
There's lots of tools out there that go
through public Github requests looking for

21
00:01:15.975 --> 00:01:16.535
different keys.

22
00:01:16.535 --> 00:01:18.505
That's something we have to
do deal with all the time,

23
00:01:18.505 --> 00:01:22.455
which is someone publishes their secret
key and then some spammer uses it

24
00:01:22.455 --> 00:01:26.015
to send 10 billion spam emails
running up that customer a huge bill.

25
00:01:26.015 --> 00:01:28.875
So we try to find them first and
shut down those API keys.

26
00:01:28.875 --> 00:01:30.620
It happens.

27
00:01:30.620 --> 00:01:34.440
So we do AWS mobile configure, all right?

28
00:01:34.440 --> 00:01:35.440
And we try it out.

29
00:01:35.440 --> 00:01:37.640
And you can see it's just gonna
as you three questions and

30
00:01:37.640 --> 00:01:38.840
you only need to do this once.

31
00:01:38.840 --> 00:01:40.930
It's gonna ask you for
your access key, all right?

32
00:01:40.930 --> 00:01:43.340
That was that first one that
wasn't hidden on that page.

33
00:01:44.900 --> 00:01:46.160
So we kind of put that in.

34
00:01:46.160 --> 00:01:48.670
You can see I've already logged
in once and it remembers it.

35
00:01:50.050 --> 00:01:51.300
And then again, it'll ask you for

36
00:01:51.300 --> 00:01:55.330
your secret key which is a slightly longer
key that you're not suppose to show on

37
00:01:55.330 --> 00:01:58.250
the screen to a while bunch
of people at the same time.

38
00:01:58.250 --> 00:01:59.230
Let it sit there for a second.

39
00:02:00.270 --> 00:02:02.370
Cool, you want to put that one into that.

40
00:02:02.370 --> 00:02:06.190
Again, if you're done with the CSP that's
the next column over or if you're still on

41
00:02:06.190 --> 00:02:10.290
that page you can hit show and get that
secret key and you should be good to go.

42
00:02:10.290 --> 00:02:14.530
And then finally,
what region you want to use.

43
00:02:14.530 --> 00:02:19.070
It's generally speaking if you are not
sitting in the United States of America

44
00:02:19.070 --> 00:02:22.850
right now, you probably want to
pick the region closest to you.

45
00:02:22.850 --> 00:02:24.680
Generally speaking, you want to
pick the region closest to you.

46
00:02:24.680 --> 00:02:28.400
If you really don't care
us-east-1 is usually a good bet.

47
00:02:28.400 --> 00:02:33.780
It is, arguably, I believe it's the oldest
one, it's got the most features.

48
00:02:33.780 --> 00:02:37.140
But it is also because it is kind
of the biggest and most popular,

49
00:02:37.140 --> 00:02:38.300
also the most volatile.

50
00:02:40.180 --> 00:02:42.397
Beyond the scope of this workshop,
is multi region.

51
00:02:42.397 --> 00:02:46.273
Which is a thing, like at SunGrid, we have
the main region that we run our code and

52
00:02:46.273 --> 00:02:48.957
then we have all of our code
deployed to a second region.

53
00:02:48.957 --> 00:02:52.579
Replicating that database in
case one AWS region goes down,

54
00:02:52.579 --> 00:02:57.250
we can fail over to the other region and
have as minimum agg as possible.

55
00:02:57.250 --> 00:02:59.960
While we are building a scalable
infrastructure today,

56
00:02:59.960 --> 00:03:01.242
let's not get ahead of ourselves.

57
00:03:01.242 --> 00:03:03.311
[LAUGH] That is tricky and hard,

58
00:03:03.311 --> 00:03:08.406
we're going to deploy scalably to one
region and when the VC money rolls in,

59
00:03:08.406 --> 00:03:12.810
then we will begin to deal
with the idea of multiregion.

60
00:03:12.810 --> 00:03:15.940
We'll pick one region,
I'm gonna pick us-east-1 but again,

61
00:03:15.940 --> 00:03:19.595
I recommend picking whichever
one is closest to you,

62
00:03:19.595 --> 00:03:23.870
us-east-one is northern Virginia,
us-east-2 is Ohio.

63
00:03:23.870 --> 00:03:30.690
West One is I believe Northern California
and West Two is Oregon.

64
00:03:30.690 --> 00:03:34.560
We're currently standing in Minneapolis,
which is kinda like right in the middle,

65
00:03:34.560 --> 00:03:36.440
so take your pick.

66
00:03:36.440 --> 00:03:38.610
In Denver, where I live,
it's a little closer to the west but

67
00:03:38.610 --> 00:03:39.670
I still pick US East One.

68
00:03:40.730 --> 00:03:41.360
Umm, cool.

69
00:03:41.360 --> 00:03:45.600
And that's it,
we've now configured the AWS mobile tool.

70
00:03:45.600 --> 00:03:48.090
We can now use it to initialize new maps.

71
00:03:48.090 --> 00:03:52.190
We can use it to interact with
AWS Mobile Hub in those applications.

72
00:03:52.190 --> 00:03:54.128
You do that once on your
computer you're good to go.

73
00:03:56.851 --> 00:04:01.711
&gt;&gt; Steve Kinney: So the next question is
how do we set that up in a particular

74
00:04:01.711 --> 00:04:03.520
application?

75
00:04:03.520 --> 00:04:08.150
So we have this application, it needs
a backend and some Authentication and

76
00:04:08.150 --> 00:04:09.810
authorization.

77
00:04:09.810 --> 00:04:11.500
So let's give it a shot.

78
00:04:11.500 --> 00:04:13.690
So we are in this grudges repo.

79
00:04:13.690 --> 00:04:16.466
And if you have an application, and you're
like, this application is wonderful.

80
00:04:16.466 --> 00:04:20.773
It needs a backend, we can go ahead and

81
00:04:20.773 --> 00:04:24.553
we type awsmobile in it, right?

82
00:04:24.553 --> 00:04:31.767
And this will initialize a new AWS,
&gt;&gt; Steve Kinney: Backend for

83
00:04:31.767 --> 00:04:33.830
this application.

84
00:04:33.830 --> 00:04:36.404
One thing I'm gonna do real quick is I'm
just gonna make sure that I don't have

85
00:04:36.404 --> 00:04:37.154
an old folder in here.

86
00:04:45.346 --> 00:04:46.978
&gt;&gt; Steve Kinney: It's going to
create two source files and

87
00:04:46.978 --> 00:04:50.260
you already have a sneak peak as
to what those are going to be.

88
00:04:50.260 --> 00:04:54.183
But we'll go ahead and we'll start
a brand new application in this case and

89
00:04:54.183 --> 00:04:55.624
we'll do that AWS mobile.

90
00:04:58.553 --> 00:04:59.053
&gt;&gt; Steve Kinney: init.

91
00:05:01.775 --> 00:05:03.640
&gt;&gt; Steve Kinney: This is gonna
ask you a bunch of questions.

92
00:05:05.170 --> 00:05:09.875
The command line tool is smart enough
to know that we're in a React app and

93
00:05:09.875 --> 00:05:13.475
it's create React app which is
a boilerplate for React applications.

94
00:05:13.475 --> 00:05:15.635
So, it knows how to work with it and
deal with it.

95
00:05:15.635 --> 00:05:17.905
So, we don't have to make
a bunch of decisions.

96
00:05:17.905 --> 00:05:20.475
There's actually a hidden trick if you,
we're going to hit enter,

97
00:05:20.475 --> 00:05:22.809
just say yes to everything but
if you do -y.

98
00:05:22.809 --> 00:05:25.575
It will actually just answer
yes to all the questions and

99
00:05:25.575 --> 00:05:28.425
not bother you with them but
I want to show you what the questions are.

100
00:05:28.425 --> 00:05:31.540
So, I'm not gong to do that but
in the further we might be like, yeah,

101
00:05:31.540 --> 00:05:32.140
just dash Y.

102
00:05:32.140 --> 00:05:34.490
If you find yourself just
slamming the enter key over and

103
00:05:34.490 --> 00:05:39.020
over again, dash Y is probably a friend.

104
00:05:39.020 --> 00:05:44.210
Fun fact, if you use MPM, you MPM in it,
you hit those questions, dash Y or

105
00:05:44.210 --> 00:05:46.460
dash dash yes will do
the same thing there as well.

106
00:05:47.720 --> 00:05:49.139
So what are the questions
that we get asked?

107
00:05:50.140 --> 00:05:52.650
Okay, where is your
project source directory?

108
00:05:52.650 --> 00:05:58.480
And it's taking a lucky guess that it's
in this SRC folder, which if I look,

109
00:05:58.480 --> 00:06:02.400
that is where my source code lives.

110
00:06:02.400 --> 00:06:03.010
Very cool.

111
00:06:03.010 --> 00:06:05.280
All right,

112
00:06:05.280 --> 00:06:10.540
where is your projects distribution
directory that stores build artifacts?

113
00:06:10.540 --> 00:06:15.000
That is a very complicated question that's
basically, when this application is built,

114
00:06:15.000 --> 00:06:16.770
what folder do you build it into?

115
00:06:16.770 --> 00:06:19.660
We have never built this
application before.

116
00:06:19.660 --> 00:06:25.500
Create react out of a box built to a build
directory, which it guessed correctly.

117
00:06:25.500 --> 00:06:28.450
Sometimes there'll be a dist directory or

118
00:06:28.450 --> 00:06:32.240
an out directory depending on
your application's configuration.

119
00:06:32.240 --> 00:06:33.180
If it's in webpack,

120
00:06:33.180 --> 00:06:35.730
then it's usually in your webpack
config what folder you build to.

121
00:06:37.470 --> 00:06:39.530
This case,
build is gonna be the one that we have.

122
00:06:39.530 --> 00:06:42.930
You can see this one is Gitignore but
it is the like build artifacts for

123
00:06:42.930 --> 00:06:44.697
when I compile my web application.

124
00:06:46.593 --> 00:06:48.790
&gt;&gt; Steve Kinney: So
we'll go with yes on that one.

125
00:06:48.790 --> 00:06:50.720
What is the script for building it?

126
00:06:50.720 --> 00:06:55.400
A lot of MPM maps, basically that's
defined in the package J-son.

127
00:06:55.400 --> 00:07:01.160
So if we go in here, you can see Start,
build, test, and eject.

128
00:07:01.160 --> 00:07:05.360
These are not very helpful because create
react app kind of abstracts all of that so

129
00:07:05.360 --> 00:07:06.930
they can change it under the hood.

130
00:07:06.930 --> 00:07:09.410
But if you have your
own React application,

131
00:07:09.410 --> 00:07:12.010
you might actually have very
specific commands in here.

132
00:07:12.010 --> 00:07:17.380
You might be like Web pack, dev server for
start, which is web pack for the build.

133
00:07:17.380 --> 00:07:20.130
And kind of figuring
out all of that stuff.

134
00:07:20.130 --> 00:07:23.620
But in this case, start,
build, test and eject.

135
00:07:23.620 --> 00:07:27.130
For those of you who have never used
create reacta before, eject is like, hey,

136
00:07:27.130 --> 00:07:28.880
all this stuff where you
hide reality from me.

137
00:07:28.880 --> 00:07:29.543
I don't like it.

138
00:07:29.543 --> 00:07:34.310
Right, [LAUGH] and it will,
basically, open the curtain and

139
00:07:34.310 --> 00:07:36.500
show you what's going on under the hood.

140
00:07:36.500 --> 00:07:40.590
But for simplicity's sake, we gonna
hide as much complexity as possible.

141
00:07:40.590 --> 00:07:42.840
Because, again, a lot of this stuff
is complicated to begin with.

142
00:07:42.840 --> 00:07:45.240
All right, cool.

143
00:07:45.240 --> 00:07:48.280
So build works, a test for starting.

144
00:07:48.280 --> 00:07:51.440
It's gonna be MPM run-script start.

145
00:07:51.440 --> 00:07:52.430
Very cool.

146
00:07:52.430 --> 00:07:53.960
What project name you want to use?

147
00:07:53.960 --> 00:07:56.950
It's gonna try to generate
a unique name for you.

148
00:07:56.950 --> 00:08:01.090
This is based on the directory,
the current date and time, which I guess

149
00:08:01.090 --> 00:08:06.320
unless you create two applications
in the same directory at the same,

150
00:08:06.320 --> 00:08:12.840
I think it's down to the second,
is probably going to be unique.

151
00:08:12.840 --> 00:08:19.740
Cool and so you can see, it's creating
a back end for our AWS mobile project.

152
00:08:19.740 --> 00:08:22.450
So we'll give that second.

153
00:08:23.630 --> 00:08:26.540
And it's basically creating
a few folders for us.

154
00:08:26.540 --> 00:08:28.230
You can kind of see it
along the way there.

155
00:08:28.230 --> 00:08:30.410
It's also installing,
if you look right now.

156
00:08:30.410 --> 00:08:33.510
This yarn add aws-amplify,

157
00:08:33.510 --> 00:08:39.780
that's the library we talked about before,
that allows us to talk to AWS Mobile Hub.

158
00:08:39.780 --> 00:08:44.510
It's also going to separately, for
some reason, install aws-amplify-react.

159
00:08:44.510 --> 00:08:46.850
Why it didn't do both at the same time,
I don't know.

160
00:08:46.850 --> 00:08:51.410
It knows you want amplify and then it goes
to check probably for your react app.

161
00:08:51.410 --> 00:08:54.380
I don't know, we can all read the source
code together during our break,

162
00:08:54.380 --> 00:08:56.090
it'll be a lot of fun.

163
00:08:56.090 --> 00:08:57.360
So there it tells you what it did.

164
00:08:58.630 --> 00:09:03.320
So it created a AWS mobile JS folder and

165
00:09:03.320 --> 00:09:06.740
in there a AWS mobile directory and

166
00:09:06.740 --> 00:09:10.410
that is it's own like working
directory for keeping track of stuff.

167
00:09:10.410 --> 00:09:16.040
Your job is not to touch them
Awsmobilejs in a current backend info,

168
00:09:16.040 --> 00:09:18.920
which is basically the last
time they talked Amazon,

169
00:09:18.920 --> 00:09:22.980
what it things your backend
is as you work locally.

170
00:09:22.980 --> 00:09:27.210
Awsmobilejs slash backend,

171
00:09:27.210 --> 00:09:31.100
is the backend code that
actually runs everything for you.

172
00:09:31.100 --> 00:09:33.370
Now, this was generated for you.

173
00:09:33.370 --> 00:09:36.061
But, you're welcome to tweak
it as much as you want.

174
00:09:36.061 --> 00:09:39.300
You need to do custom stuff and change
your back-end this is the back-end code

175
00:09:39.300 --> 00:09:43.750
and when you push it up, you tell Amazon
like hey make these changes to my code and

176
00:09:43.750 --> 00:09:46.070
it's like okay go for it,
and it applies it all.

177
00:09:46.070 --> 00:09:50.800
Right, so both your back-end code and
your front-end code live in the same repo.

178
00:09:51.970 --> 00:09:55.250
Now, this is great because all
your code is together, and

179
00:09:55.250 --> 00:09:57.660
you can configure backend
right next to your front end.

180
00:09:57.660 --> 00:10:02.970
It's also JavaScript has this unique
problem, which is if you have a Ruby

181
00:10:02.970 --> 00:10:07.560
on Rails backend, you know you're working
on the backend if you're writing Ruby.

182
00:10:07.560 --> 00:10:10.700
And you know you're working on the front
end, if you're writing JavaScript or

183
00:10:10.700 --> 00:10:14.380
coffee script,
if you write a reels, but whatever.

184
00:10:14.380 --> 00:10:17.970
With JavaScript, because you can
write JavaScript on the backend and

185
00:10:17.970 --> 00:10:19.490
JavaScript on the font-end, and

186
00:10:19.490 --> 00:10:22.600
now they're very close together,
that's great in a lot of ways.

187
00:10:22.600 --> 00:10:26.770
Cuz you can share code, have a lot re-use,
it's also [LAUGH] slightly confusing,

188
00:10:26.770 --> 00:10:31.295
because sometimes you can lose track if
you're in the backend of your co-base of

189
00:10:31.295 --> 00:10:34.236
the frontend because it's all
JavaScript the whole laid down.

190
00:10:34.236 --> 00:10:39.730
So Double-edged sword awsmobile console
will actually open up the web UI,

191
00:10:39.730 --> 00:10:41.450
we'll take a look at in a second.

192
00:10:41.450 --> 00:10:47.510
Awsmobile run will effectively push
your backend changes to Amazon

193
00:10:47.510 --> 00:10:53.145
and then it will go ahead and do an mpm
start or yarn start on your application.

194
00:10:53.145 --> 00:10:56.665
Mpm and yarn are effectively they're
different package managers and

195
00:10:56.665 --> 00:10:58.085
they're also script runners.

196
00:10:58.085 --> 00:11:01.890
Anytime you see me type yarn start,
you can probably just type mpm start.

197
00:11:01.890 --> 00:11:05.590
It's the same way, same either way,
they're just different package manager,

198
00:11:05.590 --> 00:11:07.880
getting stuff from the PM repository.

199
00:11:07.880 --> 00:11:12.040
Whichever one you're more
comfortable with is totally fine.

200
00:11:12.040 --> 00:11:15.660
The only place where
the syntax is different

201
00:11:15.660 --> 00:11:18.340
is when we go to install new dependencies.

202
00:11:18.340 --> 00:11:21.200
But all the dependency in this
application are already installed,

203
00:11:21.200 --> 00:11:26.840
so Effectively and will correct
this if I've overlooked something.

204
00:11:26.840 --> 00:11:30.920
If you have npm on your system,
you see me type yarn or vice versa,

205
00:11:30.920 --> 00:11:35.300
I'm gonna tell you a secret about me,
I use them both back and forth,

206
00:11:35.300 --> 00:11:38.530
I will use yarn add and
then npm start cuz I'm a terrible person.

207
00:11:38.530 --> 00:11:41.190
So you can use either one.

208
00:11:41.190 --> 00:11:43.190
It's totally fine for our cases.

209
00:11:43.190 --> 00:11:46.390
And then awsmobile publish is
going to take your project and

210
00:11:46.390 --> 00:11:48.000
it's gonna put it on the Internet.

211
00:11:48.000 --> 00:11:52.830
It's gonna deploy it with a single
command, and just basically

212
00:11:52.830 --> 00:11:56.870
take all your back-end, spin it up for
production and get it rocking and rolling.

213
00:11:58.310 --> 00:12:01.110
Cool, so
now we have this kind of back-end code.

214
00:12:01.110 --> 00:12:04.070
Ready to go,
we haven't told our application about it.

215
00:12:04.070 --> 00:12:06.100
But I showed you that slide
before with some features,

216
00:12:06.100 --> 00:12:08.350
I kinda wanna show it to you again.

217
00:12:10.480 --> 00:12:13.610
And what we'll do is
we'll kinda take a look.

218
00:12:13.610 --> 00:12:16.880
And we'll just go type awsmobile,
and I'm gonna type nothing.

219
00:12:16.880 --> 00:12:19.248
Now this by itself doesn't do anything,
it's just gonna show you all the options.

220
00:12:22.264 --> 00:12:24.090
&gt;&gt; Steve Kinney: So
here are the commands you can type.

221
00:12:24.090 --> 00:12:30.050
AWS mobile start, which is start AWS
mobile using one of our starter templates.

222
00:12:30.050 --> 00:12:34.590
If you go to the actual website,
you can see they have a swift starter kit,

223
00:12:34.590 --> 00:12:36.770
they have a bunch of
basically pre-built apps.

224
00:12:37.880 --> 00:12:39.290
Init is the one we ran,

225
00:12:39.290 --> 00:12:44.320
which is kinda turned an existing
project into a AWS mobile project.

226
00:12:44.320 --> 00:12:46.210
Pull says hey Amazon,

227
00:12:46.210 --> 00:12:49.660
tell me what you think my backend is
cuz if you go into the web UI and

228
00:12:49.660 --> 00:12:53.880
change a bunch of stuff well your code
on your computer doesn't know about it.

229
00:12:53.880 --> 00:12:57.910
So you have pull it down effectively
think about get push and get pull.

230
00:12:57.910 --> 00:13:03.090
Speaking of push will basically
send my code up to the cloud.

231
00:13:03.090 --> 00:13:05.360
The cloud is just a nice way
of somebody else's computer.

232
00:13:05.360 --> 00:13:06.750
It's the same thing.

233
00:13:06.750 --> 00:13:08.690
In this case Amazon's many computers.

234
00:13:08.690 --> 00:13:11.510
Delete is like this whole
app was a terrible idea.

235
00:13:11.510 --> 00:13:13.170
Take it all down.

236
00:13:13.170 --> 00:13:14.580
We're closing up shop.

237
00:13:14.580 --> 00:13:16.130
I'm not doing this anymore.

238
00:13:16.130 --> 00:13:18.190
That's effectively what delete does for
you.

239
00:13:18.190 --> 00:13:22.640
Published as we saw before puts it on the
Internet, run will push up your code and

240
00:13:22.640 --> 00:13:24.900
then run it locally.

241
00:13:24.900 --> 00:13:28.720
Console will basically
fire up that AWS web UI,

242
00:13:28.720 --> 00:13:31.520
you can see a bunch of stuff and
modify some stuff there.

243
00:13:31.520 --> 00:13:35.230
Configure is going to change
some of the settings,

244
00:13:35.230 --> 00:13:38.750
like we saw we set up our account before,
we put in our access key and our secret ID

245
00:13:38.750 --> 00:13:42.090
before features is definitely
the one we want to look at next.

246
00:13:42.090 --> 00:13:44.600
And help is effectively useful for

247
00:13:44.600 --> 00:13:47.330
the rest of these,
as we can pull up a different feature.

248
00:13:47.330 --> 00:13:51.370
So it kind of shows you what the Amazon,
the EWS mobile features are.

249
00:13:51.370 --> 00:13:54.280
I want to point out that if,
you know, it's a month from now, or

250
00:13:54.280 --> 00:13:54.890
two months from now.

251
00:13:54.890 --> 00:13:58.700
And this list looks different,
it's because is changing,

252
00:13:58.700 --> 00:14:01.100
like this tool came out in November,
[INAUDIBLE].

253
00:14:01.100 --> 00:14:05.350
I believe it was but
it came out in November of 2017.

254
00:14:05.350 --> 00:14:08.410
So it is about six months old.

255
00:14:08.410 --> 00:14:13.650
And even when I started preparing for
this, AppSync wasn't on that list, right?

256
00:14:15.380 --> 00:14:18.630
So, that is new somewhat recently,

257
00:14:18.630 --> 00:14:21.910
I actually open up a poll request because
in all the doc examples they show you all

258
00:14:21.910 --> 00:14:24.110
the features appsync isn't
on there in the docs yet.

259
00:14:24.110 --> 00:14:27.580
So, that's how quickly some
of the stuff is changing.

260
00:14:27.580 --> 00:14:30.960
But the kind of major things, you can
see how this could be very important for

261
00:14:30.960 --> 00:14:33.486
a building a full stack
React Node application.

262
00:14:33.486 --> 00:14:36.820
We have user-signin,
user-files which is the ability for

263
00:14:36.820 --> 00:14:41.820
the user to upload files publically or
kind of name space them privately.

264
00:14:41.820 --> 00:14:46.360
Cloud api, which is s way to
spin up an api gateway and

265
00:14:46.360 --> 00:14:50.380
then some lambda functionality to figure
out, okay this endpoint is hit, now what?

266
00:14:50.380 --> 00:14:53.480
A database for persisting data which
we're definitely going to need.

267
00:14:53.480 --> 00:14:56.950
Analytics, we're not going to be using it
today, but I told you about it earlier.

268
00:14:56.950 --> 00:14:59.440
It's like basically, you can have all
sorts of different tracking events and

269
00:14:59.440 --> 00:15:01.740
you can actually fire your
own custom tracking events.

270
00:15:01.740 --> 00:15:03.890
Hosting which is how we're
gonna put on the internet.

271
00:15:03.890 --> 00:15:06.720
App sync,
we're not gonna use amplifiers and

272
00:15:06.720 --> 00:15:08.800
I'll tell you the reasons
why in a little bit.

273
00:15:08.800 --> 00:15:12.260
But basically, it's a way of speeding
up the app sync service as well.

274
00:15:14.270 --> 00:15:15.210
Cool.

275
00:15:15.210 --> 00:15:17.570
So we've done an initialization of it.

276
00:15:17.570 --> 00:15:21.870
The only thing we haven't done, we created
a file which we'll look in a second called

277
00:15:21.870 --> 00:15:27.030
AWS exports, that is all of
our configuration, very cool.

278
00:15:27.030 --> 00:15:31.940
And then we have another one,
that directory that we saw earlier, right?

279
00:15:31.940 --> 00:15:35.450
Those things are set up, but
my react application, the code from,

280
00:15:35.450 --> 00:15:38.250
it didn't go in and change my application.

281
00:15:38.250 --> 00:15:40.860
You can be like, yeah,
why write my application for me.

282
00:15:40.860 --> 00:15:44.560
Generally speaking, let's leave
the programming to the programmers.

283
00:15:44.560 --> 00:15:46.700
Right, it's done enough for us.

284
00:15:46.700 --> 00:15:51.510
My react application still doesn't
know About this AWS application.

285
00:15:51.510 --> 00:15:54.820
So what we need to do is basically tell

286
00:15:54.820 --> 00:15:58.130
the React application that
all this AWS stuff exists.

287
00:15:58.130 --> 00:15:59.760
We'll actually take a look at that and
try it out.

288
00:16:01.000 --> 00:16:06.050
Now, we see it made this
AWS exports file but

289
00:16:06.050 --> 00:16:09.840
it's a very helpful warning at
the top saying DO NOT EDIT.

290
00:16:10.860 --> 00:16:12.510
Your mileage may vary.

291
00:16:12.510 --> 00:16:13.910
You can choose to listen to that or not.

292
00:16:13.910 --> 00:16:16.010
I am a rule follower, so I don't edit it.

293
00:16:16.010 --> 00:16:17.940
I can't tell you what
happens if you do edit it.

294
00:16:17.940 --> 00:16:20.840
It probably just blows away your
changes cuz it told you not to edit it.

295
00:16:20.840 --> 00:16:26.210
And then next time you make a change but
this is basically all of the Amazon

296
00:16:26.210 --> 00:16:31.170
configuration that your client-side
app needs to know about.

297
00:16:31.170 --> 00:16:37.300
So, okay, analytics are enabled, our
cognito identity pool, so on and so forth.

298
00:16:37.300 --> 00:16:40.720
What region we're in and what cloud
front domain we're going to use.

299
00:16:40.720 --> 00:16:45.260
The analytics FID, so on and so forth.

300
00:16:45.260 --> 00:16:46.410
Don't touch these.

301
00:16:46.410 --> 00:16:49.430
These are just what your client setup
needs to know to figure out where it

302
00:16:49.430 --> 00:16:54.080
needs to talk to when you do
heroically deploy it to the Internet.

303
00:16:55.870 --> 00:16:57.340
This AWSMobileJS.

304
00:16:57.340 --> 00:16:58.700
This is where your backend lives and

305
00:16:58.700 --> 00:17:02.980
again, it can get sometimes confusing
like this happen to me where it's.

306
00:17:02.980 --> 00:17:05.860
I'll tell you a more embarrassing version
of where this happen to me in a second but

307
00:17:05.860 --> 00:17:08.867
like you think you're changing client side
code, you're changing back end code and

308
00:17:08.867 --> 00:17:10.138
wondering why nothing is working.

309
00:17:10.138 --> 00:17:13.962
The more embarrassing version of this
as somebody that used to teach web

310
00:17:13.962 --> 00:17:16.830
development, is you're
writing documentation and

311
00:17:16.830 --> 00:17:19.330
you have a code sample
in your documentation.

312
00:17:19.330 --> 00:17:22.048
And you keep changing the example
in your documentation and

313
00:17:22.048 --> 00:17:25.340
wondering why your code isn't
changing in your application.

314
00:17:25.340 --> 00:17:29.139
That's the more embarrassing version of
that [LAUGH] because you're changing it in

315
00:17:29.139 --> 00:17:31.320
a marked down file,
not in a JavaScript file.

316
00:17:31.320 --> 00:17:32.650
So this is our current backend and

317
00:17:32.650 --> 00:17:36.690
the only one we're really gonna
touch is this backend directory.

318
00:17:36.690 --> 00:17:38.490
And right now,
there's not really a lot there,

319
00:17:38.490 --> 00:17:43.870
there's just more configuration about
how our backend is actually formed.

320
00:17:43.870 --> 00:17:48.570
As we build this application, we'll
see a little bit more in there but for

321
00:17:48.570 --> 00:17:53.120
starters, this is gonna remain
somewhat simple, as we add features,

322
00:17:53.120 --> 00:17:55.380
it'll get slightly more complex.

