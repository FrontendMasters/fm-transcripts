WEBVTT

1
00:00:00.192 --> 00:00:01.690
&gt;&gt; Steve Kinney: So we're gonna
look at this React application.

2
00:00:01.690 --> 00:00:03.550
I'm gonna take you on a tour of it.

3
00:00:03.550 --> 00:00:08.610
This React application right now, it's
like a brand new Create React application.

4
00:00:08.610 --> 00:00:11.010
It's managing all of its state in memory.

5
00:00:11.010 --> 00:00:12.489
And it doesn't have any back end.

6
00:00:12.489 --> 00:00:15.824
It doesn't have any sense of
authentication, or authorization,

7
00:00:15.824 --> 00:00:17.410
or anything along those lines.

8
00:00:18.600 --> 00:00:24.298
It just is, again, a very simple,
just a few components on the page.

9
00:00:24.298 --> 00:00:28.204
And this is an application for keeping
track of all the people who have wronged

10
00:00:28.204 --> 00:00:30.200
you, cuz that's difficult at times.

11
00:00:30.200 --> 00:00:33.650
As I get older, there's more and more
people that need a place on that list.

12
00:00:33.650 --> 00:00:36.190
And so sometimes, being an engineer,
you're trying to scratch your own itch,

13
00:00:36.190 --> 00:00:38.380
and you're trying to build
the application that you need.

14
00:00:38.380 --> 00:00:40.050
And maybe other people find it useful.

15
00:00:40.050 --> 00:00:43.473
And so I hope, as we build this
application, and give it a back end, and

16
00:00:43.473 --> 00:00:47.757
give it authentication, eventually give it
real-time push and stuff that I don't know

17
00:00:47.757 --> 00:00:51.614
if any grudge list really needs, we'll
kind of build in all of those features.

18
00:00:51.614 --> 00:00:54.314
We'll also build a second application
in a little bit, as well.

19
00:00:54.314 --> 00:00:57.490
But this is kind of our main
application as we go through.

20
00:00:57.490 --> 00:00:59.074
So let's actually switch gears and

21
00:00:59.074 --> 00:01:01.567
take a little bit of a look at
a tour of this application.

22
00:01:09.277 --> 00:01:11.353
&gt;&gt; Steve Kinney: I'm gonna
check out a new branch.

23
00:01:11.353 --> 00:01:12.580
What should I call this new branch?

24
00:01:15.496 --> 00:01:19.280
&gt;&gt; Steve Kinney: really-live,
okay, gonna have our branch.

25
00:01:19.280 --> 00:01:21.560
We'll kinda push up to
it as a we go along.

26
00:01:21.560 --> 00:01:27.855
This branch is a little bit changed from
a normal AWS Mobile Hub application,

27
00:01:27.855 --> 00:01:32.540
insofar that I added some of the Mobile
Hub specific stuff to gitignore.

28
00:01:32.540 --> 00:01:35.120
So you should be able to
pull in some of the changes.

29
00:01:35.120 --> 00:01:37.540
Normally, you can figure all
this back end in your repo,

30
00:01:37.540 --> 00:01:40.020
you probably wanna commit
it to source control.

31
00:01:40.020 --> 00:01:43.028
So this is like a few extra
additions to gitignore.

32
00:01:43.028 --> 00:01:46.361
But your application, you can
actually configure your back end in

33
00:01:46.361 --> 00:01:49.480
this same repo and
have all that infrastructure set in code.

34
00:01:49.480 --> 00:01:53.990
A lot of times, well especially
with DevOps stuff, it's one wizard.

35
00:01:53.990 --> 00:01:57.954
It's like configuring all these
servers and then went on vacation and

36
00:01:57.954 --> 00:02:00.110
nobody knows how anything works.

37
00:02:00.110 --> 00:02:03.792
In this case, a lot of your back end
infrastructure is committed as code.

38
00:02:03.792 --> 00:02:06.070
And you can check in the version control,
you can see how it changes.

39
00:02:06.070 --> 00:02:08.760
And you can modify the infrastructure and
push it back up.

40
00:02:08.760 --> 00:02:13.030
We just have those things in gitignore,
because sharing is caring.

41
00:02:13.030 --> 00:02:16.000
Right, so that branch,
the really light branch just pushed up.

42
00:02:16.000 --> 00:02:16.829
Right now, it's just master.

43
00:02:17.980 --> 00:02:20.798
We haven't made any changes to it yet.

44
00:02:20.798 --> 00:02:22.560
We're gonna take a tour
of the application.

45
00:02:22.560 --> 00:02:27.177
Then what we're gonna do is we're going
to see how easy it is to kind of deploy

46
00:02:27.177 --> 00:02:29.719
a full stack React and Node application.

47
00:02:29.719 --> 00:02:32.166
Right, all of the code will be in
this application, our back end,

48
00:02:32.166 --> 00:02:33.425
as well as our front end.

49
00:02:33.425 --> 00:02:38.095
But it won't just be like a little
toy app on a single server somewhere.

50
00:02:38.095 --> 00:02:44.765
It's going to be a full AWS powered,
scalable infrastructure from day one.

51
00:02:44.765 --> 00:02:49.035
First, let's just take a tour of
the actual React code, though.

52
00:02:49.035 --> 00:02:56.550
This application started it's life
as a Create React App application.

53
00:02:56.550 --> 00:03:01.240
So React applications start
with a single component

54
00:03:01.240 --> 00:03:03.580
mounted to a single element in the DOM.

55
00:03:03.580 --> 00:03:06.700
So in this case, there is,
if we looked at the index.html,

56
00:03:06.700 --> 00:03:09.236
we would see that it's got a head and
it's got a body.

57
00:03:09.236 --> 00:03:14.102
And it only has one empty div in it, which
has the ID of root, which is all we need.

58
00:03:14.102 --> 00:03:17.617
Cuz we're gonna pull in React,
ReactDOM, our basic CSS file,

59
00:03:17.617 --> 00:03:20.900
this application component,
and mount it onto the page.

60
00:03:20.900 --> 00:03:25.069
So this is the kind of source
of truth of our application.

61
00:03:25.069 --> 00:03:32.100
Inside of Application.js,
&gt;&gt; Steve Kinney: We're gonna pull in,

62
00:03:32.100 --> 00:03:35.381
we have a few helper components which
is a list of all of our grudges and

63
00:03:35.381 --> 00:03:37.315
a little form for creating a new grudge.

64
00:03:37.315 --> 00:03:38.840
We're not really gonna
need to work with these.

65
00:03:38.840 --> 00:03:42.336
I've had them made them components so just
basically get them out of these files, so

66
00:03:42.336 --> 00:03:44.073
they didn't have to touch them too much.

67
00:03:44.073 --> 00:03:49.378
But Application, this component,
holds on to some amount of state.

68
00:03:49.378 --> 00:03:54.281
In this case, it's an empty array of
grudges that we're keeping in memory.

69
00:03:54.281 --> 00:03:58.714
We have a method for adding a grudge,
and all that does is a text a single

70
00:03:58.714 --> 00:04:02.640
grudge and pass it on to the array
of all the existing grudges.

71
00:04:02.640 --> 00:04:07.330
So if we fill the form, that grudge is
added on, and we can see it on the page.

72
00:04:07.330 --> 00:04:08.610
All of this is happening in memory.

73
00:04:08.610 --> 00:04:11.920
So the moment you refresh this page,
everything's gone, right,

74
00:04:11.920 --> 00:04:14.660
which makes it kind of not great for
it's purpose.

75
00:04:14.660 --> 00:04:15.390
But you know, what do I know.

76
00:04:16.460 --> 00:04:20.460
Removing a grudge, we just filter
out the grudge that has that ID.

77
00:04:20.460 --> 00:04:23.170
There are obviously more robust and

78
00:04:23.170 --> 00:04:26.600
sophisticated ways of managing
state in a React application.

79
00:04:26.600 --> 00:04:30.129
But the goal is to kinda keep it
simple and into one component.

80
00:04:30.129 --> 00:04:33.151
A very handsome gentleman did
an entire two-day course on

81
00:04:33.151 --> 00:04:36.675
Advanced State Management in React,
you should totally watch it.

82
00:04:38.810 --> 00:04:42.175
&gt;&gt; Steve Kinney: Toggling, we're basically
gonna find all the other grudges,

83
00:04:42.175 --> 00:04:43.421
change our one grudge,

84
00:04:43.421 --> 00:04:47.048
and then put that changed grudge on
the list of all the other grudges.

85
00:04:47.048 --> 00:04:50.397
All right, it's just a way of,
arrays are hard, [LAUGH] right?

86
00:04:50.397 --> 00:04:52.730
You have to get all the stuff
that's not in there, right?

87
00:04:52.730 --> 00:04:56.320
I feel really strongly about objects, but
that's a whole bunch of extra boilerplate.

88
00:04:56.320 --> 00:04:57.830
So we'll stick with arrays,

89
00:04:57.830 --> 00:05:00.430
even if we're kinda staring at the code
makes you wanna cry a little bit.

90
00:05:01.920 --> 00:05:03.750
Finally, all right, so

91
00:05:03.750 --> 00:05:06.800
that's all the state management
of this application component.

92
00:05:06.800 --> 00:05:09.620
What does it mean when we actually
wanna show it on the page?

93
00:05:09.620 --> 00:05:11.870
So we'll pull out all those
grudges out of the state.

94
00:05:11.870 --> 00:05:16.910
We have our unavengedgrudges and
our avengedgrudges.

95
00:05:16.910 --> 00:05:17.860
And we have this too.

96
00:05:17.860 --> 00:05:21.040
We have new grudge form,
which is just basically a name, and

97
00:05:21.040 --> 00:05:26.120
the thing that they did that wronged you
and a button to add them to the list.

98
00:05:26.120 --> 00:05:30.089
We have the list of unavengedgrudges and

99
00:05:30.089 --> 00:05:35.280
avengedgrudges, and the ability to
basically toggle and manage that state.

100
00:05:35.280 --> 00:05:38.412
Then finally, we export that application.

101
00:05:38.412 --> 00:05:41.160
I'm not gonna go through the rest of the
components cuz we won't be touching them.

102
00:05:41.160 --> 00:05:45.110
But it's basically the rest of
the infrastructure to get out of our way.

103
00:05:45.110 --> 00:05:48.030
For the most part,
when we modify this application,

104
00:05:48.030 --> 00:05:50.330
we're not gonna be changing
too much of its functionality.

105
00:05:50.330 --> 00:05:52.462
We're just gonna be changing
the way that it manages the state.

106
00:05:52.462 --> 00:05:55.760
Cuz right now,
it manages all that state in memory.

107
00:05:55.760 --> 00:05:59.260
Again, the second you refresh the page,
you're dumping out all of that memory.

108
00:05:59.260 --> 00:06:04.470
What we would like to do is
we would like to go ahead and

109
00:06:04.470 --> 00:06:06.820
actually persist that to a database.

110
00:06:06.820 --> 00:06:09.620
Now it's a little bit easier
said than done, right?

111
00:06:09.620 --> 00:06:12.050
You don't wanna have a global
database that everyone's,

112
00:06:12.050 --> 00:06:16.100
like maybe you wanna have a global
grudge that's that's anonymous.

113
00:06:16.100 --> 00:06:20.670
Anonymous people on the internet are the
best, probably not exactly what you want.

114
00:06:20.670 --> 00:06:25.626
So we need to implement some amount of
authentication so a user can log in.

115
00:06:25.626 --> 00:06:28.620
And then we need to figure out
what data belongs to each user.

116
00:06:28.620 --> 00:06:31.480
Like when a user logs in,
they should only see their data.

117
00:06:31.480 --> 00:06:33.540
Then we wanna persist
that data on the server.

118
00:06:34.660 --> 00:06:36.860
All right, now,
currently there is no server.

119
00:06:36.860 --> 00:06:41.342
And that's again, a part of what this
workshop is about is how do we spin up,

120
00:06:41.342 --> 00:06:45.194
again, a very scalable,
very robust back end very quickly, and

121
00:06:45.194 --> 00:06:48.575
kind of focusing on the parts
that make our apps special.

122
00:06:48.575 --> 00:06:51.985
Cuz I'm gonna be really honest,
this is a very special application.

123
00:06:51.985 --> 00:06:54.435
It has a lot of value that
it can bring to the world.

124
00:06:54.435 --> 00:06:57.135
And it's best that I get this
in the hands of customers and

125
00:06:57.135 --> 00:07:01.725
not me spending my entire weekend
doing stuff like authentication.

126
00:07:01.725 --> 00:07:02.855
I'm not interested in that.

127
00:07:02.855 --> 00:07:04.983
I don't want to do that.

128
00:07:04.983 --> 00:07:07.200
I'm not going to do that.

129
00:07:07.200 --> 00:07:09.850
So we have this application.

130
00:07:09.850 --> 00:07:13.480
And our goal is going to be to kind
of get that back end into place,

131
00:07:13.480 --> 00:07:16.340
get the API in place,
get the authentication in place.

132
00:07:17.900 --> 00:07:18.400
Very cool.

