WEBVTT

1
00:00:00.040 --> 00:00:02.550
&gt;&gt; Steve Kinney: So we played around
with it a little bit in the playground.

2
00:00:02.550 --> 00:00:06.430
Now what we're gonna do is actually
hook it up to a React application.

3
00:00:06.430 --> 00:00:08.775
So this is just branched off of Master.

4
00:00:08.775 --> 00:00:12.460
This is from where we
started the day earlier.

5
00:00:12.460 --> 00:00:13.656
And we're gonna do a few things.

6
00:00:13.656 --> 00:00:20.505
We're gonna reinitialize Amplify,
or AWS Mobile rather.

7
00:00:20.505 --> 00:00:23.811
And then we will have taken that absent
config that we downloaded at the very

8
00:00:23.811 --> 00:00:27.063
beginning of the section and
we'll learn how to take existing services,

9
00:00:27.063 --> 00:00:29.328
cuz we could spin up an absent
database in Amplify.

10
00:00:29.328 --> 00:00:33.210
We already did that work, and I kinda
wanna highlight that you don't need to

11
00:00:33.210 --> 00:00:35.769
create everything,
you use Amplify in Amplify.

12
00:00:35.769 --> 00:00:38.607
You can actually be able
to bring other services.

13
00:00:38.607 --> 00:00:41.425
So if you already have an S3 bucket,
something along those lines,

14
00:00:41.425 --> 00:00:43.065
you can actually bring that in as well.

15
00:00:43.065 --> 00:00:45.500
So I think it would be a good
opportunity to look at that.

16
00:00:45.500 --> 00:00:51.990
So do awsmobile init, and
I'm gonna say yes to everything.

17
00:00:54.250 --> 00:00:54.750
Cool.

18
00:01:02.256 --> 00:01:04.374
&gt;&gt; Steve Kinney: And then,
real quick, we'll also add in,

19
00:01:04.374 --> 00:01:08.269
because this is branched off of a Master
before we played with any of this, we'll

20
00:01:08.269 --> 00:01:12.138
bring in the AWS Amplifier library and
the AWS Amplifier React library as well.

21
00:01:17.436 --> 00:01:23.238
&gt;&gt; Steve Kinney: So
say yarn add aws-amplify

22
00:01:23.238 --> 00:01:28.320
aws-amplify-react.

23
00:01:32.447 --> 00:01:34.735
&gt;&gt; Steve Kinney: So
you get those both in there as well.

24
00:01:34.735 --> 00:01:42.184
So now if we flip over to our project,
&gt;&gt; Steve Kinney: We'll

25
00:01:42.184 --> 00:01:44.659
go in to the index.js, and

26
00:01:44.659 --> 00:01:50.153
we've got this very plain
starting of a React application.

27
00:01:50.153 --> 00:01:57.937
So we'll pull in Amplify
from 'aws-amplify',

28
00:01:57.937 --> 00:02:05.002
and we'll pull in
the configuration object.

29
00:02:07.134 --> 00:02:12.657
&gt;&gt; Steve Kinney: From ./aws-exports,
which was made for us by AWS Mobile ANET.

30
00:02:12.657 --> 00:02:16.797
Now, if we're just setting up a regular,

31
00:02:16.797 --> 00:02:20.938
why don't we do amplify.configure and,

32
00:02:30.951 --> 00:02:32.173
&gt;&gt; Steve Kinney: This configuration.

33
00:02:32.173 --> 00:02:35.377
And I'm spreading it cuz we're going
to add more stuff to it in a second.

34
00:02:35.377 --> 00:02:41.376
So what we'll do is, let's.

35
00:02:41.376 --> 00:02:42.994
&gt;&gt; Steve Kinney: Turn off analytics for
a second.

36
00:02:49.135 --> 00:02:50.513
&gt;&gt; Steve Kinney: Now,
even when we use appsync,

37
00:02:50.513 --> 00:02:53.947
you're gonna see it's not highlighted
cuz we didn't pull it in from Amplify.

38
00:02:53.947 --> 00:02:56.063
We're actually gonna custom
do that in our code.

39
00:02:56.063 --> 00:02:58.359
Let's just start
the application up real quick.

40
00:03:00.236 --> 00:03:02.580
&gt;&gt; Steve Kinney: And we've got our
application, everything works.

41
00:03:03.720 --> 00:03:05.960
So this is just regular Amplify.

42
00:03:05.960 --> 00:03:09.330
We're still seeing that,
I'll go ahead and turn that off.

43
00:03:11.965 --> 00:03:12.806
So we'll bring in,

44
00:03:22.404 --> 00:03:24.261
&gt;&gt; Steve Kinney: Cool.

45
00:03:24.261 --> 00:03:26.706
So go ahead and
that should be in place now.

46
00:03:26.706 --> 00:03:30.910
Now we wanna pull in that appsync
file that we download earlier, so

47
00:03:30.910 --> 00:03:32.874
it's in my downloads folder.

48
00:03:32.874 --> 00:03:37.566
And this is what we got from AWSs'
appsync webpage when we downloaded it.

49
00:03:37.566 --> 00:03:42.383
Now, this is almost good to go,
the only big difference is because Amplify

50
00:03:42.383 --> 00:03:46.141
is in charge of a lot of things,
we do need to name space it.

51
00:03:46.141 --> 00:03:50.865
So we can actually pull this in and
what we'll do is we'll say,

52
00:03:50.865 --> 00:03:57.541
const appSyncConfiguration
&gt;&gt; Steve Kinney: I'll paste that.

53
00:03:57.541 --> 00:04:02.600
The only thing we need to
do to get those working

54
00:04:02.600 --> 00:04:08.069
is just preface it with "aws appsync_,
right.

55
00:04:08.069 --> 00:04:11.462
This way it's like this is
not about the S3 bucket or

56
00:04:11.462 --> 00:04:14.726
anything this is configuring
appsync in particular.

57
00:04:14.726 --> 00:04:20.814
So we'll save that,
we'll verify that everything still works.

58
00:04:20.814 --> 00:04:25.221
It works but that nice helpful aslint
error is also telling me that you made

59
00:04:25.221 --> 00:04:27.225
a thing but you're not using it.

60
00:04:27.225 --> 00:04:28.110
So.

61
00:04:32.435 --> 00:04:35.311
&gt;&gt; Steve Kinney: Now could I
have changed the .awsx course?

62
00:04:35.311 --> 00:04:39.048
Totally, but that file said very clear on
the top when we saw it earlier this is

63
00:04:39.048 --> 00:04:40.612
auto generated, do not touch.

64
00:04:40.612 --> 00:04:44.903
So all this one does is
combine those two objects.

65
00:04:44.903 --> 00:04:48.724
Great, so now we're ready to go
into the application itself.

66
00:04:48.724 --> 00:04:51.516
And we're gonna pull in a few things.

67
00:04:51.516 --> 00:04:55.929
Before when we were working with
a Dynamo database, we went ahead and

68
00:04:55.929 --> 00:05:00.130
we had an API, and it was api.get,
api.push, or post rather.

69
00:05:00.130 --> 00:05:03.516
We're gonna do a very similar thing
cuz there's a similar method that we

70
00:05:03.516 --> 00:05:04.189
didn't use.

71
00:05:04.189 --> 00:05:09.381
So we'll say import { API

72
00:05:09.381 --> 00:05:15.517
} from "aws-amplify';.

73
00:05:15.517 --> 00:05:20.563
And we'll also pull in
this graphqlOperation.

74
00:05:20.563 --> 00:05:24.662
This will take a string of graphql,
and it will go ahead and

75
00:05:24.662 --> 00:05:27.183
turn into an actual graphql query.

76
00:05:27.183 --> 00:05:32.730
Now, in a lot of courses you'll see that
there's like a definite folder structure,

77
00:05:32.730 --> 00:05:34.511
to lay in all your graphql.

78
00:05:34.511 --> 00:05:37.251
You'll have your queries,
your mutations, all separate.

79
00:05:37.251 --> 00:05:39.812
For the purposes of learning together,

80
00:05:39.812 --> 00:05:42.971
it can be tricky to figure
out what file I'm in, so

81
00:05:42.971 --> 00:05:48.419
I'm going to put it all in one file called
graphql.js, that sounds like a good name.

82
00:05:48.419 --> 00:05:54.436
Graphql.js, and in here we'll start
with getting a list of all of them.

83
00:05:54.436 --> 00:05:58.328
So we'll say export const listGrudges.

84
00:06:03.012 --> 00:06:06.471
&gt;&gt; Steve Kinney: And we'll say that
equals, and make it a template string.

85
00:06:08.602 --> 00:06:14.024
&gt;&gt; Steve Kinney: And
that will be query listGrudges.

86
00:06:14.024 --> 00:06:16.511
We know from before that's items.

87
00:06:16.511 --> 00:06:22.338
Those items will be the id,
person, the deed,

88
00:06:22.338 --> 00:06:26.865
and if they have been avenged or not.

89
00:06:26.865 --> 00:06:30.634
All right, and so this will service
as our very basic graphql query.

90
00:06:30.634 --> 00:06:32.116
Let's see if I got it right.

91
00:06:32.116 --> 00:06:33.991
And I want to see how the data comes back.

92
00:06:33.991 --> 00:06:37.042
And I saw this on the playground but
I kind of want to see it in the context of

93
00:06:37.042 --> 00:06:39.955
my application to figure out what I
need to do to get it into the state.

94
00:06:39.955 --> 00:06:43.091
So we'll say when the component did mount,

95
00:06:48.109 --> 00:06:50.429
&gt;&gt; Steve Kinney: We will go ahead and

96
00:06:50.429 --> 00:06:55.215
do API.graphql, and we'll give that

97
00:06:55.215 --> 00:07:00.438
the graphql operation with listGrudges,

98
00:07:00.438 --> 00:07:03.930
which we've got to pull in.

99
00:07:03.930 --> 00:07:10.093
So let's say import,
&gt;&gt; Steve Kinney: ListGrudges

100
00:07:10.093 --> 00:07:13.320
from ./graphql.

101
00:07:19.915 --> 00:07:23.050
&gt;&gt; Steve Kinney: All right, when I come
back, we'll get some kind of response and

102
00:07:23.050 --> 00:07:26.247
what we'll do for now is we'll
simply console log that response.

103
00:07:35.751 --> 00:07:36.987
&gt;&gt; Steve Kinney: All right, we'll save it.

104
00:07:42.501 --> 00:07:44.131
&gt;&gt; Steve Kinney: We've got uncaught error.

105
00:07:50.228 --> 00:07:52.258
&gt;&gt; Steve Kinney: So
I've got an issue in my query.

106
00:07:52.258 --> 00:07:53.903
Let's go take a look at it.

107
00:08:03.717 --> 00:08:05.712
&gt;&gt; Steve Kinney: We forgot
that little middle section.

108
00:08:05.712 --> 00:08:10.593
So I'll say it's a query
called listGrudges, and

109
00:08:10.593 --> 00:08:14.575
that will call one more layer of nesting.

110
00:08:18.972 --> 00:08:23.748
&gt;&gt; Steve Kinney: Cool, and what I will
probably do to better protect myself

111
00:08:23.748 --> 00:08:28.430
is be a good a JavaScript citizen and
catch my own errors.

112
00:08:30.973 --> 00:08:33.167
&gt;&gt; Steve Kinney: Now I'm not gonna do
anything particularly special with it.

113
00:08:33.167 --> 00:08:36.775
I'm simply going to catch them and
consoler error them.

114
00:08:36.775 --> 00:08:38.664
Cool, so now we got this response.

115
00:08:38.664 --> 00:08:40.296
And the response has data.

116
00:08:40.296 --> 00:08:41.575
The data has listGrudges.

117
00:08:41.575 --> 00:08:43.229
The listGrudges has items.

118
00:08:43.229 --> 00:08:46.271
And in there If we dig down far enough,

119
00:08:46.271 --> 00:08:51.227
it is all of the grudges that I
made earlier in the playground.

120
00:08:51.227 --> 00:08:55.540
So what we'll do next, is we'll just
kind of list them onto the page.

121
00:08:55.540 --> 00:08:57.523
And we know how to do this, at this point.

122
00:08:57.523 --> 00:09:02.369
We'll go ahead, and we'll say,

123
00:09:02.369 --> 00:09:07.217
const grudges =, this is gonna be

124
00:09:07.217 --> 00:09:13.083
response.data.listGrudge.items.

125
00:09:15.505 --> 00:09:16.946
&gt;&gt; Steve Kinney: And
we'll set that in state.

126
00:09:26.148 --> 00:09:30.268
&gt;&gt; Steve Kinney: Boom and
we can see that they show up instantly,

127
00:09:30.268 --> 00:09:33.259
I mean for with a network request.

128
00:09:33.259 --> 00:09:35.899
This is the real data in our database,
and we have it ready to go.

129
00:09:35.899 --> 00:09:38.949
And getting it started in our React
application was not that difficult

130
00:09:38.949 --> 00:09:40.719
with all the abstractions
that amplify gives us.

