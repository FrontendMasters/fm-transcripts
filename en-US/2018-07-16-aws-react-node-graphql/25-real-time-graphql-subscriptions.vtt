WEBVTT

1
00:00:00.070 --> 00:00:05.150
&gt;&gt; Speaker 1: The next thing we want to do
is focus on this real-time piece, right,

2
00:00:05.150 --> 00:00:11.045
cuz updating, deleting is effectively
very similar to what we did previously.

3
00:00:11.045 --> 00:00:15.810
Let's look at how do we subscribe
to changes to the database and

4
00:00:15.810 --> 00:00:18.000
push those out to all of our users,
all right?

5
00:00:18.000 --> 00:00:20.960
And so it'll be a GraphQL query that we
haven't seen before when we were playing

6
00:00:20.960 --> 00:00:21.690
on the playground.

7
00:00:21.690 --> 00:00:23.330
But let's go ahead and implement it.

8
00:00:24.560 --> 00:00:28.020
So if I go to my graphql.js,
we're gonna make one

9
00:00:28.020 --> 00:00:33.641
more.
&gt;&gt; Speaker 1: And

10
00:00:33.641 --> 00:00:38.180
we'll call it SubscribeToNewGrudges.

11
00:00:39.400 --> 00:00:40.800
Now we're going to do one
more template string.

12
00:00:41.890 --> 00:00:45.610
And here we're going to say subscription,
right.

13
00:00:45.610 --> 00:00:47.446
Now, if we look at the schema,

14
00:00:47.446 --> 00:00:51.487
you'll see this is like a Appsync
special thing that we're given.

15
00:00:51.487 --> 00:00:54.694
So this will be onCreateGrudge.

16
00:00:54.694 --> 00:00:58.243
When we get back to the webpage
with the schema in it,

17
00:00:58.243 --> 00:01:04.278
I'll show it to you.
&gt;&gt; Speaker 1: Cool,

18
00:01:04.278 --> 00:01:09.390
and so this will be, onCreateGrudge.

19
00:01:09.390 --> 00:01:14.149
Anytime a new one comes in I want the id,
I want the person,

20
00:01:14.149 --> 00:01:19.120
I want the deed, and I want whether or
not they were avenged.

21
00:01:19.120 --> 00:01:25.210
Now, we'll probably subscribe to
this when the component mounts,

22
00:01:25.210 --> 00:01:28.782
just like we did for getting all of them.

23
00:01:28.782 --> 00:01:31.640
And that's gonna have a minor
bug that you'll see in a second.

24
00:01:31.640 --> 00:01:34.378
But let's do it, and
then we'll deal with that.

25
00:01:38.272 --> 00:01:40.639
&gt;&gt; Speaker 1: So we'll go here and

26
00:01:40.639 --> 00:01:46.501
we'll say API.graphql, nope, just graphql.

27
00:01:46.501 --> 00:01:54.090
And that'll be a graphqlOperation.
&gt;&gt; Speaker 1: And

28
00:01:54.090 --> 00:01:56.381
it's gonna be a little bit
different this time, so

29
00:01:56.381 --> 00:02:01.860
don't get,
&gt;&gt; Speaker 1: Yep, so I got imported.

30
00:02:03.610 --> 00:02:07.760
So instead of a then, cuz this is not
just one promise that resolves one time,

31
00:02:07.760 --> 00:02:11.400
like a promise is pending and
then it either resolves or rejects.

32
00:02:11.400 --> 00:02:15.303
This is something that's effectively
a stream of data, so we're not gonna use

33
00:02:15.303 --> 00:02:19.446
a .then, we're gonna use .subscribe.
&gt;&gt; Speaker 1: All

34
00:02:19.446 --> 00:02:24.485
right.
&gt;&gt; Speaker 1: And

35
00:02:24.485 --> 00:02:28.491
that takes,
what do we do when a new thing comes in?

36
00:02:28.491 --> 00:02:29.934
We'll get the response here.

37
00:02:29.934 --> 00:02:33.802
And we'll say const grudge, right?

38
00:02:33.802 --> 00:02:35.967
It'll be a little bit different
than what we had before.

39
00:02:35.967 --> 00:02:40.992
We'll say response.value.data,

40
00:02:45.583 --> 00:02:47.148
&gt;&gt; Speaker 1: For a subscription.

41
00:02:47.148 --> 00:02:52.649
And then, very similar.
&gt;&gt; Speaker 1: Now,

42
00:02:52.649 --> 00:02:55.925
we don't wanna replace it all together
cuz this is multiple grudges.

43
00:02:55.925 --> 00:03:03.278
What we're gonna do in this case is say,
&gt;&gt; Speaker 1: this., the existing grudges,

44
00:03:05.690 --> 00:03:11.528
&gt;&gt; Speaker 1: Plus this new one.

45
00:03:24.015 --> 00:03:25.106
&gt;&gt; Speaker 1: So we got here,

46
00:03:32.445 --> 00:03:34.105
&gt;&gt; Speaker 1: It's on my setState.

47
00:03:37.900 --> 00:03:39.375
&gt;&gt; Speaker 1: It's this.state.grudges.

48
00:03:48.481 --> 00:03:49.934
&gt;&gt; Speaker 1: Now what the problem is I

49
00:03:49.934 --> 00:03:51.175
got it at twice.

50
00:03:51.175 --> 00:03:55.655
That's not really a bug,
that is my code acting as I created.

51
00:03:55.655 --> 00:03:57.425
When I added it, I put in the state.

52
00:03:57.425 --> 00:03:59.855
But now we're also subscribing
to real-time push updates.

53
00:03:59.855 --> 00:04:04.155
So it's, hey, you put the one
in memory into the react state,

54
00:04:04.155 --> 00:04:06.715
and then you also receive
that subscription.

55
00:04:06.715 --> 00:04:09.773
So we'll actually just take this out.

56
00:04:25.220 --> 00:04:31.315
&gt;&gt; Speaker 1: And what is any real-time

57
00:04:31.315 --> 00:04:36.301
demo wIthout opening

58
00:04:36.301 --> 00:04:41.569
two browser windows?

59
00:04:49.128 --> 00:04:50.226
&gt;&gt; Speaker 1: And you can see that,

60
00:04:50.226 --> 00:04:54.011
both applications, all connected
applications are gonna receive these

61
00:04:54.011 --> 00:04:59.722
updates at the same time.
&gt;&gt; Speaker 1: You can also

62
00:04:59.722 --> 00:05:05.022
subscribe to updates and deletes as we did
before, and it's very much the same idea.

63
00:05:05.022 --> 00:05:07.174
So I'll leave those as
I think we can try out.

64
00:05:08.991 --> 00:05:10.296
&gt;&gt; Speaker 1: If we look at the scheme

65
00:05:10.296 --> 00:05:14.849
we had earlier, I mentioned that the
subscriptions were also created for us.

66
00:05:14.849 --> 00:05:18.533
And you can see this is a custom
AWS functionality, right,

67
00:05:18.533 --> 00:05:23.320
where we can get those push
notification with this @aws_subscribe.

68
00:05:23.320 --> 00:05:25.780
The other thing I want to point your
attention to that we're not gonna go into

69
00:05:25.780 --> 00:05:30.980
today, but there is some black
magic in GraphQL, right?

70
00:05:30.980 --> 00:05:33.439
GraphQL, you can put it in
front of a Postgres database.

71
00:05:33.439 --> 00:05:35.777
You can put it in front of DyanamoDB,

72
00:05:35.777 --> 00:05:40.606
there's gotta be some logic where it's
able to go in and figure out, okay,

73
00:05:40.606 --> 00:05:44.767
how do I take this Graph QL query and
turn it into a Postgres query?

74
00:05:44.767 --> 00:05:47.191
Or how do I take this
data from Postgres and

75
00:05:47.191 --> 00:05:49.560
turn it back into the GraphQL response.

76
00:05:49.560 --> 00:05:52.141
The same is true for Dynamo,
anything along those lines.

77
00:05:52.141 --> 00:05:55.946
Now, there is a full frontend master's
course on creating serverside GraphQL.

78
00:05:55.946 --> 00:05:59.474
So if you want to get very deep
into resolvers and how they work,

79
00:05:59.474 --> 00:06:01.682
you should definitely check that out.

80
00:06:01.682 --> 00:06:06.271
But I am gonna show you, if you need
to go around and play with one,

81
00:06:06.271 --> 00:06:08.029
we have four mutations.

82
00:06:08.029 --> 00:06:12.219
You have createGrudge, and
this is a Velocity template, and so

83
00:06:12.219 --> 00:06:14.243
there's a few tasting notes.

84
00:06:14.243 --> 00:06:21.840
A few months ago, it wasn't true that
you could just pass in an id, all right?

85
00:06:21.840 --> 00:06:23.709
It wasn't true that you
autogenerate an id,

86
00:06:23.709 --> 00:06:25.438
you actually had to pass one in each time.

87
00:06:25.438 --> 00:06:30.354
Which is problematic and would cause
someone to pull their hair out,

88
00:06:30.354 --> 00:06:31.633
hence this look.

89
00:06:31.633 --> 00:06:35.273
Now, you actually get a id
automatically generated, and

90
00:06:35.273 --> 00:06:38.030
that happens here in the resolver, right?

91
00:06:38.030 --> 00:06:41.395
Now, you could have implemented
this yourself a few months ago, and

92
00:06:41.395 --> 00:06:42.796
one would argue that we did.

93
00:06:42.796 --> 00:06:47.015
But this is the ability to kinda
customize anything about what happens.

94
00:06:47.015 --> 00:06:50.134
And so Velocity templating language
does definitely require sitting in

95
00:06:50.134 --> 00:06:51.063
the documentation.

96
00:06:51.063 --> 00:06:55.975
But if you need any kind of custom
control over how you format stuff

97
00:06:55.975 --> 00:07:01.174
before it goes in the database,
the resolvers are where you do that.

98
00:07:01.174 --> 00:07:03.520
So this is here for you as well.

99
00:07:03.520 --> 00:07:06.730
There are sample templates
that you can look at that

100
00:07:06.730 --> 00:07:10.660
give you a bunch of different
ways to go about doing stuff.

101
00:07:10.660 --> 00:07:15.560
The context is populated by Appsync,
so there is even context.identity,

102
00:07:15.560 --> 00:07:18.220
if you have authentication set up,
which we didn't set up right now.

103
00:07:18.220 --> 00:07:20.753
And you can put together
a whole bunch of stuff.

104
00:07:20.753 --> 00:07:24.038
The utils has the ability to get
the current time if you wanted to add

105
00:07:24.038 --> 00:07:27.279
an attribute for date created,
or something along those lines.

106
00:07:27.279 --> 00:07:29.450
You can get really customizable in here,
so

107
00:07:29.450 --> 00:07:32.102
I absolutely encourage you
to check that out as well.

