WEBVTT

1
00:00:00.160 --> 00:00:02.040
&gt;&gt; Steve Kinney: So we can see in
this backend directory that we have,

2
00:00:02.040 --> 00:00:03.620
this new cloud API folder.

3
00:00:04.940 --> 00:00:08.697
And we take a look, and
it has its own package.json and

4
00:00:08.697 --> 00:00:12.060
a package.json lock, or packagelock.json.

5
00:00:12.060 --> 00:00:14.560
So it has its own set
of node dependencies.

6
00:00:14.560 --> 00:00:16.570
We can take a peek in
there if we wanted to.

7
00:00:16.570 --> 00:00:18.200
It's nothing really special,

8
00:00:18.200 --> 00:00:22.680
because it's restricted it has this
access to Amazon Cognito, the AWS SDK,

9
00:00:22.680 --> 00:00:27.450
this serverless version
of AWS Service Express.

10
00:00:27.450 --> 00:00:32.394
Body parser which is how Express
needs to read request bodies.

11
00:00:32.394 --> 00:00:34.702
For some reason,
that's not built into Express.

12
00:00:34.702 --> 00:00:38.621
So almost every Express app, within the
first ten minutes of its creation has to

13
00:00:38.621 --> 00:00:42.850
have this module added so
it can actually read API request bodies.

14
00:00:42.850 --> 00:00:43.880
And then Express.

15
00:00:43.880 --> 00:00:47.763
So it's its own server side backend
application that we're gonna be able to

16
00:00:47.763 --> 00:00:50.700
just deploy, and
it was kind of created for us.

17
00:00:50.700 --> 00:00:56.470
Most of the kind of logic
here is in this app.js,

18
00:00:56.470 --> 00:01:03.710
which is a set of routes for getting,
creating, updating, and deleting grudges.

19
00:01:03.710 --> 00:01:09.230
And what it does is this backend
service can talk directly to DynamoDB.

20
00:01:09.230 --> 00:01:15.700
So again remember, the requests leave our
client side app, it goes to API gateway.

21
00:01:15.700 --> 00:01:19.660
This is hitting this lambda function
which is able to modify Dynamo,

22
00:01:19.660 --> 00:01:21.330
send a request back, right.

23
00:01:21.330 --> 00:01:24.360
So this is the entire backend of
our application at this point,

24
00:01:24.360 --> 00:01:27.130
plus the user authentication piece.

25
00:01:27.130 --> 00:01:30.920
And there's a bunch of settings in here
that are Dynamo specific that we won't

26
00:01:30.920 --> 00:01:31.490
belabor.

27
00:01:32.780 --> 00:01:36.738
But you can see there is a,
&gt;&gt; Steve Kinney: A get method.

28
00:01:41.662 --> 00:01:43.100
&gt;&gt; Steve Kinney: That was get all.

29
00:01:43.100 --> 00:01:44.840
A get one individual one.

30
00:01:44.840 --> 00:01:49.900
If you don't love this endpoint, you
can literally go in here and change it.

31
00:01:49.900 --> 00:01:54.630
If you just want it to be grudges/:id,
you can go in and edit it, right,

32
00:01:54.630 --> 00:01:55.740
this is your code.

33
00:01:55.740 --> 00:01:58.990
This does not have a big do not
edit in all caps at the top.

34
00:01:58.990 --> 00:02:01.150
This is simply a file
that was generated for

35
00:02:01.150 --> 00:02:03.990
you that you are welcome to go change and
do whatever else.

36
00:02:03.990 --> 00:02:08.330
If you wanna add default values, or date
created, or anything along those lines

37
00:02:08.330 --> 00:02:12.090
that you want to be generated server side,
you can do that all in here as well.

38
00:02:12.090 --> 00:02:15.360
This is just some defecto
boiler play code.

39
00:02:15.360 --> 00:02:16.030
You can change it,

40
00:02:16.030 --> 00:02:20.190
this is your full, everything you
can do in node you can do in here.

41
00:02:20.190 --> 00:02:23.100
This is just kind of generated for you.

42
00:02:23.100 --> 00:02:28.915
And you can see that's kinda talking
directly to the DynamoDB library.

43
00:02:28.915 --> 00:02:31.124
All right, so there's the ability to put.

44
00:02:31.124 --> 00:02:33.320
When you see path,
that's going to be /grudges.

45
00:02:33.320 --> 00:02:36.700
Later on when I implement the ability
to get all of the things,

46
00:02:36.700 --> 00:02:41.480
create one, you're going to be like,
how do I know what the endpoint is?

47
00:02:41.480 --> 00:02:44.040
Basically, if you don't know,
you can just look at the code, right.

48
00:02:44.040 --> 00:02:46.560
It feels a little bit black boxy.

49
00:02:46.560 --> 00:02:49.370
I know some of it just out
of just sheer experience.

50
00:02:49.370 --> 00:02:53.510
But you can very easily go ahead and
just look at the code if you're

51
00:02:53.510 --> 00:02:56.820
confused by what that end point
is expecting or how it works.

52
00:02:56.820 --> 00:02:58.370
Most of them are 10 or

53
00:02:58.370 --> 00:03:02.950
20 lines, including these conditionals
about what happens if there's an error.

54
00:03:02.950 --> 00:03:05.870
You can figure out what it returns.

55
00:03:05.870 --> 00:03:07.210
So if there's an error,

56
00:03:07.210 --> 00:03:11.520
it's gonna return to you the error,
the URL in the request body.

57
00:03:11.520 --> 00:03:13.940
If it was successful it's going
to put this neat message.

58
00:03:13.940 --> 00:03:14.654
You don't like that message?

59
00:03:14.654 --> 00:03:18.170
Change it [LAUGH], right.

60
00:03:18.170 --> 00:03:20.770
This is your code,
you can do whatever you want with it.

61
00:03:20.770 --> 00:03:23.516
You want additional data,
you can do all that stuff.

62
00:03:23.516 --> 00:03:26.884
One of the things I don't like right now
is that it doesn't give you back the ID of

63
00:03:26.884 --> 00:03:28.661
the thing you were working with, right.

64
00:03:28.661 --> 00:03:31.246
Which is because we are removing
stuff from state based on the ID,

65
00:03:31.246 --> 00:03:33.480
it'd be cool to get that
back from the server.

66
00:03:33.480 --> 00:03:37.890
We have it on the client, but we're also
coming up with the ID on the client.

67
00:03:37.890 --> 00:03:43.370
We could move that logic to
the server if we so chose to.

68
00:03:43.370 --> 00:03:46.050
Cool, post method, so on and so forth.

69
00:03:46.050 --> 00:03:49.230
At this point my API
should be fully cooked.

70
00:03:49.230 --> 00:03:52.020
And there it is, up and in the cloud.

71
00:03:53.150 --> 00:03:59.400
So our next goal is, we've created
a database, we've created an API.

72
00:03:59.400 --> 00:04:01.570
We just haven't used it
in our application yet.

73
00:04:01.570 --> 00:04:04.620
So this point we have all
of the mechanisms for

74
00:04:04.620 --> 00:04:08.330
managing that state in
the application itself.

75
00:04:08.330 --> 00:04:14.430
Let's actually go ahead and begin to
start actually implementing the API.

76
00:04:16.480 --> 00:04:20.074
So one of the things that we're gonna
need to do is when the application first,

77
00:04:20.074 --> 00:04:21.714
we start off with this empty array.

78
00:04:21.714 --> 00:04:25.911
When the application first mounts,
at that point is when we want to go, hey,

79
00:04:25.911 --> 00:04:29.760
go talk to the API and
get me all of the grudges in the database.

80
00:04:29.760 --> 00:04:31.750
We do need to give ourselves
a method to handle that.

81
00:04:31.750 --> 00:04:37.760
So we'll say, componentDidMount.

82
00:04:37.760 --> 00:04:40.720
And this is a life cycle method that is

83
00:04:40.720 --> 00:04:45.170
called when the component
is mounted to the page.

84
00:04:45.170 --> 00:04:47.090
So as soon as you appear on the page,

85
00:04:47.090 --> 00:04:49.597
React will call this
method on the component.

86
00:04:53.608 --> 00:04:54.951
&gt;&gt; Steve Kinney: Say, I am alive.

87
00:04:59.887 --> 00:05:02.284
&gt;&gt; Steve Kinney: Go to our React app,
open the console.

88
00:05:07.707 --> 00:05:11.214
&gt;&gt; Steve Kinney: And you can see that
once the login page is gone away,

89
00:05:11.214 --> 00:05:15.860
cuz it's verified that we exist,
it'll console log, I'm alive.

90
00:05:15.860 --> 00:05:19.940
So this is a great place to go fetch
everything out of the database.

91
00:05:19.940 --> 00:05:20.938
So what would that look like?

92
00:05:23.087 --> 00:05:27.972
&gt;&gt; Steve Kinney: Well,
one thing we're gonna need to do is pull

93
00:05:27.972 --> 00:05:31.745
in the API helper from AWS Amplify.

94
00:05:33.040 --> 00:05:36.667
The API helper, the API set of methods,
is not React specific.

95
00:05:36.667 --> 00:05:42.750
So it's just gonna be in
the AWS Amplify library.

96
00:05:42.750 --> 00:05:43.372
So let's say import.

97
00:05:45.876 --> 00:05:51.149
&gt;&gt; Steve Kinney: We'll
say API from aws-amplify.

98
00:05:55.544 --> 00:05:58.810
&gt;&gt; Steve Kinney: Cool, and here we go.

99
00:05:58.810 --> 00:06:03.250
And now we're able to use this to go
ahead and fetch some stuff for us.

100
00:06:03.250 --> 00:06:06.530
So with the cloud APIs,
they are each set of

101
00:06:06.530 --> 00:06:10.780
things that you make wrapped around
a table is its own API gateway.

102
00:06:10.780 --> 00:06:14.540
So it basically takes
up to three arguments.

103
00:06:14.540 --> 00:06:19.690
The first argument it's going to take
is which one of our API gateways do we

104
00:06:19.690 --> 00:06:22.140
want to hit, the API name if you will?

105
00:06:22.140 --> 00:06:24.250
Which API do we wanna hit?

106
00:06:24.250 --> 00:06:26.440
What endpoint at that
API do we want to hit?

107
00:06:26.440 --> 00:06:30.830
And then the third argument is
any extra data that might happen.

108
00:06:30.830 --> 00:06:32.660
And we'll kind of review
all that in a second, but

109
00:06:32.660 --> 00:06:35.530
we'll see it in action first and
then we'll look at it on some slides.

110
00:06:36.900 --> 00:06:44.003
So what we can do in this case,
&gt;&gt; Steve Kinney: Is the API.get.

111
00:06:44.003 --> 00:06:47.939
First thing we need, and you can see I get
a little bit of help from Visual Studio

112
00:06:47.939 --> 00:06:49.500
in this case, is the API name.

113
00:06:49.500 --> 00:06:52.440
In this case it's called grudgesCRUD.

114
00:06:53.650 --> 00:06:54.616
I did not name it,

115
00:06:54.616 --> 00:06:58.496
that was the default convention that
I got from AWS Mobile Hub, right.

116
00:06:58.496 --> 00:07:00.364
Remember when it asked us, hey,

117
00:07:00.364 --> 00:07:04.452
do you want to make a CRUD API around
this DynamoDB table, and I said yes?

118
00:07:06.050 --> 00:07:10.720
Well, [LAUGH] that's what you get, cool.

119
00:07:10.720 --> 00:07:13.576
And then, so
we know we want to hit that API,

120
00:07:13.576 --> 00:07:16.910
we wanna set a get request
to the grudges end point.

121
00:07:18.150 --> 00:07:20.230
And forgetting that all of them,

122
00:07:20.230 --> 00:07:23.400
there's not really any extra
things that we need to do.

123
00:07:23.400 --> 00:07:25.356
This will go ahead and
fire the API request.

124
00:07:25.356 --> 00:07:30.600
This returns a promise which will resolve
with the, it will resolve either with

125
00:07:30.600 --> 00:07:36.690
an error or it will resolve with the
grudges, right, that are in the database.

126
00:07:36.690 --> 00:07:39.148
Currently, that will be an empty
array cuz there aren't any.

127
00:07:39.148 --> 00:07:42.329
Thing I've noticed is that it will,
like you might say,

128
00:07:42.329 --> 00:07:45.610
did he just say it will
resolve with an error?

129
00:07:45.610 --> 00:07:47.038
He did just say that.

130
00:07:47.038 --> 00:07:48.900
It won't actually, you can't use catch.

131
00:07:48.900 --> 00:07:51.650
It will actually resolve
with that error property.

132
00:07:51.650 --> 00:07:55.550
And if we look in the API,
we can see kind of where that happens.

133
00:07:55.550 --> 00:08:00.140
Either way, sending us something with
an error in the body or the data So

134
00:08:00.140 --> 00:08:02.000
it's gonna resolve either way.

135
00:08:02.000 --> 00:08:04.480
But we're gonna just hope for
the best in this case.

136
00:08:04.480 --> 00:08:11.691
We'll say then, and we'll say that
we'll get back these grudges.

137
00:08:11.691 --> 00:08:14.297
And I'm just gonna start
by console logging them,

138
00:08:14.297 --> 00:08:18.370
cuz it's gonna be an empty array, there's
not really a lot to do at this point.

139
00:08:26.520 --> 00:08:31.543
&gt;&gt; Steve Kinney: Cool, so let's go
ahead and head back over to Chrome.

140
00:08:31.543 --> 00:08:35.810
And you can see when the component mounts,
it's like, got grudges.

141
00:08:35.810 --> 00:08:37.060
And it's an array of zero.

142
00:08:37.060 --> 00:08:39.140
Which means that our API works.

143
00:08:39.140 --> 00:08:44.520
Right, there's nothing in [LAUGH]
the database, just yet, but it works.

144
00:08:44.520 --> 00:08:49.620
So I guess, the next step for
us is to put some stuff in the database.

145
00:08:52.600 --> 00:08:54.949
&gt;&gt; Steve Kinney: So in this case,
we will go ahead, and to add grudge,

146
00:08:54.949 --> 00:08:58.600
that seems like a great place where
stuff should go in the database.

147
00:08:58.600 --> 00:09:06.060
We'll go ahead and
say api.post to our grudgesCRUD.

148
00:09:09.530 --> 00:09:11.258
&gt;&gt; Steve Kinney: And
this is gonna be the same endpoint, but

149
00:09:11.258 --> 00:09:13.940
we're gonna send a post request to it,
instead.

150
00:09:13.940 --> 00:09:14.840
So I'll say grudges.

151
00:09:16.110 --> 00:09:17.970
We are gonna need some data.

152
00:09:17.970 --> 00:09:20.860
We've seen a whole bunch of options and
we read all of them but

153
00:09:20.860 --> 00:09:25.990
the two major ones in this third
argument is you can send custom headers

154
00:09:25.990 --> 00:09:27.710
by saying header and
then like some object.

155
00:09:27.710 --> 00:09:29.090
We're not actually gonna do that.

156
00:09:29.090 --> 00:09:30.720
We do need to send a request body.

157
00:09:32.405 --> 00:09:33.976
&gt;&gt; Steve Kinney: Right,
and we'll go ahead and

158
00:09:33.976 --> 00:09:38.680
we'll say it's that current grudge that
just got sent from that new grudge form.

159
00:09:38.680 --> 00:09:40.950
Right, that's coming from
the component New Grudge.

160
00:09:40.950 --> 00:09:41.910
You can see at my side bar.

161
00:09:42.914 --> 00:09:45.700
That's gonna give us the grudge
when they hit Submit.

162
00:09:47.130 --> 00:09:48.330
So that'll send it.

163
00:09:48.330 --> 00:09:50.560
And then we wanna know what
to do when that's successful.

164
00:09:54.432 --> 00:09:55.885
&gt;&gt; Steve Kinney: So we'll go ahead and

165
00:09:55.885 --> 00:09:59.444
we'll just
&gt;&gt; Steve Kinney: Originally,

166
00:09:59.444 --> 00:10:03.480
we'll be like yeah, we're successful cuz
we didn't actually have any network logic.

167
00:10:03.480 --> 00:10:07.870
So what we'll do in this case
is API.post('grudgesCRUD',

168
00:10:07.870 --> 00:10:10.650
which is the name of the API gateway.

169
00:10:10.650 --> 00:10:15.180
The actual endpoint we wanna hit,
the request body that we wanna send along,

170
00:10:15.180 --> 00:10:18.380
and then when the promise resolves.

171
00:10:18.380 --> 00:10:24.640
What we wanna do after it's
been a rousing success, right?

172
00:10:24.640 --> 00:10:28.570
We can also check for an error in there,
and display an error message but

173
00:10:28.570 --> 00:10:30.130
we'll stick with the happy path for now.

174
00:10:33.090 --> 00:10:33.590
Cool.

175
00:10:35.682 --> 00:10:37.259
&gt;&gt; Steve Kinney: So we have this in place.

176
00:10:38.510 --> 00:10:41.400
And now let's see if I made
any live coding mistakes.

177
00:10:44.628 --> 00:10:52.034
&gt;&gt; Steve Kinney: We'll go ahead and
submit.

178
00:10:52.034 --> 00:10:56.839
And he said it was

179
00:10:56.839 --> 00:11:02.120
added, right?

180
00:11:02.120 --> 00:11:05.810
Now the big test here is
when we refresh the page.

181
00:11:05.810 --> 00:11:07.960
Cuz that was where our app
was falling over before.

182
00:11:07.960 --> 00:11:10.220
This all worked previously,
it was just when we refreshed,

183
00:11:10.220 --> 00:11:11.780
everything was gone cuz it was in memory.

184
00:11:13.690 --> 00:11:18.590
So already we can see that
it's in the database.

185
00:11:18.590 --> 00:11:20.490
Grudges, there it is.

186
00:11:20.490 --> 00:11:24.730
Avenge false deed for making the shift
key on my MacBook stop working.

187
00:11:24.730 --> 00:11:26.690
It's got an ID.

188
00:11:26.690 --> 00:11:30.740
The user ID that created it, and
the person that I'm mad at, or

189
00:11:30.740 --> 00:11:33.550
in this case, companies are people right?

190
00:11:33.550 --> 00:11:35.140
It's fine.

191
00:11:35.140 --> 00:11:39.430
So you don't see it on the page because
right now all we do is console log.

192
00:11:40.990 --> 00:11:47.540
So, that's something we should resolve.

193
00:11:47.540 --> 00:11:48.420
So set state.

194
00:11:52.260 --> 00:11:54.287
We'll put our grudges in there.

195
00:11:54.287 --> 00:11:57.768
Okay so now we are actually gonna
modify the state when we hear back from

196
00:11:57.768 --> 00:11:58.537
the database.

197
00:12:03.660 --> 00:12:08.352
&gt;&gt; Steve Kinney: So we refresh and
it says, automatically loaded on the page,

198
00:12:08.352 --> 00:12:08.990
right?

199
00:12:08.990 --> 00:12:10.860
We have the ability to
put some of the database,

200
00:12:10.860 --> 00:12:15.450
we get stuff out of the database,
it is scope by users if I log out and

201
00:12:15.450 --> 00:12:18.030
create another user and log back in.

202
00:12:18.030 --> 00:12:19.790
They would not see that data,

203
00:12:19.790 --> 00:12:23.360
cuz we're pulling it by
the particular user in this case.

204
00:12:23.360 --> 00:12:30.580
What we don't have and we'll implement
next is the ability to either remove.

205
00:12:30.580 --> 00:12:32.840
Now I'm not a fan of removing
things from my Grudge list.

206
00:12:32.840 --> 00:12:34.930
I think you can forgive but not forget.

207
00:12:34.930 --> 00:12:39.670
But we'll be able to remove them or
also toggle them back and forth.

208
00:12:39.670 --> 00:12:43.390
Right now it looks like that works but
again but we're doing it all in memory and

209
00:12:43.390 --> 00:12:46.670
it doesn't actually persist
to the database at all.

210
00:12:46.670 --> 00:12:50.110
So we just need to add two
additional APIs around that.

211
00:12:50.110 --> 00:12:53.280
And then we're gonna take this
application, and if you think about, so

212
00:12:53.280 --> 00:12:54.770
I'm all the time talking and explaining.

213
00:12:54.770 --> 00:12:57.940
If you think about the actual amount
of time I spent writing code,

214
00:12:57.940 --> 00:13:02.930
implementing authentication, implementing
an API layer, implementing a database, or

215
00:13:02.930 --> 00:13:08.110
even the stuff like implementing
a dashboard for enabling user confirmation

216
00:13:08.110 --> 00:13:11.216
when I didn't see it in my email,
so on and so forth.

217
00:13:11.216 --> 00:13:16.750
It's actually pretty impressive.

218
00:13:16.750 --> 00:13:18.750
So there hasn't been a lot of code,

219
00:13:18.750 --> 00:13:21.550
there's been a lot more
talking than coding.

220
00:13:21.550 --> 00:13:24.240
So it's kinda cool to see that happen.

221
00:13:24.240 --> 00:13:29.230
So deleting will be out next one,
so we've got remove grudge.

222
00:13:29.230 --> 00:13:32.270
If we look at the app.js,
it's always great.

223
00:13:32.270 --> 00:13:35.500
This is like in the good part about
JavaScript is you can write front end and

224
00:13:35.500 --> 00:13:36.390
back end code together.

225
00:13:36.390 --> 00:13:39.830
The bad part is you have an application
.JS, and an app .JS, and

226
00:13:39.830 --> 00:13:41.770
now you have to remember
which one's the front end and

227
00:13:41.770 --> 00:13:44.560
which one's the back end,
which is terrifying.

228
00:13:46.410 --> 00:13:53.700
So in this case, we can go ahead and
we can look at the .delete.

229
00:13:53.700 --> 00:13:57.490
So this one actually takes this
whole URL that is looking for here.

230
00:13:59.290 --> 00:14:03.000
So, this ID is a dynamic segment, which
means it'll look for grudges, object and

231
00:14:03.000 --> 00:14:05.350
then whatever the ID is.

232
00:14:05.350 --> 00:14:11.750
So we'll actually kind of create
a URL that is /grudges/objects/ and

233
00:14:11.750 --> 00:14:15.030
we saw it before it was
a long number in this case.

234
00:14:15.030 --> 00:14:18.170
So we can go ahead and
take a look at that.

235
00:14:18.170 --> 00:14:26.363
So all we'll do is,
we'll go back over to our React component,

236
00:14:26.363 --> 00:14:31.980
called Application.js, and we'll say,

237
00:14:31.980 --> 00:14:36.711
API.del is not delete in this case.

238
00:14:36.711 --> 00:14:38.117
Our grudges API.

239
00:14:39.666 --> 00:14:45.334
&gt;&gt; Steve Kinney: /grudges/object and
then I can just add on

240
00:14:45.334 --> 00:14:50.550
the grudge.id that's coming in here.

241
00:14:52.950 --> 00:14:55.070
So I will send the request there, and

242
00:14:55.070 --> 00:14:57.890
when that is successful to say
what we have done previously

243
00:15:13.180 --> 00:15:13.840
&gt;&gt; Steve Kinney: You see it,

244
00:15:13.840 --> 00:15:15.030
we'll put it there.

245
00:15:15.030 --> 00:15:17.520
So like when that happens,
that's when we remove it from the page.

246
00:15:23.560 --> 00:15:28.272
&gt;&gt; Steve Kinney: Cool, and so
what we'll do is, we'll go ahead and

247
00:15:28.272 --> 00:15:31.700
we'll try to remove, failed.

248
00:15:31.700 --> 00:15:33.090
Let's actually look at the network.

249
00:15:35.100 --> 00:15:37.360
&gt;&gt; Steve Kinney: It looks
like I'm missing a slash.

250
00:15:37.360 --> 00:15:39.230
See, it's just object and then the number.

251
00:15:39.230 --> 00:15:45.420
&gt;&gt; Steve Kinney: It turns
out that I am not perfect.

252
00:15:47.210 --> 00:15:48.570
Which I learned just now.

253
00:15:50.660 --> 00:15:51.510
So here we go.

254
00:15:51.510 --> 00:15:52.367
We have API.del.

255
00:15:52.367 --> 00:15:56.600
And now I have suspicions
that it will work.

256
00:16:00.922 --> 00:16:05.408
&gt;&gt; Steve Kinney: Remove It's
gone off the page, the big test.

257
00:16:08.870 --> 00:16:11.261
&gt;&gt; Steve Kinney: Sweet.

258
00:16:11.261 --> 00:16:14.227
All right, we have one more action.

259
00:16:14.227 --> 00:16:15.170
What is the other action?

260
00:16:18.110 --> 00:16:19.171
&gt;&gt; Speaker 2: Avenge or unavenge?

261
00:16:19.171 --> 00:16:21.640
&gt;&gt; Steve Kinney: Avenge,
[LAUGH] we hit avenge.

262
00:16:21.640 --> 00:16:26.440
Update I think is the technical term,
but if we can either avenge.

263
00:16:26.440 --> 00:16:29.730
I'm not quite sure how
you unavenge a grudge.

264
00:16:29.730 --> 00:16:33.480
That's not something I thought about in
the product research for this application.

265
00:16:33.480 --> 00:16:35.910
But I'm sure it's a thing.

266
00:16:35.910 --> 00:16:37.200
All right, very cool.

267
00:16:38.446 --> 00:16:42.191
So we'll say API.put and you're like,

268
00:16:42.191 --> 00:16:47.970
how do I know it's not a patch or
a post, sometimes it's a post.

269
00:16:47.970 --> 00:16:49.202
Where would we go look to find that out?

270
00:16:52.440 --> 00:16:53.240
&gt;&gt; Speaker 3: App.js?

271
00:16:53.240 --> 00:16:55.200
&gt;&gt; Steve Kinney: App.js, right?

272
00:16:55.200 --> 00:16:59.240
And for
some reason they put post in between,

273
00:16:59.240 --> 00:17:02.360
I always think about get,
post, put, and delete.

274
00:17:02.360 --> 00:17:05.420
But they put it out of order,
but if that really bothers me,

275
00:17:05.420 --> 00:17:07.820
you know what I could do?

276
00:17:07.820 --> 00:17:09.380
I could just move it, cuz it's my code.

277
00:17:09.380 --> 00:17:13.000
[LAUGH] Clearly I'd rather just
complain about it than move it, but

278
00:17:13.000 --> 00:17:14.200
it's a thing that you could do.

279
00:17:14.200 --> 00:17:18.760
So this one apparently takes the /grudges

280
00:17:18.760 --> 00:17:22.010
with the entire body being
the one we wanna change.

281
00:17:22.010 --> 00:17:28.290
Not necessarily how I would make an API,
but that's fine, again I could change it.

282
00:17:28.290 --> 00:17:32.520
You can see that the path
in this case is /grudges.

283
00:17:32.520 --> 00:17:37.850
So let's go ahead, and this is going
to look suspiciously like our post.

284
00:17:37.850 --> 00:17:42.610
So I'm gonna be really lazy,
and I'm gonna take this post.

285
00:17:44.930 --> 00:17:47.031
We'll change that to a put.

286
00:17:47.031 --> 00:17:50.350
Now I am doing some logic
on the client here,

287
00:17:50.350 --> 00:17:55.017
where I'm basically looking at
the given grudge that I need,

288
00:17:55.017 --> 00:17:59.163
taking all of it's properties and
I'm copying them.

289
00:17:59.163 --> 00:18:01.719
And then I'm taking
the avenge property and

290
00:18:01.719 --> 00:18:04.870
flipping it to the opposite
of whatever it was.

291
00:18:04.870 --> 00:18:07.710
So if avenge was true and
flipping it to false.

292
00:18:07.710 --> 00:18:09.690
If it was false, I'm flipping it to true.

293
00:18:10.920 --> 00:18:12.000
I'll do that first.

294
00:18:14.260 --> 00:18:16.390
And then this is called updatedGrudge.

295
00:18:16.390 --> 00:18:19.240
Cuz if I just send grudge, it's gonna
be what was already in the database.

296
00:18:19.240 --> 00:18:23.430
And everything is gonna go swimmingly,
and then nothing's gonna change.

297
00:18:23.430 --> 00:18:26.540
As much as we get frustrated as
programmers by error messages,

298
00:18:26.540 --> 00:18:27.959
you know what's worse
than an error message?

299
00:18:29.160 --> 00:18:33.020
No error message, but also not doing
the thing you expected it to do.

300
00:18:33.020 --> 00:18:34.890
That's the actual worst thing.

301
00:18:38.240 --> 00:18:40.520
That's not true,
the worst thing is it actually works and

302
00:18:40.520 --> 00:18:42.640
you get some weird console error anyway.

303
00:18:42.640 --> 00:18:44.537
And you don't wanna deal with it,
cuz everything's fine.

304
00:18:44.537 --> 00:18:47.900
[LAUGH] So cool.

305
00:18:47.900 --> 00:18:51.020
So we'll flip the value on that one.

306
00:18:51.020 --> 00:18:53.750
So this is just making
a copy of the object.

307
00:18:53.750 --> 00:18:57.140
Could you just like say grudge.avenge
equals the opposite of that?

308
00:18:57.140 --> 00:19:01.852
You could, but in React we're very
much into not mutating state, so

309
00:19:01.852 --> 00:19:03.814
we're not going to do that.

310
00:19:03.814 --> 00:19:07.450
But we'll send it to
that grudges endpoint on

311
00:19:07.450 --> 00:19:11.286
our grudges crud API
with a new updatedGrudge.

312
00:19:11.286 --> 00:19:14.122
And then when that happens,
this is our happy path logic.

313
00:19:17.410 --> 00:19:21.204
&gt;&gt; Steve Kinney: We'll say, okay,
take all the other grudges.

314
00:19:21.204 --> 00:19:24.569
So basically when I say filter, I'm
basically taking out the one we're getting

315
00:19:24.569 --> 00:19:26.760
rid of and
replacing it with the new version of that.

316
00:19:28.920 --> 00:19:31.480
Moment of truth, and then I'll push it up.

317
00:19:31.480 --> 00:19:33.730
I'm only gonna push up if I
feel like we're successful.

318
00:19:33.730 --> 00:19:35.770
If it's a failure,
I'm gonna fix it before I push it up.

319
00:19:37.200 --> 00:19:39.300
So let's make a new one,
who's angry right now?

320
00:19:40.520 --> 00:19:44.598
Anyone angry, anyone have something they
wanna, I guess this is my grudge list.

321
00:19:44.598 --> 00:19:45.831
I don't have that many grudges.

322
00:19:49.776 --> 00:19:53.420
&gt;&gt; Steve Kinney: Leaving legos on
the floor, they're very sharp.

323
00:19:56.471 --> 00:19:58.880
&gt;&gt; Steve Kinney: And they all have
light sabers now, which is even worse.

324
00:20:00.690 --> 00:20:05.760
Darth Vader with the front of his mask,
[LAUGH] it's deadly.

325
00:20:05.760 --> 00:20:07.570
Deadly if that gets under
the heel of your foot.

326
00:20:07.570 --> 00:20:08.329
Anyway, I digress.

327
00:20:09.640 --> 00:20:11.090
Cool, so we added it.

328
00:20:12.350 --> 00:20:15.890
That change, we can see a whole
bunch of requests were made.

329
00:20:15.890 --> 00:20:23.180
The moment of truth is that we request,
refresh, and it's where it should be.

330
00:20:23.180 --> 00:20:27.990
And so, I've avenged it by secretly
taking the Darth Vader Lego and

331
00:20:27.990 --> 00:20:30.820
putting it on my desk at work,
please do not tell him.

332
00:20:30.820 --> 00:20:34.330
I've told you that in
confidence live stream.

333
00:20:34.330 --> 00:20:36.920
So that's how I handled that one.

334
00:20:36.920 --> 00:20:39.606
And so, we have a full crud API.

335
00:20:39.606 --> 00:20:44.478
We didn't have to sit there and
install on a Linux VPS, and

336
00:20:44.478 --> 00:20:47.803
then spinop arrails up behind passenger.

337
00:20:47.803 --> 00:20:50.993
I'm speaking from scar
tissue of my previous lives.

338
00:20:50.993 --> 00:20:54.773
And do all of those things over
the course of several days.

339
00:20:54.773 --> 00:20:59.143
Other than a lot of talking, we're able to
set up a crud API suspiciously quickly.

