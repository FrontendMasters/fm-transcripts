WEBVTT

1
00:00:00.020 --> 00:00:01.860
&gt;&gt; Steve Kinney: So
before we talk about AppSync,

2
00:00:01.860 --> 00:00:04.450
which is GraphQL as a service on AWS.

3
00:00:04.450 --> 00:00:09.800
We should probably have enough GraphQL
now, so know like, what is GraphQL, right?

4
00:00:09.800 --> 00:00:13.060
That's probably helpful for understanding
why AppSync might be really cool.

5
00:00:14.720 --> 00:00:17.680
We're not gonna go super
in depth into GraphQL,

6
00:00:17.680 --> 00:00:21.750
it's called enough GraphQL
to be dangerous for reason.

7
00:00:21.750 --> 00:00:26.243
So GraphQL is a data query language
developed by, and used by Facebook.

8
00:00:26.243 --> 00:00:31.180
Which is like, that I guest just
like an appeal to authority, right?

9
00:00:31.180 --> 00:00:32.640
Well, does it work in production?

10
00:00:32.640 --> 00:00:33.300
Apparently.

11
00:00:34.960 --> 00:00:39.010
So, there's a few kind of basic
terminology that we need to know.

12
00:00:39.010 --> 00:00:42.210
Queries, get you stuff from the database.

13
00:00:42.210 --> 00:00:45.940
Mutations, change stuff in the database.

14
00:00:45.940 --> 00:00:50.010
Subscriptions, subscribe you
to changes in your database.

15
00:00:50.010 --> 00:00:52.523
And the schema,
is what your data look like.

16
00:00:52.523 --> 00:00:56.160
It's basically your API contract, typo.

17
00:00:57.195 --> 00:01:02.285
Alright, so GraphQL, and
this is a GraphQL strongly typed.

18
00:01:02.285 --> 00:01:04.446
This is like a thing that might
be in our GraphQL database.

19
00:01:04.446 --> 00:01:05.715
So you can see that,

20
00:01:05.715 --> 00:01:09.918
anything with an exclamation point
at the end is a required field.

21
00:01:09.918 --> 00:01:12.925
Anything without an exclamation
point is an optional field.

22
00:01:12.925 --> 00:01:17.350
So here an ID, an ID is really just a
string, but it has to be a unique string.

23
00:01:17.350 --> 00:01:18.767
Which makes sense for ID's, right.

24
00:01:18.767 --> 00:01:21.769
Some kind of protein is a string,
bread is a string and

25
00:01:21.769 --> 00:01:24.324
the toppings is an array of strings,
right.

26
00:01:24.324 --> 00:01:27.682
So this defines, what the sandwich is.

27
00:01:27.682 --> 00:01:31.910
Now, we can also define like,
what the queries are.

28
00:01:31.910 --> 00:01:35.590
All right, so getting an individual one,
you give it an ID and

29
00:01:35.590 --> 00:01:37.260
you're gonna get back one.

30
00:01:37.260 --> 00:01:38.090
You can say like,

31
00:01:38.090 --> 00:01:42.290
okay I wanna get all of them,
you're gonna get an array of all of them.

32
00:01:42.290 --> 00:01:44.614
Right, it makes, you're basically
defining the kind of like.

33
00:01:44.614 --> 00:01:47.411
How the schema of your
database looks like,

34
00:01:47.411 --> 00:01:49.760
what the API contract is going to be.

35
00:01:49.760 --> 00:01:53.446
And then, there's a series of resolvers
that figure out what we do and

36
00:01:53.446 --> 00:01:56.770
what the client like when we get
back from the client database.

37
00:01:56.770 --> 00:02:00.126
What's really cool about this is,
is basically,

38
00:02:00.126 --> 00:02:03.101
you just define everything
about your data.

39
00:02:03.101 --> 00:02:06.762
And then clients,
also known as like, in our case,

40
00:02:06.762 --> 00:02:10.351
front end engineers,
can tell you what they need.

41
00:02:10.351 --> 00:02:13.813
Right, rather than the constantly
that I have to do sometimes which is,

42
00:02:13.813 --> 00:02:16.080
back in engineer, I made an API please?

43
00:02:16.080 --> 00:02:17.530
Right, like okay.

44
00:02:17.530 --> 00:02:20.028
So I have to make a new rest end point or
like worse.

45
00:02:20.028 --> 00:02:23.220
Is like sometimes, like okay,
I have to hit like seven different end

46
00:02:23.220 --> 00:02:25.584
points to get all
the information that I need.

47
00:02:25.584 --> 00:02:26.640
This allows to say,

48
00:02:26.640 --> 00:02:30.500
here's what I need, you send it
off to the GraphQL service, right?

49
00:02:30.500 --> 00:02:31.790
It hands it to the resolvers,

50
00:02:31.790 --> 00:02:34.066
it goes ahead and
gets you all of the different like.

51
00:02:34.066 --> 00:02:37.402
Figures out the payload to
give back to you, and so

52
00:02:37.402 --> 00:02:40.760
if your needs change,
like based on your UI.

53
00:02:40.760 --> 00:02:45.473
You change your GraphQL query, you get
back different stuff, which is kinda cool.

54
00:02:45.473 --> 00:02:48.666
So this is a query, for getting one thing,

55
00:02:48.666 --> 00:02:53.530
getting all the things, so
this is how we do a mutation, right.

56
00:02:53.530 --> 00:02:56.290
This again, this is not actually
how it happens in the database,

57
00:02:56.290 --> 00:02:58.760
right, cuz that would be really
cool if you just wrote that.

58
00:02:58.760 --> 00:03:02.333
I mean, let me be really honest,
that's like it is kinda really just that.

59
00:03:02.333 --> 00:03:06.859
But there is some like magic under
the hood that we just go and like, and

60
00:03:06.859 --> 00:03:08.265
don't think about.

61
00:03:08.265 --> 00:03:12.940
So here we say a mutation will take
a input, and return back a new item.

62
00:03:14.510 --> 00:03:16.568
And a query,
we can go get an individual one.

63
00:03:16.568 --> 00:03:19.470
This is actually,
we defined what a query was before.

64
00:03:19.470 --> 00:03:21.930
This is actually, querying the database.

65
00:03:21.930 --> 00:03:25.460
So here we're gonna get all the different
properties of that, but let's say,

66
00:03:25.460 --> 00:03:27.190
I only need the ID of the protein.

67
00:03:27.190 --> 00:03:31.239
I just ask for those, and the API's
only gonna return me those properties.

68
00:03:32.360 --> 00:03:36.377
So before we define a query,
this is actually queries the data base.

69
00:03:36.377 --> 00:03:40.423
So in this case we say, okay I want to
get the sandwich with this giving ID and

70
00:03:40.423 --> 00:03:42.660
here is the properties that I want.

71
00:03:42.660 --> 00:03:46.199
You only need a few properties, you don't
find just the one that you need and

72
00:03:46.199 --> 00:03:47.591
it would just give you those.

73
00:03:47.591 --> 00:03:50.403
So yeah,
the kind of the consumer of the API,

74
00:03:50.403 --> 00:03:55.440
has a lot more control about what they
need to get back to create the UI.

75
00:03:55.440 --> 00:03:58.752
Than in traditional rest API's, where
it's like, okay you hit this endpoint.

76
00:03:58.752 --> 00:04:01.834
Here's everything,
filter out the things you need,

77
00:04:01.834 --> 00:04:06.592
manipulate the data as you need it for the
UI, so on and so forth, so it's very cool.

78
00:04:06.592 --> 00:04:10.327
Here is how we like,
this is adding something to the database,

79
00:04:10.327 --> 00:04:13.929
you'll notice that you can see like,
createBanhMi twice.

80
00:04:15.830 --> 00:04:17.980
The first one is kind of,
think about it in java script,

81
00:04:17.980 --> 00:04:20.590
you can have anonymous functions and
named functions.

82
00:04:20.590 --> 00:04:22.130
We're just naming this mutation,

83
00:04:22.130 --> 00:04:26.170
that helps some client libraries
cache what's going on.

84
00:04:26.170 --> 00:04:28.290
Really what's happening in the second
one is in that schema before,

85
00:04:28.290 --> 00:04:30.200
when we created a mutation,
we said what is it like.

86
00:04:30.200 --> 00:04:31.191
What does it mean to create one?

87
00:04:31.191 --> 00:04:34.497
So here we have the input of all
the data that's gonna go into it, and

88
00:04:34.497 --> 00:04:36.470
then what we get back from the database.

89
00:04:36.470 --> 00:04:40.820
So if we only needed the ID back, we could
just say like, okay, only give me the ID.

90
00:04:40.820 --> 00:04:45.361
So before when we had those dynamo
DV databases, what they called API.

91
00:04:45.361 --> 00:04:48.540
And we weren't getting back the ID and
we didn't like the API.

92
00:04:48.540 --> 00:04:50.710
This gives us a lot more
control on our end,

93
00:04:50.710 --> 00:04:53.046
to define what exactly we
need from any given endpoint.

94
00:04:53.046 --> 00:04:55.990
What we wanna get back when we
create something, update something,

95
00:04:55.990 --> 00:04:59.090
delete something, so on and so
forth, we get that control.

