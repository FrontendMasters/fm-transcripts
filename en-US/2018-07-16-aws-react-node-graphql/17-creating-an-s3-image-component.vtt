WEBVTT

1
00:00:00.120 --> 00:00:02.870
&gt;&gt; Steve Kinney: Okay.
So, this leads us to our next problem is I

2
00:00:02.870 --> 00:00:07.010
spent a good amount of time telling
you that this isn't a great pattern.

3
00:00:07.010 --> 00:00:10.900
And you're like part of you like I
can see a bunch of you squinting and

4
00:00:10.900 --> 00:00:13.870
looking at it,
which is a sign that there's a code smell.

5
00:00:13.870 --> 00:00:16.820
Right?
If you have to squint to, okay so,

6
00:00:16.820 --> 00:00:19.520
this is happening and
then that, It's not great.

7
00:00:19.520 --> 00:00:24.430
It's worse when you consider
that every single component that

8
00:00:24.430 --> 00:00:28.100
had to use one of these images
you would have to do that in.

9
00:00:28.100 --> 00:00:29.310
Right, that's not great.

10
00:00:30.810 --> 00:00:35.280
So when that happens, usually the best
way to solve problematic code like that

11
00:00:35.280 --> 00:00:37.260
is to create an abstraction.

12
00:00:37.260 --> 00:00:40.730
And abstraction is a fancy
computer science way to say,

13
00:00:40.730 --> 00:00:43.600
sweep the sadness under the rug, right.

14
00:00:43.600 --> 00:00:47.250
And so, let's give ourselves
a component that doesn't make us sad.

15
00:00:47.250 --> 00:00:48.770
We'll just use that when everywhere,

16
00:00:48.770 --> 00:00:50.960
and then we won't see
the terrible things we did.

17
00:00:50.960 --> 00:00:53.780
Cuz sometimes you have to
write squirrely code, right?

18
00:00:53.780 --> 00:00:54.560
Like under the hood,

19
00:00:54.560 --> 00:00:57.310
all computer are is electrons going
through a copper wire, right?

20
00:00:57.310 --> 00:01:00.820
There's some squirrelyness somewhere,
eventually we just put up enough layers of

21
00:01:00.820 --> 00:01:04.530
abstraction where this is a level of
stuff that'll make our stomach turn.

22
00:01:04.530 --> 00:01:08.760
Right, this is not assembly
as weird as it is.

23
00:01:08.760 --> 00:01:12.980
So what we're gonna do is make
a component that will take a key.

24
00:01:12.980 --> 00:01:17.310
It will render nothing until it's
figured out what the URL is, and

25
00:01:17.310 --> 00:01:19.110
then it will render the image.

26
00:01:19.110 --> 00:01:20.420
Okay?

27
00:01:20.420 --> 00:01:23.100
Everyone's like sure,
anything is better than this.

28
00:01:24.760 --> 00:01:26.080
Cool.

29
00:01:26.080 --> 00:01:30.640
So what we'll do is we could
make a whole new file for

30
00:01:30.640 --> 00:01:32.270
this component, I'm not going to.

31
00:01:32.270 --> 00:01:37.540
I'm just going to say class,
we'll call this one S3Image,

32
00:01:38.940 --> 00:01:43.590
which is suspiciously close to what
AWS Amplify React calls theirs.

33
00:01:45.334 --> 00:01:48.504
&gt;&gt; Steve Kinney: And
there will be a component And

34
00:01:48.504 --> 00:01:51.680
we'll start out just by doing.

35
00:02:00.010 --> 00:02:01.550
&gt;&gt; Steve Kinney: We can pass in a file,
which is,

36
00:02:01.550 --> 00:02:03.960
right now we're just
moving the problem around.

37
00:02:03.960 --> 00:02:06.220
It's not actually gonna
solve anything yet.

38
00:02:06.220 --> 00:02:07.320
But let's get it in place.

39
00:02:07.320 --> 00:02:11.950
I'm gonna wrap all of
these into an article,

40
00:02:11.950 --> 00:02:17.470
not for a really great reason, but
mostly because it helps with my CSS.

41
00:02:17.470 --> 00:02:23.011
Because it lets me effectively control
the size of these, cuz if I upload a giant

42
00:02:23.011 --> 00:02:28.487
image it's gonna take up my whole screen,
so this is just a quick little move.

43
00:02:33.730 --> 00:02:37.890
&gt;&gt; Steve Kinney: Okay, so
let's go ahead and use this component.

44
00:02:40.790 --> 00:02:42.660
&gt;&gt; Steve Kinney: Here we'll actual say.

45
00:02:44.190 --> 00:02:50.249
We'll actually call this one s3image m-i,
m-a.

46
00:02:55.401 --> 00:02:58.400
&gt;&gt; Steve Kinney: And
we'll just take a look at it real fast.

47
00:02:58.400 --> 00:03:01.030
You'll just basically see the same
image with a purple border.

48
00:03:05.666 --> 00:03:07.519
&gt;&gt; Steve Kinney: Or not.

49
00:03:09.518 --> 00:03:11.480
&gt;&gt; Steve Kinney: I called it file.

50
00:03:12.938 --> 00:03:18.292
&gt;&gt; Steve Kinney: Cool,
you have a second, same basic idea,

51
00:03:18.292 --> 00:03:24.390
just bound in a little,
other element right now.

52
00:03:24.390 --> 00:03:27.760
So, what we're gonna do is
we're gonna set this up.

53
00:03:27.760 --> 00:03:29.490
So that it'll show nothing.

54
00:03:29.490 --> 00:03:31.860
But I wanna say, hey, I wanted this
component, I'll give you a key.

55
00:03:31.860 --> 00:03:36.960
It will then go ahead and
fetch the actual image itself, right?

56
00:03:36.960 --> 00:03:38.430
So we can take this away, all right?

57
00:03:38.430 --> 00:03:41.440
And this is one of the things
that we have to deal with because

58
00:03:41.440 --> 00:03:43.880
of some of the really cool
benefits we get from storage.

59
00:03:43.880 --> 00:03:45.360
It's just this hoop that
you have to go through.

60
00:03:45.360 --> 00:03:48.400
If you have the key, I wanna see if you
can even get this image, cuz otherwise,

61
00:03:48.400 --> 00:03:51.440
we have an URL,
turns out it's like your tax return.

62
00:03:51.440 --> 00:03:55.030
Right?
This will actually allow us to keep that

63
00:03:55.030 --> 00:03:57.200
identity control in place.

64
00:03:57.200 --> 00:03:57.700
Cool.

65
00:03:58.820 --> 00:04:03.180
And so, here's what we'll do, we'll say
in this S3Image we'll say there will be

66
00:04:03.180 --> 00:04:08.480
a source and right now we could
have any kind of asset in here.

67
00:04:08.480 --> 00:04:11.190
I'm just assuming they're all
images which is not great.

68
00:04:12.880 --> 00:04:15.090
We'll say it has a source that's null.

69
00:04:16.970 --> 00:04:21.330
And instead of a file, this is gonna
actually just take a key in this case.

70
00:04:21.330 --> 00:04:28.510
And if
&gt;&gt; Steve Kinney: this.state.src.

71
00:04:28.510 --> 00:04:31.760
If it doesn't exist or
if it equals null, which is faulty.

72
00:04:33.720 --> 00:04:34.590
We'll return null.

73
00:04:35.913 --> 00:04:38.843
&gt;&gt; Steve Kinney: So if that doesn't show
up at all we just won't show the component

74
00:04:38.843 --> 00:04:40.670
until we actually have the image ready.

75
00:04:46.874 --> 00:04:52.589
&gt;&gt; Steve Kinney: Let's just
shorten that up a little bit.

76
00:04:53.790 --> 00:04:55.350
We're gonna use it again.

77
00:04:55.350 --> 00:04:58.900
Otherwise,
&gt;&gt; Steve Kinney: show it with the source.

78
00:05:00.570 --> 00:05:02.720
Now we need a way to take the key and

79
00:05:02.720 --> 00:05:05.594
turn it to the source,
we've already seen that before.

80
00:05:05.594 --> 00:05:09.250
Well imagine key unfortunately
in React it means something,

81
00:05:09.250 --> 00:05:11.950
it's like when you have a collection
of things it's which one is it so

82
00:05:11.950 --> 00:05:17.150
the virtual dome can do all of its fancy
diffng, so we'll call ours S3 key.

83
00:05:18.930 --> 00:05:21.010
So what we'll do is when
this component mounts.

84
00:05:26.430 --> 00:05:28.520
&gt;&gt; Steve Kinney: Right, we'll say const.

85
00:05:29.750 --> 00:05:31.480
We haven't implemented this yet.

86
00:05:31.480 --> 00:05:34.169
s3key port from the props

87
00:05:40.880 --> 00:05:41.874
&gt;&gt; Steve Kinney: Go head and

88
00:05:41.874 --> 00:05:50.911
then go fetch and when you have it
&gt;&gt; Steve Kinney: So

89
00:05:50.911 --> 00:05:53.476
now we have a component that
basically takes an s3key.

90
00:05:54.560 --> 00:05:59.560
Automatically goes ahead and can figure
out how to fetch it and updates itself.

91
00:05:59.560 --> 00:06:01.130
So you can use these now.

92
00:06:01.130 --> 00:06:03.870
You'll see nothing on
the page until it's loaded.

93
00:06:03.870 --> 00:06:06.260
Once it's loaded,
then you'll actually see it on the page.

94
00:06:06.260 --> 00:06:08.190
All that squirrelly code we wrote before?

95
00:06:08.190 --> 00:06:12.620
We've basically put it in a little box,
sealed that box shut, and

96
00:06:12.620 --> 00:06:14.069
no longer have to look at it anymore.

97
00:06:15.770 --> 00:06:18.970
All right, so then we can change
a few things here which is.

98
00:06:24.260 --> 00:06:25.950
&gt;&gt; Steve Kinney: Just get the keys back.

99
00:06:27.560 --> 00:06:30.320
I'm avoiding the word keys because
it's slightly problematic in React.

100
00:06:33.470 --> 00:06:38.530
&gt;&gt; Steve Kinney: And so we'll say file,
and we'll say this is now s3key.

101
00:06:39.880 --> 00:06:41.380
And ideally we should have the same code.

102
00:06:41.380 --> 00:06:45.050
We just took all that really squirrely
stuff with the promise.all array

103
00:06:45.050 --> 00:06:46.240
we're asynchronously fetching.

104
00:06:46.240 --> 00:06:50.930
Cuz the thing about promise.all is that
if a single promise in that array fails

105
00:06:50.930 --> 00:06:52.780
the entire array fails,
which is not great.

106
00:06:54.430 --> 00:06:55.310
All right, cool.

107
00:06:58.010 --> 00:06:59.720
Finding that file did not work.

108
00:06:59.720 --> 00:07:00.600
So let's see

109
00:07:17.805 --> 00:07:18.975
&gt;&gt; Steve Kinney: See what it was.

110
00:07:23.895 --> 00:07:26.705
The source is now,
the source is this entire URL.

111
00:07:31.230 --> 00:07:32.190
Woo.

112
00:07:32.190 --> 00:07:35.235
That's a gnarly URL?

113
00:07:35.235 --> 00:07:43.644
&gt;&gt; [SOUND]

114
00:07:47.510 --> 00:07:52.054
&gt;&gt; Steve Kinney: All right, we'll

115
00:07:52.054 --> 00:07:57.170
see what we got here.

116
00:08:02.301 --> 00:08:05.863
&gt;&gt; Steve Kinney: Sample image,

117
00:08:06.959 --> 00:08:12.165
should be file.key.

118
00:08:19.890 --> 00:08:22.490
&gt;&gt; Steve Kinney: All right, there we are.

119
00:08:23.740 --> 00:08:26.790
This is the entire object with the key

120
00:08:26.790 --> 00:08:30.200
as well as the E-tag as well as
the date last modified and the size.

121
00:08:30.200 --> 00:08:32.460
I just needed the key in this case.

122
00:08:32.460 --> 00:08:35.210
So now we have a way to show images and

123
00:08:35.210 --> 00:08:36.920
it will handle all of
the asynchronous loading.

124
00:08:36.920 --> 00:08:39.460
That was really all that we attempted
to do there was abstract that away.

125
00:08:39.460 --> 00:08:43.717
The other thing that
would be nice to do is,

126
00:08:43.717 --> 00:08:47.280
have the ability to add one as well.

127
00:08:48.410 --> 00:08:50.920
So, what do we think that looks like?

128
00:08:52.220 --> 00:08:57.210
We've got a name which is useful for
setting a key and

129
00:08:57.210 --> 00:09:00.009
we've got the entire file.

130
00:09:01.460 --> 00:09:03.310
We saw,
if we go back to this slide from earlier,

131
00:09:06.900 --> 00:09:08.100
&gt;&gt; Steve Kinney: That's good.

132
00:09:08.100 --> 00:09:09.970
Hold on real quick.

133
00:09:09.970 --> 00:09:10.580
All right.

134
00:09:10.580 --> 00:09:14.630
Which one of these do we believe will,
I'm not gonna use the other word,

135
00:09:14.630 --> 00:09:18.459
place an object into an S3 bucket?

136
00:09:21.390 --> 00:09:23.400
&gt;&gt; Steve Kinney: Put, cool.

137
00:09:23.400 --> 00:09:26.030
So what we'll do is
we'll replace this with

138
00:09:27.893 --> 00:09:29.323
&gt;&gt; Steve Kinney: Storage.put,

139
00:09:29.323 --> 00:09:31.470
maybe we spell it right.

140
00:09:33.587 --> 00:09:35.465
&gt;&gt; Steve Kinney: All right so
it takes a key,

141
00:09:35.465 --> 00:09:38.829
which we've seen previously
was the file name.

142
00:09:39.930 --> 00:09:44.190
And it takes some kind of object,
so we'll take the entire file.

143
00:09:45.640 --> 00:09:50.830
&gt;&gt; Steve Kinney: Cool, and then when
that succeeds, we'll get a promise.

144
00:09:52.280 --> 00:09:56.150
And so what we'll do is,
we'll take that and

145
00:09:56.150 --> 00:10:00.010
we'll add it just to
the entire list of things.

146
00:10:00.010 --> 00:10:02.416
So well put it in there with
the name of the file and

147
00:10:02.416 --> 00:10:05.022
then we'll get some kind
of response back from s3.

148
00:10:05.022 --> 00:10:09.249
We'll say console log, we'll say so

149
00:10:09.249 --> 00:10:16.001
we know exactly what happens
storage.put with the response

150
00:10:18.739 --> 00:10:22.663
&gt;&gt; Steve Kinney: And this.setState.

151
00:10:25.913 --> 00:10:30.930
&gt;&gt; Steve Kinney: This.state.files,
and just add in the response as well.

152
00:10:33.522 --> 00:10:37.086
&gt;&gt; Steve Kinney: So now we're gonna play
a fun game called pick a random image from

153
00:10:37.086 --> 00:10:38.280
Steve's computer.

154
00:10:40.660 --> 00:10:43.750
&gt;&gt; Steve Kinney: Will it be an Arduino
board, or will it be a meme?

155
00:10:45.690 --> 00:10:47.990
Looks like it's gonna be an Arduino board.

156
00:10:47.990 --> 00:10:52.210
&gt;&gt; Steve Kinney: This is gonna be LED.

157
00:10:52.210 --> 00:10:54.440
And then I'll hit Submit.

158
00:10:57.370 --> 00:11:00.450
&gt;&gt; Steve Kinney: Cool,
I need a unique key prop.

159
00:11:03.216 --> 00:11:07.791
&gt;&gt; Steve Kinney: That's interesting, so
let's look at the response first, and

160
00:11:07.791 --> 00:11:10.130
I'll figure out what happened.

161
00:11:10.130 --> 00:11:15.660
So we can see that we got this brand
new key in this case that we can use.

162
00:11:15.660 --> 00:11:18.800
But then, this got very angry at me for

163
00:11:18.800 --> 00:11:21.540
a second so
we'll take a look at that shortly.

164
00:11:24.010 --> 00:11:31.264
Should have a key prop,

165
00:11:31.264 --> 00:11:38.890
that should be the case.

166
00:11:44.210 --> 00:11:47.681
&gt;&gt; Steve Kinney: I gotta
spread that array out.

167
00:11:51.500 --> 00:11:53.770
&gt;&gt; Steve Kinney: Cool, all right you
can see both images are in there now.

