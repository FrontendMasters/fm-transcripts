WEBVTT

1
00:00:00.260 --> 00:00:04.900
So we're ready to continue to the next
section then on generators and iterators.

2
00:00:04.900 --> 00:00:10.070
So just everyone knows
what we're talking about.

3
00:00:10.070 --> 00:00:13.535
We can create generator functions
with the little asterisk after

4
00:00:13.535 --> 00:00:14.800
the function keyword.

5
00:00:14.800 --> 00:00:19.340
And essentially what this does is
a generator function returns an iterator.

6
00:00:20.964 --> 00:00:25.360
And this is a special type of object that
contains methods like next, return, and

7
00:00:25.360 --> 00:00:27.184
throw, and it also has a state.

8
00:00:27.184 --> 00:00:30.064
And with this iterator,
we can call the next method,

9
00:00:30.064 --> 00:00:33.456
which kind of just like changes
the state you're running, and

10
00:00:33.456 --> 00:00:37.314
then returns the value that gets
yielded from the generator function.

11
00:00:37.314 --> 00:00:39.199
So in this case, we yield one.

12
00:00:39.199 --> 00:00:43.339
So whenever we call next, the value
is 1 and done is false because there

13
00:00:43.339 --> 00:00:47.274
are still more values to be yielded
within the generator function.

14
00:00:47.274 --> 00:00:50.595
So, whenever we call it again, hello, yes,

15
00:00:50.595 --> 00:00:54.786
it changes back to running and
then it returns that value.

16
00:00:54.786 --> 00:00:59.210
But we have to explicitly invoke next to
actually do that because with regular

17
00:00:59.210 --> 00:01:02.759
functions, it's like kind of this all or
nothing approach.

18
00:01:02.759 --> 00:01:06.179
Whenever we call a regular function,
it will just execute that entire body.

19
00:01:06.179 --> 00:01:08.828
There's no way for
us to kind of pause it in between.

20
00:01:08.828 --> 00:01:11.929
With a generator function, we can.

21
00:01:11.929 --> 00:01:15.763
Yeah, and it'll just keep doing this until
we actually returned from the generator

22
00:01:15.763 --> 00:01:19.476
function either explicitly or
implicitly, in which case done is true.

23
00:01:19.476 --> 00:01:24.434
Now, the cool thing with, and
then it's closed, with iterators is that,

24
00:01:24.434 --> 00:01:28.786
or with generator functions is
that we can then create iterables.

25
00:01:28.786 --> 00:01:32.926
So we can use the spread operator on
the iterator that gets returned from

26
00:01:32.926 --> 00:01:36.576
the generator function and
use stuff like for of.

27
00:01:36.576 --> 00:01:41.097
And you can see that whenever we do that,
only the yield of values get logged, so

28
00:01:41.097 --> 00:01:42.935
not their actual return value.

29
00:01:46.375 --> 00:01:51.955
So this question is pretty much the same
as this example that I show here.

30
00:01:51.955 --> 00:01:53.595
But question 21 is what gets logged.

31
00:01:53.595 --> 00:01:58.564
So we have the generator function count
that yields 1, 2, and then returns 3.

32
00:01:58.564 --> 00:02:03.194
And then we have a for of method that
logs the value of the returned iterator

33
00:02:03.194 --> 00:02:07.535
object that gets returned [LAUGH]
from the count generator function.

34
00:02:08.555 --> 00:02:13.155
So with that log, either 1 2 3,
1 2 Promise, 3, 1, or 1 2.

35
00:02:16.256 --> 00:02:19.896
The right answer here is 1 and 2, E.

36
00:02:19.896 --> 00:02:23.458
I'm just going to copy this and

37
00:02:23.458 --> 00:02:28.262
show you what's going on in the console.

38
00:02:28.262 --> 00:02:32.034
All right, so we have this generator count
function, but when whenever, or actually,

39
00:02:32.034 --> 00:02:33.763
I'm going to set the iterable to count.

40
00:02:36.073 --> 00:02:40.175
So again, whenever we invoke count, we're
not running any function or anything,

41
00:02:40.175 --> 00:02:43.699
unlike if we had like function count,
this would execute the function,

42
00:02:43.699 --> 00:02:46.258
that's not the case with
a generator function.

43
00:02:46.258 --> 00:02:48.618
So now, you can see that it is suspended,

44
00:02:48.618 --> 00:02:51.248
that's kind of what i just
tried to show you and

45
00:02:51.248 --> 00:02:56.738
then it has the prototype generator and
this contains next, return, and throw.

46
00:02:56.738 --> 00:03:01.930
And this gets used by methods
that need an iterable or

47
00:03:01.930 --> 00:03:04.888
that iterate over iterable.

48
00:03:04.888 --> 00:03:09.828
So the const, or for of, or
using the spread operator,.

49
00:03:09.828 --> 00:03:17.138
So we can use like it, this is 1,
2, or that const value of it.

50
00:03:18.801 --> 00:03:22.135
Well, actually, so if we do it again now,
you can see that, or, okay,

51
00:03:22.135 --> 00:03:24.901
let me just log this, and
you can see that it's closed now.

52
00:03:24.901 --> 00:03:32.341
And that is because we, the iterator
itself, we've kind of exhausted now.

53
00:03:32.341 --> 00:03:35.531
We've already, yielded all the values,
so now it's closed.

54
00:03:35.531 --> 00:03:40.873
Of course, what we can do is just create
another one, so it2 is count again.

55
00:03:42.123 --> 00:03:45.958
And this is fine, we can just
iterate over it2 again, that's fine.

56
00:03:45.958 --> 00:03:49.293
Cuz like we just created a new object
based on that generator function.

57
00:03:49.293 --> 00:03:52.393
But once it's closed,
once we've already yielded all the values,

58
00:03:52.393 --> 00:03:54.003
we cannot reuse the same iterable.

59
00:03:55.103 --> 00:04:00.478
Anyway, so 1,2 is here and that was
also the answer for this const of.

60
00:04:07.612 --> 00:04:10.932
Question 22, to create a custom
iterable objects in JavaScript,

61
00:04:10.932 --> 00:04:14.366
so we have a normal object and
we wanna make it iterable, the object must

62
00:04:14.366 --> 00:04:17.648
implement the Symbol.iterator
method that returns an iterator.

63
00:04:19.126 --> 00:04:20.816
The iterator must implement what method?

64
00:04:20.816 --> 00:04:25.680
Is it next, iterator, iterate, forEach,
or is it just iterable as is, so

65
00:04:25.680 --> 00:04:27.734
we don't have to add anything?

66
00:04:31.335 --> 00:04:33.616
And the right answer to this is next.

67
00:04:33.616 --> 00:04:35.646
And we just saw that on the prototype.

68
00:04:35.646 --> 00:04:39.221
But yeah, so we have a regular
object here which by default isn't

69
00:04:39.221 --> 00:04:43.261
iterable like we cannot use for of or
use the spread operator on an object.

70
00:04:43.261 --> 00:04:47.139
But we can make it an iterate by
implementing the iterator protocol.

71
00:04:47.139 --> 00:04:50.059
And we can do that with Symbol.iterator.

72
00:04:50.059 --> 00:04:55.291
So this returns another object that
must adhere to that protocols and

73
00:04:55.291 --> 00:04:58.006
that has to return the next method.

74
00:04:58.006 --> 00:05:02.746
What we can also do is add the little
asterisk in front of the symbol iterator

75
00:05:02.746 --> 00:05:07.412
and this actually makes it a generator
object that already adheres to that

76
00:05:07.412 --> 00:05:09.316
protocol anyways.

77
00:05:09.316 --> 00:05:10.389
So in that case,

78
00:05:10.389 --> 00:05:15.746
we can make a normal object that isn't
iterable by default an iterable.

79
00:05:15.746 --> 00:05:18.616
So that can be pretty useful
if you have a lot of data or

80
00:05:18.616 --> 00:05:22.990
the object contains data and you wanna
somehow just map over it or maybe be like,

81
00:05:22.990 --> 00:05:26.104
yield values based on specific conditions.

82
00:05:26.104 --> 00:05:31.404
In that case, adding or
making it iterable can be very useful.

83
00:05:31.404 --> 00:05:33.134
What's get logged with the following?

84
00:05:33.134 --> 00:05:37.722
So we have an async generator function
with range, start, and end and that,

85
00:05:37.722 --> 00:05:42.381
yeah, we have a for loop that creates a
loop and it yields the result promise for

86
00:05:42.381 --> 00:05:43.328
the index.

87
00:05:43.328 --> 00:05:49.202
And then we have a generator or
a gen iterator, where we have range 1,

88
00:05:49.202 --> 00:05:54.990
2, 3, and then we have a four away
const of loop that logs the item.

89
00:05:58.826 --> 00:06:02.782
All right, and
the right answer is C, it's 1 2 3.

90
00:06:02.782 --> 00:06:07.191
Cuz essentially like what this is,
or at least how I see it in my mind,

91
00:06:07.191 --> 00:06:12.058
simplified with the same ideas,
that we have that async generator function

92
00:06:12.058 --> 00:06:16.341
that just yields the resolved, or
a resolved promise every time.

93
00:06:16.341 --> 00:06:21.550
And we can use it for await of loop to
yield promises instead of just like

94
00:06:21.550 --> 00:06:26.422
regular non promise values, but
it awaits that result promise.

95
00:06:26.422 --> 00:06:32.482
So when we await a promise, item is equal
to the value that we pass to resolve.

96
00:06:32.482 --> 00:06:33.728
So in this case,

97
00:06:33.728 --> 00:06:39.343
it'll just log 123 because we're
already awaiting the result value.

98
00:06:39.343 --> 00:06:45.143
So, yeah, just an FYI that we can
also have async generator functions.

99
00:06:45.143 --> 00:06:49.303
And of course, like with generator
function, what is nice is that if you're

100
00:06:49.303 --> 00:06:53.335
reading a lot of data or you're reading
a file or anything that comes into,

101
00:06:53.335 --> 00:06:57.830
I don't know, just network and you wanna
filter it or you wanna find certain data.

102
00:06:57.830 --> 00:07:02.234
You don't have to have everything in
memory before you can start mapping over

103
00:07:02.234 --> 00:07:06.295
that data, filtering it, cuz by
yielding it or just kind of by splicing

104
00:07:06.295 --> 00:07:10.176
it up every time you can say,
okay, well, I've already found it.

105
00:07:10.176 --> 00:07:14.762
I don't need to load everything into
memory already, I can just only do it when

106
00:07:14.762 --> 00:07:19.624
I really need it when I haven't found that
value yet, then you can automatically or

107
00:07:19.624 --> 00:07:23.736
you can manually invoke next again
to get more data every time.

108
00:07:23.736 --> 00:07:28.067
That's kind of the main,
I don't know, use case for

109
00:07:28.067 --> 00:07:32.406
iterators in general,
just to map over a lot of data.

110
00:07:34.726 --> 00:07:40.249
Okay, so here we have another generator
function gen1, yields 2 and 3.

111
00:07:40.249 --> 00:07:45.349
And then we have a gen2 generator
function with a yield with an asterisk.

112
00:07:45.349 --> 00:07:50.489
So what would this log if we log
with a spread operator gen2?

113
00:07:50.489 --> 00:07:57.417
Is it 1 2 3 1, and then an array of 2 3 4,
a SyntaxError, or 1 4 3 2?

114
00:08:00.616 --> 00:08:04.914
So the answer here is A, it's 1 2 3 4.

115
00:08:04.914 --> 00:08:08.042
So the thing is that we're
delegating another yield or

116
00:08:08.042 --> 00:08:11.447
another iterable by having
that yield with that asterisk.

117
00:08:11.447 --> 00:08:13.827
So essentially what we're doing, dang it.

118
00:08:13.827 --> 00:08:15.857
I'll just go here.

119
00:08:17.890 --> 00:08:18.496
It's already open.

120
00:08:19.726 --> 00:08:25.626
Is that we're essentially saying like
this, it's pretty much the same.

121
00:08:25.626 --> 00:08:28.597
Like it goes to this yield and
whenever we have this one,

122
00:08:28.597 --> 00:08:31.266
it then turns here,
yields 2, 3, and then 4.

123
00:08:31.266 --> 00:08:34.606
This could have been anything.

124
00:08:34.606 --> 00:08:38.154
This also could have been,
I don't know 1, 2, 3, is it?

125
00:08:38.154 --> 00:08:44.225
I'm just gonna open this room
with that one, index.js.

126
00:08:44.225 --> 00:08:45.845
That would have done the same thing,
that's fine.

127
00:08:45.845 --> 00:08:46.755
It could have been any iterable.

128
00:08:46.755 --> 00:08:48.635
It could have even been a string.

129
00:08:48.635 --> 00:08:52.033
That's fine.
It would just make it part of the current

130
00:08:52.033 --> 00:08:53.345
kind of yield.

131
00:08:53.345 --> 00:08:55.195
So in this case, yeah.

132
00:08:55.195 --> 00:08:56.997
And this is called delegating a yield.

133
00:08:56.997 --> 00:09:01.693
So I don't know, you can kind of just
visualize it mentally as if we're

134
00:09:01.693 --> 00:09:05.157
just adding it to the generator
function like that.

135
00:09:05.157 --> 00:09:11.027
&gt;&gt; If you didn't have the star,
would the answer be B then?

136
00:09:11.027 --> 00:09:14.207
&gt;&gt; So then you're just creating that,

137
00:09:14.207 --> 00:09:19.861
you're yielding the returned
value of the generator function.

138
00:09:19.861 --> 00:09:21.541
And you can see that here
is the object generator.

139
00:09:21.541 --> 00:09:24.651
Yeah, and no, you can't really expand it.

140
00:09:24.651 --> 00:09:27.791
But then you're just yielding that value,
so you're not doing anything with it.

141
00:09:29.171 --> 00:09:30.961
Let's see what happens when we do this.

142
00:09:32.791 --> 00:09:37.485
Then you have a, cuz then we
are iterating over that iterable

143
00:09:37.485 --> 00:09:42.271
which calls that next method
under the hood, spreads it, and

144
00:09:42.271 --> 00:09:45.443
that yields this value which is 2, 3.

145
00:09:45.443 --> 00:09:51.603
Yeah, [LAUGH] I don't think I've
ever used this in real life or

146
00:09:51.603 --> 00:09:59.674
delegating yield, but I'm sure there are
plenty of use cases where you do need it

