WEBVTT

1
00:00:00.259 --> 00:00:01.361
Let's just get started.

2
00:00:01.361 --> 00:00:06.020
The first category is the event loop, just
to make sure we're all on the same page.

3
00:00:06.020 --> 00:00:09.572
The event loop, so we have a very simple
script, we're just console logging 1 and

4
00:00:09.572 --> 00:00:12.078
then we have a function,
myFunction that we then invoke.

5
00:00:12.078 --> 00:00:14.970
So first console log(1) gets
added to the call stack.

6
00:00:14.970 --> 00:00:19.110
We log(1) and returns a value, we're done.

7
00:00:19.110 --> 00:00:23.054
Then we're invoking myFunction,
myFunction gets added to the call stack,

8
00:00:23.054 --> 00:00:27.543
this in turn, invokes console log(2), 2
gets added or gets logged to the console,

9
00:00:27.543 --> 00:00:30.140
and then got popped off the call stack.

10
00:00:30.140 --> 00:00:32.960
This is very straightforward
we kind of know how it works.

11
00:00:32.960 --> 00:00:36.810
We'll talk more about the other components
of the event loop in just a moment.

12
00:00:36.810 --> 00:00:39.097
But then we also have setTimeout, and

13
00:00:39.097 --> 00:00:43.525
setTimeout works a bit different because
this is a web API that we can use to

14
00:00:43.525 --> 00:00:48.779
schedule the callback that we pass to the
macro-test queue after a certain delay.

15
00:00:48.779 --> 00:00:50.709
And this is an important
thing to remember,

16
00:00:50.709 --> 00:00:53.891
cuz it's not that we're delaying when
it gets pushed to the call stack,

17
00:00:53.891 --> 00:00:56.799
it's when it gets pushed
to the task queue.

18
00:00:56.799 --> 00:01:00.388
Again, we'll kind of see how
this works in just a moment.

19
00:01:00.388 --> 00:01:02.668
So in this case,
we have the setTimeout, and

20
00:01:02.668 --> 00:01:06.817
we have a callback function that is just
logging 1 with a zero millisecond delay.

21
00:01:06.817 --> 00:01:10.318
And this is kind of a tricky one,
cuz you're like, it's zero milliseconds,

22
00:01:10.318 --> 00:01:12.931
would it just run it right away,
that's not really the case.

23
00:01:12.931 --> 00:01:14.907
So setTimeout gets pushed
on the call stack.

24
00:01:14.907 --> 00:01:21.556
And this in turn, pushes that callback
to the web API's like timer API.

25
00:01:21.556 --> 00:01:23.772
So we have a very, well,
zero millisecond delay, but

26
00:01:23.772 --> 00:01:25.276
it's still kind of on the next step.

27
00:01:25.276 --> 00:01:27.078
So this pushes it to
the microtask queue or

28
00:01:27.078 --> 00:01:29.246
just the task queue,
whatever you wanna call it.

29
00:01:29.246 --> 00:01:32.407
And then on the next iteration or
the next loop,

30
00:01:32.407 --> 00:01:36.924
it'll actually push it to the call stack,
which then logs(1).

31
00:01:36.924 --> 00:01:39.734
So you can see now that if there
were other functions in that script,

32
00:01:39.734 --> 00:01:41.525
it wouldn't have blocked the call stack.

33
00:01:41.525 --> 00:01:45.703
So if this was something that might have
run later, we can just keep running our

34
00:01:45.703 --> 00:01:49.465
script without blocking any of that or
the execution.

35
00:01:49.465 --> 00:01:54.798
Then we also have Microtasks, and this is
a bit different because when we invoke

36
00:01:54.798 --> 00:02:00.132
queueMicrotasks or any other parts of
the code that would create a microtask and

37
00:02:00.132 --> 00:02:04.337
just pushes it to the microtask
queue immediately.

38
00:02:04.337 --> 00:02:07.506
And then again, once the call stack is
empty, it pushes it to the call stack and

39
00:02:07.506 --> 00:02:08.287
then logs(1).

40
00:02:08.287 --> 00:02:13.193
One important thing to remember
about microtasks is that they get

41
00:02:13.193 --> 00:02:17.218
executed before the tasks
in the regular task queue.

42
00:02:17.218 --> 00:02:20.029
So in this case,
it just keeps checking, all right,

43
00:02:20.029 --> 00:02:24.162
are there any microtasks to process
instead of the task that's queued there?

44
00:02:24.162 --> 00:02:29.273
Yes there are, so then only afterwards
will it actually process the tasks.

45
00:02:29.273 --> 00:02:32.358
So these are all microtasks,
and there aren't any, or

46
00:02:32.358 --> 00:02:34.941
these are the most common ones.

47
00:02:34.941 --> 00:02:38.830
So first, we have the asyncFunction, and

48
00:02:38.830 --> 00:02:44.015
the code after the await keyword
is put it in a microtask or

49
00:02:44.015 --> 00:02:46.726
like process as a microtask.

50
00:02:46.726 --> 00:02:50.179
And this is something important to
remember that once we have the await

51
00:02:50.179 --> 00:02:53.689
keyword the rest of the body
will be executed as a microtask.

52
00:02:53.689 --> 00:02:57.499
Same for the then callback catch and
finally, callback functions.

53
00:02:57.499 --> 00:03:02.527
Of course also Q microtasks, mutation
observer, and the process next tick.

54
00:03:02.527 --> 00:03:05.577
So just remember that these are all
microtasks, not regular tasks.

55
00:03:06.847 --> 00:03:10.317
So then we have the very first question
to put the logs in the correct order.

56
00:03:10.317 --> 00:03:15.106
So we have the promise resolve, the then
callback, queueMicrotasks, setTimeout,

57
00:03:15.106 --> 00:03:19.778
a regular console.log, a new Promise
constructor, and then the asyncFunction.

58
00:03:19.778 --> 00:03:23.243
So it's up to you to put these in the
correct order, how you think that they'll

59
00:03:23.243 --> 00:03:26.143
be logged, and then afterward,
we'll see if you have it right.

60
00:03:30.001 --> 00:03:37.052
All right, so the correct order
would be 4, 5, 6, 1, 2, 3.

61
00:03:37.052 --> 00:03:40.227
So first, let's just see what
happens when we execute the script.

62
00:03:40.227 --> 00:03:43.314
So the very first thing is
that we call promise.resolve.

63
00:03:43.314 --> 00:03:47.123
And this just gets added to the call
stack, cuz it's a regular invocation and

64
00:03:47.123 --> 00:03:49.427
it's an immediately resolved promise.

65
00:03:49.427 --> 00:03:54.176
So the then callback is, or
the then function, it's pushed to the call

66
00:03:54.176 --> 00:03:58.690
stack right away, which then
schedules that microtask, cuz it's

67
00:03:58.690 --> 00:04:03.782
the callback to the then chain method,
as we just saw, that is a microtask.

68
00:04:03.782 --> 00:04:05.062
Then we call queueMicrotask.

69
00:04:05.062 --> 00:04:08.007
So that queueMicrotask is
added to the call stack, but

70
00:04:08.007 --> 00:04:11.794
that then schedules that microtask,
which is console.log(2).

71
00:04:11.794 --> 00:04:14.456
Then we have the setTimeout,
gets added to the call stack, and

72
00:04:14.456 --> 00:04:16.375
that schedules the callback and
the Web API.

73
00:04:16.375 --> 00:04:21.176
Which on the next tick gets pushed to the
regular task queue, and at the same time,

74
00:04:21.176 --> 00:04:24.334
console.log(4) is pushed
to the call stack.

75
00:04:24.334 --> 00:04:29.809
This is just a regular function, so
four is logged as the very first value.

76
00:04:29.809 --> 00:04:34.270
Then on the next line, we have the new
Promise constructor, and the body of new

77
00:04:34.270 --> 00:04:39.019
Promise is just executed synchronously,
and that can be a bit counterintuitive.

78
00:04:39.019 --> 00:04:43.020
Cuz a lot of people think that the new
Promise constructor body is also run

79
00:04:43.020 --> 00:04:45.685
asynchronously, that's not the case.

80
00:04:45.685 --> 00:04:49.515
It's only like that the result will
execute the rest asynchronously.

81
00:04:49.515 --> 00:04:52.889
We have this is just pushed to
the call stack, which then log(5).

82
00:04:52.889 --> 00:04:54.928
So the second log is five.

83
00:04:57.431 --> 00:05:00.560
And then we have the immediately
invoked asyncFunction.

84
00:05:00.560 --> 00:05:03.856
And again, also here,
that body is just run synchronously.

85
00:05:03.856 --> 00:05:08.331
It's only the awaited value where
the asynchronous part kind of begins,

86
00:05:08.331 --> 00:05:12.891
we'll also look at that in just a second,
but this is just the first thing.

87
00:05:12.891 --> 00:05:16.770
So console.log(6) and
6 gets logged to the console.

88
00:05:16.770 --> 00:05:18.287
So now, the call stack is empty.

89
00:05:18.287 --> 00:05:23.296
So the first thing to happens is that
the microtask queue gets checked and

90
00:05:23.296 --> 00:05:26.758
the first task there gets
added to the call stack.

91
00:05:26.758 --> 00:05:31.247
So the callback for the then method,
so call or console.log(1),

92
00:05:31.247 --> 00:05:36.208
1 gets logged and the same for 2,
which was that queue microtask callback.

93
00:05:36.208 --> 00:05:38.050
So the next one is 2.

94
00:05:38.050 --> 00:05:40.170
And then there's nothing
in the microtask queue.

95
00:05:40.170 --> 00:05:44.878
There was something in the task queue, so
the thing is pushed to the call stack and

96
00:05:44.878 --> 00:05:45.860
logged logs 3.

97
00:05:45.860 --> 00:05:52.270
So that's kind of this whole
event loop order, I guess.

98
00:05:52.270 --> 00:05:53.382
Question number 2,

99
00:05:53.382 --> 00:05:58.580
which of the following are not considered
microtasks in the JavaScript's event loop?

100
00:05:58.580 --> 00:06:01.921
Is it script loading,
setTimeout callback, mousemove events,

101
00:06:01.921 --> 00:06:05.562
requestAnimationFrame callback,
UI rendering, the then callback,

102
00:06:05.562 --> 00:06:08.841
the new Promise executor function,
or fetch calls?

103
00:06:08.841 --> 00:06:12.021
So there can be multiple or all of them.

104
00:06:16.316 --> 00:06:18.607
The answer is pretty much all of them.

105
00:06:18.607 --> 00:06:21.817
It's just a then callback that
is considered a microtask,

106
00:06:21.817 --> 00:06:26.374
cuz we just saw here at that it's just the
asyncFunction after the await keyword when

107
00:06:26.374 --> 00:06:30.951
the promise actually resolved or the rest
of the asyncFunction body is a microtask.

108
00:06:30.951 --> 00:06:34.206
Or the callback pester,
then catch finally, Q microtask and

109
00:06:34.206 --> 00:06:38.417
mutation observer, or next tick, but
everything else is just a regular task.

110
00:06:38.417 --> 00:06:40.448
Ready for next question?

111
00:06:40.448 --> 00:06:43.084
Again, putting the logs in
the correct order, but this time,

112
00:06:43.084 --> 00:06:44.809
we have an asyncFunction.

113
00:06:44.809 --> 00:06:49.868
In which, in the body, we log 1 then we
have a new Promise constructor logs (2) or

114
00:06:49.868 --> 00:06:54.299
waiting a new Promise with a set
timeout in it and then resolve.

115
00:06:54.299 --> 00:06:57.905
And then we have another new
Promise constructor that logs 4 and

116
00:06:57.905 --> 00:07:00.512
immediately called asyncFunction in there,

117
00:07:00.512 --> 00:07:05.121
where we're awaiting the asyncFunction
that we just had above that.

118
00:07:05.121 --> 00:07:08.301
We have a then change method.

119
00:07:08.301 --> 00:07:11.951
And then we're just logging
eight in the normal script.

120
00:07:13.211 --> 00:07:15.761
So in what order would
they get logged [LAUGH]?

121
00:07:15.761 --> 00:07:19.474
Please never write JavaScript like this,
by the way, this is the worst.

122
00:07:23.262 --> 00:07:29.448
And the right order is 4,
5, 1, 2, 8, 7, 6, 3.

123
00:07:29.448 --> 00:07:32.540
So let's see why.

124
00:07:32.540 --> 00:07:35.866
First, we just have a regular function
declaration so nothing runs yet.

125
00:07:37.426 --> 00:07:39.569
Then the very first thing is
that new Promise constructor.

126
00:07:39.569 --> 00:07:41.292
So that gets pushed to the call stack, and

127
00:07:41.292 --> 00:07:44.035
then the very first thing in
its body is the console.log(4).

128
00:07:44.035 --> 00:07:46.815
So, the first thing that gets logged is 4.

129
00:07:46.815 --> 00:07:48.575
It gets popped off the call stack, and

130
00:07:48.575 --> 00:07:51.805
then we have the immediately
invoked asyncFunction.

131
00:07:51.805 --> 00:07:56.610
So this body runs right away, so
console.log(5), so 5 is the next one.

132
00:07:56.610 --> 00:07:58.659
And then we await asyncFunction, but

133
00:07:58.659 --> 00:08:02.826
that means the asyncFunction is still
executed pretty much synchronously.

134
00:08:02.826 --> 00:08:05.211
So this body still runs right away.

135
00:08:05.211 --> 00:08:08.976
So the very first thing in this
asyncFunction body is console.log(1).

136
00:08:08.976 --> 00:08:11.666
So the next one that gets logged is 1.

137
00:08:11.666 --> 00:08:14.475
Then we have the new Promise constructor,
and again,

138
00:08:14.475 --> 00:08:18.396
the new promise constructor's executor
function is executed right away.

139
00:08:19.419 --> 00:08:20.749
So this log(2).

140
00:08:24.079 --> 00:08:27.914
Then we await new Promise, but that means
that we're still executing that awaited

141
00:08:27.914 --> 00:08:30.508
promise, so
we can have that new Promise constructor.

142
00:08:30.508 --> 00:08:33.029
And the very first thing on
this line is you set timeout.

143
00:08:33.029 --> 00:08:35.806
So this callback's added to the timer API,
and

144
00:08:35.806 --> 00:08:39.284
then on the next tick,
it all gets pushed to the task queue.

145
00:08:39.284 --> 00:08:41.284
And then we resolve that promise.

146
00:08:41.284 --> 00:08:44.103
Now, one thing about
asyncFunctions is that,

147
00:08:44.103 --> 00:08:49.037
after that awaited value has resolved,
that's when the rest of the asyncFunction

148
00:08:49.037 --> 00:08:52.085
is pushed or
put in that micro task that we just saw.

149
00:08:52.085 --> 00:08:54.648
But you probably know that
if we don't return or

150
00:08:54.648 --> 00:08:58.951
explicitly return a value from a function,
it implicitly returns undefined.

151
00:08:58.951 --> 00:09:01.252
So, even though we're
not returning anything,

152
00:09:01.252 --> 00:09:04.167
that asyncFunction is still
an output in the microtask queue.

153
00:09:04.167 --> 00:09:06.367
But it's just the rest that
we still had to execute,

154
00:09:06.367 --> 00:09:08.627
even though that's
the implicit return undefined.

155
00:09:08.627 --> 00:09:12.114
But that also means that we're
awaiting asyncFunction here, but

156
00:09:12.114 --> 00:09:15.357
it hasn't resolved yet,
it's still pending.

157
00:09:15.357 --> 00:09:19.215
So the async body here, or
asyncFunction, is then paused,

158
00:09:19.215 --> 00:09:23.311
cuz there's nothing,
like the promise hasn't resolved yet.

159
00:09:23.311 --> 00:09:27.583
So that's just something important to
remember with asyncFunction is that once

160
00:09:27.583 --> 00:09:31.303
the awaited value is still pending,
that entire function is paused.

161
00:09:31.303 --> 00:09:34.939
And JavaScript itself will then
return to the outer scope,

162
00:09:34.939 --> 00:09:38.803
which in this case is resolve for
the new Promise constructor.

163
00:09:38.803 --> 00:09:43.405
So this promise resolves now, which means
that the then callback is executed.

164
00:09:43.405 --> 00:09:45.814
So then gets pushed to the call stack and

165
00:09:45.814 --> 00:09:50.365
its callback function is then
pushed to the microtask queue.

166
00:09:50.365 --> 00:09:54.055
And then we return back to that
outer scope, so console.log(4),

167
00:09:54.055 --> 00:09:56.627
which is just a regular log,
so this log(8).

168
00:09:56.627 --> 00:09:59.194
Now, there's nothing
else on the call stack.

169
00:09:59.194 --> 00:10:03.412
So the very first thing on microtask queue
is that asyncFunction body, which doesn't

170
00:10:03.412 --> 00:10:07.894
do anything cuz it was that implicit
undefined or implicit return undefined.

171
00:10:07.894 --> 00:10:09.701
But it does mean that in our result,

172
00:10:09.701 --> 00:10:12.664
cuz so,
asyncFunction is now a resolved promise.

173
00:10:12.664 --> 00:10:16.002
So you can see that the rest of that,
like immediately invoked asyncFunction and

174
00:10:16.002 --> 00:10:19.157
the new Promise constructor now gets
pushed to the microtasks queue.

175
00:10:19.157 --> 00:10:22.865
Cuz it means that the rest of that
function body, so the console.log(6),

176
00:10:22.865 --> 00:10:25.517
will get logged eventually,
but it's just that body.

177
00:10:28.477 --> 00:10:32.607
So now the first thing on the microtask
queue is the console.log(7), so

178
00:10:32.607 --> 00:10:33.325
this log 7.

179
00:10:33.325 --> 00:10:36.932
And now the rest of the asyncFunction
body here is executed, so

180
00:10:36.932 --> 00:10:40.283
that is that console.log(6),
so that logs 6 [LAUGH].

181
00:10:40.283 --> 00:10:42.989
And then finally,
this all gets popped off, and

182
00:10:42.989 --> 00:10:46.619
then we have the regular task queue
that was for that setTimeout,

183
00:10:46.619 --> 00:10:50.983
which is console.log(3), and
then 3 gets locked at its very last value.

184
00:10:51.993 --> 00:10:53.353
Does that make any sense?

185
00:10:53.353 --> 00:10:55.323
Is it kinda clear how that works?

186
00:10:55.323 --> 00:11:00.278
Maybe I can also just show you,
I think it was this one.

187
00:11:00.278 --> 00:11:04.995
I mean, there isn't much,
I just wanted to show you that it's

188
00:11:04.995 --> 00:11:09.634
actually that value that gets logged,
let's see, node 3.

189
00:11:09.634 --> 00:11:14.550
Yeah, so what I was talking about here is,
I actually always say return undefined,

190
00:11:14.550 --> 00:11:17.873
but it means that here,
once this promise has resolved,

191
00:11:17.873 --> 00:11:21.185
all of this gets a few
dozen microtasks here.

192
00:11:21.185 --> 00:11:25.755
Same with this, so
this is why it logged 6 eventually.

193
00:11:25.755 --> 00:11:28.152
But it was a bit later,
cuz it was a microtask, but

194
00:11:28.152 --> 00:11:32.280
still before that set timeout because that
was the only regular task that got queued.

195
00:11:34.126 --> 00:11:37.065
Hope that makes some sense at least.

196
00:11:37.065 --> 00:11:41.356
&gt;&gt; So normal invocations then promise,

197
00:11:41.356 --> 00:11:46.726
then async, microtask, and then macrotask.

198
00:11:48.176 --> 00:11:53.410
&gt;&gt; Well, not necessarily promise, yeah,
the promise executor function or executor

199
00:11:53.410 --> 00:11:59.104
function, I never know how to say that,
that is just run like a regular function.

200
00:11:59.104 --> 00:12:03.726
And the asyncFunction is also synchronous
until it hits that await keyword and

201
00:12:03.726 --> 00:12:06.184
the rest after is the asynchronous part.

202
00:12:06.184 --> 00:12:09.448
Because of course, asynchronous functions
are just kind of like synthetic

203
00:12:09.448 --> 00:12:11.394
sugar over a new Promise and
a then callback.

204
00:12:11.394 --> 00:12:15.080
So the fact that that then callback was
a microtask is essentially the same as

205
00:12:15.080 --> 00:12:17.962
saying everything after the await
keyword is a microtask,

206
00:12:17.962 --> 00:12:20.729
it's just replicating that same behavior.

207
00:12:20.729 --> 00:12:25.675
Cuz all you want is if we're awaiting a
value, we wanna make sure that we actually

208
00:12:25.675 --> 00:12:30.042
have access to that value after
the wait keyword, which is essentially

209
00:12:30.042 --> 00:12:34.809
the same as saying .then and then res,
and then doing something with res.

210
00:12:34.809 --> 00:12:36.558
But I think the way that,

211
00:12:36.558 --> 00:12:42.317
that was first phrased was not necessarily
correct cuz it's not always the case.

212
00:12:42.317 --> 00:12:42.959
Does that make sense?

213
00:12:42.959 --> 00:12:46.706
It's not then a function, then a promise,
depends on the promise and

214
00:12:46.706 --> 00:12:50.089
if it resolves right away, or
rejects, or is always pending.

215
00:12:51.739 --> 00:12:55.544
&gt;&gt; So setTimeout won't always be last?

216
00:12:55.544 --> 00:13:02.952
&gt;&gt; Well, tasks on the regular task queue,
they will always be after a microtask.

217
00:13:02.952 --> 00:13:06.635
And also, microtasks can schedule
other microtasks, which means that,

218
00:13:06.635 --> 00:13:10.960
if you just have a microtask that's always
returning another microtask, that regular

219
00:13:10.960 --> 00:13:15.272
task will never stand a chance, that
will never get added to the call stack.

220
00:13:15.272 --> 00:13:20.126
But, yes, anything that gets
added to that task queue

221
00:13:20.126 --> 00:13:24.359
will always be executed
last in the event loop.

222
00:13:27.578 --> 00:13:31.368
Unless that task then
schedules another microtask,

223
00:13:31.368 --> 00:13:34.493
cuz then it's like task micro task, task.

224
00:13:34.493 --> 00:13:37.343
Yeah, I feel like I'm just making it so
much worse now, but

225
00:13:37.343 --> 00:13:41.338
something important to remember, so
microtask and schedule another microtask.

226
00:13:41.338 --> 00:13:46.214
And then they will still get all
invoked before the first task is

227
00:13:46.214 --> 00:13:48.156
added to the call stack.

228
00:13:48.156 --> 00:13:48.831
All right, so

229
00:13:48.831 --> 00:13:52.274
this is gonna be the last question kind
of about the event loop like this.

230
00:13:52.274 --> 00:13:55.124
So after this you're you don't have
to worry about it anymore, but

231
00:13:55.124 --> 00:13:56.681
choose the correct logs once again.

232
00:13:56.681 --> 00:14:00.424
So we have an immediately
invoked asyncFunction.

233
00:14:00.424 --> 00:14:03.629
And within an asyncFunction we have
an arrow asyncFunction that just

234
00:14:03.629 --> 00:14:05.220
returns the string asyncFunc.

235
00:14:05.220 --> 00:14:09.650
We have a promise, a variable that is the
new Promise constructor logging promise.

236
00:14:10.700 --> 00:14:16.062
Notice, here how we don't result from
that promise by the way, just yell.

237
00:14:16.062 --> 00:14:19.827
We have a then call back that logs than
a regular log that logs async body,

238
00:14:19.827 --> 00:14:24.141
queue microtask, and the results,
that's the promise to all.

239
00:14:24.141 --> 00:14:28.985
Just know the promise to all method is you
can use that to run multiple promises at

240
00:14:28.985 --> 00:14:33.491
the same time, and then it'll give
a result once they've all resolved.

241
00:14:34.531 --> 00:14:39.122
And then we have
the console.log script that runs

242
00:14:39.122 --> 00:14:43.944
after that asyncFunction is finished and
running.

243
00:14:43.944 --> 00:14:46.177
So, what would be the correct logs?

244
00:14:46.177 --> 00:14:50.494
Would it be promise async body, script
queueMicrotask, promise Async body script,

245
00:14:50.494 --> 00:14:52.387
then queueMicrotask?

246
00:14:52.387 --> 00:14:55.963
Script, promise, async body, then
queueMicrotasks or, yeah, honestly, I feel

247
00:14:55.963 --> 00:14:59.157
like if I say all the options out loud
it's It's just gonna be work of using.

248
00:15:01.497 --> 00:15:02.682
Yeah, or D or E.

249
00:15:06.594 --> 00:15:10.894
So the correct answer here is A,
first, promise,

250
00:15:10.894 --> 00:15:14.897
than async body, scripts, queueMicrotask.

251
00:15:14.897 --> 00:15:18.537
So first,
the asyncFunction is invoked right away.

252
00:15:18.537 --> 00:15:21.480
So that's,
first gets added to the call stack.

253
00:15:21.480 --> 00:15:25.220
Then we have the new Promise constructor,
also gets added to the call stack, and

254
00:15:25.220 --> 00:15:26.657
its body runs synchronously.

255
00:15:26.657 --> 00:15:30.757
So console.log promise gets added to
the call stack, and this logs promise.

256
00:15:30.757 --> 00:15:34.196
Note here that we don't resolve,
which means that the then method or

257
00:15:34.196 --> 00:15:36.094
the then callback never gets called,

258
00:15:36.094 --> 00:15:39.975
cuz that only gets called when we
actually resolve from the promise.

259
00:15:39.975 --> 00:15:42.815
So this just gets ignored, that part.

260
00:15:42.815 --> 00:15:46.855
Then the next part is console.log
async body, so async body gets logged.

261
00:15:47.865 --> 00:15:51.367
Then there's a queueMicrotask,
gets added to the call stack and

262
00:15:51.367 --> 00:15:52.712
queues that microtask.

263
00:15:52.712 --> 00:15:54.004
And then we have the promise.all.

264
00:15:54.004 --> 00:15:57.855
We already have that promise that's
still pending cuz we never resolved, but

265
00:15:57.855 --> 00:16:01.898
asyncFunction is called and this just
returns the string so nothing gets logged.

266
00:16:01.898 --> 00:16:06.536
It's just returning, it's resolving with
that string as its value by not logging

267
00:16:06.536 --> 00:16:08.668
anything, so we don't really care.

268
00:16:10.418 --> 00:16:13.999
Then here we have console.log,
sorry, there was something wrong with

269
00:16:13.999 --> 00:16:18.478
the animation there, the queueMicrotask
trips to be in their previous one as well.

270
00:16:18.478 --> 00:16:22.952
But then, we have console.log(script), so
it gets pushed to the call stack script.

271
00:16:22.952 --> 00:16:27.222
And then, the call stack is empty,
so queueMicrotask gets added, and

272
00:16:27.222 --> 00:16:28.772
that gets logged.

273
00:16:28.772 --> 00:16:32.766
And then we finish the script, make sense?

274
00:16:32.766 --> 00:16:37.674
So this would have been different if we
returned a value here, or a resolve here,

275
00:16:37.674 --> 00:16:40.560
cuz then,
the then would've been called, and

276
00:16:40.560 --> 00:16:43.680
then would've been added
to the microtask queue.

277
00:16:43.680 --> 00:16:45.620
But we didn't, so this never runs.

278
00:16:46.660 --> 00:16:49.626
Yeah, just something to remember.

279
00:16:51.899 --> 00:16:54.080
&gt;&gt; Can a race condition happen here?

280
00:16:55.330 --> 00:16:56.520
&gt;&gt; With Promise.all?

281
00:16:56.520 --> 00:17:02.797
I believe so, I mean,
it depends on when they resolve.

282
00:17:02.797 --> 00:17:06.717
Yeah, I mean, that's not really in
the scope of this specific question,

283
00:17:06.717 --> 00:17:09.082
cuz one of them is always pending,
but yeah,

284
00:17:09.082 --> 00:17:12.210
with Promise.all that's known
to happen as far as I know.

