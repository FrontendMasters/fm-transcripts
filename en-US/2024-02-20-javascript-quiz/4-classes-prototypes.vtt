WEBVTT

1
00:00:00.200 --> 00:00:02.690
Then we move on to classes and prototypes.

2
00:00:02.690 --> 00:00:05.611
Well, I'm sure you've used it in
JavaScript, we can use classes and

3
00:00:05.611 --> 00:00:06.810
we can also extend classes.

4
00:00:06.810 --> 00:00:09.722
So in this case, we have an animal
class and we can create a mammal,

5
00:00:09.722 --> 00:00:10.810
it's still an animal.

6
00:00:10.810 --> 00:00:13.680
So we still wanna have some of
these properties in this case name.

7
00:00:13.680 --> 00:00:15.857
All animals have names all
mammals have names but

8
00:00:15.857 --> 00:00:18.570
mammals can breed unlike
that's not all animals.

9
00:00:18.570 --> 00:00:22.040
Yeah, we have a canine, while canines,
extends mammal cuz they can breathe, but

10
00:00:22.040 --> 00:00:23.863
then they can also howl.

11
00:00:23.863 --> 00:00:24.653
So wolves and dogs.

12
00:00:24.653 --> 00:00:27.903
And then we have dogs, which extends
canine, but they can actually wag their

13
00:00:27.903 --> 00:00:30.713
tail, which I just learned
yesterday that not all canines do.

14
00:00:30.713 --> 00:00:32.653
It's just dogs and wolves, I guess.

15
00:00:32.653 --> 00:00:35.700
But anyway,
we can make it more specific every time.

16
00:00:35.700 --> 00:00:40.331
Now, of course, when we create a class,
there is something to remember is that's

17
00:00:40.331 --> 00:00:44.235
all the properties in constructor
are specific to that instance, and

18
00:00:44.235 --> 00:00:48.350
everything not on the constructor
is added to the prototype.

19
00:00:48.350 --> 00:00:52.690
So in this case, we have a dog1 and dog2,
and we create a new instance of dog.

20
00:00:52.690 --> 00:00:55.442
And we have name and
breed on the constructor, so

21
00:00:55.442 --> 00:00:59.079
they all get added to that instance,
so they all take up memory.

22
00:00:59.079 --> 00:01:02.947
We have name and breed, like Max and
Labrador, and then we have Spot and

23
00:01:02.947 --> 00:01:04.386
Dalmatian.

24
00:01:04.386 --> 00:01:07.636
But bark and
wagTail are all defined on the prototype.

25
00:01:07.636 --> 00:01:09.301
So it's not directly on the instance,

26
00:01:09.301 --> 00:01:11.626
it goes down to prototype
chain to find those methods.

27
00:01:11.626 --> 00:01:12.778
So if we were to invoke them,

28
00:01:12.778 --> 00:01:16.056
JavaScript would be like, well, I don't
have the bark method on the instance.

29
00:01:16.056 --> 00:01:20.804
I'll go down the prototype chain, and
then it finds it on Dog.prototype.

30
00:01:20.804 --> 00:01:25.732
So as you can also imagine the methods
that all instances would have in common

31
00:01:25.732 --> 00:01:30.054
we wanna add to the prototype
cuz this doesn't take up memory.

32
00:01:30.054 --> 00:01:32.936
If bark and
wagTail would be on the constructor,

33
00:01:32.936 --> 00:01:35.818
we would just have two
identical functions, but

34
00:01:35.818 --> 00:01:39.704
each on an instance of this would
all take up memory for no reason.

35
00:01:43.013 --> 00:01:47.086
Yeah we can get the prototype of
a specific instance with __proto__ this is

36
00:01:47.086 --> 00:01:51.035
deprecated cuz it can be a bit dangerous
cuz you can also modify the prototype

37
00:01:51.035 --> 00:01:52.909
that way and you should not do that.

38
00:01:52.909 --> 00:01:56.283
Or you can use object
that getPrototypeOf and

39
00:01:56.283 --> 00:02:01.362
then the instance to get the prototype
just something to remember.

40
00:02:03.751 --> 00:02:06.521
So then we already go to the first
question with prototypes.

41
00:02:06.521 --> 00:02:11.021
Creating a new User instance would create
a new login function in memory each time.

42
00:02:11.021 --> 00:02:13.478
Is that true or is that false?

43
00:02:17.461 --> 00:02:19.911
Well, the right answer to this is false.

44
00:02:19.911 --> 00:02:22.881
Also based on what I just explained,
so we have the user.prototype.

45
00:02:22.881 --> 00:02:26.091
And then we have a user1 and
user2 instance.

46
00:02:26.091 --> 00:02:29.187
But the only properties on these
instances is what's in the constructor,

47
00:02:29.187 --> 00:02:30.191
which is user name.

48
00:02:30.191 --> 00:02:32.551
Everything else will just
be added to the prototype.

49
00:02:32.551 --> 00:02:35.863
So yeah, we won't be creating new or
setting up new memory space,

50
00:02:35.863 --> 00:02:39.766
every time we create a new user instance,
but we do for username of course, but

51
00:02:39.766 --> 00:02:41.814
that's just a string, that's fine.

52
00:02:41.814 --> 00:02:44.291
We're not creating a new
function in memory each time.

53
00:02:45.819 --> 00:02:51.774
All right, next one, which of
the following statements are true?

54
00:02:51.774 --> 00:02:56.262
So we have a Dog class that in
the constructor has a username and

55
00:02:56.262 --> 00:03:01.371
a wagTail function, and it also has
a bark method up on the class body.

56
00:03:01.371 --> 00:03:03.811
And then we have two instances,
we have dog1 and dog2.

57
00:03:04.821 --> 00:03:09.821
And yeah, it's up to you to see which ones
would be strictly equal to each other.

58
00:03:13.831 --> 00:03:17.346
So the right statements are A,
C, D, and E.

59
00:03:19.084 --> 00:03:22.466
So what we have here is we have the dog
prototype and then we have two instances,

60
00:03:22.466 --> 00:03:23.734
we have dog1 and dog2.

61
00:03:23.734 --> 00:03:28.518
So first saying that dog1.wagtail
= dog2.wagtail where

62
00:03:28.518 --> 00:03:33.118
we're strictly equaling
the returned value of wagTail and

63
00:03:33.118 --> 00:03:39.284
that is just a string wagging tail and
strings are strictly equal to each other.

64
00:03:39.284 --> 00:03:42.204
However, when we compare
the actual function to each other,

65
00:03:42.204 --> 00:03:46.139
then they're not equal because we
have the function on the constructor.

66
00:03:46.139 --> 00:03:49.869
So they both point to different
function objects in memory.

67
00:03:49.869 --> 00:03:52.332
And when strictly comparing objects,
it's false,

68
00:03:52.332 --> 00:03:56.579
cuz we're comparing different references
to different spots in memory.

69
00:03:56.579 --> 00:03:57.719
So that one's false.

70
00:03:57.719 --> 00:04:00.473
But in this case, it's also kind of stupid
that we added it to the constructor cuz

71
00:04:00.473 --> 00:04:03.075
it's just a function we should
have added it to the prototype.

72
00:04:03.075 --> 00:04:06.301
But that's just what happens when
you add it to the constructor.

73
00:04:06.301 --> 00:04:10.539
And comparing dog1.bark and dog2.bark
while that is the same because they both

74
00:04:10.539 --> 00:04:14.350
point to the bark method on the dog
prototype, so they both point to the same

75
00:04:14.350 --> 00:04:17.645
function objects are the same
spot in memory, so that's true.

76
00:04:19.285 --> 00:04:20.815
Object get prototype of dog1 and

77
00:04:20.815 --> 00:04:24.135
dog2 that's also true that both
point to the same prototype.

78
00:04:24.135 --> 00:04:25.479
And dog1.constructor and

79
00:04:25.479 --> 00:04:29.515
dog2.constructor that is pointing to
the constructor function on the prototype.

80
00:04:29.515 --> 00:04:32.715
And that actually gets called
when we create a new instance.

81
00:04:32.715 --> 00:04:36.075
And when we say new dog, actually,
that constructor function is called.

82
00:04:36.075 --> 00:04:40.069
But yeah, we're just comparing the same
function object to each other.

83
00:04:40.069 --> 00:04:44.433
So the same spot in memory so that one
is true, yeah so in this case, don't add

84
00:04:44.433 --> 00:04:49.499
wagTail to your constructor doesn't
make sense, it's not instance dependent.

85
00:04:49.499 --> 00:04:53.188
So they should have been on the prototype,
just like bark.

86
00:04:54.552 --> 00:04:59.703
Cool, there are no more questions
we'll go to the next one.

87
00:05:00.765 --> 00:05:02.526
What gets logged?

88
00:05:02.526 --> 00:05:05.586
Is it 2 2, 2 3, 1 1, 3 2, or TypeError?

89
00:05:05.586 --> 00:05:09.277
So we have the Counter class,
then we have increments,

90
00:05:09.277 --> 00:05:11.876
which increments this .count by one.

91
00:05:11.876 --> 00:05:16.406
We have a Counter(1) instance, and
then we say that the initial count is 1.

92
00:05:16.406 --> 00:05:18.923
We invoke the increments method.

93
00:05:18.923 --> 00:05:22.824
Then we have CounterTwo and
we use object.create and just so

94
00:05:22.824 --> 00:05:27.183
you know with object.create we can
create a new object that just has

95
00:05:27.183 --> 00:05:31.023
the prototype to the object
that we passed as the argument.

96
00:05:31.023 --> 00:05:34.973
So in this case CounterTwo is an object
with a prototype pointing to CounterOne.

97
00:05:34.973 --> 00:05:38.094
But then on CounterTwo we also
invoke the increment method.

98
00:05:39.961 --> 00:05:44.928
So, what gets logged when we log
CounterOne.count and CounterTwo.count?

99
00:05:49.070 --> 00:05:53.484
So the right answer to this is 2 and 3.

100
00:05:53.484 --> 00:05:57.667
Let's see why, so, we have the Counter
class which has the Counter prototype.

101
00:05:57.667 --> 00:06:01.597
And then first we say CounterOne with
the initial value of Count as one.

102
00:06:01.597 --> 00:06:06.127
Then we invoke the increment method on it,
which that's kind of true.

103
00:06:06.127 --> 00:06:08.471
Then we create CounterTwo
with Object.create,

104
00:06:08.471 --> 00:06:11.957
which just has the prototype
pointing to CounterOne.

105
00:06:11.957 --> 00:06:13.867
But then we do something kind of tricky.

106
00:06:13.867 --> 00:06:17.897
And this is something also kind of tricky
with prototypes in JavaScript cuz we

107
00:06:17.897 --> 00:06:21.292
increment this.count,
we modified this.count.

108
00:06:21.292 --> 00:06:26.035
However, when we modify something on
a prototype in JavaScript and it doesn't

109
00:06:26.035 --> 00:06:30.592
have it on its own instance, it actually
creates it on the instance itself.

110
00:06:32.102 --> 00:06:35.763
This is just something to remember cuz
this, otherwise it should have been 3 3,

111
00:06:35.763 --> 00:06:36.942
but that's not the case.

112
00:06:36.942 --> 00:06:40.185
Because we modified something that
was only available in the prototype,

113
00:06:40.185 --> 00:06:44.273
JavaScript will actually create that
same property on the instance instead.

114
00:06:44.273 --> 00:06:48.626
So in this case, it first created count 2,
sorry about that count 2,

115
00:06:48.626 --> 00:06:52.836
because it didn't have it yet and
we are referencing this account and

116
00:06:52.836 --> 00:06:57.571
modifying that value, so then it modified
it to 3 but only on that instance.

117
00:07:00.105 --> 00:07:06.337
So, let me just show you this
in the browser, can I do that?

118
00:07:09.830 --> 00:07:12.820
I'm just not gonnq invoke
this first counterTwo.

119
00:07:12.820 --> 00:07:15.290
Here you can see that
counterTwo is nothing,

120
00:07:15.290 --> 00:07:19.002
it just has a reference to the prototype,
Counter with count:2.

121
00:07:20.182 --> 00:07:24.567
But now when we do CounterTwo.increment,
CounterTwo,

122
00:07:24.567 --> 00:07:28.332
you can see that it does
have that count property.

123
00:07:28.332 --> 00:07:30.332
However, on the prototype, it's still 2.

124
00:07:30.332 --> 00:07:33.788
And that was only the case because we
cannot modify stuff in a prototype and

125
00:07:33.788 --> 00:07:35.752
JavaScript kind of does is to protect us.

126
00:07:35.752 --> 00:07:39.440
Cuz if we accidentally modify something on
prototype and we have a lot of instances

127
00:07:39.440 --> 00:07:42.862
pointing to that prototype and we didn't
know that we modified it, it would

128
00:07:42.862 --> 00:07:47.350
just replicate that modified behavior over
all instances, and we don't want that.

129
00:07:47.350 --> 00:07:49.390
So whenever we access something
on a prototype, it's fine.

130
00:07:49.390 --> 00:07:50.480
Whenever we modify it,

131
00:07:50.480 --> 00:07:54.680
it will create the actual property on
the instance to something to remember.

132
00:07:54.680 --> 00:07:58.652
And we did it because we
incremented count by 1.

133
00:07:58.652 --> 00:07:59.952
So that's why it's three and two.

134
00:07:59.952 --> 00:08:02.032
All right, question 19, what gets logged?

135
00:08:02.032 --> 00:08:05.440
We have a class again with
a constructor color green, and

136
00:08:05.440 --> 00:08:08.359
then we have a static method,
for changeColor.

137
00:08:10.422 --> 00:08:14.186
And this adds color to the new color and
returns this a color, and

138
00:08:14.186 --> 00:08:19.753
then we have freddie, and he's green, and
then we wanna change the color to orange.

139
00:08:19.753 --> 00:08:20.333
What gets logged?

140
00:08:20.333 --> 00:08:22.839
Is it orange, purple, green,
TypeError, or undefined?

141
00:08:27.323 --> 00:08:31.958
All right, so the answer to this is
a TypeError because we're using static,

142
00:08:31.958 --> 00:08:34.524
and with static, all we're saying is that

143
00:08:34.524 --> 00:08:40.041
the method is only available on the actual
class itself but not on the instance.

144
00:08:40.041 --> 00:08:43.491
That's just something you gotta know
whenever you see a static keyword.

145
00:08:43.491 --> 00:08:48.223
This is really just kind of if you
wanna define it on the class itself

146
00:08:48.223 --> 00:08:53.131
maybe cloning it or
creating it whenever we use this in.

147
00:08:53.131 --> 00:08:57.735
I don't know if you noticed,
pass it to Chrome real quick.

148
00:09:00.605 --> 00:09:04.565
Yeah, well,
typing code in Keynote is not the best.

149
00:09:05.605 --> 00:09:10.395
So we have it, Chameleon.changeColor.

150
00:09:10.395 --> 00:09:15.354
Here you can see that it's that function,
but if we do new Chameleon,

151
00:09:15.354 --> 00:09:16.845
it won't be there.

152
00:09:16.845 --> 00:09:20.387
We have color cuz i's on the constructor,
but that's about it.

153
00:09:20.387 --> 00:09:24.399
So it's just, I don't know I think static
is used for, yeah, if you wanna clone

154
00:09:24.399 --> 00:09:28.717
a certain class or change the behavior
when it's created, stuff like that.

155
00:09:28.717 --> 00:09:29.957
But that's what static is for.

156
00:09:29.957 --> 00:09:33.614
So it's not the same as private, private
is that you can only use it within methods

157
00:09:33.614 --> 00:09:35.737
within the class,
that's not what static is.

158
00:09:35.737 --> 00:09:40.770
We can also not use changeColor
on a method in the class itself.

159
00:09:40.770 --> 00:09:44.515
It's just saying it's not on the
instances, it's only on the class itself,

160
00:09:44.515 --> 00:09:48.050
which is chameleon and
not a new chameleon instance.

161
00:09:48.050 --> 00:09:52.101
So saying changeColor is an object,
we're not doing anything,

162
00:09:52.101 --> 00:09:55.130
it's not a function, so
it throws a TypeError.

163
00:09:55.130 --> 00:09:56.830
It's like what are you
trying to do change colors?

164
00:09:56.830 --> 00:10:01.208
It's not a function, cuz changeColor
is undefined cuz it's an instance and

165
00:10:01.208 --> 00:10:02.834
that there's a TypeError.

166
00:10:04.902 --> 00:10:10.897
Fun stuff, all right, last one for classes
and prototypes which statements are true.

167
00:10:10.897 --> 00:10:13.972
We have a class user with
a username in the constructor and

168
00:10:13.972 --> 00:10:15.776
a login method on the prototype.

169
00:10:15.776 --> 00:10:17.389
Then we have the user instance.

170
00:10:17.389 --> 00:10:24.193
So yeah, it's up to you to see which
are strictly equal to each other.

171
00:10:27.846 --> 00:10:32.372
All right, so
the statements that are true is only A.

172
00:10:33.937 --> 00:10:36.156
Let's see why.

173
00:10:36.156 --> 00:10:41.267
All right, so we have a user instance,
for which the prototype points to the,

174
00:10:41.267 --> 00:10:44.530
a user shouldn't have wagTail,
that should be.

175
00:10:48.397 --> 00:10:52.822
Yeah, wait one second,
this should not have wagTail.

176
00:10:52.822 --> 00:10:54.622
This should be username John Doe.

177
00:10:54.622 --> 00:10:59.551
Not that it matters,
I just want it to not be too bad,

178
00:10:59.551 --> 00:11:03.488
John, all right, well the rest will do.

179
00:11:03.488 --> 00:11:05.237
So we have.

180
00:11:07.397 --> 00:11:11.986
The User class and this one has this is
what I tried to say before, this one has

181
00:11:11.986 --> 00:11:16.942
an additional prototype property that
points to that User prototype function and

182
00:11:16.942 --> 00:11:21.123
that one has the login and
the constructor from that User class.

183
00:11:21.123 --> 00:11:24.227
So the User instance with username John
Doe has a prototype that points to that

184
00:11:24.227 --> 00:11:25.203
User prototype.

185
00:11:25.203 --> 00:11:29.370
The user itself is, or
the prototype of User itself,

186
00:11:29.370 --> 00:11:33.503
points to function, or
the basic function object.

187
00:11:33.503 --> 00:11:39.055
Because when we see class user I'm
just gonna copy this in Chrome again,

188
00:11:39.055 --> 00:11:45.261
I just like Chrome more cuz you can expand
things and you cannot do that in VS Code.

189
00:11:45.261 --> 00:11:51.177
User., you can use all these methods,
but where do they come from?

190
00:11:51.177 --> 00:11:53.936
Well, they come from the function
constructor cuz we can do it's

191
00:11:53.936 --> 00:11:56.077
new function, or whatever.

192
00:11:56.077 --> 00:12:00.982
Cuz classes are essentially saying,
or the function constructors

193
00:12:00.982 --> 00:12:05.886
that we used before, cuz we could
also do function user something,

194
00:12:05.886 --> 00:12:10.479
and then you could have a function
constructor the same way.

195
00:12:10.479 --> 00:12:14.788
But then we introduce classes, but they
still kind of have the same functionality

196
00:12:14.788 --> 00:12:18.292
as these function constructors
that we use to use, prior to ESXi.

197
00:12:18.292 --> 00:12:23.708
So class User is inheriting a lot of
methods or properties from this function,

198
00:12:23.708 --> 00:12:27.891
which on the prototype is null
cuz it's kind of like the end of

199
00:12:27.891 --> 00:12:32.528
the prototype chain for
function instances from there.

200
00:12:32.528 --> 00:12:35.556
But then it has an additional
actual prototype property,

201
00:12:35.556 --> 00:12:38.349
cuz it's a class that points
to that User prototype.

202
00:12:38.349 --> 00:12:42.934
So it's not the same as like
getPrototypeOf or __proto,

203
00:12:42.934 --> 00:12:48.079
that's different cuz user.__proto
would point to function.

204
00:12:48.079 --> 00:12:51.804
Cuz it's a class which is essentially
the same as a function constructor.

