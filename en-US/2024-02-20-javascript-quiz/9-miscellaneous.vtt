WEBVTT

1
00:00:00.180 --> 00:00:01.980
&gt;&gt; Lydia: And
this is kind of just the last section.

2
00:00:01.980 --> 00:00:04.416
I didn't know how to categorize
some of these questions, so

3
00:00:04.416 --> 00:00:06.620
this is just miscellaneous
JavaScript stuff.

4
00:00:06.620 --> 00:00:11.323
Which method will return the value
"Hello World" and we have a map, and

5
00:00:11.323 --> 00:00:15.177
we set a key in that map equal
to the myFfunc function "Hello

6
00:00:15.177 --> 00:00:20.381
World",
&gt;&gt; Lydia: On

7
00:00:20.381 --> 00:00:25.836
the right-hand side here is B,
it is myMap.get function.

8
00:00:25.836 --> 00:00:29.956
Because a map, the key is just to
get a reference to that object, so

9
00:00:29.956 --> 00:00:35.426
whenever we set it, we're setting it
equal to that reference to that object.

10
00:00:35.426 --> 00:00:40.942
So because it is strongly referenced,
I'm just going to do this.

11
00:00:42.303 --> 00:00:44.842
So we can do myMap.get myFunc, but

12
00:00:44.842 --> 00:00:49.083
of course we can also say const
anotherVariable = myFunc.

13
00:00:49.083 --> 00:00:52.653
So what we're saying here is we're
just setting the reference equal.

14
00:00:52.653 --> 00:00:57.321
So of course here, we can also just do,

15
00:00:57.321 --> 00:01:01.250
myMap.get(anotherVariable).

16
00:01:01.250 --> 00:01:04.458
And then we'll also just get it,
cuz it's about the reference, right?

17
00:01:04.458 --> 00:01:08.199
But we cannot just get it with a new
function, even if it's the same function,

18
00:01:08.199 --> 00:01:11.618
cuz that would just be a new reference and
that's not equal to this key.

19
00:01:11.618 --> 00:01:12.431
We just need to get this reference.

20
00:01:16.542 --> 00:01:17.042
&gt;&gt; Lydia: Cool.

21
00:01:21.695 --> 00:01:23.449
&gt;&gt; Lydia: Keep doing this, anyway,

22
00:01:23.449 --> 00:01:27.732
what does the person object look
like after executing the script?

23
00:01:27.732 --> 00:01:32.864
So we have a person,
&gt;&gt; Lydia: Yeah,

24
00:01:32.864 --> 00:01:36.110
we have a person then we have
Object.freeze(person), a personProxy,

25
00:01:36.110 --> 00:01:39.884
resetting it, and then we change
the personProxy.name = "Sarah".

26
00:01:39.884 --> 00:01:42.951
PersonProxy.address.city = "Paris",
and then we're logging the person.

27
00:01:47.004 --> 00:01:53.400
&gt;&gt; Lydia: The right answer here is C,
it is Jane and the address is Paris.

28
00:01:53.400 --> 00:01:57.173
So what we have here is we have
a regular person object, and

29
00:01:57.173 --> 00:02:00.056
then we're freezing that person object.

30
00:02:00.056 --> 00:02:05.749
But when we do object.freeze,
we're only freezing the direct properties,

31
00:02:05.749 --> 00:02:08.346
or it's a shallow freeze, right?

32
00:02:08.346 --> 00:02:11.579
So we're freezing name.Jane,
so we cannot modify or

33
00:02:11.579 --> 00:02:15.516
add any values to person, but
any references to other objects, so

34
00:02:15.516 --> 00:02:18.814
like city Amsterdam,
&gt;&gt; Lydia: Will get modified.

35
00:02:21.034 --> 00:02:25.927
&gt;&gt; Lydia: One second, let me just
check with something real quick.

36
00:02:28.808 --> 00:02:36.545
&gt;&gt; Lydia: I'm wondering if Jane Perez,
yeah, okay, never mind.

37
00:02:38.165 --> 00:02:42.952
So when we're creating the new Proxy with
reflect, it's essentially pointing it to

38
00:02:42.952 --> 00:02:46.223
a new object and not to the frozen
object that we just used.

39
00:02:46.223 --> 00:02:48.469
So whenever we set person
proxy name to Sarah and

40
00:02:48.469 --> 00:02:51.402
we can use proxies to interact
with an object through a proxy.

41
00:02:51.402 --> 00:02:55.510
So whenever we modify a value,
whenever we wanna get a value,

42
00:02:55.510 --> 00:02:59.517
it goes through the proxy,
in this case, we just have set.

43
00:02:59.517 --> 00:03:02.367
So whenever we modify a value,
it goes through that proxy.

44
00:03:02.367 --> 00:03:04.347
So we're setting name to Sarah,
that's fine.

45
00:03:04.347 --> 00:03:08.293
We're using a new object here,
because we froze it, and it is shallow,

46
00:03:08.293 --> 00:03:11.027
we cannot change the name,
so I was right anyway.

47
00:03:12.097 --> 00:03:15.257
And because we're using the proxy,
we're not spreading person.

48
00:03:15.257 --> 00:03:19.512
We are using the same frozen object or
we're pointing to the same frozen object.

49
00:03:20.943 --> 00:03:24.395
Even though we're saying name is Sarah,
it won't change anything,

50
00:03:24.395 --> 00:03:28.443
cuz we just froze that shallow property,
so it'll keep pointing to Jane.

51
00:03:28.443 --> 00:03:31.442
But because the deeper object, so
address city, it doesn't get frozen,

52
00:03:31.442 --> 00:03:33.153
cuz it's just a shallow freeze.

53
00:03:33.153 --> 00:03:35.563
So whenever we change that to Paris,
it's fine.

54
00:03:35.563 --> 00:03:39.418
Now, something that's also important to
remember, so if we used use strict here,

55
00:03:39.418 --> 00:03:40.955
it would have thrown that error.

56
00:03:40.955 --> 00:03:45.275
So let's see if we have anything,
that's fine here.

57
00:03:45.275 --> 00:03:52.986
If we use, use strict,
This is actually different,

58
00:03:52.986 --> 00:03:57.688
but anyway, so if you're trying to
change a property on a frozen object and

59
00:03:57.688 --> 00:04:01.623
you're using use strict, so
I'm just gonna use strict.

60
00:04:01.623 --> 00:04:05.179
Yeah, so when we're using use strict, it
will actually say, cannot add property B,

61
00:04:05.179 --> 00:04:06.803
because the object is not extensible.

62
00:04:06.803 --> 00:04:09.687
But if we omit the use strict or
we use it outside of a module,

63
00:04:09.687 --> 00:04:12.833
it won't add anything, but
it also won't show you any errors.

64
00:04:12.833 --> 00:04:17.743
So you may not be aware that it was
frozen, that it was not modifiable.

65
00:04:19.567 --> 00:04:21.077
We actually probably see that here,

66
00:04:21.077 --> 00:04:23.673
cuz what will the output be if
this code is executed in a module?

67
00:04:23.673 --> 00:04:26.561
So we are freezing named John,
we're changing it to Jane, so

68
00:04:26.561 --> 00:04:27.673
what will the name?

69
00:04:27.673 --> 00:04:29.384
Or what will get logged if we log name?

70
00:04:33.669 --> 00:04:35.880
&gt;&gt; Lydia: Yeah, so
the answer is TypeError,

71
00:04:35.880 --> 00:04:40.822
because it's executed in a module and
so it's implicitly using use strict, so

72
00:04:40.822 --> 00:04:45.699
we're trying to modify a frozen object,
it won't work, TypeError.

73
00:04:45.699 --> 00:04:47.539
If it wasn't in a module,
it would have been fine.

74
00:04:47.539 --> 00:04:52.228
Question 41, we're almost there,
which method should we use so

75
00:04:52.228 --> 00:04:54.460
it logs name Lydia and age 25?

76
00:04:54.460 --> 00:04:57.141
Is it entries, values,
fromEntries, forEach, or keys?

77
00:05:01.749 --> 00:05:04.332
&gt;&gt; Lydia: And
the right answer here is fromEntries.

78
00:05:05.352 --> 00:05:07.465
Let's see if I have that open in VS code,

79
00:05:07.465 --> 00:05:09.762
just to show you what
the other methods do.

80
00:05:09.762 --> 00:05:15.337
So we have missed,
I forgot which, 41, actually,

81
00:05:15.337 --> 00:05:19.712
let's open this in integrated terminal.

82
00:05:19.712 --> 00:05:26.050
No index.js, yeah, so
entries is like a double array.

83
00:05:26.050 --> 00:05:32.270
So first we have the index, and then
name Lydia, that's not what we wanted.

84
00:05:32.270 --> 00:05:36.792
We wanted this fromEntries, which is
the right one, and the forEach won't even

85
00:05:36.792 --> 00:05:40.997
work, I had to comment it out, because
we cannot use forEach on an object.

86
00:05:40.997 --> 00:05:45.356
So that's just completely wrong,
otherwise, I'll throw an error.

87
00:05:45.356 --> 00:05:48.270
Yeah, here we have the keys, yeah,

88
00:05:48.270 --> 00:05:54.111
keys in the an object that we create
with a map that we want it fromEntries.

89
00:05:54.111 --> 00:05:56.511
All right, question 42, what gets logged?

90
00:05:56.511 --> 00:05:58.447
So we have an array at 1, 2, 3, 4, 5.

91
00:05:58.447 --> 00:06:02.087
We splice it, we concatenate 6,
then we slice it, 1, 0, and

92
00:06:02.087 --> 00:06:05.156
then we delete array or
the first element in the array.

93
00:06:05.156 --> 00:06:10.024
So what is the length of the array after,
&gt;&gt; Lydia: Invoking all these methods on

94
00:06:10.024 --> 00:06:12.087
the arrays, 1, 2, 3, 4, 5, 6.

95
00:06:16.387 --> 00:06:19.711
&gt;&gt; Lydia: All right,
the right answer here is 2.

96
00:06:19.711 --> 00:06:25.101
So what happens is we first array.splice,
so that modifies the existing array.

97
00:06:25.101 --> 00:06:29.198
So in that case after invoking splice,
the array is now 1 and 2,

98
00:06:29.198 --> 00:06:34.171
that we concatenate 6, but
that doesn't modify the original array.

99
00:06:34.171 --> 00:06:36.512
And always remember splice the P for
permanent,

100
00:06:36.512 --> 00:06:40.289
it permanently changes the array, but
for concat, it doesn't do anything.

101
00:06:40.289 --> 00:06:42.915
I mean, it creates like a new array
with that concatenated to it, but

102
00:06:42.915 --> 00:06:44.589
array doesn't get modified.

103
00:06:44.589 --> 00:06:48.336
Then we have slice, the same thing,
it creates a new array based on how we

104
00:06:48.336 --> 00:06:52.587
slice it, but it doesn't modify the
original array, so it's still length two.

105
00:06:52.587 --> 00:06:59.630
And then we delete the first
element in the array.

106
00:06:59.630 --> 00:07:03.606
And we can use it, it's fine, it'll return
true, but it'll leave an empty slot,

107
00:07:03.606 --> 00:07:07.039
because doing that, it won't actually
change the length of the array.

108
00:07:07.039 --> 00:07:11.905
If we wanna remove an element from the
array, we have to use splice, or filter,

109
00:07:11.905 --> 00:07:15.046
stuff like that, but
it'll create an empty slot.

110
00:07:15.046 --> 00:07:19.495
And arrays with a lot of empty slots
are also called sparse arrays,

111
00:07:19.495 --> 00:07:24.341
that's why the length is still 2,
because it just has that empty slot,

112
00:07:24.341 --> 00:07:28.883
cuz we use delete instead of splice
to get rid of that first element.

113
00:07:30.323 --> 00:07:33.743
So, yeah, don't remove array
elements with the delete keyword,

114
00:07:33.743 --> 00:07:35.363
if you don't want empty slots.

115
00:07:39.193 --> 00:07:41.317
&gt;&gt; Lydia: All right,
question 43, what gets logged?

116
00:07:41.317 --> 00:07:46.253
We have a config, we have languages,
and then we'll use a set language

117
00:07:46.253 --> 00:07:50.955
that returns this.language.push(lang)
that we set out with.

118
00:07:50.955 --> 00:07:54.197
So we wanna console.log(config.language),
what gets returned?

119
00:07:54.197 --> 00:07:55.367
Is it an array with "Dutch"?

120
00:07:55.367 --> 00:07:56.387
Is it an empty array?

121
00:07:56.387 --> 00:07:58.360
Is it 0, undefined, or ReferenceError?

122
00:08:02.982 --> 00:08:05.600
&gt;&gt; Lydia: The right answer
is D it's undefined and

123
00:08:05.600 --> 00:08:09.382
that is because of the set
keyword that we're using here.

124
00:08:09.382 --> 00:08:15.080
And we can use a like sets or get,
setters or getters to add additional

125
00:08:15.080 --> 00:08:20.793
functionality if we're like adding
a property or like changing it.

126
00:08:20.793 --> 00:08:26.650
So whenever we log this, you can
see that we just have languages and

127
00:08:26.650 --> 00:08:29.169
then set is like grayed out.

128
00:08:29.169 --> 00:08:35.006
But we can use this to be like that
languages is or that language is Dutch.

129
00:08:35.006 --> 00:08:38.250
So this essentially say like okay
the language will be passed here is what

130
00:08:38.250 --> 00:08:39.213
we are setting it to.

131
00:08:39.213 --> 00:08:41.554
And that's fine, but
we don't have a getter.

132
00:08:41.554 --> 00:08:44.800
So whenever we do config.language and
we don't do anything with it,

133
00:08:44.800 --> 00:08:45.630
it is undefined.

134
00:08:45.630 --> 00:08:50.171
And this would be different if we had,
if we change this to get.

135
00:08:50.171 --> 00:08:52.186
Sorry, I know the indentation
is really bad here.

136
00:08:52.186 --> 00:08:52.938
Let me just fix it a bit.

137
00:08:56.540 --> 00:08:59.033
&gt;&gt; Lydia: Sorry, get language.

138
00:08:59.033 --> 00:09:03.898
Well, anyway, if we change the set to get,
then it wouldn't have been undefined.

139
00:09:03.898 --> 00:09:08.683
But we're only using it as set, so we can
only use the language function here to

140
00:09:08.683 --> 00:09:11.669
change the property that
we just did with Dutch.

141
00:09:11.669 --> 00:09:13.459
What I'm trying to go back here.

142
00:09:13.459 --> 00:09:15.090
This is setting it, this is getting it.

143
00:09:15.090 --> 00:09:18.354
And we didn't have a getter,
we had a setter so yeah.

144
00:09:18.354 --> 00:09:21.486
I mean, you don't see this too often
anymore, like using getters and

145
00:09:21.486 --> 00:09:22.611
setters in JavaScript.

146
00:09:22.611 --> 00:09:25.381
&gt;&gt; Speaker 2: Shouldn't it be this string,
Dutch question 42.

147
00:09:25.381 --> 00:09:27.194
&gt;&gt; Lydia: No,
because this is only a setter and

148
00:09:27.194 --> 00:09:29.248
here we're logging config.language.

149
00:09:29.248 --> 00:09:32.238
So this is like we're trying
to access the property and

150
00:09:32.238 --> 00:09:34.780
not modify it by setting
it to something else.

151
00:09:34.780 --> 00:09:39.150
So we can, I know it's for
like gets, get language and

152
00:09:39.150 --> 00:09:43.520
then like you get language
without like invoking it and

153
00:09:43.520 --> 00:09:49.130
then we can just say like return this
languages off first or whatever.

154
00:09:49.130 --> 00:09:51.654
Or like find languages Dutch, whatever.

155
00:09:51.654 --> 00:09:55.690
This will work like this will be fine but
then this one wouldn't work.

156
00:09:55.690 --> 00:09:58.953
But then we can get up but
that's a getter not setter.

157
00:09:58.953 --> 00:10:03.148
I think what he means, yeah, cuz like if
we didn't have this sets and then we have

158
00:10:03.148 --> 00:10:07.669
config.language is Dutch and then we load
config.language that would have worked.

159
00:10:07.669 --> 00:10:11.782
But because we have the setter here with
the same name of that property it will

160
00:10:11.782 --> 00:10:13.657
invoke like the setter function.

161
00:10:13.657 --> 00:10:18.453
And not just create a new property called
language that we set equal to Dutch.

162
00:10:18.453 --> 00:10:22.131
So yeah, It's only if you have a setter
with the same name as that property that

163
00:10:22.131 --> 00:10:23.430
you're trying to access.

164
00:10:23.430 --> 00:10:25.306
Question 44, what gets logged?

165
00:10:25.306 --> 00:10:26.885
So we have an object with team and

166
00:10:26.885 --> 00:10:29.821
it has a members property with
an array of a couple members.

167
00:10:29.821 --> 00:10:31.544
And we map over them and

168
00:10:31.544 --> 00:10:36.003
then we invoke the getInfo
function on each of the member.

169
00:10:36.003 --> 00:10:41.853
And we have info, nullish coalescing
with city and otherwise it logs unknown.

170
00:10:41.853 --> 00:10:44.329
So in this case, what gets logged?

171
00:10:44.329 --> 00:10:45.915
A, B, C, D, or E.

172
00:10:50.067 --> 00:10:54.686
&gt;&gt; Lydia: All right, so
the right answer here is answer D, Boston,

173
00:10:54.686 --> 00:10:57.152
unknown, Boston, unknown.

174
00:10:57.152 --> 00:11:00.461
So we have the nullish coalescing
operator, the double question mark, and

175
00:11:00.461 --> 00:11:03.926
this one returns its right-hand operand
when the left-hand operand is null or

176
00:11:03.926 --> 00:11:04.508
undefined.

177
00:11:04.508 --> 00:11:09.552
Logical AND, which returns the value
of the first operand if its falsy and

178
00:11:09.552 --> 00:11:12.167
OR if the first operand of its truthy.

179
00:11:12.167 --> 00:11:13.859
Here we're using the nullish coalescing.

180
00:11:13.859 --> 00:11:16.247
So here we're essentially
saying undefined or

181
00:11:16.247 --> 00:11:19.001
Boston because Info.street is undefined or
Boston.

182
00:11:19.001 --> 00:11:22.887
So this returns the right-hand operand
if it's undefined because we're using

183
00:11:22.887 --> 00:11:24.609
a nullish coalesce or coalescing.

184
00:11:24.609 --> 00:11:27.268
So this is Boston or undefined, so

185
00:11:27.268 --> 00:11:31.684
it'll return the first truthy value,
which is Boston.

186
00:11:31.684 --> 00:11:36.185
The next one, we're seeing an empty
string cuz string is empty or Boston.

187
00:11:36.185 --> 00:11:40.051
Well, in that case, it's just the empty
string because the right hand value isn't

188
00:11:40.051 --> 00:11:43.878
null or undefined so it'll just return
the first operand, the left hand operand.

189
00:11:43.878 --> 00:11:50.124
And then we have the logical OR and
this will return the first truthy value,

190
00:11:50.124 --> 00:11:55.194
but an empty string is a falsy value so
this returns unknown.

191
00:11:55.194 --> 00:11:58.960
Next one, we have null or Boston.

192
00:11:58.960 --> 00:12:04.044
Well the first one is null but this
returns Boston and then we have Boston or

193
00:12:04.044 --> 00:12:07.992
unknown while Boston is truthy so
it will return Boston.

194
00:12:07.992 --> 00:12:10.462
And this one is all null so
this will be undefined or undefined.

195
00:12:10.462 --> 00:12:12.299
Well, that's both undefined.

196
00:12:12.299 --> 00:12:15.471
Undefined does falsy or
unknown so this returns unknown.

197
00:12:15.471 --> 00:12:17.385
So we have Boston, unknown, Boston,

198
00:12:17.385 --> 00:12:23.868
unknown
&gt;&gt; Lydia: All right, question 45.

199
00:12:23.868 --> 00:12:25.739
Match the code to the correct
error it would throw.

200
00:12:25.739 --> 00:12:30.788
So we have a new array -1,
25.toString, reduce, const a and

201
00:12:30.788 --> 00:12:35.404
then b equals c and a so
undefined c is 12 or const a, b is 1.

202
00:12:35.404 --> 00:12:40.513
And then we're console logging a with
another nullish coalescing 1 or b.

203
00:12:40.513 --> 00:12:43.715
And I have a type or a ReferenceError,
TypeError, SyntaxError, RangeError or

204
00:12:43.715 --> 00:12:44.618
no error gets thrown.

205
00:12:49.048 --> 00:12:52.953
&gt;&gt; Lydia: All right, so the right answer
here is that new array -1 is a RangeError

206
00:12:52.953 --> 00:12:57.241
because we're creating a new array and
the argument that we pass is the length of

207
00:12:57.241 --> 00:12:59.818
the array but
we cannot have a negative length.

208
00:12:59.818 --> 00:13:01.525
So this would throw a RangeError.

209
00:13:01.525 --> 00:13:05.141
Then we have 25.toString SyntaxError
because we're using a single dot and

210
00:13:05.141 --> 00:13:08.937
we just saw that we have to use a double
dot if we're using two-string on a number.

211
00:13:08.937 --> 00:13:13.608
Reduce throws a TypeError because we're
trying to add the accumulator and

212
00:13:13.608 --> 00:13:18.221
the current value but we're not
initializing it with the initial value.

213
00:13:18.221 --> 00:13:23.282
So maybe I can just,
question 45, you can also

214
00:13:23.282 --> 00:13:29.094
see that VScode will tell you like,
this isn't great.

215
00:13:29.094 --> 00:13:31.095
But if we wanted this to work,

216
00:13:31.095 --> 00:13:35.191
we should have added the initial
value with the empty array.

217
00:13:35.191 --> 00:13:41.045
Cuz otherwise we're trying to
add stuff that doesn't exist.

218
00:13:41.045 --> 00:13:45.547
Four is a ReferenceError because we're
setting b equal to c but what is c?

219
00:13:45.547 --> 00:13:47.883
We haven't defined c, c doesn't exist.

220
00:13:47.883 --> 00:13:50.060
So that throws the ReferenceError.

221
00:13:50.060 --> 00:13:51.690
And five is perfectly fine.

222
00:13:51.690 --> 00:13:56.567
We have you know, const a as an object and
then we're logging with the nullish

223
00:13:56.567 --> 00:14:01.534
coalescing a if it exists and otherwise 1
or b but like we were not using that b.

224
00:14:01.534 --> 00:14:06.526
46, match the date methods with
the correct values when invoked on

225
00:14:06.526 --> 00:14:07.653
new Date ().

226
00:14:07.653 --> 00:14:12.034
So we have toDateString,
toISOString, tolocaleDateString,

227
00:14:12.034 --> 00:14:14.191
toUTCString or just toString.

228
00:14:14.191 --> 00:14:16.177
To be honest,
every time I use dates in JavaScript,

229
00:14:16.177 --> 00:14:18.131
I always have to look it
up because I always forget.

230
00:14:22.602 --> 00:14:23.319
&gt;&gt; Lydia: All right, so for
this one it is A, B, E, D.

231
00:14:23.319 --> 00:14:28.200
So toDateString() converts
the date portion of date

232
00:14:28.200 --> 00:14:33.301
object into a readable string but
ignores the time part.

233
00:14:33.301 --> 00:14:38.360
Then we have toISOString() that
just uses that ISO format.

234
00:14:38.360 --> 00:14:40.600
The long one that you'll see quite often.

235
00:14:40.600 --> 00:14:45.059
Then we have toLocaleDateString() converts
that date into a string using the look

236
00:14:45.059 --> 00:14:46.514
how specific formatting.

237
00:14:46.514 --> 00:14:53.110
UTC is just UTC time zone, so the British
time zone, without daylight savings,

238
00:14:53.110 --> 00:14:59.721
and then toString() is just into a string,
typically default format, yeah.

239
00:14:59.721 --> 00:15:04.406
Yeah, you just gotta try it out
until you get what you want or

240
00:15:04.406 --> 00:15:08.076
use the international
API to work with times.

241
00:15:08.076 --> 00:15:09.077
All right, almost there.

242
00:15:09.077 --> 00:15:11.451
Question 47, what gets logged?

243
00:15:11.451 --> 00:15:16.339
So we have A, B, C, D and we have
some default parameters here as well.

244
00:15:16.339 --> 00:15:20.312
A is null, B is undefined,
C is False and D is 0.

245
00:15:20.312 --> 00:15:21.945
Is it null, undefined, false, 0?

246
00:15:21.945 --> 00:15:23.883
Null, default, false, 0?

247
00:15:23.883 --> 00:15:26.410
Only default or default,
default, false, 0?

248
00:15:30.989 --> 00:15:34.266
&gt;&gt; Lydia: All right, so the right
answer is null, default, false, 0.

249
00:15:34.266 --> 00:15:37.852
So default parameters are used if
null value or undefined is passed but

250
00:15:37.852 --> 00:15:40.052
the first one where you're passing null.

251
00:15:40.052 --> 00:15:43.752
So it is a value it's not null value and
it's not undefined so we're using null.

252
00:15:43.752 --> 00:15:46.413
And for b, it is undefined so
in that case it uses default.

253
00:15:46.413 --> 00:15:50.229
But for everything else, if we have false
and 0 it will just use false and 0.

254
00:15:50.229 --> 00:15:51.743
So it's only if null value or undefined.

255
00:15:54.687 --> 00:15:56.373
&gt;&gt; Lydia: Cool.

256
00:15:56.373 --> 00:15:58.520
Next question, symbols, what gets logged?

257
00:15:58.520 --> 00:16:00.370
We have symbolOne, Two, and Three.

258
00:16:00.370 --> 00:16:03.931
Then we're just strictly comparing them,
so

259
00:16:03.931 --> 00:16:08.144
which ones are strictly equal and
which ones aren't.

260
00:16:08.144 --> 00:16:12.768
Note that for symbolTwo we're not using
symbol.for, we're creating a new symbol.

261
00:16:16.946 --> 00:16:22.397
&gt;&gt; Lydia: All right, the right answer here
is D, it's false, false, true, and false.

262
00:16:22.397 --> 00:16:26.990
So something to remember is that we're
using symbol.for it checks if the symbol

263
00:16:26.990 --> 00:16:31.227
with that key already exists
in the global symbol registry.

264
00:16:31.227 --> 00:16:34.265
And if it does, then it just returns
that existing symbol, and otherwise,

265
00:16:34.265 --> 00:16:35.267
it creates a new symbol.

266
00:16:35.267 --> 00:16:37.045
And that is different
from just using symbol,

267
00:16:37.045 --> 00:16:39.526
cuz that always creates
a new unique symbol.

268
00:16:39.526 --> 00:16:43.956
Also something to keep in mind is that
a global registry works across modules.

269
00:16:43.956 --> 00:16:47.865
So even if we export symbol.for key,
and we use that in another module,

270
00:16:47.865 --> 00:16:49.926
it will still reuse that same symbol.

271
00:16:50.936 --> 00:16:54.186
It's like another thing in the JavaScript
engine that just keeps all these

272
00:16:54.186 --> 00:16:54.916
symbols there.

273
00:16:56.056 --> 00:16:59.421
So yeah, when comparing them,
symbol.for, equal symbol.for.

274
00:16:59.421 --> 00:17:02.400
That is true cuz it just reuses
that existing symbol, but

275
00:17:02.400 --> 00:17:06.538
when it's using symbol without for,
it creates a new one every time.

276
00:17:06.538 --> 00:17:07.948
So that's false.

277
00:17:07.948 --> 00:17:13.192
And we can use symbols to make sure that,
if we have multiple values in the same

278
00:17:13.192 --> 00:17:18.533
namespace that it doesn't clash,
stuff like that, properties on objects.

279
00:17:23.542 --> 00:17:25.397
&gt;&gt; Lydia: Yeah,
when comparing one to two, well,

280
00:17:25.397 --> 00:17:28.907
that is false cuz we're creating
a new symbol for symbolTwo.

281
00:17:28.907 --> 00:17:30.107
Same goes for the second one.

282
00:17:30.107 --> 00:17:31.577
SymbolTwo is a new symbol.

283
00:17:31.577 --> 00:17:34.967
SymbolOne and symbolThree are the same,
because we're using symbol.for.

284
00:17:34.967 --> 00:17:37.516
So symbolThree is just
reusing that same symbol,

285
00:17:37.516 --> 00:17:41.824
cuz it was already in the global registry,
and symbolThree equals the new symbol key

286
00:17:41.824 --> 00:17:44.570
is also false cuz that creates a new,
unique symbol.

287
00:17:45.850 --> 00:17:47.600
Yeah, question 49, what gets logged?

288
00:17:47.600 --> 00:17:52.979
So we have to compare users function
that receives both user1 and user2.

289
00:17:52.979 --> 00:17:58.223
And we have a default argument
that goes back for user2.

290
00:17:58.223 --> 00:18:01.734
And then we have a user object, and
then we're comparing users three times.

291
00:18:01.734 --> 00:18:02.506
So what gets logged?

292
00:18:06.516 --> 00:18:10.674
&gt;&gt; Lydia: The right answer here is B,
it is false, true, false.

293
00:18:10.674 --> 00:18:11.846
So what we have here for

294
00:18:11.846 --> 00:18:16.374
the first one is we have compareUsers
that points to the function objects.

295
00:18:16.374 --> 00:18:20.364
And we have the user object,
that's a new object in memory.

296
00:18:20.364 --> 00:18:24.255
And then the compare user's lexical
environment has both the user1 and

297
00:18:24.255 --> 00:18:26.614
user2 arguments that we passed.

298
00:18:26.614 --> 00:18:30.994
And user1 points the error
should go to the user object.

299
00:18:30.994 --> 00:18:33.914
But user2, cuz we're spreading it,
we're creating a new object.

300
00:18:33.914 --> 00:18:35.504
So this is new object in memory.

301
00:18:35.504 --> 00:18:38.712
So when we compare them strictly,
it is false.

302
00:18:38.712 --> 00:18:41.695
They both are references to
different points of memory.

303
00:18:43.766 --> 00:18:47.102
&gt;&gt; Lydia: The next one is true.

304
00:18:47.102 --> 00:18:51.101
Again, the user1 arrow should
go to the user object because it

305
00:18:51.101 --> 00:18:54.961
defaults back to user and
we didn't pass a value for user2.

306
00:18:54.961 --> 00:19:00.188
So the default parameter was user, so that
both point to the same object in memory.

307
00:19:00.188 --> 00:19:03.759
So when comparing them equally, it is
true cuz they have the same reference.

308
00:19:05.941 --> 00:19:07.955
&gt;&gt; Lydia: And then, comparing users again.

309
00:19:07.955 --> 00:19:10.158
So here, we're just creating
two entirely new objects.

310
00:19:10.158 --> 00:19:14.721
We're not even using that user object that
we created in that declarative environment

311
00:19:14.721 --> 00:19:15.778
record.

312
00:19:15.778 --> 00:19:18.555
So these are, again,
two separate objects in memory.

313
00:19:18.555 --> 00:19:20.811
So when comparing them it's false,

314
00:19:20.811 --> 00:19:25.266
cuz they both have different references
to different spaces in memory.

315
00:19:27.589 --> 00:19:29.615
&gt;&gt; Lydia: Cool, very last question.

316
00:19:30.925 --> 00:19:37.455
We have a tagged literal, so what gets
logged, when we invoked the thankYouTag?

317
00:19:37.455 --> 00:19:39.533
Well, this is the last question and
the greeting.

318
00:19:43.145 --> 00:19:46.277
&gt;&gt; Lydia: All right,
the right answer is A.

319
00:19:46.277 --> 00:19:50.445
So when using tagged template
literals like this, the very first

320
00:19:50.445 --> 00:19:55.537
argument that we get is an array of all
the strings without the expressions.

321
00:19:55.537 --> 00:19:58.848
So in this example, we have an array
of this is a less question,

322
00:19:58.848 --> 00:20:02.971
then there's an expression that doesn't
get added to that first parameter,

323
00:20:02.971 --> 00:20:05.358
and then there's another
part of the array.

324
00:20:05.358 --> 00:20:09.206
And then all the other parameters or
arguments that the function receives

325
00:20:09.206 --> 00:20:13.187
are just the expression, so in this
case greeting, but also just a string.

326
00:20:15.677 --> 00:20:19.454
Yeah, so in this case, for this question,
when we have are greeting like this,

327
00:20:19.454 --> 00:20:22.233
and this is a last question,
the very first one, strings,

328
00:20:22.233 --> 00:20:23.645
is this is the last question.

329
00:20:23.645 --> 00:20:27.692
And then there's another empty string just
because we have an expression as the last

330
00:20:27.692 --> 00:20:29.646
part of the tagged template.

331
00:20:29.646 --> 00:20:33.372
But then greeting is the value of
the first expression, and that is,

332
00:20:33.372 --> 00:20:35.956
thank you for coming to my workshop.

333
00:20:35.956 --> 00:20:38.176
So that is just equal to
that string non-numerate.

