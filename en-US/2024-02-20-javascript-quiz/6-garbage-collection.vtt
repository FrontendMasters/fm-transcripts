WEBVTT

1
00:00:00.210 --> 00:00:02.660
That was all on iterators and generators.

2
00:00:02.660 --> 00:00:05.556
We go to garbage collection, also fun.

3
00:00:05.556 --> 00:00:09.025
So one important thing about
garbage collection is that,

4
00:00:09.025 --> 00:00:13.290
all depends on the availability from
the global lexical environment.

5
00:00:13.290 --> 00:00:14.934
So here we have that object,

6
00:00:14.934 --> 00:00:19.179
our object that then points to the object
in memory with age and johndoe and

7
00:00:19.179 --> 00:00:23.033
then address is another object
which is another object in memory.

8
00:00:24.903 --> 00:00:28.304
Now, if we set a variable equal to
the address property on object,

9
00:00:28.304 --> 00:00:31.853
we're actually just creating
a reference to that object in memory.

10
00:00:33.043 --> 00:00:34.983
So now if we set object to null,

11
00:00:34.983 --> 00:00:39.625
it will remove that reference from
the declarative environment record.

12
00:00:39.625 --> 00:00:42.826
But because it address still
has a pointer to that object,

13
00:00:42.826 --> 00:00:46.745
that address used to point to it,
that won't get garbage collected cuz

14
00:00:46.745 --> 00:00:50.168
it's still reachable from
the global lexical environment.

15
00:00:52.998 --> 00:00:54.667
Now, we can also have
them point to each other.

16
00:00:54.667 --> 00:00:58.768
So we have objA and objB and
their properties both point to each other.

17
00:00:59.848 --> 00:01:03.280
But now if we set objA and
objB to null, objA and

18
00:01:03.280 --> 00:01:08.385
objB are kind of still there and
they still reference each other, but

19
00:01:08.385 --> 00:01:14.586
they aren't referenceable anymore
from the global lexical environment.

20
00:01:14.586 --> 00:01:19.189
And this is a pretty recent thing cuz
older JavaScript engines now used to say,

21
00:01:19.189 --> 00:01:23.162
okay, well, there is still a reference
though to objB and to objA,

22
00:01:23.162 --> 00:01:24.997
namely through objA and objB.

23
00:01:24.997 --> 00:01:28.422
But the newer ones say,
if they aren't reachable from the global

24
00:01:28.422 --> 00:01:31.293
lexical environment,
then we garbage collect them.

25
00:01:31.293 --> 00:01:34.574
Even though there was still a reference,
that's fine, but

26
00:01:34.574 --> 00:01:37.288
if we cannot reach them ever,
then why keep them?

27
00:01:37.288 --> 00:01:43.534
But that's only well,
a newer garbage collection method.

28
00:01:43.534 --> 00:01:48.353
Yeah, anyway, that's all
the garbage collection really is.

29
00:01:48.353 --> 00:01:49.519
But now question 25,

30
00:01:49.519 --> 00:01:52.504
which of the following statements
are true about a WeakMap?

31
00:01:53.824 --> 00:01:57.322
Keys are strongly referenced and
the values are weakly referenced.

32
00:01:57.322 --> 00:02:02.103
Keys are weakly referenced and
the values are strongly referenced.

33
00:02:02.103 --> 00:02:05.243
It is innumerable,
allowing iteration over its elements.

34
00:02:05.243 --> 00:02:08.006
It can have primitive data types as keys,
and

35
00:02:08.006 --> 00:02:11.504
we can use the key method on the WeakMap,
but not values.

36
00:02:15.334 --> 00:02:17.424
The right answer, is only B,

37
00:02:17.424 --> 00:02:22.604
which is keys are weakly referenced and
the values are strongly referenced.

38
00:02:22.604 --> 00:02:25.878
So first, I just wanna show a quick
example with a regular map, so

39
00:02:25.878 --> 00:02:26.854
not a WeakMap.

40
00:02:26.854 --> 00:02:29.374
And in this case, we have you user,

41
00:02:29.374 --> 00:02:33.838
which is just a regular object
with a name property, johndoe.

42
00:02:33.838 --> 00:02:35.697
And then userSessionata, which is a Map.

43
00:02:35.697 --> 00:02:38.944
And we're setting the key to user,
so a reference to that object.

44
00:02:38.944 --> 00:02:40.627
And then we just have some sessionInfo, so

45
00:02:40.627 --> 00:02:43.903
just imagine that's another
object with some information.

46
00:02:43.903 --> 00:02:46.499
Now, what happens is that if
we set user to null also,

47
00:02:46.499 --> 00:02:50.257
there's no reference anymore from
the global lexical environment to that or

48
00:02:50.257 --> 00:02:52.193
we're just having that to null there.

49
00:02:54.093 --> 00:02:56.626
Because map still has a strong
reference to that object,

50
00:02:56.626 --> 00:02:58.333
it doesn't get garbage collected.

51
00:02:58.333 --> 00:03:01.719
But there is no way to get that object.

52
00:03:01.719 --> 00:03:05.101
So it's kind of just a waste
of having that object there,

53
00:03:05.101 --> 00:03:06.869
cuz there's no way to get it.

54
00:03:06.869 --> 00:03:10.549
We cannot get that user object
through userSessionData.

55
00:03:12.299 --> 00:03:16.055
So what WeakMap does is it
actually creates a weak reference,

56
00:03:16.055 --> 00:03:19.304
which essentially says that,
if we set user to null,

57
00:03:19.304 --> 00:03:24.796
because it's a weak reference, the garbage
collector can actually garbage collect it,

58
00:03:24.796 --> 00:03:27.418
which is just that's all that WeakMap is.

59
00:03:27.418 --> 00:03:32.178
So if the object that we're using
as a key doesn't exist anymore or

60
00:03:32.178 --> 00:03:37.887
we're setting it to null, then it also
gets garbage collected on the WeakMap.

61
00:03:37.887 --> 00:03:41.092
Even though it kinda still had
a reference from the global

62
00:03:41.092 --> 00:03:44.766
lexical environment through like
the userSessionData map, but

63
00:03:44.766 --> 00:03:48.190
it's like a weak reference,
so it gets garbage collected.

64
00:03:49.800 --> 00:03:52.432
Yeah, yeah, sorry.

65
00:03:52.432 --> 00:03:55.360
&gt;&gt; What does it mean for
the value to be strongly referenced there?

66
00:03:57.280 --> 00:04:03.559
&gt;&gt; So it just means if we remove
them sessionInfo, it's fine.

67
00:04:03.559 --> 00:04:09.481
It won't do anything
with map entry kind of.

68
00:04:09.481 --> 00:04:13.891
But again, it's just about, cuz you
can only get data from a map by using

69
00:04:13.891 --> 00:04:18.816
userSessionData.get, and
then with the reference to that object.

70
00:04:18.816 --> 00:04:23.876
But if we're setting it to null, there
is no way to get that object anymore.

71
00:04:23.876 --> 00:04:30.311
You cannot get a property from the map
through its value, only through its key.

72
00:04:30.311 --> 00:04:33.534
So that's why it's important that if
you're using objects that can be removed,

73
00:04:33.534 --> 00:04:34.992
I don't know, maybe DOM elements.

74
00:04:34.992 --> 00:04:39.796
Or yeah, a userSession and a user
logs out and you're somehow have that

75
00:04:39.796 --> 00:04:44.683
user reference, maybe on the global
scope or in local storage if they log

76
00:04:44.683 --> 00:04:49.274
out that you don't keep reference
to that user property in the map.

77
00:04:49.274 --> 00:04:50.282
But yeah, for

78
00:04:50.282 --> 00:04:55.664
value doesn't matter cuz you cannot
get the property through that anyway.

79
00:04:55.664 --> 00:05:00.912
Yeah, Anyway, next, sorry.

80
00:05:02.883 --> 00:05:06.447
The next question, so
we have another closure, but

81
00:05:06.447 --> 00:05:10.829
when will enter a function be eligible for
garbage collection?

82
00:05:10.829 --> 00:05:12.946
Is it by invoking outer function?

83
00:05:12.946 --> 00:05:16.029
Is it by explicitly setting
outer function to null?

84
00:05:16.029 --> 00:05:18.804
Is it automatically garbage collected
right after outer is called?

85
00:05:18.804 --> 00:05:23.195
Or it depends on the JavaScript
engine's garbage collection strategy.

86
00:05:26.227 --> 00:05:31.894
So the right answer is B, by explicitly
setting outer function to null.

87
00:05:31.894 --> 00:05:34.167
So this is kind of the setup
that we have here.

88
00:05:34.167 --> 00:05:38.082
So we have an outer function on
the object environment record that points

89
00:05:38.082 --> 00:05:39.759
to the outer function object.

90
00:05:39.759 --> 00:05:42.794
Then we have an outer function variable,
declarative const, so

91
00:05:42.794 --> 00:05:45.008
it's on the declarative
environment record.

92
00:05:45.008 --> 00:05:49.008
And that one points to the function
object returned from the outer function.

93
00:05:50.698 --> 00:05:54.882
So by just calling outer, there's still a
reference to the inner function object, so

94
00:05:54.882 --> 00:05:58.325
it won't get garbage collected cuz
it's still referenceable through

95
00:05:58.325 --> 00:06:00.726
the global lexical environment.

96
00:06:00.726 --> 00:06:03.585
So it's only if we set it to null,
imagine we set it to null,

97
00:06:03.585 --> 00:06:07.655
that we remove that reference from outer
function from the declarative environment

98
00:06:07.655 --> 00:06:10.255
record, and
only then will it be garbage collected.

99
00:06:12.303 --> 00:06:15.377
So it's just kind of the entire
closure environment, again,

100
00:06:15.377 --> 00:06:19.205
where we have a reference to the function
object which then also has a reference

101
00:06:19.205 --> 00:06:22.280
to either lexical environment and
the outer function object.

102
00:06:22.280 --> 00:06:25.883
So it's all still there in memory
if we just kept it this way.

103
00:06:27.550 --> 00:06:29.206
Make sense?

104
00:06:29.206 --> 00:06:32.520
Cool, then we go on to the next question.

105
00:06:33.690 --> 00:06:36.720
Which statements are true
regarding this code snippet?

106
00:06:36.720 --> 00:06:40.421
The object b:1 will be garbage collected,
ref still references b:1 so

107
00:06:40.421 --> 00:06:42.074
it won't be garbage collected.

108
00:06:42.074 --> 00:06:46.395
The entire object object is retained in
memory due to the reference in ref, or

109
00:06:46.395 --> 00:06:49.799
setting object to null frees
all memory associated with it.

110
00:06:53.306 --> 00:06:56.787
So the right answer is B,
still references b:1.

111
00:06:56.787 --> 00:06:59.307
So it won't be garbage collected.

112
00:06:59.307 --> 00:07:02.568
So this is, stuff that we have, so
we have objects and we have ref.

113
00:07:02.568 --> 00:07:06.768
And ref reference is B, objA.

114
00:07:06.768 --> 00:07:09.458
So whenever we set object to null,
that's fine, that gets removed.

115
00:07:09.458 --> 00:07:13.020
But because we still have a reference to
b from the global lexical environment,

116
00:07:13.020 --> 00:07:15.638
it won't get garbage collected,
cuz we can still get it.

117
00:07:17.048 --> 00:07:19.470
So, B.

118
00:07:19.470 --> 00:07:22.856
&gt;&gt; That means if we were to
console log graph, it would still-

119
00:07:22.856 --> 00:07:25.406
&gt;&gt; It will point to b:1.

120
00:07:25.406 --> 00:07:30.916
But of course not, the object with a that
had b:1 as a reference, that's gone.

121
00:07:32.046 --> 00:07:34.037
But the B object is still there.

122
00:07:38.389 --> 00:07:41.860
All right, question 8,
it's again, WeakMap.

123
00:07:41.860 --> 00:07:44.633
You can get a list of all keys in
a WeakMap using its keys where you cannot

124
00:07:44.633 --> 00:07:45.294
get its values.

125
00:07:45.294 --> 00:07:50.700
I feel like this is like a duplicate
kind of stuff I just have but it's fine.

126
00:07:50.700 --> 00:07:52.086
So it's a true false.

127
00:07:55.710 --> 00:07:58.661
All right, and the answer here is false.

128
00:07:58.661 --> 00:08:03.048
I don't know if I have, yeah,
so the thing with, sorry,

129
00:08:03.048 --> 00:08:06.709
this should have been WeakMap not map.

130
00:08:06.709 --> 00:08:11.374
The thing with the fact that it's
keys are weakly referenced is

131
00:08:11.374 --> 00:08:16.216
that JavaScript doesn't know if
they still exist cuz the garbage

132
00:08:16.216 --> 00:08:19.136
collection cycles are kind of random.

133
00:08:19.136 --> 00:08:22.858
It depends on different factors when
it happens it's not just at a set time.

134
00:08:22.858 --> 00:08:26.606
It's not after a function invocation, that
garbage collection happens, it's just kind

135
00:08:26.606 --> 00:08:30.123
of whenever the engine decides that
right now is the right moment.

136
00:08:30.123 --> 00:08:35.247
So if we were to iterate over a WeakMap,
it might as well be that during that

137
00:08:35.247 --> 00:08:40.908
iteration, it gets garbage collected or
it's just very inconsistent.

138
00:08:40.908 --> 00:08:45.138
So because of that, we cannot iterate or
pretty much do anything with a WeakMap.

139
00:08:45.138 --> 00:08:48.093
Because maybe at the moment of
iteration is already garbage collected,

140
00:08:48.093 --> 00:08:49.548
all that kind of stuff.

141
00:08:49.548 --> 00:08:55.238
So we can get data, we can get
userSessionData.getUser, that's fine.

142
00:08:55.238 --> 00:08:59.179
But we cannot get keys or values, even
though values are strongly referenced, but

143
00:08:59.179 --> 00:09:00.090
we cannot do that.

144
00:09:00.090 --> 00:09:04.386
We can do that with a map, but not with
a WeakMap due to the inconsistency of

145
00:09:04.386 --> 00:09:06.623
the availability of the keys.

146
00:09:06.623 --> 00:09:08.954
All right, this one's kind of related
to scope and garbage collection.

147
00:09:08.954 --> 00:09:11.481
But when will a user be eligible for
garbage collection?

148
00:09:11.481 --> 00:09:16.076
Is it immediately after each iteration,
after the loop completes?

149
00:09:16.076 --> 00:09:19.705
Only if we explicitly set
a user to null within a loop?.

150
00:09:19.705 --> 00:09:24.351
Or when the function containing
the loop finishes execution.

151
00:09:28.193 --> 00:09:32.435
And the right answer is A,
immediately after each iteration.

152
00:09:33.475 --> 00:09:38.017
So as I said, this is kinda just related
to scope again, but that body of

153
00:09:38.017 --> 00:09:42.964
the for-of loop, it creates a new
lexical environment on every iteration.

154
00:09:42.964 --> 00:09:50.110
So the variables that we defined within
that body get re-initialized every time.

155
00:09:50.110 --> 00:09:53.563
It's important to remember that it's
only eligible for garbage collection,

156
00:09:53.563 --> 00:09:56.963
doesn't mean that they're immediately
garbage collected, as I just said,

157
00:09:56.963 --> 00:10:00.415
cuz the timing at which that happens is
random depends on many different factors

158
00:10:00.415 --> 00:10:02.773
when it's the most optimal for the engine.

159
00:10:02.773 --> 00:10:06.241
That's just some internal algorithms,
so I don't know the specifics off, but

160
00:10:06.241 --> 00:10:07.722
it's just pretty inconsistent.

161
00:10:07.722 --> 00:10:09.547
But yeah, within a for loop,

162
00:10:09.547 --> 00:10:14.438
variables declared within that can get
garbage collected on every iteration.

163
00:10:14.438 --> 00:10:19.103
So don't create a constant count
variable and then it, I don't know,

164
00:10:19.103 --> 00:10:21.591
use that value on the next iteration,

165
00:10:21.591 --> 00:10:26.828
that won't work cuz it's a new variable
each time, new lexical environment.

166
00:10:30.752 --> 00:10:34.780
So this one is kind of both the event
loop and garbage collection, but

167
00:10:34.780 --> 00:10:35.899
what gets logged?

168
00:10:35.899 --> 00:10:39.919
So we have the object, object that
has a bar method with console(this).

169
00:10:39.919 --> 00:10:43.332
We have a setTimeout that
invokes object.bar, and

170
00:10:43.332 --> 00:10:47.245
then we have to queueMicrotask
that deletes object.bar.

171
00:10:47.245 --> 00:10:51.350
So what gets logged, is an object, window,
setTimeout, undefined, or TypeError?

172
00:10:54.690 --> 00:10:58.720
All right, the right answer
to this one is a TypeError.

173
00:10:58.720 --> 00:11:03.944
And this happens because we are deleting
object.bar in the queueMicrotask.

174
00:11:03.944 --> 00:11:05.028
And as you know,

175
00:11:05.028 --> 00:11:10.694
the microtask runs before the regular task
that we define in the setTimeout callback.

176
00:11:11.754 --> 00:11:14.113
So first we delete object.bar,

177
00:11:14.113 --> 00:11:18.421
and then when that microtask
queue is empty, the callback.

178
00:11:18.421 --> 00:11:22.237
So object.bar gets push to the call stack,
but we are trying to invoke something that

179
00:11:22.237 --> 00:11:25.534
doesn't exist anymore cuz we just
deleted that in the microtask.

180
00:11:25.534 --> 00:11:29.994
So then JavaScript is, well, you cannot
invoke undefined, it's not a function.

181
00:11:29.994 --> 00:11:34.576
So it throws the type error
&gt;&gt; How much are you thinking about garbage

182
00:11:34.576 --> 00:11:36.434
collection, day to day work?

183
00:11:37.634 --> 00:11:38.462
&gt;&gt; Quite a lot.
I mean,

184
00:11:38.462 --> 00:11:40.533
it depends on how you
structure your objects and

185
00:11:40.533 --> 00:11:42.097
how you reference certain things.

186
00:11:42.097 --> 00:11:45.873
And I think it also depends on classes,
as we just said, with the prototypes or

187
00:11:45.873 --> 00:11:46.861
the constructors.

188
00:11:46.861 --> 00:11:51.463
Of course, it depends on the type
of data you're working with,

189
00:11:51.463 --> 00:11:53.509
but it can be a considerate or

190
00:11:53.509 --> 00:11:58.959
a considerable difference in how
much memory you're allocating.

191
00:11:58.959 --> 00:12:04.511
And yeah, also the fact that certain
things are pretty inconsistent, you don't

192
00:12:04.511 --> 00:12:10.149
know when stuff gets garbage collected,
is just something to keep in mind as well.

193
00:12:10.149 --> 00:12:12.820
Cuz I think a lot of people,
they expect all right,

194
00:12:12.820 --> 00:12:16.859
well I'm setting this to null now so
it should be gone, and then it's not, so

195
00:12:16.859 --> 00:12:19.925
just knowing that it doesn't
depend on certain factors.

196
00:12:19.925 --> 00:12:21.228
Or it does depend on certain factors, but

197
00:12:21.228 --> 00:12:22.656
it doesn't always execute
at the same time.

198
00:12:22.656 --> 00:12:27.434
It's also just good to know in
case your app is running into

199
00:12:27.434 --> 00:12:29.686
memory issues in general.

200
00:12:29.686 --> 00:12:32.465
But it is important to
know just how it works and

201
00:12:32.465 --> 00:12:37.456
how we can optimize it using QuickMaps,
ensuring that we aren't just referencing

202
00:12:37.456 --> 00:12:40.684
objects that we aren't using anymore for
no reason.

203
00:12:42.654 --> 00:12:47.469
Yeah, and just understanding that
if you are creating a reference,

204
00:12:47.469 --> 00:12:49.633
it will retain that in memory.

205
00:12:49.633 --> 00:12:53.833
And if you're not using anymore,
then try to remove that reference.

206
00:12:53.833 --> 00:12:55.384
I don't know, small stuff like that.

207
00:12:55.384 --> 00:13:01.055
Just don't keep stuff in the heap for
no reason or in memory for no reason.

208
00:13:01.055 --> 00:13:02.819
Yeah.

209
00:13:02.819 --> 00:13:07.717
&gt;&gt; That example for line number 10,
if that line, [COUGH] if that line is

210
00:13:07.717 --> 00:13:13.247
object or bar equal null, it will have
the same error type error, correct?

211
00:13:13.247 --> 00:13:15.047
&gt;&gt; Yes, because we cannot invoke null.

212
00:13:15.047 --> 00:13:17.892
[LAUGH]
&gt;&gt; It will just garbage collected in that

213
00:13:17.892 --> 00:13:18.434
moment.

214
00:13:19.595 --> 00:13:20.437
Yeah, we said object.

215
00:13:20.437 --> 00:13:22.155
&gt;&gt; JavaScript runs at line 10.

216
00:13:22.155 --> 00:13:23.255
&gt;&gt; Yeah.

217
00:13:23.255 --> 00:13:23.945
&gt;&gt; It's gone.

218
00:13:23.945 --> 00:13:27.946
&gt;&gt; Exactly, cuz then object.bar
is undefined cuz it's nothing.

219
00:13:27.946 --> 00:13:29.375
And then we're trying to invoke undefined.

220
00:13:29.375 --> 00:13:31.861
It's like, can't do that.

221
00:13:34.165 --> 00:13:40.024
&gt;&gt; Do you use queueMicroTask instead of
something like request animation frame or

222
00:13:40.024 --> 00:13:41.428
different use or?

223
00:13:41.428 --> 00:13:46.243
&gt;&gt; It's a different use case cuz I believe
request animation frame depends on,

224
00:13:46.243 --> 00:13:48.642
it he 16 frames per second?

225
00:13:48.642 --> 00:13:53.463
Loop it uses a different like timing for
that?

226
00:13:53.463 --> 00:14:00.690
You microtasks, yeah, I haven't used
you or queueMicrotasks I think anytime.

227
00:14:00.690 --> 00:14:06.233
But I know that it's more for
optimization for, gosh,

228
00:14:06.233 --> 00:14:11.560
library authors that depend
watching the animations or,

229
00:14:11.560 --> 00:14:15.164
gosh, I forgot the word, but, yeah.

230
00:14:15.164 --> 00:14:18.488
&gt;&gt; How do you think about garbage
collection if you're creating a game in

231
00:14:18.488 --> 00:14:19.642
JavaScript?

232
00:14:19.642 --> 00:14:21.457
&gt;&gt; Creating games?

233
00:14:21.457 --> 00:14:23.972
I haven't created a game in,
[LAUGH] JavaScript, so I wouldn't know.

234
00:14:23.972 --> 00:14:27.798
But I think, of course,
anything you render, if it's an object,

235
00:14:27.798 --> 00:14:32.322
if it's not currently in the view,
you might as well just remove it.

236
00:14:32.322 --> 00:14:34.082
But again,
I'm not the one to talk about that.

237
00:14:34.082 --> 00:14:36.580
I know there are a lot of game
developers with JavaScript, but

238
00:14:36.580 --> 00:14:38.756
I don't think I should give
my opinion on [LAUGH] that.

239
00:14:38.756 --> 00:14:42.604
But, I don't know, do, yeah.

240
00:14:42.604 --> 00:14:46.468
&gt;&gt; Yeah,
I think in the case of single-page apps,

241
00:14:46.468 --> 00:14:52.706
they tend to just create a lot of objects,
and there's a lot of dependencies.

242
00:14:52.706 --> 00:14:59.335
And so I think, Yeah,
just creating less memory.

243
00:15:00.345 --> 00:15:01.541
&gt;&gt; Yeah, just like reusing it.

244
00:15:01.541 --> 00:15:05.879
If you have an object, the same with
knowing that, if you're using an object

245
00:15:05.879 --> 00:15:10.019
and you're spreading it, like a square
bracket is spreading an object,

246
00:15:10.019 --> 00:15:13.515
you're creating a new object,
do you always need to do that?

247
00:15:13.515 --> 00:15:17.339
Or maybe you just want to create
a variable that points to the same object

248
00:15:17.339 --> 00:15:21.674
if you're not gonna modify, just
understanding the small differences again,

249
00:15:21.674 --> 00:15:23.473
it kind of accumulates, right?

250
00:15:23.473 --> 00:15:28.550
As your app grows, those small changes
might lead to better performance

251
00:15:28.550 --> 00:15:33.577
overall but-
&gt;&gt; Yeah, every time you spread, you create

252
00:15:33.577 --> 00:15:38.725
a new object and you're just if you're
doing spreading in a loop, and you're

253
00:15:38.725 --> 00:15:41.813
doing it because you like immutability-
&gt;&gt; Yeah.

254
00:15:41.813 --> 00:15:45.123
&gt;&gt; That's not really a great reason-
&gt;&gt; Yeah, really-

255
00:15:45.123 --> 00:15:45.768
&gt;&gt; That much.

256
00:15:45.768 --> 00:15:49.485
&gt;&gt; Knowing where to define certain
variables if you only use it in a loop,

257
00:15:49.485 --> 00:15:50.877
just keep it in that loop.

258
00:15:50.877 --> 00:15:53.910
Cuz then afterward,
it can get garbage collected, otherwise,

259
00:15:53.910 --> 00:15:55.873
it will just stay in memory.

260
00:15:55.873 --> 00:16:01.250
And of course, on a smaller scale also
JavaScript engines are so optimize.

261
00:16:01.250 --> 00:16:05.761
I don't really care about those micro
optimizations about tiny, tiny bits.

262
00:16:05.761 --> 00:16:10.233
But as I said, it can accumulate and
just knowing where certain errors may come

263
00:16:10.233 --> 00:16:15.113
from, certain performance issues may come
from, it can definitely help you debug or

264
00:16:15.113 --> 00:16:17.181
get to the conclusion a lot faster.

