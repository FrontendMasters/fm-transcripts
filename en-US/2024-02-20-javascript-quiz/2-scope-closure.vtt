WEBVTT

1
00:00:00.290 --> 00:00:03.455
Scope &amp; Closure, so I'm sure you're
aware that we have the global scope,

2
00:00:03.455 --> 00:00:06.680
which is just for variables defined on
the global, then we have block scope.

3
00:00:06.680 --> 00:00:08.450
So anything defined within
the curly brackets.

4
00:00:08.450 --> 00:00:09.846
And we have function scope.

5
00:00:09.846 --> 00:00:14.345
And all this means, of course,
is that variables inside of these scopes

6
00:00:14.345 --> 00:00:19.016
are available to other functions or
any functionality within that scope.

7
00:00:19.016 --> 00:00:22.280
And of course, if we, like in this case,
we have a fruit variable defined within

8
00:00:22.280 --> 00:00:25.208
that function, so it's only available
within the function scope, and

9
00:00:25.208 --> 00:00:27.659
using it outside of it will
throw a reference error.

10
00:00:27.659 --> 00:00:33.419
So we cannot access variables that
are further up the scope chain.

11
00:00:33.419 --> 00:00:36.169
Of course,
moving it will make it available to us and

12
00:00:36.169 --> 00:00:37.989
the reference error will be gone.

13
00:00:39.033 --> 00:00:41.935
But something that's a bit more
interesting, I find, is closures,

14
00:00:41.935 --> 00:00:45.243
because this is something that can be
kind of difficult to understand at first.

15
00:00:45.243 --> 00:00:47.149
Because here, it might look normal, but

16
00:00:47.149 --> 00:00:51.093
what we have here is we have a function
outer, which returns a function inner.

17
00:00:51.093 --> 00:00:53.775
But within the inner function,

18
00:00:53.775 --> 00:01:00.017
we use a value that we pass to outer
to actually create a sum like x+y.

19
00:01:00.017 --> 00:01:04.487
But how does inner still know what we pass
to outer if it's in a different scope?

20
00:01:06.437 --> 00:01:11.557
And this all depends on how
JavaScript works with memory.

21
00:01:11.557 --> 00:01:13.735
So here we have the global
lexical environment, and

22
00:01:13.735 --> 00:01:15.927
then we have the environment record.

23
00:01:15.927 --> 00:01:20.040
And the global environment record consists
of both the object environment record and

24
00:01:20.040 --> 00:01:22.434
the declarative environment record.

25
00:01:22.434 --> 00:01:25.947
The object one is for
function declarations and var keywords and

26
00:01:25.947 --> 00:01:30.814
then the declarative one is for
const, let, classes, everything else.

27
00:01:30.814 --> 00:01:35.894
So in this case we have the outer
function which creates a function object.

28
00:01:35.894 --> 00:01:39.814
So this is just, we haven't called it yet,
this is just like the function object,

29
00:01:39.814 --> 00:01:43.022
which contains a call method that
we can use to actually invoke it.

30
00:01:43.022 --> 00:01:46.222
But this is first created
in memory like this.

31
00:01:46.222 --> 00:01:50.542
And outer also has
an environment property.

32
00:01:50.542 --> 00:01:53.798
And this always points to the environment
in which that function was created,

33
00:01:53.798 --> 00:01:56.082
which in this case is
the global lexical environment.

34
00:01:56.082 --> 00:01:57.732
And this is something
important to remember.

35
00:01:57.732 --> 00:02:02.707
Cuz now we have the out variable, which is
const, so declarative environment record,

36
00:02:02.707 --> 00:02:04.063
which calls outer too.

37
00:02:04.063 --> 00:02:06.969
And this creates outer's
lexical environment, so

38
00:02:06.969 --> 00:02:11.599
that call method is invoked,
which creates a lexical environment.

39
00:02:11.599 --> 00:02:15.899
And because we pass 2, it sets x to the
argument to 2 in this lexical environment.

40
00:02:17.429 --> 00:02:18.426
Now in this case,

41
00:02:18.426 --> 00:02:22.293
we're not using any closures here
cuz now outer is just returning x.

42
00:02:22.293 --> 00:02:25.080
So we're setting out to
whatever it returns to 2, and

43
00:02:25.080 --> 00:02:29.963
then the lexical environment is removed
from memory cuz we don't use it anymore.

44
00:02:29.963 --> 00:02:32.255
But this is different
when we use that closure,

45
00:02:32.255 --> 00:02:35.480
cuz now we still have the outer
function object which we then call.

46
00:02:40.809 --> 00:02:44.355
&gt;&gt; Lydia: So yeah, so we have the lexical
environment, and within outer,

47
00:02:44.355 --> 00:02:46.183
it returns the inner function.

48
00:02:46.183 --> 00:02:50.023
So this creates yet another function
object, namely the inner function object.

49
00:02:50.023 --> 00:02:54.119
And now we're setting out, or the variable
out, not equal to the value of x, but

50
00:02:54.119 --> 00:02:58.581
we're actually setting it equal to
the function object that we just created.

51
00:02:58.581 --> 00:03:00.601
So the inner function object.

52
00:03:00.601 --> 00:03:04.194
And as you can see here, the inner
function object also has the environment

53
00:03:04.194 --> 00:03:07.558
that still points to the lexical
environment in which it was defined,

54
00:03:07.558 --> 00:03:11.051
which in this case is
the outer lexical environment.

55
00:03:11.051 --> 00:03:13.717
And because it still references
that from the global scope, or

56
00:03:13.717 --> 00:03:17.664
like from the global lexical environment,
it cannot be garbage collected.

57
00:03:17.664 --> 00:03:20.422
So whenever we use or
whenever we use, like x+y,

58
00:03:20.422 --> 00:03:23.841
even though x isn't available
in the inner function object,

59
00:03:23.841 --> 00:03:27.934
I'm just gonna call it now, cuz then
you can see the environment record.

60
00:03:27.934 --> 00:03:30.174
The environment record doesn't contain x.

61
00:03:30.174 --> 00:03:34.604
So it goes down to outer env, and then
the environment, and there it finds x.

62
00:03:34.604 --> 00:03:38.012
So that's how it still knows
what x is when we call inner,

63
00:03:38.012 --> 00:03:41.788
even though it doesn't have it
in its own environment record.

64
00:03:41.788 --> 00:03:43.932
That's essentially what closures are.

65
00:03:43.932 --> 00:03:47.276
It's just the fact that
a lexical environment is

66
00:03:47.276 --> 00:03:52.312
still referencing environments from
the outer lexical environment.

67
00:03:52.312 --> 00:03:53.412
I hope that makes some sense.

68
00:03:53.412 --> 00:03:56.242
It's just going down that
environment chain pretty much.

69
00:03:56.242 --> 00:04:02.915
So that's what closures are.

70
00:04:02.915 --> 00:04:05.896
It's just the fact that it still
references it from the global lexical

71
00:04:05.896 --> 00:04:08.485
environment, which is why it
cannot be garbage collected.

72
00:04:10.765 --> 00:04:12.465
So just keep this in mind.

73
00:04:12.465 --> 00:04:16.776
Because based on that, we have
the following question, what gets logged?

74
00:04:16.776 --> 00:04:22.172
So we have an arrow function, outerFunc,
that contains the count variable

75
00:04:22.172 --> 00:04:27.165
set to zero and it returns another
function, that increments count.

76
00:04:27.165 --> 00:04:29.046
Then we have the counter variable,

77
00:04:29.046 --> 00:04:32.120
which is just whatever gets
returned from outerFunc, and

78
00:04:32.120 --> 00:04:36.215
then we're calling the login counter
twice, or the invocation of counter.

79
00:04:38.379 --> 00:04:43.138
&gt;&gt; Lydia: So, is it either 0 and
1, 1 or 2, 1 and 1, or 0 and 0?

80
00:04:46.707 --> 00:04:50.981
&gt;&gt; Lydia: The right answer is B,
it's 1 and 2.

81
00:04:50.981 --> 00:04:52.351
So let's see how this works.

82
00:04:52.351 --> 00:04:56.389
So we have the counter variable that
we set equal to the returned value of

83
00:04:56.389 --> 00:04:59.485
the outerFunc function,
which is a function object,

84
00:04:59.485 --> 00:05:02.506
in this case it's just
an anonymous function.

85
00:05:02.506 --> 00:05:04.719
We didn't give it any any name or
something.

86
00:05:04.719 --> 00:05:08.054
So here a counter is equal
to the function object.

87
00:05:08.054 --> 00:05:11.942
And you can see that the environment
of that function object points to

88
00:05:11.942 --> 00:05:14.366
the environment in which it was declared.

89
00:05:14.366 --> 00:05:17.422
So in this case,
that is the outerFunc lexical environment.

90
00:05:17.422 --> 00:05:20.332
And this contains the environment
record with count 0.

91
00:05:21.582 --> 00:05:25.736
So now when we call it, which we do twice,
we create the lexical environment for

92
00:05:25.736 --> 00:05:27.782
that anonymous function.

93
00:05:27.782 --> 00:05:30.542
And of course, this is returning ++count.

94
00:05:30.542 --> 00:05:34.338
It doesn't have its own count, so it goes
down that environment chain until it finds

95
00:05:34.338 --> 00:05:37.704
it, which in this case is in
the outerFunc lexical environment.

96
00:05:37.704 --> 00:05:38.824
So there it increments it.

97
00:05:40.034 --> 00:05:43.614
So now count is one on the outer
function lexical environment.

98
00:05:43.614 --> 00:05:47.754
Now the call ends, so it gets removed
from memory, but then we call it again.

99
00:05:47.754 --> 00:05:48.714
It does the exact same thing.

100
00:05:48.714 --> 00:05:50.091
It still doesn't have count, so

101
00:05:50.091 --> 00:05:52.694
it just increments it on
the outerFunc lexical environment.

102
00:05:52.694 --> 00:05:57.435
So the first time that we log counter,
you saw that we just incremented it.

103
00:05:57.435 --> 00:05:59.225
It's one we do ++count.

104
00:05:59.225 --> 00:06:01.761
So it logs it after incrementing it,
so it's one, and

105
00:06:01.761 --> 00:06:04.364
then the second time we log it,
it's again ++count.

106
00:06:04.364 --> 00:06:06.742
So ++1 is 2.

107
00:06:06.742 --> 00:06:09.552
So that's how it got 1 and 2, make sense?

108
00:06:09.552 --> 00:06:13.506
&gt;&gt; Speaker 2: So it was count++,
would it be then 0, 1?

109
00:06:13.506 --> 00:06:18.781
&gt;&gt; Lydia: That would be 0, 1,
cuz then, it first returns it,

110
00:06:18.781 --> 00:06:26.155
or first logs it, and then increments it,
but now we do a ++count, good.

111
00:06:26.155 --> 00:06:28.080
Now then we go to the next question,
question six.

112
00:06:28.080 --> 00:06:29.221
What gets logged?

113
00:06:29.221 --> 00:06:34.188
So we have the createCounter function,
which has a global count of 0.

114
00:06:34.188 --> 00:06:36.733
This also contains
a function incrementCount.

115
00:06:36.733 --> 00:06:40.291
Which has the incremented value
being ++ global count, and

116
00:06:40.291 --> 00:06:42.488
this returns the incremented value.

117
00:06:42.488 --> 00:06:48.305
And we have a variable counter, which is
whatever gets returned from createCounter.

118
00:06:48.305 --> 00:06:53.086
We have incrementCount, and
then we call createCounter,

119
00:06:53.086 --> 00:06:57.674
and then we increment count,
so we're gonna be 0 1 0,

120
00:06:57.674 --> 00:07:00.940
1 1 1, 0 1 2, 1 2 1, or 1 2 3?

121
00:07:04.894 --> 00:07:12.165
&gt;&gt; Lydia: All right, so
the right answer is 1 2 1, number D.

122
00:07:12.165 --> 00:07:12.813
All right, so

123
00:07:12.813 --> 00:07:16.274
essentially what we have here is we
again in the object environment record.

124
00:07:16.274 --> 00:07:20.162
So where function declarations are we have
the createCounter because it's a regular

125
00:07:20.162 --> 00:07:23.349
function, I kind of had to format
the code block a bit different here.

126
00:07:23.349 --> 00:07:25.784
But it's just the same
as what we just saw, and

127
00:07:25.784 --> 00:07:29.219
then in the declarative environment
record we have the counter,

128
00:07:29.219 --> 00:07:32.101
cuz we define it with const,
and then createCounter.

129
00:07:32.101 --> 00:07:35.674
I just see that this actually should have
pointed to another object like regular

130
00:07:35.674 --> 00:07:38.579
object that it then had
the incrementCount property on it.

131
00:07:38.579 --> 00:07:42.421
This won't really change any of the
answer, but I'll make sure to update that.

132
00:07:42.421 --> 00:07:45.979
But anyway, so we set counter equal to
the function object of incrementCount.

133
00:07:47.299 --> 00:07:50.498
And we call it,
the very first console.log incrementCount.

134
00:07:50.498 --> 00:07:55.742
And the incrementedValue is ++globalCount,
so it doesn't have its own globalCount.

135
00:07:55.742 --> 00:08:00.608
So it goes down that environment and it
mutates globalCount on the createCounter

136
00:08:00.608 --> 00:08:04.198
lexical environment,
because ++ actually mutates it.

137
00:08:04.198 --> 00:08:08.182
But then it also has its own
variable called incrementedValue,

138
00:08:08.182 --> 00:08:11.132
which is the value of
the incrementedCount, so

139
00:08:11.132 --> 00:08:14.988
we now have the incrementedValue of 1 and
globalCount of 1.

140
00:08:14.988 --> 00:08:18.799
Now this function stops running, we just
logged it, gets removed from memory, and

141
00:08:18.799 --> 00:08:22.516
then we call it again, so
another lexical environment gets created.

142
00:08:22.516 --> 00:08:24.186
Hello, there.

143
00:08:24.186 --> 00:08:27.648
Now incrementedValue is 2, because that
global count was already at 1, and

144
00:08:27.648 --> 00:08:30.796
it uses that same value, it went down
the environment chain to find 1,

145
00:08:30.796 --> 00:08:33.426
we incremented ++ global count,
which is 2.

146
00:08:33.426 --> 00:08:37.789
So in this lexical environment,
the increment value is 2,

147
00:08:37.789 --> 00:08:39.678
global constant also 2.

148
00:08:39.678 --> 00:08:42.456
But now, we call createCounter again,

149
00:08:42.456 --> 00:08:46.224
which means that we're
calling that function again.

150
00:08:46.224 --> 00:08:47.996
So we're creating a new
lexical environment,

151
00:08:47.996 --> 00:08:49.464
cuz this is a new function invocation.

152
00:08:49.464 --> 00:08:53.534
And in this case, globalCount is
just the default, it's 0 again.

153
00:08:53.534 --> 00:08:56.689
So now when we call it, it's 1,
cuz it's just that ++ 0,

154
00:08:56.689 --> 00:08:59.206
cuz globalCount was 0 by default,
which is 1.

155
00:08:59.206 --> 00:09:01.618
So on the third log, it just logs 1 again,

156
00:09:01.618 --> 00:09:06.125
cuz we're not pointing it to the same
lexical environment as the previous two.

157
00:09:06.125 --> 00:09:06.652
Does it make sense?

158
00:09:06.652 --> 00:09:11.802
So a function of vocation creates a new
lexical environment, and if that returns

159
00:09:11.802 --> 00:09:16.817
another function, it's a new function
object in a new lexical environment.

160
00:09:16.817 --> 00:09:19.159
Makes sense?

161
00:09:19.159 --> 00:09:22.753
Cool, yeah, as I said, what should
have actually happened here is that,

162
00:09:22.753 --> 00:09:24.237
cuz I'm returning an object,

163
00:09:24.237 --> 00:09:27.567
I'm just saying that now that has
the incrementCount as a property.

164
00:09:27.567 --> 00:09:31.674
So in between, or the counter should
have actually pointed to an object,

165
00:09:31.674 --> 00:09:34.531
which then pointed to the function object.

166
00:09:34.531 --> 00:09:39.171
But again, it doesn't change the output or
how this works, so we should be good.

167
00:09:40.727 --> 00:09:42.877
Is this comparison true or false?

168
00:09:42.877 --> 00:09:44.987
So we have the createUserManager function.

169
00:09:46.117 --> 00:09:47.830
We have a user of null,

170
00:09:47.830 --> 00:09:53.440
then you have a function that sets
a user to a new object, returns to user.

171
00:09:53.440 --> 00:09:56.338
And then we have a createUser
variable that is the return value of

172
00:09:56.338 --> 00:09:58.437
the createUserManager function.

173
00:09:58.437 --> 00:09:59.252
And then we say,

174
00:09:59.252 --> 00:10:03.109
okay, createUser John Doe is strictly
equal to another createUser John Doe.

175
00:10:03.109 --> 00:10:03.805
Is it true or false?

176
00:10:07.935 --> 00:10:11.213
&gt;&gt; Lydia: All right, and
the answer to this is it's false.

177
00:10:11.213 --> 00:10:16.453
It's not equal, cuz what we see here
is that we have createUser variable,

178
00:10:16.453 --> 00:10:21.460
which is equal to whatever gets
returned from the createUserManager.

179
00:10:21.460 --> 00:10:26.548
This didn't really fit on the screen,
but that returned an anonymous function.

180
00:10:26.548 --> 00:10:30.431
And in the createUserManager,
we have the letUser set to null, and

181
00:10:30.431 --> 00:10:35.557
the environment of that anonymous function
object points to that lexical environment.

182
00:10:35.557 --> 00:10:39.629
So createUserManager lexical
environment named John Doe,

183
00:10:39.629 --> 00:10:44.284
and within that function,
we set user equal to a new object.

184
00:10:44.284 --> 00:10:47.172
But since this is a new
lexical environment,

185
00:10:47.172 --> 00:10:51.504
we just create a new object in memory,
and that then gets returned.

186
00:10:51.504 --> 00:10:54.192
So createUser John Doe just returns
to that user object that we

187
00:10:54.192 --> 00:10:57.544
just created in that createUserManager
lexical environment.

188
00:10:57.544 --> 00:11:01.597
So that function,
it returned something so it's gone out,

189
00:11:01.597 --> 00:11:05.947
and then we call it again for
the other strict equal.

190
00:11:05.947 --> 00:11:07.756
And again, we create a new user here, and

191
00:11:07.756 --> 00:11:11.347
it doesn't know that we already created
another user object in the previous one.

192
00:11:11.347 --> 00:11:14.658
So it just creates a new
function object in

193
00:11:14.658 --> 00:11:18.452
the createUserManager lexical environment.

194
00:11:18.452 --> 00:11:23.583
And objects, when we're comparing objects,
we're actually comparing the references

195
00:11:23.583 --> 00:11:28.848
that they have in memory, and they both
have a different reference in memory.

196
00:11:28.848 --> 00:11:33.223
The first createUserFunction created a
different object in memory than the second

197
00:11:33.223 --> 00:11:36.108
createUserInvocation, so
that's why it's false.

198
00:11:37.398 --> 00:11:40.481
And that useStrict was
just to throw you off.

199
00:11:40.481 --> 00:11:44.450
Cuz normally, when we have useStrict
in functions or in the global scope,

200
00:11:44.450 --> 00:11:48.693
it'll say, you cannot use a variable
that we haven't defined yet.

201
00:11:48.693 --> 00:11:52.802
Like saying user in a global scope would
say, first, you have to actually declare

202
00:11:52.802 --> 00:11:55.811
that variable before you're able
to set anything equal to it.

203
00:11:55.811 --> 00:12:01.078
&gt;&gt; Speaker 3: If we were to console log,
createUser Jane Doe, and

204
00:12:01.078 --> 00:12:06.360
then create a John Doe and
then createUser John Doe.

205
00:12:06.360 --> 00:12:09.322
The difference would be
the time it's created,

206
00:12:09.322 --> 00:12:11.644
the created value will be different.

207
00:12:11.644 --> 00:12:14.854
&gt;&gt; Lydia: No, it's actually
a different object in memory.

208
00:12:16.354 --> 00:12:21.991
And when we're comparing objects, even
saying object = object, this is false.

209
00:12:21.991 --> 00:12:25.502
Cuz when we're creating an object, this
is a reference to a point in memory, and

210
00:12:25.502 --> 00:12:26.856
it's not the same reference.

211
00:12:26.856 --> 00:12:31.646
But when we did const object is equal,
and then we're saying object = object,

212
00:12:31.646 --> 00:12:35.090
that is equal,
cuz this is just one reference in memory.

213
00:12:35.090 --> 00:12:37.250
But yeah,
it's just creating a new object, so

214
00:12:37.250 --> 00:12:40.653
that's why we're essentially saying
object = object, which is false.

215
00:12:40.653 --> 00:12:44.454
&gt;&gt; Speaker 3: I asked that because on
line 6, there's also createdAt value.

216
00:12:44.454 --> 00:12:46.396
&gt;&gt; Lydia: Yeah, so it would have been,

217
00:12:46.396 --> 00:12:49.445
they would have had
different values anyway.

218
00:12:49.445 --> 00:12:53.887
So it would have been false anyway,
but even if it was the same.

219
00:12:53.887 --> 00:12:57.543
&gt;&gt; Speaker 3: And if it were the same,
it wouldn't matter.

220
00:12:57.543 --> 00:12:58.304
&gt;&gt; Lydia: Yeah.

221
00:12:58.304 --> 00:13:02.476
&gt;&gt; Speaker 3: Yeah, even if that value is
not there, even if it's just user's name.

222
00:13:02.476 --> 00:13:03.317
&gt;&gt; Lydia: Yeah, even this wouldn't be.

223
00:13:03.317 --> 00:13:04.094
&gt;&gt; Speaker 3: Yeah, yeah.

224
00:13:04.094 --> 00:13:07.997
&gt;&gt; Lydia: Yeah,
cuz we're creating it new, yeah.

225
00:13:10.602 --> 00:13:11.448
&gt;&gt; Lydia: All right.

226
00:13:13.750 --> 00:13:15.015
&gt;&gt; Lydia: Leave this as the next one.

227
00:13:16.235 --> 00:13:16.815
What gets logged?

228
00:13:16.815 --> 00:13:19.554
So it's pretty similar to the previous
one, but easier, I think.

229
00:13:19.554 --> 00:13:22.098
This one,
we have a createCounter function,

230
00:13:22.098 --> 00:13:25.032
which receives the initial
count parameter.

231
00:13:25.032 --> 00:13:27.325
Then we have a counter variable,
createCounter(10).

232
00:13:27.325 --> 00:13:31.452
We invoke counter twice and
then log it the third time.

233
00:13:31.452 --> 00:13:35.065
Is it 1, 11, 13, not a number,
or a reference error.

234
00:13:38.634 --> 00:13:42.475
&gt;&gt; Lydia: All right,
the right answer is C, 13.

235
00:13:42.475 --> 00:13:45.120
So in this case, it's pretty
similar to what we had last time.

236
00:13:45.120 --> 00:13:48.566
We have the counter variable that we
set equal to the function object that

237
00:13:48.566 --> 00:13:50.328
gets returned from createCounter.

238
00:13:50.328 --> 00:13:53.637
So in this case,
it's that kind of anonymous function.

239
00:13:53.637 --> 00:13:57.873
And then we have the count variable in
the lexical environment in the environment

240
00:13:57.873 --> 00:14:01.686
record of the lexical environment
of createCounter, so that's 10.

241
00:14:01.686 --> 00:14:07.661
And then we invoke counter twice, and
we use count in that returned function,

242
00:14:07.661 --> 00:14:11.113
which doesn't have its own count variable.

243
00:14:11.113 --> 00:14:13.918
So it goes down that environment
chain to find it and

244
00:14:13.918 --> 00:14:16.214
to create counter lexical environment.

245
00:14:16.214 --> 00:14:20.310
So that increments it and sets it equal or
that increments it by one.

246
00:14:20.310 --> 00:14:23.296
So we have 10, and then we have 11,

247
00:14:23.296 --> 00:14:27.734
and then we make it 11, sorry,
and then we make it 12.

248
00:14:27.734 --> 00:14:31.491
And then on the last one,
we actually log it, so not the first two,

249
00:14:31.491 --> 00:14:34.936
and then we increment it by one again,
so that makes it 13.

250
00:14:34.936 --> 00:14:39.391
So it keeps that same reference, it uses
that same count variable within that

251
00:14:39.391 --> 00:14:42.202
create count the counter
lexical environment,

252
00:14:42.202 --> 00:14:45.990
which is why it increments it based on or
after every invocation.

253
00:14:45.990 --> 00:14:46.530
That make sense?

254
00:14:46.530 --> 00:14:49.463
[LAUGH] I should have probably made
a little flow for this as well, but

255
00:14:49.463 --> 00:14:51.787
it's the same as we did last times,
but a bit easier.

256
00:14:53.407 --> 00:14:56.837
Okay, I think this is the last
question about this topic.

257
00:14:56.837 --> 00:14:57.997
So which statements are correct?

258
00:14:57.997 --> 00:15:00.677
Hoisting is the process
of moving functions and

259
00:15:00.677 --> 00:15:03.009
variables to the top of the file.

260
00:15:03.009 --> 00:15:06.099
Variables declared with let and
const are hoisted.

261
00:15:06.099 --> 00:15:09.811
Variables declared with the var
keyword are uninitialized.

262
00:15:09.811 --> 00:15:14.395
Hoisting occurs during the execution phase
and import declarations are hoisted.

263
00:15:18.580 --> 00:15:20.169
&gt;&gt; Lydia: The right answer here is B and
E.

264
00:15:20.169 --> 00:15:22.496
So variables declared with let and
const are hoisted and

265
00:15:22.496 --> 00:15:24.289
import declarations are hoisted as well.

266
00:15:25.329 --> 00:15:26.299
So let's see what that means.

267
00:15:26.299 --> 00:15:28.869
So whenever we run a script,
we actually have two phases.

268
00:15:28.869 --> 00:15:32.454
First, we have the creation phase in
which JavaScript sets up memory for

269
00:15:32.454 --> 00:15:34.519
everything that we have in our script.

270
00:15:34.519 --> 00:15:38.629
So first, it creates the sum,
it's a module lexical environment.

271
00:15:38.629 --> 00:15:43.806
I won't go too deep in
the module stuff right now.

272
00:15:43.806 --> 00:15:47.653
But it does create that and
we have the myFunc regular function.

273
00:15:47.653 --> 00:15:50.480
So in the object environment record that,
and

274
00:15:50.480 --> 00:15:54.697
it immediately creates that function
object for functions as well.

275
00:15:54.697 --> 00:15:58.417
Now for variables fine with the var
keyword, it also sets up memory with

276
00:15:58.417 --> 00:16:02.137
a default value of undefined Find but
then we have the const and let which

277
00:16:02.137 --> 00:16:06.353
you might know are they are still hoisted
meaning like we do set up memory space for

278
00:16:06.353 --> 00:16:09.143
them already but
we just don't initialize them yet,

279
00:16:09.143 --> 00:16:12.639
like they don't have that
default value of undefined.

280
00:16:12.639 --> 00:16:15.580
So age username and
also arrow function because it's

281
00:16:15.580 --> 00:16:19.580
still a const keyword are all
uninitialized during the creation phase.

282
00:16:19.580 --> 00:16:24.232
And then, we have the actual, execution
phase in which JavaScript goes one by one.

283
00:16:24.232 --> 00:16:28.660
So, okay age is 25, username is John,
email is email.com,

284
00:16:28.660 --> 00:16:32.857
and then arrow function is
that new function object.

285
00:16:32.857 --> 00:16:37.079
So, this is why we cannot, access age and
username before their declaration,

286
00:16:37.079 --> 00:16:41.238
because they are uninitialized, and
then you get that reference era with IK,

287
00:16:41.238 --> 00:16:45.280
you cannot access this on an uninitialized
value, but it does know that.

288
00:16:45.280 --> 00:16:48.088
All right, we do have age,
it's just not initialized yet and

289
00:16:48.088 --> 00:16:49.650
that's the hoisting part.

290
00:16:49.650 --> 00:16:51.181
So sometimes you'll see like,

291
00:16:51.181 --> 00:16:55.480
only variables with the var keyword
are hoisted or only functions are hoisted.

292
00:16:55.480 --> 00:16:58.250
And then some people say like,
they're moved to the top of their file.

293
00:16:58.250 --> 00:16:59.660
Wait, let me just show you.

294
00:16:59.660 --> 00:17:03.037
And that's just not like,
I think that just creates confusion.

295
00:17:04.887 --> 00:17:09.847
Like here, because it's not that, they
physically move to the top of the file.

296
00:17:09.847 --> 00:17:10.967
That's not what's happening.

297
00:17:10.967 --> 00:17:15.325
It's just that they are created in memory
with default values that we can use if

298
00:17:15.325 --> 00:17:18.695
it's a regular function declaration or
a fart keyword, but

299
00:17:18.695 --> 00:17:22.476
they're not like physically moved
to a different part of the file.

300
00:17:24.046 --> 00:17:28.276
Yeah, so same for modules, cuz that
module electrical environment is created.

301
00:17:28.276 --> 00:17:32.899
This is like that static part about like
ES modules where JavaScript can already

302
00:17:32.899 --> 00:17:34.986
analyze and even tree shake.

303
00:17:34.986 --> 00:17:38.930
So like analyze that code for
modules before that script even executes.

304
00:17:41.605 --> 00:17:42.314
&gt;&gt; Lydia: Yeah.

305
00:17:42.314 --> 00:17:45.777
&gt;&gt; Speaker 3: Does it mean if it's
even were on line 13 or whatever,

306
00:17:45.777 --> 00:17:49.644
it's already hosted
before the script is run?

307
00:17:49.644 --> 00:17:54.464
&gt;&gt; Lydia: Yeah, so now if we,
just gonna run this.

308
00:17:54.464 --> 00:17:59.724
So this is just logging some email
in my phone, so I'm going to MJS.

309
00:17:59.724 --> 00:18:02.682
So here's the function some
undefined on my phone, so

310
00:18:02.682 --> 00:18:06.792
this is before we even do that, but if I
were to do the same with age username,

311
00:18:06.792 --> 00:18:08.811
you will see that it throws an error.

312
00:18:08.811 --> 00:18:11.888
It cannot access age before
initialization, but it still knows age,

313
00:18:11.888 --> 00:18:14.201
like it just knows it hasn't
been initialized yet.

314
00:18:14.201 --> 00:18:15.761
So that's like the hoisting part.

315
00:18:15.761 --> 00:18:18.225
It's not that it doesn't have
any reference in memory.

316
00:18:18.225 --> 00:18:24.677
No, it does, but uninitialized, yeah.

317
00:18:24.677 --> 00:18:27.054
&gt;&gt; Speaker 2: How does
strict mode affect this?

318
00:18:29.064 --> 00:18:35.184
&gt;&gt; Lydia: Use strict
console lock on some email.

319
00:18:36.514 --> 00:18:39.284
Note and that's, that's fine.

320
00:18:39.284 --> 00:18:43.056
You just cannot like use,
a strip mall you cannot just say like.

321
00:18:43.056 --> 00:18:45.216
newName is Lydia.

322
00:18:45.216 --> 00:18:50.126
Then it'll say we cannot,
here, newName is not defined.

323
00:18:50.126 --> 00:18:51.824
But if I wasn't using use strict.

324
00:18:51.824 --> 00:18:52.859
Well, this is actually a module.

325
00:18:52.859 --> 00:18:57.759
[LAUGH] Modules are strict by default,
so I'm just gonna create a new one here,

326
00:18:57.759 --> 00:18:58.536
test.js.

327
00:18:58.536 --> 00:19:03.967
myName is Lydia,
note test.js, that's fine.

328
00:19:03.967 --> 00:19:04.917
I'm gonna log it.

329
00:19:06.097 --> 00:19:07.307
Live coding is so scary.

330
00:19:07.307 --> 00:19:09.827
I always forget how I use my fingers.

331
00:19:09.827 --> 00:19:11.357
Okay, so here my name is Lydia.

332
00:19:11.357 --> 00:19:16.361
But then we do use strict and
now it'll actually say like,

333
00:19:16.361 --> 00:19:18.827
complain reference error.

334
00:19:18.827 --> 00:19:19.687
My name is not defined.

335
00:19:19.687 --> 00:19:22.722
That's like the biggest difference
with use trick but again, also,

336
00:19:22.722 --> 00:19:27.062
if you're using modules, it'll do the same
thing cuz modules are strict by default.

337
00:19:27.062 --> 00:19:32.494
So if I have like my name, Lydia,
and I don't use use strict here,

338
00:19:32.494 --> 00:19:35.902
my name, it should throw the same error.

339
00:19:36.982 --> 00:19:41.961
It does, my name is not defined,
without using use strict, but modules, and

340
00:19:41.961 --> 00:19:46.714
it's the extension MJS, Module js,
it's strict by default, so just a,

341
00:19:46.714 --> 00:19:50.648
just an FYI, but
it shouldn't affect hoisting, so, okay.

342
00:19:50.648 --> 00:19:54.368
Very last question in that case, what
is the output if you run this code and

343
00:19:54.368 --> 00:19:55.928
orange is our favorite fruit.

344
00:19:57.028 --> 00:19:59.978
Is it orange with the actual
orange color in the terminal?

345
00:19:59.978 --> 00:20:04.615
Is it orange with that percentage see,
no color for you syntax error or

346
00:20:04.615 --> 00:20:08.074
orange, but
we're actually using the white text,

347
00:20:08.074 --> 00:20:12.567
which means that it's using the CSS
value from the top of the scope.

348
00:20:16.508 --> 00:20:19.127
&gt;&gt; Lydia: Right,
the right answer is syntax error.

349
00:20:19.127 --> 00:20:22.387
Because you can see that.

350
00:20:22.387 --> 00:20:24.387
We have a block scope with switch.

351
00:20:24.387 --> 00:20:28.137
But afterward,
we don't have any block and any brackets.

352
00:20:28.137 --> 00:20:32.378
Like case orange is just we have those
parentheses, but it's not an actual block,

353
00:20:32.378 --> 00:20:35.602
so we're redeclaring a variable
within the same block scope.

354
00:20:35.602 --> 00:20:39.769
That's not possible, but what we can do
is actually wrap this in brackets cuz now

355
00:20:39.769 --> 00:20:42.357
we're creating a new block scope for
every case.

356
00:20:42.357 --> 00:20:47.943
So now we can like if one throw
that syntax error, but luckily, I'm

357
00:20:47.943 --> 00:20:54.720
just going to show you VS code because it
actually show you this little, red line.

358
00:20:54.720 --> 00:20:58.830
If you can see it ever show concrete aura,
crease the font size here.

359
00:21:02.595 --> 00:21:06.980
Because this is without the brackets and
I'll actually tell you you cannot read

360
00:21:06.980 --> 00:21:10.711
Eclair the block scoped variable CSS,
because we have to here, but

361
00:21:10.711 --> 00:21:15.385
what we can do is just wrap this in
brackets and then it's all good.

362
00:21:15.385 --> 00:21:17.065
So that's that scope again,
same with here.

363
00:21:17.065 --> 00:21:20.255
Now it's fine because now we only have
one CSS in this switch block, right?

364
00:21:20.255 --> 00:21:22.375
Cuz these are the brackets here.

365
00:21:22.375 --> 00:21:28.677
So this is one scope, make sense?

366
00:21:28.677 --> 00:21:32.004
All right, that was the last question for
us, scope and closures.

