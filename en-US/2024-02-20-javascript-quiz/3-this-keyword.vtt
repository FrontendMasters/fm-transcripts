WEBVTT

1
00:00:00.530 --> 00:00:04.720
So the next category is another infamous
topic in JavaScript, this Keyword.

2
00:00:06.630 --> 00:00:10.190
So, the value of the this Keyword
depends on where we use it.

3
00:00:10.190 --> 00:00:14.584
In the global context, the value of
the this Keyword is the global object,

4
00:00:14.584 --> 00:00:19.774
provided that we aren't using useStrict,
so not strictMode or inModule.

5
00:00:19.774 --> 00:00:21.100
In a regular function,

6
00:00:21.100 --> 00:00:26.154
the value of the this Keyword is the
object on which the function is invoked.

7
00:00:26.154 --> 00:00:29.352
So here you see that we have object and
then logThis, and

8
00:00:29.352 --> 00:00:32.564
then first we just invoke
logThis on the window object.

9
00:00:32.564 --> 00:00:34.524
So in that case,
this points to the window.

10
00:00:34.524 --> 00:00:39.622
And the second one,
we invoke it on the object or the object.

11
00:00:39.622 --> 00:00:42.939
[LAUGH] So in that case, it points to that
object because that's the object on which

12
00:00:42.939 --> 00:00:44.102
that function was invoked.

13
00:00:45.482 --> 00:00:48.852
Then we have Arrow Functions and
they don't have their own this value.

14
00:00:48.852 --> 00:00:53.016
So the value of this Keyword in an arrow
function is determined by the lexical

15
00:00:53.016 --> 00:00:56.022
environment in which the arrow
function was defined.

16
00:00:57.122 --> 00:01:00.955
So in this case, we have that logThis
arrow function which It also logThis, but

17
00:01:00.955 --> 00:01:03.589
that error function was
defined on the global object,

18
00:01:03.589 --> 00:01:05.274
which in browsers is window.

19
00:01:05.274 --> 00:01:09.782
So even though we invoke it on the object,
that doesn't matter, it didn't matter for

20
00:01:09.782 --> 00:01:13.117
regular function, but for
arrow function, the value of this is

21
00:01:13.117 --> 00:01:18.144
the lexical environment in which the arrow
function was defined and not invoked.

22
00:01:18.144 --> 00:01:21.379
So that's just an important
difference to remember.

23
00:01:21.379 --> 00:01:22.965
Then, we have classes.

24
00:01:22.965 --> 00:01:27.232
So if we use this keyword in a constructor
function or any methods in a class,

25
00:01:27.232 --> 00:01:30.595
then it's the value of
the newly created instance.

26
00:01:30.595 --> 00:01:33.306
So in this case, we have two
instances of user1 and user2 and

27
00:01:33.306 --> 00:01:35.005
we invoke getThis on it.

28
00:01:35.005 --> 00:01:40.493
So that this keyword in user1 to
getThis points to that instance,

29
00:01:40.493 --> 00:01:45.597
you User1 and for user2,
it points to the instance user2.

30
00:01:45.597 --> 00:01:48.111
And then we have strict mode.

31
00:01:48.111 --> 00:01:49.696
So this is just similar
to what we just saw.

32
00:01:49.696 --> 00:01:54.065
So in that case, if we just invoke it, not
on an object, but just kind of standalone,

33
00:01:54.065 --> 00:01:56.756
it won't default to that
global object that we saw.

34
00:01:56.756 --> 00:02:00.227
So it won't be window, but
that in that case it'll be undefined.

35
00:02:00.227 --> 00:02:02.240
And the strict mode is also modules.

36
00:02:02.240 --> 00:02:05.324
So if you're using ESM,
this will be undefined.

37
00:02:07.377 --> 00:02:10.733
And event handlers.
This keyword is the element that received

38
00:02:10.733 --> 00:02:15.790
the events in case you're using
a regular function which we are here.

39
00:02:15.790 --> 00:02:20.477
And then we can use either oops,
sorry, call, bind, or apply.

40
00:02:20.477 --> 00:02:23.850
And that allows us to kind of
explicitly tell JavaScript like, hey,

41
00:02:23.850 --> 00:02:26.437
this is what this keyword should point to.

42
00:02:26.437 --> 00:02:30.147
So with call, it calls that
function with a given this value.

43
00:02:30.147 --> 00:02:32.360
So in the first one,
we say, greet.call and

44
00:02:32.360 --> 00:02:35.227
make sure that this points to
the object that we pass to it.

45
00:02:35.227 --> 00:02:37.027
So it's the object with the username John.

46
00:02:38.027 --> 00:02:42.467
Then we have greet.bind, which creates
a new function, so it doesn't invoke yet,

47
00:02:42.467 --> 00:02:46.167
it just creates a new function objection
with a specified this value and

48
00:02:46.167 --> 00:02:50.130
also optional initial arguments if you
want, but we don't have that here.

49
00:02:51.930 --> 00:02:55.235
So again, we have that object
with (username: "John" ), and

50
00:02:55.235 --> 00:02:57.123
applies pretty much the same as call,

51
00:02:57.123 --> 00:03:01.272
but we can actually pass in array instead
of just a single object for the arguments.

52
00:03:01.272 --> 00:03:03.642
So in this case, that's text.

53
00:03:03.642 --> 00:03:06.622
So text will be, hi there,
instead of welcome.

54
00:03:08.812 --> 00:03:12.140
All right, so this is different
in just like this keyword,

55
00:03:12.140 --> 00:03:14.682
there's not one single explanation for it.

56
00:03:14.682 --> 00:03:17.766
It really depends on how
you're using the this keyword,

57
00:03:17.766 --> 00:03:21.057
which is obviously what I'll
be creating questions about.

58
00:03:21.057 --> 00:03:23.412
So question 11, what gets logged?

59
00:03:23.412 --> 00:03:26.242
So we have a regular function logThis.

60
00:03:26.242 --> 00:03:30.240
Then we have an object that
contains the logThis property.

61
00:03:30.240 --> 00:03:34.558
A logThis two method that returns
a logThis invocation, and

62
00:03:34.558 --> 00:03:39.952
then a logThis three method that
returns the object logThis invocation.

63
00:03:39.952 --> 00:03:45.510
So Well this lock object window Object
Object Object Object window object object.

64
00:03:45.510 --> 00:03:48.080
[LAUGH] We know that objects
are three times window.

65
00:03:51.554 --> 00:03:54.127
So just keep in mind we are working
with regular functions and

66
00:03:54.127 --> 00:03:56.809
there's just one thing that you
have to remember in that case.

67
00:03:56.809 --> 00:04:03.042
[LAUGH] All right,

68
00:04:03.042 --> 00:04:06.785
and the right answer is A,
it's object window object.

69
00:04:07.865 --> 00:04:11.415
So first we call or
we call logThis on object.

70
00:04:11.415 --> 00:04:13.377
And again, it's a regular function, so

71
00:04:13.377 --> 00:04:17.033
it depends on the object that calls
the function, in this case it's object.

72
00:04:17.033 --> 00:04:22.201
Cuz even though it is a property, so we're
setting the logThis property on objects.

73
00:04:22.201 --> 00:04:24.538
Well we're not calling
logThis in that method,

74
00:04:24.538 --> 00:04:26.534
it's just a reference to that function.

75
00:04:26.534 --> 00:04:31.002
So we're calling logThis on object,
it's a regular function so

76
00:04:31.002 --> 00:04:32.960
this points to that object.

77
00:04:32.960 --> 00:04:36.874
Then we have logThis2, and we
are calling that function on object, but

78
00:04:36.874 --> 00:04:40.225
within that function we're
just calling it independently.

79
00:04:40.225 --> 00:04:44.005
We're not saying like object.logThis,
it's just It's just logThis.

80
00:04:44.005 --> 00:04:47.688
So in that case, it defaults back
to that global, global this,

81
00:04:47.688 --> 00:04:51.045
which in this case is window if
we are using it in a browser.

82
00:04:52.915 --> 00:04:58.395
And then with logThis3, yeah,
we are invoking that logThis3 on object.

83
00:04:58.395 --> 00:05:04.027
That doesn't matter, but within logThis3,
we are calling logThis on object.

84
00:05:04.027 --> 00:05:08.624
So again that this keyword will
point to the object on which that

85
00:05:08.624 --> 00:05:12.103
method was invoked, so
that's object again.

86
00:05:12.103 --> 00:05:12.918
Make sense?

87
00:05:12.918 --> 00:05:16.653
Perfect, in that case we
go to the next question.

88
00:05:16.653 --> 00:05:21.904
I forgot that I had all this which
is pretty similar but Question 12,

89
00:05:21.904 --> 00:05:26.691
what will the this keyword refer to for
each invocation?

90
00:05:26.691 --> 00:05:30.751
So we have object8 with a regular foo
method and an arrow function bar.

91
00:05:30.751 --> 00:05:34.781
Then we have object b with foo
that points to object a.foo.

92
00:05:34.781 --> 00:05:40.241
We're not invoking it, we're just creating
a reference to that same function object.

93
00:05:40.241 --> 00:05:45.175
We have a bar that's an arrow function,
and a regular boz, baz,

94
00:05:45.175 --> 00:05:48.901
whatever function that
invokes objectA.foo.

95
00:05:48.901 --> 00:05:53.372
And then what we're
logging is objectB.foo,

96
00:05:53.372 --> 00:05:57.971
objectB.bar, and objectB.baz, whatever.

97
00:05:57.971 --> 00:06:02.885
So yeah, so only objectA,
three times objectB,

98
00:06:02.885 --> 00:06:05.934
or we'll bar point to Window?

99
00:06:09.237 --> 00:06:15.761
All right, so the right answer here is E,
it's object B window object A.

100
00:06:17.771 --> 00:06:22.170
So first we're invoking foo on object B,
and foo points to a reference to

101
00:06:22.170 --> 00:06:26.802
objectA.foo, but again we're not
invoking it on the objectB foo method.

102
00:06:26.802 --> 00:06:31.123
We're just kind of like creating
a reference to the same function object,

103
00:06:31.123 --> 00:06:35.185
the same that we just saw, but
we're invoking it on objectB, right?

104
00:06:35.185 --> 00:06:38.061
We're creating that lexical
environment for objectB.

105
00:06:38.061 --> 00:06:41.556
And it's a regular function, so
this points to the object that invoked it,

106
00:06:41.556 --> 00:06:44.301
doesn't matter where it was Create it,
so it's object b.

107
00:06:46.041 --> 00:06:46.631
Does it go down?

108
00:06:46.631 --> 00:06:51.131
And then we have object b.bar,
which is an arrow function.

109
00:06:51.131 --> 00:06:55.441
So now on bar, we are invoking object
a.bar, which is also an arrow function.

110
00:06:55.441 --> 00:06:56.767
So it doesn't matter where it is,

111
00:06:56.767 --> 00:06:59.901
we don't care about the object that
invoked it because it's an arrow function.

112
00:06:59.901 --> 00:07:04.600
So it's just about the lexical
environment in which it was defined,

113
00:07:04.600 --> 00:07:07.916
which in this case case
is the window object.

114
00:07:07.916 --> 00:07:12.185
And then here we invoke object B,
Bas, whatever.

115
00:07:12.185 --> 00:07:15.172
And then that one invokes objecta.foo.

116
00:07:15.172 --> 00:07:16.422
And that's all we care about.

117
00:07:16.422 --> 00:07:19.655
We care about the invocation of foo and
that's on the object A,

118
00:07:19.655 --> 00:07:22.522
because this is a regular method and
that logs at this and

119
00:07:22.522 --> 00:07:25.281
we invoked in an object A,
so this points to object A.

120
00:07:25.281 --> 00:07:28.975
Makes sense?

121
00:07:28.975 --> 00:07:33.764
Any questions?

122
00:07:33.764 --> 00:07:38.259
Perfect, yes, you're not done with
this yet, because question 13,

123
00:07:38.259 --> 00:07:39.427
what gets logged?

124
00:07:39.427 --> 00:07:41.257
We again have the regular
logThis function.

125
00:07:41.257 --> 00:07:44.084
We have obj1,
that's going to reference to logThis.

126
00:07:44.084 --> 00:07:48.851
We have bar that's an arrow function
that invokes it as a regular function.

127
00:07:48.851 --> 00:07:53.663
We have bars, we have trucks, [LAUGH] And
then we have logThis.call, then really

128
00:07:53.663 --> 00:07:59.131
all we're doing is we're creating a new
object2, we're spreading object1.

129
00:07:59.131 --> 00:08:03.514
And then we also add a new foo2 method
that is an arrow function that invokes

130
00:08:03.514 --> 00:08:07.078
object1 foo, which is that
logThis reference to logThis.

131
00:08:07.078 --> 00:08:10.071
And that for
in loop doesn't matter too much,

132
00:08:10.071 --> 00:08:14.920
all we're doing here is we're only
invoking the properties in object2.

133
00:08:14.920 --> 00:08:19.878
So what would that log would it be only
window yeah I'm not gonna say all of them,

134
00:08:19.878 --> 00:08:24.029
but just imagine we're invoking
all the properties in object2.

135
00:08:24.029 --> 00:08:28.515
Which is pretty much all the properties
in object1 plus that foo2 method.

136
00:08:28.515 --> 00:08:30.291
&gt;&gt; Someone in chat just said,
my brain hurts.

137
00:08:30.291 --> 00:08:32.073
[LAUGH]
&gt;&gt; Yeah, mine too.

138
00:08:32.073 --> 00:08:38.619
[LAUGH] All righty, so
the right answer is C.

139
00:08:38.619 --> 00:08:44.230
It's object2, window, window,
object2, and object1.

140
00:08:44.230 --> 00:08:45.177
So first, so

141
00:08:45.177 --> 00:08:50.357
this is essentially the object2
object that we just created, right?

142
00:08:50.357 --> 00:08:53.687
So we copy the properties from object1 and
then we added a foo2 method.

143
00:08:53.687 --> 00:08:55.317
This is just how I like to visualize it.

144
00:08:56.317 --> 00:08:59.406
Someone calling foo,
we're calling logThis, but

145
00:08:59.406 --> 00:09:02.948
that's just a reference to
the logThis function object.

146
00:09:02.948 --> 00:09:04.419
So we're calling it an object2.

147
00:09:04.419 --> 00:09:05.558
It's a regular function.

148
00:09:05.558 --> 00:09:08.278
So this points to object2.

149
00:09:08.278 --> 00:09:10.669
Then bar is in an arrow function and

150
00:09:10.669 --> 00:09:16.118
that doesn't matter because we're
invoking it within that arrow function.

151
00:09:16.118 --> 00:09:18.158
We're not invoking it
on a specific object.

152
00:09:18.158 --> 00:09:22.919
And that's all that this cares about is
where was this regular function invoked.

153
00:09:22.919 --> 00:09:25.829
Nowhere, so
it defaults to the global this, so window.

154
00:09:27.009 --> 00:09:28.399
Same for the next method.

155
00:09:28.399 --> 00:09:30.509
We're invoking it kind
of just stand alone.

156
00:09:30.509 --> 00:09:35.459
So it, again,
just points to window, global this.

157
00:09:35.459 --> 00:09:40.342
And then the next method, we're calling
logThis, or we're using logThis, and

158
00:09:40.342 --> 00:09:42.060
we're using .call.

159
00:09:42.060 --> 00:09:46.762
And as you remember we can use .call
to automatically invoke a function with

160
00:09:46.762 --> 00:09:49.180
a specified this method.

161
00:09:49.180 --> 00:09:54.160
And, in this case we are calling
the regular function Clarks on object2.

162
00:09:54.160 --> 00:10:00.540
So in that case we are saying, this refers
to this of that of the Coax method.

163
00:10:00.540 --> 00:10:03.036
We call that as a regular
function on object2.

164
00:10:03.036 --> 00:10:06.324
So within that environment,
within that lexical environment,

165
00:10:06.324 --> 00:10:07.646
this points to object2.

166
00:10:08.856 --> 00:10:13.268
And so that means that if we're using
this Keyword within the Cux method,

167
00:10:13.268 --> 00:10:17.253
it points to object2, and
we're using that one to call logThis,

168
00:10:17.253 --> 00:10:19.676
with the specified this value.

169
00:10:19.676 --> 00:10:20.486
So that's object2.

170
00:10:20.486 --> 00:10:23.927
Hope that made some sense.

171
00:10:25.317 --> 00:10:27.447
Because, I'll show you in a second.

172
00:10:27.447 --> 00:10:31.377
And then the last one foo2,
we are calling foo2 on object1.

173
00:10:31.377 --> 00:10:34.037
So we're calling a regular
function on an object.

174
00:10:34.037 --> 00:10:39.536
So that just points to the object
that invoked it, object1.

175
00:10:39.536 --> 00:10:42.384
Makes sense somewhat?

176
00:10:44.076 --> 00:10:45.286
Good.

177
00:10:48.558 --> 00:10:51.674
I think this is the last one, I hope.

178
00:10:51.674 --> 00:10:56.504
So we have the regular logThis again,
we have logThis, we have logThis in arrow,

179
00:10:56.504 --> 00:10:57.974
we have logThis nested.

180
00:10:59.424 --> 00:11:02.125
And we're invoking logThis,
logThis in arrow, and logThis nested.

181
00:11:02.125 --> 00:11:02.700
What gets logged?

182
00:11:06.886 --> 00:11:11.120
And the right answer to this one is A,
its object, window, object.

183
00:11:13.350 --> 00:11:16.110
So first, what we have is we can
have that regular logThis method.

184
00:11:16.110 --> 00:11:18.590
We're not calling it it's just
a reference to the function object.

185
00:11:18.590 --> 00:11:20.030
So we're calling it on object.

186
00:11:20.030 --> 00:11:23.303
Object is what creates the lexical
environment for the function.

187
00:11:23.303 --> 00:11:26.133
So in that case, this points to object.

188
00:11:26.133 --> 00:11:27.743
Then we call logThisInArrow.

189
00:11:27.743 --> 00:11:29.733
We're calling it on object,
but it's an arrow function.

190
00:11:29.733 --> 00:11:31.313
We don't care who calls it.

191
00:11:31.313 --> 00:11:33.867
With an arrow function,
we care about where it's defined, or

192
00:11:33.867 --> 00:11:36.303
the lexical environment
in which it's defined.

193
00:11:36.303 --> 00:11:38.683
And in this case,
the lexical environment is window.

194
00:11:39.833 --> 00:11:41.903
So this points to window for
logThisInArrow.

195
00:11:43.033 --> 00:11:47.113
Now we have locked this nested, logThis
nested itself is a regular function.

196
00:11:47.113 --> 00:11:52.070
So within that entire function body
this points to object because we call it

197
00:11:52.070 --> 00:11:57.193
an object, but then the nested function
loThis and it's an arrow function.

198
00:11:57.193 --> 00:12:00.356
So in that case, this points to
the lexical environment in which it was

199
00:12:00.356 --> 00:12:04.017
defined, which in this case is
the environment of logThis nested.

200
00:12:04.017 --> 00:12:07.027
So there, this points to object
because that's a regular method.

201
00:12:07.027 --> 00:12:11.172
And we're using the this value of
logThis nested within nested function,

202
00:12:11.172 --> 00:12:14.717
because it just goes down
that environment chain.

203
00:12:14.717 --> 00:12:16.547
So I'm calling that and points to object.

204
00:12:18.627 --> 00:12:19.687
I hope that makes some sense.

205
00:12:19.687 --> 00:12:23.198
So if we were to call console
log on the line before,

206
00:12:23.198 --> 00:12:26.627
const nestedFunc,
it would have logged object,

207
00:12:26.627 --> 00:12:31.466
cuz that's just what this points to
in that regular method on object.

208
00:12:31.466 --> 00:12:36.071
And we're pretty much just reusing
that same this reference in that arrow

209
00:12:36.071 --> 00:12:38.901
function, which is why
it points to object.

210
00:12:41.411 --> 00:12:42.073
Make sense?

211
00:12:42.073 --> 00:12:45.067
[LAUGH]
&gt;&gt; Why is it that even though it's it's

212
00:12:45.067 --> 00:12:50.820
an arrow function that it doesn't,
&gt;&gt; Because with

213
00:12:50.820 --> 00:12:54.200
arrow function this points to the lexical
environment in which it was defined.

214
00:12:54.200 --> 00:12:58.063
And in this case this nested func
function was defined within the lexical

215
00:12:58.063 --> 00:12:59.910
environments of logThis nested.

216
00:13:02.512 --> 00:13:07.503
It's really just the function object of
arrow functions doesn't have its own dis

217
00:13:07.503 --> 00:13:12.925
value, but the function object of regular
functions does have its own dis value.

218
00:13:12.925 --> 00:13:15.045
So when we try to access
this in an arrow function,

219
00:13:15.045 --> 00:13:17.915
it's like,
I can't find it on my own function object.

220
00:13:17.915 --> 00:13:22.167
So I'll go down the environment chain,
what we just saw previously, and there

221
00:13:22.167 --> 00:13:27.150
it does have it in it's environment record
for the environment that it points to.

222
00:13:27.150 --> 00:13:30.930
Just keep in mind that this keyword is
always different depending on what it

223
00:13:30.930 --> 00:13:35.379
like, are we calling regular function and
arrow function to class, an event handler.

224
00:13:35.379 --> 00:13:40.190
And then how are we calling
it who was calling it?

225
00:13:40.190 --> 00:13:43.200
Anyway, okay, this is the last one.

226
00:13:43.200 --> 00:13:46.470
Surely this is the last
one what one second.

227
00:13:47.640 --> 00:13:51.650
It is yes,
okay the very last this this question.

228
00:13:51.650 --> 00:13:55.413
So we began we have object with logThis,
logThis, logThis2,

229
00:13:55.413 --> 00:13:58.492
regular function with
logThis enter that logThis.

230
00:13:58.492 --> 00:14:03.043
And we have logThis enter with apply,
and then we have logThis and

231
00:14:03.043 --> 00:14:06.858
logThis3 that we deconstruct from object.

232
00:14:06.858 --> 00:14:11.068
We call logThis and
logThis2 on the window object.

233
00:14:11.068 --> 00:14:15.228
And then we have logThis and
logThis2 on the object, object.

234
00:14:16.988 --> 00:14:18.038
So what would it log?

235
00:14:18.038 --> 00:14:20.298
Would it be four times Window?

236
00:14:20.298 --> 00:14:21.408
Window object, window object.

237
00:14:22.638 --> 00:14:23.503
You can read the rest.

238
00:14:27.856 --> 00:14:31.334
All right, so the right answer is E.

239
00:14:31.334 --> 00:14:33.844
It's window, window, object, object.

240
00:14:35.404 --> 00:14:38.164
So first, we're calling logThis.

241
00:14:38.164 --> 00:14:39.124
It's a regular function again.

242
00:14:39.124 --> 00:14:43.336
So we're calling logThis that we just
deconstructed on the window object.

243
00:14:43.336 --> 00:14:47.290
It doesn't matter that it was defined on
object and that we then deconstructed it,

244
00:14:47.290 --> 00:14:50.946
doesn't matter because we're invoking
it on the global object on window.

245
00:14:50.946 --> 00:14:52.500
So this points to Window.

246
00:14:52.500 --> 00:14:55.953
Same for this too,
well in that case we return apply, so

247
00:14:55.953 --> 00:15:00.886
it calls that function with a specified
object that this should point to.

248
00:15:00.886 --> 00:15:04.958
But within logThis, this points
to the object that invoked it, so

249
00:15:04.958 --> 00:15:06.714
the window object.

250
00:15:06.714 --> 00:15:07.684
So that's still window.

251
00:15:09.004 --> 00:15:12.864
And then the same applies to the other
two calls on object logThis.

252
00:15:12.864 --> 00:15:16.077
Well in that case we're calling out
an object, it's a regular method, so

253
00:15:16.077 --> 00:15:18.834
this points to the object
that called it object.

254
00:15:18.834 --> 00:15:23.526
And with logThis, this keyword within
logThis2 points to the object.

255
00:15:23.526 --> 00:15:27.469
If we use that value to like
apply that to logThis inner.

256
00:15:27.469 --> 00:15:32.989
So we're saying all right, that object
that this should point to in logThis inner

257
00:15:32.989 --> 00:15:38.434
is the same this as the logThis2 which
is object because that's what called it.

258
00:15:39.891 --> 00:15:42.727
Yes, what?

259
00:15:42.727 --> 00:15:46.698
&gt;&gt; Could you review one
more time how .this and

260
00:15:46.698 --> 00:15:50.992
.then get evaluated under
a named function and

261
00:15:50.992 --> 00:15:55.293
an object as opposed to
an anonymous function?

262
00:15:55.293 --> 00:15:57.584
&gt;&gt; This and then, wait, sorry.

263
00:15:57.584 --> 00:16:01.519
Could you, I'm gonna just show in.

264
00:16:05.163 --> 00:16:07.813
Well, it doesn't matter if it's
an anonymous function or not.

265
00:16:07.813 --> 00:16:10.173
It matters if it's an arrow function or
regular function.

266
00:16:10.173 --> 00:16:15.809
I'm not sure if that's the question.

267
00:16:15.809 --> 00:16:21.311
If this was logThis arrow, then it doesn't

268
00:16:21.311 --> 00:16:26.513
matter if we're calling it as an object,

269
00:16:26.513 --> 00:16:30.930
because it's an arrow function.

270
00:16:30.930 --> 00:16:33.080
They don't care about who called it.

271
00:16:33.080 --> 00:16:35.200
They only care about where it's defined.

272
00:16:35.200 --> 00:16:37.670
Now, of course, an object itself
doesn't have a lexical environment.

273
00:16:37.670 --> 00:16:42.179
The lexical environment is the global
lexical environment that we just saw with

274
00:16:42.179 --> 00:16:43.400
closures and stuff.

275
00:16:45.300 --> 00:16:50.115
Object is just, in that case,
a property on the declarative record, and

276
00:16:50.115 --> 00:16:53.468
that contains a reference
to the function object.

277
00:16:53.468 --> 00:16:58.682
An arrow function object, which doesn't
have its own this value, so it needs

278
00:16:58.682 --> 00:17:03.660
to get the this value from the lexical
environment, which in this case is.

279
00:17:03.660 --> 00:17:08.557
So global this global this does which
is essentially the same as like this

280
00:17:08.557 --> 00:17:09.533
global this.

281
00:17:09.533 --> 00:17:14.407
It just goes down the environment chain,
if that makes sense.

