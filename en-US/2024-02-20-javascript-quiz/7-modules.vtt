WEBVTT

1
00:00:00.000 --> 00:00:02.384
Well, now we can talk a bit about modules.

2
00:00:02.384 --> 00:00:03.068
In that case,

3
00:00:03.068 --> 00:00:06.620
match each module loading mechanism
with its correct characteristics.

4
00:00:06.620 --> 00:00:09.547
So we have CommonJS, AMD, UMD, and ESM, or

5
00:00:09.547 --> 00:00:14.670
asynchronous module definition and
universal module definition.

6
00:00:14.670 --> 00:00:17.766
And then either focuses on
client-side asynchronous loading,

7
00:00:17.766 --> 00:00:21.211
allowing modules to be fetched and
executed in a non-blocking manner.

8
00:00:21.211 --> 00:00:22.766
Supports various environments,

9
00:00:22.766 --> 00:00:25.184
accommodating both server and
client-side usage.

10
00:00:25.184 --> 00:00:30.277
Used mainly in server side contexts, and
this approach loads module sequentially.

11
00:00:30.277 --> 00:00:33.664
Or uses static syntax for
imports and exports.

12
00:00:37.987 --> 00:00:42.177
So the right answer here is CommonJS
is used mainly in server-side contexts,

13
00:00:42.177 --> 00:00:44.982
this approach loads module sequentially.

14
00:00:44.982 --> 00:00:47.373
AMD focuses on client-side
asynchronous loading,

15
00:00:47.373 --> 00:00:50.672
allowing modules to be fetched and
executed in a non-blocking manner.

16
00:00:50.672 --> 00:00:55.952
UMD supports various environments, and ESM
uses static syntax for imports, exports.

17
00:00:55.952 --> 00:00:58.777
So CommonJS, you're probably used
to it if you are using node.

18
00:00:58.777 --> 00:01:01.759
It is with require modules, exports.

19
00:01:01.759 --> 00:01:06.660
The modules are loaded synchronously
when we use require, typically,

20
00:01:06.660 --> 00:01:08.115
used on server side.

21
00:01:08.115 --> 00:01:09.961
Yeah, we can mainly use it in Node.js.

22
00:01:09.961 --> 00:01:13.575
If you're running this in the browser, it
won't work, so that requires bundling and

23
00:01:13.575 --> 00:01:14.326
transpilation.

24
00:01:14.326 --> 00:01:18.091
And because it is synchronous,
it can cause performance issues,

25
00:01:18.091 --> 00:01:20.589
if you know you're loading large modules.

26
00:01:21.599 --> 00:01:25.589
Then we have AMD, and yeah,
so whenever you see define or

27
00:01:25.589 --> 00:01:30.679
require like this, you know that
you're using asynchronous loading.

28
00:01:30.679 --> 00:01:34.325
This is mainly only used in browsers.

29
00:01:34.325 --> 00:01:38.179
Yeah, you can't really use it in Node.js,
also doesn't really make sense to do that.

30
00:01:39.268 --> 00:01:42.087
Then we have universal module definition,
and

31
00:01:42.087 --> 00:01:44.768
this works both client side and
server side.

32
00:01:44.768 --> 00:01:49.399
So if you're a library author or
if you are working with legacy systems and

33
00:01:49.399 --> 00:01:53.899
you gotta support a lot of environments,
then you might wanna use UMD.

34
00:01:53.899 --> 00:01:56.958
But honestly, lately,
you won't see too much.

35
00:01:56.958 --> 00:01:59.942
This essentially says like, all right,

36
00:01:59.942 --> 00:02:04.781
if define exists that we just saw
with AMD, then just load AMD.

37
00:02:04.781 --> 00:02:09.266
And otherwise, if we have module, then,
we're running that in CommonJS in node, so

38
00:02:09.266 --> 00:02:12.421
then use module that exports,
all that stuff.

39
00:02:12.421 --> 00:02:16.394
But as you can see, it can easily lead
to larger file sizes because we have to

40
00:02:16.394 --> 00:02:20.263
support multiple environments, so
it's not always perfect but yeah.

41
00:02:21.433 --> 00:02:27.063
And then we have ESM, which you're
probably used to with imports, exports.

42
00:02:27.063 --> 00:02:31.183
So this also allows for static analysis,
tree shaking and more efficient bundling.

43
00:02:31.183 --> 00:02:34.615
This is all new and
the new module environment in JavaScript,

44
00:02:34.615 --> 00:02:39.235
cuz it allows JavaScript to analyze the
import without having to execute the file,

45
00:02:39.235 --> 00:02:41.559
and this was a bigger issue with require.

46
00:02:41.559 --> 00:02:46.174
We couldn't tree shake any code
cuz we only loaded the code with

47
00:02:46.174 --> 00:02:50.348
require once it actually
reached that line.

48
00:02:50.348 --> 00:02:53.450
But now with ESM,
JavaScript can be like, all right, well,

49
00:02:53.450 --> 00:02:57.283
I know that I'm not using certain parts
of the code, so we can tree shake it.

50
00:02:57.283 --> 00:03:01.573
We can remove dead code without having to
actually run that file before doing so.

51
00:03:03.103 --> 00:03:07.246
But this is not supported by all
browsers yet, so in some cases,

52
00:03:07.246 --> 00:03:12.254
you still have to bundle it, transpilate
to work in your browser, but yeah.

53
00:03:15.886 --> 00:03:18.765
Then there's question 32.

54
00:03:18.765 --> 00:03:20.675
Put the logs in the correct order.

55
00:03:20.675 --> 00:03:24.645
So this is a file that uses
both require and import, so

56
00:03:24.645 --> 00:03:27.303
it uses both CommonJS and modules.

57
00:03:27.303 --> 00:03:32.097
We have file1.js, so
that's a regular one that logs file1.

58
00:03:32.097 --> 00:03:35.687
We have file2.mjs, so
it's a module that logs file2.

59
00:03:35.687 --> 00:03:42.528
Then we have file3 which has a top
level await and a set timeout in there.

60
00:03:42.528 --> 00:03:46.979
File4 is also a module and
then file5 is a regular CommonJS module.

61
00:03:48.429 --> 00:03:53.801
So in what order will the logs
be when we execute this script?

62
00:03:53.801 --> 00:03:57.283
So you don't really have to look at or
create require or like that require,

63
00:03:57.283 --> 00:04:00.325
I'm just using that cuz I'm
assuming that this index.js file on

64
00:04:00.325 --> 00:04:02.310
the left-hand side is like index.mjs.

65
00:04:02.310 --> 00:04:05.749
So in that case, to use require,
we have to load it from module,

66
00:04:05.749 --> 00:04:10.370
but that's not really part of the question
per se, but just for technical accuracy.

67
00:04:14.300 --> 00:04:20.195
All right, and the right answer here
is file2, file3, file1, file5, file4.

68
00:04:20.195 --> 00:04:25.074
So the easiest way to show
this is through code.

69
00:04:25.074 --> 00:04:26.452
I think this is the only one I have.

70
00:04:26.452 --> 00:04:31.792
Wait, I'm just gonna remove this one,
new terminal.

71
00:04:34.162 --> 00:04:36.502
All right, so actually,
I'm just gonna keep using this.

72
00:04:36.502 --> 00:04:38.493
So here,
we have the same file that I just showed.

73
00:04:38.493 --> 00:04:41.713
So when we run this index.mjs, yeah,

74
00:04:41.713 --> 00:04:46.686
you'll see that file2 gets locked first,
then 3, 1, 5, 4.

75
00:04:46.686 --> 00:04:51.169
So I just added a kind of a longer timeout
here, cuz in the example, it was zero.

76
00:04:51.169 --> 00:04:53.409
In which case, it'll lock a lot quicker.

77
00:04:53.409 --> 00:04:57.339
But we're using a top level await here,
and this essentially blocks all module

78
00:04:57.339 --> 00:05:01.373
loading like how the module graph
works until this promise has resolved.

79
00:05:01.373 --> 00:05:04.318
So as you can see,
when I added the one second timeout,

80
00:05:04.318 --> 00:05:07.883
it has file2 and
only then will it load everything else.

81
00:05:07.883 --> 00:05:12.276
So this is kind of something to keep in
mind when you're using a top level await,

82
00:05:12.276 --> 00:05:15.633
cuz this is just a regular
import statement.

83
00:05:15.633 --> 00:05:21.687
But more than that, so this kinda goes
back to that hoisting thing again.

84
00:05:21.687 --> 00:05:25.657
So the imports kind of get hoisted, so
you can kind of see it as like this.

85
00:05:25.657 --> 00:05:29.838
They don't actually physically get moved
to the top of the file, but whenever we're

86
00:05:29.838 --> 00:05:33.381
using an import statement, JavaScript
will already kind of execute and

87
00:05:33.381 --> 00:05:36.197
analyze them before
the file is actually run.

88
00:05:36.197 --> 00:05:38.955
So that's only with the import
statements here, so file2 and

89
00:05:38.955 --> 00:05:41.681
file3 get loaded first
cuz they have the import.

90
00:05:41.681 --> 00:05:43.743
And then we have require, and

91
00:05:43.743 --> 00:05:47.631
this just gets loaded as it
actually reaches that line.

92
00:05:47.631 --> 00:05:48.951
We're like, this doesn't get hoisted.

93
00:05:50.811 --> 00:05:53.861
So this is the third one, or file1.

94
00:05:53.861 --> 00:05:58.017
Then we call the get module, and
then we're using non-import statement, but

95
00:05:58.017 --> 00:06:01.254
like a dynamic import function,
and this returns a promise.

96
00:06:03.054 --> 00:06:07.994
This returns a promise, so
this gets added to the event like that,

97
00:06:07.994 --> 00:06:10.478
but the require is synchronous.

98
00:06:10.478 --> 00:06:13.844
So this still gets, or this gets,
[LAUGH] look, first I'm so

99
00:06:13.844 --> 00:06:15.964
bad at explaining how a module loads.

100
00:06:15.964 --> 00:06:18.901
But require is synchronous, so
this gets loaded first, and

101
00:06:18.901 --> 00:06:22.942
then we have this import registerpromise
so that gets resolved last.

102
00:06:22.942 --> 00:06:29.225
Now, if I made this the promise,
so I'm using the dynamic import.

103
00:06:29.225 --> 00:06:33.982
You can see that it's much better, cuz we
have that time out here with the await.

104
00:06:33.982 --> 00:06:37.876
Just imagine that this is maybe a database
connection that we wanna set up, and

105
00:06:37.876 --> 00:06:39.176
it just takes a long time.

106
00:06:39.176 --> 00:06:42.789
In that case, you might just wanna
use the dynamic import instead.

107
00:06:42.789 --> 00:06:46.971
And this is also good cuz we are usually
using imports in a browser environment.

108
00:06:46.971 --> 00:06:50.055
And in which case,
it actually makes a network request, so

109
00:06:50.055 --> 00:06:51.607
that has to be asynchronous.

110
00:06:51.607 --> 00:06:56.218
So using a dynamic import like this, maybe
even using await import is, in most cases,

111
00:06:56.218 --> 00:06:58.934
a lot more perform than
just using a static import,

112
00:06:58.934 --> 00:07:03.249
if you're using any other asynchronous
code in there with that top level await.

113
00:07:04.619 --> 00:07:06.809
But yeah, so import, this is dynamic.

114
00:07:06.809 --> 00:07:08.489
You can do whatever you want with it.

115
00:07:08.489 --> 00:07:13.732
I don't know if this was like some,
you can do await import, that kinda stuff.

116
00:07:13.732 --> 00:07:17.692
So yeah, require asynchronous imports,
get hoisted.

117
00:07:17.692 --> 00:07:22.638
It's statically analyzed unless it's an
import function like this, in which case,

118
00:07:22.638 --> 00:07:23.663
it's a promise.

119
00:07:25.942 --> 00:07:26.793
Cool.

120
00:07:31.112 --> 00:07:31.932
Is there one more?

121
00:07:33.222 --> 00:07:34.472
Last one on modules.

122
00:07:34.472 --> 00:07:37.778
So which of the following statements
correctly describe the difference between

123
00:07:37.778 --> 00:07:38.659
require and import?

124
00:07:38.659 --> 00:07:41.679
So require can be called conditionally
while import statements cannot.

125
00:07:41.679 --> 00:07:44.863
Import statements are hoisted but
require calls are not.

126
00:07:44.863 --> 00:07:49.440
Required synchronously loads modules while
import can load modules asynchronously,

127
00:07:49.440 --> 00:07:53.662
and import allows for static analysis and
tree shaking, but required does not.

128
00:07:57.723 --> 00:07:59.212
So they're all correct.

129
00:07:59.212 --> 00:08:02.190
So require can be called conditionally,
while imports statements cannot,

130
00:08:02.190 --> 00:08:02.752
that is true.

131
00:08:02.752 --> 00:08:06.919
What can dynamic or conditionally
call is the import function but

132
00:08:06.919 --> 00:08:08.745
not the import statements.

133
00:08:08.745 --> 00:08:11.457
And import statements are hoisted,
but require calls are not.

134
00:08:11.457 --> 00:08:12.135
Yeah, we just saw that.

135
00:08:12.135 --> 00:08:15.663
Import statements are hoisted, we create
that module lexical environment for

136
00:08:15.663 --> 00:08:16.300
the modules.

137
00:08:16.300 --> 00:08:19.506
They get analyzed before
we actually run the script.

138
00:08:19.506 --> 00:08:22.196
Require calls is just kind
of like a regular function.

139
00:08:22.196 --> 00:08:24.654
We set a variable equal to
a require function, and

140
00:08:24.654 --> 00:08:28.486
it will only get defined as we're
actually executing the code.

141
00:08:28.486 --> 00:08:30.410
And require synchronously loads modules,

142
00:08:30.410 --> 00:08:32.546
while import can load
modules asynchronously.

143
00:08:32.546 --> 00:08:36.479
That's true, we can use the import
function to load modules asynchronously,

144
00:08:36.479 --> 00:08:37.369
require cannot.

145
00:08:37.369 --> 00:08:40.649
And import allows for static analysis and
tree shaking, but required does not, yeah.

146
00:08:40.649 --> 00:08:44.575
Same thing with a hoisting,
it can already scan the files before

147
00:08:44.575 --> 00:08:49.089
actually running it to tree shake and
eliminate any dead code and so on.

148
00:08:49.089 --> 00:08:50.129
Required can't do that.

