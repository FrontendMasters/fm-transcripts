WEBVTT

1
00:00:00.394 --> 00:00:05.155
I'm not supposed to play favorites with
what I'm teaching you, but this is one of

2
00:00:05.155 --> 00:00:09.931
my favorite new tricks that I'd like to
demonstrate for you here inside CodePen.

3
00:00:09.931 --> 00:00:12.461
So, we're looking at number 11.

4
00:00:12.461 --> 00:00:13.769
We're in chapter 11.

5
00:00:13.769 --> 00:00:16.760
This is the beginning state, and
we're looking at figures and

6
00:00:16.760 --> 00:00:17.950
figure captions again.

7
00:00:17.950 --> 00:00:22.154
When we were working in Flexbox,
I walked you through the process of

8
00:00:22.154 --> 00:00:27.560
overlapping a caption onto a figure
using absolute and relative positioning.

9
00:00:27.560 --> 00:00:30.720
And that is a wonderful
way of doing things.

10
00:00:30.720 --> 00:00:34.726
It's been around for, gosh,
15 years now that you've been able to do

11
00:00:34.726 --> 00:00:38.537
something like that, although not
necessarily the figure tag, but

12
00:00:38.537 --> 00:00:41.245
the concept has been around for
a very long time.

13
00:00:41.245 --> 00:00:46.770
One of the really interesting things
that grid does that Flexbox does not do,

14
00:00:46.770 --> 00:00:49.493
is grid allows your cells to overlap.

15
00:00:49.493 --> 00:00:54.185
So, by leveraging grid inside of your
figures and your figure captions,

16
00:00:54.185 --> 00:00:58.728
you can overlay your figure captions
very nicely over your figures here

17
00:00:58.728 --> 00:01:03.150
without even having to use absolute and
relative positioning.

18
00:01:03.150 --> 00:01:07.007
So, let's take a look at how exactly
that would look here in this particular

19
00:01:07.007 --> 00:01:08.390
example.

20
00:01:08.390 --> 00:01:10.378
So, what I've got inside of,

21
00:01:10.378 --> 00:01:15.290
I have a div with a class of row around
all of these particular figures.

22
00:01:15.290 --> 00:01:19.075
Inside of that, I have four different
figures, they have different content, but

23
00:01:19.075 --> 00:01:21.000
they all have the same markup.

24
00:01:21.000 --> 00:01:25.145
So, the way the markup goes,
we have a figure, we have an image, and

25
00:01:25.145 --> 00:01:27.260
then we have our figure caption.

26
00:01:27.260 --> 00:01:31.660
In the figure caption, and
it has an h2 and a paragraph inside of it.

27
00:01:31.660 --> 00:01:38.675
So, where are our children,
and where are our parents?

28
00:01:38.675 --> 00:01:41.140
We've actually got two sets going on here.

29
00:01:41.140 --> 00:01:46.948
So, first of all, to create this set of
four cells here laid out in the following

30
00:01:46.948 --> 00:01:52.583
way, that's actually if you scroll down
in the CSS I've already given you,

31
00:01:52.583 --> 00:01:57.520
I have a media query here set up for
600 pixels and higher.

32
00:01:57.520 --> 00:02:00.187
And this is set up with display grid,

33
00:02:00.187 --> 00:02:04.960
grid-template columns of 1fr,
1fr, and a gap of 2%.

34
00:02:04.960 --> 00:02:07.117
So, that is our first round of layout.

35
00:02:07.117 --> 00:02:13.080
That just gives us very nice layout of
those four cells there on the page.

36
00:02:13.080 --> 00:02:16.130
Now we're going to do
a second set of layouts.

37
00:02:16.130 --> 00:02:19.180
This is going to be
within the figure itself.

38
00:02:19.180 --> 00:02:24.050
So, where are the parents and
children here inside of our figure?

39
00:02:24.050 --> 00:02:28.730
We have a figure and it has two children,
an image and a figure caption.

40
00:02:29.750 --> 00:02:33.447
So, what do we need to do?

41
00:02:33.447 --> 00:02:36.585
If you plan in advance,
what we want to have happen is,

42
00:02:36.585 --> 00:02:39.337
we wanna have our image and
our figure caption.

43
00:02:39.337 --> 00:02:44.686
We wanna have the figure caption,
overlap that image at least somewhat.

44
00:02:44.686 --> 00:02:50.001
So, our figure is going to wind up
being our grid container or our parent,

45
00:02:50.001 --> 00:02:55.146
the image and the figure caption
are our grid items or the children, and

46
00:02:55.146 --> 00:03:00.760
we're going to somehow make these
two things overlap using CSS grid.

47
00:03:00.760 --> 00:03:02.360
So, let's write that code,

48
00:03:02.360 --> 00:03:06.593
now that I've explained to you the thought
process behind what we're doing.

49
00:03:11.280 --> 00:03:15.421
So, I've got several declarations here
of figure captions and figures and

50
00:03:15.421 --> 00:03:16.465
all the rest of it.

51
00:03:16.465 --> 00:03:19.285
I am just going to hit return
a whole bunch of times,

52
00:03:19.285 --> 00:03:23.740
just to keep things straightforward
as to what I'm adding here.

53
00:03:23.740 --> 00:03:27.345
In the real world you would probably
combine all of these into single

54
00:03:27.345 --> 00:03:28.237
declarations.

55
00:03:28.237 --> 00:03:31.511
But for now, for
learning purposes let's do it this way.

56
00:03:31.511 --> 00:03:36.044
So, I'm gonna start with figure, And

57
00:03:36.044 --> 00:03:42.803
I'm going to set it up to display grid,
And I'm

58
00:03:42.803 --> 00:03:48.678
going to have a single column, actually,
the layout is here exactly as I want it.

59
00:03:48.678 --> 00:03:53.026
I want everything to be in one column,
but I'm going to declare that column.

60
00:03:53.026 --> 00:03:57.323
So, grid hyphen template, hyphen columns,

61
00:03:57.323 --> 00:04:01.298
and we can just set that
up to be again 1fr.

62
00:04:01.298 --> 00:04:04.466
The actual width of this
column doesn't really matter,

63
00:04:04.466 --> 00:04:06.057
just take up the full space.

64
00:04:06.057 --> 00:04:08.600
So, 1fr is just fine.

65
00:04:08.600 --> 00:04:12.044
And I'm gonna set it up interestingly,
with three rows.

66
00:04:12.044 --> 00:04:19.582
So, grid-template-rows of repeat,
3 comma auto.

67
00:04:22.265 --> 00:04:27.290
So, I wanna have three rows, you figure
out how tall each of those rows are.

68
00:04:28.400 --> 00:04:29.860
Why three rows?

69
00:04:29.860 --> 00:04:33.437
Because we're gonna start with
in our initial three rows,

70
00:04:33.437 --> 00:04:36.680
what good we'll do is say,
okay, I have an image.

71
00:04:36.680 --> 00:04:38.340
That goes in row one.

72
00:04:38.340 --> 00:04:41.650
I have a figure caption,
that goes in row two.

73
00:04:41.650 --> 00:04:44.650
And I do have a third row,
but it's currently empty.

74
00:04:45.730 --> 00:04:49.360
You don't necessarily see
that displayed on the screen,

75
00:04:49.360 --> 00:04:53.730
grid knows that it exists because we
have declared that it exists, but

76
00:04:53.730 --> 00:04:58.561
it's not populated with anything at
this particular moment in time, okay.

77
00:04:58.561 --> 00:05:06.160
So, now what I wanna do is, I'm going to
set up my image and my figure caption.

78
00:05:06.160 --> 00:05:12.278
So for my image,
I'll set this up to have a grid,

79
00:05:12.278 --> 00:05:16.320
hyphen, column, 1 slash 2.

80
00:05:16.320 --> 00:05:20.940
In other words, I want it to occupy
the only column that we have and

81
00:05:20.940 --> 00:05:22.453
it goes from 1 to 2.

82
00:05:22.453 --> 00:05:24.200
And I'm very specific about that.

83
00:05:24.200 --> 00:05:27.915
It will actually apply to
all of these items here,

84
00:05:27.915 --> 00:05:31.400
because this is some very generic code.

85
00:05:31.400 --> 00:05:35.401
And we're talking about an individual
grid system in each one of these figures.

86
00:05:35.401 --> 00:05:38.210
So, it's actually going to apply
to all of these individually.

87
00:05:39.750 --> 00:05:45.960
And then, we're going to have a grid,
hyphen row of 1 slash 3.

88
00:05:45.960 --> 00:05:50.700
So, my image is going to span
across the first two rows.

89
00:05:50.700 --> 00:05:53.070
So I have, remember,
I declared three rows.

90
00:05:53.070 --> 00:05:55.900
The image is gonna occupy rows 1 and 2.

91
00:05:55.900 --> 00:06:00.510
Now, the figure caption is
occupying row number 3.

92
00:06:00.510 --> 00:06:03.309
You won't actually see
a change here on the screen,

93
00:06:03.309 --> 00:06:06.500
but that change happened behind
the scenes inside of grid.

94
00:06:09.090 --> 00:06:15.195
For my figure caption, I'll say again,

95
00:06:15.195 --> 00:06:18.820
my grid, hyphen column will be 1 slash 2.

96
00:06:18.820 --> 00:06:25.216
Because I want it to take up
the same number of columns as well,

97
00:06:25.216 --> 00:06:29.281
but then my grid row will be 2 slash 3.

98
00:06:29.281 --> 00:06:34.170
So now, my figure caption goes
up over the top of the image.

99
00:06:34.170 --> 00:06:37.120
See how nicely that's overlapping here?

100
00:06:37.120 --> 00:06:44.447
And that is because my images taking up 1
to 3, and my caption is taking up 2 to 3.

101
00:06:44.447 --> 00:06:47.052
So, now it looks this particular way.

102
00:06:47.052 --> 00:06:50.124
You can tweak this further by
indicating how high you want

103
00:06:50.124 --> 00:06:51.538
the figure caption to be.

104
00:06:51.538 --> 00:06:54.880
You could put that right on up here and
your grid-template-rows.

105
00:06:54.880 --> 00:06:59.160
You could have them be auto and then,
a very specific height for the caption.

106
00:06:59.160 --> 00:07:03.715
If you wanted to do it that way, you could
leave it the way I have left it, which is,

107
00:07:03.715 --> 00:07:04.580
this is fine.

108
00:07:04.580 --> 00:07:09.074
Just set it up that way, whatever you want
it to do at that point in time to tweak

109
00:07:09.074 --> 00:07:11.190
that a little bit further.

110
00:07:11.190 --> 00:07:16.630
But this is a technique
that is really fantastic.

111
00:07:16.630 --> 00:07:19.740
We don't have to worry about absolute or
relative positioning.

112
00:07:19.740 --> 00:07:22.127
We don't have to worry
about other absolutely or

113
00:07:22.127 --> 00:07:24.680
relatively positioned
elements on the page.

114
00:07:24.680 --> 00:07:26.320
It's very, very straightforward.

115
00:07:26.320 --> 00:07:30.652
This is probably the best
way of having your image and

116
00:07:30.652 --> 00:07:37.853
your figure caption overlapping each other
very nicely inside of this type of system.

117
00:07:46.140 --> 00:07:49.012
The big difference between
this methodology and

118
00:07:49.012 --> 00:07:52.381
something with absolute
relative positioning is this.

119
00:07:52.381 --> 00:07:54.689
Absolute and relative positioning,

120
00:07:54.689 --> 00:07:58.380
we could have pretty much
any element down our tree.

121
00:07:58.380 --> 00:08:01.934
And we could take an element
that's way down in our HTML, and

122
00:08:01.934 --> 00:08:06.510
position it relative to something
that's way outside of our tree.

123
00:08:06.510 --> 00:08:10.536
Here, where we're working with grid,
the two elements or

124
00:08:10.536 --> 00:08:14.670
however many elements you have,
have to be siblings.

125
00:08:14.670 --> 00:08:21.104
So, here in the HTML this works because
we have image and we have figure caption.

126
00:08:21.104 --> 00:08:25.510
They are next to each other in space
surrounded by the same rapper.

127
00:08:25.510 --> 00:08:29.385
So the effect that I have here
is going to be somewhat limited.

128
00:08:31.125 --> 00:08:34.605
It's not as flexible necessarily as
absolute and relative positioning.

129
00:08:34.605 --> 00:08:36.789
It's not a complete takeover of that, but

130
00:08:36.789 --> 00:08:40.950
it is a great way of doing things
if you have this type of markup.

131
00:08:40.950 --> 00:08:42.430
Okay, yes Mark.

132
00:08:42.430 --> 00:08:45.070
&gt;&gt; Why choose three rows instead of two?

133
00:08:45.070 --> 00:08:49.411
&gt;&gt; Why choose three rows instead of two,
because most likely you don't want your

134
00:08:49.411 --> 00:08:53.680
figure caption occupying half
of the height of that image.

135
00:08:53.680 --> 00:08:57.870
So, if you had two rows, that may be
what you wind up with as default.

136
00:08:57.870 --> 00:09:00.548
You could of course, do it that way and

137
00:09:00.548 --> 00:09:04.900
then specify that your second
row has a shorter height.

138
00:09:04.900 --> 00:09:08.754
For example, you could say,
maybe that row was taking up whatever,

139
00:09:08.754 --> 00:09:11.478
a third of the height or
a quarter of the height and

140
00:09:11.478 --> 00:09:14.350
let the other row take up
the remaining part of it.

141
00:09:14.350 --> 00:09:16.260
That would work fine too.

142
00:09:16.260 --> 00:09:20.857
But as you see here, the number of rows
overall doesn't really matter if there is

143
00:09:20.857 --> 00:09:24.300
a row with nothing in it,
grid isn't even displaying it.

144
00:09:24.300 --> 00:09:28.620
So, whatever works for
you is probably just fine.

145
00:09:28.620 --> 00:09:29.750
&gt;&gt; This is cool.

146
00:09:29.750 --> 00:09:31.570
&gt;&gt; It is very cool, isn't it?

147
00:09:31.570 --> 00:09:32.610
Yeah.

148
00:09:32.610 --> 00:09:33.370
As I said,

149
00:09:33.370 --> 00:09:38.792
one of the really powerful features of
grid is the ability to overlap cells.

150
00:09:38.792 --> 00:09:41.495
And a lot of people aren't taking
advantage of this yet, but

151
00:09:41.495 --> 00:09:43.090
this is a great case for doing that.

