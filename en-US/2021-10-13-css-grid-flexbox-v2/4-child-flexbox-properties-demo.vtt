WEBVTT

1
00:00:00.030 --> 00:00:01.377
So all we've talked about so

2
00:00:01.377 --> 00:00:05.790
far is everything on the UL this all has
to do with parents at this point in time.

3
00:00:05.790 --> 00:00:07.566
And so
now let's take a look at the children.

4
00:00:07.566 --> 00:00:12.796
There, actually,
aren't that many properties for

5
00:00:12.796 --> 00:00:19.080
the children for the Li's, but
the main one happens to be this.

6
00:00:20.625 --> 00:00:26.340
So down here in the Li's,
we have the ability of changing our order.

7
00:00:26.340 --> 00:00:30.857
And so if I simply say for
my Li order of one, that is gonna do,

8
00:00:30.857 --> 00:00:35.639
absolutely, nothing for
me at this point, that is just setting

9
00:00:35.639 --> 00:00:40.280
all six of those boxes to have
a value of one for the order.

10
00:00:40.280 --> 00:00:45.614
But then, if I were to take my class,
remember up here

11
00:00:45.614 --> 00:00:51.781
in our HTML,we had a couple of
classes of flex2 on the Li's,

12
00:00:51.781 --> 00:00:55.693
so if I were to reset this to flex2, and

13
00:00:55.693 --> 00:01:01.870
I said order of 2,
that will pull out those two boxes.

14
00:01:01.870 --> 00:01:05.756
In this particular case, the properties,
the way we have them set up box number 2,

15
00:01:05.756 --> 00:01:08.766
and box number 5, and it's,
actually, pulling them out, and

16
00:01:08.766 --> 00:01:10.610
putting them second here in the order.

17
00:01:10.610 --> 00:01:15.179
So they're gonna wind up showing
up latter in our layout, so

18
00:01:15.179 --> 00:01:19.748
the things with,
the order of 1 show up first, 1346 and

19
00:01:19.748 --> 00:01:24.509
then the two elements that have
the order have to show up later.

20
00:01:24.509 --> 00:01:26.890
Obviously, you could add
many more classes, and

21
00:01:26.890 --> 00:01:30.700
you could then put your boxes in whatever
order you want them to display them in.

22
00:01:34.490 --> 00:01:38.043
You can also set so called width, and

23
00:01:38.043 --> 00:01:43.086
I use the air quotes because
the CSS property width,

24
00:01:43.086 --> 00:01:47.560
should never be used inside of flexbox.

25
00:01:47.560 --> 00:01:51.430
The property you wanna use
is one called flex basis.

26
00:01:51.430 --> 00:01:57.370
Flex basis has to do with,
how wide is this box sorta.

27
00:01:57.370 --> 00:02:02.762
So is it gonna, we say it's gonna
be whatever 30%, let's say,

28
00:02:02.762 --> 00:02:07.881
man might, actually,
wanna be 25% sometimes, or 20%.

29
00:02:07.881 --> 00:02:10.770
Sometimes maybe it's more like 50%,

30
00:02:10.770 --> 00:02:15.690
it just sorta depends on what's
going on in your flexbox layout.

31
00:02:15.690 --> 00:02:21.355
When you use the CSS property of width,
and you say the width is 30%,

32
00:02:21.355 --> 00:02:25.890
it will never be 29.9,
it will never be 30.1%,

33
00:02:25.890 --> 00:02:30.425
it will always be 30%, so
when you work with flexbox,

34
00:02:30.425 --> 00:02:35.890
you wanna work with flex basis
as the width property here.

35
00:02:35.890 --> 00:02:40.120
And so you can write that out longhand.

36
00:02:40.120 --> 00:02:44.585
So let's just say flex2 here, for example,

37
00:02:44.585 --> 00:02:50.880
we could say our flex-basis is,
I don't know 25%.

38
00:02:50.880 --> 00:02:54.090
And then our min-width here, we should,
probably, have that go away.

39
00:02:55.850 --> 00:03:01.800
So, the two items now,
there they are, item 2, and 5.

40
00:03:04.950 --> 00:03:10.790
They both have about half of the width
overall, about 25% for those two.

41
00:03:10.790 --> 00:03:14.519
And then the other boxes where we
haven't defined the flex basis,

42
00:03:14.519 --> 00:03:16.390
there is why does their content.

43
00:03:17.430 --> 00:03:19.130
That's what's going on here.

44
00:03:19.130 --> 00:03:22.782
So if I set up here just
on the Li in general, and

45
00:03:22.782 --> 00:03:27.202
I said the flex-basis here
was something like 10%.

46
00:03:29.929 --> 00:03:34.785
Then we have as you see here, a narrower
set of boxes 134, and 6 and 2, and

47
00:03:34.785 --> 00:03:36.339
5 happened to be wider.

48
00:03:37.740 --> 00:03:43.080
And that only adds up to 90%, so we don't
have quite the full 100% for the row.

49
00:03:43.080 --> 00:03:46.960
There's some other properties that
are here, that are part of this,

50
00:03:46.960 --> 00:03:50.706
that are called flex grow, and
flex shrink, they have to do with how

51
00:03:50.706 --> 00:03:55.760
fast the box gets wider, or how fast the
box gets smaller relative the other boxes.

52
00:03:55.760 --> 00:04:00.325
What I find is that most people are not
using these particular properties in

53
00:04:00.325 --> 00:04:05.253
layouts necessarily, and that is because
they can be a little bit unpredictable

54
00:04:05.253 --> 00:04:09.040
in terms of the layouts, and
expanding things on the screen.

55
00:04:09.040 --> 00:04:14.029
So I'm gonna kinda skip over those
in terms of a longer explanation,

56
00:04:14.029 --> 00:04:16.867
but you can write those out if you want,

57
00:04:16.867 --> 00:04:22.620
you can say flex, flex-grow, and
it's just a number for a value.

58
00:04:22.620 --> 00:04:27.226
So these are gonna grow two times
faster than the other boxes are, for

59
00:04:27.226 --> 00:04:28.348
example, yes.

60
00:04:28.348 --> 00:04:33.028
&gt;&gt; What's the difference between
flex-basis 30%, and width 30%.

61
00:04:33.028 --> 00:04:37.464
&gt;&gt; For the list items, yeah, so

62
00:04:37.464 --> 00:04:43.675
if I said width here, so width of 30%,

63
00:04:43.675 --> 00:04:52.205
okay, they are gonna be
a width of 30% no matter what.

64
00:04:52.205 --> 00:04:58.506
So I will start to push them off
the screen, some point in time here.

65
00:05:01.146 --> 00:05:05.597
We're not, they're just gonna be 30%,
see how they never flex at all.

66
00:05:05.597 --> 00:05:11.401
I'm making my screen bigger,
I'm making my screen smaller,

67
00:05:11.401 --> 00:05:17.878
and they never flex at all, okay,
as opposed to using a flex-basis.

68
00:05:19.800 --> 00:05:24.189
Of 30%, and here, now these will flex.

69
00:05:25.935 --> 00:05:27.930
If I have it set up to do that.

70
00:05:27.930 --> 00:05:29.535
So if we get rid of these things here.

71
00:05:33.173 --> 00:05:33.673
Okay.

72
00:05:35.120 --> 00:05:35.750
Yeah, that's it.

73
00:05:36.890 --> 00:05:39.940
So now, see how those boxes
got a little bit bigger.

74
00:05:39.940 --> 00:05:42.160
See how they get a little bit smaller.

75
00:05:42.160 --> 00:05:45.387
See how we can still squash them down.

76
00:05:45.387 --> 00:05:46.830
Look at that.

77
00:05:48.630 --> 00:05:53.190
So, here 1, and 3 are clearly a little
bit smaller than number 4 is,

78
00:05:53.190 --> 00:05:57.680
4 has got some texts that's,
actually, going into overflow here.

79
00:05:57.680 --> 00:06:02.628
Number 2 is the same kinda issue,

80
00:06:02.628 --> 00:06:07.748
that is what flex-basis is doing,

81
00:06:07.748 --> 00:06:13.220
and if we set this back to width again.

82
00:06:14.922 --> 00:06:16.120
So they are what they are.

83
00:06:17.600 --> 00:06:21.358
See how they all change exactly
the same size, no matter what.

84
00:06:21.358 --> 00:06:25.800
They're all 30% of their container width.

85
00:06:25.800 --> 00:06:27.778
And so as opposed to 1, and

86
00:06:27.778 --> 00:06:33.535
3 getting a little smaller to accommodate
number 4 which has some text in it.

87
00:06:33.535 --> 00:06:36.215
So they are what they
are when you use width,

88
00:06:36.215 --> 00:06:39.335
they're not as flexible as a flex-basis.

89
00:06:39.335 --> 00:06:43.693
Somebody else had another question about
the difference between something like

90
00:06:43.693 --> 00:06:48.865
stretch in flexbox versus min max height,
or min-height, or something like that.

91
00:06:48.865 --> 00:06:53.346
So back in the old days when we did
our floats, width layouts with floats,

92
00:06:53.346 --> 00:06:58.050
by default, the height of your
elements are as tall as your content.

93
00:06:58.050 --> 00:07:01.255
Okay.
So content however tall, the content is in

94
00:07:01.255 --> 00:07:06.491
the particular box, that's how tall
that boxes, your height measurement,

95
00:07:06.491 --> 00:07:11.030
the CSS property of height can
artificially make that taller.

96
00:07:11.030 --> 00:07:15.797
Okay, and of course you can use
max-height, or min-height to control

97
00:07:15.797 --> 00:07:21.710
a little bit about that height, but recall
that is for that one particular box.

98
00:07:21.710 --> 00:07:27.498
And so, what the flex box will do is,
it will within that particular row, that

99
00:07:27.498 --> 00:07:33.551
particular set of boxes that we're looking
at when you use the stretch property,

100
00:07:33.551 --> 00:07:39.076
it will stretch to make those boxes as
tall as the longest piece of content,

101
00:07:39.076 --> 00:07:44.760
and so then equalize all of the boxes
in the row to that same height.

102
00:07:44.760 --> 00:07:47.740
This is something we used to have to
do with JavaScript when we did it with

103
00:07:47.740 --> 00:07:51.010
floats, our layouts with floats, and
we wanted to have equal height boxes.

104
00:07:51.010 --> 00:07:53.646
So now that's just baked into flexbox, and

105
00:07:53.646 --> 00:07:56.574
makes all of your boxes
equal height from there.

106
00:07:56.574 --> 00:08:00.840
So what I would recommend is,
if you do need equal height boxes,

107
00:08:00.840 --> 00:08:04.948
something like flex-box, or
grid, as you'll see tomorrow

108
00:08:04.948 --> 00:08:09.689
will be a much better approach than
playing around with max-heights.

109
00:08:09.689 --> 00:08:14.142
Because again, when you are playing
around with height-max height-min,

110
00:08:14.142 --> 00:08:17.566
height, you may wind up with
some overflow, eventually,

111
00:08:17.566 --> 00:08:22.307
anyway, and then flexbox, or grid there,
they are set to deal with that for you.

112
00:08:22.307 --> 00:08:26.868
&gt;&gt; Can you talk about the thought
process between using flex direction row

113
00:08:26.868 --> 00:08:28.630
versus column?

114
00:08:28.630 --> 00:08:31.799
&gt;&gt; What do we wanna use between rows,
and columns?

115
00:08:31.799 --> 00:08:35.150
&gt;&gt; So generally speaking,
if you wanna be laying out a webpage,

116
00:08:35.150 --> 00:08:38.640
you're gonna use rows, and
we're gonna go through that here.

117
00:08:38.640 --> 00:08:42.450
That's my next thing to talk about is
using flex box in the grid system.

118
00:08:42.450 --> 00:08:46.575
So you're gonna most likely, 90% of the
time when you are working with flex-box,

119
00:08:46.575 --> 00:08:49.019
you, probably,
gonna have something with rows.

120
00:08:50.130 --> 00:08:55.170
On occasion, and we do have an example of
this later on in the course flexbox can be

121
00:08:55.170 --> 00:09:00.434
useful for columns, maybe you, actually,
do wanna stack a whole bunch of things on

122
00:09:00.434 --> 00:09:05.476
top of each other, especially, if you're
looking at some UI, particularly,

123
00:09:05.476 --> 00:09:10.570
if you're looking at say a card, and maybe
you want some elements of your cards.

124
00:09:10.570 --> 00:09:15.258
Stretched out horizontally in one
particular screen dimension, and

125
00:09:15.258 --> 00:09:20.343
you want those things stacked vertically
at a different screen dimension,

126
00:09:20.343 --> 00:09:23.770
you may wind up using
the column property for that.

