[00:00:00]
>> So the next thing I'd like to do is move on to chapter 10. And in chapter 10, we are going to code the same exact grid system that we coded with Flexbox. Now we're gonna code this with Grid. And we're gonna start by just doing the desktop version of our layout exactly as we did with Flexbox.

[00:00:22]
So if you take a look at your HTML, this is exactly the same example we had yesterday. We have a div with a class of wrapper going all the way around things here, all right? So I'm just going to fold up these figures here just so you can see what's going on.

[00:00:41]
So notice that that have a class of wrapper around the whole thing. And then I just have a series of figures here. Now with Flexbox what we had to do, was we had to put a div with a class of row around all of this groups of figures, but with Grid we don't need to do that.

[00:00:57]
With Grid we can control all of this centrally with our CSS, and we can do it very quickly, it's really a very nice system. So just like we did with Flexbox, we're gonna have our first rows, we're gonna have four separate boxes in it. Our second row will have two boxes spanning two columns.

[00:01:16]
Our third row has got the three plus one. Our fourth row is just one giant box. And our fifth row is the one to one configuration. So let's write some desktop styles for that. So we will start with our wrapper, because that's the parent to all of these figures.

[00:01:37]
And so this is where we place our display grid. That's how it starts always. Now what I would like to do is I'd like to have four columns on this page and I'd like them to all be the same width. Now we could write out something like this grid-template-columns, and we could say something like 25% 25% 25% 25%.

[00:02:06]
That would be absolutely legitimate. And as you see here, it displays very nicely on the web page. But there are more efficient ways to write this code. So let's go through other ways of writing the syntax. So, with the usual caveat, as you were writing your CSS, the best way to write it as the way that you understand it.

[00:02:26]
So you don't have to leverage all of the shortcuts and all of the additional syntax and all the rest of it. If you don't understand your own code, there are problems. So I'm showing you a whole bunch of different ways to write exactly the same thing. Here, we're going to do something slightly different and something that you'll see a lot in other people's code.

[00:02:47]
For grid template columns, say repeat 4, and then, 1fr. Ifr is a unique unit to Grid you cannot use fr anywhere else in CSS it's only for Grid and fr stands for fraction. So in other words, we're telling Grid, I would like for you to divide the screen into for equal fractions.

[00:03:16]
So it figures out that that's about 25% of the width of the screen. And it sets it up just like this. And rather than writing out those individually we're using this repeat notation. You could also write this as 1fr 1fr 1fr 1fr that's perfectly legit also and you may have reasons for doing that, if you if this is more understandable to you.

[00:03:42]
But normally, you'll see this written as repeat 4 common in other words, four of these, 1fr that's the width for each one of them. And then we're going to have our grid-template-rows, we can just set that to auto. However many rows you need, have fun. Just go ahead and set it up and make it happen.

[00:04:07]
That's what we're telling Grid to do here, so we don't have to be all that specific all the time. And we can also say our gap welcome is 4%, so this is working off the similar kind of math that we had with Flexbox once again, where we had a 4% gap across all of our grid cells.

[00:04:26]
Well, we've got the same kind of thing going on here with 4% gap. The difference here is that gap in Grid applies in two dimensions. So we've got a 4% gap in between the cells and a 4% gap between the rows. So not only between the columns, but between the rows as well.

[00:04:48]
So by default, it's going to put every one of these grid items into its own cell. And lined them all up really nicely with very little code, very efficient. So, let's go through here and think about now what we wanna do with our second row. I said we have two boxes, each of those is going to span two columns.

[00:05:14]
So, first of all, based on what you know so far, what kind of syntax might we use to specify how we would say these two cells should be spanning two columns?
>> There is a question about the gap percentage is based on what property?
>> Gap is the property.

[00:05:33]
4% is the value. Are you talking about 4% of what? 4% of the containing element. In our case, the wrapper is the container. The wrapper is occupying 100% of the width of the screen, so it winds up being effectively 4% of the viewport width in this particular case.

[00:05:55]
If your wrapper was 50% of the screen, it would be 4% of that 50%.
>> And that's what they're asking.
>> Okay, cool. All right, so we can set up now our second row here in a very reusable way. So what I'm going to do here on my figure in my HTML is I'm gonna set this up with a class and I'm gonna call it span 2.

[00:06:22]
Why? Because we're gonna span across two columns. And I'm gonna set that up here in my second figure as well class of span 2, okay? And then we can write the corresponding CSS very easily span 2. What would I write here? grid-column, span 2. That's it. Really, really very straightforward.

[00:06:55]
So in a desktop type of layout. I don't have to do any math. Remember all the crazy math we had to do with Flexbox and making sure that everything lined up correctly. You don't have to do any of that with Grid. Grid does it all for you. It's amazing.

[00:07:08]
And so we can now just take the style for span 2 and let's set up a couple more. I'm just going to paste that in a couple times. So I'm gonna set up a class of span 3 and a class of span 4, and I'm gonna tell it to span and span 4, right?

[00:07:28]
Get desktop based layout only. And now all I have to do is drop the classes in where I want them to appear. So here in my row 3, the first figure I'll say a class of span 3. In row number 4, I have a class of span 4.

[00:07:50]
And in row number 5, maybe my first item here would be a class of span 2. So notice how much less code we have now in our grid system. How much less math we had to write and how many less machinations we have to go through in order to set up this web page.

[00:08:14]
It's very straightforward. The HTML is much more streamlined. We have really streamlined CSS, we did it in just a handful of declarations here. And everything lines up perfectly on the page, we have exactly the layout that we're looking for. Just like that.

