WEBVTT

1
00:00:00.130 --> 00:00:03.260
So the next thing I'd like to
do is move on to chapter 10.

2
00:00:03.260 --> 00:00:07.816
And in chapter 10,
we are going to code the same

3
00:00:07.816 --> 00:00:12.320
exact grid system that
we coded with Flexbox.

4
00:00:12.320 --> 00:00:14.829
Now we're gonna code this with Grid.

5
00:00:14.829 --> 00:00:19.131
And we're gonna start by just
doing the desktop version of our

6
00:00:19.131 --> 00:00:22.190
layout exactly as we did with Flexbox.

7
00:00:22.190 --> 00:00:24.854
So if you take a look at your HTML,

8
00:00:24.854 --> 00:00:28.953
this is exactly the same
example we had yesterday.

9
00:00:28.953 --> 00:00:32.750
We have a div with a class of wrapper
going all the way around things here,

10
00:00:32.750 --> 00:00:33.383
all right?

11
00:00:33.383 --> 00:00:38.910
So I'm just going to fold up these figures
here just so you can see what's going on.

12
00:00:41.080 --> 00:00:45.100
So notice that that have a class
of wrapper around the whole thing.

13
00:00:45.100 --> 00:00:47.310
And then I just have
a series of figures here.

14
00:00:47.310 --> 00:00:51.891
Now with Flexbox what we had to do, was
we had to put a div with a class of row

15
00:00:51.891 --> 00:00:57.540
around all of this groups of figures,
but with Grid we don't need to do that.

16
00:00:57.540 --> 00:01:01.840
With Grid we can control all of
this centrally with our CSS, and

17
00:01:01.840 --> 00:01:06.670
we can do it very quickly,
it's really a very nice system.

18
00:01:06.670 --> 00:01:09.920
So just like we did with Flexbox,
we're gonna have our first rows,

19
00:01:09.920 --> 00:01:12.580
we're gonna have four
separate boxes in it.

20
00:01:12.580 --> 00:01:16.120
Our second row will have two
boxes spanning two columns.

21
00:01:16.120 --> 00:01:18.450
Our third row has got the three plus one.

22
00:01:18.450 --> 00:01:21.150
Our fourth row is just one giant box.

23
00:01:21.150 --> 00:01:24.790
And our fifth row is the one
to one configuration.

24
00:01:24.790 --> 00:01:27.639
So let's write some desktop styles for
that.

25
00:01:29.602 --> 00:01:32.763
So we will start with our wrapper,

26
00:01:32.763 --> 00:01:37.600
because that's the parent
to all of these figures.

27
00:01:37.600 --> 00:01:41.030
And so
this is where we place our display grid.

28
00:01:42.220 --> 00:01:44.740
That's how it starts always.

29
00:01:44.740 --> 00:01:49.755
Now what I would like to do is I'd like
to have four columns on this page and

30
00:01:49.755 --> 00:01:52.480
I'd like them to all be the same width.

31
00:01:52.480 --> 00:02:00.587
Now we could write out something
like this grid-template-columns, and

32
00:02:00.587 --> 00:02:06.900
we could say something
like 25% 25% 25% 25%.

33
00:02:06.900 --> 00:02:09.110
That would be absolutely legitimate.

34
00:02:09.110 --> 00:02:12.270
And as you see here,
it displays very nicely on the web page.

35
00:02:12.270 --> 00:02:14.760
But there are more efficient
ways to write this code.

36
00:02:14.760 --> 00:02:17.920
So let's go through other
ways of writing the syntax.

37
00:02:17.920 --> 00:02:22.117
So, with the usual caveat,
as you were writing your CSS,

38
00:02:22.117 --> 00:02:26.800
the best way to write it as
the way that you understand it.

39
00:02:26.800 --> 00:02:29.432
So you don't have to leverage
all of the shortcuts and

40
00:02:29.432 --> 00:02:32.160
all of the additional syntax and
all the rest of it.

41
00:02:32.160 --> 00:02:35.960
If you don't understand your own code,
there are problems.

42
00:02:35.960 --> 00:02:38.670
So I'm showing you a whole bunch
of different ways to write

43
00:02:38.670 --> 00:02:39.840
exactly the same thing.

44
00:02:41.100 --> 00:02:44.259
Here, we're going to do
something slightly different and

45
00:02:44.259 --> 00:02:47.362
something that you'll see
a lot in other people's code.

46
00:02:47.362 --> 00:02:51.394
For grid template columns,

47
00:02:51.394 --> 00:02:56.099
say repeat 4, and then, 1fr.

48
00:02:56.099 --> 00:03:01.010
Ifr is a unique unit
to Grid you cannot use

49
00:03:01.010 --> 00:03:05.490
fr anywhere else in CSS it's only for

50
00:03:05.490 --> 00:03:10.290
Grid and fr stands for fraction.

51
00:03:10.290 --> 00:03:13.637
So in other words,
we're telling Grid, I would like for

52
00:03:13.637 --> 00:03:16.790
you to divide the screen into for
equal fractions.

53
00:03:16.790 --> 00:03:20.640
So it figures out that that's about
25% of the width of the screen.

54
00:03:20.640 --> 00:03:22.690
And it sets it up just like this.

55
00:03:22.690 --> 00:03:27.289
And rather than writing out those
individually we're using this

56
00:03:27.289 --> 00:03:28.633
repeat notation.

57
00:03:28.633 --> 00:03:35.301
You could also write this as 1fr 1fr
1fr 1fr that's perfectly legit also and

58
00:03:35.301 --> 00:03:42.181
you may have reasons for doing that, if
you if this is more understandable to you.

59
00:03:42.181 --> 00:03:47.339
But normally, you'll see this written
as repeat 4 common in other words,

60
00:03:47.339 --> 00:03:51.380
four of these, 1fr that's the width for
each one of them.

61
00:03:54.220 --> 00:03:58.598
And then we're going to have
our grid-template-rows,

62
00:03:58.598 --> 00:04:00.750
we can just set that to auto.

63
00:04:02.770 --> 00:04:05.430
However many rows you need, have fun.

64
00:04:05.430 --> 00:04:07.290
Just go ahead and
set it up and make it happen.

65
00:04:07.290 --> 00:04:09.560
That's what we're telling Grid to do here,
so

66
00:04:09.560 --> 00:04:12.020
we don't have to be all
that specific all the time.

67
00:04:13.270 --> 00:04:16.656
And we can also say our gap welcome is 4%,
so

68
00:04:16.656 --> 00:04:22.632
this is working off the similar kind of
math that we had with Flexbox once again,

69
00:04:22.632 --> 00:04:26.540
where we had a 4% gap across
all of our grid cells.

70
00:04:26.540 --> 00:04:31.360
Well, we've got the same kind of
thing going on here with 4% gap.

71
00:04:31.360 --> 00:04:36.700
The difference here is that gap in
Grid applies in two dimensions.

72
00:04:36.700 --> 00:04:44.130
So we've got a 4% gap in between
the cells and a 4% gap between the rows.

73
00:04:44.130 --> 00:04:47.040
So not only between the columns,
but between the rows as well.

74
00:04:48.140 --> 00:04:54.400
So by default, it's going to put every one
of these grid items into its own cell.

75
00:04:54.400 --> 00:04:59.661
And lined them all up really nicely
with very little code, very efficient.

76
00:05:01.172 --> 00:05:09.360
So, let's go through here and think about
now what we wanna do with our second row.

77
00:05:09.360 --> 00:05:14.170
I said we have two boxes, each of
those is going to span two columns.

78
00:05:14.170 --> 00:05:18.174
So, first of all,
based on what you know so far,

79
00:05:18.174 --> 00:05:22.865
what kind of syntax might we
use to specify how we would say

80
00:05:22.865 --> 00:05:27.570
these two cells should
be spanning two columns?

81
00:05:27.570 --> 00:05:31.682
&gt;&gt; There is a question about the gap
percentage is based on what property?

82
00:05:31.682 --> 00:05:33.830
&gt;&gt; Gap is the property.

83
00:05:33.830 --> 00:05:35.080
4% is the value.

84
00:05:35.080 --> 00:05:37.942
Are you talking about 4% of what?

85
00:05:37.942 --> 00:05:43.730
4% of the containing element.

86
00:05:43.730 --> 00:05:45.640
In our case, the wrapper is the container.

87
00:05:45.640 --> 00:05:50.030
The wrapper is occupying 100%
of the width of the screen, so

88
00:05:50.030 --> 00:05:55.656
it winds up being effectively 4% of the
viewport width in this particular case.

89
00:05:55.656 --> 00:06:01.350
If your wrapper was 50% of the screen,
it would be 4% of that 50%.

90
00:06:05.698 --> 00:06:06.950
&gt;&gt; And that's what they're asking.

91
00:06:06.950 --> 00:06:09.160
&gt;&gt; Okay, cool.

92
00:06:09.160 --> 00:06:14.960
All right, so we can set up now our
second row here in a very reusable way.

93
00:06:14.960 --> 00:06:19.788
So what I'm going to do here on my figure
in my HTML is I'm gonna set this up

94
00:06:19.788 --> 00:06:22.860
with a class and I'm gonna call it span 2.

95
00:06:22.860 --> 00:06:24.040
Why?

96
00:06:24.040 --> 00:06:27.603
Because we're gonna span
across two columns.

97
00:06:27.603 --> 00:06:31.583
And I'm gonna set that
up here in my second

98
00:06:31.583 --> 00:06:35.349
figure as well class of span 2, okay?

99
00:06:35.349 --> 00:06:40.530
And then we can write the corresponding
CSS very easily span 2.

100
00:06:40.530 --> 00:06:42.663
What would I write here?

101
00:06:42.663 --> 00:06:50.210
grid-column, span 2.

102
00:06:50.210 --> 00:06:52.930
That's it.

103
00:06:52.930 --> 00:06:55.000
Really, really very straightforward.

104
00:06:55.000 --> 00:06:56.590
So in a desktop type of layout.

105
00:06:58.040 --> 00:06:59.590
I don't have to do any math.

106
00:06:59.590 --> 00:07:02.166
Remember all the crazy math
we had to do with Flexbox and

107
00:07:02.166 --> 00:07:04.520
making sure that everything
lined up correctly.

108
00:07:04.520 --> 00:07:06.389
You don't have to do
any of that with Grid.

109
00:07:06.389 --> 00:07:07.440
Grid does it all for you.

110
00:07:07.440 --> 00:07:08.720
It's amazing.

111
00:07:08.720 --> 00:07:14.750
And so we can now just take the style for
span 2 and let's set up a couple more.

112
00:07:16.240 --> 00:07:18.636
I'm just going to paste
that in a couple times.

113
00:07:18.636 --> 00:07:23.789
So I'm gonna set up a class of span 3 and
a class of span 4,

114
00:07:23.789 --> 00:07:28.224
and I'm gonna tell it to span and
span 4, right?

115
00:07:28.224 --> 00:07:30.370
Get desktop based layout only.

116
00:07:32.810 --> 00:07:36.920
And now all I have to do is drop the
classes in where I want them to appear.

117
00:07:36.920 --> 00:07:40.986
So here in my row 3, the first

118
00:07:40.986 --> 00:07:45.882
figure I'll say a class of span 3.

119
00:07:45.882 --> 00:07:50.811
In row number 4, I have a class of span 4.

120
00:07:50.811 --> 00:07:55.911
And in row number 5, maybe my first

121
00:07:55.911 --> 00:08:01.188
item here would be a class of span 2.

122
00:08:01.188 --> 00:08:06.756
So notice how much less code we
have now in our grid system.

123
00:08:06.756 --> 00:08:09.237
How much less math we had to write and

124
00:08:09.237 --> 00:08:14.803
how many less machinations we have to go
through in order to set up this web page.

125
00:08:14.803 --> 00:08:16.660
It's very straightforward.

126
00:08:16.660 --> 00:08:19.080
The HTML is much more streamlined.

127
00:08:19.080 --> 00:08:24.541
We have really streamlined CSS, we did it
in just a handful of declarations here.

128
00:08:24.541 --> 00:08:27.650
And everything lines up
perfectly on the page,

129
00:08:27.650 --> 00:08:31.370
we have exactly the layout
that we're looking for.

130
00:08:31.370 --> 00:08:31.990
Just like that.

