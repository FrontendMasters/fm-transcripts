[00:00:00]
>> All right, so we're on to then the mobile portion of the navigation. And remember I said we were just going to set these up as buttons. I know the default these days is really to always set your navigation as a hamburger button. There's nothing wrong with that, you can definitely do a hamburger button.

[00:00:16]
And I have covered that in the advanced CSS layouts course if you want to check that out, and how you can make a hamburger button with just CSS without involving any JavaScript. But for today, let's make it with buttons because this is a layouts course and we can lay out some buttons here.

[00:00:31]
We don't have that many navigation items, and they're kind of fun. They add a little bit of extra color to the mobile display. I'm just scrolling up a little bit here. I have two nav ul declarations here. I think I did this, because this nav ul, this part of it, is kind of something that we always do.

[00:00:50]
And then this is the flex box portion of it. Absolutely you can combine these into a single style. There's no particular reason to declare the same thing twice. So there we go. We haven't have one style with all of these elements in place. And then we'll go on to our nav li.

[00:01:10]
So nav lis. These are just sort of in general for all of our lis, I'm gonna have two buttons per line. So we'll set our flex basis to 48% and we'll set our margin bottom to 0.5 rem. That'll give us a little bit of space in between our buttons there at the bottom.

[00:01:36]
Okay, so let's check what we've got here so far. I'm gonna scrunch up the screen a little bit more to get us to the mobile kind of layout. So there we are. You can see that we have our logo on its own line, which we definitely want here too.

[00:01:50]
And we have all of our various hamburger button navigation items here. Okay, so let's start to turn things red with white text. So to do that, we'll add here on our nav a. So I initially set this to be color one. I'm gonna change that now to white.

[00:02:19]
So we have white text and I'll set our background color To, I think it's color 10, color 10. Nice red, so a nice red button with a white text on top of it, okay. So then to this we'll also add some padding. Of 0.5 rem and we'll add a border radius, Of 5 px.

[00:02:53]
This will match the other in the collections portion of the webpage where we had borders. We had a 5 px radius there, and so we're going to add it here as well to keep it consistent. One of the signs of an amateur designer is to have slightly different curves all over the web page so try to keep them consistent if you're gonna make use of them.

[00:03:14]
And then finally, text, align, center. Okay, let's see what that looks like. So great. We have red backgrounds for all of our buttons, right? Exactly what we wanted. But it's also given us a red background on our SVG, which is transparent by default. So now it's time to override that.

[00:03:45]
And so here, we can say, our nav li first child a. We'll have a background color of transparent, and that will fix that problem very, very nicely. Much better. Okay, then we want to hover state for these. And so nav a hover background color of var color 1.

[00:04:32]
So that'll give us our black. And a color, var color 5. So yellow text on our black background. So let's test that. So now when I mouse over our buttons, those all look good, nice big contrast the changes and so forth. When I mouse over the wall of wonder here, we do not get that same hover effect.

[00:05:01]
Why is that? Well, it has to do with specificity, believe it or not. Right here on line 100 and notice it says nav li first child a, and that is a more specific style, it contains a pseudo class in it, the first child plus the a, then this nav a hover declaration.

[00:05:22]
And since we are talking about the a state this is actually overriding the a state for all of the states of the link, length visited focus hover active. And so when we try the more generic navei hover over our logo, it's actually overridden by this transparent declaration that comes slightly earlier, which is fine.

[00:05:44]
We really don't wanna have a black hover on our logo anyway. So, it's kinda magic. But that is the cascade in effect there, cascade and specificity. All right, so, I think we've got our whole nav bar together at that point then. So, we have a nav bar that changes radically over the website.

[00:06:03]
Here we are at desktop, logo in the middle, navigation spaced evenly on either side. As we start to pull this in. At some point here we wind up with a break and our text wraps on to the next line. And then when we push this closer a little bit more, we wind up with buttons here on mobile.

[00:06:24]
And those are fully clickable mobile areas. And notice that when you hover over the edges of the button, it not only changes the hover state, but we also still have a clickable area. That's because we put that display block on our a really, really important for making good usable links on mobile, okay?

[00:06:43]
Any questions on headers, and nav bars?
>> On hover on mobile, those states wouldn't be seen, or seen quickly before moving to the linked page. Is there a way for the hover to be seen utilized on mobile? Yeah, with touch interaction, you're not really gonna see a hover?

[00:07:00]

>> Right. Yeah, yeah, absolutely true on with a touch device of course there is no hover state on mobile. And so that's just the way it is. But you can put in the hover state here on mobile, people may have for example I was using an Apple Pencil earlier.

[00:07:18]
Maybe you have that kind of device, a stylus device with a small screen which might allow you to do some kind of hover still on those devices. But if you can't see it, it's actually it's one of those wonderful graceful degradation kind of things. You don't have to see the hover state in order for those buttons to work.

[00:07:37]
But I'm sorry, there's no way that you can hover with your finger. You are absolutely right. And we don't have a CSS state for an equivalent type of effects for touch.

