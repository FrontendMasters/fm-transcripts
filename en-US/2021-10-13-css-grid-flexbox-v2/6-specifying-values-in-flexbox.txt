[00:00:00]
>> Now where did I get those numbers from? I'm sure you were wondering, where did I get 22% from? For my next row here, with my next two set of boxes, how are we going to specify the flex spaces for those, and how do we know how the math works out?

[00:00:16]
So let me show you how that works. So let's draw out, for example, our four boxes, There they are, one, two, three, four. And we've already set our gap to be 4% each. So here's 4%, 4%, 4%, because this is space between, so there's no gap on the outside of these boxes.

[00:00:46]
There's only a gap in between. So that is our layout for our 4 box layout. So that's 12%, right? 12%, 4 plus 4 plus 4, 12%. Subtract that from 100%, and we wind up with 88%. That's what we have leftover. So now we'll have to divide that by 4.

[00:01:11]
And we wind up with 22%. That's gonna be the width of each of our boxes. In order to make this, add up to 100% on our row,
>> The gap is only for horizontal spacing or is it also associated with access concepts?
>> Well, because we have all of these contained inside of a row, this gap is only going to be in between our boxes.

[00:01:35]
If we had our flex boxes all wrapping on to another, just wrapping in space all the way down the page as opposed to putting them in artificial rows, I think you get a little bit of gap in between the rows as well. But that is not a thing with the markup that we have here.

[00:01:53]
All right, so now, if I were to make a double box, right, I want this to span across two of these columns on the page. So I have 22%, right, and 22% in my two boxes. So this larger box is gonna have to be 22+22+4, right, that gap in between.

[00:02:25]
So that total comes to 48%, right? So let's set that up. Let's set up a class here. We'll call it span2. And we'll set the flex-basis to 48%, okay? Set the flex-basis to 48%. Then all we need to do is apply that class here in our HTML. So here on row 2, we have these two figures, and I am going to say the figure has a class of span2, and the next figure has a class of, span2.

[00:03:21]
So there we go. All of our boxes are all lining up very, very nicely, okay? If you do wind up wanting a little bit of space in between these rows, you could certainly add here to your row class, you could do something like margin-bottom, for example, of whatever 1rem or something.

[00:03:41]
That would give you a little bit of space in between the rows, if that was important to you, all right? Or you could just leave that out. It just sort of depends on what your design is, and what it is you're trying to build as to whether you would include that or not.

[00:04:02]
Okay, so I wanna give you like 30 seconds, see if you can figure out what the values then would be for span3 and span4. These are going to be the classes that we're going to apply here on row number 2, sorry, row number 3. So we have one box that's gonna take up three columns, one box that takes up one column.

[00:04:30]
And then on row 4, we have one giant box going all the way across the row. So do some quick math, and see if you can figure out what those happened to be. Okay, so let's just check in on that then. So here on row number 3, we're gonna have our figure with a class of span3, right?

[00:04:52]
And here on row 4, we're gonna have a figure with a class of span4. So that's pretty simple on the HTML. And then here in our CSS, what are these values wind up being? So our flex-basis is going to be what? Anybody? Does anybody know, can you put it in the chat?

[00:05:13]

>> I'm seeing several different answers.
>> Several different answers, okay.
>> 74%, 72, 76, 74.
>> 72, 74 or 76%, which one is it? Okay, so let's see. We've got now four boxes or three boxes, right? So 1, 2, 3, 22, 22, 22, right, so far, so good?

[00:05:46]
That's 66. And then we've got 4 and 4. So another eight in between. You don't have to worry about the space that's on the outside of the box cuz there isn't any. We're using space between, so there's no outside space, it's only in between the boxes that we have the gap.

[00:06:02]
So if you said 74%, you are a winner. Nicely done. Okay, so when we go back here, it'll be 74%. And then for span4, what is its flex-basis?
>> 100.
>> 100%. Hopefully you said 100%. 4 boxes of 22% each, that's 88%. 3 gaps of 4 each, that's another 12.

[00:06:36]
So it went into being 100%. So we've got our row 1, that looks good. Row 2, that looks good. Row 3, that looks good. Row 4 is stretching all the way across. The only last thing we have to do now here is with row number 5. And if we take a look at our HTML in row number 5, I set a 1-2-1 distribution.

[00:07:03]
But I'm actually going to put here for figure, the first figure I'm gonna say span or class=span2. Because we may actually want this particular box, presumably the bigger box has got the important information in it. So in terms of the order on the page, we will want that to be listed first in the row.

[00:07:27]
And then the supporting elements which are presumably in the smaller boxes are going to be here later in this row. Sorry, we actually don't even need to put any classes in here for this. So we should have then one fat box, right? There it is, our our span of 2, and then there's 2 individuals.

[00:07:53]
So now how are we going to make this go to that 1-2-1 configuration that I mentioned, what do we do? Anybody have any suggestions for what we could do to fix that problem? Anyone have any suggestions in the chat?
>> Order.
>> Order, yep, so we're gonna set up some order properties.

[00:08:17]
And so I'm just gonna call mine order-1, which will have order: 1 [LAUGH], order-2 will be order: 2, and order-3 will be order number 3, okay? So we can just set those up as individual classes. And then once you have those in place, you can just apply them to your HTML.

[00:08:53]
So we now have a class of span2, and the class of order-2, okay? So both. Remember classes you can stack up more than one in your individual declarations. And then maybe this one here, the second figure will have a class of order-1. And maybe this last one will have a class of In order-3.

[00:09:26]
And if you scroll on down there, it should all work out for you.
>> Just in terms of if any of the elements had focusable elements inside of them when we want to change the order for accessibility reasons, right?
>> Yeah, you definitely have to factor that into your choice of ordering and so forth here, yes, absolutely.

