[00:00:00]
>> So we're gonna move on now to setting this up for media queries. And there is a code pen that will give you the starting state that I have right here if you wanna switch to that code pen. Or you can just continue on in the same code pen which is what I'm going to do and write the rest of the code here just inside of this.

[00:00:21]
So when we go to a tablet then, we need to think about how our various arrangements are gonna change as we move through our various breakpoints. So right now let's just start up here at the top once again, here on our set of four columns. Maybe what we'd like to do is, when we get to our break point, right, cuz right now, these will very happily wrap on to another row, just like Flexbox does.

[00:00:49]
And if you're happy with the way things look, you could absolutely go with that as a look for your web page. Because this is what Flexbox does, right? But if you wanted to make these a little bit prettier and ake them stretch across the page then we would wind up picking a break point here, whatever it happens to be.

[00:01:10]
I have a utility up here, I'm in Firefox, I'm not sure if this is available for Chrome or not. And it's a little item that displays my screen dimensions up here on the top, I have it currently disabled. So if I turn it on it'll just tell me up here on the top of the page what exactly my screen dimensions are.

[00:01:34]
So it's not going to help me here in code pen. But if I was moving the whole window, it would change my numbers up here on the top. So I could just sort of scrunch around and go, you know what? This is getting a little bit tight looking, I think I need to put a break point somewhere in here.

[00:01:49]
So, I've actually already done the work on this though. So what I wanna do is, I wanna add a media query. Actually, we're gonna add two media queries, so first of all, Here, everything that we've put down here so far, for figure span two, span three, span four and these various order properties, these are all for our desktop layout, right?

[00:02:16]
So we actually wanna put those in a media query right away. So let's go ahead and set that up. The row can stay outside of the media query, this is gonna start at mobile dimensions. It will carry into all of your media queries going forward. We actually want it to continue to display flex and row wrap and the space between and the gap, we want all of that.

[00:02:38]
But these values here for flex basis and the ordering and so forth, that might be desktop specific. So let's add a media query at media and then, we'll say something like min width of something like 800 pixels. My screen's blown up so big, it's hard to say for sure.

[00:03:03]
Feel free to adjust to whatever makes sense for you. And we'll indent those there. Okay, so all of that figure, span, span three, span four, order one, two, three, okay? So that's now all inside of our media query for 800 pixels and higher. So when I make my code pen window of the appropriate size, I'll get my formatting back.

[00:03:31]
Okay, so then when we go below 800 pixels, let's say starting around 550, Here, I'm actually going to put in my media query here. Min width, Of 550 pixels. And we can wrap this media query actually around that row declaration. Now why on earth would I do that?

[00:04:04]
Because if the screen gets smaller, we're now not going to be displaying our boxes in Flexbox anymore, right? Okay, so by default, we have a whole bunch of these figures and rows and so forth, they are block level elements, right? Block configuration and by default, they just stack on top of each other.

[00:04:25]
And so by not declaring our Flexbox until we get to our tablet dimension when we actually want things to start showing up on rows, that's a pretty easy way to work with this. Now, the other way that you could do this would be to put your Flexbox declaration here outside of the media query.

[00:04:46]
and you could set your flex basis for everything to 100%. So display at row wrap but everything is 100% or you could go to displaying rather than row wrap. This would be a case where you might say column wrap, so we actually do want to have a series of columns here on the page.

[00:05:07]
Really only one and our flex base is 100%, so that things stack on top of each other. That would be the other way to deal with this. But generally speaking, I just start declaring my Flexbox layout inside of my tablet media query and let things be outside for the mobile layouts.

[00:05:28]
Because they'll just stack on top of each other which is usually what you wanna do anyway. All right, so then here, all we need to do is come up with the next set of values. So in our row here for figure, our default value for figure, which will get overwritten later with the classes that we have and the later values.

[00:05:51]
So previously these were 22% wide, now we want to have still our 4% gap and two boxes on the line. This will actually be a flex basis of 48%, right? Two boxes on a line, two of them. How about our span two, it's probably kinda the same, right?

[00:06:20]
So figure and span two are actually going to both have that same kinda formatting. So everything's pretty good until we get down here towards the bottom of our screen, right? So we've got our row with the four boxes, here it is looking good. Here's row number two, looks good, row number three, not so good.

[00:06:44]
So what would we wanna do at row number three? Most likely, what we wanna do is we wanna have our span three stretched to 100%. But then, the item that was all by itself before, maybe we'd also like that to stretch to 100%. So we have our two boxes stretching to 100%.

[00:07:08]
So here we'll do a span3 with a flex basis of 100%. Okay, so there's that. Now, the second box here from that row, it is doing exactly what we told it to. It's displaying in about half the width and if that's what you want, you can certainly leave that.

[00:07:36]
But it might be that in this case, you want this one to stretch full width of the page. What are we going to do there? Well, we're gonna have to make a new type of class for that. So we might call this, I don't know, Span3-1, something like that, I'm really bad at naming these.

[00:07:55]
Flex basis is also 100%. And then we'll just apply that here in our HTML. Okay, so here class = span3-1, there we go. So there we have two, in this particular case, these are both going to stretch to 100% here. And but when we get the screen larger, oops, we're gonna have to write a class for that too, aren't we?

[00:08:33]
Because it's going to continue to do what we told it to do. When you set it here in your earlier media query, span3-1 has a flex spaces of 100%. That will carry into this later one, that's why we do all min widths. What comes before will continue into the later media queries unless you specifically override those values later.

[00:08:56]
So the span3-1 flex basis of 100% carries into the media query here of 800 pixels unless we declare it to be something else. We probably want this instead, so span3-1, And now, when we make the screen bigger, we get that layout back again. You see how we did that?

[00:09:21]
But when we go smaller, it does exactly what we want it to do, two big boxes stacked on top of each other.
>> Would you not use flex direction column so you can use align and justify?
>> Sure, there's lots of ways that you can do what I'm talking about.

[00:09:38]
It's CSS, there's a bunch of different ways that you can accomplish the same kinda thing. I try to tell you things that are relatively straightforward and easy to understand in the code. But I'm sure you can find other ways of doing this, if it makes more sense to you.

[00:09:54]
That's great, as always comment your code, so that people understand what it is you're doing. What we have left here is, we haven't written our span4, this that's this yellow one right here. That one has not had a class added yet, so we can say span4 has a flex basis of 100%.

[00:10:19]
Here we go, and when you do that, because the value here for span4 is set here to be the same in your tablet media query and then in your desktop media query, you don't actually have to redeclare it. You can if you want to, if it makes your documentation easier to read, so people understand what's happening here by all means leave it in, you haven't hurt anything.But you don't have to have it here inside of your desktop declaration.

[00:10:46]
Because it will carry through from your tablet media query up here, right? We're not changing that particular breakpoint or particular flex basis value across the media queries. All right, so then the last thing to deal with is these boxes down here on the bottom, is that 121 layout.

[00:11:09]
And so here, let's take a look at our HTML again. We had a span2 and then, we had these two figures down here that have just this ordering type of class associated with them. Now, we could take these order classes and we could tie them into the Flexbox layout as well.

[00:11:33]
Could be done, it's probably easier to leave the ordering classes as their own utility classes that you just stack up on top of the flex boxes independently. So now you have the flexibility of taking ordering anywhere you want inside of your design. So if you take that philosophy because it's just a philosophy, technically speaking you can do whatever you want.

[00:11:58]
Then, we might think about adding some additional classes here in some way or another. Whatever it is that you wanna do here to deal with this particular situation. So probably what we wanna do is, we wanna have this span2 here, this first span2, we actually wanna go to 100%.

[00:12:19]
And then, these last two figures we want them to go to 50%. So we'll probably wind up writing some additional classes for that. Following this span3-1, we might have a span2. -four, so normally two, two at desktop, four at a tablet media query, so here we'd say a flex basis of 100% for that.

[00:12:51]
And obviously you could combine these into a single declaration as well, if you wanted. And then, we need to change that up here span2-4. And then we need to adjust that in our desktop, span2, span2-4. Okay, so that's good. And then these two here seem to be doing exactly what we want them to do already.

[00:13:22]
Which is behave like the boxes that we have up here at the top of the screen. So that's pretty much it. That's how you write a grid system here, look at that. So what we did was we came up with a bunch of scenarios in our HTML. We laid them all out, documented them, right?

[00:13:42]
And then, we just went through and wrote a few styles for all of those. So you don't really need a huge complicated responsive design framework to deal with this type of thing. You just need to know how to do a little bit of math and you can put something like this together on your own.

