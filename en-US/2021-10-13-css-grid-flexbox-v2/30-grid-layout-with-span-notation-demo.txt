[00:00:00]
>> Let's take a look at this Mondrian painting example one more time. This time, what I'd like to do is work on a different type of syntax and show you how that works. So, rather than going through all of the details, cuz this is the same example that we just coded in detail using numbers.

[00:00:18]
I'd like to just sort of slide by all of the niceties of background colors and grid gaps and all the rest of that. Let's just slide right on into looking at the new syntax for each one of the positions of these particular cells. I'd also like to talk about, how grid is going anticipate the layout of this webpage in advance.

[00:00:40]
You don't actually have to spell out the position of each one of these cells individually with each one of these declarations the way we just did. So let's just take this one step further, slightly different syntax, specifying less code, which we always love less code. And achieving the same type of layout.

[00:00:59]
So to get started with that, right here on the wrapper, let's start with display, grid, just like we had before. And we're going to have of course our grid, template, rows of 170 pixels, 210 pixels, 61 pixels and 61 pixels, just like we had before. We're also gonna have our grid, template, columns of 124 pixels, 376 pixels, and 42 pixels, just like we had before.

[00:01:40]
So by specifying these in advance you see already that grid is starting to try to arrange things here in space. So it knows that we have four rows and it knows that we have three columns. So what it'll do right out of the box is it'll just say, well, I've got seven different HTML elements that are my children, right?

[00:02:02]
Here in the HTML if you take a look at all of those dibs, those are all of the children. So we can simply, just start putting one box per cell inside of our grid based layout which is really nice. And then of course to this, we can add our gap.

[00:02:22]
And that'll be 30 pixels, 20 pixels. And that'll give us a little bit of space here in between. So as you see here, we start off with this type of arrangement already. So, as you can see right now, we don't even have to specify where letter A is going to be.

[00:02:37]
It's already in the right spot. So we can actually start here with letter C. And this new syntax is gonna look like this. This is going to be grid, hyphen row, of one slash, spanned space two. So that's the way this syntax works. So rather than before, when we said start at one and go to number three and we've specified very specifically which one of those.

[00:03:06]
We're gonna say start at one, and then go across two. So it's sort of more of a relative type of layout type of thing. And so C will do that for us. And of course, we need to add to this grid hyphen column of two, slash span two.

[00:03:25]
So start at two and go across two columns. And so that will just show up there on the page exactly like that. So, a and b now are already in the right places. We don't need to go through and spell them out exactly their locations. Likewise, when we get on down here to something like letter d, okay?

[00:03:52]
We can, we've got d kind of in the right place, it's not tall enough, e is not tall enough. And g needs to come over here to the side. So here for letter d, if we say our grid row, we could simply say this, span two. All right, so this is a second type of syntax.

[00:04:15]
And let's just compare and contrast. So here with letter c we said start at line number one and span two. So just figure out what the next two lines are and the second one. Here, for letter d I've said go across two lines. So there's no exact starting point just span across two lines, just figure out what they are and make it happen.

[00:04:38]
And so that's what it's done here. So that's a second way of writing this type of syntax. It's more relative and we're gonna see that becomes really helpful when we start working on a grid system, an actual grid system. And then so for letter e, we can do something similar here.

[00:04:59]
A grid row of span two. Okay, so that sort of puts things in the right place. And now all we need to do in order to achieve the rest of our layout is to put in our background colors, take out the opacity. And we pretty much got our painting done here in a lot less code just by specifying a few of these particular items on the page.

