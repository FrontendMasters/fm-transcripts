[00:00:00]
>> So we're gonna introduce Flexbox with this little PowerPoint show here. I wanna give you a little bit of background about Responsive Web Design and what it is. And then we're going to talk a little bit more about Flexbox. Including its history and its syntax and things to think about when you work with Flexbox.

[00:00:15]
Then we'll get into some coding. So to start here, Responsive Design was defined by Ethan Marcotte back in May of 2010 now. So 11 years it's been since Ethan Marcotte came up with the idea of Responsive Design. And he defined it as, images that resize and media queries and a grid based layout.

[00:00:38]
Now, when he came up with this concept, the only way to do layouts on a web page were pretty much two ways. One was a table based layout which everybody knew was bad news. And float based layouts, which were a lot more difficult to work with at that point in time.

[00:00:55]
And so fortunately Flexbox has since gone through several iterations and become well-supported by browsers. So the grid based layout is much easier than it used to be. The images that resize have come a long way. We're gonna talk a lot about those. And of course, we're gonna work with media queries all through this course.

[00:01:17]
So a grid based layout, you might be familiar with from Responsive Design frameworks like bootstrap or foundation UI kit. There's many of these frameworks. The concept being that you have some number of columns on the page. And then you're going to group together those columns into a unit.

[00:01:35]
And that will become where you actually display something on your web page. The concept here comes from print design where printers have thought about columns in terms of laying things out for a very long period of time. It helps keep layouts neat and clean and flexible in a lot of ways.

[00:01:54]
These days we tend to be breaking away from this format a little bit. But we will look at it a little bit both in terms of Flexbox and in terms of CSS Grid over this course. So that you can understand this model. We'll also look at some ways people are looking at these types of layouts using different types of technologies.

[00:02:16]
The images that resize have come a long way as well. So last time I recorded this course in 2017, we talked about the picture element. And that was all. It turns out that there are two other ways that are now in HTML5 sizes and source set. Those happen to come out the same month and get supported by edge.

[00:02:36]
At the same month that I was recording this course the last time around, which is why I didn't talk about them. So, picture, sizes, and source set are all very well supported now. We will be talking about those later on today In terms of Responsive images, and how that can work.

[00:02:51]
And then of course, finally, CSS media queries. So this comes straight from the CSS, there's not any JavaScript involved. And for the most part, people have used media queries in terms of screen widths minimum width, maximum width and so forth. But media queries are much more than that, especially today we have a lot more types of media queries that are supported.

[00:03:13]
You can do portrait or landscape. You can do aspect ratios. And you could do a print media query because after all media query is actually all about the media. So you can ask if you're just trying to print out something as opposed to putting it on the screen.

[00:03:31]
So keep that in mind as you work with media queries. They don't all have to be screen widths. So how does Ethan Marcotte ideas hold up today? Well those grid based lands tend to be associated a lot with frameworks. People tend to think of them as very heavy and difficult to work with.

[00:03:51]
And I'm here to tell you it doesn't have to be not if you know what you're doing. That even the images that resize are often forgotten. A lot of people just put up the same picture across all of their devices. Or they go after complicated solutions, maybe something that's JavaScript base.

[00:04:09]
I'm here to tell you that's all baked into HTML and it's well supported. Nothing could actually be easier than responsive images. A lot of developers today are trying to avoid media queries. And there may be some reasons for that. I'm not sure if it's complicated CSS or if it's performance that people are concerned about.

[00:04:28]
But media queries are not that difficult to understand. I hope that after two days of working on this stuff, you'll have a better idea of how media queries work in CSS. And how to read the code correctly to understand where your styles are coming from. I suspect that's part of the reason people don't like media queries.

[00:04:46]
And then of course, everybody comes along and says, well, container queries are gonna solve all my problems. Subgrid is gonna solve all my problems. This is something that I've heard now for 20 years. There's always some latest hottest new technology that's just out of reach that is gonna solve all of our problems.

[00:05:04]
And I'm here to tell you that it's not true. That you have very good technology right now that you can work with even before you get to container queries and subgrid. Which are coming. I haven't covered them in this course because they're still under development at this point in time.

[00:05:20]
But they will be here hopefully sometime soon.
>> How do you decide on the media queries for your projects?
>> How do I decide on the media queries for my projects? What looks good. So in other words, you don't tie your media queries to devices. Because devices change every single day of the week.

[00:05:41]
So it's not gonna be like the old days where you can say definitively where exactly certain media queries should be set. Furthermore, you can have media queries for one part of the page. Because that part of the page needs a certain set of media queries. Then another part of the page maybe have a different set of media queries associated with it to make it look good across break points.

[00:06:03]
So this is part of what I'm talking about in terms of fragmenting the approach to Responsive Design now. So that you can focus on smaller parts of your page instead of media queries to control that part of the page to make that each element on the page look optimal in its layout.

[00:06:21]
So as you move forward working on Responsive Design, keep in mind these guiding principles of the grid based layout. The images that resize and their media queries is something that are gonna define what responsive design is. Define what responsive layouts are, but you don't have to strictly adhere to them the way Ethan Marcotte described them 11 years ago at this point in time.

[00:06:42]
So let's move on then to Flexbox and talk a little bit more specifically about what's going on in the world of Flexbox. Flexbox stands for flexible boxes. And the specification was defined actually around 2008- 2009. And they were never envisioned of laying out whole web pages. This is a theme that we have in CSS.

[00:07:07]
We have hacked our way through layouts for so long. The idea here with Flexbox was that it would lay out parts of webpages that Flexbox was for UI as opposed to entire page layouts. Flexbox is really good at at vertical centering and equal heights. And it's really easy to reorder boxes, which is a wonderful thing.

[00:07:30]
But the big disadvantage with Flexbox, is that it was never designed to be locked down for the layouts. It's really a one dimensional type of layout. And it's very hard to understand exactly what I'm talking about when I say one dimensional layout. But I want you to think about rows.

[00:07:46]
And if you look at web pages today, you can very much see that people are thinking about a row on the page. Maybe it has some things inside of it. Then we have another row on the page with some other things. Another row row on the page, more things.

[00:08:00]
That is because Flexbox thinks about itself in terms of rows as opposed to thinking of itself in two dimensions more like CSS Grid. A couple of pieces of terminology that will be helpful to you at the concept of the main axis and the cross axis, the flex item and the flex container.

[00:08:18]
I'm really not going to talk a lot about flex containers and flex items. Flex containers are parents. Flex items are children. And this has to do with the HTML and the way the HTML is put together. We're gonna talk a lot about it when we start doing code.

[00:08:34]
Because whether an item is a parent or whether it's a child would determine what CSS properties are available to leverage in laying out your web page. Flexbox of course can go in two directions. So if you happen to have the setup for columns. The main axis is the vertical axis.

[00:08:53]
But if you set your Flexbox to rows instead, your main axis becomes the horizontal axis. And the cross axis becomes the vertical axis. I don't hear a lot of people talking about main axis and cross axis. When they talk about Flexbox, they mostly talk about rows and columns.

[00:09:12]
Probably because main axis and cross axis are terms that are a little bit confusing and change with the dimensions of the web page. So, you'll hear me talk a lot about horizontal or vertical. You'll hear me talk a lot about flex containers, flex items, and parents and children.

[00:09:30]
So the three versions are from Flexbox. They started way back, like I said in 2009. We had a display property, the value of which was box. And that would allow us to use some Flexbox properties as you know, browsers rolled out much more slowly back in those days.

[00:09:45]
And so we had all Older browsers that were supporting the syntax. The WU3C had something happened and everybody decided to redefine everything having to do with Flexbox. So we came up with a new syntax that rolled out in 2011. The only browser that ever supported this so called tweener syntax.

[00:10:05]
The syntax of comes in between the old and the new version. The current version that we use now. The only browser that supported that was IE 10. Good times. And so in 2016, we finally had display Flex. We had all the browsers that are supporting it. The browser's have been supporting it now for quite a while.

[00:10:25]
It's a very safe type of technology to use. Now as always, the only time you need to be concerned about this is with IE support at this moment in time. Because of course IE is no longer being updated. I hope you don't have to support IE anymore. But I am aware that there are people mostly working in universities or in government who may still have to support that browser.

[00:10:51]
All of the other modern ones that roll out on a regular basis. Safari, Firefox, Chrome and edge, all of them support Flexbox just fine. There's some games you might be aware of that have been out for some time. Feel free to play these on your own. Flexbox Froggy and Flexbox Defense will focus on really the syntax of how to get Flexbox to work.

[00:11:16]
But it doesn't really teach you the thought behind Flexbox. And so I'm gonna spend more time on how to think about a Flexbox problem rather than on all of the various syntax. So these are games that you can play on your own. There's a ton of properties that are available, you may want to print out some information like this I have here on the slide.

[00:11:39]
I think I have a separate text file that you can refer to for that. Or just take a look at CSS tricks. They have a great page that describes all of the properties and values for flexbox

