WEBVTT

1
00:00:00.160 --> 00:00:02.974
&gt;&gt; Jen Kramer: What do we mean
by CSS Custom Properties?

2
00:00:02.974 --> 00:00:05.617
Anybody wanna think about a definition for
this?

3
00:00:07.786 --> 00:00:10.894
&gt;&gt; Speaker 2: You can create variables or
whatever,?

4
00:00:10.894 --> 00:00:13.530
You can define your own thing in CSS.

5
00:00:13.530 --> 00:00:15.450
&gt;&gt; Jen Kramer: You can define
your own thing in CSS.

6
00:00:15.450 --> 00:00:19.546
Yeah, they're kind of like variables,
but with quirks, and

7
00:00:19.546 --> 00:00:21.492
that's due to inheritance.

8
00:00:21.492 --> 00:00:26.093
So this is the part that concerns
me about CSS Custom Properties.

9
00:00:26.093 --> 00:00:30.207
I think they are the coolest thing ever,
but I understand inheritance and

10
00:00:30.207 --> 00:00:31.742
I understand the cascade.

11
00:00:31.742 --> 00:00:34.692
[LAUGH] And
I know that a lot of people don't.

12
00:00:34.692 --> 00:00:36.614
So this is where the power comes in.

13
00:00:36.614 --> 00:00:38.473
If you can leverage the cascade and

14
00:00:38.473 --> 00:00:42.076
you can leverage inheritance this
stuff becomes amazing, okay?

15
00:00:42.076 --> 00:00:45.491
So you're gonna declare your custom
field within a CSS property.

16
00:00:45.491 --> 00:00:47.552
So the part that's gonna
be most unusual for

17
00:00:47.552 --> 00:00:50.950
you guys that are used to working
with variables, whether it's in SAS,

18
00:00:50.950 --> 00:00:55.039
JavaScript or anywhere else, is the way
that you're gonna declare these variables.

19
00:00:55.039 --> 00:00:57.124
It's a little weird, okay?

20
00:00:57.124 --> 00:01:00.632
Cuz it's still CSS, so
you gotta put it inside of something.

21
00:01:00.632 --> 00:01:05.594
The values are gonna inherit,
but it's CSS inheritance.

22
00:01:05.594 --> 00:01:08.984
Yeah, which means that
there's scoping involved,

23
00:01:08.984 --> 00:01:12.009
depending on where you
declare your variable.

24
00:01:12.009 --> 00:01:14.868
It's gonna drive what gets inherited,
yeah?

25
00:01:14.868 --> 00:01:17.310
We're gonna spend a lot
of time on this today.

26
00:01:17.310 --> 00:01:20.724
And you can use these
things with JavaScript, so

27
00:01:20.724 --> 00:01:23.815
JavaScript can manipulate a CSS variable.

28
00:01:23.815 --> 00:01:26.167
And that's literally all I know about it,
okay?

29
00:01:26.167 --> 00:01:28.076
Cuz I am not a JavaScript person.

30
00:01:28.076 --> 00:01:32.389
So there are articles out there, and I'll
refer you to those articles about how you

31
00:01:32.389 --> 00:01:35.356
can manipulate CSS Custom Properties
with JavaScript.

32
00:01:35.356 --> 00:01:39.957
So here is the can I used, again I took
the screenshot on August 9th, and you can

33
00:01:39.957 --> 00:01:44.716
see here what the support looks like,
in other words none for Internet Explorer.

34
00:01:44.716 --> 00:01:46.245
Sorry, okay?

35
00:01:46.245 --> 00:01:51.654
The other places where it's none is IE,
so basically IE is just the thing, right?

36
00:01:51.654 --> 00:01:55.173
And Blackberry, that's the other one,
and Opera Mini.

37
00:01:55.173 --> 00:01:57.543
Opera Mini tends to not support anything,
it seems like.

38
00:01:57.543 --> 00:02:01.498
So those are your problem areas, okay?

39
00:02:01.498 --> 00:02:05.842
And otherwise it's 92.5%
support on Custom Properties.

40
00:02:05.842 --> 00:02:08.032
When I started talking about this,

41
00:02:08.032 --> 00:02:12.047
I did my first talk about
Custom Properties back in November, and

42
00:02:12.047 --> 00:02:17.159
at that point in time it was at 87%, so
this is growing really, really quickly.

43
00:02:18.601 --> 00:02:23.690
&gt;&gt; Jen Kramer: Okay,
very, very new area here.

44
00:02:23.690 --> 00:02:28.446
So this is the way that we're gonna
wind up declaring our variables,

45
00:02:28.446 --> 00:02:29.845
variables, okay?

46
00:02:29.845 --> 00:02:35.401
Anyone ever seen this selector before,
root?

47
00:02:35.401 --> 00:02:36.803
Yes, you have.

48
00:02:36.803 --> 00:02:37.933
&gt;&gt; Speaker 2: I've written it.

49
00:02:37.933 --> 00:02:39.263
&gt;&gt; Jen Kramer: You've written it?

50
00:02:39.263 --> 00:02:40.741
What do we mean by root?

51
00:02:45.492 --> 00:02:47.920
&gt;&gt; Jen Kramer: I'm looking at a bunch of
programmers who don't know what root is?

52
00:02:47.920 --> 00:02:48.925
&gt;&gt; Speaker 3: The root to the dom.

53
00:02:48.925 --> 00:02:52.609
&gt;&gt; Jen Kramer: Yes,
it's the root of the dom, okay?

54
00:02:52.609 --> 00:02:57.247
Effectively in HTML and CSS,
it's the HTML tag, right?

55
00:02:57.247 --> 00:02:58.469
But as JavaScript developers,

56
00:02:58.469 --> 00:03:01.013
you know that there's actually
a little bit beyond that, right?

57
00:03:01.013 --> 00:03:04.481
So when we say root, we do mean root.

58
00:03:04.481 --> 00:03:06.978
Okay, the very root of the document,

59
00:03:06.978 --> 00:03:10.662
think of that declaration
as global variables, okay?

60
00:03:10.662 --> 00:03:13.675
So now you've scoped your glut
your variables globally, so

61
00:03:13.675 --> 00:03:15.389
here we've got a primary color and

62
00:03:15.389 --> 00:03:18.893
color the primary color cuz that's
I think required by law now right?

63
00:03:18.893 --> 00:03:22.009
And in your in your styling,
you have a primary color.

64
00:03:22.009 --> 00:03:24.245
Here's a gap, okay?

65
00:03:24.245 --> 00:03:28.329
So you can't call them whatever you want,
you're going to start declaring them with

66
00:03:28.329 --> 00:03:32.085
the double dash, that's gonna indicate
that this is a variable, all right?

67
00:03:32.085 --> 00:03:37.058
Then when you refer to it in your code
as you go down here, you're gonna use

68
00:03:37.058 --> 00:03:42.368
the word var, parentheses, and then
call your variable inside of it, okay?

69
00:03:42.368 --> 00:03:45.552
Not difficult,
the syntax is not difficult,

70
00:03:45.552 --> 00:03:48.983
the hard part is the inheritance and
the cascade.

71
00:03:48.983 --> 00:03:52.541
You can do math with it,
as you'll see here in my last example, so

72
00:03:52.541 --> 00:03:53.727
there I am using cap.

73
00:03:53.727 --> 00:03:57.741
So now I'm pulling in a gap with a value
and I'm multiplying it by 5 pixels,

74
00:03:57.741 --> 00:04:00.527
I don't know why I'm doing it but
hey, there it is.

75
00:04:00.527 --> 00:04:04.493
You can declare all kinds of
various things as variables, okay?

76
00:04:04.493 --> 00:04:09.826
So here I've got colors,
widths, URLs, multiple values.

77
00:04:09.826 --> 00:04:12.822
The cubic bezier,
again that's an animation thing, okay?

78
00:04:12.822 --> 00:04:15.064
So all kinds of wild and crazy things.

79
00:04:15.064 --> 00:04:20.175
CSS will do zero error checking for
you just as you've come to expect.

80
00:04:20.175 --> 00:04:25.283
So if you want the say the color
is one rem, you go do that, okay?

81
00:04:25.283 --> 00:04:27.665
The color should not be one rem, but

82
00:04:27.665 --> 00:04:32.286
CSS will be perfectly happy to go on
ahead and run that for you, okay?

83
00:04:32.286 --> 00:04:34.960
So you're going to have to check to
make sure that things make sense.

