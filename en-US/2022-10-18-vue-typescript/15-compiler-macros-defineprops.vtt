WEBVTT

1
00:00:00.110 --> 00:00:03.527
We've talked a lot about moving data
methods computed all of you have done that

2
00:00:03.527 --> 00:00:04.260
successfully.

3
00:00:04.260 --> 00:00:08.391
But the one thing I have intentionally
left off because it's kind of different in

4
00:00:08.391 --> 00:00:11.920
the script setup is the idea of
basically what our compiler macros.

5
00:00:11.920 --> 00:00:16.920
So what our compiler macros Well, let's
go ahead and open up the nav bar here.

6
00:00:18.730 --> 00:00:22.822
And so let me go ahead and
now hide this Yep, perfect.

7
00:00:22.822 --> 00:00:27.290
Okay.So let's go ahead and convert
this over to TypeScript real quick.

8
00:00:27.290 --> 00:00:29.990
So script set up, Lang Ts.

9
00:00:31.700 --> 00:00:36.010
And then, save, that's gone?

10
00:00:36.010 --> 00:00:36.610
That's gone.

11
00:00:36.610 --> 00:00:39.440
Okay, we're gonna comment
out the props for a second.

12
00:00:39.440 --> 00:00:43.750
And then we're just going to quickly
say const nov list, equals a ref.

13
00:00:45.440 --> 00:00:46.550
And rap it just like that.

14
00:00:48.820 --> 00:00:52.659
And so here's an example, right, where
we're progressively enhancing a, whoop,

15
00:00:52.659 --> 00:00:53.930
I have the wrong thing here.

16
00:00:53.930 --> 00:00:54.430
Here we go.

17
00:00:55.810 --> 00:00:57.561
We're progressively enhancing
the component you can see

18
00:00:57.561 --> 00:00:58.280
here with TypeScript.

19
00:00:58.280 --> 00:01:01.745
But you'll notice though that,
actually let me import ref real quick, so

20
00:01:01.745 --> 00:01:04.280
that y'all can not be
distracted by the red squiggly.

21
00:01:05.990 --> 00:01:09.117
I'm not actually going out of my
way to define a custom type for

22
00:01:09.117 --> 00:01:11.170
what is inside of this nav list.

23
00:01:11.170 --> 00:01:13.960
Because, first of all at this moment,
it's fairly straightforward.

24
00:01:13.960 --> 00:01:16.920
And if we look at the ref,
it already knows it's a name and a path.

25
00:01:16.920 --> 00:01:19.955
Now granted, if over time you
start building like nav items and

26
00:01:19.955 --> 00:01:22.074
you want it to follow
a specific structure,

27
00:01:22.074 --> 00:01:25.853
there's certainly a rationale to do so
but this is where It's important to try

28
00:01:25.853 --> 00:01:28.430
to differentiate when something
is valuable to do and

29
00:01:28.430 --> 00:01:32.930
versus when something is just done for
the sake of purity for purity sake.

30
00:01:32.930 --> 00:01:37.600
Now, that said, we still haven't defined
this props though and how do we do that?

31
00:01:37.600 --> 00:01:42.688
And so compiler macros essentially our
views way of providing you functionality

32
00:01:42.688 --> 00:01:47.474
that will not impact the built the bundle
that's ultimately output it And so

33
00:01:47.474 --> 00:01:52.390
we have this basically a helper
function called define props.

34
00:01:52.390 --> 00:01:53.517
And this again once again,

35
00:01:53.517 --> 00:01:56.370
this function is a compiler macro
that's specific to script setup.

36
00:01:56.370 --> 00:01:57.755
So you actually can't use this or

37
00:01:57.755 --> 00:01:59.940
you shouldn't really be
using it outside of setup.

38
00:01:59.940 --> 00:02:03.400
And so inside of this,
this this define props.

39
00:02:03.400 --> 00:02:08.232
What we can do is similarly to how we
normally define prompts, we can just say

40
00:02:08.232 --> 00:02:13.090
tagline And then we can do things like
type: String, and required: true.

41
00:02:13.090 --> 00:02:16.100
So this is where define Props,
this looks pretty familiar.

42
00:02:17.820 --> 00:02:22.103
So we take that concept now, and
let's look at something a little bit more

43
00:02:22.103 --> 00:02:26.530
advanced Let's go ahead and
take a look at the restaurant card.

44
00:02:26.530 --> 00:02:30.970
Here is where we can actually start
to yeah, let's play with this one.

45
00:02:30.970 --> 00:02:31.470
Okay.

46
00:02:32.720 --> 00:02:35.590
So on the restaurant card you'll
see here that we have a prop.

47
00:02:35.590 --> 00:02:36.640
That's a complex type.

48
00:02:36.640 --> 00:02:39.270
It's an object that is
supposed to be a restaurant.

49
00:02:39.270 --> 00:02:42.730
And it also had this amid thing
which we'll talk about in a second.

50
00:02:42.730 --> 00:02:45.250
And then otherwise we need to go ahead and
move this over.

51
00:02:45.250 --> 00:02:47.180
So, let's go and do that real quick.

52
00:02:47.180 --> 00:02:52.110
We'll have set up we'll take care of
that let's comment this block out first.

53
00:02:52.110 --> 00:02:59.453
And then once here, we have const status
Color = computed rap that Arrow function.

54
00:02:59.453 --> 00:03:01.040
That's it.

55
00:03:01.040 --> 00:03:06.433
And then here we have our
delete restaurant and

56
00:03:06.433 --> 00:03:09.340
then that is a function.

57
00:03:10.670 --> 00:03:13.220
And then we will comment this out for
a second because this won't work.

58
00:03:14.820 --> 00:03:15.320
Okay?

59
00:03:16.720 --> 00:03:21.274
Okay so here we have everything and so
using what we just learned about compiler

60
00:03:21.274 --> 00:03:25.621
macros we said that there was a defined
props helper helper method right and

61
00:03:25.621 --> 00:03:29.623
so one things we could do is we could
do the same thing as before we could

62
00:03:29.623 --> 00:03:33.370
say restaurant And it's a type
object as prop type restaurant.

63
00:03:34.830 --> 00:03:39.950
And then we can say require true,
right this seems familiar.

64
00:03:41.730 --> 00:03:45.460
But what if we want to do this a little
bit more like natural TypeScript?

65
00:03:45.460 --> 00:03:48.689
Well, one of things we can do is we
can actually provide the types to

66
00:03:48.689 --> 00:03:49.960
define props.

67
00:03:49.960 --> 00:03:53.050
As a basically through type casting.

68
00:03:53.050 --> 00:03:56.010
So in other words, we could, for
example, call it prop types.

69
00:03:56.010 --> 00:03:57.700
I'll just call it like that.

70
00:03:57.700 --> 00:04:00.227
And we say there is a thing
called a restaurant

71
00:04:00.227 --> 00:04:02.630
that is of type restaurant just like that.

72
00:04:03.910 --> 00:04:08.064
And so the way this will look inside of
your props is rather than defining it

73
00:04:08.064 --> 00:04:12.017
inside of the parameters of the
parentheses If you use the greater than

74
00:04:12.017 --> 00:04:15.769
less than symbol brackets, and
then you just pass in Prop types and

75
00:04:15.769 --> 00:04:20.280
then this provides you a little bit more
of that like organic type script field.

76
00:04:22.800 --> 00:04:27.103
However, one of the things you might be
thinking of is well, okay, so for example,

77
00:04:27.103 --> 00:04:29.420
here we are,
this is pure TypeScript world.

78
00:04:29.420 --> 00:04:33.856
So if you we can't just go like this
is actually a type restaurant and

79
00:04:33.856 --> 00:04:38.368
we can't be like required true you know
default whatever this is not going

80
00:04:38.368 --> 00:04:42.950
to work because this is not an actual
JavaScript object so, If you want to do

81
00:04:42.950 --> 00:04:47.828
something that's required, remember
that inside of typescript as long as you

82
00:04:47.828 --> 00:04:51.920
define a property on an object,
it's by default required.

83
00:04:51.920 --> 00:04:53.250
So that's already on.

84
00:04:53.250 --> 00:04:54.776
If you actually want it to be optional,

85
00:04:54.776 --> 00:04:58.086
then this is where you might put
the question mark as per the part of it.

86
00:04:58.086 --> 00:04:59.750
Actually not Oops, I forgot.

87
00:04:59.750 --> 00:05:01.170
Sorry, go back here.

88
00:05:02.610 --> 00:05:04.300
You would want to put it like this.

89
00:05:04.300 --> 00:05:07.226
And then you're saying that
this prop is optional and

90
00:05:07.226 --> 00:05:08.990
not required on the component.

91
00:05:10.200 --> 00:05:13.039
The thing though,
is that something that we often

92
00:05:13.039 --> 00:05:16.090
do do when it comes to props
is we want a default value.

93
00:05:16.090 --> 00:05:19.087
And so this is something that's
currently in an experimental phase, but

94
00:05:19.087 --> 00:05:21.900
I'll show you how I've seen
some of it done before.

95
00:05:21.900 --> 00:05:27.494
So there's two ways to do this one is that
there is I forgot which Bill this was but

96
00:05:27.494 --> 00:05:32.120
at one point, there was
a proposition to do it like this.

97
00:05:32.120 --> 00:05:37.338
Where you had this use defaults are used
with defaults helper, and then you would

98
00:05:37.338 --> 00:05:43.200
pass in another object that was like
restaurant and then like default values.

99
00:05:43.200 --> 00:05:46.500
For me this is kind of clunky cuz
you have this like define props and

100
00:05:46.500 --> 00:05:50.520
you're wrapping it with use a default
that you're passing in a second argument

101
00:05:50.520 --> 00:05:52.950
that happens to be it feels a little.

102
00:05:52.950 --> 00:05:54.660
Feels a little clunky.

103
00:05:54.660 --> 00:05:58.287
So the way that's currently being
experimented with here in the docs,

104
00:05:58.287 --> 00:06:01.733
which I'll definitely link to, is,
let me blow it up a little bit,

105
00:06:01.733 --> 00:06:04.150
is it's basically reactive destructuring.

106
00:06:04.150 --> 00:06:07.900
So basically, you would actually
define your props as normal.

107
00:06:07.900 --> 00:06:10.637
But then as a result of
using normal JavaScript,

108
00:06:10.637 --> 00:06:14.845
where you destruct the process you would
normally wanna use you just assign

109
00:06:14.845 --> 00:06:17.984
the default like values then
which is actually fairly,

110
00:06:17.984 --> 00:06:22.970
like one to one with actually what we
come to expect with JavaScript actually.

111
00:06:22.970 --> 00:06:25.789
And so, granted again,
at least at the time of this recording,

112
00:06:25.789 --> 00:06:29.350
this is an experimental feature that
needs opt in inside of your build.

113
00:06:29.350 --> 00:06:31.300
But this is the direction
it does looks like.

114
00:06:31.300 --> 00:06:34.600
This is the direction that D3 is heading
as far as using defined props so

115
00:06:34.600 --> 00:06:36.920
that you can provide default values.

116
00:06:36.920 --> 00:06:41.772
In the meantime, though, if you really
want basically what I would recommend

117
00:06:41.772 --> 00:06:44.780
just to keep things simple,
did I delete it?

118
00:06:44.780 --> 00:06:47.520
I did delete it.

119
00:06:47.520 --> 00:06:51.000
Is while the casting is nice.

120
00:06:51.000 --> 00:06:52.150
I honestly don't.

121
00:06:52.150 --> 00:06:58.346
I think for the most part,
it's totally fine to just keep it as is to

122
00:06:58.346 --> 00:07:04.102
just say restaurant type object
as prop type restaurant, and

123
00:07:04.102 --> 00:07:09.870
then just a fine your default
here as part of your definition.

124
00:07:10.910 --> 00:07:13.040
There's nothing wrong with this.

125
00:07:13.040 --> 00:07:15.535
Again, we'll find better ways
of doing it but for now,

126
00:07:15.535 --> 00:07:17.990
if you really do want to default
this is one way to do it.

127
00:07:17.990 --> 00:07:21.031
That said, there's nothing stopping you
as well from like assigning another

128
00:07:21.031 --> 00:07:23.838
reactive value that will then like
take the profit if it's empty set it,

129
00:07:23.838 --> 00:07:27.320
as we know programming, there's a lot
of different ways to do things.

130
00:07:27.320 --> 00:07:30.740
So, don't feel tied in, but for now,
we're gonna assume there's no default.

131
00:07:30.740 --> 00:07:34.680
So, it's totally fine, we'll just use
his typecasting, to do, define prompts.

132
00:07:35.700 --> 00:07:38.270
Okay, it's gonna delete that,
can delete that.

133
00:07:38.270 --> 00:07:39.690
Okay, now we've define our props.

134
00:07:40.990 --> 00:07:44.850
And then actually one sec,
I need to actually import computed.

135
00:07:44.850 --> 00:07:46.910
So this thing stops yelling at me.

136
00:07:46.910 --> 00:07:49.050
And then we have.

137
00:07:49.050 --> 00:07:51.280
Okay, here's the next problem though.

138
00:07:51.280 --> 00:07:53.377
You'll notice though,
that inside of options API,

139
00:07:53.377 --> 00:07:56.453
we typically could refer to the props
directly because it was on the disc object

140
00:07:56.453 --> 00:07:58.270
it was automatically inherited.

141
00:07:58.270 --> 00:08:01.849
But that's no longer the case because
we have it where we have it inside of

142
00:08:01.849 --> 00:08:03.010
defined props.

143
00:08:03.010 --> 00:08:04.250
So how do we get access to it?

144
00:08:04.250 --> 00:08:06.280
Well, we create a variable
that we want to reference.

145
00:08:06.280 --> 00:08:08.890
So typically it's this constant props.

146
00:08:08.890 --> 00:08:09.890
That's simple.

147
00:08:09.890 --> 00:08:15.060
And then that way your,
this becomes props.restaurant.status.

148
00:08:15.060 --> 00:08:17.760
And so you'll see though,
which is just interestingly enough.

149
00:08:17.760 --> 00:08:20.500
Is that TypeScript is yelling at us.

150
00:08:20.500 --> 00:08:23.908
It's saying that hey as of right now and
based on how you defined the props it

151
00:08:23.908 --> 00:08:28.250
might actually be undefined, so
I can't actually run this block of code.

152
00:08:28.250 --> 00:08:32.791
And so this is where type guards come
into play so if we want we could say,

153
00:08:32.791 --> 00:08:36.970
if props dot restaurant exists,
then run all this code, right?

154
00:08:38.100 --> 00:08:40.301
And then as you can see
here with that type guard,

155
00:08:40.301 --> 00:08:42.878
TypeScript knows that it can
assume that type restaurant

156
00:08:42.878 --> 00:08:46.421
will have its see all the properties that
it needs and then it can run through and

157
00:08:46.421 --> 00:08:50.180
that's actually helpful because as we know
when you build your code sometimes we do

158
00:08:50.180 --> 00:08:53.560
miss these little edge cases and
things do break because we forgot to like

159
00:08:53.560 --> 00:08:56.997
yeah in this particular data type
something like this needs to happen before

160
00:08:56.997 --> 00:09:01.630
something like this happens type two does
help you to kind of remind you of that.

161
00:09:01.630 --> 00:09:04.110
However, in our case,
this is a required prop.

162
00:09:04.110 --> 00:09:07.060
So in that case,
the type guard is really not necessary.

163
00:09:07.060 --> 00:09:09.945
So this way you can see it's not
yelling at me cuz I'm promising it,

164
00:09:09.945 --> 00:09:11.677
that it will get the value that it wants.

