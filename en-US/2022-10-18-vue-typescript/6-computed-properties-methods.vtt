WEBVTT

1
00:00:00.170 --> 00:00:03.716
And then let's go ahead and go on to some
of the popular things that we use inside

2
00:00:03.716 --> 00:00:05.810
of Vue is we have computed properties.

3
00:00:05.810 --> 00:00:07.928
And so this is one of my
favorite properties of Vue,

4
00:00:07.928 --> 00:00:11.482
because what you're ultimately doing is
you're creating an ability to easily cache

5
00:00:11.482 --> 00:00:15.440
reactive data that updates automatically
based on another piece of reactive data.

6
00:00:15.440 --> 00:00:18.577
So this is particularly useful when it
comes to like animations, and like data

7
00:00:18.577 --> 00:00:21.856
tracking and that kinda stuff because you
can do some really incredible things and

8
00:00:21.856 --> 00:00:24.706
you don't have to worry about any of
the caching foot guns that you might

9
00:00:24.706 --> 00:00:25.920
typically have to deal with.

10
00:00:25.920 --> 00:00:29.750
And so in this case, for example, we have
this filtered restaurantList, right?

11
00:00:29.750 --> 00:00:32.841
And once again, when people write
a method or a computed property,

12
00:00:32.841 --> 00:00:34.686
they can define whatever they want, but

13
00:00:34.686 --> 00:00:38.440
it's useful to actually be explicit
regarding what it's returning.

14
00:00:38.440 --> 00:00:40.567
So all we need to do here, if we want,

15
00:00:40.567 --> 00:00:44.190
is we can say we're expecting
an array of restaurants.

16
00:00:44.190 --> 00:00:45.486
That's what we're expecting.

17
00:00:45.486 --> 00:00:49.066
And, so that way if someone comes in,
and so let's say they decide to like, so

18
00:00:49.066 --> 00:00:50.370
not this return statement,

19
00:00:50.370 --> 00:00:54.220
this return statement will always
return an array of restaurants.

20
00:00:54.220 --> 00:00:57.901
So let's go ahead and
botch this real quick, and return 123.

21
00:00:59.370 --> 00:01:02.770
You'll see here, hey, wait a second,
this return, it's not right.

22
00:01:04.050 --> 00:01:07.580
And so honestly, if you think about it,
what we're doing here with TypeScript is

23
00:01:07.580 --> 00:01:11.213
kinda similar to what you would expect on
a word processing, word processor, where

24
00:01:11.213 --> 00:01:14.930
if the dictionary catches a mistake, you
kinda want it to let you know about it.

25
00:01:14.930 --> 00:01:17.737
You don't wanna wait till you've
printed it and shipped it off to your

26
00:01:17.737 --> 00:01:20.790
professor for grading, be like,
whoops, I have the typo there, right?

27
00:01:20.790 --> 00:01:23.600
This is one of the things that I
think TypeScript does really well.

28
00:01:23.600 --> 00:01:24.630
And as you can see,

29
00:01:24.630 --> 00:01:29.146
we're really just progressively sprinkling
on what is ultimately documentation

30
00:01:29.146 --> 00:01:33.220
that is then converted into help tooltips
to make our coding lives easier.

31
00:01:34.510 --> 00:01:35.880
So there you go.

32
00:01:35.880 --> 00:01:38.360
We have a list of
restaurants from that list.

33
00:01:38.360 --> 00:01:40.296
Now, okay, and what about this?

34
00:01:40.296 --> 00:01:41.670
numberOfRestaurants.

35
00:01:41.670 --> 00:01:44.741
Well, as you can see here,
numberOfRestaurants has actually been,

36
00:01:44.741 --> 00:01:48.176
this is what in TypeScript they call
type inference, which is basically it's

37
00:01:48.176 --> 00:01:52.200
inferring or assuming what the type
will be based on how the code's written.

38
00:01:52.200 --> 00:01:55.653
So, in this case we're, using enough
vanilla JavaScript here to basically for

39
00:01:55.653 --> 00:01:58.598
TypeScript to recognize that this
is probably gonna be a number, and

40
00:01:58.598 --> 00:02:00.490
in this case it's totally right.

41
00:02:00.490 --> 00:02:03.421
And so, you actually don't need to define
it any more because TypeScript does try

42
00:02:03.421 --> 00:02:05.660
to do a lot of the heavy
lifting whenever possible.

43
00:02:05.660 --> 00:02:08.531
But in case you do wanna be explicit,
once again, let's just do that for

44
00:02:08.531 --> 00:02:09.203
practice sake.

45
00:02:09.203 --> 00:02:12.170
We can just say, okay, we do expect
a number when that comes back.

46
00:02:12.170 --> 00:02:14.852
But once again, some people do
consider this code clutter, again,

47
00:02:14.852 --> 00:02:17.040
I leave that to you and
your team to decide.

48
00:02:17.040 --> 00:02:18.804
But this is also just perfectly valid.

49
00:02:18.804 --> 00:02:25.400
It's already typed, so that in the event
we try to do something funky like this,

50
00:02:25.400 --> 00:02:29.673
actually this would work,
cuz I think it's gonna.

51
00:02:29.673 --> 00:02:32.532
It'll just do some funky things
because now if you're always doing on

52
00:02:32.532 --> 00:02:35.109
the inference part,
you'll see that you can still mess it up.

53
00:02:35.109 --> 00:02:38.877
So when you have things that
are a little bit more contingent on what

54
00:02:38.877 --> 00:02:43.140
the outcome is, I do actually prefer
to be just a little bit more explicit.

55
00:02:44.850 --> 00:02:47.841
And so if we look, though, this signature
method is actually very similar

56
00:02:47.841 --> 00:02:49.786
to data because basically
you have a function and

57
00:02:49.786 --> 00:02:52.730
you're basically after the colon
what you're returning.

58
00:02:52.730 --> 00:02:55.840
So once again, just to show,
we have our data here,

59
00:02:55.840 --> 00:03:00.803
what we're returning after the parameters,
computed properties, same thing.

60
00:03:00.803 --> 00:03:05.267
Okay, so now that we've seen that,
very similar, we're gonna look at methods.

61
00:03:05.267 --> 00:03:08.211
And so this is where the functions that
we're gonna use when inside of our Vue

62
00:03:08.211 --> 00:03:09.370
components.

63
00:03:09.370 --> 00:03:11.529
And so inside of here,
let's start with what we already know,

64
00:03:11.529 --> 00:03:13.550
which is what we expect to be returned.

65
00:03:13.550 --> 00:03:15.786
And so typically though,
when we're using methods,

66
00:03:15.786 --> 00:03:18.848
particularly when it's things like
click handlers and that kinda stuff,

67
00:03:18.848 --> 00:03:21.100
you're typically not
actually returning anything.

68
00:03:21.100 --> 00:03:22.500
That's not really your goal.

69
00:03:22.500 --> 00:03:25.622
And in that case, you'll notice that
when I hover over addRestaurant,

70
00:03:25.622 --> 00:03:28.050
it automatically declares
a return type of void.

71
00:03:28.050 --> 00:03:30.090
Basically, nothing is being returned.

72
00:03:30.090 --> 00:03:31.580
That's all that means.

73
00:03:31.580 --> 00:03:35.306
And so you don't need to be explicit about
that unless, the only time I think this is

74
00:03:35.306 --> 00:03:38.873
really useful is if you wanna make sure
that no one returns, if there's a strict

75
00:03:38.873 --> 00:03:42.710
reason why you don't want people to return
things, you can certainly jot that down,

76
00:03:42.710 --> 00:03:45.030
but otherwise void is very
much an optional thing.

77
00:03:46.580 --> 00:03:49.573
However though, this is where once
again we can see something that

78
00:03:49.573 --> 00:03:52.353
we often deal with when it comes to code,
which is how many of us

79
00:03:52.353 --> 00:03:56.450
when we're working with JavaScript events,
we have a payload that we pass?

80
00:03:56.450 --> 00:03:58.866
And it's like, well,
what kinda payload do I expect?

81
00:03:58.866 --> 00:04:00.690
[LAUGH] This is not very helpful.

82
00:04:00.690 --> 00:04:03.399
So you can always sit here and you can,
like, I'm sure many of us have done

83
00:04:03.399 --> 00:04:06.218
this really, like, payload is going to be,
we've done this before.

84
00:04:06.218 --> 00:04:09.387
[LAUGH] But
we have TypeScript to help us out, again,

85
00:04:09.387 --> 00:04:11.915
we just needed to help
it out a little bit.

86
00:04:11.915 --> 00:04:13.850
And so how do we define types for
our parameters?

87
00:04:13.850 --> 00:04:18.303
Well, it's actually just the colon and
then the type that we expect.

88
00:04:18.303 --> 00:04:20.516
So if we do that for both of these,

89
00:04:22.113 --> 00:04:26.699
You'll see now that it actually
started doing some type checking so

90
00:04:26.699 --> 00:04:32.493
that if we said payload.randomMessage,
you'll see that it's like, hey, whoa,

91
00:04:32.493 --> 00:04:38.060
whoa, whoa, whoa, wait a second random
message does not exist on this payload.

92
00:04:38.060 --> 00:04:40.780
This structure does not exist.

93
00:04:40.780 --> 00:04:44.427
And so, again, another reason why just
this little bit of TypeScript can make

94
00:04:44.427 --> 00:04:47.521
a huge difference in the long run,
especially when we all know that

95
00:04:47.521 --> 00:04:50.339
whether it's yourself that's
maintaining the code base,

96
00:04:50.339 --> 00:04:52.740
we often forget what we set out to intend.

97
00:04:52.740 --> 00:04:55.451
And whereas with this, even if you
come back to this code a month later,

98
00:04:55.451 --> 00:04:56.229
it will yell at you.

99
00:04:56.229 --> 00:04:59.867
You won't dive into a rabbit hole and then
forget that at some point you set a type,

100
00:04:59.867 --> 00:05:03.310
you intended it to be the shape and then
you decided to name it something else.

101
00:05:03.310 --> 00:05:04.669
You don't have to worry
about that anymore.

102
00:05:06.300 --> 00:05:07.478
Otherwise, let's see.

103
00:05:07.478 --> 00:05:08.930
hideForm here.

104
00:05:08.930 --> 00:05:11.879
There's nothing we're doing here besides
basically taking the showNowForm reactive

105
00:05:11.879 --> 00:05:12.649
and turning it false.

106
00:05:12.649 --> 00:05:14.970
So there's nothing to type there.

107
00:05:15.990 --> 00:05:19.280
And then actually, this here is a typo.

108
00:05:19.280 --> 00:05:21.270
Let me just fix this real quick.

109
00:05:21.270 --> 00:05:23.390
There's nothing happening in here, okay.

110
00:05:23.390 --> 00:05:27.768
So that's basically the core functionality
of what most people are using Options API

111
00:05:27.768 --> 00:05:28.580
for, right?

112
00:05:28.580 --> 00:05:31.378
You have your props, you have your data,
you have your methods, and

113
00:05:31.378 --> 00:05:32.400
you have your computed.

114
00:05:33.430 --> 00:05:36.816
So, now that I've kind of thrown that
information out, do people have any

115
00:05:36.816 --> 00:05:39.854
questions about what I went through or
should I dive in any deeper?

116
00:05:39.854 --> 00:05:41.643
Yeah, go for it.
&gt;&gt; I have a question about, so

117
00:05:41.643 --> 00:05:45.460
you talked about how the word
processor is giving you these errors.

118
00:05:45.460 --> 00:05:50.020
What kind of errors, these typo errors,
cause a buildtime error or

119
00:05:50.020 --> 00:05:54.850
a runtime, if I didn't have
the editor telling me what was wrong?

120
00:05:54.850 --> 00:05:56.430
&gt;&gt; Yeah, so let's test that out.

121
00:05:56.430 --> 00:06:00.258
So just to reiterate, so the question
here is around what the error provides in

122
00:06:00.258 --> 00:06:02.410
addition to just the red squiggly line.

123
00:06:02.410 --> 00:06:07.180
So let's go ahead and again, let's do
this randomMessage here and save this.

124
00:06:07.180 --> 00:06:11.900
And so you'll see now if I run npm run
build, oops, I'm in the wrong folder.

125
00:06:11.900 --> 00:06:14.660
npm run build.

126
00:06:14.660 --> 00:06:15.877
Yes, okay.

127
00:06:15.877 --> 00:06:19.920
[LAUGH] Sometimes things don't work when
you want them to, but it did this time.

128
00:06:19.920 --> 00:06:22.086
You'll see that it
actually stops the build.

129
00:06:22.086 --> 00:06:25.031
Now to be clear, for
people new to TypeScript,

130
00:06:25.031 --> 00:06:28.648
it doesn't do runtime
compilation if I'm not mistaken.

131
00:06:28.648 --> 00:06:31.772
So in other words, once you ship this,
it's not gonna retain the types and

132
00:06:31.772 --> 00:06:34.897
then check everything to make sure
everything's fine, this is really for

133
00:06:34.897 --> 00:06:36.105
while you're developing.

134
00:06:36.105 --> 00:06:37.680
That might change in the future.

135
00:06:37.680 --> 00:06:39.120
That's my big caveat.

136
00:06:39.120 --> 00:06:42.382
Maybe browsers will install a way for
it to be brought on and stuff.

137
00:06:42.382 --> 00:06:46.014
But as of this moment, it's really
meant for during development and

138
00:06:46.014 --> 00:06:49.143
then when you build it,
to help block these kinda things and

139
00:06:49.143 --> 00:06:51.660
then basically you're
on your own after that.

140
00:06:51.660 --> 00:06:54.106
[LAUGH] So
this is where things like checking for

141
00:06:54.106 --> 00:06:55.806
your types is still important.

142
00:06:55.806 --> 00:06:58.510
So type guards, so you know sometimes
in functions, you'll be like,

143
00:06:58.510 --> 00:07:00.776
if this is an array, do this,
if this is a string, do this.

144
00:07:00.776 --> 00:07:02.789
You'll still be doing
that with TypeScript,

145
00:07:02.789 --> 00:07:05.266
it won't protect you from
having to write that code, but

146
00:07:05.266 --> 00:07:07.967
what it will do is protect you
from common mistakes like this.

147
00:07:07.967 --> 00:07:12.839
Where, like for example, restaurants,
I called it name at one point, but

148
00:07:12.839 --> 00:07:16.890
at one point I called it title,
too, when I was building this.

149
00:07:16.890 --> 00:07:17.988
And so I was like, wait.

150
00:07:17.988 --> 00:07:18.562
That's right.
And so

151
00:07:18.562 --> 00:07:21.191
that's if we rely on our
brains to remember things,

152
00:07:21.191 --> 00:07:23.414
sometimes we just get
stumble a little bit.

153
00:07:23.414 --> 00:07:26.549
And so it's a nice little reminder
that hey, it doesn't exist,

154
00:07:26.549 --> 00:07:30.490
instead if I can just check real quick,
that's right I named it name and set.

155
00:07:30.490 --> 00:07:35.041
&gt;&gt; Do we need to add types to
the argument inside the filter function?

156
00:07:35.041 --> 00:07:38.825
&gt;&gt; The question here is regarding
this parameter right here.

157
00:07:38.825 --> 00:07:43.660
So, the short answer is,
you don't have to do any of this.

158
00:07:43.660 --> 00:07:47.099
And I think it's something
I do wanna underscore for

159
00:07:47.099 --> 00:07:52.610
a lot of this workshop is that it's really
based on how your team works, right?

160
00:07:52.610 --> 00:07:55.626
Because one of the things I think
made TypeScript difficult to adapt,

161
00:07:55.626 --> 00:07:58.488
especially early on when people
are telling everyone to go all in is

162
00:07:58.488 --> 00:08:00.700
that people felt like they
had to type everything.

163
00:08:00.700 --> 00:08:02.869
And then all of a sudden things
were colliding or didn't,

164
00:08:02.869 --> 00:08:05.810
people's knowledge didn't quite
match up to what they wanted to do.

165
00:08:05.810 --> 00:08:07.635
So then people were
slapping Any on everything.

166
00:08:07.635 --> 00:08:11.487
And so if you don't know,
Any is basically like a cheat code for

167
00:08:11.487 --> 00:08:13.140
TypeScript to shut up.

168
00:08:13.140 --> 00:08:14.050
That's basically what it means.

169
00:08:14.050 --> 00:08:17.164
It's just like, stop yelling at me,
just ignore it.

170
00:08:17.164 --> 00:08:19.924
And at that point, it's basically useless.

171
00:08:19.924 --> 00:08:23.599
And so that's why to me, for this kind of
thing, if I'm looking at this computer

172
00:08:23.599 --> 00:08:27.080
property, honestly I care most
about what's being returned.

173
00:08:27.080 --> 00:08:29.711
In the event that I do think
the filter's gonna have problems and

174
00:08:29.711 --> 00:08:31.930
maybe someone might not
understand the code.

175
00:08:31.930 --> 00:08:34.797
That might be something where I can
come here and just say, okay, just for

176
00:08:34.797 --> 00:08:35.676
documentation sake,

177
00:08:35.676 --> 00:08:38.973
we're gonna make sure people know that the
parameter should be of type restaurant.

178
00:08:38.973 --> 00:08:41.591
But because filter is
a built in array method,

179
00:08:41.591 --> 00:08:44.148
this is nothing I customized, for example.

180
00:08:44.148 --> 00:08:47.056
This is straight up ES6 syntax.

181
00:08:47.056 --> 00:08:50.802
We do know that it basically will iterate
through whatever restaurantList is.

182
00:08:50.802 --> 00:08:57.040
Aand so it's basically to choose
your own adventure kinda bit.

183
00:08:57.040 --> 00:09:00.378
But in this particular case, I might omit
it in this case because I think the key

184
00:09:00.378 --> 00:09:03.483
thing is what you're working with
after everything's been returned.

185
00:09:03.483 --> 00:09:05.244
But again, no right or
wrong answer [INAUDIBLE].

186
00:09:05.244 --> 00:09:05.944
&gt;&gt; But you could.

187
00:09:05.944 --> 00:09:08.309
That's a cool part of it is you could-
&gt;&gt; Yeah, exactly, right?

188
00:09:08.309 --> 00:09:09.607
&gt;&gt; Yeah.
&gt;&gt; And that's kind of what I wanna keep

189
00:09:09.607 --> 00:09:10.507
re-emphasizing with this,

190
00:09:10.507 --> 00:09:12.203
is that if you're like,
I feel a bit more comfortable.

191
00:09:12.203 --> 00:09:14.230
In fact, we'll just leave it in here.

192
00:09:14.230 --> 00:09:15.600
There you go.
You've annotated it,

193
00:09:15.600 --> 00:09:16.659
people know what to expect.

194
00:09:17.860 --> 00:09:22.524
That's all there is to it.

195
00:09:22.524 --> 00:09:26.951
And then just to reinforce this, you'll
see that the restaurant without any type

196
00:09:26.951 --> 00:09:30.752
definition does inherit,
TypeScript does some of that work for you.

197
00:09:30.752 --> 00:09:33.431
It's not like you're just like,
yeah, I got some array thing.

198
00:09:33.431 --> 00:09:37.095
It does know that restauranList
contains this kind of shape.

199
00:09:37.095 --> 00:09:40.234
So it does basically assume that for
every item I'm iterating through,

200
00:09:40.234 --> 00:09:41.936
it's probably inheriting the shape.

201
00:09:41.936 --> 00:09:46.145
And guaranteed there may be reasons why
this may change which is why as mentioned,

202
00:09:46.145 --> 00:09:46.877
if we want to,

203
00:09:46.877 --> 00:09:50.394
we can always augment it as needed
&gt;&gt; So how did it know that restaurant was

204
00:09:50.394 --> 00:09:53.501
a type restaurant without-
&gt;&gt; Yeah, so the reason is because,

205
00:09:53.501 --> 00:09:57.831
remember we did that define component
to tell TypeSscript how to find things.

206
00:09:57.831 --> 00:10:02.820
If we scroll back up to the data, this is
where the DataShape told it that when you

207
00:10:02.820 --> 00:10:07.725
do this dot something,
restaurantList is of type restaurant.

208
00:10:07.725 --> 00:10:11.786
And so this is kind of some of the dance
that has to happen with TypeScript and

209
00:10:11.786 --> 00:10:14.265
Options API because of this keyword.

210
00:10:14.265 --> 00:10:16.109
Cuz if you hover over this,
it's basically useless.

211
00:10:16.109 --> 00:10:18.157
But actually, it's funny though,

212
00:10:18.157 --> 00:10:21.924
you can see here that the
CreateComponentPublicInstance does have

213
00:10:21.924 --> 00:10:24.912
this filteredRestaurantList
with a return on here.

214
00:10:24.912 --> 00:10:26.834
And then can I actually navigate anymore?

215
00:10:26.834 --> 00:10:33.142
But anyhow, so that's how it's
knowing through all that jumping.

