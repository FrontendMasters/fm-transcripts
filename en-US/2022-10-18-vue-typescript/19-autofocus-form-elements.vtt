WEBVTT

1
00:00:00.112 --> 00:00:02.098
Here's what we wanna try to solve first.

2
00:00:02.098 --> 00:00:04.769
When you go to a new form,
what do we typically wanna do?

3
00:00:04.769 --> 00:00:09.084
We want to autofocus on the first
text input, that's fairly common.

4
00:00:09.084 --> 00:00:12.720
But the question of course is,
how do we do that thing?

5
00:00:12.720 --> 00:00:15.522
And so typically what you might do
is you might throw an autofocus on

6
00:00:15.522 --> 00:00:17.475
the development, that sometimes works, but

7
00:00:17.475 --> 00:00:21.051
then we know that with JavaScript loading
and stuff, things get a little bit funky.

8
00:00:21.051 --> 00:00:24.831
So what we're gonna learn right now
is how to actually add autofocus

9
00:00:24.831 --> 00:00:27.429
to forms in a way that is consistent and
works.

10
00:00:27.429 --> 00:00:30.299
What we want is the name to be
the first thing that we focus on.

11
00:00:30.299 --> 00:00:34.410
And so the thing about reactive references
is that they work both in the data

12
00:00:34.410 --> 00:00:37.164
context, and
they work in the template context.

13
00:00:37.164 --> 00:00:40.890
So in other words, if we want an actual
HTML element to be a reference,

14
00:00:40.890 --> 00:00:43.876
we just tell it what the reference
is going to be called.

15
00:00:43.876 --> 00:00:45.066
So in this case,

16
00:00:45.066 --> 00:00:50.848
I usually like to preface any element
that's gonna be an actual element with EL.

17
00:00:50.848 --> 00:00:53.467
So this is kind of back to the jQuery
days where you might prefix it with

18
00:00:53.467 --> 00:00:55.877
a dollar symbol, I just prefer
to keep it consistent that way.

19
00:00:55.877 --> 00:00:59.162
And then I'll call this NameInput,
for example.

20
00:00:59.162 --> 00:01:02.494
And the way this works is up here
inside of our reactive data though,

21
00:01:02.494 --> 00:01:04.193
we do you need to define it though.

22
00:01:04.193 --> 00:01:05.599
And how do we define that?

23
00:01:05.599 --> 00:01:07.835
Well, we have this element
called NameInput, and

24
00:01:07.835 --> 00:01:11.222
it's going to be a reactive reference,
just like the ref is in the template.

25
00:01:11.222 --> 00:01:16.093
But we can actually tell it that it's
going to be an HTMLInputElement.

26
00:01:16.093 --> 00:01:20.375
Or we can say it's, I think null is
the one that's typically an option.

27
00:01:20.375 --> 00:01:24.682
Because here's the thing, when JavaScript
is loading, this thing does not exist, so

28
00:01:24.682 --> 00:01:26.032
it has to be able to be null.

29
00:01:26.032 --> 00:01:28.378
However, we do know once it's loaded,

30
00:01:28.378 --> 00:01:31.207
it will basically put
an input element in there.

31
00:01:31.207 --> 00:01:34.122
And so that's why, believe it or
not, that's all it takes for

32
00:01:34.122 --> 00:01:35.114
this thing to exist.

33
00:01:35.114 --> 00:01:38.883
So if I log right now, log, whoops,

34
00:01:38.883 --> 00:01:43.516
that was the wrong, elNameInput, save it.

35
00:01:43.516 --> 00:01:46.310
So you'll see that if
I go to the new page.

36
00:01:46.310 --> 00:01:51.301
You'll see that it's already
fetching that input automatically.

37
00:01:51.301 --> 00:01:55.804
I don't have to go on mounted,
check to see if that element exists,

38
00:01:55.804 --> 00:01:59.205
assign it to the ref,
just it's there, it works.

39
00:01:59.205 --> 00:02:03.173
And that's kind of a little bit of
the magic sprinkling that Vue does for

40
00:02:03.173 --> 00:02:05.037
us by assigning that ref to here.

41
00:02:05.037 --> 00:02:06.780
So it looks to map those two things.

42
00:02:06.780 --> 00:02:10.386
So that's a key thing to understand.

43
00:02:10.386 --> 00:02:15.603
Okay, now that we have this, we can say
when everything has been mounted properly,

44
00:02:15.603 --> 00:02:19.291
so we'll call our onMounted
life cycle hook, there we go.

45
00:02:19.291 --> 00:02:23.473
So when you have it mounted, your initial
thought is probably going to say, okay,

46
00:02:23.473 --> 00:02:26.477
well I have NameInput, and
I'm just gonna run focus on it.

47
00:02:26.477 --> 00:02:29.757
But as we see here, TypeScript
is yelling at us because, again,

48
00:02:29.757 --> 00:02:32.754
we've said that it might be null,
it might not be defined.

49
00:02:32.754 --> 00:02:36.999
So what I tried to do earlier here is I
was, okay, well, we can check, right?

50
00:02:36.999 --> 00:02:40.677
You typically would say, if it exists,
then just run this thing.

51
00:02:40.677 --> 00:02:45.506
But it's kind of being finicky because
I think it's either the way the HTML

52
00:02:45.506 --> 00:02:48.736
element is being populated,
like truthy value.

53
00:02:48.736 --> 00:02:53.024
So the way this actually works is you
actually wanna provide a question

54
00:02:53.024 --> 00:02:53.759
mark at it.

55
00:02:53.759 --> 00:02:57.691
So we wanna actually unpack the value,
cuz don't forget,

56
00:02:57.691 --> 00:03:00.689
element name input is
a reactive reference.

57
00:03:00.689 --> 00:03:03.996
It's still a reactive reference, even
though it's referring to a div element.

58
00:03:03.996 --> 00:03:07.044
But more importantly this value here,
it could be null.

59
00:03:07.044 --> 00:03:11.349
So by putting the question mark here, I
wanna say this is just vanilla JavaScript.

60
00:03:11.349 --> 00:03:13.765
Basically optional chaining,

61
00:03:13.765 --> 00:03:18.871
checks to make sure this thing is
valid before doing the next thing.

62
00:03:18.871 --> 00:03:23.784
Although it makes me wonder now real
quick, I wanna test this cuz if

63
00:03:23.784 --> 00:03:27.827
elNameInput.value, would
that have done it?

64
00:03:27.827 --> 00:03:29.326
That works too.

65
00:03:29.326 --> 00:03:30.434
So that's the key.

66
00:03:30.434 --> 00:03:33.314
So this is where the unwrapping,
that's why I say I wanted people to get

67
00:03:33.314 --> 00:03:36.292
used to seeing that, is because it's
easy to forget this, to be honest.

68
00:03:36.292 --> 00:03:40.870
And so I was just like, yeah, it's
definitely elName value, no it's .value,

69
00:03:40.870 --> 00:03:41.575
this works.

70
00:03:41.575 --> 00:03:45.215
But I gotta say, there is
something clean about just saying,

71
00:03:45.215 --> 00:03:48.085
whenever this thing is available,
just use it.

72
00:03:48.085 --> 00:03:51.704
So the optional chain here is
a pretty nice solution for this.

73
00:03:51.704 --> 00:03:56.890
Now, when we refresh the page and go to
new, you can see, automatically focused.

