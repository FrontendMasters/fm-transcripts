WEBVTT

1
00:00:00.000 --> 00:00:04.080
We are basically moving on to the exercise
part, where we've talked about how to

2
00:00:04.080 --> 00:00:07.693
actually use title within the options
API for its core functionality.

3
00:00:07.693 --> 00:00:12.083
And so your exercise now is to take
the dish page that we see here, and

4
00:00:12.083 --> 00:00:15.410
now you're gonna reapply all that stuff,
right?

5
00:00:15.410 --> 00:00:18.379
You got to make sure convert it
to TypeScript, then go ahead and

6
00:00:18.379 --> 00:00:19.115
type the data.

7
00:00:19.115 --> 00:00:21.970
Go ahead and type the computer
properties and the methods,

8
00:00:21.970 --> 00:00:23.405
whatever makes sense to you.

9
00:00:26.890 --> 00:00:31.723
So, we have our dishes page, and actually
let me go ahead, and before I forget,

10
00:00:31.723 --> 00:00:35.864
let me switch the branch to finish so
that we add the solution as we go.

11
00:00:35.864 --> 00:00:39.340
So inside of here, first things first,
we wanna use TypeScript.

12
00:00:39.340 --> 00:00:42.395
So let's go ahead and
make it language TypeScript.

13
00:00:42.395 --> 00:00:45.078
And then once again in for
define component,

14
00:00:45.078 --> 00:00:47.274
I'm starting to use autocomplete.

15
00:00:47.274 --> 00:00:50.524
Now that you all know where
these things are coming from, so

16
00:00:50.524 --> 00:00:52.217
the fine component goes here.

17
00:00:52.217 --> 00:00:57.255
Let's collapse that, collapse that,
collapse that much better, less scrolling.

18
00:00:57.255 --> 00:01:01.622
Okay, so the next thing we need
to do now is we need to define

19
00:01:01.622 --> 00:01:05.557
the shape of the data, so
we can say Type DataShape.

20
00:01:05.557 --> 00:01:10.024
And we know filter text
is gonna be a string.

21
00:01:10.024 --> 00:01:15.544
And then we want the dish list
to be of an array of dish,

22
00:01:15.544 --> 00:01:18.509
but dish does not exist yet.

23
00:01:18.509 --> 00:01:23.825
So I'm gonna go ahead over to discard
over here, and I'm gonna grab this here.

24
00:01:23.825 --> 00:01:27.899
We're gonna open up pipes, and then we're
gonna drop a suit alphabetical order just

25
00:01:27.899 --> 00:01:29.834
to make it a little bit easier to follow.

26
00:01:29.834 --> 00:01:36.441
Export type fish now that we have this
exported we can now import the type dish.

27
00:01:36.441 --> 00:01:41.752
There you go from types perfect
everything works as expected,

28
00:01:41.752 --> 00:01:46.772
then over here,
we'll do the same thing import type dish.

29
00:01:46.772 --> 00:01:52.251
Looks like it's not giving me that,
that's fine, and then there we go.

30
00:01:52.251 --> 00:01:53.191
So we have our dish.

31
00:01:53.191 --> 00:01:57.004
So we've modularized our dish type,
and now we're using two files.

32
00:01:57.004 --> 00:02:02.909
And finally,
we have one more thing which is I believe

33
00:02:02.909 --> 00:02:07.906
it's show [SOUND] new form, form, boolean.

34
00:02:07.906 --> 00:02:08.988
Great!

35
00:02:08.988 --> 00:02:10.434
So now what are we doing?

36
00:02:10.434 --> 00:02:13.778
We're returning, we're saying that
this is going to be the data shape.

37
00:02:13.778 --> 00:02:15.877
And so if we take a look now,
this is good.

38
00:02:15.877 --> 00:02:17.475
We have a bunch of dishes.

39
00:02:17.475 --> 00:02:19.485
This list is an array of dishes.

40
00:02:19.485 --> 00:02:21.291
This is fantastic.

41
00:02:21.291 --> 00:02:25.291
And so I guess something actually probably
worth mentioning is you might have noticed

42
00:02:25.291 --> 00:02:28.565
that I tend to notice my arrays with
like the thing list rather than just

43
00:02:28.565 --> 00:02:29.191
the plural.

44
00:02:29.191 --> 00:02:33.826
So instead of dishes or restaurants I
found that one-off errors when it comes to

45
00:02:33.826 --> 00:02:36.188
typing those things that happens a lot.

46
00:02:36.188 --> 00:02:40.120
So dishList makes it really explicit you
tend to autocomplete a little bit better,

47
00:02:40.120 --> 00:02:42.776
and you won't dismiss like
the one letter when typing.

48
00:02:42.776 --> 00:02:47.255
So that's just a little convention that
I do to kind of offset some of that.

49
00:02:47.255 --> 00:02:51.420
Okay, so then inside a computer let's go
and do some things here we got an array of

50
00:02:51.420 --> 00:02:54.142
dishes because that's
what we're filtering for.

51
00:02:54.142 --> 00:02:58.634
And then just for the sake of documenting
a little bit more, the argument is a dish

52
00:02:58.634 --> 00:03:02.154
type which is great, and
number of dishes is gonna be a number.

53
00:03:02.154 --> 00:03:03.429
We don't want that to ever change,

54
00:03:03.429 --> 00:03:06.200
cuz that's what we're actually rendering
when we're counting the thing.

55
00:03:06.200 --> 00:03:10.079
And then inside of methods, both of our
payloads are just gonna be the dish type,

56
00:03:10.079 --> 00:03:12.033
cuz that's what we're doing, right?

57
00:03:12.033 --> 00:03:13.864
We're adding something to the dish, and

58
00:03:13.864 --> 00:03:16.807
then we're deleting something
from the dish, and this is great.

59
00:03:16.807 --> 00:03:20.416
And then actually just to end take this
one too, there's another filter here that

60
00:03:20.416 --> 00:03:23.678
will take care of that and then finally
hide form, doesn't do anything.

61
00:03:23.678 --> 00:03:28.167
And then mounted, we have no, there's
nothing really to do there at this point.

62
00:03:28.167 --> 00:03:33.524
So okay, that is the solution for
the exercise that we just went through.

63
00:03:33.524 --> 00:03:39.175
You might have noticed that I'm typing
tig instead of git, this is not a typo.

64
00:03:39.175 --> 00:03:46.130
This is actually an extension
that is built to await take git.

65
00:03:46.130 --> 00:03:47.291
There we go.

66
00:03:47.291 --> 00:03:49.802
So it's basically a text interface for
git.

67
00:03:49.802 --> 00:03:53.662
So basically, you'll notice that
rather than doing like git status and

68
00:03:53.662 --> 00:03:57.839
seeing what's available and then having
to be like git add src and component,

69
00:03:57.839 --> 00:04:00.759
you know having to figure
that out which takes a while.

70
00:04:00.759 --> 00:04:05.184
Tig status gives me like
a basically a little UI to be like,

71
00:04:05.184 --> 00:04:08.368
actually I forgot they
were already staged.

72
00:04:08.368 --> 00:04:11.678
But you can see that can actually see
what stages different files are in, and

73
00:04:11.678 --> 00:04:14.122
it's easy to individually
select it with my keyboard.

74
00:04:14.122 --> 00:04:17.657
I won't dive into how to use this, but in
case you wanna look into it, just a little

75
00:04:17.657 --> 00:04:20.855
bit of quality life improvement that I
like to use for my command line kit.

76
00:04:20.855 --> 00:04:22.647
So this is jumping ahead a little bit,

77
00:04:22.647 --> 00:04:25.171
but I don't wanna lose
the context on this question.

78
00:04:25.171 --> 00:04:29.796
So the question here from Daniel in
the chat is around the idea of using

79
00:04:29.796 --> 00:04:32.680
generics in TypeScript along the extend.

80
00:04:32.680 --> 00:04:35.492
So, I wanna show you how
things used to look.

81
00:04:35.492 --> 00:04:39.669
Basically how you used to actually use
TypeScript on view to what you did as like

82
00:04:39.669 --> 00:04:40.756
view extend thing.

83
00:04:40.756 --> 00:04:45.403
And what it basically allowed you to do
is like define a bunch of different like

84
00:04:45.403 --> 00:04:46.555
properties on it.

85
00:04:46.555 --> 00:04:50.093
So if we zoom in on this,
you'll see that it's like data methods.

86
00:04:50.093 --> 00:04:53.496
And so interface again, for
those who haven't used text before,

87
00:04:53.496 --> 00:04:56.736
think of it as a different way
to define objects in TypeScript.

88
00:04:56.736 --> 00:04:57.889
That's all you need to know right now.

89
00:04:57.889 --> 00:05:01.437
There's a lot of argument between
which one you should use.

90
00:05:01.437 --> 00:05:05.771
Just think of another an alias for
type for now.

91
00:05:05.771 --> 00:05:09.140
And so this allows you to
create like generic types, so

92
00:05:09.140 --> 00:05:12.814
that like the concept of generics and
type is a messy topic.

93
00:05:12.814 --> 00:05:15.664
In my opinion, and I think it's where
a lot of you'll actually get messed up.

94
00:05:15.664 --> 00:05:18.641
Because it's one thing to
annotate what you intend to do,

95
00:05:18.641 --> 00:05:21.701
it's another thing to abstract
it into generic concepts.

96
00:05:21.701 --> 00:05:25.432
Oftentimes when you look at TypeScript
generics, you'll notice that whenever you

97
00:05:25.432 --> 00:05:29.163
see single letters in TypeScript stuff,
that's when you basically they're using

98
00:05:29.163 --> 00:05:32.123
generics, because they're
basically placeholder variables.

99
00:05:32.123 --> 00:05:33.279
Where I will be very explicit.

100
00:05:33.279 --> 00:05:36.331
We're not covering that in this because,
I do think, it tends to dive

101
00:05:36.331 --> 00:05:39.880
just a little too far for people when
they're getting started with TypeScript.

102
00:05:39.880 --> 00:05:43.104
Most people can just use the straight
annotation, and that will already do

103
00:05:43.104 --> 00:05:46.189
wonders for helping them just document
their code a little bit better.

104
00:05:46.189 --> 00:05:48.392
But for
those that are interested in TypeScript,

105
00:05:48.392 --> 00:05:50.181
I don't wanna leave y'all behind too.

106
00:05:50.181 --> 00:05:54.062
And so just so you know, rather than
having an extend, the question here is in

107
00:05:54.062 --> 00:05:57.365
view three with a defined component,
where does it go from here?

108
00:05:57.365 --> 00:06:01.367
There is a great blog post here,
where he talks about how it works.

109
00:06:01.367 --> 00:06:04.509
And so basically,
you can see here for those wondering,

110
00:06:04.509 --> 00:06:08.306
imagine you wanna have like a function
that generates a specific type

111
00:06:08.306 --> 00:06:11.856
of component where it comes to
these types of every single time.

112
00:06:11.856 --> 00:06:13.734
So these are generally called factories.

113
00:06:13.734 --> 00:06:16.735
So you can see here that like
it's an input select, but

114
00:06:16.735 --> 00:06:19.550
we want very specific things
to get attached to it.

115
00:06:19.550 --> 00:06:21.396
And so there is a way where basically,

116
00:06:21.396 --> 00:06:24.179
you can define a component
that does take these generic.

117
00:06:24.179 --> 00:06:27.160
You see these ts here, so
you can define it, pass it in.

118
00:06:27.160 --> 00:06:28.410
There is a way for it to happen.

119
00:06:28.410 --> 00:06:31.618
So if you understand what generics are
you're interested in this I will make sure

120
00:06:31.618 --> 00:06:32.949
that this is added as a resource.

121
00:06:32.949 --> 00:06:37.654
Okay, so now that we've had like the core
functionality of options API sort of

122
00:06:37.654 --> 00:06:42.236
taken care of, we're gonna start moving
our way now into composition API.

