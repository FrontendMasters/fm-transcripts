WEBVTT

1
00:00:00.360 --> 00:00:04.315
So we're gonna do now we're gonna graduate
on to doing more advanced event handlers.

2
00:00:04.315 --> 00:00:08.787
So let's take for instance
the newRestaurant.name that we have here.

3
00:00:08.787 --> 00:00:11.593
For those that don't know V model
is a directive that lets you

4
00:00:11.593 --> 00:00:14.674
automatically update the value of
the input and track it while also

5
00:00:14.674 --> 00:00:17.995
simultaneously checking the input
event and then updating set field.

6
00:00:17.995 --> 00:00:20.429
So to show that in execution here,
what we're gonna do,

7
00:00:20.429 --> 00:00:22.510
actually I'll just put it here.

8
00:00:22.510 --> 00:00:26.631
Restaurant or is it new restaurant,
newRrestaurant.name,

9
00:00:26.631 --> 00:00:28.750
newRestaurant.name, okay?

10
00:00:28.750 --> 00:00:31.631
So here, when we go inside of
restaurants new and I type,

11
00:00:31.631 --> 00:00:35.370
you'll notice that everything's
updated as you want.

12
00:00:35.370 --> 00:00:40.820
But what have we only wanted to update
say like when someone hits the space bar?

13
00:00:40.820 --> 00:00:43.046
Let's just do something
a little bit different.

14
00:00:43.046 --> 00:00:46.732
Well, the way we would actually do this
we would need to hijack what's going on.

15
00:00:46.732 --> 00:00:50.039
So V model now no longer is work because
this is going to capture everything that

16
00:00:50.039 --> 00:00:50.648
we type on it.

17
00:00:50.648 --> 00:00:53.383
So what we're going to do now is we're
gonna break V model up into its two

18
00:00:53.383 --> 00:00:56.119
distinctive parts and that's what
all people don't realize is that,

19
00:00:56.119 --> 00:00:58.829
V model is really just syntactic sugar for
what I'm about to show you.

20
00:00:58.829 --> 00:01:03.377
So first thing first is your basically
essentially binding the value of

21
00:01:03.377 --> 00:01:07.258
the element to this dynamic thing,
newRestaurant.name.

22
00:01:07.258 --> 00:01:11.580
And then what it normally does with the V
model is it also does an input event

23
00:01:11.580 --> 00:01:16.041
that will then basically say, again,
this is a little bit pseudocode, but

24
00:01:16.041 --> 00:01:17.589
event.target.value.

25
00:01:17.589 --> 00:01:19.906
That's like at a high level,
what it's essentially doing,

26
00:01:19.906 --> 00:01:21.750
it is combining all that into one piece.

27
00:01:21.750 --> 00:01:24.700
Making your life a lot easier because
most of the time we're not trying

28
00:01:24.700 --> 00:01:27.850
to hijack the thing, but let's say we
wanna hijack the thing in that we only

29
00:01:27.850 --> 00:01:30.620
wanted to update whenever
we hit the space bar.

30
00:01:30.620 --> 00:01:35.004
So I'll use the update name
function that we're going to call

31
00:01:35.004 --> 00:01:37.040
whenever this is being hit.

32
00:01:38.400 --> 00:01:41.100
So now if we go ahead and
declare update name.

33
00:01:42.120 --> 00:01:45.750
It's a function, and to show that
it works, we're just gonna log.

34
00:01:45.750 --> 00:01:50.873
Hello, all right, so over here
we'll see that when I go ahead and

35
00:01:50.873 --> 00:01:54.870
type, you see that hello
is being triggered.

36
00:01:54.870 --> 00:01:58.140
That works as expected,
but we wanna do something.

37
00:01:58.140 --> 00:01:59.310
We wanna do a little bit more than that.

38
00:01:59.310 --> 00:02:01.360
We wanna actually inspect what's going.

39
00:02:01.360 --> 00:02:03.982
If this is your first time
working with custom events,

40
00:02:03.982 --> 00:02:06.889
what you need to know is that,
when you have this event here,

41
00:02:06.889 --> 00:02:11.280
it's automatically past the event object
as part of its default parameter.

42
00:02:11.280 --> 00:02:15.402
So here what we can do is if I go ahead,
I'm just gonna type out event oftentimes

43
00:02:15.402 --> 00:02:19.720
referred to as E, but I'm gonna type event
and let's log out the event this time.

44
00:02:20.780 --> 00:02:22.815
We'll see now that when we go to New and

45
00:02:22.815 --> 00:02:26.885
type, you see that the input event is
actually being called and this is great

46
00:02:26.885 --> 00:02:31.210
because what this means is we can now
do something with said thing, right?

47
00:02:31.210 --> 00:02:34.740
It has the data, it has whatnot and okay.

48
00:02:34.740 --> 00:02:36.400
So, this is pretty good.

49
00:02:36.400 --> 00:02:39.673
But you'll notice though, actually, the
browser actually giving us a hint already.

50
00:02:39.673 --> 00:02:42.587
But it's not just any event,
it's an input event and so

51
00:02:42.587 --> 00:02:46.557
what we can do right is because right
now if we try to do like event.data it's

52
00:02:46.557 --> 00:02:50.616
not really going to tell us anything
because here's the thing about events.

53
00:02:50.616 --> 00:02:52.572
Is that at least in the primary or

54
00:02:52.572 --> 00:02:57.292
in the form that it's in right now
there's no typing on, it right it's any.

55
00:02:57.292 --> 00:03:01.228
So you might be like, okay, I got this,
I'm gonna call it an event, yeah,

56
00:03:01.228 --> 00:03:04.814
I'm smart and then you're gonna realize,
this is pretty generic.

57
00:03:04.814 --> 00:03:08.128
It's just like this is an event
that takes place in the DOM,

58
00:03:08.128 --> 00:03:11.642
that is essentially the any
events to be totally honest, yes,

59
00:03:11.642 --> 00:03:14.385
you're being descriptive
that it's an event.

60
00:03:14.385 --> 00:03:16.655
But really,
we could use a little bit more help.

61
00:03:16.655 --> 00:03:19.445
And so what we do know is
that it's an input event.

62
00:03:20.605 --> 00:03:25.579
And when you get the input event, now the
magic happens because all the stuff that

63
00:03:25.579 --> 00:03:28.943
you can want to say, yep,
all the properties that come

64
00:03:28.943 --> 00:03:33.260
with that object now suddenly
appeared in your autocomplete.

65
00:03:33.260 --> 00:03:36.882
So we can basically do that, okay,
let's log the data for this for example or

66
00:03:36.882 --> 00:03:38.690
maybe let's see, do they have code?

67
00:03:38.690 --> 00:03:39.610
Maybe code would be better.

68
00:03:41.360 --> 00:03:44.933
Nope, not on this, that's right I
know why that's it but it's fine,

69
00:03:44.933 --> 00:03:47.670
okay, so then here, so we'll log the data.

70
00:03:47.670 --> 00:03:50.170
So we come back in here now
let me clear the console.

71
00:03:50.170 --> 00:03:53.580
Asdf space, okay, great.

72
00:03:53.580 --> 00:03:54.400
So now what did I say?

73
00:03:54.400 --> 00:03:56.830
I said I wanted to assign
it when that happens.

74
00:03:56.830 --> 00:04:00.042
So what we can do is we can say if data,

75
00:04:00.042 --> 00:04:05.970
if event.data is equal to the space
character, then what do we do?

76
00:04:05.970 --> 00:04:11.580
We can say new restaurant.name
is actually a .value.name.

77
00:04:11.580 --> 00:04:17.470
See, it'll get you,
that will be equivalent to event.target.

78
00:04:17.470 --> 00:04:18.046
There you go.

79
00:04:18.046 --> 00:04:20.598
So again,
data itself is not auto completing for

80
00:04:20.598 --> 00:04:24.084
whatever reason, you're thinking
like event that target like,

81
00:04:24.084 --> 00:04:28.460
why is it and I think basically the reason
why we can autocomplete this, all right.

82
00:04:28.460 --> 00:04:32.492
You're not seeing value anywhere is
because TypeScript doesn't know what

83
00:04:32.492 --> 00:04:34.766
event.target is, for whatever reason.

84
00:04:34.766 --> 00:04:40.493
And so what you can do instead though
is you can basically tell that,

85
00:04:40.493 --> 00:04:46.021
you can tell TypeScript by wrapping
your value in a parenthesis,

86
00:04:46.021 --> 00:04:50.060
and using type casting
that is an HTML element.

87
00:04:50.060 --> 00:04:52.871
So your event target you know,
because again you're the one coding this,

88
00:04:52.871 --> 00:04:55.739
you're like, I got this it's not gonna
random and then we get swapped out.

89
00:04:55.739 --> 00:05:02.417
And from here this is where the value
property actually does live here,

90
00:05:02.417 --> 00:05:07.300
so now if we save this and
swap that over then, yay.

91
00:05:07.300 --> 00:05:11.300
Wait, let me clear
the console first space.

92
00:05:11.300 --> 00:05:13.720
Now venue A,
the full value actually does appear.

93
00:05:13.720 --> 00:05:17.197
So here's the thing about the syntax
though is that it takes a little getting

94
00:05:17.197 --> 00:05:20.130
used to because this is not
naturally how we would write it.

95
00:05:20.130 --> 00:05:24.900
Honestly, most of us would expect
to just do event.target.value.

96
00:05:24.900 --> 00:05:27.340
And while technically it'll work.

97
00:05:27.340 --> 00:05:30.680
So let's see expected me
force this real quick.

98
00:05:31.950 --> 00:05:35.280
Okay, so I'm gonna let TypeScript
yell at me for now, this is fine.

99
00:05:35.280 --> 00:05:36.050
That's your boo yo.

100
00:05:37.160 --> 00:05:39.948
Yeah, so it does technically work.

101
00:05:39.948 --> 00:05:44.141
And so this is where I honestly I think
part of the issue sometimes comes in

102
00:05:44.141 --> 00:05:48.491
with when people start opting into
TypeScript very like wholeheartedly.

103
00:05:48.491 --> 00:05:51.886
Is that they get into this weird thing
where they're like, wait, this thing that

104
00:05:51.886 --> 00:05:55.000
I'm used to doing now feels really
awkward like, what am I supposed to do?

105
00:05:55.000 --> 00:05:55.918
Like, I guess I can.

106
00:05:55.918 --> 00:06:01.771
If event.target.value exists, then log
this, but then it's like, okay, well,

107
00:06:01.771 --> 00:06:08.280
it's still saying that event target might
be knows, maybe I should get rid of that.

108
00:06:08.280 --> 00:06:12.723
But then it's like, well, event.target
could be any, so you see that like type is

109
00:06:12.723 --> 00:06:15.930
kind of going like,
I don't know what it's supposed to be.

110
00:06:15.930 --> 00:06:20.715
And so that's why typically,
then you would just yeah, so

111
00:06:20.715 --> 00:06:27.140
we would just wrap this and then say as
HTML input element, and now it's happy.

112
00:06:29.670 --> 00:06:35.000
And so now we can take this
whole thing and drop that here.

113
00:06:35.000 --> 00:06:40.860
And now that we have that we can go
ahead new name.value, this is great.

114
00:06:40.860 --> 00:06:43.800
So once again, we can test this by going,

115
00:06:43.800 --> 00:06:48.942
if we don't hit the space at all and
just say like, then website create.

116
00:06:48.942 --> 00:06:52.577
Nothing's happened because it never got
assigned me just delete that now or

117
00:06:52.577 --> 00:06:54.071
it can actually wipe that out.

118
00:06:54.071 --> 00:07:00.033
I do bend space you see that it got
assigned up here test recommend create,

119
00:07:00.033 --> 00:07:02.257
now it's actually a sign.

120
00:07:02.257 --> 00:07:04.087
Assigning credit correctly.

121
00:07:04.087 --> 00:07:08.046
So, again hijacking events can be a little
bit tricky but because you can typecast if

122
00:07:08.046 --> 00:07:11.668
you, again if you're telling types with
what it's going to be, it is nice to

123
00:07:11.668 --> 00:07:15.224
because once, again it's easy to
forget what you're putting things on.

124
00:07:15.224 --> 00:07:19.178
So ultimately, it is a basically a way for
you to document what your intentions are,

125
00:07:19.178 --> 00:07:20.530
how it's supposed to work.

126
00:07:20.530 --> 00:07:23.591
And then people can a lot more
easily come into this update name,

127
00:07:23.591 --> 00:07:25.516
in case it's buggy in the future and go,

128
00:07:25.516 --> 00:07:29.385
okay, this is what I'm kind of looking
at without even looking at the template.

129
00:07:29.385 --> 00:07:31.199
They can already do
a lot of work from that.

