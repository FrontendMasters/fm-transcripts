WEBVTT

1
00:00:00.250 --> 00:00:04.209
What I'd like you to do is I'm gonna
go ahead and commit this code and

2
00:00:04.209 --> 00:00:07.270
then you're gonna practice
creating a dishStore.

3
00:00:07.270 --> 00:00:09.962
And so now we're gonna migrate that
over and see how far you can get and

4
00:00:09.962 --> 00:00:11.555
then I'll see you all on the other side.

5
00:00:17.018 --> 00:00:20.704
I know for me once I started using
Pinia like I was just so glad to not

6
00:00:20.704 --> 00:00:24.592
have to write mutations anymore and
just do the thing I want you to do,

7
00:00:24.592 --> 00:00:27.564
thank you and track it for
me like all that goodness.

8
00:00:27.564 --> 00:00:32.630
Okay so, let me go and make sure I
push up the latest 10 exercise branch.

9
00:00:32.630 --> 00:00:35.694
I think some people might have
done it I didn't make, so

10
00:00:35.694 --> 00:00:38.702
what I did do I guess for
the purpose of record keeping.

11
00:00:38.702 --> 00:00:42.308
Is that if you check out the 10
dash exercise branch you'll notice

12
00:00:42.308 --> 00:00:46.970
that restaurant page has been properly
like refactored to use all of this store.

13
00:00:46.970 --> 00:00:50.082
So basically a couple of things just
to point out is that the number of

14
00:00:50.082 --> 00:00:51.895
restaurants have actually restored.

15
00:00:51.895 --> 00:00:54.385
Because in this case we're doing
the filtered restaurant list and

16
00:00:54.385 --> 00:00:56.348
I haven't exactly moved
that to the store just yet.

17
00:00:56.348 --> 00:00:59.914
So this is a different type of number
of restaurants versus the store number

18
00:00:59.914 --> 00:01:00.763
of restaurants,

19
00:01:00.763 --> 00:01:04.059
which is like call it the master copy
of all the stores in perpetuity.

20
00:01:05.760 --> 00:01:11.434
Okay, so with that your job was
to refactor the dishes page so

21
00:01:11.434 --> 00:01:13.560
let's go and do that.

22
00:01:13.560 --> 00:01:17.707
So creating a new store
was the DishStore.ts and

23
00:01:17.707 --> 00:01:21.520
then we'll import defineStore.

24
00:01:21.520 --> 00:01:25.677
And then once we do that we can export
a const called useDishstore, and

25
00:01:25.677 --> 00:01:29.210
then define the store and
what's the idea gonna be called?

26
00:01:29.210 --> 00:01:33.734
We're gonna call it Dishstore, and
then we'll pass it an object for

27
00:01:33.734 --> 00:01:37.880
the state and so we know that
the state is gonna need some shape.

28
00:01:37.880 --> 00:01:42.519
So let's go ahead and just define that
now, so we'll call that StateShape, and so

29
00:01:42.519 --> 00:01:46.320
for those, wondering about like,
naming is a hard thing, right?

30
00:01:46.320 --> 00:01:50.229
We talk a lot about that in programming,
but the one thing I like about keeping

31
00:01:50.229 --> 00:01:54.095
some of my states like types, especially
in line in my components or files.

32
00:01:54.095 --> 00:01:57.055
Is that I don't have to worry about
it conflicting with something else,

33
00:01:57.055 --> 00:02:00.598
because obviously StateShape is gonna mean
a lot of different things across different

34
00:02:00.598 --> 00:02:01.193
components.

35
00:02:01.193 --> 00:02:04.282
But for this particular store,
StateShape is just for this store so

36
00:02:04.282 --> 00:02:08.470
you don't have to worry about like, I'm
gonna call it DishState, state like store.

37
00:02:08.470 --> 00:02:11.759
That's only relevant when you
share it across multiple files but

38
00:02:11.759 --> 00:02:16.080
don't be afraid to inline your types
directly on the file that is working.

39
00:02:16.080 --> 00:02:19.290
I'm a big fan of like,
I call it like data driven refactoring,

40
00:02:19.290 --> 00:02:23.000
where you actually show that you
have repeated code across paces.

41
00:02:23.000 --> 00:02:26.128
Then that's when you take the time to
actually modularize it, start distracting,

42
00:02:26.128 --> 00:02:27.530
refactoring.

43
00:02:27.530 --> 00:02:31.416
So that said, we do know for a fact
that we'll have a list similarly, and

44
00:02:31.416 --> 00:02:35.900
we'll have a dish that will be an array,
so that's basically all we need to know.

45
00:02:35.900 --> 00:02:43.223
So there's my list and then I can grab
all of this stuff here bump up about

46
00:02:44.853 --> 00:02:50.347
My gosh, it's not scrolling the way I
want it to all right, doing it manually.

47
00:02:50.347 --> 00:02:55.284
Great cut then we can now
define that here great

48
00:02:55.284 --> 00:03:00.473
that looks good then filterlist or
dishlist, so

49
00:03:00.473 --> 00:03:06.500
we say dishlist equal
useDishStore like that.

50
00:03:06.500 --> 00:03:10.039
Although I realize the dishstore should
actually be dishstore first, and

51
00:03:10.039 --> 00:03:11.390
we'll use that.

52
00:03:11.390 --> 00:03:13.998
And then we'll say DishStore dot list,
just for

53
00:03:13.998 --> 00:03:16.871
like helping things clean up
a little bit there we go.

54
00:03:16.871 --> 00:03:21.730
On this list that filter does
not exist on property ref dish

55
00:03:21.730 --> 00:03:25.828
there's a duplicate
reference that's why dish,

56
00:03:25.828 --> 00:03:30.037
dish dish,
dish,and then dishlist that's fine.

57
00:03:30.037 --> 00:03:35.253
The only thing though that's
kind of interesting is that it

58
00:03:35.253 --> 00:03:42.240
is saying that dish does not match dish,
this is an interesting overload okay,

59
00:03:42.240 --> 00:03:46.648
why is it yelling at me
well that makes sense.

60
00:03:46.648 --> 00:03:50.680
I never actually defined the state shape
I defined it up here did not use it so

61
00:03:50.680 --> 00:03:53.440
now that I've saved it,
now this error goes away.

62
00:03:53.440 --> 00:03:56.894
Again so what's nice is that
as you sprinkle in TypeScript

63
00:03:56.894 --> 00:04:00.358
it shows you the errors that
makes sense as you go, right?

64
00:04:00.358 --> 00:04:04.179
And so as we can see here it's not overly
intrusive and it's overall throughout

65
00:04:04.179 --> 00:04:07.384
the switcher, you've seen a multi
line multiple times catch me.

66
00:04:07.384 --> 00:04:09.676
In an area where I might have just
moved on and just be like, hey,

67
00:04:09.676 --> 00:04:11.934
something's funky here,
you might have left something off.

68
00:04:11.934 --> 00:04:15.742
And that is really valuable for
us as developers so

69
00:04:15.742 --> 00:04:18.560
let's keep going number of dishes.

70
00:04:18.560 --> 00:04:21.506
We're going to keep this the same
because as I mentioned earlier,

71
00:04:21.506 --> 00:04:24.520
this is actually contingent on
the filter text that's happening.

72
00:04:24.520 --> 00:04:26.910
And so we're gonna leave that alone
we're not gonna worry about that.

73
00:04:26.910 --> 00:04:32.529
But all this stuff, these are actions
that we can take so let's actually yes,

74
00:04:32.529 --> 00:04:36.970
I can take this, so
these actions are gonna get defined here.

75
00:04:38.770 --> 00:04:41.212
Actions, boom and then we'll take that and

76
00:04:41.212 --> 00:04:45.840
then once again actions should be just
like normal functions not arrow functions.

77
00:04:45.840 --> 00:04:51.072
Because we're gonna need to
access the entire store, and

78
00:04:51.072 --> 00:04:56.195
then from here we can basically
say state dot this dot list

79
00:04:56.195 --> 00:05:01.124
dot push dot payload,
lists dot push, that's good.

80
00:05:01.124 --> 00:05:04.640
That's not necessary right
now then we can say,

81
00:05:04.640 --> 00:05:10.043
this dot list is equal to this dot list
dot filter that filters everything,

82
00:05:10.043 --> 00:05:14.100
they'll go ahead and filter everything.

83
00:05:14.100 --> 00:05:18.806
So now when we come to refactor this, we
still need this hideform functionality, so

84
00:05:18.806 --> 00:05:21.326
it's for
that reason that we'll go ahead and

85
00:05:21.326 --> 00:05:24.670
just do dishStore.addDish
will be dropping the payload.

86
00:05:25.770 --> 00:05:29.856
However, for deleteDish,
this is basically identical so

87
00:05:29.856 --> 00:05:34.197
really we don't need to actually
even create a function here.

88
00:05:34.197 --> 00:05:38.807
What we can do is inside of
word delete dish exists we'll

89
00:05:38.807 --> 00:05:42.154
just call it dishstore dot deletedish.

90
00:05:42.154 --> 00:05:45.880
And one of the things I really liked about
this sort of modular declaration of store

91
00:05:45.880 --> 00:05:48.958
because some people will be like,
well, I wanna destructure it and

92
00:05:48.958 --> 00:05:50.350
I wanna like make it trimmer.

93
00:05:50.350 --> 00:05:53.623
But think about it,
the fact that immediately on line 31 this

94
00:05:53.623 --> 00:05:56.732
is coming from a global store
that is incredibly valuable.

95
00:05:56.732 --> 00:06:00.050
I think for debugging, especially as we
know, as code bases get more complex,

96
00:06:00.050 --> 00:06:02.785
the likelihood for name clashing and
that kind of stuff happens.

97
00:06:02.785 --> 00:06:07.475
So to me, just being a little bit more
declarative but knowing instantly what it

98
00:06:07.475 --> 00:06:11.605
is, comprehension is huge when it
comes to code maintainability, so

99
00:06:11.605 --> 00:06:13.777
personally, I'm huge fan of this.

100
00:06:13.777 --> 00:06:17.842
Okay, that's that, that's that,
that's that I think that's it so

101
00:06:17.842 --> 00:06:22.070
now we have everything in here dishlists
yeah, dishStore this is great.

