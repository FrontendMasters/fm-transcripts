WEBVTT

1
00:00:00.140 --> 00:00:04.171
Thanks everyone for hanging out today,
I know it's been a long day but hopefully,

2
00:00:04.171 --> 00:00:05.332
you found this useful.

3
00:00:05.332 --> 00:00:06.752
As far as next steps go,

4
00:00:06.752 --> 00:00:11.800
there's a whole world of TypeScript out
there that we haven't even began to touch.

5
00:00:11.800 --> 00:00:15.220
Like I said, there are interfaces
that you need to think about.

6
00:00:15.220 --> 00:00:18.980
There are generics and all these other
things that you could do with TypeScript.

7
00:00:18.980 --> 00:00:21.628
But to be honest, my recommendation
when it comes to TypeScript is

8
00:00:21.628 --> 00:00:24.011
similar to my advice when it
comes to learning frameworks.

9
00:00:24.011 --> 00:00:27.464
Which is don't try to learn every single
technique in the world in an attempt to

10
00:00:27.464 --> 00:00:29.080
create the perfect code.

11
00:00:29.080 --> 00:00:32.070
When you have a specific problem that
you have, that's when you reach out and

12
00:00:32.070 --> 00:00:33.050
find a solution for it.

13
00:00:33.050 --> 00:00:36.836
So a great example of that is when I
realized that we had a constant that was

14
00:00:36.836 --> 00:00:40.670
keeping a source of truth for
our diet lists and that kind of stuff.

15
00:00:40.670 --> 00:00:43.755
And then I realized that the TypeScript
was replicating that in the types.

16
00:00:43.755 --> 00:00:47.398
This is when I went out to learn
which admitted again, ODS and

17
00:00:47.398 --> 00:00:51.840
tax but it does solve a problem for
me and that's when I reached out for it.

18
00:00:51.840 --> 00:00:55.076
It's really tempting I think as developers
to try to learn everything at once cuz

19
00:00:55.076 --> 00:00:57.190
you're afraid you'll miss something.

20
00:00:57.190 --> 00:01:00.842
But honestly, I think perfection
is the enemy of progress and

21
00:01:00.842 --> 00:01:05.268
code purity can really get in the way of
team progress when it comes to really

22
00:01:05.268 --> 00:01:07.321
what's most important, right?

23
00:01:07.321 --> 00:01:11.391
And so again, I can't stress this enough,
TypeScript like many tools,

24
00:01:11.391 --> 00:01:13.570
it's wonderful in many ways, right?

25
00:01:13.570 --> 00:01:14.814
We saw it do a lot of good things for

26
00:01:14.814 --> 00:01:16.999
us but don't forget that we
did that in a progressive way.

27
00:01:16.999 --> 00:01:20.851
That was like let me help myself
out by setting my intentions and

28
00:01:20.851 --> 00:01:23.985
then just picking it out
when it makes sense for me.

29
00:01:23.985 --> 00:01:26.523
But you'll notice there are some times
I didn't define types either and

30
00:01:26.523 --> 00:01:27.070
that's okay.

31
00:01:27.070 --> 00:01:29.158
That's actually a great way
to just get your feet wet and

32
00:01:29.158 --> 00:01:30.910
figure out what makes the most sense.

33
00:01:30.910 --> 00:01:33.246
The moment you get caught up in
abstraction, that kind of stuff,

34
00:01:33.246 --> 00:01:34.870
that's when it can just
blow up in your face.

35
00:01:34.870 --> 00:01:37.155
Then, instead of shipping
useful features to customers,

36
00:01:37.155 --> 00:01:38.716
you're sitting there fighting types.

37
00:01:38.716 --> 00:01:41.700
And I don't know, that's probably
not the best use of our time right,

38
00:01:41.700 --> 00:01:42.614
at the end of the day.

39
00:01:42.614 --> 00:01:46.470
Because if you think about it,
this is what users see, right?

40
00:01:46.470 --> 00:01:48.520
When they get your code,
they don't see beautiful types,

41
00:01:48.520 --> 00:01:49.630
they don't see all that stuff.

42
00:01:49.630 --> 00:01:53.230
That's for us, that's for us to help
them maintain and to ship faster.

43
00:01:53.230 --> 00:01:59.071
But at the end of the day, it's all
about the features that we ship and

44
00:01:59.071 --> 00:02:03.640
don't lose sight of that
when working on code.

45
00:02:03.640 --> 00:02:06.730
With that, thank you everyone for
joining me again today.

46
00:02:06.730 --> 00:02:08.738
It's been an absolute blast.

47
00:02:08.738 --> 00:02:10.830
I just realized, I have some
questions I need to answer, right?

48
00:02:10.830 --> 00:02:12.290
Yep, go for it.

49
00:02:12.290 --> 00:02:16.967
&gt;&gt; Is there a litmus test to know when
it's better to migrate to TypeScript for

50
00:02:16.967 --> 00:02:19.520
scaling an app for the future?

51
00:02:19.520 --> 00:02:20.410
&gt;&gt; Great, okay, yes.

52
00:02:20.410 --> 00:02:21.340
Thank you for the reminder.

53
00:02:21.340 --> 00:02:23.690
Okay, so this is for Shiva.

54
00:02:23.690 --> 00:02:26.597
When it comes to really thinking
about scalability of code.

55
00:02:26.597 --> 00:02:30.675
Basically, in my opinion when it comes to
the scale of code, it's about the ability

56
00:02:30.675 --> 00:02:33.789
of people to how quickly someone
can understand your codebase.

57
00:02:33.789 --> 00:02:38.594
And that really sets apart something
that's scalable and maintainable

58
00:02:38.594 --> 00:02:43.644
versus something that is basically
tricky to scale at an enterprise level.

59
00:02:43.644 --> 00:02:46.316
And so TypeScript is one
of the things once again,

60
00:02:46.316 --> 00:02:50.322
that if your team is ready to start
bringing that in and incorporating it and

61
00:02:50.322 --> 00:02:53.461
in a way that doesn't halt
the progress of the tool chain.

62
00:02:53.461 --> 00:02:55.720
Then by all means,
it certainly is useful for that.

63
00:02:55.720 --> 00:03:00.939
But again, there's so many real world
scenarios where people try to migrate and

64
00:03:00.939 --> 00:03:05.866
they find themselves stuck in build
chain tools, like errors constantly.

65
00:03:05.866 --> 00:03:08.517
And so rather than making progress,
they're just fighting over it and

66
00:03:08.517 --> 00:03:10.120
then no one wants to
touch any of the files.

67
00:03:10.120 --> 00:03:14.958
And then I've to say at the end of the
day, you might be using a enterprise grade

68
00:03:14.958 --> 00:03:19.600
like TypeScript but if it's hindering
progress, not a good thing at all.

69
00:03:19.600 --> 00:03:23.010
So once again, it's all about
comprehension and ease of maintenance.

70
00:03:23.010 --> 00:03:25.423
As long as you get your team
to feel comfortable with that,

71
00:03:25.423 --> 00:03:29.550
even if you just use JSDoc, you don't
gotta use TypeScript, that works too.

72
00:03:29.550 --> 00:03:32.790
So I think that's really the key thing
to focus on and not the TypeScript part.

73
00:03:32.790 --> 00:03:36.836
&gt;&gt; Which is better for bigger projects,
Options API or Composition API?

74
00:03:36.836 --> 00:03:41.189
&gt;&gt; Yeah, so when it comes to using Vue 3,
I do think that at the end of the day,

75
00:03:41.189 --> 00:03:44.182
it's really hard to escape
from Composition API.

76
00:03:44.182 --> 00:03:46.450
We'll see this a lot in the rest
of your workshop upcoming.

77
00:03:46.450 --> 00:03:49.557
But because of how modular it is,
Composition API will be a part of

78
00:03:49.557 --> 00:03:52.280
basically every Vue 3
project going forward.

79
00:03:52.280 --> 00:03:55.027
That said, that doesn't mean that
what you're doing with Options API is

80
00:03:55.027 --> 00:03:58.044
out-of-date either because there's
sometimes some components benefit from

81
00:03:58.044 --> 00:04:00.150
that structure that Options API provides.

82
00:04:00.150 --> 00:04:02.863
And so it's one of those things where
choose the tool that best suits

83
00:04:02.863 --> 00:04:05.815
the problem that you're trying to solve,
rather than trying to be like,

84
00:04:05.815 --> 00:04:07.750
I'm only gonna use this one method.

85
00:04:07.750 --> 00:04:10.508
So understanding the trade-offs and
knowing your team's abilities,

86
00:04:10.508 --> 00:04:12.760
that will be the key to success for
your project.

87
00:04:12.760 --> 00:04:15.251
&gt;&gt; Is it possible to
export computed props or

88
00:04:15.251 --> 00:04:18.105
methods from the setup
script into a test file?

89
00:04:18.105 --> 00:04:20.653
&gt;&gt; Yeah so,
obviously testing is a whole thing.

90
00:04:20.653 --> 00:04:23.800
But as far as I'm aware, everything
that we've done as far as types and

91
00:04:23.800 --> 00:04:26.476
all this stuff should be able to
be imported into a test file so

92
00:04:26.476 --> 00:04:29.840
that you can use that and
make sure everything is typed correctly.

93
00:04:29.840 --> 00:04:32.405
And there's a couple key resources
out there that I'll try to add to

94
00:04:32.405 --> 00:04:33.540
the resource list.

95
00:04:33.540 --> 00:04:35.210
But Worthman, yeah.

96
00:04:35.210 --> 00:04:38.060
So in case you haven't had a chance
to check it out, I do actually have

97
00:04:38.060 --> 00:04:41.029
another workshop on Frontend Masters
called Production-Grade Vue.

98
00:04:41.029 --> 00:04:44.125
Where I talk about basically different
enterprise patterns that I've seen

99
00:04:44.125 --> 00:04:45.210
over the years.

100
00:04:45.210 --> 00:04:49.206
And so basically, when it comes to testing
with types, again, everything that we've

101
00:04:49.206 --> 00:04:52.330
done in the code should be able
to be exported and imported.

102
00:04:52.330 --> 00:04:55.280
But the key thing when it comes
to testing is in my opinion is

103
00:04:55.280 --> 00:04:57.825
to make sure that you
have the end-to-end test.

104
00:04:57.825 --> 00:05:01.207
Cuz I know that a lot people get caught up
in the unit tests but end-to-end testing

105
00:05:01.207 --> 00:05:03.855
in my opinion is the key part of
basically figuring out whether or

106
00:05:03.855 --> 00:05:05.391
not your app is gonna survive or not.

107
00:05:05.391 --> 00:05:09.880
And so the joke that a predecessor of mine
always said was that there are two tests I

108
00:05:09.880 --> 00:05:11.934
always make sure that every app has.

109
00:05:11.934 --> 00:05:13.845
And that's one, can the user login?

110
00:05:13.845 --> 00:05:15.262
And two, can they pay me?

111
00:05:15.262 --> 00:05:18.901
After that, everything else is optional so
something to keep in mind.

112
00:05:18.901 --> 00:05:22.189
But in all seriousness when it
comes to typing these things,

113
00:05:22.189 --> 00:05:24.350
everything should work as expected.

114
00:05:24.350 --> 00:05:27.300
I would recommend checking Vue
test out for your unit tests.

115
00:05:27.300 --> 00:05:31.598
That's really taking sort of the community
by storm as far as almost being like

116
00:05:31.598 --> 00:05:34.672
the next assessor to Jest so
definitely check that out.

117
00:05:34.672 --> 00:05:35.506
Great.
&gt;&gt; [APPLAUSE]

118
00:05:35.506 --> 00:05:36.317
&gt;&gt; Thanks everyone.

119
00:05:36.317 --> 00:05:39.003
&gt;&gt; [APPLAUSE]

