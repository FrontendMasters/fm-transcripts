WEBVTT

1
00:00:00.150 --> 00:00:04.786
Just curious whether this kind of
process in larger Vue code bases kind of

2
00:00:04.786 --> 00:00:09.498
results in the constants TypeScript
file getting kind of cannibalized or

3
00:00:09.498 --> 00:00:11.787
incorporated into the types file.

4
00:00:11.787 --> 00:00:14.797
Do you see frequently constant files or?

5
00:00:14.797 --> 00:00:17.804
&gt;&gt; Yeah, okay, so
this is a great question,

6
00:00:17.804 --> 00:00:20.317
because let's take a look at this.

7
00:00:20.317 --> 00:00:22.988
And this segues perfectly into
the next thing I wanted to talk about.

8
00:00:22.988 --> 00:00:26.940
So here we've noticed that we
have our constants types here,

9
00:00:26.940 --> 00:00:29.530
and we also have our types here.

10
00:00:29.530 --> 00:00:33.506
And as developers, we have been inundated
with the do not repeat yourself rule which

11
00:00:33.506 --> 00:00:35.570
to me, it's often done overkill.

12
00:00:35.570 --> 00:00:38.451
But obviously,
we can see here there's some duplication,

13
00:00:38.451 --> 00:00:39.870
we have two sources of truth.

14
00:00:39.870 --> 00:00:41.710
This is a bit of a problem.

15
00:00:41.710 --> 00:00:45.205
So the thing about the constants being
subsumed into types, though, is that

16
00:00:45.205 --> 00:00:49.400
the constants are still valid JavaScript
values that you could assign later on.

17
00:00:49.400 --> 00:00:51.818
So for example,
one of the things we're about to do is,

18
00:00:51.818 --> 00:00:54.649
if we take a look at our application and
if we go to new restaurant,

19
00:00:54.649 --> 00:00:57.804
you'll notice we're actually not
rendering out the status right now.

20
00:00:57.804 --> 00:01:00.237
There's no way for
users to pick which status it is.

21
00:01:00.237 --> 00:01:04.394
And so when you do that, which we'll do in
a little bit, we'll want to import this

22
00:01:04.394 --> 00:01:08.639
const, right, as an array that will loop
through and then render out our options.

23
00:01:08.639 --> 00:01:13.284
But remember that the value here is not
the same as a type cuz this type can never

24
00:01:13.284 --> 00:01:16.730
be consumed in a way that
traditional JavaScript would.

25
00:01:18.140 --> 00:01:19.394
And so let's go ahead and

26
00:01:19.394 --> 00:01:23.020
see how we would solve that
problem cuz this is a common one.

27
00:01:23.020 --> 00:01:25.428
So let me start by, again,
let's start by showing the problem, and

28
00:01:25.428 --> 00:01:26.820
then we'll go from here.

29
00:01:26.820 --> 00:01:30.561
So what we're gonna try to do right now
is inside of the new restaurant page,

30
00:01:30.561 --> 00:01:33.810
we're gonna go ahead and
flush this part out.

31
00:01:33.810 --> 00:01:36.305
So I'm gonna go ahead and
go into newRestaurant and

32
00:01:36.305 --> 00:01:39.620
we can see here that this hasn't
been moved over to TypeScript yet.

33
00:01:39.620 --> 00:01:43.960
So I'm gonna go ahead and do that,
let's say setup lang="ts".

34
00:01:44.970 --> 00:01:48.246
And then after that we're gonna,
whoa, you know what?

35
00:01:48.246 --> 00:01:51.004
I'm not gonna do that just yet
cuz I wanna prove something real quick.

36
00:01:51.004 --> 00:01:53.814
Okay, I'll just do to lang="ts".

37
00:01:53.814 --> 00:02:00.023
And then I'll import
defineComponent from Vue.

38
00:02:00.023 --> 00:02:03.457
And so actually just to explain
what I'm thinking here.

39
00:02:03.457 --> 00:02:06.515
The reason we're not gonna do the script
setup just yet is because I haven't taught

40
00:02:06.515 --> 00:02:08.672
you all how to define emits and
props and that kinda stuff.

41
00:02:08.672 --> 00:02:12.288
So rather than skip directly to that,
we're just gonna do something we're

42
00:02:12.288 --> 00:02:15.810
familiar with,
which is the defineComponent, okay.

43
00:02:15.810 --> 00:02:21.665
So here inside of, let's see,
[SOUND] where's our status?

44
00:02:21.665 --> 00:02:23.139
Status is right here.

45
00:02:23.139 --> 00:02:26.620
You'll notice that it's looking for
this restaurantStatusList.

46
00:02:26.620 --> 00:02:31.030
It doesn't exist right now, and the reason
for that is we haven't imported it yet.

47
00:02:31.030 --> 00:02:36.292
So if I import restaurantStatusList
from my constants,

48
00:02:36.292 --> 00:02:41.564
I can actually ingest it here
inside of my reactive data.

49
00:02:41.564 --> 00:02:45.832
And then once I do that,
you'll see that everything shows up, okay?

50
00:02:45.832 --> 00:02:51.402
But we still have a small problem here and
the reason for

51
00:02:51.402 --> 00:02:56.498
that is because we have
this duplication of data.

52
00:02:56.498 --> 00:03:00.298
And so the question is,
is there a way for TypeScript to look at

53
00:03:00.298 --> 00:03:04.186
a constant we defined here and
then generate the types from it?

54
00:03:04.186 --> 00:03:09.855
And so how this works, I honestly don't
know why they designed it this way,

55
00:03:09.855 --> 00:03:13.231
but it's fine, I'll show you how it works.

56
00:03:13.231 --> 00:03:17.370
All right, the first thing you're gonna do
when you want, okay, think of it this way.

57
00:03:17.370 --> 00:03:22.470
Would you kind of want, and
if we were to do this ourselves,

58
00:03:22.470 --> 00:03:29.304
is would you kinda wanna be like loop
through restaurantStatusList constant,

59
00:03:29.304 --> 00:03:33.694
and then unite them with a union operator,
right?

60
00:03:33.694 --> 00:03:36.860
Like we were programmatically dramatic,
kind of what we were thinking.

61
00:03:36.860 --> 00:03:40.680
So you might be thinking, there's a for
loop or something, not quite.

62
00:03:40.680 --> 00:03:46.119
The way this works is first, let's go
ahead and import our constant, all right?

63
00:03:46.119 --> 00:03:51.541
So we'll import restaurant,
looks like restaurant, okay,

64
00:03:51.541 --> 00:03:58.312
doesn't like the imports, so I'll just
have to manually do it, constants.

65
00:03:58.312 --> 00:04:05.488
Okay, so if I do restaurant,
why does it not like it,

66
00:04:05.488 --> 00:04:09.478
status, it does not like it.

67
00:04:09.478 --> 00:04:11.589
Import type unresolved.

68
00:04:14.498 --> 00:04:15.851
Sure, okay, yeah, that's okay.

69
00:04:15.851 --> 00:04:17.442
Sorry, this error is correct.

70
00:04:17.442 --> 00:04:20.517
This is not gonna work, right,
because this is a JavaScript value,

71
00:04:20.517 --> 00:04:21.745
this is not a type, right?

72
00:04:21.745 --> 00:04:24.045
We have a keyword for that, for a reason.

73
00:04:24.045 --> 00:04:27.137
So one one the things you can do or
what you're supposed to do or

74
00:04:27.137 --> 00:04:30.409
the most popular convention is you
typecast it as a constant, and

75
00:04:30.409 --> 00:04:33.582
this is my number one complaint,
cuz it is already a constant.

76
00:04:33.582 --> 00:04:37.063
It's weird to me that you would
cast something as a constant, but

77
00:04:37.063 --> 00:04:41.177
you'll notice it does something,
though, to the restaurantStatusList,

78
00:04:41.177 --> 00:04:44.805
is that it makes it available to
TypeScript as this read only tuple.

79
00:04:44.805 --> 00:04:47.456
And so for those that aren't
familiar with that programming term,

80
00:04:47.456 --> 00:04:51.510
it's basically where you have an array
with fixed values in certain positions.

81
00:04:51.510 --> 00:04:55.061
Although, I'm not saying it is a tuple but
it just kind of like that, where it's

82
00:04:55.061 --> 00:04:58.530
saying these are arrays with these
specific values in these specific places.

83
00:04:59.940 --> 00:05:04.190
And then I don't care for the syntax,
I'm just making this for the record.

84
00:05:05.310 --> 00:05:09.054
You ask for
the type of the restaurantStatusList and

85
00:05:09.054 --> 00:05:13.987
then not only that, you have to then
use this square bracket number,

86
00:05:13.987 --> 00:05:19.350
because it is technically an array
of things you're reading.

87
00:05:19.350 --> 00:05:24.660
But arrays are accessed via a number,
this number here is not arbitrary.

88
00:05:24.660 --> 00:05:29.426
It is the type of value that's being
used to access the values inside of this

89
00:05:29.426 --> 00:05:30.570
read only thing.

90
00:05:31.580 --> 00:05:34.601
But once you do this,
though, you will notice

91
00:05:34.601 --> 00:05:39.191
that type status is actually
generating as you would expect, right?

92
00:05:39.191 --> 00:05:43.238
It has a want to try, and so
now we come in here and we're like, hey,

93
00:05:43.238 --> 00:05:48.067
we wanna add delicious and we save it,
cool, status is automatically updated.

