WEBVTT

1
00:00:00.000 --> 00:00:03.519
Something that's actually worth clarifying
as well is that for the naming conventions

2
00:00:03.519 --> 00:00:06.244
for the branches, basically every
section will have three parts.

3
00:00:06.244 --> 00:00:10.227
There'll be the section number, so
in this case, we're in section two, so

4
00:00:10.227 --> 00:00:13.126
it'll be o2-begin, so
basically, where we start.

5
00:00:13.126 --> 00:00:16.409
And then we have the exercise that
companies with it, we'll be o2-exercise,

6
00:00:16.409 --> 00:00:17.969
and that's like the starting point.

7
00:00:17.969 --> 00:00:21.047
And then when we wrap up, and
we've coded along, and done everything,

8
00:00:21.047 --> 00:00:24.189
that will be your o2-finish, and
then we move on each section that way.

9
00:00:24.189 --> 00:00:29.029
And so just know that that's
the convention for how the exercises and

10
00:00:29.029 --> 00:00:30.957
code tracking is working.

11
00:00:30.957 --> 00:00:33.561
Okay, so now that we've talked
about props with the options API,

12
00:00:33.561 --> 00:00:35.793
it's time to get into something
a little bit more meaty,

13
00:00:35.793 --> 00:00:38.786
right, which is all the other fundamentals
that come with the options API.

14
00:00:38.786 --> 00:00:40.389
So when we go to the restaurant page,

15
00:00:40.389 --> 00:00:42.632
we'll see here that we
have this restaurant list.

16
00:00:42.632 --> 00:00:46.022
And the nice thing about this three being
rewritten with TypeScript is that a lot

17
00:00:46.022 --> 00:00:48.919
of inference is happening kind of
a little bit more automatically.

18
00:00:48.919 --> 00:00:52.837
So you'll notice that restaurant list
does have like what it's inferring from

19
00:00:52.837 --> 00:00:53.778
the given object.

20
00:00:53.778 --> 00:00:57.203
But at this point, we have no way of
really telling it that like, hey,

21
00:00:57.203 --> 00:01:00.355
this is something that we wanna
actually be of type restaurant.

22
00:01:00.355 --> 00:01:04.324
And so now we have another problem
though is that as we just did inside of

23
00:01:04.324 --> 00:01:08.115
restaurant card, we have our typing
defined in a different file.

24
00:01:08.115 --> 00:01:09.442
So the question, of course,

25
00:01:09.442 --> 00:01:13.011
the first thing we need to learn is how do
we share those types between the files?

26
00:01:13.011 --> 00:01:16.809
And so the easiest way to do this
especially once you're getting started

27
00:01:16.809 --> 00:01:19.935
out is to create a types file
right at the root of the source.

28
00:01:19.935 --> 00:01:22.694
So I'll just call it types.ts.

29
00:01:22.694 --> 00:01:25.672
Now you'll see some other folder
conventions where people have a folder of

30
00:01:25.672 --> 00:01:28.554
types, and then they break it down
into different modules, that's for

31
00:01:28.554 --> 00:01:30.793
when you scale, and
you have the types of support that.

32
00:01:30.793 --> 00:01:34.527
I don't think it needs to you don't
need to jump into that immediately, so

33
00:01:34.527 --> 00:01:37.867
let's just keep it simple, and
we have this type file right here.

34
00:01:37.867 --> 00:01:39.717
And so
let me actually close this real quick.

35
00:01:39.717 --> 00:01:42.733
And let me bump this over, so
you can see the side by side.

36
00:01:42.733 --> 00:01:46.328
So all we're gonna do is we're gonna take
this tight restaurant that we've defined,

37
00:01:46.328 --> 00:01:48.018
we're gonna cut and paste it over here.

38
00:01:48.018 --> 00:01:52.498
And then if you're new to doing modules
that are contained within JavaScript, all

39
00:01:52.498 --> 00:01:56.797
we need to do is basically tell it that we
want to export the thing out of the file.

40
00:01:56.797 --> 00:01:59.869
And so in this case,
we're exporting the type of restaurant.

41
00:01:59.869 --> 00:02:03.797
Now when we say this and say this is
a good thing because what are we seeing?

42
00:02:03.797 --> 00:02:07.871
We see an error because it says, hey,
you're referencing this type restaurant,

43
00:02:07.871 --> 00:02:08.929
I've never seen it.

44
00:02:08.929 --> 00:02:10.312
So well, how do we import it?

45
00:02:10.312 --> 00:02:11.545
Similar to before,

46
00:02:11.545 --> 00:02:15.979
just like we do with Prop type,
we'll insert a prop type of restaurant.

47
00:02:15.979 --> 00:02:18.610
Now in my case is actually doing
an autocomplete, but sometimes you need to

48
00:02:18.610 --> 00:02:21.221
actually just type it out the first time,
and then it'll know to do that.

49
00:02:21.221 --> 00:02:24.886
But when I hit Enter, you'll notice
that it's automatically then importing

50
00:02:24.886 --> 00:02:27.177
restaurant from the types
it's recognized it.

51
00:02:27.177 --> 00:02:30.087
And so if you're also wondering about
this alias here, if you're new,

52
00:02:30.087 --> 00:02:33.010
this is basically a build alias to let
you know to go straight to the root.

53
00:02:33.010 --> 00:02:35.200
Because sometimes when you
have a lot of nested folders,

54
00:02:35.200 --> 00:02:37.490
you get a lot of this trying to
figure out where the route is.

55
00:02:37.490 --> 00:02:42.202
And so this alias here is just a way
to make your life a little bit easier.

56
00:02:42.202 --> 00:02:44.132
Okay, so now that we have that,

57
00:02:44.132 --> 00:02:48.576
we now have the ability to use
the restaurant type across multiple files.

58
00:02:48.576 --> 00:02:51.883
So let's go ahead and
go on to restaurant's page and

59
00:02:51.883 --> 00:02:53.471
see how that might work.

60
00:02:53.471 --> 00:02:56.974
So the first thing we need,
we're taking a look at this, we say,

61
00:02:56.974 --> 00:03:00.671
okay, we have this data object here
that has all this reactive data,

62
00:03:00.671 --> 00:03:03.819
we need to actually define what
the shape of it looks like.

63
00:03:03.819 --> 00:03:06.971
More importantly,
we need to learn how to actually say, hey,

64
00:03:06.971 --> 00:03:08.644
how do we define this as an array?

65
00:03:08.644 --> 00:03:10.737
And so typically, let's just go ahead and

66
00:03:10.737 --> 00:03:13.248
let's just do a type called
DataShape real quick.

67
00:03:13.248 --> 00:03:17.747
And so we know that filterText is a string
and then restaurantLists here, if

68
00:03:17.747 --> 00:03:22.528
you were to think back to how we typically
define prop types, you might be tempted

69
00:03:22.528 --> 00:03:27.416
to go like, it's like array, or you might
be like, maybe it's capital A array.

70
00:03:27.416 --> 00:03:31.570
That's not how arrays are defined in
TypeScript, the way we do that is we

71
00:03:31.570 --> 00:03:35.335
actually define what values we
expect inside of the array first.

72
00:03:35.335 --> 00:03:38.823
So in case in the event that it's
an array of strings, we use a string, and

73
00:03:38.823 --> 00:03:40.754
then we would have the square brackets.

74
00:03:40.754 --> 00:03:43.498
And that tells you that
it's an array of strings.

75
00:03:43.498 --> 00:03:44.976
And so what do we want?

76
00:03:44.976 --> 00:03:47.117
We want an array of restaurants,
so how do we do that?

77
00:03:47.117 --> 00:03:51.866
Well, we're gonna import type restaurant,

78
00:03:51.866 --> 00:03:54.796
is that actually coming up?

79
00:03:54.796 --> 00:03:57.990
Looks like it's not coming up for
me this time, but

80
00:03:57.990 --> 00:04:00.454
that's okay, we'll do it like this.

81
00:04:00.454 --> 00:04:01.800
And so there we go.

82
00:04:01.800 --> 00:04:05.294
And then now we can go ahead and
do restaurant like this.

83
00:04:05.294 --> 00:04:10.336
Save import type, this is where red
squiggly lines are a lot are very

84
00:04:10.336 --> 00:04:15.712
helpful is we haven't actually converted
this file over to TypeScript yet,

85
00:04:15.712 --> 00:04:18.042
that's why it's yelling at us.

86
00:04:18.042 --> 00:04:20.667
And that's just probably actually why
my autocomplete wasn't even working.

87
00:04:20.667 --> 00:04:26.588
So let's go ahead and make restaurant page
and add the type script attribute to it.

88
00:04:26.588 --> 00:04:29.705
And then we need to make sure,
just like before,

89
00:04:29.705 --> 00:04:32.836
we'll go through an import
defined component.

90
00:04:32.836 --> 00:04:34.702
And then let's go ahead and

91
00:04:34.702 --> 00:04:38.686
wrap our default object with
that defined component bit.

92
00:04:38.686 --> 00:04:45.322
Scroll down, wrap, this is not right,
but I'll fix that later.

93
00:04:45.322 --> 00:04:49.413
[SOUND] And
that can't end with a ts extension.

94
00:04:49.413 --> 00:04:50.794
Okay, there we go.

95
00:04:50.794 --> 00:04:53.257
And so see, like the red is
squiggly line is super helpful and

96
00:04:53.257 --> 00:04:56.515
that's what we want code editor to do for
us, right, is front load that stuff.

97
00:04:56.515 --> 00:05:00.040
Because while hot module reloading has
been great, it's still one more step to

98
00:05:00.040 --> 00:05:02.724
have to go to your browser to
realize something's broken and

99
00:05:02.724 --> 00:05:05.744
then switch back to your code editor
to figure out what's going on.

100
00:05:05.744 --> 00:05:08.621
And so now we see here that,
okay, we have this shape,

101
00:05:08.621 --> 00:05:11.889
we have this restaurant list
that has a bunch of restaurants.

102
00:05:11.889 --> 00:05:14.473
And then actually we
have one more property,

103
00:05:14.473 --> 00:05:17.738
I believe in our data,
we do we have the show new form bit.

104
00:05:17.738 --> 00:05:22.485
So let me go ahead and
add showNewForm and this is a Boolean.

105
00:05:22.485 --> 00:05:24.585
And so
we didn't go through this explicitly, but

106
00:05:24.585 --> 00:05:27.792
I have assumed sort of some basic
knowledge of JavaScript primitive types.

107
00:05:27.792 --> 00:05:31.585
So that the things we're seeing here
string, number, Boolean, object,

108
00:05:31.585 --> 00:05:34.371
these are just basically
standard within JavaScript,

109
00:05:34.371 --> 00:05:36.515
it's nothing custom about this, so far.

110
00:05:36.515 --> 00:05:39.007
But we have learned the custom syntax for
array, and

111
00:05:39.007 --> 00:05:42.019
that's an important one that
you'll probably be using a lot.

112
00:05:42.019 --> 00:05:43.702
So now that we have this,

113
00:05:43.702 --> 00:05:47.721
we need to actually tell what's
the shape of the data like.

114
00:05:47.721 --> 00:05:51.771
And so this brings us to a question
that actually saw in the chat,

115
00:05:51.771 --> 00:05:56.880
which is you'll notice that I'm using
an arrow function for the data property.

116
00:05:56.880 --> 00:06:00.689
Just for context, what some of
you may be used to actually is,

117
00:06:00.689 --> 00:06:04.963
let me just delete this real quick
just to make it a little bit easier.

118
00:06:04.963 --> 00:06:08.846
As you may be used to it
actually being defined this way.

119
00:06:08.846 --> 00:06:12.100
So it's data as a function with this
syntax, and then there's literally

120
00:06:12.100 --> 00:06:14.996
an object that's being returned,
so it's a little bit longer.

121
00:06:14.996 --> 00:06:16.995
There's no right or wrong,

122
00:06:16.995 --> 00:06:21.758
it's just that this other syntax
is just a little bit more compact.

123
00:06:21.758 --> 00:06:22.922
There we go.

124
00:06:22.922 --> 00:06:23.901
There it is.
Personally,

125
00:06:23.901 --> 00:06:26.976
I prefer the arrow function because it's
not that you're trying to do anything like

126
00:06:26.976 --> 00:06:29.848
setting up anything within the function,
we need to use it before you return.

127
00:06:29.848 --> 00:06:33.813
And so this is like a cleaner way of
just getting it done in one line.

128
00:06:33.813 --> 00:06:37.522
Okay, so when it comes to defining things
in TypeScript, you wanna basically say

129
00:06:37.522 --> 00:06:40.765
what is being returned because that's
what we ultimately care about.

130
00:06:40.765 --> 00:06:44.339
So we can do here is we can
basically add a colon here and

131
00:06:44.339 --> 00:06:47.368
see that we want to return
this shape of data.

132
00:06:47.368 --> 00:06:51.228
And so that's really what you're
ultimately saying is that inside of here

133
00:06:51.228 --> 00:06:54.238
you're gonna have a shape,
and what's that shape data?

134
00:06:54.238 --> 00:06:55.474
Well, we have filter tags,

135
00:06:55.474 --> 00:06:57.741
a restaurantList which has
a bunch of restaurants.

136
00:06:57.741 --> 00:07:00.713
And so you can see here that now
when you hover over restaurantList,

137
00:07:00.713 --> 00:07:03.438
it actually inherits all
the properties that come within it.

138
00:07:03.438 --> 00:07:06.364
So now I'm not sure if this
will yell at me just yet.

139
00:07:06.364 --> 00:07:11.385
So this here is one of the things that
Typescript makes our lives a lot better is

140
00:07:11.385 --> 00:07:16.267
that if someone tries to randomly add
this property here, hello message.

141
00:07:16.267 --> 00:07:20.015
You'll notice here that it's saying,
hey, by the way,

142
00:07:20.015 --> 00:07:23.927
I was expecting this, and
instead you gave me this instead.

143
00:07:23.927 --> 00:07:27.443
And so actually I totally forgot,
but you'll notice that here this

144
00:07:27.443 --> 00:07:31.585
hovered some of you might not be seeing
this because this is a VS Code extension.

145
00:07:31.585 --> 00:07:36.448
I believe, it's called like
Typescript error translator.

146
00:07:36.448 --> 00:07:37.970
Gosh.

147
00:07:41.083 --> 00:07:43.911
Yeah, I think it was Matt Bock
who might have had that one.

148
00:07:43.911 --> 00:07:46.567
Yes, okay, it's this one.

149
00:07:46.567 --> 00:07:50.859
Typescript Error Translator,
it's a great one to download cuz it's

150
00:07:50.859 --> 00:07:53.768
basically an open source
effort by the team to or

151
00:07:53.768 --> 00:07:58.132
by the community to make TypeScript
errors a little bit more readable so

152
00:07:58.132 --> 00:08:01.796
that you're not just reading
through just mumble jumble.

153
00:08:01.796 --> 00:08:05.430
And so basically,
as you see here live, it's like, hey,

154
00:08:05.430 --> 00:08:08.132
this is the error message
you normally get.

155
00:08:08.132 --> 00:08:12.485
And then the community says, this is how
we think what it means in plain English,

156
00:08:12.485 --> 00:08:15.444
super, super helpful when
working with Typescript.

157
00:08:15.444 --> 00:08:20.294
But anyhow, okay, so
this is how we define types on our data

158
00:08:20.294 --> 00:08:24.576
is defining it in advance
as this sort of data shape.

159
00:08:24.576 --> 00:08:28.008
I call it data shape rather than just
data cuz data is such a charged word,

160
00:08:28.008 --> 00:08:31.015
I think in a lot of things,
when you're searching for things.

161
00:08:31.015 --> 00:08:34.172
So given that it's this shape of the data,
I just call it data shape.

