WEBVTT

1
00:00:00.200 --> 00:00:01.130
We've done Options API,

2
00:00:01.130 --> 00:00:03.635
these are the core functionality of
what most people are using it for.

3
00:00:03.635 --> 00:00:07.701
And now it's time to hop on over
to the bridge to Composition API.

4
00:00:07.701 --> 00:00:10.223
But again, the key thing here is
the bridge because we're not gonna go

5
00:00:10.223 --> 00:00:10.919
fully into it yet.

6
00:00:10.919 --> 00:00:13.431
We're gonna see kind of
the intermediary and

7
00:00:13.431 --> 00:00:16.815
sort of learn the progression
from options to composition.

8
00:00:16.815 --> 00:00:18.841
All right, so
let's take a look at our code.

9
00:00:18.841 --> 00:00:22.008
Let me go open up restaurant page, okay?

10
00:00:22.008 --> 00:00:28.334
So we've learned that when it comes to
integrating TypeScript with object API or

11
00:00:28.334 --> 00:00:33.371
options API, we can see here we
had to do like define component.

12
00:00:33.371 --> 00:00:35.908
We had to do some things
to pass it into like

13
00:00:35.908 --> 00:00:38.236
the data to kind of make it look right.

14
00:00:38.236 --> 00:00:42.022
And then especially when it came to prop,
we had prop types, wouldn't be nice things

15
00:00:42.022 --> 00:00:44.825
are just little bit easier,
a little bit more native, right?

16
00:00:44.825 --> 00:00:46.678
What if we want a more
standard JavaScript,

17
00:00:46.678 --> 00:00:49.095
less of the guardrails that
options API provides for us.

18
00:00:49.095 --> 00:00:52.753
And that's really where
composition API comes into play.

19
00:00:52.753 --> 00:00:57.328
And so, the one thing I have to underscore
actually a lot right now, which I forgot

20
00:00:57.328 --> 00:01:01.853
to animate to you, is that the composition
API does not replace the options API.

21
00:01:01.853 --> 00:01:05.778
I know people love Buzzwords and things
going viral, and I think there was a blog

22
00:01:05.778 --> 00:01:08.542
post where I think someone
was claiming it at one point.

23
00:01:08.542 --> 00:01:13.344
So that message did become, it kind of
like pervaded throughout, unfortunately.

24
00:01:13.344 --> 00:01:15.766
And the options API actually,
believe it or not,

25
00:01:15.766 --> 00:01:18.715
is something that we can very
easily support as the Vue team.

26
00:01:18.715 --> 00:01:20.525
Because underlying what we've written,

27
00:01:20.525 --> 00:01:23.044
options API is basically one
style of writing components.

28
00:01:23.044 --> 00:01:25.114
So when people are like,
this is gonna go away,

29
00:01:25.114 --> 00:01:26.822
it's just a style of writing components.

30
00:01:26.822 --> 00:01:32.044
There's nothing unique about what's going
on there because the composition API and

31
00:01:32.044 --> 00:01:35.319
the options API are powered
by the same core library.

32
00:01:35.319 --> 00:01:37.924
So I just need that to be just
keep pushing that message, so

33
00:01:37.924 --> 00:01:40.751
people don't feel like, no,
my options API is going away.

34
00:01:40.751 --> 00:01:41.722
No, it's not.

35
00:01:41.722 --> 00:01:44.233
But there is another way to
help us solve other problems,

36
00:01:44.233 --> 00:01:45.708
which we'll see in a little bit.

37
00:01:45.708 --> 00:01:47.246
All right, so taking a look at this,

38
00:01:47.246 --> 00:01:49.690
let's start to see what
composition API might look like.

39
00:01:49.690 --> 00:01:52.329
So one of the things I mentioned
with composition API is that it

40
00:01:52.329 --> 00:01:54.736
does things a little bit more
like vanilla JavaScript.

41
00:01:54.736 --> 00:01:58.738
So for example, here with data we have
this function that's returning an object,

42
00:01:58.738 --> 00:02:02.124
and then we have computed properties,
we have all these guardrails.

43
00:02:02.124 --> 00:02:06.348
Let's take a look at what it might look
like inside of composition API instead.

44
00:02:06.348 --> 00:02:10.580
And so the way that you know you're inside
composition API is through the setup

45
00:02:10.580 --> 00:02:11.553
lifecycle hook.

46
00:02:11.553 --> 00:02:15.701
So for those who come from Vue 2, you
might be familiar with mounted, created,

47
00:02:15.701 --> 00:02:17.175
all those lifecycle hooks.

48
00:02:17.175 --> 00:02:20.448
Setup is the first one that
runs at the beginning now of

49
00:02:20.448 --> 00:02:22.865
all the component lifecycle methods.

50
00:02:22.865 --> 00:02:26.500
And so what we are gonna do is we are just
gonna migrate our options API stuff into

51
00:02:26.500 --> 00:02:29.420
composition API just to show you
where that progression is, so

52
00:02:29.420 --> 00:02:32.638
that then later when we take that
next jump, it won't be so jarring.

53
00:02:32.638 --> 00:02:36.633
So first thing first, we're gonna
start by setting up our reactive data.

54
00:02:36.633 --> 00:02:40.475
And so remember what I said inside of
composition API is that everything

55
00:02:40.475 --> 00:02:42.595
inside of here is vanilla JavaScript.

56
00:02:42.595 --> 00:02:45.671
So in other words,
when you set up a const of filter text,

57
00:02:45.671 --> 00:02:47.282
that is literally what it is.

58
00:02:47.282 --> 00:02:49.707
It is a constant of filter text,
it's not gonna change,

59
00:02:49.707 --> 00:02:52.699
it's not gonna be reactive because
this is vanilla JavaScript plan.

60
00:02:52.699 --> 00:02:53.388
So what do we need?

61
00:02:53.388 --> 00:02:56.905
We need to tell it that we
need some help from Vue.

62
00:02:56.905 --> 00:02:59.691
And so the helper method that
we're gonna stick with for

63
00:02:59.691 --> 00:03:01.833
this particular workshop is gonna be ref.

64
00:03:01.833 --> 00:03:04.446
So think of a reactive reference,
that's what that is.

65
00:03:04.446 --> 00:03:09.531
So we say, this is going to be a ref that
is an empty string, this tells us that,

66
00:03:09.531 --> 00:03:14.202
okay, this is gonna be the equivalent
of this right here inside of our data.

67
00:03:14.202 --> 00:03:16.124
So that's been moved.

68
00:03:16.124 --> 00:03:19.178
Next we're gonna go ahead and
let's move restaurant lists.

69
00:03:19.178 --> 00:03:19.914
So shall we?

70
00:03:19.914 --> 00:03:23.343
So I'm gonna copy restaurant
lists over here, and

71
00:03:23.343 --> 00:03:25.740
then I'm gonna const this as well.

72
00:03:25.740 --> 00:03:29.629
const restaurantList =
a ref that's an array, so

73
00:03:29.629 --> 00:03:34.430
this is a reactive array,
not array, yes, a reactive array.

74
00:03:34.430 --> 00:03:38.737
Okay, finally,
we gotta move our showNewForm here.

75
00:03:38.737 --> 00:03:42.421
So I'm gonna move that over here and
const showNewForm.

76
00:03:42.421 --> 00:03:48.501
And this is not gonna be false, but this
will be a ref of false just like that.

77
00:03:48.501 --> 00:03:51.006
And so now that we've deleted all this,

78
00:03:51.006 --> 00:03:55.214
you'll notice now that we are in
a sort of untyped territory again.

79
00:03:55.214 --> 00:03:58.250
Because when we look and
hover over filter text,

80
00:03:58.250 --> 00:04:03.225
you'll see that now we have this new type
that's being inherited called a ref.

81
00:04:03.225 --> 00:04:06.530
This is a reactive reference, so think
of this like when you were looking at

82
00:04:06.530 --> 00:04:09.846
options API and you had data, and
methods, and all these specific types.

83
00:04:09.846 --> 00:04:14.015
This is now saying that, okay, we know
how to handle this specific type of ref,

84
00:04:14.015 --> 00:04:16.267
which is a reactive reference within Vue.

85
00:04:16.267 --> 00:04:20.755
And so here you'll see that restaurant
lists actually does say, well, actually

86
00:04:20.755 --> 00:04:25.136
similarly, let me detect the shape of the
objects I'm noticing inside of my array.

87
00:04:25.136 --> 00:04:29.763
But we wanna go ahead and say, hey,
this is an array of restaurants.

88
00:04:29.763 --> 00:04:33.123
So the way that we do
this is with typecasting,

89
00:04:33.123 --> 00:04:38.223
just like we did before where we say
this should be a restaurant array.

90
00:04:38.223 --> 00:04:43.751
And just like that, now we've gone ahead
and actually defined our ref correctly.

91
00:04:43.751 --> 00:04:49.746
And so this should start to feel
a little bit more like TypeScript.

92
00:04:49.746 --> 00:04:54.304
Okay, and then going forward,
here we have here we have a ref,

93
00:04:54.304 --> 00:04:57.669
this is a Boolean, so
we're good on this end.

94
00:04:57.669 --> 00:05:00.601
So you notice, though, that none of it is
actually showing up as being used, right,

95
00:05:00.601 --> 00:05:01.643
saying, it's unused.

96
00:05:01.643 --> 00:05:03.464
And that's because inside
of the setup function,

97
00:05:03.464 --> 00:05:06.523
again we're in vanilla JavaScript land, so
we need to be a little bit more explicit.

98
00:05:06.523 --> 00:05:10.318
And so we need to actually manually
return these specific variables,

99
00:05:10.318 --> 00:05:13.226
whereas data just assumed
you're going to use them.

100
00:05:13.226 --> 00:05:16.069
In the setup function, you might have
some that are private variables,

101
00:05:16.069 --> 00:05:17.197
some that you wanna expose.

102
00:05:17.197 --> 00:05:21.105
So we want you to be explicit in this
particular format of setup when it comes

103
00:05:21.105 --> 00:05:22.479
to returning this stuff.

104
00:05:22.479 --> 00:05:25.900
So once again,
I can return this showNewForm.

105
00:05:25.900 --> 00:05:27.328
And now that I have this,

106
00:05:27.328 --> 00:05:31.762
everything is now can feed into the
options API just like you normally would.

107
00:05:31.762 --> 00:05:35.128
But again, we're learning more
about composition API, so

108
00:05:35.128 --> 00:05:38.501
let's continue this journey and
migrate everything over.

109
00:05:38.501 --> 00:05:41.647
So for computed properties,
now we have these reactive references.

110
00:05:41.647 --> 00:05:43.887
We have a computer helper method, and

111
00:05:43.887 --> 00:05:48.857
this is the computed helper method is just
like the ref where we're basically saying

112
00:05:48.857 --> 00:05:52.300
this is gonna be a computed
property that's based on Vue.

113
00:05:52.300 --> 00:05:55.066
So here, let's go ahead and grab this.

114
00:05:55.066 --> 00:05:58.090
Let's start with number of restaurants,
that's the easiest one.

115
00:05:58.090 --> 00:06:01.891
So number of restaurants here is
going to be a computed property.

116
00:06:01.891 --> 00:06:06.943
So this is the helper computed,
and it's going to

117
00:06:06.943 --> 00:06:11.892
be a function that returns
a reactive variable.

118
00:06:11.892 --> 00:06:15.726
Now what you'll first notice though, is
that it's gonna yell at us because it say,

119
00:06:15.726 --> 00:06:18.822
hey, wait a second,
where does filteredRestaurantList exists?

120
00:06:18.822 --> 00:06:22.966
Well, it doesn't because this is not
working anymore, we're in vanilla

121
00:06:22.966 --> 00:06:27.454
JavaScript land, this is not automatically
taken care of for us by options API.

122
00:06:27.454 --> 00:06:32.649
But what we do have, we do have this,
wait, wait, what am I talking about?

123
00:06:32.649 --> 00:06:35.323
That is because
filteredRestaurantList is here, and

124
00:06:35.323 --> 00:06:38.065
then I'll show you what I'm
talking about in a second.

125
00:06:38.065 --> 00:06:43.075
Okay, so I can do const = computed,

126
00:06:43.075 --> 00:06:50.199
and then this is a function
that returns this stuff.

127
00:06:50.199 --> 00:06:53.868
Now once again, we're still in a similar
problem though because as we notice,

128
00:06:53.868 --> 00:06:58.062
this does not exist, thereforeTherefore it
can't find this restaurant list property.

129
00:06:58.062 --> 00:07:00.895
But we know restaurant list
does exist right here, and so

130
00:07:00.895 --> 00:07:04.328
your first thought might be while
we're in JavaScript land so easy.

131
00:07:04.328 --> 00:07:07.303
I'm gonna go ahead and
just delete this, it should work.

132
00:07:07.303 --> 00:07:11.256
It does not work, the reason for that
is because reactive references play on

133
00:07:11.256 --> 00:07:14.781
basically an object definition syntax for
tracking reactivity and

134
00:07:14.781 --> 00:07:17.098
proxies, which we're not gonna get into.

135
00:07:17.098 --> 00:07:20.610
But basically, when you're using
composition API with reactive references,

136
00:07:20.610 --> 00:07:23.255
particularly the ref helper,
you need to unpack the value.

137
00:07:23.255 --> 00:07:25.781
Because otherwise,
it's just a constant you're working with,

138
00:07:25.781 --> 00:07:27.008
this is why there's no filter.

139
00:07:27.008 --> 00:07:30.239
And so if we add this .value
to our reactive reference,

140
00:07:30.239 --> 00:07:33.280
you'll notice that suddenly
everything opens up.

141
00:07:33.280 --> 00:07:36.290
It knows what the restaurant is,
it knows what to grab.

142
00:07:36.290 --> 00:07:37.903
And so whenever using ref,

143
00:07:37.903 --> 00:07:42.193
basically remember that you have this
dot value that you need to unpack.

144
00:07:42.193 --> 00:07:44.738
And so for those who are new
to composition API though,

145
00:07:44.738 --> 00:07:48.573
you might be thinking, that's kind of
weird, I don't know if I liked that.

146
00:07:48.573 --> 00:07:54.204
Because in options API, it just worked,
right, this .restaurant list, good to go.

147
00:07:54.204 --> 00:07:57.613
The thing about it is though, because
you're in sort of vanilla JavaScript land,

148
00:07:57.613 --> 00:08:00.535
one of the benefits that the .value
actually affords you is that it does

149
00:08:00.535 --> 00:08:04.067
make it very explicit to developers that
you're working with a reactive reference.

150
00:08:04.067 --> 00:08:06.683
Because otherwise,
if you use the reactive helper method,

151
00:08:06.683 --> 00:08:08.333
which I'll just show you real quick.

152
00:08:08.333 --> 00:08:11.656
So if we say like const
todoItem = reactive, so

153
00:08:11.656 --> 00:08:16.571
this is another helper method
where it might be like id: '123'.

154
00:08:16.571 --> 00:08:19.469
Although actually,
let me just show you the text pastry.

155
00:08:19.469 --> 00:08:24.383
Just as a reminder, we can use that and
just scaffold that, and

156
00:08:24.383 --> 00:08:27.275
then title: 'Get milk', right?

157
00:08:27.275 --> 00:08:33.085
The reactive object does allow you to just
go todoItem.title, and then it just works.

158
00:08:33.085 --> 00:08:35.973
But if this were a ref,
you do need to do value.title.

159
00:08:35.973 --> 00:08:40.310
And so some people will go, well,
then I'm just gonna use reactive, and

160
00:08:40.310 --> 00:08:41.837
that's totally up to you.

161
00:08:41.837 --> 00:08:45.175
Again, I've seen people go both ways on
this, it depends on you and your team.

162
00:08:45.175 --> 00:08:48.592
I'm using ref just because I think that's
the one that tends to catch people off

163
00:08:48.592 --> 00:08:50.389
guard when they're not used to using it.

164
00:08:50.389 --> 00:08:53.136
So I want people to just get a little bit
more exposure and so that when you see it,

165
00:08:53.136 --> 00:08:54.989
and you're working with it,
you're not confused.

166
00:08:54.989 --> 00:08:57.972
But by all means,
if you wanna just use the reactive,

167
00:08:57.972 --> 00:09:00.661
that's totally up to you as well.

168
00:09:00.661 --> 00:09:04.467
Okay, so now that we have that,
we have this other issue, right?

169
00:09:04.467 --> 00:09:05.790
Filter text doesn't exist.

170
00:09:05.790 --> 00:09:09.258
Well, that makes sense because
we need to eliminate this and

171
00:09:09.258 --> 00:09:10.961
just add .value that works.

172
00:09:10.961 --> 00:09:13.255
And once again, delete that .value.

173
00:09:13.255 --> 00:09:14.437
There we go.

174
00:09:14.437 --> 00:09:19.055
So, now our filteredRestaurantList
computed property does work as expected.

175
00:09:19.055 --> 00:09:22.242
And you can see here that it
actually tells you that, hey,

176
00:09:22.242 --> 00:09:24.468
this is actually a type of computed ref.

177
00:09:24.468 --> 00:09:28.326
So this is what's really nice about
getting into composition API when you're

178
00:09:28.326 --> 00:09:32.359
working with Typescript is because you're
sure to get a lot more specific as far as

179
00:09:32.359 --> 00:09:33.717
how things are being used.

180
00:09:33.717 --> 00:09:36.968
Whereas an options API, it does depend
on where you put it in the code, and

181
00:09:36.968 --> 00:09:40.324
then you kinda have to like trigger it
a little bit to work the way that you want

182
00:09:40.324 --> 00:09:41.122
to with options.

183
00:09:41.122 --> 00:09:44.299
This feels a little bit more like
natural TypeScript because again,

184
00:09:44.299 --> 00:09:46.215
it's just a computer helper method, and

185
00:09:46.215 --> 00:09:48.968
then you're defining a callback
function inside of here.

186
00:09:48.968 --> 00:09:51.902
And then you're basically
defining the return here,

187
00:09:51.902 --> 00:09:53.759
which is the list of restaurants.

188
00:09:53.759 --> 00:09:56.691
And then basically, you're good to go.

189
00:09:56.691 --> 00:10:00.255
All right, finally here, for
a number of restaurants,

190
00:10:00.255 --> 00:10:03.238
we have a dependency on
the computed property.

191
00:10:03.238 --> 00:10:06.130
Now remember what I said,
refs require you to unpack it.

192
00:10:06.130 --> 00:10:09.678
So when we look at filteredRestaurantList,
it is a computed ref.

193
00:10:09.678 --> 00:10:12.948
In other words, we actually do
need to unpack this as well.

194
00:10:12.948 --> 00:10:15.928
So this is where .value also
needs to come into play.

195
00:10:15.928 --> 00:10:19.516
And that's a little gotcha that some
people don't realize when you're learning

196
00:10:19.516 --> 00:10:22.220
about ref and reactive Is that
because computer is using ref,

197
00:10:22.220 --> 00:10:23.522
it also needs to be unpacked.

198
00:10:23.522 --> 00:10:27.094
So then it's saying it's not being used,
so let's go ahead and add that real quick.

199
00:10:27.094 --> 00:10:27.949
So let's see.

200
00:10:27.949 --> 00:10:32.930
filteredRestaurantList and
then wait, did I miss type it?

201
00:10:32.930 --> 00:10:35.199
I think I did.

202
00:10:35.199 --> 00:10:35.785
There you go.

203
00:10:35.785 --> 00:10:38.342
And then we have the number
of restaurants, okay?

204
00:10:40.943 --> 00:10:44.579
Great, all right, that means computed
has been successfully migrated.

205
00:10:44.579 --> 00:10:47.896
Now we're gonna go ahead and finish this
up, or actually with two more steps.

206
00:10:47.896 --> 00:10:49.768
Let's go ahead and move our methods in.

207
00:10:49.768 --> 00:10:53.033
So methods, right, they got this special
name when it came to options API, but

208
00:10:53.033 --> 00:10:55.192
really, all they are in
JavaScript are functions.

209
00:10:55.192 --> 00:10:56.627
That's really all they are.

210
00:10:56.627 --> 00:10:58.537
So I'm just gonna grab all three here and

211
00:10:58.537 --> 00:11:01.241
use a multi cursor editing to
save us a little bit of time.

212
00:11:01.241 --> 00:11:05.945
And so here, let me just delete that,
delete that, okay?

213
00:11:05.945 --> 00:11:11.240
So here one, two, three, so
we have a const of these three functions,

214
00:11:11.240 --> 00:11:16.645
we will declare it like this, and
then we'll make it an arrow function.

215
00:11:16.645 --> 00:11:21.439
And then already basically these are the
functions that we're going to be calling,

216
00:11:21.439 --> 00:11:23.541
although this got deleted somehow.

217
00:11:23.541 --> 00:11:25.865
And then let's go ahead and
fix all this up.

218
00:11:25.865 --> 00:11:29.634
So there we can delete
restaurantList.value switch.

219
00:11:29.634 --> 00:11:35.315
hideForm is gonna refer to this hideForm,
so there's no point for this.

220
00:11:35.315 --> 00:11:38.897
And then once again, we can grab that,

221
00:11:38.897 --> 00:11:43.139
switch it out to .value, this also .value.

222
00:11:43.139 --> 00:11:47.186
Great, and so you see here actually, this
is, again we're TypeScript can be super

223
00:11:47.186 --> 00:11:50.218
helpful is that without the .value
if you forget to unpack it.

224
00:11:50.218 --> 00:11:54.166
You can see already that it says that
I don't know what I'm unpacking here,

225
00:11:54.166 --> 00:11:56.148
there's an any here for some reason.

226
00:11:56.148 --> 00:11:58.871
And so that yelling at me
reminds me I need the value.

227
00:11:58.871 --> 00:12:02.730
Great, and then once again,
showNewForm is just a ref.

228
00:12:02.730 --> 00:12:04.249
So there we go.

229
00:12:04.249 --> 00:12:09.209
And then we need to expose all this stuff,

230
00:12:09.209 --> 00:12:13.193
so deleteRestaurant hideForm.

231
00:12:13.193 --> 00:12:16.206
And then the last one was addRestaurant,
okay?

232
00:12:16.206 --> 00:12:21.552
Finally, one last bit as we migrate this
over is that we need the ability to call

233
00:12:21.552 --> 00:12:27.469
the mounted life cycle hook because we're
again, I wanna show that transition over.

234
00:12:27.469 --> 00:12:30.642
So one of the things we've done as
a convention inside of Vue is that we

235
00:12:30.642 --> 00:12:32.461
provided you helper methods, right?

236
00:12:32.461 --> 00:12:35.777
That's what we've been doing this whole
time, ref computed all that stuff.

237
00:12:35.777 --> 00:12:39.405
So we have this thing called,
basically life-cycle hooks, so

238
00:12:39.405 --> 00:12:43.703
onMounted which is a life-cycle hook
that we can import as you can see here,

239
00:12:43.703 --> 00:12:46.070
it's being imported directly from Vue.

240
00:12:46.070 --> 00:12:50.822
This is what actually allows us to
then call those lifecycle hooks.

241
00:12:50.822 --> 00:12:55.820
So onMounted here, and then we basically
pass in the callback function that will

242
00:12:55.820 --> 00:12:57.444
run on that specific one.

243
00:12:57.444 --> 00:12:59.414
What are we gonna do?

244
00:12:59.414 --> 00:13:02.859
Okay, so this is where some people
get tripped up because this

245
00:13:02.859 --> 00:13:05.789
is where we now sort of enter
the land of composable.

246
00:13:05.789 --> 00:13:08.704
If you haven't heard that term before,

247
00:13:08.704 --> 00:13:13.686
basically it's a unique term to any
sort of composition API module.

248
00:13:13.686 --> 00:13:17.226
So anytime someone uses a function that
creates like an example like router,

249
00:13:17.226 --> 00:13:19.470
any sort of function,
it uses composition API.

250
00:13:19.470 --> 00:13:22.917
They're currently being termed as
composable because they're external

251
00:13:22.917 --> 00:13:24.566
modules that use composition API.

252
00:13:24.566 --> 00:13:28.796
I don't know,
I have mixed feelings on the name, but

253
00:13:28.796 --> 00:13:32.562
it seems to be sticking,
so that's what it is.

254
00:13:32.562 --> 00:13:36.151
And so in this particular case, you'll
notice that onMounted what we're doing

255
00:13:36.151 --> 00:13:37.904
here is we're checking for the route.

256
00:13:37.904 --> 00:13:39.754
And if the route has
a query parameter of new,

257
00:13:39.754 --> 00:13:41.808
we're actually showing
the new form basically.

258
00:13:41.808 --> 00:13:45.665
So it's like a hack over
rather doing direct routing.

259
00:13:45.665 --> 00:13:47.235
So how do we actually get this, right?

260
00:13:47.235 --> 00:13:49.127
Because now there's no
more global properties.

261
00:13:49.127 --> 00:13:52.379
This is one of the things I think that
scares people a little bit when moving

262
00:13:52.379 --> 00:13:55.737
from options API to composition API is
that there's a lot of guardrails that

263
00:13:55.737 --> 00:13:57.521
options this gives you automatically,

264
00:13:57.521 --> 00:14:00.006
especially when it comes to
globally inherited stuff.

265
00:14:00.006 --> 00:14:03.738
And so the way this works actually is
that, especially with Vue 3 going forward,

266
00:14:03.738 --> 00:14:06.282
with all the libraries being
TypeScript friendly, and

267
00:14:06.282 --> 00:14:08.088
we wanna be composition API friendly.

268
00:14:08.088 --> 00:14:12.078
In addition to being options API friendly,
is that we have this

269
00:14:12.078 --> 00:14:16.920
prefix in composable that's being
used a lot, inadvertently called use.

270
00:14:16.920 --> 00:14:20.089
So what we can do is, since we
wanna grab the link from the route,

271
00:14:20.089 --> 00:14:22.161
we wanna grab something from Vue router.

272
00:14:22.161 --> 00:14:29.499
So if I scroll up here, I can import
something called useRoute from vue router.

273
00:14:29.499 --> 00:14:33.909
And so if you're thinking of like, well,
how would I know to use like use route?

274
00:14:33.909 --> 00:14:38.000
We try to actually follow conventions of
what you would expect from the global API.

275
00:14:38.000 --> 00:14:41.976
So sometimes you might want router things,
so that will be used router, right,

276
00:14:41.976 --> 00:14:43.675
if you see using this .$ router.

277
00:14:43.675 --> 00:14:47.598
So use routes here is what's gonna
basically allow you to get all the things

278
00:14:47.598 --> 00:14:50.346
that you would normally
get from this .$.route.

279
00:14:50.346 --> 00:14:54.490
So if I do useRoute like this, this will
actually then grab the route for me.

280
00:14:54.490 --> 00:14:59.582
And then I can swap this
out now which is route,

281
00:14:59.582 --> 00:15:04.161
and then I can swap this out with .value.

282
00:15:04.161 --> 00:15:08.280
And that is everything when it comes
to migrating to the composition API.

283
00:15:08.280 --> 00:15:12.244
And so as we can see now,
we can actually delete this part here.

284
00:15:12.244 --> 00:15:16.967
And so we have this nice, isolated
module of JavaScript that's leveraging

285
00:15:16.967 --> 00:15:21.409
TypeScript, and then it's done in
a way that can be freely organized.

286
00:15:21.409 --> 00:15:26.404
And this is what composition API really
does offer in comparison to options API

287
00:15:26.404 --> 00:15:30.867
is that now when we're looking at
this code, we can go, all right, so

288
00:15:30.867 --> 00:15:33.457
this is managing restaurants, right?

289
00:15:33.457 --> 00:15:37.323
So in the past, right,
this is essentially the methods section.

290
00:15:37.323 --> 00:15:43.263
This was the lifecycle section,
and then we had computed here.

291
00:15:43.263 --> 00:15:46.674
And then we had all our data here.

292
00:15:46.674 --> 00:15:49.297
But because we're in free
form composition API then,

293
00:15:49.297 --> 00:15:52.432
we can actually start thinking like,
you know what, actually,

294
00:15:52.432 --> 00:15:56.099
I think it makes more sense to group
all like the restaurant stuff together.

295
00:15:56.099 --> 00:15:59.347
So I'm gonna take the restaurant here,
group that with this,

296
00:15:59.347 --> 00:16:02.555
cuz I think this makes more sense
that we established the ref.

297
00:16:02.555 --> 00:16:07.229
First, I'm gonna call this Restaurant
Module, we have the list of data,

298
00:16:07.229 --> 00:16:10.954
we filter that data, and
then we can even manage that data.

299
00:16:10.954 --> 00:16:12.279
So I can do like that.

300
00:16:12.279 --> 00:16:17.112
And then number of restaurants actually
is relevant, so we'll keep it there.

301
00:16:17.112 --> 00:16:20.544
But then we have all this form stuff,
right, and

302
00:16:20.544 --> 00:16:24.838
this stuff we can really just
say this is the New Form Module.

303
00:16:27.219 --> 00:16:30.584
And then we can just say, well, for
now the life cycle hook is related to this

304
00:16:30.584 --> 00:16:32.649
if not doing anything
else different with it.

305
00:16:32.649 --> 00:16:35.749
So we'll grab that, and
then we'll grab this to stuff too here.

306
00:16:35.749 --> 00:16:40.106
And now we have stuff organized by

307
00:16:40.106 --> 00:16:45.397
feature rather than by their concerns or

308
00:16:45.397 --> 00:16:49.143
how they're functioning.

309
00:16:49.143 --> 00:16:51.308
Is there a better best practice?

310
00:16:51.308 --> 00:16:53.641
No, it is entirely up to your team.

311
00:16:53.641 --> 00:16:57.718
However, as you might have noticed though,
because we're in vanilla JavaScript land,

312
00:16:57.718 --> 00:17:00.144
this does open us up to then
creating the composable.

313
00:17:00.144 --> 00:17:03.004
In other words,
we could export these chunks of code into

314
00:17:03.004 --> 00:17:07.425
individual JavaScript or TypeScript files,
and then share them amongst components.

315
00:17:07.425 --> 00:17:10.860
And that's where it starts to get really
powerful with composition API is that

316
00:17:10.860 --> 00:17:11.805
reusability piece.

317
00:17:11.805 --> 00:17:15.466
Because with options API, you were
limited to using essentially mixins,

318
00:17:15.466 --> 00:17:18.313
which was prone to errors as
far as like naming things, and

319
00:17:18.313 --> 00:17:21.354
then you have to worry about
things overriding a certain way.

320
00:17:21.354 --> 00:17:25.320
But because everything here in composition
API is very declarative, you know exactly

321
00:17:25.320 --> 00:17:29.176
when you're importing something from
a specific file, what it's being named, or

322
00:17:29.176 --> 00:17:32.024
you can rename it if it has
a conflict with that specific file.

323
00:17:32.024 --> 00:17:35.765
And you don't have to deal with all the
assumptions that the options API can often

324
00:17:35.765 --> 00:17:38.970
provide for you, which again,
can be helpful in certain contexts.

325
00:17:38.970 --> 00:17:43.730
But in the context of reusability of code,
the mixins definitely became a fun one for

326
00:17:43.730 --> 00:17:45.550
a lot of people that we learned.

