WEBVTT

1
00:00:00.040 --> 00:00:05.600
&gt;&gt; Steve Kinney: So up until now,
our database has been wide open and

2
00:00:05.600 --> 00:00:07.800
free for
anyone to do whatever to anything.

3
00:00:08.910 --> 00:00:13.330
That's cool for doing development, but

4
00:00:13.330 --> 00:00:19.060
not really a long term game plan
cuz people on the Internet are bad.

5
00:00:19.060 --> 00:00:23.200
And so we're gonna talk a little about
how we actually set up the kind of

6
00:00:23.200 --> 00:00:26.170
security rules for our database.

7
00:00:26.170 --> 00:00:30.280
We basically need to find what
a given user is allowed to do, and

8
00:00:30.280 --> 00:00:34.320
Firebase enforces all the rest of it for
us.

9
00:00:34.320 --> 00:00:39.019
So let's look at what security rules
look like for Cloud Firestore.

10
00:00:40.510 --> 00:00:48.430
So, you have the service which is
Cloud Firestore, and then this

11
00:00:48.430 --> 00:00:52.910
variable there in the curly brackets that
database says which database to match.

12
00:00:52.910 --> 00:00:58.880
Now, right now in Cloud Firestore there
is only one database and it's default.

13
00:00:58.880 --> 00:01:00.480
This is I think more future proofing so

14
00:01:00.480 --> 00:01:04.750
if they ever offer multiple databases,
that can be a thing.

15
00:01:04.750 --> 00:01:06.550
But for
right now there is one database, so

16
00:01:06.550 --> 00:01:11.130
that variable of which database
will always be default.

17
00:01:11.130 --> 00:01:16.690
So for the default database and then we
can have some additional rules in there.

18
00:01:16.690 --> 00:01:22.592
Now there are a bunch of different
actions that we can whitelist.

19
00:01:22.592 --> 00:01:26.000
By default, everything,
once everything is blacklisted,

20
00:01:26.000 --> 00:01:29.380
you turn on certain abilities, right?

21
00:01:30.470 --> 00:01:32.840
Really you have read and write, right?

22
00:01:32.840 --> 00:01:37.810
So if you turn on read there is
the ability to get a given document or

23
00:01:37.810 --> 00:01:41.070
to list all of the documents
in a collection.

24
00:01:42.120 --> 00:01:46.060
Read is both of them, get and
list are the two more granular options.

25
00:01:46.060 --> 00:01:50.850
So if you turn on read, you're gonna get
both the ability to get a single document,

26
00:01:50.850 --> 00:01:53.630
as well as all the ones in a collection.

27
00:01:53.630 --> 00:01:58.450
But you can say, okay, they can't see all
the documents in this collection, but

28
00:01:58.450 --> 00:02:02.320
they know exactly which one they want,
then they can go ahead and get that one.

29
00:02:02.320 --> 00:02:06.550
So if you had file, like maybe you had
all of, making a Google Docs clone.

30
00:02:06.550 --> 00:02:11.050
You have all the documents
in a collection, right?

31
00:02:11.050 --> 00:02:14.794
And maybe you keep those IDs on
the user profile and so, okay,

32
00:02:14.794 --> 00:02:18.178
if you know which one already,
you can go and get it, but

33
00:02:18.178 --> 00:02:22.020
you're not going to be able
to scan through all of them.

34
00:02:22.020 --> 00:02:24.090
And then for write, if you turn on write,

35
00:02:24.090 --> 00:02:28.130
they have all the ability to create,
update and delete.

36
00:02:28.130 --> 00:02:32.070
But you can also get granular if you
want and say, okay, I want this rule for

37
00:02:32.070 --> 00:02:36.640
creating, this other rule for
updating, and nobody can delete.

38
00:02:36.640 --> 00:02:38.900
And like,
you can get granular if you want.

39
00:02:38.900 --> 00:02:42.520
Or, you can kind of like batch
them all in either read or write.

40
00:02:43.970 --> 00:02:48.660
So we haven't talked too much
about sub-collections yet, but

41
00:02:48.660 --> 00:02:52.390
we can see if you nest them they kind
of extend from the previous one.

42
00:02:52.390 --> 00:02:55.660
So this would be a comment
sub-collection under posts.

43
00:02:55.660 --> 00:02:58.530
The other thing to notice is that
we have these variables in there,

44
00:02:58.530 --> 00:03:00.540
right, these dynamic segments.

45
00:03:00.540 --> 00:03:06.440
So postId will give you a variable
called postId you can work with and

46
00:03:06.440 --> 00:03:08.570
do logic with as well.

47
00:03:08.570 --> 00:03:12.940
And comments will be
the comment idea in that case.

48
00:03:12.940 --> 00:03:16.005
And you can also see that we're starting
to get some of the logic in there,

49
00:03:16.005 --> 00:03:20.660
we'll allow read or write if in some
condition we haven't written yet.

50
00:03:20.660 --> 00:03:24.150
So for a given comment, if whatever
condition we haven't written yet

51
00:03:24.150 --> 00:03:26.470
is met, they can both read and
write to them.

52
00:03:28.130 --> 00:03:31.871
If you want to just start matching all
the way down, like we know that we can go

53
00:03:31.871 --> 00:03:36.100
an arbitrary depth of collection,
document, collection, document.

54
00:03:36.100 --> 00:03:41.510
This document=**, we'll just go
the rest to the way down for the rules.

55
00:03:41.510 --> 00:03:43.100
So you can get very specific.

56
00:03:43.100 --> 00:03:44.850
Or you can batch go through all of them.

57
00:03:46.260 --> 00:03:50.470
So here's one that we might
very well need very soon.

58
00:03:50.470 --> 00:03:53.950
This is a little different than what
we're actually gonna implement.

59
00:03:53.950 --> 00:03:58.680
But this is for any of the posts

60
00:03:58.680 --> 00:04:03.920
that they can read and/or
write to them only if.

61
00:04:03.920 --> 00:04:05.260
So we have this request object.

62
00:04:05.260 --> 00:04:09.560
This is the request coming into
the database that has the auth.

63
00:04:09.560 --> 00:04:13.140
So only if the request.auth.uid
is not null.

64
00:04:13.140 --> 00:04:15.900
So this would be, a user can read or

65
00:04:15.900 --> 00:04:22.340
write to any post in the post collections
as long as they're logged in.

66
00:04:22.340 --> 00:04:23.527
Right.
If they're not logged in,

67
00:04:23.527 --> 00:04:25.210
they can't even read.

68
00:04:25.210 --> 00:04:28.780
So we're gonna have one where anyone
who visits the page can read but

69
00:04:28.780 --> 00:04:32.340
if they wanna create one,
then they are gonna have to be logged in.

70
00:04:32.340 --> 00:04:35.040
And if they're gonna wanna delete one,
they're gonna have to own that one.

71
00:04:35.040 --> 00:04:37.620
So we're gonna get little
bit more granular than this.

72
00:04:37.620 --> 00:04:40.640
But it starts to show you how
the conditional logic works and

73
00:04:40.640 --> 00:04:42.429
how we can start to define
some of these rules.

74
00:04:43.600 --> 00:04:46.660
This one is for modifying only own data.

75
00:04:46.660 --> 00:04:50.380
So in this case, this would be for
a user's profile.

76
00:04:50.380 --> 00:04:54.320
We can create one, as long as they're
logged in anyone can create, you know,

77
00:04:54.320 --> 00:04:56.050
create one for that user.

78
00:04:56.050 --> 00:05:00.594
But in order to read that profile update
or delete it, the request.auth.uid needs

79
00:05:00.594 --> 00:05:03.890
to equal the uid of that document,
the id of that document.

80
00:05:03.890 --> 00:05:08.550
Right, so you can kinda build up
the kinda more granular logic as you go,

81
00:05:08.550 --> 00:05:13.152
you could also do a little
bit of validation, right.

82
00:05:13.152 --> 00:05:18.010
So resource.data will
be all the fields that

83
00:05:18.010 --> 00:05:23.170
are currently in the database, right,
so that it is as it already sits.

84
00:05:23.170 --> 00:05:24.570
If that document already exists.

85
00:05:24.570 --> 00:05:29.710
Request.resource.data will
have the incoming changes.

86
00:05:29.710 --> 00:05:34.370
Right so, if they're creating one
it's only request.resource.data, but

87
00:05:34.370 --> 00:05:38.130
if they were deleting or modifying it,
then we could see, like, okay,

88
00:05:38.130 --> 00:05:39.480
I want to look at either one of those.

89
00:05:39.480 --> 00:05:43.910
So, you can kind of get a little bit like,
you wanna say okay, only if they have

90
00:05:43.910 --> 00:05:47.470
the secret API key for that document or
something like that, right.

91
00:05:47.470 --> 00:05:49.520
So you can check ones stored on there.

92
00:05:49.520 --> 00:05:54.330
You can get really specific to be like,
okay, if there is a user

93
00:05:54.330 --> 00:05:58.550
document that has an admin bit, turn
to true, then they can do these things.

94
00:05:58.550 --> 00:06:00.770
You can kind of be able to look
at different documents and

95
00:06:00.770 --> 00:06:02.580
figure some of this stuff out like that.

96
00:06:02.580 --> 00:06:05.590
You can actually access
other documents as well.

97
00:06:05.590 --> 00:06:10.920
So for instance, we have that request
off that uid which tells us which user,

98
00:06:10.920 --> 00:06:13.920
we can go ahead, look at a user profile,

99
00:06:13.920 --> 00:06:16.430
which we're going to create later
which is this a document about a user.

100
00:06:16.430 --> 00:06:21.260
And we say, okay are they in admin,
do they own this document?

101
00:06:21.260 --> 00:06:23.880
So on and so forth and so
you can get pretty logical,

102
00:06:23.880 --> 00:06:25.470
we're going to keep, we're going to get.

103
00:06:25.470 --> 00:06:28.990
Kind of like to intermediate depth here,
we're not gonna like pull from other

104
00:06:28.990 --> 00:06:33.330
documents, but we are gonna have those
different stages, like anyone can read,

105
00:06:33.330 --> 00:06:38.150
only owner can delete, anyone who is
logged in can create, so on and so forth.

106
00:06:38.150 --> 00:06:40.300
But you can actually like query
other things for permissions.

107
00:06:40.300 --> 00:06:43.910
So you can say okay, this user,
what documents do they own?

108
00:06:43.910 --> 00:06:48.020
Is this post in the list of
ones created by that user?

109
00:06:48.020 --> 00:06:50.530
If so, they can do this thing,
so on and so forth.

110
00:06:50.530 --> 00:06:53.230
So you can have three different users
who are allowed to go ahead and

111
00:06:53.230 --> 00:06:54.320
delete a given one, right?

112
00:06:54.320 --> 00:06:56.897
And so you can structure
your data in different ways,

113
00:06:56.897 --> 00:07:00.689
you can query other documents to figure
out what happens in the security rule.

114
00:07:03.328 --> 00:07:06.860
&gt;&gt; Steve Kinney: Security rules are all or
nothing, if anything.

115
00:07:06.860 --> 00:07:09.280
By a default, everything is blacklisted.

116
00:07:09.280 --> 00:07:12.240
If any rule,
if you have two conditions, right?

117
00:07:12.240 --> 00:07:16.820
If any of them are true,
then the user can do that thing, right?

118
00:07:16.820 --> 00:07:20.270
So if you have two duplicate statements,
and it's false in one case,

119
00:07:20.270 --> 00:07:21.840
true in the other, they can do it.

120
00:07:21.840 --> 00:07:24.420
So you do need to be a little bit careful.

121
00:07:24.420 --> 00:07:28.830
You can also do things like
limiting the size, so like for

122
00:07:28.830 --> 00:07:32.840
instance we know that you pay based on
the size of the query that you’re getting

123
00:07:32.840 --> 00:07:36.790
back, so you could put security
rules in place like hey,

124
00:07:36.790 --> 00:07:41.604
at most you know,
as long as the limit is 10 or less, cool.

125
00:07:41.604 --> 00:07:46.330
Otherwise if they try to pull
all 60 million, not cool, right?

126
00:07:46.330 --> 00:07:49.120
And see you can start to limit
like all sorts of other things,

127
00:07:49.120 --> 00:07:51.330
like how many they get in and
so on and so forth.

128
00:07:53.390 --> 00:07:57.290
Cool, this is what we have right now.

129
00:07:57.290 --> 00:08:00.479
This is every document in the database.

130
00:08:01.490 --> 00:08:03.140
The one other text notes
that I didn't mention,

131
00:08:03.140 --> 00:08:06.900
you can actually write functions as well,
effectively.

132
00:08:06.900 --> 00:08:08.310
This is not JavaScript obviously,

133
00:08:08.310 --> 00:08:10.370
but you can write functions
that look like JavaScript.

134
00:08:10.370 --> 00:08:13.450
For some of the more complicated ones,
if you find yourself reusing it,

135
00:08:13.450 --> 00:08:15.740
you can start to pull it
out into functions as well.

136
00:08:15.740 --> 00:08:18.677
But this is what we have right
now in our database, which is for

137
00:08:18.677 --> 00:08:22.575
that default database, the only database,
for any document, allow whoever and

138
00:08:22.575 --> 00:08:26.320
whatever to read and write,
no matter what, with no conditions.

139
00:08:26.320 --> 00:08:29.380
So yeah,
we don't want to show that to production.

140
00:08:29.380 --> 00:08:31.650
We are gonna want to get
a little bit more specific.

141
00:08:31.650 --> 00:08:34.470
And as we add other
collections to our database,

142
00:08:34.470 --> 00:08:36.590
we're gonna need to refine
these rules a little bit.

143
00:08:36.590 --> 00:08:39.940
But the very least,
we can get to a good start here.

