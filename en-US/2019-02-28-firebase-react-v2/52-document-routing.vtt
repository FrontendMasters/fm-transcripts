WEBVTT

1
00:00:00.140 --> 00:00:03.870
&gt;&gt; Steve Kinney: Two things we
haven't covered yet, which is, one,

2
00:00:03.870 --> 00:00:05.690
this idea of subcollections.

3
00:00:05.690 --> 00:00:07.109
We've talked about collections.

4
00:00:07.109 --> 00:00:09.814
We've talked about subcollections.

5
00:00:09.814 --> 00:00:10.940
We haven't really dealt with any of it.

6
00:00:10.940 --> 00:00:12.813
We've just had this post and
the user, right?

7
00:00:12.813 --> 00:00:15.640
And those are both top level collections.

8
00:00:15.640 --> 00:00:19.010
But a collection can have
further collections beneath it.

9
00:00:19.010 --> 00:00:22.910
And so again, if a post can
have a comment subcollection,

10
00:00:22.910 --> 00:00:27.110
those comments are only
a subcollection of an individual post.

11
00:00:27.110 --> 00:00:30.126
So you don't need to do things
like filtering of queries.

12
00:00:30.126 --> 00:00:34.804
Even in a SQL database, you might have
a comments table that has a post ID and

13
00:00:34.804 --> 00:00:37.050
you would have to do a join on that.

14
00:00:37.050 --> 00:00:38.250
In this, you don't have to do that.

15
00:00:38.250 --> 00:00:39.980
They are unique to every post.

16
00:00:39.980 --> 00:00:41.645
It does make it a little problematic.

17
00:00:41.645 --> 00:00:45.110
If you wanna search all of the comments or
something, that's not a thing, right?

18
00:00:45.110 --> 00:00:48.530
You'd have to store them a second place or
something along those lines.

19
00:00:48.530 --> 00:00:51.780
But it does mean that we can keep
nesting down different layers and

20
00:00:51.780 --> 00:00:52.750
separate stuff out.

21
00:00:52.750 --> 00:00:55.390
There's a bunch of advantages
to subcollections.

22
00:00:55.390 --> 00:01:00.087
One is since queries are shallow,
if there's stuff you don't want, so

23
00:01:00.087 --> 00:01:03.013
you might necessarily
have a list of posts for

24
00:01:03.013 --> 00:01:08.018
maybe all of the full post content might
be a single document subcollection,

25
00:01:08.018 --> 00:01:12.332
so that you can get the title and
metadata of all the posts, right?

26
00:01:12.332 --> 00:01:15.936
But for the full body, that might be
in a document in the subcollection,

27
00:01:15.936 --> 00:01:17.131
the comments, right?

28
00:01:17.131 --> 00:01:19.319
If you don't wanna get
everything in the first pass,

29
00:01:19.319 --> 00:01:21.514
moving it down to a subcollection
works really well.

30
00:01:21.514 --> 00:01:25.643
For the list of all the posts, I also
don't wanna get all of the comments,

31
00:01:25.643 --> 00:01:27.184
perhaps, at that moment.

32
00:01:27.184 --> 00:01:30.890
I only wanna fetch the comments
should they go to the given post.

33
00:01:32.166 --> 00:01:36.180
The other thing that we're gonna do
is we have React router set up now.

34
00:01:36.180 --> 00:01:41.370
It would be great if when
they go to a given URL,

35
00:01:41.370 --> 00:01:45.721
we can fetch the post based on the URL,
right?

36
00:01:45.721 --> 00:01:50.328
Because let's say this
application really grows and

37
00:01:50.328 --> 00:01:54.431
it's got 60 million hot takes in it,
right?

38
00:01:54.431 --> 00:01:59.400
We're not gonna load those all into React
state because that would be too much.

39
00:01:59.400 --> 00:02:02.335
And we'd probably limit the query
to maybe the first 10 or 20, but

40
00:02:02.335 --> 00:02:04.946
that doesn't mean that somebody
might share a link, right?

41
00:02:04.946 --> 00:02:09.080
So we wanna be able to fetch
a post based on the URL.

42
00:02:09.080 --> 00:02:13.468
So if someone does share a link, we can
go to Firestore, get just that document,

43
00:02:13.468 --> 00:02:15.090
in a sense will also get the comments.

44
00:02:15.090 --> 00:02:18.000
So there's two things that we're
gonna do is having React router

45
00:02:18.000 --> 00:02:21.180
inform what specific document to go get.

46
00:02:21.180 --> 00:02:24.060
And then also,
we'll have comments as well,

47
00:02:24.060 --> 00:02:27.470
and we'll be able to create comments and
then read them all as it goes on.

48
00:02:27.470 --> 00:02:29.480
We'll actually subscribe
to those changes for

49
00:02:29.480 --> 00:02:32.560
the individual document cuz
that individual document may or

50
00:02:32.560 --> 00:02:37.900
may not be in that list of posts
that we're also subscribed to.

51
00:02:37.900 --> 00:02:40.820
Right now, we're fetching all of them,
but if we did limit it to 10, and

52
00:02:40.820 --> 00:02:44.930
it was the 12th,
it wouldn't be tracked, right?

53
00:02:44.930 --> 00:02:48.910
So it makes sense that we would have
a separate abstraction for this.

54
00:02:48.910 --> 00:02:52.900
So those are the two things
that we're gonna do, and

55
00:02:52.900 --> 00:02:56.842
it's gonna be not dissimilar from
the user profile component that we made.

56
00:02:56.842 --> 00:03:00.300
We're gonna break it out into computer
properties, because we're gonna need to

57
00:03:00.300 --> 00:03:04.130
hold onto the comments ref to both to get
the comments and to post new comments.

58
00:03:04.130 --> 00:03:08.630
We're gonna build the comments ref based
off the post ref, so on and so forth.

59
00:03:08.630 --> 00:03:10.640
So it will be slightly similar, but

60
00:03:10.640 --> 00:03:13.000
a different take what we
do with the user profile.

61
00:03:13.000 --> 00:03:14.470
This time, we're not doing storage,

62
00:03:14.470 --> 00:03:17.980
we're letting the route inform which
one to go get, so on and so forth.

63
00:03:19.280 --> 00:03:19.940
So let’s get into it.

64
00:03:22.060 --> 00:03:25.508
I do have a problem, which is I have
a component called Posts and Post, and

65
00:03:25.508 --> 00:03:27.524
I don’t really know what to call this one.

66
00:03:27.524 --> 00:03:32.857
I’m gonna call it PostPage, PostView.

67
00:03:32.857 --> 00:03:34.811
I wanna have strong opinions
on what we name this for.

68
00:03:37.088 --> 00:03:38.550
&gt;&gt; Speaker 2: [INAUDIBLE] PageView.

69
00:03:38.550 --> 00:03:39.284
&gt;&gt; Steve Kinney: Page, all right.

70
00:03:39.284 --> 00:03:40.457
&gt;&gt; Speaker 2: Do it in Post Page.

71
00:03:40.457 --> 00:03:44.304
&gt;&gt; Steve Kinney: I got a PostPage vote.

72
00:03:44.304 --> 00:03:45.573
So we've got this PostPage.

73
00:03:48.000 --> 00:03:51.048
&gt;&gt; Steve Kinney: Bring in React and we're
gonna make it a stateful component because

74
00:03:51.048 --> 00:03:54.010
we're gonna have that comment field and,
yeah, input fields.

75
00:03:54.010 --> 00:03:58.917
We're gonna bring in that Post component
that we're using on the index page just to

76
00:03:58.917 --> 00:03:59.838
show the post.

77
00:03:59.838 --> 00:04:01.960
I don't really feel like
rewriting that right now.

78
00:04:01.960 --> 00:04:08.751
So I'm gonna import Post, ./Post.

79
00:04:08.751 --> 00:04:10.450
We have that Comments component.

80
00:04:10.450 --> 00:04:11.882
That's been there the entire time.

81
00:04:14.993 --> 00:04:20.064
&gt;&gt; Steve Kinney: ./Comments,
we will need Firestore at some point.

82
00:04:22.015 --> 00:04:22.730
&gt;&gt; Steve Kinney: Nope.

83
00:04:26.326 --> 00:04:28.428
&gt;&gt; Steve Kinney: I feel like
I've accidentally taught that.

84
00:04:28.428 --> 00:04:30.150
Now let's do the wrong thing,
so that's great.

85
00:04:31.880 --> 00:04:36.303
And then we will also need that
utility function that we had before.

86
00:04:39.338 --> 00:04:47.322
&gt;&gt; Steve Kinney: Cool, and so we'll say
class PostPage extends a Component.

87
00:04:49.713 --> 00:04:53.431
&gt;&gt; Steve Kinney: And the state,
we'll have to go get the post, so

88
00:04:53.431 --> 00:04:55.620
that will start out as null.

89
00:04:57.200 --> 00:04:59.581
comments will start out as an empty array.

90
00:05:03.797 --> 00:05:05.724
&gt;&gt; Steve Kinney: Start
out the render method.

91
00:05:16.019 --> 00:05:19.220
&gt;&gt; Steve Kinney: Cool, so
you have all that in place.

92
00:05:19.220 --> 00:05:23.291
Now I want to hook it up
to the page that I want to

93
00:05:23.291 --> 00:05:26.630
know what post I'm supposed to get.

94
00:05:26.630 --> 00:05:29.000
Right now, this post is null,
cool, I wanna see a post.

95
00:05:29.000 --> 00:05:30.950
I don't know which one get.

96
00:05:30.950 --> 00:05:34.380
That ideally would be informed by the URL.

97
00:05:34.380 --> 00:05:36.656
So let's start with this get so
we can get to this page, and

98
00:05:36.656 --> 00:05:38.519
then we'll deal with
the next step from there.

99
00:05:39.730 --> 00:05:45.474
So in react-router,
we can go say posts/:id,

100
00:05:45.474 --> 00:05:49.615
and this'll be a dynamic segment.

101
00:05:49.615 --> 00:05:51.530
This'll be the ID of
the post we should go get.

102
00:05:54.057 --> 00:05:56.928
&gt;&gt; Steve Kinney: We'll say PostPage.

103
00:05:56.928 --> 00:05:59.350
No, I don't think I exported it yet.

104
00:06:02.080 --> 00:06:06.500
export default PostPage,
all right, very cool.

105
00:06:09.643 --> 00:06:12.127
&gt;&gt; Steve Kinney: There we go.

106
00:06:12.127 --> 00:06:14.415
Let's actually just take that for
a spin as it is now.

107
00:06:16.916 --> 00:06:19.582
&gt;&gt; Steve Kinney: Let's give
ourselves a link from a given post,

108
00:06:22.450 --> 00:06:24.865
&gt;&gt; Steve Kinney: To that PostPage.

109
00:06:24.865 --> 00:06:27.793
So we'll go ahead and

110
00:06:27.793 --> 00:06:33.820
say import Link from react-router-dom.

111
00:06:36.233 --> 00:06:39.952
&gt;&gt; Steve Kinney: We'll say the h3,
the title, we'll say that is the Link now,

112
00:06:48.296 --> 00:06:49.086
&gt;&gt; Steve Kinney: to,

113
00:06:52.854 --> 00:06:54.076
&gt;&gt; Steve Kinney: /posts,

114
00:06:56.593 --> 00:06:57.421
&gt;&gt; Steve Kinney: id.

115
00:07:01.107 --> 00:07:03.270
&gt;&gt; Steve Kinney: So
now all these are links.

116
00:07:03.270 --> 00:07:06.221
Let's go click on this one and
you see we're on a post page.

