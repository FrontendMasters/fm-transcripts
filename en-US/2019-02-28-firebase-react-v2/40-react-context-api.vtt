WEBVTT

1
00:00:00.090 --> 00:00:01.240
&gt;&gt; Steve Kinney: So let's go ahead.

2
00:00:01.240 --> 00:00:06.172
First we are going to pull out the posts
into the context API so we can wrap.

3
00:00:06.172 --> 00:00:09.747
Simply, this one the only component that
really cares about them is this post

4
00:00:09.747 --> 00:00:10.870
component.

5
00:00:10.870 --> 00:00:15.050
But there could be other use cases
as this application grows, so

6
00:00:15.050 --> 00:00:19.780
we are just going to try and the pattern
in this case and kind of get used to it.

7
00:00:19.780 --> 00:00:23.470
It doesn't feel right to put
it in my components folder, so

8
00:00:23.470 --> 00:00:26.968
I'm going to make one additional folder,
&gt;&gt; Steve Kinney: And

9
00:00:26.968 --> 00:00:29.600
we'll call this one providers.

10
00:00:33.440 --> 00:00:37.490
And we'll make a new component
called posts, plural,

11
00:00:41.465 --> 00:00:44.480
&gt;&gt; Steve Kinney: Provider.jsx.

12
00:00:44.480 --> 00:00:49.140
And in here, we're going to basically
create a component that keeps

13
00:00:49.140 --> 00:00:53.330
all of the posts in state, and can then
give them to child components for us.

14
00:00:53.330 --> 00:00:56.080
And we can basically wrap any
component in this component.

15
00:00:56.080 --> 00:00:58.540
It will receive the posts.

16
00:00:58.540 --> 00:01:00.340
So we are going to need
a few things in this case,

17
00:01:00.340 --> 00:01:04.498
we are going to need
&gt;&gt; Steve Kinney: React and

18
00:01:04.498 --> 00:01:06.080
react component.

19
00:01:07.300 --> 00:01:10.250
We know that we are going to
need firestore in this case.

20
00:01:14.166 --> 00:01:19.646
&gt;&gt; Steve Kinney: Nice try, but
no dice from firebase and, eventually,

21
00:01:19.646 --> 00:01:26.200
I'm going to need the formater,
but we'll pull that in a second.

22
00:01:26.200 --> 00:01:30.915
Let's do it now.

23
00:01:30.915 --> 00:01:33.764
Cool, so we'll go ahead and

24
00:01:33.764 --> 00:01:39.772
we'll say class PostsProvider
&gt;&gt; Steve Kinney: Extends

25
00:01:39.772 --> 00:01:44.476
a component
&gt;&gt; Steve Kinney: And the nice part about

26
00:01:44.476 --> 00:01:50.830
this refactor is that it is effectively
a lot of copy and paste action.

27
00:01:51.990 --> 00:01:58.207
So we'll go into application, and
&gt;&gt; Steve Kinney: We're

28
00:01:58.207 --> 00:02:02.190
gonna want this piece that subscribes
to the changes in firestore.

29
00:02:04.306 --> 00:02:05.540
&gt;&gt; Steve Kinney: We need the unsubscribe.

30
00:02:05.540 --> 00:02:10.900
We're gonna keep track of the posts,
and then we never unsubscribed from

31
00:02:10.900 --> 00:02:13.530
the off changes, so when we write the user
one, we're gonna have to do that as well.

32
00:02:14.680 --> 00:02:20.860
So let's go ahead and we'll start with
grabbing this in our PostsProvider.

33
00:02:20.860 --> 00:02:24.838
We'll say,
&gt;&gt; Steve Kinney: The state,

34
00:02:33.702 --> 00:02:34.553
&gt;&gt; Steve Kinney: export default

35
00:02:34.553 --> 00:02:36.519
PostsProvider, before I forget.

36
00:02:48.054 --> 00:02:51.862
&gt;&gt; Steve Kinney: So this is, effectively,
some of it I'm just retyping, but

37
00:02:51.862 --> 00:02:56.419
this is all code right now that is
stolen from the application component.

38
00:02:59.719 --> 00:03:01.610
&gt;&gt; Steve Kinney: I'm gonna come on

39
00:03:01.610 --> 00:03:06.382
unmounts,
&gt;&gt; Steve Kinney: And

40
00:03:06.382 --> 00:03:11.295
then when it comes time to render,
&gt;&gt; Steve Kinney: What we're gonna do is

41
00:03:11.295 --> 00:03:13.610
we're gonna create
a context about our post.

42
00:03:13.610 --> 00:03:20.885
So we'll pull that in from react as well,
&gt;&gt; Steve Kinney: And

43
00:03:20.885 --> 00:03:28.320
we'll say,
&gt;&gt; Steve Kinney: PostsContext

44
00:03:28.320 --> 00:03:31.500
= createContext.

45
00:03:31.500 --> 00:03:32.530
What is context?

46
00:03:32.530 --> 00:03:39.390
There's an API that kind of exists in
react that allow components, basically

47
00:03:39.390 --> 00:03:43.760
it allows you to skip the every component
must pass stuff down to its children.

48
00:03:43.760 --> 00:03:47.950
It's basically, some higher level
component is wrapped in this provider, and

49
00:03:47.950 --> 00:03:52.060
then any of the children
can tap in to that context

50
00:03:52.060 --> 00:03:53.720
without having to pass
stuff all the way down.

51
00:03:53.720 --> 00:03:56.774
It's a way to skip to everything
being an application component.

52
00:03:56.774 --> 00:04:02.580
So only the components that need it
can sign up for that piece of state.

53
00:04:02.580 --> 00:04:07.830
We've seen this before with Redux,
and MobX React uses it as well.

54
00:04:07.830 --> 00:04:11.743
And we wrap the application, and then when
we say, okay, connect and we do the map

55
00:04:11.743 --> 00:04:15.820
state to props and everything along those
lines that use the older context API.

56
00:04:15.820 --> 00:04:20.310
The older context API, which was used by
React and MobX, and some of the libraries

57
00:04:20.310 --> 00:04:25.200
like that, was kind of unstable and
not recommended for general consumption.

58
00:04:25.200 --> 00:04:28.840
The newer one is now you can use it,
so we are going to.

59
00:04:28.840 --> 00:04:32.436
All right, so we'll go ahead and

60
00:04:32.436 --> 00:04:37.572
we'll render,
&gt;&gt; Steve Kinney: And

61
00:04:37.572 --> 00:04:45.870
we're gonna need the
&gt;&gt; Steve Kinney: posts from, this.state.

62
00:04:45.870 --> 00:04:50.340
Again, this is, so far, very similar

63
00:04:50.340 --> 00:04:55.370
to what we had in
the application component.

64
00:04:55.370 --> 00:04:59.240
You could theoretically have copied and
pasted most of this out so far.

65
00:04:59.240 --> 00:05:01.330
Where it gets a little bit different
is that this component will

66
00:05:01.330 --> 00:05:02.030
take some children.

67
00:05:09.805 --> 00:05:15.455
&gt;&gt; Steve Kinney: And it will return the,
&gt;&gt; Steve Kinney: The posts context

68
00:05:15.455 --> 00:05:21.310
has two sub components,
a provider and a consumer.

69
00:05:21.310 --> 00:05:23.030
So here we're gonna provide the posts

70
00:05:31.478 --> 00:05:32.300
&gt;&gt; Steve Kinney: To the children.

71
00:05:33.470 --> 00:05:34.910
We're gonna feed the children some posts.

72
00:05:36.490 --> 00:05:38.230
Except it's context, it's not content.

73
00:05:41.924 --> 00:05:43.720
&gt;&gt; Steve Kinney: All right,
and we exported that.

74
00:05:45.180 --> 00:05:47.160
That should be everything we need.

