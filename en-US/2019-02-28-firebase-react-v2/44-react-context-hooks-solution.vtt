WEBVTT

1
00:00:00.170 --> 00:00:03.570
&gt;&gt; Steve Kinney: All right, so
we're going to refactor the user,

2
00:00:03.570 --> 00:00:09.530
we're gonna create this user/provider
now that is going to basically take

3
00:00:09.530 --> 00:00:14.810
the rest of the state management out
of the application component, right?

4
00:00:14.810 --> 00:00:17.300
Eventually, we'll create
a second obstruction,

5
00:00:17.300 --> 00:00:20.030
which is a traditional high
order component obstruction,

6
00:00:20.030 --> 00:00:24.920
mostly to show that this isn't
the only way that you can do it.

7
00:00:24.920 --> 00:00:25.986
Do I need to mix and match?

8
00:00:25.986 --> 00:00:30.615
I don't know, maybe, but what I really
wanna show is that there are multiple ways

9
00:00:30.615 --> 00:00:34.395
to kind of hook into Firebase and
pass it along to your components.

10
00:00:34.395 --> 00:00:38.838
Well, actually, we'll do users in
two different ways, one now and

11
00:00:38.838 --> 00:00:40.154
one in a little bit.

12
00:00:40.154 --> 00:00:42.978
So let's start out with
making that user provider.

13
00:00:47.928 --> 00:00:52.706
&gt;&gt; Steve Kinney: And again, this is
ultimately going to be a whole lot of copy

14
00:00:52.706 --> 00:00:56.730
paste from the application,
but we're into it.

15
00:00:58.430 --> 00:01:06.026
So we'll use Component,
we also want createContext,

16
00:01:06.026 --> 00:01:10.398
and we’re gonna need auth and,

17
00:01:19.152 --> 00:01:22.099
&gt;&gt; Steve Kinney: createUseProfileDocument
from that Firebase file that we have.

18
00:01:25.677 --> 00:01:26.250
&gt;&gt; Steve Kinney: Cool, and

19
00:01:26.250 --> 00:01:29.830
we know that we're gonna need one
of those context objects again.

20
00:01:37.894 --> 00:01:41.088
&gt;&gt; Steve Kinney: You can give it a default
value, our state is gonna handle that so

21
00:01:41.088 --> 00:01:43.349
we don't have to, but just to demonstrate.

22
00:01:46.240 --> 00:01:49.317
&gt;&gt; Steve Kinney: All right, and
now we make a class of UserProvider.

23
00:01:57.871 --> 00:02:02.680
&gt;&gt; Steve Kinney: And that will have
that same statement beginning.

24
00:02:02.680 --> 00:02:05.601
This is again exactly what we have
in the application component.

25
00:02:08.607 --> 00:02:11.553
&gt;&gt; Steve Kinney: And since we
already took all of the post stuff,

26
00:02:11.553 --> 00:02:15.459
the only thing stopping me from
copying and pasting too much for

27
00:02:15.459 --> 00:02:19.601
the post provider before was that
all that user stuff was in there.

28
00:02:19.601 --> 00:02:23.090
[LAUGH] But I got all that out, so
there's a lot more copy paste action here.

29
00:02:25.130 --> 00:02:27.549
I can take pretty much all of these.

30
00:02:31.042 --> 00:02:33.105
&gt;&gt; Steve Kinney: And I will cut it.

31
00:02:35.948 --> 00:02:39.578
&gt;&gt; Steve Kinney: So you can see how simple
our application component is getting.

32
00:02:44.372 --> 00:02:52.124
&gt;&gt; Steve Kinney: Let me paste all that in,

33
00:02:57.489 --> 00:03:01.945
&gt;&gt; Steve Kinney: This will actually

34
00:03:01.945 --> 00:03:04.175
be this.

35
00:03:08.504 --> 00:03:12.128
&gt;&gt; Steve Kinney: And this is going to be
the, we also need those children, so we'll

36
00:03:12.128 --> 00:03:19.595
say,
&gt;&gt; Steve Kinney: That'll

37
00:03:19.595 --> 00:03:20.280
eventually get passed in.

38
00:03:20.280 --> 00:03:24.302
So this will be that
UserContext.Provider and

39
00:03:24.302 --> 00:03:27.930
the value is gonna be
in this case the user.

40
00:03:31.598 --> 00:03:34.385
&gt;&gt; Steve Kinney: We'll
parse in the children,

41
00:03:35.995 --> 00:03:38.934
&gt;&gt; Steve Kinney: And we’ll export default,

42
00:03:44.602 --> 00:03:45.719
&gt;&gt; Steve Kinney: UserProvider.

43
00:03:48.344 --> 00:03:50.657
&gt;&gt; Steve Kinney: All right,
so we've got that in place,

44
00:03:50.657 --> 00:03:55.300
the other thing we need to do is add it to
that index.js, just like the other one.

45
00:03:55.300 --> 00:03:58.870
This can get a little ridiculous,
but theoretically you can

46
00:03:58.870 --> 00:04:02.350
compose them all together and
create one if you needed to as well.

47
00:04:08.228 --> 00:04:12.933
&gt;&gt; Steve Kinney: We will be adding
one more to the stack eventually, but

48
00:04:12.933 --> 00:04:18.048
all right, so we've got those
three in place, and then for

49
00:04:18.048 --> 00:04:25.268
our authentication,
&gt;&gt; Steve Kinney: We'll say,

50
00:04:35.953 --> 00:04:36.816
&gt;&gt; Steve Kinney: We need to pull in

51
00:04:36.816 --> 00:04:38.182
that useContext as well.

52
00:04:41.380 --> 00:04:45.171
&gt;&gt; Steve Kinney: We don't
need this one anymore.

53
00:04:51.330 --> 00:04:53.077
&gt;&gt; Steve Kinney: This doesn't exist.

54
00:04:59.050 --> 00:05:00.740
&gt;&gt; Steve Kinney: Neither does this.

55
00:05:03.374 --> 00:05:05.134
&gt;&gt; Steve Kinney: He says with great fear.

56
00:05:07.802 --> 00:05:10.080
&gt;&gt; Steve Kinney: All right,
application still works.

57
00:05:12.060 --> 00:05:16.860
So if you think about how big our
application component was getting for

58
00:05:16.860 --> 00:05:18.760
the purposes of hooking up to Firebase and

59
00:05:18.760 --> 00:05:23.620
passing it down to components,
this is what it is now.

60
00:05:23.620 --> 00:05:26.980
And could we make it a stateless
functional component?

61
00:05:26.980 --> 00:05:29.235
Totally, we could.

62
00:05:29.235 --> 00:05:31.953
We're not gonna do that right now, I'll
leave that as an exercise for the reader.

63
00:05:31.953 --> 00:05:35.995
But,
&gt;&gt; Steve Kinney: And yeah,

64
00:05:35.995 --> 00:05:40.850
Authentication has access to the user,
Post has access to the posts.

65
00:05:40.850 --> 00:05:44.536
We're actually gonna find another way to
pass the user around as well in a little

66
00:05:44.536 --> 00:05:47.852
bit, as I've foreshadowed a few
times with a higher order component.

67
00:05:47.852 --> 00:05:50.808
But we can start taking out
all these Firebase state and

68
00:05:50.808 --> 00:05:53.000
just wrapping it around our UI, right?

69
00:05:53.000 --> 00:05:56.537
So anything that needs something from
Firebase, we can kind of pass it in and

70
00:05:56.537 --> 00:05:57.752
wrap it around like this,

71
00:05:57.752 --> 00:06:00.374
it doesn't become like a huge
part of our application.

72
00:06:00.374 --> 00:06:03.599
It's just like hey, we kinda just don't
think about the state too much anymore,

73
00:06:03.599 --> 00:06:05.480
right, and
these providers handle it, yeah?

74
00:06:06.530 --> 00:06:08.705
&gt;&gt; Student: May be a side question,
maybe not relevant.

75
00:06:08.705 --> 00:06:09.620
&gt;&gt; Steve Kinney: All right, into it.

76
00:06:09.620 --> 00:06:13.470
&gt;&gt; Student: It's about using hooks
versus just using the consumer.

77
00:06:13.470 --> 00:06:17.500
In your experience,
six of one half a dozen of the other,

78
00:06:17.500 --> 00:06:19.068
are there good use cases for hooks?

79
00:06:19.068 --> 00:06:21.803
[CROSSTALK]
&gt;&gt; Steve Kinney: Hooks are still in kinda

80
00:06:21.803 --> 00:06:26.580
the release candidates, so
I'd wait and see how it shakes out.

81
00:06:26.580 --> 00:06:33.190
Some of this is inspired by recording and
stuff along those lines.

82
00:06:33.190 --> 00:06:35.720
I think its a nice API.

83
00:06:35.720 --> 00:06:39.268
Right, I don't think it matters though.

84
00:06:39.268 --> 00:06:39.946
&gt;&gt; Student: Okay, cool.

85
00:06:39.946 --> 00:06:43.503
&gt;&gt; Steve Kinney: All right, a lot of code
bases I work on, we're not on 16.6 or

86
00:06:43.503 --> 00:06:44.811
16.7 yet, right?

87
00:06:44.811 --> 00:06:49.698
And so that will also inform
your choices as well, right?

88
00:06:49.698 --> 00:06:54.619
At we use MobX as effectively

89
00:06:54.619 --> 00:06:59.390
a poor man's Context API, right?

90
00:06:59.390 --> 00:07:00.810
So we have a model.

91
00:07:00.810 --> 00:07:03.780
Basically, for the things we want to
be completely divorced from the rest of

92
00:07:03.780 --> 00:07:08.650
the application, props go in, they're
all internally managed with MobX and

93
00:07:08.650 --> 00:07:10.420
then they spit stuff back out to Redux.

94
00:07:10.420 --> 00:07:15.640
So there's a whole bunch of different
ways to do it, this is just one option.

95
00:07:15.640 --> 00:07:20.010
It is not the officially blessed version,
I chose it because it was native and

96
00:07:20.010 --> 00:07:21.410
I didn't have to pull in
a third party library.

97
00:07:23.890 --> 00:07:27.810
And like I said, in the previous version
of this course we used Redux and

98
00:07:27.810 --> 00:07:30.380
Redux func to send actions to Redux.

99
00:07:30.380 --> 00:07:32.970
And it's using the real time database,
but there is

100
00:07:32.970 --> 00:07:35.940
no difference from if you just hooked up
to doc changes and did the same thing.

