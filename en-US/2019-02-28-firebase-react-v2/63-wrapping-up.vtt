WEBVTT

1
00:00:00.000 --> 00:00:01.466
&gt;&gt; Steve Kinney: What we've seen today is,

2
00:00:01.466 --> 00:00:05.480
we've got a real-time database that
is highly scalable, and a lot more,

3
00:00:05.480 --> 00:00:09.195
in a lot of ways, more manageable
than the real-time database was.

4
00:00:09.195 --> 00:00:12.184
The real-time database is great, I've done
a lot of really cool stuff with that.

5
00:00:12.184 --> 00:00:15.187
But Cloud Firestore
definitely solves a lot,

6
00:00:15.187 --> 00:00:18.890
you had to be very nuanced
with the real-time database.

7
00:00:18.890 --> 00:00:21.713
With Cloud Firestore,
you're able to kind of structure stuff,

8
00:00:21.713 --> 00:00:24.382
in kind of the way you would
think about your application, and

9
00:00:24.382 --> 00:00:26.635
build documents that start from a UI,
backwards.

10
00:00:26.635 --> 00:00:29.399
I think a lot of us,
as front-end engineers, have gotten APIs.

11
00:00:29.399 --> 00:00:33.287
I like to joke at work that I can take any
blueprint that the back-end team makes,

12
00:00:33.287 --> 00:00:34.845
and build anything off of that.

13
00:00:34.845 --> 00:00:38.986
I can take any designs that the UI/UX team
makes, and build anything based on that.

14
00:00:38.986 --> 00:00:43.291
But sometimes, when both of those
documents cross my desk at the same time,

15
00:00:43.291 --> 00:00:47.411
I can't do anything, right, and
that's where it becomes difficult.

16
00:00:47.411 --> 00:00:51.420
And so I think being able to kind
of think about, first of all,

17
00:00:51.420 --> 00:00:56.292
the amount of apps that you could
build now, that you probably wouldn't.

18
00:00:56.292 --> 00:00:59.172
And this is the kind of thing we were
talking about the other day, as well.

19
00:00:59.172 --> 00:01:03.121
But there's a lot of times when I'm like,
I wanna build this app, and I sit down,

20
00:01:03.121 --> 00:01:04.222
I'm really excited.

21
00:01:04.222 --> 00:01:08.048
And then I remember I have to
implement authentication, and

22
00:01:08.048 --> 00:01:12.406
then all of the joy leaves my body,
and I do literally anything else.

23
00:01:12.406 --> 00:01:15.062
Now, I flip a switch,
I've got some authentication.

24
00:01:15.062 --> 00:01:18.549
I think the number of apps
that you can build and

25
00:01:18.549 --> 00:01:23.302
scale now, cuz this is on
Google's infrastructure, right?

26
00:01:23.302 --> 00:01:28.304
Effectively, should you design and
architect your system well,

27
00:01:28.304 --> 00:01:33.052
there's no reason that you
couldn't scale this pretty well.

28
00:01:33.052 --> 00:01:36.567
You've got file storage, you've got
a database, you've got authentication,

29
00:01:36.567 --> 00:01:39.141
we've got the ability to run
back-end functions, right?

30
00:01:39.141 --> 00:01:40.715
I think Firebase, for me,

31
00:01:40.715 --> 00:01:44.627
is one of the more exciting platforms
to build just web services on.

32
00:01:44.627 --> 00:01:46.704
And I've had a lot of fun with it, and

33
00:01:46.704 --> 00:01:49.590
I plan on having a lot more
fun with it in the future.

34
00:01:49.590 --> 00:01:53.560
Any large questions that I can answer,
for all you?

35
00:01:56.376 --> 00:01:58.113
&gt;&gt; Speaker 1: I mean,
we're all excited, we're all, yeah.

36
00:01:58.113 --> 00:01:59.213
&gt;&gt; Steve Kinney: Whoo!
&gt;&gt; Speaker 1: Whoo!

37
00:01:59.213 --> 00:02:02.729
When is it bad, when did you,
or someone you knew about,

38
00:02:02.729 --> 00:02:05.680
regret having gone in
the Firebase direction?

39
00:02:05.680 --> 00:02:10.398
&gt;&gt; Steve Kinney: I mean,
it's one of those things,

40
00:02:10.398 --> 00:02:16.856
you do need to,
with any cloud service, right?

41
00:02:16.856 --> 00:02:21.668
Here's the thing,
the chances of it going down,

42
00:02:21.668 --> 00:02:25.456
cuz you messed up, is relatively low.

43
00:02:25.456 --> 00:02:29.232
Your bad architecture decisions are not
gonna take your application down,

44
00:02:29.232 --> 00:02:32.302
they're gonna take your bank account down,
[LAUGH], right?

45
00:02:32.302 --> 00:02:38.343
And yes, that is a happy problem to have,
which is, it's gotten so popular!

46
00:02:38.343 --> 00:02:42.601
And you can set in, both budget alerts and

47
00:02:42.601 --> 00:02:46.381
then also pull-the cord-alerts.

48
00:02:46.381 --> 00:02:51.514
But in a lot of cases, it might be slow,
it might be expensive, but

49
00:02:51.514 --> 00:02:56.850
it will scale, and sometimes that
can be a problem, [LAUGH], right?

50
00:02:56.850 --> 00:03:00.892
Having a back-end that you can pull
off the shelf does not, in fact,

51
00:03:00.892 --> 00:03:04.238
it puts even more onus on you,
the front-end engineer,

52
00:03:04.238 --> 00:03:07.970
in this case, to make good
architecture decisions, right?

53
00:03:07.970 --> 00:03:11.515
We saw with that provider pattern before,
that it basically allows us

54
00:03:11.515 --> 00:03:14.533
to get the same data in multiple
places on our application.

55
00:03:14.533 --> 00:03:16.940
If we just did that with setState,

56
00:03:16.940 --> 00:03:21.091
we would have to do it in all
different components, right?

57
00:03:21.091 --> 00:03:26.081
Or if we just decide,
I'm gonna count all the comments, right,

58
00:03:26.081 --> 00:03:30.731
that can get out of control,
now, not only on cost, right?

59
00:03:30.731 --> 00:03:34.111
But also on the fact of,
for a mobile device, right,

60
00:03:34.111 --> 00:03:37.660
that is a lot of data that you
are sending to that device.

61
00:03:37.660 --> 00:03:41.308
And that data comes at the cost of,
yeah, maybe data plans, but

62
00:03:41.308 --> 00:03:43.551
most importantly, battery, right?

63
00:03:43.551 --> 00:03:47.871
Which is a great way to get your
application in a state I like to call

64
00:03:47.871 --> 00:03:50.950
uninstalled, right, and not used, right?

65
00:03:50.950 --> 00:03:54.052
So a lot of that performance
stuff matters, cuz yeah,

66
00:03:54.052 --> 00:03:56.623
we all have fancy phones and
stuff like that.

67
00:03:56.623 --> 00:04:01.052
But all that stuff which was partially
a shared responsibility between

68
00:04:01.052 --> 00:04:03.561
the back-end engineers in your team and

69
00:04:03.561 --> 00:04:07.861
the front-end engineers on your
team is now totally on you, right?

70
00:04:07.861 --> 00:04:13.613
And a lot of it is a very
different set of problems.

71
00:04:13.613 --> 00:04:17.595
I like to joke that every back-end
engineer thinks that they know front-end

72
00:04:17.595 --> 00:04:20.976
because they wrote jQuery form
validation one time in 2007.

73
00:04:20.976 --> 00:04:24.731
And every front-end engineer thinks
they know about scalability,

74
00:04:24.731 --> 00:04:27.521
cuz they did a join,
[LAUGH], in 2011, right?

75
00:04:27.521 --> 00:04:30.698
But a lot of this stuff is
brand-new to us, right?

76
00:04:30.698 --> 00:04:35.646
A lot of it is the learning curve of,
how do you structure into a SQL database,

77
00:04:35.646 --> 00:04:38.233
is an art, in of itself, that I think for

78
00:04:38.233 --> 00:04:43.135
a lot us, we don't necessarily have
that muscle totally trained, right?

79
00:04:43.135 --> 00:04:47.640
It is very different, in a lot of ways,
structuring into a SQL database is almost

80
00:04:47.640 --> 00:04:52.501
counterintuitive to everything you think
about structuring a SQL database, right?

81
00:04:52.501 --> 00:04:57.460
Put your data in multiple places is not
a thing you do in a SQL database, right?

82
00:04:57.460 --> 00:05:00.792
The idea is that you would de-normalize
data instead of normalizing it, right,

83
00:05:00.792 --> 00:05:02.059
is a totally different thing.

84
00:05:02.059 --> 00:05:07.242
So you can make very bad choices,
cuz I think for a lot of us,

85
00:05:07.242 --> 00:05:11.410
we are, by default,
predisposed to doing it.

86
00:05:11.410 --> 00:05:15.616
Because, yeah, for a MySQL database or
something like that, Postgres,

87
00:05:15.616 --> 00:05:18.642
what are good choices there
are bad choices, right?

88
00:05:18.642 --> 00:05:23.150
So it is totally on you to
make those choices now.

89
00:05:23.150 --> 00:05:26.346
On one hand, yeah,
you don't have to do as much of the,

90
00:05:26.346 --> 00:05:29.003
I never wanna set up a VPS again,
personally.

91
00:05:29.003 --> 00:05:33.438
I've done it, I don't like it,
I don't ever wanna do it again, right?

92
00:05:33.438 --> 00:05:36.467
And the idea that I don't
have to do it is great, but

93
00:05:36.467 --> 00:05:41.132
it also means that this totally kind of
different thing is on me to understand.

94
00:05:41.132 --> 00:05:45.010
And like I said, I think it's still
early days, so much of the things that

95
00:05:45.010 --> 00:05:49.162
we think are common knowledge in SQL
are not, it's just muscle memory for us.

96
00:05:49.162 --> 00:05:51.642
So yeah, you can make poor choices,

97
00:05:51.642 --> 00:05:56.127
it'll either be expensive choices or
just bad user experiences.

98
00:05:56.127 --> 00:05:59.218
Insofar the amount of data you're
sending over the wire, and

99
00:05:59.218 --> 00:06:00.531
stuff along those lines.

100
00:06:00.531 --> 00:06:05.076
And for a lot of the code that we write,
we don't get great logs all the time,

101
00:06:05.076 --> 00:06:08.932
right, cuz it's running on
somebody else's device, right?

102
00:06:08.932 --> 00:06:11.969
We can do emulators and
stuff like that, but it's not like,

103
00:06:11.969 --> 00:06:15.904
I just looked at this data center, and
it's at 99% CPU, or something like that.

104
00:06:15.904 --> 00:06:19.023
No, just somebody thought, man,
this stinks, and took it off their phone,

105
00:06:19.023 --> 00:06:24.833
you don't know why, so,
&gt;&gt; Steve Kinney: The other thing is,

106
00:06:24.833 --> 00:06:28.232
too, it's like,
there is a little bit of vendor lock-in.

107
00:06:28.232 --> 00:06:29.182
&gt;&gt; Speaker 2: That was my first thing,
yeah-

108
00:06:29.182 --> 00:06:31.250
&gt;&gt; Steve Kinney: Right-

109
00:06:31.250 --> 00:06:32.146
&gt;&gt; Speaker 2: I'm wondering,

110
00:06:32.146 --> 00:06:34.411
how could you make it so
it's not so, I mean,

111
00:06:34.411 --> 00:06:36.691
it's hard to make it not locked-in, is it?

112
00:06:36.691 --> 00:06:40.003
&gt;&gt; Steve Kinney: Yeah, I mean, good
abstractions, right, the idea that we have

113
00:06:40.003 --> 00:06:44.342
provider components that are just handing
stuff in, rather than writing collection

114
00:06:44.342 --> 00:06:47.132
and dock everywhere will go a long way for
you, right?

115
00:06:47.132 --> 00:06:50.967
So that if you can find the one or
two provider components or whatever,

116
00:06:50.967 --> 00:06:53.963
thunks in Redux, or
whatever you're doing, right?

117
00:06:53.963 --> 00:06:57.654
And figure it out, giving instruction that
most of your application doesn't really

118
00:06:57.654 --> 00:07:00.021
care, and I mean,
that's true in a back-end thing.

119
00:07:00.021 --> 00:07:05.303
Where I work right now,
we are rewriting a front-end app,

120
00:07:05.303 --> 00:07:09.000
cuz it was so
deeply tied to the Rails app,

121
00:07:09.000 --> 00:07:13.034
as we move totally to, for us, AWS, right?

122
00:07:13.034 --> 00:07:18.676
That you couldn't remove the front-end
application from the Rails application

123
00:07:18.676 --> 00:07:24.080
without significant, it would basically
fall out from underneath, right?

124
00:07:24.080 --> 00:07:28.195
And so you can get yourself locked into
open-source tools, [LAUGH], right?

125
00:07:28.195 --> 00:07:32.265
You can get locked, with bad abstractions,
you can lock yourself into any back-end,

126
00:07:32.265 --> 00:07:32.984
right, yeah?

127
00:07:32.984 --> 00:07:35.571
&gt;&gt; Speaker 2: Well,
except that the provider's one provider,

128
00:07:35.571 --> 00:07:40.000
so there's no hosting, you can find MySQL,
whatever, you can find hosting, yeah.

129
00:07:40.000 --> 00:07:41.670
&gt;&gt; Steve Kinney: Exactly, yeah, so
there is a little a bit of that.

130
00:07:41.670 --> 00:07:45.513
And there are things like, AWS has
Amplify, and stuff along those lines,

131
00:07:45.513 --> 00:07:48.137
which is at least built
under DynamoDB databases.

132
00:07:48.137 --> 00:07:50.986
That if you decide you don't
like that abstraction,

133
00:07:50.986 --> 00:07:54.674
you can just use the Dynamo databases,
right, and stuff like that.

134
00:07:54.674 --> 00:07:57.086
And I think it's getting less so,

135
00:07:57.086 --> 00:08:00.671
Firebase was a lot more of
a black box two years ago.

136
00:08:00.671 --> 00:08:02.958
I think, at that point,
it was totally like closed-source,

137
00:08:02.958 --> 00:08:04.220
I think a lot more of it is open now.

138
00:08:04.220 --> 00:08:10.787
And as it moves, Google acquired it,
I wanna say two years ago, maybe three.

139
00:08:10.787 --> 00:08:16.629
And it's moving on to more of a kind of
standard Google infrastructure, as well.

140
00:08:16.629 --> 00:08:21.569
I think Cloud Firestore is
somwhat based on Cloud Datastore,

141
00:08:21.569 --> 00:08:24.712
which is just a GCP database, as well.

142
00:08:24.712 --> 00:08:28.780
So it is less true, with Firestore,
less true than it was with

143
00:08:28.780 --> 00:08:33.424
the real-time database, but yeah,
that's the thing too, right?

144
00:08:33.424 --> 00:08:38.641
But like I said,
I'm tied to a Rails app right now, so,

145
00:08:38.641 --> 00:08:45.873
[LAUGH], anything's possible with
the wrong abstractions, [LAUGH], yeah.

146
00:08:45.873 --> 00:08:51.069
Cool, thank you so much for
coming and joining me today.

147
00:08:51.069 --> 00:08:52.991
&gt;&gt; Speaker 1: [APPLAUSE]

