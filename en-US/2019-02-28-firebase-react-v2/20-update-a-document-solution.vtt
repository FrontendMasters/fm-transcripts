WEBVTT

1
00:00:00.370 --> 00:00:05.620
&gt;&gt; Steve Kinney: All right, so our mission
is to be able to repeatedly star things.

2
00:00:07.130 --> 00:00:08.870
Let's flip back over and take a look.

3
00:00:08.870 --> 00:00:12.530
So if I go into this individual post,
I had this removed.

4
00:00:14.270 --> 00:00:19.680
We can call this one,
let's just call it star.

5
00:00:23.670 --> 00:00:26.320
So we have a number of stars
that we pass into the component

6
00:00:26.320 --> 00:00:27.400
from the application state.

7
00:00:29.070 --> 00:00:35.820
So what we'll do in this case,
we'll try postRef.update

8
00:00:35.820 --> 00:00:41.680
and that will take an object of
the fields that I want to update.

9
00:00:41.680 --> 00:00:48.830
So in this case, we can do stars:
&gt;&gt; Steve Kinney: stars + 1.

10
00:00:48.830 --> 00:00:53.270
All right, let's take that for a spin.

11
00:00:53.270 --> 00:00:56.050
We actually have to put it on the button
before it's gonna do anything.

12
00:00:56.050 --> 00:00:57.263
So scroll down.

13
00:00:59.593 --> 00:01:07.830
&gt;&gt; Steve Kinney: We'll say onClick,
&gt;&gt; Steve Kinney: Star.

14
00:01:07.830 --> 00:01:11.180
The nice part is because the database is
gonna automatically push out the updates,

15
00:01:11.180 --> 00:01:12.650
I don't have to do anything else.

16
00:01:12.650 --> 00:01:14.470
I just save the change I want to happen.

17
00:01:14.470 --> 00:01:16.530
It will change Firestore.

18
00:01:16.530 --> 00:01:19.110
Fire store will tell the application
component things have changed.

19
00:01:19.110 --> 00:01:20.860
That'll update the application state.

20
00:01:20.860 --> 00:01:23.954
And we should, famous last words,
be good to go.

21
00:01:23.954 --> 00:01:28.170
Here's the thing, is that if you just,

22
00:01:28.170 --> 00:01:33.410
one if you share your key,
other people can push stuff, and two,

23
00:01:33.410 --> 00:01:38.994
is if you don't actually,
&gt;&gt; Steve Kinney: Wrap,

24
00:01:38.994 --> 00:01:41.390
it's wrapped in a function, let's see.

25
00:01:44.420 --> 00:01:47.070
It's just I have friends
that are using my API key.

26
00:01:47.070 --> 00:01:49.922
So if I click it once it goes up once,
[LAUGH] but

27
00:01:49.922 --> 00:01:54.050
when you push up your code and
let other people pull it down [LAUGH],

28
00:01:54.050 --> 00:01:58.820
you could have friends that
are also modifying your database.

29
00:01:58.820 --> 00:01:59.930
Let's hope everyone's playing.

30
00:02:01.020 --> 00:02:01.520
Cool.

31
00:02:02.520 --> 00:02:05.890
Few things to fix is one,
you can see that invalid date there.

32
00:02:07.020 --> 00:02:14.633
There's a really good reason for that,
which is when it was in application state,

33
00:02:14.633 --> 00:02:18.786
we were just using
JavaScript Date Objects.

34
00:02:18.786 --> 00:02:19.575
And if we go over here and

35
00:02:19.575 --> 00:02:21.666
we can see that we're just using
moment to format the date, but

36
00:02:21.666 --> 00:02:23.136
we're not using JavaScript Date Objects.

37
00:02:23.136 --> 00:02:26.754
If I need to take a Firebase object and
the Firebase timestamp and

38
00:02:26.754 --> 00:02:31.180
use it to a real timestamp, I just have
to call the toDate method on it, right?

39
00:02:32.910 --> 00:02:34.870
And that will put it back
to a JavaScript date.

40
00:02:34.870 --> 00:02:36.090
These are those more accurate ones.

41
00:02:36.090 --> 00:02:43.010
Remember when I had to do the timestamps
and snapshots, to use the Firebase ones?

42
00:02:43.010 --> 00:02:48.655
Now I have to turn it back
into a JavaScript date.

43
00:02:48.655 --> 00:02:56.170
All right, so we have the ability to
create, to read, to update, and delete.

44
00:02:56.170 --> 00:02:57.850
We have blown through the quota,
which is fun.

45
00:02:57.850 --> 00:03:02.700
So I can figure out, we'll figure out
the fun parts in that in a little bit.

46
00:03:02.700 --> 00:03:06.030
But let's talk a little
bit about authentication.

