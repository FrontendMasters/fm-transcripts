WEBVTT

1
00:00:01.225 --> 00:00:02.133
&gt;&gt; Steve Kinney: It would be cool,

2
00:00:02.133 --> 00:00:05.288
what if we made an API endpoint
to get all of the posts, right?

3
00:00:05.288 --> 00:00:08.458
That would involve,
it would be an HTTP request, but

4
00:00:08.458 --> 00:00:13.044
it would hook into Firestore, get all
the posts, and send them back as JSON.

5
00:00:13.044 --> 00:00:17.174
That seems like a good
first attempt in this case.

6
00:00:17.174 --> 00:00:19.276
So, let's, let's give that a shot.

7
00:00:21.910 --> 00:00:29.293
&gt;&gt; Steve Kinney: We'll go back into
index and we'll do exports.getAllPosts.

8
00:00:29.293 --> 00:00:30.630
This seems fine.

9
00:00:30.630 --> 00:00:37.330
And we'll do functions.https.onRequest().

10
00:00:37.330 --> 00:00:43.450
And now we'll get the request and
response objects.

11
00:00:43.450 --> 00:00:47.035
I wanna warn you now,
I don't expect to make this mistake, but

12
00:00:47.035 --> 00:00:51.093
back I learn a lot of express,
I would have this mystifying about we're

13
00:00:51.093 --> 00:00:54.569
nothing works to get the request
response objects mixed up.

14
00:00:54.569 --> 00:00:58.224
Specially back that I use my Raz and
wreck and never never works.

15
00:00:58.224 --> 00:01:01.130
So, someone's gonna be look out for that.

16
00:01:01.130 --> 00:01:04.406
So, let's go ahead and
we'll get the snapshot.

17
00:01:04.406 --> 00:01:06.668
Now, I set the engine to node eight.

18
00:01:06.668 --> 00:01:09.939
So, I should be able to
make this an async request.

19
00:01:09.939 --> 00:01:12.972
If not, we can write promises.

20
00:01:12.972 --> 00:01:16.520
So, we'll do snapshots and we'll do await.

21
00:01:16.520 --> 00:01:18.739
So, I need to pull in this admin library,
right.

22
00:01:18.739 --> 00:01:21.492
And admin is simply gonna be const.

23
00:01:21.492 --> 00:01:27.661
admin equals require firebase admin.

24
00:01:27.661 --> 00:01:32.426
This a version of Firebase that
has all the superpowers that

25
00:01:32.426 --> 00:01:34.340
the admin console has.

26
00:01:34.340 --> 00:01:35.294
You can just use this.

27
00:01:35.294 --> 00:01:36.790
You don't have to use
this kind of functions.

28
00:01:36.790 --> 00:01:40.389
You can use this just as a script
you run from your computer.

29
00:01:40.389 --> 00:01:43.665
Like have to just change a bunch of
data cuz I have changed the way comments

30
00:01:43.665 --> 00:01:44.397
are formatted.

31
00:01:44.397 --> 00:01:46.013
You can run it.

32
00:01:46.013 --> 00:01:50.545
Should you do that, you need to go to the
console and like get the secret key pair.

33
00:01:50.545 --> 00:01:53.153
Like the actual secret one,
not the one that we had,

34
00:01:53.153 --> 00:01:55.303
that we just put in our client-side code.

35
00:01:55.303 --> 00:01:56.957
And then you can run those scripts.

36
00:01:56.957 --> 00:01:58.815
If you are running a Lambda function,

37
00:01:58.815 --> 00:02:01.552
you are already running on
Google's infrastructure.

38
00:02:01.552 --> 00:02:05.713
and they know who you are, so you don't
necessarily need to get those keys if

39
00:02:05.713 --> 00:02:07.801
you're doing it in a cloud function.

40
00:02:07.801 --> 00:02:12.504
So, we'll say admin, so you know how
before we said firebase initialize app.

41
00:02:12.504 --> 00:02:16.957
Here, we'll say admin.initializeApp,

42
00:02:16.957 --> 00:02:20.696
and we'll say functions.config.

43
00:02:20.696 --> 00:02:22.477
This is where it's getting
that secret key from.

44
00:02:22.477 --> 00:02:27.878
This will be passed by the environment
when it's riding on Google servers.

45
00:02:27.878 --> 00:02:30.399
So, if you were to run this
like on your own computer,

46
00:02:30.399 --> 00:02:33.323
this is not a thing that you're
gonna get anything back from.

47
00:02:33.323 --> 00:02:36.136
But when it's running on Google servers,

48
00:02:36.136 --> 00:02:41.227
that will be populated with you know your
secret key pair and stuff like that.

49
00:02:41.227 --> 00:02:45.003
Cool, and so,
we'll actually say const firestore,

50
00:02:45.003 --> 00:02:49.777
very much like we were doing before,
it was like admin.firestore.

51
00:02:49.777 --> 00:02:53.771
I could call that admin thing
firebase if I really wanted to.

52
00:02:53.771 --> 00:02:57.282
We do need to do that const settings.

53
00:02:57.282 --> 00:03:05.704
We'll do firestore.settings
&gt;&gt; Steve Kinney: That

54
00:03:05.704 --> 00:03:07.934
was that warning we got in
the very beginning of this.

55
00:03:07.934 --> 00:03:12.246
Cool, so now I should be able to do

56
00:03:12.246 --> 00:03:19.032
a firestore.collection('posts').get()

57
00:03:20.848 --> 00:03:22.729
&gt;&gt; Steve Kinney: And with that,

58
00:03:22.729 --> 00:03:28.087
we'll say const posts = snapshots.map,

59
00:03:28.087 --> 00:03:31.708
snapshots.docs.map, and

60
00:03:31.708 --> 00:03:36.212
this is if we wanted the IDs on there.

61
00:03:36.212 --> 00:03:38.298
We don't necessarily have to,
we could just send them back.

62
00:03:45.558 --> 00:03:48.546
&gt;&gt; Steve Kinney: Say id is doc.id.

63
00:03:55.375 --> 00:03:58.204
&gt;&gt; Steve Kinney: Single snapshot.

64
00:03:58.204 --> 00:04:00.875
And we'll just do a response.

65
00:04:00.875 --> 00:04:06.615
JSON is effectively
the same API as Express.

66
00:04:06.615 --> 00:04:13.333
So, I response that JSON sends a response
with the format application JSON.

67
00:04:13.333 --> 00:04:19.112
Cool, and then what we'll

68
00:04:19.112 --> 00:04:25.398
do is we'll just apply that.

69
00:04:25.398 --> 00:04:26.493
Up we go.

70
00:04:26.493 --> 00:04:27.809
Yep.
Using node eight now so

71
00:04:27.809 --> 00:04:30.956
I can do a single way you do have to
opt into that with that engines thing

72
00:04:30.956 --> 00:04:32.055
in the package.json.

73
00:04:32.055 --> 00:04:34.656
Otherwise you will get note six.

74
00:04:34.656 --> 00:04:36.806
I understand that.

75
00:04:36.806 --> 00:04:41.188
No, 10 is out and no 11 is the.

76
00:04:41.188 --> 00:04:42.971
And version and the node 12 is in route.

77
00:04:42.971 --> 00:04:46.877
I don't make the rules here, I just
tell you that node six is the default,

78
00:04:46.877 --> 00:04:49.598
even though I think it was
end of life at this point.

79
00:04:49.598 --> 00:04:54.419
But anyway, all right look so
now we are updating,

80
00:04:54.419 --> 00:04:58.582
Hello World is not
allowed to update there.

81
00:04:58.582 --> 00:05:04.559
And we are creating get all posts.

82
00:05:04.559 --> 00:05:07.032
Those are both going out,
while it happens.

83
00:05:07.032 --> 00:05:10.966
Let's go ahead and
let's go to the Firebase console.

84
00:05:10.966 --> 00:05:14.052
Let's check out functions.

85
00:05:14.052 --> 00:05:18.193
All right, here are my two functions,
you can see them.

86
00:05:18.193 --> 00:05:22.533
You view the logs and their health.

87
00:05:22.533 --> 00:05:24.562
The logs are really interesting.

88
00:05:24.562 --> 00:05:27.954
They're good for debugging right and
so if like especially for

89
00:05:27.954 --> 00:05:29.938
the ones that are triggered like,

90
00:05:29.938 --> 00:05:34.304
it should have been reading it should have
been responding to a document change.

91
00:05:34.304 --> 00:05:35.235
Nothing happened.

92
00:05:35.235 --> 00:05:37.752
You can see like did it fire at all?

93
00:05:37.752 --> 00:05:40.345
Did it blow up, right?

94
00:05:40.345 --> 00:05:44.640
So, you can see function execute started,
getting yelled at about billing.

95
00:05:44.640 --> 00:05:47.756
And then it was okay, and
it finished status code at 200.

96
00:05:47.756 --> 00:05:50.509
These are obviously more
interesting when they don't work.

97
00:05:50.509 --> 00:05:55.750
[LAUGH] Logs that everything went okay
are not particularly interesting.

98
00:05:55.750 --> 00:06:00.717
But you can also see the different

99
00:06:00.717 --> 00:06:04.798
log levels is the errors and

100
00:06:04.798 --> 00:06:09.597
infos so on and so forth, cool?

101
00:06:09.597 --> 00:06:13.929
I was hoping that would make, it's smaller
from or it's like when I click on it,

102
00:06:13.929 --> 00:06:14.513
but nope.

103
00:06:14.513 --> 00:06:17.272
Let's do again the post and
see how it goes.

104
00:06:17.272 --> 00:06:22.232
[SOUND] Takes a little bit the first time,
we'll be talking about this

105
00:06:22.232 --> 00:06:27.206
during the question earlier,
where there's a kind of a cold start.

106
00:06:27.206 --> 00:06:30.370
If I do it again it's much faster.

107
00:06:30.370 --> 00:06:34.550
Like it is spinning up
a virtual machine somewhere.

108
00:06:34.550 --> 00:06:40.148
And so
here you can see these are All of the fun

109
00:06:40.148 --> 00:06:45.758
posts that are in
the database sent as JSON.

110
00:06:45.758 --> 00:06:47.541
So now we have an API for our application.

111
00:06:47.541 --> 00:06:49.518
So just because Firebase is great for

112
00:06:49.518 --> 00:06:52.208
front engineers to have
a back end really easily.

113
00:06:52.208 --> 00:06:53.507
But what if I need a back end.

114
00:06:53.507 --> 00:06:55.537
You can have a back end, that's fine.

115
00:06:55.537 --> 00:06:57.075
Just make a back end.

116
00:06:57.075 --> 00:06:59.142
Deploy it to other people's servers.

117
00:06:59.142 --> 00:06:59.920
You're good to go.

