WEBVTT

1
00:00:00.040 --> 00:00:02.190
&gt;&gt; Steve Kinney: So,
we've got some sub-collections.

2
00:00:02.190 --> 00:00:06.250
What I'd really like to do is look
at using Firebase, the context API,

3
00:00:06.250 --> 00:00:10.270
to create one of those high order
components like that withRouter,

4
00:00:10.270 --> 00:00:13.010
cuz that's another pattern
to hook into Firebase

5
00:00:13.010 --> 00:00:15.110
that we might really like
in our React application.

6
00:00:16.460 --> 00:00:20.400
And this one's not gonna be too bad,
cuz we're gonna cheat, and we're going to

7
00:00:20.400 --> 00:00:26.560
leverage the work that we already did
with the user context provider before.

8
00:00:26.560 --> 00:00:30.428
So, a higher order
component is effectively

9
00:00:30.428 --> 00:00:35.121
a component that returns
another component, right?

10
00:00:35.121 --> 00:00:36.785
Based on stuff like
higher order functions,

11
00:00:36.785 --> 00:00:39.630
because we asked all about
the functional programming, right?

12
00:00:39.630 --> 00:00:41.910
So, basically it's a component.

13
00:00:41.910 --> 00:00:44.840
You give it one, it wraps it in a new
component that passes more prompts in.

14
00:00:44.840 --> 00:00:50.180
And that's the magic of JavaScript in
closures, everything just kinda works.

15
00:00:50.180 --> 00:00:51.450
All right, so let's go ahead.

16
00:00:51.450 --> 00:00:57.099
We're gonna make a new
component called withUser.

17
00:01:01.777 --> 00:01:03.240
&gt;&gt; Steve Kinney: Right, and withUser.

18
00:01:05.280 --> 00:01:07.380
We're going to put in react.

19
00:01:07.380 --> 00:01:10.840
And we're gonna bring
in that user context.

20
00:01:12.470 --> 00:01:16.870
We could write all of the code that
we wrote before in that user context,

21
00:01:16.870 --> 00:01:20.080
where we were subscribing to everything,
so on and so forth.

22
00:01:20.080 --> 00:01:21.515
But we already wrote it.

23
00:01:21.515 --> 00:01:23.328
[LAUGH] I don't wanna
write that code again,

24
00:01:23.328 --> 00:01:24.902
I didn't like it last time I wrote it.

25
00:01:24.902 --> 00:01:30.540
I have it written once and
I'm not doing it again.

26
00:01:30.540 --> 00:01:34.020
So, make a new component
called withUser and

27
00:01:34.020 --> 00:01:37.760
it will take a component as an argument.

28
00:01:37.760 --> 00:01:40.550
Which feels weird, but
look at that withRouter,

29
00:01:40.550 --> 00:01:44.139
withRouter took our Post Page component
and returned a new component.

30
00:01:45.190 --> 00:01:47.570
That passed in all the React writer stuff.

31
00:01:47.570 --> 00:01:49.730
So, we're going to basically
implement that pattern, so

32
00:01:49.730 --> 00:01:51.200
it's no longer black magic to us.

33
00:01:51.200 --> 00:01:54.666
And we could figure how to
hook in the Firebase with it.

34
00:01:54.666 --> 00:01:57.990
So, we're gonna make a new
one called wrapped component.

35
00:02:01.753 --> 00:02:05.445
&gt;&gt; Steve Kinney: And that wrapped
component is gonna take some props,

36
00:02:05.445 --> 00:02:07.340
and it's going to return.

37
00:02:21.606 --> 00:02:25.941
&gt;&gt; Steve Kinney: Whatever component we've
passed in, pass in the user, and then like

38
00:02:25.941 --> 00:02:30.870
whatever other components, or like
whatever other props it takes, right?.

39
00:02:30.870 --> 00:02:34.580
Whatever other props you passed in,
those props but also the user.

40
00:02:42.978 --> 00:02:44.500
&gt;&gt; Steve Kinney: Mm, curly prices are fun.

41
00:02:46.050 --> 00:02:48.670
I gotta hope the code
doesn't bite me twice here.

42
00:02:48.670 --> 00:02:49.466
Famous last words.

43
00:02:50.852 --> 00:02:55.427
&gt;&gt; Steve Kinney: Cool.

44
00:02:55.427 --> 00:03:00.300
And then we just return
that wrapped component.

45
00:03:02.460 --> 00:03:06.280
Again if this looks gnarly,
just remember it takes a component and

46
00:03:06.280 --> 00:03:09.420
returns a component that take some props.

47
00:03:09.420 --> 00:03:12.760
Whatever those props that got passed
in it adds user on to those and

48
00:03:12.760 --> 00:03:14.010
gives you back that component.

49
00:03:17.766 --> 00:03:19.268
&gt;&gt; Steve Kinney: We do
one other thing just for

50
00:03:19.268 --> 00:03:22.660
debugging happiness because I
feel the need to be responsible.

51
00:03:24.440 --> 00:03:31.600
Which is, bubble will go ahead and
use the name of a constant or

52
00:03:31.600 --> 00:03:34.740
the name of a class to give
your components a display name.

53
00:03:34.740 --> 00:03:38.068
So, when you look at them in
the React tools, you see like,

54
00:03:38.068 --> 00:03:41.974
the name of the component, otherwise
if you ever saw like just _class,

55
00:03:41.974 --> 00:03:44.295
that's what they're called otherwise.

56
00:03:44.295 --> 00:03:50.389
And so most of the components you write
normally get names at compile time,

57
00:03:50.389 --> 00:03:55.240
or the build process puts in
the part that gives them names.

58
00:03:55.240 --> 00:03:58.350
In this case we're dynamically
generating a component, so

59
00:03:58.350 --> 00:04:02.380
we're really quick gonna just
give ourselves this function get,

60
00:04:04.290 --> 00:04:13.284
guess I do const getDisplayName,
that's gonna take in WrappedComponent.

61
00:04:18.074 --> 00:04:20.578
&gt;&gt; Steve Kinney: And what it's gonna do,
it's gonna look at the name,

62
00:04:20.578 --> 00:04:24.225
this is gonna get the name of a component,
and so we can basically take the name of

63
00:04:24.225 --> 00:04:27.730
that component and name this component
that, and we'll call it withUser.

64
00:04:29.590 --> 00:04:32.370
So, there's unfortunately, over time,

65
00:04:32.370 --> 00:04:35.280
there's a bunch of different ways
it could have a component name.

66
00:04:35.280 --> 00:04:43.410
So, it's either got a displayName,
&gt;&gt; Steve Kinney: Or a name.

67
00:04:43.410 --> 00:04:45.100
Or if all us fails,
just call it component.

68
00:04:47.965 --> 00:04:50.180
&gt;&gt; Steve Kinney: And then what we
will do is, we'll say that this.

69
00:04:52.997 --> 00:04:56.092
&gt;&gt; Steve Kinney: New Wrappedcomponent.

70
00:04:59.760 --> 00:05:00.651
&gt;&gt; Steve Kinney: DisplayName.

71
00:05:03.660 --> 00:05:06.530
&gt;&gt; Steve Kinney: With user and
then whatever it was named previously.

72
00:05:09.010 --> 00:05:14.440
This is totally optional but let me just
tell you right now, if you don't do this

73
00:05:14.440 --> 00:05:18.400
eventually when you go to debug your code
like two months from now, nothing will

74
00:05:18.400 --> 00:05:22.300
make any sense and everything will just
have no name and you'll be really sad.

75
00:05:22.300 --> 00:05:23.510
This is what Redux does.

76
00:05:23.510 --> 00:05:26.340
When you do connect this
happens to you out of the box,

77
00:05:26.340 --> 00:05:28.710
really we're just
dispelling myths right now.

78
00:05:32.280 --> 00:05:32.780
All right.

79
00:05:34.160 --> 00:05:37.710
So, go with user now with postpaid
we can bring in with user.

80
00:05:43.373 --> 00:05:44.190
&gt;&gt; Steve Kinney: There it is.

81
00:05:44.190 --> 00:05:45.700
And we'll just wrap that as well.

82
00:05:46.960 --> 00:05:47.790
So, I'll say with.

83
00:05:51.740 --> 00:05:55.360
And there are helper methods like compose
that make this a little bit better.

84
00:05:55.360 --> 00:05:58.450
So there, you can just say, compose,
give it a series of functions and

85
00:05:58.450 --> 00:06:00.710
then the component, and
that just runs it through all of them.

86
00:06:00.710 --> 00:06:02.940
It's the same as this,
but it looks prettier.

87
00:06:02.940 --> 00:06:10.410
So, we'll say with user, and now we should
have, we'll console.log the props first.

88
00:06:15.282 --> 00:06:16.569
&gt;&gt; Steve Kinney: When
this component mounts.

89
00:06:21.383 --> 00:06:25.966
&gt;&gt; Steve Kinney: Look at that,
along with match and all the other stuff,

90
00:06:25.966 --> 00:06:27.340
look who we got.

91
00:06:28.480 --> 00:06:32.050
We got the user,
right pass into that component as well.

92
00:06:32.050 --> 00:06:34.200
So, these are the ways that you
don't have to pass everything down

93
00:06:34.200 --> 00:06:35.280
through your application.

94
00:06:35.280 --> 00:06:38.730
You basically hook up in the Firebase
with the common things that you need.

95
00:06:38.730 --> 00:06:42.310
You can pas in the comments as you
need them, so now what we can do

96
00:06:42.310 --> 00:06:47.312
is we can basically say const user equals

97
00:06:47.312 --> 00:06:54.069
this.props
&gt;&gt; Steve Kinney: I'll

98
00:06:54.069 --> 00:06:55.000
put the user in there.

99
00:06:55.000 --> 00:06:58.743
All right,let's try it out.

100
00:07:03.541 --> 00:07:06.290
&gt;&gt; Steve Kinney: And say we've got
the username passed in, right?

101
00:07:06.290 --> 00:07:10.050
So just again, some interesting state
management tools that you're not like

102
00:07:10.050 --> 00:07:12.680
at the whim of just like kind
of at every component mount,

103
00:07:12.680 --> 00:07:14.240
hooking into everything, right?

104
00:07:14.240 --> 00:07:17.730
And especially with the provider, there is
a thing that we kind of didn't talk about

105
00:07:17.730 --> 00:07:22.870
that the provider is really good at which
is, we're making that first query once.

106
00:07:22.870 --> 00:07:25.470
So, if many components
are using that provider,

107
00:07:25.470 --> 00:07:27.960
that's the same query
being fed to all of them.

108
00:07:27.960 --> 00:07:32.790
It's not like you have ten components that
need the user that are all asking hey,

109
00:07:32.790 --> 00:07:35.460
user slash whatever the new idea is,
right?

110
00:07:35.460 --> 00:07:37.240
Because those are each kinds of query.

111
00:07:37.240 --> 00:07:42.054
This is one query done by the provider,
passed to any component that needs it,

112
00:07:42.054 --> 00:07:42.700
right?

113
00:07:42.700 --> 00:07:46.190
And since we're subscribing,
that means every time the user changes,

114
00:07:46.190 --> 00:07:49.850
which is probably not that often,
it's still one query,

115
00:07:49.850 --> 00:07:51.830
rather that every component asking for it.

116
00:07:51.830 --> 00:07:56.286
So, being clever with state
management can also save you money.

