WEBVTT

1
00:00:00.190 --> 00:00:05.050
&gt;&gt; Steve Kinney: We're gonna write one
now that is going to be able to modify

2
00:00:05.050 --> 00:00:06.480
a document.

3
00:00:06.480 --> 00:00:12.115
Now this is a little bit tricky
because we're saying hey,

4
00:00:12.115 --> 00:00:17.757
whenever the user writes a document,
I want to change it.

5
00:00:17.757 --> 00:00:19.350
What do you think that's gonna trigger?

6
00:00:21.588 --> 00:00:23.350
&gt;&gt; Student: Another change.
&gt;&gt; Steve Kinney: Another change.

7
00:00:23.350 --> 00:00:25.435
What do you think that's gonna trigger?

8
00:00:25.435 --> 00:00:29.543
Yeah, so the reason we're gonna have
this talk now is you do need some,

9
00:00:29.543 --> 00:00:32.020
it's kind of like recursion, right?

10
00:00:32.020 --> 00:00:37.160
You need something in place to
eventually stop you, right?

11
00:00:37.160 --> 00:00:39.679
Otherwise you will keep going and
going and going.

12
00:00:41.380 --> 00:00:44.520
So that's kind of why we're
doing this quick example,

13
00:00:44.520 --> 00:00:46.120
to kind of put that in place.

14
00:00:46.120 --> 00:00:50.996
So what we are going to do is we
are going to listen for a document write.

15
00:00:50.996 --> 00:00:55.310
Now document writes are very much
like they are for the security rules.

16
00:00:55.310 --> 00:01:00.315
You have a write, which is a create,
an update, or a delete, but you can also

17
00:01:00.315 --> 00:01:05.705
do unupdate, uncreate, undelete, just
like you can do with the security rules.

18
00:01:05.705 --> 00:01:11.331
So let's try

19
00:01:11.331 --> 00:01:17.470
this one out.

20
00:01:17.470 --> 00:01:21.033
We'll say exports.sanitizeContent.

21
00:01:21.033 --> 00:01:23.210
And that will be functions.

22
00:01:23.210 --> 00:01:26.000
In this case,
we're gonna try to hook into firestore.

23
00:01:27.830 --> 00:01:32.037
We'll grab a given document
path that we're looking for.

24
00:01:32.037 --> 00:01:37.933
That's gonna be very much like
the security rules, posts with a postId,

25
00:01:37.933 --> 00:01:43.200
and that'll be a param you
can hook into if you need to.

26
00:01:43.200 --> 00:01:44.890
We'll say onWrite.

27
00:01:44.890 --> 00:01:49.644
Whenever somebody modifies or
changes one or

28
00:01:49.644 --> 00:01:54.898
whatever, we'll go ahead and
we'll call this,

29
00:01:54.898 --> 00:01:58.526
and we'll say, async and [SOUND],

30
00:01:58.526 --> 00:02:03.420
you'll get the change and
the context there.

31
00:02:10.946 --> 00:02:14.372
&gt;&gt; Steve Kinney: We'll go ahead and so
the change, so if you're creating one,

32
00:02:14.372 --> 00:02:15.870
you'll get the snapshot.

33
00:02:15.870 --> 00:02:19.210
If you're changing one, you're gonna
get the before and the after, right?

34
00:02:19.210 --> 00:02:25.777
So we did a kind of a very loose
validation with the security rules.

35
00:02:25.777 --> 00:02:28.510
We're like,
make sure it has a title, right?

36
00:02:28.510 --> 00:02:32.104
But here we're gonna get even more
granular if we wanted to, which is okay,

37
00:02:32.104 --> 00:02:35.260
there's someone with an empty title,
use the old title, right?

38
00:02:35.260 --> 00:02:40.360
So you'll have all the things before,
all the things afterwards, right?

39
00:02:40.360 --> 00:02:43.910
Or what's currently in the database and
what's coming in,

40
00:02:43.910 --> 00:02:45.795
not unlike the security rules.

41
00:02:45.795 --> 00:02:49.174
So we do onWrite, and
we'll have this change,

42
00:02:49.174 --> 00:02:51.863
and,
&gt;&gt; Steve Kinney: One thing we wanna

43
00:02:51.863 --> 00:02:55.840
check for,
&gt;&gt; Steve Kinney: Is the change.

44
00:02:58.050 --> 00:03:00.080
&gt;&gt; Steve Kinney: We saw this exist before.

45
00:03:01.907 --> 00:03:04.799
&gt;&gt; Steve Kinney: What's the situation
where the after effect would be

46
00:03:04.799 --> 00:03:06.675
the document no longer existing?

47
00:03:06.675 --> 00:03:07.754
&gt;&gt; Student: Write.

48
00:03:07.754 --> 00:03:10.684
&gt;&gt; Steve Kinney: Yeah, write.

49
00:03:10.684 --> 00:03:14.880
So write works for create,
update, and delete.

50
00:03:14.880 --> 00:03:17.740
We don't wanna write a function for
both create and update, right?

51
00:03:17.740 --> 00:03:22.340
So it's better to write one for write and
check to see, okay, if it's because

52
00:03:22.340 --> 00:03:27.050
we deleted, all right, we're not doing
anything here, where we're done.

53
00:03:28.100 --> 00:03:37.324
Cool, and so from here we could say,
&gt;&gt; Steve Kinney: const content will be,

54
00:03:37.324 --> 00:03:42.200
and the change is like a snapshot,
change.after.data.

55
00:03:42.200 --> 00:03:44.100
That's all the properties.

56
00:03:44.100 --> 00:03:51.600
And what we could do is if there
is content, we will return.

57
00:03:51.600 --> 00:03:54.690
The way that these all work,
you have to return something, right?

58
00:03:54.690 --> 00:03:57.640
Otherwise, it never knows when it's over,
right?

59
00:03:57.640 --> 00:03:59.890
The cloud function doesn't
know when to spin down.

60
00:03:59.890 --> 00:04:01.640
So if you have a callback and yet

61
00:04:01.640 --> 00:04:06.700
you never actually return anything, it
basically just doesn't run your function.

62
00:04:06.700 --> 00:04:09.690
It's gonna check to see if you will return
something at some point or another.

63
00:04:09.690 --> 00:04:14.250
Cuz if you return either a value
it's like, okay, I know I'm done.

64
00:04:14.250 --> 00:04:20.160
Or if you return a promise, when that
promise resolves, it knows that it's done.

65
00:04:20.160 --> 00:04:21.230
So you need to return.

66
00:04:21.230 --> 00:04:23.250
If you don't return, it's not gonna work.

67
00:04:23.250 --> 00:04:25.400
If it's just like,
we reached the end of the function,

68
00:04:25.400 --> 00:04:29.570
that's the end, it doesn't know that there
wasn't a callback on the event loop, and

69
00:04:29.570 --> 00:04:31.000
it just won't run your function.

70
00:04:31.000 --> 00:04:33.320
So we always need to make
sure that no matter what,

71
00:04:33.320 --> 00:04:36.180
we return something in every case.

72
00:04:36.180 --> 00:04:39.360
So in this case, we return change.after.

73
00:04:39.360 --> 00:04:44.290
We'll get the reference to where it was
in the database, and we'll update it.

74
00:04:46.928 --> 00:04:49.900
&gt;&gt; Steve Kinney: And we'll do a content.

75
00:04:49.900 --> 00:04:53.110
Now the content is replaced,
we'll just do.

76
00:04:53.110 --> 00:04:56.900
I think I joked before, we're gonna
do CoffeeScript, so let's do that.

77
00:04:56.900 --> 00:04:59.079
Coffee, all instances
of CoffeeScript with,

78
00:05:01.750 --> 00:05:03.090
&gt;&gt; Steve Kinney: Some stars.

79
00:05:03.090 --> 00:05:04.030
I don't know if that's enough stars,
but it's fine.

80
00:05:06.189 --> 00:05:07.844
&gt;&gt; Steve Kinney: All right,
I'm not deploying this,

81
00:05:07.844 --> 00:05:11.260
because this is the problem
that we talked about earlier.

82
00:05:11.260 --> 00:05:16.164
Which is, this will trigger a change,
which will trigger the function,

83
00:05:16.164 --> 00:05:22.270
which will trigger a change, which will
trigger the function, so on and so forth.

84
00:05:22.270 --> 00:05:25.480
Also, there is a case where there's no
content, and it doesn't return anything.

85
00:05:25.480 --> 00:05:30.350
So we'll return null if
there was no content.

86
00:05:30.350 --> 00:05:34.700
We will also write a new property.

87
00:05:34.700 --> 00:05:36.280
We'll call it sanitize.

88
00:05:36.280 --> 00:05:37.195
It doesn't matter what it is.

89
00:05:37.195 --> 00:05:40.341
It's just something that you have on
the document that you can hold on to.

90
00:05:40.341 --> 00:05:42.780
And we'll grab that as well.

91
00:05:44.319 --> 00:05:50.330
&gt;&gt; Steve Kinney: And we'll say if content,
and it's not sanitized already.

92
00:05:51.370 --> 00:05:55.290
So it has content but
sanitized either doesn't exist or

93
00:05:55.290 --> 00:05:58.170
it's false, go ahead and do this.

94
00:05:58.170 --> 00:06:02.700
That will trigger another run on it,
but then that's it, right?

95
00:06:02.700 --> 00:06:05.110
At that point, it will no longer run.

96
00:06:05.110 --> 00:06:07.528
We'll return null, and
everything will be good in the world.

97
00:06:07.528 --> 00:06:11.730
Right, all right.

98
00:06:11.730 --> 00:06:12.986
Let's go ahead and let's deploy this one.

99
00:06:28.895 --> 00:06:30.040
&gt;&gt; Steve Kinney: Cool, it's going up.

100
00:06:30.040 --> 00:06:33.740
Now, even though I have to
deploy them to work with them,

101
00:06:33.740 --> 00:06:36.360
I can still work against local host,
right?

102
00:06:38.080 --> 00:06:42.190
So I don't necessarily need
to go to production, right?

103
00:06:42.190 --> 00:06:44.069
It is actually going to affect production,

104
00:06:44.069 --> 00:06:46.656
so one thing you might wanna do
is have a project for staging,

105
00:06:46.656 --> 00:06:49.890
another project for production,
switch out the file, so on and so forth.

106
00:06:49.890 --> 00:06:53.350
But we can still try it
again as local host.

107
00:06:53.350 --> 00:07:02.620
And to me, it doesn't really matter but,
&gt;&gt; Steve Kinney: Login in the meantime.

108
00:07:10.130 --> 00:07:15.032
&gt;&gt; Steve Kinney: Cool,
see if that's gone up yet.

109
00:07:15.032 --> 00:07:16.860
Gonna give it a second.

110
00:07:16.860 --> 00:07:21.370
Now again, the functions do take some
time to warm up which means we might see

111
00:07:21.370 --> 00:07:22.780
the word CoffeeScript in the post.

112
00:07:22.780 --> 00:07:24.200
And then once the function warms up and

113
00:07:24.200 --> 00:07:26.320
runs, then it will go ahead and
replace it.

114
00:07:26.320 --> 00:07:29.020
So to think that these
are all instantaneous,

115
00:07:29.020 --> 00:07:32.560
like HTTP request comes in in Rails,
it hits my controller.

116
00:07:32.560 --> 00:07:35.050
My controller does stuff before
we commit it to the database.

117
00:07:35.050 --> 00:07:36.290
That's not how this works.

118
00:07:36.290 --> 00:07:37.360
It's going in.

119
00:07:37.360 --> 00:07:40.580
The idea of it going into the database
will trigger the function

120
00:07:40.580 --> 00:07:41.680
that will change it, right?

121
00:07:41.680 --> 00:07:48.045
And so especially the very first time,
you might very well see the word show up.

122
00:07:48.045 --> 00:07:50.263
You'll probably see it
disappear slightly afterward.

123
00:07:50.263 --> 00:07:52.832
They're not instantaneous, like I said,
the feedback loop is not great.

124
00:08:08.535 --> 00:08:13.771
&gt;&gt; Steve Kinney: All right,
so there it is,

125
00:08:13.771 --> 00:08:20.310
is, yep, and there it went.

126
00:08:20.310 --> 00:08:23.258
Right, the function went ahead.

127
00:08:23.258 --> 00:08:23.807
&gt;&gt; Student: Whoo!

128
00:08:23.807 --> 00:08:24.907
[APPLAUSE]
&gt;&gt; [INAUDIBLE]

129
00:08:24.907 --> 00:08:25.483
&gt;&gt; Steve Kinney: [LAUGH]

130
00:08:25.483 --> 00:08:26.888
&gt;&gt; [INAUDIBLE]

131
00:08:26.888 --> 00:08:27.851
&gt;&gt; Student: I do recall you

132
00:08:27.851 --> 00:08:31.070
complaining about curly braces earlier,
so.

133
00:08:31.070 --> 00:08:32.070
&gt;&gt; Steve Kinney: Yeah.

134
00:08:32.070 --> 00:08:34.508
I have mixed feelings about CoffeeScript.

135
00:08:34.508 --> 00:08:37.680
I was a Rubyist before I was a JavaScript
developer, and the way that I learned how

136
00:08:37.680 --> 00:08:41.380
to do stuff in JavaScript was I wrote
Ruby-like syntax and then translated it

137
00:08:41.380 --> 00:08:44.034
from CoffeeScript to JavaScript to figure
out how you actually write JavaScript.

138
00:08:44.034 --> 00:08:47.274
That explains a lot, right?

139
00:08:47.274 --> 00:08:51.378
[LAUGH] So
I have fond memories of CoffeeScript.

140
00:08:51.378 --> 00:08:52.038
Cool, one thing that we didn't do before
that I meant to do, is these are all in

141
00:08:52.038 --> 00:08:56.559
crazy order because they're by the id.
We should order it by

142
00:08:56.559 --> 00:09:01.720
traded out at one point.

143
00:09:03.330 --> 00:09:06.739
But so we can see that we can edit
the database and modify stuff.

