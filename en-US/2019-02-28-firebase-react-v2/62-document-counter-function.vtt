WEBVTT

1
00:00:00.430 --> 00:00:03.840
&gt;&gt; Steve Kinney: Let's try to
say we have this comment count,

2
00:00:03.840 --> 00:00:08.580
now there's a bunch of stuff we could do,
we could like theoretically keep

3
00:00:08.580 --> 00:00:13.910
an array of comments and my query that or
sub collection every time,

4
00:00:13.910 --> 00:00:19.330
count all the documents and see, but that
still like, if I'm gonna get all of them.

5
00:00:19.330 --> 00:00:24.162
All right, what if it's really like
contentious thread and so now I've got

6
00:00:24.162 --> 00:00:28.691
a query for like a thousand comments
every time it would be a lot better,

7
00:00:28.691 --> 00:00:33.468
like that's 1000 comments every time
we just want to get this number.

8
00:00:33.468 --> 00:00:37.774
It would be a lot better just like as
comments happen increment and decrement

9
00:00:37.774 --> 00:00:42.613
that count, right, this function is going
to have some flaws, cuz it's going to now

10
00:00:42.613 --> 00:00:47.350
respond to new comments and it's gonna
increment and decrement that count right?

11
00:00:47.350 --> 00:00:50.970
Which means that anything that currently
has comments it's gonna be off, so

12
00:00:50.970 --> 00:00:52.740
what could you do?

13
00:00:52.740 --> 00:00:56.870
Well you could have the Cloud
function that goes ahead and

14
00:00:56.870 --> 00:01:02.010
like re-tabulates them all and you could
also have a script that on deploys or

15
00:01:02.010 --> 00:01:05.930
whatever runs a node script with
the fire base admin tool right like.

16
00:01:05.930 --> 00:01:11.640
You can also re-tabulate some of
the stuff, one of the nice things about

17
00:01:11.640 --> 00:01:14.870
NoSQL database is kind of like you get to
play a little bit more with the eventual

18
00:01:14.870 --> 00:01:21.230
consistency, is the number of
comments being super accurate?

19
00:01:21.230 --> 00:01:25.110
Especially at a large number, really
important like you start round it to 1.4k,

20
00:01:25.110 --> 00:01:29.495
and all of a sudden you can get away
with being a little off, right?

21
00:01:29.495 --> 00:01:33.990
[LAUGH] And that's like one of things
that makes NoSQL scale sometimes

22
00:01:33.990 --> 00:01:37.360
is we go ahead and do stuff like that.

23
00:01:37.360 --> 00:01:42.370
So well, I think this one is really kind
of interesting is, because it involve

24
00:01:42.370 --> 00:01:47.925
every time a new document goes into
the comments collection for a post,

25
00:01:47.925 --> 00:01:52.200
we'll then have to go, last time we based
through that, hey for this document,

26
00:01:52.200 --> 00:01:56.870
we wanna change it, this time we have
say every time we put a new document in,

27
00:01:56.870 --> 00:02:01.860
we're gonna have to go, to this other
place and change that document, so

28
00:02:01.860 --> 00:02:05.720
it's a little bit of
a twist on our last trick.

29
00:02:07.360 --> 00:02:11.410
So we’ll go ahead and we’ll say

30
00:02:11.410 --> 00:02:16.660
exports.incrementCommentCount seems

31
00:02:16.660 --> 00:02:22.060
good functions.firestore.document,

32
00:02:22.060 --> 00:02:27.164
in this case, we’re going to listen for

33
00:02:29.391 --> 00:02:31.502
&gt;&gt; Steve Kinney: ('posts/{postId},

34
00:02:31.502 --> 00:02:36.548
not a given particular one,
/comments/{commentId}'),

35
00:02:36.548 --> 00:02:42.416
so any change to a commentId, we really
only care about onCreate this time,

36
00:02:42.416 --> 00:02:47.600
we don't wanna increment the calendar,
they update one.

37
00:02:47.600 --> 00:02:51.519
One would argue we don't have the ability
to delete comments right now,

38
00:02:51.519 --> 00:02:55.503
one would argue we should probably also
have a decrement one on deletes but

39
00:02:55.503 --> 00:02:59.422
since today we now have the ability to
like once you comment now it's sets

40
00:02:59.422 --> 00:03:02.724
in stone until I go into the admin
dashboard and take it away.

41
00:03:02.724 --> 00:03:07.326
So we're not gonna worry about that
just yet, we'll say async and for

42
00:03:07.326 --> 00:03:10.680
create we'll get a snapshot
there's no before and

43
00:03:10.680 --> 00:03:14.435
the after because there's no before,
[LAUGH] all right?

44
00:03:16.713 --> 00:03:17.366
&gt;&gt; Steve Kinney: Cool, so

45
00:03:17.366 --> 00:03:23.873
we'll have the snapshot,
&gt;&gt; Steve Kinney: And if I wanna get,

46
00:03:23.873 --> 00:03:28.360
I can get any of these, there's also
a second argument called the context.

47
00:03:33.803 --> 00:03:36.016
&gt;&gt; Steve Kinney: I have two
ways to get that postId,

48
00:03:38.303 --> 00:03:39.805
&gt;&gt; Steve Kinney: I could navigate up the

49
00:03:39.805 --> 00:03:45.470
references of the parents, remember how
to use child in the storage one before?

50
00:03:45.470 --> 00:03:52.310
I can parent my way up as well, or
with context, just like in React Router,

51
00:03:52.310 --> 00:03:56.870
there is a params object
which will be each of those

52
00:03:56.870 --> 00:04:01.672
dynamics segments in there,
so we'll say post ID,

53
00:04:06.009 --> 00:04:08.709
&gt;&gt; Steve Kinney: Context.params and

54
00:04:08.709 --> 00:04:14.260
we'll say the postRef = firestore.doc.

55
00:04:23.579 --> 00:04:27.315
&gt;&gt; Steve Kinney: PostId, and
we'll get its comments count,

56
00:04:27.315 --> 00:04:32.618
we need to know what its current count is,
so we need to go ask it,

57
00:04:32.618 --> 00:04:38.351
so we'll say const comments = await,
did I make an async function?

58
00:04:38.351 --> 00:04:44.180
Yeah, I did, cool, we'll say await
postRef data will get everything,

59
00:04:44.180 --> 00:04:49.352
but if I only need one property,
I can use get('comments'),

60
00:04:49.352 --> 00:04:55.011
and we'll return, cuz it's got,
we always have to return a promise.

61
00:04:55.011 --> 00:04:59.943
I know that I'm not like
returning this value, but

62
00:04:59.943 --> 00:05:04.646
this will let the function
know when it's over,

63
00:05:04.646 --> 00:05:10.611
was it postRef.update({comments
: comments + 1 }),

64
00:05:10.611 --> 00:05:18.064
so whenever a new comment document is
added to the sub-collection of a post,

65
00:05:18.064 --> 00:05:22.766
go find the default zero
in there get whatever's

66
00:05:22.766 --> 00:05:27.610
count is return a operation
to increment it by 1.

67
00:05:37.403 --> 00:05:40.859
&gt;&gt; Steve Kinney: And away we go,
some other ones I'll kind of leave as

68
00:05:40.859 --> 00:05:46.006
an exercise for the reader, like we can
listen to OAuth changes, all right?

69
00:05:46.006 --> 00:05:50.330
So OAuth has a on create, or when would
that happen, that would happen on these

70
00:05:50.330 --> 00:05:54.430
sign in with the email and password
right with sign an email password or

71
00:05:54.430 --> 00:05:58.630
when we create the Google OAuth1
that will go ahead and

72
00:05:58.630 --> 00:06:01.480
trigger an OAuth that on create event,
what could we do there?

73
00:06:02.720 --> 00:06:08.780
We could create that user doc, right, so
we don't have to do a client-side anymore,

74
00:06:08.780 --> 00:06:11.710
we don't have to trust that that
code runs and stuff like that.

75
00:06:11.710 --> 00:06:14.378
We can start taking off some of the stuff
that we did on the front end because

76
00:06:14.378 --> 00:06:17.023
we didn't know cloud functions yet,
and we can start taking them back.

77
00:06:17.023 --> 00:06:19.731
Now there could be delay, and
we need to code defensively for

78
00:06:19.731 --> 00:06:22.294
that document not being there yet,
and stuff like that.

79
00:06:22.294 --> 00:06:25.514
That is part of just, yeah,
we have this real time,

80
00:06:25.514 --> 00:06:29.983
push-based database that automatically
updates and sends stuff, but

81
00:06:29.983 --> 00:06:34.525
it means that it’s not like activerecord
or something where the database

82
00:06:34.525 --> 00:06:39.507
completes this entire operation, we have
all the data before we make an HTML page

83
00:06:39.507 --> 00:06:44.121
like we do need to code a little bit
differently and a lot more defensively we

84
00:06:44.121 --> 00:06:48.441
saw some of that today, but it does
allow us to do really cool things and

85
00:06:48.441 --> 00:06:53.348
push like we can write a lot of back end
heavy stuff in Firebase and something that

86
00:06:53.348 --> 00:06:58.014
like abstracts away a lot of the back end
in a way that I think is really cool.

87
00:06:58.014 --> 00:07:01.066
And I love this has come
a long way the first time

88
00:07:01.066 --> 00:07:05.997
we did this course club functions were
released the night before we did it,

89
00:07:05.997 --> 00:07:08.970
[LAUGH] so and
that was I think 18 months ago so

90
00:07:08.970 --> 00:07:13.772
like a lot of this is still like 18
months is a long time in tech but like.

91
00:07:13.772 --> 00:07:19.599
Still, a lot of this is very new, and
getting increasingly more powerful too, so

92
00:07:19.599 --> 00:07:25.510
I would also encourage you to watch this
space as well, and this definitely seems,

93
00:07:25.510 --> 00:07:31.355
amongst a lot of the cloud providers, to
be something of an arms race, all right.

94
00:07:31.355 --> 00:07:34.941
So let's go ahead, I'm gonna make
a brand new one, that I know has zero.

95
00:07:44.313 --> 00:07:46.445
&gt;&gt; Steve Kinney: Now, this one might
not be warmed up yet, we'll find out.

96
00:07:49.708 --> 00:07:54.711
&gt;&gt; Steve Kinney: Yeah, that comment It is
one of those things where if it doesn't

97
00:07:54.711 --> 00:07:59.900
work I will have to check the logs and
see where the boo boo was made,

98
00:07:59.900 --> 00:08:05.738
[LAUGH] kind of work,s [LAUGH]
the debugging cloud functions, it's great,

99
00:08:05.738 --> 00:08:10.864
it really makes you feel good about life,
but let's take a look.

100
00:08:18.313 --> 00:08:20.188
&gt;&gt; Steve Kinney: The one
thing I'm gonna do is,

101
00:08:20.188 --> 00:08:25.093
this is kind of one of the reasons I gave
myself the firebase on the window object,

102
00:08:25.093 --> 00:08:29.131
is so I could kind of, it's just
gonna add 1 to an object, we can,

103
00:08:29.131 --> 00:08:33.749
[LAUGH] we can keep commenting, it's
just gonna keep adding 1 to an object,

104
00:08:33.749 --> 00:08:37.821
it's probably the way that I'm
fetching it, let's take a look.

105
00:08:41.595 --> 00:08:47.029
&gt;&gt; Steve Kinney: So
we can say firebase.firestore,

106
00:08:53.613 --> 00:08:56.159
&gt;&gt; Steve Kinney: I'll grab that up there.

107
00:09:22.130 --> 00:09:23.498
&gt;&gt; Steve Kinney: Now it's a string,
that's great.

108
00:09:23.498 --> 00:09:31.517
[LAUGH]
&gt;&gt; Speaker 2: The function

109
00:09:31.517 --> 00:09:35.983
is somehow setting a string object,
we are setting an object.

110
00:09:35.983 --> 00:09:39.168
&gt;&gt; Steve Kinney: Yep,
the big question is where is it doing

111
00:09:39.168 --> 00:09:44.999
it,
&gt;&gt; Steve Kinney: Let's

112
00:09:44.999 --> 00:09:49.761
take a look at the code, I know what's
happening comments is this is actually

113
00:09:49.761 --> 00:09:52.635
the snapshot literally
the code I was typing.

114
00:09:59.114 --> 00:10:02.027
&gt;&gt; Steve Kinney: We actually want this and
we'll say,

115
00:10:07.921 --> 00:10:09.736
&gt;&gt; Steve Kinney: Okay, let's try that out.

116
00:10:16.745 --> 00:10:21.647
&gt;&gt; Steve Kinney: I was, calling it on
the reference which is trying to get

117
00:10:21.647 --> 00:10:27.488
a document called comments which
was an object and I was adding it,

118
00:10:27.488 --> 00:10:34.685
plus one to the actual reference which was
setting it to an object, fun times, and

119
00:10:34.685 --> 00:10:41.503
I'll supply that might create myself
a fresh one because I've ruined this.

120
00:10:57.956 --> 00:11:00.195
&gt;&gt; Steve Kinney: All right, nobody
comment on it until my function deploys.

121
00:11:02.355 --> 00:11:06.691
&gt;&gt; Steve Kinney: But you all are here,
so it keeps me honest, all right,

122
00:11:06.691 --> 00:11:13.857
now,
&gt;&gt; Steve Kinney: I'm not convinced

123
00:11:13.857 --> 00:11:18.192
that wasn't the old function, [LAUGH] this
is what you all tune in for, all right?

124
00:11:23.898 --> 00:11:26.120
&gt;&gt; Steve Kinney: There's some it
feels like a cold start to me.

125
00:11:29.202 --> 00:11:33.578
&gt;&gt; Steve Kinney: Yeah, [SOUND] and
that was warmed up and working,

126
00:11:33.578 --> 00:11:38.701
all right, so yeah,
here's the thing about the cloud,

127
00:11:38.701 --> 00:11:43.400
this stuff isn't instant,
[LAUGH] we're deploying

128
00:11:43.400 --> 00:11:48.545
stuff just everywhere around the world,
takes a while.

129
00:11:48.545 --> 00:11:51.870
See also the course we did on,
doing CDMs on Cloudfront,

130
00:11:51.870 --> 00:11:55.490
involved a lot of patience and
in this we're propagating a lot

