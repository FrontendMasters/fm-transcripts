WEBVTT

1
00:00:00.350 --> 00:00:01.160
&gt;&gt; Steve Kinney: Yeah.

2
00:00:01.160 --> 00:00:03.870
&gt;&gt; Speaker 1: This may not be pertinent
and we can come back to it later.

3
00:00:03.870 --> 00:00:08.230
Earlier when futzing around,
I had created a version,

4
00:00:08.230 --> 00:00:13.630
a collection that only had title content,
didn't have any of the user fields.

5
00:00:13.630 --> 00:00:18.085
Later went back, saw that there
wasn't a method for adding say,

6
00:00:18.085 --> 00:00:22.793
the UID or the display name fields
via the database ui in the browser.

7
00:00:22.793 --> 00:00:23.780
&gt;&gt; Steve Kinney: Mm-hm.

8
00:00:23.780 --> 00:00:27.683
&gt;&gt; Speaker 1: Is this just too
much of a SQL-based paradigm that,

9
00:00:27.683 --> 00:00:30.440
there could be plenty of documents.

10
00:00:30.440 --> 00:00:32.737
I know like those SQL databases
before I've worked in like yeah,

11
00:00:32.737 --> 00:00:34.990
you just don't need those, and
you don't need to add them in and

12
00:00:34.990 --> 00:00:36.740
there are plenty [CROSSTALK]
&gt;&gt; Steve Kinney: That's a great question,

13
00:00:36.740 --> 00:00:37.598
it's-
&gt;&gt; Speaker 1: Is that how it would

14
00:00:37.598 --> 00:00:38.883
work with-
&gt;&gt; Steve Kinney: It's willy nilly, right?.

15
00:00:38.883 --> 00:00:39.689
&gt;&gt; Speaker 1: Cool, all right.

16
00:00:39.689 --> 00:00:42.080
&gt;&gt; Steve Kinney: There's
no necessitated schema.

17
00:00:42.080 --> 00:00:44.710
Which opens a series of problems, right?

18
00:00:44.710 --> 00:00:46.610
Not problems,
let's call them opportunities.

19
00:00:47.870 --> 00:00:51.460
Which is on one hand, it's great for when
you're prototyping, figuring stuff out,

20
00:00:51.460 --> 00:00:54.390
because you can just add
new fields to a document.

21
00:00:54.390 --> 00:00:55.920
It does mean A few things.

22
00:00:55.920 --> 00:00:59.957
One is, especially if we were thinking
about like on the web, we're kind of

23
00:00:59.957 --> 00:01:03.868
pushing out code every time, but
if you think about this also in the native

24
00:01:03.868 --> 00:01:08.437
application like if you're making React
Native application or even iOS or Android.

25
00:01:08.437 --> 00:01:13.149
You don't always know that the client,
the app, is the most recent

26
00:01:13.149 --> 00:01:18.390
version of the app talking to the most
recent version of the database.

27
00:01:18.390 --> 00:01:21.202
So it does require that we code
a little bit more defensively.

28
00:01:21.202 --> 00:01:23.206
And you'll see some of
that as I'm coding today,

29
00:01:23.206 --> 00:01:25.307
where it's like there'll
probably be documents,

30
00:01:25.307 --> 00:01:28.428
I'll probably have to wipe some out,
but there are ways to migrate the data.

31
00:01:28.428 --> 00:01:32.291
There are ways that we can basically spin
up a node process and go through and

32
00:01:32.291 --> 00:01:35.150
programmatically add
fields if we needed to.

33
00:01:35.150 --> 00:01:37.038
We'll do with called functions, but

34
00:01:37.038 --> 00:01:39.461
you can use the same
technique to just call them.

35
00:01:39.461 --> 00:01:42.686
When we use the Firebase Admin Library
you can just also just run that and

36
00:01:42.686 --> 00:01:43.410
do it as well.

37
00:01:43.410 --> 00:01:45.933
It does mean that we need to code
a little bit defensively and

38
00:01:45.933 --> 00:01:49.264
it does mean that yeah, some documents
might not have the things that we need so

39
00:01:49.264 --> 00:01:51.239
we'd need to figure out
a way to migrate them.

40
00:01:51.239 --> 00:01:56.590
But there is no rule, documents can have
whatever, there's no enforced schema.

41
00:01:56.590 --> 00:01:58.560
When we get to validations and

42
00:01:58.560 --> 00:02:03.480
security rules we can start to make some
enforcements that will reject stuff.

43
00:02:03.480 --> 00:02:06.740
And we can use called functions
to add in things, right?

44
00:02:06.740 --> 00:02:08.640
Right now we don't have a,

45
00:02:08.640 --> 00:02:12.810
we're just trusting the client when
we get to doing a createdAt date.

46
00:02:12.810 --> 00:02:15.720
It'd be better to have
a cloud function do it.

47
00:02:15.720 --> 00:02:19.650
Right, so cloud functions can edit
the documents after they've been created.

48
00:02:21.860 --> 00:02:24.870
And we can always just go ahead and
migrate our data and

49
00:02:24.870 --> 00:02:26.730
add fields if we needed them.

50
00:02:26.730 --> 00:02:28.120
So there's a bunch of options.

51
00:02:28.120 --> 00:02:32.030
But to your point, we also need to code
defensively cuz we don't really know.

52
00:02:33.170 --> 00:02:36.183
&gt;&gt; Speaker 1: Smaller,
possible less pertinent question.

53
00:02:36.183 --> 00:02:41.890
In Rails land I would probably set up
a cron job to run a rate ask or something.

54
00:02:41.890 --> 00:02:44.669
Would setting up a cloud function on a con

55
00:02:44.669 --> 00:02:45.529
[CROSSTALK]
&gt;&gt; Steve Kinney: So

56
00:02:45.529 --> 00:02:47.986
cloud function technically-
&gt;&gt; Speaker 1: Or would it be, yeah.

57
00:02:47.986 --> 00:02:50.367
&gt;&gt; Steve Kinney: Yes, technically
something has to trigger a cloud function.

58
00:02:50.367 --> 00:02:51.042
&gt;&gt; Speaker 1: Yeah.

59
00:02:51.042 --> 00:02:51.847
&gt;&gt; Steve Kinney: So
there's a few ways to do it.

60
00:02:51.847 --> 00:02:56.447
One is you can have a cron job that
triggers [LAUGH] a cloud function, right?

61
00:02:56.447 --> 00:03:00.266
But when we learn how to do it just
through HTTPS requests, you can

62
00:03:00.266 --> 00:03:04.934
theoretically have a cron job that hits
that HTTPS endpoint on a regular basis.

63
00:03:04.934 --> 00:03:05.881
And those services,

64
00:03:05.881 --> 00:03:09.620
I think Pingdom will do it where you can
just have it regularly ping something.

65
00:03:09.620 --> 00:03:12.480
So yeah, that's a thing as well.

66
00:03:12.480 --> 00:03:15.630
At SendGrid,
we use a lot of AWS lambda functions, and

67
00:03:15.630 --> 00:03:20.110
there is a certain amount of cold start
time, right, that we have to pay for.

68
00:03:20.110 --> 00:03:22.905
Pay not in money, but in performance.

69
00:03:22.905 --> 00:03:24.705
So what we'll do in a lot of cases,

70
00:03:24.705 --> 00:03:28.264
kind of occasionally keep
pinging them to keep them alive?

71
00:03:28.264 --> 00:03:29.320
Right, cuz once they're warm and

72
00:03:29.320 --> 00:03:32.130
running they're already going and
they can respond really quickly.

73
00:03:32.130 --> 00:03:36.230
But if they get turned off by AWS then
that's a performance penalty as they

74
00:03:36.230 --> 00:03:37.350
spin back up.

75
00:03:37.350 --> 00:03:41.740
So we're willing to pay the extra fraction
of a penny to occasionally keep them warm.

76
00:03:41.740 --> 00:03:44.160
And so you can do stuff like that as well.

77
00:03:44.160 --> 00:03:48.087
When we see some of these when we
first deploy a cloud function later,

78
00:03:48.087 --> 00:03:52.297
we'll see that like it is displeasing
how long some of them take at first.

79
00:03:52.297 --> 00:03:54.340
And then when we do the second
thing it's almost instantaneous.

80
00:03:54.340 --> 00:03:56.660
So we'll actually get to see some
of that at one point as well.

