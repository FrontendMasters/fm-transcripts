WEBVTT

1
00:00:00.180 --> 00:00:05.650
&gt;&gt; Steve Kinney: All right, so our goal
was to insist on a title for a new post.

2
00:00:06.720 --> 00:00:11.520
All right, so we have this create

3
00:00:12.530 --> 00:00:15.670
rule here that I think we can just add to.

4
00:00:17.940 --> 00:00:22.820
So, we can say, we have

5
00:00:22.820 --> 00:00:26.660
the request.resource which is
different than the resource.

6
00:00:26.660 --> 00:00:30.716
The resource.data.title
would insist that the one

7
00:00:30.716 --> 00:00:34.598
in the database already had
a title which is silly.

8
00:00:34.598 --> 00:00:37.867
Like that's not the concern
of the new one coming in.

9
00:00:37.867 --> 00:00:40.650
But the request resource
will be the one coming in.

10
00:00:40.650 --> 00:00:46.265
So, we can say, request.resource,
let auto complete help us here,

11
00:00:46.265 --> 00:00:51.642
data.title.

12
00:00:54.564 --> 00:00:55.540
&gt;&gt; Steve Kinney: Just one equal sign,

13
00:00:55.540 --> 00:00:58.370
don't let the JavaScript
developer in you get carried away.

14
00:01:02.959 --> 00:01:04.180
&gt;&gt; Steve Kinney: Now, if we go in.

15
00:01:11.663 --> 00:01:13.910
&gt;&gt; Steve Kinney: Maybe that
didn't go fast enough.

16
00:01:13.910 --> 00:01:17.570
We'll see.
It says title does not equal no.

17
00:01:17.570 --> 00:01:19.510
All right.

18
00:01:23.160 --> 00:01:26.010
&gt;&gt; Speaker 2: I did it similarly and
I had the same issue.

19
00:01:26.010 --> 00:01:31.600
Is null within this kind
of JavaScript-esque syntax.

20
00:01:31.600 --> 00:01:33.449
Does that cover any possible value?

21
00:01:33.449 --> 00:01:34.386
Or is it?
&gt;&gt; Steve Kinney: It could be.

22
00:01:34.386 --> 00:01:35.528
I think you're right.
It could just be [CROSSTALK]

23
00:01:35.528 --> 00:01:36.088
&gt;&gt; Speaker 2: Or is it,

24
00:01:36.088 --> 00:01:39.320
if we're sending undefined [CROSSTALK]
&gt;&gt; Steve Kinney: Or, let's find out.

25
00:01:39.320 --> 00:01:41.564
We're gonna learn together.

26
00:01:41.564 --> 00:01:43.849
Let's see.
Let's go ahead and delete some of these.

27
00:01:46.420 --> 00:01:47.800
&gt;&gt; Steve Kinney: All right, there we go.

28
00:01:47.800 --> 00:01:53.700
It was an empty string cuz input fields in
the DOM are empty strings by default and

29
00:01:53.700 --> 00:01:54.830
not, in fact, null.

30
00:01:54.830 --> 00:01:57.070
So, we sent an empty string through.

31
00:01:57.070 --> 00:01:59.350
So, here we check to see.

32
00:01:59.350 --> 00:02:06.800
Out of pure curiosity, I curious to
see if the JavaScript rules apply.

33
00:02:06.800 --> 00:02:11.555
I am offroading right now, so we'll find
out together what's going to happen here.

34
00:02:16.604 --> 00:02:17.616
&gt;&gt; Steve Kinney: That'll also work.

35
00:02:17.616 --> 00:02:19.150
This will get you any false E value.

36
00:02:20.270 --> 00:02:23.510
We all learned something together today.

37
00:02:23.510 --> 00:02:24.482
[LAUGH] Cool.

38
00:02:24.482 --> 00:02:30.929
So this'll make sure that if this is
falsely value, it'll turn it to true.

39
00:02:30.929 --> 00:02:34.440
Which will work.

40
00:02:34.440 --> 00:02:37.470
But yeah, so no it didn't work in
this case cuz it was an empty string.

41
00:02:38.870 --> 00:02:39.850
Cool.

42
00:02:39.850 --> 00:02:45.860
All right, so now, we have
the ability to authenticate the user.

43
00:02:45.860 --> 00:02:50.330
We have the ability to validate

44
00:02:50.330 --> 00:02:55.420
based on that user what's coming into
our system and secure everything down.

45
00:02:55.420 --> 00:02:57.540
We did have this email authentication,

46
00:02:57.540 --> 00:03:02.070
I want you to talk a little bit about
just in case, because there's a.

47
00:03:02.070 --> 00:03:06.170
I think it's worth going into because it's
not as simple as the Google one, right.

48
00:03:06.170 --> 00:03:07.500
We need to do a little more work.

49
00:03:07.500 --> 00:03:08.890
Not much more work.

50
00:03:08.890 --> 00:03:10.450
But a little bit more work.

51
00:03:10.450 --> 00:03:15.240
But where I really wanna take this, after
we get the email authentication set up,

52
00:03:15.240 --> 00:03:19.780
is these users are limited, right.

53
00:03:19.780 --> 00:03:23.343
They come with a photo URL,
a UID, a display name, an email,

54
00:03:23.343 --> 00:03:26.030
I think we saw one or
two other things, right?

55
00:03:26.030 --> 00:03:32.720
But that photo URL is the one
we got from Google, right?

56
00:03:32.720 --> 00:03:36.810
So, if the user wants to change
their photo in our application,

57
00:03:36.810 --> 00:03:39.260
we don't support that currently.

58
00:03:39.260 --> 00:03:44.810
If we wanted to store additional data
on the user, that is problematic.

59
00:03:46.340 --> 00:03:49.490
There is a thing in Firebase
called custom claims.

60
00:03:49.490 --> 00:03:52.880
Custom claims can get run from anywhere
where you have like a full admin access or

61
00:03:52.880 --> 00:03:57.250
either from a node process or from
a cloud function where you can put about

62
00:03:57.250 --> 00:04:02.900
a thousand bytes, a one kilobyte of
additional data, on a user object, right?

63
00:04:02.900 --> 00:04:07.370
But that's still, that's mostly like,
it's super useful if you have multiple

64
00:04:07.370 --> 00:04:09.909
databases and
you wanna attach it to the user.

65
00:04:09.909 --> 00:04:11.296
Well, generally speaking for

66
00:04:11.296 --> 00:04:15.420
one it makes more sense to kind of have
documents that serve as our user profile.

67
00:04:15.420 --> 00:04:19.190
If, in this application,
we want the user to have a bio or

68
00:04:19.190 --> 00:04:24.705
we wanted to store the post
that they favored is.

69
00:04:24.705 --> 00:04:27.585
Other things that we wanted
to put on there, right?

70
00:04:27.585 --> 00:04:31.145
We are going to need some place in
our Cloud Firestore to store it.

71
00:04:31.145 --> 00:04:32.984
So, a really great pattern for

72
00:04:32.984 --> 00:04:36.393
that is just to make documents
that are based on that UID.

73
00:04:36.393 --> 00:04:39.601
Because UID will be consistent
when the user logs in, and so,

74
00:04:39.601 --> 00:04:43.675
now basically every time they log in we
can match them up with that document that

75
00:04:43.675 --> 00:04:46.035
has all of their other
profile information.

