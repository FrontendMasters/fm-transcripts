WEBVTT

1
00:00:00.268 --> 00:00:05.740
&gt;&gt; Steve Kinney: The other nice thing
about Cloud Firestore is it supports some,

2
00:00:05.740 --> 00:00:13.056
let's call them SQLite-like queries,
SQL-esque queries, if you will, right?

3
00:00:13.056 --> 00:00:17.184
So we can go ahead and
get them in a particular order.

4
00:00:17.184 --> 00:00:20.099
And you might be like, for
a NoSQL database, it's a giant tree,

5
00:00:20.099 --> 00:00:21.003
how does it do this?

6
00:00:21.003 --> 00:00:26.321
Well, it turns out for pretty much
every single property in your database,

7
00:00:26.321 --> 00:00:30.072
Cloud Firestore under the hood
has created an index.

8
00:00:30.072 --> 00:00:34.273
So you can pretty much sort, or filter, or

9
00:00:34.273 --> 00:00:38.837
limit by any property
in your NoSQL document.

10
00:00:38.837 --> 00:00:42.363
I think up to 200 properties or
something along those lines, right?

11
00:00:42.363 --> 00:00:46.907
At which point, you can just split
them out to further documents and

12
00:00:46.907 --> 00:00:51.706
get more, but at a certain point,
it will give up, but 200 is a lot.

13
00:00:51.706 --> 00:00:54.646
So you can order it, and basically all
it does is creates these indexes and

14
00:00:54.646 --> 00:00:56.555
it'll start at a certain point and
keep going.

15
00:00:56.555 --> 00:00:59.983
And the really interesting part is you
could have 60 million documents in your

16
00:00:59.983 --> 00:01:00.502
database.

17
00:01:00.502 --> 00:01:03.137
It's not going to have to sort all
60 million because it already has

18
00:01:03.137 --> 00:01:03.918
the index in there.

19
00:01:03.918 --> 00:01:07.896
It'll just start at the top and
it will go for however many you want and

20
00:01:07.896 --> 00:01:10.377
you only pay for however many you request.

21
00:01:10.377 --> 00:01:14.453
So, you having 60 million,
100 million documents in there

22
00:01:14.453 --> 00:01:19.134
is not upping your bill, unless you
are fetching 100 million at a time.

23
00:01:19.134 --> 00:01:22.927
So, it gives you the ability to scale and
have your application grow really big.

24
00:01:22.927 --> 00:01:26.827
While also being incredibly
manageable if you write your code,

25
00:01:26.827 --> 00:01:29.073
in a way that supports that, right?

26
00:01:29.073 --> 00:01:32.191
So if you fetch all 100 million, yes,
you're going to pay for that, but

27
00:01:32.191 --> 00:01:35.084
if you limit it, and we'll see that
in a second, to ten and paginate.

28
00:01:35.084 --> 00:01:38.519
You will pay for ten at a time,
no matter how big your database gets,

29
00:01:38.519 --> 00:01:39.680
which is really cool.

30
00:01:39.680 --> 00:01:44.344
In the real time database, you'd get
all of the tree for something, right?

31
00:01:44.344 --> 00:01:49.291
And so it was a little trickier,
on top of ordering, we can also limit,

32
00:01:49.291 --> 00:01:50.534
as I said before.

33
00:01:50.534 --> 00:01:54.036
So this will just get the first ten, and

34
00:01:54.036 --> 00:01:59.886
the other nice one that we can do
is we can do querying now, right?

35
00:01:59.886 --> 00:02:03.460
Before you would just basically, like I
said, you would get that part of the tree,

36
00:02:03.460 --> 00:02:04.853
you could sort a client-side.

37
00:02:04.853 --> 00:02:06.536
You could do all this stuff client-side,
but

38
00:02:06.536 --> 00:02:09.308
you would have to basically structure
your data in a way that worked for you.

39
00:02:09.308 --> 00:02:13.564
In this case we can say, where stars
are greater than or equal to 10.

40
00:02:13.564 --> 00:02:17.791
You can also,
you can't do substring searching.

41
00:02:17.791 --> 00:02:20.279
But you can theoretically do
like alphabetical order, or

42
00:02:20.279 --> 00:02:21.610
something along those lines.

43
00:02:21.610 --> 00:02:26.316
It's basically those indexes
are basically sorting your data.

44
00:02:26.316 --> 00:02:29.118
And then allowing you start
from a given point and

45
00:02:29.118 --> 00:02:31.245
read up until given a point, right?

46
00:02:31.245 --> 00:02:34.328
So you kind of construct these queries and

47
00:02:34.328 --> 00:02:39.537
get SQL-like queries out of a NoSQL
database, which is pretty cool.

48
00:02:39.537 --> 00:02:44.759
So that concludes the theory
about the Cloud Datastore,

49
00:02:44.759 --> 00:02:48.794
Cloud Firestore rather, part of the show.

50
00:02:48.794 --> 00:02:51.550
Let's actually,
let's start writing some code, all right?

