WEBVTT

1
00:00:00.170 --> 00:00:04.410
&gt;&gt; Steve: Earlier, we figured out how to
take all of those actions, like creating

2
00:00:04.410 --> 00:00:09.440
a post and removing a post, we took
them out of the application component.

3
00:00:09.440 --> 00:00:14.130
But still, all of our state is still
stored in that top level component.

4
00:00:14.130 --> 00:00:18.280
We didn't really, fully solve
the problem yet, which is fine.

5
00:00:18.280 --> 00:00:19.650
We're getting there.

6
00:00:19.650 --> 00:00:23.180
But now what we want to do is,
this application could grow.

7
00:00:23.180 --> 00:00:26.650
I plan on making a lot of
money with this application.

8
00:00:26.650 --> 00:00:28.920
It's going to grow very big.

9
00:00:28.920 --> 00:00:32.660
So what we're going to want to do is be
able to figure out a way to be able to

10
00:00:32.660 --> 00:00:37.910
pass different pieces of Firebase state
to kind of smaller components, right?

11
00:00:37.910 --> 00:00:42.920
It's not tenable long term to be
able to just kind of go ahead and

12
00:00:42.920 --> 00:00:44.080
pass everything down.

13
00:00:44.080 --> 00:00:48.820
The application is small now, but
it could eventually get a lot bigger.

14
00:00:48.820 --> 00:00:53.710
And there are whole bunch of
different ways we can do this, but

15
00:00:53.710 --> 00:00:56.080
we're gonna look at kind of a modern one.

16
00:00:56.080 --> 00:01:01.360
In the previous version of this course, we
hooked the Realtime Database up to Redux.

17
00:01:01.360 --> 00:01:04.210
And that approach will still work,

18
00:01:04.210 --> 00:01:07.483
that's what you're interested
in basically using Redux Thunk.

19
00:01:07.483 --> 00:01:12.290
You subscribe to the events and you
basically keep dispatching actions, right?

20
00:01:12.290 --> 00:01:15.400
You basically have a thunk that
just continually dispatches

21
00:01:15.400 --> 00:01:17.000
on every update, right?

22
00:01:17.000 --> 00:01:20.008
We saw the in Coldfire
store with the doc changes,

23
00:01:20.008 --> 00:01:23.029
we actually have a really
great way of doing that.

24
00:01:23.029 --> 00:01:25.802
Cuz, we know when it's added or removed,

25
00:01:25.802 --> 00:01:30.630
when we get very granular with
the actual actions that take place.

26
00:01:30.630 --> 00:01:35.730
With that said, we're gonna try
something a little bit simpler

27
00:01:35.730 --> 00:01:41.020
since we have a few more built
in options now within React.

28
00:01:41.020 --> 00:01:46.020
So what we're gonna do is we're gonna use
the Context API, and we're gonna basically

29
00:01:46.020 --> 00:01:52.030
pull out this idea of having the user and
the idea of having the post.

30
00:01:52.030 --> 00:01:57.810
And so we can wrap it around any component
that needs the post or the user.

31
00:01:57.810 --> 00:01:59.650
So eventually, we are going to
do this a few different ways.

32
00:01:59.650 --> 00:02:04.100
We create a provider and
consumer for post and for

33
00:02:04.100 --> 00:02:07.888
user for
our stateless functional components.

34
00:02:07.888 --> 00:02:11.170
And then, we'll also use some
higher order components for

35
00:02:11.170 --> 00:02:13.555
the ones that have forms, right?

36
00:02:13.555 --> 00:02:15.668
Cuz, we'd have to wrap them first,

37
00:02:15.668 --> 00:02:19.561
it's just simply pass them into
the function would be a lot easier.

