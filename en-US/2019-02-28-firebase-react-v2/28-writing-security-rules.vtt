WEBVTT

1
00:00:00.620 --> 00:00:02.966
&gt;&gt; Steve Kinney: Let's go ahead and
figure out how we do this.

2
00:00:04.650 --> 00:00:07.360
So we can go and you see there is
this little exclamation point,

3
00:00:07.360 --> 00:00:10.760
next to Rules,
that's because it's warning us that it's

4
00:00:12.240 --> 00:00:14.715
trying to be very clear
that this isn't good.

5
00:00:14.715 --> 00:00:19.380
This was fine for development but
ultimately, not a thing.

6
00:00:19.380 --> 00:00:24.990
All right, so we kinda already know
a little bit of the shape of our data.

7
00:00:24.990 --> 00:00:27.798
We know that there are posts,
so we could say match.

8
00:00:32.498 --> 00:00:34.561
&gt;&gt; Steve Kinney: We'll say /posts.

9
00:00:37.805 --> 00:00:44.740
&gt;&gt; Steve Kinney: Maybe a postId there too,
and we'll allow anyone to read.

10
00:00:44.740 --> 00:00:46.519
Go ahead, query the whole list.

11
00:00:49.806 --> 00:00:50.869
&gt;&gt; Steve Kinney: That's fine with us.

12
00:00:50.869 --> 00:00:54.324
Get a specific one and
we'll allow a write.

13
00:00:57.655 --> 00:01:06.300
&gt;&gt; Steve Kinney: Only event that
the request.auth.uid is not null.

14
00:01:06.300 --> 00:01:10.488
If they're not logged in,
the user is null, if they are logged in,

15
00:01:10.488 --> 00:01:15.708
we'll have that user object that has the
UID, the display name, so on and so forth.

16
00:01:15.708 --> 00:01:21.176
Cool, and then you can either hit
Publish or you can hit command+S,

17
00:01:21.176 --> 00:01:27.880
and they take a minute to propagate, but
generally speaking, it's pretty quick.

18
00:01:29.110 --> 00:01:30.512
So if I go ahead and log in.

19
00:01:38.798 --> 00:01:41.900
&gt;&gt; Steve Kinney: New post, I am secure.

20
00:01:44.420 --> 00:01:45.060
There it is.

21
00:01:46.200 --> 00:01:46.700
I sign out.

22
00:01:50.748 --> 00:01:55.810
&gt;&gt; Steve Kinney: Another new post,
not going to happen.

23
00:01:55.810 --> 00:01:58.810
We're gonna see the error in
our console because we don't

24
00:01:58.810 --> 00:01:59.760
really have error handling.

25
00:01:59.760 --> 00:02:02.290
But you can see it's very angry at us.

26
00:02:02.290 --> 00:02:05.610
And the error message is missing or
insufficient permissions,

27
00:02:05.610 --> 00:02:10.490
which makes sense because we
put in security rules and

28
00:02:10.490 --> 00:02:14.470
the rules say that you can't make
things if you are logged out.

29
00:02:14.470 --> 00:02:16.630
So, mission accomplished, right?

30
00:02:16.630 --> 00:02:19.007
Now, obviously we'd love
to catch that error and

31
00:02:19.007 --> 00:02:21.320
actually display a more helpful ui.

32
00:02:21.320 --> 00:02:25.565
But that kind of, like,
is the major, like of it.

33
00:02:25.565 --> 00:02:29.691
The other thing I wanna do is,
right now, whether I made the post or

34
00:02:29.691 --> 00:02:33.906
somebody else made the post,
I can delete any posts I want, right?

35
00:02:33.906 --> 00:02:39.180
We wanna make it so
that a user can only delete their own.

36
00:02:39.180 --> 00:02:43.334
Now, this is gonna be a little trickier
cuz right was remember all three,

37
00:02:43.334 --> 00:02:45.753
is create, is update, and it's delete.

38
00:02:45.753 --> 00:02:49.226
So we gonna need to split this one out
a little bit just using right as kind of

39
00:02:49.226 --> 00:02:51.539
a sledge hammer here is
not gonna be good enough.

40
00:02:51.539 --> 00:02:55.107
We'll go ahead and we'll say, okay,

41
00:02:55.107 --> 00:03:01.770
they can create If the request.auth.uid
does not equal null.

42
00:03:01.770 --> 00:03:07.829
But if they want to, let's say,
update, update we had the star, right?

43
00:03:07.829 --> 00:03:12.281
So let them create or update,

44
00:03:12.281 --> 00:03:17.096
right, if they're logged in.

45
00:03:17.096 --> 00:03:21.908
However,
&gt;&gt; Steve Kinney: They can only delete.

46
00:03:24.764 --> 00:03:31.823
&gt;&gt; Steve Kinney: If the request.auth.uid
&gt;&gt; Steve Kinney: Now

47
00:03:31.823 --> 00:03:35.852
remember we made that, this is gonna
blow up in our face a little bit cuz we

48
00:03:35.852 --> 00:03:38.620
never actually used the current user.

49
00:03:38.620 --> 00:03:42.111
And we're still using some
default like 111 user ID.

50
00:03:42.111 --> 00:03:46.895
So I won't be able to delete any of them
once we implement that because that's

51
00:03:46.895 --> 00:03:48.822
how I developed the database.

52
00:03:48.822 --> 00:03:54.410
But we'll say okay, the request.auth.uid
look at that resource.

53
00:03:54.410 --> 00:03:57.330
Whatever document we're trying to get and

54
00:03:57.330 --> 00:04:01.520
we have that user map that
had a UID field on it.

55
00:04:01.520 --> 00:04:04.990
So if it was just something like
the title, we could put that there.

56
00:04:04.990 --> 00:04:09.420
But we have a map, so
it was request.data.user.uid.

57
00:04:09.420 --> 00:04:13.780
So if these two things don't match,
and this is not actual JavaScript, so

58
00:04:13.780 --> 00:04:15.890
it's two equal signs instead of three.

59
00:04:15.890 --> 00:04:18.050
Watch how many times I
make that mistake today.

60
00:04:18.050 --> 00:04:20.682
If these two things don't match,

61
00:04:20.682 --> 00:04:24.687
then the user will not be
able to delete one, right?

62
00:04:24.687 --> 00:04:28.140
So ideally, we start out with
very locked down permissions and

63
00:04:28.140 --> 00:04:31.890
we slowly begin to open them up
depending on what the user needs.

64
00:04:31.890 --> 00:04:32.629
Yeah.

65
00:04:32.629 --> 00:04:34.208
&gt;&gt; Speaker 1: Under the current rules,

66
00:04:34.208 --> 00:04:38.794
would I be able to edit someone else's-
&gt;&gt; Steve Kinney: Yep, you would.

67
00:04:38.794 --> 00:04:43.287
Right, and so we could then start to
have further conditionals in there and

68
00:04:43.287 --> 00:04:45.300
build it out a little bit as well.

69
00:04:45.300 --> 00:04:47.526
Yeah, if we have the UI for doing that,

70
00:04:47.526 --> 00:04:51.654
you would totally be able to edit
the contents of somebody else's post.

71
00:04:54.512 --> 00:04:58.258
&gt;&gt; Steve Kinney: Right,
so we might do something

72
00:04:58.258 --> 00:05:03.154
like
&gt;&gt; Speaker 1: We create an object that

73
00:05:03.154 --> 00:05:06.072
cannot be bunched together there,
it won't work?

74
00:05:06.072 --> 00:05:08.090
&gt;&gt; Steve Kinney: Create we
can separate them out, right.

75
00:05:08.090 --> 00:05:10.657
And we can start to write a conditional
in here that got a little bit

76
00:05:10.657 --> 00:05:11.647
more granular, right?

77
00:05:11.647 --> 00:05:16.343
So create update if the request is
not null and like the title and

78
00:05:16.343 --> 00:05:19.808
content match the previous version, right?

79
00:05:19.808 --> 00:05:23.934
So you have the request.resource.data and
the resouce.data,

80
00:05:23.934 --> 00:05:27.330
you can make sure that,
okay, they're only, yeah.

81
00:05:27.330 --> 00:05:28.612
They can't do this one,
this one, this one.

82
00:05:28.612 --> 00:05:30.860
It's only this one that they can change.

83
00:05:30.860 --> 00:05:32.800
So you can get increasingly granular too.

84
00:05:34.300 --> 00:05:38.140
&gt;&gt; Speaker 1: Would it be sensible to just
make update follow the same rules which is

85
00:05:38.140 --> 00:05:39.680
you can only do it to your own and so

86
00:05:39.680 --> 00:05:41.666
just move update down into-
&gt;&gt; Steve Kinney: You could.

87
00:05:41.666 --> 00:05:48.160
That would break the ability to star
them in our current data model, right?

88
00:05:48.160 --> 00:05:51.068
And so there's two choices there.

89
00:05:51.068 --> 00:05:54.848
Either, right,
you could have a separate collection,

90
00:05:54.848 --> 00:05:59.588
which is like user favorites, right,
that have a user and a favorite.

91
00:05:59.588 --> 00:06:02.682
So you can say, give for a given user,
or those who are given post and

92
00:06:02.682 --> 00:06:03.940
those favorites, right?

93
00:06:03.940 --> 00:06:06.938
And so you then query that and so you can
get a little more granular sometimes not

94
00:06:06.938 --> 00:06:08.483
necessarily in the Security rules, but

95
00:06:08.483 --> 00:06:10.570
in the way that you structure your data,
right?

96
00:06:10.570 --> 00:06:13.580
And so when you get to those specific
use cases, it does come down to,

97
00:06:13.580 --> 00:06:17.410
do I write more sophisticated
security rules, or

98
00:06:17.410 --> 00:06:21.340
do I sit there and rethink how I
structure some of my data, right?

99
00:06:21.340 --> 00:06:26.030
Cuz sometimes querying, I know SQL
databases can be a little tricky,

100
00:06:26.030 --> 00:06:29.969
cuz you basically start at a given
cursor and go in a particular order.

101
00:06:29.969 --> 00:06:32.595
So stuff like Ors don't really work.

102
00:06:32.595 --> 00:06:36.496
So sometimes, you have to create these
collections that are two keys so

103
00:06:36.496 --> 00:06:40.732
that you can sort them in a particular way
and run through a set of them as well.

104
00:06:40.732 --> 00:06:45.539
We're gonna keep it a little bit naive for
now because nothing will make your brain

105
00:06:45.539 --> 00:06:49.730
melt like getting really complicated
with some of the security rules.

106
00:06:52.880 --> 00:06:54.690
So, we have these in place.

107
00:06:55.980 --> 00:07:00.459
We'll let them update right
now if they are logged in.

108
00:07:00.459 --> 00:07:03.600
We'll let them only
delete if it's their own.

109
00:07:03.600 --> 00:07:07.290
We do need to change
a few things real quick.

110
00:07:07.290 --> 00:07:10.223
Let's go ahead, we'll publish those.

111
00:07:10.223 --> 00:07:11.493
Let me go into my database.

112
00:07:11.493 --> 00:07:15.841
I'm just gonna delete these
documents cuz they all have

113
00:07:15.841 --> 00:07:18.535
this like garbage username here.

114
00:07:18.535 --> 00:07:20.430
So delete all of them.

115
00:07:20.430 --> 00:07:22.585
From the admin dashboard,
you can do whatever you want.

116
00:07:22.585 --> 00:07:24.457
Security rules don't apply to you, right?

117
00:07:24.457 --> 00:07:27.633
And that is also true on
any of the the server,

118
00:07:27.633 --> 00:07:30.725
I'll just call them
the server side code but

119
00:07:30.725 --> 00:07:36.050
the console is not necessarily server
side but it is privilege access.

120
00:07:36.050 --> 00:07:39.020
You're lambda functions can
also have privilege access,

121
00:07:39.020 --> 00:07:40.760
sorry your cloud functions.

122
00:07:40.760 --> 00:07:44.230
It can also have privilege access and
do those things as well.

123
00:07:44.230 --> 00:07:47.780
Or if you hold down your secret key and
run like a node process.

124
00:07:47.780 --> 00:07:50.160
You can also go ahead.

125
00:07:50.160 --> 00:07:53.250
You don't necessarily need these
permissions, your users do, right?

126
00:07:53.250 --> 00:07:56.067
There's always an escape hatchway,
you have super powers.

127
00:07:56.067 --> 00:07:58.100
You can do whatever you want.

