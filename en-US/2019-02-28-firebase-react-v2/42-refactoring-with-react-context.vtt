WEBVTT

1
00:00:00.000 --> 00:00:01.161
&gt;&gt; Speaker 1: We can see the posts.

2
00:00:01.161 --> 00:00:05.062
Now we get to delete some code.

3
00:00:05.062 --> 00:00:10.471
So I don't need to pass posts
into the post component anymore,

4
00:00:10.471 --> 00:00:15.063
which also means that in
the application component,

5
00:00:15.063 --> 00:00:20.161
I don't need,
&gt;&gt; Speaker 1: To

6
00:00:20.161 --> 00:00:21.480
subscribe to that anymore.

7
00:00:22.500 --> 00:00:25.620
Which means I don't need to
keep an application state,

8
00:00:25.620 --> 00:00:27.930
which means I don't need
to unsubscribe anymore.

9
00:00:29.570 --> 00:00:31.600
We do need to actually
unsubscribe from the auth still.

10
00:00:33.710 --> 00:00:36.855
Right, so
I can delete all of that post logic.

11
00:00:39.826 --> 00:00:41.810
&gt;&gt; Speaker 1: From
the application component.

12
00:00:41.810 --> 00:00:46.600
Now, any component that needs to post,
can get wrapped in that

13
00:00:46.600 --> 00:00:50.370
post context consumer, right,
which will pass the posts in.

14
00:00:51.780 --> 00:00:55.030
But we can do one better.

15
00:00:57.150 --> 00:01:02.082
You can see that even I tripped up on that
syntax a little bit with the extra curly

16
00:01:02.082 --> 00:01:04.923
braces because this is
what we call the render

17
00:01:04.923 --> 00:01:09.591
prop pattern which is the child prop
is a function that we pass stuff in to.

18
00:01:09.591 --> 00:01:14.169
Right, and I had a bug there because
I had an extra set of curly braces,

19
00:01:14.169 --> 00:01:15.889
stuff along those lines.

20
00:01:15.889 --> 00:01:20.868
In the kind of newest version of React,
we can actually

21
00:01:20.868 --> 00:01:25.752
hook into the context API and
make this even cleaner.

22
00:01:25.752 --> 00:01:29.750
So I can actually say,

23
00:01:31.546 --> 00:01:35.392
&gt;&gt; Speaker 1: const posts useContext,

24
00:01:35.392 --> 00:01:39.067
pull that in from React.

25
00:01:50.591 --> 00:01:52.375
&gt;&gt; Speaker 1: And
now I can take away this.

26
00:01:56.392 --> 00:01:58.359
&gt;&gt; Speaker 1: And
that bug I just created I can get rid of.

27
00:02:05.291 --> 00:02:08.070
&gt;&gt; Speaker 1: So this will actually
hook into the context API.

28
00:02:08.070 --> 00:02:13.760
It will grab me those posts, and
I can just use them right here.

29
00:02:13.760 --> 00:02:15.302
And now I can take this post component.

30
00:02:15.302 --> 00:02:17.270
I can put it anywhere in my application.

31
00:02:17.270 --> 00:02:20.120
It's hooked up into the Firebase state.

32
00:02:20.120 --> 00:02:23.031
Hooked, literally, that was not a pun.

33
00:02:23.031 --> 00:02:25.659
This is a react hook.

34
00:02:25.659 --> 00:02:26.860
Let's make sure it works, too.

35
00:02:28.030 --> 00:02:32.982
Cool, I can take this post component cuz
if you see in the application, this is it.

36
00:02:32.982 --> 00:02:35.860
It doesn't need to get anything
passed in from the outside world.

37
00:02:35.860 --> 00:02:38.952
I can just place this if I need
to move this to a sidebar,

38
00:02:38.952 --> 00:02:42.063
I can move it to a sidebar and
do whatever I want with it.

39
00:02:42.063 --> 00:02:45.285
It is hooked into the application
state using react hooks and

40
00:02:45.285 --> 00:02:47.442
that context API hooked up to Firebase.

41
00:02:47.442 --> 00:02:51.453
As stuff changes in Firebase,
those are passed into the component.

42
00:02:51.453 --> 00:02:53.485
Right, I no longer have to do
this thing where I'm passing

43
00:02:53.485 --> 00:02:54.530
everything down and around.

44
00:02:54.530 --> 00:02:59.960
So Firebase kind of exists in my
React app and it's there for us.

