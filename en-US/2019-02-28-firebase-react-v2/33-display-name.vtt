WEBVTT

1
00:00:00.305 --> 00:00:04.488
&gt;&gt; Steve Kinney: So when the user signs
up, we have this sign-up form, where they

2
00:00:04.488 --> 00:00:09.940
can put in a display name, and they can
put an email address and a password.

3
00:00:09.940 --> 00:00:12.999
Right now, this form doesn't do anything,
cuz it's not wired up,

4
00:00:12.999 --> 00:00:14.707
I think it actually clears stuff out.

5
00:00:14.707 --> 00:00:19.664
Yeah, all it does is empty out the state,
which is not super helpful,

6
00:00:19.664 --> 00:00:23.040
so let's jump in, and
let's implement this.

7
00:00:24.382 --> 00:00:29.446
&gt;&gt; Steve Kinney: So we've got the sign-up
form, and here we've got handleSubmit,

8
00:00:29.446 --> 00:00:34.528
and all handleSubmit does is, again,
sets the state back to empty.

9
00:00:34.528 --> 00:00:41.090
Seems legit, let's actually go ahead and
implement some of this.

10
00:00:41.090 --> 00:00:46.072
So we can grab the displayName, the email,
and the password off of the state.

11
00:00:48.479 --> 00:00:51.074
&gt;&gt; Steve Kinney: So email, password,

12
00:00:51.074 --> 00:00:55.412
displayName,
&gt;&gt; Steve Kinney: Is

13
00:00:55.412 --> 00:01:00.059
this.state,
&gt;&gt; Steve Kinney: And

14
00:01:00.059 --> 00:01:03.160
then we're gonna try to go ahead and
create a user.

15
00:01:04.370 --> 00:01:09.098
So everything in, not everything,
most things in Firebase are promise-based,

16
00:01:09.098 --> 00:01:11.945
so you could use a promise
chain of then and catch.

17
00:01:11.945 --> 00:01:15.510
We can also make this an async function,
and use async/await,

18
00:01:15.510 --> 00:01:19.880
which allows you to use just regular
old JavaScript try-catch blocks.

19
00:01:19.880 --> 00:01:21.878
So let's go ahead and try that one out.

20
00:01:21.878 --> 00:01:26.719
If we were better at our jobs, we probably
would have been error-handling a few other

21
00:01:26.719 --> 00:01:29.153
places as well, but what are you gonna do?

22
00:01:29.153 --> 00:01:36.965
So we'll say const, our new user
object is going to await auth.,

23
00:01:36.965 --> 00:01:41.290
gotta love that Visual Studio code,

24
00:01:41.290 --> 00:01:46.770
createUserWithEmailAddressAndPassword.

25
00:01:46.770 --> 00:01:49.909
That sounds like the one that I want,

26
00:01:49.909 --> 00:01:54.972
as you can see with IntelliSense,
it takes two arguments,

27
00:01:54.972 --> 00:02:00.566
an email address,
&gt;&gt; Steve Kinney: And a password,

28
00:02:00.566 --> 00:02:05.552
I have an email address and
a password from state,

29
00:02:05.552 --> 00:02:09.959
so I can pass those in,
email and password.

30
00:02:09.959 --> 00:02:14.010
You see, there's not really any
place to give it a display name, so

31
00:02:14.010 --> 00:02:17.087
we're gonna have to deal
with that in a little bit.

32
00:02:17.087 --> 00:02:20.730
And if we look at this IntelliSense,
it'll return a promise,

33
00:02:20.730 --> 00:02:25.150
that will be UserCredentials, just like
we got when we did the Google auth.

34
00:02:25.150 --> 00:02:29.118
All right, so we'll have that,

35
00:02:29.118 --> 00:02:34.362
I'm going to do a little
quick catch here for

36
00:02:34.362 --> 00:02:37.215
now, catch the error.

37
00:02:39.992 --> 00:02:43.592
&gt;&gt; Steve Kinney: I'll just, should we
console.error, or do you wanna alert it,

38
00:02:43.592 --> 00:02:45.150
what's everyone feeling?

39
00:02:46.968 --> 00:02:47.884
&gt;&gt; Steve Kinney: Not all at once,

40
00:02:47.884 --> 00:02:51.033
we're making important
architecture decisions here.

41
00:02:51.033 --> 00:02:53.105
&gt;&gt; Speaker 2: Console, [CROSSTALK] I
like it, there's a little yellow to it.

42
00:02:53.105 --> 00:02:54.106
&gt;&gt; Steve Kinney: You like-
&gt;&gt; Speaker 2: It's very chill,

43
00:02:54.106 --> 00:02:55.403
&gt;&gt; Steve Kinney: Console, now, this is-

44
00:02:55.403 --> 00:02:56.173
&gt;&gt; Speaker 2: I'm not too keen on it-

45
00:02:56.173 --> 00:02:57.663
&gt;&gt; Steve Kinney: We're catching error with

46
00:02:57.663 --> 00:02:59.739
console.error, at the very least.

47
00:03:03.421 --> 00:03:08.229
&gt;&gt; Steve Kinney: Yeah, we're good at this,
cool, and so this'll go ahead and

48
00:03:08.229 --> 00:03:15.470
create the user, it'll actually also log
them in, which will probably be enough.

49
00:03:15.470 --> 00:03:20.457
We're gonna see one option for
solving the display name issue, and

50
00:03:20.457 --> 00:03:23.792
then we'll see why it's not great,
[LAUGH].

51
00:03:23.792 --> 00:03:30.120
So I will get your hopes up, and then I
will bring them back down, all right?

52
00:03:30.120 --> 00:03:34.735
So we'll say user.updateProfile,
and you can see,

53
00:03:34.735 --> 00:03:39.161
I can update the displayName and
the photoURL here.

54
00:03:42.640 --> 00:03:44.840
&gt;&gt; Steve Kinney: We don't have a photoURL
yet, so we'll just go with displayName.

55
00:03:47.911 --> 00:03:52.559
&gt;&gt; Steve Kinney: So you'll go ahead and
sign up, and we'll be Bob Ross, sure,

56
00:03:52.559 --> 00:03:55.561
that seems like a decent email address.

57
00:03:58.590 --> 00:04:00.340
&gt;&gt; Steve Kinney: It does insist
on six characters, by default.

58
00:04:07.000 --> 00:04:12.033
&gt;&gt; Steve Kinney: So we set the display
name, but there's no display name here.

59
00:04:12.033 --> 00:04:16.608
And this kinda makes sense, if you think
really hard about it, or also known as,

60
00:04:16.608 --> 00:04:21.300
it doesn't make any sense until you
stare at it, wondering what's wrong.

61
00:04:21.300 --> 00:04:25.233
And then eventually, it comes to you as
you're taking a walk down the street,

62
00:04:25.233 --> 00:04:25.957
a week later.

63
00:04:25.957 --> 00:04:32.840
Which is, with that first await,
we created the user, which logged them in.

64
00:04:32.840 --> 00:04:35.531
Which triggered auth state change,

65
00:04:35.531 --> 00:04:40.315
which caused us to be logged in,
and then we set the display name.

66
00:04:40.315 --> 00:04:43.013
So if I refresh the page,

67
00:04:43.013 --> 00:04:49.061
now we have a display name in there,
right, not great.

68
00:04:49.061 --> 00:04:53.264
We can solve some of this in, and
we could either update some state with it,

69
00:04:53.264 --> 00:04:56.626
there's a whole bunch of
different options that we can do.

70
00:04:56.626 --> 00:05:00.232
I'm gonna solve this by creating
that user profile anyway, which is,

71
00:05:00.232 --> 00:05:02.770
I'm gonna sit there, and
start setting things.

72
00:05:02.770 --> 00:05:07.091
And create a user profile that that will
then hook into the real-time facilities of

73
00:05:07.091 --> 00:05:10.484
Cloud Firestore, so I won’t have
to worry about any of this, but

74
00:05:10.484 --> 00:05:12.354
that is just a thing to think about.

75
00:05:12.354 --> 00:05:15.971
Which is, auth state change is not
the same as Cloud Firestore, which is for

76
00:05:15.971 --> 00:05:17.283
every change to that user.

77
00:05:17.283 --> 00:05:21.768
It’s only gonna be when they transition
from logged-out to logged-in, or

78
00:05:21.768 --> 00:05:23.780
from logged-in to logged-out.

79
00:05:23.780 --> 00:05:29.481
Which is really what it says on the tin,
so that's totally surprising,

80
00:05:29.481 --> 00:05:33.508
that it does that, but
that is absolutely a thing.

81
00:05:33.508 --> 00:05:36.140
So if we go here, we go to Authentication.

82
00:05:36.140 --> 00:05:39.066
The only thing we can do
in the Firebase console is,

83
00:05:39.066 --> 00:05:43.366
we can actually see all of the users
that have signed into the application.

84
00:05:43.366 --> 00:05:48.155
You can go ahead and add, only,
if you are using email address and

85
00:05:48.155 --> 00:05:52.698
password, you can go ahead and
create users manually, too.

86
00:05:52.698 --> 00:05:55.251
You can also go ahead here,
and you can see,

87
00:05:55.251 --> 00:05:58.570
you can reset passwords,
disable and delete accounts.

88
00:05:58.570 --> 00:06:00.579
So you don't have to build
that functionality yourself,

89
00:06:00.579 --> 00:06:01.481
you kinda get it for free.

