WEBVTT

1
00:00:00.230 --> 00:00:04.699
&gt;&gt; Steve Kinney: What I want you to do is,

2
00:00:04.699 --> 00:00:10.289
seems kind of crazy and nuts.

3
00:00:10.289 --> 00:00:15.535
But all we did was really take out
a lot of the code from application and

4
00:00:15.535 --> 00:00:17.820
move it to a new file, right?

5
00:00:17.820 --> 00:00:22.036
The biggest and scariest part is
in the render component where we,

6
00:00:22.036 --> 00:00:26.590
well first,
we created this post context up here.

7
00:00:26.590 --> 00:00:32.090
The rest of this is pretty much
taken from Application.jsx.

8
00:00:32.090 --> 00:00:36.050
The biggest difference is right
here in this lines, right,

9
00:00:36.050 --> 00:00:38.720
where we take the children from the props.

10
00:00:38.720 --> 00:00:43.859
And we use this very scary
PostsContext.Provider and

11
00:00:43.859 --> 00:00:47.440
give it the value, and the children.

12
00:00:47.440 --> 00:00:51.000
And in index.js,
we wrap it in the PostProvider.

13
00:00:51.000 --> 00:00:55.950
What I would challenge you to try is
get a little bit of muscle memory and

14
00:00:55.950 --> 00:00:57.674
try to do the same thing with
the UserProvider, right?

15
00:00:59.150 --> 00:01:04.913
So it's gonna be the same ripping code
out of application into a new file.

16
00:01:04.913 --> 00:01:06.340
I'm gonna push this code up.

17
00:01:06.340 --> 00:01:12.610
The biggest changes are this
createContext up here from React.

18
00:01:15.210 --> 00:01:19.810
In the render method, we take the
children, and we pass the children into

19
00:01:19.810 --> 00:01:23.770
a PostContext.Provider that has
the value from the application state.

20
00:01:23.770 --> 00:01:27.540
So it's basically pulling a lot of the
logic that live at the top of our tree and

21
00:01:27.540 --> 00:01:31.690
making it modular so that we can use
it anywhere within our application.

