WEBVTT

1
00:00:00.180 --> 00:00:04.050
And so we have executed hard hat test.

2
00:00:05.230 --> 00:00:07.140
We can see that it's it's passing.

3
00:00:07.140 --> 00:00:09.340
This is fantastic, right?

4
00:00:09.340 --> 00:00:10.500
And let's go down.

5
00:00:10.500 --> 00:00:13.180
So we saw this fantastic.

6
00:00:13.180 --> 00:00:15.900
We tested the method we actually
did get the string out.

7
00:00:15.900 --> 00:00:17.621
We saw that it was working and

8
00:00:17.621 --> 00:00:21.580
just to prove to ourselves that
we're not just making things up.

9
00:00:21.580 --> 00:00:22.870
Let us go over here.

10
00:00:22.870 --> 00:00:29.200
And let us go hello, front end masters and
then rerun our test.

11
00:00:29.200 --> 00:00:33.997
And what we are gonna see is that it now
fails because we were expecting hello

12
00:00:33.997 --> 00:00:37.820
world so we really genuinely
are talking to this contract.

13
00:00:37.820 --> 00:00:39.760
There is no smoke and
mirrors at this point.

14
00:00:39.760 --> 00:00:44.221
We are talking to this contract we have
deployed it we have executed a function on

15
00:00:44.221 --> 00:00:47.617
it but there's probably some
questions about this I think we

16
00:00:47.617 --> 00:00:52.080
kind of answered a lot of the questions
right now is there any specific questions

17
00:00:52.080 --> 00:00:55.772
that we want to go over that someone
has about this process so far.

18
00:00:55.772 --> 00:00:59.051
My question is did it create
like some sort of test network.

19
00:00:59.051 --> 00:01:01.190
&gt;&gt; Yes.
&gt;&gt; How does that work?

20
00:01:01.190 --> 00:01:02.800
&gt;&gt; So did we create a test network?

21
00:01:02.800 --> 00:01:03.990
What just happened there?

22
00:01:03.990 --> 00:01:07.880
Well, good thing it leads into the right
the next thing so what just happened?

23
00:01:07.880 --> 00:01:09.800
What did we actually do there?

24
00:01:09.800 --> 00:01:15.040
Now I have explained some of the things
about how we let's see where are you?

25
00:01:15.040 --> 00:01:15.620
Hello World?

26
00:01:15.620 --> 00:01:16.950
Yes, I didn't add that to that.

27
00:01:16.950 --> 00:01:17.800
There we go.

28
00:01:18.840 --> 00:01:23.271
We didn't like I explained how this works
I explained how these things kind of

29
00:01:23.271 --> 00:01:27.320
work but notice a,
that we now had a function called Hello.

30
00:01:27.320 --> 00:01:31.676
How did we get that generated function
because that's the name of the function

31
00:01:31.676 --> 00:01:36.165
we use on our contract obviously that is
a proxy function uses all the information

32
00:01:36.165 --> 00:01:40.257
that I showed you from here to generate
proxy functions here that actually

33
00:01:40.257 --> 00:01:42.490
communicate with the network.

34
00:01:42.490 --> 00:01:44.980
But on top of that,
where was this network at?

35
00:01:44.980 --> 00:01:49.524
Well, one of the beautiful reasons why
I love Hardhats so much is when you run

36
00:01:49.524 --> 00:01:54.730
a test file it actually will create it
will launch a kind of a private network.

37
00:01:54.730 --> 00:01:56.453
Run your test take down the network.

38
00:01:56.453 --> 00:02:00.079
So you just get this quick a femoral
network that gets destroyed and

39
00:02:00.079 --> 00:02:02.291
or built and destroyed really quickly.

40
00:02:02.291 --> 00:02:05.711
So that way you don't have to worry about
state you don't have to worry about

41
00:02:05.711 --> 00:02:08.865
anything persisting you don't have
to worry about any kind of outside

42
00:02:08.865 --> 00:02:11.340
environmental factors that
will make your test fail?

43
00:02:11.340 --> 00:02:14.860
Because nothing's worse than a test
that relies on some network data.

44
00:02:14.860 --> 00:02:17.000
Because every now and then it breaks.

45
00:02:17.000 --> 00:02:20.570
People are asking you why it turns out,
had nothing to do with you.

46
00:02:20.570 --> 00:02:25.582
So, that is what effectively has
happened here is we are able to

47
00:02:25.582 --> 00:02:30.611
communicate with a network that
existed for a moment and left.

48
00:02:30.611 --> 00:02:32.970
So let's do this again.

49
00:02:32.970 --> 00:02:37.124
But let's instead of writing a test,
let's write a deployment script,

50
00:02:37.124 --> 00:02:40.340
meaning we're gonna actually
deploy this to a network.

51
00:02:42.190 --> 00:02:44.743
Like a real network,
not a fake network, but

52
00:02:44.743 --> 00:02:47.610
like a real network as real as it gets.

53
00:02:47.610 --> 00:02:52.117
So let's go into our route and let's
create a directory called Scripts inside

54
00:02:52.117 --> 00:02:56.484
of scripts let's create a deploy dash
Hello, whatever you want to name it,

55
00:02:56.484 --> 00:03:00.120
just some typescript file
that is comfortable for you.

56
00:03:00.120 --> 00:03:03.929
And then of course, at the top of the
TypeScript file, we put in that same nomic

57
00:03:03.929 --> 00:03:08.480
labs because I just like really nice auto
completion without a bunch of complaining.

58
00:03:08.480 --> 00:03:12.589
Now today we'll probably be putting
in some amount of TS ignores and

59
00:03:12.589 --> 00:03:16.768
if about 50% of the time I do that,
it's actually incorrect and,

60
00:03:16.768 --> 00:03:21.190
Typescripts helping me, but
we'll see what happens here.

61
00:03:21.190 --> 00:03:21.810
All right.
So there we go.

62
00:03:21.810 --> 00:03:26.480
We have our ethers kind of
additional functions added.

63
00:03:26.480 --> 00:03:29.890
So now we just need the import
ethers from Hardhat.

64
00:03:29.890 --> 00:03:34.519
Again just as before and let's create
an async function called Deploy and

65
00:03:34.519 --> 00:03:38.350
inside of here let's deploy
our Hello World contract.

66
00:03:38.350 --> 00:03:42.750
Now I could just copy it from our test but
just because it's really

67
00:03:42.750 --> 00:03:47.080
good to do something a few
times let's just rewrite that.

68
00:03:47.080 --> 00:03:54.420
So first we get the Helloworld contract
equals await ethers get contract factory.

69
00:03:54.420 --> 00:03:58.419
And then the name of your contract, not
the name of the file that it's in the name

70
00:03:58.419 --> 00:04:02.060
of the contract once you've done that,
and make sure you also await it,

71
00:04:02.060 --> 00:04:04.520
because it's reading
something from the disk.

72
00:04:04.520 --> 00:04:05.623
So it's asyc.

73
00:04:05.623 --> 00:04:10.371
Next we actually create
the contract itself by

74
00:04:10.371 --> 00:04:15.364
calling helloworld.deploy and
then we wait for

75
00:04:15.364 --> 00:04:19.759
it to be deployed await hello.deployed.

76
00:04:19.759 --> 00:04:23.240
And once we do that let's just
return the Hellocontract.

77
00:04:23.240 --> 00:04:24.060
There we go.

78
00:04:24.060 --> 00:04:26.660
I haven't put any return types and
all that.

79
00:04:26.660 --> 00:04:28.980
That's for production based code.

80
00:04:28.980 --> 00:04:30.860
We're not doing production
based code here.

81
00:04:30.860 --> 00:04:34.540
So now we're just going to
deploy the Hello World contract.

82
00:04:34.540 --> 00:04:37.448
Let's create a second function
we'll call out say hello,

83
00:04:37.448 --> 00:04:40.400
right and it's going to take
in the Hello World contracts.

84
00:04:40.400 --> 00:04:43.367
And they'll simply go, wait, hello I
could have done this in the first one,

85
00:04:43.367 --> 00:04:45.250
but it's kind of nice
to separate them out.

86
00:04:45.250 --> 00:04:46.660
We'll use it more often.

87
00:04:46.660 --> 00:04:47.710
A wait, hello, hello.

88
00:04:47.710 --> 00:04:51.190
And then of course go console dot log,
say hello.

89
00:04:52.230 --> 00:04:53.560
And then there we go.

90
00:04:53.560 --> 00:04:55.360
Two spaces, one space.

91
00:04:55.360 --> 00:04:56.460
Beautiful.

92
00:04:56.460 --> 00:04:59.988
And then of course at the very bottom,

93
00:04:59.988 --> 00:05:04.304
we're simply gonna go
deploy then say hello.

94
00:05:04.304 --> 00:05:06.320
So, we do each one of those at a time.

95
00:05:06.320 --> 00:05:08.500
Now, notice typescripts kinda
complaining right here.

96
00:05:08.500 --> 00:05:10.750
We're gonna have some implicit anys.

97
00:05:10.750 --> 00:05:12.720
It's just gonna happen from time to time.

98
00:05:12.720 --> 00:05:15.470
I'll leave this up here for a moment so
everyone can get caught up.

99
00:05:15.470 --> 00:05:19.010
But notice we're doing the exact
same thing we did in the test.

100
00:05:19.010 --> 00:05:21.420
We get the contract factory.

101
00:05:21.420 --> 00:05:25.543
It's not a contract itself it just
contains all the information it needs to

102
00:05:25.543 --> 00:05:27.440
deploy it to a network.

103
00:05:27.440 --> 00:05:29.800
We call this convenience
function called deploy.

104
00:05:29.800 --> 00:05:34.132
It's going to build up a JSON request

105
00:05:34.132 --> 00:05:39.036
that it's gonna JSON our RPC there we go.

106
00:05:39.036 --> 00:05:39.850
I was like, wait a second.

107
00:05:40.850 --> 00:05:43.870
It's gonna RPC it over to some network.

108
00:05:43.870 --> 00:05:46.630
That network will then
begin the transaction.

109
00:05:46.630 --> 00:05:50.051
When it's done doing enough
confirmations on that network,

110
00:05:50.051 --> 00:05:53.472
we'll be considered deployed,
we'll return this out, and

111
00:05:53.472 --> 00:05:56.470
then now we'll actually
execute a function on it.

112
00:05:56.470 --> 00:06:00.917
Now, remember the extra function we're
calling right here is the literal function

113
00:06:00.917 --> 00:06:01.991
that is right here.

114
00:06:01.991 --> 00:06:06.666
Is just a proxy via JavaScript where
it does a request out to the network

115
00:06:06.666 --> 00:06:11.422
the network will then execute that
request it will send back the results

116
00:06:11.422 --> 00:06:15.090
we'll get back the results and
boom we're good to go.

117
00:06:15.090 --> 00:06:20.260
In that's like in your head, that's how
you can draw all the boxes and arrows.

118
00:06:20.260 --> 00:06:22.245
Cause that's just the easiest
way to think about it,

119
00:06:22.245 --> 00:06:24.510
is try to relate it to things
you already understand.

120
00:06:24.510 --> 00:06:28.050
It's just like ,any sort of
API you've written before.

121
00:06:28.050 --> 00:06:29.500
All right, so there we go.

122
00:06:29.500 --> 00:06:34.850
So now we should be able to go NPX,
hard hat run scripts.

123
00:06:34.850 --> 00:06:39.471
Deploy then we're gonna go network
local host we're gonna just run

124
00:06:39.471 --> 00:06:43.132
it locally right we're going
to tell it where to run.

125
00:06:43.132 --> 00:06:47.290
So I'll let this sit up for one second
as everyone gets caught up this is very

126
00:06:47.290 --> 00:06:51.920
important if you don't do this,
it's gonna use that ephemeral network.

127
00:06:51.920 --> 00:06:55.637
And this is where you can also replace
the word local host, say with Rank B,

128
00:06:55.637 --> 00:06:59.413
Main Net, any of the other networks that
do exist and you will actually go and

129
00:06:59.413 --> 00:07:00.420
deploy it on there.

130
00:07:00.420 --> 00:07:01.813
But of course, at that point,

131
00:07:01.813 --> 00:07:04.990
you need a theorem on those networks
to be able to deploy stuff.

132
00:07:04.990 --> 00:07:10.182
So for now, we'll just do it to our local
net and when I press enter what happens?

133
00:07:10.182 --> 00:07:13.133
Well of couse it fails because we have

134
00:07:13.133 --> 00:07:18.085
an implicit any that's it my guess
right off the RIP yep okay so

135
00:07:18.085 --> 00:07:23.720
I probably should have you know
probably some TS config to avoid that.

136
00:07:23.720 --> 00:07:26.880
So let's just have a quick TS
ignore I believe that is correct.

137
00:07:26.880 --> 00:07:31.120
And then we can redo this and
then now it should fail properly.

138
00:07:31.120 --> 00:07:33.410
There we go.
We've properly failed this time.

139
00:07:33.410 --> 00:07:37.910
So what happens here it says
cannot connect to the network,

140
00:07:37.910 --> 00:07:41.670
local host so what's going on there.

141
00:07:41.670 --> 00:07:44.300
Well, we get this error.

142
00:07:44.300 --> 00:07:47.202
What is the cloud,
it's just someone else's computer,

143
00:07:47.202 --> 00:07:51.030
you've specified someone else's
computer as your own computer.

144
00:07:51.030 --> 00:07:54.730
So therefore,
we need our own network on this computer.

145
00:07:54.730 --> 00:07:59.151
So let's go apx hard hat node,
it will deploy a Ethereum

146
00:07:59.151 --> 00:08:04.310
network on your local computer
that you will be able to run.

147
00:08:04.310 --> 00:08:08.790
And t has a bunch of accounts already
created for you that each have 10,000 ETH

148
00:08:08.790 --> 00:08:12.438
your rich time to retire and
now you can interact with this network.

149
00:08:12.438 --> 00:08:17.794
So let's open up a new terminal and
re-execute our deployments

150
00:08:17.794 --> 00:08:22.862
script now that we have a node
launched on our local machine.

151
00:08:22.862 --> 00:08:25.570
When we do that, you're gonna
see a couple things happen here.

152
00:08:25.570 --> 00:08:30.080
First, you're gonna see hello front and
masters which is quite fantastic.

153
00:08:30.080 --> 00:08:33.050
But then let me make sure I'm
going in with, okay, good.

154
00:08:33.050 --> 00:08:36.240
I'm going along my pre designed path here.

155
00:08:36.240 --> 00:08:38.163
If we go over to our node we launched,

156
00:08:38.163 --> 00:08:43.000
what you'll see is that there's actually
a couple transactions that happen here.

157
00:08:43.000 --> 00:08:46.450
Right?
The first one is an eth send transaction.

158
00:08:46.450 --> 00:08:49.060
It deploys a contract called hello world.

159
00:08:49.060 --> 00:08:50.910
This is our contract address.

160
00:08:50.910 --> 00:08:53.670
A contract address is no
different than a wallet address.

161
00:08:53.670 --> 00:08:55.480
It's just 20 bytes of data.

162
00:08:55.480 --> 00:08:56.998
You know zero through F.

163
00:08:56.998 --> 00:09:00.619
It says hey here's the transaction
ID here's who sent it.

164
00:09:00.619 --> 00:09:05.554
So who is this person that sent it well
let's just remember these last 42266

165
00:09:05.554 --> 00:09:10.720
let's go all the way up to the top and if
you look at the first account it's 2266.

166
00:09:10.720 --> 00:09:15.362
So they're using the test account
zero to be the one that's paying for

167
00:09:15.362 --> 00:09:17.496
the deployment of SED network.

168
00:09:17.496 --> 00:09:21.604
We'll go back down and then what else can
we grab, hey it was block number one it

169
00:09:21.604 --> 00:09:25.464
was the first thing executed on this
network and then you'll see that we do

170
00:09:25.464 --> 00:09:29.786
something different right here which is
we do an eth call it's not a transaction.

171
00:09:29.786 --> 00:09:34.344
You'll notice that there is no gas used,
there's no block number two,

172
00:09:34.344 --> 00:09:39.352
it simply doesn't eth call it calls out
to hello-world Hello from account zero

173
00:09:39.352 --> 00:09:44.432
to 2 the contract we just deployed aa3
you can see aa three here ,aa three here,

174
00:09:44.432 --> 00:09:48.842
one nice part about using this little
test network is that if you deploy

175
00:09:48.842 --> 00:09:53.284
a contract every first contract that
you deploy has the same address.

176
00:09:53.284 --> 00:09:57.395
Every one of these 20 private accounts
all have the same address because it's

177
00:09:57.395 --> 00:10:00.278
the same network being launched
every single time and so

178
00:10:00.278 --> 00:10:04.510
there is something nice about having those
things just be consistent so you can see

179
00:10:04.510 --> 00:10:08.680
them go okay yeah that's correct that's
what I was expecting it'll be even more

180
00:10:08.680 --> 00:10:12.346
convenient as we get into meta mask and
using things from the browser.

181
00:10:12.346 --> 00:10:13.780
So there we go.

182
00:10:13.780 --> 00:10:15.260
That is what happened.

183
00:10:15.260 --> 00:10:19.071
Does anyone have any questions about
kind of what happened, so far,

184
00:10:19.071 --> 00:10:23.288
because this is a bit more unusual
than your standard development, right?

185
00:10:23.288 --> 00:10:27.534
So we do exactly what we did in the test
world we get our contract factory or

186
00:10:27.534 --> 00:10:30.120
we get a contract factory
from Hello World.

187
00:10:30.120 --> 00:10:32.516
Remember that is the name
of your contract,

188
00:10:32.516 --> 00:10:35.380
not the name of the file
that contains the contract.

189
00:10:35.380 --> 00:10:38.550
We happen to name the same thing,
a bit confusing.

190
00:10:38.550 --> 00:10:40.200
Second, we deploy it.

191
00:10:40.200 --> 00:10:43.448
Third, we wait for it to be deployed,
then we return it,

192
00:10:43.448 --> 00:10:47.984
after that we can call functions on it
that exists on our contract because he, or

193
00:10:47.984 --> 00:10:49.770
a hardhat, or ethers.

194
00:10:49.770 --> 00:10:53.970
I think it's actually ethers does
this They use the contract ABI,

195
00:10:53.970 --> 00:10:58.845
which is inside that contract file that
was generated by Hardhat a uses that to

196
00:10:58.845 --> 00:11:03.871
generate methods on this contract object
that are just effectively proxies for

197
00:11:03.871 --> 00:11:06.140
what is on the chain.

198
00:11:06.140 --> 00:11:11.132
So somehow we haven't kind of gone over
that eths knows how to communicate to

199
00:11:11.132 --> 00:11:13.340
whatever chain we're going to.

200
00:11:13.340 --> 00:11:16.469
So somehow it did know
when were to deploy this,

201
00:11:16.469 --> 00:11:20.620
obviously some of the hints
are when we did our deployment.

202
00:11:20.620 --> 00:11:22.840
We did dash dash network, local host.

203
00:11:22.840 --> 00:11:25.430
So there's some extra information
obviously going on here.

204
00:11:25.430 --> 00:11:29.623
That Hardhat is providing two ethers
that we're currently not providing.

205
00:11:29.623 --> 00:11:33.123
We will have to kind of break
that facade here shortly but for

206
00:11:33.123 --> 00:11:37.673
now it just knows because of Hardhat and
so we're gonna be doing this a bunch so

207
00:11:37.673 --> 00:11:41.875
if you want to convenience function
this out you can now if you use Vim and

208
00:11:41.875 --> 00:11:46.425
it happens to be Neo Vim and you happen
to have one of the sweet plugins I built,

209
00:11:46.425 --> 00:11:49.576
you can extract function you
can call it foo and boom,

210
00:11:49.576 --> 00:11:54.290
look at that I got the bug all taken out,
you can call it async and there it goes.

211
00:11:54.290 --> 00:11:56.018
Look at that look at how that
just wonderfully worked.

212
00:11:59.023 --> 00:12:03.253
Okay, I mean I think it's cool,
you don't have to think it's cool but

213
00:12:03.253 --> 00:12:04.814
I think it's fantastic.

214
00:12:04.814 --> 00:12:09.000
Having almost as good of
tools as IntelliJ almost, and

215
00:12:09.000 --> 00:12:12.731
by almost I mean definitely
not as good of tools as

216
00:12:12.731 --> 00:12:19.190
IntelliJ Uses fun little
plugin called tree sitter,

217
00:12:19.190 --> 00:12:21.170
while we're waiting,
I assume, are we good to go?

218
00:12:23.190 --> 00:12:23.930
Awesome.
All right.

219
00:12:25.480 --> 00:12:26.430
So there we go.

220
00:12:26.430 --> 00:12:28.990
So let's continue on.

221
00:12:28.990 --> 00:12:30.490
So we're gonna go even deeper.

222
00:12:30.490 --> 00:12:35.220
I know we barely I feels like we
haven't explained a lot of things.

223
00:12:35.220 --> 00:12:38.696
We keep on moving on to new things which
is kind of hard to always do something new

224
00:12:38.696 --> 00:12:42.320
over and over again because you feel
like you don't quite understand it.

225
00:12:42.320 --> 00:12:44.070
You probably tell me not to do it.

226
00:12:44.070 --> 00:12:46.506
We got a question,
telling me not to do it.

227
00:12:47.972 --> 00:12:51.121
&gt;&gt; Are those private keys switched
out every time you run Hardhat so

228
00:12:51.121 --> 00:12:54.924
if you relaunch your app on your computer
is it a fresh set of keys each time or.

229
00:12:54.924 --> 00:13:00.830
No it's the same keys every time,
it's the same accounts every time.

230
00:13:00.830 --> 00:13:04.315
That's why you always get the same
contract address if you launch them in

231
00:13:04.315 --> 00:13:07.974
the same order because it's a network
that's fairly predictable it just is

232
00:13:07.974 --> 00:13:11.919
there's no outside influence that network
obviously can't be you know reach for

233
00:13:11.919 --> 00:13:15.979
I'm sure you could make it reach from the
outside but it's just effectively your own

234
00:13:15.979 --> 00:13:18.780
private instance of a network
starting at block zero and so

235
00:13:18.780 --> 00:13:21.350
they just precede it with 20 accounts.

236
00:13:21.350 --> 00:13:25.118
&gt;&gt; So if you have like a really
complicated smart contract does it

237
00:13:25.118 --> 00:13:27.225
cost more guests to execute that.

238
00:13:27.225 --> 00:13:30.280
&gt;&gt; We're gonna actually go over
quite a bit on gas but yes.

239
00:13:30.280 --> 00:13:34.292
This is where at some point I'll make
a small rant about JavaScript and

240
00:13:34.292 --> 00:13:39.256
about poor programming practices that take
place and why it's gonna be very difficult

241
00:13:39.256 --> 00:13:43.812
on Ethereum, if you have that mentality,
we'll get there shortly, but yes,

242
00:13:43.812 --> 00:13:47.960
Gas is extremely expensive and yes,
every last thing you do cost money,

243
00:13:47.960 --> 00:13:50.890
and you'll eventually see why cost so
much money.

