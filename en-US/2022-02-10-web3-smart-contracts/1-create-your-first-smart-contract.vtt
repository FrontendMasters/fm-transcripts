WEBVTT

1
00:00:00.064 --> 00:00:02.661
All right, so we're gonna just
get started right away and

2
00:00:02.661 --> 00:00:04.416
I want you to do these following steps.

3
00:00:04.416 --> 00:00:06.594
We need to make a directory where
we're gonna put everything.

4
00:00:06.594 --> 00:00:10.481
I'm gonna choose the name JPEG degens
because that just feels like just

5
00:00:10.481 --> 00:00:14.644
the right level, of what I wanna call
this so I'm gonna call it JPEG degens.

6
00:00:14.644 --> 00:00:19.427
Just go into the directory and
then we're going get init, yarn init,

7
00:00:19.427 --> 00:00:21.467
and then we're add hardhat.

8
00:00:21.467 --> 00:00:23.749
So you can do these however
you want to do these.

9
00:00:23.749 --> 00:00:27.154
I'm just gonna copy this,
paste those all in, and there we go.

10
00:00:27.154 --> 00:00:30.992
And now remember, whenever you're working
with a project that involves Node.

11
00:00:30.992 --> 00:00:35.270
One of the things that you know you're
doing right is when you use a lot of

12
00:00:35.270 --> 00:00:36.064
libraries.

13
00:00:36.064 --> 00:00:37.959
So the bigger our library project or

14
00:00:37.959 --> 00:00:41.950
the the bigger our Node modules folder
becomes, the more we're winning.

15
00:00:41.950 --> 00:00:45.959
So just remember that,
right now we've added some things.

16
00:00:45.959 --> 00:00:47.638
But I feel like we could have added more.

17
00:00:47.638 --> 00:00:51.495
This is kinda a weak attempt
at our very first addition.

18
00:00:51.495 --> 00:00:55.093
And so once you get these three
things in here, you have inited git,

19
00:00:55.093 --> 00:00:57.573
you have yarn going,
you have added hardhat.

20
00:00:57.573 --> 00:00:59.205
We need to execute hardhat.

21
00:00:59.205 --> 00:01:01.024
If you're not familiar with npx,

22
00:01:01.024 --> 00:01:04.423
it's like a co-utility with NPM
that came out not too long ago.

23
00:01:04.423 --> 00:01:07.092
Where it just effectively
adds to your path,

24
00:01:07.092 --> 00:01:09.562
the bin folder inside your Node modules.

25
00:01:09.562 --> 00:01:12.959
So you're able to call into the things
that you've just NPM installed.

26
00:01:12.959 --> 00:01:17.842
It's a nice little module so it also helps
prevent people globally installing things.

27
00:01:17.842 --> 00:01:19.930
All right, is everyone here?

28
00:01:19.930 --> 00:01:21.046
Has everyone made it to this point?

29
00:01:21.046 --> 00:01:27.877
Awesome, so let's go and let's create
an empty hardhat config dot JavaScript.

30
00:01:27.877 --> 00:01:33.804
Yes, dot, JavaScript, the lessor
of the friendly TypeScript nature.

31
00:01:33.804 --> 00:01:39.358
All right, so the typical structure
of smart contracts follows this.

32
00:01:39.358 --> 00:01:41.590
It's gonna have a contracts folder.

33
00:01:41.590 --> 00:01:43.875
This is where you're gonna
put all your solidity code.

34
00:01:43.875 --> 00:01:45.850
It's gonna have a scripts folder.

35
00:01:45.850 --> 00:01:47.894
This is where you put all
your deployment code.

36
00:01:47.894 --> 00:01:49.735
And then it's gonna have a test folder.

37
00:01:49.735 --> 00:01:52.735
And this is where you
put all your test code.

38
00:01:52.735 --> 00:01:56.367
You really do wanna try to keep this,
this kinda seems to be a standard.

39
00:01:56.367 --> 00:02:00.120
And Hardhat does some auto assuming,
like if you run, compile,

40
00:02:00.120 --> 00:02:04.693
it's gonna go through your contract folder
and compile each one of the files and

41
00:02:04.693 --> 00:02:08.262
pull out all the different
contracts you have named in there.

42
00:02:08.262 --> 00:02:13.096
Second, if you run npx hardhat test,
it's gonna go to your test folder and

43
00:02:13.096 --> 00:02:14.336
run through that.

44
00:02:14.336 --> 00:02:17.859
So it is kind of important
to keep the structure.

45
00:02:17.859 --> 00:02:20.175
The scripts thing, you could
probably rename it to what you want.

46
00:02:20.175 --> 00:02:24.501
But that just seems to be kinda
convention more than anything else.

47
00:02:24.501 --> 00:02:28.131
And HardHat is the tool we're gonna
be using for building and deploying.

48
00:02:28.131 --> 00:02:33.026
It adds a lot of really nice features
to a third party library called ethers.

49
00:02:33.026 --> 00:02:35.910
And it just makes life easy.

50
00:02:35.910 --> 00:02:37.820
So we're just gonna be
using that the whole time.

51
00:02:37.820 --> 00:02:40.590
There's some other ones,
there's truffle and stuff, but

52
00:02:40.590 --> 00:02:43.696
I find HardHat to be kind of
the completest solution out of them all.

53
00:02:43.696 --> 00:02:47.358
And I also really like testing,
I don't know about you but

54
00:02:47.358 --> 00:02:51.416
since I get everything first try
I usually don't need testing.

55
00:02:51.416 --> 00:02:54.883
But I do testing cuz I wanna show everyone
how important it really should be if you

56
00:02:54.883 --> 00:02:56.348
don't first try all the things.

57
00:02:56.348 --> 00:03:00.798
And lastly of course don't forget
the gitignore because honestly

58
00:03:00.798 --> 00:03:05.015
a gitignore is very important and
put in Node modules, right?

59
00:03:05.015 --> 00:03:06.688
You definitely want that in there or

60
00:03:06.688 --> 00:03:09.377
else your life will be hellish
if you try to open up stuff.

61
00:03:09.377 --> 00:03:10.134
All right, so

62
00:03:10.134 --> 00:03:14.443
the first thing we're gonna do is we're
gonna create the HelloWorld contract.

63
00:03:14.443 --> 00:03:18.428
It is a .sol, no it does not mean
shit out of luck, it means Solidity,

64
00:03:18.428 --> 00:03:21.284
which is the programming
language of Aetherium.

65
00:03:21.284 --> 00:03:23.570
And so
we're gonna create a contracts folder and

66
00:03:23.570 --> 00:03:26.088
we're gonna create a file
called helloworld.sol.

67
00:03:26.088 --> 00:03:29.216
You can call the file whatever you want,

68
00:03:29.216 --> 00:03:34.092
the file name has no meaning or
bearing on how it gets compiled.

69
00:03:34.092 --> 00:03:37.428
As long as it ends with .sol that's
the only thing you really need to do.

70
00:03:37.428 --> 00:03:42.329
So let's go back here,
create a nice folder called contracts,

71
00:03:42.329 --> 00:03:45.525
go into here, create HelloWorld.sol.

72
00:03:45.525 --> 00:03:47.725
It's kinda Java convention, right?

73
00:03:47.725 --> 00:03:52.328
You just name the file after
the primary item inside of it.

74
00:03:52.328 --> 00:03:57.632
And the very first thing you're gonna do
when you do a Solidity contract is you

75
00:03:57.632 --> 00:04:03.278
need to tell the compiler or you need to
tell Solidity, what compiler you expect.

76
00:04:03.278 --> 00:04:05.390
And so they do this pragma statement.

77
00:04:05.390 --> 00:04:09.488
Now for anyone that did some C++ and
Windows era,

78
00:04:09.488 --> 00:04:14.741
the pragma is kinda, it feels like
some sorta pre compiler step.

79
00:04:14.741 --> 00:04:19.811
That's effectively how I look at it so
I just say hey pragma solidity 080.

80
00:04:19.811 --> 00:04:22.090
I expect at least that compiler level,

81
00:04:22.090 --> 00:04:25.692
we're gonna put this at the top
of every one of our contracts.

82
00:04:25.692 --> 00:04:30.532
So you don't really have to understand
what it's doing other than it's kinda

83
00:04:30.532 --> 00:04:32.078
like a package dot JSON.

84
00:04:32.078 --> 00:04:34.564
It's just specifying which
version we want to use.

85
00:04:34.564 --> 00:04:38.090
After that we're gonna
go contract HelloWorld.

86
00:04:38.090 --> 00:04:42.900
So you can probably make
a quick analogy right away that

87
00:04:42.900 --> 00:04:46.780
a contract looks a lot like a class,
right?

88
00:04:46.780 --> 00:04:48.700
And really that's how it operates,
honestly.

89
00:04:50.230 --> 00:04:54.770
It's gonna be simply a state container
with some functions to mutate it.

90
00:04:54.770 --> 00:04:59.530
So it's effectively a class and it even
does contain some classlike semantics.

91
00:04:59.530 --> 00:05:04.647
It has a constructor that will be executed
only upon deploying to the network once.

92
00:05:04.647 --> 00:05:09.012
So every time you deploy your contract,
that constructor gets executed one time.

93
00:05:09.012 --> 00:05:12.800
So it does feel very analogous to classes,
but we're not even gonna do that.

94
00:05:12.800 --> 00:05:17.391
We're gonna type in function hello, and

95
00:05:17.391 --> 00:05:22.113
we're gonna do public, pure, returns,

96
00:05:22.113 --> 00:05:26.325
string memory, return HelloWorld.

97
00:05:26.325 --> 00:05:30.473
Now anyone that's familiar with
programming understands every single

98
00:05:30.473 --> 00:05:34.216
thing about what I've typed except for
the word pure and memory.

99
00:05:34.216 --> 00:05:37.210
Those two things are probably
your only questions you have.

100
00:05:37.210 --> 00:05:39.764
We will get to those,
those things will be answered.

101
00:05:39.764 --> 00:05:42.370
But it's good just to understand that,
right?

102
00:05:42.370 --> 00:05:46.543
I assume everybody understands that this
is a function hanging off the HelloWorld

103
00:05:46.543 --> 00:05:47.154
contract.

104
00:05:47.154 --> 00:05:52.800
Anyone can call it, it returns a string,
and that's the string that it returns.

105
00:05:52.800 --> 00:05:55.909
These two, we'll just put a pin in it,

106
00:05:55.909 --> 00:05:59.973
as that one guy said in that movie Bolt,
all right?

107
00:05:59.973 --> 00:06:03.800
So now that we have that,
we have finished our first contract.

108
00:06:03.800 --> 00:06:05.210
Pretty awesome, right?

109
00:06:05.210 --> 00:06:08.085
So I have a little link if anyone
just wants to copy and paste it,

110
00:06:08.085 --> 00:06:09.550
you can do it right there.

111
00:06:09.550 --> 00:06:11.753
We're gonna compile the contract now.

112
00:06:11.753 --> 00:06:16.336
So open up a new terminal, and
you can go npx hardhat compile and

113
00:06:16.336 --> 00:06:19.985
by doing that it's gonna
compile your contract.

114
00:06:19.985 --> 00:06:22.256
But first it's gonna do some resolving,
and

115
00:06:22.256 --> 00:06:25.643
it's gonna make sure it has
some information, apparently.

116
00:06:25.643 --> 00:06:29.705
I just realized that I'm executing
it in the wrong folder, jpg degens,

117
00:06:29.705 --> 00:06:31.579
I forgot to do that, there we go.

118
00:06:31.579 --> 00:06:35.276
And now npx hardhat compile.

119
00:06:35.276 --> 00:06:37.049
I wanted to make that mistake for you and

120
00:06:37.049 --> 00:06:39.213
you'll immediately get
this error probably.

121
00:06:39.213 --> 00:06:42.669
Now it's gonna say something along
the lines of solidity version pragma

122
00:06:42.669 --> 00:06:45.798
statement in these files do not
match any configured compilers.

123
00:06:45.798 --> 00:06:46.731
Why is that?

124
00:06:46.731 --> 00:06:48.596
Well, it's actually pretty simple.

125
00:06:48.596 --> 00:06:53.057
If you go to your hardhat.config,
you'll notice that your hardhat.config,

126
00:06:53.057 --> 00:06:56.218
which is the thing that drives
your hardhat experience.

127
00:06:56.218 --> 00:07:02.761
Specifies 073, so you get to specify
the exact compiler you want in hardhat.

128
00:07:02.761 --> 00:07:06.230
But your contracts get to
specify what they want to use.

129
00:07:06.230 --> 00:07:09.500
So we can't compile because we've
only specified a single version.

130
00:07:09.500 --> 00:07:12.360
So we're gonna actually do this,
we're gonna specify 810.

131
00:07:12.360 --> 00:07:14.670
That's the latest version.

132
00:07:14.670 --> 00:07:19.954
Unfortunately, the versions of Solidity
don't really respect semantic versioning.

133
00:07:19.954 --> 00:07:24.361
They added features and
they removed features in four to five.

134
00:07:24.361 --> 00:07:27.740
But they never do a major version
update when they completely remove API.

135
00:07:27.740 --> 00:07:30.942
So just remember every minor
version could be a surprise and

136
00:07:30.942 --> 00:07:34.538
you lose things, just as a warning,
it's a little unfortunate.

137
00:07:34.538 --> 00:07:39.527
So now if we go back and we compile,
we will compile with a single warning.

138
00:07:39.527 --> 00:07:43.119
Well, technically two warnings, but
you don't have to worry about that one.

139
00:07:43.119 --> 00:07:47.912
The thing that you can worry about
later is that we didn't put a license

140
00:07:47.912 --> 00:07:48.895
identifier.

141
00:07:48.895 --> 00:07:54.449
Technically, the first line of any
code should be a license identifier.

142
00:07:54.449 --> 00:07:58.223
I don't think that that's gonna really
give you much right now for today.

143
00:07:58.223 --> 00:08:02.602
But we will copy this, go back here,
open up our nice HelloWorld.

144
00:08:02.602 --> 00:08:07.090
And I can just put this in here and
put in MIT, right, there we go.

145
00:08:07.090 --> 00:08:09.561
And if I were to go back here and
compile, it goes away.

146
00:08:09.561 --> 00:08:11.006
Does that really help us today, no.

147
00:08:11.006 --> 00:08:13.757
So we're gonna always have that
warning every single time.

148
00:08:13.757 --> 00:08:14.365
Not a big deal.

