WEBVTT

1
00:00:00.100 --> 00:00:04.321
So, hopefully, this all makes sense and
you know what we should do?

2
00:00:04.321 --> 00:00:06.681
We should probably prove that
we've written this correctly.

3
00:00:06.681 --> 00:00:10.219
Because I've written this thing
about four times, now, and

4
00:00:10.219 --> 00:00:14.164
of those four times, I've gotten
it right first try every time, but

5
00:00:14.164 --> 00:00:17.250
it usually was my first try
the first time, one time.

6
00:00:17.250 --> 00:00:20.340
So, let's go over to our
nice little test file, and

7
00:00:20.340 --> 00:00:22.600
let's verify we've created a hero.

8
00:00:22.600 --> 00:00:26.248
Now, can anyone, off the top of your head,
cuz you've all done software,

9
00:00:26.248 --> 00:00:29.730
you've all done testing, what is
the hardest part about this testing?

10
00:00:32.140 --> 00:00:36.130
Can anyone tell me what part kind
of really throws the testing into,

11
00:00:36.130 --> 00:00:37.740
just really makes it crap?

12
00:00:39.400 --> 00:00:40.099
&gt;&gt; Random?

13
00:00:40.099 --> 00:00:41.654
&gt;&gt; Boom, randoms.

14
00:00:41.654 --> 00:00:43.770
Awesome job, that was very perceptive.

15
00:00:43.770 --> 00:00:47.450
So, randoms is what suck in testing,
right?

16
00:00:47.450 --> 00:00:48.871
Just totally the worst thing.

17
00:00:48.871 --> 00:00:50.733
So, let's get smart here.

18
00:00:50.733 --> 00:00:54.298
I'm gonna go up to random over here,
and I'm gonna add in the word virtual.

19
00:00:54.298 --> 00:00:58.940
You're gonna probably say C++,
I'm gonna say no, not C++.

20
00:00:58.940 --> 00:01:02.130
Then I'm gonna create
another file called TestHero.

21
00:01:02.130 --> 00:01:04.755
I'm gonna, of course,
do my very special pragma statement.

22
00:01:04.755 --> 00:01:08.221
I'm gonna, of course, import Hero.sol.

23
00:01:08.221 --> 00:01:15.470
I'm then gonna create a contract
called TestHero is Hero, right?

24
00:01:15.470 --> 00:01:19.140
Now it is this thing right here, right?

25
00:01:19.140 --> 00:01:22.427
And then I'm gonna go like this,
public, well, actually,

26
00:01:22.427 --> 00:01:24.400
why do that when I can just jump here.

27
00:01:24.400 --> 00:01:31.364
Copy this, and jump back here and I'm
gonna add the word override, all right?

28
00:01:31.364 --> 00:01:36.658
And I'm gonna go return random,
then we have function

29
00:01:36.658 --> 00:01:42.078
setRandom(uint r), boom boom,
public random = r.

30
00:01:42.078 --> 00:01:44.950
Go up top, uint random, bam.

31
00:01:44.950 --> 00:01:53.340
We now have a test class in which we can
set the random nature to our above class.

32
00:01:53.340 --> 00:01:57.210
So, when you do the VRF stuff,
you can do the exact same thing.

33
00:01:57.210 --> 00:02:01.131
You have your leaf class,
your final class in your inheritance tree,

34
00:02:01.131 --> 00:02:04.700
contain all the code to interact
with the random nature.

35
00:02:04.700 --> 00:02:09.643
But then you can create a test class below
it that actually overrides those two

36
00:02:09.643 --> 00:02:14.420
random functions and
provides an off chain testing solution.

37
00:02:14.420 --> 00:02:18.165
So, that way, you don't have to try to
get VRF launched into your local network,

38
00:02:18.165 --> 00:02:19.705
which would just be a nightmare.

39
00:02:19.705 --> 00:02:22.412
Or, here,
when we're using kind of pseudo random,

40
00:02:22.412 --> 00:02:26.741
kind of our own little fake random, we can
still do the exact same thing, except, for

41
00:02:26.741 --> 00:02:29.534
now with our tests,
we can have predictable results.

42
00:02:29.534 --> 00:02:32.412
This is beautiful and fantastic.

43
00:02:32.412 --> 00:02:34.100
It makes life much, much better.

44
00:02:34.100 --> 00:02:37.430
So, I'm very, very happy that Solidity
does provide a way to override functions.

45
00:02:37.430 --> 00:02:40.331
And, in general, this is actually
a pretty nice little test practice

46
00:02:40.331 --> 00:02:43.330
to be able to have a class that's
separated out from your main class, and

47
00:02:43.330 --> 00:02:45.165
which adds in some extra testing features.

48
00:02:45.165 --> 00:02:47.127
So, that way,
your tests don't have to suck.

49
00:02:47.127 --> 00:02:51.220
Cuz or else, we're gonna have to just
really it'd be very, very difficult.

50
00:02:51.220 --> 00:02:53.412
We could technically run the tests,

51
00:02:53.412 --> 00:02:58.443
find out what the random numbers are all
generated, workout all the math, do that.

52
00:02:58.443 --> 00:03:02.331
But if we accidentally add a test in
between, all those numbers change, right?

53
00:03:02.331 --> 00:03:05.180
You'd actually have to have
the order in which your tests run,

54
00:03:05.180 --> 00:03:07.072
be the order in which you get your random.

55
00:03:07.072 --> 00:03:08.555
It would just be awful.

56
00:03:08.555 --> 00:03:09.988
And then I also use timestamps, so,

57
00:03:09.988 --> 00:03:13.194
we'd have to make sure that the timestamp
somehow is exactly what we want it to be.

58
00:03:13.194 --> 00:03:14.743
It would [SOUND].

59
00:03:14.743 --> 00:03:16.295
So, let's go back here.

60
00:03:16.295 --> 00:03:20.144
I have this, we've overridden it,
so, now let's go to our test.

61
00:03:20.144 --> 00:03:23.707
I think that this last part will
be the most interesting of it all.

62
00:03:23.707 --> 00:03:25.519
So, first, let's go in here,

63
00:03:25.519 --> 00:03:29.155
let's make sure we have enough
money when we generate our hero.

64
00:03:29.155 --> 00:03:29.878
So, there we go.

65
00:03:29.878 --> 00:03:36.165
We have enough money to generate our hero,
and then we go like this, const h = this.

66
00:03:36.165 --> 00:03:40.140
And I'm also doing like this, const hero,
I'm gonna shadow this thing out,

67
00:03:40.140 --> 00:03:41.176
await createHero.

68
00:03:41.176 --> 00:03:45.153
Just so I wanna make sure that
there's no other information in here.

69
00:03:45.153 --> 00:03:49.898
Plus, if this thing gets executed, the
above test up here will just fail, right?

70
00:03:49.898 --> 00:03:51.617
Because all of a sudden,
there's a hero there.

71
00:03:51.617 --> 00:03:54.660
So, we gotta make sure that we don't
accidentally pollute any extra data.

72
00:03:54.660 --> 00:03:55.780
So, let's do this.

73
00:03:55.780 --> 00:04:00.050
We've created our hero and I just realized
we don't assign it, that is naughty.

74
00:04:00.050 --> 00:04:07.745
Now we go like this, const heroes = await
hero.createHero, and let's plus in 0.

75
00:04:07.745 --> 00:04:08.697
I wanna be a mage.

76
00:04:08.697 --> 00:04:10.615
Mages are always the best at Diablo II.

77
00:04:10.615 --> 00:04:12.942
Ice mage,
it was awesome better than a hammered in.

78
00:04:12.942 --> 00:04:16.878
Someone in [INAUDIBLE] would go,
the robot that's all I ever did talk.

79
00:04:16.878 --> 00:04:20.525
But we have our heroes and
we just need the first one.

80
00:04:20.525 --> 00:04:23.270
Cuz the first one should be the one
we just got done generating, correct?

81
00:04:24.370 --> 00:04:28.687
Now, before I go on, should I allow us for
some time to get caught up?

82
00:04:28.687 --> 00:04:29.623
Do people need a moment?

83
00:04:29.623 --> 00:04:31.452
Do they need to see any of the code?

84
00:04:31.452 --> 00:04:35.753
So, two good questions, or
one really good question which is,

85
00:04:35.753 --> 00:04:40.705
if we use uint for stats, aren't we
kind of way overallocating, right?

86
00:04:40.705 --> 00:04:43.749
Yes, we fundamentally are overallocating.

87
00:04:43.749 --> 00:04:46.195
But, a, it makes the shifting very easy.

88
00:04:46.195 --> 00:04:47.793
Now, if I were to write this myself,

89
00:04:47.793 --> 00:04:50.255
I would probably tighten
up some of these items.

90
00:04:50.255 --> 00:04:52.976
But I'd want to go and
measure out the gas to make sure I'm

91
00:04:52.976 --> 00:04:56.960
actually doing the right thing,
cuz you still have to cast certain things.

92
00:04:56.960 --> 00:05:01.952
So, this stat, being a uint8, which we
could make it a uint8, I'd also have

93
00:05:01.952 --> 00:05:06.287
to go down here and make this and
make sure that it's actually a uint.

94
00:05:06.287 --> 00:05:08.757
Or we wouldn't want that to be a uint,

95
00:05:08.757 --> 00:05:13.563
we'd actually want our value to make
sure it at least has to be a uint32.

96
00:05:13.563 --> 00:05:16.756
And we could technically make
this value like a uint8, right?

97
00:05:16.756 --> 00:05:19.533
We could go in here and really kinda
tighten up all the bounds, but

98
00:05:19.533 --> 00:05:21.972
you really wanna make sure
you don't make any mistakes.

99
00:05:21.972 --> 00:05:27.312
And I don't know if it's any cheaper
gas-wise, using more or less physical,

100
00:05:27.312 --> 00:05:32.080
the memory side of things or
the stack level memory in a function.

101
00:05:32.080 --> 00:05:34.430
I don't know how much that affects gas.

102
00:05:34.430 --> 00:05:38.350
I haven't done enough research to really
give you a solid answer on that one.

103
00:05:38.350 --> 00:05:42.973
I do know that when it comes to
slot memory or storage memory,

104
00:05:42.973 --> 00:05:48.360
it is technically easier using
256 bits than it is using 8.

105
00:05:48.360 --> 00:05:50.562
There'll be some good reasons and
I'll show you why.

106
00:05:50.562 --> 00:05:51.960
So, we'll see.

107
00:05:51.960 --> 00:05:52.970
But, you use more memory.

108
00:05:52.970 --> 00:05:54.507
So, does it cost more in the long-run, or

109
00:05:54.507 --> 00:05:57.420
does it just cost more in
the short-term for the initial storage?

110
00:05:57.420 --> 00:05:58.920
We'll talk about all those things.

111
00:06:00.820 --> 00:06:03.570
All right, so, let's go back to testing.

112
00:06:03.570 --> 00:06:08.150
So, now, what I need to do, is I need to
determine what happens with our algorithm?

113
00:06:08.150 --> 00:06:13.578
So, what I'm gonna do is, I'm gonna go
like this, await hero.setRandom(69).

114
00:06:13.578 --> 00:06:17.781
Yes, we're still following
Lord Elan's requirements of always

115
00:06:17.781 --> 00:06:19.215
meaning at all times.

116
00:06:19.215 --> 00:06:26.930
And what I need is, I need to change hero,
not as a hero, but as a TestHero, right?

117
00:06:26.930 --> 00:06:31.039
It's the one that contains that
extra function, setRandom.

118
00:06:31.039 --> 00:06:37.162
That way, I can ensure that we produce
the same hero every single time.

119
00:06:37.162 --> 00:06:39.545
I think that that part is very,
very important.

120
00:06:39.545 --> 00:06:40.587
And so, there we go.

121
00:06:40.587 --> 00:06:44.792
So, now, we've guaranteed setRandom
will be our code number and

122
00:06:44.792 --> 00:06:48.184
heroes will produce the same
hero every single time.

123
00:06:48.184 --> 00:06:53.744
So, now, let's do this,
expect(await hero.getStrength,

124
00:06:53.744 --> 00:06:57.998
and then we can pass in,
let's call this thing h.

125
00:06:57.998 --> 00:06:59.626
Honestly, I just don't wanna
have to type it a bunch.

126
00:06:59.626 --> 00:07:05.544
There we go, pass in h to.equal, and
then that's what we gotta figure out.

127
00:07:05.544 --> 00:07:09.280
Is we need to go through each one of these
and figure out, what are we going to get?

128
00:07:09.280 --> 00:07:13.900
Cuz if we've done it correctly, we should
be able to work out these answers.

129
00:07:13.900 --> 00:07:15.600
So, let's do this.

130
00:07:15.600 --> 00:07:21.340
I'm gonna go, let's go echo, and I wanna
take, first, we need to select it out.

131
00:07:21.340 --> 00:07:24.040
So, all right, hold on, let me just jump
back here to make it easier for you.

132
00:07:24.040 --> 00:07:26.868
So, the first thing we need
to do is generate a position.

133
00:07:26.868 --> 00:07:31.111
So let's go echo 69 modulo 5.

134
00:07:31.111 --> 00:07:34.950
So, the first stat we're
selecting out is 4, right?

135
00:07:34.950 --> 00:07:37.780
It's the fourth item,
which happens to be magic.

136
00:07:37.780 --> 00:07:42.013
So, all right, so let's jump back here and
I'm gonna go here and go, magic,

137
00:07:42.013 --> 00:07:42.665
all right?

138
00:07:42.665 --> 00:07:44.730
Let's just make sure we
get this thing correctly.

139
00:07:44.730 --> 00:07:48.943
We're gonna jump back here, and
then I need to echo out our value,

140
00:07:48.943 --> 00:07:52.930
which we're gonna do a second
69 modulo 18, right?

141
00:07:52.930 --> 00:07:54.038
Then, I gotta add 1.

142
00:07:54.038 --> 00:07:56.098
So, 16 should be our value.

143
00:07:56.098 --> 00:07:59.920
If I've done this correctly,
16 should be our value.

144
00:07:59.920 --> 00:08:02.430
So, I'm gonna go in here and make it 16.

145
00:08:02.430 --> 00:08:06.680
And let's just run this thing to
make sure, did I get magic correct?

146
00:08:06.680 --> 00:08:09.321
First try,
have I added any sort of broken stuff up?

147
00:08:09.321 --> 00:08:11.106
I forgot to do one very important part.

148
00:08:11.106 --> 00:08:14.731
When you create an array,
you have to say where is it stored.

149
00:08:14.731 --> 00:08:16.477
It's stored in the function.

150
00:08:16.477 --> 00:08:19.704
Memory represents stack
memory is how I say it.

151
00:08:19.704 --> 00:08:22.089
I don't know if that's technically
where it's actually stored.

152
00:08:22.089 --> 00:08:23.888
Is it actually stored in a stack or

153
00:08:23.888 --> 00:08:27.500
is it stored on the heap as they
run their theorem virtual machine?

154
00:08:27.500 --> 00:08:29.370
That's not an answer, we have to do it,

155
00:08:29.370 --> 00:08:31.576
we can just think of it
like it's stack memory.

156
00:08:31.576 --> 00:08:34.380
A little bit easier to
abstract certain concepts.

157
00:08:34.380 --> 00:08:39.132
So, let's go and let's run our test
one more time, and there we go.

158
00:08:39.132 --> 00:08:40.723
So, now, let's see, what do we have?

159
00:08:40.723 --> 00:08:42.760
Invalid big number value, okay.

160
00:08:42.760 --> 00:08:44.517
Well, we've kinda screwed some things up.

161
00:08:44.517 --> 00:08:48.752
So, let's go in here and
let's not return uints, right?

162
00:08:48.752 --> 00:08:52.623
We can make this a little bit smaller so
we don't get these big values, right?

163
00:08:52.623 --> 00:08:57.334
We already know that a strength
will be between the values of 0 or

164
00:08:57.334 --> 00:09:01.974
18, we don't need to send
back 256 bits of data, right?

165
00:09:01.974 --> 00:09:05.721
So, I'm gonna just simply take uint and
replace it with, let's just do uint32.

166
00:09:05.721 --> 00:09:06.810
Does it really matter?

167
00:09:06.810 --> 00:09:07.640
Probably not.

168
00:09:07.640 --> 00:09:09.510
So, go, no, yes, no, yes,
no, yes, no, yes, no, yes.

169
00:09:09.510 --> 00:09:11.050
There we go.

170
00:09:11.050 --> 00:09:12.170
Quick little thing right there.

171
00:09:12.170 --> 00:09:12.980
There we go.

172
00:09:12.980 --> 00:09:14.770
We pass in the uint hero.

173
00:09:14.770 --> 00:09:16.550
We pass back a u32.

174
00:09:16.550 --> 00:09:19.130
Which means I do need to go like this.

175
00:09:19.130 --> 00:09:22.550
I'm gonna highlight all of these,
do a little bit of fancy stuff here.

176
00:09:22.550 --> 00:09:26.880
Let's do a hero.star.

177
00:09:26.880 --> 00:09:28.740
Yeah, yeah, do a fight and one-eyed Kirby.

178
00:09:28.740 --> 00:09:29.570
You'd know what that is.

179
00:09:29.570 --> 00:09:32.530
If you're doing my class,
you would know this by now.

180
00:09:32.530 --> 00:09:38.400
And then what I'm gonna do is,
I'm gonna go uint32(hero that, boom.

181
00:09:39.520 --> 00:09:40.860
Yes, this is beautiful.

182
00:09:42.190 --> 00:09:43.090
Look at that.

183
00:09:43.090 --> 00:09:43.920
There we go.

184
00:09:43.920 --> 00:09:46.610
So, I'm gonna cast the whole
thing into a uint32.

185
00:09:46.610 --> 00:09:47.600
And let's try it again.

186
00:09:47.600 --> 00:09:50.950
So, I'm gonna go back here and
execute this.

187
00:09:50.950 --> 00:09:53.308
This should avoid us having
to get a big number.

188
00:09:53.308 --> 00:09:55.061
And it's gonna say, hey,
you've done something wrong.

189
00:09:55.061 --> 00:09:58.870
And I technically do agree with it,
I have done something wrong.

190
00:09:58.870 --> 00:10:00.990
My find and
replace was actually not that awesome.

191
00:10:00.990 --> 00:10:04.340
I thought it was awesome, but
it turns out it wasn't that awesome.

192
00:10:04.340 --> 00:10:06.350
I forgot a parenthesis,
there we go [LAUGH].

193
00:10:06.350 --> 00:10:08.060
We're back in business here.

194
00:10:08.060 --> 00:10:11.009
I've put the uint,
I've cast everything to a uint32.

195
00:10:11.009 --> 00:10:13.348
So now I should be able to send it, and

196
00:10:13.348 --> 00:10:16.143
I should be able to get
the result we expect.

197
00:10:16.143 --> 00:10:17.230
It's taking a moment.

198
00:10:17.230 --> 00:10:18.140
There we go.

199
00:10:18.140 --> 00:10:20.210
Again, we're getting yet
another big number.

200
00:10:20.210 --> 00:10:23.910
Let's find out what's happening here, cuz
maybe this isn't what I expected it to be.

201
00:10:23.910 --> 00:10:26.218
So where are we, where are we?

202
00:10:26.218 --> 00:10:31.252
An invalid big number as argument,
let's see.

203
00:10:31.252 --> 00:10:33.260
Invalid big number value as argument.

204
00:10:33.260 --> 00:10:36.360
All right, so, what do we get here?

205
00:10:36.360 --> 00:10:37.977
So, am I doing this thing correctly?

206
00:10:37.977 --> 00:10:43.385
So, first, let's see, createHero,
should go out and get us a hero, right?

207
00:10:43.385 --> 00:10:47.480
My goodness, yes, I'm so silly,
people, I'm so sorry, look at this.

208
00:10:47.480 --> 00:10:49.506
I did create hero and then assign that.

209
00:10:49.506 --> 00:10:55.504
We know you don't get a value out
of a method you do an operation on,

210
00:10:55.504 --> 00:10:59.590
I have to then go h =
await hero.getHeroes.

211
00:10:59.590 --> 00:11:01.948
Remember, we gotta go get
my list of heroes, and

212
00:11:01.948 --> 00:11:03.855
then I'm gonna grab the first one out.

213
00:11:03.855 --> 00:11:06.384
This should properly give the answer.

214
00:11:06.384 --> 00:11:09.273
So what was actually,
effectively, happening here was,

215
00:11:09.273 --> 00:11:12.351
it was saying that the big number
we were passing was interact.

216
00:11:12.351 --> 00:11:14.130
We were passing a value of undefined.

217
00:11:14.130 --> 00:11:16.030
Of course,
that makes perfect sense, right?

218
00:11:16.030 --> 00:11:18.140
I was giving you a value of nothing.

219
00:11:18.140 --> 00:11:21.110
All right, okay, yeah,
that's a little bit silly of me.

220
00:11:21.110 --> 00:11:24.010
But it happens when you're in the weeds.

221
00:11:24.010 --> 00:11:26.520
There we go.
So, there we go, we have a new one.

222
00:11:26.520 --> 00:11:27.810
Please send more money.

223
00:11:27.810 --> 00:11:30.610
Well, again, I'm a fool,
I forgot to send money.

224
00:11:30.610 --> 00:11:32.980
Wow, I'm creating multiple heroes.

225
00:11:32.980 --> 00:11:34.952
There we go, that's my problem.

226
00:11:34.952 --> 00:11:35.580
Look at that.

227
00:11:35.580 --> 00:11:37.600
I created multiple heroes, fantastic.

228
00:11:37.600 --> 00:11:38.200
Let's do this.

229
00:11:40.180 --> 00:11:43.350
So, it turns out you can distract
me with a little bit of talking.

230
00:11:43.350 --> 00:11:44.280
But we got there.

231
00:11:45.710 --> 00:11:48.330
Awesome, we have a new invalid number.

232
00:11:48.330 --> 00:11:49.870
I've done it, somehow, again.

233
00:11:49.870 --> 00:11:52.036
So, let's find out what's happening.

234
00:11:52.036 --> 00:11:55.347
Let's print out our nice
little console.log(h).

235
00:11:55.347 --> 00:11:57.171
We should be getting back out our heroes.

236
00:11:57.171 --> 00:12:01.636
Perhaps, I've wrongly specified this,
perhaps we're not saving it to the chain.

237
00:12:01.636 --> 00:12:03.862
So, let's find out what's happening here.

238
00:12:03.862 --> 00:12:06.652
It's very easy to goof
these little things up.

239
00:12:06.652 --> 00:12:08.356
Here we go, let's print it out.

240
00:12:08.356 --> 00:12:10.100
What do we see here?

241
00:12:10.100 --> 00:12:13.010
Well, we see that I definitely am
getting a big number right here.

242
00:12:13.010 --> 00:12:15.290
So, I'm a little bit surprised
that we're not seeing that value.

243
00:12:16.620 --> 00:12:20.694
So, let's go back here and
I should be selecting out the 0th item,

244
00:12:20.694 --> 00:12:24.492
which should be a number that
is enough for them to handle.

245
00:12:24.492 --> 00:12:24.992
My [LAUGH].

246
00:12:26.580 --> 00:12:30.160
And so the problem was,
since I did this, what happens?

247
00:12:30.160 --> 00:12:34.705
Order of operations with JavaScript,
this thing returned a promise,

248
00:12:34.705 --> 00:12:38.480
I got the 0th index of a promise,
then I awaited it.

249
00:12:38.480 --> 00:12:41.100
Of course, that makes no sense, right?

250
00:12:41.100 --> 00:12:42.672
[LAUGH] Why would you do that?

251
00:12:42.672 --> 00:12:46.331
Good old fashioned order of operations,
right?

252
00:12:46.331 --> 00:12:48.389
All right, so here.

253
00:12:50.909 --> 00:12:54.250
Fantastic, beautiful, right?

254
00:12:54.250 --> 00:12:55.981
We now got that, there we go.

255
00:12:55.981 --> 00:12:58.170
Sorry about that, now we have this.

256
00:12:58.170 --> 00:13:00.160
We now have the magic,
we're ready to rock.

257
00:13:01.160 --> 00:13:06.120
So, now, we can do this again, but
we need to figure out the next stat.

258
00:13:06.120 --> 00:13:08.400
So, what happens right here?

259
00:13:08.400 --> 00:13:10.842
Well, length becomes 4, correct?

260
00:13:10.842 --> 00:13:13.700
But more so, something else happens.

261
00:13:13.700 --> 00:13:18.891
We swap out magic with whatever's
at the end of the array.

262
00:13:18.891 --> 00:13:20.644
Well, what's at the end of the array?

263
00:13:20.644 --> 00:13:21.973
Magic, so, does it really matter?

264
00:13:21.973 --> 00:13:23.444
No, cuz we're ignoring that number.

265
00:13:23.444 --> 00:13:25.855
So, we kinda got away with
our first one pretty easy.

266
00:13:25.855 --> 00:13:28.353
So, let's generate the next one.

267
00:13:28.353 --> 00:13:31.033
Let's go 69 modulo 4, which is 1.

268
00:13:31.033 --> 00:13:33.667
So, this time,
we're selecting out this stat.

269
00:13:33.667 --> 00:13:37.589
And then, of course,
we're gonna be doing 69 modulo 17,

270
00:13:37.589 --> 00:13:39.812
this time, which is 1 add 1, 2.

271
00:13:39.812 --> 00:13:42.660
So, we should have health of 2.

272
00:13:45.120 --> 00:13:49.869
That is what I am saying, FM health,

273
00:13:49.869 --> 00:13:53.400
we should see health of 2.

274
00:13:53.400 --> 00:13:54.972
Let's also draw our array.

275
00:13:54.972 --> 00:14:01.400
Cuz, remember, we had strength,
health, dexterity, intellect, magic.

276
00:14:01.400 --> 00:14:05.160
And then, the next round,
we set magic to be magic.

277
00:14:05.160 --> 00:14:07.990
And then we set our length to be 1 less.

278
00:14:07.990 --> 00:14:09.980
And then we selected out h.

279
00:14:09.980 --> 00:14:12.805
So, I should replace H.

280
00:14:12.805 --> 00:14:15.670
And then, really,
we're ignoring the last element.

281
00:14:15.670 --> 00:14:17.569
So, this is what our third
round should look like.

282
00:14:18.790 --> 00:14:22.080
But let's verify that we've done
things correctly, is health 2.

283
00:14:23.580 --> 00:14:26.230
I wanted to kinda work through this so
you can kinda see how this works.

284
00:14:28.550 --> 00:14:33.872
Let's see,
I just closed down my poor little node.

285
00:14:33.872 --> 00:14:40.350
Dang it, so, I don't wanna have
to source my privates again.

286
00:14:40.350 --> 00:14:41.000
So, there we go.

287
00:14:42.220 --> 00:14:43.770
It goes through and
validates that everything works.

288
00:14:43.770 --> 00:14:45.190
There we go, there we go.

289
00:14:45.190 --> 00:14:46.340
So, we're back up.

290
00:14:46.340 --> 00:14:47.955
I don't think I need to
keep going through this.

291
00:14:47.955 --> 00:14:51.627
I think everyone sees exactly where
I'm going with the remainder of this.

292
00:14:51.627 --> 00:14:55.301
But I just simply have to work through my
problem, figure out every single value.

293
00:14:55.301 --> 00:14:59.331
And I've created a test that
reliably creates the same hero,

294
00:14:59.331 --> 00:15:02.830
despite the actual program
creating random heroes.

