WEBVTT

1
00:00:00.130 --> 00:00:01.421
Let's build another contract.

2
00:00:01.421 --> 00:00:03.905
We're gonna build a small game okay,
very very small and

3
00:00:03.905 --> 00:00:07.269
by game I don't mean we're actually
gonna build a game we're actually gonna

4
00:00:07.269 --> 00:00:09.610
build like a little part of something,
okay.

5
00:00:09.610 --> 00:00:13.382
And really this is where I want to
actually use more complex types and

6
00:00:13.382 --> 00:00:15.210
do some more complex items.

7
00:00:15.210 --> 00:00:18.549
Now this, I didn't include the code
I can include the code, it just,

8
00:00:18.549 --> 00:00:20.850
I change it every time I type it.

9
00:00:20.850 --> 00:00:21.980
It's kind of unique.

10
00:00:21.980 --> 00:00:23.750
Try to follow along,
try to build it with me.

11
00:00:23.750 --> 00:00:27.230
Build it in a way that makes sense for
you and see how it goes.

12
00:00:27.230 --> 00:00:28.710
We'll keep it pretty defined.

13
00:00:28.710 --> 00:00:32.164
I'll introduce new concepts but
I always find the best way to

14
00:00:32.164 --> 00:00:36.240
learn of course is time in the saddle and
of course what is, the saddle?

15
00:00:36.240 --> 00:00:38.588
Or that's your ID and
the thing you want to write and

16
00:00:38.588 --> 00:00:42.590
of course I don't know if you know this
but I use vim by the way vim's fantastic.

17
00:00:42.590 --> 00:00:44.920
He should check out this car, okay.

18
00:00:44.920 --> 00:00:49.286
Anyway, so the idea is I love the ideas of
RPG's I don't really like playing them I

19
00:00:49.286 --> 00:00:50.780
just love the idea.

20
00:00:50.780 --> 00:00:52.900
They see it just seems so fantastic.

21
00:00:52.900 --> 00:00:56.420
So I wanna build something that
can generate random heroes.

22
00:00:56.420 --> 00:01:01.332
I want the user to be able to select their
class as a mage, a healer or a barbarian,

23
00:01:01.332 --> 00:01:05.620
I do not want classes to influence
how the stats are created.

24
00:01:05.620 --> 00:01:10.200
I wanna be paid of course,
0.05 ETH per hero created.

25
00:01:10.200 --> 00:01:13.550
I should be able to get all
the heroes that I have generated.

26
00:01:13.550 --> 00:01:15.910
Heroes should be stored on the chain.

27
00:01:15.910 --> 00:01:19.724
Stats are gonna be strength, health,
intellect, magic and dexterity,

28
00:01:19.724 --> 00:01:22.130
pretty classic RBG stats right there.

29
00:01:22.130 --> 00:01:25.400
Stats are randomly generated
on a scale of 1 to 18.

30
00:01:25.400 --> 00:01:26.838
The stats are randomly picked and

31
00:01:26.838 --> 00:01:30.370
their amplitude is randomly determined
according to the following rule.

32
00:01:30.370 --> 00:01:33.357
The first step picked should be at Max 18.

33
00:01:33.357 --> 00:01:37.810
The next one should be at Max 17,
the next one at Max, 16, and so forth.

34
00:01:37.810 --> 00:01:42.540
You could imagine that this is effectively
the beginnings of an NFT, right?

35
00:01:42.540 --> 00:01:44.930
You're now creating something
we're going to stored on chain.

36
00:01:44.930 --> 00:01:46.790
It has stats it's random.

37
00:01:46.790 --> 00:01:50.850
Could we create like a trading nature yes,
obviously these are not divisible.

38
00:01:50.850 --> 00:01:54.091
If you make a barbarian divisible
you've effectively defeated him, and

39
00:01:54.091 --> 00:01:56.100
he's dead because he is now in twain.

40
00:01:56.100 --> 00:02:00.010
So, this just makes perfect sense here.

41
00:02:00.010 --> 00:02:02.709
So let's go and
let's actually create the contract.

42
00:02:02.709 --> 00:02:05.990
So I copied the little design things so
we could just put it into the code.

43
00:02:05.990 --> 00:02:07.660
Yep, okay, perfect.

44
00:02:07.660 --> 00:02:10.765
So I'm just gonna copy this nice little
beautiful piece of text here and

45
00:02:10.765 --> 00:02:12.741
we're going to put it into some code,
okay.

46
00:02:12.741 --> 00:02:17.350
I'm gonna go back here, and
let's go back to our contract area.

47
00:02:17.350 --> 00:02:22.740
And let's create a contract
called Hero dot soul.

48
00:02:24.350 --> 00:02:29.235
And, of course do the standard pragma
statement at the top letting solidity

49
00:02:29.235 --> 00:02:31.310
know, you like this compiler.

50
00:02:31.310 --> 00:02:33.040
And then I'm going to
personally paste this in.

51
00:02:33.040 --> 00:02:34.360
You don't have to paste this in.

52
00:02:34.360 --> 00:02:35.810
But I'm gonna paste in
all of these things.

53
00:02:35.810 --> 00:02:38.520
So I can just do these things in order.

54
00:02:39.760 --> 00:02:43.600
And then of course, we're gonna create
our contract, which is gonna be a hero.

55
00:02:43.600 --> 00:02:46.250
And there we go, we are well onto our way.

56
00:02:46.250 --> 00:02:49.966
So the first thing we have to be able to
do is I wanna be able to randomly generate

57
00:02:49.966 --> 00:02:52.884
these things, the user should
be able to input their class,

58
00:02:52.884 --> 00:02:55.660
here are the classes
mage healer barbarian.

59
00:02:55.660 --> 00:03:01.390
So I'm gonna go down here and
I'm going to go enum class and do that.

60
00:03:01.390 --> 00:03:03.010
Now you guys can follow along this.

61
00:03:03.010 --> 00:03:04.350
This makes perfect sense.

62
00:03:04.350 --> 00:03:08.510
Enums are a bit more restrictive in
aetherium you can't assign it the value

63
00:03:08.510 --> 00:03:09.190
you want.

64
00:03:09.190 --> 00:03:13.503
I wish I could do like certain values in
these because I would definitely use enums

65
00:03:13.503 --> 00:03:16.770
more often, but
enums come with a very nice thing.

66
00:03:16.770 --> 00:03:19.467
If you accept enums into a function,

67
00:03:19.467 --> 00:03:23.122
a function cannot be called
with non enum values.

68
00:03:23.122 --> 00:03:25.950
Meaning that if meaning
that major zero healers,

69
00:03:25.950 --> 00:03:29.382
one barbarian is two,
if I provide a three to that function,

70
00:03:29.382 --> 00:03:33.310
it will simply fail because it
did not pass the solidity check.

71
00:03:33.310 --> 00:03:36.722
So that's very very nice right that
actually adds a little bit of safety to

72
00:03:36.722 --> 00:03:39.433
your program that makes it kind
of nice to use these enums.

73
00:03:39.433 --> 00:03:43.190
But nonetheless you can assign at
random values which does hurt my

74
00:03:43.190 --> 00:03:47.983
feelings a little bit sad this really cool
idea and then that's how I feel about it.

75
00:03:47.983 --> 00:03:51.835
All right now I left that out alright,
so there we go, we have the class and

76
00:03:51.835 --> 00:03:55.330
let's create a function that
we can create our hero with.

77
00:03:55.330 --> 00:04:00.070
And we're gonna take in the class class,
and it's going to be a public function.

78
00:04:00.070 --> 00:04:02.960
And we're gonna add this extra
word in here called payable.

79
00:04:02.960 --> 00:04:06.200
I think we can all guess
what the word payable means.

80
00:04:06.200 --> 00:04:10.241
It means that this function
can accept money into it.

81
00:04:10.241 --> 00:04:13.661
If you do not include this
you cannot pay for this,

82
00:04:13.661 --> 00:04:16.603
it's just part of life that's what it is.

83
00:04:16.603 --> 00:04:19.450
Next we're gonna include another
statement right here called require.

84
00:04:19.450 --> 00:04:21.851
Require effectively is like a cert,

85
00:04:21.851 --> 00:04:24.954
it allows you to put
assertions into your code.

86
00:04:24.954 --> 00:04:29.524
But if certain conditions aren't met,
this contract will revert itself

87
00:04:29.524 --> 00:04:34.210
automatically for you and even
provide an error if you would like to.

88
00:04:34.210 --> 00:04:39.155
So I'm gonna do this message dot
value values how much money was sent

89
00:04:39.155 --> 00:04:44.273
to the contract, if message dot value
is required to be greater than or

90
00:04:44.273 --> 00:04:46.026
equal 0.05 ether.

91
00:04:46.026 --> 00:04:50.518
Ether is a suffix to a number that
actually multiplies it by 10 to

92
00:04:50.518 --> 00:04:55.107
the 18 because all units
are fundamentally in we remember that.

93
00:04:55.107 --> 00:04:58.808
So there is no such thing as one ether
there is 10 end of the 18th we and so

94
00:04:58.808 --> 00:05:01.045
this is just kind of
like a little shortcut.

95
00:05:01.045 --> 00:05:04.849
So if they don't send us enough money,
we're gonna say,

96
00:05:04.849 --> 00:05:07.235
please send more money, right?

97
00:05:07.235 --> 00:05:13.915
Boom, we now have the basis of our
first few lines of design, right?

98
00:05:13.915 --> 00:05:15.635
We have three classes.

99
00:05:15.635 --> 00:05:21.640
The user gets to select the class that
comes in, and we want to be paid Money.

100
00:05:21.640 --> 00:05:24.470
So let's go back up here and
delete those two lines.

101
00:05:24.470 --> 00:05:25.130
So look at that.

102
00:05:25.130 --> 00:05:28.620
We're already like flying through this,
right?

103
00:05:28.620 --> 00:05:32.303
So just to make sure that we
are doing the right things,

104
00:05:32.303 --> 00:05:36.450
let's write a test right away for
what we have thus far.

105
00:05:36.450 --> 00:05:39.070
I think that would probably
be a good plan, right?

106
00:05:39.070 --> 00:05:41.120
So I'm gonna go.

107
00:05:41.120 --> 00:05:43.480
Let's erase these two.

108
00:05:43.480 --> 00:05:44.150
Let's erase that.

109
00:05:44.150 --> 00:05:45.540
There we go, sorry,
I have to race those things.

110
00:05:45.540 --> 00:05:47.720
And let's open up a test file.

111
00:05:47.720 --> 00:05:52.149
And I'm just gonna copy it again and
do hero.ts.

112
00:05:52.149 --> 00:05:55.953
Now remember, we always have to
include nomic labs hardhead ethers,

113
00:05:55.953 --> 00:05:59.320
because we want those
additional functions on ethers.

114
00:05:59.320 --> 00:06:02.293
We're also wanting to grab the ether
object off of hard hat fact.

115
00:06:02.293 --> 00:06:06.552
Even though it technically is globally
provided when you run hard hat as I've

116
00:06:06.552 --> 00:06:11.008
said LSPs and things kind of sometimes
struggle with altered environments and so

117
00:06:11.008 --> 00:06:13.450
I just always prefer to
do it the manual way.

118
00:06:13.450 --> 00:06:17.037
So I get the best LSP results.

119
00:06:17.037 --> 00:06:19.070
Alright, let's go to test gas and
let's call it hero.

120
00:06:19.070 --> 00:06:23.070
And I'm just gonna pretty much delete that
whole function because it's disgusting.

121
00:06:23.070 --> 00:06:25.190
Let's just get rid of it look.

122
00:06:25.190 --> 00:06:29.030
Alright, so what I'm gonna do is I'm going
to create a function called Create hero.

123
00:06:30.330 --> 00:06:32.340
And that's gonna do our standard deploy.

124
00:06:32.340 --> 00:06:37.079
I think everybody by now should be able to
mostly write a deploy by themselves, but

125
00:06:37.079 --> 00:06:38.810
I'll do it just in case cost.

126
00:06:39.940 --> 00:06:44.949
Hero equals await ethers dot
get contract factory heroes,

127
00:06:44.949 --> 00:06:49.855
the name of our contract and
then on top of it go back here and

128
00:06:49.855 --> 00:06:53.985
make sure that it's
spelled correctly ethers.

129
00:06:53.985 --> 00:06:57.212
Then we're going to take that and

130
00:06:57.212 --> 00:07:02.514
we're going to deploy it equals Wait,
Hero deploy and

131
00:07:02.514 --> 00:07:07.900
then of course,
await up one more time dot deployed.

132
00:07:07.900 --> 00:07:08.400
There we go.

133
00:07:09.500 --> 00:07:13.483
This function will simply create the hero,
deploy it, wait for

134
00:07:13.483 --> 00:07:16.010
it to be deployed and then we can return.

135
00:07:16.010 --> 00:07:19.055
it's good to kinda go through this
enough times by now you should probably

136
00:07:19.055 --> 00:07:21.960
create a function you can just
require in and do this yourself.

137
00:07:21.960 --> 00:07:26.778
But I always like to do these basic
primitive operations like 10 to 15 times

138
00:07:26.778 --> 00:07:30.730
just so in my own head,
it's just like always at my fingertips.

139
00:07:30.730 --> 00:07:33.250
I don't ever struggle with thinking
what does something happen?

140
00:07:33.250 --> 00:07:35.590
It's just kind of one of
the things that I like to do.

141
00:07:36.690 --> 00:07:39.632
I know it's kind of is can be boring and
sometimes I don't know people like that.

142
00:07:39.632 --> 00:07:43.868
But now remember we're using Chai not
as fun or Mocha or whatever it is so

143
00:07:43.868 --> 00:07:47.198
there is a before function
we'll do an async function.

144
00:07:47.198 --> 00:07:52.726
And we'll go hero equals true create
hero of course await that there we go so

145
00:07:52.726 --> 00:07:58.080
before any of the test run will
always have at least one hero ready.

146
00:07:58.080 --> 00:08:02.435
So perhaps I don't want state to persist
so I can always call my own create hero or

147
00:08:02.435 --> 00:08:06.206
we have the one that will run for
the test, creating and deploying and

148
00:08:06.206 --> 00:08:09.370
communicating with
the network does take time.

149
00:08:09.370 --> 00:08:12.175
So if you have a test that ends
up having like 1000 calls,

150
00:08:12.175 --> 00:08:14.890
this thing will take
6070 seconds to complete.

151
00:08:14.890 --> 00:08:18.130
So reducing the amount of calls you make,
always a good plan.

152
00:08:18.130 --> 00:08:21.470
Since we don't have any state we really
need to keep track of our test right now.

153
00:08:21.470 --> 00:08:23.523
I'm just not gonna worry about so

154
00:08:23.523 --> 00:08:29.300
I'm gonna go like this ,let's see should
fail at creating hero cause of payment.

155
00:08:29.300 --> 00:08:32.102
Yeah, you can call whatever
you want to do async function,

156
00:08:32.102 --> 00:08:35.700
you can even use an arrow function in
there, I will only judge you slightly.

157
00:08:35.700 --> 00:08:37.060
So there we go.

158
00:08:37.060 --> 00:08:43.270
We have this and now we need to call
the Create hero function and have it fail.

159
00:08:43.270 --> 00:08:47.721
So what I'm gonna do is I'm going to do
this you can do it how you want to do it I

160
00:08:47.721 --> 00:08:51.258
forget how to test Chi stuff,
where you can catch errors and

161
00:08:51.258 --> 00:08:54.902
all that I know Jess has a much
better version of said errors.

162
00:08:54.902 --> 00:09:00.213
But we'll just do this e equals error and
then I'm gonna

163
00:09:00.213 --> 00:09:05.186
go expect e dot m Massage,
let's see two No wait,

164
00:09:05.186 --> 00:09:10.065
wait, wait,
includes some phrase to equal true.

165
00:09:10.065 --> 00:09:14.382
I wanna just make sure that I see our
proper phrase, I'm gonna jump back to my

166
00:09:14.382 --> 00:09:18.917
contract and I'm going to yank out that
beautiful phrase please send me money.

167
00:09:18.917 --> 00:09:23.610
And then I'm in jump back in here and
go to the double quotes and

168
00:09:23.610 --> 00:09:25.431
paste that in awesome.

169
00:09:25.431 --> 00:09:27.366
There we go expects this to happen.

170
00:09:27.366 --> 00:09:31.064
Now I just realized I haven't
included expect someone to go up to

171
00:09:31.064 --> 00:09:34.214
the top do expect shy there
we go we're looking good and

172
00:09:34.214 --> 00:09:38.480
so now all we need to do is actually
do the hero function creation.

173
00:09:38.480 --> 00:09:42.240
But we wanna do it without
enough money correct.

174
00:09:42.240 --> 00:09:46.996
So let's do a nice little awake hero
creates hero Is that the name yep create

175
00:09:46.996 --> 00:09:51.225
here we need to provide a class
let's just do zero that would be of

176
00:09:51.225 --> 00:09:53.740
course I think the major at this point.

177
00:09:53.740 --> 00:09:58.476
And now when you call functions you can
also provide additional metadata Add to

178
00:09:58.476 --> 00:09:59.960
that function.

179
00:09:59.960 --> 00:10:01.500
And so that's what I'm gonna do right now.

180
00:10:01.500 --> 00:10:03.530
This is something that
ethers will take care of.

181
00:10:03.530 --> 00:10:07.908
It assumes that that one plus the amount
of arguments is gonna be kind of like

182
00:10:07.908 --> 00:10:10.420
a little option bag that
you can pass to it.

183
00:10:10.420 --> 00:10:12.470
You've seen a lot of option bags before.

184
00:10:12.470 --> 00:10:14.330
So what I'm gonna do is I'm
going to take this value.

185
00:10:14.330 --> 00:10:16.161
Now notice that I call it value.

186
00:10:16.161 --> 00:10:21.640
What is it called right here value, value,
value, value value, right is right there.

187
00:10:21.640 --> 00:10:22.845
It's very obvious.

188
00:10:22.845 --> 00:10:27.786
So I'm gonna set this value that I'm gonna
pass in this is how many ethers I want to

189
00:10:27.786 --> 00:10:28.666
send to this.

190
00:10:28.666 --> 00:10:32.925
You'll use the exact same thing when
you're doing a real contract that you

191
00:10:32.925 --> 00:10:37.269
want to communicate with real money
from saying no you'll provide a value.

192
00:10:37.269 --> 00:10:43.548
And so now remember ethers is in the units
of we so we're going to use ethers utils,

193
00:10:43.548 --> 00:10:50.025
parse Eeher and I would say 0.049999999
like right it's just so close.

194
00:10:50.025 --> 00:10:53.840
We almost made 5 but it's not five.

195
00:10:53.840 --> 00:10:58.416
So I would expect this test
to fail correct because we

196
00:10:58.416 --> 00:11:01.450
expect at least 0.05 ethers.

197
00:11:01.450 --> 00:11:02.950
And so we're gonna take this test.

198
00:11:02.950 --> 00:11:04.210
We're gonna run this test.

199
00:11:04.210 --> 00:11:07.820
And if I've done my stuff correctly,
we should get an error out that has this.

200
00:11:07.820 --> 00:11:09.970
I don't know if there's
a better Chai way to do this.

201
00:11:09.970 --> 00:11:13.460
I hate using Chai, but didn't wanna
get just set up as I said before.

202
00:11:13.460 --> 00:11:14.240
All right, there we go.

203
00:11:15.250 --> 00:11:17.520
So let's go over to here.

204
00:11:17.520 --> 00:11:20.390
I'm going to remove my test gas function,
we don't need to see that.

205
00:11:20.390 --> 00:11:24.430
And I'm gonna go over here I'm gonna
run test test is going to come out.

206
00:11:24.430 --> 00:11:27.420
It's also gonna be lucky enough
to give me all that good stuff.

207
00:11:27.420 --> 00:11:28.850
Now look at what I got here.

208
00:11:28.850 --> 00:11:32.987
Heroes is not this first off, I misspelt
heroes that kinda hurts a little bit

209
00:11:32.987 --> 00:11:37.318
emotionally but on top of it I misspelled
I just totally asked for the wrong one so

210
00:11:37.318 --> 00:11:38.374
let's go in here.

211
00:11:38.374 --> 00:11:42.643
And just to test you guys I wanted to
provide a message where you actually

212
00:11:42.643 --> 00:11:46.057
provide the wrong name and
now I provide the right name and

213
00:11:46.057 --> 00:11:49.561
we can redeploy it and
look at this it works out perfectly.

214
00:11:49.561 --> 00:11:53.413
And we can see that we actually
did fail at creating the hero.

215
00:11:53.413 --> 00:11:56.533
So there we go we have one
of our unhappy cases and

216
00:11:56.533 --> 00:12:00.910
that we can ensure that our contract
always does work at that cost.

