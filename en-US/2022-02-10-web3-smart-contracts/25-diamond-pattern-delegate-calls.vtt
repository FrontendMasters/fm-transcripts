WEBVTT

1
00:00:00.420 --> 00:00:02.200
So let's update our drawing.

2
00:00:03.520 --> 00:00:08.010
So now you can imagine, all right, so we
know this happens, but how does it happen?

3
00:00:08.010 --> 00:00:12.070
Well, I bet we could all guess that
there's a fallback function on your

4
00:00:12.070 --> 00:00:15.725
diamond contract that probably
has maybe a list of addresses and

5
00:00:15.725 --> 00:00:18.340
functions associated with them.

6
00:00:18.340 --> 00:00:23.044
That when I get called,
I find out what function's being called,

7
00:00:23.044 --> 00:00:27.916
I check inside of my little mapping
right here, grab that thing out,

8
00:00:27.916 --> 00:00:30.070
and then I call it, right?

9
00:00:30.070 --> 00:00:32.690
So if we were to build that,
that's what we do, right?

10
00:00:32.690 --> 00:00:36.280
Okay, so we're kind of understanding
the diamond a little bit better, right?

11
00:00:36.280 --> 00:00:38.800
This makes more sense.

12
00:00:38.800 --> 00:00:43.164
So let's keep on going, let's move into
delegate calls, which sounds fantastic but

13
00:00:43.164 --> 00:00:45.332
it's actually not all that complicated.

14
00:00:45.332 --> 00:00:50.049
So, it's easiest to know about
a delegate call by first showing you

15
00:00:50.049 --> 00:00:52.049
just a touch of JavaScript.

16
00:00:52.049 --> 00:00:54.998
JavaScript also has
the exact same concept.

17
00:00:54.998 --> 00:00:59.048
So what I'm gonna do is I'm
gonna create a class called foo.

18
00:00:59.048 --> 00:01:02.510
I'm gonna have a single private
member called bar which has a number.

19
00:01:02.510 --> 00:01:09.748
I'm gonna have a function called foo that
simply console.logs out foo, bar, right?

20
00:01:09.748 --> 00:01:13.374
[SOUND] Nothing like a good
old foo bar on a Sunday.

21
00:01:13.374 --> 00:01:18.681
This dot, get it now, anyways,
const foo = new foo, boom.

22
00:01:18.681 --> 00:01:23.127
Then we're gonna foo.foo(); call that,

23
00:01:23.127 --> 00:01:30.653
then we're gonna go foo.foo.call, and
I'm gonna call it with bar is 42.

24
00:01:30.653 --> 00:01:32.265
So what are we gonna get here?

25
00:01:32.265 --> 00:01:34.363
Well, the first time we're gonna call it,
we're gonna get undefined, right?

26
00:01:34.363 --> 00:01:35.578
I haven't said anything.

27
00:01:35.578 --> 00:01:38.972
The second time we're gonna call it,
we're gonna call this function.

28
00:01:38.972 --> 00:01:42.690
But I'm gonna set what this variable is,
correct?

29
00:01:42.690 --> 00:01:45.653
And this variable is gonna
point to something called bar,

30
00:01:45.653 --> 00:01:48.810
which I've set on this object, correct?

31
00:01:48.810 --> 00:01:51.655
Correct, so if I were to go in here,
re-execute this,

32
00:01:51.655 --> 00:01:53.725
we should see those two values, right?

33
00:01:54.975 --> 00:01:57.727
Awesome.
Okay, so we all kinda know, effectively,

34
00:01:57.727 --> 00:01:59.565
how that works with JavaScript.

35
00:01:59.565 --> 00:02:01.845
You've also seen bind and apply, right?

36
00:02:01.845 --> 00:02:04.195
Exact same concepts as these.

37
00:02:04.195 --> 00:02:05.795
All right, fantastic.

38
00:02:05.795 --> 00:02:10.375
So, let's do some more live coding.

39
00:02:10.375 --> 00:02:13.115
I put a little piece there just
in case I forget how to do it.

40
00:02:13.115 --> 00:02:15.540
Let's go back to our fallback contract.

41
00:02:15.540 --> 00:02:18.369
And let's actually create
something called A.sol, right?

42
00:02:22.885 --> 00:02:26.600
All right, so I'm gonna to do the same
pragma statement as always, holy cow.

43
00:02:26.600 --> 00:02:31.710
I'm gonna to import
a hardhat/console.sol as always, and

44
00:02:31.710 --> 00:02:37.421
I'm gonna to create a contract A,
and on A, I'm gonna have a uint a.

45
00:02:37.421 --> 00:02:41.687
I'm gonna have a function setA,
which will take in a uint a.

46
00:02:41.687 --> 00:02:44.998
It's gonna be public,
and I'm gonna go a = a.

47
00:02:44.998 --> 00:02:51.040
I'm gonna have a function getA which will
simply be a public view returns (uint),

48
00:02:51.040 --> 00:02:53.180
boom, boom, boom, right?

49
00:02:53.180 --> 00:02:54.180
We all know this.

50
00:02:54.180 --> 00:02:55.559
Erase that, return a.

51
00:02:55.559 --> 00:02:58.413
All right,
none of this is confusing, right?

52
00:02:58.413 --> 00:03:02.756
We understand this at this point,
I'm gonna take a, replace it with b,

53
00:03:02.756 --> 00:03:05.246
call it g, and have the exact same thing,

54
00:03:05.246 --> 00:03:09.326
another contract that looks
identical to A, except this one's B.

55
00:03:09.326 --> 00:03:12.734
But instead of just simply
doing this whole set b thing,

56
00:03:12.734 --> 00:03:14.338
let's also go like this.

57
00:03:14.338 --> 00:03:19.583
Let's have a constructor that
takes in the address of A.

58
00:03:19.583 --> 00:03:23.179
Then I'm gonna have
an address of contractA.

59
00:03:23.179 --> 00:03:26.193
I don't wanna use the term capital A,
because capital A, of course,

60
00:03:26.193 --> 00:03:28.450
is right here,
obviously cause a couple problems.

61
00:03:28.450 --> 00:03:29.680
Let's not do this.

62
00:03:29.680 --> 00:03:36.391
And so then I'm gonna go contractA = _A.

63
00:03:36.391 --> 00:03:40.089
And then I'm gonna go A, since I
already have reference to the contract,

64
00:03:40.089 --> 00:03:44.084
I don't need to create an interface,
though I could create an interface called

65
00:03:44.084 --> 00:03:47.206
IA that has these methods on that,
but I'm not gonna do that.

66
00:03:47.206 --> 00:03:52.346
So I'm just gonna go like this,
contractA, then I pass in my address,

67
00:03:52.346 --> 00:03:56.214
and I'm gonna cast my address
as a contract called A.

68
00:03:56.214 --> 00:04:02.940
And then I can simply go getA or
setA and I can pass an a + 1.

69
00:04:04.210 --> 00:04:06.970
This looks pretty straightforward, right?

70
00:04:06.970 --> 00:04:09.050
I think we all kind of
eventually get this concept.

71
00:04:10.620 --> 00:04:13.472
Hopefully, I don't have this wrong cuz
I will have to remember how to do it

72
00:04:13.472 --> 00:04:13.980
correctly.

73
00:04:15.030 --> 00:04:16.120
There we go.

74
00:04:16.120 --> 00:04:17.540
So this happens, right?

75
00:04:17.540 --> 00:04:19.800
We've now setA as a + 1.

76
00:04:19.800 --> 00:04:22.540
So let's go back to our deploy script.

77
00:04:22.540 --> 00:04:26.300
And even though we really liked class foo,
let's get rid of that.

78
00:04:26.300 --> 00:04:31.444
And go in here and let's take out
this thing and go name and args,

79
00:04:31.444 --> 00:04:36.967
which is gonna be that, CI this and
go, what is it, [INAUDIBLE] name,

80
00:04:36.967 --> 00:04:41.480
we'll pass in the name and
then we'll pass in the args.

81
00:04:41.480 --> 00:04:42.410
So there we go.

82
00:04:42.410 --> 00:04:44.800
I'm gonna deploy a named contract.

83
00:04:44.800 --> 00:04:49.170
And then I can also pass an arc to be
passed to the constructor at deploy time.

84
00:04:49.170 --> 00:04:49.680
This makes sense.

85
00:04:49.680 --> 00:04:52.060
That's how you pass
an arcs to a constructor.

86
00:04:52.060 --> 00:04:56.900
Alright, then I'll log the address and
return it back out.

87
00:04:56.900 --> 00:05:03.428
Here, I'm just gonna do this,
I'm gonna go const A = deploy("A"), right?

88
00:05:03.428 --> 00:05:07.323
Then I'm gonna go constant b is deploy,

89
00:05:07.323 --> 00:05:11.799
what's this, B with of course A's address.

90
00:05:11.799 --> 00:05:13.149
This all makes sense, right?

91
00:05:13.149 --> 00:05:18.170
So then I'm gonna go console.log("A",
a.getA()), perfect.

92
00:05:18.170 --> 00:05:22.292
Then I'm gonna go A,
B, there we go, and B.

93
00:05:22.292 --> 00:05:27.030
So, if I've done these things correctly,
we should just simply see A and B.

94
00:05:27.030 --> 00:05:30.334
Wait, why are you doing this to us?

95
00:05:30.334 --> 00:05:33.372
Why are you doing this to me.

96
00:05:33.372 --> 00:05:36.357
All right, there we go.
[SOUND] So I'm gonna just go fallback,

97
00:05:36.357 --> 00:05:42.750
even though that's not a really
good name for this, There we go.

98
00:05:42.750 --> 00:05:44.460
This is beautiful, right?

99
00:05:44.460 --> 00:05:45.581
So we should see zero for

100
00:05:45.581 --> 00:05:49.940
the first two because we haven't assigned
anything to A in either contract.

101
00:05:49.940 --> 00:05:57.080
And then I'm gonna do await a.setA,
start with 42.

102
00:05:57.080 --> 00:06:00.351
Then I'm gonna do it again,
I probably should go console.log,

103
00:06:00.351 --> 00:06:03.690
just makes life easy having a nice
little line right here, right?

104
00:06:05.340 --> 00:06:09.081
There we go, and
let's go b.setA, how about 60?

105
00:06:09.081 --> 00:06:11.376
There we go.

106
00:06:11.376 --> 00:06:14.738
Now, what we should see
is we should see 0, 0,

107
00:06:14.738 --> 00:06:20.480
then I would say we should see 42, 0,
then we should see 61, 60, correct?

108
00:06:23.390 --> 00:06:24.780
So let's run this.

109
00:06:24.780 --> 00:06:26.130
Hopefully, I haven't screwed anything up.

110
00:06:27.720 --> 00:06:30.970
I never used call, delegate call's
kinda like the primary way.

111
00:06:30.970 --> 00:06:33.960
There we go.
B is not a function, of course, it is not.

112
00:06:33.960 --> 00:06:35.028
Where did I do that?

113
00:06:35.028 --> 00:06:38.580
B, really just a genuine
classic right there.

114
00:06:38.580 --> 00:06:42.650
So, it's exactly what we
thought it would be, correct?

115
00:06:42.650 --> 00:06:45.480
Yes, none of that should
feel too surprising.

116
00:06:45.480 --> 00:06:48.340
So let's go back to contract B.

117
00:06:48.340 --> 00:06:53.320
And instead of doing this call, let's do
a delegate call, as I showed you earlier.

118
00:06:54.500 --> 00:06:55.840
So I'm gonna do this.

119
00:06:55.840 --> 00:07:00.440
I'm gonna use just the raw address.

120
00:07:00.440 --> 00:07:03.177
I'm gonna go delegatecall, and

121
00:07:03.177 --> 00:07:08.330
then this is where things get
a little bit interesting.

122
00:07:08.330 --> 00:07:13.280
I'm gonna encode some information that
needs to be sent to this address.

123
00:07:13.280 --> 00:07:18.660
So I'm gonna go
abi.encodeWithSignature and

124
00:07:18.660 --> 00:07:22.027
go, setA with a uint 256.

125
00:07:22.027 --> 00:07:24.190
It's very important to correctly type it.

126
00:07:24.190 --> 00:07:26.840
If you say uint, it will not work.

127
00:07:26.840 --> 00:07:30.536
Spent a good half an hour figuring
this out one day, very painful,

128
00:07:30.536 --> 00:07:32.060
much sadness, right?

129
00:07:32.060 --> 00:07:34.760
And I'm gonna do a + 1.

130
00:07:34.760 --> 00:07:35.610
So there we go.

131
00:07:35.610 --> 00:07:39.654
We're gonna delegatecall out to a,
with this function,

132
00:07:39.654 --> 00:07:43.625
with this signature,
with this parameter, all right?

133
00:07:43.625 --> 00:07:46.410
So this should all be pretty
much the exact same thing.

134
00:07:46.410 --> 00:07:49.360
We're gonna recall it, so
hopefully what do we see?

135
00:07:49.360 --> 00:07:53.340
We should see what we expect,
which is this.

136
00:07:53.340 --> 00:07:54.424
Did everyone expect to see that?

137
00:07:58.134 --> 00:08:01.251
What happened at the bottom?

138
00:08:01.251 --> 00:08:08.274
We called A in perspective of B.

139
00:08:08.274 --> 00:08:10.121
Does that make sense?

140
00:08:10.121 --> 00:08:14.981
Just like when we did foo.foo and
then I passed it in an object that would

141
00:08:14.981 --> 00:08:20.327
represent bar, we're effectively doing
the same type of call on a contract,

142
00:08:20.327 --> 00:08:24.053
except I don't wanna use my
storage in your contract.

143
00:08:24.053 --> 00:08:27.252
I want you to execute, but in my context.

144
00:08:27.252 --> 00:08:29.758
Now, are you ready for the mind blower?

145
00:08:29.758 --> 00:08:31.050
Are you ready?

146
00:08:31.050 --> 00:08:32.230
It's gonna hurt just a little bit.

147
00:08:32.230 --> 00:08:34.460
Honestly, it is gonna
hurt just a little bit.

148
00:08:34.460 --> 00:08:36.180
And so I'm very sorry.

149
00:08:36.180 --> 00:08:36.869
Something like this.

150
00:08:36.869 --> 00:08:41.258
[LAUGH] A,
we're gonna rename a to b, g, c.

151
00:08:41.258 --> 00:08:46.371
Yes, obviously, I said no,
no, no, no, no, yes,

152
00:08:46.371 --> 00:08:51.960
yes, yes, no, no, no, no,
no, yes, yes, all right.

153
00:08:51.960 --> 00:08:53.810
And then of course this
last one right here.

154
00:08:53.810 --> 00:08:54.780
Yes, there we go.

155
00:08:54.780 --> 00:08:56.870
So, I renamed the variable to b.

156
00:08:56.870 --> 00:09:00.470
What's gonna happen now, okay?

157
00:09:00.470 --> 00:09:02.300
I just named the variable different.

158
00:09:02.300 --> 00:09:09.462
So, when I go to A and I execute,
its variable's called A, mine's called B.

159
00:09:09.462 --> 00:09:11.275
Well, there's only one way to find out.

160
00:09:11.275 --> 00:09:14.378
I assume an error, right,
that probably makes sense.

161
00:09:14.378 --> 00:09:18.805
Well, I hate to be the one to
tell you this, nothing changed.

162
00:09:18.805 --> 00:09:23.280
So, does anyone wanna guess
what's happening here.

163
00:09:23.280 --> 00:09:24.700
I see mostly upset faces.

164
00:09:26.020 --> 00:09:29.390
&gt;&gt; Did they both just need to pick
one variable so it [INAUDIBLE]?

165
00:09:30.660 --> 00:09:33.946
&gt;&gt; How about this,
are you guys ready for this one?

166
00:09:38.291 --> 00:09:44.599
So I just swapped address with B and
then I called setValue twice.

167
00:09:44.599 --> 00:09:47.783
Little surprise at what
just happen there actually,

168
00:09:47.783 --> 00:09:50.835
I actually expected it to
completely explodiate.

169
00:09:50.835 --> 00:09:51.999
Did it not explodiate?

170
00:09:54.630 --> 00:09:57.531
I never actually tried this, I was just
gonna try it live cuz I thought it'd be

171
00:09:57.531 --> 00:09:59.198
super duper awesome for
it to just explode.

172
00:09:59.198 --> 00:10:01.228
But apparently it doesn't.

173
00:10:01.228 --> 00:10:02.659
I know why.

174
00:10:02.659 --> 00:10:06.792
Bool success, bytes memory bbb,

175
00:10:06.792 --> 00:10:10.790
they don't have an underscore.

176
00:10:10.790 --> 00:10:12.165
You can't use that, it's a reserved word.

177
00:10:12.165 --> 00:10:15.270
Console.log("success").

178
00:10:15.270 --> 00:10:19.020
Gosh, no even close, success, success.

179
00:10:19.020 --> 00:10:21.380
And I'm gonna do this one last time.

180
00:10:21.380 --> 00:10:24.524
So let's go here.
You're gonna see this go through,

181
00:10:24.524 --> 00:10:25.978
[SOUND] there we go.

182
00:10:25.978 --> 00:10:26.528
Success, true.

183
00:10:26.528 --> 00:10:29.310
Success, true.
Actually, I'm surprised by that.

184
00:10:29.310 --> 00:10:30.260
What is going on there?

185
00:10:30.260 --> 00:10:33.237
Anyways, we'll figure out what's going
on there in just one second, actually,

186
00:10:33.237 --> 00:10:35.960
we will actually figure out
what the heck's going on there.

187
00:10:35.960 --> 00:10:39.550
So, I don't have a good explanation all
of a sudden for why that's happening.

188
00:10:39.550 --> 00:10:40.770
It shouldn't happen that way.

189
00:10:40.770 --> 00:10:41.530
But we're gonna fix that.

190
00:10:41.530 --> 00:10:46.050
We're gonna make sure it does
exactly what I think it's doing.

191
00:10:46.050 --> 00:10:47.450
Which I think I know what it's doing.

192
00:10:47.450 --> 00:10:48.490
We'll see.

193
00:10:48.490 --> 00:10:49.420
So, questions.

194
00:10:51.060 --> 00:10:55.300
I shouldn't done anything too live cuz
sometimes I still get surprised by this.

195
00:10:55.300 --> 00:10:57.160
I'm actually really surprised by that.

196
00:10:57.160 --> 00:10:59.890
And I'll show you why shortly why
I'm super surprised about that.

197
00:10:59.890 --> 00:11:01.600
So let's improve our drawing.

198
00:11:01.600 --> 00:11:04.997
So now we know,
if you had this little array, right,

199
00:11:04.997 --> 00:11:08.050
that has these functions and addresses.

200
00:11:08.050 --> 00:11:13.780
Not only can I call you, but
I can call you in perspective of my data.

201
00:11:15.030 --> 00:11:20.069
Now, does this make sense why all these
contracts can share the same data and

202
00:11:20.069 --> 00:11:24.100
to be executed, and
why we never need to change the address?

203
00:11:25.730 --> 00:11:28.920
In some sense, yes,
this now is starting to make more sense.

204
00:11:28.920 --> 00:11:32.320
It has a list of fallback
functions to address.

205
00:11:32.320 --> 00:11:34.290
I get a call in that has a function.

206
00:11:34.290 --> 00:11:38.444
I look it up, get the address,
get the function, send it over there, but

207
00:11:38.444 --> 00:11:43.480
execute it within my perspective of
memory, we all share the same memory.

208
00:11:43.480 --> 00:11:47.720
Even though it exists, it has its own
memory and never actually uses it.

209
00:11:48.720 --> 00:11:50.280
It always uses ours.

210
00:11:50.280 --> 00:11:53.840
So if we wanted to update the contract,
what would happen?

211
00:11:53.840 --> 00:11:57.090
We just add a new one of these,
what would happen to our memory?

212
00:11:57.090 --> 00:11:58.610
Well, it's just staying here.

213
00:12:00.030 --> 00:12:02.360
What happens to all the outside addresses?

214
00:12:02.360 --> 00:12:04.950
It stays the same cuz
this one does not change.

215
00:12:04.950 --> 00:12:09.121
We're effectively avoiding this whole
problem of address change plus adding or

216
00:12:09.121 --> 00:12:10.860
removing functionality.

217
00:12:10.860 --> 00:12:12.470
And that is the basis for the diamond.

218
00:12:12.470 --> 00:12:16.340
But there is one more problem that
eventually always destroys people.

