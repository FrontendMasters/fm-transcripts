WEBVTT

1
00:00:00.130 --> 00:00:02.670
I'm gonna go on a brief,
quick tour of the language.

2
00:00:02.670 --> 00:00:05.070
Like I said, I'm not gonna really
go over every one of these things.

3
00:00:05.070 --> 00:00:06.480
I just wanna show them to you.

4
00:00:06.480 --> 00:00:08.347
So solidity,
if you've seen an if statement,

5
00:00:08.347 --> 00:00:10.330
you know how if statements work, right?

6
00:00:10.330 --> 00:00:14.483
If you've seen a for Loop,
just like every for Loop you've ever used.

7
00:00:14.483 --> 00:00:17.249
Contracts effectively
are identical to classes.

8
00:00:17.249 --> 00:00:19.970
You can hang members off contracts.

9
00:00:19.970 --> 00:00:22.250
There are constructors on contracts.

10
00:00:22.250 --> 00:00:25.580
You can specify a function with
a scope and a return type.

11
00:00:25.580 --> 00:00:27.440
All these things should
be pretty familiar.

12
00:00:27.440 --> 00:00:31.327
Yes you may not be able to type the exact
syntax your first try just because you

13
00:00:31.327 --> 00:00:34.182
haven't done it enough time for
it to be habitual but for

14
00:00:34.182 --> 00:00:35.790
now that's that, all right.

15
00:00:35.790 --> 00:00:37.290
So that's the simplicity of the language.

16
00:00:37.290 --> 00:00:40.490
Like I said,
the language is actually very simple.

17
00:00:40.490 --> 00:00:43.300
It only gets into the weeds when
you get to the more advanced stuff.

18
00:00:43.300 --> 00:00:48.970
So the base type on solidity
is a 256 bit number.

19
00:00:48.970 --> 00:00:52.318
It's unusual because base types
usually aren't numbers, nor

20
00:00:52.318 --> 00:00:55.550
are they 256 bits that's
actually a really large number.

21
00:00:55.550 --> 00:00:58.910
It's effectively the size
of the universe in atoms.

22
00:00:58.910 --> 00:01:00.990
Maybe I'm off by about a factor of 10,000.

23
00:01:00.990 --> 00:01:02.624
But that's a very large number, right?

24
00:01:02.624 --> 00:01:05.088
10 to the 79, I think is two to the 56.

25
00:01:05.088 --> 00:01:10.138
And so you can subdivide these out and
do like a u and eight,

26
00:01:10.138 --> 00:01:16.440
that's eight bits or one byte or
representing 256 distinct values.

27
00:01:16.440 --> 00:01:17.740
You can do a u and 16, 32, 64, 128.

28
00:01:17.740 --> 00:01:20.912
It allows some for
some basic subdividing in there.

29
00:01:20.912 --> 00:01:23.120
Strings suck, so don't do them.

30
00:01:23.120 --> 00:01:26.638
That's the general rule of thumb is that
unless if you have a bunch of hard coded

31
00:01:26.638 --> 00:01:29.270
ones, you're gonna construct
some sort of output with.

32
00:01:29.270 --> 00:01:34.575
Working with strings is really painful
because the base type is 256 bit number.

33
00:01:34.575 --> 00:01:39.190
So you're kind of mashing strings
into these number representations.

34
00:01:39.190 --> 00:01:40.521
It can lead to a lot of pain.

35
00:01:40.521 --> 00:01:45.467
I tend to just avoid strings in the things
I've written every single time except for

36
00:01:45.467 --> 00:01:50.061
like I said meta information generation
by simply just concatenate a bunch of

37
00:01:50.061 --> 00:01:53.968
stuff together that are hard coded
strings and pulling out data.

38
00:01:53.968 --> 00:01:58.390
Array, there are dynamic and
static arrays or fixed arrays.

39
00:01:58.390 --> 00:02:03.580
If you specify array on the contract
as a member, it is a dynamic array.

40
00:02:03.580 --> 00:02:06.770
Right now you're probably thinking,
why does that matter?

41
00:02:06.770 --> 00:02:10.870
When we get to the final part of this
it will make perfect sense for now,

42
00:02:10.870 --> 00:02:12.670
except it is beautiful.

43
00:02:12.670 --> 00:02:16.520
If you specify an array inside the
function, you specify it as a fixed array.

44
00:02:16.520 --> 00:02:20.773
I need an array of size 10, you cannot
inline generate an array right now so

45
00:02:20.773 --> 00:02:24.837
you just have to do this and then you
can add in each number as you'd like.

46
00:02:24.837 --> 00:02:29.812
So fixed inside of functions dynamic
outside when it's on a member of

47
00:02:29.812 --> 00:02:30.769
a contract.

48
00:02:30.769 --> 00:02:33.743
Maps again,
different from what you're used to.

49
00:02:33.743 --> 00:02:38.970
It's a mapping, not necessarily a map,
a map stores keys and values.

50
00:02:38.970 --> 00:02:43.750
Mappings do not store keys, and
they technically don't even store values.

51
00:02:43.750 --> 00:02:45.120
It's kinda confusing.

52
00:02:45.120 --> 00:02:50.590
You do a mapping from type to type and
the type can even be a complex type.

53
00:02:50.590 --> 00:02:52.570
It doesn't have to be a simple type.

54
00:02:52.570 --> 00:02:54.060
And that will be a mapping.

55
00:02:54.060 --> 00:02:56.899
It'll do some super special
magic underneath the hood, and

56
00:02:56.899 --> 00:02:58.540
it will be able to store that.

57
00:02:58.540 --> 00:03:00.890
But you cannot for each over keys.

58
00:03:00.890 --> 00:03:02.570
You cannot for each over values.

59
00:03:02.570 --> 00:03:05.992
You don't even know how many items
are inside of your map because it's

60
00:03:05.992 --> 00:03:09.670
actually just simply a mathematical
function that gets executed.

61
00:03:09.670 --> 00:03:13.006
And we'll go over that in
more detail later on, but

62
00:03:13.006 --> 00:03:18.220
it will make perfect sense why this is and
just for now keep it that way all right.

63
00:03:18.220 --> 00:03:21.488
Struct, they're just like C
you simply say struct foo or

64
00:03:21.488 --> 00:03:25.998
I guess go lang is another example and
you can specify a bunch of stuff in there.

65
00:03:25.998 --> 00:03:29.030
You can create a mapping
from say you went to foo.

66
00:03:29.030 --> 00:03:31.370
You can create a full array, right?

67
00:03:31.370 --> 00:03:32.414
So you can use those,

68
00:03:32.414 --> 00:03:35.790
you can create a mapping to a mapping
that is a UN to a full array.

69
00:03:35.790 --> 00:03:39.590
So there is no, you can do all
the standard mixes you'd like.

70
00:03:39.590 --> 00:03:40.900
There are also enums.

71
00:03:40.900 --> 00:03:44.019
We'll be using one here shortly, so
I just didn't even put it in here.

72
00:03:44.019 --> 00:03:44.533
And there you go.

73
00:03:44.533 --> 00:03:46.447
That is the basic of the language.

74
00:03:46.447 --> 00:03:51.414
At this point, you've already seen
enough of the solidity language,

75
00:03:51.414 --> 00:03:54.080
you pretty much know most of its bits.

76
00:03:54.080 --> 00:03:57.441
Some of the concepts get pretty
hard if you ever want to learn more

77
00:03:57.441 --> 00:03:59.818
about solidity, go to soliditylang.org.

78
00:03:59.818 --> 00:04:03.280
And it gives you this really nice like,
you can learn everything about it.

79
00:04:03.280 --> 00:04:07.844
The layout of the memory, how call data
works, types, global things, expressions,

80
00:04:07.844 --> 00:04:11.160
contracts, inline assembly,
it has everything to it.

81
00:04:11.160 --> 00:04:12.490
It's very, very nice.

82
00:04:12.490 --> 00:04:16.099
I figured you probably didn't
want me to read the docs for you.

83
00:04:16.099 --> 00:04:19.480
You can read the friendly manual
on your own time,we should

84
00:04:19.480 --> 00:04:21.982
probably discuss more of the fun parts and
so

85
00:04:21.982 --> 00:04:25.920
we are gonna build as we learn that
is always my favorite way to learn.

86
00:04:25.920 --> 00:04:28.412
It's not just simply reading but

87
00:04:28.412 --> 00:04:33.853
to build something fail get better
learn why and slowly build over time.

88
00:04:33.853 --> 00:04:38.316
So is there any questions thus far on what
I just showed you with just the basic

89
00:04:38.316 --> 00:04:43.368
types, the unit type which is of course,
256 bit number, anything like that.?

90
00:04:43.368 --> 00:04:46.045
&gt;&gt; Why does solidity exist?

91
00:04:46.045 --> 00:04:51.525
Why couldn't they have just made a library
from Python or another Language?

92
00:04:51.525 --> 00:04:55.632
&gt;&gt; My guessing is that as we go on,
you'll see a lot of the complications with

93
00:04:55.632 --> 00:04:58.829
how they chosen some of their
things that they've done.

94
00:04:58.829 --> 00:05:02.115
Solidity seems to fit very,
very well with this.

95
00:05:02.115 --> 00:05:04.090
I know Solona went with rust.

96
00:05:04.090 --> 00:05:08.048
I don't know how much it actually
resembles rust itself or what subset

97
00:05:08.048 --> 00:05:12.690
they've chosen to implement from rust,
but it appears to be much nicer that way.

98
00:05:12.690 --> 00:05:14.540
I don't know why they went
with their own language.

99
00:05:14.540 --> 00:05:16.695
I don't know why anyone invents
their own language in fact,

100
00:05:16.695 --> 00:05:18.132
with all the languages we already have,

101
00:05:18.132 --> 00:05:21.260
pretty much all the problems you've
ever wanted have all ready been solved.

102
00:05:21.260 --> 00:05:22.747
But they've chosen this language.

103
00:05:22.747 --> 00:05:25.090
It works very well for what they want.

104
00:05:25.090 --> 00:05:28.900
And when you break into inline assembly,
it works very, very well.

105
00:05:28.900 --> 00:05:31.930
And so I think that they kind of
chose this to ease a lot of it.

106
00:05:31.930 --> 00:05:35.183
I cannot speak on behalf that I
don't know the technical answer, but

107
00:05:35.183 --> 00:05:38.996
a lot of the peculiarities of the Ethereum
network are built into the language and

108
00:05:38.996 --> 00:05:42.110
you'll see why soon because like I said,
it's not a map.

109
00:05:42.110 --> 00:05:43.210
There is no map.

110
00:05:43.210 --> 00:05:44.580
There's a mapping.

111
00:05:44.580 --> 00:05:45.140
It's like a map.

112
00:05:46.150 --> 00:05:48.020
It's unique, if you will.

