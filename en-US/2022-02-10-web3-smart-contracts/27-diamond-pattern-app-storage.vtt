WEBVTT

1
00:00:00.000 --> 00:00:02.149
So I did figure out why I totally forgot.

2
00:00:02.149 --> 00:00:05.017
If you call an address
that does not exist,

3
00:00:05.017 --> 00:00:08.131
the transaction does successfully execute.

4
00:00:08.131 --> 00:00:10.962
It's just that there's no contracts there.

5
00:00:10.962 --> 00:00:13.872
So of course, it returns true,
but nothing would be stored.

6
00:00:13.872 --> 00:00:18.222
So I think I can prove why that works
by simply overriding my address, and

7
00:00:18.222 --> 00:00:22.429
then putting in a value that's higher so
it won't set my value again,

8
00:00:22.429 --> 00:00:25.167
it won't set up correctly
to what to expect.

9
00:00:25.167 --> 00:00:28.222
But we'll get to that, that was from
the previous problem where I couldn't

10
00:00:28.222 --> 00:00:30.049
understand why my address
was being called.

11
00:00:30.049 --> 00:00:31.051
Forgot about that.

12
00:00:31.051 --> 00:00:33.877
All right, so let's keep going with
the storage thing for a little bit.

13
00:00:33.877 --> 00:00:37.627
So now we understand why
this one could be called a.

14
00:00:37.627 --> 00:00:41.206
This one could be called c and
we overwrite these two, right?

15
00:00:41.206 --> 00:00:43.879
Cuz even though c and
d are stored in slot 1,

16
00:00:43.879 --> 00:00:47.800
if we overwrote with a,
it would totally destroy it, correct?

17
00:00:47.800 --> 00:00:48.829
Correct, so

18
00:00:48.829 --> 00:00:54.731
a lot of ways people get around this
is by making something called storage.

19
00:00:54.731 --> 00:00:57.397
So we're gonna go like this, Storage.sol.

20
00:00:57.397 --> 00:01:00.202
We're gonna do our
standard pragma statement.

21
00:01:00.202 --> 00:01:04.570
And then I'm gonna go like this,
struct AppStorage.

22
00:01:04.570 --> 00:01:10.301
And I'm gonna go like this,
uint a, uint8 b, right, do a c and

23
00:01:10.301 --> 00:01:16.053
then I could even have address,
oopsies, of A in here, right?

24
00:01:16.053 --> 00:01:21.157
We could have all these things right here,
and then what we could

25
00:01:21.157 --> 00:01:26.083
do is we could jump back to say this and
import "'/storage.

26
00:01:26.083 --> 00:01:32.569
And now just go, AppStorage s, right?

27
00:01:32.569 --> 00:01:39.535
I yank that, put that in here,
go, Oopsies,

28
00:01:39.535 --> 00:01:46.650
oop, there we go, have all those,
s.b, s.b, there we go.

29
00:01:46.650 --> 00:01:52.605
And so now when we do this, and
I call A in perspective of B,

30
00:01:52.605 --> 00:01:56.141
we won't clobber over anything.

31
00:01:56.141 --> 00:01:58.101
Because what has just happened here.

32
00:01:58.101 --> 00:02:01.172
We have this struct called AppStorage.

33
00:02:01.172 --> 00:02:04.768
Now, let's just do a quick little
review of what happened to our memory,

34
00:02:04.768 --> 00:02:07.157
cuz obviously I just
rearranged things around.

35
00:02:07.157 --> 00:02:10.322
The first thing that's gonna happen is
it's gonna tell me I've failed because

36
00:02:10.322 --> 00:02:11.091
I've kinda have.

37
00:02:11.091 --> 00:02:16.122
So I'm gonna s.ContractA,
and then inside of storage,

38
00:02:16.122 --> 00:02:19.109
I have to go ContractA, correct?

39
00:02:19.109 --> 00:02:22.331
And so now when I do this, it should
hopefully work a little bit better.

40
00:02:22.331 --> 00:02:26.198
So I'm just kind of making sure you guys
are paying attention, which you weren't,

41
00:02:26.198 --> 00:02:28.820
clearly, you forgot that there
was a d involved in this.

42
00:02:32.215 --> 00:02:37.442
And, of course,
you can't explicitly convert

43
00:02:37.442 --> 00:02:42.804
a big uint into a uint b,
cuz b is a uint8, right?

44
00:02:42.804 --> 00:02:45.391
Based on our storage, it's a uint8.

45
00:02:45.391 --> 00:02:50.287
So, let's just delete, actually let's
just make it a uint, close enough, right?

46
00:02:50.287 --> 00:02:52.001
There we go.

47
00:02:52.001 --> 00:02:57.678
We got through all these things,
classic, explicit conversion required.

48
00:02:57.678 --> 00:03:03.382
So there we go, so now you can see,
there is c, there is d,

49
00:03:03.382 --> 00:03:08.397
there's the address of a,
here's the value of a.

50
00:03:08.397 --> 00:03:13.128
So if I were to call and set in stuff, it
would happen in the order we would expect,

51
00:03:13.128 --> 00:03:15.229
or this is the value of b, correct?

52
00:03:15.229 --> 00:03:17.743
If I'm not mistaken,
is that what's happening?

53
00:03:17.743 --> 00:03:22.358
Yeah, b is the value of 4, a hasn't
been set yet, cuz that's set in A.

54
00:03:22.358 --> 00:03:24.536
So let's go back to our deploy script.

55
00:03:24.536 --> 00:03:31.591
And let's go await b.setB and
let's go 45, right?

56
00:03:31.591 --> 00:03:37.356
Oopsies, there take this, print this out,
let's reprint those three storages,

57
00:03:37.356 --> 00:03:42.893
but of course let's go console.log,
put a nice big ol line right here, right?

58
00:03:42.893 --> 00:03:48.687
Here we go, and if we've done
this correctly, there you go.

59
00:03:48.687 --> 00:03:51.363
Now notice that we have something very,
very nice right here.

60
00:03:51.363 --> 00:03:53.403
But obviously something
didn't happen out right here.

61
00:03:53.403 --> 00:03:54.691
So what just happened here?

62
00:03:54.691 --> 00:03:57.194
We got 2d in one of them,
which makes sense.

63
00:03:57.194 --> 00:04:00.457
45 should convert something maybe to 2d.

64
00:04:00.457 --> 00:04:02.449
Does it convert to 2d?

65
00:04:02.449 --> 00:04:05.336
I'd have to work it out in my head, but I
just assume, so here, let's go like this.

66
00:04:05.336 --> 00:04:10.114
0x45, that tends to be a little bit easier
in my head to be able to do those things.

67
00:04:10.114 --> 00:04:15.097
All right, so we see 0x45, we're still
seeing 0 here, so what is happening?

68
00:04:15.097 --> 00:04:19.021
Let's go into here, we can see that
we're delegate calling over to here.

69
00:04:19.021 --> 00:04:23.785
We see a uint 256, we see a uint 256.

70
00:04:23.785 --> 00:04:27.699
So everything should be executing how
I would expect it to be executing, yet

71
00:04:27.699 --> 00:04:30.592
we're not seeing a, so
what is actually going on here?

72
00:04:30.592 --> 00:04:32.745
Actually, I have no idea
what is going on here.

73
00:04:32.745 --> 00:04:37.628
This should just work, let's just
make sure we actually have a success,

74
00:04:37.628 --> 00:04:42.040
do it really quickly,
cuz perhaps we're not successifizing it or

75
00:04:42.040 --> 00:04:44.908
even better is when I
forget to do a little.

76
00:04:44.908 --> 00:04:49.862
All right, success is true, and
of course ContractA is in order.

77
00:04:49.862 --> 00:04:51.772
So this, there it is.

78
00:04:51.772 --> 00:04:54.049
So how do I not see this last step?

79
00:04:54.049 --> 00:04:56.750
I feel like when I put the word
console true, it always seem to work.

80
00:04:56.750 --> 00:04:59.030
I must have messed something up but
anyways, there you go.

81
00:04:59.030 --> 00:05:02.930
There's 46, we added 1 to it,
I know the moment you, yeah.

82
00:05:02.930 --> 00:05:06.314
I had a bug in and starts working
it again, I know, it's the classic.

83
00:05:06.314 --> 00:05:08.173
I don't know if that's
ever happened to you, but

84
00:05:08.173 --> 00:05:10.386
have you ever put in a single
print statement and it works and

85
00:05:10.386 --> 00:05:12.929
then you delete, set single print
statements that doesn't work.

86
00:05:12.929 --> 00:05:16.051
Those are the single most painful
things that have ever existed.

87
00:05:16.051 --> 00:05:20.591
All right, so there we go, you can
see we now are no longer clobbering

88
00:05:20.591 --> 00:05:23.036
our data cuz we're sharing a space.

89
00:05:23.036 --> 00:05:24.191
So what's happening?

90
00:05:24.191 --> 00:05:28.539
Well, what's really happening is this,
is that when we create a struct,

91
00:05:28.539 --> 00:05:32.337
it actually goes and it starts in
whatever position it's set in,

92
00:05:32.337 --> 00:05:35.252
say its position 0,
which is what we're doing.

93
00:05:35.252 --> 00:05:40.578
And it will tightly align all of its
data to be fitting in slot after slot.

94
00:05:40.578 --> 00:05:45.363
That's why I can just say, hey,
give me the first three slots and

95
00:05:45.363 --> 00:05:50.237
we're actually getting out a, b,
c, d, contract of address A or

96
00:05:50.237 --> 00:05:52.080
ContractA's address.

97
00:05:52.080 --> 00:05:54.544
That's why we're getting out
all that information but

98
00:05:54.544 --> 00:05:58.223
it's nicely held in a struct this time,
which just makes it a lot simpler, right?

99
00:05:58.223 --> 00:06:01.962
And so if you have a bunch of
contracts that are all sharing data,

100
00:06:01.962 --> 00:06:05.562
if everybody puts their state
storage at the very first slot,

101
00:06:05.562 --> 00:06:10.018
if you're using the diamond pattern,
it works every single time, right?

102
00:06:10.018 --> 00:06:11.378
You're not gonna get clobbered.

103
00:06:11.378 --> 00:06:17.130
The one problem that happens is if you're
using, say, OpenZeppelin's ERC721,

104
00:06:17.130 --> 00:06:20.933
which is the NFT token,
they specify their own storage.

105
00:06:20.933 --> 00:06:25.561
So we can't do that because then you'd
actually right into their storage,

106
00:06:25.561 --> 00:06:27.888
right, you'd ruin the NFT storage.

107
00:06:27.888 --> 00:06:30.554
And so there is a way around that, and

108
00:06:30.554 --> 00:06:34.254
that has to do with how
storage effectively works.

109
00:06:34.254 --> 00:06:37.671
So let me show you something that's
a little bit more exciting, I would say.

110
00:06:37.671 --> 00:06:39.178
So I'm gonna go into storage here.

111
00:06:39.178 --> 00:06:42.322
And this is how I've gotten
around all my storage issues.

112
00:06:42.322 --> 00:06:45.823
Is I actually create
a library called Storage.

113
00:06:45.823 --> 00:06:50.590
It has one single function up here,
which I'm gonna say it's gonna be,

114
00:06:50.590 --> 00:06:52.244
what is it, bytes32.

115
00:06:52.244 --> 00:06:57.715
And this will be key, and got KEY with big
capital letters cuz it feels more real.

116
00:06:57.715 --> 00:07:03.990
And we're gonna keccak, and we're gonna
like this, my-storage-location, all right?

117
00:07:03.990 --> 00:07:09.136
So if I keccak it with that string
exactly, it will always produce the same

118
00:07:09.136 --> 00:07:14.039
256 bytes or 32bytes worth of data,
it'll always be this step.

119
00:07:14.039 --> 00:07:17.307
Then I'm gonna go like this,
function get() internal pure,

120
00:07:17.307 --> 00:07:21.373
meaning I'm not touching anything,
this is where it's gonna get real weird.

121
00:07:21.373 --> 00:07:26.131
Returns (AppStorage storage s),
wait, I thought you can't touch

122
00:07:26.131 --> 00:07:30.578
storage if you're pure,
you cannot read state if you're pure.

123
00:07:30.578 --> 00:07:34.674
So this is what I'm gonna do,
bytes32 k = KEY.

124
00:07:34.674 --> 00:07:37.264
Assembly, so
we're breaking into the assembly layer.

125
00:07:37.264 --> 00:07:40.502
This is where I told you weird
things happen in the assembly layer.

126
00:07:40.502 --> 00:07:43.686
And we're gonna do this,

127
00:07:43.686 --> 00:07:48.896
s which is the name of
the return variable,

128
00:07:48.896 --> 00:07:52.237
I'm gonna go s.slot = k.

129
00:07:52.237 --> 00:07:57.483
I've just said, hey, the slot in which
you exist is somewhere randomly within

130
00:07:57.483 --> 00:08:02.352
this gigantic, infinitely-sized
memory pool that we have available.

131
00:08:02.352 --> 00:08:07.049
And so now our AppStorage will
always be placed in the exact same

132
00:08:07.049 --> 00:08:10.158
spot as long as we make this storage call.

133
00:08:10.158 --> 00:08:13.973
And if you have any inherited
contracts that specify their own data,

134
00:08:13.973 --> 00:08:17.919
you won't stop over them,
because you're no longer using slot zero,

135
00:08:17.919 --> 00:08:20.310
instead you're using a consistent slot.

136
00:08:20.310 --> 00:08:24.112
So you don't even have to worry about
everybody else following your pattern,

137
00:08:24.112 --> 00:08:26.546
which is almost in some ways,
way worse, right?

138
00:08:26.546 --> 00:08:27.484
You don't wanna do that.

139
00:08:27.484 --> 00:08:31.413
If you have to make an extension, you
could theoretically make another slot in

140
00:08:31.413 --> 00:08:35.178
which you're storing a different set
of data that you now want to refer to.

141
00:08:35.178 --> 00:08:38.669
And so that way you never have to
worry about stomping over yourself.

142
00:08:38.669 --> 00:08:42.500
And I find that this is kind
of the best way to do this.

143
00:08:42.500 --> 00:08:46.782
I actually even brought this version up to
the person who made the diamond pattern.

144
00:08:46.782 --> 00:08:50.986
And he was surprised, he's like,
yeah, I guess if everyone shares it,

145
00:08:50.986 --> 00:08:55.002
then you don't have to worry, he was
surprised that you could actually get

146
00:08:55.002 --> 00:08:59.047
around OpenZeppelin's implementation
of ERC 721 by just doing this.

147
00:08:59.047 --> 00:09:00.828
Does this make sense?

148
00:09:00.828 --> 00:09:04.457
Is anyone a bit confused
as to how this works?

149
00:09:04.457 --> 00:09:08.556
&gt;&gt; Why do we assign k to KEY and
not just call KEY directly?

150
00:09:08.556 --> 00:09:12.873
&gt;&gt; Reason why you do that is that
assembly cannot read off of here.

151
00:09:12.873 --> 00:09:17.295
Assembly reads off of only
locally scoped items.

152
00:09:17.295 --> 00:09:22.168
So you just do this, so I'm taking key,
which is up here, assigning it right here,

153
00:09:22.168 --> 00:09:25.202
setting it slot right here,
and then we can do that.

154
00:09:25.202 --> 00:09:27.255
Now obviously what I can't do now,

155
00:09:27.255 --> 00:09:31.915
is in here I can't simply print my storage
cuz it's not at slot zero, one, two.

156
00:09:31.915 --> 00:09:34.213
It's at some place somewhere else.

157
00:09:34.213 --> 00:09:37.839
So we could create some helper functions,
read out that data.

158
00:09:37.839 --> 00:09:41.579
But now, so
it's just not that interesting, right?

159
00:09:41.579 --> 00:09:43.611
So really what I could
do is just go like this.

160
00:09:43.611 --> 00:09:50.297
AppStorage s = Storage.get(), right?

161
00:09:50.297 --> 00:09:53.548
And so now, we have effectively
the same thing, except for

162
00:09:53.548 --> 00:09:57.848
we're always safe against somebody else
actually writing into our storage.

163
00:09:57.848 --> 00:10:02.098
Now there is that one possible chance that
you could get a mapping that overrides or

164
00:10:02.098 --> 00:10:03.461
lands into your storage.

165
00:10:03.461 --> 00:10:07.407
But again, the likelihood of that is
probably slightly less than the creation

166
00:10:07.407 --> 00:10:08.316
of the universe.

167
00:10:08.316 --> 00:10:10.334
So I think we're probably
good at least for

168
00:10:10.334 --> 00:10:13.767
the next few billion years before you
have to worry about one collision.

169
00:10:13.767 --> 00:10:16.233
So we'll just keep it there.

170
00:10:16.233 --> 00:10:19.754
So there you go, that's just me wanting
to make sure I take the time and

171
00:10:19.754 --> 00:10:21.198
properly explain storage.

172
00:10:21.198 --> 00:10:25.034
And then on top of that, to really
show you how to manipulate storage or

173
00:10:25.034 --> 00:10:26.344
to play around with it.

174
00:10:26.344 --> 00:10:30.969
So effectively, all we did right here is
create our own version of mapping, right?

175
00:10:30.969 --> 00:10:33.932
Cuz mapping just uses its slot
plus a little bit of magic,

176
00:10:33.932 --> 00:10:38.031
a little bit of a key, keccak it all
together, boom, it has its own position.

177
00:10:38.031 --> 00:10:39.492
We did our own.

178
00:10:39.492 --> 00:10:42.168
All right, Mark, question?

179
00:10:42.168 --> 00:10:47.159
&gt;&gt; What happens if the storage is
overwritten accidentally, multiple times?

180
00:10:47.159 --> 00:10:50.353
&gt;&gt; I would have to understand
what it means by accidentally,

181
00:10:50.353 --> 00:10:54.864
since we're specifying a spot, you can't
really accidentally override this.

182
00:10:54.864 --> 00:10:59.796
Like I said,
there's 10 to the 79 available slots.

183
00:10:59.796 --> 00:11:04.393
This randomly select one of those, nothing
else has the potential chance of ever

184
00:11:04.393 --> 00:11:08.057
colliding with it,
just as the reality of randomness, right?

185
00:11:08.057 --> 00:11:11.495
And so we just never have to
worry about that happening.

186
00:11:11.495 --> 00:11:15.454
But, if you were to
upgrade your storage and

187
00:11:15.454 --> 00:11:21.448
do something like this,
you would definitely clobber yourself.

188
00:11:21.448 --> 00:11:25.649
If you redeployed your contract and
moved your internal storage around,

189
00:11:25.649 --> 00:11:30.271
you would definitely destroy yourself
cuz now you've just changed the layout.

190
00:11:30.271 --> 00:11:35.237
Before it went slot one,
slot two, slot three, right,

191
00:11:35.237 --> 00:11:40.002
now it go slot one, slot two,
slot three, slot four.

192
00:11:40.002 --> 00:11:44.881
So you can never change your internal
representation of memory around.

193
00:11:44.881 --> 00:11:48.429
But you can certainly never worry about
it colliding with something else.

194
00:11:48.429 --> 00:11:52.922
It's just not theoretically possible.

195
00:11:52.922 --> 00:11:58.503
If you wanted to recover, I mean,
theoretically you can read storage.

196
00:11:58.503 --> 00:12:05.245
Here we go, if we go back here, if we jump
to getStorageAt, it also has a blockTag.

197
00:12:05.245 --> 00:12:10.174
So, theoretically,
we could actually go to a specific block,

198
00:12:10.174 --> 00:12:14.938
read our storage, and
then reput that back into our storage.

199
00:12:14.938 --> 00:12:18.123
So if you wanted to recover
because you screwed things up,

200
00:12:18.123 --> 00:12:21.708
you could go back back in time,
read out things and put it back in.

201
00:12:21.708 --> 00:12:23.473
Now, would this be easy?

202
00:12:23.473 --> 00:12:25.196
This actually sounds extremely hard.

203
00:12:25.196 --> 00:12:28.439
And I think it would take a couple
days of working out all the different,

204
00:12:28.439 --> 00:12:30.831
especially if you had
mappings inside your struct.

205
00:12:30.831 --> 00:12:34.278
Because you can have mappings inside
your struct, cuz now you're like, okay,

206
00:12:34.278 --> 00:12:37.625
it's in this position, which is here and
I gotta apply the mapping formula and

207
00:12:37.625 --> 00:12:38.250
go over here.

208
00:12:38.250 --> 00:12:40.351
And I have to know which keys
I need to be able to grab out.

209
00:12:40.351 --> 00:12:42.968
If you don't know your keys,
you're pretty much screwed, right?

210
00:12:42.968 --> 00:12:46.930
So it'd be very,
very hard to actually work everything out.

211
00:12:46.930 --> 00:12:49.210
So, good lesson,
don't destroy your storage.

