WEBVTT

1
00:00:00.420 --> 00:00:04.130
We've just made a deploy,
which I think is pretty exciting and

2
00:00:04.130 --> 00:00:07.470
we called it from the diamond contract.

3
00:00:07.470 --> 00:00:11.531
Now, let's add a little something,
I'm gonna use as particularly

4
00:00:11.531 --> 00:00:16.260
good software engineering practices
of simply coping and pasting code.

5
00:00:16.260 --> 00:00:21.281
So now it's like this, let's replaceA,
so I wanna have all the same code,

6
00:00:21.281 --> 00:00:25.140
the only difference is I'm
just simply gonna go replace.

7
00:00:26.270 --> 00:00:30.424
I know I could make this into a nice,
beautiful thing, okay, but just for

8
00:00:30.424 --> 00:00:33.520
now sometimes it's easy
just to get stuff done.

9
00:00:33.520 --> 00:00:37.811
So there we go, we have replace we have
nothing to do and let's go back to A and

10
00:00:37.811 --> 00:00:41.770
let's make it return something
slightly higher, right.

11
00:00:41.770 --> 00:00:46.169
So now let's go back to our cut and
we're gonna do this,

12
00:00:46.169 --> 00:00:51.329
we need to go replaceA, right but
the problem is what does A need?

13
00:00:51.329 --> 00:00:54.955
A needs a diamond, we need the address
from the diamond pretty much, so

14
00:00:54.955 --> 00:00:56.896
let's just get the diamond address.

15
00:00:56.896 --> 00:00:58.895
And I'm gonna erase
the little Kneisel thing and

16
00:00:58.895 --> 00:01:02.430
just have this as the diamond address
we'll return it also down here.

17
00:01:02.430 --> 00:01:03.870
Why were we trying the diamond address?

18
00:01:03.870 --> 00:01:05.510
I don't know, this just is part of it.

19
00:01:05.510 --> 00:01:09.957
There we go, so we just need the pass and
the diamond address and we will have

20
00:01:09.957 --> 00:01:15.230
everything fantastic, so again let's copy
this, paste it in there, there we go.

21
00:01:15.230 --> 00:01:18.798
This should pretty much work
is my assumptions and so

22
00:01:18.798 --> 00:01:22.449
let's go in there and
I forgot one last thing.

23
00:01:22.449 --> 00:01:24.930
No, never mind,
we deploy A every time, perfect.

24
00:01:24.930 --> 00:01:28.301
So let's deploy A, so
now if we've done this correct,

25
00:01:28.301 --> 00:01:32.680
we've now deployed A, right and
we call this before we deployed.

26
00:01:32.680 --> 00:01:37.785
So fantastic, so
let's now try the next part which

27
00:01:37.785 --> 00:01:43.820
is let's recall A without
the replacement this time.

28
00:01:43.820 --> 00:01:47.157
So let's go back here and
recall A, notice we got 53,

29
00:01:47.157 --> 00:01:49.940
we did not change
the address of our contract.

30
00:01:49.940 --> 00:01:53.462
We didn't do anything,
we simply just said, here you go and

31
00:01:53.462 --> 00:01:57.570
it worked, it replaced the function
that we had stored in there.

32
00:01:57.570 --> 00:02:01.222
It's actually pretty special, I think
this is just I'm just still so excited,

33
00:02:01.222 --> 00:02:04.299
I sometimes feel like it just front
row here about as excited as I am.

34
00:02:04.299 --> 00:02:07.995
But that is like awesome,
it solves one of the worst parts about

35
00:02:07.995 --> 00:02:12.548
contract development which is when we
change your address we're just host.

36
00:02:12.548 --> 00:02:16.291
There's like so many things you're gonna
have to take care of, think about all that

37
00:02:16.291 --> 00:02:20.370
storage transfer, any of the extra
information would just be a nightmare.

38
00:02:20.370 --> 00:02:22.748
Said now it's pretty easy,
we can just do that,

39
00:02:22.748 --> 00:02:26.550
we could set some variables if we want to,
we just set it on the diamond.

40
00:02:26.550 --> 00:02:29.810
That's just how it works because we're
all being called with delegate calls.

41
00:02:29.810 --> 00:02:33.220
So let's do one last one,
just in case to really prove it.

42
00:02:33.220 --> 00:02:37.504
Let's go delete A there we go and
we'll call it remove and

43
00:02:37.504 --> 00:02:42.622
of course the address is gonna
be that really convenient 0x 0.

44
00:02:42.622 --> 00:02:46.476
Look at that thank you tab nine
it just knew I wanted 40 zeros,

45
00:02:46.476 --> 00:02:47.872
it could just feel it.

46
00:02:47.872 --> 00:02:51.497
And so once we do that we're
gonna do the cut fantastic,

47
00:02:51.497 --> 00:02:54.594
order now remove A and
then we're gonna call A.

48
00:02:54.594 --> 00:02:59.230
So let's write this, delete A and
let's actually make this into a function,

49
00:02:59.230 --> 00:03:02.335
it's not making a new
function we'll just be lazy.

50
00:03:02.335 --> 00:03:07.554
There we go let's delete A,
we've deleted A,

51
00:03:07.554 --> 00:03:14.872
now let's call A bump bump function
does not exist, look at that.

52
00:03:14.872 --> 00:03:18.873
So we're actually adding replacing and
deleting methods off of the diamond,

53
00:03:18.873 --> 00:03:21.120
it works very very shockingly well.

54
00:03:21.120 --> 00:03:22.138
And how it does it,

55
00:03:22.138 --> 00:03:26.234
of course is by using those little
function selectors right here that go in.

56
00:03:26.234 --> 00:03:30.996
And are able to encode your functions
in a way that they can look up by

57
00:03:30.996 --> 00:03:32.281
using a mapping.

58
00:03:32.281 --> 00:03:36.660
And so this makes most sense, I think that
every concept about this makes sense.

59
00:03:36.660 --> 00:03:40.672
But the deployment script is obviously
significantly harder than the ones we

60
00:03:40.672 --> 00:03:41.543
built thus far.

61
00:03:41.543 --> 00:03:45.471
But it all makes sense because it has
to be slightly more complicated and

62
00:03:45.471 --> 00:03:47.369
ultimately this opens the door for

63
00:03:47.369 --> 00:03:50.397
you to be able to create as
complex of a script you need.

64
00:03:50.397 --> 00:03:53.950
You break them up and there you go,
now the one hard part will be obviously

65
00:03:53.950 --> 00:03:56.514
storage I showed you that
little app share storage,

66
00:03:56.514 --> 00:03:58.391
technically we could share storage.

67
00:03:58.391 --> 00:04:01.155
But you also have to have
shared functionality, so

68
00:04:01.155 --> 00:04:05.282
you can imagine that your library,
where are you, do I even have a library?

69
00:04:05.282 --> 00:04:09.022
If you make the library
long as everything,

70
00:04:09.022 --> 00:04:13.683
a lib right long as everything
inside of it has a scope.

71
00:04:13.683 --> 00:04:15.947
Get something, has a scope of internal,

72
00:04:15.947 --> 00:04:20.430
you don't have to deploy the library
contract and make external calls to it.

73
00:04:20.430 --> 00:04:24.299
You can just simply import it in and
use those so long as they're all internal

74
00:04:24.299 --> 00:04:27.330
there's no public ones you can
just use it kind of for free.

75
00:04:27.330 --> 00:04:28.700
And that can be the way you share code.

76
00:04:28.700 --> 00:04:30.780
It does increase your contract size,

77
00:04:30.780 --> 00:04:35.520
but at least anything that you need across
multiple of them you can just use this.

78
00:04:35.520 --> 00:04:39.904
And so, that tends to be as far as I can
tell the best way to develop contracts to

79
00:04:39.904 --> 00:04:41.060
date on Aetherium.

