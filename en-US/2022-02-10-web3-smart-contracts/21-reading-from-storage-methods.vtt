WEBVTT

1
00:00:00.190 --> 00:00:02.244
Let's jump back to the code and

2
00:00:02.244 --> 00:00:06.281
I bet you we can explain what's
happening here, all right?

3
00:00:06.281 --> 00:00:09.844
So first,
let's look at what's happening right here,

4
00:00:09.844 --> 00:00:13.421
this is the most important,
I'm doing an OR operation.

5
00:00:13.421 --> 00:00:15.089
What do OR operations do?

6
00:00:15.089 --> 00:00:16.057
Flannel guy.

7
00:00:17.843 --> 00:00:22.262
&gt;&gt; They exclude one or the other.

8
00:00:22.262 --> 00:00:25.803
&gt;&gt; That's exclusive,
what are ORs used for?

9
00:00:25.803 --> 00:00:31.551
Answer for taking out or is our for
tracking, putting back in,

10
00:00:31.551 --> 00:00:36.551
you put stuff in with ORs,
you take stuff out with ans.

11
00:00:36.551 --> 00:00:40.409
Ans are meant for selecting,
does this thing contain something?

12
00:00:40.409 --> 00:00:43.585
Or is our for
let me put it into the thing, so

13
00:00:43.585 --> 00:00:49.254
I'm obviously putting a value into hero,
all right, so what is the value?

14
00:00:49.254 --> 00:00:54.129
Well, the value of some randomly
generated stat between 1 to 18 maximum,

15
00:00:54.129 --> 00:00:57.190
but then I do this thing,
what is this again?

16
00:00:57.190 --> 00:00:59.080
Does everyone remember what that is?

17
00:00:59.080 --> 00:01:03.749
It's the equivalence to multiplying by 10,
but on a binary level,

18
00:01:03.749 --> 00:01:06.090
it's multiplying by 2.

19
00:01:06.090 --> 00:01:08.010
Now how many times are we
multiplying by 2 by?

20
00:01:10.050 --> 00:01:17.490
One of these numbers right here,
we may be shifting over by 2 12 times,

21
00:01:17.490 --> 00:01:23.400
so let me draw what the hero
is going to look like.

22
00:01:23.400 --> 00:01:26.896
So you'll notice, right away in the code,
the first thing I do I say,

23
00:01:26.896 --> 00:01:29.459
hero equals class,
what are the numbers of class?

24
00:01:29.459 --> 00:01:34.383
Does anyone remember what
are the potential numbers set of class?

25
00:01:34.383 --> 00:01:38.441
Zero, 1 and 2, correct?

26
00:01:38.441 --> 00:01:42.555
Mage, healer, or barium,
there's only three possible values,

27
00:01:42.555 --> 00:01:46.535
which means that can be represented
by two bits zero,1, or 2.

28
00:01:46.535 --> 00:01:49.005
So that means, my hero number,

29
00:01:49.005 --> 00:01:53.620
the first two bits are gonna
be representing its class.

30
00:01:53.620 --> 00:01:58.376
If it is a zero, it's image,
if it is a 1, it is a healer,

31
00:01:58.376 --> 00:02:01.700
if it is a 2, it is a barbarian.

32
00:02:01.700 --> 00:02:02.454
All right,

33
00:02:02.454 --> 00:02:07.288
well, now I need to be able to store all
of this delicious stats inside of it.

34
00:02:07.288 --> 00:02:11.264
So that other method, remember how
we made binary by simply finding

35
00:02:11.264 --> 00:02:14.693
the biggest power of two that
could fit within the number.

36
00:02:14.693 --> 00:02:17.895
And then that's how you can convert
a decimal number into a binary?

37
00:02:17.895 --> 00:02:20.407
Well, how do you store a decimal number?

38
00:02:20.407 --> 00:02:23.749
What is the minimum set of bits
you can store a decimal number in?

39
00:02:23.749 --> 00:02:29.515
You find the smallest power of two that
is larger than the decimal number,

40
00:02:29.515 --> 00:02:33.050
so 2 to the 4 is 16, that can't fit 18.

41
00:02:33.050 --> 00:02:38.734
2 to the 5 is 32, that can fit 18,
so we need 5 bits,

42
00:02:38.734 --> 00:02:46.360
to store any of these values, so
I put strength in the first position.

43
00:02:46.360 --> 00:02:48.793
So that means it's starting at 2,

44
00:02:48.793 --> 00:02:53.020
cuz we don't want to clobber any
of the class and it ends at 7.

45
00:02:54.555 --> 00:02:58.070
Man, I'm just so pumped right now, this
is like the best part of the whole thing.

46
00:02:58.070 --> 00:03:02.970
The next one is health,
exact same principle, starts at 7 bits,

47
00:03:02.970 --> 00:03:08.234
it ends, of course, just a little
bit later, 5 bits further or 12.

48
00:03:08.234 --> 00:03:13.260
And then we do dexterity,
we do intellect, and we do magic.

49
00:03:13.260 --> 00:03:16.236
And so here let me just draw each one
of these at the drums slightly smaller,

50
00:03:16.236 --> 00:03:19.020
cuz I just got too excited and
made the other sections too big.

51
00:03:19.020 --> 00:03:21.580
They're all taking up five bits, right?

52
00:03:21.580 --> 00:03:26.627
So this one ends at 17,
this one ends at 22 and now that means

53
00:03:26.627 --> 00:03:32.646
strength starts at 2, so let's go
back to our code, what's right here?

54
00:03:32.646 --> 00:03:36.646
2, so
let's say we select the zero with stat,

55
00:03:36.646 --> 00:03:41.510
the zero stat is going
to represent strength.

56
00:03:41.510 --> 00:03:46.814
That means when I select a random
value somewhere between 1 to 18,

57
00:03:46.814 --> 00:03:52.480
I'm in a bind narrowly shifted
over two zeros and then or at in.

58
00:03:52.480 --> 00:03:57.993
So let's do a little quick kind of bit
of like binary representation here,

59
00:03:57.993 --> 00:04:02.205
let's say we selected our
class to be barbarian, 01.

60
00:04:02.205 --> 00:04:05.474
That means the rest of our
hero is a bunch of zeros, man,

61
00:04:05.474 --> 00:04:07.570
sucks to be a hero, that's a zero.

62
00:04:08.680 --> 00:04:11.140
And say we select a strength stat,
so the first,

63
00:04:11.140 --> 00:04:14.190
the next 5 bits are going
to represent strength.

64
00:04:14.190 --> 00:04:19.450
Let's say we had a strength stat of 13,
so he is kind of a zero barbarian, right?

65
00:04:19.450 --> 00:04:22.586
Not that much strength, so
what is 13 in binary again?

66
00:04:22.586 --> 00:04:25.619
Well, it's going to be a 1,
I can tell you right away and

67
00:04:25.619 --> 00:04:29.618
then it's going to be a 4 and it's
going to be an 8, that is our strength.

68
00:04:29.618 --> 00:04:34.348
So if I take 13 and
I shift it over by 2 or

69
00:04:34.348 --> 00:04:41.179
multiply it twice by 2,
I get 2652, so what is 52?

70
00:04:41.179 --> 00:04:45.829
Well, we do the exact same thing, as we
can bring it all the way back down or

71
00:04:45.829 --> 00:04:48.693
I can just simply write
two zeros right here.

72
00:04:48.693 --> 00:04:52.805
Now we used the OR
operator, remember the OR

73
00:04:52.805 --> 00:04:56.486
operator is for putting into the item.

74
00:04:56.486 --> 00:05:02.016
That means anything that's a 1 in
the original value will remain a 1.

75
00:05:02.016 --> 00:05:05.352
But anything that is a zero
in the original value but

76
00:05:05.352 --> 00:05:09.010
a 1 in the value you're
ordering into will become a 1.

77
00:05:10.130 --> 00:05:14.846
That means when I take this number
in order it will save this number,

78
00:05:14.846 --> 00:05:19.910
these two effectively are cancelled
out and will be whatever is in here.

79
00:05:21.420 --> 00:05:24.536
And the only thing we're writing
into is these items right here,

80
00:05:24.536 --> 00:05:27.670
this is not like mind blowing and
actually pretty awesome.

81
00:05:27.670 --> 00:05:29.537
This is pretty cool, well, let's actually,

82
00:05:29.537 --> 00:05:32.030
let's write this thing out
just a little bit better.

83
00:05:32.030 --> 00:05:36.179
So that means if my current
hero value is this and

84
00:05:36.179 --> 00:05:42.630
we're writing in strength, and
our strength value is 1101 or 13.

85
00:05:42.630 --> 00:05:48.141
We first take our 13 and
we shifted over by 2, right,

86
00:05:48.141 --> 00:05:55.906
two sets of 2, which makes our new number
look a little bit like this, right?

87
00:05:55.906 --> 00:06:00.935
And so now when we OR this number with
this number, what we are going to

88
00:06:00.935 --> 00:06:06.520
get is 10, class preserved,
we have not clobbered our class yet.

89
00:06:06.520 --> 00:06:10.229
Then we write in our strength
cuz we are doing an OR,

90
00:06:10.229 --> 00:06:13.600
all ones make it into the final solution.

91
00:06:13.600 --> 00:06:18.720
So now our class, though a larger number
contains two sets of information,

92
00:06:18.720 --> 00:06:23.765
10, which is the class, and 1101 or
13 or our strength property.

93
00:06:23.765 --> 00:06:27.830
Which means,
I know it's going to get even better,

94
00:06:27.830 --> 00:06:33.350
which means we can jump up here and window
function get strength Give it a UNT.

95
00:06:33.350 --> 00:06:38.604
We'll call it a hero, and this thing can
be a public pier returns uint, right?

96
00:06:38.604 --> 00:06:40.759
And you could technically return it,
all right,

97
00:06:40.759 --> 00:06:42.740
we're going to do a unit,
that makes sense.

98
00:06:42.740 --> 00:06:46.586
We're going to return hero,
I'm going to shift it over by 2,

99
00:06:46.586 --> 00:06:50.083
right, cuz we don't want
those first two bits, right?

100
00:06:50.083 --> 00:06:55.908
Those first two bits are the class
information, then we need to end it,

101
00:06:55.908 --> 00:07:01.850
meaning we want to select out only
the next five bits, what is five ones?

102
00:07:01.850 --> 00:07:03.590
Does anybody know what five ones is?

103
00:07:03.590 --> 00:07:07.406
And let's use hexadecimal
cuz it's a lot easier.

104
00:07:07.406 --> 00:07:08.586
&gt;&gt; 32.

105
00:07:08.586 --> 00:07:12.502
&gt;&gt; That is the maximum number,
so what is 32 minus 1?

106
00:07:12.502 --> 00:07:13.441
&gt;&gt; 31.

107
00:07:13.441 --> 00:07:16.595
&gt;&gt; Boom, I'm gonna show you a really
sweet property about binary, man,

108
00:07:16.595 --> 00:07:18.827
this is just getting better and
better, is this not?

109
00:07:18.827 --> 00:07:24.270
So if you have a power of 2, any power of
2, let's just go with that one, 32, right?

110
00:07:25.760 --> 00:07:30.662
So 32 is this right, 1,2,4,8,16,32,

111
00:07:30.662 --> 00:07:35.680
if we were to minus a single
one from this, what happens?

112
00:07:35.680 --> 00:07:40.407
111110, so if you want to

113
00:07:40.407 --> 00:07:45.484
produce x ones, you simply take,

114
00:07:45.484 --> 00:07:50.036
0x1 shifted over by whatever

115
00:07:50.036 --> 00:07:55.300
number you want x and then minus 1.

116
00:07:55.300 --> 00:08:00.470
And you now have x ones, wow,
that was so cool, right?

117
00:08:00.470 --> 00:08:04.136
But luckily,
we don't have to do something as

118
00:08:04.136 --> 00:08:09.120
silly as 0x1 shifted over by 5,
then of course do a minus 1.

119
00:08:09.120 --> 00:08:12.537
All right, we don't need to do that cuz
that's a bit complicated, right, for

120
00:08:12.537 --> 00:08:14.174
this one cuz it's a hard coded value.

121
00:08:14.174 --> 00:08:18.777
We don't technically need to do that,
so instead,

122
00:08:18.777 --> 00:08:23.378
we'll do this, 0x1f,
cuz remember, f is 15 or

123
00:08:23.378 --> 00:08:26.846
1111, and 1 is just simply 11.

124
00:08:26.846 --> 00:08:31.486
So that is five ones in a row
in hexadecimal, there we go,

125
00:08:31.486 --> 00:08:36.531
we've now selected out the strength
property from our hero.

126
00:08:36.531 --> 00:08:41.551
While we do the exact same opposite
operation by oaring it in,

127
00:08:41.551 --> 00:08:48.420
and shifting it the other direction,
we shift this way, select all five bits.

128
00:08:48.420 --> 00:08:51.165
We shift this way and or in five bits, so

129
00:08:51.165 --> 00:08:55.080
they're kind of mural
operations of each other.

130
00:08:55.080 --> 00:08:59.451
So that is how fundamentally,
a lot of these NFTs work is,

131
00:08:59.451 --> 00:09:05.200
they use this 256 bits and
they store much possible information in.

132
00:09:05.200 --> 00:09:09.003
And then they shift them around,
what you'll also notice,

133
00:09:09.003 --> 00:09:11.400
I didn't do, any like UN8, right?

134
00:09:11.400 --> 00:09:15.830
I could have used the UN8 here, right,
I could use the UN8 right here.

135
00:09:15.830 --> 00:09:20.319
The reason why I don't do that is you get
overflow super simple when it comes to

136
00:09:20.319 --> 00:09:22.830
bits, one kind of cautionary tale.

137
00:09:22.830 --> 00:09:27.197
Let's say we're using a UNT8 and
we shifted over by 7 and

138
00:09:27.197 --> 00:09:29.614
our value of course is 0x11.

139
00:09:29.614 --> 00:09:34.818
So let's shift over by 7,
will become zero, it becomes,

140
00:09:34.818 --> 00:09:39.410
that's one, two,
I know this is painful, three.

141
00:09:39.410 --> 00:09:44.514
Let's go up to seven now 1, 2, 3, 4, 5, 6,

142
00:09:44.514 --> 00:09:49.164
7, 1, what do we write right here?

143
00:09:49.164 --> 00:09:52.258
We're using an eight bit number but
we shifted it over by seven,

144
00:09:52.258 --> 00:09:53.702
where does this other one go?

145
00:09:53.702 --> 00:09:58.262
It's off the bit, we can use it, it's
gone, I don't even know what happened,

146
00:09:58.262 --> 00:09:59.684
what happens in theory?

147
00:09:59.684 --> 00:10:02.401
I don't even know what happens in
a theory, but I can tell you this much,

148
00:10:02.401 --> 00:10:03.347
it's the wrong answer.

149
00:10:03.347 --> 00:10:09.143
No matter what it was, the answer is no,
and so be very careful when bit shifting.

150
00:10:09.143 --> 00:10:12.842
Cuz if you are like, I'm be clever,
I'm going to save some space, and

151
00:10:12.842 --> 00:10:16.100
then you end up shifting
yourself into an overflow.

152
00:10:16.100 --> 00:10:21.190
Nothing will work, I have seen this happen
how much amount of times, so there you go.

153
00:10:21.190 --> 00:10:26.879
This is what happened, does anyone have
some questions about what's going on here?

154
00:10:29.170 --> 00:10:32.442
&gt;&gt; Can you be certain that stats
are initialized to zero or

155
00:10:32.442 --> 00:10:35.520
was that explicitly done
somewhere in the code?

156
00:10:35.520 --> 00:10:41.260
&gt;&gt; First off, how are stats initialized to
zero and how were they explicitly done?

157
00:10:41.260 --> 00:10:44.831
Well, look at what I did right here,

158
00:10:44.831 --> 00:10:49.564
I set my hero value and
I casted the class to a U8.

159
00:10:49.564 --> 00:10:52.431
Which the class value is 01 or 2,

160
00:10:52.431 --> 00:10:58.178
which means it's binary representation
is going to be 01, or 10.

161
00:10:58.178 --> 00:11:04.169
That means the rest of the other 254 zeros
that I have available are all zeros,

162
00:11:04.169 --> 00:11:04.795
right?

163
00:11:04.795 --> 00:11:08.827
They've been cast to a very specific
number, and I notice I'm using UNT,

164
00:11:08.827 --> 00:11:09.723
you use the int.

165
00:11:09.723 --> 00:11:12.432
You're gonna have a different encoding and
get some two's complement in there, and

166
00:11:12.432 --> 00:11:14.551
everything's gonna get screwed up and
you're gonna be unhappy.

167
00:11:14.551 --> 00:11:18.979
So always use unsigned integers when doing
binary operations, but there you go,

168
00:11:18.979 --> 00:11:21.497
that is why I have that,
any other questions?

169
00:11:21.497 --> 00:11:25.185
Cuz this is a good time to ask questions
because most people don't interact with

170
00:11:25.185 --> 00:11:26.460
binary on a regular level.

171
00:11:26.460 --> 00:11:30.380
I tried my best to give you what
took me an entire semester in

172
00:11:30.380 --> 00:11:35.263
a very small amount of time to be able
to fluently work with, yes, Mark.

173
00:11:35.263 --> 00:11:40.720
&gt;&gt; So what we're selecting the next
property would it be 0x3ff?

174
00:11:40.720 --> 00:11:45.941
&gt;&gt; No, so would not be,
it would not be hexadecimal 75,

175
00:11:45.941 --> 00:11:50.608
it would actually be 0x1f,
because remember,

176
00:11:50.608 --> 00:11:53.846
we're making our bits five long.

177
00:11:53.846 --> 00:11:57.487
If we wanted to select out a bite,
we've used two F's,

178
00:11:57.487 --> 00:12:01.287
because two hexadecimal
numbers represents eight bits.

179
00:12:01.287 --> 00:12:06.821
One represents four bits or a nibble,
get a nibble bite has math,

180
00:12:06.821 --> 00:12:09.772
there you go, so that's what happens.

181
00:12:09.772 --> 00:12:12.764
So we're going to only
select out five bits,

182
00:12:12.764 --> 00:12:16.480
that's why when we did get strength,
we did five bits.

183
00:12:17.530 --> 00:12:21.623
First, we shifted it into place,
meaning, we shifted the class off and

184
00:12:21.623 --> 00:12:24.500
now strength represents the first 5 bits.

185
00:12:24.500 --> 00:12:29.013
Then we select the 5 bits, which means,
if I wanted to come in here and

186
00:12:29.013 --> 00:12:33.920
pace in and go Fs and go into health,
I would simply shift by 7.

187
00:12:33.920 --> 00:12:38.530
We shift off the class,
then we shift off strength.

188
00:12:38.530 --> 00:12:43.944
And now the first five bits in this
temporary hero variable is health,

189
00:12:43.944 --> 00:12:47.361
and so we can do it again,
let's go on here.

190
00:12:47.361 --> 00:12:52.136
Fh, and go Dex and we can go of course 12,

191
00:12:52.136 --> 00:12:55.054
do it again, paste it in,

192
00:12:55.054 --> 00:13:00.522
ffd bingo Intel LACT and
go up to Oopsies, 17.

193
00:13:00.522 --> 00:13:03.637
And of course, one last time, fi magic,

194
00:13:03.637 --> 00:13:08.094
there we go, with the J cuz I
really love fun spelled items.

195
00:13:08.094 --> 00:13:13.140
And then go down here and
bring it up, there we go.

196
00:13:13.140 --> 00:13:16.675
So now we've literally created
every single way we need to select

197
00:13:16.675 --> 00:13:20.790
out those values, doing the opposite
operation that we did before.

198
00:13:20.790 --> 00:13:23.845
If we want dexterity,
we need to shift off the class, two bits,

199
00:13:23.845 --> 00:13:25.329
we need to shift off strength.

200
00:13:25.329 --> 00:13:29.231
Fve bits, we need to shift off
magic [INAUDIBLE] or our health,

201
00:13:29.231 --> 00:13:31.720
which bring another five bits or 12.

202
00:13:31.720 --> 00:13:36.067
Shift off the first 12 bits, then we
end it, so we only select five bits,

203
00:13:36.067 --> 00:13:39.940
if you don't do this, you would
not only would you get dexterity.

204
00:13:39.940 --> 00:13:44.641
You would also get intellect,
you would also get health and potentially,

205
00:13:44.641 --> 00:13:48.157
any other information that
we decide to store in there.

206
00:13:48.157 --> 00:13:51.921
And so we got to be very careful about
this this is kind of like where the real

207
00:13:51.921 --> 00:13:53.151
tricky stuff happens.

208
00:13:53.151 --> 00:13:56.023
And so hopefully,
this makes a lot of sense, now obviously,

209
00:13:56.023 --> 00:13:58.630
we could put these values in
the constants and all that.

210
00:13:58.630 --> 00:14:02.860
But again, you store stuff on
this contract is it more or

211
00:14:02.860 --> 00:14:05.569
less expensive, more expensive.

212
00:14:05.569 --> 00:14:09.240
If you read it from the contract,
is it cheap or expensive?

213
00:14:09.240 --> 00:14:13.788
Expensive, right, so you gotta,
you want to be careful as much as you can.

214
00:14:13.788 --> 00:14:17.891
Great software engineering principles
don't necessarily map one to one to

215
00:14:17.891 --> 00:14:21.620
solidity, so you just kind of gotta
keep those things in your brain.

