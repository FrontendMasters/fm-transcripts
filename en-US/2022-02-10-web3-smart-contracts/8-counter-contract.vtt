WEBVTT

1
00:00:00.260 --> 00:00:02.560
Let's build our second contract.

2
00:00:02.560 --> 00:00:03.990
So we're gonna do a counter contract.

3
00:00:03.990 --> 00:00:05.658
This time we're gonna mutate state,

4
00:00:05.658 --> 00:00:09.020
we're gonna actually build something
slightly more complicated.

5
00:00:09.020 --> 00:00:10.760
Every single time we call a function.

6
00:00:10.760 --> 00:00:13.170
We're going to increment a number by one.

7
00:00:14.390 --> 00:00:18.450
Second, we're gonna also import this
little thing at the top of our function

8
00:00:18.450 --> 00:00:21.740
every time,
import hardhat slash console.sol.

9
00:00:21.740 --> 00:00:25.100
So this will help us cancel
out from our smart contract.

10
00:00:25.100 --> 00:00:27.839
This is a hard hat piece of functionality,
yet

11
00:00:27.839 --> 00:00:30.800
another reason why hardhat is so
dang fantastic.

12
00:00:30.800 --> 00:00:34.064
So let's create our counter contracts.

13
00:00:34.064 --> 00:00:37.459
Now I do not have the code for
the counter contract up here,

14
00:00:37.459 --> 00:00:41.982
cuz at this point hopefully everyone,
we can follow along for the most part.

15
00:00:41.982 --> 00:00:45.305
If we need it, I can update it
as quickly as possible, but

16
00:00:45.305 --> 00:00:50.112
we're gonna go and we're gonna create
inside of our contracts, Counter.sol.

17
00:00:50.112 --> 00:00:52.665
We'll do exactly as we did before,

18
00:00:52.665 --> 00:00:57.687
we'll put the pragma statement at
the top of it and tell the compiler,

19
00:00:57.687 --> 00:01:01.709
hey, we want to use at least
version 8 of the compiler.

20
00:01:01.709 --> 00:01:06.336
You can actually put a range in here, you
can say hey I can use from ranges four to

21
00:01:06.336 --> 00:01:10.073
8, I just specify the latest one
the latest and the greatest.

22
00:01:10.073 --> 00:01:15.339
And then next we're gonna do an import
of hardhat slash console.sol.

23
00:01:17.363 --> 00:01:20.130
And then of course, we're gonna go
create a contract called counter.

24
00:01:21.220 --> 00:01:24.020
I'll give everyone a moment to kinda
get caught up once I get all this done.

25
00:01:24.020 --> 00:01:27.078
We're gonna create a private member,
or not a private member,

26
00:01:27.078 --> 00:01:28.620
just a member called counter.

27
00:01:28.620 --> 00:01:30.310
So uint counter.

28
00:01:30.310 --> 00:01:34.660
This is obviously a 256 bit number,
very large.

29
00:01:34.660 --> 00:01:36.240
Do we need that size?

30
00:01:36.240 --> 00:01:39.899
Well, there's some benefits to using
that size which we'll go over later,

31
00:01:39.899 --> 00:01:43.110
then we're gonna create
a single function called count.

32
00:01:43.110 --> 00:01:47.078
And it's gonna be public, and
it's gonna return a uint, and

33
00:01:47.078 --> 00:01:53.000
it's gonna go counter ++, everyone's
familiar with the post increment operator.

34
00:01:53.000 --> 00:01:55.220
Then we're gonna console.log out.

35
00:01:55.220 --> 00:02:00.140
Counter is now, counter,
and return the counter.

36
00:02:00.140 --> 00:02:05.288
So there we go, we have just
done a state mutating function.

37
00:02:05.288 --> 00:02:08.103
We have a member on
the contract called counter,

38
00:02:08.103 --> 00:02:11.409
so we have identified some
memory that we want to mutate.

39
00:02:11.409 --> 00:02:14.725
We've referenced it inside of a function,

40
00:02:14.725 --> 00:02:18.947
we've added one to it,
we print it out and we return it.

41
00:02:18.947 --> 00:02:23.571
So based on some previous things I will be

42
00:02:23.571 --> 00:02:28.338
adding these to the repo that I have done.

43
00:02:28.338 --> 00:02:29.573
So here counter.

44
00:02:32.391 --> 00:02:35.010
So if you go to the jpgdegen1,
you'll have it.

45
00:02:35.010 --> 00:02:36.170
But there we go.

46
00:02:36.170 --> 00:02:38.250
We now have our counter done.

47
00:02:39.560 --> 00:02:42.730
And so
we need to make a new deploy script.

48
00:02:42.730 --> 00:02:48.180
The deploy script is gonna do pretty much
the exact same thing that we did before.

49
00:02:48.180 --> 00:02:51.633
But now we're gonna be
deploying the counter.

50
00:02:51.633 --> 00:02:57.413
If it makes it easier,
I can try to add this to the repo,

51
00:02:57.413 --> 00:03:02.087
or to the actual scripts that we're doing.

52
00:03:02.087 --> 00:03:04.040
So let's see, do I have the contract code?

53
00:03:04.040 --> 00:03:05.784
I do have the contract code on here.

54
00:03:05.784 --> 00:03:07.040
I do.
Look at this.

55
00:03:07.040 --> 00:03:08.110
I guess I was smart.

56
00:03:08.110 --> 00:03:12.450
I do have the contract code along with
the deploy script and the sample output.

57
00:03:12.450 --> 00:03:12.970
So look at that.

58
00:03:12.970 --> 00:03:15.469
So if you don't wanna just
mash all the buttons, you can,

59
00:03:15.469 --> 00:03:17.410
everything's already available up there.

60
00:03:18.500 --> 00:03:20.410
Fantastic, right?

61
00:03:20.410 --> 00:03:22.059
Sorry.
I surprised myself,

62
00:03:22.059 --> 00:03:25.097
I impress myself sometimes, I'm kidding.

63
00:03:25.097 --> 00:03:27.117
And I like that.

64
00:03:27.117 --> 00:03:27.926
All right, anyway.

65
00:03:27.926 --> 00:03:32.066
So let's create a new deploy script,
let's call it deploy-counter TypeScript,

66
00:03:32.066 --> 00:03:35.470
we're gonna do the exact same
deployment method we did before.

67
00:03:35.470 --> 00:03:36.680
Now I could go and copy it.

68
00:03:36.680 --> 00:03:39.923
But like I always say it's good to kinda
run through things a few times when

69
00:03:39.923 --> 00:03:40.820
you're brand new.

70
00:03:40.820 --> 00:03:42.140
It makes it really stick inside your head.

71
00:03:42.140 --> 00:03:44.040
So the first thing we got to do,

72
00:03:44.040 --> 00:03:49.150
we got to make sure that our ethers
object has those extra methods on it.

73
00:03:49.150 --> 00:03:52.797
Next, we need to import
ethers from hardhat.

74
00:03:52.797 --> 00:03:56.272
I mean, if you want, you can go and
copy it doesn't really matter to me.

75
00:03:56.272 --> 00:03:58.750
And then next we need to
write our deploy script.

76
00:03:58.750 --> 00:04:02.210
So just like the other time we're
gonna do async function deploy.

77
00:04:03.270 --> 00:04:08.140
We're gonna grab our counter from the file
system that hardhat has already generated.

78
00:04:08.140 --> 00:04:14.171
So const Counter = await
ethers.getContractFactory

79
00:04:15.465 --> 00:04:18.940
Counter the name of our contract.

80
00:04:18.940 --> 00:04:24.053
After we do that let's create our
actual contract on the network,

81
00:04:24.053 --> 00:04:26.325
await counter.deploy.

82
00:04:26.325 --> 00:04:29.495
And of course we wait for
it to be done, await counter.deployed.

83
00:04:30.915 --> 00:04:33.706
Return counter, exact same code again.

84
00:04:33.706 --> 00:04:37.807
You're gonna see this code so
many times today, right?

85
00:04:37.807 --> 00:04:41.446
Is the exact same thing over and
over again.

86
00:04:41.446 --> 00:04:45.877
Read the contract from file,
deploy it to the network, wait for

87
00:04:45.877 --> 00:04:49.501
it to be done being deployed,
return the contract.

88
00:04:49.501 --> 00:04:54.018
So now that we have that let's create a
little fun function called count, why not?

89
00:04:54.018 --> 00:04:57.739
And it will take in
the counter as the contract.

90
00:04:57.739 --> 00:05:02.755
And we're gonna go like this,
we're gonna go await or

91
00:05:02.755 --> 00:05:07.470
let's go console.log
Counter counter.count.

92
00:05:07.470 --> 00:05:11.980
Of course, we gotta await that, or
else we won't get the exact item in there.

93
00:05:11.980 --> 00:05:12.540
And so there we go.

94
00:05:12.540 --> 00:05:18.260
And exactly like before,
we're gonna do deploy, then count.

95
00:05:18.260 --> 00:05:19.564
Fantastic.

96
00:05:19.564 --> 00:05:23.900
We do the deploy, we wait for that promise
to be done, then we do the counter count.

97
00:05:25.120 --> 00:05:29.337
And so theoretically, this should return
us one the first time we execute this,

98
00:05:29.337 --> 00:05:30.160
correct?

99
00:05:30.160 --> 00:05:34.140
We deploy the script,
then we get the counter, we count it once.

100
00:05:34.140 --> 00:05:37.718
We should even be able to go to our node,
see that it counted once because we

101
00:05:37.718 --> 00:05:41.203
put that console dot log in there,
and we should get back the number 1.

102
00:05:41.203 --> 00:05:45.060
So let's go, opp, I gotta make
sure my Python simple servers up.

103
00:05:45.060 --> 00:05:49.307
So let's go here and do an npx
hardhat run just like before, and

104
00:05:49.307 --> 00:05:55.260
we're gonna do scripts, but instead of
deploy-hello, let's do deploy-counter.

105
00:05:57.611 --> 00:05:58.403
There we go.

106
00:05:58.403 --> 00:06:00.920
And of course the network is local host.

107
00:06:00.920 --> 00:06:03.795
Again, so
it will be doing this a bunch and

108
00:06:03.795 --> 00:06:09.136
you'll be kind of doing this a lot if
you do any sort of Ethereum development,

109
00:06:09.136 --> 00:06:13.840
is that you always have to do
this little scripts deploy.

110
00:06:13.840 --> 00:06:15.140
Passing the network you want, or

111
00:06:15.140 --> 00:06:18.720
else it uses the ephemeral network that
it can set up, and tear down right away.

112
00:06:18.720 --> 00:06:22.080
So when we run this, one or
two things is gonna happen.

113
00:06:22.080 --> 00:06:25.502
Either I did this first try, or
we're gonna do it first try next time,

114
00:06:25.502 --> 00:06:26.085
all right?

115
00:06:26.085 --> 00:06:26.957
So fantastic.

116
00:06:26.957 --> 00:06:28.550
A lot of things just happened right here.

117
00:06:28.550 --> 00:06:30.640
So let's go up to the output.

118
00:06:30.640 --> 00:06:33.810
Now notice it says counter,
which is what we put in the JavaScript.

119
00:06:33.810 --> 00:06:36.250
And then it gave you this big transaction.

120
00:06:36.250 --> 00:06:39.330
So what happened with this transaction?

121
00:06:39.330 --> 00:06:43.598
Well, remember how I talked about there's
two types of calls on the Ethereum

122
00:06:43.598 --> 00:06:47.040
networks, those that use gas and
those that do not.

123
00:06:47.040 --> 00:06:54.450
Well, we changed the state of the network
by adding one to a member of a contract.

124
00:06:54.450 --> 00:06:58.522
Therefore this is a transaction,
this is not a call to the network.

125
00:06:58.522 --> 00:07:01.295
Therefore we're not
getting data out of this,

126
00:07:01.295 --> 00:07:03.732
because when is the data considered set?

127
00:07:03.732 --> 00:07:08.258
Well, when a certain number of
transactions have happened after ours and

128
00:07:08.258 --> 00:07:11.180
certain amount of blocks
have been processed.

129
00:07:11.180 --> 00:07:17.620
And some people like to do 32 blocks,
that's considered a set in stone action.

130
00:07:17.620 --> 00:07:21.000
Some people can be fine with 6,
12, whatever.

131
00:07:21.000 --> 00:07:23.260
But nonetheless, what is considered done?

132
00:07:24.350 --> 00:07:27.130
It's kind of always a little bit
of a confusing notion, right?

133
00:07:27.130 --> 00:07:31.650
And so that's why you don't get data
out of a state changing transaction.

134
00:07:31.650 --> 00:07:34.890
Now we can jump over to our node and
we can see that exact same thing.

135
00:07:34.890 --> 00:07:37.540
First, we see that we
deployed our contract.

136
00:07:37.540 --> 00:07:42.893
It is at this location, it used this
address, it was block number 2.

137
00:07:42.893 --> 00:07:46.409
Now if we go up just a little bit more,
you'll notice that our eth

138
00:07:46.409 --> 00:07:51.460
calls to our HelloWorld, never calls a new
block, cuz it's purely reading state.

139
00:07:51.460 --> 00:07:54.914
Whereas now when we go down to our count,
it actually caused

140
00:07:54.914 --> 00:07:59.260
a new block because it had
a transaction that had to be processed.

141
00:07:59.260 --> 00:08:01.050
So got added to the next block.

142
00:08:01.050 --> 00:08:02.740
It also used to this amount of gas.

143
00:08:03.950 --> 00:08:06.520
There you go.
You can see all the basic information who

144
00:08:06.520 --> 00:08:08.417
sent it, who received it, okay?

145
00:08:08.417 --> 00:08:09.405
So something's happened here.

146
00:08:09.405 --> 00:08:12.070
This is different than what it was before.

147
00:08:12.070 --> 00:08:14.650
And lastly, you'll notice that we
see our hardhat counter right here.

148
00:08:14.650 --> 00:08:16.730
This is very, very useful for debugging.

149
00:08:16.730 --> 00:08:20.463
I wanted to put that in there
because it's just super, super,

150
00:08:20.463 --> 00:08:24.490
super nice to have but nothing too
surprising just happened there.

