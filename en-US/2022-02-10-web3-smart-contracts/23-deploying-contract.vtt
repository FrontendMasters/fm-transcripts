WEBVTT

1
00:00:00.070 --> 00:00:02.840
So what is the size of
our finished contract?

2
00:00:04.070 --> 00:00:06.470
Well, we can find that out by
doing a little simple thing.

3
00:00:06.470 --> 00:00:10.091
We're going to cat out our artifacts,

4
00:00:10.091 --> 00:00:14.480
our contracts, our hero, our hero.JSON.

5
00:00:14.480 --> 00:00:19.138
We're gonna pass it into JQ and
do deployed bytecode.

6
00:00:19.138 --> 00:00:22.450
That gives us out this big thing, right?

7
00:00:22.450 --> 00:00:25.570
This is what is deployed
out to the network, right?

8
00:00:25.570 --> 00:00:28.420
So what I wanna do is,
I'm gonna take this and

9
00:00:28.420 --> 00:00:32.230
I'm gonna pipe it to word count and
do character count.

10
00:00:32.230 --> 00:00:37.375
There is 5313 nibbles but really
there's actually 5300 and 11 nibbles,

11
00:00:37.375 --> 00:00:42.710
plus two quotes cuz remember, each one of
these represents a nibble or four bits.

12
00:00:42.710 --> 00:00:47.920
So we could take this and
go this thing divided by 2 minus 1.

13
00:00:47.920 --> 00:00:54.652
So this is the true size of our contract,
which is 2.655k.

14
00:00:54.652 --> 00:01:00.467
Now, you may not realize this, but
contracts have a hard limit of 24k.

15
00:01:00.467 --> 00:01:02.090
Is our contract very complex?

16
00:01:03.190 --> 00:01:06.320
I mean, technically it's kind of complex.

17
00:01:06.320 --> 00:01:07.580
But is it complex?

18
00:01:07.580 --> 00:01:09.820
No, it's actually a pretty
small amount of code.

19
00:01:09.820 --> 00:01:13.840
I'm sure we all accidentally create more
code than that doing almost anything.

20
00:01:13.840 --> 00:01:17.070
It's hard to even turn a corner without
creating 24 kilobytes of code, right?

21
00:01:17.070 --> 00:01:19.243
It's a lot.

22
00:01:19.243 --> 00:01:22.203
I mean it's very little amounts of memory,
correct?

23
00:01:22.203 --> 00:01:24.896
So this is a very big problem
that we're about to face,

24
00:01:24.896 --> 00:01:28.544
if we were to make this even slightly
let's say we make a fighting tactic.

25
00:01:28.544 --> 00:01:31.683
If you fight you could
generate a new NFT if you win,

26
00:01:31.683 --> 00:01:33.949
I mean how big would our contract be?

27
00:01:33.949 --> 00:01:37.020
We easily just shoot right into like 50k,
right?

28
00:01:37.020 --> 00:01:39.922
It will just blow up immediately,
so not only that but

29
00:01:39.922 --> 00:01:44.056
we've had this problem and we've been
asked this problem multiple times.

30
00:01:44.056 --> 00:01:50.560
Every time your contract gets deployed
again, upgrade, bug fix, address changes.

31
00:01:50.560 --> 00:01:53.438
So let me ask the question, what happened
if your contract accepted payments?

32
00:01:53.438 --> 00:01:54.410
Where would that money be?

33
00:01:56.040 --> 00:01:56.690
Old contract.

34
00:01:58.170 --> 00:01:59.720
Where would all that
data be associated with?

35
00:02:01.060 --> 00:02:02.300
Old contract.

36
00:02:02.300 --> 00:02:07.297
Who would have to pay to transfer
data from there to the new contract?

37
00:02:07.297 --> 00:02:09.097
You would, right?

38
00:02:09.097 --> 00:02:13.330
I feel like I don't know,
Maury Ballsteen from Zoolander here.

39
00:02:13.330 --> 00:02:16.740
That's what's gonna happen,
is that you have to pay for

40
00:02:16.740 --> 00:02:20.729
all this stuff to happen because
you're now changing contracts.

41
00:02:20.729 --> 00:02:24.519
When you make a change,
you deploy a new contract,

42
00:02:24.519 --> 00:02:27.260
you are not using your old contract.

43
00:02:27.260 --> 00:02:29.747
This is obviously a big problem, right?

44
00:02:29.747 --> 00:02:33.987
Well, actually it's not actually that big
of a problem cuz there's actually a really

45
00:02:33.987 --> 00:02:34.809
good solution.

