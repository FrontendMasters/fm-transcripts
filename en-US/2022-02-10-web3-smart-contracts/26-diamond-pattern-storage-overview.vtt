WEBVTT

1
00:00:00.495 --> 00:00:04.241
So we're finally getting to it,
we're finally getting to memory.

2
00:00:04.241 --> 00:00:06.997
Now this is kind of the important
part of the whole thing.

3
00:00:06.997 --> 00:00:12.290
If you don't get this part
the rest becomes more difficult.

4
00:00:12.290 --> 00:00:15.443
So I think it's super duper neat,
it's super ultra duper duper neat.

5
00:00:15.443 --> 00:00:17.314
So let's start with
the whiteboard of course.

6
00:00:17.314 --> 00:00:20.221
Let's go over here.

7
00:00:20.221 --> 00:00:24.233
Any contract that exists,
it has slots of memory.

8
00:00:24.233 --> 00:00:27.522
These slots of memory are 256 bits long.

9
00:00:27.522 --> 00:00:34.464
They start at zero, and they go all
the way up to the 256 minus one of course.

10
00:00:34.464 --> 00:00:38.209
So there is a ton of
storage slots available.

11
00:00:38.209 --> 00:00:43.113
In fact there are more storage slots
available than there probably is atoms in

12
00:00:43.113 --> 00:00:44.629
the universe, right?

13
00:00:44.629 --> 00:00:48.612
It's just like an incredible
amount that's available, but

14
00:00:48.612 --> 00:00:51.685
remember it's just
a space that's out there.

15
00:00:51.685 --> 00:00:55.559
It's not obviously filled up, we wouldn't
have enough material to do that.

16
00:00:55.559 --> 00:01:00.369
So it's just a theoretical landscape for
you to be able to store data in.

17
00:01:00.369 --> 00:01:05.680
So now this is just,
it's just so exciting.

18
00:01:05.680 --> 00:01:10.938
So now that we've done that, that means
when you specify a contract, right?

19
00:01:10.938 --> 00:01:15.782
When you say contract A, and
the very first slot you say U INT A,

20
00:01:15.782 --> 00:01:21.010
what happens to the compiled code
as you reference A throughout it?

21
00:01:21.010 --> 00:01:27.901
Well it actually translate that to say,
storage slot zero.

22
00:01:27.901 --> 00:01:29.964
That's all it does.

23
00:01:29.964 --> 00:01:34.739
That is why,
when we called contract A via B, and

24
00:01:34.739 --> 00:01:40.461
it had variable A versus our B,
the ordering was the same.

25
00:01:40.461 --> 00:01:44.967
Hence also my surprise that we were able
to call again after setting over our

26
00:01:44.967 --> 00:01:49.054
own memory, it theoretically should
have set over our own memory.

27
00:01:49.054 --> 00:01:52.341
So this is what happened right here,

28
00:01:52.341 --> 00:01:56.485
is that we can set slot A,
so slot or slot zero.

29
00:01:56.485 --> 00:02:00.246
So that means long as our variables
are ordered the same way,

30
00:02:00.246 --> 00:02:03.728
all of our contracts will be
pointing to the same slots.

31
00:02:03.728 --> 00:02:08.770
I wanna make sure I get this stuff,
okay, good.

32
00:02:08.770 --> 00:02:11.650
I was making sure my notes
don't lead me anywhere else.

33
00:02:11.650 --> 00:02:13.942
All right, so let's think about something.

34
00:02:13.942 --> 00:02:16.652
Remember how I kept talking about,

35
00:02:16.652 --> 00:02:20.998
you'd understand why storage
arrays can get pushed to.

36
00:02:20.998 --> 00:02:27.497
Well, when you do a storage array,
say you do like array, it's a U INT array.

37
00:02:27.497 --> 00:02:33.408
What happens is it goes to the next slot
down, wherever that slot is, say one.

38
00:02:33.408 --> 00:02:36.912
And this slot is used to store its length.

39
00:02:36.912 --> 00:02:42.162
And then index zero goes through
a magical little formula.

40
00:02:42.162 --> 00:02:48.940
It goes through its slot indexed cacked
along with the index into the array.

41
00:02:48.940 --> 00:02:56.371
So it appears somewhere magically in
between this gigantic list of items.

42
00:02:56.371 --> 00:02:59.616
Which means it knows its length,
so we can iterate it.

43
00:02:59.616 --> 00:03:03.247
And then it goes through a magical formula
to figure out each one of its slotting.

44
00:03:03.247 --> 00:03:05.092
So you're thinking well wanna collide.

45
00:03:05.092 --> 00:03:09.748
Well once again, that space is so big that
the probability of colliding is so very,

46
00:03:09.748 --> 00:03:10.487
very small.

47
00:03:10.487 --> 00:03:12.062
It's like flying through
an asteroid field.

48
00:03:12.062 --> 00:03:14.731
I know on the movies, it's super
awesome and you're dodging stuff.

49
00:03:14.731 --> 00:03:17.314
But in reality, you could fly
through the asteroid field for

50
00:03:17.314 --> 00:03:20.970
your entire lifetime around our galaxy,
and you'd never actually hit an asteroid.

51
00:03:20.970 --> 00:03:24.782
It's very boring, it's very sad,
very on Han solo like.

52
00:03:24.782 --> 00:03:28.090
And so the exact same thing
happens with mappings.

53
00:03:28.090 --> 00:03:32.124
Remember I said you'd understand
why mappings work the way they do.

54
00:03:32.124 --> 00:03:36.409
I think everybody now understands
exactly how they work, right?

55
00:03:36.409 --> 00:03:39.564
Mappings simply use their slot index,

56
00:03:39.564 --> 00:03:44.344
hashed in with the key that's
created to point to somewhere

57
00:03:44.344 --> 00:03:49.040
magically inside of this big
Gigantic place for each key.

58
00:03:49.040 --> 00:03:52.178
Therefore it doesn't
know what its keys are.

59
00:03:52.178 --> 00:03:53.417
It doesn't know anything about it.

60
00:03:53.417 --> 00:03:58.570
It's just a math formula for
offsetting into this gigantic slot array.

61
00:03:58.570 --> 00:04:00.812
Hence the reason you cannot for each.

62
00:04:00.812 --> 00:04:03.298
This makes perfect sense now, doesn't it?

63
00:04:03.298 --> 00:04:07.553
This is just like, yeah, it's kind of
it's almost sad because it becomes so

64
00:04:07.553 --> 00:04:09.193
less magical all of a sudden.

65
00:04:09.193 --> 00:04:13.601
Because at first it's just like well
how does it not know its own keys.

66
00:04:13.601 --> 00:04:17.632
Now it's like okay, it's just math,
boring math doing boring math things.

67
00:04:17.632 --> 00:04:21.744
All right, so that's that, so
let's kind of go over some examples.

68
00:04:21.744 --> 00:04:26.820
It will be a little bit more clear if
I can kind of program the examples,

69
00:04:26.820 --> 00:04:28.980
and then show you the memory.

70
00:04:28.980 --> 00:04:32.953
So let's keep on using these things.

71
00:04:32.953 --> 00:04:36.917
So what I'm gonna do,
is I'm gonna go like this.

72
00:04:38.438 --> 00:04:44.337
And let's create C and D,
and I'm gonna go like this,

73
00:04:44.337 --> 00:04:48.056
B equals four, C equals 0x45,

74
00:04:48.056 --> 00:04:52.176
D equals how about a 255, why not?

75
00:04:52.176 --> 00:04:57.209
There we go, so now we have these numbers,
and they're all stored.

76
00:04:57.209 --> 00:05:01.218
Well, technically you can't do that with
D, D is a U INT, you can't store that big.

77
00:05:01.218 --> 00:05:04.224
So I should probably store
something like 1F, how's that?

78
00:05:04.224 --> 00:05:08.653
Or even better levity five, our friend
LIC Bachman taught us about levity five.

79
00:05:08.653 --> 00:05:11.242
We should at least use it once
in this talk, so there we go.

80
00:05:11.242 --> 00:05:12.951
We have these values stored.

81
00:05:12.951 --> 00:05:17.142
So how do you think these things
are aligned in slot memory?

82
00:05:17.142 --> 00:05:21.838
Well, I can tell you the first one is 256
bits wide, so it's probably in slot 0.

83
00:05:21.838 --> 00:05:23.728
But what about the rest?

84
00:05:23.728 --> 00:05:25.205
How should they appear?

85
00:05:25.205 --> 00:05:28.949
Well, what I find to be the easiest way
to do things is we can play investigative

86
00:05:28.949 --> 00:05:29.706
journalists.

87
00:05:29.706 --> 00:05:33.497
So let's go in here, and
let's do the following.

88
00:05:33.497 --> 00:05:37.204
Let's go like this, console.log,
actually let's create

89
00:05:37.204 --> 00:05:41.709
a little async function to make it easy,
async function, print storage.

90
00:05:41.709 --> 00:05:46.410
And we're gonna take in a contract,
we're gonna take in a name, and

91
00:05:46.410 --> 00:05:49.258
we're gonna take in count, there we go.

92
00:05:49.258 --> 00:05:52.095
I'm gonna go for let I equals zero,

93
00:05:52.095 --> 00:05:56.174
I has to be less than count plus plus I,
there we go.

94
00:05:56.174 --> 00:06:01.712
Then I'm gonna go console.log, name, I,

95
00:06:01.712 --> 00:06:07.247
and then go await, and
we got to go like this,

96
00:06:07.247 --> 00:06:13.689
ethers provider get storage
at contract address I.

97
00:06:13.689 --> 00:06:19.581
So I want to be able to get the storage
at index I of this address.

98
00:06:19.581 --> 00:06:25.389
So that's all we're doing right
there pretty straightforward.

99
00:06:25.389 --> 00:06:28.909
So now let's go here, and

100
00:06:28.909 --> 00:06:33.551
go await print storage of B three.

101
00:06:33.551 --> 00:06:36.088
So we're gonna print the first
three items inside of B3.

102
00:06:36.088 --> 00:06:41.235
Now let's also give it the name of B, just
in case we start printing A which we will.

103
00:06:41.235 --> 00:06:43.951
So now we have this nice little function,
we can print it out.

104
00:06:43.951 --> 00:06:46.412
Let's see what is stored right away.

105
00:06:46.412 --> 00:06:48.700
So I'm gonna just simply launch this.

106
00:06:48.700 --> 00:06:50.575
So let's go over what we see.

107
00:06:50.575 --> 00:06:54.587
This may be a little unusual,
the first one contains our four, right?

108
00:06:54.587 --> 00:06:56.070
Because it was 256 bits.

109
00:06:56.070 --> 00:06:59.497
What is the next one
containing right here?

110
00:06:59.497 --> 00:07:03.469
&gt;&gt; Use address?

111
00:07:03.469 --> 00:07:08.169
&gt;&gt; No, it contains 45,
45 of course was what C was.

112
00:07:08.169 --> 00:07:11.849
Because C appears before the address,

113
00:07:11.849 --> 00:07:16.097
D appears before
the address of levity five.

114
00:07:16.097 --> 00:07:19.614
So if we go back here and look,
there it is, levity five.

115
00:07:19.614 --> 00:07:26.264
And if we look right here 3690,
we can now jump back to this.

116
00:07:26.264 --> 00:07:29.027
And let's see if we can see
contract A deployment of this.

117
00:07:29.027 --> 00:07:29.961
What is its address?

118
00:07:29.961 --> 00:07:35.728
3690 there we go, we can see
contract A's address still in there.

119
00:07:35.728 --> 00:07:39.990
So, it tightly packed these things as
tight as possible into your storage slots.

120
00:07:39.990 --> 00:07:45.906
That's why I said, it's an unknown cost
when it comes to how should I write these?

121
00:07:45.906 --> 00:07:48.442
Should I write it as a full UINT or
should I do a U and INT?

122
00:07:48.442 --> 00:07:52.629
Well, U and INT has to go into
its slot storage, do the offset,

123
00:07:52.629 --> 00:07:57.527
bring it over, shift out everything else,
and go here's your U and INT.

124
00:07:57.527 --> 00:08:01.250
Because it could tightly pack stuff,
which also means,

125
00:08:01.250 --> 00:08:05.762
if I simply jump in here, and
take this thing, and put it right here.

126
00:08:05.762 --> 00:08:09.960
Notice we went from two bytes of
storage or two slots of storage,

127
00:08:09.960 --> 00:08:11.922
into three slots of storage.

128
00:08:11.922 --> 00:08:15.472
Please I just split a storage slot and
Twain.

129
00:08:15.472 --> 00:08:19.488
Here's, what is it C and D?

130
00:08:19.488 --> 00:08:24.275
Here's B, here's the address of A, because
the address of A cannot be stored along

131
00:08:24.275 --> 00:08:26.785
with a UINT, because that's 256 bits.

132
00:08:26.785 --> 00:08:29.800
So it stores it according to ordering, and

133
00:08:29.800 --> 00:08:32.997
tries to tightly packet
as much as possible.

134
00:08:32.997 --> 00:08:34.772
Now I think we're gonna
have to take a break,

135
00:08:34.772 --> 00:08:36.284
we have a little snapping over there.

136
00:08:36.284 --> 00:08:38.850
Everyone take a moment,
it's about to get really intense, and

137
00:08:38.850 --> 00:08:40.619
I'd like to really kind
of finish this off.

138
00:08:40.619 --> 00:08:43.290
And then we're gonna do a quick diamond
deploy, we're gonna call it a day

