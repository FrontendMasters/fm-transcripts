WEBVTT

1
00:00:00.614 --> 00:00:01.322
So we have just compiled.

2
00:00:04.250 --> 00:00:04.950
What do we do now?

3
00:00:06.465 --> 00:00:08.126
Well, does anyone have any ideas?

4
00:00:08.126 --> 00:00:09.455
No, probably not.

5
00:00:09.455 --> 00:00:11.402
Because it doesn't make any sense.

6
00:00:11.402 --> 00:00:13.696
You've just compiled that
how to even run thing.

7
00:00:13.696 --> 00:00:16.425
Well, instead of running it,
let's first test it.

8
00:00:16.425 --> 00:00:18.615
Let's make sure it does
the thing we want it to do.

9
00:00:18.615 --> 00:00:22.063
So I've added three separate
statements of yarn install links.

10
00:00:22.063 --> 00:00:25.297
Because remember, high scores
people high scores we need these.

11
00:00:25.297 --> 00:00:28.935
So if you have the site, hopefully you do,
you got to go here and cut and

12
00:00:28.935 --> 00:00:30.489
paste each one of these ends.

13
00:00:30.489 --> 00:00:33.664
We're gonna be adding nomiclabs
hardhat-ethers and waffle.

14
00:00:33.664 --> 00:00:35.307
Those will help us a whole bunch.

15
00:00:35.307 --> 00:00:37.576
Nomiclabs, build these nice.

16
00:00:37.576 --> 00:00:42.469
Like little NPM packages that will kind
of make the experience of working with

17
00:00:42.469 --> 00:00:46.623
hardhat, even better,
it just layers in some extra functions.

18
00:00:46.623 --> 00:00:48.109
You'll see what we're doing.

19
00:00:48.109 --> 00:00:50.235
And so there we go.

20
00:00:50.235 --> 00:00:51.472
Pretty awesome.

21
00:00:51.472 --> 00:00:55.777
We're gonna add this, but you know what,
I've been having the strangest problem

22
00:00:55.777 --> 00:00:59.912
every time I do this, it I will reinstall
TS note here in a moment you'll see it.

23
00:00:59.912 --> 00:01:02.492
I just got done doing it you
can see that I did it and now,

24
00:01:02.492 --> 00:01:04.078
we're gonna have to do it again.

25
00:01:04.078 --> 00:01:06.678
I guarantee you and
then we're gonna do this and this is for

26
00:01:06.678 --> 00:01:09.931
testing unfortunately the testing
platform they really support chai.

27
00:01:09.931 --> 00:01:12.846
I didn't wanna have to go through
the process of using jest and

28
00:01:12.846 --> 00:01:15.547
trying to figure out how to
make these two play together.

29
00:01:15.547 --> 00:01:16.735
So I just said forget about it,

30
00:01:16.735 --> 00:01:19.770
I'd rather just use what they have because
the testing will be fairly simple.

31
00:01:19.770 --> 00:01:22.118
And just makes life a little bit easier.

32
00:01:22.118 --> 00:01:26.546
But you do have to use that chai
based testing we have to be like,

33
00:01:26.546 --> 00:01:28.480
this value shouldn't be.

34
00:01:28.480 --> 00:01:31.486
If I feel this way,
you have to do that long chaining.

35
00:01:31.486 --> 00:01:33.742
You'll see it's very uncomfortable.

36
00:01:33.742 --> 00:01:37.703
And of course, before we write any tests,
we need to do two more things.

37
00:01:37.703 --> 00:01:43.039
Let's take our hardhat.config and
rename it from hardhat.config.JavaScript

38
00:01:43.039 --> 00:01:47.164
to TypeScript, or
else you can't run TypeScript based tests.

39
00:01:47.164 --> 00:01:48.100
I know great.

40
00:01:48.100 --> 00:01:50.209
And then you have to
add in one more thing.

41
00:01:50.209 --> 00:01:52.338
So let's first go to the hardhat.config.

42
00:01:52.338 --> 00:01:54.978
And let's just rename that to TypeScript.

43
00:01:54.978 --> 00:01:57.978
And then of course, we have to add in
this import statement, hardhat.waffle.

44
00:01:57.978 --> 00:02:03.990
If you don't do that,
it will not work for TypeScript and

45
00:02:03.990 --> 00:02:09.010
I just cannot do,
I just can't do JavaScript.

46
00:02:09.010 --> 00:02:12.673
It's emotionally painful language to
work with TypeScript at least makes it

47
00:02:12.673 --> 00:02:13.359
fairly okay.

48
00:02:13.359 --> 00:02:16.304
And so now that we have that,
we can write our test.

49
00:02:16.304 --> 00:02:19.856
Everything's been set up to
write tests with TypeScript.

50
00:02:19.856 --> 00:02:21.501
And so let's write our first test.

51
00:02:21.501 --> 00:02:28.814
So remember, our folder style
should be a test directory.

52
00:02:28.814 --> 00:02:30.440
And then we can write our test.

53
00:02:30.440 --> 00:02:33.093
So let's go here and
create a test directory.

54
00:02:33.093 --> 00:02:35.885
And then inside of it,
you can call it whatever you want.

55
00:02:35.885 --> 00:02:37.627
I'll call it HelloWorld.ts
to make it easy.

56
00:02:37.627 --> 00:02:42.715
We're gonna import the first thing
as nomic labs, hardhat-ethers.

57
00:02:42.715 --> 00:02:45.395
You don't actually have to
save anything for this one.

58
00:02:45.395 --> 00:02:49.920
This one just simply adds a bunch of
convenient methods, to the ethers library.

59
00:02:49.920 --> 00:02:53.383
You'll get more familiar with
the ethers library as we go on.

60
00:02:53.383 --> 00:02:56.504
But for now, I just always import this.

61
00:02:56.504 --> 00:02:59.257
You don't technically have to import this.

62
00:02:59.257 --> 00:03:05.428
But I always have these problems with,
like the TypeScript language server.

63
00:03:05.428 --> 00:03:09.249
That if I don't do it in the file,
it won't actually run it.

64
00:03:09.249 --> 00:03:12.919
Because what happens when you run hardhat,
is just like WebPacker and

65
00:03:12.919 --> 00:03:15.481
in these other kind of
programs that you can run.

66
00:03:15.481 --> 00:03:18.617
They run their config file,
which will alter your environment and

67
00:03:18.617 --> 00:03:19.851
add things to the global.

68
00:03:19.851 --> 00:03:23.620
And then you have these other files that
are gonna be ran in that perspective.

69
00:03:23.620 --> 00:03:25.265
And then you have this like,

70
00:03:25.265 --> 00:03:29.597
TypeScript can't find these certain
methods hanging off these objects.

71
00:03:29.597 --> 00:03:32.561
Because it doesn't understand that it's
actually gonna be mutated by a library.

72
00:03:32.561 --> 00:03:35.514
So I just always intentionally
add this to every file, so

73
00:03:35.514 --> 00:03:38.232
that I have a very nice
language server experience.

74
00:03:38.232 --> 00:03:40.375
Alright, awesome.

75
00:03:40.375 --> 00:03:41.941
So let's go back here.

76
00:03:41.941 --> 00:03:46.546
And so now that we've imported that,
we're gonna import ethers from hardhat.

77
00:03:46.546 --> 00:03:52.679
So as I said, this nomiclab adds this
nice little ethers wrapper around ethers.

78
00:03:52.679 --> 00:03:55.061
It just adds a few extra
convenient methods.

79
00:03:55.061 --> 00:03:58.158
And so after we've done that we just need
to do one last thing which is we need

80
00:03:58.158 --> 00:03:58.954
expect from chai.

81
00:04:00.605 --> 00:04:05.579
There we go chai and that's gonna
be how we're gonna do our testing.

82
00:04:05.579 --> 00:04:09.422
And then we're just gonna do a little
quick describe of hello world.

83
00:04:09.422 --> 00:04:13.610
There we go,
function do one of those it should say hi.

84
00:04:13.610 --> 00:04:16.796
I've never been good at naming test.

85
00:04:16.796 --> 00:04:20.640
I always want to be better but I'm not
gonna just, I feel like I should type this

86
00:04:20.640 --> 00:04:23.687
nice sentence and then get too
long never know what to do here.

87
00:04:23.687 --> 00:04:27.357
So there we go, right away,
I'm sure everyone that's really hip into

88
00:04:27.357 --> 00:04:30.671
the JavaScript are like man
you're not using arrow functions.

89
00:04:30.671 --> 00:04:31.786
What's that all about?

90
00:04:31.786 --> 00:04:36.770
I don't use arrow functions unless if I
lexically, I'm using the this object.

91
00:04:36.770 --> 00:04:39.541
It actually has semantic
meaning underneath the hood and

92
00:04:39.541 --> 00:04:41.687
the compiler does do something different.

93
00:04:41.687 --> 00:04:45.899
So I really do try to give the best hints
to the compiler at all times while coding.

94
00:04:45.899 --> 00:04:50.661
It's just one of my personal things that I
do performance and it just drives me nuts.

95
00:04:50.661 --> 00:04:52.180
Seeing people do that.

96
00:04:52.180 --> 00:04:53.859
I don't know why.

97
00:04:53.859 --> 00:04:56.300
It probably has no meaning, but for
me, it just has a lot of meaning.

98
00:04:56.300 --> 00:04:57.247
It drives me crazy.

99
00:04:57.247 --> 00:05:00.871
All right, so when we're gonna do testing,
we need to do three things.

100
00:05:00.871 --> 00:05:04.267
We need to first set up our environment,
which we just did, right?

101
00:05:04.267 --> 00:05:06.285
We have hardhat-ethers, we have hardhat.

102
00:05:06.285 --> 00:05:07.859
We're looking good.

103
00:05:07.859 --> 00:05:10.526
Two, we need to deploy our contract.

104
00:05:10.526 --> 00:05:12.385
We'll do that here shortly.

105
00:05:12.385 --> 00:05:15.930
And then three, we need to call
our functions to task, right?

106
00:05:15.930 --> 00:05:20.420
So I'm pretty sure everyone
kinda saw that coming.

107
00:05:20.420 --> 00:05:22.332
So step one we've already done.

108
00:05:22.332 --> 00:05:24.973
So let's do two let's deploy our contract.

109
00:05:24.973 --> 00:05:29.396
Now, as I told you nomic labs add some
pretty nice little functions to the ether

110
00:05:29.396 --> 00:05:29.940
object.

111
00:05:29.940 --> 00:05:33.931
So let's grab our contract factory.

112
00:05:33.931 --> 00:05:37.250
Now, this normally doesn't exist,
but with this extension it does.

113
00:05:37.250 --> 00:05:40.755
And so the standard naming convention I've
seen is that you do it in capital letters

114
00:05:40.755 --> 00:05:42.571
as if it was like a floating class, right?

115
00:05:42.571 --> 00:05:48.344
So const HelloWorld equals await
ethers.getContractFactory up is set

116
00:05:48.344 --> 00:05:53.840
at a factory, and then you can just
give it the name that you named it.

117
00:05:53.840 --> 00:05:57.887
And remember it's not the name of
the file, it's the name of the contract.

118
00:05:57.887 --> 00:06:00.819
What effectively is gonna happen here?

119
00:06:00.819 --> 00:06:02.966
I think I may have a note for
me to explain this later, but

120
00:06:02.966 --> 00:06:03.849
just in case I don't.

121
00:06:03.849 --> 00:06:08.637
What happens here is that hardhat
has compiled your contract.

122
00:06:08.637 --> 00:06:11.680
It made a JSON file filled
with a bunch of information.

123
00:06:11.680 --> 00:06:14.728
In fact, we can even go look at said,
JSON file.

124
00:06:14.728 --> 00:06:17.375
And so
I'm gonna cat out artifacts contracts.

125
00:06:17.375 --> 00:06:22.946
HelloWorld.sol, HelloWorld.json and
I'm gonna pipe that to JQ.

126
00:06:22.946 --> 00:06:26.627
And so there you go,
you can see the deployed Bytecode.

127
00:06:26.627 --> 00:06:28.401
You can see just the Bytecode.

128
00:06:28.401 --> 00:06:30.947
You can see what functions exist on there,

129
00:06:30.947 --> 00:06:33.713
I can see that we have
a function called Hello.

130
00:06:33.713 --> 00:06:39.013
It returns type string, state immutability
is pure and it's type function.

131
00:06:39.013 --> 00:06:40.344
The contract name is this.

132
00:06:40.344 --> 00:06:41.574
This is where it's located.

133
00:06:41.574 --> 00:06:42.659
There you go.

134
00:06:42.659 --> 00:06:46.087
So you can actually see a lot about
your contract and this is really how it

135
00:06:46.087 --> 00:06:49.362
generates all the code that's needed for
us to be able to deploy it.

136
00:06:49.362 --> 00:06:51.492
Because it needs to be able to
store the Bytecode somewhere.

137
00:06:51.492 --> 00:06:53.902
Because the bike code's clearly
not the language we wrote in.

138
00:06:53.902 --> 00:06:58.468
It's some sort of intermediate format
that can be understood by the EVM

139
00:06:58.468 --> 00:07:00.535
the Ethereum Virtual Machine.

140
00:07:00.535 --> 00:07:02.104
So there we go.

141
00:07:02.104 --> 00:07:03.594
That's what that step does.

142
00:07:03.594 --> 00:07:05.949
Raise the file make sure
everything's in place.

143
00:07:05.949 --> 00:07:10.716
So now we can do the next step which
is like this const Hello equals

144
00:07:10.716 --> 00:07:12.935
await HelloWorld.deploy.

145
00:07:12.935 --> 00:07:16.955
So this is gonna deploy it to a network,
meaning it's gonna make

146
00:07:16.955 --> 00:07:21.585
the transaction that actually puts
a contract on to an ethereum network.

147
00:07:21.585 --> 00:07:22.906
It can be a test network.

148
00:07:22.906 --> 00:07:24.803
It could be the Rinkeby network.

149
00:07:24.803 --> 00:07:27.723
It could be the main net, but
then you're spending hundreds of dollars.

150
00:07:27.723 --> 00:07:30.149
So make sure you know what network
we're actually gonna be going to.

151
00:07:30.149 --> 00:07:36.451
And then lastly,
we can go await hello.deployed.

152
00:07:36.451 --> 00:07:38.034
Nice little method right here.

153
00:07:38.034 --> 00:07:42.362
It just ensures that your contract has
been confirmed by the network enough

154
00:07:42.362 --> 00:07:45.116
times, that it's
considered on the network.

155
00:07:45.116 --> 00:07:49.983
Because remember, when you do something
in ethereum, it's kinda like Cassandra,

156
00:07:49.983 --> 00:07:52.426
it's an eventually consistent machine.

157
00:07:52.426 --> 00:07:54.464
And so don't happen instantaneously.

158
00:07:54.464 --> 00:07:58.401
There has to be consensus and
agreement among the nodes.

159
00:07:58.401 --> 00:08:03.846
So now, we can just do a simple
expect await hello.hello.

160
00:08:03.846 --> 00:08:08.710
And then to equal yes, there's that
whole sentence thing, Hello, World.

161
00:08:08.710 --> 00:08:10.086
There we go, awesome.

162
00:08:10.086 --> 00:08:12.523
So now we have our first test done and

163
00:08:12.523 --> 00:08:17.733
kind of our first interaction with
the contract or with the network, done.

164
00:08:17.733 --> 00:08:20.850
And so what we're gonna do now,
is I'm gonna scroll through this and

165
00:08:20.850 --> 00:08:23.294
make sure I'm kinda doing
things in the right order.

166
00:08:23.294 --> 00:08:26.480
We're gonna go npx hardhat test.

167
00:08:26.480 --> 00:08:31.413
It's gonna go to your test folder, it's
going to execute things long as you've

168
00:08:31.413 --> 00:08:35.048
renamed hardhat config JSON or
JavaScript to TypeScript.

169
00:08:35.048 --> 00:08:37.112
And included the waffle,
the nomiclabs waffle,

170
00:08:37.112 --> 00:08:38.794
you will be able to run it in TypeScript.

171
00:08:38.794 --> 00:08:40.236
There we go.

172
00:08:40.236 --> 00:08:41.655
But again, as I've said,

173
00:08:41.655 --> 00:08:45.623
I still don't understand why it's not
just saving this yarn TS node thing.

174
00:08:45.623 --> 00:08:48.940
Yarn add give them the D, ts node, boom!

175
00:08:48.940 --> 00:08:49.921
There we go.

176
00:08:49.921 --> 00:08:53.456
I'm gonna redo I just did this right,
I just did this.

177
00:08:53.456 --> 00:08:55.962
All right, so
I'm gonna re execute it again.

178
00:08:55.962 --> 00:08:57.974
And it's gonna go through.

179
00:08:57.974 --> 00:09:00.193
And look at that, we passed.

