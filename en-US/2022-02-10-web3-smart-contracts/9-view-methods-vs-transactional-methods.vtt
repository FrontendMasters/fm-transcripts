WEBVTT

1
00:00:00.210 --> 00:00:04.636
And so, let's go on in this thing,
because there's our all that information,

2
00:00:04.636 --> 00:00:07.030
we went over there, sorry, no data.

3
00:00:07.030 --> 00:00:11.570
So the reason why there's no data is,
cuz storage is extremely expensive, right?

4
00:00:11.570 --> 00:00:15.168
We've altered state, it takes time for
transactions to process,

5
00:00:15.168 --> 00:00:18.652
which means we're gonna need to
re-execute our deploy script.

6
00:00:18.652 --> 00:00:22.030
And change some things about our contract.

7
00:00:22.030 --> 00:00:26.194
So let's go back to our contract,
let's go back to counter,

8
00:00:26.194 --> 00:00:28.845
let me just get rid of all these things.

9
00:00:28.845 --> 00:00:33.480
And let's change this into two functions,
one we're gonna have count.

10
00:00:33.480 --> 00:00:37.243
So I'm gonna remove the returns statement,

11
00:00:37.243 --> 00:00:43.394
next we're gonna have a public function
that is a view this time not pier.

12
00:00:43.394 --> 00:00:49.919
And returns the uint of counter, and
this simply just returns counter.

13
00:00:49.919 --> 00:00:53.830
This is a function in which reads state,

14
00:00:53.830 --> 00:00:58.417
this is a function in which writes state.

15
00:00:58.417 --> 00:01:02.747
Often that is how you wanna make these
two distinctions, when writing contracts.

16
00:01:02.747 --> 00:01:05.406
Is you want something that
does the mutation, and

17
00:01:05.406 --> 00:01:09.910
something that does the reading,
reason being is a readings for freezy.

18
00:01:09.910 --> 00:01:15.490
That's awesome, but b, you can't really
get data out of a write function.

19
00:01:15.490 --> 00:01:18.672
You have to wait for the transaction to
complete, you have to then go back and

20
00:01:18.672 --> 00:01:20.650
read some data about the transaction.

21
00:01:20.650 --> 00:01:25.256
It's not as simple as it makes it,
whereas this is very, very simple and

22
00:01:25.256 --> 00:01:26.700
it works everywhere.

23
00:01:26.700 --> 00:01:27.520
It's fantastic.

24
00:01:27.520 --> 00:01:30.208
&gt;&gt; Do those names of functions
have to be different?

25
00:01:30.208 --> 00:01:32.706
&gt;&gt; They do have to be
different great call,

26
00:01:32.706 --> 00:01:37.710
I probably should have done get( counter)
that makes a lot more sense, right?

27
00:01:37.710 --> 00:01:40.302
I would have had an error,
I would have blamed it on everybody for

28
00:01:40.302 --> 00:01:41.312
the learning purposes.

29
00:01:41.312 --> 00:01:44.322
But kinda missed that
opportunity to blame the guy, so

30
00:01:44.322 --> 00:01:46.293
we'll just go with this all right.

31
00:01:46.293 --> 00:01:49.441
So now that we have this getCounter,
return counter, awesome,

32
00:01:49.441 --> 00:01:52.260
that means we have to go back
to our deploy script, right?

33
00:01:52.260 --> 00:01:55.440
We're gonna have to go back, and
we're gonna have to change some things.

34
00:01:55.440 --> 00:02:00.656
So let's do that now, let's go to our
deploy counter and we deploy our script.

35
00:02:00.656 --> 00:02:03.763
And then currently we
just simply execute it,

36
00:02:03.763 --> 00:02:08.393
now I could take the time to show you
this, but I'm not going to do it.

37
00:02:08.393 --> 00:02:11.597
If we were to simply point
to our script now, and

38
00:02:11.597 --> 00:02:14.174
try to call getCounter versus count.

39
00:02:14.174 --> 00:02:19.141
Obviously, getCounter does not currently
exist on our diploids counter,

40
00:02:19.141 --> 00:02:21.864
so we have to deploy a new counter script.

41
00:02:21.864 --> 00:02:25.920
How you identify a counter is,
by its address and its interface,

42
00:02:25.920 --> 00:02:29.040
you don't identify it by anything else,
right?

43
00:02:29.040 --> 00:02:30.968
There's no source code
that you're referencing,

44
00:02:30.968 --> 00:02:32.590
though you can get the source code.

45
00:02:32.590 --> 00:02:36.300
You are referencing simply an address and
an interface.

46
00:02:36.300 --> 00:02:39.661
So, let's go here,
our deploy script is pretty much great,

47
00:02:39.661 --> 00:02:42.080
it's this part that's not as great.

48
00:02:42.080 --> 00:02:49.110
So let's go here, and let's delete this
and let's do a quick count right here.

49
00:02:49.110 --> 00:02:53.630
And then we can go await counter,
getCounter there we go.

50
00:02:53.630 --> 00:02:58.240
So now we're gonna count it once, and then
we're gonna get the counter afterwards.

51
00:02:59.880 --> 00:03:03.810
Of course don't forget the awaits,
if you forget the awaits nothing works.

52
00:03:03.810 --> 00:03:06.210
So don't make that mistake.

53
00:03:06.210 --> 00:03:07.793
It happens to everybody a few times,

54
00:03:07.793 --> 00:03:11.820
everyone loses their promises from now on
that, yeah, now that is just part of life.

55
00:03:11.820 --> 00:03:16.455
So we're gonna redeploy our counter,
and it's gonna cause a new counter to

56
00:03:16.455 --> 00:03:19.830
be written to the network
that has our new methods.

57
00:03:19.830 --> 00:03:23.120
So as it was asked earlier,
how do you upgrade your contract?

58
00:03:23.120 --> 00:03:28.260
Well, we're doing an upgrade right now,
which totally sucks is the current answer.

59
00:03:28.260 --> 00:03:32.760
So we're going to hit Enter, and hopefully
long as I've done everything correctly,

60
00:03:32.760 --> 00:03:34.190
we will see out the answer.

61
00:03:34.190 --> 00:03:37.720
So now we did see out the answer,
we saw the value of 1.

62
00:03:37.720 --> 00:03:41.010
But, it's maybe a little bit
different than what you thought.

63
00:03:41.010 --> 00:03:44.703
If we look on here, we will see right
away that we deployed the counter,

64
00:03:44.703 --> 00:03:46.140
it has a new address.

65
00:03:46.140 --> 00:03:50.471
We went down here we made a second
transition, and we counted count, and

66
00:03:50.471 --> 00:03:52.610
then below that we made an eth call.

67
00:03:52.610 --> 00:03:56.180
Remember these are reading operations.

68
00:03:56.180 --> 00:03:58.691
We called to the counter location, and

69
00:03:58.691 --> 00:04:03.797
we called function getCounter from our
address, it didn't cost us anything.

70
00:04:03.797 --> 00:04:08.042
And we got that information back out,
but more so,

71
00:04:08.042 --> 00:04:13.197
let's see why does it keep that
don't worry about that part.

72
00:04:13.197 --> 00:04:17.682
Actually, I already went over this, I
forgot to do this quick update right here,

73
00:04:17.682 --> 00:04:19.980
sorry, I deviated from my script.

74
00:04:19.980 --> 00:04:23.683
So you can only get data out of view and
pure functions, as we just showed you.

75
00:04:23.683 --> 00:04:27.150
Here's the reasons why doesn't
cost any money, it's fantastic.

76
00:04:27.150 --> 00:04:29.112
I forgot to explain this part,

77
00:04:29.112 --> 00:04:33.930
a view function is one that reads
contracts state just doesn't alter it.

78
00:04:33.930 --> 00:04:38.378
A pure function does not read or write to
contract state, very good to keep in mind,

79
00:04:38.378 --> 00:04:40.876
it just specifies what
is the state changing.

80
00:04:40.876 --> 00:04:43.718
I'll also tell you about
some scopes really quickly,

81
00:04:43.718 --> 00:04:47.318
public means anyone can call it,
private means only you can call it.

82
00:04:47.318 --> 00:04:50.381
Internally means only you and
your subclasses can call it,

83
00:04:50.381 --> 00:04:54.840
externally means only people from the
outside can call it, you cannot call it.

84
00:04:54.840 --> 00:04:57.862
So it's like public, but different, right?

85
00:04:57.862 --> 00:05:00.599
It's a unique public,
it's a private public, right?

86
00:05:00.599 --> 00:05:04.460
It's also only the public on the outside
can call it, these are meant for

87
00:05:04.460 --> 00:05:07.383
functions that you only want
external people to call.

88
00:05:07.383 --> 00:05:08.960
That mutate or change state,

89
00:05:08.960 --> 00:05:12.370
that you do not want to ever
call within your contract.

90
00:05:12.370 --> 00:05:14.390
Do they actually add a lot of value?

91
00:05:14.390 --> 00:05:17.060
There is one place that it's
used that's very, very nice.

92
00:05:17.060 --> 00:05:21.774
But nonetheless, there's the four scopes,
you'll probably end up using public,

93
00:05:21.774 --> 00:05:23.770
and private, and internal.

94
00:05:23.770 --> 00:05:27.279
External, you'll pretty much never
use unless you're inheriting from

95
00:05:27.279 --> 00:05:28.020
a contractor.

96
00:05:28.020 --> 00:05:30.940
So there we go, we rewrote our
contract to separate it out.

97
00:05:30.940 --> 00:05:33.530
We did the getCOUNT function,
it was fantastic.

98
00:05:33.530 --> 00:05:36.560
But why, was it a BigNumber?

99
00:05:36.560 --> 00:05:38.878
Notice that when we look at our output,

100
00:05:38.878 --> 00:05:43.090
it says the word BigNumber value
1 that's a little bit different.

101
00:05:43.090 --> 00:05:46.040
Maybe you weren't expecting the word
BigNumber, the big out of this.

102
00:05:46.040 --> 00:05:49.770
Why are we getting an object, and how
could I just didn't get a number, right?

103
00:05:50.770 --> 00:05:54.450
Well, let's ask the question,
what's the size of an int?

104
00:05:54.450 --> 00:05:57.042
&gt;&gt; 236
&gt;&gt; Great answer, but

105
00:05:57.042 --> 00:05:59.460
it's lacking something,
where was that int?

106
00:05:59.460 --> 00:06:04.801
Well, if it's in JavaScript, a number
is technically 2 to the 53 minus 1,

107
00:06:04.801 --> 00:06:09.927
or commonly referred to as 9 quadrillion,
7 trillion,199 billion.

108
00:06:09.927 --> 00:06:13.807
256 or 254 million, 740,991,

109
00:06:13.807 --> 00:06:18.187
classic number,
we all know that by heart, right?

110
00:06:18.187 --> 00:06:23.109
Rust you obviously can specify
its width i32, or it has u size,

111
00:06:23.109 --> 00:06:27.597
which just simply is the size
of your system architecture.

112
00:06:27.597 --> 00:06:31.990
Cpp kinda has the same thing except for
that long, cuz long was it long enough?

113
00:06:31.990 --> 00:06:34.114
And it's a little bit more confusing, or

114
00:06:34.114 --> 00:06:37.099
you can use these very
conveniently named types, right?

115
00:06:37.099 --> 00:06:40.823
But everything's trying to
convey to you some sort of size,

116
00:06:40.823 --> 00:06:45.218
in Solidity, remember,
numbers are 256 bits, you were correct.

117
00:06:45.218 --> 00:06:47.445
But JavaScript can't do that, right?

118
00:06:47.445 --> 00:06:50.595
As you can see 256 bits
significantly larger, right?

119
00:06:50.595 --> 00:06:53.045
So BigNumber was created by ethers.

120
00:06:53.045 --> 00:06:56.681
So it can display these significantly
larger numbers that just would

121
00:06:56.681 --> 00:06:58.131
not work with JavaScript.

122
00:06:58.131 --> 00:07:02.202
So let's do a quick experiment, let's
change our number from something that's

123
00:07:02.202 --> 00:07:05.880
too big, to something that should
be able to fit within JavaScript.

124
00:07:05.880 --> 00:07:08.160
So I'm just gonna go back here, you don't
have to type this if you don't want to.

125
00:07:08.160 --> 00:07:12.850
I'm gonna go to my contract and
replace uint with uint32, there we go.

126
00:07:12.850 --> 00:07:17.558
And now went from a BigNumber to a smaller
number that I have specifically said,

127
00:07:17.558 --> 00:07:20.340
hey, you can only be 32 bits long.

128
00:07:20.340 --> 00:07:24.100
I'm gonna go back to our deployment
script, and just simply relaunch it.

129
00:07:26.252 --> 00:07:29.270
And it compiles ye,
we've done everything correct,

130
00:07:29.270 --> 00:07:31.968
and look at what the value
is that comes back out.

131
00:07:31.968 --> 00:07:35.503
It's just simply one,
so what happened there?

132
00:07:35.503 --> 00:07:38.172
Well, it's not a theory
of being smart either

133
00:07:38.172 --> 00:07:41.052
js is gonna make sure that
the type you're using.

134
00:07:41.052 --> 00:07:43.992
And the interface you're using
is actually gonna produce out

135
00:07:43.992 --> 00:07:47.737
the values you would expect in JavaScript,
which is very, very convenient.

136
00:07:47.737 --> 00:07:50.911
So just kind of a note,
if you are using this library and

137
00:07:50.911 --> 00:07:55.335
you're returning numbers that don't
have to be bounded say by 4 billion.

138
00:07:55.335 --> 00:07:59.505
You need more, then you're gonna have to
return out a type that may be a bit wonky

139
00:07:59.505 --> 00:08:01.259
to work with inside JavaScript.

140
00:08:01.259 --> 00:08:04.699
Else you can return out things
specifically, you can cast it.

141
00:08:04.699 --> 00:08:08.838
If I went back to this and I didn't wanna
do that, I could actually come here and

142
00:08:08.838 --> 00:08:11.680
do that exact same thing,
and then just go uint 32.

143
00:08:11.680 --> 00:08:15.342
And just cast it, like you would normally
cast it in any other C style language.

144
00:08:15.342 --> 00:08:19.050
So now therefore we have that, but you do
run the danger, of course, of an overflow.

145
00:08:20.330 --> 00:08:21.820
So there's a little bit of a danger there.

146
00:08:21.820 --> 00:08:25.860
If you don't know what an overflow is,
if you count to 4.2 billion and

147
00:08:25.860 --> 00:08:28.457
then you add one on
a unsigned 32 bit number.

148
00:08:28.457 --> 00:08:32.290
You go above 32 bits, it rolls back
all the way over to zero, right?

149
00:08:32.290 --> 00:08:34.662
It can get screwed up,
because that's just what happens.

150
00:08:36.150 --> 00:08:40.097
If you don't know anything about bits,
when I go over that section in significant

151
00:08:40.097 --> 00:08:42.800
detail, it will make a lot
more sense why that happens.

