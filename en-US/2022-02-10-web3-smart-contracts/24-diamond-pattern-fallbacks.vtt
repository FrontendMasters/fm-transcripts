WEBVTT

1
00:00:00.000 --> 00:00:02.310
Again, the point of this
course is to make it so

2
00:00:02.310 --> 00:00:04.752
that you understand how
to use smart contracts.

3
00:00:04.752 --> 00:00:08.468
You may not exit this course
knowing all the semantics you need

4
00:00:08.468 --> 00:00:10.482
to be able to create your own NFT.

5
00:00:10.482 --> 00:00:13.814
But you will pretty quickly be able
to do it because you understand

6
00:00:13.814 --> 00:00:14.852
the fundamentals.

7
00:00:14.852 --> 00:00:17.565
I'm really trying to shoot
a good fundamental course here.

8
00:00:17.565 --> 00:00:19.920
If you wanna quick refresher on syntax.

9
00:00:19.920 --> 00:00:23.029
Crypto zombies.io, honestly one
of the best ones I've ever done.

10
00:00:23.029 --> 00:00:27.263
It's number one in the world apparently

11
00:00:27.263 --> 00:00:32.625
415,672 plus very odd
number to put a plus.

12
00:00:32.625 --> 00:00:36.473
By the way usually people make
it a little bit more approximate

13
00:00:36.473 --> 00:00:38.033
have taken this course.

14
00:00:38.033 --> 00:00:39.900
It's fun, I did it, it was great.

15
00:00:39.900 --> 00:00:41.538
They even do some bitwise stuff and

16
00:00:41.538 --> 00:00:44.371
kind of do something very similar
to what I did with heroes.

17
00:00:44.371 --> 00:00:48.301
But they do zombies eat crypto kitties,
it's a lot of fun stuff.

18
00:00:48.301 --> 00:00:53.310
So we're gonna move on to
diamonds are forever, sort of.

19
00:00:53.310 --> 00:00:56.893
So there are a way around the size issue,
we could hack our own solution.

20
00:00:56.893 --> 00:01:00.161
So you can imagine
the solution where alright,

21
00:01:00.161 --> 00:01:03.520
let's have contract area
we launched that one.

22
00:01:03.520 --> 00:01:09.259
Then we have contract B that launches
from there, then we point to A.

23
00:01:09.259 --> 00:01:14.816
And when people call us we call A and then
if we need to update A we can update A.

24
00:01:14.816 --> 00:01:17.594
And then pass in a new
dress that calls new A, but

25
00:01:17.594 --> 00:01:20.942
we're trying to store everything
we can and contract B.

26
00:01:20.942 --> 00:01:24.281
And it get really messy really confusing
and if you make a bug in contract B,

27
00:01:24.281 --> 00:01:25.877
you still have to do the same thing.

28
00:01:25.877 --> 00:01:27.357
So then you're like, okay,

29
00:01:27.357 --> 00:01:30.507
I'll make a contract C that points
to b that B points to a right?

30
00:01:30.507 --> 00:01:34.067
Like it just the problem goes forever,
right,

31
00:01:34.067 --> 00:01:37.633
you can't really get
around bugs that happen.

32
00:01:37.633 --> 00:01:39.612
So let's use a well established pattern,
so

33
00:01:39.612 --> 00:01:42.015
the pattern is called
the diamond pattern right here.

34
00:01:42.015 --> 00:01:44.934
It effectively addresses two points
your contract is too big and

35
00:01:44.934 --> 00:01:47.644
you want to be able to update
your contractor at some point.

36
00:01:47.644 --> 00:01:51.591
It's the Etherium improvement plan 25,35,

37
00:01:51.591 --> 00:01:56.282
from the site here's the motivation for
the site will go on.

38
00:01:56.282 --> 00:01:58.324
I don't really read
a really need to do that.

39
00:01:58.324 --> 00:02:02.260
From my own perspective how
I like to learn things is,

40
00:02:02.260 --> 00:02:06.205
I want to know as much as I
need to know that I can use it.

41
00:02:06.205 --> 00:02:10.094
I have written HTTP HB two and
Web Sockets for Netflix and

42
00:02:10.094 --> 00:02:15.499
I don't need to understand how TCP works
to write those, right none of us do.

43
00:02:15.499 --> 00:02:20.398
We don't need to know that, we just simply
need to know how it works in a sense

44
00:02:20.398 --> 00:02:24.470
that okay TCP sends reliable in
order data or structured data.

45
00:02:24.470 --> 00:02:29.128
Therefore when I send 10,000k worth of
data I'm gonna get 10,000k in the same

46
00:02:29.128 --> 00:02:30.487
border on the other side.

47
00:02:30.487 --> 00:02:34.526
Now how I interpret that data,
that's something that sits on top of TCP.

48
00:02:34.526 --> 00:02:38.318
And much like this, you don't need to
understand every fine minutiae of how

49
00:02:38.318 --> 00:02:39.808
the diamond contract works.

50
00:02:39.808 --> 00:02:43.978
You just simply need an understand
enough that A you don't screw yourself.

51
00:02:43.978 --> 00:02:48.031
And B, if there's a problem deploying
trying to understand a feature,

52
00:02:48.031 --> 00:02:49.634
you can just take care of it.

53
00:02:49.634 --> 00:02:53.209
And so I really want to make
sure we get that, and so

54
00:02:53.209 --> 00:02:56.713
first let me kind of
whiteboard out the diamond.

55
00:02:56.713 --> 00:03:00.808
So first, I'm just going to draw
a really beautiful diamond pattern here,

56
00:03:00.808 --> 00:03:03.053
my goodness look at how beautiful that is.

57
00:03:08.068 --> 00:03:12.442
Effectively what happens is,
that here's the outside world,

58
00:03:12.442 --> 00:03:14.550
here is our diamond contract.

59
00:03:14.550 --> 00:03:18.370
All the outside world goes to our
diamond contract and calls it.

60
00:03:18.370 --> 00:03:20.651
Inside of our diamond contract,

61
00:03:20.651 --> 00:03:24.974
we can have one or more contracts
that are actually executing.

62
00:03:24.974 --> 00:03:29.865
But here's the amazing part, all the data
is stored on the diamond contract and

63
00:03:29.865 --> 00:03:31.407
we don't know about it.

64
00:03:31.407 --> 00:03:36.244
We assume we're working with our own
data but that's not what's happening,

65
00:03:36.244 --> 00:03:37.862
just for the sake of that.

66
00:03:37.862 --> 00:03:43.451
So the diamond will route our call to the
appropriate contract each time something

67
00:03:43.451 --> 00:03:49.122
gets called, and of course returned back
out the data from each one of these calls.

68
00:03:49.122 --> 00:03:52.164
So that it works out correctly,
we can go back out the other

69
00:03:52.164 --> 00:03:55.719
end as if you're calling a single
contract with all these methods.

70
00:03:55.719 --> 00:03:57.416
So this sounds great, right?

71
00:03:57.416 --> 00:03:58.793
I like to think of it more like a,

72
00:03:58.793 --> 00:04:01.558
it's almost feels like
a microservice architecture, right?

73
00:04:01.558 --> 00:04:02.819
You have your domain and

74
00:04:02.819 --> 00:04:06.237
behind it actually is just a huge
amount of different services.

75
00:04:06.237 --> 00:04:08.786
And they all come back with
a single value back out,

76
00:04:08.786 --> 00:04:12.662
it's not like your request actually is
routing itself to the correct place.

77
00:04:12.662 --> 00:04:15.970
It just does it automatically based
on how you set everything up.

78
00:04:15.970 --> 00:04:20.077
And so I like to think of it that way,
why was it chosen to be called diamonds?

79
00:04:20.077 --> 00:04:24.530
I don't know there's a lot of kind of
bespoke language that he uses to describe

80
00:04:24.530 --> 00:04:25.751
all the operations.

81
00:04:25.751 --> 00:04:29.223
I also find it very confusing to read
the documentation, just cuz of that.

82
00:04:29.223 --> 00:04:31.187
So I'm going to kind of avoid
using their language and

83
00:04:31.187 --> 00:04:33.688
just try to describe it more in
micro service kind of architecture.

84
00:04:33.688 --> 00:04:37.153
So I think, the rest the world that's
how we think, so it's a little easier.

85
00:04:37.153 --> 00:04:40.417
I'm just gonna be kind of walking
through some technical aspects

86
00:04:40.417 --> 00:04:43.516
of how contracts work,
memory works, delegate calls work.

87
00:04:43.516 --> 00:04:46.255
And you can kind of watch and
understand it,

88
00:04:46.255 --> 00:04:50.778
because you probably will never really
touch most of what I'm gonna do.

89
00:04:50.778 --> 00:04:53.177
You just need to know that it's
out there and understand it.

90
00:04:53.177 --> 00:04:56.024
So it's my favorite part live coding time,
so

91
00:04:56.024 --> 00:04:59.240
let's first start off with fallbacks,
all right.

92
00:04:59.240 --> 00:05:04.126
So a fallback actually was
an interesting proposal that used

93
00:05:04.126 --> 00:05:08.641
to be available in Mozilla's browser for
JavaScript.

94
00:05:08.641 --> 00:05:13.800
You could actually put a magic function
on any object, and this magic function

95
00:05:13.800 --> 00:05:18.510
would be called if anything was called
on the object that did not exist.

96
00:05:18.510 --> 00:05:21.079
I think proxy objects do that,
now in JavaScript so

97
00:05:21.079 --> 00:05:23.363
you can kinda recreate this functionality.

98
00:05:23.363 --> 00:05:26.504
But it was really cool cuz you could
just have this magic fallback.

99
00:05:26.504 --> 00:05:29.153
Python has this right if I'm not mistaken,

100
00:05:29.153 --> 00:05:31.808
I'm sure other languages
do I have no idea.

101
00:05:31.808 --> 00:05:34.758
So let's go let's see where
are we let's jump in here and

102
00:05:34.758 --> 00:05:37.473
let's create something
called fallback dot soul.

103
00:05:37.473 --> 00:05:42.247
In my head I still say shit out of luck
every single time I'm gonna go right here

104
00:05:42.247 --> 00:05:44.904
and I'm gonna import in hard hat, right?

105
00:05:44.904 --> 00:05:47.185
console dot soul.

106
00:05:47.185 --> 00:05:52.841
And let's go fall back to that and
let's create a internal function.

107
00:05:52.841 --> 00:05:57.615
I'll call it foo internal,
and it doesn't really matter,

108
00:05:57.615 --> 00:06:00.617
I guess I can go here, yeah, why not?

109
00:06:00.617 --> 00:06:03.298
Are just gonna go console dot log,
hello world.

110
00:06:03.298 --> 00:06:08.796
Let's see Somehow got down in but
it worked out, I think

111
00:06:08.796 --> 00:06:11.975
I might actually have to call to view
because I'm referring to console dot log.

112
00:06:11.975 --> 00:06:14.956
I'm not really sure if that is there
is not true and there we go, so

113
00:06:14.956 --> 00:06:16.596
I created this internal function.

114
00:06:16.596 --> 00:06:19.577
No one can call this function but
me and subclasses,

115
00:06:19.577 --> 00:06:23.183
then I'm going to create a special
function called fallback.

116
00:06:23.183 --> 00:06:26.754
Now what I want you to notice about
fallback is that I do not put the word

117
00:06:26.754 --> 00:06:28.060
function in front of it.

118
00:06:28.060 --> 00:06:29.378
Much like constructor,

119
00:06:29.378 --> 00:06:32.961
you don't specify it's a function
it has a very specific meaning.

120
00:06:32.961 --> 00:06:37.263
Next, I put the word external,
fallback functions cannot be called

121
00:06:37.263 --> 00:06:41.280
by the contract itself,
it may only be called from the outside.

122
00:06:41.280 --> 00:06:45.251
Lastly, I put payable, because you
don't know if you're gonna get paid or

123
00:06:45.251 --> 00:06:48.800
not from this fallback, right,
so, we shouldn't dictate that.

124
00:06:48.800 --> 00:06:51.364
And so what we're gonna do is I'm
gonna like this, I'm gonna call foo.

125
00:06:51.364 --> 00:06:55.653
I'm gonna go console.log fallback and
then on top of it,

126
00:06:55.653 --> 00:07:00.302
I'm just gonna call it revert and
go, you shouldn't be here.

127
00:07:00.302 --> 00:07:06.157
Right cuz to do a proper fallback function
requires us to break into assembly,

128
00:07:06.157 --> 00:07:10.700
assign call data to locations,
call out to something else.

129
00:07:10.700 --> 00:07:12.568
Assign the return data into other,

130
00:07:12.568 --> 00:07:15.503
it's fairly complicated to
get it perfectly correct.

131
00:07:15.503 --> 00:07:18.608
So I'm just gonna shortcut it right
here and get to right here, so

132
00:07:18.608 --> 00:07:19.742
close enough, right?

133
00:07:19.742 --> 00:07:23.032
Because I don't need to understand how
these work, I just need to understand or

134
00:07:23.032 --> 00:07:25.305
I don't need the standard
specific minutiae of them.

135
00:07:25.305 --> 00:07:27.024
I just need to understand the how.

136
00:07:27.024 --> 00:07:31.087
So now that we have that,
let's go to our deploy script,

137
00:07:31.087 --> 00:07:34.656
I'm gonna deploy fall back
to s go bam going here.

138
00:07:34.656 --> 00:07:39.865
Let's see is going here,
Yank that, paste it in here.

139
00:07:39.865 --> 00:07:44.841
And deploy, fallback,
going here, rename that,

140
00:07:44.841 --> 00:07:48.460
fallback, fallback, awesome, and

141
00:07:48.460 --> 00:07:52.546
is there anything we need, probably not.

142
00:07:52.546 --> 00:07:54.780
Fall back, there we go, down and here.

143
00:07:58.243 --> 00:08:01.250
Alright, and so instead of calling count
actually, why not let's just call count,

144
00:08:01.250 --> 00:08:02.518
doesn't really matter, does it?

145
00:08:02.518 --> 00:08:05.163
No, it doesn't.
So there we go, we have deployed or

146
00:08:05.163 --> 00:08:05.964
fallback.

147
00:08:05.964 --> 00:08:09.778
We have an address, and
then we're just gonna call count,

148
00:08:09.778 --> 00:08:12.690
count does not exist on fallback, correct?

149
00:08:12.690 --> 00:08:16.232
So we can't quite do that
because ethers is going to fail.

150
00:08:16.232 --> 00:08:23.379
Because ethers requires some, it requires
an API to hydrate these magic functions.

151
00:08:23.379 --> 00:08:26.806
So I'm gonna kind of cheat,
I'm gonna show you a really cool thing.

152
00:08:26.806 --> 00:08:30.740
So let's go back to fall back,
and let's go like this,

153
00:08:30.740 --> 00:08:33.683
I'm gonna erase all this nonsense here.

154
00:08:33.683 --> 00:08:38.288
I'm gonna create an interface,
let's click this interface.

155
00:08:38.288 --> 00:08:41.910
I'm going to call it an AI fallback,
I know it's great?

156
00:08:41.910 --> 00:08:47.220
And I'm gonna say there's a function
called count that is a public function,

157
00:08:47.220 --> 00:08:49.079
and that's that, right?

158
00:08:49.079 --> 00:08:52.691
So there we go are actually external, you
can only say their external, there we go.

159
00:08:52.691 --> 00:08:54.470
So this is an interface.

160
00:08:54.470 --> 00:08:56.510
So now what I'm gonna do?

161
00:08:56.510 --> 00:09:01.003
I'm gonna go back to my deploy code, and

162
00:09:01.003 --> 00:09:06.818
I'm gonna go let's see cost
F equals ethers await,

163
00:09:06.818 --> 00:09:10.801
get contract at fallback address.

164
00:09:10.801 --> 00:09:16.228
I'm gonna use the address of the fallback
contract that we just got done creating,

165
00:09:16.228 --> 00:09:18.787
which does not have count or whatever,

166
00:09:18.787 --> 00:09:21.518
what did I put in here
count as a function.

167
00:09:21.518 --> 00:09:28.050
And what I'm gonna use, is I'm gonna
use I fall back as what it should be.

168
00:09:28.050 --> 00:09:31.464
So if I believe I got these contracts or
these things in the correct order.

169
00:09:31.464 --> 00:09:35.482
I'm gonna get an I fall back remember this
hard hat they put this method here for me.

170
00:09:35.482 --> 00:09:37.080
They've compiled our contracts,

171
00:09:37.080 --> 00:09:39.642
they know that there's
an interface called I fallback.

172
00:09:39.642 --> 00:09:41.745
We're gonna use that interface and

173
00:09:41.745 --> 00:09:45.890
apply it to an address that definitely
does not have these functions.

174
00:09:45.890 --> 00:09:48.964
And then I'm going to call count.

175
00:09:48.964 --> 00:09:53.875
So let's see what happens,
let's just jump in here and

176
00:09:53.875 --> 00:09:57.023
find a MPX hardhat run and no rink B.

177
00:09:57.023 --> 00:09:59.726
We wanna pay some money here for
nothing and

178
00:09:59.726 --> 00:10:03.042
then let's go network local
host just like before.

179
00:10:03.042 --> 00:10:07.003
I am running a node perfect, so
if I've done everything correctly,

180
00:10:07.003 --> 00:10:09.270
this should just launch, there we go.

181
00:10:09.270 --> 00:10:14.203
Look at the error I got,
you shouldn't be here, so we did,

182
00:10:14.203 --> 00:10:18.960
we executed the fallback on an object,
and even more so.

183
00:10:18.960 --> 00:10:23.514
Look at what executed, hello world,
fallback, which if you look at this thing,

184
00:10:23.514 --> 00:10:26.025
Hello worlds from foo
fallbacks right here.

185
00:10:26.025 --> 00:10:30.868
so we're able to interact with our
contract read data call functions

186
00:10:30.868 --> 00:10:35.388
do something and then we can call
revert or we could return data.

187
00:10:35.388 --> 00:10:38.279
It's a little bit like I said
the returning is pretty confusing because

188
00:10:38.279 --> 00:10:39.976
we don't actually specify return here.

189
00:10:39.976 --> 00:10:42.070
But that doesn't mean you can't return,

190
00:10:42.070 --> 00:10:45.688
solidity in the assembly world pretty
much allows you to do anything and.

191
00:10:45.688 --> 00:10:50.161
You'll find out more I'm going to kind
of pull the rug out if you will on just

192
00:10:50.161 --> 00:10:52.870
how anything goes in
solidity here shortly.

