WEBVTT

1
00:00:00.000 --> 00:00:01.200
All right, there we go, beautiful.

2
00:00:01.200 --> 00:00:03.895
So we're gonna move on and
let's do the next part of this.

3
00:00:03.895 --> 00:00:07.322
All right, so this is where things
are gonna get a little bit rowdy, okay?

4
00:00:07.322 --> 00:00:08.787
So hero should be stored on chain.

5
00:00:08.787 --> 00:00:13.107
Yep, we totally have that we have
our address to uns right there.

6
00:00:13.107 --> 00:00:19.059
We should have five stats strength,
health, intellect, magic and dexterity.

7
00:00:19.059 --> 00:00:22.199
For the sake of this I'm gonna take this,
I'm gonna paste it.

8
00:00:22.199 --> 00:00:27.123
And I'm gonna switch out around dexterity
cuz normally when I've done this in

9
00:00:27.123 --> 00:00:30.779
practice, I've always had
dexterity right there just so

10
00:00:30.779 --> 00:00:33.030
I don't actually screw myself up.

11
00:00:33.030 --> 00:00:34.556
It just really just take
me a moment longer to

12
00:00:34.556 --> 00:00:36.059
make sure I've done everything correct.

13
00:00:36.059 --> 00:00:38.106
So we're gonna have those right there.

14
00:00:38.106 --> 00:00:41.438
And then let's go look at more of
our requirements really quickly.

15
00:00:41.438 --> 00:00:43.668
The stats need to be randomly generated.

16
00:00:43.668 --> 00:00:46.462
So I'm about to hit
a very sensitive topic.

17
00:00:46.462 --> 00:00:49.814
And I think you've created a NFT or
have some experience with it.

18
00:00:49.814 --> 00:00:54.368
Is a very sensitive topic in the NFT
world, which is random number generation.

19
00:00:54.368 --> 00:00:59.312
Now for the sake of ours, I'm gonna use
a very simple random generation function.

20
00:00:59.312 --> 00:01:02.799
I even put it in here because I
forget how to do this function.

21
00:01:02.799 --> 00:01:07.063
But I'm just gonna simply copy
it off the website and do this.

22
00:01:07.063 --> 00:01:11.321
All this does is it takes in the block
difficulty plus the timestamp.

23
00:01:11.321 --> 00:01:15.896
Does something called an encode pact which
just tightly encodes it into a set of

24
00:01:15.896 --> 00:01:16.589
bytes, and

25
00:01:16.589 --> 00:01:21.947
then pass it to something called Kecak 256
which generates out 32 byte random number.

26
00:01:21.947 --> 00:01:24.082
It's a mapping it's kind of like Sha 256.

27
00:01:24.082 --> 00:01:28.381
It takes in some input and
makes a reliable hash one direction.

28
00:01:28.381 --> 00:01:31.291
You can't go both ways
you just go one way.

29
00:01:31.291 --> 00:01:36.331
And so what we get out of this is we get
a random affectively number somewhere

30
00:01:36.331 --> 00:01:40.735
between 0 and 2 to the 256 or
practically infinity, right?

31
00:01:40.735 --> 00:01:43.828
That number is effectively infinity and
so we have a random number.

32
00:01:43.828 --> 00:01:48.801
Now why this isn't something you
would ever use in a real NFT

33
00:01:48.801 --> 00:01:52.996
is because miners control
various information.

34
00:01:52.996 --> 00:01:54.565
So what is the block difficulty?

35
00:01:54.565 --> 00:01:57.276
That is something that's
provided by the mining pool,

36
00:01:57.276 --> 00:01:58.956
by the people running the setups.

37
00:01:58.956 --> 00:02:00.129
What about the timestamp?

38
00:02:00.129 --> 00:02:04.125
Any of this could technically be
potentially manipulated to get exactly

39
00:02:04.125 --> 00:02:05.047
what they want.

40
00:02:05.047 --> 00:02:09.279
They could calculate out if I provide
them this difficulty with this amount of

41
00:02:09.279 --> 00:02:11.441
information or I do any of these items.

42
00:02:11.441 --> 00:02:16.421
I will then be able to get out the mint of
the perfect most rarity, therefore I win.

43
00:02:16.421 --> 00:02:20.332
And so there's this thing called chain
link VRF verifiably random function that

44
00:02:20.332 --> 00:02:24.140
actually has a chain that's dedicated
only to generating random functions.

45
00:02:24.140 --> 00:02:28.757
It works almost the same way as this,
except for you make a request.

46
00:02:28.757 --> 00:02:30.105
You get an ID back.

47
00:02:30.105 --> 00:02:33.236
You stored the ID plus the person
who's currently calling the function.

48
00:02:33.236 --> 00:02:38.529
Maybe in three minutes later,
you'll get an a sync callback with the ID

49
00:02:38.529 --> 00:02:43.929
that was given back to you plus
a random number that's 256 bits long.

50
00:02:43.929 --> 00:02:47.936
And then you can kind of rehydrate and
keep on going with your minting process

51
00:02:47.936 --> 00:02:51.082
using a random number that was
not generated on your chain.

52
00:02:51.082 --> 00:02:54.180
For the sake of this,
we don't need to go that complex.

53
00:02:54.180 --> 00:02:55.180
We're just doing something here.

54
00:02:55.180 --> 00:02:57.466
So I'm gonna do a very
simple random number.

55
00:02:57.466 --> 00:03:00.405
I just wanted to mention that cuz
I know if I didn't mention that,

56
00:03:00.405 --> 00:03:02.123
I'd get flamed by some set of people.

57
00:03:02.123 --> 00:03:06.455
Because it's just important to guarantee
if you're gonna build these type

58
00:03:06.455 --> 00:03:10.179
of loot box type games that you're
providing true randomness and

59
00:03:10.179 --> 00:03:12.970
no individual can take
advantage of the system.

60
00:03:12.970 --> 00:03:13.710
There we go.

61
00:03:13.710 --> 00:03:16.726
Awesome.
We now have a random number generator.

62
00:03:16.726 --> 00:03:17.630
Fantastic.

63
00:03:17.630 --> 00:03:22.110
So our stats of course are on a scale of
1 to 18 we the randomly pick a stat and

64
00:03:22.110 --> 00:03:26.030
then generate their amplitude
according to the following rules.

65
00:03:26.030 --> 00:03:29.619
Staff one goes 18,
next one 17, next one 16.

66
00:03:29.619 --> 00:03:30.847
If you've done advent of code,

67
00:03:30.847 --> 00:03:33.488
we're pretty much doing an advent
of code problem now at this point.

68
00:03:33.488 --> 00:03:35.622
So I'm gonna jump over
to the whiteboard and

69
00:03:35.622 --> 00:03:37.646
let's solve it first on the Whiteboard.

70
00:03:37.646 --> 00:03:44.306
Now remember, it is important to
remember that everything cost money.

71
00:03:44.306 --> 00:03:49.139
So we have to be careful about what we
do when it comes to how much processing.

72
00:03:49.139 --> 00:03:50.930
So I'm gonna do this.

73
00:03:50.930 --> 00:03:55.841
Let's say we could put our five
stat classes in here, strength,

74
00:03:55.841 --> 00:04:01.219
health, dexterity, intellect,
there we go and magic into an array.

75
00:04:01.219 --> 00:04:04.990
I could say the length is five, right?

76
00:04:04.990 --> 00:04:08.826
And then what I could do is I
could generate a random number,

77
00:04:08.826 --> 00:04:13.222
take a modulo of my length, and
I'd get somewhere between 0 to 4.

78
00:04:13.222 --> 00:04:15.695
Correct, everyone's familiar with modulo?

79
00:04:15.695 --> 00:04:18.640
If for those that aren't,
it's the remainder after a division.

80
00:04:18.640 --> 00:04:23.420
So, if you divide by 5, the potential
remainders are somewhere between 0 and 4.

81
00:04:23.420 --> 00:04:28.059
So after doing that, we can then get
that index that'll be a random index so

82
00:04:28.059 --> 00:04:29.692
we can grab a random stat.

83
00:04:29.692 --> 00:04:35.780
From there, we can do 13 plus my current
length, which is 5to begin with.

84
00:04:35.780 --> 00:04:39.766
And then we can modulo that
by the random number, right?

85
00:04:39.766 --> 00:04:41.744
There we go.
We get our modulo random number.

86
00:04:41.744 --> 00:04:46.198
Then we're gonna add 1,so we
at least have 1 up to 18.

87
00:04:46.198 --> 00:04:47.213
There we go.

88
00:04:47.213 --> 00:04:48.894
And then after the loop is done,

89
00:04:48.894 --> 00:04:52.400
we need to make sure we don't
randomly reselect that start again.

90
00:04:52.400 --> 00:04:54.502
So let's say we randomly selected health.

91
00:04:54.502 --> 00:04:57.098
First we admired how straight and
beautiful that line is.

92
00:04:57.098 --> 00:04:59.795
Then, we're gonna take health, and

93
00:04:59.795 --> 00:05:03.519
we're gonna replace it by
the length minus 1 item.

94
00:05:03.519 --> 00:05:08.749
So our algorithm could take m and
just write it to here.

95
00:05:08.749 --> 00:05:13.445
And so now health has gone from our length
and we adjust our length to become 4.

96
00:05:13.445 --> 00:05:18.004
So now we have strength, magic,
dexterity and intellect remaining to be

97
00:05:18.004 --> 00:05:22.354
randomly selected cuz we've already
generated out our health item.

98
00:05:22.354 --> 00:05:25.360
And then of course length now
is reduced by 1, so length is 4.

99
00:05:25.360 --> 00:05:29.570
So next time we do this, we only have a
value between 1 and 17 that is generated.

100
00:05:29.570 --> 00:05:30.146
We do it again.

101
00:05:30.146 --> 00:05:30.682
We do it again.

102
00:05:30.682 --> 00:05:31.611
We do it again.

103
00:05:31.611 --> 00:05:33.990
We don't ever touch
the length of the array.

104
00:05:33.990 --> 00:05:36.551
We don't do any sort of
expensive operations.

105
00:05:36.551 --> 00:05:40.340
We simply are just condensing what
we're looking at until we get done.

106
00:05:40.340 --> 00:05:43.853
So some of the tricks of working
on the blockchain is making sure

107
00:05:43.853 --> 00:05:48.246
you're always hyper efficient as you
possibly can be about your operations.

108
00:05:48.246 --> 00:05:50.884
This is about as efficient
as I could make it.

109
00:05:50.884 --> 00:05:55.448
Without doing something like trading
efficiency for storage costs.

110
00:05:55.448 --> 00:05:57.100
Storage is pretty expensive.

111
00:05:57.100 --> 00:06:00.785
So maybe there's a way I could do some
sort of, storage array, that works out,

112
00:06:00.785 --> 00:06:03.483
but no, often you're reading and
writing from storage.

113
00:06:03.483 --> 00:06:04.458
That's super expensive.

114
00:06:04.458 --> 00:06:05.911
So we don't wanna do that.

115
00:06:05.911 --> 00:06:09.338
So I couldn't come up with
the good way other than this.

116
00:06:09.338 --> 00:06:10.457
So this is kind of my algorithm.

117
00:06:10.457 --> 00:06:12.023
I'm sure someone else could
come up with better one.

118
00:06:12.023 --> 00:06:12.533
One more.

119
00:06:12.533 --> 00:06:13.300
My goodness, look at that.

120
00:06:13.300 --> 00:06:15.670
I want to make so much NFT money.

121
00:06:15.670 --> 00:06:21.162
All right, so let's go back and
let's create that algorithm, all right?

122
00:06:21.162 --> 00:06:22.995
So this is where things
are gonna get a bit tricky and

123
00:06:22.995 --> 00:06:24.540
we're gonna have to take a break shortly.

124
00:06:24.540 --> 00:06:27.906
So I'm gonna put in a bunch
of really weird numbers.

125
00:06:27.906 --> 00:06:32.301
And then I'm gonna explain why I did
those really weird numbers shortly.

126
00:06:32.301 --> 00:06:34.803
So first let's create a unt array.

127
00:06:34.803 --> 00:06:36.544
And we're gonna call it stats.

128
00:06:36.544 --> 00:06:40.993
And this thing is gonna be
a new unt array of length 5.

129
00:06:40.993 --> 00:06:45.806
Then we're gonna go stats, 0 equals 2.

130
00:06:45.806 --> 00:06:50.870
Now this is you're probably thinking okay,
I don't get what's happening why a 2?

131
00:06:50.870 --> 00:06:53.205
Don't worry I'll show
you here in a second.

132
00:06:53.205 --> 00:06:56.670
Then I'm gonna record a macro because
remember that hold them course I told

133
00:06:56.670 --> 00:06:57.282
you to take.

134
00:06:57.282 --> 00:07:01.258
I'm gonna copy paste this increment
that by one increment this one

135
00:07:01.258 --> 00:07:03.908
by 5 be done with my macro bam, bam, bam.

136
00:07:03.908 --> 00:07:04.437
My goodness.

137
00:07:04.437 --> 00:07:06.110
Look at how beautiful that was.

138
00:07:06.110 --> 00:07:10.436
But I want you to put in these numbers,
this is really strange but

139
00:07:10.436 --> 00:07:13.253
it's gonna make perfect sense shortly.

140
00:07:13.253 --> 00:07:18.761
So it's gonna be 2 increment by 5
one at a time from here on out.

141
00:07:22.895 --> 00:07:27.474
Someone did ask in the chat, how is
the address number converted to a unt?

142
00:07:27.474 --> 00:07:31.525
I will explain that here later
on when I talk about storage.

143
00:07:31.525 --> 00:07:33.490
That's the next section after this.

144
00:07:33.490 --> 00:07:35.730
I'll talk all about kind
of how mappings work,

145
00:07:35.730 --> 00:07:38.145
you'll understand why
they don't contain keys.

146
00:07:38.145 --> 00:07:41.851
I'll talk about why dynamic
arrays exist on storage, and

147
00:07:41.851 --> 00:07:45.329
why we can increment or push and
pop to a storage array,

148
00:07:45.329 --> 00:07:49.808
when we can't do that with one of
these static arrays or fixed arrays.

149
00:07:49.808 --> 00:07:52.115
It will make more sense here shortly.

150
00:07:52.115 --> 00:07:56.078
All right, so assuming everyone
got this beautiful piece of code.

151
00:07:56.078 --> 00:08:00.880
And let's do one more thing,
let's go length equals 5, beautiful.

152
00:08:00.880 --> 00:08:07.059
And then let's go unt hero equals
class and cast that to unt.

153
00:08:07.059 --> 00:08:11.375
\now, remember class is a value of 0, 1 or

154
00:08:11.375 --> 00:08:18.094
2 which is gonna be healer or
mage healer or barbarian respectively.

155
00:08:18.094 --> 00:08:22.180
So there we go we've created our hero,
this is looking really good, right?

156
00:08:22.180 --> 00:08:24.801
Now we need to do that so
fun little algorithm.

157
00:08:24.801 --> 00:08:29.291
Where we're gonna select each stat,
slowly close the window to where we've

158
00:08:29.291 --> 00:08:33.642
selected every stat and we've generated
every single value of 1 to 18,

159
00:08:33.642 --> 00:08:36.702
1 to 17, 1 to 16,1 to 15 and
go through it.

160
00:08:36.702 --> 00:08:40.412
So now, I'm gonna do my personal
favorite loop a do while loop.

161
00:08:40.412 --> 00:08:42.716
While length is greater than 0.

162
00:08:42.716 --> 00:08:47.894
Now let's see aren't do while is beautiful
just makes me warm on the inside.

163
00:08:47.894 --> 00:08:49.889
All right so there we go.

164
00:08:49.889 --> 00:08:54.782
So now the first step is to randomly
select an index with into this funky stat

165
00:08:54.782 --> 00:08:55.333
array.

166
00:08:55.333 --> 00:08:59.532
So I'm gonna go unt
position equals of course

167
00:08:59.532 --> 00:09:03.850
generate random modulo length,
there we go.

168
00:09:03.850 --> 00:09:08.352
We now have some random position
picked within our stats array.

169
00:09:08.352 --> 00:09:12.513
Next, we're gonna need to generate
a random value between 1 and

170
00:09:12.513 --> 00:09:16.839
whatever position or
whatever stat count we're currently doing.

171
00:09:16.839 --> 00:09:22.687
So I'm gonna go,
value equals generate random, right?

172
00:09:22.687 --> 00:09:25.119
Modulo by 13 plus the length.

173
00:09:25.119 --> 00:09:28.917
Now that obviously first round creates 18,
which means I'm

174
00:09:28.917 --> 00:09:33.155
generating something between 0 to 17 and
then add 1, there we go.

175
00:09:33.155 --> 00:09:38.100
Now round 1, that's one day,18
round to 1 to 17 and so forth.

176
00:09:38.100 --> 00:09:40.257
So now I need to store this somewhere.

177
00:09:40.257 --> 00:09:45.165
I will explain this operation,
I just realized it's so much easier to do

178
00:09:45.165 --> 00:09:49.920
this and then explain it, then simply
try to explain it and then do it.

179
00:09:49.920 --> 00:09:54.260
So I'm gonna like this hero bitwise or it.

180
00:09:54.260 --> 00:10:00.351
I'm gonna take the value, and I'm gonna
shift it over by the stats position.

181
00:10:00.351 --> 00:10:03.790
I know this is probably a fairly
weird looking statement.

182
00:10:03.790 --> 00:10:07.002
If you've never seen this before,
you're like, Well,

183
00:10:07.002 --> 00:10:10.820
I got a couple W's couple T's and
a few F's that I have to give to you.

184
00:10:10.820 --> 00:10:12.040
And I'm going like okay, hold on.

185
00:10:12.040 --> 00:10:14.590
Don't worry,
you're gonna understand this shortly.

186
00:10:14.590 --> 00:10:18.289
So now that we've done that,
I'm gonna take the length,

187
00:10:18.289 --> 00:10:20.262
I'm gonna decrement it by 1.

188
00:10:20.262 --> 00:10:23.486
And then of course, I'm gonna do that
little fancy shifting method where I

189
00:10:23.486 --> 00:10:24.926
don't have to adjust the array.

190
00:10:24.926 --> 00:10:29.471
I just simply adjust the length
associated with it by doing

191
00:10:29.471 --> 00:10:33.840
this stats.position equals stats.length,
right?

192
00:10:33.840 --> 00:10:37.147
It's been adjusted by 1 so
loop 1, it becomes four.

193
00:10:37.147 --> 00:10:40.641
Then I move the fourth element
into the position that I picked.

194
00:10:40.641 --> 00:10:43.486
And I'd do it again and
again and again and again.

195
00:10:43.486 --> 00:10:45.530
And so this is a way to get around it.

196
00:10:45.530 --> 00:10:49.098
I don't need to swap the variables
because once we've selected it,

197
00:10:49.098 --> 00:10:50.338
we do not need it again.

198
00:10:50.338 --> 00:10:53.550
So I simply just overwrite
it with the last element.

199
00:10:53.550 --> 00:10:56.268
Now lastly, we have to do one last thing.

200
00:10:56.268 --> 00:11:00.523
We have to go addresses to heroes,

201
00:11:00.523 --> 00:11:04.792
message shop sender.push hero.

202
00:11:04.792 --> 00:11:05.389
There we go.

203
00:11:05.389 --> 00:11:10.130
We have now created or
we've now inserted the hero we've

204
00:11:10.130 --> 00:11:13.400
created into the addresses to heroes.

