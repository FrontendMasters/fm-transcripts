WEBVTT

1
00:00:00.030 --> 00:00:01.093
All right, so I actually made a joke

2
00:00:01.093 --> 00:00:02.800
we're not going to do anything
with meta mask right now.

3
00:00:02.800 --> 00:00:04.700
It's actually a lot of typing.

4
00:00:04.700 --> 00:00:06.930
And I just wanted you
guys to have it ready.

5
00:00:06.930 --> 00:00:11.940
So that way when we actually
do it actually joke's on you.

6
00:00:11.940 --> 00:00:13.085
I were gonna do it.

7
00:00:13.085 --> 00:00:16.248
I did live type this because this
is actually how I felt when I was

8
00:00:16.248 --> 00:00:17.029
writing this.

9
00:00:17.029 --> 00:00:18.247
I was like, I don't want to do all this.

10
00:00:18.247 --> 00:00:20.046
Okay, actually, yes,
I do want to do all this.

11
00:00:20.046 --> 00:00:23.678
So this is my emotional roller coaster for
you all to write,

12
00:00:23.678 --> 00:00:25.795
we're actually going to do this.

13
00:00:25.795 --> 00:00:27.857
And I do a lot of live coding.

14
00:00:27.857 --> 00:00:31.487
But there is one thing I will not
live code, which is a Webpack config.

15
00:00:31.487 --> 00:00:33.622
I copy and paste this every single time.

16
00:00:33.622 --> 00:00:37.334
So I'm gonna start from the tippy top, and
I'm going to scroll all the way down to

17
00:00:37.334 --> 00:00:39.532
the bippity bottom, and
I'm gonna copy that.

18
00:00:39.532 --> 00:00:43.468
I'm gonna go over to my editor,
I'm gonna go to my route and I'm gonna

19
00:00:43.468 --> 00:00:48.366
go webpack.config.JavaScript, paste it
all in promptly navigate away from that.

20
00:00:48.366 --> 00:00:52.121
I don't want to look at that,
or think about Webpack.

21
00:00:52.121 --> 00:00:53.947
It's very, very annoying.

22
00:00:53.947 --> 00:00:56.080
Webpack has two things that are important.

23
00:00:56.080 --> 00:01:02.477
I have a source/index.hml, and
I have a source slash index.typescript.

24
00:01:02.477 --> 00:01:05.895
Those are two files that will be
important here very, very shortly.

25
00:01:05.895 --> 00:01:10.132
Also side note I am not a like
a super front end person so

26
00:01:10.132 --> 00:01:16.170
we're not gonna be building anything
beautiful or involving any library.

27
00:01:16.170 --> 00:01:23.950
Second we need to do this nice lovely
install statement again our node modules.

28
00:01:23.950 --> 00:01:28.545
If this was stocks, these things are going
up, unlike my investment in opendoor,

29
00:01:28.545 --> 00:01:32.813
which has currently gone down a lot, and
so yarn add, add all these things for

30
00:01:32.813 --> 00:01:33.422
Webpack.

31
00:01:33.422 --> 00:01:38.224
So let's go over to our terminal, paste
all those things in it will take a moment.

32
00:01:38.224 --> 00:01:41.176
I don't know how to run the Webpack WebDev
server and I didn't want to take or

33
00:01:41.176 --> 00:01:43.822
the dev server and I didn't want to
take the time to figure that out.

34
00:01:43.822 --> 00:01:49.246
So I'm going to do a Python simple
server and host out my files that way.

35
00:01:49.246 --> 00:01:52.195
If you know how to do it,
I have the config in there.

36
00:01:52.195 --> 00:01:55.017
So you can choose which
way you'd like to do that.

37
00:01:55.017 --> 00:01:58.719
And lastly, we should have a TS config
because this will make things not break.

38
00:01:58.719 --> 00:02:00.578
So copy and paste these two options.

39
00:02:00.578 --> 00:02:03.843
If you want to have a more
complete TS config, go for it.

40
00:02:03.843 --> 00:02:07.238
These two are the ones that we
really need for this project.

41
00:02:07.238 --> 00:02:12.870
The rest, they're just extra stuff
such as no implicit all right, so

42
00:02:12.870 --> 00:02:19.850
tsconfig.json it's actually French I don't
know if that it's just on was a French.

43
00:02:19.850 --> 00:02:23.300
That was a French thing and so
a lot of people get confused and

44
00:02:23.300 --> 00:02:26.889
they call it Json which totally
wrong it's just on all right.

45
00:02:26.889 --> 00:02:31.710
So next we're gonna to code
up a meta mask interaction.

46
00:02:31.710 --> 00:02:36.456
And we're gonna get hello world from
our contract that's deployed on

47
00:02:36.456 --> 00:02:40.488
our local network, but
it's gonna show up in our browser.

48
00:02:40.488 --> 00:02:43.216
So this is gonna involve a lot of coding.

49
00:02:43.216 --> 00:02:47.608
If you don't want to do a lot of coding,
the complete code is located right here.

50
00:02:47.608 --> 00:02:51.169
So we're gonna, we're gonna get
there I may call things differently.

51
00:02:51.169 --> 00:02:52.599
Because I am live coding.

52
00:02:52.599 --> 00:02:55.865
I'm kind of free flowing off
the top of my head as opposed to,

53
00:02:55.865 --> 00:02:57.478
say doing things correctly.

54
00:02:57.478 --> 00:03:00.395
So let's create
the directory called source.

55
00:03:00.395 --> 00:03:02.918
Inside of here I'm going to
create in dot index,html.

56
00:03:02.918 --> 00:03:05.915
I'm gonna become an html programmer for
a moment.

57
00:03:05.915 --> 00:03:09.853
So we're going to create a small html
file right here where I'm gonna go html

58
00:03:09.853 --> 00:03:12.623
replace it with head because
I think you're supposed

59
00:03:12.623 --> 00:03:16.763
to have that I'm actually not even sure
if you're supposed to have that or not.

60
00:03:16.763 --> 00:03:19.330
I'm gonna have body properly
indented four spaces and

61
00:03:19.330 --> 00:03:22.360
that's it we've just html
programmed our way into the future.

62
00:03:22.360 --> 00:03:28.402
And put a little quick write in there and
let's create an index.typescript.

63
00:03:28.402 --> 00:03:32.092
So there we go so this will be the code
we're obviously gonna be putting into

64
00:03:32.092 --> 00:03:35.212
the browser and so we need to
import the correct address items.

65
00:03:35.212 --> 00:03:38.482
So what we aren't gonna import
is the hard hat ethers.

66
00:03:38.482 --> 00:03:42.472
This time we are gonna import from ethers
itself, which means that it doesn't have

67
00:03:42.472 --> 00:03:46.355
some of those convenient methods because
it can't read from disk at this point.

68
00:03:46.355 --> 00:03:50.093
We're not able to do what we did before.

69
00:03:50.093 --> 00:03:52.885
And we too are not gonna
read our data from disk.

70
00:03:52.885 --> 00:03:57.883
We're not gonna grab the very convenient
json build stuff, we're gonna

71
00:03:57.883 --> 00:04:03.135
just kind of deploy it by hand to begin
with or contacted by hand to begin with.

72
00:04:03.135 --> 00:04:06.025
All right, so the first thing we
need to do is that there's two

73
00:04:06.025 --> 00:04:07.757
steps to connecting with Metamask.

74
00:04:07.757 --> 00:04:10.755
It's kind of an interesting
piece of technology.

75
00:04:10.755 --> 00:04:13.236
It can be a little bit
frustrating sometimes,

76
00:04:13.236 --> 00:04:15.086
if you have a Metamask request up.

77
00:04:15.086 --> 00:04:19.679
If you refresh the page, you get an error
when you request access to meta mask.

78
00:04:19.679 --> 00:04:22.818
And they don't have a way for
you to listen when someone accepts it,

79
00:04:22.818 --> 00:04:25.312
if you've read so anyways,
it's kind of annoying.

80
00:04:25.312 --> 00:04:29.347
So I just do this to set two simple steps
that a mom in Arizona discovered that

81
00:04:29.347 --> 00:04:30.317
Metamask hates.

82
00:04:30.317 --> 00:04:33.644
So what I do is I go like this
async function has accounts.

83
00:04:33.644 --> 00:04:37.162
I think I do have signers and
the other one and

84
00:04:37.162 --> 00:04:41.915
all I do here is I simply grab
the Metamask object, and ask,

85
00:04:41.915 --> 00:04:45.548
do I have any Aetherium
accounts currently?

86
00:04:45.548 --> 00:04:49.220
And so, I'm gonna do one other
function right here called get it.

87
00:04:49.220 --> 00:04:50.962
Just because I have the TS ignore it.

88
00:04:50.962 --> 00:04:52.569
So, it's gonna go window dot Aetherium.

89
00:04:52.569 --> 00:04:58.785
Right, adding Global's is just
always just so easy and not painful.

90
00:04:58.785 --> 00:05:02.198
And so we're just gonna have this nice
little Ethereum object right there.

91
00:05:02.198 --> 00:05:05.668
So I can just go const eth = window,
to or not that one,

92
00:05:05.668 --> 00:05:08.623
what I've been doing, geteth, there we go.

93
00:05:08.623 --> 00:05:13.156
So I got the Ethereum object,
the Ethereum objects placed on there.

94
00:05:13.156 --> 00:05:15.149
When you have Metamask installed, so

95
00:05:15.149 --> 00:05:17.901
now I'm gonna just do one
last little simple check.

96
00:05:17.901 --> 00:05:20.114
I'm gonna go cost equals this.

97
00:05:20.114 --> 00:05:23.702
If not,
he then we should probably throw new air.

98
00:05:23.702 --> 00:05:27.028
I know you don't have to do this
because I assume everyone has it.

99
00:05:27.028 --> 00:05:30.995
Get meta mask and a positive attitude.

100
00:05:30.995 --> 00:05:33.950
There we go, fantastic return eight.

101
00:05:33.950 --> 00:05:34.920
So there we go.

102
00:05:34.920 --> 00:05:40.020
We have this nice little thing going
right here, we have the metamask object.

103
00:05:40.020 --> 00:05:46.625
Once we have that, we can simply go
account equals await eth.request.

104
00:05:46.625 --> 00:05:48.278
Then we're gonna pass
in this little object.

105
00:05:48.278 --> 00:05:51.616
This is where we tell metamask,
what to go request, or

106
00:05:51.616 --> 00:05:55.042
this is how we talk to metamask
to request data out of it.

107
00:05:55.042 --> 00:06:01.451
I'm just gonna simply go method,
eth accounts and that's it.

108
00:06:01.451 --> 00:06:04.290
And so
then I'm gonna go as string of course or

109
00:06:04.290 --> 00:06:08.274
as string array which should give
you back an array of strings.

110
00:06:08.274 --> 00:06:12.054
But, it technically gives you back an
undefined or an air if things aren't and

111
00:06:12.054 --> 00:06:12.580
correct.

112
00:06:12.580 --> 00:06:17.418
So what I'll do is just simply go
accounts and accounts.length, right?

113
00:06:17.418 --> 00:06:20.611
As long as there's a length to
the accounts, we've effectively,

114
00:06:20.611 --> 00:06:21.514
we have accounts.

115
00:06:21.514 --> 00:06:23.237
We're good to go.
We're kind of hacking into this.

116
00:06:23.237 --> 00:06:26.539
If you wanna develop a better solution,
you can, but for now,

117
00:06:26.539 --> 00:06:29.606
we're just taking the easiest
possible way to get there.

118
00:06:29.606 --> 00:06:31.235
So I'm gonna just take this method.

119
00:06:31.235 --> 00:06:32.663
I'm gonna copy it.

120
00:06:32.663 --> 00:06:34.413
And instead of has account.

121
00:06:34.413 --> 00:06:38.336
Let's go here and go request accounts
everything's the same except for

122
00:06:38.336 --> 00:06:39.888
we do eat request accounts.

123
00:06:39.888 --> 00:06:43.868
Now if you already have a request open or
you already have it you're

124
00:06:43.868 --> 00:06:48.357
going to get an error so that's why
that's why I do the has accounts first.

125
00:06:48.357 --> 00:06:52.860
Then the request accounts pretty much the
exact same piece of code we could probably

126
00:06:52.860 --> 00:06:56.740
be even smarter and create a nice
method here that you know does this..

127
00:06:56.740 --> 00:07:01.046
And we just pass in the name but I usually
do the Martin Fowler's rule of three we

128
00:07:01.046 --> 00:07:03.214
currently only have two duplication.

129
00:07:03.214 --> 00:07:07.366
So no need to get super fancy here and
make it nicer.

130
00:07:07.366 --> 00:07:10.195
So I assume everyone's
effectively caught up.

131
00:07:10.195 --> 00:07:14.645
If not, there is always the website where
you can copy and paste these things out.

132
00:07:14.645 --> 00:07:17.689
So let's do this a sync function run.

133
00:07:17.689 --> 00:07:20.267
So this is where we're going to
do our main amount of coding.

134
00:07:20.267 --> 00:07:22.609
I'm going to call the run function,
and we'll do it right here.

135
00:07:22.609 --> 00:07:27.442
So if not, a weight has accounts
which is just OS requesting from

136
00:07:27.442 --> 00:07:30.137
meta mask the accounts that exist.

137
00:07:30.137 --> 00:07:35.658
And await 33 ot await request accounts
meaning if you try to request it and

138
00:07:35.658 --> 00:07:40.301
it doesn't work you say no we're
here that means something bad

139
00:07:40.301 --> 00:07:44.435
happened then we probably
should just throw new error.

140
00:07:44.435 --> 00:07:46.844
Please let me take your money.

141
00:07:46.844 --> 00:07:48.547
There we go, beautiful.

142
00:07:48.547 --> 00:07:53.245
So now, if we get to line 31,
which is where I'm at right now,

143
00:07:53.245 --> 00:07:57.176
we should have access to your
meta mask at this point.

144
00:07:57.176 --> 00:08:01.154
Obviously there's this is not production
grade if you refresh if there's,

145
00:08:01.154 --> 00:08:03.247
there's a lot of stuff still out there.

146
00:08:03.247 --> 00:08:06.867
And meta mask is kind of difficult to play
with sometimes I actually filed an issue

147
00:08:06.867 --> 00:08:10.023
where I was just like, hey,
if you do these steps, it doesn't work.

148
00:08:10.023 --> 00:08:12.870
There's a workaround like this, but
I don't really like the workaround.

149
00:08:12.870 --> 00:08:15.120
The person responded
with great workaround.

150
00:08:15.120 --> 00:08:18.360
So I was like, okay, well, this is what
we're going with from here on out.

151
00:08:18.360 --> 00:08:20.480
So it is what it is.

152
00:08:20.480 --> 00:08:21.640
It's great piece of software.

153
00:08:21.640 --> 00:08:23.540
It makes life super convenient.

154
00:08:23.540 --> 00:08:26.638
But programming against
it's a bit a bit wonky.

155
00:08:26.638 --> 00:08:31.634
Soo there we go we now have Metamask
available for us to access so

156
00:08:31.634 --> 00:08:35.971
now we need to call our
contract from the browser Well,

157
00:08:35.971 --> 00:08:40.993
much like the deploying,
we need a way to be able to point to it.

158
00:08:40.993 --> 00:08:42.228
So this is what we're gonna do.

159
00:08:42.228 --> 00:08:47.918
We're gonna go Cnst hello equals,
new ethers, contract.

160
00:08:47.918 --> 00:08:50.017
Now what is in an ethers contract?

161
00:08:50.017 --> 00:08:51.309
Let's see do we have it?

162
00:08:51.309 --> 00:08:54.030
You requires an address or name,

163
00:08:54.030 --> 00:08:58.900
the interface to the contract,
and a signer or a provider.

164
00:08:58.900 --> 00:09:03.557
Now, this is very important to know
effectively we'll go over the specifics of

165
00:09:03.557 --> 00:09:04.676
signer provider.

166
00:09:04.676 --> 00:09:08.778
But you need these three items
to be able to contract or

167
00:09:08.778 --> 00:09:11.524
contact a contract on any network.

168
00:09:11.524 --> 00:09:15.550
So, let's go back to this thing and
let's simply go, alright.

169
00:09:15.550 --> 00:09:17.944
We need an address we don't have that,

170
00:09:17.944 --> 00:09:23.090
we need an interface to our contract we
don't have that, do we have a provider?

171
00:09:23.090 --> 00:09:27.310
Yes technically we do have a provider,
r bbbbemember that whole meta mask thing.

172
00:09:27.310 --> 00:09:29.080
Meta mask is a provider.

173
00:09:29.080 --> 00:09:32.680
It abstracts away how
you contact the network.

174
00:09:32.680 --> 00:09:36.255
So that way ethers doesn't have to
know how to contact the network.

175
00:09:36.255 --> 00:09:39.345
It knows how to form proper
request to the network.

176
00:09:39.345 --> 00:09:41.495
It doesn't know where the network's at.

177
00:09:41.495 --> 00:09:45.081
And so we're gonna tell it where
the network's ads by simply

178
00:09:45.081 --> 00:09:49.804
doing new ethers providers
.web3Provider(window.ethereum), right?

179
00:09:49.804 --> 00:09:56.800
That's that whole, obviously,
I can just getEth, there we go.

180
00:09:56.800 --> 00:10:01.581
Beautiful, so, now we've given ethers
how to contact the network, but

181
00:10:01.581 --> 00:10:06.377
we haven't given it where on the network
and what does it look like, yet?

182
00:10:06.377 --> 00:10:11.271
So, the first thing we need to do is give
it where on this network is our contract.

183
00:10:11.271 --> 00:10:14.369
Well, we got to go back to our node.

184
00:10:14.369 --> 00:10:17.876
We can go to the to section right here
because this is the contract that we

185
00:10:17.876 --> 00:10:19.285
actually deployed in made.

186
00:10:19.285 --> 00:10:24.453
I'm going to copy out this address,
and I'm going to intentionally not

187
00:10:24.453 --> 00:10:30.396
very great software engineering practices
hard coded into our script right here.

188
00:10:30.396 --> 00:10:32.169
Next we need to give it an interface.

189
00:10:32.169 --> 00:10:35.980
Now we can handcraft these
interfaces actually fairly easy.

190
00:10:35.980 --> 00:10:40.055
All I'm going to do is I'm gonna just
add a string that says function.

191
00:10:40.055 --> 00:10:44.894
Hello, public pier returns
string memory just give it like

192
00:10:44.894 --> 00:10:49.655
our literal string ification
of the function signature.

193
00:10:49.655 --> 00:10:51.431
It almost looks like an interface.

194
00:10:51.431 --> 00:10:56.136
So what I've just done is I told
a theory are ethers that this is

195
00:10:56.136 --> 00:10:58.049
what is on the contract.

196
00:10:58.049 --> 00:10:59.963
This is where the contract is at.

197
00:10:59.963 --> 00:11:03.582
And this is how you
communicate to the contract.

198
00:11:03.582 --> 00:11:08.302
And so ethers does the rest formulates the
requests, make sure everything's happened.

199
00:11:08.302 --> 00:11:10.251
It properly waits for everything.

200
00:11:10.251 --> 00:11:11.483
And so there we go.

201
00:11:11.483 --> 00:11:13.165
Now we have hello.

202
00:11:13.165 --> 00:11:18.029
&gt;&gt; So theoretically we should just be
able to like this document dot body dot

203
00:11:18.029 --> 00:11:18.915
inner html.

204
00:11:18.915 --> 00:11:23.579
Because we're dangerous around here we're
going to await for hello hello that.

205
00:11:23.579 --> 00:11:28.731
So if I've done everything correctly
first try which I do every time this

206
00:11:28.731 --> 00:11:33.728
should work out so let's go over to
a terminal let's launch Webpack.

207
00:11:33.728 --> 00:11:38.088
So I'm gonna go Webpack launch it if I
have programmed everything correctly it

208
00:11:38.088 --> 00:11:41.006
should give me all green
it gave me green fantastic.

209
00:11:41.006 --> 00:11:45.880
Let's go to another terminal just
because I don't have a way to launch

210
00:11:45.880 --> 00:11:50.852
the dev server if you not launch the dev
server I put the config in there.

211
00:11:50.852 --> 00:11:53.500
I just didn't take time to
learn all those things so

212
00:11:53.500 --> 00:11:56.222
I'm just gonna do a simple
server on port 6969.

213
00:11:56.222 --> 00:12:00.596
And so there we go I'm now serving out
the disk, the build to my web pack.

214
00:12:00.596 --> 00:12:05.546
And so we kinda have everything
all nice and lifted up.

215
00:12:05.546 --> 00:12:06.050
We're ready to go.

216
00:12:06.050 --> 00:12:07.385
We should be able to communicate.

217
00:12:07.385 --> 00:12:11.802
So now I'm gonna open up a local
host at 69 69 and it says, hello,

218
00:12:11.802 --> 00:12:13.107
front end masters.

219
00:12:13.107 --> 00:12:18.955
So we have communicated from the browser
to our local node running through meta so

220
00:12:18.955 --> 00:12:21.277
that's actually pretty cool,

221
00:12:21.277 --> 00:12:25.933
because MetaMask is just a drop
down to other networks, right?

222
00:12:25.933 --> 00:12:29.771
And so Ethers doesn't have to
know where the network is at.

223
00:12:29.771 --> 00:12:32.022
It just needs to know how
to communicate there.

224
00:12:32.022 --> 00:12:37.110
And if we look at our node, you'll notice
that it was called again, for Helloworld.

225
00:12:37.110 --> 00:12:43.959
We actually have two in a row
Helloworld calls All right, let's see.

226
00:12:43.959 --> 00:12:45.161
Let's go back here.

227
00:12:45.161 --> 00:12:46.223
Let's make sure I didn't miss anything.

228
00:12:46.223 --> 00:12:47.601
So here's the complete code.

229
00:12:47.601 --> 00:12:52.174
So if you want to, you can go through here
and go to this complete code right here.

230
00:12:52.174 --> 00:12:55.777
And so let's take a moment kind of think
about all the things that just happen

231
00:12:55.777 --> 00:12:58.491
there because hopefully this
is kind of exciting for me.

232
00:12:58.491 --> 00:13:02.283
This was actually this was
actually a pretty cool moment.

233
00:13:02.283 --> 00:13:05.337
Because I just saw the full circle happen,
right?

234
00:13:05.337 --> 00:13:08.178
I wrote a programme where
I told it where it was,

235
00:13:08.178 --> 00:13:10.672
what it looked like and how to contact it.

236
00:13:10.672 --> 00:13:15.529
And I was able to call a remote
function with little to no effort.

237
00:13:15.529 --> 00:13:17.590
For me that is pretty neat.

238
00:13:17.590 --> 00:13:22.307
I was able to specify the remote
function in a fairly simple language.

239
00:13:22.307 --> 00:13:26.861
Also pretty neat and what I didn't do
anything with the server I don't have any

240
00:13:26.861 --> 00:13:30.387
worries about uptime it just
simply exists out on a network.

241
00:13:30.387 --> 00:13:34.443
And if I was able to put this on
the main net I don't want people Spend

242
00:13:34.443 --> 00:13:37.123
money to do that,
It would exist forever and

243
00:13:37.123 --> 00:13:41.989
I'd be able to call this thing as much as
I'd like and I'd get the data back out.

244
00:13:41.989 --> 00:13:44.819
And I can call these functions for free.

245
00:13:44.819 --> 00:13:46.320
That's pretty neat.

246
00:13:46.320 --> 00:13:48.999
I have a forever living function
that will live out there.

247
00:13:48.999 --> 00:13:50.119
Right now It's on my local net.

248
00:13:50.119 --> 00:13:54.949
So that's, not very forever right now, but
nonetheless, that was pretty neat, right?

249
00:13:54.949 --> 00:13:58.235
Like that's very unusual
programming paradigm.

250
00:13:58.235 --> 00:13:59.890
It's like lambda functions.

251
00:13:59.890 --> 00:14:01.973
But a bit more extreme, right?

252
00:14:01.973 --> 00:14:04.596
So it's kind of a cool concept.

253
00:14:04.596 --> 00:14:09.213
And this for me really was the moment
where I went, wow, web three is pretty.

254
00:14:09.213 --> 00:14:11.481
That's pretty coom, I like that.

255
00:14:11.481 --> 00:14:13.733
So I'm sure there's a few
gaps in your knowledge.

256
00:14:13.733 --> 00:14:17.988
First off,
any questions thus far at this point now.

257
00:14:17.988 --> 00:14:21.949
&gt;&gt; How to spin up the,
&gt;&gt; The Little server yeah,

258
00:14:21.949 --> 00:14:24.302
I just did a simple Python server so

259
00:14:24.302 --> 00:14:28.456
I did a python three module http
server and here's the port.

260
00:14:28.456 --> 00:14:32.183
So the contract is just floating
out there on the ether network and

261
00:14:32.183 --> 00:14:34.769
it's being connected to through meta mask.

262
00:14:34.769 --> 00:14:37.748
When are the guest fees incurred.

263
00:14:37.748 --> 00:14:42.653
&gt;&gt; Great question so we're actually gonna
go over gas here shortly but there's

264
00:14:42.653 --> 00:14:47.859
a distinction in the network there's two
types of requests that you really need to

265
00:14:47.859 --> 00:14:53.079
understand those that cost gas and those
that do not cost gas I know crazy, right?

266
00:14:53.079 --> 00:14:57.434
But whenever you do a call to
a certain set of functions,

267
00:14:57.434 --> 00:14:59.669
it does not require any gas.

268
00:14:59.669 --> 00:15:03.350
Let's just for
fun look at the function that I created.

269
00:15:03.350 --> 00:15:05.617
What can you say about this function?

270
00:15:05.617 --> 00:15:09.190
Does it alter the network in any way?

271
00:15:09.190 --> 00:15:13.006
No, therefore it's free.

272
00:15:13.006 --> 00:15:18.616
Does it, so it doesn't write to any state
doesn't matter how complex the call is.

273
00:15:18.616 --> 00:15:21.898
It does not alter the state
of the Ethereum network.

274
00:15:21.898 --> 00:15:23.227
Therefore it is free.

275
00:15:23.227 --> 00:15:25.742
I'm going a little bit ahead of
time just to kind of answer that.

276
00:15:25.742 --> 00:15:28.978
So our contract Yes,
it does float out there somewhere, but

277
00:15:28.978 --> 00:15:31.081
it has an address much like your house.

278
00:15:31.081 --> 00:15:34.624
Or where you live it has an address
we have a way to get there which is

279
00:15:34.624 --> 00:15:35.470
the provider.

280
00:15:35.470 --> 00:15:40.141
And we have the shape of it which is that
little interface that we wrote and so

281
00:15:40.141 --> 00:15:44.738
by having those three pieces you can
communicate via RPC to the network for

282
00:15:44.738 --> 00:15:48.545
a specific contract for
specific function and get out data.

283
00:15:48.545 --> 00:15:52.625
&gt;&gt; Can you ever upgrade or change the code
once it's deployed to the blockchain?

284
00:15:52.625 --> 00:15:53.675
&gt;&gt; Beautiful question.

285
00:15:53.675 --> 00:15:54.995
We will actually get there.

286
00:15:54.995 --> 00:15:56.985
Hopefully there's enough time.

287
00:15:56.985 --> 00:15:58.115
We will get there.

288
00:15:58.115 --> 00:15:59.771
It is exceptionally complex.

289
00:15:59.771 --> 00:16:04.716
But yes, there's are ways around this
whole problem because the reality is

290
00:16:04.716 --> 00:16:06.966
if I were to relaunch my contract.

291
00:16:06.966 --> 00:16:11.075
I would create a new
contract with new state.

292
00:16:11.075 --> 00:16:15.723
Once it's launched, it is launched,
it is immutable you cannot change it,

293
00:16:15.723 --> 00:16:18.667
you cannot change the code
out of underneath it.

294
00:16:18.667 --> 00:16:23.022
But there are ways around that make it so
that you can change the code, So

295
00:16:23.022 --> 00:16:26.797
it sounds like I just contradicted
myself but once you see it,

296
00:16:26.797 --> 00:16:28.913
it will make ten times more sense.

