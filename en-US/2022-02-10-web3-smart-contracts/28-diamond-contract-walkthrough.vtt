WEBVTT

1
00:00:00.000 --> 00:00:07.742
There we go, all right, so I think that's
enough about storage, so let's close that.

2
00:00:07.742 --> 00:00:11.720
And let's see, we have a we have already
done that, now this makes sense,

3
00:00:11.720 --> 00:00:14.702
I remember that I showed you
the app storage technique.

4
00:00:14.702 --> 00:00:16.052
So I think hopefully,

5
00:00:16.052 --> 00:00:20.749
everything we've done now really makes
the diamond pattern easy to consume.

6
00:00:20.749 --> 00:00:25.401
You understand there's a fallback, this
fallback can be used to Lookup Functions,

7
00:00:25.401 --> 00:00:28.000
these functions exist
in separate contracts.

8
00:00:28.000 --> 00:00:32.837
We're going to delegate call out to that
contract, so we use our own storage.

9
00:00:32.837 --> 00:00:34.867
We've all agreed to look up our storage,

10
00:00:34.867 --> 00:00:38.475
with this special magic way to look
up storage for everyone's contract.

11
00:00:38.475 --> 00:00:42.419
We'll never collide, we don't have to
worry, when we return out the results,

12
00:00:42.419 --> 00:00:45.386
all the magic will happen through
the diamond in return out.

13
00:00:45.386 --> 00:00:49.055
We can use interfaces and
ethers to do get contractAt,

14
00:00:49.055 --> 00:00:52.344
here's what I think
the shape should look like.

15
00:00:52.344 --> 00:00:53.973
Here's my diamond address, so

16
00:00:53.973 --> 00:00:57.664
we can constantly change our diamond
into the shape that we want it to be.

17
00:00:57.664 --> 00:01:00.332
Because we already know,
we've uploaded those functions there,

18
00:01:00.332 --> 00:01:03.432
there's also other things you can do
such as, it's called the diamond lobe.

19
00:01:03.432 --> 00:01:06.904
Which is a play on words because a lobe, I
think is the thing you inspect the diamond

20
00:01:06.904 --> 00:01:09.334
with, like I said,
a lot of bespoke terminology there.

21
00:01:09.334 --> 00:01:12.179
There's effectively discovery,
you can call into a diamond and

22
00:01:12.179 --> 00:01:15.606
say, what are your functions and it
will print back to you, their functions.

23
00:01:15.606 --> 00:01:21.471
So, discovery is built into it, they call
it a lobe, all right ,so let's go to,

24
00:01:21.471 --> 00:01:25.896
I call this part Lucy in the Sky
with Diamonds, very excited.

25
00:01:25.896 --> 00:01:28.887
Remember when we talked
about great groovy upgrade,

26
00:01:28.887 --> 00:01:33.345
I actually called it because I won the
largest initialism ever used at Netflix.

27
00:01:33.345 --> 00:01:35.655
When I had the upgrade groovy at Netflix,

28
00:01:35.655 --> 00:01:38.892
I called it great groovy upgrade
in the Sky with Diamonds.

29
00:01:38.892 --> 00:01:41.244
Because I wanted the name, and
after the Beatles and all that, and

30
00:01:41.244 --> 00:01:41.919
it was just great.

31
00:01:41.919 --> 00:01:44.771
Then I had this acronym that
was 17 letters long, and

32
00:01:44.771 --> 00:01:47.260
people would ask me what it means,
beautiful.

33
00:01:47.260 --> 00:01:50.397
All right, so
we're going to do a diamond contract,

34
00:01:50.397 --> 00:01:53.687
we're actually going to go
through the whole process.

35
00:01:53.687 --> 00:01:57.328
So I'm just going to program,
this you can try to program along with me,

36
00:01:57.328 --> 00:02:01.163
it's just there's so many steps, but
you've done so many deploys today.

37
00:02:01.163 --> 00:02:06.680
You've done so much of it, you should just
be able to kind of naively understand it.

38
00:02:06.680 --> 00:02:09.828
But it'll just take too much time to
kind of go through it step by step and

39
00:02:09.828 --> 00:02:12.356
have everyone keep, up so
I'm just going to go quickly.

40
00:02:12.356 --> 00:02:15.314
And just experience the vendor for

41
00:02:15.314 --> 00:02:19.292
pleasure of watching someone go for
a moment.

42
00:02:19.292 --> 00:02:23.343
So I'm going to clone down this,
which is called the diamond-3-hardhat.

43
00:02:23.343 --> 00:02:27.732
This is that person that I
was talking about that made

44
00:02:27.732 --> 00:02:31.940
the diamond standard, which is EIP-2535.

45
00:02:31.940 --> 00:02:36.817
And he has some associated repositories,
where you can actually get a template,

46
00:02:36.817 --> 00:02:39.440
for your contract that
you want to develop.

47
00:02:39.440 --> 00:02:42.660
So we'll go like this, we'll go to my
personal, I'm going to rm-rdf, because I

48
00:02:42.660 --> 00:02:45.841
bet you I probably already have something
with the word diamond in there, right?

49
00:02:45.841 --> 00:02:51.529
Yeah, I just knew I would, so
I'm going to go git clone,

50
00:02:51.529 --> 00:02:56.864
let's download this thing
into my personal folder,

51
00:02:56.864 --> 00:03:01.857
jump in here and
go nain yarn and install, right.

52
00:03:01.857 --> 00:03:05.260
All right yep, you uninstall so
now we just need to run this script, but

53
00:03:05.260 --> 00:03:07.320
we need to do something about that script.

54
00:03:07.320 --> 00:03:10.960
So I'm going to do a couple things
to this library really quickly.

55
00:03:10.960 --> 00:03:14.817
So first I want to kind of prove
that all these things work,

56
00:03:14.817 --> 00:03:17.113
so we kind of all understand them.

57
00:03:17.113 --> 00:03:22.494
So first, I mean, they might by the way,
obviously I think the diamond

58
00:03:22.494 --> 00:03:27.441
repository might win the contest for
most amount of npm modules.

59
00:03:27.441 --> 00:03:30.180
So I hope you guys don't feel bad,
if you don't feel

60
00:03:30.180 --> 00:03:34.300
like I didn't do a good enough job,
I really went out here, tried my bestest.

61
00:03:39.367 --> 00:03:43.339
All right perfect, so now that we've done
that, I'm going to vim into this and

62
00:03:43.339 --> 00:03:45.016
I'm going to do a couple things.

63
00:03:45.016 --> 00:03:46.735
So first let's go to contracts, and

64
00:03:46.735 --> 00:03:49.292
I'm going to create a simple
contract called A.sol.

65
00:03:49.292 --> 00:03:53.606
Yes, we're going to rely on
this very inconveniently named

66
00:03:53.606 --> 00:03:57.678
Function I'm going to do
a pragma solidity 0.8.0.

67
00:03:57.678 --> 00:04:04.100
And then I'm going to create a simple
contract, contract A, get a function getA,

68
00:04:04.100 --> 00:04:09.166
returns 42, up all the wrong
keywords in all the wrong places.

69
00:04:09.166 --> 00:04:13.180
Public pure returns u, and there we go, so

70
00:04:13.180 --> 00:04:17.984
we have a singular function on a contract,
right?

71
00:04:17.984 --> 00:04:22.444
I just wanted to make it very, very simple
because I want to highlight its uses,

72
00:04:22.444 --> 00:04:24.457
not show you how complex it can get.

73
00:04:24.457 --> 00:04:28.908
All right, so we have that, fantastic, so
next let's go to the deploy script, so

74
00:04:28.908 --> 00:04:30.895
let's walk through this together.

75
00:04:30.895 --> 00:04:34.997
So, remember the getsigners thing,
this is one of the convenient methods,

76
00:04:34.997 --> 00:04:36.458
that's added by hardhat.

77
00:04:36.458 --> 00:04:40.462
It assumes that hardhat's being executed,
it's also in a js file,

78
00:04:40.462 --> 00:04:44.685
so, we're just going to allow js to
do its thing, which means nothing.

79
00:04:44.685 --> 00:04:48.671
And so we grab the signers, and we grab
the first one, okay, we understand that.

80
00:04:48.671 --> 00:04:53.286
We're going to grab the DiamondCutFacet,
and deploy it,

81
00:04:53.286 --> 00:04:57.437
this is the function that is used to add,
remove, and

82
00:04:57.437 --> 00:05:00.778
replace functions that the diamond uses.

83
00:05:00.778 --> 00:05:05.680
So it's its own contract, this is kind
of where the 200 IQ move happens,

84
00:05:05.680 --> 00:05:07.531
then we deploy the diamond.

85
00:05:07.531 --> 00:05:11.454
Which actually references
the DiamondCutFacet, and

86
00:05:11.454 --> 00:05:14.444
actually goes and calls into its method.

87
00:05:14.444 --> 00:05:18.409
And brings it into the diamond, and
then adds that as its only function.

88
00:05:18.409 --> 00:05:20.010
So when the diamonds deployed for

89
00:05:20.010 --> 00:05:23.735
the first time, it has a single function
on it, which is called DiamondCut.

90
00:05:23.735 --> 00:05:28.539
Basic terminology is that, each one of
your contracts that hang off of diamonds

91
00:05:28.539 --> 00:05:32.566
called a facet to add, replace,
or remove, they call them cuts.

92
00:05:32.566 --> 00:05:38.379
I know a cut usually reduces, but in this
case you add with a cut, it's just very,

93
00:05:38.379 --> 00:05:42.948
very positive honestly,
if you think about it, so there we go.

94
00:05:42.948 --> 00:05:47.568
So let's deploy these two things and let's
just kind of cut it right here because we

95
00:05:47.568 --> 00:05:50.951
don't want any more of this,
return diamond, there we go.

96
00:05:50.951 --> 00:05:53.684
So this deploys, the diamond,
it does the cut,

97
00:05:53.684 --> 00:05:57.899
plus it does the deploying of the diamond,
it returns the diamond object.

98
00:05:57.899 --> 00:06:01.035
So we're going to use this as
our first step, after that,

99
00:06:01.035 --> 00:06:02.831
we need to look at some more code.

100
00:06:02.831 --> 00:06:08.170
So this next part might be a little bit
confusing, but remember how I talked

101
00:06:08.170 --> 00:06:13.956
about, how there's contracts, or
there's constructors on your contracts.

102
00:06:13.956 --> 00:06:15.887
Well what's the problem
with a constructor,

103
00:06:15.887 --> 00:06:18.122
fundamentally when it comes
to the diamond pattern?

104
00:06:18.122 --> 00:06:22.419
Can anyone try to think about it, with
all the things that we've talked about,

105
00:06:22.419 --> 00:06:24.742
because I'd love to
hear one of you say it.

106
00:06:24.742 --> 00:06:29.079
&gt;&gt; Is it because of baking
the arcs into the compiled?

107
00:06:29.079 --> 00:06:31.375
&gt;&gt; Very close, but no.

108
00:06:34.715 --> 00:06:40.334
All right I'll tell you,
remember how storage is in perspective

109
00:06:40.334 --> 00:06:44.943
of the diamond,
when does a constructor get called?

110
00:06:44.943 --> 00:06:51.391
It gets called at the deployment of
the contract, with whom storage,

111
00:06:51.391 --> 00:06:56.766
is the storage in perspective of,
add constructor time.

112
00:06:56.766 --> 00:07:02.933
Let me put it this way, we deploy our
diamond, we then deploy contract A,

113
00:07:02.933 --> 00:07:06.923
its constructor gets
called with A's memory.

114
00:07:06.923 --> 00:07:09.841
The diamonds memory is not
involved in deployment,

115
00:07:09.841 --> 00:07:12.573
because that's not how
any of this stuff works.

116
00:07:12.573 --> 00:07:18.135
So what we really need is an INIT function
on A, if we wish to have a constructor,

117
00:07:18.135 --> 00:07:21.964
that can be called in relation
to the diamonds memory.

118
00:07:21.964 --> 00:07:26.497
And so they have this whole notion where,
whenever you add a cut to the diamond,

119
00:07:26.497 --> 00:07:28.469
or when you add replace, remove.

120
00:07:28.469 --> 00:07:32.305
You can also specify an INIT function,
that will happen and

121
00:07:32.305 --> 00:07:35.693
be called in perspective
of the diamond contracts.

122
00:07:35.693 --> 00:07:39.349
So that way any constructor logic
you have, is actually in an INIT

123
00:07:39.349 --> 00:07:43.214
function with the correct perspective,
does that make more sense?

124
00:07:43.214 --> 00:07:46.597
Hopefully that makes a little bit more
sense, I know it's kind of getting iffy at

125
00:07:46.597 --> 00:07:49.608
this part, takes a little bit of
experience but it makes a lot of sense.

126
00:07:49.608 --> 00:07:52.877
So I'm just going to get rid of that, we
don't need that, we're not going to do it.

127
00:07:52.877 --> 00:07:57.577
Next, they go through some basic
examples of how to do a cut, so

128
00:07:57.577 --> 00:08:01.319
I am going to keep this and
I'm going to like this.

129
00:08:01.319 --> 00:08:06.947
Let's go async function,
what should we call this,

130
00:08:06.947 --> 00:08:12.960
how about we call this one,
addA, that feels good to me.

131
00:08:12.960 --> 00:08:17.002
I'm going to pass him the diamond for
A, and there we go, so let's see,

132
00:08:17.002 --> 00:08:19.005
we don't need any of this, right?

133
00:08:19.005 --> 00:08:23.969
We don't need their specified functions,
but let's grab this stuff and

134
00:08:23.969 --> 00:08:25.499
put it in, all right.

135
00:08:25.499 --> 00:08:26.947
Now look at what they're doing,

136
00:08:26.947 --> 00:08:30.582
they were going through each one of the
contracts that they previously specified.

137
00:08:30.582 --> 00:08:34.155
They got the contract factory, we're
totally familiar with this at this point,

138
00:08:34.155 --> 00:08:37.175
they deployed it, we're totally
familiar with this at this point.

139
00:08:37.175 --> 00:08:41.344
They waited for it to deploy, okay, this
just looks like a contract deploy, right?

140
00:08:41.344 --> 00:08:46.532
So they deployed their contract out,
but then they added the address

141
00:08:46.532 --> 00:08:52.182
to the contract, an Add action and
this thing called functionSelectors.

142
00:08:52.182 --> 00:08:56.647
Function selectors just go through all of
your public functions, hashes them, so

143
00:08:56.647 --> 00:09:01.001
creates this four-byte representation
of your function, and passes that in.

144
00:09:01.001 --> 00:09:04.856
Because when you call a fallback
function on the message object,

145
00:09:04.856 --> 00:09:09.215
which is that public object that's
available on every single function.

146
00:09:09.215 --> 00:09:12.614
Call where I can get like,
say the sender of this, there's also .sig,

147
00:09:12.614 --> 00:09:14.022
which stands for signature.

148
00:09:14.022 --> 00:09:19.659
Which is a four-byte encoding that's
identical to what's happening right here.

149
00:09:19.659 --> 00:09:23.313
So we can say, I see what's
happening in my fallback function,

150
00:09:23.313 --> 00:09:25.490
I have found the function signature.

151
00:09:25.490 --> 00:09:29.541
And it's associated with this address,
so therefore I'm going to call it.

152
00:09:29.541 --> 00:09:31.238
Now before I continue on that,

153
00:09:31.238 --> 00:09:34.709
it might be a little bit easier
to just look at the diamond code.

154
00:09:34.709 --> 00:09:37.249
So I'm going to jump into
the diamond code, and

155
00:09:37.249 --> 00:09:41.581
go down to the fallback function, so A,
they do that exact same thing that we do.

156
00:09:41.581 --> 00:09:44.529
They grab out special storage just for
their diamonds so

157
00:09:44.529 --> 00:09:47.171
they don't accidentally
clobber your storage.

158
00:09:47.171 --> 00:09:51.882
They then go and
do exactly what I thought they would do,

159
00:09:51.882 --> 00:09:56.409
go and grab out some location
based on the signature.

160
00:09:56.409 --> 00:10:01.065
Kind of what you would expect them to do,
then they get the address,

161
00:10:01.065 --> 00:10:05.572
now notice that this looks a lot
like this facet address, right?

162
00:10:05.572 --> 00:10:10.454
Facet address, it is pretty much the same
object being stored, so they grab

163
00:10:10.454 --> 00:10:15.205
out the facet, it has to not equal
zero meaning, this thing has to exist.

164
00:10:15.205 --> 00:10:19.050
If you try to call a function that does
not exist, it's going to air with sorry

165
00:10:19.050 --> 00:10:22.203
this function does not exist on
the diamond, I can't find it.

166
00:10:22.203 --> 00:10:25.171
Now remember how I said fallback
functions get a little bit confusing,

167
00:10:25.171 --> 00:10:27.463
here's the assembly part
that I can't write by hand.

168
00:10:27.463 --> 00:10:30.462
I'd have to go look it up in the docs and
follow this very closely, but

169
00:10:30.462 --> 00:10:31.985
effectively what it's doing is.

170
00:10:31.985 --> 00:10:35.096
It's copying all the data from the call
into some sort of special space,

171
00:10:35.096 --> 00:10:38.212
I don't really understand where
it's calling it, but it's doing it.

172
00:10:38.212 --> 00:10:41.827
Then it does a delegatecall,
which we've talked about plenty of times,

173
00:10:41.827 --> 00:10:43.592
it's going to call this function.

174
00:10:43.592 --> 00:10:46.284
In perspective of our own diamond memory,

175
00:10:46.284 --> 00:10:49.360
the facet is the address
to where it's doing it.

176
00:10:49.360 --> 00:10:51.957
And it's going to go from zero
to the size of the calldata,

177
00:10:51.957 --> 00:10:54.343
then I don't know what these
other two zeros are for.

178
00:10:54.343 --> 00:11:00.426
Then, on return, it's going to copy in all
that data again back into our area and

179
00:11:00.426 --> 00:11:02.403
if it was not successful.

180
00:11:02.403 --> 00:11:06.817
We revert the transaction with
whatever message was returned to us,

181
00:11:06.817 --> 00:11:10.482
else we return with whatever
message was returned to us.

182
00:11:10.482 --> 00:11:14.328
This mostly makes sense, right I don't
think any of us could write this first

183
00:11:14.328 --> 00:11:18.544
try, but we certainly can walk through,
and understand the general concept of it.

184
00:11:18.544 --> 00:11:22.679
And so that's all the fallback
functions doing on the diamond exactly,

185
00:11:22.679 --> 00:11:23.774
almost to the tee.

186
00:11:23.774 --> 00:11:26.890
What we thought it would be doing
based on this drawing right here,

187
00:11:26.890 --> 00:11:29.017
everything's coming through the address.

188
00:11:29.017 --> 00:11:32.923
It's looking at it up in some sort of
array, it's calling it in perspective of

189
00:11:32.923 --> 00:11:37.148
the diamond, the return values are coming
back out, it's doing it all, awesome.

190
00:11:37.148 --> 00:11:39.986
There's one other place
we probably should look,

191
00:11:39.986 --> 00:11:44.350
I think I can kind of give a nice little
explanation for, let's go right here.

192
00:11:44.350 --> 00:11:48.015
So when we do the cut, it's going to
go through and it's going to say, hey,

193
00:11:48.015 --> 00:11:50.616
is this an ad if it's an ad,
we'll add it to our list.

194
00:11:50.616 --> 00:11:53.835
If it's a replace, we're going to replace
it from our list, if it's a remove we'll

195
00:11:53.835 --> 00:11:56.581
remove it from our list, or
else you've done something wrong, right?

196
00:11:56.581 --> 00:12:00.457
So after it does all that, which we're not
going to really concern ourselves with,

197
00:12:00.457 --> 00:12:03.963
it'll omit a nice little hey, we've
had a change in our diamond contract.

198
00:12:03.963 --> 00:12:06.202
So you can actually listen for
that on a website and

199
00:12:06.202 --> 00:12:08.825
understand something's happened,
or in your backend.

200
00:12:08.825 --> 00:12:12.850
You can find it, or other people can look
at it, to verify you're not cheating with

201
00:12:12.850 --> 00:12:16.378
your contract, and then on top of that,
we call this a init DiamondCut.

202
00:12:16.378 --> 00:12:20.678
Now this is where I was talking about that
constructor, if you pass in a zero address

203
00:12:20.678 --> 00:12:24.190
for an init, then that's fine,
it doesn't do anything, right.

204
00:12:24.190 --> 00:12:26.056
It's like, okay, we're not going
to do anything else, effectively,

205
00:12:26.056 --> 00:12:26.790
what's going to happen is.

206
00:12:26.790 --> 00:12:32.437
It's going to delegatecall to your init
address, with the data you provide us,

207
00:12:32.437 --> 00:12:37.268
so that way you can call this constructor
function at the end of a cut.

208
00:12:37.268 --> 00:12:39.902
I just wanted to make sure we walk
through that a little bit, so

209
00:12:39.902 --> 00:12:43.410
you just kind of understand it, you don't
have to understand it to its exact tee.

210
00:12:43.410 --> 00:12:47.411
You just need enough to know, all right,
I know the steps that are happening.

211
00:12:47.411 --> 00:12:51.001
Because when it comes to the deploy
script, I know things can get a little bit

212
00:12:51.001 --> 00:12:53.820
hairy, you need to make sure
you understand these things.

213
00:12:53.820 --> 00:12:58.818
So for us, we're really only
doing a singular contract, so

214
00:12:58.818 --> 00:13:02.649
we don't need to do all
this confusing stuff.

215
00:13:02.649 --> 00:13:07.449
I'll keep cut, as an array just because
that's what they already had, and

216
00:13:07.449 --> 00:13:10.752
FacetName, let's go in here and
just go A, right?

217
00:13:10.752 --> 00:13:13.750
So there we go, we've just deployed A,
pretty straightforward,

218
00:13:13.750 --> 00:13:15.654
in fact, I'm going to just take this out.

219
00:13:15.654 --> 00:13:20.348
And I'm going to this async function,
deployA,

220
00:13:20.348 --> 00:13:25.060
deplayA, deploy A,
return facet, there we go.

221
00:13:25.060 --> 00:13:29.680
Just to let you know, make sure it happens
and then we're going to move this thing in

222
00:13:29.680 --> 00:13:33.125
here, because, well it just
feels better if we just do that.

223
00:13:33.125 --> 00:13:33.860
There we go, so

224
00:13:33.860 --> 00:13:37.095
now we will always know that A has
been deployed to this new address.

225
00:13:37.095 --> 00:13:42.866
And so const, I think we called
it facet = await deployA awesome,

226
00:13:42.866 --> 00:13:45.247
so this feels pretty good.

227
00:13:45.247 --> 00:13:49.254
So now we've created this little
deployment script, we've also created

228
00:13:49.254 --> 00:13:52.952
the cut that's required to add it
to our diamond, we saw that right?

229
00:13:52.952 --> 00:13:56.659
So we have a action add, we have
the address in which needs to be add,

230
00:13:56.659 --> 00:14:00.123
plus the functions that we want
to be encoded onto our diamond.

231
00:14:00.123 --> 00:14:03.407
All right, so now let's take apart
this last little bit right here, so

232
00:14:03.407 --> 00:14:05.063
now notice what they do right here.

233
00:14:05.063 --> 00:14:09.068
This is that clever thing and
I did it once too,

234
00:14:09.068 --> 00:14:12.665
where I'm going to grab the contractAt,

235
00:14:12.665 --> 00:14:18.543
in the shape of our IDiamondCut interface,
at my diamond address.

236
00:14:18.543 --> 00:14:21.830
Meaning that if we look
up IDiamond interface,

237
00:14:21.830 --> 00:14:24.878
all it has on it is
the function DiamondCut.

238
00:14:24.878 --> 00:14:28.382
So we're going to take our diamond and
morph it into a single function item,

239
00:14:28.382 --> 00:14:30.922
because that's all we're
saying is at this address.

240
00:14:30.922 --> 00:14:35.659
And we're now going to call it with
our DiamondCut information, and

241
00:14:35.659 --> 00:14:40.655
address to call an init function on,
and some extra calldata if needed.

242
00:14:40.655 --> 00:14:44.072
So there we go we did that first part,
hopefully this makes sense,

243
00:14:44.072 --> 00:14:46.772
we're just kind of casting
an address into a shape.

244
00:14:46.772 --> 00:14:49.751
I'm going to erase these things we don't
need this, we really don't need this,

245
00:14:49.751 --> 00:14:50.710
we also don't need this.

246
00:14:50.710 --> 00:14:53.617
Because this was just doing the actual
functioncall, the init data,

247
00:14:53.617 --> 00:14:55.054
we don't want to have any of that.

248
00:14:55.054 --> 00:14:57.650
So it really comes down to
this last item right here,

249
00:14:57.650 --> 00:15:00.438
which is we're going to take
our diamondCut remember.

250
00:15:00.438 --> 00:15:03.240
That's just the diamond address,
casted into an interface.

251
00:15:03.240 --> 00:15:05.047
We're going to call diamondCut on it,

252
00:15:05.047 --> 00:15:08.076
remember, diamondCut is added
because of the ether's object.

253
00:15:08.076 --> 00:15:10.496
It took in its ABI,
which is this interface,

254
00:15:10.496 --> 00:15:12.671
was able to cast into the correct shape.

255
00:15:12.671 --> 00:15:17.240
Then we're going to pass in the cut, which
is just simply As, information right here,

256
00:15:17.240 --> 00:15:20.106
so I'm trying to intentionally
overly explain this.

257
00:15:20.106 --> 00:15:22.134
Now we need to do one last thing,

258
00:15:22.134 --> 00:15:27.260
we don't want to execute any init function
because our A, has no init function.

259
00:15:27.260 --> 00:15:31.244
So I'll just do the extremely
convenient address zero,

260
00:15:31.244 --> 00:15:34.155
which of course an address is 20 bytes.

261
00:15:34.155 --> 00:15:39.033
So I'm going to go, boom,
40 zeros, just a quick 40

262
00:15:39.033 --> 00:15:44.229
zero right there, and
then the data has to be an empty array.

263
00:15:44.229 --> 00:15:47.293
I wish it was a little bit nicer, I'm
sure we can make it a little bit nicer.

264
00:15:47.293 --> 00:15:50.238
We could add our own function that
kind of does that automatically for

265
00:15:50.238 --> 00:15:52.647
us if we don't provide any arguments,
but there we go.

266
00:15:52.647 --> 00:15:56.084
We're going to do a diamondCut and
provide the zeroth address or

267
00:15:56.084 --> 00:15:58.700
the null address, and
no information about it.

268
00:15:58.700 --> 00:16:02.325
So then it's going to wait for
it to be finished, and once it's finished,

269
00:16:02.325 --> 00:16:04.694
we've done the diamond cut,
we're good to go.

270
00:16:04.694 --> 00:16:11.100
I don't think I've added any mistakes,
but I mean, you never know, so

271
00:16:11.100 --> 00:16:16.786
let's go like this,
I'm going to simply go addA, there we go.

272
00:16:16.786 --> 00:16:21.174
I'm going to remove that because I like
to live dangerously, there we go, and

273
00:16:21.174 --> 00:16:24.311
let's see anything else in here,
we don't need that.

274
00:16:24.311 --> 00:16:27.459
And I'm just going to get rid of this
because honestly, we don't need all this

275
00:16:27.459 --> 00:16:30.624
protection stuff, so let's just make
sure we return the diamond perfectly.

276
00:16:30.624 --> 00:16:34.410
And we're going to log out all
of our addresses as we go, so

277
00:16:34.410 --> 00:16:37.829
let's see if we can deploy diamond,
and addA to it.

278
00:16:37.829 --> 00:16:42.149
I think we're going to be able to do
this naturally first try, so let's

279
00:16:42.149 --> 00:16:46.694
make sure that we have our jpegdegens,
still has our note up, there we go.

280
00:16:46.694 --> 00:16:52.284
We still have our network running locally,
so that means I can jump back here,

281
00:16:52.284 --> 00:16:57.807
npx hardhat run scripts, and
let's just do deploy, network, local host.

282
00:16:57.807 --> 00:17:00.124
So if I've done everything correctly,

283
00:17:00.124 --> 00:17:04.903
you'll see that we've deployed our diamond
at this address, we've deployed A.

284
00:17:04.903 --> 00:17:08.626
This is its address, we've even cut in
here's the transaction that happened.

285
00:17:08.626 --> 00:17:12.947
If we look at our network, you'll see
all this information kind of coming in,

286
00:17:12.947 --> 00:17:13.674
fantastic.

287
00:17:13.674 --> 00:17:16.820
We've done a bunch of stuff, it kind of
does a bunch of unrecognized contracts,

288
00:17:16.820 --> 00:17:17.851
it can't understand it.

289
00:17:17.851 --> 00:17:20.665
It's being called from the outside of
this project a little bit confused,

290
00:17:20.665 --> 00:17:22.777
doesn't really matter because
we know we've done it.

291
00:17:22.777 --> 00:17:26.693
So, let's take our diamond
address not our A address,

292
00:17:26.693 --> 00:17:31.290
remember A was deployed here,
let's take our diamond address.

293
00:17:31.290 --> 00:17:35.941
Let's copy that thing out and
go over here, and

294
00:17:35.941 --> 00:17:40.722
go const diamondAddr equals this,
fantastic.

295
00:17:40.722 --> 00:17:43.695
So now instead of deploying the diamond or
deploying A,

296
00:17:43.695 --> 00:17:45.730
we need to do something else, right?

297
00:17:45.730 --> 00:17:52.299
Let's try calling A, so for me to call
A I'm first going to go back here,

298
00:17:52.299 --> 00:17:56.520
open up A and
let's go like this interface IA.

299
00:17:56.520 --> 00:18:00.579
Let's just do that, make it simple,
there we go, we have the interface IA and

300
00:18:00.579 --> 00:18:03.296
of course interfaces always
just assume external.

301
00:18:03.296 --> 00:18:08.200
Even though technically it's not external
public, is a superset of external so

302
00:18:08.200 --> 00:18:10.013
it works out, so there we go.

303
00:18:10.013 --> 00:18:15.841
We have our IA, everything looks
fantastic, I'm going to go like this,

304
00:18:15.841 --> 00:18:21.387
a = await up we have to do this in
a function, await, function callA.

305
00:18:21.387 --> 00:18:26.233
How does that sound, we'll call it callA,
that makes most sense,

306
00:18:26.233 --> 00:18:32.716
await ethers.getContractAt IA, the name of
our interface, plus our diamond address.

307
00:18:32.716 --> 00:18:36.051
So notice that we are now
taking our diamond address, and

308
00:18:36.051 --> 00:18:38.843
we are fully using a diamondAddr,
there we go.

309
00:18:38.843 --> 00:18:44.990
We are fully using it as A,
even though it's definitely not,

310
00:18:44.990 --> 00:18:48.655
it just contains references to A, so

311
00:18:48.655 --> 00:18:53.997
let's call it console.log
"a" ,await a.getA.

312
00:18:53.997 --> 00:18:57.005
Is that what I called it,
I always forget, this is the problem,

313
00:18:57.005 --> 00:18:59.820
you add too many of these,
okay, I did use that, awesome.

314
00:18:59.820 --> 00:19:02.866
All right, good, so
we should see 42 correct.

315
00:19:05.335 --> 00:19:06.621
All right, awesome.

316
00:19:06.621 --> 00:19:11.030
So let's relaunch our script and see it
do it, now notice I did something wrong.

317
00:19:13.674 --> 00:19:16.365
All right, there we go,
await has no effect,

318
00:19:16.365 --> 00:19:20.784
that's because you're supposed to
call it async, there we go, awesome.

319
00:19:20.784 --> 00:19:24.471
And then do this last one right here,
there we go, we see our value 42,

320
00:19:24.471 --> 00:19:26.048
that's pretty cool, right?

321
00:19:26.048 --> 00:19:29.403
Because we just have one contract
that we're pointing to, but

322
00:19:29.403 --> 00:19:33.540
we're actually calling on a different
contract, that's pretty amazing.

