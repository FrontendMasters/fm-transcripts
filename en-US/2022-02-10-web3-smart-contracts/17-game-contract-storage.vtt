WEBVTT

1
00:00:00.026 --> 00:00:04.645
So, let's go back and let's keep writing
this nice beautiful contract, right?

2
00:00:04.645 --> 00:00:06.529
So what's the next thing we have to do.

3
00:00:06.529 --> 00:00:11.512
I should be able to get my heroes
that I have generated, all right?

4
00:00:11.512 --> 00:00:14.515
So how are we gonna store these
what is a good day data structure.

5
00:00:14.515 --> 00:00:18.202
Does anyone in here want to yell out one
that I've mentioned before a few times?

6
00:00:18.202 --> 00:00:22.226
&gt;&gt; [INAUDIBLE]
&gt;&gt; Bo mappings awesome.

7
00:00:22.226 --> 00:00:23.302
I love to hear that.

8
00:00:23.302 --> 00:00:25.566
So we're gonna go like this mapping.

9
00:00:25.566 --> 00:00:27.653
We're gonna take an address.

10
00:00:27.653 --> 00:00:30.394
Remember that's the person
who called the function.

11
00:00:30.394 --> 00:00:35.038
So we're gonna map
an address to a list of Uns.

12
00:00:35.038 --> 00:00:36.901
These are gonna be of course,

13
00:00:36.901 --> 00:00:41.754
an array of UNs these are a dynamic array
that I can push, pop and remove from.

14
00:00:41.754 --> 00:00:43.964
And of course we need to give a name so

15
00:00:43.964 --> 00:00:46.927
I like to do this address
to address two heroes.

16
00:00:46.927 --> 00:00:50.399
Curios actually is how you say it,
and there we go.

17
00:00:50.399 --> 00:00:55.442
So now we have this, I tend to name
these things with their type in it.

18
00:00:55.442 --> 00:00:57.984
Even though I shouldn't
really have to do that,

19
00:00:57.984 --> 00:01:02.076
but it's just how I always kinda do things
when it comes to ether cuz the LSP just

20
00:01:02.076 --> 00:01:04.930
isn't quite that great and
I don't get enough hints.

21
00:01:04.930 --> 00:01:07.080
So I put kinda some basic
type information in here.

22
00:01:07.080 --> 00:01:12.949
So there you go, we now have a mapping
from address to an array of heroes.

23
00:01:12.949 --> 00:01:15.434
Now notice I'm gonna store our heroes.

24
00:01:15.434 --> 00:01:17.072
What this mean is I'm storing our heroes.

25
00:01:17.072 --> 00:01:20.201
In 256 bits, right?

26
00:01:20.201 --> 00:01:25.104
Right, so now let's create
a function called Get heroes where

27
00:01:25.104 --> 00:01:30.009
it's gonna be a public function
that's gonna be a view because

28
00:01:30.009 --> 00:01:35.024
it's only reading data and
it's gonna returns a you int array.

29
00:01:35.024 --> 00:01:37.819
And now we have to use
this memory keyword again.

30
00:01:37.819 --> 00:01:42.714
Effectively memory refers to memory
that's created within a function.

31
00:01:42.714 --> 00:01:45.094
If I were to use the term storage there,

32
00:01:45.094 --> 00:01:48.133
that means memory that is
stored on the contract.

33
00:01:50.049 --> 00:01:52.808
We actually technically can't
use the term storage right here.

34
00:01:52.808 --> 00:01:56.555
But we're just gonna use the term memory
because it requires to say where it's

35
00:01:56.555 --> 00:01:57.253
coming from.

36
00:01:57.253 --> 00:02:01.511
It's not just gonna do a return us
my address two heroes to look it up.

37
00:02:01.511 --> 00:02:04.791
Address two heroes message dot sender.

38
00:02:04.791 --> 00:02:05.696
There we go.

39
00:02:05.696 --> 00:02:07.639
So I'm just gonna look in this location.

40
00:02:07.639 --> 00:02:10.729
If there is an array there,
it will properly return out an array.

41
00:02:10.729 --> 00:02:16.293
Else it's gonna return out a zero
which will be converted by ethers and

42
00:02:16.293 --> 00:02:17.905
be an array of zero.

43
00:02:17.905 --> 00:02:20.768
So it's kinda fantastic,
it does all the right things.

44
00:02:20.768 --> 00:02:22.074
It has nothing in there.

45
00:02:22.074 --> 00:02:23.566
And so there we go.

46
00:02:23.566 --> 00:02:26.492
We now have our beautiful little cat here.

47
00:02:26.492 --> 00:02:31.883
And of course, what it also does is it
takes, read through all the values and

48
00:02:31.883 --> 00:02:35.607
creates your storage array
into a memory location.

49
00:02:35.607 --> 00:02:41.002
So you get the full array out, as opposed
to just the pointer to the array.

50
00:02:41.002 --> 00:02:42.896
So that's what's actually
happening underneath the hood.

51
00:02:42.896 --> 00:02:43.613
There we go.

52
00:02:43.613 --> 00:02:47.008
We've now written a function called
Get heroes, which should work.

53
00:02:47.008 --> 00:02:50.472
So let's write a course a test
to prove at least the base case,

54
00:02:50.472 --> 00:02:52.415
that something happens, right?

55
00:02:52.415 --> 00:02:58.566
So, it should get a zero hero array,
that seems about, right?

56
00:02:58.566 --> 00:03:01.686
A sync function, do that, and

57
00:03:01.686 --> 00:03:07.455
I can just simply go expect,
a weight hero.getheroes.

58
00:03:07.455 --> 00:03:12.105
Sure, look at this it's
already filling it in for

59
00:03:12.105 --> 00:03:16.978
me but incorrectly two with equal zero,
look at that.

60
00:03:16.978 --> 00:03:20.725
We can also do that whole deep equals and
not do the whole length thing.

61
00:03:20.725 --> 00:03:22.701
Other than that.

62
00:03:22.701 --> 00:03:24.182
There we go.

63
00:03:24.182 --> 00:03:26.650
We now went and called our function and

64
00:03:26.650 --> 00:03:30.059
make sure there's no heroes to begin with,
right?

65
00:03:30.059 --> 00:03:31.816
It should just simply have nothing in it.

66
00:03:31.816 --> 00:03:34.775
Awesome, so I'm gonna go back here.

67
00:03:34.775 --> 00:03:38.379
I'm gonna go to my other terminal and we
are gonna execute the test really quickly.

68
00:03:38.379 --> 00:03:41.806
If you need me to jump back I'll jump
back and we can take a quick pause.

69
00:03:41.806 --> 00:03:42.629
There we go.

70
00:03:42.629 --> 00:03:46.841
I'll jump back to the contract so
the contract just kinda go over we

71
00:03:46.841 --> 00:03:50.676
have an enum, that has three
values in it we have an address or

72
00:03:50.676 --> 00:03:54.461
a mapping that takes in addresses and
produces out arrays.

73
00:03:54.461 --> 00:03:58.692
We have a way to access that by doing
a view a non-state changing function which

74
00:03:58.692 --> 00:04:02.473
means we could actually call those and
get data out from the outside and

75
00:04:02.473 --> 00:04:06.409
we can even call it for free we only
need a provider we do not need a signer.

76
00:04:06.409 --> 00:04:10.214
And then lastly, we have a function
that requires a signer and

77
00:04:10.214 --> 00:04:12.128
requires eath for to execute.

78
00:04:12.128 --> 00:04:14.933
I don't really know if you know
of a good way to do a chai test,

79
00:04:14.933 --> 00:04:17.754
you can always send it to me and
we'll just use that instead.

80
00:04:17.754 --> 00:04:19.773
But this is just how I've been
doing the chai test right now.

81
00:04:19.773 --> 00:04:24.145
It's just like, capture the air and just
make sure it's saying what I want to say.

82
00:04:24.145 --> 00:04:28.688
Cuz it wraps it in a bunch
of other information.

83
00:04:28.688 --> 00:04:32.658
I'm sure there's some sort of expect
statement that can be like to throw air

84
00:04:32.658 --> 00:04:33.661
and air contains.

85
00:04:33.661 --> 00:04:34.161
I don't know.

