WEBVTT

1
00:00:00.470 --> 00:00:02.901
All right, we did the full thing,
do we have any questions?

2
00:00:02.901 --> 00:00:09.502
&gt;&gt; Generally thinking about mutability
on the chain like is this storage space?

3
00:00:09.502 --> 00:00:10.793
Is it kind of like?

4
00:00:12.615 --> 00:00:17.531
I mean can you really mutate
things in place like when you

5
00:00:17.531 --> 00:00:20.887
push new functions and make a new cut.

6
00:00:20.887 --> 00:00:25.165
Or is it really kind of appending
in sort of a read only way and

7
00:00:25.165 --> 00:00:29.882
just updating an address of where
the new location of the new cut.

8
00:00:29.882 --> 00:00:32.472
So everything that was there
before is there forever.

9
00:00:32.472 --> 00:00:33.113
&gt;&gt; Correct,

10
00:00:33.113 --> 00:00:38.650
you have it correct, all the code will
exist wherever you say it should exist.

11
00:00:38.650 --> 00:00:42.510
But, it's the storage
that's the important part.

12
00:00:42.510 --> 00:00:46.070
The storage will remain with
your first diamond contract.

13
00:00:46.070 --> 00:00:51.201
As long as you keep that, it doesn't
matter how many versions of AU you deploy,

14
00:00:51.201 --> 00:00:55.571
what really matters is you are always
referencing the latest one and

15
00:00:55.571 --> 00:00:58.770
you are always using the same memory.

16
00:00:58.770 --> 00:01:03.020
So yes, there is many versions that did
exist, you're just replacing the address

17
00:01:03.020 --> 00:01:06.984
or the pointer to which one you're
actually using, as the code to call into.

18
00:01:06.984 --> 00:01:09.692
&gt;&gt; The storage on the diamond is mutable.

19
00:01:09.692 --> 00:01:10.560
&gt;&gt; It's always mutable.

20
00:01:10.560 --> 00:01:12.291
Storage is always mutable.

21
00:01:12.291 --> 00:01:17.214
Contracts, their code is
there is some unique ways

22
00:01:17.214 --> 00:01:21.344
you can do things that aren't immutable.

23
00:01:21.344 --> 00:01:25.315
But I just wouldn't probably get into
that territory it looks really hard,

24
00:01:25.315 --> 00:01:28.788
I'm not sure what would be the reason for
it unless if there's a way

25
00:01:28.788 --> 00:01:31.969
to be able to save some money
with how complex contracts are.

26
00:01:31.969 --> 00:01:36.121
But to me, the diamond one is the most
approachable way to do things.

27
00:01:36.121 --> 00:01:39.772
You can really just replace what
you need to when you need to,

28
00:01:39.772 --> 00:01:42.937
it takes care of all the internals and
it just works.

29
00:01:42.937 --> 00:01:46.406
I was reading about it last night
with inline assemblies that,

30
00:01:46.406 --> 00:01:49.679
you can do some trickeration
with like getting into code and

31
00:01:49.679 --> 00:01:54.270
making some mutations to it, I don't
quite understand exactly how it works.

32
00:01:54.270 --> 00:01:57.124
I'd have to read more on it,
I may be completely wrong and

33
00:01:57.124 --> 00:02:00.518
how I was even interpreting it, but
it was complex to say the least.

34
00:02:00.518 --> 00:02:03.970
Let's see, and I'm gonna read it,
I think Ryan G has a question.

35
00:02:03.970 --> 00:02:07.370
So in our example we replace
A with a new contract.

36
00:02:07.370 --> 00:02:10.656
Does that mean there are two
A contracts that are deployed, and

37
00:02:10.656 --> 00:02:12.827
we're simply only using the second one?

38
00:02:12.827 --> 00:02:17.229
Yes, we're updating the pointer as we
keep deploying new and new contracts,

39
00:02:17.229 --> 00:02:19.042
so that's what's happening.

40
00:02:19.042 --> 00:02:23.043
We just don't update the storage and
that's the magical part of diamonds.

41
00:02:25.362 --> 00:02:27.873
And I also forgot to repeat your question.

42
00:02:27.873 --> 00:02:29.222
Could you say your question one more time?

43
00:02:29.222 --> 00:02:33.106
&gt;&gt; It's similar to what
was just asked it's, yeah.

44
00:02:34.453 --> 00:02:38.865
Is this all immutable as you
push new cuts to your diamond,

45
00:02:38.865 --> 00:02:41.575
is it writing to new address space?

46
00:02:41.575 --> 00:02:45.880
&gt;&gt; Yes, it was effectively a very
similar question, is it immutable?

47
00:02:45.880 --> 00:02:49.315
If we push new cuts to our diamond
what are we exactly doing.

48
00:02:49.315 --> 00:02:53.919
Yes, we're not creating new diamond
contract, we're mutating its storage.

49
00:02:53.919 --> 00:02:57.846
But, the old contracts the new contract
each one will be replicated and

50
00:02:57.846 --> 00:03:00.214
put into memory and will be there forever.

51
00:03:00.214 --> 00:03:02.630
We're just simply pointing
to the latest one.

52
00:03:02.630 --> 00:03:06.200
The question is currently are there any
other alternatives out there that would

53
00:03:06.200 --> 00:03:08.840
compete with the diamond
contract paradigm.

54
00:03:08.840 --> 00:03:11.754
I've seen some other ones,
they just didn't seem as appealing,

55
00:03:11.754 --> 00:03:13.638
this one seems the most feature complete.

56
00:03:13.638 --> 00:03:15.303
And even reading through
just a little bit,

57
00:03:15.303 --> 00:03:18.570
I was kinda largely drawn away to the
point right away and remember their names.

58
00:03:18.570 --> 00:03:21.087
It was just like yeah,
I've seen some other ways people do it.

59
00:03:21.087 --> 00:03:23.754
This is just the most
concrete one I've seen yet.

60
00:03:25.488 --> 00:03:28.252
And obviously it wasn't even that
hard they even give you I mean,

61
00:03:28.252 --> 00:03:30.580
I was able to create and
deploy a diamond fairly quick.

62
00:03:31.790 --> 00:03:33.190
Why of coding?

63
00:03:33.190 --> 00:03:37.161
What happens if we use another diamonds
address our diamonds a public permanent

64
00:03:37.161 --> 00:03:38.471
contract on the network?

65
00:03:38.471 --> 00:03:40.342
Everything's always public permanent.

66
00:03:40.342 --> 00:03:42.824
So even if I use the keyword private, for

67
00:03:42.824 --> 00:03:48.290
a variable meaning only my contract can
access this, technically with storage.

68
00:03:48.290 --> 00:03:52.357
Other contracts or other front ends
can actually read out your storage and

69
00:03:52.357 --> 00:03:54.990
see the value if it's say,
a simple data type.

70
00:03:54.990 --> 00:03:58.646
They may not be able to read out the
information with mappings if they don't

71
00:03:58.646 --> 00:04:02.534
know the keys, but nonetheless there is
no such thing as private, if you will,

72
00:04:02.534 --> 00:04:04.003
when it comes to blockchain.

73
00:04:04.003 --> 00:04:07.000
All code is public,
I can get your code if we need to.

