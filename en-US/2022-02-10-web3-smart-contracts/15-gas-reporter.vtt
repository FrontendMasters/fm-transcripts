WEBVTT

1
00:00:00.100 --> 00:00:04.635
Well, I found a better way to do things,
is just write a contract and

2
00:00:04.635 --> 00:00:07.272
let's just see how much the gas costs.

3
00:00:07.272 --> 00:00:08.532
So I'm gonna do something really quickly.

4
00:00:08.532 --> 00:00:11.363
I'm just gonna write a couple functions,
we're gonna look at them and

5
00:00:11.363 --> 00:00:13.496
we're gonna see how expensive
they kind of operate.

6
00:00:13.496 --> 00:00:16.975
On top of that we're gonna use this
cool thing called hardhat-gas-reporter.

7
00:00:16.975 --> 00:00:19.203
So I'm gonna take this, I'm gonna copy it.

8
00:00:19.203 --> 00:00:20.960
Again, score is going northward.

9
00:00:20.960 --> 00:00:24.150
At this point, buy the stocks,
buy the options, we're going so fast.

10
00:00:24.150 --> 00:00:28.880
So we're gonna add a bunch of
new libraries to our contract,

11
00:00:28.880 --> 00:00:31.350
and there we go, awesome.

12
00:00:31.350 --> 00:00:33.890
And then I'm gonna add this
line to my hardhat config.

13
00:00:33.890 --> 00:00:36.598
By adding these import
statements to the config,

14
00:00:36.598 --> 00:00:39.821
what ends up happening is that
when we execute MPX hardhat,

15
00:00:39.821 --> 00:00:44.320
it grabs the config, it loads it and
thus loads in these libraries as well.

16
00:00:44.320 --> 00:00:48.120
So let's go back in here, let's go into
hardhat, go to the top, paste it in.

17
00:00:48.120 --> 00:00:52.148
Now remember this part you don't have to
do I'm just doing it if you want to do it,

18
00:00:52.148 --> 00:00:53.868
awesome, you can follow along but

19
00:00:53.868 --> 00:00:57.387
I'm gonna move quick enough that we
can make time for the other parts.

20
00:00:57.387 --> 00:00:58.890
All right, there we go.

21
00:00:58.890 --> 00:01:03.720
So now I'm gonna just open up a contract
and I'm gonna create TestGas.sol,

22
00:01:03.720 --> 00:01:06.036
I'm gonna do the pregma statement.

23
00:01:06.036 --> 00:01:08.664
Thank you Tap9 for completing it for me.

24
00:01:08.664 --> 00:01:13.190
And I'm gonna do contract TestGas,
I'm gonna do a quick uint a, and

25
00:01:13.190 --> 00:01:16.874
I'm gonna create three items
on the contract, right?

26
00:01:16.874 --> 00:01:22.164
b, c and
I'm gonna create a function test 1,

27
00:01:22.164 --> 00:01:28.553
and it's gonna be public,
I'm simply gonna go a++.

28
00:01:28.553 --> 00:01:31.411
We're just gonna increment
something that exists on the chain.

29
00:01:31.411 --> 00:01:34.560
We're gonna save, we're gonna
read one word and save one word,

30
00:01:34.560 --> 00:01:36.175
cuz that's what's happening.

31
00:01:36.175 --> 00:01:38.620
A word of course is 256 bits.

32
00:01:38.620 --> 00:01:44.950
Word tends to be the phrase people use to
describe the size of the architecture.

33
00:01:44.950 --> 00:01:47.264
So a word on a therium is that.

34
00:01:47.264 --> 00:01:51.180
So test 2 is gonna be two increments.

35
00:01:51.180 --> 00:01:56.891
Test 3 of course will be three
increments and then we can do one more,

36
00:01:56.891 --> 00:02:01.421
test test 4,
I don't know why it didn't just copy and

37
00:02:01.421 --> 00:02:05.966
paste this public and
we're gonna go c equals a plus b.

38
00:02:05.966 --> 00:02:10.361
Do a little bit more reading
than writing and then we'll do,

39
00:02:10.361 --> 00:02:15.030
let's call that one 4 and
then let's do one more where we call,

40
00:02:16.179 --> 00:02:21.910
Let's call test 4, and
then do b equals c plus 8.

41
00:02:21.910 --> 00:02:22.929
Do like a little extra.

42
00:02:22.929 --> 00:02:25.810
Do actual function invocation
plus the same thing we did in 4.

43
00:02:25.810 --> 00:02:27.958
So we can kinda see what
does it cost to say,

44
00:02:27.958 --> 00:02:30.182
call a function as we're doing right here.

45
00:02:30.182 --> 00:02:33.864
Cuz if we just compare the difference
between these two, we can see that.

46
00:02:33.864 --> 00:02:36.990
Here, we can kinda see the growth
of gas as we call these.

47
00:02:36.990 --> 00:02:39.080
So now along with our hardhat reporter,

48
00:02:39.080 --> 00:02:41.540
all we need to do now
is just create a test.

49
00:02:41.540 --> 00:02:46.050
So how the hardhat reporter works,
I'm gonna delete hello world,

50
00:02:46.050 --> 00:02:47.956
TestGas.ts paste this in.

51
00:02:47.956 --> 00:02:50.764
Test gas, test why not?

52
00:02:50.764 --> 00:02:54.824
We're gonna go in here and I'm gonna
just rename this thing to gas why not,

53
00:02:54.824 --> 00:02:56.113
do a couple renaming and

54
00:02:56.113 --> 00:03:00.110
effectively what I am doing here is
I'm gonna deploy your gas contract and

55
00:03:00.110 --> 00:03:04.449
now we're just gonna call those functions
but I'm gonna call them in the loop.

56
00:03:04.449 --> 00:03:09.389
The reason being is that the first time
you write to the network on a non written

57
00:03:09.389 --> 00:03:14.101
spot it's more expensive because at
that point it doesn't have anything

58
00:03:14.101 --> 00:03:15.665
in that position.

59
00:03:15.665 --> 00:03:20.044
So it actually has to underneath
the hood create a kind of a key value so

60
00:03:20.044 --> 00:03:21.570
can look at up later on.

61
00:03:21.570 --> 00:03:24.022
And this will become more
obvious in a little bit.

62
00:03:24.022 --> 00:03:25.697
But for now, just remember that.

63
00:03:25.697 --> 00:03:28.463
I just remember I don't have a remap,
there we go.

64
00:03:28.463 --> 00:03:30.660
All right, perfect.

65
00:03:30.660 --> 00:03:36.865
So I'm gonna go 4, let i = 0,
i has to be less than 10, why not?

66
00:03:36.865 --> 00:03:41.284
So we're gonna do it 10 times, and
then we're gonna just simply do this,

67
00:03:41.284 --> 00:03:50.440
gas await gas.test 1, There we go,
we have all five of our tests, right?

68
00:03:50.440 --> 00:03:52.000
I think that's what we did.

69
00:03:52.000 --> 00:03:53.020
Let's just make sure we have that.

70
00:03:55.080 --> 00:03:56.470
So let's see.

71
00:03:56.470 --> 00:03:57.530
Yeap, there we go.

72
00:03:57.530 --> 00:03:58.910
Test 4-5, there we go.

73
00:03:58.910 --> 00:04:02.390
So now I'm gonna test take this,
I'm gonna go npx hardhat test.

74
00:04:02.390 --> 00:04:04.390
Now we have that little gas reporter.

75
00:04:04.390 --> 00:04:07.284
So what that gas report is gonna do
is it's actually gonna go through and

76
00:04:07.284 --> 00:04:08.600
give us a bunch of information.

77
00:04:08.600 --> 00:04:10.340
So let me make this a little bit smaller.

78
00:04:10.340 --> 00:04:15.568
So you'll notice that test 1
on average took 28,000 gas.

79
00:04:15.568 --> 00:04:21.190
Meaning that writing to a single
variable cost that much.

80
00:04:21.190 --> 00:04:26.534
Now for whatever reason, as we wrote more,
it did seem to scale at a linear rate but

81
00:04:26.534 --> 00:04:29.871
it wasn't as expensive as 28,000, right?

82
00:04:29.871 --> 00:04:32.314
It looks like it cost
about 5000 at a time.

83
00:04:32.314 --> 00:04:36.855
And so you can kinda use this to start
guessing how expensive are these functions

84
00:04:36.855 --> 00:04:37.475
gonna be.

85
00:04:37.475 --> 00:04:39.092
We can do the same thing here,

86
00:04:39.092 --> 00:04:43.610
a couple reads plus a right is obviously
more expensive than this, right?

87
00:04:43.610 --> 00:04:45.900
But it doesn't seem to be
that much more expensive.

88
00:04:45.900 --> 00:04:49.849
A function invocation guessing
by this is about 500 gas used.

89
00:04:49.849 --> 00:04:54.784
Because test 4 and 5, the only difference
was executing an extra round and

90
00:04:54.784 --> 00:04:57.109
just doing a function invocation.

91
00:04:57.109 --> 00:04:59.960
So for whatever reason it
looks like the more you write,

92
00:04:59.960 --> 00:05:02.220
it doesn't seem to be as expensive.

93
00:05:02.220 --> 00:05:06.106
Now part of that reason is that what
aethalium does is it comes in it has

94
00:05:06.106 --> 00:05:10.380
the state of your contract,
you do a bunch of things to that contract.

95
00:05:10.380 --> 00:05:14.822
When it succeeds, it writes all those
state changes back to it because it needs

96
00:05:14.822 --> 00:05:18.330
to be able to revert just in
case something goes wrong.

97
00:05:18.330 --> 00:05:22.236
Which means that the more things you
write into obviously the cheaper it is

98
00:05:22.236 --> 00:05:26.520
because you're doing a bunch of state
change transactions in a single spot, and

99
00:05:26.520 --> 00:05:29.618
it doesn't actually write back
those changes to the end.

100
00:05:29.618 --> 00:05:35.290
And so that's why you can see that it did
not scale as fast as you thought it would.

101
00:05:35.290 --> 00:05:39.695
I would expect it to be
28,000 then like 56,000 and

102
00:05:39.695 --> 00:05:42.698
then it goes up way faster but it doesn't.

103
00:05:42.698 --> 00:05:46.881
And then this one is even more telling in
the sense that we actually call a function

104
00:05:46.881 --> 00:05:48.789
that costs 30,000 by itself,

105
00:05:48.789 --> 00:05:53.130
but calling that function plus doing
the same thing only cost slightly more.

106
00:05:53.130 --> 00:05:56.053
Cuz we're reading and
writing to the same variables a punch.

107
00:05:56.053 --> 00:05:59.931
And so that's kinda how you gotta look
at gas, I highly recommend getting this

108
00:05:59.931 --> 00:06:02.659
cuz it's gonna give you
a lot of information, right?

109
00:06:02.659 --> 00:06:07.022
It's gonna say, hey, this is pretty much
how much it cost to deploy your contract

110
00:06:07.022 --> 00:06:10.876
so we can take that and go, okay, so
if I wanna deploy my contract, I need

111
00:06:10.876 --> 00:06:15.830
to take this times 4000 times say the cost
of gas right now divided by 10 to the 9.

112
00:06:15.830 --> 00:06:19.455
And to deploy this contract it's gonna
take us approximately $15 to have this

113
00:06:19.455 --> 00:06:21.650
test contract on the main net.

114
00:06:21.650 --> 00:06:24.050
And so it's good to be able
to go through that and

115
00:06:24.050 --> 00:06:26.660
kind of estimate what
things are gonna cost.

116
00:06:26.660 --> 00:06:28.760
And gas is really confusing.

117
00:06:28.760 --> 00:06:31.840
It's hard to find any articles that
make any sort of sense about it.

118
00:06:31.840 --> 00:06:35.350
So that is as best as I can do with
the exploration that I have done.

119
00:06:35.350 --> 00:06:38.887
I bet you there's a better
explanation that exists out there,

120
00:06:38.887 --> 00:06:43.730
it's just that you try to read anything
and it's super just non-straightforward.

121
00:06:43.730 --> 00:06:46.465
And so that's how I effectively
got the best I could.

122
00:06:46.465 --> 00:06:49.226
Is by just doing more empirical
evidence as opposed to,

123
00:06:49.226 --> 00:06:51.470
here's theoretically what's happening.

124
00:06:52.600 --> 00:06:54.440
All right, so some key takeaways.

125
00:06:54.440 --> 00:06:56.540
Everything costs money, be careful.

126
00:06:56.540 --> 00:07:00.959
The second one is that a lot of people
come from a JavaScript like world or

127
00:07:00.959 --> 00:07:05.526
a very functional world where copying
is like pretty cool, don't copy,

128
00:07:05.526 --> 00:07:07.020
it's expensive.

129
00:07:07.020 --> 00:07:08.607
Everything you do cost money, right?

130
00:07:08.607 --> 00:07:12.575
You have to be like so much different
mindset in solidity than you would in any

131
00:07:12.575 --> 00:07:16.010
other language because everything
you do is so expensive.

132
00:07:16.010 --> 00:07:19.944
So if you had an array, and
let's say we wanted to walk this array,

133
00:07:19.944 --> 00:07:24.653
and we wanted to like pull out things we
liked, would we pull out those things and

134
00:07:24.653 --> 00:07:28.020
actually do a splice and
remove it from the array?

135
00:07:28.020 --> 00:07:31.173
No, that'd be super duper expensive
cuz then you'd have to adjust

136
00:07:31.173 --> 00:07:32.346
all the other elements.

137
00:07:32.346 --> 00:07:34.733
You try to do as little as possible,
right?

138
00:07:34.733 --> 00:07:38.777
You have to become really smart and we're
actually gonna to do that here shortly but

139
00:07:38.777 --> 00:07:42.764
trying to think of things in the smartest
possible way doing the littlest amount of

140
00:07:42.764 --> 00:07:45.984
mutation is the best possible kind
of route when it comes to this.

141
00:07:45.984 --> 00:07:49.170
And for me that's obviously a hard
place if you're coming from more of

142
00:07:49.170 --> 00:07:51.933
a loosey-goosey world where
everything's fine, right?

143
00:07:51.933 --> 00:07:54.332
If you're fine executing
a react to reconcile,

144
00:07:54.332 --> 00:07:57.770
you're probably fine with a lot
of compute cycles happening.

145
00:07:57.770 --> 00:08:00.190
Whereas here you just don't
get that opportunity.

