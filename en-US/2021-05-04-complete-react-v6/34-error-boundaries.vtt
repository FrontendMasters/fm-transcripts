WEBVTT

1
00:00:00.190 --> 00:00:04.520
So this is one of the features
that only class components can do.

2
00:00:05.530 --> 00:00:07.953
You literally cannot do these
in function components so

3
00:00:07.953 --> 00:00:11.523
if you need something that has error
boundaries, you must use class components.

4
00:00:11.523 --> 00:00:13.478
That's just one thing to keep in mind.

5
00:00:13.478 --> 00:00:17.105
I'm just emphasizing that because sometime
in the future you're gonna wonder why

6
00:00:17.105 --> 00:00:18.673
doesn't this work and this is why.

7
00:00:18.673 --> 00:00:24.187
We're gonna go implement a lifecycle
method called component did catch.

8
00:00:24.187 --> 00:00:30.082
This is really useful if you expect errors
coming from within your application.

9
00:00:30.082 --> 00:00:35.443
So a good example of this is
what happens if I try and

10
00:00:35.443 --> 00:00:38.260
go to details slash that.

11
00:00:38.260 --> 00:00:43.492
Undefined, undefined, undefined it's just
kind of like doesn't work super well.

12
00:00:43.492 --> 00:00:47.447
And we get a bunch of errors, right?

13
00:00:47.447 --> 00:00:49.196
Or green or something like that,

14
00:00:49.196 --> 00:00:51.948
it just doesn't really know
what to do with itself.

15
00:00:51.948 --> 00:00:55.403
So this is something that
you can actually like handle

16
00:00:55.403 --> 00:00:59.544
with, What's called an error boundary.

17
00:00:59.544 --> 00:01:02.531
I can say, hey,
if there's an error somewhere in here,

18
00:01:02.531 --> 00:01:04.161
don't crash my application.

19
00:01:04.161 --> 00:01:06.429
Just go ahead and catch it and
then do something with it.

20
00:01:06.429 --> 00:01:11.693
So something I've seen apps do is I'll put
one error boundary at the very top level.

21
00:01:11.693 --> 00:01:15.778
So they're like, hey, if an error
happens anywhere in here, let's recover,

22
00:01:15.778 --> 00:01:17.892
let's send the user back to a good state.

23
00:01:17.892 --> 00:01:22.306
Let's not just crash
the application altogether.

24
00:01:22.306 --> 00:01:27.050
So let's go ahead and go do that.

25
00:01:27.050 --> 00:01:32.104
We're gonna make a component
at the top level

26
00:01:32.104 --> 00:01:37.424
called ErrorBoundary, ErrorBoundary.js.

27
00:01:41.385 --> 00:01:43.216
I actually find these
really useful with APIs,

28
00:01:43.216 --> 00:01:44.741
especially if that API is unreliable.

29
00:01:44.741 --> 00:01:47.020
I don't know if you've ever
had an unreliable API before.

30
00:01:47.020 --> 00:01:48.934
If so, I'm sorry, my apologies.

31
00:01:48.934 --> 00:01:50.820
Might have been my fault, I don't know.

32
00:01:50.820 --> 00:01:54.864
But this will help you if sometimes
they come back with incomplete data or

33
00:01:54.864 --> 00:01:57.270
sometimes a 500 or anything like that.

34
00:01:59.540 --> 00:02:04.190
So first of all, I'm gonna say I
mostly took this from the React docs.

35
00:02:04.190 --> 00:02:05.750
So as in copy pasted, so

36
00:02:05.750 --> 00:02:10.363
that's why I'm going to go ahead and
just give them a shout out there.

37
00:02:13.044 --> 00:02:17.395
Import component from react and

38
00:02:17.395 --> 00:02:24.653
we're gonna import link
from react-router-dom.

39
00:02:24.653 --> 00:02:29.923
I wanna say class ErrorBoundary

40
00:02:29.923 --> 00:02:35.190
extends, Component.

41
00:02:37.453 --> 00:02:41.218
Here we're gonna say state=hasError.

42
00:02:46.071 --> 00:02:48.495
And it's gonna be false cuz by default,
it doesn't.

43
00:02:48.495 --> 00:02:53.825
And then we're gonna
have to create a function

44
00:02:53.825 --> 00:02:59.027
called staticGetDerivedStateFromError.

45
00:02:59.027 --> 00:03:00.329
It's a mouthful, I know.

46
00:03:04.746 --> 00:03:08.732
And then here we're gonna
say return hasError true.

47
00:03:08.732 --> 00:03:15.043
So here you can actually I think
you can get at the error object,

48
00:03:15.043 --> 00:03:20.298
if I take a look at this,
might not say, component.

49
00:03:20.298 --> 00:03:25.338
You might actually be able to get at
the error and see what caused the error.

50
00:03:25.338 --> 00:03:27.428
And you can do different
things based on the error.

51
00:03:27.428 --> 00:03:32.787
If you get an API error, go here, if you
get a syntax error, go somewhere else.

52
00:03:32.787 --> 00:03:35.468
I don't really care I'm just
gonna ignore and say like, hey,

53
00:03:35.468 --> 00:03:38.010
if you encounter an error,
just say that you have an error.

54
00:03:40.833 --> 00:03:46.231
And actually probably something good to
do is actually here in componentDidCatch.

55
00:03:47.907 --> 00:03:51.384
Here gonna get the error and
the info about the error.

56
00:03:53.411 --> 00:03:57.515
Here I would log this to Sentry or

57
00:03:57.515 --> 00:04:02.531
Azure Monitor or New Relic, TrackJS,

58
00:04:02.531 --> 00:04:09.835
there's a million of these
error monitoring services.

59
00:04:09.835 --> 00:04:12.492
This is where I would call that, I would
call out to that it's like hey users

60
00:04:12.492 --> 00:04:14.399
are hitting an error here,
do something about that.

61
00:04:17.068 --> 00:04:19.732
Here I'm just gonna say console.error,

62
00:04:19.732 --> 00:04:23.213
the oldest school of error
monitoring is your console.

63
00:04:23.213 --> 00:04:26.427
And you're just gonna say errorBoundary.

64
00:04:29.271 --> 00:04:30.067
Caught an error.

65
00:04:33.541 --> 00:04:34.483
Error info.

66
00:04:39.683 --> 00:04:41.832
Then here I want to say
underneath that render,

67
00:04:44.978 --> 00:04:49.588
If this.state.hasError,

68
00:04:49.588 --> 00:04:56.649
then return,
Whatever you wanna say, right?

69
00:04:56.649 --> 00:05:02.225
This listing has an error and

70
00:05:02.225 --> 00:05:10.598
then we can throw a link in here,
a link to,

71
00:05:15.196 --> 00:05:23.270
Click here to go back to the home page.

72
00:05:23.270 --> 00:05:28.288
So if it has an error render
goes we're super sorry,

73
00:05:28.288 --> 00:05:31.948
click here to go back to the homepage.

74
00:05:31.948 --> 00:05:40.721
Or we can say return this.props.children.

75
00:05:40.721 --> 00:05:42.870
So this is what we were
talking about before.

76
00:05:42.870 --> 00:05:46.690
There's key and another one of those
reserved props name is children.

77
00:05:46.690 --> 00:05:53.073
And the reason for that is if I can
do something like this errorBoundary.

78
00:06:00.170 --> 00:06:04.950
So this, whatever I pass inside of
errorBoundary, this is children, right?

79
00:06:04.950 --> 00:06:05.651
This is what gets passed in the children.

80
00:06:05.651 --> 00:06:09.239
So what I'm saying here is if
I have some sort of error,

81
00:06:09.239 --> 00:06:12.285
do something about it, right, render this.

82
00:06:12.285 --> 00:06:16.879
If I don't have an error, just render
whatever is in the middle of this, right?

83
00:06:16.879 --> 00:06:21.477
So basically,
be invisible if I don't have an error.

84
00:06:21.477 --> 00:06:26.203
Only show up when I have an error,
does that makes sense, all right?

85
00:06:32.566 --> 00:06:38.568
Down here at the bottom,
there is export default, errorBoundary.

86
00:06:44.841 --> 00:06:50.889
So let's go into, Details.

87
00:06:57.098 --> 00:06:59.261
So we're gonna put this inside of details,
so

88
00:06:59.261 --> 00:07:02.870
if there's ever an error inside of
details, we wanna do something about it.

89
00:07:02.870 --> 00:07:08.115
So we're gonna say import
ErrorBoundary from ./ErrorBoundary.

90
00:07:14.405 --> 00:07:16.596
Now, there's a peculiar thing about it.

91
00:07:16.596 --> 00:07:21.520
What you're tempted to do is, okay, I'm
just gonna put ErrorBoundary here, right?

92
00:07:22.750 --> 00:07:25.990
How would a JavaScript error work though?

93
00:07:25.990 --> 00:07:30.654
If I had an error here,
let's just say I have throw newError.

94
00:07:34.537 --> 00:07:38.610
Right, it would never hit here, right?

95
00:07:38.610 --> 00:07:40.683
It would stop there and it would go up.

96
00:07:40.683 --> 00:07:45.750
So actually the ErrorBoundary has to exist
above it in a new component above it.

97
00:07:45.750 --> 00:07:47.156
So I can't just drop it in here.

98
00:07:47.156 --> 00:07:49.772
It'll only catch things in
components underneath it.

99
00:07:49.772 --> 00:07:51.386
We have to have a component
above it that does it.

100
00:07:51.386 --> 00:07:58.218
So an easy way to do that,
Is we would do it here.

101
00:07:58.218 --> 00:08:03.478
So we already have
a higher order component.

102
00:08:03.478 --> 00:08:06.635
This is kinda where you start getting into
weird things where we have multiple nested

103
00:08:06.635 --> 00:08:07.668
higher order components.

104
00:08:07.668 --> 00:08:10.400
Cuz that's exactly what we
just did with error boundary.

105
00:08:10.400 --> 00:08:13.072
It's a component that adds
functionality but doesn't add display,

106
00:08:13.072 --> 00:08:14.439
that's a higher order component.

107
00:08:14.439 --> 00:08:17.020
Which is just a fancy name for
things that don't display.

108
00:08:18.440 --> 00:08:23.139
So what I'm gonna do
is I'm gonna say const

109
00:08:23.139 --> 00:08:28.630
details withRouter = wihtRouter(Details).

110
00:08:30.730 --> 00:08:36.682
Then underneath that, I'm gonna export

111
00:08:36.682 --> 00:08:43.146
default function details with router with,

112
00:08:43.146 --> 00:08:47.069
or whatever you want to do.

113
00:08:47.069 --> 00:08:50.895
We'll just call it WithErrorBoundary.

114
00:08:56.003 --> 00:09:01.680
I want to say return ErrorBoundary
details with router.

115
00:09:13.766 --> 00:09:16.160
Now, could we have put this in here or
something like that?

116
00:09:16.160 --> 00:09:20.462
Yeah, sure, I mean, in theory now if there
was ever something wrong with router,

117
00:09:20.462 --> 00:09:22.188
we could actually catch it here.

118
00:09:22.188 --> 00:09:24.502
But if there's something
wrong with router,

119
00:09:24.502 --> 00:09:27.780
you're gonna have bigger problems
than just an error boundary.

120
00:09:27.780 --> 00:09:29.284
So it doesn't really matter either way.

121
00:09:29.284 --> 00:09:33.670
So I say, however you choose
to export these works for me.

122
00:09:35.790 --> 00:09:39.262
But now we have an error boundary
here with details, actually, so

123
00:09:39.262 --> 00:09:42.061
we have an error in here,
I'm just gonna leave that.

124
00:09:42.061 --> 00:09:44.717
Because let's see what happens when
there's an error inside of our component.

125
00:09:44.717 --> 00:09:45.446
I'm gonna save.

126
00:09:45.446 --> 00:09:48.172
I'm gonna come over here,
but I'd make this an h1.

127
00:09:51.472 --> 00:09:55.335
My CSS strikes again, which is to say
poorly written CSS strikes again.

128
00:09:55.335 --> 00:09:56.722
Make that an h2 and

129
00:09:56.722 --> 00:10:02.468
now you'll see this listing has an error
click here to go back to the homepage.

130
00:10:02.468 --> 00:10:06.048
I was trying no write no CSS and
got a little too clever.

131
00:10:06.048 --> 00:10:10.798
Story of my life, really,
if we're being honest.

132
00:10:10.798 --> 00:10:13.890
So now I can click here, I can go back,
chills, no problem, right?

133
00:10:15.840 --> 00:10:20.700
So let's go back here to details,
let's go back here, delete that.

134
00:10:22.320 --> 00:10:24.380
Refresh the page,
go back to the Luna page.

135
00:10:24.380 --> 00:10:28.010
And now it's just totally transparent,
right?

136
00:10:28.010 --> 00:10:32.762
So now we can just be assured that even
if there's some problem with one of these

137
00:10:32.762 --> 00:10:33.632
components.

138
00:10:33.632 --> 00:10:36.949
No problem at all, it'll work just fine.

139
00:10:39.645 --> 00:10:41.590
So this is actually still gonna try and
render this out.

140
00:10:41.590 --> 00:10:43.210
I think we were too defensive about this.

141
00:10:45.140 --> 00:10:49.714
So let's say for a second, we did this and
like heroes came back undefined,

142
00:10:49.714 --> 00:10:52.440
in fact,
this actually might just do it but,

143
00:10:56.111 --> 00:10:57.984
Cuz we did the default props,
that's still gonna work.

144
00:10:57.984 --> 00:11:01.770
Anyway, we were too defensive of our code,
so it's not going to throw any errors.

145
00:11:01.770 --> 00:11:03.685
I'm not gonna apologize for that [LAUGH].

146
00:11:03.685 --> 00:11:07.635
But if there's ever an error
that came back from the API, or

147
00:11:07.635 --> 00:11:10.560
maybe the API stopped responding, right?

148
00:11:10.560 --> 00:11:12.285
That would be one place that would do it.

149
00:11:12.285 --> 00:11:17.320
But now we can be assured that it's
never going to just crash on the user.

150
00:11:17.320 --> 00:11:19.242
It's never just going to
show them not rendered,

151
00:11:19.242 --> 00:11:20.980
which is what we don't wanna see.

152
00:11:20.980 --> 00:11:23.220
We wanna see it show them something and

153
00:11:23.220 --> 00:11:26.090
allow them to gracefully
recover from an error.

