WEBVTT

1
00:00:00.200 --> 00:00:03.870
So we are heading back to hooks, we spent
a bunch of time on class components.

2
00:00:03.870 --> 00:00:05.320
And let's go back to using some hooks now.

3
00:00:07.483 --> 00:00:10.508
And let's talk about context.

4
00:00:10.508 --> 00:00:14.943
Now historically, in this class,
I haven't talked about context,

5
00:00:14.943 --> 00:00:18.175
because prior to react 16
context was kind of like

6
00:00:18.175 --> 00:00:23.580
this unofficial API that worked fairly
well but like was kinda hard to use.

7
00:00:23.580 --> 00:00:27.410
We had other things like Redux that
kind of did it as well or better.

8
00:00:27.410 --> 00:00:32.150
But with context, they kind of refigured
it out and it got a lot better.

9
00:00:32.150 --> 00:00:34.940
So now I'm actually
happy to teach you this.

10
00:00:34.940 --> 00:00:36.650
It's useful occasionally.

11
00:00:36.650 --> 00:00:39.610
It's a it's a sledgehammer,
so don't use it all the time.

12
00:00:39.610 --> 00:00:43.734
You'll muddy up your code base and
make things less Obvious which is the,

13
00:00:43.734 --> 00:00:47.991
React's big advantage here is that
the codes very obvious when you read it,

14
00:00:47.991 --> 00:00:50.140
like this does this, this does this.

15
00:00:50.140 --> 00:00:52.840
It's very easy to like read sequentially.

16
00:00:52.840 --> 00:00:54.870
Context adds indirection to that, right?

17
00:00:54.870 --> 00:00:57.123
So it adds like, okay,
something's happening here, but

18
00:00:57.123 --> 00:00:59.700
it actually occurred
all the way over here.

19
00:00:59.700 --> 00:01:03.460
That's occasionally useful, and
I'll show in a second exactly what I mean.

20
00:01:03.460 --> 00:01:05.898
But just be aware that it's not
something you want to use all the time.

21
00:01:09.431 --> 00:01:13.092
So let's pretend that we have a theme,
and this could be for

22
00:01:13.092 --> 00:01:15.620
something like Dark Mode, right?

23
00:01:15.620 --> 00:01:19.406
So let's say you wanted to implement
Dark Mode on your In your application, and

24
00:01:19.406 --> 00:01:23.137
you actually needed to like physically
move components around if dark mode was

25
00:01:23.137 --> 00:01:25.270
engaged or something like that.

26
00:01:25.270 --> 00:01:29.000
Not typically the case, but
we're going to use that as our example.

27
00:01:30.830 --> 00:01:34.040
If you have dark mode, it affects
more than just like one component.

28
00:01:34.040 --> 00:01:36.420
It affects every component
in your application, right?

29
00:01:36.420 --> 00:01:39.260
It's just like universal global state for
your application.

30
00:01:39.260 --> 00:01:41.850
And then that's where
context is very useful.

31
00:01:41.850 --> 00:01:43.298
Let's say like a user logs in,

32
00:01:43.298 --> 00:01:47.020
you're probably going to store
the your user information in context.

33
00:01:47.020 --> 00:01:51.426
Because basically every component in
your application probably needs to know

34
00:01:51.426 --> 00:01:52.970
Something about the user.

35
00:01:54.350 --> 00:01:59.290
But let's say let's talk about
like here with like Luna.

36
00:01:59.290 --> 00:02:02.530
I don't need to know what active
picture is in context, right?

37
00:02:02.530 --> 00:02:05.210
That's, that's great to
live just in the component.

38
00:02:05.210 --> 00:02:10.160
So that's when you only use
context when it's on global state.

39
00:02:10.160 --> 00:02:11.860
That's what I want to get out.

40
00:02:11.860 --> 00:02:12.890
Even then not always.

41
00:02:16.060 --> 00:02:19.170
But let's get into it and then I'll
let you make your own judgments here.

42
00:02:19.170 --> 00:02:24.370
So let's make a new file called
theme context ThemeContext.js.

43
00:02:24.370 --> 00:02:25.916
It's gonna be very short.

44
00:02:25.916 --> 00:02:31.323
Import create context from.

45
00:02:31.323 --> 00:02:37.137
To react const theme context equals

46
00:02:37.137 --> 00:02:42.951
create context.Block like that,

47
00:02:42.951 --> 00:02:49.560
and then export default theme context.

48
00:02:49.560 --> 00:02:51.150
Now, typically this is enough.

49
00:02:51.150 --> 00:02:53.840
Typically you don't need anything
more than what I've shown you here.

50
00:02:55.980 --> 00:03:00.085
You can provide and you should probably
provide a default value here for

51
00:03:00.085 --> 00:03:03.380
contacts that kind of looks
like hooks in that capacity.

52
00:03:04.810 --> 00:03:07.443
So I could say like green here or
something like Like that,

53
00:03:07.443 --> 00:03:11.100
this would be like the default value if
you created a theme context without giving

54
00:03:11.100 --> 00:03:13.390
it anything which you
should basically never do.

55
00:03:14.660 --> 00:03:16.803
The other thing is if you
provided a value here,

56
00:03:16.803 --> 00:03:20.370
TypeScript can read it automatically,
and type your context for you.

57
00:03:20.370 --> 00:03:21.970
So in other words you should just do this.

58
00:03:23.060 --> 00:03:26.490
So the default value that we're going to
give it is actually going to be a hook.

59
00:03:26.490 --> 00:03:28.630
We're going to use context and
hooks together.

60
00:03:29.760 --> 00:03:33.439
So I'm gonna say createContext with green,
and

61
00:03:33.439 --> 00:03:38.870
a function,
That's just gonna be an empty function.

62
00:03:38.870 --> 00:03:43.180
You can also just put function here.

63
00:03:45.750 --> 00:03:49.992
Now, the reason why we're doing it this
way is This is just a default value that

64
00:03:49.992 --> 00:03:52.380
we never expect to actually call.

65
00:03:52.380 --> 00:03:54.747
But we wanna just signify
the TypeScript basically,

66
00:03:54.747 --> 00:03:57.460
I'm basically only doing this for
TypeScript.

67
00:03:57.460 --> 00:03:58.360
This is gonna be a function.

68
00:04:01.269 --> 00:04:04.550
And I've seen people put like
function dot prototype here as well.

69
00:04:04.550 --> 00:04:05.199
Don't do that.

70
00:04:05.199 --> 00:04:06.025
I think that's weird.

71
00:04:06.025 --> 00:04:07.546
Just do an empty function.

72
00:04:10.171 --> 00:04:11.780
I think I haven't made notes like that.

73
00:04:11.780 --> 00:04:16.060
So that's because the second thing
in a hook is always a function.

74
00:04:16.060 --> 00:04:16.760
That's why we do that.

75
00:04:19.030 --> 00:04:21.650
The second thing and use state
specifically is always a function.

76
00:04:25.049 --> 00:04:34.007
All right, so let's go to app.js And
here we're going to import,

77
00:04:38.936 --> 00:04:43.490
Theme context from that
slash theme context.

78
00:04:46.540 --> 00:04:50.540
Then at the top of the hour,
we also have to import use state.

79
00:04:52.430 --> 00:04:55.619
From react, I'm gonna say const useState.

80
00:04:59.076 --> 00:05:01.857
Not useState, const theme = useState.

81
00:05:04.889 --> 00:05:08.620
And we're gonna start with dark blue,
but pick your favorite CSS color.

82
00:05:13.840 --> 00:05:16.060
Mine's not dark blue, but
that's what I have my notes for.

83
00:05:16.060 --> 00:05:16.830
We're gonna stick with it.

84
00:05:18.310 --> 00:05:18.810
Okay.

85
00:05:21.804 --> 00:05:26.303
Now remember eustache gives you
back like theme and set theme, but

86
00:05:26.303 --> 00:05:30.010
I'm in Purposely putting
this is just like one thing.

87
00:05:30.010 --> 00:05:33.210
You can even call this like theme
hook if you wanna be more clear.

88
00:05:33.210 --> 00:05:36.450
You might not say to
have it just as theme.

89
00:05:36.450 --> 00:05:37.249
So we're gonna do that.

90
00:05:39.773 --> 00:05:43.245
So wrap your app here.

91
00:05:48.060 --> 00:05:52.938
We're going to call this
ThemeContext.Provider.

92
00:05:56.739 --> 00:06:00.890
And we're going to say
the value is equal to theme.

93
00:06:00.890 --> 00:06:06.919
And this is going to be a React component
that wraps our entire application.

94
00:06:16.539 --> 00:06:18.730
So what is this?

95
00:06:18.730 --> 00:06:21.850
This is basically the same like
everything inside of this.

96
00:06:21.850 --> 00:06:25.410
So in our case, our entire application
is now wrapped in a provider.

97
00:06:25.410 --> 00:06:28.640
So now everything inside of
this can access this context.

98
00:06:30.340 --> 00:06:34.793
So now anything inside of like everything
down to details and carousel and error

99
00:06:34.793 --> 00:06:39.790
boundary, all those components can say,
Hey, what's my theme at the moment, right?

100
00:06:39.790 --> 00:06:40.480
So that's giving.

101
00:06:41.700 --> 00:06:44.320
That's the theme available
available everywhere.

102
00:06:44.320 --> 00:06:48.053
Otherwise why would I have to do,
I'd have to say, well I guess details,

103
00:06:48.053 --> 00:06:49.220
you need theme.

104
00:06:49.220 --> 00:06:52.995
Some one say is theme equals theme and
you just be passing these theme properties

105
00:06:52.995 --> 00:06:56.105
from component to component to
component to component, right?

106
00:06:56.105 --> 00:07:00.055
Let's say you wanted to use it inside
of carousel I have to be theme to theme

107
00:07:00.055 --> 00:07:02.810
then I have to go inside In details.

108
00:07:02.810 --> 00:07:05.800
D cells that have to pass
that into carousel, right?

109
00:07:05.800 --> 00:07:09.460
This is called prop drilling we have
to prop pass it from parent to child,

110
00:07:09.460 --> 00:07:12.340
parent to child parent to child
until it eventually get to

111
00:07:12.340 --> 00:07:13.720
the place that you want to.

112
00:07:15.280 --> 00:07:19.235
That's kind of one of the things that
context psalteries the prop drilling

113
00:07:19.235 --> 00:07:21.820
problem of passing these
along too frequently.

