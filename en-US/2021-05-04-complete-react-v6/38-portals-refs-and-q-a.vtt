WEBVTT

1
00:00:00.540 --> 00:00:02.120
So who likes modals?

2
00:00:03.990 --> 00:00:04.630
Nobody.

3
00:00:04.630 --> 00:00:06.920
They're like the worst objectively.

4
00:00:06.920 --> 00:00:08.580
No, no, I do not believe you.

5
00:00:08.580 --> 00:00:10.050
You actually don't like models.

6
00:00:10.050 --> 00:00:11.130
Let me tell you.

7
00:00:11.130 --> 00:00:11.660
Just kidding.

8
00:00:11.660 --> 00:00:12.560
You might like my models.

9
00:00:12.560 --> 00:00:14.045
I just don't understand why.

10
00:00:14.045 --> 00:00:17.629
[COUGH] Models are terrible
user interface experiences, but

11
00:00:17.629 --> 00:00:22.055
we still use them everywhere because
we haven't discovered a better way as

12
00:00:22.055 --> 00:00:25.510
developers to inform users
that something is happening.

13
00:00:27.589 --> 00:00:29.953
So despite the fact that I'm
railing on models right now,

14
00:00:29.953 --> 00:00:32.270
I'm going to show you how to make models.

15
00:00:32.270 --> 00:00:36.151
Because someone at your next job
some lovely Program Manager like me,

16
00:00:36.151 --> 00:00:38.790
he was like, hey,
we should have a model here.

17
00:00:42.230 --> 00:00:43.080
I hate myself.

18
00:00:43.080 --> 00:00:43.980
Just kidding.

19
00:00:43.980 --> 00:00:45.090
Alright, so let's go to that.

20
00:00:47.260 --> 00:00:49.590
Let's go do models.

21
00:00:49.590 --> 00:00:52.709
So the thing about models is like
this has to show up like in front of

22
00:00:52.709 --> 00:00:53.630
the user, right?

23
00:00:53.630 --> 00:00:57.390
It's got to show up in front of
all of the stuff in front of you.

24
00:00:57.390 --> 00:01:00.260
So let's say inside of pet for
whatever reason, right?

25
00:01:00.260 --> 00:01:02.970
So here inside of our
sorry inside of details,

26
00:01:02.970 --> 00:01:05.130
I wanted to trigger a modal, right?

27
00:01:05.130 --> 00:01:11.177
If someone clicks adopts this right,
then I want to pop up a modal but

28
00:01:11.177 --> 00:01:16.890
my problem with react at the moment
is that where is details?

29
00:01:16.890 --> 00:01:20.282
Well details is inside of
the div that's inside of app and

30
00:01:20.282 --> 00:01:22.370
then have to go into details.

31
00:01:22.370 --> 00:01:25.000
So if I try and
show like modal right here,

32
00:01:25.000 --> 00:01:28.860
it's going to be still be inside
of the details component.

33
00:01:28.860 --> 00:01:33.176
In other words,
I want to render something somewhere else,

34
00:01:33.176 --> 00:01:38.100
in another part of my application
from within one of the components.

35
00:01:39.960 --> 00:01:43.850
It's kind of a weird problem and
it used to be pretty difficult to solve.

36
00:01:43.850 --> 00:01:46.754
You either had to get some
weird CSS going on or

37
00:01:46.754 --> 00:01:50.970
you had to work outside of React,
which is not a good idea either.

38
00:01:52.290 --> 00:01:55.370
Well, the React team came up
with the idea of a portal.

39
00:01:55.370 --> 00:02:00.260
And it's a million times easier
to use than it used to be.

40
00:02:00.260 --> 00:02:02.810
So I want you to open your
index dot HTML that we have.

41
00:02:05.740 --> 00:02:11.210
Okay, here, above route I
want you to make another div.

42
00:02:12.680 --> 00:02:15.120
And I want it to be ID equals modal.

43
00:02:19.134 --> 00:02:23.489
And don't put anything in modal.

44
00:02:23.489 --> 00:02:28.529
So now we can render outside above route
objectively, right, because route is still

45
00:02:28.529 --> 00:02:33.490
limited to this and then we can render
sometimes into this when we need to.

46
00:02:33.490 --> 00:02:34.870
So it's another like render point.

47
00:02:36.360 --> 00:02:39.771
I want you to make a new file,
call it modal.js.

48
00:02:44.100 --> 00:02:49.150
And we're going to say import use effect.

49
00:02:51.490 --> 00:02:52.500
Use ref.

50
00:02:52.500 --> 00:02:54.428
We also may talk about ref,
which is another fun one.

51
00:02:54.428 --> 00:02:59.066
From react.

52
00:02:59.066 --> 00:03:02.151
Here we're going to say const.

53
00:03:02.151 --> 00:03:05.750
Modal route equals document.

54
00:03:05.750 --> 00:03:08.330
Get element by ID Modal.

55
00:03:09.930 --> 00:03:11.640
This is going to be what
we're going to render into.

56
00:03:11.640 --> 00:03:13.380
We're going to say const.

57
00:03:16.440 --> 00:03:17.260
Modal.

58
00:03:17.260 --> 00:03:18.520
Now we forgot that as well.

59
00:03:18.520 --> 00:03:23.192
Up here we also have to import

60
00:03:23.192 --> 00:03:28.259
create portal from react-dom

61
00:03:31.429 --> 00:03:36.490
Okay, const modal equals, I'm going
to pull out children from the props.

62
00:03:37.670 --> 00:03:40.060
Because modal doesn't actually care
what it's going to render, right?

63
00:03:40.060 --> 00:03:42.880
It's just going to render
whatever is passed into it.

64
00:03:42.880 --> 00:03:48.147
So const children,
We're going to make a ref.

65
00:03:48.147 --> 00:03:55.857
So let's talk about Refs here in
just a second, elRef = useRef null.

66
00:04:01.071 --> 00:04:06.351
And then I want to say if elRef.current.

67
00:04:08.379 --> 00:04:12.698
So if this doesn't exist

68
00:04:12.698 --> 00:04:16.812
then elRef.current =

69
00:04:16.812 --> 00:04:24.223
document.createElement('div').

70
00:04:27.212 --> 00:04:28.400
So let's talk about what happened here.

71
00:04:28.400 --> 00:04:32.429
Let's talk about useRef first.

72
00:04:32.429 --> 00:04:36.577
We'll get more into this intermediate
react I have a whole section talking about

73
00:04:36.577 --> 00:04:37.550
what it is.

74
00:04:37.550 --> 00:04:40.223
But elRef or Ref is a container for

75
00:04:40.223 --> 00:04:45.150
state that you want to
survive past render cycles.

76
00:04:45.150 --> 00:04:50.740
So for example, we have this elRef current
equals to document create Amanda Dev.

77
00:04:50.740 --> 00:04:51.970
We only want one dip.

78
00:04:51.970 --> 00:04:54.650
We want to we don't want to create
a new div on every rerender.

79
00:04:54.650 --> 00:04:56.930
We want to have exactly
one div all the time.

80
00:04:59.020 --> 00:05:01.840
So what we're doing here is we're saying,
hey,

81
00:05:01.840 --> 00:05:04.731
if this elRef doctrine
hasn't been initialized,

82
00:05:04.731 --> 00:05:09.030
we want to initialize it to be this div
and then we want this div to survive past

83
00:05:09.030 --> 00:05:13.980
renders until you dispose of the modal
altogether and then you'll destroy it.

84
00:05:13.980 --> 00:05:14.936
Right?
But until then,

85
00:05:14.936 --> 00:05:18.020
I just want one I want
exactly one because I don't.

86
00:05:18.020 --> 00:05:21.000
This document I create is not cheap,
right?.

87
00:05:21.000 --> 00:05:22.930
So you don't wanna just
rerender it every single time.

88
00:05:22.930 --> 00:05:24.649
And we also need to hold
on to the same one so

89
00:05:24.649 --> 00:05:26.230
that eventually we can dispose of it.

90
00:05:26.230 --> 00:05:28.140
Does that make sense?.

91
00:05:30.560 --> 00:05:34.216
So if you want to have like some
piece of state that you want exactly

92
00:05:34.216 --> 00:05:38.084
one of instead of a component,
you can use these things called Refs.

93
00:05:38.084 --> 00:05:39.521
They're useful for other things but

94
00:05:39.521 --> 00:05:42.034
they're particularly useful in
this particular case as well.

95
00:05:45.333 --> 00:05:47.598
All right, so
here we're going to say use effect.

96
00:05:51.257 --> 00:05:58.070
And then, if not so low in the code there.

97
00:05:58.070 --> 00:06:03.210
We're going to say modalRoot.append child.

98
00:06:05.921 --> 00:06:12.733
ElRef, .current.

99
00:06:12.733 --> 00:06:14.550
So we're going to append this to the dom.

100
00:06:16.780 --> 00:06:20.350
And then,
we also need to clean up after we're done.

101
00:06:20.350 --> 00:06:22.720
So we're going to read we
talked about this earlier but

102
00:06:22.720 --> 00:06:24.220
this is how you clean up an effect.

103
00:06:26.720 --> 00:06:32.155
So whenever we're done we're going

104
00:06:32.155 --> 00:06:40.060
to say module route.remove
child elRef.current.

105
00:06:40.060 --> 00:06:42.885
And then we only want
this to happen once so

106
00:06:42.885 --> 00:06:46.350
we're going to give it
an empty array there.

107
00:06:46.350 --> 00:06:50.707
So basically what we're saying here is,
hey, whenever you get created,

108
00:06:50.707 --> 00:06:55.061
insert it into the dom, whenever you
are done, remove me from the dom, and

109
00:06:55.061 --> 00:06:59.767
this prevents memory leaks, otherwise
you'd be leaking divs every single time

110
00:06:59.767 --> 00:07:04.230
that you created a modal and then
unrendered a modal, that makes any sense.

111
00:07:07.400 --> 00:07:12.079
Okay, then down here, we're just
going to say return create portal.

112
00:07:17.316 --> 00:07:19.002
Div.

113
00:07:19.002 --> 00:07:20.030
We're going to wrap this in a div.

114
00:07:20.030 --> 00:07:23.968
I know it's a bit of modal soup or
a div soup, but

115
00:07:23.968 --> 00:07:30.173
the reason being is that sometimes
children can be like a list of elements,

116
00:07:30.173 --> 00:07:35.480
and top level elements always
have to be a single thing.

117
00:07:35.480 --> 00:07:36.810
You can use fragments in other places.

118
00:07:36.810 --> 00:07:39.360
And we'll talk about fragments later.

119
00:07:41.160 --> 00:07:43.720
But for now, just trust me put a div here.

120
00:07:43.720 --> 00:07:45.310
It'll make your life easier.

121
00:07:45.310 --> 00:07:48.613
Otherwise you'll get some
random errors sometimes, so

122
00:07:48.613 --> 00:07:50.550
I'm going to put children here.

123
00:07:53.178 --> 00:07:55.608
And then we're going to say elRef.current,

124
00:07:55.608 --> 00:07:58.421
which is going to be this
div that we created, right?

125
00:08:04.249 --> 00:08:04.749
And there we go.

126
00:08:07.298 --> 00:08:13.311
Now we can say export default, Modal.

127
00:08:13.311 --> 00:08:16.133
And now we can use this modal
anywhere that we want to,

128
00:08:16.133 --> 00:08:18.280
this is now a reusable modal component.

129
00:08:21.090 --> 00:08:21.890
Which is pretty great, right?

130
00:08:21.890 --> 00:08:26.070
But now we can render modals whenever we
need to, from any part of our application.

131
00:08:26.070 --> 00:08:26.910
Yeah, that's a good question.

132
00:08:26.910 --> 00:08:32.258
So like,
why would I use a reference to that like

133
00:08:32.258 --> 00:08:40.569
I why don't I just say like const
container equals blah right or for this.

134
00:08:43.920 --> 00:08:46.845
So I think for actually this particular
use case of modal we could have because

135
00:08:46.845 --> 00:08:48.560
we're only going to have
one modal at a time.

136
00:08:50.020 --> 00:08:53.200
I have to try this, but
this is what occurs to me.

137
00:08:53.200 --> 00:08:55.590
However, what happens if we have
multiple models at the same time?

138
00:08:56.900 --> 00:09:01.080
One, fire designer,
that's my first thing I'd say about that.

139
00:09:01.080 --> 00:09:05.549
Secondly, you're not always going
to use portals for that reason,

140
00:09:05.549 --> 00:09:09.402
like imagine if you had a portal
that renders to a sidebar and

141
00:09:09.402 --> 00:09:14.580
another one that renders to the bottom
bar and those kinds of different places.

142
00:09:15.620 --> 00:09:21.010
Those could have multiple different
containers that they'd be referencing.

143
00:09:21.010 --> 00:09:22.618
But if you have a global
variable like this,

144
00:09:22.618 --> 00:09:24.490
they're all going to be
referencing the same div.

145
00:09:24.490 --> 00:09:26.490
And that's not actually what you want.

146
00:09:26.490 --> 00:09:30.060
You want each modal to be
totally self contained, right?

147
00:09:30.060 --> 00:09:34.560
So that I can have on each,
portal as it were all right?

148
00:09:34.560 --> 00:09:36.710
You want each portal to be
totally contained, right?

149
00:09:36.710 --> 00:09:40.820
So this makes it unique
per instance of modal.

150
00:09:41.940 --> 00:09:46.700
Which is why you need to use a ref so
that each one has its own.

151
00:09:46.700 --> 00:09:48.640
You can't just reference
the same global one.

152
00:09:50.480 --> 00:09:54.447
Kind of an advanced use case,
but suffice to say,

153
00:09:54.447 --> 00:09:58.791
if that didn't make any sense
to just trust me until you

154
00:09:58.791 --> 00:10:03.490
understand that .Yeah
&gt;&gt; Do all refs need to be cleaned up?

155
00:10:05.080 --> 00:10:06.450
&gt;&gt; Nope.

156
00:10:06.450 --> 00:10:11.626
Just ones that need to be
cleaned up [LAUGH] So for

157
00:10:11.626 --> 00:10:16.690
example, this one gets
appended to the dom.

158
00:10:18.490 --> 00:10:21.870
So even though I stopped referencing it,
it's still gonna be in the dom, right?

159
00:10:21.870 --> 00:10:23.990
So the dom is holding on to it.

160
00:10:23.990 --> 00:10:27.998
So if I had like rendered and unrendered,
a bunch of models, I would have 50 divs,

161
00:10:27.998 --> 00:10:31.290
empty divs just sitting there
because it's appending into the dom.

162
00:10:32.400 --> 00:10:34.113
So not every reference to be cleaned up,
but

163
00:10:34.113 --> 00:10:37.140
everything from the dom that gets appended
the dom does have to be cleaned up.

164
00:10:39.949 --> 00:10:40.649
Good question.

165
00:10:40.649 --> 00:10:41.925
Other questions?

166
00:10:41.925 --> 00:10:46.270
&gt;&gt; Yeah, can you clarify a bit more
on what the create role is doing?

167
00:10:46.270 --> 00:10:47.050
A bit confused with it.

168
00:10:48.300 --> 00:10:51.620
&gt;&gt; Let's open our app.js and
just scroll to the bottom here.

169
00:10:51.620 --> 00:10:54.850
It's basically what react
dom is rent doing here.

170
00:10:56.240 --> 00:10:58.924
So it's just saying hey,

171
00:10:58.924 --> 00:11:04.540
render me out to wherever I'm meant to go,
right?

172
00:11:04.540 --> 00:11:08.110
So in this particular case
this one renders out to route.

173
00:11:08.110 --> 00:11:11.824
This one's saying hey,
put whatever I have in children here,

174
00:11:11.824 --> 00:11:16.926
put this div into, This.

175
00:11:16.926 --> 00:11:19.500
So it's rendering out to
the dom at that location.

176
00:11:21.400 --> 00:11:23.689
That makes sense?

177
00:11:23.689 --> 00:11:26.310
&gt;&gt; Why not use the React
dom that's my thing here.

178
00:11:27.540 --> 00:11:30.665
So like you can't use the same thing,
again,

179
00:11:30.665 --> 00:11:34.127
like the React dom dot render for
the modal as well.

180
00:11:34.127 --> 00:11:38.999
&gt;&gt; No, because you're rendering
basically outside of itself, right?

181
00:11:38.999 --> 00:11:41.111
In other words,
it might have been able to overload it but

182
00:11:41.111 --> 00:11:42.879
it would have been confusing.

183
00:11:42.879 --> 00:11:44.389
So they created two separate methods for
it.

