WEBVTT

1
00:00:00.200 --> 00:00:02.110
&gt;&gt; Let's go round at our details page.

2
00:00:02.110 --> 00:00:04.157
So we're gonna talk about
class components now.

3
00:00:06.592 --> 00:00:09.720
So go to details.js.

4
00:00:09.720 --> 00:00:14.641
I'm gonna miss this but it was obviously
it was a fun page while it lasted, but

5
00:00:14.641 --> 00:00:18.010
let's go make this a little
bit more robust now.

6
00:00:18.010 --> 00:00:20.170
So this is gonna be like, all right,

7
00:00:20.170 --> 00:00:24.379
I clicked on Luna now I want to see
a full informational page about Luna.

8
00:00:26.580 --> 00:00:30.329
So I'm gonna import component

9
00:00:32.257 --> 00:00:38.905
From react ,and I'm
gonna import with router

10
00:00:38.905 --> 00:00:46.028
from React-router-dom So,

11
00:00:46.028 --> 00:00:50.109
let's remove details here, and instead of
having a function represent a component

12
00:00:50.109 --> 00:00:53.040
we're gonna have a class
that represents a component.

13
00:00:53.040 --> 00:01:00.166
So we're gonna say class,
details, extends, component.

14
00:01:02.765 --> 00:01:05.151
So this is how you do what's
called a class component, and

15
00:01:05.151 --> 00:01:07.004
class components have
lifecycle methods and

16
00:01:07.004 --> 00:01:10.320
they work relatively similar to
function components in many ways.

17
00:01:10.320 --> 00:01:14.510
But they end up being having some
slight variations from here to there.

18
00:01:14.510 --> 00:01:17.160
And this is like the original
way of writing React.

19
00:01:17.160 --> 00:01:21.228
React with hook is a relatively recent
thing, it's only in the past two years

20
00:01:21.228 --> 00:01:24.183
probably that you've been
able to do hooks with react.

21
00:01:26.705 --> 00:01:31.668
So the first thing that a class
component always has 100% of the time,

22
00:01:31.668 --> 00:01:33.760
it always has a render method.

23
00:01:35.540 --> 00:01:40.187
The render method is going to work pretty
much the same as your function body,

24
00:01:40.187 --> 00:01:44.920
it's gonna always return some sort of
markup price, so something like this.

25
00:01:46.570 --> 00:01:49.709
In fact if you just saved this and
went back over here and

26
00:01:49.709 --> 00:01:54.484
clicked on like Luna now right, this would
work now, this is like the hello world,

27
00:01:54.484 --> 00:01:56.430
of a class component.

28
00:01:56.430 --> 00:02:01.680
It's just has a render method
that returns something.

29
00:02:01.680 --> 00:02:05.646
Now some people prefer this and
I'm gonna be completely frank with you,

30
00:02:05.646 --> 00:02:07.663
I actually like class components and

31
00:02:07.663 --> 00:02:11.450
I think that's kind of an unpopular
opinion so don't trust me on it.

32
00:02:11.450 --> 00:02:15.379
I think the general react populist
likes function components and

33
00:02:15.379 --> 00:02:20.021
hooks and all that kind of stuff, but
I just like the how easy these are to use,

34
00:02:20.021 --> 00:02:23.249
I like how easy they are to read and
understand later.

35
00:02:25.326 --> 00:02:29.190
Anyway, neither here nor there, they're
both useful, neither one's going anywhere.

36
00:02:30.230 --> 00:02:33.300
Just use the tool that's best fit for
the job that you're doing, right?

37
00:02:33.300 --> 00:02:36.136
That's why I'm teaching both of these is
because you will see both and you'll have

38
00:02:36.136 --> 00:02:38.990
opportunities where something will be
better expressed as a function component.

39
00:02:38.990 --> 00:02:40.953
And you'll see other opportunities like,
hey,

40
00:02:40.953 --> 00:02:43.770
this actually be better
modelled as a class component.

41
00:02:43.770 --> 00:02:48.854
&gt;&gt; Are we doing this as a class component
just to learn how class components work,

42
00:02:48.854 --> 00:02:52.720
or is it better in this case to
use this as a class component?

43
00:02:52.720 --> 00:02:56.370
&gt;&gt; In this particular case, it's pretty
much just to learn class components.

44
00:02:56.370 --> 00:02:59.270
Let's talk about the next thing,
is how do we create state?

45
00:03:00.930 --> 00:03:04.960
So instead of having hooks we
have individual pieces of state.

46
00:03:04.960 --> 00:03:09.420
With class components, you actually have
a state object that you're gonna refer to.

47
00:03:10.770 --> 00:03:12.280
So I'm gonna make a constructor here.

48
00:03:12.280 --> 00:03:14.745
This is a special kind of method for
a class,

49
00:03:14.745 --> 00:03:18.270
this is not a React thing
this is a Java script thing.

50
00:03:18.270 --> 00:03:22.468
This function will get run at the
beginning whenever you create a new class

51
00:03:22.468 --> 00:03:24.510
or a new instance of a class rather.

52
00:03:26.560 --> 00:03:30.435
So the first thing that you
always have to do whenever you do

53
00:03:30.435 --> 00:03:34.560
a class component constructor
is you just have to call super.

54
00:03:34.560 --> 00:03:37.060
Just like that,
React will yell at you if you don't.

55
00:03:38.660 --> 00:03:39.830
Why is this?

56
00:03:39.830 --> 00:03:42.360
Well, it's because you actually have
to call the component constructor.

57
00:03:42.360 --> 00:03:45.370
And if you don't do this, this component
constructor will not get called.

58
00:03:47.300 --> 00:03:48.170
So you have to do this.

59
00:03:49.850 --> 00:03:53.799
Then here, this is everything that
you want to whenever you instantiate

60
00:03:53.799 --> 00:03:58.490
a brand new instance of your class, this
is where you get to set up all the stuff.

61
00:03:58.490 --> 00:04:03.154
Most importantly,
we're gonna say this.state equals, and

62
00:04:03.154 --> 00:04:05.360
it's gonna be loading true.

63
00:04:06.530 --> 00:04:07.760
So this is the default state.

64
00:04:07.760 --> 00:04:10.642
Whenever we create one of these,
it's gonna be in a loading state, right?

65
00:04:15.185 --> 00:04:20.695
The next thing we're gonna do is we're
gonna have an async ComponentDidMount.

66
00:04:23.644 --> 00:04:28.890
So class components have something
called life cycle methods.

67
00:04:28.890 --> 00:04:32.355
So component did mount is the thing
that gets called as soon as the React

68
00:04:32.355 --> 00:04:34.720
component is rendered for the first time.

69
00:04:34.720 --> 00:04:39.444
So as soon as someone goes to slash detail
slash one, it's going to render this for

70
00:04:39.444 --> 00:04:43.190
the first time and
then it's gonna call component did mount.

71
00:04:43.190 --> 00:04:44.950
This is kind of like the effect, right?

72
00:04:44.950 --> 00:04:48.925
That that use effect where we gave it the
angle brackets, this is gonna get called

73
00:04:48.925 --> 00:04:52.035
once when it's first created and
then it's not called again.

74
00:04:53.676 --> 00:04:57.317
So what we wanna do when this page is
first called is we wanna go fetch all

75
00:04:57.317 --> 00:04:59.870
the data for
the pet that we just tried to render.

76
00:05:01.020 --> 00:05:04.750
So we're gonna say const res equals await,

77
00:05:07.261 --> 00:05:13.248
Fetch, Yes, such, there we go.

78
00:05:18.119 --> 00:05:24.387
We wanna do with the backticks

79
00:05:24.387 --> 00:05:31.158
here, http://pets-v2-

80
00:05:31.158 --> 00:05:38.893
.dev-api's.com/pets?id=${this.props.match-

81
00:05:38.893 --> 00:05:48.223
.params.id}.

82
00:05:51.189 --> 00:05:56.060
Now you might be looking at this like
what did I actually just right there,

83
00:05:56.060 --> 00:05:58.820
that is so much staff I was not expecting.

84
00:06:00.120 --> 00:06:04.740
So let's break it down for just a second,
this refers to the detail component right.

85
00:06:04.740 --> 00:06:08.910
It's the component that we are working on.

86
00:06:08.910 --> 00:06:14.126
Now that this these two match and params,

87
00:06:14.126 --> 00:06:20.088
this is coming from react router,
the match and

88
00:06:20.088 --> 00:06:25.420
the params are basically, where are we?

89
00:06:25.420 --> 00:06:28.714
Here, so this is an app.js.

90
00:06:30.140 --> 00:06:32.990
We have the details:id,
I need this, right?

91
00:06:32.990 --> 00:06:35.970
This is what I'm looking for and this
is how React router lets you get at it.

92
00:06:37.630 --> 00:06:40.930
So if I'm looking for dog of id 3.

93
00:06:40.930 --> 00:06:43.940
This is where I'm gonna get it.

94
00:06:43.940 --> 00:06:46.740
It's gonna come from the match
which is like the matched path.

95
00:06:46.740 --> 00:06:51.926
The prams or the parameters that
I'm getting from the user, and

96
00:06:51.926 --> 00:06:57.340
the id is this whatever I call this,
if I call this :dog, right?

97
00:06:57.340 --> 00:06:59.790
Then it would be .match.dog, right?

98
00:06:59.790 --> 00:07:01.500
It's whatever I called that.

99
00:07:01.500 --> 00:07:06.870
&gt;&gt; If this was a function component
would it just be props.match.params.id?

100
00:07:06.870 --> 00:07:11.130
&gt;&gt; Yeah, if this was a function component,
how would we get that?

101
00:07:11.130 --> 00:07:13.241
You actually use a special
hook that gets it for you.

102
00:07:17.356 --> 00:07:20.030
Okay, so that's gonna grab that.

103
00:07:20.030 --> 00:07:27.657
We have to do the const
json = await res.json.

104
00:07:27.657 --> 00:07:31.900
And then now I can say this.setState.

105
00:07:31.900 --> 00:07:33.650
I got a bunch of stuff here from JSON.

106
00:07:35.900 --> 00:07:38.850
And and
I could do a couple of things here.

107
00:07:38.850 --> 00:07:40.800
I'm just gonna do something kind of easy.

108
00:07:40.800 --> 00:07:42.070
Well, let's shoot this way first.

109
00:07:43.390 --> 00:07:48.800
The first thing I wanna do is I
wanna say loading is false, right?

110
00:07:48.800 --> 00:07:50.231
As soon as I've loaded this,

111
00:07:50.231 --> 00:07:54.260
I wanna set the loading state to be false
because now everything is loaded, right?

112
00:07:54.260 --> 00:07:55.390
That makes sense.

113
00:07:55.390 --> 00:07:56.850
And this is how you do it.

114
00:07:56.850 --> 00:08:00.863
With set state, what it does is it takes
this object that you're giving in emerges

115
00:08:00.863 --> 00:08:02.620
back with the state that you have.

116
00:08:02.620 --> 00:08:04.610
So in this case,
I only have one set piece of state.

117
00:08:05.980 --> 00:08:09.763
But if I had like, other thing,

118
00:08:15.205 --> 00:08:17.860
If I did this,
it wouldn't overwrite other thing, right?

119
00:08:17.860 --> 00:08:18.900
It doesn't object at assign.

120
00:08:18.900 --> 00:08:22.241
So it leaves the existing state there and
it only overwrites what you have.

121
00:08:26.165 --> 00:08:27.097
Okay.

122
00:08:31.868 --> 00:08:36.500
Now what I wanna do here is I'm getting
a bunch of state back from the API.

123
00:08:38.190 --> 00:08:43.244
And I could go back here and
do exactly what we were

124
00:08:43.244 --> 00:08:48.545
talking about before,
which is I need to do name and

125
00:08:48.545 --> 00:08:53.030
that's gonna be json.pets.0.name.

126
00:08:53.030 --> 00:08:55.110
So that's how this API works.

127
00:08:55.110 --> 00:08:56.959
In fact, let's just take
a look at what it looks like.

128
00:09:02.836 --> 00:09:04.970
You can see here it has a pets array.

129
00:09:04.970 --> 00:09:08.590
So if there's multiple things that matched
it, it will give back all of them.

130
00:09:10.210 --> 00:09:12.090
But it comes back in an array, right?

131
00:09:12.090 --> 00:09:18.300
So zero and then this is gonna be one Luna
dog, Seattle, Washington description.

132
00:09:18.300 --> 00:09:21.050
It's kind of burdensome to go back and
do all of those.

133
00:09:21.050 --> 00:09:23.860
So let me show you just a really
fast way of doing that.

134
00:09:23.860 --> 00:09:28.618
So instead of doing all that
we can do object.assign.

135
00:09:31.800 --> 00:09:33.477
Wrap those in parentheses.

136
00:09:37.980 --> 00:09:44.702
And then after that, I can say json.pets0.

137
00:09:52.087 --> 00:09:54.150
So what's happening here?

138
00:09:54.150 --> 00:09:56.290
We have this loading false, right?

139
00:09:56.290 --> 00:09:58.040
So that's going to overwrite that.

140
00:09:58.040 --> 00:10:01.749
And then everything else is gonna
be passed in just directly from

141
00:10:01.749 --> 00:10:03.060
json.pets, right?

142
00:10:03.060 --> 00:10:07.869
So the name, the description, the images,
all that, does that makes sense?

143
00:10:10.818 --> 00:10:11.644
Cool.

144
00:10:15.820 --> 00:10:20.748
So just to see what that looks like,
let's just do a console.log (this.state).

145
00:10:23.329 --> 00:10:25.799
So let's go back here and look at this.

146
00:10:28.610 --> 00:10:30.378
That's not gonna work quite yet.

147
00:10:30.378 --> 00:10:31.714
That's true.

148
00:10:36.310 --> 00:10:37.817
So let's go make that work.

149
00:10:43.219 --> 00:10:47.720
We need to get this with route
working with this component.

150
00:10:47.720 --> 00:10:49.536
So basically, by default,

151
00:10:49.536 --> 00:10:54.456
React router doesn't pass in all its
information to the details component,

152
00:10:54.456 --> 00:10:59.620
we have to say, hey, please give us all
that information we actually do need it.

153
00:10:59.620 --> 00:11:05.100
And the way you do that is you just
wrap this details export at the end.

154
00:11:05.100 --> 00:11:09.670
So this one right here
details withRouter like that.

155
00:11:09.670 --> 00:11:14.500
And this is just gonna
now pass those props in.

156
00:11:14.500 --> 00:11:16.802
This is what again,
called a higher order component.

157
00:11:20.630 --> 00:11:24.080
And now it's gonna pass all
that information into details.

158
00:11:24.080 --> 00:11:26.182
It's kind of magical but like I said,

159
00:11:26.182 --> 00:11:30.398
it's just going to inject all the react
router information into the route.

160
00:11:35.226 --> 00:11:37.810
Des it make sense?

161
00:11:37.810 --> 00:11:42.580
So now if I refresh the page with details
one, you'll notice that the first time it

162
00:11:42.580 --> 00:11:46.400
logs, it's got loading true,
which is what we expect, right?

163
00:11:46.400 --> 00:11:51.193
Then when it comes back again, and
it calls this.setState here, that one,

164
00:11:51.193 --> 00:11:55.070
it's gonna re-render
again with the new state.

165
00:11:55.070 --> 00:11:57.125
So then it calls a re-render again, and

166
00:11:57.125 --> 00:12:01.417
now we have everything coming back from
the API, the animal, the breed, the city,

167
00:12:01.417 --> 00:12:04.090
the description, ID,
images, so on and so forth.

168
00:12:06.948 --> 00:12:07.768
Makes sense?

169
00:12:10.286 --> 00:12:10.786
All right.

170
00:12:16.286 --> 00:12:21.224
So now that we have a bunch of
useful information coming back

171
00:12:21.224 --> 00:12:24.220
from the API let's use it.

172
00:12:24.220 --> 00:12:25.550
Let's make something that looks nice.

173
00:12:27.010 --> 00:12:28.303
Get rid this console.log.

174
00:12:37.750 --> 00:12:38.380
Okay?

175
00:12:40.650 --> 00:12:45.949
Let's just destructure
up here because this is

176
00:12:45.949 --> 00:12:52.837
gonna make it easier to work
with I'm gonna say const animal,

177
00:12:52.837 --> 00:12:56.943
breed, city state, description,

178
00:12:56.943 --> 00:13:04.052
name, = this.state.

179
00:13:12.564 --> 00:13:13.250
Okay?

180
00:13:13.250 --> 00:13:19.315
Here we're going to make
a div classname = details.

181
00:13:21.352 --> 00:13:27.410
And a div inside of that and
that's gonna have an h1 with a name.

182
00:13:27.410 --> 00:13:29.807
It's gonna have an h2 with,

183
00:13:39.090 --> 00:13:40.344
Yes it's 2 that way.

184
00:13:43.960 --> 00:13:46.456
Animal again, we're gonna do
one of those template strings.

185
00:13:49.097 --> 00:13:56.912
Animal breed, City,

186
00:14:02.244 --> 00:14:09.628
We're doing state,
city comma state Like that.

187
00:14:16.879 --> 00:14:21.590
Then we have a button underneath it cuz
we're gonna make like an adopt feature.

188
00:14:21.590 --> 00:14:28.968
So we do adopt, Name.

189
00:14:32.070 --> 00:14:34.441
Now, you might ask me and
you totally get it done this way as well.

190
00:14:46.249 --> 00:14:49.750
This actually works line 30 and
line 31 are equivalent.

191
00:14:50.940 --> 00:14:56.100
One uses a template string, one just uses
like the native JSX way of doing it.

192
00:14:56.100 --> 00:14:58.380
It doesn't matter,
you can do it either way.

193
00:14:58.380 --> 00:15:00.900
I actually couldn't tell you why
I did it this way in my notes.

194
00:15:00.900 --> 00:15:01.963
Probably just force of habit.

195
00:15:05.405 --> 00:15:08.918
But you can intersperse these
curly braces wherever you want to.

196
00:15:11.301 --> 00:15:11.945
Up to you,

197
00:15:11.945 --> 00:15:16.610
I'm gonna leave it this way just because
that's where I use my notes, okay?

198
00:15:16.610 --> 00:15:21.999
And then under the button, we're gonna
do a p tag with the description in it.

199
00:15:27.420 --> 00:15:31.785
Okay, so now if we pop over here,
you can see, Luna so

200
00:15:31.785 --> 00:15:34.900
Havanese, you can click adopt Luna.

201
00:15:36.160 --> 00:15:40.320
And it's kind of like a little
description of her as well.

202
00:15:40.320 --> 00:15:44.504
So why am I using object assign
instead of, let's just write it out so

203
00:15:44.504 --> 00:15:48.417
you can see what it actually
would look like, this.setState.

204
00:15:52.688 --> 00:15:57.740
Loading false and then you would

205
00:15:57.740 --> 00:16:02.691
be like name, Pets.

206
00:16:04.079 --> 00:16:07.816
See json.pets[0].name and

207
00:16:07.816 --> 00:16:12.356
I'd have to do this for each one of them.

208
00:16:15.233 --> 00:16:22.260
Breed, Animal, so on and so
forth for each one of them.

209
00:16:24.420 --> 00:16:26.520
No problem absolutely
you can do it this way.

210
00:16:26.520 --> 00:16:29.206
Some people would prefer it cuz
we're being more verbose and

211
00:16:29.206 --> 00:16:31.480
here's exactly what I'm
expecting from the API.

212
00:16:32.490 --> 00:16:36.820
I'm 100% okay at this is
what you choose to do.

213
00:16:36.820 --> 00:16:41.110
This was just lazy Brian
writing lazy code.

214
00:16:45.599 --> 00:16:49.295
In particular, because I typically use
TypeScript when I'm writing React and

215
00:16:49.295 --> 00:16:53.140
TypeScript catch all the bugs that
I would normally face with this.

216
00:16:53.140 --> 00:16:58.420
If I'm not using TypeScript, I might be
more prone to use something like this.

217
00:16:58.420 --> 00:17:00.764
Because here's precisely
what I'm expecting.

218
00:17:03.770 --> 00:17:04.660
So, up to you.

