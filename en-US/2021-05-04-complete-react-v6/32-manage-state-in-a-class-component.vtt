WEBVTT

1
00:00:00.000 --> 00:00:03.870
All right, let's write a bit more
complicated class component just so you

2
00:00:03.870 --> 00:00:08.122
can kinda get some feeling of what it's
like to manage state and class component.

3
00:00:08.122 --> 00:00:14.034
If we go back to our Adopt me,
so one thing that you're gonna

4
00:00:14.034 --> 00:00:20.436
definitely have to do after we
did that class properties thing.

5
00:00:20.436 --> 00:00:26.207
You're gonna have to start and
stop your server because

6
00:00:26.207 --> 00:00:31.248
Parcel is not gonna pick
that up automatically.

7
00:00:31.248 --> 00:00:34.330
So I should be able to run NPM, run dev.

8
00:00:34.330 --> 00:00:36.834
Literally just stop and start it again.

9
00:00:38.790 --> 00:00:42.793
Refresh my page, everything's good again.

10
00:00:42.793 --> 00:00:45.271
If that's still not working for
you, obviously it worked for me,

11
00:00:45.271 --> 00:00:46.699
I imagine it'll work for most of you.

12
00:00:46.699 --> 00:00:48.059
But I'm just gonna show something.

13
00:00:48.059 --> 00:00:54.235
Whenever Parcel gets in a bad state,
just do rm-rf.cache and dist.

14
00:00:54.235 --> 00:00:55.902
Just remove those two folders.

15
00:00:55.902 --> 00:01:00.734
They're generated by Parcel, and
then just run the server again.

16
00:01:00.734 --> 00:01:02.313
It just clears out all of its cache,
right?

17
00:01:02.313 --> 00:01:03.944
So that it starts fresh.

18
00:01:03.944 --> 00:01:10.142
It'll take a bit longer, you can see
this took me six seconds instead of 5.3.

19
00:01:10.142 --> 00:01:14.539
It takes a little bit longer for it to
get started, but obviously it's fine.

20
00:01:14.539 --> 00:01:16.218
Refresh, everything's fine.

21
00:01:19.124 --> 00:01:23.961
Okay, so let's go manage state and

22
00:01:23.961 --> 00:01:28.804
a more difficult class component.

23
00:01:28.804 --> 00:01:34.203
Let's create a new file and
we're going to call it carousel.JS.

24
00:01:36.693 --> 00:01:39.897
So if we go look at our API again,
this is the one for Luna here.

25
00:01:39.897 --> 00:01:44.095
You can see that she has five different
images of her that come back from the API.

26
00:01:44.095 --> 00:01:47.093
And we wanna be able to nicely
rotate through all of those, right?

27
00:01:47.093 --> 00:01:51.016
So if a user clicks one of them,
it shows a nice picture of them and

28
00:01:51.016 --> 00:01:53.792
they can look closely at
each one of the pets.

29
00:01:53.792 --> 00:01:55.448
So let's do exactly that.

30
00:01:55.448 --> 00:02:02.585
We're gonna import component from React.

31
00:02:05.053 --> 00:02:10.023
We're gonna say class
carousel extends component.

32
00:02:12.969 --> 00:02:18.350
We're gonna say the state is equal to
the first network that's gonna be active,

33
00:02:18.350 --> 00:02:18.914
right?

34
00:02:18.914 --> 00:02:21.031
The first photo that we're gonna
show is the first one in there.

35
00:02:25.409 --> 00:02:27.150
We're gonna have some default props.

36
00:02:27.150 --> 00:02:35.320
So we're gonna give it a static
default props = images.

37
00:02:35.320 --> 00:02:37.758
And we're gonna give it that default
image again if it doesn't have

38
00:02:37.758 --> 00:02:38.537
an image by default.

39
00:02:38.537 --> 00:02:47.450
http://pets/images.dev/apis.com/pets/none-

40
00:02:47.450 --> 00:02:52.357
.jpg.

41
00:02:52.357 --> 00:02:54.570
So let's talk about this for
just a second.

42
00:02:54.570 --> 00:02:59.214
Basically we're saying, hey, if you don't
give me props for images, don't worry,

43
00:02:59.214 --> 00:03:01.940
I have some default ones
I'm gonna fall back onto.

44
00:03:02.940 --> 00:03:04.790
These do have to be static.

45
00:03:04.790 --> 00:03:05.490
What does static mean?

46
00:03:06.920 --> 00:03:11.259
That means I can do carousel as

47
00:03:11.259 --> 00:03:16.997
an abstract clap, dot defaultProps.

48
00:03:19.628 --> 00:03:22.780
As opposed to what you would do before,

49
00:03:22.780 --> 00:03:26.610
which would be const
carousel = new carousel.

50
00:03:28.610 --> 00:03:33.390
This is not gonna have
carousel.defaultProps.

51
00:03:33.390 --> 00:03:34.364
Those won't be available.

52
00:03:34.364 --> 00:03:38.120
That's only available on
the parent class here, right?

53
00:03:38.120 --> 00:03:41.625
The carousel with the capital C.

54
00:03:41.625 --> 00:03:45.337
What this will have is carousel.props,
which may or

55
00:03:45.337 --> 00:03:47.740
may not be these default props.

56
00:03:47.740 --> 00:03:48.930
So that's what that static means.

57
00:03:48.930 --> 00:03:52.350
It means it's callable
one the abstract class.

58
00:03:54.020 --> 00:03:57.000
And some of you might be looking
as I got away from Java.

59
00:03:57.000 --> 00:03:59.620
So I didn't have to learn
to do this stuff anymore.

60
00:03:59.620 --> 00:04:03.360
And typically in JavaScript,
this is not really a thing.

61
00:04:03.360 --> 00:04:05.680
But in this particular case,
it does make a difference.

62
00:04:05.680 --> 00:04:10.604
Some of these things do have to be static.

63
00:04:10.604 --> 00:04:14.640
&gt;&gt; Is this we defaultProps the same
as prop types in defaultProps or

64
00:04:14.640 --> 00:04:15.770
is it something?

65
00:04:17.870 --> 00:04:19.250
&gt;&gt; It's different.

66
00:04:19.250 --> 00:04:22.540
So the question is,
is this the same as prop types?

67
00:04:22.540 --> 00:04:24.810
Prop types is something totally different.

68
00:04:24.810 --> 00:04:28.390
I talked about my former course and
I don't wanna derail on it too much.

69
00:04:28.390 --> 00:04:30.304
But it's basically just saying,

70
00:04:30.304 --> 00:04:34.400
if you don't give me images, here is
some default images that we can use.

71
00:04:34.400 --> 00:04:37.080
So then we can always assume that
there are images, which is good.

72
00:04:37.080 --> 00:04:39.724
&gt;&gt; Okay.

73
00:04:39.724 --> 00:04:42.114
&gt;&gt; The nice thing about this is,
TypeScript will pick up on these and

74
00:04:42.114 --> 00:04:44.910
automatically it goes like, okay,
this is an array of strings, cool.

75
00:04:44.910 --> 00:04:48.689
And you don't have to type your props
anymore cuz it reads them off of

76
00:04:48.689 --> 00:04:49.830
the default props.

77
00:04:54.817 --> 00:04:58.882
Okay, so now we're gonna have a render,
cuz as you may remember,

78
00:04:58.882 --> 00:05:02.233
everything always has to have
a render no matter what.

79
00:05:04.348 --> 00:05:11.386
Const active, and
we're gonna grab this off of state,

80
00:05:11.386 --> 00:05:17.690
this.state, and const images = this.props.

81
00:05:19.230 --> 00:05:21.140
Now let's chat a moment about this.

82
00:05:21.140 --> 00:05:22.790
What is state versus prop?

83
00:05:23.820 --> 00:05:25.780
One state is mutable, right?

84
00:05:25.780 --> 00:05:28.890
It's what you use hooks for previously.

85
00:05:28.890 --> 00:05:32.790
And mutable is just a really fancy way
of saying that this is changeable.

86
00:05:32.790 --> 00:05:36.406
So I can call this.setState and
I can modify what active is.

87
00:05:36.406 --> 00:05:39.310
This.props is what's
coming from my parents.

88
00:05:39.310 --> 00:05:42.000
And you remember one-way data flow
that we talked about earlier.

89
00:05:42.000 --> 00:05:44.687
This is one-way data flow,
this is read only.

90
00:05:44.687 --> 00:05:46.000
I cannot change props.

91
00:05:46.000 --> 00:05:47.705
Only the parent can change props.

92
00:05:47.705 --> 00:05:51.633
So this is data flowing
down from my parent.

93
00:05:51.633 --> 00:05:53.415
So I'm gonna get these
images from my parent,

94
00:05:53.415 --> 00:05:54.840
which is gonna be the pet component.

95
00:05:56.330 --> 00:05:59.970
And so this stuff always comes from the
parent whereas state is self-contained.

96
00:05:59.970 --> 00:06:02.470
It's always contained within
the component itself.

97
00:06:02.470 --> 00:06:05.302
Now props might be state from the parent,
right?

98
00:06:05.302 --> 00:06:06.020
And that's actually true.

99
00:06:06.020 --> 00:06:07.900
It is state from my parents.

100
00:06:07.900 --> 00:06:10.794
But that means that the parents
gets to modify its own state, and

101
00:06:10.794 --> 00:06:13.650
I guess that probably
bears mentioning as well.

102
00:06:13.650 --> 00:06:17.820
The only thing that can modify state is
the component that contains it, right?

103
00:06:17.820 --> 00:06:19.700
Nothing else can modify state.

104
00:06:19.700 --> 00:06:23.915
So I can't call set state on a carousel
from pet or app or results or

105
00:06:23.915 --> 00:06:28.510
anything like that, I can only do
it from within carousels itself.

106
00:06:28.510 --> 00:06:29.727
Does that make sense?

107
00:06:32.683 --> 00:06:35.547
It's one of those things that is hard
to explain because it should be kind of

108
00:06:35.547 --> 00:06:36.570
intuitively obvious.

109
00:06:36.570 --> 00:06:39.990
And the more you get into it,
it just kinda feels that way.

110
00:06:39.990 --> 00:06:43.648
And let's just kinda get into it and
I'll explain more as we're going.

111
00:06:45.657 --> 00:06:47.917
All right, so I'm gonna say return here.

112
00:06:51.020 --> 00:06:53.806
We're gonna have a div that's
gonna encapsulate everything.

113
00:06:56.050 --> 00:06:58.849
ClassName = carousel.

114
00:07:06.054 --> 00:07:09.120
We're gonna have an image,

115
00:07:09.120 --> 00:07:14.629
source is gonna be equal to images active,
right?

116
00:07:14.629 --> 00:07:18.020
Whatever the currently selected image is,
that's gonna be the hero image here.

117
00:07:19.060 --> 00:07:23.998
The alt is gonna be, this doesn't actually
have the name being passed into it,

118
00:07:23.998 --> 00:07:25.334
so I just put animal.

119
00:07:25.334 --> 00:07:29.184
But we probably could have done
a better alt text here by passing in

120
00:07:29.184 --> 00:07:30.340
the name as well.

121
00:07:30.340 --> 00:07:31.755
But for
now we're just gonna leave that off.

122
00:07:34.431 --> 00:07:43.128
And the div className = carousel-smaller.

123
00:07:50.431 --> 00:07:56.992
And I'm gonna do images.map,

124
00:07:56.992 --> 00:08:00.640
photo and index.

125
00:08:09.320 --> 00:08:12.591
Okay, and then we're going to say image,

126
00:08:16.177 --> 00:08:21.134
Key = photo cuz that URL is
gonna be guaranteed unique.

127
00:08:23.937 --> 00:08:27.239
Src = photo.

128
00:08:30.446 --> 00:08:37.829
And then className,
when someone has selected the pet, right?

129
00:08:37.829 --> 00:08:40.328
So if someone clicks on image 3 and
then they select that,

130
00:08:40.328 --> 00:08:41.930
we wanna show an active class.

131
00:08:41.930 --> 00:08:47.474
So the way we would do that is index

132
00:08:47.474 --> 00:08:52.622
=== active ?"active" or

133
00:08:52.622 --> 00:08:55.790
nothing, right?

134
00:08:55.790 --> 00:08:57.910
So, if it's selected,
put an active class on there.

135
00:08:57.910 --> 00:09:00.580
If it's not selected,
don't put a class on there.

136
00:09:00.580 --> 00:09:05.878
There's other libraries, like CLSX,
I think is one of NPM packages that

137
00:09:05.878 --> 00:09:11.006
make this, it's a nice little function
helper that helps you do this,

138
00:09:11.006 --> 00:09:14.860
but this is just one ternary
that kinda helps us do it.

139
00:09:15.910 --> 00:09:20.479
So again, if index is equal to active,
put active, if not, put nothing.

140
00:09:22.414 --> 00:09:25.882
And then the alt,
we're gonna put animal thumbnail.

141
00:09:36.190 --> 00:09:42.475
Okay, and then at the bottom,
make sure you export default carousel.

142
00:09:46.586 --> 00:09:50.320
Okay, let's go implement
this with details.

143
00:09:50.320 --> 00:09:54.262
So we're going to import,

144
00:09:56.631 --> 00:10:03.228
Carousel, sorry, carousel like that,
from dot/carousel.

145
00:10:11.308 --> 00:10:13.726
Okay, here we're gonna have
to grab images as well,

146
00:10:13.726 --> 00:10:15.950
cuz that's gonna be
what's fed into carousel.

147
00:10:17.800 --> 00:10:22.665
And then the first components
are the div details.

148
00:10:22.665 --> 00:10:29.125
So here we're going to put
Carousel images = images.

149
00:10:38.073 --> 00:10:40.028
So here on line 39, we just put it there.

150
00:10:43.962 --> 00:10:49.150
Okay, so now we should be able to
pop over to our Adopt Me page.

151
00:10:49.150 --> 00:10:53.896
And you can see there now we have Luna
sitting in my suitcase when I was

152
00:10:53.896 --> 00:10:56.738
trying to pack to come, pack to travel.

153
00:10:56.738 --> 00:10:58.310
She does not like it when I travel.

154
00:11:01.403 --> 00:11:03.070
So it's still not interactive yet.

155
00:11:03.070 --> 00:11:06.191
We can't click on these images, so
we do have to go make those interactive.

156
00:11:08.860 --> 00:11:13.951
But just to kinda show you how
the default props work cuz we saw those.

157
00:11:13.951 --> 00:11:18.640
Let's just make it so
images is equal to empty brackets there.

158
00:11:18.640 --> 00:11:20.928
Well, actually nothing, cuz you don't
wanna pass anything into there.

159
00:11:23.800 --> 00:11:25.100
So let's just delete that altogether.

160
00:11:28.330 --> 00:11:30.655
And now you can see,
that's what the defaultProps do.

161
00:11:30.655 --> 00:11:34.246
It's like if I don't pass anything in for
that, it's gonna like, okay,

162
00:11:34.246 --> 00:11:36.938
I got default props, and
this is what populates there.

163
00:11:41.058 --> 00:11:44.300
I absolutely love the art that
Alice did for this, right?

164
00:11:44.300 --> 00:11:45.091
Super cute.

165
00:11:48.250 --> 00:11:50.746
Okay, but we do have images,
let's put those in there.

166
00:11:50.746 --> 00:11:55.451
And we have images, And
then last thing we need to

167
00:11:55.451 --> 00:11:57.909
do is we just input an event handle on
here and then it's just gonna work.

