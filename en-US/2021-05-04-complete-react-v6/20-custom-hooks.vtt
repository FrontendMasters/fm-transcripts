WEBVTT

1
00:00:00.140 --> 00:00:03.197
So we just did hooks, those are super fun.

2
00:00:03.197 --> 00:00:08.148
And I'm gonna say 99% of your
use case is going to be using

3
00:00:08.148 --> 00:00:13.550
just React hooks directly
inside of your components.

4
00:00:13.550 --> 00:00:16.757
But there is gonna be rare occasions
that you discover some common piece of

5
00:00:16.757 --> 00:00:19.000
functionality in your application.

6
00:00:19.000 --> 00:00:23.812
That you're just gonna decide, I wish I
could reuse this hook over and over again,

7
00:00:23.812 --> 00:00:28.420
this kind of higher level more abstract
hook rather than just using the same kind

8
00:00:28.420 --> 00:00:30.370
of patterns over and over again.

9
00:00:31.710 --> 00:00:34.140
So I'm gonna teach you how
to create your own hook.

10
00:00:36.530 --> 00:00:39.094
So if we go back to our application.

11
00:00:40.340 --> 00:00:42.252
We have this animal drop down.

12
00:00:42.252 --> 00:00:46.986
So if I select dog, I want it to
be populated with like Husky, and

13
00:00:46.986 --> 00:00:52.531
Havanese, and Vishal Frieza, and
Poodle, and stuff like that, right?

14
00:00:52.531 --> 00:00:56.300
And let's imagine I have to do that
several places throughout my application,

15
00:00:56.300 --> 00:00:59.970
and I don't wanna reimplement and
replicate that logic over and over again.

16
00:00:59.970 --> 00:01:03.856
It'd be nice if I just had a hook
that is like, if I gave it an animal,

17
00:01:03.856 --> 00:01:05.712
it gave me back a list of breeds.

18
00:01:05.712 --> 00:01:08.170
So we're gonna go do that right now.

19
00:01:08.170 --> 00:01:10.677
What I'm gonna tell you right
now is I'm showing you right

20
00:01:10.677 --> 00:01:13.194
now how to create a custom look
just to show you how to do it.

21
00:01:13.194 --> 00:01:16.860
I would not necessarily do that
in this particular case, right?

22
00:01:16.860 --> 00:01:22.446
If you have a place where you don't have
to rip out logic and make it more modular,

23
00:01:22.446 --> 00:01:26.820
and things like that,
you don't necessarily need to do that.

24
00:01:26.820 --> 00:01:30.049
In this particular case, I would just
leave all that logic here in the search

25
00:01:30.049 --> 00:01:33.800
params component because that's where it
lives, that's the only place that uses it.

26
00:01:34.970 --> 00:01:39.585
But for now, we're gonna
abstract this into a custom hook.

27
00:01:41.605 --> 00:01:44.581
So create a new file here, and

28
00:01:44.581 --> 00:01:50.178
we're gonna put this inside
of the source directory and

29
00:01:50.178 --> 00:01:54.476
it's gonna be called useBreedList.js.

30
00:01:56.066 --> 00:01:57.571
This is gonna be our custom hook.

31
00:02:01.586 --> 00:02:04.240
So, the thing about hooks
is they use other hooks.

32
00:02:04.240 --> 00:02:09.927
So we're gonna say import [useState,
useEffect],

33
00:02:09.927 --> 00:02:15.137
because we're gonna use
both of those from React.

34
00:02:15.137 --> 00:02:18.721
We're gonna make a local cache,

35
00:02:18.721 --> 00:02:22.946
which is just gonna be an empty object.

36
00:02:22.946 --> 00:02:27.992
The idea here being if I select cat and
I get like tabby and Siamese and then

37
00:02:27.992 --> 00:02:33.228
I select dog and get like Husky and be
Vishal Frieza and then I go back to cat.

38
00:02:33.228 --> 00:02:36.634
That breed for
cats us not gonna have changed.

39
00:02:36.634 --> 00:02:41.043
I don't need to re-request it,
I'm just gonna store it locally, okay?

40
00:02:41.043 --> 00:02:46.558
I'm gonna export a default
function called useBreedList,

41
00:02:49.290 --> 00:02:52.566
That takes in an animal and it's gonna
give back a breedList and it's a hook.

42
00:02:55.951 --> 00:03:00.995
So this is gonna read a lot
like a React component,

43
00:03:00.995 --> 00:03:06.291
const [breedList,
setBreedList] = useState.

44
00:03:09.250 --> 00:03:10.881
Something I'll say right now,

45
00:03:10.881 --> 00:03:15.180
you'll notice that I always call this set
block, that's kind of a personal habit.

46
00:03:15.180 --> 00:03:19.272
I'm not gonna say like everyone does
it that way, but you'll see it's fairly

47
00:03:19.272 --> 00:03:23.069
common to call these breedLists and
setBreedList or x and set x, right?

48
00:03:23.069 --> 00:03:26.919
It's just kind of nice to know that
if I see setBreedList is like okay,

49
00:03:26.919 --> 00:03:28.962
this is referring to the breedList.

50
00:03:28.962 --> 00:03:33.325
Okay, and then we're gonna give it an
empty array because by default it's gonna

51
00:03:33.325 --> 00:03:34.360
be an empty array.

52
00:03:34.360 --> 00:03:37.902
And then we're also gonna
have a status here.

53
00:03:39.711 --> 00:03:45.610
Status and setStatus = useState.

54
00:03:45.610 --> 00:03:48.330
And this is gonna be what I
would call an enumerated type.

55
00:03:51.200 --> 00:03:54.318
So basically, the programmer that's
consuming this because now we're creating

56
00:03:54.318 --> 00:03:56.600
code that we intend that other
developers will use, right?

57
00:03:58.230 --> 00:04:02.440
So if no one's ever called it before,
it's gonna be unloaded.

58
00:04:02.440 --> 00:04:05.299
If new stuff is loading,
we're gonna say it's loading.

59
00:04:05.299 --> 00:04:08.000
And it's loaded stuff,
we're gonna say it's loaded.

60
00:04:09.400 --> 00:04:12.860
So it's just a string that represents
what the state of the hook is in.

61
00:04:14.540 --> 00:04:17.237
We don't really use it anywhere, in fact,
we could probably leave this out.

62
00:04:17.237 --> 00:04:19.711
But this is what I would do
personally if I was creating this, so

63
00:04:19.711 --> 00:04:21.031
I'm gonna make you do it with me.

64
00:04:26.255 --> 00:04:33.980
Okay, we're gonna say useEffect,
Take in a function here.

65
00:04:36.700 --> 00:04:41.864
And the first thing I wanna say,
if animal, so

66
00:04:41.864 --> 00:04:49.155
if no animal's provided,
then setBreedList to empty, right?

67
00:04:49.155 --> 00:04:54.178
Because if you have no animal then you
have no breedList, that makes sense.

68
00:04:54.178 --> 00:04:59.718
Else if,
if I already have a copy of it in my local

69
00:04:59.718 --> 00:05:04.568
cache then just serve that immediately,

70
00:05:04.568 --> 00:05:09.567
setBreedList localCache:(animal),

71
00:05:11.571 --> 00:05:16.645
Else requestBreedList.

72
00:05:24.333 --> 00:05:31.800
Okay, so so far, This is kind of the logic
that we're gonna use in the effect to say,

73
00:05:35.759 --> 00:05:38.157
Right, okay.

74
00:05:38.157 --> 00:05:41.170
No animal, return an emptyList.

75
00:05:41.170 --> 00:05:48.442
If I have something locally, I've already
requested this in a previous time,

76
00:05:48.442 --> 00:05:53.774
then serve that,
otherwise go out to the API and go get it.

77
00:05:53.774 --> 00:05:58.912
Outside of the effect rather,
we're gonna make

78
00:05:58.912 --> 00:06:04.687
a function called async
function requestBreedList.

79
00:06:10.007 --> 00:06:14.489
So the first thing we're gonna
do is set breedList to be empty.

80
00:06:14.489 --> 00:06:17.995
We don't wanna have this weird
interim state where like I'm on dog,

81
00:06:17.995 --> 00:06:21.190
I have Husky and Poodle and
then I change it to cat.

82
00:06:21.190 --> 00:06:23.890
Immediately I would expect that
breedList to be empty while

83
00:06:23.890 --> 00:06:25.571
we are requesting new data, right?

84
00:06:25.571 --> 00:06:28.169
Because you wouldn't wanna
have this weird interim state

85
00:06:28.169 --> 00:06:31.202
where I have cats that are Huskies
cuz that doesn't make any sense.

86
00:06:33.235 --> 00:06:36.932
We're gonna set our loading status,
so set status to be loading.

87
00:06:40.151 --> 00:06:47.940
Then underneath that we're gonna
say const res = await fetch.

88
00:06:51.720 --> 00:06:54.951
I'm gonna go to

89
00:06:54.951 --> 00:07:05.646
http://pets-v2.dev-apis.com/breeds

90
00:07:05.646 --> 00:07:12.613
animal = $animal, like that.

91
00:07:16.933 --> 00:07:23.861
So http, not secure, which is fine for
our demo application,

92
00:07:23.861 --> 00:07:30.403
pets-v2.dev-apis
dev-apis.com/breeds?animal

93
00:07:30.403 --> 00:07:35.253
= our animal that we
got back from the user.

94
00:07:39.227 --> 00:07:43.910
Const json = await res.json and

95
00:07:43.910 --> 00:07:51.447
now json is gonna be whatever
we got back from the API.

96
00:07:51.447 --> 00:07:57.562
So local cache is gonna be equal to,
json.breeds.

97
00:08:00.470 --> 00:08:04.293
That's gonna be what we got back from
the API, I'm sorry, local cache animal.

98
00:08:07.212 --> 00:08:10.363
Right, because we wanna save that results
so that in the future if they come back to

99
00:08:10.363 --> 00:08:12.430
it that they're gonna get
that response over again.

100
00:08:14.250 --> 00:08:17.613
If for whatever reason the API was down or
something like that,

101
00:08:17.613 --> 00:08:21.420
we don't want our app to crash,
so you can say or empty array.

102
00:08:21.420 --> 00:08:24.170
So that worst case scenario that they're
just gonna get back an empty array.

103
00:08:26.160 --> 00:08:29.094
I guess you'd have a cache
problem at this point but

104
00:08:29.094 --> 00:08:31.356
it's better than crashing probably.

105
00:08:34.066 --> 00:08:38.317
SetBreedList to be json.breeds or

106
00:08:38.317 --> 00:08:43.419
even better, localCache[animal], so

107
00:08:43.419 --> 00:08:49.100
whatever we just stored
in local cache animal.

108
00:08:49.100 --> 00:08:53.604
You could also just put this if you want
to, but this is kind of self referential,

109
00:08:53.604 --> 00:08:54.611
so that's good.

110
00:08:54.611 --> 00:08:59.689
And then we're gonna set a status
at this point to be totally loaded.

111
00:09:03.288 --> 00:09:05.381
I guess in my notes had
this inside of the effect,

112
00:09:05.381 --> 00:09:06.922
so let's just go ahead and do that.

113
00:09:06.922 --> 00:09:10.428
I think it'd work either way,
but let's just put it in there.

114
00:09:10.428 --> 00:09:15.392
So I just moved this inside of the effect,
right?

115
00:09:15.392 --> 00:09:22.329
So use they effect here, this now
is async function is inside of it.

116
00:09:22.329 --> 00:09:25.655
I remember why I did this,
because it makes it play nice with JSLint.

117
00:09:25.655 --> 00:09:28.780
And again another VS code fun tip or
trick for you,

118
00:09:28.780 --> 00:09:33.321
I just highlighted this code, I hold
Alt or Option and just up and down and

119
00:09:33.321 --> 00:09:36.239
you can move it line by line up and
down, okay?

120
00:09:36.239 --> 00:09:38.930
So when do we want this
effect to run again?

121
00:09:40.030 --> 00:09:42.270
That's the question we need
to ask yourself right now.

122
00:09:42.270 --> 00:09:44.210
When does this effect run?

123
00:09:46.490 --> 00:09:49.343
Well, honestly, it'll tell you that
basically it's what animal is.

124
00:09:49.343 --> 00:09:52.829
Because animal is the thing that we
reference from outside of it and

125
00:09:52.829 --> 00:09:54.708
that's what we need it to rerun on.

126
00:09:54.708 --> 00:09:57.558
So every time that we get a new
animal back from the user.

127
00:09:59.693 --> 00:10:01.075
That's when we want it to run.

128
00:10:03.946 --> 00:10:08.563
There you go, so now we can kind of
have this guarantee that any time

129
00:10:08.563 --> 00:10:13.354
animal changes, we're gonna get
a new breedList back from the API.

130
00:10:13.354 --> 00:10:18.325
So what we wanna do is return here at
the bottom is we're going to return

131
00:10:18.325 --> 00:10:20.530
the breedList and the status.

132
00:10:22.140 --> 00:10:25.600
And we're following this convention,
you don't have to do it this way.

133
00:10:25.600 --> 00:10:30.201
If you feel more comfortable returning
an object of like breedList and status,

134
00:10:30.201 --> 00:10:32.890
nothing's forcing you
to do it the array way.

135
00:10:32.890 --> 00:10:37.240
It's just people in React tend to write
code that way so I tend to follow that.

136
00:10:37.240 --> 00:10:39.945
But it's totally up to you
how you wanna return that.

137
00:10:43.363 --> 00:10:45.657
But that's we're gonna do for right now.

138
00:10:48.803 --> 00:10:51.608
All right, so walk back a second with me.

139
00:10:51.608 --> 00:10:55.518
We're gonna use this breedList
inside of SearchParams.

140
00:10:55.518 --> 00:10:57.598
Imagine that you wrote this and

141
00:10:57.598 --> 00:11:02.570
then your colleague is going to use
the custom hook that you implemented.

142
00:11:04.850 --> 00:11:08.592
This has hooks inside of it but as long as
they're not doing any sort of conditionals

143
00:11:08.592 --> 00:11:11.531
are for loops inside,
they're not doing bad things with hooks,

144
00:11:11.531 --> 00:11:14.810
this is still gonna call all these
hooks in the exact same order, right?

145
00:11:14.810 --> 00:11:19.576
That's how this custom hook logic works is
that as long as all the hooks are called

146
00:11:19.576 --> 00:11:24.430
in the correct order, the same order over
and over again, it's just gonna work.

147
00:11:25.810 --> 00:11:28.960
And so there's no magic here, that's
why you don't have to have a special

148
00:11:28.960 --> 00:11:30.520
hook wrapper or anything like that.

149
00:11:30.520 --> 00:11:34.410
It's really just another function
that's calling other hooks.

150
00:11:34.410 --> 00:11:37.930
There's not really that much special about
a custom hook, is what I'm trying to say.

151
00:11:39.870 --> 00:11:42.293
Okay, so
let's head back over to SearchParams now.

152
00:11:42.293 --> 00:11:46.378
We're going to at the top,

153
00:11:46.378 --> 00:11:53.494
import useBreedList from ./useBreedList.

154
00:11:53.494 --> 00:11:58.080
And then here for breeds,

155
00:11:58.080 --> 00:12:04.545
we are gonna say const [breedList]

156
00:12:04.545 --> 00:12:09.975
= useBreedList with animal.

157
00:12:09.975 --> 00:12:17.208
So this goes back to,
The question that we were asked earlier

158
00:12:17.208 --> 00:12:21.200
is what happens if I have dependent
state and you can do it this way.

159
00:12:21.200 --> 00:12:23.745
So you might remember that we
also had status there, but

160
00:12:23.745 --> 00:12:26.360
we're never gonna use it, so
I'm just gonna ignore it.

161
00:12:26.360 --> 00:12:30.230
It's there, I'm just not gonna read
from it, so I'm not going to use it.

162
00:12:31.770 --> 00:12:34.758
Now I have breedList or
you can call this breeds if you want to,

163
00:12:34.758 --> 00:12:37.414
cuz that's actually what we
call it lower in the code.

164
00:12:40.048 --> 00:12:43.830
So I'm just gonna call this
breeds from useBreedList.

165
00:12:43.830 --> 00:12:49.296
And now if I scroll down here,
breeds here, it's already reading

166
00:12:49.296 --> 00:12:54.680
from the empty array that I had before,
so this should just work.

167
00:12:56.820 --> 00:13:03.610
So if I save this and head back over to
my application, no breed, makes sense.

168
00:13:03.610 --> 00:13:05.810
We don't have any animals selected.

169
00:13:05.810 --> 00:13:10.381
If I go down here and
say dog, now look at it,

170
00:13:10.381 --> 00:13:13.850
there's a bunch of dogs in here.

171
00:13:13.850 --> 00:13:21.630
And if I go to cat, get a bunch of cats,
so on and so forth.

172
00:13:23.290 --> 00:13:25.788
And we can actually watch this
happen in our network tab.

173
00:13:27.828 --> 00:13:33.855
So let's look at, I'm gonna clear this,
and I wanna look at just XHR.

174
00:13:35.005 --> 00:13:39.256
All right, so
you can see here I have the pet

175
00:13:39.256 --> 00:13:43.760
request that's what you would expect here.

176
00:13:43.760 --> 00:13:46.940
That's what got all these
pets in the first place.

177
00:13:46.940 --> 00:13:51.111
And if I switch this to dog,
notice it makes a request of breeds,

178
00:13:51.111 --> 00:13:54.560
animal equals dog, rabbit, breeds rabbit.

179
00:13:54.560 --> 00:13:55.960
Now what happens if I go back to dog?

180
00:13:58.910 --> 00:14:00.440
It doesn't make another request, right?

181
00:14:00.440 --> 00:14:03.862
Because we had that local cache of it,
so, we're not going back to the API.

182
00:14:03.862 --> 00:14:06.870
We're just using the one that we
all ready requested before and

183
00:14:06.870 --> 00:14:11.190
that's why it still works even
without requesting from the API again.

184
00:14:11.190 --> 00:14:15.624
So this is kinda the magic of hooks,
as long as everything has its correct data

185
00:14:15.624 --> 00:14:20.350
dependencies, that kind of cascading
requests all just happen automatically.

186
00:14:20.350 --> 00:14:23.080
The machinery just works as designed.

187
00:14:23.080 --> 00:14:27.640
So again, you're not gonna
create too many custom hooks.

188
00:14:27.640 --> 00:14:32.056
You shouldn't, in this particular case,
we kinda overkilled this.

189
00:14:32.056 --> 00:14:35.843
There's a decent chance that this
should just live all in SearchParams.

190
00:14:35.843 --> 00:14:39.498
But at the same time this component's
getting kinda long, and so

191
00:14:39.498 --> 00:14:41.550
it is nice to break out pieces.

192
00:14:41.550 --> 00:14:43.840
So I mean, use at your discretion.

193
00:14:43.840 --> 00:14:46.458
But one thing that you have to keep in

194
00:14:46.458 --> 00:14:52.100
mind is this useBreedList becomes
a black box to your future self.

195
00:14:52.100 --> 00:14:56.099
And so it can be a source of bugs because
not all of the logic is coexisting with

196
00:14:56.099 --> 00:14:59.060
each other, so it's a balance, right?

197
00:14:59.060 --> 00:15:02.040
The thing that I want to invite you
to do is just choose readability.

198
00:15:03.140 --> 00:15:04.890
Choose readability,
choose maintainability.

199
00:15:04.890 --> 00:15:08.341
Do the thing that you think is gonna
make this code not the most clever or

200
00:15:08.341 --> 00:15:12.160
the cleanest but the thing that's just
easiest to read for you in the future.

