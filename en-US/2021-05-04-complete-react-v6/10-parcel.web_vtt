WEBVTT

1
00:00:00.290 --> 00:00:02.130
Now, let's get into Parcel.

2
00:00:03.480 --> 00:00:08.410
Parcel's a really awesome tool,
it's a bundler for JavaScript.

3
00:00:09.910 --> 00:00:12.093
So, there's lots of other
bundlers we could use.

4
00:00:12.093 --> 00:00:15.560
In previous versions of this course even
I've used Webpack, which is another cool

5
00:00:15.560 --> 00:00:18.344
tool, and there's lots of stuff
on Frontend Masters about that.

6
00:00:18.344 --> 00:00:23.916
You can actually go check out Intro
to React V3, which uses Webpack.

7
00:00:26.665 --> 00:00:28.060
But we're gonna use Parcel today, and

8
00:00:28.060 --> 00:00:30.180
I'm a big fan of Parcel because
it's zero configuration.

9
00:00:30.180 --> 00:00:33.553
Literally, you just point it at
the entry point to my application, and

10
00:00:33.553 --> 00:00:36.153
Parcel is smart enough to
figure out everything else.

11
00:00:36.153 --> 00:00:39.870
Okay this uses Typescript, this uses CSS,
this one uses a bunch of stuff.

12
00:00:39.870 --> 00:00:43.679
It's pretty low touch, we're not even
going to create a configuration file for

13
00:00:43.679 --> 00:00:46.320
Parcel because it can figure
everything out on its own.

14
00:00:48.080 --> 00:00:52.420
So, what I want you to do now is I
want you to open your terminal again.

15
00:00:52.420 --> 00:00:56.762
I'm gonna say npm install

16
00:00:56.762 --> 00:01:01.700
-D parcel@1.12.3.

17
00:01:03.677 --> 00:01:07.463
We discover there's actually
a problem with 1.12.4, so

18
00:01:07.463 --> 00:01:12.808
be careful that you're on 3, or else this
project actually will break on 1.12.4.

19
00:01:15.045 --> 00:01:19.954
One thing that you'll see, and I'll admit
it's a bit annoying, once this actually

20
00:01:19.954 --> 00:01:25.780
resolves installing, is 1.12.3 does
have some security vulnerabilities.

21
00:01:25.780 --> 00:01:28.640
Not a big deal, not for now,
anyway, I went looked at them.

22
00:01:28.640 --> 00:01:32.731
For running it on your local computer,
you're gonna be just fine.

23
00:01:37.655 --> 00:01:41.364
Okay, that's what I'm talking about here,
found five vulnerabilities, one moderate,

24
00:01:41.364 --> 00:01:43.250
two high, two critical.

25
00:01:43.250 --> 00:01:45.546
Again, if this was my
production application,

26
00:01:45.546 --> 00:01:48.514
you can go up to grade to Parcel 2,
which is still in beta mode,

27
00:01:48.514 --> 00:01:51.500
which is why I didn't
wanna put you on that.

28
00:01:51.500 --> 00:01:58.739
But the author says it's okay, but for
now, we're just gonna stick to 1.12.3.

29
00:02:00.721 --> 00:02:04.737
Another thing of interesting note, Parcel
used to be called parcel dash bundler.

30
00:02:04.737 --> 00:02:08.944
So, you had to do
parcel-bundler like this.

31
00:02:08.944 --> 00:02:13.165
That's no longer the case,
they got the new name of just parcel, so

32
00:02:13.165 --> 00:02:14.507
you can just do that.

33
00:02:14.507 --> 00:02:16.237
I think they both work though,
to be honest.

34
00:02:18.297 --> 00:02:20.803
Okay, now, on your package.json,

35
00:02:23.229 --> 00:02:25.940
We're just gonna create a new
command here in scripts called dev.

36
00:02:26.960 --> 00:02:31.929
And inside of dev, we're gonna put parcel,
and the entry point to our application,

37
00:02:31.929 --> 00:02:37.482
which in our case is going
to be src/index,html.

38
00:02:40.396 --> 00:02:43.950
So, that might surprise some of you,
why am I pointing it at index.html?

39
00:02:43.950 --> 00:02:47.382
Well, what it's actually going to do is
it's going to open your index.html, and

40
00:02:47.382 --> 00:02:49.530
then it's going to read
that you have style.css.

41
00:02:49.530 --> 00:02:53.223
It's gonna run that through
post CSS automatically for you,

42
00:02:53.223 --> 00:02:56.999
which will run it through autoprefixer and
some other things.

43
00:02:56.999 --> 00:03:01.058
And then, it's gonna to find that you have
App.js here, and it's going to run that

44
00:03:01.058 --> 00:03:05.380
through Babel, it's gonna run it through
a bunch of other things like that.

45
00:03:05.380 --> 00:03:09.370
So, it's just really smart to figure
out how to do all that kinda stuff.

46
00:03:09.370 --> 00:03:14.199
While we're here in index.html, we no
longer need the script tags, so go ahead

47
00:03:14.199 --> 00:03:19.170
and delete those cuz we're going to bundle
React directly into our application and

48
00:03:19.170 --> 00:03:21.100
not rely on unpackage anymore.

49
00:03:24.439 --> 00:03:26.260
And then now, we have this.

50
00:03:26.260 --> 00:03:28.779
We've broken our application cuz we
haven't installed React to that,

51
00:03:28.779 --> 00:03:30.068
we'll do that here in just a second.

52
00:03:33.836 --> 00:03:35.191
And yeah, let's keep going.

53
00:03:37.767 --> 00:03:40.880
So, the next thing I want you to do now
is now we can actually have dependencies.

54
00:03:40.880 --> 00:03:45.896
We're gonna say npm install,
not with a capital D,

55
00:03:45.896 --> 00:03:52.394
by the way, because these
are actually production dependencies,

56
00:03:52.394 --> 00:03:58.101
react@17.0.1, and react-dom@17.0.1.

57
00:04:02.214 --> 00:04:03.449
This will install React.

58
00:04:03.449 --> 00:04:08.048
So, now that we can actually require
our React code inside of our app.js.

59
00:04:10.610 --> 00:04:15.428
So now,
I have these React errors here, but

60
00:04:15.428 --> 00:04:21.300
what I can do is I can say
import React from "react".

61
00:04:21.300 --> 00:04:22.590
Notice that all these ones went away.

62
00:04:22.590 --> 00:04:27.085
And then, if I go down here to ReactDOM,

63
00:04:27.085 --> 00:04:34.514
all I have to do from that is
import ReactDOM from "react-dom".

64
00:04:34.514 --> 00:04:38.355
Now, all of my errors are fixed,
right, I can do npm run lint.

65
00:04:39.830 --> 00:04:43.578
Everything's working, and
now I can say nmp run dev.

66
00:04:45.964 --> 00:04:48.553
This is gonna start a local
server here for me.

67
00:04:50.439 --> 00:04:54.387
So now, if I hold command and
click on localhost:1234, or

68
00:04:54.387 --> 00:04:59.356
just open 1234 in my browser, you'll see
that my app is now working again but

69
00:04:59.356 --> 00:05:03.640
it's running off a localhost server,
and all that good stuff.

70
00:05:03.640 --> 00:05:09.364
This does hot module refresh, so
if I head over to my App.js and

71
00:05:09.364 --> 00:05:16.890
I change this to be from "Adopt
Me!" to "Adopt Me?" question mark.

72
00:05:16.890 --> 00:05:21.275
Now, if I go over here, I didn't even
refresh, I guess you wouldn't see that cuz

73
00:05:21.275 --> 00:05:24.418
it's a logo, but
let's put some question marks after Luna.

74
00:05:28.320 --> 00:05:29.913
Notice I didn't even refresh the page, so

75
00:05:29.913 --> 00:05:32.000
you actually get the hot module
refresh on here as well.

76
00:05:36.150 --> 00:05:36.830
There we go.

77
00:05:42.310 --> 00:05:43.793
So, that's Parcel.

78
00:05:43.793 --> 00:05:46.628
Again, there's lots of other cool
stuff you can use, there's Webpack,

79
00:05:46.628 --> 00:05:47.710
there's Browserify.

80
00:05:47.710 --> 00:05:51.197
I'm a big fan of esbuild,
which is a really new one.

81
00:05:51.197 --> 00:05:52.343
Snowpack is interesting.

82
00:05:52.343 --> 00:05:56.100
Vite, or even rollup,
rollup's really great as well.

83
00:05:56.100 --> 00:05:59.255
There's lots of other tools to use here
but Parcel's just really nice to get

84
00:05:59.255 --> 00:06:01.471
started with because we
don't have to configure it,

85
00:06:01.471 --> 00:06:03.330
it just kinda works out of the box.

86
00:06:03.330 --> 00:06:06.557
One thing with React is you generally
put one component in one file,

87
00:06:06.557 --> 00:06:08.320
that's just kind of a rule of thumb.

88
00:06:08.320 --> 00:06:12.880
It doesn't always have to be true but
I would say that's 98% true,

89
00:06:12.880 --> 00:06:14.830
might even be more than that.

90
00:06:14.830 --> 00:06:17.698
So, I'm gonna make a new file here,

91
00:06:17.698 --> 00:06:23.357
here inside of my source directory,
and it's gonna be called Pet.js.

92
00:06:23.357 --> 00:06:25.105
Create Pet.js.

93
00:06:27.065 --> 00:06:32.157
And then, we're gonna move this component
here, so I'm just gonna cut that.

94
00:06:34.144 --> 00:06:37.332
I'm gonna put that in Pet.js here.

95
00:06:37.332 --> 00:06:41.730
And then, at the top,
I'm gonna say import React from 'react'.

96
00:06:43.668 --> 00:06:48.542
And then, down here at the bottom,
we have to say export default Pet.

97
00:06:51.857 --> 00:06:56.781
So now, we have this component
that's self-contained to App.js.

98
00:06:56.781 --> 00:07:01.949
And now, over an App.js,
I can just come in here and

99
00:07:01.949 --> 00:07:04.897
say import Pet from ' /Pet.

100
00:07:06.606 --> 00:07:09.346
If you're not familiar, if you don't
have a dot slash in front of it,

101
00:07:09.346 --> 00:07:12.380
it thinks that it's that's a node
module that I'm gonna get off of npm.

102
00:07:12.380 --> 00:07:14.270
But if there's a dot slash in front of it,

103
00:07:14.270 --> 00:07:17.240
it's like there's a file in
the same directory called Pet.

104
00:07:18.670 --> 00:07:23.139
So, I create the Pet component here,
I export it here at the bottom.

105
00:07:23.139 --> 00:07:25.937
And then, here,
I say import Pet from '/Pet.

106
00:07:25.937 --> 00:07:30.227
So now, this is literally that component
coming in from that other directory.

107
00:07:31.895 --> 00:07:35.539
So now, if I save this and refresh again,
everything still works, but

108
00:07:35.539 --> 00:07:38.060
now it's split up across multiple files.

109
00:07:38.060 --> 00:07:41.020
This is kind of the magic that
having a bundler allows us to have.

