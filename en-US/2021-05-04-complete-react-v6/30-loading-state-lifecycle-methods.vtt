WEBVTT

1
00:00:00.680 --> 00:00:05.334
I showed you component DidMount, which is
something that gets run at the end, or

2
00:00:05.334 --> 00:00:09.650
sorry, at the beginning of every
component being rendered, right?

3
00:00:09.650 --> 00:00:11.460
It renders for the first time.

4
00:00:11.460 --> 00:00:15.520
So you can display a bunch of stuff like
a loading state or something like that.

5
00:00:15.520 --> 00:00:17.819
Then you can go fetch all of your data,
and

6
00:00:17.819 --> 00:00:20.200
then you can show all
the data from the API.

7
00:00:21.690 --> 00:00:24.609
So at the top of this,

8
00:00:24.609 --> 00:00:30.000
let's say if this .state.loading.

9
00:00:30.000 --> 00:00:37.250
So if it's loading, what we wanna
do is we wanna say return Loading.

10
00:00:39.080 --> 00:00:40.321
Here you can imagine like hey,

11
00:00:40.321 --> 00:00:42.580
I'm gonna have like this
really nice loading spinner.

12
00:00:42.580 --> 00:00:44.740
It's gonna have like a cute
little puppy doing something or

13
00:00:44.740 --> 00:00:45.867
something like that, right?

14
00:00:45.867 --> 00:00:47.080
That's what you would do here.

15
00:00:47.080 --> 00:00:48.970
In this case, we're gonna be
really lazy and say loading.

16
00:00:50.990 --> 00:00:52.700
Let's go look at our app really quick.

17
00:00:52.700 --> 00:00:55.860
You can see just for a flash of a second,
you see right there that loading.

18
00:00:57.120 --> 00:00:58.470
That's what that does.

19
00:00:58.470 --> 00:01:01.933
So that you immediately show the user
something, hey, we got your request,

20
00:01:01.933 --> 00:01:04.080
we're loading stuff in
the backend right now.

21
00:01:04.080 --> 00:01:05.930
So they feel like okay,
they're listening to me.

22
00:01:05.930 --> 00:01:07.508
Obviously, it's going really fast.

23
00:01:07.508 --> 00:01:09.261
Because it's on my local computer but

24
00:01:09.261 --> 00:01:12.272
like if you're on a slow connection
on a server across the world,

25
00:01:12.272 --> 00:01:15.910
that could be a couple of seconds that
someone's looking at a loading screen.

26
00:01:17.940 --> 00:01:20.426
Which is why we keep track
of this loading here, so

27
00:01:20.426 --> 00:01:22.850
we can always know are we loaded or
are we not?

28
00:01:22.850 --> 00:01:23.660
Are we waiting for data?

29
00:01:23.660 --> 00:01:28.088
The other thing is I only showed
you a componentDidMount, but

30
00:01:28.088 --> 00:01:32.190
there's actually quite
a few life cycle methods.

31
00:01:32.190 --> 00:01:35.140
So I showed you the constructors as well.

32
00:01:35.140 --> 00:01:37.768
This used to be called componentWillMount,
but

33
00:01:37.768 --> 00:01:40.149
now with classes that's the constructor.

34
00:01:40.149 --> 00:01:41.690
We have componentDidMount.

35
00:01:42.940 --> 00:01:46.271
And there's a lot more there's get
derived state from properties, right?

36
00:01:46.271 --> 00:01:47.821
Which is like I have props coming in,

37
00:01:47.821 --> 00:01:50.290
I need to get some sort of
derive state from that.

38
00:01:50.290 --> 00:01:52.830
This is a method that
allows you to do that.

39
00:01:52.830 --> 00:01:56.108
There's one called should component
update, which is like a performance

40
00:01:56.108 --> 00:01:59.480
optimizer where it's like,
hey, these things changed.

41
00:01:59.480 --> 00:02:01.770
Do you wanna update the react component or
you just wanna stay pat?

42
00:02:01.770 --> 00:02:04.210
And you can make that determination here.

43
00:02:06.280 --> 00:02:09.588
You can do componentDidupdate
where like hey, I got new props,

44
00:02:09.588 --> 00:02:11.620
I need to go request more data, right?

45
00:02:12.690 --> 00:02:17.382
So some of these things are with hooks
just become unnecessary to track, but

46
00:02:17.382 --> 00:02:22.243
with class components need to be a little
bit more hooked into the life cycles.

47
00:02:22.243 --> 00:02:26.280
That was a poor choice of wording
hooked into the life cycles.

48
00:02:26.280 --> 00:02:31.340
You need to be more aware of
the life cycles going on with react.

49
00:02:31.340 --> 00:02:33.740
So I'll leave you to peruse
this documentation here.

50
00:02:33.740 --> 00:02:37.120
There's a lot more of these lifecycle
methods for class components.

51
00:02:38.420 --> 00:02:41.750
But for now, I think this is probably
pretty good we can leave it with this.

52
00:02:41.750 --> 00:02:46.840
Our class components,
the only way to get life cycle components.

53
00:02:46.840 --> 00:02:49.670
The answer that is yes, mostly.

54
00:02:49.670 --> 00:02:53.777
And the reason why I say
mostly is because so

55
00:02:53.777 --> 00:02:58.127
let's hop back into our
search params I think

56
00:03:01.988 --> 00:03:07.484
So we have this use effect right
here on line 14 through 16.

57
00:03:07.484 --> 00:03:09.922
This is componentDidMount, right?

58
00:03:09.922 --> 00:03:13.099
This does exactly the same
thing as componentDidMount,

59
00:03:13.099 --> 00:03:16.150
that it runs this immediately
after its first render.

60
00:03:17.190 --> 00:03:20.164
This function is precisely
the same as componentDidMount.

61
00:03:20.164 --> 00:03:23.411
So they're gonna be called different
things and they do work in,

62
00:03:23.411 --> 00:03:27.260
may be subtly different ways, but
functionally they're exactly the same.

63
00:03:29.310 --> 00:03:31.860
But if you actually specifically
wanna use componentDidMount,

64
00:03:31.860 --> 00:03:33.211
you have to use a class component.

65
00:03:33.211 --> 00:03:39.420
But you can use effects to approximate
/basically get all the life cycle methods.

66
00:03:41.450 --> 00:03:45.141
There's only a few that class
components don't handle,

67
00:03:45.141 --> 00:03:47.930
one of them is with error boundaries.

68
00:03:47.930 --> 00:03:50.618
We're about to get to error boundaries,
so I'll talk about that momentarily.

69
00:03:50.618 --> 00:03:54.836
So there's a very very slight few of
things you can only do with class

70
00:03:54.836 --> 00:03:59.350
components but for the most part,
you can do anything with either type.

