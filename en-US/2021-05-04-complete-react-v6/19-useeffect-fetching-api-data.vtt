WEBVTT

1
00:00:00.000 --> 00:00:05.928
If you go back over to the course notes,
we had another check point, 04-hooks.

2
00:00:08.326 --> 00:00:10.569
And we're gonna go on to useEffect.

3
00:00:13.968 --> 00:00:18.330
The number one hook that you're gonna use,
by far, is useState.

4
00:00:18.330 --> 00:00:21.798
It's just the most useful
hook that we have,

5
00:00:21.798 --> 00:00:27.170
every other hook is kind of derived
from state in some variety.

6
00:00:27.170 --> 00:00:31.720
The other one that we're gonna use quite
a bit, though, is one called useEffect.

7
00:00:31.720 --> 00:00:32.984
So, what useEffect is,

8
00:00:32.984 --> 00:00:36.495
is it basically allows you to have
side effects to your application.

9
00:00:36.495 --> 00:00:42.582
So, for example, in this particular
search-params, I wanna go out to my API,

10
00:00:42.582 --> 00:00:48.238
and I wanna fetch the list of breeds
that are available per animal, right?

11
00:00:48.238 --> 00:00:52.379
So, if I select,
let's go here to the app, dog,

12
00:00:52.379 --> 00:00:57.917
I wanna call the API and find out
what breeds of dogs are available.

13
00:00:57.917 --> 00:01:00.665
And we're gonna do that through
something called an effect.

14
00:01:03.360 --> 00:01:07.526
So, we'll just come up here and
say, in addition to useState,

15
00:01:07.526 --> 00:01:11.166
we wanna call useEffect or
import useEffect, rather.

16
00:01:11.166 --> 00:01:16.467
And we're also gonna import
our trusty Pet component

17
00:01:16.467 --> 00:01:23.703
that we made earlier, Okay?

18
00:01:23.703 --> 00:01:27.852
We're also gonna keep track of here,
a set of pets, so

19
00:01:27.852 --> 00:01:31.201
I'm gonna say const [pets, and setPets]

20
00:01:36.167 --> 00:01:39.134
= useState.

21
00:01:39.134 --> 00:01:42.762
This is gonna be an array of all the pets
that we've gotten back from the API,

22
00:01:42.762 --> 00:01:45.030
cuz we're gonna program, momentarily here,

23
00:01:45.030 --> 00:01:47.314
all of the pets coming back from the API,
okay?

24
00:01:47.314 --> 00:01:52.265
Underneath all these hooks,
we're gonna create an effect, and

25
00:01:52.265 --> 00:01:54.524
we're gonna say useEffect.

26
00:01:56.461 --> 00:01:58.178
This is gonna be an arrow function.

27
00:02:00.315 --> 00:02:02.776
And this is where we're gonna
put all of our async code.

28
00:02:04.560 --> 00:02:09.275
So, inside of here, I could directly
put all of my code to request the pets.

29
00:02:09.275 --> 00:02:12.830
And the way you would do that,
is you just use promises.

30
00:02:12.830 --> 00:02:17.020
But I wanna use an async function, which I
think are much more pleasant to code with.

31
00:02:18.160 --> 00:02:21.493
So, I'm gonna create
a function called requestPets.

32
00:02:21.493 --> 00:02:22.580
And then in here,

33
00:02:22.580 --> 00:02:27.366
I'm just gonna create another function
called async function requestPets.

34
00:02:31.019 --> 00:02:33.605
Notice, I'm creating this
inside of the render.

35
00:02:34.685 --> 00:02:39.126
The reason being is that, now I have
a closure where I access breed and

36
00:02:39.126 --> 00:02:41.050
animal on location, right?

37
00:02:41.050 --> 00:02:46.735
So, I can, actually, reference the
variables here, inside of the component.

38
00:02:51.360 --> 00:02:56.566
So, here, I'm gonna say const res,

39
00:02:56.566 --> 00:03:00.803
as in response, await fetch.

40
00:03:00.803 --> 00:03:05.572
And then, you're gonna have

41
00:03:05.572 --> 00:03:10.337
to type out a bit of a URL with me

42
00:03:10.337 --> 00:03:18.560
http://pets-v2.dev-apis.com/pets.

43
00:03:18.560 --> 00:03:21.310
And this is the API that I've created for
you.

44
00:03:21.310 --> 00:03:25.501
Feel free to hammer it,
it can scale quite a bit, and so.

45
00:03:25.501 --> 00:03:30.058
And then here, we're just gonna give
it the, and notice these are backticks,

46
00:03:30.058 --> 00:03:30.930
as well.

47
00:03:30.930 --> 00:03:34.871
So, not quotes, not single quotes, but
backticks, as in the one that's next to

48
00:03:34.871 --> 00:03:38.380
the 1 on your keyboard, that'll be
important here, in just a second.

49
00:03:39.420 --> 00:03:48.882
So, pets?animal=${animal}.

50
00:03:48.882 --> 00:03:53.950
This is a template string, so, it allows
me to directly input this animal here.

51
00:03:55.130 --> 00:03:59.200
You can do this with plus signs and
string concatenation.

52
00:03:59.200 --> 00:04:00.261
I just like this.

53
00:04:01.918 --> 00:04:11.918
&amp;location=${location}&amp;breed=${breed}.

54
00:04:20.445 --> 00:04:24.646
So, this is gonna go out to our API,
the pets-v2.dev-apis.

55
00:04:26.627 --> 00:04:31.390
Request this, And give it back to us.

56
00:04:31.390 --> 00:04:34.330
And we're gonna give it the animals,
and the location, and breed.

57
00:04:34.330 --> 00:04:36.700
And it's okay if you give it empty
strings, it knows what to do with that.

58
00:04:37.820 --> 00:04:42.648
So, yeah,
now res is gonna be a response object

59
00:04:42.648 --> 00:04:47.615
from fetch,
fetch is just a normal browser API.

60
00:04:47.615 --> 00:04:52.694
If you go look here, fetch,
it's just built into the browser.

61
00:04:59.121 --> 00:05:05.780
Next thing you have to do, is you have to
await, basically, the normalization of it.

62
00:05:05.780 --> 00:05:10.319
So, I'm gonna say const

63
00:05:10.319 --> 00:05:15.090
json = await res.json.

64
00:05:15.090 --> 00:05:18.872
And now, this JSON object, is gonna
be whatever I got back from the API.

65
00:05:24.400 --> 00:05:34.286
So, now I can say, Yeah,
let's keep going here.

66
00:05:38.493 --> 00:05:43.202
I'm just gonna,
just to show console.log(json), so

67
00:05:43.202 --> 00:05:50.640
you can see what it looks like, but under
that we're gonna say, setPets(json.pets).

68
00:05:50.640 --> 00:05:53.472
So, now, every time I call requestPets,
basically, what it's gonna do,

69
00:05:53.472 --> 00:05:55.954
it's gonna take all this data that I have,
and it's gonna go grab,

70
00:05:55.954 --> 00:05:58.150
whatever we were searching for
from the API.

71
00:05:58.150 --> 00:06:00.240
We'll do the breeds stuff
here in just a second.

72
00:06:05.500 --> 00:06:07.629
Now, we actually have a big problem here.

73
00:06:09.353 --> 00:06:11.215
So, actually don't, whatever.

74
00:06:11.215 --> 00:06:16.520
If you notice now, Probably some
of you now are doing it, as well.

75
00:06:16.520 --> 00:06:19.991
It's making hundreds of
requests to the API.

76
00:06:19.991 --> 00:06:21.584
So, it's actually stopped that right now.

77
00:06:23.676 --> 00:06:28.560
And if you come in here to useEffect and
hit, [] and save again.

78
00:06:30.630 --> 00:06:36.449
Now, notice,
we're only getting one back from the API.

79
00:06:36.449 --> 00:06:39.451
Between all those, you probably just
made 100,000 requests to that API.

80
00:06:39.451 --> 00:06:45.558
[LAUGH] I mean, I certainly just made
about 150 myself just by waiting.

81
00:06:45.558 --> 00:06:50.038
But now, notice, by putting just
one set of square brackets there,

82
00:06:50.038 --> 00:06:53.060
we are now just making
one request to that API.

83
00:06:54.200 --> 00:06:58.063
This square brackets is
basically telling this effect,

84
00:06:58.063 --> 00:07:01.200
hey, when should you rerun it?

85
00:07:01.200 --> 00:07:03.641
It'll always run once at the beginning,
right?

86
00:07:05.670 --> 00:07:09.543
And then, you're telling it,
when do you want me to run again?

87
00:07:09.543 --> 00:07:14.712
If you don't give it anything,
it's going to rerun after every render.

88
00:07:14.712 --> 00:07:17.422
Which we kind of created
an infinite loop here,

89
00:07:17.422 --> 00:07:20.284
because every time when we call setPets,
right?

90
00:07:20.284 --> 00:07:23.671
Every time that we update one of
the hooks, or one piece of state,

91
00:07:23.671 --> 00:07:26.390
it's like, cool, time to rerender, right?

92
00:07:27.410 --> 00:07:31.771
So, we kind of hit this really gross
infinite loop where you'll call setPets,

93
00:07:31.771 --> 00:07:36.905
which then updates it, which then says,
time to call useEffect, again, right?

94
00:07:36.905 --> 00:07:40.290
And then, it does that again, and
then it sets the pets again, and

95
00:07:40.290 --> 00:07:43.681
it just perpetually will make
infinite requests to this, right?

96
00:07:43.681 --> 00:07:48.224
So, that's why we have to put these
square brackets here for it to say,

97
00:07:48.224 --> 00:07:50.057
I want you to only do it once.

98
00:07:50.057 --> 00:07:54.517
Now I can say, hey, I want you to
update anytime animal updates, right?

99
00:07:55.837 --> 00:07:59.557
So then, it's gonna check, okay,
I'm only gonna update when animal changes.

100
00:07:59.557 --> 00:08:02.189
In fact,
let's just go see what that looks like.

101
00:08:02.189 --> 00:08:06.490
So, if I do that, and then I choose dog,
notice that it called this again.

102
00:08:06.490 --> 00:08:10.397
Or if I change it again to be rabbit,
notice that it calls again.

103
00:08:10.397 --> 00:08:14.393
So, you're defining when you want
that the effect to run again.

104
00:08:16.220 --> 00:08:20.554
Now, in reality, I actually don't want
it to ever rerender unless I tell it to.

105
00:08:20.554 --> 00:08:25.212
So, I want it to do it once, and then I
want it to just never rerender ever again,

106
00:08:25.212 --> 00:08:28.063
or, sorry, never call it,
unless I tell it to,

107
00:08:28.063 --> 00:08:31.200
cuz I want it to call when I call Submit,
right?

108
00:08:31.200 --> 00:08:34.870
I only want the user to get new search
results whenever they press submit.

109
00:08:36.720 --> 00:08:41.050
So, let's just leave that empty,
that's what that empty array means.

110
00:08:41.050 --> 00:08:43.680
It means,
I don't want you to track anything.

111
00:08:43.680 --> 00:08:46.862
I only want you to render or
call this effect once, and

112
00:08:46.862 --> 00:08:49.991
then I will call requestPets,
directly, myself.

113
00:08:51.643 --> 00:08:52.503
Does that make sense?

114
00:08:54.817 --> 00:08:57.847
All right, get rid of that console.log.

115
00:09:00.143 --> 00:09:07.557
And now what we're gonna do,
Under the form,

116
00:09:07.557 --> 00:09:14.178
inside the div, We're gonna say,

117
00:09:14.178 --> 00:09:23.560
{pets.map(pet I'm gonna use
that same parentheses trick.

118
00:09:23.560 --> 00:09:30.699
And it's gonna be a &lt;Pet
with name={pet.name},

119
00:09:30.699 --> 00:09:35.357
with a animal={pet.animal},

120
00:09:35.357 --> 00:09:39.858
and breed={pet.breed}, and

121
00:09:39.858 --> 00:09:43.940
then we need a key, right?

122
00:09:43.940 --> 00:09:45.900
We talked about that,
cuz we're doing a map here.

123
00:09:47.080 --> 00:09:50.356
So, we can just say key=.

124
00:09:50.356 --> 00:09:53.689
The one thing that we do know is
going to be unique to each pet

125
00:09:53.689 --> 00:09:55.060
is that each have an ID.

126
00:09:55.060 --> 00:10:02.395
So, we and say pet.id,
that's guaranteed unique per pet.

127
00:10:02.395 --> 00:10:05.193
Close it like that, and
we'll end up with something like that.

128
00:10:07.765 --> 00:10:12.251
So, now, after we request things from the
API, we'll get back a pet component for

129
00:10:12.251 --> 00:10:14.318
each pet that we got back from the API.

130
00:10:17.135 --> 00:10:22.871
So, you can see here, Notice,
it's searching for, implicitly,

131
00:10:22.871 --> 00:10:26.112
animals from Seattle, because that's
what we defined as the default state.

132
00:10:26.112 --> 00:10:29.543
So, we have Luna, who's my pup.

133
00:10:29.543 --> 00:10:32.499
Talbert, who's a cat, and
Julietta who is also a dog.

134
00:10:35.684 --> 00:10:38.550
But now, what happens if we wanted to
see animals from other places, right?

135
00:10:38.550 --> 00:10:40.182
So, I can just leave this empty.

136
00:10:42.059 --> 00:10:45.635
And this will give back all
pets from all locations.

137
00:10:48.179 --> 00:10:49.640
Pretty cool, right?

138
00:10:49.640 --> 00:10:52.410
Let's address one question, or
one problem that you might be seeing.

139
00:10:52.410 --> 00:10:55.519
If you're seeing an error
about regenerator runtime,

140
00:10:55.519 --> 00:10:59.180
which just bites me every single
time I teach about React.

141
00:10:59.180 --> 00:11:06.020
And, especially, when I teach,
in particular, about using async await.

142
00:11:07.710 --> 00:11:10.940
It's from your browserslist
not being correct.

143
00:11:10.940 --> 00:11:15.712
So, if you go back to your package.json,
this browserslist needs to be something

144
00:11:15.712 --> 00:11:18.880
that doesn't require
the regenerator runtime.

145
00:11:18.880 --> 00:11:24.140
So, if you have something like last 2
Chrome versions here, that should work.

146
00:11:24.140 --> 00:11:27.730
Make sure you're checking that's browsers,
plural, list, or else it won't be right.

147
00:11:27.730 --> 00:11:31.470
If you do browserlist,
like I constantly do, it will not work.

148
00:11:31.470 --> 00:11:32.674
So, browserslist.

149
00:11:35.889 --> 00:11:43.050
If you do that, then you need to come into
here, or you can do it from here, as well.

150
00:11:43.050 --> 00:11:47.230
Just delete your cache, delete your dist,
and then restart your server.

151
00:11:47.230 --> 00:11:52.480
So, I'd come in here and say delete
folder, and same thing here for dist.

152
00:11:52.480 --> 00:11:56.483
And then, I would stop my server and
restart my server, and

153
00:11:56.483 --> 00:11:58.413
that would probably fix it.

154
00:11:58.413 --> 00:12:00.238
If your stuff's working,
then don't worry about it, right?

155
00:12:00.238 --> 00:12:01.609
That's only if stuff is broken.

156
00:12:06.516 --> 00:12:08.444
Okay, we do have an eslint error, as well.

157
00:12:08.444 --> 00:12:09.991
Let's go fix that really quick.

158
00:12:13.285 --> 00:12:17.803
So, here, it's saying, hey,
React Hook has a missing dependency.

159
00:12:17.803 --> 00:12:23.362
So, one thing that this does help you
with your React Hook's rules is saying,

160
00:12:23.362 --> 00:12:29.007
hey, if you're referencing animal in here,
and you're not putting animal,

161
00:12:29.007 --> 00:12:32.730
so let's say that I have
console.log(animal).

162
00:12:32.730 --> 00:12:37.087
It's gonna say, hey, you're referencing
animal inside of my effect, but

163
00:12:37.087 --> 00:12:41.120
it's not in my dependencies,
that's probably a bug.

164
00:12:41.120 --> 00:12:45.719
So, if I put animal in here,
then it's satisfied, okay?

165
00:12:45.719 --> 00:12:46.650
Now what?

166
00:12:46.650 --> 00:12:47.800
Now, this is definitely gonna work.

167
00:12:47.800 --> 00:12:52.643
In fact, if we go over here again,
as you may expect,

168
00:12:52.643 --> 00:12:56.947
empty string, but
change it again, to be dog,

169
00:12:56.947 --> 00:13:00.520
rabbit, reptile, so on and so forth.

170
00:13:01.810 --> 00:13:04.941
It's just gonna help you keep
those dependencies correct.

171
00:13:04.941 --> 00:13:07.709
In this particular case,
because I never wanted to rerender,

172
00:13:07.709 --> 00:13:09.390
I don't wanna put anything in there.

173
00:13:09.390 --> 00:13:11.551
So, I just have to ignore that warning.

174
00:13:15.270 --> 00:13:18.600
So, the way you can do that,
is you can say,

175
00:13:18.600 --> 00:13:24.114
eslint, -disable-line.

176
00:13:24.114 --> 00:13:26.680
This will just flat out disable
everything about this line,

177
00:13:26.680 --> 00:13:28.100
which is usually not a good idea.

178
00:13:28.100 --> 00:13:30.820
It's usually good to say
which thing you're ignoring.

179
00:13:30.820 --> 00:13:37.230
So I'm gonna say
react-hooks/exhaustive-deps.

180
00:13:38.920 --> 00:13:41.030
That's the name of the rule,
in particular, that we're ignoring.

181
00:13:41.030 --> 00:13:44.380
I don't wanna ignore all the time, but for
this particular line, I wanna ignore it.

182
00:13:44.380 --> 00:13:47.494
And if you wanna figure out
what the name of that rule is,

183
00:13:47.494 --> 00:13:49.930
it's just this rule right here, right?

184
00:13:49.930 --> 00:13:54.774
So, if you put this rule there,
it'll ignore it.

185
00:13:59.849 --> 00:14:03.498
Okay, so that should be working.

186
00:14:03.498 --> 00:14:06.998
You should be getting your
pets back from the API.

187
00:14:06.998 --> 00:14:08.678
Again, depending on what
city you have there,

188
00:14:08.678 --> 00:14:10.740
you'll be getting different dogs back.

189
00:14:10.740 --> 00:14:12.686
Again, I coded this API by hand.

190
00:14:12.686 --> 00:14:16.240
There's only about 65 animals in there.

191
00:14:16.240 --> 00:14:18.850
So, if there's not an animal
from your city, I'm sorry.

192
00:14:21.280 --> 00:14:25.785
I tried to put a decent mix of
most states in there, but, yeah,

193
00:14:25.785 --> 00:14:28.720
that's what you got for now.

194
00:14:28.720 --> 00:14:30.020
The API is open source.

195
00:14:30.020 --> 00:14:34.790
It's on my GitHub, so,
if you wanna go add more animals to it,

196
00:14:34.790 --> 00:14:38.480
feel free to,
I will merge those pull requests.

197
00:14:38.480 --> 00:14:40.481
&gt;&gt; I have a quick question on use hooks.

198
00:14:40.481 --> 00:14:42.630
I don't know if you're going
to cover this later on.

199
00:14:42.630 --> 00:14:46.064
But I know, sometimes, with use hooks,
you can get memory leaks,

200
00:14:46.064 --> 00:14:48.185
if you don't properly garbage collect.

201
00:14:48.185 --> 00:14:49.520
So, when would you do that?

202
00:14:49.520 --> 00:14:54.182
So, in this case would you add a garbage
collecting thing for this, so it removes

203
00:14:54.182 --> 00:14:58.722
it, or since this is just calling it once,
do we add something like that to it?

204
00:14:58.722 --> 00:15:01.890
&gt;&gt; We're not, so,
let's just do a really quick example.

205
00:15:01.890 --> 00:15:04.362
Sometimes, you need to clean up
after yourself with effects.

206
00:15:06.103 --> 00:15:08.270
Actually, we can leave this,
I'll have to comment on this.

207
00:15:08.270 --> 00:15:10.372
But let's say I had another useEffect,
and by the way,

208
00:15:10.372 --> 00:15:12.625
you can have multiple useEffects,
that's totally fine.

209
00:15:15.716 --> 00:15:19.987
Let's say I had one that set a timeout,
and

210
00:15:19.987 --> 00:15:25.574
that called an alert,
everyone loves alerts, right?

211
00:15:25.574 --> 00:15:30.170
That's high quality user
experiences that we're crafting

212
00:15:30.170 --> 00:15:34.503
here at the moment,
after 3,000 seconds, right?

213
00:15:34.503 --> 00:15:38.971
And this gets called every
time animal changes.

214
00:15:41.690 --> 00:15:48.903
So, I think, if I come back here now,
and I change animal, Right?

215
00:15:48.903 --> 00:15:53.420
It'll change it, but if I don't do
anything, it's fine, that's okay.

216
00:15:53.420 --> 00:15:57.669
The issue now is, if I unmount animal
right now, if I removed this from the DOM,

217
00:15:57.669 --> 00:15:59.510
it would still happen, right?

218
00:15:59.510 --> 00:16:03.009
Because I haven't cleaned up after myself,
and this is what you're referring to.

219
00:16:03.009 --> 00:16:06.920
This could create memory leaks,
if I have lots of this stuff happening.

220
00:16:06.920 --> 00:16:11.610
So, what you can actually do now,
is you can actually const timer,

221
00:16:11.610 --> 00:16:16.600
this actually returns a number
that corresponds to the timer.

222
00:16:16.600 --> 00:16:18.073
You can return a function here.

223
00:16:18.073 --> 00:16:22.863
This returned function
is the cleanup function.

224
00:16:22.863 --> 00:16:26.510
And I can say clearTimeout(timer).

225
00:16:26.510 --> 00:16:29.537
And now, I'm guaranteed to clean
up after myself, no matter what.

226
00:16:33.015 --> 00:16:35.097
Kind of advanced stuff,
normally you don't have to do this.

227
00:16:35.097 --> 00:16:38.124
This is only really useful with timers,
and subscriptions, and

228
00:16:38.124 --> 00:16:39.590
those kind of things.

229
00:16:39.590 --> 00:16:41.452
But that's what this return
function does here, is,

230
00:16:41.452 --> 00:16:44.360
it allows you to clean up after
yourself after you're done.

231
00:16:44.360 --> 00:16:47.658
This return function
is a cleanup function,

232
00:16:47.658 --> 00:16:51.490
it only gets called when
your component is removed.

233
00:16:51.490 --> 00:16:55.326
So, if I went from search-params to
a different page, it would remove all that

234
00:16:55.326 --> 00:16:59.520
stuff from the DOM, and so it would
call all those cleanup functions, okay?

235
00:16:59.520 --> 00:17:00.940
So, let's delete all this stuff.

236
00:17:00.940 --> 00:17:02.552
There is a checkpoint now.

237
00:17:02.552 --> 00:17:05.329
So, if you go to 05 useEffect,

238
00:17:05.329 --> 00:17:11.303
that's the state of the repo at
the moment, and we should be good to go.

