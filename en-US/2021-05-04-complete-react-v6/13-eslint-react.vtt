WEBVTT

1
00:00:00.000 --> 00:00:03.616
So, now we need to go and fix ESLint.

2
00:00:09.117 --> 00:00:13.086
Because again it's saying here,
hey, pet is defined but

3
00:00:13.086 --> 00:00:17.390
you never using it, but we are,
right, we're using it here.

4
00:00:17.390 --> 00:00:21.073
It's just that ESLint
doesn't get that yet, yet

5
00:00:21.073 --> 00:00:25.378
they augment its capabilities
to understand react code.

6
00:00:25.378 --> 00:00:30.070
So can you come in here and

7
00:00:30.070 --> 00:00:33.869
do an npm install-D

8
00:00:33.869 --> 00:00:41.917
eslint-plugin-import@2.22.1

9
00:00:41.917 --> 00:00:48.854
eslint-plugin-jsx-a11y@.

10
00:00:51.680 --> 00:00:55.164
6.4.1 and

11
00:00:55.164 --> 00:01:05.081
eslint-plugin-react@7.22.0.

12
00:01:07.399 --> 00:01:13.391
And again, you can just grab that off
the course notes and copy and paste that.

13
00:01:13.391 --> 00:01:18.749
So we're getting three plugins here,
import jsx accessibility.

14
00:01:18.749 --> 00:01:21.754
That's what a11y stands for
is accessibility.

15
00:01:21.754 --> 00:01:25.833
There's a, there's 11 characters and y,

16
00:01:25.833 --> 00:01:30.570
accessibility and
that's where that comes from.

17
00:01:30.570 --> 00:01:34.910
Which is gonna help us enforce
all images must have alt, right?

18
00:01:34.910 --> 00:01:36.890
You shouldn't make divs
clickable elements, right?

19
00:01:36.890 --> 00:01:41.313
It does a bunch of those just kind of
automatic accessibility checks for you.

20
00:01:41.313 --> 00:01:42.639
And then plugin-react,

21
00:01:42.639 --> 00:01:46.502
this is actually the tool that's going
to allow it to understand our react.

22
00:01:46.502 --> 00:01:48.010
So go ahead and run that.

23
00:01:49.020 --> 00:01:50.840
Things aren't gonna work right now,
so just give me a sec.

24
00:01:52.200 --> 00:01:54.170
We're still in the kind of
a transitional state here.

25
00:01:54.170 --> 00:01:56.092
We're going to have,
to add a couple more things here.

26
00:01:58.619 --> 00:02:01.489
We're gonna do plugin.

27
00:02:04.264 --> 00:02:08.127
Import/errors,

28
00:02:11.559 --> 00:02:14.989
Plugin:react/ recommended,

29
00:02:17.747 --> 00:02:24.773
Plugin :jsx -a11y/recommended,

30
00:02:24.773 --> 00:02:28.289
and then prettier.

31
00:02:34.191 --> 00:02:37.850
Okay, a couple more things here.

32
00:02:37.850 --> 00:02:43.111
If there's individual rules that you wanna
turn off in eslint, you can say rules.

33
00:02:43.111 --> 00:02:45.245
And we're gonna turn off
a couple of them here.

34
00:02:45.245 --> 00:02:48.950
One of them that I just don't
deal with is react/ prop.types.

35
00:02:50.590 --> 00:02:51.869
We're not gonna do anything
with prop.types today.

36
00:02:51.869 --> 00:02:55.156
We're eventually gonna get into
typescript, in the advanced or

37
00:02:55.156 --> 00:02:56.770
the intermediate section.

38
00:02:56.770 --> 00:02:57.870
So we're just gonna turn that off.

39
00:02:59.360 --> 00:03:05.060
And we're gonna do
react/react-in-jsx-scope.

40
00:03:05.060 --> 00:03:09.100
Because we have the new version of babel,
we don't need this to be on either.

41
00:03:09.100 --> 00:03:11.970
And the 0 just means turned off.

42
00:03:13.000 --> 00:03:16.460
I think you can also put false here,
and that would be okay.

43
00:03:16.460 --> 00:03:21.972
Or, there's another one here, I think
it's like none are off, might be off.

44
00:03:21.972 --> 00:03:28.534
But anyway 0, 0 works I just remember
that, 0 is on, 1 is warn and 2 is error.

45
00:03:34.515 --> 00:03:37.232
So we want those two.

46
00:03:37.232 --> 00:03:39.076
Then we have to give it two plugins.

47
00:03:39.076 --> 00:03:44.519
So another top level thing
here will be plugins,

48
00:03:44.519 --> 00:03:50.492
which will be an array and
we're gonna give it react,

49
00:03:50.492 --> 00:03:53.430
import and jsx-a11y.

50
00:04:00.918 --> 00:04:05.581
Okay, this is going to improve
the abilities of ESLint to

51
00:04:05.581 --> 00:04:08.212
understand react first of all.

52
00:04:08.212 --> 00:04:12.020
Import is another really good one that
it'll check your imports to make sure that

53
00:04:12.020 --> 00:04:15.200
they exist, that they're exporting things.

54
00:04:15.200 --> 00:04:17.610
Just everything around a module system,
very, very useful.

55
00:04:19.010 --> 00:04:22.925
And then again, this is the one that's
going to check to make sure that you

56
00:04:22.925 --> 00:04:26.856
have alt tags and, things that are just
fundamentals of accessibility.

57
00:04:30.124 --> 00:04:32.099
And then down here at the very bottom,

58
00:04:32.099 --> 00:04:34.460
we're going to need one
more code settings.

59
00:04:34.460 --> 00:04:39.580
You have to tell it what version
of React that you're using.

60
00:04:39.580 --> 00:04:42.861
Because it makes the difference between,

61
00:04:42.861 --> 00:04:47.425
version prior to 16 is very
different than version 16.

62
00:04:47.425 --> 00:04:51.151
So a nice thing you can say is,
"version":"detect", just say like,

63
00:04:51.151 --> 00:04:55.367
look at my package.JSON and figure it out
yourself, is basically what that means.

64
00:04:59.937 --> 00:05:04.728
Okay, so that should be it for
react and eslint together.

65
00:05:04.728 --> 00:05:11.546
If you go look at your, Pet.json and all
that kind of stuff or sorry, your app.js.

66
00:05:11.546 --> 00:05:15.750
Now pet will no longer be
erroring out at you, right?

67
00:05:17.260 --> 00:05:19.090
Because now it understands what pet is.

68
00:05:21.710 --> 00:05:26.630
Our last thing to fix here,
is we have this React.createElement(App).

69
00:05:26.630 --> 00:05:29.550
We're not using that anymore,
that's the old way of writing it.

70
00:05:29.550 --> 00:05:32.427
So we're gonna just put, app like that.

71
00:05:32.427 --> 00:05:37.040
On line 15 here,
we're going to render out app.

72
00:05:42.991 --> 00:05:45.174
So that bears talking about as well,
right?

73
00:05:45.174 --> 00:05:49.900
I'm sure many of you have seen like input,
like that before, right?

74
00:05:49.900 --> 00:05:54.531
It's a self closing tag or
a void tag as they're called in the spec,

75
00:05:54.531 --> 00:05:58.030
is a tag that both opens and
closes itself.

76
00:05:58.030 --> 00:06:02.510
So you can do that with things like pet,
right, or app is absolute better example.

77
00:06:02.510 --> 00:06:05.086
It's a tag that opens and closes itself,

78
00:06:05.086 --> 00:06:09.460
because you can have an app like this and
you can put stuff in here.

79
00:06:09.460 --> 00:06:11.500
They would pass it into app as a child.

80
00:06:12.520 --> 00:06:15.095
But, I think even if I save this,
it might even.

81
00:06:18.845 --> 00:06:20.516
No, doesn't matter, anyway.

82
00:06:22.946 --> 00:06:24.780
That's how you do a self closing tag.

83
00:06:24.780 --> 00:06:26.866
Now the thing I'm going
to tell you right now,

84
00:06:26.866 --> 00:06:29.205
is if I wanted to put like
an input in here like this.

85
00:06:29.205 --> 00:06:36.980
It's actually technically valid to do
input tag without a closing tag, right.

86
00:06:36.980 --> 00:06:38.940
So a lot of people write
their inputs like this.

87
00:06:38.940 --> 00:06:41.220
In React,
you actually must do a self closing tag.

88
00:06:42.280 --> 00:06:45.930
If you don't put that slash there, it's
going to expect a closing tag somewhere.

89
00:06:47.020 --> 00:06:50.794
So just know that void tags or
self closing tags need the trailing slash.

90
00:06:56.521 --> 00:07:00.258
Okay, now that we've put App there,
saved it.

91
00:07:03.643 --> 00:07:07.150
We should be able to still go
back over and say npm run dev.

92
00:07:15.151 --> 00:07:20.147
And, if we go back to our Adopt Me page,
everything is still working,

93
00:07:20.147 --> 00:07:23.549
but now it's working
through the magic of JSX.

94
00:07:26.463 --> 00:07:28.948
It's exciting, I'm excited.

