WEBVTT

1
00:00:00.000 --> 00:00:04.358
&gt;&gt; Steve Kinney: So debugging or
so we got task JSON and

2
00:00:04.358 --> 00:00:09.285
we have this other idea of launch.json.

3
00:00:09.285 --> 00:00:13.543
Launch.json will start up your app and

4
00:00:13.543 --> 00:00:18.324
hook it up to some kind of debugger,
right?

5
00:00:18.324 --> 00:00:24.529
What kind of debugger, it depends on
what kinda debugging you want to do.

6
00:00:24.529 --> 00:00:29.315
You can debug Node apps,
you can debug Python apps.

7
00:00:29.315 --> 00:00:33.770
You can get extensions like we at temporal
have one that will actually let you

8
00:00:33.770 --> 00:00:38.310
stop and debug an actual temporal
workflow in our TypeScript, SDK, right?

9
00:00:38.310 --> 00:00:43.426
So, there are custom debuggers that can
be written as well, but the built in ones

10
00:00:43.426 --> 00:00:48.559
are node, Chrome, Edge, I'm sure I wrote
a list somewhere, a few other ones.

11
00:00:48.559 --> 00:00:55.523
This, again, comes down to, I'm gonna just
think about the questions in advance,

12
00:00:55.523 --> 00:01:01.535
which is for there are obviously other
tools that do this as well, right?

13
00:01:01.535 --> 00:01:06.890
Node inspector has been around forever,
bunn has its own inspector.

14
00:01:06.890 --> 00:01:10.562
And can you hook in to
a running web app and

15
00:01:10.562 --> 00:01:14.451
use the Versus tool Versus Code debugger?

16
00:01:14.451 --> 00:01:18.283
Yes, you know where else
you have a debugger?

17
00:01:18.283 --> 00:01:20.052
Inside of Chrome, right?

18
00:01:20.052 --> 00:01:22.694
And so which one should you use?

19
00:01:22.694 --> 00:01:26.283
Well, I will show you the one
relevant to this course.

20
00:01:26.283 --> 00:01:29.117
If you like this one,
you should use this one.

21
00:01:29.117 --> 00:01:34.142
If you like the one that you use in
Chrome, you should use that one.

22
00:01:34.142 --> 00:01:38.330
I think that there is certain niceties
to have it be in your editor.

23
00:01:38.330 --> 00:01:42.656
But let's be honest with
ourselves the chrome dev

24
00:01:42.656 --> 00:01:47.296
tools are great [LAUGH] right,
they're really good.

25
00:01:47.296 --> 00:01:48.753
So that's the thing as well.

26
00:01:48.753 --> 00:01:54.928
I don't need to run the formatter
whenever this folder opens though.

27
00:01:54.928 --> 00:01:57.127
Cool, so you can hit run debug.

28
00:01:57.127 --> 00:02:01.253
You can also hit this
create launch.json file.

29
00:02:01.253 --> 00:02:04.169
Which is what we're gonna do in this case.

30
00:02:04.169 --> 00:02:07.264
You get a few options,
what kind of debugger would you wanna do?

31
00:02:07.264 --> 00:02:11.198
I'm not running a bun project today.

32
00:02:11.198 --> 00:02:15.356
We got Node, we got a web app,
which we could technically do.

33
00:02:15.356 --> 00:02:20.173
So, all right, I'm gonna do it.

34
00:02:20.173 --> 00:02:27.268
Not wanna do,
that I regret all my choices.

35
00:02:27.268 --> 00:02:28.750
Create a launch.

36
00:02:28.750 --> 00:02:30.541
Let's do the node one.

37
00:02:39.809 --> 00:02:44.365
&gt;&gt; Steve Kinney: Think I wanna launch
&gt;&gt; Steve Kinney: Don't

38
00:02:44.365 --> 00:02:47.220
wanna look at my own notes.

39
00:02:47.220 --> 00:02:51.669
Source, and I think it's server.js.

40
00:02:58.964 --> 00:03:00.974
&gt;&gt; Steve Kinney: I don't think I meant
to make two of these, let's see.

41
00:03:05.812 --> 00:03:09.230
&gt;&gt; Steve Kinney: Cool,
I hope I did mess up with them.

42
00:03:09.230 --> 00:03:15.350
We gonna launch program which
is gonna launch server.js.

43
00:03:15.350 --> 00:03:20.034
I don't wanna walk in any node
internal please and the type is node.

44
00:03:20.034 --> 00:03:24.860
We got also add more configurations
if you also wanted to attach to

45
00:03:24.860 --> 00:03:26.888
an electron main process.

46
00:03:26.888 --> 00:03:29.561
Again, a lot of these are super good for

47
00:03:29.561 --> 00:03:34.033
electron actually coz there's just
a lot of things to hook into.

48
00:03:34.033 --> 00:03:40.453
You can attach to a currently running
process as well, so on and so forth.

49
00:03:40.453 --> 00:03:46.877
But now if you hit F5,
you will see a large amount of sadness.

50
00:03:46.877 --> 00:03:50.607
Already in use, 3,000 that makes sense.

51
00:03:54.659 --> 00:03:59.399
&gt;&gt; Steve Kinney: So now you can see
I've got the server running over here.

52
00:03:59.399 --> 00:04:02.059
Right, nothing yet to see in here.

53
00:04:02.059 --> 00:04:07.544
But the logos is running at 3,000.

54
00:04:07.544 --> 00:04:08.776
Really wish I had a task.

55
00:04:08.776 --> 00:04:11.033
Do I have a task for
starting at the front end?

56
00:04:11.033 --> 00:04:11.785
Did I do that?

57
00:04:11.785 --> 00:04:15.450
Was I smart enough or
did I spend too much time talking.

58
00:04:15.450 --> 00:04:19.048
I'm pointing at things.

59
00:04:19.048 --> 00:04:20.393
No, I made one.

60
00:04:24.949 --> 00:04:31.608
&gt;&gt; Steve Kinney: This is script dev.

61
00:04:37.850 --> 00:04:40.337
&gt;&gt; Steve Kinney: Cool, so
now let's also run the front end.

62
00:04:44.010 --> 00:04:49.270
&gt;&gt; Steve Kinney: And let's say,
&gt;&gt; Steve Kinney: Start beat.

63
00:04:54.124 --> 00:04:56.618
&gt;&gt; Steve Kinney: Now we'll
also start up my client so

64
00:04:56.618 --> 00:04:59.372
we can go over to the client real quick.

65
00:04:59.372 --> 00:05:00.823
We've got a task manager.

66
00:05:00.823 --> 00:05:04.532
Yeah, you thought you were gonna get
out of workshop without a to-do list?

67
00:05:04.532 --> 00:05:07.436
Absolutely not.

68
00:05:07.436 --> 00:05:10.314
No, this is Front End Masters.

69
00:05:10.314 --> 00:05:14.068
We put to-do lists.

70
00:05:14.068 --> 00:05:19.954
So now I've got just the front-end running
just so I can not write curl requests.

71
00:05:19.954 --> 00:05:26.053
And I've got the server running on 3,000,

72
00:05:26.053 --> 00:05:33.045
so let's just verify that
task by croutons from store,

73
00:05:33.045 --> 00:05:36.926
great, went into a database.

74
00:05:36.926 --> 00:05:39.132
Life is good.

75
00:05:39.132 --> 00:05:43.772
So now what I can do is,
if I go into server.js,

76
00:05:43.772 --> 00:05:48.648
I've got this wonderful,
amazing express app.

77
00:05:48.648 --> 00:05:51.518
And so we can do lots of things.

78
00:05:51.518 --> 00:05:57.552
We could say, I can get a test
by ID that's not in the app.

79
00:05:57.552 --> 00:05:59.994
We can post, I like this.

80
00:05:59.994 --> 00:06:03.402
We can go anywhere we want and

81
00:06:03.402 --> 00:06:08.237
we can add a little break point, right?

82
00:06:08.237 --> 00:06:13.302
And now what we can do is go ahead and

83
00:06:13.302 --> 00:06:16.111
use our app again.

84
00:06:16.111 --> 00:06:19.461
Read a book.

85
00:06:19.461 --> 00:06:21.500
Books are good.

86
00:06:21.500 --> 00:06:28.534
And I didn't even Cmd+Tab, right?

87
00:06:28.534 --> 00:06:34.705
I got sent back into VS Code,
and we can see you type in title,

88
00:06:34.705 --> 00:06:38.592
and there is the title that passed in.

89
00:06:38.592 --> 00:06:43.216
I can see the full call stack
of Express's router and

90
00:06:43.216 --> 00:06:47.958
the middleware for next,
so on and so forth, right?

91
00:06:47.958 --> 00:06:50.918
I have that break point in there and
so it stopped me there.

92
00:06:50.918 --> 00:06:55.730
I have access to all of the variables
if I was so inclined, right?

93
00:06:55.730 --> 00:07:04.066
So I could actually say title
equals play video games, right?

94
00:07:04.066 --> 00:07:08.784
And now I've changed that variable,
and I've got these controls up here,

95
00:07:08.784 --> 00:07:12.691
which again, are continue,
which is go past the break point,

96
00:07:12.691 --> 00:07:16.617
like step over it into a given function,
out so on and so forth.

97
00:07:16.617 --> 00:07:20.643
Let me be honest to you, a lot of times
I just wanna change something, hit play.

98
00:07:20.643 --> 00:07:21.498
I wanna see that value is.

99
00:07:21.498 --> 00:07:25.515
It's like, where did undefined come from?

100
00:07:25.515 --> 00:07:27.397
Sometimes I will step
up through the stack.

101
00:07:27.397 --> 00:07:30.596
If I'm like, I'm getting tired of
putting console logs everywhere.

102
00:07:30.596 --> 00:07:33.640
Cuz, let's be honest,
we all know how we really debug.

103
00:07:33.640 --> 00:07:38.624
So now I can go ahead and hit play and
then obviously we changed the value

104
00:07:38.624 --> 00:07:42.612
before it went into the database and
here it is, right?

105
00:07:42.612 --> 00:07:46.642
And so if I wanted to see like,
okay, what are all the things on,

106
00:07:46.642 --> 00:07:49.788
the request object at this point or
the response.

107
00:07:49.788 --> 00:07:53.528
I have access to everything
that is currently in memory.

108
00:07:53.528 --> 00:07:57.107
At that moment in time,
I've frozen the world, right?

109
00:07:57.107 --> 00:08:02.387
I can evaluate almost anything that
I would ever possibly want to do.

110
00:08:02.387 --> 00:08:07.154
And then I can carry
on along my merry way.

111
00:08:07.154 --> 00:08:10.263
So let's try it again.

112
00:08:10.263 --> 00:08:15.655
And we can say,
I'm running out of things, read a book.

113
00:08:19.682 --> 00:08:23.644
&gt;&gt; Steve Kinney: All right, and now for
instance if we wanted to go up a level,

114
00:08:23.644 --> 00:08:28.541
you can see that we are somewhere in
the express land of a layer with some kind

115
00:08:28.541 --> 00:08:30.753
of handle requests middleware.

116
00:08:30.753 --> 00:08:35.024
And I can kind of step through, right?

117
00:08:35.024 --> 00:08:37.425
Little more helpful if I had
more than one function or

118
00:08:37.425 --> 00:08:39.182
I put the break point somewhere else.

119
00:08:39.182 --> 00:08:45.126
But the fact of the matter is, this thing
was already undefined by that point.

120
00:08:45.126 --> 00:08:47.560
Go up a function, go up.

121
00:08:47.560 --> 00:08:51.512
And instead of like, cuz even here,
I'm not putting console logs in here.

122
00:08:51.512 --> 00:08:52.703
I can put console logs in my code.

123
00:08:52.703 --> 00:08:56.861
I'm not going to node modules and
hand editing some compiled code.

124
00:08:56.861 --> 00:08:57.836
That ain't happening.

125
00:08:57.836 --> 00:08:59.563
But at any given point, right?

126
00:08:59.563 --> 00:09:04.471
I can look at, I'm assuming,
&gt;&gt; Steve Kinney: I

127
00:09:04.471 --> 00:09:08.654
can see that the request object in this
point and work with it as well, right?

128
00:09:08.654 --> 00:09:11.729
And again, then I can move forward

129
00:09:19.013 --> 00:09:24.199
&gt;&gt; Steve Kinney: Through my application
as well, and see everything along and

130
00:09:24.199 --> 00:09:28.998
so you can go ahead and
try out various different things.

131
00:09:28.998 --> 00:09:32.765
The joke is, it's sometimes very hard to
come up with a fake problem to debug.

132
00:09:32.765 --> 00:09:35.575
But the idea that you can navigate around,
and

133
00:09:35.575 --> 00:09:38.685
it's no different than the chrome tools,
right?

134
00:09:38.685 --> 00:09:43.746
You can also one of
the other tasks that you

135
00:09:43.746 --> 00:09:51.712
can do in here is you can choose to
hook it up to a chrome web app too.

136
00:09:51.712 --> 00:09:55.369
But also keep in mind that now it's
nice coz you can see it in your

137
00:09:55.369 --> 00:09:59.071
own code,
&gt;&gt; Steve Kinney: But

138
00:09:59.071 --> 00:10:02.554
it's also Chrome DevTools are good too.

139
00:10:02.554 --> 00:10:05.054
But yeah,
you can basically set this up and

140
00:10:05.054 --> 00:10:09.573
when we look at extensions in a little
bit this is super useful because you're

141
00:10:09.573 --> 00:10:12.860
spinning up almost a second
version of VS code, right?

142
00:10:12.860 --> 00:10:16.719
And you can you're using a lot
of this tooling to start and

143
00:10:16.719 --> 00:10:18.822
stop it from as well from here.

144
00:10:18.822 --> 00:10:23.805
And so it is useful if one you have some
kind of runtime that supports it, right?

145
00:10:23.805 --> 00:10:28.098
In our case, the TypeScript,
JavaScript support is very good.

146
00:10:28.098 --> 00:10:34.384
I can't speak to, I don't know how good it
is in Rust, right, or Ruby, or whatever.

147
00:10:34.384 --> 00:10:35.826
But you do have the ability to,

148
00:10:35.826 --> 00:10:38.555
kind of stop your code at
various different break points.

149
00:10:38.555 --> 00:10:44.870
And you can do things, everything you can
do in Chrome you can do here too, right?

150
00:10:44.870 --> 00:10:50.442
And so you can have a stop on any uncaught
exceptions, or even caught exceptions,

151
00:10:50.442 --> 00:10:53.097
right which always ends up poorly,
&gt;&gt; Speaker 2: But

152
00:10:53.097 --> 00:10:56.985
you can't rewind like you could
in like Visual Studio, right?

153
00:10:56.985 --> 00:10:58.529
You can't drag it back.

154
00:10:58.529 --> 00:11:03.962
&gt;&gt; Steve Kinney: It will never be
as good as Visual Studio, right?

155
00:11:03.962 --> 00:11:07.144
Even this stuff is really good, but

156
00:11:07.144 --> 00:11:11.717
the CTO at Temporal is
a recovering Java engineer.

157
00:11:11.717 --> 00:11:18.553
And when I watch him use the Java IDs,
[LAUGH] I'm not gonna lie to you, right?

158
00:11:18.553 --> 00:11:23.649
It's not as good, right?

159
00:11:23.649 --> 00:11:27.462
You can pick various functions
that you wanted to break on,

160
00:11:27.462 --> 00:11:31.212
normally I know what I'm kinda looking for
along the way.

161
00:11:31.212 --> 00:11:35.919
The other thing is,
let me go back to my code.

162
00:11:35.919 --> 00:11:40.365
You can edit the break point,
but you can also after

163
00:11:40.365 --> 00:11:45.338
however many hits to that,
not maybe not the first time.

164
00:11:45.338 --> 00:11:50.271
But for some reason, we end up
here too many times, I think also,

165
00:11:50.271 --> 00:11:55.925
the expression, you can put a conditional,
which is if things were good,

166
00:11:55.925 --> 00:11:59.426
don't break here if we
request is undefined or

167
00:11:59.426 --> 00:12:02.977
request that user somehow
became undefined.

168
00:12:02.977 --> 00:12:06.526
Well, then, yeah, stop everything,
I wanna go look at it, right,

169
00:12:06.526 --> 00:12:07.619
which is a lot nicer.

170
00:12:07.619 --> 00:12:11.004
If you find console logging is great,
I'm not gonna lie.

171
00:12:11.004 --> 00:12:16.053
We all do it, but if you find
yourself just looking at the good

172
00:12:16.053 --> 00:12:20.805
things over and over as you try
to get to the right things,

173
00:12:20.805 --> 00:12:24.177
you're better off of doing something.

174
00:12:25.338 --> 00:12:30.164
&gt;&gt; Steve Kinney: All right, so
now it is a conditional break point

175
00:12:30.164 --> 00:12:34.648
where I think it should
be good at this point.

176
00:12:34.648 --> 00:12:39.651
Wow, goes through AAA,
we get to the break point, right?

177
00:12:39.651 --> 00:12:43.975
So theoretically, and
I didn't realize this,

178
00:12:43.975 --> 00:12:50.944
that it knows the value of title in this
moment with like Intellisense as well.

179
00:12:50.944 --> 00:12:53.964
Obviously, hopefully with this code,
title can't be undefined.

180
00:12:53.964 --> 00:13:00.096
That's not a code path that should ever
happen, given what's happening on line 52.

181
00:13:00.096 --> 00:13:06.558
But if it was something that
it ought not be, right?

182
00:13:06.558 --> 00:13:11.256
Sometimes it might be as simple as, hey,
at some point, that query param for

183
00:13:11.256 --> 00:13:14.966
an ID that was a string should
have been turned into a number.

184
00:13:14.966 --> 00:13:16.857
I don't know why that's not happening.

185
00:13:16.857 --> 00:13:20.003
You can then have those kinda
conditional break points, and again,

186
00:13:20.003 --> 00:13:21.639
your code will stop at that moment.

187
00:13:21.639 --> 00:13:24.374
You have full access to
everything in memory.

188
00:13:24.374 --> 00:13:29.734
You can change those values to at least
see if the rest of the code path works.

189
00:13:29.734 --> 00:13:33.175
Like I said before, you can,
in this case, step over.

190
00:13:33.175 --> 00:13:36.934
We're still in the break point, but
actually, everything was still good.

191
00:13:36.934 --> 00:13:40.056
Move to the next line of execution.

192
00:13:40.056 --> 00:13:45.339
So here,
we stopped a query with that conditional.

193
00:13:45.339 --> 00:13:49.772
But then I was like, okay,
go to the next line.

194
00:13:49.772 --> 00:13:51.465
And I can do more stuff, right?

195
00:13:51.465 --> 00:13:56.228
And so I could say, here at this point.

196
00:13:58.617 --> 00:14:01.860
&gt;&gt; Steve Kinney: Query was
defined at this point.

197
00:14:01.860 --> 00:14:05.039
I can, at that point,
move to the next line,

198
00:14:05.039 --> 00:14:08.229
which will be that res.sunstatus, right?

199
00:14:08.229 --> 00:14:11.764
And I can see, I mean there's no
new value there at this point, but

200
00:14:11.764 --> 00:14:15.194
you can go through each line and
then all that memory is in scope.

201
00:14:15.194 --> 00:14:18.197
You can manipulate stuff,
you can change stuff,

202
00:14:18.197 --> 00:14:22.141
which again, can make the process
of working out a bug very easy.

203
00:14:22.141 --> 00:14:27.041
And if you think about the amount of
work we did to set it up, it was like,

204
00:14:27.041 --> 00:14:29.984
I made a launch.json
that said run node and

205
00:14:29.984 --> 00:14:34.604
it under the hood passed inspect break,
but it's not important.

206
00:14:34.604 --> 00:14:37.156
It did the right thing
with very little work.

207
00:14:37.156 --> 00:14:41.968
&gt;&gt; Speaker 2: If you don't set a break
point, you can't have an option to break

208
00:14:41.968 --> 00:14:46.272
on all, you can't set it to
break no matter what, right?

209
00:14:46.272 --> 00:14:47.272
I mean, without the break point,
it's not gonna stop.

210
00:14:47.272 --> 00:14:50.311
&gt;&gt; Steve Kinney: You can have a break
on caught or uncaught exceptions.

211
00:14:50.311 --> 00:14:51.392
&gt;&gt; Speaker 2: Okay.

212
00:14:51.392 --> 00:14:56.965
&gt;&gt; Steve Kinney: Right, or
even particular names that error, right?

213
00:14:56.965 --> 00:14:58.520
&gt;&gt; Speaker 2: Conditional.

214
00:14:58.520 --> 00:15:02.296
&gt;&gt; Steve Kinney: Yeah, and
even for code exception as well.

215
00:15:02.296 --> 00:15:04.625
So instead of just sort errors,

216
00:15:04.625 --> 00:15:09.301
a good practice sometimes is
having express API error, right?

217
00:15:09.301 --> 00:15:12.256
And you have various
two kinds of errors so

218
00:15:12.256 --> 00:15:15.642
if I get this kind of error then stop me,
right?

219
00:15:15.642 --> 00:15:21.098
And the one you just run node source
server, your thing runs as normal, but

220
00:15:21.098 --> 00:15:27.438
if you run it with the launch config, then
you'll be opted into these things, right?

221
00:15:27.438 --> 00:15:30.951
Again, there are things
like Node Inspector.

222
00:15:30.951 --> 00:15:34.070
Bun has Safari's dev
tools that you can use.

223
00:15:34.070 --> 00:15:38.336
There are other options, but
for the amount of work and

224
00:15:38.336 --> 00:15:42.043
the fact that I am in my editor and
the fact that,

225
00:15:42.043 --> 00:15:46.587
I'm pretty sure,
change the next line of code, right and

226
00:15:46.587 --> 00:15:51.272
before it gets to it is interesting
when you need it as well.

