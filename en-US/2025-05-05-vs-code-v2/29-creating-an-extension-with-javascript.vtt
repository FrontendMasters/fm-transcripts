WEBVTT

1
00:00:00.293 --> 00:00:02.694
&gt;&gt; Steve Kinney: So, yeah,
that is the simplest example.

2
00:00:02.694 --> 00:00:05.668
Let's jump into a slightly
less simple example, and

3
00:00:05.668 --> 00:00:09.582
we'll get progressively I'll kind
of show you three layers of this.

4
00:00:09.582 --> 00:00:11.498
Now, again, you saw the AI toolkit.

5
00:00:11.498 --> 00:00:16.250
You can see where the natural conclusion
of this is, and there are other ones,

6
00:00:16.250 --> 00:00:16.970
again, for

7
00:00:16.970 --> 00:00:21.727
all sorts of fun things like you can
control basically any part of Versus Code.

8
00:00:21.727 --> 00:00:25.357
You can even hook into Copilot,
and make chat sessions.

9
00:00:25.357 --> 00:00:30.268
The documentation on it is
really last time I checked,

10
00:00:30.268 --> 00:00:33.167
terrible, but you could do it.

11
00:00:33.167 --> 00:00:35.513
So we'll go in and so
we've got a few other ones.

12
00:00:35.513 --> 00:00:39.416
We're gonna go and look at,
what was the name of the other one?

13
00:00:39.416 --> 00:00:44.208
Comment highlighter, so we saw those
extensions before that did something like,

14
00:00:44.208 --> 00:00:47.914
we'll make all your to-dos or
fix me of various color, right?

15
00:00:47.914 --> 00:00:54.912
And so
this is a very high level take on that.

16
00:00:54.912 --> 00:00:59.112
So this would have been if
you ran the generator and

17
00:00:59.112 --> 00:01:03.715
you said I wanted a new
extension JavaScript, right?

18
00:01:03.715 --> 00:01:08.597
And so now there's a little
bit more going on in here.

19
00:01:08.597 --> 00:01:12.421
Not a lot more, but a little bit more.

20
00:01:12.421 --> 00:01:16.989
So what do we have in here?
Okay, we've got package J Sound,

21
00:01:16.989 --> 00:01:18.763
we love those.

22
00:01:18.763 --> 00:01:22.450
So there's a few things,
this one contributes a command,

23
00:01:22.450 --> 00:01:25.562
and that command is
extension.decoratewords.

24
00:01:25.562 --> 00:01:29.210
An extension could literally be
the name of your extension, right?

25
00:01:29.210 --> 00:01:34.437
And so, the one I'm working on for
temporal, it's actually temporal..

26
00:01:34.437 --> 00:01:41.479
You saw those other ones, like github.so
you would probably give it a better name,

27
00:01:41.479 --> 00:01:46.354
but I couldn't decide on one,
so we went with extension.

28
00:01:46.354 --> 00:01:50.908
Obviously, you do not want to clash
with existing ones, that is bad.

29
00:01:50.908 --> 00:01:55.361
So you will also have a publisher name
that you can kind of put in here as well.

30
00:01:55.361 --> 00:02:00.767
The other one that's kind of
interesting is activation events.

31
00:02:00.767 --> 00:02:06.455
So we talked about before that all of
the extensions have a cost, right?

32
00:02:06.455 --> 00:02:14.889
So then the trick is to be very judicious
with when that plugin gets activated.

33
00:02:14.889 --> 00:02:19.792
If it is just something that you trigger
a command, then you don't even need to

34
00:02:19.792 --> 00:02:24.424
have activation events, it'll be
should you run one of those commands?

35
00:02:24.424 --> 00:02:26.218
It will be activated, right?

36
00:02:26.218 --> 00:02:30.549
And that is great for things where you
want to open the command palette and

37
00:02:30.549 --> 00:02:35.095
run it cuz then your extension has,
other than registering that it exists,

38
00:02:35.095 --> 00:02:38.309
doesn't have any cost until
you kick it off, right?

39
00:02:38.309 --> 00:02:40.069
But in this case,
what if I want to find this?

40
00:02:40.069 --> 00:02:43.155
Like the first example of this is like,
find every fix me and

41
00:02:43.155 --> 00:02:44.525
give it a red background.

42
00:02:44.525 --> 00:02:47.194
I can wait until someone says,
find all the fix mes, or

43
00:02:47.194 --> 00:02:50.979
I can do it under some conditions and
there's lots of different conditions.

44
00:02:50.979 --> 00:02:56.197
In this case, I'm saying if they open a
file that is in the language JavaScript or

45
00:02:56.197 --> 00:02:58.832
TypeScript, activate the extension.

46
00:02:58.832 --> 00:03:02.861
So it's fix me,
it could have worked anywhere,

47
00:03:02.861 --> 00:03:06.020
I'm making a point, leave me alone.

48
00:03:06.020 --> 00:03:10.509
And we have one command that
we expose that we contribute

49
00:03:10.509 --> 00:03:13.191
called decorate words, great.

50
00:03:13.191 --> 00:03:17.726
Other fun stuff in here,
we got ES Linconfig,

51
00:03:17.726 --> 00:03:20.878
a folder for tests, whatever.

52
00:03:20.878 --> 00:03:25.198
Nobody provides tests, that's not true.

53
00:03:25.198 --> 00:03:29.607
And then in here,
let's go hide some stuff for a second.

54
00:03:29.607 --> 00:03:35.456
In here, we're now like,
other than pulling in the VS code library,

55
00:03:35.456 --> 00:03:39.633
we're just in regular JavaScript land,
right?

56
00:03:39.633 --> 00:03:42.749
You're like common JS.

57
00:03:42.749 --> 00:03:48.364
Yes, and
the VS Code API is actually pretty good,

58
00:03:48.364 --> 00:03:52.921
but it does take a little bit, which is.

59
00:03:52.921 --> 00:03:55.710
All right, we wanna have this decoration
type for all the fixed means.

60
00:03:55.710 --> 00:03:58.178
We're gonna get a transparent red.

61
00:03:58.178 --> 00:04:03.163
And this is just creating a text editor
decoration type that we'll hold on to.

62
00:04:03.163 --> 00:04:07.731
And then there's nothing really
about VS Code other than there

63
00:04:07.731 --> 00:04:12.470
are some things in here which is,
we've got this function called

64
00:04:12.470 --> 00:04:17.053
decoratewords which is get me
the activeTextEditor, right?

65
00:04:17.053 --> 00:04:20.111
Which one is the cursor currently in.

66
00:04:20.111 --> 00:04:22.309
If you cannot get one of these,
we're done.

67
00:04:22.309 --> 00:04:27.700
There's no activeTextEditor,
there's nothing for you to do.

68
00:04:27.700 --> 00:04:32.681
Done, all right from that document,
editor document,

69
00:04:32.681 --> 00:04:36.951
get the text,
what is currently typed in there.

70
00:04:36.951 --> 00:04:38.736
So you could do all sorts
of things in this point.

71
00:04:38.736 --> 00:04:42.091
You could analyze the code and
do things with it.

72
00:04:42.091 --> 00:04:46.356
You could modify the code and
rewrite it back in there.

73
00:04:46.356 --> 00:04:49.383
You could do all sorts of
things that you want to do.

74
00:04:49.383 --> 00:04:54.989
What we're gonna do is
we're going to look for

75
00:04:54.989 --> 00:04:59.891
the word fix me in here and find them all.

76
00:04:59.891 --> 00:05:06.934
And like keep go looking for them and
for each one, find where it starts and

77
00:05:06.934 --> 00:05:12.627
then plus the length of the word and
push a new range onto it.

78
00:05:12.627 --> 00:05:18.079
So like every fix me,
find the first character where was it.

79
00:05:18.079 --> 00:05:21.363
Plus five, that's usually where it ends.

80
00:05:21.363 --> 00:05:23.145
So all those positions cuz yes,

81
00:05:23.145 --> 00:05:27.040
we think text files are all these
long things, that's all newlines.

82
00:05:27.040 --> 00:05:28.822
It's just one long string.

83
00:05:28.822 --> 00:05:33.592
Find the start and stop of every
fix me put it into an array, right?

84
00:05:33.592 --> 00:05:36.943
You thought you were done with regex,
you didn't know that my examples.

85
00:05:36.943 --> 00:05:39.971
Both of them, the next one too,
all include regex.

86
00:05:39.971 --> 00:05:44.055
I don't know why I do this to myself.

87
00:05:44.055 --> 00:05:48.024
Could I technically have used
the TypeScript compiler and

88
00:05:48.024 --> 00:05:51.993
grabbed an AST and
done all that I absolutely could have and

89
00:05:51.993 --> 00:05:54.913
you would hate me even
more than you do now.

90
00:05:54.913 --> 00:05:58.669
I will do an entire full day
on the TypeScript compile API.

91
00:05:58.669 --> 00:06:03.331
If anyone wants that, nobody wants it,
I'm obsessed with it.

92
00:06:03.331 --> 00:06:06.118
All right, so we've got all the ranges and

93
00:06:06.118 --> 00:06:10.997
then all we're doing is editor set
decorations for that red background and

94
00:06:10.997 --> 00:06:14.497
all the places that you found
the word fix me, right?

95
00:06:14.497 --> 00:06:19.201
The hardest part of this is
actually the regex piece, right?

96
00:06:19.201 --> 00:06:24.643
I could grab every other range and
just like make the entire editor.polka or

97
00:06:24.643 --> 00:06:28.654
something like that,
do all sorts of terrible things.

98
00:06:28.654 --> 00:06:33.558
Okay, back into the land of some
amount of VS code as we made this

99
00:06:33.558 --> 00:06:38.745
function called subscribe to
document changes, which is, hey,

100
00:06:38.745 --> 00:06:43.768
that decorate words thing,
we're gonna look for every fix me.

101
00:06:43.768 --> 00:06:46.831
Do it whenever the document changes, or

102
00:06:46.831 --> 00:06:52.333
they go to another active editor cuz,
then active editor is different.

103
00:06:52.333 --> 00:06:54.638
We wanna scan that file instead.

104
00:06:54.638 --> 00:07:01.760
So it'll only work to the point where
you are talking about the extension or

105
00:07:01.760 --> 00:07:07.751
no, due to left, that was spell
checking an entire code base,

106
00:07:07.751 --> 00:07:10.709
that's just a bad extension.

107
00:07:10.709 --> 00:07:15.285
No one needs you spell checking
files that aren't open.

108
00:07:15.285 --> 00:07:20.168
No one needs you spell checking files
that are in node modules, right?

109
00:07:20.168 --> 00:07:22.761
I'm only dealing with the file
that I have currently I've opened.

110
00:07:22.761 --> 00:07:26.173
So, let's just do it with
the active editor, and

111
00:07:26.173 --> 00:07:30.571
then you don't have your battery
melting out of your USB ports.

112
00:07:30.571 --> 00:07:34.733
So here,
whenever the document itself changes, or

113
00:07:34.733 --> 00:07:41.543
they change what document they're looking
at, we are going to rerun that function,

114
00:07:41.543 --> 00:07:45.911
and we'll run it once,
just when it activates right?

115
00:07:45.911 --> 00:07:48.969
Probably, now that I think about it,

116
00:07:48.969 --> 00:07:54.142
was I being a little egregiously excited,
sure, but it works.

117
00:07:54.142 --> 00:08:01.034
And then the really only two things
that you need to export from this file,

118
00:08:01.034 --> 00:08:04.924
the only two things
that you truly need for

119
00:08:04.924 --> 00:08:10.169
it to be a VS code extension
is activate and deactivate.

120
00:08:10.169 --> 00:08:15.936
What do you do when the when
the extension starts up?

121
00:08:15.936 --> 00:08:18.148
And how do you clean up after
yourself on the way down?

122
00:08:18.148 --> 00:08:23.323
So if you need to close
database connections or

123
00:08:23.323 --> 00:08:30.898
clean up some files or what have you,
you can do that in deactivate.

124
00:08:30.898 --> 00:08:34.346
And so here we go, we're gonna
subscribe to the document changes.

125
00:08:34.346 --> 00:08:41.082
Yeah, then I call it again cuz
that's just the command itself.

126
00:08:41.082 --> 00:08:44.960
So we'll show an information message and
we'll decorate the words.

127
00:08:44.960 --> 00:08:48.123
The important parts are un-activate,
we're gonna do this thing,

128
00:08:48.123 --> 00:08:49.656
we are registering the command.

129
00:08:49.656 --> 00:08:54.871
So that will show up as a new thing
in the command palette, right?

130
00:08:54.871 --> 00:09:00.652
And then also it's gonna run
when the extension activates and

131
00:09:00.652 --> 00:09:04.888
every time the file changes as well,
right?

132
00:09:04.888 --> 00:09:08.995
So now, what does this look like?

133
00:09:08.995 --> 00:09:12.186
We can go ahead, is that a Java cup?

134
00:09:12.186 --> 00:09:19.715
We know that I have it only working
on JavaScript, so check this out.

135
00:09:19.715 --> 00:09:22.077
I'm gonna go to JavaScript.

136
00:09:24.742 --> 00:09:30.007
&gt;&gt; Steve Kinney: And
you can now see if I have the word fix me,

137
00:09:30.007 --> 00:09:35.143
it gets a red background, to do does not.

138
00:09:37.992 --> 00:09:42.350
&gt;&gt; Steve Kinney: Right, so we went from
just having a theme to something that does

139
00:09:42.350 --> 00:09:44.780
a certain amount of code analysis.

140
00:09:44.780 --> 00:09:48.352
Now, again, you can hook into
any part of this editor, right?

141
00:09:48.352 --> 00:09:52.011
You wanna open up a pane where
you just render some text, cool.

142
00:09:52.011 --> 00:09:54.804
You want a little web page in there,
great.

143
00:09:54.804 --> 00:09:58.097
You want to modify the editor pane or
the LA,

144
00:09:58.097 --> 00:10:02.734
have an outline that works
slightly differently, awesome.

145
00:10:02.734 --> 00:10:05.698
You can do all of those things,

146
00:10:05.698 --> 00:10:10.948
it's just like what APIs
you wanna hook into, right?

147
00:10:10.948 --> 00:10:12.885
But it can be as simple as a theme,

148
00:10:12.885 --> 00:10:17.400
it can be a little bit more involved
as analyzing the files, doing whatever.

