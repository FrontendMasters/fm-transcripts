WEBVTT

1
00:00:00.054 --> 00:00:04.374
&gt;&gt; Steve Kinney: There's a few more
little refactoring things that,

2
00:00:04.374 --> 00:00:09.084
honestly, I don't ever use,
but I will show some to you.

3
00:00:09.084 --> 00:00:13.849
So we've got, we go here, we hit refactor.

4
00:00:13.849 --> 00:00:18.687
The one that I have used
before is been really,

5
00:00:18.687 --> 00:00:22.161
honestly, I usually just cut and

6
00:00:22.161 --> 00:00:27.886
paste List is that you can
move a function to a new file.

7
00:00:27.886 --> 00:00:30.602
As you can see it's pretty smart, right?

8
00:00:30.602 --> 00:00:34.407
I grabbed that divide function.

9
00:00:34.407 --> 00:00:36.738
I don't even think I
grabbed the JS doc for it.

10
00:00:36.738 --> 00:00:39.679
I think it found it and took it.

11
00:00:39.679 --> 00:00:43.482
You can see that in this case,
if I go back to index,

12
00:00:43.482 --> 00:00:47.651
it added the import to any
file that imported that file.

13
00:00:47.651 --> 00:00:51.163
I basically take, if I have a giant
file with a bunch of functions in it,

14
00:00:51.163 --> 00:00:53.290
I can select them, move them to new files.

15
00:00:53.290 --> 00:00:55.785
It came up with a good name for the file.

16
00:00:55.785 --> 00:00:57.587
Divide is a solid name.

17
00:00:57.587 --> 00:00:58.519
I can't complain.

18
00:00:58.519 --> 00:01:00.261
It handled all my imports for me.

19
00:01:00.261 --> 00:01:02.627
It did everything along those lines.

20
00:01:02.627 --> 00:01:03.209
It's nice.

21
00:01:03.209 --> 00:01:07.818
&gt;&gt; Speaker 1: So if you have a method that
you wanna share across several TypeScript

22
00:01:07.818 --> 00:01:10.691
components, you could just move it over.

23
00:01:10.691 --> 00:01:11.786
&gt;&gt; Steve Kinney: Pull it right out.

24
00:01:11.786 --> 00:01:15.131
I historically, it's probably more
muscle memory than anything else.

25
00:01:15.131 --> 00:01:18.133
Have usually just cut and
paste into a new file.

26
00:01:18.133 --> 00:01:20.198
&gt;&gt; Speaker 1: I guess maybe
that would be a reason.

27
00:01:20.198 --> 00:01:23.614
To decouple and put it in a service.

28
00:01:23.614 --> 00:01:27.115
&gt;&gt; Steve Kinney: Yeah, yeah but
theoretically you could then,

29
00:01:27.115 --> 00:01:29.662
I think this works in JavaScript.

30
00:01:29.662 --> 00:01:30.884
We're all gonna find out together.

31
00:01:30.884 --> 00:01:35.294
I know it works in TypeScript is take
the file and then move it somewhere else.

32
00:01:35.294 --> 00:01:39.355
Let's say you had a folder for
that given service, or, in my case,

33
00:01:39.355 --> 00:01:43.436
I am guilty of having and we all
have this a folder called utilities.

34
00:01:43.436 --> 00:01:49.016
[LAUGH] Everyone's face told me that
you all have a folder called utilities,

35
00:01:49.016 --> 00:01:54.088
which is effectively, might as
well be called junk drawer, right?

36
00:01:54.088 --> 00:01:56.860
And but if you go here now,
you can see that I moved it and

37
00:01:56.860 --> 00:02:01.034
it updated the relative file path, so now
you can start to pull out the functions.

38
00:02:01.034 --> 00:02:03.910
You can move them to where
they need to go, and

39
00:02:03.910 --> 00:02:07.493
you're not doing all of this
manually by hand, right?

40
00:02:07.493 --> 00:02:10.058
Because normally,
what would happen is I would do that, and

41
00:02:10.058 --> 00:02:12.272
then I would chase down
the red squigglies, right,

42
00:02:12.272 --> 00:02:15.118
across all the different files
when TypeScript was yelling at me.

43
00:02:15.118 --> 00:02:17.099
Because the given value
was no longer found.

44
00:02:17.099 --> 00:02:22.286
In this case, it did everything for
me and there's sometimes where

45
00:02:22.286 --> 00:02:27.301
it will be a little bit more proactive,
which sometimes is nice.

46
00:02:27.301 --> 00:02:32.259
If we go back to the original
version of that playground.

47
00:02:32.259 --> 00:02:36.432
The other nice thing is let's say
if I type in just playground,

48
00:02:36.432 --> 00:02:40.393
I didn't have to match the file name,
I got the directory.

49
00:02:40.393 --> 00:02:42.059
I can see that I there's a index file.

50
00:02:42.059 --> 00:02:45.319
I can kind of, fuzzy match file names of,
part of the folder,

51
00:02:45.319 --> 00:02:48.604
part of the file name, and
I'll get the one I'm looking for.

52
00:02:48.604 --> 00:02:53.855
Because, depending on what app let's
say you're in, a Next.JS app or

53
00:02:53.855 --> 00:02:59.639
a SvelteKit app, you probably have a bunch
of files with the same name, right?

54
00:02:59.639 --> 00:03:03.914
The ones that are in every route directory
to load the server side functions or

55
00:03:03.914 --> 00:03:06.625
whatever and
svelte is like plus page.svelte.

56
00:03:06.625 --> 00:03:08.868
I have 1000 of those, right.

57
00:03:08.868 --> 00:03:12.861
And so if you roughly know the folder,
you can jump to it.

58
00:03:12.861 --> 00:03:16.197
Sometimes it will suggest
refactors to you,

59
00:03:16.197 --> 00:03:21.218
which is either these little triple
dots or this little light bulb.

60
00:03:21.218 --> 00:03:22.242
That's not the one I want.

61
00:03:22.242 --> 00:03:26.762
Let's go here, which is, in this case,

62
00:03:26.762 --> 00:03:30.259
yo, this is a common JS module.

63
00:03:30.259 --> 00:03:31.716
Do you want it to be an ES module?

64
00:03:31.716 --> 00:03:37.318
And you can hit this quick fix down here,
and it will go ahead and

65
00:03:37.318 --> 00:03:41.676
convert the entire file to an ES module,
right?

66
00:03:41.676 --> 00:03:45.289
Also, if you paste in some with a bunch
of JS Doc as a TypeScript file.

67
00:03:45.289 --> 00:03:48.102
It's like,
have you considered using TypeScript?

68
00:03:48.102 --> 00:03:52.181
And you go, yes, and then it will
just change it all for you, right?

69
00:03:52.181 --> 00:03:53.682
Again, those are things
that we can all do.

70
00:03:53.682 --> 00:03:54.623
We all know how to do.

71
00:03:54.623 --> 00:03:59.227
We don't want to do because they're
tedious, and we will make mistakes

72
00:03:59.227 --> 00:04:03.463
because they're so boring that I
will see a notification on that.

73
00:04:03.463 --> 00:04:07.459
You know the chat with your coworkers
is not on the real chat, but

74
00:04:07.459 --> 00:04:12.356
when we just talk smack, the gospel one,
yeah, I'll go check that instead.

75
00:04:12.356 --> 00:04:18.147
So yeah, a bunch of literary factors and
they're helpful, right?

76
00:04:18.147 --> 00:04:21.901
I should put this file back.

77
00:04:21.901 --> 00:04:25.177
But again, yeah,
you can take any given one of these and

78
00:04:25.177 --> 00:04:29.034
sometimes it's worth trying to
see what some of the options are.

79
00:04:29.034 --> 00:04:31.871
But you can go, click Refactor.

80
00:04:31.871 --> 00:04:39.280
In this case, it is also Cmd+shift+rR,
see what some of the options are.

81
00:04:39.280 --> 00:04:41.907
I don't trust these on one of these.

82
00:04:41.907 --> 00:04:45.768
That never ends well for me.

83
00:04:45.768 --> 00:04:49.914
Extract to function in module scope,
move to new file.

84
00:04:53.968 --> 00:04:55.215
&gt;&gt; Steve Kinney: There's
a whole bunch of these.

85
00:04:59.930 --> 00:05:05.241
&gt;&gt; Steve Kinney: I don't wrap
it any condition of for you?

86
00:05:05.241 --> 00:05:06.972
Yeah, can be useful.

87
00:05:06.972 --> 00:05:09.548
Maybe not, maybe they are but
they are all built into there.

88
00:05:09.548 --> 00:05:13.287
And my the kind of
homework is to explore it,

89
00:05:13.287 --> 00:05:17.439
figure out what works for
you and what doesn't.

90
00:05:17.439 --> 00:05:20.267
Again for some people,
they gotta live and die by it.

91
00:05:20.267 --> 00:05:25.149
For me I will live and die by that
f2 to rename things all the time.

92
00:05:25.149 --> 00:05:27.539
I use it every day.

93
00:05:27.539 --> 00:05:29.559
Multiple cursors all the time.

94
00:05:29.559 --> 00:05:34.716
I don't always tend to use the refactor
tools, but they are there,

95
00:05:34.716 --> 00:05:38.891
they are powerful and
you might like them more than me.

96
00:05:38.891 --> 00:05:40.590
Cool.

97
00:05:40.590 --> 00:05:44.799
Like I said, if you ever see those little
triple dots, there's usually a suggestion

98
00:05:44.799 --> 00:05:48.666
of a thing of like, hey, this is a common
JS module, do you want to make it ESM?

99
00:05:48.666 --> 00:05:52.564
Do you want to turn this JS
doc into Typescript types?

100
00:05:52.564 --> 00:05:54.543
I'm trying to think what
some of the other ones are.

101
00:05:54.543 --> 00:05:55.715
Can't really remember.

102
00:05:55.715 --> 00:05:59.844
Sometimes it's simply this async await
function isn't awaiting anything.

103
00:05:59.844 --> 00:06:04.434
That function doesn't return, that way,
it doesn't do anything, right?

104
00:06:04.434 --> 00:06:08.185
That's useful because a lot of times
that's in another file that I haven't I'm

105
00:06:08.185 --> 00:06:10.845
not looking at right now, and
it is nice to know, right?

106
00:06:10.845 --> 00:06:14.824
So there's usually those
little triple dots

107
00:06:14.824 --> 00:06:18.810
mean that there's something there for you.

108
00:06:18.810 --> 00:06:21.689
Cool.

109
00:06:21.689 --> 00:06:26.500
And sometimes it'll be like, I think you
can misspell something, and it will for

110
00:06:26.500 --> 00:06:31.244
the obvious ones probably guess for you,
unless you're in front of people, and

111
00:06:31.244 --> 00:06:32.241
that doesn't.

112
00:06:32.241 --> 00:06:36.531
But yeah, so there's a bunch of little
things in there as well that you can kind

113
00:06:36.531 --> 00:06:37.708
of play around with.

