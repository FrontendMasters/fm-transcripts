WEBVTT

1
00:00:00.000 --> 00:00:01.655
&gt;&gt; Speaker 1: Let's set one up real quick,
and

2
00:00:01.655 --> 00:00:04.505
then we'll go back into talking
about the theory again.

3
00:00:04.505 --> 00:00:09.028
So, yeah, I just opened up this task list,
it's got an express server.

4
00:00:09.028 --> 00:00:11.841
It's got a V thing,
it's just got enough for

5
00:00:11.841 --> 00:00:15.038
me to actually have something
useful to do in here.

6
00:00:15.038 --> 00:00:19.340
So we can hit our good friend,
the Cmd palette.

7
00:00:19.340 --> 00:00:23.574
I would just type in tasks.

8
00:00:23.574 --> 00:00:28.234
Some tasks are automatic,
let's see if there are any in here.

9
00:00:30.169 --> 00:00:35.969
You can see that in this case,
it did read my package JSON and

10
00:00:35.969 --> 00:00:40.845
to a certain extent get
exactly what it should be.

11
00:00:40.845 --> 00:00:45.825
The nice part is if you wanted to
put a key binding on one of these,

12
00:00:45.825 --> 00:00:50.916
I mean, you can also assign cubins,
we'll see that in a second.

13
00:00:50.916 --> 00:00:55.882
You can go ahead and see it,
look it made our test.json.

14
00:00:55.882 --> 00:00:58.362
That's great, let's start with that.

15
00:00:58.362 --> 00:01:02.047
Love it.

16
00:01:02.047 --> 00:01:06.245
Npm format is in my package JSON,
but it is, again, "type": "npm",

17
00:01:06.245 --> 00:01:07.994
"script": is 'format".

18
00:01:07.994 --> 00:01:10.427
That's its label, and
now it is one of my tasks.

19
00:01:10.427 --> 00:01:14.928
So I can go ahead and
save and now I can say,

20
00:01:14.928 --> 00:01:19.314
if I go to run task, there it is, right?

21
00:01:19.314 --> 00:01:23.502
So now the act of running lint or
if I wanted even run build,

22
00:01:23.502 --> 00:01:25.222
I literally go in here.

23
00:01:25.222 --> 00:01:28.090
It's a JSON file, watch this.

24
00:01:31.605 --> 00:01:33.570
Put a comma in there.

25
00:01:33.570 --> 00:01:37.428
Let's say, yeah, format.

26
00:01:37.428 --> 00:01:40.519
What else I got in here?

27
00:01:40.519 --> 00:01:43.742
I could just as I wanted to before,
we got lint in here.

28
00:01:43.742 --> 00:01:45.364
We got lint fix, I love it.

29
00:01:45.364 --> 00:01:51.546
So we got, let's do "lint: fix".

30
00:01:51.546 --> 00:01:55.220
I ain't gonna whatever,
not figuring out what that was.

31
00:01:55.220 --> 00:01:58.990
Lint, cool, cool, cool.

32
00:01:58.990 --> 00:02:04.996
This one is probably,
I could use the eslint problem matcher,

33
00:02:04.996 --> 00:02:08.632
but double quotes cuz we're in JSON.

34
00:02:08.632 --> 00:02:12.690
So now what I can do is I can go in here,
and I can say,

35
00:02:17.818 --> 00:02:19.412
task.

36
00:02:19.412 --> 00:02:24.596
I've got that format in there,
and it just runs it.

37
00:02:24.596 --> 00:02:26.855
If I ran it again,
it will use the same terminal tag.

38
00:02:26.855 --> 00:02:30.396
We'll talk about how to deal with that
in a second, how to change the behavior.

39
00:02:30.396 --> 00:02:32.196
I can run lint.

40
00:02:32.196 --> 00:02:35.800
It'll go ahead and lint all the files,
so on and so forth.

41
00:02:35.800 --> 00:02:37.134
So now I can do all those things.

42
00:02:37.134 --> 00:02:38.580
I could start at the dev server.

43
00:02:38.580 --> 00:02:42.734
I could build all the various things,
again, these are npm scripts.

44
00:02:42.734 --> 00:02:45.072
You need to run a shell command,
it's a shell thing.

45
00:02:45.072 --> 00:02:47.175
You want to just do
node in a certain file.

46
00:02:47.175 --> 00:02:50.861
If we look here,
I've got server that's just a node file.

47
00:02:50.861 --> 00:02:56.013
So we can do one here as well,
where we could say,

48
00:03:12.496 --> 00:03:13.904
Process is what it is.

49
00:03:17.928 --> 00:03:24.005
"process", we'll say,
then the command is node

50
00:03:27.843 --> 00:03:32.773
And the args are, I think it's,

51
00:03:36.842 --> 00:03:46.059
["src/ Server, .js"].

52
00:03:46.059 --> 00:03:47.414
Cool.

53
00:03:49.644 --> 00:03:51.077
What you angry about?

54
00:03:51.077 --> 00:03:53.407
Missing property label, that's important.

55
00:03:53.407 --> 00:04:01.951
So we'll say,
"label": "Start Server", right?

56
00:04:01.951 --> 00:04:03.305
You can be whatever you want.

57
00:04:03.305 --> 00:04:09.356
So now what I can do in here,
you got the start server.

58
00:04:12.983 --> 00:04:16.121
It starts the server at local host 3000,
right?

59
00:04:16.121 --> 00:04:22.334
And so there's a default test task and
a default build task as well.

60
00:04:22.334 --> 00:04:24.511
And so you can literally just say,
build or test.

61
00:04:24.511 --> 00:04:27.491
It will run those as well and that's cool.

62
00:04:27.491 --> 00:04:35.906
You're neat, that saved me from
typing node source/server.js.

63
00:04:35.906 --> 00:04:41.693
Great, okay, let's jump back new there.

64
00:04:44.842 --> 00:04:49.433
And so we can go in here,
where are my tasks?

65
00:04:49.433 --> 00:04:53.185
So here's a full out V1 where I've
got my lints, I've got my test,

66
00:04:53.185 --> 00:04:57.213
I've got build for the frontend and
dev server for the frontend, right?

67
00:04:57.213 --> 00:05:00.203
Npm, dev, I don't know why.

68
00:05:00.203 --> 00:05:03.639
I think, I was just trying to prove
a point with the different approaches

69
00:05:03.639 --> 00:05:04.948
to it when I was writing it.

70
00:05:04.948 --> 00:05:10.909
But then we could have the backend
server as well that we kinda did before.

71
00:05:10.909 --> 00:05:14.765
This one I'm using nodemon
instead of node, that was smart.

72
00:05:14.765 --> 00:05:18.959
But what's interesting is you can also
make this one called, "Dev: Full Stack".

73
00:05:18.959 --> 00:05:25.355
And this one depends on, "Dev
Server( API)" and "Dev Server (Frontend)".

74
00:05:25.355 --> 00:05:27.057
So as long as it matches the labels.

75
00:05:27.057 --> 00:05:32.452
And what this one will do is it
will trigger both of them, right?

76
00:05:32.452 --> 00:05:36.723
So now I can start up the express server,
and

77
00:05:36.723 --> 00:05:41.237
I can start up the Vite
server at the same time.

78
00:05:41.237 --> 00:05:43.042
And you can do interesting stuff in here.

79
00:05:43.042 --> 00:05:46.291
So if you wanted to check and
build all, you can do "dependsOn:.

80
00:05:46.291 --> 00:05:50.494
So "Check &amp; Build All" depends
on these other three tasks, but

81
00:05:50.494 --> 00:05:53.176
with the order of "sequence", right?

82
00:05:53.176 --> 00:05:59.737
So lint it, run the tests, and
then go ahead and build it, right?

83
00:05:59.737 --> 00:06:05.999
And so now you can kinda do all those
things with one command as you go through.

84
00:06:05.999 --> 00:06:08.992
And I just grabbed random other examples.

85
00:06:08.992 --> 00:06:13.390
If you needed to compile the TypeScript
before you run it, hypothetically,

86
00:06:13.390 --> 00:06:15.154
you build a VS code extension.

87
00:06:15.154 --> 00:06:18.983
What's your take on linting anyway?

88
00:06:18.983 --> 00:06:21.057
As long as it auto fixes them into it?

89
00:06:21.057 --> 00:06:22.228
Yeah.

90
00:06:22.228 --> 00:06:26.806
I mean, it depends.

91
00:06:26.806 --> 00:06:31.546
The ones that catch the errors,
like unused variables,

92
00:06:31.546 --> 00:06:35.405
sure, but those are easily removed, right?

93
00:06:35.405 --> 00:06:38.202
How do I feel about lint it
when I don't have typescript?

94
00:06:38.202 --> 00:06:44.942
I love it when I do have typescript,
I mean, some of the value own prettier.

95
00:06:44.942 --> 00:06:49.101
There's a lot of overlap in the Venn
diagram of those three things, right?

96
00:06:49.101 --> 00:06:53.208
It just seems a lot of people just
turn it off, you know what I mean?

97
00:06:53.208 --> 00:06:55.831
I guess, I can't speak for
a lot of people, but

98
00:06:55.831 --> 00:06:58.142
I mean, it just seems people turn it off.

99
00:06:58.142 --> 00:07:04.446
It all depends.

100
00:07:04.446 --> 00:07:09.010
However long ago,
when it was the Airbnb, eslint config,

101
00:07:09.010 --> 00:07:13.485
which yelled at you for
all sorts of stylistic things, and

102
00:07:13.485 --> 00:07:18.352
then it wouldn't build versus
prettier that just fixes them.

103
00:07:18.352 --> 00:07:20.480
Also, as I have aged,

104
00:07:20.480 --> 00:07:26.539
a younger me wanted everyone to
write code the way I like to code.

105
00:07:26.539 --> 00:07:29.659
As I have gotten older, I've relaxed.

106
00:07:29.659 --> 00:07:34.633
[LAUGH] Right, if I like arrow functions
and Alex likes function declarations,

107
00:07:34.633 --> 00:07:39.922
yeah, it's kinda weird that it's a little
bit different than the multiple files.

108
00:07:39.922 --> 00:07:45.116
But as I've gotten older,
I've had to let go a little bit.

109
00:07:45.116 --> 00:07:52.404
But in a SvelteKit app, for instance, the
lint is also checking for anti-patterns.

110
00:07:52.404 --> 00:07:56.545
Or the lint rule in React that says, if
you have a use effect that does not have

111
00:07:56.545 --> 00:08:00.447
the dependency in it, I absolutely
wanna know about that one, right?

112
00:08:00.447 --> 00:08:01.621
Do I wanna be yelled at?

113
00:08:01.621 --> 00:08:05.401
Cuz we prefer function
declaration over arrow functions.

114
00:08:05.401 --> 00:08:06.869
That one I'm done with, and

115
00:08:06.869 --> 00:08:10.182
I am the person who was the draconian
monster with that, right?

116
00:08:10.182 --> 00:08:14.154
I was the one everyone else hated,
and I have mellowed.

117
00:08:14.154 --> 00:08:18.739
So it depends.

118
00:08:18.739 --> 00:08:22.497
A Docker build and push one,

119
00:08:22.497 --> 00:08:27.516
if you can do it from the command line.

120
00:08:27.516 --> 00:08:33.075
You can go ahead and
you can also do it from the test as well.

121
00:08:33.075 --> 00:08:37.762
This is an interesting one, which I
actually haven't used mostly because it

122
00:08:37.762 --> 00:08:40.225
was one of the ones as I was researching.

123
00:08:40.225 --> 00:08:42.115
I was like, that's cool, yeah.

124
00:08:42.115 --> 00:08:46.931
What do you see as the benefit of doing
this versus just writing some aliases

125
00:08:46.931 --> 00:08:48.774
in a Z shell RC or something?

126
00:08:48.774 --> 00:08:53.090
I think having, one again, chaining them
and having the different rules about, hey,

127
00:08:53.090 --> 00:08:54.387
can these go concurrent?

128
00:08:54.387 --> 00:08:55.544
Can they go in order?

129
00:08:55.544 --> 00:09:00.432
Could you have done it with an npm script,
which is npm run and,

130
00:09:00.432 --> 00:09:02.196
and npm run and, and.

131
00:09:02.196 --> 00:09:07.001
I think it's only if you are choosing
to get to the point where

132
00:09:07.001 --> 00:09:11.066
you can just run it from
the Cmd palette real quick.

133
00:09:11.066 --> 00:09:15.884
Again, when I look at a temporal workflow
where I've got to spin up workers and

134
00:09:15.884 --> 00:09:19.611
the server and the workflow,
that's four things, right?

135
00:09:19.611 --> 00:09:22.718
And sometimes one of them are running,

136
00:09:22.718 --> 00:09:27.021
I just need an extra worker
having dropdown [LAUGH].

137
00:09:27.021 --> 00:09:29.340
My God, honestly,
is what it comes down to.

138
00:09:29.340 --> 00:09:32.583
Do you see it keeps you more in
the code then and looks- Yeah,

139
00:09:32.583 --> 00:09:35.063
it's about the flow state.

140
00:09:35.063 --> 00:09:37.689
I think,
that every time I have to context Shift,

141
00:09:37.689 --> 00:09:40.707
there's a chance that I will stop and
look at Instagram.

142
00:09:40.707 --> 00:09:49.084
[LAUGH] Right and if I can do it in
that flow state, we are better off.

143
00:09:49.084 --> 00:09:50.923
Do I set up testing
every project I work on?

144
00:09:50.923 --> 00:09:53.088
I don't, right?

145
00:09:53.088 --> 00:09:56.646
But a lot of times in
the main app that I work on,

146
00:09:56.646 --> 00:09:59.669
a lot of times it's still the Cmd line.

147
00:09:59.669 --> 00:10:00.744
Cuz even the tests are there,

148
00:10:00.744 --> 00:10:02.778
the Cmd line options still exist and
some of you have it.

149
00:10:02.778 --> 00:10:07.241
But there are some situations that
are complicated, building an electron app

150
00:10:07.241 --> 00:10:11.106
where you've got to spin up
the electron app with the main process.

151
00:10:11.106 --> 00:10:13.962
But then maybe if you
are also using a framework,

152
00:10:13.962 --> 00:10:19.049
that needs to compile the JavaScript, and
then maybe something isn't TypeScript and

153
00:10:19.049 --> 00:10:22.342
needs to actually get compiled to become,
what I mean?

154
00:10:22.342 --> 00:10:26.658
When you get to a certain amount of
things, being able to chain them along and

155
00:10:26.658 --> 00:10:31.245
just like, run one thing and kind of like,
also the problem matchers that we're

156
00:10:31.245 --> 00:10:35.427
talking about, like, where you can
actually, like, hook it in here and

157
00:10:35.427 --> 00:10:40.110
actually see the problems versus, like,
parsing now five command lines right.

158
00:10:40.110 --> 00:10:41.730
There are certain ergonomics.

159
00:10:41.730 --> 00:10:44.571
But like, it is one of those things,
which is, like.

160
00:10:44.571 --> 00:10:48.332
If it's simple enough,
would I ever do this, no.

161
00:10:48.332 --> 00:10:52.579
&gt;&gt; Speaker 2: For a particular project,
would you Is there, like, a JSON file

162
00:10:52.579 --> 00:10:57.523
where you might kick these off, you know,
when the build and when the builds

163
00:10:57.523 --> 00:11:02.100
happening, just as a precaution,
like as a cleanup, kind of thing?

164
00:11:02.100 --> 00:11:03.913
&gt;&gt; Speaker 1: Yeah, I like,
it depends because, again,

165
00:11:03.913 --> 00:11:07.088
s lot of times they are also running
shell command, so your CI/CD might do it.

166
00:11:07.088 --> 00:11:10.254
I was thinking about this this morning,
which is way too late to think about this.

167
00:11:10.254 --> 00:11:14.715
I got to imagine there's got to be a test
runner that will also respect the VS code

168
00:11:14.715 --> 00:11:17.529
schema and
just let you run it on the command line.

169
00:11:17.529 --> 00:11:20.512
&gt;&gt; Speaker 2: Well, you know how,
like in Angular JSON, for

170
00:11:20.512 --> 00:11:24.256
example, you have, you know,
you know, all the NPM run.

171
00:11:24.256 --> 00:11:28.898
Build stage, build prod, a different-
&gt;&gt; Speaker 1: Yeah.

172
00:11:28.898 --> 00:11:31.053
&gt;&gt; Speaker 2: Something like that, where
you could kick them off or something.

173
00:11:31.053 --> 00:11:35.522
&gt;&gt; Speaker 1: Yeah, and I think that this
one's obviously a little bit simpler than

174
00:11:35.522 --> 00:11:39.324
even my app, but
a version of that exists here too, right?

175
00:11:39.324 --> 00:11:44.299
&gt;&gt; Speaker 3: And
then what's your take on make.

176
00:11:44.299 --> 00:11:46.876
I mean, because you can run make from
the command line with all kinds of

177
00:11:46.876 --> 00:11:47.449
nice options.

178
00:11:47.449 --> 00:11:49.291
&gt;&gt; Speaker 2: Yeah.

179
00:11:49.291 --> 00:11:51.343
I'm okay with it.

180
00:11:51.343 --> 00:11:54.605
&gt;&gt; Speaker 1: All the go projects
I work on use make seems great.

181
00:11:54.605 --> 00:11:56.536
And you can run make from here too.

182
00:11:56.536 --> 00:11:57.249
You know what I mean?

183
00:11:57.249 --> 00:12:01.936
Like, there are things that you can do,
which I don't do, but

184
00:12:01.936 --> 00:12:05.486
I feel that I am supposed
to tell you about them.

185
00:12:05.486 --> 00:12:06.617
Can I do it from memory?

186
00:12:06.617 --> 00:12:07.719
Can I do it from memory?

187
00:12:14.377 --> 00:12:19.336
So I don't do this one because I again,
not because it's bad,

188
00:12:19.336 --> 00:12:23.931
not because you shouldn't,
just because I am unable to.

189
00:12:23.931 --> 00:12:26.030
To match braces.

190
00:12:26.030 --> 00:12:30.914
My this one will then run
the task automatically.

191
00:12:30.914 --> 00:12:34.069
When you open the project.

192
00:12:34.069 --> 00:12:38.720
You either definitely want that or
you definitely don't.

193
00:12:38.720 --> 00:12:39.758
I don't trust that.

194
00:12:39.758 --> 00:12:44.654
My ports will be free personally.

195
00:12:44.654 --> 00:12:45.324
Fun fact.

196
00:12:45.324 --> 00:12:49.268
Just let's get this is like a total aside.

197
00:12:49.268 --> 00:12:52.070
But on the topic VS code,
maybe it's either VS code,

198
00:12:52.070 --> 00:12:56.618
one of my extensions is running on port
5000 so if you run something on port 5000

199
00:12:56.618 --> 00:13:00.979
it's not working blame VS code or one of
my extensions, I'm not totally sure, but

200
00:13:00.979 --> 00:13:05.259
I'm pretty sure VS code is like something
In VS Code is running on port 5000.

201
00:13:05.259 --> 00:13:11.589
So if you just arbitrarily pick that
port and something doesn't work,

202
00:13:11.589 --> 00:13:16.348
that's just a pro tip that
has ruined a day of my life.

203
00:13:16.348 --> 00:13:16.931
Cool, yeah.

204
00:13:16.931 --> 00:13:20.314
And I have never used this one, but the
idea that you can actually provide options

205
00:13:20.314 --> 00:13:23.318
and stuff like that, again,
there's some ergonomic benefits that.

206
00:13:23.318 --> 00:13:28.562
You could also build a very nice command
line tool if they don't provide the flag,

207
00:13:28.562 --> 00:13:29.784
show the options.

208
00:13:29.784 --> 00:13:34.352
There's stuff like ink and commander and
a whole bunch of other stuff.

209
00:13:34.352 --> 00:13:35.494
It's an option.

210
00:13:35.494 --> 00:13:38.157
I use it almost always for electron apps.

211
00:13:38.157 --> 00:13:42.341
And then as I go down this,
a lot of times for temporal workflows.

212
00:13:42.341 --> 00:13:43.645
And as I go down the.

213
00:13:43.645 --> 00:13:44.559
The list of complexity.

214
00:13:44.559 --> 00:13:48.904
I am less and less likely,
especially cuz if I use a boilerplate or

215
00:13:48.904 --> 00:13:51.827
rest in peace create react app or
whatever,

216
00:13:51.827 --> 00:13:56.891
you're getting a bunch of mpm scripts,
you know what they are right there.

217
00:13:56.891 --> 00:14:00.783
There are options here, but
I think that the ability to chain them,

218
00:14:00.783 --> 00:14:03.800
have the dependence,
if you did wanna run it again.

219
00:14:03.800 --> 00:14:08.045
When you have them in there to
assign Keybinds or even just again,

220
00:14:08.045 --> 00:14:12.535
this run task, these are the ones I
set up just to be able to like vary.

221
00:14:12.535 --> 00:14:18.204
You can pin these to whichever
one you really want in this case.

222
00:14:18.204 --> 00:14:21.349
And put it to a command so
on and so forth.

223
00:14:21.349 --> 00:14:26.222
I could see a world where
the ergonomics are good, right?

224
00:14:26.222 --> 00:14:30.491
Especially if there are a lot of options,
so on and so forth,

225
00:14:30.491 --> 00:14:35.206
and you want to create a better
experience, it is there for you do?

