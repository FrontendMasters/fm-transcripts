WEBVTT

1
00:00:00.032 --> 00:00:04.048
&gt;&gt; Steve Kinney: So some other major
areas, just as we take a tour of

2
00:00:04.048 --> 00:00:08.831
the editor itself,
is we do have this fun source control tab

3
00:00:08.831 --> 00:00:13.899
where you get a little bit of a GUI,
graphical user interface,

4
00:00:13.899 --> 00:00:18.610
for those of you keeping track at home,
for managing Git.

5
00:00:18.610 --> 00:00:23.622
I really like this,
the other option that you can use, too,

6
00:00:23.622 --> 00:00:28.550
is that GitHub Desktop is also
another graphical version.

7
00:00:28.550 --> 00:00:32.885
I personally tend to use this
not because it is better, but

8
00:00:32.885 --> 00:00:36.700
because I've used it for
as long as I can remember.

9
00:00:36.700 --> 00:00:38.543
But there are options.

10
00:00:38.543 --> 00:00:42.840
So the nice part about this is,
some of you, not me,

11
00:00:42.840 --> 00:00:47.259
have really good Git hygiene,
and I'm proud of you.

12
00:00:47.259 --> 00:00:50.485
And you make very small
commits the whole way through.

13
00:00:50.485 --> 00:00:55.133
Some of you like to see the world burn and
just do the fix stuff commit, or

14
00:00:55.133 --> 00:00:56.308
the make it work.

15
00:00:56.308 --> 00:01:02.506
Or I hate programming commit
put in at 2 AM, I've been you.

16
00:01:02.506 --> 00:01:08.027
Where I aspire to be, knowing that I will
never be that perfect Git practitioner,

17
00:01:08.027 --> 00:01:09.627
where I aspire to be is,

18
00:01:09.627 --> 00:01:15.467
after I've realized that I've gone too far
down the rabbit hole with making a commit,

19
00:01:15.467 --> 00:01:20.208
trying to at least do several small
commits out of my big mess, right?

20
00:01:20.208 --> 00:01:22.175
Which, can you do from the command line?

21
00:01:22.175 --> 00:01:25.011
Yes, that's a full course in and
of itself,

22
00:01:25.011 --> 00:01:27.560
try to do all that from the command line.

23
00:01:27.560 --> 00:01:32.361
If you wanna do it in VS Code, what's
cool about that is you can basically,

24
00:01:32.361 --> 00:01:36.630
as you kind of go to stage stuff,
you can see the various commits and

25
00:01:36.630 --> 00:01:38.557
stuff that you've changed.

26
00:01:38.557 --> 00:01:42.883
And choose to stage various
different parts, right?

27
00:01:42.883 --> 00:01:47.886
So here you can see some of the things
that I've changed in this file,

28
00:01:47.886 --> 00:01:51.438
in this case, the add async,
so on and so forth.

29
00:01:51.438 --> 00:01:53.939
You can also go ahead and open a file,

30
00:01:53.939 --> 00:01:58.967
discard the changes in a particular file,
stage the changes in one file.

31
00:01:58.967 --> 00:02:03.947
So if I, let's say I made a change,
I honestly did what should have been

32
00:02:03.947 --> 00:02:07.351
seven commits,
I can go check in a file at a time.

33
00:02:07.351 --> 00:02:13.880
I could say hey, actually, I only want
a few of these lines, so on and so forth.

34
00:02:13.880 --> 00:02:18.155
And kind of reverse engineer being
granular with it when I wasn't in

35
00:02:18.155 --> 00:02:19.662
the beginning, yeah?

36
00:02:19.662 --> 00:02:23.081
&gt;&gt; Speaker 2: I don't know if
you covered this already, but

37
00:02:23.081 --> 00:02:28.620
how did you get it to be not split view
in the Git diff, the difference file?

38
00:02:28.620 --> 00:02:31.889
I think the default is like, it gives you-
&gt;&gt; Steve Kinney: Yeah, no, no,

39
00:02:31.889 --> 00:02:34.322
like every other time-
&gt;&gt; Speaker 3: You can click on the file,

40
00:02:34.322 --> 00:02:36.659
though, in the changes bucket.

41
00:02:36.659 --> 00:02:37.883
&gt;&gt; Steve Kinney: What's that?

42
00:02:37.883 --> 00:02:40.686
&gt;&gt; Speaker 3: You have to click on
the file to get the split view.

43
00:02:40.686 --> 00:02:41.250
&gt;&gt; Speaker 2: I see.

44
00:02:41.250 --> 00:02:42.439
&gt;&gt; Steve Kinney: Yeah,
this is when I'm in the file.

45
00:02:42.439 --> 00:02:44.782
&gt;&gt; Speaker 3: It's there.

46
00:02:44.782 --> 00:02:48.144
So they have 1, 2, 3, 4,
5 on your line numbers there,

47
00:02:48.144 --> 00:02:49.785
spread that out to the right.

48
00:02:53.461 --> 00:02:57.905
&gt;&gt; Steve Kinney: No, I think it's just
a simple enough one that it compacted it

49
00:02:57.905 --> 00:02:58.425
down.

50
00:02:58.425 --> 00:03:00.889
I think if I had a bigger file,
it would have been split.

51
00:03:00.889 --> 00:03:05.123
I think this one's so dumb and simple.

52
00:03:05.123 --> 00:03:09.015
But again, I can't split it here, But
here are the two different line numbers.

53
00:03:09.015 --> 00:03:13.678
But the important thing that I can do is,
you can see on any given one of these

54
00:03:13.678 --> 00:03:19.031
diffs, on a bigger file, you will see two
of them side-by-side, or more changes.

55
00:03:19.031 --> 00:03:22.224
I can either revert just these two lines,
or let's say I made two

56
00:03:22.224 --> 00:03:25.850
different important changes that
should have been different commits.

57
00:03:25.850 --> 00:03:30.640
I can stage, obviously,
I wouldn't want to do it in this case, but

58
00:03:30.640 --> 00:03:36.203
I could stage just this line, and
I can commit them kinda separately, right?

59
00:03:36.203 --> 00:03:40.336
So if I made a big mess,
I can kinda go in there visually, and

60
00:03:40.336 --> 00:03:42.842
you can do something very similar.

61
00:03:42.842 --> 00:03:49.414
Not that we're talking too much about,
no, not comma, I didn't want comma.

62
00:03:49.414 --> 00:03:53.388
In the GitHub editor as well, where you
can select and deselect some lines.

63
00:03:53.388 --> 00:03:55.602
And break apart the commit, and

64
00:03:55.602 --> 00:04:00.032
pretend you were a better person
than you actually are, right?

65
00:04:00.032 --> 00:04:03.137
And what you actually want to stage and
not stage.

66
00:04:03.137 --> 00:04:08.516
As you can see,
there's other stuff you can do here.

67
00:04:08.516 --> 00:04:09.451
You can amend to the last commit.

68
00:04:09.451 --> 00:04:16.111
If it's not dirty, in this case, so
if I go ahead and I reset all my changes.

69
00:04:16.111 --> 00:04:24.158
So I can do effectively what is not
dissimilar from a git reset hard.

70
00:04:24.158 --> 00:04:26.541
And I can do it for all the files,
I can do it for one of the files, right?

71
00:04:26.541 --> 00:04:28.750
So on and so forth.

72
00:04:28.750 --> 00:04:33.799
But you can kind of see that,
here if we discard all the files,

73
00:04:33.799 --> 00:04:40.035
and I can go ahead and do a rebase, or
merge in a branch, or make a new branch.

74
00:04:40.035 --> 00:04:44.252
Or if I have the Github one,
open a pull request from here as well.

75
00:04:44.252 --> 00:04:47.270
And you can do a bunch of
the source control stuff in here.

76
00:04:47.270 --> 00:04:51.825
I use a mix of both a graphical one and
the command line, right?

77
00:04:51.825 --> 00:04:54.859
Whatever's easier,
I'm not religious in either direction.

78
00:04:54.859 --> 00:04:57.226
Sometimes it's easier
to commit line by line.

79
00:04:57.226 --> 00:05:04.695
Sometimes I know what I did and
don't tell anyone, git add dot, it's good.

80
00:05:04.695 --> 00:05:06.804
And I'll stage them together, yeah?

81
00:05:06.804 --> 00:05:08.470
&gt;&gt; Speaker 4: I think someone mentioned,

82
00:05:08.470 --> 00:05:13.133
Chet mentioned the little icons in the
upper right corner can do the splitting.

83
00:05:17.179 --> 00:05:23.393
&gt;&gt; Steve Kinney: Yeah,
let's make a change, there it is.

84
00:05:23.393 --> 00:05:25.251
Normally, that is how it looks.

85
00:05:25.251 --> 00:05:29.924
I think it's possibly cuz I
am between the font size, so

86
00:05:29.924 --> 00:05:33.510
we can all see I'm very zoomed in, right?

87
00:05:33.510 --> 00:05:36.143
So yeah, you can also check out there,
but yeah,

88
00:05:36.143 --> 00:05:38.601
this tab will have most
of the things you need.

89
00:05:38.601 --> 00:05:44.448
These little fun stars
over here will also,

90
00:05:44.448 --> 00:05:49.662
so I can stage this, and it will use AI to

91
00:05:49.662 --> 00:05:54.576
come up with a commit message for me.

92
00:05:54.576 --> 00:05:56.511
Honestly, until I was preparing for
this course,

93
00:05:56.511 --> 00:05:58.948
I never even bothered to click that
thing to find out what it did.

94
00:05:58.948 --> 00:06:01.879
There's something very special about
preparing for a workshop where you

95
00:06:01.879 --> 00:06:04.581
start clicking on all sorts of things
you never thought to click on.

96
00:06:04.581 --> 00:06:08.518
And I found out that stars mean AI.

97
00:06:08.518 --> 00:06:13.103
So, yeah, I think I just made the earth
one one-hundredth of a degree

98
00:06:13.103 --> 00:06:15.449
hotter every time I click that one.

99
00:06:15.449 --> 00:06:21.371
So there's that, but it wasn't bad.

100
00:06:21.371 --> 00:06:24.542
Cool, cool, cool,
I'm trying to think what else.

101
00:06:24.542 --> 00:06:28.635
Kind of related to,
if I have multiple languages,

102
00:06:28.635 --> 00:06:34.835
you might have multiple repos in a single
project because you hate yourself.

103
00:06:34.835 --> 00:06:41.332
You can see the multiple
repositories that you have.

104
00:06:41.332 --> 00:06:46.771
If you have that,
it's cuz somebody else did that to you,

105
00:06:46.771 --> 00:06:49.436
I know, it's fine, cool.

106
00:06:49.436 --> 00:06:51.618
So what else do we have
about the source URL?

107
00:06:51.618 --> 00:06:54.100
Like I said, yeah,
one could go much deeper,

108
00:06:54.100 --> 00:06:57.293
if I'm trying to go to most of
the things that we care about.

109
00:06:57.293 --> 00:07:01.860
You can also see you've got to get history
here as well that you can kind of take

110
00:07:01.860 --> 00:07:04.400
a look at and
do all sorts of fun stuff with.

111
00:07:04.400 --> 00:07:09.589
This is obviously not a particularly like
it's me adding an extension example,

112
00:07:09.589 --> 00:07:10.820
so on and so forth.

113
00:07:10.820 --> 00:07:17.258
There is a library called GitLens,
which will make you a bad person.

114
00:07:17.258 --> 00:07:18.609
Do I have it installed right now?

115
00:07:18.609 --> 00:07:23.252
Let's see, I did uninstall a lot of stuff.

116
00:07:26.908 --> 00:07:31.090
&gt;&gt; Steve Kinney: So GitLens,
again, it's an incredibly

117
00:07:31.090 --> 00:07:35.278
powerful extension that is really good.

118
00:07:35.278 --> 00:07:40.589
But it comes with one warning label on it,
which is, it does a lot of things.

119
00:07:40.589 --> 00:07:43.244
One of the things that you'll
see is down at the bottom.

120
00:07:43.244 --> 00:07:48.656
It puts a git blame in there, which is
fine when you're working by yourself,

121
00:07:48.656 --> 00:07:53.422
but will turn you into a bad person
when working with a team, right?

122
00:07:53.422 --> 00:07:54.855
There's something about seeing,

123
00:07:54.855 --> 00:07:57.204
cuz sometimes that's just
the person who moved the file.

124
00:07:57.204 --> 00:07:59.894
They didn't write that code,
they just moved the file, and

125
00:07:59.894 --> 00:08:01.434
now they're forever get blamed.

126
00:08:01.434 --> 00:08:04.142
But it doesn't always
awake the best version of

127
00:08:04.142 --> 00:08:07.594
myself when I'm looking at
something a little bit gnarly and

128
00:08:07.594 --> 00:08:10.655
I can see one of my coworkers'
names on the git blame.

129
00:08:10.655 --> 00:08:15.551
I don't like who I become, but I would say
this is one that whenever you see anyone

130
00:08:15.551 --> 00:08:20.608
else using VS Code, you usually see that
at the bottom, cuz everyone else uses it.

131
00:08:20.608 --> 00:08:24.749
So you can decide whether or
not that's a path you wanna go down to.

132
00:08:24.749 --> 00:08:29.985
As you can see, I actively uninstalled it,
cuz I'm also the manager.

133
00:08:29.985 --> 00:08:32.093
And again,
it doesn't make me a good person.

134
00:08:32.093 --> 00:08:35.235
And I need to not be able to
git blame people that easily.

