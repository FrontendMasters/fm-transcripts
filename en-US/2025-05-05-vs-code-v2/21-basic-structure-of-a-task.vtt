WEBVTT

1
00:00:00.000 --> 00:00:01.179
&gt;&gt; Steve Kinney: All right, so tasks.

2
00:00:01.179 --> 00:00:03.322
Tasks are a way.

3
00:00:03.322 --> 00:00:06.478
How do I explain this without
using the word in the definition?

4
00:00:06.478 --> 00:00:11.621
Tasks are a way to run tasks,
any of the repeated things, if you find

5
00:00:11.621 --> 00:00:17.951
yourself going to the command line to do
thing, maybe that should be task, right?

6
00:00:17.951 --> 00:00:22.451
Thing could be NPM run dev.

7
00:00:22.451 --> 00:00:25.219
Thing could be NPM run build.

8
00:00:25.219 --> 00:00:29.390
Thing could be NPM start,
NPM lint, whatever,

9
00:00:29.390 --> 00:00:34.089
it could be some other like
Shell command that you run.

10
00:00:34.089 --> 00:00:37.747
It could be, I don't know, rails.

11
00:00:37.747 --> 00:00:39.906
What do you start rails
out with these days?

12
00:00:39.906 --> 00:00:43.606
&gt;&gt; Speaker 2: Well, there's rails s or
docker compose up or,

13
00:00:43.606 --> 00:00:44.389
&gt;&gt; Steve Kinney: Either one, right?

14
00:00:44.389 --> 00:00:47.556
We'll deal with the Docker Compose
one in a second.

15
00:00:47.556 --> 00:00:51.241
But, yeah, Rails s,
it used to be a Rails developer, I swear.

16
00:00:51.241 --> 00:00:54.846
Those could all be tasks.

17
00:00:54.846 --> 00:00:58.478
So we're gonna look a little bit at tasks.

18
00:00:58.478 --> 00:01:03.259
And kind of look at the anatomy and
then we'll do a few of them.

19
00:01:03.259 --> 00:01:07.235
But like, it is one of those things,
if I just start writing them,

20
00:01:07.235 --> 00:01:11.581
I think it'll be more confusing than
if we talk about a little bit first.

21
00:01:11.581 --> 00:01:18.889
This is a task, like everything
else today, hit JSON, right?

22
00:01:18.889 --> 00:01:21.192
With a little bit of
regex at some point too.

23
00:01:21.192 --> 00:01:24.421
Don't worry, everything in this
course is really just Jason and

24
00:01:24.421 --> 00:01:25.779
regex at the end of the day.

25
00:01:25.779 --> 00:01:28.220
Let's talk about the ones that are easy.

26
00:01:28.220 --> 00:01:31.061
Label, that is the label.

27
00:01:34.778 --> 00:01:36.784
&gt;&gt; Steve Kinney: Command,
that is what you wanna run.

28
00:01:36.784 --> 00:01:38.892
Now there's two different ways to do this.

29
00:01:38.892 --> 00:01:41.418
But we're starting with the easiest
one is run a shell command.

30
00:01:41.418 --> 00:01:44.466
What do you think this command does?

31
00:01:44.466 --> 00:01:46.007
It runs that.

32
00:01:46.007 --> 00:01:51.166
Problem Matcher is a regex
that will basically

33
00:01:51.166 --> 00:01:56.599
scan the standard out or
standard error output.

34
00:01:56.599 --> 00:02:01.371
And then if based on, there are some
built-in ones, TSC is, in this case,

35
00:02:01.371 --> 00:02:06.294
the typescript compiler, right, that
knows the output of the task, here for

36
00:02:06.294 --> 00:02:09.444
pilots, one for EsLint,
there's a few others.

37
00:02:09.444 --> 00:02:13.346
Which is basically, if it says,
error in this file,

38
00:02:13.346 --> 00:02:18.141
line this column that, it is simply
a regex that says the VS code.

39
00:02:18.141 --> 00:02:23.034
Hey, show a little warning sign in
the editor in this file, unline that.

40
00:02:23.034 --> 00:02:26.340
And for every given tool,
the output's gonna be a little different,

41
00:02:26.340 --> 00:02:28.309
so you have a different problem matcher.

42
00:02:28.309 --> 00:02:31.906
But for the common ones,
like the typescript compiler, like Jest,

43
00:02:31.906 --> 00:02:34.148
like ESLint, there are pre-baked ones.

44
00:02:34.148 --> 00:02:38.944
Some of them exist in extensions,
some of them are just in there by default.

45
00:02:38.944 --> 00:02:42.892
I think at one point or another,
I put, built-in problem matchers,

46
00:02:42.892 --> 00:02:43.783
I did the thing.

47
00:02:43.783 --> 00:02:46.213
I predicted the question in advance.

48
00:02:46.213 --> 00:02:50.893
These are the built-in ones,
other ones can come from exceptions, so

49
00:02:50.893 --> 00:02:52.531
ESLint, TSC, JSHint.

50
00:02:52.531 --> 00:02:57.400
Like I said, if you have the JEST
extension, I think this is a JeSt one,

51
00:02:57.400 --> 00:02:58.708
so on and so forth.

52
00:02:58.708 --> 00:03:02.430
And then some bonus metadata.

53
00:03:02.430 --> 00:03:03.362
Is this a build task?

54
00:03:03.362 --> 00:03:06.037
In this case,
is it the default build task?

55
00:03:06.037 --> 00:03:10.228
So if we wanna say, run the build task,
this is what it is, right?

56
00:03:10.228 --> 00:03:12.926
Could you go to the command line and
type NPM Run build?

57
00:03:12.926 --> 00:03:15.717
Yes, you could, right?

58
00:03:15.717 --> 00:03:17.269
But the nice part here is,

59
00:03:17.269 --> 00:03:21.800
you can do a bunch of really clever
things that we'll talk about in a second.

60
00:03:21.800 --> 00:03:25.323
We'll have some examples apps where you
can play around this if you want, but to

61
00:03:25.323 --> 00:03:28.952
be clear, most of the real practical part
of this is bespoke to your application,

62
00:03:28.952 --> 00:03:30.713
right, whatever script that you run.

63
00:03:30.713 --> 00:03:35.436
But the really cool thing about this is,
one thing that i hate the most in

64
00:03:35.436 --> 00:03:39.451
the world is, when I have to
open up multiple terminal tabs,

65
00:03:39.451 --> 00:03:43.574
don't talk to me about Tmux or
Screen, I am aware they exist.

66
00:03:43.574 --> 00:03:47.077
We'll put this out in the background,
but if I have to do multiple things and

67
00:03:47.077 --> 00:03:50.418
multiple terminals to start up webpack,
to start up my Express server,

68
00:03:50.418 --> 00:03:51.919
to do this other thing, right?

69
00:03:51.919 --> 00:03:54.115
Like I don't want to, yeah.

70
00:03:54.115 --> 00:03:58.568
&gt;&gt; Speaker 3: For the tasks,
are they local to your workspace only?

71
00:03:58.568 --> 00:04:00.772
&gt;&gt; Steve Kinney: Did you check
them into version control?

72
00:04:00.772 --> 00:04:03.224
&gt;&gt; Speaker 3: Yeah,
&gt;&gt; Steve Kinney: So, yeah, it's up to you.

73
00:04:03.224 --> 00:04:08.077
And because it's a different file than
that settings.json, you could choose to

74
00:04:08.077 --> 00:04:13.227
not check in settings.json, but you almost
always wanna check in the task subjects.

75
00:04:13.227 --> 00:04:16.201
&gt;&gt; Speaker 3: Yeah, cuz it wouldn't be
kind of like you're hoarding something

76
00:04:16.201 --> 00:04:17.579
that's,-
&gt;&gt; Steve Kinney: All the productivity.

77
00:04:17.579 --> 00:04:20.162
Now it depends, do you want to
appear faster than your peers?

78
00:04:20.162 --> 00:04:23.303
Do not check it into version control.

79
00:04:23.303 --> 00:04:24.745
Do you want to share the wealth?

80
00:04:24.745 --> 00:04:25.936
Check it into version control?

81
00:04:25.936 --> 00:04:31.650
It depends on, like,
how toxic you want to be, right?

82
00:04:31.650 --> 00:04:35.056
And so,
at temporal if you wanna run a workflow,

83
00:04:35.056 --> 00:04:39.640
you got to spin up the workflow,
and then some number of workers.

84
00:04:39.640 --> 00:04:43.881
And I don't wanna do that across multiple
tabs, I don't wanna screen or tmux it.

85
00:04:43.881 --> 00:04:47.632
I don't wanna play weird things
where I do Command Z or whatever.

86
00:04:47.632 --> 00:04:49.843
I don't wanna do it or control, whatever.

87
00:04:49.843 --> 00:04:51.384
I don't wanna do any of that.

88
00:04:51.384 --> 00:04:54.715
And so, what I can do is set
up a bunch of these tasks.

89
00:04:54.715 --> 00:04:57.981
Let's just look at some other ones and
then we'll play around with it.

90
00:04:57.981 --> 00:05:01.886
Cuz I think,
talking about it first is actually better.

91
00:05:01.886 --> 00:05:03.874
This is a simple shell task.

92
00:05:03.874 --> 00:05:06.896
There are process ones where it's like,

93
00:05:06.896 --> 00:05:11.826
you don't have access to do whatever
you want in the shell, right?

94
00:05:11.826 --> 00:05:15.621
Safer if you can get away with it,
obviously more flexible.

95
00:05:15.621 --> 00:05:17.850
This one will actually just run Node.

96
00:05:17.850 --> 00:05:22.778
So there's no ability to grab environment
variables that could accidentally be

97
00:05:22.778 --> 00:05:24.883
your open open AI key, whatever.

98
00:05:24.883 --> 00:05:28.877
This is a little more constrained one,
and you can see, there's the command,

99
00:05:28.877 --> 00:05:30.616
there are the arguments, right?

100
00:05:30.616 --> 00:05:33.557
When you run this task,
what's gonna happen?

101
00:05:33.557 --> 00:05:36.790
It's gonna run node app.js, right?

102
00:05:36.790 --> 00:05:39.803
And you could put other
things in here like,

103
00:05:39.803 --> 00:05:43.559
--inspect breakpoints,
inspect brk, whatever.

104
00:05:43.559 --> 00:05:47.434
You can put in whatever command line
tools, you can set environment variables.

105
00:05:47.434 --> 00:05:51.847
So if you want to run it under
production versus under test.

106
00:05:51.847 --> 00:05:54.277
You can set up all those things so

107
00:05:54.277 --> 00:05:58.336
then you can hit the command palette and
call it a day.

108
00:05:58.336 --> 00:06:02.706
And I guess if you use gulpogrunt, there
are some of those, I can't speak to them,

109
00:06:02.706 --> 00:06:03.649
so that's fine.

