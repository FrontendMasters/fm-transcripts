WEBVTT

1
00:00:00.240 --> 00:00:04.059
&gt;&gt; Mike North: We want to identify kind of
the lowest level concept that we can start

2
00:00:04.059 --> 00:00:05.360
to tease out first.

3
00:00:05.360 --> 00:00:09.843
Now, if we weren't able to successfully
do this, we could manage, but

4
00:00:09.843 --> 00:00:15.000
it involves a little bit of creation of
temporary packages to solve some problems.

5
00:00:15.000 --> 00:00:17.629
If you start refactoring in the middle,

6
00:00:17.629 --> 00:00:22.886
the ideal place to start is your lowest
level modules that many things depend on,

7
00:00:22.886 --> 00:00:26.080
but they don't depend on
much of anything else.

8
00:00:26.080 --> 00:00:28.975
So if you can identify that grouping,

9
00:00:28.975 --> 00:00:33.779
that's a great place to start
in our project, that is Models.

10
00:00:33.779 --> 00:00:38.609
So if we look at the import statements for
models, well, here's there's little

11
00:00:38.609 --> 00:00:42.957
entanglement within models, and
over here we've got no dependencies.

12
00:00:42.957 --> 00:00:45.370
So just look at the import statements.

13
00:00:45.370 --> 00:00:47.770
That's really what you
want to pay attention to.

14
00:00:47.770 --> 00:00:49.890
So this is a good candidate for
us to factor out.

15
00:00:49.890 --> 00:00:54.160
We should be able to bring this
out into its own package and and

16
00:00:54.160 --> 00:00:59.780
then introduce a dependency between
the UI package and the Models package.

17
00:00:59.780 --> 00:01:02.990
And we should be able to
sort of come back up for

18
00:01:02.990 --> 00:01:07.620
error, run our build lint test and
see that it all works.

19
00:01:07.620 --> 00:01:12.180
But we now have multiple
packages in our monorepo.

20
00:01:12.180 --> 00:01:14.660
So let's get started.

21
00:01:14.660 --> 00:01:22.250
So the first thing we're gonna do is
we want to make some directories.

22
00:01:22.250 --> 00:01:28.495
So we're gonna say mkdir -p
packages/models/source and

23
00:01:28.495 --> 00:01:32.530
that's gonna be our source code.

24
00:01:32.530 --> 00:01:36.580
We're going to create a tests
folder as well for the tests,

25
00:01:36.580 --> 00:01:40.225
because if you look closely,
we have a test folder and

26
00:01:40.225 --> 00:01:45.170
conveniently we have models and
server and little trivial test in each.

27
00:01:46.780 --> 00:01:48.860
So it's pretty clear what
we'll need to move out.

28
00:01:48.860 --> 00:01:52.668
But this is the part I'm making easy here
that you'll have to work pretty hard for

29
00:01:52.668 --> 00:01:55.980
leading into a monorepo conversion
if this is what you're doing.

30
00:01:55.980 --> 00:01:59.161
So let's move the relevant
files into the new package and

31
00:01:59.161 --> 00:02:01.420
you could just drag and drop if you want.

32
00:02:01.420 --> 00:02:04.739
I'm going to do it in the cli, but
we'll open the relevant things so

33
00:02:04.739 --> 00:02:06.380
that we can see stuff disappear.

34
00:02:07.500 --> 00:02:13.660
So we're gonna say mv
packages/ui/source/models/*.

35
00:02:14.730 --> 00:02:23.450
So everything in the Source Models folder
goes to Packages, Models, source enter.

36
00:02:23.450 --> 00:02:26.090
Great, we'll do something similar.

37
00:02:26.090 --> 00:02:29.610
But here we're going to say tests.

38
00:02:29.610 --> 00:02:31.690
Basically just replace source with tests.

39
00:02:33.850 --> 00:02:35.370
We saw some files disappear.

40
00:02:35.370 --> 00:02:36.970
These are now empty folders.

41
00:02:38.010 --> 00:02:39.210
We can go ahead and delete them.

42
00:02:43.460 --> 00:02:46.972
If we look at our new Models
folder that we created here,

43
00:02:46.972 --> 00:02:50.580
we can see that we've
successfully moved the code over.

44
00:02:52.420 --> 00:02:57.780
Now, I got an interesting question
during the break about Git renaming.

45
00:02:58.900 --> 00:03:00.740
You can see that here.

46
00:03:00.740 --> 00:03:02.420
I haven't staged anything yet.

47
00:03:04.340 --> 00:03:08.119
I'm gonna explain what Git sees right
now just so you all are, cuz preserving

48
00:03:08.119 --> 00:03:12.030
that Git history is important,
I want you all to understand this.

49
00:03:12.030 --> 00:03:13.390
We haven't staged anything.

50
00:03:13.390 --> 00:03:15.630
So Git's seeing two things.

51
00:03:15.630 --> 00:03:21.230
It is seeing that files that were tracked
up until this point have disappeared.

52
00:03:21.230 --> 00:03:22.750
They have been deleted.

53
00:03:22.750 --> 00:03:26.750
It also sees that there are some
files that are untracked.

54
00:03:27.790 --> 00:03:30.310
When Git sees a new file
that is not tracked yet,

55
00:03:30.310 --> 00:03:33.150
it doesn't really have any
data about this file yet.

56
00:03:33.150 --> 00:03:33.790
It hasn't.

57
00:03:35.770 --> 00:03:38.050
There's no checksum on it.

58
00:03:38.050 --> 00:03:41.610
There are no git blobs for
this file in your git folder.

59
00:03:42.810 --> 00:03:46.330
It's the moment when you say,
I want to stage these changes.

60
00:03:46.330 --> 00:03:50.410
That's where we see the R that
represents the rename here.

61
00:03:50.410 --> 00:03:55.610
So don't panic if you see untracked,
just do git add and stage them.

62
00:03:55.610 --> 00:04:00.046
And that's really where you're gonna see,
is this being regarded as a rename or

63
00:04:00.046 --> 00:04:03.120
is this being regarded as a deletion and
removal?

64
00:04:03.120 --> 00:04:09.280
We need one more file in our
source folder, index ts.

65
00:04:09.280 --> 00:04:13.009
And what we're going to do here is say,

66
00:04:13.009 --> 00:04:18.660
export from seed packet collection and
seed packet model,

67
00:04:18.660 --> 00:04:23.760
Seed packet collection model and
seed packet model.

68
00:04:24.960 --> 00:04:27.789
Just so
we don't have to mess with this later,

69
00:04:27.789 --> 00:04:30.920
make sure to add the JS
extension to the end of this.

70
00:04:30.920 --> 00:04:33.952
Because we're using Node Next
modules in this project,

71
00:04:33.952 --> 00:04:37.929
we're not getting a warning about it yet
because there is no package JSON,

72
00:04:37.929 --> 00:04:41.800
there's no tsconfig, there's no basis for
checking these files yet.

73
00:04:41.800 --> 00:04:44.223
But if we do this and hit save,
we'll be done with it and

74
00:04:44.223 --> 00:04:46.680
we don't have to come back here.

75
00:04:46.680 --> 00:04:49.160
Now let me talk a little
bit more about index ts.

76
00:04:49.160 --> 00:04:50.440
Like, why are we creating this?

77
00:04:50.440 --> 00:04:55.422
The way we're structuring
this file is preparing us for

78
00:04:55.422 --> 00:05:00.510
a world where when you're
importing from this library,

79
00:05:00.510 --> 00:05:06.140
you can do something like import
something from seeds models.

80
00:05:08.140 --> 00:05:14.583
This is a nice way to have
a deliberately crafted entry point for

81
00:05:14.583 --> 00:05:20.230
this library as opposed
to something like this.

82
00:05:20.230 --> 00:05:22.995
Like if from the outside
you're doing this,

83
00:05:22.995 --> 00:05:26.560
you're kind of exposing all of
the guts of your library and

84
00:05:26.560 --> 00:05:30.390
it becomes a little bit difficult for
you to create things.

85
00:05:30.390 --> 00:05:34.630
Or like, maybe you have files in here
that are kind of just a means to an end.

86
00:05:34.630 --> 00:05:38.050
They export things because
internally you need to be able to,

87
00:05:38.050 --> 00:05:42.870
like, work with, I don't know, some little
conversion function or whatever it is.

88
00:05:42.870 --> 00:05:47.460
But like, you don't want your
users to be grabbing that.

89
00:05:47.460 --> 00:05:52.685
So by saying we have a deliberately
created entry point here and

90
00:05:52.685 --> 00:05:55.452
we have these explicit exports.

91
00:05:55.452 --> 00:05:58.615
You could expose everything,
you could expose just a couple things,

92
00:05:58.615 --> 00:06:01.300
tou could rename things
as you're exporting them.

93
00:06:01.300 --> 00:06:02.339
This gives you.

94
00:06:02.339 --> 00:06:08.639
It's almost like a little adapter between
the way your modules are really named and

95
00:06:08.639 --> 00:06:12.509
the way symbols are exported
in your source code and

96
00:06:12.509 --> 00:06:18.269
the carefully curated public API surface,
if you want to think about that,

97
00:06:18.269 --> 00:06:23.950
for people who use this library
that we're about to build here.

98
00:06:23.950 --> 00:06:28.367
So that's why I favor monorepo packages or

99
00:06:28.367 --> 00:06:34.013
libraries in general that
have one entry point instead

100
00:06:34.013 --> 00:06:40.736
of exposing their whole path
structure to the outside world.

101
00:06:40.736 --> 00:06:43.386
Sorry.
There is one path thing we need to

102
00:06:43.386 --> 00:06:46.330
fix that's in this tests file.

103
00:06:46.330 --> 00:06:51.005
And this just has to do with like
there was an extra layer of depth in

104
00:06:51.005 --> 00:06:54.250
our folder structure
in the original thing.

105
00:06:54.250 --> 00:06:58.364
And so just delete one of the /.., and

106
00:06:58.364 --> 00:07:04.230
this will, when we do our build,
this will work.

107
00:07:04.230 --> 00:07:06.230
We'll come back and
make sure that it works.

108
00:07:06.230 --> 00:07:07.910
Cool, all right, we can save this.

109
00:07:07.910 --> 00:07:10.070
We can save this, save everything.

110
00:07:10.070 --> 00:07:11.590
Close it.

111
00:07:11.590 --> 00:07:14.390
But this isn't a package yet
because it doesn't have a package JSON.

112
00:07:14.390 --> 00:07:15.350
Let's change that.

113
00:07:17.750 --> 00:07:25.070
This is going to start really
simple name seeds models again.

114
00:07:25.070 --> 00:07:27.670
Leaning into that NPM scope idea.

115
00:07:27.670 --> 00:07:28.470
Private.

116
00:07:28.470 --> 00:07:29.030
True.

117
00:07:30.370 --> 00:07:31.417
We'd be missing this.

118
00:07:31.417 --> 00:07:33.334
This is just don't publish to NPM.

119
00:07:33.334 --> 00:07:36.610
We're talking about package registry.

120
00:07:36.610 --> 00:07:39.010
We'll make this 002.

121
00:07:39.010 --> 00:07:40.410
I'm just picking different numbers.

122
00:07:40.410 --> 00:07:45.265
So if we see them pop up, we kind of
know that it's real instead of 000.

123
00:07:45.265 --> 00:07:47.890
And then type module.

124
00:07:49.570 --> 00:07:51.650
All right, we're gonna save that.

125
00:07:51.650 --> 00:07:53.010
Let's look at our tests.

126
00:07:54.290 --> 00:07:55.570
All right, still not working.

127
00:07:56.990 --> 00:08:01.342
Because we have not built anything and

128
00:08:01.342 --> 00:08:05.966
we're missing some entry points here,

129
00:08:05.966 --> 00:08:11.550
some specifications for
users of this library.

130
00:08:12.590 --> 00:08:14.995
Where is the entry point for
running the JavaScript?

131
00:08:14.995 --> 00:08:18.332
Where is the entry point for the types?

132
00:08:18.332 --> 00:08:21.310
Next we're gonna wanna add
some basic dependencies.

133
00:08:21.310 --> 00:08:22.270
I'm going to.

134
00:08:24.040 --> 00:08:27.480
I'm gonna be real dirty about this.

135
00:08:27.480 --> 00:08:30.445
I'm just going to start
with the dependencies and

136
00:08:30.445 --> 00:08:33.205
dev dependencies that
were in the UI package.

137
00:08:33.205 --> 00:08:35.657
And I'm just gonna grab all of them.

138
00:08:35.657 --> 00:08:41.627
And I wanna just paste that and
trim away anything that looks like

139
00:08:41.627 --> 00:08:47.480
it's kind of UI-ish,
like it's svelte or it's CSS.

140
00:08:47.480 --> 00:08:48.970
We're going to get rid of that.

141
00:08:48.970 --> 00:08:55.070
So this is svelte,
this is TailWind, Jestdom.

142
00:08:55.070 --> 00:08:58.350
Seems like it's UI testing and
that's a svelte thing.

143
00:08:58.350 --> 00:09:00.590
Here's a svelte thing.

144
00:09:00.590 --> 00:09:03.630
These feel like they're
related to Node and Express.

145
00:09:05.470 --> 00:09:06.750
This is vitest.

146
00:09:06.750 --> 00:09:08.190
We're still going to use vitest.

147
00:09:08.190 --> 00:09:10.430
All right, get rid of auto prefixer.

148
00:09:13.070 --> 00:09:16.830
We will get to a point where we'll
identify anything here that's extraneous.

149
00:09:18.810 --> 00:09:22.090
So don't sweat being perfect about this.

150
00:09:22.090 --> 00:09:25.130
So JS DOM and Post CSS,
we can get rid of that.

151
00:09:26.170 --> 00:09:27.871
This is a svelte thing.

152
00:09:27.871 --> 00:09:28.730
This is SaSS.

153
00:09:30.010 --> 00:09:34.625
Just anything that looks like svelte or
CSS vite, we don't need that because

154
00:09:34.625 --> 00:09:39.050
we're going to just be using
the TypeScript compiler build.

155
00:09:39.050 --> 00:09:40.746
Great.
These dependencies,

156
00:09:40.746 --> 00:09:43.110
I happen to know we need all of these.

157
00:09:43.110 --> 00:09:44.950
This is to read the file, this is to log.

158
00:09:44.950 --> 00:09:46.090
This is the web server and

159
00:09:46.090 --> 00:09:48.870
this is the CORS middleware
that applies the right headers.

160
00:09:48.870 --> 00:09:54.128
So our ui,
our browser is willing to acknowledge

161
00:09:54.128 --> 00:09:58.115
the HTTP response from our backend.

162
00:09:58.115 --> 00:10:04.150
So the running theme,
we touched a package JSON.

163
00:10:04.150 --> 00:10:12.040
We must pnpmi and
let's look at our folder structure here.

164
00:10:12.040 --> 00:10:14.160
Great, so we have a node modules here.

165
00:10:15.600 --> 00:10:16.240
Look at these.

166
00:10:18.480 --> 00:10:19.560
Symbolic link.

167
00:10:19.560 --> 00:10:20.520
Symbolic link.

168
00:10:20.520 --> 00:10:21.920
Symbolic link.

169
00:10:21.920 --> 00:10:27.617
So what's happening here is, yes,
each package has a Node modules folder and

170
00:10:27.617 --> 00:10:31.674
you could reach into each one of those and
you could say,

171
00:10:31.674 --> 00:10:34.368
absolutely, we have Express here.

172
00:10:34.368 --> 00:10:38.860
But this is really pointing to
a centralized location on disk.

173
00:10:38.860 --> 00:10:44.342
These are not one copy of Express
per package in your monorepo or

174
00:10:44.342 --> 00:10:47.140
one copy of eslint or whatever.

175
00:10:47.140 --> 00:10:52.700
It is so
very important ultimately in here.

176
00:10:52.700 --> 00:10:54.220
This is the source of truth.

177
00:10:54.220 --> 00:10:56.540
Yeah, these are not symbolic links here.

178
00:10:56.540 --> 00:11:03.820
This is PNPM saying, you know,
this was actually needed in the workspace.

179
00:11:03.820 --> 00:11:05.980
Everything else just references it.

180
00:11:05.980 --> 00:11:11.900
And you may notice, like, this is
a package name and a version specifier.

181
00:11:11.900 --> 00:11:17.460
And so this is how you could end up with,
you know, multiple scanning through.

182
00:11:17.460 --> 00:11:21.380
If I can see one, like, you know,
multiple versions of a single package.

183
00:11:21.380 --> 00:11:22.380
Here we go.
Estree.

184
00:11:22.380 --> 00:11:25.940
We've got 107 and 108 for YPES estree.

185
00:11:25.940 --> 00:11:30.818
So it's totally possible to have
those both Nice flat structure,

186
00:11:30.818 --> 00:11:35.370
which, by the way,
NPM would not create for you.

187
00:11:35.370 --> 00:11:38.890
NPM would treat it as like node
modules with inner node modules.

188
00:11:38.890 --> 00:11:43.233
And it's kind of difficult
to look through that and

189
00:11:43.233 --> 00:11:47.610
grasp how much weight
is there really here.

190
00:11:47.610 --> 00:11:50.090
Okay, so great.

191
00:11:50.090 --> 00:11:53.851
So let's enter that project that, Sorry,

192
00:11:53.851 --> 00:12:00.080
the package we just created packages,
models and be disappointed.

193
00:12:00.080 --> 00:12:04.560
Why there's no build task here,
we're gonna need to add one in a sec.

194
00:12:08.640 --> 00:12:15.280
So here are the scripts
we're going to add.

195
00:12:17.040 --> 00:12:20.320
This is again in our models
package JSON folder.

196
00:12:26.420 --> 00:12:31.220
Okay, so we need a test script.

197
00:12:31.220 --> 00:12:35.197
Actually, the easy way to do this,

198
00:12:35.197 --> 00:12:42.580
let's go back to our UI package JSON and
let's grab the lint.

199
00:12:42.580 --> 00:12:44.660
All the lint and test stuff.

200
00:12:44.660 --> 00:12:46.820
I still intend to use VITest.

201
00:12:46.820 --> 00:12:51.220
It's a nice,
fast library that uses native ES modules.

202
00:12:51.220 --> 00:12:53.300
I still intend to use Eslint.

203
00:12:53.300 --> 00:12:55.260
So this is common stuff.

204
00:12:55.260 --> 00:12:56.580
So let's bring those over.

205
00:12:58.420 --> 00:13:05.685
Let's also create a build script, and

206
00:13:05.685 --> 00:13:12.740
that's gonna be tsc -p for project.

207
00:13:20.670 --> 00:13:21.950
Now, this file doesn't exist yet.

208
00:13:21.950 --> 00:13:24.670
We don't have a tsconfig yet, but we will.

209
00:13:24.670 --> 00:13:29.309
We can also add a dev script and
we're gonna do this.

210
00:13:29.309 --> 00:13:32.002
Tsc -p,

211
00:13:32.002 --> 00:13:37.390
same config file.

212
00:13:40.120 --> 00:13:48.280
And we'll say watch preserve,
watch output.

213
00:13:48.280 --> 00:13:49.640
My favorite flag.

214
00:13:49.640 --> 00:13:52.040
I can't believe this is not the default.

215
00:13:52.040 --> 00:13:56.697
I just hate cli commands
that eat the logs from

216
00:13:56.697 --> 00:14:01.400
your previous thing you were working on.

217
00:14:01.400 --> 00:14:06.288
If there are six type checking errors and
you're getting ready to fix a bunch of

218
00:14:06.288 --> 00:14:11.190
them and then you hit save and it's like
you lose track of what was I looking at?

219
00:14:11.190 --> 00:14:12.310
Where was my scroll position?

220
00:14:13.590 --> 00:14:18.356
This just continues to append
to standard out rather

221
00:14:18.356 --> 00:14:24.070
than cleaning everything and
giving you a fresh view.

222
00:14:24.070 --> 00:14:26.470
Maybe that's a matter of taste.

223
00:14:26.470 --> 00:14:29.190
So we've got build,
we've got dev, we've got lint.

224
00:14:29.190 --> 00:14:29.690
Great.

