WEBVTT

1
00:00:00.400 --> 00:00:05.104
&gt;&gt; Mike North: Next, we're going to apply
a TypeScript compiler feature called

2
00:00:05.104 --> 00:00:10.960
TypeScript Project References,
which is related to composite projects.

3
00:00:10.960 --> 00:00:14.160
And this will improve the performance
of our TypeScript builds.

4
00:00:14.160 --> 00:00:18.800
Now, in this workshop project, the builds
are fast, there's just not much code here.

5
00:00:18.800 --> 00:00:23.520
But this will make a huge difference
in a monorepo of significant size.

6
00:00:23.520 --> 00:00:25.040
And it's really easy to set up.

7
00:00:26.090 --> 00:00:28.490
So the first thing we need
to do is think about.

8
00:00:31.370 --> 00:00:34.026
We need to think a little bit
about a dependency graph and

9
00:00:34.026 --> 00:00:36.970
we need to understand
what's depending on what.

10
00:00:36.970 --> 00:00:42.149
So we will need to,
in the Models folder in the TSCONFIG

11
00:00:42.149 --> 00:00:47.214
build JSON,
because this is really a build feature,

12
00:00:47.214 --> 00:00:54.440
we're going to have to go into the
compiler options and say composite true.

13
00:00:54.440 --> 00:00:58.955
What we're doing here is we're
enabling this project to be

14
00:00:58.955 --> 00:01:04.014
compiled in a way where you can have
a piece of build information for

15
00:01:04.014 --> 00:01:08.981
this package, or really for
like TypeScript would regard this as

16
00:01:08.981 --> 00:01:14.720
a project like a TS config refers
to some collection of source code.

17
00:01:14.720 --> 00:01:19.159
Anyway, this project is going
to have a build file that can be

18
00:01:19.159 --> 00:01:24.036
stitched together with other pieces
of build information to allow

19
00:01:24.036 --> 00:01:27.100
rebuilds to happen more incrementally.

20
00:01:27.100 --> 00:01:29.020
And just remember what our baseline is.

21
00:01:29.020 --> 00:01:31.912
Yes, we are sharing some code, right,

22
00:01:31.912 --> 00:01:36.180
we're benefiting from some
consolidated compile stuff.

23
00:01:36.180 --> 00:01:39.937
Like there is one dist folder for
the models package,

24
00:01:39.937 --> 00:01:44.460
and anyone using the models package
points to that dist folder.

25
00:01:44.460 --> 00:01:49.239
But the downside here is anytime
we touch anything in a package,

26
00:01:49.239 --> 00:01:52.480
that whole package is being rebuilt.

27
00:01:52.480 --> 00:01:54.491
So this composite project and

28
00:01:54.491 --> 00:01:59.238
project references in these TSBUILD
info files, they allow even more

29
00:01:59.238 --> 00:02:04.880
incremental compiling at the module
level rather than at the package level.

30
00:02:04.880 --> 00:02:09.360
Again, your project gets big enough,
you will notice a big difference here.

31
00:02:09.360 --> 00:02:12.935
In fact, if you're not using this and
you have a sizable monorepo,

32
00:02:12.935 --> 00:02:16.440
this is absolutely the first
thing you should invest in.

33
00:02:16.440 --> 00:02:18.192
So composite true, in fact,

34
00:02:18.192 --> 00:02:23.080
we're gonna add this to all the package
JSONs of everything in our monorepo.

35
00:02:23.080 --> 00:02:27.560
Sorry, the tsconfig build JSONs,
not the package JSONs.

36
00:02:27.560 --> 00:02:31.560
So there's the server and
we'll add it to the ui.

37
00:02:31.560 --> 00:02:38.280
And just because of how vite works,
this tsconfig is what's used for build.

38
00:02:38.280 --> 00:02:39.560
And so we're going to.

39
00:02:41.150 --> 00:02:41.936
We'll add it here.

40
00:02:44.695 --> 00:02:50.910
Great, now we need to
establish references.

41
00:02:50.910 --> 00:02:53.956
These have to do with edges
on your dependency graph, and

42
00:02:53.956 --> 00:02:58.830
I want you to think about them as going
hand in hand with something like this.

43
00:02:58.830 --> 00:03:01.174
If you have a workspace dependency,

44
00:03:01.174 --> 00:03:06.380
you should also be establishing a project
reference to go along with that.

45
00:03:06.380 --> 00:03:09.908
Now your build won't fail if you're
missing this project reference, but

46
00:03:09.908 --> 00:03:13.180
this is what you need in order to
get that kind of speed up factor.

47
00:03:13.180 --> 00:03:18.282
Here's what it looks
like you're going to have

48
00:03:18.282 --> 00:03:25.580
as a top level property of the TS
configs you're using to build.

49
00:03:25.580 --> 00:03:29.420
And again we're in the UI one, so there's
no build here, but that's what it's for.

50
00:03:29.420 --> 00:03:38.397
And we're going to create a references
array with one item in it and

51
00:03:38.397 --> 00:03:42.820
it's the path to build JSON.

52
00:03:42.820 --> 00:03:45.300
This file doesn't exist yet,
but it will in a moment.

53
00:03:48.020 --> 00:03:53.060
So this is gonna be sort of our build, our
incremental build artifact, if you will.

54
00:03:54.260 --> 00:03:58.836
I'm going to copy this because I'll
need something very similar in

55
00:03:58.836 --> 00:04:03.750
the server package or tsconfig
Build JSON and it's top level property.

56
00:04:05.030 --> 00:04:09.453
Too many commas turns out

57
00:04:09.453 --> 00:04:14.510
same relative path models.

58
00:04:14.510 --> 00:04:16.230
Tsconfig build JSON.

59
00:04:23.990 --> 00:04:29.210
Now I just ran PNPM builds and
it built everything.

60
00:04:29.210 --> 00:04:32.970
Here's our models, our server and our ui.

61
00:04:32.970 --> 00:04:37.868
And we get these files now and you can
see just there's a lot of information

62
00:04:37.868 --> 00:04:41.028
here about which declaration
files are used and

63
00:04:41.028 --> 00:04:46.730
what your dependencies are and
what version of everything is being used.

64
00:04:46.730 --> 00:04:50.890
This effectively is what it means
to have these proxy references.

65
00:04:50.890 --> 00:04:53.668
Now, unless we're working with
something of substantial size,

66
00:04:53.668 --> 00:04:55.930
we're not going to see
a speed up factor here.

67
00:04:55.930 --> 00:04:59.771
But trust me, it's there and
you will know it's working for

68
00:04:59.771 --> 00:05:02.570
you when you apply this
to a large project.

69
00:05:02.570 --> 00:05:07.355
And you can see especially that
incremental rebuild time is faster and

70
00:05:07.355 --> 00:05:12.791
the incremental build time, sorry,
the way incremental compilation affects

71
00:05:12.791 --> 00:05:18.730
the performance of your language server,
that's also going to be important.

72
00:05:18.730 --> 00:05:20.410
That's affected by this.

73
00:05:20.410 --> 00:05:23.540
And so that's where you're
gonna hover over things.

74
00:05:23.540 --> 00:05:27.618
Or in those cases where your language
server's lagging behind a little bit and

75
00:05:27.618 --> 00:05:31.264
you're seeing the red squiggles and
it's still figuring out that you

76
00:05:31.264 --> 00:05:35.540
installed this thing,
it really tightens that up significantly.

77
00:05:35.540 --> 00:05:39.301
&gt;&gt; Student 1: So
the idea here is when we edit the server,

78
00:05:39.301 --> 00:05:46.215
it's not reevaluating anything in models,
right, it's just using cache.

79
00:05:46.215 --> 00:05:52.300
&gt;&gt; Mike North: Yet, sorry, let me,
I'm gonna do a little experiment here.

80
00:05:52.300 --> 00:05:55.472
We're not going to commit this because
I typically don't commit these build

81
00:05:55.472 --> 00:05:56.420
info files.

82
00:05:56.420 --> 00:05:59.975
But I want to see if we
can spot what changes

83
00:05:59.975 --> 00:06:04.660
that might be a good way to
look at this models perfect.

84
00:06:16.430 --> 00:06:22.301
All right, so I just made a fairly trivial
change and let's look at the build and,

85
00:06:22.301 --> 00:06:26.990
all right, so first off,
you can see like two things happened.

86
00:06:26.990 --> 00:06:30.270
One is you can see server was affected.

87
00:06:30.270 --> 00:06:33.430
There's something happened here and
something happened in model.

88
00:06:33.430 --> 00:06:40.097
So there's a sense that server's
like exposed to this change.

89
00:06:40.097 --> 00:06:42.950
Gosh, we're not gonna make
any change sense out of this.

90
00:06:42.950 --> 00:06:44.710
All right,
you're gonna have to take my word for it.

91
00:06:46.150 --> 00:06:51.479
The difference in terms of what's
happening here is in this build info

92
00:06:51.479 --> 00:06:56.988
file is more of a sense that this one
module changed and we're preserving

93
00:06:56.988 --> 00:07:02.950
all of the compiled results of whatever
can be preserved within this package,

94
00:07:02.950 --> 00:07:07.670
as opposed to rebuilding this
entire package from scratch.

95
00:07:07.670 --> 00:07:12.941
Every time you hit the save button and
just think about what's happening when we

96
00:07:12.941 --> 00:07:18.211
run our dev script, we're like, anytime
we change something and we hit save,

97
00:07:18.211 --> 00:07:23.190
what's happening is that whole
package is being rebuilt from scratch.

98
00:07:23.190 --> 00:07:26.710
There's no state that's being
preserved between builds.

99
00:07:26.710 --> 00:07:30.652
This represents state being
preserved between builds and

100
00:07:30.652 --> 00:07:35.479
an opportunity to reuse some of the state
that can be safely reused given

101
00:07:35.479 --> 00:07:39.890
the scope of the change that
you made when you hit save.

102
00:07:39.890 --> 00:07:44.646
And so it's really like slimming
down to closer to the minimum amount

103
00:07:44.646 --> 00:07:49.730
of work that's necessary in order
to create an updated build output.

104
00:07:49.730 --> 00:07:52.405
&gt;&gt; Student 1: If you
didn't add that reference,

105
00:07:52.405 --> 00:07:58.370
what would the behavior be in
the original tsconfig to the models?

106
00:07:58.370 --> 00:07:59.496
&gt;&gt; Student 2: It would
rebuild the whole thing.

107
00:07:59.496 --> 00:08:01.570
&gt;&gt; Mike North: It would
rebuild the whole project.

108
00:08:01.570 --> 00:08:03.490
You'd end up with something new.

109
00:08:03.490 --> 00:08:08.440
So the contents of the dist folder
are going to be the same in either case.

110
00:08:08.440 --> 00:08:12.724
But the difference is what is the work
required in order to get there before I

111
00:08:12.724 --> 00:08:14.360
added project references.

112
00:08:15.640 --> 00:08:19.000
It's similar to compiling it for
the first time.

113
00:08:19.000 --> 00:08:20.960
It's as if you have nothing
in your dist folder.

114
00:08:20.960 --> 00:08:23.480
It's just building
everything from scratch.

115
00:08:23.480 --> 00:08:27.850
You can think of this as almost having
an intermediate result where certain files

116
00:08:27.850 --> 00:08:29.080
that I didn't touch.

117
00:08:29.080 --> 00:08:33.560
And it's not really by file because
obviously this is changing too.

118
00:08:35.460 --> 00:08:40.333
But like certain parts of the package
that were left unperturbed,

119
00:08:40.333 --> 00:08:44.335
we can reuse the build output
from the last build as sort

120
00:08:44.335 --> 00:08:48.700
of an advanced starting point for
creating that new build.

121
00:08:48.700 --> 00:08:52.466
So the increment of work that's required
to get the same build output is

122
00:08:52.466 --> 00:08:53.860
significantly smaller.

123
00:08:55.700 --> 00:08:57.460
Does that make sense?

124
00:08:57.460 --> 00:08:58.842
&gt;&gt; Student 1: Yeah.
&gt;&gt; Mike North: It's more like an edit to

125
00:08:58.842 --> 00:09:01.460
the build, as opposed to throwing away and
recreating.

126
00:09:01.460 --> 00:09:06.190
&gt;&gt; Student 1: I think my confusion
came from aren't you already

127
00:09:06.190 --> 00:09:10.930
importing a built dist of
models into the server?

128
00:09:12.050 --> 00:09:14.290
They're already separated and
that's already built.

129
00:09:14.290 --> 00:09:19.090
So I'm just struggling to understand
where the savings come from.

130
00:09:19.090 --> 00:09:20.050
&gt;&gt; Mike North: That's a great point.

131
00:09:20.050 --> 00:09:26.236
Remember when we're saying we're
importing when we're in load data and

132
00:09:26.236 --> 00:09:33.218
we're saying, I've got the seed packet
collection model from here, I want you to

133
00:09:33.218 --> 00:09:39.480
think of this more as like instructions
of where to look when compiling.

134
00:09:39.480 --> 00:09:42.200
There's nothing here in
terms of preserving work.

135
00:09:42.200 --> 00:09:45.983
And so,
ultimately this is just directions for

136
00:09:45.983 --> 00:09:49.680
finding the thing that
we're interested in.

137
00:09:49.680 --> 00:09:51.560
Like, where can I find this thing?

138
00:09:51.560 --> 00:09:57.171
If you remember when we were messing with,
with this folder here,

139
00:09:57.171 --> 00:10:02.783
remember when we were messing with
these and when I took them away,

140
00:10:02.783 --> 00:10:08.610
it couldn't find the module,
the dependency link was broken.

141
00:10:08.610 --> 00:10:12.170
It's because all this is,
all the import statements are.

142
00:10:12.170 --> 00:10:17.246
It's really just instructions for
finding something that exists

143
00:10:17.246 --> 00:10:22.300
in a Node Modules folder somewhere now,
so that's one thing.

144
00:10:22.300 --> 00:10:27.438
Another thing is what is
the work required to produce

145
00:10:27.438 --> 00:10:32.940
an updated dist folder based
on changes to source code?

146
00:10:34.620 --> 00:10:38.013
What we just did here by
adding tsproject references,

147
00:10:38.013 --> 00:10:42.958
it's the difference between deleting
that dist folder, starting completely

148
00:10:42.958 --> 00:10:47.827
fresh with no knowledge of previous
builds, and doing the exact same amount of

149
00:10:47.827 --> 00:10:52.280
work to recompile build models as we
did to build it the very first time.

150
00:10:52.280 --> 00:10:53.720
So that was our starting point.

151
00:10:53.720 --> 00:10:58.922
And now we're more at the point where,
well, we have a lot of

152
00:10:58.922 --> 00:11:04.940
bits of compiled data for other things
that might be in that package and

153
00:11:04.940 --> 00:11:11.570
some portion of that we can reuse that
represents work that is already done and

154
00:11:11.570 --> 00:11:16.680
that reduces the,
the amount of new work that we have to do.

155
00:11:16.680 --> 00:11:20.626
And the amount of new work we have to
do is much more closely related to

156
00:11:20.626 --> 00:11:25.880
the scope of the change, which is like
it's still always at the file level.

157
00:11:25.880 --> 00:11:30.267
So you're not recompiling
a function within the file,

158
00:11:30.267 --> 00:11:34.920
you're creating a new compiled output for
that module.

159
00:11:34.920 --> 00:11:39.015
But it's sort of like incremental compile
at the module level instead of at

160
00:11:39.015 --> 00:11:40.890
the package level.

161
00:11:40.890 --> 00:11:44.774
And the bigger your packages are, and the
more of them there are in your monorepo,

162
00:11:44.774 --> 00:11:48.170
the more this is going to
make a difference for you.

163
00:11:48.170 --> 00:11:51.370
One last thing, Git, Ignore these.

164
00:11:51.370 --> 00:11:54.650
As you can see, they are just junk.

165
00:11:54.650 --> 00:11:56.650
Those are files for
programs to understand.

166
00:12:03.370 --> 00:12:06.200
Don't commit these bedtime.

167
00:12:06.200 --> 00:12:07.750
It'll just always change all the time.

