WEBVTT

1
00:00:00.480 --> 00:00:04.080
&gt;&gt; Mike: Next, let's get linting
working across our project.

2
00:00:04.080 --> 00:00:09.327
So the current state of the world
is we have this ESLint config,

3
00:00:09.327 --> 00:00:12.560
but it is within the UI package.

4
00:00:12.560 --> 00:00:18.992
We haven't touched this since
we moved things around and

5
00:00:18.992 --> 00:00:23.690
if we went into the ui, lint still works.

6
00:00:23.690 --> 00:00:27.040
Doesn't still work?

7
00:00:27.040 --> 00:00:34.170
Interesting, I need to add my
vite config to my TS config here.

8
00:00:35.610 --> 00:00:36.730
You know what?

9
00:00:36.730 --> 00:00:40.890
This will get shaken out
as we make progress here.

10
00:00:40.890 --> 00:00:42.490
I can explain what's going on though.

11
00:00:44.410 --> 00:00:48.415
Our current setup,
this has to do with TypeScript and

12
00:00:48.415 --> 00:00:51.220
linting more than monorepos.

13
00:00:51.220 --> 00:00:56.095
But what we have going on here is
we're saying I'm using eslint and

14
00:00:56.095 --> 00:00:58.893
I have some type aware linting rules.

15
00:00:58.893 --> 00:01:04.618
These are linting rules that
are alerting the developer

16
00:01:04.618 --> 00:01:09.490
to problems that detection
of those problems,

17
00:01:09.490 --> 00:01:15.700
involves using type information itself,
right?

18
00:01:15.700 --> 00:01:21.908
And the way you set this up is you
have to enable the project service and

19
00:01:21.908 --> 00:01:28.100
you have to point to a tsconfig file or
tsconfig root directory.

20
00:01:28.100 --> 00:01:30.980
Right?
Now that's going to be this file here.

21
00:01:32.900 --> 00:01:37.033
Let's see, we've got

22
00:01:37.033 --> 00:01:43.620
the postcss config stuff?

23
00:01:43.620 --> 00:01:47.700
Kind of expected that we would
not see these files here.

24
00:01:47.700 --> 00:01:49.665
Maybe.

25
00:01:49.665 --> 00:01:50.342
You know what?

26
00:01:50.342 --> 00:01:52.527
We're going to keep pushing forward and

27
00:01:52.527 --> 00:01:55.940
let's see if this still shakes
out when we move things around.

28
00:01:55.940 --> 00:01:59.712
But I'll tell you that the thing
I immediately look for

29
00:01:59.712 --> 00:02:04.550
here is based on these error messages,
if you've left this file out,

30
00:02:04.550 --> 00:02:09.140
if it's not being type checked,
it's not part of your config.

31
00:02:09.140 --> 00:02:16.670
You either have to do something like this,
right?

32
00:02:16.670 --> 00:02:24.065
And we could put a bunch of
things in here, like, Right, you

33
00:02:24.065 --> 00:02:28.350
could build up an array and say these are
just things that won't get linted for me.

34
00:02:28.350 --> 00:02:32.628
Or you have to be referring
to a TypeScript project that

35
00:02:32.628 --> 00:02:36.030
includes type checking on those files.

36
00:02:36.030 --> 00:02:38.112
Otherwise TypeScript does not know or

37
00:02:38.112 --> 00:02:42.730
ESLint doesn't know what to do with them
because it's ultimately producing kind of

38
00:02:42.730 --> 00:02:46.112
like the AST that represents
the code that will be executed and

39
00:02:46.112 --> 00:02:49.970
an equivalent data structure that
represents the types on that code.

40
00:02:51.010 --> 00:02:54.210
If there's no types, it can't do its job.

41
00:02:55.730 --> 00:02:57.718
Let's do some refactoring and

42
00:02:57.718 --> 00:03:01.490
see if we end up fixing this
as part of that process.

43
00:03:01.490 --> 00:03:06.426
First, let's hoist some of our
dependencies up to the workspace

44
00:03:06.426 --> 00:03:09.670
level that relate to linting.

45
00:03:09.670 --> 00:03:10.470
What's that going to be?

46
00:03:10.470 --> 00:03:13.030
Certainly typescript eslint
is going to be one of them.

47
00:03:14.950 --> 00:03:18.790
We'll have eslint.

48
00:03:18.790 --> 00:03:19.350
There it is.

49
00:03:19.350 --> 00:03:20.470
We'll grab that too.

50
00:03:24.150 --> 00:03:25.830
I think that might be it.

51
00:03:25.830 --> 00:03:26.710
Just these two.

52
00:03:29.350 --> 00:03:30.710
Maybe TypeScript itself.

53
00:03:30.710 --> 00:03:31.510
We'll grab that.

54
00:03:33.990 --> 00:03:38.701
These three lines and
we're going to bring those up to our

55
00:03:38.701 --> 00:03:43.340
root level package JSON
as dev dependencies.

56
00:03:43.340 --> 00:03:44.220
Save.

57
00:03:44.220 --> 00:03:45.980
We touched a package JSON.

58
00:03:45.980 --> 00:03:52.890
We must pnpmi.

59
00:03:52.890 --> 00:03:53.943
Did I save it?

60
00:03:53.943 --> 00:03:56.494
Yep, great.

61
00:03:56.494 --> 00:04:01.830
Okay, now we should be able to do.

62
00:04:04.316 --> 00:04:08.260
Sorry.
We need to move the lint config up to

63
00:04:08.260 --> 00:04:10.810
the root of our project.

64
00:04:10.810 --> 00:04:13.933
So we're gonna move that up.

65
00:04:13.933 --> 00:04:17.990
And whenever I do this,
I think we might be in good shape here.

66
00:04:17.990 --> 00:04:22.070
But I do want to check
that paths look correct.

67
00:04:23.350 --> 00:04:23.990
Interesting.

68
00:04:23.990 --> 00:04:25.830
It can't find this module.

69
00:04:25.830 --> 00:04:29.270
Let me try restarting my language
server just to see if that's real.

70
00:04:31.370 --> 00:04:32.250
You know what?

71
00:04:32.250 --> 00:04:33.090
That's legit.

72
00:04:33.090 --> 00:04:35.450
I think we forgot to bring that over.

73
00:04:35.450 --> 00:04:38.010
Let's check our UI package JSON.

74
00:04:38.010 --> 00:04:38.650
There it is.

75
00:04:41.050 --> 00:04:42.623
Helpful tooling.

76
00:04:42.623 --> 00:04:48.330
Making sure that we do all
the things we need to do, pnpmi.

77
00:04:51.050 --> 00:04:51.690
Great.

78
00:04:51.690 --> 00:04:54.890
Looks like that was successful and
goes away.

79
00:04:54.890 --> 00:04:55.690
Fantastic.

80
00:04:56.770 --> 00:05:01.321
I want to change this from

81
00:05:01.321 --> 00:05:06.089
dir name to process CWD and

82
00:05:06.089 --> 00:05:12.610
we need types node for that to work.

83
00:05:12.610 --> 00:05:17.527
So let's install that at the workspace

84
00:05:17.527 --> 00:05:22.593
level because for sure the ESLINT config

85
00:05:22.593 --> 00:05:27.660
is being evaluated at in a node context.

86
00:05:37.820 --> 00:05:41.083
This is interesting.

87
00:05:41.083 --> 00:05:46.796
Save, check in package.json,
make sure everything looks right.

88
00:05:51.247 --> 00:05:51.910
Seems good.

89
00:05:54.620 --> 00:05:56.870
No, it didn't add the types node.

90
00:06:05.750 --> 00:06:07.030
That's really strange.

91
00:06:09.190 --> 00:06:10.790
Let's try something else.

92
00:06:10.790 --> 00:06:16.444
We can grab it and bring it in and

93
00:06:16.444 --> 00:06:22.979
then just run the install process.

94
00:06:22.979 --> 00:06:28.611
Okay, something about, I guess looking up
with the latest version of @types/node,

95
00:06:28.611 --> 00:06:30.448
it's a little weird, but.

96
00:06:30.448 --> 00:06:32.190
So now we've got types/node.

97
00:06:32.190 --> 00:06:33.470
We go back to this file.

98
00:06:33.470 --> 00:06:34.150
There we go.

99
00:06:34.150 --> 00:06:39.687
We've got process current
working directory and

100
00:06:39.687 --> 00:06:47.856
because this is a script that we should
be running at the workspace level,

101
00:06:47.856 --> 00:06:52.757
this will always be
the root of the project.

102
00:06:52.757 --> 00:06:54.500
Here's pnpm lint, all right.

103
00:06:55.540 --> 00:06:56.820
We got some errors.

104
00:07:02.100 --> 00:07:07.060
This represents us having some
legitimate things that we need to catch.

105
00:07:10.030 --> 00:07:13.480
So we can start with first,

106
00:07:13.480 --> 00:07:18.430
this invalid template literal thing.

107
00:07:21.390 --> 00:07:24.590
Restrict template literal expressions.

108
00:07:24.590 --> 00:07:26.030
That's what it's called.

109
00:07:26.030 --> 00:07:31.550
We're going to go down into rules.

110
00:07:31.550 --> 00:07:34.188
Here it is.

111
00:07:34.188 --> 00:07:37.337
I already had that in there.

112
00:07:37.337 --> 00:07:39.535
Well, let's look at
a couple other of these.

113
00:07:39.535 --> 00:07:43.804
This to me screams
an import's not resolving.

114
00:07:43.804 --> 00:07:46.200
And there it is.

115
00:07:46.200 --> 00:07:47.931
Now, for the first time,

116
00:07:47.931 --> 00:07:52.191
we're catching that some of
these imports aren't resolving.

117
00:07:52.191 --> 00:07:57.022
The reason why this wasn't being
detected before is we've been

118
00:07:57.022 --> 00:08:00.607
doing a lot of PNPM builds,
which, remember.

119
00:08:00.607 --> 00:08:03.110
Just looks at the source folder.

120
00:08:03.110 --> 00:08:06.139
And this is why it's useful
to have that check command so

121
00:08:06.139 --> 00:08:09.449
that you're also type
checking against your tests.

122
00:08:09.449 --> 00:08:11.129
But this just needs to be like.

123
00:08:11.129 --> 00:08:12.649
See all the red over here?

124
00:08:12.649 --> 00:08:18.409
And it's just going to go away once we
resolve this svelte or seeds and models.

125
00:08:18.409 --> 00:08:18.909
Great.

126
00:08:20.889 --> 00:08:26.899
So there's that file we can run again.

127
00:08:26.899 --> 00:08:27.539
Oops.

128
00:08:28.739 --> 00:08:31.459
And we should end up with
just two errors left.

129
00:08:31.459 --> 00:08:33.379
These two tailwind config.

130
00:08:33.379 --> 00:08:38.129
So the svelte config,
the tailwind config and the vite config.

131
00:08:38.129 --> 00:08:38.739
One more.

132
00:08:44.179 --> 00:08:46.739
That should be fine.

133
00:08:46.739 --> 00:08:47.779
What do we got here?

134
00:08:51.059 --> 00:08:57.839
Okay, so now I'm seeing a role,
just verbalizing my debugging steps here.

135
00:08:57.839 --> 00:09:01.919
I know I have a role in my tsconfig.

136
00:09:01.919 --> 00:09:07.039
Sorry, in my eslint configuration
that allows numbers.

137
00:09:07.039 --> 00:09:10.999
We ran lint at the beginning of
the project and it for sure passed.

138
00:09:10.999 --> 00:09:12.159
We all saw that.

139
00:09:12.159 --> 00:09:17.355
So that tells me I need
to look at paths here.

140
00:09:17.355 --> 00:09:22.449
Look relative to the root of the project,
we're looking for source and tests.

141
00:09:22.449 --> 00:09:23.009
So here we go.

142
00:09:23.009 --> 00:09:31.569
We're going to add to both of these places
packages anything source and tests.

143
00:09:32.769 --> 00:09:36.049
And you should see some
of those things allowed.

144
00:09:37.089 --> 00:09:37.808
There we go.

145
00:09:37.808 --> 00:09:42.769
So now we're down to a set of errors
that all are similar in nature.

146
00:09:42.769 --> 00:09:46.769
And they're saying there's
a parsing error here.

147
00:09:47.819 --> 00:09:51.659
I'm not included in a tsconfig or
something like that.

148
00:09:51.659 --> 00:09:54.059
So two places this could happen.

149
00:09:54.059 --> 00:09:58.030
One is a TS config is not covering
these things, but another would be

150
00:09:58.030 --> 00:10:02.619
just making sure that you have some
representation of these files here.

151
00:10:02.619 --> 00:10:07.390
So at a high level,
I want you to think about this as

152
00:10:07.390 --> 00:10:10.574
either the tsconfig contained,

153
00:10:10.574 --> 00:10:16.372
the tsconfig referred to files
which are neither ignored nor

154
00:10:16.372 --> 00:10:20.918
described in terms of how
they can be linted, or

155
00:10:20.918 --> 00:10:26.929
your linting files that your
tsconfig doesn't cover.

156
00:10:26.929 --> 00:10:33.322
So let's see what we can do

157
00:10:33.322 --> 00:10:39.169
about that, I think.

158
00:10:39.169 --> 00:10:41.169
Sorry, I'm just going to check
my notes real quick here.

159
00:10:56.619 --> 00:10:57.658
Packages ui.

160
00:10:58.859 --> 00:11:02.859
All right, let's just double
check the tsconfig one more time.

161
00:11:09.109 --> 00:11:11.874
UI tsconfig, there it is.

162
00:11:11.874 --> 00:11:20.315
Okay, and, Try that, now,
that shouldn't matter.

163
00:11:20.315 --> 00:11:23.509
This can go away because this
file is not present anymore.

164
00:11:23.509 --> 00:11:26.229
But there's the svelte config,
there's the vite config.

165
00:11:27.909 --> 00:11:31.069
What if we add these
to our root TS config?

166
00:11:31.069 --> 00:11:33.769
That would be the other
thing to experiment with.

167
00:11:33.769 --> 00:11:36.569
So this would be saying packages.

168
00:11:36.569 --> 00:11:41.529
Or we could do that and
let's see if this happens.

169
00:11:42.649 --> 00:11:47.910
If this works, what that tells me is
eslint's only looking at that root

170
00:11:47.910 --> 00:11:53.009
TS config, and it's not sort of
cascading into each project there.

171
00:11:53.009 --> 00:11:54.329
It works.

172
00:11:54.329 --> 00:12:00.249
So basically, just through debugging this,
I think we can make an assumption.

173
00:12:00.249 --> 00:12:05.124
Now, although the TypeScript
compiler is fine with

174
00:12:05.124 --> 00:12:09.775
the include array being added onto,
if you will,

175
00:12:09.775 --> 00:12:15.645
in the UI package, it's still
going to be including source and

176
00:12:15.645 --> 00:12:20.609
test because of what it's
extending from eslint.

177
00:12:20.609 --> 00:12:22.609
It appears does not work that way.

178
00:12:22.609 --> 00:12:29.509
And we're having to say in our config when
we're saying, I'm pointing to this folder,

179
00:12:29.509 --> 00:12:35.659
that's where you can find the tsconfig
that's going to be used for linting.

180
00:12:35.659 --> 00:12:41.201
That's where it wants to be able to find
everything that is being asked to lint,

181
00:12:41.201 --> 00:12:42.699
and linting passes.

182
00:12:42.699 --> 00:12:47.058
Now, just to convince ourselves that it's
actually working, we can have a lint error

183
00:12:47.058 --> 00:12:50.299
of some sort and let's make sure
that it ends up being picked up.

184
00:12:51.599 --> 00:12:56.559
Like, what would we do?

185
00:13:01.039 --> 00:13:01.839
We could do this.

186
00:13:11.119 --> 00:13:12.799
So that should be a lint error.

187
00:13:14.639 --> 00:13:17.059
No confusing, void expression save.

188
00:13:19.059 --> 00:13:21.619
And we see the errors pop up.

189
00:13:21.619 --> 00:13:22.739
Great.

190
00:13:22.739 --> 00:13:25.539
Now we have eslint working
across our workspace.

191
00:13:26.899 --> 00:13:30.352
And this is the advisable way to do it,
by the way,

192
00:13:30.352 --> 00:13:35.290
like having one lint task that works
everywhere, it's just going to be

193
00:13:35.290 --> 00:13:40.659
a lot more efficient than having linting
happen in each monorepo package.

194
00:13:40.659 --> 00:13:45.210
If you look at what the lint team
says in their documentation,

195
00:13:45.210 --> 00:13:49.761
once you start getting to Even
something like 10 packages,

196
00:13:49.761 --> 00:13:53.700
especially if the linting
is happening in parallel,

197
00:13:53.700 --> 00:13:59.189
you don't want to have an ESLint
file in each package at that point.

198
00:13:59.189 --> 00:14:03.109
It's just a lot for it to parse and just
has to do with the way it's implemented.

199
00:14:03.109 --> 00:14:08.743
But this scales up much better having
one eslint MTS at your root and

200
00:14:08.743 --> 00:14:12.879
have this be the central
place where all of your.

201
00:14:14.159 --> 00:14:15.079
Where everything's happening.

202
00:14:15.079 --> 00:14:18.364
And of course you get the added
benefit of saying, well,

203
00:14:18.364 --> 00:14:22.678
just like we want one place for
TypeScript compiler strictness settings,

204
00:14:22.678 --> 00:14:26.959
we want one place to look where we
can state across the entire monorepo.

205
00:14:26.959 --> 00:14:27.999
Here are the rules.

206
00:14:27.999 --> 00:14:32.995
And yes, you might have deviation between
different packages, where let's say you're

207
00:14:32.995 --> 00:14:36.676
incrementally tightening things up,
like applying a new rule and

208
00:14:36.676 --> 00:14:40.639
getting everything fixed in one package
at a time and rolling that out.

209
00:14:40.639 --> 00:14:42.679
Well, you can still do that in this file.

210
00:14:42.679 --> 00:14:45.359
You can have as many of
these objects as you want.

211
00:14:45.359 --> 00:14:49.879
And this would be another great place
to have per package configuration.

212
00:14:49.879 --> 00:14:51.889
But at least there's one place to look and

213
00:14:51.889 --> 00:14:55.999
you're not opening up a dozen files to
figure out what the heck is going on.

214
00:14:55.999 --> 00:15:00.239
Next up,
let's get that jump to definition working.

215
00:15:01.359 --> 00:15:05.589
Just to refresh what this
problem is in any place where.

216
00:15:07.429 --> 00:15:12.477
Yeah, this will work in any place
where we're importing something from

217
00:15:12.477 --> 00:15:17.789
either the UI or the server package and
we're importing from seeds models.

218
00:15:17.789 --> 00:15:21.589
If we command click, we end up
going to these declaration files.

219
00:15:21.589 --> 00:15:27.412
There's a very simple fix for this,
and that is in your tsconfig build,

220
00:15:27.412 --> 00:15:32.549
you want not just declaration true but
declaration map true.

221
00:15:32.549 --> 00:15:36.789
Think of these as the source maps for
declaration files.

222
00:15:36.789 --> 00:15:38.229
So this one's super easy.

223
00:15:39.589 --> 00:15:44.069
If we build across the whole project,
it'll result in a new build output.

224
00:15:45.091 --> 00:15:52.727
Sorry, I'm in the UI folder running
the build command in the UI package only.

225
00:15:52.727 --> 00:15:54.629
I'm gonna get out of here and

226
00:15:54.629 --> 00:15:58.996
I wanna run build across the whole
monorepo at which point there.

227
00:15:58.996 --> 00:16:00.474
That's what I was looking for.

228
00:16:00.474 --> 00:16:04.533
These declaration map files,
which you can see,

229
00:16:04.533 --> 00:16:08.690
all right,
like here is the declaration file, and

230
00:16:08.690 --> 00:16:13.633
this is the source that it comes from,
or the sources.

231
00:16:13.633 --> 00:16:17.586
And so as a result, now if we go
back to that formatting ts and

232
00:16:17.586 --> 00:16:21.633
command click,
we're now in TypeScript source, right?

233
00:16:21.633 --> 00:16:23.953
So very important declaration map.

234
00:16:23.953 --> 00:16:26.942
True.
There's really no downside to building

235
00:16:26.942 --> 00:16:30.443
those anywhere you care
about declarations.

236
00:16:30.443 --> 00:16:33.203
Any library should have these
declaration maps in place.

237
00:16:33.203 --> 00:16:37.643
Even if it's in your Node Modules folder,
it's still valuable to be able to.

238
00:16:40.363 --> 00:16:45.132
If we're here and we're going into svelte,

239
00:16:45.132 --> 00:16:52.803
it's nice to be able to jump into
something that's more readable here.

240
00:16:52.803 --> 00:16:57.529
In this case, we're benefiting from
source maps with JSDOC types, but

241
00:16:57.529 --> 00:17:02.099
it's the original source code with
the comments, and it allows you to

242
00:17:02.099 --> 00:17:06.362
spelunk into your dependencies
without having to walk back up and

243
00:17:06.362 --> 00:17:08.783
be like, I'm in a dist folder.

244
00:17:08.783 --> 00:17:10.623
Let me get into the original source code.

245
00:17:11.663 --> 00:17:15.033
Yes.
&gt;&gt; Male: If you were publishing something

246
00:17:15.033 --> 00:17:17.390
to NPM for that property,

247
00:17:17.390 --> 00:17:22.750
would you then have to include
your TypeScript in the dist,

248
00:17:22.750 --> 00:17:28.073
or would the jump to just
jump to the JavaScript code?

249
00:17:28.073 --> 00:17:29.753
&gt;&gt; Mike: That's a good, good question.

250
00:17:29.753 --> 00:17:32.477
When I publish TypeScript libraries,

251
00:17:32.477 --> 00:17:37.912
I will typically leave my source
code in the library for that reason.

252
00:17:37.912 --> 00:17:41.325
So, like when,
if I were to publish models, models,

253
00:17:41.325 --> 00:17:44.753
you would see something that
looks exactly like this.

254
00:17:44.753 --> 00:17:46.183
You'd see a dist folder,

255
00:17:46.183 --> 00:17:49.433
and that's part of the tarball
that ends up going up to npm.

256
00:17:50.563 --> 00:17:54.483
But I'll absolutely leave my source folder
in there, and I'll even leave the tests.

257
00:17:57.603 --> 00:18:02.647
It's more text, but
there's still a lot of value in somebody

258
00:18:02.647 --> 00:18:07.594
being able to go in and
understand exactly what's going on,

259
00:18:07.594 --> 00:18:13.443
especially if you want to look into
a concept like creating a patch.

260
00:18:13.443 --> 00:18:18.777
So all the popular JavaScript
package managers, NPM, Yarn,

261
00:18:18.777 --> 00:18:24.008
and PNPM, they support this
concept of like a patch command,

262
00:18:24.008 --> 00:18:28.736
which lets you really reach
into a Node Modules folder,

263
00:18:28.736 --> 00:18:34.773
make a little adjustment, and
then you create a git diff effectively,

264
00:18:34.773 --> 00:18:40.543
like a git patch that represents
that adjustment having been made.

265
00:18:40.543 --> 00:18:44.129
And then when you install that
package again, your patch,

266
00:18:44.129 --> 00:18:47.213
which is checked into git
along with your project,

267
00:18:47.213 --> 00:18:52.733
that's applied if you've ever run into
a problem where some dependency has a bug.

268
00:18:52.733 --> 00:18:57.205
I run into this all the time where
somebody has a very old way of

269
00:18:57.205 --> 00:19:02.559
representing types they're using
in their ambient type information,

270
00:19:02.559 --> 00:19:07.133
both the declare keyword and
the export keyword at one time.

271
00:19:07.133 --> 00:19:11.533
The typescript compiler was okay
with that, and it is not anymore.

272
00:19:11.533 --> 00:19:14.733
You can just go in and you can change
those files and you create a patch.

273
00:19:15.853 --> 00:19:21.773
You don't have to fork the library and
publish it to NPM and then pull it down.

274
00:19:23.133 --> 00:19:28.253
Still good to open a PR and to see if you
can help fix it for other people too.

275
00:19:28.253 --> 00:19:31.213
That's just a good ecosystem
citizen thing to do.

276
00:19:31.213 --> 00:19:34.834
But the idea that you can
make that adjustment and

277
00:19:34.834 --> 00:19:39.954
check it in as a git patch, it's
pretty powerful and you do it once and

278
00:19:39.954 --> 00:19:44.393
then it's persisted with your source code,
it's in git.

279
00:19:48.313 --> 00:19:50.913
That's a good reason to include
the source code in your library.

280
00:19:50.913 --> 00:19:54.161
If somebody ever needed to do that
with something I'd published,

281
00:19:54.161 --> 00:19:56.713
well, they would have
the ingredients necessary.

282
00:19:56.713 --> 00:20:02.254
They'd be able to go in there,
into their Node Modules folder and

283
00:20:02.254 --> 00:20:08.883
npm, install from within that node
modules and use my build script to.

284
00:20:08.883 --> 00:20:12.789
They could adjust the source code and

285
00:20:12.789 --> 00:20:19.603
then they could run a build on
what is to them a dependency.

286
00:20:19.603 --> 00:20:23.015
And then they'll get both the source
code changes and the dist and

287
00:20:23.015 --> 00:20:27.363
they can check that in as sort of a patch
with their repo, which is pretty cool.

288
00:20:27.363 --> 00:20:30.164
And in the monorepos world,

289
00:20:30.164 --> 00:20:35.298
you can do that in a way where
that patch is applied for

290
00:20:35.298 --> 00:20:43.423
any package in your monorepo that uses
the same version of that dependency.

291
00:20:43.423 --> 00:20:47.100
So if you had to patch React or
you had to patch something else,

292
00:20:47.100 --> 00:20:50.943
like you can do it once and
then everywhere it ends up being used.

