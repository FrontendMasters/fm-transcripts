WEBVTT

1
00:00:00.320 --> 00:00:01.200
&gt;&gt; Mike North: Let's get started.

2
00:00:01.200 --> 00:00:04.021
So, first you're going to want
to make sure that you have PNPM

3
00:00:04.021 --> 00:00:05.280
installed in this course.

4
00:00:05.280 --> 00:00:10.720
It's actually going to be important that
you use this specific package manager.

5
00:00:10.720 --> 00:00:14.807
NPM and YARN also have kind of
some similar capabilities, but

6
00:00:14.807 --> 00:00:20.640
we're going to be using some pnpm-specific
concepts here, and so you'll need this.

7
00:00:21.680 --> 00:00:25.561
You can either install it directly
by clicking on this link here and

8
00:00:25.561 --> 00:00:30.623
following the installation instructions,
or if you happen to have Volta installed,

9
00:00:30.623 --> 00:00:35.180
you can just run Volta install pnpm,
and it will set it up globally for you.

10
00:00:35.180 --> 00:00:39.820
Remember, after, if you have to
install Volta, here's how to do it.

11
00:00:39.820 --> 00:00:44.580
And then after you complete this step,
remember to close and reopen your browser.

12
00:00:44.580 --> 00:00:47.740
It sets up an environment variable for
you and that will need to be read.

13
00:00:47.740 --> 00:00:53.004
Or if you're clever and
you want to source your ZSHRC to load

14
00:00:53.004 --> 00:00:58.370
that variable, you can do that too,
and that's pnpm.

15
00:00:58.370 --> 00:01:01.490
Then you're going to want to
check out the GitHub repo.

16
00:01:01.490 --> 00:01:06.610
Here's the name of the repo,
It's Mike North ts monorepos v2.

17
00:01:09.570 --> 00:01:13.707
Then you'll want to enter the repo,
install the dependencies, and

18
00:01:13.707 --> 00:01:18.559
the way you'll know things are working
well is these three tasks should complete

19
00:01:18.559 --> 00:01:19.570
successfully.

20
00:01:19.570 --> 00:01:21.640
You should be able to build lint and test.

21
00:01:24.680 --> 00:01:29.715
And then finally, if you want to test that
the dev script works, this is going to

22
00:01:29.715 --> 00:01:34.920
start the backend, start the front end,
and you should see a URL you can click on.

23
00:01:36.760 --> 00:01:40.089
You can test the API by hitting this
endpoint, or you can load the UI and

24
00:01:40.089 --> 00:01:42.600
you should see something
that looks like this.

25
00:01:42.600 --> 00:01:46.723
&gt;&gt; Speaker 2: If you have a monorepo
containing packages of several different

26
00:01:46.723 --> 00:01:49.317
languages like Ruby, Python and Java,

27
00:01:49.317 --> 00:01:53.460
how would you integrate those type
of packages in a single repo?

28
00:01:55.060 --> 00:01:57.540
&gt;&gt; Mike North: It's certainly
possible to do that.

29
00:01:57.540 --> 00:02:01.703
I would at that point reach for
a tool like Bazel,

30
00:02:01.703 --> 00:02:06.883
which is kind of a language
agnostic build tool that produces

31
00:02:06.883 --> 00:02:11.780
hermetic build artifacts and
is quite fast at building.

32
00:02:13.550 --> 00:02:18.534
Bluntly, most of the languages you
care about can work with Bazel,

33
00:02:18.534 --> 00:02:22.830
but that's kind of what
I would work towards.

34
00:02:22.830 --> 00:02:28.910
You'd pick tooling like that that
is suitable for Polyglot Monorepos.

35
00:02:30.190 --> 00:02:33.524
Now that you've set up the Workshop
project, let's start it up and

36
00:02:33.524 --> 00:02:35.230
make sure that everything works.

37
00:02:35.230 --> 00:02:40.043
The first thing you want to make
sure you do is make sure you have

38
00:02:40.043 --> 00:02:44.960
PNPM installed and
then it's at a relatively recent version.

39
00:02:44.960 --> 00:02:49.818
I'm on 10.12.1 you can run pnpm i
to install all the packages,

40
00:02:49.818 --> 00:02:52.286
I already have them cached here, so

41
00:02:52.286 --> 00:02:57.080
you might see some spinning going
on there as it pulls things down.

42
00:02:57.080 --> 00:02:58.962
And then you can run pnpm build,

43
00:02:58.962 --> 00:03:03.160
you should see some sort of build
output that looks like this.

44
00:03:03.160 --> 00:03:04.760
So build lint test should work.

45
00:03:04.760 --> 00:03:11.803
And then if you run pnpm dev and
you go to the Workshop project,

46
00:03:11.803 --> 00:03:17.880
this is the UI endpoint,
this is the API endpoint.

47
00:03:17.880 --> 00:03:22.080
So if you click the API endpoint, you'll
see like localhost 3000 at the root.

48
00:03:22.080 --> 00:03:29.400
I am not serving things, but if you go
/api/seeds, you should see some JSON.

49
00:03:29.400 --> 00:03:34.738
And similarly, if you go to the ui, you
should see some visual representation of,

50
00:03:34.738 --> 00:03:39.290
of that JSON bunch of data coming
through that is just like.

51
00:03:39.290 --> 00:03:42.910
It's enough that we have a back end, front
end, and something that's shared between

52
00:03:42.910 --> 00:03:45.850
them, and that is plenty sufficient for
us to think about Monorepos.

53
00:03:47.450 --> 00:03:52.078
So with that, let's talk
a little bit about what's inside,

54
00:03:52.078 --> 00:03:54.490
what this project consists of.

55
00:03:56.250 --> 00:04:01.690
This is really important to do before
you begin your Monorepo journey.

56
00:04:01.690 --> 00:04:03.506
And really what I mean is,

57
00:04:03.506 --> 00:04:07.882
if we're setting out on a journey
to turn this single project,

58
00:04:07.882 --> 00:04:13.680
we only have a root package, JSON here,
here's our source code, all this stuff.

59
00:04:15.040 --> 00:04:20.121
We're going to begin a process that
normally you would conduct in cycles,

60
00:04:20.121 --> 00:04:22.217
where you'd say, all right,

61
00:04:22.217 --> 00:04:27.217
I've got something that is a little
bit too monolithic and I have reason,

62
00:04:27.217 --> 00:04:32.710
some reason to break things out,
and I want to factor out a package.

63
00:04:32.710 --> 00:04:33.990
What is that package?

64
00:04:33.990 --> 00:04:39.590
Can I identify things that are separable?

65
00:04:39.590 --> 00:04:40.870
This is the step.

66
00:04:40.870 --> 00:04:44.124
Before we even start
talking about the Monorepo,

67
00:04:44.124 --> 00:04:48.464
you want to have an understanding
of what are we dealing with here,

68
00:04:48.464 --> 00:04:52.150
what is logically separable in this app.

69
00:04:52.150 --> 00:04:56.464
I've done that work ahead of time
because you're going to have to do this

70
00:04:56.464 --> 00:04:58.030
yourself in your own app.

71
00:04:58.030 --> 00:05:02.745
But we have a fairly obvious case
here where we've got some UI

72
00:05:02.745 --> 00:05:05.330
components in this Lib folder.

73
00:05:05.330 --> 00:05:08.082
We've got some svelte components and

74
00:05:08.082 --> 00:05:12.130
something like dealing with
State in the svelte world.

75
00:05:12.130 --> 00:05:15.890
We're not gonna worry about
the contents of this files for now.

76
00:05:15.890 --> 00:05:20.130
Then we've got a folder
in Source called Server.

77
00:05:20.130 --> 00:05:25.245
And if I look at those,
we've got some express stuff like Cors,

78
00:05:25.245 --> 00:05:27.740
middleware for Express.

79
00:05:27.740 --> 00:05:30.375
We've got something called load data,

80
00:05:30.375 --> 00:05:36.060
which seems to be engaging with the file
system in some way and loading a file.

81
00:05:36.060 --> 00:05:41.175
And then we've also got models, and
these are just typescript interfaces

82
00:05:41.175 --> 00:05:46.060
that represent what is a seed packet,
what is the data structure here?

83
00:05:48.460 --> 00:05:50.220
Those are some good candidates here.

84
00:05:50.220 --> 00:05:54.360
So we've got our models,
we've got our server, and

85
00:05:54.360 --> 00:06:00.550
in our server we have this express stuff
as well as remember where I put it?

86
00:06:00.550 --> 00:06:01.830
This is important here.

87
00:06:01.830 --> 00:06:03.549
We have this folder called Data up here,

88
00:06:03.549 --> 00:06:05.750
which we're going to
want to keep track of.

89
00:06:05.750 --> 00:06:08.270
This is the source of truth for the data.

90
00:06:08.270 --> 00:06:13.470
So the back end just, oops,
it's a huge file, more than 5,000 items.

91
00:06:13.470 --> 00:06:17.880
So the YAML VS code plugin
is barking at me, and so

92
00:06:17.880 --> 00:06:21.440
that's really what this consists of.

93
00:06:21.440 --> 00:06:24.040
A data, some models, a UI and a server.

94
00:06:24.040 --> 00:06:28.054
And that already gives us
a good starting point for

95
00:06:28.054 --> 00:06:31.680
starting to peel some
of this apart as well.

96
00:06:31.680 --> 00:06:36.400
We have this utilities thing,
which is just some formatting stuff.

97
00:06:36.400 --> 00:06:41.599
Mostly this is used in the ui, I think
exclusively it's used in the UI and

98
00:06:41.599 --> 00:06:45.280
converting an RGB color to
like a CSS value for rgb.

99
00:06:46.930 --> 00:06:48.530
So that's it.

100
00:06:48.530 --> 00:06:50.370
That's all this app consists of.

101
00:06:50.370 --> 00:06:57.746
Now we're going to begin the process of
taking this package as it exists today and

102
00:06:57.746 --> 00:07:04.050
taking the smallest step we can to
making this into a pnpm workspace.

103
00:07:04.050 --> 00:07:09.090
At the end of this step, we're going
to be able to run the same tasks.

104
00:07:09.090 --> 00:07:10.290
Build lint test.

105
00:07:12.460 --> 00:07:16.163
Just so
we capture the starting point here,

106
00:07:16.163 --> 00:07:19.676
I can also run prettier to format things.

107
00:07:23.420 --> 00:07:27.993
&gt;&gt; Mike North: I can run this check
command, which it's type checking,

108
00:07:27.993 --> 00:07:33.100
which requires a special command
in the svelte world as well.

109
00:07:33.100 --> 00:07:34.140
So you can think of them.

110
00:07:34.140 --> 00:07:37.420
I've got a bunch of commands here and
they're all in the package JSON.

111
00:07:38.610 --> 00:07:43.490
You know, we've got build lint test,
some test variants here, Lint format.

112
00:07:43.490 --> 00:07:47.780
What we want is to see that we
get most of these working, but

113
00:07:47.780 --> 00:07:53.211
in a world where we've restructured
the way the code is in this project and

114
00:07:53.211 --> 00:07:58.816
we can sort of see that we've got a
workspace but with only one package in it,

115
00:07:58.816 --> 00:08:03.570
then we're going to begin
the process of factoring things out.

