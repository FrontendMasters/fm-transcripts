WEBVTT

1
00:00:00.240 --> 00:00:05.590
&gt;&gt; Mike North: In this next section,
what we're going to take on is breaking,

2
00:00:05.590 --> 00:00:10.400
like factoring another concern
out of the UI package.

3
00:00:10.400 --> 00:00:11.680
We have a server.

4
00:00:11.680 --> 00:00:13.827
We have that express server and

5
00:00:13.827 --> 00:00:19.440
the data that it needs in order to produce
an API response when you ask for it.

6
00:00:19.440 --> 00:00:21.942
And we're going to factor
that out of the UI project so

7
00:00:21.942 --> 00:00:23.920
that we'll end up with three packages.

8
00:00:23.920 --> 00:00:27.748
At the end of this,
we're going to have the models package and

9
00:00:27.748 --> 00:00:31.810
both the server package and
the UI package will depend on models.

10
00:00:31.810 --> 00:00:36.818
We will now have a nice setup
where we can examine how does

11
00:00:36.818 --> 00:00:43.107
a shared dependency work and we can
start to poke at different tasks and

12
00:00:43.107 --> 00:00:48.450
how they can operate while
being aware of that dependency.

13
00:00:50.450 --> 00:00:58.603
Step one, let me give us a little
clean folder structure here.

14
00:00:58.603 --> 00:01:02.938
So we're gonna make a server folder,

15
00:01:02.938 --> 00:01:08.230
mkdir -p packages/server/src and tests.

16
00:01:10.870 --> 00:01:11.510
There we go.

17
00:01:14.310 --> 00:01:17.880
Step two, we're going to move the.

18
00:01:17.880 --> 00:01:20.634
We're going to go into the UI project and

19
00:01:20.634 --> 00:01:24.040
we're going to move the data
folder into Server.

20
00:01:26.680 --> 00:01:34.080
We're going to grab all of
the TypeScript modules in Source Server.

21
00:01:34.080 --> 00:01:37.880
We're going to grab all those and we're
going to bring those into Source up here.

22
00:01:42.920 --> 00:01:44.560
And I'm not going to update imports.

23
00:01:44.560 --> 00:01:46.020
We're going to like.

24
00:01:46.020 --> 00:01:47.380
We'll figure that out.

25
00:01:47.380 --> 00:01:50.481
And then finally, tests.

26
00:01:50.481 --> 00:01:56.282
There is a server test and
I'm gonna move that into server/tests.

27
00:01:59.039 --> 00:02:02.820
So we've moved over all the source
code and the tests and the data.

28
00:02:02.820 --> 00:02:08.008
We can delete these two server folders
if you want, just to be nice and

29
00:02:08.008 --> 00:02:12.043
clean, but
it won't matter if you leave them alone.

30
00:02:12.043 --> 00:02:18.616
Cool, all right, we need a very basic
package.json for our new server project.

31
00:02:18.616 --> 00:02:20.270
And I'm just going to borrow.

32
00:02:21.710 --> 00:02:26.393
I'm going to grab actually all three
of these things, both TS configs and

33
00:02:26.393 --> 00:02:29.111
the package JSON from our models project,

34
00:02:29.111 --> 00:02:31.848
because a lot of it's
going to be the same.

35
00:02:31.848 --> 00:02:33.812
These essentially are just,

36
00:02:33.812 --> 00:02:39.400
they're both sort of Node libraries that
don't involve any fancy UI of some sort.

37
00:02:39.400 --> 00:02:46.120
And we should be able to sort of make all
that work with some minor adjustments.

38
00:02:47.240 --> 00:02:52.142
Oop, sorry, I'm gonna copy them and
we're gonna make some adjustments.

39
00:02:52.142 --> 00:02:55.560
So here we'll say this is server.

40
00:02:55.560 --> 00:03:00.424
We'll keep our convention here,
although bluntly it matters less because

41
00:03:00.424 --> 00:03:03.320
the server kind of has
an NPM script to start.

42
00:03:03.320 --> 00:03:05.759
If it exported a function
that started the server,

43
00:03:05.759 --> 00:03:08.370
we would care about
downstream dependencies.

44
00:03:08.370 --> 00:03:12.420
But this is a leaf level dependency.

45
00:03:12.420 --> 00:03:15.192
Maybe we delete it just in case it
prevents someone from accidentally

46
00:03:15.192 --> 00:03:15.970
importing stuff.

47
00:03:17.330 --> 00:03:20.690
All right, looking at tests,
this all still applies.

48
00:03:20.690 --> 00:03:22.970
Linting still applies,
build still applies.

49
00:03:22.970 --> 00:03:27.232
This is all exactly what we want here.

50
00:03:27.232 --> 00:03:31.610
It's still like,
we have excess dependencies here.

51
00:03:31.610 --> 00:03:34.197
I'm leaving them because
we have a tool for that and

52
00:03:34.197 --> 00:03:36.270
it'll help us clean all that up.

53
00:03:36.270 --> 00:03:38.670
But I think this is a good
starting point here.

54
00:03:38.670 --> 00:03:42.936
Now we depend on models.

55
00:03:42.936 --> 00:03:49.230
So if we look in our code, it's not there,
it's in load-data for sure.

56
00:03:49.230 --> 00:03:50.230
This is now broken.

57
00:03:50.230 --> 00:03:51.965
We just had it working and
it's broken now.

58
00:03:51.965 --> 00:03:56.444
And the reason is we haven't
described that inter-workspace

59
00:03:56.444 --> 00:04:00.990
dependency where server
depends on the models package.

60
00:04:00.990 --> 00:04:06.180
So just as before,
we have to go and take care of that.

61
00:04:06.180 --> 00:04:08.980
It's not a dev dependency,
it is a dependency.

62
00:04:15.220 --> 00:04:16.820
Again, the PNPM thing.

63
00:04:16.820 --> 00:04:17.620
Workspace.

64
00:04:20.180 --> 00:04:20.680
Great.

65
00:04:28.350 --> 00:04:29.470
Let's see if this works.

66
00:04:29.470 --> 00:04:37.716
So I'm going to go into packages server.

67
00:04:37.716 --> 00:04:42.829
Wait, first we touched a package.json,
we've gotta run pnpmi.

68
00:04:45.998 --> 00:04:51.219
Okay, if we look at our node_modules
folder, got some nice sym linking here.

69
00:04:54.979 --> 00:04:56.120
Great.

70
00:04:56.120 --> 00:04:58.246
Hey look, there's seeds.

71
00:04:58.246 --> 00:04:59.160
So it's showing up.

72
00:04:59.160 --> 00:05:02.280
It's actually interestingly,
it's going to be.

73
00:05:03.800 --> 00:05:09.960
If we take a peek in our pnpm state here,
just going for seeds, wherever that is.

74
00:05:11.160 --> 00:05:12.028
S.

75
00:05:13.186 --> 00:05:17.880
It's not here.

76
00:05:17.880 --> 00:05:20.035
There's probably some other
mechanism where that was happening.

77
00:05:20.035 --> 00:05:25.530
I was curious, is it going to actually
symlink it in this node_modules folder?

78
00:05:25.530 --> 00:05:28.923
But importantly here,

79
00:05:28.923 --> 00:05:33.162
if we were to go into source and

80
00:05:33.162 --> 00:05:37.909
do this, it's the same file, so

81
00:05:37.909 --> 00:05:44.370
it's symlinking right into our workspace.

82
00:05:45.570 --> 00:05:48.130
Same file but
different undo redo stack apparently.

83
00:05:50.380 --> 00:05:53.340
Great.
So we did pnpmi PNPM build.

84
00:05:59.180 --> 00:06:04.300
We have a build output in dist.

85
00:06:05.820 --> 00:06:08.340
Let's try to start the server.

86
00:06:08.340 --> 00:06:14.868
And taking a look at our NPM tasks,
we have a dev thing here,

87
00:06:14.868 --> 00:06:19.308
but this is more about watch the build and

88
00:06:19.308 --> 00:06:23.170
do a rebuild when files change.

89
00:06:23.170 --> 00:06:26.530
Dev means something different
in the context of our server.

90
00:06:26.530 --> 00:06:30.487
What we want is to use TSX
which if you use TS node and

91
00:06:30.487 --> 00:06:34.176
haven't checked out TSX yet,
give it a look.

92
00:06:34.176 --> 00:06:40.210
It does same thing better,
more support for modern module systems.

93
00:06:40.210 --> 00:06:42.000
TS node.

94
00:06:42.000 --> 00:06:45.680
You can use experimental loaders for
things, but TSX is pretty sweet.

95
00:06:46.880 --> 00:06:51.496
There is a task that was defined in our
original project that takes care of

96
00:06:51.496 --> 00:06:55.520
starting our server and
it's in our UiProjects package JSON.

97
00:06:55.520 --> 00:06:56.640
Here it is.

98
00:06:56.640 --> 00:07:00.277
So we're saying TSX watch
preserve watch output and

99
00:07:00.277 --> 00:07:03.840
it's just running
the TypeScript file natively.

100
00:07:03.840 --> 00:07:08.160
So we're not worried about
an incremental build happening.

101
00:07:08.160 --> 00:07:10.920
All of that's taken care of for
us already.

102
00:07:10.920 --> 00:07:13.080
So I'm going to grab this line here.

103
00:07:13.080 --> 00:07:18.719
It doesn't really mean anything in
the context of the UI project anymore.

104
00:07:18.719 --> 00:07:23.080
Granted, this task depends on it.

105
00:07:23.080 --> 00:07:27.501
So we've broken our holistic
pnpm dev experience,

106
00:07:27.501 --> 00:07:31.160
we're gonna get around to fixing that.

107
00:07:31.160 --> 00:07:36.738
So what we are going to be able
to do is start this server up and

108
00:07:36.738 --> 00:07:42.542
see that it listens on localhost 3000,
and we can hit it,

109
00:07:42.542 --> 00:07:48.591
and we will work our way towards
actually being able to see data.

110
00:07:48.591 --> 00:07:52.582
Okay, error file not found.

111
00:07:52.582 --> 00:07:54.310
Well, what does that mean?

112
00:07:55.430 --> 00:07:59.830
File server Source server index ts.

113
00:07:59.830 --> 00:08:01.841
So that clearly means this, right?

114
00:08:01.841 --> 00:08:04.371
It's just src/index ts now.

115
00:08:04.371 --> 00:08:11.620
This was a server subfolder of src in
the UI project, now it's just index ts.

116
00:08:11.620 --> 00:08:17.488
Try again, and
we're going to click on this link.

117
00:08:17.488 --> 00:08:24.820
And we're gonna say /api seeds and
we get our seed data there.

118
00:08:26.260 --> 00:08:31.103
Now, we benefited from
something nice here, and

119
00:08:31.103 --> 00:08:36.405
that is we dragged our data
folder in from we have placed

120
00:08:36.405 --> 00:08:41.708
our data folder in a spot where
the relative path to that

121
00:08:41.708 --> 00:08:47.550
data folder is unaltered between
the load data file here.

122
00:08:47.550 --> 00:08:51.078
So if you put that data folder in
a different place, this line of code here,

123
00:08:51.078 --> 00:08:54.550
the data file path is what to troubleshoot
if you didn't see that seed data

124
00:08:54.550 --> 00:08:55.710
coming through.

125
00:08:55.710 --> 00:09:03.110
But now we have a working ui,
we have a working models package.

126
00:09:03.110 --> 00:09:05.470
We can see the dependencies
between all of them.

127
00:09:05.470 --> 00:09:10.599
If we back out,
we can see that we have a holistic

128
00:09:10.599 --> 00:09:15.475
build process that first
starts in models and

129
00:09:15.475 --> 00:09:20.109
then builds the UI and then builds server.

130
00:09:20.109 --> 00:09:25.471
This is pnpm having an awareness
sort of of the DAG,

131
00:09:25.471 --> 00:09:29.850
the directed graph of our dependencies.

132
00:09:29.850 --> 00:09:35.044
And it knows to build the things
everything depends on first and

133
00:09:35.044 --> 00:09:39.756
then works its way towards
the leaf level dependencies.

134
00:09:39.756 --> 00:09:45.275
So we should be able
now to run pnpm build,

135
00:09:45.275 --> 00:09:50.331
pnpm check, pnpm build, pnpm test.

136
00:09:57.859 --> 00:09:59.100
It's a lot of dopamine right there.

137
00:09:59.100 --> 00:10:00.300
Lots of green check marks.

138
00:10:00.300 --> 00:10:01.180
Everything looks good.

