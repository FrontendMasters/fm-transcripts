WEBVTT

1
00:00:00.172 --> 00:00:02.800
&gt;&gt; Mike: So now we're installing Nx.

2
00:00:02.800 --> 00:00:04.160
My workspace is ready.

3
00:00:04.160 --> 00:00:06.240
It's giving me a link to connect to it.

4
00:00:07.360 --> 00:00:10.400
This is going to take me to NX cloud.

5
00:00:13.200 --> 00:00:16.880
I already have given it access here,
so I think we're good.

6
00:00:18.880 --> 00:00:20.704
Great.

7
00:00:20.704 --> 00:00:27.670
So now I want to run pnpm exec
nx browser run-many -t build.

8
00:00:28.710 --> 00:00:32.710
So this is gonna run the build target for
every project in the workspace.

9
00:00:32.710 --> 00:00:37.270
We're going to run it again to see
the result of cache computation.

10
00:00:37.270 --> 00:00:38.790
So here we go.

11
00:00:38.790 --> 00:00:40.950
And we don't even need this.

12
00:00:40.950 --> 00:00:46.599
Exec is this is superfluous.

13
00:00:46.599 --> 00:00:47.670
So simplify things.

14
00:00:48.790 --> 00:00:54.665
So we're saying pnpm and then because
this is a JavaScript CLI tool,

15
00:00:54.665 --> 00:01:00.600
NX Run Many is the command we're
using when invoking the CLI tool.

16
00:01:00.600 --> 00:01:04.120
And this is saying T for target build.

17
00:01:09.000 --> 00:01:11.419
So it's running build for three targets.

18
00:01:11.419 --> 00:01:14.280
It has a nice fancy UI that'll exit.

19
00:01:14.280 --> 00:01:15.000
Great.

20
00:01:15.000 --> 00:01:16.680
Two seconds.

21
00:01:16.680 --> 00:01:18.360
And here's the same command again.

22
00:01:21.250 --> 00:01:26.961
23 milliseconds or
sorry, 202 milliseconds.

23
00:01:26.961 --> 00:01:30.779
Maybe 23 for each of those tasks to run or

24
00:01:30.779 --> 00:01:34.934
something like that, it is lightning fast.

25
00:01:34.934 --> 00:01:40.295
If you use Turbo build, the reason
I got a question at the beginning

26
00:01:40.295 --> 00:01:45.490
of this course about which do I prefer,
Nx or Turbo build?

27
00:01:45.490 --> 00:01:50.243
I love them both because
they both do this,

28
00:01:50.243 --> 00:01:54.998
they both involve distributed caching and

29
00:01:54.998 --> 00:02:00.017
they both have the potential
to dramatically

30
00:02:00.017 --> 00:02:07.543
speed up your builds Here again,
as you can see from the CLI output,

31
00:02:07.543 --> 00:02:13.246
nothing stops us from continuing to sorry,
pnpm.

32
00:02:13.246 --> 00:02:19.420
Yep, nothing stops us from using Lerna for
some things if we like that --since.

33
00:02:19.420 --> 00:02:22.780
Or we can drop down and
use NX when we have to.

34
00:02:25.020 --> 00:02:26.300
It's all good.

35
00:02:26.300 --> 00:02:29.660
Just think of it as almost a high
level API and a low level API.

36
00:02:32.220 --> 00:02:35.396
Here's the config file
that it generated for us.

37
00:02:35.396 --> 00:02:41.830
So here's your JSON schema and
we've got target defaults.

38
00:02:41.830 --> 00:02:46.720
And what these mean is essentially

39
00:02:46.720 --> 00:02:51.609
we could start to get rid of the test

40
00:02:51.609 --> 00:02:56.500
command in our package JSONs of our

41
00:02:56.500 --> 00:03:01.910
monorepo packages like this models.

42
00:03:03.740 --> 00:03:05.500
I can get rid of test.

43
00:03:07.660 --> 00:03:10.497
Do not click that.

44
00:03:10.497 --> 00:03:12.100
We'll do test and lint.

45
00:03:12.100 --> 00:03:16.220
We'll get rid of both of those in every
package just to show how this works.

46
00:03:18.220 --> 00:03:25.740
Lint and test and lint and test.

47
00:03:33.190 --> 00:03:38.270
And the reason I'm doing this is it's like
a subtle difference between LERNA and nx.

48
00:03:38.270 --> 00:03:43.469
So this

49
00:03:43.469 --> 00:03:48.668
should

50
00:03:48.668 --> 00:03:54.334
work.

51
00:03:54.334 --> 00:03:58.195
I know what's happening here, derp.

52
00:03:58.195 --> 00:04:05.360
All right,
without further configuration here.

53
00:04:06.960 --> 00:04:12.753
Yeah, if it's just arranged like this when
we say there are targets, you can think of

54
00:04:12.753 --> 00:04:18.480
these almost like commands to run within
packages without doing anything here.

55
00:04:18.480 --> 00:04:21.760
This is just simply saying run the script.

56
00:04:21.760 --> 00:04:26.578
But what you can do is set up
additional configuration here,

57
00:04:26.578 --> 00:04:30.080
like, let's just go to the docs and xvite.

58
00:04:31.520 --> 00:04:34.617
There it is.

59
00:04:34.617 --> 00:04:40.476
You could set up this plugin, which,

60
00:04:40.476 --> 00:04:47.259
let me find a good example,
I just need one.

61
00:04:51.311 --> 00:04:59.381
Tasks and caching, No,

62
00:04:59.381 --> 00:05:04.180
I want something that's
using nice arguments here.

63
00:05:13.790 --> 00:05:15.150
Here we go.

64
00:05:15.150 --> 00:05:16.350
Look at this.

65
00:05:16.350 --> 00:05:22.551
So if we grab this here, we're no
longer in a world where we're saying,

66
00:05:22.551 --> 00:05:26.590
I'm just running pnpm
lint in each package.

67
00:05:26.590 --> 00:05:31.064
What we can do here is in that
one nxjson file we could say,

68
00:05:31.064 --> 00:05:33.630
here's how linting works.

69
00:05:33.630 --> 00:05:39.637
In my repo, I have a source folder,
I have tests in a test folder,

70
00:05:39.637 --> 00:05:45.100
I have an eslint config at
the root of my project.

71
00:05:45.100 --> 00:05:50.430
So this is like when you're using these
executors, which these are referring

72
00:05:50.430 --> 00:05:55.033
to plugins effectively, where this
is the package of the plugin and

73
00:05:55.033 --> 00:06:00.380
this is almost like the command that
you're running within that plugin.

74
00:06:00.380 --> 00:06:04.241
Then you can start to say,
all right, the source of truth for

75
00:06:04.241 --> 00:06:07.210
running tasks in all of
my monorepo packages.

76
00:06:07.210 --> 00:06:11.238
It's more in the NX configuration
than anything else.

77
00:06:11.238 --> 00:06:17.570
And that's where you can start to factor
out the individual per module NPM scripts.

78
00:06:17.570 --> 00:06:23.330
Now, there's still room on a per project
basis for you to customize that.

79
00:06:23.330 --> 00:06:28.370
What you end up doing is creating
one of these project JSON files.

80
00:06:28.370 --> 00:06:37.020
And the nxjson files target defaults
field is very, very similar to this.

81
00:06:37.020 --> 00:06:42.690
It's basically the fallbacks if there
are no package specific instructions for

82
00:06:42.690 --> 00:06:46.700
how does lint run,
how does build run, how does dev run?

83
00:06:48.220 --> 00:06:53.112
But it really lets you strip a lot
of responsibility out of those

84
00:06:53.112 --> 00:06:58.281
package JSON files and make it more
about stating dependencies and

85
00:06:58.281 --> 00:07:00.694
stating exports and imports.

86
00:07:00.694 --> 00:07:05.564
And you're kinda moving
the task definition into a tool

87
00:07:05.564 --> 00:07:11.110
that can have an increasingly
high amount of awareness.

88
00:07:11.110 --> 00:07:12.630
I want to point you to one more thing.

89
00:07:12.630 --> 00:07:17.702
This depends on thing we could do this and

90
00:07:17.702 --> 00:07:20.990
what that would let us do.

91
00:07:20.990 --> 00:07:28.697
Sorry, let me undo some of
the changes I made here.

92
00:07:28.697 --> 00:07:31.390
Wanna add these back in,
so that's in models.

93
00:07:32.430 --> 00:07:37.670
This is in server test and lint.

94
00:07:37.670 --> 00:07:38.170
Great.

95
00:07:40.750 --> 00:07:41.630
Lint and test.

96
00:07:41.630 --> 00:07:42.230
Great, great.

97
00:07:42.230 --> 00:07:43.870
Okay, so we're back out.

98
00:07:43.870 --> 00:07:50.134
And now if I were to say nxrun test,

99
00:07:50.134 --> 00:07:55.750
see how it's running the build

100
00:07:55.750 --> 00:08:00.291
in addition to the test.

101
00:08:00.291 --> 00:08:05.110
Let's say you were set up in your Monorepo
such that you really wanna point to

102
00:08:05.110 --> 00:08:09.720
that build output folder when you're
depending on a Monorepo package.

103
00:08:11.320 --> 00:08:14.294
Some people would make this choice
because you'd say, hey listen,

104
00:08:14.294 --> 00:08:16.200
that's the package I'm about to publish.

105
00:08:17.650 --> 00:08:22.347
I want to actually be pointing at that
dist folder and run against it in as close

106
00:08:22.347 --> 00:08:26.991
a way as can be to the way an external
user would be integrating against this.

107
00:08:26.991 --> 00:08:30.932
So no tricks.

108
00:08:30.932 --> 00:08:33.330
Well, you'd say we gotta
do the build first.

109
00:08:34.690 --> 00:08:36.770
We can't run tests
without the build first.

110
00:08:36.770 --> 00:08:39.890
Another good reason to do that is if
you're not using something like vitest.

111
00:08:39.890 --> 00:08:43.628
If you're using Jest and
it's operating in the world of

112
00:08:43.628 --> 00:08:48.241
needing compiled JavaScript and
declaration files in order to run,

113
00:08:48.241 --> 00:08:52.710
it can't run just by pointing
typescript modules at it.

114
00:08:52.710 --> 00:08:53.790
You do this as well.

115
00:08:53.790 --> 00:08:57.770
But this gives you so
much more control than lerna,

116
00:08:57.770 --> 00:09:02.390
which just knows task and
then dependency graph.

117
00:09:02.390 --> 00:09:08.118
The additional degree of freedom here you
get is like task dependency graph and

118
00:09:08.118 --> 00:09:13.674
interdependencies between tasks like
run prettier first before you lint so

119
00:09:13.674 --> 00:09:17.057
that you auto fix all of
the code formatting and

120
00:09:17.057 --> 00:09:22.177
then let's see what the linting says
as opposed to the other direction

121
00:09:22.177 --> 00:09:27.556
where you'd say all right, eslint lit
up a bunch of formatting issues and

122
00:09:27.556 --> 00:09:31.070
now we've auto formatted
them after the fact.

123
00:09:31.070 --> 00:09:35.863
But you could see how it's valuable to be
able to sort of arrange your tasks and

124
00:09:35.863 --> 00:09:40.951
then have your dependency graph and then
be able to say, all right, now taking all

125
00:09:40.951 --> 00:09:46.560
of that into account, only run the things
that are relevant to what I've changed.

126
00:09:46.560 --> 00:09:51.591
Now we're starting to see
the ability to have a development

127
00:09:51.591 --> 00:09:57.942
experience that feels small even as
your project is starting to get large.

128
00:09:57.942 --> 00:10:01.440
So we were using PNPM workspaces
to organize packages.

129
00:10:01.440 --> 00:10:06.439
What are the benefits or trade offs of
using NX's project based setup compared

130
00:10:06.439 --> 00:10:09.020
to relying just on PNPM for workspaces?

131
00:10:16.220 --> 00:10:18.380
I'm not sure how to answer that one.

132
00:10:19.820 --> 00:10:22.175
NX is not a package manager and so

133
00:10:22.175 --> 00:10:27.860
it's still going to be the thing that's
managing your node_modules folder.

134
00:10:27.860 --> 00:10:29.900
I think maybe this is the way
to answer that question.

135
00:10:31.020 --> 00:10:34.976
Pnpm, obviously it still has it still has

136
00:10:34.976 --> 00:10:39.384
some awareness of if we
run this command here,

137
00:10:39.384 --> 00:10:44.356
it knows what depends on
what it knows models first,

138
00:10:44.356 --> 00:10:49.160
then server and
UI can happen in any order.

139
00:10:49.160 --> 00:10:55.960
But what I would say is nx it can't
replace PNPM nor Does it intend to?

140
00:10:55.960 --> 00:11:01.758
Because that's your package manager
that's managing your dependencies and

141
00:11:01.758 --> 00:11:04.053
things where they overlap is.

142
00:11:04.053 --> 00:11:11.770
I'd say PNPM is a less sophisticated
task runner and orchestrator than Nx.

143
00:11:11.770 --> 00:11:16.213
If for no other reason,
it doesn't really give you a great way of

144
00:11:16.213 --> 00:11:20.650
understanding interdependencies
between tasks.

145
00:11:20.650 --> 00:11:25.950
PNPM has no knowledge of git diffs and
how they can be joined with

146
00:11:25.950 --> 00:11:32.153
the dependency graph to run only
the subset of things that you need to run.

147
00:11:32.153 --> 00:11:33.710
And PNPM has no idea.

148
00:11:33.710 --> 00:11:39.082
It doesn't give you a way to say,
well, when I say I want to run test,

149
00:11:39.082 --> 00:11:43.562
I really want to run build first
anytime I'm running test or

150
00:11:43.562 --> 00:11:46.590
reuse an existing build artifact.

151
00:11:46.590 --> 00:11:53.140
So use package managers for
the package manager role.

152
00:11:53.140 --> 00:11:56.321
But as your monorepo starts
to get interesting and

153
00:11:56.321 --> 00:12:00.485
as build speeds start to be a little
bit of a snag on productivity,

154
00:12:00.485 --> 00:12:05.140
which your project gets to a sizable
point, it's going to happen.

155
00:12:05.140 --> 00:12:11.460
That's where you want to lean on something
like lerna, at least for basics.

156
00:12:11.460 --> 00:12:15.713
And then you can eject out to NX as you
want to get more sophisticated about

157
00:12:15.713 --> 00:12:18.940
saying, all right, well,
we now have a dozen tasks.

158
00:12:18.940 --> 00:12:20.320
We've got.

159
00:12:20.320 --> 00:12:22.292
We've got many package and syncpack and

160
00:12:22.292 --> 00:12:26.480
we've got formatting of the package JSON
files and prettier to format other things.

161
00:12:26.480 --> 00:12:30.213
We've got svelte type checking and
then we've got eslint and

162
00:12:30.213 --> 00:12:34.808
maybe we've got one set of linting
rules that we're actually enforcing and

163
00:12:34.808 --> 00:12:38.469
then another set that we
aspirationally want to switch to and

164
00:12:38.469 --> 00:12:42.720
we want to see that report but
not fail the build based on that.

165
00:12:42.720 --> 00:12:44.640
Then finally we can run our tests.

166
00:12:44.640 --> 00:12:49.163
If you want that kind of control,
that's where you're going to end up

167
00:12:49.163 --> 00:12:53.994
ejecting out of LERNA and getting into
NX or maintaining the alternative,

168
00:12:53.994 --> 00:12:58.822
which is a very elaborate set of shell
scripts that are trying to place these

169
00:12:58.822 --> 00:13:03.080
things in order and
that will get very unwieldy very fast.

170
00:13:03.080 --> 00:13:06.280
So I would say if you start to have
these needs, just start using nx.

171
00:13:06.280 --> 00:13:11.183
Skip the point where you fall under
the crushing weight of a massive pile

172
00:13:11.183 --> 00:13:13.480
of disorganized shell scripts.

