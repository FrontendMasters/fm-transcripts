WEBVTT

1
00:00:00.160 --> 00:00:03.760
&gt;&gt; Mike North: We need to now thread
models into the UI code base.

2
00:00:03.760 --> 00:00:06.160
So if we look, we got some problems.

3
00:00:07.840 --> 00:00:09.440
See these red squiggles happening?

4
00:00:09.440 --> 00:00:12.640
These files aren't in
the UI package anymore.

5
00:00:12.640 --> 00:00:17.422
And we need some way of stating
that a dependency exists where

6
00:00:17.422 --> 00:00:22.640
the UI package needs this new
models package that we created.

7
00:00:22.640 --> 00:00:24.735
So we're gonna go ahead and
take care of that.

8
00:00:24.735 --> 00:00:31.268
And we'll do this by,
by going to the UI packages, package.json.

9
00:00:31.268 --> 00:00:37.748
And we're gonna go into dependencies.

10
00:00:37.748 --> 00:00:43.073
And here, we'll name our monorepo
dependency that we depend on,

11
00:00:43.073 --> 00:00:44.510
seeds/models.

12
00:00:46.030 --> 00:00:49.310
And the specifier here is going
to be something interesting.

13
00:00:49.310 --> 00:00:53.270
This is a PNPM specific construct.

14
00:00:57.110 --> 00:01:03.441
So what we're saying here is this is
a package coming from the workspace and

15
00:01:03.441 --> 00:01:07.830
I will tolerate any
version of that package.

16
00:01:07.830 --> 00:01:12.665
What's going to happen is we will
say when PNPM needs to resolve

17
00:01:12.665 --> 00:01:17.137
this dependency,
it will first bias towards identifying

18
00:01:17.137 --> 00:01:21.630
whether the local package
meets this version specifier.

19
00:01:21.630 --> 00:01:23.390
In this case we'll take anything.

20
00:01:23.390 --> 00:01:24.990
So that will always be met.

21
00:01:24.990 --> 00:01:28.590
But you could also put a number here and
what that would mean.

22
00:01:28.590 --> 00:01:33.371
Somebody in class was talking about how
sometimes people do have monorepos with

23
00:01:33.371 --> 00:01:36.270
versioned inter monorepo dependencies.

24
00:01:36.270 --> 00:01:40.752
You could put something like that
there and you would pull down,

25
00:01:40.752 --> 00:01:46.150
you'd go to NPM and you'd grab the
appropriate version of the package here.

26
00:01:46.150 --> 00:01:48.260
But I advise go with this.

27
00:01:48.260 --> 00:01:50.540
This is where you get a lot of
benefits from the monorepo.

28
00:01:51.740 --> 00:01:53.020
We have a question from chat.

29
00:01:54.380 --> 00:01:57.580
&gt;&gt; Speaker 2: Why add types and
modules explicitly?

30
00:01:57.580 --> 00:02:00.380
Currently our code works in the same way.

31
00:02:00.380 --> 00:02:03.653
&gt;&gt; Mike North: Interesting,
so if you go up to,

32
00:02:06.400 --> 00:02:09.820
Well, let's explore that idea.

33
00:02:09.820 --> 00:02:15.579
I'm going to get the UI package working,
then I'm going to remove those two entries

34
00:02:15.579 --> 00:02:20.950
from the package JSON of the models folder
and let's see if things still work.

35
00:02:20.950 --> 00:02:22.550
I would be surprised if they do.

36
00:02:22.550 --> 00:02:28.940
It's possible, but let's see what
that would mean is something

37
00:02:28.940 --> 00:02:36.270
is inferring that that declaration file
is the entry point for my package.

38
00:02:36.270 --> 00:02:41.115
Because if we go back to
the models package JSON,

39
00:02:41.115 --> 00:02:47.040
there's no information in
here except in these places.

40
00:02:47.040 --> 00:02:49.480
What's the entry point of this library?

41
00:02:49.480 --> 00:02:51.840
Is it main js?

42
00:02:51.840 --> 00:02:55.840
Is it disk/source index.js?

43
00:02:55.840 --> 00:02:58.000
So typically you have to specify this.

44
00:02:58.000 --> 00:03:02.360
I would assume it's kind of dangerous
to have a convention like that.

45
00:03:02.360 --> 00:03:07.000
Like what if you had a main and an index,
this kind of bold assumption to make that

46
00:03:07.000 --> 00:03:09.890
if you just name something
a particular way.

47
00:03:09.890 --> 00:03:14.550
But let's poke at that and
we'll experiment and See if in fact these

48
00:03:14.550 --> 00:03:19.970
are necessary components, as far as I
know, they are absolutely necessary.

49
00:03:21.250 --> 00:03:22.530
Did you have a question?

50
00:03:22.530 --> 00:03:27.936
&gt;&gt; Speaker 3: Yeah, so
we're pointing to a local directory with

51
00:03:27.936 --> 00:03:32.850
that workspace string, basically, right?

52
00:03:33.890 --> 00:03:35.650
&gt;&gt; Mike North: Yes.
You're saying two things.

53
00:03:35.650 --> 00:03:43.570
One, this dependency can be found
inside this PNPM workspace.

54
00:03:43.570 --> 00:03:49.170
And I am willing to work with any
version that you have for me.

55
00:03:49.170 --> 00:03:53.516
But what that happens to mean
is because there's this part of

56
00:03:53.516 --> 00:03:58.797
the resolution algorithm where you
first try to see if this requirement,

57
00:03:58.797 --> 00:04:03.229
which will accept anything,
that versioning requirement,

58
00:04:03.229 --> 00:04:06.060
can be met within the local workspace.

59
00:04:06.060 --> 00:04:11.387
And of course it will, because
you'll accept anything, then you'll

60
00:04:11.387 --> 00:04:16.780
end up linking to that workspace
copy of that monorepo dependency.

61
00:04:16.780 --> 00:04:19.660
&gt;&gt; Speaker 3: And so
this is a pnpm specific feature?

62
00:04:19.660 --> 00:04:21.180
&gt;&gt; Mike North: This is.

63
00:04:21.180 --> 00:04:25.799
Other package managers have
similar concepts here, but

64
00:04:25.799 --> 00:04:29.350
this index here is a PNPM construct.

65
00:04:29.350 --> 00:04:34.018
&gt;&gt; Speaker 3: And is it crawling kind
of the directory structure, looking for

66
00:04:34.018 --> 00:04:39.030
other package.json files to know
where to find that dependency?

67
00:04:39.030 --> 00:04:43.350
&gt;&gt; Mike North: It does, but
yes, it does as part of pnpm i.

68
00:04:43.350 --> 00:04:46.710
But remember, it kind of already knows.

69
00:04:48.950 --> 00:04:51.850
It's like crawling a very
small set of things.

70
00:04:51.850 --> 00:04:52.490
Right?

71
00:04:52.490 --> 00:04:57.248
It's crawling the folder that we've set,
our packages are in, and

72
00:04:57.248 --> 00:05:01.610
it's looking at each package and
seeing like, where is this?

73
00:05:01.610 --> 00:05:07.203
And if you look, if you're adventurous and
you want to spelunk through here,

74
00:05:07.203 --> 00:05:12.203
like as part of setting up that package,
there's some internal state

75
00:05:12.203 --> 00:05:17.300
that PNPM has where it already knows,
like, here's the folder.

76
00:05:17.300 --> 00:05:20.660
This is exactly where it
has already crawled that.

77
00:05:20.660 --> 00:05:21.860
It has already crawled that.

78
00:05:21.860 --> 00:05:26.848
So what's happening is as it evaluates
each of the packages that it finds in

79
00:05:26.848 --> 00:05:31.620
that PackageStar folder,
it's creating this projects object.

80
00:05:31.620 --> 00:05:36.338
And then when it comes time to
perform that resolution algorithm,

81
00:05:36.338 --> 00:05:41.223
it like absolutely knows what it has
to work with in the latest state it

82
00:05:41.223 --> 00:05:43.400
has about this monorepo.

83
00:05:43.400 --> 00:05:46.804
So yeah, the crawling is happening, but

84
00:05:46.804 --> 00:05:51.000
it's happening more ahead
of time than you think.

85
00:05:53.000 --> 00:05:56.920
The state is already established and
it's just sort of reading from that state.

86
00:05:56.920 --> 00:06:01.320
All right, well, let's see if this works.

87
00:06:02.440 --> 00:06:07.000
We touched a package JSON,
therefore we pnpm i.

88
00:06:10.210 --> 00:06:14.370
Okay, so
something interesting happened here.

89
00:06:14.370 --> 00:06:17.490
We can see it's got three
workspace projects.

90
00:06:17.490 --> 00:06:19.647
This is counting the root
of the workspace,

91
00:06:19.647 --> 00:06:22.050
cuz there exists
a package.json there as well.

92
00:06:24.130 --> 00:06:28.370
Let's take a look at what
ended up happening here.

93
00:06:28.370 --> 00:06:31.410
First off,
we're gonna need to update this import.

94
00:06:31.410 --> 00:06:35.340
That's the first thing that
we're going to need to do here.

95
00:06:35.340 --> 00:06:38.780
So this is going to
come from Seeds models.

96
00:06:40.380 --> 00:06:42.700
Look, that resolved nicely.

97
00:06:44.780 --> 00:06:45.754
Let's run the build and

98
00:06:45.754 --> 00:06:48.540
let's see if there are other places
where this needs to be updated.

99
00:06:50.140 --> 00:06:51.340
We want to run it in.

100
00:06:52.780 --> 00:07:00.820
Let's just get out of our packages here
up to the root of the project PNPM build.

101
00:07:00.820 --> 00:07:02.820
So this is building everything.

102
00:07:02.820 --> 00:07:06.140
Note that it's building models
before it builds the ui.

103
00:07:06.140 --> 00:07:07.700
This is not an accident.

104
00:07:07.700 --> 00:07:09.860
It understands there's
a dependency between those.

105
00:07:09.860 --> 00:07:14.769
It understands that we have to have
things in that dist folder of the models

106
00:07:14.769 --> 00:07:18.980
package in order for the UI compile
to have a chance of working.

107
00:07:20.580 --> 00:07:24.291
This looks like it worked, but remember,

108
00:07:24.291 --> 00:07:30.167
there's this separate type checking
thing that Svelte has to do and

109
00:07:30.167 --> 00:07:37.980
that's really where we're going to surface
more useful feedback here we get an error.

110
00:07:37.980 --> 00:07:39.100
I suspected we would.

111
00:07:40.140 --> 00:07:41.420
Okay, we're building ui.

112
00:07:41.420 --> 00:07:42.780
We've got this formatting thing.

113
00:07:42.780 --> 00:07:45.060
I'm going to run it again just so
that I can see the full line.

114
00:07:45.060 --> 00:07:46.660
That's what's screwing with me here.

115
00:07:46.660 --> 00:07:47.340
Hey, there we go.

116
00:07:47.340 --> 00:07:48.380
Real file names.

117
00:07:48.380 --> 00:07:50.380
So we've got our formatting.ts.

118
00:07:50.380 --> 00:07:53.860
All right, so we're importing stuff
that was from SeedPacketModel.

119
00:07:53.860 --> 00:07:55.370
This needs to come from.

120
00:07:55.370 --> 00:07:59.610
I'm going to leave it on my clipboard
because I'm going to use it over and over.

121
00:07:59.610 --> 00:08:03.850
Seeds models seed packet back.

122
00:08:03.850 --> 00:08:12.090
This is coming from Seeds
models seed packet state.

123
00:08:13.530 --> 00:08:15.530
This is going to come from Seeds models.

124
00:08:16.650 --> 00:08:21.638
And now this is actually
a an additional import from the same

125
00:08:21.638 --> 00:08:26.228
place because it's not two
separate modules, one for

126
00:08:26.228 --> 00:08:29.340
the collection, one for the model.

127
00:08:29.340 --> 00:08:34.100
It's all being exported through that
index TS at the root of our library now.

128
00:08:37.300 --> 00:08:40.980
And I know this needs type here.

129
00:08:40.980 --> 00:08:42.260
This is just type information.

130
00:08:42.260 --> 00:08:46.989
I'm leaving it as a little Easter egg for
us to find when we re enable linting and

131
00:08:46.989 --> 00:08:49.510
getting it working across our monorepo.

132
00:08:49.510 --> 00:08:52.750
Let's try building again or
checking again, rather.

133
00:08:54.350 --> 00:08:57.310
All right, couple more, seed-packet.state.

134
00:08:57.310 --> 00:08:59.646
Maybe we didn't save our file.

135
00:08:59.646 --> 00:09:00.990
No, we're getting it already.

136
00:09:03.710 --> 00:09:07.070
We need that type just encouraging us.

137
00:09:07.070 --> 00:09:11.984
This helps with tree shaking where we're
trying to eliminate dead code like unused

138
00:09:11.984 --> 00:09:15.010
dependencies as we're building for
production.

139
00:09:16.210 --> 00:09:18.856
If you sort of force yourself to say,
look,

140
00:09:18.856 --> 00:09:22.730
if we're just importing the interface,
we import it this way.

141
00:09:22.730 --> 00:09:27.494
That lets build tools kind of walk through
just the import statements and say, look,

142
00:09:27.494 --> 00:09:29.490
at runtime there is no typescript.

143
00:09:32.290 --> 00:09:36.899
We can just avoid including this package
entirely because we're only using it for

144
00:09:36.899 --> 00:09:38.650
type information.

145
00:09:38.650 --> 00:09:43.690
In this case, then Our load data function,
this is in our server.

146
00:09:43.690 --> 00:09:48.643
And again, same deal, seeds, models and

147
00:09:48.643 --> 00:09:54.570
there we go, check once more and
the build passes.

148
00:09:57.930 --> 00:10:01.588
So to loop back to that
question about types,

149
00:10:01.588 --> 00:10:05.550
I'm going to go back to
our models package JSON.

150
00:10:07.630 --> 00:10:09.790
What happens if we get rid of these?

151
00:10:09.790 --> 00:10:10.290
Save.

152
00:10:11.390 --> 00:10:12.990
I'm going to.

153
00:10:12.990 --> 00:10:20.172
Just to keep ourselves honest here,

154
00:10:20.172 --> 00:10:27.823
I want to blow away the previous build.

155
00:10:27.823 --> 00:10:33.270
Look, now,
the UI package can't resolve this.

156
00:10:34.470 --> 00:10:36.790
What it's saying is it
can't find the module.

157
00:10:36.790 --> 00:10:40.933
But really what it's saying is like,

158
00:10:40.933 --> 00:10:45.470
sorry, a more specific statement here.

159
00:10:45.470 --> 00:10:49.110
It's like, yeah, the module's there,
but I have no idea.

160
00:10:49.110 --> 00:10:52.074
Well, sorry, the dependency is there, but

161
00:10:52.074 --> 00:10:55.750
it can't find whatever we're
trying to import here.

162
00:10:55.750 --> 00:11:00.840
Like where is the specific JavaScript
file or the DTS file to get types from?

163
00:11:00.840 --> 00:11:02.040
It can't find that.

164
00:11:02.040 --> 00:11:06.229
So if we put it back,
oops, wrong package JSON,

165
00:11:06.229 --> 00:11:11.340
if we go back to the models package
JSON and we add it again and

166
00:11:11.340 --> 00:11:16.862
hit save and then build,
we can see that everything goes back and

167
00:11:16.862 --> 00:11:20.840
we can type check and we can build again.

168
00:11:20.840 --> 00:11:24.040
So that's the purpose of those two fields.

169
00:11:24.040 --> 00:11:27.020
This one is for type checking.

170
00:11:27.020 --> 00:11:30.420
This one is for
actually executing code at runtime.

171
00:11:30.420 --> 00:11:33.340
Like what's the entry point for
the JavaScript itself?

172
00:11:33.340 --> 00:11:34.700
But they both.

173
00:11:34.700 --> 00:11:41.554
Are you as the library author specifying
what is the entry point for this package?

174
00:11:41.554 --> 00:11:44.412
&gt;&gt; Speaker 2: So is it kind of like
without it, it'd be like saying, hey,

175
00:11:44.412 --> 00:11:47.180
go to Frontend Masters,
it's in this building.

176
00:11:47.180 --> 00:11:50.500
And you're like, yeah, okay,
frontend Masters exists in this building,

177
00:11:50.500 --> 00:11:51.180
but where.

178
00:11:51.180 --> 00:11:53.395
&gt;&gt; Mike North: Yeah, it'd be like
saying go to frontend Masters and

179
00:11:53.395 --> 00:11:54.140
take the course.

180
00:11:55.730 --> 00:12:00.524
You're like, I appear to have a front
end master's and there are many courses,

181
00:12:00.524 --> 00:12:02.930
but what do you mean which one?

182
00:12:02.930 --> 00:12:05.010
There's a bunch of stuff in here.

183
00:12:05.010 --> 00:12:06.770
Where do I enter?

184
00:12:06.770 --> 00:12:10.770
And especially if you're like,
this is almost like.

185
00:12:10.770 --> 00:12:14.448
Remember when you're saying I want
to import something like this,

186
00:12:14.448 --> 00:12:16.210
this is a package.

187
00:12:16.210 --> 00:12:21.050
These are exported symbols that come
from somewhere in that package.

188
00:12:21.050 --> 00:12:25.610
But without a module bridging that gap.

189
00:12:25.610 --> 00:12:32.460
When you say there's almost
an implicit something here,

190
00:12:32.460 --> 00:12:36.107
I think of it kind of like this.

191
00:12:36.107 --> 00:12:40.902
There's kind of something implicit there,
but what exactly do you mean?

192
00:12:40.902 --> 00:12:44.667
Sorry, it is not implicit,
but you're saying,

193
00:12:44.667 --> 00:12:50.660
I want something from this path, but
it needs to know, it needs to resolve.

194
00:12:50.660 --> 00:12:55.376
Once it says, all right,
there's a dependency here for sure, but

195
00:12:55.376 --> 00:12:59.940
within that I've got a folder
in node_modules for this thing.

196
00:12:59.940 --> 00:13:05.878
But what specifically without that types
field and without this module field,

197
00:13:05.878 --> 00:13:10.820
that's where attempting to type check or
attempting to run.

198
00:13:10.820 --> 00:13:15.823
In the case of those enums where there's
actual JavaScript in the compiled output,

199
00:13:15.823 --> 00:13:17.770
those will fail.

200
00:13:17.770 --> 00:13:22.360
&gt;&gt; Speaker 2: Have you run into
TypeScript LSP performance issues in large

201
00:13:22.360 --> 00:13:25.240
monorepos and as the mono repo grows,

202
00:13:25.240 --> 00:13:29.930
what are some best practices to
keep the LSP footprint lower?

203
00:13:32.730 --> 00:13:36.451
&gt;&gt; Mike North: I have some tips which
we're going to touch on and that is

204
00:13:36.451 --> 00:13:42.510
the idea of using project references
which creates these tsbuild info files.

205
00:13:42.510 --> 00:13:48.127
It allows type checking both in terms of
the language server doing its job and

206
00:13:48.127 --> 00:13:49.470
build.

207
00:13:49.470 --> 00:13:54.253
It allows those to be done in a much more
incremental way where TypeScript has

208
00:13:54.253 --> 00:13:59.038
more keen awareness of these were these
specific modules that you touched in

209
00:13:59.038 --> 00:14:00.350
the project.

210
00:14:00.350 --> 00:14:05.243
When you rebuild, it has a lot more
information that it can reuse instead of

211
00:14:05.243 --> 00:14:08.050
recompiling every package from scratch.

212
00:14:08.050 --> 00:14:09.930
So that's one thing that helps here.

213
00:14:09.930 --> 00:14:17.170
But bluntly, the TypeScript
compiler is really complicated.

214
00:14:17.170 --> 00:14:22.298
It is a heavyweight project and
this is part of why the TypeScript team is

215
00:14:22.298 --> 00:14:27.596
in the middle of a go rewrite where
they're building both the compiler and

216
00:14:27.596 --> 00:14:30.690
probably the guts of the language server.

217
00:14:30.690 --> 00:14:33.530
That is the main thing people will use.

218
00:14:33.530 --> 00:14:39.086
They're trying to use a language that
lets them accomplish all of the analysis

219
00:14:39.086 --> 00:14:44.137
that they need to do in a much more
efficient way that is more suitable for

220
00:14:44.137 --> 00:14:47.060
large typescript monorepos.

221
00:14:47.060 --> 00:14:48.100
It is a real problem.

222
00:14:51.620 --> 00:14:56.679
You know this if you
work on something big for

223
00:14:56.679 --> 00:15:02.014
work, type checking
slows down when there's

224
00:15:02.014 --> 00:15:06.760
a lot of weight, especially at stripe.

225
00:15:06.760 --> 00:15:11.495
Our dashboard project is in a monorepo
with a lot of typescript and

226
00:15:11.495 --> 00:15:15.640
it's like 3.7 million lines of code or
even more now.

227
00:15:17.720 --> 00:15:18.760
It's challenging.

228
00:15:18.760 --> 00:15:21.302
So we would use SWC for the build, but

229
00:15:21.302 --> 00:15:25.720
that doesn't really help
with the language server.

230
00:15:25.720 --> 00:15:31.280
So we're always just trying to tune it up
more, use these project references, etc.

231
00:15:31.280 --> 00:15:37.022
But the go, you should take the GO
rewrite as an indicator that there's

232
00:15:37.022 --> 00:15:41.998
kind of a ceiling in terms of like
the compiler doing its job and

233
00:15:41.998 --> 00:15:45.240
being written in TypeScript itself.

234
00:15:45.240 --> 00:15:48.492
There's a limit to how
performant it can get, and

235
00:15:48.492 --> 00:15:53.300
in particular it's not just the speed,
but it's a memory issue as well.

236
00:15:53.300 --> 00:15:59.329
So if your type checking is running
slowly, just run a little top or

237
00:15:59.329 --> 00:16:04.173
an htop and check out how much
state is being stored and

238
00:16:04.173 --> 00:16:07.313
how much memory it's consuming.

239
00:16:07.313 --> 00:16:13.393
And it is not trivial, gigabytes.

240
00:16:13.393 --> 00:16:14.880
This is like why you need
to have a lot of ram.

241
00:16:14.880 --> 00:16:18.730
Even if you're trying to run things
like do your build elsewhere,

242
00:16:18.730 --> 00:16:22.670
if your language server is
running locally, it's a big.

243
00:16:22.670 --> 00:16:24.224
It's a lot of computer.

