WEBVTT

1
00:00:00.400 --> 00:00:02.200
&gt;&gt; Mike North: Now let's
get into the TS configs.

2
00:00:02.200 --> 00:00:06.271
So in this next step,
we're going to set up the right or

3
00:00:06.271 --> 00:00:11.495
a working TS config setup so
that Visual Studio code still understands

4
00:00:11.495 --> 00:00:16.560
when to give us the red squiggles or
whatever editor you're using.

5
00:00:16.560 --> 00:00:19.360
Like, the language server needs to
be able to engage with the project.

6
00:00:20.720 --> 00:00:23.616
You need to make sure that you're
building the right thing and

7
00:00:23.616 --> 00:00:26.320
you need to make sure you can
type check the right thing.

8
00:00:26.320 --> 00:00:30.452
What I mean by the right thing here
is like when you're type checking,

9
00:00:30.452 --> 00:00:33.930
you should type check your tests and
your source code.

10
00:00:33.930 --> 00:00:35.176
But when you build,

11
00:00:35.176 --> 00:00:40.410
obviously you don't want all of your test
files to be part of a production build.

12
00:00:40.410 --> 00:00:41.930
There's no point.

13
00:00:41.930 --> 00:00:48.457
So we're going to have to create a couple
TS configs in order for this to work.

14
00:00:48.457 --> 00:00:53.028
So the first thing that we're gonna do,
and we'll come back to this models folder

15
00:00:53.028 --> 00:00:57.860
when we're wiring everything back up,
we're going to go back to our UI package.

16
00:00:57.860 --> 00:01:01.340
We have a bunch of
different tsconfigs here.

17
00:01:01.340 --> 00:01:05.620
This was literally what starting this
vite project auto generated for me.

18
00:01:07.140 --> 00:01:13.620
We've got a tsconfig JSON here.

19
00:01:13.620 --> 00:01:16.340
This is what a language server
is typically going to look for.

20
00:01:16.340 --> 00:01:20.610
Yes, you can configure it, you can provide
some settings and point it to a different

21
00:01:20.610 --> 00:01:25.200
thing, but if you just open up a project,
there's a tsconfig in the root.

22
00:01:25.200 --> 00:01:27.440
That's what your language
server is gonna look at.

23
00:01:27.440 --> 00:01:32.303
Before we started the course,
this is what was working here.

24
00:01:32.303 --> 00:01:37.760
So we're gonna take this and we're gonna
drag it into the root of our project.

25
00:01:37.760 --> 00:01:40.160
We're going to move it to
the root of our project.

26
00:01:40.160 --> 00:01:41.840
We're going to have to
change a couple of things.

27
00:01:43.360 --> 00:01:46.908
Well, first off,
everything in source and tests,

28
00:01:46.908 --> 00:01:51.520
this is not like there are no top
level source and tests folders now.

29
00:01:53.520 --> 00:01:54.440
But we can do this.

30
00:01:54.440 --> 00:01:59.777
We can say, all right,
any subfolder of packages, look for

31
00:01:59.777 --> 00:02:05.920
source and tests, and
we're going to be tracking those files.

32
00:02:05.920 --> 00:02:11.440
Then I'm going to go,
we need a tsconfig for the UI here.

33
00:02:13.040 --> 00:02:15.354
So I'm going to create a new file here and

34
00:02:15.354 --> 00:02:18.770
in this case this is going to
be regarded as a, not a rename.

35
00:02:18.770 --> 00:02:20.890
We're changing these files substantially.

36
00:02:20.890 --> 00:02:22.570
So creating a new file here is fine.

37
00:02:24.730 --> 00:02:30.522
What we'll say is this file extends

38
00:02:30.522 --> 00:02:36.506
tsconfig JSON and if we click there,

39
00:02:36.506 --> 00:02:40.810
we get to our root level.

40
00:02:40.810 --> 00:02:43.780
Tsconfig that's how we know
we have the path, right?

41
00:02:43.780 --> 00:02:48.340
And then we'll say includes.

42
00:02:51.940 --> 00:02:55.540
Sorry, I'm going to close the package
jsons here just so we don't get confused.

43
00:02:57.060 --> 00:03:00.980
So on the left we've got the root one,
and this is for our UI.

44
00:03:00.980 --> 00:03:09.460
So here I'm gonna kind of grab all this,
paste it in here.

45
00:03:10.760 --> 00:03:14.760
Now my job is I'm going to
prune this down a little bit.

46
00:03:16.200 --> 00:03:19.594
We'll undo what we just did for packages,

47
00:03:19.594 --> 00:03:26.120
because relative to this file here,
there is a source and a test subfolder.

48
00:03:26.120 --> 00:03:30.172
And then we've got all this
stuff that's TailWind specific,

49
00:03:30.172 --> 00:03:33.160
post CSS specific, vite, svelte, ESlint.

50
00:03:33.160 --> 00:03:38.297
We'll deal with linting in
a later chapter, but for

51
00:03:38.297 --> 00:03:44.390
now, ESLINT config lives here,
so it's in the UI folder.

52
00:03:44.390 --> 00:03:45.830
Great.
So this is what we want.

53
00:03:46.870 --> 00:03:48.790
This was the starting point.

54
00:03:48.790 --> 00:03:52.470
These were the original contents
of includes in this file.

55
00:03:52.470 --> 00:03:54.710
And over here we can
get rid of this stuff.

56
00:03:54.710 --> 00:03:57.270
So just a summary of where we ended up.

57
00:04:00.630 --> 00:04:06.994
This is looking for all ts, js and
svelte files in the source and

58
00:04:06.994 --> 00:04:10.850
tests folders of any of our packages.

59
00:04:12.290 --> 00:04:16.930
Then over here we have a complete
set of within this package.

60
00:04:16.930 --> 00:04:18.210
What does this look like?

61
00:04:18.210 --> 00:04:22.901
Now, one benefit we have here is
there are no strictness settings

62
00:04:22.901 --> 00:04:24.930
in this file anymore.

63
00:04:24.930 --> 00:04:29.663
What we want to start doing is working
towards a place where across our whole

64
00:04:29.663 --> 00:04:34.260
monorepo we can just point to this
file and say, look, no implicit any.

65
00:04:34.260 --> 00:04:37.740
That's a rule I want to enforce
everywhere in all packages.

66
00:04:37.740 --> 00:04:40.420
You don't wanna be going around and

67
00:04:40.420 --> 00:04:44.540
poking at individual TS
configs eventually, right?

68
00:04:44.540 --> 00:04:47.688
Like in reality,
sometimes you're tightening things up and

69
00:04:47.688 --> 00:04:50.420
you want to do that on
a package by package basis.

70
00:04:50.420 --> 00:04:54.188
But there is some benefit to having
like a baseline layer of config,

71
00:04:54.188 --> 00:04:56.180
particularly around strictness.

72
00:04:56.180 --> 00:04:58.970
This is almost like linting settings.

73
00:04:58.970 --> 00:05:02.850
If typescript is a fancy linter,
which it kind of is, yes.

74
00:05:02.850 --> 00:05:06.498
&gt;&gt; Student: So
aren't we including with the includes and

75
00:05:06.498 --> 00:05:11.298
the base tsconfig pointing
down to the package directory,

76
00:05:11.298 --> 00:05:15.370
aren't we including stuff twice then?

77
00:05:15.370 --> 00:05:17.330
&gt;&gt; Mike North: Yeah,
let's get rid of this and see if it works.

78
00:05:17.330 --> 00:05:22.675
Bluntly, I forget whether we're
replacing the includes array or

79
00:05:22.675 --> 00:05:24.970
whether it's appended to.

80
00:05:27.450 --> 00:05:29.650
Let's delete that and
let's see where we end up.

81
00:05:29.650 --> 00:05:34.570
We can always add it back later, but we
are absolutely specifying it twice here.

82
00:05:34.570 --> 00:05:38.610
So we're going to see real quick,
is this sufficient and

83
00:05:38.610 --> 00:05:43.290
all that you'd need to do
in each monorepo packages.

84
00:05:43.290 --> 00:05:47.090
Whatever's extra, like, whatever's
not in the source and test folder.

85
00:05:47.090 --> 00:05:47.738
In this case,

86
00:05:47.738 --> 00:05:50.870
I want to type check all these config
files in the root of the package.

87
00:05:51.990 --> 00:05:52.710
Good question.

88
00:05:53.990 --> 00:05:58.008
Okay, now we need to turn our
attention back to models, so

89
00:05:58.008 --> 00:06:00.470
we'll close our UI folder here.

90
00:06:00.470 --> 00:06:02.310
We're going to need two files in here.

91
00:06:02.310 --> 00:06:07.325
Tsconfig JSON, tsconfig build JSON and

92
00:06:07.325 --> 00:06:12.950
the rule of thumb here
is the tsconfig JSON.

93
00:06:12.950 --> 00:06:18.270
This is the file that governs where
you want your authoring feedback.

94
00:06:19.550 --> 00:06:23.070
Tsconfig.build.json is about compiling.

95
00:06:24.110 --> 00:06:28.629
Now, we want to make sure we're still
leveraging a common set of strictness

96
00:06:28.629 --> 00:06:32.270
settings and module type and
our target language level.

97
00:06:32.270 --> 00:06:35.270
But certainly the includes
are going to be different here.

98
00:06:35.270 --> 00:06:37.860
One of these should point to your tests,
and

99
00:06:37.860 --> 00:06:40.874
the other should only point
to your source folder.

100
00:06:40.874 --> 00:06:47.710
So in our new tsconfig.json,
it's going to, again,

101
00:06:47.710 --> 00:06:54.256
extend from the base the root
level tsconfig.json,

102
00:06:54.256 --> 00:06:58.920
and let's see if this is sufficient.

103
00:07:03.320 --> 00:07:04.760
Yep, that looks good.

104
00:07:07.090 --> 00:07:15.330
And tsconfig build this
should only include source.

105
00:07:17.330 --> 00:07:20.130
In this case,
don't worry about extensions.

106
00:07:20.130 --> 00:07:21.570
It's all typescript files.

107
00:07:23.410 --> 00:07:25.650
We don't want the tests to be compiled.

108
00:07:30.530 --> 00:07:31.970
Let's try our build command again.

109
00:07:33.440 --> 00:07:34.120
Wait, sorry.

110
00:07:34.120 --> 00:07:37.440
Before I do that,
we need a couple of things.

111
00:07:38.560 --> 00:07:39.760
Compiler options.

112
00:07:41.440 --> 00:07:43.840
All right, noEmit false,
this is a double negative.

113
00:07:43.840 --> 00:07:47.280
What we're saying here is, yes, emit true.

114
00:07:51.840 --> 00:07:55.440
We're going to say the out
directory is dist.

115
00:07:55.440 --> 00:07:59.005
Without this,
you're going to end up with a js file and

116
00:07:59.005 --> 00:08:03.360
a distributed DTS file right next
to your input typescript files.

117
00:08:03.360 --> 00:08:07.760
And personally, it's kind of messy to me.

118
00:08:07.760 --> 00:08:12.080
Rootdir is source.

119
00:08:12.080 --> 00:08:15.937
Now, what this means
is in our dist folder,

120
00:08:15.937 --> 00:08:20.960
we want to see the compiled
results of our source folder.

121
00:08:20.960 --> 00:08:25.854
At the top level of the dist folder,
we don't want to

122
00:08:25.854 --> 00:08:30.650
see disk dist, source,
index, DTS and index js.

123
00:08:30.650 --> 00:08:35.370
We just want to see dist index js.

124
00:08:35.370 --> 00:08:40.090
So this is sort of like the root
of what is to be compiled.

125
00:08:40.090 --> 00:08:41.290
And this is a library.

126
00:08:43.050 --> 00:08:45.373
So let's make sure we build declarations.

127
00:08:45.373 --> 00:08:48.970
We have to opt into that and four options.

128
00:08:48.970 --> 00:08:50.258
That looks right to me.

129
00:08:50.258 --> 00:08:51.670
One more thing.

130
00:08:51.670 --> 00:08:53.190
I want to do this.

131
00:08:53.190 --> 00:08:54.710
So why do I want to do this?

132
00:08:54.710 --> 00:08:57.350
Why not point to the base package JSON?

133
00:08:57.350 --> 00:09:02.156
Well, this still means that if I wanted
to have some strictness settings here,

134
00:09:02.156 --> 00:09:04.390
if I wanted to say compiler options.

135
00:09:05.430 --> 00:09:07.910
No fall through cases in switch.

136
00:09:09.270 --> 00:09:15.449
This lets me have a convention where
it's always the regular tsconfig

137
00:09:15.449 --> 00:09:21.490
JSON where per monorepo package
strictness settings are set.

138
00:09:21.490 --> 00:09:26.894
And so, you can think of it
almost like you've got the base

139
00:09:26.894 --> 00:09:32.080
level tsconfig that threads
up to each monorepo's sort

140
00:09:32.080 --> 00:09:37.970
of like authoring tsconfig and
then the compile tsconfigs.

141
00:09:37.970 --> 00:09:41.650
It's going to look very much like this
in every single library that you have.

142
00:09:41.650 --> 00:09:46.010
Because all this is doing is saying,
okay, forget the test folder.

143
00:09:46.010 --> 00:09:49.290
Also, we're actually compiling stuff and
here's where to put the output.

144
00:09:49.290 --> 00:09:52.170
But these files are just commoditized.

145
00:09:52.170 --> 00:09:55.675
We're going to see when we create other
monorepo packages, we're copying and

146
00:09:55.675 --> 00:09:57.370
pasting these things.

147
00:09:57.370 --> 00:09:59.690
It's a very uninteresting file.

148
00:09:59.690 --> 00:10:02.350
And if you were doing
a large scale monorepo,

149
00:10:02.350 --> 00:10:05.650
this would be the kind of
thing that you would template.

150
00:10:05.650 --> 00:10:11.150
Like you'd use tspoet or something like
that to just crank one of these out.

151
00:10:11.150 --> 00:10:18.830
And you know, it's not something that
a human should really be messing with.

152
00:10:20.990 --> 00:10:22.030
All right, let's try to build.

153
00:10:24.590 --> 00:10:28.190
Ooh, sorry, outdoor, not out.

154
00:10:30.750 --> 00:10:32.820
Hey, there's something.

155
00:10:32.820 --> 00:10:36.240
What happened?

156
00:10:36.240 --> 00:10:39.440
The thing that I said that
makes things messy happened.

157
00:10:41.440 --> 00:10:43.040
Did I get confused here?

158
00:10:45.440 --> 00:10:46.560
Outdoor is dist.

159
00:10:48.320 --> 00:10:50.320
There is stuff in the dist folder.

160
00:10:51.920 --> 00:10:53.680
Let me blow this away and
see what happens.

161
00:10:59.120 --> 00:11:00.560
I'll blow this way.

162
00:11:06.810 --> 00:11:13.450
Let me just check my build script here,
make sure that's right.

163
00:11:13.450 --> 00:11:16.890
Build tsconfig, build JSON.

164
00:11:18.090 --> 00:11:22.410
Yep, and I'm in the models folder.

165
00:11:28.580 --> 00:11:32.986
You know what, is probably the last
time I ran the build command and

166
00:11:32.986 --> 00:11:38.900
maybe I just wasn't paying attention to my
sidebar, but this is the expected output.

167
00:11:38.900 --> 00:11:43.804
Maybe those files I just deleted
from when I attempted the build and

168
00:11:43.804 --> 00:11:45.300
there wasn't any.

169
00:11:48.580 --> 00:11:51.700
We hadn't put these
compiler options here yet.

170
00:11:51.700 --> 00:11:53.380
Anyway, this is what we're looking for.

171
00:11:53.380 --> 00:11:56.590
So we've got our index dts, right?

172
00:11:56.590 --> 00:11:59.670
We've got our index js,
which is like the same things here.

173
00:11:59.670 --> 00:12:02.910
I mean really,
this is just type information and so.

174
00:12:05.116 --> 00:12:06.750
Interesting.

175
00:12:06.750 --> 00:12:08.030
Were these classes.

176
00:12:14.270 --> 00:12:15.830
We have enums.

177
00:12:15.830 --> 00:12:17.950
That's why we're getting
some compiled output.

178
00:12:17.950 --> 00:12:21.390
Enums are not purely type information,
they are values.

179
00:12:22.530 --> 00:12:24.130
If we look in.

180
00:12:24.130 --> 00:12:27.930
Yep, there you go,
this is our string based being created.

181
00:12:27.930 --> 00:12:30.050
So great, so
we've got some meaningful JavaScript.

182
00:12:30.050 --> 00:12:32.610
We've got some meaningful typescript.

183
00:12:32.610 --> 00:12:33.890
Let's try dev mode.

184
00:12:38.610 --> 00:12:40.650
We started compiling in watch mode.

185
00:12:40.650 --> 00:12:45.721
And so what that means is
if we were to go here and

186
00:12:45.721 --> 00:12:50.533
say, I'm gonna add a new property, save,

187
00:12:50.533 --> 00:12:55.346
you can see, if you're watching closely,

188
00:12:55.346 --> 00:12:59.660
every time I save a file things update.

189
00:12:59.660 --> 00:13:06.220
If I were to have any build errors we'd
see those pretty clearly down here, right?

190
00:13:06.220 --> 00:13:09.020
Get a nice link we can
click to go to the line.

191
00:13:09.020 --> 00:13:12.518
So great, so we've got a nice script for
rapid development, we've got a script for

192
00:13:12.518 --> 00:13:13.590
building.

193
00:13:13.590 --> 00:13:17.730
One more thing we have to give attention
to is exactly how is this package

194
00:13:17.730 --> 00:13:20.310
exporting what it has in its dist folder.

195
00:13:20.310 --> 00:13:23.664
So go into your package JSON and

196
00:13:23.664 --> 00:13:28.824
we're going to add a couple
new fields types and

197
00:13:28.824 --> 00:13:33.468
we'll say distindex d ts and
module this is

198
00:13:33.468 --> 00:13:38.241
dist index js so
think of these as the type and

199
00:13:38.241 --> 00:13:43.290
runnable code entry points for
this library.

200
00:13:43.290 --> 00:13:47.770
So when another package imports this,
we're saying where do you go?

201
00:13:47.770 --> 00:13:48.809
Where is the build artifact?

