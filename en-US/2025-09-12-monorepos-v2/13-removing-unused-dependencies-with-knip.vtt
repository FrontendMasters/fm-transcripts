WEBVTT

1
00:00:00.400 --> 00:00:05.474
&gt;&gt; Mike: We're going to use a tool
called Knip Knip to identify exports

2
00:00:05.474 --> 00:00:11.525
from our modules that don't appear to
be used from within our monorepo and

3
00:00:11.525 --> 00:00:16.400
dependencies that we don't
appear to be importing from.

4
00:00:16.400 --> 00:00:21.803
This is a really useful tool in general
for any JavaScript project because

5
00:00:21.803 --> 00:00:27.307
ultimately that dependencies list in
your package JSON starts to get big.

6
00:00:27.307 --> 00:00:29.120
Your dev dependencies and
your dependencies.

7
00:00:31.440 --> 00:00:35.960
It's tough to know what of those
things is actually still being used.

8
00:00:35.960 --> 00:00:40.320
It ends up being hard to garden.

9
00:00:40.320 --> 00:00:41.840
&gt;&gt; Male: Is this called tree shaking?

10
00:00:43.280 --> 00:00:45.280
&gt;&gt; Mike: This is not called.

11
00:00:45.280 --> 00:00:48.505
Well, it is conceptually
similar to tree shaking,

12
00:00:48.505 --> 00:00:52.040
what most people mean when
they say tree shaking.

13
00:00:52.040 --> 00:00:59.012
It is the concept during a build
process of identifying dead code or

14
00:00:59.012 --> 00:01:04.001
unused code and
eliminating it from the build.

15
00:01:04.001 --> 00:01:10.680
So for example, Lodash is a great example.

16
00:01:10.680 --> 00:01:14.600
You can consume Lodash as
one big library if you want.

17
00:01:14.600 --> 00:01:21.700
You can say, I want to install Lodash,
but they also let you.

18
00:01:23.380 --> 00:01:24.260
Yeah, there you go.

19
00:01:24.260 --> 00:01:30.260
So here are a bunch of NPM packages
like you just need Lodash memoize.

20
00:01:30.260 --> 00:01:32.780
You can install that as
an individual package.

21
00:01:32.780 --> 00:01:37.499
And so if you were to use this,
what this lets you do is, well, first off,

22
00:01:37.499 --> 00:01:40.260
you can install only the modules you need.

23
00:01:40.260 --> 00:01:42.100
Sorry, only the packages you need.

24
00:01:42.100 --> 00:01:45.949
But this also shakes away any modules
within those packages that you don't

25
00:01:45.949 --> 00:01:47.600
happen to be be using.

26
00:01:47.600 --> 00:01:52.505
Now, what we're doing is related to
that in that we're trying to prune

27
00:01:52.505 --> 00:01:57.411
unused things away, like dependencies
that are in our package JSON for

28
00:01:57.411 --> 00:01:59.700
our various monorepo packages,

29
00:01:59.700 --> 00:02:05.360
where we see no evidence those are being
used within that respective package.

30
00:02:05.360 --> 00:02:09.979
But we're doing this sort of to benefit
install times and build times and

31
00:02:09.979 --> 00:02:14.296
just to take away stuff that
somebody's factored some code away but

32
00:02:14.296 --> 00:02:16.660
they forgot to remove the library.

33
00:02:16.660 --> 00:02:19.672
Like, yeah,
if you have tree shaking in place,

34
00:02:19.672 --> 00:02:22.100
it would take care of that eventually.

35
00:02:22.100 --> 00:02:25.380
But like, ultimately it's
good to clean it up as well.

36
00:02:25.380 --> 00:02:31.136
So that's what Knip does from
the dependency side of things and

37
00:02:31.136 --> 00:02:33.940
then unused exports as well.

38
00:02:33.940 --> 00:02:37.219
Like you're exporting 12
things from a module, but

39
00:02:37.219 --> 00:02:40.870
we can only see three of them
being imported from anywhere.

40
00:02:40.870 --> 00:02:43.831
And this will help you make sure
you're not overexposing your code to

41
00:02:43.831 --> 00:02:45.030
the outside world.

42
00:02:45.030 --> 00:02:49.475
We had some interesting conversations
about how do you make sure that in

43
00:02:49.475 --> 00:02:50.290
a monorepo,

44
00:02:50.290 --> 00:02:55.430
how do you make sure you can evolve things
that are deep in the dependency graph?

45
00:02:55.430 --> 00:02:59.089
And part of that is just being very
deliberate about the API surface you

46
00:02:59.089 --> 00:03:02.996
expose if you export the whole world
people have access to your internals,

47
00:03:02.996 --> 00:03:04.688
they start using those things.

48
00:03:04.688 --> 00:03:08.120
Well, yeah,
evolving that's gonna be really tricky.

49
00:03:08.120 --> 00:03:12.046
And this helps you make sure you're
more deliberately exporting things

50
00:03:12.046 --> 00:03:14.760
when they're actually
being used by something.

51
00:03:14.760 --> 00:03:22.400
And it's not just sitting there waiting
for somebody to grab onto with that.

52
00:03:22.400 --> 00:03:23.685
Let's jump in.

53
00:03:23.685 --> 00:03:29.844
So the first thing we'll do
is we're gonna install Knip,

54
00:03:29.844 --> 00:03:33.875
pnpm install dev dependency, knip.

55
00:03:33.875 --> 00:03:36.050
And I'm in the root of my Monorepo.

56
00:03:36.050 --> 00:03:39.857
This is another workspace level tool.

57
00:03:39.857 --> 00:03:47.610
So this is most appropriate to
store at the workspace level.

58
00:03:47.610 --> 00:03:51.463
Now we're going to install knip and

59
00:03:51.463 --> 00:03:55.450
to do that we have to run PNPM I D knip.

60
00:04:00.500 --> 00:04:07.140
And now that that install is completed,
we want to create a config file.

61
00:04:07.140 --> 00:04:10.426
So this is going to be in
the root of your project and

62
00:04:10.426 --> 00:04:15.046
we're going to call it knip JSON and
you'll know you got the right name

63
00:04:15.046 --> 00:04:19.540
because there's a little,
at least in this VS code icon pack.

64
00:04:19.540 --> 00:04:21.460
Apparently they have a cute little icon.

65
00:04:21.460 --> 00:04:23.530
All right, workspaces.

66
00:04:23.530 --> 00:04:27.290
You got to tell this
tool where things are.

67
00:04:27.290 --> 00:04:28.490
We're going to say packages.

68
00:04:33.050 --> 00:04:38.570
What we next need to describe is what
is the source code for each package?

69
00:04:38.570 --> 00:04:43.612
What's the pattern that you
could use to find source

70
00:04:43.612 --> 00:04:48.970
code versus what's the entry point for
each package?

71
00:04:48.970 --> 00:04:51.283
Here we'll say entry.

72
00:04:51.283 --> 00:04:57.250
And that's going to be, it's pretty
consistent for us, we've got src/index.

73
00:04:57.250 --> 00:05:03.704
Well, it's really index or main ts and
the reason is in our server and

74
00:05:03.704 --> 00:05:09.810
our models packages,
Source index is what we're using.

75
00:05:09.810 --> 00:05:12.290
Main is what's used in the UI package.

76
00:05:13.330 --> 00:05:16.450
Normally you don't care about the entry
point for something like a web ui.

77
00:05:16.450 --> 00:05:21.385
But the, the point of what this is
trying to do is it's going to start

78
00:05:21.385 --> 00:05:26.148
at the entry point and then it's
going to walk all of the imports to

79
00:05:26.148 --> 00:05:30.900
get an understanding of what
are those modules importing.

80
00:05:30.900 --> 00:05:34.062
It's doing this to figure out are you
actually using all of the things that

81
00:05:34.062 --> 00:05:34.980
are in your package?

82
00:05:34.980 --> 00:05:35.480
JSON.

83
00:05:37.060 --> 00:05:39.380
Next we need to do the second property,
which is project.

84
00:05:40.820 --> 00:05:42.180
We're going to say source.

85
00:05:44.830 --> 00:05:47.627
Yes.
This is all relative to a package,

86
00:05:47.627 --> 00:05:48.603
to be clear.

87
00:05:48.603 --> 00:05:57.230
So it's gonna be src anything .ts,
tsx, svelte.

88
00:05:57.230 --> 00:05:58.990
Now you don't really need tsx.

89
00:05:58.990 --> 00:06:00.790
It's not in this project,
but you get the idea.

90
00:06:00.790 --> 00:06:04.350
Whatever extensions are part of
the analysis that should happen here.

91
00:06:06.830 --> 00:06:09.801
Okay, we can leave it at that, if you're
following in the workspace notes,

92
00:06:09.801 --> 00:06:12.700
you'll see there's some
other stuff that we'll.

93
00:06:12.700 --> 00:06:17.164
But I want to hit the problem that
necessitates adding that second field.

94
00:06:17.164 --> 00:06:24.100
So let's run pnpm,
&gt;&gt; Mike: knip,

95
00:06:24.100 --> 00:06:27.455
and what's it gonna spit out?

96
00:06:27.455 --> 00:06:28.380
A bunch of stuff.

97
00:06:29.900 --> 00:06:34.300
So it's telling us a lot
of good information here.

98
00:06:34.300 --> 00:06:37.670
We apparently have unused dependencies.

99
00:06:37.670 --> 00:06:41.557
Looks like we left some server
stuff in our uipackage JSON in

100
00:06:41.557 --> 00:06:43.354
the dependencies object.

101
00:06:43.354 --> 00:06:47.849
Similarly, in models,
here's the express dependency again.

102
00:06:47.849 --> 00:06:51.022
I mean, after all, we were just
copying and pasting those objects.

103
00:06:51.022 --> 00:06:52.350
We were being kinda sloppy about it.

104
00:06:52.350 --> 00:06:52.990
But it's okay.

105
00:06:52.990 --> 00:06:56.150
We have a tool now that can help
us prune those things away.

106
00:06:56.150 --> 00:06:58.110
You get the same thing for
dev dependencies.

107
00:06:58.110 --> 00:07:02.766
Now important to realize there are some
things here that we want to keep which

108
00:07:02.766 --> 00:07:05.180
do not get imported by something else.

109
00:07:05.180 --> 00:07:07.100
In fact, these two things are CLIs.

110
00:07:07.100 --> 00:07:09.660
This is something that's used for
a linting task.

111
00:07:09.660 --> 00:07:10.540
These are.

112
00:07:11.660 --> 00:07:13.500
Well, these are actually.

113
00:07:14.620 --> 00:07:19.980
Sorry, we could get rid of these cause
eslint is at the workspace root.

114
00:07:19.980 --> 00:07:21.516
Now we don't need the types for

115
00:07:21.516 --> 00:07:24.420
these packages cause we're
getting rid of the packages.

116
00:07:24.420 --> 00:07:28.025
You should be able to see we're not being
asked to eliminate those packages in

117
00:07:28.025 --> 00:07:29.400
this server.

118
00:07:29.400 --> 00:07:33.689
So this tool even has knowledge
over this ambient type

119
00:07:33.689 --> 00:07:38.280
information convention
like the types packages.

120
00:07:38.280 --> 00:07:42.916
It will see that no, you're not
directly importing from ypexpress, but

121
00:07:42.916 --> 00:07:48.040
it is in use and it's intended to sort
of layer on top of the express package.

122
00:07:48.040 --> 00:07:53.040
So let's go around and play whack
a mole and address some of these.

123
00:07:53.040 --> 00:07:55.147
This is going to be the easiest group for
now.

124
00:07:55.147 --> 00:08:02.883
So let's go into our UI package.json,
&gt;&gt; Mike: And

125
00:08:02.883 --> 00:08:08.222
get rid of bluntly everything
except our models dependency.

126
00:08:08.222 --> 00:08:10.896
So that was all server stuff.

127
00:08:10.896 --> 00:08:16.123
A YAML parser, a logger,
the express HTTP server and CORS.

128
00:08:16.123 --> 00:08:19.390
Get rid of that and
let's go into models package.json.

129
00:08:22.040 --> 00:08:24.200
Similarly, we don't need any of that.

130
00:08:26.280 --> 00:08:28.111
Let's see where we're at.

131
00:08:28.111 --> 00:08:29.160
Run that command again.

132
00:08:31.640 --> 00:08:34.840
Now we're down to unused dev dependencies.

133
00:08:34.840 --> 00:08:38.200
So these two I want to treat differently.

134
00:08:38.200 --> 00:08:43.393
We'll go back to our config file here and

135
00:08:43.393 --> 00:08:48.433
we're going to add a new top level field

136
00:08:48.433 --> 00:08:54.850
called ignore dependencies and
it's an array and

137
00:08:54.850 --> 00:09:02.250
we can put many package CLI and
syncpack in there.

138
00:09:02.250 --> 00:09:04.247
If we run the command again,

139
00:09:04.247 --> 00:09:09.170
we'll see we're not being yelled
at about those two things anymore.

140
00:09:09.170 --> 00:09:15.000
So this is where your dependencies
that are tooling or clis or.

141
00:09:17.400 --> 00:09:19.892
I don't.
Know, some plugin that you use for

142
00:09:19.892 --> 00:09:21.720
testing infrastructure.

143
00:09:21.720 --> 00:09:22.840
This is a good example.

144
00:09:24.040 --> 00:09:24.960
Test coverage.

145
00:09:24.960 --> 00:09:31.320
Let's add that that's not
something that this tool can see.

146
00:09:32.760 --> 00:09:36.836
It both does not have
special awareness of how this

147
00:09:36.836 --> 00:09:41.310
plays into our test command,
nor can it see an import.

148
00:09:44.510 --> 00:09:45.870
We'll ignore that one.

149
00:09:45.870 --> 00:09:46.750
Any other ones?

150
00:09:46.750 --> 00:09:50.791
TypeScript ESLINT well, that should be
pulled up to the top of the repo so

151
00:09:50.791 --> 00:09:53.390
it genuinely does not belong in there.

152
00:09:53.390 --> 00:09:56.932
There's coverage V8.

153
00:09:56.932 --> 00:10:00.910
Great, all right, let's do some more
pruning, get rid of some of this.

154
00:10:03.470 --> 00:10:06.890
Sorry, let me make sure I'm on my most
recent invocation of the command.

155
00:10:08.490 --> 00:10:09.090
There we go.

156
00:10:09.090 --> 00:10:10.570
So we took care of a couple of those.

157
00:10:12.810 --> 00:10:16.970
Let's go in our models package JSON
giving us nice links by the way.

158
00:10:16.970 --> 00:10:18.250
I love this.

159
00:10:18.250 --> 00:10:20.732
Click it and it takes you to a row and

160
00:10:20.732 --> 00:10:24.330
a column of exactly what
you need to eliminate.

161
00:10:24.330 --> 00:10:26.810
So we get rid of cors,
we get rid of express.

162
00:10:28.650 --> 00:10:30.330
We need the node types.

163
00:10:30.330 --> 00:10:31.290
This is fine.

164
00:10:32.900 --> 00:10:38.060
This we already said
we're ignoring the ui.

165
00:10:38.060 --> 00:10:39.660
It's not complaining about concurrently.

166
00:10:39.660 --> 00:10:41.140
We don't need in here.

167
00:10:41.140 --> 00:10:44.974
Prettier, we don't need in here,
tsx we don't need,

168
00:10:44.974 --> 00:10:48.820
typescript-eslint Yep,
we don't need that either.

169
00:10:50.420 --> 00:10:53.865
Really slimming it down.

170
00:10:53.865 --> 00:10:55.260
So there, that's what we're left with.

171
00:10:55.260 --> 00:11:01.470
This is much more reasonable for
just like a very plain typescript library.

172
00:11:01.470 --> 00:11:02.647
It's some testing stuff in fact.

173
00:11:02.647 --> 00:11:05.070
In fact, eslint, do we even need that?

174
00:11:07.470 --> 00:11:08.830
Nope, I don't think we do.

175
00:11:11.870 --> 00:11:13.529
Great.

176
00:11:13.529 --> 00:11:14.804
So running it one more time.

177
00:11:18.410 --> 00:11:22.510
&gt;&gt; Mike: Okay, so
we're out of the models section.

178
00:11:22.510 --> 00:11:28.100
Now let's clean up our
server package JSON So

179
00:11:28.100 --> 00:11:32.661
we've got ESLINT JS concurrently,

180
00:11:32.661 --> 00:11:38.251
prettier, TypeScript, ESLINT and SAVE and

181
00:11:38.251 --> 00:11:46.650
then in our UI this testing
library svelte seems important.

182
00:11:46.650 --> 00:11:50.090
I'm going to chalk that one
up as let's keep it in here.

183
00:11:50.090 --> 00:11:57.464
Let's add it to our ignore list and
the tsconfig svelte,

184
00:11:57.464 --> 00:12:02.533
let's say that's the same thing where

185
00:12:02.533 --> 00:12:08.490
that's being used in our UITS config.

186
00:12:08.490 --> 00:12:15.130
Sorry, it's this one.

187
00:12:17.940 --> 00:12:22.463
There's a tsconfig NPM scope now
that contains very framework

188
00:12:22.463 --> 00:12:27.220
specific settings for
popular configurations and stuff.

189
00:12:27.220 --> 00:12:30.980
But this is not part of what
knip is trying to analyze, so

190
00:12:30.980 --> 00:12:32.660
it's not aware of that.

191
00:12:34.500 --> 00:12:40.180
Then going back to our UI thing,
just these Cores and express things here.

192
00:12:41.220 --> 00:12:42.340
Let's see where we're at.

193
00:12:43.550 --> 00:12:45.720
Getting much closer.

194
00:12:45.720 --> 00:12:48.990
All right,
now we've got unresolved imports.

195
00:12:50.350 --> 00:12:50.910
Great.

196
00:12:50.910 --> 00:12:52.670
It's finding more things.

197
00:12:52.670 --> 00:12:57.585
This is just removing the word
models because that's

198
00:12:57.585 --> 00:13:00.430
within the same package here.

199
00:13:01.550 --> 00:13:04.830
This one doesn't need to be
referring to this package.

200
00:13:04.830 --> 00:13:06.350
Seeds, models.

201
00:13:06.350 --> 00:13:09.354
Great.
So we will have taken care of those and

202
00:13:09.354 --> 00:13:12.390
that represents the next class of errors.

203
00:13:12.390 --> 00:13:15.606
Now we're down to unused exports.

204
00:13:15.606 --> 00:13:19.368
So we've got server config.

205
00:13:19.368 --> 00:13:24.369
Now if we look here, this is just like a
configuration object that holds a port and

206
00:13:24.369 --> 00:13:27.190
a logger and it's for our Express server.

207
00:13:27.190 --> 00:13:29.670
Now here's a little bit of a gotcha.

208
00:13:29.670 --> 00:13:34.240
Personally, I wish these two families
of errors were sorted differently.

209
00:13:34.240 --> 00:13:37.760
What it's really telling us here is
we've exported this thing twice.

210
00:13:39.440 --> 00:13:46.480
When it says unused export, I want you to
remember that's an unused export site.

211
00:13:49.760 --> 00:13:55.680
What I'm trying to disambiguate
between is server config is a class.

212
00:13:55.680 --> 00:13:59.747
It is both exported as the default
export of this module and

213
00:13:59.747 --> 00:14:02.890
it's exported as a named export here.

214
00:14:02.890 --> 00:14:05.450
This is an understandable thing to do.

215
00:14:07.450 --> 00:14:11.053
There are things that use this,

216
00:14:11.053 --> 00:14:16.390
in our app.ts,
you can see we do import it, but

217
00:14:16.390 --> 00:14:22.274
we're importing it as the default export,
right?

218
00:14:22.274 --> 00:14:26.870
And so it's telling us it's
really this that's unused.

219
00:14:26.870 --> 00:14:29.709
So I'm going to decide, you know what,

220
00:14:29.709 --> 00:14:33.896
I want the named export to be
the thing that I preserve here.

221
00:14:33.896 --> 00:14:35.750
So I'm gonna do this.

222
00:14:35.750 --> 00:14:40.390
I'll go back to this server config thing
and I'll just delete the default export.

223
00:14:44.070 --> 00:14:47.539
Let's run this again.

224
00:14:47.539 --> 00:14:48.870
Great, and so that went away.

225
00:14:48.870 --> 00:14:52.350
So really this is a trap
to process these first.

226
00:14:52.350 --> 00:14:56.590
Because similarly, here,
load data pipedefault.

227
00:14:56.590 --> 00:14:58.470
That's saying this thing.

228
00:14:59.750 --> 00:15:01.430
There's a duplicate here.

229
00:15:01.430 --> 00:15:05.910
But you're also seeing this line up
here which has to do with the duplicate.

230
00:15:07.110 --> 00:15:11.713
Similarly, I'm going to
bias towards named exports.

231
00:15:11.713 --> 00:15:15.739
And where would load data be?

232
00:15:15.739 --> 00:15:18.233
Well, we could just say, find references.

233
00:15:23.046 --> 00:15:25.680
&gt;&gt; Mike: Only in this routes package.

234
00:15:25.680 --> 00:15:28.080
And good,
we have another thing to fix here.

235
00:15:28.080 --> 00:15:30.240
Load data and server config.

236
00:15:30.240 --> 00:15:33.120
So both of these will
consume as named exports.

237
00:15:33.120 --> 00:15:36.160
Everything lines up,
we get rid of the default export.

238
00:15:36.160 --> 00:15:37.920
We can run one more time.

239
00:15:40.400 --> 00:15:41.880
Great.
And we're whittling this down.

240
00:15:41.880 --> 00:15:43.326
And we're whittling this down.

241
00:15:43.326 --> 00:15:45.290
Now what do I love about this tool?

242
00:15:46.810 --> 00:15:50.290
This would have just been incredibly
difficult information to track down.

243
00:15:50.290 --> 00:15:52.970
Just think about all of the manual
work that you'd go through.

244
00:15:52.970 --> 00:15:54.970
Like trying to scan through.

245
00:15:54.970 --> 00:15:59.058
You'd like grab each dependency and
scan through import paths and

246
00:15:59.058 --> 00:16:00.810
you'd have to worry about.

247
00:16:00.810 --> 00:16:03.530
You'd have to build this
tool to do this job right.

248
00:16:03.530 --> 00:16:09.286
Especially in a large monorepo,
it would be really, really challenging.

249
00:16:09.286 --> 00:16:12.360
All right, getSeedPacketId.

250
00:16:12.360 --> 00:16:15.679
I happen to know I left this in here so
that it was here for

251
00:16:15.679 --> 00:16:18.936
us to delete it turns out
nobody needs this function.

252
00:16:18.936 --> 00:16:23.760
Somebody built this and
it's just throwaway code.

253
00:16:23.760 --> 00:16:25.795
Maybe at some time someone was using it,
but

254
00:16:25.795 --> 00:16:27.720
we can just entirely get rid of it now.

255
00:16:27.720 --> 00:16:29.880
Nobody was even depending on it.

256
00:16:29.880 --> 00:16:31.720
And then these two as well.

257
00:16:31.720 --> 00:16:34.165
We have a bunch of formatting
things which are for

258
00:16:34.165 --> 00:16:37.860
the backs of the seed packet if you
click click and turn them over.

259
00:16:37.860 --> 00:16:42.380
But we're not displaying light preferences
and we're not displaying water needs.

260
00:16:42.380 --> 00:16:44.260
And so we can get rid of those as well.

261
00:16:44.260 --> 00:16:47.380
And we should be able to run this and
it passes.

262
00:16:47.380 --> 00:16:51.860
So in summary, NIP is good for two things.

263
00:16:53.140 --> 00:16:56.707
Eliminating things in your dependencies,
dev dependencies,

264
00:16:56.707 --> 00:17:00.734
peer dependencies of your package JSON
that do not appear to be used, and

265
00:17:00.734 --> 00:17:05.110
giving you an automated tool that lets
you continually scan for these things.

266
00:17:05.110 --> 00:17:08.030
You could incorporate it into
your build process as well.

267
00:17:08.030 --> 00:17:11.648
Somebody introduces a new dependency,
they'd better use it or

268
00:17:11.648 --> 00:17:14.350
state that it should
explicitly be retained.

269
00:17:14.350 --> 00:17:18.666
And then similarly, this makes sure
that when you're exporting things,

270
00:17:18.666 --> 00:17:20.670
you're doing so deliberately.

271
00:17:20.670 --> 00:17:23.310
You're not just saying I needed.

272
00:17:23.310 --> 00:17:27.209
You know, maybe it's like I needed to test
this thing and so I had to export it or

273
00:17:27.209 --> 00:17:27.870
something.

274
00:17:27.870 --> 00:17:30.130
I mean,
maybe that's a good reason to export.

275
00:17:30.130 --> 00:17:32.130
We'll talk about how you
can do that safely later.

276
00:17:33.250 --> 00:17:39.170
But this lets you find things that
are just simply dead, like dead code.

277
00:17:39.170 --> 00:17:43.523
And tree shaking would not have
helped with this part, by the way,

278
00:17:43.523 --> 00:17:47.192
tree shaking is always done
at a module by module level.

279
00:17:47.192 --> 00:17:51.562
So these things here
that nobody was using,

280
00:17:51.562 --> 00:17:56.060
it would have been very
difficult to detect.

281
00:17:56.060 --> 00:18:00.089
And this absolutely would have been code
that you're sending to production that

282
00:18:00.089 --> 00:18:02.300
nothing appears to use.

283
00:18:02.300 --> 00:18:04.300
So check this tool out.

284
00:18:04.300 --> 00:18:04.900
Try it.

285
00:18:04.900 --> 00:18:08.380
I bet you will find some stuff
that's just unused in your project.

286
00:18:08.380 --> 00:18:10.940
Monorepo or not, but like Monorepo,

287
00:18:10.940 --> 00:18:17.180
especially because of the contracts you
have between your monorepo packages.

288
00:18:17.180 --> 00:18:20.689
This problem,
as bad as it is with one JavaScript or

289
00:18:20.689 --> 00:18:25.668
TypeScript project, it is that much
worse with the monorepo because you

290
00:18:25.668 --> 00:18:30.010
have all of these different
relationships between packages.

