WEBVTT

1
00:00:00.480 --> 00:00:05.676
&gt;&gt; Mike North: Next we're going to dig
into some more advanced monorepo build and

2
00:00:05.676 --> 00:00:07.360
task running tools.

3
00:00:08.480 --> 00:00:13.520
The first is lerna, and
then we're going to get to using Nx.

4
00:00:13.520 --> 00:00:20.723
So Lerna, in some ways it's
the original JavaScript Monorepo tool.

5
00:00:20.723 --> 00:00:22.560
It has been around for about a decade.

6
00:00:22.560 --> 00:00:27.953
But what's important to know is that the
way it works today is very, very different

7
00:00:27.953 --> 00:00:33.230
than what you might have seen if you're
poking at it a couple of years ago.

8
00:00:33.230 --> 00:00:37.464
Part of this is because Lerna as
a project is now maintained by

9
00:00:37.464 --> 00:00:39.790
the same team that works on Nx.

10
00:00:39.790 --> 00:00:44.627
So to some degree, it's a little bit
of a wrapper around Nx that allows for

11
00:00:44.627 --> 00:00:46.590
a simplified usage pattern.

12
00:00:47.790 --> 00:00:52.385
So let's begin by installing lerna, and
we're going to make sure we're doing so

13
00:00:52.385 --> 00:00:53.790
while in the workspace.

14
00:00:53.790 --> 00:00:58.800
Root, pnpm dlx learna, init.

15
00:00:59.840 --> 00:01:02.160
So again, dlx is download execute.

16
00:01:02.160 --> 00:01:06.320
That's like running npx if you're
familiar with the npm equivalent.

17
00:01:06.320 --> 00:01:11.302
And so we're downloading lerna and
we're running the init command, and

18
00:01:11.302 --> 00:01:14.689
what it's gonna do is
create a lerna.json file.

19
00:01:14.689 --> 00:01:16.480
Gives us an npm schema.

20
00:01:16.480 --> 00:01:18.480
Sorry, a JSON schema.

21
00:01:18.480 --> 00:01:21.550
It detects that we are using pnpm.

22
00:01:21.550 --> 00:01:24.350
Lerna works really, really well with pnpm.

23
00:01:24.350 --> 00:01:29.128
It does work well with npm workspaces and
with yarn workspaces,

24
00:01:29.128 --> 00:01:33.830
but just the level of configuration
you need in the pnpm world.

25
00:01:33.830 --> 00:01:39.425
It's almost nothing because we already
have this workspaces yaml file and

26
00:01:39.425 --> 00:01:45.107
like you would otherwise have to be
adding more information into this file if

27
00:01:45.107 --> 00:01:51.430
your package manager of choice didn't
make it so easy to parse that out.

28
00:01:51.430 --> 00:01:56.462
Similarly, lerna,
because part of what it does is allow you

29
00:01:56.462 --> 00:02:02.383
to install workspace dependencies,
lerna knows we're using pnpm and

30
00:02:02.383 --> 00:02:06.941
it will follow that workspace
colon star convention.

31
00:02:06.941 --> 00:02:13.840
So this is not interfering with all of the
norms that we've been discussing so far.

32
00:02:16.640 --> 00:02:21.505
I'm gonna install Learna
as a dev dependency

33
00:02:21.505 --> 00:02:24.516
as well,
&gt;&gt; Mike North: Just

34
00:02:24.516 --> 00:02:27.872
to make sure I always have it.

35
00:02:27.872 --> 00:02:35.760
All right, so
let's use lerna to run builds here.

36
00:02:35.760 --> 00:02:40.769
And we'll do that by saying
pnpm lerna run build and

37
00:02:40.769 --> 00:02:45.779
you see lerna powered by Nx and
it's going to each of

38
00:02:45.779 --> 00:02:51.530
these packages and
it's building each of them.

39
00:02:51.530 --> 00:02:55.130
So it can build, it can test, it can lint.

40
00:02:58.330 --> 00:03:00.954
And behind the scenes,
Nx is doing the lifting here.

41
00:03:06.758 --> 00:03:08.500
&gt;&gt; Mike North: We have
a lint error somewhere.

42
00:03:10.980 --> 00:03:13.620
We must have forgotten
something a little ways back.

43
00:03:15.220 --> 00:03:17.220
These are files in a dist folder.

44
00:03:18.900 --> 00:03:21.460
We shouldn't be linting
things in a dist folder.

45
00:03:21.460 --> 00:03:23.220
Let's go ahead and fix that.

46
00:03:23.220 --> 00:03:27.540
Since we've got this error here,
there has to be an ignores already.

47
00:03:27.540 --> 00:03:28.980
Perfect.

48
00:03:28.980 --> 00:03:31.120
We'll do this and dist.

49
00:03:32.960 --> 00:03:33.460
That should work.

50
00:03:38.880 --> 00:03:39.380
&gt;&gt; Mike North: Great.

51
00:03:45.120 --> 00:03:48.800
&gt;&gt; Mike North: So
Nx detected a flaky task.

52
00:03:48.800 --> 00:03:50.800
I can tell you what this means.

53
00:03:50.800 --> 00:03:52.800
Can't tell you exactly
why this one's flaky.

54
00:03:52.800 --> 00:03:58.089
I'm not sure to be blunt,
but part of what Nx does,

55
00:03:58.089 --> 00:04:01.530
it's cached task artifacts.

56
00:04:01.530 --> 00:04:05.466
Meaning for a given set of inputs,

57
00:04:05.466 --> 00:04:12.810
a deterministic task will give
you a consistent set of outputs.

58
00:04:13.850 --> 00:04:18.370
What Nx is detecting here is
that something's changed.

59
00:04:18.370 --> 00:04:19.370
You know what it could be?

60
00:04:19.370 --> 00:04:21.550
Let's see if we get another
flaky task notification here.

61
00:04:23.700 --> 00:04:26.890
It's gonna guess that it's the fact
that we changed our config, but

62
00:04:26.890 --> 00:04:29.060
I'm just speculating at this point.

63
00:04:29.060 --> 00:04:34.059
So anyway, it's running these things and
let me show you

64
00:04:34.059 --> 00:04:39.060
something that pnpm has a little
bit more trouble doing,

65
00:04:39.060 --> 00:04:44.705
or at least you'd have to run
a more elaborate command for this.

66
00:04:44.705 --> 00:04:49.740
Pnpm lerna run build, lint,
test, check -- stream.

67
00:04:49.740 --> 00:04:53.662
Stream means, if you noticed when
we were previously executing tasks,

68
00:04:53.662 --> 00:04:57.020
we kind of just saw the green
check marks for them completing.

69
00:04:57.020 --> 00:04:59.100
We weren't seeing the output.

70
00:04:59.100 --> 00:05:01.580
The only if things error
will you see output.

71
00:05:01.580 --> 00:05:05.100
But if we run this, you can see,
all right, it's doing a bunch of stuff.

72
00:05:05.100 --> 00:05:07.900
We're actually seeing the build output and
it all completes.

73
00:05:07.900 --> 00:05:11.729
If we didn't use stream, it'd be a much
more abbreviated thing where we just see

74
00:05:11.729 --> 00:05:13.660
a bunch of stuff happening in parallel.

75
00:05:15.630 --> 00:05:20.990
You have a lot of control
over how tasks are executed.

76
00:05:22.430 --> 00:05:26.590
We could say, I only want two
tasks running at the same time.

77
00:05:26.590 --> 00:05:29.870
And you can see I've used Concurrency 2.

78
00:05:29.870 --> 00:05:34.202
This would be if you've got other things
happening on your machine you don't want,

79
00:05:34.202 --> 00:05:38.717
say you're twitch streaming while you're
coding, and you don't wanna just peg every

80
00:05:38.717 --> 00:05:41.950
core on your CPU for build and
your video will start to stutter,

81
00:05:41.950 --> 00:05:45.150
this would be how you'd sort of
throttle it down a little bit.

82
00:05:49.150 --> 00:05:53.790
The default here is to let it loose and
run everything in parallel.

83
00:05:53.790 --> 00:05:57.440
But you can explicitly specify
that running parallel,

84
00:05:57.440 --> 00:06:00.030
which we don't need to do.

85
00:06:00.030 --> 00:06:02.550
So great,it's sort of
an abbreviated syntax.

86
00:06:02.550 --> 00:06:07.187
It's kind of cool that we can comma
separate a bunch of tasks that we wanna

87
00:06:07.187 --> 00:06:11.293
run and it runs them on a bunch of
different packages in our repo,

88
00:06:11.293 --> 00:06:12.751
there's also scope.

89
00:06:17.970 --> 00:06:24.730
&gt;&gt; Mike North: Sorry,
this has to be something like seeds/ui.

90
00:06:24.730 --> 00:06:31.050
So here we were saying I wanna run all
these tasks, but only in seeds/ui.

91
00:06:31.050 --> 00:06:35.208
Or we could do this, right,
it's any text fragment here,

92
00:06:35.208 --> 00:06:39.460
basically that can resolve to
some subset of your packages.

93
00:06:40.580 --> 00:06:41.300
So that's great.

94
00:06:42.500 --> 00:06:47.540
But let's look at something and
pnpm can run tasks similar to this.

95
00:06:47.540 --> 00:06:50.987
It still is dependency aware, but here's
something that's a little bit different.

