WEBVTT

1
00:00:00.240 --> 00:00:01.960
&gt;&gt; Mike North: All right,
so everything's going well.

2
00:00:01.960 --> 00:00:03.200
You're using Lerna.

3
00:00:06.240 --> 00:00:08.720
We're able to operate on small
portions of our project.

4
00:00:08.720 --> 00:00:11.891
We're able to run tests or lint or
build only what's changed and

5
00:00:11.891 --> 00:00:13.840
what's affected by what's changed.

6
00:00:15.520 --> 00:00:20.880
Let's see if we can use sort of the full
fat build tool that's underneath this,

7
00:00:20.880 --> 00:00:22.320
which is nx.

8
00:00:22.320 --> 00:00:24.880
And we're gonna need to
globally install nx.

9
00:00:24.880 --> 00:00:30.560
And I'm going to really just sort of
give you a little kind of preview or

10
00:00:30.560 --> 00:00:33.080
an intro into what this can do.

11
00:00:33.080 --> 00:00:35.068
But there's so
much depth with this tool and

12
00:00:35.068 --> 00:00:37.120
I would encourage you
to learn more about it.

13
00:00:38.160 --> 00:00:39.760
It's quite powerful.

14
00:00:39.760 --> 00:00:44.356
So you're going to want to install
a global version of the tool and

15
00:00:44.356 --> 00:00:49.600
you can either do like an NPM
install G for global, I use volta.

16
00:00:49.600 --> 00:00:54.840
So you could say volta, install nx and
this will set up a global version for you.

17
00:00:56.440 --> 00:00:58.806
You could use PNPM if you want, but

18
00:00:58.806 --> 00:01:05.080
ultimately you just want to have something
that lives outside of the project.

19
00:01:05.080 --> 00:01:11.001
Okay, and
now you're gonna run pnpm nx init and

20
00:01:11.001 --> 00:01:15.000
this is like npx nx init.

21
00:01:15.000 --> 00:01:18.931
Basically what we're saying
is run this init task, sorry,

22
00:01:18.931 --> 00:01:24.420
run the init command using the nx cli, and
it's going to create a config file for us.

23
00:01:26.740 --> 00:01:30.100
Well, actually this is more of
a choose your own adventure thing.

24
00:01:30.100 --> 00:01:33.060
So making this the main
thing we're looking at.

25
00:01:34.900 --> 00:01:38.180
So which scripts need to be run in order?

26
00:01:38.180 --> 00:01:43.780
For example, before building a project,
dependent projects must be built.

27
00:01:43.780 --> 00:01:50.050
So this is telling us which of these tasks
need to be sequenced versus which don't.

28
00:01:50.050 --> 00:01:53.730
And I would say sure, let's go with test.

29
00:01:53.730 --> 00:01:58.486
I mean we could test everything
if we wanted to in parallel, but

30
00:01:58.486 --> 00:02:02.883
I kinda like to see that my low
level things pass their tests

31
00:02:02.883 --> 00:02:07.850
because otherwise you're gonna
have low level tests that fail.

32
00:02:07.850 --> 00:02:10.821
And then of course higher level tests
fail because something was broken

33
00:02:10.821 --> 00:02:11.890
at a lower level.

34
00:02:11.890 --> 00:02:13.450
So let's say that there's.

35
00:02:13.450 --> 00:02:17.010
That I'm not going to worry
about these three and linting.

36
00:02:17.010 --> 00:02:21.250
I feel like linting can happen in
parallel across my whole project.

37
00:02:21.250 --> 00:02:25.970
There's no sense of a build
order there necessarily.

38
00:02:25.970 --> 00:02:27.330
No, sorry, I'm wrong.

39
00:02:28.530 --> 00:02:30.810
For linting to work properly,

40
00:02:30.810 --> 00:02:35.890
we need declaration files to exist for
projects that we depend on.

41
00:02:35.890 --> 00:02:37.570
So there is some sequencing there.

42
00:02:39.170 --> 00:02:41.290
Let's leave it unchecked for
now and let's see what happens.

43
00:02:42.480 --> 00:02:44.360
Okay, which scripts are cacheable?

44
00:02:44.360 --> 00:02:47.680
This Means they produce the same
output given the same input.

45
00:02:47.680 --> 00:02:53.920
Build, lint and test are usually falling
into this category and the others are not.

46
00:02:53.920 --> 00:02:58.614
So I'm gonna say test yes, lint and

47
00:02:58.614 --> 00:03:03.160
build yes, check yes and format.

48
00:03:03.160 --> 00:03:08.240
Sure, we can say format yes, the rest no.

49
00:03:08.240 --> 00:03:11.120
And here's the mental
model I want you to use.

50
00:03:12.160 --> 00:03:15.441
You have a code base and
then you run a task and

51
00:03:15.441 --> 00:03:21.920
there's some combination of standard out
and standard error that task produces.

52
00:03:21.920 --> 00:03:24.880
And there may be files that it produces.

53
00:03:24.880 --> 00:03:28.265
And if you could say,
running that task over and over and

54
00:03:28.265 --> 00:03:30.800
over would have exactly the same result.

55
00:03:30.800 --> 00:03:34.600
It's going to make the same files,
it's gonna have the same standard out.

56
00:03:34.600 --> 00:03:36.440
You should check these boxes.

57
00:03:36.440 --> 00:03:41.558
DEV is different because there's another
thing that happens there and that's

58
00:03:41.558 --> 00:03:46.760
like I'm engaging with a UI or I'm making
requests and log lines are coming out.

59
00:03:46.760 --> 00:03:51.120
I don't want that to be cached,
I want that to be live data.

60
00:03:51.120 --> 00:03:51.800
That's happening.

61
00:03:51.800 --> 00:03:53.880
Because what's gonna happen
when we complete this?

62
00:03:55.080 --> 00:03:56.280
I want you to imagine.

63
00:03:56.280 --> 00:03:59.000
Cause this is in essence what's happening.

64
00:04:00.060 --> 00:04:04.140
When you run test and
you haven't changed your code at all.

65
00:04:05.500 --> 00:04:10.000
Instead of running your test, NX will just
spit out the same test results that it

66
00:04:10.000 --> 00:04:14.163
already knows it should have based on
the fact that you already ran them and

67
00:04:14.163 --> 00:04:16.780
you haven't touched anything.

68
00:04:16.780 --> 00:04:19.100
It will appear like the command
is running instantly.

69
00:04:20.460 --> 00:04:26.173
When you understand that that's how this
is working, apply that mental model to

70
00:04:26.173 --> 00:04:31.646
which of these things you should be taking
off the test UI and the watch thing.

71
00:04:31.646 --> 00:04:34.360
These are more ongoing things.

72
00:04:34.360 --> 00:04:35.600
Coverage is fair.

73
00:04:35.600 --> 00:04:37.520
This generates a code coverage report.

74
00:04:37.520 --> 00:04:39.160
It's going to be the same code coverage.

75
00:04:39.160 --> 00:04:43.200
If I don't add a test, the code coverage
report should look exactly the same.

76
00:04:44.400 --> 00:04:45.440
So let's leave it at those.

77
00:04:47.280 --> 00:04:50.000
Does the test script create any outputs?

78
00:04:50.000 --> 00:04:51.320
If not, leave blank.

79
00:04:51.320 --> 00:04:55.520
Otherwise provide a path
relative to the project root.

80
00:04:55.520 --> 00:04:56.960
It does not.

81
00:04:56.960 --> 00:04:59.440
The test coverage task does.

82
00:04:59.440 --> 00:05:00.480
Yes, this does.

83
00:05:04.000 --> 00:05:06.200
Does the lint script create outputs?

84
00:05:06.200 --> 00:05:06.960
It does not.

85
00:05:06.960 --> 00:05:09.600
There's no report it's creating,
just standard out.

86
00:05:10.728 --> 00:05:15.708
Dist and well, we're going to find where

87
00:05:15.708 --> 00:05:20.840
this is and we'll edit in the config file.

88
00:05:20.840 --> 00:05:25.008
I'm not sure how this is going to behave
if I add comma separated things here, but

89
00:05:25.008 --> 00:05:27.910
it's the dist folder and
it's the ts build info files.

90
00:05:29.350 --> 00:05:31.830
Does the check script create any outputs?

91
00:05:31.830 --> 00:05:32.630
No, it does not.

92
00:05:33.670 --> 00:05:35.190
Does the format script?

93
00:05:35.190 --> 00:05:35.990
No, it does not.

94
00:05:37.030 --> 00:05:40.710
Okay, now it's going and doing its thing,
installing a Bunch of dependencies.

95
00:05:40.710 --> 00:05:42.470
Do we want remote caching?

96
00:05:42.470 --> 00:05:43.714
I'm gonna say yes.

97
00:05:43.714 --> 00:05:48.070
Now, eventually NX will charge you for
remote build caching.

98
00:05:49.590 --> 00:05:53.020
They give you a generous free amount.

99
00:05:54.060 --> 00:05:58.556
So it's worth checking out and
in my opinion, it's worth paying for

100
00:05:58.556 --> 00:06:02.060
fast builds or
something you're really chasing.

101
00:06:02.060 --> 00:06:04.060
It's really just to store.

102
00:06:04.060 --> 00:06:09.457
Not necessarily like it's
storing the console output or

103
00:06:09.457 --> 00:06:14.940
the files that are created and
a hash of the inputs.

104
00:06:14.940 --> 00:06:18.778
And that means that if you build
something on your machine and

105
00:06:18.778 --> 00:06:23.369
then I build something on my machine and
the inputs are exactly the same,

106
00:06:23.369 --> 00:06:26.850
I get to benefit from your
pre existing build result.

107
00:06:26.850 --> 00:06:29.090
That is work that is already done.

108
00:06:29.090 --> 00:06:31.650
It does not need to be done on my machine.

109
00:06:31.650 --> 00:06:35.568
If we're really honest about
those builds being cacheable,

110
00:06:35.568 --> 00:06:41.010
it is only as good as your judgment around
whether builds are truly cacheable or not.

111
00:06:41.010 --> 00:06:45.659
I'm using an M4 MacBook, somebody else
might be using an X86 processor and

112
00:06:45.659 --> 00:06:48.831
there's some native dependency
that we both need and

113
00:06:48.831 --> 00:06:51.240
maybe that's going to screw things up.

114
00:06:51.240 --> 00:06:56.505
But like for CI machines where you can
routinely rely on them being like we're

115
00:06:56.505 --> 00:07:01.369
running this in Docker, it is going
to be the same thing no matter what.

116
00:07:01.369 --> 00:07:05.440
No hardware access,
no direct access to hardware.

117
00:07:05.440 --> 00:07:09.930
So it's like going to be very,
very predictable.

118
00:07:09.930 --> 00:07:14.380
&gt;&gt; Student: Actually it touches on, I was
gonna ask, would you trust the caching

119
00:07:14.380 --> 00:07:18.692
enough for if you had a test suite
that was running before a deploy?

120
00:07:18.692 --> 00:07:23.942
Is this reliable enough that you would
consider caching that or would you

121
00:07:23.942 --> 00:07:29.810
after it's been run on local machines,
before the main deploy actually run it?

122
00:07:29.810 --> 00:07:33.190
&gt;&gt; Mike North: I would trust this,
I'm putting my,

123
00:07:33.190 --> 00:07:37.945
remember where I work,
we gotta make sure that we're

124
00:07:37.945 --> 00:07:43.220
actually running tests right
before deploy for sure.

125
00:07:43.220 --> 00:07:48.617
But if you were saying, well, the PR
builds like validating code in those

126
00:07:48.617 --> 00:07:53.669
PR branches, knowing that ultimately
before things are deployed,

127
00:07:53.669 --> 00:07:58.020
we're running the pipeline
on the main branch anyway.

128
00:07:58.020 --> 00:08:02.253
I would totally put something like this in
place and especially upstream of that for

129
00:08:02.253 --> 00:08:05.510
developer builds,
keeping that nice and productive.

130
00:08:05.510 --> 00:08:08.819
Basically the closer to authoring you get,

131
00:08:08.819 --> 00:08:13.750
the more I'm willing to
tolerate using a cached build.

132
00:08:13.750 --> 00:08:19.750
And it also depends on the task, if it's
linting, I'm much more okay with that.

133
00:08:19.750 --> 00:08:22.988
But if we're saying the build output,

134
00:08:22.988 --> 00:08:27.308
like the actual compiled
output of the typescript,

135
00:08:27.308 --> 00:08:32.230
I would want that to be created fresh,
you know?

136
00:08:32.230 --> 00:08:33.430
Does that make sense?

137
00:08:33.430 --> 00:08:36.155
&gt;&gt; Student: Yeah, I think just
anytime you're caching things,

138
00:08:36.155 --> 00:08:38.710
I've Run into stale caches
enough that totally.

139
00:08:38.710 --> 00:08:41.670
I'm skeptical, but
it seems like a cool idea.

140
00:08:41.670 --> 00:08:44.429
&gt;&gt; Mike North: It's a cool idea and
I think it's a no-brainer for

141
00:08:44.429 --> 00:08:45.990
some kinds of tasks.

142
00:08:45.990 --> 00:08:49.350
Like, would I be fine with
prettier being cached?

143
00:08:49.350 --> 00:08:50.470
Absolutely.

144
00:08:50.470 --> 00:08:52.790
Like single quotes, double quotes.

145
00:08:53.910 --> 00:08:55.430
I mean, I'm sure you could.

146
00:08:55.430 --> 00:08:58.482
Someone can find a significant
security vulnerability that

147
00:08:58.482 --> 00:09:02.561
occurred cuz someone used double quotes or
they should have used single quotes.

148
00:09:02.561 --> 00:09:05.300
Generally is not going to matter.

149
00:09:06.820 --> 00:09:10.180
All right,
which plugins would you like to add?

150
00:09:10.180 --> 00:09:13.460
And it's giving me an opportunity
to check things off.

151
00:09:13.460 --> 00:09:19.060
NX is pretty good at inferring what
already exists in your project and setting

152
00:09:19.060 --> 00:09:24.500
up plugins for itself so that it can
engage with with these kinds of things.

153
00:09:24.500 --> 00:09:27.340
Really, and what are these plugins for?

154
00:09:27.340 --> 00:09:31.900
Think of them as replacements for
your NPM tasks.

155
00:09:31.900 --> 00:09:34.580
Where it knows how to invoke vite.

156
00:09:34.580 --> 00:09:40.388
It allows you in an NX config file instead
of passing arguments to the vite cli,

157
00:09:40.388 --> 00:09:43.980
you can have configuration
that you check in.

158
00:09:43.980 --> 00:09:48.235
And it's a little bit more maintainable
that way because you're not trying to look

159
00:09:48.235 --> 00:09:52.210
at 12 flags that you're passing to
the CLI in some shell script somewhere.

160
00:09:53.810 --> 00:09:55.170
All right, we're gonna install those.

161
00:09:57.810 --> 00:10:01.210
Do you want to start using NX
in your package JSON scripts?

162
00:10:01.210 --> 00:10:02.290
I want to say no to this.

163
00:10:02.290 --> 00:10:07.944
If I were to say yes, what it'll do is
it will reach into my package JSON,

164
00:10:07.944 --> 00:10:12.396
grab the existing scripts,
move them into an NX task that

165
00:10:12.396 --> 00:10:16.385
is effectively like their shell out task,
right,

166
00:10:16.385 --> 00:10:21.488
just like run this command, and
then it would replace everything

167
00:10:21.488 --> 00:10:26.590
in the package JSON with an NX
based invocation of that task.

168
00:10:26.590 --> 00:10:28.750
In fact, we could do it both ways.

169
00:10:28.750 --> 00:10:29.830
Let's try it this way.

170
00:10:29.830 --> 00:10:34.590
And then we can reset and
try it the other way if we want.

171
00:10:34.590 --> 00:10:37.500
But I would rather show you one
off how this is going to work.

