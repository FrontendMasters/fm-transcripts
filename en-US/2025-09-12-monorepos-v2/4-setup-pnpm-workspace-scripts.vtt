WEBVTT

1
00:00:00.320 --> 00:00:04.256
&gt;&gt; Mike North: So the first thing we're
going to do is we want to create a folder

2
00:00:04.256 --> 00:00:05.680
for this new package.

3
00:00:08.320 --> 00:00:10.088
So we're going to say mktir dash p.

4
00:00:10.088 --> 00:00:13.520
So we create all subfolders
necessary to make this work.

5
00:00:13.520 --> 00:00:16.800
And we're just gonna call this UI.

6
00:00:16.800 --> 00:00:18.800
I'm creating a folder
here called Packages.

7
00:00:18.800 --> 00:00:21.200
This is where I'm going to
put all of my packages.

8
00:00:21.200 --> 00:00:25.653
There's another approach that some people
like to take here where they'll have two

9
00:00:25.653 --> 00:00:28.680
folders, one called Apps and
one called Libraries.

10
00:00:28.680 --> 00:00:33.947
And they'll separate out their leaf
level dependencies like CLIs, UIs,

11
00:00:33.947 --> 00:00:39.230
servers from things that are sort of
in the middle of the dependency graph.

12
00:00:39.230 --> 00:00:41.668
But it's just purely
an organizational construct and

13
00:00:41.668 --> 00:00:44.270
we're going to keep things simple for now.

14
00:00:44.270 --> 00:00:49.297
All right, next we're going
to take all of the code and

15
00:00:49.297 --> 00:00:53.780
except for a couple files,
if you're following

16
00:00:53.780 --> 00:00:58.600
the course notes,
I have this list of files too.

17
00:00:58.600 --> 00:01:01.080
We're going to select everything,
deselect packages.

18
00:01:02.440 --> 00:01:05.384
What we're going to
leave is the gitignore,

19
00:01:05.384 --> 00:01:10.360
the nvmrc which is just make sure
we're all using the same node version.

20
00:01:10.360 --> 00:01:14.680
We're going to leave the prettier config,
we're going to leave the pnpm lock file.

21
00:01:15.960 --> 00:01:22.110
We're going to leave the readme for
the whole project and

22
00:01:22.110 --> 00:01:27.651
let's move everything into,
&gt;&gt; Mike North: Let's

23
00:01:27.651 --> 00:01:33.930
move everything into packages
UI except for those things.

24
00:01:37.690 --> 00:01:42.730
Okay, I'm definitely hit no here.

25
00:01:42.730 --> 00:01:50.888
This is gonna freak havoc if you
update imports for known modules.

26
00:01:50.888 --> 00:01:54.784
The next thing we'll do and
I think I actually had a version of this I

27
00:01:54.784 --> 00:01:58.820
accidentally checked in here,
but, no, no, this is fine.

28
00:01:58.820 --> 00:02:00.100
PNPM workspace.

29
00:02:00.100 --> 00:02:03.380
You want to have this
also in your root level.

30
00:02:03.380 --> 00:02:05.380
Now I've added some things here.

31
00:02:06.660 --> 00:02:09.300
Normally when you'd start this
journey you wouldn't have this file.

32
00:02:09.300 --> 00:02:12.598
All we're seeing here is these files,
sorry,

33
00:02:12.598 --> 00:02:17.380
these NPM modules have a post install
step that requires like a little

34
00:02:17.380 --> 00:02:21.260
bit of a build once it's installed and
it's on disk.

35
00:02:21.260 --> 00:02:26.940
And this allow lists those two packages so
that they can do their post build step.

36
00:02:26.940 --> 00:02:30.377
Normally you'd be blocked and
you'd see a message and it'd say like,

37
00:02:30.377 --> 00:02:32.380
do you wanna let these two things run?

38
00:02:32.380 --> 00:02:33.660
So I've taken care of that for you.

39
00:02:33.660 --> 00:02:39.001
But the meaningful thing we have
to add to this pnpm workspace

40
00:02:39.001 --> 00:02:43.923
YAML file is this packages and
then we're going to say,

41
00:02:43.923 --> 00:02:47.920
we're going to in packages, say packages.

42
00:02:53.520 --> 00:02:59.471
What we're saying here is we're telling
pnpm that this is where it can look for

43
00:02:59.471 --> 00:03:03.360
subfolders, each of which
represents a package.

44
00:03:04.880 --> 00:03:06.960
Now we will need.

45
00:03:06.960 --> 00:03:08.647
So if we close up packages UI,

46
00:03:08.647 --> 00:03:12.430
we're going to need a package JSON
at the top level of the project.

47
00:03:14.990 --> 00:03:16.430
This is going to be really thin.

48
00:03:17.470 --> 00:03:23.195
We're going to give this package a name
and it's going to be called Seeds, and

49
00:03:23.195 --> 00:03:29.630
we're going to give it a version and we'll
just say 001 and we can say it's private.

50
00:03:30.990 --> 00:03:35.251
True, what private means
is your package manager

51
00:03:35.251 --> 00:03:40.200
will refuse to publish this
to NPM if it's private.

52
00:03:40.200 --> 00:03:43.954
And there's one more thing that I want us
to move here, and that is if you go to

53
00:03:43.954 --> 00:03:47.720
your package JSON you'll see there's
a little volta object at the bottom.

54
00:03:47.720 --> 00:03:51.557
This is kind of like the nvmrc, just make
sure that if you have volta installed,

55
00:03:51.557 --> 00:03:53.720
we're all using the same version of Node.

56
00:03:53.720 --> 00:03:55.507
This only really matters,

57
00:03:55.507 --> 00:03:59.320
or at least using a monorepo
the right way, in my opinion.

58
00:03:59.320 --> 00:04:04.207
You'd say we want one version of Node
that you're using across development of

59
00:04:04.207 --> 00:04:06.370
every single thing in this repo.

60
00:04:06.370 --> 00:04:14.891
So I wanna cut that, bring it to our root
level package JSON, paste it, and save.

61
00:04:14.891 --> 00:04:18.769
One last change we have to make,
if we go back to our UI package JSON,

62
00:04:18.769 --> 00:04:23.330
the one with all the dependencies in it,
we're gonna wanna rename this.

63
00:04:23.330 --> 00:04:26.954
Originally this was the Seeds
package project and

64
00:04:26.954 --> 00:04:29.460
we're going to rename it to this.

65
00:04:30.820 --> 00:04:37.540
Now, what I've done here is I'm kind of
leaning into this concept of NPM scopes.

66
00:04:37.540 --> 00:04:42.535
So if you wanted to put this on NPM,
if I wanted to publish this project,

67
00:04:42.535 --> 00:04:47.540
I could go and reserve,
if it's available, the NPM scope seeds.

68
00:04:47.540 --> 00:04:50.872
And that means this is kind of
a prefix that I can use for

69
00:04:50.872 --> 00:04:53.180
any packages that I wish to publish.

70
00:04:53.180 --> 00:04:58.164
So, for an open source monorepo
consisting of TypeScript libraries,

71
00:04:58.164 --> 00:05:00.156
it's very, very common for

72
00:05:00.156 --> 00:05:05.650
you to have an NPM scope that kind of says
it's sort of in the package registry.

73
00:05:05.650 --> 00:05:07.372
The monorepo concept,

74
00:05:07.372 --> 00:05:13.090
it's saying these are all interrelated
packages for some reason.

75
00:05:13.090 --> 00:05:16.890
Sometimes they're used for
other things too, like Stripe.

76
00:05:16.890 --> 00:05:21.082
We have a ripe scope, and
we have multiple repos, but

77
00:05:21.082 --> 00:05:26.300
it's sort of an indicator that this
is a real package from Stripe or

78
00:05:26.300 --> 00:05:29.200
some of our real packages are there.

79
00:05:31.360 --> 00:05:34.800
Great, okay,
this is gonna be a recurring theme.

80
00:05:36.400 --> 00:05:38.960
I've touched some package JSON files.

81
00:05:38.960 --> 00:05:41.680
Therefore, I must run pnpmi.

82
00:05:43.120 --> 00:05:46.720
Before we do, I just want us to
examine the state of the world.

83
00:05:46.720 --> 00:05:50.000
There's no nodemodules
folder anywhere here yet.

84
00:05:51.660 --> 00:05:55.180
There is one, of course, here,
it was part of what we dragged.

85
00:06:00.700 --> 00:06:05.060
We should see a little node
modules folder up here now.

86
00:06:05.060 --> 00:06:06.860
It's not very interesting.

87
00:06:08.060 --> 00:06:12.300
There's not much in here yet,
but we will get there.

88
00:06:12.300 --> 00:06:15.380
You can see that there's some
evidence of something's happening.

89
00:06:15.380 --> 00:06:18.360
Like, hey, look,
this is a little a state file.

90
00:06:18.360 --> 00:06:21.040
And we've recognized that
there is this package.

91
00:06:21.040 --> 00:06:23.560
And I have 001 here.

92
00:06:23.560 --> 00:06:26.600
Clearly something's taking place.

93
00:06:27.800 --> 00:06:30.600
Now, something unfortunate's
happened here, though.

94
00:06:32.360 --> 00:06:39.320
What I wanted to do was say this still
works and the build command's not found.

95
00:06:39.320 --> 00:06:41.720
We have to figure out
a way to wire this up.

96
00:06:41.720 --> 00:06:46.629
The solution to this is going to be going
back to this package JSON file@ the root

97
00:06:46.629 --> 00:06:50.530
of the project, and
we're going to be creating some scripts.

98
00:06:52.210 --> 00:06:57.252
The first script we're going to create

99
00:06:57.252 --> 00:07:02.690
is this build pnpm color run dash r build.

100
00:07:02.690 --> 00:07:06.233
I'm writing this in the most
explicit way possible so

101
00:07:06.233 --> 00:07:09.010
that we can see how this works.

102
00:07:09.010 --> 00:07:13.160
Now, if we were to run PNPM build,
we can see, hey, look,

103
00:07:13.160 --> 00:07:18.300
there's Vite doing its thing,
and it's building the project.

104
00:07:18.300 --> 00:07:19.340
What does this mean?

105
00:07:19.340 --> 00:07:27.580
Well, first we're saying I'm running this
build task and I'm doing so recursively.

106
00:07:27.580 --> 00:07:32.916
I am going into each package
that I find in the workspace

107
00:07:32.916 --> 00:07:37.480
as defined in this workspace YAML file.

108
00:07:37.480 --> 00:07:40.040
Like I'm going to everything I find here.

109
00:07:40.040 --> 00:07:45.640
And by the way, this is how you do
multiple oops, except with real YAML.

110
00:07:47.480 --> 00:07:49.400
Well, you have multiple listings here.

111
00:07:50.440 --> 00:07:52.600
I think you just can't have
the same thing over and over.

112
00:07:54.040 --> 00:07:57.986
But like it's going through every
package that, that it can find and

113
00:07:57.986 --> 00:08:00.200
where a build task exists.

114
00:08:00.200 --> 00:08:05.660
Like, as long as a package,
like our UI project has some build

115
00:08:05.660 --> 00:08:11.015
script that is going to be run,
all this does is make sure that

116
00:08:11.015 --> 00:08:17.120
the colorful output is preserved
to get everything wired up nicely.

117
00:08:17.120 --> 00:08:19.000
It's gonna be super easy.

118
00:08:19.000 --> 00:08:21.080
We're going to create a bunch of these.

119
00:08:21.080 --> 00:08:26.529
We're going to say this one is lint and

120
00:08:26.529 --> 00:08:31.807
this one is test and this one is dev and

121
00:08:31.807 --> 00:08:38.641
this one will make format and
last one is check.

122
00:08:38.641 --> 00:08:44.517
Again this snippet is in the course notes,

123
00:08:44.517 --> 00:08:49.260
if you want to make that real easy.

124
00:08:49.260 --> 00:08:55.420
But it's just like, we haven't really
changed what any of these things mean.

125
00:08:56.780 --> 00:09:03.900
We have simply now said all right, there's
a fan out for all of our one packages.

126
00:09:03.900 --> 00:09:05.940
We're going to run these things now.

127
00:09:05.940 --> 00:09:10.170
You should be able to do pnpm test and

128
00:09:10.170 --> 00:09:16.380
it should work pnpm lint and
it should work pnpm dev.

129
00:09:17.420 --> 00:09:19.987
We should see the startup
where there's the client,

130
00:09:19.987 --> 00:09:22.278
there's the server, everything works well.

131
00:09:28.710 --> 00:09:31.527
&gt;&gt; Mike North: One more thing I want
to show you all that's important about

132
00:09:31.527 --> 00:09:32.550
how we just did this.

133
00:09:35.830 --> 00:09:39.799
Let's look at our git diff and
let's add everything, and

134
00:09:39.799 --> 00:09:41.830
sorry, I can get rid of that.

135
00:09:44.870 --> 00:09:49.080
I want to see this as a tree so
that I can close the tests.

136
00:09:50.120 --> 00:09:51.960
In fact, the whole UI package.

137
00:09:51.960 --> 00:09:55.240
So look at what's happened here.

138
00:09:55.240 --> 00:10:00.493
We have a PNPM lock file because
we preserved this because we

139
00:10:00.493 --> 00:10:06.520
didn't just sort of like nuke it or
leave it in the UI sub package.

140
00:10:06.520 --> 00:10:10.480
All that's happened here is like a little
bit of restructuring up at the top.

141
00:10:10.480 --> 00:10:14.880
And there are obviously about 5,000
lines that haven't been touched.

142
00:10:14.880 --> 00:10:15.840
Very important.

143
00:10:15.840 --> 00:10:19.200
This is one of the benefits of pnpm.

144
00:10:19.200 --> 00:10:21.920
The lock files are much
more human readable.

145
00:10:21.920 --> 00:10:26.278
And if you had done this
with a YARN lock file or

146
00:10:26.278 --> 00:10:32.480
a package lock JSON, you might
not see such a clean result here.

147
00:10:32.480 --> 00:10:34.160
That would give you confidence.

148
00:10:34.160 --> 00:10:38.186
We have accomplished this reorganization
of our code without releasing

149
00:10:38.186 --> 00:10:41.040
any of the locks that we
had on all of our packages.

150
00:10:41.040 --> 00:10:45.860
You don't want to be doing that at the
same time you're reorganizing your code.

151
00:10:45.860 --> 00:10:48.681
Because that's like we're trying
to do one thing here, and

152
00:10:48.681 --> 00:10:51.740
that's move some files around and
get some NPM scripts wired up.

153
00:10:54.780 --> 00:10:55.580
That's nice.

154
00:10:55.580 --> 00:11:00.292
Then furthermore,
if we look at the way that this code

155
00:11:00.292 --> 00:11:05.020
is being treated,
it's important at this step.

156
00:11:05.020 --> 00:11:11.820
You want to see all of the changes you've
made as being regarded as a rename.

157
00:11:13.020 --> 00:11:17.527
Why is having this as a rename a good
idea as opposed to a deletion and an ad,

158
00:11:17.527 --> 00:11:20.800
which you would get if I was
messing with these files,

159
00:11:20.800 --> 00:11:24.510
if I was making changes in
the files of a substantive nature,

160
00:11:24.510 --> 00:11:28.924
in addition to making this move,
you get to preserve your git history.

161
00:11:28.924 --> 00:11:29.701
&gt;&gt; Speaker 2: That's right.

162
00:11:29.701 --> 00:11:30.201
&gt;&gt; Mike North: Right?

163
00:11:31.740 --> 00:11:35.580
You don't want the old history
of this file to end and

164
00:11:35.580 --> 00:11:40.554
then a deletion happens and
then a new file pops up into existence and

165
00:11:40.554 --> 00:11:45.540
there goes your git blame because
you've lost all of that history.

166
00:11:45.540 --> 00:11:47.100
It's very valuable to preserve.

167
00:11:47.100 --> 00:11:49.700
And so
this is why when you're doing this step,

168
00:11:49.700 --> 00:11:52.180
I would advise this is
a good first step to do.

169
00:11:53.300 --> 00:11:54.965
Don't continue refactoring here and

170
00:11:54.965 --> 00:11:57.780
separating things out into
different packages as part of that.

171
00:11:57.780 --> 00:12:03.076
Because when you're doing that,
you're introducing a much stronger

172
00:12:03.076 --> 00:12:08.207
possibility that you're gonna lose
history on some of these files.

173
00:12:08.207 --> 00:12:12.686
Well, in this case, it's such a simple
operation we're performing that

174
00:12:12.686 --> 00:12:17.306
you've got a very good shot at these all
just being sort of a reorganization,

175
00:12:17.306 --> 00:12:19.600
which is exactly what you're doing.

