WEBVTT

1
00:00:00.480 --> 00:00:05.237
&gt;&gt; Mike North: Next, we're going to look
at two nice Microsoft projects that I find

2
00:00:05.237 --> 00:00:10.000
really useful in Monorepos,
API Extractor and API Documenter.

3
00:00:10.000 --> 00:00:13.280
And they're kind of meant
to work together, and

4
00:00:13.280 --> 00:00:16.240
we'll see how in this next section.

5
00:00:16.240 --> 00:00:18.720
So first we're going to
install API Extractor.

6
00:00:18.720 --> 00:00:22.160
The purpose of this project
is kind of twofold, but

7
00:00:22.160 --> 00:00:24.960
all centrally related to the same thing.

8
00:00:27.480 --> 00:00:31.845
It will analyze your project and
specifically it'll

9
00:00:31.845 --> 00:00:36.404
analyze your declaration files
in your build output and

10
00:00:36.404 --> 00:00:41.160
it will create a rollup of
those declaration files.

11
00:00:41.160 --> 00:00:46.117
What this means is you're going to get
one DTS file that contains everything

12
00:00:46.117 --> 00:00:48.680
that you're potentially exporting.

13
00:00:49.720 --> 00:00:52.840
It will give you an API report for
that file.

14
00:00:52.840 --> 00:00:53.920
It's a markdown file.

15
00:00:53.920 --> 00:00:59.590
And I would encourage you to commit this
one to Git because it makes spotting

16
00:00:59.590 --> 00:01:05.220
changes to the API to the public API
of your library super easy to see.

17
00:01:05.220 --> 00:01:07.537
Because this is mainly a library tool,

18
00:01:07.537 --> 00:01:10.554
we're going to be focusing
on the Models package,

19
00:01:10.554 --> 00:01:15.060
but you would use this anywhere you
have a library shaped monorepo package.

20
00:01:17.860 --> 00:01:24.990
Let's jump in, let's enter
the Models folder Packages Models.

21
00:01:24.990 --> 00:01:30.891
And we're gonna install API Extractor.

22
00:01:30.891 --> 00:01:38.190
PNPM i dev dependency
Microsoft/api-extractor.

23
00:01:41.390 --> 00:01:41.890
Great.

24
00:01:44.990 --> 00:01:49.774
This is a nice tool that gives you
the starting point configuration file

25
00:01:49.774 --> 00:01:51.216
with a easy command.

26
00:01:55.547 --> 00:02:01.630
Api-extractor init and
we're gonna see that in models.

27
00:02:01.630 --> 00:02:03.470
What just popped up this thing?

28
00:02:03.470 --> 00:02:06.110
The api-extractor.json file.

29
00:02:06.110 --> 00:02:07.950
If you hate these red squiggles.

30
00:02:09.870 --> 00:02:14.925
The red squiggles are because technically
comments are not allowed in JSON.

31
00:02:14.925 --> 00:02:20.606
In fact, a lot of tooling will be unhappy,
if you add comments to

32
00:02:20.606 --> 00:02:26.760
your package JSON a lot of tooling
will be super mad about that.

33
00:02:26.760 --> 00:02:35.038
There's something you can
do in your settings file.

34
00:02:35.038 --> 00:02:40.959
Interesting, I guess I
already have it here.

35
00:02:40.959 --> 00:02:45.180
You know what, I just need to pull this
up to the root level of my workspace.

36
00:02:45.180 --> 00:02:51.260
I had a .vscode folder that was there
at the beginning of the workshop.

37
00:02:51.260 --> 00:02:56.460
And now in order to be honored,
it needs to be.

38
00:02:56.460 --> 00:02:59.420
Wow, get me out of here.

39
00:02:59.420 --> 00:03:02.460
It needs to be at the workspace root,
good God.

40
00:03:12.870 --> 00:03:17.030
Great, there's VS code.

41
00:03:18.390 --> 00:03:21.030
And maybe if I open this up again.

42
00:03:27.910 --> 00:03:28.670
Removed it.

43
00:03:28.670 --> 00:03:29.990
Saved.
Added it saved.

44
00:03:29.990 --> 00:03:35.920
Apparently that's what VS Code took
to make the complaints go away.

45
00:03:35.920 --> 00:03:39.105
All right, we need to make
a couple little edits here, but

46
00:03:39.105 --> 00:03:42.680
let me tell you about what you're
setting up in this config file.

47
00:03:42.680 --> 00:03:47.648
First off, you're configuring

48
00:03:47.648 --> 00:03:52.622
the particulars of the rollups.

49
00:03:52.622 --> 00:03:55.920
Actually this might be
useful in this outline.

50
00:03:57.680 --> 00:04:02.352
So they've got an API report object,
a doc model project, like a, sorry,

51
00:04:02.352 --> 00:04:06.300
top level property, and
then we've got a DTS rollup property.

52
00:04:06.300 --> 00:04:08.459
So we're gonna go to DTS rollup and

53
00:04:08.459 --> 00:04:11.740
we're gonna see that there
are a couple paths here.

54
00:04:11.740 --> 00:04:14.468
There's an untrimmed file path,

55
00:04:14.468 --> 00:04:19.460
there's a alpha trimmed file path,
a beta trimmed file path.

56
00:04:19.460 --> 00:04:26.134
And so what's gonna happen here is if
we went to our seed packet model and

57
00:04:26.134 --> 00:04:30.359
we said, all right, this is exported here,

58
00:04:30.359 --> 00:04:35.475
I can add JSDOC tags like alpha or
beta or internal, and

59
00:04:35.475 --> 00:04:41.149
that will determine which of
these rollup files the types for

60
00:04:41.149 --> 00:04:46.263
this end up in which, if any,
like if it's internal,

61
00:04:46.263 --> 00:04:52.910
well, untrimmed file path,
that's the only one it'll show up in.

62
00:04:52.910 --> 00:04:56.282
But if I say it's beta, well,
it'll go in both the alpha and

63
00:04:56.282 --> 00:04:59.260
the beta, and
of course in the untrimmed path.

64
00:04:59.260 --> 00:05:01.925
And then if you're saying it's public,
well,

65
00:05:01.925 --> 00:05:03.940
it also goes in the public file path.

66
00:05:03.940 --> 00:05:06.877
So you can think of these
as sort of being more and

67
00:05:06.877 --> 00:05:10.772
more restrictive the more mature
the release is, if you will,

68
00:05:10.772 --> 00:05:15.500
untrimmed being the least mature,
then alpha, then beta, then public.

69
00:05:15.500 --> 00:05:20.472
And if you're using these JSDOC tags,
basically you're just stripping more and

70
00:05:20.472 --> 00:05:25.228
more away until you eventually get to
the stuff you're really confident in and

71
00:05:25.228 --> 00:05:27.340
that people should be free to use.

72
00:05:28.400 --> 00:05:32.240
So that's why we have a bunch
of different files here.

73
00:05:32.240 --> 00:05:34.080
They will have different contents.

74
00:05:35.520 --> 00:05:36.880
Where do I find this most useful?

75
00:05:36.880 --> 00:05:41.728
In the world of monorepos, you don't
have to use these for alpha releases or

76
00:05:41.728 --> 00:05:43.679
beta releases.

77
00:05:43.679 --> 00:05:48.383
I will often use untrimmed if
I want to export things and

78
00:05:48.383 --> 00:05:53.120
then I want the ability
to import them in tests.

79
00:05:53.120 --> 00:05:55.455
So that's saying I've exported this thing,
but

80
00:05:55.455 --> 00:05:58.000
don't take that as
an invitation to use it.

81
00:05:58.000 --> 00:06:00.005
I just need to be able to unit test it and

82
00:06:00.005 --> 00:06:02.400
it needs to be available
outside the module.

83
00:06:02.400 --> 00:06:06.494
In order for me to do that,

84
00:06:06.494 --> 00:06:14.320
I will point in a tsconfig
file how we can do paths.

85
00:06:15.920 --> 00:06:17.607
I do something like this.

86
00:06:25.755 --> 00:06:28.309
Something something something dot.

87
00:06:34.696 --> 00:06:35.930
Something like that, right?

88
00:06:35.930 --> 00:06:41.930
Like I would say I'm opting in
to use the untrimmed types.

89
00:06:44.090 --> 00:06:47.850
And if you wanted to do alpha or
beta, you could do that as well.

90
00:06:47.850 --> 00:06:49.445
Now, in a monorepo,

91
00:06:49.445 --> 00:06:54.660
where I think this really sings is
when you have a Couple packages.

92
00:06:54.660 --> 00:06:58.981
Let's say you have a pair of packages and
they're very intimately connected, but

93
00:06:58.981 --> 00:07:02.020
you still have reasons for
wanting to keep them separate.

94
00:07:02.020 --> 00:07:07.780
Say one's more of a library shaped thing
and the other's a CLI shaped thing.

95
00:07:07.780 --> 00:07:13.200
And you're really not
ready to expose everything

96
00:07:13.200 --> 00:07:17.983
the CLI needs to engage
with in terms of how.

97
00:07:17.983 --> 00:07:19.860
The contract it has with this library.

98
00:07:19.860 --> 00:07:25.100
Like, maybe you're making your way towards
making some of these public API things,

99
00:07:25.100 --> 00:07:30.044
but this is a great way to say, all right,
well, there's like a special level of

100
00:07:30.044 --> 00:07:34.777
entanglement that happens here and
you can accomplish that by overriding and

101
00:07:34.777 --> 00:07:38.460
saying, I'm not looking at
the public declaration file.

102
00:07:38.460 --> 00:07:42.470
When I get types for
this library, I'm looking for

103
00:07:42.470 --> 00:07:46.970
the untrimmed one or
the beta one or whatever it is.

104
00:07:46.970 --> 00:07:50.693
And that lets you have control
over kind of the encapsulation, or

105
00:07:50.693 --> 00:07:55.092
at least the encapsulation that type
checking helps steer you towards rather

106
00:07:55.092 --> 00:07:57.609
than saying, look, it's all or nothing.

107
00:07:57.609 --> 00:08:00.982
You're either exporting it,
then you can unit test it, but

108
00:08:00.982 --> 00:08:04.250
also everybody else can use it or
don't export it at all.

109
00:08:04.250 --> 00:08:05.610
And good luck.

110
00:08:07.840 --> 00:08:10.400
All right, so let's go through that
process and let's see this in action.

111
00:08:10.400 --> 00:08:16.960
So I want to add a comma here just so
I can uncomment some more lines.

112
00:08:16.960 --> 00:08:18.960
So we've got the untrimmed file path.

113
00:08:18.960 --> 00:08:19.460
Great.

114
00:08:21.040 --> 00:08:25.600
And I actually tend to want to name
this a little bit differently.

115
00:08:25.600 --> 00:08:30.383
I think it's a little bit of a foot gun
to say if I look in the dist folder and

116
00:08:30.383 --> 00:08:34.240
I see like seeds, models,
dts, it's not scary enough.

117
00:08:36.590 --> 00:08:39.630
So I want to add the word
untrimmed to this.

118
00:08:39.630 --> 00:08:44.190
I want the default thing, you see there,
to be something that is maximally safe.

119
00:08:45.470 --> 00:08:49.310
All right, and let's uncomment
the alpha trimmed file path.

120
00:08:49.310 --> 00:08:52.910
And this adds dash alpha at the end,
which seems fine to me.

121
00:08:55.950 --> 00:08:58.510
The beta trimmed file
path will have that too.

122
00:08:58.510 --> 00:09:00.600
And it adds -beta.

123
00:09:00.600 --> 00:09:04.760
And then finally there is
a public trimmed file path.

124
00:09:04.760 --> 00:09:07.080
And I'm going to remove public from this.

125
00:09:07.080 --> 00:09:11.000
Again, this has to do with
my own convention here.

126
00:09:11.000 --> 00:09:17.008
Like if you don't have a specifier,
if it's just the name of the package dts,

127
00:09:17.008 --> 00:09:22.680
I want that to be the safest thing to use,
not the untrimmed thing.

128
00:09:22.680 --> 00:09:25.720
We can get rid of that trailing comma,
cuz that's all we're gonna do here.

129
00:09:30.440 --> 00:09:33.712
We need to find another symbol in here and

130
00:09:33.712 --> 00:09:37.960
it is this up at the top main entry point,
file path.

131
00:09:39.400 --> 00:09:40.200
There it is.

132
00:09:42.360 --> 00:09:48.360
This is going to be in your
dist folder and it is where.

133
00:09:48.360 --> 00:09:52.962
It's sort of like where this tool
is going to begin as it understands

134
00:09:52.962 --> 00:09:57.010
the types that you're
exporting from your library.

135
00:09:57.010 --> 00:09:58.530
So we're not.

136
00:09:58.530 --> 00:10:01.250
Our convention is dist is
where we're putting that.

137
00:10:02.930 --> 00:10:07.968
All right, lastly,
there are some options lower down in here,

138
00:10:07.968 --> 00:10:13.490
and we've got one here that's
called extractor Message reporting.

139
00:10:13.490 --> 00:10:15.410
There's a section here.

140
00:10:15.410 --> 00:10:18.180
And what is this for these?

141
00:10:18.180 --> 00:10:25.260
You can think of as linting for these
special JSDoc comments and their meaning.

142
00:10:26.380 --> 00:10:33.260
So what I want to do here is add
something and it is ae-missing-release.

143
00:10:33.260 --> 00:10:34.700
Sorry, we need a comma here.

144
00:10:35.740 --> 00:10:39.514
ae-missing-release tag,

145
00:10:39.514 --> 00:10:43.830
colon, log level warning.

146
00:10:45.910 --> 00:10:49.590
There are a whole bunch of different
rules that you can enable here.

147
00:10:49.590 --> 00:10:53.459
There's a link in the course notes that
you can click to see the full set of

148
00:10:53.459 --> 00:10:55.110
things available.

149
00:10:55.110 --> 00:10:57.540
What this specific rule is going to do for

150
00:10:57.540 --> 00:11:00.190
us is it will print
a warning to the console.

151
00:11:00.190 --> 00:11:02.290
So this won't cause the command to fail,

152
00:11:02.290 --> 00:11:04.870
but it'll let us know if
we're exporting things.

153
00:11:04.870 --> 00:11:06.870
And we have not specified.

154
00:11:06.870 --> 00:11:11.670
Is this public, Is this beta, Is this,
is this alpha or is this internal?

155
00:11:11.670 --> 00:11:17.222
I like this because it's sort of, at least
in the warning level, it's nagging code

156
00:11:17.222 --> 00:11:23.110
authors, to be specific, like, don't make
me guess should this be exposed or not.

157
00:11:23.110 --> 00:11:25.270
You have four things you can choose from.

158
00:11:25.270 --> 00:11:27.590
Go ahead and specify one, right?

159
00:11:27.590 --> 00:11:34.837
And we're starting, except for
the one I just added here.

160
00:11:34.837 --> 00:11:35.666
There are none of these.

161
00:11:35.666 --> 00:11:39.390
I'm gonna leave this as a beta,
just for us to find later.

162
00:11:39.390 --> 00:11:40.830
So we're gonna get some warnings.

163
00:11:42.990 --> 00:11:48.329
Final thing we have to do is we
got to create an etc folder in our

164
00:11:48.329 --> 00:11:53.790
models package and it's going
to put a bunch of stuff in here.

165
00:11:55.630 --> 00:11:56.310
Here we go.

166
00:11:56.310 --> 00:12:00.702
It's time to run

167
00:12:00.702 --> 00:12:06.200
the API extractor.

168
00:12:06.200 --> 00:12:09.640
Run local verbose.

169
00:12:11.320 --> 00:12:14.040
We'll talk a little bit about
other options that aren't local.

170
00:12:15.480 --> 00:12:17.960
You all know what verbose is.

171
00:12:17.960 --> 00:12:22.040
Look, a bunch of warnings, aerelease tag.

172
00:12:22.040 --> 00:12:25.400
So we could go through each of these and
figure out.

173
00:12:25.400 --> 00:12:27.400
We'll just address a couple of them.

174
00:12:27.400 --> 00:12:29.310
This we're going to export.

175
00:12:29.310 --> 00:12:33.470
We need this, it's public.

176
00:12:33.470 --> 00:12:36.750
This, it's public.

177
00:12:38.990 --> 00:12:40.270
And we'll make this one.

178
00:12:40.270 --> 00:12:45.230
We're just gonna do some random stuff
here just to show the differences here.

179
00:12:45.230 --> 00:12:46.750
Interesting.

180
00:12:46.750 --> 00:12:48.750
So that's date, time, distance.

181
00:12:52.590 --> 00:12:57.266
Okay, distance is part
of the packages API,

182
00:12:57.266 --> 00:13:00.720
but it's missing a release tab.

183
00:13:00.720 --> 00:13:02.120
Okay, it led me to.

184
00:13:02.120 --> 00:13:08.600
I guess I added a new line with that
comment and I make this a beta.

185
00:13:12.440 --> 00:13:14.720
Okay, so this is a different rule.

186
00:13:14.720 --> 00:13:19.200
It's saying TS doc escape greater
than the greater than characters

187
00:13:19.200 --> 00:13:23.610
should be escaped using a backslash
to avoid confusion with HTML.

188
00:13:24.890 --> 00:13:25.850
Really?
Did I?

189
00:13:28.612 --> 00:13:34.329
Yep, so
this is because you can in some places

190
00:13:34.329 --> 00:13:39.450
in JS docs put an image tag or something.

191
00:13:41.610 --> 00:13:42.330
Great.

192
00:13:42.330 --> 00:13:44.490
I think we've done enough here.

193
00:13:49.620 --> 00:13:51.700
The rest are ae-missing-release tags.

194
00:13:53.460 --> 00:13:56.340
Another interesting thing that
I like to use in this library.

195
00:13:56.340 --> 00:13:57.540
I think it's a different role.

196
00:13:58.740 --> 00:14:04.330
This API extractor can help you make sure
that if you were to export a function,

197
00:14:04.330 --> 00:14:07.889
you're also exporting
the types that are used for

198
00:14:07.889 --> 00:14:11.700
that function's arguments and
return values.

199
00:14:11.700 --> 00:14:16.082
This is useful because I'm sure we've all
run into this situation where you want to

200
00:14:16.082 --> 00:14:20.465
create a variable to hold the parameters
of what you're eventually going to pass to

201
00:14:20.465 --> 00:14:25.050
the function, and you're left trying to
tease out from the function signature.

202
00:14:25.050 --> 00:14:25.610
What's this?

203
00:14:25.610 --> 00:14:27.530
First parameter type.

204
00:14:27.530 --> 00:14:32.290
It ends up being difficult to create
a type annotation that's like

205
00:14:32.290 --> 00:14:37.290
this is the exact type of what this
function expects to be passed.

206
00:14:37.290 --> 00:14:42.005
What API Extractor can do
is say you've exported

207
00:14:42.005 --> 00:14:46.835
a thing like a class or
function or whatever it is,

208
00:14:46.835 --> 00:14:51.400
and it has as part of its
signature some types.

209
00:14:51.400 --> 00:14:53.992
You should also export those
types directly as well,

210
00:14:53.992 --> 00:14:56.360
because they're part of
your beta API surface.

