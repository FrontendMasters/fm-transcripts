WEBVTT

1
00:00:00.320 --> 00:00:05.011
&gt;&gt; Mike North: In this next section, we're
going to take a close look at several

2
00:00:05.011 --> 00:00:09.120
tools that we can use to work
with our package manifests.

3
00:00:09.120 --> 00:00:12.800
Establish consistency across our monorepo.

4
00:00:12.800 --> 00:00:15.668
Detect varied use of dependencies,

5
00:00:15.668 --> 00:00:20.490
meaning you have six versions
of REACT across your monorepo.

6
00:00:20.490 --> 00:00:22.160
How do you deal with that?

7
00:00:22.160 --> 00:00:27.840
As well as trimming away unused
dependencies and exports.

8
00:00:29.140 --> 00:00:34.564
So a bunch of things that sort of relate
to working with your package manifests and

9
00:00:34.564 --> 00:00:36.897
your external dependency graph.

10
00:00:36.897 --> 00:00:42.019
And these are some really nice kind
of standalone projects that you

11
00:00:42.019 --> 00:00:47.060
could layer on top of pnpm or
an NPM workspace or a Yarn workspace.

12
00:00:48.340 --> 00:00:52.902
They all sort of work with any
monorepo that sort of aligns with

13
00:00:52.902 --> 00:00:54.490
those conventions.

14
00:00:56.560 --> 00:01:01.587
So first we're going to take
a look at many package and

15
00:01:01.587 --> 00:01:06.503
the main purpose we're going
to use many package for

16
00:01:06.503 --> 00:01:09.870
is linting our package manifests.

17
00:01:09.870 --> 00:01:13.755
So if you wanted to have a really
opinionated formatting of your

18
00:01:13.755 --> 00:01:18.320
package.json, like alphabetizing
your dependencies, for example.

19
00:01:20.000 --> 00:01:22.680
This is kind of like prettier for
package JSON,

20
00:01:22.680 --> 00:01:24.830
if you want to think about it that way.

21
00:01:24.830 --> 00:01:29.229
Not just for formatting JSON and
getting your quotes right and

22
00:01:29.229 --> 00:01:34.898
you're indenting, but more having
a standardized way of formatting things so

23
00:01:34.898 --> 00:01:39.394
that as people change, go in and
make changes to package JSON.

24
00:01:39.394 --> 00:01:43.510
You're keeping the increment
of change very small.

25
00:01:43.510 --> 00:01:48.588
Like nice readable diffs instead of seeing
that somebody moved six lines around or

26
00:01:48.588 --> 00:01:49.993
something like that.

27
00:01:49.993 --> 00:01:52.960
Let's begin by installing the Manypkg CLI.

28
00:01:52.960 --> 00:01:56.848
So we'll go back to our environment,
our dev environment, and

29
00:01:56.848 --> 00:01:58.720
we'll install this package.

30
00:01:58.720 --> 00:02:01.360
And I'm in the workspace
very important here.

31
00:02:01.360 --> 00:02:04.720
Like this is where you want
your workspace level tooling.

32
00:02:09.760 --> 00:02:12.280
So we've installed any package CLI.

33
00:02:12.280 --> 00:02:13.760
By the way, there's an NPM scope.

34
00:02:13.760 --> 00:02:17.436
I know you've been working with
packages like this before, but

35
00:02:17.436 --> 00:02:21.931
like this is an example of something that
has a programmatic interface for like

36
00:02:21.931 --> 00:02:26.424
consuming this as a library as well as
being able to use a CLI that they provide,

37
00:02:26.424 --> 00:02:31.094
the next step we're going to take is we're
going to run pnpm many package check.

38
00:02:31.094 --> 00:02:34.479
By the way, if you're still using NPM and

39
00:02:34.479 --> 00:02:38.470
you have to use like npm run or
npx like this.

40
00:02:38.470 --> 00:02:43.379
This is the thing I really enjoy about
pnpm, the fact that YARN does this as

41
00:02:43.379 --> 00:02:48.447
well, where if you have something
that's in your Node Modules bin folder,

42
00:02:48.447 --> 00:02:54.010
something here, you can just invoke it
directly menu package has a check command.

43
00:02:54.010 --> 00:02:57.327
Remember, this is different from the check
that we've been running that relates to

44
00:02:57.327 --> 00:02:58.410
svelte and type checking.

45
00:02:59.610 --> 00:03:02.892
Let's see what it finds.

46
00:03:02.892 --> 00:03:05.450
Workspace is valid, that's interesting.

47
00:03:08.260 --> 00:03:09.926
Am I in the right spot?

48
00:03:09.926 --> 00:03:14.820
[LAUGH] I thought I left
some problems here.

49
00:03:14.820 --> 00:03:19.566
Well, let's look at the documentation and
let's create a problem for

50
00:03:19.566 --> 00:03:24.549
ourselves and see if we can detect that
maybe I fixed some things on the fly or

51
00:03:24.549 --> 00:03:26.941
fixed some things as we were going.

52
00:03:26.941 --> 00:03:31.460
So Manypkg check runs checks
against your Monorepo.

53
00:03:33.220 --> 00:03:38.857
An example of this is having
peer dependencies that are not

54
00:03:38.857 --> 00:03:44.620
dev dependencies and
having their range specifiers meet.

55
00:03:44.620 --> 00:03:48.460
So we don't have any of those
root has production dependencies.

56
00:03:48.460 --> 00:03:50.220
We could certainly do that.

57
00:03:50.220 --> 00:03:53.082
So let's go to our package JSON here and

58
00:03:53.082 --> 00:03:57.257
let's say many package CLI
is a production dependency.

59
00:04:01.430 --> 00:04:02.550
&gt;&gt; Mike North: This will
tell us if it's working.

60
00:04:02.550 --> 00:04:03.510
Hey, great.

61
00:04:03.510 --> 00:04:05.910
The root package JSON
contains dependencies.

62
00:04:05.910 --> 00:04:11.190
This is disallowed dependencies versus
dev dependencies in a private package.

63
00:04:11.190 --> 00:04:14.310
They don't affect anything and
it creates confusion.

64
00:04:14.310 --> 00:04:15.750
This is important.

65
00:04:15.750 --> 00:04:21.350
It's not like, I want to be clear,
private package.

66
00:04:21.350 --> 00:04:25.510
In this case, it kind of means two things.

67
00:04:25.510 --> 00:04:31.300
One is literally this, which is,
is this published to NPM or not?

68
00:04:31.300 --> 00:04:36.100
But the other is,
is this a leaf level dependency or not?

69
00:04:36.100 --> 00:04:41.196
So, for example, in this package here,
like if we were,

70
00:04:41.196 --> 00:04:46.500
let's say, let's say we had
a step where we built things and

71
00:04:46.500 --> 00:04:50.868
then we want to slim down
the set of dependencies,

72
00:04:50.868 --> 00:04:53.988
we need to run the UI in production,

73
00:04:53.988 --> 00:04:59.307
it does matter that we have
some runtime dependencies here.

74
00:04:59.307 --> 00:05:04.680
So I would argue this is a little bit
of an imprecise way of describing this.

75
00:05:04.680 --> 00:05:06.160
It's not about private packages.

76
00:05:06.160 --> 00:05:10.760
It's about being a leaf level
dependency versus being

77
00:05:10.760 --> 00:05:13.960
a dependency that has dependencies.

78
00:05:15.240 --> 00:05:18.775
If we need express as a transitive
dependency, despite this

79
00:05:18.775 --> 00:05:22.862
being a private package, like if we
were to move this up all of these and

80
00:05:22.862 --> 00:05:27.640
say these are all just needed for dev,
that's going to be a problem, right?

81
00:05:27.640 --> 00:05:31.000
Because remember, there are build
commands with each of these.

82
00:05:32.360 --> 00:05:36.797
Each of your build tools,
they have a mode where you could say,

83
00:05:36.797 --> 00:05:39.400
only install my prod dependencies.

84
00:05:39.400 --> 00:05:40.280
Sorry, not build tools.

85
00:05:40.280 --> 00:05:44.600
Your package managers have
only installed prod stuff.

86
00:05:45.890 --> 00:05:48.610
That's an example of
something that it can detect.

87
00:05:48.610 --> 00:05:50.450
If you were to say fix.

88
00:05:52.130 --> 00:05:54.690
I think it's not fix, it's fix.

89
00:05:56.130 --> 00:05:58.850
You can see that it went through and
it actually did this.

90
00:05:58.850 --> 00:06:02.530
Rename for
us the kinds of things that it can detect.

91
00:06:04.290 --> 00:06:06.290
They have a bunch of different rules here.

92
00:06:06.290 --> 00:06:08.052
Invalid package names.

93
00:06:08.052 --> 00:06:13.060
This is about you've gotten too cute
with your Monorepo package name.

94
00:06:13.060 --> 00:06:17.690
You've put an emoji in there like
a double width UTF16 character.

95
00:06:17.690 --> 00:06:23.140
And it's just not gonna,
NPM will be unhappy with that.

96
00:06:24.944 --> 00:06:26.180
This is the one.

97
00:06:26.180 --> 00:06:30.340
This is the one that I was trying
to run us into and I forgot a step.

98
00:06:30.340 --> 00:06:32.116
So let's do this.

99
00:06:32.116 --> 00:06:35.060
I'm gonna have my Monorepo's v2 URL here.

100
00:06:36.340 --> 00:06:43.905
I want to go back to my code, and
I'm going to say in my root package JSON,

101
00:06:43.905 --> 00:06:48.508
I'm going to have repository and then URL.

102
00:06:48.508 --> 00:06:50.900
And now let's run this.

103
00:06:53.220 --> 00:06:59.855
Wait, is it just this?

104
00:06:59.855 --> 00:07:01.220
Yep, there it goes.

105
00:07:01.220 --> 00:07:07.250
So this is a nice thing that many
package is going to detect for us.

106
00:07:07.250 --> 00:07:13.862
Like in an ideal world you could say
I have one git repo for my monorepo.

107
00:07:13.862 --> 00:07:20.400
But ultimately when you publish to NPM,

108
00:07:20.400 --> 00:07:24.819
if we go to npm.js, oops,

109
00:07:24.819 --> 00:07:31.356
beach balling, and let's go to Babel,

110
00:07:31.356 --> 00:07:35.797
Babel preset TypeScript.

111
00:07:35.797 --> 00:07:40.369
You kinda wanna have a homepage or
something that, well,

112
00:07:40.369 --> 00:07:42.620
maybe this is a bad example.

113
00:07:43.820 --> 00:07:44.940
Here's the point.

114
00:07:44.940 --> 00:07:50.060
There's a repository URL on each package
you publish and one option for doing this.

115
00:07:50.060 --> 00:07:55.048
And I can switch to a branch that I
have here where I've got all of the work

116
00:07:55.048 --> 00:08:00.360
that we've already done today or
that we will get through today.

117
00:08:00.360 --> 00:08:05.798
If I go to packages and then UI,
you could have your own readme for

118
00:08:05.798 --> 00:08:10.532
each package and
what you'd want to do is say all right,

119
00:08:10.532 --> 00:08:15.800
well I have a repo for
the whole monorepo and I have a URL there.

120
00:08:17.080 --> 00:08:21.182
Now, what many package is
trying to get us to do is

121
00:08:21.182 --> 00:08:24.783
say there's a UI path
here that we can go and

122
00:08:24.783 --> 00:08:30.409
add in each package's package JSON,
not just for the whole repo.

123
00:08:30.409 --> 00:08:34.926
So if we go up here, repository and
paste this in and grab that and

124
00:08:34.926 --> 00:08:40.129
we're just gonna change the name,
that last little token in the string.

125
00:08:40.129 --> 00:08:41.780
So we'll add this to server as well.

126
00:08:43.060 --> 00:08:47.710
I know I'm going a little fast here,

127
00:08:47.710 --> 00:08:51.310
but server and then models.

128
00:08:59.870 --> 00:09:02.030
Oops, I think I copied the whole line.

129
00:09:05.150 --> 00:09:05.650
Great.

130
00:09:06.910 --> 00:09:10.947
Now if we run this check again,

131
00:09:10.947 --> 00:09:16.080
it's going to say it has a repository.

132
00:09:16.080 --> 00:09:19.255
It has a repository field
of this when it should be.

133
00:09:23.119 --> 00:09:24.620
&gt;&gt; Speaker 2: You have
the branch name in the,

134
00:09:24.620 --> 00:09:28.360
you tree/subs instead of-
&gt;&gt; Mike North: Yes.

135
00:09:28.360 --> 00:09:32.378
This is even more sophisticated
than I hoped, right?

136
00:09:32.378 --> 00:09:33.322
You wanna have,

137
00:09:33.322 --> 00:09:37.040
this is steering me towards a mistake
that I could have made here.

138
00:09:37.040 --> 00:09:40.332
So it's pretty sophisticated and

139
00:09:40.332 --> 00:09:46.008
it's a small number of checks
that many package enforces,

140
00:09:46.008 --> 00:09:49.390
but generally a good thing to use.

141
00:09:49.390 --> 00:09:57.943
Now there are other things that this does
which is it allows you to run scripts for

142
00:09:57.943 --> 00:10:01.910
all packages within your monorepo.

143
00:10:01.910 --> 00:10:05.630
But bluntly I would use pnpm for this.

144
00:10:05.630 --> 00:10:10.593
In future steps, we'll use Lerna
because this is not going to

145
00:10:10.593 --> 00:10:14.360
be as aware of the dependency graph.

146
00:10:14.360 --> 00:10:17.741
You'll see that a lot of
monorepo tools have this feature

147
00:10:17.741 --> 00:10:21.050
where you're going to install
a bunch of these tools and

148
00:10:21.050 --> 00:10:25.080
you'll have 12 different ways you
can run a task in each package.

149
00:10:25.080 --> 00:10:29.222
But what you want to lean towards is the
ones that let you do interesting things

150
00:10:29.222 --> 00:10:31.880
we're going to see later in the course.

151
00:10:31.880 --> 00:10:36.695
Like Lerna, an NX is where that
gets really sophisticated and

152
00:10:36.695 --> 00:10:38.650
what you should lean on.

153
00:10:38.650 --> 00:10:43.605
But this still has a unique feature of
lending those package JSONs and giving

154
00:10:43.605 --> 00:10:48.570
you a very some helpful feedback where
you can even see the stuff I'm doing.

155
00:10:48.570 --> 00:10:52.150
It's busting me on because I'm pasting
in strings that are not quite right.

