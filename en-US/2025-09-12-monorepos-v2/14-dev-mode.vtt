WEBVTT

1
00:00:00.720 --> 00:00:05.280
&gt;&gt; Mike North: In this next section, we're
going to get our dev script working again.

2
00:00:05.280 --> 00:00:09.507
If you remember, at the beginning of
the course we had this nice project

3
00:00:09.507 --> 00:00:13.040
level script when package and
project were the same thing.

4
00:00:13.040 --> 00:00:17.450
At the beginning of the course
we could run PNPM dev and

5
00:00:17.450 --> 00:00:22.546
our back end would start up,
our front end would start up, and

6
00:00:22.546 --> 00:00:29.400
importantly, any code that we touched
would trigger a rebuild of some sort.

7
00:00:29.400 --> 00:00:33.431
So we could just keep the app running,
both the front end and the back end, and

8
00:00:33.431 --> 00:00:37.880
then go and edit our code and we could
see the changes that we made take effect.

9
00:00:37.880 --> 00:00:41.756
This is part of what's awesome
about being a web developer,

10
00:00:41.756 --> 00:00:44.360
either on the front or the back end.

11
00:00:44.360 --> 00:00:50.535
Often you get that fairly immediate
feedback loop that you don't quite get if

12
00:00:50.535 --> 00:00:56.600
you have big meaty compile step
that can't be done incrementally.

13
00:00:56.600 --> 00:00:57.640
Let's get started.

14
00:00:57.640 --> 00:01:02.510
The first thing we're going
to need to do is go to our

15
00:01:02.510 --> 00:01:06.600
UIS package JSON and this needs some work.

16
00:01:08.119 --> 00:01:13.489
Really what we have to think about
here is in the context of our ui,

17
00:01:13.489 --> 00:01:15.160
what does dev mean?

18
00:01:16.200 --> 00:01:19.912
Because this is a UI scoped
package JSON at this point,

19
00:01:19.912 --> 00:01:23.070
I would argue this is the real dev for
the ui.

20
00:01:23.070 --> 00:01:27.103
Just spinning up Vite's
dev server mode and

21
00:01:27.103 --> 00:01:32.990
we're gonna grab this as the starting
point for the dev script.

22
00:01:32.990 --> 00:01:37.159
We will hoist up to
the top of the workspace,

23
00:01:37.159 --> 00:01:40.766
open up our workspace package JSON and

24
00:01:40.766 --> 00:01:46.430
we're gonna paste it and
it needs some alteration here.

25
00:01:46.430 --> 00:01:48.330
We can get rid of this thing here.

26
00:01:48.330 --> 00:01:51.530
Actually, let's call this dev Dev one for
now.

27
00:01:51.530 --> 00:01:56.730
I want to show you why this is
not going to work if we run this.

28
00:01:58.490 --> 00:02:03.661
Because remember, PNVM can run a command
in each package in the repo and

29
00:02:03.661 --> 00:02:06.170
it can produce colorized output.

30
00:02:07.370 --> 00:02:08.810
But here's what we get.

31
00:02:10.010 --> 00:02:12.410
Packages, models.

32
00:02:12.410 --> 00:02:16.810
It's running the DEV script and
PNPM showing this.

33
00:02:16.810 --> 00:02:20.490
But PNPM run.

34
00:02:23.290 --> 00:02:26.010
It's good for tasks that exit.

35
00:02:26.010 --> 00:02:31.690
Right now what we're running into
is there are dependencies here.

36
00:02:31.690 --> 00:02:36.147
As far as pnpm is concerned,
dev is some arbitrary thing and

37
00:02:36.147 --> 00:02:41.140
it knows that models is the first
thing it should try this on because

38
00:02:41.140 --> 00:02:46.160
it's the lowest level thing in
the dependency graph right there.

39
00:02:46.160 --> 00:02:47.720
It has to happen first.

40
00:02:47.720 --> 00:02:48.760
And so we're kind of stuck here.

41
00:02:48.760 --> 00:02:53.686
And if I control C this, you're going
to see some evidence that, okay, great,

42
00:02:53.686 --> 00:02:56.599
now it tries the server and
now it tries the ui.

43
00:02:56.599 --> 00:03:01.333
So what you're seeing is, well, finally,

44
00:03:01.333 --> 00:03:04.280
I exited this with a Control C.

45
00:03:04.280 --> 00:03:10.863
And now it's starting up the other things,
so it's falling short here.

46
00:03:10.863 --> 00:03:13.850
This is why I don't use dev for this.

47
00:03:15.210 --> 00:03:16.050
I like to use.

48
00:03:16.050 --> 00:03:20.348
This is a really nicely scoped npm
package, good at one thing and

49
00:03:20.348 --> 00:03:26.810
that's just running multiple commands
concurrently, and it's called concurrently.

50
00:03:26.810 --> 00:03:28.890
So we're going to modify this first.

51
00:03:28.890 --> 00:03:29.610
We're going to have.

52
00:03:29.610 --> 00:03:31.690
You've got this first set of things.

53
00:03:31.690 --> 00:03:36.300
These are names of different tasks
that will be printed to the console.

54
00:03:36.300 --> 00:03:37.540
It's a prefix.

55
00:03:37.540 --> 00:03:41.460
So we could say server models, client.

56
00:03:42.580 --> 00:03:47.140
These are colors that
are used to color code.

57
00:03:47.140 --> 00:03:49.939
This is coming from the server,
this is coming from the client.

58
00:03:49.939 --> 00:03:54.541
Remember, this is going to be
interleaved output from many different

59
00:03:54.541 --> 00:03:56.340
things that are running.

60
00:03:56.340 --> 00:03:58.041
So this is to stay sane and

61
00:03:58.041 --> 00:04:02.590
to know which output is coming
from which of these tasks.

62
00:04:02.590 --> 00:04:04.910
Color coding is pretty nice.

63
00:04:04.910 --> 00:04:10.670
And then we have individual tasks that
will run the server and the client.

64
00:04:10.670 --> 00:04:14.990
But we want to do it differently.

65
00:04:14.990 --> 00:04:18.657
These are still leftover from the
beginning of the course where we had dev

66
00:04:18.657 --> 00:04:20.350
server and Dev client.

67
00:04:20.350 --> 00:04:21.630
But we can do this differently.

68
00:04:21.630 --> 00:04:30.120
We're going to say PNPM filter.

69
00:04:30.120 --> 00:04:38.520
This is a way to say this
should run on one package.

70
00:04:42.280 --> 00:04:44.040
Important to get them in the right order.

71
00:04:44.040 --> 00:04:45.080
Ordering matters.

72
00:04:45.080 --> 00:04:47.080
Notice we've got three things.

73
00:04:47.080 --> 00:04:48.280
Three things.

74
00:04:48.280 --> 00:04:49.960
And now we need three things.

75
00:04:49.960 --> 00:04:52.840
So we want server models, client.

76
00:04:52.840 --> 00:05:00.840
So here we are going to have
server models and client.

77
00:05:08.760 --> 00:05:10.440
This is definitely the point.

78
00:05:10.440 --> 00:05:12.280
How many columns wide
are we at this point?

79
00:05:14.520 --> 00:05:17.200
We're already at the point where
I'd say write a shell script.

80
00:05:17.200 --> 00:05:21.240
We're gonna do that in a sec because,
good God, but let's see this work.

81
00:05:24.878 --> 00:05:26.030
What's happening here?

82
00:05:26.030 --> 00:05:28.190
Concurrently command not found.

83
00:05:28.190 --> 00:05:29.390
We got to install it.

84
00:05:36.990 --> 00:05:37.950
Let's try it again.

85
00:05:40.030 --> 00:05:40.670
Nice.

86
00:05:40.670 --> 00:05:44.030
Okay, I'm noticing some things.

87
00:05:44.030 --> 00:05:47.460
Well, first,
models doesn't have a color code.

88
00:05:47.460 --> 00:05:50.980
Pink might not be the right.

89
00:05:50.980 --> 00:05:52.100
Might not be available.

90
00:05:52.100 --> 00:05:52.820
There we go.

91
00:05:52.820 --> 00:05:54.740
We've got servers, model and client.

92
00:05:54.740 --> 00:05:57.965
So you see how important it is to
have that nice little prefix so

93
00:05:57.965 --> 00:06:00.180
you can easily see what's happening.

94
00:06:00.180 --> 00:06:01.940
But look, here's our backend.

95
00:06:05.700 --> 00:06:07.060
Interesting.

96
00:06:07.060 --> 00:06:11.220
No projects match the filters in that.

97
00:06:11.220 --> 00:06:14.090
Did we call it client instead of ui?

98
00:06:14.090 --> 00:06:19.370
Of course I did, because I was saying
the word client while I was typing.

99
00:06:19.370 --> 00:06:20.010
There we go.

100
00:06:20.010 --> 00:06:22.170
There's vite actually starting up.

101
00:06:22.170 --> 00:06:27.028
So in the end, oops, interesting,

102
00:06:27.028 --> 00:06:30.730
we'll figure that out.

103
00:06:30.730 --> 00:06:33.850
But clearly the client's running.

104
00:06:37.850 --> 00:06:39.450
Clearly the API is running.

105
00:06:41.530 --> 00:06:44.442
Let me see if that's
a super easy thing to fix.

106
00:06:44.442 --> 00:06:48.090
Well, raise condition or something.

107
00:06:48.090 --> 00:06:52.822
Maybe that error popped up because
the client started first before the server

108
00:06:52.822 --> 00:06:54.730
was up or something like that.

109
00:06:54.730 --> 00:06:57.450
Anyway, here we are.

110
00:06:57.450 --> 00:07:01.450
Here's real data coming through from
that data file that's being read.

111
00:07:01.450 --> 00:07:02.970
All coming from the JSON.

112
00:07:02.970 --> 00:07:04.330
So now we're back to.

113
00:07:05.850 --> 00:07:07.570
Here's your server logs coming in.

114
00:07:07.570 --> 00:07:13.120
If I go back to a svelte component
like the seed packet, interesting.

115
00:07:14.720 --> 00:07:16.846
So first on the website, and

116
00:07:16.846 --> 00:07:22.560
I'm just showing you that you could
do it either way, you can always.

117
00:07:22.560 --> 00:07:25.809
Whenever you're expressing
filters like this,

118
00:07:25.809 --> 00:07:29.520
you can refer to sort of
the unambiguous package name, or

119
00:07:29.520 --> 00:07:33.560
you can refer to it by the folder
name in that packages folder.

120
00:07:33.560 --> 00:07:35.040
So this should work similarly well.

121
00:07:36.410 --> 00:07:38.010
Yep, there it goes.

122
00:07:38.010 --> 00:07:42.330
Yeah, to me, this looks like it's.

123
00:07:42.330 --> 00:07:45.530
At least from this standpoint,
it's working fine.

124
00:07:45.530 --> 00:07:46.650
What's happening here?

125
00:07:47.770 --> 00:07:53.552
Did I delete something that was
important from package JSON?

126
00:07:53.552 --> 00:07:56.250
Is svelte, svelte's in here.

127
00:08:00.330 --> 00:08:01.770
Restart language server.

128
00:08:07.350 --> 00:08:10.230
That was it,
some stale language server state.

129
00:08:10.230 --> 00:08:14.895
So sorry, the thing I was trying to prove
here was if we go back and we find,

130
00:08:14.895 --> 00:08:19.430
I don't know, some interesting text
that's a lot of gradient stuff.

131
00:08:23.510 --> 00:08:24.550
That's an icon.

132
00:08:25.692 --> 00:08:28.950
Look, there's some text being shown here.

133
00:08:31.530 --> 00:08:32.570
I hit save.

134
00:08:32.570 --> 00:08:33.210
There we go.

135
00:08:33.210 --> 00:08:35.410
I've ruined every seed
packet with some text.

136
00:08:35.410 --> 00:08:37.970
Everything's like, so
this is happening immediately.

137
00:08:37.970 --> 00:08:40.490
We know that the dev server
is working there on the ui.

138
00:08:40.490 --> 00:08:49.290
We know it's working on the server because
I could go here and change the startup.

139
00:08:49.290 --> 00:08:50.930
Sorry, that's an index ts.

140
00:08:50.930 --> 00:08:53.450
You don't have to follow
along with me here.

141
00:08:53.450 --> 00:08:56.490
Let's delete the word port because
we're showing a full domain here.

142
00:08:57.610 --> 00:09:00.890
So going to scroll to the bottom so
we can all see it.

143
00:09:00.890 --> 00:09:02.330
Save.

144
00:09:02.330 --> 00:09:06.970
Look, we just bumped the server, so
changes happen instantaneously there.

145
00:09:06.970 --> 00:09:10.490
The tricky bit is of course, models.

146
00:09:10.490 --> 00:09:15.861
And if we went here and
said version and hit save,

147
00:09:15.861 --> 00:09:23.330
you can see there's a file change
detection incremental compile.

148
00:09:23.330 --> 00:09:29.620
That means that in the dist folder,
we're getting a nice new build.

149
00:09:29.620 --> 00:09:32.620
Now we're back to this great
productive dev script.

150
00:09:32.620 --> 00:09:34.100
I can touch any file.

151
00:09:34.100 --> 00:09:36.180
Those changes take effect immediately.

152
00:09:36.180 --> 00:09:40.660
I have a working client server set up,
despite it all being in a monorepo.

153
00:09:40.660 --> 00:09:44.499
Now, the only downside here,
I'll be blunt, and

154
00:09:44.499 --> 00:09:49.676
you can script your way out of this is
this is a place where you do have to

155
00:09:49.676 --> 00:09:55.620
keep up to date with all of the different
packages that are in your repo.

156
00:09:55.620 --> 00:09:58.580
But there are ways to get
around this with other tools.

157
00:09:58.580 --> 00:10:02.671
If you really wanted to
use concurrently for this,

158
00:10:02.671 --> 00:10:08.191
what I would do is I would just make
a script that lists the packages and

159
00:10:08.191 --> 00:10:14.180
then builds the concurrently shell script,
which I told you I would do.

160
00:10:14.180 --> 00:10:19.079
Now I'm going to do it because I
think it's a little crazy to have

161
00:10:19.079 --> 00:10:23.000
something that that
complicated in an NPM script.

162
00:10:23.000 --> 00:10:27.235
So I'm going to in the root of my project,

163
00:10:27.235 --> 00:10:32.440
make a scripts folder,
make a shell script there.

164
00:10:36.360 --> 00:10:42.280
Did I get that wrong other way?

165
00:10:45.880 --> 00:10:50.237
And get these lined up real nice just so

166
00:10:50.237 --> 00:10:53.510
we can see what's going on.

167
00:11:02.230 --> 00:11:05.110
And I think we can get rid of
these escaping things too.

168
00:11:13.280 --> 00:11:15.760
Continue, continue, continue.

169
00:11:15.760 --> 00:11:22.913
So again, just like three commands
running at the same time, color-coded.

170
00:11:22.913 --> 00:11:27.991
Chmod, if you're still
learning your UNIX commands,

171
00:11:27.991 --> 00:11:32.320
we're just making this
an executable script.

172
00:11:35.840 --> 00:11:40.256
One more thing we have to say PNPM DLX,

173
00:11:40.256 --> 00:11:47.440
which if you're an NPM user,
this is PNPM's version of NPX.

174
00:11:49.920 --> 00:11:55.797
Download Execute DLX and there we go,

175
00:11:55.797 --> 00:12:02.640
that first little blurb you saw here.

176
00:12:02.640 --> 00:12:05.760
This is the downloading on the fly,
even if you didn't have concurrently.

177
00:12:07.370 --> 00:12:12.010
Now we can also just do pnpm dev and
it calls the script.

178
00:12:15.610 --> 00:12:16.844
So now we have a working dev script.

