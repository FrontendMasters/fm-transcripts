WEBVTT

1
00:00:00.000 --> 00:00:02.851
&gt;&gt; ThePrimeagen: We're going to kinda
do like a little quick little roundup

2
00:00:02.851 --> 00:00:05.760
of a couple cool Unix tools that
you should just know about,

3
00:00:05.760 --> 00:00:09.136
because knowing about Unix tools is very,
very, very fantastic and

4
00:00:09.136 --> 00:00:11.433
will just save your life
a whole bunch of time.

5
00:00:11.433 --> 00:00:15.422
Remember that same file that we had,
I'm gonna transform it so

6
00:00:15.422 --> 00:00:19.654
that you can do this, foo foo,
bar bar, and still all be the same.

7
00:00:19.654 --> 00:00:22.168
But we just wanna do a basic
transformation on top of it.

8
00:00:22.168 --> 00:00:23.778
And so this is using something called Zed.

9
00:00:23.778 --> 00:00:28.457
If you're not familiar with Zed,
you could always open up Vim and

10
00:00:28.457 --> 00:00:34.007
effectively create the Mac, create
the regex in Vim, and then use it in Zed.

11
00:00:34.007 --> 00:00:36.982
And the reason why is that if
you have your kind of Vim,

12
00:00:36.982 --> 00:00:40.043
even basically configured,
you can have, you know.

13
00:00:40.043 --> 00:00:43.691
You see how that thing is
highlighting as I'm doing the search?

14
00:00:43.691 --> 00:00:46.713
It makes it a little bit easier when
you're trying to handcraft a bit

15
00:00:46.713 --> 00:00:50.317
of a macro, or, I mean, a bit of a search
and replace, because it's not gonna be

16
00:00:50.317 --> 00:00:54.154
nearly as confusing, because you're like,
this is where I messed up, right?

17
00:00:54.154 --> 00:00:58.136
Because, once you start getting into the
slash d part, and then you're trying to

18
00:00:58.136 --> 00:01:01.616
put in all these things, and I'm like,
is it like a slash plus, is it?

19
00:01:01.616 --> 00:01:05.345
You start going into that, then all of
a sudden becomes really confusing, and

20
00:01:05.345 --> 00:01:07.390
you start getting everything incorrect.

21
00:01:07.390 --> 00:01:10.400
You don't wanna have that right,
because then it's just awful.

22
00:01:10.400 --> 00:01:14.461
So what I can do right here
is I can do the following,

23
00:01:14.461 --> 00:01:17.681
I'm gonna do a little find and replace.

24
00:01:17.681 --> 00:01:21.906
And I wanna find foo effectively and
replace multiple times.

25
00:01:21.906 --> 00:01:22.913
So I can do something like this.

26
00:01:22.913 --> 00:01:23.977
I can go colon and

27
00:01:23.977 --> 00:01:28.009
then I can do what I like to refer
to as a fighting one eyed Kirby.

28
00:01:28.009 --> 00:01:31.938
And so a fighting one eyed
Kirby is you escape the opening

29
00:01:31.938 --> 00:01:35.878
parenthesis dot star escape
the closing parenthesis.

30
00:01:35.878 --> 00:01:38.136
So it kinda looks like a fighting
one eyed Kirby, right?

31
00:01:38.136 --> 00:01:39.926
There's only one eye on this poor guy.

32
00:01:39.926 --> 00:01:43.059
And so, that will create what
is known as a capture group.

33
00:01:43.059 --> 00:01:46.237
These are very important in your regex for
ad hoc kind of regex stuff.

34
00:01:46.237 --> 00:01:49.294
By the way, I highly recommend you
don't use regex in production software.

35
00:01:49.294 --> 00:01:52.654
Highly recommend using them on
the command line and ad hoc query, foo,

36
00:01:52.654 --> 00:01:56.580
it's always good to have it in your belt,
not good to have it in production, okay?

37
00:01:56.580 --> 00:01:58.507
Unless if your belt is production,
then that's crazy.

38
00:01:58.507 --> 00:01:59.238
You're Batman.

39
00:01:59.238 --> 00:02:00.497
Okay, you're not Batman.

40
00:02:00.497 --> 00:02:01.262
Not Batman.

41
00:02:01.262 --> 00:02:04.102
All right, so now that I have that,
I can match that group and

42
00:02:04.102 --> 00:02:05.621
I can repeat it with a slash one.

43
00:02:05.621 --> 00:02:09.198
So notice that says foo,
whatever I captured, it repeated.

44
00:02:09.198 --> 00:02:11.121
I can reference it and put it back in.

45
00:02:11.121 --> 00:02:15.151
So this is just such a fun skill to have
because I can't tell you how many little

46
00:02:15.151 --> 00:02:18.376
things that I found throughout
my life where it's just like,

47
00:02:18.376 --> 00:02:20.874
I need to grab certain parts and
just move them.

48
00:02:20.874 --> 00:02:25.112
And it's a hugely manual operation,
or it can become just fine and

49
00:02:25.112 --> 00:02:27.092
replacing very, very great.

50
00:02:27.092 --> 00:02:31.118
And so we theoretically could create
this exact same thing and go, slash one,

51
00:02:31.118 --> 00:02:33.193
slash one, and then end it right there.

52
00:02:33.193 --> 00:02:34.035
And so there we go.

53
00:02:34.035 --> 00:02:36.267
We've now created kind of
that exact same thing.

54
00:02:36.267 --> 00:02:38.959
So if I take this and
I'm gonna highlight this and

55
00:02:38.959 --> 00:02:43.040
I'm gonna yoink this whole thing
that I've created right here, right?

56
00:02:43.040 --> 00:02:47.049
And I go cat out, right?

57
00:02:47.049 --> 00:02:47.606
Cat out.

58
00:02:47.606 --> 00:02:52.199
You could go to sed, and I could
actually take this exact same thing, and

59
00:02:52.199 --> 00:02:54.698
you'll notice it does the same thing.

60
00:02:54.698 --> 00:02:57.798
So often whenever I'm working for
a really good sed query,

61
00:02:57.798 --> 00:03:00.284
I'll use Vim to kind of
help myself through it.

62
00:03:00.284 --> 00:03:03.939
But sed allows you to do this in line,
in a pipe throughout it.

63
00:03:03.939 --> 00:03:07.380
Again, I know you can also just
pass in the file to sed itself.

64
00:03:07.380 --> 00:03:09.380
You can replace in a file with sed.

65
00:03:09.380 --> 00:03:12.924
I think at one point people used
to program using things as arcane,

66
00:03:12.924 --> 00:03:16.038
as sed, and add, and grep,
and all these kind of things.

67
00:03:16.038 --> 00:03:17.218
I never lived in that world.

68
00:03:17.218 --> 00:03:18.573
That just sounds nuts,

69
00:03:18.573 --> 00:03:22.993
though it does sound a little fun to spend
one week trying to become good at Ed?

70
00:03:22.993 --> 00:03:28.643
Can you become good at the standard editor
and just like, that'd be just so much fun.

71
00:03:28.643 --> 00:03:29.741
Maybe it wouldn't be fun at all.

72
00:03:29.741 --> 00:03:32.048
But in my head,
romantically, it sounds fun.

73
00:03:32.048 --> 00:03:35.373
So it's good to just have a little bit of
sed in you because you never know where

74
00:03:35.373 --> 00:03:38.856
you're gonna need to replace one thing
with something else or you're gonna need

75
00:03:38.856 --> 00:03:42.100
to do some sort of transformative
operation on a stream of input coming in.

76
00:03:42.100 --> 00:03:44.947
It's just a really good thing
to have available to you.

77
00:03:44.947 --> 00:03:46.385
So I just wanna make
sure you know about that.

78
00:03:46.385 --> 00:03:50.895
We've used find a lot in this, but
I've never really talked much about it.

79
00:03:50.895 --> 00:03:52.169
Find is really, really great.

80
00:03:52.169 --> 00:03:55.450
And when you have to do
something over a lot of stuff,

81
00:03:55.450 --> 00:03:58.143
it's really good to know about this exec.

82
00:03:58.143 --> 00:04:02.303
It'll just save you seconds upon seconds
of execution when you have to do this

83
00:04:02.303 --> 00:04:02.817
a bunch.

84
00:04:02.817 --> 00:04:07.051
Instead of piping the results of find into
something else, you can use exec, and

85
00:04:07.051 --> 00:04:08.865
it'll just save you a lot of time.

86
00:04:08.865 --> 00:04:10.406
So it's very, very fantastic.

87
00:04:10.406 --> 00:04:11.832
You don't even need to know how to use it.

88
00:04:11.832 --> 00:04:13.287
You just need to know that it exists.

89
00:04:13.287 --> 00:04:16.513
So at someday in the future when
you do this, just use that and

90
00:04:16.513 --> 00:04:18.555
your life will be much, much better.

91
00:04:18.555 --> 00:04:19.544
All right, fantastic.

92
00:04:19.544 --> 00:04:20.221
Okay, xargs.

93
00:04:20.221 --> 00:04:22.686
This is where things get really exciting,
okay?

94
00:04:22.686 --> 00:04:24.168
Xargs, all right.

95
00:04:24.168 --> 00:04:27.615
If you're not familiar with xargs,
what xargs allows you to do is,

96
00:04:27.615 --> 00:04:31.847
say you have some input coming in, and you
want to do something with that input, but

97
00:04:31.847 --> 00:04:34.166
you want to do something over and
over again.

98
00:04:34.166 --> 00:04:36.686
Have you ever tried to
remove stuff you're finding?

99
00:04:36.686 --> 00:04:38.738
You have a list of files you wanna remove.

100
00:04:38.738 --> 00:04:41.850
Say you had a file that contained
10 files that you wanted to remove.

101
00:04:41.850 --> 00:04:42.955
How would you do that?

102
00:04:42.955 --> 00:04:46.861
Well, it'd be a little bit more
complicated if you didn't have xargs,

103
00:04:46.861 --> 00:04:50.383
cuz xargs allows you to take something,
and then capture it, and

104
00:04:50.383 --> 00:04:51.873
then do something with it.

105
00:04:51.873 --> 00:04:55.854
So I could theoretically go curl.com.

106
00:04:55.854 --> 00:04:59.043
So notice that I curled 123.com.

107
00:04:59.043 --> 00:05:03.274
So it allows you to take input and
then pipe it into something else.

108
00:05:03.274 --> 00:05:07.232
So if you wanted to remove those files,
you could actually have RM, capture it,

109
00:05:07.232 --> 00:05:09.342
and it would actually remove those files.

110
00:05:09.342 --> 00:05:12.627
So it's like one of those nice
things if you ever find yourself in.

111
00:05:12.627 --> 00:05:17.085
Somehow I find myself needing to remove
a group of things regularly, say,

112
00:05:17.085 --> 00:05:18.589
here's a good example.

113
00:05:18.589 --> 00:05:23.139
Have you ever accidentally not have
your TS config correctly specified.

114
00:05:23.139 --> 00:05:24.098
Somehow hit TSC, and

115
00:05:24.098 --> 00:05:27.787
then now your project's filled with a
bunch of JavaScript and TypeScript files.

116
00:05:27.787 --> 00:05:29.850
Well, you can literally find source and

117
00:05:29.850 --> 00:05:33.378
then you could actually technically
do delete if you wanted to do it.

118
00:05:33.378 --> 00:05:36.100
It actually worked that way, but I'm just
trying to give you an example here, okay?

119
00:05:36.100 --> 00:05:37.131
We're not gonna do that.

120
00:05:37.131 --> 00:05:42.175
You could technically find source,
list everything out that matches some sort

121
00:05:42.175 --> 00:05:47.081
of pattern, and then you could xargs and
say, delete on those ones, right?

122
00:05:47.081 --> 00:05:50.612
You could delete on top of everything that
you find that say is a JavaScript file.

123
00:05:50.612 --> 00:05:53.638
So you can kinda do some things to
kinda compose yourself in this way.

124
00:05:53.638 --> 00:05:55.228
Xargs is super, super useful.

125
00:05:55.228 --> 00:05:57.501
But there's also one thing
that's kinda sucky about xargs.

126
00:05:57.501 --> 00:06:01.892
Notice that, as I did that it just
executes it one at a time, bap, bap, bap,

127
00:06:01.892 --> 00:06:03.053
bap, bap, right?

128
00:06:03.053 --> 00:06:07.461
So if I add in 4 or new line 4,
new line 5, new line 6, new line 7,

129
00:06:07.461 --> 00:06:11.511
it's just da, da, da, da, da,
every single time, right?

130
00:06:11.511 --> 00:06:13.553
Maybe that's not what you want to do.

131
00:06:13.553 --> 00:06:17.647
Maybe you want something
a little bit more robust, right?

132
00:06:17.647 --> 00:06:21.240
Yeah, am I the only one
that says robust that way.

133
00:06:21.240 --> 00:06:23.564
Okay, so we're gonna move on
to something called parallel.

134
00:06:23.564 --> 00:06:25.337
Parallel is a fantastic tool.

135
00:06:25.337 --> 00:06:27.219
If you don't have it you should get it.

136
00:06:27.219 --> 00:06:29.163
It can make your life again really easy.

137
00:06:29.163 --> 00:06:30.745
If you ever have input that's coming in.

138
00:06:30.745 --> 00:06:34.286
If you're doing anything with logs
that you need to go somewhere else and

139
00:06:34.286 --> 00:06:37.130
check something, but
you don't wanna do it all at once and

140
00:06:37.130 --> 00:06:40.696
actually make like 9,000 connections
to a database or something.

141
00:06:40.696 --> 00:06:43.594
You wanna do say 3 at a time,
5 at a time, 8 at a time, 10 at a time.

142
00:06:43.594 --> 00:06:45.733
You can do this all with parallel and

143
00:06:45.733 --> 00:06:50.166
turn a very pain in the ass program to
write into a simple program to write.

144
00:06:50.166 --> 00:06:53.808
Not only that, say you have some sort of
tool you developed that takes a line of

145
00:06:53.808 --> 00:06:57.474
input, does something that takes a long
time and then gives you out a result.

146
00:06:57.474 --> 00:07:01.109
Well, it would really suck if
you had to do a thousand lines.

147
00:07:01.109 --> 00:07:04.040
You're like, now I have to write this
program to be multi-threaded if you

148
00:07:04.040 --> 00:07:06.342
wrote it in Node, or
if you wrote it in Go, it would just work.

149
00:07:06.342 --> 00:07:08.568
But hey,
we can't always write things in Go, but

150
00:07:08.568 --> 00:07:10.371
like pretend you had to write it in Node,

151
00:07:10.371 --> 00:07:13.817
now you want to be able to spawn like 8
of those or 10 of those instances, but

152
00:07:13.817 --> 00:07:17.506
you want them plucking as fast as possible
because some run short, some run long.

153
00:07:17.506 --> 00:07:20.573
Parallel again, if you write your
script just to do one thing.

154
00:07:20.573 --> 00:07:23.819
Parallel can paralyze it for you, so
you don't have to worry about that.

155
00:07:23.819 --> 00:07:26.693
And even you can determine how
much you want it to parallelize.

156
00:07:26.693 --> 00:07:28.471
All right, so let's go like this.

157
00:07:28.471 --> 00:07:31.207
This is just like such a great one.

158
00:07:31.207 --> 00:07:32.669
I'm just gonna call count.

159
00:07:32.669 --> 00:07:33.700
All right, there we go.

160
00:07:33.700 --> 00:07:34.877
There you go, 1 through 9.

161
00:07:34.877 --> 00:07:38.183
Fantastic, I can go like this,
cat count, right?

162
00:07:38.183 --> 00:07:39.242
There you go, 1 through 9.

163
00:07:39.242 --> 00:07:42.500
I can take account, and
I can go into parallel, right?

164
00:07:42.500 --> 00:07:47.912
And I can say, hey, I want three at
a time, and I want to go curl.com.

165
00:07:47.912 --> 00:07:53.075
So now we just did three at a time,
and so we could do it.

166
00:07:53.075 --> 00:07:55.625
We can do it one at a time,
okay, that's not that fast.

167
00:07:55.625 --> 00:07:57.250
We can go two at a time.

168
00:07:57.250 --> 00:08:00.619
We can preserve,
I believe k preserves input ordering.

169
00:08:00.619 --> 00:08:04.103
So that means1 will always be in the one
spot, 2 will always be in the two spot,

170
00:08:04.103 --> 00:08:05.672
3 will always be in the three spot.

171
00:08:05.672 --> 00:08:08.285
So that way, even if some of
them start running really fast,

172
00:08:08.285 --> 00:08:11.618
it will buffer up all the input for you
and make sure that it remains in the order

173
00:08:11.618 --> 00:08:15.442
that you specify, which is, again, that's
a really hard problem for you to program.

174
00:08:15.442 --> 00:08:18.396
If you had to program that yourself,
it's gonna take some effort, right?

175
00:08:18.396 --> 00:08:20.213
That's a non trivial amount of effort,

176
00:08:20.213 --> 00:08:22.413
because you want to pipe
it out as fast as you can.

177
00:08:22.413 --> 00:08:24.742
But anything that runs ahead,
you don't wanna pipe it out.

178
00:08:24.742 --> 00:08:27.785
So that way you could have parallel
program to another parallel program to

179
00:08:27.785 --> 00:08:31.023
another parallel program, and you could
just keep on doing these things, and

180
00:08:31.023 --> 00:08:32.857
it'll just go through as fast as possible.

181
00:08:32.857 --> 00:08:34.539
So absolutely fantastic.

182
00:08:34.539 --> 00:08:38.906
Just such a fantastic thing to have in
your tool bag, because anytime you write

183
00:08:38.906 --> 00:08:43.206
a script, you never have to think about
the multi-threaded side of things,

184
00:08:43.206 --> 00:08:46.798
if you're bound to a language
that only has one thread, right?

185
00:08:46.798 --> 00:08:48.910
And so, it's just a lifesaver.

186
00:08:48.910 --> 00:08:51.556
It's just such a lifesaver,
especially when you have a lot of stuff.

187
00:08:51.556 --> 00:08:56.561
I had this right before I left my previous
company that I'm wearing right here,

188
00:08:56.561 --> 00:08:59.621
I had to do a bunch of stuff with games,
and on it,

189
00:08:59.621 --> 00:09:04.272
we were getting millions of rows of
data per like, every couple minutes.

190
00:09:04.272 --> 00:09:06.571
And so I had to go through all these
things and try to figure out, say,

191
00:09:06.571 --> 00:09:07.577
what is the frame rate doing?

192
00:09:07.577 --> 00:09:08.672
How healthy is the machine doing?

193
00:09:08.672 --> 00:09:09.788
All these kind of things.

194
00:09:09.788 --> 00:09:11.197
And so it's just like,

195
00:09:11.197 --> 00:09:15.572
that is such a hard problem when
there's also 50 games at the same time.

196
00:09:15.572 --> 00:09:19.101
And so I wrote a simple script, and I
could use parallel to do certain levels of

197
00:09:19.101 --> 00:09:22.740
querying out to the database, other
sources, make sure I'm not flooding that

198
00:09:22.740 --> 00:09:25.323
and just doing like a million
requests at once, right?

199
00:09:25.323 --> 00:09:28.264
I can control this entire system and
then write a series of

200
00:09:28.264 --> 00:09:31.204
small simple programs that
just work on input outputs and

201
00:09:31.204 --> 00:09:35.369
just daisy chain them all together as a
single command and just made life really,

202
00:09:35.369 --> 00:09:38.702
really easy as opposed to just
being really huge pain in the ass.

203
00:09:38.702 --> 00:09:39.672
Anyways, there you go.

204
00:09:39.672 --> 00:09:40.721
I think that's great awk.

205
00:09:40.721 --> 00:09:42.116
If you don't know awk, awk's kinda weird.

206
00:09:42.116 --> 00:09:44.461
I'm not very good at awk, but
I only use it in one way.

207
00:09:44.461 --> 00:09:46.267
You can get really expressive with awk.

208
00:09:46.267 --> 00:09:47.725
I'm just not that great with awk.

209
00:09:47.725 --> 00:09:52.565
But let's say, if you go a little ps aux,
and we're gonna grab vim, right?

210
00:09:52.565 --> 00:09:55.071
I'm gonna get a couple processes
that are running Vim, right?

211
00:09:55.071 --> 00:09:57.419
What happened if you had some output and

212
00:09:57.419 --> 00:10:01.342
you wanted to sum up the second
item throughout all these things?

213
00:10:01.342 --> 00:10:02.330
How would you do that?

214
00:10:02.330 --> 00:10:06.046
Well, likely, a lot of people would
just reach for, again, a program.

215
00:10:06.046 --> 00:10:10.006
Split by space, take the first entry,
convert them to numbers,

216
00:10:10.006 --> 00:10:12.454
sum them all together, print them out.

217
00:10:12.454 --> 00:10:15.589
Well, I mean,
you technically don't have to do that.

218
00:10:15.589 --> 00:10:20.866
You can use something like awk,
which would be sum plus equals,

219
00:10:20.866 --> 00:10:26.550
I think it's, I wanna say it's two,
two, and print some, right?

220
00:10:26.550 --> 00:10:30.379
If I've done this all correctly,
it should just sum them all together.

221
00:10:30.379 --> 00:10:33.024
And so you can do things where you
can pluck stuff out, add it together.

222
00:10:33.024 --> 00:10:38.256
It's like a pretty squirrely language,
considering that awk is a genuinely

223
00:10:38.256 --> 00:10:43.176
old kind of program, and it just
create variables and things just work.

224
00:10:43.176 --> 00:10:43.976
And you can assign variables.

225
00:10:43.976 --> 00:10:44.770
There's dictionaries.

226
00:10:44.770 --> 00:10:50.044
You can do quite a bit of ad hoc scripting
in a really simple way in this program.

227
00:10:50.044 --> 00:10:53.520
So it's just good, just to have a little
bit of knowledge that it exists, and

228
00:10:53.520 --> 00:10:56.312
then maybe some ChatGPT if you
don't use it there very often.

229
00:10:56.312 --> 00:11:00.782
One of the hard parts about any of these
things is that often you will not use them

230
00:11:00.782 --> 00:11:05.181
at all for months on end, and then all of
a sudden you have to use JQ every day for

231
00:11:05.181 --> 00:11:09.366
like a week straight, and then you
won't touch it again for six months.

232
00:11:09.366 --> 00:11:14.897
And so
you don't have to memorize everything.

233
00:11:14.897 --> 00:11:18.415
It's just good to know that it exists,
that you can do these operations,

234
00:11:18.415 --> 00:11:22.533
cuz it's easy to go recall that knowledge,
especially now in the day and age of LLMs.

235
00:11:22.533 --> 00:11:26.392
It just makes it super, super simple
to find effectively what you want.

236
00:11:26.392 --> 00:11:28.519
You describe it in your
dumb caveman style,

237
00:11:28.519 --> 00:11:31.336
it produces out an answer that's
relatively close to it or

238
00:11:31.336 --> 00:11:34.799
completely hallucinated, and
you can eventually get your way there.

239
00:11:34.799 --> 00:11:38.183
And so it's just so easy, just long as
you just know that this thing exist,

240
00:11:38.183 --> 00:11:41.049
your life will be dramatically
better when you need to do them.

241
00:11:41.049 --> 00:11:42.529
And then just get in
the habit of doing them,

242
00:11:42.529 --> 00:11:44.298
because then you start
getting a little bit faster.

243
00:11:44.298 --> 00:11:47.163
You get faster and faster, and
eventually you kind of know the basics.

244
00:11:47.163 --> 00:11:48.791
And once you know the basics,

245
00:11:48.791 --> 00:11:52.059
you can get through quite a bit
before you need to go look up.

246
00:11:52.059 --> 00:11:55.857
So, I just wanted to give you that
little bit of like encouragement of

247
00:11:55.857 --> 00:11:57.370
how awesome that stuff is.

248
00:11:57.370 --> 00:11:59.852
&gt;&gt; Speaker 2: Something
like JQ in those tools.

249
00:11:59.852 --> 00:12:05.351
Do you use use those explicitly
only in scripts and bash stuff or

250
00:12:05.351 --> 00:12:11.698
do you ever use them in an equivalent
of that syntax and server side code?

251
00:12:11.698 --> 00:12:16.419
Because that syntax for the JQ seems
pretty powerful to kinda use all the time

252
00:12:16.419 --> 00:12:18.720
for JSON transformation and stuff.

253
00:12:18.720 --> 00:12:21.144
&gt;&gt; ThePrimeagen: Yeah, I mean,
it is really convenient.

254
00:12:21.144 --> 00:12:23.535
I don't know if JQ is a library.

255
00:12:23.535 --> 00:12:26.048
I don't know the performance
characteristics of it.

256
00:12:26.048 --> 00:12:30.453
I've only ever used it as
just ad hoc query foo.

257
00:12:30.453 --> 00:12:32.671
And so it's always me bringing
down a bunch of stuff,

258
00:12:32.671 --> 00:12:34.804
need to do a bunch of stuff,
and then that's that.

259
00:12:34.804 --> 00:12:38.823
And so I'd be a bit hesitant
to do anything beyond that and

260
00:12:38.823 --> 00:12:43.516
incorporate it into something else,
because I really just don't

261
00:12:43.516 --> 00:12:47.816
know its exact run time or
the consequences of that run time.

262
00:12:47.816 --> 00:12:51.011
Because you could be just massively
incurring something that's much,

263
00:12:51.011 --> 00:12:51.645
much slower.

264
00:12:51.645 --> 00:12:55.343
And if you're spawning, and if you just
have to use it as like a process that

265
00:12:55.343 --> 00:12:58.928
you're spawning, spawning additional
processes every single time,

266
00:12:58.928 --> 00:13:01.535
requests are coming in would
also be massively bad.

267
00:13:01.535 --> 00:13:03.202
I would probably suggest not doing that.

268
00:13:03.202 --> 00:13:07.791
And so my guess is it's no,
but you never know.

269
00:13:07.791 --> 00:13:08.845
You just never know.

270
00:13:08.845 --> 00:13:14.185
And anytime you use in a language,
typically things tend to be slower, right?

271
00:13:14.185 --> 00:13:15.251
Cause now you have two problems.

272
00:13:15.251 --> 00:13:18.110
Now you have your DSL
that you're debugging and

273
00:13:18.110 --> 00:13:20.477
often debugging a DSL is really awful.

274
00:13:20.477 --> 00:13:24.595
Even the worst of enemies I wouldn't
recommend debugging some DSL,

275
00:13:24.595 --> 00:13:29.423
it's just unfun, and so, I mean, you've
even experienced this with JSON when

276
00:13:29.423 --> 00:13:32.760
you have an error in your JSON and
it's just like error.

277
00:13:32.760 --> 00:13:34.920
You're just like, crap,
where's the comma, right?

278
00:13:34.920 --> 00:13:38.983
Now you're gonna play the game of look
through your package out JSON, just try to

279
00:13:38.983 --> 00:13:42.955
figure out where the comma is, because
it's just unfun to look at DSL errors.

280
00:13:42.955 --> 00:13:44.164
They just are never good.

281
00:13:44.164 --> 00:13:46.012
They're always very frustrating.

