WEBVTT

1
00:00:00.138 --> 00:00:04.134
All right, so the idea is we're gonna
create a script called run, and we're

2
00:00:04.134 --> 00:00:08.277
gonna pass in some arguments, and the
script is gonna run zero or more scripts.

3
00:00:08.277 --> 00:00:12.634
And I want to make sure that these scripts
are easily organized, easy to understand,

4
00:00:12.634 --> 00:00:15.491
and so they're gonna be in
a subdirectory called runs.

5
00:00:15.491 --> 00:00:17.885
All right,, pretty straightforward,
and I think we can all do that.

6
00:00:17.885 --> 00:00:21.110
Let's see if you want to see
the full version of what I've done,

7
00:00:21.110 --> 00:00:24.340
I here's the link out,
it's called primeGen/devonGitHub,

8
00:00:24.340 --> 00:00:25.984
it's where I have all my stuff.

9
00:00:25.984 --> 00:00:29.219
I actually think that I'm writing this
one a bit better than the one that I

10
00:00:29.219 --> 00:00:32.149
currently have, because this one
is me practicing for a course.

11
00:00:32.149 --> 00:00:34.035
Realizing going through it a few times,

12
00:00:34.035 --> 00:00:37.362
versus that one's the one I wrote in
a flurry, in a theory one evening,

13
00:00:37.362 --> 00:00:39.930
being angry at my environment and
answer accessible.

14
00:00:39.930 --> 00:00:42.160
So they're kinda a little bit different,
so

15
00:00:42.160 --> 00:00:46.222
the first thing we're gonna kinda start
with is just a very little bit of bashing.

16
00:00:46.222 --> 00:00:50.208
We're gonna kinda slowly build up this
script, so let's just start right here,

17
00:00:50.208 --> 00:00:54.092
we're gonna run the actual, let's see
all we need to write the actual script.

18
00:00:54.092 --> 00:00:56.237
So we're gonna start first by creating,
let's see,

19
00:00:56.237 --> 00:00:59.317
we're just gonna create the dev
environment first, so the dev environment,

20
00:00:59.317 --> 00:01:01.533
again, is everything
surrounding your development.

21
00:01:01.533 --> 00:01:06.337
So I want to be able to effectively create
a way to be able to build NeoVim from

22
00:01:06.337 --> 00:01:10.173
source or build anything I want or
install anything I want.

23
00:01:10.173 --> 00:01:13.383
All right so you can create this project
directory anywhere you deem fit,

24
00:01:13.383 --> 00:01:16.715
we're gonna create a run script or
we're gonna create a script called run.

25
00:01:16.715 --> 00:01:19.265
You technically can name it
whatever you want you wanna make

26
00:01:19.265 --> 00:01:22.376
that script executable, and
you can open up your favorite text editor,

27
00:01:22.376 --> 00:01:24.877
which is obviously NeoVim,
maybe it's something else.

28
00:01:24.877 --> 00:01:28.544
And so we're going to start simple, let's
code up something that allows us to get

29
00:01:28.544 --> 00:01:31.627
the current directory and
take in one argument for filtering tasks,

30
00:01:31.627 --> 00:01:34.252
like that's it,
that's all we're going to start with.

31
00:01:34.252 --> 00:01:38.054
So what I'm gonna do here is I'm
gonna go back to my personal here and

32
00:01:38.054 --> 00:01:41.873
I'm gonna make der,
I'm gonna just call it, Dev-n, all right.

33
00:01:41.873 --> 00:01:45.365
And we're gonna do a little Dev-n and

34
00:01:45.365 --> 00:01:50.943
in here we're gonna start
building out this whole process.

35
00:01:50.943 --> 00:01:55.784
So I'm gonna create a script called run,
and in here you do the classic, so,

36
00:01:55.784 --> 00:02:00.349
if you don't know what this does,
this just tells your this just tells.

37
00:02:00.349 --> 00:02:03.719
Whenever you execute this, it says,
hey, here's the program, you kinda,

38
00:02:03.719 --> 00:02:07.124
that is gonna be run right here, so
this is called the Shebang, right?

39
00:02:07.124 --> 00:02:10.711
I have it backwards,
there we go, it's a shebang,

40
00:02:10.711 --> 00:02:14.389
this is now a bash script,
when I run it, it'll run.

41
00:02:14.389 --> 00:02:18.761
If you don't know how to make
something executable on your system,

42
00:02:18.761 --> 00:02:21.291
if you're, on the old Linux side, and

43
00:02:21.291 --> 00:02:26.221
I believe this also works perfectly fine
on Mac as well, you just do a chmod.

44
00:02:26.221 --> 00:02:31.096
It's like a Michael Jackson move, you just
chmod it and boom, chmod your script, now,

45
00:02:31.096 --> 00:02:32.730
it runs, okay, fantastic.

46
00:02:32.730 --> 00:02:36.058
And so if I go in here and
go echo "hello",

47
00:02:36.058 --> 00:02:40.402
now that I have this thing ran,
I can go run, it runs, so

48
00:02:40.402 --> 00:02:45.774
just Chmod plus x run script,
that's all you gotta do, it now runs.

49
00:02:45.774 --> 00:02:49.236
And you always have to usually do
this because it's not in your path,

50
00:02:49.236 --> 00:02:52.294
you're just executing it from
this directory, all right.

51
00:02:52.294 --> 00:02:55.231
I just assume that everybody
knows things like path,

52
00:02:55.231 --> 00:02:57.521
is everyone here fine with the word path?

53
00:02:57.521 --> 00:02:59.837
Like, when I say that,
no one here is confused, okay, good.

54
00:02:59.837 --> 00:03:03.173
Because that's one of those things where
there's a lot of assumed knowledge,

55
00:03:03.173 --> 00:03:05.678
and if you don't know what it is,
it could be problematic.

56
00:03:05.678 --> 00:03:09.125
So for those that don't know,
just in case the path your computer,

57
00:03:09.125 --> 00:03:10.341
even Windows has this.

58
00:03:10.341 --> 00:03:14.018
It's just a series of places that it looks
for a series of directories that it looks

59
00:03:14.018 --> 00:03:16.487
into to see if there's
anything that's executable.

60
00:03:16.487 --> 00:03:20.157
So when you have something like this
that's runnable, say, dev, commit,

61
00:03:20.157 --> 00:03:20.727
or dev end.

62
00:03:20.727 --> 00:03:24.805
That's because somewhere on my system
I said, hey, this directory contains

63
00:03:24.805 --> 00:03:28.724
executables, and in that directory
contained something called dev end.

64
00:03:28.724 --> 00:03:33.021
And when I run it, it can run all right,
so let's program this thing up.

65
00:03:33.021 --> 00:03:37.676
So getting the current directory in bash
is a bit awkward, and I often have to

66
00:03:37.676 --> 00:03:42.141
look this one up over and over and
over again, cuz it's just so bizarre.

67
00:03:42.141 --> 00:03:47.130
But what you're gonna wanna do is
you're gonna wanna get the dirname of,

68
00:03:47.130 --> 00:03:48.830
let's see, what is it?

69
00:03:48.830 --> 00:03:54.082
It's dirname of BASH_SOURCE[0],

70
00:03:54.082 --> 00:03:57.485
yeah, classic, right?

71
00:03:57.485 --> 00:04:02.013
So you're gonna change directory
into the bash source zero, and

72
00:04:02.013 --> 00:04:06.969
then get the present working directory,
bam, first try, every try.

73
00:04:06.969 --> 00:04:09.531
It's just like a little
trick that is a part of it,

74
00:04:09.531 --> 00:04:12.398
I know it's like one of these
one liners and bash again,

75
00:04:12.398 --> 00:04:15.709
this is the 400 you know,
sharp edges that bash exists with.

76
00:04:15.709 --> 00:04:19.479
You just memorize them and when you
memorize them, they become pretty easy to

77
00:04:19.479 --> 00:04:23.027
kind of work with this is one of those,
and it kinda makes sense, right?

78
00:04:23.027 --> 00:04:27.114
There's this thing called Bash 0 kind of
like ARGs V in a node program that tells

79
00:04:27.114 --> 00:04:28.283
you where you're at.

80
00:04:28.283 --> 00:04:32.175
The first two arguments is
the thing is where you're at and

81
00:04:32.175 --> 00:04:35.523
I believe your first executable,
which is node.

82
00:04:35.523 --> 00:04:39.038
And so then this one just says hey, this
is where I'm at, so then I just change,

83
00:04:39.038 --> 00:04:40.925
I get the name of it and
then I change to it and

84
00:04:40.925 --> 00:04:42.821
then I get the present working directory.

85
00:04:42.821 --> 00:04:47.284
So pretty easy, awesome, and then I
also wanna go like this filter equals,

86
00:04:47.284 --> 00:04:48.887
let's just go $1, and so

87
00:04:48.887 --> 00:04:53.452
this is the first argument that's
passed into the script, okay, awesome.

88
00:04:53.452 --> 00:04:58.344
And let's go like this echo, just to
really make sure we get this all scripter,

89
00:04:58.344 --> 00:05:02.814
and of course, a filter, all right,
we're gonna just start off easy.

90
00:05:02.814 --> 00:05:04.747
If I execute run, you'll see there it is,

91
00:05:04.747 --> 00:05:09.128
I'm in home/primeagen/personal/dev-env,
perfectly, that's exactly what I wanted.

92
00:05:09.128 --> 00:05:13.329
And if I go foobarbaz, you see first
argument foo bar and baz, okay,

93
00:05:13.329 --> 00:05:15.514
fantastic, we're looking good.

94
00:05:15.514 --> 00:05:18.760
This is everything we want, somehow we're
actually gonna build something that

95
00:05:18.760 --> 00:05:21.014
hydrates your entire
environment starting from here.

96
00:05:21.014 --> 00:05:24.843
I know a lot of you, I know there's some
doubters, I can feel the doubters going,

97
00:05:24.843 --> 00:05:27.081
no, I don't know if we can do this,
all right.

98
00:05:27.081 --> 00:05:30.258
So there we go, look at that practically
the exact same code, awesome.

99
00:05:30.258 --> 00:05:33.804
So let's see, but
how do we run our set of scripts, right?

100
00:05:33.804 --> 00:05:37.088
So now it's time to actually do
the running side of things, so

101
00:05:37.088 --> 00:05:39.566
this is actually a pretty
simple script to do.

102
00:05:39.566 --> 00:05:44.097
So what I'm gonna do is I'm gonna do the
following, is that there is a, we can do,

103
00:05:44.097 --> 00:05:48.302
we're gonna use the command find,
as if everyone's not familiar with find

104
00:05:48.302 --> 00:05:50.950
you provide it a directory and
some arguments.

105
00:05:50.950 --> 00:05:54.679
And it will grab everything out of
that directory and recursively, and

106
00:05:54.679 --> 00:05:58.409
it will hand you back a list of items
separated by new line effectively,

107
00:05:58.409 --> 00:05:59.977
is how you can think about it.

108
00:05:59.977 --> 00:06:02.003
And so,
it's pretty straightforward to use, so

109
00:06:02.003 --> 00:06:05.104
what I'm gonna do is I'm actually gonna
change into my scripts directory.

110
00:06:05.104 --> 00:06:07.996
Remember when you execute
something from in here,

111
00:06:07.996 --> 00:06:12.040
it doesn't actually change your directory,
it starts a new process.

112
00:06:12.040 --> 00:06:15.119
That process has a new directory, so
you don't have to worry about that,

113
00:06:15.119 --> 00:06:17.866
if you were to source this file,
it would change your directory.

114
00:06:17.866 --> 00:06:21.095
So don't source it,
obviously just execute it, there we go, so

115
00:06:21.095 --> 00:06:24.517
I'm gonna change into this directory,
and I'm gonna find on runs.

116
00:06:24.517 --> 00:06:28.857
And what I'm gonna do is I'm gonna find
everything inside this runs directory that

117
00:06:28.857 --> 00:06:33.264
is an executable, and then I'm also gonna
not allow it to search recursively deep.

118
00:06:33.264 --> 00:06:36.284
So all I have to do is go in here and
go like this, max depth,

119
00:06:36.284 --> 00:06:40.480
if you're not familiar with find,
it's actually pretty nice, max depth one,

120
00:06:40.480 --> 00:06:42.786
min depth one, I know, it's kinda weird.

121
00:06:42.786 --> 00:06:46.837
If you don't do min depth one, you'll also
get like dots because the dot directory is

122
00:06:46.837 --> 00:06:48.589
also a directory which is yourself.

123
00:06:48.589 --> 00:06:53.928
So, min depth max depth one and then do
executable and type file, there we go.

124
00:06:53.928 --> 00:06:57.882
So this will find every single thing
that is a file that's executable within

125
00:06:57.882 --> 00:07:02.328
the runs directory and what I'm gonna do
is I'm gonna go like this, scripts equals,

126
00:07:02.328 --> 00:07:04.088
and I'm just gonna surround it.

127
00:07:04.088 --> 00:07:09.071
There we go, so now we have all
the scripts, fantastic, for

128
00:07:09.071 --> 00:07:14.058
script in scripts,
this is that fantastic batch language,

129
00:07:14.058 --> 00:07:18.980
and I actually like it,
I actually prefer this with words.

130
00:07:18.980 --> 00:07:22.035
I actually like the do and done,
as opposed to square by brace,

131
00:07:22.035 --> 00:07:24.226
call me old fashioned,
but I actually like,

132
00:07:24.226 --> 00:07:27.934
I like that style, I like tokens that
are forced to require start and stops.

133
00:07:27.934 --> 00:07:32.402
I think it looks nicer, no,
this old fashioned me, right?

134
00:07:32.402 --> 00:07:35.901
Okay, so now all we have to do is filter
out anything we don't want to execute, and

135
00:07:35.901 --> 00:07:39.151
then we have to execute the things that
aren't filtered out should be pretty

136
00:07:39.151 --> 00:07:40.051
straight forward.

137
00:07:40.051 --> 00:07:43.755
So if you're not familiar with
the old grep, we can use that as well.

138
00:07:43.755 --> 00:07:47.256
So what we can do is we can say,
hey, we're gonna echo filter,

139
00:07:47.256 --> 00:07:50.243
we're gonna echo out our
filter command right here.

140
00:07:50.243 --> 00:07:52.580
And then we're gonna want to or
we're gonna echo, sorry,

141
00:07:52.580 --> 00:07:56.058
we're gonna echo out the script, and we're
gonna check to see, does grep contain it.

142
00:07:56.058 --> 00:07:59.287
Q means quiet,
it's not gonna print anything,

143
00:07:59.287 --> 00:08:02.612
V means Everything it's
gonna inverse match it.

144
00:08:02.612 --> 00:08:05.751
So instead of trying to find this match,
it's gonna try to not find the match.

145
00:08:05.751 --> 00:08:09.798
Do you not contain this value.

146
00:08:09.798 --> 00:08:13.527
So does this script not
contain this filter?

147
00:08:13.527 --> 00:08:18.169
If it does not contain the filter,
then we should be able to go in here,

148
00:08:18.169 --> 00:08:20.229
forgot the little semicolon.

149
00:08:20.229 --> 00:08:20.732
Going right there, right here.

150
00:08:20.732 --> 00:08:21.828
We can go and continue.

151
00:08:21.828 --> 00:08:24.671
And just to make sure we understand,

152
00:08:24.671 --> 00:08:28.993
I'll go like this echo filtering script,
fantastic.

153
00:08:28.993 --> 00:08:32.311
And if we have it, then we'll go script.

154
00:08:32.311 --> 00:08:36.045
We'll just execute the script,
it'll just run, awesome, right?

155
00:08:36.045 --> 00:08:37.929
We got everything we
needed done right here.

156
00:08:37.929 --> 00:08:39.807
And you know what?
We probably would like to do is we

157
00:08:39.807 --> 00:08:42.495
probably want to actually
create this directory now and

158
00:08:42.495 --> 00:08:45.143
maybe create at least one or
two test scripts, right?

159
00:08:45.143 --> 00:08:47.077
That probably be a good next plan.

160
00:08:47.077 --> 00:08:50.444
So what I'm gonna do is I'm gonna
jump over, by the way, if you,

161
00:08:50.444 --> 00:08:52.975
if you feel like you wanna
catch up with the code.

162
00:08:52.975 --> 00:08:54.779
I also have it on the course website.

163
00:08:54.779 --> 00:08:59.327
I'm gonna take some, potentially some
unconventional approaches to this runs and

164
00:08:59.327 --> 00:09:00.745
And I'm gonna go neovim.

165
00:09:00.745 --> 00:09:06.062
And in here I'll do the old shebang,
a bang, user, bin and bash.

166
00:09:06.062 --> 00:09:06.622
There we go.

167
00:09:06.622 --> 00:09:13.609
I'm gonna make it executable, and I'm just
gonna go echo hello from neovim for now.

168
00:09:13.609 --> 00:09:20.991
Keep it pretty simple.

169
00:09:20.991 --> 00:09:21.863
All right, good.

170
00:09:21.863 --> 00:09:25.413
All right, so now, if we've done this
correctly, it should only find one script,

171
00:09:25.413 --> 00:09:28.963
which should be neovim, because that's
the only executable script inside the runs

172
00:09:28.963 --> 00:09:31.620
directory and it and we should be
able to check for our filters.

173
00:09:31.620 --> 00:09:33.024
And if that's that,
then we should be good to go.

174
00:09:33.024 --> 00:09:34.341
So I should be able to go like this.

175
00:09:34.341 --> 00:09:37.495
If I run foobarbaz,
you'll notice that it filtered neovim.

176
00:09:37.495 --> 00:09:38.821
It did not, in fact, run it.

177
00:09:38.821 --> 00:09:40.633
Found it but it filtered it.

178
00:09:40.633 --> 00:09:44.236
If I remove that it should say hello
from neovim because I ran the script.

179
00:09:44.236 --> 00:09:47.308
Okay fantastic, hopefully people
are seeing where this is going.

180
00:09:47.308 --> 00:09:53.798
If I go neovim, of course neovim is
inside of neovim so it will match that.

181
00:09:53.798 --> 00:09:56.313
It's kind of just like
a fuzzy slight finder.

182
00:09:56.313 --> 00:10:00.454
So there we go so we have kind of like
the basic framework set up for us to be

183
00:10:00.454 --> 00:10:05.167
able to run any script right here, and
it can run an entire directory of scripts.

184
00:10:05.167 --> 00:10:09.799
So that means every single thing we want
to install that has basic configuration,

185
00:10:09.799 --> 00:10:14.176
whatever we can actually set up a series
of those scripts for each one of them.

186
00:10:14.176 --> 00:10:17.363
So my neovim installation process,
though, what was it?

187
00:10:17.363 --> 00:10:18.916
Seven, eight lines that are required to.

188
00:10:18.916 --> 00:10:19.777
To do install neovim.

189
00:10:19.777 --> 00:10:24.483
It can have its own script that I know
just works, and it will just run.

190
00:10:24.483 --> 00:10:25.895
And I can even get clever and

191
00:10:25.895 --> 00:10:28.794
use like environment variables
to select the version.

192
00:10:28.794 --> 00:10:31.703
You could go nuts with
all these things for now,

193
00:10:31.703 --> 00:10:35.423
I'm just not gonna do all those
things in here, fantastic.

194
00:10:35.423 --> 00:10:36.708
So let's just jump back down here.

195
00:10:36.708 --> 00:10:39.864
So looks like I've pretty much
Written the exact same code.

196
00:10:39.864 --> 00:10:43.943
All right, awesome,
my echo statements not as nice.

197
00:10:43.943 --> 00:10:47.470
Quick notion for those that don't
know the difference between these,

198
00:10:47.470 --> 00:10:50.174
you probably see single
bracket comparisons in bash,

199
00:10:50.174 --> 00:10:54.368
double bracket comparisons in bash, and
then just no bracket comparisons in bash.

200
00:10:54.368 --> 00:10:55.925
Why does all this happen?

201
00:10:55.925 --> 00:10:59.189
Well, the single bracket one is very
it's called post compliance testing.

202
00:10:59.189 --> 00:11:01.445
It has its own set of syntax.

203
00:11:01.445 --> 00:11:04.637
You'll notice it doesn't use
things like greater than.

204
00:11:04.637 --> 00:11:07.451
I don't know the exact reason for
all, like why this one,

205
00:11:07.451 --> 00:11:08.726
it's an older style one.

206
00:11:08.726 --> 00:11:10.201
It has more edge cases.

207
00:11:10.201 --> 00:11:11.440
This one is a little bit nicer.

208
00:11:11.440 --> 00:11:14.641
I just assume it's because it's meant to
be written right on the command line.

209
00:11:14.641 --> 00:11:19.572
I believe there's something called test
in which you can pass this in and it'll

210
00:11:19.572 --> 00:11:24.076
do a test on it and return one or zero
as the exit code if it fails or passes.

211
00:11:24.076 --> 00:11:27.466
The double bracket is more modern, so you
can use something like equal equal, but

212
00:11:27.466 --> 00:11:29.004
it only works in bash environments.

213
00:11:29.004 --> 00:11:34.041
And then, of course, this one right here,
which actually just executes that,

214
00:11:34.041 --> 00:11:38.356
and depending on the X code,
is how if the if statement passes or not.

215
00:11:38.356 --> 00:11:43.581
So a X code of zero means, yay,
we can go into this if statement.

216
00:11:43.581 --> 00:11:47.532
X code of not zero means we're not gonna
go into it because there was an error.

217
00:11:47.532 --> 00:11:49.234
So pretty straightforward
with those things.

218
00:11:49.234 --> 00:11:50.399
All right, back to the program.

219
00:11:50.399 --> 00:11:53.478
What if we want to be able to
run our installation scripts?

220
00:11:53.478 --> 00:12:00.137
But we don't want, maybe we want to test
to make sure we're not crazy, right?

221
00:12:00.137 --> 00:12:01.990
Why?
Even if we have to do some deleting and

222
00:12:01.990 --> 00:12:05.531
all that, we don't want to just destroy
ourselves, we probably want like,

223
00:12:05.531 --> 00:12:06.790
a dry run feature, right?

224
00:12:06.790 --> 00:12:09.938
All right, this is pretty easy to do,
so let's just hop back up here and

225
00:12:09.938 --> 00:12:11.779
we're gonna do a little bit of changing.

226
00:12:11.779 --> 00:12:13.420
I'm gonna set my filter to nothing.

227
00:12:13.420 --> 00:12:16.001
I'm gonna create a dry
that's equal to one.

228
00:12:16.001 --> 00:12:22.243
And we're gonna do a little while our,
what is it?

229
00:12:22.243 --> 00:12:28.159
While our amount of arguments, dollar
sign pound, dollar sign number count,

230
00:12:28.159 --> 00:12:32.500
right, dollar sign argument
count is greater than zero.

231
00:12:32.500 --> 00:12:35.435
We're gonna go in here and we're gonna
do like a little bit of checking, okay?

232
00:12:35.435 --> 00:12:37.930
You have to par, you have to parse
your own command line arguments.

233
00:12:37.930 --> 00:12:42.534
It's not that bad to really do long as
you don't have very complex arguments,

234
00:12:42.534 --> 00:12:44.509
but you can imagine I can do this.

235
00:12:44.509 --> 00:12:49.587
If the first argument equals dry, well,

236
00:12:49.587 --> 00:12:54.966
then I can make, oopsies, dry equals one.

237
00:12:54.966 --> 00:12:56.802
We definitely want that to be zero.

238
00:12:56.802 --> 00:12:59.060
We can then say dry equals one.

239
00:12:59.060 --> 00:12:59.710
There we go.

240
00:12:59.710 --> 00:13:03.507
Dry is now true when this happens,
fantastic.

241
00:13:03.507 --> 00:13:08.227
Else, if it's not that I can
just say filter equals one.

242
00:13:08.227 --> 00:13:09.327
We're gonna keep it simple.

243
00:13:09.327 --> 00:13:11.943
We only allow a singular filtered term.

244
00:13:11.943 --> 00:13:14.467
I'm not gonna create
an array of filtered terms.

245
00:13:14.467 --> 00:13:17.848
There you go, right, let's just start
simply, you can fix those things later,

246
00:13:17.848 --> 00:13:19.179
they are not that hard, right?

247
00:13:19.179 --> 00:13:20.274
And then just do a shift.

248
00:13:20.274 --> 00:13:24.083
All shifts does is simply removes
the first argument from the argument list.

249
00:13:24.083 --> 00:13:26.754
So we're just gonna go through here and
pop off every single argument,

250
00:13:26.754 --> 00:13:27.431
look through it.

251
00:13:27.431 --> 00:13:30.366
That way you don't have to provide dry
as like the first argument, it could be

252
00:13:30.366 --> 00:13:33.273
the second argument, you don't have to
be clever with any of these things.

253
00:13:33.273 --> 00:13:35.802
We just take them, parse them,
bada bing bada boom.

254
00:13:35.802 --> 00:13:38.683
Next, let's build out
a function called log.

255
00:13:38.683 --> 00:13:42.424
Now I like doing this just because,
especially with dry runs,

256
00:13:42.424 --> 00:13:47.504
I don't want to do this, dance of trying
to like do a bunch of if statements with,

257
00:13:47.504 --> 00:13:49.645
this thing's dry or not dry, run.

258
00:13:49.645 --> 00:13:51.535
I don't know which one.

259
00:13:51.535 --> 00:13:55.322
So I try to remove all of that and instead
just run it through a couple functions.

260
00:13:55.322 --> 00:14:00.850
So this one's pretty easy if dry equals 1.

261
00:14:02.662 --> 00:14:08.234
&gt;&gt; ThePrimeagen: Then I want to go
echo dry run, and then I'll do this.

262
00:14:08.234 --> 00:14:11.708
That means print out everything
that was passed to me.

263
00:14:11.708 --> 00:14:14.271
Dollar sign at is all of them.

264
00:14:14.271 --> 00:14:18.489
Else we can just print out all of them,
right?

265
00:14:18.489 --> 00:14:20.976
So that is now,
it just kind of operates like echo.

266
00:14:20.976 --> 00:14:23.242
We go down here, I can now use log.

267
00:14:23.242 --> 00:14:24.987
If it is dry, it'll say a dry run.

268
00:14:24.987 --> 00:14:28.442
If it's not dry, it will not be a dry run,
fantastic, right?

269
00:14:28.442 --> 00:14:30.638
Now let's do the exact same thing,
except for

270
00:14:30.638 --> 00:14:33.409
I'm gonna have execute if it's execute or,
let's see.

271
00:14:33.409 --> 00:14:34.092
Let's go like this.

272
00:14:34.092 --> 00:14:38.835
First we're gonna go log and
then we'll do execute with everything.

273
00:14:38.835 --> 00:14:41.893
So we'll log to let you know you're
trying to execute something.

274
00:14:41.893 --> 00:14:46.241
And then if it's a dry,
we'll go return else.

275
00:14:46.241 --> 00:14:49.270
Or we can take that, bring that down.

276
00:14:49.270 --> 00:14:53.179
Else we'll just execute everything,
fantastic.

277
00:14:53.179 --> 00:14:54.068
Yeah, there we go.

278
00:14:54.068 --> 00:14:56.480
So we have these two little
wrapper functions to kind of help.

279
00:14:56.480 --> 00:14:58.500
If you're not familiar with this,
that's okay.

280
00:14:58.500 --> 00:15:00.608
Okay, they're unusual, they're weird.

281
00:15:00.608 --> 00:15:02.718
These are like one of those bashisms,
again,

282
00:15:02.718 --> 00:15:05.378
that once you learn a couple bashisms,
it just helps you.

283
00:15:05.378 --> 00:15:09.036
And so this just simply will get it so
that I can have protective logging and

284
00:15:09.036 --> 00:15:11.751
protective execute based on this dry flag,
yes or no.

285
00:15:11.751 --> 00:15:16.388
So now I can simply log that,
change the directories, find all this,

286
00:15:16.388 --> 00:15:20.484
echo that script, I can log that out,
and I can execute this.

287
00:15:20.484 --> 00:15:21.565
Pretty nice, right?

288
00:15:21.565 --> 00:15:22.528
That feels pretty nice.

289
00:15:22.528 --> 00:15:24.208
It should let me know
everything's going on.

290
00:15:24.208 --> 00:15:27.269
So now when I rerun this and
I add the word dry, you can see, okay,

291
00:15:27.269 --> 00:15:29.441
we were gonna do this and
we were gonna do this,

292
00:15:29.441 --> 00:15:32.419
but notice that it didn't actually
run the hello from neovim.

293
00:15:32.419 --> 00:15:33.932
It just said we're gonna do it.

294
00:15:33.932 --> 00:15:35.312
So it's like, nice.

295
00:15:35.312 --> 00:15:39.063
Okay, so now I can make sure that my
scripts don't accidently destructively

296
00:15:39.063 --> 00:15:39.938
destroy myself.

297
00:15:39.938 --> 00:15:42.419
I can see what they're gonna do,
and then I can run it.

298
00:15:42.419 --> 00:15:46.502
It's always really fantastic to plan for
that, because or else, life kind of sucks.

299
00:15:46.502 --> 00:15:48.665
There you go.
Hello from the event.

300
00:15:48.665 --> 00:15:51.344
So I always try to build that in
as one of the first things I do.

301
00:15:51.344 --> 00:15:55.589
Now we've effectively created
something that you can now bring in

302
00:15:55.589 --> 00:15:59.625
every piece of software you need
on your system with a single x.

303
00:15:59.625 --> 00:16:01.179
Execution, obviously, bringing this down.

304
00:16:01.179 --> 00:16:03.644
You could do a bunch of different ways,
you could bring this down.

305
00:16:03.644 --> 00:16:04.844
You can put this up on Git, and

306
00:16:04.844 --> 00:16:07.632
you're just gonna have to manually
get cloned down this directory,

307
00:16:07.632 --> 00:16:10.582
and then just run, run, and
then it will start installing everything.

308
00:16:10.582 --> 00:16:14.303
It's not that hard to get your system up
and running, but I assume you can type for

309
00:16:14.303 --> 00:16:17.729
at least two minutes to get to the point
of getting everything installed.

310
00:16:17.729 --> 00:16:20.135
And I think the thing that I
really like about this, and

311
00:16:20.135 --> 00:16:23.444
the reason why I like it this way is,
a, it's super simple to understand.

312
00:16:23.444 --> 00:16:24.744
What are we at?

313
00:16:24.744 --> 00:16:25.303
44 lines?

314
00:16:25.303 --> 00:16:27.911
This is not a lot of bash,
there's not a lot to it,

315
00:16:27.911 --> 00:16:29.973
it's pretty straightforward stuff.

316
00:16:29.973 --> 00:16:32.721
You could make it more clever
if you really, really wanted to.

317
00:16:32.721 --> 00:16:35.889
But if I had another thing,
let's just pretend, I don't know,

318
00:16:35.889 --> 00:16:37.918
we had something else, foobar, right?

319
00:16:37.918 --> 00:16:39.904
It doesn't really matter
what the other thing is.

320
00:16:39.904 --> 00:16:43.996
If I go in here and
I have bin/env bash, and

321
00:16:43.996 --> 00:16:50.478
I echo "hello from foobar",
you'll notice that when I run this,

322
00:16:50.478 --> 00:16:55.739
we should be able to just do,
did I make it executable?

323
00:16:55.739 --> 00:16:57.363
I didn't make it executable, there we go.

324
00:16:57.363 --> 00:16:58.667
Look at that, protecting myself.

325
00:16:58.667 --> 00:17:02.179
You can even see it's filtering for
foobar, it's gonna run that,

326
00:17:02.179 --> 00:17:03.477
it's gonna run neovim.

327
00:17:03.477 --> 00:17:07.321
If I simply just run, you'll notice
that it runs both hello from Neovim,

328
00:17:07.321 --> 00:17:08.385
hello from foobar.

329
00:17:08.385 --> 00:17:11.326
It's pretty simple, it's a very easy
way to be able to have each one of your

330
00:17:11.326 --> 00:17:14.283
installation scripts for each one of
your little libraries that you want.

331
00:17:14.283 --> 00:17:18.470
You can have your dev set that's just
like pseudo app, install, jq, CMake,

332
00:17:18.470 --> 00:17:21.643
build-essentials, all the crap
that you want, Python,

333
00:17:21.643 --> 00:17:23.682
all that, it can just be right there.

334
00:17:23.682 --> 00:17:28.111
So I just really appreciate this way
cuz it's very understandable for me.

335
00:17:28.111 --> 00:17:32.738
And it's something that if I want to make
different, I can make it different easily.

336
00:17:32.738 --> 00:17:37.316
And so there we go, there is step one of
why I think I like mine better than yours.

337
00:17:37.316 --> 00:17:39.063
Cuz I don't have any
configuration in there.

338
00:17:39.063 --> 00:17:40.829
I simply have one simple convention.

339
00:17:40.829 --> 00:17:43.295
Put an executable script
in a single directory,

340
00:17:43.295 --> 00:17:45.110
it will now work every single time.

341
00:17:45.110 --> 00:17:46.185
If I wanna filter it, I filter it.

342
00:17:46.185 --> 00:17:47.070
There we go.

343
00:17:47.070 --> 00:17:49.178
Did I write very similar code?

344
00:17:49.178 --> 00:17:51.144
I think I wrote identical code.

345
00:17:51.144 --> 00:17:53.032
It's like I've done it before, high five.

346
00:17:53.032 --> 00:17:55.460
All right, awesome,
boom, now we have this,

347
00:17:55.460 --> 00:17:58.820
we can easily set up our environment,
it's fairly extensible.

348
00:17:58.820 --> 00:18:02.076
You can add as many scripts as you'd like,
you can filter them.

349
00:18:02.076 --> 00:18:04.482
You can even edit the script to
be exactly the way you want.

350
00:18:04.482 --> 00:18:07.557
Maybe you want multiple filters,
you, Tapper, you could.

351
00:18:07.557 --> 00:18:08.117
I do.

352
00:18:08.117 --> 00:18:10.679
I'm not even gonna say you can't,
you could do that,

353
00:18:10.679 --> 00:18:12.136
it's just I don't want that.

354
00:18:12.136 --> 00:18:13.765
So I'm just not gonna do it.

355
00:18:13.765 --> 00:18:16.379
All right, so some of the cons,
obviously, bash kinda sucks.

356
00:18:16.379 --> 00:18:18.750
Not gonna lie to you.

357
00:18:18.750 --> 00:18:19.919
What is this?

358
00:18:19.919 --> 00:18:22.664
This just feels funny coming
from any programming language.

359
00:18:22.664 --> 00:18:26.415
Why is a string of $@
making things execute?

360
00:18:26.415 --> 00:18:28.095
I don't know, it's bash, right?

361
00:18:28.095 --> 00:18:30.912
There's some bashes and that's like,
I'm gonna take that now, execute it,

362
00:18:30.912 --> 00:18:32.071
because it's in the right order.

363
00:18:32.071 --> 00:18:33.096
I don't really get that.

364
00:18:33.096 --> 00:18:36.435
I haven't spent enough time learning
all the ins and out of bash.

365
00:18:36.435 --> 00:18:39.267
I just know how to use it like a sword,
right?

366
00:18:39.267 --> 00:18:41.603
Keeping things up to
date is easy to forget.

367
00:18:41.603 --> 00:18:44.909
And so make sure that as you install
things, if you like what they are,

368
00:18:44.909 --> 00:18:46.602
that's why I put a filter in there.

369
00:18:46.602 --> 00:18:50.673
Is that, actually, anytime I add something
new to my system that I want around for

370
00:18:50.673 --> 00:18:54.626
a while, I go right to this directory,
add a new script, and it's like, hey,

371
00:18:54.626 --> 00:18:55.349
I now want jq.

372
00:18:55.349 --> 00:18:58.257
Here's how I wanna install it,
this is why I wanna install it, boom,

373
00:18:58.257 --> 00:18:59.257
now it's part of that.

374
00:18:59.257 --> 00:19:00.795
And then I always run things through this.

375
00:19:00.795 --> 00:19:04.378
I just keeps me in the habit of keeping
everything the same, it's always the same.

376
00:19:04.378 --> 00:19:08.420
I can just see with the glance of an eye
all the things that I like to have

377
00:19:08.420 --> 00:19:10.603
personally installed on my system.

378
00:19:10.603 --> 00:19:14.603
Making it OS independent, again,
still pain in the ass though,

379
00:19:14.603 --> 00:19:17.451
probably not as easy as
Ansible in that sense.

380
00:19:17.451 --> 00:19:20.786
But at the same time, I could just
make run Mac and bada bing, bada boom,

381
00:19:20.786 --> 00:19:22.821
slightly different, and it all works out.

382
00:19:22.821 --> 00:19:24.857
Because most of those things
will probably be very similar.

383
00:19:24.857 --> 00:19:31.241
Like, installing Neovim is gonna probably
be identical between Mac and Linux, maybe.

384
00:19:31.241 --> 00:19:32.592
Maybe it's not, maybe it blows up.

385
00:19:32.592 --> 00:19:35.145
Maybe you can just use GitHub
to download the tarball and

386
00:19:35.145 --> 00:19:38.141
then just don't have to worry
about it at all, and life's easy.

387
00:19:38.141 --> 00:19:40.681
Other thoughts on dry run,
you could technically,

388
00:19:40.681 --> 00:19:43.856
if you really want to make your
script as extensible as possible,

389
00:19:43.856 --> 00:19:46.413
you could export dry run and
then run those scripts.

390
00:19:46.413 --> 00:19:47.133
And that way,

391
00:19:47.133 --> 00:19:51.470
the things underneath have access to this
variable called dry run that now equals 1.

392
00:19:51.470 --> 00:19:55.161
So they can just show you what
you do inside of each subscript.

393
00:19:55.161 --> 00:19:58.695
I find that to be extremely cumbersome,
big pain in practice, so

394
00:19:58.695 --> 00:20:00.252
I didn't wanna go that way.

395
00:20:00.252 --> 00:20:03.238
I just wanted to say, hey, I would
have done this, but I didn't do it.

396
00:20:03.238 --> 00:20:06.334
I don't wanna have to have every single
script be filled with all these if

397
00:20:06.334 --> 00:20:07.622
statements and everything.

398
00:20:07.622 --> 00:20:12.630
That just sounds like a lot of work and
it's not work I wanna do.

