WEBVTT

1
00:00:00.300 --> 00:00:02.812
Next let's talk about modules and

2
00:00:02.812 --> 00:00:08.870
interrupt between a modern TypeScript
code base and common JS libraries.

3
00:00:08.870 --> 00:00:13.686
Node still uses common JS as its
defaults module format although

4
00:00:13.686 --> 00:00:18.680
modernization efforts are underway,
it'll be a long time before

5
00:00:18.680 --> 00:00:24.050
we can forget about this older
way of writing JavaScript code.

6
00:00:24.050 --> 00:00:28.881
This is one of the trickiest aspects
of getting dependencies to work

7
00:00:28.881 --> 00:00:31.340
nicely with your own code.

8
00:00:31.340 --> 00:00:36.340
And I have helped seasoned experts
overcome the stumbling blocks I'm about to

9
00:00:36.340 --> 00:00:37.370
show you.

10
00:00:37.370 --> 00:00:39.900
So this is a lot of tips and tricks.

11
00:00:39.900 --> 00:00:43.520
They're valuable even for
you experienced TypeScript practitioners.

12
00:00:43.520 --> 00:00:48.219
The reason we even need to talk
about this is because until 2015,

13
00:00:48.219 --> 00:00:52.850
there was no standardized module
format for JavaScript projects.

14
00:00:54.340 --> 00:00:59.810
As a result,
several community based solutions emerged.

15
00:00:59.810 --> 00:01:04.617
We have CommonJS which was
popular in the node community,

16
00:01:04.617 --> 00:01:10.450
AMD and UMD and these were more
popular for browser based apps.

17
00:01:10.450 --> 00:01:16.199
Because of all the bundling technology
we use for browser based apps,

18
00:01:16.199 --> 00:01:21.860
these two types of modules AMD and
UMD have sort of gone away, right?

19
00:01:21.860 --> 00:01:25.459
Very few people write code like that,
although sometimes we have these as

20
00:01:25.459 --> 00:01:28.610
a compiled target we don't
really see that code.

21
00:01:28.610 --> 00:01:33.739
Common JS has stuck around and it's
largely as I said, because of node, right.

22
00:01:33.739 --> 00:01:36.990
Node still consumes common JS libraries.

23
00:01:36.990 --> 00:01:41.567
And the core libraries of node
are written in this format, so

24
00:01:41.567 --> 00:01:44.275
we need to know how to consume them.

25
00:01:47.356 --> 00:01:51.241
It's important to understand
that I'm assuming and

26
00:01:51.241 --> 00:01:55.430
I encourage you to only
write ES modules these days.

27
00:01:55.430 --> 00:02:02.280
You should be writing your own new code,
using the new standard.

28
00:02:02.280 --> 00:02:05.396
Because that's a good way for
you to be forward compatible, right?

29
00:02:05.396 --> 00:02:07.520
That your code will have
a longer shelf life.

30
00:02:09.240 --> 00:02:14.556
First, everything you're used to
seeing around model imports and

31
00:02:14.556 --> 00:02:19.990
exports in the Java script world,
also works for TypeScript.

32
00:02:19.990 --> 00:02:21.770
So here are a bunch of examples.

33
00:02:21.770 --> 00:02:23.720
We can go through them very quickly.

34
00:02:23.720 --> 00:02:28.010
But they all work in TypeScript and
JavaScript alike.

35
00:02:28.010 --> 00:02:29.980
So we've got multiple named imports.

36
00:02:29.980 --> 00:02:34.936
We have a default import,
a named export a default export,

37
00:02:34.936 --> 00:02:37.720
these are re-exports, right?

38
00:02:37.720 --> 00:02:42.383
We're sort of passing lemon and
lime which originate in citrus,

39
00:02:42.383 --> 00:02:48.330
into our module and then export them
out as if they're our named exports.

40
00:02:48.330 --> 00:02:49.580
All of this works in TypeScript.

41
00:02:51.400 --> 00:02:56.113
Although it is not super
common in JavaScript projects,

42
00:02:56.113 --> 00:03:01.709
you're going to see things like
this a lot in the TypeScript world,

43
00:03:01.709 --> 00:03:06.370
because often this is
the solution to common JS entrop.

44
00:03:06.370 --> 00:03:09.900
So we see up here you have
this module called berries.

45
00:03:09.900 --> 00:03:12.340
We're getting strawberry and
raspberry from it.

46
00:03:12.340 --> 00:03:16.861
This would let you get a name space with
all of the different berries hanging

47
00:03:16.861 --> 00:03:17.780
off of it.

48
00:03:17.780 --> 00:03:22.213
There's even a capability to
alias a name space re-export,

49
00:03:22.213 --> 00:03:27.841
which is something TypeScript does today,
and something JavaScript has just

50
00:03:27.841 --> 00:03:33.320
added to their draft specification for
the language for the year 2021.

51
00:03:33.320 --> 00:03:38.170
So soon you will start to see this
as a feature that you can use

52
00:03:38.170 --> 00:03:40.600
broadly across JavaScript.

53
00:03:42.120 --> 00:03:44.948
Great so
that's stuff that works in JavaScript,

54
00:03:44.948 --> 00:03:49.070
also works in TypeScript let's talk
about the more interesting thing.

55
00:03:49.070 --> 00:03:53.346
What are the special import concerns,
you need to know about,

56
00:03:53.346 --> 00:03:57.770
as you take on authoring a library or
an app in TypeScript?

57
00:03:57.770 --> 00:04:01.431
Well first, if you're writing
code that looks like this,

58
00:04:01.431 --> 00:04:06.115
or if If you're looking to write typed
code that does the same thing as this,

59
00:04:06.115 --> 00:04:09.500
often you can just use this
namespace import, right.

60
00:04:09.500 --> 00:04:14.023
So when we say I'm gonna grab this
namespace fs from this module,

61
00:04:14.023 --> 00:04:18.874
if you've ever used this fs module
which is one of nodes core modules,

62
00:04:18.874 --> 00:04:23.830
it's just a collection of functions
hanging off of this fs thing.

63
00:04:23.830 --> 00:04:28.447
There's like read file sync,
right file sync, read JSON,

64
00:04:28.447 --> 00:04:34.290
write JSON and the fs is just sort
of a way to hold them all together.

65
00:04:34.290 --> 00:04:36.860
And we can import it just like this.

66
00:04:36.860 --> 00:04:42.975
Or you could import using a named
imports like specific things from fs.

67
00:04:42.975 --> 00:04:48.340
Almost all common JS interrupt
can be handled in this way.

68
00:04:48.340 --> 00:04:52.745
But there's one case that
will really throw you for

69
00:04:52.745 --> 00:04:57.151
a loop if you encounter it and
that's the case where

70
00:04:57.151 --> 00:05:01.968
whatever the module is
exporting as its single export,

71
00:05:01.968 --> 00:05:06.190
it is not something that
looks like a namespace.

72
00:05:06.190 --> 00:05:10.067
So let's look at this case here,
where we have a function and

73
00:05:10.067 --> 00:05:15.100
effectively in our common JS code,
we would see something like this, right?

74
00:05:15.100 --> 00:05:18.480
module.exports equal In
this whole function.

75
00:05:18.480 --> 00:05:21.983
Now we can't represent
a function as a namespace, and

76
00:05:21.983 --> 00:05:26.950
by the way this is the equivalent code
in TypeScript to accomplish this here.

77
00:05:28.970 --> 00:05:33.590
So if we try to consume it in this way,
we're going to get an error message.

78
00:05:33.590 --> 00:05:38.042
And this says that if we wish
to use ACMA script, imports and

79
00:05:38.042 --> 00:05:45.210
exports with this module, we have to turn
a compiler flag on called esModuleInterop.

80
00:05:45.210 --> 00:05:47.760
And this error message
is telling the truth.

81
00:05:47.760 --> 00:05:49.884
But what it's not telling us,

82
00:05:49.884 --> 00:05:54.786
is that there's an alternate solution
to this problem and that is, for

83
00:05:54.786 --> 00:06:00.300
us to use an import that is not
aligned with the ACMA script standard.

84
00:06:00.300 --> 00:06:03.100
And this will save us from
having to turn this flag on.

85
00:06:04.310 --> 00:06:07.240
Why would I want to leave this flag off?

86
00:06:07.240 --> 00:06:10.950
Well, this is what I call a viral option.

87
00:06:12.060 --> 00:06:17.225
So viral options like es module and
allowsSyntheticDefaultImports,

88
00:06:17.225 --> 00:06:22.386
if those are necessary, if you have to
turn those on in order to make your

89
00:06:22.386 --> 00:06:28.350
types work, everyone who consumes your
types will also have to turn them on.

90
00:06:28.350 --> 00:06:31.408
So particularly when I'm
writing library code,

91
00:06:31.408 --> 00:06:36.280
I jumped through some serious hoops
to make sure that I leave these off.

92
00:06:36.280 --> 00:06:39.087
And that means that if you're
using one of my libraries,

93
00:06:39.087 --> 00:06:42.640
it's your decision whether you
want to enable these or not.

94
00:06:42.640 --> 00:06:47.240
I don't want to force that decision
on everyone who uses my code.

95
00:06:48.380 --> 00:06:52.560
So I call these viral options because
when one library enables them,

96
00:06:52.560 --> 00:06:55.540
anyone who consumes it
also has to turn it on.

97
00:06:55.540 --> 00:06:59.354
Thankfully, we have another
solution to this problem, right.

98
00:06:59.354 --> 00:07:01.770
And that's the non ECMO script import.

99
00:07:02.850 --> 00:07:05.220
Here is how it works.

100
00:07:05.220 --> 00:07:10.210
So we still have this code here remains
the same as when we last saw it.

101
00:07:10.210 --> 00:07:14.200
But here is the key thing, the key idea.

102
00:07:14.200 --> 00:07:19.380
This looks kind of like
a common JS Import.

103
00:07:19.380 --> 00:07:21.230
But one words different, right?

104
00:07:21.230 --> 00:07:26.707
We're used to saying seeing const
createbanana = require(" /fruits'),

105
00:07:26.707 --> 00:07:29.580
but we see import instead of const.

106
00:07:29.580 --> 00:07:32.910
This is what makes it kind
of a unique thing, right?

107
00:07:32.910 --> 00:07:38.842
It's the imports used to be this way
in very old versions of TypeScript,

108
00:07:38.842 --> 00:07:41.280
and you can still use them.

109
00:07:41.280 --> 00:07:45.250
And you can see the type information
still comes along for the ride here.

110
00:07:45.250 --> 00:07:50.669
So given that in this situation we have
to choose between a bunch of non ideal

111
00:07:50.669 --> 00:07:56.863
possibilities either forcing consumers of
our code to turn some compiler option on,

112
00:07:56.863 --> 00:08:02.023
or doing this, I would sooner do this
because I like the idea as a library

113
00:08:02.023 --> 00:08:07.097
author, I think it's part of my job
to like absorb some of that pain for

114
00:08:07.097 --> 00:08:09.940
downstream consumers of my code.

115
00:08:09.940 --> 00:08:14.830
So I will almost always do
something like this compared

116
00:08:14.830 --> 00:08:19.737
to forcing people to change
their compiler settings.

117
00:08:19.737 --> 00:08:23.975
If we look at what this code
compiles out to, thankfully,

118
00:08:23.975 --> 00:08:26.820
it's exactly what we would want.

119
00:08:26.820 --> 00:08:30.460
We can see module.exports = createbanana.

120
00:08:30.460 --> 00:08:34.970
And if we look up, that's what we
were trying to accomplish here.

121
00:08:36.880 --> 00:08:41.967
And here, we can see that this is
required, just the way we would hope

122
00:08:41.967 --> 00:08:47.689
to see common Jas code, if we have
written it in regular JavaScript, right.

123
00:08:47.689 --> 00:08:51.778
It's just consuming the entire
module as a single thing,

124
00:08:51.778 --> 00:08:56.540
invoking it directly because it's
a function, we're good to go.

125
00:08:58.890 --> 00:09:03.549
Just on the topic of making sure
your types don't require special

126
00:09:03.549 --> 00:09:08.378
compiler options, a quick reminder
that VS code will download type

127
00:09:08.378 --> 00:09:13.810
information in the background as
it sees users consuming a library.

128
00:09:13.810 --> 00:09:18.396
And there's a possibility that even
if they're not depending on your

129
00:09:18.396 --> 00:09:22.050
library's types like directly,
they'll start to see

130
00:09:22.050 --> 00:09:26.780
some autocomplete information
in their authoring environment.

131
00:09:26.780 --> 00:09:29.692
So it's important especially if
you're doing open source work,

132
00:09:29.692 --> 00:09:31.790
it's important to be good citizen.

133
00:09:31.790 --> 00:09:35.350
Make sure that if you publish types,
those types of work.

134
00:09:35.350 --> 00:09:41.011
And make sure that you don't spread
those viral options, and put that burden

135
00:09:41.011 --> 00:09:46.672
on your consumers cuz it may be a very
tricky thing for them to straighten out,

136
00:09:46.672 --> 00:09:52.680
if they start to see red squiggles under
their code cuz TypeScript is unhappy.

137
00:09:52.680 --> 00:09:58.740
Finally, I wanna talk about importing
things that are not JavaScript modules.

138
00:09:58.740 --> 00:10:02.572
So if anyone in the class uses web pack or
parcel or

139
00:10:02.572 --> 00:10:07.526
snow pack, anything like that,
the way these bundlers work,

140
00:10:07.526 --> 00:10:12.108
is your JavaScript modules
occasionally will point to non

141
00:10:12.108 --> 00:10:17.063
JavaScript things, that need to
sort of be packaged in the same

142
00:10:17.063 --> 00:10:22.020
layer of assets as their
respective JavaScript modules.

143
00:10:22.020 --> 00:10:27.449
So here let's imagine we have a react
component that needs an image file,

144
00:10:27.449 --> 00:10:31.120
well, you could import an image like this.

145
00:10:31.120 --> 00:10:35.040
Here's a link to the Webpack documentation
where I copied this line from.

146
00:10:35.040 --> 00:10:38.270
Now TypeScript is not happy
with this by default.

147
00:10:38.270 --> 00:10:42.870
It's saying,
I can't find a module named file.png, and

148
00:10:42.870 --> 00:10:48.023
that's because there is no
TypeScript module called file.png,

149
00:10:48.023 --> 00:10:50.520
not in this environment.

150
00:10:50.520 --> 00:10:56.041
So we need some way to tell TypeScript
that whenever we import a png file,

151
00:10:56.041 --> 00:11:01.201
it should be regarded as a JavaScript
module with a default export,

152
00:11:01.201 --> 00:11:03.030
that is of type string.

153
00:11:04.490 --> 00:11:09.128
This can be accomplished if you
create a file called global.d.ts, and

154
00:11:09.128 --> 00:11:13.600
you're gonna wanna create something
called a module declaration.

155
00:11:13.600 --> 00:11:18.502
So in plain language,
this could be taken to mean,

156
00:11:18.502 --> 00:11:23.632
I hereby state that a module exists and
the name of that

157
00:11:23.632 --> 00:11:29.240
module is some arbitrary
text followed by .png.

158
00:11:29.240 --> 00:11:37.140
And the default export of this module is
going to be a value whose type is string.

159
00:11:38.920 --> 00:11:43.668
As a result of having this little
piece of type information,

160
00:11:43.668 --> 00:11:48.507
elsewhere in your project,
you're gonna see that this exact

161
00:11:48.507 --> 00:11:53.717
same line that was failing before,
it's now not only error free,

162
00:11:53.717 --> 00:11:57.344
but we can see that
the value of this IMG thing,

163
00:11:57.344 --> 00:12:01.997
it is of type string,
which is great, that's ripe that's

164
00:12:01.997 --> 00:12:06.600
ready to put into an image tag
source equals this, right?

