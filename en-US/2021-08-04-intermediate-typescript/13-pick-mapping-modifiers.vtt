WEBVTT

1
00:00:00.170 --> 00:00:05.289
Well, we have arrived at another built-
in type that TypeScript includes,

2
00:00:05.289 --> 00:00:07.130
and that is Pick.

3
00:00:07.130 --> 00:00:12.565
So if we look at the built in pick up
here, and the pick properties that

4
00:00:12.565 --> 00:00:18.790
we made, they're basically the same
type parameter names aside.

5
00:00:18.790 --> 00:00:23.252
ValueType is going to be the T,
as you can see it here and

6
00:00:23.252 --> 00:00:29.558
you can see here,ValueType is here, and
here or also, there's a Keyof T and

7
00:00:29.558 --> 00:00:34.909
a Keyof ValueType, and
then here we're creating over the keys.

8
00:00:36.260 --> 00:00:38.030
So that's how pick works.

9
00:00:39.490 --> 00:00:45.220
It like where for record,
we just needed the map type.

10
00:00:47.410 --> 00:00:52.483
Here we're using this
indexed access type to grab

11
00:00:52.483 --> 00:00:58.570
something off of something else,
if that makes sense.

12
00:00:58.570 --> 00:01:01.220
We're using that square bracket notation.

13
00:01:01.220 --> 00:01:05.372
We're saying, here's document,
give me document, right?

14
00:01:05.372 --> 00:01:10.157
Record if we look at it one more time,
it was just a consistent thing we

15
00:01:10.157 --> 00:01:15.037
were always placing there, like,
it's always going to be the same.

16
00:01:15.037 --> 00:01:21.830
Whereas here we're kind of like
Were using a different key.

17
00:01:21.830 --> 00:01:25.890
And so as a result, what comes out like
these are obviously different types.

18
00:01:25.890 --> 00:01:28.530
Document, navigator, set timeout.

19
00:01:28.530 --> 00:01:32.750
That's what this index access type
gives us when used with a map type.

20
00:01:34.080 --> 00:01:36.190
Let's talk about mapping modifiers.

21
00:01:36.190 --> 00:01:40.677
These are just kind of something
potentially to memorize or

22
00:01:40.677 --> 00:01:46.840
just remember that it exists, but
not not an incredibly abstract concept.

23
00:01:46.840 --> 00:01:53.037
So, the way to think about this is,
as we loop over in our map type,

24
00:01:53.037 --> 00:01:58.573
as we loop over all the keys,
we have the option to determine

25
00:01:58.573 --> 00:02:04.750
whether the ValueType should
be read only or optional.

26
00:02:04.750 --> 00:02:07.570
There are two independent things.

27
00:02:07.570 --> 00:02:11.891
You can be read only and optional or
you can be non optional and

28
00:02:11.891 --> 00:02:15.860
writable like they're totally independent.

29
00:02:15.860 --> 00:02:19.528
So, you're gonna see that we
will find a question mark

30
00:02:19.528 --> 00:02:23.050
in some of these code example and
the word read only.

31
00:02:24.490 --> 00:02:27.020
So here, this is a built in type.

32
00:02:27.020 --> 00:02:30.480
We're going straight to the built in
types here because these are kind of less

33
00:02:30.480 --> 00:02:32.010
interesting to build up.

34
00:02:32.010 --> 00:02:33.170
But this is the key.

35
00:02:33.170 --> 00:02:38.180
This is the thing that makes
partial different from pick.

36
00:02:40.540 --> 00:02:42.600
While there are a couple things,
first off.

37
00:02:42.600 --> 00:02:46.390
Pick, lets see you specify
which keys you would like.

38
00:02:46.390 --> 00:02:51.772
Here, we're iterating over
all the keys in type T.

39
00:02:54.189 --> 00:02:59.878
And over here, we're saying
the value may or may not be there.

40
00:03:02.579 --> 00:03:05.400
So that's partial, and
this is the opposite of partial.

41
00:03:05.400 --> 00:03:09.080
The only thing that changes
is we have a minus sign.

42
00:03:09.080 --> 00:03:15.090
It's almost like we're removing
the optionalness as we loop over.

43
00:03:15.090 --> 00:03:17.988
This is a very weird thing like,
a rare thing to for

44
00:03:17.988 --> 00:03:19.789
you to put into your own types.

45
00:03:19.789 --> 00:03:21.670
But that's how this works, right?

46
00:03:21.670 --> 00:03:26.000
It's just that and then read only here.

47
00:03:27.540 --> 00:03:30.660
So this would,
it doesn't really freeze the object.

48
00:03:30.660 --> 00:03:35.120
Just remember that TypeScript disappears
as part of your build process.

49
00:03:35.120 --> 00:03:40.070
And so at runtime like this might
actually be a writable thing.

50
00:03:40.070 --> 00:03:42.790
But this would type check it.

51
00:03:42.790 --> 00:03:46.400
So create a version of
something that is read only.

52
00:03:46.400 --> 00:03:50.202
Maybe it's an options,
object that you're passing to function or

53
00:03:50.202 --> 00:03:53.010
some object you're passing in a function.

54
00:03:53.010 --> 00:03:55.690
You want to make sure
that you don't modify it,

55
00:03:55.690 --> 00:03:59.777
like mutate the thing that you were
passed, you might make it read only so

56
00:03:59.777 --> 00:04:02.720
that when you receive it,
you'll be called out.

57
00:04:02.720 --> 00:04:07.680
If you ever try to mess with something
that really should live in your stack,

58
00:04:07.680 --> 00:04:08.232
right?

59
00:04:08.232 --> 00:04:13.330
Now there's no built in type for
removal of read only you could

60
00:04:13.330 --> 00:04:18.341
implement it like this, but
is not necessarily a good idea.

61
00:04:18.341 --> 00:04:22.917
It's probably if someone made something
read only, might want to figure out what

62
00:04:22.917 --> 00:04:26.120
that reason is they probably
don't want it messed with.

63
00:04:27.140 --> 00:04:31.514
But just showing you that there
is continuity here in terms of

64
00:04:31.514 --> 00:04:36.510
question mark and read only they
both work with this minus sign.

65
00:04:36.510 --> 00:04:38.930
Just know that the positioning of these.

66
00:04:38.930 --> 00:04:44.559
So this is fairly easy to remember
because it's the same location of that

67
00:04:44.559 --> 00:04:51.038
question marked as optional class fields
or optional object literal properties.

68
00:04:51.038 --> 00:04:54.664
And read only that's always
to the left cuz it's kind

69
00:04:54.664 --> 00:04:59.499
of like where you would put an access
modifier keyword in a class field or

70
00:04:59.499 --> 00:05:02.900
a method it's like public
read only function,.

