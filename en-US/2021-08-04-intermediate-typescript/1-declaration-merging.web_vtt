WEBVTT

1
00:00:00.690 --> 00:00:04.970
The first topic we're going to
discuss today is declaration merging.

2
00:00:04.970 --> 00:00:08.118
And this is the phenomenon by which types,
and

3
00:00:08.118 --> 00:00:11.037
values can piggyback on top of each other.

4
00:00:11.037 --> 00:00:16.240
And they can be treated as a single
named entity in your source code.

5
00:00:16.240 --> 00:00:20.637
By the end of this chapter, you'll be able
to look at tooltips in Visual Studio code,

6
00:00:20.637 --> 00:00:24.130
which is the same tooltips
that we see on this website.

7
00:00:24.130 --> 00:00:27.620
And you'll be able to make sense
of exactly what's going on.

8
00:00:27.620 --> 00:00:29.190
Am I working with the type?

9
00:00:29.190 --> 00:00:30.860
Am I working with the value?

10
00:00:30.860 --> 00:00:32.460
How can I tell the difference?

11
00:00:32.460 --> 00:00:38.800
In this example, we have two what
I'm going to call identifiers.

12
00:00:38.800 --> 00:00:43.561
And what I mean by an identifier is
just a named thing that's defined in

13
00:00:43.561 --> 00:00:45.140
a single place.

14
00:00:45.140 --> 00:00:48.849
So we have one identifier called Fruit,
which is a type.

15
00:00:48.849 --> 00:00:50.782
We know that, because it's an interface.

16
00:00:50.782 --> 00:00:55.860
And here is an identifier called banana,
which is a value.

17
00:00:55.860 --> 00:01:01.390
TypeScript allows us to stack multiple
things onto a single identifier.

18
00:01:01.390 --> 00:01:05.839
In this situation, we can see that
we've named our interface, and

19
00:01:05.839 --> 00:01:08.740
our const variable the same thing, right?

20
00:01:08.740 --> 00:01:11.890
They both fruit both
with the capital letter.

21
00:01:11.890 --> 00:01:14.903
And we can see when we look at
the tooltip for the interface,

22
00:01:14.903 --> 00:01:16.980
it's clearly just an interface.

23
00:01:16.980 --> 00:01:21.560
When we look at our variable,
clearly it's just a concept declaration.

24
00:01:21.560 --> 00:01:26.110
But look at what happens when we attempt
to export this as if we were exposing it

25
00:01:26.110 --> 00:01:28.870
outside of this TypeScript module.

26
00:01:28.870 --> 00:01:33.727
We can see this tooltip contains both,
there's our const declaration,

27
00:01:33.727 --> 00:01:36.100
and there's our interface.

28
00:01:36.100 --> 00:01:42.371
These are actually two things stacking
on top of the same word, Fruit.

29
00:01:42.371 --> 00:01:47.481
There's actually a third thing that
we can stack onto this tooltip,

30
00:01:47.481 --> 00:01:51.368
so to speak unto this word,
and that is a namespace.

31
00:01:51.368 --> 00:01:56.558
So in this example, we can create a class
called Fruit with a static function on it.

32
00:01:56.558 --> 00:01:58.750
Now, we can create a namespace.

33
00:01:58.750 --> 00:02:03.636
And you can think of this as serving
a very similar purpose as static

34
00:02:03.636 --> 00:02:05.610
class functions.

35
00:02:05.610 --> 00:02:08.340
And then finally we have
a type called Fruit.

36
00:02:08.340 --> 00:02:12.690
So, if we hover over this export,
and look at the tooltip,

37
00:02:12.690 --> 00:02:17.220
now we have three things class,
interface, and namespace.

38
00:02:18.590 --> 00:02:21.151
So this is three things in one.

39
00:02:21.151 --> 00:02:25.681
Now you may be wondering when
I'm importing stuff from

40
00:02:25.681 --> 00:02:30.615
other dependencies,
how do I know what I'm working with?

41
00:02:30.615 --> 00:02:36.502
Well, I'm going to give you some
investigative tools that you can use.

42
00:02:36.502 --> 00:02:37.944
To probe around, and

43
00:02:37.944 --> 00:02:42.441
to figure out what exactly is on
one of these identifiers, right?

44
00:02:42.441 --> 00:02:47.268
If I'm given Fruit, how can I
test whether it's a class, sorry,

45
00:02:47.268 --> 00:02:52.801
how can I test whether it's a value,
or a type, or both, or maybe neither?

46
00:02:52.801 --> 00:02:57.160
So, here are our tools.

47
00:02:57.160 --> 00:03:02.440
First, let's begin by creating a value,
a type, and a namespace.

48
00:03:02.440 --> 00:03:07.096
And we've given them obvious names, so
that when I put them up the screen here,

49
00:03:07.096 --> 00:03:10.030
you can remember what's going on, right?

50
00:03:10.030 --> 00:03:12.060
So we've clearly got a value here.

51
00:03:12.060 --> 00:03:16.240
We've clearly got a type,
which is just an empty interface.

52
00:03:16.240 --> 00:03:17.970
And then here we have a namespace.

53
00:03:19.930 --> 00:03:25.617
So you know something is a value if in
a let or const declaration like this,

54
00:03:25.617 --> 00:03:31.610
you can put it on the right-hand side of
the equal sign, and you get no error.

55
00:03:33.270 --> 00:03:38.245
If we try to do the same thing with
the type, like we're doing down here,

56
00:03:38.245 --> 00:03:42.060
you can see that the compiler
is not happy with us.

57
00:03:42.060 --> 00:03:45.944
And it's telling us is a type
only refers to a type, but

58
00:03:45.944 --> 00:03:48.690
we're trying to use it as a value.

59
00:03:48.690 --> 00:03:53.336
So this alerts us to the fact
that this is purely a type,

60
00:03:53.336 --> 00:03:56.980
there is no value part to this identifier.

61
00:03:58.480 --> 00:04:01.529
Let's look at a similar test but
four types.

62
00:04:01.529 --> 00:04:07.487
So if we try to put this on the left-hand
side of this assignment operator,

63
00:04:07.487 --> 00:04:09.103
and we get no error.

64
00:04:09.103 --> 00:04:14.600
That's an indication that this
identifier can be treated as a type.

65
00:04:14.600 --> 00:04:18.582
And look what happens down here, if we
try to do the same thing with a value,

66
00:04:18.582 --> 00:04:19.920
we get an error message.

67
00:04:20.970 --> 00:04:23.977
The thing we're using,
it refers to a value, but

68
00:04:23.977 --> 00:04:26.280
we're trying to use it as a type here.

69
00:04:27.280 --> 00:04:31.798
So that failure tells us
there's no type piece to

70
00:04:31.798 --> 00:04:37.370
whatever is on this thing,
which is purely a value.

71
00:04:37.370 --> 00:04:40.989
Now, there's no equivalent test for
namespaces,

72
00:04:40.989 --> 00:04:45.860
although the tooltips make it
fairly obvious what's going on.

73
00:04:45.860 --> 00:04:51.110
So you see the word namespace on the left
of the tooltip, that is a clear indicator.

74
00:04:51.110 --> 00:04:54.677
So you'd have to hover over it in
order to figure out what exactly

75
00:04:54.677 --> 00:04:55.875
is happening there.

76
00:04:55.875 --> 00:04:59.312
While we're talking about namespace,
some of you may be wondering,

77
00:04:59.312 --> 00:05:01.540
what's the point of these things?

78
00:05:01.540 --> 00:05:03.924
And maybe you haven't seen them before,
and

79
00:05:03.924 --> 00:05:07.530
you're wondering why they're
even part of TypeScript?

80
00:05:07.530 --> 00:05:11.590
Well, an important aspect
of TypeScript is it needs

81
00:05:11.590 --> 00:05:16.880
to be able to describe
existing JavaScript libraries.

82
00:05:16.880 --> 00:05:20.038
Just think about when
TypeScript was first made, and

83
00:05:20.038 --> 00:05:22.430
when they were trying to gain adoption.

84
00:05:23.510 --> 00:05:28.052
They needed to be able to say,
here's type information that matches this

85
00:05:28.052 --> 00:05:31.879
existing library,
which is written in regular JavaScript.

86
00:05:31.879 --> 00:05:35.256
So they needed to be able
to type things like jQuery.

87
00:05:35.256 --> 00:05:38.030
And if we go to the jQuery homepage here,

88
00:05:38.030 --> 00:05:42.280
we can see some example usage
right on the front page.

89
00:05:42.280 --> 00:05:44.481
So if we look down we can see, all right?

90
00:05:44.481 --> 00:05:48.650
Sometimes we're invoking this
dollar sign thing as a function.

91
00:05:48.650 --> 00:05:54.110
And then down here, it appears that we're
grabbing things off of the dollar sign,

92
00:05:54.110 --> 00:05:56.539
and they themselves are functions.

93
00:05:56.539 --> 00:06:00.698
So let's copy that code over, right?

94
00:06:00.698 --> 00:06:05.060
So this is basically the same code,
it represents the same code.

95
00:06:05.060 --> 00:06:10.033
And we need to be able to describe
types that can allow us to do

96
00:06:10.033 --> 00:06:12.030
these kinds of things.

97
00:06:13.510 --> 00:06:15.850
Here's how we might accomplish that.

98
00:06:15.850 --> 00:06:20.210
You can see here we're defining
a function whose name is dollar sign.

99
00:06:20.210 --> 00:06:28.330
And we pass a selector in this could be
up here, like h1 tags with a class title.

100
00:06:28.330 --> 00:06:33.690
And we're going to get all matching
elements in a node list, as return value.

101
00:06:33.690 --> 00:06:39.485
In addition to that, to support this use
case here, with .ajax, we need dollar

102
00:06:39.485 --> 00:06:45.720
sign to be a namespace that kind of stacks
on top of that function of the same name.

103
00:06:45.720 --> 00:06:49.930
And that's what's allowing us
up here to invoke this directly.

104
00:06:49.930 --> 00:06:54.930
And to use some of these functions
that are sort of dangling

105
00:06:54.930 --> 00:06:57.590
off of the main function here.

106
00:06:58.910 --> 00:07:01.775
That's where namespaces are useful.

107
00:07:01.775 --> 00:07:05.872
Now, writing a library in this way.

108
00:07:05.872 --> 00:07:11.066
It's sort of leftover from the old way
of consuming JavaScript dependencies,

109
00:07:11.066 --> 00:07:14.260
where you'd add a script tag to your app.

110
00:07:14.260 --> 00:07:18.625
And you would find that when all
of your scripts have loaded,

111
00:07:18.625 --> 00:07:23.333
there's this global variable that
has been tacked on to window or

112
00:07:23.333 --> 00:07:26.290
something, dollar sign, right?

113
00:07:26.290 --> 00:07:27.819
And you could grab that, and

114
00:07:27.819 --> 00:07:32.770
basically access all of the capabilities
of a library through that global variable.

115
00:07:32.770 --> 00:07:36.996
We don't really write things that
way in modern JavaScript code bases.

116
00:07:36.996 --> 00:07:39.532
Now that we have modules, and

117
00:07:39.532 --> 00:07:44.304
better ability to consume
third party code in that way.

118
00:07:44.304 --> 00:07:46.850
But we still need to be
able to describe types for

119
00:07:46.850 --> 00:07:49.630
some of that old stuff
that's lying around.

120
00:07:49.630 --> 00:07:53.331
So my advice is don't
use namespaces too much.

121
00:07:53.331 --> 00:07:54.713
Don't focus on them too much.

122
00:07:54.713 --> 00:07:58.714
Cuz they're really about
backwards compatibility, and

123
00:07:58.714 --> 00:08:03.400
not something that you often find
is added to modern code bases.

124
00:08:03.400 --> 00:08:09.827
So now that we have a basic
understanding of declaration merging,

125
00:08:09.827 --> 00:08:12.924
and how we can sort of sandwich or

126
00:08:12.924 --> 00:08:18.110
stack multiple things on
a single named identifier.

127
00:08:19.700 --> 00:08:22.450
I want us to take a look back
at the way classes work.

128
00:08:22.450 --> 00:08:27.380
So let's say that we have a class,
like what you see on the screen now.

129
00:08:27.380 --> 00:08:33.810
It has three fields, each of which
is optional, name, mass, and color.

130
00:08:33.810 --> 00:08:36.390
And then, it has a static functions.

131
00:08:36.390 --> 00:08:42.510
So, you could think of this, as a kind
of a backup constructor of some sort.

132
00:08:42.510 --> 00:08:46.561
Sometimes you find that that's
a good way to use static functions,

133
00:08:46.561 --> 00:08:48.490
a good use case for them rather.

134
00:08:50.390 --> 00:08:55.367
So if this is our class, let's apply
the tests that we just discussed, and

135
00:08:55.367 --> 00:08:59.920
identify whether this is a value,
or whether this is a type.

136
00:08:59.920 --> 00:09:02.064
So first we can test for value.

137
00:09:02.064 --> 00:09:05.653
And our test is to put it on
the right-hand side of the assignment

138
00:09:05.653 --> 00:09:08.657
operator, and see if we get an error,
and we don't.

139
00:09:08.657 --> 00:09:11.520
That means Fruit is a value.

140
00:09:11.520 --> 00:09:13.767
And when we take a look at this value.

141
00:09:13.767 --> 00:09:17.525
We can see that there's this
createbanana thing, but

142
00:09:17.525 --> 00:09:20.390
note that we do not see
color in this list.

143
00:09:21.470 --> 00:09:27.619
The reason is the value here is the class
itself, not an instance of Fruit,

144
00:09:27.619 --> 00:09:32.140
it's the the factory or
the constructor, right?

145
00:09:32.140 --> 00:09:33.832
We're seeing createbanana.

146
00:09:33.832 --> 00:09:35.160
We're seeing call,

147
00:09:35.160 --> 00:09:40.340
which indicates that this is kind of
a function like classes or functions.

148
00:09:40.340 --> 00:09:46.200
So we would call this
the static side of the class.

149
00:09:46.200 --> 00:09:49.478
Now, if we take that
exact same identifier,

150
00:09:49.478 --> 00:09:53.550
and we test whether it's a type,
the test is positive.

151
00:09:54.670 --> 00:09:58.960
The Fruit identifier is also a type.

152
00:09:58.960 --> 00:10:02.470
And when we look at the available
completions here for

153
00:10:02.470 --> 00:10:07.630
the letter c, we can see that color
is the only thing that's showing up.

154
00:10:07.630 --> 00:10:10.536
That's because when used as a type,

155
00:10:10.536 --> 00:10:16.320
this class is an interface that
describes an instance of the class.

156
00:10:16.320 --> 00:10:22.693
So if you've been using classes, all
along, now you know that they are a value,

157
00:10:22.693 --> 00:10:27.450
and a type of the same name
stacked on top of each other.

158
00:10:27.450 --> 00:10:30.239
And depending on the context
in which you use it,

159
00:10:30.239 --> 00:10:35.220
whether it's in the value position over
here, or the type position over here.

160
00:10:35.220 --> 00:10:38.830
You're using one piece of it,
or the other.

161
00:10:38.830 --> 00:10:41.780
So you've been making use of
declaration merging, all along.

