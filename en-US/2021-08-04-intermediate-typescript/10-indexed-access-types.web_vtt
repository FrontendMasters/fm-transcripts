WEBVTT

1
00:00:00.000 --> 00:00:04.044
Let's talk about Indexed Access Types.

2
00:00:04.044 --> 00:00:09.219
The concept here is we're
going to grab a piece of type

3
00:00:09.219 --> 00:00:16.926
information from another type using
something that feels like a property key.

4
00:00:16.926 --> 00:00:22.651
So let's imagine we have
an interface called Car,

5
00:00:22.651 --> 00:00:28.519
we can grab just the type
of the color property here.

6
00:00:28.519 --> 00:00:34.276
Using, it kind of looks like
the square bracket access notation for

7
00:00:34.276 --> 00:00:40.551
taking something off of a dictionary or
accessing an element of an array.

8
00:00:40.551 --> 00:00:45.765
Note that although when working with
values using the square brackets,

9
00:00:45.765 --> 00:00:48.933
we know that we can use .notation, right?

10
00:00:48.933 --> 00:00:53.125
So if we have a dictionary, and
we saw this we probably say,

11
00:00:53.125 --> 00:00:56.322
well why don't you just
doing like car.color?

12
00:00:56.322 --> 00:01:00.922
That will not work here,
this must be using square brackets.

13
00:01:00.922 --> 00:01:06.586
And you have to pass a string
literal type into it.

14
00:01:06.586 --> 00:01:13.079
So there is some enforcement
of a constraint here,

15
00:01:13.079 --> 00:01:17.312
so color is present on key of car.

16
00:01:17.312 --> 00:01:20.852
But look what happens if we use
something that's not on car.

17
00:01:20.852 --> 00:01:22.143
So you'll get an error message.

18
00:01:22.143 --> 00:01:26.617
There is some validations
helps catch spelling errors or

19
00:01:26.617 --> 00:01:31.647
if you were to remove something
from car you think it's unused,

20
00:01:31.647 --> 00:01:37.353
then have confidence that all of these
index access types will light up.

21
00:01:37.353 --> 00:01:40.244
And of course you can repeat this pattern,
right?

22
00:01:40.244 --> 00:01:45.929
So if we only wanted to have
the red part of car color,

23
00:01:45.929 --> 00:01:52.921
we could say give me color, and
then within that just grab read.

24
00:01:52.921 --> 00:01:57.238
And so you could see these boxes, these
square brackets applied over and over.

25
00:01:57.238 --> 00:02:03.136
Interestingly, if we
pass a union type through

26
00:02:03.136 --> 00:02:09.481
this indexed access type,
we get a union type out.

27
00:02:09.481 --> 00:02:16.442
So year is a number, color is red,
green, and blue on an object.

28
00:02:16.442 --> 00:02:21.093
So you can see here it's,
I call this projecting, right,

29
00:02:21.093 --> 00:02:27.251
you can almost sort of send your union
type of keys into this index access type.

30
00:02:27.251 --> 00:02:35.053
And you get arguing union type of types of
the values instead of types of the keys.

31
00:02:35.053 --> 00:02:41.399
Pretty straightforward concept, it's
just sort of accessing a piece by name.

32
00:02:41.399 --> 00:02:45.304
And I know I use similar language
to describe, extract, and exclude.

33
00:02:45.304 --> 00:02:49.647
Hopefully you can see
the difference between what we're

34
00:02:49.647 --> 00:02:54.544
looking at here which is grabbing
a chunk of an object type as is.

35
00:02:54.544 --> 00:02:58.461
As opposed to the conditional
type with the infer keyword,

36
00:02:58.461 --> 00:03:01.203
where we were grabbing the constructor or

37
00:03:01.203 --> 00:03:06.240
looking at the construct signature,
plugging up the argument out of that.

38
00:03:06.240 --> 00:03:09.916
That's a much more heavy handed way
to do things behind the scenes it's

39
00:03:09.916 --> 00:03:12.379
also much more expensive
to do things that way.

40
00:03:12.379 --> 00:03:15.573
This is cheap, this will not
really affect your performance.

41
00:03:17.785 --> 00:03:21.675
Okay, last big concept and it's a big one,

42
00:03:21.675 --> 00:03:27.159
this is like a triple size section here,
it's mapped types.

43
00:03:27.159 --> 00:03:28.920
So let's take a look at that.

