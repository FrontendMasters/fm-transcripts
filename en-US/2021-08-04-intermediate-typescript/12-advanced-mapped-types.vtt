WEBVTT

1
00:00:00.265 --> 00:00:05.534
Now let's combine this knowledge
with what we just covered in

2
00:00:05.534 --> 00:00:10.617
the previous chapter, and
that is an indexed access type.

3
00:00:10.617 --> 00:00:14.928
So what I've done here,
and I apologize that

4
00:00:14.928 --> 00:00:19.692
the tooltip is kind of adding
a big gap in the code,

5
00:00:19.692 --> 00:00:23.447
but this is just one type here, right?

6
00:00:23.447 --> 00:00:29.983
What we're doing here is we wanna
grab a portion of the window

7
00:00:29.983 --> 00:00:35.632
API as in the global that's
available in a browser.

8
00:00:38.383 --> 00:00:39.859
And when do I do this?

9
00:00:39.859 --> 00:00:43.298
Well, especially if I'm writing code and

10
00:00:43.298 --> 00:00:48.934
I expect to make my tests nice and
easy through dependency injection,

11
00:00:48.934 --> 00:00:54.775
I kinda want to limit myself to
accessing only certain things on Window.

12
00:00:54.775 --> 00:00:58.801
So that I make sure that if I
have to stub them in tests, or

13
00:00:58.801 --> 00:01:03.772
maybe if this is a single page app
that I have to server render, well,

14
00:01:03.772 --> 00:01:08.145
there in the node world I might
have to stub like polyfill some

15
00:01:08.145 --> 00:01:12.134
Windowish things so
that the thing renders properly.

16
00:01:12.134 --> 00:01:17.549
But I wanna give myself sort
of a explicit boundary so

17
00:01:17.549 --> 00:01:20.388
I know whenever I cross it.

18
00:01:22.579 --> 00:01:29.135
I can show you after we go through this
a more real world example involving

19
00:01:29.135 --> 00:01:34.199
Chrome extensions and
their Chrome extension API's.

20
00:01:34.199 --> 00:01:36.106
So great.

21
00:01:36.106 --> 00:01:39.187
So we have,
we gonna call this part of Window and

22
00:01:39.187 --> 00:01:43.886
what we want is to grab only, we want
something that looks like Window but

23
00:01:43.886 --> 00:01:46.836
it only has a couple
things that can be found.

24
00:01:46.836 --> 00:01:52.657
So we're saying we're looping
over these three things.

25
00:01:52.657 --> 00:01:57.181
So it's sort of almost like
four each of these three,

26
00:01:57.181 --> 00:02:00.708
key is gonna be these
sort of one at a time.

27
00:02:00.708 --> 00:02:03.304
And now we're using an indexed
access type, right?

28
00:02:03.304 --> 00:02:05.945
So key is first gonna be document.

29
00:02:05.945 --> 00:02:11.734
So we're using Window[document], and
we're gonna get this document type.

30
00:02:11.734 --> 00:02:15.427
And then the same thing for navigator,
and then the same thing for

31
00:02:15.427 --> 00:02:16.713
set timeout, right?

32
00:02:16.713 --> 00:02:19.931
Here's the callback, and
then here's the timeout number, and

33
00:02:19.931 --> 00:02:23.104
then here are the the arguments
that are passed to the function.

34
00:02:23.104 --> 00:02:27.243
People, this is a rarely
used aspect of set timeout.

35
00:02:27.243 --> 00:02:31.880
But ultimately,
we get a subset of Windows,

36
00:02:31.880 --> 00:02:38.722
we get a portion of it,
only these keys that we're interested in.

37
00:02:42.722 --> 00:02:47.284
So again we're gonna make this
a little bit more generalized by

38
00:02:47.284 --> 00:02:50.824
pulling hard coded things
out into typeparams.

39
00:02:50.824 --> 00:02:55.853
So the first thing we'll pull out is,
we wanna pull out the keys, right?

40
00:02:55.853 --> 00:02:59.059
So that's this list of things here.

41
00:02:59.059 --> 00:03:05.297
So now we've got like Key in Keys,
and that's a typeparam up here.

42
00:03:05.297 --> 00:03:09.696
And note that we're saying,
Keys extends Key of window.

43
00:03:09.696 --> 00:03:13.695
Why do I want this, well pop out to
the playground just so we can see it for

44
00:03:13.695 --> 00:03:14.436
ourselves.

45
00:03:14.436 --> 00:03:16.745
What if I did this?

46
00:03:16.745 --> 00:03:22.226
I would wanna be told, sorry, it's a pipe.

47
00:03:22.226 --> 00:03:28.025
I would wanna be told that zzz it's not
a thing that could be found on Window,

48
00:03:28.025 --> 00:03:36.300
it's not found on Key of Window, Right?

49
00:03:36.300 --> 00:03:38.040
A deliberate spelling error.

50
00:03:38.040 --> 00:03:40.105
If I took this away.

51
00:03:43.372 --> 00:03:45.977
Well the error would pop
up in a different place.

52
00:03:45.977 --> 00:03:50.360
But now I'm being told hey, hey, hey,
you can't just use Key as an index access

53
00:03:50.360 --> 00:03:54.124
type here, how do I know that that
stuff's gonna be found on Window?

54
00:03:56.079 --> 00:04:01.393
You could say hey it's a string,
but so the first error is Keys,

55
00:04:01.393 --> 00:04:07.812
it could be a promise it could be
a function, there's no constraint on Keys.

56
00:04:07.812 --> 00:04:12.384
I can't use that in a match type cuz can
only use things that are like property

57
00:04:12.384 --> 00:04:13.325
keys, right?

58
00:04:13.325 --> 00:04:15.923
This is a core constraint of map types.

59
00:04:15.923 --> 00:04:18.394
It's about a property Key and
looping over them.

60
00:04:18.394 --> 00:04:24.105
So even if I solve that by saying,
It's a string,

61
00:04:24.105 --> 00:04:27.171
now this piece is gonna say, well,

62
00:04:27.171 --> 00:04:32.499
how do I know that these are things
that I can get off of Window.

63
00:04:32.499 --> 00:04:34.533
It could be an arbitrary string.

64
00:04:34.533 --> 00:04:38.562
So that's why we have this in place
just kinda makes everything work.

65
00:04:38.562 --> 00:04:42.928
It's not only a valid property key but
it's the subset of all

66
00:04:42.928 --> 00:04:47.819
allowable property keys in JavaScript
that will work with Window.

67
00:04:47.819 --> 00:04:51.195
And now, theme coming back, right?

68
00:04:51.195 --> 00:04:56.164
The error is popping up at the location
where I apply my fix because I

69
00:04:56.164 --> 00:05:00.175
have misspelled this, and
now things start to pass.

70
00:05:00.175 --> 00:05:04.752
So that's why you can see
kinda how if we relax this,

71
00:05:04.752 --> 00:05:09.136
things will start to get
angry in various places.

72
00:05:09.136 --> 00:05:12.336
This has to be a valid property key and

73
00:05:12.336 --> 00:05:16.680
hen this has to be a valid
property key for Window.

74
00:05:24.230 --> 00:05:26.590
But we can get the same result out now,
right?

75
00:05:26.590 --> 00:05:31.449
So we had part of Window, this was
hard coded for these three properties.

76
00:05:31.449 --> 00:05:34.991
So we made something here
called PickWindowProperties,

77
00:05:34.991 --> 00:05:39.192
that's the more generalized thing,
and then we can leverage that.

78
00:05:39.192 --> 00:05:41.554
So this is the general solution up here.

79
00:05:41.554 --> 00:05:46.979
We can get our specific solution back by
saying, I wanna pick things off of Window,

80
00:05:46.979 --> 00:05:50.870
and here are the names of
the properties that I wish to pick.

81
00:05:53.059 --> 00:05:57.497
Let's generalize it one step
further by abstracting Window away.

82
00:05:57.497 --> 00:06:01.652
So we're gonna get rid of this and
pull it out to a typeparam.

83
00:06:03.559 --> 00:06:08.271
So what we've done here, instead of
calling it pickWindowProperties,

84
00:06:08.271 --> 00:06:10.933
we're just calling it PickProperties.

85
00:06:10.933 --> 00:06:13.831
And just as before we have
these Keys that come in,

86
00:06:13.831 --> 00:06:18.816
I've actually moved it to the second type
parameter, up here was the first, right?

87
00:06:18.816 --> 00:06:23.419
I mean, it was the only one but
it's in the second position now.

88
00:06:23.419 --> 00:06:27.108
So we have a valueType and
then we have Keys,

89
00:06:27.108 --> 00:06:31.717
where these are Keys that
are found on this valueType.

90
00:06:31.717 --> 00:06:33.474
And I'm using this map type here.

91
00:06:33.474 --> 00:06:37.710
So previously we were seeing
what Window[Key], and

92
00:06:37.710 --> 00:06:40.757
now we're seeing ValueType[Key].

93
00:06:42.729 --> 00:06:47.409
And we're still able to get
our specific result here.

94
00:06:47.409 --> 00:06:53.053
Because we're parsing in Window, this
is the thing we're plucking properties

95
00:06:53.053 --> 00:06:58.365
off of, and these are the names of
the things that we're kinda peeling off.

96
00:06:58.365 --> 00:06:59.839
Let's open this in the playground.

97
00:07:05.106 --> 00:07:11.586
So I don't wanna talk about why I
ordered these typeparams in this way.

98
00:07:11.586 --> 00:07:13.817
If I tried to reverse them,

99
00:07:15.757 --> 00:07:20.080
I might run into a problem,
actually does this work now?

100
00:07:20.080 --> 00:07:21.355
That would be pretty cool.

101
00:07:23.323 --> 00:07:24.567
Wow they fixed this.

102
00:07:24.567 --> 00:07:28.860
All right, well, you'll still see
stuff written the other way and

103
00:07:28.860 --> 00:07:31.731
I can kinda explain
the rationale behind it.

104
00:07:34.477 --> 00:07:39.014
Just poking at it making sure,
something's not right here.

105
00:07:39.014 --> 00:07:41.957
Let's see, I need the comma and
then I think it'll work.

106
00:07:41.957 --> 00:07:46.705
Yep, okay, so
it seems like this has been relaxed.

107
00:07:46.705 --> 00:07:52.279
But previously,
you kinda had to state upfront.

108
00:07:52.279 --> 00:07:56.260
If I wanted to use
ValueType in an argument,

109
00:07:56.260 --> 00:08:01.533
we first had to state the typeparam
has to exist first, and

110
00:08:01.533 --> 00:08:07.144
then we can refer to it as
a constraint for another typeparam.

111
00:08:07.144 --> 00:08:11.337
But it appears that recently they've
relaxed this, which is kind of cool.

112
00:08:11.337 --> 00:08:16.690
That would let us build this API signature
the way that we want, and in this case,

113
00:08:16.690 --> 00:08:21.992
just in terms of how you could read this
out loud, I kinda like like this better.

114
00:08:21.992 --> 00:08:25.484
So I want to pick the properties document,

115
00:08:25.484 --> 00:08:30.048
navigators, setTimeout,
setInterval from Window.

116
00:08:30.048 --> 00:08:34.718
And I like that rather than saying I want
to pick the following things from Window,

117
00:08:34.718 --> 00:08:36.828
here are the properties that I want.

118
00:08:36.828 --> 00:08:38.828
You have both options
available to you now.

119
00:08:45.207 --> 00:08:48.150
All right, Tristin asks a good question,

120
00:08:48.150 --> 00:08:52.413
in fact you've asked it twice and
you've been very patient.

121
00:08:52.413 --> 00:08:58.003
So mapped types do they extend from
dictionary, and since mapped types

122
00:08:58.003 --> 00:09:03.418
are a subset of a dictionary that
extends word is still strange to me.

123
00:09:03.418 --> 00:09:11.037
So I would encourage you to think
about this in terms of set theory.

124
00:09:11.037 --> 00:09:18.989
So if you imagine all of the dictionaries
that could be in the universe.

125
00:09:22.183 --> 00:09:24.917
So things like this, right?

126
00:09:24.917 --> 00:09:28.665
All of these with all
the possible property keys and

127
00:09:28.665 --> 00:09:30.938
all the possible ValueTypes.

128
00:09:30.938 --> 00:09:37.566
Some of them, [LAUGH] Some of
them will be full of stuff,

129
00:09:37.566 --> 00:09:41.640
some of them will only have
a couple property Keys.

130
00:09:41.640 --> 00:09:46.879
When we talk about something that
is more constrained than this,

131
00:09:46.879 --> 00:09:52.130
more specific than this,
we would say that it extends from this.

132
00:09:52.130 --> 00:09:58.843
So when we talk about mapped types kind of
extend from their dictionary equivalents,

133
00:09:58.843 --> 00:10:07.395
you can think of it as, Dictionaries
are more flexible than mapped types.

134
00:10:09.208 --> 00:10:15.008
So if I had, Or

135
00:10:15.008 --> 00:10:19.271
well, say this is a dictionary,

136
00:10:21.856 --> 00:10:27.634
Of dates, So it starts at empty.

137
00:10:29.156 --> 00:10:36.201
And then this will be, A index signature.

138
00:10:52.801 --> 00:10:55.938
And this is gonna require
that I do a new date.

139
00:10:59.190 --> 00:11:02.243
Start of week is a new date.

140
00:11:02.243 --> 00:11:04.657
And I'll get rid of this
little side panel here.

141
00:11:04.657 --> 00:11:08.672
Okay, so just looking at this code here,

142
00:11:08.672 --> 00:11:13.722
I would say that this
dictionary is more flexible and

143
00:11:13.722 --> 00:11:17.647
more general than this type here, why?

144
00:11:17.647 --> 00:11:23.026
This has no opinion about which
Keys dates are stored under.

145
00:11:23.026 --> 00:11:25.396
This one does have an opinion.

146
00:11:25.396 --> 00:11:27.959
So if I change these to let declarations,

147
00:11:34.487 --> 00:11:36.249
This is gonna be a problem.

148
00:11:36.249 --> 00:11:41.380
Because we can't, when we say I have
a slot that's designed for a record,

149
00:11:41.380 --> 00:11:46.036
what guarantee do we have that end
of week and start of week are here?

150
00:11:46.036 --> 00:11:47.647
We don't have that guarantee.

151
00:11:47.647 --> 00:11:51.000
Whereas in the other direction,

152
00:11:52.624 --> 00:11:56.187
Totally fine, why?

153
00:11:56.187 --> 00:12:00.423
The dictionary is ready to handle
start of week, end of week,

154
00:12:00.423 --> 00:12:03.775
start of year, end of year,
whatever you want.

155
00:12:03.775 --> 00:12:08.647
So that's,
we see a Key insight here that records,

156
00:12:08.647 --> 00:12:13.647
these records are more
specific than dictionaries.

157
00:12:13.647 --> 00:12:21.301
And when we talk about this extends word
that's used in type parameter constraints,

158
00:12:21.301 --> 00:12:25.235
and in these conditional type conditions,

159
00:12:25.235 --> 00:12:33.376
the meaning of extends is,
Something like this.

160
00:12:33.376 --> 00:12:41.596
We're saying is T, are all values
that we could possibly have for

161
00:12:41.596 --> 00:12:48.334
T, to all of those satisfy
what is described by date.

162
00:12:48.334 --> 00:12:52.438
And date could have many others
that don't satisfy T, but

163
00:12:52.438 --> 00:12:56.226
does everything in the set
that could be a possible T?

164
00:12:56.226 --> 00:12:58.374
Does all of that fit into date?

165
00:12:58.374 --> 00:13:04.624
So really we're saying,
is T a specialized flavor of date?

166
00:13:04.624 --> 00:13:07.875
Is it a more specific version of date?

167
00:13:07.875 --> 00:13:12.239
It's a really tricky conceptual thing to
get over, so I would encourage you if

168
00:13:12.239 --> 00:13:16.150
you're still having trouble with this,
please ask more questions.

169
00:13:16.150 --> 00:13:21.852
Please keep kind of poking at this because
it's one of these big lightbulbs that

170
00:13:21.852 --> 00:13:27.999
when it turns on, things become much more
clear pretty broadly across the language.

171
00:13:27.999 --> 00:13:31.374
So now that we've generalized
this let's look at what we have.

172
00:13:31.374 --> 00:13:35.475
We have a mapped type where we
take two typeparams here, right?

173
00:13:35.475 --> 00:13:42.778
So we take a value that we're plucking
things off of this previously was Window.

174
00:13:42.778 --> 00:13:48.590
And then we have some
union type potentially,

175
00:13:48.590 --> 00:13:55.749
that is one or more Keys that
are found on this ValueType.

176
00:13:55.749 --> 00:14:00.429
And we're iterating over those Keys,
and we're plucking the values off and

177
00:14:00.429 --> 00:14:01.655
this is what we get.

