WEBVTT

1
00:00:00.197 --> 00:00:01.912
Template literal types.

2
00:00:04.270 --> 00:00:10.985
Not deserving enough of its own section I
don't think, but a kind of a cool thing.

3
00:00:10.985 --> 00:00:14.509
It's a recent addition to TypeScript.

4
00:00:14.509 --> 00:00:21.356
So as of the time of filming this course
4.3 is the most recent TypeScript release.

5
00:00:21.356 --> 00:00:26.363
So template literal types have not
been around for all that long.

6
00:00:26.363 --> 00:00:31.349
But I would like to show them
to you because especially around

7
00:00:31.349 --> 00:00:35.868
data layer stuff they are really,
really promising.

8
00:00:35.868 --> 00:00:41.433
They look like a great way to
make highly reusable things.

9
00:00:41.433 --> 00:00:45.516
So we're going to
experiment with them here.

10
00:00:45.516 --> 00:00:49.569
I have first,
a type that I'm calling ArtFeatures,

11
00:00:49.569 --> 00:00:54.445
things that could appear in a painting,
and then I have colors.

12
00:00:56.933 --> 00:01:00.878
So using the same syntax that
you're used to using for

13
00:01:00.878 --> 00:01:05.876
ES template literals, by that I
mean the backtick strings where you

14
00:01:05.876 --> 00:01:10.450
can interpolate non-string
values into a template string.

15
00:01:10.450 --> 00:01:16.152
We can create what's called
a template literal type.

16
00:01:16.152 --> 00:01:20.428
And what we're seeing here, so
first, let's look at the syntax.

17
00:01:20.428 --> 00:01:22.240
We've got the backticks here.

18
00:01:22.240 --> 00:01:27.210
We have the dollar sign single brace,
we're used to seeing that, right?

19
00:01:27.210 --> 00:01:32.321
And what we get,
it's sort of every combination

20
00:01:32.321 --> 00:01:36.194
of color and paintable art feature.

21
00:01:36.194 --> 00:01:40.973
So we've got a darkSienna_cabin,
darkSienna_tree, darkSienna_sunset, and

22
00:01:40.973 --> 00:01:43.176
now we're going to sapGreen_cabin.

23
00:01:43.176 --> 00:01:45.421
And it keeps going and going and going.

24
00:01:45.421 --> 00:01:49.236
When I showed this to my wife,
she said that looks like a factorial.

25
00:01:49.236 --> 00:01:57.828
That will tell you how many of
these you're going to get, right?

26
00:01:57.828 --> 00:02:03.046
It's every possible combination,
how many unique combinations you'll get.

27
00:02:03.046 --> 00:02:06.663
But these are not good,
in terms of, sorry,

28
00:02:06.663 --> 00:02:11.440
these are not idiomatic
JavaScript method names, right?

29
00:02:11.440 --> 00:02:15.226
I'm calling this art method names and
look at those types,

30
00:02:15.226 --> 00:02:17.430
we don't use snake case, right?

31
00:02:17.430 --> 00:02:22.379
Not in JavaScript,
I mean you totally could.

32
00:02:22.379 --> 00:02:26.417
The language supports it, but it's much
more conventional to use camelCase.

33
00:02:26.417 --> 00:02:29.238
So how would we accomplish this?

34
00:02:29.238 --> 00:02:33.030
Well, you have a couple
little special things,

35
00:02:33.030 --> 00:02:37.842
special transformers of these
elements within your template

36
00:02:37.842 --> 00:02:42.204
literal type that would let
you do something like this.

37
00:02:42.204 --> 00:02:46.034
Capitalize colors and
we've removed the underscore but

38
00:02:46.034 --> 00:02:47.955
look at the d in darkSienna.

39
00:02:47.955 --> 00:02:51.240
Despite up here it being lowercase, right,

40
00:02:51.240 --> 00:02:57.299
the first letter's been capitalized and so
we can get some nice method names here.

41
00:02:57.299 --> 00:03:02.357
Not a coincidence by the way,
the feature set was built such that you

42
00:03:02.357 --> 00:03:08.327
could have lowercased property names and
then maybe have getters and setters.

43
00:03:08.327 --> 00:03:13.310
And you want when people are using
your code to be able to use these

44
00:03:13.310 --> 00:03:18.110
as things that feel like they
were painstakingly implemented

45
00:03:18.110 --> 00:03:22.561
one at a time when really,
it's just sort of an a times b.

46
00:03:22.561 --> 00:03:25.891
And here is the format of
the string that I want.

47
00:03:25.891 --> 00:03:30.331
So why am I talking about
this in a chapter of this

48
00:03:30.331 --> 00:03:33.115
course called mapped types?

49
00:03:33.115 --> 00:03:35.319
Well, let's bring it back to mapped types.

50
00:03:35.319 --> 00:03:41.041
So what we can do here,
some people call this key mapping.

51
00:03:41.041 --> 00:03:46.453
And effectively if we go back
to our analogy of array.map,

52
00:03:46.453 --> 00:03:54.262
when you use array,map, you are converting
the values of array A to array B, right?

53
00:03:54.262 --> 00:03:56.444
You're just converting the values.

54
00:03:56.444 --> 00:04:03.135
This lets us manipulate the keys as
we're making that transformation.

55
00:04:03.135 --> 00:04:05.246
Let's see what happens, right?

56
00:04:05.246 --> 00:04:08.188
So here's the mapped type, right?

57
00:04:08.188 --> 00:04:11.632
I'm saying I'm iterating over each key and
by the way,

58
00:04:11.632 --> 00:04:15.159
let me introduce this before
[LAUGH] we go too deep in here.

59
00:04:15.159 --> 00:04:19.328
Let's say that this is
just some piece of data,

60
00:04:19.328 --> 00:04:23.196
a record that I persist
to an API somewhere.

61
00:04:23.196 --> 00:04:29.132
I've got an array of numbers,
I've got an array of strings,

62
00:04:29.132 --> 00:04:33.942
and then this flags thing
is a record of Booleans.

63
00:04:33.942 --> 00:04:38.739
So I'm gonna pop out into the TypeScript
playground, we can play with this.

64
00:04:47.725 --> 00:04:52.765
Data state.so we've got digits,
which is a number array, here's flags.

65
00:04:52.765 --> 00:04:56.474
So I've got dark mode and mobile,
those are each a Boolean,

66
00:04:56.474 --> 00:05:01.435
maybe little user preferences that someone
could turn those on and off, right?

67
00:05:01.435 --> 00:05:05.025
Here I'm just being yelled at because I'm
using this before it's been assigned.

68
00:05:05.025 --> 00:05:06.705
But it's equivalent to,

69
00:05:15.239 --> 00:05:16.503
Equivalent to something like that.

70
00:05:16.503 --> 00:05:20.830
We already talked about record but
just bringing us home there.

71
00:05:20.830 --> 00:05:25.978
So what this lets us do is
we're iterating over all

72
00:05:25.978 --> 00:05:31.139
of the keys in this data state interface,
right?

73
00:05:31.139 --> 00:05:35.516
So that's gonna be first digits,
then names then flags, and

74
00:05:35.516 --> 00:05:40.668
then we're using this as keyword,
as is how this remapping can happen.

75
00:05:40.668 --> 00:05:45.315
And we're adding the word set in
front of it and capitalizing, so

76
00:05:45.315 --> 00:05:49.202
we get a little method here
that's called setDigits,

77
00:05:49.202 --> 00:05:52.174
setFlags and we can pass these things in.

78
00:05:52.174 --> 00:05:57.056
So if you've written data
layer code where you have

79
00:05:57.056 --> 00:06:01.485
a bunch of Boolean
properties where it's is,

80
00:06:01.485 --> 00:06:05.017
is dark mode, is user opt into beta.

81
00:06:05.017 --> 00:06:10.866
Well, you could see how you
can now in a very generalized

82
00:06:10.866 --> 00:06:17.728
way derive some controlled accessors for
those kinds of things.

83
00:06:17.728 --> 00:06:22.780
Maybe you would use object.defined
property to dynamically build

84
00:06:22.780 --> 00:06:27.484
something and then be able to
represent the types accurately.

85
00:06:29.526 --> 00:06:33.779
Let me show you a library where
I would hope one day they'd use

86
00:06:33.779 --> 00:06:36.462
something like this to define types.

87
00:06:36.462 --> 00:06:43.631
This is my favorite library for
colorizing CLI stuff in JavaScript.

88
00:06:43.631 --> 00:06:50.257
And basically, to make this string
blue with a red background,

89
00:06:50.257 --> 00:06:55.053
you do .blue, and
then look at this, bgRed.

90
00:06:55.053 --> 00:06:58.368
So every colors available as
a foreground or background.

91
00:06:58.368 --> 00:07:02.413
And now instead of explicitly
saying we've got the red and

92
00:07:02.413 --> 00:07:06.390
then we've got here's the red and
then here's the bgRed.

93
00:07:06.390 --> 00:07:13.075
But now you could define this template
type that would just add bg capitalized,

94
00:07:13.075 --> 00:07:17.788
the R in red boom, and
now you can make a really nice API.

95
00:07:17.788 --> 00:07:23.862
And this library is a pleasure to use,
it's very easily proves

96
00:07:23.862 --> 00:07:29.377
that you can build beautiful and
highly ergonomic APIs.

97
00:07:29.377 --> 00:07:37.021
Not rest APIs but functional APIs
using this kind of technique.

98
00:07:37.021 --> 00:07:41.791
And look, we're now back to
catching spelling errors again,

99
00:07:41.791 --> 00:07:46.921
we get true type checking here,
because I left the E off of mobile and

100
00:07:46.921 --> 00:07:49.359
TypeScripts figured that out.

