WEBVTT

1
00:00:00.300 --> 00:00:05.980
Type queries allow us to
obtain a type from a value.

2
00:00:05.980 --> 00:00:09.293
And there are two new
keywords I want to introduce,

3
00:00:09.293 --> 00:00:12.580
which fit into the category
of type queries.

4
00:00:12.580 --> 00:00:15.420
Those are keyof and typeof.

5
00:00:17.070 --> 00:00:20.676
So first, we're going to look at keyof.

6
00:00:20.676 --> 00:00:25.550
keyof allows us to obtain
all of the keys of

7
00:00:25.550 --> 00:00:30.920
an interface or object type of some sort.

8
00:00:30.920 --> 00:00:34.820
So here, note that we're
looking at a type alias, right?

9
00:00:34.820 --> 00:00:39.100
And if we hover over Date here,
you see obviously the word interface Date.

10
00:00:39.100 --> 00:00:43.770
That's an indication that we're
working with this as a type.

11
00:00:43.770 --> 00:00:48.266
And we're using this keyof operator,
and then we're getting something here,

12
00:00:48.266 --> 00:00:49.930
it says DatePropertyNames.

13
00:00:50.960 --> 00:00:53.470
We can't really see much more about this.

14
00:00:53.470 --> 00:00:59.639
Now, in JavaScript, we can have
property keys that are strings or

15
00:00:59.639 --> 00:01:05.450
numbers or
rarely symbols is a separate type symbol.

16
00:01:05.450 --> 00:01:07.130
So not all keys are strings.

17
00:01:07.130 --> 00:01:11.754
But if we wanted to take this
thing that we have here and say,

18
00:01:11.754 --> 00:01:16.656
I wanna see the keys that are only
strings, only those keys that

19
00:01:16.656 --> 00:01:22.060
are also a string, we could use
the intersection type operator.

20
00:01:22.060 --> 00:01:25.422
Remember, if we think
about the Venn diagram,

21
00:01:25.422 --> 00:01:29.962
the intersection type operator
will help us to select only those

22
00:01:29.962 --> 00:01:34.770
things that are in the overlap
portion of the Venn diagram, right?

23
00:01:34.770 --> 00:01:39.349
We're saying you must be a key of date and
you also must be a string.

24
00:01:39.349 --> 00:01:42.023
And if you meet condition one and

25
00:01:42.023 --> 00:01:46.560
condition two,
then you're part of this new type.

26
00:01:46.560 --> 00:01:48.157
If you think about geometry, and

27
00:01:48.157 --> 00:01:50.903
I'm sort of revealing my
educational background here.

28
00:01:50.903 --> 00:01:53.890
I'm a mechanical engineer by education.

29
00:01:53.890 --> 00:01:58.752
I think of this kind of like a dot
product in that, if you remember that you

30
00:01:58.752 --> 00:02:02.979
can kind of define vectors as some
portion in the x direction and

31
00:02:02.979 --> 00:02:05.560
some portion in the y direction.

32
00:02:05.560 --> 00:02:11.295
You're kind of getting the part of
a type that aligns with some other type,

33
00:02:11.295 --> 00:02:14.050
kind of like a dot product.

34
00:02:14.050 --> 00:02:18.856
That's useful enough to me that
I want all of the other sort of

35
00:02:18.856 --> 00:02:22.070
visual learners to think of it that way.

36
00:02:23.480 --> 00:02:30.020
So it's the sub-part of keyof Date
that is also included with string.

37
00:02:30.020 --> 00:02:34.356
So here we've got the same
line that we had above.

38
00:02:34.356 --> 00:02:40.660
In our second line, we're saying intersect
this with string, and look what we get.

39
00:02:40.660 --> 00:02:46.535
We get all of the property names
of date that are also string.

40
00:02:46.535 --> 00:02:51.643
We've got toDateString,
toLocaleTimeString,

41
00:02:51.643 --> 00:02:55.210
getFullYear, 33 more, right?

42
00:02:55.210 --> 00:02:56.561
It's even truncating this tooltip.

43
00:02:56.561 --> 00:02:58.270
There's a lot going on here.

44
00:02:58.270 --> 00:03:01.086
So remember,
we're still working with types, but

45
00:03:01.086 --> 00:03:03.780
what we've created here is a union type,
right?

46
00:03:03.780 --> 00:03:08.447
This is the or concept of all
of the different property names,

47
00:03:08.447 --> 00:03:13.409
which could include methods or
fields that we could find on date.

48
00:03:13.409 --> 00:03:17.700
We've obtained type information here.

49
00:03:17.700 --> 00:03:21.207
So if we wanted to get the other
things that are left over,

50
00:03:21.207 --> 00:03:25.150
apparently there's this
Symbol.toPrimitive thing.

51
00:03:25.150 --> 00:03:27.345
And you can read more about that here, but

52
00:03:27.345 --> 00:03:30.060
that's why this didn't
show us a list of strings.

53
00:03:30.060 --> 00:03:34.432
There's actually one symbol in there and
it's for

54
00:03:34.432 --> 00:03:38.608
converting a date to either a number or
a string.

55
00:03:38.608 --> 00:03:41.662
And there's a footnote if you wanna
play with that, if you're curious and

56
00:03:41.662 --> 00:03:42.690
wanna pull that thread.

57
00:03:42.690 --> 00:03:44.656
So that's keyof.

58
00:03:44.656 --> 00:03:49.302
It's gonna be really important
later in the course, keyof.

59
00:03:49.302 --> 00:03:56.686
typeof, so this is a much more direct type
query in that we're literally saying,

60
00:03:56.686 --> 00:04:03.160
I have a value and I wish to get
the type that describes this value.

61
00:04:03.160 --> 00:04:05.920
So here's a little bit of sample code.

62
00:04:05.920 --> 00:04:10.770
I've made sort of a non-trivial value here
just to sort of make things interesting.

63
00:04:10.770 --> 00:04:17.930
We have a fetch which returns a promise
that resolves to a response, right?

64
00:04:17.930 --> 00:04:21.610
Look at that return type, they're promise,
and then generic over response.

65
00:04:22.850 --> 00:04:27.440
And then here, we've created a second
promise that resolves to a string.

66
00:04:28.480 --> 00:04:31.108
Promise.all, it takes an array of things.

67
00:04:31.108 --> 00:04:35.010
Any of those that are promise-ish,
it'll wait for those.

68
00:04:35.010 --> 00:04:38.089
So if we await this, look at that tooltip,

69
00:04:38.089 --> 00:04:41.970
it's a tuple containing a response and
a string.

70
00:04:41.970 --> 00:04:44.360
But let's pretend that this
was much more complicated.

71
00:04:46.200 --> 00:04:49.520
We don't have a nice
type that describes this.

72
00:04:49.520 --> 00:04:54.187
So if we wanted to obtain that type,
all we'd need to do is grab this, right?

73
00:04:54.187 --> 00:04:55.093
This is our value.

74
00:04:55.093 --> 00:04:58.712
See the word const in the tooltip?

75
00:04:58.712 --> 00:05:02.620
We're using this typeof operator,
or this keyword rather.

76
00:05:03.860 --> 00:05:09.440
And then we can create a type alias
that describes what this thing is.

77
00:05:10.620 --> 00:05:13.640
You may be wondering like,
where might I use this?

78
00:05:13.640 --> 00:05:19.016
Well, what if you're consuming a library
that exposes some things to you,

79
00:05:19.016 --> 00:05:20.029
some values?

80
00:05:20.029 --> 00:05:25.346
But they don't give you the type
information for these things directly

81
00:05:25.346 --> 00:05:31.730
as an interface or as a type alias that
you could independently import and export.

82
00:05:31.730 --> 00:05:36.125
But if you wanted to make a function
that takes the return value of something

83
00:05:36.125 --> 00:05:37.328
else or a function.

84
00:05:37.328 --> 00:05:40.636
What if this were a webpack config,
a really complicated, big,

85
00:05:40.636 --> 00:05:43.040
big object with lots of stuff on it?

86
00:05:43.040 --> 00:05:46.549
If you wanted to make a function that
takes a webpack config as an argument,

87
00:05:46.549 --> 00:05:50.190
this would be a way where you could say,
hey, look, I have this thing.

88
00:05:50.190 --> 00:05:53.560
Maybe it came out of
a function as a return value.

89
00:05:53.560 --> 00:05:57.930
And now I can have a type for it, and
I can use that type for something else.

90
00:05:57.930 --> 00:06:00.427
It's great for
sort of threading concepts through and

91
00:06:00.427 --> 00:06:04.390
making sure you're still referring
to the original source of truth.

92
00:06:04.390 --> 00:06:07.890
I don't have a tuple written
in this piece of code at all.

93
00:06:07.890 --> 00:06:10.206
I mean, unless you would argue
that this is a tuple, but

94
00:06:10.206 --> 00:06:11.700
certainly not a tuple type.

95
00:06:11.700 --> 00:06:13.390
This is a value, right?

96
00:06:13.390 --> 00:06:15.780
It's the thing passed into Promise.all.

97
00:06:15.780 --> 00:06:20.844
But I am very much referring
to the type information for

98
00:06:20.844 --> 00:06:24.819
resolve, for fetch, for Promise.all.

99
00:06:24.819 --> 00:06:29.210
That's all baked in to this Response,
string.

100
00:06:29.210 --> 00:06:33.214
So if these were to ever change,
if I upgrade my typescript version, for

101
00:06:33.214 --> 00:06:36.560
example, everything will
flow through very nicely.

102
00:06:36.560 --> 00:06:39.740
I'm still just pointing to
one single source of truth.

103
00:06:39.740 --> 00:06:44.760
I'm just sort of giving it a name so
I can hold on to it with this type query.

104
00:06:44.760 --> 00:06:51.920
So typeof is also useful for
obtaining the static side of a class.

105
00:06:51.920 --> 00:06:54.922
By static side,
we mean like the factory, right?

106
00:06:54.922 --> 00:06:59.561
It's the ability to create
new fruit in this case and

107
00:06:59.561 --> 00:07:03.363
any static methods that are on this class.

108
00:07:03.363 --> 00:07:06.243
So if we look at the tooltips below here,

109
00:07:06.243 --> 00:07:11.342
we haven't written the word typeof,
but we can see it appearing to us.

110
00:07:11.342 --> 00:07:17.864
If we store as a variable a copy of
this Fruit class, not an instance,

111
00:07:17.864 --> 00:07:22.820
we can see the type of this
variable is typeof Fruit.

112
00:07:24.740 --> 00:07:31.120
And then if we create an instance,
we can see that the type is just Fruit.

113
00:07:31.120 --> 00:07:36.711
So if you wanted to see the static stuff
available on a class and you wanted a type

114
00:07:36.711 --> 00:07:42.300
for that, remember, if we just use Fruit
in the value position as we are here,

115
00:07:42.300 --> 00:07:48.660
we're referring to the constructor,
right, the class, not an instance.

116
00:07:48.660 --> 00:07:51.706
And then if we look at what its type is,

117
00:07:51.706 --> 00:07:56.680
now we have a way of getting access
to it using this type query.

