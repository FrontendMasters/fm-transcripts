[00:00:00]
>> Just to recap, we begin by setting some goals and talking about how this course is designed to help you understand tricky type information and to give you tips and tricks that you can put right into your app. Copy paste code out of this course, and it'll save you major headache.

[00:00:18]
We talked a little bit about how different kinds of declarations stack on top of each other and came to the realization that classes are actually two things stacked on top of each other. It's the factory and it's the instance, right? We talked a bit about modules and CJS interop one of the trickier things where frankly, I have helped a TC 39 members, the people who are on the JavaScript standards body.

[00:00:43]
They've had trouble with this and I've had to walk them through this the same way I walked you through it. So don't feel bad if if you get stuck there, and it's a little mysterious. We extracted type information from values using type queries, like type of, then we moved on to conditional types.

[00:01:03]
And the built in type script utility types extract and exclude, which are just conditional types behind the scenes. And we saw how having one branch of your condition resolve out to never, that allows you to do some really interesting things. We introduced the infer keyword and we built a utility type to extract an argument out of a constructor.

[00:01:31]
And we looked at the example of something like a Webpack config where it's a meaningful type that adds a lot of value to you. But if you didn't have access to it directly, you could kind of suck it up with a vacuum and put it where you wanna put it and refer to it just as if it were an export interface.

[00:01:50]
Index access types, this was just a little square bracket notation for grabbing like a sub part of a type. And then finally, this was the big thing we were sort of working our way up to mapped types and that's the thing that looks like an index signature. But we can imagine like we have a lot more control, hopefully you see now where we can loop over all of the keys and a type or all of some other key, right?

[00:02:16]
Any union type that is based off of allowable property keys. And we can combine this with index access types, with conditional types, with those template literal types. And in a very powerful way transform one piece of type information to another. So I hope by the end of this you feel more confident working with type information how to pick it apart.

[00:02:42]
You know how to debug it a little bit. And hopefully this will set you on a great path for your continued learning around TypeScript.

