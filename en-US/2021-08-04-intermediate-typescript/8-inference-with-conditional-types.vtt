WEBVTT

1
00:00:00.130 --> 00:00:06.580
Conditional types have a special
tool called the infer keyword,

2
00:00:06.580 --> 00:00:14.470
which can be used to extract some sub
part of one type from another type.

3
00:00:14.470 --> 00:00:19.356
And it's not a coincidence
that in the same release of

4
00:00:19.356 --> 00:00:24.120
TypeScript where we got conditional types.

5
00:00:24.120 --> 00:00:27.188
We also got this infer
keyword you might feel,

6
00:00:27.188 --> 00:00:31.436
especially once you get used to
using infer, you might feel that

7
00:00:31.436 --> 00:00:36.460
conditional types are sort of a very
weak feature of the language.

8
00:00:36.460 --> 00:00:39.020
Without this infer keyword,
it's almost like this.

9
00:00:39.020 --> 00:00:41.132
This is a necessary part of the story and

10
00:00:41.132 --> 00:00:43.569
they go hand in hand
with conditional types.

11
00:00:44.710 --> 00:00:51.293
This infer keyword can only be used within
the condition expression of a conditional

12
00:00:51.293 --> 00:00:56.310
type it can be used anywhere else
in any kind of type expression.

13
00:00:58.420 --> 00:01:03.628
So, what we're gonna do since
it's kind of an abstract concept,

14
00:01:03.628 --> 00:01:08.384
we're going to walk through
a situation where we find that.

15
00:01:08.384 --> 00:01:14.067
The thing infer does for us is
conspicuously missing from the language

16
00:01:14.067 --> 00:01:20.370
won't go up to a problem that only
this new language feature could solve.

17
00:01:20.370 --> 00:01:25.062
And that'll help us understand how it ties
into the practicalities of what we're

18
00:01:25.062 --> 00:01:28.010
trying to build in our
In our real world apps.

19
00:01:28.010 --> 00:01:34.820
So, let's say that we have a class that
takes a really complicated options object.

20
00:01:34.820 --> 00:01:37.870
And we'll say that it's
called WebpackCompiler.

21
00:01:37.870 --> 00:01:42.070
And this is actually a subset of
the Webpack configuration object.

22
00:01:43.180 --> 00:01:44.885
You don't need to remember all this,

23
00:01:44.885 --> 00:01:48.620
the whole point of having types is
you want autocompletes here, right?

24
00:01:48.620 --> 00:01:53.960
Cuz it's very, very flexible, like you
can do a lot of different things here.

25
00:01:53.960 --> 00:01:59.889
But let's imagine that in the source code
that we're consuming, it looks just like

26
00:01:59.889 --> 00:02:05.300
this, where we do not have an interface or
a type alias that defines this.

27
00:02:05.300 --> 00:02:10.759
We only have it explicitly specified
as the type of the one argument

28
00:02:10.759 --> 00:02:16.022
passed to the constructor, and
then let's say in our own code,

29
00:02:16.022 --> 00:02:22.090
we want something like this
where we define a configuration.

30
00:02:22.090 --> 00:02:26.415
We attempt to compile and
then if something goes wrong,

31
00:02:26.415 --> 00:02:28.910
we log an error message out.

32
00:02:28.910 --> 00:02:32.450
And the configuration is
part of that error message.

33
00:02:32.450 --> 00:02:38.080
Maybe this code is run on a machine
that we don't have direct access to.

34
00:02:38.080 --> 00:02:42.130
And it's important that we
be able in logs to see that.

35
00:02:42.130 --> 00:02:44.657
Like if it's a GitHub action, for example,

36
00:02:44.657 --> 00:02:49.440
we want to be able to see in the logs like
this was a failure here was the config.

37
00:02:49.440 --> 00:02:51.450
I can copy this and I could run it.

38
00:02:51.450 --> 00:02:57.920
So I simply mean to convince you that This
is something you might actually do, right?

39
00:02:57.920 --> 00:03:00.360
And unfortunately,
we have a spelling error here.

40
00:03:00.360 --> 00:03:03.260
We've said watch instead of wutch,

41
00:03:03.260 --> 00:03:08.310
and we get no type checking
help with this spelling error.

42
00:03:08.310 --> 00:03:09.290
Why?

43
00:03:09.290 --> 00:03:12.860
Well, let's look at the type
of this configure object.

44
00:03:12.860 --> 00:03:17.383
It's not anything that looks
connected to the Webpack config.

45
00:03:17.383 --> 00:03:21.090
It's just an object that
has two properties on it.

46
00:03:21.090 --> 00:03:26.230
We're just getting straight up
inference here, based on the value or

47
00:03:26.230 --> 00:03:31.370
we're setting CFG to and we're
passing it In the WebpackCompiler and

48
00:03:31.370 --> 00:03:36.251
nothing's objecting there why
almost everything on this options

49
00:03:36.251 --> 00:03:39.410
object is optional, and we have an entry.

50
00:03:41.240 --> 00:03:41.750
That'll work.

51
00:03:43.020 --> 00:03:45.550
And the other property
will just be disregarded.

52
00:03:46.670 --> 00:03:50.480
So, we want TypeScript to be
able to help us out here.

53
00:03:51.590 --> 00:03:53.710
But we can't do this right now.

54
00:03:53.710 --> 00:03:57.766
Like if there was something else to
import, maybe we could import it,

55
00:03:57.766 --> 00:04:02.760
we could use a type annotation here, and
then it would start to catch our error.

56
00:04:02.760 --> 00:04:06.687
But as I said before,
in this case, like all we have is,

57
00:04:06.687 --> 00:04:10.870
there's this class that I'm using and
has a constructor.

58
00:04:10.870 --> 00:04:13.730
And the first argument of
the constructor wants this thing.

59
00:04:13.730 --> 00:04:18.765
So we want to basically pull this
type out somehow get a handle on

60
00:04:18.765 --> 00:04:23.800
it locally in our app code or
our library code, we want to be able

61
00:04:23.800 --> 00:04:29.500
to give it a name and refer to it and
use it as the type for variables.

62
00:04:29.500 --> 00:04:33.140
As if we just obtained it as an interface.

63
00:04:33.140 --> 00:04:34.720
So this is our goal.

64
00:04:34.720 --> 00:04:35.880
We want something like that.

65
00:04:37.140 --> 00:04:42.860
Something named that we can refer to,
we just gotta get a handle on it first.

66
00:04:42.860 --> 00:04:47.029
And the infer keyword is what's
going to let us do this.

67
00:04:48.100 --> 00:04:55.570
So it lets us abstract some piece
of a type from a larger type.

68
00:04:55.570 --> 00:05:00.076
And before we go back to our Webpack
example, which is very complicated,

69
00:05:00.076 --> 00:05:02.850
just the nature of that
type is complicated.

70
00:05:02.850 --> 00:05:07.355
I want to work on an example that
has the same approximate structure

71
00:05:07.355 --> 00:05:11.520
meaning it still is a one
argument constructor.

72
00:05:11.520 --> 00:05:15.012
And we still want to obtain this thing,
but

73
00:05:15.012 --> 00:05:20.735
all of the other noises is out and
I think that if we solve this problem,

74
00:05:20.735 --> 00:05:26.530
we will also solve the same problem
in the WebpackCompiler example.

75
00:05:26.530 --> 00:05:31.463
So we want to design some sort of
type that takes fruit stand or

76
00:05:31.463 --> 00:05:35.280
some variant of it as a type parameter.

77
00:05:35.280 --> 00:05:39.130
And it emits array of strings.

78
00:05:39.130 --> 00:05:41.380
Right like, here's a class.

79
00:05:41.380 --> 00:05:47.840
Give me the first argument that the
compiler or that the constructor receives.

80
00:05:47.840 --> 00:05:53.000
So this is actually the answer here and
it looks quite complicated.

81
00:05:53.000 --> 00:05:54.610
We're going to pick it apart.

82
00:05:54.610 --> 00:05:59.310
You will understand every little
piece of this syntax, but

83
00:05:59.310 --> 00:06:02.510
first I want you to accept that it works.

84
00:06:03.810 --> 00:06:07.450
So we've got this,
this is sort of the answer here.

85
00:06:07.450 --> 00:06:09.610
We've got this fruit stand thing.

86
00:06:09.610 --> 00:06:14.150
And we've got like constructor Arg
we pass in type of FruitStand.

87
00:06:14.150 --> 00:06:15.580
And what do we get out?

88
00:06:15.580 --> 00:06:18.458
The first argument that
the constructor takes.

89
00:06:18.458 --> 00:06:21.040
Here's our WebpackCompiler example.

90
00:06:21.040 --> 00:06:23.950
We pass in type of that, and we get out.

91
00:06:23.950 --> 00:06:27.480
That's the type that we
wanted this whole time.

92
00:06:27.480 --> 00:06:31.838
We wanted to sort of, grab that
first argument, give it a name and

93
00:06:31.838 --> 00:06:35.484
we could Give this a name like
this with the type alias,

94
00:06:35.484 --> 00:06:39.850
we could call it WebpackCompiler
options if we want to.

95
00:06:39.850 --> 00:06:43.820
So this appears to work, it does work.

96
00:06:43.820 --> 00:06:48.419
Let's pick apart what all
this stuff means here.

97
00:06:50.160 --> 00:06:53.710
So first we're just gonna
build it up piece by piece.

98
00:06:53.710 --> 00:06:57.740
First we have a type alias and
we're calling it constructor Arg.

99
00:06:57.740 --> 00:07:02.430
It takes a single type parameter,
which we're calling C.

100
00:07:02.430 --> 00:07:04.003
It's gonna be C for class.

101
00:07:06.349 --> 00:07:10.613
Next, we want to create
a conditional type and,

102
00:07:10.613 --> 00:07:15.293
we're gonna be analyzing
the static side of a class,

103
00:07:15.293 --> 00:07:20.390
which is that's why up here,
we're using type of right.

104
00:07:20.390 --> 00:07:26.450
That's to get the type of the class,
not a type of the instance.

105
00:07:27.960 --> 00:07:32.786
And we want, To match that against
something like this, right,

106
00:07:32.786 --> 00:07:36.400
this again is our any constructor type,
right?

107
00:07:36.400 --> 00:07:41.826
This is this represents anything in
JavaScript that is newable regardless

108
00:07:41.826 --> 00:07:47.090
of how many arguments it may take,
regardless of what it instantiates.

109
00:07:47.090 --> 00:07:50.120
If you want to know more specific newable.

110
00:07:50.120 --> 00:07:55.830
You might put something over here,
like any constructor that makes dates.

111
00:07:55.830 --> 00:07:58.180
Well, that's gonna be
the date constructor.

112
00:07:58.180 --> 00:08:00.610
So, we started with this.

113
00:08:00.610 --> 00:08:04.086
So all we've added is
the condition portion of

114
00:08:04.086 --> 00:08:07.330
what will become a conditional type.

115
00:08:07.330 --> 00:08:11.990
So this is we've already learned about
this right we have our type puram.

116
00:08:11.990 --> 00:08:16.191
We're testing whether
the type that C represents

117
00:08:16.191 --> 00:08:20.330
is included in the set
that this represents.

118
00:08:20.330 --> 00:08:24.980
So is C in the set of all
things that are newable.

119
00:08:24.980 --> 00:08:29.920
Now, we're about to make a little change
that will make this a more specific type.

120
00:08:29.920 --> 00:08:33.827
But we want to collect that first
constructor argument that this is where

121
00:08:33.827 --> 00:08:36.510
the infer keyword enters into the story.

122
00:08:36.510 --> 00:08:40.986
So we're going to change from
accepting any arbitrary list of

123
00:08:40.986 --> 00:08:45.547
arguments to accepting a first
argument which must be there and

124
00:08:45.547 --> 00:08:51.227
we're adding something here it looks
like it's a new type parameter kind of,

125
00:08:51.227 --> 00:08:57.690
it doesn't it's not going to end up having
to be part of our type parameter list.

126
00:08:57.690 --> 00:09:04.380
But typically we still use title case for
this, right?

127
00:09:04.380 --> 00:09:06.450
And infer is to the left of it.

128
00:09:06.450 --> 00:09:11.720
So you can think of this almost like it's
like a vacuum the end of a vacuum, right?

129
00:09:11.720 --> 00:09:16.683
We're gonna suck up whatever's here and
call it A and

130
00:09:16.683 --> 00:09:22.430
after a we're prepared to have zero or
more other arguments.

131
00:09:22.430 --> 00:09:24.330
We don't really care about those.

132
00:09:24.330 --> 00:09:29.261
But to maintain the flexibility of
this thing that we're building will

133
00:09:29.261 --> 00:09:31.240
tolerate other arguments.

134
00:09:31.240 --> 00:09:34.590
You don't have to give us exactly
a one argument instructor.

135
00:09:34.590 --> 00:09:39.640
Are our constructor we just want
the first argument of any constructor.

136
00:09:39.640 --> 00:09:42.880
Now, the more keen eyed of you may notice,

137
00:09:42.880 --> 00:09:47.410
this is actually we've made
this type more specific.

138
00:09:47.410 --> 00:09:51.241
So if we let me get both of
these on the screen here,

139
00:09:51.241 --> 00:09:56.920
this type matches any newable,
including zero argument constructors.

140
00:09:58.110 --> 00:10:02.190
This, you're gonna have to
have one argument, right?

141
00:10:02.190 --> 00:10:03.950
This has to be present.

142
00:10:03.950 --> 00:10:08.506
I'm okay with that in this situation
because the whole point is we're trying to

143
00:10:08.506 --> 00:10:09.760
obtain that.

144
00:10:09.760 --> 00:10:14.627
So if it sort of Nevers out, right,
it sort of grounds out in the case where

145
00:10:14.627 --> 00:10:18.380
we use it with zero
argument constructors like.

146
00:10:18.380 --> 00:10:20.622
I would say that it's
a sign of misuse anyway,

147
00:10:20.622 --> 00:10:23.270
and that would be a reasonable result.

148
00:10:23.270 --> 00:10:25.730
There was nothing to obtain, so never.

149
00:10:25.730 --> 00:10:26.230
Right.

150
00:10:27.730 --> 00:10:32.517
So this is our condition here and
now all that's left is for

151
00:10:32.517 --> 00:10:35.930
us to fill in what are we emit?

152
00:10:35.930 --> 00:10:41.930
What type do we evaluate out
to if the condition It's true.

153
00:10:41.930 --> 00:10:44.850
And what do we evaluate
out to if it's false.

154
00:10:44.850 --> 00:10:49.305
So in the case where our
condition evaluates to true,

155
00:10:49.305 --> 00:10:55.300
we're able to use this type A,
just as if it were a type parameter.

156
00:10:55.300 --> 00:10:59.530
So you can think of this kind
of like it's in scope, right?

157
00:10:59.530 --> 00:11:02.700
You could use a here or
you could use it here.

158
00:11:02.700 --> 00:11:05.624
But it's not just a placeholder
like a label just so

159
00:11:05.624 --> 00:11:07.330
we can give this thing a name.

160
00:11:07.330 --> 00:11:11.130
So when people read our code,
they can understand what's going on.

161
00:11:11.130 --> 00:11:16.750
We suck this up with our vacuum,
and we can put it out here.

162
00:11:17.940 --> 00:11:18.520
Right?

163
00:11:18.520 --> 00:11:22.520
So we're saying if C, is a newable.

164
00:11:24.710 --> 00:11:30.100
Suck up that first argument that's passed
to the constructor and give me its type.

165
00:11:30.100 --> 00:11:32.870
Now we need to put something here.

166
00:11:32.870 --> 00:11:37.052
And a good way to think about
how we handle the other case,

167
00:11:37.052 --> 00:11:40.380
right the case where we
turn up with nothing.

168
00:11:41.450 --> 00:11:46.385
We want to make sure that if
we use this with a union type,

169
00:11:46.385 --> 00:11:49.950
with the or type It kind of disappears.

170
00:11:49.950 --> 00:11:55.800
And what I mean by that is whatever
type we end up with here, right?

171
00:11:55.800 --> 00:11:59.760
Like if we evaluate out to this case,
let's say that's x.

172
00:11:59.760 --> 00:12:04.049
I want wanna make sure that when we
we evaluate an expression like this,

173
00:12:04.049 --> 00:12:09.051
we end up with just a string or number it
kinda just, it's like multiplying by one,

174
00:12:09.051 --> 00:12:13.245
like just an identity thing where
it's sort of like vanishes.

175
00:12:13.245 --> 00:12:17.939
That'll ensure that we're not adding noise
whenever this type sort of plays with

176
00:12:17.939 --> 00:12:19.635
other types.

177
00:12:19.635 --> 00:12:25.435
So we can try that with any and
look what happens

178
00:12:25.435 --> 00:12:31.098
when we do union any it
swallows everything.

179
00:12:31.098 --> 00:12:36.110
Union any always swallows everything.

180
00:12:36.110 --> 00:12:38.308
The way I think about this,

181
00:12:38.308 --> 00:12:43.360
it's like if you send your friend
to go to the grocery store.

182
00:12:43.360 --> 00:12:48.990
You're saying pick up three organic eggs,

183
00:12:48.990 --> 00:12:53.450
and 25 grams of some spice.

184
00:12:53.450 --> 00:12:56.430
And also get me everything
in the store please.

185
00:12:56.430 --> 00:12:58.870
Well, you could have
just led with that right?

186
00:12:58.870 --> 00:13:01.780
You could have just said,
give me everything in the store.

187
00:13:01.780 --> 00:13:03.820
That's why this swallows everything.

188
00:13:03.820 --> 00:13:07.979
It's kind of like multiplying
by zero in some way,

189
00:13:07.979 --> 00:13:12.909
in that if this is found in a union type,
if you ever see this,

190
00:13:12.909 --> 00:13:17.359
it just makes the whole rest
of the union type pointless

191
00:13:17.359 --> 00:13:21.595
because it's just going
to evaluate out to any.

192
00:13:21.595 --> 00:13:25.885
So not only is this the wrong answer,
this is not what we desire.

193
00:13:25.885 --> 00:13:29.105
It's like the exact
opposite of what we desire.

194
00:13:29.105 --> 00:13:32.444
We want something that disappears,
not something that dominates over and

195
00:13:32.444 --> 00:13:34.000
kind of takes over.

196
00:13:34.000 --> 00:13:35.690
The whole type.

197
00:13:35.690 --> 00:13:39.595
So if this gives us the exact
opposite of what we're looking for,

198
00:13:39.595 --> 00:13:43.560
it makes sense to me to try
the opposite of any, right?

199
00:13:43.560 --> 00:13:46.980
So we're going to try this with never,
and we in fact do get what we want.

200
00:13:46.980 --> 00:13:50.262
So when you're making
these conditional types,

201
00:13:50.262 --> 00:13:53.231
in the case where
something didn't match and

202
00:13:53.231 --> 00:13:58.880
you kind of just want to like escape
out let's just like forget about it.

203
00:13:58.880 --> 00:14:01.620
Often you're just gonna want to admit and
never type.

204
00:14:01.620 --> 00:14:06.487
Because that well, when used in a union

205
00:14:06.487 --> 00:14:11.361
type like this it will just disappear.

206
00:14:11.361 --> 00:14:17.616
No noise, so
let's apply that to our constructor,

207
00:14:17.616 --> 00:14:23.600
our extractor, and
we can see this is the answer.

208
00:14:24.690 --> 00:14:25.740
This is what we ended up with.

209
00:14:26.930 --> 00:14:32.099
So just again, to recap,
it's a generic type that takes a type

210
00:14:32.099 --> 00:14:37.070
parameter C, we look at sea and
we see If it's a newable, and

211
00:14:37.070 --> 00:14:42.990
if that newable takes at least
one argument, we have a match.

212
00:14:42.990 --> 00:14:45.549
And in the event that we have a match,

213
00:14:45.549 --> 00:14:50.140
we're going to use our infer
keyword which is like a vacuum.

214
00:14:50.140 --> 00:14:53.261
We're gonna suck up whatever's
in that first argument, and

215
00:14:53.261 --> 00:14:55.250
we're going to put it in a box called A.

216
00:14:56.900 --> 00:15:03.180
And then, in the event that we had
a match, we will always enter this branch.

217
00:15:03.180 --> 00:15:05.839
So you're always going
to enter this branch,

218
00:15:05.839 --> 00:15:08.644
which is why you're gonna
wanna use eight here.

219
00:15:08.644 --> 00:15:11.994
Often down here,
you could put another ternary operator,

220
00:15:11.994 --> 00:15:14.580
you could chain these together.

221
00:15:14.580 --> 00:15:18.920
And you could say, well if it's a one
argument constructor, we do this.

222
00:15:18.920 --> 00:15:23.230
Maybe if it's a two argument constructor,
we build a tuple with the two things.

223
00:15:23.230 --> 00:15:25.000
You can sort of chain these together.

224
00:15:25.000 --> 00:15:28.762
It's normal by the way to
see this chaining because,

225
00:15:28.762 --> 00:15:33.861
unlike in the value based JavaScript
world, there is no more verbose and

226
00:15:33.861 --> 00:15:37.470
explicit equivalent to
the ternary operator.

227
00:15:37.470 --> 00:15:41.100
We can't like expand this
out into if then else.

228
00:15:41.100 --> 00:15:44.650
I know that some people don't like
nested ternary is for that reason.

229
00:15:44.650 --> 00:15:50.060
So finally let's look
at at the result here.

230
00:15:50.060 --> 00:15:53.327
So no matter what we use this type with,

231
00:15:53.327 --> 00:15:57.990
we can see that we get
the result we're looking for.

232
00:15:57.990 --> 00:16:01.630
We get the first argument
the constructor takes.

233
00:16:01.630 --> 00:16:05.730
So you can create a new date
like literally new date.

234
00:16:05.730 --> 00:16:09.190
You can pass it a string,
a date as a string, a number,

235
00:16:09.190 --> 00:16:12.710
which is like milliseconds
since the epoch.

236
00:16:12.710 --> 00:16:16.921
And then you could create a date from
another date here is the resolve and

237
00:16:16.921 --> 00:16:17.780
reject.

238
00:16:17.780 --> 00:16:20.410
you're used to seeing in
a promise constructor.

239
00:16:20.410 --> 00:16:22.740
Here's our Webpack config.

240
00:16:22.740 --> 00:16:29.143
So now we have this ability to using
infer, to suck up a part of a type and

241
00:16:29.143 --> 00:16:35.224
to obtain it and to create maybe
a local reference to it in some way,

242
00:16:35.224 --> 00:16:39.690
taking this all the way
to the finish line.

243
00:16:39.690 --> 00:16:42.204
If we go back to our first example,

244
00:16:42.204 --> 00:16:46.629
our motivating use case where
we had the spelling error, and

245
00:16:46.629 --> 00:16:52.444
instead of just creating this object with
inference taking care of the typing,

246
00:16:52.444 --> 00:16:56.550
we add this here we give it
an explicit type annotation.

247
00:16:57.550 --> 00:17:02.101
As we've done right up here,
we can see that not only do we get

248
00:17:02.101 --> 00:17:06.280
an error where we hoped
we would get an error.

249
00:17:06.280 --> 00:17:11.214
TypeScript is found that
there is a watch property and

250
00:17:11.214 --> 00:17:15.560
the word we used is pretty close to watch.

251
00:17:15.560 --> 00:17:17.480
So maybe it's a spelling error.

252
00:17:17.480 --> 00:17:22.350
Even guessing that it might
be just a spelling mistake.

253
00:17:23.510 --> 00:17:24.520
So there you go.

254
00:17:24.520 --> 00:17:27.930
This is a great use of the infer keyword.

255
00:17:27.930 --> 00:17:33.950
And I use it all the time for
this exact use case.

256
00:17:33.950 --> 00:17:35.986
Where I'm consuming some code and

257
00:17:35.986 --> 00:17:40.196
I wish I could obtain this type maybe
because just for logging reasons or

258
00:17:40.196 --> 00:17:45.055
something, I want to like create the
things that I'm passing into the function.

259
00:17:45.055 --> 00:17:47.910
First, log that out and then pass it in.

260
00:17:47.910 --> 00:17:54.833
And this is a great way even if those
entities those types are not available for

261
00:17:54.833 --> 00:17:58.786
direct import by whoever made the library.

262
00:17:58.786 --> 00:18:03.207
That doesn't hold you back,
you can still do this.

263
00:18:03.207 --> 00:18:08.534
So, be caution that I want to
give you is in a very large app,

264
00:18:08.534 --> 00:18:12.798
be careful that you don't
do this too too much,

265
00:18:12.798 --> 00:18:18.930
because it's not simple for
the type checker to evaluate.

266
00:18:18.930 --> 00:18:23.874
And if you end up with with too
much of this kind of behavior

267
00:18:23.874 --> 00:18:28.715
here too many conditional types,
too much infer you can

268
00:18:28.715 --> 00:18:34.160
end up slowing down your
the speed of your type of heads.

269
00:18:34.160 --> 00:18:37.372
Now that's not I would say
only worried about this if

270
00:18:37.372 --> 00:18:40.130
you start experiencing that problem.

271
00:18:40.130 --> 00:18:44.930
It's not the kind of thing where, you want
to make sure you avoid the problem so

272
00:18:44.930 --> 00:18:48.730
that you don't get out of
control in the first place.

273
00:18:48.730 --> 00:18:53.062
Really, if you're looking to
improve your performance, just make

274
00:18:53.062 --> 00:18:57.929
sure If you're not making like overusing
this this feature of the language.

275
00:18:57.929 --> 00:19:02.580
But totally fair to use totally,
the only tool for the job in many cases.

