WEBVTT

1
00:00:00.480 --> 00:00:07.905
Extract and exclude, these utility types
which are included as part of TypeScript,

2
00:00:07.905 --> 00:00:12.027
they're used to obtain
some sub part of a type,

3
00:00:12.027 --> 00:00:16.977
either through specifying
what you're looking for, or

4
00:00:16.977 --> 00:00:20.080
what you're not looking for.

5
00:00:20.080 --> 00:00:24.860
Extract is about defining what you're
looking for and you get that piece.

6
00:00:24.860 --> 00:00:28.419
Exclude is about describing what
you want to leave behind, and

7
00:00:28.419 --> 00:00:30.470
you kind of get everything else.

8
00:00:30.470 --> 00:00:34.980
So these, behind the scenes,
just use a conditional type.

9
00:00:34.980 --> 00:00:38.063
So we'll be able to put this concept
we just learned into action now.

10
00:00:38.063 --> 00:00:42.810
So let's say we have a type
that looks like this.

11
00:00:44.170 --> 00:00:50.370
So we have favorite colors, and we have
a bunch of colors that are listed, right?

12
00:00:50.370 --> 00:00:54.484
So think of this, if we were in CSS and
we were using the color or

13
00:00:54.484 --> 00:00:59.140
background color property,
you can write out the word red.

14
00:00:59.140 --> 00:01:05.760
Or you can define colors like hash, F00.

15
00:01:05.760 --> 00:01:09.074
Or you could say RGB parentheses 255.

16
00:01:09.074 --> 00:01:16.960
You could specify your decimal values for
each of those eight bit color slots.

17
00:01:16.960 --> 00:01:19.580
So we're allowing all of that here.

18
00:01:19.580 --> 00:01:21.070
So we kind of have a mix, right?

19
00:01:21.070 --> 00:01:24.090
We have strings,
we have a three part tuple.

20
00:01:25.510 --> 00:01:28.920
And then we have an object with
properties red, green and blue.

21
00:01:28.920 --> 00:01:36.581
So if we wanted to obtain only the subset
of what's described by this type,

22
00:01:36.581 --> 00:01:42.310
that is also a string,
we could use extract in this way.

23
00:01:43.820 --> 00:01:48.460
If we scroll to the right,
you can see that we get just the strings.

24
00:01:48.460 --> 00:01:51.130
The tuple is not there,
the object is not there.

25
00:01:52.850 --> 00:01:58.322
We could do the same thing by
changing this second thing,

26
00:01:58.322 --> 00:02:02.206
the second type that we pass to extract.

27
00:02:02.206 --> 00:02:08.108
And now what we're saying
is within favorite colors,

28
00:02:08.108 --> 00:02:12.469
give me whatever sub part of this type has

29
00:02:12.469 --> 00:02:17.620
a property called red,
whose type is a number.

30
00:02:19.060 --> 00:02:21.090
We don't need to specify
this whole thing here.

31
00:02:21.090 --> 00:02:23.760
Remember, it's not an exact match.

32
00:02:23.760 --> 00:02:27.140
This is a minimum requirement.

33
00:02:27.140 --> 00:02:31.432
So let's pop this example
out into the playground, and

34
00:02:31.432 --> 00:02:34.000
let's say, what if we did this?

35
00:02:36.430 --> 00:02:37.810
Let's add an alpha channel, right?

36
00:02:37.810 --> 00:02:42.210
We could, well, this is not
gonna be because it overlaps so

37
00:02:42.210 --> 00:02:44.150
much with the other type.

38
00:02:44.150 --> 00:02:47.160
Let's say I'm just gonna do this.

39
00:02:49.290 --> 00:02:52.800
I just don't want one to be
strictly a superset of the other.

40
00:02:52.800 --> 00:02:57.780
I want them to have some overlap where
we can see an interesting thing.

41
00:02:57.780 --> 00:03:01.492
So if we look at object colors,
now look, we selected both of those,

42
00:03:01.492 --> 00:03:02.903
if you see in the tooltip.

43
00:03:02.903 --> 00:03:07.460
The object that has green and blue written
as words versus their first letter.

44
00:03:07.460 --> 00:03:13.213
So it's almost like a query searching for
things that might contain a substring of,

45
00:03:13.213 --> 00:03:16.950
here's a fragment,
you'll find me the whole thing.

46
00:03:16.950 --> 00:03:21.340
You can think of it kind of that way, at
least when we're using it in this context.

47
00:03:21.340 --> 00:03:23.040
This is where we're doing the searching.

48
00:03:24.850 --> 00:03:26.100
Make that a little bigger.

49
00:03:26.100 --> 00:03:27.670
This is where we're doing the searching.

50
00:03:27.670 --> 00:03:32.120
And then this is the clue, right?

51
00:03:32.120 --> 00:03:35.773
This is the fragment to use
as the basis for the search.

52
00:03:35.773 --> 00:03:39.190
That would be a perfectly
valid way to think about this.

53
00:03:40.300 --> 00:03:44.430
And of course, with tuple colors,
I'm just gonna pop back here.

54
00:03:44.430 --> 00:03:48.330
We could search so the result we get,
of course is number, number, number.

55
00:03:50.240 --> 00:03:51.550
Let's try some other things here.

56
00:03:51.550 --> 00:03:57.050
What if we just search for
things like a tuple of length 1,

57
00:03:57.050 --> 00:04:00.490
we get a never, not found, right?

58
00:04:00.490 --> 00:04:02.040
That's what it is in this case.

59
00:04:02.040 --> 00:04:06.563
It's like I examined everything,
and here's the set I found,

60
00:04:06.563 --> 00:04:09.508
developer, it's an empty set, sorry.

61
00:04:09.508 --> 00:04:13.356
But if we did this,
what if it's a wider type,

62
00:04:13.356 --> 00:04:19.440
a more general type that still kind
of matches what we're looking for.

63
00:04:19.440 --> 00:04:20.820
Hey, there we go.

64
00:04:20.820 --> 00:04:26.580
Yeah, an array of numbers
that is exactly three slots.

65
00:04:26.580 --> 00:04:31.750
Sure, I mean, it is an array of numbers.

66
00:04:31.750 --> 00:04:36.170
It's a very special array of numbers,
it's specific, but we can search for

67
00:04:36.170 --> 00:04:38.490
something that is more general.

68
00:04:38.490 --> 00:04:42.593
In the same way that up here,
right, we're searching for

69
00:04:42.593 --> 00:04:46.712
any object that has a property
red whose value is a number.

70
00:04:46.712 --> 00:04:50.070
And we were picking up
more than one thing.

71
00:04:50.070 --> 00:04:53.735
So you search with something
that's more general and

72
00:04:53.735 --> 00:04:59.363
the matches will be at that level of
specificity, or even more specific, right?

73
00:04:59.363 --> 00:05:02.670
We're searching for any number arrays.

74
00:05:02.670 --> 00:05:06.603
And if we had, let's say we
allowed an alpha channel here,

75
00:05:06.603 --> 00:05:10.580
maybe this one might work
in a more interesting way.

76
00:05:10.580 --> 00:05:11.986
So now we'll get both.

77
00:05:11.986 --> 00:05:14.840
We'll get the three place tuple and
the four place tuple.

78
00:05:14.840 --> 00:05:15.610
Why?

79
00:05:15.610 --> 00:05:17.970
They're both different
kinds of number arrays.

80
00:05:17.970 --> 00:05:21.271
So one of the key insights I wanna
make sure you walk away with,

81
00:05:21.271 --> 00:05:24.270
how to think of this
specific versus general.

82
00:05:24.270 --> 00:05:27.150
What's this extends keyword all about?

83
00:05:27.150 --> 00:05:31.245
And this is really important in terms
of making sense of what we're looking

84
00:05:31.245 --> 00:05:32.210
at here.

85
00:05:32.210 --> 00:05:36.868
Yeah, so in plain language,
what this type is all about,

86
00:05:36.868 --> 00:05:43.256
we're extracting the subset of favorite
colors that is assignable to string.

87
00:05:43.256 --> 00:05:47.279
That's specifically this thing up here,
right,

88
00:05:47.279 --> 00:05:52.055
where we're grabbing the subset
that is assignable to a type

89
00:05:54.760 --> 00:05:57.390
Exclude is the opposite of extract.

90
00:05:58.780 --> 00:06:06.180
And it's useful if you can very easily
define what you wish to leave behind.

91
00:06:06.180 --> 00:06:10.758
So it's the same exact example,
I've just changed the word

92
00:06:10.758 --> 00:06:15.260
extract to exclude, and
here we're saying, show me all.

93
00:06:16.400 --> 00:06:22.150
Show me everything that
doesn't match string.

94
00:06:22.150 --> 00:06:25.610
Show me everything that
doesn't match string.

95
00:06:25.610 --> 00:06:29.350
So we get our array of numbers and
we get our object.

96
00:06:29.350 --> 00:06:33.890
Those are the non string
parts of favorite colors.

97
00:06:33.890 --> 00:06:35.790
So, how does it work?

98
00:06:37.540 --> 00:06:39.820
Here are the definitions
of these two types.

99
00:06:39.820 --> 00:06:43.932
This is pulled straight out of
the TypeScript source code, and it's very,

100
00:06:43.932 --> 00:06:47.060
very similar to what we
were working with before.

101
00:06:47.060 --> 00:06:50.730
So in plain language,
here's what's happening.

102
00:06:50.730 --> 00:06:53.851
We have a type T,
this is a type parameter, and

103
00:06:53.851 --> 00:06:56.190
it's what we're operating on.

104
00:06:56.190 --> 00:06:59.570
In this case up here,
we used favorite colors, right?

105
00:06:59.570 --> 00:07:01.660
It's this mixed bag.

106
00:07:01.660 --> 00:07:04.990
It's the haystack in which
we're searching for a needle.

107
00:07:06.980 --> 00:07:12.360
And then we have typed U,
U describes what we're searching for.

108
00:07:12.360 --> 00:07:19.190
So you can think of this almost like we
look at all the different parts of type T,

109
00:07:19.190 --> 00:07:24.980
especially if it is a union type
with this whole operator here.

110
00:07:24.980 --> 00:07:28.799
We're gonna look at each piece of it and

111
00:07:28.799 --> 00:07:34.960
we're going to see which of
those pieces extend from you.

112
00:07:34.960 --> 00:07:40.388
Which of them match U or
are even more specific than U but

113
00:07:40.388 --> 00:07:44.643
still match the minimum requirement of U?

114
00:07:44.643 --> 00:07:51.860
If this turns out to be true in
the exclude case, we leave it out.

115
00:07:51.860 --> 00:07:56.880
We leave out whatever matches,
otherwise we let it pass through.

116
00:07:56.880 --> 00:07:58.840
And this is the only
difference between the two.

117
00:07:58.840 --> 00:08:01.880
It's never colon T versus T colon never.

118
00:08:01.880 --> 00:08:04.410
It's just the inverse condition, right?

119
00:08:04.410 --> 00:08:08.950
So this is a good example of how
you might use conditional types.

