WEBVTT

1
00:00:00.230 --> 00:00:05.291
Finally, the last sub part
of mapped types that I'd

2
00:00:05.291 --> 00:00:11.370
like to talk about is,
how do we filter properties out?

3
00:00:11.370 --> 00:00:16.235
So, we've already seen how we
have some control over what

4
00:00:16.235 --> 00:00:20.720
is included via filtering
the property key, right?

5
00:00:20.720 --> 00:00:26.890
So we used extract before, and
we can actually, this is pretty cool.

6
00:00:26.890 --> 00:00:30.940
We can use a template literal type,

7
00:00:30.940 --> 00:00:35.125
almost like a query tool here to say,

8
00:00:35.125 --> 00:00:42.150
show me those keys of document
that begin with the word query.

9
00:00:42.150 --> 00:00:43.960
That's pretty cool, right?

10
00:00:43.960 --> 00:00:49.940
It's almost like a find the substring
like a regular expression, right?

11
00:00:49.940 --> 00:00:54.924
Which of these keys begins with
query because it's any string that

12
00:00:54.924 --> 00:00:56.440
begins with query.

13
00:00:56.440 --> 00:00:59.215
That's what we're matching against.

14
00:00:59.215 --> 00:01:04.330
So we get all these QueryCommandEnabled,
querySelector, querySelectorAll, etc.

15
00:01:04.330 --> 00:01:07.272
So those are the keys of interest and

16
00:01:07.272 --> 00:01:11.991
we can produce a filtered
version of this document type.

17
00:01:11.991 --> 00:01:17.794
Meaning we only get those properties that
are specified by the keys of our choosing,

18
00:01:17.794 --> 00:01:21.900
because that's what we're iterating over,
right?

19
00:01:21.900 --> 00:01:26.705
We're saying K is each of these 1,
2, 3, 4, 5, 6, 7 things,

20
00:01:26.705 --> 00:01:29.800
right, to each of these seven things.

21
00:01:29.800 --> 00:01:34.143
For each of them, we'll go look at
the document, get the value type, and

22
00:01:34.143 --> 00:01:36.810
that's what we're gonna have there.

23
00:01:36.810 --> 00:01:42.968
So this is one mechanism of filtering,
if the key is the determining factor,

24
00:01:42.968 --> 00:01:46.774
but what if we want to
filter based on the value?

25
00:01:46.774 --> 00:01:51.836
For example, what if we wanted
the things on the document object

26
00:01:51.836 --> 00:01:57.850
that are functions who return either
an element or an element list, right?

27
00:01:57.850 --> 00:02:02.199
And I'm kinda thinking about
querySelector and querySelectorAll,

28
00:02:02.199 --> 00:02:06.880
just things that we use for
retrieving or creating DOM nodes.

29
00:02:06.880 --> 00:02:10.299
Now, in advance,
I couldn't tell you which keys, I mean,

30
00:02:10.299 --> 00:02:14.606
I can tell you querySelector,
querySelectorAll, are gonna be included.

31
00:02:14.606 --> 00:02:20.201
But I can't tell you which
things those would be, right?

32
00:02:20.201 --> 00:02:23.200
So we're gonna need to think
about how to approach this.

33
00:02:23.200 --> 00:02:26.734
And first,
we're gonna go down the wrong road.

34
00:02:26.734 --> 00:02:28.484
So I wanna be very clear.

35
00:02:28.484 --> 00:02:32.347
I'm showing you something
that doesn't work, but

36
00:02:32.347 --> 00:02:37.185
I think it's a useful midpoint as
we approach a better solution.

37
00:02:37.185 --> 00:02:42.852
So first we're going to use never,
we're gonna use a flawed approach.

38
00:02:42.852 --> 00:02:46.608
Here's a disclaimer, don't copy and
paste this code into your app, please.

39
00:02:46.608 --> 00:02:52.865
We're gonna use a flawed approach and
use a conditional type with a mapped type,

40
00:02:55.298 --> 00:03:00.340
In order to do this filtering, so
I'm gonna read this to you in pieces.

41
00:03:00.340 --> 00:03:08.040
So we're iterating over all of the keys
of document and we're performing a test.

42
00:03:08.040 --> 00:03:08.880
What's the test?

43
00:03:08.880 --> 00:03:14.211
What's our condition, is the value
type for a given property key.

44
00:03:14.211 --> 00:03:16.709
It doesn't extend.

45
00:03:16.709 --> 00:03:22.488
Right, is it at least a function
with an arbitrary number of

46
00:03:22.488 --> 00:03:29.220
arguments that returns either
an element or an array of elements.

47
00:03:29.220 --> 00:03:31.882
This condition is the right one for sure.

48
00:03:31.882 --> 00:03:36.147
This will be represented in
our good solution in a moment.

49
00:03:36.147 --> 00:03:40.330
So we're comparing this to see if
it matches what we're looking for.

50
00:03:40.330 --> 00:03:47.370
And if it does, we let it pass
through Document [K], right?

51
00:03:47.370 --> 00:03:53.685
And if it doesn't, we say,
never, hoping it will disappear.

52
00:03:53.685 --> 00:03:58.731
But it doesn't, as you can see up here,
we end up with every single

53
00:03:58.731 --> 00:04:04.433
property that is on document including
235 that have been suppressed.

54
00:04:04.433 --> 00:04:08.448
And although the things that match,

55
00:04:08.448 --> 00:04:12.730
I mean they're still usable, right?

56
00:04:12.730 --> 00:04:14.453
We don't say never hear.

57
00:04:14.453 --> 00:04:16.289
It's totally usable.

58
00:04:16.289 --> 00:04:18.155
Although that still works,

59
00:04:18.155 --> 00:04:22.281
it's not really gonna help us
when it comes to autocompletes.

60
00:04:22.281 --> 00:04:24.097
We're gonna go here and we'll say, okay,

61
00:04:24.097 --> 00:04:27.002
let's see what subset of
things I have available.

62
00:04:27.002 --> 00:04:31.511
That's a never these are all nevers,
it's just a bunch of noise,

63
00:04:31.511 --> 00:04:33.420
a bunch of garbage in here.

64
00:04:33.420 --> 00:04:35.620
AppendChild, is that one of them.

65
00:04:35.620 --> 00:04:39.120
So that one didn't get zeroed out.

66
00:04:39.120 --> 00:04:42.478
But these gotten zeroed out,
it's just a bunch of junk in here.

67
00:04:42.478 --> 00:04:46.240
It's not giving me good feedback
as to what I can successfully use.

68
00:04:46.240 --> 00:04:51.901
So, hopefully we all agree,
undesirable result.

69
00:04:51.901 --> 00:04:53.487
How can we make this better?

70
00:04:56.572 --> 00:05:01.030
A better approach is gonna involve
filtering those keys first.

71
00:05:02.730 --> 00:05:07.569
And then once we have the set
of keys that match our

72
00:05:07.569 --> 00:05:12.897
condition which is gonna
be a value based condition.

73
00:05:12.897 --> 00:05:19.658
Then we'll be in a position where we can
get something that looks more cleaned up.

74
00:05:19.658 --> 00:05:23.617
And I first want you to
witness that this works and

75
00:05:23.617 --> 00:05:28.265
we're gonna peel it all back,
and build up to it slowly.

76
00:05:28.265 --> 00:05:34.794
So when I say that this works, first,
there aren't over 200 things here and

77
00:05:34.794 --> 00:05:40.490
the things that are here,
I can't spot any nevers on my screen.

78
00:05:40.490 --> 00:05:46.040
So let's compare, there's seven more and
up here there were 235 more.

79
00:05:46.040 --> 00:05:50.682
So it seems it's much more filtered down.

80
00:05:50.682 --> 00:05:54.581
And I'm gonna also sanity test and
say, well, adopt node,

81
00:05:54.581 --> 00:05:58.023
create element, querySelector,
do these things,

82
00:05:58.023 --> 00:06:02.393
do they feel like they're for
DOM query, or DOM element creation?

83
00:06:02.393 --> 00:06:10.604
Yes, just on a conceptual level these
seem like what I was looking for.

84
00:06:10.604 --> 00:06:16.420
And then finally down here,
this was one of the things I selected.

85
00:06:16.420 --> 00:06:19.103
So, I'm gonna kick out to
the TypeScript Playground.

86
00:06:19.103 --> 00:06:22.962
And this is the kinda thing I would
encourage you to pop this open on your own

87
00:06:22.962 --> 00:06:25.240
machines and follow along with me.

88
00:06:25.240 --> 00:06:29.495
Because what you're about
to see is somebody who's

89
00:06:29.495 --> 00:06:33.760
familiar with working with
these kinda types, me.

90
00:06:33.760 --> 00:06:39.845
You're gonna see how I deal
with this thing up here,

91
00:06:39.845 --> 00:06:45.947
which is nutty and
complicated, and hard to debug.

92
00:06:45.947 --> 00:06:53.050
And you're going to see how I make
progress towards getting it to work.

93
00:06:53.050 --> 00:06:57.477
Because as, if you've been playing
with this throughout the course,

94
00:06:57.477 --> 00:06:59.559
there's no debugger for types.

95
00:06:59.559 --> 00:07:03.401
This is not really code that runs,
you're just defining constraints.

96
00:07:03.401 --> 00:07:05.700
So when things get complicated, and

97
00:07:05.700 --> 00:07:10.533
this is the equivalent of having many
things on the same line of code, right?

98
00:07:10.533 --> 00:07:15.536
Where it's just doing a lot, one higher
order function that does everything.

99
00:07:15.536 --> 00:07:19.672
It's really challenging to troubleshoot.

100
00:07:19.672 --> 00:07:22.913
So you're gonna see how
I peel this back and

101
00:07:22.913 --> 00:07:27.699
how I can start with breaking
this up into simple small things.

102
00:07:27.699 --> 00:07:31.790
And layer my way up into the thing
that eventually is going to work.

103
00:07:34.799 --> 00:07:40.500
Okay, so I'm gonna actually come and
add our solution and create a copy of it.

104
00:07:40.500 --> 00:07:45.801
So the approach that
we wanna take here is,

105
00:07:45.801 --> 00:07:50.956
we want to select those keys, whose value

106
00:07:50.956 --> 00:07:55.900
type is what I'm looking for, right?

107
00:07:55.900 --> 00:08:02.278
So, we wanna go and find query selector
and identify that is what we want.

108
00:08:02.278 --> 00:08:06.147
Because document.query
selector is matching

109
00:08:06.147 --> 00:08:09.632
the condition that we're filtering for.

110
00:08:09.632 --> 00:08:12.865
We're not just picking
it because of its name

111
00:08:12.865 --> 00:08:15.853
we're picking it because it has a value.

112
00:08:15.853 --> 00:08:17.690
That is what we're looking for.

113
00:08:17.690 --> 00:08:20.116
And that value is this.

114
00:08:20.116 --> 00:08:25.932
And I'm actually gonna deviate from
our written solution there for

115
00:08:25.932 --> 00:08:33.190
a second just to add some more verbose, a
greater explicit set of information here.

116
00:08:33.190 --> 00:08:38.830
So we'll just call this, ElementFunction,

117
00:08:39.963 --> 00:08:45.020
Element, and it's this, right?

118
00:08:45.020 --> 00:08:47.243
Just so we can refer to it by name and

119
00:08:47.243 --> 00:08:50.246
we get some of that
punctuation out of our way.

120
00:08:50.246 --> 00:08:57.162
So we can take ElementFunction, we'll
put it here, cuz that was working, cool.

121
00:09:04.410 --> 00:09:07.591
So FilteredKeys, I'm actually
gonna get rid of this for now.

122
00:09:09.500 --> 00:09:13.653
All right, so let's look at this here.

123
00:09:13.653 --> 00:09:18.298
So we're taking in a type, right?

124
00:09:18.298 --> 00:09:22.450
The fact that we see keyof T,
here and T[P],

125
00:09:22.450 --> 00:09:26.934
this is gonna be the thing
we're iterating over.

126
00:09:26.934 --> 00:09:35.724
So let's call it,
We'll call it ToFilter, right?

127
00:09:35.724 --> 00:09:38.037
We're filtering this thing.

128
00:09:38.037 --> 00:09:40.653
And then you will call this,

129
00:09:46.885 --> 00:09:50.090
Condition, something like condition,
right?

130
00:09:50.090 --> 00:09:53.864
It's the type that represents
what we're trying to match.

131
00:09:56.456 --> 00:10:01.501
So we're going to loop
over all of the keys.

132
00:10:03.364 --> 00:10:07.798
And then this is our little i in our for
loop, right?

133
00:10:07.798 --> 00:10:11.866
For each key, this is our parameter,
see that parameter in the tooltip?

134
00:10:11.866 --> 00:10:13.788
P for parameter.

135
00:10:13.788 --> 00:10:20.868
We're gonna go and grab the value type
out of whatever we're filtering from.

136
00:10:20.868 --> 00:10:23.965
We're going to check it
against the condition, right?

137
00:10:23.965 --> 00:10:30.645
Is the value type assignable
to whatever we passed in?

138
00:10:30.645 --> 00:10:31.814
It's gonna be this, right?

139
00:10:31.814 --> 00:10:36.102
Is it a function that returns
an element or an array of elements?

140
00:10:36.102 --> 00:10:39.905
And if so, this is weird,
we've never seen this before.

141
00:10:39.905 --> 00:10:44.964
We saw a whole bunch of code
that would do this, Right,

142
00:10:44.964 --> 00:10:47.228
we're like, did it match the condition?

143
00:10:47.228 --> 00:10:48.753
Let it pass through.

144
00:10:48.753 --> 00:10:50.758
No, that's not what we're doing.

145
00:10:50.758 --> 00:10:56.560
If it works, if it passes the condition,
we're sending the parameter through.

146
00:10:56.560 --> 00:11:00.702
This is the key, not the value,
otherwise, never.

147
00:11:00.702 --> 00:11:03.746
So look at what we get out here.

148
00:11:03.746 --> 00:11:07.001
And let me make a smaller type so
we can see this more easily.

149
00:11:10.519 --> 00:11:17.001
So we've got this, and
we'll call this RelevantColorKeys.

150
00:11:19.823 --> 00:11:27.213
And we're going to filter for,
Actually those should be numbers, right?

151
00:11:27.213 --> 00:11:33.634
Just let's keep it consistent with way
I've treated colors throughout the day.

152
00:11:33.634 --> 00:11:40.559
Look, green number, save, so FilteredKeys.

153
00:11:40.559 --> 00:11:43.116
So we've got this color,
that's what we're filtering over.

154
00:11:43.116 --> 00:11:50.131
And let's just make sure that everything
passes straight through the way it should.

155
00:11:50.131 --> 00:11:52.827
I mean,
I expect this to of course work, great.

156
00:11:52.827 --> 00:11:55.934
So everything passes through
when I remove that condition.

157
00:11:55.934 --> 00:12:01.841
And then if this extends this condition,

158
00:12:01.841 --> 00:12:06.917
I should see P, what if we did this?

159
00:12:12.538 --> 00:12:15.911
You know what, I'm also gonna comment out.

160
00:12:15.911 --> 00:12:20.739
No, I have no idea why this
would interfere with anything.

161
00:12:20.739 --> 00:12:24.216
So, okay, so we're back on track here.

162
00:12:24.216 --> 00:12:30.713
Now I can explain what's going
on here pretty easily now.

163
00:12:30.713 --> 00:12:35.247
So, we're iterating over all
properties of Color, right?

164
00:12:35.247 --> 00:12:39.141
We're looking at red, we're looking
at green, we're looking at blue, and

165
00:12:39.141 --> 00:12:41.154
we're comparing them against number.

166
00:12:41.154 --> 00:12:44.900
We're comparing the value
types against number, right?

167
00:12:44.900 --> 00:12:48.417
So this is number, this is gonna be here.

168
00:12:48.417 --> 00:12:52.406
This will be red, and then this here,
it'll end up being a number.

169
00:12:52.406 --> 00:12:55.817
So if we were to do this,
string, string for red,

170
00:13:00.438 --> 00:13:06.640
And then string for blue,
now we can see that our RelevantColorKeys.

171
00:13:06.640 --> 00:13:09.244
So green is gonna kind of pass through.

172
00:13:09.244 --> 00:13:14.001
And then look everything else turns
to a never because they don't match.

173
00:13:14.001 --> 00:13:18.068
Now, what we want are the property keys.

174
00:13:18.068 --> 00:13:22.082
Right, so we're still getting this object
type out, we want the property keys.

175
00:13:22.082 --> 00:13:27.510
Well, we can take advantage of
the fact that an indexed access type,

176
00:13:27.510 --> 00:13:33.519
we can send, we can sort of project
something through an index access type.

177
00:13:33.519 --> 00:13:37.184
So I get this object type out.

178
00:13:37.184 --> 00:13:38.702
What if I did this?

179
00:13:43.262 --> 00:13:45.780
I just get green.

180
00:13:45.780 --> 00:13:50.983
So, it's almost like I'm starting
with this and then I'm saying,

181
00:13:50.983 --> 00:13:57.546
okay, if I pass in the key of, right, it's
just gonna be never, or green, or never.

182
00:13:57.546 --> 00:14:03.323
And remember, whenever we or
with never, the never disappears.

183
00:14:14.605 --> 00:14:18.558
Nevers disappear when you or with them.

184
00:14:18.558 --> 00:14:23.714
So if we just simply say keyof Color,
we're basically saying,

185
00:14:23.714 --> 00:14:27.437
I'm gonna transform all
of the keys of color,

186
00:14:27.437 --> 00:14:30.598
a union type of all of the keys of color.

187
00:14:30.598 --> 00:14:32.903
And I'm gonna project them through this.

188
00:14:32.903 --> 00:14:36.263
And I'll get a union type
of all of the values, but

189
00:14:36.263 --> 00:14:40.996
not all the values of color,
cuz we've sort of modified it a bit here.

190
00:14:40.996 --> 00:14:44.459
We'll get all of the values of this,

191
00:14:44.459 --> 00:14:48.830
in a union type, never,
or green, or never.

192
00:14:52.649 --> 00:14:55.595
And that's why we get just green.

193
00:14:55.595 --> 00:14:59.819
Now, we can actually move this up here and

194
00:14:59.819 --> 00:15:06.077
say keyof ToFilter, And
it'll still be green.

195
00:15:06.077 --> 00:15:09.744
So now if we uncomment this and these,

196
00:15:09.744 --> 00:15:15.710
I think there may be one last
thing we have to do, and there is.

197
00:15:15.710 --> 00:15:18.685
So our last problem to solve here,

198
00:15:18.685 --> 00:15:23.415
we've hit this before when
using index access types.

199
00:15:23.415 --> 00:15:27.903
And basically it's saying that,
look, I see you have this thing here.

200
00:15:27.903 --> 00:15:32.240
It's all of these keys, but they've passed
through a couple things by this point.

201
00:15:32.240 --> 00:15:36.946
How do I know they're
still key of document?

202
00:15:36.946 --> 00:15:40.788
If you're gonna reach into document and
access,

203
00:15:40.788 --> 00:15:46.930
if you're gonna use this thing here,
how do I know that that's gonna work out?

204
00:15:46.930 --> 00:15:51.667
Well, the way we handled that before,
was we said, hey, look,

205
00:15:51.667 --> 00:15:57.007
if you don't trust me, I mean, I know
if we look at the keys of document and

206
00:15:57.007 --> 00:16:00.652
we look at what I have,
they overlap completely.

207
00:16:00.652 --> 00:16:06.560
Meaning, Everything I have is
included in the set of possible keys.

208
00:16:06.560 --> 00:16:08.990
So I'm happy to do this.

209
00:16:08.990 --> 00:16:13.142
I know it's a no up, but if it makes
you comfortable, all the better.

210
00:16:13.142 --> 00:16:19.240
And now we are, I believe,
should be where we need to be.

211
00:16:20.950 --> 00:16:23.330
Key of document, yep, and there it works.

212
00:16:23.330 --> 00:16:27.230
There's our query selector,
returns an HTML input element.

213
00:16:27.230 --> 00:16:29.340
And look at that,
this is just what we wanted.

214
00:16:29.340 --> 00:16:35.430
It's like a subset of document that
only relates to DOM manipulation.

215
00:16:35.430 --> 00:16:40.209
So imagine now if you have a React app and
you've ever done server side rendering,

216
00:16:40.209 --> 00:16:43.602
you know that sometimes you have
to do some node stuff maybe

217
00:16:43.602 --> 00:16:46.649
you register a service worker,
or some code runs and

218
00:16:46.649 --> 00:16:51.040
it's like, you tried to reach
into window and it's not there.

219
00:16:51.040 --> 00:16:56.036
Well, this would let you kind of put some
confines around that API that you're

220
00:16:56.036 --> 00:17:01.192
not supposed to be accessing if you're
trying to serve or render your React app.

221
00:17:01.192 --> 00:17:08.395
Another example, here it is, so
I built a Chrome extension recently.

222
00:17:08.395 --> 00:17:13.377
And when I'm defining
the parts of the extension

223
00:17:13.377 --> 00:17:17.871
API that I wish to talk to,
I make sure that,

224
00:17:17.871 --> 00:17:22.385
I don't want to reach in and
touch too much.

225
00:17:22.385 --> 00:17:27.496
Because although I can use a lot of
things on the Chrome extension API,

226
00:17:27.496 --> 00:17:31.741
depending on what permissions
my extension is asked for,

227
00:17:31.741 --> 00:17:34.874
things will error or they won't, right?

228
00:17:34.874 --> 00:17:39.703
Unless I have the user's permission
to access their location data,

229
00:17:39.703 --> 00:17:40.960
I can't do that.

230
00:17:42.480 --> 00:17:47.989
This lets me put boundaries around what's
gonna be presented to me in autocompletes,

231
00:17:47.989 --> 00:17:48.770
right?

232
00:17:48.770 --> 00:17:54.600
Where I only want to see
this stuff showing up to me.

233
00:17:54.600 --> 00:17:58.248
And if I need some other part of the API,
well, I'd have to come back here and

234
00:17:58.248 --> 00:17:59.610
I'd have to add it.

235
00:17:59.610 --> 00:18:03.778
And that'll be the trigger for
me to say, when I ask for

236
00:18:03.778 --> 00:18:09.410
permission from users, and in a Chrome
extension that's gonna be here.

237
00:18:09.410 --> 00:18:14.536
When I say, I need to be able
to access the active tab and

238
00:18:14.536 --> 00:18:21.469
the tabs thing, right, all these
permissions, that'll be my signal.

239
00:18:21.469 --> 00:18:23.865
I'm changing the boundaries,

240
00:18:23.865 --> 00:18:29.376
because I set up this nice sort of
confinement around what I was building.

241
00:18:29.376 --> 00:18:36.945
And furthermore, I think here, so when I
have to stub out parts of the Chrome API,

242
00:18:36.945 --> 00:18:44.420
I only have to deal with those pieces
that I've said I'm going to access.

243
00:18:44.420 --> 00:18:49.719
So when I'm stubbing things out, I know,
look, I only need this ad listener thing.

244
00:18:49.719 --> 00:18:54.810
Here on this type I've said, look,
I only have these properties on there.

245
00:18:54.810 --> 00:18:56.543
I plucked these things off and

246
00:18:56.543 --> 00:18:59.700
I only wanna see that subset
of things showing up.

247
00:18:59.700 --> 00:19:04.630
Well, now I have this type safety that
tells me whenever I go out of bounds,

248
00:19:04.630 --> 00:19:05.190
right?

249
00:19:05.190 --> 00:19:09.944
I have this partial Chrome API
instead of the full blown thing that

250
00:19:09.944 --> 00:19:14.709
will show me everything and
who knows what you have to stub there?

251
00:19:14.709 --> 00:19:18.640
It kind of depends on where
you're writing your code.

252
00:19:21.107 --> 00:19:23.750
So that's a practical use case.

253
00:19:23.750 --> 00:19:29.078
I'm going to write up the types for
a little mini data

254
00:19:29.078 --> 00:19:35.386
layer using a variety of
the concepts that we've seen so far.

255
00:19:35.386 --> 00:19:39.956
But I do want you to celebrate
one thing at this moment.

256
00:19:39.956 --> 00:19:43.958
And that is, that this type here,

257
00:19:43.958 --> 00:19:50.031
this FilteredKeys thing and
the stuff you saw here,

258
00:19:50.031 --> 00:19:55.690
if we go back to the very
beginning of the course,

259
00:19:55.690 --> 00:20:00.659
we had a slide on
the beginning of the course

260
00:20:00.659 --> 00:20:05.210
where we set this out as our goal.

261
00:20:05.210 --> 00:20:06.860
And we've now accomplished it.

262
00:20:06.860 --> 00:20:10.402
And the way we do it is just
sort of piecing it together,

263
00:20:10.402 --> 00:20:13.944
chunk by chunk by chunk, and
sort of expanding it out so

264
00:20:13.944 --> 00:20:17.645
that we're not maybe not trying to do so
much on one line.

265
00:20:17.645 --> 00:20:20.170
But then when we get it right,
we can put it all back together.

266
00:20:21.500 --> 00:20:25.815
So hopefully we're feeling a little bit
more comfortable at taking complicated

267
00:20:25.815 --> 00:20:28.870
things like this and
sort of slicing them up a little bit.

