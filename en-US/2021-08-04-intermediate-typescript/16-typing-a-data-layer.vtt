WEBVTT

1
00:00:00.000 --> 00:00:04.822
As a final kinda capstone
to intermediate TypeScript,

2
00:00:04.822 --> 00:00:09.747
we're going to do a little bit
of a practical exercise and

3
00:00:09.747 --> 00:00:14.668
that is to make a well typed data layer or
a data store using

4
00:00:14.668 --> 00:00:19.304
the concepts that we've
learned in the class today.

5
00:00:19.304 --> 00:00:26.341
So, and I'm just in the playground here,
and you could copy this code if you like.

6
00:00:26.341 --> 00:00:30.857
But all I've got is three classes,
one is called book,

7
00:00:30.857 --> 00:00:34.327
one is called movie, one's called song.

8
00:00:34.327 --> 00:00:38.408
And I've just chosen a different
meaningful property,

9
00:00:38.408 --> 00:00:43.689
which we'll turn into a class field for
each of these different classes.

10
00:00:43.689 --> 00:00:50.567
So if we did b is new book, we'd have to
give it an author, maybe I'm the author.

11
00:00:50.567 --> 00:00:53.985
And we can see that b.authored
it gives us this type back, and

12
00:00:53.985 --> 00:00:58.330
that's because we're using these nice
little shorthand param properties,

13
00:00:58.330 --> 00:01:01.912
maybe you heard us talk about
this in TypeScript fundamentals.

14
00:01:01.912 --> 00:01:09.261
So, ultimately, what I want is
an API that looks kind of like this.

15
00:01:09.261 --> 00:01:12.489
I wanna be able to create a new store,

16
00:01:12.489 --> 00:01:17.395
this is like a data store,
that's what I mean by store.

17
00:01:17.395 --> 00:01:21.859
And then I wanna be able
to do something like

18
00:01:21.859 --> 00:01:28.060
store.get('book'), and
this should return a book.

19
00:01:28.060 --> 00:01:34.358
And I wanna be able to do getAll, and
this should return an array of books.

20
00:01:34.358 --> 00:01:41.668
And maybe create and
this should take an arb if it's a book.

21
00:01:41.668 --> 00:01:43.065
Hopefully we get the idea here.

22
00:01:43.065 --> 00:01:48.213
We want a kind of a nice little crud,
some portion of a crud like

23
00:01:48.213 --> 00:01:53.559
data store that gives me some good
types when I retrieve things,

24
00:01:53.559 --> 00:01:59.301
and it gives me some type safety
when I'm trying to work with things,

25
00:01:59.301 --> 00:02:01.293
trying to modify them.

26
00:02:01.293 --> 00:02:04.990
So let's actually, I created a book here,

27
00:02:08.937 --> 00:02:15.425
Let's pass that in, let's use this as
kind of a little test case, right?

28
00:02:15.425 --> 00:02:18.923
And let's see if we can do this one,

29
00:02:18.923 --> 00:02:24.402
we'll say update, and
this is gonna be kind of a patch,

30
00:02:24.402 --> 00:02:30.465
where I'm gonna pass some
incomplete subset of fields here,

31
00:02:30.465 --> 00:02:37.140
maybe I'm just editing the title or
something, call it a partial.

32
00:02:37.140 --> 00:02:40.335
So this would be a book ID.

33
00:02:42.531 --> 00:02:50.763
And then, Something like that.

34
00:02:50.763 --> 00:02:54.841
So we want create and update and
then get a collection,

35
00:02:54.841 --> 00:02:57.955
and we want good type safety around this.

36
00:02:57.955 --> 00:03:05.280
And none of this works yet, so
we're gonna have to make it work.

37
00:03:05.280 --> 00:03:08.832
So, clearly, we're gonna need
these methods here, right?

38
00:03:08.832 --> 00:03:11.471
The getAll, create, and update.

39
00:03:19.038 --> 00:03:22.960
So now the methods exist but
they don't take anything,

40
00:03:22.960 --> 00:03:26.052
they don't take the right types of things.

41
00:03:26.052 --> 00:03:29.996
And they all return void right now,
so we need to do some work.

42
00:03:29.996 --> 00:03:33.351
Now I do notice that we've got book,
book, book, book,

43
00:03:33.351 --> 00:03:36.244
we're referring to kind
of a record type by name.

44
00:03:36.244 --> 00:03:42.616
So what I'm gonna do here is
create a map of my records, and

45
00:03:42.616 --> 00:03:48.481
by map I just made a type that
gives me keys and values.

46
00:03:48.481 --> 00:03:52.739
We'll call this EntityMap, since we've
talked about the word record before in

47
00:03:52.739 --> 00:03:55.692
a different context, and
I don't want to overload it.

48
00:04:06.371 --> 00:04:09.256
Great, so we've got movie, book, and song.

49
00:04:09.256 --> 00:04:14.419
The keys are the names I'm gonna use
to refer to this kind of entity,

50
00:04:14.419 --> 00:04:18.496
and then these are the follow
on classes and, sorry,

51
00:04:18.496 --> 00:04:23.585
they will be interfaces,
because they're in the type position.

52
00:04:23.585 --> 00:04:29.690
I mean, we're defining them as classes but
they will be the interface part of it,

53
00:04:29.690 --> 00:04:33.416
meaning the type of
an instance of these classes.

54
00:04:33.416 --> 00:04:38.723
So in all of these methods here,
I could say, kind, by the way, if you ever

55
00:04:38.723 --> 00:04:44.480
see kind in TypeScript code, it's because
we don't wanna write the word type.

56
00:04:44.480 --> 00:04:47.934
That's a special thing,
that's like a type alias.

57
00:04:47.934 --> 00:04:50.629
Kind is a good alternative to use.

58
00:04:50.629 --> 00:04:58.645
So, and this will be,
A key of EntityMap, great.

59
00:04:58.645 --> 00:05:01.532
So now this book thing is gonna be happy.

60
00:05:01.532 --> 00:05:04.679
Now I actually want this to be generic,
right?

61
00:05:04.679 --> 00:05:07.960
So we'll say k for kind.

62
00:05:15.413 --> 00:05:20.036
And the reason is, I need to create
a relationship between things.

63
00:05:20.036 --> 00:05:24.695
So if you remember back to
the TypeScript fundamentals,

64
00:05:24.695 --> 00:05:28.585
when we talked about generics and
type params.

65
00:05:28.585 --> 00:05:32.191
The whole point of this
is we're defining some

66
00:05:32.191 --> 00:05:36.358
parameter that describes
a linkage between things.

67
00:05:36.358 --> 00:05:43.071
So, in the case of get,
the relationship is I'm asking for

68
00:05:43.071 --> 00:05:47.653
a book, and let's say we provide an ID.

69
00:05:50.674 --> 00:05:54.956
And I'm gonna return a book, or maybe
like a promise that resolves to a book.

70
00:05:54.956 --> 00:05:57.200
Let's pretend this is all synchronous for
now,

71
00:05:57.200 --> 00:06:00.167
you can make it async by just
making all these promises instead.

72
00:06:00.167 --> 00:06:04.984
But we're gonna return EntityMap[k],

73
00:06:04.984 --> 00:06:10.073
this is an indexed access type here,
right?

74
00:06:10.073 --> 00:06:15.254
We're saying, project the word
book through this EntityMap.

75
00:06:15.254 --> 00:06:18.666
All right, here's book,
grab the value, bring it back.

76
00:06:18.666 --> 00:06:22.319
And so over here, look at our return type,

77
00:06:22.319 --> 00:06:26.889
when we use this string book here,
we get a book back.

78
00:06:26.889 --> 00:06:31.674
Watch this, when we use movie,
check that out,

79
00:06:31.674 --> 00:06:34.610
we're getting a movie back.

80
00:06:34.610 --> 00:06:38.698
So depending on that
word that we're using,

81
00:06:38.698 --> 00:06:42.901
we get the right type of
entity returned to us.

82
00:06:42.901 --> 00:06:46.896
Now, we can do the same thing with
the collection, it should be very similar.

83
00:06:46.896 --> 00:06:50.591
But let's say we don't need an ID here,
since we're getting them all, and

84
00:06:50.591 --> 00:06:52.983
I'm just gonna put square
brackets after this.

85
00:06:55.346 --> 00:06:59.866
And let's see what's happening here,
getAll('book'), we get an array of books.

86
00:06:59.866 --> 00:07:03.840
So this is a great use of generics,

87
00:07:03.840 --> 00:07:07.958
a great use of an index access type.

88
00:07:07.958 --> 00:07:11.934
Create, so here, we want to

89
00:07:11.934 --> 00:07:16.755
take an object to create, right?

90
00:07:16.755 --> 00:07:23.330
And this is gonna be an EntityMap[k],
and this will be a void.

91
00:07:23.330 --> 00:07:27.118
So here, if we were to say,
I'm creating a book,

92
00:07:27.118 --> 00:07:31.465
and in here we get author,
right, get some validation.

93
00:07:31.465 --> 00:07:38.238
If we gonna change this word to movie or
to song, song wants artist,

94
00:07:42.616 --> 00:07:45.276
From Mark G's new album, right?

95
00:07:45.276 --> 00:07:49.414
So, we get that nice linkage
between the first argument,

96
00:07:49.414 --> 00:07:55.158
which is a literal type, it's a statement
of which record we're operating on,

97
00:07:55.158 --> 00:08:00.158
and that gives us some really great
control over the second argument.

98
00:08:00.158 --> 00:08:00.946
What about update?

99
00:08:00.946 --> 00:08:07.233
So we can actually just borrow this from
the create, and we will say to update,

100
00:08:07.233 --> 00:08:13.540
or actually we need an ID here, cuz
we're referring to an individual record.

101
00:08:13.540 --> 00:08:20.207
So we need an ID because we're
referring to an individual record, and

102
00:08:20.207 --> 00:08:25.752
the only thing we're gonna
change is we'll say partial.

103
00:08:25.752 --> 00:08:30.195
So if you remember what partial is,
if we look at the type,

104
00:08:30.195 --> 00:08:35.549
it's gonna loop over all of
the properties in whatever it's given and

105
00:08:35.549 --> 00:08:37.929
make the value type optional.

106
00:08:37.929 --> 00:08:43.551
So this means that if we had,
let's say, books have a title,

107
00:08:46.443 --> 00:08:51.194
In addition to an author, so
this would let us say I'm gonna

108
00:08:51.194 --> 00:08:56.325
update this book, and
I could just do the author, or actually,

109
00:08:56.325 --> 00:09:00.619
I could do nothing at all,
this is sort of a no update.

110
00:09:00.619 --> 00:09:04.028
But we get some validation,
but we may just have a piece,

111
00:09:04.028 --> 00:09:06.593
like I'm just editing one field, right?

112
00:09:06.593 --> 00:09:11.673
Whereas up here, if we said book, We need

113
00:09:11.673 --> 00:09:16.549
an author, And a title.

114
00:09:23.434 --> 00:09:24.437
Something like that.

115
00:09:28.198 --> 00:09:33.328
Now we could, implementing these,
I would leave as an exercise to you.

116
00:09:33.328 --> 00:09:36.455
That's not about the types,
that's about the JavaScript,

117
00:09:36.455 --> 00:09:38.269
the actual code that you would run.

118
00:09:38.269 --> 00:09:42.973
So, what we've used here are,
within partial, right,

119
00:09:42.973 --> 00:09:48.349
we've used a map to type,
we've used this little modifier here,

120
00:09:48.349 --> 00:09:51.335
we've used an indexed access type.

121
00:09:51.335 --> 00:09:54.107
This mapping here is really nice and
important, and

122
00:09:54.107 --> 00:09:56.571
everything's sort of flowing through that.

123
00:09:56.571 --> 00:10:00.654
So this interface ends up being really
important because everything sort of

124
00:10:00.654 --> 00:10:01.810
threads through it.

125
00:10:01.810 --> 00:10:07.007
Now, what if we had each of these

126
00:10:07.007 --> 00:10:12.404
types of records in its own file?

127
00:10:12.404 --> 00:10:13.709
I mean, this is common, right?

128
00:10:13.709 --> 00:10:18.794
Where if we have models for
data, we have a JavaScript

129
00:10:18.794 --> 00:10:23.433
module that is dedicated for
book and for movie.

130
00:10:23.433 --> 00:10:26.570
Well, watch this.

131
00:10:26.570 --> 00:10:30.166
And then delete this, everything's
gonna start failing at the bottom,

132
00:10:30.166 --> 00:10:32.080
cuz it's an empty interface, right?

133
00:10:32.080 --> 00:10:38.530
So key of that empty interface, there's
like, nothing's gonna make it happy,

134
00:10:38.530 --> 00:10:42.652
and in fact,
the key of an empty interface is never.

135
00:10:42.652 --> 00:10:48.218
So a no string will make it happy, but
we'll get back there, no cause for alarm.

136
00:10:48.218 --> 00:10:52.507
So we would still need EntityMap to exist.

137
00:10:52.507 --> 00:10:56.355
I'm just gonna create a line here
representing different modules, and

138
00:10:56.355 --> 00:11:00.470
you'll have to take my word for it that
this will work across multiple files.

139
00:11:00.470 --> 00:11:06.155
So let's imagine that these are all
different files, we could do this.

140
00:11:06.155 --> 00:11:11.138
We're gonna take advantage of
the fact that interfaces are open.

141
00:11:11.138 --> 00:11:14.343
I see some head nods,
people know where I'm going with this.

142
00:11:20.049 --> 00:11:22.789
So, if you maybe have
some kind of library or

143
00:11:22.789 --> 00:11:26.642
framework that you're using
that has like code generation,

144
00:11:26.642 --> 00:11:31.329
where it builds starting point files for
you, all you need is to have this.

145
00:11:34.809 --> 00:11:37.099
This is part of your code gen,
this little thing.

146
00:11:37.099 --> 00:11:42.681
So each record type we have here,
a movie, a song, a book,

147
00:11:42.681 --> 00:11:48.170
they're all sorta adding
themselves to this EntityMap.

148
00:11:48.170 --> 00:11:52.156
It's almost like they're registering
themselves with this central thing.

149
00:11:52.156 --> 00:11:56.573
And it turns out everything
ends up being added here and

150
00:11:56.573 --> 00:11:59.174
our code starts working again.

151
00:11:59.174 --> 00:12:06.585
I need a title here, A History of
TypeScript, I can't help myself.

152
00:12:06.585 --> 00:12:12.957
So, basically, we get the same
autocomplete that we had before.

153
00:12:16.947 --> 00:12:18.963
If it works.

154
00:12:18.963 --> 00:12:21.515
There we go, book, movie, and song, right?

155
00:12:21.515 --> 00:12:27.695
So, this has the same effect as if we
defined that one interface upfront.

156
00:12:27.695 --> 00:12:31.610
So you can have your code split up
across many, many different modules.

157
00:12:31.610 --> 00:12:37.718
You get to group each
concern according to movie,

158
00:12:37.718 --> 00:12:41.360
and song, and book, right?

159
00:12:41.360 --> 00:12:46.316
According to what you're modeling,
instead of saying, all right,

160
00:12:46.316 --> 00:12:49.256
here's where we maintain all the types,

161
00:12:49.256 --> 00:12:53.293
and here's where we maintain
the actual code that runs.

162
00:12:53.293 --> 00:12:58.169
That to me is the wrong splitting point, I
like being able to go to this one file and

163
00:12:58.169 --> 00:13:01.777
it's all here,
everything having to do with this is here.

164
00:13:01.777 --> 00:13:04.519
And this shows us that
this EntityMap thing and

165
00:13:04.519 --> 00:13:08.395
interfaces in general are kind of
this cross cutting thing that,

166
00:13:12.120 --> 00:13:18.605
You can use to sort of make
horizontal things across your app.

167
00:13:18.605 --> 00:13:23.542
Meaning, we can refer to this now and
it relates to all of the different

168
00:13:23.542 --> 00:13:28.494
types of records we could work with,
not just one thing in one module.

169
00:13:28.494 --> 00:13:33.552
Now typically, these will be in separate
files, we can kinda simulate that.

170
00:13:33.552 --> 00:13:37.453
And we're gonna do this with what's
called a module declaration.

171
00:13:37.453 --> 00:13:38.895
This is as if, so

172
00:13:38.895 --> 00:13:44.975
make TypeScript think that this
lives in a library called fem-data.

173
00:13:50.076 --> 00:13:54.659
All right,
this is actually gonna still work,

174
00:13:54.659 --> 00:13:59.481
because we've got these
EntityMap things here.

175
00:13:59.481 --> 00:14:04.928
Sorry, we've got the individual
interface declarations for

176
00:14:04.928 --> 00:14:08.531
each record, but let's copy this over.

177
00:14:08.531 --> 00:14:09.643
Let's see how this works.

178
00:14:17.470 --> 00:14:22.839
Cool, now EntityMap is not gonna be
accessible here, maybe we can do this.

179
00:14:28.429 --> 00:14:34.874
[SOUND] Import,
this may be beyond what the,

180
00:14:37.540 --> 00:14:41.510
May be beyond what
the playground can handle.

181
00:14:43.580 --> 00:14:49.101
Actually, we may be getting the right
auto complete behavior here,

182
00:14:49.101 --> 00:14:51.396
let's check one more time.

183
00:14:55.820 --> 00:14:57.311
Nope, it's all disappeared.

184
00:14:57.311 --> 00:15:01.978
So, beyond the bounds of what can be done
in the playground, but this is exactly

185
00:15:01.978 --> 00:15:06.868
what you would want if you were breaking
things up across many JavaScript modules.

186
00:15:06.868 --> 00:15:11.744
So you could say,
you would define this here where this

187
00:15:11.744 --> 00:15:15.669
interface actually exists, some ts file.

188
00:15:15.669 --> 00:15:23.682
And then here you could say
location/of/entity-map, right?

189
00:15:23.682 --> 00:15:26.554
Just like it's a local file of some sort.

190
00:15:26.554 --> 00:15:30.335
And that'll make sure that you're
modifying the EntityMap that's in that

191
00:15:30.335 --> 00:15:30.992
other file.

192
00:15:30.992 --> 00:15:35.585
You're augmenting that interface
rather than an EntityMap

193
00:15:35.585 --> 00:15:39.374
that's in this one module,
if that makes sense.

194
00:15:39.374 --> 00:15:43.559
It's a really powerful
pattern that scales nicely,

195
00:15:43.559 --> 00:15:48.767
because you can imagine as you add and
remove different modules and

196
00:15:48.767 --> 00:15:54.533
things, this list of things you could
retrieve from the database grows.

197
00:15:54.533 --> 00:15:59.049
You don't want one central collision
point where they're just tons of git

198
00:15:59.049 --> 00:16:00.920
conflicts there all the time.

199
00:16:00.920 --> 00:16:01.927
This makes it so

200
00:16:01.927 --> 00:16:06.890
everything sort of has its own place
with one central location of registry.

