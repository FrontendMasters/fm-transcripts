WEBVTT

1
00:00:00.190 --> 00:00:05.170
First, I'd like to address some
questions that I see in chat.

2
00:00:05.170 --> 00:00:10.416
So Dimitri asks,
would it be correct to say that if I

3
00:00:10.416 --> 00:00:17.370
say that generics used are used
more often when we write libraries.

4
00:00:17.370 --> 00:00:22.212
So Dimitri asks,
are generics more appropriate

5
00:00:22.212 --> 00:00:25.905
to use in libraries versus app code?

6
00:00:25.905 --> 00:00:30.244
I don't really think that it hinges on

7
00:00:30.244 --> 00:00:35.885
whether your code is library or
app related.

8
00:00:35.885 --> 00:00:41.300
For example, I know of many apps
that have use of generics in their

9
00:00:41.300 --> 00:00:46.465
data layer where they might have
some concept of record type.

10
00:00:46.465 --> 00:00:49.348
Maybe if they're hitting
like a SQL database,

11
00:00:49.348 --> 00:00:54.536
they have a primary key that's always ID,
and they want some predictable pathway for

12
00:00:54.536 --> 00:00:58.780
going to fetch some information
using generics and app code.

13
00:00:58.780 --> 00:01:00.290
In that area it's quite common.

14
00:01:01.530 --> 00:01:07.055
I would say the more reusable,
the more reusability is a concern,

15
00:01:07.055 --> 00:01:13.770
the more you're gonna want to
Leverages generics for that purpose.

16
00:01:13.770 --> 00:01:16.640
Yeah, libraries tend to
get reused quite often.

17
00:01:18.880 --> 00:01:20.560
But it's not limited to libraries for
sure.

18
00:01:22.480 --> 00:01:26.173
Leslie asks,
I feel like generics can easily see him so

19
00:01:26.173 --> 00:01:31.390
complex because everyone's using
random non-expressive letters.

20
00:01:31.390 --> 00:01:35.620
To represent types,
is that considered the standard?

21
00:01:35.620 --> 00:01:41.195
There is no standard, I would say it's
the norm to use these capital letters

22
00:01:41.195 --> 00:01:47.080
starting with T, but that is
a leftover remnant from the C++ days.

23
00:01:47.080 --> 00:01:50.522
Sort of started in C++
with template classes, and

24
00:01:50.522 --> 00:01:54.670
then made its way into generics and
Java and C-sharp.

25
00:01:54.670 --> 00:01:58.588
And now it's sort of this pattern that
everyone who's used this concept before in

26
00:01:58.588 --> 00:02:01.460
other languages,
they're used to doing it that way.

27
00:02:01.460 --> 00:02:04.610
I do 100% agree with you though.

28
00:02:04.610 --> 00:02:10.670
That, we don't like single letter
variable names for values.

29
00:02:10.670 --> 00:02:13.450
Why are we cool with single
letter names for types?

30
00:02:13.450 --> 00:02:14.859
That's a very fair point.

31
00:02:14.859 --> 00:02:18.603
The good news is there's nothing that
stops you from giving these more

32
00:02:18.603 --> 00:02:22.855
meaningful names, although you're going
to come across a lot of code that just

33
00:02:22.855 --> 00:02:25.084
sort of has these very abstract letters.

34
00:02:25.084 --> 00:02:28.153
That make it difficult to
sort of read the code,

35
00:02:28.153 --> 00:02:32.390
and understand what the intent
of the developer was.

36
00:02:32.390 --> 00:02:34.410
That's a totally fair point.

37
00:02:34.410 --> 00:02:37.942
&gt;&gt; We see here like we
use this extractor type,

38
00:02:37.942 --> 00:02:44.240
special type from the library,
is this equivalent to the end operator?

39
00:02:44.240 --> 00:02:48.597
We use the model at the beginning
with the key off date we combined and

40
00:02:48.597 --> 00:02:53.416
to extract on it the case on it, is
extract basically doing the same thing or

41
00:02:53.416 --> 00:02:55.680
is there a difference?

42
00:02:55.680 --> 00:02:57.775
&gt;&gt; That is a very, good point.

43
00:02:57.775 --> 00:03:05.360
So, there, I'm not sure if there
are a 100% the same, but it's true that.

44
00:03:06.390 --> 00:03:11.799
The, it's true that
the intersection type operator,

45
00:03:11.799 --> 00:03:17.553
that end type does accomplish
things that are also possible

46
00:03:17.553 --> 00:03:22.870
using this syntax,
with this arrangement of things.

47
00:03:24.350 --> 00:03:31.801
Now, I think you might
get some side effects.

48
00:03:31.801 --> 00:03:38.070
But like in some cases, I'm reluctant
to say that it will always work.

49
00:03:38.070 --> 00:03:40.490
But that's a very,
very good point you bring up.

50
00:03:40.490 --> 00:03:43.910
I think,
logically it makes a lot of sense.

51
00:03:43.910 --> 00:03:49.442
You're trying to get, the portion
of one type that also is assignable

52
00:03:49.442 --> 00:03:54.800
to another type it would seem
that's what we're dealing with.

53
00:03:54.800 --> 00:03:59.380
I just don't want to unfirmed say,
yes they're absolutely the same thing.

54
00:03:59.380 --> 00:04:01.880
But they seem like there could be.

55
00:04:03.450 --> 00:04:06.098
This obviously you can't
do with the end and the or

56
00:04:06.098 --> 00:04:08.550
would not give it to you either.

57
00:04:08.550 --> 00:04:10.305
Does that make sense?

58
00:04:10.305 --> 00:04:14.082
&gt;&gt; Yes.
&gt;&gt; So this exclude is sort of like the end

59
00:04:14.082 --> 00:04:20.510
to end it's useful to have a generic
that will do that for you.

60
00:04:20.510 --> 00:04:25.233
And by the way, you're also going to
see that there are things in fact,

61
00:04:25.233 --> 00:04:28.930
we're about to talk
about the infer keyword.

62
00:04:28.930 --> 00:04:33.703
There are things that
make it beneficial to

63
00:04:33.703 --> 00:04:37.946
use type params and to use a generic for

64
00:04:37.946 --> 00:04:45.110
extraction of some subpart
of a type from another type.

65
00:04:45.110 --> 00:04:49.600
So I think you'll see a rationale for
why it makes sense to do this shortly.

