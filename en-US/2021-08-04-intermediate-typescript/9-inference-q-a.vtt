WEBVTT

1
00:00:00.180 --> 00:00:04.120
So Frank asks, this was a few minutes ago.

2
00:00:04.120 --> 00:00:09.234
So we made this type ConstructorArg,
right, that was kind of what we

3
00:00:09.234 --> 00:00:15.870
ended up with, this was the last thing
that we worked on in the previous chapter.

4
00:00:15.870 --> 00:00:20.221
Does the TypeScript team plan
to make this a standard type,

5
00:00:20.221 --> 00:00:25.190
it seems pretty useful,
same with JSON value in the last workshop.

6
00:00:26.370 --> 00:00:31.428
Yeah, this is a good point, and
what I will say is that the bar is

7
00:00:31.428 --> 00:00:36.309
pretty high for
including something in TypeScript itself.

8
00:00:36.309 --> 00:00:41.209
So we have, for example,
Extract and Exclude,

9
00:00:41.209 --> 00:00:46.598
these are core types that
are already in TypeScript.

10
00:00:46.598 --> 00:00:51.631
What I will say is there's nothing
stopping you from writing your own

11
00:00:51.631 --> 00:00:57.559
types as a little library and importing
that in the projects that you care about.

12
00:00:57.559 --> 00:01:03.557
For example,
if I go to github.com/mike-north,

13
00:01:03.557 --> 00:01:06.765
how do I spell my name again?

14
00:01:06.765 --> 00:01:09.720
[LAUGH] Mike-north/types,

15
00:01:09.720 --> 00:01:15.032
you can see I have a little
git repo here that is types,

16
00:01:15.032 --> 00:01:19.417
interfaces, and classes that I often use.

17
00:01:19.417 --> 00:01:22.160
And look, there's ConstructorArgs, so

18
00:01:22.160 --> 00:01:26.108
I bring this package into a variety
of things that I work on.

19
00:01:26.108 --> 00:01:31.122
And some of these have made
it into the language already,

20
00:01:31.122 --> 00:01:36.448
like at the time I wrote this
library there was no required and

21
00:01:36.448 --> 00:01:42.420
there was no make everything optional,
but I made my own.

22
00:01:42.420 --> 00:01:47.075
And as a result they're still here and
that's fine, I'm not under

23
00:01:47.075 --> 00:01:52.300
pressure to get rid of these because
these don't add to asset size, right,

24
00:01:52.300 --> 00:01:57.960
they just compile straight out, it's
an identical type to what they have built.

25
00:01:57.960 --> 00:02:03.043
If we click that you can see that,
well, we'll look more into this but

26
00:02:03.043 --> 00:02:07.539
It's just type information in
a little JavaScript library.

27
00:02:07.539 --> 00:02:11.155
And if you would look at what happens
with this kind of library when

28
00:02:11.155 --> 00:02:14.244
it's all bundled up,
with one tiny exception here, so

29
00:02:14.244 --> 00:02:18.384
I create something called a deferred
which is actually a class, right, so

30
00:02:18.384 --> 00:02:22.425
this isn't purely type information,
a lot of this library is, right.

31
00:02:22.425 --> 00:02:27.761
But here, this is kinda like an inverted
promise where whoever is holding

32
00:02:27.761 --> 00:02:32.753
the promise, they get to call resolve or
reject from the outside, so

33
00:02:32.753 --> 00:02:39.110
it's gonna add a tiny little bit of asset
size but nothing to be concerned about.

34
00:02:39.110 --> 00:02:42.951
So that's how I would
answer this question,

35
00:02:42.951 --> 00:02:47.398
as you find things that
are useful package them up and

36
00:02:47.398 --> 00:02:52.061
make them into little libraries
that you can consume.

37
00:02:52.061 --> 00:02:57.292
I have one called JSON-typescript,
and if we look at what this library

38
00:02:57.292 --> 00:03:03.134
contains it's very, very similar to
what we built in the fundamentals class,

39
00:03:03.134 --> 00:03:07.230
right, this is an old school
way that involves types and

40
00:03:07.230 --> 00:03:11.966
interfaces so this is compatible
with TypeScript 2.8 even.

41
00:03:11.966 --> 00:03:15.774
I'm doing the same thing that we
did in the fundamentals class, so

42
00:03:15.774 --> 00:03:18.834
all I have to do is install
this package in a project and

43
00:03:18.834 --> 00:03:22.860
I can import stuff from it just
as if it were a little library.

44
00:03:22.860 --> 00:03:27.775
If you wanna know how to set these
kinds of libraries up robustly, and

45
00:03:27.775 --> 00:03:33.199
by that I mean if we look at this
mike-north/types thing and the CI pipeline

46
00:03:33.199 --> 00:03:38.370
I have going here, I believe I'm
testing against multiple nodes, like

47
00:03:38.370 --> 00:03:44.790
multiple versions of Node JS and multiple
versions of the TypeScript compiler.

48
00:03:44.790 --> 00:03:49.999
And this means that as new dependencies
are added, if you have dependencies here

49
00:03:49.999 --> 00:03:56.440
you're making sure that everything still
continues to work in a very complete way.

50
00:03:56.440 --> 00:03:59.567
So this would be like I
would be flattered and

51
00:03:59.567 --> 00:04:04.298
proud if you were to copy the
infrastructure here and to use this for

52
00:04:04.298 --> 00:04:09.622
your own types, right, you just take
everything in this source folder and

53
00:04:09.622 --> 00:04:12.180
modify it or add to it as you see fit.

54
00:04:12.180 --> 00:04:15.978
And feel free to open pull requests
into mine if you think mine's useful and

55
00:04:15.978 --> 00:04:17.847
you wanna build on that instead, but

56
00:04:17.847 --> 00:04:21.060
this is sort of my own little mini
standard library if you will.

57
00:04:21.060 --> 00:04:24.868
So we have three things ahead of us.

58
00:04:24.868 --> 00:04:30.775
Two more chapters in the website, and then
I'm going to try to put everything kind

59
00:04:30.775 --> 00:04:36.684
of together in accomplishing a non-trivial
task in the TypeScript playground,

60
00:04:36.684 --> 00:04:40.728
and that's gonna be building
a little mini data layer.

61
00:04:40.728 --> 00:04:43.985
Because when we have
different types of records,

62
00:04:43.985 --> 00:04:48.791
we have a lot of well structured type
information and it's a place where we

63
00:04:48.791 --> 00:04:54.430
can take advantage of some of the things
we've learned for high code reuse.

64
00:04:54.430 --> 00:04:56.090
So that's what we have ahead of us.

