WEBVTT

1
00:00:00.108 --> 00:00:03.842
So, quick little exercise here,

2
00:00:03.842 --> 00:00:08.876
with our understanding
of how extends works.

3
00:00:08.876 --> 00:00:13.973
I want us to look at this
list of eight examples, and

4
00:00:13.973 --> 00:00:20.157
tell me whether you think this
will evaluate to true or false.

5
00:00:20.157 --> 00:00:23.475
So, just take a moment and
look at these eight things, and

6
00:00:23.475 --> 00:00:26.160
we'll reveal the answers in a moment.

7
00:00:26.160 --> 00:00:29.250
&gt;&gt; Don't peak down here,
this is where the answers are.

8
00:00:29.250 --> 00:00:32.180
Don't cheat yourself out of
the learning experience here.

9
00:00:32.180 --> 00:00:35.111
But just think through
these eight situations and

10
00:00:35.111 --> 00:00:38.329
see if you can figure out what's true and
what's not.

11
00:00:43.041 --> 00:00:46.718
We're gonna go over the answers
to this eight question quiz.

12
00:00:46.718 --> 00:00:50.678
And in doing so,
we're gonna learn a little bit

13
00:00:50.678 --> 00:00:54.342
more about how this extends keyword works.

14
00:00:54.342 --> 00:00:56.051
So, we're gonna open up
our spoiler warning.

15
00:00:58.337 --> 00:01:03.338
And so, as everywhere else in this course,
these little code snippets,

16
00:01:03.338 --> 00:01:07.870
they're coming like directly
from TypeScript compiler output.

17
00:01:07.870 --> 00:01:09.680
So you know I'm not lying to you.

18
00:01:09.680 --> 00:01:13.190
This is compiler results
we're seeing as answers.

19
00:01:13.190 --> 00:01:18.500
So first, 64 extends number, that is true.

20
00:01:18.500 --> 00:01:22.710
And the way I encourage
you to think about this,

21
00:01:22.710 --> 00:01:27.867
if you watch the TS fundamentals course,
we likened types

22
00:01:27.867 --> 00:01:32.812
to kinda set theory,
where we could say this type here,

23
00:01:32.812 --> 00:01:37.680
it's like any number you want,
as long as it's 64.

24
00:01:37.680 --> 00:01:41.090
And over here, it's any number you want.

25
00:01:41.090 --> 00:01:46.494
So, the extends keyword,
it's kinds like asking a question,

26
00:01:46.494 --> 00:01:52.160
does everything on the left fit
within the set on the right?

27
00:01:52.160 --> 00:01:59.929
So, is the set 64 allowed within
the set of all numbers, it is true.

28
00:01:59.929 --> 00:02:03.330
And here, we can see that
the reverse is not true, why?

29
00:02:03.330 --> 00:02:08.300
This number set here,
that's gonna include the number 63,

30
00:02:08.300 --> 00:02:12.071
which is not in the set
that only includes 64.

31
00:02:12.071 --> 00:02:15.310
So, this is just way too general.

32
00:02:15.310 --> 00:02:18.510
It includes things that
won't make this type happy.

33
00:02:18.510 --> 00:02:20.970
So, number does not extend 64.

34
00:02:20.970 --> 00:02:26.459
Applying that same technique,
we're seeing if the set

35
00:02:26.459 --> 00:02:31.480
of all possible string arrays
fits within the set of

36
00:02:31.480 --> 00:02:38.510
all possible values that could ever
exist in JavaScript, seems true.

37
00:02:39.940 --> 00:02:44.593
Within everything we could
create in JavaScript, of course,

38
00:02:44.593 --> 00:02:47.540
we can include all string arrays.

39
00:02:47.540 --> 00:02:49.145
In chat says, I thought the inverse.

40
00:02:49.145 --> 00:02:51.670
I know man,
that's why we're going over this.

41
00:02:51.670 --> 00:02:58.340
Like, this is a common misconception and I
had to wrestle with this exact same thing.

42
00:02:58.340 --> 00:03:03.450
So, the slow and steady approach here is,
well, it took for me to learn this.

43
00:03:03.450 --> 00:03:05.610
So, that's why I'm passing
it on to the class.

44
00:03:06.710 --> 00:03:13.910
So, yeah, the set of strings is included
in the set of any possible allowed values.

45
00:03:13.910 --> 00:03:18.792
And the set of all string arrays is
also included in the set of all possible

46
00:03:18.792 --> 00:03:19.980
arrays.

47
00:03:19.980 --> 00:03:23.986
This type on the right includes
arrays of numbers, arrays of Boolean,

48
00:03:23.986 --> 00:03:27.010
arrays of promises, right,
and arrays of strings.

49
00:03:27.010 --> 00:03:28.330
So, there we go.

50
00:03:28.330 --> 00:03:30.266
This one's interesting.

51
00:03:30.266 --> 00:03:33.730
I bet a lot of people got this wrong.

52
00:03:33.730 --> 00:03:36.180
I bet a lot of people got this wrong.

53
00:03:36.180 --> 00:03:40.779
Because when you take things
out to the infinities, right,

54
00:03:40.779 --> 00:03:46.009
to the infinitesimally strict and
the infinitesimally not strict,

55
00:03:46.009 --> 00:03:49.526
it's very confusing to think about this,
and

56
00:03:49.526 --> 00:03:53.430
it's tempting to stop
applying the mental model.

57
00:03:53.430 --> 00:03:57.137
I bet a lot of people got
this one right up here, and

58
00:03:57.137 --> 00:04:00.862
if you got them reversed,
that's fine, right?

59
00:04:00.862 --> 00:04:05.488
That just means you didn't understand
which direction extends was operating in.

60
00:04:05.488 --> 00:04:08.927
But I suspect if you mirror your answers,

61
00:04:08.927 --> 00:04:14.700
you might have had inconsistent
results between this and this.

62
00:04:14.700 --> 00:04:17.330
Well, let's apply our same logic here.

63
00:04:18.470 --> 00:04:23.910
Never, the set of all values that
can make never happy, empty set.

64
00:04:25.140 --> 00:04:29.813
Does everything that is included in
an empty set fit in the set of all

65
00:04:29.813 --> 00:04:32.270
possible JavaScript values?

66
00:04:32.270 --> 00:04:34.794
Yes, of course.

67
00:04:34.794 --> 00:04:38.856
If we had to write a for loop to verify
this condition for answer number five,

68
00:04:38.856 --> 00:04:41.470
we would never even loop over anything,
right?

69
00:04:41.470 --> 00:04:43.150
There's nothing to check.

70
00:04:43.150 --> 00:04:45.450
And we kind of default to true.

71
00:04:45.450 --> 00:04:49.298
It's like,
do you have room in your house for

72
00:04:49.298 --> 00:04:53.060
everything that's inside this empty box?

73
00:04:54.500 --> 00:04:58.300
Sure, [LAUGH] then yeah,
there's nothing in there.

74
00:04:58.300 --> 00:05:03.080
We have room,
that's the way to think about this.

75
00:05:03.080 --> 00:05:06.140
Here, this is another kind
of interesting edge case,

76
00:05:06.140 --> 00:05:09.960
does the set of everything
include the set of everything?

77
00:05:09.960 --> 00:05:13.390
Sure, kind of with the reflexive property,
this would better be true.

78
00:05:13.390 --> 00:05:20.842
Getting a little bit more complicated here
and thinking now in terms of the type for

79
00:05:20.842 --> 00:05:26.560
a class constructor like
a factory versus an instance.

80
00:05:26.560 --> 00:05:29.180
So, we've got first,
the instance case, right?

81
00:05:29.180 --> 00:05:31.170
That's the interface called date.

82
00:05:31.170 --> 00:05:37.270
Does this include the set of all things
that can be used with the new keyword?

83
00:05:37.270 --> 00:05:38.960
That's what this type means.

84
00:05:38.960 --> 00:05:43.933
Are you a newable, sometimes people

85
00:05:43.933 --> 00:05:48.770
use this newable word, right?

86
00:05:48.770 --> 00:05:53.095
So, an instance of date is not newable but

87
00:05:53.095 --> 00:05:58.037
if we put this type of
keyword in front of it, and

88
00:05:58.037 --> 00:06:02.239
we get the type of the factory for dates,

89
00:06:02.239 --> 00:06:06.280
it turns out that that is newable.

90
00:06:06.280 --> 00:06:08.580
Does anyone have any
questions about these?

91
00:06:08.580 --> 00:06:14.204
So, raise your hand or type y in the chat
if you've got at least one of these wrong,

92
00:06:14.204 --> 00:06:19.175
and now you kind of understand a little
bit more about how extends works,

93
00:06:19.175 --> 00:06:22.220
after thinking through it again.

94
00:06:22.220 --> 00:06:26.897
So, Dimitri asked the question, the modern
set theory has some limitations for

95
00:06:26.897 --> 00:06:28.450
case six.

96
00:06:28.450 --> 00:06:34.250
We don't understand why exactly, maybe I
could learn a little bit more about that.

97
00:06:34.250 --> 00:06:37.034
What I do think is if we just say,

98
00:06:37.034 --> 00:06:42.409
does everything in box A fit
inside something designed for B?

99
00:06:42.409 --> 00:06:47.752
And in this case, we're sort of moving
everything over like by definition,

100
00:06:47.752 --> 00:06:53.560
like the set of all strings is included
in the set of all strings, right?

101
00:06:53.560 --> 00:06:55.970
So, Christoph, you make a good point.

102
00:06:55.970 --> 00:06:57.965
And if you're watching this course now,

103
00:06:57.965 --> 00:07:02.040
you were thinking that extends sort
of operated in the reverse direction.

104
00:07:02.040 --> 00:07:05.712
You might have thought about it as like,

105
00:07:05.712 --> 00:07:11.328
does the thing on the left,
is that the larger of the two sets,

106
00:07:11.328 --> 00:07:15.610
and then this is the smaller
of the two sets?

107
00:07:15.610 --> 00:07:17.860
It's actually the opposite.

108
00:07:17.860 --> 00:07:25.810
Remember, extends is about
getting more and more specific.

109
00:07:25.810 --> 00:07:30.380
If you have a base class and you make
a sub class, and then another sub class,

110
00:07:30.380 --> 00:07:33.270
you're adding more properties, right?

111
00:07:33.270 --> 00:07:37.261
If we started out with any, we have the
set of all possible things that you could

112
00:07:37.261 --> 00:07:39.660
create in the JavaScript universe.

113
00:07:39.660 --> 00:07:44.820
And then, we'll start saying well,
all right, let's make it more specific.

114
00:07:44.820 --> 00:07:46.512
Let's just talk about arrays.

115
00:07:46.512 --> 00:07:51.810
All right, let's talk about just
arrays that only contain strings.

116
00:07:51.810 --> 00:07:56.322
Well, every time you make one of those
statements and you're saying, let's make

117
00:07:56.322 --> 00:08:01.289
this more specific, let's define more type
information, let's add more constraints,

118
00:08:01.289 --> 00:08:06.440
you're narrowing, and narrowing, and
narrowing and you're making drilling down.

119
00:08:06.440 --> 00:08:08.710
And there are fewer and
fewer things in your set.

120
00:08:09.770 --> 00:08:15.854
So when we say it's 64,
it's almost like a weird way to say it,

121
00:08:15.854 --> 00:08:19.630
but the 64 have a base class of number.

122
00:08:20.820 --> 00:08:23.740
Kind of a base type of number like,

123
00:08:23.740 --> 00:08:27.880
if we widen it out,
would we end up with a number?

124
00:08:29.440 --> 00:08:32.686
Like if we made string array more general,

125
00:08:32.686 --> 00:08:36.490
would we arrive at all possible arrays,
right?

126
00:08:36.490 --> 00:08:40.380
Well, making it more general,
let's allow non-strings to be included.

127
00:08:40.380 --> 00:08:44.720
And then we could say, maybe it doesn't
have to be a array, more general still.

128
00:08:44.720 --> 00:08:46.830
So, let's start zooming out.

129
00:08:46.830 --> 00:08:52.154
These are great questions, and this is
one of the best things I can do with

130
00:08:52.154 --> 00:08:57.583
this the short time we have together,
to help you get over these hurdles.

131
00:08:57.583 --> 00:09:02.200
Let's put this conditional
type concept to work.

132
00:09:02.200 --> 00:09:05.430
And we're going to look at an example and

133
00:09:05.430 --> 00:09:09.800
build our way up to some of
the standard utility types,

134
00:09:09.800 --> 00:09:14.850
that are included with
the TypeScript programming language.

