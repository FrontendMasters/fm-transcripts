WEBVTT

1
00:00:00.450 --> 00:00:05.596
Conditional types are kind
of a ternary operator,

2
00:00:05.596 --> 00:00:08.354
but for type information.

3
00:00:08.354 --> 00:00:12.780
In fact, they use exactly the same syntax.

4
00:00:13.970 --> 00:00:17.830
And in this chapter,
we're gonna look into these things.

5
00:00:17.830 --> 00:00:23.865
And we're gonna work up our way to what's
coming next in the chapter after this,

6
00:00:23.865 --> 00:00:28.481
where we will see that there
are some utility types that become

7
00:00:28.481 --> 00:00:33.590
possible once we introduce this
concept of conditional types.

8
00:00:33.590 --> 00:00:38.310
Utility types are just, they're things
that come with TypeScript for free,

9
00:00:38.310 --> 00:00:44.130
that are so broadly useful, that they're
just included with TypeScript itself.

10
00:00:44.130 --> 00:00:46.300
It's kind of a little standard library.

11
00:00:46.300 --> 00:00:52.820
So first, let's talk about ternary
operators as they pertain to values.

12
00:00:52.820 --> 00:00:57.880
You're used to seeing this in
JavaScript already in all likelihood.

13
00:00:57.880 --> 00:01:02.478
So, it's just if, then,
else logic and ternary, of course,

14
00:01:02.478 --> 00:01:05.530
just means having three parts.

15
00:01:05.530 --> 00:01:08.610
And we have our three parts here, right?

16
00:01:08.610 --> 00:01:13.508
So, if we have a value, we could say x is

17
00:01:13.508 --> 00:01:19.010
negative only if it is less than 0, right?

18
00:01:19.010 --> 00:01:25.730
So if it's greater than or equal to 0, it
is non-negative, otherwise, it's negative.

19
00:01:25.730 --> 00:01:26.870
And there are three parts here.

20
00:01:26.870 --> 00:01:31.208
There's a condition to
evaluate an expression to

21
00:01:31.208 --> 00:01:34.830
use if that condition evaluates to true.

22
00:01:35.930 --> 00:01:40.183
And then the expression to evaluate
if that condition evaluates to false.

23
00:01:40.183 --> 00:01:45.140
All of this is gonna serve you well as
we start talking about the equivalent in

24
00:01:45.140 --> 00:01:46.313
the types world.

25
00:01:46.313 --> 00:01:50.210
Let's look at the equivalent
in the world of types.

26
00:01:50.210 --> 00:01:53.890
We have two appliances here
that are used for cooking.

27
00:01:53.890 --> 00:01:56.075
We've got a grill and an oven.

28
00:01:56.075 --> 00:01:59.280
And they have no common
shared method names.

29
00:01:59.280 --> 00:02:03.007
So we would say there's not very much
overlap between these two things,

30
00:02:03.007 --> 00:02:04.910
between grill and oven.

31
00:02:04.910 --> 00:02:07.500
But that's what we're defining here.

32
00:02:08.660 --> 00:02:14.488
And then we can define a type that
conditionally turns into either a grill or

33
00:02:14.488 --> 00:02:15.238
an oven.

34
00:02:15.238 --> 00:02:20.790
And we're gonna unpack this syntax
piece by piece in just a moment.

35
00:02:20.790 --> 00:02:24.190
But for now,
I just want you to observe the result.

36
00:02:24.190 --> 00:02:28.580
And the result is, remember,
this is just a literal type.

37
00:02:28.580 --> 00:02:29.820
It's not a value.

38
00:02:29.820 --> 00:02:37.190
It's a specific string type, a string
that only matches one particular thing.

39
00:02:37.190 --> 00:02:42.630
So if we say this is a cooking device
of type grill, we get a grill out.

40
00:02:42.630 --> 00:02:46.840
If we say it's a cooking device
of type oven, we get an oven out.

41
00:02:46.840 --> 00:02:52.267
And we also see the very familiar
ternary operator at work here.

42
00:02:56.366 --> 00:02:58.650
And this is a condition.

43
00:02:58.650 --> 00:03:03.160
This is what to use if the condition
evaluates to true and this if false.

44
00:03:05.110 --> 00:03:12.260
So if we strip everything back,
we can see the pieces of interest, right?

45
00:03:12.260 --> 00:03:13.840
Those three parts.

46
00:03:13.840 --> 00:03:16.550
And it works exactly the same way.

47
00:03:16.550 --> 00:03:18.890
So we can kind of map it out in this way.

48
00:03:18.890 --> 00:03:21.899
If we've had a condition,
expression if true, expression is false,

49
00:03:21.899 --> 00:03:25.150
they're just type expressions,
they're not value expressions.

50
00:03:25.150 --> 00:03:28.041
And frankly,
these two pieces here are not interesting,

51
00:03:28.041 --> 00:03:30.590
you could put whatever
type you want there.

52
00:03:30.590 --> 00:03:32.130
This condition is kind of interesting.

53
00:03:33.250 --> 00:03:37.630
So, you can see that we're
using the extends keyword here.

54
00:03:37.630 --> 00:03:39.660
And we've used it in a couple places.

55
00:03:39.660 --> 00:03:42.257
So if you took the fundamental course,

56
00:03:42.257 --> 00:03:46.820
we used extends to describe
constraints for type parameters.

57
00:03:46.820 --> 00:03:52.307
A way of saying I take type T,
and T must be at least this type.

58
00:03:52.307 --> 00:03:57.470
It at least must be an object
that has an ID property on it,

59
00:03:57.470 --> 00:04:00.610
or it must be at least a string.

60
00:04:00.610 --> 00:04:05.847
Could be more than a string, but
I want, I need to be able to assume

61
00:04:05.847 --> 00:04:11.100
that I can treat it as string and
as a minimum requirement.

62
00:04:11.100 --> 00:04:15.060
Well, in this context,
the word means the same thing.

63
00:04:15.060 --> 00:04:20.820
We're saying that,
T must be at least this type.

64
00:04:20.820 --> 00:04:23.520
It's not an equality check.

65
00:04:23.520 --> 00:04:27.390
I think of it more like a greater
than equals comparison.

66
00:04:27.390 --> 00:04:30.370
You are at least of this type.

67
00:04:32.450 --> 00:04:38.418
And this is the only tool we have as
of today's version of TypeScript for

68
00:04:38.418 --> 00:04:40.610
expressing conditions.

69
00:04:40.610 --> 00:04:43.470
We can only use this extends word.

