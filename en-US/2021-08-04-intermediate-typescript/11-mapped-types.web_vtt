WEBVTT

1
00:00:00.670 --> 00:00:04.196
We're about to see all of
the concepts we've talked

2
00:00:04.196 --> 00:00:09.270
about today come together through
something called mapped types.

3
00:00:09.270 --> 00:00:13.452
This is the most powerful tool,
in my opinion, for

4
00:00:13.452 --> 00:00:17.539
transforming types,
right, taking some type,

5
00:00:17.539 --> 00:00:22.720
making it another type in a very
organized and deliberate way.

6
00:00:23.730 --> 00:00:26.038
Where does mapped types get its name from?

7
00:00:26.038 --> 00:00:30.440
A great way to remember it is
it's kind of like array.map,

8
00:00:30.440 --> 00:00:32.817
if you're familiar with that,

9
00:00:32.817 --> 00:00:38.113
in that what we're about to see it
feels sort of like looping behavior.

10
00:00:38.113 --> 00:00:42.546
Where we're iterating over
all the keys of something and

11
00:00:42.546 --> 00:00:45.830
we're producing a type for a value.

12
00:00:45.830 --> 00:00:50.341
Again, we're purely talking
about type information here, but

13
00:00:50.341 --> 00:00:55.181
the mental model of array.map and
looping through and providing that

14
00:00:55.181 --> 00:01:00.910
transformative logic that you'd define
with the callback for array.map.

15
00:01:00.910 --> 00:01:05.330
That's conceptually gonna fit pretty
nicely with what we're about to see here.

16
00:01:05.330 --> 00:01:07.430
Let's take a look at the basics.

17
00:01:07.430 --> 00:01:12.158
So if you recall from
TypeScript fundamentals V3, or

18
00:01:12.158 --> 00:01:17.109
equivalent experience in the wild,
index signatures.

19
00:01:17.109 --> 00:01:19.858
You've seen index signatures before,
hopefully, and

20
00:01:19.858 --> 00:01:21.640
this is what they look like.

21
00:01:21.640 --> 00:01:30.160
Note that we have kind of an arbitrary
word here describing a property key.

22
00:01:30.160 --> 00:01:34.633
It's an arbitrary property key with
an arbitrary name, meaning for

23
00:01:34.633 --> 00:01:40.140
a dictionary, if I access any key at all,
I'll get this value type out.

24
00:01:40.140 --> 00:01:41.880
And then here is the value type.

25
00:01:41.880 --> 00:01:45.055
So this is like a generic type for
a dictionary.

26
00:01:45.055 --> 00:01:46.756
I mentioned this in
the fundamentals class.

27
00:01:46.756 --> 00:01:51.695
I'll often say I want t or undefined here,
because there's always a possibility

28
00:01:51.695 --> 00:01:56.004
that when you access something on
a dictionary, it might not be there.

29
00:01:56.004 --> 00:01:59.748
And I want to keep myself honest and
to make sure I check for

30
00:01:59.748 --> 00:02:03.494
the presence of a thing when I
grab it out of a dictionary.

31
00:02:03.494 --> 00:02:08.550
So we could see here, we can create
a what I'm calling a fruit catalog.

32
00:02:08.550 --> 00:02:11.710
It's a dictionary of fruits,
it'll start out empty.

33
00:02:11.710 --> 00:02:14.370
Here I'm kinda illustrating
the problem I just talked about.

34
00:02:14.370 --> 00:02:19.780
But when we access any key we wish
despite the fact that this is empty,

35
00:02:19.780 --> 00:02:21.849
we see we get a fruit back.

36
00:02:21.849 --> 00:02:26.692
So this what we're passing in for the t
and we're kinda threading it through.

37
00:02:26.692 --> 00:02:30.476
This is an index signature,
we've already covered this before.

38
00:02:30.476 --> 00:02:34.448
I'm gonna introduce a new concept here.

39
00:02:34.448 --> 00:02:36.321
And why did need a new concept?

40
00:02:36.321 --> 00:02:41.274
Because the only thing an index
signature allows us to do is say for

41
00:02:41.274 --> 00:02:45.970
an arbitrary key, here is the type
you can expect to receive.

42
00:02:47.400 --> 00:02:54.170
What if we have something more
specific than just a narrow string?

43
00:02:54.170 --> 00:02:58.072
Or sorry, something more
specific than any string rather.

44
00:02:58.072 --> 00:03:03.272
What if we have a list of properties and
we wish to use that and

45
00:03:03.272 --> 00:03:08.993
not just the Wild West like you
could put fruitCatalog.turnip or

46
00:03:08.993 --> 00:03:11.680
whatever you want, right?

47
00:03:11.680 --> 00:03:14.475
We don't want that, we want
something a little more deliberate.

48
00:03:14.475 --> 00:03:19.430
Well, this mapped type is gonna
allow us to do something like this.

49
00:03:19.430 --> 00:03:24.881
Now, because in my mind at least, when I
say the word dictionary, that means this

50
00:03:24.881 --> 00:03:30.650
very flexible key value store where I can
hang whatever I want on an arbitrary key.

51
00:03:30.650 --> 00:03:33.426
So I'm gonna actually call
this something different,

52
00:03:33.426 --> 00:03:36.800
given that we're no longer gonna
be in the world of arbitrary keys.

53
00:03:36.800 --> 00:03:40.761
We have a set description of
the keys we wish to use and

54
00:03:40.761 --> 00:03:43.410
then we have some value types.

55
00:03:43.410 --> 00:03:48.159
So we're gonna call that a record,
and to avoid collision with something

56
00:03:48.159 --> 00:03:53.154
that exists in TypeScript already,
I'm gonna call this MyRecord, right?

57
00:03:53.154 --> 00:03:55.240
Just to avoid colliding
with an existing type.

58
00:03:56.250 --> 00:03:59.057
So here's what's going to change.

59
00:04:01.204 --> 00:04:06.700
This is our interface as before,
and here is the new signature.

60
00:04:08.000 --> 00:04:10.950
And we can look at these
side by side in a moment.

61
00:04:10.950 --> 00:04:15.978
But for now, I want you to look at
the fact that when I access cherry and

62
00:04:15.978 --> 00:04:19.970
apple, I get a type of
fruit that's coming out.

63
00:04:19.970 --> 00:04:23.090
But when I try to access pineapple,
we get nothing.

64
00:04:24.090 --> 00:04:28.120
Pineapple does not exist on MyRecord,
and cherry and apple are here.

65
00:04:28.120 --> 00:04:30.511
So it seems that we're able to say,

66
00:04:30.511 --> 00:04:34.710
here are the specific property
keys that I wish to use.

67
00:04:34.710 --> 00:04:37.024
Whereas with the index type,

68
00:04:37.024 --> 00:04:42.680
it was kinda like put it anywhere in
this object and I will hold it for you.

69
00:04:43.860 --> 00:04:47.070
So let's compare these two
signatures side by side.

70
00:04:47.070 --> 00:04:49.933
On the top, we have this mapped type and
on the bottom,

71
00:04:49.933 --> 00:04:51.501
we have the index signature.

72
00:04:51.501 --> 00:04:56.597
And I've hidden out the type for
the value here, because really,

73
00:04:56.597 --> 00:05:00.420
that's not what these
signatures are all about.

74
00:05:00.420 --> 00:05:03.460
We can put whatever we want
there in that dot, dot, dot.

75
00:05:03.460 --> 00:05:05.540
We'll talk about that later.

76
00:05:05.540 --> 00:05:09.880
Right now let's just look at the stuff
that's on the left side of the colon.

77
00:05:09.880 --> 00:05:13.320
So index signature,
the name doesn't really matter.

78
00:05:13.320 --> 00:05:18.279
I mean, you can put something there if
it will help the reader understand what

79
00:05:18.279 --> 00:05:23.280
you're trying to do, maybe it's
customer ID or something like that.

80
00:05:23.280 --> 00:05:26.280
Something that has some
meaning to the reader, but

81
00:05:26.280 --> 00:05:29.710
it's not as if you're referring
to this value anywhere.

82
00:05:29.710 --> 00:05:34.699
You're not saying name doesn't matter
dot whatever, you can't use that.

83
00:05:34.699 --> 00:05:40.420
We're gonna see later that in this
mapped type, we're able to use this.

84
00:05:40.420 --> 00:05:41.376
So giving it a name and

85
00:05:41.376 --> 00:05:44.560
making that name descriptive is
a little bit more important.

86
00:05:44.560 --> 00:05:51.306
So here we have a colon in a regular index
signature, and here we have this word in.

87
00:05:51.306 --> 00:05:55.864
And you can think of,
when I talk about looping behavior,

88
00:05:55.864 --> 00:06:00.060
think of this union type
as what we're looping over.

89
00:06:01.460 --> 00:06:05.352
And think of this as your i, right?

90
00:06:05.352 --> 00:06:08.624
For i equals 0 and loop over this.

91
00:06:08.624 --> 00:06:12.159
Or if you're doing a for in, right,

92
00:06:12.159 --> 00:06:16.729
where you're like,
const key in dictionary.

93
00:06:16.729 --> 00:06:21.193
Fruit key is first gonna be apple and
then it's gonna be cherry, and

94
00:06:21.193 --> 00:06:26.840
we're kind of processing, at least
mentally we can think of it as a loop.

95
00:06:26.840 --> 00:06:29.190
Now remember,
this is just type information.

96
00:06:29.190 --> 00:06:33.082
So there's no code that's being run and
looping.

97
00:06:33.082 --> 00:06:36.770
There's nowhere you could put a break
point to see what's going on.

98
00:06:36.770 --> 00:06:39.220
But the mental model of
looping will hold up here.

99
00:06:40.390 --> 00:06:45.090
So mapped type lets you be
more constrained and specific.

100
00:06:45.090 --> 00:06:49.935
Index signature, by its very nature,
is about defining arbitrary

101
00:06:49.935 --> 00:06:54.880
key value relationships,
different tools for different jobs.

102
00:06:54.880 --> 00:06:56.980
One's not necessarily
better than the other.

103
00:06:56.980 --> 00:07:02.439
But if you were to say FruitKey in string,
you would now be using

104
00:07:02.439 --> 00:07:07.899
a mapped type that is equivalent
to the index signature below.

105
00:07:07.899 --> 00:07:11.262
Cuz it would just iterate,
it would say like for every string,

106
00:07:11.262 --> 00:07:14.703
every possible string,
here is the way I defined my value type.

107
00:07:17.333 --> 00:07:21.592
If that statement is not proof, that
statement should be proof that there is no

108
00:07:21.592 --> 00:07:24.920
real looping that's
happening behind the scenes.

109
00:07:24.920 --> 00:07:29.450
Because there's no way to iterate over
every possible string in JavaScript,

110
00:07:29.450 --> 00:07:31.243
not in a way that will perform.

111
00:07:33.551 --> 00:07:36.762
There's just no way,
let's just say there's no way.

112
00:07:36.762 --> 00:07:40.000
It's sort of a projection but
it feels like looping to us.

113
00:07:40.000 --> 00:07:41.059
We can think of it as looping.

114
00:07:42.080 --> 00:07:46.825
So the in keyword, it's a telltale sign
you're dealing with a mapped type.

115
00:07:46.825 --> 00:07:51.354
And index signatures, you can only
define them on arbitrary strings or

116
00:07:51.354 --> 00:07:53.310
arbitrary numbers.

117
00:07:53.310 --> 00:07:53.810
That's it.

118
00:07:55.920 --> 00:08:00.510
And look what happens if we try to be more
constrained in a regular index signature.

119
00:08:01.530 --> 00:08:05.378
We're literally told that these
error messages are getting

120
00:08:05.378 --> 00:08:10.860
better with every release, consider
using a mapped object type instead.

121
00:08:10.860 --> 00:08:15.251
If we attempt to do the thing that
mapped types are designed to do, or

122
00:08:15.251 --> 00:08:20.580
we're doing it the wrong way, we're told,
just go make a mapped type, please.

123
00:08:21.950 --> 00:08:23.584
Cool, so that's the difference.

124
00:08:23.584 --> 00:08:27.989
Seems like an index signature builds on
top of that concept, but it's different.

125
00:08:30.047 --> 00:08:37.420
So, let's make our MyRecord type
just to show what that is, right?

126
00:08:37.420 --> 00:08:38.980
This is not generic yet.

127
00:08:38.980 --> 00:08:41.977
It very specifically operates on apple and
cherry, and

128
00:08:41.977 --> 00:08:44.680
it very specifically operates on fruit.

129
00:08:44.680 --> 00:08:48.400
Let's make that a bit more generalized.

130
00:08:48.400 --> 00:08:53.351
So what we're gonna do is replace
this fruit key thing, right?

131
00:08:53.351 --> 00:08:56.626
Where it says FruitKey in apple or cherry.

132
00:08:56.626 --> 00:08:59.950
So let's rename that to key, down here.

133
00:08:59.950 --> 00:09:03.160
And then we're gonna pass in this apple or
cherry thing.

134
00:09:03.160 --> 00:09:04.970
We'll make that a type parameter here.

135
00:09:04.970 --> 00:09:06.700
We'll call it the KeyType.

136
00:09:06.700 --> 00:09:09.112
And that'll be the first thing.

137
00:09:09.112 --> 00:09:14.890
And then this thing to the right of
the colon, you've got this fruit.

138
00:09:14.890 --> 00:09:16.800
So we wanna make that generic.

139
00:09:16.800 --> 00:09:19.500
We'll pull that into
a type parameter as well.

140
00:09:19.500 --> 00:09:21.410
So that's all we're doing.

141
00:09:21.410 --> 00:09:25.470
And by the way, this is from
an experienced practitioner of TypeScript.

142
00:09:25.470 --> 00:09:30.518
This is a good pattern to follow,
implement the non-abstract thing,

143
00:09:30.518 --> 00:09:34.820
and then start pulling things
out to make it parameterized.

144
00:09:34.820 --> 00:09:39.674
It's a good way to make sure that you
at least can affirm that continues to

145
00:09:39.674 --> 00:09:42.230
work with the use case you care about.

146
00:09:43.830 --> 00:09:47.270
So now we'll end up with
something like this.

147
00:09:47.270 --> 00:09:51.211
It's much more generalized
where we can specify here

148
00:09:51.211 --> 00:09:56.320
that we can pass in something
like apple or cherry, right?

149
00:09:56.320 --> 00:09:58.180
Pass that in as strings.

150
00:09:59.440 --> 00:10:03.770
Kind of like those will be
the names of the properties.

151
00:10:03.770 --> 00:10:07.561
This will be the values,
the value of the property.

152
00:10:07.561 --> 00:10:12.136
And then it's almost like we're looping
over everything in the key type we

153
00:10:12.136 --> 00:10:13.380
passed in.

154
00:10:13.380 --> 00:10:18.187
First apple, then cherry, and
then we're giving this type.

155
00:10:18.187 --> 00:10:22.150
We're giving it a value
type on the other side.

156
00:10:23.260 --> 00:10:26.326
Now, this is already
built into TypeScript,

157
00:10:26.326 --> 00:10:29.920
but now you understand
how it works hopefully.

158
00:10:29.920 --> 00:10:32.230
So it's called Record.

159
00:10:32.230 --> 00:10:36.832
And I want you to look at these side
by side and see that aside from this,

160
00:10:36.832 --> 00:10:38.939
the names of these properties,

161
00:10:38.939 --> 00:10:44.350
which I've tried to be just a bit
more descriptive than single letters.

162
00:10:44.350 --> 00:10:50.539
We had the same form here, with one
exception, and that's like this keyof any.

163
00:10:50.539 --> 00:10:53.505
But down here, you can see that like,

164
00:10:53.505 --> 00:10:57.600
these are the types of keys
that JavaScript allows.

165
00:10:57.600 --> 00:11:00.330
You can have numbers, symbols or
strings, and that's it.

166
00:11:00.330 --> 00:11:05.249
So I've just said, okay, well, strings,
this is most of the stuff I care to

167
00:11:05.249 --> 00:11:08.710
work with here has property
keys that are strings.

168
00:11:08.710 --> 00:11:11.350
So that's a difference in the constraint,
but

169
00:11:11.350 --> 00:11:14.600
doesn't make things
fundamentally different.

170
00:11:14.600 --> 00:11:18.846
And then we have key in,
some type that we passed in.

171
00:11:18.846 --> 00:11:24.448
So this is property key in K,
well, there it is.

172
00:11:24.448 --> 00:11:27.350
And then there's the second type of param,
and there it is.

173
00:11:27.350 --> 00:11:29.900
And here's our second type of param,
and there it is.

174
00:11:29.900 --> 00:11:35.234
So really, what we're able to do with this

175
00:11:35.234 --> 00:11:40.715
mapped type is build up
an object with a set of

176
00:11:40.715 --> 00:11:46.504
known keys that have
a consistent value type.

177
00:11:49.009 --> 00:11:52.190
That's the first use case for this.

178
00:11:52.190 --> 00:11:55.090
Now, why might you care about this?

179
00:11:55.090 --> 00:12:00.125
Well, sometimes you want to maybe
have a bunch of form fields and

180
00:12:00.125 --> 00:12:05.960
they each have sort of a value and
whether they're validated or not.

181
00:12:05.960 --> 00:12:10.066
It's great to have a nice
dictionary like this, especially if

182
00:12:10.066 --> 00:12:15.030
you're pre-creating one and you know
exactly what you expect to be there.

183
00:12:16.640 --> 00:12:19.640
I'm blurring the line here between
a record and a dictionary.

184
00:12:19.640 --> 00:12:22.940
But this is a quick and
easy way to go ahead and create one.

185
00:12:25.330 --> 00:12:28.380
I would say this is
a subtype of a dictionary.

186
00:12:28.380 --> 00:12:31.892
A dictionary is flexible in that
you can have arbitrary keys and

187
00:12:31.892 --> 00:12:33.770
this has specific keys.

188
00:12:33.770 --> 00:12:37.420
So this is just a more specific
thing than a dictionary.

