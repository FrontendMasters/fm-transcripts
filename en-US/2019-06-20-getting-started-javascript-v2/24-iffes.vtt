WEBVTT

1
00:00:00.050 --> 00:00:02.370
&gt;&gt; Kyle Simpson: Here's another
example of function expressions.

2
00:00:02.370 --> 00:00:03.958
We call these IIFEs.

3
00:00:03.958 --> 00:00:10.289
I-I-F-E, which stands for
Immediately Invoked Function Expression.

4
00:00:10.289 --> 00:00:14.621
You undoubtedly will have seen at least
some of these in some code at some

5
00:00:14.621 --> 00:00:17.735
point because it's
an extremely common pattern.

6
00:00:17.735 --> 00:00:21.600
What we see here is a function
called anotherTeacher.

7
00:00:21.600 --> 00:00:26.200
You'll notice that on line three to line
six there's a wrapping set of parenthesis

8
00:00:26.200 --> 00:00:27.450
around that function.

9
00:00:27.450 --> 00:00:29.930
That's what makes it a function expression

10
00:00:29.930 --> 00:00:34.370
instead of the other form of function
which we call a declaration.

11
00:00:34.370 --> 00:00:35.750
Here, it's a value.

12
00:00:35.750 --> 00:00:40.170
And then specifically, on line six
is where it's getting executed.

13
00:00:40.170 --> 00:00:44.247
That's the immediately invoked part,
it's being executed immediately.

14
00:00:44.247 --> 00:00:50.358
After we describe that function expression
as a value, it immediately invokes it.

15
00:00:50.358 --> 00:00:51.940
That's what makes it an IIFE.

16
00:00:51.940 --> 00:00:54.470
And the main end result of an IIFE,

17
00:00:54.470 --> 00:00:59.430
the main end result of running a function
is that we get a new block of scope there.

18
00:00:59.430 --> 00:01:03.080
There's a block of scope inside
of that function anotherTeacher.

19
00:01:03.080 --> 00:01:06.386
So when I say var teacher
equals Suzy on line four,

20
00:01:06.386 --> 00:01:10.470
I'm making a teacher variable
inside of that function.

21
00:01:10.470 --> 00:01:13.221
I'm not overriding the one from line one.

22
00:01:13.221 --> 00:01:16.546
That allows us to encapsulate
some of our behaviors and

23
00:01:16.546 --> 00:01:20.650
things so that they don't pollute
other parts of the program.

24
00:01:20.650 --> 00:01:24.710
We wouldn't want for
line eight to print Suzy.

25
00:01:24.710 --> 00:01:26.444
We want for line eight to print Kyle.

26
00:01:26.444 --> 00:01:30.595
And the way that we protect that
assignment on line four from changing it

27
00:01:30.595 --> 00:01:32.750
is that we wrap a function around it.

28
00:01:32.750 --> 00:01:34.356
That's at least one ways to do so.

29
00:01:34.356 --> 00:01:36.838
So IIFEs are a very common pattern,

30
00:01:36.838 --> 00:01:41.570
they've been sort of idiomatically
around for more than a decade.

31
00:01:41.570 --> 00:01:46.124
You see linked here in the slides a blog
post back to 2010 from where this idea of

32
00:01:46.124 --> 00:01:50.492
IIFEs, immediately invoked function
expressions, was kind of described.

33
00:01:50.492 --> 00:01:55.057
And they are typically used in places
in our code where we need to collect

34
00:01:55.057 --> 00:01:59.793
a set of variables and protect them
from encroaching upon an outer scope.

