WEBVTT

1
00:00:00.000 --> 00:00:03.260
&gt;&gt; Kyle Simpson: With our basic
understanding of scope under our belt,

2
00:00:03.260 --> 00:00:08.280
we can now look at closure because
closure without understanding scope

3
00:00:08.280 --> 00:00:10.670
is actually not understanding closure.

4
00:00:10.670 --> 00:00:14.170
You really can't get closure
unless you understand

5
00:00:14.170 --> 00:00:15.830
the scope that goes underneath it.

6
00:00:15.830 --> 00:00:19.710
So now that we have a general sense
of how this idea of scope works,

7
00:00:19.710 --> 00:00:24.010
how lexical scope works, we can start to
look at how closure works in our programs.

8
00:00:24.010 --> 00:00:27.500
And I wanna give you just a very
simple definition for closure.

9
00:00:27.500 --> 00:00:31.850
Closure is when a function remembers
the variables outside of it,

10
00:00:31.850 --> 00:00:34.480
even if you pass that function elsewhere.

11
00:00:34.480 --> 00:00:38.320
And there's two parts to this definition
that are key for you to pick up.

12
00:00:38.320 --> 00:00:39.310
Number one,

13
00:00:39.310 --> 00:00:42.920
that it is remembering that a function
is remembering variables outside of it.

14
00:00:42.920 --> 00:00:46.540
We mean variables that were
declared in some outer scope.

15
00:00:47.730 --> 00:00:50.321
So of course a variable is going
to remember its own variables,

16
00:00:50.321 --> 00:00:52.020
ones that was declared inside of it.

17
00:00:52.020 --> 00:00:56.428
But we can also have a function that
accesses variables that were created

18
00:00:56.428 --> 00:01:00.630
outside of it, and that's an important
key that we often need to do.

19
00:01:00.630 --> 00:01:03.080
And we'll see some examples
in a moment of that.

20
00:01:03.080 --> 00:01:07.510
But that's only part of the definition
because the second part is that it's only

21
00:01:07.510 --> 00:01:12.596
closure, we can only observe that as
a closure if we take that function and

22
00:01:12.596 --> 00:01:14.300
we pass it somewhere.

23
00:01:14.300 --> 00:01:16.960
We pass it as a callback argument or

24
00:01:16.960 --> 00:01:21.280
we return it, we assign it to some
property and pass that object around.

25
00:01:23.560 --> 00:01:28.320
Whenever we treat a function as if it's
a value, remember I said a bit earlier,

26
00:01:28.320 --> 00:01:32.220
that's one of the key principles here in
JavaScript is that functions are first

27
00:01:32.220 --> 00:01:33.370
class values.

28
00:01:33.370 --> 00:01:36.820
We can pass them around,
that's what makes them expressions.

29
00:01:36.820 --> 00:01:41.870
Well if we have a function that is of
a value that we can pass around somewhere,

30
00:01:41.870 --> 00:01:45.810
then we have a chance of
observing this idea of closure.

31
00:01:45.810 --> 00:01:48.150
It's probably best for
me to just explain it with code, so

32
00:01:48.150 --> 00:01:49.670
let's look at a code example.

33
00:01:49.670 --> 00:01:53.290
Undoubtedly you've probably used a set
timeout at some point or another or

34
00:01:53.290 --> 00:01:55.960
at least seen someone use
a set timeout before.

35
00:01:55.960 --> 00:02:00.800
And the set timeout is creating
a function expressed, it's referencing

36
00:02:00.800 --> 00:02:06.040
a function expression that has a variable
in it, line three the question variable,

37
00:02:06.040 --> 00:02:10.090
and that question variable
is not inside of waitASec.

38
00:02:10.090 --> 00:02:12.000
It's not a variable that's declared there.

39
00:02:12.000 --> 00:02:13.150
Where is it created?

40
00:02:13.150 --> 00:02:17.580
Its created in the outer
scope of the function ask.

41
00:02:17.580 --> 00:02:21.180
It's specifically that
parameter called question.

42
00:02:21.180 --> 00:02:24.210
Now when we run ask on line seven and

43
00:02:24.210 --> 00:02:28.580
we pass in a string, and
then we call this setTimeout,

44
00:02:28.580 --> 00:02:33.220
immediately after we finish calling
the setTimeout before it's actually run,

45
00:02:33.220 --> 00:02:38.010
just as soon as we've set up this
setTimeout, the ask function has finished.

46
00:02:38.010 --> 00:02:42.040
It's not gonna run anymore,
it's completely done.

47
00:02:42.040 --> 00:02:46.603
And we would normally think that all of
the variables inside of a function go away

48
00:02:46.603 --> 00:02:48.470
when a function finishes.

49
00:02:48.470 --> 00:02:51.501
So we would normally think that
question would just get deleted,

50
00:02:51.501 --> 00:02:53.991
it would just get what's
called garbage collected.

51
00:02:53.991 --> 00:02:58.595
But the reason it doesn't is because
that timer is still waiting for

52
00:02:58.595 --> 00:03:03.301
100 milliseconds with a function
called waitASec in its memory.

53
00:03:03.301 --> 00:03:06.950
And that waitASec function
is referencing question, and

54
00:03:06.950 --> 00:03:12.230
as a result of that it keeps the question
variable, it keeps that scope alive.

55
00:03:12.230 --> 00:03:16.450
And that magic, the way that works,
that's called closure.

56
00:03:16.450 --> 00:03:21.770
It is said that waitASec as a function
has closure over the question variable.

57
00:03:22.780 --> 00:03:26.810
So that allows us to remember some
variable, remember the value that's in

58
00:03:26.810 --> 00:03:30.600
that variable, even when our function
is gonna get executed in an entirely

59
00:03:30.600 --> 00:03:33.620
different place, and sometimes in
an entirely different timeline.

60
00:03:35.730 --> 00:03:36.980
Here's another example.

61
00:03:36.980 --> 00:03:40.450
Not passing a function as an argument
callback like we did in the previous

62
00:03:40.450 --> 00:03:43.680
slide, but
here we're gonna return back a function.

63
00:03:43.680 --> 00:03:48.670
So I call the ask function passing
in what is closure as a string, and

64
00:03:48.670 --> 00:03:54.270
what I get back, line seven I
assigned to the variable my question.

65
00:03:54.270 --> 00:03:58.650
I'm assigning that function
expression as a value.

66
00:03:58.650 --> 00:04:02.877
I'm assigning it to this variable
called my question on line seven.

67
00:04:02.877 --> 00:04:07.017
Somewhere later in the program,
if I execute that function,

68
00:04:07.017 --> 00:04:11.730
it's still knows what the contents
of the question variable.

69
00:04:11.730 --> 00:04:14.940
And the reason it knows the contents
of the question variable

70
00:04:14.940 --> 00:04:16.064
is because of closure.

71
00:04:16.064 --> 00:04:20.660
It had closure over that variable,
it preserved access to that variable, and

72
00:04:20.660 --> 00:04:25.890
it was able to use that at a later time or
in a different place of the program.

73
00:04:25.890 --> 00:04:29.690
Closure is a tremendously important
concept in all of programming.

74
00:04:29.690 --> 00:04:33.687
And this quick brief little look at it is
no where near enough to fully get your

75
00:04:33.687 --> 00:04:35.370
brain wrapped around it.

76
00:04:35.370 --> 00:04:38.890
But I want to encourage you of
all the things I've talked about,

77
00:04:38.890 --> 00:04:42.160
if you don't find anything else
that interests you to dig into and

78
00:04:42.160 --> 00:04:45.820
really learn more about, closure is
gonna be one of the most important and

79
00:04:45.820 --> 00:04:48.390
one of the most prevalent
concepts that you're gonna

80
00:04:48.390 --> 00:04:51.170
encounter throughout all the rest
of your programming career.

81
00:04:51.170 --> 00:04:53.890
It's a feature that
figures heavily in almost

82
00:04:53.890 --> 00:04:56.820
every programming language that
you will future encounter.

83
00:04:56.820 --> 00:05:01.080
And so JavaScript being one of the first
early movers to have this feature,

84
00:05:01.080 --> 00:05:05.744
we've got a really rich language ecosystem
that we can play with this and use it for

85
00:05:05.744 --> 00:05:09.930
all these different patterns,
use it to remember values over time.

86
00:05:09.930 --> 00:05:14.630
It's incredibly powerful, and it's kind
of amazing how you find new usages of

87
00:05:14.630 --> 00:05:16.550
a tool that you've known for a long time.

88
00:05:16.550 --> 00:05:19.170
Even I will find a new usage some day,
and I'm like, wow,

89
00:05:19.170 --> 00:05:21.560
I never even thought to
use closure that way.

90
00:05:21.560 --> 00:05:23.270
It's such a prevalent and

91
00:05:23.270 --> 00:05:26.450
important concept that I don't
want you to skip over it.

92
00:05:26.450 --> 00:05:30.560
Even if in your brain you're still
not quite sure what this is, this is

93
00:05:30.560 --> 00:05:34.390
one of those areas that you definitely
wanna dig into and learn more about.

