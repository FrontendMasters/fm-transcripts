WEBVTT

1
00:00:00.060 --> 00:00:02.760
&gt;&gt; Kyle Simpson: All right,
let's look at function expressions.

2
00:00:02.760 --> 00:00:04.390
We know what functions are, probably.

3
00:00:04.390 --> 00:00:04.960
At this point,

4
00:00:04.960 --> 00:00:08.250
you've seen enough functions in your
programs that you get the idea.

5
00:00:08.250 --> 00:00:11.560
It's a collection of some behavior,
maybe it's computing something.

6
00:00:11.560 --> 00:00:14.810
What specifically is
a function expression?

7
00:00:14.810 --> 00:00:20.690
Well, a function expression is a function
that is assigned as a value somewhere.

8
00:00:20.690 --> 00:00:23.766
This may be a little strange,
maybe a little new to you,

9
00:00:23.766 --> 00:00:27.236
to think about functions not just
as behavior that we call, but

10
00:00:27.236 --> 00:00:29.937
the functions themselves
are actually values.

11
00:00:29.937 --> 00:00:34.285
And that means they can be assigned to
variables, or they can be passed as

12
00:00:34.285 --> 00:00:39.380
arguments to other functions, or
they can be returned from functions.

13
00:00:39.380 --> 00:00:43.060
We so-call this a first class value.

14
00:00:43.060 --> 00:00:46.400
A function is a first class
citizen in the language.

15
00:00:46.400 --> 00:00:48.040
It's a value that can be passed around.

16
00:00:48.040 --> 00:00:51.970
Just like the number 42 or
the string Kyle can be passed around or

17
00:00:51.970 --> 00:00:54.710
assigned, so can also our functions.

18
00:00:54.710 --> 00:00:59.370
So any function that is being declared and
assigned to a variable or

19
00:00:59.370 --> 00:01:03.810
a property, or it's past, it's gonna have
this label of a function expression.

20
00:01:03.810 --> 00:01:05.962
So let's look at some examples of those.

21
00:01:07.260 --> 00:01:10.349
&gt;&gt; Kyle Simpson: Here's a function
expression that's getting assigned to

22
00:01:10.349 --> 00:01:11.600
a variable on line one.

23
00:01:11.600 --> 00:01:14.930
It doesn't have a name in
the function expression,

24
00:01:14.930 --> 00:01:17.210
but it gets assigned to
a variable called clickHandler.

25
00:01:17.210 --> 00:01:18.840
And then, on line five,

26
00:01:18.840 --> 00:01:22.220
I have another function expression
that's getting assigned to a variable.

27
00:01:22.220 --> 00:01:25.710
And this time,
that function expression does have a name.

28
00:01:25.710 --> 00:01:27.810
It's called keyHandler, and

29
00:01:27.810 --> 00:01:31.160
it's assigned to a variable
of the same name, keyHandler.

30
00:01:31.160 --> 00:01:35.160
So these two function expressions
have a slightly different term

31
00:01:35.160 --> 00:01:38.110
if we're trying to discuss
them in very specific detail.

32
00:01:38.110 --> 00:01:38.930
The one on line one,

33
00:01:38.930 --> 00:01:44.100
we would call that function expression
an anonymous function expression.

34
00:01:44.100 --> 00:01:48.300
And then, if we see keyHandler, the
function expression that's on line five,

35
00:01:48.300 --> 00:01:52.160
because it has a name we call
it a named function expression.

36
00:01:52.160 --> 00:01:56.744
So just real briefly, I wanna talk about a
couple of reasons why you should be aware

37
00:01:56.744 --> 00:02:00.865
of the difference between named
function expressions, like line five,

38
00:02:00.865 --> 00:02:03.270
versus anonymous function expressions.

39
00:02:03.270 --> 00:02:07.450
By far, you will more likely have seen
more of anonymous function expressions in

40
00:02:07.450 --> 00:02:10.606
the code that you've written and
that others have written.

41
00:02:10.606 --> 00:02:13.300
But I'm gonna make the case
that you really should have

42
00:02:13.300 --> 00:02:15.900
all named function expressions,
if possible.

43
00:02:18.025 --> 00:02:21.038
&gt;&gt; Kyle Simpson: So here's some
examples of function expressions,

44
00:02:21.038 --> 00:02:23.650
where they are anonymous versus named.

45
00:02:23.650 --> 00:02:28.490
And I'm gonna make the claim that the
arrow function that we see on line one,

46
00:02:28.490 --> 00:02:31.410
you do have to kind of read its
function body to figure out

47
00:02:31.410 --> 00:02:33.830
that it's extracting the ID property.

48
00:02:33.830 --> 00:02:34.930
But on line three,

49
00:02:34.930 --> 00:02:39.800
we see a function expression that tells
us in its name exactly what it does.

50
00:02:39.800 --> 00:02:43.030
So one of the reasons why I
prefer name function expressions

51
00:02:43.030 --> 00:02:45.950
is because their descriptive name
tells us what they're doing.

52
00:02:48.362 --> 00:02:50.684
&gt;&gt; Kyle Simpson: The same is true
if you're writing, for example,

53
00:02:50.684 --> 00:02:51.500
promise chains.

54
00:02:51.500 --> 00:02:54.677
I know promise chains are common in
a lot of people's code base, and

55
00:02:54.677 --> 00:02:58.638
it's very common that you do these sort of
anonymous arrow functions in your promise

56
00:02:58.638 --> 00:03:00.178
chains like we see on line 10.

57
00:03:00.178 --> 00:03:02.469
And yes, you can figure out,

58
00:03:02.469 --> 00:03:07.231
you can infer that we're getting
some data from a person, but

59
00:03:07.231 --> 00:03:12.930
you have to read that getData person
ID expression to figure that out.

60
00:03:12.930 --> 00:03:17.722
Whereas on line 14, the name says
getting the data from the person.

61
00:03:17.722 --> 00:03:21.100
It's almost like it reads
as an English statement.

62
00:03:21.100 --> 00:03:26.018
So I'm not a big fan of arrow functions
personally because they fall under this

63
00:03:26.018 --> 00:03:29.758
kind of heading of being
anonymous function expressions.

64
00:03:29.758 --> 00:03:34.010
And I would far prefer there to be
a name on the function expressions.

65
00:03:34.010 --> 00:03:37.910
And I know it's a difficult habit to break
because I still have this problem where I

66
00:03:37.910 --> 00:03:39.721
write function open parentheses, or

67
00:03:39.721 --> 00:03:43.186
sometimes I'll think that maybe I
should just write an arrow function.

68
00:03:43.186 --> 00:03:46.582
But I often have to step back and
say wouldn't it be better for

69
00:03:46.582 --> 00:03:50.908
me have a descriptive name to tell the
reader of my code what the real purpose of

70
00:03:50.908 --> 00:03:51.986
this function is?

71
00:03:51.986 --> 00:03:54.440
I don't want them to have to
figure it out on their own.

72
00:03:54.440 --> 00:03:56.937
I would like them to be able to just read
the name and know exactly what it's for.

