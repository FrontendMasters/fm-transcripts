WEBVTT

1
00:00:02.880 --> 00:00:06.065
&gt;&gt; Kyle Simpson: The third and
final pillar of JavaScript that we wanna

2
00:00:06.065 --> 00:00:09.761
focus on in this course is the this and
the prototypes system.

3
00:00:09.761 --> 00:00:13.513
They fit very closely together, they're
not actually really very separatable,

4
00:00:13.513 --> 00:00:15.668
so they're one unit that
we want to talk about.

5
00:00:15.668 --> 00:00:18.385
The this keyword, and
then the prototype system.

6
00:00:18.385 --> 00:00:22.505
And actually, what you're more likely
to encounter in modern JavaScript code

7
00:00:22.505 --> 00:00:26.665
is that the prototype system is what
the class keyword is built on top of.

8
00:00:26.665 --> 00:00:29.475
So I'm gonna take a look
at this prototypes, and

9
00:00:29.475 --> 00:00:32.275
then we'll finish by looking
at the class keyword.

10
00:00:32.275 --> 00:00:35.220
Let's take a look first
at the this keyword.

11
00:00:35.220 --> 00:00:38.931
A function's this keyword, you've
undoubtedly probably seen a function with

12
00:00:38.931 --> 00:00:40.330
a this keyword in front of it.

13
00:00:40.330 --> 00:00:45.760
That this keyword references what we
would call an execution context for

14
00:00:45.760 --> 00:00:47.030
when that function gets called.

15
00:00:47.030 --> 00:00:51.040
I want to stop right there and
just point out, it's all about the call,

16
00:00:51.040 --> 00:00:55.450
it's not about the definition of the
function, it's not where the function is,

17
00:00:55.450 --> 00:00:58.950
it's not what the function belongs to,
none of that matters.

18
00:00:58.950 --> 00:01:01.730
It's only how the function was called,

19
00:01:01.730 --> 00:01:04.590
that determines where the this
keyword is pointing at.

20
00:01:04.590 --> 00:01:08.223
It's determined entirely by
how that function was called.

21
00:01:08.223 --> 00:01:13.795
And that this-aware function can
actually have different contexts.

22
00:01:13.795 --> 00:01:17.925
So if you define a function once and
you call it in a bunch of different ways,

23
00:01:17.925 --> 00:01:21.855
it's gonna end up having different this
keywords every time it's called, and

24
00:01:21.855 --> 00:01:25.175
that is what we would
call a dynamic context.

25
00:01:25.175 --> 00:01:27.175
That gives us much more flexibility.

26
00:01:27.175 --> 00:01:30.470
Instead of having a function like with
when we talked about lexical scope and

27
00:01:30.470 --> 00:01:34.500
closure, it's very fixed and
it remembers it the same for ever.

28
00:01:34.500 --> 00:01:39.380
Well, a dynamic context means that we
can change, use the same function but

29
00:01:39.380 --> 00:01:42.820
change what context it is,
based upon how we call the function.

30
00:01:42.820 --> 00:01:45.010
That makes it much more flexible and
reusable.

31
00:01:45.010 --> 00:01:46.290
It's a really powerful, and

32
00:01:46.290 --> 00:01:49.559
I think, underappreciated part
of the JavaScript language.

33
00:01:51.360 --> 00:01:54.460
So let's take a look at an example
of using the this keyword

34
00:01:54.460 --> 00:01:56.790
inside of some this-aware functions.

35
00:01:56.790 --> 00:02:00.630
Here I've got a workshop object with
a property on it called teacher, and

36
00:02:00.630 --> 00:02:02.690
then a method called ask.

37
00:02:02.690 --> 00:02:07.630
And that method has a this keyword in it,
so that makes it a this-aware

38
00:02:07.630 --> 00:02:12.080
function because there’s a this keyword
there that makes it a this-aware function,

39
00:02:12.080 --> 00:02:15.980
and that means that to determine what
the this keyword is going to point at,

40
00:02:15.980 --> 00:02:18.820
we don’t need to look at
lines one through six.

41
00:02:18.820 --> 00:02:22.460
None of those lines are going to determine
anything about the this keyword.

42
00:02:22.460 --> 00:02:26.630
It is only line eight that is going
to determine what the this keyword

43
00:02:26.630 --> 00:02:27.800
is pointing at.

44
00:02:27.800 --> 00:02:33.200
And in particular, we have a set of rules,
there's actually four rules that determine

45
00:02:33.200 --> 00:02:37.110
how a function's call determines what
it's this keyword for that call,

46
00:02:37.110 --> 00:02:38.880
what this key word is going to point at.

47
00:02:38.880 --> 00:02:43.500
And this is one of those rules, which we
would call the implicit binding rule.

48
00:02:43.500 --> 00:02:47.800
It means that at the place where
the function is called down on line eight,

49
00:02:47.800 --> 00:02:52.280
you'll notice that there is
a workshop object in front of

50
00:02:52.280 --> 00:02:54.180
the reference to the .ask method.

51
00:02:54.180 --> 00:02:56.710
So it says workshop.ask.

52
00:02:56.710 --> 00:03:01.656
That's an implicit binding of
the workshop as the this keyword.

53
00:03:01.656 --> 00:03:04.530
So on line 4,
when have a this keyword, for

54
00:03:04.530 --> 00:03:09.050
that particular invocation of the
function, it's gonna point at workshop,

55
00:03:09.050 --> 00:03:13.930
which is why when it says this.teacher,
it's gonna end up pulling out the name

56
00:03:13.930 --> 00:03:17.950
Kyle instead of undefined or
some other value.

57
00:03:17.950 --> 00:03:23.110
So it was entirely based upon line eight,
it was not that ask was inside

58
00:03:23.110 --> 00:03:28.260
of a workshop object, it was just
that the way we called on line 8,

59
00:03:28.260 --> 00:03:33.320
allowed that function ask to use
workshop as its this context.

60
00:03:33.320 --> 00:03:37.390
We can actually change, we can have
a function that is in one place, and

61
00:03:37.390 --> 00:03:41.690
change what this context it uses,
based upon its call site.

62
00:03:41.690 --> 00:03:43.260
So here's another example.

63
00:03:43.260 --> 00:03:46.340
I have an ask function,
line 1, that is this aware.

64
00:03:46.340 --> 00:03:50.220
You see that this keyword on line 2,
it's a this aware function.

65
00:03:50.220 --> 00:03:52.690
It doesn't have any object
that it's wrapped around, so

66
00:03:52.690 --> 00:03:56.780
there's no obvious this context for
it to adopt, and

67
00:03:56.780 --> 00:04:02.250
that's because the this context is gonna
be entirely determined by how we call it.

68
00:04:02.250 --> 00:04:04.710
Well, we're gonna call it on line 9, and

69
00:04:04.710 --> 00:04:07.670
that's gonna determine what
the this keyword is gonna point at.

70
00:04:07.670 --> 00:04:13.450
Lines 6, 7 and 8, I make an object called
myContext, with the teacher of value Suzy.

71
00:04:13.450 --> 00:04:17.000
And on line 9, I say ask.call.

72
00:04:17.000 --> 00:04:21.860
That's another way of invoking a function
that tells it, invoke that function ask

73
00:04:21.860 --> 00:04:28.890
and use, as you see on line 9,
the myContext object as the this keyword.

74
00:04:28.890 --> 00:04:34.770
So when it says this teacher it's going
to find myContext as that value and

75
00:04:34.770 --> 00:04:37.600
then it's going to pull out
teacher with the value Susie.

76
00:04:39.200 --> 00:04:44.470
So teacher then points at the teacher
that we defined in the myContext object

77
00:04:44.470 --> 00:04:45.780
on line 7.

78
00:04:45.780 --> 00:04:47.990
So that’s another way invoking a function.

79
00:04:47.990 --> 00:04:52.615
Line 9, when we say a .call on a method,
instead of saying workshop or

80
00:04:52.615 --> 00:04:56.940
myContext.ask, here we just said ask.call,
and

81
00:04:56.940 --> 00:04:59.760
we gave it an object to use for
the this keyword.

82
00:04:59.760 --> 00:05:02.070
That’s called an explicit binding.

83
00:05:02.070 --> 00:05:06.320
In both cases, we're providing
a dynamic context to this function, and

84
00:05:06.320 --> 00:05:10.460
if we were to do so in five different
other places of the program, we could end

85
00:05:10.460 --> 00:05:15.060
up getting each one of those invocations
using a different this keyword.

86
00:05:15.060 --> 00:05:17.030
That's the flexibility
that I'm talking about.

87
00:05:17.030 --> 00:05:21.600
It's one function that can be reused
against a lot of different contexts.

88
00:05:21.600 --> 00:05:23.390
It makes it extremely much more powerful.

