WEBVTT

1
00:00:02.440 --> 00:00:06.172
&gt;&gt; Kyle Simpson: Armed with a basic
foundation in programming concepts,

2
00:00:06.172 --> 00:00:10.847
let's turn our attention to a look
at the three pillars of JavaScript.

3
00:00:10.847 --> 00:00:12.248
The three main areas,

4
00:00:12.248 --> 00:00:17.059
units of discussion that you're really
gonna wana spend time digging into.

5
00:00:17.059 --> 00:00:21.765
And again, as I said at the outset of this
course, expectation wise, it's not like

6
00:00:21.765 --> 00:00:25.831
you can spend one day and be just totally
done with any one of these three.

7
00:00:25.831 --> 00:00:29.837
These are weeks, months, potentially
even years of time on each of them.

8
00:00:29.837 --> 00:00:33.025
And you're gonna get them in layers,
you're not gonna have all of one and

9
00:00:33.025 --> 00:00:35.404
then all of another,
it's gonna be layer upon layer.

10
00:00:35.404 --> 00:00:37.803
So as you go throughout your
development career, and

11
00:00:37.803 --> 00:00:39.616
your JavaScript career in particular,

12
00:00:39.616 --> 00:00:43.159
you're gonna see these kinds of things
coming up over and over and over again.

13
00:00:43.159 --> 00:00:47.612
And my hope is that you'll be able to
take this as a reference to come back to.

14
00:00:47.612 --> 00:00:50.956
And again,
the books as a reference to come back to,

15
00:00:50.956 --> 00:00:55.522
as you see those layers being added
on as you go throughout your career.

16
00:00:55.522 --> 00:00:58.762
So the three pillars of JavaScript
we wanna look at, number 1,

17
00:00:58.762 --> 00:01:00.630
we wanna look at types and coercion.

18
00:01:00.630 --> 00:01:03.750
Number 2, we wanna look at the scope and
the closure system.

19
00:01:03.750 --> 00:01:06.932
And number 3, the this and
the prototypes system.

20
00:01:06.932 --> 00:01:10.524
And actually, that's more about
class oriented even than prototypes.

21
00:01:10.524 --> 00:01:14.403
So those are the three main areas that
we will look at through the rest of this

22
00:01:14.403 --> 00:01:14.907
course.

23
00:01:14.907 --> 00:01:17.839
Let's dive into types and coercion.

24
00:01:17.839 --> 00:01:21.089
The three things that we wanna
look at underneath types and

25
00:01:21.089 --> 00:01:23.085
coercion are the primitive types.

26
00:01:23.085 --> 00:01:26.049
And if you remember from
the primer at the top,

27
00:01:26.049 --> 00:01:29.854
we saw primitive types like number and
boolean and string.

28
00:01:29.854 --> 00:01:31.330
We wanna get real clear on what those are.

29
00:01:31.330 --> 00:01:35.864
We wanna talk about how you convert from
one type to another, because basically all

30
00:01:35.864 --> 00:01:39.636
programs have to do some kind of
conversion from one type to another.

31
00:01:39.636 --> 00:01:44.964
And then we wanna check whether or not two
values are equal or one value's less than.

32
00:01:44.964 --> 00:01:48.092
We wanna do some sort of
equality checking on our values.

33
00:01:48.092 --> 00:01:50.880
Those are the three main areas
that we wanna pay attention to.

34
00:01:50.880 --> 00:01:54.608
And I'll just give you a word of caution,
out of the three,

35
00:01:54.608 --> 00:01:57.517
this particular unit
is generally speaking,

36
00:01:57.517 --> 00:02:02.231
one of the lesser focused on things as
most people learn about JavaScript.

37
00:02:02.231 --> 00:02:06.257
And I think it might be one of the more
important of the foundational pillars for

38
00:02:06.257 --> 00:02:07.113
this language.

39
00:02:07.113 --> 00:02:10.471
So it’s really important that you
push against that normal temptation.

40
00:02:10.471 --> 00:02:13.624
Someone might tell you you don’t
need to know about that stuff,

41
00:02:13.624 --> 00:02:14.595
just do it this way.

42
00:02:14.595 --> 00:02:18.481
I think it’s important to push against
that and really dig in here and

43
00:02:18.481 --> 00:02:21.768
understand, these are core
mechanisms to the language.

44
00:02:21.768 --> 00:02:25.769
And it's not gonna be effective for you in
your career if you're writing JavaScript

45
00:02:25.769 --> 00:02:28.543
and you have no idea how it's working or
what it's doing.

46
00:02:28.543 --> 00:02:31.783
So let's dive into types and coercion.

47
00:02:31.783 --> 00:02:33.563
We'll look at primitive types.

48
00:02:33.563 --> 00:02:37.912
Again, we said at the outset
what those are, but

49
00:02:37.912 --> 00:02:44.503
just as a quick kind of review,
we wanna look at the strings and booleans.

50
00:02:44.503 --> 00:02:48.505
And I wanna confront head on this
statement that is thrown around this,

51
00:02:48.505 --> 00:02:50.649
you'll find this in books and blogs.

52
00:02:50.649 --> 00:02:54.486
And you may have run across this
on a Stack Overflow answer or

53
00:02:54.486 --> 00:02:56.649
500 at some point or another.

54
00:02:56.649 --> 00:03:01.005
Somebody will say something in JavaScript,
everything is an object.

55
00:03:01.005 --> 00:03:05.553
That is thrown around as a fact and
it is 100% false.

56
00:03:05.553 --> 00:03:09.885
It is not true in JavaScript
everything is an object.

57
00:03:09.885 --> 00:03:13.698
There are historical reasons
why people think that, but

58
00:03:13.698 --> 00:03:15.849
it really is not actually true.

59
00:03:15.849 --> 00:03:18.002
We do have, indeed primitive types.

60
00:03:18.002 --> 00:03:19.907
So let's look at what some of those are.

61
00:03:19.907 --> 00:03:22.273
You might recall that we
talked about undefined.

62
00:03:22.273 --> 00:03:26.329
Well, we also have the string type,
we have the number type,

63
00:03:26.329 --> 00:03:28.756
the boolean type, the object type.

64
00:03:28.756 --> 00:03:33.598
Those five are pretty solid,
pretty well easy to understand, but

65
00:03:33.598 --> 00:03:36.635
we have a couple that might surprise you.

66
00:03:36.635 --> 00:03:40.330
So we have symbol, which was a brand
new one that was added about two or

67
00:03:40.330 --> 00:03:41.295
three years ago.

68
00:03:41.295 --> 00:03:45.393
It doesn't get a lot of usage, but it is
one of the primitive types in JavaScript.

69
00:03:45.393 --> 00:03:48.446
So every once in a while,
you might run across a symbol.

70
00:03:48.446 --> 00:03:50.021
But what also about null?

71
00:03:50.021 --> 00:03:52.478
You remember undefined was an empty type,
what about null?

72
00:03:52.478 --> 00:03:56.554
Well, that is a primitive type, but
I have that highlighted in orange because

73
00:03:56.554 --> 00:04:00.286
it behaves a little bit strangely
with respect to the type of operator.

74
00:04:00.286 --> 00:04:04.812
It gives us not back what we would expect,
so it's an important type, but

75
00:04:04.812 --> 00:04:07.594
it has some quirks that
we have to be aware of.

76
00:04:07.594 --> 00:04:11.668
And then also function, we know functions
are a thing in our language but,

77
00:04:11.668 --> 00:04:13.358
is it really a primitive type?

78
00:04:13.358 --> 00:04:18.190
Technically it's not, it's actually
technically just a subtype of the object

79
00:04:18.190 --> 00:04:20.686
type which is the same is true for arrays.

80
00:04:20.686 --> 00:04:24.034
Arrays are not their own
official primitive type.

81
00:04:24.034 --> 00:04:26.568
They are a subtype of the object type.

82
00:04:26.568 --> 00:04:31.221
So let's just point out that
the types that we're talking about

83
00:04:31.221 --> 00:04:36.315
are associated with the values themselves,
not with the variables.

84
00:04:36.315 --> 00:04:39.440
So in some programming languages, like for

85
00:04:39.440 --> 00:04:43.836
example Java or C,
you say variable x is gonna hold integers.

86
00:04:43.836 --> 00:04:47.003
And then it can only ever hold integers.

87
00:04:47.003 --> 00:04:48.684
And then you say variable y,

88
00:04:48.684 --> 00:04:52.058
and it can only ever hold boolean or
something like that.

89
00:04:52.058 --> 00:04:54.734
Well it's different in scripting language,

90
00:04:54.734 --> 00:04:59.338
in a dynamically typed language like
we have with JavaScript it's different.

91
00:04:59.338 --> 00:05:03.062
Because here we're not talking about x or
y having a type,

92
00:05:03.062 --> 00:05:07.166
here we're talking about the values
themselves having a type.

93
00:05:07.166 --> 00:05:10.322
So it's not the variables that have types,
it's the values.

94
00:05:10.322 --> 00:05:14.977
So, when I say var v, you might recall
when we declare a variable that

95
00:05:14.977 --> 00:05:18.431
it initially gets assigned
the undefined value and

96
00:05:18.431 --> 00:05:22.784
the undefined value is going to
have type of, quote undefined.

97
00:05:22.784 --> 00:05:28.238
If I assign it a string one, and then I
say type of v, I'm gonna get quote string.

98
00:05:28.238 --> 00:05:33.016
And then if i assign it the number 2,
and i say type of, it's quote number.

99
00:05:33.016 --> 00:05:37.173
And so on for boolean,
we see the object giving us quote object,.

100
00:05:37.173 --> 00:05:40.659
There is one of those ES 6 symbols,
giving us quote symbol.

101
00:05:40.659 --> 00:05:43.375
I wanna highlight the undefined for
just a moment,

102
00:05:43.375 --> 00:05:45.659
because this one's a little bit bizarre.

103
00:05:45.659 --> 00:05:48.557
It's been declared and
it's been given undefined but

104
00:05:48.557 --> 00:05:52.967
there's another case where we can get the
same return result of quote undefined and

105
00:05:52.967 --> 00:05:55.682
that is when the variable
has never been declared.

106
00:05:55.682 --> 00:05:59.811
You might think that should give
a different result, I certainly do, but

107
00:05:59.811 --> 00:06:04.206
it turns out that in either the case where
it's been declared and has no value or

108
00:06:04.206 --> 00:06:05.822
it’s never been declared.

109
00:06:05.822 --> 00:06:09.321
JavaScript sort of treats those
both as the undefined state.

110
00:06:09.321 --> 00:06:11.652
And that can actually lead to
some confusion later on so

111
00:06:11.652 --> 00:06:12.976
it’s good to be aware of that.

112
00:06:12.976 --> 00:06:16.810
Here’s an example,
when we say type of doesn’t exist, there’s

113
00:06:16.810 --> 00:06:21.677
a variable that doesn’t exist, and yet
we're still getting the quote undefined.

114
00:06:21.677 --> 00:06:24.204
We haven't created it with
a var statement and yet

115
00:06:24.204 --> 00:06:26.262
we're still getting quote undefined.

116
00:06:26.262 --> 00:06:32.404
So again, be aware of the difference
between a variable thats been created and

117
00:06:32.404 --> 00:06:38.654
has no value like v in the previous slide
but also variables that you reference.

118
00:06:38.654 --> 00:06:42.242
And you don't often reference variables
that are straight up, never exist, but

119
00:06:42.242 --> 00:06:43.856
you may be mistyped a variable name.

120
00:06:43.856 --> 00:06:47.232
And that will be in that state where
the type of operator would give us quote

121
00:06:47.232 --> 00:06:47.837
undefined.

122
00:06:47.837 --> 00:06:51.985
I mentioned just a moment ago that null
kind of behaves a little bit strange.

123
00:06:51.985 --> 00:06:56.754
We see here that type of v, when the value
is null, we see that it gives us quote,

124
00:06:56.754 --> 00:06:59.980
object instead of what we
might expect of quote null.

125
00:06:59.980 --> 00:07:03.436
This is an historical bug from JavaScript.

126
00:07:03.436 --> 00:07:08.723
There’s not really anything we
can do about [LAUGH] those bugs.

127
00:07:08.723 --> 00:07:12.203
We can’t fix those things because it
would break far too many pieces of code.

128
00:07:12.203 --> 00:07:15.658
And then we see if we assign it a function
to the v variable, that's called

129
00:07:15.658 --> 00:07:19.473
a function expression, by the way,
we'll talk about that later in the course.

130
00:07:19.473 --> 00:07:24.040
Type of v there, we get quote function and
even though function is not

131
00:07:24.040 --> 00:07:28.239
an actual primitive type,
it's a subtype of object as I said.

132
00:07:28.239 --> 00:07:31.956
It does have its own unique return
value here which might be a little bit

133
00:07:31.956 --> 00:07:35.925
surprising but it's actually very useful
because we need to know if we have

134
00:07:35.925 --> 00:07:38.080
a value that can be called as a function.

135
00:07:38.080 --> 00:07:41.027
And then we see line 9,
we create an array, and

136
00:07:41.027 --> 00:07:43.682
typeof is gonna give us quote object here,

137
00:07:43.682 --> 00:07:48.513
because it can't further distinguish
that as a subtype of the object there.

138
00:07:48.513 --> 00:07:52.074
You might think, why did it do it for
functions and not for arrays?

139
00:07:52.074 --> 00:07:56.216
And the answer, as with most things,
is because reasons, because history,

140
00:07:56.216 --> 00:07:58.494
there's a variety of different reasons.

141
00:07:58.494 --> 00:08:02.157
Why these works exist, can't really
change them now because there's so

142
00:08:02.157 --> 00:08:04.177
much JavaScript that that would break.

143
00:08:04.177 --> 00:08:07.149
But again,
we can further distinguish things that

144
00:08:07.149 --> 00:08:11.790
are raised using other built in methods,
like for example, array.isarray.

145
00:08:11.790 --> 00:08:15.320
And we'll talk about about those
sorts of operations as we go forward.

