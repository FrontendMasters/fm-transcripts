WEBVTT

1
00:00:00.230 --> 00:00:01.350
&gt;&gt; Kyle Simpson: Speaking of scoping,

2
00:00:01.350 --> 00:00:05.140
where we wanna collect things,
the more common way, these days,

3
00:00:05.140 --> 00:00:08.845
over the last few years, we've introduced
block scoping into JavaScript.

4
00:00:08.845 --> 00:00:12.920
And the more common way for
us to organize a set of variables

5
00:00:12.920 --> 00:00:15.750
instead of having them
pollute the enclosing scope,

6
00:00:15.750 --> 00:00:19.300
the outer scope,
is we use what's called block scoping.

7
00:00:19.300 --> 00:00:24.120
So instead of using this IIFE
example to protect the teacher

8
00:00:24.120 --> 00:00:29.140
variable declaration on line 4
from changing the one from line 1,

9
00:00:29.140 --> 00:00:32.810
we want those to be separate
variable,s and we need a scope.

10
00:00:32.810 --> 00:00:36.720
And instead of using a function to do
that, now we have the option of simply

11
00:00:36.720 --> 00:00:41.630
using a curly brace block, and
we switch from using a var to using a let.

12
00:00:41.630 --> 00:00:46.970
The let keyword will tell us to create
a variable inside of a curly brace block,

13
00:00:46.970 --> 00:00:49.660
and that declaration then is separate.

14
00:00:49.660 --> 00:00:51.410
It's an entirely different variable.

15
00:00:51.410 --> 00:00:54.090
Even though they have the same name,
it's a different variable,

16
00:00:54.090 --> 00:00:58.760
and that allows us to kind of keep our
variables more nicely collected together.

17
00:00:58.760 --> 00:01:00.770
We don't need them all
out in the global scope,

18
00:01:00.770 --> 00:01:04.530
we like to have them as close to where
we're gonna use them as possible.

19
00:01:04.530 --> 00:01:06.980
So block scoping is
a very important feature.

20
00:01:06.980 --> 00:01:10.670
It had been missing from JavaScript for
quite a long time, and now we have that,

21
00:01:10.670 --> 00:01:12.990
as of three or four years ago.

22
00:01:12.990 --> 00:01:16.400
In ES6, we now have the ability
to use the let keyword.

23
00:01:16.400 --> 00:01:19.370
And indeed, you probably will have seen,
over the last year or

24
00:01:19.370 --> 00:01:22.050
two, almost all code
snippets you find online,

25
00:01:22.050 --> 00:01:25.990
it seems everybody's using let,
it's an extremely popular feature.

26
00:01:25.990 --> 00:01:29.330
I recommend using that whenever you
have a variable inside of a block.

27
00:01:29.330 --> 00:01:30.500
Use the let keyword so

28
00:01:30.500 --> 00:01:33.880
that you can protect it from
encroaching upon an outer scope.

29
00:01:35.160 --> 00:01:38.650
One of the ways that we end up using
this is inside of these various blocks,

30
00:01:38.650 --> 00:01:40.500
like for example, an if statement.

31
00:01:40.500 --> 00:01:42.400
Here I'm using the let tmp, so

32
00:01:42.400 --> 00:01:46.430
that that tmp variable only belongs
inside of the if statement instead of

33
00:01:46.430 --> 00:01:49.450
out in the whole function scope,
or even in the global scope.

34
00:01:49.450 --> 00:01:52.854
It only exists for lines 3,
4, and 5, and the tighter,

35
00:01:52.854 --> 00:01:55.783
the smaller the places
where our variables can be,

36
00:01:55.783 --> 00:02:00.029
the less likely we are to have variables
accidentally being reassigned.

37
00:02:00.029 --> 00:02:03.821
The less likely we are to have variables
being changed in ways that we didn't

38
00:02:03.821 --> 00:02:07.940
expect, and because somebody's
trying to mess around with our code.

39
00:02:07.940 --> 00:02:11.660
These things,
if we keep them as privately as possible,

40
00:02:11.660 --> 00:02:14.170
there's a general principle
of engineering here,

41
00:02:14.170 --> 00:02:18.260
which is we wanna keep things as
hidden and as private as possible.

42
00:02:18.260 --> 00:02:21.360
Only make them available
if we absolutely have to.

43
00:02:21.360 --> 00:02:23.400
Block scoping is a key tool in that.

44
00:02:25.390 --> 00:02:27.530
You'll notice here that
I'm using a let on a for

45
00:02:27.530 --> 00:02:30.210
loop because we wanna make
an i that belongs to the for

46
00:02:30.210 --> 00:02:33.400
loop, it's only available for
the purposes of that for loop.

47
00:02:33.400 --> 00:02:37.690
But you'll notice also that I'm still
using a var out on the result variable.

48
00:02:39.010 --> 00:02:42.860
And the reason for that,
this is a personal choice, a personal,

49
00:02:42.860 --> 00:02:47.480
stylistic opinion of mine, that instead
of changing all of my vars to to lets,

50
00:02:47.480 --> 00:02:50.153
I like to still use var
at the function level.

51
00:02:50.153 --> 00:02:54.775
Because VAR is always gonna behave
as if it belongs to the function,

52
00:02:54.775 --> 00:02:59.820
I like to put VARs at the function level
and only use lets inside of blocks.

53
00:02:59.820 --> 00:03:03.380
I think it communicates
the difference between those two,

54
00:03:03.380 --> 00:03:08.220
communicates clearly, hey, this thing
is gonna belong to the whole function,

55
00:03:08.220 --> 00:03:12.940
now this thing is only gonna belong to
this block, like a for loop or an if loop.

56
00:03:12.940 --> 00:03:16.388
And I also think it's really important for
us to be very careful about not just

57
00:03:16.388 --> 00:03:19.780
putting something at the function
scope because it's convenient.

58
00:03:19.780 --> 00:03:24.200
If it's only needed for a few lines,
go ahead and open up a curly brace block,

59
00:03:24.200 --> 00:03:29.110
like I'm doing here, lines 2 through 6,
to collect the prefix and

60
00:03:29.110 --> 00:03:34.720
the rest variable into a block, instead of
just making those at the function level.

61
00:03:34.720 --> 00:03:39.050
Whether you use the let or the var,
either way, they don't need to exist for

62
00:03:39.050 --> 00:03:40.200
the whole function.

63
00:03:40.200 --> 00:03:43.860
They only need to exist for those
first couple of lines of the function.

64
00:03:43.860 --> 00:03:45.420
So it's a good idea to just go ahead and

65
00:03:45.420 --> 00:03:48.850
open up a block,
just to contain those variables.

66
00:03:48.850 --> 00:03:54.200
Again, remember this principle of
keeping things hidden whenever possible.

67
00:03:54.200 --> 00:03:57.560
Have them as narrowly
scoped as we possibly can.

68
00:03:57.560 --> 00:04:01.300
So I call this an explicit let block,
because it opens up a curly brace pair,

69
00:04:01.300 --> 00:04:05.190
and then we have the let keyword on
line 2 to create a couple of variables.

70
00:04:05.190 --> 00:04:08.937
Prefix and
rest only exist inside of those few lines.

71
00:04:08.937 --> 00:04:13.478
And they can't possibly be collided with
or accidentally misassigned on lines 8

72
00:04:13.478 --> 00:04:18.210
through 12, because those variables
aren't even in that scope anymore.

73
00:04:18.210 --> 00:04:20.290
They're now inside of the smaller scope.

74
00:04:20.290 --> 00:04:25.050
So block scoping can be a very powerful
tool for helping prevent bugs, preventing

75
00:04:25.050 --> 00:04:29.080
problems, that don't come to bite you
until sometimes weeks or months later.

