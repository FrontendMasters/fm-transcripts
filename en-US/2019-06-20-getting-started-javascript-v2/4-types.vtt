WEBVTT

1
00:00:00.080 --> 00:00:03.820
&gt;&gt; Kyle Simpson: Now, I've been
referring to kinds of values, but

2
00:00:03.820 --> 00:00:06.510
we need to get a little bit
more specific about that.

3
00:00:06.510 --> 00:00:10.830
Because there's a term in
programming language speak for

4
00:00:10.830 --> 00:00:14.990
the kind of a value, and
it's referred to as its type.

5
00:00:14.990 --> 00:00:19.210
A value that is a kind of number,

6
00:00:19.210 --> 00:00:23.650
that's gonna have a type called number,
and one that's a string called string.

7
00:00:23.650 --> 00:00:28.910
So the typeof that you see here placed in
front of the number 42, or the typeof,

8
00:00:28.910 --> 00:00:33.990
line 3, placed in front of that string,
"Kyle", that's actually also an operator.

9
00:00:33.990 --> 00:00:38.080
typeof is a unary operator
where we give it a thing and

10
00:00:38.080 --> 00:00:42.260
it tells us what kind of
thing we're dealing with.

11
00:00:42.260 --> 00:00:44.390
And this isn't that important
when you're dealing with,

12
00:00:44.390 --> 00:00:49.100
you wouldn't really do typeof 42,
because you already know it's a number.

13
00:00:49.100 --> 00:00:51.260
But again,
when we talk about variables in a moment,

14
00:00:51.260 --> 00:00:54.980
you'll see that we may not
know what's in some variable.

15
00:00:54.980 --> 00:00:58.840
And a typeof is really important to
help us know, I have a number here so

16
00:00:58.840 --> 00:01:02.540
I can do math with it, or I have a string
in this one and I don't wanna do math,

17
00:01:02.540 --> 00:01:06.750
I wanna do sort of printing messages
to a console or something like that.

18
00:01:06.750 --> 00:01:09.900
So you'll notice that each of
these values we've talked about

19
00:01:09.900 --> 00:01:15.070
have a different kind of return
result from this type of operator.

20
00:01:15.070 --> 00:01:19.490
And down at the bottom you'll notice
that we have kind of some special cases

21
00:01:19.490 --> 00:01:24.960
where remember null was one of those
empty values similar to undefined, but

22
00:01:24.960 --> 00:01:29.890
here, the type of operator, line 7 versus
line 12, it returns us different results.

23
00:01:29.890 --> 00:01:33.120
For undefined,
it gives us that string undefined,

24
00:01:33.120 --> 00:01:37.820
but for the null, it perplexingly
gives us the string object.

25
00:01:37.820 --> 00:01:43.070
And really, that's just a bug from
20 plus years ago in JavaScript.

26
00:01:43.070 --> 00:01:46.350
Unfortunately the way the web works,
we can't really always fix bugs in

27
00:01:46.350 --> 00:01:49.400
a language,
because then we might break other stuff.

28
00:01:49.400 --> 00:01:52.200
So that's just something that
we've had to work around for

29
00:01:52.200 --> 00:01:54.680
the last 23 something years now.

30
00:01:54.680 --> 00:01:59.240
But notice line 13, we said that's
an array, but when I do a typeof,

31
00:01:59.240 --> 00:02:03.150
I don't get a specific kind of
result that tells me it's an array,

32
00:02:03.150 --> 00:02:04.820
it just says it's an object.

33
00:02:04.820 --> 00:02:09.200
That's not a bug, that's just a less
specific kind of an answer than we might

34
00:02:09.200 --> 00:02:12.940
prefer to get, we might have liked for
it to say array.

35
00:02:12.940 --> 00:02:16.220
But what we're getting out there is that
there are values that can be sort of

36
00:02:16.220 --> 00:02:20.120
subtypes, an array which has
a very specific behavior.

37
00:02:20.120 --> 00:02:26.030
Remember the numeric positioning, but
it's a subtype of the object type.

38
00:02:27.200 --> 00:02:31.300
So that's why it's returning to us an
object, and it turns out there are other

39
00:02:31.300 --> 00:02:34.210
operations that we can do to
figure out more specifically.

40
00:02:34.210 --> 00:02:38.040
Okay, well, you tell me it's an object,
but is it a regular object or

41
00:02:38.040 --> 00:02:40.050
is it a special array object.

42
00:02:40.050 --> 00:02:41.410
We can determine those things,

43
00:02:41.410 --> 00:02:45.800
we can distinguish those things
using other kinds of operations.

44
00:02:45.800 --> 00:02:48.760
This is something you're gonna need to
do in almost every programming language

45
00:02:48.760 --> 00:02:51.320
that you'll ever write in,
is you're gonna have values.

46
00:02:51.320 --> 00:02:53.730
And again, values have different
things that we do with them.

47
00:02:53.730 --> 00:02:56.953
We do math with something like 3.14.

48
00:02:56.953 --> 00:03:00.323
And we do printing to a string,
to the console or

49
00:03:00.323 --> 00:03:03.890
a file if we have
something like string Kyle.

50
00:03:03.890 --> 00:03:08.360
Those are all distinguishing things that
we have to do in any program language.

51
00:03:08.360 --> 00:03:12.860
And they're all basically under this
umbrella of determining the type

52
00:03:12.860 --> 00:03:13.960
of the value we're dealing with.

