WEBVTT

1
00:00:00.120 --> 00:00:03.100
&gt;&gt; Kyle Simpson: There are values that
we wanna call out, they have special

2
00:00:03.100 --> 00:00:07.830
behaviors, and one that I specifically
want to focus on is the NaN value.

3
00:00:07.830 --> 00:00:11.580
This is probably one of the most
misunderstood of all the values

4
00:00:11.580 --> 00:00:13.090
in the JavaScript language.

5
00:00:13.090 --> 00:00:16.240
So let's just take a moment to
make sure we understand NaN.

6
00:00:16.240 --> 00:00:18.770
If I say var greeting
= "Hello class!"; and

7
00:00:18.770 --> 00:00:23.940
then I do something with that there
value string that doesn't make sense for

8
00:00:23.940 --> 00:00:28.150
a string, like I try to divide it by
two like we are here in line three.

9
00:00:28.150 --> 00:00:31.640
JavaScript is gonna throw up its hands and
say, what are you trying to do?

10
00:00:31.640 --> 00:00:35.600
You can't take a string and divide it
by two, that doesn't make any sense.

11
00:00:35.600 --> 00:00:37.680
That's not a mathematic operation.

12
00:00:37.680 --> 00:00:41.420
I can't make Hello, class into
a number and then divide it by two,

13
00:00:41.420 --> 00:00:42.940
so what am I gonna get?

14
00:00:42.940 --> 00:00:46.840
Well, I'm actually get a special
kind of value called the NaN value.

15
00:00:46.840 --> 00:00:49.800
So something here is
gonna have the NaN value.

16
00:00:49.800 --> 00:00:53.460
And it's gonna have it specifically
because the divide operator

17
00:00:53.460 --> 00:00:56.790
on line three tried to
turn the value Hello,

18
00:00:56.790 --> 00:01:01.070
class, that string, into a number and
that's not a valid number.

19
00:01:01.070 --> 00:01:04.750
[LAUGH] So
we end up this invalid number called NaN.

20
00:01:04.750 --> 00:01:09.010
Now a lot of people think NaN means is
not a number, but it's not quite that.

21
00:01:09.010 --> 00:01:13.020
And I wanna call this out because we
have a utility called Number.isNaN

22
00:01:13.020 --> 00:01:16.870
which would tell us, yes,
you do in fact have a NaN.

23
00:01:16.870 --> 00:01:21.631
But let me ask you a question,
is greeting a number?

24
00:01:21.631 --> 00:01:24.100
Well, clearly greeting is not a number,
clearly it's a string.

25
00:01:24.100 --> 00:01:27.860
So you'd say, no, it's not a number.

26
00:01:27.860 --> 00:01:33.280
And it's definitely not a number, but
is it the not a number special NaN value?

27
00:01:33.280 --> 00:01:35.230
And the answer is no, it's not.

28
00:01:35.230 --> 00:01:39.470
If we say, Number.isNaN for
greeting, we get false.

29
00:01:39.470 --> 00:01:44.510
So NaN is a special value that sort of
indicates that we've had an invalid

30
00:01:44.510 --> 00:01:46.580
numeric operation of some sort.

31
00:01:46.580 --> 00:01:48.611
And you should be aware that you
should be testing for those.

32
00:01:48.611 --> 00:01:51.349
Any place that you do
math in your programs,

33
00:01:51.349 --> 00:01:54.170
you need to be aware that NaNs can happen.

34
00:01:54.170 --> 00:01:56.670
And once you get a NaN,
it's gonna mess up all the other math, so

35
00:01:56.670 --> 00:01:59.150
it sort of pollutes all
the other operations.

36
00:01:59.150 --> 00:02:02.110
It's a really good idea to
get familiar with testing

37
00:02:02.110 --> 00:02:05.230
the results of mathematic operations,
to make sure that you didn't get a NaN.

