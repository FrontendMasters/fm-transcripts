WEBVTT

1
00:00:00.070 --> 00:00:01.740
&gt;&gt; Kyle Simpson: Let's talk
about booleans for a moment.

2
00:00:01.740 --> 00:00:04.330
You probably know about the true and
the false boolean.

3
00:00:04.330 --> 00:00:07.480
But there's this bigger concept
called falsy and truthy.

4
00:00:07.480 --> 00:00:11.980
And that sounds a little bit strange, but
basically what it means is, which values,

5
00:00:11.980 --> 00:00:16.460
if we try to convert them into a boolean,
would become false?

6
00:00:16.460 --> 00:00:18.520
We call those falsy values.

7
00:00:18.520 --> 00:00:22.920
And which values, if we try to convert
them into a boolean will become true?

8
00:00:22.920 --> 00:00:27.810
Well, JavaScript defines a very specific
narrow list of values where when they're

9
00:00:27.810 --> 00:00:32.450
converted to boolean become false,
and they are these values.

10
00:00:32.450 --> 00:00:36.820
The empty string, the 0, and
I know -0 looks a little strange, but

11
00:00:36.820 --> 00:00:38.610
that's an IEEE thing.

12
00:00:38.610 --> 00:00:42.790
There is a -0 there, null,
NaN, false, and undefined.

13
00:00:42.790 --> 00:00:46.300
For the most part,
these are pretty self explanatory.

14
00:00:46.300 --> 00:00:52.030
They basically seem they represent things
that we would generally call false.

15
00:00:52.030 --> 00:00:55.540
And they are things that if we
took a value of any of those,

16
00:00:55.540 --> 00:00:59.230
any of those values, and
try to convert it to a boolean.

17
00:00:59.230 --> 00:01:04.180
Maybe with the capital B boolean
functions or with the explanation,

18
00:01:04.180 --> 00:01:06.330
the double explanation mark usage.

19
00:01:06.330 --> 00:01:10.180
Either way if we try to converted into
a boolean, we're gonna get false.

20
00:01:11.240 --> 00:01:13.700
That's the smallest that's defined and

21
00:01:13.700 --> 00:01:18.590
basically everything else becomes true
when you try to convert it to a boolean.

22
00:01:18.590 --> 00:01:21.190
So here's an example of
those kinds of values.

23
00:01:21.190 --> 00:01:25.060
Quote foo and 23, and objects, and arrays.

24
00:01:25.060 --> 00:01:28.060
Basically an infinitely
long list of values.

25
00:01:28.060 --> 00:01:33.060
There is just the falsy values that become
false, and everything else becomes true.

26
00:01:34.760 --> 00:01:38.150
So, if I do an if statement, for example.

27
00:01:38.150 --> 00:01:40.590
In an if statement,
the thing that we pass,

28
00:01:40.590 --> 00:01:44.740
the expression that we pass to the if
statement has to result in a boolean.

29
00:01:44.740 --> 00:01:49.960
And if it doesn't, JavaScript going
to invoke that boolean conversion.

30
00:01:49.960 --> 00:01:52.560
So here we're passing it a string,

31
00:01:52.560 --> 00:01:57.510
because studentsInputElement.value
is giving us a string, remember.

32
00:01:57.510 --> 00:02:00.960
We're giving it a string, and
then we're saying an if statement, well,

33
00:02:00.960 --> 00:02:04.670
which string value produces true?

34
00:02:04.670 --> 00:02:07.110
That's basically anything
other than the empty string.

35
00:02:07.110 --> 00:02:09.060
They're gonna all produce true.

36
00:02:09.060 --> 00:02:11.710
But the empty string is
gonna produce false.

37
00:02:11.710 --> 00:02:15.010
So idiomatically,
what we're saying on line one is if

38
00:02:15.010 --> 00:02:18.860
anything has been typed into the input
box, then we wanna do something with it.

39
00:02:18.860 --> 00:02:21.690
If it hasn't been typed into
the input box, we don't.

40
00:02:21.690 --> 00:02:25.270
Now, I just wanna call out that
this is not particularly safe,

41
00:02:25.270 --> 00:02:29.820
because you could type
the word hello into that box.

42
00:02:29.820 --> 00:02:33.620
And then on line three, when you try to
turn it into a number, you're gonna end up

43
00:02:33.620 --> 00:02:38.100
getting the NaN number because
the word hello is not a valid number.

44
00:02:38.100 --> 00:02:41.976
So it's not particularly a great
check just to see if it's NaN empty.

45
00:02:41.976 --> 00:02:46.210
You usually wanna see if it's got only
numeric characters in it, for example, and

46
00:02:46.210 --> 00:02:48.450
those are more sophisticated tests.

47
00:02:48.450 --> 00:02:51.880
Another place where we have a boolean
conversion that automatically,

48
00:02:51.880 --> 00:02:54.530
that implicitly happens,
is in a wire loop.

49
00:02:54.530 --> 00:02:59.330
Again, the test clause, it automatically
converts something to a boolean.

50
00:03:02.331 --> 00:03:07.915
Because the .length property is already
a number, then basically what we're gonna

51
00:03:07.915 --> 00:03:12.975
be saying is if it's anything greater than
zero, we're gonna assume that that's true.

52
00:03:12.975 --> 00:03:15.085
And if it's zero we're
gonna assume it's false.

53
00:03:15.085 --> 00:03:18.223
This is a much more common and
more idiomatic, and

54
00:03:18.223 --> 00:03:23.770
generally more safe kind of assumption
that zero becomes, is thought of as false.

55
00:03:23.770 --> 00:03:27.870
And everything NaN zero,
everything greater than zero becomes true.

56
00:03:27.870 --> 00:03:32.540
Just pointing out that if your
number expression can be NaN,

57
00:03:32.540 --> 00:03:34.420
NaN is a falsely value.

58
00:03:34.420 --> 00:03:35.830
So you have to be careful of that.

59
00:03:35.830 --> 00:03:39.030
In the case of the .length property,
we know it's always zero, or

60
00:03:39.030 --> 00:03:41.180
greater than zero can never return NaN.

61
00:03:41.180 --> 00:03:43.374
We don't have to worry
too much about that.

62
00:03:45.597 --> 00:03:48.750
&gt;&gt; Kyle Simpson: And maybe slightly better
and more explicit way of doing this,

63
00:03:48.750 --> 00:03:51.650
rather than relying upon
that implicit coercion.

64
00:03:51.650 --> 00:03:57.250
Would be to actually specifically say,
I wanna turn this string into a boolean.

65
00:03:57.250 --> 00:04:00.590
Line one, you'll notice that I'm
using that double exclamation mark.

66
00:04:00.590 --> 00:04:04.100
That is the equivalent of calling
the capital B boolean function.

67
00:04:04.100 --> 00:04:08.390
I'm saying, turn this thing that
is a string into a boolean.

68
00:04:08.390 --> 00:04:10.920
We still have the same
problem that if I turned

69
00:04:10.920 --> 00:04:13.750
a string like hello into the boolean true.

70
00:04:13.750 --> 00:04:18.250
That's still not gonna end up creating
a valid number on line three.

71
00:04:18.250 --> 00:04:21.870
But line one on the second snippet is
a little bit safer because we're more

72
00:04:21.870 --> 00:04:26.660
explicitly saying, keep doing this loop as
long as the length is grater than zero.

73
00:04:26.660 --> 00:04:30.852
As long as there's still new students
in the array, keep doing this loop.

74
00:04:32.030 --> 00:04:35.690
So that would be a more explicit way
of doing the number comparison or

75
00:04:35.690 --> 00:04:39.560
the number coercions, but
either one of those is valid ways.

76
00:04:39.560 --> 00:04:43.250
As long you're careful
with the corner cases.

77
00:04:43.250 --> 00:04:47.110
Now, I said that we sometimes want
to avoid implicit coercion, but

78
00:04:47.110 --> 00:04:50.270
sometimes implicit coercion
can be quite useful.

79
00:04:50.270 --> 00:04:55.440
So we see here that if I have
an workshopEnrollment1 that has 16,

80
00:04:55.440 --> 00:05:00.020
and workshopEnrollment2 has a string value
because we're pulling it out of some

81
00:05:00.020 --> 00:05:01.160
DOM element.

82
00:05:01.160 --> 00:05:04.992
If I want to check for whether or
not one is less than the other,

83
00:05:04.992 --> 00:05:08.620
then I could do it explicitly
like I'm doing on line four.

84
00:05:08.620 --> 00:05:12.370
I could force both of them to be numbers.

85
00:05:12.370 --> 00:05:16.100
And that definitely would work, but
it's kind of cluttered a little bit.

86
00:05:16.100 --> 00:05:20.058
And we could note that the less than
operator and those other comparisons,

87
00:05:20.058 --> 00:05:24.710
they automatically convert things to
numbers if they're not already numbers.

88
00:05:24.710 --> 00:05:28.352
So if we were to just simply say
workshopEnrollment1 less than

89
00:05:28.352 --> 00:05:29.880
workshopEnrollment2.

90
00:05:29.880 --> 00:05:31.730
As long as at least one
of them is a number,

91
00:05:31.730 --> 00:05:34.380
it's gonna do a comparison numerically.

92
00:05:34.380 --> 00:05:36.020
If they're both strings by the way,

93
00:05:36.020 --> 00:05:38.600
it's gonna do an alphanumeric
like a dictionary comparison.

94
00:05:38.600 --> 00:05:43.140
But as long as at least one
of them we know is a number,

95
00:05:43.140 --> 00:05:47.580
it might be just as safe and a little bit
cleaner to do something like line eight.

96
00:05:47.580 --> 00:05:49.780
So implicit can sometimes be useful.

