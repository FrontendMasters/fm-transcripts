WEBVTT

1
00:00:00.090 --> 00:00:04.669
&gt;&gt; Kyle: So if you can start to understand
that prototype system a little bit and

2
00:00:04.669 --> 00:00:07.771
understand how that fits
in with this keyword,

3
00:00:07.771 --> 00:00:10.422
now we can talk about the class keyword.

4
00:00:10.422 --> 00:00:14.846
The class keyword is layered on
top of the prototype system and

5
00:00:14.846 --> 00:00:19.013
the class keyword gives us some
syntax that looks a lot more

6
00:00:19.013 --> 00:00:23.794
like the class designs that we
normally do in say, a C++ or Java.

7
00:00:23.794 --> 00:00:27.935
So we wanna look at how we use the class
keyword to do the same thing that we

8
00:00:27.935 --> 00:00:32.491
were just doing with that prototypal
style, which quite frankly was a lot more

9
00:00:32.491 --> 00:00:35.510
awkward, there were a lot
more moving pieces.

10
00:00:35.510 --> 00:00:39.207
I think you'll see that the class
syntax is a lot more attractive.

11
00:00:40.841 --> 00:00:45.569
&gt;&gt; Kyle: So to do the same outcome as
what we had in the previous section,

12
00:00:45.569 --> 00:00:49.510
we can now define a thing
called workshop as a class.

13
00:00:49.510 --> 00:00:53.170
We use class keyword, and
then we make a thing called workshop.

14
00:00:53.170 --> 00:00:57.810
And then inside of that workshop, the
curly braces from lines one through eight,

15
00:00:57.810 --> 00:01:01.370
define the class definition for workshop.

16
00:01:01.370 --> 00:01:03.800
You'll notice that we define a constructor

17
00:01:03.800 --> 00:01:08.630
which is kind of the same thing as the
workshop function in our previous slide.

18
00:01:08.630 --> 00:01:11.222
And then we add the ask
method directly in.

19
00:01:11.222 --> 00:01:16.249
You'll notice there's no cluttering up
of saying workshop.prototype.ask =,

20
00:01:16.249 --> 00:01:18.430
we don't have to do any of that.

21
00:01:18.430 --> 00:01:20.720
Because this syntactic sugar says,

22
00:01:20.720 --> 00:01:24.910
I know that you wanna make an ask
method that belongs to workshop.

23
00:01:24.910 --> 00:01:27.210
It's important to note
that under the covers,

24
00:01:27.210 --> 00:01:31.140
JavaScript is doing the same thing as
what we did in that previous slide.

25
00:01:31.140 --> 00:01:34.210
It's making a prototype object and
making a function.

26
00:01:34.210 --> 00:01:39.090
And when we call new workshop on line 10,
the same mechanism is happening.

27
00:01:39.090 --> 00:01:43.730
We're making a deepJS object that
does not have an ask method, but

28
00:01:43.730 --> 00:01:48.640
that object is linked to the prototype
object of the workshop class

29
00:01:48.640 --> 00:01:50.800
that does have the ask method.

30
00:01:50.800 --> 00:01:55.780
That's why on line 13,
when we say deepJS.ask, we are prototype

31
00:01:55.780 --> 00:02:02.000
delegating the workshop definition,
AKA the workshop prototype.

32
00:02:02.000 --> 00:02:06.610
So the same mechanism is involved,
it's just a much cleaner syntax now.

33
00:02:06.610 --> 00:02:08.880
And by arming ourselves with this syntax,

34
00:02:08.880 --> 00:02:13.910
we now fully are capable of designing
class-orientated JavaScript programs.

35
00:02:13.910 --> 00:02:18.350
And this is extremely common, you'll
see this in your React applications,

36
00:02:18.350 --> 00:02:19.450
you'll see it in Angular,

37
00:02:19.450 --> 00:02:23.130
you'll see it in Vue.js, and all the other
major frameworks that are out there.

38
00:02:23.130 --> 00:02:27.940
You'll see classes are a very common
way of defining a container for

39
00:02:27.940 --> 00:02:32.540
a set of data, and a set of behaviors,
methods, that can run against those.

