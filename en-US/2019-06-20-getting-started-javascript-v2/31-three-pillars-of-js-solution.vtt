WEBVTT

1
00:00:00.130 --> 00:00:01.380
&gt;&gt; Kyle: Welcome back.

2
00:00:01.380 --> 00:00:05.440
I'm sure you're eager to see exactly
how we bring all of these little pieces

3
00:00:05.440 --> 00:00:07.200
together in this exercise.

4
00:00:07.200 --> 00:00:09.440
So let's start by looking
at those instructions.

5
00:00:09.440 --> 00:00:11.700
We're gonna start with item number one.

6
00:00:11.700 --> 00:00:15.296
It tells us straight up, we wanna look
at the printFavoriteBooks function.

7
00:00:15.296 --> 00:00:18.693
And specifically we wanna zero in on
whether there's an accidental type

8
00:00:18.693 --> 00:00:20.630
conversion that's happening.

9
00:00:20.630 --> 00:00:23.570
That's otherwise known as
an implicit type conversion.

10
00:00:23.570 --> 00:00:26.780
And there's a little hint here that
says if we've got something going

11
00:00:26.780 --> 00:00:30.670
from a number to a string, we can use
the String function to modify that.

12
00:00:30.670 --> 00:00:33.675
So let's look at
the printFavoriteBooks function.

13
00:00:33.675 --> 00:00:37.996
And you'll notice right off the bat that
there is a value here that we know is

14
00:00:37.996 --> 00:00:41.910
a number because the length
property of any array is a number.

15
00:00:41.910 --> 00:00:45.540
That number is being included inside
of a string, which means that it's

16
00:00:45.540 --> 00:00:49.930
automatically or implicitly being
converted from a number to a string.

17
00:00:49.930 --> 00:00:53.610
Now, the truth is there's no big problem
with converting numbers to strings.

18
00:00:53.610 --> 00:00:55.908
That's a pretty safe type conversion.

19
00:00:55.908 --> 00:01:00.014
And most developers probably wouldn't
be that concerned about allowing that

20
00:01:00.014 --> 00:01:01.410
implicit coercion.

21
00:01:01.410 --> 00:01:03.170
But I do just wanna point out, just for

22
00:01:03.170 --> 00:01:06.790
the sake of practice, that there's
a way to be more explicit about it.

23
00:01:06.790 --> 00:01:10.950
And that is to wrap that call
to favoriteBooks.length in

24
00:01:10.950 --> 00:01:13.350
a function call to the String function.

25
00:01:13.350 --> 00:01:16.945
So if I put String around
the favoriteBooks.length,

26
00:01:16.945 --> 00:01:21.634
now we are explicitly saying,
make sure that it is a string value before

27
00:01:21.634 --> 00:01:26.655
it's concatenated or before it's
dropped into the larger String volume.

28
00:01:26.655 --> 00:01:29.160
It won't change any of
the output of your program, but

29
00:01:29.160 --> 00:01:33.275
it's just being a little bit more savvy,
a little bit more aware about your types.

30
00:01:33.275 --> 00:01:38.157
And even if it wasn't a problem now,
it is potentially some sort of bug later.

31
00:01:38.157 --> 00:01:41.733
So anything you can do to make your
code be a little bit more clear,

32
00:01:41.733 --> 00:01:44.360
a little bit more expressed and obvious.

33
00:01:44.360 --> 00:01:46.070
That will help you down the line.

34
00:01:46.070 --> 00:01:49.600
That's a really important practice
to pick up as a developer.

35
00:01:49.600 --> 00:01:51.800
Okay, let's go back to the instructions.

36
00:01:51.800 --> 00:01:53.070
Let's look at number 2.

37
00:01:53.070 --> 00:01:55.800
We wanna move the addFavoriteBook and

38
00:01:55.800 --> 00:01:59.320
printFavoriteBook functions
into the Bookshelf class.

39
00:01:59.320 --> 00:02:01.040
And now we're gonna make the methods.

40
00:02:01.040 --> 00:02:04.780
And there's a really important hint here,
which is the class methods.

41
00:02:04.780 --> 00:02:07.160
If you remember from
the slides a little while ago,

42
00:02:07.160 --> 00:02:11.260
they don't have a function keyword in
them, they're just the name there.

43
00:02:11.260 --> 00:02:14.725
So we've got to take the function keyword
off, and also don't miss this part.

44
00:02:14.725 --> 00:02:17.094
And because they're gonna be methods,

45
00:02:17.094 --> 00:02:20.448
we're gonna need to update
them to use the this keyword.

46
00:02:20.448 --> 00:02:24.040
So that we are referencing
our instance of our class.

47
00:02:24.040 --> 00:02:25.720
So I will do this one at a time.

48
00:02:25.720 --> 00:02:29.298
I'm gonna take
the addFavoriteBook function and

49
00:02:29.298 --> 00:02:34.620
we're gonna move it inside of
the class definition for bookshelf.

50
00:02:34.620 --> 00:02:36.290
I will indent it one.

51
00:02:36.290 --> 00:02:38.270
You'll notice even by
my syntax highlighting,

52
00:02:38.270 --> 00:02:41.070
it can tell that the word
function doesn't belong here.

53
00:02:41.070 --> 00:02:43.717
That's why it's white,
so if we take that off.

54
00:02:43.717 --> 00:02:47.743
Just like with our constructor,
now we are defining a class method.

55
00:02:47.743 --> 00:02:51.853
A class method called addFavoriteBook,
which still takes in a book name.

56
00:02:51.853 --> 00:02:55.611
But what's important now is that
favoriteBooks is no longer a variable

57
00:02:55.611 --> 00:02:58.620
that we're gonna access
through lexical scope.

58
00:02:58.620 --> 00:03:03.850
We're gonna access that through the this
mechanism and the prototypes mechanism.

59
00:03:03.850 --> 00:03:08.538
So what we need to do is prefix
that reference to favoriteBooks for

60
00:03:08.538 --> 00:03:11.360
the this method, for this reference.

61
00:03:12.400 --> 00:03:16.835
Remember whenever we call somewhere,
an instance of this Bookshelf class,

62
00:03:16.835 --> 00:03:20.056
we're gonna be saying
something .addFavoriteBook.

63
00:03:20.056 --> 00:03:24.880
And that something that .addFavoriteBook
is gonna tell addfavoriteBook to

64
00:03:24.880 --> 00:03:28.450
use a this that's pointing
at that something instance.

65
00:03:28.450 --> 00:03:31.263
So that's why we want to
make it a this aware method.

66
00:03:31.263 --> 00:03:34.136
We'll do the same thing with
the printFavoriteBooks.

67
00:03:34.136 --> 00:03:40.888
We're going to move that inside of
the Bookshelf class definition.

68
00:03:40.888 --> 00:03:44.985
We're gonna take off the function keyword,
so that is a method now.

69
00:03:44.985 --> 00:03:47.730
And then,
we have two references to favorite books.

70
00:03:47.730 --> 00:03:51.530
We've gotta make sure to put the this
dot in front of both of them.

71
00:03:52.810 --> 00:03:55.499
If you don't end up putting
it in front of both of them,

72
00:03:55.499 --> 00:03:57.258
you won't access the correct one.

73
00:03:57.258 --> 00:04:00.880
It'll be trying to find a global
variable of that name, it won't find it.

74
00:04:00.880 --> 00:04:03.420
Things will break, you'll cry.

75
00:04:03.420 --> 00:04:07.360
So just make sure you make your functions,
your methods, rather, be this aware.

76
00:04:08.390 --> 00:04:10.490
Okay, we're making some good progress.

77
00:04:10.490 --> 00:04:13.430
Let's go back to our instructions.

78
00:04:13.430 --> 00:04:17.000
Number 3 in the instruction says
first to fill out the definition

79
00:04:17.000 --> 00:04:19.110
of the loadBooks function.

80
00:04:19.110 --> 00:04:23.280
Remember that's outside of the class,
it's not a method, it's a function.

81
00:04:23.280 --> 00:04:26.110
It's outside of it, and
we're gonna fill it out and

82
00:04:26.110 --> 00:04:32.010
it's going to receive as a parameter
an instance of theBookshelf class.

83
00:04:32.010 --> 00:04:35.850
So we're gonna have some kind of
Bookshelf that we're passing in.

84
00:04:35.850 --> 00:04:38.280
Some sort of Bookshelf instance.

85
00:04:38.280 --> 00:04:42.140
So we've already got the loadBooks
function kind of sketched out here.

86
00:04:42.140 --> 00:04:48.040
We're gonna need to name some kind of
parameter, and I'll just say theBookshelf.

87
00:04:48.040 --> 00:04:52.576
For lack of a better name for
it, we'll say theBookshelf,

88
00:04:52.576 --> 00:04:57.308
which is a specific instance of
the general Bookshelf class.

89
00:04:57.308 --> 00:05:02.423
Now, instruction number 4 says
that loadBooks should call

90
00:05:02.423 --> 00:05:07.445
what we've already been provided
as a fakeAjax function.

91
00:05:07.445 --> 00:05:12.149
And we're gonna pass along a variable
called BOOK_API and we're gonna write and

92
00:05:12.149 --> 00:05:14.730
pass along an inline function expression.

93
00:05:14.730 --> 00:05:16.970
That's a big old bunch of stuff.

94
00:05:16.970 --> 00:05:18.953
Let's break that down one at a time.

95
00:05:18.953 --> 00:05:22.270
First of all, we have a fakeAjax
function that I've already provided.

96
00:05:22.270 --> 00:05:23.930
You're not supposed to
change anything about it.

97
00:05:23.930 --> 00:05:28.740
But it's just here just to demonstrate
the idea of making an Ajax call

98
00:05:28.740 --> 00:05:32.598
without all the complexity of needing
a server to actually talk to.

99
00:05:32.598 --> 00:05:37.517
Okay, so fakeAjax we can see expects
a URL and expects a cb, a callback,

100
00:05:37.517 --> 00:05:40.675
which is going to be
a function that we invoke.

101
00:05:40.675 --> 00:05:45.393
And you'll notice that that function is
gonna get called with an array of book

102
00:05:45.393 --> 00:05:46.330
names.

103
00:05:46.330 --> 00:05:50.744
Okay, so
what we need to do then is in loadBooks,

104
00:05:50.744 --> 00:05:53.986
we need to actually call fakeAjax.

105
00:05:53.986 --> 00:05:58.410
And what we're gonna pass to fakeAjax,
first we're gonna pass it a URL.

106
00:05:58.410 --> 00:06:02.380
And we have a variable called
BOOK_API that we can pass in.

107
00:06:02.380 --> 00:06:06.610
So when we pass in BOOK_API, the way
we're able to access that, by the way,

108
00:06:06.610 --> 00:06:08.470
that's lexical scope.

109
00:06:08.470 --> 00:06:11.540
This function doesn't have
a BOOK_API variable, but

110
00:06:11.540 --> 00:06:15.030
it does have access to the outer scope,
which has BOOK_API.

111
00:06:16.080 --> 00:06:19.350
Now we are gonna need to pass in,
the instruction said,

112
00:06:19.350 --> 00:06:21.560
an inline function expression.

113
00:06:21.560 --> 00:06:24.056
So we are gonna write a function and
I wanna give it a name,

114
00:06:24.056 --> 00:06:26.091
I don't wanna use
anonymous functions here.

115
00:06:26.091 --> 00:06:29.460
I want to give it a name and
I'm going to call this ,onBooks.

116
00:06:29.460 --> 00:06:32.594
Because I know that this
is loading my books and so

117
00:06:32.594 --> 00:06:36.117
onBooks is indicating that
I have received them back.

118
00:06:36.117 --> 00:06:41.234
And so the parameter name that I'm
gonna get, remember it's an array

119
00:06:41.234 --> 00:06:46.040
of book names, so I'm just gonna call it,
bookNames, plural.

120
00:06:46.040 --> 00:06:47.530
I'll put those curly braces there.

121
00:06:47.530 --> 00:06:51.450
And now,
this is a in-line function expression.

122
00:06:51.450 --> 00:06:56.498
It's a name function expression that's
gonna get invoked whenever cb is called.

123
00:06:56.498 --> 00:06:59.792
That’s gonna be calling
our onBooks function and

124
00:06:59.792 --> 00:07:01.940
passing an array of book names.

125
00:07:01.940 --> 00:07:06.460
Now, let’s go back to the readme and
check what item 5 says.

126
00:07:06.460 --> 00:07:09.350
It says the callback's gonna be
passed an array of book names.

127
00:07:09.350 --> 00:07:13.635
We should loop through this array and
pass each book name to

128
00:07:13.635 --> 00:07:18.919
addFavoriteBook method on whatever
instance we’ve passed into to loadBooks.

129
00:07:20.740 --> 00:07:24.476
So we passed in this
theBookshelf instance and

130
00:07:24.476 --> 00:07:29.185
it's the thing that has
an addFavoriteBook method on it.

131
00:07:29.185 --> 00:07:32.890
So we're gonna actually call,
we want to loop through the book names,

132
00:07:32.890 --> 00:07:33.826
remember loops.

133
00:07:33.826 --> 00:07:37.712
We're gonna do another for of loops,

134
00:07:37.712 --> 00:07:42.213
we'll say (let bookname of booknames).

135
00:07:42.213 --> 00:07:50.470
And for each of these book names
we want to say theBookshelf dot.,

136
00:07:50.470 --> 00:07:56.700
and the method we gonna
call is addFavoriteBook.

137
00:07:56.700 --> 00:08:00.980
Remember what I was saying just a little
while ago, here is our function call site.

138
00:08:00.980 --> 00:08:06.880
Using the implicit binding, it's gonna
invoke this method, the one from line 6.

139
00:08:06.880 --> 00:08:10.150
But it's gonna invoke
it in the this context

140
00:08:10.150 --> 00:08:13.880
of our instance which is theBookshelf.

141
00:08:13.880 --> 00:08:18.750
And that's the thing that's holding
this copy of the favoriteBooks array.

142
00:08:18.750 --> 00:08:22.751
So we wanna pass in bookName to

143
00:08:22.751 --> 00:08:29.170
the theBookshelf.addFavoriteBook method.

144
00:08:29.170 --> 00:08:30.840
Now, after that for loop finishes,

145
00:08:30.840 --> 00:08:35.480
all of our book names should have been
added into our instance of theBookshelf.

146
00:08:35.480 --> 00:08:39.835
And lastly the instructions
tell us that we should call

147
00:08:39.835 --> 00:08:44.810
the printFavoriteBooks method
on that same instance.

148
00:08:44.810 --> 00:08:50.920
So we're gonna say,
theBookshelf.printFavoriteBooks.

149
00:08:50.920 --> 00:08:54.810
And again, here's our implicit binding.

150
00:08:54.810 --> 00:08:59.417
The printFavoriteBooks() function
knows that it should be invoked with

151
00:08:59.417 --> 00:09:02.496
a thisKeyword that is
pointing at theBookshelf.

152
00:09:04.606 --> 00:09:09.648
&gt;&gt; Kyle: Last step then, it says in item
6 that we need to create an instance

153
00:09:09.648 --> 00:09:14.345
to Bookshelf class and
pass it in as an argument to loadBooks.

154
00:09:14.345 --> 00:09:16.460
So let's try that.

155
00:09:16.460 --> 00:09:20.520
Let's say,
we're gonna make an instance, so

156
00:09:20.520 --> 00:09:25.780
I'll call it as myBooks = new Bookshelf.

157
00:09:25.780 --> 00:09:29.140
That's for
instantiating an instance of a class.

158
00:09:29.140 --> 00:09:35.010
And then we're gonna call loadBooks and
we're gonna pass in myBooks.

159
00:09:36.590 --> 00:09:39.650
And that should invoke our function.

160
00:09:39.650 --> 00:09:43.200
There will be a delay, remember
this setTimeout, it's gonna delay.

161
00:09:43.200 --> 00:09:47.830
But because of closure,
it still knows about theBookshelf,

162
00:09:47.830 --> 00:09:51.250
that's our closure being used
across that function boundary.

163
00:09:51.250 --> 00:09:54.838
Still knows about theBookshelf and
it's able to invoke methods on it.

164
00:09:54.838 --> 00:09:59.050
And then those are able to get
a thisContext for our instance.

165
00:09:59.050 --> 00:10:03.631
So with all those pieces in place,
let's cross our fingers.

166
00:10:03.631 --> 00:10:08.906
And let's go over to a runtime
environment, like runjs,

167
00:10:08.906 --> 00:10:14.090
and lets test it and
see how it works, and there we go.

168
00:10:14.090 --> 00:10:18.927
If I scoot this over, we can see it did,
in fact, print out our favorite books, 3.

169
00:10:18.927 --> 00:10:24.125
And our list of our three favorite books
and it did that by pulling those from

170
00:10:24.125 --> 00:10:29.177
the favoriteBooks array that is on
our instance of the Bookshelf class.

171
00:10:31.803 --> 00:10:35.429
&gt;&gt; Kyle: So
we wove all three of the major pillars of

172
00:10:35.429 --> 00:10:38.900
JavaScript into this one code base.

173
00:10:38.900 --> 00:10:41.210
We took care of our types and
our conversion.

174
00:10:41.210 --> 00:10:44.960
We made them more explicit in
places just so things are clear.

175
00:10:44.960 --> 00:10:48.369
We used some closure to
remember things even over time,

176
00:10:48.369 --> 00:10:51.426
even when a function's
executed at a later time.

177
00:10:51.426 --> 00:10:56.060
And we used a class instance to collect
some data and some methods behavior.

178
00:10:57.220 --> 00:11:01.120
Some method behavior
together into one instance.

179
00:11:01.120 --> 00:11:05.848
And that is a good illustration of
the breadth of things that you wanna make

180
00:11:05.848 --> 00:11:07.153
sure you practice.

181
00:11:07.153 --> 00:11:09.879
And try to get to some more
level of expertise on,

182
00:11:09.879 --> 00:11:12.490
as you go throughout
your JavaScript career.

183
00:11:12.490 --> 00:11:15.264
That won't be tomorrow, or
the next day, or even the next week.

184
00:11:15.264 --> 00:11:19.610
But those are the three things, that's
your road map that you wanna focus on as

185
00:11:19.610 --> 00:11:25.120
you work towards learning and digging
further into the JavaScript language.

186
00:11:25.120 --> 00:11:28.350
Make sure you try this exercise
at least a couple more times.

187
00:11:28.350 --> 00:11:31.410
Start from the blank empty file or
from the original file.

188
00:11:31.410 --> 00:11:34.610
Try it from scratch and make sure
to practice each of those things.

189
00:11:34.610 --> 00:11:37.180
And maybe even try changing a few things.

190
00:11:37.180 --> 00:11:41.490
Maybe make a few instances of Bookshelf
and try to make a few different calls and

191
00:11:41.490 --> 00:11:43.070
passing different results.

192
00:11:43.070 --> 00:11:46.940
And check to see that you understand
how each of these three pieces

193
00:11:46.940 --> 00:11:49.400
is moving with respect to all the others.

194
00:11:49.400 --> 00:11:53.510
There is no substitute in learning
JavaScript other than just writing

195
00:11:53.510 --> 00:11:54.570
the JavaScript.

196
00:11:54.570 --> 00:11:56.430
I hope you've had fun with this exercise.

197
00:11:56.430 --> 00:11:57.723
I hope it's been enlightening.

198
00:11:57.723 --> 00:11:59.910
I hope it sparked some curiosity for you.

199
00:11:59.910 --> 00:12:03.190
And I look forward to seeing the kind
of JavaScript you'll be writing very,

200
00:12:03.190 --> 00:12:03.710
very soon.

