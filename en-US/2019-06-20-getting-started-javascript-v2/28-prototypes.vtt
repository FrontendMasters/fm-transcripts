WEBVTT

1
00:00:00.130 --> 00:00:03.280
&gt;&gt; Kyle Simpson: So armed with our
knowledge of the this keyword,

2
00:00:03.280 --> 00:00:06.950
we're gonna look at the prototype system,
because they really do go hand in hand.

3
00:00:06.950 --> 00:00:09.550
It's almost like you can't
understand prototypes

4
00:00:09.550 --> 00:00:11.320
without understanding the this keyword.

5
00:00:11.320 --> 00:00:11.960
And vice versa,

6
00:00:11.960 --> 00:00:14.880
you can't understand the this keyword
without understanding prototypes.

7
00:00:14.880 --> 00:00:17.370
Or at least you can't understand
why the this keyword is so

8
00:00:17.370 --> 00:00:19.440
powerful without understanding prototypes.

9
00:00:20.474 --> 00:00:24.030
All right, so here's an example
of what we call prototypal or

10
00:00:24.030 --> 00:00:26.150
prototypal classes code.

11
00:00:26.150 --> 00:00:29.964
This is a little less common these days
because normally you now are gonna see

12
00:00:29.964 --> 00:00:32.833
people using the class keyword
that was recently added.

13
00:00:32.833 --> 00:00:34.679
And we'll look at the class
keyword in just a moment.

14
00:00:34.679 --> 00:00:39.208
But I wanna show you under the covers
what the class keyword is actually doing.

15
00:00:39.208 --> 00:00:43.022
If I wanted to make a thing that
was like a class called workshop,

16
00:00:43.022 --> 00:00:45.495
that I could instantiate several times,

17
00:00:45.495 --> 00:00:50.420
I could define a function called workshop,
and notice that it's this aware.

18
00:00:50.420 --> 00:00:53.320
There you see the this keywords,
right front and center.

19
00:00:53.320 --> 00:00:55.880
These are very highly related concepts.

20
00:00:55.880 --> 00:00:59.830
That function is going to become
what we call a constructor.

21
00:00:59.830 --> 00:01:02.530
It's gonna act as if
it's a constructor for

22
00:01:02.530 --> 00:01:06.470
instances of this
so-called workshop class.

23
00:01:06.470 --> 00:01:09.865
And to add methods into
the definition of our workshop class,

24
00:01:09.865 --> 00:01:16.050
we're going to add them to the prototype
of the workshop constructor, okay?

25
00:01:16.050 --> 00:01:20.580
So prototype means that
it is an object where

26
00:01:20.580 --> 00:01:24.150
any instances are going to be linked to or
to delegate to.

27
00:01:24.150 --> 00:01:28.435
So on line eight,
when I say deepJS equals new workshop,

28
00:01:28.435 --> 00:01:32.736
the new keyword is gonna
invoke that workshop function.

29
00:01:32.736 --> 00:01:39.089
And the object that gets created is going
to be linked to Workshop.prototype.

30
00:01:39.089 --> 00:01:44.490
And since workshop.prototype has
an ask method on it, on line 11,

31
00:01:44.490 --> 00:01:49.240
I can take that deep js instance and
say deep js is not ask.

32
00:01:49.240 --> 00:01:50.270
It is important for

33
00:01:50.270 --> 00:01:56.860
you to see that deep js is the object
does not have an asked method.

34
00:01:56.860 --> 00:02:02.010
But it is instead prototype
linked to workshop.prototype.

35
00:02:02.010 --> 00:02:06.967
And therefore, when we say deepJS.ask,
it's actually going to delegate

36
00:02:06.967 --> 00:02:11.775
one level up the prototype chain from
deepJS up to workshop.prototype.

37
00:02:11.775 --> 00:02:17.410
And when it invokes the ask method,
look at the call site down on line 11.

38
00:02:17.410 --> 00:02:19.740
Look at how that function
is being invoked.

39
00:02:19.740 --> 00:02:23.005
Do you remember just a little while ago
when I was talking about the this keyword?

40
00:02:23.005 --> 00:02:26.850
What I said, when I said there's one
of those rules that at the call site it

41
00:02:26.850 --> 00:02:29.740
determines what a this
keyword should point at.

42
00:02:29.740 --> 00:02:31.700
What do we see on line 11?

43
00:02:31.700 --> 00:02:33.643
We see deepJS.ask.

44
00:02:33.643 --> 00:02:38.496
And deepJS.ask is how
we are invoking the ask

45
00:02:38.496 --> 00:02:44.190
method in this context
of the deepJS object.

46
00:02:44.190 --> 00:02:46.990
Now, when we invoked deepJS,

47
00:02:46.990 --> 00:02:51.470
when we invoked workshop to create deepJS,
that was on line eight.

48
00:02:51.470 --> 00:02:54.480
It ran that function, workshop, and

49
00:02:54.480 --> 00:02:58.530
when it was running the this keyword,
what was the this keyword pointing at?

50
00:02:59.890 --> 00:03:02.240
The object that we would
end up calling deepJS.

51
00:03:02.240 --> 00:03:06.670
And so, you see on line two that
we added a teacher property to it.

52
00:03:06.670 --> 00:03:11.100
That's why on line five,
when we say this.teacher,

53
00:03:11.100 --> 00:03:15.110
we're actually saying deepJS.teacher.

54
00:03:15.110 --> 00:03:19.904
Or then, on line 14,
when we say reactJS.ask, by line five,

55
00:03:19.904 --> 00:03:22.820
we're now saying reactJS.teacher.

56
00:03:22.820 --> 00:03:27.464
It's because we have found a function
through the prototype chain,

57
00:03:27.464 --> 00:03:32.427
invoked it, but it still is determine
what the this keyword is gonna point

58
00:03:32.427 --> 00:03:35.972
at by the call sites on either line 11 or
line 14.

59
00:03:35.972 --> 00:03:41.916
That, in a very, very very brief nutshell,
is prototypal class pattern.

60
00:03:41.916 --> 00:03:46.572
That is how we have a method on one
object that is able to delegate to

61
00:03:46.572 --> 00:03:50.223
another object and
use itself as the this keyword.

62
00:03:50.223 --> 00:03:54.786
That's what happens when deepJS
delegates to the ask method and

63
00:03:54.786 --> 00:03:57.240
invokes it in its own context.

64
00:03:57.240 --> 00:04:02.420
That's why we print out Kyle and then when
on line 14 that's why we print out Suzy.

