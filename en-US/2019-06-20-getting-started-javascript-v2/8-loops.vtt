WEBVTT

1
00:00:00.230 --> 00:00:02.720
&gt;&gt; Kyle Simpson: It is often
gonna be the case that you have

2
00:00:02.720 --> 00:00:07.690
several different operations that you
need to do multiple, multiple times.

3
00:00:07.690 --> 00:00:09.120
And that's where we get loops.

4
00:00:09.120 --> 00:00:13.310
Loops are the way that we repeat
something over and over and over again.

5
00:00:13.310 --> 00:00:17.351
So here, let's say that I had
an array called students.

6
00:00:17.351 --> 00:00:21.347
All I've done there on line one is just
leave out what values that I might have

7
00:00:21.347 --> 00:00:21.920
put in it.

8
00:00:21.920 --> 00:00:26.007
And by the way, if you haven't seen
that syntax with the little /* and

9
00:00:26.007 --> 00:00:27.880
*/ thing, that's just a comment.

10
00:00:27.880 --> 00:00:29.230
That's why it's grayed out.

11
00:00:29.230 --> 00:00:31.012
That's just a little inline comment.

12
00:00:31.012 --> 00:00:34.652
And all I'm signaling to you is there's
a bunch of values there that I didn't

13
00:00:34.652 --> 00:00:36.500
have space on the slides to type in, but

14
00:00:36.500 --> 00:00:39.027
they could have been numbers,
strings, who knows?

15
00:00:39.027 --> 00:00:42.271
Okay, so that's an array that
has some set of values in it.

16
00:00:42.271 --> 00:00:45.147
And what we wanna do is say hi to them.

17
00:00:45.147 --> 00:00:49.919
So let's say that all of the values in
this array might have been the strings

18
00:00:49.919 --> 00:00:55.068
that were all of your student names like
Matt and Sarah, and all the rest of them,

19
00:00:55.068 --> 00:00:58.953
they all would have been listed
in their individually okay.

20
00:00:58.953 --> 00:01:03.326
So if we were to say for,
which is what we're doing on line three,

21
00:01:03.326 --> 00:01:08.987
we're basically indicating, hey, I'm
gonna repeat something a bunch of times.

22
00:01:08.987 --> 00:01:11.655
And there's two different ways
of doing a repetition with

23
00:01:11.655 --> 00:01:15.590
the four loop that we're seeing here,
one on line three, one on line seven.

24
00:01:15.590 --> 00:01:19.290
So we'll take each one of them split and
focus on them.

25
00:01:19.290 --> 00:01:24.540
The line three block of code, line three,
four, and five that is saying

26
00:01:24.540 --> 00:01:29.379
I want to do something where I'm
gonna count how many times I do it.

27
00:01:29.379 --> 00:01:35.020
So we do let i, let is just another way
of creating a variable similar to var,

28
00:01:35.020 --> 00:01:38.120
but it makes it smaller block of our code.

29
00:01:38.120 --> 00:01:42.600
In this case, only inside of that
curly brace paragraph if you will.

30
00:01:42.600 --> 00:01:46.017
But it's the same kind of
concept as making an i, and

31
00:01:46.017 --> 00:01:48.591
we're initially gonna start it at 0.

32
00:01:48.591 --> 00:01:52.654
And then notice on the very far
right-hand side, we've got an i++.

33
00:01:52.654 --> 00:01:56.100
That i++ says, remember,
that we wanna update it by one,

34
00:01:56.100 --> 00:01:59.110
we wanna increment it by one each time.

35
00:01:59.110 --> 00:02:00.991
And how do we know when to stop the loop,

36
00:02:00.991 --> 00:02:03.388
because we don't wanna
let the loop run forever.

37
00:02:03.388 --> 00:02:05.311
How do we know when to stop the loop?

38
00:02:05.311 --> 00:02:07.049
It's the stuff in the middle.

39
00:02:07.049 --> 00:02:10.465
You'll notice that there's a clause and
these are separated by,

40
00:02:10.465 --> 00:02:11.563
see the semicolons.

41
00:02:11.563 --> 00:02:13.144
They're separated by semicolons,

42
00:02:13.144 --> 00:02:15.392
the thing in the middle is
what we call a test clause.

43
00:02:15.392 --> 00:02:20.490
And it's identical in its behavior
to what we put in an if statement.

44
00:02:20.490 --> 00:02:23.300
So it's yet
another way of making a decision.

45
00:02:23.300 --> 00:02:27.830
Here the decision is, should I keep
the loop going or should I stop it?

46
00:02:27.830 --> 00:02:29.080
And we're gonna re-evaluate,

47
00:02:29.080 --> 00:02:33.210
we're gonna relook at that expression
every single time we do a loop.

48
00:02:33.210 --> 00:02:35.440
So we're gonna just keep repeating and
repeating.

49
00:02:35.440 --> 00:02:37.680
That's kinda like if your kid
was jumping jump rope, and

50
00:02:37.680 --> 00:02:39.850
they're just gonna keep jumping,
and jumping, and jumping.

51
00:02:39.850 --> 00:02:42.250
And at some point,
they're gonna get tired or whatever.

52
00:02:42.250 --> 00:02:47.130
I mean, I can do four or
five jump rope cycles before I get tired.

53
00:02:47.130 --> 00:02:49.410
But they're gonna keep going and
keep doing, until they get tired, and

54
00:02:49.410 --> 00:02:50.340
then they're gonna stop.

55
00:02:50.340 --> 00:02:53.628
And it's the same thing here,
we're gonna loop, and loop,

56
00:02:53.628 --> 00:02:56.551
and loop until we have decided
that it's time to stop.

57
00:02:56.551 --> 00:02:57.536
How do we decide, here?

58
00:02:57.536 --> 00:03:00.802
Well, it's if our little
counter that started at 0,

59
00:03:00.802 --> 00:03:03.361
if it has gone through
all of the students.

60
00:03:03.361 --> 00:03:08.628
We've looked at students.length and maybe
that was 15 cuz there's 15 of you here.

61
00:03:08.628 --> 00:03:11.536
Well, it's going to go through
all of those students and

62
00:03:11.536 --> 00:03:14.570
then when it's done then
it says stop the loop.

63
00:03:14.570 --> 00:03:17.267
And for each time that we do the loop,

64
00:03:17.267 --> 00:03:21.806
we're gonna call this function
greetStudent just to say hi.

65
00:03:21.806 --> 00:03:23.532
So hi, Matt, hi, Sarah.

66
00:03:23.532 --> 00:03:25.945
We're gonna do each one one at a time.

67
00:03:25.945 --> 00:03:30.585
And the way we get out those values
from the array to tell it who to greet

68
00:03:30.585 --> 00:03:33.785
is that students with
the square brackets of i.

69
00:03:33.785 --> 00:03:37.572
That looks exactly like when we
did square brackets of one, but

70
00:03:37.572 --> 00:03:42.431
now we're telling it specifically which
position to get based upon that little i

71
00:03:42.431 --> 00:03:46.870
variable that's going to be counting
from 0 up to, in this case, 14.

72
00:03:46.870 --> 00:03:50.830
If we went from 0 to 14,
that is 15 items or

73
00:03:50.830 --> 00:03:54.700
15 iterations,
15 times that we've done the loop.

74
00:03:56.190 --> 00:03:58.812
Now, line seven is a slightly
different kind of loop.

75
00:03:58.812 --> 00:04:03.110
It's a for loop that is going
to go over a list of values.

76
00:04:03.110 --> 00:04:06.290
So you notice I have this let student.

77
00:04:06.290 --> 00:04:09.476
That's gonna get assigned
automatically by this for

78
00:04:09.476 --> 00:04:13.237
of loop, it's gonna get assigned
each value out of the array.

79
00:04:13.237 --> 00:04:15.484
So I don't need to go
access it by a position.

80
00:04:15.484 --> 00:04:20.006
It's just gonna automatically tell me give
me all of the values that are in this

81
00:04:20.006 --> 00:04:21.042
students array.

82
00:04:21.042 --> 00:04:22.537
There's a very technical term for this.

83
00:04:22.537 --> 00:04:28.088
This is called an iterator that it's going
through a value source like an array and

84
00:04:28.088 --> 00:04:30.670
just getting all of those values out.

85
00:04:30.670 --> 00:04:33.715
But these are two very common
loop forms that you'll find

86
00:04:33.715 --> 00:04:36.262
when you're seeing JavaScript programming.

87
00:04:36.262 --> 00:04:37.509
They're not the only kind of loops though.

88
00:04:37.509 --> 00:04:39.663
There are while loops, for example.

89
00:04:39.663 --> 00:04:42.105
A while loop is similar to the for loop,

90
00:04:42.105 --> 00:04:46.849
except you'll notice that we don't set
anything up like an initial value.

91
00:04:46.849 --> 00:04:48.728
And we don't increment anything.

92
00:04:48.728 --> 00:04:52.628
We just have a single clause there,
a single expression,

93
00:04:52.628 --> 00:04:58.054
(students.length &gt; 0) And it's just
evaluating either the true or false.

94
00:04:58.054 --> 00:05:02.585
And the while loop says keep going
while it evaluates the true.

95
00:05:02.585 --> 00:05:06.600
So if they were a thousand of you in this
room, this would be a really crowded room.

96
00:05:06.600 --> 00:05:08.822
But if there were a thousand
of you in this room,

97
00:05:08.822 --> 00:05:10.980
we'd just keep going a thousand times.

98
00:05:10.980 --> 00:05:12.914
From 0 up to 999.

99
00:05:14.350 --> 00:05:18.030
Well, actually, we're not counting
anymore, since there's not a for loop.

100
00:05:18.030 --> 00:05:21.960
What you'll notice here is that we're
checking to make sure that students.length

101
00:05:21.960 --> 00:05:23.510
still has items in it.

102
00:05:23.510 --> 00:05:26.657
That's why we're saying greater than 0.

103
00:05:26.657 --> 00:05:29.230
So what's happening here
is actually kinda sneaky.

104
00:05:29.230 --> 00:05:36.230
On line four, we are actually removing
students from the list of students array.

105
00:05:36.230 --> 00:05:38.480
We're pulling them out of this list.

106
00:05:38.480 --> 00:05:40.800
That's what the .pop is doing.

107
00:05:40.800 --> 00:05:45.280
And that's a method that we can do on
arrays that just takes a value out and

108
00:05:45.280 --> 00:05:47.939
then it's no longer in the array anymore.

109
00:05:47.939 --> 00:05:52.247
So we're saying give me one value out of
the array, and then greet that student.

110
00:05:52.247 --> 00:05:56.307
So hi, Matt, and then give me another
value out of the array, hi, Susan,

111
00:05:56.307 --> 00:05:57.025
hi, Sarah.

112
00:05:57.025 --> 00:06:00.301
We just grab each one of these
values out of the array.

113
00:06:00.301 --> 00:06:03.751
And by removing the element from
the array, we've made it smaller and

114
00:06:03.751 --> 00:06:04.871
smaller and smaller.

115
00:06:04.871 --> 00:06:07.892
At some point,
it's not gonna have any more students.

116
00:06:07.892 --> 00:06:10.005
And its length is gonna be 0.

117
00:06:10.005 --> 00:06:14.687
And then (students.length &gt; 0)
that's gonna give us false.

118
00:06:14.687 --> 00:06:18.874
And that's when the while loop says,
okay, it's time to stop.

119
00:06:18.874 --> 00:06:23.491
So that's a general, very brief
overview of how you loop things,

120
00:06:23.491 --> 00:06:27.869
how you repeat things like process
through a list of students.

121
00:06:27.869 --> 00:06:30.441
All right, let's try out a loop and
see how this works.

122
00:06:30.441 --> 00:06:32.335
We've got a list of students here.

123
00:06:32.335 --> 00:06:35.698
And we've got a while loop that's going
to loop over them and print them out.

124
00:06:35.698 --> 00:06:39.346
I switched it around a little bit just so
that we can run it on environment.

125
00:06:39.346 --> 00:06:43.980
When I click run here, you'll notice that
we've printed Susan, Sarah, and Matt.

126
00:06:43.980 --> 00:06:47.890
That went in reverse order because
pop is taking from the end.

127
00:06:47.890 --> 00:06:50.872
But there's a different method that
we could've called on the array, and

128
00:06:50.872 --> 00:06:52.777
it's shift,
which will take it off the front.

129
00:06:52.777 --> 00:06:57.311
So when I run it again,
now we're gonna see, Hello, Matt!, Hello,

130
00:06:57.311 --> 00:06:59.442
Sarah!, and Hello, Susan!.

