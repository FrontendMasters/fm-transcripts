[00:00:00]
>> So for some parts of user interfaces, we wanna keep the user's focus in a certain area. And this is called a keyboard trap. And we don't wanna do it unintentionally. [LAUGH] We wanna do this for certain components. Like, if you're in a modal, that's a good use case.

[00:00:20]
Any kind of new layer that comes over the top. I've seen entire apps where it's all layers upon layers, upon layers, we wanna definitely keep users from going outside of that layer. And so that's what's called a keyboard trap. But sometimes it's unintentional. Have you ever tried to navigate a code pen with a keyboard and you get into the text area, and you hit the tab key and it just keeps, you're in a text editor.

[00:00:44]
You can't get out. That's a tab trap. And you have to be kind of creative in how you set that up to not have that be a problem. So one thing you could do, just as an authoring tool developer, would be to wire up the escape key or some way to get in and out of that edit mode so that keyboard users have a way to skip by it and they have a way to get in and out.

[00:01:08]
So, keyboard traps. And there is a criterion in MCAG, it's level A, called No Keyboard Traps. It has some great information on what's acceptable and what's not. We just don't wanna do this unintentionally. So here is an example of what a keyboard trap looks like, an intentional one.

[00:01:30]
So this stack blitz, I'm going to open in a new window. So I've got a library in here called react-aria. It's pretty awesome. It's a little bit of an advanced tool, I would say. But I can create what's called a focus scope. So that's the easiest focus trap I've ever seen.

[00:01:52]
It's a component that I can pull in, wrap it around the code that I want to contain at the right time, and I didn't even have to write the actual focus trap. But let's see how that works, cuz we should know. So if I open this layer, there are some focusable items in here.

[00:02:09]
There's two inputs and a Close button. So it's not styled really at all, but my focus just cycles between these controls, so between the inputs and the buttons. So you can imagine if this was in a new layer, it would be pretty effective at keeping my focus in that content.

[00:02:31]
Let's see what it actually put into the page, cuz that's pretty magical. There's content next to it, though. That's really what I wanna look at, is there is an open button, and sure, my keyword focus was trapped, but can I get behind there somehow if it was a modal layer?

[00:02:50]
If I was a screen reader user, is the rest of the stuff all still reachable? It probably is. So this element that it input is a div with all of our stuff in it, and I think it just has some JavaScript to cycle you around. So in our previous example, we got pretty nerdy with the inert attribute.

[00:03:15]
This is another case where if you had a modal layer and you were creating a focus scope, you could use inert on any background content to keep screen reader users from being able to reach back there. Cuz right now all we're doing is the JavaScript part, but we're talking about focus, so it's relevant.

[00:03:35]
But that's what a focus trap does, is it keeps you kind of in that set of components, and that's pretty easy to do, at least if you can use the React ARIA focus scope. There's probably other libraries too, other utilities that you could pull in. Kind of observing their approach, is that they have elements before and after what we've inserted.

[00:04:01]
And so that gives us some signposts for the code underneath this that makes that work, is whenever focus gets out of the items that you inserted, it just loops in around again. They just kind of control where your focus goes and send it back. Question.
>> I see they shared a very cool tip in chat.

[00:04:24]
If you open up Chrome DevTools and you hit the I, and then put in document.active.element, that's a live expression, and you can see what element is actually active.
>> Cool, that's awesome.
>> So now as you move around, it'll just live update right there.
>> Sweet, that's cool.

[00:04:50]
Yeah, I have seen that before and I forgot about it, so thank you. Chrome DevTools is amazing. Cool, so focus traps. And, yeah, it kinda gives us techniques that we can use to keep people from getting stuck behind those layers. So do you need inert backgrounds? I think a good answer to this question is just how easy would it be to implement.

[00:05:26]
It works best when you have a sibling. So say I have modal content, if it's buried in my content in the DOM somewhere, it's gonna be really hard to use inert because the modal content is amongst everything else. Whereas if the modal and, say, main are siblings and there's some separation, I could put inert on the main element and that will keep that in the background and then my modal will live separately.

[00:05:51]
You just have to pay attention to where your content that needs to stay on top that should be reachable and accessible and trapped. That should be not inert. [LAUGH] That's the stuff we wanna navigate with. So I think sometimes the keyboard trap can be enough. I think you really wanna test it and a screen reader.

[00:06:18]
Yeah, it's part of the story but a worthy technique. Keyboard shortcuts. So let's talk briefly about keyboard shortcuts. They can be helpful. So if you have UI actions, especially if the shortcut takes a lot more work than what a mouse user could do, like the accessible, say you can do the same task but it takes a bit more effort, a keyboard shortcut could be a good use case.

[00:06:51]
And we have quite a few built in, like Command+F for finding, Command+P for print, those are keyboard shortcuts that are built into the platform, or Ctrl+P on a Windows machine. But custom keyboard shortcuts can be useful in web apps. And so there are a couple of libraries that could make this easier.

[00:07:11]
There's one from Arthur Beaulieu and Jon Kuperman. And so you can check those out. They're both named Shortcut.js, [LAUGH] popular name for that type of tool. But what that can help you do is manage meta keys. So if I have combinations of keys, it takes a little bit of trickery to match that combination.

[00:07:36]
It's not impossible, but sometimes using a little utility makes it easier. And so we can create those shortcuts. So there's two things that I want you to be aware of. One, is that shortcuts need to be discoverable. If we put all this effort and dev work into creating shortcuts that nobody knows about, it might be a little bit of a waste.

[00:08:00]
So, put them in your help documentation. I think Facebook had a cool approach at one point where they had an accessibility nav bar that would pop up at the top of the page when you started to use the keyboard. I don't know if it's still there, but some way to tell users that you have these keyboard shortcuts, if there's a little help icon on the page.

[00:08:25]
Make them easy to find cuz they're gonna be really niche and maybe not used that much otherwise. Put them on your accessibility docs or on an accessibility statement. And then the other thing I want you to know about keyboard shortcuts is, watch out for conflicts with screen reader commands.

[00:08:41]
So especially on Windows, there are common key commands already in place. Like the H key, that will cycle through headings. So you don't wanna just use plain letters for your shortcuts, [LAUGH]. They need to be kind of unique. So yeah, just something to be aware of, that screen reader commands need to still work.

