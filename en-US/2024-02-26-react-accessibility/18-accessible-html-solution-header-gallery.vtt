WEBVTT

1
00:00:00.239 --> 00:00:06.987
I think what's left is the image alt text,
and these aria hiddens.

2
00:00:06.987 --> 00:00:07.916
So this one,

3
00:00:07.916 --> 00:00:13.327
the goal of aria-hidden is to hide
something from the accessibility tree.

4
00:00:13.327 --> 00:00:18.488
So the technique on this
component that's auto rotating,

5
00:00:20.653 --> 00:00:22.871
Is that that there's three slides here.

6
00:00:22.871 --> 00:00:27.401
And when you go through the carousel,
only one is active at a time.

7
00:00:27.401 --> 00:00:32.010
So the technique that was used was
to put aria-hidden on the ones that

8
00:00:32.010 --> 00:00:33.130
are off screen.

9
00:00:33.130 --> 00:00:35.584
But the problem is there's links in there.

10
00:00:35.584 --> 00:00:37.465
And so you can tab onto the links, but

11
00:00:37.465 --> 00:00:40.448
they aren't gonna have any
accessibility information.

12
00:00:40.448 --> 00:00:43.710
So that's why Axe is complaining about it.

13
00:00:43.710 --> 00:00:50.885
So we're gonna use inert instead, which is
an HTML attribute that's been proposed.

14
00:00:50.885 --> 00:00:54.081
It's totally awesome and
it will solve this problem.

15
00:00:54.081 --> 00:00:58.133
It adds aria-hidden, and
it will go into any links or buttons or

16
00:00:58.133 --> 00:01:02.725
anything in that region, and
it'll disable them with tabindex for us.

17
00:01:02.725 --> 00:01:05.293
So let's do that.

18
00:01:05.293 --> 00:01:09.990
Okay, so instead of aria-hidden, we can
even just leave that there right now.

19
00:01:09.990 --> 00:01:13.013
I'm gonna say ref, cuz we're in React.

20
00:01:13.013 --> 00:01:15.630
So I'm gonna pass it a node.

21
00:01:15.630 --> 00:01:23.528
And within here, I might need to cheat
[LAUGH] this is kind of hard to remember.

22
00:01:23.528 --> 00:01:29.674
So React currently has an issue with
inert that you have to work around.

23
00:01:29.674 --> 00:01:31.833
So we're gonna work around it.

24
00:01:31.833 --> 00:01:34.425
I'm gonna go up here.

25
00:01:34.425 --> 00:01:37.706
We're gonna make a function
called setInert, and

26
00:01:37.706 --> 00:01:40.841
we're gonna call it for
each one of these nodes.

27
00:01:40.841 --> 00:01:47.997
And when one of them is current,
we'll turn the inert attribute off.

28
00:01:47.997 --> 00:01:50.838
When that slide is active,
we'll remove the attribute.

29
00:01:50.838 --> 00:01:54.097
It's a Boolean attribute,
either it's there or it's not.

30
00:01:54.097 --> 00:01:59.166
Okay, so I'm gonna say setInert.

31
00:01:59.166 --> 00:02:00.739
Thank you, autocomplete.

32
00:02:00.739 --> 00:02:04.339
This is our first call of this,
it's the first slide, so

33
00:02:04.339 --> 00:02:09.441
I'm gonna pass in the node from the ref
API, and I'm gonna just pass it a number.

34
00:02:09.441 --> 00:02:14.731
And the function will say, all right,
if you match this index, set this value.

35
00:02:14.731 --> 00:02:18.206
And we have some state in React that's
always keeping track of which slide is

36
00:02:18.206 --> 00:02:20.010
current, so we can piggyback on that.

37
00:02:21.328 --> 00:02:23.328
Let's do the next one.

38
00:02:23.328 --> 00:02:28.559
It is ref, node, setInert, keeps trying to

39
00:02:28.559 --> 00:02:34.491
autocomplete for
something that I did not tell it.

40
00:02:34.491 --> 00:02:39.896
So it's going to complain until we go and
write this function.

41
00:02:39.896 --> 00:02:43.853
And I only had three of these,
so I didn't make it too dynamic,

42
00:02:43.853 --> 00:02:45.882
I just hard coded these in here.

43
00:02:45.882 --> 00:02:49.650
setInert, slide 3.

44
00:02:49.650 --> 00:02:56.111
So our function that we are going
to use is called setInert.

45
00:02:56.111 --> 00:02:58.783
It takes the node from the React ref, and

46
00:02:58.783 --> 00:03:03.339
this is a way to get React to spit
out HTML that it doesn't know about,

47
00:03:03.339 --> 00:03:07.214
cuz it's valid HTML, but
React is not supporting it yet.

48
00:03:07.214 --> 00:03:13.538
So it looks for the slide number,
which we are tracking with React state.

49
00:03:13.538 --> 00:03:18.202
So current slide number, anytime you
click those buttons or if it's animating,

50
00:03:18.202 --> 00:03:23.147
it will increment that and then reset back
to beginning, that's how it spins around.

51
00:03:23.147 --> 00:03:28.698
And what it does is it moves that
element using translate CSS.

52
00:03:28.698 --> 00:03:34.273
So it will translate its x position
depending on what slide number.

53
00:03:34.273 --> 00:03:36.501
So we're gonna set the inactive ones.

54
00:03:36.501 --> 00:03:38.582
We'll set the attribute inert,

55
00:03:38.582 --> 00:03:42.083
just takes an empty string to
get it to show up as a value.

56
00:03:42.083 --> 00:03:46.766
And then when that slide is active,
we remove the attribute.

57
00:03:46.766 --> 00:03:52.069
So let's save this and
go see how it looked.

58
00:03:52.069 --> 00:03:53.544
So I'm gonna inspect.

59
00:03:56.611 --> 00:04:01.019
So let's see if this, I think it worked.

60
00:04:01.019 --> 00:04:04.048
So aria-hidden,
I need to take off, actually.

61
00:04:04.048 --> 00:04:04.695
One more thing.

62
00:04:07.945 --> 00:04:12.449
I am going to delete those cuz it
looked like inert was working, but

63
00:04:12.449 --> 00:04:18.088
these old attributes were not, and inert
will cover that, so we don't need both.

64
00:04:20.546 --> 00:04:24.599
Okay, so here we go,
we have our first list item.

65
00:04:24.599 --> 00:04:26.297
That's the one that's visible.

66
00:04:26.297 --> 00:04:31.522
And if I scroll, you can see the other
two, they're physically off to the side.

67
00:04:31.522 --> 00:04:36.160
So if I click this button, and
it slides the next one in,

68
00:04:36.160 --> 00:04:41.214
now this one has aria-hidden of false,
and inert's gone.

69
00:04:42.724 --> 00:04:45.018
And then as we go through again,
that will change this.

70
00:04:45.018 --> 00:04:49.444
So what that's doing for us is handling
any links that were inside of that.

71
00:04:50.674 --> 00:04:52.338
So we just don't have to do anything.

72
00:04:52.338 --> 00:04:56.898
We don't have to go step through
the DOM and change tabindex on things,

73
00:04:56.898 --> 00:04:58.122
it's a huge pain.

74
00:04:58.122 --> 00:05:02.421
But we're keeping screen
readers from tabbing on

75
00:05:02.421 --> 00:05:06.116
elements that there would be ghost links.

76
00:05:06.116 --> 00:05:11.354
So kind of a hairy problem that
inert makes really easy for us.

77
00:05:11.354 --> 00:05:15.896
One thing I will say is that I'm
using a polyfill so that inert,

78
00:05:15.896 --> 00:05:19.239
if we're not in Chrome, or it's supported,

79
00:05:19.239 --> 00:05:23.457
say you're in, I don't know,
Edge or I guess Chromium.

80
00:05:23.457 --> 00:05:27.754
But any browser that doesn't support
inert yet, this will still work,

81
00:05:27.754 --> 00:05:29.596
because there's a polyfill.

82
00:05:29.596 --> 00:05:35.471
So let's go run Axe again, see if we made
it happier, if there's anything we missed.

83
00:05:35.471 --> 00:05:42.066
The alt text, and it is still mad.

84
00:05:42.066 --> 00:05:45.590
There's some different elements
that had aria-hidden on them.

85
00:05:45.590 --> 00:05:48.265
So this is a different element.

86
00:05:48.265 --> 00:05:50.198
It's these buttons.

87
00:05:50.198 --> 00:05:53.166
So those ones should not have
aria-hidden on them at all.

88
00:05:53.166 --> 00:05:54.930
This is not the same fix for these.

89
00:05:54.930 --> 00:05:59.057
So these ones, for some reason,
had aria-hidden of true on them but

90
00:05:59.057 --> 00:06:02.913
they're still focusable,
cuz they should be usable, right?

91
00:06:02.913 --> 00:06:06.915
We can tab onto them, we should be
able to use a screen reader with them,

92
00:06:06.915 --> 00:06:11.004
and aria-hidden is stripping away
information that we actually need.

93
00:06:11.004 --> 00:06:16.243
So we can go remove that and our alt text.

94
00:06:16.243 --> 00:06:19.159
So those buttons were
in the right component.

95
00:06:19.159 --> 00:06:23.511
Here's that aria-hidden,
let's get that out of there.

96
00:06:23.511 --> 00:06:27.399
There's one more down here,
get that out of there.

97
00:06:27.399 --> 00:06:29.455
And those were real examples, too.

98
00:06:29.455 --> 00:06:33.259
I borrowed inspiration
[LAUGH] from a real website.

99
00:06:33.259 --> 00:06:36.498
So some of these are made up, some of them
are real that I just found in the wild.

100
00:06:36.498 --> 00:06:40.511
So our code bases can be doing all
kinds of things that we may or

101
00:06:40.511 --> 00:06:42.094
may not have intended.

102
00:06:42.094 --> 00:06:46.875
But if we test it and then we can go and
fix stuff, we can make it better.

103
00:06:46.875 --> 00:06:51.511
So we've got that one, I think our
image alt text will be the last bit.

104
00:06:51.511 --> 00:06:55.542
So this is somewhat dynamic.

105
00:06:55.542 --> 00:06:59.996
The goal is to make a component that you
can just feed it different sets of data,

106
00:06:59.996 --> 00:07:02.308
It'll be, voila, show you a gallery.

107
00:07:02.308 --> 00:07:04.253
But it's kind of half-baked, I will admit.

108
00:07:04.253 --> 00:07:08.688
So we do have the capability
of pulling in alt text.

109
00:07:08.688 --> 00:07:11.551
So let's look at what
our dataset looks like.

110
00:07:11.551 --> 00:07:18.810
We have an image that we're mapping
over a series of gallery images.

111
00:07:18.810 --> 00:07:22.414
So these images,

112
00:07:24.132 --> 00:07:27.835
Come from some image
data that gets passed in.

113
00:07:27.835 --> 00:07:31.437
I'm using TypeScript, so
I can actually go and

114
00:07:31.437 --> 00:07:34.956
see some of the structure
of this data object.

115
00:07:34.956 --> 00:07:38.137
I'm a total TypeScript convert,
I'll admit it.

116
00:07:38.137 --> 00:07:39.902
It's awesome [LAUGH].

117
00:07:39.902 --> 00:07:42.201
I held out for so long.

118
00:07:42.201 --> 00:07:46.675
I did not love it, but for stuff like
this, you can go down the path and see,

119
00:07:46.675 --> 00:07:49.109
does my data already have alt text in it?

120
00:07:49.109 --> 00:07:50.421
It might or it might not, and

121
00:07:50.421 --> 00:07:53.671
you can have a conversation about
where's that data gonna come from.

122
00:07:53.671 --> 00:07:55.158
Question?

123
00:07:55.158 --> 00:07:58.611
&gt;&gt; Why did you have to
use the ref attribute?

124
00:07:58.611 --> 00:08:00.219
&gt;&gt; Great question for the inert.

125
00:08:00.219 --> 00:08:06.032
So let me show you,
kind of glossed over the fix for that.

126
00:08:06.032 --> 00:08:07.561
We'll come back to the alt text.

127
00:08:08.711 --> 00:08:11.311
So that was in the header.

128
00:08:11.311 --> 00:08:12.303
I'll show you why.

129
00:08:12.303 --> 00:08:19.105
So inert, It's this right here.

130
00:08:19.105 --> 00:08:23.830
Property inert does not exist on the HTML.

131
00:08:23.830 --> 00:08:26.465
So this is a TypeScript error.

132
00:08:26.465 --> 00:08:28.733
Basically saying that React and

133
00:08:28.733 --> 00:08:33.774
TypeScript don't think that's a real
attribute, even though it is.

134
00:08:33.774 --> 00:08:37.657
So, like any developer,
I went looking around to go and see,

135
00:08:37.657 --> 00:08:39.911
can I change my TypeScript config?

136
00:08:39.911 --> 00:08:41.356
I tried all of it.

137
00:08:41.356 --> 00:08:46.489
There's supposedly a work around for
this by defining a TypeScript,

138
00:08:46.489 --> 00:08:52.585
creating a definition for this so React
knows about it, I couldn't get it to work.

139
00:08:52.585 --> 00:08:57.285
So I think when you want
to have an end result of

140
00:08:57.285 --> 00:09:01.879
your markup being crafted
in a certain way.

141
00:09:01.879 --> 00:09:06.065
My own personal view is,
do it [LAUGH] by any means necessary, and

142
00:09:06.065 --> 00:09:08.092
I had to use the ref API to do it.

143
00:09:08.092 --> 00:09:15.867
It's not quite as elegant because
I'm having to go and call DOM APIs.

144
00:09:15.867 --> 00:09:19.509
So this node set attribute,
that's a bit of a smell.

145
00:09:19.509 --> 00:09:20.998
That's not the ideal way to do it.

146
00:09:20.998 --> 00:09:23.540
The React way, and why I love React,

147
00:09:23.540 --> 00:09:27.313
is that normally I would have
just swapped out inert for

148
00:09:27.313 --> 00:09:33.317
aria-hidden with our original code, and it
would have just been one and done, easy.

149
00:09:33.317 --> 00:09:35.409
But it just didn't work.

150
00:09:35.409 --> 00:09:38.231
So if you wanna learn more,

151
00:09:38.231 --> 00:09:43.892
here is the discussion in
React not supporting inert.

152
00:09:43.892 --> 00:09:47.408
People are a little cranky about it,
understandably so.

153
00:09:47.408 --> 00:09:48.637
I don't know what's gonna happen with it.

154
00:09:48.637 --> 00:09:52.437
My hope is that they'll just fix this and
then we can use inert,

155
00:09:52.437 --> 00:09:54.238
maybe with a polyfill still.

156
00:09:54.238 --> 00:09:59.073
But not have to do all this hacky,
ref, node stuff.

157
00:09:59.073 --> 00:10:02.150
That is a really great question,
though, I'm glad you asked it.

158
00:10:02.150 --> 00:10:05.367
So keep an eye on this one,
I've got it in the code base.

159
00:10:05.367 --> 00:10:07.548
I'll make sure it's in the slides, too,

160
00:10:07.548 --> 00:10:11.502
cuz it's something we'll have to keep
checking on, cuz this is so helpful.

161
00:10:11.502 --> 00:10:17.588
For modals, I mean, even something as
small as this little announcements

162
00:10:17.588 --> 00:10:23.189
carousel, it can be a very helpful
tool that we should be able to use,

163
00:10:23.189 --> 00:10:26.979
cuz it's valid, it's in the HTML standard.

164
00:10:26.979 --> 00:10:28.092
So yeah, that's why.

165
00:10:30.002 --> 00:10:31.208
Question?

166
00:10:31.208 --> 00:10:35.409
&gt;&gt; Speaking on TypeScripts,
how useful do you think it is for

167
00:10:35.409 --> 00:10:38.681
catching some basic accessibility issues?

168
00:10:38.681 --> 00:10:42.698
Because I know for the example you were
showing a little bit earlier where we

169
00:10:42.698 --> 00:10:45.077
defined the property using the wrong name.

170
00:10:45.077 --> 00:10:47.884
That feels like something that
TypeScript would be able to catch, but

171
00:10:47.884 --> 00:10:50.180
I don't know from your
experience how reliable that is?

172
00:10:50.180 --> 00:10:51.559
&gt;&gt; It usually can.

173
00:10:51.559 --> 00:10:57.028
So it sort of makes me wonder about
the tool set of how the site was,

174
00:10:57.028 --> 00:11:01.517
the original,
[LAUGH] the site that I was inspired by.

175
00:11:01.517 --> 00:11:03.373
You can kind of learn, I don't know,

176
00:11:03.373 --> 00:11:06.923
some interesting things about codebase
just from playing with it a lot.

177
00:11:06.923 --> 00:11:12.618
And so I wonder, I do think that some
tools would be able to catch it.

178
00:11:12.618 --> 00:11:19.226
Probably the ESLint plugin for JSX,
I bet that would've caught it.

179
00:11:19.226 --> 00:11:23.688
Cuz, yeah, a lot of these things,
it is surprising to see some of them

180
00:11:23.688 --> 00:11:28.151
because we have a lot of tools that
we'll point it out in development,

181
00:11:28.151 --> 00:11:29.760
cuz that would be ideal.

182
00:11:29.760 --> 00:11:35.207
Yeah, and things like,
I mean, this inert example,

183
00:11:37.241 --> 00:11:42.144
That is potentially saving us
from something really tricky.

184
00:11:42.144 --> 00:11:45.059
I just happen to know that
it's shouldn't be failing.

185
00:11:45.059 --> 00:11:48.688
So that's where it gets a little tricky,
is that valid?

186
00:11:48.688 --> 00:11:50.624
Can I use that?

187
00:11:50.624 --> 00:11:52.071
You have to dig in a little bit more.

188
00:11:52.071 --> 00:11:56.502
And if you read that issue or the pull
request on React, there's some grumpy

189
00:11:56.502 --> 00:12:01.017
developers in there going, it's 2023 and
we should be able to use this.

190
00:12:01.017 --> 00:12:06.025
You can kinda get the gist that it should
be something that should be in there,

191
00:12:06.025 --> 00:12:10.200
but something like aria-role,
that's never gonna be valid.

192
00:12:10.200 --> 00:12:14.533
So I think the tooling can
potentially save us from stuff, but

193
00:12:14.533 --> 00:12:19.966
then here's the trade off, is that it's
a little bit too strict sometimes.

194
00:12:19.966 --> 00:12:24.723
But, yeah, so inert.

195
00:12:24.723 --> 00:12:32.159
And if you need to do things that React
and TypeScript aren't very pleased about,

196
00:12:32.159 --> 00:12:36.161
the ref API,
you can do some trickery here.

197
00:12:36.161 --> 00:12:40.782
Use effect and the cleanup
function that comes with it can

198
00:12:40.782 --> 00:12:45.122
also be little back doors to try and
use some DOM APIs.

199
00:12:45.122 --> 00:12:50.175
I've done that a lot for,
when you click outside to close something.

200
00:12:50.175 --> 00:12:53.619
You have a component that you wanna
be able to click outside of it and

201
00:12:53.619 --> 00:12:54.984
have it collapse things.

202
00:12:54.984 --> 00:13:00.572
You can use use effect and document,
add event listener to mount and

203
00:13:00.572 --> 00:13:03.818
unmount some events in the component.

204
00:13:03.818 --> 00:13:07.347
So we can kind of get little
escape hatches in React, but

205
00:13:07.347 --> 00:13:12.231
you definitely wanna use caution so
that you're outputting valid markup and

206
00:13:12.231 --> 00:13:14.803
you're not creating any memory leaks.

207
00:13:14.803 --> 00:13:18.976
Cuz I think that's some of
the risks with some of this stuff.

208
00:13:18.976 --> 00:13:25.133
Cool, image alt text, that's our last bit.

209
00:13:25.133 --> 00:13:27.309
So we were talking about TypeScript,

210
00:13:27.309 --> 00:13:30.438
trying to figure out what
data we have available to us.

211
00:13:30.438 --> 00:13:36.960
So our image data,
we are using the gallery images.

212
00:13:36.960 --> 00:13:41.514
So I wanna go deeper
into where's that type.

213
00:13:41.514 --> 00:13:47.508
So I could go into my imageData,
galleryImages,

214
00:13:47.508 --> 00:13:54.088
comes from image, and
it does have an alt in this type.

215
00:13:54.088 --> 00:13:57.210
And so we happen to be looking
at TypeScript, I think when

216
00:13:57.210 --> 00:14:01.894
you're working with Teams, you could ask
a person that [LAUGH] you're working with,

217
00:14:01.894 --> 00:14:03.974
the code might not always tell you, or

218
00:14:03.974 --> 00:14:07.509
maybe TypeScript is just too much,
I totally understand that.

219
00:14:07.509 --> 00:14:12.830
Wherever you have a source of information
of where the image asset's coming from,

220
00:14:12.830 --> 00:14:16.339
you could ask about alt text
kind of in that same realm.

221
00:14:16.339 --> 00:14:20.093
You sometimes just have to make it up.

222
00:14:20.093 --> 00:14:24.382
Write the alt text, that's not the best,
but better than none.

223
00:14:24.382 --> 00:14:27.166
But for this, we should get alt text.

224
00:14:27.166 --> 00:14:34.583
So our data is coming from a file.

225
00:14:34.583 --> 00:14:39.515
So here's where this comes from,
it is strongly typed,

226
00:14:39.515 --> 00:14:46.319
which is really nice I've found, but
our gallery images do not have alt text.

227
00:14:46.319 --> 00:14:49.113
So if this was coming from
a back-end API or something,

228
00:14:49.113 --> 00:14:51.261
I probably wouldn't be able to edit that.

229
00:14:51.261 --> 00:14:58.723
There is alt text for the top image,
the main image, so we could pull that in.

230
00:14:58.723 --> 00:15:03.490
And every image under that, I guess
that would be a conversation to be,

231
00:15:03.490 --> 00:15:07.080
hey where's the rest of
the alt text gonna come from?

232
00:15:07.080 --> 00:15:10.091
And I'll tell you what
the actual implementation had,

233
00:15:10.091 --> 00:15:13.113
it had that top-level alt text for
every single image.

234
00:15:13.113 --> 00:15:16.302
So they wrote it in a way
that was generic enough, but

235
00:15:16.302 --> 00:15:19.866
I guess they thought it could
apply to every single image.

236
00:15:19.866 --> 00:15:24.841
It's not very informative, if you're
blind and you're trying to learn about

237
00:15:24.841 --> 00:15:28.553
a product, you kinda wanna
know what capabilities it has,

238
00:15:28.553 --> 00:15:32.880
how are they showing it, so
that's not a very accessible solution.

239
00:15:32.880 --> 00:15:39.693
But this main image, at least, so
this is a chakra image component.

240
00:15:39.693 --> 00:15:43.755
The ones down below in the gallery
are just plain HTML elements.

241
00:15:43.755 --> 00:15:48.299
They have pretty seamless APIs for
the props.

242
00:15:48.299 --> 00:15:54.193
So this image source, not all caps,

243
00:15:54.193 --> 00:15:59.706
I can say alt, and then I could pass

244
00:15:59.706 --> 00:16:05.237
it imagedata.mainImage.alt.

245
00:16:05.237 --> 00:16:08.662
And it has it, so I can bring that in.

246
00:16:08.662 --> 00:16:11.082
That's only gonna solve it for
this top one.

247
00:16:11.082 --> 00:16:18.571
So I think what I was saying the real site
did was they just used the same alt text.

248
00:16:21.199 --> 00:16:24.979
So if you needed to do something,
you could do that in a pinch,

249
00:16:24.979 --> 00:16:29.782
while you also go have a conversation
with your team about where's the real alt

250
00:16:29.782 --> 00:16:31.193
text gonna come from.

251
00:16:31.193 --> 00:16:33.719
Hopefully you can get a better answer.

252
00:16:33.719 --> 00:16:37.362
But this is kind of an example of
how some things can't be caught

253
00:16:37.362 --> 00:16:38.747
with automated tools.

254
00:16:38.747 --> 00:16:41.249
We caught that there wasn't
an alt text present,

255
00:16:41.249 --> 00:16:45.193
but it would be fine with this, let's
go see what this looks like, actually.

256
00:16:45.193 --> 00:16:47.801
We'll go over to the browser.

257
00:16:47.801 --> 00:16:50.864
I'm gonna rerun scan.

258
00:16:50.864 --> 00:16:52.134
We fixed everything.

259
00:16:52.134 --> 00:16:56.229
It's like, all right, cool, except we
used the alt text for one image for

260
00:16:56.229 --> 00:16:57.010
every image.

261
00:16:57.010 --> 00:17:00.883
So that's not that great.

262
00:17:00.883 --> 00:17:01.996
Let's see what the images are.

263
00:17:01.996 --> 00:17:06.952
So there's a detail, close up of
the colors, there's a handle on top,

264
00:17:06.952 --> 00:17:10.787
you can see this cute dog goes
on a stand up paddle board.

265
00:17:10.787 --> 00:17:14.109
I mean, there's so
much detail missing, right?

266
00:17:14.109 --> 00:17:18.512
So it kind of illustrates that we
can only fix so much with code.

267
00:17:18.512 --> 00:17:25.614
There's other conversations that we have
to have, and it has to be planned for.

268
00:17:25.614 --> 00:17:31.349
We're code technicians, we can do
some things to push pixels around and

269
00:17:31.349 --> 00:17:35.312
add labels, but
it needs to be a requirement too.

270
00:17:35.312 --> 00:17:38.335
So just know that it's not all on you.

271
00:17:38.335 --> 00:17:43.335
We need our teams to support us in getting
the right content into the right place.

