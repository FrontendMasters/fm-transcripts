WEBVTT

1
00:00:00.236 --> 00:00:03.959
So let's move on to some
keyboard focus management.

2
00:00:03.959 --> 00:00:07.365
Now that we've gotten very deep into ARIA,

3
00:00:07.365 --> 00:00:12.261
some pretty dynamic stuff, so
it's pretty appy, isn't it?

4
00:00:12.261 --> 00:00:17.404
And a lot of ARIA is that way,
it's for dynamic web applications.

5
00:00:17.404 --> 00:00:22.857
So that's why I kinda prefaced it all
by saying that it is an advanced tool.

6
00:00:22.857 --> 00:00:27.339
So bear with me if you're like,
whoa, this is getting technical.

7
00:00:27.339 --> 00:00:32.623
Some accessibility is pretty technical,
but some of it is more nuts and

8
00:00:32.623 --> 00:00:37.658
bolts mechanics, and focus management for
keyboards is that way.

9
00:00:37.658 --> 00:00:42.466
We can create something that's keyboard
accessible without ARIA really

10
00:00:42.466 --> 00:00:43.869
factoring in at all.

11
00:00:43.869 --> 00:00:46.899
We do need to consider ARIA, but

12
00:00:46.899 --> 00:00:51.737
the keyboard-only mindset
is before all of that.

13
00:00:51.737 --> 00:00:56.279
So we wanna think about,
how can a keyboard user get around?

14
00:00:56.279 --> 00:01:00.369
How can they go from component
to component or page to page?

15
00:01:00.369 --> 00:01:06.546
How can they navigate through content,
including interactive elements?

16
00:01:06.546 --> 00:01:11.634
And so that mindset is something
we want to think about every time

17
00:01:11.634 --> 00:01:16.736
we sit down to test a web page,
build a web page, build a web app.

18
00:01:16.736 --> 00:01:22.460
And we joked around a little bit earlier
today about turning your mouse off for

19
00:01:22.460 --> 00:01:23.790
a day of the week.

20
00:01:23.790 --> 00:01:28.248
I created [LAUGH] a tool kind of
as a joke called no mouse days,

21
00:01:28.248 --> 00:01:29.860
as a nod to that idea.

22
00:01:29.860 --> 00:01:34.258
But I think you wanna incorporate it
into your process somehow of just not

23
00:01:34.258 --> 00:01:38.945
using the mouse, not using your trackpad
and seeing if you can still reach and

24
00:01:38.945 --> 00:01:41.991
operate everything that
should be interactive.

25
00:01:41.991 --> 00:01:44.322
So I have a mantra for
you for testing, and

26
00:01:44.322 --> 00:01:46.862
we touched on this in
our debugging section.

27
00:01:46.862 --> 00:01:48.095
So here's some of that.

28
00:01:48.095 --> 00:01:54.460
Again, can you navigate to and
operate all interactive controls?

29
00:01:54.460 --> 00:01:58.056
And so screen reader accessibility
does piggyback on this.

30
00:01:58.056 --> 00:02:02.288
We learned a lot with ARIA,
maybe more than you really wanted to know,

31
00:02:02.288 --> 00:02:04.313
[LAUGH] but they do work together.

32
00:02:04.313 --> 00:02:09.225
So anytime you make something keyboard
accessible, the screen reader will also be

33
00:02:09.225 --> 00:02:12.253
able to navigate to that
element using the Tab key.

34
00:02:12.253 --> 00:02:15.846
Screen readers do have
other ways of navigating,

35
00:02:15.846 --> 00:02:20.206
but the keyboard access is
foundational to a lot of that, and

36
00:02:20.206 --> 00:02:23.899
it's unfortunately overlooked
a lot of the time.

37
00:02:23.899 --> 00:02:26.702
Can you also see where your
focus point is on the screen?

38
00:02:26.702 --> 00:02:32.462
So when we debugged SoundCloud, we saw
that there was some outlines suppressed,

39
00:02:32.462 --> 00:02:35.890
and that is extremely common,
unfortunately.

40
00:02:35.890 --> 00:02:39.417
So we want to allow some
kind of focus state, and

41
00:02:39.417 --> 00:02:42.077
subtlety is not that helpful here.

42
00:02:42.077 --> 00:02:45.098
We want it to be obvious,
have contrast, so

43
00:02:45.098 --> 00:02:48.789
people can actually see where
they are on the screen.

44
00:02:48.789 --> 00:02:52.853
And are we getting lost
behind any active layers or

45
00:02:52.853 --> 00:02:58.476
in inactive mega menus or
being forced through sidebar navigation?

46
00:02:58.476 --> 00:03:02.169
We saw that as [LAUGH] well.

47
00:03:02.169 --> 00:03:06.586
And then when you have things like modals,
other layers, interactive widgets,

48
00:03:06.586 --> 00:03:10.571
is your focus moved into that new
content and restored when you're done?

49
00:03:10.571 --> 00:03:14.983
So with a modal, is your focus
moved into the modal when it opens?

50
00:03:14.983 --> 00:03:18.092
And then when you hit Esc,
or hit the Close button, or

51
00:03:18.092 --> 00:03:20.650
Accept, or whatever the call to action is,

52
00:03:20.650 --> 00:03:24.754
your focus from your keyboard should
move back to where you came from.

53
00:03:24.754 --> 00:03:27.189
And that's so
that if you can't use a mouse,

54
00:03:27.189 --> 00:03:29.315
that you're placed in the right spot.

55
00:03:29.315 --> 00:03:33.231
And that's really what
focus management is about,

56
00:03:33.231 --> 00:03:37.948
is putting the user in the right
place to do the thing, to type,

57
00:03:37.948 --> 00:03:43.660
to navigate, to digest content that we
just showed onscreen in a new layer.

58
00:03:43.660 --> 00:03:48.390
So it's all about kind of curating
that experience for a keyboard user so

59
00:03:48.390 --> 00:03:52.979
they're not being literally left
behind a modal or some other layer.

60
00:03:55.579 --> 00:03:59.988
One tool that we use for
focus management is skip links.

61
00:03:59.988 --> 00:04:05.555
And skip links are helpful on
content-heavy sites, on web applications.

62
00:04:05.555 --> 00:04:10.920
And so when you can navigate by
skip links, you could jump around.

63
00:04:10.920 --> 00:04:15.699
A common example would be a skip to
content link or skip to main content.

64
00:04:15.699 --> 00:04:21.414
And so that is a link that you can click
that will bypass you past the header or

65
00:04:21.414 --> 00:04:24.602
other content, and to the main content.

66
00:04:24.602 --> 00:04:29.396
Or a back to top link, that would be
another example of something maybe even

67
00:04:29.396 --> 00:04:31.998
more common than a skip to content link.

68
00:04:31.998 --> 00:04:36.568
And these are requirements in the web
content accessibility guidelines,

69
00:04:36.568 --> 00:04:37.662
they are level A.

70
00:04:37.662 --> 00:04:43.580
So we haven't even really talked about
level A, but level A is before double A.

71
00:04:43.580 --> 00:04:48.746
So if you're trying to meet double A,
that would also include single A.

72
00:04:48.746 --> 00:04:53.820
So bypass blocks are a important
requirement, and I'm not meeting them

73
00:04:53.820 --> 00:04:58.827
by [LAUGH] not having them on this site,
so I am gonna add some after this.

74
00:04:58.827 --> 00:05:01.627
So they're not just a nice to have.

75
00:05:01.627 --> 00:05:04.018
We've talked about how
they should be visible.

76
00:05:04.018 --> 00:05:09.144
So if you have a skip link, you really
wanna make it so users can reach and

77
00:05:09.144 --> 00:05:14.197
operate it if they're sighted and
if they're using a screen reader.

78
00:05:14.197 --> 00:05:16.743
So some mechanics of skip links.

79
00:05:16.743 --> 00:05:20.366
You've got the link itself, so
it has an internal link, usually.

80
00:05:20.366 --> 00:05:24.164
So the href points to an ID
reference on an element.

81
00:05:24.164 --> 00:05:29.810
So in this case, there would be an ID
on an element with main content.

82
00:05:29.810 --> 00:05:32.475
And so when I activate that link,

83
00:05:32.475 --> 00:05:38.100
it will automatically jump me to
that element, which is super handy.

84
00:05:38.100 --> 00:05:43.581
And the other component of a skip link is,
where does your focus go to?

85
00:05:43.581 --> 00:05:49.524
And so the main element in this example
has that matching idea of main content.

86
00:05:49.524 --> 00:05:54.984
And just to be extra double sure that
it's going to work as a skip link target,

87
00:05:54.984 --> 00:06:00.024
we call it, I'm gonna recommend
adding a tabindex attribute of -1.

88
00:06:00.024 --> 00:06:04.626
So this is some of our first
exposure to tabindex, but

89
00:06:04.626 --> 00:06:08.220
it will make something focusable or not.

90
00:06:08.220 --> 00:06:11.896
Tabindex of 0,
we'll put it into the tab order.

91
00:06:11.896 --> 00:06:15.967
Tab index of -1 will
make it receive focus.

92
00:06:15.967 --> 00:06:20.127
If you use JavaScript or
you use a skip link like this,

93
00:06:20.127 --> 00:06:25.403
it will sort of catch it, but
it won't make it so you can tab onto it.

94
00:06:25.403 --> 00:06:28.831
It's not in the tab order.

95
00:06:28.831 --> 00:06:34.872
And so a CSS, you can choose whether
you want to suppress the focus style.

96
00:06:34.872 --> 00:06:38.741
So you can't tab two elements
with -1 of tabindex, but

97
00:06:38.741 --> 00:06:43.827
when you click on them, in most browsers,
they will show a focus outline.

98
00:06:43.827 --> 00:06:47.523
People don't love it,
[LAUGH] I've had to suppress this before.

99
00:06:47.523 --> 00:06:52.359
So this is another use case for
focus visible, potentially,

100
00:06:52.359 --> 00:06:57.669
where you match a focus visible
selector to show off style and case.

101
00:06:57.669 --> 00:07:00.936
When you're using the keyboard
with focus management,

102
00:07:00.936 --> 00:07:03.258
you do wanna show where your focus went.

103
00:07:03.258 --> 00:07:07.146
But for mouse users,
you could suppress that focus outline,

104
00:07:07.146 --> 00:07:11.876
cuz it's usually around a whole,
your main content is what would have it.

105
00:07:11.876 --> 00:07:17.594
So yeah, it can be useful
to know that you can match.

106
00:07:17.594 --> 00:07:21.114
I don't recommend hiding
outlines really ever,

107
00:07:21.114 --> 00:07:25.148
except in the case of these
tabindex of -1 situations.

108
00:07:25.148 --> 00:07:30.080
And even then, you could probably
add a focus-visible replacement so

109
00:07:30.080 --> 00:07:33.048
that keyboard users would get something.

110
00:07:33.048 --> 00:07:37.381
So for skip links examples,
let's go look at some.

111
00:07:37.381 --> 00:07:41.727
Target has it, here's their big red site.

112
00:07:41.727 --> 00:07:47.049
And so if I hit Tab, they have their
skip to main content link visible.

113
00:07:47.049 --> 00:07:49.573
It bumps down all the content, so

114
00:07:49.573 --> 00:07:53.462
we have this full screen
skip to main content link.

115
00:07:53.462 --> 00:07:57.216
And it's actually pretty
cool how they do this.

116
00:07:57.216 --> 00:08:01.198
They have two links, so there's skip
to main content, skip to footer, and

117
00:08:01.198 --> 00:08:03.701
they just replace them
right in the same space.

118
00:08:03.701 --> 00:08:05.874
So it's a pretty nice treatment.

119
00:08:05.874 --> 00:08:08.536
It looks really seamless
with their design.

120
00:08:08.536 --> 00:08:12.700
It's not an afterthought,
they obviously planned this.

121
00:08:12.700 --> 00:08:16.435
And they have the links just kind
of show up in the same spot.

122
00:08:16.435 --> 00:08:19.307
So let's say I wanted
to go to main content,

123
00:08:19.307 --> 00:08:22.968
I hit Enter, and
then my focus is already down the page.

124
00:08:22.968 --> 00:08:26.302
I don't have to go all the way
through all the header links.

125
00:08:26.302 --> 00:08:30.287
If I wanted to go back up to the top
again and try the footer one,

126
00:08:30.287 --> 00:08:32.985
that jumps me way down here to the footer.

127
00:08:34.759 --> 00:08:39.721
And so that can be super handy,
especially for really content-heavy sites,

128
00:08:39.721 --> 00:08:42.953
where it would be a huge pain
to have to skip around or

129
00:08:42.953 --> 00:08:45.831
to have to tab through
every single element.

130
00:08:45.831 --> 00:08:47.737
So skip links are pretty great.

131
00:08:47.737 --> 00:08:51.314
Let's see how they marked theirs up,
cuz that looked really cool.

132
00:08:51.314 --> 00:08:54.785
So I'm gonna go inspect
up here in the header.

133
00:08:54.785 --> 00:08:57.679
Here is our skip links.

134
00:09:00.177 --> 00:09:04.404
We have these links right here,
skip to main content.

135
00:09:04.404 --> 00:09:08.116
Just like we showed, it has the href.

136
00:09:08.116 --> 00:09:14.498
So they have a CSS class here
of h-sr-only-focusable, and

137
00:09:14.498 --> 00:09:21.137
it looks a lot like our other
sr-only classes that we've seen.

138
00:09:21.137 --> 00:09:24.279
And so this one,
that's how they're accomplishing that.

139
00:09:24.279 --> 00:09:29.473
And then, I guess, if I wanna see further
how they did it when it gets focused,

140
00:09:29.473 --> 00:09:34.701
they just changed the positioning on it,
looks like maybe a few other things.

141
00:09:34.701 --> 00:09:39.548
But that's kinda the cool thing about
skip links is you can test them generally

142
00:09:39.548 --> 00:09:42.928
when they're marked up with HTML and
styled with CSS,

143
00:09:42.928 --> 00:09:45.293
not when JavaScript comes into play.

144
00:09:45.293 --> 00:09:51.661
But you can match these element pseudo
states and test how they're gonna look.

145
00:09:51.661 --> 00:09:57.438
So this makes it nice when you're
actively developing skip links.

146
00:09:57.438 --> 00:09:59.810
You can just come in here and
toggle this on.

147
00:09:59.810 --> 00:10:04.498
It will keep it in that state, so you can
get it looking nice when it's active.

148
00:10:04.498 --> 00:10:07.829
You don't have to keep
tabbing into the page and

149
00:10:07.829 --> 00:10:10.670
that loop of refresh tab, refresh tab.

150
00:10:10.670 --> 00:10:14.837
Use the force element state on focus,
just makes your life so much easier.

151
00:10:16.876 --> 00:10:19.471
So let's look at the GitHub version,

152
00:10:19.471 --> 00:10:23.537
cuz they have a lot of really
cool accessibility features.

153
00:10:25.543 --> 00:10:28.420
So they made it stand out
with a blue background,

154
00:10:28.420 --> 00:10:32.710
so it pops over the content instead
of pushing everything out of the way.

155
00:10:32.710 --> 00:10:36.001
Works just as well, and so I hit Enter.

156
00:10:36.001 --> 00:10:40.644
So you can see how there's no visible
focus style when I hit that Enter.

157
00:10:40.644 --> 00:10:46.500
That's what I was talking
about with the no focus style.

158
00:10:46.500 --> 00:10:50.092
So let's inspect theirs a little bit more.

159
00:10:50.092 --> 00:10:56.310
So if I go back up, and
I can inspect this one,

160
00:10:56.310 --> 00:11:00.915
we have skip to start of content.

161
00:11:00.915 --> 00:11:02.400
Oop, not what I meant to do.

162
00:11:02.400 --> 00:11:08.555
So I can search in here in the DOM,
start of content.

163
00:11:08.555 --> 00:11:11.341
So that's the link itself.

164
00:11:12.947 --> 00:11:16.007
And then they've accomplished theirs.

165
00:11:16.007 --> 00:11:19.324
Instead of having an element
that wraps everything,

166
00:11:19.324 --> 00:11:22.649
they just put an empty div and
made it catch the focus.

167
00:11:22.649 --> 00:11:27.129
So that has this matching ID,
but there's nothing in it.

168
00:11:27.129 --> 00:11:31.001
I guess I'd wanna test that,
because if we're jumping focus around,

169
00:11:31.001 --> 00:11:33.399
it's not gonna really announce anything.

170
00:11:33.399 --> 00:11:36.725
And thinking about a screen reader user,

171
00:11:36.725 --> 00:11:41.677
I haven't tested this specific
combination of techniques.

172
00:11:41.677 --> 00:11:46.783
It is interesting to me that they
have an element right after it

173
00:11:46.783 --> 00:11:52.294
that has a tabindex of -1 on it
that says data skipped to content.

174
00:11:52.294 --> 00:11:54.564
So maybe something, I don't know.

175
00:11:54.564 --> 00:12:00.257
It's a curious technique, but
we don't really see where we go.

176
00:12:00.257 --> 00:12:04.228
I guess one benefit of doing
the tabindex of -1 technique

177
00:12:04.228 --> 00:12:08.858
is that you have the option of
showing where the user's focus went.

178
00:12:08.858 --> 00:12:14.246
And for people who really rely on
the keyboard, that could be useful.

179
00:12:14.246 --> 00:12:18.425
So I think, yeah, just some food for
thought and how to make this happen.

180
00:12:18.425 --> 00:12:21.485
I mean, they're accomplishing
what we really need to happen,

181
00:12:21.485 --> 00:12:23.307
which is jumping you past the header.

182
00:12:23.307 --> 00:12:27.217
Getting you past all the links that
you don't wanna send a user through.

183
00:12:27.217 --> 00:12:29.114
And that's working great,
that's the requirement.

184
00:12:29.114 --> 00:12:31.645
So two different approaches, but

185
00:12:31.645 --> 00:12:37.325
basically doing the same thing of getting
us past content that we wanna skip.

