WEBVTT

1
00:00:00.090 --> 00:00:05.120
I want to send you off into the world
with some resources, some encouragement.

2
00:00:05.120 --> 00:00:08.461
I may add to this list over time,
so if there's anything I missed,

3
00:00:08.461 --> 00:00:12.596
I think there were a couple of tools and
techniques that I'll go and incorporate.

4
00:00:12.596 --> 00:00:16.192
There are some notable design systems and
component libraries,

5
00:00:16.192 --> 00:00:20.455
React has quite a few,
I think there's been a big demand for it.

6
00:00:20.455 --> 00:00:25.709
React, ARIA from Adobe, we saw their focus
scope, that was a pretty handy component,

7
00:00:25.709 --> 00:00:29.855
but there are whole other sets
of components that they've made.

8
00:00:29.855 --> 00:00:34.975
Chakra UI, which is for
React and Vue, and maybe more.

9
00:00:34.975 --> 00:00:40.882
There's Core UI for Vue,
another library called Radix.

10
00:00:40.882 --> 00:00:44.762
And I haven't tested every single
one of these, I`ll caution you.

11
00:00:44.762 --> 00:00:47.970
And even if something does
say it`s accessible also,

12
00:00:47.970 --> 00:00:51.874
just kind of a last plug is that
don't take their word for it [LAUGH],

13
00:00:51.874 --> 00:00:54.892
we have to test it,
I mean we are all human, right?

14
00:00:54.892 --> 00:00:58.912
So we might have built something and
it worked when we published it and

15
00:00:58.912 --> 00:01:03.110
then life happens and stuff maybe
doesn't work as well as we thought.

16
00:01:03.110 --> 00:01:10.221
So, as authors of libraries, and
or as consumers of libraries,

17
00:01:10.221 --> 00:01:15.440
we trust but
verify like try out a demo site.

18
00:01:15.440 --> 00:01:20.672
Use those debugging techniques and
at least see what's the state of it,

19
00:01:20.672 --> 00:01:24.122
and how is their GitHub library or
GitHub repo?

20
00:01:24.122 --> 00:01:26.455
Do they respond to issues?

21
00:01:26.455 --> 00:01:27.445
Are they kind about it?

22
00:01:27.445 --> 00:01:30.056
Are they maybe not so nice about it?

23
00:01:30.056 --> 00:01:32.633
You might be able to do
kind of a gut check of,

24
00:01:32.633 --> 00:01:35.842
before we convert our whole
app to this design system,

25
00:01:35.842 --> 00:01:39.362
what's the experience gonna
be like trying to fix things.

26
00:01:41.190 --> 00:01:42.812
Question?

27
00:01:42.812 --> 00:01:44.842
&gt;&gt; Have you looked into
Google's Material UI?

28
00:01:46.342 --> 00:01:53.442
&gt;&gt; Yes, not recently, I'd have to look
again, but that could be one to check out.

29
00:01:53.442 --> 00:01:59.083
I did work on Angular material a while
back, and yeah, there's some legacy there,

30
00:01:59.083 --> 00:02:02.829
maybe a reason why I didn't
include some of that stuff.

31
00:02:02.829 --> 00:02:07.493
But I know a lot of accessibility does
go into some of these libraries, so

32
00:02:07.493 --> 00:02:10.025
that one could be worth a look for sure.

33
00:02:12.329 --> 00:02:16.118
So some last training and
resources to send you on your way.

34
00:02:16.118 --> 00:02:19.302
There's probably more accessibility
stuff here than you ever bargained for.

35
00:02:21.056 --> 00:02:22.772
The third Thursday in May,

36
00:02:22.772 --> 00:02:26.728
every single year is
Global Accessibility Awareness Day, and

37
00:02:26.728 --> 00:02:31.266
there are talks and events and
all kinds of things, it's great.

38
00:02:31.266 --> 00:02:34.827
I think every day should be Accessibility
Awareness Day personally, but

39
00:02:34.827 --> 00:02:37.436
that's a big one for the community.

40
00:02:37.436 --> 00:02:41.415
If you're anywhere near Toronto,
Accessibility to Toronto is amazing,

41
00:02:41.415 --> 00:02:43.573
I don't know how they do it, honestly.

42
00:02:43.573 --> 00:02:44.681
They do meetups and

43
00:02:44.681 --> 00:02:49.893
a conference, they do a gaming
accessibility thing that's really neat.

44
00:02:49.893 --> 00:02:53.448
Also in Toronto is a company called Fable,

45
00:02:53.448 --> 00:02:59.100
they are a user testing group that
you can hire to test your product.

46
00:02:59.100 --> 00:03:04.123
It's like they have disabled testers
you can work with to test prototypes,

47
00:03:04.123 --> 00:03:08.752
pages, and they can help you highlight
issues if maybe you don't have

48
00:03:08.752 --> 00:03:12.100
people in-house to help you with that.

49
00:03:12.100 --> 00:03:15.854
And then I have a series of guidelines for
accessibility,

50
00:03:15.854 --> 00:03:20.615
some more courses, and a list of people
to follow if you're so inclined.

51
00:03:21.945 --> 00:03:26.247
I guess some parting wisdom or
love to send with you is just that

52
00:03:26.247 --> 00:03:30.195
accessibility can be a way
to stand out from the crowd.

53
00:03:30.195 --> 00:03:36.175
I know a lot of people are looking for
jobs right now, and, as a hiring manager,

54
00:03:36.175 --> 00:03:41.089
you have two candidates who are really
solid and one developer has

55
00:03:41.089 --> 00:03:46.479
more accessibility expertise,
that could be pivotal for teams.

56
00:03:46.479 --> 00:03:49.289
It's not gonna be the only thing,
but it could help.

57
00:03:51.189 --> 00:03:54.840
So some employers do prefer
accessibility certifications,

58
00:03:54.840 --> 00:03:58.630
once you start to get into
accessibility specialist roles, but

59
00:03:58.630 --> 00:04:02.906
I don't think you should need that for
a more general role.

60
00:04:02.906 --> 00:04:07.402
But find your strengths, find what
you're into, and yeah, I just went

61
00:04:07.402 --> 00:04:11.986
through a job search myself, so
I wanna send you some kudos, keep going.

62
00:04:13.726 --> 00:04:14.396
Another question?

63
00:04:16.096 --> 00:04:21.383
&gt;&gt; Do you ever use services like
Stark to maintain a history

64
00:04:21.383 --> 00:04:28.708
of accessibility reports over time
versus doing manual checks every month?

65
00:04:28.708 --> 00:04:32.900
&gt;&gt; Good question, yeah, Stark is amazing,
it has tools for Figma and other things.

66
00:04:32.900 --> 00:04:38.199
I haven't used it for that, but yeah,
kind of thinking about working with teams,

67
00:04:38.199 --> 00:04:43.045
and we'll get into some of this in
the enterprise accessibility workshop,

68
00:04:43.045 --> 00:04:47.891
but yeah, very manual tests are not
that repeatable, especially across,

69
00:04:47.891 --> 00:04:50.034
you have multiple team members.

70
00:04:50.034 --> 00:04:55.081
So, finding tools where you can share
results, have a repeatable process,

71
00:04:55.081 --> 00:04:59.134
that will become more important
as you do more of it.

72
00:04:59.134 --> 00:05:04.395
Yeah, I think there's very varied
maturity in how you approach that,

73
00:05:04.395 --> 00:05:09.141
I think some teams are just real
scrappy and kinda figure it out.

74
00:05:09.141 --> 00:05:11.598
Some teams are bigger enterprises and

75
00:05:11.598 --> 00:05:15.601
they need more elegant solutions
to those kinds of problems.

76
00:05:15.601 --> 00:05:18.617
So, I think a lot of the tools like AXE,

77
00:05:18.617 --> 00:05:23.104
they have whole product suites
around that type of thing.

78
00:05:23.104 --> 00:05:27.011
So I think if you're getting into
team management of accessibility,

79
00:05:27.011 --> 00:05:30.994
you might consider looking at one of
those more enterprise type tools.

80
00:05:32.384 --> 00:05:37.441
&gt;&gt; How about in your continuous
integration build pipeline or

81
00:05:37.441 --> 00:05:42.847
whatever, do you see testing
Incorporated there at all?

82
00:05:42.847 --> 00:05:47.585
&gt;&gt; Yes, definitely, and that we will get
into an enterprise accessibility as well,

83
00:05:47.585 --> 00:05:52.677
but with continuous integration, there's
some great opportunities to highlight it.

84
00:05:53.907 --> 00:05:58.083
I see like if you have test coverage for
accessibility and

85
00:05:58.083 --> 00:06:02.694
your teammate publishes a pull request and
it fails the tests,

86
00:06:02.694 --> 00:06:07.398
guess who has to go fix the tests
before they can ship their PR?

87
00:06:07.398 --> 00:06:13.055
So I think it really can be helpful for
catching stuff before it ships.

88
00:06:13.055 --> 00:06:18.210
For things like AXE, if you were
running AXE in your CI pipeline,

89
00:06:18.210 --> 00:06:22.993
kinda debatable whether you
wanna have those results fail or

90
00:06:22.993 --> 00:06:26.280
not, it kinda depends what they are.

91
00:06:26.280 --> 00:06:30.144
You might have some pre-existing
accessibility failures that you either

92
00:06:30.144 --> 00:06:34.260
have to ignore or you're just always
gonna fail builds, I'm not really sure.

93
00:06:34.260 --> 00:06:37.700
So, I think your feature
test that you write for

94
00:06:37.700 --> 00:06:43.634
your stuff that you know are reliably tied
to stuff that you actually can control,

95
00:06:43.634 --> 00:06:48.377
those tests should fail builds,
like keyboard tests and stuff.

96
00:06:50.237 --> 00:06:55.895
But, yeah, maybe not like a full
accessibility API, test API in continuous

97
00:06:55.895 --> 00:07:01.118
integration, I think maybe that's
more of like in your development,

98
00:07:01.118 --> 00:07:05.228
but different teams might
have different approaches.

99
00:07:05.228 --> 00:07:06.385
&gt;&gt; All right, thanks, Marcy.

100
00:07:06.385 --> 00:07:10.297
&gt;&gt; [APPLAUSE]

