WEBVTT

1
00:00:00.113 --> 00:00:03.667
So we'll start to get a bit
more technical now and

2
00:00:03.667 --> 00:00:08.621
apply things to actually go and
improve accessibility that we see.

3
00:00:08.621 --> 00:00:10.831
Our code base, we'll use React, but

4
00:00:10.831 --> 00:00:15.240
this stuff applies no matter what type
of a front end stack you're using.

5
00:00:15.240 --> 00:00:19.690
So you could be working with
the hottest new JavaScript framework.

6
00:00:19.690 --> 00:00:23.203
I really enjoyed Svelte recently.

7
00:00:23.203 --> 00:00:29.133
Speaking of data visualizations with D3,
you could be generating things that way.

8
00:00:29.133 --> 00:00:33.865
Or you could use Astro or
use GraphQL APIs or

9
00:00:33.865 --> 00:00:39.396
whatever the framework of
the week happens to be.

10
00:00:39.396 --> 00:00:44.272
If it generating a front end
that users are interacting with,

11
00:00:44.272 --> 00:00:46.632
accessibility is a concern.

12
00:00:46.632 --> 00:00:51.831
So maybe something you could do,
especially if you're newer to a framework,

13
00:00:51.831 --> 00:00:56.321
but maybe you're more familiar with HTML,
CSS, and JavaScript,

14
00:00:56.321 --> 00:01:01.127
an approach you could take would be
to do some prototyping upfront before

15
00:01:01.127 --> 00:01:03.445
translating it into a framework.

16
00:01:03.445 --> 00:01:07.973
That's something I do a lot when I
just need to tell kind of quickly in

17
00:01:07.973 --> 00:01:11.077
a lightweight manner,
is this going to work?

18
00:01:11.077 --> 00:01:15.701
Before I go and do all of the work
of integrating it into my stack,

19
00:01:15.701 --> 00:01:18.842
I might do a lighter weight version of it.

20
00:01:18.842 --> 00:01:19.787
Maybe I do use React.

21
00:01:19.787 --> 00:01:24.794
I like React, but just saying
that if you have constraints that

22
00:01:24.794 --> 00:01:29.800
it would benefit you,
you can consider doing some prototyping

23
00:01:29.800 --> 00:01:35.671
to just feel more free while you're
testing out an idea or an experiment.

24
00:01:35.671 --> 00:01:41.519
And whether your output is in HTML,
CSS, or in JavaScript,

25
00:01:41.519 --> 00:01:46.578
or more robust framework,
the basic always apply.

26
00:01:46.578 --> 00:01:48.959
So it really is about what gets rendered.

27
00:01:48.959 --> 00:01:54.023
Is it well structured using as many
default HTML elements as possible?

28
00:01:54.023 --> 00:01:58.053
Cuz there's a lot, so
what do I mean by well structured?

29
00:01:58.053 --> 00:02:04.133
So HTML provides structural semantics,
they're really helpful in screen readers.

30
00:02:04.133 --> 00:02:08.999
We saw earlier there were landmark
elements, and buttons, and forms,

31
00:02:08.999 --> 00:02:12.600
all of those elements that
are not divs have meaning.

32
00:02:12.600 --> 00:02:18.041
[LAUGH] As we'll learn about,
we did learn about the accessibility tree,

33
00:02:18.041 --> 00:02:23.414
and so that you might start to be able
to connect how tags become objects.

34
00:02:23.414 --> 00:02:28.589
It's a very robust process that,
if we use semantic HTML elements,

35
00:02:28.589 --> 00:02:33.689
we can help that out by actually
creating an accessible structure.

36
00:02:34.839 --> 00:02:40.653
So it's non visual, and it really goes
beyond the way that something looks.

37
00:02:40.653 --> 00:02:45.308
There are so many defaults these days,
fortunately,

38
00:02:45.308 --> 00:02:50.469
form elements are getting
easier to style here in 2023,

39
00:02:50.469 --> 00:02:54.230
we have some easier to
style form elements.

40
00:02:54.230 --> 00:02:58.409
Never thought I'd see it, I'm very
happy to see it, though, it's awesome.

41
00:02:58.409 --> 00:03:03.730
I think form elements being hard to style
are how the legacy of inaccessible stuff

42
00:03:03.730 --> 00:03:08.828
came about was because we were trying
to meet client, needs customer needs.

43
00:03:08.828 --> 00:03:13.971
We couldn't style it and
still use the default HTML element.

44
00:03:13.971 --> 00:03:19.082
Well, it's really hard to replace some of
that functionality because we get a lot

45
00:03:19.082 --> 00:03:24.725
for free with things like links and
select, trying to create a custom select.

46
00:03:24.725 --> 00:03:27.695
There's features in that component
that you might not even realize.

47
00:03:27.695 --> 00:03:29.383
So you have to recreate those.

48
00:03:29.383 --> 00:03:32.250
If you make your own version,
it can be done,

49
00:03:32.250 --> 00:03:36.633
just to say it can be done accessibly
as well, but you don't have to.

50
00:03:36.633 --> 00:03:41.823
If you can advocate for using the default
HTML element, pose it as, hey,

51
00:03:41.823 --> 00:03:46.680
we're gonna save time and money,
[LAUGH] you might be able to convince

52
00:03:46.680 --> 00:03:51.288
your teammates off of the heavily
styled customization ledge and

53
00:03:51.288 --> 00:03:54.413
just use the default thing, potentially.

54
00:03:54.413 --> 00:03:58.535
So I would recommend checking
out a Mozilla developer network,

55
00:03:58.535 --> 00:04:00.851
their list of HTML elements.

56
00:04:00.851 --> 00:04:04.030
I learned something new
every time I look at that.

57
00:04:04.030 --> 00:04:08.919
I'll even go and refresh my memory of, how
does that element or that attribute work?

58
00:04:08.919 --> 00:04:12.252
I've been doing a lot of stuff
with forms recently, and so

59
00:04:12.252 --> 00:04:15.314
I definitely went and
looked at the reference to go and

60
00:04:15.314 --> 00:04:19.615
make sure that I was aware of everything
available to me with the defaults.

61
00:04:22.134 --> 00:04:28.223
So when it comes to HTML, we wanna
use semantic HTML whenever we can.

62
00:04:28.223 --> 00:04:32.737
We also use generic HTML like divs and
spans as wrapper elements.

63
00:04:32.737 --> 00:04:34.834
They're great for styling.

64
00:04:34.834 --> 00:04:38.285
I do a lot of layout with CSS Grid and
Flexbox.

65
00:04:38.285 --> 00:04:41.729
And so,
I'm definitely adding generic elements

66
00:04:41.729 --> 00:04:45.835
to give the right structure to
match my layouts and things.

67
00:04:45.835 --> 00:04:49.944
But those sort of get ignored,
those divs are not going to be put in

68
00:04:49.944 --> 00:04:55.504
the accessibility tree, only semantic HTML
elements will, so we need a combo of both.

69
00:04:58.304 --> 00:05:03.558
So, I have kind of a funny graphic
here from South Park that says,

70
00:05:03.558 --> 00:05:06.153
a Marklar walks into a Marklar.

71
00:05:06.153 --> 00:05:09.002
Marklar ask the Marklar,
do you have any Marklar?

72
00:05:09.002 --> 00:05:12.620
The Marklar shakes its Marklar and
says no, we only have Marklar.

73
00:05:12.620 --> 00:05:18.614
That would basically be an analogue
to div soup all the way down,

74
00:05:18.614 --> 00:05:20.725
just like divs solid.

75
00:05:20.725 --> 00:05:22.233
So that's what we wanna avoid.

76
00:05:22.233 --> 00:05:24.827
Here's a screenshot of div soup.

77
00:05:24.827 --> 00:05:29.497
It's a long tree structure
of div div div div div.

78
00:05:29.497 --> 00:05:31.747
There's no accessibility information here.

79
00:05:33.037 --> 00:05:37.797
I see a div role button buried
in there that ARIA disabled.

80
00:05:37.797 --> 00:05:42.357
But it's a div,
it's not focusable from what I can tell.

81
00:05:42.357 --> 00:05:47.083
So it might as well just be a div cuz it
doesn't have all the other things that it

82
00:05:47.083 --> 00:05:47.900
would need.

83
00:05:47.900 --> 00:05:50.925
I think that might,
I see a role progress bar.

84
00:05:50.925 --> 00:05:52.093
[LAUGH] Otherwise,

85
00:05:52.093 --> 00:05:56.474
I think that might be the most divs
I've seen in one place in a long time.

86
00:05:56.474 --> 00:05:58.375
So I think we can do more than that.

87
00:05:58.375 --> 00:06:02.887
I mean, any web page is
probably gonna have a need for

88
00:06:02.887 --> 00:06:07.207
more semantic HTML, so
we should use what we can.

89
00:06:07.207 --> 00:06:09.494
So starting with headings,

90
00:06:09.494 --> 00:06:15.125
we can use h1 through h6 headings
to create an overall page outline.

91
00:06:15.125 --> 00:06:19.216
We wanna try and choose the right
heading level for the content,

92
00:06:19.216 --> 00:06:21.120
not based on the way it looks.

93
00:06:21.120 --> 00:06:25.662
So that's kind of pitfall
number one of what I see a lot,

94
00:06:25.662 --> 00:06:29.433
is you'll get class names or
heading styles,

95
00:06:29.433 --> 00:06:35.367
they're called h1 through h4,
whatever, you have a style guide.

96
00:06:35.367 --> 00:06:39.417
And the design just leads you down
this path of choosing the heading

97
00:06:39.417 --> 00:06:43.556
level based on the way it looks,
cuz that's in the design, right?

98
00:06:43.556 --> 00:06:46.541
Well, we need to pick the heading
level based on what the content is.

99
00:06:46.541 --> 00:06:51.288
So if there's an overall page
structure that we can slot this into,

100
00:06:51.288 --> 00:06:58.134
like h2 comes after h1, h3 comes after h2,
and it creates that structure, right?

101
00:06:58.134 --> 00:07:00.744
I think of it like in Microsoft Word,

102
00:07:00.744 --> 00:07:06.318
how there's an outline that you can make
with Roman numerals and Google Docs.

103
00:07:06.318 --> 00:07:12.433
Everything's indented and it all falls
under everything hierarchically.

104
00:07:12.433 --> 00:07:17.253
That's what headings will do,
they will create that structure so

105
00:07:17.253 --> 00:07:21.642
that if you can't see the screen,
you can still digest it and

106
00:07:21.642 --> 00:07:24.583
get an idea of the hierarchy of content.

107
00:07:24.583 --> 00:07:29.496
There was, at one time, an HTML5
heading algorithm that sort of has been

108
00:07:29.496 --> 00:07:34.901
haunting us because it was never really
implemented for assistive technology.

109
00:07:34.901 --> 00:07:39.900
The idea there was that you could
start h1s over again in excerpts, so

110
00:07:39.900 --> 00:07:43.808
they were more portable,
but it never really worked.

111
00:07:43.808 --> 00:07:48.309
So, we wanna scratch that,
[LAUGH] unfortunately, and

112
00:07:48.309 --> 00:07:51.622
have an overall page outline.

113
00:07:51.622 --> 00:07:55.981
So, one h1, we try and go in order,
just so that the content does kind of,

114
00:07:55.981 --> 00:08:00.082
you can tell from looking at just
the heading structure what's on it.

115
00:08:02.052 --> 00:08:04.283
So, landmark elements.

116
00:08:04.283 --> 00:08:06.240
Question?
&gt;&gt; So it might be related and

117
00:08:06.240 --> 00:08:08.234
feel free to find it if it's not.

118
00:08:08.234 --> 00:08:13.171
But I guess on a similar note when
you're using React components, or

119
00:08:13.171 --> 00:08:17.679
any kind of like UI library,
how do you figure out what a heading

120
00:08:17.679 --> 00:08:22.039
should be when you're trying
to make a reusable component.

121
00:08:22.039 --> 00:08:27.399
Because it feels, ell, if I placed
this heading here, it's an h2 for now,

122
00:08:27.399 --> 00:08:32.676
but then if I place it in this other part
of the UI that gets great, months from

123
00:08:32.676 --> 00:08:38.228
now and like I didn't anticipate any of
this, what heading level should it be?

124
00:08:38.228 --> 00:08:42.980
It feels like maybe the options like
polymorphic components where you just set

125
00:08:42.980 --> 00:08:47.233
it when you're using it, but
I don't know if you have any other tips?

126
00:08:47.233 --> 00:08:49.588
&gt;&gt; Yes, so great question.

127
00:08:49.588 --> 00:08:50.475
I'm glad you mentioned it.

128
00:08:50.475 --> 00:08:55.299
So, when you have to plug a component in
and you can't guarantee where it goes,

129
00:08:55.299 --> 00:09:00.515
I think the the option I've used for that
is to make the heading level configurable.

130
00:09:00.515 --> 00:09:03.511
So, being something you pass in.

131
00:09:03.511 --> 00:09:05.500
It would be nice if that was automatic.

132
00:09:05.500 --> 00:09:08.717
So I don't know of any tools
that are automatic like that.

133
00:09:08.717 --> 00:09:14.556
I mean, maybe Facebook has something like
that cuz they're huge and super advanced.

134
00:09:14.556 --> 00:09:18.800
But you if you can pass in
heading level to a component,

135
00:09:18.800 --> 00:09:23.598
you can have React kind of combine
the tag name you pass in, and

136
00:09:23.598 --> 00:09:28.880
you can generate elements based on
tag names dynamically that way.

137
00:09:28.880 --> 00:09:30.950
So that's one technique.

138
00:09:30.950 --> 00:09:36.530
There is an ARIA role of
heading with ARIA level.

139
00:09:36.530 --> 00:09:41.219
It's not great because then
you're putting ARIA on something,

140
00:09:41.219 --> 00:09:45.920
rather than using the default,
which is the h1 through h6 tag.

141
00:09:45.920 --> 00:09:48.907
And you'd still have to figure
out what level it had to be.

142
00:09:48.907 --> 00:09:52.392
The only thing it would save
you is not having to generate

143
00:09:52.392 --> 00:09:54.477
an element kind of dynamically.

144
00:09:54.477 --> 00:09:57.213
But I think if you're gonna do one,

145
00:09:57.213 --> 00:10:01.331
you might as well use
the default HTML element first.

146
00:10:01.331 --> 00:10:04.591
But yeah, I'd say probably
passing in the heading level.

147
00:10:04.591 --> 00:10:06.825
It's not that elegant.

148
00:10:06.825 --> 00:10:13.058
I guess if you had some way to
magically just read the overall page,

149
00:10:13.058 --> 00:10:16.840
it would have to be
done at compile time or

150
00:10:16.840 --> 00:10:21.319
something, and
that seems maybe too magical.

151
00:10:21.319 --> 00:10:25.884
It might be not the most elegant to put
pass in tag names when you're using them,

152
00:10:25.884 --> 00:10:27.736
but it's also not too magical.

153
00:10:27.736 --> 00:10:31.960
So it's easy to grok, I think that code

154
00:10:31.960 --> 00:10:36.577
that's easy to understand has benefits.

155
00:10:37.974 --> 00:10:38.474
Okay.

