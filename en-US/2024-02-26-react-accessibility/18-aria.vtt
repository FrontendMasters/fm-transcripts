WEBVTT

1
00:00:00.071 --> 00:00:02.124
So we've looked a lot at HTML.

2
00:00:02.124 --> 00:00:03.453
Let's talk about ARIA.

3
00:00:03.453 --> 00:00:06.113
We've already kind of been
touching on ARIA quite a bit.

4
00:00:06.113 --> 00:00:11.102
We've looked at some ARIA attributes,
we've seen some roles,

5
00:00:11.102 --> 00:00:14.378
but let's dive further into what is ARIA.

6
00:00:14.378 --> 00:00:18.331
So ARIA stands for
Accessible Rich Internet Applications.

7
00:00:18.331 --> 00:00:21.576
It's a specification, it's a standard,

8
00:00:21.576 --> 00:00:26.673
it's a way to add accessibility
information through your web apps.

9
00:00:26.673 --> 00:00:32.404
I think historically,
the idea of it was for things like XML.

10
00:00:32.404 --> 00:00:34.422
It is pretty useful in SVG.

11
00:00:34.422 --> 00:00:39.160
I don't know how useful it ever
was with XML, but in HTML,

12
00:00:39.160 --> 00:00:44.701
it's pretty embedded in everything we do,
and we'll look at why.

13
00:00:44.701 --> 00:00:48.576
The current version of ARIA
as of right now is 1.2.

14
00:00:48.576 --> 00:00:54.753
And so this link for
the way ARIA specification, ta-da.

15
00:00:54.753 --> 00:00:55.598
There it is.

16
00:00:55.598 --> 00:00:57.497
We've already seen it once or twice.

17
00:00:57.497 --> 00:01:02.892
I often have this open in a browser tab or
at least an autocomplete click

18
00:01:02.892 --> 00:01:08.666
away because it has so much information
in it that is relevant and helpful.

19
00:01:08.666 --> 00:01:10.969
But it's also a big scary spec document.

20
00:01:10.969 --> 00:01:16.081
So you will be forgiven if you're
not totally excited to go and

21
00:01:16.081 --> 00:01:18.648
read the ARIA specification.

22
00:01:18.648 --> 00:01:20.533
But just know that it's there and

23
00:01:20.533 --> 00:01:24.783
it is the basis of a lot of the technical
aspects of what we're discussing.

24
00:01:27.287 --> 00:01:30.286
But it shouldn't be the first
thing you reach for,

25
00:01:30.286 --> 00:01:32.394
it is somewhat of an advanced tool.

26
00:01:32.394 --> 00:01:38.727
I have an image from The Simpsons of Homer
holding up a big glass of beer going,

27
00:01:38.727 --> 00:01:44.389
to ARIA the cause of and solution
to all our accessibility problems.

28
00:01:44.389 --> 00:01:49.342
And that's because it, for
everything that it helps us with,

29
00:01:49.342 --> 00:01:53.179
it also can make things
very potentially worse.

30
00:01:53.179 --> 00:01:56.616
If you slap a bunch of ARIA on
stuff without knowing what it does,

31
00:01:56.616 --> 00:01:58.090
it can be pretty terrible.

32
00:01:58.090 --> 00:02:04.092
Like the thing we just fixed with
inert was to counter an ARIA issue,

33
00:02:04.092 --> 00:02:10.327
where ARIA hidden was on something
that had focusable elements in it.

34
00:02:10.327 --> 00:02:14.752
And when you put the ARIA on your markup,
if you don't ever test it, or

35
00:02:14.752 --> 00:02:19.865
don't ever, it isn't caught by something
like Axe, you'll just never know.

36
00:02:19.865 --> 00:02:23.927
And someone with a screen reader will come
in and use your site, and it's terrible.

37
00:02:23.927 --> 00:02:25.824
[LAUGH] And you had no idea.

38
00:02:25.824 --> 00:02:30.481
So that's kind of why it has this
reputation of being the cause of and

39
00:02:30.481 --> 00:02:33.844
solution to all of our
accessibility problems.

40
00:02:33.844 --> 00:02:36.648
And I have to give kudos to WebAIM.

41
00:02:36.648 --> 00:02:41.409
The people who gave us the screen reader
survey and another project called

42
00:02:41.409 --> 00:02:46.257
the web a million where they scandal
the top homepages for accessibility.

43
00:02:46.257 --> 00:02:50.791
They have this awesome blog post about
how ARIA is basically the cause and

44
00:02:50.791 --> 00:02:52.513
solution of our problems.

45
00:02:52.513 --> 00:02:54.916
There's just cracks me up.

46
00:02:54.916 --> 00:03:00.880
But fortunately, our tooling like as you
saw with AX, it's really getting awesome

47
00:03:00.880 --> 00:03:06.089
at telling us when we have goofed
about something that we don't realize.

48
00:03:06.089 --> 00:03:10.444
So HTML and
ARIA work very closely together.

49
00:03:10.444 --> 00:03:13.942
We've seen some of this already,
like with roles.

50
00:03:13.942 --> 00:03:19.327
The built-in roles, like for
links, buttons, form elements,

51
00:03:19.327 --> 00:03:24.340
landmarks, those roles that
come with those element names.

52
00:03:24.340 --> 00:03:29.363
They are ARIA roles just like the ones
that we bolt on with the role attribute,

53
00:03:29.363 --> 00:03:32.687
is just some are built in
that are implicit roles and

54
00:03:32.687 --> 00:03:35.572
explicit roles are the ones
that we bolt on.

55
00:03:35.572 --> 00:03:39.319
So we should try and use the implicit,
built in stuff first.

56
00:03:39.319 --> 00:03:42.905
Support tends to be a little bit better.

57
00:03:42.905 --> 00:03:45.957
Yeah, there's other functionality
that comes along with those.

58
00:03:45.957 --> 00:03:51.158
Like, if you have a button element,
it's gonna give you a lot of behavior for

59
00:03:51.158 --> 00:03:55.173
free, whereas a button role is
only gonna bolt on the role.

60
00:03:55.173 --> 00:03:59.828
There's other things that you have to add.

61
00:03:59.828 --> 00:04:04.999
So yeah, built in versus bolted on.

62
00:04:04.999 --> 00:04:08.238
So which docs should you use?

63
00:04:08.238 --> 00:04:13.799
The ARIA standard from the W3C
is a good source of truth.

64
00:04:13.799 --> 00:04:16.796
But again,
it's kind of not the most approachable.

65
00:04:16.796 --> 00:04:22.242
So MDN or
Mozilla Developer Network is awesome.

66
00:04:22.242 --> 00:04:24.959
They have great ARIA docs.

67
00:04:24.959 --> 00:04:29.375
ARIA, as I mentioned earlier today,
is also developed in the open on GitHub.

68
00:04:29.375 --> 00:04:33.974
So you can go and see, how are they
even coming up with these standards?

69
00:04:33.974 --> 00:04:39.074
Which browsers and
screen readers are still causing issues?

70
00:04:39.074 --> 00:04:41.634
Or is there an issue with it?

71
00:04:41.634 --> 00:04:45.143
And so that's pretty fascinating
to see how that work gets done.

72
00:04:45.143 --> 00:04:50.583
And you can definitely learn things about,
like I've opened up issues on ARIA or

73
00:04:50.583 --> 00:04:55.863
not open them, but looked at them when I
use a certain role or certain attribute

74
00:04:55.863 --> 00:05:01.243
and it's just not working quite right and
I'll go and search it and the issues.

75
00:05:01.243 --> 00:05:02.935
And there will already be
a discussion about it.

76
00:05:02.935 --> 00:05:06.616
And I'm like, okay, that's expected.

77
00:05:06.616 --> 00:05:07.674
That's the way it worked.

78
00:05:07.674 --> 00:05:10.205
And I think the example I saw was,

79
00:05:10.205 --> 00:05:16.098
they designed ARIA in a certain way
because of how people use screen readers.

80
00:05:16.098 --> 00:05:19.806
I had a misconception about how
screen readers are used and

81
00:05:19.806 --> 00:05:24.511
ARIA was designed more for people who
are actually using screen readers.

82
00:05:24.511 --> 00:05:29.349
So sometimes our developer biases,
lead us down that path and

83
00:05:29.349 --> 00:05:32.801
we can go, okay, I just didn't know.

84
00:05:32.801 --> 00:05:36.402
So it can be helpful for
learning about that.

85
00:05:36.402 --> 00:05:41.811
Web.dev also has a ton of ARIA
information from the Google team.

86
00:05:41.811 --> 00:05:46.674
And HTML5 Doctor, I think it's
a little bit dated at this point, but

87
00:05:46.674 --> 00:05:51.884
it historically has had really great
info about how elements work in HTML.

88
00:05:51.884 --> 00:05:57.054
And the HTML5 heading algorithm,
they wrote about that.

