[00:00:00]
>> I think what's left is the image alt text, and these aria hiddens. So this one, the goal of aria-hidden is to hide something from the accessibility tree. So the technique on this component that's auto rotating, Is that that there's three slides here. And when you go through the carousel, only one is active at a time.

[00:00:27]
So the technique that was used was to put aria-hidden on the ones that are off screen. But the problem is there's links in there. And so you can tab onto the links, but they aren't gonna have any accessibility information. So that's why Axe is complaining about it. So we're gonna use inert instead, which is an HTML attribute that's been proposed.

[00:00:50]
It's totally awesome and it will solve this problem. It adds aria-hidden, and it will go into any links or buttons or anything in that region, and it'll disable them with tabindex for us. So let's do that. Okay, so instead of aria-hidden, we can even just leave that there right now.

[00:01:09]
I'm gonna say ref, cuz we're in React. So I'm gonna pass it a node. And within here, I might need to cheat [LAUGH] this is kind of hard to remember. So React currently has an issue with inert that you have to work around. So we're gonna work around it.

[00:01:31]
I'm gonna go up here. We're gonna make a function called setInert, and we're gonna call it for each one of these nodes. And when one of them is current, we'll turn the inert attribute off. When that slide is active, we'll remove the attribute. It's a Boolean attribute, either it's there or it's not.

[00:01:54]
Okay, so I'm gonna say setInert. Thank you, autocomplete. This is our first call of this, it's the first slide, so I'm gonna pass in the node from the ref API, and I'm gonna just pass it a number. And the function will say, all right, if you match this index, set this value.

[00:02:14]
And we have some state in React that's always keeping track of which slide is current, so we can piggyback on that. Let's do the next one. It is ref, node, setInert, keeps trying to autocomplete for something that I did not tell it. So it's going to complain until we go and write this function.

[00:02:39]
And I only had three of these, so I didn't make it too dynamic, I just hard coded these in here. setInert, slide 3. So our function that we are going to use is called setInert. It takes the node from the React ref, and this is a way to get React to spit out HTML that it doesn't know about, cuz it's valid HTML, but React is not supporting it yet.

[00:03:07]
So it looks for the slide number, which we are tracking with React state. So current slide number, anytime you click those buttons or if it's animating, it will increment that and then reset back to beginning, that's how it spins around. And what it does is it moves that element using translate CSS.

[00:03:28]
So it will translate its x position depending on what slide number. So we're gonna set the inactive ones. We'll set the attribute inert, just takes an empty string to get it to show up as a value. And then when that slide is active, we remove the attribute. So let's save this and go see how it looked.

[00:03:52]
So I'm gonna inspect. So let's see if this, I think it worked. So aria-hidden, I need to take off, actually. One more thing. I am going to delete those cuz it looked like inert was working, but these old attributes were not, and inert will cover that, so we don't need both.

[00:04:20]
Okay, so here we go, we have our first list item. That's the one that's visible. And if I scroll, you can see the other two, they're physically off to the side. So if I click this button, and it slides the next one in, now this one has aria-hidden of false, and inert's gone.

[00:04:42]
And then as we go through again, that will change this. So what that's doing for us is handling any links that were inside of that. So we just don't have to do anything. We don't have to go step through the DOM and change tabindex on things, it's a huge pain.

[00:04:58]
But we're keeping screen readers from tabbing on elements that there would be ghost links. So kind of a hairy problem that inert makes really easy for us. One thing I will say is that I'm using a polyfill so that inert, if we're not in Chrome, or it's supported, say you're in, I don't know, Edge or I guess Chromium.

[00:05:23]
But any browser that doesn't support inert yet, this will still work, because there's a polyfill. So let's go run Axe again, see if we made it happier, if there's anything we missed. The alt text, and it is still mad. There's some different elements that had aria-hidden on them.

[00:05:45]
So this is a different element. It's these buttons. So those ones should not have aria-hidden on them at all. This is not the same fix for these. So these ones, for some reason, had aria-hidden of true on them but they're still focusable, cuz they should be usable, right?

[00:06:02]
We can tab onto them, we should be able to use a screen reader with them, and aria-hidden is stripping away information that we actually need. So we can go remove that and our alt text. So those buttons were in the right component. Here's that aria-hidden, let's get that out of there.

[00:06:23]
There's one more down here, get that out of there. And those were real examples, too. I borrowed inspiration [LAUGH] from a real website. So some of these are made up, some of them are real that I just found in the wild. So our code bases can be doing all kinds of things that we may or may not have intended.

[00:06:42]
But if we test it and then we can go and fix stuff, we can make it better. So we've got that one, I think our image alt text will be the last bit. So this is somewhat dynamic. The goal is to make a component that you can just feed it different sets of data, It'll be, voila, show you a gallery.

[00:07:02]
But it's kind of half-baked, I will admit. So we do have the capability of pulling in alt text. So let's look at what our dataset looks like. We have an image that we're mapping over a series of gallery images. So these images, Come from some image data that gets passed in.

[00:07:27]
I'm using TypeScript, so I can actually go and see some of the structure of this data object. I'm a total TypeScript convert, I'll admit it. It's awesome [LAUGH]. I held out for so long. I did not love it, but for stuff like this, you can go down the path and see, does my data already have alt text in it?

[00:07:49]
It might or it might not, and you can have a conversation about where's that data gonna come from. Question?
>> Why did you have to use the ref attribute?
>> Great question for the inert. So let me show you, kind of glossed over the fix for that. We'll come back to the alt text.

[00:08:08]
So that was in the header. I'll show you why. So inert, It's this right here. Property inert does not exist on the HTML. So this is a TypeScript error. Basically saying that React and TypeScript don't think that's a real attribute, even though it is. So, like any developer, I went looking around to go and see, can I change my TypeScript config?

[00:08:39]
I tried all of it. There's supposedly a work around for this by defining a TypeScript, creating a definition for this so React knows about it, I couldn't get it to work. So I think when you want to have an end result of your markup being crafted in a certain way.

[00:09:01]
My own personal view is, do it [LAUGH] by any means necessary, and I had to use the ref API to do it. It's not quite as elegant because I'm having to go and call DOM APIs. So this node set attribute, that's a bit of a smell. That's not the ideal way to do it.

[00:09:20]
The React way, and why I love React, is that normally I would have just swapped out inert for aria-hidden with our original code, and it would have just been one and done, easy. But it just didn't work. So if you wanna learn more, here is the discussion in React not supporting inert.

[00:09:43]
People are a little cranky about it, understandably so. I don't know what's gonna happen with it. My hope is that they'll just fix this and then we can use inert, maybe with a polyfill still. But not have to do all this hacky, ref, node stuff. That is a really great question, though, I'm glad you asked it.

[00:10:02]
So keep an eye on this one, I've got it in the code base. I'll make sure it's in the slides, too, cuz it's something we'll have to keep checking on, cuz this is so helpful. For modals, I mean, even something as small as this little announcements carousel, it can be a very helpful tool that we should be able to use, cuz it's valid, it's in the HTML standard.

[00:10:26]
So yeah, that's why. Question?
>> Speaking on TypeScripts, how useful do you think it is for catching some basic accessibility issues? Because I know for the example you were showing a little bit earlier where we defined the property using the wrong name. That feels like something that TypeScript would be able to catch, but I don't know from your experience how reliable that is?

[00:10:50]

>> It usually can. So it sort of makes me wonder about the tool set of how the site was, the original, [LAUGH] the site that I was inspired by. You can kind of learn, I don't know, some interesting things about codebase just from playing with it a lot.

[00:11:06]
And so I wonder, I do think that some tools would be able to catch it. Probably the ESLint plugin for JSX, I bet that would've caught it. Cuz, yeah, a lot of these things, it is surprising to see some of them because we have a lot of tools that we'll point it out in development, cuz that would be ideal.

[00:11:29]
Yeah, and things like, I mean, this inert example, That is potentially saving us from something really tricky. I just happen to know that it's shouldn't be failing. So that's where it gets a little tricky, is that valid? Can I use that? You have to dig in a little bit more.

[00:11:52]
And if you read that issue or the pull request on React, there's some grumpy developers in there going, it's 2023 and we should be able to use this. You can kinda get the gist that it should be something that should be in there, but something like aria-role, that's never gonna be valid.

[00:12:10]
So I think the tooling can potentially save us from stuff, but then here's the trade off, is that it's a little bit too strict sometimes. But, yeah, so inert. And if you need to do things that React and TypeScript aren't very pleased about, the ref API, you can do some trickery here.

[00:12:36]
Use effect and the cleanup function that comes with it can also be little back doors to try and use some DOM APIs. I've done that a lot for, when you click outside to close something. You have a component that you wanna be able to click outside of it and have it collapse things.

[00:12:54]
You can use use effect and document, add event listener to mount and unmount some events in the component. So we can kind of get little escape hatches in React, but you definitely wanna use caution so that you're outputting valid markup and you're not creating any memory leaks. Cuz I think that's some of the risks with some of this stuff.

[00:13:18]
Cool, image alt text, that's our last bit. So we were talking about TypeScript, trying to figure out what data we have available to us. So our image data, we are using the gallery images. So I wanna go deeper into where's that type. So I could go into my imageData, galleryImages, comes from image, and it does have an alt in this type.

[00:13:54]
And so we happen to be looking at TypeScript, I think when you're working with Teams, you could ask a person that [LAUGH] you're working with, the code might not always tell you, or maybe TypeScript is just too much, I totally understand that. Wherever you have a source of information of where the image asset's coming from, you could ask about alt text kind of in that same realm.

[00:14:16]
You sometimes just have to make it up. Write the alt text, that's not the best, but better than none. But for this, we should get alt text. So our data is coming from a file. So here's where this comes from, it is strongly typed, which is really nice I've found, but our gallery images do not have alt text.

[00:14:46]
So if this was coming from a back-end API or something, I probably wouldn't be able to edit that. There is alt text for the top image, the main image, so we could pull that in. And every image under that, I guess that would be a conversation to be, hey where's the rest of the alt text gonna come from?

[00:15:07]
And I'll tell you what the actual implementation had, it had that top-level alt text for every single image. So they wrote it in a way that was generic enough, but I guess they thought it could apply to every single image. It's not very informative, if you're blind and you're trying to learn about a product, you kinda wanna know what capabilities it has, how are they showing it, so that's not a very accessible solution.

[00:15:32]
But this main image, at least, so this is a chakra image component. The ones down below in the gallery are just plain HTML elements. They have pretty seamless APIs for the props. So this image source, not all caps, I can say alt, and then I could pass it imagedata.mainImage.alt.

[00:16:05]
And it has it, so I can bring that in. That's only gonna solve it for this top one. So I think what I was saying the real site did was they just used the same alt text. So if you needed to do something, you could do that in a pinch, while you also go have a conversation with your team about where's the real alt text gonna come from.

[00:16:31]
Hopefully you can get a better answer. But this is kind of an example of how some things can't be caught with automated tools. We caught that there wasn't an alt text present, but it would be fine with this, let's go see what this looks like, actually. We'll go over to the browser.

[00:16:47]
I'm gonna rerun scan. We fixed everything. It's like, all right, cool, except we used the alt text for one image for every image. So that's not that great. Let's see what the images are. So there's a detail, close up of the colors, there's a handle on top, you can see this cute dog goes on a stand up paddle board.

[00:17:10]
I mean, there's so much detail missing, right? So it kind of illustrates that we can only fix so much with code. There's other conversations that we have to have, and it has to be planned for. We're code technicians, we can do some things to push pixels around and add labels, but it needs to be a requirement too.

[00:17:35]
So just know that it's not all on you. We need our teams to support us in getting the right content into the right place.

