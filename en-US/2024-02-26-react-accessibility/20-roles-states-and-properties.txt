[00:00:00]
>> Roles, states, and properties, these are the building blocks of ARIA. So all of the attributes that are defined in the ARIA specification are roles, states, or properties, such as role button or aria-hidden of true. So roles are pretty straightforward in that they are, what does the thing do?

[00:00:23]
Is it a button, is it a checkbox? So as I mentioned, the button element has an implicit role of button. The role of button will bolt it on. And in the accessibility tree's view, that's seamless. It's pretty well supported. I mean, I think you can do that pretty reliably.

[00:00:46]
But div role button is not the whole picture. So that's why we say use button first. So why would you even use that? It would be like, if for some reason, you're building a custom component and you can't use HTML. I mean, it'd better be a compelling reason.

[00:01:03]
But there's so many constraints that we deal with in the real world, but I'm sure it's come up. I mean, it could be that you have really annoying old styling that you can't get rid of, or something. That's some technical debt that I think would be worth facing, but sometimes we have constraints.

[00:01:24]
So, I can think of another example. I worked on a big, it was actually a desktop application that output widgets. So it was outputting Web widgets that you could embed, and it exported divs for buttons. And the fix in the actual desktop software application to output a button element was non-trivial.

[00:01:48]
I wasn't like, hey, I'm just gonna go in and swap that element out. No, it was old back-end code to generate button elements. So yeah, we definitely put an issue in the backlog to do that work. But in the meantime, are we just gonna let button elements be divs?

[00:02:07]
No, I bolted on a button role, and tab index, and a keyboard event, and did the whole song and dance. Well, we kinda did both things. So that might be the solution if for some reason, you're like, we can't use buttons right now. We are doing the work to upgrade our infrastructure so that we can.

[00:02:24]
But in the meantime, maybe you bolt on a button role and all of the other parts. So when you're checking support for an ARIA role, state, or property, or you're wanting to use them, you should check support. So for something like aria-autocomplete or aria-drag where you're like, isn't there an ARIA attribute for x or y that I saw on the ARIA spec or I remembered at one time?

[00:02:52]
It's good to do some research on it. So the first site I would recommend is called Accessibility Support or a11ysupport.io. This is a community effort to basically crowdsource. It's like a CanIUse.com for ARIA attributes. So I think the example I had was aria-autocomplete. Yikes, that's a no-go. Is it supported?

[00:03:21]
Across the board, it's either none or some partial support. So I'd say sorry, aria-autocomplete attribute, that's just not gonna happen. What would be another one? I guess aria-drag, I don't think that's a thing. Aria-dropeffect, yeah, that one's not documented and probably not supported. I'm surprised about aria-hidden. That's actually pretty well supported, but there's no data on it.

[00:03:52]
So that's still kind of interesting. Let's see, what would be another one? Aria-label, all green, all good, supported, pretty reliable. You have to use aria-label on the right role. You can't put it onto a div, but that's not a support issue. That's just a technical requirement. And it's interesting they put screen reader support, voice control support, aria-labelledby, so this is some really helpful data.

[00:04:26]
Another one I've used this for is aria-expanded or aria-haspopup, so some of these things that we put on custom, little drop-downs and things. Support's pretty good, but we can go in and read more. What are the things that it's not passing? Simple trues or false seem pretty good, aside from narrator Orca, which is Linux, or Android TalkBack.

[00:04:55]
I could go test in some of those, if I was really concerned. So talking about how to prioritize, this is one direction I could go in to say, all right, I wanna use this ARIA attribute to communicate the state of this component. I looked it up on accessibilities port I/O and it looked green across the board, except for Narrator and Edge.

[00:05:18]
I'm gonna go test over there and see what happens. So that's pretty cool. I mean, you should test it elsewhere too. But this is kind of helpful data to digest and apply. So a11ysupport.io, and they are community driven, so I'm sure they would love contributions. And then testing it in screen readers, cuz that's where the impact is really gonna be felt, is in assistive technology.

[00:05:46]
And that's also why it gets forgotten or screwed up, is that I think developers, it's so easy to add ARIA, but then the testing step gets missed. So we wanna make sure we're testing it, or just don't include it at all. I learned that kind of early on in my career, that I could make it a lot worse without realizing it.

[00:06:08]
So yeah, ARIA, you should just kind of accept or remember that it should come with a bit of caution, [LAUGH] or some testing time on your calendar. And then you can read up on mailing lists like the ARIA GitHub. The NVDA GitHub is really great. That's where they developed the Windows screen reader, NVDA.

[00:06:29]
It's open source. It is a treasure trove of information over there, especially for Windows issues that if you're primarily a Mac developer and you start to test on Windows, you can dispel some misconceptions just by reading the NVDA GitHub. Cuz somebody's probably had the same question as you.

[00:06:49]
And you can go and read, and it is very helpful. And then the WebAIM email discussion list, they have decades, I wanna say, I don't know how many years of archives. But they have email archives from a very long time ago that have discussions from people who work on browsers, work on screen readers.

[00:07:10]
The accessibility community includes people who developed all of these specs and all of these tools. It's really cool that there's answers from people that are so informed and instrumental. So you can use ARIA in your CSS selectors. It's a pretty cool technique to do, I guess, depending on how your styling is generated.

[00:07:34]
But like any attribute selector, you can match your CSS to certain ARIA. So for example, if I have a custom role of checkbox, sure, I could add a class, or an ID or something. I could also just match it based on whether it has a role. I've done this when I need to differentiate certain inputs from other inputs.

[00:07:58]
I'll end up using these attribute selectors. But the ARIA ones also, I could style a disabled checkbox that way. Increasingly, a lot of codebases are using things like Tailwind, so you might not have these types of selectors. But Tailwind does a pretty good job of incorporating accessibility into what they're doing.

[00:08:23]
Love it or hate it, they are at least making it possible for us to create similar experiences. I didn't ever think I would be a Tailwind person, by the way, just a little side note. But it's been kind of awesome. It does get in my way, though. [LAUGH] Okay, so another example could be styling off of aria-expanded.

[00:08:44]
That's another one of those states. If it's true or false, you can change how it's styled. Question?
>> What about hidden anchor elements for screen readers like skip to main content and skip navigation?
>> Yes, so the question was about skip links. We are gonna talk about skip links in the next section.

[00:09:07]
So with those, we actually don't want them to be hidden. We wanna make them usable by sighted keyboard users, too. So I think there used to be an approach to skip links where we would put visually hidden on them for some reason. And let's just get that out of there, no more of that.

[00:09:26]
I don't know where that came from. But skip links are super useful when you can see the screen and you wanna skip around, like if you can't use a mouse. We actually would benefit from some skip links on these slides. So yeah, we wanna make them visible, but we will talk about skip links a little bit later on.

[00:09:47]
All right, so accessible names and descriptions, ARIA brings with it a pretty foundational concept here. And we've already seen some of it. Accessible names apply to links, buttons, form controls, images, tables, field sets, legends. Anything that has what we call a label, quote-unquote, has a technical term of accessible name.

[00:10:14]
So if you hear that, that's what that is. It's basically the label for something. And only certain elements can be labeled. You can't put aria-label on a div, unless it has a certain role on it. But that's what that concept is. There's also the concept of an accessible description, that if something has a label and a title, the title will be read kind of after the initial text, after a bit of a delay.

[00:10:39]
And that's what's called an accessible description. Title will do it, aria-describedby will do it. They're configurable on the screen reader though, so you don't wanna count on descriptions always being there. So aria-label, aria-labelledby, aria-describedby, you can label things. And we've seen some of this already, but I can bolt on a label pretty easily.

[00:11:05]
The risk with aria-label sometimes, and I saw this in a codebase recently, is people set it and then they forget it, and it's not relevant text anymore. So I have a slight preference for aria-labelledby, cuz it will just always stay up to date with whatever. If this All About Wombats heading is visible and it gets out of date, that'll probably get fixed.

[00:11:26]
But then the accessibility connection is still there. It's just gonna programmatically point to that, so I think that's pretty awesome. And then aria-describedby, well, it's very similar to labelledby. It just creates that description instead of a name. So as we saw in the Chrome DevTools, that will show us which thing wins.

[00:11:51]
So when we have multiple, like this tiny screenshot has aria-label, it has title, placeholder, maybe more than one title. I'm not really sure what's happening there, but we can see the description is helper text. The name is text, on this very generic example. But that tool is excellent for helping you see which thing wins, because something has to win.

[00:12:18]
And in the Enterprise Workshop also, we are going to dive way deeper into this topic. It gets pretty diggy.

