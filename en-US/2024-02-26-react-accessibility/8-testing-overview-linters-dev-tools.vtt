WEBVTT

1
00:00:00.000 --> 00:00:03.569
So some screen reader stuff,
you can dive way deep in this obviously,

2
00:00:03.569 --> 00:00:05.212
we just scratched the surface.

3
00:00:05.212 --> 00:00:09.681
What I really want you to know,
kind of going forward, are some tips for

4
00:00:09.681 --> 00:00:10.513
debugging.

5
00:00:10.513 --> 00:00:15.210
So screen reading might be
one aspect of debugging.

6
00:00:15.210 --> 00:00:21.161
So debugging, you could also
call web accessibility testing.

7
00:00:21.161 --> 00:00:23.118
It's something all devs should do.

8
00:00:23.118 --> 00:00:26.305
It's regular automated testing or

9
00:00:26.305 --> 00:00:30.985
learning concepts about security or
performance.

10
00:00:30.985 --> 00:00:35.561
I think accessibility is even more
foundational than some of those things

11
00:00:35.561 --> 00:00:40.602
because of the direct impact on how our
user interfaces affect people's lives.

12
00:00:40.602 --> 00:00:43.695
I guess yeah,
all of these concerns are important.

13
00:00:43.695 --> 00:00:48.879
But I think accessibility testing should
be part of your regular workflow.

14
00:00:48.879 --> 00:00:53.414
And once you get in the habit of
opening up the tools, testing it,

15
00:00:53.414 --> 00:00:57.703
hopefully, it will just lodge in
your mind like it has for me so

16
00:00:57.703 --> 00:01:03.745
that it just becomes a matter of habit of,
okay, I'm going to test with the keyboard.

17
00:01:03.745 --> 00:01:07.235
Okay, I'm going to test
with the axe extension.

18
00:01:07.235 --> 00:01:12.615
So that's the first step I take is, I use
my tab key to navigate through a page.

19
00:01:12.615 --> 00:01:13.821
It's as simple as it sounds.

20
00:01:13.821 --> 00:01:21.290
You hit tab and tab through things
you see, can I reach and navigate?

21
00:01:21.290 --> 00:01:24.723
Or reach and operate every
interactive control on a page.

22
00:01:24.723 --> 00:01:29.063
So if a mouse user can click on it,
as a keyboard user,

23
00:01:29.063 --> 00:01:31.961
I should be able to do the same task.

24
00:01:31.961 --> 00:01:37.237
It might not be the exact same element,
I might have a click event on a wrapper

25
00:01:37.237 --> 00:01:42.186
element or something that only mouse
users use, but then within that,

26
00:01:42.186 --> 00:01:47.488
I have a focusable link, or a button,
or some other way to do the same thing.

27
00:01:47.488 --> 00:01:51.987
So I wanna be able to accomplish
every task as a keyboard user.

28
00:01:51.987 --> 00:01:56.397
And if you ditch your mouse completely,
like just don't use it for a day,

29
00:01:56.397 --> 00:01:59.458
maybe you could put some
paper over your trackpad or

30
00:01:59.458 --> 00:02:02.750
it seems a bit extreme, but
you know what I'm saying?

31
00:02:02.750 --> 00:02:07.937
If you can have a process where you
cannot bail out and use your mouse,

32
00:02:07.937 --> 00:02:12.782
you're probably gonna find some
issues that need to get fixed.

33
00:02:12.782 --> 00:02:16.991
Yeah, because it's pervasive, but
it's something we can address and

34
00:02:16.991 --> 00:02:17.888
a lot of cases.

35
00:02:17.888 --> 00:02:20.498
So can you reach and
operate every control?

36
00:02:20.498 --> 00:02:23.087
Can you see where you are on the screen?

37
00:02:23.087 --> 00:02:25.627
Is there a focus outline?

38
00:02:25.627 --> 00:02:28.025
We have the default blue.

39
00:02:28.025 --> 00:02:32.764
I will say the slide materials that we
have right now, the whole sidebar is

40
00:02:32.764 --> 00:02:36.906
a series of components that I
really want to contribute back to.

41
00:02:36.906 --> 00:02:40.651
It's not exactly how I want
the keyboard accessibility to be.

42
00:02:40.651 --> 00:02:43.801
So sometimes you have to
go open up an issue or

43
00:02:43.801 --> 00:02:47.718
a pull request on an open
source library and say, hey,

44
00:02:47.718 --> 00:02:52.681
can we make this configurable or
can I just contribute a fix for this?

45
00:02:52.681 --> 00:02:55.961
That's probably what I'll do.

46
00:02:55.961 --> 00:02:59.440
Because when these menus over
here on the left are closed,

47
00:02:59.440 --> 00:03:04.197
we should be able to skip by them, it's
It's actually forcing me through every

48
00:03:04.197 --> 00:03:07.340
single link in the sidebar,
which can get tedious.

49
00:03:07.340 --> 00:03:11.315
As a sided user, I can skip by those
sections cuz they're collapsed.

50
00:03:11.315 --> 00:03:16.026
But as a keyboard user, it's opening
them to try and be helpful, but

51
00:03:16.026 --> 00:03:18.313
it ends up being kinda annoying.

52
00:03:18.313 --> 00:03:21.317
[LAUGH] So that's why we have to test it.

53
00:03:21.317 --> 00:03:24.480
So I'm just trying to get through here,
some skip links could be helpful too.

54
00:03:24.480 --> 00:03:27.134
If I could skip past this sidebar,

55
00:03:27.134 --> 00:03:31.353
I think that's a feature that
I'd like to add to this.

56
00:03:31.353 --> 00:03:36.546
So I've got a little theme picker
on the bottom left of the screen so

57
00:03:36.546 --> 00:03:39.896
I can get between dark mode and
light mode.

58
00:03:39.896 --> 00:03:44.667
If I hit enter on that, it opens up a
little dark Light mode, dark mode picker.

59
00:03:44.667 --> 00:03:48.733
And it said focus to that, so
it opened that interactive widget.

60
00:03:48.733 --> 00:03:53.798
And then I can use my arrow keys to go
through these items, that's pretty slick.

61
00:03:53.798 --> 00:03:55.029
Can I hit the Esc key?

62
00:03:55.029 --> 00:04:01.051
Yes, I can, so Esc took me back to
the button that prompted that to open.

63
00:04:01.051 --> 00:04:07.480
And then I can skip on by, I can get to
all of the interactive things on the page.

64
00:04:07.480 --> 00:04:11.063
Something you don't want to have
happen is you don't wanna get stuck

65
00:04:11.063 --> 00:04:12.124
behind any layers.

66
00:04:12.124 --> 00:04:15.407
If there's a modal dialog,
we wanna send focus into it and

67
00:04:15.407 --> 00:04:19.234
replace it when it's done, and
I shouldn't get stuck back there.

68
00:04:19.234 --> 00:04:23.764
Cuz mouse users aren't stuck back there,
they can mouse around and do things.

69
00:04:23.764 --> 00:04:28.306
But keyboard and screen reader users
are often literally left behind.

70
00:04:28.306 --> 00:04:32.184
[LAUGH] So we can avoid that
with some focus management.

71
00:04:32.184 --> 00:04:36.811
And can I use other common key
commands like Esc or the arrow keys or

72
00:04:36.811 --> 00:04:37.913
the space key?

73
00:04:37.913 --> 00:04:39.595
So we tested with the Tab key.

74
00:04:39.595 --> 00:04:45.946
The next thing that I would do is open
a browser dev tools extension like Axe for

75
00:04:45.946 --> 00:04:51.823
Chrome or Firefox or Edge, and
we'll do all of these steps in a minute.

76
00:04:51.823 --> 00:04:57.546
I also zoom the page to at
least 200% on my Mac keyboard,

77
00:04:57.546 --> 00:05:02.016
that is Command Plus,
and I can zoom weigh in.

78
00:05:02.016 --> 00:05:09.538
It conveniently mimics my
responsive breakpoints and stuff.

79
00:05:09.538 --> 00:05:14.192
So anything you do for
responsive design will work for zoom and

80
00:05:14.192 --> 00:05:19.219
magnification, something we call
reflow which is very awesome.

81
00:05:19.219 --> 00:05:21.615
That that just works together.

82
00:05:21.615 --> 00:05:24.630
So I can zoom back out with Command minus,

83
00:05:24.630 --> 00:05:29.638
I think it's control plus,
control minus on the Windows keyboard.

84
00:05:29.638 --> 00:05:34.481
So by zooming in regularly,
you can see, do the layouts, reflow.

85
00:05:34.481 --> 00:05:38.841
Are there any components that are straight
up broken, like interactive things

86
00:05:38.841 --> 00:05:43.476
are happening off screen, or you have
horizontal scrolling where you shouldn't?

87
00:05:43.476 --> 00:05:47.306
And that is so that people who
are low vision, who zoom way in,

88
00:05:47.306 --> 00:05:48.642
can still navigate.

89
00:05:48.642 --> 00:05:52.827
And there's some exceptions,
as we'll talk about a little bit later,

90
00:05:52.827 --> 00:05:56.807
like some interfaces are just going
to have horizontal scrolling and

91
00:05:56.807 --> 00:05:58.198
there are exceptions.

92
00:05:58.198 --> 00:06:02.923
But for the most part, it should be
responsive and reflow these days.

93
00:06:02.923 --> 00:06:04.870
We wanna test other visual modes.

94
00:06:04.870 --> 00:06:08.806
So like on this site,
I have light mode and dark mode.

95
00:06:08.806 --> 00:06:13.355
I had to fix a few things, I think in
light mode, it didn't look great, but

96
00:06:13.355 --> 00:06:15.099
in dark mode, it was great.

97
00:06:15.099 --> 00:06:17.245
So I just had to add some CSS for that.

98
00:06:19.439 --> 00:06:22.479
I have running a screen reader,
is pretty far down the list.

99
00:06:22.479 --> 00:06:28.131
So it's It's not the first thing,
conceptually, we wanna know about it,

100
00:06:28.131 --> 00:06:32.123
but it isn't in my even top
three things of how I test.

101
00:06:32.123 --> 00:06:36.754
But when you do, because you should,
pull up those cheat sheets for

102
00:06:36.754 --> 00:06:39.770
whichever screen reader you're testing.

103
00:06:39.770 --> 00:06:45.336
Double check before filing an issue
on Jira, maybe get another opinion or

104
00:06:45.336 --> 00:06:50.363
you can work with people who use
screen readers regularly as well,

105
00:06:50.363 --> 00:06:52.630
and that's very important.

106
00:06:52.630 --> 00:06:56.923
We shouldn't just guess, we have all these
biases, we're new to screen readers,

107
00:06:56.923 --> 00:06:58.075
we can see the screen.

108
00:06:58.075 --> 00:07:02.357
If you can work with people who use
screen readers and pay them for

109
00:07:02.357 --> 00:07:06.017
their time,
that's gonna yield way better results.

110
00:07:06.017 --> 00:07:08.477
So whenever you can do that, you should.

111
00:07:08.477 --> 00:07:14.113
And then kinda just to make sure we don't
miss this, for media content like audio or

112
00:07:14.113 --> 00:07:18.552
video, make sure that there
are transcripts and/or captions.

113
00:07:18.552 --> 00:07:23.521
And make sure your media players
can accommodate that content.

114
00:07:23.521 --> 00:07:29.269
So these steps could apply to
any website or web application.

115
00:07:29.269 --> 00:07:32.721
I got a great question,
just like random email question,

116
00:07:32.721 --> 00:07:37.309
about someone who was curious about
the accessibility of Microsoft 365.

117
00:07:37.309 --> 00:07:40.359
Just like randomly asked me that question,
and I thought,

118
00:07:40.359 --> 00:07:43.293
that's a good question because
people are evaluating.

119
00:07:43.293 --> 00:07:47.249
Tools to use and they wanna know
how accessible it is, and so

120
00:07:47.249 --> 00:07:49.872
these techniques would apply to that.

121
00:07:49.872 --> 00:07:54.099
It's cloud-based web software,
it needs to be accessible.

122
00:07:54.099 --> 00:07:58.574
So these techniques are things
that I would use to evaluate

123
00:07:58.574 --> 00:08:03.064
that if I were looking to procure
a tool for HR or anything.

124
00:08:03.064 --> 00:08:08.186
And fortunately,
there are some sort of crowd-sourced

125
00:08:08.186 --> 00:08:13.094
feedback on accessible
platforms you could search for

126
00:08:13.094 --> 00:08:16.307
Microsoft 365 accessibility.

127
00:08:16.307 --> 00:08:20.063
Microsoft might even have some of
their own documentation on it, but

128
00:08:20.063 --> 00:08:24.274
just to kind of make drive home that
like anything that's It`s web-based,

129
00:08:24.274 --> 00:08:27.277
can be tested with these techniques for
the most part.

130
00:08:30.066 --> 00:08:34.061
So those are the steps, and
we will use these steps in a little bit.

131
00:08:34.061 --> 00:08:40.644
So Linters and DevTools, there's a ton
of different tools that you can use,

132
00:08:40.644 --> 00:08:47.951
different browsers have built-in browser
Devtools that are excellent these days.

133
00:08:47.951 --> 00:08:51.773
Chrome is my choice that I reach for
all the time.

134
00:08:51.773 --> 00:08:56.195
I know sometimes the Chrome and
their practices, Google,

135
00:08:56.195 --> 00:08:59.034
is not people's preferred browser.

136
00:08:59.034 --> 00:09:03.732
So some people use Firefox, and
there are awesome tools in Firefox now.

137
00:09:03.732 --> 00:09:06.397
Their color picker is amazing,

138
00:09:06.397 --> 00:09:12.033
it can help you identify the contrast
ratio of different elements.

139
00:09:12.033 --> 00:09:17.326
That's one of my favorites,
great layout tools as well in Firefox.

140
00:09:17.326 --> 00:09:22.326
Safari also has awesome tools,
they're kind of forgotten about,

141
00:09:22.326 --> 00:09:26.362
but there's some accessibility
inspector things and

142
00:09:26.362 --> 00:09:30.499
audit feature,
the responsive design mode in Safari.

143
00:09:30.499 --> 00:09:35.295
It's pretty excellent as well,
built into Chrome is Lighthouse.

144
00:09:35.295 --> 00:09:39.256
It is an accessibility auditing
tool built into the browser.

145
00:09:39.256 --> 00:09:45.716
It runs the Axe-Core JavaScript library
and then we get into browser extensions.

146
00:09:45.716 --> 00:09:49.412
So within the browser, my number one,

147
00:09:49.412 --> 00:09:53.672
my daily driver is
the Axe Chrome extension.

148
00:09:53.672 --> 00:09:57.932
It's by Deque, I used to work on that,
so I am a little biased, but

149
00:09:57.932 --> 00:10:00.685
it's just solid, It's an awesome tool.

150
00:10:00.685 --> 00:10:04.144
You can check how a page looks at runtime.

151
00:10:04.144 --> 00:10:07.729
And then if you have things like modals or
other components,

152
00:10:07.729 --> 00:10:11.405
you could run it again and
make sure it didn't miss anything.

153
00:10:11.405 --> 00:10:14.718
And we'll test it out to see things like,

154
00:10:14.718 --> 00:10:19.452
what labels are on the issues,
are they best practices, or

155
00:10:19.452 --> 00:10:26.197
are they actually tied to violations in
the Web content accessibility guidelines.

156
00:10:26.197 --> 00:10:29.205
That's kinda good things
to pay attention to.

157
00:10:29.205 --> 00:10:33.810
You can go straight from the results
in that extension over to highlight

158
00:10:33.810 --> 00:10:38.123
elements and look at them in the Devtools,
we'll check that out.

159
00:10:38.123 --> 00:10:43.362
And then there's kind of upsell
tools within the extension if

160
00:10:43.362 --> 00:10:48.602
you wanna expand into tools that
your organization pays for,

161
00:10:48.602 --> 00:10:51.636
they put a lot of effort into those.

162
00:10:51.636 --> 00:10:56.011
Another tool we're checking out
is Accessibility Insights for

163
00:10:56.011 --> 00:10:57.475
Web from Microsoft.

164
00:10:57.475 --> 00:11:03.650
It also uses the Axe-core library, or
sort of see that come up again and again.

165
00:11:03.650 --> 00:11:07.240
It's an awesome tool,
should definitely checked that one out.

166
00:11:07.240 --> 00:11:10.384
The Web developer toolbar for
Firebox and Chrome,

167
00:11:10.384 --> 00:11:14.052
I'm gonna pull that one up as well,
it's pretty awesome.

168
00:11:14.052 --> 00:11:18.965
It's really the best tool I found for
looking at heading structure.

169
00:11:18.965 --> 00:11:23.970
So we could install that one, and
then when it comes to linting for

170
00:11:23.970 --> 00:11:29.249
ESLint and text editors, there is one for
React applications called

171
00:11:29.249 --> 00:11:34.549
ESlint-Plugin-JSX-A11y, sort
of a standard ESlint plugin.

172
00:11:34.549 --> 00:11:38.256
There's another one from
Deque called Axe Linter.

173
00:11:38.256 --> 00:11:42.473
I used it a while back,
haven't used it super recently, but

174
00:11:42.473 --> 00:11:47.283
it could be an option for
projects that aren't JSX or React-based.

175
00:11:47.283 --> 00:11:51.305
One thing I will say about linters is,
you might need to tweak the settings.

176
00:11:51.305 --> 00:11:55.301
Sometimes they have rules that
just come up again and again.

177
00:11:55.301 --> 00:11:59.804
And if you ignore them because they
don't apply to your situation or

178
00:11:59.804 --> 00:12:03.915
it's just kinda guessing wrong,
you can turn that rule off.

179
00:12:03.915 --> 00:12:07.780
You don't wanna have the team kinda
get used to ignoring results.

180
00:12:07.780 --> 00:12:12.034
It's better to fine-tune the tools
[LAUGH] so that they're relevant, and

181
00:12:12.034 --> 00:12:15.353
then if something comes up,
you actually pay attention.

182
00:12:15.353 --> 00:12:18.150
Kind of a similar theme with
automated testing as well.

