WEBVTT

1
00:00:00.110 --> 00:00:01.600
So some screen reader stuff.

2
00:00:01.600 --> 00:00:02.860
You can dive way deep in this.

3
00:00:02.860 --> 00:00:05.190
Obviously, we just scratched the surface.

4
00:00:05.190 --> 00:00:10.610
What I really want you to know kind of
going forward are some tips for debugging.

5
00:00:10.610 --> 00:00:15.270
So screen reading might be
one aspect of debugging.

6
00:00:15.270 --> 00:00:21.173
So debugging, you could also
call web accessibility testing.

7
00:00:21.173 --> 00:00:23.017
It's something all devs should do.

8
00:00:23.017 --> 00:00:25.949
It's like regular automated testing or

9
00:00:25.949 --> 00:00:29.749
learning concepts about security or
performance.

10
00:00:29.749 --> 00:00:35.202
I think accessibility is even more
foundational than some of those things,

11
00:00:35.202 --> 00:00:41.007
because of the direct impact on how our
user interfaces affect people's lives.

12
00:00:41.007 --> 00:00:43.769
Yeah, all of these concerns are important.

13
00:00:43.769 --> 00:00:47.637
But I think accessibility testing should
be part of your regular workflow.

14
00:00:47.637 --> 00:00:52.642
And once you get in the habit of
opening up the tools, testing it,

15
00:00:52.642 --> 00:00:57.374
hopefully it will just lodge in
your mind like it has for me, so

16
00:00:57.374 --> 00:01:03.849
that it just becomes a matter of habit of,
okay, I'm gonna test with the keyboard.

17
00:01:03.849 --> 00:01:07.109
Okay, I'm gonna test
with the axe extension.

18
00:01:07.109 --> 00:01:12.589
So that's the first step I take is, I use
my tab key to navigate through a page.

19
00:01:12.589 --> 00:01:13.779
It's as simple as it sounds.

20
00:01:13.779 --> 00:01:20.496
You hit tab, and tab through things,
you see, can I reach and navigate?

21
00:01:20.496 --> 00:01:24.726
Reach and operate every
interactive control on a page.

22
00:01:24.726 --> 00:01:27.249
So if a mouse user can click on it,

23
00:01:27.249 --> 00:01:32.006
as a keyboard user I should
be able to do the same task.

24
00:01:32.006 --> 00:01:36.934
It might not be the exact same element,
I might have a click event on a wrapper

25
00:01:36.934 --> 00:01:41.554
element or something that only mouse
users use, but then within that,

26
00:01:41.554 --> 00:01:46.405
I have a focusable link, or button, or
some other way to do the same thing.

27
00:01:47.525 --> 00:01:51.795
So I wanna be able to accomplish
every task as a keyboard user.

28
00:01:51.795 --> 00:01:56.071
And if you ditch your mouse completely,
just don't use it for a day,

29
00:01:56.071 --> 00:02:01.013
maybe you could put some paper over your
trackpad, it seems great extreme, but

30
00:02:01.013 --> 00:02:02.744
you know what I'm saying.

31
00:02:02.744 --> 00:02:07.946
If you can have a process where you
cannot bail out and use your mouse,

32
00:02:07.946 --> 00:02:12.805
you're probably gonna find some
issues that need to get fixed.

33
00:02:12.805 --> 00:02:14.441
Yeah, cuz it's pervasive,

34
00:02:14.441 --> 00:02:17.945
but it's something we can
address in a lot of cases.

35
00:02:17.945 --> 00:02:20.555
So can you reach and
operate every control?

36
00:02:20.555 --> 00:02:22.818
Can you see where you are on the screen?

37
00:02:22.818 --> 00:02:24.515
Is there a focus outline?

38
00:02:25.605 --> 00:02:27.988
We have the default blue.

39
00:02:27.988 --> 00:02:32.744
I will say the slide materials that we
have right now, the whole sidebar is

40
00:02:32.744 --> 00:02:36.965
a series of components that I
really wanna contribute back to.

41
00:02:36.965 --> 00:02:40.605
It's not exactly how I want
the keyboard accessibility to be.

42
00:02:40.605 --> 00:02:43.810
So sometimes you have to go,
open up an issue or

43
00:02:43.810 --> 00:02:47.593
a pull request on an open
source library and say, hey,

44
00:02:47.593 --> 00:02:52.702
can we make this configurable, or
can I just contribute a fix for this?

45
00:02:52.702 --> 00:02:55.856
That's probably what I'll do.

46
00:02:55.856 --> 00:02:59.580
Because when these menus over
here on the left are closed,

47
00:02:59.580 --> 00:03:02.009
we should be able to skip by them.

48
00:03:02.009 --> 00:03:05.646
It's actually forcing me through
every single link in the sidebar,

49
00:03:05.646 --> 00:03:07.109
which can get tedious.

50
00:03:07.109 --> 00:03:11.359
As a sighted user, I can skip by
those sections coz they're collapsed.

51
00:03:11.359 --> 00:03:14.739
But as a keyboard user,
it's opening them to try and be helpful.

52
00:03:15.949 --> 00:03:18.399
But it ends up being kind of annoying.

53
00:03:18.399 --> 00:03:21.239
[LAUGH] So that's why we have to test it.

54
00:03:21.239 --> 00:03:22.663
So I'm just trying to get through here.

55
00:03:22.663 --> 00:03:27.561
Some skip links could be helpful too,
if I could skip past this sidebar,

56
00:03:27.561 --> 00:03:31.276
I think that's a feature that
I'd like to add to this.

57
00:03:31.276 --> 00:03:36.204
So I've got a little theme picker
on the bottom left of the screen,

58
00:03:36.204 --> 00:03:39.903
so I can get between dark mode and
light mode.

59
00:03:39.903 --> 00:03:44.336
If I hit Enter on that, it opens up
a little light mode, dark mode picker, and

60
00:03:44.336 --> 00:03:48.020
it sent focus to that, so
I opened that interactive widget, and

61
00:03:48.020 --> 00:03:52.480
then I can use my arrow keys to go
through these items, that's pretty slick.

62
00:03:53.850 --> 00:03:55.090
Can I hit the Escape key?

63
00:03:55.090 --> 00:03:55.875
Yes, I can.

64
00:03:55.875 --> 00:04:00.732
So escape took me back to the button
that prompted that to open, and

65
00:04:00.732 --> 00:04:06.220
then I can skip on by, I can get to all
of the interactive things on the page.

66
00:04:07.520 --> 00:04:09.711
Something you don't want
to have happened is,

67
00:04:09.711 --> 00:04:11.960
you don't wanna get
stuck behind any layers.

68
00:04:11.960 --> 00:04:15.303
If there's a modal dialogue,
we wanna send focus into it and

69
00:04:15.303 --> 00:04:19.230
replace it when it's done, and
I shouldn't get stuck back there.

70
00:04:19.230 --> 00:04:20.990
Cuz mouse users aren't stuck back there.

71
00:04:20.990 --> 00:04:23.473
They can mouse around and do things.

72
00:04:23.473 --> 00:04:28.220
But keyboard and screen reader users
are often literally left behind.

73
00:04:28.220 --> 00:04:32.363
[LAUGH] So we can avoid that
with some focus management.

74
00:04:32.363 --> 00:04:35.827
And can I use other common
key commands like escape or

75
00:04:35.827 --> 00:04:38.003
the arrow keys or the space key?

76
00:04:38.003 --> 00:04:39.593
So we tested with the tab key.

77
00:04:39.593 --> 00:04:45.288
The next thing that I would do is open
a browser DevTools extension, like Axe for

78
00:04:45.288 --> 00:04:50.730
Chrome, or Firefox, or Edge, and
we'll do all of these steps in a minute.

79
00:04:51.900 --> 00:04:58.302
I also zoom the page to at
least 200% on my Mac keyboard,

80
00:04:58.302 --> 00:05:04.449
that is command plus, and
I can zoom when it conveniently

81
00:05:04.449 --> 00:05:09.461
mimics my responsive breakpoints and
stuff.

82
00:05:09.461 --> 00:05:15.220
So anything you do for responsive design,
will work for zoom and magnification,

83
00:05:15.220 --> 00:05:21.661
something we call reflow, which is very
awesome that that just works together.

84
00:05:21.661 --> 00:05:26.576
So I can zoom back out with command minus,
I think it's control plus,

85
00:05:26.576 --> 00:05:29.590
control minus, on the Windows keyboard.

86
00:05:29.590 --> 00:05:34.625
So by zooming in regularly,
you can see, do the layouts, reflow.

87
00:05:34.625 --> 00:05:38.264
Are there any components that are straight
up broken, interactive things

88
00:05:38.264 --> 00:05:43.073
are happening off-screen, or you have
horizontal scrolling where you shouldn't?

89
00:05:43.073 --> 00:05:46.900
And that is so that people who
are low vision, who zoom way in,

90
00:05:46.900 --> 00:05:48.643
can still navigate.

91
00:05:48.643 --> 00:05:52.852
And there's some exceptions,
as we'll talk about a little bit later,

92
00:05:52.852 --> 00:05:56.854
like some interfaces are just going
to have horizontal scrolling and

93
00:05:56.854 --> 00:05:58.243
there are exceptions.

94
00:05:58.243 --> 00:06:02.997
But for the most part, it should be
responsive and reflow these days.

95
00:06:02.997 --> 00:06:04.907
We wanna test other visual modes.

96
00:06:04.907 --> 00:06:08.237
So on this site,
I have light mode and dark mode.

97
00:06:08.237 --> 00:06:10.877
I had to fix a few things.

98
00:06:10.877 --> 00:06:15.147
I think in light mode, it didn't look
great, but in dark mode, it was great.

99
00:06:15.147 --> 00:06:17.217
So I just had to add some CSS for that.

100
00:06:19.517 --> 00:06:22.527
I have running a screen reader
is pretty far down the list.

101
00:06:22.527 --> 00:06:24.880
So it's not the first thing.

102
00:06:24.880 --> 00:06:28.269
Conceptually, we wanna know about it, but

103
00:06:28.269 --> 00:06:32.125
it isn't in my even top
three things of how I test.

104
00:06:32.125 --> 00:06:36.015
But when you do, because you should,
pull up those cheat sheets for

105
00:06:36.015 --> 00:06:39.070
whichever screen reader you're testing.

106
00:06:39.070 --> 00:06:44.467
Double-check before filing an issue
on Jira, maybe get another opinion or

107
00:06:44.467 --> 00:06:49.203
you can work with people who use
screen readers regularly as well.

108
00:06:50.613 --> 00:06:52.623
And that's very important.

109
00:06:52.623 --> 00:06:54.003
We shouldn't just guess.

110
00:06:54.003 --> 00:06:55.203
We have all these biases.

111
00:06:55.203 --> 00:06:56.463
We're new to screen readers.

112
00:06:56.463 --> 00:06:58.163
We can see the screen.

113
00:06:58.163 --> 00:07:02.713
If you can work with people who use screen
readers and pay them for their time,

114
00:07:02.713 --> 00:07:08.495
that's gonna yield way better results,
so whenever you can do that, you should.

115
00:07:08.495 --> 00:07:13.652
And then, kind of just to make sure
we don't miss this, for media content

116
00:07:13.652 --> 00:07:19.144
like audio or video, make sure that
there are transcripts and/or captions,

117
00:07:19.144 --> 00:07:23.657
and make sure your media players
can accommodate that content.

118
00:07:23.657 --> 00:07:29.231
So these steps could apply to
any website or web application.

119
00:07:29.231 --> 00:07:33.781
I got a great question, just like random
email question about someone who was

120
00:07:33.781 --> 00:07:37.071
curious about the accessibility
of Microsoft 365,

121
00:07:37.071 --> 00:07:39.384
just randomly asked me that question.

122
00:07:39.384 --> 00:07:40.314
And I thought,

123
00:07:40.314 --> 00:07:44.681
that's a good question because people
are evaluating tools to use, and

124
00:07:44.681 --> 00:07:49.858
they wanna know how accessible it is, and
so these techniques would apply to that.

125
00:07:49.858 --> 00:07:54.411
It's cloud-based web software,
it needs to be accessible, so

126
00:07:54.411 --> 00:07:58.798
these techniques are things that
I would use to evaluate that,

127
00:07:58.798 --> 00:08:02.688
if I were looking to procure a tool for
HR or anything.

128
00:08:02.688 --> 00:08:06.250
And fortunately, there are some sort of

129
00:08:06.250 --> 00:08:10.978
crowd-sourced feedback
on accessible platforms.

130
00:08:10.978 --> 00:08:16.318
You could search for
Microsoft 365 accessibility.

131
00:08:16.318 --> 00:08:19.798
Microsoft might even have some of
their own documentation on it.

132
00:08:19.798 --> 00:08:21.929
But just to kind of drive home that,

133
00:08:21.929 --> 00:08:26.990
anything that's web-based can be tested
with these techniques for the most part.

134
00:08:30.155 --> 00:08:34.140
So those are the steps, and
we will use these steps in a little bit.

135
00:08:34.140 --> 00:08:38.730
So Linters and DevTools.

136
00:08:38.730 --> 00:08:42.640
There's a ton of different
tools that you can use.

137
00:08:42.640 --> 00:08:43.744
Different browsers.

138
00:08:43.744 --> 00:08:48.096
I have built-in browser DevTools
that are excellent these days.

139
00:08:48.096 --> 00:08:51.986
Chrome is my choice that I reach for
all the time.

140
00:08:51.986 --> 00:08:56.371
I know sometimes the Chrome and
their practices, Google,

141
00:08:56.371 --> 00:08:59.186
is not people's preferred browser.

142
00:08:59.186 --> 00:09:03.833
So some people use Firefox, and
there are awesome tools in Firefox now.

143
00:09:03.833 --> 00:09:06.437
Their color picker is amazing.

144
00:09:06.437 --> 00:09:12.127
It can help you identify the contrast
ratio of different elements.

145
00:09:12.127 --> 00:09:13.237
That's one of my favorites.

146
00:09:14.797 --> 00:09:17.447
Great layout tools as well in Firefox.

147
00:09:17.447 --> 00:09:19.757
Safari also has awesome tools.

148
00:09:19.757 --> 00:09:22.389
They're kind of forgotten about, but

149
00:09:22.389 --> 00:09:27.017
there's some accessibility
inspector things, an audit feature,

150
00:09:27.017 --> 00:09:32.750
the responsive design mode in Safari,
it's pretty excellent as well.

151
00:09:32.750 --> 00:09:35.090
Built-into Chrome is lighthouse.

152
00:09:35.090 --> 00:09:38.290
It is an accessibility auditing
tool built into the browser.

153
00:09:39.310 --> 00:09:42.550
It runs the axe-core JavaScript library.

154
00:09:43.584 --> 00:09:45.844
And then we get into browser extensions.

155
00:09:45.844 --> 00:09:53.774
So within the browser, my number one, my
daily driver, is the Axe Chrome extension.

156
00:09:53.774 --> 00:09:54.604
It's by Deque.

157
00:09:54.604 --> 00:09:59.064
I used to work on that, so
I am a little biased, but it's just solid.

158
00:09:59.064 --> 00:10:00.864
It's an awesome tool.

159
00:10:00.864 --> 00:10:04.297
You can check how a page looks at runtime.

160
00:10:04.297 --> 00:10:07.817
And then if you have things like modals or
other components,

161
00:10:07.817 --> 00:10:11.558
you could run it again, and
make sure it didn't miss anything.

162
00:10:11.558 --> 00:10:18.019
And we'll test it out to see things
like what labels are on the issues.

163
00:10:18.019 --> 00:10:22.978
Are they best practices, or
are they actually tied to violations in

164
00:10:22.978 --> 00:10:26.293
the web content accessibility guidelines?

165
00:10:26.293 --> 00:10:29.344
That's kind of good things
to pay attention to.

166
00:10:29.344 --> 00:10:33.975
You can go straight from the results
in that extension over to highlight

167
00:10:33.975 --> 00:10:36.764
elements and look at them in the DevTools.

168
00:10:36.764 --> 00:10:38.224
We'll check that out.

169
00:10:38.224 --> 00:10:42.936
And then there's kind of upsell
tools within the extension,

170
00:10:42.936 --> 00:10:47.828
if you wanna expand into tools
that your organization pays for,

171
00:10:47.828 --> 00:10:51.771
I know they put a lot
of effort into those.

172
00:10:51.771 --> 00:10:56.048
Another tool we're checking out
is accessibility insights for

173
00:10:56.048 --> 00:10:57.571
web from Microsoft.

174
00:10:57.571 --> 00:10:59.961
It also uses the axe-core library.

175
00:10:59.961 --> 00:11:02.201
You'll sort of see that come up again and
again.

176
00:11:03.815 --> 00:11:05.005
It's an awesome tool.

177
00:11:05.005 --> 00:11:07.265
Should definitely check that one out.

178
00:11:07.265 --> 00:11:10.511
The web developer toolbar for
Firefox and Chrome,

179
00:11:10.511 --> 00:11:13.295
I'm gonna pull that one up as well.

180
00:11:13.295 --> 00:11:14.125
It's pretty awesome.

181
00:11:14.125 --> 00:11:18.925
It's really the best tool I've found for
looking at heading structure.

182
00:11:18.925 --> 00:11:20.585
So we could install that one.

183
00:11:21.775 --> 00:11:26.281
And then when it comes to linting,
for ESLint and text editors,

184
00:11:26.281 --> 00:11:31.707
there is one for React applications
called ESLint-Plugin-JSX-A11y,

185
00:11:31.707 --> 00:11:34.640
sort of a standard ESLint plugin.

186
00:11:34.640 --> 00:11:37.530
There's another one from
Deque called Axe Linter.

187
00:11:37.530 --> 00:11:40.070
I used it a while back.

188
00:11:40.070 --> 00:11:44.290
Haven't used it super recently,
but it could be an option for

189
00:11:44.290 --> 00:11:47.410
projects that aren't JSX or React-based.

190
00:11:47.410 --> 00:11:51.380
One thing I will say about linters is
you might need to tweak the settings.

191
00:11:51.380 --> 00:11:55.570
Sometimes they have rules that just
come up again and again and again, and

192
00:11:55.570 --> 00:11:59.221
if you ignore them because they
don't apply to your situation or

193
00:11:59.221 --> 00:12:02.828
it's just kind of guessing wrong,
you can turn that rule off.

194
00:12:02.828 --> 00:12:07.848
Rather than you don't wanna have the team
kind of getting used to ignoring results.

195
00:12:07.848 --> 00:12:11.416
It's better to fine tune the tools so
that they're relevant, and

196
00:12:11.416 --> 00:12:14.548
then if something comes up,
you actually pay attention.

197
00:12:15.568 --> 00:12:18.101
Kind of a similar theme with
automated testing as well.

