WEBVTT

1
00:00:00.200 --> 00:00:05.100
Roles, States, and Properties,
these are the building blocks of ARIA.

2
00:00:05.100 --> 00:00:10.780
So all of the attributes that are defined
in the ARIA specification are roles,

3
00:00:10.780 --> 00:00:16.570
states, or properties, such as
role-button or aria-hidden of true.

4
00:00:16.570 --> 00:00:23.121
So roles are pretty straightforward in
that they are, what does the thing do?

5
00:00:23.121 --> 00:00:23.970
Is it a button?

6
00:00:23.970 --> 00:00:27.656
Is it a checkbox?

7
00:00:27.656 --> 00:00:33.556
So, as I mentioned, the button element
has an implicit role of button.

8
00:00:34.616 --> 00:00:37.418
The role of button will bolt it on, and

9
00:00:37.418 --> 00:00:41.632
in the accessibility tree's view,
that's seamless.

10
00:00:41.632 --> 00:00:46.306
It's pretty well supported, I mean,
I think you can do that pretty reliably.

11
00:00:46.306 --> 00:00:49.687
But div role="button" is
not the whole picture, so

12
00:00:49.687 --> 00:00:51.976
that's why we say use button first.

13
00:00:53.566 --> 00:00:55.262
So, why would you even use that?

14
00:00:55.262 --> 00:00:59.584
It'd be like if for some reason
you're building a custom component,

15
00:00:59.584 --> 00:01:01.131
and you can't use HTML.

16
00:01:01.131 --> 00:01:03.830
I mean, it better be a compelling reason,
but there's so

17
00:01:03.830 --> 00:01:08.456
many constraints that we deal with in the
real world, that I'm sure it's come up.

18
00:01:08.456 --> 00:01:13.182
I mean, it could be that you
have really annoying old styling

19
00:01:13.182 --> 00:01:16.340
that you can't get rid of or something.

20
00:01:16.340 --> 00:01:20.689
That's some technical debt that I
think would be worth facing, but

21
00:01:20.689 --> 00:01:22.836
sometimes we have constraints.

22
00:01:24.686 --> 00:01:26.376
So, I can think of another example.

23
00:01:26.376 --> 00:01:32.836
I worked on, it was actually a desktop
application that output widgets.

24
00:01:32.836 --> 00:01:37.065
So it was outputting web widgets
that you could embed, and

25
00:01:37.065 --> 00:01:40.099
it exported divs for buttons.

26
00:01:40.099 --> 00:01:44.724
And the fix in the actual
desktop software application to

27
00:01:44.724 --> 00:01:48.679
output a button element was non-trivial.

28
00:01:48.679 --> 00:01:51.609
I wasn't like, hey, I'm just gonna
go in and swap that element out.

29
00:01:51.609 --> 00:01:58.489
No, it was old back-end code
to generate button elements.

30
00:01:58.489 --> 00:02:03.516
So, yeah, we've definitely put an issue
in the backlog to do that work.

31
00:02:03.516 --> 00:02:07.636
But in the meantime, are we just
gonna let button elements be divs?

32
00:02:07.636 --> 00:02:11.527
No, I bolted on a button role, and
tab index, and a keyboard event,

33
00:02:11.527 --> 00:02:13.976
and did the whole song and dance.

34
00:02:13.976 --> 00:02:17.196
Well, we kind of did both things,
so that might be the solution.

35
00:02:17.196 --> 00:02:20.816
If for some reason you're like,
we can't use buttons right now.

36
00:02:20.816 --> 00:02:24.357
We are doing the work to upgrade
our infrastructure so that we can.

37
00:02:24.357 --> 00:02:28.868
But in the meantime, maybe you bolt on
a button role and all of the other parts.

38
00:02:31.646 --> 00:02:35.206
So when you're checking support for
an ARIA role, state, or

39
00:02:35.206 --> 00:02:39.493
property, or you're wanting to use them,
you should check support.

40
00:02:39.493 --> 00:02:44.070
So for something like aria-autocomplete or
aria-drag,

41
00:02:44.070 --> 00:02:48.646
where you're like,
isn't there an ARIA attribute for x or

42
00:02:48.646 --> 00:02:52.693
y that I saw on ARIA spec or
I remembered at one time?

43
00:02:52.693 --> 00:02:54.703
It's good to do some research on it.

44
00:02:54.703 --> 00:03:00.747
So the first site I would recommend
is called Accessibility Support,

45
00:03:00.747 --> 00:03:02.915
or a11ysupport.io.

46
00:03:02.915 --> 00:03:07.265
This is a community effort to,
basically, crowdsource,

47
00:03:07.265 --> 00:03:11.595
it's like a caniuse.com for
ARIA attributes.

48
00:03:11.595 --> 00:03:16.555
So I think the example I
had was aria-autocomplete.

49
00:03:16.555 --> 00:03:18.771
Yikes, that's a no-go.

50
00:03:18.771 --> 00:03:25.121
[LAUGH] Is it supported across the board
as either none or some partial support?

51
00:03:25.121 --> 00:03:30.981
So I'd say, sorry, aria-autocomplete
attribute, that's just not gonna happen.

52
00:03:30.981 --> 00:03:32.328
What would be another one?

53
00:03:32.328 --> 00:03:35.091
I guess, aria-drag,
I don't think that's a thing.

54
00:03:36.951 --> 00:03:44.035
aria-dropeffect, yeah, that one's not
documented, and probably not supported.

55
00:03:44.035 --> 00:03:47.440
Whoa, I'm surprised about aria-hidden,

56
00:03:47.440 --> 00:03:52.833
that's actually pretty well supported,
but there's no data on it.

57
00:03:52.833 --> 00:03:55.879
So that's still kind of interesting.

58
00:03:55.879 --> 00:03:58.424
Let's see, what'd be another one?

59
00:03:58.424 --> 00:04:03.685
aria-label, all green, all good,
supported, pretty reliable.

60
00:04:04.865 --> 00:04:07.959
You have to use aria-label
on the right role.

61
00:04:07.959 --> 00:04:11.040
You can't put it onto a div,
but that's not a support issue,

62
00:04:11.040 --> 00:04:13.065
that's just a technical requirement.

63
00:04:14.775 --> 00:04:19.026
And it's interesting they
put screen reader support,

64
00:04:19.026 --> 00:04:22.560
voice control support, aria-labelledby.

65
00:04:22.560 --> 00:04:25.479
So this is some really helpful data.

66
00:04:26.799 --> 00:04:34.529
Another one I've used this for
is aria-expanded or aria-haspopup.

67
00:04:34.529 --> 00:04:40.284
So some of these things that we put on
custom little dropdowns and things.

68
00:04:40.284 --> 00:04:43.682
Support's pretty good, but
we can go in and read more.

69
00:04:43.682 --> 00:04:46.169
What are the things that it's not passing?

70
00:04:47.549 --> 00:04:52.344
Simple trues or false seem pretty good,
aside from Narrator,

71
00:04:52.344 --> 00:04:55.879
Orca, which is Linux or Android, TalkBack.

72
00:04:57.199 --> 00:05:00.031
I could go test in some of those
if I was really concerned.

73
00:05:00.031 --> 00:05:02.366
So I'm talking about how to prioritize.

74
00:05:02.366 --> 00:05:05.795
This is one direction I could
go in to say, all right,

75
00:05:05.795 --> 00:05:11.512
I wanna use this ARIA attribute to
communicate the state of this component.

76
00:05:11.512 --> 00:05:14.166
I looked it up on
Accessibility Support IO,

77
00:05:14.166 --> 00:05:18.342
and it looked green across the board,
except for Narrator and Edge.

78
00:05:18.342 --> 00:05:21.691
I'm gonna go test over there and
see what happens.

79
00:05:21.691 --> 00:05:22.690
So that's pretty cool.

80
00:05:22.690 --> 00:05:25.771
I mean,
you should test it elsewhere too, but

81
00:05:25.771 --> 00:05:29.012
this is kind of helpful data to digest and
apply.

82
00:05:31.121 --> 00:05:34.922
So a11support.io, and
they are community-driven, so

83
00:05:34.922 --> 00:05:37.612
I'm sure they would love contributions.

84
00:05:37.612 --> 00:05:42.509
And then testing it in screen readers,
cuz that's where the impact is

85
00:05:42.509 --> 00:05:46.541
really going to be felt,
is in assistive technology.

86
00:05:46.541 --> 00:05:51.981
And that's also why it gets forgotten
[LAUGH] or screwed up, is that I think

87
00:05:51.981 --> 00:05:58.051
developers, it's so easy to add ARIA,
but then the testing step gets missed.

88
00:05:58.051 --> 00:06:02.356
So we want to make sure we're testing it,
or just don't include it at all.

89
00:06:02.356 --> 00:06:04.485
I learned that kind of
early on in my career,

90
00:06:04.485 --> 00:06:07.086
that I could make it a lot
worse without realizing it.

91
00:06:08.726 --> 00:06:13.830
So, yeah, ARIA should just kind of
accept or remember that it should

92
00:06:13.830 --> 00:06:19.036
come with a bit of caution [LAUGH] or
some testing time on your calendar.

93
00:06:20.069 --> 00:06:23.532
And then you can read up on mailing
lists like the ARIA GitHub.

94
00:06:23.532 --> 00:06:25.548
The NVDA GitHub is really great,

95
00:06:25.548 --> 00:06:30.599
that's where they develop the Windows
screen reader, NVDA, it's open source.

96
00:06:31.679 --> 00:06:36.254
It is a treasure trove of information over
there, especially for Windows issues.

97
00:06:36.254 --> 00:06:41.925
That if you're primarily a Mac developer,
and you start to test on Windows,

98
00:06:41.925 --> 00:06:47.000
you can dispel some misconceptions
just by reading the NVDA GitHub.

99
00:06:47.000 --> 00:06:50.889
Cuz somebody's probably had the same
question as you, and you can go and

100
00:06:50.889 --> 00:06:53.477
read, and it is very helpful.

101
00:06:53.477 --> 00:06:59.369
And then the WebAIM email discussion list,
they have decades, I wanna say.

102
00:06:59.369 --> 00:07:01.991
I don't know how many years of archives,
but

103
00:07:01.991 --> 00:07:06.131
they have email archives from a very
long time ago that have discussions

104
00:07:06.131 --> 00:07:09.585
from people who work on browsers,
work on screen readers.

105
00:07:09.585 --> 00:07:14.423
The accessibility community includes
people who developed all of

106
00:07:14.423 --> 00:07:17.023
these specs and all of these tools.

107
00:07:17.023 --> 00:07:21.636
It's really cool that there's
answers from people that are so

108
00:07:21.636 --> 00:07:23.821
informed and instrumental.

109
00:07:25.661 --> 00:07:28.971
So you can use ARIA in your CSS selectors.

110
00:07:28.971 --> 00:07:31.836
It's a pretty cool technique to do,
I guess,

111
00:07:31.836 --> 00:07:34.635
depending on how your
styling is generated.

112
00:07:34.635 --> 00:07:42.299
But like any attribute selector,
you can match your CSS to certain ARIA.

113
00:07:42.299 --> 00:07:46.906
So for example,
if I have a custom role of checkbox,

114
00:07:46.906 --> 00:07:51.118
sure, I could add a class or
an ID or something.

115
00:07:51.118 --> 00:07:55.309
I could also just match it
based on whether it has a role.

116
00:07:55.309 --> 00:07:59.309
I've done this when I need to
differentiate certain inputs from other

117
00:07:59.309 --> 00:08:02.580
inputs, I'll end up using
these attribute selectors.

118
00:08:02.580 --> 00:08:08.533
But the ARIA ones also, I could
style a disabled checkbox that way.

119
00:08:10.123 --> 00:08:13.765
Increasingly, a lot of codebases
are using things like Tailwind, so

120
00:08:13.765 --> 00:08:16.173
you might not have these
types of selectors.

121
00:08:16.173 --> 00:08:19.728
But Tailwind does a pretty
good job of incorporating

122
00:08:19.728 --> 00:08:22.648
accessibility into what they're doing.

123
00:08:22.648 --> 00:08:27.163
Love it or hate it,
they are at least making it possible for

124
00:08:27.163 --> 00:08:29.942
us to create similar experiences.

125
00:08:31.392 --> 00:08:34.125
I didn't ever think I would be
a Tailwind person, by the way,

126
00:08:34.125 --> 00:08:36.662
just a little side note, but
it's been kind of awesome.

127
00:08:38.342 --> 00:08:39.633
It does get in my way, though.

128
00:08:39.633 --> 00:08:44.955
[LAUGH] Okay, so another example could
be styling off of aria-expanded.

129
00:08:44.955 --> 00:08:46.770
That's another one of those states.

130
00:08:46.770 --> 00:08:49.995
If it's true or false,
you can change how it's styled, question?

131
00:08:51.435 --> 00:08:55.875
&gt;&gt; What about hidden anchor elements for
screen readers,

132
00:08:55.875 --> 00:09:00.589
like skip to main content and
skip navigation?

133
00:09:00.589 --> 00:09:03.219
&gt;&gt; Yes, so
the question was about skip links.

134
00:09:03.219 --> 00:09:05.829
We are going to talk about skip
links in the next section.

135
00:09:07.359 --> 00:09:10.699
So, with those,
we actually don't want them to be hidden.

136
00:09:11.799 --> 00:09:15.109
We wanna make them usable by
sighted keyboard users, too.

137
00:09:15.109 --> 00:09:20.049
So I think there used to be an approach
to skip links where we would put visually

138
00:09:20.049 --> 00:09:22.102
hidden on them for some reason.

139
00:09:22.102 --> 00:09:25.877
And let's just get that out of there,
no more of that.

140
00:09:25.877 --> 00:09:29.097
[LAUGH] I don't know where that came from,
but

141
00:09:29.097 --> 00:09:34.886
skip links are super useful when you can
see the screen and you wanna skip around.

142
00:09:34.886 --> 00:09:36.237
If you can't use a mouse,

143
00:09:36.237 --> 00:09:39.562
we actually would benefit from
some skip links on these slides.

144
00:09:39.562 --> 00:09:42.511
So, yeah, we wanna make them visible, but

145
00:09:42.511 --> 00:09:45.955
we will talk about skip
links a little bit later on.

146
00:09:48.309 --> 00:09:51.160
All right, so accessible names and
descriptions.

147
00:09:51.160 --> 00:09:54.821
ARIA brings with it a pretty
foundational concept here, and

148
00:09:54.821 --> 00:09:57.465
we've already seen some of it.

149
00:09:57.465 --> 00:10:01.365
Accessible names apply to links, buttons,

150
00:10:01.365 --> 00:10:06.510
form controls, images,
tables, field sets, legends.

151
00:10:06.510 --> 00:10:10.997
Anything that has what we call a label,
quote unquote,

152
00:10:10.997 --> 00:10:14.348
has a technical term of accessible name.

153
00:10:14.348 --> 00:10:16.595
So if you hear that, that's what that is.

154
00:10:16.595 --> 00:10:18.751
It's basically the label for something.

155
00:10:18.751 --> 00:10:21.510
And only certain elements can be labeled.

156
00:10:21.510 --> 00:10:26.146
You can't put aria-label on a div
unless it has a certain role on it, but

157
00:10:26.146 --> 00:10:28.586
that's what that concept is.

158
00:10:28.586 --> 00:10:31.906
There's also the concept of
an accessible description.

159
00:10:31.906 --> 00:10:34.731
That if something has a label and a title,

160
00:10:34.731 --> 00:10:39.922
the title will be read kind of after
the initial text, after a bit of a delay.

161
00:10:39.922 --> 00:10:42.544
And that's what's called
an accessible description.

162
00:10:42.544 --> 00:10:46.322
Title will do it,
aria-describedby will do it.

163
00:10:46.322 --> 00:10:48.488
They are configurable
on the screen reader,

164
00:10:48.488 --> 00:10:51.970
though, so you don't wanna count on
descriptions always being there.

165
00:10:54.251 --> 00:10:59.057
So aria-label, aria-labelledby,
aria-describedby, you can label things,

166
00:10:59.057 --> 00:11:01.234
and we've seen some of this already.

167
00:11:01.234 --> 00:11:05.147
But I can bolt on a label pretty easily.

168
00:11:05.147 --> 00:11:08.988
The risk with aria-label sometimes,
and I saw this in a codebase recently,

169
00:11:08.988 --> 00:11:13.627
is people set it and then they forget it,
and it's not relevant text anymore.

170
00:11:13.627 --> 00:11:16.485
So I have a slight preference for
aria-labelledby,

171
00:11:16.485 --> 00:11:19.353
cuz it will just always stay
up to date with whatever.

172
00:11:19.353 --> 00:11:22.955
If this All About Wombats
heading is visible, and

173
00:11:22.955 --> 00:11:26.662
it gets out of date,
that'll probably get fixed.

174
00:11:26.662 --> 00:11:29.941
But then the accessibility
connection is still there.

175
00:11:29.941 --> 00:11:32.841
It's just gonna
programmatically point to that.

176
00:11:32.841 --> 00:11:34.416
So I think that's pretty awesome.

177
00:11:36.653 --> 00:11:41.718
And then aria-describedby,
it's very similar to labelledby.

178
00:11:41.718 --> 00:11:44.799
It just creates that
description instead of a name.

179
00:11:44.799 --> 00:11:51.009
So as we saw in the Chrome DevTools,
that will show us which thing wins.

180
00:11:51.009 --> 00:11:56.471
So when we have multiple,
this tiny screenshot has aria-label,

181
00:11:56.471 --> 00:12:01.163
it has title, placeholder,
maybe more than one title.

182
00:12:01.163 --> 00:12:03.626
I'm not really sure what's
happening there, but

183
00:12:03.626 --> 00:12:05.693
we can see the description is helper text.

184
00:12:05.693 --> 00:12:10.305
The name is text on this
very generic example.

185
00:12:10.305 --> 00:12:14.760
But that tool is excellent for
helping you see which thing wins,

186
00:12:14.760 --> 00:12:16.915
because something has to win.

187
00:12:18.633 --> 00:12:20.867
And in the enterprise workshop, also,

188
00:12:20.867 --> 00:12:24.624
we are going to dive way deeper
into this topic, gets pretty geeky.

