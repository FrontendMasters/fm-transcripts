WEBVTT

1
00:00:00.000 --> 00:00:06.979
I think what's left is the image
alt text and these aria-hiddens.

2
00:00:06.979 --> 00:00:07.914
So this one,

3
00:00:07.914 --> 00:00:13.356
the goal of aria-hidden is to hide
something from the accessibility tree.

4
00:00:13.356 --> 00:00:18.336
So the technique on this
component that's auto-rotating,

5
00:00:20.609 --> 00:00:22.789
Is that there's three slides here.

6
00:00:22.789 --> 00:00:27.395
And when you go through the carousel,
only one is active at a time.

7
00:00:27.395 --> 00:00:30.963
So the technique that was
used was to put aria-hidden

8
00:00:30.963 --> 00:00:33.108
on the ones that are off screen.

9
00:00:33.108 --> 00:00:37.298
But the problem is there's links in there,
and so you can tab on the links, but

10
00:00:37.298 --> 00:00:40.426
they aren't gonna have any
accessibility information.

11
00:00:40.426 --> 00:00:43.778
So that's why Axe is complaining about it.

12
00:00:43.778 --> 00:00:50.930
So we're going to use inert instead, which
is an HTML attribute that's been proposed.

13
00:00:50.930 --> 00:00:54.071
It's totally awesome, and
it will solve this problem.

14
00:00:54.071 --> 00:00:58.347
It adds aria-hidden, and
it will go into any links, or buttons, or

15
00:00:58.347 --> 00:01:02.871
anything in that region, and
it'll disable them with tabindex for us.

16
00:01:02.871 --> 00:01:05.264
So let's do that.

17
00:01:05.264 --> 00:01:10.327
Okay, so instead of aria-hidden, we can
even just leave that there right now,

18
00:01:10.327 --> 00:01:12.939
I'm gonna say ref, cuz we're in React.

19
00:01:12.939 --> 00:01:16.323
So I'm gonna pass it a node,

20
00:01:16.323 --> 00:01:21.123
and within here, I might need to cheat.

21
00:01:21.123 --> 00:01:23.604
This is kind of hard to remember.

22
00:01:23.604 --> 00:01:29.744
So React currently has an issue with
inert that you have to work around.

23
00:01:29.744 --> 00:01:31.872
So we're gonna work around it.

24
00:01:31.872 --> 00:01:36.973
I'm gonna go up here, we're gonna
make a function called set inert,

25
00:01:36.973 --> 00:01:40.788
and we're gonna call it for
each one of these nodes.

26
00:01:40.788 --> 00:01:46.459
And when one of them is current,
we'll turn the inert attribute off.

27
00:01:46.459 --> 00:01:50.780
When that slide is active,
we'll remove the attribute.

28
00:01:50.780 --> 00:01:54.177
It's a Boolean attribute,
either it's there or it's not.

29
00:01:54.177 --> 00:01:59.087
Okay, so I'm gonna say setInert.

30
00:01:59.087 --> 00:02:00.750
Thank you, autocomplete.

31
00:02:00.750 --> 00:02:03.637
This is our first call of this.

32
00:02:03.637 --> 00:02:08.069
It's the first slide, so I'm gonna
pass in the node from the ref API, and

33
00:02:08.069 --> 00:02:12.287
I'm gonna just pass it a number and
the function will say, all right,

34
00:02:12.287 --> 00:02:14.816
if you match this index, set this value.

35
00:02:14.816 --> 00:02:17.666
And we have some state in React
that's always keeping track of which

36
00:02:17.666 --> 00:02:18.475
slide is current.

37
00:02:18.475 --> 00:02:21.288
So we can piggyback on that.

38
00:02:21.288 --> 00:02:23.282
Let's do the next one.

39
00:02:23.282 --> 00:02:30.328
It is ref=(node) setInert,
keeps trying to autocomplete for

40
00:02:30.328 --> 00:02:34.563
something that I did not [LAUGH] tell it.

41
00:02:34.563 --> 00:02:40.749
So it's going to complain until we go and
write this function.

42
00:02:40.749 --> 00:02:45.305
I only had three of these, so
I didn't make it too dynamic,

43
00:02:45.305 --> 00:02:49.692
I just hard-coded these in here,
setInert, slide 3.

44
00:02:49.692 --> 00:02:56.163
So our function that we are going
to use is called setInert.

45
00:02:56.163 --> 00:02:58.873
It takes the node from the React ref, and

46
00:02:58.873 --> 00:03:03.495
this is a way to get React to spit
out HTML that it doesn't know about,

47
00:03:03.495 --> 00:03:07.259
cuz it's valid HTML but
React is not supporting it yet.

48
00:03:07.259 --> 00:03:13.605
So it looks for the slide number,
which we are tracking with React state.

49
00:03:13.605 --> 00:03:16.742
So currentSlideNum,
anytime you click those buttons or

50
00:03:16.742 --> 00:03:21.394
if it's animating, it will increment that,
and then reset back to the beginning.

51
00:03:21.394 --> 00:03:23.237
That's how it spins around.

52
00:03:23.237 --> 00:03:28.503
And what it does is it moves that
element using translate CSS,

53
00:03:28.503 --> 00:03:34.290
so it will translate its x position
depending on what slide number.

54
00:03:34.290 --> 00:03:36.575
So we're gonna set the inactive ones.

55
00:03:36.575 --> 00:03:39.157
We'll set the attribute inert.

56
00:03:39.157 --> 00:03:42.197
Just takes an empty string to
get it to show up as value.

57
00:03:42.197 --> 00:03:46.849
And then when that slide is active,
we remove the attribute.

58
00:03:46.849 --> 00:03:52.104
So let's go save this and
go see how it looked.

59
00:03:52.104 --> 00:03:56.967
So I'm gonna inspect, So

60
00:03:56.967 --> 00:04:01.077
see if this, I think it worked.

61
00:04:01.077 --> 00:04:04.776
So aria-hidden, I need to take off,
actually, one more thing.

62
00:04:07.990 --> 00:04:12.597
I am going to delete those,
cuz it looked like inert was working, but

63
00:04:12.597 --> 00:04:18.168
these old attributes were not, and inert
will cover that, so we don't need both.

64
00:04:20.683 --> 00:04:22.647
Okay, so here we go.

65
00:04:22.647 --> 00:04:26.284
We have our first list item,
that's the one that's visible.

66
00:04:26.284 --> 00:04:31.588
And if I scroll, you can see the other
two, they are physically off to the side.

67
00:04:31.588 --> 00:04:36.738
So if I click this button and
it slides the next one in,

68
00:04:36.738 --> 00:04:42.697
now this one has already a hidden
of false and a inert's gone.

69
00:04:42.697 --> 00:04:45.138
And then as we go through again,
that will change us.

70
00:04:45.138 --> 00:04:50.620
So what that's doing for us is handling
any links that were inside of that.

71
00:04:50.620 --> 00:04:52.321
So we don't we just don't
have to do anything.

72
00:04:52.321 --> 00:04:56.988
We don't have to go step through the DOM
and put change tabindex on things,

73
00:04:56.988 --> 00:04:58.182
it's a huge pain.

74
00:04:58.182 --> 00:05:02.471
But we're keeping screen
readers from tabbing on

75
00:05:02.471 --> 00:05:06.155
elements that there would be ghost links.

76
00:05:06.155 --> 00:05:11.353
So kind of a hairy problem that
inert makes really easy for us.

77
00:05:11.353 --> 00:05:15.419
One thing I will say is that I'm
using a polyfill so that inert,

78
00:05:15.419 --> 00:05:20.636
if we're not in Chrome or it's supported,
if say, you're in, I don't know,

79
00:05:20.636 --> 00:05:26.163
Edge or I guess that's a chromium, but any
browser that doesn't support inert yet,

80
00:05:26.163 --> 00:05:29.658
this will still work,
because there's a polyphil.

81
00:05:29.658 --> 00:05:33.678
So let's go run Axe again,
see if we made it happier.

82
00:05:33.678 --> 00:05:35.623
Is there anything we missed?

83
00:05:35.623 --> 00:05:37.730
The alt text.

84
00:05:37.730 --> 00:05:39.872
And it is still mad,

85
00:05:39.872 --> 00:05:45.584
there's some different elements
that had aria-hidden on them.

86
00:05:45.584 --> 00:05:50.215
So this is a different element,
it's these buttons.

87
00:05:50.215 --> 00:05:53.084
So those ones should not have
aria-hidden on them at all.

88
00:05:53.084 --> 00:05:55.039
This is not the same fix for these.

89
00:05:55.039 --> 00:05:59.034
So these ones, for some reason,
had aria-hidden of true on them, but

90
00:05:59.034 --> 00:06:02.915
they're still focusable,
because they should be usable, right?

91
00:06:02.915 --> 00:06:03.902
We can tab onto them.

92
00:06:03.902 --> 00:06:07.063
We should be able to use
a screen reader with them, and

93
00:06:07.063 --> 00:06:11.152
aria-hidden is stripping away
information that we actually need.

94
00:06:11.152 --> 00:06:15.013
So we can go remove that in our alt text.

95
00:06:16.152 --> 00:06:19.171
So those buttons were
in the right component.

96
00:06:19.171 --> 00:06:23.574
Here's that aria-hidden,
let's get that out of there.

97
00:06:23.574 --> 00:06:27.318
There's one more down here,
get that out of there.

98
00:06:27.318 --> 00:06:29.494
And those were real examples, too.

99
00:06:29.494 --> 00:06:34.373
I borrowed inspiration from [LAUGH] a real
website, so some of these are made up.

100
00:06:34.373 --> 00:06:36.574
Some of them are real,
I just found in the wild.

101
00:06:36.574 --> 00:06:40.552
So our code bases can be doing all
kinds of things that we may or

102
00:06:40.552 --> 00:06:42.115
may not have intended.

103
00:06:42.115 --> 00:06:46.895
But if we test it and then we can go and
fix stuff, we can make it better.

104
00:06:46.895 --> 00:06:51.608
So we've got that one, I think our
image alt text will be the last bit.

105
00:06:51.608 --> 00:06:55.485
So this is somewhat dynamic.

106
00:06:55.485 --> 00:06:59.712
The goal is to make a component that you
can just feed it different sets of data.

107
00:06:59.712 --> 00:07:03.488
It'll be, voila, I'll show you a gallery,
but it's It's kind of half baked,

108
00:07:03.488 --> 00:07:04.164
I will admit.

109
00:07:04.164 --> 00:07:08.727
So we do have the capability
of pulling in alt text.

110
00:07:08.727 --> 00:07:11.652
So let's look at what
our dataset looks like.

111
00:07:11.652 --> 00:07:18.821
We have an image that we're mapping
over a series of gallery images.

112
00:07:18.821 --> 00:07:23.185
So these images come from some

113
00:07:23.185 --> 00:07:27.905
image data that gets passed in.

114
00:07:27.905 --> 00:07:31.467
I'm using TypeScript, so
I can actually go and

115
00:07:31.467 --> 00:07:34.951
see some of the structure
of this data object.

116
00:07:34.951 --> 00:07:37.288
I'm a total TypeScript convert.

117
00:07:37.288 --> 00:07:38.737
I'll admit it, it's awesome.

118
00:07:38.737 --> 00:07:43.166
[LAUGH] I've held out for
so long, I did not love it.

119
00:07:43.166 --> 00:07:46.655
But for stuff like this,
you can go down the path and see,

120
00:07:46.655 --> 00:07:49.143
does my data already have alt text in it?

121
00:07:49.143 --> 00:07:50.695
It might or it might not, and

122
00:07:50.695 --> 00:07:55.176
you can have a conversation about where's
that data gonna come from, question?

123
00:07:55.176 --> 00:07:58.507
&gt;&gt; Why did you have to
use the ref attribute?

124
00:07:58.507 --> 00:08:00.244
&gt;&gt; Great question, for the inert.

125
00:08:00.244 --> 00:08:05.912
So let me show you,
kind of glossed over the fix for that.

126
00:08:05.912 --> 00:08:08.691
We'll come back to the alt text.

127
00:08:08.691 --> 00:08:12.310
So that was in the header,
I'll show you why.

128
00:08:12.310 --> 00:08:19.062
So inert, It's this right here.

129
00:08:19.062 --> 00:08:23.834
Property inert does not exist on the HTML.

130
00:08:23.834 --> 00:08:28.505
So this is a TypeScript error,
basically saying that React and

131
00:08:28.505 --> 00:08:33.806
TypeScript don't think that's a real
attribute, even though it is.

132
00:08:33.806 --> 00:08:35.331
So like any developer,

133
00:08:35.331 --> 00:08:39.917
I went looking around to go and see,
can I change my TypeScript config?

134
00:08:39.917 --> 00:08:41.223
I tried all of it.

135
00:08:41.223 --> 00:08:46.670
There's supposedly a work around for
this by defining a Typescript,

136
00:08:46.670 --> 00:08:51.021
creating a definition for
this so React knows about it.

137
00:08:51.021 --> 00:08:52.589
I couldn't get it to work.

138
00:08:52.589 --> 00:08:57.459
So I think when you want to have
an end result of your markup

139
00:08:57.459 --> 00:09:02.328
being crafted in a certain way,
my own personal view is,

140
00:09:02.328 --> 00:09:05.380
do it by any [LAUGH] means necessary.

141
00:09:05.380 --> 00:09:08.078
And I had to use the ref API to do it.

142
00:09:08.078 --> 00:09:11.167
It's not quite as elegant,

143
00:09:11.167 --> 00:09:15.935
because I'm having to go and
call Dom APIs.

144
00:09:15.935 --> 00:09:19.530
So this node.setAttribute,
that's a bit of a smell.

145
00:09:19.530 --> 00:09:21.042
That's not the ideal way to do it.

146
00:09:21.042 --> 00:09:24.710
The React way and
why I love React is that normally,

147
00:09:24.710 --> 00:09:30.343
I would have just swapped out inert for
aria-hidden with our original code and

148
00:09:30.343 --> 00:09:35.400
it would have just been one and
done, easy, but it just didn't work.

149
00:09:35.400 --> 00:09:38.222
So if you wanna learn more,

150
00:09:38.222 --> 00:09:43.874
here is the discussion in
React not supporting inert.

151
00:09:43.874 --> 00:09:47.425
People are a little cranky about it,
understandably so.

152
00:09:47.425 --> 00:09:48.693
I don't know what's gonna happen with it.

153
00:09:48.693 --> 00:09:53.328
My hope is that they'll just fix this and
then we can use inert,

154
00:09:53.328 --> 00:09:59.021
maybe with a polyfill still, but not have
to do all this hacky ref node stuff.

155
00:09:59.021 --> 00:10:02.166
That is a really great question,
though, I'm glad you asked it.

156
00:10:02.166 --> 00:10:05.173
So keep an eye on this one,
I've got it in the codebase.

157
00:10:05.173 --> 00:10:07.430
So I'll make sure it's in the slides too,

158
00:10:07.430 --> 00:10:11.517
cuz it's something we'll have to keep
checking on, cuz this is so helpful.

159
00:10:11.517 --> 00:10:13.177
For modals for, I mean,

160
00:10:13.177 --> 00:10:17.535
even something as small as this
little announcements carousel.

161
00:10:17.535 --> 00:10:24.083
It can be a very helpful tool that we
should be able to use cuz it's valid.

162
00:10:24.083 --> 00:10:27.023
It's in the HTML standard.

163
00:10:27.023 --> 00:10:31.173
So yeah, that's why, question?

164
00:10:31.173 --> 00:10:35.322
&gt;&gt; Speaking on type scripts,
how useful do you think it is for

165
00:10:35.322 --> 00:10:38.551
catching some basic accessibility issues?

166
00:10:38.551 --> 00:10:42.376
Because I know for the example you were
showing a little bit earlier, we defined

167
00:10:42.376 --> 00:10:46.427
the property using the wrong name, that
feels like something that tested wouldn't

168
00:10:46.427 --> 00:10:50.100
be able to catch but I don't know from
your experience how reliable that is.

169
00:10:50.100 --> 00:10:54.413
&gt;&gt; It usually can, so
it sort of makes me wonder about

170
00:10:54.413 --> 00:10:58.327
the tool set of how
the site was the original.

171
00:10:58.327 --> 00:11:01.509
[LAUGH] The site that I was inspired by.

172
00:11:01.509 --> 00:11:04.039
You can kind of learn, I don't know,

173
00:11:04.039 --> 00:11:08.864
some interesting things about codebase
just from playing with it a lot,

174
00:11:08.864 --> 00:11:12.677
and so I do think that some
tools would be able to catch it.

175
00:11:12.677 --> 00:11:19.336
Probably the ESLint plugin for JSX,
I bet that would have caught it.

176
00:11:19.336 --> 00:11:23.822
Cuz yeah, a lot of these things,
it is surprising to see some of them,

177
00:11:23.822 --> 00:11:26.408
because we have a lot of tools that we'll

178
00:11:26.408 --> 00:11:29.772
point it out in development
cuz that would be ideal.

179
00:11:29.772 --> 00:11:35.223
Yeah, and things like the,
I mean, this inert example.

180
00:11:37.267 --> 00:11:42.182
That is potentially saving us
from something really tricky.

181
00:11:42.182 --> 00:11:45.064
I just happen to know that
it shouldn't be failing.

182
00:11:45.064 --> 00:11:48.635
So that's where it gets a little
tricky is like, is that valid?

183
00:11:48.635 --> 00:11:50.618
Can I use that?

184
00:11:50.618 --> 00:11:52.089
You have to dig in a little bit more.

185
00:11:52.089 --> 00:11:56.298
And if you read that issue or the pull
requests on React, there's some grumpy

186
00:11:56.298 --> 00:12:01.056
developers and they're going like, it's
2023 and we should be able to use this.

187
00:12:01.056 --> 00:12:05.756
You can kinda get the gist that it should
be something that should be in there.

188
00:12:05.756 --> 00:12:10.261
But something like aria-roll,
that's never gonna be valid.

189
00:12:10.261 --> 00:12:14.014
So I think the tooling can
potentially save us from stuff, but

190
00:12:14.014 --> 00:12:18.723
then here's the trade off, is that it's
a little bit too strict sometimes.

191
00:12:19.979 --> 00:12:26.802
But yeah, so inert, and
if you need to do things that React and

192
00:12:26.802 --> 00:12:31.396
TypeScript aren't very pleased about,

193
00:12:31.396 --> 00:12:36.270
the ref API,
you can do some trickery here.

194
00:12:36.270 --> 00:12:41.158
useEffect and the cleanup function
that comes with it can also

195
00:12:41.158 --> 00:12:45.018
be little back doors to try and
use some DOM APIs.

196
00:12:45.018 --> 00:12:50.177
I've done that a lot when you
click outside to close something.

197
00:12:50.177 --> 00:12:54.713
You have a component that you wanna
be able to click outside of it and

198
00:12:54.713 --> 00:12:58.196
have it collapse things,
you can use useEffect and

199
00:12:58.196 --> 00:13:03.798
document.addEventListener to mount and
unmount some events in the component.

200
00:13:03.798 --> 00:13:08.748
So we can kind of get little escape
hatches in React, but you definitely wanna

201
00:13:08.748 --> 00:13:13.854
use caution so that you're outputting
valid markup, and you're not creating

202
00:13:13.854 --> 00:13:18.985
any memory leaks, cuz I think that's some
of the risks with some of this stuff.

203
00:13:18.985 --> 00:13:25.083
Cool, image alt text, that's our last bit.

204
00:13:25.083 --> 00:13:27.259
So we were talking about TypeScript,

205
00:13:27.259 --> 00:13:30.388
trying to figure out what
data we have available to us.

206
00:13:30.388 --> 00:13:36.920
So our image data,
we are using the galleryImages.

207
00:13:36.920 --> 00:13:41.515
So I wanna go deeper
into where's that type?

208
00:13:41.515 --> 00:13:45.556
So I could go into my ImageData,

209
00:13:45.556 --> 00:13:50.049
galleryImages comes from image and

210
00:13:50.049 --> 00:13:54.102
it does have an alt in this type.

211
00:13:54.102 --> 00:13:56.564
And so
we happen to be looking at TypeScript.

212
00:13:56.564 --> 00:13:58.524
I think when you're working with teams,

213
00:13:58.524 --> 00:14:01.161
you could ask a person that
[LAUGH] you're working with.

214
00:14:01.161 --> 00:14:05.365
The code might not always tell you or
maybe typescript is just too much.

215
00:14:05.365 --> 00:14:07.539
I totally understand that.

216
00:14:07.539 --> 00:14:12.844
Wherever you have a source of information
of where the image asset's coming from,

217
00:14:12.844 --> 00:14:16.348
you could ask about alt text
kind of in that same realm.

218
00:14:16.348 --> 00:14:21.030
You sometimes just have to make it up,
write the alt text.

219
00:14:21.030 --> 00:14:24.269
That's not the best, but better than none.

220
00:14:24.269 --> 00:14:27.147
But for this, we should get all text.

221
00:14:27.147 --> 00:14:34.468
So our data is coming from, A file.

222
00:14:34.468 --> 00:14:35.922
So here's where this comes from.

223
00:14:35.922 --> 00:14:40.450
It is strongly typed,
which is really nice,

224
00:14:40.450 --> 00:14:46.299
I've found, but
our galleryImages do not have alt text.

225
00:14:46.299 --> 00:14:49.055
So if this was coming from
a backend API or something,

226
00:14:49.055 --> 00:14:51.271
I probably wouldn't be able to edit that.

227
00:14:51.271 --> 00:14:58.780
There is alt text for the top image,
the main image, so we could pull that in.

228
00:14:58.780 --> 00:15:03.609
And every image under that, I guess
that would be a conversation to be like,

229
00:15:03.609 --> 00:15:07.171
hey, where's the rest of
the alt text gonna come from?

230
00:15:07.171 --> 00:15:10.097
And I'll tell you what
the actual implementation had.

231
00:15:10.097 --> 00:15:13.103
It had that top level alt text for
every single image.

232
00:15:13.103 --> 00:15:16.873
So they wrote it in a way that
was generic enough that, I guess,

233
00:15:16.873 --> 00:15:19.943
they thought it could apply
to every single image.

234
00:15:19.943 --> 00:15:20.967
It's not very informative.

235
00:15:20.967 --> 00:15:24.845
If you're blind and
you're trying to learn about a product,

236
00:15:24.845 --> 00:15:29.406
you kinda wanna know what capabilities
it has, how are they showing it?

237
00:15:29.406 --> 00:15:35.910
So that's not a very accessible solution,
but this main image, at least.

238
00:15:35.910 --> 00:15:39.687
So this is a Chakra image component.

239
00:15:39.687 --> 00:15:43.698
The ones down below in the gallery
are just plain HTML elements.

240
00:15:43.698 --> 00:15:48.361
They have pretty seamless APIs for
the props.

241
00:15:48.361 --> 00:15:53.614
So this imageSource, not all caps,

242
00:15:53.614 --> 00:15:59.204
I can say alt, and then I could pass it,

243
00:15:59.204 --> 00:16:03.950
imageData.mainImage.alt and

244
00:16:03.950 --> 00:16:08.705
it has it, so I can bring that in.

245
00:16:08.705 --> 00:16:11.169
That's only gonna solve it for
this top one.

246
00:16:11.169 --> 00:16:18.643
So I think what I was saying the real site
did was they just used the same alt text.

247
00:16:21.178 --> 00:16:23.144
So if you needed to do something,

248
00:16:23.144 --> 00:16:27.709
you could do that in a pinch while you
also go have a conversation with your team

249
00:16:27.709 --> 00:16:31.173
about where's the real alt text
is [LAUGH] gonna come from?

250
00:16:31.173 --> 00:16:33.710
Hopefully, you can get a better answer.

251
00:16:33.710 --> 00:16:37.608
But this is kinda an example of how
some things can't be caught with

252
00:16:37.608 --> 00:16:38.731
automated tools.

253
00:16:38.731 --> 00:16:43.450
We caught that there wasn't an alt text
present, but it would be fine with this.

254
00:16:43.450 --> 00:16:45.295
Let's go see what this looks like,
actually.

255
00:16:45.295 --> 00:16:50.909
We'll go over to the browser,
I'm gonna rerun scan.

256
00:16:50.909 --> 00:16:52.169
We fixed everything.

257
00:16:52.169 --> 00:16:55.535
It's like, all right, cool,
except we use the alt text for

258
00:16:55.535 --> 00:16:57.064
one image for every image.

259
00:16:57.064 --> 00:17:00.837
So that's not that great.

260
00:17:00.837 --> 00:17:02.028
Let's see what the images are.

261
00:17:02.028 --> 00:17:07.012
So there's a detail closeup of the colors.

262
00:17:07.012 --> 00:17:10.818
There's a handle on top, you can see this
cute dog goes on a stand up paddleboard.

263
00:17:10.818 --> 00:17:14.150
I mean, there's so
much detail missing, right?

264
00:17:14.150 --> 00:17:18.560
So it kinda illustrates that we
can only fix so much with code.

265
00:17:18.560 --> 00:17:25.636
There's other conversations that we have
to have and it has to be planned for.

266
00:17:25.636 --> 00:17:31.266
We're code technicians, we can do
some things to push pixels around and

267
00:17:31.266 --> 00:17:35.346
add labels, but
it needs to be a requirement, too.

268
00:17:35.346 --> 00:17:38.386
So just know that it's not all on you.

269
00:17:38.386 --> 00:17:43.413
We need our teams to support us in getting
the right content into the right place.

