WEBVTT

1
00:00:00.083 --> 00:00:03.755
So for some parts of user interfaces,

2
00:00:03.755 --> 00:00:08.592
we wanna keep the user's
focus in a certain area.

3
00:00:08.592 --> 00:00:10.521
And this is called a keyboard trap.

4
00:00:10.521 --> 00:00:12.121
And we don't wanna do it unintentionally.

5
00:00:12.121 --> 00:00:15.626
[LAUGH] We wanna do this for
certain components.

6
00:00:15.626 --> 00:00:20.320
Like, if you're in a modal,
that's a good use case.

7
00:00:20.320 --> 00:00:23.017
Any kind of new layer
that comes over the top.

8
00:00:23.017 --> 00:00:26.868
I've seen entire apps where it's all
layers upon layers, upon layers,

9
00:00:26.868 --> 00:00:30.295
we wanna definitely keep users
from going outside of that layer.

10
00:00:30.295 --> 00:00:33.211
And so
that's what's called a keyboard trap.

11
00:00:33.211 --> 00:00:35.381
But sometimes it's unintentional.

12
00:00:35.381 --> 00:00:40.138
Have you ever tried to navigate a code pen
with a keyboard and you get into the text

13
00:00:40.138 --> 00:00:44.543
area, and you hit the tab key and
it just keeps, you're in a text editor.

14
00:00:44.543 --> 00:00:46.008
You can't get out.

15
00:00:46.008 --> 00:00:47.419
That's a tab trap.

16
00:00:47.419 --> 00:00:52.406
And you have to be kind of creative in
how you set that up to not have that be

17
00:00:52.406 --> 00:00:53.248
a problem.

18
00:00:53.248 --> 00:00:57.638
So one thing you could do,
just as an authoring tool developer,

19
00:00:57.638 --> 00:01:02.918
would be to wire up the escape key or some
way to get in and out of that edit mode so

20
00:01:02.918 --> 00:01:08.235
that keyboard users have a way to skip by
it and they have a way to get in and out.

21
00:01:08.235 --> 00:01:11.305
So, keyboard traps.

22
00:01:11.305 --> 00:01:15.957
And there is a criterion in MCAG,
it's level A, called No Keyboard Traps.

23
00:01:15.957 --> 00:01:21.262
It has some great information on
what's acceptable and what's not.

24
00:01:21.262 --> 00:01:24.303
We just don't wanna do
this unintentionally.

25
00:01:24.303 --> 00:01:30.833
So here is an example of what a keyboard
trap looks like, an intentional one.

26
00:01:30.833 --> 00:01:37.297
So this stack blitz,
I'm going to open in a new window.

27
00:01:37.297 --> 00:01:40.011
So I've got a library in
here called react-aria.

28
00:01:40.011 --> 00:01:42.557
It's pretty awesome.

29
00:01:42.557 --> 00:01:45.192
It's a little bit of an advanced tool,
I would say.

30
00:01:45.192 --> 00:01:48.030
But I can create what's
called a focus scope.

31
00:01:48.030 --> 00:01:52.206
So that's the easiest
focus trap I've ever seen.

32
00:01:52.206 --> 00:01:57.147
It's a component that I can pull in, wrap
it around the code that I want to contain

33
00:01:57.147 --> 00:02:01.669
at the right time, and I didn't even
have to write the actual focus trap.

34
00:02:01.669 --> 00:02:04.331
But let's see how that works,
cuz we should know.

35
00:02:04.331 --> 00:02:09.277
So if I open this layer,
there are some focusable items in here.

36
00:02:09.277 --> 00:02:12.246
There's two inputs and a Close button.

37
00:02:12.246 --> 00:02:16.803
So it's not styled really at all,
but my focus just cycles

38
00:02:16.803 --> 00:02:21.926
between these controls, so
between the inputs and the buttons.

39
00:02:21.926 --> 00:02:25.959
So you can imagine if
this was in a new layer,

40
00:02:25.959 --> 00:02:31.956
it would be pretty effective at
keeping my focus in that content.

41
00:02:31.956 --> 00:02:37.723
Let's see what it actually put into
the page, cuz that's pretty magical.

42
00:02:37.723 --> 00:02:39.836
There's content next to it, though.

43
00:02:39.836 --> 00:02:44.368
That's really what I wanna look at,
is there is an open button, and

44
00:02:44.368 --> 00:02:47.151
sure, my keyword focus was trapped, but

45
00:02:47.151 --> 00:02:50.749
can I get behind there somehow
if it was a modal layer?

46
00:02:50.749 --> 00:02:56.058
If I was a screen reader user, is the rest
of the stuff all still reachable?

47
00:02:56.058 --> 00:02:58.129
It probably is.

48
00:02:58.129 --> 00:03:04.384
So this element that it input is
a div with all of our stuff in it,

49
00:03:04.384 --> 00:03:10.300
and I think it just has some
JavaScript to cycle you around.

50
00:03:10.300 --> 00:03:15.362
So in our previous example, we got
pretty nerdy with the inert attribute.

51
00:03:15.362 --> 00:03:19.127
This is another case where
if you had a modal layer and

52
00:03:19.127 --> 00:03:24.178
you were creating a focus scope,
you could use inert on any background

53
00:03:24.178 --> 00:03:29.419
content to keep screen reader users
from being able to reach back there.

54
00:03:29.419 --> 00:03:32.775
Cuz right now all we're doing
is the JavaScript part, but

55
00:03:32.775 --> 00:03:35.665
we're talking about focus,
so it's relevant.

56
00:03:35.665 --> 00:03:38.224
But that's what a focus trap does,

57
00:03:38.224 --> 00:03:41.975
is it keeps you kind of in
that set of components, and

58
00:03:41.975 --> 00:03:47.545
that's pretty easy to do, at least if
you can use the React ARIA focus scope.

59
00:03:47.545 --> 00:03:53.595
There's probably other libraries too,
other utilities that you could pull in.

60
00:03:53.595 --> 00:03:56.252
Kind of observing their approach,

61
00:03:56.252 --> 00:04:01.219
is that they have elements before and
after what we've inserted.

62
00:04:01.219 --> 00:04:03.875
And so that gives us some signposts for

63
00:04:03.875 --> 00:04:08.441
the code underneath this that
makes that work, is whenever focus

64
00:04:08.441 --> 00:04:13.435
gets out of the items that you inserted,
it just loops in around again.

65
00:04:13.435 --> 00:04:16.393
They just kind of control where
your focus goes and send it back.

66
00:04:16.393 --> 00:04:19.360
Question.

67
00:04:19.360 --> 00:04:24.785
&gt;&gt; I see they shared
a very cool tip in chat.

68
00:04:24.785 --> 00:04:29.644
If you open up Chrome DevTools and
you hit the I, and

69
00:04:29.644 --> 00:04:36.424
then put in document.active.element,
that's a live expression,

70
00:04:36.424 --> 00:04:41.060
and you can see what
element is actually active.

71
00:04:41.060 --> 00:04:43.270
&gt;&gt; Cool, that's awesome.

72
00:04:43.270 --> 00:04:46.916
&gt;&gt; So now as you move around,
it'll just live update right there.

73
00:04:46.916 --> 00:04:50.777
&gt;&gt; Sweet, that's cool.

74
00:04:50.777 --> 00:04:53.994
Yeah, I have seen that before and
I forgot about it, so thank you.

75
00:04:58.484 --> 00:05:00.396
Chrome DevTools is amazing.

76
00:05:02.495 --> 00:05:06.965
Cool, so focus traps.

77
00:05:06.965 --> 00:05:11.963
And, yeah, it kinda gives us techniques
that we can use to keep people

78
00:05:11.963 --> 00:05:14.941
from getting stuck behind those layers.

79
00:05:14.941 --> 00:05:17.539
So do you need inert backgrounds?

80
00:05:17.539 --> 00:05:26.017
I think a good answer to this question is
just how easy would it be to implement.

81
00:05:26.017 --> 00:05:27.870
It works best when you have a sibling.

82
00:05:27.870 --> 00:05:29.793
So say I have modal content,

83
00:05:29.793 --> 00:05:34.681
if it's buried in my content in the DOM
somewhere, it's gonna be really

84
00:05:34.681 --> 00:05:39.589
hard to use inert because the modal
content is amongst everything else.

85
00:05:39.589 --> 00:05:42.902
Whereas if the modal and,
say, main are siblings and

86
00:05:42.902 --> 00:05:47.098
there's some separation,
I could put inert on the main element and

87
00:05:47.098 --> 00:05:51.903
that will keep that in the background and
then my modal will live separately.

88
00:05:51.903 --> 00:05:56.670
You just have to pay attention to
where your content that needs to stay

89
00:05:56.670 --> 00:06:00.873
on top that should be reachable and
accessible and trapped.

90
00:06:00.873 --> 00:06:03.416
That should be not inert.

91
00:06:03.416 --> 00:06:08.915
[LAUGH] That's the stuff
we wanna navigate with.

92
00:06:08.915 --> 00:06:13.440
So I think sometimes
the keyboard trap can be enough.

93
00:06:13.440 --> 00:06:18.163
I think you really wanna test it and
a screen reader.

94
00:06:18.163 --> 00:06:24.220
Yeah, it's part of the story but
a worthy technique.

95
00:06:28.335 --> 00:06:29.962
Keyboard shortcuts.

96
00:06:29.962 --> 00:06:34.503
So let's talk briefly
about keyboard shortcuts.

97
00:06:34.503 --> 00:06:35.455
They can be helpful.

98
00:06:35.455 --> 00:06:37.281
So if you have UI actions,

99
00:06:37.281 --> 00:06:42.842
especially if the shortcut takes a lot
more work than what a mouse user could do,

100
00:06:42.842 --> 00:06:46.494
like the accessible,
say you can do the same task but

101
00:06:46.494 --> 00:06:51.573
it takes a bit more effort, a keyboard
shortcut could be a good use case.

102
00:06:51.573 --> 00:06:56.525
And we have quite a few built in,
like Command+F for finding, Command+P for

103
00:06:56.525 --> 00:07:01.253
print, those are keyboard shortcuts
that are built into the platform, or

104
00:07:01.253 --> 00:07:03.220
Ctrl+P on a Windows machine.

105
00:07:03.220 --> 00:07:07.560
But custom keyboard shortcuts
can be useful in web apps.

106
00:07:07.560 --> 00:07:11.257
And so there are a couple of libraries
that could make this easier.

107
00:07:11.257 --> 00:07:16.313
There's one from Arthur Beaulieu and
Jon Kuperman.

108
00:07:16.313 --> 00:07:19.266
And so you can check those out.

109
00:07:19.266 --> 00:07:24.682
They're both named Shortcut.js, [LAUGH]
popular name for that type of tool.

110
00:07:24.682 --> 00:07:28.770
But what that can help you
do is manage meta keys.

111
00:07:28.770 --> 00:07:31.660
So if I have combinations of keys,

112
00:07:31.660 --> 00:07:36.755
it takes a little bit of trickery
to match that combination.

113
00:07:36.755 --> 00:07:41.835
It's not impossible, but sometimes
using a little utility makes it easier.

114
00:07:41.835 --> 00:07:45.180
And so we can create those shortcuts.

115
00:07:45.180 --> 00:07:48.127
So there's two things that
I want you to be aware of.

116
00:07:48.127 --> 00:07:52.667
One, is that shortcuts
need to be discoverable.

117
00:07:52.667 --> 00:07:57.486
If we put all this effort and dev work
into creating shortcuts that nobody

118
00:07:57.486 --> 00:08:00.729
knows about,
it might be a little bit of a waste.

119
00:08:00.729 --> 00:08:05.344
So, put them in your help documentation.

120
00:08:05.344 --> 00:08:09.669
I think Facebook had a cool approach
at one point where they had

121
00:08:09.669 --> 00:08:14.573
an accessibility nav bar that would
pop up at the top of the page when you

122
00:08:14.573 --> 00:08:16.671
started to use the keyboard.

123
00:08:16.671 --> 00:08:21.376
I don't know if it's still there, but
some way to tell users that you have these

124
00:08:21.376 --> 00:08:25.252
keyboard shortcuts,
if there's a little help icon on the page.

125
00:08:25.252 --> 00:08:29.514
Make them easy to find cuz
they're gonna be really niche and

126
00:08:29.514 --> 00:08:32.167
maybe not used that much otherwise.

127
00:08:32.167 --> 00:08:35.958
Put them on your accessibility docs or
on an accessibility statement.

128
00:08:35.958 --> 00:08:39.122
And then the other thing I want you
to know about keyboard shortcuts is,

129
00:08:39.122 --> 00:08:41.564
watch out for
conflicts with screen reader commands.

130
00:08:41.564 --> 00:08:47.123
So especially on Windows, there
are common key commands already in place.

131
00:08:47.123 --> 00:08:49.899
Like the H key,
that will cycle through headings.

132
00:08:49.899 --> 00:08:54.084
So you don't wanna just use plain
letters for your shortcuts, [LAUGH].

133
00:08:54.084 --> 00:08:57.221
They need to be kind of unique.

134
00:08:57.221 --> 00:08:59.540
So yeah, just something to be aware of,

135
00:08:59.540 --> 00:09:02.353
that screen reader commands
need to still work.

