WEBVTT

1
00:00:00.190 --> 00:00:05.100
Roles, states, and properties,
these are the building blocks of ARIA.

2
00:00:05.100 --> 00:00:10.872
So all of the attributes that are defined
in the ARIA specification are roles,

3
00:00:10.872 --> 00:00:16.570
states, or properties, such as role
button or aria-hidden of true.

4
00:00:16.570 --> 00:00:23.176
So roles are pretty straightforward in
that they are, what does the thing do?

5
00:00:23.176 --> 00:00:27.099
Is it a button, is it a checkbox?

6
00:00:27.099 --> 00:00:33.556
So as I mentioned, the button element
has an implicit role of button.

7
00:00:34.626 --> 00:00:37.345
The role of button will bolt it on.

8
00:00:37.345 --> 00:00:41.840
And in the accessibility tree's view,
that's seamless.

9
00:00:41.840 --> 00:00:42.970
It's pretty well supported.

10
00:00:42.970 --> 00:00:46.306
I mean,
I think you can do that pretty reliably.

11
00:00:46.306 --> 00:00:49.576
But div role button is
not the whole picture.

12
00:00:49.576 --> 00:00:51.976
So that's why we say use button first.

13
00:00:53.576 --> 00:00:55.181
So why would you even use that?

14
00:00:55.181 --> 00:00:59.973
It would be like, if for some reason,
you're building a custom component and

15
00:00:59.973 --> 00:01:01.290
you can't use HTML.

16
00:01:01.290 --> 00:01:03.295
I mean,
it'd better be a compelling reason.

17
00:01:03.295 --> 00:01:06.563
But there's so many constraints that
we deal with in the real world, but

18
00:01:06.563 --> 00:01:08.456
I'm sure it's come up.

19
00:01:08.456 --> 00:01:13.309
I mean, it could be that you have
really annoying old styling that you

20
00:01:13.309 --> 00:01:15.746
can't get rid of, or something.

21
00:01:17.286 --> 00:01:21.016
That's some technical debt that I
think would be worth facing, but

22
00:01:21.016 --> 00:01:22.856
sometimes we have constraints.

23
00:01:24.686 --> 00:01:26.376
So, I can think of another example.

24
00:01:26.376 --> 00:01:32.836
I worked on a big, it was actually
a desktop application that output widgets.

25
00:01:32.836 --> 00:01:37.065
So it was outputting Web widgets
that you could embed, and

26
00:01:37.065 --> 00:01:40.099
it exported divs for buttons.

27
00:01:40.099 --> 00:01:44.924
And the fix in the actual
desktop software application to

28
00:01:44.924 --> 00:01:48.679
output a button element was non-trivial.

29
00:01:48.679 --> 00:01:51.609
I wasn't like, hey, I'm just gonna
go in and swap that element out.

30
00:01:51.609 --> 00:01:58.489
No, it was old back-end code
to generate button elements.

31
00:01:58.489 --> 00:02:03.516
So yeah, we definitely put an issue
in the backlog to do that work.

32
00:02:03.516 --> 00:02:07.636
But in the meantime, are we just
gonna let button elements be divs?

33
00:02:07.636 --> 00:02:11.825
No, I bolted on a button role, and
tab index, and a keyboard event, and

34
00:02:11.825 --> 00:02:13.558
did the whole song and dance.

35
00:02:13.558 --> 00:02:15.407
Well, we kinda did both things.

36
00:02:15.407 --> 00:02:18.567
So that might be the solution if for
some reason, you're like,

37
00:02:18.567 --> 00:02:20.816
we can't use buttons right now.

38
00:02:20.816 --> 00:02:24.357
We are doing the work to upgrade
our infrastructure so that we can.

39
00:02:24.357 --> 00:02:29.130
But in the meantime, maybe you bolt on
a button role and all of the other parts.

40
00:02:31.527 --> 00:02:36.050
So when you're checking support for
an ARIA role, state, or property, or

41
00:02:36.050 --> 00:02:39.454
you're wanting to use them,
you should check support.

42
00:02:39.454 --> 00:02:42.885
So for something like aria-autocomplete or

43
00:02:42.885 --> 00:02:48.030
aria-drag where you're like,
isn't there an ARIA attribute for

44
00:02:48.030 --> 00:02:52.463
x or y that I saw on the ARIA spec or
I remembered at one time?

45
00:02:52.463 --> 00:02:54.528
It's good to do some research on it.

46
00:02:54.528 --> 00:02:58.452
So the first site I would
recommend is called

47
00:02:58.452 --> 00:03:02.810
Accessibility Support or a11ysupport.io.

48
00:03:02.810 --> 00:03:06.586
This is a community effort
to basically crowdsource.

49
00:03:06.586 --> 00:03:11.256
It's like a CanIUse.com for
ARIA attributes.

50
00:03:11.256 --> 00:03:16.555
So I think the example I
had was aria-autocomplete.

51
00:03:16.555 --> 00:03:20.765
Yikes, that's a no-go.

52
00:03:20.765 --> 00:03:21.984
Is it supported?

53
00:03:21.984 --> 00:03:24.922
Across the board, it's either none or
some partial support.

54
00:03:24.922 --> 00:03:31.242
So I'd say sorry, aria-autocomplete
attribute, that's just not gonna happen.

55
00:03:31.242 --> 00:03:32.121
What would be another one?

56
00:03:32.121 --> 00:03:36.419
I guess aria-drag,
I don't think that's a thing.

57
00:03:36.419 --> 00:03:41.548
Aria-dropeffect, yeah, that one's not

58
00:03:41.548 --> 00:03:46.406
documented and probably not supported.

59
00:03:46.406 --> 00:03:50.203
I'm surprised about aria-hidden.

60
00:03:50.203 --> 00:03:52.669
That's actually pretty well supported,
but there's no data on it.

61
00:03:52.669 --> 00:03:54.733
So that's still kind of interesting.

62
00:03:57.083 --> 00:03:58.403
Let's see, what would be another one?

63
00:03:58.403 --> 00:04:05.120
Aria-label, all green, all good,
supported, pretty reliable.

64
00:04:05.120 --> 00:04:08.036
You have to use aria-label
on the right role.

65
00:04:08.036 --> 00:04:10.617
You can't put it onto a div,
but that's not a support issue.

66
00:04:10.617 --> 00:04:13.175
That's just a technical requirement.

67
00:04:14.775 --> 00:04:20.988
And it's interesting they put screen
reader support, voice control support,

68
00:04:20.988 --> 00:04:25.479
aria-labelledby, so
this is some really helpful data.

69
00:04:26.799 --> 00:04:32.613
Another one I've used this for
is aria-expanded or aria-haspopup, so

70
00:04:32.613 --> 00:04:38.629
some of these things that we put on
custom, little drop-downs and things.

71
00:04:40.369 --> 00:04:43.654
Support's pretty good, but
we can go in and read more.

72
00:04:43.654 --> 00:04:47.347
What are the things that it's not passing?

73
00:04:47.347 --> 00:04:50.543
Simple trues or false seem pretty good,

74
00:04:50.543 --> 00:04:55.812
aside from narrator Orca,
which is Linux, or Android TalkBack.

75
00:04:55.812 --> 00:04:59.921
I could go test in some of those,
if I was really concerned.

76
00:04:59.921 --> 00:05:05.540
So talking about how to prioritize, this
is one direction I could go in to say, all

77
00:05:05.540 --> 00:05:11.337
right, I wanna use this ARIA attribute to
communicate the state of this component.

78
00:05:11.337 --> 00:05:14.253
I looked it up on
accessibilities port I/O and

79
00:05:14.253 --> 00:05:18.432
it looked green across the board,
except for Narrator and Edge.

80
00:05:18.432 --> 00:05:20.390
I'm gonna go test over there and
see what happens.

81
00:05:21.740 --> 00:05:22.690
So that's pretty cool.

82
00:05:22.690 --> 00:05:24.236
I mean, you should test it elsewhere too.

83
00:05:24.236 --> 00:05:30.877
But this is kind of helpful
data to digest and apply.

84
00:05:30.877 --> 00:05:34.734
So a11ysupport.io, and
they are community driven, so

85
00:05:34.734 --> 00:05:38.500
I'm sure they would love contributions.

86
00:05:38.500 --> 00:05:41.008
And then testing it in screen readers,

87
00:05:41.008 --> 00:05:46.541
cuz that's where the impact is really
gonna be felt, is in assistive technology.

88
00:05:46.541 --> 00:05:52.841
And that's also why it gets forgotten or
screwed up, is that I think developers,

89
00:05:52.841 --> 00:05:58.051
it's so easy to add ARIA, but
then the testing step gets missed.

90
00:05:58.051 --> 00:06:02.356
So we wanna make sure we're testing it,
or just don't include it at all.

91
00:06:02.356 --> 00:06:04.485
I learned that kind of
early on in my career,

92
00:06:04.485 --> 00:06:07.086
that I could make it a lot
worse without realizing it.

93
00:06:08.726 --> 00:06:13.865
So yeah, ARIA, you should just kind
of accept or remember that it should

94
00:06:13.865 --> 00:06:19.026
come with a bit of caution, [LAUGH] or
some testing time on your calendar.

95
00:06:20.069 --> 00:06:23.509
And then you can read up on mailing
lists like the ARIA GitHub.

96
00:06:23.509 --> 00:06:26.106
The NVDA GitHub is really great.

97
00:06:26.106 --> 00:06:29.133
That's where they developed
the Windows screen reader, NVDA.

98
00:06:29.133 --> 00:06:31.508
It's open source.

99
00:06:31.508 --> 00:06:37.070
It is a treasure trove of information
over there, especially for Windows issues

100
00:06:37.070 --> 00:06:42.221
that if you're primarily a Mac developer
and you start to test on Windows,

101
00:06:42.221 --> 00:06:46.993
you can dispel some misconceptions
just by reading the NVDA GitHub.

102
00:06:46.993 --> 00:06:49.763
Cuz somebody's probably had
the same question as you.

103
00:06:49.763 --> 00:06:53.364
And you can go and read,
and it is very helpful.

104
00:06:53.364 --> 00:06:57.613
And then the WebAIM email discussion list,
they have decades,

105
00:06:57.613 --> 00:07:01.242
I wanna say,
I don't know how many years of archives.

106
00:07:01.242 --> 00:07:05.456
But they have email archives from
a very long time ago that have

107
00:07:05.456 --> 00:07:10.418
discussions from people who work on
browsers, work on screen readers.

108
00:07:10.418 --> 00:07:15.139
The accessibility community includes
people who developed all of these

109
00:07:15.139 --> 00:07:17.082
specs and all of these tools.

110
00:07:17.082 --> 00:07:22.795
It's really cool that there's
answers from people that are so

111
00:07:22.795 --> 00:07:25.500
informed and instrumental.

112
00:07:25.500 --> 00:07:29.351
So you can use ARIA in your CSS selectors.

113
00:07:29.351 --> 00:07:32.086
It's a pretty cool technique to do,
I guess,

114
00:07:32.086 --> 00:07:34.760
depending on how your
styling is generated.

115
00:07:34.760 --> 00:07:42.113
But like any attribute selector,
you can match your CSS to certain ARIA.

116
00:07:42.113 --> 00:07:46.868
So for example,
if I have a custom role of checkbox,

117
00:07:46.868 --> 00:07:51.416
sure, I could add a class,
or an ID or something.

118
00:07:51.416 --> 00:07:55.175
I could also just match it
based on whether it has a role.

119
00:07:55.175 --> 00:07:58.199
I've done this when I need to
differentiate certain inputs from

120
00:07:58.199 --> 00:07:58.929
other inputs.

121
00:07:58.929 --> 00:08:02.736
I'll end up using these
attribute selectors.

122
00:08:02.736 --> 00:08:08.533
But the ARIA ones also, I could
style a disabled checkbox that way.

123
00:08:10.123 --> 00:08:14.348
Increasingly, a lot of codebases
are using things like Tailwind, so

124
00:08:14.348 --> 00:08:17.081
you might not have these
types of selectors.

125
00:08:17.081 --> 00:08:21.939
But Tailwind does a pretty good job of
incorporating accessibility into what

126
00:08:21.939 --> 00:08:23.068
they're doing.

127
00:08:23.068 --> 00:08:27.317
Love it or hate it,
they are at least making it possible for

128
00:08:27.317 --> 00:08:29.932
us to create similar experiences.

129
00:08:31.392 --> 00:08:34.170
I didn't ever think I would be
a Tailwind person, by the way,

130
00:08:34.170 --> 00:08:35.299
just a little side note.

131
00:08:35.299 --> 00:08:36.662
But it's been kind of awesome.

132
00:08:38.342 --> 00:08:39.386
It does get in my way, though.

133
00:08:39.386 --> 00:08:44.823
[LAUGH] Okay, so another example could
be styling off of aria-expanded.

134
00:08:44.823 --> 00:08:46.825
That's another one of those states.

135
00:08:46.825 --> 00:08:49.555
If it's true or false,
you can change how it's styled.

136
00:08:49.555 --> 00:08:50.055
Question?

137
00:08:51.445 --> 00:08:54.860
&gt;&gt; What about hidden anchor elements for

138
00:08:54.860 --> 00:09:00.549
screen readers like skip to main
content and skip navigation?

139
00:09:00.549 --> 00:09:03.219
&gt;&gt; Yes, so
the question was about skip links.

140
00:09:03.219 --> 00:09:07.339
We are gonna talk about skip
links in the next section.

141
00:09:07.339 --> 00:09:10.699
So with those,
we actually don't want them to be hidden.

142
00:09:11.799 --> 00:09:15.109
We wanna make them usable by
sighted keyboard users, too.

143
00:09:15.109 --> 00:09:19.384
So I think there used to be an approach
to skip links where we would put

144
00:09:19.384 --> 00:09:22.012
visually hidden on them for some reason.

145
00:09:22.012 --> 00:09:26.093
And let's just get that out of there,
no more of that.

146
00:09:26.093 --> 00:09:27.514
I don't know where that came from.

147
00:09:27.514 --> 00:09:32.259
But skip links are super useful
when you can see the screen and

148
00:09:32.259 --> 00:09:36.554
you wanna skip around,
like if you can't use a mouse.

149
00:09:36.554 --> 00:09:39.552
We actually would benefit from
some skip links on these slides.

150
00:09:39.552 --> 00:09:42.928
So yeah, we wanna make them visible, but

151
00:09:42.928 --> 00:09:47.080
we will talk about skip
links a little bit later on.

152
00:09:47.080 --> 00:09:50.659
All right, so accessible names and
descriptions,

153
00:09:50.659 --> 00:09:54.575
ARIA brings with it a pretty
foundational concept here.

154
00:09:54.575 --> 00:09:57.465
And we've already seen some of it.

155
00:09:57.465 --> 00:10:01.575
Accessible names apply to links, buttons,

156
00:10:01.575 --> 00:10:06.991
form controls, images,
tables, field sets, legends.

157
00:10:06.991 --> 00:10:11.259
Anything that has what we call a label,
quote-unquote,

158
00:10:11.259 --> 00:10:14.319
has a technical term of accessible name.

159
00:10:14.319 --> 00:10:16.665
So if you hear that, that's what that is.

160
00:10:16.665 --> 00:10:18.720
It's basically the label for something.

161
00:10:18.720 --> 00:10:21.638
And only certain elements can be labeled.

162
00:10:21.638 --> 00:10:26.173
You can't put aria-label on a div,
unless it has a certain role on it.

163
00:10:26.173 --> 00:10:28.586
But that's what that concept is.

164
00:10:28.586 --> 00:10:32.316
There's also the concept of
an accessible description,

165
00:10:32.316 --> 00:10:34.980
that if something has a label and a title,

166
00:10:34.980 --> 00:10:39.869
the title will be read kind of after
the initial text, after a bit of a delay.

167
00:10:39.869 --> 00:10:42.340
And that's what's called
an accessible description.

168
00:10:42.340 --> 00:10:46.284
Title will do it,
aria-describedby will do it.

169
00:10:46.284 --> 00:10:48.877
They're configurable on
the screen reader though, so

170
00:10:48.877 --> 00:10:51.704
you don't wanna count on
descriptions always being there.

171
00:10:54.136 --> 00:10:58.731
So aria-label, aria-labelledby,
aria-describedby, you can label things.

172
00:10:58.731 --> 00:11:05.029
And we've seen some of this already, but
I can bolt on a label pretty easily.

173
00:11:05.029 --> 00:11:08.929
The risk with aria-label sometimes,
and I saw this in a codebase recently,

174
00:11:08.929 --> 00:11:13.627
is people set it and then they forget it,
and it's not relevant text anymore.

175
00:11:13.627 --> 00:11:16.537
So I have a slight preference for
aria-labelledby,

176
00:11:16.537 --> 00:11:19.457
cuz it will just always stay
up to date with whatever.

177
00:11:19.457 --> 00:11:24.429
If this All About Wombats heading
is visible and it gets out of date,

178
00:11:24.429 --> 00:11:26.706
that'll probably get fixed.

179
00:11:26.706 --> 00:11:29.941
But then the accessibility
connection is still there.

180
00:11:29.941 --> 00:11:34.033
It's just gonna programmatically point to
that, so I think that's pretty awesome.

181
00:11:36.749 --> 00:11:42.052
And then aria-describedby, well,
it's very similar to labelledby.

182
00:11:42.052 --> 00:11:44.479
It just creates that
description instead of a name.

183
00:11:44.479 --> 00:11:51.009
So as we saw in the Chrome DevTools,
that will show us which thing wins.

184
00:11:51.009 --> 00:11:56.709
So when we have multiple,
like this tiny screenshot has aria-label,

185
00:11:56.709 --> 00:12:01.275
it has title, placeholder,
maybe more than one title.

186
00:12:01.275 --> 00:12:03.674
I'm not really sure what's
happening there, but

187
00:12:03.674 --> 00:12:05.695
we can see the description is helper text.

188
00:12:05.695 --> 00:12:10.305
The name is text,
on this very generic example.

189
00:12:10.305 --> 00:12:14.756
But that tool is excellent for
helping you see which thing wins,

190
00:12:14.756 --> 00:12:16.905
because something has to win.

191
00:12:18.633 --> 00:12:20.511
And in the Enterprise Workshop also,

192
00:12:20.511 --> 00:12:22.864
we are going to dive way
deeper into this topic.

193
00:12:22.864 --> 00:12:24.483
It gets pretty diggy.

