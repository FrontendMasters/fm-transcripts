WEBVTT

1
00:00:00.115 --> 00:00:03.625
So we'll start to get a bit
more technical now and

2
00:00:03.625 --> 00:00:08.512
apply things to actually go and
improve accessibility that we see.

3
00:00:08.512 --> 00:00:10.368
Our code base will use React,

4
00:00:10.368 --> 00:00:15.240
but the stuff applies no matter what
type of a frontend stack you're using.

5
00:00:15.240 --> 00:00:19.690
So you could be working with
the hottest new JavaScript framework.

6
00:00:19.690 --> 00:00:23.203
I really enjoyed Svelte recently.

7
00:00:23.203 --> 00:00:29.267
Speaking of data visualizations with D3,
you could be generating things that way.

8
00:00:29.267 --> 00:00:33.919
Or you could use Astro or
use GraphQL APIs or

9
00:00:33.919 --> 00:00:39.356
whatever the framework of
the week happens to be.

10
00:00:39.356 --> 00:00:43.472
If it's just generating a frontend
that users are interacting with,

11
00:00:43.472 --> 00:00:45.226
accessibility is a concern.

12
00:00:46.836 --> 00:00:51.888
So maybe something you could do,
especially if you're newer to a framework,

13
00:00:51.888 --> 00:00:56.262
but maybe you're more familiar with HTML,
CSS, and JavaScript.

14
00:00:56.262 --> 00:01:01.174
An approach you could take would be
to do some prototyping upfront before

15
00:01:01.174 --> 00:01:03.517
translating it into a framework.

16
00:01:03.517 --> 00:01:06.981
That's something I do a lot
when I just need to tell

17
00:01:06.981 --> 00:01:11.444
kind of quickly in a lightweight manner,
is this going to work?

18
00:01:11.444 --> 00:01:15.873
Before I go and do all of the work
of integrating it into my stack,

19
00:01:15.873 --> 00:01:18.755
I might do a lighter weight version of it.

20
00:01:18.755 --> 00:01:19.900
Maybe I do use React.

21
00:01:19.900 --> 00:01:21.027
I like React.

22
00:01:21.027 --> 00:01:25.898
But just saying that if you have
constraints that it would benefit you,

23
00:01:25.898 --> 00:01:30.121
you can consider doing some
prototyping to just feel more free

24
00:01:30.121 --> 00:01:33.709
while you're testing out an idea or
an experiment.

25
00:01:35.723 --> 00:01:41.337
And whether your output is in HTML,
CSS, and JavaScript,

26
00:01:41.337 --> 00:01:46.518
or a more robust framework,
the basics always apply.

27
00:01:46.518 --> 00:01:49.027
So it really is about what gets rendered.

28
00:01:49.027 --> 00:01:53.880
Is it well-structured using as many
default HTML elements as possible,

29
00:01:53.880 --> 00:01:55.220
cuz there's a lot.

30
00:01:55.220 --> 00:01:58.053
So what do I mean by well-structured?

31
00:01:58.053 --> 00:02:02.083
So HTML provides structural semantics.

32
00:02:02.083 --> 00:02:04.508
They are really helpful in screen readers.

33
00:02:04.508 --> 00:02:08.750
We saw earlier there were landmark
elements and buttons and forms.

34
00:02:08.750 --> 00:02:14.626
All those elements that are not divs have
meaning [LAUGH] as we'll learn about.

35
00:02:14.626 --> 00:02:18.376
We did learn about accessibility tree,
and so

36
00:02:18.376 --> 00:02:23.385
you might start to be able to
connect how tags become objects.

37
00:02:23.385 --> 00:02:28.933
It's a very robust process that
if we use semantic HTML elements,

38
00:02:28.933 --> 00:02:34.591
we can help that out by actually
creating an accessible structure.

39
00:02:34.591 --> 00:02:40.642
So it's non-visual, and it really goes
beyond the way that something looks.

40
00:02:40.642 --> 00:02:43.241
And there are so many defaults these days.

41
00:02:43.241 --> 00:02:48.605
Fortunately, form elements are getting
easier to style here in 2023.

42
00:02:48.605 --> 00:02:52.031
We have some easier to
style form elements.

43
00:02:52.031 --> 00:02:58.244
Never thought I'd see it, I'm very
happy to see it though, it's awesome.

44
00:02:58.244 --> 00:03:03.579
I think form elements being hard to style
are how the legacy of inaccessible stuff

45
00:03:03.579 --> 00:03:08.853
came about, was because we were trying
to meet client needs, customer needs.

46
00:03:08.853 --> 00:03:13.043
We couldn't style it and
still use the default HTML element.

47
00:03:14.123 --> 00:03:19.154
Well, it's really hard to replace some
of that functionality, because we get

48
00:03:19.154 --> 00:03:24.503
a lot for free with things like links and
selects, trying to create a custom select.

49
00:03:24.503 --> 00:03:27.685
There's features in that component
that you might not even realize.

50
00:03:27.685 --> 00:03:30.905
So you have to recreate those
if you make your own version.

51
00:03:30.905 --> 00:03:35.228
It can be done, just to say,
it can be done accessibly as well, but

52
00:03:35.228 --> 00:03:36.552
you don't have to.

53
00:03:36.552 --> 00:03:40.724
If you can advocate for
using the default HTML element,

54
00:03:40.724 --> 00:03:44.647
pose it as, hey,
we're gonna save time and money.

55
00:03:44.647 --> 00:03:49.483
[SOUND] [LAUGH] l You might be able to
convince your teammates off of the heavily

56
00:03:49.483 --> 00:03:54.418
styled customization ledge and
just use the default thing, potentially.

57
00:03:54.418 --> 00:03:58.648
So I would recommend checking
out Mozilla Developer Network,

58
00:03:58.648 --> 00:04:00.656
their list of HTML elements.

59
00:04:00.656 --> 00:04:03.844
I learn something new
every time I look at that.

60
00:04:03.844 --> 00:04:08.902
I'll even go and refresh my memory of, how
does that element or that attribute work?

61
00:04:08.902 --> 00:04:12.906
I've been doing a lot of stuff
with forms recently, and so

62
00:04:12.906 --> 00:04:16.582
I definitely went and
looked at the reference to go and

63
00:04:16.582 --> 00:04:21.745
make sure that I was aware of everything
available to me with the defaults.

64
00:04:22.781 --> 00:04:28.128
So when it comes to HTML, we wanna
use semantic HTML whenever we can.

65
00:04:28.128 --> 00:04:32.702
We also use generic HTML, like divs and
spans, as wrapper elements.

66
00:04:32.702 --> 00:04:34.879
They're great for styling.

67
00:04:34.879 --> 00:04:40.050
I do a lot of layout with CSS Grid and
Flexbox, and so I'm definitely adding

68
00:04:40.050 --> 00:04:46.024
generic elements to give the right
structure to match my layouts and things.

69
00:04:46.024 --> 00:04:47.872
But those sort of get ignored,

70
00:04:47.872 --> 00:04:52.114
like those divs are not going to
be put in the accessibility tree.

71
00:04:52.114 --> 00:04:55.504
Only semantic HTML elements will,
so we need a combo of both.

72
00:04:58.304 --> 00:05:03.353
So I have kind of a funny graphic
here From South Park that says,

73
00:05:03.353 --> 00:05:06.313
a Marklar walks into a Marklar.

74
00:05:06.313 --> 00:05:09.043
Marklar asks the Marklar,
do you have any Marklar?

75
00:05:09.043 --> 00:05:12.883
The Marklar shakes its Marklar and
says, no, we only have Marklar.

76
00:05:12.883 --> 00:05:17.826
That would basically be an analog
to Div Soup all the way down,

77
00:05:17.826 --> 00:05:19.833
just like divs, solid.

78
00:05:20.883 --> 00:05:21.816
So that's what we wanna avoid.

79
00:05:21.816 --> 00:05:24.658
Here's a screenshot of Div Soup.

80
00:05:24.658 --> 00:05:29.219
It's a long tree structure of div,
div div, div, div.

81
00:05:29.219 --> 00:05:32.744
There's no accessibility information here.

82
00:05:32.744 --> 00:05:35.786
I see a div rule button buried in there.

83
00:05:35.786 --> 00:05:39.142
That's ARIA disabled, but it's a div.

84
00:05:39.142 --> 00:05:43.968
It's not focusable from what I can tell,
so it might as well just be a div cuz it

85
00:05:43.968 --> 00:05:47.403
doesn't have all the other
things that it would need.

86
00:05:47.403 --> 00:05:50.795
I think that might,
I see a real progress bar.

87
00:05:50.795 --> 00:05:52.004
[LAUGH] Otherwise,

88
00:05:52.004 --> 00:05:56.542
I think that might be the most divs
I've seen in one place in a long time.

89
00:05:56.542 --> 00:05:58.520
So I think we can do more than that.

90
00:05:58.520 --> 00:06:05.499
I mean, any webpage is probably gonna
have a need for more semantic HTML.

91
00:06:05.499 --> 00:06:07.369
So we should use what we can.

92
00:06:07.369 --> 00:06:09.224
So starting with headings,

93
00:06:09.224 --> 00:06:13.799
we can use h1 through h6 headings
to create an overall page outline.

94
00:06:15.319 --> 00:06:19.210
We wanna try and choose the right
heading level for the content,

95
00:06:19.210 --> 00:06:21.021
not based on the way it looks.

96
00:06:21.021 --> 00:06:24.720
So that's kind of pitfall
number one of what I see a lot,

97
00:06:24.720 --> 00:06:28.343
is you'll get class names or
heading styles that are,

98
00:06:28.343 --> 00:06:33.020
they're called h1 through h4,
whatever, you have a style guide.

99
00:06:33.020 --> 00:06:38.405
And the design, it just leads you down
this path of choosing the heading

100
00:06:38.405 --> 00:06:43.541
level based on the way it looks,
cuz that's in the design, right?

101
00:06:43.541 --> 00:06:46.551
Well, we need to pick the heading
level based on what the content is.

102
00:06:46.551 --> 00:06:51.480
So if there's an overall page
structure that we can slot this into,

103
00:06:51.480 --> 00:06:57.889
like h2 comes after h1, h3 comes after h2,
and it creates that structure, right?

104
00:06:57.889 --> 00:07:00.664
I think of it like in Microsoft Word,

105
00:07:00.664 --> 00:07:06.572
how there's an outline that you can make
with Roman numerals and Google Docs,

106
00:07:06.572 --> 00:07:12.679
how everything's indented and it all
falls under everything hierarchically.

107
00:07:12.679 --> 00:07:14.588
That's what headings will do.

108
00:07:14.588 --> 00:07:18.947
They will create that structure so
that if you can't see the screen,

109
00:07:18.947 --> 00:07:23.175
you can still digest it and
get an idea of the hierarchy of content.

110
00:07:24.779 --> 00:07:29.507
There was, at one time, an HTML5
heading algorithm that sort of has been

111
00:07:29.507 --> 00:07:34.711
haunting us because it was never really
implemented for assistive technology.

112
00:07:34.711 --> 00:07:39.688
The idea there was that you could
start h1s over again in excerpts.

113
00:07:39.688 --> 00:07:42.438
So they were more portable.

114
00:07:42.438 --> 00:07:43.992
But it never really worked.

115
00:07:43.992 --> 00:07:48.161
So we wanna scratch that
[LAUGH] unfortunately and

116
00:07:48.161 --> 00:07:51.622
have an overall page outline.

117
00:07:51.622 --> 00:07:55.740
So 1h1, we try and go in order just so
that the content does kind of,

118
00:07:55.740 --> 00:08:00.082
you can tell from looking at just
the heading structure, what's on it.

119
00:08:02.052 --> 00:08:04.615
So landmark elements, question.

120
00:08:04.615 --> 00:08:09.190
&gt;&gt; So it might be related, and
feel free to point it if it's not, but

121
00:08:09.190 --> 00:08:13.767
I guess on a similar note,
when you're using React components or

122
00:08:13.767 --> 00:08:18.512
any kind of UI library, how do you
figure out what a heading should be

123
00:08:18.512 --> 00:08:22.217
when you're trying to make
a reusable component?

124
00:08:22.217 --> 00:08:27.613
Because it feels like my, well, if I place
the setting here, it's in h2 for now.

125
00:08:27.613 --> 00:08:32.783
But then if I place it in this other part
of the UI that gets graded months from

126
00:08:32.783 --> 00:08:38.669
now, and I didn't anticipate any of this,
what heading level should it be?

127
00:08:38.669 --> 00:08:42.982
It feels like maybe the option is
polymorphic components where you just set

128
00:08:42.982 --> 00:08:47.038
it when you're using it, but
I don't know if you have any other tips.

129
00:08:47.038 --> 00:08:49.557
&gt;&gt; Yes, so great question.

130
00:08:49.557 --> 00:08:50.675
I'm glad you mentioned it.

131
00:08:50.675 --> 00:08:55.426
So when you have to plug a component in
and you can't guarantee where it goes,

132
00:08:55.426 --> 00:09:00.525
I think the option I've used for that is
to make the heading level configurable.

133
00:09:00.525 --> 00:09:03.284
So being something you pass in.

134
00:09:03.284 --> 00:09:05.342
It would be nice if that was automatic.

135
00:09:05.342 --> 00:09:08.689
So I don't know of any tools
that are automatic like that.

136
00:09:08.689 --> 00:09:14.498
I mean, maybe Facebook has something like
that, cuz they're huge and super advanced.

137
00:09:14.498 --> 00:09:18.486
But if you can pass in
a heading level to a component,

138
00:09:18.486 --> 00:09:23.383
you can have React kind of combine
the tag name that you pass in and

139
00:09:23.383 --> 00:09:29.070
you can generate elements based on
tag names dynamically that way.

140
00:09:29.070 --> 00:09:30.900
So that's one technique.

141
00:09:30.900 --> 00:09:36.530
There is an ARIA role of
heading with ARIA level.

142
00:09:36.530 --> 00:09:41.131
It's not great because then
you're putting ARIA on something

143
00:09:41.131 --> 00:09:45.924
rather than using the default,
which is the h1 through h6 tag.

144
00:09:45.924 --> 00:09:49.085
And you'd still have to figure
out what level it had to be.

145
00:09:49.085 --> 00:09:53.558
The only thing it would save you is not
having to generate an element kind of

146
00:09:53.558 --> 00:09:54.506
dynamically.

147
00:09:54.506 --> 00:09:57.639
But I think if you're gonna do one,
I mean,

148
00:09:57.639 --> 00:10:01.475
you might as well use
the default HTML element first.

149
00:10:01.475 --> 00:10:04.728
But yeah, I'd say probably
passing in the heading level.

150
00:10:04.728 --> 00:10:06.879
It's not that elegant.

151
00:10:06.879 --> 00:10:12.985
I guess if you had some way to
magically just read the overall page,

152
00:10:12.985 --> 00:10:17.892
it would have to be done at
compile time or something,

153
00:10:17.892 --> 00:10:21.070
and that seems maybe too magical.

154
00:10:21.070 --> 00:10:26.008
It might be not the most elegant to pass
in tag names when you're using them, but

155
00:10:26.008 --> 00:10:27.788
it's also not too magical.

156
00:10:27.788 --> 00:10:29.368
So it's easy to grok.

157
00:10:29.368 --> 00:10:35.629
And I think that code that's
easy to understand has benefits.

158
00:10:37.941 --> 00:10:38.561
Okay.

