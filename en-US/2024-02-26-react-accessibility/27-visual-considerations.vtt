WEBVTT

1
00:00:00.130 --> 00:00:04.802
We've talked so much about the mechanics
of all these factors of accessibility,

2
00:00:04.802 --> 00:00:09.540
probably so much more than you even
really wanted, frankly, [LAUGH].

3
00:00:09.540 --> 00:00:13.480
But there's visual aspects that
we have to consider as well,

4
00:00:13.480 --> 00:00:16.217
starting with color and visual contrast.

5
00:00:16.217 --> 00:00:19.882
When we tested with debugging earlier,
color contrast,

6
00:00:19.882 --> 00:00:24.088
I think on one site there was
almost 100 color contrast issues.

7
00:00:24.088 --> 00:00:28.613
And so, that multiplied across
the web is a huge number of

8
00:00:28.613 --> 00:00:32.118
accessibility issues for color contrast.

9
00:00:32.118 --> 00:00:35.896
And so with this,
we've seen some tools for this.

10
00:00:35.896 --> 00:00:41.687
The Chrome color picker and the Firefox
color picker were super useful for this.

11
00:00:41.687 --> 00:00:44.171
And the ratios are mathematical, so

12
00:00:44.171 --> 00:00:48.670
we can calculate whether something
passes or not, which is nice.

13
00:00:49.890 --> 00:00:54.991
So the requirements,
the regular non-bold text

14
00:00:54.991 --> 00:01:01.678
size below 24 pixels must have
a contrast ratio of 4.5:1.

15
00:01:01.678 --> 00:01:05.256
24 pixels is pretty big, so
that's like big headings.

16
00:01:05.256 --> 00:01:10.068
Those pieces of text that are large
scale only have to meet 3:1.

17
00:01:10.068 --> 00:01:13.664
They're bigger, they're easier to see,
pretty straightforward.

18
00:01:14.754 --> 00:01:18.315
WCAG, for
some reason does mention 18 points.

19
00:01:18.315 --> 00:01:23.197
But pixels,
that's a unit that we're used to more,

20
00:01:23.197 --> 00:01:28.417
like pixels or rems or
something, points, not so much.

21
00:01:28.417 --> 00:01:31.809
So just know, 18 points is 24 pixels,

22
00:01:31.809 --> 00:01:35.587
that's that threshold
to get into the 3 to 1.

23
00:01:37.267 --> 00:01:42.602
There's also a criterion for non-text
contrast, that's things like buttons,

24
00:01:42.602 --> 00:01:46.727
form controls, icon buttons,
those only need to meet 3:1.

25
00:01:48.137 --> 00:01:50.621
So we saw some tooling for
checking contrast,

26
00:01:50.621 --> 00:01:54.717
there's the Axe Chrome extension,
we'll touch some of this.

27
00:01:54.717 --> 00:01:59.700
There's one that we haven't looked at yet,
that's the Color Contrast Analyzer,

28
00:01:59.700 --> 00:02:01.538
it's a desktop application.

29
00:02:01.538 --> 00:02:04.723
This one's great,
cuz I could be in a Zoom call,

30
00:02:04.723 --> 00:02:09.402
and someone could be demoing a pattern or
a design system or something.

31
00:02:09.402 --> 00:02:14.578
And I can sample a color in Zoom,
and I could answer them right then.

32
00:02:14.578 --> 00:02:17.550
It might not be totally
accurate cuz of the Internet.

33
00:02:17.550 --> 00:02:22.055
But you can sample literally any
application on your computer for contrast.

34
00:02:22.055 --> 00:02:26.445
It could be a PDF,
it could be a Zoom call, whatever.

35
00:02:26.445 --> 00:02:30.785
So this one is pretty handy,
it gives you an eyedropper.

36
00:02:30.785 --> 00:02:32.975
You can go around and
check foreground, background color.

37
00:02:34.235 --> 00:02:35.575
So that one's worth checking out.

38
00:02:37.075 --> 00:02:39.749
WebAIM has a contrast
checker on their website.

39
00:02:39.749 --> 00:02:44.703
For design, there's Stark,
for Figma as well, and

40
00:02:44.703 --> 00:02:49.117
there's also a AAA criterion that's 7:1.

41
00:02:49.117 --> 00:02:52.449
So we don't wanna rely on color alone.

42
00:02:52.449 --> 00:02:58.231
If you had, say, on your e-commerce site,
you have different colorways of products,

43
00:02:58.231 --> 00:03:03.341
you wanna describe what the color is,
also, in addition to the color swatch.

44
00:03:03.341 --> 00:03:06.074
Things like data visualizations
come up with this a lot.

45
00:03:06.074 --> 00:03:10.163
So that you can have
some differentiation so

46
00:03:10.163 --> 00:03:15.368
that you aren't relying on
perception of color alone.

47
00:03:15.368 --> 00:03:19.166
And I have some links in here, if you're
curious to dive in more to color,

48
00:03:19.166 --> 00:03:20.962
including this pretty funny one.

49
00:03:20.962 --> 00:03:25.287
It's almost like a quiz, from TPG.

50
00:03:25.287 --> 00:03:29.888
It says, when I get that low-contrast
feeling, I need non-textual healing.

51
00:03:29.888 --> 00:03:31.637
It's a really funny name.

52
00:03:31.637 --> 00:03:36.979
But the post itself is actually really
great, because they have scenarios

53
00:03:36.979 --> 00:03:42.571
where they walk you through,
I don't know, it's almost like a quiz.

54
00:03:42.571 --> 00:03:44.451
So that one you should
check out after this.

55
00:03:46.711 --> 00:03:51.928
Okay, reflow, so
this is the bit about accessibility and

56
00:03:51.928 --> 00:03:56.730
responsive design and
how closely coupled they are.

57
00:03:56.730 --> 00:04:00.777
And we did touch on this one,
we did some debugging.

58
00:04:00.777 --> 00:04:05.668
So designing for reflow,
we want things to go into a single column.

59
00:04:05.668 --> 00:04:10.534
Thinking about form controls, if you can
stack the label over the form input,

60
00:04:10.534 --> 00:04:15.343
that makes it so you don't have to
horizontally scroll if you are low vision.

61
00:04:15.343 --> 00:04:18.640
We want font size and
things to be adjustable.

62
00:04:18.640 --> 00:04:22.813
I like to set the font size on
the HTML tag and then use rems, and

63
00:04:22.813 --> 00:04:26.037
it will scale automatically, it's amazing.

64
00:04:27.987 --> 00:04:30.440
And some web tools to test reflow.

65
00:04:30.440 --> 00:04:33.404
We saw just the built-in zoom is awesome,
but

66
00:04:33.404 --> 00:04:36.908
there's also the device
toolbar in Chrome DevTools.

67
00:04:36.908 --> 00:04:40.888
So just to point that one out,
it's a over here on the DevTools,

68
00:04:40.888 --> 00:04:43.714
there is this little
toggle device toolbar.

69
00:04:44.734 --> 00:04:51.374
And you can change the device,
you can change it to any screen width.

70
00:04:52.574 --> 00:04:58.719
You can throttle it, all these cool
things, but that is another tool for this.

71
00:04:58.719 --> 00:05:02.747
And then there's additional
platform tools with macOS, iOS.

72
00:05:02.747 --> 00:05:04.773
Windows has a magnifier,

73
00:05:04.773 --> 00:05:09.845
there's also a third-party tool
called ZoomText, so reflow.

74
00:05:12.816 --> 00:05:20.192
Okay, reducing motion, this is what
our last exercise will be about.

75
00:05:20.192 --> 00:05:23.923
So, motion is a big thing,
it can make people sick.

76
00:05:23.923 --> 00:05:30.119
It can make people faint or
have a seizure.

77
00:05:30.119 --> 00:05:31.994
It can be pretty serious.

78
00:05:31.994 --> 00:05:36.688
And so, fortunately,
we have some tools that make it really

79
00:05:36.688 --> 00:05:40.187
easy to safely respond
to user preferences,

80
00:05:40.187 --> 00:05:44.806
including something called
prefers-reduced-motion.

81
00:05:44.806 --> 00:05:49.648
It's super well-supported, and
even on platforms where it happens

82
00:05:49.648 --> 00:05:53.093
to not be supported,
you can add a little toggle or

83
00:05:53.093 --> 00:05:58.196
something to let the user still tell
you that they prefer reduced motion.

84
00:05:58.196 --> 00:06:01.332
So turning this on, on a Mac,

85
00:06:01.332 --> 00:06:05.848
we go under Accessibility &gt; Display, and

86
00:06:05.848 --> 00:06:12.001
there's this little setting
here called Reduce motion.

87
00:06:12.001 --> 00:06:17.533
And so, that is really powerful,
cuz you can impact your webpages.

88
00:06:17.533 --> 00:06:19.265
You can see the state turning on and

89
00:06:19.265 --> 00:06:23.463
off with something that works with reduced
motion just by checking that check box.

90
00:06:25.753 --> 00:06:30.852
And so for this, we have a CSS
media query, we can say @media, and

91
00:06:30.852 --> 00:06:36.242
for our condition,
prefers-reduced-motion: no-preference.

92
00:06:36.242 --> 00:06:40.048
And that will say if
the setting exists and

93
00:06:40.048 --> 00:06:45.506
they haven't checked it,
then we can do animation stuff.

94
00:06:45.506 --> 00:06:49.484
So the flip side of that is when
things are animated by default,

95
00:06:49.484 --> 00:06:53.488
we can say @media
(prefers-reduced-motion: reduce).

96
00:06:53.488 --> 00:06:57.259
And that way, if the user checks
that check or checks that setting,

97
00:06:57.259 --> 00:06:59.578
then we can turn animation off.

98
00:06:59.578 --> 00:07:04.528
So it's kind of the same thing, but
it's whether your default is animated or

99
00:07:04.528 --> 00:07:08.198
not, you can opt into animation
when it's safe to do so.

100
00:07:08.198 --> 00:07:12.388
And that way if the user's on
a platform that doesn't support that,

101
00:07:12.388 --> 00:07:13.842
it won't be animated.

102
00:07:13.842 --> 00:07:19.039
Whereas the other way, everyone
gets animation until they opt out.

103
00:07:19.039 --> 00:07:21.755
Just two ways to do similar things.

104
00:07:21.755 --> 00:07:26.187
So here's an example,
I'm gonna open this up.

105
00:07:26.187 --> 00:07:31.787
We've got this cat animation,
this uses keyframes.

106
00:07:31.787 --> 00:07:37.351
It has this infinite animation in a mask.

107
00:07:37.351 --> 00:07:43.234
And then down here,
we have prefers-reduced-motion: reduce,

108
00:07:43.234 --> 00:07:47.475
and in my system preferences, it stopped.

109
00:07:47.475 --> 00:07:50.882
[LAUGH] I can stop the animation
just by clicking that.

110
00:07:50.882 --> 00:07:54.802
And then our code matches and
it responds, it's pretty awesome, so

111
00:07:54.802 --> 00:07:56.027
there it goes again.

112
00:07:57.956 --> 00:08:05.227
So, very powerful, I'm gonna turn it back
on so we can look at our next example.

113
00:08:05.227 --> 00:08:08.126
So, that's the CSS media query.

114
00:08:08.126 --> 00:08:10.826
Sometimes JavaScript
might be the way to go.

115
00:08:10.826 --> 00:08:14.455
And our example that we'll work on
in a few minutes, our last example,

116
00:08:14.455 --> 00:08:17.073
we are going to use
the JavaScript version of this.

117
00:08:18.314 --> 00:08:23.443
So, it looks very similar,
but instead of CSS,

118
00:08:23.443 --> 00:08:27.698
we store a variable for a motion query and

119
00:08:27.698 --> 00:08:35.064
store this matchMedia function, and
that is where our CSS bit goes.

120
00:08:35.064 --> 00:08:39.857
So the prefers-reduced-motion:
no-preference or reduce.

121
00:08:39.857 --> 00:08:45.894
And you can store a variable to
flip when that condition changes.

122
00:08:45.894 --> 00:08:48.899
We make a motionQuery listener,

123
00:08:48.899 --> 00:08:54.385
then the more modern version of
this is to use a change event.

124
00:08:54.385 --> 00:08:58.549
I think it used to use like
a addListener API, it worked fine, but

125
00:08:58.549 --> 00:08:59.856
it was deprecated.

126
00:08:59.856 --> 00:09:06.009
So the current version of this is to
addEventlistener, use a change event.

127
00:09:06.009 --> 00:09:10.687
And then it will call this callback
function whenever that state changes.

128
00:09:10.687 --> 00:09:15.936
So the handleReducedMotionChange then
will go and watch that motion query.

129
00:09:15.936 --> 00:09:21.103
We call it once to make it fire on load,
and then it will respond.

130
00:09:21.103 --> 00:09:24.046
So here's an example of that, going back,

131
00:09:24.046 --> 00:09:27.073
kind of a throwback to
my ActionScript days.

132
00:09:29.463 --> 00:09:37.334
These eyes will follow your mouse cursor,
Which is kind of whimsical and fun.

133
00:09:37.334 --> 00:09:41.913
So it calculates the vanilla
JavaScript to move where the eyes

134
00:09:41.913 --> 00:09:45.095
are pointing based on where your mouse is.

135
00:09:46.555 --> 00:09:52.513
And then we have the motionQuery in here
that the mousemove listener will go and

136
00:09:52.513 --> 00:09:56.315
check that variable for
the user's preference.

137
00:09:56.315 --> 00:10:01.806
So let's go turn that off, Reduce motion,
now the eyes are not moving.

138
00:10:01.806 --> 00:10:07.484
So, in case you have some animation or
motion that's all delivered

139
00:10:07.484 --> 00:10:12.576
with JavaScript, you have a hook
now to go and turn that off.

140
00:10:12.576 --> 00:10:17.271
So that can be handy, so, Reduce motion.

141
00:10:17.271 --> 00:10:22.086
We have prefers-color-scheme, this one
is kind of how this theme of these

142
00:10:22.086 --> 00:10:26.163
slides are created, so
you can match on light mode or dark mode.

143
00:10:26.163 --> 00:10:29.785
It's built in,
similarly well supported, and so

144
00:10:29.785 --> 00:10:33.605
it's under System Settings &gt; Appearance.

145
00:10:33.605 --> 00:10:36.824
And we have, like prefers-reduced-motion,

146
00:10:36.824 --> 00:10:40.203
we have prefers-color-scheme,
dark or light.

147
00:10:40.203 --> 00:10:45.768
And then you can do the JavaScript
version as well with match media.

148
00:10:45.768 --> 00:10:47.852
And just a reminder to
check your contrast.

149
00:10:47.852 --> 00:10:51.370
So if you're doing multiple modes
like these slides, I had to go in and

150
00:10:51.370 --> 00:10:53.303
change a few things.

151
00:10:53.303 --> 00:10:57.079
But we have some pretty
awesome tooling for this now.

152
00:10:58.965 --> 00:11:04.172
Okay, so accessibility and
performance, just a mention of that.

153
00:11:04.172 --> 00:11:09.978
We have this concept in performance
these days of skeleton layouts,

154
00:11:09.978 --> 00:11:12.391
and they're pretty great.

155
00:11:12.391 --> 00:11:16.424
I guess my hope is that we
can think beyond the visual.

156
00:11:16.424 --> 00:11:20.686
And so if we're showing something
on screen, maybe just add like

157
00:11:20.686 --> 00:11:25.580
loading in a live region or something
to announce that the page is loading.

158
00:11:25.580 --> 00:11:29.345
Cuz that is a very visual approach
to a performance problem.

159
00:11:29.345 --> 00:11:33.405
So consider making a screen reader
announcement as part of that.

160
00:11:34.925 --> 00:11:38.304
We want to minimize blocking
interactions so the page will load fast,

161
00:11:38.304 --> 00:11:40.089
that really affects everybody.

162
00:11:40.089 --> 00:11:44.019
So we have some metrics
we could use to track

163
00:11:44.019 --> 00:11:48.069
how long things are taking, that can help.

164
00:11:49.779 --> 00:11:53.349
Performance as a user experience metric.

165
00:11:53.349 --> 00:11:58.517
So I have a graphic from a Tootsie Pop
commercial that made me think of it,

166
00:11:58.517 --> 00:12:02.416
how many keystrokes does
it take to complete a task?

167
00:12:02.416 --> 00:12:06.442
So I think that could be another
way to think about performance,

168
00:12:06.442 --> 00:12:09.806
as how many steps does it
take to complete something?

169
00:12:09.806 --> 00:12:12.706
It's kind of another way
to think about performance.

170
00:12:12.706 --> 00:12:17.531
And this is really a throwback
to one of the most pivotal books

171
00:12:17.531 --> 00:12:22.462
in my career that I read was
Don't Make Me Think by Steve Krug.

172
00:12:22.462 --> 00:12:27.011
We wanna keep things simple,
fewer steps, kind of gets into UX.

173
00:12:27.011 --> 00:12:32.204
But if you can invoke performance as
not only how fast your site loads,

174
00:12:32.204 --> 00:12:36.780
but how complex is it,
I think that could help in the pursuit of

175
00:12:36.780 --> 00:12:40.144
making things simpler and more accessible.

176
00:12:40.144 --> 00:12:43.433
And therefore, often,
easier to build and maintain.

