[00:00:00]
>> So some screen reader stuff. You can dive way deep in this. Obviously, we just scratched the surface. What I really want you to know kind of going forward are some tips for debugging. So screen reading might be one aspect of debugging. So debugging, you could also call web accessibility testing.

[00:00:21]
It's something all devs should do. It's like regular automated testing or learning concepts about security or performance. I think accessibility is even more foundational than some of those things, because of the direct impact on how our user interfaces affect people's lives. Yeah, all of these concerns are important.

[00:00:43]
But I think accessibility testing should be part of your regular workflow. And once you get in the habit of opening up the tools, testing it, hopefully it will just lodge in your mind like it has for me, so that it just becomes a matter of habit of, okay, I'm gonna test with the keyboard.

[00:01:03]
Okay, I'm gonna test with the axe extension. So that's the first step I take is, I use my tab key to navigate through a page. It's as simple as it sounds. You hit tab, and tab through things, you see, can I reach and navigate? Reach and operate every interactive control on a page.

[00:01:24]
So if a mouse user can click on it, as a keyboard user I should be able to do the same task. It might not be the exact same element, I might have a click event on a wrapper element or something that only mouse users use, but then within that, I have a focusable link, or button, or some other way to do the same thing.

[00:01:47]
So I wanna be able to accomplish every task as a keyboard user. And if you ditch your mouse completely, just don't use it for a day, maybe you could put some paper over your trackpad, it seems great extreme, but you know what I'm saying. If you can have a process where you cannot bail out and use your mouse, you're probably gonna find some issues that need to get fixed.

[00:02:12]
Yeah, cuz it's pervasive, but it's something we can address in a lot of cases. So can you reach and operate every control? Can you see where you are on the screen? Is there a focus outline? We have the default blue. I will say the slide materials that we have right now, the whole sidebar is a series of components that I really wanna contribute back to.

[00:02:36]
It's not exactly how I want the keyboard accessibility to be. So sometimes you have to go, open up an issue or a pull request on an open source library and say, hey, can we make this configurable, or can I just contribute a fix for this? That's probably what I'll do.

[00:02:55]
Because when these menus over here on the left are closed, we should be able to skip by them. It's actually forcing me through every single link in the sidebar, which can get tedious. As a sighted user, I can skip by those sections coz they're collapsed. But as a keyboard user, it's opening them to try and be helpful.

[00:03:15]
But it ends up being kind of annoying. [LAUGH] So that's why we have to test it. So I'm just trying to get through here. Some skip links could be helpful too, if I could skip past this sidebar, I think that's a feature that I'd like to add to this.

[00:03:31]
So I've got a little theme picker on the bottom left of the screen, so I can get between dark mode and light mode. If I hit Enter on that, it opens up a little light mode, dark mode picker, and it sent focus to that, so I opened that interactive widget, and then I can use my arrow keys to go through these items, that's pretty slick.

[00:03:53]
Can I hit the Escape key? Yes, I can. So escape took me back to the button that prompted that to open, and then I can skip on by, I can get to all of the interactive things on the page. Something you don't want to have happened is, you don't wanna get stuck behind any layers.

[00:04:11]
If there's a modal dialogue, we wanna send focus into it and replace it when it's done, and I shouldn't get stuck back there. Cuz mouse users aren't stuck back there. They can mouse around and do things. But keyboard and screen reader users are often literally left behind. [LAUGH] So we can avoid that with some focus management.

[00:04:32]
And can I use other common key commands like escape or the arrow keys or the space key? So we tested with the tab key. The next thing that I would do is open a browser DevTools extension, like Axe for Chrome, or Firefox, or Edge, and we'll do all of these steps in a minute.

[00:04:51]
I also zoom the page to at least 200% on my Mac keyboard, that is command plus, and I can zoom when it conveniently mimics my responsive breakpoints and stuff. So anything you do for responsive design, will work for zoom and magnification, something we call reflow, which is very awesome that that just works together.

[00:05:21]
So I can zoom back out with command minus, I think it's control plus, control minus, on the Windows keyboard. So by zooming in regularly, you can see, do the layouts, reflow. Are there any components that are straight up broken, interactive things are happening off-screen, or you have horizontal scrolling where you shouldn't?

[00:05:43]
And that is so that people who are low vision, who zoom way in, can still navigate. And there's some exceptions, as we'll talk about a little bit later, like some interfaces are just going to have horizontal scrolling and there are exceptions. But for the most part, it should be responsive and reflow these days.

[00:06:02]
We wanna test other visual modes. So on this site, I have light mode and dark mode. I had to fix a few things. I think in light mode, it didn't look great, but in dark mode, it was great. So I just had to add some CSS for that.

[00:06:19]
I have running a screen reader is pretty far down the list. So it's not the first thing. Conceptually, we wanna know about it, but it isn't in my even top three things of how I test. But when you do, because you should, pull up those cheat sheets for whichever screen reader you're testing.

[00:06:39]
Double-check before filing an issue on Jira, maybe get another opinion or you can work with people who use screen readers regularly as well. And that's very important. We shouldn't just guess. We have all these biases. We're new to screen readers. We can see the screen. If you can work with people who use screen readers and pay them for their time, that's gonna yield way better results, so whenever you can do that, you should.

[00:07:08]
And then, kind of just to make sure we don't miss this, for media content like audio or video, make sure that there are transcripts and/or captions, and make sure your media players can accommodate that content. So these steps could apply to any website or web application. I got a great question, just like random email question about someone who was curious about the accessibility of Microsoft 365, just randomly asked me that question.

[00:07:39]
And I thought, that's a good question because people are evaluating tools to use, and they wanna know how accessible it is, and so these techniques would apply to that. It's cloud-based web software, it needs to be accessible, so these techniques are things that I would use to evaluate that, if I were looking to procure a tool for HR or anything.

[00:08:02]
And fortunately, there are some sort of crowd-sourced feedback on accessible platforms. You could search for Microsoft 365 accessibility. Microsoft might even have some of their own documentation on it. But just to kind of drive home that, anything that's web-based can be tested with these techniques for the most part.

[00:08:30]
So those are the steps, and we will use these steps in a little bit. So Linters and DevTools. There's a ton of different tools that you can use. Different browsers. I have built-in browser DevTools that are excellent these days. Chrome is my choice that I reach for all the time.

[00:08:51]
I know sometimes the Chrome and their practices, Google, is not people's preferred browser. So some people use Firefox, and there are awesome tools in Firefox now. Their color picker is amazing. It can help you identify the contrast ratio of different elements. That's one of my favorites. Great layout tools as well in Firefox.

[00:09:17]
Safari also has awesome tools. They're kind of forgotten about, but there's some accessibility inspector things, an audit feature, the responsive design mode in Safari, it's pretty excellent as well. Built-into Chrome is lighthouse. It is an accessibility auditing tool built into the browser. It runs the axe-core JavaScript library.

[00:09:43]
And then we get into browser extensions. So within the browser, my number one, my daily driver, is the Axe Chrome extension. It's by Deque. I used to work on that, so I am a little biased, but it's just solid. It's an awesome tool. You can check how a page looks at runtime.

[00:10:04]
And then if you have things like modals or other components, you could run it again, and make sure it didn't miss anything. And we'll test it out to see things like what labels are on the issues. Are they best practices, or are they actually tied to violations in the web content accessibility guidelines?

[00:10:26]
That's kind of good things to pay attention to. You can go straight from the results in that extension over to highlight elements and look at them in the DevTools. We'll check that out. And then there's kind of upsell tools within the extension, if you wanna expand into tools that your organization pays for, I know they put a lot of effort into those.

[00:10:51]
Another tool we're checking out is accessibility insights for web from Microsoft. It also uses the axe-core library. You'll sort of see that come up again and again. It's an awesome tool. Should definitely check that one out. The web developer toolbar for Firefox and Chrome, I'm gonna pull that one up as well.

[00:11:13]
It's pretty awesome. It's really the best tool I've found for looking at heading structure. So we could install that one. And then when it comes to linting, for ESLint and text editors, there is one for React applications called ESLint-Plugin-JSX-A11y, sort of a standard ESLint plugin. There's another one from Deque called Axe Linter.

[00:11:37]
I used it a while back. Haven't used it super recently, but it could be an option for projects that aren't JSX or React-based. One thing I will say about linters is you might need to tweak the settings. Sometimes they have rules that just come up again and again and again, and if you ignore them because they don't apply to your situation or it's just kind of guessing wrong, you can turn that rule off.

[00:12:02]
Rather than you don't wanna have the team kind of getting used to ignoring results. It's better to fine tune the tools so that they're relevant, and then if something comes up, you actually pay attention. Kind of a similar theme with automated testing as well.

