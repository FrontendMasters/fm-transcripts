[00:00:00]
>> We've talked so much about the mechanics of all these factors of accessibility, probably so much more than you even really wanted, frankly, [LAUGH]. But there's visual aspects that we have to consider as well, starting with color and visual contrast. When we tested with debugging earlier, color contrast, I think on one site there was almost 100 color contrast issues.

[00:00:24]
And so, that multiplied across the web is a huge number of accessibility issues for color contrast. And so with this, we've seen some tools for this. The Chrome color picker and the Firefox color picker were super useful for this. And the ratios are mathematical, so we can calculate whether something passes or not, which is nice.

[00:00:49]
So the requirements, the regular non-bold text size below 24 pixels must have a contrast ratio of 4.5:1. 24 pixels is pretty big, so that's like big headings. Those pieces of text that are large scale only have to meet 3:1. They're bigger, they're easier to see, pretty straightforward. WCAG, for some reason does mention 18 points.

[00:01:18]
But pixels, that's a unit that we're used to more, like pixels or rems or something, points, not so much. So just know, 18 points is 24 pixels, that's that threshold to get into the 3 to 1. There's also a criterion for non-text contrast, that's things like buttons, form controls, icon buttons, those only need to meet 3:1.

[00:01:48]
So we saw some tooling for checking contrast, there's the Axe Chrome extension, we'll touch some of this. There's one that we haven't looked at yet, that's the Color Contrast Analyzer, it's a desktop application. This one's great, cuz I could be in a Zoom call, and someone could be demoing a pattern or a design system or something.

[00:02:09]
And I can sample a color in Zoom, and I could answer them right then. It might not be totally accurate cuz of the Internet. But you can sample literally any application on your computer for contrast. It could be a PDF, it could be a Zoom call, whatever. So this one is pretty handy, it gives you an eyedropper.

[00:02:30]
You can go around and check foreground, background color. So that one's worth checking out. WebAIM has a contrast checker on their website. For design, there's Stark, for Figma as well, and there's also a AAA criterion that's 7:1. So we don't wanna rely on color alone. If you had, say, on your e-commerce site, you have different colorways of products, you wanna describe what the color is, also, in addition to the color swatch.

[00:03:03]
Things like data visualizations come up with this a lot. So that you can have some differentiation so that you aren't relying on perception of color alone. And I have some links in here, if you're curious to dive in more to color, including this pretty funny one. It's almost like a quiz, from TPG.

[00:03:25]
It says, when I get that low-contrast feeling, I need non-textual healing. It's a really funny name. But the post itself is actually really great, because they have scenarios where they walk you through, I don't know, it's almost like a quiz. So that one you should check out after this.

[00:03:46]
Okay, reflow, so this is the bit about accessibility and responsive design and how closely coupled they are. And we did touch on this one, we did some debugging. So designing for reflow, we want things to go into a single column. Thinking about form controls, if you can stack the label over the form input, that makes it so you don't have to horizontally scroll if you are low vision.

[00:04:15]
We want font size and things to be adjustable. I like to set the font size on the HTML tag and then use rems, and it will scale automatically, it's amazing. And some web tools to test reflow. We saw just the built-in zoom is awesome, but there's also the device toolbar in Chrome DevTools.

[00:04:36]
So just to point that one out, it's a over here on the DevTools, there is this little toggle device toolbar. And you can change the device, you can change it to any screen width. You can throttle it, all these cool things, but that is another tool for this.

[00:04:58]
And then there's additional platform tools with macOS, iOS. Windows has a magnifier, there's also a third-party tool called ZoomText, so reflow. Okay, reducing motion, this is what our last exercise will be about. So, motion is a big thing, it can make people sick. It can make people faint or have a seizure.

[00:05:30]
It can be pretty serious. And so, fortunately, we have some tools that make it really easy to safely respond to user preferences, including something called prefers-reduced-motion. It's super well-supported, and even on platforms where it happens to not be supported, you can add a little toggle or something to let the user still tell you that they prefer reduced motion.

[00:05:58]
So turning this on, on a Mac, we go under Accessibility > Display, and there's this little setting here called Reduce motion. And so, that is really powerful, cuz you can impact your webpages. You can see the state turning on and off with something that works with reduced motion just by checking that check box.

[00:06:25]
And so for this, we have a CSS media query, we can say @media, and for our condition, prefers-reduced-motion: no-preference. And that will say if the setting exists and they haven't checked it, then we can do animation stuff. So the flip side of that is when things are animated by default, we can say @media (prefers-reduced-motion: reduce).

[00:06:53]
And that way, if the user checks that check or checks that setting, then we can turn animation off. So it's kind of the same thing, but it's whether your default is animated or not, you can opt into animation when it's safe to do so. And that way if the user's on a platform that doesn't support that, it won't be animated.

[00:07:13]
Whereas the other way, everyone gets animation until they opt out. Just two ways to do similar things. So here's an example, I'm gonna open this up. We've got this cat animation, this uses keyframes. It has this infinite animation in a mask. And then down here, we have prefers-reduced-motion: reduce, and in my system preferences, it stopped.

[00:07:47]
[LAUGH] I can stop the animation just by clicking that. And then our code matches and it responds, it's pretty awesome, so there it goes again. So, very powerful, I'm gonna turn it back on so we can look at our next example. So, that's the CSS media query. Sometimes JavaScript might be the way to go.

[00:08:10]
And our example that we'll work on in a few minutes, our last example, we are going to use the JavaScript version of this. So, it looks very similar, but instead of CSS, we store a variable for a motion query and store this matchMedia function, and that is where our CSS bit goes.

[00:08:35]
So the prefers-reduced-motion: no-preference or reduce. And you can store a variable to flip when that condition changes. We make a motionQuery listener, then the more modern version of this is to use a change event. I think it used to use like a addListener API, it worked fine, but it was deprecated.

[00:08:59]
So the current version of this is to addEventlistener, use a change event. And then it will call this callback function whenever that state changes. So the handleReducedMotionChange then will go and watch that motion query. We call it once to make it fire on load, and then it will respond.

[00:09:21]
So here's an example of that, going back, kind of a throwback to my ActionScript days. These eyes will follow your mouse cursor, Which is kind of whimsical and fun. So it calculates the vanilla JavaScript to move where the eyes are pointing based on where your mouse is. And then we have the motionQuery in here that the mousemove listener will go and check that variable for the user's preference.

[00:09:56]
So let's go turn that off, Reduce motion, now the eyes are not moving. So, in case you have some animation or motion that's all delivered with JavaScript, you have a hook now to go and turn that off. So that can be handy, so, Reduce motion. We have prefers-color-scheme, this one is kind of how this theme of these slides are created, so you can match on light mode or dark mode.

[00:10:26]
It's built in, similarly well supported, and so it's under System Settings > Appearance. And we have, like prefers-reduced-motion, we have prefers-color-scheme, dark or light. And then you can do the JavaScript version as well with match media. And just a reminder to check your contrast. So if you're doing multiple modes like these slides, I had to go in and change a few things.

[00:10:53]
But we have some pretty awesome tooling for this now. Okay, so accessibility and performance, just a mention of that. We have this concept in performance these days of skeleton layouts, and they're pretty great. I guess my hope is that we can think beyond the visual. And so if we're showing something on screen, maybe just add like loading in a live region or something to announce that the page is loading.

[00:11:25]
Cuz that is a very visual approach to a performance problem. So consider making a screen reader announcement as part of that. We want to minimize blocking interactions so the page will load fast, that really affects everybody. So we have some metrics we could use to track how long things are taking, that can help.

[00:11:49]
Performance as a user experience metric. So I have a graphic from a Tootsie Pop commercial that made me think of it, how many keystrokes does it take to complete a task? So I think that could be another way to think about performance, as how many steps does it take to complete something?

[00:12:09]
It's kind of another way to think about performance. And this is really a throwback to one of the most pivotal books in my career that I read was Don't Make Me Think by Steve Krug. We wanna keep things simple, fewer steps, kind of gets into UX. But if you can invoke performance as not only how fast your site loads, but how complex is it, I think that could help in the pursuit of making things simpler and more accessible.

[00:12:40]
And therefore, often, easier to build and maintain.

