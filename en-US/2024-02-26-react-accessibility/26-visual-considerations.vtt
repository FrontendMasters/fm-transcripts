WEBVTT

1
00:00:00.000 --> 00:00:04.951
We've talked so much about the mechanics
of all these factors of accessibility,

2
00:00:04.951 --> 00:00:08.694
probably so much more than you
even really wanted, frankly.

3
00:00:08.694 --> 00:00:13.122
[LAUGH] But there's visual aspects
that we have to consider as well,

4
00:00:13.122 --> 00:00:15.927
starting with color and visual contrast.

5
00:00:15.927 --> 00:00:19.730
When we tested with debugging earlier,
color contrast,

6
00:00:19.730 --> 00:00:24.087
I think on one site there was
almost 100 color contrast issues.

7
00:00:24.087 --> 00:00:28.274
And so that multiplied across
the web is a huge number of

8
00:00:28.274 --> 00:00:31.653
accessibility issues for color contrast.

9
00:00:31.653 --> 00:00:35.813
And so with this,
we've seen some tools for this.

10
00:00:35.813 --> 00:00:41.672
The Chrome color picker and the Firefox
color picker were super useful for this.

11
00:00:41.672 --> 00:00:44.514
And the ratios are mathematical, so

12
00:00:44.514 --> 00:00:49.661
we can calculate whether something
passes or not, which is nice.

13
00:00:49.661 --> 00:00:54.908
So the requirements,
the regular non-bold text size

14
00:00:54.908 --> 00:01:00.734
below 24 pixels must have
a contrast ratio of 4.5 to 1.

15
00:01:00.734 --> 00:01:03.530
24 pixels is pretty big.

16
00:01:03.530 --> 00:01:05.332
So that's like big headings.

17
00:01:05.332 --> 00:01:10.025
Those pieces of text that are large
scale only have to meet 3 to 1.

18
00:01:10.025 --> 00:01:15.002
They're bigger, they're easier to see,
pretty straightforward.

19
00:01:15.002 --> 00:01:20.535
WCAG, for some reason,
does mention 18 points, but pixels,

20
00:01:20.535 --> 00:01:26.486
that's a unit that we're used to more,
pixels or rems or something.

21
00:01:26.486 --> 00:01:28.383
Points, not so much.

22
00:01:28.383 --> 00:01:32.660
So just note, 18 points is 24 pixels.

23
00:01:32.660 --> 00:01:37.047
That's that threshold
to get into the 3 to 1.

24
00:01:37.047 --> 00:01:40.064
There's also a criterion for
non-text contrast.

25
00:01:40.064 --> 00:01:43.984
That's things like buttons, form controls,

26
00:01:43.984 --> 00:01:47.908
icon buttons,
those only need to meet 3 to 1.

27
00:01:47.908 --> 00:01:50.680
So we saw some tooling for
checking contrast,

28
00:01:50.680 --> 00:01:54.532
there's the Axe Chrome extension,
we'll touch some of this.

29
00:01:54.532 --> 00:01:58.525
There's one that we haven't looked at yet,
that's the Color Contrast Analyzer,

30
00:01:58.525 --> 00:01:59.997
it's a desktop application.

31
00:01:59.997 --> 00:02:03.914
This one's great cuz I could
be in a Zoom call, and

32
00:02:03.914 --> 00:02:09.230
someone could be demoing a pattern or
a design system or something,

33
00:02:09.230 --> 00:02:14.570
and I can sample a color in Zoom,
and I could answer them right then.

34
00:02:14.570 --> 00:02:17.666
Might not be totally accurate
cuz of the Internet, but

35
00:02:17.666 --> 00:02:21.851
you can sample literally any application
on your computer for contrast.

36
00:02:21.851 --> 00:02:26.263
It could be a PDF,
it could be a Zoom call, whatever.

37
00:02:26.263 --> 00:02:29.918
So this one is pretty handy,
gives you an eyedropper,

38
00:02:29.918 --> 00:02:33.976
you can go around and
check foreground, background color.

39
00:02:33.976 --> 00:02:36.910
So that one's worth checking out.

40
00:02:36.910 --> 00:02:39.803
WebAIM has a contrast
checker on their website.

41
00:02:39.803 --> 00:02:44.309
For design, there's Stark for
Figma as well.

42
00:02:44.309 --> 00:02:49.092
And there's also a Triple A criterion,
that's 7 to 1.

43
00:02:49.092 --> 00:02:52.421
So we don't wanna rely on color alone.

44
00:02:52.421 --> 00:02:58.266
If you had, say on your e -commerce site,
you have different colorways of products,

45
00:02:58.266 --> 00:03:03.250
you wanna describe what the color is
also in addition to the color swatch.

46
00:03:03.250 --> 00:03:08.437
Things like data visualizations come up
with this a lot, so that you can have some

47
00:03:08.437 --> 00:03:13.346
differentiation so that you aren't
relying on perception of color alone.

48
00:03:13.346 --> 00:03:19.267
And I have some links in here if you're
curious to dive in more to color,

49
00:03:19.267 --> 00:03:25.005
including this pretty funny one,
it's almost like a quiz from TPG.

50
00:03:25.005 --> 00:03:29.902
It says, when I get that low contrast
feeling, I need non-textual healing.

51
00:03:29.902 --> 00:03:31.863
It's a really funny name.

52
00:03:31.863 --> 00:03:37.229
But the post itself is actually really
great, because they have scenarios

53
00:03:37.229 --> 00:03:42.350
where they walk you through,
I don't know, it's almost like a quiz.

54
00:03:42.350 --> 00:03:45.658
So that one you should
check out after this.

55
00:03:45.658 --> 00:03:51.391
Okay, reflow, so
this is the bit about accessibility and

56
00:03:51.391 --> 00:03:56.659
responsive design and
how closely coupled they are.

57
00:03:56.659 --> 00:04:00.761
And we did touch on this
when we did some debugging.

58
00:04:00.761 --> 00:04:05.632
So designing for reflow,
we want things to go into a single column.

59
00:04:05.632 --> 00:04:10.531
Thinking about form controls, if you can
stack the label over the form input,

60
00:04:10.531 --> 00:04:15.371
that makes it so you don't have to
horizontally scroll if you are low vision.

61
00:04:15.371 --> 00:04:18.688
We want font size and
things to be adjustable.

62
00:04:18.688 --> 00:04:23.523
I like to set the font size on
the HTML tag and then use rems,

63
00:04:23.523 --> 00:04:27.776
and it will scale automatically,
it's amazing.

64
00:04:27.776 --> 00:04:32.576
And some web tools to test reflow, we saw
just the built-in zoom is awesome, but

65
00:04:32.576 --> 00:04:35.835
there's also the device
toolbar in Chrome DevTools.

66
00:04:35.835 --> 00:04:40.900
So just to point that one out,
it's over here in the DevTools,

67
00:04:40.900 --> 00:04:44.545
there is this little
toggle device toolbar.

68
00:04:44.545 --> 00:04:50.809
And you can change the device,
you can change it to any screen width,

69
00:04:50.809 --> 00:04:54.917
you can throttle it,
all these cool things.

70
00:04:54.917 --> 00:04:58.738
But that is another tool for this.

71
00:04:58.738 --> 00:05:02.736
And then there's additional
platform tools with macOS, iOS.

72
00:05:02.736 --> 00:05:05.096
Windows has a magnifier.

73
00:05:05.096 --> 00:05:08.861
There's also a third party
tool called ZoomText.

74
00:05:08.861 --> 00:05:10.372
So reflow.

75
00:05:12.906 --> 00:05:20.167
Okay, reducing motion, this is what our
exercise, our last exercise will be about.

76
00:05:20.167 --> 00:05:22.869
So motion is a big thing.

77
00:05:22.869 --> 00:05:23.772
It can make people sick.

78
00:05:23.772 --> 00:05:28.374
It can make people faint or
have a seizure.

79
00:05:28.374 --> 00:05:32.040
It can be pretty serious.

80
00:05:32.040 --> 00:05:37.005
And so fortunately, we have some
tools that make it really easy

81
00:05:37.005 --> 00:05:40.190
to safely respond to user preferences,

82
00:05:40.190 --> 00:05:44.888
including something called
prefers-reduced-motion.

83
00:05:44.888 --> 00:05:49.018
It's super well supported, and
even on platforms where it

84
00:05:49.018 --> 00:05:53.066
happens to not be supported,
you can add a little toggle or

85
00:05:53.066 --> 00:05:58.199
something to let the user still tell
you that they prefer reduced motion.

86
00:05:58.199 --> 00:06:01.324
So turning this on, on a Mac,

87
00:06:01.324 --> 00:06:05.824
we go under Accessibility &gt; Display, and

88
00:06:05.824 --> 00:06:11.956
there's this little setting
here called Reduce motion.

89
00:06:11.956 --> 00:06:17.266
And so that is really powerful cuz
you can impact your web pages.

90
00:06:17.266 --> 00:06:19.005
We can see the state turning on and

91
00:06:19.005 --> 00:06:23.371
off with something that works with reduced
motion just by checking that checkbox.

92
00:06:25.576 --> 00:06:31.563
And so for this, we have a CSS media
query, we can say media @media.

93
00:06:31.563 --> 00:06:36.157
And for our condition,
(prefers-reduced-motion: no-preference).

94
00:06:36.157 --> 00:06:40.143
And that will say,
if the setting exists and

95
00:06:40.143 --> 00:06:45.544
they haven't checked it,
then we can do animation stuff.

96
00:06:45.544 --> 00:06:49.390
So the flip side of that is when
things are animated by default,

97
00:06:49.390 --> 00:06:53.249
we can say @media
(prefers-reduced-motion: reduce).

98
00:06:53.249 --> 00:06:57.394
And that way, if the user checks
that check or checks that setting,

99
00:06:57.394 --> 00:06:59.367
then we can turn animation off.

100
00:06:59.367 --> 00:07:05.175
So it's kinda the same thing, but it's
whether your default is animated or not.

101
00:07:05.175 --> 00:07:09.037
You can opt in to animation when
it's safe to do so, and that way,

102
00:07:09.037 --> 00:07:13.763
if the user is on a platform that doesn't
support that, it won't be animated.

103
00:07:13.763 --> 00:07:18.817
Whereas the other way, everyone
gets animation until they opt out.

104
00:07:18.817 --> 00:07:21.760
Just two ways to do similar things.

105
00:07:21.760 --> 00:07:24.665
So here's an example.

106
00:07:24.665 --> 00:07:26.487
I'm gonna open this up.

107
00:07:26.487 --> 00:07:29.531
We've got this cat animation.

108
00:07:29.531 --> 00:07:35.427
This uses keyframes,
it has this infinite animation in a mask.

109
00:07:35.427 --> 00:07:41.322
And then down here,
we have prefers-reduced-motion: reduce.

110
00:07:41.322 --> 00:07:48.309
And in my system preferences,
Ha, it stopped [LAUGH].

111
00:07:48.309 --> 00:07:50.918
I can stop the animation
just by clicking that, and

112
00:07:50.918 --> 00:07:54.741
then our code matches and
it responds, it's pretty awesome.

113
00:07:54.741 --> 00:07:55.591
So there it goes again.

114
00:07:57.126 --> 00:07:59.806
So, very powerful.

115
00:07:59.806 --> 00:08:05.209
I'm gonna turn it back on so
we can look at our next example.

116
00:08:05.209 --> 00:08:08.087
So that's the CSS media query.

117
00:08:08.087 --> 00:08:10.638
Sometimes JavaScript
might be the way to go.

118
00:08:10.638 --> 00:08:14.968
And our example that we'll work on
in a few minutes, our last example,

119
00:08:14.968 --> 00:08:18.085
we are going to use
the JavaScript version of this.

120
00:08:18.085 --> 00:08:23.042
So it looks very similar,
but instead of CSS,

121
00:08:23.042 --> 00:08:27.365
we store a variable for a motion query and

122
00:08:27.365 --> 00:08:34.886
store this matchMedia function,
and that's where our CSS bit goes.

123
00:08:34.886 --> 00:08:40.299
So the prefers-reduced-motion:
no preference or reduce,

124
00:08:40.299 --> 00:08:45.923
and you can store a variable to
flip when that condition changes.

125
00:08:45.923 --> 00:08:49.306
We make a motionQuery listener.

126
00:08:49.306 --> 00:08:54.410
The more modern version of this is
to use a change event, have to get

127
00:08:54.410 --> 00:08:59.900
used to use a add listener API,
it worked fine, but it was deprecated.

128
00:08:59.900 --> 00:09:05.573
So the current version of this is to
addEventListener, use a change event, and

129
00:09:05.573 --> 00:09:10.670
then it will call this callback
function whenever that state changes.

130
00:09:10.670 --> 00:09:15.740
So the handleReducedMotionChanged then
will go and watch that motion query.

131
00:09:15.740 --> 00:09:20.847
We call it once to make it fire on load,
and then it will respond.

132
00:09:20.847 --> 00:09:23.901
So here's an example of that, going back,

133
00:09:23.901 --> 00:09:27.043
kind of a throwback to
my ActionScript days.

134
00:09:29.229 --> 00:09:33.657
These eyes will follow your mouse cursor,

135
00:09:33.657 --> 00:09:37.355
which is kind of whimsical and fun.

136
00:09:37.355 --> 00:09:41.425
So it calculates the vanilla
JavaScript to move

137
00:09:41.425 --> 00:09:46.322
where the eyes are pointing
based on where your mouse is.

138
00:09:46.322 --> 00:09:52.352
And then we have the motion query in here,
that the mouse move listener will go and

139
00:09:52.352 --> 00:09:56.088
check that variable for
the user's preference.

140
00:09:56.088 --> 00:10:01.554
So let's go turn that off, Reduce motion,
now the eyes are not moving.

141
00:10:01.554 --> 00:10:07.253
So in case you have some animation or
motion that's all delivered

142
00:10:07.253 --> 00:10:12.548
with JavaScript, you have a hook
now to go and turn that off.

143
00:10:12.548 --> 00:10:17.291
So that can be handy, so reduce motion.

144
00:10:17.291 --> 00:10:19.409
We have prefers-color-scheme.

145
00:10:19.409 --> 00:10:22.907
This one is kind of how this theme
of these slides are created.

146
00:10:22.907 --> 00:10:27.235
So you can match on light mode or
dark mode, it's built in,

147
00:10:27.235 --> 00:10:29.498
similarly well-supported.

148
00:10:29.498 --> 00:10:33.379
And so it's under System Settings,
and Appearance.

149
00:10:33.379 --> 00:10:39.877
And we have, like prefers-reduce-motion,
we have prefers-color-scheme, dark or

150
00:10:39.877 --> 00:10:45.354
light, and then you can do the JavaScript
version as well with matchMedia.

151
00:10:45.354 --> 00:10:47.949
And just a reminder to
check your contrast.

152
00:10:47.949 --> 00:10:51.874
So if you're doing multiple modes
like these slides, I had to go in and

153
00:10:51.874 --> 00:10:53.082
change a few things.

154
00:10:53.082 --> 00:10:55.701
But we have some pretty
awesome tooling for this now.

155
00:10:59.010 --> 00:11:04.132
Okay, so accessibility and
performance, just a mention of that.

156
00:11:04.132 --> 00:11:09.973
We have this concept in performance
these days of skeleton layouts,

157
00:11:09.973 --> 00:11:12.399
and they're pretty great.

158
00:11:12.399 --> 00:11:16.424
I guess my hope is that we
can think beyond the visual.

159
00:11:16.424 --> 00:11:21.147
And so if we're showing something on
screen, maybe just add loading in

160
00:11:21.147 --> 00:11:25.569
a live region, or something to
announce that the page is loading.

161
00:11:25.569 --> 00:11:29.100
Because that is a very visual
approach to a performance problem.

162
00:11:29.100 --> 00:11:34.682
So consider making a screen reader
announcement as part of that.

163
00:11:34.682 --> 00:11:38.167
We want to minimize blocking
interactions so the page will load fast,

164
00:11:38.167 --> 00:11:39.832
that really affects everybody.

165
00:11:39.832 --> 00:11:44.639
So we have some metrics
we could use to track

166
00:11:44.639 --> 00:11:49.589
how long things are taking, that can help.

167
00:11:49.589 --> 00:11:53.131
Performance as a user experience metric.

168
00:11:53.131 --> 00:11:58.296
So I have a graphic from a Tootsie Pop
commercial that made me think of it.

169
00:11:58.296 --> 00:12:02.139
How many keystrokes does
it take to complete a task?

170
00:12:02.139 --> 00:12:04.773
So I think that could be another
way to think about performance.

171
00:12:04.773 --> 00:12:09.550
It's like how many steps does
it take to complete something?

172
00:12:09.550 --> 00:12:12.467
It's kind of another way
to think about performance.

173
00:12:12.467 --> 00:12:17.453
And this is really a throwback to
one of the most pivotal books in

174
00:12:17.453 --> 00:12:22.359
my career that I read,
was Don't Make Me Think by Steve Krug.

175
00:12:22.359 --> 00:12:26.912
We wanna keep things simple,
fewer steps, kinda gets into UX.

176
00:12:26.912 --> 00:12:32.166
But if you can invoke performance as
not only how fast your site loads,

177
00:12:32.166 --> 00:12:36.796
but how complex is it,
I think that could help in the pursuit of

178
00:12:36.796 --> 00:12:40.201
making things simpler and more accessible.

179
00:12:40.201 --> 00:12:43.439
And therefore, often,
easier to build and maintain.

