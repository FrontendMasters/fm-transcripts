WEBVTT

1
00:00:00.081 --> 00:00:02.570
Tab key navigation, another pattern.

2
00:00:02.570 --> 00:00:06.591
So a question I get a lot is
when to use the arrow keys when

3
00:00:06.591 --> 00:00:10.189
you're creating accessible
user interfaces.

4
00:00:10.189 --> 00:00:16.910
So we use the Tab key for links,
buttons, form controls, etc.

5
00:00:16.910 --> 00:00:22.155
I think there's a temptation, and
I guess we skipped down the page.

6
00:00:22.155 --> 00:00:27.320
There is a temptation to use
the arrow keys for things like menus.

7
00:00:27.320 --> 00:00:31.201
And on websites,
it's usually not necessary.

8
00:00:31.201 --> 00:00:37.876
So there are your menu rules,
that is an ARIA rule that you can use.

9
00:00:37.876 --> 00:00:42.498
There's a lot of components
that have to go into it,

10
00:00:42.498 --> 00:00:47.341
including wiring up Javascript
to work on arrow keys.

11
00:00:47.341 --> 00:00:51.058
We tend to only recommend
that ARIA menu for

12
00:00:51.058 --> 00:00:55.510
really app-like kind of
a desktop style app menu.

13
00:00:55.510 --> 00:00:59.903
So if you're just writing a header for
a website with lists of links,

14
00:00:59.903 --> 00:01:01.731
you don't need all of that.

15
00:01:01.731 --> 00:01:03.393
You can just keep it simple,

16
00:01:03.393 --> 00:01:07.073
let things navigate in their
normal tab order with the Tab key.

17
00:01:07.073 --> 00:01:09.859
Just use lists of links,
let them have their normal roles.

18
00:01:09.859 --> 00:01:14.397
Don't even bother with ARIA role menu,
cuz often people sap ARIA role menu and

19
00:01:14.397 --> 00:01:18.327
then they don't do the rest of
the pattern, and it's a lot of work.

20
00:01:18.327 --> 00:01:22.419
So yeah, it's another ARIA pitfall.

21
00:01:22.419 --> 00:01:26.406
But areas where we do
want Tab key navigation,

22
00:01:26.406 --> 00:01:29.687
we can make it happen using tabindex.

23
00:01:29.687 --> 00:01:34.223
So we learned about tabindex so
far, it takes different values.

24
00:01:34.223 --> 00:01:39.939
So tabindex of 0 will put something in
the tab order when it wasn't already.

25
00:01:39.939 --> 00:01:45.003
If it has positive values like 1,
5, 32,000,

26
00:01:45.003 --> 00:01:51.490
[LAUGH] I've seen that before,
that will put it in an ordered tab order.

27
00:01:51.490 --> 00:01:55.032
And it's tough, cuz you have to
manage all of those numbers.

28
00:01:55.032 --> 00:01:59.783
So just use 0, everything will go
in the order that it is in the DOM.

29
00:01:59.783 --> 00:02:04.055
That -1 will pull a link or
a button out of the tab order that was,

30
00:02:04.055 --> 00:02:05.775
otherwise, reachable.

31
00:02:05.775 --> 00:02:10.040
Or it'll add the ability to
script focus like we saw with

32
00:02:10.040 --> 00:02:13.866
the wrapper element
technique on the skip links.

33
00:02:13.866 --> 00:02:18.840
So tabindex is how we make
Tab key navigation work, and

34
00:02:18.840 --> 00:02:21.337
I'll show you what I mean.

35
00:02:21.337 --> 00:02:25.198
If I scroll down here to an example,

36
00:02:25.198 --> 00:02:29.075
we have this little tabs switcher.

37
00:02:29.075 --> 00:02:36.295
So I hit Tab, only one of these tabs
is actually reachable with the Tab key.

38
00:02:36.295 --> 00:02:41.492
Instead, if I use the arrow keys on
these tabs, it can cycle through.

39
00:02:41.492 --> 00:02:45.903
And so that's what we mean when we say,
Tab key navigation.

40
00:02:45.903 --> 00:02:51.309
And so this example, this is an example
from the ARIA Authoring Practices Guide.

41
00:02:51.309 --> 00:02:55.563
So it's really down to basics
showing you with HTML, CSS, and

42
00:02:55.563 --> 00:02:59.110
JavaScript how to make
an accessible tab switcher.

43
00:03:02.017 --> 00:03:06.472
But like I was saying for
lists of links, it would be overkill, or

44
00:03:06.472 --> 00:03:11.012
we just don't need to implement
something that robust for menus.

45
00:03:11.012 --> 00:03:16.831
Usually, if it's a web app,
maybe it would be more appropriate.

46
00:03:16.831 --> 00:03:21.523
So to make this happen, let's make this.

47
00:03:23.660 --> 00:03:26.329
I guess Stack Blitz won't get any bigger.

48
00:03:26.329 --> 00:03:33.156
So for their implementation,
we have the ARIA roles for a tab list.

49
00:03:33.156 --> 00:03:36.347
These buttons are reachable by default, so

50
00:03:36.347 --> 00:03:41.618
they're focusable just like any
button until you put tabindex of -1.

51
00:03:41.618 --> 00:03:45.959
So this uses a technique
that's called roving tabindex,

52
00:03:45.959 --> 00:03:49.601
where only one button in
a set has tabindex of 0.

53
00:03:49.601 --> 00:03:55.942
And every other one you set to the -1,
so that's how we could see.

54
00:03:55.942 --> 00:03:57.022
Let's do this.

55
00:03:59.004 --> 00:04:04.126
So each one of these, before you load
the JavaScript, these are all reachable.

56
00:04:04.126 --> 00:04:09.376
But JavaScript goes in,
I guess it depends on how they wrote this.

57
00:04:09.376 --> 00:04:14.360
But the tabindex of -1 on each
one of these will mean that you

58
00:04:14.360 --> 00:04:19.657
have to use JavaScript to move
focus around, so it's dynamic.

59
00:04:19.657 --> 00:04:23.145
Other patterns that this would
be useful for are date pickers.

60
00:04:23.145 --> 00:04:26.579
If you have a calendar,
you don't wanna tab through 30 days.

61
00:04:26.579 --> 00:04:28.853
[LAUGH] That'd be so annoying.

62
00:04:28.853 --> 00:04:33.263
So we'd use this technique for when we
want one tab stop for a calendar, for

63
00:04:33.263 --> 00:04:37.534
example, and the arrow keys will
navigate you through all these items.

64
00:04:37.534 --> 00:04:42.503
So the tabindex is really the workhorse
here of making this work and

65
00:04:42.503 --> 00:04:45.176
JavaScript and probably some CSS.

66
00:04:45.176 --> 00:04:49.657
But what I'm saying is that
tabindex is really powerful, and

67
00:04:49.657 --> 00:04:54.235
so we can make these interactive
widgets with some scripting.

68
00:04:54.235 --> 00:04:58.811
And so I like these
ARIA Authoring Practices Guide examples,

69
00:04:58.811 --> 00:05:04.443
cuz they do sort of strip away some of
the other things that we see in web apps,

70
00:05:04.443 --> 00:05:08.414
like Typescript, and state,
and all those things.

71
00:05:08.414 --> 00:05:13.886
So the alternative to some of that code,
and let's go over here and

72
00:05:13.886 --> 00:05:20.065
see what their script looks like,
cuz this uses just vanilla JavaScript.

73
00:05:20.065 --> 00:05:25.508
So they iterate through the tabs,
this uses DOM APIs

74
00:05:25.508 --> 00:05:30.456
like querySelectorAll
instead of using JSX and

75
00:05:30.456 --> 00:05:35.289
React, keeps track of
which tabs are active.

76
00:05:35.289 --> 00:05:40.213
There are some event listeners for
clicking and for key down,

77
00:05:40.213 --> 00:05:44.673
so you can use both, and
then setting the selected tab.

78
00:05:44.673 --> 00:05:49.385
So this is kind of the alternative
to what JSX and React does for us.

79
00:05:49.385 --> 00:05:56.323
A lot is that we don't have to go in and
remove attributes manually.

80
00:05:56.323 --> 00:06:00.179
It makes it really easy to state
right there in your template, but

81
00:06:00.179 --> 00:06:05.104
a lot of the JavaScript to do this kind of
accessibility stuff without a framework.

82
00:06:05.104 --> 00:06:09.435
It's totally doable,
it's just a little bit more verbose.

83
00:06:09.435 --> 00:06:15.159
And so the components of this are keeping
track of which tab needs to be selected.

84
00:06:15.159 --> 00:06:17.716
Here's where the tabindex
is getting changed.

85
00:06:17.716 --> 00:06:22.124
They're also changing aria-selected, so
that the state of it updates true or

86
00:06:22.124 --> 00:06:26.222
false, setting and removing of attributes,
and this also moves focus.

87
00:06:26.222 --> 00:06:32.419
So talking about roving tabindex, right,
so only one of these is focusable.

88
00:06:32.419 --> 00:06:35.450
I can iterate through here and
change all those attributes, but

89
00:06:35.450 --> 00:06:36.978
I also have to move focus there.

90
00:06:36.978 --> 00:06:42.181
So that's part of this pattern,
is you change the tabindex on it and

91
00:06:42.181 --> 00:06:45.116
then you set focus on to that element.

92
00:06:45.116 --> 00:06:49.905
And so
this type of pattern you'll see a lot when

93
00:06:49.905 --> 00:06:53.630
you get into these types of widgets.

94
00:06:53.630 --> 00:06:55.479
And so here's the event handlers.

95
00:06:55.479 --> 00:06:59.208
We have an on key down that watches for
the arrow keys, and

96
00:06:59.208 --> 00:07:04.504
that's how it selects what tabs, kind of
depending on where we are in the order.

97
00:07:07.162 --> 00:07:09.545
And the click event is
a little bit simpler,

98
00:07:09.545 --> 00:07:11.617
cuz you just click on the one you want.

99
00:07:11.617 --> 00:07:14.362
But with arrow keys,
we have to actually figure out,

100
00:07:14.362 --> 00:07:16.074
well, where are you in the list?

101
00:07:16.074 --> 00:07:18.891
What's gonna happen to the right,
what's gonna happen to the left, and

102
00:07:18.891 --> 00:07:19.806
all that sort of stuff.

103
00:07:19.806 --> 00:07:23.320
And some of this, we still do in React.

104
00:07:23.320 --> 00:07:25.587
You still have to listen for
the key events,

105
00:07:25.587 --> 00:07:28.414
you still have to keep track
of which ones are current.

106
00:07:28.414 --> 00:07:32.270
We were doing a lot of that
in our examples earlier.

107
00:07:32.270 --> 00:07:37.033
But with this, we are manually setting and
removing attributes instead of just

108
00:07:37.033 --> 00:07:39.961
changing state variables
like we were in React.

109
00:07:42.986 --> 00:07:48.109
Okay, so Tab keys versus the arrow keys.

110
00:07:48.109 --> 00:07:52.638
And I think the ARIA Authoring
Practices Guide do a really good job of

111
00:07:52.638 --> 00:07:57.419
talking about some of the expected
keyboard navigation conventions.

112
00:07:57.419 --> 00:07:59.610
So you can read up on those
if there's other patterns.

113
00:07:59.610 --> 00:08:04.168
If you're like, man, this pattern we're
working on looks an awful lot like this

114
00:08:04.168 --> 00:08:07.470
one in the ARIA Authoring Practices Guide,
you could go and

115
00:08:07.470 --> 00:08:11.521
see is there some part of those
conventions that you could incorporate?

116
00:08:14.355 --> 00:08:17.803
I do have to say though,
do you really need the arrow keys?

117
00:08:17.803 --> 00:08:18.651
Probably not.

118
00:08:18.651 --> 00:08:23.641
[LAUGH] Sort of touched on that, but
I have a screenshot from Costco,

119
00:08:23.641 --> 00:08:28.210
they have a big mega menu and
they just let it be lists of links.

120
00:08:28.210 --> 00:08:33.955
So they didn't go for the whole ARIA menu
role thing, I think it works pretty well.

121
00:08:33.955 --> 00:08:36.680
But you can look at any
major e-commerce site and

122
00:08:36.680 --> 00:08:39.150
kind of see what approach
should they take.

123
00:08:39.150 --> 00:08:43.434
And some sites put a lot more effort
into accessibility than others.

124
00:08:43.434 --> 00:08:49.580
[LAUGH] But it's still fascinating to see
what's out there, what are teams doing?

125
00:08:49.580 --> 00:08:50.583
What would i work on?

126
00:08:50.583 --> 00:08:52.956
What would I love to fix
if I worked on that team?

127
00:08:52.956 --> 00:08:55.708
That's kind of an interesting
thought process.

128
00:09:00.081 --> 00:09:04.700
Okay, active element, so
when we are managing focus,

129
00:09:04.700 --> 00:09:09.924
we have a really helpful DOM API
called the active element API.

130
00:09:09.924 --> 00:09:14.792
This will tell you which element
is focused at any given time, and

131
00:09:14.792 --> 00:09:18.076
sometimes it can be
hard to tell otherwise.

132
00:09:18.076 --> 00:09:22.859
If you're debugging focus in a lot of
components, maybe there's some that

133
00:09:22.859 --> 00:09:27.419
were meant for mobile but they are not
actually hidden and you just can't

134
00:09:27.419 --> 00:09:32.375
figure out where your focus is cuz it's
in a weird state, I have a tool for you.

135
00:09:32.375 --> 00:09:41.562
So this bit of code, this listener,
document.body.addEventListener("focusin",

136
00:09:41.562 --> 00:09:45.224
you can add one listener on the body.

137
00:09:45.224 --> 00:09:48.804
And then any element that's
focused inside of it,

138
00:09:48.804 --> 00:09:53.061
you can log to the console
using document.activeElement.

139
00:09:53.061 --> 00:09:55.340
So let's do that real quick.

140
00:09:55.340 --> 00:10:01.212
Let's do it on, Let's see,
maybe just this site.

141
00:10:01.212 --> 00:10:05.107
So I'm gonna open up the console,
and I use this frequently.

142
00:10:05.107 --> 00:10:07.894
So I'm gonna hit Paste,
maybe there's a bookmarker or something,

143
00:10:07.894 --> 00:10:09.057
you could do the same thing.

144
00:10:09.057 --> 00:10:13.151
But with the console open still,
I'm gonna hit Tab and

145
00:10:13.151 --> 00:10:17.966
it will tell me, it will log every
element that I'm tabbing on.

146
00:10:17.966 --> 00:10:23.159
And if it's going through things that
are behind a modal or in a layer you can't

147
00:10:23.159 --> 00:10:28.213
see, you're gonna get your answer
pretty quickly of where your focus was.

148
00:10:28.213 --> 00:10:33.797
So that can be just in your bag of
tricks of debugging techniques.

149
00:10:33.797 --> 00:10:37.224
Being able to log the active
element is really helpful.

150
00:10:37.224 --> 00:10:41.840
It's also helpful If you need
to restore focus somewhere.

151
00:10:41.840 --> 00:10:47.420
If you open a modal layer and
you're writing the code to make that work,

152
00:10:47.420 --> 00:10:53.000
you can store what the user's focus
was on before they took the action.

153
00:10:53.000 --> 00:10:57.665
You can store that in a variable, and then
you can send them back to the same place.

154
00:10:57.665 --> 00:11:02.243
So the activeElement API is kind of
the mechanism to keep track of where

155
00:11:02.243 --> 00:11:07.763
the user's focus was, or your focus in the
event of the debugging we just looked up.

156
00:11:10.628 --> 00:11:13.868
And so don't forget visual focus styles,

157
00:11:13.868 --> 00:11:19.178
kind of when we're talking about
activeElements and trying to figure

158
00:11:19.178 --> 00:11:25.030
out which elements are focused using
skipped links and targets and all that.

159
00:11:25.030 --> 00:11:27.704
Visual focus outlines are super important.

160
00:11:27.704 --> 00:11:30.417
And so
when we're debugging with activeElement,

161
00:11:30.417 --> 00:11:33.646
that's one area where it can be
kind of useful is to surface.

162
00:11:33.646 --> 00:11:38.361
Well, is there an element that I'm
focused on that I just can't see for

163
00:11:38.361 --> 00:11:39.630
whatever reason?

164
00:11:39.630 --> 00:11:43.404
Maybe it's you just don't know
where you are on the screen,

165
00:11:43.404 --> 00:11:48.071
cuz things are positioned in a weird
way and it doesn't have a focus style.

166
00:11:48.071 --> 00:11:52.394
That can be one pathway to
figuring out how to fix it,

167
00:11:52.394 --> 00:11:56.621
cuz sometimes it might end
up in a weird tab order for

168
00:11:56.621 --> 00:12:01.751
some reason and just tabbing
through the page isn't enough.

169
00:12:01.751 --> 00:12:03.409
That's where this DOM API,

170
00:12:03.409 --> 00:12:06.803
it's just one of those tools
that you might need someday.

