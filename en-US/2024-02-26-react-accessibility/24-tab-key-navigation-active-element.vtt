WEBVTT

1
00:00:00.000 --> 00:00:02.561
Tab key navigation, another pattern.

2
00:00:02.561 --> 00:00:05.854
So a question I get a lot
is when to use the arrow

3
00:00:05.854 --> 00:00:10.126
keys when you're creating
accessible user interfaces.

4
00:00:10.126 --> 00:00:16.895
So we use the tab key for links,
buttons, form controls, etc.

5
00:00:16.895 --> 00:00:22.131
I think there's a temptation and
I guess we skipped down the page.

6
00:00:22.131 --> 00:00:27.266
There is a temptation to use
arrow keys for things like menus.

7
00:00:27.266 --> 00:00:31.061
And on websites,
it's usually not necessary.

8
00:00:31.061 --> 00:00:34.806
So the ARIA menu roles,
that is a menu role or

9
00:00:34.806 --> 00:00:37.860
that is an RE a role that you can use.

10
00:00:37.860 --> 00:00:40.692
There's a lot of components
that have to go into it.

11
00:00:40.692 --> 00:00:47.337
Including using the wiring of
JavaScript to work on arrow keys.

12
00:00:47.337 --> 00:00:51.135
We tend to only recommend
that ARIA menu for

13
00:00:51.135 --> 00:00:55.467
really app like kind of
a desktop style app menu.

14
00:00:55.467 --> 00:00:59.860
So if you're just writing a header for
a website with lists of links,

15
00:00:59.860 --> 00:01:01.689
you don't need all of that.

16
00:01:01.689 --> 00:01:05.819
You can just keep it simple, let things
navigate in their normal tab order

17
00:01:05.819 --> 00:01:10.147
with the tab key, just use lists of links,
let them have their normal roles,

18
00:01:10.147 --> 00:01:12.696
don't even bother with aria-role-menu.

19
00:01:12.696 --> 00:01:15.087
Cuz often people slap aria-role-menu and

20
00:01:15.087 --> 00:01:17.482
then they don't do
the rest of the pattern.

21
00:01:17.482 --> 00:01:22.394
And it's a lot of work, so just,
yeah, that's another ARIA pitfall.

22
00:01:22.394 --> 00:01:26.389
But areas where we do
want tab key navigation,

23
00:01:26.389 --> 00:01:29.675
we can make it happen using tab index.

24
00:01:29.675 --> 00:01:32.896
So we learned about tab index so far.

25
00:01:32.896 --> 00:01:34.234
It takes different values.

26
00:01:34.234 --> 00:01:39.927
So tab index of 0 will put something in
the tab order when it wasn't already.

27
00:01:39.927 --> 00:01:45.268
If it has positive values,
like 1, 5, 32,000,

28
00:01:45.268 --> 00:01:51.489
[LAUGH] seen that before,
that will put it in an ordered, tab order.

29
00:01:51.489 --> 00:01:54.893
And it's tough, cuz you have to
manage all of those numbers.

30
00:01:54.893 --> 00:01:56.576
So just use 0.

31
00:01:56.576 --> 00:01:59.808
Everything will go in the order
that it is in the DOM.

32
00:01:59.808 --> 00:02:01.594
The -1 will pull a link or

33
00:02:01.594 --> 00:02:05.660
a button out of the tab order
that was otherwise reachable.

34
00:02:05.660 --> 00:02:09.985
Or it'll add the ability to
script focus like we saw with

35
00:02:09.985 --> 00:02:13.861
the wrapper element
technique on the skip links.

36
00:02:13.861 --> 00:02:18.724
So tab index is how we make
tab key navigation work, and

37
00:02:18.724 --> 00:02:21.173
I'll show you what I mean.

38
00:02:21.173 --> 00:02:25.010
If I scroll down here to an example.

39
00:02:25.010 --> 00:02:29.037
We have this little tab switcher.

40
00:02:29.037 --> 00:02:31.555
So I hit Tab.

41
00:02:31.555 --> 00:02:36.175
Only one of these tabs is actually
reachable with the tab Key.

42
00:02:36.175 --> 00:02:41.461
Instead, if I use the arrow keys on
these tabs, it can cycle through.

43
00:02:41.461 --> 00:02:45.848
And so that's what we mean when
we say tab key navigation.

44
00:02:45.848 --> 00:02:51.270
And so this example, this is an example
from the ARIA Authoring Practices Guide.

45
00:02:51.270 --> 00:02:55.375
So it's really down to basics
showing you with HTML, CSS and

46
00:02:55.375 --> 00:02:58.933
Javascript how to make
an accessible tab switcher.

47
00:03:02.040 --> 00:03:06.616
But for, like I was saying, for
lists of links, it would be overkill,

48
00:03:06.616 --> 00:03:11.440
we just don't need to implement
something that robust for menus usually.

49
00:03:11.440 --> 00:03:16.836
If it's like a web app,
maybe it would be more appropriate.

50
00:03:16.836 --> 00:03:21.456
So to make this happen, let's make this,

51
00:03:23.733 --> 00:03:26.284
I guess stack blitz won't get any bigger.

52
00:03:26.284 --> 00:03:33.077
So for their implementation,
we have the ARIA roles for a tab list.

53
00:03:33.077 --> 00:03:36.293
These buttons are reachable by default.

54
00:03:36.293 --> 00:03:41.580
So they're focusable, just like any
button, until you put tab index of -1.

55
00:03:41.580 --> 00:03:46.803
So this uses a technique that's
called roving tabindex, where only

56
00:03:46.803 --> 00:03:52.668
one button in a set has tab index of 0,
and every other one you set to the -1.

57
00:03:52.668 --> 00:03:56.819
So that's how we could see, let's do this.

58
00:03:59.093 --> 00:04:04.135
So each one of these, like before you load
the Javascript, these are all reachable.

59
00:04:04.135 --> 00:04:09.273
But Javascript goes in,
I guess it depends on how they wrote this.

60
00:04:09.273 --> 00:04:14.632
But the tab next to -1 on each one
of these will mean that you have

61
00:04:14.632 --> 00:04:19.606
to use Javascript to move focus around,
so it's dynamic.

62
00:04:19.606 --> 00:04:22.930
Other patterns that this would
be useful for are date pickers,

63
00:04:22.930 --> 00:04:26.579
like if you have a calendar,
you don't want a tab through 30 days.

64
00:04:26.579 --> 00:04:28.840
[LAUGH] That'd be so annoying.

65
00:04:28.840 --> 00:04:33.266
So we'd use this technique for when we
want one tab stop for a calendar, for

66
00:04:33.266 --> 00:04:37.566
example, and the arrow keys will
navigate you through all these items.

67
00:04:37.566 --> 00:04:43.886
So the tab index is really the workhorse
here of making this work and JavaScript.

68
00:04:43.886 --> 00:04:45.160
And probably some CSS.

69
00:04:45.160 --> 00:04:49.996
But what I'm saying is that
tab index is really powerful.

70
00:04:49.996 --> 00:04:54.213
And so we can make these interactive
widgets with some scripting.

71
00:04:54.213 --> 00:04:58.945
And so I like to use
ARIA Authoring Practices Guide examples,

72
00:04:58.945 --> 00:05:03.768
cuz they do sort of strip away some
of the other things that we see

73
00:05:03.768 --> 00:05:08.322
in web apps like TypeScript and
state and all those things.

74
00:05:08.322 --> 00:05:13.905
So the alternative to some of that code,
and let's go over here and

75
00:05:13.905 --> 00:05:20.002
see what their script looks like cuz
this uses just vanilla JavaScript.

76
00:05:20.002 --> 00:05:25.018
So they iterate through the tabs,
this uses DOM APIs

77
00:05:25.018 --> 00:05:30.383
like querySelectorAll instead
of using JSX and React.

78
00:05:30.383 --> 00:05:35.272
Keeps track of which tabs are active.

79
00:05:35.272 --> 00:05:38.473
There are some event listeners for
clicking and

80
00:05:38.473 --> 00:05:40.800
for key down, so you can use both.

81
00:05:42.810 --> 00:05:44.667
And then setting the selected tab.

82
00:05:44.667 --> 00:05:50.821
So this is kind of the alternative to
what JSX and React does for us a lot,

83
00:05:50.821 --> 00:05:56.275
is that we don't have to go in and
remove attributes manually.

84
00:05:56.275 --> 00:06:00.620
It makes it really easy to set
state right there in your template.

85
00:06:00.620 --> 00:06:04.890
But a lot of the JavaScript to do this
kind of accessibility stuff without

86
00:06:04.890 --> 00:06:09.377
a framework, it's totally doable,
it's just a little bit more verbose.

87
00:06:09.377 --> 00:06:15.132
And so the components of this are keeping
track of which tab needs to be selected.

88
00:06:15.132 --> 00:06:17.586
Here's where the tab
index is getting changed.

89
00:06:17.586 --> 00:06:21.336
They're also changing aria-selected so
that the state of it updates,

90
00:06:21.336 --> 00:06:22.449
it's true or false.

91
00:06:22.449 --> 00:06:24.926
Setting and removing of attributes.

92
00:06:24.926 --> 00:06:26.088
This also moves focus.

93
00:06:26.088 --> 00:06:32.373
So talking about roving tab index, right,
so only one of these is focusable.

94
00:06:32.373 --> 00:06:35.255
I can iterate through here and
change all those attributes,

95
00:06:35.255 --> 00:06:36.962
but I also have to move focus there.

96
00:06:36.962 --> 00:06:41.888
So that's part of this pattern is
you change the tab index on it,

97
00:06:41.888 --> 00:06:45.094
and then you set focus onto that element.

98
00:06:45.094 --> 00:06:49.881
And so
this type of pattern you'll see a lot when

99
00:06:49.881 --> 00:06:53.601
you get into these types of widgets.

100
00:06:53.601 --> 00:06:55.478
And so here's the event handlers.

101
00:06:55.478 --> 00:06:59.553
We have an on key down that watches for
the arrow keys.

102
00:06:59.553 --> 00:07:01.148
And that's how it selects.

103
00:07:01.148 --> 00:07:04.422
What tabs, kind of depending
on where we are in the order.

104
00:07:07.047 --> 00:07:10.583
And the click event is a little
bit simpler cuz you just click on

105
00:07:10.583 --> 00:07:11.612
the one you want.

106
00:07:11.612 --> 00:07:14.685
But with arrow keys,
we have to actually figure out, well,

107
00:07:14.685 --> 00:07:16.026
where are you in the list?

108
00:07:16.026 --> 00:07:18.940
What's gonna happen to the right,
what's gonna happen to the left, and

109
00:07:18.940 --> 00:07:19.887
all that sort of stuff.

110
00:07:19.887 --> 00:07:24.125
And some of this, we still do in React,
like you still have to listen for

111
00:07:24.125 --> 00:07:28.381
the key events, you still have to
keep track of which ones are current.

112
00:07:28.381 --> 00:07:31.936
We were doing a lot of that
in our examples earlier, but

113
00:07:31.936 --> 00:07:36.731
with this we are manually setting and
removing attributes instead of just

114
00:07:36.731 --> 00:07:39.928
changing state variables
like we were in React.

115
00:07:42.908 --> 00:07:48.087
Okay, so tab keys versus the arrow keys.

116
00:07:48.087 --> 00:07:52.609
And I think the ARIA Authoring
Practices Guide do a really good job of

117
00:07:52.609 --> 00:07:57.385
talking about some of the expected
keyboard navigation conventions.

118
00:07:57.385 --> 00:08:00.623
So you can read up on those if there's
other patterns, if you're like,

119
00:08:00.623 --> 00:08:03.172
man this pattern we're working
on looks an awful lot like

120
00:08:03.172 --> 00:08:05.369
this one in
the ARIA Authoring Practices Guide.

121
00:08:05.369 --> 00:08:06.755
You could go and see,

122
00:08:06.755 --> 00:08:11.235
is there some part of those conventions
that you could incorporate.

123
00:08:14.339 --> 00:08:17.746
I do have to say though,
do you really need the arrow keys?

124
00:08:17.746 --> 00:08:23.919
Probably not, [LAUGH] sort of touched on
that, but I have a screenshot from Costco.

125
00:08:23.919 --> 00:08:28.133
They have a big mega menu and
they just let it be lists of links.

126
00:08:28.133 --> 00:08:32.197
So they didn't go for
the whole ARIA menu rule thing.

127
00:08:32.197 --> 00:08:36.729
I think it works pretty well, but you can
look at like any major e-commerce site and

128
00:08:36.729 --> 00:08:39.150
kind of see what approach
should they take.

129
00:08:39.150 --> 00:08:44.348
And some sights put a lot more effort
into accessibility than others [LAUGH].

130
00:08:44.348 --> 00:08:46.535
But it's still fascinating
to see what's out there.

131
00:08:46.535 --> 00:08:49.656
What are teams doing?

132
00:08:49.656 --> 00:08:52.980
What would I love to fix
if I worked on that team?

133
00:08:52.980 --> 00:08:55.473
That's kind of an interesting
thought process.

134
00:09:00.138 --> 00:09:02.086
Okay, activeElement.

135
00:09:02.086 --> 00:09:04.652
So when we are managing focus,

136
00:09:04.652 --> 00:09:09.897
we have a really helpful DOM API
called the activeElement API.

137
00:09:09.897 --> 00:09:14.532
This will tell you which element
is focused at any given time.

138
00:09:14.532 --> 00:09:18.139
And sometimes it can be
hard to tell otherwise.

139
00:09:18.139 --> 00:09:22.553
If you're debugging focus
in a lot of components.

140
00:09:22.553 --> 00:09:26.940
Maybe there's some that were meant for
mobile, but they're not actually hidden,

141
00:09:26.940 --> 00:09:31.169
and you just can't figure out where your
focus is cuz it's like in a weird state.

142
00:09:31.169 --> 00:09:32.428
I have a tool for you.

143
00:09:32.428 --> 00:09:36.256
So this bit of code, this listener

144
00:09:36.256 --> 00:09:41.673
document.body.addEventListener focusin.

145
00:09:41.673 --> 00:09:47.841
You can add one listener on the body, and
then any element that's focused inside

146
00:09:47.841 --> 00:09:53.029
of it, you can log to the console
using document.activeElement.

147
00:09:53.029 --> 00:09:55.386
So let's do that real quick.

148
00:09:55.386 --> 00:10:01.088
Let's do it on, Let's see,
maybe just this site.

149
00:10:01.088 --> 00:10:05.196
So I'm gonna open up the console,
and I use this frequently.

150
00:10:05.196 --> 00:10:06.372
So I'm gonna hit Paste.

151
00:10:06.372 --> 00:10:09.019
Maybe there's a bookmarklet or
something, you could do the same thing.

152
00:10:09.019 --> 00:10:13.278
But with the console open still,
I'm gonna hit Tab, and

153
00:10:13.278 --> 00:10:17.917
it will tell me it will log every
element that I'm tabbing on.

154
00:10:17.917 --> 00:10:23.141
And if it's going through things that
are behind a modal or in a layer you can't

155
00:10:23.141 --> 00:10:28.228
see, you're gonna get your answer
pretty quickly of where your focus was.

156
00:10:28.228 --> 00:10:33.096
So that can be just in your bag of
tricks of debugging techniques,

157
00:10:33.096 --> 00:10:37.271
being able to log the active
element is really helpful.

158
00:10:37.271 --> 00:10:42.130
It's also helpful,
If you need to restore focus somewhere,

159
00:10:42.130 --> 00:10:47.736
if you open a modal layer and
you're writing the code to make that work,

160
00:10:47.736 --> 00:10:53.167
you can store what the users focus
was on before they took the action.

161
00:10:53.167 --> 00:10:57.596
You can store that in a variable, and then
you can send them back to the same place.

162
00:10:57.596 --> 00:11:02.307
So the activeElement API is kind
of the mechanism to keep track of

163
00:11:02.307 --> 00:11:04.498
where the user's focus was.

164
00:11:04.498 --> 00:11:07.735
Or your focus in the event of
the debugging we just looked at.

165
00:11:10.540 --> 00:11:15.297
And so don't forget visual focus styles,
kinda when we're

166
00:11:15.297 --> 00:11:20.054
talking about activeElements and
trying to figure out which

167
00:11:20.054 --> 00:11:25.101
elements are focused using skip links and
targets and all that.

168
00:11:25.101 --> 00:11:27.740
Visual focus outlines are super important.

169
00:11:27.740 --> 00:11:30.464
And so when we're debugging
with that development,

170
00:11:30.464 --> 00:11:33.562
that's one area where it can be
kind of useful is to surface.

171
00:11:33.562 --> 00:11:38.346
Well, is there an element that I'm
focused on that I just can't see for

172
00:11:38.346 --> 00:11:39.638
whatever reason?

173
00:11:39.638 --> 00:11:43.335
Maybe you just don't know where
you are on the screen cuz

174
00:11:43.335 --> 00:11:48.067
things are positioned in a weird way and
it doesn't have a focus style.

175
00:11:48.067 --> 00:11:54.776
That can be one pathway to
figuring out how to fix it.

176
00:11:54.776 --> 00:11:58.031
Cuz sometimes it might end
up in a weird tab order for

177
00:11:58.031 --> 00:12:01.826
some reason and
just tapping through the pages and enough.

178
00:12:01.826 --> 00:12:03.476
That's where this DOM APIs,

179
00:12:03.476 --> 00:12:06.646
just like one of those tools
that you might need some day.

