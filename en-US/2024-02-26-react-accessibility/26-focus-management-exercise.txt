[00:00:00]
>> For our focus management exercise, we are going to add a more accessible modal layer. And we'll see how that the mechanics of that work. We've learned about tabindex and how to like trap focus into new layers. So let's apply it in an example. We're gonna use pre-built components for this.

[00:00:23]
So it should be a little less in the weeds than ARIA example. But let's go into this and see what we've got here. So for our image gallery that's in progress, when I click this, I have a layer that pops up. It's not totally done in that, it does have a close button I can open and close it, but I can still get behind that content.

[00:00:52]
So if that layer is open, I mean, the display looks funky for one, but it should really be blocking me from getting anywhere behind that layer when it open. So totally not working. Let's make something that does work better, and we're gonna reach for components that are already built in.

[00:01:19]
Because it's a lot easier sometimes. But we'll look at what are the building blocks of what they're doing that make it actually accessible and make it work. So in our product image gallery, let's add some components here. So let's see how it's working right now. There is a full screen image state that we're setting on and off when you click on that image.

[00:01:47]
So the image is, first of all, it's a div with an onClick. Let's make that a button, let's give it an aria-label. Open image in full-screen because the alt attribute would supply text to that button. But it would just be the alt attribute from the image, and that wouldn't really say what this action is gonna do.

[00:02:12]
So clicking on this button, in this iteration will open it in a full-screen layer. So this layer down here is just a regular old div, it's got some positioning on it. It has a close button that is another div with a click event on it. I think we could just cut our losses and try a prebuilt component.

[00:02:38]
And we have some prebuilt components in here using Shockley Career UI. And for react, I think they have Vue versions and maybe some other options as well. It's pretty solid, so I would definitely recommend checking it out if you're in this part of web development. So let's pull in, I'm gonna open up our modal.

[00:03:01]
Chakra UI and let's go over to the components. And I think it's, we need to go to React. Components, that's where they live and then Modal. So interestingly, there's a set of components under the title overlay. And so that's this kind of general concept for something like a layer.

[00:03:37]
Not to be confused with an accessibility overlay, which we are not even really discussing today, but overlays, modals. So for this example, we will grab these components. We already have Chakra UI React in our project, so it's pretty easy to grab these. They're really great about documenting how they're adding accessibility.

[00:04:01]
So, anytime you go to reach for a pre-built component, read up on what they have to offer on this kind of thing and test a demo. Before you go through the work of importing it and seeing if it'll work, go test a demo site first. And so, some of the things we want to look for, they are very helpful.

[00:04:20]
Writing out here, including when the modal opens, they trap focus in it. Hey, we know that one. When the modal opens, focus is automatically set to the first enabled element, or you can tell it what element to focus on. That is awesome. So it's something they're calling initial focus ref.

[00:04:40]
So, that is a way for us to reference an element in React, to say we wanna focus there when it opens initially. And then they have a similar one called finalFocusRef. So we can choose where to restore focus, but you don't have to, they automatically do it for you, that's amazing.

[00:05:00]
You can click on it to close it, you can use the escape key. Scrolling is blocked behind the modal. It's rendered in a portal attached to the end of the body. So it will break it out so that it's easier to put a NERT on it. That was that topic we were just talking about.

[00:05:21]
So they're really thinking about all the right things here. So if you can use prebuilt components sometimes, it is a good choice. And then they have some ARIA stuff in here. So they use the aria-modal, I guess that's a state. And then they have some labeling already wired up for you, that's It's pretty magical.

[00:05:40]
So let's go add that. We have an image component, so I'm gonna add to it. And for our modal, We're gonna go pull in some of these components. So I've got the imports, let's grab some of this content as well. They have multiple overlays here. I wanna get the basic usage.

[00:06:10]
So we already have a button to open it. We will grab this modal, we even have the state to open and close it. We just want the markup from this component. So down here in JSX, I will leave our full screen image state to render this. And instead of modal is open, I will say setFullscreenImage or let's see.

[00:06:39]
What do I want to call it? Yes, so. What did I add here before actually, onClose I will say What did I have before? So we can closefullscreen, so I have a fullscreenImage and closefullscreen. Get back here, closefullscreen. So since I'm not passing any arguments, I can just reference this callback function.

[00:07:13]
For this one, I'm gonna say, I'm gonna take fullscreenImage, and it It will be a string, I believe. And so I can turn it into a truthy falsy variable just by putting a double exclamation point in front of it. So that will hinge off of that state that I'm already, I'm already managing.

[00:07:35]
And we can go up here to see that, fullscreenImage is being managed with you state. Okay, so we are not going to use a modal footer. The modal body will be our image. So I'm gonna grab the, This image, I think it's just scaled down in the smaller size.

[00:08:04]
So if I open it up with the same asset, it'll just have the display to show it bigger. But I think if you had different size image assets, you'd show a bigger one in the full-screen gallery right. So our Modal Title, this one, the design does not have a title showing.

[00:08:25]
Titles are pretty important for modals. So I think in this case I might just include one and then I would talk with my team. How are we gonna handle this? The design doesn't have a Title on it, but we have to include one. I could investigate adding a screen reader only class to this or something to keep it there but not show it visually.

[00:08:47]
But for now, I'm going to put the alt attribute or maybe the product name. Only one of those. Okay, so we have a modal, let's see what it looks like. Hey, there it is. Our style looks a little weird, but it's already there. It opened up, it's in the full context of the window and so.

[00:09:19]
I can probably control that with some relative positioning, but that was like the easiest modal implementation I've ever done. And we can take advantage of some of these libraries now. Like it didn't used to be that you could grab a modal off the shelf and have any hope that it would be accessible, but like, this is awesome.

[00:09:39]
So love you Chakra. [LAUGH] Thank you. So for this, let's see if we can control that. I'll say div className relative. That is a tailwind class that will add CSS relative positioning. So hopefully try and contain some of this. We might just be kind of not impacting it in the right way because it's in our slide references when the full page version is really what we're gonna care about.

[00:10:13]
There is a prop for this also to make the modal go fullscreen. Think it might be view of full. This is another area where I'm not gonna go down the TypeScript rabbit hole, but sometimes it can, it can be helpful. I don't, can't quite recall what the prop is, but it does, you do have a way to fullScreen this, really.

[00:10:42]
So let's see, I'm actually going to open up our example page. Wow, that was pretty cool how easy that was to open and close. This title is not the right color, nor is it's the button, but I think we can fix that. I mean, the button would be, Pretty, I think I could do, like colorScheme.

[00:11:13]
I think that's the Chakra way of calling things. I think I might be able to give it a black colorScheme. I'm trying to remember, we'll play with it. And I can always go back to the Chakra docs and sort that out. So for this one, let's see what it looks like in our full page.

[00:11:37]
So here's an example, so I do have the correct color of button here, I didn't end up including the title on this one, but we could figure that part out too. So that is a modal that if I tab around that close button is the only focusable thing.

[00:11:55]
But we know there's other elements on this page that were focusable before this. So this modal is doing some heavy lifting for us, and that was the easiest copy of code I think I've ever done. So try using it, because this is really what we wanna get to, is to be able to send focus to the modal layer when it opens.

[00:12:19]
I can hit Esc and go back. My focus was back where we started, even though we couldn't quite see it. So that is, yeah, that's some focus management right there.

