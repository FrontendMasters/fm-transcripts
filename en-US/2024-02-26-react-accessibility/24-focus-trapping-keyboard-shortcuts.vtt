WEBVTT

1
00:00:00.000 --> 00:00:05.280
So for some parts of user interfaces,
we wanna keep the users

2
00:00:05.280 --> 00:00:10.572
focus in a certain area, and
this is called a keyboard trap.

3
00:00:10.572 --> 00:00:13.815
And we don't wanna do it unintentionally,
LAUGH] we wanna do this for

4
00:00:13.815 --> 00:00:15.810
certain components.

5
00:00:15.810 --> 00:00:18.360
Like if you're in a modal,
that's a good use case.

6
00:00:20.521 --> 00:00:22.903
Any kind of like new layer
that comes over the top,

7
00:00:22.903 --> 00:00:26.911
like I've seen entire apps where it's
all layers upon layers, upon layers.

8
00:00:26.911 --> 00:00:30.511
We wanna definitely keep users
from going outside of that layer.

9
00:00:30.511 --> 00:00:33.027
And so
that's what's called a keyboard trap.

10
00:00:33.027 --> 00:00:37.692
But it's sometimes it's unintentional,
like have you ever tried to navigate code

11
00:00:37.692 --> 00:00:41.961
pen with a keyboard and you get into the
text area, and you hit the Tab key, and

12
00:00:41.961 --> 00:00:46.134
it just keeps, you're in a text editor,
you can't get out.

13
00:00:46.134 --> 00:00:47.514
That's a tab trap.

14
00:00:47.514 --> 00:00:51.987
And you have to be kind of creative in
how you set that up to not have that

15
00:00:51.987 --> 00:00:53.384
be a problem.

16
00:00:53.384 --> 00:00:58.104
So one thing you could do, just as like
an authoring tool developer, would be to

17
00:00:58.104 --> 00:01:02.190
wire up the Escape key, or some way to
get in and out of that edit mode so

18
00:01:02.190 --> 00:01:06.789
that keyboard users have a way to skip by
it and they have a way to get in and out.

19
00:01:08.429 --> 00:01:10.059
So keyboard traps.

20
00:01:11.499 --> 00:01:15.993
And there is a criterion in WCAG,
it's Level A called no keyboard Traps.

21
00:01:15.993 --> 00:01:20.339
It has some great information on like
what's acceptable and what's not.

22
00:01:21.499 --> 00:01:23.399
We just don't wanna do
this unintentionally.

23
00:01:24.429 --> 00:01:31.059
So here is an example of what a keyboard
trap looks, an intentional one.

24
00:01:31.059 --> 00:01:36.139
So this stack blitz,
I'm gonna open in a new window.

25
00:01:37.499 --> 00:01:41.209
So I've got a library in
here called react-aria.

26
00:01:41.209 --> 00:01:42.465
Pretty awesome.

27
00:01:42.465 --> 00:01:45.287
It's a little bit of an advanced tool,
I would say,

28
00:01:45.287 --> 00:01:48.219
but I can create what's
called a FocusScope.

29
00:01:48.219 --> 00:01:52.399
So that's like the easiest
focus trap I've ever seen.

30
00:01:52.399 --> 00:01:55.182
It just it's a component
that I can pull in,

31
00:01:55.182 --> 00:01:59.180
wrap it around the code that I
want to contain at the right time.

32
00:01:59.180 --> 00:02:01.854
And I didn't even have to write
the actual focus trap, but

33
00:02:01.854 --> 00:02:04.480
let's see how that works
cuz we should know.

34
00:02:04.480 --> 00:02:08.780
So if I open this layer,
there are some focus level items in here,

35
00:02:08.780 --> 00:02:12.400
there's a two inputs on a closed button.

36
00:02:12.400 --> 00:02:19.070
So it's not styled really at all, but my
focus just cycles between these controls.

37
00:02:19.070 --> 00:02:21.754
So between the inputs and the buttons.

38
00:02:21.754 --> 00:02:25.014
So you can imagine if
this was in a new layer,

39
00:02:25.014 --> 00:02:29.877
it would be pretty effective at
keeping my focus in that content.

40
00:02:32.397 --> 00:02:36.627
Let's see what it actually put into
the page cuz that's pretty magical.

41
00:02:37.887 --> 00:02:39.967
There's content next to it, though.

42
00:02:39.967 --> 00:02:45.270
That's really what I wanna look is there
is an Open button and sure my keyboard

43
00:02:45.270 --> 00:02:50.594
focus was trapped, but can I get behind
there somehow if it was a modal layer?

44
00:02:50.594 --> 00:02:56.164
If I was a screen reader user is the rest
of the stuff all still reachable?

45
00:02:56.164 --> 00:02:57.268
It probably is.

46
00:02:58.268 --> 00:03:04.545
So this element, that input is
a div with all of our stuff in it,

47
00:03:04.545 --> 00:03:10.479
and I think it just has some
JavaScript to cycle you around.

48
00:03:10.479 --> 00:03:15.579
So in our previous example, we got
pretty nerdy with the inert attribute.

49
00:03:15.579 --> 00:03:18.933
This is another case where
if you had a modal layer and

50
00:03:18.933 --> 00:03:23.433
you were creating a FocusScope,
you could use inert on any background

51
00:03:23.433 --> 00:03:28.083
content to keep screen reader users
from being able to reach back there,

52
00:03:28.083 --> 00:03:32.714
cuz right now,
all we're doing is the JavaScript part.

53
00:03:32.714 --> 00:03:35.755
But we're talking about focus,
so it's relevant.

54
00:03:35.755 --> 00:03:41.539
But that's what a focus trap does, is it
keeps you kinda in that set of components.

55
00:03:41.539 --> 00:03:47.664
And that's pretty easy to do, at least if
you can use the react-aria FocusScope.

56
00:03:47.664 --> 00:03:53.321
There's probably other libraries, too,
other utilities that you could pull in.

57
00:03:53.321 --> 00:03:57.136
It looked like kind of observing
their approach is that,

58
00:03:57.136 --> 00:04:01.113
they have elements before and
after what we've inserted.

59
00:04:01.113 --> 00:04:04.065
And so
that gives us some signposts for that.

60
00:04:04.065 --> 00:04:09.062
The code underneath this that makes
that work, is whenever focus gets out of

61
00:04:09.062 --> 00:04:13.623
the items that you inserted,
it just loops it around again.

62
00:04:13.623 --> 00:04:17.299
They just kind of control where
your focus goes and send it back.

63
00:04:17.299 --> 00:04:18.847
Question?

64
00:04:18.847 --> 00:04:23.707
&gt;&gt; Actually,
they shared a very cool tip in chat,

65
00:04:23.707 --> 00:04:28.929
if you open up Chrome DevTools and
you hit the I, and

66
00:04:28.929 --> 00:04:35.979
then put in document.activeElement,
that's a live expression,

67
00:04:35.979 --> 00:04:40.984
and you can see what
element is actually active.

68
00:04:40.984 --> 00:04:42.672
&gt;&gt; Cool.

69
00:04:42.672 --> 00:04:43.632
That's awesome.

70
00:04:43.632 --> 00:04:46.731
&gt;&gt; So now as you move around,
it'll just live update right there.

71
00:04:46.731 --> 00:04:50.753
&gt;&gt; Sweet, that's cool.

72
00:04:50.753 --> 00:04:53.335
Yeah, I have seen that before,
and I forgot about it.

73
00:04:53.335 --> 00:04:54.390
So thank you.

74
00:04:58.722 --> 00:05:00.786
Chrome DevTools is amazing.

75
00:05:02.477 --> 00:05:05.145
Cool, so focus traps.

76
00:05:06.360 --> 00:05:11.236
And yeah, it kind of gives us techniques
that we can use to keep people

77
00:05:11.236 --> 00:05:15.133
from getting stuck behind those layers.

78
00:05:15.133 --> 00:05:17.713
So do you need inert backgrounds?

79
00:05:17.713 --> 00:05:22.018
I think it really a good
answer to this question is

80
00:05:22.018 --> 00:05:26.014
just a like how easy
would it be to implement.

81
00:05:26.014 --> 00:05:28.032
It works best when you have a sibling.

82
00:05:28.032 --> 00:05:29.814
So say I have modal content,

83
00:05:29.814 --> 00:05:34.790
if it's buried in my content like it in
the DOM somewhere, it's gonna be really

84
00:05:34.790 --> 00:05:39.716
hard to use a nerd because it's the modal
content is amongst everything else.

85
00:05:39.716 --> 00:05:43.016
Whereas if the the modal and
say, main are siblings and

86
00:05:43.016 --> 00:05:47.106
there's some separation,
I could put a nerd on the main element and

87
00:05:47.106 --> 00:05:51.952
that will keep that in the background,
and then my modal will live separately.

88
00:05:51.952 --> 00:05:56.274
You just have to pay attention to
where your content that needs to stay

89
00:05:56.274 --> 00:06:01.037
on top that should be reachable and
accessible and trapped.

90
00:06:01.037 --> 00:06:07.137
That should be not inert, [LAUGH] that's
the stuff we wanna navigate with.

91
00:06:09.107 --> 00:06:13.647
So I think sometimes
the keyboard trap can be enough.

92
00:06:13.647 --> 00:06:18.420
I think you really wanna
test it in a screen reader.

93
00:06:18.420 --> 00:06:24.761
Yeah, it's like part of the story,
but a worthy technique.

94
00:06:28.342 --> 00:06:30.162
Keyboard shortcuts.

95
00:06:30.162 --> 00:06:34.596
So let's talk briefly
about keyboard shortcuts.

96
00:06:34.596 --> 00:06:37.838
They can be helpful, so
if you have UI actions,

97
00:06:37.838 --> 00:06:43.186
especially if the shortcut takes a lot
more work than one a mouse user could do,

98
00:06:43.186 --> 00:06:46.751
like the accessible say you
can do the same task, but

99
00:06:46.751 --> 00:06:51.724
it takes a bit more effort, a keyboard
shortcut could be a good use case.

100
00:06:51.724 --> 00:06:56.784
And we have quite a few built-in,
like Cmd+F for finding, Cmd+P for print.

101
00:06:56.784 --> 00:06:59.981
Those are keyboard shortcuts that
are built into the platform.

102
00:06:59.981 --> 00:07:03.131
Or Ctrl+ P on a Windows machine.

103
00:07:03.131 --> 00:07:07.741
But custom keyboard shortcuts
can be useful in web apps.

104
00:07:07.741 --> 00:07:11.491
And so there are a couple of libraries
that could make this easier.

105
00:07:11.491 --> 00:07:16.731
There's one from Arthur Beaulieu and
Jon Kuperman.

106
00:07:16.731 --> 00:07:19.501
And so you can check those out.

107
00:07:19.501 --> 00:07:23.919
They're both named shortcut.js,
[LAUGH] popular name for

108
00:07:23.919 --> 00:07:28.965
that type of tool, but what that can
help you do is manage meta keys.

109
00:07:28.965 --> 00:07:32.009
So if I have like combinations of keys,

110
00:07:32.009 --> 00:07:36.729
it takes a little bit of trickery
to match that combination.

111
00:07:36.729 --> 00:07:41.466
It's not impossible, but sometimes
using a little utility makes it easier.

112
00:07:41.466 --> 00:07:45.410
And so, we can create those shortcuts.

113
00:07:45.410 --> 00:07:48.270
So there's two things that
I want you to be aware of.

114
00:07:48.270 --> 00:07:51.879
One is that shortcuts
need to be discoverable.

115
00:07:51.879 --> 00:07:56.724
If we put all this effort and,
dev work into creating shortcuts that

116
00:07:56.724 --> 00:08:00.920
nobody knows about,
it might be a little bit of a waste.

117
00:08:00.920 --> 00:08:03.900
So, put them in your help documentation.

118
00:08:03.900 --> 00:08:07.557
I think Facebook had a cool
approach at one point where

119
00:08:07.557 --> 00:08:10.808
they had an accessibility
nav bar that would pop

120
00:08:10.808 --> 00:08:14.967
up at the top of the page when
you started to use the keyboard.

121
00:08:14.967 --> 00:08:17.673
I don't know if it's still there, but

122
00:08:17.673 --> 00:08:22.028
some way to tell users that you
have these keyboard shortcuts.

123
00:08:22.028 --> 00:08:26.926
Like if there's a little help icon on the
page or just like make them easy to find,

124
00:08:26.926 --> 00:08:31.397
cuz they're gonna be really niche and
maybe not use that much otherwise,

125
00:08:31.397 --> 00:08:36.103
put them on your accessibility docs or
on an accessibility statement.

126
00:08:36.103 --> 00:08:38.223
And then the other thing
I want you to know about,

127
00:08:38.223 --> 00:08:41.747
keyboard shortcuts is watch out for
conflicts with screen readers commands.

128
00:08:41.747 --> 00:08:46.818
So especially on Windows, there
are common key commands already in place,

129
00:08:46.818 --> 00:08:50.077
like the H key that will
cycle through headings.

130
00:08:50.077 --> 00:08:54.129
So you don't wanna just use plain
letters for your shortcuts,

131
00:08:54.129 --> 00:08:56.126
they need to be kind of unique.

132
00:08:56.126 --> 00:09:00.837
So yeah, just something to be aware
of that they're like screen reader

133
00:09:00.837 --> 00:09:02.809
commands need to still work.

