WEBVTT

1
00:00:00.103 --> 00:00:02.124
So we've looked a lot at HTML.

2
00:00:02.124 --> 00:00:03.547
Let's talk about ARIA.

3
00:00:03.547 --> 00:00:06.105
We've already kind of been
touching on ARIA quite a bit.

4
00:00:06.105 --> 00:00:08.148
We've looked at some ARIA attributes.

5
00:00:08.148 --> 00:00:10.111
We've seen some roles.

6
00:00:10.111 --> 00:00:14.333
But let's dive further into what is ARIA.

7
00:00:14.333 --> 00:00:18.282
So ARIA stands for
Accessible Rich Internet Applications.

8
00:00:18.282 --> 00:00:21.891
It's a specification, it's a standard.

9
00:00:21.891 --> 00:00:26.638
It's a way to add accessibility
information through your web apps.

10
00:00:26.638 --> 00:00:32.415
I think historically the idea
of it was for things like XML.

11
00:00:32.415 --> 00:00:34.414
It is pretty useful in SVG.

12
00:00:34.414 --> 00:00:38.204
I don't know how useful
it ever was with XML, but

13
00:00:38.204 --> 00:00:42.370
in HTML,
it's pretty embedded in everything we do.

14
00:00:42.370 --> 00:00:44.701
And we'll look at why.

15
00:00:44.701 --> 00:00:48.896
The current version of ARIA,
as of right now, is 1.2.

16
00:00:48.896 --> 00:00:54.667
And so this link for
the WAI-ARIA specification.

17
00:00:54.667 --> 00:00:55.549
There it is.

18
00:00:55.549 --> 00:00:57.496
We've already seen it once or twice.

19
00:00:57.496 --> 00:01:02.961
I often have this open in a browser tab or
at least an auto-complete click

20
00:01:02.961 --> 00:01:08.621
away because it has so much information
in it that is relevant and helpful.

21
00:01:08.621 --> 00:01:13.667
But it's also a big, scary spec document,
so you will be forgiven if

22
00:01:13.667 --> 00:01:18.640
you're not totally excited to go and
read the ARIA specification.

23
00:01:18.640 --> 00:01:21.300
But just know that it's there and

24
00:01:21.300 --> 00:01:27.287
it is the basis of a lot of the technical
aspects of what we're discussing.

25
00:01:27.287 --> 00:01:29.774
But it shouldn't be the first
thing you reach for.

26
00:01:29.774 --> 00:01:32.375
It is somewhat of an advanced tool.

27
00:01:32.375 --> 00:01:38.244
I have an image from the Simpsons of Homer
holding up a big glass of beer going,

28
00:01:38.244 --> 00:01:38.979
to ARIA!

29
00:01:38.979 --> 00:01:44.313
The cause of and solution to
all our accessibility problems.

30
00:01:44.313 --> 00:01:49.092
And that's because for
everything that it helps us with,

31
00:01:49.092 --> 00:01:53.098
it also can make things
very potentially worse.

32
00:01:53.098 --> 00:01:56.623
If you slap a bunch of ARIA on
stuff without knowing what it does,

33
00:01:56.623 --> 00:01:58.141
it can be pretty terrible.

34
00:01:58.141 --> 00:02:04.113
Like the thing we just fixed with
inert was to counter an aria-issue,

35
00:02:04.113 --> 00:02:10.304
where aria-hidden was on something
that had focusable elements in it.

36
00:02:10.304 --> 00:02:15.299
And when you put the ARIA on your markup,
if you don't ever test it, or

37
00:02:15.299 --> 00:02:19.889
it isn't caught by something like X,
you'll just never know.

38
00:02:19.889 --> 00:02:23.977
And someone with a screen reader will come
in and use your site and it's terrible.

39
00:02:23.977 --> 00:02:25.826
[LAUGH] You have no idea.

40
00:02:25.826 --> 00:02:30.483
So that's kind of why it has this
reputation of being the cause of and

41
00:02:30.483 --> 00:02:33.845
solution to all of our
accessibility problems.

42
00:02:33.845 --> 00:02:36.586
And I have to give kudos to WebAIM.

43
00:02:36.586 --> 00:02:41.285
The people who gave us the screen reader
survey and another project called

44
00:02:41.285 --> 00:02:46.222
the WebAIM Million where they scandal
the top homepages for accessibility.

45
00:02:46.222 --> 00:02:50.738
They have this awesome blog post about
how ARIA is basically the cause and

46
00:02:50.738 --> 00:02:52.453
solution of our problems.

47
00:02:52.453 --> 00:02:54.916
It just cracks me up.

48
00:02:54.916 --> 00:03:00.236
But fortunately, our tooling as you
saw with AX, it's really getting off

49
00:03:00.236 --> 00:03:06.077
awesome at telling us when we have goofed
about something that we don't realize.

50
00:03:06.077 --> 00:03:10.389
So HTML and
ARIA work very closely together.

51
00:03:10.389 --> 00:03:13.810
We've seen some of this
already with roles,

52
00:03:13.810 --> 00:03:18.493
the built-in roles, for links,
buttons, form elements,

53
00:03:18.493 --> 00:03:23.175
landmarks, those roles that
come with those element names,

54
00:03:23.175 --> 00:03:29.143
they're ARIA roles just like the ones
that we bolt on with the role attribute.

55
00:03:29.143 --> 00:03:32.779
It's just some are built in
that are implicit roles, and

56
00:03:32.779 --> 00:03:35.594
explicit roles are the ones
that we bolt on.

57
00:03:35.594 --> 00:03:40.274
So we should try and use the implicit,
you know built-in stuff first,

58
00:03:40.274 --> 00:03:42.926
support tends to be a little bit better.

59
00:03:42.926 --> 00:03:47.373
Yeah, there's other functionality
that comes along with those, like,

60
00:03:47.373 --> 00:03:51.960
if you have a button element, it's gonna
give you a lot of behavior for free,

61
00:03:51.960 --> 00:03:55.087
whereas a button role is
only gonna bolt on the role.

62
00:03:55.087 --> 00:03:59.790
There's other things that you have to add.

63
00:03:59.790 --> 00:04:04.930
So yeah, built-in versus bolted-on.

64
00:04:04.930 --> 00:04:08.160
So which docs should you use?

65
00:04:08.160 --> 00:04:13.789
The ARIA standard from the W3C
is a good source of truth.

66
00:04:13.789 --> 00:04:16.741
But again,
it's kind of not the most approachable.

67
00:04:16.741 --> 00:04:21.967
So MDN or
Mozilla Developer Network is awesome,

68
00:04:21.967 --> 00:04:24.905
they have great ARIA docs.

69
00:04:24.905 --> 00:04:29.324
ARIA, as I mentioned earlier today,
is also developed in the open on GitHub.

70
00:04:29.324 --> 00:04:33.999
So you can go and see, how are they
even coming up with these standards?

71
00:04:33.999 --> 00:04:39.172
Which browsers and
screen readers are still causing issues,

72
00:04:39.172 --> 00:04:41.567
or is there an issue with it?

73
00:04:41.567 --> 00:04:45.126
And so that's pretty fascinating
to see how that work gets done.

74
00:04:45.126 --> 00:04:47.976
And you can definitely learn things about,

75
00:04:47.976 --> 00:04:51.903
like I've opened up issues on ARIA,
or not opened them, but

76
00:04:51.903 --> 00:04:56.218
looked at them, when I use a certain
role or a certain attribute and

77
00:04:56.218 --> 00:05:01.249
it's just not working quite right, and
I'll go and search it in the issues.

78
00:05:01.249 --> 00:05:02.946
And there will already be
a discussion about it.

79
00:05:02.946 --> 00:05:06.661
And I'm like, okay, that's expected.

80
00:05:06.661 --> 00:05:07.598
That's the way it worked.

81
00:05:07.598 --> 00:05:12.457
And I think the example I saw was
they designed ARIA in a certain

82
00:05:12.457 --> 00:05:16.115
way because of how people
use screen readers.

83
00:05:16.115 --> 00:05:20.351
I had a misconception about
how screen readers are used.

84
00:05:20.351 --> 00:05:24.436
And Aria was designed more for people
who are actually using screen readers.

85
00:05:24.436 --> 00:05:29.236
So sometimes our developer biases
lead us down that path and

86
00:05:29.236 --> 00:05:32.795
we can go, okay, I just didn't know.

87
00:05:32.795 --> 00:05:36.420
So it can be helpful for
learning about that.

88
00:05:36.420 --> 00:05:41.734
Web.dev also has a ton of ARIA
information from the Google team.

89
00:05:41.734 --> 00:05:46.911
An HTML5 doctor, I think it's
a little bit dated at this point,

90
00:05:46.911 --> 00:05:51.240
but it historically has had
really great info about how

91
00:05:51.240 --> 00:05:55.774
elements work in HTML and
the HTML5 heading algorithm.

92
00:05:55.774 --> 00:05:56.990
They they wrote about that.

