WEBVTT

1
00:00:00.216 --> 00:00:00.933
&gt;&gt; Maximiliano Firtman: Well,

2
00:00:00.933 --> 00:00:06.672
one more step to actually see
the movies with the poster.

3
00:00:06.672 --> 00:00:10.237
Yeah, we can change
this LI with something.

4
00:00:10.237 --> 00:00:14.593
But instead of creating,
instead of text content,

5
00:00:14.593 --> 00:00:19.147
I want to create, and
this is a pretty normal pattern,

6
00:00:19.147 --> 00:00:24.708
I want to create a component for
rendering each item, each movie.

7
00:00:24.708 --> 00:00:30.419
It's typically called movie item or
movie item component, okay.

8
00:00:30.419 --> 00:00:35.645
So I'm going to create
a new movie item component

9
00:00:35.645 --> 00:00:41.137
that will then be used to
render each movie, okay.

10
00:00:41.137 --> 00:00:43.006
And we know how to create components.

11
00:00:43.006 --> 00:00:44.101
So this is the second one.

12
00:00:44.101 --> 00:00:48.296
I will do it manually, but
the rest will probably be more copy and

13
00:00:48.296 --> 00:00:50.166
pasting from the snippets.

14
00:00:50.166 --> 00:00:54.286
What I need here is then to
create a movie item component.

15
00:00:54.286 --> 00:01:01.892
So I will export the class movie, I can
call it movie item or MovieItemComponent.

16
00:01:01.892 --> 00:01:07.815
It's up to, it's just a design pattern,
extending from HTMLElement.

17
00:01:07.815 --> 00:01:08.944
We know the deal.

18
00:01:08.944 --> 00:01:16.442
And then we will talk
to custom elements and

19
00:01:16.442 --> 00:01:20.816
we define movie-item as

20
00:01:20.816 --> 00:01:25.200
that component, okay?

21
00:01:25.200 --> 00:01:30.112
The only different part compared
with the previous one is that

22
00:01:30.112 --> 00:01:32.195
in this one I need a movie.

23
00:01:32.195 --> 00:01:34.896
So I need propertyies from the outside,

24
00:01:34.896 --> 00:01:38.715
someone needs to send me the movie so
I can render a movie.

25
00:01:38.715 --> 00:01:40.293
Does it make sense?

26
00:01:40.293 --> 00:01:43.098
And there are many ways with
Web Components to do that.

27
00:01:43.098 --> 00:01:48.021
In this case, in this particular case,
I will use one way,

28
00:01:48.021 --> 00:01:53.443
is that I can receive the movie as
an argument in the constructor.

29
00:01:53.443 --> 00:01:58.134
When you override the Web Components
constructor, it's mandatory,

30
00:01:58.134 --> 00:02:01.350
if not you will get an exception,
to call super.

31
00:02:01.350 --> 00:02:04.357
The first thing you need
to do is call super.

32
00:02:04.357 --> 00:02:07.079
If not, the Web Component won't work.

33
00:02:07.079 --> 00:02:11.670
And then I will save that
movie in a local property.

34
00:02:11.670 --> 00:02:15.178
So then in connectedCallback, remember,

35
00:02:15.178 --> 00:02:19.931
this is the event when our
component is mounted in the page.

36
00:02:22.587 --> 00:02:26.055
&gt;&gt; Maximiliano Firtman: We can
actually render the movie.

37
00:02:26.055 --> 00:02:28.720
But in this case,
I'm not going to use a template.

38
00:02:28.720 --> 00:02:32.350
I'm going to write it manually from here,
so you can see another way.

39
00:02:32.350 --> 00:02:37.513
So now in connectedCallback,
I'm not going to use a template element.

40
00:02:37.513 --> 00:02:39.575
Okay, it's not mandatory.

41
00:02:39.575 --> 00:02:44.089
On each case, you decide which one
fits better for a template and

42
00:02:44.089 --> 00:02:48.031
which one fits better for
just writing short HTML here.

43
00:02:48.031 --> 00:02:50.628
This is similar to when
you're doing Angular and

44
00:02:50.628 --> 00:02:53.478
sometimes the template goes
in the Typescript file,

45
00:02:53.478 --> 00:02:57.174
sometimes it goes to a separate file,
so something similar to that.

46
00:02:57.174 --> 00:03:00.561
So for example, in this case,
I will just change my own innerHTML.

47
00:03:00.561 --> 00:03:04.333
I'm the element, so I can just write HTML.

48
00:03:04.333 --> 00:03:09.304
I'm using the backtick here,
so the template string,

49
00:03:09.304 --> 00:03:12.700
so similar to JSX if you want in React.

50
00:03:12.700 --> 00:03:13.930
So I'm mentioning two libraries.

51
00:03:13.930 --> 00:03:18.715
I have just mentioned two libraries
in the past minute, okay.

52
00:03:18.715 --> 00:03:22.686
But instead of writing JSX
it's just a string, okay?

53
00:03:22.686 --> 00:03:27.409
So I can say that each,
&gt;&gt; Maximiliano Firtman: Movie

54
00:03:27.409 --> 00:03:29.429
will have a link, so we can click on it.

55
00:03:29.429 --> 00:03:31.361
Later, we will make that work.

56
00:03:31.361 --> 00:03:34.572
And we'll contain maybe an article,

57
00:03:34.572 --> 00:03:39.599
that's the HTML semantic element for
an item in a dataset.

58
00:03:39.599 --> 00:03:43.660
And we are going to have
an image with some source and

59
00:03:43.660 --> 00:03:48.293
some alternative text,
we will fill the data in a second.

60
00:03:48.293 --> 00:03:52.728
And then a paragraph for the title, okay?

61
00:03:52.728 --> 00:03:59.502
So I can do this and then I can try
to take this query selector and

62
00:03:59.502 --> 00:04:04.464
take the image and
change the source like so.

63
00:04:04.464 --> 00:04:09.148
Or, because I'm using
backtick template strings,

64
00:04:09.148 --> 00:04:14.882
I can just come here and
replace this with, for example, movie.

65
00:04:14.882 --> 00:04:19.238
Or actually, this movie, because it's

66
00:04:19.238 --> 00:04:24.473
a property from the class,
poster_url, okay?

67
00:04:24.473 --> 00:04:28.626
And for the paragraph,
something similar, this movie title.

68
00:04:28.626 --> 00:04:35.089
And also because there
are movies with the same title,

69
00:04:35.089 --> 00:04:40.428
we can in parentheses or
within parentheses I

70
00:04:40.428 --> 00:04:45.780
can add also the release year like so,
okay.

71
00:04:45.780 --> 00:04:49.435
And then I don't need this.

72
00:04:49.435 --> 00:04:54.404
So similar to React,
how in JSX you use interpolation,

73
00:04:54.404 --> 00:04:57.375
so it's kind of similar, okay?

74
00:05:00.729 --> 00:05:05.419
&gt;&gt; Maximiliano Firtman: So
now, we also need the alt.

75
00:05:05.419 --> 00:05:07.601
Remember, we should fill the alt.

76
00:05:07.601 --> 00:05:11.245
We can just take the movie title,

77
00:05:11.245 --> 00:05:16.319
let me put this in a new line,
the movie title,

78
00:05:16.319 --> 00:05:20.763
and say this is the poster of that movie.

79
00:05:20.763 --> 00:05:21.574
Copy that.

80
00:05:21.574 --> 00:05:25.506
Like Batman poster, Star Wars poster.

81
00:05:25.506 --> 00:05:30.477
And then I can use this movie
item component in my homepage.

82
00:05:30.477 --> 00:05:35.073
So instead of just writing the title,

83
00:05:35.073 --> 00:05:41.689
I will go to this LI this item,
and I will append child.

84
00:05:41.689 --> 00:05:46.984
And I will create a new movie item
component that receives a movie.

85
00:05:46.984 --> 00:05:51.606
I already have the movie here, so
I will pass the movie as an argument.

86
00:05:51.606 --> 00:05:54.027
And from an OOP point of view,
this looks really nice.

87
00:05:54.027 --> 00:05:58.732
So we have a list item,
we have a movie item component.

88
00:05:58.732 --> 00:06:03.697
So if I run this.

89
00:06:03.697 --> 00:06:06.657
Whoo, voila.

90
00:06:06.657 --> 00:06:12.505
I have movies with vertical scroll and
something to watch today, random movies.

91
00:06:12.505 --> 00:06:19.556
So every time I refresh,
I'm getting different random movies.

92
00:06:19.556 --> 00:06:20.856
Okay?

93
00:06:20.856 --> 00:06:24.249
So let's review where we are.

94
00:06:24.249 --> 00:06:27.653
So we know that the backend was done.

95
00:06:27.653 --> 00:06:30.712
So now we are of course at the front end.

96
00:06:30.712 --> 00:06:35.824
And actually what we
have is the API service.

97
00:06:35.824 --> 00:06:40.310
We have the user interface, HTML,
CSS, and of course, images.

98
00:06:40.310 --> 00:06:47.686
Actually, the user interface is creating
one web component, the homepage.

99
00:06:47.686 --> 00:06:52.061
The homepage web component
is calling the API service.

100
00:06:52.061 --> 00:06:56.373
The API service goes through HTTP,
goes to the backend.

101
00:06:56.373 --> 00:06:59.056
The backend enters into a handler.

102
00:06:59.056 --> 00:07:00.881
Okay, it's a movie handler.

103
00:07:00.881 --> 00:07:05.915
So the movie handler has a model
repository, the movies repository,

104
00:07:05.915 --> 00:07:10.619
that's the one that talks to the database,
makes the SQL query.

105
00:07:10.619 --> 00:07:14.623
It returns the SQL query,
it converts that into a model.

106
00:07:14.623 --> 00:07:17.247
So the model is actually the movie class.

107
00:07:17.247 --> 00:07:22.908
Then a slice of movies, or a collection
of movies, is going back to the handler.

108
00:07:22.908 --> 00:07:25.554
The handler is converting that into JSON.

109
00:07:25.554 --> 00:07:29.831
And through HTTP,
it goes back to the API service.

110
00:07:29.831 --> 00:07:36.294
And the API service sends that to the web
component, which is now writing HTML.

111
00:07:36.294 --> 00:07:41.591
And finally,
you see that in the user interface.

112
00:07:41.591 --> 00:07:44.519
That's everything that we have done so
far.

113
00:07:48.622 --> 00:07:51.915
&gt;&gt; Speaker 2: You list a lot of movies,
or what if we have a lot, right?

114
00:07:51.915 --> 00:07:55.172
1 million movies that you need to load.

115
00:07:55.172 --> 00:07:58.448
You have to go to paging.

116
00:07:58.448 --> 00:08:02.900
&gt;&gt; Maximiliano Firtman: Exactly,
right now, we are downloading only 20.

117
00:08:02.900 --> 00:08:04.562
So we have a maximum amount.

118
00:08:04.562 --> 00:08:07.022
You don't want to download all the movies.

119
00:08:07.022 --> 00:08:10.846
Also, you will get probably
access quota in your cloud.

120
00:08:10.846 --> 00:08:12.380
You will have to pay for that.

121
00:08:12.380 --> 00:08:18.903
So you will need to get into making pages,
or just like in Google search results.

122
00:08:18.903 --> 00:08:20.111
There are many patterns.

123
00:08:20.111 --> 00:08:24.385
You have the paging pattern where you
create pages and next and previews.

124
00:08:24.385 --> 00:08:26.847
You have the Infinity scroll pattern.

125
00:08:26.847 --> 00:08:28.140
It's a UX design pattern.

126
00:08:28.140 --> 00:08:29.589
So you start scrolling.

127
00:08:29.589 --> 00:08:35.927
it can be horizontally or vertically, and
when you get to the end, you get ten more.

128
00:08:35.927 --> 00:08:39.313
And when you get to the end,
you get ten more, automatically.

129
00:08:39.313 --> 00:08:41.788
So you do that with the onscroll event.

130
00:08:41.788 --> 00:08:47.274
So when you get near the end, you go and
grab ten more and you attach those there.

131
00:08:47.274 --> 00:08:49.285
So you will have to think about that.

132
00:08:49.285 --> 00:08:53.450
Right now, for simplicity, we are just
downloading a maximum of 20 and

133
00:08:53.450 --> 00:08:54.267
that's all.

134
00:08:54.267 --> 00:08:58.335
But yeah, you will need to increase that.

135
00:08:58.335 --> 00:09:03.271
Also, for the search that we will do
later, on the search we will have filters.

136
00:09:03.271 --> 00:09:07.878
So also, we will be able,
if the data set that is coming from

137
00:09:07.878 --> 00:09:12.595
the server is too large,
we can narrow that by filtering it.

138
00:09:12.595 --> 00:09:14.830
Okay, so we can filter the search.

139
00:09:14.830 --> 00:09:18.392
The other thing that is still missing and

140
00:09:18.392 --> 00:09:22.280
we will do later,
is the router and routes.

141
00:09:22.280 --> 00:09:27.702
Those are the things that we haven't
coded so far in the client to actually,

142
00:09:27.702 --> 00:09:31.613
for example, click on one movie and
go to the details.

143
00:09:31.613 --> 00:09:35.952
&gt;&gt; Speaker 3: There was
lots of wows in chat.

144
00:09:35.952 --> 00:09:38.843
&gt;&gt; Maximiliano Firtman: We got
into the wow moment, okay, right?

145
00:09:38.843 --> 00:09:39.909
Yeah, I know, I know.

146
00:09:39.909 --> 00:09:44.229
I know that you were not believing
in this initially, okay, but

147
00:09:44.229 --> 00:09:46.316
that usually happens, okay?

148
00:09:46.316 --> 00:09:51.550
I know that some developers,
they want to start with the UI first,

149
00:09:51.550 --> 00:09:54.264
because they feel better, okay?

150
00:09:54.264 --> 00:09:58.730
But if you started with this diagram,
with the architecture, okay,

151
00:09:58.730 --> 00:10:02.526
you can start anywhere actually coding and
it should work.

152
00:10:02.526 --> 00:10:06.434
I mean, if you think about all the
connections that you have on each part,

153
00:10:06.434 --> 00:10:09.224
you don't need to start with the UI or
here or there.

154
00:10:09.224 --> 00:10:11.432
It's up to you.

155
00:10:11.432 --> 00:10:16.961
&gt;&gt; Speaker 4: If I wanted to use this
stack for generating landing pages,

156
00:10:16.961 --> 00:10:22.056
I would need to render these
components on the server.

157
00:10:22.056 --> 00:10:23.116
What?

158
00:10:23.116 --> 00:10:26.381
&gt;&gt; Maximiliano Firtman: Yeah, a single
page application has advantages and

159
00:10:26.381 --> 00:10:27.501
disadvantages.

160
00:10:27.501 --> 00:10:32.584
One of the disadvantages is SEO,
search engine optimization.

161
00:10:32.584 --> 00:10:34.355
In this case, it depends on the landing.

162
00:10:34.355 --> 00:10:38.533
If the landing is for ads,
meaning Facebook ads or

163
00:10:38.533 --> 00:10:42.922
Instagram ads,
it doesn't matter, to be honest.

164
00:10:42.922 --> 00:10:49.192
But if you want to, or for example,
if you want to be a Google or now,

165
00:10:49.192 --> 00:10:54.811
we have SEO, search engine optimization,
and AIO, okay?

166
00:10:54.811 --> 00:11:00.546
Because now you can search using
ChatGPT or Google Gemini or Grok.

167
00:11:00.546 --> 00:11:02.179
They can search on the web.

168
00:11:02.179 --> 00:11:05.889
And when we have a single
page application,

169
00:11:05.889 --> 00:11:08.707
they don't see the data, okay?

170
00:11:08.707 --> 00:11:12.727
They could potentially, but they're not
doing that from a performance point of

171
00:11:12.727 --> 00:11:15.104
view and resources,
they're not doing that.

172
00:11:15.104 --> 00:11:16.791
So they're just reading the HTML.

173
00:11:16.791 --> 00:11:21.767
And yes, our HTML right now,
they're reading this.

174
00:11:21.767 --> 00:11:27.103
The page source, and there is no data.

175
00:11:27.103 --> 00:11:31.030
So remember, there is another intermediate
course that follows this project.

176
00:11:31.030 --> 00:11:32.929
In that intermediate course,

177
00:11:32.929 --> 00:11:36.950
we do some kind of server-side
rendering to solve that problem.

178
00:11:36.950 --> 00:11:41.121
In that case, you need to solve
the problem from Go from the backend.

179
00:11:41.121 --> 00:11:45.679
And instead of just delivering an HTML,

180
00:11:45.679 --> 00:11:48.769
you need to fill some gaps.

181
00:11:48.769 --> 00:11:51.740
Even if it's not the final UI,
at least the data.

182
00:11:51.740 --> 00:11:57.170
So then from the server, you're also
serving, that's server side rendering,

183
00:11:57.170 --> 00:12:00.959
you're also rendering some
of the data from the server.

184
00:12:00.959 --> 00:12:05.269
And then you can continue
client side with JavaScript.

