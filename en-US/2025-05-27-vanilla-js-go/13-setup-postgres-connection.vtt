WEBVTT

1
00:00:00.000 --> 00:00:03.991
&gt;&gt; Maximiliano Firtman: Well, now it's
time to create the implementation for

2
00:00:03.991 --> 00:00:04.517
this.

3
00:00:04.517 --> 00:00:07.904
And for that,
we will need the connection string, so

4
00:00:07.904 --> 00:00:10.324
I'm going to create a dom.env file.

5
00:00:10.324 --> 00:00:17.392
So in the root folder, I will create
a .env file from environment,

6
00:00:17.392 --> 00:00:22.854
and we're going to create
a DATABASE_URL string.

7
00:00:22.854 --> 00:00:26.897
And I'm going to paste the connection

8
00:00:26.897 --> 00:00:31.579
string of my database
from the same source.

9
00:00:31.579 --> 00:00:35.277
Remember, this is not
actually a Go design pattern.

10
00:00:35.277 --> 00:00:40.593
Go doesn't read .env files, but
we are going to use a library,

11
00:00:40.593 --> 00:00:44.445
very small library,
that will do that for us.

12
00:00:44.445 --> 00:00:51.518
Actually, it's opening the file, parsing
the file, and reading the arguments.

13
00:00:51.518 --> 00:00:53.177
Okay, does it make sense?

14
00:00:53.177 --> 00:01:00.221
We will use this file later also
to add more secret information.

15
00:01:00.221 --> 00:01:04.828
Have in mind that it depends on
where are you deploying this app.

16
00:01:04.828 --> 00:01:11.448
The system might have different
ways to write your env files,

17
00:01:11.448 --> 00:01:18.970
but you will have to also publish
the env file apart from the Go binary.

18
00:01:18.970 --> 00:01:23.643
But remember when we are deploying this,
and at the end of the workshop,

19
00:01:23.643 --> 00:01:25.416
we will see what to deploy.

20
00:01:25.416 --> 00:01:30.208
We are deploying actually the binary,
not the .go files.

21
00:01:30.208 --> 00:01:34.658
Well, you need to deploy the binary,

22
00:01:34.658 --> 00:01:38.837
the public folder, and the .env.

23
00:01:38.837 --> 00:01:41.184
Okay, not the rest of the Go files.

24
00:01:41.184 --> 00:01:44.253
So now we need to read this file, where?

25
00:01:44.253 --> 00:01:45.992
In main.go.

26
00:01:45.992 --> 00:01:51.336
Somewhere, so
let's say this is the Log Initializer,

27
00:01:51.336 --> 00:01:55.212
this is the Movie Handler Initializer.

28
00:01:55.212 --> 00:02:00.881
Now we're going to add here somewhere

29
00:02:00.881 --> 00:02:05.672
the Environmental Variables.

30
00:02:05.672 --> 00:02:12.134
So to do that, we are going to use go,
&gt;&gt; Maximiliano Firtman: If

31
00:02:12.134 --> 00:02:18.292
you remember from go.mod,
we have the godotenv library.

32
00:02:18.292 --> 00:02:20.866
So we're going to use that library,
okay, godotenv.

33
00:02:20.866 --> 00:02:25.569
It's a library that we have already
added as a dependency in our project.

34
00:02:25.569 --> 00:02:30.130
So I'm going to say godotenv.

35
00:02:30.130 --> 00:02:36.081
If I press Enter or Return,
it will automatically add me the import,

36
00:02:36.081 --> 00:02:40.914
the right import, okay, and
we're going to say load.

37
00:02:40.914 --> 00:02:45.899
This return a possible error, so
we're going to follow the pattern

38
00:02:45.899 --> 00:02:49.489
of putting in an if,
creating a variable for it.

39
00:02:49.489 --> 00:02:54.002
Semicolon and
asking if we do have an error.

40
00:02:56.621 --> 00:03:01.308
&gt;&gt; Maximiliano Firtman: Something
like this, it's load with capital L.

41
00:03:01.308 --> 00:03:05.879
And if it's an error,
well, I need to log this.

42
00:03:09.577 --> 00:03:13.468
&gt;&gt; Maximiliano Firtman: That we
do have a problem with this,

43
00:03:13.468 --> 00:03:17.500
so we need to say log print F or Fatal.

44
00:03:17.500 --> 00:03:23.652
No .env file was available.

45
00:03:23.652 --> 00:03:27.817
So actually, we don't have the string for
the database,

46
00:03:27.817 --> 00:03:32.922
we don't have other secrets, so
we should stop everything right now.

47
00:03:37.805 --> 00:03:39.769
&gt;&gt; Maximiliano Firtman: Okay,
does it makes sense?

48
00:03:39.769 --> 00:03:42.002
So how to connect to the database.

49
00:03:43.908 --> 00:03:46.815
&gt;&gt; Maximiliano Firtman: Well, now,
we first need the connection string, so

50
00:03:46.815 --> 00:03:49.346
what we're going to
connect to the database.

51
00:03:49.346 --> 00:03:50.862
We need the connection string.

52
00:03:50.862 --> 00:03:55.736
So dbConnStr or ConnectionString,
however you wanna call this.

53
00:03:55.736 --> 00:03:59.776
So now we are going to
talk with the OS and

54
00:03:59.776 --> 00:04:03.945
call Getenv When you say, why to the OS?

55
00:04:03.945 --> 00:04:08.658
We are using a library for this.

56
00:04:08.658 --> 00:04:13.487
Well, actually, this library is
populating the OS environmental

57
00:04:13.487 --> 00:04:17.926
variables,
&gt;&gt; Maximiliano Firtman: Just for

58
00:04:17.926 --> 00:04:19.942
this execution.

59
00:04:19.942 --> 00:04:24.705
This is to make it more
compatible with the standard Go.

60
00:04:24.705 --> 00:04:26.082
Does it make sense?

61
00:04:26.082 --> 00:04:30.408
os.Getenv will try the environmental
variables of your current

62
00:04:30.408 --> 00:04:31.750
operating system.

63
00:04:31.750 --> 00:04:36.449
In this case,
if we first load a .env file,

64
00:04:36.449 --> 00:04:41.656
that file will replace or
will actually be merged

65
00:04:41.656 --> 00:04:47.754
with the OS environmental
variables from that moment for

66
00:04:47.754 --> 00:04:51.200
our code and only for that code.

67
00:04:51.200 --> 00:04:57.151
So if for some reason it's empty,
we have a problem.

68
00:04:57.151 --> 00:05:02.748
So we also need to make a fatal load
saying, hey, we can't initialize.

69
00:05:02.748 --> 00:05:07.489
So DATABASE_URL not set,

70
00:05:07.489 --> 00:05:11.824
or something like that.

71
00:05:11.824 --> 00:05:17.026
And if that's the case,
now we are ready to open

72
00:05:17.026 --> 00:05:23.675
the database of type postgres
with that connection string.

73
00:05:23.675 --> 00:05:30.292
And that returns database
in a possible error object.

74
00:05:30.292 --> 00:05:34.277
We will check again one more
time if we do have an error.

75
00:05:34.277 --> 00:05:39.389
If it's not nil,
we'll also go into do a fatal error,

76
00:05:39.389 --> 00:05:43.183
like failed to connect to the database.

77
00:05:43.183 --> 00:05:47.634
We could pass also a value,
so instead of Fatal,

78
00:05:47.634 --> 00:05:52.969
I can use Fatalf and
pass as the value, the current error.

79
00:05:55.364 --> 00:05:57.094
&gt;&gt; Maximiliano Firtman: Okay,
does it make sense?

80
00:05:57.094 --> 00:06:02.177
And Go is complaining because
I'm not using the database yet.

81
00:06:02.177 --> 00:06:06.562
So something quick that I can
use is I can defer db.Cose, so

82
00:06:06.562 --> 00:06:09.032
closing the database right now.

83
00:06:09.032 --> 00:06:12.963
Remember defer will defer that for
later at the end.

84
00:06:12.963 --> 00:06:18.694
So we remember to close the database
as soon as we are opening it.

85
00:06:18.694 --> 00:06:20.941
So we have the open and we have the close.

86
00:06:20.941 --> 00:06:27.138
But remember, because we do have defer,
it's not closing the database right now.

87
00:06:27.138 --> 00:06:32.047
Okay, so that's something that Go has
to defer the execution to the end.

88
00:06:32.047 --> 00:06:34.739
Well, now we need to make queries somehow.

89
00:06:34.739 --> 00:06:39.101
And for that, we are still missing
one part that is creating the current

90
00:06:39.101 --> 00:06:40.711
implementation of this.

91
00:06:40.711 --> 00:06:45.761
But before doing that, one more step, I
promise you that it will work at the end.

92
00:06:45.761 --> 00:06:51.090
Remember our models,
we have movie, genre, actor.

93
00:06:51.090 --> 00:06:56.987
If we remember our structure,
I'm talking about the sequel structure.

94
00:06:56.987 --> 00:06:58.943
For example, let's talk about the actor.

95
00:06:58.943 --> 00:07:02.820
Remember this ID and FirstName?

96
00:07:02.820 --> 00:07:06.851
This is using title case,
so capital F, capital N.

97
00:07:06.851 --> 00:07:07.979
Why capital F?

98
00:07:07.979 --> 00:07:11.673
Because I wanna make it public,
okay, that's a Go thing.

99
00:07:11.673 --> 00:07:19.185
But now in my database, the actor, it's
actually id, lowercase, and first_name.

100
00:07:19.185 --> 00:07:23.942
Everything lowercase with underscore,
so this is a snake case.

101
00:07:23.942 --> 00:07:28.225
Okay, someone thought that this
looks like a snake for some reason.

102
00:07:28.225 --> 00:07:33.087
This, it's like a snake, whatever.

103
00:07:33.087 --> 00:07:35.842
So we have a problem, I mean,

104
00:07:35.842 --> 00:07:41.595
the Go properties are not
matching the table's field names.

105
00:07:41.595 --> 00:07:48.484
To solve the problem,
we can add metadata to our model, okay?

106
00:07:48.484 --> 00:07:52.137
So to make things easier for you,

107
00:07:52.137 --> 00:07:56.841
under README, we already have that here.

108
00:07:56.841 --> 00:08:01.432
So we can just copy and paste the new
model, so replace the models.

109
00:08:01.432 --> 00:08:02.974
So is something like that.

110
00:08:02.974 --> 00:08:06.362
So this is the type
movie where we specify.

111
00:08:06.362 --> 00:08:07.169
Okay, you know what?

112
00:08:07.169 --> 00:08:11.826
Here, even if it says json, okay,
it's for the database anyway,

113
00:08:11.826 --> 00:08:17.567
because the database provider will use
that metadata, the JSON metadata, okay?

114
00:08:17.567 --> 00:08:24.519
So I just need to replace my
current movie with this one.

115
00:08:24.519 --> 00:08:25.675
What's the only difference?

116
00:08:25.675 --> 00:08:31.308
Is that now it has metadata with
the real field names in the database.

117
00:08:31.308 --> 00:08:36.005
That will also be the name here
when we convert this to JSON.

118
00:08:37.748 --> 00:08:38.870
&gt;&gt; Maximiliano Firtman: Okay, makes sense?

119
00:08:38.870 --> 00:08:40.466
So that's the movie.

120
00:08:40.466 --> 00:08:47.285
I need to do the same for
the other two as well,

121
00:08:47.285 --> 00:08:52.500
which is actually pretty simple.

122
00:08:52.500 --> 00:08:58.354
So for example, if you copy one on actor,

123
00:08:58.354 --> 00:09:04.877
this is json: id,
we introduce it manually,

124
00:09:04.877 --> 00:09:11.092
first_name, last_name, image_url.

125
00:09:11.092 --> 00:09:14.907
Every time you save, in this case,

126
00:09:14.907 --> 00:09:18.728
VS Code is pretty fine, your tabs.

127
00:09:18.728 --> 00:09:22.067
In genre, we have id and name.

128
00:09:24.595 --> 00:09:25.603
&gt;&gt; Maximiliano Firtman: Okay, so

129
00:09:25.603 --> 00:09:31.028
they should match the field
names in the database.

130
00:09:31.028 --> 00:09:36.001
So we have actor, genre, and
movie now with the right metadata.

