WEBVTT

1
00:00:00.176 --> 00:00:02.328
Going back to our code.

2
00:00:02.328 --> 00:00:06.324
Now, if you are following
the instructions in the Readme file,

3
00:00:06.324 --> 00:00:08.396
I'm going to work with default.

4
00:00:08.396 --> 00:00:10.978
It says animated loading.

5
00:00:10.978 --> 00:00:14.157
This is actually not really a requirement,
but

6
00:00:14.157 --> 00:00:19.332
something that is really nice mostly
when we are loading asynchronous data.

7
00:00:19.332 --> 00:00:24.538
Remember every time we are going to
the server that might take time.

8
00:00:24.538 --> 00:00:26.628
Okay, right now, our app is pretty fast,

9
00:00:26.628 --> 00:00:28.903
even if you're using
a cloud based database.

10
00:00:28.903 --> 00:00:31.182
Okay, so it's pretty fast.

11
00:00:31.182 --> 00:00:33.219
But anyway, of course,
that might take time.

12
00:00:33.219 --> 00:00:38.169
I mean, the database might be slow, or
maybe we are in a very slow connection,

13
00:00:38.169 --> 00:00:39.601
so it might take time.

14
00:00:39.601 --> 00:00:45.640
The usual classic pattern was actually
to create a loading spinner or

15
00:00:45.640 --> 00:00:51.797
a loading progress bar, but
that's actually really bad these days.

16
00:00:51.797 --> 00:00:56.011
I mean,
without getting into details on that, but

17
00:00:56.011 --> 00:01:00.912
briefly, when you create a spinner Or
a pro a progress bar,

18
00:01:00.912 --> 00:01:06.811
you're actually setting yourself
a label saying, I'm slow, okay.

19
00:01:06.811 --> 00:01:10.407
That's kind of the idea,
I mean in short words, it's like,

20
00:01:10.407 --> 00:01:12.214
I'm slow so I need to put this.

21
00:01:12.214 --> 00:01:16.685
So instead of doing that the new
pattern that we are using in apps,

22
00:01:16.685 --> 00:01:21.665
it's actually to create Wavy animation,
probably you have seen that.

23
00:01:21.665 --> 00:01:24.732
It's like we set some placeholder for
the content.

24
00:01:24.732 --> 00:01:26.722
The content is not there yet, but

25
00:01:26.722 --> 00:01:31.287
we send some placeholders that are kind
of waving with an animation, okay?

26
00:01:31.287 --> 00:01:33.869
Something like that.

27
00:01:33.869 --> 00:01:37.157
And we can do that pretty easily with
just creating a web component and

28
00:01:37.157 --> 00:01:38.016
some CSS, okay?

29
00:01:38.016 --> 00:01:39.728
Of course the CSS is already there.

30
00:01:39.728 --> 00:01:41.104
You can go and check it.

31
00:01:41.104 --> 00:01:44.187
It's actually a class loading wave.

32
00:01:44.187 --> 00:01:51.760
So if you open in public styles dot CSS,
you can search for loading wave.

33
00:01:54.340 --> 00:01:58.354
&gt;&gt; Maximiliano Firtman: And it's actually
it has, it's for any block based elements,

34
00:01:58.354 --> 00:02:02.302
so it has a size and A background,
and also it has an animation.

35
00:02:02.302 --> 00:02:06.726
The animation is using CSS animation,
and this is making actually that way.

36
00:02:06.726 --> 00:02:10.088
It's moving the background.

37
00:02:10.088 --> 00:02:11.966
It's actually using for the background.

38
00:02:11.966 --> 00:02:14.052
It's using a gradient as a background,
and then it's like moving the background.

39
00:02:14.052 --> 00:02:18.558
And because it's moving the background,
it's like, that gradient is moving,

40
00:02:18.558 --> 00:02:19.874
it's being animated.

41
00:02:19.874 --> 00:02:25.439
So it's creates that wave effect without,
without any any external files or SVG.

42
00:02:25.439 --> 00:02:26.352
It's just pure CSS.

43
00:02:26.352 --> 00:02:31.176
So we're going to create that component so
then later we can use it at

44
00:02:31.176 --> 00:02:35.675
some places where we want to set
that while the data is loading.

45
00:02:35.675 --> 00:02:39.107
So for that,
I will create another component.

46
00:02:39.107 --> 00:02:41.008
Right now we have homepage and movie item.

47
00:02:41.008 --> 00:02:44.374
Remember, movie item is each
movie that we are rendering.

48
00:02:44.374 --> 00:02:48.724
So in this case,
I'm going to create animated loading js,

49
00:02:48.724 --> 00:02:52.473
loading js, and
it's going to be a web component.

50
00:02:52.473 --> 00:02:57.142
So that means that we know what do we
need to do when we are creating a web

51
00:02:57.142 --> 00:02:59.730
component, we are creating a class.

52
00:02:59.730 --> 00:03:04.402
Always loading extending
from HTML element.

53
00:03:04.402 --> 00:03:07.600
By the way, you don't need to
always extend from HTML element.

54
00:03:07.600 --> 00:03:12.321
It can also be a subclass of HTML element.

55
00:03:12.321 --> 00:03:16.682
It can be a custom class of your own, or
there are other elements, for example,

56
00:03:16.682 --> 00:03:18.581
audio element or button element.

57
00:03:18.581 --> 00:03:20.667
So you can extend.

58
00:03:20.667 --> 00:03:22.684
One of the HTML elements and

59
00:03:22.684 --> 00:03:27.517
start from there instead of
starting from an empty placeholder.

60
00:03:27.517 --> 00:03:32.713
Okay, but for now, I think that
HTML element will do the trick,

61
00:03:32.713 --> 00:03:36.082
and remember that if you want to use this,

62
00:03:36.082 --> 00:03:40.818
you also need to register it
with the custom elements API.

63
00:03:40.818 --> 00:03:44.781
So we're going to define a tag,
an HTML tag, a new tile,

64
00:03:44.781 --> 00:03:47.424
for example, animated loading, and

65
00:03:47.424 --> 00:03:53.053
then we set our class as the one that's
going to render that particular element.

66
00:03:53.053 --> 00:03:58.443
And in this case, we are going to
implement the connected callback.

67
00:03:58.443 --> 00:04:02.433
Remember, this is a standard
method that we can

68
00:04:02.433 --> 00:04:06.933
override from the super class and
do something here.

69
00:04:06.933 --> 00:04:10.852
Okay, what's my idea for
this particular web component?

70
00:04:10.852 --> 00:04:16.671
So let's move to index html,
just to see how I want to use this.

71
00:04:16.671 --> 00:04:21.818
Okay, so let's see anywhere in our page,
for example, here in the main.

72
00:04:21.818 --> 00:04:23.768
While it's loading,

73
00:04:23.768 --> 00:04:29.835
I want to use my animator loading
element actually with G, like that.

74
00:04:29.835 --> 00:04:36.710
But also, maybe let's say I want
different boxes, I want five boxes.

75
00:04:36.710 --> 00:04:39.927
Instead of just adding five of those.

76
00:04:39.927 --> 00:04:45.492
Maybe we can just have a property,
a custom attribute where

77
00:04:45.492 --> 00:04:51.514
actually I can say how many elements
do I want, like I want five.

78
00:04:51.514 --> 00:04:56.586
To make this,
we can do that with web components.

79
00:04:56.586 --> 00:05:02.283
The only requirement to make
it fully compatible and

80
00:05:02.283 --> 00:05:08.249
fully spec compatible is to
use data dash attributes.

81
00:05:08.249 --> 00:05:12.079
Okay, so our custom attributes should
have a prefix of data dash that.

82
00:05:12.079 --> 00:05:15.913
There are several reasons for that, but

83
00:05:15.913 --> 00:05:20.891
one of the reason is for
future compatibility with.

84
00:05:20.891 --> 00:05:24.121
Build with HTML,
because maybe in the future,

85
00:05:24.121 --> 00:05:27.674
HTML might add an element
attribute in the spec, and

86
00:05:27.674 --> 00:05:32.138
now we are using it for our own purpose,
so we will have a problem.

87
00:05:32.138 --> 00:05:37.015
So if we prefix those attributes
with data, dash, okay,

88
00:05:37.015 --> 00:05:42.000
we know that for sure that won't
be a problem in the future.

89
00:05:42.000 --> 00:05:47.619
And also we may wanna set here,
maybe the width and the height.

90
00:05:47.619 --> 00:05:49.958
We can use also this.

91
00:05:49.958 --> 00:05:58.081
Like, for example, I want this to
be 300 pixels and we can add CSS.

92
00:05:58.081 --> 00:06:00.046
We can change that later.

93
00:06:00.046 --> 00:06:04.223
So, yes, Is the data dash,
is that like a requirement or

94
00:06:04.223 --> 00:06:06.404
is that just a best practice?

95
00:06:06.404 --> 00:06:10.373
So it's something in the middle actually.

96
00:06:10.373 --> 00:06:15.143
So if you don't use data dash,
it will work and you can use it, okay.

97
00:06:15.143 --> 00:06:21.477
You are not following best practices,
but also you are breaking Key the rules.

98
00:06:21.477 --> 00:06:26.258
But anyway, on HTML, you can break
the rules and nothing happens, okay?

99
00:06:26.258 --> 00:06:32.554
So also, the way that we use now
to get the values is different.

100
00:06:32.554 --> 00:06:35.835
If it's a normal attribute,
even if it doesn't exist, or

101
00:06:35.835 --> 00:06:40.578
if it's a data dash attribute, actually
data dash attributes, they have an AP API.

102
00:06:40.578 --> 00:06:43.182
So now, we will use that.

103
00:06:43.182 --> 00:06:45.775
So this is from an HTML point of view.

104
00:06:45.775 --> 00:06:48.242
So from the UI, this is how we
are going to use our web component.

105
00:06:48.242 --> 00:06:52.302
Okay, so
now I will show you what's the difference.

106
00:06:52.302 --> 00:06:53.634
So if I have another one,

107
00:06:53.634 --> 00:06:56.938
let's say a test that is not
data dash with something inside.

108
00:06:56.938 --> 00:07:00.481
Now, we'll show you how to
read that from JavaScript.

109
00:07:00.481 --> 00:07:04.625
Script, but you will see it's
different from data dash attributes.

110
00:07:04.625 --> 00:07:08.636
So if you're coming from React or
Angular, yeah,

111
00:07:08.636 --> 00:07:14.346
that data dash looks like a lot of work or
bureaucracy that we need to add.

112
00:07:14.346 --> 00:07:18.310
But the reason is, first,
future compatibility,

113
00:07:18.310 --> 00:07:20.840
and also there is a Bucha script.

114
00:07:20.840 --> 00:07:26.488
Anil API available for us to work with
data dash attributes or properties.

115
00:07:26.488 --> 00:07:30.938
So from the web component,
so from here, for example,

116
00:07:30.938 --> 00:07:35.782
I might.So let's talk about
the constructor for a second.

117
00:07:35.782 --> 00:07:40.934
If you override the constructor,
you must call super.

118
00:07:40.934 --> 00:07:42.162
Per If not, it's not going to work.

119
00:07:42.162 --> 00:07:43.131
So remember that.

120
00:07:43.131 --> 00:07:47.346
So it's important to
understand these two moments,

121
00:07:47.346 --> 00:07:51.010
the constructor and
the connected callback.

122
00:07:51.010 --> 00:07:56.935
If I want to read the properties in the
HTML tag, I must use connected callback.

123
00:07:56.935 --> 00:07:57.917
Why?

124
00:07:57.917 --> 00:08:00.968
Because the constructor
is the first thing.

125
00:08:00.968 --> 00:08:06.060
That it's being executed when an object
of that class is being created,

126
00:08:06.060 --> 00:08:11.499
and that moment, the system, the engine
didn't parse yet the attributes.

127
00:08:11.499 --> 00:08:16.644
It's just creating the classic memory,
okay?

128
00:08:16.644 --> 00:08:19.507
So don't use the constructor for
reading properties.

129
00:08:19.507 --> 00:08:20.907
So we can use Connected callbacks.

130
00:08:20.907 --> 00:08:28.396
If we want to get, for example,
the amount of elements that we have or

131
00:08:28.396 --> 00:08:33.446
the width of the high,
we use this.dataset.

132
00:08:33.446 --> 00:08:41.423
Every data-attribute goes to a property
of that object dataset without data dash.

133
00:08:41.423 --> 00:08:45.728
So, for example,
I will have directly, .elements.

134
00:08:45.728 --> 00:08:51.167
This is actually data elements, okay?

135
00:08:51.167 --> 00:08:54.473
So if I want the width,
it's this data set width.

136
00:08:54.473 --> 00:08:57.925
And, of course, the same for height.

137
00:08:57.925 --> 00:08:59.003
You got the idea.

138
00:09:01.266 --> 00:09:04.134
&gt;&gt; Maximiliano Firtman: Now,
For the test attribute,

139
00:09:04.134 --> 00:09:07.785
I need to actually use a different API.

140
00:09:07.785 --> 00:09:11.427
It's not going to dataset.

141
00:09:11.427 --> 00:09:13.156
We can just say this.test and hold for

142
00:09:13.156 --> 00:09:16.030
the best because that depends
on the browser implementation.

143
00:09:16.030 --> 00:09:21.790
What happens when they have an attribute
that is not really recognized?

144
00:09:21.790 --> 00:09:26.420
Or if you want something that we
work everywhere, you need to call,

145
00:09:26.420 --> 00:09:31.295
get attribute and then read that
attributes value with a key, okay, so

146
00:09:31.295 --> 00:09:34.625
if you don't use data dash,
you need to, like,

147
00:09:34.625 --> 00:09:40.506
go back to that old way to read attribute,
even if they're not official attributes.

148
00:09:40.506 --> 00:09:45.440
Okay so data set is better because it
goes automatically to an object, and

149
00:09:45.440 --> 00:09:49.907
you will get all your properties,
your custom properties there.

150
00:09:49.907 --> 00:09:55.559
This is similar to input properties
in Angular or props in React.

151
00:09:55.559 --> 00:10:01.594
And here I just need to loop through
the elements and I need to create a.

152
00:10:01.594 --> 00:10:05.703
Are as many elements as
you are requesting, and

153
00:10:05.703 --> 00:10:08.785
then I'm going to create divs, and

154
00:10:08.785 --> 00:10:13.220
I'm going to apply the class
to those divs, okay.

155
00:10:13.220 --> 00:10:18.420
So I will say, let's call this wrapper.

156
00:10:18.420 --> 00:10:19.340
I'm going to create the div.

157
00:10:24.017 --> 00:10:26.352
&gt;&gt; Maximiliano Firtman: To set the class
there are many ways you can set

158
00:10:26.352 --> 00:10:27.221
the attribute.

159
00:10:27.221 --> 00:10:28.933
You can change the class name.

160
00:10:28.933 --> 00:10:30.092
There are many ways to do that.

161
00:10:30.092 --> 00:10:33.059
You can set the attribute.

162
00:10:33.059 --> 00:10:37.077
You can change the class name,
or you can use class list.

163
00:10:37.077 --> 00:10:39.728
There is an API where you can add a.

164
00:10:39.728 --> 00:10:44.096
A class or
remove a class to that particular element,

165
00:10:44.096 --> 00:10:46.920
classification to that element.

166
00:10:46.920 --> 00:10:53.949
There are many ways to just apply the same
thing and I'm going to apply loading wave.

167
00:10:53.949 --> 00:10:56.830
That's then CSS is applying
an animation there.

168
00:10:56.830 --> 00:11:00.013
Okay.
Does it make sense then?

169
00:11:00.013 --> 00:11:05.078
I should maybe use my width and height.

170
00:11:05.078 --> 00:11:07.733
So I will change the CSS from Javascript.

171
00:11:07.733 --> 00:11:13.311
You can change the CSS
using the style property.

172
00:11:13.311 --> 00:11:15.765
So I have the width, the height.

173
00:11:19.877 --> 00:11:21.322
&gt;&gt; Maximiliano Firtman: This is Height.

174
00:11:21.322 --> 00:11:26.242
And from here, I can also set, or
I can change that from CSS as well, but

175
00:11:26.242 --> 00:11:28.376
I can change the margin maybe.

176
00:11:28.376 --> 00:11:36.193
And we can maybe change
this to inline block.

177
00:11:36.193 --> 00:11:40.381
I'm not sure if you, does anyone know
the difference between display block and

178
00:11:40.381 --> 00:11:41.644
display inline block?

179
00:11:41.644 --> 00:11:42.642
In CSS?

180
00:11:42.642 --> 00:11:44.033
In block takes the whole width.

181
00:11:44.033 --> 00:11:48.697
Uh-huh, And the other one doesn't.

182
00:11:48.697 --> 00:11:53.340
So a block, yeah, it's taking the whole
available width and the parent,

183
00:11:53.340 --> 00:11:57.553
that doesn't mean it's the whole
width that we have on the screen.

184
00:11:57.553 --> 00:12:02.334
It's inspiring element,
inline makes it not a box, but

185
00:12:02.334 --> 00:12:06.923
something that shares
the space with other elements.

186
00:12:06.923 --> 00:12:11.707
And inline block, it's actually inline,
so it's like letters.

187
00:12:11.707 --> 00:12:15.320
I mean two letters, they are inline,
so they are one after the other.

188
00:12:15.320 --> 00:12:17.610
They're sharing the block.

189
00:12:17.610 --> 00:12:22.953
But applying block means that I
can use block based properties

190
00:12:22.953 --> 00:12:29.748
such as marching padding border that
they're not for inline on the elements.

191
00:12:29.748 --> 00:12:30.547
Okay?

192
00:12:30.547 --> 00:12:36.151
And finally,
I need to add this wrapper to myself.

193
00:12:36.151 --> 00:12:40.900
Remember, we are a component, so
we are adding that wrapper So

194
00:12:40.900 --> 00:12:46.185
this is just a quick exercise, okay,
to quickly see how to create a web

195
00:12:46.185 --> 00:12:51.582
component for real usage that then we
can reuse as many times as we want.

196
00:12:51.582 --> 00:12:57.221
&gt;&gt; Student: I think do you want
the append child inside of the loop?

197
00:12:57.221 --> 00:12:58.021
&gt;&gt; Maximiliano Firtman: Yeah,
you're right.

198
00:12:58.021 --> 00:12:58.754
Thank you.

199
00:12:58.754 --> 00:13:01.603
I need this Pen child inside the loop,

200
00:13:01.603 --> 00:13:05.085
because we are creating
different elements.

201
00:13:05.085 --> 00:13:06.141
Yep.
Thank you.

202
00:13:09.749 --> 00:13:11.013
&gt;&gt; Maximiliano Firtman: So
now we can try this.

203
00:13:11.013 --> 00:13:12.493
Will it work?

204
00:13:12.493 --> 00:13:13.957
What do you think?

205
00:13:13.957 --> 00:13:17.222
First, let's remember where I'm using it.

206
00:13:17.222 --> 00:13:19.065
I'm using it in the main.

207
00:13:19.065 --> 00:13:20.405
Okay.

208
00:13:20.405 --> 00:13:23.637
Which I don't know if it's
going to work or not.

209
00:13:23.637 --> 00:13:28.998
What happens with what we have here.

210
00:13:28.998 --> 00:13:32.422
If I refresh, I'm not saying this, but

211
00:13:32.422 --> 00:13:37.374
there are a couple of reasons
of why we are not saying this.

212
00:13:37.374 --> 00:13:42.384
Let's go back and
see Who is rendering the home page.

213
00:13:42.384 --> 00:13:44.200
Remember that this is a home page.

214
00:13:44.200 --> 00:13:50.503
At some point someone is actually loading
the home page and actually is here.

215
00:13:50.503 --> 00:13:52.580
Okay, so it's adding this.

216
00:13:52.580 --> 00:13:57.279
It's appending the child home page.

217
00:13:57.279 --> 00:13:59.938
That's something that we will
change in a few minutes.

218
00:13:59.938 --> 00:14:02.213
But it has a homepage there.

219
00:14:02.213 --> 00:14:08.090
If we look at the DOM,
we look at main, okay?

220
00:14:08.090 --> 00:14:12.403
We do have main and
we do have animated loading.

221
00:14:12.403 --> 00:14:17.534
It's there with all the data properties,
but actually has no rendering.

222
00:14:17.534 --> 00:14:18.569
Does anyone know why?

223
00:14:18.569 --> 00:14:24.105
Yeah, they had this problem before.

224
00:14:24.105 --> 00:14:29.764
For the browser to recognize our web
components, we must import the file.

225
00:14:29.764 --> 00:14:32.821
If it's not in the Import tree,

226
00:14:32.821 --> 00:14:37.473
the browser will never know
that I do have a file.

227
00:14:37.473 --> 00:14:40.545
Okay, so I need to import this in.

228
00:14:40.545 --> 00:14:47.039
In this case, it's going to be components,
forward slash, animator, loading, js.

229
00:14:47.039 --> 00:14:53.060
So now if I refresh, something happens,
okay, it's actually saying,

230
00:14:53.060 --> 00:15:00.359
hey, relative references must start with
either forward slash, dot, forward slash.

231
00:15:00.359 --> 00:15:05.612
Slash, which is true, be careful when
you're doing this, because, mostly, if

232
00:15:05.612 --> 00:15:10.805
you're used to some bundlers, JavaScript
bundlers, they solve those issues.

233
00:15:10.805 --> 00:15:15.398
In browser based JavaScript,
you have to start your imports,

234
00:15:15.398 --> 00:15:20.870
the path of the file you're importing,
with a forward slash or with a dot.

235
00:15:20.870 --> 00:15:23.574
So it's mandatory.

236
00:15:23.574 --> 00:15:25.782
Look at that.

237
00:15:25.782 --> 00:15:31.567
Now I have five loading animations.

238
00:15:31.567 --> 00:15:36.022
And of course, we can change properties.

239
00:15:36.022 --> 00:15:40.758
Let's say maybe I want 200, 500.

240
00:15:40.758 --> 00:15:45.198
Of course, you can play with that
until you are happy with that.

241
00:15:45.198 --> 00:15:50.140
You can make them smaller, or
maybe 200 and 400, something like that.

242
00:15:50.140 --> 00:15:51.492
Okay?

243
00:15:51.492 --> 00:15:52.260
It's up to you.

244
00:15:52.260 --> 00:15:57.140
And also, you can use these for
very small lines to simulate text.

245
00:16:01.063 --> 00:16:04.404
Just a to do for later.

246
00:16:04.404 --> 00:16:05.998
Okay, for you, maybe homework for
you to have in mind.

247
00:16:05.998 --> 00:16:10.628
So a warning,
what happens if you change this purpose,

248
00:16:10.628 --> 00:16:16.653
these properties manually,
like from JavaScript, or even from here?

249
00:16:16.653 --> 00:16:21.836
So I'm going to here, and
I'm changing that file and

250
00:16:21.836 --> 00:16:25.184
then now I'm saying I want three.

251
00:16:25.184 --> 00:16:28.440
It is not changing it,
or I wanna change this.

252
00:16:28.440 --> 00:16:32.473
It's not updating the ui.

253
00:16:32.473 --> 00:16:33.093
Okay?

254
00:16:33.093 --> 00:16:34.395
Makes sense.

255
00:16:34.395 --> 00:16:37.571
That is because we have already
rendered our work component,

256
00:16:37.571 --> 00:16:41.981
the lifecycle of the web component is more
complex and actually connector callback.

257
00:16:41.981 --> 00:16:44.974
And actually connected callback
is executed only when you

258
00:16:44.974 --> 00:16:46.933
put that in the DOM, and that's all.

259
00:16:46.933 --> 00:16:49.891
So you need to remove it from the DOM and

260
00:16:49.891 --> 00:16:53.787
put it again to actually
execute that code again.

261
00:16:53.787 --> 00:16:59.750
So there are other methods available in a
web component, and one is being executed.

262
00:16:59.750 --> 00:17:03.037
Some of the attributes are changing.

263
00:17:03.037 --> 00:17:07.909
So in that case, you can re-render or
you can update the UI when that happens.

264
00:17:07.909 --> 00:17:14.923
Okay, maybe in this particular example,
as we are because it's just for animation.

265
00:17:14.923 --> 00:17:20.524
So once you design it, probably you're not
gonna change it, but when you're creating

266
00:17:20.524 --> 00:17:25.902
other web components have in mind that if
attributes are changing dynamically after

267
00:17:25.902 --> 00:17:30.920
the element is injected in the dome,
you need to detect that through a method.

268
00:17:30.920 --> 00:17:35.354
Okay, so now I'm going to delete
that because we will use this

269
00:17:35.354 --> 00:17:37.757
animated loading later, okay.

270
00:17:37.757 --> 00:17:41.827
On different parts of the app,
we may use that Web web component,

271
00:17:41.827 --> 00:17:44.270
so that was just for testing purposes.

