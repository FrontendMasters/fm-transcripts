WEBVTT

1
00:00:00.000 --> 00:00:01.789
&gt;&gt; Maximiliano Firtman: Something
that we need to do,

2
00:00:01.789 --> 00:00:06.242
we need to start doing is to start
working with environmental variables.

3
00:00:06.242 --> 00:00:10.550
Because this idea of copy and
pasting the connection string and

4
00:00:10.550 --> 00:00:13.881
hard coding that inside go files,
it's okay for

5
00:00:13.881 --> 00:00:19.019
the install script because it's
something that we're not going to ship.

6
00:00:19.019 --> 00:00:23.520
But if you're going to ship
this to a server it's not

7
00:00:23.520 --> 00:00:28.240
really a good idea, okay, so
we need to move one step.

8
00:00:28.240 --> 00:00:35.651
So that's why we are going to start
using directly our env files.

9
00:00:35.651 --> 00:00:38.066
Okay, so we will get there.

10
00:00:38.066 --> 00:00:41.162
So do you remember that I mentioned?

11
00:00:41.162 --> 00:00:46.510
That I actually want to offer you
a future proof back end project,

12
00:00:46.510 --> 00:00:51.966
that if in the future,
you actually want to change your database.

13
00:00:51.966 --> 00:00:57.347
And now you don't want to use Postgres
anymore, you want to use MySQL or

14
00:00:57.347 --> 00:01:01.575
whatever, you should be able
to do that easily, okay?

15
00:01:01.575 --> 00:01:05.522
So the way to solve the problem
is to create an interface,

16
00:01:05.522 --> 00:01:09.232
an abstract interface that
then later we can change.

17
00:01:09.232 --> 00:01:11.394
But let me try to explain what that is.

18
00:01:11.394 --> 00:01:14.378
So to do that,
I'm going to create a new folder.

19
00:01:14.378 --> 00:01:19.016
We can call this provider data database.

20
00:01:19.016 --> 00:01:23.117
Up to you, or go, of course,
remember that it's not a folder.

21
00:01:23.117 --> 00:01:26.436
It's a folder and also a package.

22
00:01:26.436 --> 00:01:32.740
So let's call it data and we're going
to create our interface for this.

23
00:01:32.740 --> 00:01:36.880
So we can call this interface or
interfaces.go.

24
00:01:36.880 --> 00:01:41.629
So here we are going to write in
the package data an interface.

25
00:01:41.629 --> 00:01:44.757
So we are gonna create a new type.

26
00:01:44.757 --> 00:01:47.761
But instead of being a structure,
it's gonna be an interface.

27
00:01:47.761 --> 00:01:51.017
We can call this a movie storage.

28
00:01:51.017 --> 00:01:54.022
So it's a storage that
will store our movies.

29
00:01:54.022 --> 00:01:59.084
There's gonna be an interface and
the idea here is we are gonna set

30
00:01:59.084 --> 00:02:04.435
the signature of all the functions
that we will need for our project.

31
00:02:04.435 --> 00:02:10.108
And then we will force
the implementation of that interface

32
00:02:10.108 --> 00:02:14.768
in one particular
PostgreSQL implementation.

33
00:02:14.768 --> 00:02:15.915
Does it make sense?

34
00:02:15.915 --> 00:02:21.592
So it's like an abstract class
in the OOP world, kind of.

35
00:02:21.592 --> 00:02:28.463
So in this case, for example,
we will have a get top movies function,

36
00:02:28.463 --> 00:02:35.684
okay, something like that that returns
a pair of a collection of models,

37
00:02:35.684 --> 00:02:41.052
movie, so a collection of movie and
a possible error.

38
00:02:41.052 --> 00:02:47.424
Remember that some points, it may not
work, so we can return the type error.

39
00:02:47.424 --> 00:02:52.186
We couldn't connect to the database,
something happened, so

40
00:02:52.186 --> 00:02:56.343
we always need to send the error and
populate the error.

41
00:02:56.343 --> 00:02:57.672
This is a pattern.

42
00:02:57.672 --> 00:02:59.906
It's not mandatory, but this is a pattern.

43
00:02:59.906 --> 00:03:05.541
Again, what I'm saying is that you could
just return the collection of movies.

44
00:03:05.541 --> 00:03:11.183
You can do that, but if you do that,
you will lose the ability to pass error

45
00:03:11.183 --> 00:03:16.190
messages across the layers of your app,
which is not a good idea.

46
00:03:16.190 --> 00:03:18.356
Okay, so we are going to pass an error.

47
00:03:18.356 --> 00:03:22.319
This is a type It's not the name
of a variable but it's a type,

48
00:03:22.319 --> 00:03:26.756
the type is error, and we know that
we have get random movies as well.

49
00:03:26.756 --> 00:03:31.713
It's just returning the same thing,
things that we will need later,

50
00:03:31.713 --> 00:03:35.746
maybe in the meantime,
we're not going to use them, but

51
00:03:35.746 --> 00:03:39.040
we will have get movie by
ID to get the details.

52
00:03:39.040 --> 00:03:41.372
So I receive an ID as an integer.

53
00:03:41.372 --> 00:03:44.847
And I'm going to return not
the collection of movies, but one movie.

54
00:03:47.650 --> 00:03:51.838
&gt;&gt; Maximiliano Firtman: So
models.movie, so no square brackets,

55
00:03:51.838 --> 00:03:55.355
just one movie and a possible error.

56
00:03:55.355 --> 00:04:00.241
We can search movies by name.

57
00:04:00.241 --> 00:04:01.693
So we Pparse a name.

58
00:04:05.745 --> 00:04:09.937
&gt;&gt; Maximiliano Firtman: Later, we will see
that ,we will need more arguments here,

59
00:04:09.937 --> 00:04:14.383
because we will reorder the search,
we will filter the search.

60
00:04:14.383 --> 00:04:16.794
Okay, but for now,
we can keep it like this.

61
00:04:16.794 --> 00:04:20.164
If you're taking it from the rhythm,
maybe you have more arguments.

62
00:04:20.164 --> 00:04:22.720
It's okay, you can add those arguments,
doesn't matter.

63
00:04:22.720 --> 00:04:28.785
And in this case,
I'm also returning many movies.

64
00:04:28.785 --> 00:04:33.635
And also we will get all the genre.

65
00:04:33.635 --> 00:04:36.598
We will use that later, you will see why.

66
00:04:36.598 --> 00:04:40.458
No arguments, and
we are returning a collection.

67
00:04:40.458 --> 00:04:43.428
Or a possible error.

68
00:04:43.428 --> 00:04:44.696
So this is my interface.

69
00:04:48.615 --> 00:04:52.170
&gt;&gt; Maximiliano Firtman: So the idea
is that we make an abstraction layer,

70
00:04:52.170 --> 00:04:56.523
so in the future,
we may have different implementations.

71
00:04:56.523 --> 00:05:01.218
One can be dummy data from a JSON,
The other one can be the real Postgres

72
00:05:01.218 --> 00:05:06.073
database, another one can be a MySQL
database, and MongoDB database,

73
00:05:06.073 --> 00:05:10.071
different implementations of
the same interface, okay?

74
00:05:10.071 --> 00:05:11.230
Does it make sense?

75
00:05:11.230 --> 00:05:13.787
That's the idea.

76
00:05:13.787 --> 00:05:18.725
&gt;&gt; Speaker 2: For GetMovieByID, we're not
using a pointer for that one, but for

77
00:05:18.725 --> 00:05:23.835
all the other ones because they're
all slices I guess there would be,

78
00:05:23.835 --> 00:05:26.625
wouldn't those be like references.

79
00:05:26.625 --> 00:05:31.609
But then we're copying just the one
get movie by IV versus all the others

80
00:05:31.609 --> 00:05:33.362
being like references.

81
00:05:33.362 --> 00:05:34.459
&gt;&gt; Maximiliano Firtman: Let
me see if I understand.

82
00:05:34.459 --> 00:05:36.834
You're talking about
what you're returning?

83
00:05:36.834 --> 00:05:38.467
&gt;&gt; Speaker 2: Yeah, what we're returning.

84
00:05:38.467 --> 00:05:41.911
Forget movie by ID so
that one's not a pointer.

85
00:05:41.911 --> 00:05:46.682
But all of the other ones are kind of
implicently pointers because they're

86
00:05:46.682 --> 00:05:47.675
slices right?

87
00:05:47.675 --> 00:05:48.363
&gt;&gt; Maximiliano Firtman: Yeah.

88
00:05:48.363 --> 00:05:50.158
&gt;&gt; Speaker 2: Or am I misunderstanding?

89
00:05:50.158 --> 00:05:53.761
&gt;&gt; Maximiliano Firtman: So they are slices
so actually you are returning the slice as

90
00:05:53.761 --> 00:05:57.233
the collection and
the collection has pointers to that.

91
00:05:57.233 --> 00:06:00.996
So if you're asking, if we so,
what's the difference?

92
00:06:00.996 --> 00:06:02.948
It's creating a copy.

93
00:06:02.948 --> 00:06:06.751
Yeah, if you don't wanna,
we can return a pointer for sure.

94
00:06:06.751 --> 00:06:09.545
&gt;&gt; Speaker 2: So
that's not an issue that we're copying.

95
00:06:09.545 --> 00:06:10.946
&gt;&gt; Maximiliano Firtman: You
are copying the movie.

96
00:06:10.946 --> 00:06:11.868
What's copying the movie?

97
00:06:11.868 --> 00:06:14.681
The values of the values of that value.

98
00:06:14.681 --> 00:06:15.695
Remember the value.

99
00:06:15.695 --> 00:06:16.650
So the movie is a value.

100
00:06:16.650 --> 00:06:18.028
It's a model.

101
00:06:18.028 --> 00:06:22.579
It has the ID, the title, the tagline,
has all those properties.

102
00:06:22.579 --> 00:06:27.314
So if you are not passing or
returning a pointer,

103
00:06:27.314 --> 00:06:31.134
you are creating a copy of that, okay?

104
00:06:31.134 --> 00:06:38.541
If you want more efficiency in terms of
memory management, pointers are better.

105
00:06:38.541 --> 00:06:40.309
It depends on the case.

106
00:06:40.309 --> 00:06:46.494
You may be also reducing,
let's say, easy to understand code.

107
00:06:46.494 --> 00:06:47.214
Depends on the case.

108
00:06:47.214 --> 00:06:50.257
I'm not saying this case.

109
00:06:50.257 --> 00:06:52.814
So, we can do both.

110
00:06:52.814 --> 00:06:56.670
In terms of real performance,
it's not going to be a huge deal.

111
00:06:56.670 --> 00:06:59.824
It's just basic data that we are sending.

112
00:06:59.824 --> 00:07:03.584
We don't have a lot of like we don't
have images inside the database or

113
00:07:03.584 --> 00:07:07.535
things like that, that cloning that or
copying that will take more time,

114
00:07:07.535 --> 00:07:10.742
but it will be more efficient
if we are returning a pointer.

115
00:07:10.742 --> 00:07:12.129
Yeah, you are right on that.

