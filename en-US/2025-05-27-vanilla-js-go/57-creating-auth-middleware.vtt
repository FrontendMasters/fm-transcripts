WEBVTT

1
00:00:00.164 --> 00:00:04.016
So now we have our JSON Web Token ready,
so

2
00:00:04.016 --> 00:00:08.973
it's client-side,
available in local storage and

3
00:00:08.973 --> 00:00:13.392
also in our store, and
now it's time to use it.

4
00:00:13.392 --> 00:00:17.581
But before doing that, do you have
any question on JSON web tokens?

5
00:00:17.581 --> 00:00:19.401
Why are we doing that?

6
00:00:19.401 --> 00:00:21.932
Why is it important?

7
00:00:24.470 --> 00:00:27.145
&gt;&gt; Student: What's the benefit
over the session token?

8
00:00:27.145 --> 00:00:30.449
&gt;&gt; Maximiliano Firtman: Well, the benefit
is that when you are using a session

9
00:00:30.449 --> 00:00:34.637
token, actually, you need to save
session data server-side, so

10
00:00:34.637 --> 00:00:38.101
you need an in-memory storage or
file system storage.

11
00:00:38.101 --> 00:00:40.727
So you need resources from the server.

12
00:00:40.727 --> 00:00:44.665
So that's the main advantage
of using this technique,

13
00:00:44.665 --> 00:00:49.021
is that you're relying on saving
the data client-side, but

14
00:00:49.021 --> 00:00:53.566
because it's encrypted and
you are the only one having the key.

15
00:00:53.566 --> 00:00:56.301
You are the only one that
can decrypt the data, so

16
00:00:56.301 --> 00:00:59.187
then you don't need to
spend any actual resource.

17
00:00:59.187 --> 00:01:04.075
Server-side, no memory,
no database, no file system,

18
00:01:04.075 --> 00:01:07.805
specifically target
the data from the user.

19
00:01:07.805 --> 00:01:13.091
And that's important when
you have millions of users.

20
00:01:13.091 --> 00:01:14.305
So that's the main advantage, actually.

21
00:01:16.929 --> 00:01:22.274
&gt;&gt; Maximiliano Firtman: Okay, so, the
final part of our project is to actually

22
00:01:22.274 --> 00:01:26.704
get favorites and
watch lists working okay?

23
00:01:26.704 --> 00:01:29.853
And we know how to work with pages,
so making the page for

24
00:01:29.853 --> 00:01:34.074
favorites and watch lists actually
pretty straightforward at this time.

25
00:01:34.074 --> 00:01:36.987
So when you create the routes
the components, we will do that.

26
00:01:36.987 --> 00:01:42.640
But the main problem is that to actually
get the data, we need new APIs.

27
00:01:42.640 --> 00:01:47.183
So we wanna get the data, and
also we wanna push new data,

28
00:01:47.183 --> 00:01:52.011
because when we are getting into a movie,
we know that we have

29
00:01:52.011 --> 00:01:56.761
some buttons here to add to favorites and
add to watch list.

30
00:01:56.761 --> 00:02:00.075
So we need to create those
API handlers server-side.

31
00:02:00.075 --> 00:02:04.678
That's actually also pretty
straightforward, but

32
00:02:04.678 --> 00:02:06.831
there is one catch here.

33
00:02:06.831 --> 00:02:12.076
For calling those APIs,
I actually must be logged in, okay?

34
00:02:12.076 --> 00:02:16.125
So we need to read,
we need to send from the client, and

35
00:02:16.125 --> 00:02:21.145
also read from the server that JWT
that token, decrypt the token and

36
00:02:21.145 --> 00:02:27.135
get the user's email from there, or the
user's ID in case you're using an ID and

37
00:02:27.135 --> 00:02:31.130
not the email, and
then make the queries over there.

38
00:02:31.130 --> 00:02:35.145
So that means that if you
go server-side to main.go,

39
00:02:35.145 --> 00:02:39.262
actually, we will need to
add more routes here, okay?

40
00:02:39.262 --> 00:02:42.401
Example here after authentication.

41
00:02:42.401 --> 00:02:48.546
So I'm going to start writing them,
and then I will refactor it.

42
00:02:48.546 --> 00:02:51.854
So I need to handle another func, for

43
00:02:51.854 --> 00:02:56.735
example this can be,
&gt;&gt; Maximiliano Firtman: API, and

44
00:02:56.735 --> 00:03:01.663
we can use the same account as we
were using before in this folder.

45
00:03:01.663 --> 00:03:04.947
And we can say favorites and
something similar.

46
00:03:04.947 --> 00:03:10.398
And we need to create then
another handler for this.

47
00:03:10.398 --> 00:03:13.182
So that's actually simple to solve.

48
00:03:13.182 --> 00:03:17.355
So let's say we will create one,
GetFavorites.

49
00:03:17.355 --> 00:03:18.950
It's not there, so it's give me an error.

50
00:03:18.950 --> 00:03:23.474
The thing is that get favorites will
need to actually read the token,

51
00:03:23.474 --> 00:03:25.659
decrypt the token, and do that.

52
00:03:25.659 --> 00:03:28.087
And also we will do another one for

53
00:03:28.087 --> 00:03:31.917
watch list that actually
needs to do the same thing.

54
00:03:31.917 --> 00:03:35.742
So it needs to open the token,
read the token, and

55
00:03:35.742 --> 00:03:40.038
encrypt the token, get the email,
go to the database.

56
00:03:40.038 --> 00:03:44.117
It seems like we may have in
a real project many APIs,

57
00:03:44.117 --> 00:03:50.356
sometimes hundreds of APIs that will need
to work with the JWT, with the token.

58
00:03:50.356 --> 00:03:52.610
So there should be a better idea or

59
00:03:52.610 --> 00:03:57.449
a better way to do that instead of
doing it manually on every situation.

60
00:03:57.449 --> 00:04:00.753
And for that,
we will use the idea of a middleware.

61
00:04:00.753 --> 00:04:06.170
A middleware is a design pattern where
we can set some piece of software that's

62
00:04:06.170 --> 00:04:11.422
why it's sending with where it's
a middleware, it's a middle software,

63
00:04:11.422 --> 00:04:15.461
a piece of software that we put
in the middle of two pieces.

64
00:04:15.461 --> 00:04:20.563
So in this case, one piece is gonna
be GetFavorites and GetWatchlist,

65
00:04:20.563 --> 00:04:24.569
and the other one is gonna be
our multiplexer from HTTP.

66
00:04:24.569 --> 00:04:25.190
We want the middleware there.

67
00:04:25.190 --> 00:04:32.375
That middleware will, for example,
work with the, in this case, the JWT.

68
00:04:32.375 --> 00:04:38.286
It will decrypt the JWT, it will check if
it's bad, and it will return an error.

69
00:04:38.286 --> 00:04:43.038
Yeah, if it's not valued, and
if it's valued, it's gonna parse data, for

70
00:04:43.038 --> 00:04:48.021
example, the email through something known
as the context to the next software.

71
00:04:48.021 --> 00:04:50.836
So for example,
GetFavorite, GetWatch list.

72
00:04:50.836 --> 00:04:55.080
So the idea is that then
these handlers will receive

73
00:04:55.080 --> 00:04:57.946
the email automatically, okay?

74
00:04:57.946 --> 00:05:00.598
So if we get there, we will get the email.

75
00:05:00.598 --> 00:05:05.698
So that's why we should create this
idea of a middleware first, in case

76
00:05:05.698 --> 00:05:11.821
you're following along with the readme,
we will be at h1 creating the middleware.

77
00:05:11.821 --> 00:05:14.794
The middleware is just another function,
so

78
00:05:14.794 --> 00:05:20.127
we don't have any special thing in Go
that states, this is a middleware, okay?

79
00:05:20.127 --> 00:05:23.714
It looks like a handler, actually, but

80
00:05:23.714 --> 00:05:28.471
the difference is that we
will use it as a middleware.

81
00:05:28.471 --> 00:05:32.718
So, if I take this middleware,
I need to put that in the handler.

82
00:05:32.718 --> 00:05:36.666
So, in account handlers, typically,

83
00:05:36.666 --> 00:05:41.192
we keep the factory,
new function at the end or

84
00:05:41.192 --> 00:05:45.968
at the beginning, and
main just not mandatory.

85
00:05:45.968 --> 00:05:50.441
And then we can save that middleware,
okay?

86
00:05:50.441 --> 00:05:52.573
So the middleware is going to be used.

87
00:05:52.573 --> 00:06:00.364
Then, every time we have a route
that needs authentication, okay?

88
00:06:00.364 --> 00:06:03.731
We are talking about,
in this case, any kind of route,

89
00:06:03.731 --> 00:06:05.675
there can be also static files.

90
00:06:05.675 --> 00:06:10.366
We don't have that right now because
we are managing that client side, but

91
00:06:10.366 --> 00:06:14.759
if server-side, there is a full
folder that you don't wanna serve,

92
00:06:14.759 --> 00:06:19.319
if the user has no JWT, no token,
then you can also use that middleware.

93
00:06:19.319 --> 00:06:20.927
Okay, so now we have the handler.

94
00:06:20.927 --> 00:06:22.167
So what's the idea?

95
00:06:22.167 --> 00:06:26.924
The idea is that we will
use that middleware to wrap

96
00:06:26.924 --> 00:06:30.774
when we were actually trying to do this,

97
00:06:30.774 --> 00:06:36.808
now we will wrap this somehow,
we will finish this in a second.

98
00:06:36.808 --> 00:06:41.144
We will say,
accounthandler.Auth middleware, and

99
00:06:41.144 --> 00:06:46.053
the middleware will receive
the next handler as an argument.

100
00:06:46.053 --> 00:06:50.227
So this is a part where we will parse
the new handlers that I didn't create yet,

101
00:06:50.227 --> 00:06:53.009
okay, but
to understand what we're doing, okay,

102
00:06:53.009 --> 00:06:56.068
the idea is that this will
look like something like this.

103
00:06:56.068 --> 00:06:57.231
Okay, it will look something like this.

104
00:06:57.231 --> 00:06:59.555
Then I will need to
refactor this a little bit.

105
00:06:59.555 --> 00:07:03.301
So then I need to create
the other handlers.

106
00:07:03.301 --> 00:07:06.827
Also, we need to understand
that the handlers,

107
00:07:06.827 --> 00:07:09.237
we need to talk to our data store.

108
00:07:09.237 --> 00:07:11.234
Remember, we have a data repository.

109
00:07:11.234 --> 00:07:15.385
That is the one that is
connecting to the database, okay?

110
00:07:15.385 --> 00:07:19.991
So when you go to the database and
we check the account repository,

111
00:07:19.991 --> 00:07:23.129
okay, in the list of
functions that we have.

112
00:07:23.129 --> 00:07:26.697
We already have saved collection, and

113
00:07:26.697 --> 00:07:31.884
we already have get account
details that will also give me

114
00:07:31.884 --> 00:07:36.871
all the favorites and
movies in the watch list, okay?

115
00:07:36.871 --> 00:07:40.266
So we already have
the data repository ready.

116
00:07:40.266 --> 00:07:46.279
We just need the handlers, so HTTP can
actually handle those and request that.

117
00:07:46.279 --> 00:07:53.081
So going back to handlers, now I need
to create the missing handlers, okay?

118
00:07:53.081 --> 00:07:57.151
And in h2,
you have the handler SaveToCollection and

119
00:07:57.151 --> 00:08:00.170
also GetFavorite, and GetWatchlist.

120
00:08:00.170 --> 00:08:04.543
Those are just going to
our data repository, and

121
00:08:04.543 --> 00:08:08.820
they're grabbing the data or
saving the data.

122
00:08:08.820 --> 00:08:11.820
You can see that this one,
as we did before,

123
00:08:11.820 --> 00:08:15.646
they are working sometimes
with data coming from post.

124
00:08:15.646 --> 00:08:19.765
Remember that we can send data from post,
so we are decoding the body.

125
00:08:19.765 --> 00:08:23.131
We have already done this before and
explained this before.

126
00:08:23.131 --> 00:08:27.596
So we are decoding the body that we are
sending from the client in a structure.

127
00:08:27.596 --> 00:08:31.718
For example, in this case, it's gonna
say that movie into that collection.

128
00:08:31.718 --> 00:08:36.628
Remember, collection is an abstract
concept that we have here to work

129
00:08:36.628 --> 00:08:38.885
with favorites and watchlist.

130
00:08:38.885 --> 00:08:44.308
And the part that is new for
us is that we need the email

131
00:08:44.308 --> 00:08:49.116
to get favorites and
to get the watch list, and

132
00:08:49.116 --> 00:08:54.187
also we need the email to
save into the database.

133
00:08:54.187 --> 00:08:58.985
So we need the user, and
we are getting that from the context.

134
00:08:58.985 --> 00:09:00.486
This is how this works.

135
00:09:00.486 --> 00:09:05.212
R the request, receives an object,
actually value known as the context.

136
00:09:05.212 --> 00:09:08.974
In this case, inside the context
is like a dictionary, okay?

137
00:09:08.974 --> 00:09:15.439
It's a bag, and that bag is going through
all the middlewares that you may have.

138
00:09:15.439 --> 00:09:17.131
So when you have middlewares,

139
00:09:17.131 --> 00:09:20.133
the idea is that we have
the multi Multiplexer of HGDP.

140
00:09:20.133 --> 00:09:23.597
So this is an HGDP
request is coming to Go.

141
00:09:23.597 --> 00:09:29.181
Go takes that, and typically that request
go through a series of middlewares.

142
00:09:29.181 --> 00:09:31.725
You can have as many
middlewares as you want.

143
00:09:31.725 --> 00:09:37.160
For example, one can check security,
the other one can verify the data is not

144
00:09:37.160 --> 00:09:42.520
coming with some bad data, or wherever,
then the other one can do logging.

145
00:09:42.520 --> 00:09:45.046
So maybe it's creating
a load of every request.

146
00:09:45.046 --> 00:09:46.983
And so we have a lot of middlewares.

147
00:09:46.983 --> 00:09:51.820
Each middleware will take the request,
and we'll parse the request to the next

148
00:09:51.820 --> 00:09:54.793
middleware until we end
up in the final handler.

149
00:09:54.793 --> 00:09:59.830
Well, each middleware can also
talk with the context and can use

150
00:09:59.830 --> 00:10:05.714
that bag that we are parsing through
to store data for the next middleware.

151
00:10:05.714 --> 00:10:11.202
So in this case, our middleware for
authentication is actually

152
00:10:11.202 --> 00:10:17.718
adding the email where this email is
coming from, from decrypting the JWT.

153
00:10:17.718 --> 00:10:22.683
So that's why when we get into get
favor is we already have the email in

154
00:10:22.683 --> 00:10:28.507
the context, because the previous
middleware actually decrypted it from JWT,

155
00:10:28.507 --> 00:10:31.177
and now we are ready to use it, okay?

156
00:10:31.177 --> 00:10:36.271
What happens if there were no email,
if the token were not the right one,

157
00:10:36.271 --> 00:10:39.207
or someone is trying to hijack the token?

158
00:10:39.207 --> 00:10:44.279
Well, we need to check the middleware and
see what happens.

159
00:10:44.279 --> 00:10:48.795
But actually what will happen is
that it's going to throw an error

160
00:10:48.795 --> 00:10:53.240
because the middleware has also
access to the response writer.

161
00:10:53.240 --> 00:10:58.431
So if the middleware think that there
is an error, it will stop there.

162
00:10:58.431 --> 00:11:03.053
In that case, it's not gonna pass
the execution to the handler,

163
00:11:03.053 --> 00:11:04.492
okay, make sense?

164
00:11:04.492 --> 00:11:06.490
Here we are parsing the token.

165
00:11:06.490 --> 00:11:08.393
We are getting the data here.

166
00:11:08.393 --> 00:11:14.673
If it's an invalid token, we are sending
to W, so to the response writer, an error.

167
00:11:14.673 --> 00:11:19.189
In this case, that was unauthorized,
this is 401, okay?

168
00:11:19.189 --> 00:11:21.004
The same happens if, for example,

169
00:11:21.004 --> 00:11:23.553
if you are trying to get
the claims from the token.

170
00:11:23.553 --> 00:11:28.517
If you remember, the claims are like
the metadata that we are saving,

171
00:11:28.517 --> 00:11:33.917
that so far we were saving the email
from the user and the expiration, okay?

172
00:11:33.917 --> 00:11:36.524
So we are getting that data, and

173
00:11:36.524 --> 00:11:41.257
this is where we are getting
the email from the claims, and

174
00:11:41.257 --> 00:11:45.712
then saving it in the context for
the next part, okay?

175
00:11:45.712 --> 00:11:46.792
Does it make sense?

176
00:11:46.792 --> 00:11:51.906
So now that we have the handlers ready,
it's time to finish this idea.

177
00:11:51.906 --> 00:11:56.991
So something to have in mind is
that middlewares are not expecting

178
00:11:56.991 --> 00:12:02.547
a function like this, so we need to call,
you will see this in a second.

179
00:12:02.547 --> 00:12:07.414
You will need to call handle
with the middleware, and

180
00:12:07.414 --> 00:12:13.904
then inside the middleware,
you're going to parse HTTP handle func,

181
00:12:13.904 --> 00:12:18.787
in this case, GetFavorites,
something like that.

182
00:12:18.787 --> 00:12:21.668
Also, by the way,

183
00:12:21.668 --> 00:12:26.901
you have this in README at the end.

184
00:12:26.901 --> 00:12:33.238
You have the three handlers.

185
00:12:33.238 --> 00:12:39.013
So now that we know what we are doing,
we can just paste the three so

186
00:12:39.013 --> 00:12:43.318
we have three new handles,
account favorites,

187
00:12:43.318 --> 00:12:48.578
account watchlist, and
account save-to-collection.

188
00:12:48.578 --> 00:12:53.058
Okay, and
they're passing through the middleware.

189
00:12:53.058 --> 00:12:56.971
Func above looks like you
parse an endpoint, but

190
00:12:56.971 --> 00:13:00.604
you don't have to do
that in the middleware?

191
00:13:00.604 --> 00:13:03.225
Lemme see if I understand.

192
00:13:03.225 --> 00:13:07.190
Are you saying that here when
I'm saying handle function,

193
00:13:07.190 --> 00:13:09.339
I'm not passing the endpoint.

194
00:13:09.339 --> 00:13:10.416
&gt;&gt; Student: Yeah.

195
00:13:10.416 --> 00:13:12.810
&gt;&gt; Maximiliano Firtman: Yeah,
because it's a middleware,

196
00:13:12.810 --> 00:13:15.673
because I'm parsing that to a middleware.

197
00:13:15.673 --> 00:13:20.094
This is like a pipe, okay?

198
00:13:20.094 --> 00:13:23.069
So when you are working with middlewares,
you have a pipe.

199
00:13:23.069 --> 00:13:26.445
You have the final hander, and
then, you have the request.

200
00:13:26.445 --> 00:13:31.443
So the URL or the path is needed only
on the request when you open the pipe.

201
00:13:31.443 --> 00:13:36.181
When you open the pipe, you parse the data
and the initial data, the initial request.

202
00:13:36.181 --> 00:13:38.167
So you check the URL there.

203
00:13:38.167 --> 00:13:39.254
Then In the pipe,

204
00:13:39.254 --> 00:13:43.316
you have several middlewares that
will be looking at the request,

205
00:13:43.316 --> 00:13:48.338
doing something with a response, or not
doing something with the context or not.

206
00:13:48.338 --> 00:13:51.000
And passing the request to the next
middleware until it got to the end

207
00:13:51.000 --> 00:13:53.393
of the pipe, and the end of
the pipe is actually the handler.

208
00:13:53.393 --> 00:13:58.863
So that's why you define the URL
only at the beginning of the pipe,

209
00:13:58.863 --> 00:14:01.317
not on every part of the pipe.

210
00:14:01.317 --> 00:14:02.277
That makes sense?

211
00:14:02.277 --> 00:14:03.346
&gt;&gt; Student: Yeah, that makes sense.

212
00:14:03.346 --> 00:14:07.535
Yeah, I just wasn't sure if
the signature for that method.

213
00:14:07.535 --> 00:14:10.869
It seems like Go is smart enough to
know that it doesn't need it anymore,

214
00:14:10.869 --> 00:14:13.123
since it's being parsed as middleware,
then.

215
00:14:13.123 --> 00:14:14.279
&gt;&gt; Maximiliano Firtman: Yeah, exactly.

216
00:14:14.279 --> 00:14:15.439
&gt;&gt; Student: Okay.

