WEBVTT

1
00:00:00.000 --> 00:00:01.150
&gt;&gt; Maximiliano Firtman: What's next?

2
00:00:01.150 --> 00:00:05.983
So, of course, you know that we
should have this account page,

3
00:00:05.983 --> 00:00:08.681
and then Favorites and Watchlist.

4
00:00:08.681 --> 00:00:11.275
But now we have another problem.

5
00:00:11.275 --> 00:00:14.765
So, account,
how do I know that I'm logged in?

6
00:00:14.765 --> 00:00:19.153
So I should see the account
page only if I'm logged in.

7
00:00:19.153 --> 00:00:19.888
So, first.

8
00:00:19.888 --> 00:00:23.780
How my router knows if I'm logged in.

9
00:00:25.859 --> 00:00:28.715
&gt;&gt; Maximiliano Firtman: It
doesn't know actually.

10
00:00:28.715 --> 00:00:34.058
And also,
how do we talk to the server later for

11
00:00:34.058 --> 00:00:40.503
things that are available
only to authenticated user?

12
00:00:40.503 --> 00:00:48.322
How does the server know that I have
authenticated you, five minutes ago?

13
00:00:48.322 --> 00:00:50.645
And I have permission to do that?

14
00:00:50.645 --> 00:00:53.303
So I mean the authentication
process works.

15
00:00:53.303 --> 00:00:54.969
So the service email, okay?

16
00:00:54.969 --> 00:00:58.510
But for that I need the username and
password, the email, the password.

17
00:00:58.510 --> 00:01:02.758
So do I save the email and the password
in a variable or in local storage, so

18
00:01:02.758 --> 00:01:06.868
then every time I talk to the server,
I have the username and password so

19
00:01:06.868 --> 00:01:08.535
the server can validate me.

20
00:01:08.535 --> 00:01:12.771
I mean, I can do that, but from a security
point of view, it makes no sense.

21
00:01:12.771 --> 00:01:17.811
Just store the password, client side,
anyone can see the password.

22
00:01:17.811 --> 00:01:20.064
It's not a good.

23
00:01:20.064 --> 00:01:21.862
So we need to find a solution.

24
00:01:21.862 --> 00:01:23.651
There are many solutions out there.

25
00:01:23.651 --> 00:01:28.515
A classic solution was to
create a session server side.

26
00:01:28.515 --> 00:01:29.697
What's a session?

27
00:01:29.697 --> 00:01:34.565
It's a concept server side that involves
a cookie.So, we send a cookie, but

28
00:01:34.565 --> 00:01:39.014
the cookies shouldn't have the password,
the cookies, some bytes.

29
00:01:39.014 --> 00:01:41.360
The browser is storing client side, and

30
00:01:41.360 --> 00:01:44.610
it's sending that to the server
on every HTTP request.

31
00:01:44.610 --> 00:01:46.217
But the cookie has problems.

32
00:01:46.217 --> 00:01:48.386
You know that they're a problem.

33
00:01:48.386 --> 00:01:52.781
Okay?
So another solution is called JWT,

34
00:01:52.781 --> 00:01:54.785
JSON Web Token.

35
00:01:54.785 --> 00:01:57.460
I'm not sure if you have heard about it.

36
00:01:57.460 --> 00:01:58.107
Do you know?

37
00:01:58.107 --> 00:01:59.029
Can you define?

38
00:01:59.029 --> 00:02:01.364
What's JSON Web Token?

39
00:02:01.364 --> 00:02:02.750
Anyone?

40
00:02:02.750 --> 00:02:04.464
JSON Web Token.

41
00:02:04.464 --> 00:02:08.024
&gt;&gt; Speaker 2: Temporal key that you
carry around with your requests?

42
00:02:09.343 --> 00:02:14.713
&gt;&gt; Maximiliano Firtman: So it's a key
suggested pronunciation that one as jot,

43
00:02:14.713 --> 00:02:16.661
whatever, or jot.

44
00:02:16.661 --> 00:02:20.923
I haven't used that pronunciation,
Creation, anyway.

45
00:02:20.923 --> 00:02:23.207
So it's a spec, okay?

46
00:02:23.207 --> 00:02:26.371
It's a standard that
actually is really standard.

47
00:02:26.371 --> 00:02:28.264
It has its own RFC.

48
00:02:28.264 --> 00:02:35.364
So it's really a standard that let us
save data, including private data.

49
00:02:35.364 --> 00:02:37.320
It can be the email of the user.

50
00:02:37.320 --> 00:02:38.282
You may want.

51
00:02:38.282 --> 00:02:38.862
You may.

52
00:02:38.862 --> 00:02:39.679
Save the password.

53
00:02:39.679 --> 00:02:45.156
You don't need to actually, but
you can save the password if you want or

54
00:02:45.156 --> 00:02:48.443
any data that you wanna
save client side and

55
00:02:48.443 --> 00:02:51.847
you don't need to do anything server side.

56
00:02:51.847 --> 00:02:57.853
That means I don't need to save a database
or creating memory a session, nothing.

57
00:02:57.853 --> 00:03:02.533
So it's a safe way To
store data in the browser,

58
00:03:02.533 --> 00:03:06.520
but only the server can access the data.

59
00:03:06.520 --> 00:03:10.247
It's like I will get I
will prepare some data.

60
00:03:10.247 --> 00:03:12.933
So I will take something,
it will take this.

61
00:03:12.933 --> 00:03:17.022
I will put some data inside and
somehow I encode that.

62
00:03:17.022 --> 00:03:19.448
I wrap that in a secure thing.

63
00:03:19.448 --> 00:03:20.777
Okay.

64
00:03:20.777 --> 00:03:25.246
Store this every time you want
to talk to me, send me this.

65
00:03:25.246 --> 00:03:30.260
And the only one that can unwrap this or
can decrypt this is me.

66
00:03:30.260 --> 00:03:33.614
Because I have I have a private
key on my server, and

67
00:03:33.614 --> 00:03:36.744
you can decrypt that only
with the private key.

68
00:03:36.744 --> 00:03:39.298
So that means that if anyone.

69
00:03:39.298 --> 00:03:45.930
Is reading the JSON web token client side,
it can't read the contents inside.

70
00:03:45.930 --> 00:03:51.901
So it's like a credential,
I have one here, like this.

71
00:03:51.901 --> 00:03:54.381
This is my hotel keycard.

72
00:03:54.381 --> 00:03:59.100
It's a keycard that I don't know what's
inside actually, this is a A contact list,

73
00:03:59.100 --> 00:04:03.100
so there is something written in there,
but I cannot read it, okay, and

74
00:04:03.100 --> 00:04:05.545
even if I read it, it's probably encrypt.

75
00:04:05.545 --> 00:04:08.211
I don't know if it's encrypted or
not, but maybe it may be encrypted.

76
00:04:08.211 --> 00:04:14.008
So I can do anything but someone
that had the authority gave me this,

77
00:04:14.008 --> 00:04:19.111
and now I have this, and
I can then present my credentials.

78
00:04:19.111 --> 00:04:23.106
Just by showing the car,
even if I can't open the car and

79
00:04:23.106 --> 00:04:28.461
see what's inside, I can use the car
to present my credentials to my room,

80
00:04:28.461 --> 00:04:31.523
also to the business center, to the pool.

81
00:04:31.523 --> 00:04:38.964
So, different places I can just show
the hotel car, and that's JSON Web Token.

82
00:04:38.964 --> 00:04:40.065
JSON Web Token is.

83
00:04:40.065 --> 00:04:40.947
Not matching.

84
00:04:40.947 --> 00:04:44.695
It also has some problems,
because what happens if

85
00:04:44.695 --> 00:04:49.325
someone is Hijacking My Computer and
stolen my JSON Web Token?

86
00:04:49.325 --> 00:04:54.402
Well, it's like someone there's
now still in my hotel car.

87
00:04:54.402 --> 00:05:01.395
If they know where the hotel is, and if
they know my room number, they can get in.

88
00:05:01.395 --> 00:05:05.342
okay.
The same happens with JSON web token.

89
00:05:05.342 --> 00:05:12.664
So that means that that's why
JSON Web Tokens also have expiration.

90
00:05:12.664 --> 00:05:15.489
And typically we tend
to do short expiration.

91
00:05:15.489 --> 00:05:16.766
It depends on the system.

92
00:05:16.766 --> 00:05:19.723
It can be minutes, 10 minutes.

93
00:05:19.723 --> 00:05:21.067
It can be hours.

94
00:05:21.067 --> 00:05:22.174
It can be days.

95
00:05:22.174 --> 00:05:23.336
It depends on the project.

96
00:05:23.336 --> 00:05:24.512
You decide.

97
00:05:24.512 --> 00:05:29.713
When you create the web token,
you set the expiration in the token.

98
00:05:29.713 --> 00:05:31.942
What happens when it's expired?

99
00:05:31.942 --> 00:05:34.275
Actually, this key has an expiration.

100
00:05:34.275 --> 00:05:35.403
Let me show you if you know that.

101
00:05:35.403 --> 00:05:38.708
But if I'm checking out
tomorrow from my hotel and I.

102
00:05:38.708 --> 00:05:39.828
Come back next week.

103
00:05:39.828 --> 00:05:43.705
It's not going to work on the same room,
because it has an expiration.

104
00:05:43.705 --> 00:05:45.044
So it's the same thing.

105
00:05:45.044 --> 00:05:45.932
Okay?

106
00:05:45.932 --> 00:05:50.977
So I have the authority to use this, but
only for a while, for a period of time,

107
00:05:50.977 --> 00:05:55.966
and when, when that happens, when that
expire, I need to request a new one.

108
00:05:55.966 --> 00:05:58.075
I need to request a new web token.

109
00:05:58.075 --> 00:05:58.996
Okay, that's.

110
00:05:58.996 --> 00:06:04.463
That's roughly quickly how
web tokens work, okay?

