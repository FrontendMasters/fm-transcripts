WEBVTT

1
00:00:00.000 --> 00:00:02.091
&gt;&gt; Maximiliano Firtman: Does
it make sense, this?

2
00:00:02.091 --> 00:00:07.563
When you have the if with two,
there are not two conditions,

3
00:00:07.563 --> 00:00:10.366
the condition is the last one.

4
00:00:11.749 --> 00:00:15.871
&gt;&gt; Speaker 2: They can be separated
with just colon, as many as you want?

5
00:00:15.871 --> 00:00:20.228
&gt;&gt; Maximiliano Firtman: As many as you
want, the last one is a Boolean condition.

6
00:00:20.228 --> 00:00:22.280
&gt;&gt; Speaker 2: So
in the case of the error right now,

7
00:00:22.280 --> 00:00:25.537
would the client just kind of
hang waiting for a response?

8
00:00:25.537 --> 00:00:27.287
Cuz I'm guessing it wouldn't send it-
&gt;&gt; Maximiliano Firtman: Yeah,

9
00:00:27.287 --> 00:00:32.362
we need to do something, so one of
the things we can do, let's do it now,

10
00:00:32.362 --> 00:00:36.622
is we can talk actually to HTTP and
say, hey, you know what?

11
00:00:36.622 --> 00:00:42.423
There was an error,
send great an HTTP error over that writer,

12
00:00:42.423 --> 00:00:48.229
we can pass the error, and
what's the code that we wanna pass?

13
00:00:48.229 --> 00:00:52.828
For example, do you know what, I mean,
if there is an error encoding the JSON?

14
00:00:52.828 --> 00:00:57.797
I'm not sure how many of you are aware
of all the HTTP server codes

15
00:00:57.797 --> 00:00:59.743
that we have available.

16
00:00:59.743 --> 00:01:02.910
This response status code.

17
00:01:04.646 --> 00:01:09.764
&gt;&gt; Maximiliano Firtman: When
everything is okay, it's 200,

18
00:01:09.764 --> 00:01:15.036
so 200 means, okay, so it means okay.

19
00:01:15.036 --> 00:01:19.656
Then we have different errors,
errors are typically on section four and

20
00:01:19.656 --> 00:01:23.075
section five, and
that's the prefix of the number.

21
00:01:23.075 --> 00:01:25.471
A client error or a server error.

22
00:01:25.471 --> 00:01:31.708
So if we have a JSON issue,
which group do you think fits best?

23
00:01:31.708 --> 00:01:33.217
Client or server?

24
00:01:33.217 --> 00:01:34.330
&gt;&gt; Speaker 2: Server.

25
00:01:34.330 --> 00:01:36.882
&gt;&gt; Maximiliano Firtman: Server,
because the client has nothing to do with

26
00:01:36.882 --> 00:01:37.621
that, okay?

27
00:01:37.621 --> 00:01:39.409
So it's one of the server errors.

28
00:01:39.409 --> 00:01:44.129
There are many possible errors,
such as, not implemented, the one,

29
00:01:44.129 --> 00:01:47.997
wherever you're asking,
we didn't do that yet, okay?

30
00:01:47.997 --> 00:01:52.967
So the 501, 500 internal server
error is that the server

31
00:01:52.967 --> 00:01:57.767
has encountered a situation it
doesn't know how to handle.

32
00:01:57.767 --> 00:01:59.203
Like, I don't know.

33
00:01:59.203 --> 00:02:01.095
This is like, I don't know.

34
00:02:01.095 --> 00:02:05.085
I don't know what's going on,
but gateway service unavailable,

35
00:02:05.085 --> 00:02:09.225
gave me time out, blah, blah,
blah, there are many, many errors.

36
00:02:09.225 --> 00:02:13.730
In this case, I think the one we
prefer is 500, it's like, actually,

37
00:02:13.730 --> 00:02:15.600
we don't know what happened.

38
00:02:15.600 --> 00:02:18.003
Yeah, it was a Shay something, but why?

39
00:02:18.003 --> 00:02:19.415
I don't know, yeah.

40
00:02:19.415 --> 00:02:25.101
&gt;&gt; Speaker 2: Why are we using
HTTP instead of the response

41
00:02:25.101 --> 00:02:29.257
writer to log the http.error?

42
00:02:29.257 --> 00:02:32.392
&gt;&gt; Maximiliano Firtman: So
http.error is not actually logging,

43
00:02:32.392 --> 00:02:38.131
it's actually creating a new error and
sending that error over the writer.

44
00:02:38.131 --> 00:02:41.877
So when you look at that,
it's feels weird, okay, but

45
00:02:41.877 --> 00:02:47.061
error is actually an utility function
from the HTTP package that has inside,

46
00:02:47.061 --> 00:02:50.511
it creates the header,
it sends the right header.

47
00:02:50.511 --> 00:02:54.591
It sends the content of the body,
so it has a message, and

48
00:02:54.591 --> 00:02:58.077
it's also logs that into
the operating system.

49
00:02:58.077 --> 00:03:01.803
So it's doing a couple of stuff,
we don't need to go call this,

50
00:03:01.803 --> 00:03:04.636
we can just write directly to the writer,
okay?

51
00:03:04.636 --> 00:03:08.459
And then we can write a message and
we can add the header for

52
00:03:08.459 --> 00:03:11.816
the status code by hand,
so we can do it manually.

53
00:03:11.816 --> 00:03:16.212
HTTP error is actually a function
that receives the writer and

54
00:03:16.212 --> 00:03:20.702
it's going to send the error to
that writer, so to the output.

55
00:03:20.702 --> 00:03:25.409
So, we can say, if I handle here,
or there are some

56
00:03:25.409 --> 00:03:31.008
constants created on the HTTP package for
all the statuses.

57
00:03:31.008 --> 00:03:35.566
So in this case,
it's a status internal server error.

58
00:03:35.566 --> 00:03:40.273
I'm keeping the to-do here
because I wanna use our own logo.

59
00:03:40.273 --> 00:03:43.386
Remember, we created one,
so we will get there.

60
00:03:43.386 --> 00:03:45.828
Let's do again, baby steps.

61
00:03:47.983 --> 00:03:50.156
&gt;&gt; Maximiliano Firtman: Do I
need to return something?

62
00:03:50.156 --> 00:03:54.405
Let me first try to close this.

63
00:03:54.405 --> 00:03:56.982
This is my function right now.

64
00:03:56.982 --> 00:04:00.791
Do I need to return something?

65
00:04:00.791 --> 00:04:05.938
Do I need to return the movies in GitHub
movies because it's called GitHub movies?

66
00:04:05.938 --> 00:04:09.537
&gt;&gt; Speaker 2: No, but you don't
return it just gonna hang in there.

67
00:04:09.537 --> 00:04:14.801
&gt;&gt; Maximiliano Firtman: Yeah,
but will it hang in there?

68
00:04:14.801 --> 00:04:17.309
So, hang in there means like
an infinite loop, something like that.

69
00:04:17.309 --> 00:04:19.192
&gt;&gt; Speaker 2: It's just gonna wait for
the response.

70
00:04:19.192 --> 00:04:20.580
It's not gonna return.

71
00:04:20.580 --> 00:04:22.034
&gt;&gt; Maximiliano Firtman: So actually,

72
00:04:22.034 --> 00:04:27.373
I don't have any synchronous
code there anywhere.

73
00:04:27.373 --> 00:04:32.487
So, I mean, I could do an infinite loop or
something like that,

74
00:04:32.487 --> 00:04:35.916
and that will keep their hanging up there.

75
00:04:35.916 --> 00:04:40.017
But actually, when it comes to the end
of the function, the function will end.

76
00:04:40.017 --> 00:04:45.242
So the question is, should I return
the movies, or something like that?

77
00:04:45.242 --> 00:04:50.850
Well, if you look at the signature,
this is a handler, and I don't have that,

78
00:04:50.850 --> 00:04:55.316
so I don't have any return type,
so I don't need your return.

79
00:04:55.316 --> 00:04:56.903
Where are the movies?

80
00:04:56.903 --> 00:05:00.881
So I'm sending the movies
through the writer.

81
00:05:00.881 --> 00:05:05.745
So actually, I mean, it's not clear when
you read the code the first time at least,

82
00:05:05.745 --> 00:05:08.706
that we're actually sending the movies,
where?

83
00:05:08.706 --> 00:05:10.095
Actually here.

84
00:05:11.246 --> 00:05:15.291
&gt;&gt; Maximiliano Firtman: So, we
are encoding the movies in your JSON and

85
00:05:15.291 --> 00:05:19.042
we are sending that to the response rider.

86
00:05:19.042 --> 00:05:22.687
So the response writer
is actually the output.

87
00:05:22.687 --> 00:05:24.785
Does it make sense?

88
00:05:24.785 --> 00:05:27.969
&gt;&gt; Speaker 2: So do you explicitly
return the writer then, or?

89
00:05:27.969 --> 00:05:28.641
&gt;&gt; Maximiliano Firtman: No.

90
00:05:28.641 --> 00:05:31.307
No, because I'm not creating a new writer.

91
00:05:31.307 --> 00:05:32.740
I'm not returning a writer.

92
00:05:32.740 --> 00:05:34.351
I'm receiving a writer.

93
00:05:34.351 --> 00:05:36.027
Who is sending the writer?

94
00:05:36.027 --> 00:05:37.575
The HTTP package.

95
00:05:37.575 --> 00:05:41.188
I'm the handler,
the HTTP package is saying, hey,

96
00:05:41.188 --> 00:05:44.174
here you have the brighter and
the request.

97
00:05:44.174 --> 00:05:48.728
The information you need is here in
the request, and when you have a response,

98
00:05:48.728 --> 00:05:50.735
use the writer, just right here.

99
00:05:50.735 --> 00:05:53.452
So I don't need to create it,
I need to return it.

100
00:05:53.452 --> 00:05:58.070
I just need to use it, and
I'm using it right now here.

101
00:05:58.070 --> 00:06:01.137
Actually, I'm mostly using it here.

102
00:06:01.137 --> 00:06:04.266
If there was an error, I'm using here.

103
00:06:04.266 --> 00:06:06.696
So that's how handlers work.

104
00:06:06.696 --> 00:06:10.484
It's giving me here
an error with my literal.

105
00:06:10.484 --> 00:06:14.544
I have a name, have the casting,

106
00:06:14.544 --> 00:06:19.624
think missing the trailing coma, okay?

107
00:06:20.785 --> 00:06:24.381
&gt;&gt; Maximiliano Firtman: And
it's not casting its first name, not name,

108
00:06:24.381 --> 00:06:27.198
that's a model, okay, there we go.

109
00:06:27.198 --> 00:06:30.052
And now I'm getting the same
error as you are saying here.

110
00:06:30.052 --> 00:06:30.877
You're saying,

111
00:06:30.877 --> 00:06:34.234
cannot use error variable interpret
type error as a string value, why?

112
00:06:34.234 --> 00:06:40.994
Because it needs the error message
that will be sent to the user,

113
00:06:40.994 --> 00:06:47.391
and this is the error type that
the JSON encoder is giving us.

114
00:06:47.391 --> 00:06:51.495
So here we can just use any message,
such as,

115
00:06:51.495 --> 00:06:57.003
in case you wanna send that,
to be honest, most of the time,

116
00:06:57.003 --> 00:07:03.492
to the user, you just wanna say,
internal server error, I'm sorry.

117
00:07:03.492 --> 00:07:05.897
Because if you say here, JSON problem,

118
00:07:05.897 --> 00:07:09.098
you're sending too much
information to the client.

119
00:07:09.098 --> 00:07:11.900
Maybe for your internal login,

120
00:07:11.900 --> 00:07:17.204
you want to send detail from the error,
but not for the user.

121
00:07:17.204 --> 00:07:21.428
This is what the user will see,
okay, makes sense?

122
00:07:25.322 --> 00:07:28.760
&gt;&gt; Maximiliano Firtman: Okay,
do you have any questions how that works?

123
00:07:28.760 --> 00:07:31.843
I know that we are not
seeing anything yet, but

124
00:07:31.843 --> 00:07:37.156
we promise you that then every piece will
fit together and it will finally work.

125
00:07:37.156 --> 00:07:40.088
We are just, again, doing baby steps.

126
00:07:40.088 --> 00:07:44.456
Then when we have another baby step that
looks pretty similar to the previous one,

127
00:07:44.456 --> 00:07:48.254
we will probably use more copy and
paste because it's just the same, so

128
00:07:48.254 --> 00:07:49.800
we can speed up the process.

129
00:07:49.800 --> 00:07:55.010
Again, this is dummy data,
I'm trying to serve dummy data

130
00:07:55.010 --> 00:07:59.926
to the client and
this is a movie handler, will it work?

131
00:07:59.926 --> 00:08:04.962
Actually created a handler, but
I didn't register the handler

132
00:08:04.962 --> 00:08:09.809
with a server, okay, so
I created the value with a function,

133
00:08:09.809 --> 00:08:13.928
but the server will never
know that I have it, okay?

134
00:08:13.928 --> 00:08:20.282
So in the main.go, here,
I may add another handler, okay?

135
00:08:20.282 --> 00:08:24.624
If not, it's not gonna work,
does it make sense?

136
00:08:24.624 --> 00:08:28.048
So,
&gt;&gt; Maximiliano Firtman: How do you

137
00:08:28.048 --> 00:08:28.724
work with that?

138
00:08:28.724 --> 00:08:34.715
So I need to add another http.Handle for
example,

139
00:08:34.715 --> 00:08:40.720
api/movies/top, that's
the path that I want.

140
00:08:40.720 --> 00:08:44.553
And then I need to pass a handler.

141
00:08:44.553 --> 00:08:47.767
The thing is that the handler is a value,
I'm not sure if you remember that.

142
00:08:47.767 --> 00:08:50.404
So I need to pass, actually,
what's the handler?

143
00:08:50.404 --> 00:08:54.581
I need to pass from movie handler,
get top movies.

144
00:08:54.581 --> 00:08:59.325
But this is a method, so
let me explain that if I remove this,

145
00:08:59.325 --> 00:09:05.572
now it's not a method, it's a function,
it's an exported function, okay?

146
00:09:05.572 --> 00:09:08.112
So, meaning that, I can go here and say,

147
00:09:08.112 --> 00:09:12.648
from MovieHandlers,
&gt;&gt; Maximiliano Firtman: Remember,

148
00:09:12.648 --> 00:09:14.901
we have a package here,
actually, handlers.

149
00:09:14.901 --> 00:09:21.602
So from handlers, I will take
GetTopMovies without parentheses.

150
00:09:21.602 --> 00:09:25.941
Be careful, because when you press Return
or Enter in your computer BS code,

151
00:09:25.941 --> 00:09:30.174
because it's a function, adds parentheses,
so executes the function.

152
00:09:30.174 --> 00:09:36.870
And now I wanna pass the function
as an argument, okay?

153
00:09:36.870 --> 00:09:40.612
And yeah, give me an error,
we can solve the error, but

154
00:09:40.612 --> 00:09:42.772
anyway, it's not what I want.

155
00:09:42.772 --> 00:09:47.093
So what I want probably is,
if we look at the error,

156
00:09:47.093 --> 00:09:52.130
it says, I cannot use that
because it has an invalid phase.

157
00:09:52.130 --> 00:09:56.784
So something is different in
the interface, but I don't wanna do that.

158
00:09:56.784 --> 00:10:01.035
What I wanna do is, I wanna use my
option because I created an option.

159
00:10:01.035 --> 00:10:05.567
I'm not sure if you remember that,
but here I created an object.

160
00:10:05.567 --> 00:10:10.684
And I actually want a method.

161
00:10:10.684 --> 00:10:14.322
So now I have a movie handler and
structure that has a method.

162
00:10:14.322 --> 00:10:18.371
So what I need,
I need to create an instance of that.

163
00:10:18.371 --> 00:10:24.112
So I need to create, for example,
the movie handler or handlers,

164
00:10:24.112 --> 00:10:29.352
however you wanna call this,
and how to create one of those.

165
00:10:29.352 --> 00:10:35.934
Remember, how do you create a new
instance of a structure in go?

166
00:10:35.934 --> 00:10:38.650
&gt;&gt; Speaker 2: You just
do the new something.

167
00:10:38.650 --> 00:10:39.832
&gt;&gt; Maximiliano Firtman: New?
&gt;&gt; Speaker 2: But I mean,

168
00:10:39.832 --> 00:10:42.116
it's not, we don't have it.

169
00:10:42.116 --> 00:10:43.655
&gt;&gt; Maximiliano Firtman: Not new,
like this.

170
00:10:43.655 --> 00:10:46.115
This is not JavaScript, no.

171
00:10:46.115 --> 00:10:51.006
So, I mean, one way, remember,
we have the structure, movie handler,

172
00:10:51.006 --> 00:10:53.890
that's the name, so we can do this, okay?

173
00:10:53.890 --> 00:10:58.227
So now, we can say movie handler,
get the movies, and

174
00:10:58.227 --> 00:11:01.730
now it's not complaining anymore, okay?

175
00:11:01.730 --> 00:11:06.918
So a movie handler, we need to be careful
that is coming from the package handler.

176
00:11:09.897 --> 00:11:11.741
&gt;&gt; Maximiliano Firtman: So,
what's the problem?

177
00:11:11.741 --> 00:11:17.756
I mean, it's not a problem, but
if you really want the constructor in Go,

178
00:11:17.756 --> 00:11:23.789
we need to create a factory function,
that's how that works in Go, okay?

179
00:11:23.789 --> 00:11:26.691
So if you want the new pattern,

180
00:11:26.691 --> 00:11:32.280
you need to create movie handlers,
a new factor function.

181
00:11:32.280 --> 00:11:33.659
Why are we doing this?

182
00:11:33.659 --> 00:11:39.139
Because movie handler, we have different
handlers, one for get top movies, another

183
00:11:39.139 --> 00:11:44.105
one for get your favorite movies, another
one to get the details of one movie.

184
00:11:44.105 --> 00:11:49.726
So we have several hundreds
just in one structure, okay,

185
00:11:49.726 --> 00:11:54.672
that's why we're doing this,
okay, just that.

186
00:11:54.672 --> 00:11:59.800
So let's move, again, baby steps.

187
00:11:59.800 --> 00:12:03.530
So we still have a problem there, there
is an error there, there is no working.

188
00:12:03.530 --> 00:12:07.769
So let's solve that and
then move forward one step.

189
00:12:07.769 --> 00:12:11.345
Well, the error is that,
remember that, we did that before,

190
00:12:11.345 --> 00:12:13.039
we have two type of handlers.

191
00:12:13.039 --> 00:12:15.267
It can be a value or a function.

192
00:12:15.267 --> 00:12:19.628
In this case,
gettopmovies is actually a function.

193
00:12:19.628 --> 00:12:24.626
So, actually we need to change
handle with handle func.

194
00:12:24.626 --> 00:12:28.376
So that's to solve that little problem.

195
00:12:28.376 --> 00:12:32.763
But then,
the next step is to finish the logo part,

196
00:12:32.763 --> 00:12:39.108
because if you remember, our movie
handler has at some point, a to-do.

197
00:12:39.108 --> 00:12:44.764
So let's try to see how
to solve the problem.

198
00:12:44.764 --> 00:12:48.894
I'm not sure if you remember
that I created a structure for

199
00:12:48.894 --> 00:12:50.756
the movie handler, why?

200
00:12:50.756 --> 00:12:56.619
Typically, we create structures
when we have some data to store.

201
00:12:56.619 --> 00:13:03.021
So, something that we can do
here is to store a logger.

202
00:13:03.021 --> 00:13:07.258
So remember, our logger, so
we can store a logger, so

203
00:13:07.258 --> 00:13:09.758
we can say that we have a logger.

204
00:13:09.758 --> 00:13:17.344
And remember, our logger is actually
here is this structure, the type logger.

205
00:13:17.344 --> 00:13:23.210
So we're going to receive
one logger like this,

206
00:13:23.210 --> 00:13:27.930
and also we need to remember that when we

207
00:13:27.930 --> 00:13:33.223
are doing this, if we don't use a pointer,

208
00:13:33.223 --> 00:13:37.821
we might have a problem at some point.

209
00:13:37.821 --> 00:13:42.759
In the future, maybe, because, for
example, when we are passing that logger

210
00:13:42.759 --> 00:13:46.312
as an argument,
it's creating a clone, a copy, okay?

211
00:13:46.312 --> 00:13:51.815
When we do that we will start, the idea
is that because we get top movies,

212
00:13:51.815 --> 00:13:57.878
it's actually a method of movie handler,
it can actually access that logger.

213
00:13:57.878 --> 00:14:01.855
We will solve the problem
the error in a second, but

214
00:14:01.855 --> 00:14:06.680
we will actually be able to do
that through this variable, h.

215
00:14:06.680 --> 00:14:14.445
So this is kind of the this that we
have on OOP based languages in Go, okay?

216
00:14:14.445 --> 00:14:17.455
Remember that when we are doing a method,

217
00:14:17.455 --> 00:14:23.398
the object is actually in this kind of a
special argument that we have here, okay?

218
00:14:23.398 --> 00:14:29.518
So, we will solve this problem in
a second, but that will be the next step,

219
00:14:29.518 --> 00:14:33.708
okay, to connect the logger
to our movie handler.

220
00:14:33.708 --> 00:14:38.706
But because we will do several steps, we
will not just add the movie handler, but

221
00:14:38.706 --> 00:14:40.926
also the database connector here.

222
00:14:40.926 --> 00:14:45.645
Because remember,
right now it's just a static, and

223
00:14:45.645 --> 00:14:49.552
a static list of movies
is not our final code.

224
00:14:49.552 --> 00:14:53.731
So we will have more data here,
so there is a to-do here.

225
00:14:53.731 --> 00:14:56.868
So we will fill this with more data.

