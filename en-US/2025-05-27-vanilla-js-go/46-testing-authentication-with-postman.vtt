WEBVTT

1
00:00:00.000 --> 00:00:05.388
&gt;&gt; Maximiliano Firtman: Remember that
every time we are saving, well, actually,

2
00:00:05.388 --> 00:00:10.254
we're not executing error,
because we added this.

3
00:00:10.254 --> 00:00:14.552
But it's not giving me an error,
it's saying Serving the files,

4
00:00:14.552 --> 00:00:17.326
which means that the compilation worked.

5
00:00:17.326 --> 00:00:20.975
And we don't know yet if this is working.

6
00:00:20.975 --> 00:00:27.620
Actually, to test this without doing the
client, it's not so simple, why is that?

7
00:00:27.620 --> 00:00:33.918
Because if you want to test this, this
API account, remember we have register.

8
00:00:33.918 --> 00:00:38.734
So if I try from here, it's like,
yeah, something is responding,

9
00:00:38.734 --> 00:00:41.316
it's saying Invalid request body.

10
00:00:41.316 --> 00:00:44.208
Because I'm not sending the body, right?

11
00:00:44.208 --> 00:00:46.781
How can I send the body from here?

12
00:00:46.781 --> 00:00:50.787
Actually, I cannot,
from the browser, I'm saying.

13
00:00:50.787 --> 00:00:55.580
I could open a console and
try to use a fetch, that's one option.

14
00:00:55.580 --> 00:01:00.795
So actually, I've got the 400 from the
server, which is pretty good, Bad Request.

15
00:01:00.795 --> 00:01:05.084
That means, I cannot answer you
because you made a bad request.

16
00:01:05.084 --> 00:01:07.806
Okay, that's the right
HTTP status code for this.

17
00:01:07.806 --> 00:01:12.516
So I could try to do a fetch to that URL

18
00:01:12.516 --> 00:01:16.602
from here, so this is the URL.

19
00:01:16.602 --> 00:01:21.159
But then you need to pass our second
argument with the body and the JSON and

20
00:01:21.159 --> 00:01:22.060
everything.

21
00:01:22.060 --> 00:01:27.235
It's complicated to do it here,
so that's why to test this,

22
00:01:27.235 --> 00:01:30.927
typically, we use tools for HTTP testing.

23
00:01:30.927 --> 00:01:34.099
There are plugins for
Google Chrome to do that.

24
00:01:34.099 --> 00:01:40.645
And there is one that is probably the most
used one for automation and testing.

25
00:01:40.645 --> 00:01:42.886
I'm not sure if you have heard about it,
Postman.

26
00:01:42.886 --> 00:01:45.887
So, I mean,
you don't need to use it for this,

27
00:01:45.887 --> 00:01:51.006
because we will create our client, but
we can open Postman, this is a free tool.

28
00:01:51.006 --> 00:01:56.980
Actually, there is a free tier,
okay, it's not completely free,

29
00:01:56.980 --> 00:02:02.239
but in this case, let me increase
the font size a little bit.

30
00:02:02.239 --> 00:02:04.999
I can, for example, create a new query.

31
00:02:04.999 --> 00:02:08.083
It says, well,
what do you want to do, GET, POST?

32
00:02:08.083 --> 00:02:12.605
Actually, we are not checking that,
so both will work, I can try a POST.

33
00:02:12.605 --> 00:02:17.969
And say, I wanna go localhost:8080/,

34
00:02:17.969 --> 00:02:23.754
and I wanna try api/account/register,
okay?

35
00:02:23.754 --> 00:02:28.591
If I hit Send, of course it will try that,
and it's giving me a bad request,

36
00:02:28.591 --> 00:02:31.857
which is okay,
because I'm not sending the data.

37
00:02:31.857 --> 00:02:33.072
Where the data goes?

38
00:02:33.072 --> 00:02:34.848
Well, actually, there is a body here.

39
00:02:34.848 --> 00:02:40.327
So I can go to the body and say, well,
I want to send some data, in which format?

40
00:02:40.327 --> 00:02:44.349
This tool will let you try this in
different format, and we have raw.

41
00:02:44.349 --> 00:02:49.370
Raw means I will just paste data here,
and in which format?

42
00:02:49.370 --> 00:02:52.155
Text, JavaScript, well,
it's gonna be JSON.

43
00:02:52.155 --> 00:02:59.029
So I can try and pass my name,
let's write value JSON,

44
00:02:59.029 --> 00:03:03.220
actually, my name is Test User.

45
00:03:03.220 --> 00:03:07.938
Then I have an email,
that is test@test.dev.

46
00:03:07.938 --> 00:03:16.374
And let's make a very secure password
like 1234567, okay, that's ready.

47
00:03:16.374 --> 00:03:18.430
And then I can try this, okay?

48
00:03:18.430 --> 00:03:21.213
So if I send this,
I can see what's going on.

49
00:03:21.213 --> 00:03:26.379
It took more time, and I got 200, green.

50
00:03:26.379 --> 00:03:29.710
And the answer from
the server was success: true,

51
00:03:29.710 --> 00:03:31.892
User registered successfully.

52
00:03:31.892 --> 00:03:37.613
So we can even go to our database here,
go to users,

53
00:03:37.613 --> 00:03:42.948
to the data, refresh,
and see if it's there.

54
00:03:42.948 --> 00:03:47.860
I'm there, with a hashed password.

55
00:03:47.860 --> 00:03:54.571
That's how 1234567 looks like when we hash
it with that particular function, okay?

56
00:03:54.571 --> 00:03:56.862
So that worked.

57
00:03:56.862 --> 00:04:00.179
We can also try authentication,
I think I already have one here,

58
00:04:00.179 --> 00:04:01.878
authentication, here, yeah.

59
00:04:01.878 --> 00:04:05.187
And the body, yeah, I'm using
the same email and password, great.

60
00:04:05.187 --> 00:04:08.736
So I can try to authenticate and
see if it works.

61
00:04:10.392 --> 00:04:11.654
&gt;&gt; Maximiliano Firtman: Authenticate,
yeah,

62
00:04:11.654 --> 00:04:15.194
I think I need to update the message,
maybe, so it says register.

63
00:04:15.194 --> 00:04:19.693
And if I change the password, it's false,

64
00:04:19.693 --> 00:04:24.690
it's failed because it's
the wrong password.

65
00:04:24.690 --> 00:04:29.763
So before creating your client,
that's how you can

66
00:04:29.763 --> 00:04:35.766
test your backend services when
it's not just getting JSON.

67
00:04:35.766 --> 00:04:38.596
Does that make sense, yeah?

68
00:04:38.596 --> 00:04:42.232
&gt;&gt; Speaker 2: How does Go identify
the method, whether it's GET or POST,

69
00:04:42.232 --> 00:04:45.331
because it doesn't look like we're-
&gt;&gt; Maximiliano Firtman: Right now,

70
00:04:45.331 --> 00:04:50.407
I think that the code that I have, I'm
not actually verifying that, but you can.

71
00:04:50.407 --> 00:04:52.494
I mean, from the header,
it's part of the header.

72
00:04:52.494 --> 00:04:55.985
So remember that when you have a handler,
you have the response writer and

73
00:04:55.985 --> 00:04:57.066
you have the request.

74
00:04:57.066 --> 00:04:59.041
The second argument is a request.

75
00:04:59.041 --> 00:05:03.458
Well, that request has
the method that has been used.

76
00:05:03.458 --> 00:05:07.318
So then you can check if the method
is actually the one that you want to

77
00:05:07.318 --> 00:05:10.387
accept or not, and
then respond with an error or not.

78
00:05:10.387 --> 00:05:15.000
So it's a manual thing,
but it goes by URL.

79
00:05:15.000 --> 00:05:20.184
So maybe you are thinking that there
are some frameworks out there where when

80
00:05:20.184 --> 00:05:25.293
you define your handle, you actually
say here, I GET or POST, okay?

81
00:05:25.293 --> 00:05:29.687
Well, no, that's kind of a library or
a framework sitting on top of the basics.

82
00:05:29.687 --> 00:05:33.066
The basics is just the URL,
and then internally,

83
00:05:33.066 --> 00:05:36.053
you see the headers, and check that thing.

84
00:05:36.053 --> 00:05:39.749
When you use frameworks like Gin,
Gin Web framework for

85
00:05:39.749 --> 00:05:44.711
Go, you have a function for POST,
a function for GET, a function for PUT.

86
00:05:44.711 --> 00:05:51.823
So then you can have different
handlers for each verb or HTTP method.

87
00:05:51.823 --> 00:05:56.904
But in this case, you have to do
it manually, inside one handler.

88
00:05:56.904 --> 00:06:01.730
And in case you wanna do things
differently on the same URL based on

89
00:06:01.730 --> 00:06:04.977
the method,
you can have other handlers and

90
00:06:04.977 --> 00:06:07.988
call other handlers from that main one.

91
00:06:07.988 --> 00:06:11.974
So you create a handler for the URL, and
then you have different handlers per

92
00:06:11.974 --> 00:06:14.661
method, and you call them,
but manually, okay?

93
00:06:14.661 --> 00:06:17.843
You need to do it manually.

