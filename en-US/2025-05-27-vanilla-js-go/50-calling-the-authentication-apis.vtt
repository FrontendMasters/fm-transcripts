WEBVTT

1
00:00:00.140 --> 00:00:03.586
So that's working,
now I need to connect this.

2
00:00:03.586 --> 00:00:08.969
Okay so first in APIs, I need to create

3
00:00:08.969 --> 00:00:14.875
calls to these new two endpoints, okay?

4
00:00:14.875 --> 00:00:22.037
So in this case, it's going to be
register, that receive something, okay?

5
00:00:22.037 --> 00:00:26.936
We can say I know it's async, because
I know it's gonna be asynchronously.

6
00:00:26.936 --> 00:00:32.253
So for register,
I'm going to receive name, email, and

7
00:00:32.253 --> 00:00:38.232
password, email and password,
and I will do something with it.

8
00:00:38.232 --> 00:00:41.401
login async that has only email,

9
00:00:41.401 --> 00:00:47.295
password as input arguments,
and then it will do something.

10
00:00:47.295 --> 00:00:52.116
So I'm not sure if you remember
that we have this API.fetch this

11
00:00:52.116 --> 00:00:57.027
kind of this utility function that
is converting that into JSON,

12
00:00:57.027 --> 00:01:00.178
doing some stuff, going in and out this.

13
00:01:00.178 --> 00:01:05.472
The problem we have is that we cannot
use that one because for a login and

14
00:01:05.472 --> 00:01:10.881
registration, we need to send data and
that fetch is not sending data.

15
00:01:10.881 --> 00:01:16.133
I mean, we could add a third
argument here for data and

16
00:01:16.133 --> 00:01:21.876
change that, but
also we can create a new one called send.

17
00:01:21.876 --> 00:01:28.252
That will do a fetch, but particularly
with sending data, okay, makes sense?

18
00:01:28.252 --> 00:01:32.151
That we will call from login, register,
and maybe for another one later.

19
00:01:32.151 --> 00:01:38.558
So it's another async function that
receives a serving name, maybe one use.

20
00:01:38.558 --> 00:01:43.807
It's difficult to actually mix query
string, arguments, and data and

21
00:01:43.807 --> 00:01:50.015
body at the same time, we can, I mean, we,
I mean, you can do that, it's up to you.

22
00:01:50.015 --> 00:01:54.617
But have you mind that we can just
call this data instead of arguments or

23
00:01:54.617 --> 00:01:56.259
arguments its up to you.

24
00:01:56.259 --> 00:01:59.965
So, and we're going to also do
something very similar to this.

25
00:01:59.965 --> 00:02:03.844
So we can start with
this as our placeholder.

26
00:02:03.844 --> 00:02:08.246
Maybe again,
I'm not going to mix query string here, so

27
00:02:08.246 --> 00:02:10.914
I will just have the serviceName.

28
00:02:10.914 --> 00:02:15.831
In case you will mix both technologies,
go ahead, keep them.

29
00:02:15.831 --> 00:02:19.594
And actually,
the fetch API has a second argument.

30
00:02:19.594 --> 00:02:25.306
That second argument is where you
can actually say, for example,

31
00:02:25.306 --> 00:02:31.134
that I wanna use the method POST and
that you wanna set some headers.

32
00:02:31.134 --> 00:02:34.143
For example, I'm gonna use JSON,

33
00:02:34.143 --> 00:02:39.773
if you're a member from Postman I
was selecting JSON as my format.

34
00:02:39.773 --> 00:02:43.374
Actually, Postman is doing that for
me, but it's adding a header.

35
00:02:43.374 --> 00:02:47.515
I'm not seeing it because they are hidden,
but they are adding,

36
00:02:47.515 --> 00:02:50.693
it's sending content
type application/json.

37
00:02:50.693 --> 00:02:55.343
When you pick JSON from that list,
it's actually sending to the server,

38
00:02:55.343 --> 00:02:59.106
hey server, I'm sending you
a body in JSON format, okay.

39
00:02:59.106 --> 00:03:01.761
So we should keep that.

40
00:03:01.761 --> 00:03:04.236
So we are a good HTTP citizen.

41
00:03:04.236 --> 00:03:05.778
What happens if we don't send that?

42
00:03:05.778 --> 00:03:09.853
It depends on your server implementation,
maybe nothing, but

43
00:03:09.853 --> 00:03:12.273
it's a good idea to always send that.

44
00:03:12.273 --> 00:03:15.870
So the header is Content-Type,

45
00:03:15.870 --> 00:03:21.142
then we say application/json
as the argument.

46
00:03:21.142 --> 00:03:25.319
And finally, we pass the body, and

47
00:03:25.319 --> 00:03:32.015
the body should be a string,
so I will stringify my data.

48
00:03:32.015 --> 00:03:35.802
So now on login,
I will just call that one, so

49
00:03:35.802 --> 00:03:41.003
I will say login or authenticate,
you can use any name there.

50
00:03:41.003 --> 00:03:47.512
I can return the await of
API.send to account and

51
00:03:47.512 --> 00:03:51.638
the name of my service that is,

52
00:03:51.638 --> 00:03:57.061
authenticate, okay, authenticate.

53
00:03:57.061 --> 00:04:03.014
And then I need to pass an object
with the email and the password.

54
00:04:03.014 --> 00:04:07.840
I'm getting those from here that
someone is going to send me, okay?

55
00:04:07.840 --> 00:04:11.025
And something similar
happens on registration.

56
00:04:11.025 --> 00:04:12.930
I will say register, and

57
00:04:12.930 --> 00:04:18.119
the only thing is that I need to add
the name to the arguments, okay?

58
00:04:18.119 --> 00:04:19.796
So now there are still one missing point.

59
00:04:19.796 --> 00:04:24.398
So from one side,
we have HTML that is calling app.login or

60
00:04:24.398 --> 00:04:27.721
app.register, and then we have the API.

61
00:04:27.721 --> 00:04:31.940
We are still missing the controller
of this operation that is

62
00:04:31.940 --> 00:04:35.670
actually in the app,
app.login, app.register.

63
00:04:35.670 --> 00:04:40.822
So I need to go here, and
we have all the search, close,

64
00:04:40.822 --> 00:04:46.743
error, I need to add these two
register that receives an event,

65
00:04:46.743 --> 00:04:53.127
if you remember, because it's from
the form submission and login.

66
00:04:53.127 --> 00:04:58.889
And the first thing that I know that
I need to do is event.preventDefault,

67
00:04:58.889 --> 00:05:03.379
because by default,
what happens if I click here, okay?

68
00:05:03.379 --> 00:05:05.828
Well, first it needs something there, so

69
00:05:05.828 --> 00:05:08.695
I need to type something
that's the validation.

70
00:05:08.695 --> 00:05:12.257
But if I click here,
it's reloading the page, okay?

71
00:05:12.257 --> 00:05:14.649
And I don't wanna reload the page.

72
00:05:14.649 --> 00:05:20.499
So I need to preventDefault on
both registration and login, okay?

73
00:05:20.499 --> 00:05:22.007
Make sense?

74
00:05:22.007 --> 00:05:25.619
Well, here are the parties
I need to get the data and

75
00:05:25.619 --> 00:05:28.482
maybe try to validate the data somehow.

76
00:05:28.482 --> 00:05:33.085
There are many ways to do that,
or validation, okay?

77
00:05:33.085 --> 00:05:37.210
But something I will do, for example,
I need to create the name and

78
00:05:37.210 --> 00:05:39.726
I will say document.getElementById.

79
00:05:39.726 --> 00:05:44.029
I'm not sure if you know
that you can do this gEBI.

80
00:05:44.029 --> 00:05:47.848
And so, just the parentheses, but

81
00:05:47.848 --> 00:05:52.060
they say.gEBI, and it works, okay?

82
00:05:52.060 --> 00:05:55.920
So, you can do that with CamelCase
on any language in VS Code,

83
00:05:55.920 --> 00:05:57.639
it's really pretty cool.

84
00:05:57.639 --> 00:06:00.352
So, a document.gEBI, okay?

85
00:06:00.352 --> 00:06:05.889
And then you specify the ID,
so we have the register,

86
00:06:05.889 --> 00:06:12.675
it was a register name, I think,
.value, so that's the name.

87
00:06:12.675 --> 00:06:17.533
And by the way, sometimes you feel when
you're doing vanilla JavaScript, and

88
00:06:17.533 --> 00:06:21.448
this is something that I spend more
time in the other course that I

89
00:06:21.448 --> 00:06:26.255
have Frontend Masters, this vanilla JS,
you might not need that framework.

90
00:06:26.255 --> 00:06:30.308
Where you say, I need to write
a lot of time documenting by Id.

91
00:06:30.308 --> 00:06:34.872
You can quickly get around that by
just creating something like this.

92
00:06:34.872 --> 00:06:37.899
Then you say, you know what,
document.getElementById.

93
00:06:37.899 --> 00:06:41.278
There is more complicated than this,
but that one will make it real quickly.

94
00:06:41.278 --> 00:06:44.541
So then instead of
document.getElementById,

95
00:06:44.541 --> 00:06:47.491
use the dollar sign, something like that.

96
00:06:47.491 --> 00:06:50.449
So you can work with JavaScript and

97
00:06:50.449 --> 00:06:55.450
make JavaScript be more or
closer to what you want, okay?

98
00:06:55.450 --> 00:06:57.440
It's a pretty dynamic language.

99
00:06:57.440 --> 00:07:02.445
So I have the name,
then I have the email and the password,

100
00:07:02.445 --> 00:07:07.464
it's a sitting in plain text
because we are in the client.

101
00:07:07.464 --> 00:07:13.917
So register-email, register-password,
and now I need to validate this, okay?

102
00:07:13.917 --> 00:07:17.440
So how can I make a really
quick validation system?

103
00:07:17.440 --> 00:07:20.973
I mean, but that will show whoever
messages and all the stuff.

104
00:07:20.973 --> 00:07:24.980
There are many ways to do that, but I
will do something really, really quickly.

105
00:07:24.980 --> 00:07:32.916
I'm going to create just an array of
errors as I start as an empty array,

106
00:07:32.916 --> 00:07:39.678
and then I start adding some
quick Boolean conditions here.

107
00:07:39.678 --> 00:07:45.322
So things like if the length
of the name is less than 4,

108
00:07:45.322 --> 00:07:49.862
I will push a new error
message here saying,

109
00:07:49.862 --> 00:07:55.772
enter your complete name,
okay, something like that.

110
00:07:55.772 --> 00:08:00.096
And then you can say,
okay, for the password,

111
00:08:00.096 --> 00:08:05.073
remember this is a client-side validation,
enter,

112
00:08:05.073 --> 00:08:10.606
say at least, enter a password
with at least 7 characters.

113
00:08:10.606 --> 00:08:15.340
And of course, you can use regular
expressions and llms to help you,

114
00:08:15.340 --> 00:08:19.186
we create the regular expression for
your validation.

115
00:08:19.186 --> 00:08:22.996
But remember, this is client side
validation, which means that you can

116
00:08:22.996 --> 00:08:26.197
always override and bypass this and
go directly to a server.

117
00:08:26.197 --> 00:08:31.566
So a bad actor cannot do that, so
don't rely only on client-side validation.

118
00:08:31.566 --> 00:08:37.073
So we see how to do on the server
to add more data validation there,

119
00:08:37.073 --> 00:08:39.993
okay, this is really important.

120
00:08:39.993 --> 00:08:41.424
So we have the password and

121
00:08:41.424 --> 00:08:45.794
the email we should check if it's email
you need a regular expression for that.

122
00:08:45.794 --> 00:08:49.535
So enter your complete email,
something like that, and we can add more.

123
00:08:49.535 --> 00:08:52.873
And also we need one for
the if the passwords don't match, so

124
00:08:52.873 --> 00:08:55.042
actually, I need the other password.

125
00:08:55.042 --> 00:09:01.913
So password, not sure if I called it
confirmation or validation, let me check.

126
00:09:01.913 --> 00:09:06.939
So it's here, it's closed,
so password confirmation.

127
00:09:09.622 --> 00:09:16.364
&gt;&gt; Maximiliano Firtman: So that's my Id,
so it's password confirmation.

128
00:09:16.364 --> 00:09:23.698
So if they're not the same,
password are not the same,

129
00:09:23.698 --> 00:09:30.565
I will push another error,
password don't match,

130
00:09:30.565 --> 00:09:34.481
okay, something like that.

131
00:09:34.481 --> 00:09:39.187
[COUGH] You can make it better, nicer, but
I'm using this because now I will check if

132
00:09:39.187 --> 00:09:42.365
I do have an error,
how do I know if I have this one error?

133
00:09:42.365 --> 00:09:47.022
I will check the array length,
so if it's 0, it's like,

134
00:09:47.022 --> 00:09:52.257
we're okay, we can do the work,
and if not, we can show an error.

135
00:09:52.257 --> 00:09:54.991
We already have a way to do that, okay?

136
00:09:54.991 --> 00:09:59.813
And for the error, I will do this,
I will take the array,

137
00:09:59.813 --> 00:10:03.040
and I will join the array with a space.

138
00:10:03.040 --> 00:10:07.069
Also, if you don't use dot at
the end of the sentences here,

139
00:10:07.069 --> 00:10:09.836
you can add the dot here, it's up to you.

140
00:10:09.836 --> 00:10:10.492
So join,

141
00:10:10.492 --> 00:10:15.988
we'll actually join all the array in one
large string with everything inside.

142
00:10:18.828 --> 00:10:21.852
&gt;&gt; Maximiliano Firtman: That's a quick
way to add some validation you can

143
00:10:21.852 --> 00:10:22.747
work on that.

144
00:10:22.747 --> 00:10:26.835
And if it's okay, well, we need to go and
get a response from the server.

145
00:10:26.835 --> 00:10:33.249
So I'm going to await for
the API.register that receives the name,

146
00:10:33.249 --> 00:10:36.795
the email, and the password, okay?

147
00:10:36.795 --> 00:10:41.475
And because it's await
I need to go back to

148
00:10:41.475 --> 00:10:46.304
our function, I need to add async, okay?

149
00:10:46.304 --> 00:10:51.172
And I will check if the response
it's a success that's how

150
00:10:51.172 --> 00:10:54.359
it looks like from this point of view.

151
00:10:54.359 --> 00:10:58.652
So if you go back to go to our handlers,
our account handler, so

152
00:10:58.652 --> 00:11:02.216
if you look at the data types
that we are responding.

153
00:11:04.547 --> 00:11:09.068
&gt;&gt; Maximiliano Firtman: We are responding
with success and a message, okay?

154
00:11:09.068 --> 00:11:12.732
So that's the property that
I'm reading now client-side.

155
00:11:12.732 --> 00:11:16.810
So I will say, if success then it
is a Boolean, what should you do?

156
00:11:16.810 --> 00:11:21.430
Well, for now, I can just go to my account

157
00:11:21.430 --> 00:11:25.659
home that doesn't exist yet, okay?

158
00:11:25.659 --> 00:11:29.775
You're logged in, you're in, and
if not, we can show an error,

159
00:11:29.775 --> 00:11:33.614
and we can even use the message
that is coming from the server,

160
00:11:36.074 --> 00:11:37.430
&gt;&gt; Maximiliano Firtman: Okay, like that.

