WEBVTT

1
00:00:00.013 --> 00:00:02.752
&gt;&gt; Maximiliano Firtman: Now it's
time to start our project, okay?

2
00:00:02.752 --> 00:00:08.069
Before getting into the architecture,
I will go back to my project in VS code,

3
00:00:08.069 --> 00:00:11.468
okay, this is what I got
from GitHub from the URL.

4
00:00:11.468 --> 00:00:16.071
It's completely empty, and
again, if you open the readme,

5
00:00:16.071 --> 00:00:20.242
you go to the top, and
you can see, step by step, okay?

6
00:00:20.242 --> 00:00:23.779
what they're going to be building and
writing, so

7
00:00:23.779 --> 00:00:26.669
we need to start by creating a go project.

8
00:00:26.669 --> 00:00:30.487
Actually, it's called a go module,
in go, we call this module.

9
00:00:30.487 --> 00:00:35.368
So the first step will be in this folder,
I will open a terminal, so

10
00:00:35.368 --> 00:00:38.951
terminal, new terminal,
or use the shortcut.

11
00:00:38.951 --> 00:00:44.423
And in the terminal we are going to
be creating a new module using Go.

12
00:00:44.423 --> 00:00:48.422
And for that, we use go mod init, and

13
00:00:48.422 --> 00:00:52.428
then we need the name of the project.

14
00:00:52.428 --> 00:00:58.455
In Go, we typically name the project
with kind of a URL system,

15
00:00:58.455 --> 00:01:02.225
even if it's not a valid existent URL.

16
00:01:02.225 --> 00:01:07.276
So for example here we can say
frontalmasters.com forward

17
00:01:07.276 --> 00:01:12.335
slash really neat or movies however,
you wanna call that.

18
00:01:12.335 --> 00:01:17.123
And if you wanna change that name later
it's actually pretty the only thing

19
00:01:17.123 --> 00:01:20.245
that is new now is that we
do have a go dot mod file.

20
00:01:20.245 --> 00:01:25.284
And that go dot mod file is actually
saying that's the name of the module,

21
00:01:25.284 --> 00:01:28.711
that's all, okay,
it's not really a big deal.

22
00:01:28.711 --> 00:01:31.772
Remember, if you wanna call it movies,
it's okay,

23
00:01:31.772 --> 00:01:36.137
it's up to you the name that you will
use here, okay, you change that name.

24
00:01:36.137 --> 00:01:38.304
The only important part is that later,

25
00:01:38.304 --> 00:01:42.844
when we are importing package sheets in
Go from one package from another package.

26
00:01:42.844 --> 00:01:48.058
We use that full URL, okay, so you can
change that later, but have in mind that

27
00:01:48.058 --> 00:01:53.359
you also will need to update all your
packages, all your import declarations.

28
00:01:53.359 --> 00:01:58.182
Well, the next step is to create
the main file that typically

29
00:01:58.182 --> 00:02:02.637
we call it main.go and, so
we create a new file, okay?

30
00:02:02.637 --> 00:02:07.298
And that map we find what we call main.go,

31
00:02:07.298 --> 00:02:11.578
and here we can start writing our code.

32
00:02:11.578 --> 00:02:16.830
And most of the time we have a well,
package main and

33
00:02:16.830 --> 00:02:21.594
a function, main, func main, that's all,

34
00:02:21.594 --> 00:02:26.112
that's we have our Go project the minimum,

35
00:02:26.112 --> 00:02:29.676
at least go project ready, okay?

36
00:02:29.676 --> 00:02:34.082
But just because we are here,
I already mentioned that we are going

37
00:02:34.082 --> 00:02:38.027
to be using some external dependencies,
some libraries.

38
00:02:38.027 --> 00:02:42.482
So let's start adding those libraries, at
least the two most important ones that we

39
00:02:42.482 --> 00:02:46.576
will use, we can do that later as well
every time, actually before using it.

40
00:02:46.576 --> 00:02:51.219
And also if you're using BS code, when you
try to use the library for the first time.

41
00:02:51.219 --> 00:02:55.253
And you didn't include the dependency
of the library, BS code will ask you,

42
00:02:55.253 --> 00:02:59.738
hey, do you wanna install it, and it will
do that for you, but let's do it manually.

43
00:02:59.738 --> 00:03:03.791
So again, the readme you have this,
snippet to copy and

44
00:03:03.791 --> 00:03:07.596
paste if you want, actually,
it's not a big deal.

45
00:03:07.596 --> 00:03:10.032
But this is the godotdem project,

46
00:03:10.032 --> 00:03:15.324
this is the one that will let us use
the dotdem files to store, for example,

47
00:03:15.324 --> 00:03:20.044
credentials and other information
that are secret information.

48
00:03:20.044 --> 00:03:24.728
And this one is actually the one that

49
00:03:24.728 --> 00:03:29.735
will let us use Postgres in Go, okay?

50
00:03:29.735 --> 00:03:36.031
So, I will copy this, and
I will paste this in the terminal,

51
00:03:36.031 --> 00:03:40.856
and this has just added
the two dependencies.

52
00:03:40.856 --> 00:03:48.544
You will see that when you go to the go
dot mold file that now we have require and

53
00:03:48.544 --> 00:03:54.206
we have two dependencies,
okay, for now that's all.

54
00:03:54.206 --> 00:03:57.541
If this is the first time you're
using these two dependencies,

55
00:03:57.541 --> 00:04:00.330
your computer is going to
download the files as well.

56
00:04:00.330 --> 00:04:05.286
If you have already used those
dependencies before another project,

57
00:04:05.286 --> 00:04:09.741
you won't see the download in
part as it happened with my case.

58
00:04:09.741 --> 00:04:11.600
I haven't seen any downloading,

59
00:04:11.600 --> 00:04:14.431
that's because I already
have them in my computer.

60
00:04:14.431 --> 00:04:18.769
Go is storing dependencies in
some kind of a global space

61
00:04:18.769 --> 00:04:21.736
in your user in the operating system.

62
00:04:21.736 --> 00:04:26.620
So it's not like Node modules with Node.js
that you have the dependencies in your

63
00:04:26.620 --> 00:04:27.269
project.

64
00:04:27.269 --> 00:04:32.515
So every project has its own dependencies,
here no Go is taking those

65
00:04:32.515 --> 00:04:37.502
from a global space in your user
profile in the operating system.

