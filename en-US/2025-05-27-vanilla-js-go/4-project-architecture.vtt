WEBVTT

1
00:00:00.000 --> 00:00:04.251
&gt;&gt; Maximiliano Firtman: Now we need to
move one step up, because we don't want

2
00:00:04.251 --> 00:00:09.076
just a static server,
we want something more complicated.

3
00:00:09.076 --> 00:00:13.138
So let's analyze
the architecture of our app.

4
00:00:13.138 --> 00:00:17.857
So we have already mentioned
a couple of things, but

5
00:00:17.857 --> 00:00:23.128
now we will get we will dig
deeper into each of these steps.

6
00:00:23.128 --> 00:00:28.033
So we have the user interface,
we're using HTML, CSS and images.

7
00:00:28.033 --> 00:00:34.193
We're going to use Flexbox to lay out
elements vertically or horizontally.

8
00:00:34.193 --> 00:00:38.810
We will also use template I'm not sure
if you have ever used template before,

9
00:00:38.810 --> 00:00:42.234
the template tag and
the dialog tag, that's for later.

10
00:00:42.234 --> 00:00:45.768
Then we have the front end
the front end is JavaScript base.

11
00:00:45.768 --> 00:00:49.601
We're going to be using events,
web components,

12
00:00:49.601 --> 00:00:54.429
local storage, a router, system,
routes and an API service.

13
00:00:54.429 --> 00:00:58.784
And I know that you still don't
understand how everything fits

14
00:00:58.784 --> 00:01:01.585
together we will get there later, yes.

15
00:01:01.585 --> 00:01:05.235
&gt;&gt; Speaker 2: Will you be including
any testing on the go side?

16
00:01:05.235 --> 00:01:09.373
&gt;&gt; Maximiliano Firtman: We will include
testing on the last part, mostly for

17
00:01:09.373 --> 00:01:13.980
the web server, yeah,
the transport layer will be HTTP,

18
00:01:13.980 --> 00:01:18.322
get them, post mainly, and
then JSON on the back end.

19
00:01:18.322 --> 00:01:21.689
That's the part that we
are building right now, it's go.

20
00:01:21.689 --> 00:01:26.853
We will have model repositories,
models, handlers, loggers and

21
00:01:26.853 --> 00:01:31.383
environmental variables, and
we will see what's the be,

22
00:01:31.383 --> 00:01:35.473
what's the responsibility
of each part in a second.

23
00:01:35.473 --> 00:01:38.912
And the database, we have just progress,

24
00:01:38.912 --> 00:01:43.315
progress equal for Foreign keys,
just SQL language.

25
00:01:43.315 --> 00:01:48.189
So this is the whole architecture and
we will repeat this architecture

26
00:01:48.189 --> 00:01:52.825
a couple of times while we are building
each part of the app, okay?

27
00:01:52.825 --> 00:01:58.340
So we have the user interface,
that's HTML, CSS, and images and

28
00:01:58.340 --> 00:02:03.972
YouTube URLs, the user interface
is connected with the front end.

29
00:02:03.972 --> 00:02:09.542
In JavaScript, the front end, we have
a router that will be responsible for

30
00:02:09.542 --> 00:02:14.766
rendering different routes, and
those routes will actually activate

31
00:02:14.766 --> 00:02:19.658
different web components,
like every page, like the home page.

32
00:02:19.658 --> 00:02:24.503
The details, movie, page,
each page we have a web component, and

33
00:02:24.503 --> 00:02:27.138
that web component, at some point,

34
00:02:27.138 --> 00:02:32.677
will actually call an API through an API
service that we have in the front end.

35
00:02:32.677 --> 00:02:36.619
That API service is
just a JavaScript file,

36
00:02:36.619 --> 00:02:44.198
will actually use HTTP to talk to the back
end, the back end, then we have a handler.

37
00:02:44.198 --> 00:02:47.470
There is a handler for file system, that's
the one that we have just developed.

38
00:02:47.470 --> 00:02:52.532
So we already here right now but
also we have handlers for APIs for

39
00:02:52.532 --> 00:02:57.618
example, once you talk to
a modern repository, what's that?

40
00:02:57.618 --> 00:03:01.970
For example, if I want the movie,
there will be a movie repository.

41
00:03:01.970 --> 00:03:05.762
The mobile repository will use TCP to
connect to a post read database that it's

42
00:03:05.762 --> 00:03:09.094
in the cloud, it's in a different server,
I don't know what it is,

43
00:03:09.094 --> 00:03:11.402
that will get the information
from the tables.

44
00:03:11.402 --> 00:03:15.114
We'll populate a model, what's a model,

45
00:03:15.114 --> 00:03:19.926
just a value of type movie, and
it will return that back to

46
00:03:19.926 --> 00:03:25.262
the API service that will actually
update the user interface.

47
00:03:25.262 --> 00:03:29.055
Okay, I know it feels complicated, but

48
00:03:29.055 --> 00:03:35.429
when we actually code every step
one by one, it makes sense, okay?

49
00:03:35.429 --> 00:03:42.615
So just to follow the flow with another
example, let's say we want to the, URL.

50
00:03:42.615 --> 00:03:45.059
So we type, really neat.com so

51
00:03:45.059 --> 00:03:49.946
the first action that we have here
is actually that the browser,

52
00:03:49.946 --> 00:03:54.305
so the user interface is
getting the root folder, okay?

53
00:03:54.305 --> 00:03:59.873
So over HTTP, it goes to the back end,
and the back end realize,

54
00:03:59.873 --> 00:04:05.537
this is for a static so I will just
serve the file as we did with the HTML,

55
00:04:05.537 --> 00:04:07.758
okay, so that's simple.

56
00:04:07.758 --> 00:04:12.592
So then it that it takes the index HTML
from the file system, from the Public

57
00:04:12.592 --> 00:04:17.911
folder, and sends it back to the browser,
and the browser is rendering the HTML.

58
00:04:17.911 --> 00:04:22.840
We don't have this one yet, but
we will at one point, and but

59
00:04:22.840 --> 00:04:28.848
let's say now the user goes, and
clicks on Deadpool clicks in one movie.

60
00:04:28.848 --> 00:04:33.113
Okay, so
what's the flow in our architecture?

61
00:04:33.113 --> 00:04:39.525
Actually, what will happen is that click
will kinda change the URL client side,

62
00:04:39.525 --> 00:04:43.673
and it will go to, for
example, forward/movies,

63
00:04:43.673 --> 00:04:48.035
forward/ the ID of the movie
let's say it's 234.

64
00:04:48.035 --> 00:04:53.684
And that goes directly to the router,
what's a router?

65
00:04:53.684 --> 00:04:54.901
Is that something from the browser?

66
00:04:54.901 --> 00:04:57.614
No, it's something that we will create.

67
00:04:57.614 --> 00:05:02.675
It's a service, it's just a class,
an object that we will have

68
00:05:02.675 --> 00:05:09.051
JavaScript side that we will call from
scratch that will actually read that URL,

69
00:05:09.051 --> 00:05:13.106
change and say, okay,
I need to see what to do now.

70
00:05:13.106 --> 00:05:17.627
Okay, so it will actually
check in the in the routes,

71
00:05:17.627 --> 00:05:21.946
and the routes will tell them,
hey, for that URL,

72
00:05:21.946 --> 00:05:26.775
you need to create the web
component movie details page.

73
00:05:26.775 --> 00:05:32.735
So it will create that component it
will create a new instance of it.

74
00:05:32.735 --> 00:05:35.612
First, we will code everything,

75
00:05:35.612 --> 00:05:40.485
and that web component will
need the data from that movie.

76
00:05:40.485 --> 00:05:47.065
So it will ask an API to a server,
hey, I need the details of that movie,

77
00:05:47.065 --> 00:05:52.691
so it makes another get, and
that goes to the movie handler.

78
00:05:52.691 --> 00:05:54.167
Again, what's a handler?

79
00:05:54.167 --> 00:06:00.384
It's a value in go that handles one
particular route, one particular URL.

80
00:06:00.384 --> 00:06:04.940
So we will have a movie handler,
they will say, that's mine.

81
00:06:04.940 --> 00:06:08.531
It's asking me for
the details of a movie, I will do that.

82
00:06:08.531 --> 00:06:13.542
So that movie handler will actually
call the model repository,

83
00:06:13.542 --> 00:06:17.272
for example, get movie,
hey, I need a movie.

84
00:06:17.272 --> 00:06:22.316
So I know that I'm handling the URL of
a movie, now I need the data from a movie.

85
00:06:22.316 --> 00:06:26.868
Getmovie is the one that
makes the SELECT or

86
00:06:26.868 --> 00:06:30.038
the query from the database.

87
00:06:30.038 --> 00:06:34.914
It's downloading the data and
it's populating the model, so

88
00:06:34.914 --> 00:06:40.343
it's creating a movie with all its
properties coming from the table.

89
00:06:40.343 --> 00:06:45.064
We will close this, and then we will
come back to the diagram to see that

90
00:06:45.064 --> 00:06:48.038
this is the flow that
we are actually using.

91
00:06:48.038 --> 00:06:51.869
So when we have the movie at the back end,

92
00:06:51.869 --> 00:06:56.154
we actually need to
convert that into JSON and

93
00:06:56.154 --> 00:07:01.365
respond with that JSON so
it goes back to the front end.

94
00:07:01.365 --> 00:07:07.611
And then the front end will, for
example, design the HTML with that data,

95
00:07:07.611 --> 00:07:12.567
with, for example,
an article HTML element and finally,

96
00:07:12.567 --> 00:07:16.453
we will see in action
the details of the movie.

97
00:07:16.453 --> 00:07:20.025
Okay, so that's kinda the architecture
that we will be building for

98
00:07:20.025 --> 00:07:21.450
a full stack application.

99
00:07:21.450 --> 00:07:27.870
We can create a simpler solution
with less steps, yes, it's possible.

100
00:07:27.870 --> 00:07:32.463
But with this architecture,
we have different layers of abstraction.

101
00:07:32.463 --> 00:07:38.567
So it's easy in the future to update
the app, to create new features for

102
00:07:38.567 --> 00:07:42.737
this app,
because if we wanna create a new Page,

103
00:07:42.737 --> 00:07:47.445
we create a new route, and
the whole system will work.

104
00:07:47.445 --> 00:07:51.218
Okay, because if not, we can create
just everything in one go file,

105
00:07:51.218 --> 00:07:54.094
everything in one JS file and
everything will work.

106
00:07:54.094 --> 00:07:58.580
But it's going to be too tied together
to this particular problem, and

107
00:07:58.580 --> 00:08:02.343
it's gonna be difficult to scale and
maintain the future.

108
00:08:02.343 --> 00:08:06.522
So, that's why we
are creating this diagram, so

109
00:08:06.522 --> 00:08:11.903
we are separating concerns both
in the client and in the server.

110
00:08:11.903 --> 00:08:17.084
Again, this is an overview I'm not
expecting you to now understand everything

111
00:08:17.084 --> 00:08:21.896
that we see there, but later,
we will be building each part separately.

112
00:08:21.896 --> 00:08:24.321
That's a full stack architecture,

113
00:08:24.321 --> 00:08:27.690
one possible full stack architecture for
our app.

114
00:08:27.690 --> 00:08:30.242
We have already started with the back end.

115
00:08:30.242 --> 00:08:35.051
We've seen that we
are using Go 1.20,1.24 but

116
00:08:35.051 --> 00:08:41.902
one of the problems that we have is that
every time we make a change on the server,

117
00:08:41.902 --> 00:08:47.245
we have to restart the server,
and that's really annoying.

118
00:08:47.245 --> 00:08:49.916
So we will be writing a lot of Go files.

119
00:08:49.916 --> 00:08:53.959
Every time we add new file,
every time we make a change,

120
00:08:53.959 --> 00:08:57.401
we need to use Ctrl+C and
run the server again,

121
00:08:57.401 --> 00:09:02.156
this is a normal problem in Go,
also in other frameworks as well.

122
00:09:02.156 --> 00:09:09.545
So that's why we are going to use a
community based tool known as AR that will

123
00:09:09.545 --> 00:09:15.779
we automatically restart the server
when we change the files.

124
00:09:15.779 --> 00:09:21.721
This is similar to nodemon on the node
side, so it's monitoring the file system.

125
00:09:21.721 --> 00:09:27.090
And if the file system changes, it stops
the process and run it again, okay?

126
00:09:27.090 --> 00:09:32.853
So in that case, everything will be easier
for us, so then we are just code and

127
00:09:32.853 --> 00:09:37.730
go, we save a file, and
the server automatically restarts, and

128
00:09:37.730 --> 00:09:40.407
it will take those changes, okay?

129
00:09:40.407 --> 00:09:41.123
Makes sense?

130
00:09:41.123 --> 00:09:46.167
We will see how to do that in second,
but you will need to go on,

131
00:09:46.167 --> 00:09:51.516
install air, it depends if you're
on Windows, Linux, or Mac.

132
00:09:51.516 --> 00:09:56.772
The way to install it differs but
one quick way to do that

133
00:09:56.772 --> 00:10:03.416
is installing it through directly go
I will show you that in a minute.

134
00:10:03.416 --> 00:10:07.631
And we already mentioned
that we will be using go.m,

135
00:10:07.631 --> 00:10:12.983
p sheet is the one for Postgres SQL,
okay, and that's all, okay.

136
00:10:12.983 --> 00:10:16.569
Let's go back here to the backend, yeah.

137
00:10:16.569 --> 00:10:21.263
&gt;&gt; Speaker 2: Will you be rendering
the web pages server side for

138
00:10:21.263 --> 00:10:24.743
SEO or is it gonna be all client side?

139
00:10:24.743 --> 00:10:29.312
&gt;&gt; Maximiliano Firtman: In this course,
we are only doing single page application.

140
00:10:29.312 --> 00:10:34.449
There is another course, an intermediate
course, that takes this particular

141
00:10:34.449 --> 00:10:38.895
project, and it's also making
server side rendering as a pattern,

142
00:10:38.895 --> 00:10:42.820
for example, to increase SEO
search engine optimization.

143
00:10:42.820 --> 00:10:47.332
So if you wanna see how to do that or
how to mix both client and

144
00:10:47.332 --> 00:10:51.033
server side,
check the intermediate course.

