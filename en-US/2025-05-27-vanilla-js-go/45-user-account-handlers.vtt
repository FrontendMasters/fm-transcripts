WEBVTT

1
00:00:00.078 --> 00:00:06.331
So apart from repositories, remember
repositories are talking SQL and models.

2
00:00:06.331 --> 00:00:11.222
Now we need to add, going back to our
structure, the architecture we are here we

3
00:00:11.222 --> 00:00:15.901
have the model and the model repository,
and of course, we have the table.

4
00:00:15.901 --> 00:00:19.066
Now we need the handlers.

5
00:00:19.066 --> 00:00:23.642
So the handlers are the one
that are talking HTTP, okay?

6
00:00:23.642 --> 00:00:30.381
So they can receive data from the client,
they can talk to the repository and

7
00:00:30.381 --> 00:00:34.396
send the data back,
those are the handlers.

8
00:00:34.396 --> 00:00:40.614
So for that, they are large,
not as large as the repository,

9
00:00:40.614 --> 00:00:43.971
but they have some things there.

10
00:00:43.971 --> 00:00:49.255
So of course, I already have
the handlers as well that g2 so

11
00:00:49.255 --> 00:00:52.438
we need to create account handler.

12
00:00:52.438 --> 00:00:57.709
So right now we do have in the handlers,
folder, movie handlers.

13
00:00:57.709 --> 00:01:03.294
So we need now to create account handlers,
dot go.

14
00:01:03.294 --> 00:01:07.145
So here we have this, they're not so

15
00:01:07.145 --> 00:01:11.507
big, but it's still big enough, okay.

16
00:01:11.507 --> 00:01:15.184
So let me move them here, okay,

17
00:01:15.184 --> 00:01:19.142
no errors, which is pretty good.

18
00:01:19.142 --> 00:01:24.787
So something that I started doing,
typically, I'm creating a structure for

19
00:01:24.787 --> 00:01:29.403
the request, the data that I'm
receiving from the client, and

20
00:01:29.403 --> 00:01:32.072
also for the data I'm sending back.

21
00:01:32.072 --> 00:01:37.333
Okay, because that's then we can easily
Marshal and UN Marshal those into JSON.

22
00:01:37.333 --> 00:01:39.112
By the way, Marshall and

23
00:01:39.112 --> 00:01:44.378
non marshaling has to do with JSON
conversion to and from that structure.

24
00:01:44.378 --> 00:01:48.250
So, for example, for
authentication, so logging,

25
00:01:48.250 --> 00:01:53.063
we have the email and the password
that we are getting from the user.

26
00:01:53.063 --> 00:01:58.043
For registration, we have name,
email and password, and

27
00:01:58.043 --> 00:02:04.231
the response is actually success,
the bool and add an optional message.

28
00:02:04.231 --> 00:02:07.196
That's right now what we
are responding later,

29
00:02:07.196 --> 00:02:12.254
maybe we will add something else, but for
now, that will be good enough, and we use

30
00:02:12.254 --> 00:02:17.192
also this idea of creating a structure
that will have the storage and the logger.

31
00:02:17.192 --> 00:02:22.957
The storage is the previous data
repository that we created.

32
00:02:22.957 --> 00:02:25.485
We have the same UTD function
that we used before.

33
00:02:25.485 --> 00:02:29.433
Actually, we can even reuse the same one
that we have from the other handlers.

34
00:02:29.433 --> 00:02:34.417
This is the one that is writing
the JSON response with the header and

35
00:02:34.417 --> 00:02:36.555
everything that is needed.

36
00:02:36.555 --> 00:02:42.104
This is handling errors, so
if we have any errors that it's coming

37
00:02:42.104 --> 00:02:47.867
back from the data repository and
doing things differently, okay?

38
00:02:47.867 --> 00:02:52.902
So, for example,
if we have an error on authentication

39
00:02:52.902 --> 00:02:56.759
validation on the user already exists, or

40
00:02:56.759 --> 00:03:02.775
registration validation, so
this is we couldn't register you.

41
00:03:02.775 --> 00:03:04.044
Let me do this.

42
00:03:04.044 --> 00:03:06.291
So, we could register you,

43
00:03:06.291 --> 00:03:10.891
you already exist in the database,
so I can register you.

44
00:03:10.891 --> 00:03:13.538
Or if there is any login problem,

45
00:03:13.538 --> 00:03:18.464
I'm just responding to the client
with status on authorize.

46
00:03:18.464 --> 00:03:23.505
That's a probably well known 401.

47
00:03:23.505 --> 00:03:27.014
So when you are trying to access
something on the web, and

48
00:03:27.014 --> 00:03:31.490
you see a 401 that means you don't
have access to that unauthorized.

49
00:03:31.490 --> 00:03:34.746
So we couldn't do that, okay.

50
00:03:34.746 --> 00:03:39.860
That's one option,
there are other developers that

51
00:03:39.860 --> 00:03:46.802
are just always returning 200, and
then they have an internal code.

52
00:03:46.802 --> 00:03:50.050
But by default, I mean,
if it's not one of the well known errors,

53
00:03:50.050 --> 00:03:52.263
I'm just sending an internal server error.

54
00:03:52.263 --> 00:03:57.458
I mean, if the database is down,
if the query couldn't be executed,

55
00:03:57.458 --> 00:04:01.785
whatever happens that is not
one of the well known errors.

56
00:04:01.785 --> 00:04:07.905
I will just say internal error,
okay, and I'm sending 500.

57
00:04:07.905 --> 00:04:11.871
That is, I don't know what happened,
so okay.

58
00:04:11.871 --> 00:04:18.290
Then we have the handlers one by one for
registration.

59
00:04:18.290 --> 00:04:23.632
The only thing that the handlers need
to do is they need to decode the body.

60
00:04:23.632 --> 00:04:28.648
So we are going to send from the client,
that we haven't done this so

61
00:04:28.648 --> 00:04:33.934
far, we need to send from the client
data in the body in the form of json.

62
00:04:33.934 --> 00:04:38.202
And then in the backend we
need to receive that json,

63
00:04:38.202 --> 00:04:42.082
decode the json into our option,
in this case,

64
00:04:42.082 --> 00:04:46.837
is the register request that
actually is this structure.

65
00:04:46.837 --> 00:04:51.045
So the JSON should have name,
email, password, and

66
00:04:51.045 --> 00:04:55.349
this is going to populate
an instance of this value, or

67
00:04:55.349 --> 00:05:02.385
a value of this structure with name, email
and password, with capital letters, okay.

68
00:05:02.385 --> 00:05:04.464
That's make sense?

69
00:05:04.464 --> 00:05:08.464
So we populate this we
were here on register, and

70
00:05:08.464 --> 00:05:12.278
then we call our storage and
see what happens.

71
00:05:12.278 --> 00:05:18.069
And based on if there is an error or
not, we are just sending the response

72
00:05:18.069 --> 00:05:24.746
back to the writer that is actually their
HTTP response that goes back to the user.

73
00:05:24.746 --> 00:05:27.151
Okay, does it make sense?

74
00:05:27.151 --> 00:05:32.937
Login is something similar actually,
we are getting the data,

75
00:05:32.937 --> 00:05:38.508
also working with the body, and
sending that to our storage or

76
00:05:38.508 --> 00:05:42.599
the entity, okay, and that's all we have.

77
00:05:42.599 --> 00:05:47.117
So those are the hamsters, any question?

78
00:05:47.117 --> 00:05:52.245
On the process or
everything that needs to be done here.

79
00:05:52.245 --> 00:05:57.362
It's not working yet because we need
to register these hundreds server side.

80
00:05:57.362 --> 00:06:02.087
And of course we need to then call
them from the client, okay, but, yeah,

81
00:06:02.087 --> 00:06:03.594
let's go step by step.

82
00:06:03.594 --> 00:06:09.564
So now, we need to go to main.go,
&gt;&gt; Maximiliano Firtman: Main.go,

83
00:06:09.564 --> 00:06:14.944
and at some point,
we were creating the movie repository,

84
00:06:14.944 --> 00:06:21.309
so we need to do something similar for
the account repository, okay?

85
00:06:21.309 --> 00:06:29.491
So we need to initialize
the account repository for users.

86
00:06:29.491 --> 00:06:33.528
So we are going to create
another variable, account repo,

87
00:06:33.528 --> 00:06:37.093
with the error we call data
new account repository.

88
00:06:37.093 --> 00:06:41.461
It needs a database and a log instance,
it's similar to the previous one.

89
00:06:41.461 --> 00:06:45.369
And if we do have an error,

90
00:06:45.369 --> 00:06:49.988
we will do fatal, low, oops,

91
00:06:49.988 --> 00:06:54.802
that fatal with format failed.

92
00:06:54.802 --> 00:06:59.416
Actually, we're not sending any value,
so any format failed to initialize.

93
00:06:59.416 --> 00:07:02.380
This is the account rep repository, and

94
00:07:02.380 --> 00:07:07.363
this is the movie repository,
I know I have two parentheses there.

95
00:07:07.363 --> 00:07:11.610
Now it's completely because I'm
not using it, which is okay.

96
00:07:11.610 --> 00:07:18.679
Because now I have the movie handler,
I need to create the account handler and

97
00:07:18.679 --> 00:07:23.479
say it's gonna be
handlers.new account handler.

98
00:07:23.479 --> 00:07:30.140
And I'm going to patch the repo and
the log in, okay, like that.

99
00:07:30.140 --> 00:07:34.762
So I'm now creating instances
of everything I have done.

100
00:07:34.762 --> 00:07:39.875
So we have the data repository,
we have the handlers,

101
00:07:39.875 --> 00:07:43.329
and then I need to register the URLs.

102
00:07:43.329 --> 00:07:47.163
Dot load, so handle func, and

103
00:07:47.163 --> 00:07:52.029
we will have API account register, and

104
00:07:52.029 --> 00:07:56.305
that goes to the account handler,

105
00:07:56.305 --> 00:08:01.623
dot register, I wanna call that handler.

106
00:08:01.623 --> 00:08:05.841
Handlefunk API account,
it can be login, or

107
00:08:05.841 --> 00:08:11.058
it can be authentication or
authenticate or whatever,

108
00:08:11.058 --> 00:08:15.615
just try to keep consistent with this,
like so.

