WEBVTT

1
00:00:00.047 --> 00:00:02.837
&gt;&gt; Maximiliano Firtman: Well,
let's do that YouTube and so

2
00:00:02.837 --> 00:00:06.373
we can actually see
the working in this case.

3
00:00:06.373 --> 00:00:11.538
This is gonna be pretty simple
in terms of the web component,

4
00:00:11.538 --> 00:00:16.009
so I don't think we need to
create a template for it.

5
00:00:16.009 --> 00:00:19.869
We can create a template, so
we need a web component, so I need.

6
00:00:19.869 --> 00:00:21.723
Create a new web component.

7
00:00:21.723 --> 00:00:25.922
We can call this YouTube Embed.js, and

8
00:00:25.922 --> 00:00:30.862
we know the deal we're
going to export the class

9
00:00:30.862 --> 00:00:35.680
YouTube Embed extends from HTML element,
and

10
00:00:35.680 --> 00:00:40.145
we need to define it, so custom elements.

11
00:00:40.145 --> 00:00:45.253
Define, here we create the tag

12
00:00:45.253 --> 00:00:49.384
name and YouTube Embed.

13
00:00:49.384 --> 00:00:57.040
Remember I mentioned a couple
of times that we can listen for

14
00:00:57.040 --> 00:01:02.716
attributes So when the attribute changes.

15
00:01:02.716 --> 00:01:07.797
In this case, we are injecting
a YouTube embed without the URL.

16
00:01:07.797 --> 00:01:13.765
Actually, I want the URL to appear
here with the data property, okay,

17
00:01:13.765 --> 00:01:19.043
but initially we inject this into a DOM,
the template, okay.

18
00:01:19.043 --> 00:01:22.855
Remember, we, Create a clone of the
template and we inject it into the DOM.

19
00:01:22.855 --> 00:01:24.292
Do we have any data inside?

20
00:01:24.292 --> 00:01:25.038
No.

21
00:01:25.038 --> 00:01:26.689
So do we have any data URL?

22
00:01:26.689 --> 00:01:27.408
No.

23
00:01:27.408 --> 00:01:29.106
So on connected callback.

24
00:01:29.106 --> 00:01:30.847
We don't have the URL.

25
00:01:30.847 --> 00:01:34.435
It's still an empty URL, so
I don't need to render anything yet.

26
00:01:34.435 --> 00:01:38.725
I need to wait for
someone to set that data URL.

27
00:01:38.725 --> 00:01:40.002
Does it make sense?

28
00:01:40.002 --> 00:01:42.031
Do you understand why?

29
00:01:42.031 --> 00:01:44.803
&gt;&gt; Speaker 2: It's just a placeholder.

30
00:01:44.803 --> 00:01:46.949
&gt;&gt; Maximiliano Firtman: So,
right now I put it here so

31
00:01:46.949 --> 00:01:50.617
we understand the idea I
don't even need it, but

32
00:01:50.617 --> 00:01:55.360
what I'm saying is that talking
about the movie details page,

33
00:01:55.360 --> 00:02:01.557
I'm injecting the whole movie details
template here in this ,line, line 16.

34
00:02:01.557 --> 00:02:05.606
Do we have the inside the HTML, the URL?

35
00:02:05.606 --> 00:02:06.226
Not yet.

36
00:02:06.226 --> 00:02:11.084
I could,
like replace it before I can do something.

37
00:02:11.084 --> 00:02:18.333
Or I can use query selector and try to set
the URL before actually in checking HTML.

38
00:02:18.333 --> 00:02:20.870
Dom, so you I can do that, and
then we can use connected callback.

39
00:02:20.870 --> 00:02:23.529
But I want to show you how
to use the other solution.

40
00:02:23.529 --> 00:02:27.666
So what I'm saying is,
I'm setting here the source, right?

41
00:02:27.666 --> 00:02:31.512
Well, I can also go and change,

42
00:02:31.512 --> 00:02:35.510
in this case, it was Data-url.

43
00:02:35.510 --> 00:02:38.922
We don't use Data-url here, okay?

44
00:02:38.922 --> 00:02:43.337
We use, if you're,
Do you remember how to change that?

45
00:02:43.337 --> 00:02:49.091
Dataset.url, and it's a trailer_url.

46
00:02:51.465 --> 00:02:56.400
&gt;&gt; Maximiliano Firtman: So we are setting
that attribute after it's injected

47
00:02:56.400 --> 00:02:57.502
in the DOM.

48
00:02:57.502 --> 00:03:01.479
Because of that, connected callback,
will not get it.

49
00:03:01.479 --> 00:03:05.931
So for YouTube embed,
we are going to change how we do that.

50
00:03:05.931 --> 00:03:11.703
In this case,
what we are going to do is there,

51
00:03:11.703 --> 00:03:16.291
there are different ways to do that,

52
00:03:16.291 --> 00:03:19.991
but we are going to override.

53
00:03:19.991 --> 00:03:25.920
One particular method is called
attribute changed callback.

54
00:03:25.920 --> 00:03:31.340
Receives the property that is changing and

55
00:03:31.340 --> 00:03:36.464
the value attribute changed callback.

56
00:03:36.464 --> 00:03:42.021
I need to check if the property that
has been Change is actually "data-url".

57
00:03:45.545 --> 00:03:46.906
&gt;&gt; Maximiliano Firtman: Does
it make sense?

58
00:03:46.906 --> 00:03:52.713
So if it's data-url, the property
that is actually changing right now,

59
00:03:52.713 --> 00:03:55.855
I'm going to get that url from dataset.

60
00:03:55.855 --> 00:04:00.853
I'm inside the Youtube embed, so I can now
read the url Up and then, I mean, for now,

61
00:04:00.853 --> 00:04:04.129
we can just use console log
to see if something happens.

62
00:04:04.129 --> 00:04:09.668
So in that case, when anyone in
our YouTube embedded components

63
00:04:09.668 --> 00:04:14.604
changing data URL,
you that function will be executed.

64
00:04:14.604 --> 00:04:21.926
So if I refresh and inspect this,
I'm seeing nothing Thing here,

65
00:04:21.926 --> 00:04:28.220
there is a quick answer on why
did I import the component?

66
00:04:28.220 --> 00:04:31.315
No, remember,
the browser doesn't know about that.

67
00:04:31.315 --> 00:04:32.628
So you need to think about that.

68
00:04:32.628 --> 00:04:36.327
We need to think about a solution,
because you will have a lot of components.

69
00:04:36.327 --> 00:04:40.044
Of course, there were, there are ways to,

70
00:04:40.044 --> 00:04:44.364
create a script that will
check your file system for

71
00:04:44.364 --> 00:04:50.098
all the web components and
will keep an import list automatically.

72
00:04:50.098 --> 00:04:54.526
But you need to find a way,
sometimes you create one CSS file with all

73
00:04:54.526 --> 00:04:58.814
the components imports, so
you need to remember every time you.

74
00:04:58.814 --> 00:05:01.294
Actually create a new web component.

75
00:05:01.294 --> 00:05:06.422
You go and
register that into your import tree.

76
00:05:06.422 --> 00:05:08.855
Okay, so have that in mind.

77
00:05:08.855 --> 00:05:13.929
So in our case, we can go again
to maybe ABS is our entry point,

78
00:05:13.929 --> 00:05:19.882
and we can also import this one that
is YouTube embed.js because if not,

79
00:05:19.882 --> 00:05:24.861
the browser is not actually
registering the web component,

80
00:05:24.861 --> 00:05:27.415
it's not executing my class.

81
00:05:27.415 --> 00:05:31.854
So I'm still not getting
in because there are still

82
00:05:31.854 --> 00:05:36.615
one more step that you're not expecting,
actually.

83
00:05:36.615 --> 00:05:40.176
So when you look at that, it should work.

84
00:05:40.176 --> 00:05:45.556
But actually,
you need to specify to the custom elements

85
00:05:45.556 --> 00:05:52.630
enshrine in which properties you're
actually interested in observing.

86
00:05:52.630 --> 00:05:59.135
It's not going to execute attribute change
callback automatically for every change.

87
00:05:59.135 --> 00:06:04.269
So you need to actually implement
another one that is called

88
00:06:04.269 --> 00:06:09.822
Get observer attributes, and
it's actually a static method.

89
00:06:09.822 --> 00:06:11.730
Do we have a static method in JavaScript?

90
00:06:11.730 --> 00:06:16.508
We do now, okay, and
it's actually a getter.

91
00:06:16.508 --> 00:06:18.910
So it's a static property
that has a getter.

92
00:06:18.910 --> 00:06:24.846
So I need to return Turn here an array of
all the properties that I'm interested in.

93
00:06:24.846 --> 00:06:28.484
So I'm saying I'm interested in
only one property, data, URL.

94
00:06:28.484 --> 00:06:32.317
So then when that attribute is changing,

95
00:06:32.317 --> 00:06:37.033
you will get executed
attribute change callback.

96
00:06:37.033 --> 00:06:39.691
So now that we are sending
the URL to the console, let's.

97
00:06:39.691 --> 00:06:40.893
See if that's working.

98
00:06:40.893 --> 00:06:43.220
So I will come back here.

99
00:06:43.220 --> 00:06:47.071
Remember, we are talking
about that web component.

100
00:06:47.071 --> 00:06:50.615
If I refresh,
I'm seeing the URL here at the bottom.

101
00:06:50.615 --> 00:06:54.095
So actually,
now it's executing my web component.

102
00:06:54.095 --> 00:06:58.777
I still don't render anything on
the screen, but we are getting the URL.

103
00:06:58.777 --> 00:07:05.783
So with that URL, we need to somehow
see how to embed that in YouTube.

104
00:07:05.783 --> 00:07:10.309
So for example,
if I'm going to youtube.com, to any video.

105
00:07:10.309 --> 00:07:16.689
So from the video, we can click share, and
then we can try to see the embed code.

106
00:07:16.689 --> 00:07:19.960
So we need to actually take that HTML,

107
00:07:19.960 --> 00:07:25.190
this HTML that we have here, so
this is how you embed a video.

108
00:07:25.190 --> 00:07:31.314
So then we somehow need to
do something with that.

109
00:07:31.314 --> 00:07:35.668
So if you I had the URL,
I need to change, for example,

110
00:07:35.668 --> 00:07:41.447
my inner HTML,
&gt;&gt; Maximiliano Firtman: With this.

111
00:07:41.447 --> 00:07:44.694
This is what I got from YouTube.

112
00:07:44.694 --> 00:07:48.714
Yeah, we can change a little bit here.

113
00:07:48.714 --> 00:07:53.843
The source here, at some point

114
00:07:53.843 --> 00:07:58.192
half the video ID, okay?

115
00:07:58.192 --> 00:08:03.807
So, we have to replace that
video ID with the URL.

116
00:08:03.807 --> 00:08:05.070
There are two ways to do that.

117
00:08:05.070 --> 00:08:11.411
So if you look at the current URL,
the current URL look like this.

118
00:08:11.411 --> 00:08:16.042
So youtube.com forward slash watch and
then a video.

119
00:08:16.042 --> 00:08:19.611
And here it's actually
following a different pattern.

120
00:08:19.611 --> 00:08:21.698
So we don't have the watch and

121
00:08:21.698 --> 00:08:26.050
it's not the property that we
are sending over query string.

122
00:08:26.050 --> 00:08:33.750
So we actually need to do a little trick
on this URL to get this part only and

123
00:08:33.750 --> 00:08:38.814
after we have that part,
try to fill this with.

124
00:08:38.814 --> 00:08:41.050
Some kind of a video ID.

125
00:08:41.050 --> 00:08:45.160
Actually, we don't need actually
the rest of the arguments.

126
00:08:45.160 --> 00:08:46.885
I think it will work without them.

127
00:08:46.885 --> 00:08:52.513
But we don't need to take that URL and
trying to get the video ID from it.

128
00:08:52.513 --> 00:08:55.441
That is just parsing the string.

129
00:08:55.441 --> 00:09:00.995
So we take that URL and
we get the substring

130
00:09:00.995 --> 00:09:06.074
of that URL starting on the place where

131
00:09:06.074 --> 00:09:12.104
we see the maybe the question mark and
the V and

132
00:09:12.104 --> 00:09:18.001
then we need to add
maybe three characters.

133
00:09:18.001 --> 00:09:22.182
Or two characters,
if you're using the equals also.

134
00:09:22.182 --> 00:09:26.871
So I'm looking for that, and
then three characters from there.

135
00:09:26.871 --> 00:09:29.997
Okay, so
I'm getting a substring or equals.

136
00:09:29.997 --> 00:09:30.795
It has the same.

137
00:09:30.795 --> 00:09:34.248
We can add equals,
which has the same if you want.

138
00:09:34.248 --> 00:09:36.722
So, and that's the video ID.

139
00:09:36.722 --> 00:09:39.392
So we are adding that there.

140
00:09:39.392 --> 00:09:40.475
And the rest,

141
00:09:40.475 --> 00:09:46.532
we just keep it as it is with the HTML
that actually Google is suggesting, okay?

142
00:09:46.532 --> 00:09:48.424
So we can embed that in our website.

143
00:09:53.872 --> 00:09:57.437
&gt;&gt; Maximiliano Firtman: So
if I refresh now, boom,

144
00:09:57.437 --> 00:10:02.398
I'm seeing that particular video and

145
00:10:02.398 --> 00:10:05.506
of course it will work.

146
00:10:05.506 --> 00:10:08.260
&gt;&gt; Speaker 3: Valedogtoria.

147
00:10:08.260 --> 00:10:11.932
&gt;&gt; Maximiliano Firtman: Of course,
if I change the ID, remember we are still

148
00:10:11.932 --> 00:10:16.945
changing Ids manually, we will change
that from a movie details page.

149
00:10:16.945 --> 00:10:21.474
We are right now coding the ID,
which is a pretty bad idea.

150
00:10:21.474 --> 00:10:27.077
And if we go back to,
&gt;&gt; Maximiliano Firtman: Right,

151
00:10:27.077 --> 00:10:33.470
say this and refresh, now I'm getting
also the Men in Black trailer.

152
00:10:33.470 --> 00:10:38.103
So now we have created a Web
component that can run

153
00:10:38.103 --> 00:10:42.736
their video Embed just by
sending the video URL.

154
00:10:42.736 --> 00:10:46.998
The problem that we have right
now is that, yeah, we can render,

155
00:10:46.998 --> 00:10:48.392
by the way, we also,

156
00:10:48.392 --> 00:10:53.759
we may work with the size of this because
it's getting out of the box at some point.

157
00:10:53.759 --> 00:10:57.016
So in that case, so
you can see I'm talking about this.

158
00:10:57.016 --> 00:10:58.176
It's getting out of the.

159
00:10:58.176 --> 00:11:04.530
Depends on the size, so we need to
deal with CSS over the YouTube embed.

160
00:11:04.530 --> 00:11:09.780
So instead of with this,
we can change this to 100 so

161
00:11:09.780 --> 00:11:14.927
it will fit in the box,
315 or 300 or whatever.

162
00:11:14.927 --> 00:11:18.231
So you can play with those
values until you are happy.

163
00:11:18.231 --> 00:11:23.372
Okay, so then now it will fit properly.

164
00:11:23.372 --> 00:11:28.574
Even if it's a mobile UI, it should work,
something like this, okay?

165
00:11:28.574 --> 00:11:32.152
So now it goes to this other layout.

166
00:11:32.152 --> 00:11:36.819
You can play with that,
that's HTML and CSS.

