WEBVTT

1
00:00:00.000 --> 00:00:02.280
Right now, we are hard coding the page.

2
00:00:02.280 --> 00:00:07.912
So it's a home page or it's a detail,
we are hard coding the idea of the movie.

3
00:00:07.912 --> 00:00:09.853
Something's wrong there, okay?

4
00:00:09.853 --> 00:00:12.370
So this is not what we are expecting.

5
00:00:12.370 --> 00:00:15.009
We are expecting to have
a home page by default.

6
00:00:15.009 --> 00:00:20.420
And if I click in one element, so
if I go back now to my home page and

7
00:00:20.420 --> 00:00:25.552
they don't render movie details page,
I have my home page.

8
00:00:25.552 --> 00:00:32.394
And if I click on Guardians of the Galaxy,
I wanna see Guardians of the Galaxy, okay?

9
00:00:32.394 --> 00:00:35.401
And, yeah, with JavaScript,
we could do that now.

10
00:00:35.401 --> 00:00:40.480
So we can listen for the click, and
then we can remove from the DOM,

11
00:00:40.480 --> 00:00:43.855
the homepage and
then inject the other one.

12
00:00:43.855 --> 00:00:48.668
We have the web components, we can
actually do that, okay, and it will work.

13
00:00:48.668 --> 00:00:50.874
But there is a much better way.

14
00:00:50.874 --> 00:00:53.672
And the better way,
because this is a single page application.

15
00:00:53.672 --> 00:00:57.249
The better way is to work with URLs,

16
00:00:57.249 --> 00:01:03.344
as we are used to in the web,
as this is just a normal website.

17
00:01:03.344 --> 00:01:10.327
So for example, if the user is here,
we want the homepage.

18
00:01:10.327 --> 00:01:17.684
If the user is looking at one particular
movie with an ID, we go to the Details.

19
00:01:17.684 --> 00:01:21.276
If the user is in,
I don't know, account/login,

20
00:01:21.276 --> 00:01:23.570
we went to the login page, okay?

21
00:01:23.570 --> 00:01:26.959
If the user is searching and
you know the deal, okay?

22
00:01:26.959 --> 00:01:33.114
But server side, we are just serving
files in the real file system.

23
00:01:33.114 --> 00:01:37.076
So if you remember,
we are serving the public folder.

24
00:01:37.076 --> 00:01:41.223
And of course,
the public folder has only one HTML.

25
00:01:41.223 --> 00:01:48.417
So what we are going to do now is to work
with URLs client side, at least initially.

26
00:01:48.417 --> 00:01:52.539
That is, we will create URLs client side,

27
00:01:52.539 --> 00:01:57.128
even if they don't exist on the server,
okay?

28
00:01:57.128 --> 00:02:02.714
They're going to fake the URL, and
we can do that on single page application.

29
00:02:02.714 --> 00:02:06.045
So to do that,
we are going to create a router.

30
00:02:06.045 --> 00:02:07.320
It's actually a design pattern.

31
00:02:07.320 --> 00:02:10.946
We don't have anything,
we don't have any API in the browser or

32
00:02:10.946 --> 00:02:13.447
in JavaScript with the name router, okay?

33
00:02:13.447 --> 00:02:16.690
So it's just a design pattern that
actually is available on most

34
00:02:16.690 --> 00:02:17.718
libraries as well.

35
00:02:17.718 --> 00:02:20.107
You have Angular router.

36
00:02:20.107 --> 00:02:23.663
For React, you typically use an external
library known as React router.

37
00:02:23.663 --> 00:02:28.227
So, every library typically has
a solution with the name router, so

38
00:02:28.227 --> 00:02:32.648
we will try to use the same thing
to implement the same idea, okay?

39
00:02:32.648 --> 00:02:36.678
So, within services then,
we are going to create two files.

40
00:02:36.678 --> 00:02:41.892
We can use capital letters from Notice App
to you actually, like Routes.js,

41
00:02:41.892 --> 00:02:46.317
where we're going to set our routes,
and then the actual router.

42
00:02:46.317 --> 00:02:51.471
So it will be the the object or
the code that we're

43
00:02:51.471 --> 00:02:56.013
responsible for making that work, okay?

44
00:02:56.013 --> 00:02:58.403
Routes will be just the list of routes.

45
00:02:58.403 --> 00:03:03.028
So typically,
it's a constant that we are exporting.

46
00:03:04.976 --> 00:03:09.762
&gt;&gt; Maximiliano Firtman: Okay, and when we
do something like this, so we can specify,

47
00:03:09.762 --> 00:03:14.470
okay, for that task,
I'm going to render that component.

48
00:03:14.470 --> 00:03:18.280
And here, I will use my component.

49
00:03:18.280 --> 00:03:19.692
Does it make sense?

50
00:03:19.692 --> 00:03:22.627
So path components, path components.

51
00:03:22.627 --> 00:03:26.744
By the way, I have a typo here.

52
00:03:26.744 --> 00:03:28.331
This is not an object.

53
00:03:28.331 --> 00:03:30.692
This should be an array, a collection.

54
00:03:30.692 --> 00:03:36.291
So I'm going to change,
&gt;&gt; Maximiliano Firtman: Curly braces with

55
00:03:36.291 --> 00:03:41.808
brackets, okay, with square brackets.

56
00:03:41.808 --> 00:03:47.800
So we have a HomePage, and
now we know that we have a details,

57
00:03:47.800 --> 00:03:54.043
okay, so we have a Details page that for
now we will say movies.

58
00:03:54.043 --> 00:03:56.135
We say movie details page.

59
00:03:56.135 --> 00:04:00.509
And if you look at this array,
we have an advantage.

60
00:04:00.509 --> 00:04:03.328
This array will import all the pages.

61
00:04:03.328 --> 00:04:08.816
So, at least the web components
that are going to be used as pages,

62
00:04:08.816 --> 00:04:11.658
they're gonna be imported here.

63
00:04:11.658 --> 00:04:13.857
So, then I don't need to
remember to import them, okay?

64
00:04:13.857 --> 00:04:18.161
So every page will
automatically be imported here.

65
00:04:18.161 --> 00:04:22.727
So,
&gt;&gt; Maximiliano Firtman: Actually,

66
00:04:22.727 --> 00:04:30.060
to get the details of a movie,
maybe we don't want this URL.

67
00:04:30.060 --> 00:04:32.694
We want the URL such as this.

68
00:04:32.694 --> 00:04:34.596
We want a number.

69
00:04:34.596 --> 00:04:36.273
We want the ID.

70
00:04:36.273 --> 00:04:41.443
But of course, I'm not going to
create one entry in this array for

71
00:04:41.443 --> 00:04:44.640
every movie, doesn't make any sense.

72
00:04:44.640 --> 00:04:50.334
So something that we can think about
beforehand, because something that we need

73
00:04:50.334 --> 00:04:55.956
to code later, is that the path can be a
string or it can be a regular expression.

74
00:04:55.956 --> 00:05:00.825
I'm not sure how comfortable
are you with regular expressions.

75
00:05:00.825 --> 00:05:04.565
At least AI models
are pretty good with that.

76
00:05:04.565 --> 00:05:09.973
So if you want the one really use cases
for AI, like ChatGPT, or Copilot,

77
00:05:09.973 --> 00:05:15.223
or Gemini, or whatever,
it's to help you with regular expressions.

78
00:05:15.223 --> 00:05:19.276
But anyway,
regular expression in JavaScript,

79
00:05:19.276 --> 00:05:24.785
instead of using quotes,
they're using actually forward slash.

80
00:05:24.785 --> 00:05:31.433
The problem with this is that now we have
forward slash and forward slash inside,

81
00:05:31.433 --> 00:05:36.530
which is a problem because it's
the open and the closing tag.

82
00:05:36.530 --> 00:05:37.922
No quotes, okay, like that.

83
00:05:37.922 --> 00:05:40.175
So we have a problem here.

84
00:05:40.175 --> 00:05:45.292
So the second one is not taking it,
so I need to actually

85
00:05:45.292 --> 00:05:50.763
escape this one, okay, and
we escape it with backslash.

86
00:05:50.763 --> 00:05:55.615
I need to add backlash here and
here, okay?

87
00:05:55.615 --> 00:05:56.429
Does it make sense?

88
00:05:56.429 --> 00:06:02.473
And now, the 14 number,
I want it to be a variable, okay?

89
00:06:02.473 --> 00:06:07.330
In regular expressions in JavaScript,
we do that in parentheses,

90
00:06:07.330 --> 00:06:11.078
and within parentheses,
I specify, for example,

91
00:06:11.078 --> 00:06:16.550
that I want several numeric digits,
okay, to actually create a variable.

92
00:06:16.550 --> 00:06:20.464
And to do that again,
I'm going to say this,

93
00:06:20.464 --> 00:06:25.103
the plus in the regular
expressions pattern system,

94
00:06:25.103 --> 00:06:30.169
means a digit and plus is 1 or
more, so one or more digits.

95
00:06:30.169 --> 00:06:35.268
One or more digits will go to a variable
that then we see how to read the value,

96
00:06:35.268 --> 00:06:39.107
okay, that variable, but
that's how it works, okay?

97
00:06:39.107 --> 00:06:42.111
Does it make sense?
So then we can create in our router

98
00:06:42.111 --> 00:06:46.177
systems paths that are based
on regular expression.

99
00:06:46.177 --> 00:06:49.495
To be honest, most of the regular
expressions will look like this.

100
00:06:49.495 --> 00:06:53.862
Typically, it's an ID that you pass,
but it can be other variables as well.

101
00:06:53.862 --> 00:06:56.014
You can have more than one variable, okay?

102
00:06:56.014 --> 00:06:58.177
So that's movie details.

103
00:06:58.177 --> 00:07:02.656
And movies, we can use these maybe for
the search results later.

104
00:07:02.656 --> 00:07:07.438
Okay, so we can create a movie
page that we don't have yet, okay?

105
00:07:07.438 --> 00:07:11.576
And actually,
we will need to add a lot of sections.

106
00:07:11.576 --> 00:07:16.382
So far, at least we can have
at least the search results,

107
00:07:16.382 --> 00:07:18.899
and later, we will add more.

108
00:07:18.899 --> 00:07:25.451
And if you are following along with readme
of this workshop, this course, it's e1 so

109
00:07:25.451 --> 00:07:31.134
you have all the routes there, but
at least I will create empty MoviePage.

110
00:07:31.134 --> 00:07:33.711
And the problem is that MoviePage for

111
00:07:33.711 --> 00:07:39.044
search results does not exist right now,
so I also need to create it, okay?

112
00:07:39.044 --> 00:07:42.666
So I need to create that, and
I will use that one probably, as I said,

113
00:07:42.666 --> 00:07:44.609
anplaceholder for the rest as well.

114
00:07:44.609 --> 00:07:45.620
Does it make sense?

115
00:07:45.620 --> 00:07:52.195
So for example, this is
the MoviePage.js and we know the deal.

116
00:07:52.195 --> 00:07:59.159
We create an export class MoviePage
extending from HTMLElement,

117
00:07:59.159 --> 00:08:03.397
and at least we need to then register it.

118
00:08:03.397 --> 00:08:08.271
Actually, do we need to register
pages if you're only going to use

119
00:08:08.271 --> 00:08:09.932
them from the router?

120
00:08:09.932 --> 00:08:15.237
Not really, but anyway,
we can do that, okay, just in case.

121
00:08:15.237 --> 00:08:16.147
Does it make sense?

122
00:08:16.147 --> 00:08:19.462
Because they're going to
be used by JavaScript, but

123
00:08:19.462 --> 00:08:22.859
it's a it's a good practice
to register them anyway.

124
00:08:22.859 --> 00:08:27.902
So that's my MoviePage, okay?

125
00:08:27.902 --> 00:08:29.590
Does that make sense?

126
00:08:29.590 --> 00:08:34.519
And now, I think the only part
that I'm missing is that I need to

127
00:08:34.519 --> 00:08:38.345
import that MoviePage
that I have just created.

128
00:08:38.345 --> 00:08:41.676
So now, I have three routes, okay?

129
00:08:41.676 --> 00:08:47.608
This is just a custom schema, so
I'm just creating this from a scratch,

130
00:08:47.608 --> 00:08:50.440
so it's not something standard.

131
00:08:50.440 --> 00:08:54.045
It looks similar to other frameworks,
okay?

132
00:08:54.045 --> 00:08:57.331
Not a big deal, it's just a path and
something to do with that path.

133
00:08:57.331 --> 00:08:59.665
Typically, that's how that works.

