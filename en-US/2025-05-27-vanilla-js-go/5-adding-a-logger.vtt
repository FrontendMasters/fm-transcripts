WEBVTT

1
00:00:00.000 --> 00:00:02.141
&gt;&gt; Maximiliano Firtman: So
we are building an app, and

2
00:00:02.141 --> 00:00:05.408
we want this app to be
a real-world project.

3
00:00:05.408 --> 00:00:11.782
And on most real-world projects,
we need to deal with the real world.

4
00:00:11.782 --> 00:00:16.737
And the real world means things
happen all the time, and

5
00:00:16.737 --> 00:00:19.488
we need to debug those things.

6
00:00:19.488 --> 00:00:24.927
So even if everything works fine in my
computer, when I deploy that to a server,

7
00:00:24.927 --> 00:00:28.740
anything can happen,
mostly when we are in the cloud and

8
00:00:28.740 --> 00:00:33.070
we have a lot of users accessing,
for example, that back end.

9
00:00:33.070 --> 00:00:37.989
So it's actually really
important to always have

10
00:00:37.989 --> 00:00:42.447
a logging system to log problems and
errors.

11
00:00:42.447 --> 00:00:47.005
I mean, it's not mandatory, we can
deploy an app without logging errors and

12
00:00:47.005 --> 00:00:51.772
problems, but the day we have a problem,
the day someone is sending us an email,

13
00:00:51.772 --> 00:00:54.811
the customer is saying,
hey, it's all working.

14
00:00:54.811 --> 00:00:57.663
The server is down, the website is down,

15
00:00:57.663 --> 00:01:02.647
it's gonna be difficult to actually
tryi to find the solution quickly.

16
00:01:02.647 --> 00:01:09.030
So we need to think before hands and
one way is to create a logger.

17
00:01:09.030 --> 00:01:14.202
Okay, there are many ways
to create the logger,

18
00:01:14.202 --> 00:01:19.373
I mean, you can from go,
let's go to main.go,

19
00:01:19.373 --> 00:01:23.662
I could go here and just use format font,

20
00:01:23.662 --> 00:01:28.980
print line and say,
print line survey the files.

21
00:01:28.980 --> 00:01:34.270
If there are any problem, for example,
here I'm using the standard log system,

22
00:01:34.270 --> 00:01:37.107
but the standard log
system is just saving,

23
00:01:37.107 --> 00:01:39.881
it's sending this to the output console.

24
00:01:39.881 --> 00:01:43.397
Or actually to the output
of the operating system,

25
00:01:43.397 --> 00:01:47.745
that it can be a file as well,
but by default, it's a console.

26
00:01:47.745 --> 00:01:51.837
But from a server point of view,
it's difficult to follow that.

27
00:01:51.837 --> 00:01:57.702
So where can I see the console of my
server if I'm deploying this to the cloud?

28
00:01:57.702 --> 00:01:59.795
There are some solutions,

29
00:01:59.795 --> 00:02:05.893
some cloud-based solutions such as Burcell
that will let you go into a panel and

30
00:02:05.893 --> 00:02:11.366
see the console output of your scripts,
that sometimes is difficult.

31
00:02:11.366 --> 00:02:15.178
So that's why we have other options.

32
00:02:15.178 --> 00:02:18.236
There are two options,
we are going to pick one.

33
00:02:18.236 --> 00:02:22.133
One is to use a cloud-based provider,

34
00:02:22.133 --> 00:02:28.390
there are services that will let
you send your logs to a server,

35
00:02:28.390 --> 00:02:33.112
and they have nice dashboards,
then you can see

36
00:02:33.112 --> 00:02:37.982
all your problems by time,
by hour, by device.

37
00:02:37.982 --> 00:02:44.593
Okay, so some or most of those services
are paid, so you need to pay for that.

38
00:02:44.593 --> 00:02:50.080
Or we can just create a log system,
a very simple log system that writes

39
00:02:50.080 --> 00:02:55.772
you a file that this is how logs in
the operating system typically works.

40
00:02:55.772 --> 00:02:58.907
So every error every
problem that you have,

41
00:02:58.907 --> 00:03:01.966
it creates a new entry in that file, okay?

42
00:03:01.966 --> 00:03:07.303
Of course we can use the database as well,
but a file will be good enough.

43
00:03:07.303 --> 00:03:11.963
So that's why I'm going to
create a new package, remember,

44
00:03:11.963 --> 00:03:14.481
packages in Go are just folders.

45
00:03:14.481 --> 00:03:18.302
So I will create a new package
with the name logger, and

46
00:03:18.302 --> 00:03:22.635
if you're following along with
instructions, this is a2.

47
00:03:22.635 --> 00:03:24.446
So from readme,

48
00:03:31.912 --> 00:03:32.626
&gt;&gt; Maximiliano Firtman: On a2,

49
00:03:32.626 --> 00:03:36.300
this is a logger, and then in the package,

50
00:03:36.300 --> 00:03:42.747
I'm going to create logger.co,
this is probably one of the exceptions.

51
00:03:42.747 --> 00:03:48.523
We're not going to code manually this,
it doesn't worth the effort,

52
00:03:48.523 --> 00:03:53.831
and it's a waste of time to actually
take 15 minutes to do this.

53
00:03:53.831 --> 00:03:58.038
So this is one that I will just copy and
paste, and I will explain it.

54
00:03:58.038 --> 00:03:59.676
It's actually pretty simple.

55
00:04:01.675 --> 00:04:04.639
&gt;&gt; Maximiliano Firtman: But at least
we are not wasting time with this,

56
00:04:04.639 --> 00:04:08.828
that is not the core of our project,
it's just a logging system.

57
00:04:08.828 --> 00:04:11.637
So new logger creates a logger
is not really complicated, and

58
00:04:11.637 --> 00:04:14.076
then we have some functions
there doing some things.

59
00:04:14.076 --> 00:04:20.243
So on a structure, it's kind of
simulating that, it's called the logger.

60
00:04:20.243 --> 00:04:25.127
It's a logger structure that actually
will have like a file where we

61
00:04:25.127 --> 00:04:28.136
are storing this and we have two loggers.

62
00:04:28.136 --> 00:04:30.638
It can be an info logger and error logger.

63
00:04:30.638 --> 00:04:34.553
So because we can just send info messages,

64
00:04:34.553 --> 00:04:41.861
this is like console log in Javascript,
or error messages like console error.

65
00:04:41.861 --> 00:04:46.034
Then we have the new logger,
this is the factory.

66
00:04:46.034 --> 00:04:49.058
Remember in Go we don't have constructors,
we don't have objects,

67
00:04:49.058 --> 00:04:50.403
we don't have constructors.

68
00:04:50.403 --> 00:04:55.508
But we simulate the idea of
a constructor through a factory,

69
00:04:55.508 --> 00:04:59.110
so the factory has a prefix new, okay, and

70
00:04:59.110 --> 00:05:03.934
the name of the value that we
are creating the structure.

71
00:05:03.934 --> 00:05:08.132
So new logger creates a logger
is not really complicated, and

72
00:05:08.132 --> 00:05:13.311
then we have some functions there doing
some things, and what's the idea?

73
00:05:13.311 --> 00:05:16.665
We are just opening a file, so

74
00:05:16.665 --> 00:05:22.310
we are saving this in a file,
okay, that's all.

75
00:05:22.310 --> 00:05:28.959
And why am I doing this right now,
because I will start coding my server,

76
00:05:28.959 --> 00:05:35.077
and there will be moments,
many moments where errors may happen.

77
00:05:35.077 --> 00:05:41.071
I should already have the logger ready so
I can write to that logger at that moment.

78
00:05:41.071 --> 00:05:46.046
If I do that after coding my app,
I will probably miss

79
00:05:46.046 --> 00:05:51.375
a lot of places,
a lot of moments that I'm not logging.

80
00:05:51.375 --> 00:05:54.832
Yeah, you can also add
a mark to-do mark and

81
00:05:54.832 --> 00:05:58.850
then replace all your to-do
marks if you want, but

82
00:05:58.850 --> 00:06:04.842
that's why beforehand it's a good idea
to set up your login system, okay?

83
00:06:04.842 --> 00:06:09.299
And the great advantage of using
a login system of your own,

84
00:06:09.299 --> 00:06:13.592
your custom login system,
is later you can change that.

85
00:06:13.592 --> 00:06:16.706
Let's say that later you want to
upgrade your login system, and

86
00:06:16.706 --> 00:06:19.945
instead of using a file,
you want to use a cloud-based provider.

87
00:06:19.945 --> 00:06:22.479
Just go here here, change here,

88
00:06:22.479 --> 00:06:27.914
I know your app now is ready to load
into the cloud, okay, makes sense?

89
00:06:27.914 --> 00:06:32.756
So that's my logger, and
now we need to go to main.go and update or

90
00:06:32.756 --> 00:06:38.560
create the logger actually, because we
are not actually creating the logger.

91
00:06:38.560 --> 00:06:42.629
So we are going to create
here a log instance,

92
00:06:42.629 --> 00:06:48.197
we can call log instance,
that is going to create the logger,

93
00:06:48.197 --> 00:06:53.872
and we can create the logger here,
or we can create a function,

94
00:06:53.872 --> 00:06:58.928
another function,
initialize logger, for example.

95
00:06:58.928 --> 00:07:04.325
And then we can call that function,
it is giving me an error

96
00:07:04.325 --> 00:07:09.297
because the function is not
returning anything yet.

97
00:07:09.297 --> 00:07:13.656
And then I'm going to
create that initialized

98
00:07:13.656 --> 00:07:17.798
logger that will actually return a logger.

99
00:07:21.812 --> 00:07:25.805
&gt;&gt; Maximiliano Firtman: You can
see that when I added this,

100
00:07:25.805 --> 00:07:29.117
now I have by import as well.

101
00:07:29.117 --> 00:07:33.677
It's importing this from a different
package because the logger is

102
00:07:33.677 --> 00:07:37.446
in a different package,
it's not in the main package.

103
00:07:37.446 --> 00:07:41.506
The asterisk says it's a pointer,

104
00:07:41.506 --> 00:07:45.572
that means I may return nil as well.

105
00:07:45.572 --> 00:07:51.298
Remember the values here don't accept
nulls that here in Go are nills unless

106
00:07:51.298 --> 00:07:57.573
it's a pointer, if it's a pointer, then
asterisk means I can send nills as well.

107
00:07:57.573 --> 00:08:03.390
So then I can call my logger.Newlogger,
I receives the file path so

108
00:08:03.390 --> 00:08:08.796
we can call this movie service the log or
movie log, movie log,

109
00:08:08.796 --> 00:08:15.039
movie output log, however you wanna
call this, it's just a file name.

110
00:08:15.039 --> 00:08:20.830
And of course, this is relative
to the execution of our server,

111
00:08:20.830 --> 00:08:23.949
you can use also an absolute path.

112
00:08:23.949 --> 00:08:28.455
Don't put this in the public folder,
because if you put that file in the public

113
00:08:28.455 --> 00:08:32.636
folder, it will be available for
every user, okay, so don't do that.

114
00:08:32.636 --> 00:08:38.958
It should be outside of the public folder,
that log file.

115
00:08:38.958 --> 00:08:44.974
This idea is that new logger
is following the pattern

116
00:08:44.974 --> 00:08:49.632
we see here, of error management in Go.

117
00:08:49.632 --> 00:08:52.811
So if for
some reason you cannot open the file, why,

118
00:08:52.811 --> 00:08:57.677
maybe I don't have permissions in the file
system to open the file or whatever.

119
00:08:57.677 --> 00:09:03.041
There are no more space in the disk,
anything can happen.

120
00:09:03.041 --> 00:09:06.943
I'm returning two values, so
that's the design pattern in Go.

121
00:09:06.943 --> 00:09:11.345
So functions that may trigger an error,
we don't have exceptions here,

122
00:09:11.345 --> 00:09:12.908
we don't have try catch.

123
00:09:12.908 --> 00:09:15.944
We are just returning two values, okay?

124
00:09:15.944 --> 00:09:20.899
The possible value, and that's why
it has an asterisk, it's a pointer,

125
00:09:20.899 --> 00:09:24.371
because maybe it's not there,
and then the error.

126
00:09:24.371 --> 00:09:27.530
So if there are no errors,

127
00:09:27.530 --> 00:09:33.141
I'm returning the object and
nil as an error.

128
00:09:33.141 --> 00:09:36.969
And if there are errors,
I'm returning nil as the object and

129
00:09:36.969 --> 00:09:39.382
then the error, okay, makes sense.

130
00:09:39.382 --> 00:09:44.500
This is, again, this is a goal design
pattern that you may already know in case

131
00:09:44.500 --> 00:09:50.257
you are coming from node.js or javascript,
this is similar node.js and how you work.

132
00:09:50.257 --> 00:09:55.713
Also, when you open the file system
before promises, where the callbacks

133
00:09:55.713 --> 00:10:01.004
also have an error, but in the reverse
order, kind of the same pattern.

134
00:10:01.004 --> 00:10:03.731
So that means that we should save.

135
00:10:05.701 --> 00:10:10.881
&gt;&gt; Maximiliano Firtman: Both values here,
&gt;&gt; Maximiliano Firtman: Remember that

136
00:10:10.881 --> 00:10:16.036
we can return more than
one value in Go functions,

137
00:10:16.036 --> 00:10:20.845
and we are going to check
if we do have an error.

138
00:10:20.845 --> 00:10:26.579
Well now we need to log to the File
c through the operating system,

139
00:10:26.579 --> 00:10:30.554
we don't have any other initialice logger.

140
00:10:33.542 --> 00:10:37.314
&gt;&gt; Maximiliano Firtman: Of course if we
cannot create the log, the only thing we

141
00:10:37.314 --> 00:10:42.323
have is to send a message to the operating
system, a fatal error, okay?

142
00:10:45.662 --> 00:10:48.761
&gt;&gt; Maximiliano Firtman: And then,
we will return the LogInstance, and

143
00:10:48.761 --> 00:10:51.093
we're going to use defer to close.

144
00:10:54.801 --> 00:10:59.770
&gt;&gt; Maximiliano Firtman: That LogInstance,
we'll defer that to the end,

145
00:10:59.770 --> 00:11:02.266
so we close it at the end.

146
00:11:02.266 --> 00:11:07.768
But we set that close now,
that's the idea of deferring Go.

147
00:11:07.768 --> 00:11:09.250
And now of course,

148
00:11:09.250 --> 00:11:13.983
Go is always complaining that
I'm not using that instance.

149
00:11:13.983 --> 00:11:18.834
Remember Go is not letting you create
variables that you are not using.

150
00:11:18.834 --> 00:11:23.447
So it won't compile,
that's why it's complaining, but

151
00:11:23.447 --> 00:11:26.409
yeah, we will use that at some point.

152
00:11:26.409 --> 00:11:33.021
So the idea is that, for example,
if the server is failing,

153
00:11:33.021 --> 00:11:36.911
we can now use our LogInstance, and

154
00:11:36.911 --> 00:11:43.022
try to log in this case an error saying,
Server failed.

155
00:11:43.022 --> 00:11:48.044
So by the way, it also needs the error

156
00:11:48.044 --> 00:11:51.935
that we passed an argument.

157
00:11:51.935 --> 00:11:56.699
It's not just sending
a message to the output,

158
00:11:56.699 --> 00:12:01.354
it's also saving that
information in a file.

159
00:12:01.354 --> 00:12:07.250
So from now on, every time we want
to log messages to the console,

160
00:12:07.250 --> 00:12:13.041
we're going to do that with our logger,
not with format print or

161
00:12:13.041 --> 00:12:18.641
with print, okay, so
this is much better than format print.

162
00:12:18.641 --> 00:12:20.930
We typically in production,

163
00:12:20.930 --> 00:12:25.697
we don't use format print to
send messages, we use a logger.

164
00:12:25.697 --> 00:12:29.640
Then if you want that logger to
send messages to the console, okay,

165
00:12:29.640 --> 00:12:30.617
it's up to you.

166
00:12:30.617 --> 00:12:35.220
But the idea is that later you can change
that with the server side login system or

167
00:12:35.220 --> 00:12:35.917
whatever.

168
00:12:35.917 --> 00:12:41.596
Now if I save this, again,
I've just saved this,

169
00:12:41.596 --> 00:12:47.804
the problem that I still have
is if my server is running,

170
00:12:47.804 --> 00:12:54.561
it's not taking that new part
because I need to install air.

171
00:12:54.561 --> 00:12:58.418
By the way, if you are used to Nodemon,
you can also use Nodemon as well.

172
00:12:58.418 --> 00:13:02.287
You need to pass some arguments to tell
them that you're not expecting child

173
00:13:02.287 --> 00:13:03.686
script files but go files.

174
00:13:03.686 --> 00:13:07.496
But Nodemon can also be
useful in this case.

175
00:13:07.496 --> 00:13:12.767
But to use Nodemon, you also need to have
NPM and Node.js installing your system.

176
00:13:12.767 --> 00:13:16.764
So it's completely separated from Go,
okay?

177
00:13:16.764 --> 00:13:19.300
Anyway, do you have any
question at this point?

178
00:13:19.300 --> 00:13:24.284
&gt;&gt; Speaker 2: Can you explain the import
path for this logger that we imported,

179
00:13:24.284 --> 00:13:29.269
front end masters.com reeling
logger cuz I'm just confused cuz

180
00:13:29.269 --> 00:13:33.910
that's not where it is locally for
the file that we created.

181
00:13:33.910 --> 00:13:36.643
&gt;&gt; Maximiliano Firtman: Okay,
let's talk about that, so

182
00:13:36.643 --> 00:13:40.613
the question is about
importing other packages.

183
00:13:40.613 --> 00:13:45.094
So actually, in Go, we have modules,
let's say your project, and

184
00:13:45.094 --> 00:13:48.051
then inside the module, you have packages.

185
00:13:48.051 --> 00:13:53.025
What's a package, files in a folder
that they start with the package keyword

186
00:13:53.025 --> 00:13:55.560
at the top with the name of the package.

187
00:13:55.560 --> 00:14:00.498
So every file in the folder
logger that have package logger

188
00:14:00.498 --> 00:14:03.027
are part of the same package.

189
00:14:03.027 --> 00:14:08.167
When you are in main.go, you're in the
main package, not in the logger package.

190
00:14:08.167 --> 00:14:12.352
So even if it's part of your module,

191
00:14:12.352 --> 00:14:15.997
you have to import your files and

192
00:14:15.997 --> 00:14:22.072
importing your files needs
kind of an absolute URL and

193
00:14:22.072 --> 00:14:25.587
it's the name of your module.

194
00:14:25.587 --> 00:14:30.226
And where this is coming from,
it's coming here from go.mod.

195
00:14:30.226 --> 00:14:33.445
So it's the name of your module,
forward slash,

196
00:14:33.445 --> 00:14:37.829
the name of the package you're
importing from that module, okay?

197
00:14:37.829 --> 00:14:43.005
The other imports that we have here
are actually system packages from go,

198
00:14:43.005 --> 00:14:46.261
like they are part of
the standard library, so

199
00:14:46.261 --> 00:14:51.370
that's why they don't need that full path,
okay, does it make sense?

200
00:14:51.370 --> 00:14:52.187
&gt;&gt; Speaker 2: Thank you.

201
00:14:52.187 --> 00:14:55.935
&gt;&gt; Maximiliano Firtman: So later,
we will start using other modules as well,

202
00:14:55.935 --> 00:14:58.195
like community based modules.

203
00:14:58.195 --> 00:15:03.055
In that case, we will be importing
from other modules as well,

204
00:15:03.055 --> 00:15:05.714
remember that it looks like a URL,

205
00:15:05.714 --> 00:15:10.223
that's kind of a pattern in Go,
but it's not mandatory.

206
00:15:10.223 --> 00:15:14.648
And of course, no one is validating
that that URL actually exists.

207
00:15:14.648 --> 00:15:19.279
Typically, is the name of your company,
or sometimes you use GitHub URL, so

208
00:15:19.279 --> 00:15:24.267
github.com/ like a real URL or sometimes
it's a real one, sometimes it's not,

209
00:15:24.267 --> 00:15:26.279
that's the name of your module.

210
00:15:26.279 --> 00:15:31.201
And remember that in Go,
when you are importing a package,

211
00:15:31.201 --> 00:15:36.326
you are importing everything
that the package has exported.

212
00:15:36.326 --> 00:15:41.814
Does anyone remember how
do you export things in Go?

213
00:15:41.814 --> 00:15:43.133
&gt;&gt; Speaker 3: Capital letter.

214
00:15:43.133 --> 00:15:48.337
&gt;&gt; Maximiliano Firtman: Capital letter, so
everything that in the package starts with

215
00:15:48.337 --> 00:15:54.731
a capital letter, such as logger here or
new logger, is actually exported.

216
00:15:54.731 --> 00:15:59.594
So if I create another function
that is with lowercase

217
00:15:59.594 --> 00:16:05.006
letter is not exported and
only the same package can use it.

218
00:16:05.006 --> 00:16:10.078
That applies to variables,
constants, functions,

219
00:16:10.078 --> 00:16:14.498
structures, okay,
just as an overview of Go.

220
00:16:14.498 --> 00:16:18.164
Okay, cool, well,
now that we have a logger,

221
00:16:18.164 --> 00:16:23.219
we can start building the rest of
the parts in our back end, okay?

222
00:16:23.219 --> 00:16:28.028
We did that again beforehand, so we are
ready to send messages to that logger, and

223
00:16:28.028 --> 00:16:31.790
we will use it because at one point
we will get errors, okay, and

224
00:16:31.790 --> 00:16:34.809
we will use that logger to
actually find the error.

