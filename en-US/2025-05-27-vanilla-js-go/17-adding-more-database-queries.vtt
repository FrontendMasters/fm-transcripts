WEBVTT

1
00:00:00.000 --> 00:00:02.931
&gt;&gt; Maximiliano Firtman: We could
finish the MovieRepository

2
00:00:02.931 --> 00:00:07.854
with the rest of the services
before start working with HTML.

3
00:00:07.854 --> 00:00:12.354
So now that we do have some services
up and running, we are ready to start

4
00:00:12.354 --> 00:00:17.090
working in the client, actually finally
seeing something on the screen.

5
00:00:17.090 --> 00:00:21.369
Go so far everything was
actually really abstract, okay?

6
00:00:23.788 --> 00:00:29.484
&gt;&gt; Maximiliano Firtman: So to finish
a repository, we can go and just copy and

7
00:00:29.484 --> 00:00:34.403
paste the rest of
the queries that we have, so

8
00:00:34.403 --> 00:00:37.516
it's in the readme basics.

9
00:00:37.516 --> 00:00:43.800
So if you get here, basis,
finish the MovieRepository.

10
00:00:43.800 --> 00:00:47.439
I can just copy and paste everything,

11
00:00:47.439 --> 00:00:51.884
or just in case,
I will just get what's left.

12
00:00:51.884 --> 00:00:55.802
So I have GetMovieByID,

13
00:00:55.802 --> 00:01:02.524
search movies by name, and get all Genre.

14
00:01:02.524 --> 00:01:05.726
Also I have fetch movie relations,
so let's copy everything.

15
00:01:05.726 --> 00:01:10.740
Also I may need to adjust a little
bit some variables because

16
00:01:10.740 --> 00:01:15.465
maybe I spell something different so
we can solve that.

17
00:01:15.465 --> 00:01:18.509
So MovieRepository.

18
00:01:18.509 --> 00:01:21.644
And I will paste the rest of the services.

19
00:01:21.644 --> 00:01:22.960
So let's try to analyze it.

20
00:01:22.960 --> 00:01:25.383
GetMovieByID, is actually
pretty straightforward.

21
00:01:25.383 --> 00:01:26.340
It's not a big deal.

22
00:01:26.340 --> 00:01:30.125
Here, it's important
to use an argument and

23
00:01:30.125 --> 00:01:34.913
not concatenate what's coming
from the client, okay?

24
00:01:34.913 --> 00:01:35.988
This is really important.

25
00:01:35.988 --> 00:01:39.744
It's just one movie, so
it's just scanning one movie.

26
00:01:39.744 --> 00:01:41.106
Doing something else.

27
00:01:41.106 --> 00:01:47.106
Something that is new here is that it's
also fetching other related data, okay?

28
00:01:47.106 --> 00:01:48.535
And we will see what is that.

29
00:01:48.535 --> 00:01:52.773
So because now we don't just
need the data from the movie,

30
00:01:52.773 --> 00:01:56.248
when we get the details
we need all the details.

31
00:01:56.248 --> 00:02:02.155
That's including the actors,
the full cast or the keywords,

32
00:02:02.155 --> 00:02:07.733
and that needs to make more
queries to other tables as well.

33
00:02:07.733 --> 00:02:08.776
That's what we're doing.

34
00:02:08.776 --> 00:02:12.079
We don't need that when
we are getting the list,

35
00:02:12.079 --> 00:02:15.554
we are just getting the basic metadata for
movies.

36
00:02:15.554 --> 00:02:19.950
So search movies, my name this has more
arguments than the one that I used.

37
00:02:19.950 --> 00:02:25.286
And also receiving an order,
so it can be ordered by score,

38
00:02:25.286 --> 00:02:30.753
by name, by date, or
the default one by popularity, okay?

39
00:02:30.753 --> 00:02:37.138
And you can see I'm defining what's
the SQL order that I should use later.

40
00:02:37.138 --> 00:02:41.374
And also I'm receiving a genre for
filtering.

41
00:02:41.374 --> 00:02:45.297
The idea is that I can search for
unknown Batman movies, but

42
00:02:45.297 --> 00:02:47.583
only I want comedy Batman movies.

43
00:02:47.583 --> 00:02:52.873
Maybe I will get the one from the 60s
that was kind of a comedy movie, right?

44
00:02:52.873 --> 00:02:54.207
So that's idea.

45
00:02:54.207 --> 00:03:01.063
So I'm getting that, and
why do I have an asterisk on an integer?

46
00:03:01.063 --> 00:03:04.279
And if I don't give you any extra info,

47
00:03:04.279 --> 00:03:08.481
why do you think there is
an asterisk on an integer?

48
00:03:10.668 --> 00:03:12.630
&gt;&gt; Maximiliano Firtman: Anyone?

49
00:03:12.630 --> 00:03:14.182
&gt;&gt; Speaker 2: It's nullable.

50
00:03:14.182 --> 00:03:18.186
&gt;&gt; Maximiliano Firtman: It's nullable,
exactly, that means it's optional.

51
00:03:18.186 --> 00:03:22.412
So when you see that in the signature,
it means maybe it's optional, so

52
00:03:22.412 --> 00:03:23.810
maybe it's not there.

53
00:03:23.810 --> 00:03:28.652
So that's why here I'm actually
verifying if I do have it, okay?

54
00:03:28.652 --> 00:03:32.165
And based on that,
I'm adding a sub query, okay?

55
00:03:32.165 --> 00:03:36.957
Checking how many movie
genre records do I have for

56
00:03:36.957 --> 00:03:42.204
that movie, and that genre,
I need to be exactly one,

57
00:03:42.204 --> 00:03:46.102
because, remember, it's end to end.

58
00:03:46.102 --> 00:03:49.425
The query is actually using ILike,

59
00:03:49.425 --> 00:03:54.632
that in case you haven't
played with Postgres before,

60
00:03:54.632 --> 00:03:59.505
ILike is similar to like
that's available in NSQL,

61
00:03:59.505 --> 00:04:02.402
but case insensitive, okay?

62
00:04:02.402 --> 00:04:06.370
So that's ILike, case insensitive.

63
00:04:06.370 --> 00:04:09.375
So this is the same code.

64
00:04:09.375 --> 00:04:14.671
GetAllGenre, it's just getting all
the genres, nothing important.

65
00:04:14.671 --> 00:04:20.180
And fetchMovieRelation, it's trying to
get actors, keywords for a movie, okay?

66
00:04:20.180 --> 00:04:24.156
Making all the other esthetics and
actually filling the models.

67
00:04:24.156 --> 00:04:27.479
So creating the radio factor,
or the slice of factor,

68
00:04:27.479 --> 00:04:31.323
actually, the slice of genre,
the slice of keywords, okay?

69
00:04:31.323 --> 00:04:34.585
And attaching that to the movie.

70
00:04:34.585 --> 00:04:41.112
To be honest, you can make everything here
in one large SQL query with Postgres.

71
00:04:41.112 --> 00:04:47.987
So Postgres lets you return
arrays with subqueries.

72
00:04:47.987 --> 00:04:53.125
So it's possible to make a large query and
get everything from a movie,

73
00:04:53.125 --> 00:04:57.679
including data from other tables or
end-to-end relations.

74
00:04:57.679 --> 00:05:02.994
The problem is that it's a huge query,
it's faster to execute,

75
00:05:02.994 --> 00:05:06.294
but also more difficult to understand.

76
00:05:06.294 --> 00:05:11.002
So we are losing clean code at that point,
so

77
00:05:11.002 --> 00:05:15.216
that's why I kept it like this, okay?

78
00:05:15.216 --> 00:05:16.686
So this is a repository,

79
00:05:16.686 --> 00:05:20.326
the only person that I have to
actually make everything work.

80
00:05:20.326 --> 00:05:26.051
Work right now is that
maybe the interfaces,

81
00:05:26.051 --> 00:05:31.173
I need to uncomment this, like that, so

82
00:05:31.173 --> 00:05:36.004
now, I think everything is working.

83
00:05:36.004 --> 00:05:43.394
So before using these new services I also
need to register those handlers, okay?

84
00:05:43.394 --> 00:05:46.273
So I need to register those handlers.

85
00:05:46.273 --> 00:05:50.272
So before finishing the handlers,
something that we haven't tested yet

86
00:05:50.272 --> 00:05:51.118
is the logger.

87
00:05:51.118 --> 00:05:52.647
So is the logger working?

88
00:05:52.647 --> 00:05:55.884
So something quick that
we can do is remember,

89
00:05:55.884 --> 00:05:58.544
here we are initializing the logger.

90
00:05:58.544 --> 00:06:03.830
So at any time we can say here for
example,

91
00:06:03.830 --> 00:06:09.736
take that log instance and
try to log an error.

92
00:06:09.736 --> 00:06:14.979
So, we can log a message like
hello from the error system,

93
00:06:14.979 --> 00:06:20.331
and we need to pass an error
actually we can say nill for now.

94
00:06:20.331 --> 00:06:25.518
So if I say this, I don't need to do
anything like I don't need to run

95
00:06:25.518 --> 00:06:31.527
anything, because that code will be
executed through the main call, right?

96
00:06:31.527 --> 00:06:35.208
Because initialized logger is being
executed through the main call.

97
00:06:35.208 --> 00:06:39.383
So now if I go to movie.log,
I can see that message there,

98
00:06:39.383 --> 00:06:45.112
hello from the arrow system and nil,
because we didn't pass any error, okay?

99
00:06:45.112 --> 00:06:50.031
So that object is the one
that we are passing through.

