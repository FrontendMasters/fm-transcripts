WEBVTT

1
00:00:00.000 --> 00:00:02.907
&gt;&gt; Maximiliano Firtman: Let's
start talking about the project.

2
00:00:02.907 --> 00:00:05.754
You have already seen sneak peek,
but it looks like this.

3
00:00:05.754 --> 00:00:07.546
Okay, so we have movies.

4
00:00:07.546 --> 00:00:09.610
So that's the whole idea.

5
00:00:09.610 --> 00:00:14.653
We have a database of movies, and
we will work with those movies.

6
00:00:14.653 --> 00:00:19.409
We can filter, we can search,
we can mark a movie as a favorite, and

7
00:00:19.409 --> 00:00:22.672
for that,
we will need to have a user account.

8
00:00:22.672 --> 00:00:29.097
So we have logging, we have registration,
and the whole flow for that process.

9
00:00:29.097 --> 00:00:33.609
For the details,
we are going to be also creating some web

10
00:00:33.609 --> 00:00:37.933
components that will render
the details of the movie,

11
00:00:37.933 --> 00:00:42.363
including, for example,
a video embed from YouTube.

12
00:00:42.363 --> 00:00:47.276
So we will see there how to create
the web component that we can reuse

13
00:00:47.276 --> 00:00:50.367
many times when you have YouTube movies.

14
00:00:50.367 --> 00:00:54.048
And of course, this is just
downloading the data from the backend.

15
00:00:54.048 --> 00:00:58.330
And the backend is downloading
the data from the database.

16
00:00:58.330 --> 00:01:01.820
So we actually will see all the flow and
everything.

17
00:01:01.820 --> 00:01:05.013
That we will be building
to make that work.

18
00:01:05.013 --> 00:01:08.590
Regarding the technologies
that we will be using,

19
00:01:08.590 --> 00:01:13.510
we have already mentioned a couples,
but the backend will be just go.

20
00:01:13.510 --> 00:01:16.180
The database will be Postgres, but

21
00:01:16.180 --> 00:01:20.811
the idea is that we're going to
see how to think future proof.

22
00:01:20.811 --> 00:01:25.597
That means that if, in the future,
we want to change the data storage and

23
00:01:25.597 --> 00:01:30.630
we want to use MongoDB, is that
a completely different storage mechanism?

24
00:01:30.630 --> 00:01:34.638
Or if you want to change
Postgres with another database,

25
00:01:34.638 --> 00:01:37.738
we're going to see how
to think about that.

26
00:01:37.738 --> 00:01:41.474
Even if you're not going to
create a MongoDB database.

27
00:01:41.474 --> 00:01:46.131
This days, or today at least,
we will prepare the code with some

28
00:01:46.131 --> 00:01:51.238
design patterns, so we will be easy
in the future to make that change.

29
00:01:51.238 --> 00:01:54.659
Okay, so
part of today's idea is to see and

30
00:01:54.659 --> 00:01:59.036
think about the architectural
design patterns when we

31
00:01:59.036 --> 00:02:04.001
are building an app that will
make that app More future proof.

32
00:02:04.001 --> 00:02:06.507
Because in the future
everything will change.

33
00:02:06.507 --> 00:02:08.370
There are things are changing.

34
00:02:08.370 --> 00:02:11.503
Maybe we change providers.

35
00:02:11.503 --> 00:02:14.914
Maybe if you're doing an app for
a client, for a customer,

36
00:02:14.914 --> 00:02:17.714
the client is changing
something internally and

37
00:02:17.714 --> 00:02:22.573
now they want to use a different database
storage, our app should be ready for that.

38
00:02:22.573 --> 00:02:27.932
Okay, so for the front end, HTML,
CSS, vanilla JavaScript, so no React,

39
00:02:27.932 --> 00:02:33.209
no Angular, no Bucha, yes, no Next.js,
just plain web technologies for

40
00:02:33.209 --> 00:02:37.267
the communication between
the front end and the back end.

41
00:02:37.267 --> 00:02:40.430
We're going to just use JSON,
restful, APIs.

42
00:02:40.430 --> 00:02:42.331
There are other options as well.

43
00:02:42.331 --> 00:02:47.270
GraphQL and other protocols,
but we will be focusing on

44
00:02:47.270 --> 00:02:52.312
the basics of the web,
like this is kind of vanilla web but

45
00:02:52.312 --> 00:02:57.357
we are using, these days to
communicate the front end and

46
00:02:57.357 --> 00:03:02.111
the back end, just JSON and
using the basics of HTTP.

47
00:03:02.111 --> 00:03:05.743
For example, in that case,
we have the verb get, post,

48
00:03:05.743 --> 00:03:09.693
delete, put, and also we have
the status code as a protocol.

49
00:03:09.693 --> 00:03:11.497
We will see that later.

50
00:03:11.497 --> 00:03:16.909
But for example, if you are searching for
a movie and the movie does not exist,

51
00:03:16.909 --> 00:03:22.086
the server will respond with the 404
using the HTTP protocol directly.

52
00:03:22.086 --> 00:03:27.036
And the data will be transported
using just JSON, okay?

53
00:03:27.036 --> 00:03:28.547
That's the idea.

54
00:03:28.547 --> 00:03:30.640
So in terms of best practices,

55
00:03:30.640 --> 00:03:34.589
we are going to be building
a single-page applications.

56
00:03:34.589 --> 00:03:36.252
We will use also repository.

57
00:03:36.252 --> 00:03:42.723
This is the pattern that will let us
change data sources in the future easily.

58
00:03:42.723 --> 00:03:47.802
Again, if from Postgres, we want to
change it with MongoDB, well, repository

59
00:03:47.802 --> 00:03:52.298
is the one that will let us do that,
and we will see how to do that with Go.

60
00:03:52.298 --> 00:03:56.429
We will try to use clean
code as clean as possible.

61
00:03:56.429 --> 00:04:00.139
That means sometimes we
need to make decisions, and

62
00:04:00.139 --> 00:04:05.702
we will decide on the cleanest solution,
and with that I mean maybe not the most

63
00:04:05.702 --> 00:04:10.875
performance solution but the one
that feels easy to understand, okay?

64
00:04:10.875 --> 00:04:15.704
So we are we're building this let's say
this is our first full stack project

65
00:04:15.704 --> 00:04:17.145
that we are creating.

66
00:04:17.145 --> 00:04:22.258
So our goal is to understand the project
to keep it maintainable for the future.

67
00:04:22.258 --> 00:04:25.385
And sometimes,
if you just focus on performance,

68
00:04:25.385 --> 00:04:30.257
you do sometimes dirty tricks in your code
that when you look at that, you said,

69
00:04:30.257 --> 00:04:32.679
I don't understand what's going on.

70
00:04:32.679 --> 00:04:35.707
So that's for
the another step in the future.

71
00:04:35.707 --> 00:04:40.105
No frameworks as I mentioned before,
no frameworks server side,

72
00:04:40.105 --> 00:04:41.997
no frameworks client side.

73
00:04:41.997 --> 00:04:46.569
In terms of libraries, so
libraries are like smaller things,

74
00:04:46.569 --> 00:04:52.193
we will try to keep external libraries
to the minimum, mostly on the server.

75
00:04:52.193 --> 00:04:57.016
On the client, maybe we won't use in
this course any libraries, but for

76
00:04:57.016 --> 00:05:01.536
the server, for example,
when we will be making authentication.

77
00:05:01.536 --> 00:05:03.682
When you do decrypt the password, and

78
00:05:03.682 --> 00:05:07.720
making decryption like low-level
manually doesn't make any sense.

79
00:05:07.720 --> 00:05:12.142
We don't want to reinvent the wheel on
things that are not really important for

80
00:05:12.142 --> 00:05:13.223
building the app.

81
00:05:13.223 --> 00:05:18.098
So in that case, we will use micro library
specifically for that from the community,

82
00:05:18.098 --> 00:05:20.670
from the go community, our app, actually,

83
00:05:20.670 --> 00:05:24.076
you saw that in action is really
fast to execute and render.

84
00:05:24.076 --> 00:05:28.685
So that's one of the greatest
advantage of doing everything with

85
00:05:28.685 --> 00:05:32.808
Vanilla JavaScript is really
fast to execute and render.

86
00:05:32.808 --> 00:05:33.999
Also to deploy,

87
00:05:33.999 --> 00:05:39.542
because we want Neil to compile every
time we make a change in the front-end.

88
00:05:39.542 --> 00:05:44.035
Of course, Go is a compiled language,
so when we are making changes in

89
00:05:44.035 --> 00:05:49.079
the server we will need to compile, but
actually, Go compile it really fast.

90
00:05:49.079 --> 00:05:52.504
So compare will compile
an Angular application or

91
00:05:52.504 --> 00:05:56.904
an extra yes application that
sometimes it can take a minute or so

92
00:05:56.904 --> 00:06:00.826
every time you deploy,
that this actually pretty fast.

93
00:06:00.826 --> 00:06:02.609
So our deploy time.

94
00:06:02.609 --> 00:06:05.300
It's around two seconds.

95
00:06:05.300 --> 00:06:08.045
So every time we make a change,
it's two, three seconds.

96
00:06:08.045 --> 00:06:13.831
We are ready to try that compared with
other solutions that are much slower.

97
00:06:13.831 --> 00:06:17.992
So, keeping the code easy to
understand is one of the goals.

98
00:06:17.992 --> 00:06:22.696
And also, we will use an idea that is
coming from the JavaScript world that is

99
00:06:22.696 --> 00:06:23.809
not actually Go.

100
00:06:23.809 --> 00:06:28.639
It's environmental variables,
so in an environmental file.

101
00:06:28.639 --> 00:06:33.422
So actually, you can create
environmental variables in the operating

102
00:06:33.422 --> 00:06:37.805
systems system and read it from Go,
but it's difficult to do that

103
00:06:37.805 --> 00:06:42.685
from a developer's point of view,
we need to set up a variable in the OS.

104
00:06:42.685 --> 00:06:49.890
Sometimes when we are coming from the web
world, we like the dom.env files.

105
00:06:49.890 --> 00:06:54.184
Well, we're going to
use a micro library for

106
00:06:54.184 --> 00:06:58.259
Go that actually simulates the same idea.

107
00:06:58.259 --> 00:07:02.592
In case you haven't heard about.m files,
don't worry, we will see those later.

108
00:07:02.592 --> 00:07:06.701
But actually, for example,
for setting passwords or

109
00:07:06.701 --> 00:07:12.416
our database logging, a script and
everything will be stored in that file,

110
00:07:12.416 --> 00:07:15.293
instead of hard-coding those in Go.

111
00:07:15.293 --> 00:07:19.034
So for the database,
we will be using PostgreSQL,

112
00:07:19.034 --> 00:07:22.428
your own installation,
full or with Docker.

113
00:07:22.428 --> 00:07:25.255
We won't cover that part too much.

114
00:07:25.255 --> 00:07:29.124
But in case you have a PostgreSQL database
locally and you wanna use that one, or

115
00:07:29.124 --> 00:07:32.609
you know how to install that,
it's not a big deal anyway to install it.

116
00:07:32.609 --> 00:07:36.274
You can do that, but if not,
you can use a cloud-based provider.

117
00:07:36.274 --> 00:07:38.586
That's probably the fastest solution for
today.

118
00:07:38.586 --> 00:07:42.151
There are many providers out there.

119
00:07:42.151 --> 00:07:47.139
Even with a free tier,
some that you can start using

120
00:07:47.139 --> 00:07:50.505
these days is Superbase or Aiven.

121
00:07:50.505 --> 00:07:51.910
Here we have the urls.

122
00:07:51.910 --> 00:07:56.782
We will see later you create an account,
you create the new instance of a database,

123
00:07:56.782 --> 00:08:00.262
and you will get the string to
connect to that database, and

124
00:08:00.262 --> 00:08:02.987
later we will see where
to insert that string.

125
00:08:02.987 --> 00:08:05.036
And see if it's working.

126
00:08:05.036 --> 00:08:06.983
Neon is another one.

127
00:08:06.983 --> 00:08:12.055
So all these cloud-based providers,
they have a free tire that typically

128
00:08:12.055 --> 00:08:16.412
they will give you at least 500
megabytes for your database.

129
00:08:16.412 --> 00:08:20.256
Our database will be around 40,
45 megabytes.

130
00:08:20.256 --> 00:08:23.144
The free tire will be pretty
good enough and also for

131
00:08:23.144 --> 00:08:26.786
the traffic that we are going to
be using is gonna be pretty good.

132
00:08:26.786 --> 00:08:31.741
Also, you can use AWS,
Amazon Web Services, Azure,

133
00:08:31.741 --> 00:08:35.740
okay, and other like big cloud providers.

134
00:08:35.740 --> 00:08:39.710
The problem with that is that if you
don't have experience with those,

135
00:08:39.710 --> 00:08:43.690
setting up just a database takes a lot
of time, a lot of configuration.

136
00:08:43.690 --> 00:08:47.593
You need to dig into a lot of
bureaucracy into Azure and

137
00:08:47.593 --> 00:08:49.774
AWS to just get the database.

138
00:08:49.774 --> 00:08:54.785
These cloud-based providers
are specifically targeting

139
00:08:54.785 --> 00:08:59.503
just the database, so
it's pretty straightforward.

140
00:08:59.503 --> 00:09:02.880
You log in, you create an account for
free, no credit card.

141
00:09:02.880 --> 00:09:06.750
Nothing, you create an account and
in three clicks,

142
00:09:06.750 --> 00:09:09.505
you get your instance up and running.

143
00:09:09.505 --> 00:09:10.822
Okay, ready to use.

144
00:09:10.822 --> 00:09:14.656
Okay, our pressure will
be called reeling it.

145
00:09:14.656 --> 00:09:19.243
We'll be able to see top and recent
movies that we have in the database.

146
00:09:19.243 --> 00:09:22.870
We're going to be able to
search movies by keyword.

147
00:09:22.870 --> 00:09:27.500
Okay, all the Superman movies,
all the Back to the Future movies.

148
00:09:27.500 --> 00:09:30.069
We can get into the movie details,

149
00:09:30.069 --> 00:09:33.887
including the cast and
other metadata available.

150
00:09:33.887 --> 00:09:38.058
Then we will have user registration.

151
00:09:38.058 --> 00:09:42.166
Just plain registration will be available,
so with username and password.

152
00:09:42.166 --> 00:09:46.096
And we'll see how the flow looks
like on a standard project.

153
00:09:46.096 --> 00:09:50.903
Then user authentication,
that's what we typically known as logging.

154
00:09:50.903 --> 00:09:54.796
Okay, so
registration should create account, and

155
00:09:54.796 --> 00:10:00.727
authentication is to log in the user, and
we will see how to authorize the user.

156
00:10:00.727 --> 00:10:03.026
So once we authenticate the user,

157
00:10:03.026 --> 00:10:07.638
how to keep that user authenticated
across different calls, okay?

158
00:10:07.638 --> 00:10:10.888
So we will see how to do that technically.

159
00:10:10.888 --> 00:10:15.935
Then after you are logged in,
you will be able to mark

160
00:10:15.935 --> 00:10:20.536
movies as favorite and
also in your watch list.

161
00:10:20.536 --> 00:10:25.226
So in that case, you will see, okay,
when I watch this, that movie, and

162
00:10:25.226 --> 00:10:28.115
you will be able to see
that list per account.

163
00:10:28.115 --> 00:10:33.698
Every account we have its own list
of favorites and watch lists.

