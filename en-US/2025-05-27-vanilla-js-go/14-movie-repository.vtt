WEBVTT

1
00:00:00.000 --> 00:00:02.361
So remember that we have error here.

2
00:00:02.361 --> 00:00:07.417
So every time we make we save,
it's actually trying to execute this,

3
00:00:07.417 --> 00:00:10.941
which is a problem when
our code is not yet ready.

4
00:00:10.941 --> 00:00:15.450
So for example,
right now we have an error here, it says,

5
00:00:15.450 --> 00:00:20.709
fail to connect your database,
SQL, unknown driver, postgres.

6
00:00:20.709 --> 00:00:22.131
What's going on here?

7
00:00:22.131 --> 00:00:25.972
It's difficult to see initially, okay?

8
00:00:25.972 --> 00:00:29.789
What's going on, by the way,
does anyone know what's going on?

9
00:00:29.789 --> 00:00:33.692
Case you have experience with go or
with databases in go?

10
00:00:33.692 --> 00:00:38.474
No, the problem is that we
are missing an import, but

11
00:00:38.474 --> 00:00:42.634
VS code is not really
complaining about that.

12
00:00:42.634 --> 00:00:46.958
So, remember that we do have
an external library for

13
00:00:46.958 --> 00:00:51.101
accessing the database,
in this case Postgres.

14
00:00:51.101 --> 00:00:56.907
But the thing is that we are not
importing it and how to import that,

15
00:00:56.907 --> 00:01:03.144
well, actually, if we go to go.mod,
this is the name of the library.

16
00:01:03.144 --> 00:01:06.147
So, I could come here and
import the library,

17
00:01:06.147 --> 00:01:09.766
but if I do that,
is it complaining because it said, but

18
00:01:09.766 --> 00:01:13.240
you are not using anything
from that library, okay?

19
00:01:13.240 --> 00:01:17.402
What's the problem?

20
00:01:17.402 --> 00:01:23.129
The problem is that we need to load,
this driver is a driver for

21
00:01:23.129 --> 00:01:26.885
the database library that we have in go.

22
00:01:26.885 --> 00:01:28.359
So it's a driver, okay?

23
00:01:28.359 --> 00:01:31.582
So we have different drivers for
different databases.

24
00:01:31.582 --> 00:01:36.346
So something that we can do is
to add an underscore there,

25
00:01:36.346 --> 00:01:40.330
which actually will solve the problem,
okay?

26
00:01:40.330 --> 00:01:43.514
This initially, and
now I'm not getting any error, and

27
00:01:43.514 --> 00:01:45.248
now it says serving the files.

28
00:01:45.248 --> 00:01:50.318
So actually it was saying, here forgot
an import, but this is an import

29
00:01:50.318 --> 00:01:54.981
that you won't get automatically or
VS code will never tell you.

30
00:01:54.981 --> 00:02:00.146
It's kind of fun, hidden import,
that import will load that library,

31
00:02:00.146 --> 00:02:04.634
so then the database,
when we are trying to open the database,

32
00:02:04.634 --> 00:02:07.699
remember we do have here database.open.

33
00:02:09.640 --> 00:02:13.770
&gt;&gt; Maximiliano Firtman: When
we are trying here, sql.open,

34
00:02:13.770 --> 00:02:19.450
that's SQL library is trying
to find any provider,

35
00:02:19.450 --> 00:02:25.404
any driver,
that can work with that kind of database.

36
00:02:25.404 --> 00:02:31.541
In this case, we don't have
Postgres support directly from go,

37
00:02:31.541 --> 00:02:38.365
so, we need an external library that
will add that driver to SQL, okay?

38
00:02:38.365 --> 00:02:43.141
So it seems like now it's kind of working,
okay?

39
00:02:43.141 --> 00:02:44.125
Does it make sense?

40
00:02:44.125 --> 00:02:47.689
At least we don't get that error anymore,

41
00:02:47.689 --> 00:02:52.540
the next step is to actually
create the movie repository,

42
00:02:52.540 --> 00:02:59.174
the movie repository is the one that will
actually comply with that interface.

43
00:02:59.174 --> 00:03:04.312
Remember that we didn't have an interface,
we want to actually match that

44
00:03:04.312 --> 00:03:09.459
interface so we can get top movies,
random movies, movies by ID and so on.

45
00:03:09.459 --> 00:03:13.928
So we're going to create
a new file within data,

46
00:03:13.928 --> 00:03:18.727
we can call it movie repository,
repository.go,

47
00:03:18.727 --> 00:03:23.759
and this one will make all
the queries to the database.

48
00:03:23.759 --> 00:03:29.223
I already have that one, ready,
because it's a lot of work,

49
00:03:29.223 --> 00:03:33.949
lots of queries, so
we can go and find this is A, B5,

50
00:03:33.949 --> 00:03:38.596
we have that code, and
then we can analyze the code.

51
00:03:42.108 --> 00:03:43.735
&gt;&gt; Maximiliano Firtman: This
is movie repository, okay?

52
00:03:43.735 --> 00:03:47.503
So let's try to analyze the code here.

53
00:03:47.503 --> 00:03:52.049
Well, first is creating a value and
a structure, movie repository,

54
00:03:52.049 --> 00:03:56.220
remember, this is kind of a class
we are emulating a class in go.

55
00:03:56.220 --> 00:03:58.949
So, it's creating a movie repositor, okay?

56
00:03:58.949 --> 00:04:05.757
The movie repository will need a logger
and then database, what's a logger?

57
00:04:05.757 --> 00:04:09.234
Something we create, remember,
that's a logger that we created before.

58
00:04:09.234 --> 00:04:14.268
So in this case, we are receiving both,
the database connection

59
00:04:14.268 --> 00:04:19.592
that right now is on main and
also the logger that is also main, okay?

60
00:04:19.592 --> 00:04:24.893
This is a factory, remember this
is a design pattern to construct,

61
00:04:24.893 --> 00:04:28.433
in this case, instances of that structure.

62
00:04:28.433 --> 00:04:34.406
So we create a new movie repository
that receives the database and

63
00:04:34.406 --> 00:04:40.813
the logger, and internally it's
just setting a new instance there,

64
00:04:40.813 --> 00:04:44.625
and it's returning a movie repository.

65
00:04:44.625 --> 00:04:49.212
So this is the pattern, this is always the
same, so this is how you create objects

66
00:04:49.212 --> 00:04:52.595
with a factory pattern in go,
why I'm creating a factory?

67
00:04:52.595 --> 00:04:55.469
Because maybe, not for
our particular case, but

68
00:04:55.469 --> 00:04:57.804
maybe you wanna create more than one in.

69
00:04:57.804 --> 00:05:01.733
Instance, more than one
connection to the database.

70
00:05:01.733 --> 00:05:05.958
For some reason, sometimes you need to
connect to two different database on two

71
00:05:05.958 --> 00:05:08.427
different providers or
to the same database.

72
00:05:08.427 --> 00:05:11.810
But for some reason,
you need two or three connections.

73
00:05:11.810 --> 00:05:16.486
So that's why you can create more
than one it's not a singleton,

74
00:05:16.486 --> 00:05:21.502
you could create a singleton if you want,
but in this case it's not and

75
00:05:21.502 --> 00:05:26.792
then we have get the get movie,
we will get one by one, get movies, okay?

76
00:05:26.792 --> 00:05:33.437
And get the movies, we have a get
the movies and get movies, okay?

77
00:05:33.437 --> 00:05:41.261
Are we following in
the interface completely?

78
00:05:41.261 --> 00:05:42.278
Not yet.

79
00:05:42.278 --> 00:05:46.287
So we have, let's look at get movies,

80
00:05:46.287 --> 00:05:50.422
get movies will receive a query, okay?

81
00:05:50.422 --> 00:05:55.122
As a string SQL query,
SQL query, and where returns and

82
00:05:55.122 --> 00:05:59.630
a slice of movie, so
it collection of movie or error.

83
00:05:59.630 --> 00:06:04.555
Remember, this is the pattern, and this is
talking to the database, making the query,

84
00:06:04.555 --> 00:06:07.850
if there is any error,
it will send the error to the logger.

85
00:06:07.850 --> 00:06:13.642
That's our object, the object we created,
and also it's returning the error, okay?

86
00:06:13.642 --> 00:06:17.730
And then we are closing,
the rows is actually

87
00:06:17.730 --> 00:06:22.687
the cursor over the rows,
this is cursor base, okay?

88
00:06:22.687 --> 00:06:27.821
And then we're actually
creating a slice of movies.

89
00:06:27.821 --> 00:06:33.444
Now, this is the our model, and
through, we are using the cursor

90
00:06:33.444 --> 00:06:38.464
to loop through all the records
coming from the database.

91
00:06:38.464 --> 00:06:43.205
And what we are doing is
creating a movie based on

92
00:06:43.205 --> 00:06:48.192
each field that we are getting
from the database.

93
00:06:48.192 --> 00:06:52.797
The database is giving us
a JSON-like object and

94
00:06:52.797 --> 00:06:57.636
we are using our model to
map the data there, okay?

95
00:06:57.636 --> 00:06:59.139
Does it make sense?

96
00:06:59.139 --> 00:07:00.736
That's called a scan.

97
00:07:00.736 --> 00:07:05.153
So with a scan,
we are getting all the fields,

98
00:07:05.153 --> 00:07:11.858
all the values of the field for
the current row, and with that, okay?

99
00:07:11.858 --> 00:07:17.682
We create a movie, so
that's why we are appending

100
00:07:17.682 --> 00:07:21.852
M into our slices of movies, okay?

101
00:07:21.852 --> 00:07:22.681
Does it make sense?

102
00:07:22.681 --> 00:07:27.692
And the ampersand that we are sending
here is like, hey, you know what the ID?

103
00:07:27.692 --> 00:07:32.292
You should put the ID here in
m.id you should put the value of

104
00:07:32.292 --> 00:07:34.135
the title of the movie.

105
00:07:34.135 --> 00:07:38.583
You should put the title inside the title
of this movie and create thing here,

106
00:07:38.583 --> 00:07:43.113
it's like, I create an empty movie,
and then I'm setting the placeholder.

107
00:07:43.113 --> 00:07:46.840
I put it here, put it here, put it here,
put here, that's roughly how that works.

108
00:07:46.840 --> 00:07:50.045
There are other ways to do that,
the simpler way, but

109
00:07:50.045 --> 00:07:54.478
this is just to understand what's
going on, and I'm returning movies.

110
00:07:54.478 --> 00:07:58.783
And now we have get top movies, okay?

111
00:07:58.783 --> 00:08:03.341
That is making a query,
it's selecting all these

112
00:08:03.341 --> 00:08:08.450
fields from movies ordered
by popularity descendant.

113
00:08:08.450 --> 00:08:12.701
We can change that, of course,
and I'm doing a limit, okay?

114
00:08:12.701 --> 00:08:17.846
So later, we will talk about if you're
going to make different pages or

115
00:08:17.846 --> 00:08:22.732
pagination here, but this is a query,
and we are limiting by 20,

116
00:08:22.732 --> 00:08:25.342
we can change that constant later.

117
00:08:25.342 --> 00:08:29.002
So for example,
we can have another function,

118
00:08:29.002 --> 00:08:34.033
forget the random movies,
in this case, it's a similar query,

119
00:08:34.033 --> 00:08:38.715
but instead of ordering our
popularity you order by random.

120
00:08:38.715 --> 00:08:43.033
That is actually a Postgres function and

121
00:08:43.033 --> 00:08:47.224
that will give you 20 random movies.

122
00:08:47.224 --> 00:08:49.027
Okay, does it make sense?

123
00:08:49.027 --> 00:08:54.681
And to actually follow or
implement the interface,

124
00:08:54.681 --> 00:09:01.362
there are more functions that
we need to implement or for now,

125
00:09:01.362 --> 00:09:07.142
we can go here and say,
well, let's comment this for

126
00:09:07.142 --> 00:09:11.912
a while, so we can fill those later, okay?

127
00:09:11.912 --> 00:09:17.503
So we can go step by step,
at least those two are already there.

128
00:09:17.503 --> 00:09:24.696
Quick question for you,
how can I go to my movie repository or

129
00:09:24.696 --> 00:09:28.928
how can I implement the interface,

130
00:09:28.928 --> 00:09:36.845
how can I say that I'm implementing
the interface movie storage?

131
00:09:36.845 --> 00:09:38.176
And this tricky question.

132
00:09:38.176 --> 00:09:40.583
&gt;&gt; Student 1: Has the same methods on it?

133
00:09:40.583 --> 00:09:41.533
&gt;&gt; Maximiliano Firtman: Exactly.

134
00:09:41.533 --> 00:09:46.636
So the quick answer is that
there is no way to say so,

135
00:09:46.636 --> 00:09:53.905
go will automatically assign an interface
type if you have the methods.

136
00:09:53.905 --> 00:10:01.468
So any type with get top movies and
get random movies following this pattern.

137
00:10:01.468 --> 00:10:07.858
So returning those values, we'll
automatically implement this interface,

138
00:10:07.858 --> 00:10:12.639
and then we can use this interface
as a type somewhere else.

139
00:10:12.639 --> 00:10:16.674
Remember, this is an abstraction layer,
so later, we can have different

140
00:10:16.674 --> 00:10:21.233
implementations, right now we have this
one, but later we can create another one.

141
00:10:21.233 --> 00:10:23.500
Okay, does it make sense?

142
00:10:23.500 --> 00:10:28.105
Do you have any questions on big
queries or what we are doing here.

143
00:10:28.105 --> 00:10:31.410
The positional parameter in there,

144
00:10:31.410 --> 00:10:36.213
it's fixed to 20, but
where are you passing that?

145
00:10:36.213 --> 00:10:37.296
Where?

146
00:10:37.296 --> 00:10:39.898
&gt;&gt; Student 2: The dollar sign one, right?

147
00:10:39.898 --> 00:10:41.530
That's a positional parameter?

148
00:10:41.530 --> 00:10:43.790
&gt;&gt; Maximiliano Firtman: This one,
yeah, so let's review that.

149
00:10:43.790 --> 00:10:48.322
So one of the things that
we need to be careful

150
00:10:48.322 --> 00:10:52.977
when we are making
queries is SQL injection,

151
00:10:52.977 --> 00:10:56.792
mostly with SQL-based framework.

152
00:10:56.792 --> 00:10:59.422
So, let's think about this.

153
00:10:59.422 --> 00:11:03.090
So if instead of using dollar sign one,

154
00:11:03.090 --> 00:11:08.204
I will explain that in a second,
I close this string and

155
00:11:08.204 --> 00:11:14.673
then concatenate this with the parameter
that we receive like that.

156
00:11:14.673 --> 00:11:19.938
The problem is that if someone
is injecting a value here,

157
00:11:19.938 --> 00:11:25.422
it can write it's own query for
example, I could, I mean,

158
00:11:25.422 --> 00:11:31.804
if the user is sending you that value,
it can be something like this.

159
00:11:36.724 --> 00:11:37.906
&gt;&gt; Maximiliano Firtman: Delete.

160
00:11:41.008 --> 00:11:42.370
&gt;&gt; Maximiliano Firtman: For example.

161
00:11:42.370 --> 00:11:44.357
So what is this doing?

162
00:11:44.357 --> 00:11:48.477
This is adding, actually,
to make that word,

163
00:11:48.477 --> 00:11:53.215
I should do something like this,
I'm a hacker now, so

164
00:11:53.215 --> 00:11:57.747
this is SQL injection, so
what will happen is that,

165
00:11:57.747 --> 00:12:02.080
this string is going to be replaced there,
okay?

166
00:12:02.080 --> 00:12:08.061
Let's do that, if I put this here,
&gt;&gt; Maximiliano Firtman: This

167
00:12:08.061 --> 00:12:11.351
is the final query that
will actually be executed,

168
00:12:11.351 --> 00:12:15.570
actually the forward lash n is a new line,
so it will be like this.

169
00:12:15.570 --> 00:12:21.546
Actually, yeah, was missing,
I'm not, I need a semicolon,

170
00:12:21.546 --> 00:12:25.768
I don't need a comment,
I need a semicolon.

171
00:12:25.768 --> 00:12:30.113
So, actually, this is now
the query that I'm executing, so,

172
00:12:30.113 --> 00:12:34.143
it's making a select and
after that is deleting the table.

173
00:12:34.143 --> 00:12:38.601
So, if I leave that open, okay?

174
00:12:38.601 --> 00:12:41.838
Of course, the hacker,
I mean the bad actor,

175
00:12:41.838 --> 00:12:46.167
will take some time to try to
understand my structure, okay?

176
00:12:46.167 --> 00:12:50.198
So to solve the problem and avoid, okay?

177
00:12:50.198 --> 00:12:55.159
This then we, instead of
concatenating when we're talking

178
00:12:55.159 --> 00:12:59.551
about values,
we use that are the kind of arguments.

179
00:12:59.551 --> 00:13:06.865
In this case, the SQL library
from go will replace that safely.

180
00:13:06.865 --> 00:13:11.755
Safely means that if this is a string,
right now, I'm not passing a string,

181
00:13:11.755 --> 00:13:14.097
I'm passing default limit, okay?

182
00:13:14.097 --> 00:13:19.576
Default limit is actually a number,
but if it's a string,

183
00:13:19.576 --> 00:13:24.506
so if I pass in like, again,
as before, semicolon,

184
00:13:24.506 --> 00:13:28.778
drop table,
it will just replace it here, but

185
00:13:28.778 --> 00:13:33.291
as a string, so like this,
safely, in quotes.

186
00:13:33.291 --> 00:13:37.193
So it will never be actually,
a SQL command,

187
00:13:37.193 --> 00:13:40.800
it will treat it as a value always, okay?

188
00:13:40.800 --> 00:13:46.596
So from a security point of view, that's
why every time you're making a query and

189
00:13:46.596 --> 00:13:50.964
that query has values inside,
you have to use arguments, and

190
00:13:50.964 --> 00:13:54.414
the arguments are with dollar sign and
a number.

191
00:13:54.414 --> 00:13:59.999
You can have more than one, for example,
Now I could say limit one offset,

192
00:13:59.999 --> 00:14:04.698
that is offset means,
instead of starting from the first one,

193
00:14:04.698 --> 00:14:07.549
I want you to start from the other one.

194
00:14:07.549 --> 00:14:12.237
So I say, draw sign two, and
then I can pass another argument here, so

195
00:14:12.237 --> 00:14:16.865
let me remove this so this was
default limit, and they will say 10.

196
00:14:16.865 --> 00:14:21.470
So now it will start from the 11th, no,

197
00:14:21.470 --> 00:14:25.550
the 10th record actually, okay,

198
00:14:25.550 --> 00:14:30.431
so you can add as many
arguments as you want.

199
00:14:30.431 --> 00:14:37.153
That typically works with most of
the SQL-based libraries, okay?

200
00:14:40.064 --> 00:14:42.145
&gt;&gt; Student 1: Okay, make sense?

201
00:14:42.145 --> 00:14:47.111
&gt;&gt; Student 3: I wonder if
go they have lazy loading.

202
00:14:47.111 --> 00:14:50.900
&gt;&gt; Maximiliano Firtman: What
do you want a lazy load?

203
00:14:50.900 --> 00:14:53.727
&gt;&gt; Student 3: It means
the structure right there, but

204
00:14:53.727 --> 00:14:57.225
you're not going to get
a day until you actually.

205
00:14:57.225 --> 00:14:58.498
&gt;&gt; Maximiliano Firtman: Well, actually,

206
00:14:58.498 --> 00:15:04.066
this is actually lazy load because what we
receive is not like a collection of rows,

207
00:15:04.066 --> 00:15:07.425
it's called rows, but
it's actually a cursor.

208
00:15:07.425 --> 00:15:12.859
So you actually need to move to
the next row to actually grab the data,

209
00:15:12.859 --> 00:15:16.138
So if that's what you meant by lazy load,

210
00:15:16.138 --> 00:15:21.123
I think this is lazy load from
your definition of lazy loading.

211
00:15:21.123 --> 00:15:25.846
Okay, so when you do a query,
what you receive is not the data,

212
00:15:25.846 --> 00:15:30.123
you receive a pointer to
the beginning of the result, but

213
00:15:30.123 --> 00:15:32.818
the data is still in the SQL Server.

214
00:15:32.818 --> 00:15:37.677
So then you move the cursor,
and you're bringing row by row.

215
00:15:40.346 --> 00:15:43.477
&gt;&gt; Maximiliano Firtman: Okay,
that makes sense?

216
00:15:43.477 --> 00:15:45.248
That's how this library works.

217
00:15:45.248 --> 00:15:50.613
Of course, you can use other libraries or
other mechanisms to bring data.

218
00:15:50.613 --> 00:15:52.828
Okay, make sense?

219
00:15:52.828 --> 00:15:55.871
Any other question for now?

220
00:15:55.871 --> 00:16:01.443
No, well,
now we need to finally try to use this,

221
00:16:01.443 --> 00:16:04.626
so I need to go to main.go and

222
00:16:04.626 --> 00:16:09.272
after we are initializing the database,

223
00:16:09.272 --> 00:16:14.340
I need to initialize the repository, okay?

224
00:16:14.340 --> 00:16:19.102
So we're going to initialize our

225
00:16:19.102 --> 00:16:23.359
data repository for movies.

226
00:16:23.359 --> 00:16:28.502
So let's call this movie repo repository,

227
00:16:28.502 --> 00:16:34.340
and we will call our new
movie repository function

228
00:16:34.340 --> 00:16:39.344
that we have, and
we need to pass a database

229
00:16:39.344 --> 00:16:44.634
that we already have,
and the log instance.

230
00:16:44.634 --> 00:16:48.490
And if there is any error,

231
00:16:48.490 --> 00:16:53.749
I should log that saying that failed

232
00:16:53.749 --> 00:16:57.965
to initialize repository.

233
00:16:57.965 --> 00:17:03.523
Now it's complaining because we
are not using it yet, which is okay.

