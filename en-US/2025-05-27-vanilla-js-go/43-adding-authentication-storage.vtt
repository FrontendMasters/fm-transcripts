WEBVTT

1
00:00:00.191 --> 00:00:03.738
&gt;&gt; Maximiliano Firtman: The first thing
that we need is we need to on the back

2
00:00:03.738 --> 00:00:09.397
end, we need to add a dependency, okay,
so we will use bcrypt is the most common

3
00:00:09.397 --> 00:00:14.563
one that will have the hash functions
to quickly hash a password, okay.

4
00:00:14.563 --> 00:00:17.409
Because doing that manually
doesn't make any sense.

5
00:00:17.409 --> 00:00:22.830
So I need to go here now we probably
need to, I can stop the server.

6
00:00:22.830 --> 00:00:25.742
Remember, we are using, in this case,

7
00:00:25.742 --> 00:00:29.778
you can see all those messages
are coming from our logo.

8
00:00:29.778 --> 00:00:34.069
I can control C, or
I can open a new terminal, whatever, and

9
00:00:34.069 --> 00:00:36.691
I will get that particular library.

10
00:00:36.691 --> 00:00:38.516
It's actually pretty quick.

11
00:00:38.516 --> 00:00:42.810
Xan because I already have
it in my computer, but

12
00:00:42.810 --> 00:00:45.753
at least now it's in my go.mod.

13
00:00:45.753 --> 00:00:50.301
So there so I can start using it.

14
00:00:55.211 --> 00:01:00.115
&gt;&gt; Maximiliano Firtman: So the next step
will be actually to add the newest storage

15
00:01:00.115 --> 00:01:03.192
is, let's remember what we have.

16
00:01:03.192 --> 00:01:08.712
In fact, let's go back to our
architecture to see where we are.

17
00:01:08.712 --> 00:01:12.920
So now, actually we have
fully created the diagram,

18
00:01:12.920 --> 00:01:17.875
because now we have the API
service client side, the routers,

19
00:01:17.875 --> 00:01:20.601
the router, the web components.

20
00:01:20.601 --> 00:01:23.758
The user interface that
shows the front end is full,

21
00:01:23.758 --> 00:01:28.664
yeah, there are still some more services
to add, and the back end is also ready.

22
00:01:28.664 --> 00:01:32.662
So now we have the full circuit for
movies.

23
00:01:32.662 --> 00:01:38.709
Now we need to add the full circuit for
accounts, account management.

24
00:01:38.709 --> 00:01:41.791
So we need the model.

25
00:01:41.791 --> 00:01:43.699
We need a model repository.

26
00:01:43.699 --> 00:01:47.706
Remember, the model repository is the one
the storage that is actually talking to

27
00:01:47.706 --> 00:01:48.294
the table.

28
00:01:48.294 --> 00:01:49.932
The tables are already there.

29
00:01:49.932 --> 00:01:52.645
But we need the repository.

30
00:01:52.645 --> 00:01:55.953
The model, I think, is already there,
it's actually pretty simple,

31
00:01:55.953 --> 00:01:56.941
just the model user.

32
00:01:56.941 --> 00:02:01.114
Then we need the handlers for
every web service that we will use.

33
00:02:01.114 --> 00:02:05.900
At least we need two web services,
registration and authentication,

34
00:02:05.900 --> 00:02:09.584
also known as logging,
okay, register and logging.

35
00:02:09.584 --> 00:02:16.271
We need two handlers that will handle
that, talking to the repository.

36
00:02:16.271 --> 00:02:20.788
And then we will need to add the same
thing on the client side, so

37
00:02:20.788 --> 00:02:26.075
we will need the web component for
each page, for the registration form,

38
00:02:26.075 --> 00:02:30.781
for the login form, the routes,
then we will also need the HTML.

39
00:02:30.781 --> 00:02:36.930
I don't know what happened, yeah, okay.

40
00:02:36.930 --> 00:02:40.882
So let's start on the backend first,
and then when the backend is ready,

41
00:02:40.882 --> 00:02:42.872
we will move to the frontend, okay?

42
00:02:42.872 --> 00:02:49.441
Let's start with the model repository.

43
00:02:49.441 --> 00:02:53.256
So to do that,
it's a huge storage actually.

44
00:02:53.256 --> 00:03:00.632
It's not complicated, but brightening
from scratch, it may take an hour or so.

45
00:03:00.632 --> 00:03:05.797
Okay, for registration and logging,
mostly if you want to do it right.

46
00:03:05.797 --> 00:03:12.552
So because for example, registration, you
need to validate that the data is coming.

47
00:03:12.552 --> 00:03:14.788
You need to validate
that the email is valid.

48
00:03:14.788 --> 00:03:19.340
Then you don't want to
register the same user twice.

49
00:03:19.340 --> 00:03:24.888
So you need to check, make a query and see
if the user is already in the system and

50
00:03:24.888 --> 00:03:30.203
reject registration and then you need
to hash the password and then start.

51
00:03:30.203 --> 00:03:34.640
Well, all of that, it's already there,
we will analyze it, okay.

52
00:03:34.640 --> 00:03:40.881
But if you remember from before as
well we created in our back end,

53
00:03:40.881 --> 00:03:45.194
this idea of making the storage agnostic,
so

54
00:03:45.194 --> 00:03:49.974
in the future,
we may wanna change the database.

55
00:03:49.974 --> 00:03:53.948
So that's why we had an interface,
remember.

56
00:03:53.948 --> 00:03:59.129
By the way, I have just realized
that I have a typo here in the name,

57
00:03:59.129 --> 00:04:00.532
and just for fun.

58
00:04:00.532 --> 00:04:05.630
Will it make any
difference defining in Go?

59
00:04:05.630 --> 00:04:06.961
No, really, so

60
00:04:06.961 --> 00:04:12.588
that's why it never came until right
now to my brain that I have a typo.

61
00:04:12.588 --> 00:04:18.156
It says interfaces, like interfaces,
it's not gonna make any difference, okay?

62
00:04:18.156 --> 00:04:23.397
Because the Go works actually,
with the package name, okay?

63
00:04:23.397 --> 00:04:28.183
And then with the things
that you are exporting with

64
00:04:28.183 --> 00:04:33.189
capital letters the file name,
it doesn't matter,

65
00:04:33.189 --> 00:04:36.315
okay, so we have movie storage.

66
00:04:36.315 --> 00:04:41.545
So actually we need to create
now the the other part that

67
00:04:41.545 --> 00:04:48.834
we can call account storage, that we
can also make like an interface, yes.

68
00:04:48.834 --> 00:04:52.714
&gt;&gt; Student 1: Back to packages, really
quick, are there any names facing issues,

69
00:04:52.714 --> 00:04:56.876
like can you call a package go, for
example, or is that can you not do that?

70
00:04:56.876 --> 00:05:00.246
&gt;&gt; Maximiliano Firtman: There are,
there are some names that are keywords,

71
00:05:00.246 --> 00:05:01.554
as in any language.

72
00:05:01.554 --> 00:05:06.628
But actually for the package name,
I don't think I haven't tried to use Go,

73
00:05:06.628 --> 00:05:10.780
I don't think you have a problem
to use Go, so you could use Go.

74
00:05:10.780 --> 00:05:15.930
I don't see why not,
because Go is not really, actually,

75
00:05:15.930 --> 00:05:21.399
Go is a keyword that you use for
go routines to use concurrency.

76
00:05:21.399 --> 00:05:27.310
But I don't think it's gonna mess with the
package name, I'm not sure, to be honest.

77
00:05:27.310 --> 00:05:30.112
I'm not sure why do you wanna do that,
okay?

78
00:05:30.112 --> 00:05:34.708
Anyway, but maybe because you wanna
push the limits, which is fine.

79
00:05:34.708 --> 00:05:38.922
But, yeah, I don't see a use case for
using go as a package name, but

80
00:05:38.922 --> 00:05:40.755
you should be able to do that.

81
00:05:40.755 --> 00:05:46.077
So what I want here,
I want one definition for

82
00:05:46.077 --> 00:05:52.114
each service that I need
from the database, okay?

83
00:05:52.114 --> 00:05:56.349
And then we implement that,
right now with PostgreSQL, but

84
00:05:56.349 --> 00:06:00.595
remember that we can change
that later with other database.

85
00:06:00.595 --> 00:06:02.251
We have them here, it's not a big deal.

86
00:06:02.251 --> 00:06:04.413
I mean, I can write them or
copy and paste them.

87
00:06:04.413 --> 00:06:06.013
It's not really a big deal.

88
00:06:06.013 --> 00:06:08.795
So, we have authentication.

89
00:06:08.795 --> 00:06:13.390
Authenticate that receives true strings,
email and

90
00:06:13.390 --> 00:06:18.700
password, then registration
that has three strings because

91
00:06:18.700 --> 00:06:23.516
it's right now we have only name,
email and password.

92
00:06:23.516 --> 00:06:28.731
Get account details that we may use later
and save collection that we may use later.

93
00:06:28.731 --> 00:06:29.549
What is site collection?

94
00:06:29.549 --> 00:06:33.375
Save a favorite or save a watch list.

95
00:06:33.375 --> 00:06:38.077
Okay, that receives a user and
in the we'll see the the arguments later.

96
00:06:38.077 --> 00:06:45.147
I'm getting an error here with models
because, actually, we don't have the user.

97
00:06:45.147 --> 00:06:47.794
It seems like if I go into models,
I don't have the user model.

98
00:06:47.794 --> 00:06:50.117
So I need to create the user model.

99
00:06:50.117 --> 00:06:54.810
So let's add it, so we need user.go.

100
00:06:54.810 --> 00:06:59.770
This is package models, and
this is going to be pretty simple,

101
00:06:59.770 --> 00:07:03.431
similar to this one, so
not really a big deal.

102
00:07:03.431 --> 00:07:10.886
So type user, okay, it's a structure,
and then we have an ID integer.

103
00:07:10.886 --> 00:07:17.259
It's a good idea to always, as we did
with movies, to add the meta data.

104
00:07:17.259 --> 00:07:22.061
Remember, we use backtick,
then we use JSON colon, and

105
00:07:22.061 --> 00:07:27.074
the name that in this case we
use in the database and in JSON.

106
00:07:27.074 --> 00:07:33.152
So, what's called ID,
then we have name, string, JSON name,

107
00:07:33.152 --> 00:07:38.137
and by the way,
do a spot any problems with that name?

108
00:07:38.137 --> 00:07:41.898
In fact, VS code is finding a problem.

109
00:07:41.898 --> 00:07:43.924
There is a warning here saying, hey.

110
00:07:43.924 --> 00:07:44.679
&gt;&gt; Student 1: Not exported.

111
00:07:44.679 --> 00:07:47.192
&gt;&gt; Maximiliano Firtman: Not exported,
so use N.

112
00:07:47.192 --> 00:07:49.129
That's why we are renaming this here,

113
00:07:49.129 --> 00:07:51.606
because maybe in the JSON
we don't have the name.

114
00:07:51.606 --> 00:07:55.999
If you don't do that, it will work, but

115
00:07:55.999 --> 00:08:02.086
it will expect the database and
the output JSON to use N.

116
00:08:02.086 --> 00:08:03.210
We have email.

117
00:08:07.341 --> 00:08:09.291
&gt;&gt; Maximiliano Firtman: And
password, but remember,

118
00:08:09.291 --> 00:08:13.125
the password is not just a password,
it's a hash password.

119
00:08:13.125 --> 00:08:19.393
It's just, I mean,
doesn't matter for the name.

120
00:08:19.393 --> 00:08:21.099
Actually we can say password.

121
00:08:21.099 --> 00:08:22.648
Let's stay with password only.

122
00:08:22.648 --> 00:08:24.146
I'll explain why in a minute.

123
00:08:24.146 --> 00:08:28.027
Because maybe in the model, we don't
know if it's still hash or not, so

124
00:08:28.027 --> 00:08:30.906
maybe initially it's not hash,
and then we hash it.

125
00:08:30.906 --> 00:08:35.306
It doesn't matter, okay,
so that's the user.

126
00:08:35.306 --> 00:08:38.870
So now my interface works.

127
00:08:38.870 --> 00:08:40.503
So interface is pretty good.

128
00:08:40.503 --> 00:08:44.484
Also, it lets us quickly
understand what we need and

129
00:08:44.484 --> 00:08:48.292
what we're expecting
from the implementation.

130
00:08:48.292 --> 00:08:51.592
So for the implementation, we are going
to create an account repository.

131
00:08:51.592 --> 00:08:53.755
So I have a movie repository.

132
00:08:53.755 --> 00:08:56.749
I need to create an account repository.

133
00:08:56.749 --> 00:09:03.372
You can also call it repository,
user repository.

134
00:09:03.372 --> 00:09:07.489
And this is the one that is huge,
to be honest,

135
00:09:07.489 --> 00:09:14.157
not extremely complicated, but huge,
you can see, okay, a lot of work.

136
00:09:14.157 --> 00:09:19.241
It will take an hour or
maybe so to do it from zero.

137
00:09:19.241 --> 00:09:22.903
So I will just take it there, paste it.

138
00:09:22.903 --> 00:09:26.840
Maybe we need to solve some problems or
names that are different or

139
00:09:26.840 --> 00:09:30.142
things like that, and
then we will analyze it, okay?

140
00:09:30.142 --> 00:09:33.614
So let me first go through the errors.

141
00:09:33.614 --> 00:09:39.338
Yeah, I was expecting password so
I change that,

142
00:09:39.338 --> 00:09:43.848
okay, password, that's one issue.

143
00:09:43.848 --> 00:09:49.051
Then user,
I didn't create the favorites and

144
00:09:49.051 --> 00:09:55.835
I didn't create the collection,
yes, where in my model, okay?

145
00:09:55.835 --> 00:09:59.073
So what's this type of dose?

146
00:09:59.073 --> 00:10:01.982
What do you think?

147
00:10:01.982 --> 00:10:03.842
It's movies.

148
00:10:03.842 --> 00:10:05.225
&gt;&gt; Student 2: Is it Boolean?

149
00:10:05.225 --> 00:10:06.535
&gt;&gt; Maximiliano Firtman: Is it Boolean?

150
00:10:06.535 --> 00:10:07.961
First, it should be a collection.

151
00:10:07.961 --> 00:10:09.660
&gt;&gt; Student 3: It should be
a list of movies, okay.

152
00:10:09.660 --> 00:10:14.592
&gt;&gt; Maximiliano Firtman: So list,
yeah, we need to decide if we want

153
00:10:14.592 --> 00:10:19.667
to use directly like this or
use IDs, okay?

154
00:10:19.667 --> 00:10:22.354
We'll see, we will do this at the end.

155
00:10:22.354 --> 00:10:26.794
So, but it's a watch list, but let's say,
but from a semantic point of view,

156
00:10:26.794 --> 00:10:28.198
it's a slice of movies.

157
00:10:28.198 --> 00:10:32.639
The slice is just an array
with a dynamic size, okay,

158
00:10:32.639 --> 00:10:36.994
we don't know how many,
that's why it's a slice.

159
00:10:36.994 --> 00:10:40.680
Okay, so now I'm, I don't have any errors.

160
00:10:40.680 --> 00:10:43.512
I have a warning there on that string
that it has to do with the logging,

161
00:10:43.512 --> 00:10:44.281
doesn't matter.

162
00:10:44.281 --> 00:10:47.389
So now let's analyze the code.

163
00:10:47.389 --> 00:10:49.929
But you will see it's simple to follow,
but

164
00:10:49.929 --> 00:10:53.989
it takes a lot of time to write from
scratch, I know because I wrote it.

165
00:10:53.989 --> 00:10:57.822
So first, we do have a structure.

166
00:10:57.822 --> 00:11:00.340
Why the structure is not mandatory, but

167
00:11:00.340 --> 00:11:03.089
it's a way to create
some kind of an object.

168
00:11:03.089 --> 00:11:06.645
So create this,
we are creating this account

169
00:11:06.645 --> 00:11:10.866
repository as if it were
an object in other language.

170
00:11:10.866 --> 00:11:12.833
It's not mandatory, okay?

171
00:11:12.833 --> 00:11:15.224
I could just create
functions from the package.

172
00:11:15.224 --> 00:11:19.669
That are not methods of this structure and
it will work anyway.

173
00:11:19.669 --> 00:11:22.675
I'm saving the database and
the logger, why?

174
00:11:22.675 --> 00:11:24.045
Well, the database is straightforward.

175
00:11:24.045 --> 00:11:26.458
We need the database to
talk to the database.

176
00:11:26.458 --> 00:11:30.221
We don't want every repository
to initialize the database.

177
00:11:30.221 --> 00:11:35.416
We are just reusing the same
database connection.

178
00:11:35.416 --> 00:11:40.415
And the logger is to have always
a pointer to that util function that

179
00:11:40.415 --> 00:11:45.144
I have to log my errors,
log my information, so then I can go and

180
00:11:45.144 --> 00:11:48.555
see if something wrong has happened, okay.

181
00:11:48.555 --> 00:11:51.891
This is the constructor, remember,
we don't have constructors in Go.

182
00:11:51.891 --> 00:11:55.490
This is a factory, this is how you
will create a new account repository,

183
00:11:55.490 --> 00:11:57.503
receiving the database and the logger.

184
00:11:57.503 --> 00:11:59.612
This is a normal pattern in Go.

185
00:11:59.612 --> 00:12:03.897
And then we start with the methods,
methods of account repository.

186
00:12:03.897 --> 00:12:06.044
So register, that's the first one.

187
00:12:06.044 --> 00:12:10.404
It receives email, name, email and
password as a string and

188
00:12:10.404 --> 00:12:12.465
returns a bool and an error.

189
00:12:12.465 --> 00:12:16.280
So the bool will be,
it's okay, or it's not okay.

190
00:12:16.280 --> 00:12:20.221
Okay, that's kind of the idea for now.

191
00:12:20.221 --> 00:12:22.579
First, we are validating
basic requirements.

192
00:12:22.579 --> 00:12:25.580
There are a lot of other things
to do here to be honest,

193
00:12:25.580 --> 00:12:27.530
this is a very basic requirement.

194
00:12:27.530 --> 00:12:32.685
I'm just checking that, I do have some
data, but I should check if the email

195
00:12:32.685 --> 00:12:37.296
looks like an email, if the name
has a minimum size and so on, okay.

196
00:12:37.296 --> 00:12:41.531
So there are still more things to do here,
but

197
00:12:41.531 --> 00:12:47.000
I wanna keep this course within size,
like a proper size.

198
00:12:47.000 --> 00:12:50.616
So let's add more validation.

199
00:12:50.616 --> 00:12:54.712
So if we are not passing the validation,
look at this,

200
00:12:54.712 --> 00:12:58.104
I'm creating, this is a pretty common way.

201
00:12:58.104 --> 00:13:01.670
I'm creating different constants for
different errors,

202
00:13:01.670 --> 00:13:04.600
so then I know exactly
which error has happened.

203
00:13:04.600 --> 00:13:08.719
So in this case, I'm returning with false,
so that bool, so

204
00:13:08.719 --> 00:13:12.225
I'm saying, No,
we couldn't register the user.

205
00:13:12.225 --> 00:13:13.950
And this is the error.

206
00:13:13.950 --> 00:13:17.073
These errors, that are actually
at the bottom of the file.

207
00:13:17.073 --> 00:13:23.154
That's a pretty common pattern where
I'm creating all these variables for

208
00:13:23.154 --> 00:13:27.441
all the possible errors
that I might trigger, okay.

209
00:13:27.441 --> 00:13:32.233
So going back, I'm sorry,
because I'm scrolling a lot here.

210
00:13:32.233 --> 00:13:33.605
It's a long file.

211
00:13:33.605 --> 00:13:37.763
So then I will check if the user
already exists by email,

212
00:13:37.763 --> 00:13:39.984
that's our key here, okay?

213
00:13:39.984 --> 00:13:44.947
So I'm making a query, and
I'm selecting if I have one user at

214
00:13:44.947 --> 00:13:48.956
least with that email,
and if it already exists,

215
00:13:48.956 --> 00:13:53.456
I'm sending a message saying,
hey, already exists.

216
00:13:53.456 --> 00:13:59.036
Also we can have generic error
because maybe I couldn't make a query.

217
00:13:59.036 --> 00:14:03.589
The database is complaining that
in that case it's a generic error.

218
00:14:03.589 --> 00:14:06.349
I'm actually sending the error that
I'm getting from the database.

219
00:14:06.349 --> 00:14:08.511
It's not my error, okay.

220
00:14:08.511 --> 00:14:10.774
Then I'm hashing the password, actually,

221
00:14:10.774 --> 00:14:14.355
it's pretty simple to hash the password
when you're using a library.

222
00:14:14.355 --> 00:14:17.407
We call to that,
we call that Bcrypt library.

223
00:14:17.407 --> 00:14:20.006
That's the one that we
added in our project.

224
00:14:20.006 --> 00:14:22.743
We generate the hash from a password.

225
00:14:22.743 --> 00:14:24.656
We pass the password instead of a string.

226
00:14:24.656 --> 00:14:26.604
We need to pass bytes.

227
00:14:26.604 --> 00:14:32.201
So that's how you would call one of these
conversion functions to a slice of byte.

228
00:14:32.201 --> 00:14:36.854
And we use some options, so there are some
options that you can define here in

229
00:14:36.854 --> 00:14:39.193
terms of cost, default, max or min.

230
00:14:39.193 --> 00:14:44.229
This is the CPU cycles that you will use
to make a more like complicated hash or

231
00:14:44.229 --> 00:14:47.305
a simpler hash, okay, something like that.

232
00:14:47.305 --> 00:14:50.519
And well, if we fail, we do this.

233
00:14:50.519 --> 00:14:53.106
Of course, we can do this quicker,

234
00:14:53.106 --> 00:14:58.043
just by removing all these ifs
the premise that if we do that, okay.

235
00:14:58.043 --> 00:15:03.431
If something goes wrong,
we will miss the moment of what happened,

236
00:15:03.431 --> 00:15:09.873
and we will miss the opportunity to log
the problem and debug the problem, okay?

237
00:15:09.873 --> 00:15:14.994
So that's why, when you have things like
registration or user authentication, it's

238
00:15:14.994 --> 00:15:19.579
really long because we actually really
wanna spot on every possible problem.

239
00:15:19.579 --> 00:15:22.824
And I'm saying every as kind of a dream,

240
00:15:22.824 --> 00:15:27.980
at least as much problems as possible,
because there are always

241
00:15:27.980 --> 00:15:33.057
more problems that may arise
that we didn't consider, okay.

242
00:15:33.057 --> 00:15:38.285
Well, if everything is okay, we are going
to try to insert the new user, okay,

243
00:15:38.285 --> 00:15:43.534
and of course, the database can complain,
so maybe it's not inserting that.

244
00:15:43.534 --> 00:15:48.683
Finally, if everything is okay,
we will return true and

245
00:15:48.683 --> 00:15:54.065
nil as an error, only on that
situation if we reach the end.

