WEBVTT

1
00:00:00.093 --> 00:00:03.351
&gt;&gt; Maximiliano Flirtman: The weird part,
or the most complicated part,

2
00:00:03.351 --> 00:00:06.369
we need to create the actual router, okay?

3
00:00:06.369 --> 00:00:12.923
So we need to create a router that can
be a class, because it's a singleton.

4
00:00:12.923 --> 00:00:16.165
I don't wanna have more than one router,
so I need only one.

5
00:00:16.165 --> 00:00:18.380
I'm not creating a class and
then an instance of the class.

6
00:00:18.380 --> 00:00:20.224
I'm just creating an option.

7
00:00:20.224 --> 00:00:22.795
In JavaScript,
that's a pretty good pattern, okay?

8
00:00:22.795 --> 00:00:27.767
So it's a singleton,
there is no other instance of that router.

9
00:00:27.767 --> 00:00:31.471
And the router will have an init for

10
00:00:31.471 --> 00:00:35.701
initial things that we will do, okay?

11
00:00:35.701 --> 00:00:40.396
So let's say like that, init.

12
00:00:40.396 --> 00:00:43.090
Like that, it will have go.

13
00:00:43.090 --> 00:00:45.630
So go will receive a route.

14
00:00:45.630 --> 00:00:48.893
And if we want to add
that route to history,

15
00:00:48.893 --> 00:00:52.527
you will understand why
I'm using this later.

16
00:00:52.527 --> 00:00:55.976
But for now, let's say that sometimes
you wanna go to another route,

17
00:00:55.976 --> 00:00:58.679
but you don't wanna create
a new entry in the history.

18
00:01:00.521 --> 00:01:02.120
&gt;&gt; Maximiliano Flirtman: There
are some reasons for that.

19
00:01:02.120 --> 00:01:04.994
I mean, that means that if you
don't add an entry in the history,

20
00:01:04.994 --> 00:01:06.733
you cannot go back to the previous one.

21
00:01:06.733 --> 00:01:08.627
For example, login forms.

22
00:01:08.627 --> 00:01:13.263
You have a login form and
then when you log in successfully,

23
00:01:13.263 --> 00:01:16.337
you go to another page like my account.

24
00:01:16.337 --> 00:01:18.064
What happens if you press the Back button?

25
00:01:18.064 --> 00:01:20.425
You wanna go to the login screen again?

26
00:01:20.425 --> 00:01:26.702
Because you're logged in,
being logged in is a state not the page.

27
00:01:26.702 --> 00:01:31.469
So going back to the login in your screen,
that make so much sense.

28
00:01:31.469 --> 00:01:36.369
So then you can just go to My Account,
the private page, but

29
00:01:36.369 --> 00:01:39.516
without all need to a history, okay?

30
00:01:39.516 --> 00:01:41.575
That makes sense?

31
00:01:41.575 --> 00:01:47.438
Okay, so here we will have all
the all the details, okay?

32
00:01:47.438 --> 00:01:52.010
To make that work, but let's do this.

33
00:01:52.010 --> 00:01:58.856
I'm not sure if you have play with
the History API in your past.

34
00:01:58.856 --> 00:02:02.123
This is actually a standard API for
the web.

35
00:02:02.123 --> 00:02:04.396
By the way,
every time we are loading this,

36
00:02:04.396 --> 00:02:07.599
we have a couple of errors that
are coming from our providers.

37
00:02:07.599 --> 00:02:11.111
Also, there are some errors from
the YouTube embed sometimes, so

38
00:02:11.111 --> 00:02:12.184
it's not our code.

39
00:02:12.184 --> 00:02:15.770
The YouTube players sometimes have errors,
I don't know why.

40
00:02:15.770 --> 00:02:21.806
But when you have the history API, it
will let us, for example, push and state.

41
00:02:21.806 --> 00:02:24.910
PushState receives some data.

42
00:02:24.910 --> 00:02:28.499
In case, if you wanna send data,
we can say, no, I don't wanna pass data.

43
00:02:28.499 --> 00:02:33.337
We have an unused argument
that's actually pretty weird.

44
00:02:33.337 --> 00:02:36.766
It's called unused, so
it has history reasons.

45
00:02:36.766 --> 00:02:39.934
Someone thought that they were
to use the second argument, but

46
00:02:39.934 --> 00:02:41.325
now they're not using it.

47
00:02:41.325 --> 00:02:44.027
So it's just there.

48
00:02:44.027 --> 00:02:45.682
And finally the URL.

49
00:02:45.682 --> 00:02:48.245
I can say fake URL.

50
00:02:48.245 --> 00:02:52.760
If I do this, what happens is that now

51
00:02:52.760 --> 00:02:57.578
I can see that URL in the URL bar, okay?

52
00:02:57.578 --> 00:03:03.179
As simple as this,
any URL with folders, whatever.

53
00:03:03.179 --> 00:03:07.867
Anything you put here, it goes to the URL.

54
00:03:07.867 --> 00:03:11.495
Of course, if I refresh, it's 404, right?

55
00:03:11.495 --> 00:03:15.732
Because when you refresh,
it goes to the server.

56
00:03:15.732 --> 00:03:17.831
And the server that URL does not exist.

57
00:03:17.831 --> 00:03:20.686
And we will see how to deal
with that later, okay?

58
00:03:20.686 --> 00:03:26.417
But we are faking the URL is
a completely fake URL client side, okay?

59
00:03:26.417 --> 00:03:28.794
Makes sense?

60
00:03:28.794 --> 00:03:32.330
And there is an event that we can bind to,
to actually listen for

61
00:03:32.330 --> 00:03:33.549
changes in that URL.

62
00:03:33.549 --> 00:03:37.163
So then every time you
are changing the URL,

63
00:03:37.163 --> 00:03:42.340
you can render the right page,
and also something that happens

64
00:03:42.340 --> 00:03:48.199
every time you push a state is that you
can go back using the back button or

65
00:03:48.199 --> 00:03:52.710
in the mobile phone,
the gesture, the back gesture.

66
00:03:52.710 --> 00:03:57.233
So now if I hit the back button,
it goes to the previous one and

67
00:03:57.233 --> 00:04:00.711
then to the preview and
then it can go forward.

68
00:04:00.711 --> 00:04:07.066
So, those fake URLs are adding
entries to the history.

69
00:04:07.066 --> 00:04:11.716
Okay, do you have any
question on that part, no?

70
00:04:11.716 --> 00:04:13.600
Okay, so let's implement that.

71
00:04:13.600 --> 00:04:18.380
So, if we are adding to the history,
the current route,

72
00:04:18.380 --> 00:04:24.964
what I want is to actually talk to
history, pushState, the same I did before.

73
00:04:24.964 --> 00:04:30.119
No data is going to be
passed the unused argument.

74
00:04:30.119 --> 00:04:31.775
It's a string, so
I will pass an empty string.

75
00:04:31.775 --> 00:04:32.655
I'm sorry about that.

76
00:04:32.655 --> 00:04:33.812
This is how it is.

77
00:04:33.812 --> 00:04:38.465
It's a very old API, and by the way,
there is a new API available,

78
00:04:38.465 --> 00:04:42.955
a modern API that is more complex,
it's better but it's not yet

79
00:04:42.955 --> 00:04:46.142
100% compatible with all the browsers.

80
00:04:46.142 --> 00:04:49.938
So that's why we are still using
this one that is from the 90s.

81
00:04:49.938 --> 00:04:53.769
Actually not for
90s from mid 2000s Twilight.

82
00:04:53.769 --> 00:04:57.776
It's not from the 90s, is from mid 2000.

83
00:04:57.776 --> 00:04:59.210
And then the URL, and

84
00:04:59.210 --> 00:05:04.158
the URL is actually the route that we
are receiving as an argument, okay?

85
00:05:04.158 --> 00:05:05.764
So that's the idea.

86
00:05:05.764 --> 00:05:09.741
And in init,
we need to do the reverse operation.

87
00:05:09.741 --> 00:05:16.232
So I will listen for
pop state over the window.

88
00:05:16.232 --> 00:05:19.316
So let's analyze this for a second.

89
00:05:19.316 --> 00:05:25.162
PushState will push something into
a history and popState is an event

90
00:05:25.162 --> 00:05:31.928
that will be fired when you're something
is going like back in history, okay?

91
00:05:31.928 --> 00:05:33.964
With changing the state.

92
00:05:33.964 --> 00:05:38.710
So if you're changing the state,
then I can just talk to the router and

93
00:05:38.710 --> 00:05:41.858
say, hey,
we need to go again to this new URL.

94
00:05:41.858 --> 00:05:49.558
Location path name will give you
the current URL but just a path.

95
00:05:49.558 --> 00:05:51.576
Maybe we don't need to add to the history.

96
00:05:51.576 --> 00:05:54.597
So if the user is going
back to a previous page,

97
00:05:54.597 --> 00:05:59.723
I don't wanna add another history entry
for it because it's just going back.

98
00:05:59.723 --> 00:06:00.859
Does it make sense?

99
00:06:00.859 --> 00:06:04.408
You add entries in history when
you're going forward to new pages.

100
00:06:04.408 --> 00:06:07.839
So if you're going back,
if not, you go back and

101
00:06:07.839 --> 00:06:11.873
you're adding a new entry,
it doesn't make any sense.

102
00:06:11.873 --> 00:06:13.619
&gt;&gt; Speaker 2: Is there a reason
you wouldn't use window?

103
00:06:13.619 --> 00:06:16.929
Got location here instead
of just location.

104
00:06:16.929 --> 00:06:20.176
&gt;&gt; Maximiliano Flirtman: So the question
is, why I'm not using location and

105
00:06:20.176 --> 00:06:22.300
not window not location, okay?

106
00:06:22.300 --> 00:06:27.467
So the answer is that it's
exactly the same thing.

107
00:06:27.467 --> 00:06:31.102
Window is a global scope
in browser JavaScript.

108
00:06:31.102 --> 00:06:36.212
So everything that you have on window
is actually a global variable or

109
00:06:36.212 --> 00:06:37.541
a global option.

110
00:06:37.541 --> 00:06:41.819
In fact,
I don't need to add window [INAUDIBLE].

111
00:06:41.819 --> 00:06:44.574
It's just words without it,
but at that point,

112
00:06:44.574 --> 00:06:47.343
I don't think you
understand what's going on.

113
00:06:47.343 --> 00:06:49.832
So if you see a not even listener there,

114
00:06:49.832 --> 00:06:53.390
you don't understand if it's
a router even listener.

115
00:06:53.390 --> 00:06:55.230
So it's not, it's a window, but it's like,

116
00:06:55.230 --> 00:06:57.635
I think that I need the window
to see exactly what's going on.

117
00:06:57.635 --> 00:07:02.176
For location,
I don't think it's needed, but

118
00:07:02.176 --> 00:07:07.604
actually, when you are creating
a global variable here,

119
00:07:07.604 --> 00:07:11.939
actually that variable
is sitting on window.

120
00:07:13.813 --> 00:07:17.521
&gt;&gt; Maximiliano Flirtman: So
every global variable becomes an object

121
00:07:17.521 --> 00:07:22.062
of the global context that
in the browser is window.

122
00:07:22.062 --> 00:07:25.169
In Node.js, it's a different object.

123
00:07:25.169 --> 00:07:29.969
In a service worker or a web worker,
it's a different option.

124
00:07:29.969 --> 00:07:30.563
okay?

125
00:07:30.563 --> 00:07:34.747
So, I don't have any special reason
of why I'm not using window location.

126
00:07:34.747 --> 00:07:37.652
The thing is that I don't
think it's needed there.

127
00:07:37.652 --> 00:07:42.357
I don't think that I need to add
that context, but you can add it and

128
00:07:42.357 --> 00:07:43.880
it's just the same.

129
00:07:43.880 --> 00:07:46.073
Okay, make sense?

130
00:07:46.073 --> 00:07:50.130
Okay, so that will then go and go back.

131
00:07:50.130 --> 00:07:53.343
When we are initializing the router, by
the way, we are not calling that yet, so

132
00:07:53.343 --> 00:07:54.202
we need to call that.

133
00:07:54.202 --> 00:08:00.742
Also we need to initialize, or,
let's say, go to the initial route.

134
00:08:00.742 --> 00:08:04.046
So when you start the page,

135
00:08:04.046 --> 00:08:09.225
I need to go to the first or
the current URL.

136
00:08:09.225 --> 00:08:16.649
I will say Router.go to the current
pathname and location.search as well.

137
00:08:16.649 --> 00:08:18.373
You will see why we need this.

138
00:08:18.373 --> 00:08:24.992
Search is actually question mark on
what goes after the question mark there.

139
00:08:24.992 --> 00:08:28.794
So it's just the pathname and
the location.

