WEBVTT

1
00:00:00.000 --> 00:00:04.305
So now we have all the navigation and
the basic UI part ready, but

2
00:00:04.305 --> 00:00:09.326
then we know that we have, at some points,
up to fabrics add to watch list,

3
00:00:09.326 --> 00:00:13.663
and also we have a section fabrics and
watch lists on my account.

4
00:00:13.663 --> 00:00:18.465
And actually for that to work, I mean,
we could do a client side only

5
00:00:18.465 --> 00:00:22.848
list of average, the clients
are only list of watch list, but

6
00:00:22.848 --> 00:00:27.345
the idea is that that would
probably need a cloud user account.

7
00:00:27.345 --> 00:00:33.173
So then you can log in in any computer or
any device and get your watch list,

8
00:00:33.173 --> 00:00:37.784
and for that, we need to work with users,
with accounts.

9
00:00:37.784 --> 00:00:41.450
We need to register users,
we need to login users,

10
00:00:41.450 --> 00:00:46.412
so that's a pretty common scenario for
for most web apps these days.

11
00:00:46.412 --> 00:00:49.983
So the the last huge
topic that we have for

12
00:00:49.983 --> 00:00:56.079
this course is authentication, so
we are going to start doing that,

13
00:00:56.079 --> 00:01:00.404
and now we will need to
also go back to the server.

14
00:01:00.404 --> 00:01:04.119
Because we will need to add
more entry points or APIs,

15
00:01:04.119 --> 00:01:06.843
we need to talk down to the account, and

16
00:01:06.843 --> 00:01:11.813
also we need to deal with passwords,
so we will discuss all that stuff.

17
00:01:11.813 --> 00:01:16.955
Apart from creating the front end,
the login forms, the registration forms,

18
00:01:16.955 --> 00:01:21.499
and then we also will need to because
it's a single page application.

19
00:01:21.499 --> 00:01:25.690
We need to understand how we will
keep the session somehow alive,

20
00:01:25.690 --> 00:01:30.276
because we are not sending the username
and password on every request.

21
00:01:30.276 --> 00:01:34.165
I mean, we could, but
it's a pretty bad idea.

22
00:01:34.165 --> 00:01:37.704
So let's get into that topic.

23
00:01:37.704 --> 00:01:40.471
First, our database, if we look at the,

24
00:01:40.471 --> 00:01:45.942
we could check in the database if you have
any any tool connected to your database.

25
00:01:45.942 --> 00:01:49.742
We do have already a structure for
this table,

26
00:01:49.742 --> 00:01:54.713
we have an ID for users, name,
email, password, hashed,

27
00:01:54.713 --> 00:01:59.984
we have a hint there about how we
are going to store the password.

28
00:01:59.984 --> 00:02:03.911
Last login, time created, time confirmed,
time deleted, maybe confirm and

29
00:02:03.911 --> 00:02:06.957
delete is more for homework,
I have some homework for you if,

30
00:02:06.957 --> 00:02:09.616
in case you want to continue
working on this project.

31
00:02:09.616 --> 00:02:16.269
But those are timestamps for now,
this is what we have for every account.

32
00:02:16.269 --> 00:02:21.056
And then we have user movies that
the structure looks like this.

33
00:02:21.056 --> 00:02:26.171
We have a user id, a movie id, so
that user with that movie, and

34
00:02:26.171 --> 00:02:31.096
then relation type can be any
from favorite or watch list, so

35
00:02:31.096 --> 00:02:36.436
instead of creating two tables,
I'm just reusing the same one.

36
00:02:36.436 --> 00:02:41.723
Okay, I'm calling that collection and
users have two collections, favorites and

37
00:02:41.723 --> 00:02:47.096
watchlist, because they have kind of the
same behavior, or pretty similar, okay?

38
00:02:47.096 --> 00:02:53.349
So it's just that, from a database point
of view, so it's not really a big deal.

39
00:02:53.349 --> 00:02:55.943
So regarding the logging,

40
00:02:55.943 --> 00:03:01.482
in this course we are going to
make a classic login, okay?

41
00:03:01.482 --> 00:03:06.301
There is an intermediate course
that continues this one where

42
00:03:06.301 --> 00:03:10.656
we also add passkeys to the login,
just for you to know,

43
00:03:10.656 --> 00:03:16.047
passkeys are the replacement of
passwords that is coming in the web.

44
00:03:16.047 --> 00:03:19.850
You have seen this, actually, today I
have received a message from WhatsApp,

45
00:03:19.850 --> 00:03:22.929
in my WhatsApp account, say,
hey, do you wanna use passkeys?

46
00:03:22.929 --> 00:03:24.782
Now we have passkeys.

47
00:03:24.782 --> 00:03:29.831
And it can use your biometrics,
or you can use a USB key,

48
00:03:29.831 --> 00:03:34.776
a hardware key, like a Yubicu key or
other ways to store

49
00:03:34.776 --> 00:03:39.527
keys safely and
it reduces a lot of security issues.

50
00:03:39.527 --> 00:03:40.211
Okay, that's passkeys.

51
00:03:40.211 --> 00:03:44.751
But for now, we're going to make a classic
username and password, actually,

52
00:03:44.751 --> 00:03:48.572
the username will be the email,
that is pretty common these days.

53
00:03:48.572 --> 00:03:51.083
Okay, so we have email and password.

54
00:03:51.083 --> 00:03:55.859
And in terms of security,
the basic security that we are going to

55
00:03:55.859 --> 00:04:01.173
implement is that we are not going to
store the passwords in plain text.

56
00:04:01.173 --> 00:04:05.854
Okay, that's pretty bad, because we,
as the owners of the app,

57
00:04:05.854 --> 00:04:09.205
we can see everyone's
passwords if we do that.

58
00:04:09.205 --> 00:04:12.871
And also,
if anyone is hacking us in a server,

59
00:04:12.871 --> 00:04:17.669
they can steal all our users password,
which is pretty bad.

60
00:04:17.669 --> 00:04:23.327
So the first step to increase security
is to hash the passwords, okay?

61
00:04:23.327 --> 00:04:26.358
So we are going to hash the passwords, and

62
00:04:26.358 --> 00:04:31.215
hashing the password means that we
need to use a library to do that.

63
00:04:31.215 --> 00:04:36.117
To hash a password,
it's just a cryptography tool that

64
00:04:36.117 --> 00:04:39.988
uses math to do some
things on the password.

65
00:04:39.988 --> 00:04:45.830
It creates a hash, that hash cannot be
converted back into the password again,

66
00:04:45.830 --> 00:04:49.069
it's a one way hash,
as most of the hashes.

67
00:04:49.069 --> 00:04:54.038
So quick question for you, if we cannot
get the original password again,

68
00:04:54.038 --> 00:04:59.168
how do we know if tomorrow the same user
is logging in with the same password,

69
00:04:59.168 --> 00:05:02.471
how do we know if It's
the right password or not?

70
00:05:02.471 --> 00:05:05.244
If we don't have the original password,
you compare.

71
00:05:05.244 --> 00:05:07.539
&gt;&gt; Student: You hash it the same way,
and compare that.

72
00:05:07.539 --> 00:05:10.978
&gt;&gt; Maximiliano Firtman: Exactly, we hash
it the new password that the user is

73
00:05:10.978 --> 00:05:15.838
trying to use again with the same
function, and that's important part.

74
00:05:15.838 --> 00:05:20.140
When you hash things, the same string
will always get you the same output,

75
00:05:20.140 --> 00:05:22.468
same input, that you hash same output.

76
00:05:22.468 --> 00:05:28.362
So then we can compare outputs,
hash strings and see if it's the same or

77
00:05:28.362 --> 00:05:32.699
not, that's kind of how
this is gonna work, okay?

