WEBVTT

1
00:00:00.000 --> 00:00:03.930
Well, now what's the deal,
what do I need to do?

2
00:00:03.930 --> 00:00:09.395
I need to check the route,
and based on that route,

3
00:00:09.395 --> 00:00:15.506
I need to inject in the main
the component that I set here.

4
00:00:15.506 --> 00:00:20.724
Okay, so if I if this is the path,
I need to inject the home page,

5
00:00:20.724 --> 00:00:25.477
if this is a path,
I need to change the movie page and so on.

6
00:00:25.477 --> 00:00:27.195
Okay, does it make sense?

7
00:00:27.195 --> 00:00:31.625
So, and I'm creating a generic router, so

8
00:00:31.625 --> 00:00:37.268
a system that you can quickly
use on any project, okay?

9
00:00:37.268 --> 00:00:43.596
So you say, if add to history,
we can do something like this,

10
00:00:43.596 --> 00:00:48.466
create a page element,
and that page element is

11
00:00:48.466 --> 00:00:53.359
the one that we are going
to inject if we have it.

12
00:00:53.359 --> 00:00:58.129
So there is a to do here,
we are going to inject this.

13
00:00:58.129 --> 00:01:02.513
Let's say if it's null,
&gt;&gt; Maximiliano Firtman: If

14
00:01:02.513 --> 00:01:06.994
it's not, though.

15
00:01:06.994 --> 00:01:13.078
So we are going to get the main
document query selector,

16
00:01:13.078 --> 00:01:20.988
main and we're going to first delete
what we have we are going to remove.

17
00:01:20.988 --> 00:01:21.995
This is a quick and

18
00:01:21.995 --> 00:01:26.037
dirty way to remove what we have in
the main there are other ways as well.

19
00:01:26.037 --> 00:01:32.244
And after we do that, we want to
append child that page element again,

20
00:01:32.244 --> 00:01:36.978
we still have the logic we
need to the logic there, but

21
00:01:36.978 --> 00:01:41.740
I want you to understand
what I'm trying to achieve.

22
00:01:41.740 --> 00:01:47.827
I will create the variable for
the page element that I need to go.

23
00:01:47.827 --> 00:01:53.585
If I do have one, then I will do that,
so I have a page for

24
00:01:53.585 --> 00:01:57.968
the current URL, so we inject that page,

25
00:01:57.968 --> 00:02:02.375
that element in the, does it make sense?

26
00:02:02.375 --> 00:02:07.778
What are the possibilities for
page elements being null,

27
00:02:07.778 --> 00:02:10.651
why it says that it can be null?

28
00:02:10.651 --> 00:02:13.604
Well, maybe it's a URL
that I'm not managing,

29
00:02:13.604 --> 00:02:15.990
it's a 404, does that make sense?

30
00:02:15.990 --> 00:02:17.411
So maybe it's a 404.

31
00:02:17.411 --> 00:02:21.641
So if it's a 404,
then I'm going to create an element.

32
00:02:25.169 --> 00:02:30.529
&gt;&gt; Maximiliano Firtman: Any element
will work, but I'm just going to use

33
00:02:30.529 --> 00:02:35.638
this to create a text saying,
page not found.

34
00:02:35.638 --> 00:02:40.420
So if the engine couldn't find a route for
the current URL,

35
00:02:40.420 --> 00:02:45.215
the patient admin will be an edge
one saying patient phone.

36
00:02:45.215 --> 00:02:49.147
So we need to fill
the engine here that I mean,

37
00:02:49.147 --> 00:02:54.734
it's not a big deal, we need to
just go through all the routes and

38
00:02:54.734 --> 00:03:00.242
try to find one that matches
the current URL, that make sense?

39
00:03:02.968 --> 00:03:07.326
&gt;&gt; Maximiliano Firtman: So
something that we need is a current URL,

40
00:03:07.326 --> 00:03:12.423
the current URL is actually here in route,
okay?

41
00:03:12.423 --> 00:03:17.308
So it's coming here, the problem is that

42
00:03:17.308 --> 00:03:22.613
sometimes that URL can include for
example,

43
00:03:22.613 --> 00:03:30.161
it can be search query equals to
batman and page equals to three.

44
00:03:30.161 --> 00:03:36.043
So in this case, what I want is just
this part before the question mark,

45
00:03:36.043 --> 00:03:37.725
does it make sense?

46
00:03:37.725 --> 00:03:46.155
So what I need is that segment of the URL
that has only what is known as the path,

47
00:03:46.155 --> 00:03:50.720
not the search, so this is just looking.

48
00:03:50.720 --> 00:03:57.336
So I'm going to create the route
path argument and I will use,

49
00:03:57.336 --> 00:04:03.074
now I will check if the route
include a question mark.

50
00:04:03.074 --> 00:04:08.655
Now I will use a ternary operator
that you mentioned before,

51
00:04:08.655 --> 00:04:14.793
I will just split this, do you know
what a split does over a string?

52
00:04:14.793 --> 00:04:18.529
It separates this in an array, and
I will take the first segment.

53
00:04:18.529 --> 00:04:22.745
So before the question mark,
and if it doesn't include one,

54
00:04:22.745 --> 00:04:25.106
it's just the full route, okay?

55
00:04:25.106 --> 00:04:28.745
So pretty simple, this is programming,
nothing really, really fancy.

56
00:04:28.745 --> 00:04:33.586
And now what I'm going to check we
have two kinds if you remember,

57
00:04:33.586 --> 00:04:36.578
in our routes, we have two kind of path,

58
00:04:36.578 --> 00:04:41.435
they can be strings, or
they can be regular expressions, okay?

59
00:04:41.435 --> 00:04:45.977
So we have two different kinds of path,
so I need to check,

60
00:04:45.977 --> 00:04:48.946
I'm looping through all the routes,

61
00:04:48.946 --> 00:04:53.615
I need to check if the path for
the current route is a string.

62
00:04:53.615 --> 00:04:57.783
So I do a just a comparison,
a string comparison, or if it's a regular

63
00:04:57.783 --> 00:05:02.325
expression in this case, I need to
execute the regular expression, okay?

64
00:05:02.325 --> 00:05:03.233
Make sense?

65
00:05:03.233 --> 00:05:06.719
So that's the next step, so

66
00:05:06.719 --> 00:05:12.398
I will check if the type
of the path is a string.

67
00:05:12.398 --> 00:05:19.694
So if it's a string, actually equals,
&gt;&gt; Maximiliano Firtman: And

68
00:05:19.694 --> 00:05:26.187
the path, the current path is
the one that I'm looking for.

69
00:05:26.187 --> 00:05:31.921
I found the path, so basically,
I will say that the page

70
00:05:31.921 --> 00:05:36.804
element is a new and
look at this r.component.

71
00:05:36.804 --> 00:05:41.398
Let's see if you understand
that part new r.component,

72
00:05:41.398 --> 00:05:44.128
does anyone know what this means?

73
00:05:44.128 --> 00:05:48.069
Because it looks weird, it works, but

74
00:05:48.069 --> 00:05:53.683
r is our current variable looping through,
Actually,

75
00:05:53.683 --> 00:05:59.307
this is not router,
I have a typo here, this is routes.

76
00:06:00.596 --> 00:06:01.376
&gt;&gt; Maximiliano Firtman: Okay?

77
00:06:01.376 --> 00:06:03.197
Routes, not router.

78
00:06:03.197 --> 00:06:07.623
And we are looping through all
the routes I need to get the component,

79
00:06:07.623 --> 00:06:10.903
the component is a constructor,
it's a class, so

80
00:06:10.903 --> 00:06:14.050
I'm just creating a new
instance of that class.

81
00:06:16.318 --> 00:06:17.607
&gt;&gt; Maximiliano Firtman: Okay?

82
00:06:17.607 --> 00:06:21.717
Let me, It works in JavaScript,
you can actually do that.

83
00:06:21.717 --> 00:06:25.627
And then I can break meaning that I
don't need to continue looping through

84
00:06:25.627 --> 00:06:29.043
the rest of the routes,
because I have already found it, okay?

85
00:06:29.043 --> 00:06:36.106
And the other option is that it's, if the
path is an instance of regular expression.

86
00:06:39.856 --> 00:06:42.428
&gt;&gt; Maximiliano Firtman: So
if it's a regular expression,

87
00:06:42.428 --> 00:06:46.597
I need to check if it's matching and
you take the path and

88
00:06:46.597 --> 00:06:51.938
you execute the regular expression
with the route that I need to check.

89
00:06:51.938 --> 00:06:54.982
Actually with the route, no,
the route, the complete route.

90
00:06:54.982 --> 00:07:00.079
Yeah, not the route path because here
I may change, I wanna see everything.

91
00:07:04.803 --> 00:07:06.655
&gt;&gt; Maximiliano Firtman: Okay,
does that make sense?

92
00:07:06.655 --> 00:07:13.375
So if it matches,
it means that we are in the right route,

93
00:07:13.375 --> 00:07:17.996
so something similar as we did before.

94
00:07:17.996 --> 00:07:23.060
Page element, new archive a component,
so just remember this.

95
00:07:23.060 --> 00:07:28.208
Let's do this, string route, string path,

96
00:07:28.208 --> 00:07:32.571
and this is a regular expression path.

97
00:07:34.875 --> 00:07:37.700
&gt;&gt; Maximiliano Firtman: And
I'm not sure if you remember, and

98
00:07:37.700 --> 00:07:43.543
we are finishing the router, so, We
have this idea of a variable here, okay?

99
00:07:43.543 --> 00:07:49.543
So we need to extract those parameters,
okay?

100
00:07:49.543 --> 00:07:53.629
And we do that, actually, with match,

101
00:07:53.629 --> 00:07:58.319
I'm not sure if you have used this before,
but

102
00:07:58.319 --> 00:08:02.182
actually that match will have match.

103
00:08:02.182 --> 00:08:07.068
We can slice that, and
if we take slice one,

104
00:08:07.068 --> 00:08:11.825
it's giving me actually the parameters,

105
00:08:11.825 --> 00:08:17.919
that's how that works,
the regular expression API.

106
00:08:22.051 --> 00:08:25.041
&gt;&gt; Maximiliano Firtman: So
something that you can do,

107
00:08:25.041 --> 00:08:29.710
I can inject those params
in the page element.

108
00:08:29.710 --> 00:08:34.945
By the way, params is just a variable name
I'm creating right now can be arguments,

109
00:08:34.945 --> 00:08:38.575
it can be properties, props,
however you wanna call it.

110
00:08:38.575 --> 00:08:44.082
So let's try to understand
that if I'm in this route,

111
00:08:44.082 --> 00:08:48.871
for example, if I'm in movies/14, 14,

112
00:08:48.871 --> 00:08:53.782
because it's here,
a variable will actually be

113
00:08:53.782 --> 00:08:57.995
one of the elements of this params array.

114
00:08:59.315 --> 00:09:00.176
&gt;&gt; Maximiliano Firtman: Okay?

115
00:09:00.176 --> 00:09:04.928
It's a little low level, but
it makes our router future proof,

116
00:09:04.928 --> 00:09:07.833
because we can have more routes later.

