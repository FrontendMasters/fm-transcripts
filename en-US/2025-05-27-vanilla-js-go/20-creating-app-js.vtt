WEBVTT

1
00:00:00.000 --> 00:00:04.582
&gt;&gt; Maximiliano Firtman: Well,
now it's time to write some JavaScript, so

2
00:00:04.582 --> 00:00:09.695
I will create a new file and
I will call that file app.js,

3
00:00:09.695 --> 00:00:13.440
any name will work, to be honest, okay?

4
00:00:13.440 --> 00:00:16.322
Any name will work, and
what will be the idea?

5
00:00:16.322 --> 00:00:21.912
We're going to create a global app
object that we can call from anywhere,

6
00:00:21.912 --> 00:00:26.242
okay, with some global
functions from our JavaScript,

7
00:00:26.242 --> 00:00:30.049
Vanilla JavaScript
client-side application.

8
00:00:30.049 --> 00:00:34.745
For example, in this app,
we can have the search function, so

9
00:00:34.745 --> 00:00:38.480
it's gonna be a function
that receives an event.

10
00:00:41.374 --> 00:00:45.023
&gt;&gt; Maximiliano Firtman: By the way, this
is the one that we are calling from here,

11
00:00:45.023 --> 00:00:48.144
okay, app.search, keeping simple, short,

12
00:00:48.144 --> 00:00:52.653
app.search(event), does anyone
know why I'm sending an event?

13
00:00:52.653 --> 00:00:56.744
So then we can realize
why the event is useful.

14
00:00:56.744 --> 00:00:59.177
&gt;&gt; Speaker 2: It doesn't reload the form.

15
00:00:59.177 --> 00:01:02.452
&gt;&gt; Maximiliano Firtman: Exactly,
it's a form, what happens with forms?

16
00:01:02.452 --> 00:01:06.247
When you press Return or
you click on the Submit button,

17
00:01:06.247 --> 00:01:09.489
it creates a new full
navigation to the server.

18
00:01:09.489 --> 00:01:12.754
So it goes to the server
to create a post back, and

19
00:01:12.754 --> 00:01:17.068
we will be a client-side application,
so we don't want that.

20
00:01:17.068 --> 00:01:21.961
So we wanna listen for the event, but
we don't want the browser to reload, so

21
00:01:21.961 --> 00:01:25.593
in this case,
we'll just say event.preventDefault.

22
00:01:25.593 --> 00:01:30.241
That actually is the one that makes
the trick and says to the browser,

23
00:01:30.241 --> 00:01:34.087
hey, browser, don't send the form,
I will do that, so

24
00:01:34.087 --> 00:01:38.575
prevent your default action after this,
and then, for example,

25
00:01:38.575 --> 00:01:42.611
we can get the keywords that
the user is typing or the query.

26
00:01:42.611 --> 00:01:46.334
You can call a keyword query
however you wanna do that, so

27
00:01:46.334 --> 00:01:50.149
we actually need to get what's
inside this input, okay?

28
00:01:50.149 --> 00:01:54.692
So what the user has typed,
and for that we can add an ID,

29
00:01:54.692 --> 00:01:59.336
it's okay, or
we can take advantage of CSS selectors and

30
00:01:59.336 --> 00:02:03.047
use query selectors and
say, you know what?

31
00:02:03.047 --> 00:02:08.991
I want the input whose type is search,
and I will have only one in my page,

32
00:02:08.991 --> 00:02:13.585
only one search box, so
when you get it, get the value.

33
00:02:17.128 --> 00:02:19.884
&gt;&gt; Maximiliano Firtman: And
something else that I need to do, okay,

34
00:02:19.884 --> 00:02:24.797
I need to call the API, grab the data,
and we will see what you do later, okay,

35
00:02:24.797 --> 00:02:26.079
does it make sense?

36
00:02:29.668 --> 00:02:33.937
&gt;&gt; Maximiliano Firtman: Now I need
to connect index.html with my app,

37
00:02:33.937 --> 00:02:39.637
I'm pretty sure you know how to
do that at this point, right?

38
00:02:39.637 --> 00:02:43.717
So it's a script, but I'm not sure if you

39
00:02:43.717 --> 00:02:48.624
know how to do that in a,
let's say, modern way.

40
00:02:48.624 --> 00:02:53.251
For example,
if you want to enable ECMAScript

41
00:02:53.251 --> 00:02:57.411
modules on it, do you know how to do that?

42
00:02:57.411 --> 00:03:02.825
I mean, if you have experience doing
classic web development, I mean,

43
00:03:02.825 --> 00:03:09.335
classic web development is JavaScript from
10 to 30 years ago, or five years ago.

44
00:03:09.335 --> 00:03:13.530
If you want to split your
code into separate files,

45
00:03:13.530 --> 00:03:18.213
you have to add a lot of script
tags pointing to each file,

46
00:03:18.213 --> 00:03:24.676
which is really annoying, we don't want
to do that, and we have a better way.

47
00:03:24.676 --> 00:03:29.799
When we have more files,
we can import from other files,

48
00:03:29.799 --> 00:03:34.924
as we were importing from
different Go packages, okay,

49
00:03:34.924 --> 00:03:40.510
but to make it work,
we need to enable that in the script tile.

50
00:03:40.510 --> 00:03:45.434
And for that,
we have to express type module,

51
00:03:45.434 --> 00:03:48.352
have you seen that before?

52
00:03:50.327 --> 00:03:54.288
&gt;&gt; Maximiliano Firtman: So,
it says, hey, you know what?

53
00:03:54.288 --> 00:03:57.866
We're going to enable
ECMAScript modules here so

54
00:03:57.866 --> 00:04:00.845
that app JS can import other JS files, and

55
00:04:00.845 --> 00:04:06.125
those other JS files can import other
JS files, and we're creating a tree

56
00:04:06.125 --> 00:04:11.431
of dependencies that I don't need to
explicitly express in my HTML file.

57
00:04:11.431 --> 00:04:12.728
Okay, makes sense?

58
00:04:12.728 --> 00:04:16.916
And also, I will add the defer attribute,
it's not mandatory,

59
00:04:16.916 --> 00:04:18.451
do you know what defer?

60
00:04:18.451 --> 00:04:22.541
Does to the script.

61
00:04:22.541 --> 00:04:25.648
&gt;&gt; Speaker 2: Load it after
the entire page is already loaded.

62
00:04:25.648 --> 00:04:30.663
&gt;&gt; Maximiliano Firtman: Close, it's
loaded after the page or the entire page

63
00:04:30.663 --> 00:04:35.465
is parsed, not loaded,
what's the difference?

64
00:04:35.465 --> 00:04:41.100
Parsing is when the browser ends,
reading your HTML and creating the DOM,

65
00:04:41.100 --> 00:04:45.494
but it doesn't need to load
the CSS file or the image file.

66
00:04:45.494 --> 00:04:48.428
When you're talking about loading,

67
00:04:48.428 --> 00:04:53.018
the load event is fired when
every resource is also loaded.

68
00:04:53.018 --> 00:04:58.608
Defer will actually download the files
in parallel with the parsing,

69
00:04:58.608 --> 00:05:03.264
and then it will wait until
the parsing ends to execute it.

70
00:05:03.264 --> 00:05:07.987
Okay, so that's the idea,
so it's for performance,

71
00:05:07.987 --> 00:05:12.719
it will improve a little bit
web performance of our app.

72
00:05:12.719 --> 00:05:18.850
So that's actually the app, we don't
need to do anything, anything else here.

