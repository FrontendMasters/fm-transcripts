WEBVTT

1
00:00:00.000 --> 00:00:02.490
&gt;&gt; Maximiliano Firtman: So
what's the next step?

2
00:00:02.490 --> 00:00:07.094
The next step is trying to render
the details of a movie, okay?

3
00:00:07.094 --> 00:00:09.688
So right now,
we are rendering the home page.

4
00:00:09.688 --> 00:00:12.761
Now I wanna render the details of a movie.

5
00:00:12.761 --> 00:00:17.966
So for example, the whole idea, my whole
idea, is that if I click in one movie,

6
00:00:17.966 --> 00:00:22.109
if I click in Minions,
I wanna get into the details of Minions.

7
00:00:22.109 --> 00:00:28.633
So I need to render another page that
is gonna be movie details, okay?

8
00:00:28.633 --> 00:00:31.530
And we have already said that for
every page,

9
00:00:31.530 --> 00:00:34.895
what they're going to do
is create a web component.

10
00:00:34.895 --> 00:00:39.838
So the next step is create another
web component for movie details.

11
00:00:39.838 --> 00:00:45.330
So we can start with the HTML, or
we can start with the JavaScript,

12
00:00:45.330 --> 00:00:48.287
the order doesn't matter, okay?

13
00:00:48.287 --> 00:00:53.533
The thing is that we will
also need some HTML as well.

14
00:00:53.533 --> 00:00:58.805
In the readme, we are now on D5,
you have both there.

15
00:00:58.805 --> 00:01:02.804
For example,
I may wanna just copy the HTML,

16
00:01:02.804 --> 00:01:09.236
because it's just a couple of tags,
and I will code the JavaScript bar.

17
00:01:09.236 --> 00:01:12.636
So this is a new template, so

18
00:01:12.636 --> 00:01:17.186
I'm going to paste from D5 the HTML.

19
00:01:17.186 --> 00:01:22.116
So I'm going to now my index real html,
and I do have a section that I created for

20
00:01:22.116 --> 00:01:22.956
templates.

21
00:01:22.956 --> 00:01:25.067
So far, I only have the template home.

22
00:01:25.067 --> 00:01:31.047
I may wanna get rid of these spaces
just to have a cleaner HTML,

23
00:01:31.047 --> 00:01:33.233
it's not mandatory.

24
00:01:33.233 --> 00:01:36.579
And then I have the template home, and

25
00:01:36.579 --> 00:01:41.293
I'm going to paste now
template-movie-details.

26
00:01:41.293 --> 00:01:43.954
Okay, so let's analyze the code here.

27
00:01:43.954 --> 00:01:50.527
First, as you can see,
I'm already using animated loading, okay?

28
00:01:50.527 --> 00:01:55.952
So I'm already using here the other
component that we have already created.

29
00:01:55.952 --> 00:01:59.406
So it has an article for the movie.

30
00:01:59.406 --> 00:02:02.174
The article element is semantic HTML.

31
00:02:02.174 --> 00:02:07.572
h2, h3, then a header,
the header has an image for the poster.

32
00:02:07.572 --> 00:02:11.713
A youtube-embed, okay,
and say, what's that?

33
00:02:11.713 --> 00:02:13.160
Okay, we'll see.

34
00:02:13.160 --> 00:02:14.696
Is that HTML?

35
00:02:14.696 --> 00:02:18.021
No, and how do I know this is
not really from an HTML spec?

36
00:02:18.021 --> 00:02:20.509
Because there is dash.

37
00:02:20.509 --> 00:02:27.288
Every time you see a dash or hyphen in an
HTML tag, you know it's a custom element.

38
00:02:27.288 --> 00:02:29.466
Do we have it?

39
00:02:29.466 --> 00:02:30.871
Not yet.

40
00:02:30.871 --> 00:02:32.152
Okay, what would happen?

41
00:02:32.152 --> 00:02:35.367
Would we get an error from the browser?

42
00:02:35.367 --> 00:02:36.983
No, not really.

43
00:02:36.983 --> 00:02:42.292
When the browser finds an unknown element,
it just ignores it,

44
00:02:42.292 --> 00:02:46.929
and it just applies the standard
HTML unknown element.

45
00:02:46.929 --> 00:02:50.952
Actually, you can even
put some text inside,

46
00:02:50.952 --> 00:02:56.125
like YouTube, whatever, and
the browser will render it.

47
00:02:56.125 --> 00:03:00.221
Okay, and that's something that
I'm not sure if you have seen,

48
00:03:00.221 --> 00:03:03.805
it's a history lesson, so
it's not really important.

49
00:03:03.805 --> 00:03:08.458
But I'm not sure if you know
that there is a noscript tag.

50
00:03:08.458 --> 00:03:10.445
Have you seen that one?

51
00:03:10.445 --> 00:03:12.908
So we have the script and the noscript.

52
00:03:12.908 --> 00:03:15.252
I say, why do we have a noscript?

53
00:03:15.252 --> 00:03:16.799
Does anyone know?

54
00:03:16.799 --> 00:03:20.390
I'm not sure if you have seen it,
because I haven't seen it, or

55
00:03:20.390 --> 00:03:23.065
haven't implemented in probably 20 years.

56
00:03:23.065 --> 00:03:25.389
But it has to do with that,
with this idea.

57
00:03:25.389 --> 00:03:31.379
In the 90s, there were a couple of
browsers without JavaScript support, okay?

58
00:03:31.379 --> 00:03:35.558
So if you had something in JavaScript
here, it's not gonna work.

59
00:03:35.558 --> 00:03:42.717
So when the script tab was created,
they also created the noscript.

60
00:03:42.717 --> 00:03:49.767
Here, you will add a message for
browsers not supporting the script,

61
00:03:49.767 --> 00:03:55.278
such as you need to update your browser,
bro, right?

62
00:03:55.278 --> 00:03:58.472
So that means that
browsers with support of

63
00:03:58.472 --> 00:04:01.675
the script tag will just ignore that text.

64
00:04:01.675 --> 00:04:06.907
And browsers that are not understanding
the script tag will ignore the script tag,

65
00:04:06.907 --> 00:04:10.806
and they will also ignore the noscript,
but not the content.

66
00:04:10.806 --> 00:04:12.172
So they will render this.

67
00:04:12.172 --> 00:04:16.230
In fact, we can use the same
technique here to put here, like,

68
00:04:16.230 --> 00:04:21.143
YouTube loading or something here, or
even we can add an animated loading.

69
00:04:21.143 --> 00:04:24.929
So if youtube-embed is not
being recognized, well,

70
00:04:24.929 --> 00:04:27.494
at least we have a fallback content.

71
00:04:27.494 --> 00:04:30.272
So you use that for fallback content.

72
00:04:30.272 --> 00:04:32.592
&gt;&gt; Speaker 2: So does it replace
it with a div or something, or

73
00:04:32.592 --> 00:04:34.217
there's just no element at all?

74
00:04:34.217 --> 00:04:36.261
&gt;&gt; Maximiliano Firtman: So
no, there is an element, so

75
00:04:36.261 --> 00:04:39.184
you will see the element
in the DOM is there?

76
00:04:39.184 --> 00:04:42.946
But it's more similar to
a span than to a div,

77
00:04:42.946 --> 00:04:47.011
so it's not block-based
by default like a div.

78
00:04:47.011 --> 00:04:50.673
But actually, you can apply CSS to it and

79
00:04:50.673 --> 00:04:55.974
say display block,
even if the tag does not exist, okay?

80
00:04:55.974 --> 00:04:58.196
It treats as a placeholder.

81
00:04:58.196 --> 00:05:03.345
Then we have a section for some actions
for metadata like the release year that

82
00:05:03.345 --> 00:05:08.824
we will add later, some two buttons, and
then the cast, and blah, blah, blah.

83
00:05:08.824 --> 00:05:10.642
So nothing really important, okay?

84
00:05:10.642 --> 00:05:12.663
So that's actually the template.

85
00:05:12.663 --> 00:05:18.136
And of course, we will use the web
component to actually fill the gaps here.

86
00:05:18.136 --> 00:05:22.168
So the next step is to
create the web component, so

87
00:05:22.168 --> 00:05:24.765
I'm going to create a new file.

88
00:05:24.765 --> 00:05:31.720
The new file will be,
in this case, MovieDetailsPage.js.

89
00:05:31.720 --> 00:05:36.151
And it's gonna be an HTML element, so

90
00:05:36.151 --> 00:05:44.330
I'm going to say class MovieDetailsPage
extends from HTMLElement.

91
00:05:44.330 --> 00:05:48.138
Of course, we also need to register this,
because if not,

92
00:05:48.138 --> 00:05:49.901
we won't be able to use it.

93
00:05:49.901 --> 00:05:52.875
So the last part will be, again,

94
00:05:52.875 --> 00:05:57.558
customElements.define movie-details-page,

95
00:05:57.558 --> 00:06:02.677
we can have more than one dash,
and the name of the class.

96
00:06:02.677 --> 00:06:04.576
Yeah, we have a question there.

97
00:06:04.576 --> 00:06:07.976
&gt;&gt; Speaker 3: Can you load a CSS
file from a web component?

98
00:06:07.976 --> 00:06:11.184
&gt;&gt; Maximiliano Firtman: Yes, you can
load a CSS file from a web component.

99
00:06:11.184 --> 00:06:14.182
How you're going to do that,
there are different ways.

100
00:06:14.182 --> 00:06:20.258
One way is, inside the template,
you can add a link.

101
00:06:20.258 --> 00:06:22.208
You can also add a style.

102
00:06:22.208 --> 00:06:27.192
Or you can, inside the template, so then
remember, the template is gonna be cloned,

103
00:06:27.192 --> 00:06:30.970
and then when we clone that,
we will inject that clone in the DOM.

104
00:06:30.970 --> 00:06:35.852
That style, by default,
will be applied to the whole page,

105
00:06:35.852 --> 00:06:38.256
not just your web component.

106
00:06:38.256 --> 00:06:43.282
If you want that CSS to apply
only to the web component,

107
00:06:43.282 --> 00:06:46.680
you need to apply Shadow DOM, okay?

108
00:06:46.680 --> 00:06:50.785
We don't need it for
this particular example, but

109
00:06:50.785 --> 00:06:54.800
Shadow DOM can be defined in JavaScript or
in CSS.

110
00:06:54.800 --> 00:06:57.389
From CSS,
it's called declarative Shadow DOM.

111
00:06:57.389 --> 00:07:03.904
And you define Shadow DOM from here,
and Shadow DOM mode, and

112
00:07:03.904 --> 00:07:09.426
you say, actually,
Shadow Mode, not Shadow DOM.

113
00:07:09.426 --> 00:07:12.518
And you say, open or close?

114
00:07:12.518 --> 00:07:13.799
What is that?

115
00:07:13.799 --> 00:07:19.794
If you let CSS and JavaScript from the
outside to read the inside, that's open.

116
00:07:19.794 --> 00:07:25.394
Or if you wanna be a black box, and
then you don't let JavaScript or

117
00:07:25.394 --> 00:07:31.698
CSS to get into your web component,
and that's a close Shadow DOM, okay?

118
00:07:31.698 --> 00:07:35.845
So yes, you can apply CSS,
and you need to define or

119
00:07:35.845 --> 00:07:40.105
decide if you want it to be
a Shadow DOM or not, okay?

120
00:07:40.105 --> 00:07:47.309
So what's the difference here,
compared with the other solutions,

121
00:07:47.309 --> 00:07:53.793
is that I actually need a movie,
because I will render a movie.

122
00:07:53.793 --> 00:07:55.823
So I will start with no movie at all,

123
00:07:55.823 --> 00:07:59.703
and someone needs to send me a movie so
I can render the movie, okay?

124
00:07:59.703 --> 00:08:02.089
That's It's kind of the idea.

125
00:08:02.089 --> 00:08:04.655
So who is going to send that?

126
00:08:04.655 --> 00:08:08.332
We will see later, but
we can use connected callback.

127
00:08:14.372 --> 00:08:18.787
&gt;&gt; Maximiliano Firtman: And we can try
to get the ID from different places.

128
00:08:18.787 --> 00:08:24.729
Okay, there are many see many
places where we can get this.

129
00:08:24.729 --> 00:08:30.834
For example,
we could have a property call ID, okay?

130
00:08:30.834 --> 00:08:37.012
We can get it from data set, okay,
there are many ways to do that.

131
00:08:37.012 --> 00:08:40.499
We will probably refactor
this in a minute.

132
00:08:40.499 --> 00:08:42.438
It when we create a router, okay.

133
00:08:42.438 --> 00:08:45.462
So for now, let's say we will get an ID.

134
00:08:45.462 --> 00:08:47.382
In fact, so far, we can even fake the ID.

135
00:08:47.382 --> 00:08:51.383
Let's say the movie 14, okay, so
we will always render that one, and

136
00:08:51.383 --> 00:08:54.482
then we'll see where the ID
will will come from, okay.

137
00:08:54.482 --> 00:08:57.046
And then we need to render actually.

138
00:08:57.046 --> 00:09:01.758
We need to connect all the details,

139
00:09:01.758 --> 00:09:07.581
because rendering is typically a pattern.

140
00:09:07.581 --> 00:09:08.907
It's a pattern that I use.

141
00:09:08.907 --> 00:09:11.175
Not every developer is using this pattern.

142
00:09:11.175 --> 00:09:14.839
The pattern is creating a render method.

143
00:09:14.839 --> 00:09:19.386
I will explain why it's a good
idea to create a new method.

144
00:09:19.386 --> 00:09:23.913
This data connected web component
needs to go to a server.

145
00:09:23.913 --> 00:09:28.445
Because we need to go to a server,
we will probably call the API, right?

146
00:09:28.445 --> 00:09:33.192
For example, the API will
actually try to get the movie.

147
00:09:33.192 --> 00:09:35.471
So I need to call the API first.

148
00:09:35.471 --> 00:09:43.410
I need to import the API now we know that
we need to add Js, careful with that.

149
00:09:43.410 --> 00:09:47.276
The API, we have a get movie by ID.

150
00:09:47.276 --> 00:09:53.026
So if I do have the ID, for
example, this dot movie is my ID,

151
00:09:53.026 --> 00:10:00.053
this is returning a promise, so
I need to await for the promise, right?

152
00:10:00.053 --> 00:10:06.527
So if I need, if I other way, that means
that I need to add async to my function.

153
00:10:06.527 --> 00:10:08.741
So what's the problem with this?

154
00:10:08.741 --> 00:10:11.051
If I do this in connected callback,

155
00:10:11.051 --> 00:10:14.672
then I will need to add async
to the connected callback.

156
00:10:14.672 --> 00:10:18.144
And if you do that, you have a problem,

157
00:10:18.144 --> 00:10:23.513
because that's not the thing
Signature of the superclass,

158
00:10:23.513 --> 00:10:27.946
and then you're not that
it's not going to work.

159
00:10:27.946 --> 00:10:32.615
So connected callback is not
an asynchronous function.

160
00:10:32.615 --> 00:10:37.432
So of course, this function can call
an asynchronous function if you want

161
00:10:37.432 --> 00:10:39.461
to do it here, there are ways.

162
00:10:39.461 --> 00:10:44.247
You can wrap this, in a function,
an async function,

163
00:10:44.247 --> 00:10:50.711
put something like this and then
execute this little function like that.

164
00:10:50.711 --> 00:10:54.970
But it's kind of, yeah,
I'm not sure I want to do that.

165
00:10:54.970 --> 00:10:58.580
So it's much better to
just call render okay, or

166
00:10:58.580 --> 00:11:02.114
any other method and
that will solve the trick.

167
00:11:02.114 --> 00:11:03.682
Okay, does it make sense?

168
00:11:03.682 --> 00:11:08.624
But that's why we try to keep connected
callback as small as possible, and

169
00:11:08.624 --> 00:11:10.987
also without changing signature.

170
00:11:10.987 --> 00:11:14.141
We you cannot receive arguments,
for example.

171
00:11:14.141 --> 00:11:16.437
You can add that because, remember,

172
00:11:16.437 --> 00:11:19.537
arguments in JavaScript
actually does not exist.

173
00:11:19.537 --> 00:11:21.604
They are kind of a ghost.

174
00:11:21.604 --> 00:11:26.774
So I can add arguments here, but
no one is going to send me arguments ever.

175
00:11:26.774 --> 00:11:31.494
I won't get any values ever because
actually the browser is executing

176
00:11:31.494 --> 00:11:36.534
connective callback and I will never
get something from those arguments.

177
00:11:36.534 --> 00:11:39.280
Actually, what I want to change
is the movie, not the ID.

178
00:11:39.280 --> 00:11:42.260
So we can say this movie is movie 14.

179
00:11:42.260 --> 00:11:44.536
Of course, we will change that 14 later.

180
00:11:44.536 --> 00:11:48.727
That's to do here, and
I will get the movie.

181
00:11:48.727 --> 00:11:49.963
So actually,

182
00:11:49.963 --> 00:11:56.045
what something that I can do here is
there are many things that I can do.

183
00:11:56.045 --> 00:12:01.169
Maybe I can say this is,
let's say we have an ID start as null.

184
00:12:01.169 --> 00:12:06.022
So let's say the id as 14 and we use
the movie for the actual movie, okay?

185
00:12:06.022 --> 00:12:08.336
So that's probably gonna be better.

186
00:12:08.336 --> 00:12:14.529
So we keep the movie with all
the metadata from the movie there.

187
00:12:14.529 --> 00:12:17.009
Remember, get movie by id.

188
00:12:17.009 --> 00:12:21.015
It's just, fetching movies/id.

189
00:12:21.015 --> 00:12:26.524
So if you want to see how it
looks like API movies, 14,

190
00:12:26.524 --> 00:12:31.815
and this is what we're going
to get from JavaScript.

191
00:12:31.815 --> 00:12:37.201
Okay, 14 is many in black, three and,
yeah, title, Thailand, genre.

192
00:12:37.201 --> 00:12:40.725
And then we have overview the keywords,
the casting.

193
00:12:40.725 --> 00:12:44.866
Okay, Will Smith with the URL
of Will Smith as well.

194
00:12:44.866 --> 00:12:49.532
So we need to just get that JSON,
parse it, and populate,

195
00:12:49.532 --> 00:12:53.364
dynamically render our HTML with that,
okay?

196
00:12:53.364 --> 00:12:54.243
Does it make sense?

197
00:12:54.243 --> 00:12:59.038
So,
&gt;&gt; Maximiliano Firtman: Once we get

198
00:12:59.038 --> 00:13:05.922
the movie, we could also think of
what happens if I can get the movie,

199
00:13:05.922 --> 00:13:10.445
like if I'm using an ID
that doesn't exist.

200
00:13:10.445 --> 00:13:16.231
So the server is actually giving me
that text but it's not just the text.

201
00:13:16.231 --> 00:13:21.970
If you look at the network tab,
and look for

202
00:13:21.970 --> 00:13:26.920
all the server is giving me, sorry.

203
00:13:26.920 --> 00:13:28.487
Put this out.

204
00:13:33.039 --> 00:13:37.628
&gt;&gt; Maximiliano Firtman: It's giving me
a 404, because that movie does not exist.

205
00:13:37.628 --> 00:13:40.354
So we are using, in this case, the HD.

206
00:13:40.354 --> 00:13:44.264
Status codes to actually send
a message to the client.

207
00:13:44.264 --> 00:13:48.781
So, we should do something not
rendering the content, okay?

208
00:13:48.781 --> 00:13:53.780
So, we will solve that problem as well,
because in every real world project,

209
00:13:53.780 --> 00:13:55.921
you need to do error management.

210
00:13:55.921 --> 00:13:58.614
In every layer, okay?

211
00:13:58.614 --> 00:14:02.980
In every layer, Server side,
we have a lot of error management.

212
00:14:02.980 --> 00:14:07.223
But client side so far, we don't
have a lot and this is one place, so

213
00:14:07.223 --> 00:14:10.588
something quickly that I can
do is I can do a try catch.

214
00:14:10.588 --> 00:14:14.640
So if for
any reason I couldn't get the movie.

215
00:14:14.640 --> 00:14:16.906
It can be any reason actually.

216
00:14:16.906 --> 00:14:19.623
I need to do something, so alert the user.

217
00:14:19.623 --> 00:14:23.342
And we will do that, okay?

218
00:14:23.342 --> 00:14:28.187
And we'll see how to alert the user,
yeah, I can put an alert,

219
00:14:28.187 --> 00:14:32.676
a pretty old fashioned alert,
like movie does not exist.

220
00:14:32.676 --> 00:14:37.224
But that alert is pretty bad,
okay, it's also synchronous, so

221
00:14:37.224 --> 00:14:38.970
it's a really bad idea.

222
00:14:38.970 --> 00:14:40.993
So we will change that, okay?

223
00:14:40.993 --> 00:14:48.323
So we will replace that
alert in a few minutes.

224
00:14:48.323 --> 00:14:52.331
Then if we get the movie,
also we can say return, so

225
00:14:52.331 --> 00:14:55.419
we don't continue working with this.

226
00:14:55.419 --> 00:14:59.131
I need to get the template,
document, getElementbyId,

227
00:14:59.131 --> 00:15:04.129
I will do this one more time manually, and
probably the rest is just the same for

228
00:15:04.129 --> 00:15:05.969
the rest of the components.

229
00:15:05.969 --> 00:15:07.965
Okay, I need the template.

230
00:15:07.965 --> 00:15:12.263
The ID is template,
movie details, and remember,

231
00:15:12.263 --> 00:15:16.378
this is going to the HTML,
finding the template.

232
00:15:16.378 --> 00:15:20.997
So we can actually use a template and
then I need the content.

233
00:15:20.997 --> 00:15:25.843
It's template.content.cloneNode(true).

234
00:15:25.843 --> 00:15:31.842
The true has to do with
getting with a deep search.

235
00:15:31.842 --> 00:15:34.876
So, if that template has
other web components,

236
00:15:34.876 --> 00:15:39.026
it will also create an those web,
and clone those web components.

237
00:15:39.026 --> 00:15:45.834
And then,
I will AppendChild of that content.

238
00:15:48.495 --> 00:15:53.512
&gt;&gt; Maximiliano Firtman: So that means
that now the template has been created.

239
00:15:53.512 --> 00:15:58.688
So we have an instance of that template
in memory, and now it's in the dome.

240
00:15:58.688 --> 00:16:03.384
Here is in memory And
here is in the go, okay?

241
00:16:03.384 --> 00:16:06.846
So the next step is I need to
start setting all the data,

242
00:16:06.846 --> 00:16:08.652
I will just go two or three and

243
00:16:08.652 --> 00:16:13.651
then the rest we'll be copying from
the material because it's just the same.

244
00:16:13.651 --> 00:16:14.834
We don't wanna waste time on that.

245
00:16:14.834 --> 00:16:20.805
So for example, we get the h2 will be, so
I'm talking about the template, remember.

246
00:16:20.805 --> 00:16:21.990
This is a template.

247
00:16:21.990 --> 00:16:25.929
The h2 we have the title of the movie.

248
00:16:25.929 --> 00:16:27.807
The h3 we have the tagline,

249
00:16:27.807 --> 00:16:31.261
that is something from
coming from the data source.

250
00:16:31.261 --> 00:16:38.528
So we take the h2 and
then we change the textContent.

251
00:16:38.528 --> 00:16:42.695
For example, from movie title, and

252
00:16:42.695 --> 00:16:48.215
something similar for
the h3 with the tagline.

253
00:16:48.215 --> 00:16:50.355
I have a question for you,

254
00:16:50.355 --> 00:16:55.620
do you know the difference between
text content and innerHTML?

255
00:16:55.620 --> 00:17:00.066
This is vanilla JavaScript concept.

256
00:17:00.066 --> 00:17:03.139
&gt;&gt; Speaker 4: InnerHTML
accepts HTML attributes.

257
00:17:03.139 --> 00:17:06.549
&gt;&gt; Maximiliano Firtman: Yeah, so
innerHTML will accept HTML elements and

258
00:17:06.549 --> 00:17:09.561
attributes and
they will be passed as that.

259
00:17:09.561 --> 00:17:15.168
And it's actually a little unsafe, because
if someone is sending in the tagline,

260
00:17:15.168 --> 00:17:19.826
JavaScript, for example,
you will also be injecting JavaScript.

261
00:17:19.826 --> 00:17:26.573
So when you use innerHTML, you're opening
the door for cross-site scripting, okay?

262
00:17:26.573 --> 00:17:28.322
So that's unsafe.

263
00:17:28.322 --> 00:17:31.416
There is a safer way to also inject HTML,

264
00:17:31.416 --> 00:17:36.150
but we don't need HTML,
you need to use textContent always.

265
00:17:36.150 --> 00:17:38.481
It's faster and also it's safer.

266
00:17:38.481 --> 00:17:43.581
So if someone is hijacking your
database and injecting JavaScript code,

267
00:17:43.581 --> 00:17:48.353
when you are trying to insert that,
you will actually see the code and

268
00:17:48.353 --> 00:17:51.413
the code is not going to be executed,
okay?

269
00:17:51.413 --> 00:17:54.267
So that's the difference, okay?

270
00:17:54.267 --> 00:17:54.961
Makes sense?

271
00:17:54.961 --> 00:17:57.561
So, let's see if something appears now.

272
00:17:57.561 --> 00:18:01.674
Actually, to make this work, there
are a couple of things that I can do.

273
00:18:01.674 --> 00:18:05.228
I can go to the API, actually to app.js.

274
00:18:05.228 --> 00:18:08.294
Right now we are appending a new homepage.

275
00:18:08.294 --> 00:18:13.665
Maybe we can also append
a new details page,

276
00:18:13.665 --> 00:18:16.432
a movie details page.

277
00:18:16.432 --> 00:18:18.894
I will say, MovieDetails page.

278
00:18:18.894 --> 00:18:22.441
But if I search for MovieDetails page,

279
00:18:22.441 --> 00:18:26.640
VS Code is not really
suggesting me the class.

280
00:18:26.640 --> 00:18:30.039
And you can say, well,
maybe VS Code is not working, okay?

281
00:18:30.039 --> 00:18:32.077
But maybe something else.

282
00:18:32.077 --> 00:18:36.186
So if you go to MovieDetails page,
it's a class, okay?

283
00:18:36.186 --> 00:18:40.032
And you may be thinking,
but it's capital M, so

284
00:18:40.032 --> 00:18:43.207
it should be public, but let's go, okay?

285
00:18:43.207 --> 00:18:44.705
We are in JavaScript here.

286
00:18:44.705 --> 00:18:51.547
Actually, to make it work from
the outside, I need to export this.

287
00:18:51.547 --> 00:18:56.260
You need to explicitly add the export,
a default export or a normal export,

288
00:18:56.260 --> 00:18:58.627
because it's an ECMAScript module.

289
00:18:58.627 --> 00:19:04.567
So now if you try to create that,
it will appear.

290
00:19:04.567 --> 00:19:08.833
And here we can prove something
that I mentioned before.

291
00:19:08.833 --> 00:19:14.833
If I press Return here, look at
the auto import that VS Code will add.

292
00:19:14.833 --> 00:19:20.658
It will add me the right one,
even with .js, why?

293
00:19:20.658 --> 00:19:24.760
Because there are others in
the same project with .js so

294
00:19:24.760 --> 00:19:28.351
it recognizes that as the pattern for
this file.

295
00:19:28.351 --> 00:19:30.797
The problem is the first one only.

296
00:19:30.797 --> 00:19:36.376
&gt;&gt; Speaker 5: Why didn't we need to
export the animated loading component?

297
00:19:36.376 --> 00:19:40.307
&gt;&gt; Maximiliano Firtman: Just in case
you wanna use it from JavaScript.

298
00:19:40.307 --> 00:19:42.167
By the way,
that's a good question, actually.

299
00:19:42.167 --> 00:19:47.708
So, actually, we are exporting this
web component in two different ways.

300
00:19:47.708 --> 00:19:52.918
One is the export, and
the other one is customElements.defined.

301
00:19:52.918 --> 00:19:57.282
What happens if I don't define this?

302
00:19:57.282 --> 00:19:58.865
&gt;&gt; Speaker 5: It doesn't get registered.

303
00:19:58.865 --> 00:20:01.458
&gt;&gt; Maximiliano Firtman: It doesn't
get registered, but actually,

304
00:20:01.458 --> 00:20:02.625
I do have the class.

305
00:20:02.625 --> 00:20:06.123
So if I create the element
from JavaScript, and

306
00:20:06.123 --> 00:20:10.064
you check the element from JavaScript,
it may work.

307
00:20:10.064 --> 00:20:14.188
But it's not gonna work
if I use the tag in HTML.

308
00:20:14.188 --> 00:20:20.273
So the export is like a way to expose
your web component to JavaScript,

309
00:20:20.273 --> 00:20:25.223
and the custom elements defined
is a way to expose the same

310
00:20:25.223 --> 00:20:29.988
web component, but for
the HTML, does it make sense?

311
00:20:29.988 --> 00:20:34.599
&gt;&gt; Speaker 5: So utilities can be done,
I guess components created through

312
00:20:34.599 --> 00:20:39.300
JavaScript and actual elements
that you may need to render just

313
00:20:39.300 --> 00:20:43.574
I guess the way that you make
them available for the user.

314
00:20:43.574 --> 00:20:46.530
Say, like some of them are gonna be
created through pure JavaScript, and you

315
00:20:46.530 --> 00:20:49.635
can just call them from other components,
and the other ones could be your base.

316
00:20:49.635 --> 00:20:51.760
&gt;&gt; Maximiliano Firtman: Yeah,
that's right.

317
00:20:51.760 --> 00:20:55.012
&gt;&gt; Speaker 3: You need to call this
dot render inside connected call.

318
00:20:55.012 --> 00:20:56.444
&gt;&gt; Maximiliano Firtman: Yeah,
that's right.

319
00:20:56.444 --> 00:21:01.758
Because render, remember, is not part
of the lifecycle of a web component,

320
00:21:01.758 --> 00:21:04.639
so I need to call it explicitly from here.

321
00:21:04.639 --> 00:21:08.196
Also, you may wanna call it on every
time an attribute is changing.

322
00:21:08.196 --> 00:21:10.765
Maybe, okay?

323
00:21:10.765 --> 00:21:13.719
Maybe, okay,
it depends on the web component, but

324
00:21:13.719 --> 00:21:16.676
have in mind that this is
only connected callback and

325
00:21:16.676 --> 00:21:20.725
it's not going to rerender automatically
when an attribute changes.

326
00:21:20.725 --> 00:21:24.955
So it's not like reacted when a prop
is changing, render is executing again.

327
00:21:24.955 --> 00:21:30.134
No, not automatically, okay, yep?

328
00:21:30.134 --> 00:21:32.933
&gt;&gt; Speaker 3: Could you use
template strings in here?

329
00:21:32.933 --> 00:21:37.189
And what's the difference
between using the template and?

330
00:21:37.189 --> 00:21:41.208
&gt;&gt; Maximiliano Firtman: Yeah, so
a template string will be instead of using

331
00:21:41.208 --> 00:21:46.815
the HTML template, I could just say
something like this, inner HTML,

332
00:21:46.815 --> 00:21:52.059
and then open template string and
start writing my HTML like this.

333
00:21:52.059 --> 00:21:57.960
Here, we pull the title,
so there are differences.

334
00:21:57.960 --> 00:22:00.289
So first, it's a matter of taste and

335
00:22:00.289 --> 00:22:04.057
a decision on the design pattern
you are using in your page.

336
00:22:04.057 --> 00:22:10.732
This one is less safe for
this whole idea that we are using in HTML.

337
00:22:10.732 --> 00:22:15.555
Anyway, there is a new way that today
is kind of compatible with every

338
00:22:15.555 --> 00:22:17.977
browser to add HTML that is safer.

339
00:22:17.977 --> 00:22:21.823
Like it's not going to execute
JavaScript and that sort of things.

340
00:22:21.823 --> 00:22:28.558
Also, this may be a little slower,
not a big deal, to be honest.

341
00:22:28.558 --> 00:22:32.429
And also,
you are writing HTML inside the string.

342
00:22:32.429 --> 00:22:38.292
When your HTML is like, let's say clean
and semantic, it's not a big deal.

343
00:22:38.292 --> 00:22:42.712
But if you have a very large HTML,
tables and lots of tips, and

344
00:22:42.712 --> 00:22:48.237
it's difficult to actually even even
VS Code is not using the right colors for

345
00:22:48.237 --> 00:22:50.280
HTML, it's just a string.

346
00:22:50.280 --> 00:22:53.645
So if you have an error,
if you are not closing your tags,

347
00:22:53.645 --> 00:22:55.270
you will not realize that.

348
00:22:55.270 --> 00:22:59.753
I mean, if you have that problem, I mean,
I'm not closing the h2 in the right way,

349
00:22:59.753 --> 00:23:02.279
or I'm closing h6 here,
so this is wrong, but

350
00:23:02.279 --> 00:23:05.209
I'm not seeing any error
because it's just a string.

351
00:23:05.209 --> 00:23:08.589
And when you have it in the HTML, you can
use the tools to help you with that, so

352
00:23:08.589 --> 00:23:09.854
those are the differences.

353
00:23:09.854 --> 00:23:12.447
The final result will be the same.

